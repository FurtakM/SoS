// starting begin ResetFog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// PrepareTriggers ;
   8: CALL 45 0 0
// PrepareInits ;
  12: CALL 156 0 0
// PrepareDifficulty ;
  16: CALL 208 0 0
// PrepareNature ;
  20: CALL 11642 0 0
// PrepareArabian ;
  24: CALL 8594 0 0
// PrepareHero ;
  28: CALL 461 0 0
// PrepareRussian ;
  32: CALL 3712 0 0
// PrepareAmerican ;
  36: CALL 657 0 0
// PrepareBases ;
  40: CALL 12188 0 0
// end ;
  44: END
// export Louis_Prepare , Russian_Attack , See_Bird , See_Tiger , See_Apeman , First_Warn , TimeUp , RadioAct , VehIsNotCapt ; export counter , russian_kills , veh_list ; function PrepareTriggers ; begin
  45: LD_INT 0
  47: PPUSH
// Louis_Prepare = false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// RadioAct = false ;
  56: LD_ADDR_EXP 8
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// Russian_Attack = false ;
  64: LD_ADDR_EXP 2
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// See_Bird = true ;
  72: LD_ADDR_EXP 3
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// See_Tiger = true ;
  80: LD_ADDR_EXP 4
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// See_Apeman = true ;
  88: LD_ADDR_EXP 5
  92: PUSH
  93: LD_INT 1
  95: ST_TO_ADDR
// First_Warn = true ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_INT 1
 103: ST_TO_ADDR
// TimeUp = false ;
 104: LD_ADDR_EXP 7
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// VehIsNotCapt = true ;
 112: LD_ADDR_EXP 9
 116: PUSH
 117: LD_INT 1
 119: ST_TO_ADDR
// display_strings = [ ] ;
 120: LD_ADDR_OWVAR 47
 124: PUSH
 125: EMPTY
 126: ST_TO_ADDR
// russian_kills := 0 ;
 127: LD_ADDR_EXP 11
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// veh_list := 0 ;
 135: LD_ADDR_EXP 12
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// counter := 0 0$00 ;
 143: LD_ADDR_EXP 10
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// end ;
 151: LD_VAR 0 1
 155: RET
// function PrepareInits ; begin
 156: LD_INT 0
 158: PPUSH
// InitUc ;
 159: CALL_OW 18
// InitHc ;
 163: CALL_OW 19
// InitVc ;
 167: CALL_OW 20
// InitBc ;
 171: CALL_OW 21
// end ;
 175: LD_VAR 0 1
 179: RET
// export function PrepareAudio ( nat , clas ) ; begin
 180: LD_INT 0
 182: PPUSH
// music_nat = nat ;
 183: LD_ADDR_OWVAR 71
 187: PUSH
 188: LD_VAR 0 1
 192: ST_TO_ADDR
// music_class = clas ;
 193: LD_ADDR_OWVAR 72
 197: PUSH
 198: LD_VAR 0 2
 202: ST_TO_ADDR
// end ;
 203: LD_VAR 0 3
 207: RET
// export Level , Statistic , Mines , Medal_RuKill , Live_Pep , Dif_liv ; function PrepareDifficulty ; begin
 208: LD_INT 0
 210: PPUSH
// Level := [ 0 , 1 , 3 ] [ Difficulty ] ;
 211: LD_ADDR_EXP 13
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 1
 221: PUSH
 222: LD_INT 3
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: LIST
 229: PUSH
 230: LD_OWVAR 67
 234: ARRAY
 235: ST_TO_ADDR
// Statistic := [ 20 , 30 , 40 ] [ Difficulty ] ;
 236: LD_ADDR_EXP 14
 240: PUSH
 241: LD_INT 20
 243: PUSH
 244: LD_INT 30
 246: PUSH
 247: LD_INT 40
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: LIST
 254: PUSH
 255: LD_OWVAR 67
 259: ARRAY
 260: ST_TO_ADDR
// Mines := [ 50 , 25 , 10 ] [ Difficulty ] ;
 261: LD_ADDR_EXP 15
 265: PUSH
 266: LD_INT 50
 268: PUSH
 269: LD_INT 25
 271: PUSH
 272: LD_INT 10
 274: PUSH
 275: EMPTY
 276: LIST
 277: LIST
 278: LIST
 279: PUSH
 280: LD_OWVAR 67
 284: ARRAY
 285: ST_TO_ADDR
// Medal_RuKill := [ 30 , 45 , 60 ] [ Difficulty ] ;
 286: LD_ADDR_EXP 16
 290: PUSH
 291: LD_INT 30
 293: PUSH
 294: LD_INT 45
 296: PUSH
 297: LD_INT 60
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PUSH
 305: LD_OWVAR 67
 309: ARRAY
 310: ST_TO_ADDR
// Live_Pep := [ 4 , 5 , 6 ] [ Difficulty ] ;
 311: LD_ADDR_EXP 17
 315: PUSH
 316: LD_INT 4
 318: PUSH
 319: LD_INT 5
 321: PUSH
 322: LD_INT 6
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: LIST
 329: PUSH
 330: LD_OWVAR 67
 334: ARRAY
 335: ST_TO_ADDR
// Dif_liv := [ 420 , 490 , 510 ] [ Difficulty ] ;
 336: LD_ADDR_EXP 18
 340: PUSH
 341: LD_INT 420
 343: PUSH
 344: LD_INT 490
 346: PUSH
 347: LD_INT 510
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: LIST
 354: PUSH
 355: LD_OWVAR 67
 359: ARRAY
 360: ST_TO_ADDR
// end ;
 361: LD_VAR 0 1
 365: RET
// every 0 0$01 trigger russian_kills > 0 do var l ;
 366: LD_EXP 11
 370: PUSH
 371: LD_INT 0
 373: GREATER
 374: IFFALSE 458
 376: GO 378
 378: DISABLE
 379: LD_INT 0
 381: PPUSH
// begin l = 1 ;
 382: LD_ADDR_VAR 0 1
 386: PUSH
 387: LD_INT 1
 389: ST_TO_ADDR
// repeat begin PrepareAudio ( Rand ( 1 , 2 ) , Rand ( 1 , 3 ) ) ;
 390: LD_INT 1
 392: PPUSH
 393: LD_INT 2
 395: PPUSH
 396: CALL_OW 12
 400: PPUSH
 401: LD_INT 1
 403: PPUSH
 404: LD_INT 3
 406: PPUSH
 407: CALL_OW 12
 411: PPUSH
 412: CALL 180 0 2
// Wait ( 2 2$0 ) ;
 416: LD_INT 4200
 418: PPUSH
 419: CALL_OW 67
// PrepareAudio ( 3 , Rand ( 1 , 3 ) ) ;
 423: LD_INT 3
 425: PPUSH
 426: LD_INT 1
 428: PPUSH
 429: LD_INT 3
 431: PPUSH
 432: CALL_OW 12
 436: PPUSH
 437: CALL 180 0 2
// Wait ( 2 2$0 ) ;
 441: LD_INT 4200
 443: PPUSH
 444: CALL_OW 67
// end until l < 0 ;
 448: LD_VAR 0 1
 452: PUSH
 453: LD_INT 0
 455: LESS
 456: IFFALSE 390
// end ; end_of_file
 458: PPOPN 1
 460: END
// export Louis ; export function PrepareHero ; begin
 461: LD_INT 0
 463: PPUSH
// CenterNowOnXY ( 128 , 184 ) ;
 464: LD_INT 128
 466: PPUSH
 467: LD_INT 184
 469: PPUSH
 470: CALL_OW 86
// uc_side = 2 ;
 474: LD_ADDR_OWVAR 20
 478: PUSH
 479: LD_INT 2
 481: ST_TO_ADDR
// uc_nation = 2 ;
 482: LD_ADDR_OWVAR 21
 486: PUSH
 487: LD_INT 2
 489: ST_TO_ADDR
// hc_gallery = sandar ;
 490: LD_ADDR_OWVAR 33
 494: PUSH
 495: LD_STRING sandar
 497: ST_TO_ADDR
// hc_face_number = 1 ;
 498: LD_ADDR_OWVAR 34
 502: PUSH
 503: LD_INT 1
 505: ST_TO_ADDR
// hc_name = Louis Schulz ;
 506: LD_ADDR_OWVAR 26
 510: PUSH
 511: LD_STRING Louis Schulz
 513: ST_TO_ADDR
// hc_attr = [ 10 , 11 ] ;
 514: LD_ADDR_OWVAR 29
 518: PUSH
 519: LD_INT 10
 521: PUSH
 522: LD_INT 11
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: ST_TO_ADDR
// hc_basic_skills = [ 1 , 0 , 0 , 0 ] ;
 529: LD_ADDR_OWVAR 30
 533: PUSH
 534: LD_INT 1
 536: PUSH
 537: LD_INT 0
 539: PUSH
 540: LD_INT 0
 542: PUSH
 543: LD_INT 0
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: LIST
 550: LIST
 551: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 0 , 0 ] ;
 552: LD_ADDR_OWVAR 31
 556: PUSH
 557: LD_INT 4
 559: PUSH
 560: LD_INT 2
 562: PUSH
 563: LD_INT 0
 565: PUSH
 566: LD_INT 0
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: LIST
 574: ST_TO_ADDR
// hc_sex = sex_male ;
 575: LD_ADDR_OWVAR 27
 579: PUSH
 580: LD_INT 1
 582: ST_TO_ADDR
// hc_class = 1 ;
 583: LD_ADDR_OWVAR 28
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// hc_importance = 100 ;
 591: LD_ADDR_OWVAR 32
 595: PUSH
 596: LD_INT 100
 598: ST_TO_ADDR
// Louis = CreateHuman ;
 599: LD_ADDR_EXP 19
 603: PUSH
 604: CALL_OW 44
 608: ST_TO_ADDR
// PlaceUnitArea ( Louis , LStart , true ) ;
 609: LD_EXP 19
 613: PPUSH
 614: LD_INT 8
 616: PPUSH
 617: LD_INT 1
 619: PPUSH
 620: CALL_OW 49
// hc_importance := 0 ;
 624: LD_ADDR_OWVAR 32
 628: PUSH
 629: LD_INT 0
 631: ST_TO_ADDR
// CenterNowOnUnits ( Louis ) ;
 632: LD_EXP 19
 636: PPUSH
 637: CALL_OW 87
// Wait ( 0 0$4.7 ) ;
 641: LD_INT 165
 643: PPUSH
 644: CALL_OW 67
// Action ;
 648: CALL 9740 0 0
// end ; end_of_file
 652: LD_VAR 0 1
 656: RET
// export am , dow , kl ; export am_arm , am_bun , am_tw , am_lab , am_wrk , am_sol , am_eng , am_mech , am_sci , am_veh , am_factory , am_limit ; export function PrepareAmerican ; var i , un , b , x1 , y1 , k , l ; begin
 657: LD_INT 0
 659: PPUSH
 660: PPUSH
 661: PPUSH
 662: PPUSH
 663: PPUSH
 664: PPUSH
 665: PPUSH
 666: PPUSH
// am := 1 ;
 667: LD_ADDR_EXP 20
 671: PUSH
 672: LD_INT 1
 674: ST_TO_ADDR
// am_arm := FilterAllUnits ( [ [ f_side , am ] , [ f_btype , b_armoury ] ] ) ;
 675: LD_ADDR_EXP 23
 679: PUSH
 680: LD_INT 22
 682: PUSH
 683: LD_EXP 20
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PUSH
 692: LD_INT 30
 694: PUSH
 695: LD_INT 4
 697: PUSH
 698: EMPTY
 699: LIST
 700: LIST
 701: PUSH
 702: EMPTY
 703: LIST
 704: LIST
 705: PPUSH
 706: CALL_OW 69
 710: ST_TO_ADDR
// am_bun := FilterAllUnits ( [ [ f_side , am ] , [ f_btype , b_breastwork ] ] ) ;
 711: LD_ADDR_EXP 24
 715: PUSH
 716: LD_INT 22
 718: PUSH
 719: LD_EXP 20
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: PUSH
 728: LD_INT 30
 730: PUSH
 731: LD_INT 31
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 69
 746: ST_TO_ADDR
// am_tw := FilterAllUnits ( [ [ f_side , am ] , [ f_btype , b_bunker ] ] ) ;
 747: LD_ADDR_EXP 25
 751: PUSH
 752: LD_INT 22
 754: PUSH
 755: LD_EXP 20
 759: PUSH
 760: EMPTY
 761: LIST
 762: LIST
 763: PUSH
 764: LD_INT 30
 766: PUSH
 767: LD_INT 32
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: PPUSH
 778: CALL_OW 69
 782: ST_TO_ADDR
// am_lab := FilterAllUnits ( [ [ f_side , am ] , [ f_btype , b_lab ] ] ) ;
 783: LD_ADDR_EXP 26
 787: PUSH
 788: LD_INT 22
 790: PUSH
 791: LD_EXP 20
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: PUSH
 800: LD_INT 30
 802: PUSH
 803: LD_INT 6
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PPUSH
 814: CALL_OW 69
 818: ST_TO_ADDR
// am_wrk := FilterAllUnits ( [ [ f_side , am ] , [ f_btype , b_workshop ] ] ) ;
 819: LD_ADDR_EXP 27
 823: PUSH
 824: LD_INT 22
 826: PUSH
 827: LD_EXP 20
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: PUSH
 836: LD_INT 30
 838: PUSH
 839: LD_INT 2
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: PUSH
 846: EMPTY
 847: LIST
 848: LIST
 849: PPUSH
 850: CALL_OW 69
 854: ST_TO_ADDR
// am_veh := [ ] ;
 855: LD_ADDR_EXP 32
 859: PUSH
 860: EMPTY
 861: ST_TO_ADDR
// uc_side = am ;
 862: LD_ADDR_OWVAR 20
 866: PUSH
 867: LD_EXP 20
 871: ST_TO_ADDR
// uc_nation = 1 ;
 872: LD_ADDR_OWVAR 21
 876: PUSH
 877: LD_INT 1
 879: ST_TO_ADDR
// hc_gallery =  ;
 880: LD_ADDR_OWVAR 33
 884: PUSH
 885: LD_STRING 
 887: ST_TO_ADDR
// hc_name =  ;
 888: LD_ADDR_OWVAR 26
 892: PUSH
 893: LD_STRING 
 895: ST_TO_ADDR
// hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
 896: LD_ADDR_OWVAR 29
 900: PUSH
 901: LD_INT 9
 903: PPUSH
 904: LD_INT 11
 906: PPUSH
 907: CALL_OW 12
 911: PUSH
 912: LD_INT 10
 914: PPUSH
 915: LD_INT 12
 917: PPUSH
 918: CALL_OW 12
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: ST_TO_ADDR
// i = 0 ;
 927: LD_ADDR_VAR 0 2
 931: PUSH
 932: LD_INT 0
 934: ST_TO_ADDR
// k = 1 ;
 935: LD_ADDR_VAR 0 7
 939: PUSH
 940: LD_INT 1
 942: ST_TO_ADDR
// x1 = [ 87 , 93 , 108 ] ;
 943: LD_ADDR_VAR 0 5
 947: PUSH
 948: LD_INT 87
 950: PUSH
 951: LD_INT 93
 953: PUSH
 954: LD_INT 108
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: LIST
 961: ST_TO_ADDR
// y1 = [ 126 , 122 , 140 ] ;
 962: LD_ADDR_VAR 0 6
 966: PUSH
 967: LD_INT 126
 969: PUSH
 970: LD_INT 122
 972: PUSH
 973: LD_INT 140
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: LIST
 980: ST_TO_ADDR
// for i = 1 to 3 do
 981: LD_ADDR_VAR 0 2
 985: PUSH
 986: DOUBLE
 987: LD_INT 1
 989: DEC
 990: ST_TO_ADDR
 991: LD_INT 3
 993: PUSH
 994: FOR_TO
 995: IFFALSE 1191
// begin hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
 997: LD_ADDR_OWVAR 29
1001: PUSH
1002: LD_INT 9
1004: PPUSH
1005: LD_INT 11
1007: PPUSH
1008: CALL_OW 12
1012: PUSH
1013: LD_INT 10
1015: PPUSH
1016: LD_INT 12
1018: PPUSH
1019: CALL_OW 12
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) ] ;
1028: LD_ADDR_OWVAR 31
1032: PUSH
1033: LD_INT 0
1035: PPUSH
1036: LD_INT 5
1038: PPUSH
1039: CALL_OW 12
1043: PUSH
1044: LD_INT 0
1046: PPUSH
1047: LD_INT 5
1049: PPUSH
1050: CALL_OW 12
1054: PUSH
1055: LD_INT 0
1057: PPUSH
1058: LD_INT 5
1060: PPUSH
1061: CALL_OW 12
1065: PUSH
1066: LD_INT 0
1068: PPUSH
1069: LD_INT 5
1071: PPUSH
1072: CALL_OW 12
1076: PUSH
1077: EMPTY
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
1083: LD_ADDR_OWVAR 27
1087: PUSH
1088: LD_INT 1
1090: PPUSH
1091: LD_INT 2
1093: PPUSH
1094: CALL_OW 12
1098: ST_TO_ADDR
// hc_class = 1 ;
1099: LD_ADDR_OWVAR 28
1103: PUSH
1104: LD_INT 1
1106: ST_TO_ADDR
// un := CreateHuman ;
1107: LD_ADDR_VAR 0 3
1111: PUSH
1112: CALL_OW 44
1116: ST_TO_ADDR
// PlaceUnitXY ( un , x1 [ k ] , y1 [ k ] , false ) ;
1117: LD_VAR 0 3
1121: PPUSH
1122: LD_VAR 0 5
1126: PUSH
1127: LD_VAR 0 7
1131: ARRAY
1132: PPUSH
1133: LD_VAR 0 6
1137: PUSH
1138: LD_VAR 0 7
1142: ARRAY
1143: PPUSH
1144: LD_INT 0
1146: PPUSH
1147: CALL_OW 48
// k := k + 1 ;
1151: LD_ADDR_VAR 0 7
1155: PUSH
1156: LD_VAR 0 7
1160: PUSH
1161: LD_INT 1
1163: PLUS
1164: ST_TO_ADDR
// ComEnterUnit ( un , NearestUnitToUnit ( am_bun , un ) ) ;
1165: LD_VAR 0 3
1169: PPUSH
1170: LD_EXP 24
1174: PPUSH
1175: LD_VAR 0 3
1179: PPUSH
1180: CALL_OW 74
1184: PPUSH
1185: CALL_OW 120
// end ;
1189: GO 994
1191: POP
1192: POP
// for i in am_tw do
1193: LD_ADDR_VAR 0 2
1197: PUSH
1198: LD_EXP 25
1202: PUSH
1203: FOR_IN
1204: IFFALSE 1357
// begin if IsInUnit ( i ) = 0 then
1206: LD_VAR 0 2
1210: PPUSH
1211: CALL_OW 310
1215: PUSH
1216: LD_INT 0
1218: EQUAL
1219: IFFALSE 1355
// begin hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
1221: LD_ADDR_OWVAR 29
1225: PUSH
1226: LD_INT 9
1228: PPUSH
1229: LD_INT 11
1231: PPUSH
1232: CALL_OW 12
1236: PUSH
1237: LD_INT 10
1239: PPUSH
1240: LD_INT 12
1242: PPUSH
1243: CALL_OW 12
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) ] ;
1252: LD_ADDR_OWVAR 31
1256: PUSH
1257: LD_INT 0
1259: PPUSH
1260: LD_INT 5
1262: PPUSH
1263: CALL_OW 12
1267: PUSH
1268: LD_INT 0
1270: PPUSH
1271: LD_INT 5
1273: PPUSH
1274: CALL_OW 12
1278: PUSH
1279: LD_INT 0
1281: PPUSH
1282: LD_INT 5
1284: PPUSH
1285: CALL_OW 12
1289: PUSH
1290: LD_INT 0
1292: PPUSH
1293: LD_INT 5
1295: PPUSH
1296: CALL_OW 12
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
1307: LD_ADDR_OWVAR 27
1311: PUSH
1312: LD_INT 1
1314: PPUSH
1315: LD_INT 2
1317: PPUSH
1318: CALL_OW 12
1322: ST_TO_ADDR
// hc_class = 1 ;
1323: LD_ADDR_OWVAR 28
1327: PUSH
1328: LD_INT 1
1330: ST_TO_ADDR
// un := CreateHuman ;
1331: LD_ADDR_VAR 0 3
1335: PUSH
1336: CALL_OW 44
1340: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
1341: LD_VAR 0 3
1345: PPUSH
1346: LD_VAR 0 2
1350: PPUSH
1351: CALL_OW 52
// end ; end ;
1355: GO 1203
1357: POP
1358: POP
// for i in am_arm do
1359: LD_ADDR_VAR 0 2
1363: PUSH
1364: LD_EXP 23
1368: PUSH
1369: FOR_IN
1370: IFFALSE 1555
// begin l = 0 ;
1372: LD_ADDR_VAR 0 8
1376: PUSH
1377: LD_INT 0
1379: ST_TO_ADDR
// if IsInUnit ( i ) = 0 then
1380: LD_VAR 0 2
1384: PPUSH
1385: CALL_OW 310
1389: PUSH
1390: LD_INT 0
1392: EQUAL
1393: IFFALSE 1553
// begin repeat begin hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
1395: LD_ADDR_OWVAR 29
1399: PUSH
1400: LD_INT 9
1402: PPUSH
1403: LD_INT 11
1405: PPUSH
1406: CALL_OW 12
1410: PUSH
1411: LD_INT 10
1413: PPUSH
1414: LD_INT 12
1416: PPUSH
1417: CALL_OW 12
1421: PUSH
1422: EMPTY
1423: LIST
1424: LIST
1425: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) ] ;
1426: LD_ADDR_OWVAR 31
1430: PUSH
1431: LD_INT 0
1433: PPUSH
1434: LD_INT 5
1436: PPUSH
1437: CALL_OW 12
1441: PUSH
1442: LD_INT 0
1444: PPUSH
1445: LD_INT 5
1447: PPUSH
1448: CALL_OW 12
1452: PUSH
1453: LD_INT 0
1455: PPUSH
1456: LD_INT 5
1458: PPUSH
1459: CALL_OW 12
1463: PUSH
1464: LD_INT 0
1466: PPUSH
1467: LD_INT 5
1469: PPUSH
1470: CALL_OW 12
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
1481: LD_ADDR_OWVAR 27
1485: PUSH
1486: LD_INT 1
1488: PPUSH
1489: LD_INT 2
1491: PPUSH
1492: CALL_OW 12
1496: ST_TO_ADDR
// hc_class = 1 ;
1497: LD_ADDR_OWVAR 28
1501: PUSH
1502: LD_INT 1
1504: ST_TO_ADDR
// un := CreateHuman ;
1505: LD_ADDR_VAR 0 3
1509: PUSH
1510: CALL_OW 44
1514: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
1515: LD_VAR 0 3
1519: PPUSH
1520: LD_VAR 0 2
1524: PPUSH
1525: CALL_OW 52
// l = l + 1 ;
1529: LD_ADDR_VAR 0 8
1533: PUSH
1534: LD_VAR 0 8
1538: PUSH
1539: LD_INT 1
1541: PLUS
1542: ST_TO_ADDR
// end until l = 3 ;
1543: LD_VAR 0 8
1547: PUSH
1548: LD_INT 3
1550: EQUAL
1551: IFFALSE 1395
// end ; end ;
1553: GO 1369
1555: POP
1556: POP
// for i in am_lab do
1557: LD_ADDR_VAR 0 2
1561: PUSH
1562: LD_EXP 26
1566: PUSH
1567: FOR_IN
1568: IFFALSE 1753
// begin l = 0 ;
1570: LD_ADDR_VAR 0 8
1574: PUSH
1575: LD_INT 0
1577: ST_TO_ADDR
// if IsInUnit ( i ) = 0 then
1578: LD_VAR 0 2
1582: PPUSH
1583: CALL_OW 310
1587: PUSH
1588: LD_INT 0
1590: EQUAL
1591: IFFALSE 1751
// begin repeat begin hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
1593: LD_ADDR_OWVAR 29
1597: PUSH
1598: LD_INT 9
1600: PPUSH
1601: LD_INT 11
1603: PPUSH
1604: CALL_OW 12
1608: PUSH
1609: LD_INT 10
1611: PPUSH
1612: LD_INT 12
1614: PPUSH
1615: CALL_OW 12
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) ] ;
1624: LD_ADDR_OWVAR 31
1628: PUSH
1629: LD_INT 0
1631: PPUSH
1632: LD_INT 5
1634: PPUSH
1635: CALL_OW 12
1639: PUSH
1640: LD_INT 0
1642: PPUSH
1643: LD_INT 5
1645: PPUSH
1646: CALL_OW 12
1650: PUSH
1651: LD_INT 0
1653: PPUSH
1654: LD_INT 5
1656: PPUSH
1657: CALL_OW 12
1661: PUSH
1662: LD_INT 0
1664: PPUSH
1665: LD_INT 5
1667: PPUSH
1668: CALL_OW 12
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
1679: LD_ADDR_OWVAR 27
1683: PUSH
1684: LD_INT 1
1686: PPUSH
1687: LD_INT 2
1689: PPUSH
1690: CALL_OW 12
1694: ST_TO_ADDR
// hc_class = 4 ;
1695: LD_ADDR_OWVAR 28
1699: PUSH
1700: LD_INT 4
1702: ST_TO_ADDR
// un := CreateHuman ;
1703: LD_ADDR_VAR 0 3
1707: PUSH
1708: CALL_OW 44
1712: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
1713: LD_VAR 0 3
1717: PPUSH
1718: LD_VAR 0 2
1722: PPUSH
1723: CALL_OW 52
// l = l + 1 ;
1727: LD_ADDR_VAR 0 8
1731: PUSH
1732: LD_VAR 0 8
1736: PUSH
1737: LD_INT 1
1739: PLUS
1740: ST_TO_ADDR
// end until l = 3 ;
1741: LD_VAR 0 8
1745: PUSH
1746: LD_INT 3
1748: EQUAL
1749: IFFALSE 1593
// end ; end ;
1751: GO 1567
1753: POP
1754: POP
// for i in am_wrk do
1755: LD_ADDR_VAR 0 2
1759: PUSH
1760: LD_EXP 27
1764: PUSH
1765: FOR_IN
1766: IFFALSE 1951
// begin l = 0 ;
1768: LD_ADDR_VAR 0 8
1772: PUSH
1773: LD_INT 0
1775: ST_TO_ADDR
// if IsInUnit ( i ) = 0 then
1776: LD_VAR 0 2
1780: PPUSH
1781: CALL_OW 310
1785: PUSH
1786: LD_INT 0
1788: EQUAL
1789: IFFALSE 1949
// begin repeat begin hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
1791: LD_ADDR_OWVAR 29
1795: PUSH
1796: LD_INT 9
1798: PPUSH
1799: LD_INT 11
1801: PPUSH
1802: CALL_OW 12
1806: PUSH
1807: LD_INT 10
1809: PPUSH
1810: LD_INT 12
1812: PPUSH
1813: CALL_OW 12
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) ] ;
1822: LD_ADDR_OWVAR 31
1826: PUSH
1827: LD_INT 0
1829: PPUSH
1830: LD_INT 5
1832: PPUSH
1833: CALL_OW 12
1837: PUSH
1838: LD_INT 0
1840: PPUSH
1841: LD_INT 5
1843: PPUSH
1844: CALL_OW 12
1848: PUSH
1849: LD_INT 0
1851: PPUSH
1852: LD_INT 5
1854: PPUSH
1855: CALL_OW 12
1859: PUSH
1860: LD_INT 0
1862: PPUSH
1863: LD_INT 5
1865: PPUSH
1866: CALL_OW 12
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
1877: LD_ADDR_OWVAR 27
1881: PUSH
1882: LD_INT 1
1884: PPUSH
1885: LD_INT 2
1887: PPUSH
1888: CALL_OW 12
1892: ST_TO_ADDR
// hc_class = 3 ;
1893: LD_ADDR_OWVAR 28
1897: PUSH
1898: LD_INT 3
1900: ST_TO_ADDR
// un := CreateHuman ;
1901: LD_ADDR_VAR 0 3
1905: PUSH
1906: CALL_OW 44
1910: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
1911: LD_VAR 0 3
1915: PPUSH
1916: LD_VAR 0 2
1920: PPUSH
1921: CALL_OW 52
// l = l + 1 ;
1925: LD_ADDR_VAR 0 8
1929: PUSH
1930: LD_VAR 0 8
1934: PUSH
1935: LD_INT 1
1937: PLUS
1938: ST_TO_ADDR
// end until l = 3 ;
1939: LD_VAR 0 8
1943: PUSH
1944: LD_INT 3
1946: EQUAL
1947: IFFALSE 1791
// end ; end ;
1949: GO 1765
1951: POP
1952: POP
// for i in am_dep do
1953: LD_ADDR_VAR 0 2
1957: PUSH
1958: LD_INT 1
1960: PUSH
1961: FOR_IN
1962: IFFALSE 2147
// begin l = 0 ;
1964: LD_ADDR_VAR 0 8
1968: PUSH
1969: LD_INT 0
1971: ST_TO_ADDR
// if IsInUnit ( i ) = 0 then
1972: LD_VAR 0 2
1976: PPUSH
1977: CALL_OW 310
1981: PUSH
1982: LD_INT 0
1984: EQUAL
1985: IFFALSE 2145
// begin repeat begin hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
1987: LD_ADDR_OWVAR 29
1991: PUSH
1992: LD_INT 9
1994: PPUSH
1995: LD_INT 11
1997: PPUSH
1998: CALL_OW 12
2002: PUSH
2003: LD_INT 10
2005: PPUSH
2006: LD_INT 12
2008: PPUSH
2009: CALL_OW 12
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) ] ;
2018: LD_ADDR_OWVAR 31
2022: PUSH
2023: LD_INT 0
2025: PPUSH
2026: LD_INT 5
2028: PPUSH
2029: CALL_OW 12
2033: PUSH
2034: LD_INT 0
2036: PPUSH
2037: LD_INT 5
2039: PPUSH
2040: CALL_OW 12
2044: PUSH
2045: LD_INT 0
2047: PPUSH
2048: LD_INT 5
2050: PPUSH
2051: CALL_OW 12
2055: PUSH
2056: LD_INT 0
2058: PPUSH
2059: LD_INT 5
2061: PPUSH
2062: CALL_OW 12
2066: PUSH
2067: EMPTY
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
2073: LD_ADDR_OWVAR 27
2077: PUSH
2078: LD_INT 1
2080: PPUSH
2081: LD_INT 2
2083: PPUSH
2084: CALL_OW 12
2088: ST_TO_ADDR
// hc_class = 2 ;
2089: LD_ADDR_OWVAR 28
2093: PUSH
2094: LD_INT 2
2096: ST_TO_ADDR
// un := CreateHuman ;
2097: LD_ADDR_VAR 0 3
2101: PUSH
2102: CALL_OW 44
2106: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2107: LD_VAR 0 3
2111: PPUSH
2112: LD_VAR 0 2
2116: PPUSH
2117: CALL_OW 52
// l = l + 1 ;
2121: LD_ADDR_VAR 0 8
2125: PUSH
2126: LD_VAR 0 8
2130: PUSH
2131: LD_INT 1
2133: PLUS
2134: ST_TO_ADDR
// end until l = 4 ;
2135: LD_VAR 0 8
2139: PUSH
2140: LD_INT 4
2142: EQUAL
2143: IFFALSE 1987
// end ; end ;
2145: GO 1961
2147: POP
2148: POP
// hc_name = John Carl Patoshik ;
2149: LD_ADDR_OWVAR 26
2153: PUSH
2154: LD_STRING John Carl Patoshik
2156: ST_TO_ADDR
// hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
2157: LD_ADDR_OWVAR 29
2161: PUSH
2162: LD_INT 9
2164: PPUSH
2165: LD_INT 11
2167: PPUSH
2168: CALL_OW 12
2172: PUSH
2173: LD_INT 10
2175: PPUSH
2176: LD_INT 12
2178: PPUSH
2179: CALL_OW 12
2183: PUSH
2184: EMPTY
2185: LIST
2186: LIST
2187: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) , Rand ( 0 , 5 ) ] ;
2188: LD_ADDR_OWVAR 31
2192: PUSH
2193: LD_INT 0
2195: PPUSH
2196: LD_INT 5
2198: PPUSH
2199: CALL_OW 12
2203: PUSH
2204: LD_INT 0
2206: PPUSH
2207: LD_INT 5
2209: PPUSH
2210: CALL_OW 12
2214: PUSH
2215: LD_INT 0
2217: PPUSH
2218: LD_INT 5
2220: PPUSH
2221: CALL_OW 12
2225: PUSH
2226: LD_INT 0
2228: PPUSH
2229: LD_INT 5
2231: PPUSH
2232: CALL_OW 12
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: LIST
2241: LIST
2242: ST_TO_ADDR
// hc_sex = sex_male ;
2243: LD_ADDR_OWVAR 27
2247: PUSH
2248: LD_INT 1
2250: ST_TO_ADDR
// hc_class = 1 ;
2251: LD_ADDR_OWVAR 28
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// dow := CreateHuman ;
2259: LD_ADDR_EXP 21
2263: PUSH
2264: CALL_OW 44
2268: ST_TO_ADDR
// PlaceUnitXY ( dow , 79 , 120 , false ) ;
2269: LD_EXP 21
2273: PPUSH
2274: LD_INT 79
2276: PPUSH
2277: LD_INT 120
2279: PPUSH
2280: LD_INT 0
2282: PPUSH
2283: CALL_OW 48
// ComHold ( un ) ;
2287: LD_VAR 0 3
2291: PPUSH
2292: CALL_OW 140
// am_sol := FilterAllUnits ( [ [ f_side , am ] , [ f_class , 1 ] ] ) ;
2296: LD_ADDR_EXP 28
2300: PUSH
2301: LD_INT 22
2303: PUSH
2304: LD_EXP 20
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 25
2315: PUSH
2316: LD_INT 1
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL_OW 69
2331: ST_TO_ADDR
// am_eng := FilterAllUnits ( [ [ f_side , am ] , [ f_class , 2 ] ] ) ;
2332: LD_ADDR_EXP 29
2336: PUSH
2337: LD_INT 22
2339: PUSH
2340: LD_EXP 20
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PUSH
2349: LD_INT 25
2351: PUSH
2352: LD_INT 2
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: PPUSH
2363: CALL_OW 69
2367: ST_TO_ADDR
// am_mech := FilterAllUnits ( [ [ f_side , am ] , [ f_class , 3 ] ] ) ;
2368: LD_ADDR_EXP 30
2372: PUSH
2373: LD_INT 22
2375: PUSH
2376: LD_EXP 20
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: PUSH
2385: LD_INT 25
2387: PUSH
2388: LD_INT 3
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PPUSH
2399: CALL_OW 69
2403: ST_TO_ADDR
// am_sci := FilterAllUnits ( [ [ f_side , am ] , [ f_class , 4 ] ] ) ;
2404: LD_ADDR_EXP 31
2408: PUSH
2409: LD_INT 22
2411: PUSH
2412: LD_EXP 20
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: PUSH
2421: LD_INT 25
2423: PUSH
2424: LD_INT 4
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: PUSH
2431: EMPTY
2432: LIST
2433: LIST
2434: PPUSH
2435: CALL_OW 69
2439: ST_TO_ADDR
// AmTech ;
2440: CALL 2928 0 0
// AmFab ;
2444: CALL 3300 0 0
// end ;
2448: LD_VAR 0 1
2452: RET
// every 0 0$01 do var i ;
2453: GO 2455
2455: DISABLE
2456: LD_INT 0
2458: PPUSH
// begin for i in am_sol or i in am_eng or i in am_sci do
2459: LD_ADDR_VAR 0 1
2463: PUSH
2464: LD_EXP 28
2468: PUSH
2469: LD_VAR 0 1
2473: PUSH
2474: LD_EXP 29
2478: IN
2479: OR
2480: PUSH
2481: LD_VAR 0 1
2485: PUSH
2486: LD_EXP 31
2490: IN
2491: OR
2492: PUSH
2493: FOR_IN
2494: IFFALSE 2557
// begin if GetLives ( i ) < 999 then
2496: LD_VAR 0 1
2500: PPUSH
2501: CALL_OW 256
2505: PUSH
2506: LD_INT 999
2508: LESS
2509: IFFALSE 2551
// begin ComExitBuilding ( am_sci ) ;
2511: LD_EXP 31
2515: PPUSH
2516: CALL_OW 122
// ComHeal ( am_sci , i ) ;
2520: LD_EXP 31
2524: PPUSH
2525: LD_VAR 0 1
2529: PPUSH
2530: CALL_OW 128
// AddComEnterUnit ( am_sci , am_lab ) ;
2534: LD_EXP 31
2538: PPUSH
2539: LD_EXP 26
2543: PPUSH
2544: CALL_OW 180
// enable ;
2548: ENABLE
// end else
2549: GO 2555
// exit ;
2551: POP
2552: POP
2553: GO 2560
// end ;
2555: GO 2493
2557: POP
2558: POP
// enable ;
2559: ENABLE
// end ;
2560: PPOPN 1
2562: END
// every 0 0$01 do var i , am_build , b ;
2563: GO 2565
2565: DISABLE
2566: LD_INT 0
2568: PPUSH
2569: PPUSH
2570: PPUSH
// begin enable ;
2571: ENABLE
// am_build = FilterAllUnits ( [ [ f_side , am ] , [ f_type , unit_building ] ] ) ;
2572: LD_ADDR_VAR 0 2
2576: PUSH
2577: LD_INT 22
2579: PUSH
2580: LD_EXP 20
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PUSH
2589: LD_INT 21
2591: PUSH
2592: LD_INT 3
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: PUSH
2599: EMPTY
2600: LIST
2601: LIST
2602: PPUSH
2603: CALL_OW 69
2607: ST_TO_ADDR
// for b in am_build do
2608: LD_ADDR_VAR 0 3
2612: PUSH
2613: LD_VAR 0 2
2617: PUSH
2618: FOR_IN
2619: IFFALSE 2698
// begin if GetLives ( b ) < 1000 then
2621: LD_VAR 0 3
2625: PPUSH
2626: CALL_OW 256
2630: PUSH
2631: LD_INT 1000
2633: LESS
2634: IFFALSE 2696
// begin repeat begin ComRepairBuilding ( am_eng , b ) ;
2636: LD_EXP 29
2640: PPUSH
2641: LD_VAR 0 3
2645: PPUSH
2646: CALL_OW 130
// Wait ( 0 0$03 ) ;
2650: LD_INT 105
2652: PPUSH
2653: CALL_OW 67
// AddComMoveXY ( am_eng , 80 , 125 ) ;
2657: LD_EXP 29
2661: PPUSH
2662: LD_INT 80
2664: PPUSH
2665: LD_INT 125
2667: PPUSH
2668: CALL_OW 171
// AddComFree ( am_eng ) ;
2672: LD_EXP 29
2676: PPUSH
2677: CALL_OW 199
// end until GetLives ( b ) = 1000 ;
2681: LD_VAR 0 3
2685: PPUSH
2686: CALL_OW 256
2690: PUSH
2691: LD_INT 1000
2693: EQUAL
2694: IFFALSE 2636
// end ; end ;
2696: GO 2618
2698: POP
2699: POP
// end ;
2700: PPOPN 3
2702: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , am ] , [ f_class , 2 ] ] ) = 0 do
2703: LD_INT 22
2705: PUSH
2706: LD_EXP 20
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: PUSH
2715: LD_INT 25
2717: PUSH
2718: LD_INT 2
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: PPUSH
2729: CALL_OW 69
2733: PUSH
2734: LD_INT 0
2736: EQUAL
2737: IFFALSE 2819
2739: GO 2741
2741: DISABLE
// begin ComExitBuilding ( am_sci ) ;
2742: LD_EXP 31
2746: PPUSH
2747: CALL_OW 122
// AddComEnterUnit ( am_sci , am_dep ) ;
2751: LD_EXP 31
2755: PPUSH
2756: LD_INT 1
2758: PPUSH
2759: CALL_OW 180
// AddComChangeProfession ( am_sci , 2 ) ;
2763: LD_EXP 31
2767: PPUSH
2768: LD_INT 2
2770: PPUSH
2771: CALL_OW 183
// AddComExitBuilding ( am_sci ) ;
2775: LD_EXP 31
2779: PPUSH
2780: CALL_OW 182
// AddComWait ( am_sci , 0 0$05 ) ;
2784: LD_EXP 31
2788: PPUSH
2789: LD_INT 175
2791: PPUSH
2792: CALL_OW 202
// am_eng = am_eng ^ am_sci ;
2796: LD_ADDR_EXP 29
2800: PUSH
2801: LD_EXP 29
2805: PUSH
2806: LD_EXP 31
2810: ADD
2811: ST_TO_ADDR
// am_sci = [ ] ;
2812: LD_ADDR_EXP 31
2816: PUSH
2817: EMPTY
2818: ST_TO_ADDR
// end ;
2819: END
// every 0 0$05 trigger Russian_Attack = false do var skr , p ;
2820: LD_EXP 2
2824: PUSH
2825: LD_INT 0
2827: EQUAL
2828: IFFALSE 2925
2830: GO 2832
2832: DISABLE
2833: LD_INT 0
2835: PPUSH
2836: PPUSH
// begin enable ;
2837: ENABLE
// skr = GetListOfCratesInArea ( AmT ) ;
2838: LD_ADDR_VAR 0 1
2842: PUSH
2843: LD_INT 2
2845: PPUSH
2846: CALL_OW 435
2850: ST_TO_ADDR
// p = 1 ;
2851: LD_ADDR_VAR 0 2
2855: PUSH
2856: LD_INT 1
2858: ST_TO_ADDR
// while p < skr do
2859: LD_VAR 0 2
2863: PUSH
2864: LD_VAR 0 1
2868: LESS
2869: IFFALSE 2925
// begin AddComCollect ( [ am_eng ] , skr [ p ] , skr [ p + 1 ] ) ;
2871: LD_EXP 29
2875: PUSH
2876: EMPTY
2877: LIST
2878: PPUSH
2879: LD_VAR 0 1
2883: PUSH
2884: LD_VAR 0 2
2888: ARRAY
2889: PPUSH
2890: LD_VAR 0 1
2894: PUSH
2895: LD_VAR 0 2
2899: PUSH
2900: LD_INT 1
2902: PLUS
2903: ARRAY
2904: PPUSH
2905: CALL_OW 177
// p = p + 2 ;
2909: LD_ADDR_VAR 0 2
2913: PUSH
2914: LD_VAR 0 2
2918: PUSH
2919: LD_INT 2
2921: PLUS
2922: ST_TO_ADDR
// end ;
2923: GO 2859
// end ;
2925: PPOPN 2
2927: END
// function AmTech ; var tech , i , sci , lab ; begin
2928: LD_INT 0
2930: PPUSH
2931: PPUSH
2932: PPUSH
2933: PPUSH
2934: PPUSH
// lab := FilterAllUnits ( [ [ f_side , am ] , [ f_btype , b_lab ] ] ) ;
2935: LD_ADDR_VAR 0 5
2939: PUSH
2940: LD_INT 22
2942: PUSH
2943: LD_EXP 20
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PUSH
2952: LD_INT 30
2954: PUSH
2955: LD_INT 6
2957: PUSH
2958: EMPTY
2959: LIST
2960: LIST
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: PPUSH
2966: CALL_OW 69
2970: ST_TO_ADDR
// ComEnterUnit ( am_sci , lab [ 1 ] ) ;
2971: LD_EXP 31
2975: PPUSH
2976: LD_VAR 0 5
2980: PUSH
2981: LD_INT 1
2983: ARRAY
2984: PPUSH
2985: CALL_OW 120
// ComExitBuilding ( am_eng ) ;
2989: LD_EXP 29
2993: PPUSH
2994: CALL_OW 122
// AddComMoveXY ( am_eng , GetX ( lab [ 2 ] ) , GetY ( lab [ 2 ] ) ) ;
2998: LD_EXP 29
3002: PPUSH
3003: LD_VAR 0 5
3007: PUSH
3008: LD_INT 2
3010: ARRAY
3011: PPUSH
3012: CALL_OW 250
3016: PPUSH
3017: LD_VAR 0 5
3021: PUSH
3022: LD_INT 2
3024: ARRAY
3025: PPUSH
3026: CALL_OW 251
3030: PPUSH
3031: CALL_OW 171
// AddComResearch ( lab [ 1 ] , tech_tech1 ) ;
3035: LD_VAR 0 5
3039: PUSH
3040: LD_INT 1
3042: ARRAY
3043: PPUSH
3044: LD_INT 48
3046: PPUSH
3047: CALL_OW 184
// AddComResearch ( lab [ 1 ] , tech_tech2 ) ;
3051: LD_VAR 0 5
3055: PUSH
3056: LD_INT 1
3058: ARRAY
3059: PPUSH
3060: LD_INT 49
3062: PPUSH
3063: CALL_OW 184
// AddComResearch ( lab [ 1 ] , tech_solPow ) ;
3067: LD_VAR 0 5
3071: PUSH
3072: LD_INT 1
3074: ARRAY
3075: PPUSH
3076: LD_INT 35
3078: PPUSH
3079: CALL_OW 184
// AddComResearch ( lab [ 1 ] , tech_oilPow ) ;
3083: LD_VAR 0 5
3087: PUSH
3088: LD_INT 1
3090: ARRAY
3091: PPUSH
3092: LD_INT 46
3094: PPUSH
3095: CALL_OW 184
// AddComResearch ( lab [ 1 ] , tech_oilEng ) ;
3099: LD_VAR 0 5
3103: PUSH
3104: LD_INT 1
3106: ARRAY
3107: PPUSH
3108: LD_INT 47
3110: PPUSH
3111: CALL_OW 184
// AddComResearch ( lab [ 1 ] , tech_solEng ) ;
3115: LD_VAR 0 5
3119: PUSH
3120: LD_INT 1
3122: ARRAY
3123: PPUSH
3124: LD_INT 45
3126: PPUSH
3127: CALL_OW 184
// Wait ( 0 0$03 ) ;
3131: LD_INT 105
3133: PPUSH
3134: CALL_OW 67
// AddComUpgradeLab ( lab [ 1 ] , b_lab_weapon ) ;
3138: LD_VAR 0 5
3142: PUSH
3143: LD_INT 1
3145: ARRAY
3146: PPUSH
3147: LD_INT 10
3149: PPUSH
3150: CALL_OW 207
// Wait ( 0 0$01 ) ;
3154: LD_INT 35
3156: PPUSH
3157: CALL_OW 67
// AddComResearch ( lab [ 1 ] , tech_weap1 ) ;
3161: LD_VAR 0 5
3165: PUSH
3166: LD_INT 1
3168: ARRAY
3169: PPUSH
3170: LD_INT 51
3172: PPUSH
3173: CALL_OW 184
// AddComResearch ( lab [ 1 ] , tech_weap2 ) ;
3177: LD_VAR 0 5
3181: PUSH
3182: LD_INT 1
3184: ARRAY
3185: PPUSH
3186: LD_INT 52
3188: PPUSH
3189: CALL_OW 184
// AddComResearch ( lab [ 1 ] , tech_gatling ) ;
3193: LD_VAR 0 5
3197: PUSH
3198: LD_INT 1
3200: ARRAY
3201: PPUSH
3202: LD_INT 69
3204: PPUSH
3205: CALL_OW 184
// AddComResearch ( lab [ 1 ] , tech_gun ) ;
3209: LD_VAR 0 5
3213: PUSH
3214: LD_INT 1
3216: ARRAY
3217: PPUSH
3218: LD_INT 39
3220: PPUSH
3221: CALL_OW 184
// Wait ( 0 0$30 ) ;
3225: LD_INT 1050
3227: PPUSH
3228: CALL_OW 67
// ComUpgradeLab ( lab [ 2 ] , b_lab_opto ) ;
3232: LD_VAR 0 5
3236: PUSH
3237: LD_INT 2
3239: ARRAY
3240: PPUSH
3241: LD_INT 15
3243: PPUSH
3244: CALL_OW 147
// end ;
3248: LD_VAR 0 1
3252: RET
// every 0 0$30 do var base ;
3253: GO 3255
3255: DISABLE
3256: LD_INT 0
3258: PPUSH
// begin if IsLive ( am_dep ) then
3259: LD_INT 1
3261: PPUSH
3262: CALL_OW 300
3266: IFFALSE 3296
// begin base = GetBase ( am_dep ) ;
3268: LD_ADDR_VAR 0 1
3272: PUSH
3273: LD_INT 1
3275: PPUSH
3276: CALL_OW 274
3280: ST_TO_ADDR
// AddResourceType ( base , mat_cans , 30 ) ;
3281: LD_VAR 0 1
3285: PPUSH
3286: LD_INT 1
3288: PPUSH
3289: LD_INT 30
3291: PPUSH
3292: CALL_OW 276
// end ; enable ;
3296: ENABLE
// end ;
3297: PPOPN 1
3299: END
// function AmFab ; begin
3300: LD_INT 0
3302: PPUSH
// ComUpgrade ( am_wrk ) ;
3303: LD_EXP 27
3307: PPUSH
3308: CALL_OW 146
// am_limit = 0 ;
3312: LD_ADDR_EXP 34
3316: PUSH
3317: LD_INT 0
3319: ST_TO_ADDR
// end ;
3320: LD_VAR 0 1
3324: RET
// on UpgradeComplete ( b ) do begin if GetBType ( b ) = b_factory and GetSide ( b ) = am then
3325: LD_VAR 0 1
3329: PPUSH
3330: CALL_OW 266
3334: PUSH
3335: LD_INT 3
3337: EQUAL
3338: PUSH
3339: LD_VAR 0 1
3343: PPUSH
3344: CALL_OW 255
3348: PUSH
3349: LD_EXP 20
3353: EQUAL
3354: AND
3355: IFFALSE 3444
// begin ComEnterUnit ( am_mech , b ) ;
3357: LD_EXP 30
3361: PPUSH
3362: LD_VAR 0 1
3366: PPUSH
3367: CALL_OW 120
// AddComConstruct ( b , us_medium_wheeled , engine_combustion , control_manual , us_machine_gun ) ;
3371: LD_VAR 0 1
3375: PPUSH
3376: LD_INT 2
3378: PPUSH
3379: LD_INT 1
3381: PPUSH
3382: LD_INT 1
3384: PPUSH
3385: LD_INT 2
3387: PPUSH
3388: CALL_OW 185
// AddComConstruct ( b , us_medium_wheeled , engine_combustion , control_manual , us_machine_gun ) ;
3392: LD_VAR 0 1
3396: PPUSH
3397: LD_INT 2
3399: PPUSH
3400: LD_INT 1
3402: PPUSH
3403: LD_INT 1
3405: PPUSH
3406: LD_INT 2
3408: PPUSH
3409: CALL_OW 185
// AddComConstruct ( b , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ) ;
3413: LD_VAR 0 1
3417: PPUSH
3418: LD_INT 2
3420: PPUSH
3421: LD_INT 1
3423: PPUSH
3424: LD_INT 1
3426: PPUSH
3427: LD_INT 4
3429: PPUSH
3430: CALL_OW 185
// am_factory := b ;
3434: LD_ADDR_EXP 33
3438: PUSH
3439: LD_VAR 0 1
3443: ST_TO_ADDR
// end ; end ;
3444: PPOPN 1
3446: END
// on VehicleConstructed ( vehicle , factory ) do var driver , un ;
3447: LD_INT 0
3449: PPUSH
3450: PPUSH
// begin if factory = am_factory then
3451: LD_VAR 0 2
3455: PUSH
3456: LD_EXP 33
3460: EQUAL
3461: IFFALSE 3709
// begin driver = IsDrivenBy ( un ) ;
3463: LD_ADDR_VAR 0 3
3467: PUSH
3468: LD_VAR 0 4
3472: PPUSH
3473: CALL_OW 311
3477: ST_TO_ADDR
// Wait ( 0 0$0.1 ) ;
3478: LD_INT 4
3480: PPUSH
3481: CALL_OW 67
// ComMoveXY ( driver , 76 , 120 ) ;
3485: LD_VAR 0 3
3489: PPUSH
3490: LD_INT 76
3492: PPUSH
3493: LD_INT 120
3495: PPUSH
3496: CALL_OW 111
// AddComExitVehicle ( driver ) ;
3500: LD_VAR 0 3
3504: PPUSH
3505: CALL_OW 181
// AddComEnterUnit ( driver , am_factory ) ;
3509: LD_VAR 0 3
3513: PPUSH
3514: LD_EXP 33
3518: PPUSH
3519: CALL_OW 180
// driver = [ ] ;
3523: LD_ADDR_VAR 0 3
3527: PUSH
3528: EMPTY
3529: ST_TO_ADDR
// am_veh = am_veh ^ vehicle ;
3530: LD_ADDR_EXP 32
3534: PUSH
3535: LD_EXP 32
3539: PUSH
3540: LD_VAR 0 1
3544: ADD
3545: ST_TO_ADDR
// am_limit = am_limit + 1 ;
3546: LD_ADDR_EXP 34
3550: PUSH
3551: LD_EXP 34
3555: PUSH
3556: LD_INT 1
3558: PLUS
3559: ST_TO_ADDR
// if am_limit = 3 then
3560: LD_EXP 34
3564: PUSH
3565: LD_INT 3
3567: EQUAL
3568: IFFALSE 3709
// begin ComExitBuilding ( am_mech ) ;
3570: LD_EXP 30
3574: PPUSH
3575: CALL_OW 122
// AddComEnterUnit ( am_mech [ 1 ] , am_veh [ 1 ] ) ;
3579: LD_EXP 30
3583: PUSH
3584: LD_INT 1
3586: ARRAY
3587: PPUSH
3588: LD_EXP 32
3592: PUSH
3593: LD_INT 1
3595: ARRAY
3596: PPUSH
3597: CALL_OW 180
// AddComEnterUnit ( am_mech [ 2 ] , am_veh [ 2 ] ) ;
3601: LD_EXP 30
3605: PUSH
3606: LD_INT 2
3608: ARRAY
3609: PPUSH
3610: LD_EXP 32
3614: PUSH
3615: LD_INT 2
3617: ARRAY
3618: PPUSH
3619: CALL_OW 180
// AddComEnterUnit ( am_mech [ 3 ] , am_veh [ 3 ] ) ;
3623: LD_EXP 30
3627: PUSH
3628: LD_INT 3
3630: ARRAY
3631: PPUSH
3632: LD_EXP 32
3636: PUSH
3637: LD_INT 3
3639: ARRAY
3640: PPUSH
3641: CALL_OW 180
// Wait ( 0 0$0.5 ) ;
3645: LD_INT 18
3647: PPUSH
3648: CALL_OW 67
// AddComMoveXY ( am_mech [ 1 ] , 109 , 153 ) ;
3652: LD_EXP 30
3656: PUSH
3657: LD_INT 1
3659: ARRAY
3660: PPUSH
3661: LD_INT 109
3663: PPUSH
3664: LD_INT 153
3666: PPUSH
3667: CALL_OW 171
// AddComMoveXY ( am_mech [ 2 ] , 114 , 135 ) ;
3671: LD_EXP 30
3675: PUSH
3676: LD_INT 2
3678: ARRAY
3679: PPUSH
3680: LD_INT 114
3682: PPUSH
3683: LD_INT 135
3685: PPUSH
3686: CALL_OW 171
// AddComMoveXY ( am_mech [ 3 ] , 108 , 135 ) ;
3690: LD_EXP 30
3694: PUSH
3695: LD_INT 3
3697: ARRAY
3698: PPUSH
3699: LD_INT 108
3701: PPUSH
3702: LD_INT 135
3704: PPUSH
3705: CALL_OW 171
// end ; end ; end ; end_of_file
3709: PPOPN 4
3711: END
// export ru1 , ru2 , ru3 ; export ru1_arm , ru1_bun , ru1_tw , ru1_depot , ru1_sol , ru1_eng , ru1_mech , ru1_sci ; export ru2_arm , ru2_bun , ru2_tw , ru2_depot , ru2_sol , ru2_eng , ru2_mech , ru2_sci ; export en_unit ; export rus1 , rus2 ; export function PrepareRussian ; var i , un , b , x1 , y1 , k , l ; begin
3712: LD_INT 0
3714: PPUSH
3715: PPUSH
3716: PPUSH
3717: PPUSH
3718: PPUSH
3719: PPUSH
3720: PPUSH
3721: PPUSH
// ru1 := 3 ;
3722: LD_ADDR_EXP 35
3726: PUSH
3727: LD_INT 3
3729: ST_TO_ADDR
// ru2 := 6 ;
3730: LD_ADDR_EXP 36
3734: PUSH
3735: LD_INT 6
3737: ST_TO_ADDR
// ru3 := 7 ;
3738: LD_ADDR_EXP 37
3742: PUSH
3743: LD_INT 7
3745: ST_TO_ADDR
// ru1_tw := FilterAllUnits ( [ [ f_side , ru1 ] , [ f_btype , b_bunker ] ] ) ;
3746: LD_ADDR_EXP 40
3750: PUSH
3751: LD_INT 22
3753: PUSH
3754: LD_EXP 35
3758: PUSH
3759: EMPTY
3760: LIST
3761: LIST
3762: PUSH
3763: LD_INT 30
3765: PUSH
3766: LD_INT 32
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: PPUSH
3777: CALL_OW 69
3781: ST_TO_ADDR
// ru2_tw := FilterAllUnits ( [ [ f_side , ru2 ] , [ f_btype , b_bunker ] ] ) ;
3782: LD_ADDR_EXP 48
3786: PUSH
3787: LD_INT 22
3789: PUSH
3790: LD_EXP 36
3794: PUSH
3795: EMPTY
3796: LIST
3797: LIST
3798: PUSH
3799: LD_INT 30
3801: PUSH
3802: LD_INT 32
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: PPUSH
3813: CALL_OW 69
3817: ST_TO_ADDR
// ru1_arm := FilterAllUnits ( [ [ f_side , ru1 ] , [ f_btype , b_armoury ] ] ) ;
3818: LD_ADDR_EXP 38
3822: PUSH
3823: LD_INT 22
3825: PUSH
3826: LD_EXP 35
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: LD_INT 30
3837: PUSH
3838: LD_INT 4
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: PPUSH
3849: CALL_OW 69
3853: ST_TO_ADDR
// ru2_arm := FilterAllUnits ( [ [ f_side , ru2 ] , [ f_btype , b_armoury ] ] ) ;
3854: LD_ADDR_EXP 46
3858: PUSH
3859: LD_INT 22
3861: PUSH
3862: LD_EXP 36
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: PUSH
3871: LD_INT 30
3873: PUSH
3874: LD_INT 4
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PPUSH
3885: CALL_OW 69
3889: ST_TO_ADDR
// ru1_depot := FilterAllUnits ( [ [ f_side , ru1 ] , [ f_btype , b_warehouse ] ] ) ;
3890: LD_ADDR_EXP 41
3894: PUSH
3895: LD_INT 22
3897: PUSH
3898: LD_EXP 35
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: PUSH
3907: LD_INT 30
3909: PUSH
3910: LD_INT 1
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: PUSH
3917: EMPTY
3918: LIST
3919: LIST
3920: PPUSH
3921: CALL_OW 69
3925: ST_TO_ADDR
// ru2_depot := FilterAllUnits ( [ [ f_side , ru2 ] , [ f_btype , b_warehouse ] ] ) ;
3926: LD_ADDR_EXP 49
3930: PUSH
3931: LD_INT 22
3933: PUSH
3934: LD_EXP 36
3938: PUSH
3939: EMPTY
3940: LIST
3941: LIST
3942: PUSH
3943: LD_INT 30
3945: PUSH
3946: LD_INT 1
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: PUSH
3953: EMPTY
3954: LIST
3955: LIST
3956: PPUSH
3957: CALL_OW 69
3961: ST_TO_ADDR
// ru2_bun := FilterAllUnits ( [ [ f_side , ru2 ] , [ f_btype , b_breastwork ] ] ) ;
3962: LD_ADDR_EXP 47
3966: PUSH
3967: LD_INT 22
3969: PUSH
3970: LD_EXP 36
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PUSH
3979: LD_INT 30
3981: PUSH
3982: LD_INT 31
3984: PUSH
3985: EMPTY
3986: LIST
3987: LIST
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: PPUSH
3993: CALL_OW 69
3997: ST_TO_ADDR
// uc_side = ru1 ;
3998: LD_ADDR_OWVAR 20
4002: PUSH
4003: LD_EXP 35
4007: ST_TO_ADDR
// uc_nation = 3 ;
4008: LD_ADDR_OWVAR 21
4012: PUSH
4013: LD_INT 3
4015: ST_TO_ADDR
// hc_gallery =  ;
4016: LD_ADDR_OWVAR 33
4020: PUSH
4021: LD_STRING 
4023: ST_TO_ADDR
// hc_name =  ;
4024: LD_ADDR_OWVAR 26
4028: PUSH
4029: LD_STRING 
4031: ST_TO_ADDR
// for i in ru1_tw do
4032: LD_ADDR_VAR 0 2
4036: PUSH
4037: LD_EXP 40
4041: PUSH
4042: FOR_IN
4043: IFFALSE 4206
// begin if IsInUnit ( i ) = 0 then
4045: LD_VAR 0 2
4049: PPUSH
4050: CALL_OW 310
4054: PUSH
4055: LD_INT 0
4057: EQUAL
4058: IFFALSE 4204
// begin hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
4060: LD_ADDR_OWVAR 29
4064: PUSH
4065: LD_INT 9
4067: PPUSH
4068: LD_INT 11
4070: PPUSH
4071: CALL_OW 12
4075: PUSH
4076: LD_INT 10
4078: PPUSH
4079: LD_INT 12
4081: PPUSH
4082: CALL_OW 12
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: ST_TO_ADDR
// hc_skills = [ Rand ( 1 , 3 ) + Level , 1 + Level , Rand ( 1 , 2 ) + Level , Rand ( 0 , 3 ) ] ;
4091: LD_ADDR_OWVAR 31
4095: PUSH
4096: LD_INT 1
4098: PPUSH
4099: LD_INT 3
4101: PPUSH
4102: CALL_OW 12
4106: PUSH
4107: LD_EXP 13
4111: PLUS
4112: PUSH
4113: LD_INT 1
4115: PUSH
4116: LD_EXP 13
4120: PLUS
4121: PUSH
4122: LD_INT 1
4124: PPUSH
4125: LD_INT 2
4127: PPUSH
4128: CALL_OW 12
4132: PUSH
4133: LD_EXP 13
4137: PLUS
4138: PUSH
4139: LD_INT 0
4141: PPUSH
4142: LD_INT 3
4144: PPUSH
4145: CALL_OW 12
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
4156: LD_ADDR_OWVAR 27
4160: PUSH
4161: LD_INT 1
4163: PPUSH
4164: LD_INT 2
4166: PPUSH
4167: CALL_OW 12
4171: ST_TO_ADDR
// hc_class = 1 ;
4172: LD_ADDR_OWVAR 28
4176: PUSH
4177: LD_INT 1
4179: ST_TO_ADDR
// un := CreateHuman ;
4180: LD_ADDR_VAR 0 3
4184: PUSH
4185: CALL_OW 44
4189: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4190: LD_VAR 0 3
4194: PPUSH
4195: LD_VAR 0 2
4199: PPUSH
4200: CALL_OW 52
// end ; end ;
4204: GO 4042
4206: POP
4207: POP
// for i in ru1_arm do
4208: LD_ADDR_VAR 0 2
4212: PUSH
4213: LD_EXP 38
4217: PUSH
4218: FOR_IN
4219: IFFALSE 4414
// begin l = 0 ;
4221: LD_ADDR_VAR 0 8
4225: PUSH
4226: LD_INT 0
4228: ST_TO_ADDR
// if IsInUnit ( i ) = 0 then
4229: LD_VAR 0 2
4233: PPUSH
4234: CALL_OW 310
4238: PUSH
4239: LD_INT 0
4241: EQUAL
4242: IFFALSE 4412
// begin repeat begin hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
4244: LD_ADDR_OWVAR 29
4248: PUSH
4249: LD_INT 9
4251: PPUSH
4252: LD_INT 11
4254: PPUSH
4255: CALL_OW 12
4259: PUSH
4260: LD_INT 10
4262: PPUSH
4263: LD_INT 12
4265: PPUSH
4266: CALL_OW 12
4270: PUSH
4271: EMPTY
4272: LIST
4273: LIST
4274: ST_TO_ADDR
// hc_skills = [ Rand ( 1 , 3 ) + Level , 1 + Level , Rand ( 1 , 2 ) + Level , Rand ( 0 , 3 ) ] ;
4275: LD_ADDR_OWVAR 31
4279: PUSH
4280: LD_INT 1
4282: PPUSH
4283: LD_INT 3
4285: PPUSH
4286: CALL_OW 12
4290: PUSH
4291: LD_EXP 13
4295: PLUS
4296: PUSH
4297: LD_INT 1
4299: PUSH
4300: LD_EXP 13
4304: PLUS
4305: PUSH
4306: LD_INT 1
4308: PPUSH
4309: LD_INT 2
4311: PPUSH
4312: CALL_OW 12
4316: PUSH
4317: LD_EXP 13
4321: PLUS
4322: PUSH
4323: LD_INT 0
4325: PPUSH
4326: LD_INT 3
4328: PPUSH
4329: CALL_OW 12
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
4340: LD_ADDR_OWVAR 27
4344: PUSH
4345: LD_INT 1
4347: PPUSH
4348: LD_INT 2
4350: PPUSH
4351: CALL_OW 12
4355: ST_TO_ADDR
// hc_class = 1 ;
4356: LD_ADDR_OWVAR 28
4360: PUSH
4361: LD_INT 1
4363: ST_TO_ADDR
// un := CreateHuman ;
4364: LD_ADDR_VAR 0 3
4368: PUSH
4369: CALL_OW 44
4373: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4374: LD_VAR 0 3
4378: PPUSH
4379: LD_VAR 0 2
4383: PPUSH
4384: CALL_OW 52
// l = l + 1 ;
4388: LD_ADDR_VAR 0 8
4392: PUSH
4393: LD_VAR 0 8
4397: PUSH
4398: LD_INT 1
4400: PLUS
4401: ST_TO_ADDR
// end until l = 6 ;
4402: LD_VAR 0 8
4406: PUSH
4407: LD_INT 6
4409: EQUAL
4410: IFFALSE 4244
// end ; end ;
4412: GO 4218
4414: POP
4415: POP
// for i in ru1_depot do
4416: LD_ADDR_VAR 0 2
4420: PUSH
4421: LD_EXP 41
4425: PUSH
4426: FOR_IN
4427: IFFALSE 4876
// begin l = 0 ;
4429: LD_ADDR_VAR 0 8
4433: PUSH
4434: LD_INT 0
4436: ST_TO_ADDR
// if IsInUnit ( i ) = 0 then
4437: LD_VAR 0 2
4441: PPUSH
4442: CALL_OW 310
4446: PUSH
4447: LD_INT 0
4449: EQUAL
4450: IFFALSE 4628
// begin repeat begin hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
4452: LD_ADDR_OWVAR 29
4456: PUSH
4457: LD_INT 9
4459: PPUSH
4460: LD_INT 11
4462: PPUSH
4463: CALL_OW 12
4467: PUSH
4468: LD_INT 10
4470: PPUSH
4471: LD_INT 12
4473: PPUSH
4474: CALL_OW 12
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: ST_TO_ADDR
// hc_skills = [ Rand ( 1 , 3 ) + Level , 1 + Level , Rand ( 1 , 2 ) + Level , Rand ( 0 , 3 ) ] ;
4483: LD_ADDR_OWVAR 31
4487: PUSH
4488: LD_INT 1
4490: PPUSH
4491: LD_INT 3
4493: PPUSH
4494: CALL_OW 12
4498: PUSH
4499: LD_EXP 13
4503: PLUS
4504: PUSH
4505: LD_INT 1
4507: PUSH
4508: LD_EXP 13
4512: PLUS
4513: PUSH
4514: LD_INT 1
4516: PPUSH
4517: LD_INT 2
4519: PPUSH
4520: CALL_OW 12
4524: PUSH
4525: LD_EXP 13
4529: PLUS
4530: PUSH
4531: LD_INT 0
4533: PPUSH
4534: LD_INT 3
4536: PPUSH
4537: CALL_OW 12
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
4548: LD_ADDR_OWVAR 27
4552: PUSH
4553: LD_INT 1
4555: PPUSH
4556: LD_INT 2
4558: PPUSH
4559: CALL_OW 12
4563: ST_TO_ADDR
// hc_class = Rand ( 1 , 2 ) ;
4564: LD_ADDR_OWVAR 28
4568: PUSH
4569: LD_INT 1
4571: PPUSH
4572: LD_INT 2
4574: PPUSH
4575: CALL_OW 12
4579: ST_TO_ADDR
// un := CreateHuman ;
4580: LD_ADDR_VAR 0 3
4584: PUSH
4585: CALL_OW 44
4589: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4590: LD_VAR 0 3
4594: PPUSH
4595: LD_VAR 0 2
4599: PPUSH
4600: CALL_OW 52
// l = l + 1 ;
4604: LD_ADDR_VAR 0 8
4608: PUSH
4609: LD_VAR 0 8
4613: PUSH
4614: LD_INT 1
4616: PLUS
4617: ST_TO_ADDR
// end until l = 6 ;
4618: LD_VAR 0 8
4622: PUSH
4623: LD_INT 6
4625: EQUAL
4626: IFFALSE 4452
// end ; ru1_eng = FilterAllUnits ( [ [ f_side , ru1 ] , [ f_class , 2 ] ] ) ;
4628: LD_ADDR_EXP 43
4632: PUSH
4633: LD_INT 22
4635: PUSH
4636: LD_EXP 35
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: PUSH
4645: LD_INT 25
4647: PUSH
4648: LD_INT 2
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: PUSH
4655: EMPTY
4656: LIST
4657: LIST
4658: PPUSH
4659: CALL_OW 69
4663: ST_TO_ADDR
// if ru1_eng = [ ] then
4664: LD_EXP 43
4668: PUSH
4669: EMPTY
4670: EQUAL
4671: IFFALSE 4681
// i = 0 ;
4673: LD_ADDR_VAR 0 2
4677: PUSH
4678: LD_INT 0
4680: ST_TO_ADDR
// for i = 1 to 2 do
4681: LD_ADDR_VAR 0 2
4685: PUSH
4686: DOUBLE
4687: LD_INT 1
4689: DEC
4690: ST_TO_ADDR
4691: LD_INT 2
4693: PUSH
4694: FOR_TO
4695: IFFALSE 4872
// begin hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
4697: LD_ADDR_OWVAR 29
4701: PUSH
4702: LD_INT 9
4704: PPUSH
4705: LD_INT 11
4707: PPUSH
4708: CALL_OW 12
4712: PUSH
4713: LD_INT 10
4715: PPUSH
4716: LD_INT 12
4718: PPUSH
4719: CALL_OW 12
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: ST_TO_ADDR
// hc_skills = [ Rand ( 1 , 3 ) + Level , 1 + Level , Rand ( 1 , 2 ) + Level , Rand ( 0 , 3 ) ] ;
4728: LD_ADDR_OWVAR 31
4732: PUSH
4733: LD_INT 1
4735: PPUSH
4736: LD_INT 3
4738: PPUSH
4739: CALL_OW 12
4743: PUSH
4744: LD_EXP 13
4748: PLUS
4749: PUSH
4750: LD_INT 1
4752: PUSH
4753: LD_EXP 13
4757: PLUS
4758: PUSH
4759: LD_INT 1
4761: PPUSH
4762: LD_INT 2
4764: PPUSH
4765: CALL_OW 12
4769: PUSH
4770: LD_EXP 13
4774: PLUS
4775: PUSH
4776: LD_INT 0
4778: PPUSH
4779: LD_INT 3
4781: PPUSH
4782: CALL_OW 12
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
4793: LD_ADDR_OWVAR 27
4797: PUSH
4798: LD_INT 1
4800: PPUSH
4801: LD_INT 2
4803: PPUSH
4804: CALL_OW 12
4808: ST_TO_ADDR
// hc_class = 2 ;
4809: LD_ADDR_OWVAR 28
4813: PUSH
4814: LD_INT 2
4816: ST_TO_ADDR
// un := CreateHuman ;
4817: LD_ADDR_VAR 0 3
4821: PUSH
4822: CALL_OW 44
4826: ST_TO_ADDR
// PlaceUnitXY ( un , 132 , 16 , false ) ;
4827: LD_VAR 0 3
4831: PPUSH
4832: LD_INT 132
4834: PPUSH
4835: LD_INT 16
4837: PPUSH
4838: LD_INT 0
4840: PPUSH
4841: CALL_OW 48
// ru1_eng = ru1_eng ^ un ;
4845: LD_ADDR_EXP 43
4849: PUSH
4850: LD_EXP 43
4854: PUSH
4855: LD_VAR 0 3
4859: ADD
4860: ST_TO_ADDR
// ComFree ( un ) ;
4861: LD_VAR 0 3
4865: PPUSH
4866: CALL_OW 139
// end ;
4870: GO 4694
4872: POP
4873: POP
// end ;
4874: GO 4426
4876: POP
4877: POP
// uc_side = ru2 ;
4878: LD_ADDR_OWVAR 20
4882: PUSH
4883: LD_EXP 36
4887: ST_TO_ADDR
// uc_nation = 3 ;
4888: LD_ADDR_OWVAR 21
4892: PUSH
4893: LD_INT 3
4895: ST_TO_ADDR
// hc_gallery =  ;
4896: LD_ADDR_OWVAR 33
4900: PUSH
4901: LD_STRING 
4903: ST_TO_ADDR
// hc_name =  ;
4904: LD_ADDR_OWVAR 26
4908: PUSH
4909: LD_STRING 
4911: ST_TO_ADDR
// for i in ru2_tw do
4912: LD_ADDR_VAR 0 2
4916: PUSH
4917: LD_EXP 48
4921: PUSH
4922: FOR_IN
4923: IFFALSE 5086
// begin if IsInUnit ( i ) = 0 then
4925: LD_VAR 0 2
4929: PPUSH
4930: CALL_OW 310
4934: PUSH
4935: LD_INT 0
4937: EQUAL
4938: IFFALSE 5084
// begin hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
4940: LD_ADDR_OWVAR 29
4944: PUSH
4945: LD_INT 9
4947: PPUSH
4948: LD_INT 11
4950: PPUSH
4951: CALL_OW 12
4955: PUSH
4956: LD_INT 10
4958: PPUSH
4959: LD_INT 12
4961: PPUSH
4962: CALL_OW 12
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: ST_TO_ADDR
// hc_skills = [ Rand ( 1 , 3 ) + Level , 1 + Level , Rand ( 1 , 2 ) + Level , Rand ( 0 , 3 ) ] ;
4971: LD_ADDR_OWVAR 31
4975: PUSH
4976: LD_INT 1
4978: PPUSH
4979: LD_INT 3
4981: PPUSH
4982: CALL_OW 12
4986: PUSH
4987: LD_EXP 13
4991: PLUS
4992: PUSH
4993: LD_INT 1
4995: PUSH
4996: LD_EXP 13
5000: PLUS
5001: PUSH
5002: LD_INT 1
5004: PPUSH
5005: LD_INT 2
5007: PPUSH
5008: CALL_OW 12
5012: PUSH
5013: LD_EXP 13
5017: PLUS
5018: PUSH
5019: LD_INT 0
5021: PPUSH
5022: LD_INT 3
5024: PPUSH
5025: CALL_OW 12
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5036: LD_ADDR_OWVAR 27
5040: PUSH
5041: LD_INT 1
5043: PPUSH
5044: LD_INT 2
5046: PPUSH
5047: CALL_OW 12
5051: ST_TO_ADDR
// hc_class = 1 ;
5052: LD_ADDR_OWVAR 28
5056: PUSH
5057: LD_INT 1
5059: ST_TO_ADDR
// un := CreateHuman ;
5060: LD_ADDR_VAR 0 3
5064: PUSH
5065: CALL_OW 44
5069: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
5070: LD_VAR 0 3
5074: PPUSH
5075: LD_VAR 0 2
5079: PPUSH
5080: CALL_OW 52
// end ; end ;
5084: GO 4922
5086: POP
5087: POP
// for i in ru2_arm do
5088: LD_ADDR_VAR 0 2
5092: PUSH
5093: LD_EXP 46
5097: PUSH
5098: FOR_IN
5099: IFFALSE 5294
// begin l = 0 ;
5101: LD_ADDR_VAR 0 8
5105: PUSH
5106: LD_INT 0
5108: ST_TO_ADDR
// if IsInUnit ( i ) = 0 then
5109: LD_VAR 0 2
5113: PPUSH
5114: CALL_OW 310
5118: PUSH
5119: LD_INT 0
5121: EQUAL
5122: IFFALSE 5292
// begin repeat begin hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
5124: LD_ADDR_OWVAR 29
5128: PUSH
5129: LD_INT 9
5131: PPUSH
5132: LD_INT 11
5134: PPUSH
5135: CALL_OW 12
5139: PUSH
5140: LD_INT 10
5142: PPUSH
5143: LD_INT 12
5145: PPUSH
5146: CALL_OW 12
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: ST_TO_ADDR
// hc_skills = [ Rand ( 1 , 3 ) + Level , 1 + Level , Rand ( 1 , 2 ) + Level , Rand ( 0 , 3 ) ] ;
5155: LD_ADDR_OWVAR 31
5159: PUSH
5160: LD_INT 1
5162: PPUSH
5163: LD_INT 3
5165: PPUSH
5166: CALL_OW 12
5170: PUSH
5171: LD_EXP 13
5175: PLUS
5176: PUSH
5177: LD_INT 1
5179: PUSH
5180: LD_EXP 13
5184: PLUS
5185: PUSH
5186: LD_INT 1
5188: PPUSH
5189: LD_INT 2
5191: PPUSH
5192: CALL_OW 12
5196: PUSH
5197: LD_EXP 13
5201: PLUS
5202: PUSH
5203: LD_INT 0
5205: PPUSH
5206: LD_INT 3
5208: PPUSH
5209: CALL_OW 12
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5220: LD_ADDR_OWVAR 27
5224: PUSH
5225: LD_INT 1
5227: PPUSH
5228: LD_INT 2
5230: PPUSH
5231: CALL_OW 12
5235: ST_TO_ADDR
// hc_class = 1 ;
5236: LD_ADDR_OWVAR 28
5240: PUSH
5241: LD_INT 1
5243: ST_TO_ADDR
// un := CreateHuman ;
5244: LD_ADDR_VAR 0 3
5248: PUSH
5249: CALL_OW 44
5253: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
5254: LD_VAR 0 3
5258: PPUSH
5259: LD_VAR 0 2
5263: PPUSH
5264: CALL_OW 52
// l = l + 1 ;
5268: LD_ADDR_VAR 0 8
5272: PUSH
5273: LD_VAR 0 8
5277: PUSH
5278: LD_INT 1
5280: PLUS
5281: ST_TO_ADDR
// end until l = 3 ;
5282: LD_VAR 0 8
5286: PUSH
5287: LD_INT 3
5289: EQUAL
5290: IFFALSE 5124
// end ; end ;
5292: GO 5098
5294: POP
5295: POP
// for i in ru2_depot do
5296: LD_ADDR_VAR 0 2
5300: PUSH
5301: LD_EXP 49
5305: PUSH
5306: FOR_IN
5307: IFFALSE 5547
// begin l = 0 ;
5309: LD_ADDR_VAR 0 8
5313: PUSH
5314: LD_INT 0
5316: ST_TO_ADDR
// if IsInUnit ( i ) = 0 then
5317: LD_VAR 0 2
5321: PPUSH
5322: CALL_OW 310
5326: PUSH
5327: LD_INT 0
5329: EQUAL
5330: IFFALSE 5509
// begin repeat begin hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
5332: LD_ADDR_OWVAR 29
5336: PUSH
5337: LD_INT 9
5339: PPUSH
5340: LD_INT 11
5342: PPUSH
5343: CALL_OW 12
5347: PUSH
5348: LD_INT 10
5350: PPUSH
5351: LD_INT 12
5353: PPUSH
5354: CALL_OW 12
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: ST_TO_ADDR
// hc_skills = [ Rand ( 1 , 3 ) + Level , 1 + Level , Rand ( 1 , 2 ) + Level , Rand ( 0 , 3 ) ] ;
5363: LD_ADDR_OWVAR 31
5367: PUSH
5368: LD_INT 1
5370: PPUSH
5371: LD_INT 3
5373: PPUSH
5374: CALL_OW 12
5378: PUSH
5379: LD_EXP 13
5383: PLUS
5384: PUSH
5385: LD_INT 1
5387: PUSH
5388: LD_EXP 13
5392: PLUS
5393: PUSH
5394: LD_INT 1
5396: PPUSH
5397: LD_INT 2
5399: PPUSH
5400: CALL_OW 12
5404: PUSH
5405: LD_EXP 13
5409: PLUS
5410: PUSH
5411: LD_INT 0
5413: PPUSH
5414: LD_INT 3
5416: PPUSH
5417: CALL_OW 12
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5428: LD_ADDR_OWVAR 27
5432: PUSH
5433: LD_INT 1
5435: PPUSH
5436: LD_INT 2
5438: PPUSH
5439: CALL_OW 12
5443: ST_TO_ADDR
// hc_class = 2 ;
5444: LD_ADDR_OWVAR 28
5448: PUSH
5449: LD_INT 2
5451: ST_TO_ADDR
// un := CreateHuman ;
5452: LD_ADDR_VAR 0 3
5456: PUSH
5457: CALL_OW 44
5461: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
5462: LD_VAR 0 3
5466: PPUSH
5467: LD_VAR 0 2
5471: PPUSH
5472: CALL_OW 52
// ComExitBuilding ( un ) ;
5476: LD_VAR 0 3
5480: PPUSH
5481: CALL_OW 122
// l = l + 1 ;
5485: LD_ADDR_VAR 0 8
5489: PUSH
5490: LD_VAR 0 8
5494: PUSH
5495: LD_INT 1
5497: PLUS
5498: ST_TO_ADDR
// end until l = 4 ;
5499: LD_VAR 0 8
5503: PUSH
5504: LD_INT 4
5506: EQUAL
5507: IFFALSE 5332
// end ; ru2_eng = FilterAllUnits ( [ [ f_side , ru2 ] , [ f_class , 2 ] ] ) ;
5509: LD_ADDR_EXP 51
5513: PUSH
5514: LD_INT 22
5516: PUSH
5517: LD_EXP 36
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: PUSH
5526: LD_INT 25
5528: PUSH
5529: LD_INT 2
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PUSH
5536: EMPTY
5537: LIST
5538: LIST
5539: PPUSH
5540: CALL_OW 69
5544: ST_TO_ADDR
// end ;
5545: GO 5306
5547: POP
5548: POP
// for i in ru2_factory do
5549: LD_ADDR_VAR 0 2
5553: PUSH
5554: LD_INT 81
5556: PUSH
5557: FOR_IN
5558: IFFALSE 5826
// begin l = 0 ;
5560: LD_ADDR_VAR 0 8
5564: PUSH
5565: LD_INT 0
5567: ST_TO_ADDR
// ru2_mech = [ ] ;
5568: LD_ADDR_EXP 52
5572: PUSH
5573: EMPTY
5574: ST_TO_ADDR
// if IsInUnit ( i ) = 0 then
5575: LD_VAR 0 2
5579: PPUSH
5580: CALL_OW 310
5584: PUSH
5585: LD_INT 0
5587: EQUAL
5588: IFFALSE 5766
// begin repeat begin hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
5590: LD_ADDR_OWVAR 29
5594: PUSH
5595: LD_INT 9
5597: PPUSH
5598: LD_INT 11
5600: PPUSH
5601: CALL_OW 12
5605: PUSH
5606: LD_INT 10
5608: PPUSH
5609: LD_INT 12
5611: PPUSH
5612: CALL_OW 12
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: ST_TO_ADDR
// hc_skills = [ 0 + Level , 1 + Level , Rand ( 3 , 4 ) + Level , Rand ( 0 , 2 ) ] ;
5621: LD_ADDR_OWVAR 31
5625: PUSH
5626: LD_INT 0
5628: PUSH
5629: LD_EXP 13
5633: PLUS
5634: PUSH
5635: LD_INT 1
5637: PUSH
5638: LD_EXP 13
5642: PLUS
5643: PUSH
5644: LD_INT 3
5646: PPUSH
5647: LD_INT 4
5649: PPUSH
5650: CALL_OW 12
5654: PUSH
5655: LD_EXP 13
5659: PLUS
5660: PUSH
5661: LD_INT 0
5663: PPUSH
5664: LD_INT 2
5666: PPUSH
5667: CALL_OW 12
5671: PUSH
5672: EMPTY
5673: LIST
5674: LIST
5675: LIST
5676: LIST
5677: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5678: LD_ADDR_OWVAR 27
5682: PUSH
5683: LD_INT 1
5685: PPUSH
5686: LD_INT 2
5688: PPUSH
5689: CALL_OW 12
5693: ST_TO_ADDR
// hc_class = 3 ;
5694: LD_ADDR_OWVAR 28
5698: PUSH
5699: LD_INT 3
5701: ST_TO_ADDR
// un := CreateHuman ;
5702: LD_ADDR_VAR 0 3
5706: PUSH
5707: CALL_OW 44
5711: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
5712: LD_VAR 0 3
5716: PPUSH
5717: LD_VAR 0 2
5721: PPUSH
5722: CALL_OW 52
// ru2_mech := ru2_mech ^ un ;
5726: LD_ADDR_EXP 52
5730: PUSH
5731: LD_EXP 52
5735: PUSH
5736: LD_VAR 0 3
5740: ADD
5741: ST_TO_ADDR
// l = l + 1 ;
5742: LD_ADDR_VAR 0 8
5746: PUSH
5747: LD_VAR 0 8
5751: PUSH
5752: LD_INT 1
5754: PLUS
5755: ST_TO_ADDR
// end until l = 6 ;
5756: LD_VAR 0 8
5760: PUSH
5761: LD_INT 6
5763: EQUAL
5764: IFFALSE 5590
// end ; ComExitBuilding ( ru2_mech [ 1 ] ) ;
5766: LD_EXP 52
5770: PUSH
5771: LD_INT 1
5773: ARRAY
5774: PPUSH
5775: CALL_OW 122
// ComExitBuilding ( ru2_mech [ 2 ] ) ;
5779: LD_EXP 52
5783: PUSH
5784: LD_INT 2
5786: ARRAY
5787: PPUSH
5788: CALL_OW 122
// AddComEnterUnit ( ru2_mech [ 1 ] , kom1 ) ;
5792: LD_EXP 52
5796: PUSH
5797: LD_INT 1
5799: ARRAY
5800: PPUSH
5801: LD_INT 49
5803: PPUSH
5804: CALL_OW 180
// AddComEnterUnit ( ru2_mech [ 2 ] , tnk1 ) ;
5808: LD_EXP 52
5812: PUSH
5813: LD_INT 2
5815: ARRAY
5816: PPUSH
5817: LD_INT 183
5819: PPUSH
5820: CALL_OW 180
// end ;
5824: GO 5557
5826: POP
5827: POP
// for i in ru2_lab do
5828: LD_ADDR_VAR 0 2
5832: PUSH
5833: LD_INT 91
5835: PUSH
5836: FOR_IN
5837: IFFALSE 6130
// begin l = 0 ;
5839: LD_ADDR_VAR 0 8
5843: PUSH
5844: LD_INT 0
5846: ST_TO_ADDR
// if IsInUnit ( i ) = 0 then
5847: LD_VAR 0 2
5851: PPUSH
5852: CALL_OW 310
5856: PUSH
5857: LD_INT 0
5859: EQUAL
5860: IFFALSE 6028
// begin repeat begin hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
5862: LD_ADDR_OWVAR 29
5866: PUSH
5867: LD_INT 9
5869: PPUSH
5870: LD_INT 11
5872: PPUSH
5873: CALL_OW 12
5877: PUSH
5878: LD_INT 10
5880: PPUSH
5881: LD_INT 12
5883: PPUSH
5884: CALL_OW 12
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: ST_TO_ADDR
// hc_skills = [ 0 + Level , 0 + Level , Rand ( 0 , 3 ) + Level , Rand ( 2 , 5 ) + Level ] ;
5893: LD_ADDR_OWVAR 31
5897: PUSH
5898: LD_INT 0
5900: PUSH
5901: LD_EXP 13
5905: PLUS
5906: PUSH
5907: LD_INT 0
5909: PUSH
5910: LD_EXP 13
5914: PLUS
5915: PUSH
5916: LD_INT 0
5918: PPUSH
5919: LD_INT 3
5921: PPUSH
5922: CALL_OW 12
5926: PUSH
5927: LD_EXP 13
5931: PLUS
5932: PUSH
5933: LD_INT 2
5935: PPUSH
5936: LD_INT 5
5938: PPUSH
5939: CALL_OW 12
5943: PUSH
5944: LD_EXP 13
5948: PLUS
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5956: LD_ADDR_OWVAR 27
5960: PUSH
5961: LD_INT 1
5963: PPUSH
5964: LD_INT 2
5966: PPUSH
5967: CALL_OW 12
5971: ST_TO_ADDR
// hc_class = 4 ;
5972: LD_ADDR_OWVAR 28
5976: PUSH
5977: LD_INT 4
5979: ST_TO_ADDR
// un := CreateHuman ;
5980: LD_ADDR_VAR 0 3
5984: PUSH
5985: CALL_OW 44
5989: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
5990: LD_VAR 0 3
5994: PPUSH
5995: LD_VAR 0 2
5999: PPUSH
6000: CALL_OW 52
// l = l + 1 ;
6004: LD_ADDR_VAR 0 8
6008: PUSH
6009: LD_VAR 0 8
6013: PUSH
6014: LD_INT 1
6016: PLUS
6017: ST_TO_ADDR
// end until l = 6 ;
6018: LD_VAR 0 8
6022: PUSH
6023: LD_INT 6
6025: EQUAL
6026: IFFALSE 5862
// end ; AddComResearch ( ru2_lab , tech_oilPow ) ;
6028: LD_INT 91
6030: PPUSH
6031: LD_INT 46
6033: PPUSH
6034: CALL_OW 184
// AddComResearch ( ru2_lab , tech_oilEng ) ;
6038: LD_INT 91
6040: PPUSH
6041: LD_INT 47
6043: PPUSH
6044: CALL_OW 184
// AddComResearch ( ru2_lab , tech_tech1 ) ;
6048: LD_INT 91
6050: PPUSH
6051: LD_INT 48
6053: PPUSH
6054: CALL_OW 184
// AddComResearch ( ru2_lab , tech_tech2 ) ;
6058: LD_INT 91
6060: PPUSH
6061: LD_INT 49
6063: PPUSH
6064: CALL_OW 184
// AddComResearch ( ru2_lab , tech_tech3 ) ;
6068: LD_INT 91
6070: PPUSH
6071: LD_INT 50
6073: PPUSH
6074: CALL_OW 184
// AddComResearch ( ru2_lab , tech_gatling ) ;
6078: LD_INT 91
6080: PPUSH
6081: LD_INT 69
6083: PPUSH
6084: CALL_OW 184
// AddComResearch ( ru2_lab , tech_gun ) ;
6088: LD_INT 91
6090: PPUSH
6091: LD_INT 39
6093: PPUSH
6094: CALL_OW 184
// AddComResearch ( ru2_lab , tech_weap1 ) ;
6098: LD_INT 91
6100: PPUSH
6101: LD_INT 51
6103: PPUSH
6104: CALL_OW 184
// AddComResearch ( ru2_lab , tech_weap2 ) ;
6108: LD_INT 91
6110: PPUSH
6111: LD_INT 52
6113: PPUSH
6114: CALL_OW 184
// AddComResearch ( ru2_lab , tech_weap3 ) ;
6118: LD_INT 91
6120: PPUSH
6121: LD_INT 53
6123: PPUSH
6124: CALL_OW 184
// end ;
6128: GO 5836
6130: POP
6131: POP
// i = 0 ;
6132: LD_ADDR_VAR 0 2
6136: PUSH
6137: LD_INT 0
6139: ST_TO_ADDR
// k = 1 ;
6140: LD_ADDR_VAR 0 7
6144: PUSH
6145: LD_INT 1
6147: ST_TO_ADDR
// x1 = [ 167 , 171 , 169 , 118 , 127 , 135 , 73 , 75 , 80 , 56 , 47 , 56 , 50 , 56 , 61 , 71 ] ;
6148: LD_ADDR_VAR 0 5
6152: PUSH
6153: LD_INT 167
6155: PUSH
6156: LD_INT 171
6158: PUSH
6159: LD_INT 169
6161: PUSH
6162: LD_INT 118
6164: PUSH
6165: LD_INT 127
6167: PUSH
6168: LD_INT 135
6170: PUSH
6171: LD_INT 73
6173: PUSH
6174: LD_INT 75
6176: PUSH
6177: LD_INT 80
6179: PUSH
6180: LD_INT 56
6182: PUSH
6183: LD_INT 47
6185: PUSH
6186: LD_INT 56
6188: PUSH
6189: LD_INT 50
6191: PUSH
6192: LD_INT 56
6194: PUSH
6195: LD_INT 61
6197: PUSH
6198: LD_INT 71
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: LIST
6218: ST_TO_ADDR
// y1 = [ 170 , 165 , 155 , 111 , 111 , 115 , 51 , 57 , 61 , 76 , 54 , 47 , 29 , 19 , 17 , 19 ] ;
6219: LD_ADDR_VAR 0 6
6223: PUSH
6224: LD_INT 170
6226: PUSH
6227: LD_INT 165
6229: PUSH
6230: LD_INT 155
6232: PUSH
6233: LD_INT 111
6235: PUSH
6236: LD_INT 111
6238: PUSH
6239: LD_INT 115
6241: PUSH
6242: LD_INT 51
6244: PUSH
6245: LD_INT 57
6247: PUSH
6248: LD_INT 61
6250: PUSH
6251: LD_INT 76
6253: PUSH
6254: LD_INT 54
6256: PUSH
6257: LD_INT 47
6259: PUSH
6260: LD_INT 29
6262: PUSH
6263: LD_INT 19
6265: PUSH
6266: LD_INT 17
6268: PUSH
6269: LD_INT 19
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: ST_TO_ADDR
// for i = 1 to 16 do
6290: LD_ADDR_VAR 0 2
6294: PUSH
6295: DOUBLE
6296: LD_INT 1
6298: DEC
6299: ST_TO_ADDR
6300: LD_INT 16
6302: PUSH
6303: FOR_TO
6304: IFFALSE 6498
// begin hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
6306: LD_ADDR_OWVAR 29
6310: PUSH
6311: LD_INT 9
6313: PPUSH
6314: LD_INT 11
6316: PPUSH
6317: CALL_OW 12
6321: PUSH
6322: LD_INT 10
6324: PPUSH
6325: LD_INT 12
6327: PPUSH
6328: CALL_OW 12
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: ST_TO_ADDR
// hc_skills = [ 2 + Level , Rand ( 0 , 2 ) , Rand ( 0 , 3 ) , Rand ( 0 , 3 ) ] ;
6337: LD_ADDR_OWVAR 31
6341: PUSH
6342: LD_INT 2
6344: PUSH
6345: LD_EXP 13
6349: PLUS
6350: PUSH
6351: LD_INT 0
6353: PPUSH
6354: LD_INT 2
6356: PPUSH
6357: CALL_OW 12
6361: PUSH
6362: LD_INT 0
6364: PPUSH
6365: LD_INT 3
6367: PPUSH
6368: CALL_OW 12
6372: PUSH
6373: LD_INT 0
6375: PPUSH
6376: LD_INT 3
6378: PPUSH
6379: CALL_OW 12
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
6390: LD_ADDR_OWVAR 27
6394: PUSH
6395: LD_INT 1
6397: PPUSH
6398: LD_INT 2
6400: PPUSH
6401: CALL_OW 12
6405: ST_TO_ADDR
// hc_class = 1 ;
6406: LD_ADDR_OWVAR 28
6410: PUSH
6411: LD_INT 1
6413: ST_TO_ADDR
// un := CreateHuman ;
6414: LD_ADDR_VAR 0 3
6418: PUSH
6419: CALL_OW 44
6423: ST_TO_ADDR
// PlaceUnitXY ( un , x1 [ k ] , y1 [ k ] , false ) ;
6424: LD_VAR 0 3
6428: PPUSH
6429: LD_VAR 0 5
6433: PUSH
6434: LD_VAR 0 7
6438: ARRAY
6439: PPUSH
6440: LD_VAR 0 6
6444: PUSH
6445: LD_VAR 0 7
6449: ARRAY
6450: PPUSH
6451: LD_INT 0
6453: PPUSH
6454: CALL_OW 48
// k := k + 1 ;
6458: LD_ADDR_VAR 0 7
6462: PUSH
6463: LD_VAR 0 7
6467: PUSH
6468: LD_INT 1
6470: PLUS
6471: ST_TO_ADDR
// ComEnterUnit ( un , NearestUnitToUnit ( ru2_bun , un ) ) ;
6472: LD_VAR 0 3
6476: PPUSH
6477: LD_EXP 47
6481: PPUSH
6482: LD_VAR 0 3
6486: PPUSH
6487: CALL_OW 74
6491: PPUSH
6492: CALL_OW 120
// end ;
6496: GO 6303
6498: POP
6499: POP
// end ;
6500: LD_VAR 0 1
6504: RET
// every 0 0$01 do var i , ru_build , b , side ;
6505: GO 6507
6507: DISABLE
6508: LD_INT 0
6510: PPUSH
6511: PPUSH
6512: PPUSH
6513: PPUSH
// begin enable ;
6514: ENABLE
// ru_build := FilterAllUnits ( [ [ f_side , ru1 ] , [ f_type , unit_building ] ] ) ;
6515: LD_ADDR_VAR 0 2
6519: PUSH
6520: LD_INT 22
6522: PUSH
6523: LD_EXP 35
6527: PUSH
6528: EMPTY
6529: LIST
6530: LIST
6531: PUSH
6532: LD_INT 21
6534: PUSH
6535: LD_INT 3
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: PUSH
6542: EMPTY
6543: LIST
6544: LIST
6545: PPUSH
6546: CALL_OW 69
6550: ST_TO_ADDR
// for b in ru_build do
6551: LD_ADDR_VAR 0 3
6555: PUSH
6556: LD_VAR 0 2
6560: PUSH
6561: FOR_IN
6562: IFFALSE 6640
// begin if GetLives ( b ) < 1000 then
6564: LD_VAR 0 3
6568: PPUSH
6569: CALL_OW 256
6573: PUSH
6574: LD_INT 1000
6576: LESS
6577: IFFALSE 6638
// begin ComExitBuilding ( ru1_eng ) ;
6579: LD_EXP 43
6583: PPUSH
6584: CALL_OW 122
// repeat begin ComRepairBuilding ( ru1_eng , b ) ;
6588: LD_EXP 43
6592: PPUSH
6593: LD_VAR 0 3
6597: PPUSH
6598: CALL_OW 130
// Wait ( 0 0$03 ) ;
6602: LD_INT 105
6604: PPUSH
6605: CALL_OW 67
// end until GetLives ( b ) = 1000 ;
6609: LD_VAR 0 3
6613: PPUSH
6614: CALL_OW 256
6618: PUSH
6619: LD_INT 1000
6621: EQUAL
6622: IFFALSE 6588
// AddComEnterUnit ( ru1_eng , ru1_depot ) ;
6624: LD_EXP 43
6628: PPUSH
6629: LD_EXP 41
6633: PPUSH
6634: CALL_OW 180
// end ; end ;
6638: GO 6561
6640: POP
6641: POP
// end ;
6642: PPOPN 4
6644: END
// every 0 0$01 trigger ru2_eng > 0 do var i , ru_build , b , side ;
6645: LD_EXP 51
6649: PUSH
6650: LD_INT 0
6652: GREATER
6653: IFFALSE 6747
6655: GO 6657
6657: DISABLE
6658: LD_INT 0
6660: PPUSH
6661: PPUSH
6662: PPUSH
6663: PPUSH
// begin enable ;
6664: ENABLE
// ru_build := FilterAllUnits ( [ [ f_side , ru2 ] , [ f_type , unit_building ] ] ) ;
6665: LD_ADDR_VAR 0 2
6669: PUSH
6670: LD_INT 22
6672: PUSH
6673: LD_EXP 36
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: PUSH
6682: LD_INT 21
6684: PUSH
6685: LD_INT 3
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: PPUSH
6696: CALL_OW 69
6700: ST_TO_ADDR
// for b in ru_build do
6701: LD_ADDR_VAR 0 3
6705: PUSH
6706: LD_VAR 0 2
6710: PUSH
6711: FOR_IN
6712: IFFALSE 6745
// begin if GetLives ( b ) < 1000 then
6714: LD_VAR 0 3
6718: PPUSH
6719: CALL_OW 256
6723: PUSH
6724: LD_INT 1000
6726: LESS
6727: IFFALSE 6743
// begin AddComRepairBuilding ( ru2_eng , b ) ;
6729: LD_EXP 51
6733: PPUSH
6734: LD_VAR 0 3
6738: PPUSH
6739: CALL_OW 190
// end ; end ;
6743: GO 6711
6745: POP
6746: POP
// end ;
6747: PPOPN 4
6749: END
// export function AttackRussian ; var veh , un , i , k , x , RuAtTeam ; begin
6750: LD_INT 0
6752: PPUSH
6753: PPUSH
6754: PPUSH
6755: PPUSH
6756: PPUSH
6757: PPUSH
6758: PPUSH
// RuAtTeam = [ ] ;
6759: LD_ADDR_VAR 0 7
6763: PUSH
6764: EMPTY
6765: ST_TO_ADDR
// uc_side = ru1 ;
6766: LD_ADDR_OWVAR 20
6770: PUSH
6771: LD_EXP 35
6775: ST_TO_ADDR
// uc_nation = 3 ;
6776: LD_ADDR_OWVAR 21
6780: PUSH
6781: LD_INT 3
6783: ST_TO_ADDR
// for i = 1 to 2 do
6784: LD_ADDR_VAR 0 4
6788: PUSH
6789: DOUBLE
6790: LD_INT 1
6792: DEC
6793: ST_TO_ADDR
6794: LD_INT 2
6796: PUSH
6797: FOR_TO
6798: IFFALSE 6986
// begin vc_chassis = ru_medium_tracked ;
6800: LD_ADDR_OWVAR 37
6804: PUSH
6805: LD_INT 22
6807: ST_TO_ADDR
// vc_engine = engine_combustion ;
6808: LD_ADDR_OWVAR 39
6812: PUSH
6813: LD_INT 1
6815: ST_TO_ADDR
// vc_control = control_manual ;
6816: LD_ADDR_OWVAR 38
6820: PUSH
6821: LD_INT 1
6823: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
6824: LD_ADDR_OWVAR 40
6828: PUSH
6829: LD_INT 42
6831: ST_TO_ADDR
// veh = CreateVehicle ;
6832: LD_ADDR_VAR 0 2
6836: PUSH
6837: CALL_OW 45
6841: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianCom , false ) ;
6842: LD_VAR 0 2
6846: PPUSH
6847: LD_INT 6
6849: PPUSH
6850: LD_INT 0
6852: PPUSH
6853: CALL_OW 49
// RuAtTeam = RuAtTeam ^ veh ;
6857: LD_ADDR_VAR 0 7
6861: PUSH
6862: LD_VAR 0 7
6866: PUSH
6867: LD_VAR 0 2
6871: ADD
6872: ST_TO_ADDR
// hc_class = 1 ;
6873: LD_ADDR_OWVAR 28
6877: PUSH
6878: LD_INT 1
6880: ST_TO_ADDR
// hc_name =  ;
6881: LD_ADDR_OWVAR 26
6885: PUSH
6886: LD_STRING 
6888: ST_TO_ADDR
// hc_gallery =  ;
6889: LD_ADDR_OWVAR 33
6893: PUSH
6894: LD_STRING 
6896: ST_TO_ADDR
// hc_sex = sex_male ;
6897: LD_ADDR_OWVAR 27
6901: PUSH
6902: LD_INT 1
6904: ST_TO_ADDR
// hc_skills = [ Rand ( 1 , 3 ) + Level , 1 + Level , Rand ( 1 , 5 ) + Level , Rand ( 0 , 3 ) ] ;
6905: LD_ADDR_OWVAR 31
6909: PUSH
6910: LD_INT 1
6912: PPUSH
6913: LD_INT 3
6915: PPUSH
6916: CALL_OW 12
6920: PUSH
6921: LD_EXP 13
6925: PLUS
6926: PUSH
6927: LD_INT 1
6929: PUSH
6930: LD_EXP 13
6934: PLUS
6935: PUSH
6936: LD_INT 1
6938: PPUSH
6939: LD_INT 5
6941: PPUSH
6942: CALL_OW 12
6946: PUSH
6947: LD_EXP 13
6951: PLUS
6952: PUSH
6953: LD_INT 0
6955: PPUSH
6956: LD_INT 3
6958: PPUSH
6959: CALL_OW 12
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6970: CALL_OW 44
6974: PPUSH
6975: LD_VAR 0 2
6979: PPUSH
6980: CALL_OW 52
// end ;
6984: GO 6797
6986: POP
6987: POP
// for i = 1 to 2 do
6988: LD_ADDR_VAR 0 4
6992: PUSH
6993: DOUBLE
6994: LD_INT 1
6996: DEC
6997: ST_TO_ADDR
6998: LD_INT 2
7000: PUSH
7001: FOR_TO
7002: IFFALSE 7134
// begin vc_weapon = ru_gatling_gun ;
7004: LD_ADDR_OWVAR 40
7008: PUSH
7009: LD_INT 43
7011: ST_TO_ADDR
// veh = CreateVehicle ;
7012: LD_ADDR_VAR 0 2
7016: PUSH
7017: CALL_OW 45
7021: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianCom , false ) ;
7022: LD_VAR 0 2
7026: PPUSH
7027: LD_INT 6
7029: PPUSH
7030: LD_INT 0
7032: PPUSH
7033: CALL_OW 49
// RuAtTeam = RuAtTeam ^ veh ;
7037: LD_ADDR_VAR 0 7
7041: PUSH
7042: LD_VAR 0 7
7046: PUSH
7047: LD_VAR 0 2
7051: ADD
7052: ST_TO_ADDR
// hc_skills = [ Rand ( 1 , 3 ) + Level , 1 + Level , Rand ( 1 , 5 ) + Level , Rand ( 0 , 3 ) ] ;
7053: LD_ADDR_OWVAR 31
7057: PUSH
7058: LD_INT 1
7060: PPUSH
7061: LD_INT 3
7063: PPUSH
7064: CALL_OW 12
7068: PUSH
7069: LD_EXP 13
7073: PLUS
7074: PUSH
7075: LD_INT 1
7077: PUSH
7078: LD_EXP 13
7082: PLUS
7083: PUSH
7084: LD_INT 1
7086: PPUSH
7087: LD_INT 5
7089: PPUSH
7090: CALL_OW 12
7094: PUSH
7095: LD_EXP 13
7099: PLUS
7100: PUSH
7101: LD_INT 0
7103: PPUSH
7104: LD_INT 3
7106: PPUSH
7107: CALL_OW 12
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , veh ) ;
7118: CALL_OW 44
7122: PPUSH
7123: LD_VAR 0 2
7127: PPUSH
7128: CALL_OW 52
// end ;
7132: GO 7001
7134: POP
7135: POP
// for i = 1 to 2 do
7136: LD_ADDR_VAR 0 4
7140: PUSH
7141: DOUBLE
7142: LD_INT 1
7144: DEC
7145: ST_TO_ADDR
7146: LD_INT 2
7148: PUSH
7149: FOR_TO
7150: IFFALSE 7282
// begin vc_weapon = ru_gun ;
7152: LD_ADDR_OWVAR 40
7156: PUSH
7157: LD_INT 44
7159: ST_TO_ADDR
// veh = CreateVehicle ;
7160: LD_ADDR_VAR 0 2
7164: PUSH
7165: CALL_OW 45
7169: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianCom , false ) ;
7170: LD_VAR 0 2
7174: PPUSH
7175: LD_INT 6
7177: PPUSH
7178: LD_INT 0
7180: PPUSH
7181: CALL_OW 49
// RuAtTeam = RuAtTeam ^ veh ;
7185: LD_ADDR_VAR 0 7
7189: PUSH
7190: LD_VAR 0 7
7194: PUSH
7195: LD_VAR 0 2
7199: ADD
7200: ST_TO_ADDR
// hc_skills = [ Rand ( 1 , 3 ) + Level , 1 + Level , Rand ( 1 , 5 ) + Level , Rand ( 0 , 3 ) ] ;
7201: LD_ADDR_OWVAR 31
7205: PUSH
7206: LD_INT 1
7208: PPUSH
7209: LD_INT 3
7211: PPUSH
7212: CALL_OW 12
7216: PUSH
7217: LD_EXP 13
7221: PLUS
7222: PUSH
7223: LD_INT 1
7225: PUSH
7226: LD_EXP 13
7230: PLUS
7231: PUSH
7232: LD_INT 1
7234: PPUSH
7235: LD_INT 5
7237: PPUSH
7238: CALL_OW 12
7242: PUSH
7243: LD_EXP 13
7247: PLUS
7248: PUSH
7249: LD_INT 0
7251: PPUSH
7252: LD_INT 3
7254: PPUSH
7255: CALL_OW 12
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , veh ) ;
7266: CALL_OW 44
7270: PPUSH
7271: LD_VAR 0 2
7275: PPUSH
7276: CALL_OW 52
// end ;
7280: GO 7149
7282: POP
7283: POP
// Wait ( 0 0$0.1 ) ;
7284: LD_INT 4
7286: PPUSH
7287: CALL_OW 67
// x = [ 146 , 44 , 180 , 118 , 161 , 132 , 141 , 144 , 117 , 147 , 102 , 128 ] ;
7291: LD_ADDR_VAR 0 6
7295: PUSH
7296: LD_INT 146
7298: PUSH
7299: LD_INT 44
7301: PUSH
7302: LD_INT 180
7304: PUSH
7305: LD_INT 118
7307: PUSH
7308: LD_INT 161
7310: PUSH
7311: LD_INT 132
7313: PUSH
7314: LD_INT 141
7316: PUSH
7317: LD_INT 144
7319: PUSH
7320: LD_INT 117
7322: PUSH
7323: LD_INT 147
7325: PUSH
7326: LD_INT 102
7328: PUSH
7329: LD_INT 128
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: LIST
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: ST_TO_ADDR
// k = 1 ;
7346: LD_ADDR_VAR 0 5
7350: PUSH
7351: LD_INT 1
7353: ST_TO_ADDR
// repeat begin AddComAgressiveMove ( RuAtTeam , x [ k ] , x [ k + 1 ] ) ;
7354: LD_VAR 0 7
7358: PPUSH
7359: LD_VAR 0 6
7363: PUSH
7364: LD_VAR 0 5
7368: ARRAY
7369: PPUSH
7370: LD_VAR 0 6
7374: PUSH
7375: LD_VAR 0 5
7379: PUSH
7380: LD_INT 1
7382: PLUS
7383: ARRAY
7384: PPUSH
7385: CALL_OW 174
// k = k + 2 ;
7389: LD_ADDR_VAR 0 5
7393: PUSH
7394: LD_VAR 0 5
7398: PUSH
7399: LD_INT 2
7401: PLUS
7402: ST_TO_ADDR
// Wait ( 0 0$10 ) ;
7403: LD_INT 350
7405: PPUSH
7406: CALL_OW 67
// end until k = 11 ;
7410: LD_VAR 0 5
7414: PUSH
7415: LD_INT 11
7417: EQUAL
7418: IFFALSE 7354
// Wait ( 5 ) ;
7420: LD_INT 5
7422: PPUSH
7423: CALL_OW 67
// repeat begin for un in RuAtTeam do
7427: LD_ADDR_VAR 0 3
7431: PUSH
7432: LD_VAR 0 7
7436: PUSH
7437: FOR_IN
7438: IFFALSE 7493
// begin en_unit := FilterAllUnits ( [ f_side , 1 ] ) ;
7440: LD_ADDR_EXP 54
7444: PUSH
7445: LD_INT 22
7447: PUSH
7448: LD_INT 1
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PPUSH
7455: CALL_OW 69
7459: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( en_unit , un ) ) ;
7460: LD_VAR 0 3
7464: PPUSH
7465: LD_EXP 54
7469: PPUSH
7470: LD_VAR 0 3
7474: PPUSH
7475: CALL_OW 74
7479: PPUSH
7480: CALL_OW 115
// Wait ( 0 0$0.1 ) ;
7484: LD_INT 4
7486: PPUSH
7487: CALL_OW 67
// end ;
7491: GO 7437
7493: POP
7494: POP
// end until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
7495: LD_INT 22
7497: PUSH
7498: LD_INT 3
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PUSH
7505: LD_INT 21
7507: PUSH
7508: LD_INT 1
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: PPUSH
7519: CALL_OW 69
7523: PUSH
7524: LD_INT 0
7526: EQUAL
7527: IFFALSE 7427
// end ;
7529: LD_VAR 0 1
7533: RET
// every 6 6$25 trigger First_Warn = false and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) < 3 do
7534: LD_EXP 6
7538: PUSH
7539: LD_INT 0
7541: EQUAL
7542: PUSH
7543: LD_INT 22
7545: PUSH
7546: LD_INT 3
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: PUSH
7553: LD_INT 21
7555: PUSH
7556: LD_INT 2
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: PPUSH
7567: CALL_OW 69
7571: PUSH
7572: LD_INT 3
7574: LESS
7575: AND
7576: IFFALSE 7586
7578: GO 7580
7580: DISABLE
// begin AttackRussian ;
7581: CALL 6750 0 0
// enable ;
7585: ENABLE
// end ;
7586: END
// export Guardian ; export function Guards ; var un , i , veh ; begin
7587: LD_INT 0
7589: PPUSH
7590: PPUSH
7591: PPUSH
7592: PPUSH
// uc_side = ru2 ;
7593: LD_ADDR_OWVAR 20
7597: PUSH
7598: LD_EXP 36
7602: ST_TO_ADDR
// uc_nation = 3 ;
7603: LD_ADDR_OWVAR 21
7607: PUSH
7608: LD_INT 3
7610: ST_TO_ADDR
// for i = 1 to 3 do
7611: LD_ADDR_VAR 0 3
7615: PUSH
7616: DOUBLE
7617: LD_INT 1
7619: DEC
7620: ST_TO_ADDR
7621: LD_INT 3
7623: PUSH
7624: FOR_TO
7625: IFFALSE 7813
// begin vc_chassis = ru_medium_tracked ;
7627: LD_ADDR_OWVAR 37
7631: PUSH
7632: LD_INT 22
7634: ST_TO_ADDR
// vc_engine = engine_combustion ;
7635: LD_ADDR_OWVAR 39
7639: PUSH
7640: LD_INT 1
7642: ST_TO_ADDR
// vc_control = control_manual ;
7643: LD_ADDR_OWVAR 38
7647: PUSH
7648: LD_INT 1
7650: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
7651: LD_ADDR_OWVAR 40
7655: PUSH
7656: LD_INT 43
7658: ST_TO_ADDR
// veh = CreateVehicle ;
7659: LD_ADDR_VAR 0 4
7663: PUSH
7664: CALL_OW 45
7668: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianCom , false ) ;
7669: LD_VAR 0 4
7673: PPUSH
7674: LD_INT 6
7676: PPUSH
7677: LD_INT 0
7679: PPUSH
7680: CALL_OW 49
// Guardian = Guardian ^ veh ;
7684: LD_ADDR_EXP 57
7688: PUSH
7689: LD_EXP 57
7693: PUSH
7694: LD_VAR 0 4
7698: ADD
7699: ST_TO_ADDR
// hc_class = 3 ;
7700: LD_ADDR_OWVAR 28
7704: PUSH
7705: LD_INT 3
7707: ST_TO_ADDR
// hc_name =  ;
7708: LD_ADDR_OWVAR 26
7712: PUSH
7713: LD_STRING 
7715: ST_TO_ADDR
// hc_gallery =  ;
7716: LD_ADDR_OWVAR 33
7720: PUSH
7721: LD_STRING 
7723: ST_TO_ADDR
// hc_sex = sex_male ;
7724: LD_ADDR_OWVAR 27
7728: PUSH
7729: LD_INT 1
7731: ST_TO_ADDR
// hc_skills = [ Rand ( 1 , 3 ) + Level , 1 + Level , Rand ( 1 , 5 ) + Level , Rand ( 0 , 3 ) ] ;
7732: LD_ADDR_OWVAR 31
7736: PUSH
7737: LD_INT 1
7739: PPUSH
7740: LD_INT 3
7742: PPUSH
7743: CALL_OW 12
7747: PUSH
7748: LD_EXP 13
7752: PLUS
7753: PUSH
7754: LD_INT 1
7756: PUSH
7757: LD_EXP 13
7761: PLUS
7762: PUSH
7763: LD_INT 1
7765: PPUSH
7766: LD_INT 5
7768: PPUSH
7769: CALL_OW 12
7773: PUSH
7774: LD_EXP 13
7778: PLUS
7779: PUSH
7780: LD_INT 0
7782: PPUSH
7783: LD_INT 3
7785: PPUSH
7786: CALL_OW 12
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , veh ) ;
7797: CALL_OW 44
7801: PPUSH
7802: LD_VAR 0 4
7806: PPUSH
7807: CALL_OW 52
// end ;
7811: GO 7624
7813: POP
7814: POP
// end ;
7815: LD_VAR 0 1
7819: RET
// every 0 0$01 trigger russian_kills > 9 do
7820: LD_EXP 11
7824: PUSH
7825: LD_INT 9
7827: GREATER
7828: IFFALSE 7837
7830: GO 7832
7832: DISABLE
// begin Guards ;
7833: CALL 7587 0 0
// end ;
7837: END
// every 0 0$01 trigger IsInArea ( Louis , Road ) do var un ;
7838: LD_EXP 19
7842: PPUSH
7843: LD_INT 7
7845: PPUSH
7846: CALL_OW 308
7850: IFFALSE 7932
7852: GO 7854
7854: DISABLE
7855: LD_INT 0
7857: PPUSH
// begin ComAgressiveMove ( Guardian , GetX ( Louis ) , GetY ( Louis ) ) ;
7858: LD_EXP 57
7862: PPUSH
7863: LD_EXP 19
7867: PPUSH
7868: CALL_OW 250
7872: PPUSH
7873: LD_EXP 19
7877: PPUSH
7878: CALL_OW 251
7882: PPUSH
7883: CALL_OW 114
// enable ;
7887: ENABLE
// for un in Guardian do
7888: LD_ADDR_VAR 0 1
7892: PUSH
7893: LD_EXP 57
7897: PUSH
7898: FOR_IN
7899: IFFALSE 7930
// begin if GetFuel ( un ) < 10 then
7901: LD_VAR 0 1
7905: PPUSH
7906: CALL_OW 261
7910: PUSH
7911: LD_INT 10
7913: LESS
7914: IFFALSE 7928
// SetFuel ( un , 100 ) ;
7916: LD_VAR 0 1
7920: PPUSH
7921: LD_INT 100
7923: PPUSH
7924: CALL_OW 240
// end ;
7928: GO 7898
7930: POP
7931: POP
// end ;
7932: PPOPN 1
7934: END
// every 0 0$01 trigger GetLives ( kom1 ) < 960 do
7935: LD_INT 49
7937: PPUSH
7938: CALL_OW 256
7942: PUSH
7943: LD_INT 960
7945: LESS
7946: IFFALSE 7964
7948: GO 7950
7950: DISABLE
// begin ComMoveXY ( kom1 , 130 , 14 ) ;
7951: LD_INT 49
7953: PPUSH
7954: LD_INT 130
7956: PPUSH
7957: LD_INT 14
7959: PPUSH
7960: CALL_OW 111
// end ;
7964: END
// export function ComAttackLouis ; begin
7965: LD_INT 0
7967: PPUSH
// uc_side = 3 ;
7968: LD_ADDR_OWVAR 20
7972: PUSH
7973: LD_INT 3
7975: ST_TO_ADDR
// uc_nation = 3 ;
7976: LD_ADDR_OWVAR 21
7980: PUSH
7981: LD_INT 3
7983: ST_TO_ADDR
// hc_gallery =  ;
7984: LD_ADDR_OWVAR 33
7988: PUSH
7989: LD_STRING 
7991: ST_TO_ADDR
// hc_name =  ;
7992: LD_ADDR_OWVAR 26
7996: PUSH
7997: LD_STRING 
7999: ST_TO_ADDR
// hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
8000: LD_ADDR_OWVAR 29
8004: PUSH
8005: LD_INT 9
8007: PPUSH
8008: LD_INT 11
8010: PPUSH
8011: CALL_OW 12
8015: PUSH
8016: LD_INT 10
8018: PPUSH
8019: LD_INT 12
8021: PPUSH
8022: CALL_OW 12
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8031: LD_ADDR_OWVAR 31
8035: PUSH
8036: LD_INT 0
8038: PPUSH
8039: LD_INT 2
8041: PPUSH
8042: CALL_OW 12
8046: PUSH
8047: LD_INT 0
8049: PUSH
8050: LD_INT 0
8052: PUSH
8053: LD_INT 0
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
8062: LD_ADDR_OWVAR 27
8066: PUSH
8067: LD_INT 1
8069: PPUSH
8070: LD_INT 2
8072: PPUSH
8073: CALL_OW 12
8077: ST_TO_ADDR
// hc_class = 1 ;
8078: LD_ADDR_OWVAR 28
8082: PUSH
8083: LD_INT 1
8085: ST_TO_ADDR
// rus1 = CreateHuman ;
8086: LD_ADDR_EXP 55
8090: PUSH
8091: CALL_OW 44
8095: ST_TO_ADDR
// rus2 = CreateHuman ;
8096: LD_ADDR_EXP 56
8100: PUSH
8101: CALL_OW 44
8105: ST_TO_ADDR
// PlaceUnitXY ( rus1 , 119 , 169 , false ) ;
8106: LD_EXP 55
8110: PPUSH
8111: LD_INT 119
8113: PPUSH
8114: LD_INT 169
8116: PPUSH
8117: LD_INT 0
8119: PPUSH
8120: CALL_OW 48
// PlaceUnitXY ( rus2 , 120 , 169 , false ) ;
8124: LD_EXP 56
8128: PPUSH
8129: LD_INT 120
8131: PPUSH
8132: LD_INT 169
8134: PPUSH
8135: LD_INT 0
8137: PPUSH
8138: CALL_OW 48
// SetLives ( rus1 , dif_liv ) ;
8142: LD_EXP 55
8146: PPUSH
8147: LD_EXP 18
8151: PPUSH
8152: CALL_OW 234
// SetLives ( rus2 , dif_liv + 35 ) ;
8156: LD_EXP 56
8160: PPUSH
8161: LD_EXP 18
8165: PUSH
8166: LD_INT 35
8168: PLUS
8169: PPUSH
8170: CALL_OW 234
// Say ( rus1 , Ru-At1 ) ;
8174: LD_EXP 55
8178: PPUSH
8179: LD_STRING Ru-At1
8181: PPUSH
8182: CALL_OW 88
// ComMoveToArea ( [ rus1 , rus2 ] , lstart ) ;
8186: LD_EXP 55
8190: PUSH
8191: LD_EXP 56
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: PPUSH
8200: LD_INT 8
8202: PPUSH
8203: CALL_OW 113
// Wait ( 0 0$03 ) ;
8207: LD_INT 105
8209: PPUSH
8210: CALL_OW 67
// BlockRiver ;
8214: CALL 8412 0 0
// end ;
8218: LD_VAR 0 1
8222: RET
// every 0 0$01 trigger IsInArea ( louis , TrapA ) and GetLives ( louis ) < 999 do
8223: LD_EXP 19
8227: PPUSH
8228: LD_INT 12
8230: PPUSH
8231: CALL_OW 308
8235: PUSH
8236: LD_EXP 19
8240: PPUSH
8241: CALL_OW 256
8245: PUSH
8246: LD_INT 999
8248: LESS
8249: AND
8250: IFFALSE 8290
8252: GO 8254
8254: DISABLE
// begin Say ( rus2 , Ru-At2 ) ;
8255: LD_EXP 56
8259: PPUSH
8260: LD_STRING Ru-At2
8262: PPUSH
8263: CALL_OW 88
// ComAttackUnit ( [ rus1 , rus2 ] , louis ) ;
8267: LD_EXP 55
8271: PUSH
8272: LD_EXP 56
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PPUSH
8281: LD_EXP 19
8285: PPUSH
8286: CALL_OW 115
// end ;
8290: END
// every 3 trigger IsInArea ( rus1 , TrapA ) do
8291: LD_EXP 55
8295: PPUSH
8296: LD_INT 12
8298: PPUSH
8299: CALL_OW 308
8303: IFFALSE 8411
8305: GO 8307
8307: DISABLE
// begin Wait ( 0 0$03 ) ;
8308: LD_INT 105
8310: PPUSH
8311: CALL_OW 67
// Say ( rus2 , Ru-At3 ) ;
8315: LD_EXP 56
8319: PPUSH
8320: LD_STRING Ru-At3
8322: PPUSH
8323: CALL_OW 88
// Wait ( Rand ( 0 0$55 , 1 1$20 ) ) ;
8327: LD_INT 1925
8329: PPUSH
8330: LD_INT 2800
8332: PPUSH
8333: CALL_OW 12
8337: PPUSH
8338: CALL_OW 67
// ComAgressiveMove ( [ rus1 , rus2 ] , 98 , 179 ) ;
8342: LD_EXP 55
8346: PUSH
8347: LD_EXP 56
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: PPUSH
8356: LD_INT 98
8358: PPUSH
8359: LD_INT 179
8361: PPUSH
8362: CALL_OW 114
// AddComWait ( [ rus1 , rus2 ] , 0 0$10 ) ;
8366: LD_EXP 55
8370: PUSH
8371: LD_EXP 56
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: PPUSH
8380: LD_INT 350
8382: PPUSH
8383: CALL_OW 202
// AddComAgressiveMove ( [ rus1 , rus2 ] , 87 , 140 ) ;
8387: LD_EXP 55
8391: PUSH
8392: LD_EXP 56
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: PPUSH
8401: LD_INT 87
8403: PPUSH
8404: LD_INT 140
8406: PPUSH
8407: CALL_OW 174
// end ;
8411: END
// export block1 , block2 ; function BlockRiver ; begin
8412: LD_INT 0
8414: PPUSH
// uc_side = 3 ;
8415: LD_ADDR_OWVAR 20
8419: PUSH
8420: LD_INT 3
8422: ST_TO_ADDR
// uc_nation = 3 ;
8423: LD_ADDR_OWVAR 21
8427: PUSH
8428: LD_INT 3
8430: ST_TO_ADDR
// hc_gallery =  ;
8431: LD_ADDR_OWVAR 33
8435: PUSH
8436: LD_STRING 
8438: ST_TO_ADDR
// hc_name =  ;
8439: LD_ADDR_OWVAR 26
8443: PUSH
8444: LD_STRING 
8446: ST_TO_ADDR
// hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
8447: LD_ADDR_OWVAR 29
8451: PUSH
8452: LD_INT 9
8454: PPUSH
8455: LD_INT 11
8457: PPUSH
8458: CALL_OW 12
8462: PUSH
8463: LD_INT 10
8465: PPUSH
8466: LD_INT 12
8468: PPUSH
8469: CALL_OW 12
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: ST_TO_ADDR
// hc_skills = [ Rand ( 5 , 8 ) , 0 , 0 , 0 ] ;
8478: LD_ADDR_OWVAR 31
8482: PUSH
8483: LD_INT 5
8485: PPUSH
8486: LD_INT 8
8488: PPUSH
8489: CALL_OW 12
8493: PUSH
8494: LD_INT 0
8496: PUSH
8497: LD_INT 0
8499: PUSH
8500: LD_INT 0
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
8509: LD_ADDR_OWVAR 27
8513: PUSH
8514: LD_INT 1
8516: PPUSH
8517: LD_INT 2
8519: PPUSH
8520: CALL_OW 12
8524: ST_TO_ADDR
// hc_class = 1 ;
8525: LD_ADDR_OWVAR 28
8529: PUSH
8530: LD_INT 1
8532: ST_TO_ADDR
// block1 = CreateHuman ;
8533: LD_ADDR_EXP 58
8537: PUSH
8538: CALL_OW 44
8542: ST_TO_ADDR
// block2 = CreateHuman ;
8543: LD_ADDR_EXP 59
8547: PUSH
8548: CALL_OW 44
8552: ST_TO_ADDR
// PlaceUnitXY ( block1 , 149 , 152 , false ) ;
8553: LD_EXP 58
8557: PPUSH
8558: LD_INT 149
8560: PPUSH
8561: LD_INT 152
8563: PPUSH
8564: LD_INT 0
8566: PPUSH
8567: CALL_OW 48
// PlaceUnitXY ( block2 , 149 , 152 , false ) ;
8571: LD_EXP 59
8575: PPUSH
8576: LD_INT 149
8578: PPUSH
8579: LD_INT 152
8581: PPUSH
8582: LD_INT 0
8584: PPUSH
8585: CALL_OW 48
// end ; end_of_file
8589: LD_VAR 0 1
8593: RET
// export ar ; export list ; export function PrepareArabian ; begin
8594: LD_INT 0
8596: PPUSH
// ar = 5 ;
8597: LD_ADDR_EXP 60
8601: PUSH
8602: LD_INT 5
8604: ST_TO_ADDR
// PrepareArabs ;
8605: CALL 8618 0 0
// FAbdul ;
8609: CALL 9380 0 0
// end ;
8613: LD_VAR 0 1
8617: RET
// export Dwein , Olaf , Gunther , Karla , Joachim , Abdul , MMark ; export ArTeam ; export function PrepareArabs ; begin
8618: LD_INT 0
8620: PPUSH
// uc_side = ar ;
8621: LD_ADDR_OWVAR 20
8625: PUSH
8626: LD_EXP 60
8630: ST_TO_ADDR
// uc_nation = 2 ;
8631: LD_ADDR_OWVAR 21
8635: PUSH
8636: LD_INT 2
8638: ST_TO_ADDR
// ArTeam = [ ] ;
8639: LD_ADDR_EXP 69
8643: PUSH
8644: EMPTY
8645: ST_TO_ADDR
// hc_importance := 0 ;
8646: LD_ADDR_OWVAR 32
8650: PUSH
8651: LD_INT 0
8653: ST_TO_ADDR
// hc_class = 1 ;
8654: LD_ADDR_OWVAR 28
8658: PUSH
8659: LD_INT 1
8661: ST_TO_ADDR
// hc_name = Dwein Gustavsson ;
8662: LD_ADDR_OWVAR 26
8666: PUSH
8667: LD_STRING Dwein Gustavsson
8669: ST_TO_ADDR
// hc_gallery = sandar ;
8670: LD_ADDR_OWVAR 33
8674: PUSH
8675: LD_STRING sandar
8677: ST_TO_ADDR
// hc_face_number = 14 ;
8678: LD_ADDR_OWVAR 34
8682: PUSH
8683: LD_INT 14
8685: ST_TO_ADDR
// hc_skills = [ 3 , 0 , 1 , 1 ] ;
8686: LD_ADDR_OWVAR 31
8690: PUSH
8691: LD_INT 3
8693: PUSH
8694: LD_INT 0
8696: PUSH
8697: LD_INT 1
8699: PUSH
8700: LD_INT 1
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: ST_TO_ADDR
// hc_sex = sex_male ;
8709: LD_ADDR_OWVAR 27
8713: PUSH
8714: LD_INT 1
8716: ST_TO_ADDR
// hc_attr = [ 10 , 12 ] ;
8717: LD_ADDR_OWVAR 29
8721: PUSH
8722: LD_INT 10
8724: PUSH
8725: LD_INT 12
8727: PUSH
8728: EMPTY
8729: LIST
8730: LIST
8731: ST_TO_ADDR
// Dwein = CreateHuman ;
8732: LD_ADDR_EXP 62
8736: PUSH
8737: CALL_OW 44
8741: ST_TO_ADDR
// ArTeam = ArTeam ^ Dwein ;
8742: LD_ADDR_EXP 69
8746: PUSH
8747: LD_EXP 69
8751: PUSH
8752: LD_EXP 62
8756: ADD
8757: ST_TO_ADDR
// PlaceUnitArea ( Dwein , ArStart , false ) ;
8758: LD_EXP 62
8762: PPUSH
8763: LD_INT 4
8765: PPUSH
8766: LD_INT 0
8768: PPUSH
8769: CALL_OW 49
// ComTurnXY ( Dwein , 175 , 175 ) ;
8773: LD_EXP 62
8777: PPUSH
8778: LD_INT 175
8780: PPUSH
8781: LD_INT 175
8783: PPUSH
8784: CALL_OW 118
// hc_class = 4 ;
8788: LD_ADDR_OWVAR 28
8792: PUSH
8793: LD_INT 4
8795: ST_TO_ADDR
// hc_name = Olaf Kol ;
8796: LD_ADDR_OWVAR 26
8800: PUSH
8801: LD_STRING Olaf Kol
8803: ST_TO_ADDR
// hc_gallery = sandar ;
8804: LD_ADDR_OWVAR 33
8808: PUSH
8809: LD_STRING sandar
8811: ST_TO_ADDR
// hc_face_number = 15 ;
8812: LD_ADDR_OWVAR 34
8816: PUSH
8817: LD_INT 15
8819: ST_TO_ADDR
// hc_skills = [ 1 , 0 , 1 , 3 ] ;
8820: LD_ADDR_OWVAR 31
8824: PUSH
8825: LD_INT 1
8827: PUSH
8828: LD_INT 0
8830: PUSH
8831: LD_INT 1
8833: PUSH
8834: LD_INT 3
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: ST_TO_ADDR
// hc_sex = sex_male ;
8843: LD_ADDR_OWVAR 27
8847: PUSH
8848: LD_INT 1
8850: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
8851: LD_ADDR_OWVAR 29
8855: PUSH
8856: LD_INT 11
8858: PUSH
8859: LD_INT 11
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: ST_TO_ADDR
// Olaf = CreateHuman ;
8866: LD_ADDR_EXP 63
8870: PUSH
8871: CALL_OW 44
8875: ST_TO_ADDR
// ArTeam = ArTeam ^ Olaf ;
8876: LD_ADDR_EXP 69
8880: PUSH
8881: LD_EXP 69
8885: PUSH
8886: LD_EXP 63
8890: ADD
8891: ST_TO_ADDR
// PlaceUnitArea ( Olaf , ArStart , false ) ;
8892: LD_EXP 63
8896: PPUSH
8897: LD_INT 4
8899: PPUSH
8900: LD_INT 0
8902: PPUSH
8903: CALL_OW 49
// ComTurnXY ( Olaf , 175 , 175 ) ;
8907: LD_EXP 63
8911: PPUSH
8912: LD_INT 175
8914: PPUSH
8915: LD_INT 175
8917: PPUSH
8918: CALL_OW 118
// hc_class = 1 ;
8922: LD_ADDR_OWVAR 28
8926: PUSH
8927: LD_INT 1
8929: ST_TO_ADDR
// hc_name = Gunther Schweppenburg ;
8930: LD_ADDR_OWVAR 26
8934: PUSH
8935: LD_STRING Gunther Schweppenburg
8937: ST_TO_ADDR
// hc_gallery = sandar ;
8938: LD_ADDR_OWVAR 33
8942: PUSH
8943: LD_STRING sandar
8945: ST_TO_ADDR
// hc_face_number = 16 ;
8946: LD_ADDR_OWVAR 34
8950: PUSH
8951: LD_INT 16
8953: ST_TO_ADDR
// hc_skills = [ 1 , 0 , 0 , 2 ] ;
8954: LD_ADDR_OWVAR 31
8958: PUSH
8959: LD_INT 1
8961: PUSH
8962: LD_INT 0
8964: PUSH
8965: LD_INT 0
8967: PUSH
8968: LD_INT 2
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: ST_TO_ADDR
// hc_sex = sex_male ;
8977: LD_ADDR_OWVAR 27
8981: PUSH
8982: LD_INT 1
8984: ST_TO_ADDR
// hc_attr = [ 10 , 12 ] ;
8985: LD_ADDR_OWVAR 29
8989: PUSH
8990: LD_INT 10
8992: PUSH
8993: LD_INT 12
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: ST_TO_ADDR
// Gunther = CreateHuman ;
9000: LD_ADDR_EXP 64
9004: PUSH
9005: CALL_OW 44
9009: ST_TO_ADDR
// ArTeam = ArTeam ^ Gunther ;
9010: LD_ADDR_EXP 69
9014: PUSH
9015: LD_EXP 69
9019: PUSH
9020: LD_EXP 64
9024: ADD
9025: ST_TO_ADDR
// PlaceUnitArea ( Gunther , ArStart , false ) ;
9026: LD_EXP 64
9030: PPUSH
9031: LD_INT 4
9033: PPUSH
9034: LD_INT 0
9036: PPUSH
9037: CALL_OW 49
// ComTurnXY ( Gunther , 175 , 175 ) ;
9041: LD_EXP 64
9045: PPUSH
9046: LD_INT 175
9048: PPUSH
9049: LD_INT 175
9051: PPUSH
9052: CALL_OW 118
// hc_class = 1 ;
9056: LD_ADDR_OWVAR 28
9060: PUSH
9061: LD_INT 1
9063: ST_TO_ADDR
// hc_name = Joachim Leb ;
9064: LD_ADDR_OWVAR 26
9068: PUSH
9069: LD_STRING Joachim Leb
9071: ST_TO_ADDR
// hc_gallery = sandar ;
9072: LD_ADDR_OWVAR 33
9076: PUSH
9077: LD_STRING sandar
9079: ST_TO_ADDR
// hc_face_number = 18 ;
9080: LD_ADDR_OWVAR 34
9084: PUSH
9085: LD_INT 18
9087: ST_TO_ADDR
// hc_skills = [ 3 , 0 , 0 , 1 ] ;
9088: LD_ADDR_OWVAR 31
9092: PUSH
9093: LD_INT 3
9095: PUSH
9096: LD_INT 0
9098: PUSH
9099: LD_INT 0
9101: PUSH
9102: LD_INT 1
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: ST_TO_ADDR
// hc_sex = sex_male ;
9111: LD_ADDR_OWVAR 27
9115: PUSH
9116: LD_INT 1
9118: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
9119: LD_ADDR_OWVAR 29
9123: PUSH
9124: LD_INT 10
9126: PUSH
9127: LD_INT 10
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: ST_TO_ADDR
// Joachim = CreateHuman ;
9134: LD_ADDR_EXP 66
9138: PUSH
9139: CALL_OW 44
9143: ST_TO_ADDR
// ArTeam = ArTeam ^ Joachim ;
9144: LD_ADDR_EXP 69
9148: PUSH
9149: LD_EXP 69
9153: PUSH
9154: LD_EXP 66
9158: ADD
9159: ST_TO_ADDR
// PlaceUnitArea ( Joachim , ArStart , false ) ;
9160: LD_EXP 66
9164: PPUSH
9165: LD_INT 4
9167: PPUSH
9168: LD_INT 0
9170: PPUSH
9171: CALL_OW 49
// ComTurnXY ( Joachim , 175 , 175 ) ;
9175: LD_EXP 66
9179: PPUSH
9180: LD_INT 175
9182: PPUSH
9183: LD_INT 175
9185: PPUSH
9186: CALL_OW 118
// hc_class = 1 ;
9190: LD_ADDR_OWVAR 28
9194: PUSH
9195: LD_INT 1
9197: ST_TO_ADDR
// hc_name = Karla Mann ;
9198: LD_ADDR_OWVAR 26
9202: PUSH
9203: LD_STRING Karla Mann
9205: ST_TO_ADDR
// hc_gallery = sandar ;
9206: LD_ADDR_OWVAR 33
9210: PUSH
9211: LD_STRING sandar
9213: ST_TO_ADDR
// hc_face_number = 17 ;
9214: LD_ADDR_OWVAR 34
9218: PUSH
9219: LD_INT 17
9221: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 0 , 0 ] ;
9222: LD_ADDR_OWVAR 31
9226: PUSH
9227: LD_INT 4
9229: PUSH
9230: LD_INT 2
9232: PUSH
9233: LD_INT 0
9235: PUSH
9236: LD_INT 0
9238: PUSH
9239: EMPTY
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: ST_TO_ADDR
// hc_sex = sex_female ;
9245: LD_ADDR_OWVAR 27
9249: PUSH
9250: LD_INT 2
9252: ST_TO_ADDR
// hc_attr = [ 12 , 11 ] ;
9253: LD_ADDR_OWVAR 29
9257: PUSH
9258: LD_INT 12
9260: PUSH
9261: LD_INT 11
9263: PUSH
9264: EMPTY
9265: LIST
9266: LIST
9267: ST_TO_ADDR
// Karla = CreateHuman ;
9268: LD_ADDR_EXP 65
9272: PUSH
9273: CALL_OW 44
9277: ST_TO_ADDR
// ArTeam = ArTeam ^ Karla ;
9278: LD_ADDR_EXP 69
9282: PUSH
9283: LD_EXP 69
9287: PUSH
9288: LD_EXP 65
9292: ADD
9293: ST_TO_ADDR
// PlaceUnitArea ( Karla , ArStart , false ) ;
9294: LD_EXP 65
9298: PPUSH
9299: LD_INT 4
9301: PPUSH
9302: LD_INT 0
9304: PPUSH
9305: CALL_OW 49
// ComMoveXY ( Karla , 202 , 186 ) ;
9309: LD_EXP 65
9313: PPUSH
9314: LD_INT 202
9316: PPUSH
9317: LD_INT 186
9319: PPUSH
9320: CALL_OW 111
// AddComHold ( Karla ) ;
9324: LD_EXP 65
9328: PPUSH
9329: CALL_OW 200
// uc_side = 8 ;
9333: LD_ADDR_OWVAR 20
9337: PUSH
9338: LD_INT 8
9340: ST_TO_ADDR
// hc_name =   ;
9341: LD_ADDR_OWVAR 26
9345: PUSH
9346: LD_STRING  
9348: ST_TO_ADDR
// hc_gallery =  ;
9349: LD_ADDR_OWVAR 33
9353: PUSH
9354: LD_STRING 
9356: ST_TO_ADDR
// hc_sex = sex_male ;
9357: LD_ADDR_OWVAR 27
9361: PUSH
9362: LD_INT 1
9364: ST_TO_ADDR
// kl := CreateHuman ;
9365: LD_ADDR_EXP 22
9369: PUSH
9370: CALL_OW 44
9374: ST_TO_ADDR
// end ;
9375: LD_VAR 0 1
9379: RET
// function FAbdul ; begin
9380: LD_INT 0
9382: PPUSH
// uc_side = 5 ;
9383: LD_ADDR_OWVAR 20
9387: PUSH
9388: LD_INT 5
9390: ST_TO_ADDR
// uc_nation = 2 ;
9391: LD_ADDR_OWVAR 21
9395: PUSH
9396: LD_INT 2
9398: ST_TO_ADDR
// hc_class = 11 ;
9399: LD_ADDR_OWVAR 28
9403: PUSH
9404: LD_INT 11
9406: ST_TO_ADDR
// hc_name = Ali Liser ;
9407: LD_ADDR_OWVAR 26
9411: PUSH
9412: LD_STRING Ali Liser
9414: ST_TO_ADDR
// hc_gallery = E3galery ;
9415: LD_ADDR_OWVAR 33
9419: PUSH
9420: LD_STRING E3galery
9422: ST_TO_ADDR
// hc_face_number = 4 ;
9423: LD_ADDR_OWVAR 34
9427: PUSH
9428: LD_INT 4
9430: ST_TO_ADDR
// hc_skills = [ 6 , 2 , 3 , 4 ] ;
9431: LD_ADDR_OWVAR 31
9435: PUSH
9436: LD_INT 6
9438: PUSH
9439: LD_INT 2
9441: PUSH
9442: LD_INT 3
9444: PUSH
9445: LD_INT 4
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: ST_TO_ADDR
// hc_sex = sex_male ;
9454: LD_ADDR_OWVAR 27
9458: PUSH
9459: LD_INT 1
9461: ST_TO_ADDR
// hc_attr = [ Rand ( 9 , 12 ) , Rand ( 10 , 12 ) ] ;
9462: LD_ADDR_OWVAR 29
9466: PUSH
9467: LD_INT 9
9469: PPUSH
9470: LD_INT 12
9472: PPUSH
9473: CALL_OW 12
9477: PUSH
9478: LD_INT 10
9480: PPUSH
9481: LD_INT 12
9483: PPUSH
9484: CALL_OW 12
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: ST_TO_ADDR
// Abdul = CreateHuman ;
9493: LD_ADDR_EXP 67
9497: PUSH
9498: CALL_OW 44
9502: ST_TO_ADDR
// PlaceUnitArea ( Abdul , ArStart , false ) ;
9503: LD_EXP 67
9507: PPUSH
9508: LD_INT 4
9510: PPUSH
9511: LD_INT 0
9513: PPUSH
9514: CALL_OW 49
// ComTurnXY ( Abdul , 175 , 175 ) ;
9518: LD_EXP 67
9522: PPUSH
9523: LD_INT 175
9525: PPUSH
9526: LD_INT 175
9528: PPUSH
9529: CALL_OW 118
// end ;
9533: LD_VAR 0 1
9537: RET
// export function MarkSpawn ; var mk_x , mk_y ; begin
9538: LD_INT 0
9540: PPUSH
9541: PPUSH
9542: PPUSH
// uc_side = 8 ;
9543: LD_ADDR_OWVAR 20
9547: PUSH
9548: LD_INT 8
9550: ST_TO_ADDR
// uc_nation = 2 ;
9551: LD_ADDR_OWVAR 21
9555: PUSH
9556: LD_INT 2
9558: ST_TO_ADDR
// hc_class = 3 ;
9559: LD_ADDR_OWVAR 28
9563: PUSH
9564: LD_INT 3
9566: ST_TO_ADDR
// hc_name = Mark Dippel ;
9567: LD_ADDR_OWVAR 26
9571: PUSH
9572: LD_STRING Mark Dippel
9574: ST_TO_ADDR
// hc_gallery = sandar ;
9575: LD_ADDR_OWVAR 33
9579: PUSH
9580: LD_STRING sandar
9582: ST_TO_ADDR
// hc_face_number = 20 ;
9583: LD_ADDR_OWVAR 34
9587: PUSH
9588: LD_INT 20
9590: ST_TO_ADDR
// hc_skills = [ 1 , 0 , 3 , 2 ] ;
9591: LD_ADDR_OWVAR 31
9595: PUSH
9596: LD_INT 1
9598: PUSH
9599: LD_INT 0
9601: PUSH
9602: LD_INT 3
9604: PUSH
9605: LD_INT 2
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: ST_TO_ADDR
// hc_sex = sex_male ;
9614: LD_ADDR_OWVAR 27
9618: PUSH
9619: LD_INT 1
9621: ST_TO_ADDR
// hc_attr = [ 11 , 12 ] ;
9622: LD_ADDR_OWVAR 29
9626: PUSH
9627: LD_INT 11
9629: PUSH
9630: LD_INT 12
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: ST_TO_ADDR
// mk_x = [ 144 , 61 , 103 ] [ Difficulty ] ;
9637: LD_ADDR_VAR 0 2
9641: PUSH
9642: LD_INT 144
9644: PUSH
9645: LD_INT 61
9647: PUSH
9648: LD_INT 103
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: LIST
9655: PUSH
9656: LD_OWVAR 67
9660: ARRAY
9661: ST_TO_ADDR
// mk_y = [ 176 , 119 , 86 ] [ Difficulty ] ;
9662: LD_ADDR_VAR 0 3
9666: PUSH
9667: LD_INT 176
9669: PUSH
9670: LD_INT 119
9672: PUSH
9673: LD_INT 86
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: LIST
9680: PUSH
9681: LD_OWVAR 67
9685: ARRAY
9686: ST_TO_ADDR
// mmark = CreateHuman ;
9687: LD_ADDR_EXP 68
9691: PUSH
9692: CALL_OW 44
9696: ST_TO_ADDR
// PlaceUnitXY ( mmark , mk_x , mk_y , true ) ;
9697: LD_EXP 68
9701: PPUSH
9702: LD_VAR 0 2
9706: PPUSH
9707: LD_VAR 0 3
9711: PPUSH
9712: LD_INT 1
9714: PPUSH
9715: CALL_OW 48
// Wait ( 0 0$0.3 ) ;
9719: LD_INT 10
9721: PPUSH
9722: CALL_OW 67
// ComHold ( mmark ) ;
9726: LD_EXP 68
9730: PPUSH
9731: CALL_OW 140
// end ; end_of_file
9735: LD_VAR 0 1
9739: RET
// export function Action ; begin
9740: LD_INT 0
9742: PPUSH
// InGameOn ;
9743: CALL_OW 8
// Say ( Louis , DLc-1 ) ;
9747: LD_EXP 19
9751: PPUSH
9752: LD_STRING DLc-1
9754: PPUSH
9755: CALL_OW 88
// Say ( Louis , DLc-2 ) ;
9759: LD_EXP 19
9763: PPUSH
9764: LD_STRING DLc-2
9766: PPUSH
9767: CALL_OW 88
// Wait ( 0 0$0.7 ) ;
9771: LD_INT 24
9773: PPUSH
9774: CALL_OW 67
// Say ( Louis , Dlc-3 ) ;
9778: LD_EXP 19
9782: PPUSH
9783: LD_STRING Dlc-3
9785: PPUSH
9786: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
9790: LD_INT 10
9792: PPUSH
9793: CALL_OW 67
// Say ( Louis , Dlc-4 ) ;
9797: LD_EXP 19
9801: PPUSH
9802: LD_STRING Dlc-4
9804: PPUSH
9805: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
9809: LD_INT 10
9811: PPUSH
9812: CALL_OW 67
// ComHold ( Louis ) ;
9816: LD_EXP 19
9820: PPUSH
9821: CALL_OW 140
// Say ( Louis , Dlc-5 ) ;
9825: LD_EXP 19
9829: PPUSH
9830: LD_STRING Dlc-5
9832: PPUSH
9833: CALL_OW 88
// Wait ( 0 0$01 ) ;
9837: LD_INT 35
9839: PPUSH
9840: CALL_OW 67
// SayRadio ( Abdul , Dlo-1 ) ;
9844: LD_EXP 67
9848: PPUSH
9849: LD_STRING Dlo-1
9851: PPUSH
9852: CALL_OW 94
// Say ( Louis , Dlc-6 ) ;
9856: LD_EXP 19
9860: PPUSH
9861: LD_STRING Dlc-6
9863: PPUSH
9864: CALL_OW 88
// Wait ( 0 0$01 ) ;
9868: LD_INT 35
9870: PPUSH
9871: CALL_OW 67
// SayRadio ( Abdul , Dlo-2 ) ;
9875: LD_EXP 67
9879: PPUSH
9880: LD_STRING Dlo-2
9882: PPUSH
9883: CALL_OW 94
// Say ( Louis , Dlc-7 ) ;
9887: LD_EXP 19
9891: PPUSH
9892: LD_STRING Dlc-7
9894: PPUSH
9895: CALL_OW 88
// InGameOff ;
9899: CALL_OW 9
// SaveForQuickRestart ;
9903: CALL_OW 22
// ChangeMissionObjectives ( FindArabian ) ;
9907: LD_STRING FindArabian
9909: PPUSH
9910: CALL_OW 337
// Wait ( 0 0$05 ) ;
9914: LD_INT 175
9916: PPUSH
9917: CALL_OW 67
// Louis_Prepare = true ;
9921: LD_ADDR_EXP 1
9925: PUSH
9926: LD_INT 1
9928: ST_TO_ADDR
// Wait ( 0 0$02.3 ) ;
9929: LD_INT 80
9931: PPUSH
9932: CALL_OW 67
// ComAttackLouis ;
9936: CALL 7965 0 0
// end ;
9940: LD_VAR 0 1
9944: RET
// every 0 0$0.2 trigger IsInArea ( Louis , RadioA ) do
9945: LD_EXP 19
9949: PPUSH
9950: LD_INT 11
9952: PPUSH
9953: CALL_OW 308
9957: IFFALSE 10357
9959: GO 9961
9961: DISABLE
// begin InGameOn ;
9962: CALL_OW 8
// ComMoveToArea ( Louis , RadioA ) ;
9966: LD_EXP 19
9970: PPUSH
9971: LD_INT 11
9973: PPUSH
9974: CALL_OW 113
// AddComHold ( Louis ) ;
9978: LD_EXP 19
9982: PPUSH
9983: CALL_OW 200
// AddComWait ( Louis , 0 0$0.1 ) ;
9987: LD_EXP 19
9991: PPUSH
9992: LD_INT 4
9994: PPUSH
9995: CALL_OW 202
// Say ( Louis , Rad1 ) ;
9999: LD_EXP 19
10003: PPUSH
10004: LD_STRING Rad1
10006: PPUSH
10007: CALL_OW 88
// Say ( Louis , Rad2 ) ;
10011: LD_EXP 19
10015: PPUSH
10016: LD_STRING Rad2
10018: PPUSH
10019: CALL_OW 88
// SayRadio ( Abdul , Rad3 ) ;
10023: LD_EXP 67
10027: PPUSH
10028: LD_STRING Rad3
10030: PPUSH
10031: CALL_OW 94
// Say ( Louis , Rad4 ) ;
10035: LD_EXP 19
10039: PPUSH
10040: LD_STRING Rad4
10042: PPUSH
10043: CALL_OW 88
// SayRadio ( Abdul , Rad5 ) ;
10047: LD_EXP 67
10051: PPUSH
10052: LD_STRING Rad5
10054: PPUSH
10055: CALL_OW 94
// Say ( Louis , Rad6 ) ;
10059: LD_EXP 19
10063: PPUSH
10064: LD_STRING Rad6
10066: PPUSH
10067: CALL_OW 88
// InGameOff ;
10071: CALL_OW 9
// ComStop ( Louis ) ;
10075: LD_EXP 19
10079: PPUSH
10080: CALL_OW 141
// Wait ( 0.01 ) ;
10084: LD_REAL  1.00000000000000E-0002
10087: PPUSH
10088: CALL_OW 67
// ChangeMissionObjectives ( GoToEast ) ;
10092: LD_STRING GoToEast
10094: PPUSH
10095: CALL_OW 337
// Wait ( 0 0$03.2 ) ;
10099: LD_INT 112
10101: PPUSH
10102: CALL_OW 67
// if GetSide ( kl ) <> 8 then
10106: LD_EXP 22
10110: PPUSH
10111: CALL_OW 255
10115: PUSH
10116: LD_INT 8
10118: NONEQUAL
10119: IFFALSE 10133
// begin SetSide ( kl , 8 ) ;
10121: LD_EXP 22
10125: PPUSH
10126: LD_INT 8
10128: PPUSH
10129: CALL_OW 235
// end ; DialogueOn ;
10133: CALL_OW 6
// SayRadio ( kl , RadAm ) ;
10137: LD_EXP 22
10141: PPUSH
10142: LD_STRING RadAm
10144: PPUSH
10145: CALL_OW 94
// DWait ( 0 0$0.3 ) ;
10149: LD_INT 10
10151: PPUSH
10152: CALL_OW 68
// DialogueOff ;
10156: CALL_OW 7
// Wait ( 0 0$0.2 ) ;
10160: LD_INT 7
10162: PPUSH
10163: CALL_OW 67
// ChangeMissionObjectives ( GoToNorth ) ;
10167: LD_STRING GoToNorth
10169: PPUSH
10170: CALL_OW 337
// ComMoveXY ( [ block1 , block2 ] , 91 , 117 ) ;
10174: LD_EXP 58
10178: PUSH
10179: LD_EXP 59
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PPUSH
10188: LD_INT 91
10190: PPUSH
10191: LD_INT 117
10193: PPUSH
10194: CALL_OW 111
// Wait ( 0 0$20 ) ;
10198: LD_INT 700
10200: PPUSH
10201: CALL_OW 67
// MarkSpawn ;
10205: CALL 9538 0 0
// Wait ( 0 0$0.8 ) ;
10209: LD_INT 28
10211: PPUSH
10212: CALL_OW 67
// DialogueOn ;
10216: CALL_OW 6
// SayRadio ( mmark , helpm1 ) ;
10220: LD_EXP 68
10224: PPUSH
10225: LD_STRING helpm1
10227: PPUSH
10228: CALL_OW 94
// SayRadio ( mmark , helpm2 ) ;
10232: LD_EXP 68
10236: PPUSH
10237: LD_STRING helpm2
10239: PPUSH
10240: CALL_OW 94
// case Query ( MarkHelp ) of 1 :
10244: LD_STRING MarkHelp
10246: PPUSH
10247: CALL_OW 97
10251: PUSH
10252: LD_INT 1
10254: DOUBLE
10255: EQUAL
10256: IFTRUE 10260
10258: GO 10310
10260: POP
// begin Say ( Louis , helpl1 ) ;
10261: LD_EXP 19
10265: PPUSH
10266: LD_STRING helpl1
10268: PPUSH
10269: CALL_OW 88
// SayRadio ( mmark , helpm3 ) ;
10273: LD_EXP 68
10277: PPUSH
10278: LD_STRING helpm3
10280: PPUSH
10281: CALL_OW 94
// Say ( Louis , helpl2 ) ;
10285: LD_EXP 19
10289: PPUSH
10290: LD_STRING helpl2
10292: PPUSH
10293: CALL_OW 88
// DialogueOff ;
10297: CALL_OW 7
// ChangeMissionObjectives ( HelpM ) ;
10301: LD_STRING HelpM
10303: PPUSH
10304: CALL_OW 337
// end ; 2 :
10308: GO 10357
10310: LD_INT 2
10312: DOUBLE
10313: EQUAL
10314: IFTRUE 10318
10316: GO 10356
10318: POP
// begin DialogueOff ;
10319: CALL_OW 7
// Wait ( 0 0$02 ) ;
10323: LD_INT 70
10325: PPUSH
10326: CALL_OW 67
// SayRadio ( mmark , markend ) ;
10330: LD_EXP 68
10334: PPUSH
10335: LD_STRING markend
10337: PPUSH
10338: CALL_OW 94
// SetLives ( mmark , 1 ) ;
10342: LD_EXP 68
10346: PPUSH
10347: LD_INT 1
10349: PPUSH
10350: CALL_OW 234
// end ; end ;
10354: GO 10357
10356: POP
// end ;
10357: END
// every 0 0$01 trigger GetDistUnits ( Louis , mmark ) < 7 do
10358: LD_EXP 19
10362: PPUSH
10363: LD_EXP 68
10367: PPUSH
10368: CALL_OW 296
10372: PUSH
10373: LD_INT 7
10375: LESS
10376: IFFALSE 10431
10378: GO 10380
10380: DISABLE
// begin SetSide ( mmark , 2 ) ;
10381: LD_EXP 68
10385: PPUSH
10386: LD_INT 2
10388: PPUSH
10389: CALL_OW 235
// Wait ( 0 0$0.5 ) ;
10393: LD_INT 18
10395: PPUSH
10396: CALL_OW 67
// Say ( mmark , Thx1 ) ;
10400: LD_EXP 68
10404: PPUSH
10405: LD_STRING Thx1
10407: PPUSH
10408: CALL_OW 88
// Say ( Louis , Thx2 ) ;
10412: LD_EXP 19
10416: PPUSH
10417: LD_STRING Thx2
10419: PPUSH
10420: CALL_OW 88
// ChangeMissionObjectives ( nonhelp ) ;
10424: LD_STRING nonhelp
10426: PPUSH
10427: CALL_OW 337
// end ;
10431: END
// every 0 0$01 trigger IsInArea ( Louis , SwampArea ) do
10432: LD_EXP 19
10436: PPUSH
10437: LD_INT 10
10439: PPUSH
10440: CALL_OW 308
10444: IFFALSE 10461
10446: GO 10448
10448: DISABLE
// begin Say ( Louis , Dlc-Swamp ) ;
10449: LD_EXP 19
10453: PPUSH
10454: LD_STRING Dlc-Swamp
10456: PPUSH
10457: CALL_OW 88
// end ;
10461: END
// every 0 0$01 trigger See ( 1 , Louis ) do
10462: LD_INT 1
10464: PPUSH
10465: LD_EXP 19
10469: PPUSH
10470: CALL_OW 292
10474: IFFALSE 10563
10476: GO 10478
10478: DISABLE
// begin InGameOn ;
10479: CALL_OW 8
// ComHold ( Louis ) ;
10483: LD_EXP 19
10487: PPUSH
10488: CALL_OW 140
// PlaceSeeing ( 79 , 124 , 2 , 20 ) ;
10492: LD_INT 79
10494: PPUSH
10495: LD_INT 124
10497: PPUSH
10498: LD_INT 2
10500: PPUSH
10501: LD_INT 20
10503: PPUSH
10504: CALL_OW 330
// CenterOnXY ( 79 , 124 ) ;
10508: LD_INT 79
10510: PPUSH
10511: LD_INT 124
10513: PPUSH
10514: CALL_OW 84
// Wait ( 0 0$01 ) ;
10518: LD_INT 35
10520: PPUSH
10521: CALL_OW 67
// Say ( Louis , DLam1 ) ;
10525: LD_EXP 19
10529: PPUSH
10530: LD_STRING DLam1
10532: PPUSH
10533: CALL_OW 88
// CenterNowOnUnits ( Louis ) ;
10537: LD_EXP 19
10541: PPUSH
10542: CALL_OW 87
// RemoveSeeing ( 79 , 124 , 2 ) ;
10546: LD_INT 79
10548: PPUSH
10549: LD_INT 124
10551: PPUSH
10552: LD_INT 2
10554: PPUSH
10555: CALL_OW 331
// InGameOff ;
10559: CALL_OW 9
// end ;
10563: END
// on Contact ( side1 , side2 ) do begin if side1 = GetSide ( Louis ) then
10564: LD_VAR 0 1
10568: PUSH
10569: LD_EXP 19
10573: PPUSH
10574: CALL_OW 255
10578: EQUAL
10579: IFFALSE 10623
// if side2 = ru2 and First_Warn = true then
10581: LD_VAR 0 2
10585: PUSH
10586: LD_EXP 36
10590: EQUAL
10591: PUSH
10592: LD_EXP 6
10596: PUSH
10597: LD_INT 1
10599: EQUAL
10600: AND
10601: IFFALSE 10623
// begin Say ( Louis , Ru-Warn ) ;
10603: LD_EXP 19
10607: PPUSH
10608: LD_STRING Ru-Warn
10610: PPUSH
10611: CALL_OW 88
// First_Warn = false ;
10615: LD_ADDR_EXP 6
10619: PUSH
10620: LD_INT 0
10622: ST_TO_ADDR
// end ; end ;
10623: PPOPN 2
10625: END
// every 0 0$01 trigger IsInArea ( Louis , ArSpot ) do
10626: LD_EXP 19
10630: PPUSH
10631: LD_INT 9
10633: PPUSH
10634: CALL_OW 308
10638: IFFALSE 10969
10640: GO 10642
10642: DISABLE
// begin InGameOn ;
10643: CALL_OW 8
// SetSide ( ArTeam , 2 ) ;
10647: LD_EXP 69
10651: PPUSH
10652: LD_INT 2
10654: PPUSH
10655: CALL_OW 235
// SetSide ( Abdul , 2 ) ;
10659: LD_EXP 67
10663: PPUSH
10664: LD_INT 2
10666: PPUSH
10667: CALL_OW 235
// ComMoveXY ( Louis , GetX ( Louis ) + 2 , GetY ( Abdul ) - 2 ) ;
10671: LD_EXP 19
10675: PPUSH
10676: LD_EXP 19
10680: PPUSH
10681: CALL_OW 250
10685: PUSH
10686: LD_INT 2
10688: PLUS
10689: PPUSH
10690: LD_EXP 67
10694: PPUSH
10695: CALL_OW 251
10699: PUSH
10700: LD_INT 2
10702: MINUS
10703: PPUSH
10704: CALL_OW 111
// ComTurnUnit ( ArTeam , Louis ) ;
10708: LD_EXP 69
10712: PPUSH
10713: LD_EXP 19
10717: PPUSH
10718: CALL_OW 119
// ComTurnUnit ( Abdul , Louis ) ;
10722: LD_EXP 67
10726: PPUSH
10727: LD_EXP 19
10731: PPUSH
10732: CALL_OW 119
// AddComTurnUnit ( Louis , Abdul ) ;
10736: LD_EXP 19
10740: PPUSH
10741: LD_EXP 67
10745: PPUSH
10746: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
10750: LD_INT 10
10752: PPUSH
10753: CALL_OW 67
// Say ( Louis , Dm1 ) ;
10757: LD_EXP 19
10761: PPUSH
10762: LD_STRING Dm1
10764: PPUSH
10765: CALL_OW 88
// Say ( Abdul , Dm2 ) ;
10769: LD_EXP 67
10773: PPUSH
10774: LD_STRING Dm2
10776: PPUSH
10777: CALL_OW 88
// Say ( Louis , Dm3 ) ;
10781: LD_EXP 19
10785: PPUSH
10786: LD_STRING Dm3
10788: PPUSH
10789: CALL_OW 88
// Say ( Abdul , Dm4 ) ;
10793: LD_EXP 67
10797: PPUSH
10798: LD_STRING Dm4
10800: PPUSH
10801: CALL_OW 88
// Say ( Abdul , Dm5 ) ;
10805: LD_EXP 67
10809: PPUSH
10810: LD_STRING Dm5
10812: PPUSH
10813: CALL_OW 88
// Say ( Louis , Dm6 ) ;
10817: LD_EXP 19
10821: PPUSH
10822: LD_STRING Dm6
10824: PPUSH
10825: CALL_OW 88
// Say ( Abdul , Dm7 ) ;
10829: LD_EXP 67
10833: PPUSH
10834: LD_STRING Dm7
10836: PPUSH
10837: CALL_OW 88
// Say ( Louis , Dm8 ) ;
10841: LD_EXP 19
10845: PPUSH
10846: LD_STRING Dm8
10848: PPUSH
10849: CALL_OW 88
// ComMoveXY ( Karla , GetX ( louis ) + 2 , GetY ( louis ) + 3 ) ;
10853: LD_EXP 65
10857: PPUSH
10858: LD_EXP 19
10862: PPUSH
10863: CALL_OW 250
10867: PUSH
10868: LD_INT 2
10870: PLUS
10871: PPUSH
10872: LD_EXP 19
10876: PPUSH
10877: CALL_OW 251
10881: PUSH
10882: LD_INT 3
10884: PLUS
10885: PPUSH
10886: CALL_OW 111
// InGameOff ;
10890: CALL_OW 9
// ChangeMissionObjectives ( DestroyRussianBases ) ;
10894: LD_STRING DestroyRussianBases
10896: PPUSH
10897: CALL_OW 337
// SaveForQuickRestart ;
10901: CALL_OW 22
// list = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) diff [ Louis ] ;
10905: LD_ADDR_EXP 61
10909: PUSH
10910: LD_INT 22
10912: PUSH
10913: LD_INT 2
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: PUSH
10920: LD_INT 25
10922: PUSH
10923: LD_INT 1
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: PPUSH
10934: CALL_OW 69
10938: PUSH
10939: LD_EXP 19
10943: PUSH
10944: EMPTY
10945: LIST
10946: DIFF
10947: ST_TO_ADDR
// SetTech ( tech_explos , 2 , state_researched ) ;
10948: LD_INT 42
10950: PPUSH
10951: LD_INT 2
10953: PPUSH
10954: LD_INT 2
10956: PPUSH
10957: CALL_OW 322
// TimeUp = true ;
10961: LD_ADDR_EXP 7
10965: PUSH
10966: LD_INT 1
10968: ST_TO_ADDR
// end ;
10969: END
// every 0 0$01 trigger TimeUp = true do
10970: LD_EXP 7
10974: PUSH
10975: LD_INT 1
10977: EQUAL
10978: IFFALSE 11032
10980: GO 10982
10982: DISABLE
// begin enable ;
10983: ENABLE
// display_strings := [ #Ar01-1 , counter , #Ar01-2 , russian_kills ] ;
10984: LD_ADDR_OWVAR 47
10988: PUSH
10989: LD_STRING #Ar01-1
10991: PUSH
10992: LD_EXP 10
10996: PUSH
10997: LD_STRING #Ar01-2
10999: PUSH
11000: LD_EXP 11
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: ST_TO_ADDR
// wait ( 0 0$01 ) ;
11011: LD_INT 35
11013: PPUSH
11014: CALL_OW 67
// counter := counter + 0 0$01 ;
11018: LD_ADDR_EXP 10
11022: PUSH
11023: LD_EXP 10
11027: PUSH
11028: LD_INT 35
11030: PLUS
11031: ST_TO_ADDR
// end ;
11032: END
// on UnitDestroyed ( un ) do var i , driver , uni , rulist ;
11033: LD_INT 0
11035: PPUSH
11036: PPUSH
11037: PPUSH
11038: PPUSH
// begin if un = Louis then
11039: LD_VAR 0 1
11043: PUSH
11044: LD_EXP 19
11048: EQUAL
11049: IFFALSE 11058
// begin YouLost ( Dead ) ;
11051: LD_STRING Dead
11053: PPUSH
11054: CALL_OW 104
// end ; if un = Abdul then
11058: LD_VAR 0 1
11062: PUSH
11063: LD_EXP 67
11067: EQUAL
11068: IFFALSE 11077
// begin YouLost ( SDead ) ;
11070: LD_STRING SDead
11072: PPUSH
11073: CALL_OW 104
// end ; if GetSide ( un ) = ru2 then
11077: LD_VAR 0 1
11081: PPUSH
11082: CALL_OW 255
11086: PUSH
11087: LD_EXP 36
11091: EQUAL
11092: IFFALSE 11168
// begin russian_kills = russian_kills + 1 ;
11094: LD_ADDR_EXP 11
11098: PUSH
11099: LD_EXP 11
11103: PUSH
11104: LD_INT 1
11106: PLUS
11107: ST_TO_ADDR
// mines = mines - 1 ;
11108: LD_ADDR_EXP 15
11112: PUSH
11113: LD_EXP 15
11117: PUSH
11118: LD_INT 1
11120: MINUS
11121: ST_TO_ADDR
// rulist := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
11122: LD_ADDR_VAR 0 5
11126: PUSH
11127: LD_INT 22
11129: PUSH
11130: LD_INT 6
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 21
11139: PUSH
11140: LD_INT 1
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PPUSH
11151: CALL_OW 69
11155: ST_TO_ADDR
// if un in rulist then
11156: LD_VAR 0 1
11160: PUSH
11161: LD_VAR 0 5
11165: IN
11166: IFFALSE 11168
// end ; if un = am_veh and GetSide ( un ) = am then
11168: LD_VAR 0 1
11172: PUSH
11173: LD_EXP 32
11177: EQUAL
11178: PUSH
11179: LD_VAR 0 1
11183: PPUSH
11184: CALL_OW 255
11188: PUSH
11189: LD_EXP 20
11193: EQUAL
11194: AND
11195: IFFALSE 11272
// begin uni = UnitFilter ( am_mech , [ f_class , 3 ] ) ;
11197: LD_ADDR_VAR 0 4
11201: PUSH
11202: LD_EXP 30
11206: PPUSH
11207: LD_INT 25
11209: PUSH
11210: LD_INT 3
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PPUSH
11217: CALL_OW 72
11221: ST_TO_ADDR
// driver = IsDrivenBy ( uni ) ;
11222: LD_ADDR_VAR 0 3
11226: PUSH
11227: LD_VAR 0 4
11231: PPUSH
11232: CALL_OW 311
11236: ST_TO_ADDR
// ComEnterUnit ( driver , am_factory ) ;
11237: LD_VAR 0 3
11241: PPUSH
11242: LD_EXP 33
11246: PPUSH
11247: CALL_OW 120
// AddComConstruct ( am_factory , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ) ;
11251: LD_EXP 33
11255: PPUSH
11256: LD_INT 2
11258: PPUSH
11259: LD_INT 1
11261: PPUSH
11262: LD_INT 1
11264: PPUSH
11265: LD_INT 4
11267: PPUSH
11268: CALL_OW 185
// end ; if un = am_mech then
11272: LD_VAR 0 1
11276: PUSH
11277: LD_EXP 30
11281: EQUAL
11282: IFFALSE 11337
// begin ComExitBuilding ( am_sci ) ;
11284: LD_EXP 31
11288: PPUSH
11289: CALL_OW 122
// AddComEnterUnit ( am_sci , am_factory ) ;
11293: LD_EXP 31
11297: PPUSH
11298: LD_EXP 33
11302: PPUSH
11303: CALL_OW 180
// AddComChangeProfession ( am_sci , 3 ) ;
11307: LD_EXP 31
11311: PPUSH
11312: LD_INT 3
11314: PPUSH
11315: CALL_OW 183
// am_sci := [ ] ;
11319: LD_ADDR_EXP 31
11323: PUSH
11324: EMPTY
11325: ST_TO_ADDR
// if am_sci = [ ] then
11326: LD_EXP 31
11330: PUSH
11331: EMPTY
11332: EQUAL
11333: IFFALSE 11337
// exit ;
11335: GO 11337
// end ; end ;
11337: PPOPN 5
11339: END
// on VehicleCaptured ( new_ident , old_ident , old_side , un ) do begin veh_list = veh_list + 1 ;
11340: LD_ADDR_EXP 12
11344: PUSH
11345: LD_EXP 12
11349: PUSH
11350: LD_INT 1
11352: PLUS
11353: ST_TO_ADDR
// if vehisnotcapt = true then
11354: LD_EXP 9
11358: PUSH
11359: LD_INT 1
11361: EQUAL
11362: IFFALSE 11465
// begin DialogueOn ;
11364: CALL_OW 6
// if GetClass ( un ) = 3 then
11368: LD_VAR 0 4
11372: PPUSH
11373: CALL_OW 257
11377: PUSH
11378: LD_INT 3
11380: EQUAL
11381: IFFALSE 11395
// begin Say ( un , Capt-VehMech ) ;
11383: LD_VAR 0 4
11387: PPUSH
11388: LD_STRING Capt-VehMech
11390: PPUSH
11391: CALL_OW 88
// end ; if GetClass ( un ) <> 3 then
11395: LD_VAR 0 4
11399: PPUSH
11400: CALL_OW 257
11404: PUSH
11405: LD_INT 3
11407: NONEQUAL
11408: IFFALSE 11453
// begin Say ( un , Capt-Veh ) ;
11410: LD_VAR 0 4
11414: PPUSH
11415: LD_STRING Capt-Veh
11417: PPUSH
11418: CALL_OW 88
// Say ( Abdul , Capt-Veh2 ) ;
11422: LD_EXP 67
11426: PPUSH
11427: LD_STRING Capt-Veh2
11429: PPUSH
11430: CALL_OW 88
// DWait ( 0 0$0.2 ) ;
11434: LD_INT 7
11436: PPUSH
11437: CALL_OW 68
// Say ( un , Capt-Veh3 ) ;
11441: LD_VAR 0 4
11445: PPUSH
11446: LD_STRING Capt-Veh3
11448: PPUSH
11449: CALL_OW 88
// end ; DialogueOff ;
11453: CALL_OW 7
// vehisnotcapt = false ;
11457: LD_ADDR_EXP 9
11461: PUSH
11462: LD_INT 0
11464: ST_TO_ADDR
// end ; end ;
11465: PPOPN 4
11467: END
// every 0 0$01 trigger mines = 0 do
11468: LD_EXP 15
11472: PUSH
11473: LD_INT 0
11475: EQUAL
11476: IFFALSE 11552
11478: GO 11480
11480: DISABLE
// begin SetTech ( 42 , 2 , 0 ) ;
11481: LD_INT 42
11483: PPUSH
11484: LD_INT 2
11486: PPUSH
11487: LD_INT 0
11489: PPUSH
11490: CALL_OW 322
// DialogueOn ;
11494: CALL_OW 6
// DWait ( 0 0$0.2 ) ;
11498: LD_INT 7
11500: PPUSH
11501: CALL_OW 68
// Say ( Karla , MinEndKarla ) ;
11505: LD_EXP 65
11509: PPUSH
11510: LD_STRING MinEndKarla
11512: PPUSH
11513: CALL_OW 88
// Say ( Joachim , MisEndJoachim ) ;
11517: LD_EXP 66
11521: PPUSH
11522: LD_STRING MisEndJoachim
11524: PPUSH
11525: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
11529: LD_INT 10
11531: PPUSH
11532: CALL_OW 68
// Say ( Dwein , MisEndDwein ) ;
11536: LD_EXP 62
11540: PPUSH
11541: LD_STRING MisEndDwein
11543: PPUSH
11544: CALL_OW 88
// DialogueOff ;
11548: CALL_OW 7
// end ;
11552: END
// every 0 0$01 trigger russian_kills > statistic do
11553: LD_EXP 11
11557: PUSH
11558: LD_EXP 14
11562: GREATER
11563: IFFALSE 11641
11565: GO 11567
11567: DISABLE
// begin DialogueOn ;
11568: CALL_OW 6
// Say ( Abdul , EndMis1 ) ;
11572: LD_EXP 67
11576: PPUSH
11577: LD_STRING EndMis1
11579: PPUSH
11580: CALL_OW 88
// Say ( Louis , EndMis2 ) ;
11584: LD_EXP 19
11588: PPUSH
11589: LD_STRING EndMis2
11591: PPUSH
11592: CALL_OW 88
// Say ( Karla , EndMis3 ) ;
11596: LD_EXP 65
11600: PPUSH
11601: LD_STRING EndMis3
11603: PPUSH
11604: CALL_OW 88
// Say ( Louis , EndMis4 ) ;
11608: LD_EXP 19
11612: PPUSH
11613: LD_STRING EndMis4
11615: PPUSH
11616: CALL_OW 88
// DialogueOff ;
11620: CALL_OW 7
// ChangeMissionObjectives ( GoToHome ) ;
11624: LD_STRING GoToHome
11626: PPUSH
11627: CALL_OW 337
// SetAreaMapShow ( Finish , 1 ) ;
11631: LD_INT 5
11633: PPUSH
11634: LD_INT 1
11636: PPUSH
11637: CALL_OW 424
// end ; end_of_file
11641: END
// export apemans , tigers , birds ; export function PrepareNature ; var l , apeman , tiger , bird ; begin
11642: LD_INT 0
11644: PPUSH
11645: PPUSH
11646: PPUSH
11647: PPUSH
11648: PPUSH
// apemans := [ ] ;
11649: LD_ADDR_EXP 70
11653: PUSH
11654: EMPTY
11655: ST_TO_ADDR
// tigers := [ ] ;
11656: LD_ADDR_EXP 71
11660: PUSH
11661: EMPTY
11662: ST_TO_ADDR
// birds := [ ] ;
11663: LD_ADDR_EXP 72
11667: PUSH
11668: EMPTY
11669: ST_TO_ADDR
// uc_nation = nation_nature ;
11670: LD_ADDR_OWVAR 21
11674: PUSH
11675: LD_INT 0
11677: ST_TO_ADDR
// uc_side = 0 ;
11678: LD_ADDR_OWVAR 20
11682: PUSH
11683: LD_INT 0
11685: ST_TO_ADDR
// l = 0 ;
11686: LD_ADDR_VAR 0 2
11690: PUSH
11691: LD_INT 0
11693: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
11694: LD_ADDR_OWVAR 24
11698: PUSH
11699: LD_INT 0
11701: PPUSH
11702: LD_INT 5
11704: PPUSH
11705: CALL_OW 12
11709: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 25 ) ;
11710: LD_ADDR_OWVAR 35
11714: PUSH
11715: LD_INT 0
11717: PPUSH
11718: LD_INT 25
11720: PPUSH
11721: CALL_OW 12
11725: ST_TO_ADDR
// hc_gallery =  ;
11726: LD_ADDR_OWVAR 33
11730: PUSH
11731: LD_STRING 
11733: ST_TO_ADDR
// hc_class = class_apeman ;
11734: LD_ADDR_OWVAR 28
11738: PUSH
11739: LD_INT 12
11741: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
11742: LD_ADDR_OWVAR 29
11746: PUSH
11747: LD_INT 11
11749: PPUSH
11750: LD_INT 13
11752: PPUSH
11753: CALL_OW 12
11757: PUSH
11758: LD_INT 10
11760: PPUSH
11761: LD_INT 11
11763: PPUSH
11764: CALL_OW 12
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: ST_TO_ADDR
// hc_sex = sex_male ;
11773: LD_ADDR_OWVAR 27
11777: PUSH
11778: LD_INT 1
11780: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
11781: LD_ADDR_OWVAR 31
11785: PUSH
11786: LD_INT 0
11788: PPUSH
11789: LD_INT 2
11791: PPUSH
11792: CALL_OW 12
11796: PUSH
11797: LD_INT 0
11799: PUSH
11800: LD_INT 0
11802: PUSH
11803: LD_INT 0
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: ST_TO_ADDR
// apeman = CreateHuman ;
11812: LD_ADDR_VAR 0 3
11816: PUSH
11817: CALL_OW 44
11821: ST_TO_ADDR
// PlaceUnitArea ( apeman , MapA , false ) ;
11822: LD_VAR 0 3
11826: PPUSH
11827: LD_INT 3
11829: PPUSH
11830: LD_INT 0
11832: PPUSH
11833: CALL_OW 49
// apemans := apemans ^ apeman ;
11837: LD_ADDR_EXP 70
11841: PUSH
11842: LD_EXP 70
11846: PUSH
11847: LD_VAR 0 3
11851: ADD
11852: ST_TO_ADDR
// l = l + 1 ;
11853: LD_ADDR_VAR 0 2
11857: PUSH
11858: LD_VAR 0 2
11862: PUSH
11863: LD_INT 1
11865: PLUS
11866: ST_TO_ADDR
// end until l = 6 ;
11867: LD_VAR 0 2
11871: PUSH
11872: LD_INT 6
11874: EQUAL
11875: IFFALSE 11694
// l = 0 ;
11877: LD_ADDR_VAR 0 2
11881: PUSH
11882: LD_INT 0
11884: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 30 ) ;
11885: LD_ADDR_OWVAR 35
11889: PUSH
11890: LD_INT 0
11892: PPUSH
11893: LD_INT 30
11895: PPUSH
11896: CALL_OW 12
11900: ST_TO_ADDR
// hc_class = class_tiger ;
11901: LD_ADDR_OWVAR 28
11905: PUSH
11906: LD_INT 14
11908: ST_TO_ADDR
// hc_sex = sex_male ;
11909: LD_ADDR_OWVAR 27
11913: PUSH
11914: LD_INT 1
11916: ST_TO_ADDR
// hc_gallery = sandnature ;
11917: LD_ADDR_OWVAR 33
11921: PUSH
11922: LD_STRING sandnature
11924: ST_TO_ADDR
// hc_face_number = 3 ;
11925: LD_ADDR_OWVAR 34
11929: PUSH
11930: LD_INT 3
11932: ST_TO_ADDR
// tiger = CreateHuman ;
11933: LD_ADDR_VAR 0 4
11937: PUSH
11938: CALL_OW 44
11942: ST_TO_ADDR
// PlaceUnitArea ( tiger , MapA , false ) ;
11943: LD_VAR 0 4
11947: PPUSH
11948: LD_INT 3
11950: PPUSH
11951: LD_INT 0
11953: PPUSH
11954: CALL_OW 49
// tigers := tigers ^ tiger ;
11958: LD_ADDR_EXP 71
11962: PUSH
11963: LD_EXP 71
11967: PUSH
11968: LD_VAR 0 4
11972: ADD
11973: ST_TO_ADDR
// l = l + 1 ;
11974: LD_ADDR_VAR 0 2
11978: PUSH
11979: LD_VAR 0 2
11983: PUSH
11984: LD_INT 1
11986: PLUS
11987: ST_TO_ADDR
// end until l = [ 3 , 4 , 6 ] [ Difficulty ] ;
11988: LD_VAR 0 2
11992: PUSH
11993: LD_INT 3
11995: PUSH
11996: LD_INT 4
11998: PUSH
11999: LD_INT 6
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: LIST
12006: PUSH
12007: LD_OWVAR 67
12011: ARRAY
12012: EQUAL
12013: IFFALSE 11885
// l = 0 ;
12015: LD_ADDR_VAR 0 2
12019: PUSH
12020: LD_INT 0
12022: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
12023: LD_ADDR_OWVAR 28
12027: PUSH
12028: LD_INT 18
12030: ST_TO_ADDR
// hc_gallery = sandnature ;
12031: LD_ADDR_OWVAR 33
12035: PUSH
12036: LD_STRING sandnature
12038: ST_TO_ADDR
// hc_face_number = 1 ;
12039: LD_ADDR_OWVAR 34
12043: PUSH
12044: LD_INT 1
12046: ST_TO_ADDR
// bird = CreateHuman ;
12047: LD_ADDR_VAR 0 5
12051: PUSH
12052: CALL_OW 44
12056: ST_TO_ADDR
// PlaceUnitArea ( bird , MapA , false ) ;
12057: LD_VAR 0 5
12061: PPUSH
12062: LD_INT 3
12064: PPUSH
12065: LD_INT 0
12067: PPUSH
12068: CALL_OW 49
// birds := birds ^ bird ;
12072: LD_ADDR_EXP 72
12076: PUSH
12077: LD_EXP 72
12081: PUSH
12082: LD_VAR 0 5
12086: ADD
12087: ST_TO_ADDR
// l = l + 1 ;
12088: LD_ADDR_VAR 0 2
12092: PUSH
12093: LD_VAR 0 2
12097: PUSH
12098: LD_INT 1
12100: PLUS
12101: ST_TO_ADDR
// end until l = 4 ;
12102: LD_VAR 0 2
12106: PUSH
12107: LD_INT 4
12109: EQUAL
12110: IFFALSE 12023
// l = 0 ;
12112: LD_ADDR_VAR 0 2
12116: PUSH
12117: LD_INT 0
12119: ST_TO_ADDR
// repeat begin hc_class = class_fish ;
12120: LD_ADDR_OWVAR 28
12124: PUSH
12125: LD_INT 20
12127: ST_TO_ADDR
// hc_gallery = sandnature ;
12128: LD_ADDR_OWVAR 33
12132: PUSH
12133: LD_STRING sandnature
12135: ST_TO_ADDR
// hc_face_number = 2 ;
12136: LD_ADDR_OWVAR 34
12140: PUSH
12141: LD_INT 2
12143: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , Water , false ) ;
12144: CALL_OW 44
12148: PPUSH
12149: LD_INT 1
12151: PPUSH
12152: LD_INT 0
12154: PPUSH
12155: CALL_OW 49
// l = l + 1 ;
12159: LD_ADDR_VAR 0 2
12163: PUSH
12164: LD_VAR 0 2
12168: PUSH
12169: LD_INT 1
12171: PLUS
12172: ST_TO_ADDR
// end until l = 6 ;
12173: LD_VAR 0 2
12177: PUSH
12178: LD_INT 6
12180: EQUAL
12181: IFFALSE 12120
// end ;
12183: LD_VAR 0 1
12187: RET
// export function PrepareBases ; begin
12188: LD_INT 0
12190: PPUSH
// SetBName ( ru1_base , Malenkov ) ;
12191: LD_INT 36
12193: PPUSH
12194: LD_STRING Malenkov
12196: PPUSH
12197: CALL_OW 500
// SetBName ( ru1a_base , Malenkov ) ;
12201: LD_INT 32
12203: PPUSH
12204: LD_STRING Malenkov
12206: PPUSH
12207: CALL_OW 500
// SetBName ( ru2_base , Reserve ) ;
12211: LD_INT 96
12213: PPUSH
12214: LD_STRING Reserve
12216: PPUSH
12217: CALL_OW 500
// SetBName ( ru3_base , Molotov ) ;
12221: LD_INT 126
12223: PPUSH
12224: LD_STRING Molotov
12226: PPUSH
12227: CALL_OW 500
// SetBName ( am_dep , Eta ) ;
12231: LD_INT 1
12233: PPUSH
12234: LD_STRING Eta
12236: PPUSH
12237: CALL_OW 500
// end ; end_of_file
12241: LD_VAR 0 1
12245: RET
// every 0 0$02 trigger IsInArea ( Louis , Finish ) do var rew_pep , ar , un ;
12246: LD_EXP 19
12250: PPUSH
12251: LD_INT 5
12253: PPUSH
12254: CALL_OW 308
12258: IFFALSE 12603
12260: GO 12262
12262: DISABLE
12263: LD_INT 0
12265: PPUSH
12266: PPUSH
12267: PPUSH
// begin ar = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
12268: LD_ADDR_VAR 0 2
12272: PUSH
12273: LD_INT 22
12275: PUSH
12276: LD_INT 2
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: PUSH
12283: LD_INT 21
12285: PUSH
12286: LD_INT 1
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: PPUSH
12297: CALL_OW 69
12301: ST_TO_ADDR
// Wait ( 0 0$0.3 ) ;
12302: LD_INT 10
12304: PPUSH
12305: CALL_OW 67
// Say ( Abdul , DEnd ) ;
12309: LD_EXP 67
12313: PPUSH
12314: LD_STRING DEnd
12316: PPUSH
12317: CALL_OW 88
// music_nat = 4 ;
12321: LD_ADDR_OWVAR 71
12325: PUSH
12326: LD_INT 4
12328: ST_TO_ADDR
// SetMedals ;
12329: CALL 12606 0 0
// GiveMedals ( MAIN ) ;
12333: LD_STRING MAIN
12335: PPUSH
12336: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
12340: LD_INT 22
12342: PUSH
12343: LD_INT 2
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PPUSH
12350: CALL_OW 69
12354: PPUSH
12355: CALL_OW 43
// Rew_Pep := [ ] ;
12359: LD_ADDR_VAR 0 1
12363: PUSH
12364: EMPTY
12365: ST_TO_ADDR
// Rew_pep := Rew_pep ^ Louis ;
12366: LD_ADDR_VAR 0 1
12370: PUSH
12371: LD_VAR 0 1
12375: PUSH
12376: LD_EXP 19
12380: ADD
12381: ST_TO_ADDR
// Rew_pep := Rew_pep ^ Abdul ;
12382: LD_ADDR_VAR 0 1
12386: PUSH
12387: LD_VAR 0 1
12391: PUSH
12392: LD_EXP 67
12396: ADD
12397: ST_TO_ADDR
// if IsOk ( Karla ) then
12398: LD_EXP 65
12402: PPUSH
12403: CALL_OW 302
12407: IFFALSE 12427
// begin Rew_pep := Rew_pep ^ Karla ;
12409: LD_ADDR_VAR 0 1
12413: PUSH
12414: LD_VAR 0 1
12418: PUSH
12419: LD_EXP 65
12423: ADD
12424: ST_TO_ADDR
// end else
12425: GO 12429
// begin exit ;
12427: GO 12603
// end ; if IsOk ( Joachim ) then
12429: LD_EXP 66
12433: PPUSH
12434: CALL_OW 302
12438: IFFALSE 12458
// begin Rew_pep := Rew_pep ^ Joachim ;
12440: LD_ADDR_VAR 0 1
12444: PUSH
12445: LD_VAR 0 1
12449: PUSH
12450: LD_EXP 66
12454: ADD
12455: ST_TO_ADDR
// end else
12456: GO 12460
// begin exit ;
12458: GO 12603
// end ; if IsOk ( Dwein ) then
12460: LD_EXP 62
12464: PPUSH
12465: CALL_OW 302
12469: IFFALSE 12489
// begin Rew_pep := Rew_pep ^ Dwein ;
12471: LD_ADDR_VAR 0 1
12475: PUSH
12476: LD_VAR 0 1
12480: PUSH
12481: LD_EXP 62
12485: ADD
12486: ST_TO_ADDR
// end else
12487: GO 12491
// begin exit ;
12489: GO 12603
// end ; if IsOk ( Olaf ) then
12491: LD_EXP 63
12495: PPUSH
12496: CALL_OW 302
12500: IFFALSE 12520
// begin Rew_pep := Rew_pep ^ Olaf ;
12502: LD_ADDR_VAR 0 1
12506: PUSH
12507: LD_VAR 0 1
12511: PUSH
12512: LD_EXP 63
12516: ADD
12517: ST_TO_ADDR
// end else
12518: GO 12522
// begin exit ;
12520: GO 12603
// end ; if IsOk ( Gunther ) then
12522: LD_EXP 64
12526: PPUSH
12527: CALL_OW 302
12531: IFFALSE 12551
// begin Rew_pep := Rew_pep ^ Gunther ;
12533: LD_ADDR_VAR 0 1
12537: PUSH
12538: LD_VAR 0 1
12542: PUSH
12543: LD_EXP 64
12547: ADD
12548: ST_TO_ADDR
// end else
12549: GO 12553
// begin exit ;
12551: GO 12603
// end ; if IsOk ( mmark ) and GetSide ( mmark ) = 2 then
12553: LD_EXP 68
12557: PPUSH
12558: CALL_OW 302
12562: PUSH
12563: LD_EXP 68
12567: PPUSH
12568: CALL_OW 255
12572: PUSH
12573: LD_INT 2
12575: EQUAL
12576: AND
12577: IFFALSE 12597
// begin Rew_pep := Rew_pep ^ mmark ;
12579: LD_ADDR_VAR 0 1
12583: PUSH
12584: LD_VAR 0 1
12588: PUSH
12589: LD_EXP 68
12593: ADD
12594: ST_TO_ADDR
// end else
12595: GO 12599
// begin exit ;
12597: GO 12603
// end ; YouWin ;
12599: CALL_OW 103
// end ;
12603: PPOPN 3
12605: END
// function SetMedals ; begin
12606: LD_INT 0
12608: PPUSH
// if russian_kills > 30 then
12609: LD_EXP 11
12613: PUSH
12614: LD_INT 30
12616: GREATER
12617: IFFALSE 12631
// begin AddMedal ( ruwaskill , 1 ) ;
12619: LD_STRING ruwaskill
12621: PPUSH
12622: LD_INT 1
12624: PPUSH
12625: CALL_OW 101
// end else
12629: GO 12642
// begin AddMedal ( ruwaskill , - 1 ) ;
12631: LD_STRING ruwaskill
12633: PPUSH
12634: LD_INT 1
12636: NEG
12637: PPUSH
12638: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 4 then
12642: LD_INT 22
12644: PUSH
12645: LD_INT 2
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: PUSH
12652: LD_INT 21
12654: PUSH
12655: LD_INT 1
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PPUSH
12666: CALL_OW 69
12670: PUSH
12671: LD_INT 4
12673: GREATER
12674: IFFALSE 12688
// begin AddMedal ( pep_live , 1 ) ;
12676: LD_STRING pep_live
12678: PPUSH
12679: LD_INT 1
12681: PPUSH
12682: CALL_OW 101
// end else
12686: GO 12699
// begin AddMedal ( pep_live , - 1 ) ;
12688: LD_STRING pep_live
12690: PPUSH
12691: LD_INT 1
12693: NEG
12694: PPUSH
12695: CALL_OW 101
// end ; if GetSide ( mmark ) = 2 then
12699: LD_EXP 68
12703: PPUSH
12704: CALL_OW 255
12708: PUSH
12709: LD_INT 2
12711: EQUAL
12712: IFFALSE 12726
// begin AddMedal ( mark_live , 1 ) ;
12714: LD_STRING mark_live
12716: PPUSH
12717: LD_INT 1
12719: PPUSH
12720: CALL_OW 101
// end else
12724: GO 12737
// begin AddMedal ( mark_live , - 1 ) ;
12726: LD_STRING mark_live
12728: PPUSH
12729: LD_INT 1
12731: NEG
12732: PPUSH
12733: CALL_OW 101
// end ; if veh_list > 3 then
12737: LD_EXP 12
12741: PUSH
12742: LD_INT 3
12744: GREATER
12745: IFFALSE 12762
// begin GiveSkillBonus ( Louis , skill_mechanical , 1 ) ;
12747: LD_EXP 19
12751: PPUSH
12752: LD_INT 3
12754: PPUSH
12755: LD_INT 1
12757: PPUSH
12758: CALL_OW 238
// end ; end ;
12762: LD_VAR 0 1
12766: RET
