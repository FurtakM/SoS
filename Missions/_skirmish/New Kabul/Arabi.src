// Ovl·d·nÌ Arab˘.


Var Zniceno;             // Je Arabsk· z·kladna K.O.?
Var Autaky;              // Seznam Arabsk˝ch automobil˘.
Var Obranci;             // Voj·ci, kte¯Ì jen br·nÌ z·kladnu.
Var VolnyLidi;           // Seznam voln˝ch lidÌ.
Var Utok_Auta;           // Kdo ˙toËÌ v ˙toku.
Var Utok_ZbyvaMinut;     // Kolik minut zb˝v· do prvnÌho ˙toku.
Var CasyUtoku;           // PoËty minut mezi ˙toky.
Var VidelRusa;           // Uû vidÏl Arab nÏjakou ruskou jesnotku?
Var PstZbrane;           // PravdÏpodobnost zbranÌ do aut.
Var ProbihaUtok;         // ProbÌh· pr·vÏ ˙tok?
Var CisloUtoku;          // Kolik·t˝ ˙tok je v po¯adÌ.
Var Patrola;             // Jednotky, kterÈ prov·dÏjÌ patrolu.
Var PatrolaZrusena;      // Byla odvol·na patrola.
Var Registry;            // Registrace.
Var RegUtok;             // Registrace pro ˙tok.
Var MakroObrana;         // Makro na obranu.
Var MakroUtok;           // Makro pro ˙tok.
Var MakroBunkry;         // McCustom pro novÌ budovy.
Var MakroPresunZakladna; // P¯esun jednotek zpÏt do z·kladny.
Var BeziStahovani;       // BeûÌ trigger 46?
Var ArDalkar;            // Vozidlo na d·lkovÈ ovl·d·nÌ.
Var KolikDalkovych;      // Kolik m·m d·lkovÏ ovl·dan˝ch aut.
Var DelamDalkare;        // Je d·lkov˝ ovladaË zad·n k v˝robÏ?
Var Miny;                // Pozice min.
Var ProbihaOprava;       // ProbÌh· oprava aut.
Var ProbihaLeceni;       // ProbÌh· lÈËenÌ lidÌ.


Export Function init_arabi;
Var Kdo, Budovy;
Begin
  Disable (43); Disable (44); Disable (45); Disable (46); Disable (47);
  // Seznam jednotek.
  SetBName (ArDepot, 'newkabul');
  Autaky = [ArTank1, ArTank2];
  Patrola = [ArTank1];
  Obranci = vytvor_obrance; place_list (Obranci, AraboveParkoviste);
  Obranci = Obranci union [ArSolBunk1, ArSolBunk4, ArSolBunk6];
  VolnyLidi = vytvor_volny; place_list (VolnyLidi, AraboveVolni);
  VolnyLidi = VolnyLidi union [ArMech1, ArMech2];
  Utok_Auta = [];
  ArDalkar = 0; KolikDalkovych = 0; DelamDalkare = false;
  // PromÏnnÈ.
  Zniceno = false; VidelRusa = false; ProbihaUtok = false;
  PatrolaZrusena = false;
  CasyUtoku = dif_CasovacUtoku [Difficulty];
  PstZbrane = dif_PstZbrane [Difficulty];
  Utok_ZbyvaMinut = -1;
  CisloUtoku = 1;
  BeziStahovani = false;
  ProbihaOprava = false; ProbihaLeceni = false;
  // Odstranit jednotky podle sloûitosti.
  If Difficulty = 1 then
  Begin
    DestroyUnit (ArObr2); DestroyUnit (ArObrM1);
    DestroyUnit (ArObr1); DestroyUnit (ArObrM2);
  End;
  // Lidi do jednotek.
  lidi_do_budov;
  // Registrace a obrana.
  Kdo = Obranci union [ArMech1, ArMech2, ArTank1, ArTank2] union [ArSolPBunk1, ArSolPBunk2, ArSolPBunk3];
  If Difficulty > 1 then Kdo = Kdo union [ArObr1, ArObr2, ArObrM1, ArObrM2];
  Kdo = Kdo diff [Obranci [1], Obranci [2]];
  Registry = McRegistry (side_Ar, [[MC_REG_AREA_TO_PROTECT, Obrana]]);
  MakroBunkry = McCustom (20, [ArSolPBunk1, ArSolPBunk2, ArSolPBunk3]);
  MakroObrana = McDefend (5, Registry, Kdo union [ArBunk1, ArBunk3, ArBunk4, ArBunk5], []);
  MakroPresunZakladna = McCustom (1, Kdo);
  // Registrace ˙toku.
  RegUtok = McRegistry (side_Ar, [[MC_REG_AREA_TO_GUARD, Rusove], MC_REG_IGNORE_FOG]);
  // Miny.
  init_miny;
End;


Function init_miny;
Var M;
Begin
  If Difficulty = 1 then Miny = []
  else Begin
    Miny = [[62,14],[64,17],[66,17],[65,12],[68,15],[64,14],[60,5],[60,15],[59,18],[56,16],[49,15],[33,18],[42,42],[112,42]];
    For M in Miny do PlaceMine (M [1], M [2], side_Ar, 0);
  End;
End;


Function vytvor_cloveka (Cls);
Begin
  UC_Side = side_Ar; UC_Nation = NATION_ARABIAN;
  HC_Sex = Rand (1, 2); HC_Class = Cls; HC_Name = '';
  PrepareClassSkills (Cls, dif_ArabiLevel [Difficulty]);
  Result = CreateHuman;
End;


Function vytvor_obrance;
Var I;
Begin
  Result = [];
  For I = 1 to dif_ObranciArabi [Difficulty] do
    Result = Result union [vytvor_cloveka (CLASS_SOLDIER)];
End;


Function vytvor_volny;
Var I;
Begin
  Result = [];
  // Vytvo¯it je.
  For I = 1 to dif_VolnyArabi [Difficulty] do
    If Prob (25) then Result = Result union [vytvor_cloveka (CLASS_SOLDIER)]
    else Result = Result union [vytvor_cloveka (CLASS_MECHANIC)];
End;


Function lidi_do_budov;
Begin
  ComEnterUnit (ArMech1, ArTank1);
  ComEnterUnit (ArMech, ArFact);
  ComEnterUnit (ArSolPBunk1, ArPBunk1);
  ComEnterUnit (ArSolPBunk2, ArPBunk2);
  If Difficulty < 3 then SetClass (ArSolPBunk3, CLASS_SOLDIER);
  If Difficulty > 1 then
  Begin
    ComEnterUnit (ArObrM1, ArObr1);
    ComEnterUnit (ArObrM2, ArObr2);
  End;
  ComEnterUnit (ArSolPBunk3, ArPBunk3);
  ComEnterUnit (ArSolRadar, ArRadar);
  ComEnterUnit (ArSolBunk1, ArBunk1);
  ComEnterUnit (ArSolBunk4, ArBunk4);
  ComEnterUnit (ArSolBunk6, ArBunk6);
  ComEnterUnit (ArSci1, ArLab1);
  ComEnterUnit (ArSci2, ArLab2);
End;


Function kontrola_zniceno;
Var Jednotky;
Begin
  If not Zniceno then
  Begin
    Jednotky = FilterAllUnits ([[F_SIDE, side_Ar], [F_OK], [F_PLACED]]);
    If not Jednotky then
    Begin
      Zniceno = true;
      Disable (43);         // Uû nem· kdo ˙toËit...
    End;
  End;
End;


Function vyber_zbran;
Var P;
Begin
  P = Rand (1, 100);
  If P < PstZbrane [1] then Result = AR_FLAME_THROWER
  else If P < PstZbrane [2] then Result = AR_GUN
  else If P < PstZbrane [3] then Result = AR_DOUBLE_MACHINE_GUN
  else Result = AR_ROCKET_LAUNCHER;
End;


Function vyber_ovladani;
Begin
  Result = CONTROL_MANUAL;
  If not ArDalkar or not IsOk (ArDalkar) then Exit;
  If not ArMechDalkar or not IsOk (ArMechDalkar) then Exit;
  If UnitsLinked (ArMechDalkar) >= GetSkill (ArMechDalkar, SKILL_MECHANICAL) then Exit;
  Result = CONTROL_REMOTE;
End;


// Kontrola, zda je moûnÈ vyrobit vozidlo.
Function kontrola_vyroby;
Var Base, Chassis, Weapon, Control;
Begin
  // Pokud nenÌ tov·rna OK nebo nÏco vyr·bÌ, konËÌm.
  If not IsOK (ArFact) or HasTask (ArFact) then Exit;
  // Pokud ji nÏkdo zajal, konec.
  If GetSide (ArFact) <> side_Ar then Exit;
  // Pokud uvnit¯ nikdo nenÌ, konËÌm.
  If not UnitsInside (ArFact) then Exit;
  // Vyberu nÏjakÈ vozidlo a vyrobÌm ho.
  If (GetTech (TECH_REMCONT, side_Ar) = STATE_RESEARCHED) and not ArDalkar and not DelamDalkare and Prob (75) then
  Begin
    Chassis = AR_MEDIUM_TRIKE;
    Weapon = AR_CONTROL_TOWER;
    Control = CONTROL_MANUAL;
  End else Begin
    If Prob (50) then Chassis = AR_MEDIUM_TRIKE
    else Chassis = AR_HALF_TRACKED;
    Weapon = vyber_zbran;
    Control = vyber_ovladani;
  End;
  // Kontrola, zda je to OK.
  If not CanBeConstructed (ArFact, Chassis, ENGINE_COMBUSTION, Control, Weapon) then Begin
    If not CanBeConstructed (ArFact, AR_LIGHT_TRIKE, ENGINE_COMBUSTION, Control, AR_LIGHT_GUN) then Exit;
    Chassis = AR_LIGHT_TRIKE;
    Weapon = AR_LIGHT_GUN;
  End;
  // Pokud nem·m dost surovin, konËÌm.
  Base = GetBase (ArFact);
  If GetResourceType (Base, MAT_CANS) < 120 then Exit;
  If GetResourceType (Base, MAT_OIL) < 50 then Exit;
  // PostavÌme vozidlo.
  AddComConstruct (ArFact, Chassis, ENGINE_COMBUSTION, Control, Weapon);
  If Weapon = AR_CONTROL_TOWER then
  Begin
    DelamDalkare = true;
    Enable (47);
  End;
End;


// Pokud do pÏti minut od zad·nÌ nevyrobÌm d·lkovÈ ovl·d·nÌ, zkusÌm
// to znova.
Every 5$1 Marked 47 do
Begin
  If not ArDalkar then DelamDalkare = false;
End;


// Funkce, kter· zaËne vynalÈz·nÌ.
Function zacni_vynalezat;
Begin
  AddComResearch (ArLab1, TECH_GUN);
  AddComResearch (ArLab1, TECH_FLAME);
  AddComResearch (ArLab1, TECH_ROCKET);
  AddComResearch (ArLab1, TECH_GATLING);
  AddComResearch (ArLab1, TECH_STIMDRUGS);
  AddComResearch (ArLab1, TECH_EXPLOS);
  AddComResearch (ArLab1, TECH_SELFDEST);
  AddComResearch (ArLab1, TECH_WEAP1);
  AddComResearch (ArLab1, TECH_WEAP2);
  AddComResearch (ArLab1, TECH_BIO2);
  AddComResearch (ArLab1, TECH_BIO2);
  AddComResearch (ArLab2, TECH_RADAR);
  AddComResearch (ArLab2, TECH_REMCONT);
  AddComResearch (ArLab2, TECH_MATDET);
  AddComResearch (ArLab2, TECH_TECH1);
  AddComResearch (ArLab2, TECH_TECH2);
  AddComResearch (ArLab2, TECH_SIBDET);
  AddComResearch (ArLab2, TECH_OPTO1);
  AddComResearch (ArLab2, TECH_OPTO2);
End;


// ZaËne ˙tok s vozidly z Utok_Auta.
Function zacni_utok;
Begin
  ProbihaUtok = true;
  // P¯id·m p¯Ìkaz na ˙toËenÌ.
  MakroUtok = McAttack (10, RegUtok, Utok_Auta, [[MC_RETREAT_AREA_PEOPLE, AraboveParkoviste], [MC_RETREAT_AREA_VEHICLES, AraboveParkoviste], [MC_RETREAT_LIVES_PEOPLE, 10], [MC_RETREAT_LIVES_VEHICLES, 10]]);
End;


// ZjistÌ, zda m˘ûe zaËÌt ˙tok.
Function zjisti_auta_na_utok;
Var KolikChci, I, Riditelne;
Begin
  // ZjistÌm, kolik auù·k˘ chci.
  KolikChci = dif_UtokSkupina [Difficulty];
  I = Rand (1, 100);
  If (I < 25) then KolikChci = KolikChci - 1
  else If (I > 75) and (CisloUtoku > 1) then KolikChci = KolikChci + 1;
  // ZjistÌm, kterÈ auù·ky jsou k dispozici.
  Riditelne = [];
  For I in Autaky diff Patrola do
  Begin
    If (GetControl (I) = CONTROL_MANUAL) and not IsDrivenBy (I) then Continue;
    If (GetWeapon (I) = AR_CONTROL_TOWER) then Continue;
    If (GetLives (I) < HRANICE_ZDRAVI) then Continue;
    Riditelne = Riditelne union [I];
  End;
  // M·m dost auù·k˘?
  If Riditelne >= KolikChci then
  Begin
    // Vezmu prvnÌ auù·ky.
    Result = [];
    For I = 1 to KolikChci do
      Result = Result union Riditelne [I];
  End else Result = [];
End;


// ZruöÌ ˙tok.
Function vrat_utok;
Var I;
Begin
  ProbihaUtok = false; CisloUtoku = CisloUtoku + 1;
  // OkamûitÏ zastavÌ ˙tok a poöle vozidla zpÏt.
  MakroUtok = 0;
  AddComMoveUnit (Utok_Auta, ArDepot);
  AddComMoveToArea (Utok_Auta, AraboveParkoviste);
End;


Export Function arabi_McAttackDone (McId, Un);
Begin
  vrat_utok;
End;


// Oprava aut z ˙toku. Vr·tÌ true, pokud uû nepot¯ebuju b˝t vol·n.
Function oprava_utok;
Var JsouOK, JsouTam, Auto, Task, Budova;
Begin
  JsouOK = false; JsouTam = true; Task = false;
  // ZjiötÏnÌ stavu.
  For Auto in Utok_Auta do
  Begin
    If IsOK (Auto) then
    Begin
      JsouOK = true;
      If not IsInArea (Auto, ArabskaBaze) then JsouTam = false;
      If HasTask (Auto) then Task = true;
    End;
  End;
  // Pokud jsou v h·ji, konËÌm.
  If not Utok_Auta or not JsouOK then
  Begin
    Result = true;
    Exit;
  End;
  // Pokud jeötÏ nejsou zp·tky, tak zatÌm konËÌm a nech·m to na pozdÏji.
  If (not JsouTam) or Task then
  Begin
    Result = false;
    Exit;
  End;
  // Jinak zaËnu opravovat.
  Result = true;
  If not IsOK (ArMech) then Exit;
  Budova = IsInUnit (ArMech);
  If (Budova <> ArFact) and (Budova <> 0) then Exit;
  ComExitBuilding (ArMech); Wait (0$1.3);
  For Auto in Utok_Auta do
  Begin
    If IsInArea (Auto, ArabskaBaze) then AddComRepairVehicle (ArMech, Auto);
  End;
  AddComEnterUnit (ArMech, ArFact);
End;


// Vr·tÌ prvnÌ Ëlen v Ëasech ˙tok˘.
Function zjisti_cas_utoku;
Begin
  If CasyUtoku then
  Begin
    Result = CasyUtoku [1];
    If CasyUtoku > 1 then CasyUtoku = Delete (CasyUtoku, 1);
  End else Result = 5;
End;


// ZjistÌ, zda ArabovÈ dos·hli bodu, od kterÈho je moûnÈ ˙toËit.
Function utoceni_splneny_predpoklady;
Begin
  // ⁄toËit m˘ûu tehdy, pokud jsem buÔ vidÏl Rusa nebo pokud uplynula
  // dostateËnÏ dlouh· doba.
  Result = VidelRusa or (Minuty > 15);
  // Aby to nebylo ˙plnÏ deterministickÈ, budu nÏkterÈ ˙toky odkl·dat.
  If Prob (25) then Result = false;
End;


// Kaûdou cca minutu je vol·na tato funkce.
Function casovac_utok;
Begin
  // Pokud probÌh· ˙tok, nedÏl·m nic.
  If ProbihaUtok then Exit;
  // Zkontrolujeme, zda m·me nastavenÈ poËÌtadlo minut.
  If Utok_ZbyvaMinut = -1 then Utok_ZbyvaMinut = zjisti_cas_utoku;
  // OdeËteme jednu minutu.
  If Utok_ZbyvaMinut > 0 then Utok_ZbyvaMinut = Utok_ZbyvaMinut - 1;
  // ZjistÌme, zda je moûnÈ v˘bec zaËÌt s ˙tokem.
  // Pokud ne, ne˙toËÌme - ale poËÌtadlo odeËt·me.
  If not utoceni_splneny_predpoklady then Exit;
  // Pokud nedoöel ËasovaË na nulu, nedÏl·me nic.
  If Utok_ZbyvaMinut > 0 then Exit;
  // M·m v˘bec dostatek aut na ˙tok?
  Utok_Auta = zjisti_auta_na_utok;
  If not Utok_Auta then Exit;
  // ⁄tok m˘ûe zaËÌt!
  zacni_utok;
  // NastavÌme ËasovaË na dalöÌ ˙tok.
  Utok_ZbyvaMinut = zjisti_cas_utoku;
End;


// Handler pro zaË·tek vynalÈz·nÌ a dalöÌch akcÌ.
Every 0$6 do
Begin
  zacni_vynalezat;
  patrola_kolecko;
End;


// Handler pro v˝robu vozidel.
Every 0$19 do
Begin
  kontrola_vyroby;
  Enable;
End;


Export Function arabi_VehicleConstructed (Veh, Fact);
Var Ridic, NovyRidic;
Begin
  // Kontrola, zda nejde o auù·k.
  If GetSide (Veh) = side_Ar then
  Begin
    NovyRidic = 0;
    Autaky = Autaky union [Veh];
    // Je to d·lkov˝ ovl·d·nÌ?
    If (GetWeapon (Veh) = AR_CONTROL_TOWER) then
    Begin
      ArDalkar = Veh;
      NovyRidic = ArMechDalkar;
      DelamDalkare = false;
    End;
    // Pokud mi zb˝v· nÏjak˝ voln˝ ¯idiË, tak ho tam posadÌm
    // a mechanika poölu zpÏt do tov·rny.
    If (GetControl (Veh) = CONTROL_MANUAL) and VolnyLidi then
    Begin
      Ridic = IsDrivenBy (Veh);
      // Vystoupit.
      Wait (0$3);
      ComExitVehicle (Ridic);
      Wait (0$1);
      While IsDrivenBy (Veh) = Ridic do Wait (0$1);
      // Nastoupit.
      AddComEnterUnit (Ridic, Fact);
      If NovyRidic then ComEnterUnit (NovyRidic, Veh);
      // P¯idat auù·k do obrany.
      Wait (0$3);
      AddMcUnits (MakroPresunZakladna, [Veh]);
    End;
    // Pokud je ovl·d·nÌ d·lkovÈ, nalinkuju ho.
    If (GetControl (Veh) = CONTROL_REMOTE) then
    Begin
      // Nalinkovat na ovl·daËe.
      LinkVehicleToHuman (Veh, ArMechDalkar);
      KolikDalkovych = KolikDalkovych + 1;
      // P¯idat auù·k do obrany.
      Wait (0$3);
      AddMcUnits (MakroPresunZakladna, [Veh]);
    End;
  End;
End;


Function zarid_ridice (Veh);
Var Lidi, I;
Begin
  // Jestli je to d·lkovÈ ovl·d·nÌ, vezmu ovl·daËe.
  If Veh = ArDalkar then
  Begin
    If IsOk (ArMechDalkar) and not IsInUnit (ArMechDalkar) then
    Begin
      ComEnterUnit (ArMechDalkar, Veh);
      Exit;
    End;
  End;
  // Jinak vezmu kohokoliv.
  Lidi = UnitFilter (VolnyLidi, [[F_OUTSIDE]]);
  For I in Lidi do If not HasTask (I) then
  Begin
    ComEnterUnit (I, Veh);
    Exit;
  End;
End;


Function nastupuj_auta;
Var Auta, I;
Begin
  // Za¯ÌdÌ, aby do volnÈho auta nÏkdo nastoupil.
  Auta = FilterUnitsInArea (Obrana, [[F_TYPE, UNIT_VEHICLE], [F_CONTROL, CONTROL_MANUAL], [F_EMPTY]]);
  If not Auta then Exit;
  For I in Auta do zarid_ridice (I);
End;


Every 0$17 do
Begin
  nastupuj_auta;
  Enable;
End;


Export Function arabi_VehicleCaptured (VehNew, VehOld, OrigSide, Hum);
Begin
  // Kontrola, zda nejde o auù·k.
  If VehOld in Patrola then Patrola = Patrola diff [VehOld];
  If VehOld in Autaky then Autaky = Autaky diff [VehOld];
  If VehOld in Utok_Auta then Utok_Auta = Utok_Auta diff [VehOld];
  if GetSide (VehNew) = side_Ar then
  Begin
    Autaky = Autaky union [VehNew];
    AddMcUnits (MakroObrana, VehNew);
    AddMcUnits (MakroPresunZakladna, VehNew);
  End;
  If GetSide (VehOld) = side_Ar then
  Begin
    RemoveMcUnits (MakroObrana, VehOld);
    RemoveMcUnits (MakroPresunZakladna, VehOld);
    If MakroUtok then RemoveMcUnits (MakroUtok, VehOld);
  End;
  // Kontrola, zda je zniËen· z·kladna.
  kontrola_zniceno;
End;


Export Function arabi_UnitDestroyed (Un);
Begin
  // Kontrola, zda nejde o nÏco ze seznamu.
  If Un in Patrola then Patrola = Patrola diff [Un];
  If Un in Autaky then Autaky = Autaky diff [Un];
  If Un in Utok_Auta then Utok_Auta = Utok_Auta diff [Un];
  If Un in VolnyLidi then VolnyLidi = VolnyLidi diff [Un];
  // Kontrola, zda je zniËen· z·kladna.
  kontrola_zniceno;
End;


Export Function arabi_UnitGoesToRed (Un);
Begin
  // P¯edsunutÈ bunkry.
  If (Un = ArPBunk1) then
  Begin
    VolnyLidi = VolnyLidi union [ArSolPBunk1];
    RemoveMcUnits (MakroBunkry, ArSolPBunk1);
  End;
  If (Un = ArPBunk2) then
  Begin
    VolnyLidi = VolnyLidi union [ArSolPBunk2];
    RemoveMcUnits (MakroBunkry, ArSolPBunk2);
  End;
  If (Un = ArPBunk3) then
  Begin
    VolnyLidi = VolnyLidi union [ArSolPBunk3];
    RemoveMcUnits (MakroBunkry, ArSolPBunk3);
  End;
End;


Export Function arabi_BuildingCaptured (Build, OrigSide, Eng);
Begin
  // Kontrola, zda je zniËen· z·kladna.
  kontrola_zniceno;
End;


// ZaËne s timerem pro arabskÈ ˙toky.
Export Function arabi_muzete_utocit;
Begin
  Enable (43);
End;


// Tento trigger bude kontrolovat, zda m· zaË·t ˙tok.
Every 0$45 Marked 43 do
Begin
  Wait (Rand (0$0, 0$30));
  casovac_utok;
  Enable;
End;


// Uû jsem vidÏl Rusy?
Every 0$1.1 Trigger vidi_strana_stranu (side_Ar, side_Ru) do
Begin
  VidelRusa = true;
  zrus_patrolu;
End;


// UkonËenÌ patrolov·nÌ.
Function zrus_patrolu;
Begin
  // P¯esunout se zpÏt do z·kladny.
  ComAgressiveMove (Patrola, 73, 13);
  AddComMoveUnit (Patrola, ArDepot);
  AddComMoveToArea (Patrola, AraboveParkoviste);
  // Uû nebudu patrolovat.
  Patrola = []; PatrolaZrusena = true;
  Disable (45);
End;


// ZaË·tek patrolov·nÌ.
Function patrola_kolecko;
Begin
  // Posun ze z·kladny na z·pad po cestÏ.
  ComMoveUnit (Patrola, ArDepot);
  AddComMoveXY (Patrola, 83, 12);
  AddComMoveXY (Patrola, 68, 13);
  AddComMoveXY (Patrola, 62, 15);
  AddComMoveXY (Patrola, 54, 15);
  AddComMoveXY (Patrola, 46, 13);
  AddComMoveXY (Patrola, 36, 13);
  AddComMoveXY (Patrola, 31, 17);
  AddComWait (Patrola, 0$4.7);
  AddComMoveXY (Patrola, 20, 16);
  AddComMoveXY (Patrola, 4, 3);
  AddComWait (Patrola, 0$4);
  AddComMoveXY (Patrola, 6, 7);
  AddComMoveXY (Patrola, 20, 17);
  AddComMoveXY (Patrola, 28, 18);
  AddComWait (Patrola, 0$5.2);
  If not VsevSaved then
  Begin
    // Posun po svislÈ cestÏ na jih.
    AddComMoveXY (Patrola, 33, 21);
    AddComMoveXY (Patrola, 37, 34);
    AddComMoveXY (Patrola, 43, 45);
    AddComMoveXY (Patrola, 55, 59);
    AddComMoveXY (Patrola, 66, 80);
    AddComWait (Patrola, 0$1.2);
    AddComMoveXY (Patrola, 73, 95);
    AddComMoveXY (Patrola, 74, 100);
    AddComMoveXY (Patrola, 82, 116);
    AddComMoveXY (Patrola, 92, 131);
    AddComWait (Patrola, 0$3.4);
    // Posun zase nahoru.
    AddComMoveXY (Patrola, 93, 129);
    AddComWait (Patrola, 0$4.1);
    AddComMoveXY (Patrola, 87, 119);
    AddComMoveXY (Patrola, 77, 100);
    AddComMoveXY (Patrola, 73, 91);
    AddComMoveXY (Patrola, 65, 73);
    AddComMoveXY (Patrola, 56, 58);
    AddComMoveXY (Patrola, 47, 47);
    AddComMoveXY (Patrola, 40, 36);
    AddComMoveXY (Patrola, 35, 25);
    AddComWait (Patrola, 0$3.3);
  End;
  // ZpÏt do z·kladny.
  AddComMoveXY (Patrola, 34, 18);
  AddComMoveXY (Patrola, 38, 14);
  AddComMoveXY (Patrola, 46, 14);
  AddComMoveXY (Patrola, 51, 16);
  AddComMoveXY (Patrola, 61, 16);
  AddComMoveXY (Patrola, 75, 14);
  AddComMoveXY (Patrola, 86, 18);
  AddComWait (Patrola, 0$2.9);
  // Ud·lost, kterou raisuje auù·k, aû dokonËÌ ˙koly.
  AddComSailEvent (Patrola, 101);
End;


// Bylo dokonËeno jedno koleËko patroly, takûe udÏl·m dalöÌ.
Export Function event_Patrola;
Begin
  If Patrola and not PatrolaZrusena then patrola_kolecko;
End;


// Kontrola, zda patrole nedoölo palivo. Pokud se tak stalo,
// konËÌm s patrolou.
Every 0$27.1 Marked 45 do
Var Kdo;
Begin
  If not Patrola then Exit;
  For Kdo in Patrola do
    If GetFuel (Kdo) < 25 then
    Begin
      zrus_patrolu;
      Exit;
    End;
  Enable;
End;


Every 0$5.1 do
Var I, Stahnout;
Begin
  Stahnout = true;
  For I in GetMcUnits (MakroObrana) do
    If (GetUnitMc (I) = MakroObrana) then
    Begin
      Stahnout = false;
      break;
    End;
  Enable;
  If Stahnout <> BeziStahovani then
  Begin
    If Stahnout then Enable (46) else Disable (46);
    BeziStahovani = Stahnout;
  End;
End;


Every 0$30 Marked 46 do
Var I;
Begin
  // P¯esune jednotky, kterÈ nebr·nÌ, do z·kladny. Vol· se 30 sekund potÈ,
  // co skonËÌ McDefend v pouûÌv·nÌ jednotek.
  For I in GetMcUnits (MakroPresunZakladna) do
    If (GetUnitMc (I) = MakroPresunZakladna) and (GetDistUnitArea (I, ArabskaBaze) > 0) and not IsInUnit (I) and not HasTask (I) then
      ComMoveToArea (I, ArabskaBaze);
  BeziStahovani = false;
End;


Function posila_tank;
Begin
  UC_Side = side_Ar; UC_Nation = NATION_ARABIAN;
  VC_Chassis = AR_MEDIUM_TRIKE; VC_Control = CONTROL_MANUAL;
  VC_Engine = ENGINE_COMBUSTION; VC_Weapon = nahoda_seznam ([AR_FLAME_THROWER, AR_ROCKET_LAUNCHER, AR_MULTIMISSILE_BALLISTA]);
  VC_Fuel_Battery = Rand (85, 100);
  Result = CreateVehicle;
  PlaceHumanInUnit (vytvor_cloveka (CLASS_MECHANIC), Result);
End;


Function vytvor_posily;
Begin
  Result = [];
  If Difficulty = 1 then Exit;
  // Parametry.
  Result = Result union [posila_tank];
  If Difficulty = 2 then Exit;
  Result = Result union [posila_tank];
  Result = Result union [posila_tank];
  Result = Result union [posila_tank];
End;


// P¯Ìjezd posil.
Every 13$1 do
Var Posily, Lidi, I, J;
Begin
  // Vytvo¯iit posily.
  Posily = vytvor_posily;
  place_list (Posily, ArabovePosily);
  Lidi = [];
  For I in Posily do
  Begin
    J = IsDrivenBy (I);
    If J then Lidi = Lidi union [J];
  End;
  // P¯idat posily do systÈmu maker.
  Autaky = Autaky union Posily;
  AddMcUnits (MakroObrana, Lidi union Posily);
  AddMcUnits (MakroPresunZakladna, Lidi union Posily);
End;


Every 2$7 do
Begin
  opravuj_budovy;
  kuryruj_lidi;
  opravuj_auta;
  sbirej_bedny;
  Enable;
End;


// Opravov·nÌ budov.
Function opravuj_budovy;
Var Budovy, Opravit, I, Kde;
Begin
  If not IsOk (ArEng) then Exit;
  // Zjistit seznam budov na opravenÌ.
  Budovy = FilterUnitsInArea (ArabskaBaze, [[F_TYPE, UNIT_BUILDING], [F_SIDE, side_Ar]]);
  Opravit = [];
  For I in Budovy do If GetLives (I) < HRANICE_ZDRAVI then Opravit = Opravit union [I];
  // ProvÈst opravu.
  ComCancel (ArEng);
  If Opravit then
  Begin
    For I in Opravit do AddComRepairBuilding (ArEng, I);
    AddComMoveToArea (ArEng, BednyArabi);
  End;
End;


Function sbirej_bedny;
Begin
  If ArEng and IsOk (ArEng) then AddComCollect (ArEng, 85, 10);
End;


Function opravuj_auta;
Var Auta, Opravit, I, Kde;
Begin
  If ProbihaOprava then Exit;
  If not IsOk (ArMech) then Exit;
  // Zjistit seznam budov na opravenÌ.
  Auta = FilterUnitsInArea (ArabskaBaze, [[F_TYPE, UNIT_VEHICLE], [F_SIDE, side_Ar]]) diff Utok_Auta;
  Opravit = [];
  For I in Auta do If GetLives (I) < HRANICE_ZDRAVI then Opravit = Opravit union [I];
  // ProvÈst opravu.
  If Opravit then
  Begin
    Kde = IsInUnit (ArMech);
    If Kde then
      If GetType (Kde) = UNIT_BUILDING then ComExitBuilding (ArMech)
      else ComExitVehicle (ArMech);
    For I in Opravit do AddComRepairVehicle (ArMech, I);
    AddComSailEvent (ArMech, 102);
    ProbihaOprava = true;
  End;
End;


Function kuryruj_lidi;
Var Lidi, Opravit, I, Kde, Felcar, Budova, Event;
Begin
  If ProbihaLeceni then Exit;
  If IsOk (ArSci1) then Begin Felcar = ArSci1; Budova = ArLab1; Event = 103; End
  else If IsOk (ArSci2) then Begin Felcar = ArSci2; Budova = ArLab2; Event = 104; End
  else Exit;
  // Zjistit seznam lidÌ na opravenÌ.
  Lidi = FilterUnitsInArea (ArabskaBaze, [[F_TYPE, UNIT_HUMAN], [F_SIDE, side_Ar]]);
  Opravit = [];
  For I in Lidi do If GetLives (I) < HRANICE_ZDRAVI then Opravit = Opravit union [I];
  // ProvÈst opravu.
  If Opravit then
  Begin
    Kde = IsInUnit (Felcar);
    If Kde then
      If GetType (Kde) = UNIT_BUILDING then ComExitBuilding (Felcar)
      else ComExitVehicle (Felcar);
    For I in Opravit do AddComHeal (Felcar, I);
    AddComSailEvent (Felcar, Event);
    ProbihaLeceni = true;
  End;
End;


Export Function event_OpravaHotova (Num);
Begin
  Case Num of
  102: Begin
         ComEnterUnit (ArMech, ArFact);
         ProbihaOprava = false;
       End;
  103: Begin
         ComEnterUnit (ArSci1, ArLab1);
         ProbihaLeceni = false;
       End;
  104: Begin
         ComEnterUnit (ArSci2, ArLab2);
         ProbihaLeceni = false;
       End;
  End;
End;


Function testuj_minu (X, Y);
Var Jednotky;
Begin
  // Mina bouchne, pokud je v blÌzkosti Rus·k.
  Jednotky = FilterAllUnits ([[F_SIDE, side_Ru], [F_DISTXY, X, Y, 2]]);
  If Jednotky then
  Begin
    LaunchMineAtPos (X, Y, side_Ar);
    Result = true;
  End else Result = false;
End;


Every 0$1.1+0$0.7 do
Var M, Bouchlo;
Begin
  // Otestovat, zda nem· bouchnout nÏjak· mina.
  If not Miny then Exit;
  Bouchlo = [];
  For M in Miny do
    If testuj_minu (M [1], M [2]) then
      Bouchlo = Bouchlo ^ [M];
  If Bouchlo then Miny = Miny diff Bouchlo;
  If Miny then Enable;
End;


