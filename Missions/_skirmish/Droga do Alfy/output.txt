// starting begin Difficulty := 1 ;
   0: LD_ADDR_OWVAR 67
   4: PUSH
   5: LD_INT 1
   7: ST_TO_ADDR
// ResetFog ;
   8: CALL_OW 335
// PrepareNature ( nature , 3 , 2 , 1 , 2 ) ;
  12: LD_INT 12
  14: PPUSH
  15: LD_INT 3
  17: PPUSH
  18: LD_INT 2
  20: PPUSH
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 1434 0 5
// PrepareRussian ;
  31: CALL 40 0 0
// PrepareAmerican ;
  35: CALL 1917 0 0
// end ; end_of_file
  39: END
// export ru_force , ru_skill ; export ru_patrol , ru_vehs ; export ru_cont_base , ru_blist ; export function PrepareRussian ; var i , un , veh ; begin
  40: LD_INT 0
  42: PPUSH
  43: PPUSH
  44: PPUSH
  45: PPUSH
// uc_side := 3 ;
  46: LD_ADDR_OWVAR 20
  50: PUSH
  51: LD_INT 3
  53: ST_TO_ADDR
// uc_nation := 3 ;
  54: LD_ADDR_OWVAR 21
  58: PUSH
  59: LD_INT 3
  61: ST_TO_ADDR
// ru_skill := [ 1 , 2 , 3 ] [ Difficulty ] ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 2
  72: PUSH
  73: LD_INT 3
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: LIST
  80: PUSH
  81: LD_OWVAR 67
  85: ARRAY
  86: ST_TO_ADDR
// ru_patrol := [ ] ;
  87: LD_ADDR_EXP 3
  91: PUSH
  92: EMPTY
  93: ST_TO_ADDR
// ru_force := [ ] ;
  94: LD_ADDR_EXP 1
  98: PUSH
  99: EMPTY
 100: ST_TO_ADDR
// ru_vehs := [ ] ;
 101: LD_ADDR_EXP 4
 105: PUSH
 106: EMPTY
 107: ST_TO_ADDR
// ru_blist := [ ] ;
 108: LD_ADDR_EXP 6
 112: PUSH
 113: EMPTY
 114: ST_TO_ADDR
// ru_cont_base := true ;
 115: LD_ADDR_EXP 5
 119: PUSH
 120: LD_INT 1
 122: ST_TO_ADDR
// for i = 1 to 7 do
 123: LD_ADDR_VAR 0 2
 127: PUSH
 128: DOUBLE
 129: LD_INT 1
 131: DEC
 132: ST_TO_ADDR
 133: LD_INT 7
 135: PUSH
 136: FOR_TO
 137: IFFALSE 226
// begin un := CreateHumanWithClass ( 1 , ru_skill ) ;
 139: LD_ADDR_VAR 0 3
 143: PUSH
 144: LD_INT 1
 146: PPUSH
 147: LD_EXP 2
 151: PPUSH
 152: CALL 887 0 2
 156: ST_TO_ADDR
// PlaceUnitArea ( un , ru_bun , false ) ;
 157: LD_VAR 0 3
 161: PPUSH
 162: LD_INT 1
 164: PPUSH
 165: LD_INT 0
 167: PPUSH
 168: CALL_OW 49
// ComEnterUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) , un ) ) ;
 172: LD_VAR 0 3
 176: PPUSH
 177: LD_INT 2
 179: PUSH
 180: LD_INT 30
 182: PUSH
 183: LD_INT 32
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: PUSH
 190: LD_INT 30
 192: PUSH
 193: LD_INT 31
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: PUSH
 200: EMPTY
 201: LIST
 202: LIST
 203: LIST
 204: PPUSH
 205: CALL_OW 69
 209: PPUSH
 210: LD_VAR 0 3
 214: PPUSH
 215: CALL_OW 74
 219: PPUSH
 220: CALL_OW 120
// end ;
 224: GO 136
 226: POP
 227: POP
// for i = 1 to 2 do
 228: LD_ADDR_VAR 0 2
 232: PUSH
 233: DOUBLE
 234: LD_INT 1
 236: DEC
 237: ST_TO_ADDR
 238: LD_INT 2
 240: PUSH
 241: FOR_TO
 242: IFFALSE 266
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , ru_skill ) , ru_arm ) ;
 244: LD_INT 1
 246: PPUSH
 247: LD_EXP 2
 251: PPUSH
 252: CALL 887 0 2
 256: PPUSH
 257: LD_INT 7
 259: PPUSH
 260: CALL_OW 52
 264: GO 241
 266: POP
 267: POP
// for i = 1 to 4 do
 268: LD_ADDR_VAR 0 2
 272: PUSH
 273: DOUBLE
 274: LD_INT 1
 276: DEC
 277: ST_TO_ADDR
 278: LD_INT 4
 280: PUSH
 281: FOR_TO
 282: IFFALSE 356
// begin PlaceHumanInUnit ( CreateHumanWithClass ( 2 , ru_skill ) , ru_dep ) ;
 284: LD_INT 2
 286: PPUSH
 287: LD_EXP 2
 291: PPUSH
 292: CALL 887 0 2
 296: PPUSH
 297: LD_INT 2
 299: PPUSH
 300: CALL_OW 52
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , ru_skill ) , ru_fac ) ;
 304: LD_INT 3
 306: PPUSH
 307: LD_EXP 2
 311: PPUSH
 312: CALL 887 0 2
 316: PPUSH
 317: LD_INT 10
 319: PPUSH
 320: CALL_OW 52
// if i > 2 then
 324: LD_VAR 0 2
 328: PUSH
 329: LD_INT 2
 331: GREATER
 332: IFFALSE 354
// PlaceHumanInUnit ( CreateHumanWithClass ( 4 , ru_skill ) , ru_lab ) ;
 334: LD_INT 4
 336: PPUSH
 337: LD_EXP 2
 341: PPUSH
 342: CALL 887 0 2
 346: PPUSH
 347: LD_INT 8
 349: PPUSH
 350: CALL_OW 52
// end ;
 354: GO 281
 356: POP
 357: POP
// vc_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_medium_tracked ] [ Difficulty ] ;
 358: LD_ADDR_OWVAR 37
 362: PUSH
 363: LD_INT 21
 365: PUSH
 366: LD_INT 22
 368: PUSH
 369: LD_INT 22
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: LIST
 376: PUSH
 377: LD_OWVAR 67
 381: ARRAY
 382: ST_TO_ADDR
// vc_engine := engine_combustion ;
 383: LD_ADDR_OWVAR 39
 387: PUSH
 388: LD_INT 1
 390: ST_TO_ADDR
// vc_control := control_manual ;
 391: LD_ADDR_OWVAR 38
 395: PUSH
 396: LD_INT 1
 398: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun ] [ Difficulty ] ;
 399: LD_ADDR_OWVAR 40
 403: PUSH
 404: LD_INT 42
 406: PUSH
 407: LD_INT 42
 409: PUSH
 410: LD_INT 43
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: LIST
 417: PUSH
 418: LD_OWVAR 67
 422: ARRAY
 423: ST_TO_ADDR
// veh := CreateVehicle ;
 424: LD_ADDR_VAR 0 4
 428: PUSH
 429: CALL_OW 45
 433: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
 434: LD_VAR 0 4
 438: PPUSH
 439: LD_INT 2
 441: PPUSH
 442: CALL_OW 233
// PlaceUnitXY ( veh , 39 , 38 , false ) ;
 446: LD_VAR 0 4
 450: PPUSH
 451: LD_INT 39
 453: PPUSH
 454: LD_INT 38
 456: PPUSH
 457: LD_INT 0
 459: PPUSH
 460: CALL_OW 48
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , ru_skill ) , veh ) ;
 464: LD_INT 3
 466: PPUSH
 467: LD_EXP 2
 471: PPUSH
 472: CALL 887 0 2
 476: PPUSH
 477: LD_VAR 0 4
 481: PPUSH
 482: CALL_OW 52
// ru_vehs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
 486: LD_ADDR_EXP 4
 490: PUSH
 491: LD_INT 22
 493: PUSH
 494: LD_INT 3
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: PUSH
 501: LD_INT 21
 503: PUSH
 504: LD_INT 2
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: PPUSH
 515: CALL_OW 69
 519: ST_TO_ADDR
// end ; end_of_file
 520: LD_VAR 0 1
 524: RET
// export function RefreshTime ( time , bool ) ; begin
 525: LD_INT 0
 527: PPUSH
// if bool then
 528: LD_VAR 0 2
 532: IFFALSE 550
// time := time + 0 0$01 else
 534: LD_ADDR_VAR 0 1
 538: PUSH
 539: LD_VAR 0 1
 543: PUSH
 544: LD_INT 35
 546: PLUS
 547: ST_TO_ADDR
 548: GO 564
// time := time - 0 0$01 ;
 550: LD_ADDR_VAR 0 1
 554: PUSH
 555: LD_VAR 0 1
 559: PUSH
 560: LD_INT 35
 562: MINUS
 563: ST_TO_ADDR
// result := time ;
 564: LD_ADDR_VAR 0 3
 568: PUSH
 569: LD_VAR 0 1
 573: ST_TO_ADDR
// end ;
 574: LD_VAR 0 3
 578: RET
// export function MineExist ( side ) ; begin
 579: LD_INT 0
 581: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_mine ] ] ) > 0 then
 582: LD_INT 22
 584: PUSH
 585: LD_VAR 0 1
 589: PUSH
 590: EMPTY
 591: LIST
 592: LIST
 593: PUSH
 594: LD_INT 30
 596: PUSH
 597: LD_INT 30
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: PPUSH
 608: CALL_OW 69
 612: PUSH
 613: LD_INT 0
 615: GREATER
 616: IFFALSE 628
// result := true else
 618: LD_ADDR_VAR 0 2
 622: PUSH
 623: LD_INT 1
 625: ST_TO_ADDR
 626: GO 636
// result := false ;
 628: LD_ADDR_VAR 0 2
 632: PUSH
 633: LD_INT 0
 635: ST_TO_ADDR
// end ;
 636: LD_VAR 0 2
 640: RET
// export function FacExist ( side ) ; begin
 641: LD_INT 0
 643: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) > 0 then
 644: LD_INT 22
 646: PUSH
 647: LD_VAR 0 1
 651: PUSH
 652: EMPTY
 653: LIST
 654: LIST
 655: PUSH
 656: LD_INT 30
 658: PUSH
 659: LD_INT 3
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PPUSH
 670: CALL_OW 69
 674: PUSH
 675: LD_INT 0
 677: GREATER
 678: IFFALSE 690
// result := true else
 680: LD_ADDR_VAR 0 2
 684: PUSH
 685: LD_INT 1
 687: ST_TO_ADDR
 688: GO 698
// result := false ;
 690: LD_ADDR_VAR 0 2
 694: PUSH
 695: LD_INT 0
 697: ST_TO_ADDR
// end ;
 698: LD_VAR 0 2
 702: RET
// export function ConnectWithTower ( side ) ; var i , filter , tower ; begin
 703: LD_INT 0
 705: PPUSH
 706: PPUSH
 707: PPUSH
 708: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] ] ) ;
 709: LD_ADDR_VAR 0 4
 713: PUSH
 714: LD_INT 22
 716: PUSH
 717: LD_VAR 0 1
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: PUSH
 726: LD_INT 33
 728: PUSH
 729: LD_INT 2
 731: PUSH
 732: EMPTY
 733: LIST
 734: LIST
 735: PUSH
 736: LD_INT 50
 738: PUSH
 739: EMPTY
 740: LIST
 741: PUSH
 742: EMPTY
 743: LIST
 744: LIST
 745: LIST
 746: PPUSH
 747: CALL_OW 69
 751: ST_TO_ADDR
// tower := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_control_tower ] ] ) ;
 752: LD_ADDR_VAR 0 5
 756: PUSH
 757: LD_INT 22
 759: PUSH
 760: LD_VAR 0 1
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: PUSH
 769: LD_INT 34
 771: PUSH
 772: LD_INT 31
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PPUSH
 783: CALL_OW 69
 787: ST_TO_ADDR
// if tower > 0 and filter > 0 then
 788: LD_VAR 0 5
 792: PUSH
 793: LD_INT 0
 795: GREATER
 796: PUSH
 797: LD_VAR 0 4
 801: PUSH
 802: LD_INT 0
 804: GREATER
 805: AND
 806: IFFALSE 882
// for i = 1 to filter do
 808: LD_ADDR_VAR 0 3
 812: PUSH
 813: DOUBLE
 814: LD_INT 1
 816: DEC
 817: ST_TO_ADDR
 818: LD_VAR 0 4
 822: PUSH
 823: FOR_TO
 824: IFFALSE 880
// if not IsControledBy ( filter [ i ] ) then
 826: LD_VAR 0 4
 830: PUSH
 831: LD_VAR 0 3
 835: ARRAY
 836: PPUSH
 837: CALL_OW 312
 841: NOT
 842: IFFALSE 878
// ComLinkTo ( filter [ i ] , tower [ Rand ( 1 , tower ) ] ) ;
 844: LD_VAR 0 4
 848: PUSH
 849: LD_VAR 0 3
 853: ARRAY
 854: PPUSH
 855: LD_VAR 0 5
 859: PUSH
 860: LD_INT 1
 862: PPUSH
 863: LD_VAR 0 5
 867: PPUSH
 868: CALL_OW 12
 872: ARRAY
 873: PPUSH
 874: CALL_OW 135
 878: GO 823
 880: POP
 881: POP
// end ;
 882: LD_VAR 0 2
 886: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
 887: LD_INT 0
 889: PPUSH
 890: PPUSH
 891: PPUSH
 892: PPUSH
 893: PPUSH
 894: PPUSH
// hc_class := clas ;
 895: LD_ADDR_OWVAR 28
 899: PUSH
 900: LD_VAR 0 1
 904: ST_TO_ADDR
// hc_importance := 0 ;
 905: LD_ADDR_OWVAR 32
 909: PUSH
 910: LD_INT 0
 912: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
 913: LD_ADDR_VAR 0 4
 917: PUSH
 918: LD_VAR 0 2
 922: PUSH
 923: LD_INT 1
 925: NEG
 926: PPUSH
 927: LD_INT 1
 929: PPUSH
 930: CALL_OW 12
 934: PLUS
 935: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
 936: LD_ADDR_VAR 0 5
 940: PUSH
 941: LD_VAR 0 2
 945: PUSH
 946: LD_INT 1
 948: NEG
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: CALL_OW 12
 957: PLUS
 958: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
 959: LD_ADDR_VAR 0 6
 963: PUSH
 964: LD_VAR 0 2
 968: PUSH
 969: LD_INT 1
 971: NEG
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: CALL_OW 12
 980: PLUS
 981: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
 982: LD_ADDR_VAR 0 7
 986: PUSH
 987: LD_VAR 0 2
 991: PUSH
 992: LD_INT 1
 994: NEG
 995: PPUSH
 996: LD_INT 1
 998: PPUSH
 999: CALL_OW 12
1003: PLUS
1004: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
1005: LD_VAR 0 1
1009: PUSH
1010: LD_INT 1
1012: EQUAL
1013: PUSH
1014: LD_VAR 0 1
1018: PUSH
1019: LD_INT 9
1021: EQUAL
1022: OR
1023: PUSH
1024: LD_VAR 0 1
1028: PUSH
1029: LD_INT 5
1031: EQUAL
1032: OR
1033: PUSH
1034: LD_VAR 0 1
1038: PUSH
1039: LD_INT 8
1041: EQUAL
1042: OR
1043: IFFALSE 1068
// bonus := [ 2 , 0 , 0 , 0 ] ;
1045: LD_ADDR_VAR 0 8
1049: PUSH
1050: LD_INT 2
1052: PUSH
1053: LD_INT 0
1055: PUSH
1056: LD_INT 0
1058: PUSH
1059: LD_INT 0
1061: PUSH
1062: EMPTY
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: ST_TO_ADDR
// if clas = 2 then
1068: LD_VAR 0 1
1072: PUSH
1073: LD_INT 2
1075: EQUAL
1076: IFFALSE 1101
// bonus := [ 0 , 2 , 0 , 0 ] ;
1078: LD_ADDR_VAR 0 8
1082: PUSH
1083: LD_INT 0
1085: PUSH
1086: LD_INT 2
1088: PUSH
1089: LD_INT 0
1091: PUSH
1092: LD_INT 0
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: LIST
1099: LIST
1100: ST_TO_ADDR
// if clas = 3 then
1101: LD_VAR 0 1
1105: PUSH
1106: LD_INT 3
1108: EQUAL
1109: IFFALSE 1134
// bonus := [ 0 , 0 , 2 , 0 ] ;
1111: LD_ADDR_VAR 0 8
1115: PUSH
1116: LD_INT 0
1118: PUSH
1119: LD_INT 0
1121: PUSH
1122: LD_INT 2
1124: PUSH
1125: LD_INT 0
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: ST_TO_ADDR
// if clas = 4 then
1134: LD_VAR 0 1
1138: PUSH
1139: LD_INT 4
1141: EQUAL
1142: IFFALSE 1167
// bonus := [ 0 , 0 , 0 , 2 ] ;
1144: LD_ADDR_VAR 0 8
1148: PUSH
1149: LD_INT 0
1151: PUSH
1152: LD_INT 0
1154: PUSH
1155: LD_INT 0
1157: PUSH
1158: LD_INT 2
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
1167: LD_VAR 0 1
1171: PUSH
1172: LD_INT 4
1174: GREATER
1175: PUSH
1176: LD_VAR 0 1
1180: PUSH
1181: LD_INT 9
1183: NONEQUAL
1184: AND
1185: PUSH
1186: LD_VAR 0 1
1190: PUSH
1191: LD_INT 5
1193: NONEQUAL
1194: AND
1195: PUSH
1196: LD_VAR 0 1
1200: PUSH
1201: LD_INT 8
1203: NONEQUAL
1204: AND
1205: IFFALSE 1230
// bonus := [ 0 , 0 , 0 , 0 ] ;
1207: LD_ADDR_VAR 0 8
1211: PUSH
1212: LD_INT 0
1214: PUSH
1215: LD_INT 0
1217: PUSH
1218: LD_INT 0
1220: PUSH
1221: LD_INT 0
1223: PUSH
1224: EMPTY
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
1230: LD_ADDR_OWVAR 30
1234: PUSH
1235: LD_INT 0
1237: PPUSH
1238: LD_INT 2
1240: PPUSH
1241: CALL_OW 12
1245: PUSH
1246: LD_INT 0
1248: PPUSH
1249: LD_INT 2
1251: PPUSH
1252: CALL_OW 12
1256: PUSH
1257: LD_INT 0
1259: PPUSH
1260: LD_INT 2
1262: PPUSH
1263: CALL_OW 12
1267: PUSH
1268: LD_INT 0
1270: PPUSH
1271: LD_INT 2
1273: PPUSH
1274: CALL_OW 12
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
1285: LD_ADDR_OWVAR 31
1289: PUSH
1290: LD_VAR 0 4
1294: PUSH
1295: LD_VAR 0 8
1299: PUSH
1300: LD_INT 1
1302: ARRAY
1303: PLUS
1304: PUSH
1305: LD_VAR 0 5
1309: PUSH
1310: LD_VAR 0 8
1314: PUSH
1315: LD_INT 2
1317: ARRAY
1318: PLUS
1319: PUSH
1320: LD_VAR 0 6
1324: PUSH
1325: LD_VAR 0 8
1329: PUSH
1330: LD_INT 3
1332: ARRAY
1333: PLUS
1334: PUSH
1335: LD_VAR 0 7
1339: PUSH
1340: LD_VAR 0 8
1344: PUSH
1345: LD_INT 4
1347: ARRAY
1348: PLUS
1349: PUSH
1350: EMPTY
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
1356: LD_ADDR_OWVAR 27
1360: PUSH
1361: LD_INT 1
1363: PPUSH
1364: LD_INT 2
1366: PPUSH
1367: CALL_OW 12
1371: ST_TO_ADDR
// hc_gallery :=  ;
1372: LD_ADDR_OWVAR 33
1376: PUSH
1377: LD_STRING 
1379: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
1380: LD_ADDR_OWVAR 29
1384: PUSH
1385: LD_INT 8
1387: PPUSH
1388: LD_INT 12
1390: PPUSH
1391: CALL_OW 12
1395: PUSH
1396: LD_INT 9
1398: PPUSH
1399: LD_INT 11
1401: PPUSH
1402: CALL_OW 12
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: ST_TO_ADDR
// hc_name :=  ;
1411: LD_ADDR_OWVAR 26
1415: PUSH
1416: LD_STRING 
1418: ST_TO_ADDR
// result := CreateHuman ;
1419: LD_ADDR_VAR 0 3
1423: PUSH
1424: CALL_OW 44
1428: ST_TO_ADDR
// end ;
1429: LD_VAR 0 3
1433: RET
// export function PrepareNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
1434: LD_INT 0
1436: PPUSH
1437: PPUSH
1438: PPUSH
1439: PPUSH
1440: PPUSH
1441: PPUSH
// uc_nation = nation_nature ;
1442: LD_ADDR_OWVAR 21
1446: PUSH
1447: LD_INT 0
1449: ST_TO_ADDR
// uc_side = 0 ;
1450: LD_ADDR_OWVAR 20
1454: PUSH
1455: LD_INT 0
1457: ST_TO_ADDR
// l = 0 ;
1458: LD_ADDR_VAR 0 7
1462: PUSH
1463: LD_INT 0
1465: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
1466: LD_ADDR_OWVAR 24
1470: PUSH
1471: LD_INT 0
1473: PPUSH
1474: LD_INT 5
1476: PPUSH
1477: CALL_OW 12
1481: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
1482: LD_ADDR_OWVAR 35
1486: PUSH
1487: LD_INT 5
1489: NEG
1490: PPUSH
1491: LD_INT 0
1493: PPUSH
1494: CALL_OW 12
1498: ST_TO_ADDR
// hc_gallery =  ;
1499: LD_ADDR_OWVAR 33
1503: PUSH
1504: LD_STRING 
1506: ST_TO_ADDR
// hc_class = class_apeman ;
1507: LD_ADDR_OWVAR 28
1511: PUSH
1512: LD_INT 12
1514: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
1515: LD_ADDR_OWVAR 29
1519: PUSH
1520: LD_INT 11
1522: PPUSH
1523: LD_INT 13
1525: PPUSH
1526: CALL_OW 12
1530: PUSH
1531: LD_INT 10
1533: PPUSH
1534: LD_INT 11
1536: PPUSH
1537: CALL_OW 12
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: ST_TO_ADDR
// hc_sex = sex_male ;
1546: LD_ADDR_OWVAR 27
1550: PUSH
1551: LD_INT 1
1553: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
1554: LD_ADDR_OWVAR 31
1558: PUSH
1559: LD_INT 0
1561: PPUSH
1562: LD_INT 2
1564: PPUSH
1565: CALL_OW 12
1569: PUSH
1570: LD_INT 0
1572: PUSH
1573: LD_INT 0
1575: PUSH
1576: LD_INT 0
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: ST_TO_ADDR
// apeman = CreateHuman ;
1585: LD_ADDR_VAR 0 8
1589: PUSH
1590: CALL_OW 44
1594: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
1595: LD_VAR 0 8
1599: PPUSH
1600: LD_VAR 0 1
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// l = l + 1 ;
1612: LD_ADDR_VAR 0 7
1616: PUSH
1617: LD_VAR 0 7
1621: PUSH
1622: LD_INT 1
1624: PLUS
1625: ST_TO_ADDR
// end until l = num1 ;
1626: LD_VAR 0 7
1630: PUSH
1631: LD_VAR 0 2
1635: EQUAL
1636: IFFALSE 1466
// l = 0 ;
1638: LD_ADDR_VAR 0 7
1642: PUSH
1643: LD_INT 0
1645: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
1646: LD_ADDR_OWVAR 35
1650: PUSH
1651: LD_INT 0
1653: PPUSH
1654: LD_INT 25
1656: PPUSH
1657: CALL_OW 12
1661: ST_TO_ADDR
// hc_class = class_tiger ;
1662: LD_ADDR_OWVAR 28
1666: PUSH
1667: LD_INT 14
1669: ST_TO_ADDR
// hc_sex = sex_male ;
1670: LD_ADDR_OWVAR 27
1674: PUSH
1675: LD_INT 1
1677: ST_TO_ADDR
// hc_gallery = sandnature ;
1678: LD_ADDR_OWVAR 33
1682: PUSH
1683: LD_STRING sandnature
1685: ST_TO_ADDR
// hc_face_number = 3 ;
1686: LD_ADDR_OWVAR 34
1690: PUSH
1691: LD_INT 3
1693: ST_TO_ADDR
// tiger = CreateHuman ;
1694: LD_ADDR_VAR 0 9
1698: PUSH
1699: CALL_OW 44
1703: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
1704: LD_VAR 0 9
1708: PPUSH
1709: LD_VAR 0 1
1713: PPUSH
1714: LD_INT 0
1716: PPUSH
1717: CALL_OW 49
// l = l + 1 ;
1721: LD_ADDR_VAR 0 7
1725: PUSH
1726: LD_VAR 0 7
1730: PUSH
1731: LD_INT 1
1733: PLUS
1734: ST_TO_ADDR
// end until l = num2 ;
1735: LD_VAR 0 7
1739: PUSH
1740: LD_VAR 0 3
1744: EQUAL
1745: IFFALSE 1646
// l = 0 ;
1747: LD_ADDR_VAR 0 7
1751: PUSH
1752: LD_INT 0
1754: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
1755: LD_ADDR_OWVAR 28
1759: PUSH
1760: LD_INT 18
1762: ST_TO_ADDR
// hc_gallery = sandnature ;
1763: LD_ADDR_OWVAR 33
1767: PUSH
1768: LD_STRING sandnature
1770: ST_TO_ADDR
// hc_face_number = 1 ;
1771: LD_ADDR_OWVAR 34
1775: PUSH
1776: LD_INT 1
1778: ST_TO_ADDR
// bird = CreateHuman ;
1779: LD_ADDR_VAR 0 10
1783: PUSH
1784: CALL_OW 44
1788: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
1789: LD_VAR 0 10
1793: PPUSH
1794: LD_INT 0
1796: PPUSH
1797: CALL_OW 51
// l = l + 1 ;
1801: LD_ADDR_VAR 0 7
1805: PUSH
1806: LD_VAR 0 7
1810: PUSH
1811: LD_INT 1
1813: PLUS
1814: ST_TO_ADDR
// end until l = num3 ;
1815: LD_VAR 0 7
1819: PUSH
1820: LD_VAR 0 4
1824: EQUAL
1825: IFFALSE 1755
// l = 0 ;
1827: LD_ADDR_VAR 0 7
1831: PUSH
1832: LD_INT 0
1834: ST_TO_ADDR
// repeat begin hc_class = 21 ;
1835: LD_ADDR_OWVAR 28
1839: PUSH
1840: LD_INT 21
1842: ST_TO_ADDR
// hc_gallery = sandnature ;
1843: LD_ADDR_OWVAR 33
1847: PUSH
1848: LD_STRING sandnature
1850: ST_TO_ADDR
// hc_face_number = 5 ;
1851: LD_ADDR_OWVAR 34
1855: PUSH
1856: LD_INT 5
1858: ST_TO_ADDR
// horse := CreateHuman ;
1859: LD_ADDR_VAR 0 11
1863: PUSH
1864: CALL_OW 44
1868: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
1869: LD_VAR 0 11
1873: PPUSH
1874: LD_VAR 0 1
1878: PPUSH
1879: LD_INT 0
1881: PPUSH
1882: CALL_OW 49
// l = l + 1 ;
1886: LD_ADDR_VAR 0 7
1890: PUSH
1891: LD_VAR 0 7
1895: PUSH
1896: LD_INT 1
1898: PLUS
1899: ST_TO_ADDR
// end until l = num4 ;
1900: LD_VAR 0 7
1904: PUSH
1905: LD_VAR 0 5
1909: EQUAL
1910: IFFALSE 1835
// end ; end_of_file
1912: LD_VAR 0 6
1916: RET
// export brown ; export function PrepareAmerican ; var i , j , filter , p , team , skill ; begin
1917: LD_INT 0
1919: PPUSH
1920: PPUSH
1921: PPUSH
1922: PPUSH
1923: PPUSH
1924: PPUSH
1925: PPUSH
// uc_side := 1 ;
1926: LD_ADDR_OWVAR 20
1930: PUSH
1931: LD_INT 1
1933: ST_TO_ADDR
// uc_nation := 1 ;
1934: LD_ADDR_OWVAR 21
1938: PUSH
1939: LD_INT 1
1941: ST_TO_ADDR
// hc_gallery := us ;
1942: LD_ADDR_OWVAR 33
1946: PUSH
1947: LD_STRING us
1949: ST_TO_ADDR
// hc_face_number := 15 ;
1950: LD_ADDR_OWVAR 34
1954: PUSH
1955: LD_INT 15
1957: ST_TO_ADDR
// hc_sex := sex_male ;
1958: LD_ADDR_OWVAR 27
1962: PUSH
1963: LD_INT 1
1965: ST_TO_ADDR
// hc_name := Jeff Brown ;
1966: LD_ADDR_OWVAR 26
1970: PUSH
1971: LD_STRING Jeff Brown
1973: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
1974: LD_ADDR_OWVAR 30
1978: PUSH
1979: LD_INT 1
1981: PUSH
1982: LD_INT 2
1984: PUSH
1985: LD_INT 0
1987: PUSH
1988: LD_INT 0
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: ST_TO_ADDR
// hc_skills := [ [ 4 , 3 , 2 ] [ Difficulty ] , 3 , 1 , 0 ] ;
1997: LD_ADDR_OWVAR 31
2001: PUSH
2002: LD_INT 4
2004: PUSH
2005: LD_INT 3
2007: PUSH
2008: LD_INT 2
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: LIST
2015: PUSH
2016: LD_OWVAR 67
2020: ARRAY
2021: PUSH
2022: LD_INT 3
2024: PUSH
2025: LD_INT 1
2027: PUSH
2028: LD_INT 0
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: ST_TO_ADDR
// hc_class := 1 ;
2037: LD_ADDR_OWVAR 28
2041: PUSH
2042: LD_INT 1
2044: ST_TO_ADDR
// hc_importance := 100 ;
2045: LD_ADDR_OWVAR 32
2049: PUSH
2050: LD_INT 100
2052: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2053: LD_ADDR_OWVAR 29
2057: PUSH
2058: LD_INT 10
2060: PUSH
2061: LD_INT 10
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: ST_TO_ADDR
// brown := CreateHuman ;
2068: LD_ADDR_EXP 7
2072: PUSH
2073: CALL_OW 44
2077: ST_TO_ADDR
// PlaceUnitArea ( brown , us_start , false ) ;
2078: LD_EXP 7
2082: PPUSH
2083: LD_INT 13
2085: PPUSH
2086: LD_INT 0
2088: PPUSH
2089: CALL_OW 49
// hc_importance := 0 ;
2093: LD_ADDR_OWVAR 32
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// hc_name :=  ;
2101: LD_ADDR_OWVAR 26
2105: PUSH
2106: LD_STRING 
2108: ST_TO_ADDR
// hc_gallery :=  ;
2109: LD_ADDR_OWVAR 33
2113: PUSH
2114: LD_STRING 
2116: ST_TO_ADDR
// skill := [ 3 , 2 , 1 ] [ Difficulty ] ;
2117: LD_ADDR_VAR 0 7
2121: PUSH
2122: LD_INT 3
2124: PUSH
2125: LD_INT 2
2127: PUSH
2128: LD_INT 1
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: LIST
2135: PUSH
2136: LD_OWVAR 67
2140: ARRAY
2141: ST_TO_ADDR
// team := [ [ 4 , 3 , 3 ] [ Difficulty ] , [ 2 , 1 , 1 ] [ Difficulty ] , 0 , [ 2 , 2 , 1 ] [ Difficulty ] ] ;
2142: LD_ADDR_VAR 0 6
2146: PUSH
2147: LD_INT 4
2149: PUSH
2150: LD_INT 3
2152: PUSH
2153: LD_INT 3
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: LIST
2160: PUSH
2161: LD_OWVAR 67
2165: ARRAY
2166: PUSH
2167: LD_INT 2
2169: PUSH
2170: LD_INT 1
2172: PUSH
2173: LD_INT 1
2175: PUSH
2176: EMPTY
2177: LIST
2178: LIST
2179: LIST
2180: PUSH
2181: LD_OWVAR 67
2185: ARRAY
2186: PUSH
2187: LD_INT 0
2189: PUSH
2190: LD_INT 2
2192: PUSH
2193: LD_INT 2
2195: PUSH
2196: LD_INT 1
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: PUSH
2204: LD_OWVAR 67
2208: ARRAY
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: ST_TO_ADDR
// for i = 1 to team do
2216: LD_ADDR_VAR 0 2
2220: PUSH
2221: DOUBLE
2222: LD_INT 1
2224: DEC
2225: ST_TO_ADDR
2226: LD_VAR 0 6
2230: PUSH
2231: FOR_TO
2232: IFFALSE 2296
// for j = 1 to team [ i ] do
2234: LD_ADDR_VAR 0 3
2238: PUSH
2239: DOUBLE
2240: LD_INT 1
2242: DEC
2243: ST_TO_ADDR
2244: LD_VAR 0 6
2248: PUSH
2249: LD_VAR 0 2
2253: ARRAY
2254: PUSH
2255: FOR_TO
2256: IFFALSE 2292
// begin PrepareHuman ( false , i , skill ) ;
2258: LD_INT 0
2260: PPUSH
2261: LD_VAR 0 2
2265: PPUSH
2266: LD_VAR 0 7
2270: PPUSH
2271: CALL_OW 380
// PlaceUnitArea ( CreateHuman , us_start , false ) ;
2275: CALL_OW 44
2279: PPUSH
2280: LD_INT 13
2282: PPUSH
2283: LD_INT 0
2285: PPUSH
2286: CALL_OW 49
// end ;
2290: GO 2255
2292: POP
2293: POP
2294: GO 2231
2296: POP
2297: POP
// end ; end_of_file
2298: LD_VAR 0 1
2302: RET
// on UnitDestroyed ( b ) do begin if b in FilterUnitsInArea ( ru_base , [ f_type , unit_building ] ) then
2303: LD_VAR 0 1
2307: PUSH
2308: LD_INT 14
2310: PPUSH
2311: LD_INT 21
2313: PUSH
2314: LD_INT 3
2316: PUSH
2317: EMPTY
2318: LIST
2319: LIST
2320: PPUSH
2321: CALL_OW 70
2325: IN
2326: IFFALSE 2458
// begin if GetBType ( b ) = b_lab or GetBType ( b ) = b_lab_half then
2328: LD_VAR 0 1
2332: PPUSH
2333: CALL_OW 266
2337: PUSH
2338: LD_INT 6
2340: EQUAL
2341: PUSH
2342: LD_VAR 0 1
2346: PPUSH
2347: CALL_OW 266
2351: PUSH
2352: LD_INT 7
2354: EQUAL
2355: OR
2356: IFFALSE 2374
// ru_blist := ru_blist ^ b_lab else
2358: LD_ADDR_EXP 6
2362: PUSH
2363: LD_EXP 6
2367: PUSH
2368: LD_INT 6
2370: ADD
2371: ST_TO_ADDR
2372: GO 2395
// ru_blist := ru_blist ^ GetBType ( b ) ;
2374: LD_ADDR_EXP 6
2378: PUSH
2379: LD_EXP 6
2383: PUSH
2384: LD_VAR 0 1
2388: PPUSH
2389: CALL_OW 266
2393: ADD
2394: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( b ) ;
2395: LD_ADDR_EXP 6
2399: PUSH
2400: LD_EXP 6
2404: PUSH
2405: LD_VAR 0 1
2409: PPUSH
2410: CALL_OW 250
2414: ADD
2415: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( b ) ;
2416: LD_ADDR_EXP 6
2420: PUSH
2421: LD_EXP 6
2425: PUSH
2426: LD_VAR 0 1
2430: PPUSH
2431: CALL_OW 251
2435: ADD
2436: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( b ) ;
2437: LD_ADDR_EXP 6
2441: PUSH
2442: LD_EXP 6
2446: PUSH
2447: LD_VAR 0 1
2451: PPUSH
2452: CALL_OW 254
2456: ADD
2457: ST_TO_ADDR
// end ; if b = ru_dep then
2458: LD_VAR 0 1
2462: PUSH
2463: LD_INT 2
2465: EQUAL
2466: IFFALSE 2475
// YouLost ( depot-dest ) ;
2468: LD_STRING depot-dest
2470: PPUSH
2471: CALL_OW 104
// if b = brown then
2475: LD_VAR 0 1
2479: PUSH
2480: LD_EXP 7
2484: EQUAL
2485: IFFALSE 2494
// YouLost ( brown-dead ) ;
2487: LD_STRING brown-dead
2489: PPUSH
2490: CALL_OW 104
// end ;
2494: PPOPN 1
2496: END
// every 0 0$01 trigger GetSide ( ru_dep ) = 1 do
2497: LD_INT 2
2499: PPUSH
2500: CALL_OW 255
2504: PUSH
2505: LD_INT 1
2507: EQUAL
2508: IFFALSE 2521
2510: GO 2512
2512: DISABLE
// ru_cont_base := false ;
2513: LD_ADDR_EXP 5
2517: PUSH
2518: LD_INT 0
2520: ST_TO_ADDR
2521: END
// on BuildingComplete ( b ) do var i ;
2522: LD_INT 0
2524: PPUSH
// begin if GetSide ( b ) = 3 then
2525: LD_VAR 0 1
2529: PPUSH
2530: CALL_OW 255
2534: PUSH
2535: LD_INT 3
2537: EQUAL
2538: IFFALSE 2578
// for i = 1 to 4 do
2540: LD_ADDR_VAR 0 2
2544: PUSH
2545: DOUBLE
2546: LD_INT 1
2548: DEC
2549: ST_TO_ADDR
2550: LD_INT 4
2552: PUSH
2553: FOR_TO
2554: IFFALSE 2576
// ru_blist := Delete ( ru_blist , 1 ) ;
2556: LD_ADDR_EXP 6
2560: PUSH
2561: LD_EXP 6
2565: PPUSH
2566: LD_INT 1
2568: PPUSH
2569: CALL_OW 3
2573: ST_TO_ADDR
2574: GO 2553
2576: POP
2577: POP
// end ; end_of_file
2578: PPOPN 2
2580: END
// every 0 0$01 trigger FilterUnitsInArea ( us_alfa , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do var i ;
2581: LD_INT 2
2583: PPUSH
2584: LD_INT 21
2586: PUSH
2587: LD_INT 1
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: LD_INT 22
2596: PUSH
2597: LD_INT 1
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: PPUSH
2608: CALL_OW 70
2612: PUSH
2613: LD_INT 22
2615: PUSH
2616: LD_INT 1
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: PUSH
2623: LD_INT 21
2625: PUSH
2626: LD_INT 1
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PPUSH
2637: CALL_OW 69
2641: EQUAL
2642: IFFALSE 2691
2644: GO 2646
2646: DISABLE
2647: LD_INT 0
2649: PPUSH
// begin for i = 1 to 3 do
2650: LD_ADDR_VAR 0 1
2654: PUSH
2655: DOUBLE
2656: LD_INT 1
2658: DEC
2659: ST_TO_ADDR
2660: LD_INT 3
2662: PUSH
2663: FOR_TO
2664: IFFALSE 2678
// AddMedal (  , 1 ) ;
2666: LD_STRING 
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: CALL_OW 101
2676: GO 2663
2678: POP
2679: POP
// GiveMedals ( MAIN ) ;
2680: LD_STRING MAIN
2682: PPUSH
2683: CALL_OW 102
// YouWin ;
2687: CALL_OW 103
// end ;
2691: PPOPN 1
2693: END
