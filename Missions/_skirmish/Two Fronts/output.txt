// starting begin isTest := false ;
   0: LD_ADDR_EXP 1
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// mission_name := TwoFronts ;
   8: LD_ADDR_OWVAR 68
  12: PUSH
  13: LD_STRING TwoFronts
  15: ST_TO_ADDR
// mission_number := 6 ;
  16: LD_ADDR_OWVAR 70
  20: PUSH
  21: LD_INT 6
  23: ST_TO_ADDR
// RandomizeAll ;
  24: CALL_OW 11
// ResetFog ;
  28: CALL_OW 335
// FogOff ( isTest ) ;
  32: LD_EXP 1
  36: PPUSH
  37: CALL_OW 344
// InitGlobalVar ;
  41: CALL 58 0 0
// InitAction ;
  45: CALL 6518 0 0
// PrepareAmericans ;
  49: CALL 146 0 0
// Action ;
  53: CALL 6776 0 0
// end ;
  57: END
// export isTest , callUsed ; export Jakes , Sylvia ; export dialogTrans , playerLoss ; export call , alfaNorthTriggered , alfaSouthTriggered , attackWave1 , attackWave2 ; export lastRadioMsg , lastRadioAttackMsg ; function InitGlobalVar ; begin
  58: LD_INT 0
  60: PPUSH
// dialogTrans := true ;
  61: LD_ADDR_EXP 5
  65: PUSH
  66: LD_INT 1
  68: ST_TO_ADDR
// call := true ;
  69: LD_ADDR_EXP 7
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// alfaNorthTriggered := false ;
  77: LD_ADDR_EXP 8
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// alfaSouthTriggered := false ;
  85: LD_ADDR_EXP 9
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// playerLoss := 0 ;
  93: LD_ADDR_EXP 6
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// callUsed := false ;
 101: LD_ADDR_EXP 2
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// attackWave1 := 0 ;
 109: LD_ADDR_EXP 10
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// attackWave2 := 0 ;
 117: LD_ADDR_EXP 11
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// lastRadioMsg := 0 0$00 ;
 125: LD_ADDR_EXP 12
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// lastRadioAttackMsg := 0 0$00 ;
 133: LD_ADDR_EXP 13
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// end ; end_of_file
 141: LD_VAR 0 1
 145: RET
// export usForces1 , usForces2 , usVehicles1 , usVehicles2 , usTechs1 , usTechs2 , usConstructList1 , usConstructList2 , usBuildingsToBuild1 , usBuildingsToBuild2 , usAttackVehicles1 , usAttackVehicles2 , usCargo1 , usCargo2 ; export function PrepareAmericans ; begin
 146: LD_INT 0
 148: PPUSH
// usForces1 := PrepareSquad ( 1 , 1 , americanBaseNorthArea , jakes , [ 4 , 6 , 8 ] [ Difficulty ] , [ 21 , 22 , 24 ] [ Difficulty ] ) ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 1
 156: PPUSH
 157: LD_INT 1
 159: PPUSH
 160: LD_INT 10
 162: PPUSH
 163: LD_STRING jakes
 165: PPUSH
 166: LD_INT 4
 168: PUSH
 169: LD_INT 6
 171: PUSH
 172: LD_INT 8
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_OWVAR 67
 184: ARRAY
 185: PPUSH
 186: LD_INT 21
 188: PUSH
 189: LD_INT 22
 191: PUSH
 192: LD_INT 24
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: PUSH
 200: LD_OWVAR 67
 204: ARRAY
 205: PPUSH
 206: CALL 521 0 6
 210: ST_TO_ADDR
// usForces2 := PrepareSquad ( 4 , 1 , americanBaseSouthArea , sylvia , [ 4 , 6 , 8 ] [ Difficulty ] , [ 21 , 22 , 24 ] [ Difficulty ] ) ;
 211: LD_ADDR_EXP 15
 215: PUSH
 216: LD_INT 4
 218: PPUSH
 219: LD_INT 1
 221: PPUSH
 222: LD_INT 11
 224: PPUSH
 225: LD_STRING sylvia
 227: PPUSH
 228: LD_INT 4
 230: PUSH
 231: LD_INT 6
 233: PUSH
 234: LD_INT 8
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: LIST
 241: PUSH
 242: LD_OWVAR 67
 246: ARRAY
 247: PPUSH
 248: LD_INT 21
 250: PUSH
 251: LD_INT 22
 253: PUSH
 254: LD_INT 24
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: LIST
 261: PUSH
 262: LD_OWVAR 67
 266: ARRAY
 267: PPUSH
 268: CALL 521 0 6
 272: ST_TO_ADDR
// usVehicles1 := [ ] ;
 273: LD_ADDR_EXP 16
 277: PUSH
 278: EMPTY
 279: ST_TO_ADDR
// usTechs1 := GetTechNation ( 1 , nation_american , state_enabled ) ;
 280: LD_ADDR_EXP 18
 284: PUSH
 285: LD_INT 1
 287: PPUSH
 288: LD_INT 1
 290: PPUSH
 291: LD_INT 1
 293: PPUSH
 294: CALL 37500 0 3
 298: ST_TO_ADDR
// usConstructList1 := [ ] ;
 299: LD_ADDR_EXP 20
 303: PUSH
 304: EMPTY
 305: ST_TO_ADDR
// usAttackVehicles1 := [ ] ;
 306: LD_ADDR_EXP 24
 310: PUSH
 311: EMPTY
 312: ST_TO_ADDR
// usVehicles2 := [ ] ;
 313: LD_ADDR_EXP 17
 317: PUSH
 318: EMPTY
 319: ST_TO_ADDR
// usTechs2 := GetTechNation ( 4 , nation_american , state_enabled ) ;
 320: LD_ADDR_EXP 19
 324: PUSH
 325: LD_INT 4
 327: PPUSH
 328: LD_INT 1
 330: PPUSH
 331: LD_INT 1
 333: PPUSH
 334: CALL 37500 0 3
 338: ST_TO_ADDR
// usConstructList2 := [ ] ;
 339: LD_ADDR_EXP 21
 343: PUSH
 344: EMPTY
 345: ST_TO_ADDR
// usAttackVehicles2 := [ ] ;
 346: LD_ADDR_EXP 25
 350: PUSH
 351: EMPTY
 352: ST_TO_ADDR
// if Difficulty > 1 then
 353: LD_OWVAR 67
 357: PUSH
 358: LD_INT 1
 360: GREATER
 361: IFFALSE 376
// SetTech ( tech_comp2 , 8 , state_researched ) ;
 363: LD_INT 58
 365: PPUSH
 366: LD_INT 8
 368: PPUSH
 369: LD_INT 2
 371: PPUSH
 372: CALL_OW 322
// if Difficulty > 2 then
 376: LD_OWVAR 67
 380: PUSH
 381: LD_INT 2
 383: GREATER
 384: IFFALSE 399
// SetTech ( tech_comp3 , 8 , state_researched ) ;
 386: LD_INT 59
 388: PPUSH
 389: LD_INT 8
 391: PPUSH
 392: LD_INT 2
 394: PPUSH
 395: CALL_OW 322
// SetResourceType ( GetBase ( usDep1 ) , mat_cans , 7500 ) ;
 399: LD_INT 9
 401: PPUSH
 402: CALL_OW 274
 406: PPUSH
 407: LD_INT 1
 409: PPUSH
 410: LD_INT 7500
 412: PPUSH
 413: CALL_OW 277
// SetResourceType ( GetBase ( usDep1 ) , mat_oil , 3000 ) ;
 417: LD_INT 9
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 2
 427: PPUSH
 428: LD_INT 3000
 430: PPUSH
 431: CALL_OW 277
// SetResourceType ( GetBase ( usDep2 ) , mat_cans , 5500 ) ;
 435: LD_INT 40
 437: PPUSH
 438: CALL_OW 274
 442: PPUSH
 443: LD_INT 1
 445: PPUSH
 446: LD_INT 5500
 448: PPUSH
 449: CALL_OW 277
// SetResourceType ( GetBase ( usDep2 ) , mat_oil , 3000 ) ;
 453: LD_INT 40
 455: PPUSH
 456: CALL_OW 274
 460: PPUSH
 461: LD_INT 2
 463: PPUSH
 464: LD_INT 3000
 466: PPUSH
 467: CALL_OW 277
// usConstructList2 := [ [ us_medium_wheeled , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ] ;
 471: LD_ADDR_EXP 21
 475: PUSH
 476: LD_INT 2
 478: PUSH
 479: LD_INT 1
 481: PUSH
 482: LD_INT 1
 484: PUSH
 485: LD_INT 5
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: PUSH
 494: LD_INT 2
 496: PUSH
 497: LD_INT 1
 499: PUSH
 500: LD_INT 1
 502: PUSH
 503: LD_INT 4
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: ST_TO_ADDR
// end ;
 516: LD_VAR 0 1
 520: RET
// export function PrepareSquad ( side , nat , area , commander , skill , num ) ; var i , un , team , tmp ; begin
 521: LD_INT 0
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
// uc_side := side ;
 528: LD_ADDR_OWVAR 20
 532: PUSH
 533: LD_VAR 0 1
 537: ST_TO_ADDR
// uc_nation := nat ;
 538: LD_ADDR_OWVAR 21
 542: PUSH
 543: LD_VAR 0 2
 547: ST_TO_ADDR
// team := [ ] ;
 548: LD_ADDR_VAR 0 10
 552: PUSH
 553: EMPTY
 554: ST_TO_ADDR
// hc_importance := 100 ;
 555: LD_ADDR_OWVAR 32
 559: PUSH
 560: LD_INT 100
 562: ST_TO_ADDR
// case commander of jakes :
 563: LD_VAR 0 4
 567: PUSH
 568: LD_STRING jakes
 570: DOUBLE
 571: EQUAL
 572: IFTRUE 576
 574: GO 648
 576: POP
// begin PrepareHuman ( sex_male , class_soldier , skill ) ;
 577: LD_INT 1
 579: PPUSH
 580: LD_INT 1
 582: PPUSH
 583: LD_VAR 0 5
 587: PPUSH
 588: CALL_OW 380
// hc_gallery := pkremaster ;
 592: LD_ADDR_OWVAR 33
 596: PUSH
 597: LD_STRING pkremaster
 599: ST_TO_ADDR
// hc_face_number := 12 ;
 600: LD_ADDR_OWVAR 34
 604: PUSH
 605: LD_INT 12
 607: ST_TO_ADDR
// hc_name := Jan van Jakes ;
 608: LD_ADDR_OWVAR 26
 612: PUSH
 613: LD_STRING Jan van Jakes
 615: ST_TO_ADDR
// Jakes := CreateHuman ;
 616: LD_ADDR_EXP 3
 620: PUSH
 621: CALL_OW 44
 625: ST_TO_ADDR
// team := Join ( team , Jakes ) ;
 626: LD_ADDR_VAR 0 10
 630: PUSH
 631: LD_VAR 0 10
 635: PPUSH
 636: LD_EXP 3
 640: PPUSH
 641: CALL 75485 0 2
 645: ST_TO_ADDR
// end ; sylvia :
 646: GO 729
 648: LD_STRING sylvia
 650: DOUBLE
 651: EQUAL
 652: IFTRUE 656
 654: GO 728
 656: POP
// begin PrepareHuman ( sex_female , class_soldier , skill ) ;
 657: LD_INT 2
 659: PPUSH
 660: LD_INT 1
 662: PPUSH
 663: LD_VAR 0 5
 667: PPUSH
 668: CALL_OW 380
// hc_gallery := pkremaster ;
 672: LD_ADDR_OWVAR 33
 676: PUSH
 677: LD_STRING pkremaster
 679: ST_TO_ADDR
// hc_face_number := 13 ;
 680: LD_ADDR_OWVAR 34
 684: PUSH
 685: LD_INT 13
 687: ST_TO_ADDR
// hc_name := Sylvia Johnson ;
 688: LD_ADDR_OWVAR 26
 692: PUSH
 693: LD_STRING Sylvia Johnson
 695: ST_TO_ADDR
// Sylvia := CreateHuman ;
 696: LD_ADDR_EXP 4
 700: PUSH
 701: CALL_OW 44
 705: ST_TO_ADDR
// team := Join ( team , Sylvia ) ;
 706: LD_ADDR_VAR 0 10
 710: PUSH
 711: LD_VAR 0 10
 715: PPUSH
 716: LD_EXP 4
 720: PPUSH
 721: CALL 75485 0 2
 725: ST_TO_ADDR
// end ; end ;
 726: GO 729
 728: POP
// InitHC_All ( ) ;
 729: CALL_OW 584
// for i := 1 to num do
 733: LD_ADDR_VAR 0 8
 737: PUSH
 738: DOUBLE
 739: LD_INT 1
 741: DEC
 742: ST_TO_ADDR
 743: LD_VAR 0 6
 747: PUSH
 748: FOR_TO
 749: IFFALSE 804
// begin PrepareHuman ( false , ( i mod 4 ) + 1 , skill ) ;
 751: LD_INT 0
 753: PPUSH
 754: LD_VAR 0 8
 758: PUSH
 759: LD_INT 4
 761: MOD
 762: PUSH
 763: LD_INT 1
 765: PLUS
 766: PPUSH
 767: LD_VAR 0 5
 771: PPUSH
 772: CALL_OW 380
// un := CreateHuman ;
 776: LD_ADDR_VAR 0 9
 780: PUSH
 781: CALL_OW 44
 785: ST_TO_ADDR
// team := team ^ un ;
 786: LD_ADDR_VAR 0 10
 790: PUSH
 791: LD_VAR 0 10
 795: PUSH
 796: LD_VAR 0 9
 800: ADD
 801: ST_TO_ADDR
// end ;
 802: GO 748
 804: POP
 805: POP
// for i := 1 to 3 do
 806: LD_ADDR_VAR 0 8
 810: PUSH
 811: DOUBLE
 812: LD_INT 1
 814: DEC
 815: ST_TO_ADDR
 816: LD_INT 3
 818: PUSH
 819: FOR_TO
 820: IFFALSE 862
// begin PrepareMechanic ( false , skill ) ;
 822: LD_INT 0
 824: PPUSH
 825: LD_VAR 0 5
 829: PPUSH
 830: CALL_OW 383
// un := CreateHuman ;
 834: LD_ADDR_VAR 0 9
 838: PUSH
 839: CALL_OW 44
 843: ST_TO_ADDR
// team := team ^ un ;
 844: LD_ADDR_VAR 0 10
 848: PUSH
 849: LD_VAR 0 10
 853: PUSH
 854: LD_VAR 0 9
 858: ADD
 859: ST_TO_ADDR
// end ;
 860: GO 819
 862: POP
 863: POP
// for i := 1 to 5 do
 864: LD_ADDR_VAR 0 8
 868: PUSH
 869: DOUBLE
 870: LD_INT 1
 872: DEC
 873: ST_TO_ADDR
 874: LD_INT 5
 876: PUSH
 877: FOR_TO
 878: IFFALSE 920
// begin PrepareSoldier ( false , skill ) ;
 880: LD_INT 0
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 381
// un := CreateHuman ;
 892: LD_ADDR_VAR 0 9
 896: PUSH
 897: CALL_OW 44
 901: ST_TO_ADDR
// team := team ^ un ;
 902: LD_ADDR_VAR 0 10
 906: PUSH
 907: LD_VAR 0 10
 911: PUSH
 912: LD_VAR 0 9
 916: ADD
 917: ST_TO_ADDR
// end ;
 918: GO 877
 920: POP
 921: POP
// for i in team do
 922: LD_ADDR_VAR 0 8
 926: PUSH
 927: LD_VAR 0 10
 931: PUSH
 932: FOR_IN
 933: IFFALSE 1271
// begin case GetClass ( i ) of class_soldier :
 935: LD_VAR 0 8
 939: PPUSH
 940: CALL_OW 257
 944: PUSH
 945: LD_INT 1
 947: DOUBLE
 948: EQUAL
 949: IFTRUE 953
 951: GO 1006
 953: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_full ] ] , [ f_btype , b_barracks ] ] ) ; class_engineer :
 954: LD_ADDR_VAR 0 11
 958: PUSH
 959: LD_INT 22
 961: PUSH
 962: LD_VAR 0 1
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: LD_INT 3
 973: PUSH
 974: LD_INT 62
 976: PUSH
 977: EMPTY
 978: LIST
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 30
 986: PUSH
 987: LD_INT 5
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: PPUSH
 999: CALL_OW 69
1003: ST_TO_ADDR
1004: GO 1226
1006: LD_INT 2
1008: DOUBLE
1009: EQUAL
1010: IFTRUE 1014
1012: GO 1085
1014: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; class_scientistic :
1015: LD_ADDR_VAR 0 11
1019: PUSH
1020: LD_INT 22
1022: PUSH
1023: LD_VAR 0 1
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: PUSH
1032: LD_INT 3
1034: PUSH
1035: LD_INT 62
1037: PUSH
1038: EMPTY
1039: LIST
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PUSH
1045: LD_INT 2
1047: PUSH
1048: LD_INT 30
1050: PUSH
1051: LD_INT 0
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: PUSH
1058: LD_INT 30
1060: PUSH
1061: LD_INT 1
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: LIST
1072: PUSH
1073: EMPTY
1074: LIST
1075: LIST
1076: LIST
1077: PPUSH
1078: CALL_OW 69
1082: ST_TO_ADDR
1083: GO 1226
1085: LD_INT 4
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1164
1093: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) ; class_mechanic :
1094: LD_ADDR_VAR 0 11
1098: PUSH
1099: LD_INT 22
1101: PUSH
1102: LD_VAR 0 1
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: PUSH
1111: LD_INT 3
1113: PUSH
1114: LD_INT 62
1116: PUSH
1117: EMPTY
1118: LIST
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: PUSH
1124: LD_INT 2
1126: PUSH
1127: LD_INT 30
1129: PUSH
1130: LD_INT 6
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: PUSH
1137: LD_INT 30
1139: PUSH
1140: LD_INT 8
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: PUSH
1147: EMPTY
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: PPUSH
1157: CALL_OW 69
1161: ST_TO_ADDR
1162: GO 1226
1164: LD_INT 3
1166: DOUBLE
1167: EQUAL
1168: IFTRUE 1172
1170: GO 1225
1172: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_full ] ] , [ f_btype , b_factory ] ] ) ; end ;
1173: LD_ADDR_VAR 0 11
1177: PUSH
1178: LD_INT 22
1180: PUSH
1181: LD_VAR 0 1
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: LD_INT 3
1192: PUSH
1193: LD_INT 62
1195: PUSH
1196: EMPTY
1197: LIST
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PUSH
1203: LD_INT 30
1205: PUSH
1206: LD_INT 3
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: LIST
1217: PPUSH
1218: CALL_OW 69
1222: ST_TO_ADDR
1223: GO 1226
1225: POP
// if tmp then
1226: LD_VAR 0 11
1230: IFFALSE 1252
// PlaceHumanInUnit ( i , tmp [ 1 ] ) else
1232: LD_VAR 0 8
1236: PPUSH
1237: LD_VAR 0 11
1241: PUSH
1242: LD_INT 1
1244: ARRAY
1245: PPUSH
1246: CALL_OW 52
1250: GO 1269
// PlaceUnitArea ( i , area , false ) ;
1252: LD_VAR 0 8
1256: PPUSH
1257: LD_VAR 0 3
1261: PPUSH
1262: LD_INT 0
1264: PPUSH
1265: CALL_OW 49
// end ;
1269: GO 932
1271: POP
1272: POP
// result := team diff 0 ;
1273: LD_ADDR_VAR 0 7
1277: PUSH
1278: LD_VAR 0 10
1282: PUSH
1283: LD_INT 0
1285: DIFF
1286: ST_TO_ADDR
// end ;
1287: LD_VAR 0 7
1291: RET
// export function PrepareAlfaAttack ( area , n ) ; var i , un , ch ; begin
1292: LD_INT 0
1294: PPUSH
1295: PPUSH
1296: PPUSH
1297: PPUSH
// result := [ ] ;
1298: LD_ADDR_VAR 0 3
1302: PUSH
1303: EMPTY
1304: ST_TO_ADDR
// for i := 1 to n do
1305: LD_ADDR_VAR 0 4
1309: PUSH
1310: DOUBLE
1311: LD_INT 1
1313: DEC
1314: ST_TO_ADDR
1315: LD_VAR 0 2
1319: PUSH
1320: FOR_TO
1321: IFFALSE 1643
// begin uc_side := 8 ;
1323: LD_ADDR_OWVAR 20
1327: PUSH
1328: LD_INT 8
1330: ST_TO_ADDR
// uc_nation := 1 ;
1331: LD_ADDR_OWVAR 21
1335: PUSH
1336: LD_INT 1
1338: ST_TO_ADDR
// ch := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ rand ( 1 , Difficulty ) ] ;
1339: LD_ADDR_VAR 0 6
1343: PUSH
1344: LD_INT 3
1346: PUSH
1347: LD_INT 4
1349: PUSH
1350: LD_INT 4
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: LIST
1357: PUSH
1358: LD_INT 1
1360: PPUSH
1361: LD_OWVAR 67
1365: PPUSH
1366: CALL_OW 12
1370: ARRAY
1371: ST_TO_ADDR
// vc_chassis := ch ;
1372: LD_ADDR_OWVAR 37
1376: PUSH
1377: LD_VAR 0 6
1381: ST_TO_ADDR
// vc_control := control_computer ;
1382: LD_ADDR_OWVAR 38
1386: PUSH
1387: LD_INT 3
1389: ST_TO_ADDR
// vc_engine := engine_combustion ;
1390: LD_ADDR_OWVAR 39
1394: PUSH
1395: LD_INT 1
1397: ST_TO_ADDR
// if tick < [ 14 14$00 , 12 12$00 , 10 10$00 ] [ Difficulty ] then
1398: LD_OWVAR 1
1402: PUSH
1403: LD_INT 29400
1405: PUSH
1406: LD_INT 25200
1408: PUSH
1409: LD_INT 21000
1411: PUSH
1412: EMPTY
1413: LIST
1414: LIST
1415: LIST
1416: PUSH
1417: LD_OWVAR 67
1421: ARRAY
1422: LESS
1423: IFFALSE 1454
// vc_weapon := [ us_light_gun , us_double_gun ] [ rand ( 1 , 2 ) ] else
1425: LD_ADDR_OWVAR 40
1429: PUSH
1430: LD_INT 3
1432: PUSH
1433: LD_INT 5
1435: PUSH
1436: EMPTY
1437: LIST
1438: LIST
1439: PUSH
1440: LD_INT 1
1442: PPUSH
1443: LD_INT 2
1445: PPUSH
1446: CALL_OW 12
1450: ARRAY
1451: ST_TO_ADDR
1452: GO 1550
// if ch = us_medium_tracked then
1454: LD_VAR 0 6
1458: PUSH
1459: LD_INT 3
1461: EQUAL
1462: IFFALSE 1509
// vc_weapon := [ us_light_gun , us_gatling_gun , us_double_gun , us_rocket_launcher ] [ rand ( Difficulty , Difficulty + 1 ) ] else
1464: LD_ADDR_OWVAR 40
1468: PUSH
1469: LD_INT 3
1471: PUSH
1472: LD_INT 4
1474: PUSH
1475: LD_INT 5
1477: PUSH
1478: LD_INT 7
1480: PUSH
1481: EMPTY
1482: LIST
1483: LIST
1484: LIST
1485: LIST
1486: PUSH
1487: LD_OWVAR 67
1491: PPUSH
1492: LD_OWVAR 67
1496: PUSH
1497: LD_INT 1
1499: PLUS
1500: PPUSH
1501: CALL_OW 12
1505: ARRAY
1506: ST_TO_ADDR
1507: GO 1550
// vc_weapon := [ us_double_gun , us_heavy_gun , us_rocket_launcher , us_rocket_launcher ] [ rand ( 1 , Difficulty + 1 ) ] ;
1509: LD_ADDR_OWVAR 40
1513: PUSH
1514: LD_INT 5
1516: PUSH
1517: LD_INT 6
1519: PUSH
1520: LD_INT 7
1522: PUSH
1523: LD_INT 7
1525: PUSH
1526: EMPTY
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: PUSH
1532: LD_INT 1
1534: PPUSH
1535: LD_OWVAR 67
1539: PUSH
1540: LD_INT 1
1542: PLUS
1543: PPUSH
1544: CALL_OW 12
1548: ARRAY
1549: ST_TO_ADDR
// vc_fuel_battery := 70 ;
1550: LD_ADDR_OWVAR 41
1554: PUSH
1555: LD_INT 70
1557: ST_TO_ADDR
// un := CreateVehicle ;
1558: LD_ADDR_VAR 0 5
1562: PUSH
1563: CALL_OW 45
1567: ST_TO_ADDR
// SetDir ( un , 2 ) ;
1568: LD_VAR 0 5
1572: PPUSH
1573: LD_INT 2
1575: PPUSH
1576: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
1580: LD_INT 35
1582: PPUSH
1583: CALL_OW 67
// until PlaceUnitArea ( un , area , false ) ;
1587: LD_VAR 0 5
1591: PPUSH
1592: LD_VAR 0 1
1596: PPUSH
1597: LD_INT 0
1599: PPUSH
1600: CALL_OW 49
1604: IFFALSE 1580
// result := Join ( result , un ) ;
1606: LD_ADDR_VAR 0 3
1610: PUSH
1611: LD_VAR 0 3
1615: PPUSH
1616: LD_VAR 0 5
1620: PPUSH
1621: CALL 75485 0 2
1625: ST_TO_ADDR
// ComMoveXY ( un , 65 , 9 ) ;
1626: LD_VAR 0 5
1630: PPUSH
1631: LD_INT 65
1633: PPUSH
1634: LD_INT 9
1636: PPUSH
1637: CALL_OW 111
// end ;
1641: GO 1320
1643: POP
1644: POP
// if Prob ( [ 90 , 80 , 70 ] [ Difficulty ] ) then
1645: LD_INT 90
1647: PUSH
1648: LD_INT 80
1650: PUSH
1651: LD_INT 70
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: LIST
1658: PUSH
1659: LD_OWVAR 67
1663: ARRAY
1664: PPUSH
1665: CALL_OW 13
1669: IFFALSE 1815
// begin uc_side := 8 ;
1671: LD_ADDR_OWVAR 20
1675: PUSH
1676: LD_INT 8
1678: ST_TO_ADDR
// uc_nation := 1 ;
1679: LD_ADDR_OWVAR 21
1683: PUSH
1684: LD_INT 1
1686: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
1687: LD_ADDR_OWVAR 37
1691: PUSH
1692: LD_INT 4
1694: ST_TO_ADDR
// vc_control := control_computer ;
1695: LD_ADDR_OWVAR 38
1699: PUSH
1700: LD_INT 3
1702: ST_TO_ADDR
// vc_engine := engine_combustion ;
1703: LD_ADDR_OWVAR 39
1707: PUSH
1708: LD_INT 1
1710: ST_TO_ADDR
// vc_weapon := us_bulldozer ;
1711: LD_ADDR_OWVAR 40
1715: PUSH
1716: LD_INT 14
1718: ST_TO_ADDR
// vc_fuel_battery := 70 ;
1719: LD_ADDR_OWVAR 41
1723: PUSH
1724: LD_INT 70
1726: ST_TO_ADDR
// un := CreateVehicle ;
1727: LD_ADDR_VAR 0 5
1731: PUSH
1732: CALL_OW 45
1736: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1737: LD_INT 35
1739: PPUSH
1740: CALL_OW 67
// until PlaceUnitArea ( un , area , false ) ;
1744: LD_VAR 0 5
1748: PPUSH
1749: LD_VAR 0 1
1753: PPUSH
1754: LD_INT 0
1756: PPUSH
1757: CALL_OW 49
1761: IFFALSE 1737
// ComMoveXY ( un , 65 , 9 ) ;
1763: LD_VAR 0 5
1767: PPUSH
1768: LD_INT 65
1770: PPUSH
1771: LD_INT 9
1773: PPUSH
1774: CALL_OW 111
// wait ( 0 0$02 ) ;
1778: LD_INT 70
1780: PPUSH
1781: CALL_OW 67
// CutTreeXYR ( un , 104 , 65 , 12 ) ;
1785: LD_VAR 0 5
1789: PPUSH
1790: LD_INT 104
1792: PPUSH
1793: LD_INT 65
1795: PPUSH
1796: LD_INT 12
1798: PPUSH
1799: CALL 33112 0 4
// AddComAttackUnit ( un , playerDepot ) ;
1803: LD_VAR 0 5
1807: PPUSH
1808: LD_INT 1
1810: PPUSH
1811: CALL_OW 175
// end ; repeat wait ( 0 0$1 ) ;
1815: LD_INT 35
1817: PPUSH
1818: CALL_OW 67
// result := UnitFilter ( result , [ f_ok ] ) ;
1822: LD_ADDR_VAR 0 3
1826: PUSH
1827: LD_VAR 0 3
1831: PPUSH
1832: LD_INT 50
1834: PUSH
1835: EMPTY
1836: LIST
1837: PPUSH
1838: CALL_OW 72
1842: ST_TO_ADDR
// AgressiveMove ( result , [ [ 82 , 14 ] , [ 83 , 39 ] , [ 89 , 51 ] , [ 91 , 58 ] ] ) ;
1843: LD_VAR 0 3
1847: PPUSH
1848: LD_INT 82
1850: PUSH
1851: LD_INT 14
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 83
1860: PUSH
1861: LD_INT 39
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 89
1870: PUSH
1871: LD_INT 51
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 91
1880: PUSH
1881: LD_INT 58
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PUSH
1888: EMPTY
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: PPUSH
1894: CALL 78251 0 2
// until not result ;
1898: LD_VAR 0 3
1902: NOT
1903: IFFALSE 1815
// end ;
1905: LD_VAR 0 3
1909: RET
// every 0 0$1 trigger FilterAllUnits ( [ f_side , 1 ] ) do
1910: LD_INT 22
1912: PUSH
1913: LD_INT 1
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: PPUSH
1920: CALL_OW 69
1924: IFFALSE 2004
1926: GO 1928
1928: DISABLE
// begin enable ;
1929: ENABLE
// BaseScript ( 1 , americanBaseNorthArea , americanBaseNorthArea , americanBaseNorthInnerArea , americanBaseNorthOuterArea , usForces1 , usVehicles1 , usTechs1 , usConstructList1 , usBuildingsToBuild1 , [ 19 , 9 ] , [ 40 , 5 ] , [ 82 , 47 ] ) ;
1930: LD_INT 1
1932: PPUSH
1933: LD_INT 10
1935: PPUSH
1936: LD_INT 10
1938: PPUSH
1939: LD_INT 13
1941: PPUSH
1942: LD_INT 12
1944: PPUSH
1945: LD_EXP 14
1949: PPUSH
1950: LD_EXP 16
1954: PPUSH
1955: LD_EXP 18
1959: PPUSH
1960: LD_EXP 20
1964: PPUSH
1965: LD_EXP 22
1969: PPUSH
1970: LD_INT 19
1972: PUSH
1973: LD_INT 9
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PPUSH
1980: LD_INT 40
1982: PUSH
1983: LD_INT 5
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: PPUSH
1990: LD_INT 82
1992: PUSH
1993: LD_INT 47
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PPUSH
2000: CALL 9762 0 13
// end ;
2004: END
// every 0 0$1 trigger FilterAllUnits ( [ f_side , 4 ] ) do
2005: LD_INT 22
2007: PUSH
2008: LD_INT 4
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PPUSH
2015: CALL_OW 69
2019: IFFALSE 2091
2021: GO 2023
2023: DISABLE
// begin enable ;
2024: ENABLE
// BaseScript ( 4 , americanBaseSouthArea , americanBaseSouthArea , americanBaseSouthInnerArea , americanBaseSouthOuterArea , usForces2 , usVehicles2 , usTechs2 , usConstructList2 , usBuildingsToBuild2 , [ 83 , 151 ] , [ 92 , 144 ] , [ ] ) ;
2025: LD_INT 4
2027: PPUSH
2028: LD_INT 11
2030: PPUSH
2031: LD_INT 11
2033: PPUSH
2034: LD_INT 15
2036: PPUSH
2037: LD_INT 14
2039: PPUSH
2040: LD_EXP 15
2044: PPUSH
2045: LD_EXP 17
2049: PPUSH
2050: LD_EXP 19
2054: PPUSH
2055: LD_EXP 21
2059: PPUSH
2060: LD_EXP 23
2064: PPUSH
2065: LD_INT 83
2067: PUSH
2068: LD_INT 151
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PPUSH
2075: LD_INT 92
2077: PUSH
2078: LD_INT 144
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PPUSH
2085: EMPTY
2086: PPUSH
2087: CALL 9762 0 13
// end ;
2091: END
// every 5 5$00 + 3 3$00 trigger IsOk ( usDep1 ) and not usConstructList1 do var i ;
2092: LD_INT 9
2094: PPUSH
2095: CALL_OW 302
2099: IFFALSE 2108
2101: PUSH
2102: LD_EXP 20
2106: NOT
2107: AND
2108: IFFALSE 2554
2110: GO 2112
2112: DISABLE
2113: LD_INT 0
2115: PPUSH
// begin enable ;
2116: ENABLE
// usConstructList1 := [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_gatling_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] ] ;
2117: LD_ADDR_EXP 20
2121: PUSH
2122: LD_INT 3
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 2
2130: PUSH
2131: LD_INT 5
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: PUSH
2140: LD_INT 3
2142: PUSH
2143: LD_INT 1
2145: PUSH
2146: LD_INT 2
2148: PUSH
2149: LD_INT 4
2151: PUSH
2152: EMPTY
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: PUSH
2158: LD_INT 3
2160: PUSH
2161: LD_INT 1
2163: PUSH
2164: LD_INT 2
2166: PUSH
2167: LD_INT 5
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: PUSH
2176: EMPTY
2177: LIST
2178: LIST
2179: LIST
2180: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) then
2181: LD_INT 22
2183: PUSH
2184: LD_INT 1
2186: PUSH
2187: EMPTY
2188: LIST
2189: LIST
2190: PUSH
2191: LD_INT 34
2193: PUSH
2194: LD_INT 12
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PPUSH
2205: CALL_OW 69
2209: NOT
2210: IFFALSE 2244
// usConstructList1 := usConstructList1 ^ [ [ us_medium_tracked , engine_combustion , control_remote , us_cargo_bay ] ] ;
2212: LD_ADDR_EXP 20
2216: PUSH
2217: LD_EXP 20
2221: PUSH
2222: LD_INT 3
2224: PUSH
2225: LD_INT 1
2227: PUSH
2228: LD_INT 2
2230: PUSH
2231: LD_INT 12
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: LIST
2238: LIST
2239: PUSH
2240: EMPTY
2241: LIST
2242: ADD
2243: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) < 2 then
2244: LD_INT 22
2246: PUSH
2247: LD_INT 1
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: PUSH
2254: LD_INT 34
2256: PUSH
2257: LD_INT 13
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: PUSH
2264: EMPTY
2265: LIST
2266: LIST
2267: PPUSH
2268: CALL_OW 69
2272: PUSH
2273: LD_INT 2
2275: LESS
2276: IFFALSE 2310
// usConstructList1 := usConstructList1 ^ [ [ us_medium_tracked , engine_combustion , control_remote , us_crane ] ] ;
2278: LD_ADDR_EXP 20
2282: PUSH
2283: LD_EXP 20
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: LD_INT 1
2293: PUSH
2294: LD_INT 2
2296: PUSH
2297: LD_INT 13
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: PUSH
2306: EMPTY
2307: LIST
2308: ADD
2309: ST_TO_ADDR
// if UnitsInside ( usFac1 ) > 3 then
2310: LD_INT 10
2312: PPUSH
2313: CALL_OW 313
2317: PUSH
2318: LD_INT 3
2320: GREATER
2321: IFFALSE 2355
// usConstructList1 := usConstructList1 ^ [ [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] ] ;
2323: LD_ADDR_EXP 20
2327: PUSH
2328: LD_EXP 20
2332: PUSH
2333: LD_INT 3
2335: PUSH
2336: LD_INT 1
2338: PUSH
2339: LD_INT 1
2341: PUSH
2342: LD_INT 5
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: LIST
2349: LIST
2350: PUSH
2351: EMPTY
2352: LIST
2353: ADD
2354: ST_TO_ADDR
// if Difficulty > 1 then
2355: LD_OWVAR 67
2359: PUSH
2360: LD_INT 1
2362: GREATER
2363: IFFALSE 2416
// usConstructList1 := usConstructList1 ^ [ [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_gatling_gun ] ] ;
2365: LD_ADDR_EXP 20
2369: PUSH
2370: LD_EXP 20
2374: PUSH
2375: LD_INT 4
2377: PUSH
2378: LD_INT 1
2380: PUSH
2381: LD_INT 2
2383: PUSH
2384: LD_INT 6
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: PUSH
2393: LD_INT 3
2395: PUSH
2396: LD_INT 1
2398: PUSH
2399: LD_INT 2
2401: PUSH
2402: LD_INT 4
2404: PUSH
2405: EMPTY
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: ADD
2415: ST_TO_ADDR
// if Difficulty > 2 then
2416: LD_OWVAR 67
2420: PUSH
2421: LD_INT 2
2423: GREATER
2424: IFFALSE 2477
// usConstructList1 := usConstructList1 ^ [ [ us_heavy_tracked , engine_combustion , control_remote , us_gatling_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_gatling_gun ] ] ;
2426: LD_ADDR_EXP 20
2430: PUSH
2431: LD_EXP 20
2435: PUSH
2436: LD_INT 4
2438: PUSH
2439: LD_INT 1
2441: PUSH
2442: LD_INT 2
2444: PUSH
2445: LD_INT 4
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: LIST
2452: LIST
2453: PUSH
2454: LD_INT 3
2456: PUSH
2457: LD_INT 1
2459: PUSH
2460: LD_INT 2
2462: PUSH
2463: LD_INT 4
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: ADD
2476: ST_TO_ADDR
// for i := 1 to attackWave1 do
2477: LD_ADDR_VAR 0 1
2481: PUSH
2482: DOUBLE
2483: LD_INT 1
2485: DEC
2486: ST_TO_ADDR
2487: LD_EXP 10
2491: PUSH
2492: FOR_TO
2493: IFFALSE 2552
// usConstructList1 := usConstructList1 ^ [ [ us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ rand ( 1 , 3 ) ] ] ] ;
2495: LD_ADDR_EXP 20
2499: PUSH
2500: LD_EXP 20
2504: PUSH
2505: LD_INT 4
2507: PUSH
2508: LD_INT 1
2510: PUSH
2511: LD_INT 2
2513: PUSH
2514: LD_INT 4
2516: PUSH
2517: LD_INT 5
2519: PUSH
2520: LD_INT 6
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: LIST
2527: PUSH
2528: LD_INT 1
2530: PPUSH
2531: LD_INT 3
2533: PPUSH
2534: CALL_OW 12
2538: ARRAY
2539: PUSH
2540: EMPTY
2541: LIST
2542: LIST
2543: LIST
2544: LIST
2545: PUSH
2546: EMPTY
2547: LIST
2548: ADD
2549: ST_TO_ADDR
2550: GO 2492
2552: POP
2553: POP
// end ;
2554: PPOPN 1
2556: END
// export function SendUsAttack1 ; var i , tmp , path , dial ; begin
2557: LD_INT 0
2559: PPUSH
2560: PPUSH
2561: PPUSH
2562: PPUSH
2563: PPUSH
// attackWave1 := Inc ( attackWave1 ) ;
2564: LD_ADDR_EXP 10
2568: PUSH
2569: LD_EXP 10
2573: PPUSH
2574: CALL 76858 0 1
2578: ST_TO_ADDR
// if attackWave1 > 6 then
2579: LD_EXP 10
2583: PUSH
2584: LD_INT 6
2586: GREATER
2587: IFFALSE 2597
// attackWave1 := 6 ;
2589: LD_ADDR_EXP 10
2593: PUSH
2594: LD_INT 6
2596: ST_TO_ADDR
// tmp := usAttackVehicles1 ;
2597: LD_ADDR_VAR 0 3
2601: PUSH
2602: LD_EXP 24
2606: ST_TO_ADDR
// usAttackVehicles1 := [ ] ;
2607: LD_ADDR_EXP 24
2611: PUSH
2612: EMPTY
2613: ST_TO_ADDR
// if IsOk ( Jakes ) and lastRadioAttackMsg + 1 1$00 < tick then
2614: LD_EXP 3
2618: PPUSH
2619: CALL_OW 302
2623: IFFALSE 2641
2625: PUSH
2626: LD_EXP 13
2630: PUSH
2631: LD_INT 2100
2633: PLUS
2634: PUSH
2635: LD_OWVAR 1
2639: LESS
2640: AND
2641: IFFALSE 2735
// begin dial := [ DJ1 , DJ6 ] ;
2643: LD_ADDR_VAR 0 5
2647: PUSH
2648: LD_STRING DJ1
2650: PUSH
2651: LD_STRING DJ6
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_weapon , us_heavy_gun ] ) then
2658: LD_VAR 0 3
2662: PPUSH
2663: LD_INT 34
2665: PUSH
2666: LD_INT 6
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: PPUSH
2673: CALL_OW 72
2677: IFFALSE 2697
// dial := Join ( dial , DJ4 ) ;
2679: LD_ADDR_VAR 0 5
2683: PUSH
2684: LD_VAR 0 5
2688: PPUSH
2689: LD_STRING DJ4
2691: PPUSH
2692: CALL 75485 0 2
2696: ST_TO_ADDR
// lastRadioAttackMsg := tick ;
2697: LD_ADDR_EXP 13
2701: PUSH
2702: LD_OWVAR 1
2706: ST_TO_ADDR
// SayRadio ( Jakes , dial [ rand ( 1 , dial ) ] ) ;
2707: LD_EXP 3
2711: PPUSH
2712: LD_VAR 0 5
2716: PUSH
2717: LD_INT 1
2719: PPUSH
2720: LD_VAR 0 5
2724: PPUSH
2725: CALL_OW 12
2729: ARRAY
2730: PPUSH
2731: CALL_OW 94
// end ; path := [ [ [ 38 , 41 ] , [ 90 , 51 ] ] , [ [ 72 , 14 ] , [ 83 , 42 ] ] ] [ rand ( 1 , 2 ) ] ;
2735: LD_ADDR_VAR 0 4
2739: PUSH
2740: LD_INT 38
2742: PUSH
2743: LD_INT 41
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: PUSH
2750: LD_INT 90
2752: PUSH
2753: LD_INT 51
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: PUSH
2764: LD_INT 72
2766: PUSH
2767: LD_INT 14
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 83
2776: PUSH
2777: LD_INT 42
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 1
2794: PPUSH
2795: LD_INT 2
2797: PPUSH
2798: CALL_OW 12
2802: ARRAY
2803: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
2804: LD_INT 70
2806: PPUSH
2807: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
2811: LD_ADDR_VAR 0 3
2815: PUSH
2816: LD_VAR 0 3
2820: PPUSH
2821: LD_INT 50
2823: PUSH
2824: EMPTY
2825: LIST
2826: PPUSH
2827: CALL_OW 72
2831: ST_TO_ADDR
// for i in tmp do
2832: LD_ADDR_VAR 0 2
2836: PUSH
2837: LD_VAR 0 3
2841: PUSH
2842: FOR_IN
2843: IFFALSE 2861
// AgressiveMove ( i , path ) until not tmp ;
2845: LD_VAR 0 2
2849: PPUSH
2850: LD_VAR 0 4
2854: PPUSH
2855: CALL 78251 0 2
2859: GO 2842
2861: POP
2862: POP
2863: LD_VAR 0 3
2867: NOT
2868: IFFALSE 2804
// end ;
2870: LD_VAR 0 1
2874: RET
// every 5 5$00 + 3 3$00 trigger IsOk ( usDep2 ) and not usConstructList2 do var i ;
2875: LD_INT 40
2877: PPUSH
2878: CALL_OW 302
2882: IFFALSE 2891
2884: PUSH
2885: LD_EXP 21
2889: NOT
2890: AND
2891: IFFALSE 3147
2893: GO 2895
2895: DISABLE
2896: LD_INT 0
2898: PPUSH
// begin enable ;
2899: ENABLE
// usConstructList2 := [ [ us_medium_wheeled , engine_combustion , control_remote , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_remote , us_gatling_gun ] , [ us_medium_wheeled , engine_combustion , control_remote , us_double_gun ] ] ;
2900: LD_ADDR_EXP 21
2904: PUSH
2905: LD_INT 2
2907: PUSH
2908: LD_INT 1
2910: PUSH
2911: LD_INT 2
2913: PUSH
2914: LD_INT 5
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: LIST
2921: LIST
2922: PUSH
2923: LD_INT 2
2925: PUSH
2926: LD_INT 1
2928: PUSH
2929: LD_INT 2
2931: PUSH
2932: LD_INT 4
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: LIST
2939: LIST
2940: PUSH
2941: LD_INT 2
2943: PUSH
2944: LD_INT 1
2946: PUSH
2947: LD_INT 2
2949: PUSH
2950: LD_INT 5
2952: PUSH
2953: EMPTY
2954: LIST
2955: LIST
2956: LIST
2957: LIST
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: LIST
2963: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) then
2964: LD_INT 22
2966: PUSH
2967: LD_INT 4
2969: PUSH
2970: EMPTY
2971: LIST
2972: LIST
2973: PUSH
2974: LD_INT 34
2976: PUSH
2977: LD_INT 12
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: PPUSH
2988: CALL_OW 69
2992: NOT
2993: IFFALSE 3027
// usConstructList2 := usConstructList2 ^ [ [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] ] ;
2995: LD_ADDR_EXP 21
2999: PUSH
3000: LD_EXP 21
3004: PUSH
3005: LD_INT 2
3007: PUSH
3008: LD_INT 1
3010: PUSH
3011: LD_INT 2
3013: PUSH
3014: LD_INT 12
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: LIST
3021: LIST
3022: PUSH
3023: EMPTY
3024: LIST
3025: ADD
3026: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_crane ] ] ) < 2 then
3027: LD_INT 22
3029: PUSH
3030: LD_INT 4
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PUSH
3037: LD_INT 34
3039: PUSH
3040: LD_INT 13
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: PUSH
3056: LD_INT 2
3058: LESS
3059: IFFALSE 3093
// usConstructList2 := usConstructList2 ^ [ [ us_medium_wheeled , engine_combustion , control_remote , us_crane ] ] ;
3061: LD_ADDR_EXP 21
3065: PUSH
3066: LD_EXP 21
3070: PUSH
3071: LD_INT 2
3073: PUSH
3074: LD_INT 1
3076: PUSH
3077: LD_INT 2
3079: PUSH
3080: LD_INT 13
3082: PUSH
3083: EMPTY
3084: LIST
3085: LIST
3086: LIST
3087: LIST
3088: PUSH
3089: EMPTY
3090: LIST
3091: ADD
3092: ST_TO_ADDR
// for i := 1 to attackWave2 do
3093: LD_ADDR_VAR 0 1
3097: PUSH
3098: DOUBLE
3099: LD_INT 1
3101: DEC
3102: ST_TO_ADDR
3103: LD_EXP 11
3107: PUSH
3108: FOR_TO
3109: IFFALSE 3145
// usConstructList2 := usConstructList2 ^ [ [ us_medium_wheeled , engine_combustion , control_remote , us_rocket_launcher ] ] ;
3111: LD_ADDR_EXP 21
3115: PUSH
3116: LD_EXP 21
3120: PUSH
3121: LD_INT 2
3123: PUSH
3124: LD_INT 1
3126: PUSH
3127: LD_INT 2
3129: PUSH
3130: LD_INT 7
3132: PUSH
3133: EMPTY
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: PUSH
3139: EMPTY
3140: LIST
3141: ADD
3142: ST_TO_ADDR
3143: GO 3108
3145: POP
3146: POP
// end ;
3147: PPOPN 1
3149: END
// export function SendUsAttack2 ; var i , tmp , path , dial ; begin
3150: LD_INT 0
3152: PPUSH
3153: PPUSH
3154: PPUSH
3155: PPUSH
3156: PPUSH
// attackWave2 := Inc ( attackWave2 ) ;
3157: LD_ADDR_EXP 11
3161: PUSH
3162: LD_EXP 11
3166: PPUSH
3167: CALL 76858 0 1
3171: ST_TO_ADDR
// if attackWave2 > 9 then
3172: LD_EXP 11
3176: PUSH
3177: LD_INT 9
3179: GREATER
3180: IFFALSE 3190
// attackWave2 := 9 ;
3182: LD_ADDR_EXP 11
3186: PUSH
3187: LD_INT 9
3189: ST_TO_ADDR
// tmp := usAttackVehicles2 ;
3190: LD_ADDR_VAR 0 3
3194: PUSH
3195: LD_EXP 25
3199: ST_TO_ADDR
// usAttackVehicles2 := [ ] ;
3200: LD_ADDR_EXP 25
3204: PUSH
3205: EMPTY
3206: ST_TO_ADDR
// if IsOk ( Sylvia ) and lastRadioAttackMsg + 1 1$00 < tick then
3207: LD_EXP 4
3211: PPUSH
3212: CALL_OW 302
3216: IFFALSE 3234
3218: PUSH
3219: LD_EXP 13
3223: PUSH
3224: LD_INT 2100
3226: PLUS
3227: PUSH
3228: LD_OWVAR 1
3232: LESS
3233: AND
3234: IFFALSE 3328
// begin dial := [ DS2 , DS3 ] ;
3236: LD_ADDR_VAR 0 5
3240: PUSH
3241: LD_STRING DS2
3243: PUSH
3244: LD_STRING DS3
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_weapon , us_rocket_launcher ] ) then
3251: LD_VAR 0 3
3255: PPUSH
3256: LD_INT 34
3258: PUSH
3259: LD_INT 7
3261: PUSH
3262: EMPTY
3263: LIST
3264: LIST
3265: PPUSH
3266: CALL_OW 72
3270: IFFALSE 3290
// dial := Join ( dial , DS6 ) ;
3272: LD_ADDR_VAR 0 5
3276: PUSH
3277: LD_VAR 0 5
3281: PPUSH
3282: LD_STRING DS6
3284: PPUSH
3285: CALL 75485 0 2
3289: ST_TO_ADDR
// lastRadioAttackMsg := tick ;
3290: LD_ADDR_EXP 13
3294: PUSH
3295: LD_OWVAR 1
3299: ST_TO_ADDR
// SayRadio ( Sylvia , dial [ rand ( 1 , dial ) ] ) ;
3300: LD_EXP 4
3304: PPUSH
3305: LD_VAR 0 5
3309: PUSH
3310: LD_INT 1
3312: PPUSH
3313: LD_VAR 0 5
3317: PPUSH
3318: CALL_OW 12
3322: ARRAY
3323: PPUSH
3324: CALL_OW 94
// end ; path := [ [ 123 , 138 ] , [ 125 , 126 ] ] ;
3328: LD_ADDR_VAR 0 4
3332: PUSH
3333: LD_INT 123
3335: PUSH
3336: LD_INT 138
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 125
3345: PUSH
3346: LD_INT 126
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
3357: LD_INT 70
3359: PPUSH
3360: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
3364: LD_ADDR_VAR 0 3
3368: PUSH
3369: LD_VAR 0 3
3373: PPUSH
3374: LD_INT 50
3376: PUSH
3377: EMPTY
3378: LIST
3379: PPUSH
3380: CALL_OW 72
3384: ST_TO_ADDR
// for i in tmp do
3385: LD_ADDR_VAR 0 2
3389: PUSH
3390: LD_VAR 0 3
3394: PUSH
3395: FOR_IN
3396: IFFALSE 3414
// AgressiveMove ( i , path ) until not tmp ;
3398: LD_VAR 0 2
3402: PPUSH
3403: LD_VAR 0 4
3407: PPUSH
3408: CALL 78251 0 2
3412: GO 3395
3414: POP
3415: POP
3416: LD_VAR 0 3
3420: NOT
3421: IFFALSE 3357
// end ;
3423: LD_VAR 0 1
3427: RET
// every 0 0$2 trigger IsOk ( usCargo1 ) do var cr , enemyInArea ;
3428: LD_EXP 26
3432: PPUSH
3433: CALL_OW 302
3437: IFFALSE 3708
3439: GO 3441
3441: DISABLE
3442: LD_INT 0
3444: PPUSH
3445: PPUSH
// begin enable ;
3446: ENABLE
// enemyInArea := FilterUnitsInArea ( amCrates1Area , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
3447: LD_ADDR_VAR 0 2
3451: PUSH
3452: LD_INT 16
3454: PPUSH
3455: LD_INT 81
3457: PUSH
3458: LD_INT 1
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: PUSH
3465: LD_INT 50
3467: PUSH
3468: EMPTY
3469: LIST
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PPUSH
3475: CALL_OW 70
3479: ST_TO_ADDR
// cr := GetListOfCratesInArea ( amCrates1Area ) ;
3480: LD_ADDR_VAR 0 1
3484: PUSH
3485: LD_INT 16
3487: PPUSH
3488: CALL_OW 435
3492: ST_TO_ADDR
// if GetFuel ( usCargo1 ) < 10 and not See ( 3 , usCargo1 ) then
3493: LD_EXP 26
3497: PPUSH
3498: CALL_OW 261
3502: PUSH
3503: LD_INT 10
3505: LESS
3506: IFFALSE 3523
3508: PUSH
3509: LD_INT 3
3511: PPUSH
3512: LD_EXP 26
3516: PPUSH
3517: CALL_OW 292
3521: NOT
3522: AND
3523: IFFALSE 3537
// SetFuel ( usCargo1 , 100 ) ;
3525: LD_EXP 26
3529: PPUSH
3530: LD_INT 100
3532: PPUSH
3533: CALL_OW 240
// if not HasTask ( usCargo1 ) and GetCargo ( usCargo1 , mat_cans ) < 100 and not enemyInArea then
3537: LD_EXP 26
3541: PPUSH
3542: CALL_OW 314
3546: NOT
3547: IFFALSE 3567
3549: PUSH
3550: LD_EXP 26
3554: PPUSH
3555: LD_INT 1
3557: PPUSH
3558: CALL_OW 289
3562: PUSH
3563: LD_INT 100
3565: LESS
3566: AND
3567: IFFALSE 3576
3569: PUSH
3570: LD_VAR 0 2
3574: NOT
3575: AND
3576: IFFALSE 3642
// begin if cr then
3578: LD_VAR 0 1
3582: IFFALSE 3613
// ComCollect ( usCargo1 , cr [ 1 ] , cr [ 2 ] ) else
3584: LD_EXP 26
3588: PPUSH
3589: LD_VAR 0 1
3593: PUSH
3594: LD_INT 1
3596: ARRAY
3597: PPUSH
3598: LD_VAR 0 1
3602: PUSH
3603: LD_INT 2
3605: ARRAY
3606: PPUSH
3607: CALL_OW 117
3611: GO 3640
// if not IsInArea ( usCargo1 , amCrates1Area ) then
3613: LD_EXP 26
3617: PPUSH
3618: LD_INT 16
3620: PPUSH
3621: CALL_OW 308
3625: NOT
3626: IFFALSE 3640
// ComMoveToArea ( usCargo1 , amCrates1Area ) ;
3628: LD_EXP 26
3632: PPUSH
3633: LD_INT 16
3635: PPUSH
3636: CALL_OW 113
// exit ;
3640: GO 3708
// end ; if enemyInArea and not IsInArea ( usCargo1 , americanBaseNorthArea ) then
3642: LD_VAR 0 2
3646: IFFALSE 3663
3648: PUSH
3649: LD_EXP 26
3653: PPUSH
3654: LD_INT 10
3656: PPUSH
3657: CALL_OW 308
3661: NOT
3662: AND
3663: IFFALSE 3682
// ComMoveXY ( usCargo1 , 21 , 8 ) else
3665: LD_EXP 26
3669: PPUSH
3670: LD_INT 21
3672: PPUSH
3673: LD_INT 8
3675: PPUSH
3676: CALL_OW 111
3680: GO 3708
// if GetCargo ( usCargo1 , mat_cans ) then
3682: LD_EXP 26
3686: PPUSH
3687: LD_INT 1
3689: PPUSH
3690: CALL_OW 289
3694: IFFALSE 3708
// ComGive ( usCargo1 , usDep1 ) ;
3696: LD_EXP 26
3700: PPUSH
3701: LD_INT 9
3703: PPUSH
3704: CALL_OW 161
// end ;
3708: PPOPN 2
3710: END
// every 0 0$2 trigger IsOk ( usCargo2 ) do var cr , enemyInArea ;
3711: LD_EXP 27
3715: PPUSH
3716: CALL_OW 302
3720: IFFALSE 3991
3722: GO 3724
3724: DISABLE
3725: LD_INT 0
3727: PPUSH
3728: PPUSH
// begin enable ;
3729: ENABLE
// enemyInArea := FilterUnitsInArea ( amCrates2Area , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
3730: LD_ADDR_VAR 0 2
3734: PUSH
3735: LD_INT 17
3737: PPUSH
3738: LD_INT 81
3740: PUSH
3741: LD_INT 1
3743: PUSH
3744: EMPTY
3745: LIST
3746: LIST
3747: PUSH
3748: LD_INT 50
3750: PUSH
3751: EMPTY
3752: LIST
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: PPUSH
3758: CALL_OW 70
3762: ST_TO_ADDR
// cr := GetListOfCratesInArea ( amCrates2Area ) ;
3763: LD_ADDR_VAR 0 1
3767: PUSH
3768: LD_INT 17
3770: PPUSH
3771: CALL_OW 435
3775: ST_TO_ADDR
// if GetFuel ( usCargo2 ) < 10 and not See ( 3 , usCargo2 ) then
3776: LD_EXP 27
3780: PPUSH
3781: CALL_OW 261
3785: PUSH
3786: LD_INT 10
3788: LESS
3789: IFFALSE 3806
3791: PUSH
3792: LD_INT 3
3794: PPUSH
3795: LD_EXP 27
3799: PPUSH
3800: CALL_OW 292
3804: NOT
3805: AND
3806: IFFALSE 3820
// SetFuel ( usCargo2 , 100 ) ;
3808: LD_EXP 27
3812: PPUSH
3813: LD_INT 100
3815: PPUSH
3816: CALL_OW 240
// if not HasTask ( usCargo2 ) and GetCargo ( usCargo2 , mat_cans ) < 100 and not enemyInArea then
3820: LD_EXP 27
3824: PPUSH
3825: CALL_OW 314
3829: NOT
3830: IFFALSE 3850
3832: PUSH
3833: LD_EXP 27
3837: PPUSH
3838: LD_INT 1
3840: PPUSH
3841: CALL_OW 289
3845: PUSH
3846: LD_INT 100
3848: LESS
3849: AND
3850: IFFALSE 3859
3852: PUSH
3853: LD_VAR 0 2
3857: NOT
3858: AND
3859: IFFALSE 3925
// begin if cr then
3861: LD_VAR 0 1
3865: IFFALSE 3896
// ComCollect ( usCargo2 , cr [ 1 ] , cr [ 2 ] ) else
3867: LD_EXP 27
3871: PPUSH
3872: LD_VAR 0 1
3876: PUSH
3877: LD_INT 1
3879: ARRAY
3880: PPUSH
3881: LD_VAR 0 1
3885: PUSH
3886: LD_INT 2
3888: ARRAY
3889: PPUSH
3890: CALL_OW 117
3894: GO 3923
// if not IsInArea ( usCargo2 , amCrates2Area ) then
3896: LD_EXP 27
3900: PPUSH
3901: LD_INT 17
3903: PPUSH
3904: CALL_OW 308
3908: NOT
3909: IFFALSE 3923
// ComMoveToArea ( usCargo2 , amCrates2Area ) ;
3911: LD_EXP 27
3915: PPUSH
3916: LD_INT 17
3918: PPUSH
3919: CALL_OW 113
// exit ;
3923: GO 3991
// end ; if enemyInArea and not IsInArea ( usCargo2 , americanBaseSouthArea ) then
3925: LD_VAR 0 2
3929: IFFALSE 3946
3931: PUSH
3932: LD_EXP 27
3936: PPUSH
3937: LD_INT 11
3939: PPUSH
3940: CALL_OW 308
3944: NOT
3945: AND
3946: IFFALSE 3965
// ComMoveXY ( usCargo2 , 85 , 153 ) else
3948: LD_EXP 27
3952: PPUSH
3953: LD_INT 85
3955: PPUSH
3956: LD_INT 153
3958: PPUSH
3959: CALL_OW 111
3963: GO 3991
// if GetCargo ( usCargo2 , mat_cans ) then
3965: LD_EXP 27
3969: PPUSH
3970: LD_INT 1
3972: PPUSH
3973: CALL_OW 289
3977: IFFALSE 3991
// ComGive ( usCargo2 , usDep2 ) ;
3979: LD_EXP 27
3983: PPUSH
3984: LD_INT 40
3986: PPUSH
3987: CALL_OW 161
// end ; end_of_file
3991: PPOPN 2
3993: END
// export function PrepareAttack ( area , n ) ; var i , un ; begin
3994: LD_INT 0
3996: PPUSH
3997: PPUSH
3998: PPUSH
// for i := 1 to n do
3999: LD_ADDR_VAR 0 4
4003: PUSH
4004: DOUBLE
4005: LD_INT 1
4007: DEC
4008: ST_TO_ADDR
4009: LD_VAR 0 2
4013: PUSH
4014: FOR_TO
4015: IFFALSE 4278
// begin uc_side := 6 ;
4017: LD_ADDR_OWVAR 20
4021: PUSH
4022: LD_INT 6
4024: ST_TO_ADDR
// uc_nation := 3 ;
4025: LD_ADDR_OWVAR 21
4029: PUSH
4030: LD_INT 3
4032: ST_TO_ADDR
// vc_chassis := [ ru_heavy_wheeled , ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 3 ) ] ;
4033: LD_ADDR_OWVAR 37
4037: PUSH
4038: LD_INT 23
4040: PUSH
4041: LD_INT 22
4043: PUSH
4044: LD_INT 23
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: LIST
4051: PUSH
4052: LD_INT 1
4054: PPUSH
4055: LD_INT 3
4057: PPUSH
4058: CALL_OW 12
4062: ARRAY
4063: ST_TO_ADDR
// vc_control := control_computer ;
4064: LD_ADDR_OWVAR 38
4068: PUSH
4069: LD_INT 3
4071: ST_TO_ADDR
// vc_engine := engine_combustion ;
4072: LD_ADDR_OWVAR 39
4076: PUSH
4077: LD_INT 1
4079: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , 3 ) ] ;
4080: LD_ADDR_OWVAR 40
4084: PUSH
4085: LD_INT 43
4087: PUSH
4088: LD_INT 44
4090: PUSH
4091: LD_INT 46
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: LIST
4098: PUSH
4099: LD_INT 1
4101: PPUSH
4102: LD_INT 3
4104: PPUSH
4105: CALL_OW 12
4109: ARRAY
4110: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4111: LD_OWVAR 40
4115: PUSH
4116: LD_INT 46
4118: EQUAL
4119: IFFALSE 4129
// vc_chassis := ru_heavy_wheeled ;
4121: LD_ADDR_OWVAR 37
4125: PUSH
4126: LD_INT 23
4128: ST_TO_ADDR
// vc_fuel_battery := 80 ;
4129: LD_ADDR_OWVAR 41
4133: PUSH
4134: LD_INT 80
4136: ST_TO_ADDR
// un := CreateVehicle ;
4137: LD_ADDR_VAR 0 5
4141: PUSH
4142: CALL_OW 45
4146: ST_TO_ADDR
// case area of eastArr :
4147: LD_VAR 0 1
4151: PUSH
4152: LD_INT 7
4154: DOUBLE
4155: EQUAL
4156: IFTRUE 4160
4158: GO 4216
4160: POP
// begin SetDir ( un , 4 ) ;
4161: LD_VAR 0 5
4165: PPUSH
4166: LD_INT 4
4168: PPUSH
4169: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
4173: LD_INT 35
4175: PPUSH
4176: CALL_OW 67
// until PlaceUnitArea ( un , area , false ) ;
4180: LD_VAR 0 5
4184: PPUSH
4185: LD_VAR 0 1
4189: PPUSH
4190: LD_INT 0
4192: PPUSH
4193: CALL_OW 49
4197: IFFALSE 4173
// ComMoveXY ( un , 79 , 33 ) ;
4199: LD_VAR 0 5
4203: PPUSH
4204: LD_INT 79
4206: PPUSH
4207: LD_INT 33
4209: PPUSH
4210: CALL_OW 111
// end ; southArr :
4214: GO 4269
4216: LD_INT 8
4218: DOUBLE
4219: EQUAL
4220: IFTRUE 4224
4222: GO 4268
4224: POP
// begin repeat wait ( 0 0$1 ) ;
4225: LD_INT 35
4227: PPUSH
4228: CALL_OW 67
// until PlaceUnitArea ( un , area , false ) ;
4232: LD_VAR 0 5
4236: PPUSH
4237: LD_VAR 0 1
4241: PPUSH
4242: LD_INT 0
4244: PPUSH
4245: CALL_OW 49
4249: IFFALSE 4225
// ComMoveXY ( un , 131 , 148 ) ;
4251: LD_VAR 0 5
4255: PPUSH
4256: LD_INT 131
4258: PPUSH
4259: LD_INT 148
4261: PPUSH
4262: CALL_OW 111
// end ; end ;
4266: GO 4269
4268: POP
// wait ( 0 0$02 ) ;
4269: LD_INT 70
4271: PPUSH
4272: CALL_OW 67
// end ;
4276: GO 4014
4278: POP
4279: POP
// end ;
4280: LD_VAR 0 3
4284: RET
// export function PrepareConvoy ( area , n ) ; var i , un ; begin
4285: LD_INT 0
4287: PPUSH
4288: PPUSH
4289: PPUSH
// for i := 1 to n do
4290: LD_ADDR_VAR 0 4
4294: PUSH
4295: DOUBLE
4296: LD_INT 1
4298: DEC
4299: ST_TO_ADDR
4300: LD_VAR 0 2
4304: PUSH
4305: FOR_TO
4306: IFFALSE 4532
// begin uc_side := 6 ;
4308: LD_ADDR_OWVAR 20
4312: PUSH
4313: LD_INT 6
4315: ST_TO_ADDR
// uc_nation := 3 ;
4316: LD_ADDR_OWVAR 21
4320: PUSH
4321: LD_INT 3
4323: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
4324: LD_INT 0
4326: PPUSH
4327: LD_INT 3
4329: PPUSH
4330: LD_INT 4
4332: PPUSH
4333: CALL_OW 380
// vc_chassis := ru_medium_tracked ;
4337: LD_ADDR_OWVAR 37
4341: PUSH
4342: LD_INT 22
4344: ST_TO_ADDR
// vc_control := control_manual ;
4345: LD_ADDR_OWVAR 38
4349: PUSH
4350: LD_INT 1
4352: ST_TO_ADDR
// vc_engine := engine_combustion ;
4353: LD_ADDR_OWVAR 39
4357: PUSH
4358: LD_INT 1
4360: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
4361: LD_ADDR_OWVAR 40
4365: PUSH
4366: LD_INT 51
4368: ST_TO_ADDR
// vc_fuel_battery := 50 ;
4369: LD_ADDR_OWVAR 41
4373: PUSH
4374: LD_INT 50
4376: ST_TO_ADDR
// un := CreateVehicle ;
4377: LD_ADDR_VAR 0 5
4381: PUSH
4382: CALL_OW 45
4386: ST_TO_ADDR
// case area of eastArr :
4387: LD_VAR 0 1
4391: PUSH
4392: LD_INT 7
4394: DOUBLE
4395: EQUAL
4396: IFTRUE 4400
4398: GO 4415
4400: POP
// SetDir ( un , 4 ) ; southArr :
4401: LD_VAR 0 5
4405: PPUSH
4406: LD_INT 4
4408: PPUSH
4409: CALL_OW 233
4413: GO 4439
4415: LD_INT 8
4417: DOUBLE
4418: EQUAL
4419: IFTRUE 4423
4421: GO 4438
4423: POP
// SetDir ( un , 5 ) ; end ;
4424: LD_VAR 0 5
4428: PPUSH
4429: LD_INT 5
4431: PPUSH
4432: CALL_OW 233
4436: GO 4439
4438: POP
// PlaceUnitArea ( un , area , false ) ;
4439: LD_VAR 0 5
4443: PPUSH
4444: LD_VAR 0 1
4448: PPUSH
4449: LD_INT 0
4451: PPUSH
4452: CALL_OW 49
// PlaceHumanInUnit ( CreateHuman , un ) ;
4456: CALL_OW 44
4460: PPUSH
4461: LD_VAR 0 5
4465: PPUSH
4466: CALL_OW 52
// SetCargo ( un , mat_cans , 100 ) ;
4470: LD_VAR 0 5
4474: PPUSH
4475: LD_INT 1
4477: PPUSH
4478: LD_INT 100
4480: PPUSH
4481: CALL_OW 290
// ComMoveXY ( un , 106 , 88 ) ;
4485: LD_VAR 0 5
4489: PPUSH
4490: LD_INT 106
4492: PPUSH
4493: LD_INT 88
4495: PPUSH
4496: CALL_OW 111
// AddComUnload ( un ) ;
4500: LD_VAR 0 5
4504: PPUSH
4505: CALL_OW 219
// AddComMoveToArea ( un , area ) ;
4509: LD_VAR 0 5
4513: PPUSH
4514: LD_VAR 0 1
4518: PPUSH
4519: CALL_OW 173
// wait ( 0 0$02 ) ;
4523: LD_INT 70
4525: PPUSH
4526: CALL_OW 67
// end ;
4530: GO 4305
4532: POP
4533: POP
// wait ( 0 0$05 ) ;
4534: LD_INT 175
4536: PPUSH
4537: CALL_OW 67
// while ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) ) do
4541: LD_INT 22
4543: PUSH
4544: LD_INT 6
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PUSH
4551: LD_INT 34
4553: PUSH
4554: LD_INT 51
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PUSH
4561: EMPTY
4562: LIST
4563: LIST
4564: PPUSH
4565: CALL_OW 69
4569: IFFALSE 4774
// begin wait ( 0 0$01 ) ;
4571: LD_INT 35
4573: PPUSH
4574: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) do
4578: LD_ADDR_VAR 0 4
4582: PUSH
4583: LD_INT 22
4585: PUSH
4586: LD_INT 6
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: PUSH
4593: LD_INT 34
4595: PUSH
4596: LD_INT 51
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PPUSH
4607: CALL_OW 69
4611: PUSH
4612: FOR_IN
4613: IFFALSE 4770
// begin if IsInArea ( i , playerBaseArea ) and GetSex ( IsDrivenBy ( i ) ) = sex_male and dialogTrans then
4615: LD_VAR 0 4
4619: PPUSH
4620: LD_INT 2
4622: PPUSH
4623: CALL_OW 308
4627: IFFALSE 4649
4629: PUSH
4630: LD_VAR 0 4
4634: PPUSH
4635: CALL_OW 311
4639: PPUSH
4640: CALL_OW 258
4644: PUSH
4645: LD_INT 1
4647: EQUAL
4648: AND
4649: IFFALSE 4657
4651: PUSH
4652: LD_EXP 5
4656: AND
4657: IFFALSE 4684
// begin Say ( IsDrivenBy ( i ) , Dtran ) ;
4659: LD_VAR 0 4
4663: PPUSH
4664: CALL_OW 311
4668: PPUSH
4669: LD_STRING Dtran
4671: PPUSH
4672: CALL_OW 88
// dialogTrans := false ;
4676: LD_ADDR_EXP 5
4680: PUSH
4681: LD_INT 0
4683: ST_TO_ADDR
// end ; if IsIdle ( i ) then
4684: LD_VAR 0 4
4688: PPUSH
4689: CALL_OW 316
4693: IFFALSE 4709
// ComMoveToArea ( i , area ) ;
4695: LD_VAR 0 4
4699: PPUSH
4700: LD_VAR 0 1
4704: PPUSH
4705: CALL_OW 113
// if IsInArea ( i , area ) and GetCargo ( i , mat_cans ) = 0 then
4709: LD_VAR 0 4
4713: PPUSH
4714: LD_VAR 0 1
4718: PPUSH
4719: CALL_OW 308
4723: IFFALSE 4743
4725: PUSH
4726: LD_VAR 0 4
4730: PPUSH
4731: LD_INT 1
4733: PPUSH
4734: CALL_OW 289
4738: PUSH
4739: LD_INT 0
4741: EQUAL
4742: AND
4743: IFFALSE 4768
// begin RemoveUnit ( IsDrivenBy ( i ) ) ;
4745: LD_VAR 0 4
4749: PPUSH
4750: CALL_OW 311
4754: PPUSH
4755: CALL_OW 64
// RemoveUnit ( i ) ;
4759: LD_VAR 0 4
4763: PPUSH
4764: CALL_OW 64
// end ; end ;
4768: GO 4612
4770: POP
4771: POP
// end ;
4772: GO 4541
// end ;
4774: LD_VAR 0 3
4778: RET
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) do var i , tmp ;
4779: LD_INT 22
4781: PUSH
4782: LD_INT 6
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PUSH
4789: LD_INT 21
4791: PUSH
4792: LD_INT 2
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PUSH
4799: LD_INT 3
4801: PUSH
4802: LD_INT 34
4804: PUSH
4805: LD_INT 51
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: EMPTY
4817: LIST
4818: LIST
4819: LIST
4820: PPUSH
4821: CALL_OW 69
4825: IFFALSE 4988
4827: GO 4829
4829: DISABLE
4830: LD_INT 0
4832: PPUSH
4833: PPUSH
// begin repeat wait ( 0 0$3 ) ;
4834: LD_INT 105
4836: PPUSH
4837: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) ;
4841: LD_ADDR_VAR 0 2
4845: PUSH
4846: LD_INT 22
4848: PUSH
4849: LD_INT 6
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: LD_INT 21
4858: PUSH
4859: LD_INT 2
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: PUSH
4866: LD_INT 50
4868: PUSH
4869: EMPTY
4870: LIST
4871: PUSH
4872: LD_INT 3
4874: PUSH
4875: LD_INT 34
4877: PUSH
4878: LD_INT 51
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: PPUSH
4895: CALL_OW 69
4899: ST_TO_ADDR
// for i in tmp do
4900: LD_ADDR_VAR 0 1
4904: PUSH
4905: LD_VAR 0 2
4909: PUSH
4910: FOR_IN
4911: IFFALSE 4978
// if not HasTask ( i ) and GetLives ( i ) > 250 then
4913: LD_VAR 0 1
4917: PPUSH
4918: CALL_OW 314
4922: NOT
4923: IFFALSE 4940
4925: PUSH
4926: LD_VAR 0 1
4930: PPUSH
4931: CALL_OW 256
4935: PUSH
4936: LD_INT 250
4938: GREATER
4939: AND
4940: IFFALSE 4976
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 6 ] ) , i ) ) ;
4942: LD_VAR 0 1
4946: PPUSH
4947: LD_INT 81
4949: PUSH
4950: LD_INT 6
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: PPUSH
4957: CALL_OW 69
4961: PPUSH
4962: LD_VAR 0 1
4966: PPUSH
4967: CALL_OW 74
4971: PPUSH
4972: CALL_OW 115
4976: GO 4910
4978: POP
4979: POP
// until not tmp ;
4980: LD_VAR 0 2
4984: NOT
4985: IFFALSE 4834
// enable ;
4987: ENABLE
// end ; end_of_file
4988: PPOPN 2
4990: END
// export Commanders , Player , Gladkov , Davidov , Gorki , Stolypin , playerSquad , playerCom ; export function InitCommanders ( commander ) ; var i , skill , tmp , team , veh ; begin
4991: LD_INT 0
4993: PPUSH
4994: PPUSH
4995: PPUSH
4996: PPUSH
4997: PPUSH
4998: PPUSH
// uc_side := your_side ;
4999: LD_ADDR_OWVAR 20
5003: PUSH
5004: LD_OWVAR 2
5008: ST_TO_ADDR
// uc_nation := nation_russian ;
5009: LD_ADDR_OWVAR 21
5013: PUSH
5014: LD_INT 3
5016: ST_TO_ADDR
// Gladkov := NewCharacter ( Gladkov ) ;
5017: LD_ADDR_EXP 30
5021: PUSH
5022: LD_STRING Gladkov
5024: PPUSH
5025: CALL_OW 25
5029: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
5030: LD_ADDR_EXP 31
5034: PUSH
5035: LD_STRING Davidov
5037: PPUSH
5038: CALL_OW 25
5042: ST_TO_ADDR
// Gorki := NewCharacter ( Burlak ) ;
5043: LD_ADDR_EXP 32
5047: PUSH
5048: LD_STRING Burlak
5050: PPUSH
5051: CALL_OW 25
5055: ST_TO_ADDR
// Stolypin := NewCharacter ( Stolypin ) ;
5056: LD_ADDR_EXP 33
5060: PUSH
5061: LD_STRING Stolypin
5063: PPUSH
5064: CALL_OW 25
5068: ST_TO_ADDR
// commanders := [ Gladkov , Davidov , Gorki , Stolypin ] ;
5069: LD_ADDR_EXP 28
5073: PUSH
5074: LD_EXP 30
5078: PUSH
5079: LD_EXP 31
5083: PUSH
5084: LD_EXP 32
5088: PUSH
5089: LD_EXP 33
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: ST_TO_ADDR
// playerCom := commanders [ commander ] ;
5100: LD_ADDR_EXP 35
5104: PUSH
5105: LD_EXP 28
5109: PUSH
5110: LD_VAR 0 1
5114: ARRAY
5115: ST_TO_ADDR
// team := [ ] ;
5116: LD_ADDR_VAR 0 6
5120: PUSH
5121: EMPTY
5122: ST_TO_ADDR
// skill := [ 4 , 3 , 3 ] [ Difficulty ] ;
5123: LD_ADDR_VAR 0 4
5127: PUSH
5128: LD_INT 4
5130: PUSH
5131: LD_INT 3
5133: PUSH
5134: LD_INT 3
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: LIST
5141: PUSH
5142: LD_OWVAR 67
5146: ARRAY
5147: ST_TO_ADDR
// uc_side := 3 ;
5148: LD_ADDR_OWVAR 20
5152: PUSH
5153: LD_INT 3
5155: ST_TO_ADDR
// uc_nation := 3 ;
5156: LD_ADDR_OWVAR 21
5160: PUSH
5161: LD_INT 3
5163: ST_TO_ADDR
// hc_gallery :=  ;
5164: LD_ADDR_OWVAR 33
5168: PUSH
5169: LD_STRING 
5171: ST_TO_ADDR
// hc_name :=  ;
5172: LD_ADDR_OWVAR 26
5176: PUSH
5177: LD_STRING 
5179: ST_TO_ADDR
// hc_importance := 0 ;
5180: LD_ADDR_OWVAR 32
5184: PUSH
5185: LD_INT 0
5187: ST_TO_ADDR
// case playerCom of Gladkov :
5188: LD_EXP 35
5192: PUSH
5193: LD_EXP 30
5197: DOUBLE
5198: EQUAL
5199: IFTRUE 5203
5201: GO 5356
5203: POP
// begin for i := 1 to 6 do
5204: LD_ADDR_VAR 0 3
5208: PUSH
5209: DOUBLE
5210: LD_INT 1
5212: DEC
5213: ST_TO_ADDR
5214: LD_INT 6
5216: PUSH
5217: FOR_TO
5218: IFFALSE 5261
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
5220: LD_INT 0
5222: PPUSH
5223: LD_INT 1
5225: PPUSH
5226: LD_VAR 0 4
5230: PUSH
5231: LD_INT 1
5233: PLUS
5234: PPUSH
5235: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
5239: LD_ADDR_VAR 0 6
5243: PUSH
5244: LD_VAR 0 6
5248: PPUSH
5249: CALL_OW 44
5253: PPUSH
5254: CALL 75485 0 2
5258: ST_TO_ADDR
// end ;
5259: GO 5217
5261: POP
5262: POP
// for i := 1 to 8 do
5263: LD_ADDR_VAR 0 3
5267: PUSH
5268: DOUBLE
5269: LD_INT 1
5271: DEC
5272: ST_TO_ADDR
5273: LD_INT 8
5275: PUSH
5276: FOR_TO
5277: IFFALSE 5326
// begin PrepareHuman ( false , ( i mod 3 ) + 2 , skill ) ;
5279: LD_INT 0
5281: PPUSH
5282: LD_VAR 0 3
5286: PUSH
5287: LD_INT 3
5289: MOD
5290: PUSH
5291: LD_INT 2
5293: PLUS
5294: PPUSH
5295: LD_VAR 0 4
5299: PPUSH
5300: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
5304: LD_ADDR_VAR 0 6
5308: PUSH
5309: LD_VAR 0 6
5313: PPUSH
5314: CALL_OW 44
5318: PPUSH
5319: CALL 75485 0 2
5323: ST_TO_ADDR
// end ;
5324: GO 5276
5326: POP
5327: POP
// SetTech ( tech_bazooka , 3 , state_enabled ) ;
5328: LD_INT 44
5330: PPUSH
5331: LD_INT 3
5333: PPUSH
5334: LD_INT 1
5336: PPUSH
5337: CALL_OW 322
// SetTech ( tech_advmet , 3 , state_enabled ) ;
5341: LD_INT 34
5343: PPUSH
5344: LD_INT 3
5346: PPUSH
5347: LD_INT 1
5349: PPUSH
5350: CALL_OW 322
// end ; Davidov :
5354: GO 6251
5356: LD_EXP 31
5360: DOUBLE
5361: EQUAL
5362: IFTRUE 5366
5364: GO 5667
5366: POP
// begin for i := 1 to 6 do
5367: LD_ADDR_VAR 0 3
5371: PUSH
5372: DOUBLE
5373: LD_INT 1
5375: DEC
5376: ST_TO_ADDR
5377: LD_INT 6
5379: PUSH
5380: FOR_TO
5381: IFFALSE 5424
// begin PrepareHuman ( false , 4 , skill + 1 ) ;
5383: LD_INT 0
5385: PPUSH
5386: LD_INT 4
5388: PPUSH
5389: LD_VAR 0 4
5393: PUSH
5394: LD_INT 1
5396: PLUS
5397: PPUSH
5398: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
5402: LD_ADDR_VAR 0 6
5406: PUSH
5407: LD_VAR 0 6
5411: PPUSH
5412: CALL_OW 44
5416: PPUSH
5417: CALL 75485 0 2
5421: ST_TO_ADDR
// end ;
5422: GO 5380
5424: POP
5425: POP
// for i := 1 to 8 do
5426: LD_ADDR_VAR 0 3
5430: PUSH
5431: DOUBLE
5432: LD_INT 1
5434: DEC
5435: ST_TO_ADDR
5436: LD_INT 8
5438: PUSH
5439: FOR_TO
5440: IFFALSE 5489
// begin PrepareHuman ( false , ( i mod 3 ) + 1 , skill ) ;
5442: LD_INT 0
5444: PPUSH
5445: LD_VAR 0 3
5449: PUSH
5450: LD_INT 3
5452: MOD
5453: PUSH
5454: LD_INT 1
5456: PLUS
5457: PPUSH
5458: LD_VAR 0 4
5462: PPUSH
5463: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
5467: LD_ADDR_VAR 0 6
5471: PUSH
5472: LD_VAR 0 6
5476: PPUSH
5477: CALL_OW 44
5481: PPUSH
5482: CALL 75485 0 2
5486: ST_TO_ADDR
// end ;
5487: GO 5439
5489: POP
5490: POP
// SetTech ( tech_advmet , 3 , state_enabled ) ;
5491: LD_INT 34
5493: PPUSH
5494: LD_INT 3
5496: PPUSH
5497: LD_INT 1
5499: PPUSH
5500: CALL_OW 322
// SetTech ( tech_ai , 3 , state_enabled ) ;
5504: LD_INT 32
5506: PPUSH
5507: LD_INT 3
5509: PPUSH
5510: LD_INT 1
5512: PPUSH
5513: CALL_OW 322
// SetTech ( tech_advai , 3 , state_enabled ) ;
5517: LD_INT 27
5519: PPUSH
5520: LD_INT 3
5522: PPUSH
5523: LD_INT 1
5525: PPUSH
5526: CALL_OW 322
// SetTech ( 30 , 3 , state_enabled ) ;
5530: LD_INT 30
5532: PPUSH
5533: LD_INT 3
5535: PPUSH
5536: LD_INT 1
5538: PPUSH
5539: CALL_OW 322
// SetTech ( 63 , 3 , state_enabled ) ;
5543: LD_INT 63
5545: PPUSH
5546: LD_INT 3
5548: PPUSH
5549: LD_INT 1
5551: PPUSH
5552: CALL_OW 322
// SetTech ( tech_comp1 , 3 , state_enabled ) ;
5556: LD_INT 57
5558: PPUSH
5559: LD_INT 3
5561: PPUSH
5562: LD_INT 1
5564: PPUSH
5565: CALL_OW 322
// SetTech ( tech_comp2 , 3 , state_enabled ) ;
5569: LD_INT 58
5571: PPUSH
5572: LD_INT 3
5574: PPUSH
5575: LD_INT 1
5577: PPUSH
5578: CALL_OW 322
// SetRestrict ( b_lab_full , 3 , state_enabled ) ;
5582: LD_INT 8
5584: PPUSH
5585: LD_INT 3
5587: PPUSH
5588: LD_INT 1
5590: PPUSH
5591: CALL_OW 324
// SetRestrict ( b_lab_computer , 3 , state_enabled ) ;
5595: LD_INT 12
5597: PPUSH
5598: LD_INT 3
5600: PPUSH
5601: LD_INT 1
5603: PPUSH
5604: CALL_OW 324
// SetRestrict ( b_lab_spacetime , 3 , state_enabled ) ;
5608: LD_INT 14
5610: PPUSH
5611: LD_INT 3
5613: PPUSH
5614: LD_INT 1
5616: PPUSH
5617: CALL_OW 324
// SetRestrict ( b_ext_computer , 3 , state_enabled ) ;
5621: LD_INT 24
5623: PPUSH
5624: LD_INT 3
5626: PPUSH
5627: LD_INT 1
5629: PPUSH
5630: CALL_OW 324
// SetRestrict ( b_turret , 3 , state_enabled ) ;
5634: LD_INT 33
5636: PPUSH
5637: LD_INT 3
5639: PPUSH
5640: LD_INT 1
5642: PPUSH
5643: CALL_OW 324
// SetResourceType ( GetBase ( playerDepot ) , 3 , 20 ) ;
5647: LD_INT 1
5649: PPUSH
5650: CALL_OW 274
5654: PPUSH
5655: LD_INT 3
5657: PPUSH
5658: LD_INT 20
5660: PPUSH
5661: CALL_OW 277
// end ; Gorki :
5665: GO 6251
5667: LD_EXP 32
5671: DOUBLE
5672: EQUAL
5673: IFTRUE 5677
5675: GO 5936
5677: POP
// begin for i := 1 to 6 do
5678: LD_ADDR_VAR 0 3
5682: PUSH
5683: DOUBLE
5684: LD_INT 1
5686: DEC
5687: ST_TO_ADDR
5688: LD_INT 6
5690: PUSH
5691: FOR_TO
5692: IFFALSE 5735
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
5694: LD_INT 0
5696: PPUSH
5697: LD_INT 3
5699: PPUSH
5700: LD_VAR 0 4
5704: PUSH
5705: LD_INT 1
5707: PLUS
5708: PPUSH
5709: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
5713: LD_ADDR_VAR 0 6
5717: PUSH
5718: LD_VAR 0 6
5722: PPUSH
5723: CALL_OW 44
5727: PPUSH
5728: CALL 75485 0 2
5732: ST_TO_ADDR
// end ;
5733: GO 5691
5735: POP
5736: POP
// for i := 1 to 8 do
5737: LD_ADDR_VAR 0 3
5741: PUSH
5742: DOUBLE
5743: LD_INT 1
5745: DEC
5746: ST_TO_ADDR
5747: LD_INT 8
5749: PUSH
5750: FOR_TO
5751: IFFALSE 5813
// begin PrepareHuman ( false , [ 1 , 2 , 4 ] [ Rand ( 1 , 3 ) ] , skill ) ;
5753: LD_INT 0
5755: PPUSH
5756: LD_INT 1
5758: PUSH
5759: LD_INT 2
5761: PUSH
5762: LD_INT 4
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: LIST
5769: PUSH
5770: LD_INT 1
5772: PPUSH
5773: LD_INT 3
5775: PPUSH
5776: CALL_OW 12
5780: ARRAY
5781: PPUSH
5782: LD_VAR 0 4
5786: PPUSH
5787: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
5791: LD_ADDR_VAR 0 6
5795: PUSH
5796: LD_VAR 0 6
5800: PPUSH
5801: CALL_OW 44
5805: PPUSH
5806: CALL 75485 0 2
5810: ST_TO_ADDR
// end ;
5811: GO 5750
5813: POP
5814: POP
// SetTech ( tech_rocket , 3 , state_enabled ) ;
5815: LD_INT 40
5817: PPUSH
5818: LD_INT 3
5820: PPUSH
5821: LD_INT 1
5823: PPUSH
5824: CALL_OW 322
// SetTech ( tech_advmet , 3 , state_enabled ) ;
5828: LD_INT 34
5830: PPUSH
5831: LD_INT 3
5833: PPUSH
5834: LD_INT 1
5836: PPUSH
5837: CALL_OW 322
// SetRestrict ( b_ext_rocket , 3 , state_enabled ) ;
5841: LD_INT 18
5843: PPUSH
5844: LD_INT 3
5846: PPUSH
5847: LD_INT 1
5849: PPUSH
5850: CALL_OW 324
// vc_chassis := ru_medium_tracked ;
5854: LD_ADDR_OWVAR 37
5858: PUSH
5859: LD_INT 22
5861: ST_TO_ADDR
// vc_engine := engine_combustion ;
5862: LD_ADDR_OWVAR 39
5866: PUSH
5867: LD_INT 1
5869: ST_TO_ADDR
// vc_control := control_manual ;
5870: LD_ADDR_OWVAR 38
5874: PUSH
5875: LD_INT 1
5877: ST_TO_ADDR
// vc_weapon := ru_rocket_launcher ;
5878: LD_ADDR_OWVAR 40
5882: PUSH
5883: LD_INT 45
5885: ST_TO_ADDR
// vc_fuel_battery := 50 ;
5886: LD_ADDR_OWVAR 41
5890: PUSH
5891: LD_INT 50
5893: ST_TO_ADDR
// veh := CreateVehicle ;
5894: LD_ADDR_VAR 0 7
5898: PUSH
5899: CALL_OW 45
5903: ST_TO_ADDR
// SetMark ( veh , 1 ) ;
5904: LD_VAR 0 7
5908: PPUSH
5909: LD_INT 1
5911: PPUSH
5912: CALL_OW 242
// PlaceUnitXY ( veh , 107 , 83 , false ) ;
5916: LD_VAR 0 7
5920: PPUSH
5921: LD_INT 107
5923: PPUSH
5924: LD_INT 83
5926: PPUSH
5927: LD_INT 0
5929: PPUSH
5930: CALL_OW 48
// end ; Stolypin :
5934: GO 6251
5936: LD_EXP 33
5940: DOUBLE
5941: EQUAL
5942: IFTRUE 5946
5944: GO 6250
5946: POP
// begin for i := 1 to 6 do
5947: LD_ADDR_VAR 0 3
5951: PUSH
5952: DOUBLE
5953: LD_INT 1
5955: DEC
5956: ST_TO_ADDR
5957: LD_INT 6
5959: PUSH
5960: FOR_TO
5961: IFFALSE 6004
// begin PrepareHuman ( false , 2 , skill + 1 ) ;
5963: LD_INT 0
5965: PPUSH
5966: LD_INT 2
5968: PPUSH
5969: LD_VAR 0 4
5973: PUSH
5974: LD_INT 1
5976: PLUS
5977: PPUSH
5978: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
5982: LD_ADDR_VAR 0 6
5986: PUSH
5987: LD_VAR 0 6
5991: PPUSH
5992: CALL_OW 44
5996: PPUSH
5997: CALL 75485 0 2
6001: ST_TO_ADDR
// end ;
6002: GO 5960
6004: POP
6005: POP
// for i := 1 to 8 do
6006: LD_ADDR_VAR 0 3
6010: PUSH
6011: DOUBLE
6012: LD_INT 1
6014: DEC
6015: ST_TO_ADDR
6016: LD_INT 8
6018: PUSH
6019: FOR_TO
6020: IFFALSE 6082
// begin PrepareHuman ( false , [ 1 , 3 , 4 ] [ Rand ( 1 , 3 ) ] , skill ) ;
6022: LD_INT 0
6024: PPUSH
6025: LD_INT 1
6027: PUSH
6028: LD_INT 3
6030: PUSH
6031: LD_INT 4
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: LIST
6038: PUSH
6039: LD_INT 1
6041: PPUSH
6042: LD_INT 3
6044: PPUSH
6045: CALL_OW 12
6049: ARRAY
6050: PPUSH
6051: LD_VAR 0 4
6055: PPUSH
6056: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
6060: LD_ADDR_VAR 0 6
6064: PUSH
6065: LD_VAR 0 6
6069: PPUSH
6070: CALL_OW 44
6074: PPUSH
6075: CALL 75485 0 2
6079: ST_TO_ADDR
// end ;
6080: GO 6019
6082: POP
6083: POP
// SetTech ( tech_advmet , 3 , state_enabled ) ;
6084: LD_INT 34
6086: PPUSH
6087: LD_INT 3
6089: PPUSH
6090: LD_INT 1
6092: PPUSH
6093: CALL_OW 322
// vc_chassis := ru_medium_tracked ;
6097: LD_ADDR_OWVAR 37
6101: PUSH
6102: LD_INT 22
6104: ST_TO_ADDR
// vc_engine := engine_combustion ;
6105: LD_ADDR_OWVAR 39
6109: PUSH
6110: LD_INT 1
6112: ST_TO_ADDR
// vc_control := control_manual ;
6113: LD_ADDR_OWVAR 38
6117: PUSH
6118: LD_INT 1
6120: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
6121: LD_ADDR_OWVAR 40
6125: PUSH
6126: LD_INT 51
6128: ST_TO_ADDR
// vc_fuel_battery := 30 ;
6129: LD_ADDR_OWVAR 41
6133: PUSH
6134: LD_INT 30
6136: ST_TO_ADDR
// veh := CreateVehicle ;
6137: LD_ADDR_VAR 0 7
6141: PUSH
6142: CALL_OW 45
6146: ST_TO_ADDR
// SetCargo ( veh , 1 , 100 ) ;
6147: LD_VAR 0 7
6151: PPUSH
6152: LD_INT 1
6154: PPUSH
6155: LD_INT 100
6157: PPUSH
6158: CALL_OW 290
// PlaceUnitXY ( veh , 107 , 83 , false ) ;
6162: LD_VAR 0 7
6166: PPUSH
6167: LD_INT 107
6169: PPUSH
6170: LD_INT 83
6172: PPUSH
6173: LD_INT 0
6175: PPUSH
6176: CALL_OW 48
// vc_chassis := ru_medium_tracked ;
6180: LD_ADDR_OWVAR 37
6184: PUSH
6185: LD_INT 22
6187: ST_TO_ADDR
// vc_engine := engine_combustion ;
6188: LD_ADDR_OWVAR 39
6192: PUSH
6193: LD_INT 1
6195: ST_TO_ADDR
// vc_control := control_manual ;
6196: LD_ADDR_OWVAR 38
6200: PUSH
6201: LD_INT 1
6203: ST_TO_ADDR
// vc_weapon := ru_crane ;
6204: LD_ADDR_OWVAR 40
6208: PUSH
6209: LD_INT 52
6211: ST_TO_ADDR
// vc_fuel_battery := 30 ;
6212: LD_ADDR_OWVAR 41
6216: PUSH
6217: LD_INT 30
6219: ST_TO_ADDR
// veh := CreateVehicle ;
6220: LD_ADDR_VAR 0 7
6224: PUSH
6225: CALL_OW 45
6229: ST_TO_ADDR
// PlaceUnitXY ( veh , 115 , 96 , false ) ;
6230: LD_VAR 0 7
6234: PPUSH
6235: LD_INT 115
6237: PPUSH
6238: LD_INT 96
6240: PPUSH
6241: LD_INT 0
6243: PPUSH
6244: CALL_OW 48
// end ; end ;
6248: GO 6251
6250: POP
// if isTest then
6251: LD_EXP 1
6255: IFFALSE 6277
// tmp := ShrinkArray ( team , 7 ) else
6257: LD_ADDR_VAR 0 5
6261: PUSH
6262: LD_VAR 0 6
6266: PPUSH
6267: LD_INT 7
6269: PPUSH
6270: CALL 75800 0 2
6274: ST_TO_ADDR
6275: GO 6368
// tmp := CharacterSelection ( text , [ 9 , 8 , 7 ] [ Difficulty ] , [ 9 , 8 , 7 ] [ Difficulty ] , [ sel_not_hired , sel_change_class , sel_changeable ] ^ team , [ class_soldier , class_engineer , class_mechanic , class_scientistic ] ) ;
6277: LD_ADDR_VAR 0 5
6281: PUSH
6282: LD_STRING text
6284: PPUSH
6285: LD_INT 9
6287: PUSH
6288: LD_INT 8
6290: PUSH
6291: LD_INT 7
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: LIST
6298: PUSH
6299: LD_OWVAR 67
6303: ARRAY
6304: PPUSH
6305: LD_INT 9
6307: PUSH
6308: LD_INT 8
6310: PUSH
6311: LD_INT 7
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_OWVAR 67
6323: ARRAY
6324: PPUSH
6325: LD_INT -2
6327: PUSH
6328: LD_INT -5
6330: PUSH
6331: LD_INT -3
6333: PUSH
6334: EMPTY
6335: LIST
6336: LIST
6337: LIST
6338: PUSH
6339: LD_VAR 0 6
6343: ADD
6344: PPUSH
6345: LD_INT 1
6347: PUSH
6348: LD_INT 2
6350: PUSH
6351: LD_INT 3
6353: PUSH
6354: LD_INT 4
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: PPUSH
6363: CALL_OW 42
6367: ST_TO_ADDR
// playerSquad := tmp ;
6368: LD_ADDR_EXP 34
6372: PUSH
6373: LD_VAR 0 5
6377: ST_TO_ADDR
// SetDir ( playerCom , 4 ) ;
6378: LD_EXP 35
6382: PPUSH
6383: LD_INT 4
6385: PPUSH
6386: CALL_OW 233
// PlaceUnitArea ( playerCom , eastArr , false ) ;
6390: LD_EXP 35
6394: PPUSH
6395: LD_INT 7
6397: PPUSH
6398: LD_INT 0
6400: PPUSH
6401: CALL_OW 49
// ComHold ( playerCom ) ;
6405: LD_EXP 35
6409: PPUSH
6410: CALL_OW 140
// for i := 1 to [ 5 , 4 , 4 ] [ Difficulty ] do
6414: LD_ADDR_VAR 0 3
6418: PUSH
6419: DOUBLE
6420: LD_INT 1
6422: DEC
6423: ST_TO_ADDR
6424: LD_INT 5
6426: PUSH
6427: LD_INT 4
6429: PUSH
6430: LD_INT 4
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: LIST
6437: PUSH
6438: LD_OWVAR 67
6442: ARRAY
6443: PUSH
6444: FOR_TO
6445: IFFALSE 6511
// begin uc_side := 6 ;
6447: LD_ADDR_OWVAR 20
6451: PUSH
6452: LD_INT 6
6454: ST_TO_ADDR
// uc_nation := nation_russian ;
6455: LD_ADDR_OWVAR 21
6459: PUSH
6460: LD_INT 3
6462: ST_TO_ADDR
// PrepareHuman ( false , i mod 4 + 1 , skill ) ;
6463: LD_INT 0
6465: PPUSH
6466: LD_VAR 0 3
6470: PUSH
6471: LD_INT 4
6473: MOD
6474: PUSH
6475: LD_INT 1
6477: PLUS
6478: PPUSH
6479: LD_VAR 0 4
6483: PPUSH
6484: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 104 , 88 , 3 , false ) ;
6488: CALL_OW 44
6492: PPUSH
6493: LD_INT 104
6495: PPUSH
6496: LD_INT 88
6498: PPUSH
6499: LD_INT 3
6501: PPUSH
6502: LD_INT 0
6504: PPUSH
6505: CALL_OW 50
// end ;
6509: GO 6444
6511: POP
6512: POP
// end ;
6513: LD_VAR 0 2
6517: RET
// export Popov ; export function InitAction ; var commander ; begin
6518: LD_INT 0
6520: PPUSH
6521: PPUSH
// ChangeSideFog ( 6 , 3 ) ;
6522: LD_INT 6
6524: PPUSH
6525: LD_INT 3
6527: PPUSH
6528: CALL_OW 343
// CenterNowOnXY ( 1 , 1 ) ;
6532: LD_INT 1
6534: PPUSH
6535: LD_INT 1
6537: PPUSH
6538: CALL_OW 86
// uc_side := 6 ;
6542: LD_ADDR_OWVAR 20
6546: PUSH
6547: LD_INT 6
6549: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
6550: LD_ADDR_EXP 36
6554: PUSH
6555: LD_STRING Popov
6557: PPUSH
6558: CALL_OW 25
6562: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
6563: LD_ADDR_OWVAR 67
6567: PUSH
6568: LD_INT 0
6570: PPUSH
6571: CALL_OW 426
6575: ST_TO_ADDR
// if not Difficulty then
6576: LD_OWVAR 67
6580: NOT
6581: IFFALSE 6591
// Difficulty := 2 ;
6583: LD_ADDR_OWVAR 67
6587: PUSH
6588: LD_INT 2
6590: ST_TO_ADDR
// commander := GetMultiplayerSetting ( 1 ) ;
6591: LD_ADDR_VAR 0 2
6595: PUSH
6596: LD_INT 1
6598: PPUSH
6599: CALL_OW 426
6603: ST_TO_ADDR
// if not commander then
6604: LD_VAR 0 2
6608: NOT
6609: IFFALSE 6619
// commander := 1 ;
6611: LD_ADDR_VAR 0 2
6615: PUSH
6616: LD_INT 1
6618: ST_TO_ADDR
// InitCommanders ( commander ) ;
6619: LD_VAR 0 2
6623: PPUSH
6624: CALL 4991 0 1
// end ;
6628: LD_VAR 0 1
6632: RET
// every 0 0$03 do var i ;
6633: GO 6635
6635: DISABLE
6636: LD_INT 0
6638: PPUSH
// begin repeat wait ( rand ( 1 1$25 , 3 3$00 ) ) ;
6639: LD_INT 2975
6641: PPUSH
6642: LD_INT 6300
6644: PPUSH
6645: CALL_OW 12
6649: PPUSH
6650: CALL_OW 67
// for i := 1 to 2 do
6654: LD_ADDR_VAR 0 1
6658: PUSH
6659: DOUBLE
6660: LD_INT 1
6662: DEC
6663: ST_TO_ADDR
6664: LD_INT 2
6666: PUSH
6667: FOR_TO
6668: IFFALSE 6764
// begin repeat wait ( 0 0$3 ) ;
6670: LD_INT 105
6672: PPUSH
6673: CALL_OW 67
// until PlaceUnitArea ( playerSquad [ 1 ] , eastArr , false ) ;
6677: LD_EXP 34
6681: PUSH
6682: LD_INT 1
6684: ARRAY
6685: PPUSH
6686: LD_INT 7
6688: PPUSH
6689: LD_INT 0
6691: PPUSH
6692: CALL_OW 49
6696: IFFALSE 6670
// ComMoveXY ( playerSquad [ 1 ] , 107 , 88 ) ;
6698: LD_EXP 34
6702: PUSH
6703: LD_INT 1
6705: ARRAY
6706: PPUSH
6707: LD_INT 107
6709: PPUSH
6710: LD_INT 88
6712: PPUSH
6713: CALL_OW 111
// SetSide ( playerSquad [ 1 ] , 3 ) ;
6717: LD_EXP 34
6721: PUSH
6722: LD_INT 1
6724: ARRAY
6725: PPUSH
6726: LD_INT 3
6728: PPUSH
6729: CALL_OW 235
// playerSquad := Delete ( playerSquad , 1 ) ;
6733: LD_ADDR_EXP 34
6737: PUSH
6738: LD_EXP 34
6742: PPUSH
6743: LD_INT 1
6745: PPUSH
6746: CALL_OW 3
6750: ST_TO_ADDR
// if not playerSquad then
6751: LD_EXP 34
6755: NOT
6756: IFFALSE 6762
// exit ;
6758: POP
6759: POP
6760: GO 6773
// end ;
6762: GO 6667
6764: POP
6765: POP
// until not playerSquad ;
6766: LD_EXP 34
6770: NOT
6771: IFFALSE 6639
// end ; end_of_file
6773: PPOPN 1
6775: END
// export function Action ; var i ; begin
6776: LD_INT 0
6778: PPUSH
6779: PPUSH
// if not isTest then
6780: LD_EXP 1
6784: NOT
6785: IFFALSE 6794
// Query ( task ) ;
6787: LD_STRING task
6789: PPUSH
6790: CALL_OW 97
// PlaceSeeing ( 105 , 84 , 3 , - 30 ) ;
6794: LD_INT 105
6796: PPUSH
6797: LD_INT 84
6799: PPUSH
6800: LD_INT 3
6802: PPUSH
6803: LD_INT 30
6805: NEG
6806: PPUSH
6807: CALL_OW 330
// RemoveSeeing ( 105 , 84 , 3 ) ;
6811: LD_INT 105
6813: PPUSH
6814: LD_INT 84
6816: PPUSH
6817: LD_INT 3
6819: PPUSH
6820: CALL_OW 331
// InGameOn ;
6824: CALL_OW 8
// CenterNowOnXY ( 128 , 64 ) ;
6828: LD_INT 128
6830: PPUSH
6831: LD_INT 64
6833: PPUSH
6834: CALL_OW 86
// if isTest then
6838: LD_EXP 1
6842: IFFALSE 6852
// dialogue_skipped := true ;
6844: LD_ADDR_OWVAR 59
6848: PUSH
6849: LD_INT 1
6851: ST_TO_ADDR
// SayRadio ( Popov , DR1 ) ;
6852: LD_EXP 36
6856: PPUSH
6857: LD_STRING DR1
6859: PPUSH
6860: CALL_OW 94
// SayRadio ( Popov , DR2 ) ;
6864: LD_EXP 36
6868: PPUSH
6869: LD_STRING DR2
6871: PPUSH
6872: CALL_OW 94
// SayRadio ( Popov , DR3 ) ;
6876: LD_EXP 36
6880: PPUSH
6881: LD_STRING DR3
6883: PPUSH
6884: CALL_OW 94
// InGameOff ;
6888: CALL_OW 9
// ChangeMissionObjectives ( C1 ) ;
6892: LD_STRING C1
6894: PPUSH
6895: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
6899: LD_INT 35
6901: PPUSH
6902: CALL_OW 67
// until FilterUnitsInArea ( playerBaseArea , [ f_side , 3 ] ) ;
6906: LD_INT 2
6908: PPUSH
6909: LD_INT 22
6911: PUSH
6912: LD_INT 3
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PPUSH
6919: CALL_OW 70
6923: IFFALSE 6899
// for i in FilterUnitsInArea ( playerBaseArea , [ f_side , 6 ] ) do
6925: LD_ADDR_VAR 0 2
6929: PUSH
6930: LD_INT 2
6932: PPUSH
6933: LD_INT 22
6935: PUSH
6936: LD_INT 6
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PPUSH
6943: CALL_OW 70
6947: PUSH
6948: FOR_IN
6949: IFFALSE 6965
// SetSide ( i , 3 ) ;
6951: LD_VAR 0 2
6955: PPUSH
6956: LD_INT 3
6958: PPUSH
6959: CALL_OW 235
6963: GO 6948
6965: POP
6966: POP
// if not isTest then
6967: LD_EXP 1
6971: NOT
6972: IFFALSE 6981
// Query ( support ) ;
6974: LD_STRING support
6976: PPUSH
6977: CALL_OW 97
// SetArtifactUse ( 3 , art_use_exclamation , art_instant , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ) ;
6981: LD_INT 3
6983: PPUSH
6984: LD_INT 12
6986: PPUSH
6987: LD_INT 2
6989: PPUSH
6990: LD_INT 22
6992: PUSH
6993: LD_INT 3
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: LD_INT 30
7002: PUSH
7003: LD_INT 0
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: PPUSH
7014: CALL_OW 69
7018: PUSH
7019: LD_INT 1
7021: ARRAY
7022: PPUSH
7023: CALL_OW 468
// if playerCom = Stolypin then
7027: LD_EXP 35
7031: PUSH
7032: LD_EXP 33
7036: EQUAL
7037: IFFALSE 7066
// PrepareConvoy ( eastArr , [ 3 , 3 , 2 ] [ Difficulty ] ) ;
7039: LD_INT 7
7041: PPUSH
7042: LD_INT 3
7044: PUSH
7045: LD_INT 3
7047: PUSH
7048: LD_INT 2
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: LIST
7055: PUSH
7056: LD_OWVAR 67
7060: ARRAY
7061: PPUSH
7062: CALL 4285 0 2
// end ;
7066: LD_VAR 0 1
7070: RET
// every 0 0$01 trigger tick > [ 12 12$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] do var n ;
7071: LD_OWVAR 1
7075: PUSH
7076: LD_INT 25200
7078: PUSH
7079: LD_INT 23100
7081: PUSH
7082: LD_INT 21000
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: LIST
7089: PUSH
7090: LD_OWVAR 67
7094: ARRAY
7095: GREATER
7096: IFFALSE 7225
7098: GO 7100
7100: DISABLE
7101: LD_INT 0
7103: PPUSH
// begin n := [ 3 , 4 , 5 ] [ Difficulty ] ;
7104: LD_ADDR_VAR 0 1
7108: PUSH
7109: LD_INT 3
7111: PUSH
7112: LD_INT 4
7114: PUSH
7115: LD_INT 5
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: LIST
7122: PUSH
7123: LD_OWVAR 67
7127: ARRAY
7128: ST_TO_ADDR
// repeat wait ( rand ( 0 0$30 , 2 2$00 ) ) ;
7129: LD_INT 1050
7131: PPUSH
7132: LD_INT 4200
7134: PPUSH
7135: CALL_OW 12
7139: PPUSH
7140: CALL_OW 67
// SayRadio ( Popov , DR5 ) ;
7144: LD_EXP 36
7148: PPUSH
7149: LD_STRING DR5
7151: PPUSH
7152: CALL_OW 94
// PrepareAlfaAttack ( northArr , n ) ;
7156: LD_INT 9
7158: PPUSH
7159: LD_VAR 0 1
7163: PPUSH
7164: CALL 1292 0 2
// wait ( rand ( 4 4$00 , 6 6$00 ) ) ;
7168: LD_INT 8400
7170: PPUSH
7171: LD_INT 12600
7173: PPUSH
7174: CALL_OW 12
7178: PPUSH
7179: CALL_OW 67
// n := n + 1 ;
7183: LD_ADDR_VAR 0 1
7187: PUSH
7188: LD_VAR 0 1
7192: PUSH
7193: LD_INT 1
7195: PLUS
7196: ST_TO_ADDR
// if n > 12 then
7197: LD_VAR 0 1
7201: PUSH
7202: LD_INT 12
7204: GREATER
7205: IFFALSE 7215
// n := 12 ;
7207: LD_ADDR_VAR 0 1
7211: PUSH
7212: LD_INT 12
7214: ST_TO_ADDR
// until tick >= 120 120$00 ;
7215: LD_OWVAR 1
7219: PUSH
7220: LD_INT 252000
7222: GREATEREQUAL
7223: IFFALSE 7129
// end ;
7225: PPOPN 1
7227: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 do
7228: LD_INT 22
7230: PUSH
7231: LD_INT 1
7233: PUSH
7234: EMPTY
7235: LIST
7236: LIST
7237: PUSH
7238: LD_INT 21
7240: PUSH
7241: LD_INT 1
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: PUSH
7248: LD_INT 50
7250: PUSH
7251: EMPTY
7252: LIST
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: LIST
7258: PPUSH
7259: CALL_OW 69
7263: PUSH
7264: LD_INT 0
7266: EQUAL
7267: IFFALSE 7310
7269: PUSH
7270: LD_INT 22
7272: PUSH
7273: LD_INT 4
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PUSH
7280: LD_INT 21
7282: PUSH
7283: LD_INT 1
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: PUSH
7290: LD_INT 50
7292: PUSH
7293: EMPTY
7294: LIST
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: LIST
7300: PPUSH
7301: CALL_OW 69
7305: PUSH
7306: LD_INT 0
7308: EQUAL
7309: AND
7310: IFFALSE 7616
7312: GO 7314
7314: DISABLE
// begin DialogueOn ;
7315: CALL_OW 6
// SayRadio ( Popov , DR7 ) ;
7319: LD_EXP 36
7323: PPUSH
7324: LD_STRING DR7
7326: PPUSH
7327: CALL_OW 94
// case playerCom of Gorki :
7331: LD_EXP 35
7335: PUSH
7336: LD_EXP 32
7340: DOUBLE
7341: EQUAL
7342: IFTRUE 7346
7344: GO 7356
7346: POP
// SetAchievement ( ACH_GORKI ) ; Stolypin :
7347: LD_STRING ACH_GORKI
7349: PPUSH
7350: CALL_OW 543
7354: GO 7417
7356: LD_EXP 33
7360: DOUBLE
7361: EQUAL
7362: IFTRUE 7366
7364: GO 7376
7366: POP
// SetAchievement ( ACH_STOLYP ) ; Davidov :
7367: LD_STRING ACH_STOLYP
7369: PPUSH
7370: CALL_OW 543
7374: GO 7417
7376: LD_EXP 31
7380: DOUBLE
7381: EQUAL
7382: IFTRUE 7386
7384: GO 7396
7386: POP
// SetAchievement ( ACH_DAVIDOV ) ; Gladkov :
7387: LD_STRING ACH_DAVIDOV
7389: PPUSH
7390: CALL_OW 543
7394: GO 7417
7396: LD_EXP 30
7400: DOUBLE
7401: EQUAL
7402: IFTRUE 7406
7404: GO 7416
7406: POP
// SetAchievement ( ACH_GLADKOV ) ; end ;
7407: LD_STRING ACH_GLADKOV
7409: PPUSH
7410: CALL_OW 543
7414: GO 7417
7416: POP
// if not callUsed then
7417: LD_EXP 2
7421: NOT
7422: IFFALSE 7431
// SetAchievement ( ACH_NOSUPP ) ;
7424: LD_STRING ACH_NOSUPP
7426: PPUSH
7427: CALL_OW 543
// if ( tick < [ 55 55$30 , 45 45$30 , 42 42$30 ] [ Difficulty ] ) then
7431: LD_OWVAR 1
7435: PUSH
7436: LD_INT 116550
7438: PUSH
7439: LD_INT 95550
7441: PUSH
7442: LD_INT 89250
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: LIST
7449: PUSH
7450: LD_OWVAR 67
7454: ARRAY
7455: LESS
7456: IFFALSE 7470
// AddMedal ( med1 , 1 ) else
7458: LD_STRING med1
7460: PPUSH
7461: LD_INT 1
7463: PPUSH
7464: CALL_OW 101
7468: GO 7481
// AddMedal ( med1 , - 1 ) ;
7470: LD_STRING med1
7472: PPUSH
7473: LD_INT 1
7475: NEG
7476: PPUSH
7477: CALL_OW 101
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) = 0 then
7481: LD_INT 81
7483: PUSH
7484: LD_INT 3
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: LD_INT 21
7493: PUSH
7494: LD_INT 3
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PPUSH
7505: CALL_OW 69
7509: PUSH
7510: LD_INT 0
7512: EQUAL
7513: IFFALSE 7527
// AddMedal ( med3 , 1 ) else
7515: LD_STRING med3
7517: PPUSH
7518: LD_INT 1
7520: PPUSH
7521: CALL_OW 101
7525: GO 7538
// AddMedal ( med3 , - 1 ) ;
7527: LD_STRING med3
7529: PPUSH
7530: LD_INT 1
7532: NEG
7533: PPUSH
7534: CALL_OW 101
// if playerLoss = 0 then
7538: LD_EXP 6
7542: PUSH
7543: LD_INT 0
7545: EQUAL
7546: IFFALSE 7560
// AddMedal ( med2 , 1 ) else
7548: LD_STRING med2
7550: PPUSH
7551: LD_INT 1
7553: PPUSH
7554: CALL_OW 101
7558: GO 7605
// if playerLoss > 0 and playerLoss < 3 then
7560: LD_EXP 6
7564: PUSH
7565: LD_INT 0
7567: GREATER
7568: IFFALSE 7580
7570: PUSH
7571: LD_EXP 6
7575: PUSH
7576: LD_INT 3
7578: LESS
7579: AND
7580: IFFALSE 7594
// AddMedal ( med2 , 2 ) else
7582: LD_STRING med2
7584: PPUSH
7585: LD_INT 2
7587: PPUSH
7588: CALL_OW 101
7592: GO 7605
// AddMedal ( med2 , - 1 ) ;
7594: LD_STRING med2
7596: PPUSH
7597: LD_INT 1
7599: NEG
7600: PPUSH
7601: CALL_OW 101
// GiveMedals ( MAIN ) ;
7605: LD_STRING MAIN
7607: PPUSH
7608: CALL_OW 102
// YouWin ;
7612: CALL_OW 103
// end ;
7616: END
// every 0 0$01 trigger IsDead ( playerCom ) do
7617: LD_EXP 35
7621: PPUSH
7622: CALL_OW 301
7626: IFFALSE 7693
7628: GO 7630
7630: DISABLE
// begin if IsOk ( Jakes ) then
7631: LD_EXP 3
7635: PPUSH
7636: CALL_OW 302
7640: IFFALSE 7656
// SayRadio ( Jakes , DJ5 ) else
7642: LD_EXP 3
7646: PPUSH
7647: LD_STRING DJ5
7649: PPUSH
7650: CALL_OW 94
7654: GO 7679
// if IsOk ( Sylvia ) then
7656: LD_EXP 4
7660: PPUSH
7661: CALL_OW 302
7665: IFFALSE 7679
// SayRadio ( Sylvia , DS5 ) ;
7667: LD_EXP 4
7671: PPUSH
7672: LD_STRING DS5
7674: PPUSH
7675: CALL_OW 94
// wait ( 0 0$01 ) ;
7679: LD_INT 35
7681: PPUSH
7682: CALL_OW 67
// YouLost ( dead ) ;
7686: LD_STRING dead
7688: PPUSH
7689: CALL_OW 104
// end ;
7693: END
// every 0 0$01 trigger IsDead ( playerDepot ) and not isTest do
7694: LD_INT 1
7696: PPUSH
7697: CALL_OW 301
7701: IFFALSE 7710
7703: PUSH
7704: LD_EXP 1
7708: NOT
7709: AND
7710: IFFALSE 7777
7712: GO 7714
7714: DISABLE
// begin if IsOk ( Sylvia ) then
7715: LD_EXP 4
7719: PPUSH
7720: CALL_OW 302
7724: IFFALSE 7740
// SayRadio ( Sylvia , DS5 ) else
7726: LD_EXP 4
7730: PPUSH
7731: LD_STRING DS5
7733: PPUSH
7734: CALL_OW 94
7738: GO 7763
// if IsOk ( Jakes ) then
7740: LD_EXP 3
7744: PPUSH
7745: CALL_OW 302
7749: IFFALSE 7763
// SayRadio ( Jakes , DJ5 ) ;
7751: LD_EXP 3
7755: PPUSH
7756: LD_STRING DJ5
7758: PPUSH
7759: CALL_OW 94
// wait ( 0 0$01 ) ;
7763: LD_INT 35
7765: PPUSH
7766: CALL_OW 67
// YouLost ( depot ) ;
7770: LD_STRING depot
7772: PPUSH
7773: CALL_OW 104
// end ; end_of_file
7777: END
// on ArtifactUsed ( side , button_type , x , y ) do var side1 , side4 ;
7778: LD_INT 0
7780: PPUSH
7781: PPUSH
// begin if call and tick < 12 12$00 then
7782: LD_EXP 7
7786: IFFALSE 7798
7788: PUSH
7789: LD_OWVAR 1
7793: PUSH
7794: LD_INT 25200
7796: LESS
7797: AND
7798: IFFALSE 7966
// case query ( call1 ) of 1 :
7800: LD_STRING call1
7802: PPUSH
7803: CALL_OW 97
7807: PUSH
7808: LD_INT 1
7810: DOUBLE
7811: EQUAL
7812: IFTRUE 7816
7814: GO 7954
7816: POP
// begin callUsed := true ;
7817: LD_ADDR_EXP 2
7821: PUSH
7822: LD_INT 1
7824: ST_TO_ADDR
// SetArtifactUse ( 3 , art_use_exclamation , art_gray , playerDepot ) ;
7825: LD_INT 3
7827: PPUSH
7828: LD_INT 12
7830: PPUSH
7831: LD_INT 1
7833: PPUSH
7834: LD_INT 1
7836: PPUSH
7837: CALL_OW 468
// call := false ;
7841: LD_ADDR_EXP 7
7845: PUSH
7846: LD_INT 0
7848: ST_TO_ADDR
// SayRadio ( Popov , DR6 ) ;
7849: LD_EXP 36
7853: PPUSH
7854: LD_STRING DR6
7856: PPUSH
7857: CALL_OW 94
// wait ( rand ( 1 1$00 , 3 3$00 ) ) ;
7861: LD_INT 2100
7863: PPUSH
7864: LD_INT 6300
7866: PPUSH
7867: CALL_OW 12
7871: PPUSH
7872: CALL_OW 67
// PrepareConvoy ( [ eastArr , southArr ] [ rand ( 1 , 2 ) ] , rand ( 1 , 2 ) ) ;
7876: LD_INT 7
7878: PUSH
7879: LD_INT 8
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: PUSH
7886: LD_INT 1
7888: PPUSH
7889: LD_INT 2
7891: PPUSH
7892: CALL_OW 12
7896: ARRAY
7897: PPUSH
7898: LD_INT 1
7900: PPUSH
7901: LD_INT 2
7903: PPUSH
7904: CALL_OW 12
7908: PPUSH
7909: CALL 4285 0 2
// wait ( rand ( 6 6$00 , 8 8$00 ) ) ;
7913: LD_INT 12600
7915: PPUSH
7916: LD_INT 16800
7918: PPUSH
7919: CALL_OW 12
7923: PPUSH
7924: CALL_OW 67
// call := true ;
7928: LD_ADDR_EXP 7
7932: PUSH
7933: LD_INT 1
7935: ST_TO_ADDR
// SetArtifactUse ( 3 , art_use_exclamation , art_instant , playerDepot ) ;
7936: LD_INT 3
7938: PPUSH
7939: LD_INT 12
7941: PPUSH
7942: LD_INT 2
7944: PPUSH
7945: LD_INT 1
7947: PPUSH
7948: CALL_OW 468
// end ; 2 :
7952: GO 7966
7954: LD_INT 2
7956: DOUBLE
7957: EQUAL
7958: IFTRUE 7962
7960: GO 7965
7962: POP
// ; end ;
7963: GO 7966
7965: POP
// if call and tick >= 12 12$00 then
7966: LD_EXP 7
7970: IFFALSE 7982
7972: PUSH
7973: LD_OWVAR 1
7977: PUSH
7978: LD_INT 25200
7980: GREATEREQUAL
7981: AND
7982: IFFALSE 8429
// case query ( call2 ) of 1 :
7984: LD_STRING call2
7986: PPUSH
7987: CALL_OW 97
7991: PUSH
7992: LD_INT 1
7994: DOUBLE
7995: EQUAL
7996: IFTRUE 8000
7998: GO 8250
8000: POP
// begin callUsed := true ;
8001: LD_ADDR_EXP 2
8005: PUSH
8006: LD_INT 1
8008: ST_TO_ADDR
// call := false ;
8009: LD_ADDR_EXP 7
8013: PUSH
8014: LD_INT 0
8016: ST_TO_ADDR
// side1 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] ] ) ;
8017: LD_ADDR_VAR 0 5
8021: PUSH
8022: LD_INT 22
8024: PUSH
8025: LD_INT 1
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: PUSH
8032: LD_INT 50
8034: PUSH
8035: EMPTY
8036: LIST
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PPUSH
8042: CALL_OW 69
8046: ST_TO_ADDR
// side4 := FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] ] ) ;
8047: LD_ADDR_VAR 0 6
8051: PUSH
8052: LD_INT 22
8054: PUSH
8055: LD_INT 4
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: LD_INT 50
8064: PUSH
8065: EMPTY
8066: LIST
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PPUSH
8072: CALL_OW 69
8076: ST_TO_ADDR
// if side1 and side4 then
8077: LD_VAR 0 5
8081: IFFALSE 8089
8083: PUSH
8084: LD_VAR 0 6
8088: AND
8089: IFFALSE 8139
// PrepareAttack ( [ eastArr , southArr ] [ rand ( 1 , 2 ) ] , [ 6 , 6 , 5 ] [ Difficulty ] ) else
8091: LD_INT 7
8093: PUSH
8094: LD_INT 8
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: PUSH
8101: LD_INT 1
8103: PPUSH
8104: LD_INT 2
8106: PPUSH
8107: CALL_OW 12
8111: ARRAY
8112: PPUSH
8113: LD_INT 6
8115: PUSH
8116: LD_INT 6
8118: PUSH
8119: LD_INT 5
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: LIST
8126: PUSH
8127: LD_OWVAR 67
8131: ARRAY
8132: PPUSH
8133: CALL 3994 0 2
8137: GO 8209
// if not side1 then
8139: LD_VAR 0 5
8143: NOT
8144: IFFALSE 8175
// PrepareAttack ( southArr , [ 7 , 6 , 5 ] [ Difficulty ] ) else
8146: LD_INT 8
8148: PPUSH
8149: LD_INT 7
8151: PUSH
8152: LD_INT 6
8154: PUSH
8155: LD_INT 5
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: LIST
8162: PUSH
8163: LD_OWVAR 67
8167: ARRAY
8168: PPUSH
8169: CALL 3994 0 2
8173: GO 8209
// if not side4 then
8175: LD_VAR 0 6
8179: NOT
8180: IFFALSE 8209
// PrepareAttack ( eastArr , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
8182: LD_INT 7
8184: PPUSH
8185: LD_INT 6
8187: PUSH
8188: LD_INT 6
8190: PUSH
8191: LD_INT 5
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: LIST
8198: PUSH
8199: LD_OWVAR 67
8203: ARRAY
8204: PPUSH
8205: CALL 3994 0 2
// wait ( rand ( 5 5$00 , 8 8$00 ) ) ;
8209: LD_INT 10500
8211: PPUSH
8212: LD_INT 16800
8214: PPUSH
8215: CALL_OW 12
8219: PPUSH
8220: CALL_OW 67
// call := true ;
8224: LD_ADDR_EXP 7
8228: PUSH
8229: LD_INT 1
8231: ST_TO_ADDR
// SetArtifactUse ( 3 , art_use_exclamation , art_instant , playerDepot ) ;
8232: LD_INT 3
8234: PPUSH
8235: LD_INT 12
8237: PPUSH
8238: LD_INT 2
8240: PPUSH
8241: LD_INT 1
8243: PPUSH
8244: CALL_OW 468
// end ; 2 :
8248: GO 8429
8250: LD_INT 2
8252: DOUBLE
8253: EQUAL
8254: IFTRUE 8258
8256: GO 8417
8258: POP
// begin callUsed := true ;
8259: LD_ADDR_EXP 2
8263: PUSH
8264: LD_INT 1
8266: ST_TO_ADDR
// SetArtifactUse ( 3 , art_use_exclamation , art_gray , playerDepot ) ;
8267: LD_INT 3
8269: PPUSH
8270: LD_INT 12
8272: PPUSH
8273: LD_INT 1
8275: PPUSH
8276: LD_INT 1
8278: PPUSH
8279: CALL_OW 468
// call := false ;
8283: LD_ADDR_EXP 7
8287: PUSH
8288: LD_INT 0
8290: ST_TO_ADDR
// SayRadio ( Popov , DR6 ) ;
8291: LD_EXP 36
8295: PPUSH
8296: LD_STRING DR6
8298: PPUSH
8299: CALL_OW 94
// wait ( rand ( 1 1$00 , 3 3$00 ) ) ;
8303: LD_INT 2100
8305: PPUSH
8306: LD_INT 6300
8308: PPUSH
8309: CALL_OW 12
8313: PPUSH
8314: CALL_OW 67
// PrepareConvoy ( [ eastArr , southArr ] [ rand ( 1 , 2 ) ] , [ 3 , 2 , 2 ] [ Difficulty ] - rand ( 0 , 1 ) ) ;
8318: LD_INT 7
8320: PUSH
8321: LD_INT 8
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: PUSH
8328: LD_INT 1
8330: PPUSH
8331: LD_INT 2
8333: PPUSH
8334: CALL_OW 12
8338: ARRAY
8339: PPUSH
8340: LD_INT 3
8342: PUSH
8343: LD_INT 2
8345: PUSH
8346: LD_INT 2
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: LIST
8353: PUSH
8354: LD_OWVAR 67
8358: ARRAY
8359: PUSH
8360: LD_INT 0
8362: PPUSH
8363: LD_INT 1
8365: PPUSH
8366: CALL_OW 12
8370: MINUS
8371: PPUSH
8372: CALL 4285 0 2
// wait ( rand ( 6 6$00 , 8 8$00 ) ) ;
8376: LD_INT 12600
8378: PPUSH
8379: LD_INT 16800
8381: PPUSH
8382: CALL_OW 12
8386: PPUSH
8387: CALL_OW 67
// call := true ;
8391: LD_ADDR_EXP 7
8395: PUSH
8396: LD_INT 1
8398: ST_TO_ADDR
// SetArtifactUse ( 3 , art_use_exclamation , art_instant , playerDepot ) ;
8399: LD_INT 3
8401: PPUSH
8402: LD_INT 12
8404: PPUSH
8405: LD_INT 2
8407: PPUSH
8408: LD_INT 1
8410: PPUSH
8411: CALL_OW 468
// end ; 3 :
8415: GO 8429
8417: LD_INT 3
8419: DOUBLE
8420: EQUAL
8421: IFTRUE 8425
8423: GO 8428
8425: POP
// ; end ;
8426: GO 8429
8428: POP
// end ;
8429: PPOPN 6
8431: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8432: LD_VAR 0 1
8436: PPUSH
8437: CALL 31927 0 1
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) and not alfaNorthTriggered then
8441: LD_VAR 0 1
8445: PUSH
8446: LD_INT 22
8448: PUSH
8449: LD_INT 1
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: PUSH
8456: LD_INT 21
8458: PUSH
8459: LD_INT 3
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PPUSH
8470: CALL_OW 69
8474: IN
8475: IFFALSE 8484
8477: PUSH
8478: LD_EXP 8
8482: NOT
8483: AND
8484: IFFALSE 8540
// begin alfaNorthTriggered := true ;
8486: LD_ADDR_EXP 8
8490: PUSH
8491: LD_INT 1
8493: ST_TO_ADDR
// SayRadio ( Jakes , DJ3 ) ;
8494: LD_EXP 3
8498: PPUSH
8499: LD_STRING DJ3
8501: PPUSH
8502: CALL_OW 94
// wait ( 0 0$30 ) ;
8506: LD_INT 1050
8508: PPUSH
8509: CALL_OW 67
// PrepareAlfaAttack ( northArr , [ 6 , 7 , 8 ] [ Difficulty ] ) ;
8513: LD_INT 9
8515: PPUSH
8516: LD_INT 6
8518: PUSH
8519: LD_INT 7
8521: PUSH
8522: LD_INT 8
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: LIST
8529: PUSH
8530: LD_OWVAR 67
8534: ARRAY
8535: PPUSH
8536: CALL 1292 0 2
// end ; if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) and not alfaSouthTriggered then
8540: LD_VAR 0 1
8544: PUSH
8545: LD_INT 22
8547: PUSH
8548: LD_INT 4
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: PUSH
8555: LD_INT 21
8557: PUSH
8558: LD_INT 3
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: PPUSH
8569: CALL_OW 69
8573: IN
8574: IFFALSE 8583
8576: PUSH
8577: LD_EXP 9
8581: NOT
8582: AND
8583: IFFALSE 8639
// begin alfaSouthTriggered := true ;
8585: LD_ADDR_EXP 9
8589: PUSH
8590: LD_INT 1
8592: ST_TO_ADDR
// SayRadio ( Sylvia , DS4 ) ;
8593: LD_EXP 4
8597: PPUSH
8598: LD_STRING DS4
8600: PPUSH
8601: CALL_OW 94
// wait ( 0 0$30 ) ;
8605: LD_INT 1050
8607: PPUSH
8608: CALL_OW 67
// PrepareAlfaAttack ( northArr , [ 6 , 7 , 8 ] [ Difficulty ] ) ;
8612: LD_INT 9
8614: PPUSH
8615: LD_INT 6
8617: PUSH
8618: LD_INT 7
8620: PUSH
8621: LD_INT 8
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: LIST
8628: PUSH
8629: LD_OWVAR 67
8633: ARRAY
8634: PPUSH
8635: CALL 1292 0 2
// end ; end ;
8639: PPOPN 1
8641: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) then
8642: LD_VAR 0 1
8646: PUSH
8647: LD_INT 22
8649: PUSH
8650: LD_INT 3
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: PUSH
8657: LD_INT 21
8659: PUSH
8660: LD_INT 1
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: PUSH
8667: LD_INT 23
8669: PUSH
8670: LD_INT 3
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: LIST
8681: PPUSH
8682: CALL_OW 69
8686: IN
8687: IFFALSE 8796
// begin if Prob ( 50 ) or lastRadioMsg + 1 1$00 > tick then
8689: LD_INT 50
8691: PPUSH
8692: CALL_OW 13
8696: IFTRUE 8714
8698: PUSH
8699: LD_EXP 12
8703: PUSH
8704: LD_INT 2100
8706: PLUS
8707: PUSH
8708: LD_OWVAR 1
8712: GREATER
8713: OR
8714: IFFALSE 8718
// exit ;
8716: GO 8796
// lastRadioMsg := tick ;
8718: LD_ADDR_EXP 12
8722: PUSH
8723: LD_OWVAR 1
8727: ST_TO_ADDR
// if killerSide = 1 then
8728: LD_VAR 0 2
8732: PUSH
8733: LD_INT 1
8735: EQUAL
8736: IFFALSE 8763
// begin if IsOk ( Jakes ) then
8738: LD_EXP 3
8742: PPUSH
8743: CALL_OW 302
8747: IFFALSE 8761
// SayRadio ( Jakes , DJ2 ) ;
8749: LD_EXP 3
8753: PPUSH
8754: LD_STRING DJ2
8756: PPUSH
8757: CALL_OW 94
// end else
8761: GO 8796
// if killerSide = 4 then
8763: LD_VAR 0 2
8767: PUSH
8768: LD_INT 4
8770: EQUAL
8771: IFFALSE 8796
// begin if IsOk ( Sylvia ) then
8773: LD_EXP 4
8777: PPUSH
8778: CALL_OW 302
8782: IFFALSE 8796
// SayRadio ( Sylvia , DS1 ) ;
8784: LD_EXP 4
8788: PPUSH
8789: LD_STRING DS1
8791: PPUSH
8792: CALL_OW 94
// end ; end ; end ;
8796: PPOPN 3
8798: END
// on VehicleConstructed ( vehicle , factory ) do var side ;
8799: LD_INT 0
8801: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
8802: LD_VAR 0 1
8806: PPUSH
8807: LD_VAR 0 2
8811: PPUSH
8812: CALL 31985 0 2
// side := GetSide ( vehicle ) ;
8816: LD_ADDR_VAR 0 3
8820: PUSH
8821: LD_VAR 0 1
8825: PPUSH
8826: CALL_OW 255
8830: ST_TO_ADDR
// if side = 1 then
8831: LD_VAR 0 3
8835: PUSH
8836: LD_INT 1
8838: EQUAL
8839: IFFALSE 9042
// begin usConstructList1 := Delete ( usConstructList1 , 1 ) ;
8841: LD_ADDR_EXP 20
8845: PUSH
8846: LD_EXP 20
8850: PPUSH
8851: LD_INT 1
8853: PPUSH
8854: CALL_OW 3
8858: ST_TO_ADDR
// if GetWeapon ( vehicle ) in [ us_cargo_bay ] then
8859: LD_VAR 0 1
8863: PPUSH
8864: CALL_OW 264
8868: PUSH
8869: LD_INT 12
8871: PUSH
8872: EMPTY
8873: LIST
8874: IN
8875: IFFALSE 8889
// begin usCargo1 := vehicle ;
8877: LD_ADDR_EXP 26
8881: PUSH
8882: LD_VAR 0 1
8886: ST_TO_ADDR
// exit ;
8887: GO 9253
// end ; if GetWeapon ( vehicle ) = us_crane then
8889: LD_VAR 0 1
8893: PPUSH
8894: CALL_OW 264
8898: PUSH
8899: LD_INT 13
8901: EQUAL
8902: IFFALSE 8926
// begin usVehicles1 := Join ( usVehicles1 , vehicle ) ;
8904: LD_ADDR_EXP 16
8908: PUSH
8909: LD_EXP 16
8913: PPUSH
8914: LD_VAR 0 1
8918: PPUSH
8919: CALL 75485 0 2
8923: ST_TO_ADDR
// exit ;
8924: GO 9253
// end ; if GetControl ( vehicle ) = control_manual then
8926: LD_VAR 0 1
8930: PPUSH
8931: CALL_OW 263
8935: PUSH
8936: LD_INT 1
8938: EQUAL
8939: IFFALSE 8980
// begin usVehicles1 := Join ( usVehicles1 , vehicle ) ;
8941: LD_ADDR_EXP 16
8945: PUSH
8946: LD_EXP 16
8950: PPUSH
8951: LD_VAR 0 1
8955: PPUSH
8956: CALL 75485 0 2
8960: ST_TO_ADDR
// SetTag ( IsDrivenBy ( vehicle ) , tMech ) ;
8961: LD_VAR 0 1
8965: PPUSH
8966: CALL_OW 311
8970: PPUSH
8971: LD_INT 7
8973: PPUSH
8974: CALL_OW 109
// end else
8978: GO 9042
// begin usAttackVehicles1 := Join ( usAttackVehicles1 , vehicle ) ;
8980: LD_ADDR_EXP 24
8984: PUSH
8985: LD_EXP 24
8989: PPUSH
8990: LD_VAR 0 1
8994: PPUSH
8995: CALL 75485 0 2
8999: ST_TO_ADDR
// if Count ( usAttackVehicles1 ) >= [ 3 , 5 , 7 ] [ Difficulty ] + attackWave1 then
9000: LD_EXP 24
9004: PPUSH
9005: CALL 39553 0 1
9009: PUSH
9010: LD_INT 3
9012: PUSH
9013: LD_INT 5
9015: PUSH
9016: LD_INT 7
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: LIST
9023: PUSH
9024: LD_OWVAR 67
9028: ARRAY
9029: PUSH
9030: LD_EXP 10
9034: PLUS
9035: GREATEREQUAL
9036: IFFALSE 9042
// SendUsAttack1 ;
9038: CALL 2557 0 0
// end ; end ; if side = 4 then
9042: LD_VAR 0 3
9046: PUSH
9047: LD_INT 4
9049: EQUAL
9050: IFFALSE 9253
// begin usConstructList2 := Delete ( usConstructList2 , 1 ) ;
9052: LD_ADDR_EXP 21
9056: PUSH
9057: LD_EXP 21
9061: PPUSH
9062: LD_INT 1
9064: PPUSH
9065: CALL_OW 3
9069: ST_TO_ADDR
// if GetWeapon ( vehicle ) in [ us_cargo_bay ] then
9070: LD_VAR 0 1
9074: PPUSH
9075: CALL_OW 264
9079: PUSH
9080: LD_INT 12
9082: PUSH
9083: EMPTY
9084: LIST
9085: IN
9086: IFFALSE 9100
// begin usCargo2 := vehicle ;
9088: LD_ADDR_EXP 27
9092: PUSH
9093: LD_VAR 0 1
9097: ST_TO_ADDR
// exit ;
9098: GO 9253
// end ; if GetWeapon ( vehicle ) = us_crane then
9100: LD_VAR 0 1
9104: PPUSH
9105: CALL_OW 264
9109: PUSH
9110: LD_INT 13
9112: EQUAL
9113: IFFALSE 9137
// begin usVehicles2 := Join ( usVehicles2 , vehicle ) ;
9115: LD_ADDR_EXP 17
9119: PUSH
9120: LD_EXP 17
9124: PPUSH
9125: LD_VAR 0 1
9129: PPUSH
9130: CALL 75485 0 2
9134: ST_TO_ADDR
// exit ;
9135: GO 9253
// end ; if GetControl ( vehicle ) = control_manual then
9137: LD_VAR 0 1
9141: PPUSH
9142: CALL_OW 263
9146: PUSH
9147: LD_INT 1
9149: EQUAL
9150: IFFALSE 9191
// begin usVehicles2 := Join ( usVehicles2 , vehicle ) ;
9152: LD_ADDR_EXP 17
9156: PUSH
9157: LD_EXP 17
9161: PPUSH
9162: LD_VAR 0 1
9166: PPUSH
9167: CALL 75485 0 2
9171: ST_TO_ADDR
// SetTag ( IsDrivenBy ( vehicle ) , tMech ) ;
9172: LD_VAR 0 1
9176: PPUSH
9177: CALL_OW 311
9181: PPUSH
9182: LD_INT 7
9184: PPUSH
9185: CALL_OW 109
// end else
9189: GO 9253
// begin usAttackVehicles2 := Join ( usAttackVehicles2 , vehicle ) ;
9191: LD_ADDR_EXP 25
9195: PUSH
9196: LD_EXP 25
9200: PPUSH
9201: LD_VAR 0 1
9205: PPUSH
9206: CALL 75485 0 2
9210: ST_TO_ADDR
// if Count ( usAttackVehicles2 ) >= [ 3 , 5 , 7 ] [ Difficulty ] + attackWave2 then
9211: LD_EXP 25
9215: PPUSH
9216: CALL 39553 0 1
9220: PUSH
9221: LD_INT 3
9223: PUSH
9224: LD_INT 5
9226: PUSH
9227: LD_INT 7
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: LIST
9234: PUSH
9235: LD_OWVAR 67
9239: ARRAY
9240: PUSH
9241: LD_EXP 11
9245: PLUS
9246: GREATEREQUAL
9247: IFFALSE 9253
// SendUsAttack2 ;
9249: CALL 3150 0 0
// end ; end ; end ;
9253: PPOPN 3
9255: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
9256: LD_VAR 0 1
9260: PPUSH
9261: CALL_OW 110
9265: PUSH
9266: LD_INT 7
9268: EQUAL
9269: IFFALSE 9283
// SetTag ( driver , 0 ) ;
9271: LD_VAR 0 1
9275: PPUSH
9276: LD_INT 0
9278: PPUSH
9279: CALL_OW 109
// end ;
9283: PPOPN 4
9285: END
// on EvacuateBuilding ( building , unit ) do begin if GetTag ( unit ) = tControlRemoteMech then
9286: LD_VAR 0 2
9290: PPUSH
9291: CALL_OW 110
9295: PUSH
9296: LD_INT 17
9298: EQUAL
9299: IFFALSE 9313
// SetTag ( unit , 0 ) ;
9301: LD_VAR 0 2
9305: PPUSH
9306: LD_INT 0
9308: PPUSH
9309: CALL_OW 109
// end ;
9313: PPOPN 2
9315: END
// on UpgradeComplete ( b ) do var side , btype ;
9316: LD_INT 0
9318: PPUSH
9319: PPUSH
// begin side := GetSide ( b ) ;
9320: LD_ADDR_VAR 0 2
9324: PUSH
9325: LD_VAR 0 1
9329: PPUSH
9330: CALL_OW 255
9334: ST_TO_ADDR
// btype := GetBType ( b ) ;
9335: LD_ADDR_VAR 0 3
9339: PUSH
9340: LD_VAR 0 1
9344: PPUSH
9345: CALL_OW 266
9349: ST_TO_ADDR
// if side = 1 then
9350: LD_VAR 0 2
9354: PUSH
9355: LD_INT 1
9357: EQUAL
9358: IFFALSE 9378
// begin usBuildingsToBuild1 := Delete ( usBuildingsToBuild1 , 1 ) ;
9360: LD_ADDR_EXP 22
9364: PUSH
9365: LD_EXP 22
9369: PPUSH
9370: LD_INT 1
9372: PPUSH
9373: CALL_OW 3
9377: ST_TO_ADDR
// end ; if side = 4 then
9378: LD_VAR 0 2
9382: PUSH
9383: LD_INT 4
9385: EQUAL
9386: IFFALSE 9406
// begin usBuildingsToBuild2 := Delete ( usBuildingsToBuild2 , 1 ) ;
9388: LD_ADDR_EXP 23
9392: PUSH
9393: LD_EXP 23
9397: PPUSH
9398: LD_INT 1
9400: PPUSH
9401: CALL_OW 3
9405: ST_TO_ADDR
// end ; end ;
9406: PPOPN 3
9408: END
// on ResearchComplete ( tech , lab ) do var side ;
9409: LD_INT 0
9411: PPUSH
// begin side := GetSide ( lab ) ;
9412: LD_ADDR_VAR 0 3
9416: PUSH
9417: LD_VAR 0 2
9421: PPUSH
9422: CALL_OW 255
9426: ST_TO_ADDR
// if side = 1 then
9427: LD_VAR 0 3
9431: PUSH
9432: LD_INT 1
9434: EQUAL
9435: IFFALSE 9453
// usTechs1 := usTechs1 diff tech ;
9437: LD_ADDR_EXP 18
9441: PUSH
9442: LD_EXP 18
9446: PUSH
9447: LD_VAR 0 1
9451: DIFF
9452: ST_TO_ADDR
// if side = 4 then
9453: LD_VAR 0 3
9457: PUSH
9458: LD_INT 4
9460: EQUAL
9461: IFFALSE 9479
// usTechs2 := usTechs2 diff tech ;
9463: LD_ADDR_EXP 19
9467: PUSH
9468: LD_EXP 19
9472: PUSH
9473: LD_VAR 0 1
9477: DIFF
9478: ST_TO_ADDR
// end ;
9479: PPOPN 3
9481: END
// on BuildingComplete ( b ) do var side , btype ;
9482: LD_INT 0
9484: PPUSH
9485: PPUSH
// begin side := GetSide ( b ) ;
9486: LD_ADDR_VAR 0 2
9490: PUSH
9491: LD_VAR 0 1
9495: PPUSH
9496: CALL_OW 255
9500: ST_TO_ADDR
// btype := GetBType ( b ) ;
9501: LD_ADDR_VAR 0 3
9505: PUSH
9506: LD_VAR 0 1
9510: PPUSH
9511: CALL_OW 266
9515: ST_TO_ADDR
// if side = 1 then
9516: LD_VAR 0 2
9520: PUSH
9521: LD_INT 1
9523: EQUAL
9524: IFFALSE 9544
// usBuildingsToBuild1 := Delete ( usBuildingsToBuild1 , 1 ) ;
9526: LD_ADDR_EXP 22
9530: PUSH
9531: LD_EXP 22
9535: PPUSH
9536: LD_INT 1
9538: PPUSH
9539: CALL_OW 3
9543: ST_TO_ADDR
// if side = 4 then
9544: LD_VAR 0 2
9548: PUSH
9549: LD_INT 4
9551: EQUAL
9552: IFFALSE 9572
// usBuildingsToBuild2 := Delete ( usBuildingsToBuild2 , 1 ) ;
9554: LD_ADDR_EXP 23
9558: PUSH
9559: LD_EXP 23
9563: PPUSH
9564: LD_INT 1
9566: PPUSH
9567: CALL_OW 3
9571: ST_TO_ADDR
// end ;
9572: PPOPN 3
9574: END
// on VehicleCaptured ( newId , oldId , oldSide , driver ) do begin if oldSide = 1 then
9575: LD_VAR 0 3
9579: PUSH
9580: LD_INT 1
9582: EQUAL
9583: IFFALSE 9631
// begin if oldId in usVehicles1 then
9585: LD_VAR 0 2
9589: PUSH
9590: LD_EXP 16
9594: IN
9595: IFFALSE 9615
// begin usVehicles1 := usVehicles1 diff oldId ;
9597: LD_ADDR_EXP 16
9601: PUSH
9602: LD_EXP 16
9606: PUSH
9607: LD_VAR 0 2
9611: DIFF
9612: ST_TO_ADDR
// end else
9613: GO 9631
// begin usAttackVehicles1 := usAttackVehicles1 diff oldId ;
9615: LD_ADDR_EXP 24
9619: PUSH
9620: LD_EXP 24
9624: PUSH
9625: LD_VAR 0 2
9629: DIFF
9630: ST_TO_ADDR
// end ; end ; if oldSide = 4 then
9631: LD_VAR 0 3
9635: PUSH
9636: LD_INT 4
9638: EQUAL
9639: IFFALSE 9687
// begin if oldId in usVehicles2 then
9641: LD_VAR 0 2
9645: PUSH
9646: LD_EXP 17
9650: IN
9651: IFFALSE 9671
// begin usVehicles2 := usVehicles2 diff oldId ;
9653: LD_ADDR_EXP 17
9657: PUSH
9658: LD_EXP 17
9662: PUSH
9663: LD_VAR 0 2
9667: DIFF
9668: ST_TO_ADDR
// end else
9669: GO 9687
// begin usAttackVehicles2 := usAttackVehicles2 diff oldId ;
9671: LD_ADDR_EXP 25
9675: PUSH
9676: LD_EXP 25
9680: PUSH
9681: LD_VAR 0 2
9685: DIFF
9686: ST_TO_ADDR
// end ; end ; end ;
9687: PPOPN 4
9689: END
// on ClassChanged ( un , oldClass , newClass ) do var tag ;
9690: LD_INT 0
9692: PPUSH
// begin tag := GetTag ( un ) ;
9693: LD_ADDR_VAR 0 4
9697: PUSH
9698: LD_VAR 0 1
9702: PPUSH
9703: CALL_OW 110
9707: ST_TO_ADDR
// if GetSide ( un ) in [ 1 , 4 ] then
9708: LD_VAR 0 1
9712: PPUSH
9713: CALL_OW 255
9717: PUSH
9718: LD_INT 1
9720: PUSH
9721: LD_INT 4
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: IN
9728: IFFALSE 9759
// if tag in [ tWannaBeMech , tWannaBeSold ] then
9730: LD_VAR 0 4
9734: PUSH
9735: LD_INT 14
9737: PUSH
9738: LD_INT 16
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: IN
9745: IFFALSE 9759
// SetTag ( un , 0 ) ;
9747: LD_VAR 0 1
9751: PPUSH
9752: LD_INT 0
9754: PPUSH
9755: CALL_OW 109
// end ; end_of_file
9759: PPOPN 4
9761: END
// export function BaseScript ( side , area , cratesArea , innerArea , outerArea , forces , vehicles , techs , constructList , buildingsToBuild , healPoint , parkingPoint , allowToPatrol ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , drivers , hurtUnits , enemy , vehicles2 , ct , cranes , barracks , enemyInBase , enemyOuterBase , empty , fac , emptyTowers , weapon , depot , enemySide ; begin
9762: LD_INT 0
9764: PPUSH
9765: PPUSH
9766: PPUSH
9767: PPUSH
9768: PPUSH
9769: PPUSH
9770: PPUSH
9771: PPUSH
9772: PPUSH
9773: PPUSH
9774: PPUSH
9775: PPUSH
9776: PPUSH
9777: PPUSH
9778: PPUSH
9779: PPUSH
9780: PPUSH
9781: PPUSH
9782: PPUSH
9783: PPUSH
9784: PPUSH
9785: PPUSH
9786: PPUSH
9787: PPUSH
9788: PPUSH
9789: PPUSH
9790: PPUSH
// enable ;
9791: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
9792: LD_ADDR_VAR 0 16
9796: PUSH
9797: LD_INT 81
9799: PUSH
9800: LD_VAR 0 1
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: PPUSH
9809: CALL_OW 69
9813: ST_TO_ADDR
// if tmp then
9814: LD_VAR 0 16
9818: IFFALSE 9839
// enemySide := GetSide ( tmp [ 1 ] ) ;
9820: LD_ADDR_VAR 0 40
9824: PUSH
9825: LD_VAR 0 16
9829: PUSH
9830: LD_INT 1
9832: ARRAY
9833: PPUSH
9834: CALL_OW 255
9838: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( innerArea , [ f_enemy , side ] ) ;
9839: LD_ADDR_VAR 0 33
9843: PUSH
9844: LD_VAR 0 4
9848: PPUSH
9849: LD_INT 81
9851: PUSH
9852: LD_VAR 0 1
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PPUSH
9861: CALL_OW 70
9865: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
9866: LD_ADDR_VAR 0 34
9870: PUSH
9871: LD_VAR 0 5
9875: PPUSH
9876: LD_INT 81
9878: PUSH
9879: LD_VAR 0 1
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PPUSH
9888: CALL_OW 70
9892: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9893: LD_ADDR_VAR 0 39
9897: PUSH
9898: LD_VAR 0 2
9902: PPUSH
9903: LD_INT 22
9905: PUSH
9906: LD_VAR 0 1
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: PUSH
9915: LD_INT 2
9917: PUSH
9918: LD_INT 30
9920: PUSH
9921: LD_INT 0
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: PUSH
9928: LD_INT 30
9930: PUSH
9931: LD_INT 1
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: LIST
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PPUSH
9947: CALL_OW 70
9951: ST_TO_ADDR
// if depot then
9952: LD_VAR 0 39
9956: IFFALSE 9972
// depot := depot [ 1 ] ;
9958: LD_ADDR_VAR 0 39
9962: PUSH
9963: LD_VAR 0 39
9967: PUSH
9968: LD_INT 1
9970: ARRAY
9971: ST_TO_ADDR
// fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
9972: LD_ADDR_VAR 0 36
9976: PUSH
9977: LD_VAR 0 2
9981: PPUSH
9982: LD_INT 22
9984: PUSH
9985: LD_VAR 0 1
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: PUSH
9994: LD_INT 30
9996: PUSH
9997: LD_INT 3
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: PUSH
10004: LD_INT 50
10006: PUSH
10007: EMPTY
10008: LIST
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: LIST
10014: PPUSH
10015: CALL_OW 70
10019: ST_TO_ADDR
// barracks := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
10020: LD_ADDR_VAR 0 32
10024: PUSH
10025: LD_VAR 0 2
10029: PPUSH
10030: LD_INT 22
10032: PUSH
10033: LD_VAR 0 1
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: PUSH
10042: LD_INT 2
10044: PUSH
10045: LD_INT 30
10047: PUSH
10048: LD_INT 4
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 30
10057: PUSH
10058: LD_INT 5
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: LIST
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: PPUSH
10074: CALL_OW 70
10078: ST_TO_ADDR
// if Count ( techs ) then
10079: LD_VAR 0 8
10083: PPUSH
10084: CALL 39553 0 1
10088: IFFALSE 10249
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
10090: LD_ADDR_VAR 0 18
10094: PUSH
10095: LD_VAR 0 2
10099: PPUSH
10100: LD_INT 22
10102: PUSH
10103: LD_VAR 0 1
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PUSH
10112: LD_INT 50
10114: PUSH
10115: EMPTY
10116: LIST
10117: PUSH
10118: LD_INT 2
10120: PUSH
10121: LD_INT 30
10123: PUSH
10124: LD_INT 6
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: PUSH
10131: LD_INT 30
10133: PUSH
10134: LD_INT 7
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: PUSH
10141: LD_INT 30
10143: PUSH
10144: LD_INT 8
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: LIST
10161: PPUSH
10162: CALL_OW 70
10166: ST_TO_ADDR
// if lab then
10167: LD_VAR 0 18
10171: IFFALSE 10247
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
10173: LD_VAR 0 18
10177: PUSH
10178: LD_INT 1
10180: ARRAY
10181: PPUSH
10182: CALL_OW 461
10186: PUSH
10187: LD_INT 2
10189: EQUAL
10190: IFFALSE 10247
// begin for i in techs do
10192: LD_ADDR_VAR 0 15
10196: PUSH
10197: LD_VAR 0 8
10201: PUSH
10202: FOR_IN
10203: IFFALSE 10245
// if CanBeResearched ( lab [ 1 ] , i ) then
10205: LD_VAR 0 18
10209: PUSH
10210: LD_INT 1
10212: ARRAY
10213: PPUSH
10214: LD_VAR 0 15
10218: PPUSH
10219: CALL_OW 430
10223: IFFALSE 10243
// begin AddComResearch ( lab [ 1 ] , i ) ;
10225: LD_VAR 0 18
10229: PUSH
10230: LD_INT 1
10232: ARRAY
10233: PPUSH
10234: LD_VAR 0 15
10238: PPUSH
10239: CALL_OW 184
// end ;
10243: GO 10202
10245: POP
10246: POP
// end ; end ; end else
10247: GO 10829
// if UnitFilter ( fac , [ f_not , [ f_full ] ] ) and Count ( UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_tag , 0 ] , [ f_class , 4 ] ] ) ) > 2 then
10249: LD_VAR 0 36
10253: PPUSH
10254: LD_INT 3
10256: PUSH
10257: LD_INT 62
10259: PUSH
10260: EMPTY
10261: LIST
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PPUSH
10267: CALL_OW 72
10271: IFFALSE 10331
10273: PUSH
10274: LD_VAR 0 6
10278: PPUSH
10279: LD_INT 3
10281: PUSH
10282: LD_INT 60
10284: PUSH
10285: EMPTY
10286: LIST
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PUSH
10292: LD_INT 120
10294: PUSH
10295: LD_INT 0
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: LD_INT 25
10304: PUSH
10305: LD_INT 4
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: LIST
10316: PPUSH
10317: CALL_OW 72
10321: PPUSH
10322: CALL 39553 0 1
10326: PUSH
10327: LD_INT 2
10329: GREATER
10330: AND
10331: IFFALSE 10540
// begin tmp := UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_tag , 0 ] , [ f_class , 4 ] ] ) ;
10333: LD_ADDR_VAR 0 16
10337: PUSH
10338: LD_VAR 0 6
10342: PPUSH
10343: LD_INT 3
10345: PUSH
10346: LD_INT 60
10348: PUSH
10349: EMPTY
10350: LIST
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: LD_INT 120
10358: PUSH
10359: LD_INT 0
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: LD_INT 25
10368: PUSH
10369: LD_INT 4
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: LIST
10380: PPUSH
10381: CALL_OW 72
10385: ST_TO_ADDR
// for i := tmp downto 2 do
10386: LD_ADDR_VAR 0 15
10390: PUSH
10391: DOUBLE
10392: LD_VAR 0 16
10396: INC
10397: ST_TO_ADDR
10398: LD_INT 2
10400: PUSH
10401: FOR_DOWNTO
10402: IFFALSE 10536
// begin if Count ( UnitsInside ( fac [ 1 ] ) ) + Count ( UnitFilter ( forces , [ f_tag , tWannaBeMech ] ) ) = 6 then
10404: LD_VAR 0 36
10408: PUSH
10409: LD_INT 1
10411: ARRAY
10412: PPUSH
10413: CALL_OW 313
10417: PPUSH
10418: CALL 39553 0 1
10422: PUSH
10423: LD_VAR 0 6
10427: PPUSH
10428: LD_INT 120
10430: PUSH
10431: LD_INT 14
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: PPUSH
10438: CALL_OW 72
10442: PPUSH
10443: CALL 39553 0 1
10447: PLUS
10448: PUSH
10449: LD_INT 6
10451: EQUAL
10452: IFFALSE 10456
// break ;
10454: GO 10536
// sci := tmp [ i ] ;
10456: LD_ADDR_VAR 0 24
10460: PUSH
10461: LD_VAR 0 16
10465: PUSH
10466: LD_VAR 0 15
10470: ARRAY
10471: ST_TO_ADDR
// SetTag ( sci , tWannaBeMech ) ;
10472: LD_VAR 0 24
10476: PPUSH
10477: LD_INT 14
10479: PPUSH
10480: CALL_OW 109
// if IsInUnit ( sci ) then
10484: LD_VAR 0 24
10488: PPUSH
10489: CALL_OW 310
10493: IFFALSE 10504
// ComExitBuilding ( sci ) ;
10495: LD_VAR 0 24
10499: PPUSH
10500: CALL_OW 122
// AddComEnterUnit ( sci , fac [ 1 ] ) ;
10504: LD_VAR 0 24
10508: PPUSH
10509: LD_VAR 0 36
10513: PUSH
10514: LD_INT 1
10516: ARRAY
10517: PPUSH
10518: CALL_OW 180
// AddComChangeProfession ( sci , class_mechanic ) ;
10522: LD_VAR 0 24
10526: PPUSH
10527: LD_INT 3
10529: PPUSH
10530: CALL_OW 183
// end ;
10534: GO 10401
10536: POP
10537: POP
// end else
10538: GO 10829
// if UnitFilter ( barracks , [ f_not , [ f_full ] ] ) and Count ( UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_tag , 0 ] , [ f_class , 4 ] ] ) ) > 2 then
10540: LD_VAR 0 32
10544: PPUSH
10545: LD_INT 3
10547: PUSH
10548: LD_INT 62
10550: PUSH
10551: EMPTY
10552: LIST
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PPUSH
10558: CALL_OW 72
10562: IFFALSE 10622
10564: PUSH
10565: LD_VAR 0 6
10569: PPUSH
10570: LD_INT 3
10572: PUSH
10573: LD_INT 60
10575: PUSH
10576: EMPTY
10577: LIST
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: PUSH
10583: LD_INT 120
10585: PUSH
10586: LD_INT 0
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PUSH
10593: LD_INT 25
10595: PUSH
10596: LD_INT 4
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: PPUSH
10608: CALL_OW 72
10612: PPUSH
10613: CALL 39553 0 1
10617: PUSH
10618: LD_INT 2
10620: GREATER
10621: AND
10622: IFFALSE 10829
// begin tmp := UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_tag , 0 ] , [ f_class , 4 ] ] ) ;
10624: LD_ADDR_VAR 0 16
10628: PUSH
10629: LD_VAR 0 6
10633: PPUSH
10634: LD_INT 3
10636: PUSH
10637: LD_INT 60
10639: PUSH
10640: EMPTY
10641: LIST
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: PUSH
10647: LD_INT 120
10649: PUSH
10650: LD_INT 0
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PUSH
10657: LD_INT 25
10659: PUSH
10660: LD_INT 4
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: PUSH
10667: EMPTY
10668: LIST
10669: LIST
10670: LIST
10671: PPUSH
10672: CALL_OW 72
10676: ST_TO_ADDR
// for i := tmp downto 2 do
10677: LD_ADDR_VAR 0 15
10681: PUSH
10682: DOUBLE
10683: LD_VAR 0 16
10687: INC
10688: ST_TO_ADDR
10689: LD_INT 2
10691: PUSH
10692: FOR_DOWNTO
10693: IFFALSE 10827
// begin if Count ( UnitsInside ( barracks [ 1 ] ) ) + Count ( UnitFilter ( forces , [ f_tag , tWannaBeSold ] ) ) = 6 then
10695: LD_VAR 0 32
10699: PUSH
10700: LD_INT 1
10702: ARRAY
10703: PPUSH
10704: CALL_OW 313
10708: PPUSH
10709: CALL 39553 0 1
10713: PUSH
10714: LD_VAR 0 6
10718: PPUSH
10719: LD_INT 120
10721: PUSH
10722: LD_INT 16
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PPUSH
10729: CALL_OW 72
10733: PPUSH
10734: CALL 39553 0 1
10738: PLUS
10739: PUSH
10740: LD_INT 6
10742: EQUAL
10743: IFFALSE 10747
// break ;
10745: GO 10827
// sci := tmp [ i ] ;
10747: LD_ADDR_VAR 0 24
10751: PUSH
10752: LD_VAR 0 16
10756: PUSH
10757: LD_VAR 0 15
10761: ARRAY
10762: ST_TO_ADDR
// SetTag ( sci , tWannaBeSold ) ;
10763: LD_VAR 0 24
10767: PPUSH
10768: LD_INT 16
10770: PPUSH
10771: CALL_OW 109
// if IsInUnit ( sci ) then
10775: LD_VAR 0 24
10779: PPUSH
10780: CALL_OW 310
10784: IFFALSE 10795
// ComExitBuilding ( sci ) ;
10786: LD_VAR 0 24
10790: PPUSH
10791: CALL_OW 122
// AddComEnterUnit ( sci , barracks [ 1 ] ) ;
10795: LD_VAR 0 24
10799: PPUSH
10800: LD_VAR 0 32
10804: PUSH
10805: LD_INT 1
10807: ARRAY
10808: PPUSH
10809: CALL_OW 180
// AddComChangeProfession ( sci , class_soldier ) ;
10813: LD_VAR 0 24
10817: PPUSH
10818: LD_INT 1
10820: PPUSH
10821: CALL_OW 183
// end ;
10825: GO 10692
10827: POP
10828: POP
// end ; if fac then
10829: LD_VAR 0 36
10833: IFFALSE 11148
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
10835: LD_VAR 0 36
10839: PUSH
10840: LD_INT 1
10842: ARRAY
10843: PPUSH
10844: CALL_OW 461
10848: PUSH
10849: LD_INT 2
10851: EQUAL
10852: IFFALSE 11148
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
10854: LD_ADDR_VAR 0 37
10858: PUSH
10859: LD_VAR 0 2
10863: PPUSH
10864: LD_INT 2
10866: PUSH
10867: LD_INT 30
10869: PUSH
10870: LD_INT 32
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: PUSH
10877: LD_INT 30
10879: PUSH
10880: LD_INT 33
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: LIST
10891: PUSH
10892: LD_INT 35
10894: PUSH
10895: LD_INT 0
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: PPUSH
10906: CALL_OW 70
10910: ST_TO_ADDR
// if emptyTowers then
10911: LD_VAR 0 37
10915: IFFALSE 10965
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
10917: LD_ADDR_VAR 0 38
10921: PUSH
10922: LD_VAR 0 37
10926: PUSH
10927: LD_INT 1
10929: ARRAY
10930: PPUSH
10931: LD_VAR 0 2
10935: PPUSH
10936: CALL 47844 0 2
10940: ST_TO_ADDR
// if weapon then
10941: LD_VAR 0 38
10945: IFFALSE 10965
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
10947: LD_VAR 0 37
10951: PUSH
10952: LD_INT 1
10954: ARRAY
10955: PPUSH
10956: LD_VAR 0 38
10960: PPUSH
10961: CALL_OW 148
// end ; if constructList then
10965: LD_VAR 0 9
10969: IFFALSE 11148
// for i := 1 to Count ( constructList ) do
10971: LD_ADDR_VAR 0 15
10975: PUSH
10976: DOUBLE
10977: LD_INT 1
10979: DEC
10980: ST_TO_ADDR
10981: LD_VAR 0 9
10985: PPUSH
10986: CALL 39553 0 1
10990: PUSH
10991: FOR_TO
10992: IFFALSE 11146
// begin if CanBeConstructed ( fac [ 1 ] , constructList [ i ] [ 1 ] , constructList [ i ] [ 2 ] , constructList [ i ] [ 3 ] , constructList [ i ] [ 4 ] ) then
10994: LD_VAR 0 36
10998: PUSH
10999: LD_INT 1
11001: ARRAY
11002: PPUSH
11003: LD_VAR 0 9
11007: PUSH
11008: LD_VAR 0 15
11012: ARRAY
11013: PUSH
11014: LD_INT 1
11016: ARRAY
11017: PPUSH
11018: LD_VAR 0 9
11022: PUSH
11023: LD_VAR 0 15
11027: ARRAY
11028: PUSH
11029: LD_INT 2
11031: ARRAY
11032: PPUSH
11033: LD_VAR 0 9
11037: PUSH
11038: LD_VAR 0 15
11042: ARRAY
11043: PUSH
11044: LD_INT 3
11046: ARRAY
11047: PPUSH
11048: LD_VAR 0 9
11052: PUSH
11053: LD_VAR 0 15
11057: ARRAY
11058: PUSH
11059: LD_INT 4
11061: ARRAY
11062: PPUSH
11063: CALL_OW 448
11067: IFFALSE 11144
// begin ComConstruct ( fac [ 1 ] , constructList [ i ] [ 1 ] , constructList [ i ] [ 2 ] , constructList [ i ] [ 3 ] , constructList [ i ] [ 4 ] ) ;
11069: LD_VAR 0 36
11073: PUSH
11074: LD_INT 1
11076: ARRAY
11077: PPUSH
11078: LD_VAR 0 9
11082: PUSH
11083: LD_VAR 0 15
11087: ARRAY
11088: PUSH
11089: LD_INT 1
11091: ARRAY
11092: PPUSH
11093: LD_VAR 0 9
11097: PUSH
11098: LD_VAR 0 15
11102: ARRAY
11103: PUSH
11104: LD_INT 2
11106: ARRAY
11107: PPUSH
11108: LD_VAR 0 9
11112: PUSH
11113: LD_VAR 0 15
11117: ARRAY
11118: PUSH
11119: LD_INT 3
11121: ARRAY
11122: PPUSH
11123: LD_VAR 0 9
11127: PUSH
11128: LD_VAR 0 15
11132: ARRAY
11133: PUSH
11134: LD_INT 4
11136: ARRAY
11137: PPUSH
11138: CALL_OW 125
// break ;
11142: GO 11146
// end ; end ;
11144: GO 10991
11146: POP
11147: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11148: LD_ADDR_VAR 0 16
11152: PUSH
11153: LD_VAR 0 2
11157: PPUSH
11158: LD_INT 22
11160: PUSH
11161: LD_VAR 0 1
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: LD_INT 21
11172: PUSH
11173: LD_INT 3
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PUSH
11180: LD_INT 3
11182: PUSH
11183: LD_INT 57
11185: PUSH
11186: EMPTY
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PUSH
11193: LD_INT 3
11195: PUSH
11196: LD_INT 24
11198: PUSH
11199: LD_INT 1000
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: PPUSH
11216: CALL_OW 70
11220: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
11221: LD_ADDR_VAR 0 23
11225: PUSH
11226: LD_VAR 0 2
11230: PPUSH
11231: CALL_OW 435
11235: ST_TO_ADDR
// if cratesArea then
11236: LD_VAR 0 3
11240: IFFALSE 11263
// cr := cr union GetListOfCratesInArea ( cratesArea ) ;
11242: LD_ADDR_VAR 0 23
11246: PUSH
11247: LD_VAR 0 23
11251: PUSH
11252: LD_VAR 0 3
11256: PPUSH
11257: CALL_OW 435
11261: UNION
11262: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
11263: LD_ADDR_VAR 0 20
11267: PUSH
11268: LD_VAR 0 6
11272: PPUSH
11273: LD_INT 25
11275: PUSH
11276: LD_INT 3
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PUSH
11283: LD_INT 50
11285: PUSH
11286: EMPTY
11287: LIST
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PPUSH
11293: CALL_OW 72
11297: ST_TO_ADDR
// if fac then
11298: LD_VAR 0 36
11302: IFFALSE 11459
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_tag , tControlRemoteMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
11304: LD_VAR 0 20
11308: PPUSH
11309: LD_INT 3
11311: PUSH
11312: LD_INT 120
11314: PUSH
11315: LD_INT 7
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: PUSH
11326: LD_INT 3
11328: PUSH
11329: LD_INT 120
11331: PUSH
11332: LD_INT 17
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PUSH
11343: LD_INT 3
11345: PUSH
11346: LD_INT 54
11348: PUSH
11349: EMPTY
11350: LIST
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: LIST
11360: PPUSH
11361: CALL_OW 72
11365: IFFALSE 11382
11367: PUSH
11368: LD_VAR 0 36
11372: PUSH
11373: LD_INT 1
11375: ARRAY
11376: PPUSH
11377: CALL_OW 302
11381: AND
11382: IFFALSE 11459
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_tag , tControlRemoteMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
11384: LD_VAR 0 20
11388: PPUSH
11389: LD_INT 3
11391: PUSH
11392: LD_INT 120
11394: PUSH
11395: LD_INT 7
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PUSH
11406: LD_INT 3
11408: PUSH
11409: LD_INT 120
11411: PUSH
11412: LD_INT 17
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PUSH
11423: LD_INT 3
11425: PUSH
11426: LD_INT 54
11428: PUSH
11429: EMPTY
11430: LIST
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: LIST
11440: PPUSH
11441: CALL_OW 72
11445: PPUSH
11446: LD_VAR 0 36
11450: PUSH
11451: LD_INT 1
11453: ARRAY
11454: PPUSH
11455: CALL_OW 120
// ct := FilterUnitsInArea ( area , [ [ f_ok ] , [ f_not , [ f_full ] ] , [ f_btype , b_control_tower ] ] ) ;
11459: LD_ADDR_VAR 0 30
11463: PUSH
11464: LD_VAR 0 2
11468: PPUSH
11469: LD_INT 50
11471: PUSH
11472: EMPTY
11473: LIST
11474: PUSH
11475: LD_INT 3
11477: PUSH
11478: LD_INT 62
11480: PUSH
11481: EMPTY
11482: LIST
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: PUSH
11488: LD_INT 30
11490: PUSH
11491: LD_INT 36
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: LIST
11502: PPUSH
11503: CALL_OW 70
11507: ST_TO_ADDR
// if ct then
11508: LD_VAR 0 30
11512: IFFALSE 11668
// if Count ( UnitFilter ( mech , [ [ f_tag , tControlRemoteMech ] , [ f_class , 3 ] ] ) ) < 3 then
11514: LD_VAR 0 20
11518: PPUSH
11519: LD_INT 120
11521: PUSH
11522: LD_INT 17
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: LD_INT 25
11531: PUSH
11532: LD_INT 3
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PPUSH
11543: CALL_OW 72
11547: PPUSH
11548: CALL 39553 0 1
11552: PUSH
11553: LD_INT 3
11555: LESS
11556: IFFALSE 11668
// begin tmp := UnitFilter ( mech , [ [ f_not , [ f_hastask ] ] , [ f_tag , 0 ] , [ f_class , 3 ] ] ) ;
11558: LD_ADDR_VAR 0 16
11562: PUSH
11563: LD_VAR 0 20
11567: PPUSH
11568: LD_INT 3
11570: PUSH
11571: LD_INT 60
11573: PUSH
11574: EMPTY
11575: LIST
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: LD_INT 120
11583: PUSH
11584: LD_INT 0
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: LD_INT 25
11593: PUSH
11594: LD_INT 3
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: LIST
11605: PPUSH
11606: CALL_OW 72
11610: ST_TO_ADDR
// if tmp then
11611: LD_VAR 0 16
11615: IFFALSE 11668
// begin SetTag ( tmp [ 1 ] , tControlRemoteMech ) ;
11617: LD_VAR 0 16
11621: PUSH
11622: LD_INT 1
11624: ARRAY
11625: PPUSH
11626: LD_INT 17
11628: PPUSH
11629: CALL_OW 109
// ComExit ( tmp [ 1 ] ) ;
11633: LD_VAR 0 16
11637: PUSH
11638: LD_INT 1
11640: ARRAY
11641: PPUSH
11642: CALL 75883 0 1
// AddComEnterUnit ( tmp [ 1 ] , ct [ 1 ] ) ;
11646: LD_VAR 0 16
11650: PUSH
11651: LD_INT 1
11653: ARRAY
11654: PPUSH
11655: LD_VAR 0 30
11659: PUSH
11660: LD_INT 1
11662: ARRAY
11663: PPUSH
11664: CALL_OW 180
// end ; end ; sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_not , [ f_tag , tWannaBeSold ] ] , [ f_not , [ f_tag , tWannaBeMech ] ] , [ f_ok ] ] ) ;
11668: LD_ADDR_VAR 0 24
11672: PUSH
11673: LD_VAR 0 6
11677: PPUSH
11678: LD_INT 25
11680: PUSH
11681: LD_INT 4
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PUSH
11688: LD_INT 3
11690: PUSH
11691: LD_INT 120
11693: PUSH
11694: LD_INT 16
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: PUSH
11705: LD_INT 3
11707: PUSH
11708: LD_INT 120
11710: PUSH
11711: LD_INT 14
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: PUSH
11722: LD_INT 50
11724: PUSH
11725: EMPTY
11726: LIST
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: PPUSH
11734: CALL_OW 72
11738: ST_TO_ADDR
// lab := FilterUnitsInarea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
11739: LD_ADDR_VAR 0 18
11743: PUSH
11744: LD_VAR 0 2
11748: PPUSH
11749: LD_INT 2
11751: PUSH
11752: LD_INT 30
11754: PUSH
11755: LD_INT 6
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: PUSH
11762: LD_INT 30
11764: PUSH
11765: LD_INT 7
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 30
11774: PUSH
11775: LD_INT 8
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: PPUSH
11788: CALL_OW 70
11792: ST_TO_ADDR
// if sci then
11793: LD_VAR 0 24
11797: IFFALSE 12020
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) union UnitFilter ( forces , [ [ f_inarea , area ] , [ f_not , [ f_lives , 250 ] ] ] ) ;
11799: LD_ADDR_VAR 0 27
11803: PUSH
11804: LD_VAR 0 6
11808: PPUSH
11809: LD_INT 95
11811: PUSH
11812: LD_VAR 0 2
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: LD_INT 120
11823: PUSH
11824: LD_INT 1
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: PPUSH
11835: CALL_OW 72
11839: PUSH
11840: LD_VAR 0 6
11844: PPUSH
11845: LD_INT 95
11847: PUSH
11848: LD_VAR 0 2
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: PUSH
11857: LD_INT 3
11859: PUSH
11860: LD_INT 24
11862: PUSH
11863: LD_INT 250
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PPUSH
11878: CALL_OW 72
11882: UNION
11883: ST_TO_ADDR
// if hurtUnits then
11884: LD_VAR 0 27
11888: IFFALSE 11967
// begin hurtUnits := SortByHealth ( hurtUnits , true ) ;
11890: LD_ADDR_VAR 0 27
11894: PUSH
11895: LD_VAR 0 27
11899: PPUSH
11900: LD_INT 1
11902: PPUSH
11903: CALL 77443 0 2
11907: ST_TO_ADDR
// for i in sci do
11908: LD_ADDR_VAR 0 15
11912: PUSH
11913: LD_VAR 0 24
11917: PUSH
11918: FOR_IN
11919: IFFALSE 11963
// if IsInUnit ( i ) then
11921: LD_VAR 0 15
11925: PPUSH
11926: CALL_OW 310
11930: IFFALSE 11943
// ComExitBuilding ( i ) else
11932: LD_VAR 0 15
11936: PPUSH
11937: CALL_OW 122
11941: GO 11961
// ComHeal ( i , hurtUnits [ 1 ] ) ;
11943: LD_VAR 0 15
11947: PPUSH
11948: LD_VAR 0 27
11952: PUSH
11953: LD_INT 1
11955: ARRAY
11956: PPUSH
11957: CALL_OW 128
11961: GO 11918
11963: POP
11964: POP
// end else
11965: GO 12020
// if lab then
11967: LD_VAR 0 18
11971: IFFALSE 12020
// begin for i in sci do
11973: LD_ADDR_VAR 0 15
11977: PUSH
11978: LD_VAR 0 24
11982: PUSH
11983: FOR_IN
11984: IFFALSE 12018
// if not IsInUnit ( i ) then
11986: LD_VAR 0 15
11990: PPUSH
11991: CALL_OW 310
11995: NOT
11996: IFFALSE 12016
// ComEnterUnit ( i , lab [ 1 ] ) ;
11998: LD_VAR 0 15
12002: PPUSH
12003: LD_VAR 0 18
12007: PUSH
12008: LD_INT 1
12010: ARRAY
12011: PPUSH
12012: CALL_OW 120
12016: GO 11983
12018: POP
12019: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
12020: LD_ADDR_VAR 0 19
12024: PUSH
12025: LD_VAR 0 6
12029: PPUSH
12030: LD_INT 25
12032: PUSH
12033: LD_INT 2
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PPUSH
12040: CALL_OW 72
12044: ST_TO_ADDR
// if eng then
12045: LD_VAR 0 19
12049: IFFALSE 13268
// begin for i in eng do
12051: LD_ADDR_VAR 0 15
12055: PUSH
12056: LD_VAR 0 19
12060: PUSH
12061: FOR_IN
12062: IFFALSE 13266
// begin tag := GetTag ( i ) ;
12064: LD_ADDR_VAR 0 21
12068: PUSH
12069: LD_VAR 0 15
12073: PPUSH
12074: CALL_OW 110
12078: ST_TO_ADDR
// if IsInArea ( i , outerArea ) and not tCrates then
12079: LD_VAR 0 15
12083: PPUSH
12084: LD_VAR 0 5
12088: PPUSH
12089: CALL_OW 308
12093: IFFALSE 12100
12095: PUSH
12096: LD_INT 2
12098: NOT
12099: AND
12100: IFFALSE 12131
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
12102: LD_VAR 0 15
12106: PPUSH
12107: LD_VAR 0 12
12111: PUSH
12112: LD_INT 1
12114: ARRAY
12115: PPUSH
12116: LD_VAR 0 12
12120: PUSH
12121: LD_INT 2
12123: ARRAY
12124: PPUSH
12125: CALL_OW 111
// continue ;
12129: GO 12061
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
12131: LD_VAR 0 15
12135: PPUSH
12136: CALL_OW 256
12140: PUSH
12141: LD_INT 800
12143: LESS
12144: IFFALSE 12156
12146: PUSH
12147: LD_VAR 0 21
12151: PUSH
12152: LD_INT 1
12154: NONEQUAL
12155: AND
12156: IFFALSE 12206
// begin SetTag ( i , tHeal ) ;
12158: LD_VAR 0 15
12162: PPUSH
12163: LD_INT 1
12165: PPUSH
12166: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
12170: LD_VAR 0 15
12174: PPUSH
12175: LD_VAR 0 11
12179: PUSH
12180: LD_INT 1
12182: ARRAY
12183: PPUSH
12184: LD_VAR 0 11
12188: PUSH
12189: LD_INT 2
12191: ARRAY
12192: PPUSH
12193: CALL_OW 111
// AddComHold ( i ) ;
12197: LD_VAR 0 15
12201: PPUSH
12202: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
12206: LD_VAR 0 21
12210: PUSH
12211: LD_INT 1
12213: EQUAL
12214: IFFALSE 12231
12216: PUSH
12217: LD_VAR 0 15
12221: PPUSH
12222: CALL_OW 256
12226: PUSH
12227: LD_INT 1000
12229: EQUAL
12230: AND
12231: IFFALSE 12245
// SetTag ( i , 0 ) ;
12233: LD_VAR 0 15
12237: PPUSH
12238: LD_INT 0
12240: PPUSH
12241: CALL_OW 109
// if not tag then
12245: LD_VAR 0 21
12249: NOT
12250: IFFALSE 12421
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
12252: LD_ADDR_VAR 0 17
12256: PUSH
12257: LD_VAR 0 2
12261: PPUSH
12262: LD_INT 57
12264: PUSH
12265: EMPTY
12266: LIST
12267: PPUSH
12268: CALL_OW 70
12272: ST_TO_ADDR
// if undone then
12273: LD_VAR 0 17
12277: IFFALSE 12299
// begin ComComplete ( i , undone [ 1 ] ) ;
12279: LD_VAR 0 15
12283: PPUSH
12284: LD_VAR 0 17
12288: PUSH
12289: LD_INT 1
12291: ARRAY
12292: PPUSH
12293: CALL 45689 0 2
// continue ;
12297: GO 12061
// end ; if cr or tmp or buildingsToBuild then
12299: LD_VAR 0 23
12303: IFTRUE 12311
12305: PUSH
12306: LD_VAR 0 16
12310: OR
12311: IFTRUE 12319
12313: PUSH
12314: LD_VAR 0 10
12318: OR
12319: IFFALSE 12395
// begin if IsInUnit ( i ) then
12321: LD_VAR 0 15
12325: PPUSH
12326: CALL_OW 310
12330: IFFALSE 12341
// ComExitBuilding ( i ) ;
12332: LD_VAR 0 15
12336: PPUSH
12337: CALL_OW 122
// if tmp then
12341: LD_VAR 0 16
12345: IFFALSE 12361
// SetTag ( i , tRepair ) else
12347: LD_VAR 0 15
12351: PPUSH
12352: LD_INT 3
12354: PPUSH
12355: CALL_OW 109
12359: GO 12393
// if cr then
12361: LD_VAR 0 23
12365: IFFALSE 12381
// SetTag ( i , tCrates ) else
12367: LD_VAR 0 15
12371: PPUSH
12372: LD_INT 2
12374: PPUSH
12375: CALL_OW 109
12379: GO 12393
// SetTag ( i , tBuild ) ;
12381: LD_VAR 0 15
12385: PPUSH
12386: LD_INT 5
12388: PPUSH
12389: CALL_OW 109
// end else
12393: GO 12421
// if not IsInUnit ( i ) then
12395: LD_VAR 0 15
12399: PPUSH
12400: CALL_OW 310
12404: NOT
12405: IFFALSE 12421
// ComEnterUnit ( i , depot ) ;
12407: LD_VAR 0 15
12411: PPUSH
12412: LD_VAR 0 39
12416: PPUSH
12417: CALL_OW 120
// end ; if tag = tRepair then
12421: LD_VAR 0 21
12425: PUSH
12426: LD_INT 3
12428: EQUAL
12429: IFFALSE 12535
// begin if IsInUnit ( i ) then
12431: LD_VAR 0 15
12435: PPUSH
12436: CALL_OW 310
12440: IFFALSE 12453
// begin ComExitBuilding ( i ) ;
12442: LD_VAR 0 15
12446: PPUSH
12447: CALL_OW 122
// continue ;
12451: GO 12061
// end ; if not tmp then
12453: LD_VAR 0 16
12457: NOT
12458: IFFALSE 12474
// begin SetTag ( i , 0 ) ;
12460: LD_VAR 0 15
12464: PPUSH
12465: LD_INT 0
12467: PPUSH
12468: CALL_OW 109
// continue ;
12472: GO 12061
// end ; if not HasTask ( i ) then
12474: LD_VAR 0 15
12478: PPUSH
12479: CALL_OW 314
12483: NOT
12484: IFFALSE 12504
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
12486: LD_VAR 0 15
12490: PPUSH
12491: LD_VAR 0 16
12495: PUSH
12496: LD_INT 1
12498: ARRAY
12499: PPUSH
12500: CALL_OW 130
// if not IsInarea ( i , area ) then
12504: LD_VAR 0 15
12508: PPUSH
12509: LD_VAR 0 2
12513: PPUSH
12514: CALL_OW 308
12518: NOT
12519: IFFALSE 12535
// ComMoveToArea ( i , area ) ;
12521: LD_VAR 0 15
12525: PPUSH
12526: LD_VAR 0 2
12530: PPUSH
12531: CALL_OW 113
// end ; if tag = tBuild then
12535: LD_VAR 0 21
12539: PUSH
12540: LD_INT 5
12542: EQUAL
12543: IFFALSE 13117
// begin if IsInUnit ( i ) then
12545: LD_VAR 0 15
12549: PPUSH
12550: CALL_OW 310
12554: IFFALSE 12567
// begin ComExitBuilding ( i ) ;
12556: LD_VAR 0 15
12560: PPUSH
12561: CALL_OW 122
// continue ;
12565: GO 12061
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
12567: LD_VAR 0 10
12571: NOT
12572: IFTRUE 12580
12574: PUSH
12575: LD_VAR 0 33
12579: OR
12580: IFTRUE 12588
12582: PUSH
12583: LD_VAR 0 34
12587: OR
12588: IFFALSE 12606
// begin SetTag ( i , 0 ) ;
12590: LD_VAR 0 15
12594: PPUSH
12595: LD_INT 0
12597: PPUSH
12598: CALL_OW 109
// continue ;
12602: GO 12061
// end else
12604: GO 12645
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
12606: LD_VAR 0 39
12610: PPUSH
12611: LD_VAR 0 10
12615: PUSH
12616: LD_INT 1
12618: ARRAY
12619: PUSH
12620: LD_INT 1
12622: ARRAY
12623: PPUSH
12624: CALL 79580 0 2
12628: NOT
12629: IFFALSE 12645
// begin SetTag ( i , 0 ) ;
12631: LD_VAR 0 15
12635: PPUSH
12636: LD_INT 0
12638: PPUSH
12639: CALL_OW 109
// continue ;
12643: GO 12061
// end ; undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
12645: LD_ADDR_VAR 0 17
12649: PUSH
12650: LD_VAR 0 2
12654: PPUSH
12655: LD_INT 57
12657: PUSH
12658: EMPTY
12659: LIST
12660: PPUSH
12661: CALL_OW 70
12665: ST_TO_ADDR
// if undone then
12666: LD_VAR 0 17
12670: IFFALSE 12692
// begin ComComplete ( i , undone [ 1 ] ) ;
12672: LD_VAR 0 15
12676: PPUSH
12677: LD_VAR 0 17
12681: PUSH
12682: LD_INT 1
12684: ARRAY
12685: PPUSH
12686: CALL 45689 0 2
// continue ;
12690: GO 12061
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_factory , b_barracks ] then
12692: LD_VAR 0 10
12696: PUSH
12697: LD_INT 1
12699: ARRAY
12700: PUSH
12701: LD_INT 1
12703: ARRAY
12704: PUSH
12705: LD_INT 3
12707: PUSH
12708: LD_INT 5
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: IN
12715: IFFALSE 12812
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) and CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
12717: LD_VAR 0 10
12721: PUSH
12722: LD_INT 1
12724: ARRAY
12725: PUSH
12726: LD_INT 2
12728: ARRAY
12729: PPUSH
12730: LD_VAR 0 10
12734: PUSH
12735: LD_INT 1
12737: ARRAY
12738: PUSH
12739: LD_INT 3
12741: ARRAY
12742: PPUSH
12743: CALL_OW 428
12747: IFFALSE 12773
12749: PUSH
12750: LD_VAR 0 39
12754: PPUSH
12755: LD_VAR 0 10
12759: PUSH
12760: LD_INT 1
12762: ARRAY
12763: PUSH
12764: LD_INT 1
12766: ARRAY
12767: PPUSH
12768: CALL 79580 0 2
12772: AND
12773: IFFALSE 12810
// begin ComUpgrade ( HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) ) ;
12775: LD_VAR 0 10
12779: PUSH
12780: LD_INT 1
12782: ARRAY
12783: PUSH
12784: LD_INT 2
12786: ARRAY
12787: PPUSH
12788: LD_VAR 0 10
12792: PUSH
12793: LD_INT 1
12795: ARRAY
12796: PUSH
12797: LD_INT 3
12799: ARRAY
12800: PPUSH
12801: CALL_OW 428
12805: PPUSH
12806: CALL_OW 146
// end ; continue ;
12810: GO 12061
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_lab_half , b_lab_full ] then
12812: LD_VAR 0 10
12816: PUSH
12817: LD_INT 1
12819: ARRAY
12820: PUSH
12821: LD_INT 1
12823: ARRAY
12824: PUSH
12825: LD_INT 7
12827: PUSH
12828: LD_INT 8
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: IN
12835: IFFALSE 12945
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) and CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
12837: LD_VAR 0 10
12841: PUSH
12842: LD_INT 1
12844: ARRAY
12845: PUSH
12846: LD_INT 2
12848: ARRAY
12849: PPUSH
12850: LD_VAR 0 10
12854: PUSH
12855: LD_INT 1
12857: ARRAY
12858: PUSH
12859: LD_INT 3
12861: ARRAY
12862: PPUSH
12863: CALL_OW 428
12867: IFFALSE 12893
12869: PUSH
12870: LD_VAR 0 39
12874: PPUSH
12875: LD_VAR 0 10
12879: PUSH
12880: LD_INT 1
12882: ARRAY
12883: PUSH
12884: LD_INT 1
12886: ARRAY
12887: PPUSH
12888: CALL 79580 0 2
12892: AND
12893: IFFALSE 12943
// begin ComUpgradeLab ( HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) , buildingsToBuild [ 1 ] [ 5 ] ) ;
12895: LD_VAR 0 10
12899: PUSH
12900: LD_INT 1
12902: ARRAY
12903: PUSH
12904: LD_INT 2
12906: ARRAY
12907: PPUSH
12908: LD_VAR 0 10
12912: PUSH
12913: LD_INT 1
12915: ARRAY
12916: PUSH
12917: LD_INT 3
12919: ARRAY
12920: PPUSH
12921: CALL_OW 428
12925: PPUSH
12926: LD_VAR 0 10
12930: PUSH
12931: LD_INT 1
12933: ARRAY
12934: PUSH
12935: LD_INT 5
12937: ARRAY
12938: PPUSH
12939: CALL_OW 147
// end ; continue ;
12943: GO 12061
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_bunker , b_turret ] then
12945: LD_VAR 0 10
12949: PUSH
12950: LD_INT 1
12952: ARRAY
12953: PUSH
12954: LD_INT 1
12956: ARRAY
12957: PUSH
12958: LD_INT 32
12960: PUSH
12961: LD_INT 33
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: IN
12968: IFFALSE 13044
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) then
12970: LD_VAR 0 10
12974: PUSH
12975: LD_INT 1
12977: ARRAY
12978: PUSH
12979: LD_INT 2
12981: ARRAY
12982: PPUSH
12983: LD_VAR 0 10
12987: PUSH
12988: LD_INT 1
12990: ARRAY
12991: PUSH
12992: LD_INT 3
12994: ARRAY
12995: PPUSH
12996: CALL_OW 428
13000: IFFALSE 13044
// begin ComDismantle ( i , HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) ) ;
13002: LD_VAR 0 15
13006: PPUSH
13007: LD_VAR 0 10
13011: PUSH
13012: LD_INT 1
13014: ARRAY
13015: PUSH
13016: LD_INT 2
13018: ARRAY
13019: PPUSH
13020: LD_VAR 0 10
13024: PUSH
13025: LD_INT 1
13027: ARRAY
13028: PUSH
13029: LD_INT 3
13031: ARRAY
13032: PPUSH
13033: CALL_OW 428
13037: PPUSH
13038: CALL_OW 167
// continue ;
13042: GO 12061
// end ; end ; if not HasTask ( i ) then
13044: LD_VAR 0 15
13048: PPUSH
13049: CALL_OW 314
13053: NOT
13054: IFFALSE 13117
// ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
13056: LD_VAR 0 15
13060: PPUSH
13061: LD_VAR 0 10
13065: PUSH
13066: LD_INT 1
13068: ARRAY
13069: PUSH
13070: LD_INT 1
13072: ARRAY
13073: PPUSH
13074: LD_VAR 0 10
13078: PUSH
13079: LD_INT 1
13081: ARRAY
13082: PUSH
13083: LD_INT 2
13085: ARRAY
13086: PPUSH
13087: LD_VAR 0 10
13091: PUSH
13092: LD_INT 1
13094: ARRAY
13095: PUSH
13096: LD_INT 3
13098: ARRAY
13099: PPUSH
13100: LD_VAR 0 10
13104: PUSH
13105: LD_INT 1
13107: ARRAY
13108: PUSH
13109: LD_INT 4
13111: ARRAY
13112: PPUSH
13113: CALL_OW 145
// end ; if tag = tCrates then
13117: LD_VAR 0 21
13121: PUSH
13122: LD_INT 2
13124: EQUAL
13125: IFFALSE 13264
// begin if IsInUnit ( i ) then
13127: LD_VAR 0 15
13131: PPUSH
13132: CALL_OW 310
13136: IFFALSE 13149
// begin ComExitBuilding ( i ) ;
13138: LD_VAR 0 15
13142: PPUSH
13143: CALL_OW 122
// continue ;
13147: GO 12061
// end ; if not cr then
13149: LD_VAR 0 23
13153: NOT
13154: IFFALSE 13170
// begin SetTag ( i , 0 ) ;
13156: LD_VAR 0 15
13160: PPUSH
13161: LD_INT 0
13163: PPUSH
13164: CALL_OW 109
// continue ;
13168: GO 12061
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
13170: LD_VAR 0 15
13174: PPUSH
13175: CALL_OW 314
13179: NOT
13180: IFFALSE 13235
13182: PUSH
13183: LD_INT 81
13185: PUSH
13186: LD_VAR 0 1
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: PUSH
13195: LD_INT 92
13197: PUSH
13198: LD_VAR 0 23
13202: PUSH
13203: LD_INT 1
13205: ARRAY
13206: PUSH
13207: LD_VAR 0 23
13211: PUSH
13212: LD_INT 2
13214: ARRAY
13215: PUSH
13216: LD_INT 12
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PPUSH
13229: CALL_OW 69
13233: NOT
13234: AND
13235: IFFALSE 13264
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
13237: LD_VAR 0 15
13241: PPUSH
13242: LD_VAR 0 23
13246: PUSH
13247: LD_INT 1
13249: ARRAY
13250: PPUSH
13251: LD_VAR 0 23
13255: PUSH
13256: LD_INT 2
13258: ARRAY
13259: PPUSH
13260: CALL_OW 117
// end ; end ;
13264: GO 12061
13266: POP
13267: POP
// end ; cranes := UnitFilter ( vehicles , [ [ f_weapon , us_crane ] , [ f_ok ] ] ) ;
13268: LD_ADDR_VAR 0 31
13272: PUSH
13273: LD_VAR 0 7
13277: PPUSH
13278: LD_INT 34
13280: PUSH
13281: LD_INT 13
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PUSH
13288: LD_INT 50
13290: PUSH
13291: EMPTY
13292: LIST
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PPUSH
13298: CALL_OW 72
13302: ST_TO_ADDR
// if cranes then
13303: LD_VAR 0 31
13307: IFFALSE 13372
// begin if tmp then
13309: LD_VAR 0 16
13313: IFFALSE 13358
// begin for i in cranes do
13315: LD_ADDR_VAR 0 15
13319: PUSH
13320: LD_VAR 0 31
13324: PUSH
13325: FOR_IN
13326: IFFALSE 13354
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
13328: LD_VAR 0 15
13332: PPUSH
13333: LD_VAR 0 16
13337: PPUSH
13338: LD_VAR 0 15
13342: PPUSH
13343: CALL_OW 74
13347: PPUSH
13348: CALL_OW 130
13352: GO 13325
13354: POP
13355: POP
// end else
13356: GO 13372
// ComBackOnParking ( cranes , parkingPoint ) ;
13358: LD_VAR 0 31
13362: PPUSH
13363: LD_VAR 0 12
13367: PPUSH
13368: CALL 80482 0 2
// end ; vehicles2 := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] ] ) ;
13372: LD_ADDR_VAR 0 29
13376: PUSH
13377: LD_INT 22
13379: PUSH
13380: LD_VAR 0 1
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: LD_INT 33
13391: PUSH
13392: LD_INT 2
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: PPUSH
13403: CALL_OW 69
13407: ST_TO_ADDR
// if vehicles2 then
13408: LD_VAR 0 29
13412: IFFALSE 13479
// for i in UnitFilter ( vehicles2 , [ [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do
13414: LD_ADDR_VAR 0 15
13418: PUSH
13419: LD_VAR 0 29
13423: PPUSH
13424: LD_INT 33
13426: PUSH
13427: LD_INT 2
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 50
13436: PUSH
13437: EMPTY
13438: LIST
13439: PUSH
13440: LD_INT 3
13442: PUSH
13443: LD_INT 61
13445: PUSH
13446: EMPTY
13447: LIST
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: LIST
13457: PPUSH
13458: CALL_OW 72
13462: PUSH
13463: FOR_IN
13464: IFFALSE 13477
// Connect ( i ) ;
13466: LD_VAR 0 15
13470: PPUSH
13471: CALL 45797 0 1
13475: GO 13463
13477: POP
13478: POP
// if vehicles then
13479: LD_VAR 0 7
13483: IFFALSE 14545
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ru_crane ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , us_cargo_bay ] ] ] , [ f_ok ] ] ) ;
13485: LD_ADDR_VAR 0 7
13489: PUSH
13490: LD_VAR 0 7
13494: PPUSH
13495: LD_INT 3
13497: PUSH
13498: LD_INT 2
13500: PUSH
13501: LD_INT 34
13503: PUSH
13504: LD_INT 52
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: PUSH
13511: LD_INT 34
13513: PUSH
13514: LD_INT 51
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: LD_INT 34
13523: PUSH
13524: LD_INT 13
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: PUSH
13531: LD_INT 34
13533: PUSH
13534: LD_INT 12
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: PUSH
13552: LD_INT 50
13554: PUSH
13555: EMPTY
13556: LIST
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: PPUSH
13562: CALL_OW 72
13566: ST_TO_ADDR
// if vehicles then
13567: LD_VAR 0 7
13571: IFFALSE 14545
// begin for i in vehicles do
13573: LD_ADDR_VAR 0 15
13577: PUSH
13578: LD_VAR 0 7
13582: PUSH
13583: FOR_IN
13584: IFFALSE 14543
// begin tag := GetTag ( i ) ;
13586: LD_ADDR_VAR 0 21
13590: PUSH
13591: LD_VAR 0 15
13595: PPUSH
13596: CALL_OW 110
13600: ST_TO_ADDR
// if not tag then
13601: LD_VAR 0 21
13605: NOT
13606: IFFALSE 13743
// begin if GetControl ( i ) = control_manual then
13608: LD_VAR 0 15
13612: PPUSH
13613: CALL_OW 263
13617: PUSH
13618: LD_INT 1
13620: EQUAL
13621: IFFALSE 13729
// begin drivers := UnitFilter ( mech , [ f_tag , tMech ] ) ;
13623: LD_ADDR_VAR 0 26
13627: PUSH
13628: LD_VAR 0 20
13632: PPUSH
13633: LD_INT 120
13635: PUSH
13636: LD_INT 7
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PPUSH
13643: CALL_OW 72
13647: ST_TO_ADDR
// if not drivers then
13648: LD_VAR 0 26
13652: NOT
13653: IFFALSE 13709
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
13655: LD_ADDR_VAR 0 26
13659: PUSH
13660: LD_VAR 0 20
13664: PPUSH
13665: LD_INT 3
13667: PUSH
13668: LD_INT 120
13670: PUSH
13671: LD_INT 7
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PPUSH
13682: CALL_OW 72
13686: ST_TO_ADDR
// if drivers then
13687: LD_VAR 0 26
13691: IFFALSE 13709
// begin SetTag ( drivers [ 1 ] , tMech ) ;
13693: LD_VAR 0 26
13697: PUSH
13698: LD_INT 1
13700: ARRAY
13701: PPUSH
13702: LD_INT 7
13704: PPUSH
13705: CALL_OW 109
// end ; end ; if drivers then
13709: LD_VAR 0 26
13713: IFFALSE 13727
// SetTag ( i , tBusy ) ;
13715: LD_VAR 0 15
13719: PPUSH
13720: LD_INT 8
13722: PPUSH
13723: CALL_OW 109
// continue ;
13727: GO 13583
// end ; SetTag ( i , tBusy ) ;
13729: LD_VAR 0 15
13733: PPUSH
13734: LD_INT 8
13736: PPUSH
13737: CALL_OW 109
// end else
13741: GO 14541
// if tag = tBusy then
13743: LD_VAR 0 21
13747: PUSH
13748: LD_INT 8
13750: EQUAL
13751: IFFALSE 14006
// begin if GetLives ( i ) = 1000 then
13753: LD_VAR 0 15
13757: PPUSH
13758: CALL_OW 256
13762: PUSH
13763: LD_INT 1000
13765: EQUAL
13766: IFFALSE 14004
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
13768: LD_VAR 0 15
13772: PPUSH
13773: CALL_OW 263
13777: PUSH
13778: LD_INT 1
13780: EQUAL
13781: IFFALSE 13795
13783: PUSH
13784: LD_VAR 0 15
13788: PPUSH
13789: CALL_OW 311
13793: NOT
13794: AND
13795: IFFALSE 13972
// begin drivers := UnitFilter ( mech , [ f_tag , tMech ] ) ;
13797: LD_ADDR_VAR 0 26
13801: PUSH
13802: LD_VAR 0 20
13806: PPUSH
13807: LD_INT 120
13809: PUSH
13810: LD_INT 7
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: PPUSH
13817: CALL_OW 72
13821: ST_TO_ADDR
// if not drivers then
13822: LD_VAR 0 26
13826: NOT
13827: IFFALSE 13843
// begin SetTag ( i , 0 ) ;
13829: LD_VAR 0 15
13833: PPUSH
13834: LD_INT 0
13836: PPUSH
13837: CALL_OW 109
// continue ;
13841: GO 13583
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
13843: LD_VAR 0 26
13847: PUSH
13848: LD_INT 1
13850: ARRAY
13851: PPUSH
13852: CALL_OW 310
13856: IFFALSE 13874
13858: PUSH
13859: LD_VAR 0 26
13863: PUSH
13864: LD_INT 1
13866: ARRAY
13867: PPUSH
13868: CALL 73065 0 1
13872: NOT
13873: AND
13874: IFFALSE 13889
// ComExitBuilding ( drivers [ 1 ] ) ;
13876: LD_VAR 0 26
13880: PUSH
13881: LD_INT 1
13883: ARRAY
13884: PPUSH
13885: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
13889: LD_VAR 0 7
13893: PPUSH
13894: LD_INT 120
13896: PUSH
13897: LD_INT 3
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: PPUSH
13904: CALL_OW 72
13908: IFFALSE 13926
13910: PUSH
13911: LD_VAR 0 26
13915: PUSH
13916: LD_INT 1
13918: ARRAY
13919: PPUSH
13920: CALL_OW 314
13924: NOT
13925: AND
13926: IFTRUE 13950
13928: PUSH
13929: LD_VAR 0 7
13933: PPUSH
13934: LD_INT 120
13936: PUSH
13937: LD_INT 3
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PPUSH
13944: CALL_OW 72
13948: NOT
13949: OR
13950: IFFALSE 13970
// ComEnterUnit ( drivers [ 1 ] , i ) ;
13952: LD_VAR 0 26
13956: PUSH
13957: LD_INT 1
13959: ARRAY
13960: PPUSH
13961: LD_VAR 0 15
13965: PPUSH
13966: CALL_OW 120
// continue ;
13970: GO 13583
// end ; if allowToPatrol then
13972: LD_VAR 0 13
13976: IFFALSE 13992
// SetTag ( i , tPatrol ) else
13978: LD_VAR 0 15
13982: PPUSH
13983: LD_INT 15
13985: PPUSH
13986: CALL_OW 109
13990: GO 14004
// SetTag ( i , tAttack ) ;
13992: LD_VAR 0 15
13996: PPUSH
13997: LD_INT 13
13999: PPUSH
14000: CALL_OW 109
// end ; end else
14004: GO 14541
// if tag = tPatrol then
14006: LD_VAR 0 21
14010: PUSH
14011: LD_INT 15
14013: EQUAL
14014: IFFALSE 14208
// begin if GetLives ( i ) < 650 then
14016: LD_VAR 0 15
14020: PPUSH
14021: CALL_OW 256
14025: PUSH
14026: LD_INT 650
14028: LESS
14029: IFFALSE 14072
// begin SetTag ( i , tVehRepair ) ;
14031: LD_VAR 0 15
14035: PPUSH
14036: LD_INT 9
14038: PPUSH
14039: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14043: LD_VAR 0 15
14047: PPUSH
14048: LD_VAR 0 12
14052: PUSH
14053: LD_INT 1
14055: ARRAY
14056: PPUSH
14057: LD_VAR 0 12
14061: PUSH
14062: LD_INT 2
14064: ARRAY
14065: PPUSH
14066: CALL_OW 111
// continue ;
14070: GO 13583
// end ; if GetEngine ( i ) = engine_combustion then
14072: LD_VAR 0 15
14076: PPUSH
14077: CALL_OW 262
14081: PUSH
14082: LD_INT 1
14084: EQUAL
14085: IFFALSE 14132
// if GetFuel ( i ) < 30 then
14087: LD_VAR 0 15
14091: PPUSH
14092: CALL_OW 261
14096: PUSH
14097: LD_INT 30
14099: LESS
14100: IFFALSE 14132
// begin ComMoveUnit ( i , depot ) ;
14102: LD_VAR 0 15
14106: PPUSH
14107: LD_VAR 0 39
14111: PPUSH
14112: CALL_OW 112
// AddComRefuel ( i , depot ) ;
14116: LD_VAR 0 15
14120: PPUSH
14121: LD_VAR 0 39
14125: PPUSH
14126: CALL_OW 210
// continue ;
14130: GO 13583
// end ; if GetDistUnitXY ( i , allowToPatrol [ 1 ] , allowToPatrol [ 2 ] ) > 12 and not HasTask ( i ) then
14132: LD_VAR 0 15
14136: PPUSH
14137: LD_VAR 0 13
14141: PUSH
14142: LD_INT 1
14144: ARRAY
14145: PPUSH
14146: LD_VAR 0 13
14150: PUSH
14151: LD_INT 2
14153: ARRAY
14154: PPUSH
14155: CALL_OW 297
14159: PUSH
14160: LD_INT 12
14162: GREATER
14163: IFFALSE 14177
14165: PUSH
14166: LD_VAR 0 15
14170: PPUSH
14171: CALL_OW 314
14175: NOT
14176: AND
14177: IFFALSE 14206
// ComAgressiveMove ( i , allowToPatrol [ 1 ] , allowToPatrol [ 2 ] ) ;
14179: LD_VAR 0 15
14183: PPUSH
14184: LD_VAR 0 13
14188: PUSH
14189: LD_INT 1
14191: ARRAY
14192: PPUSH
14193: LD_VAR 0 13
14197: PUSH
14198: LD_INT 2
14200: ARRAY
14201: PPUSH
14202: CALL_OW 114
// end else
14206: GO 14541
// if tag = tAttack then
14208: LD_VAR 0 21
14212: PUSH
14213: LD_INT 13
14215: EQUAL
14216: IFFALSE 14398
// begin enemy := enemyInBase ;
14218: LD_ADDR_VAR 0 28
14222: PUSH
14223: LD_VAR 0 33
14227: ST_TO_ADDR
// if not enemy then
14228: LD_VAR 0 28
14232: NOT
14233: IFFALSE 14245
// enemy := enemyOuterBase ;
14235: LD_ADDR_VAR 0 28
14239: PUSH
14240: LD_VAR 0 34
14244: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
14245: LD_VAR 0 28
14249: NOT
14250: IFFALSE 14285
14252: PUSH
14253: LD_VAR 0 15
14257: PPUSH
14258: LD_VAR 0 12
14262: PUSH
14263: LD_INT 1
14265: ARRAY
14266: PPUSH
14267: LD_VAR 0 12
14271: PUSH
14272: LD_INT 2
14274: ARRAY
14275: PPUSH
14276: CALL_OW 297
14280: PUSH
14281: LD_INT 10
14283: GREATER
14284: AND
14285: IFFALSE 14316
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14287: LD_VAR 0 15
14291: PPUSH
14292: LD_VAR 0 12
14296: PUSH
14297: LD_INT 1
14299: ARRAY
14300: PPUSH
14301: LD_VAR 0 12
14305: PUSH
14306: LD_INT 2
14308: ARRAY
14309: PPUSH
14310: CALL_OW 111
// continue ;
14314: GO 13583
// end ; if GetLives ( i ) < 650 then
14316: LD_VAR 0 15
14320: PPUSH
14321: CALL_OW 256
14325: PUSH
14326: LD_INT 650
14328: LESS
14329: IFFALSE 14372
// begin SetTag ( i , tVehRepair ) ;
14331: LD_VAR 0 15
14335: PPUSH
14336: LD_INT 9
14338: PPUSH
14339: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14343: LD_VAR 0 15
14347: PPUSH
14348: LD_VAR 0 12
14352: PUSH
14353: LD_INT 1
14355: ARRAY
14356: PPUSH
14357: LD_VAR 0 12
14361: PUSH
14362: LD_INT 2
14364: ARRAY
14365: PPUSH
14366: CALL_OW 111
// continue ;
14370: GO 13583
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14372: LD_VAR 0 15
14376: PPUSH
14377: LD_VAR 0 28
14381: PPUSH
14382: LD_VAR 0 15
14386: PPUSH
14387: CALL_OW 74
14391: PPUSH
14392: CALL_OW 115
// end else
14396: GO 14541
// if tag = tVehRepair then
14398: LD_VAR 0 21
14402: PUSH
14403: LD_INT 9
14405: EQUAL
14406: IFFALSE 14541
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 6 then
14408: LD_VAR 0 15
14412: PPUSH
14413: LD_VAR 0 12
14417: PUSH
14418: LD_INT 1
14420: ARRAY
14421: PPUSH
14422: LD_VAR 0 12
14426: PUSH
14427: LD_INT 2
14429: ARRAY
14430: PPUSH
14431: CALL_OW 297
14435: PUSH
14436: LD_INT 6
14438: GREATER
14439: IFFALSE 14470
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14441: LD_VAR 0 15
14445: PPUSH
14446: LD_VAR 0 12
14450: PUSH
14451: LD_INT 1
14453: ARRAY
14454: PPUSH
14455: LD_VAR 0 12
14459: PUSH
14460: LD_INT 2
14462: ARRAY
14463: PPUSH
14464: CALL_OW 111
// continue ;
14468: GO 13583
// end ; if GetLives ( i ) = 1000 then
14470: LD_VAR 0 15
14474: PPUSH
14475: CALL_OW 256
14479: PUSH
14480: LD_INT 1000
14482: EQUAL
14483: IFFALSE 14499
// begin SetTag ( i , tBusy ) ;
14485: LD_VAR 0 15
14489: PPUSH
14490: LD_INT 8
14492: PPUSH
14493: CALL_OW 109
// continue ;
14497: GO 13583
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
14499: LD_VAR 0 15
14503: PPUSH
14504: CALL_OW 263
14508: PUSH
14509: LD_INT 1
14511: EQUAL
14512: IFFALSE 14525
14514: PUSH
14515: LD_VAR 0 15
14519: PPUSH
14520: CALL_OW 311
14524: AND
14525: IFFALSE 14541
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
14527: LD_VAR 0 15
14531: PPUSH
14532: CALL_OW 311
14536: PPUSH
14537: CALL 77199 0 1
// end ; end ;
14541: GO 13583
14543: POP
14544: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
14545: LD_ADDR_VAR 0 25
14549: PUSH
14550: LD_VAR 0 6
14554: PPUSH
14555: LD_INT 2
14557: PUSH
14558: LD_INT 25
14560: PUSH
14561: LD_INT 1
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: PUSH
14568: LD_INT 25
14570: PUSH
14571: LD_INT 8
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: PUSH
14578: LD_INT 25
14580: PUSH
14581: LD_INT 5
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: PUSH
14588: LD_INT 25
14590: PUSH
14591: LD_INT 9
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: PUSH
14605: LD_INT 50
14607: PUSH
14608: EMPTY
14609: LIST
14610: PUSH
14611: EMPTY
14612: LIST
14613: LIST
14614: PPUSH
14615: CALL_OW 72
14619: ST_TO_ADDR
// if sol then
14620: LD_VAR 0 25
14624: IFFALSE 15568
// begin if enemyInBase then
14626: LD_VAR 0 33
14630: IFFALSE 14809
// begin for i in sol do
14632: LD_ADDR_VAR 0 15
14636: PUSH
14637: LD_VAR 0 25
14641: PUSH
14642: FOR_IN
14643: IFFALSE 14805
// begin tw := IsInUnit ( i ) ;
14645: LD_ADDR_VAR 0 22
14649: PUSH
14650: LD_VAR 0 15
14654: PPUSH
14655: CALL_OW 310
14659: ST_TO_ADDR
// if tw then
14660: LD_VAR 0 22
14664: IFFALSE 14747
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
14666: LD_VAR 0 22
14670: PUSH
14671: LD_INT 22
14673: PUSH
14674: LD_VAR 0 1
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: PUSH
14683: LD_INT 101
14685: PUSH
14686: LD_VAR 0 40
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: PUSH
14695: LD_INT 2
14697: PUSH
14698: LD_INT 30
14700: PUSH
14701: LD_INT 32
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PUSH
14708: LD_INT 30
14710: PUSH
14711: LD_INT 31
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: LIST
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: LIST
14727: PPUSH
14728: CALL_OW 69
14732: IN
14733: NOT
14734: IFFALSE 14745
// ComExitBuilding ( i ) ;
14736: LD_VAR 0 15
14740: PPUSH
14741: CALL_OW 122
// end else
14745: GO 14803
// if IsInArea ( i , area ) then
14747: LD_VAR 0 15
14751: PPUSH
14752: LD_VAR 0 2
14756: PPUSH
14757: CALL_OW 308
14761: IFFALSE 14789
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
14763: LD_VAR 0 15
14767: PPUSH
14768: LD_VAR 0 33
14772: PPUSH
14773: LD_VAR 0 15
14777: PPUSH
14778: CALL_OW 74
14782: PPUSH
14783: CALL_OW 115
14787: GO 14803
// ComMoveToArea ( i , area ) ;
14789: LD_VAR 0 15
14793: PPUSH
14794: LD_VAR 0 2
14798: PPUSH
14799: CALL_OW 113
// end ;
14803: GO 14642
14805: POP
14806: POP
// end else
14807: GO 15568
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
14809: LD_ADDR_VAR 0 35
14813: PUSH
14814: LD_VAR 0 2
14818: PPUSH
14819: LD_INT 3
14821: PUSH
14822: LD_INT 62
14824: PUSH
14825: EMPTY
14826: LIST
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: LD_INT 3
14834: PUSH
14835: LD_INT 57
14837: PUSH
14838: EMPTY
14839: LIST
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: LD_INT 2
14847: PUSH
14848: LD_INT 30
14850: PUSH
14851: LD_INT 32
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: PUSH
14858: LD_INT 30
14860: PUSH
14861: LD_INT 4
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: PUSH
14868: LD_INT 30
14870: PUSH
14871: LD_INT 5
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PUSH
14878: LD_INT 30
14880: PUSH
14881: LD_INT 31
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: LIST
14899: PPUSH
14900: CALL_OW 70
14904: ST_TO_ADDR
// emptyTowers := [ ] ;
14905: LD_ADDR_VAR 0 37
14909: PUSH
14910: EMPTY
14911: ST_TO_ADDR
// if empty then
14912: LD_VAR 0 35
14916: IFFALSE 14982
// emptyTowers := UnitFilter ( empty , [ [ f_not , [ f_tag , tTower ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
14918: LD_ADDR_VAR 0 37
14922: PUSH
14923: LD_VAR 0 35
14927: PPUSH
14928: LD_INT 3
14930: PUSH
14931: LD_INT 120
14933: PUSH
14934: LD_INT 10
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 2
14947: PUSH
14948: LD_INT 30
14950: PUSH
14951: LD_INT 32
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PUSH
14958: LD_INT 30
14960: PUSH
14961: LD_INT 33
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: LIST
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PPUSH
14977: CALL_OW 72
14981: ST_TO_ADDR
// for i in sol do
14982: LD_ADDR_VAR 0 15
14986: PUSH
14987: LD_VAR 0 25
14991: PUSH
14992: FOR_IN
14993: IFFALSE 15566
// begin tag := GetTag ( i ) ;
14995: LD_ADDR_VAR 0 21
14999: PUSH
15000: LD_VAR 0 15
15004: PPUSH
15005: CALL_OW 110
15009: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
15010: LD_VAR 0 15
15014: PPUSH
15015: CALL_OW 256
15019: PUSH
15020: LD_INT 1000
15022: LESS
15023: IFFALSE 15035
15025: PUSH
15026: LD_VAR 0 21
15030: PUSH
15031: LD_INT 1
15033: NONEQUAL
15034: AND
15035: IFFALSE 15087
// begin SetTag ( i , tHeal ) ;
15037: LD_VAR 0 15
15041: PPUSH
15042: LD_INT 1
15044: PPUSH
15045: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
15049: LD_VAR 0 15
15053: PPUSH
15054: LD_VAR 0 11
15058: PUSH
15059: LD_INT 1
15061: ARRAY
15062: PPUSH
15063: LD_VAR 0 11
15067: PUSH
15068: LD_INT 2
15070: ARRAY
15071: PPUSH
15072: CALL_OW 111
// AddComHold ( i ) ;
15076: LD_VAR 0 15
15080: PPUSH
15081: CALL_OW 200
// continue ;
15085: GO 14992
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
15087: LD_VAR 0 15
15091: PPUSH
15092: CALL_OW 256
15096: PUSH
15097: LD_INT 1000
15099: EQUAL
15100: IFFALSE 15112
15102: PUSH
15103: LD_VAR 0 21
15107: PUSH
15108: LD_INT 1
15110: EQUAL
15111: AND
15112: IFFALSE 15128
// begin SetTag ( i , 0 ) ;
15114: LD_VAR 0 15
15118: PPUSH
15119: LD_INT 0
15121: PPUSH
15122: CALL_OW 109
// continue ;
15126: GO 14992
// end ; if HasTask ( i ) then
15128: LD_VAR 0 15
15132: PPUSH
15133: CALL_OW 314
15137: IFFALSE 15141
// continue ;
15139: GO 14992
// if not IsInUnit ( i ) and not tag and empty then
15141: LD_VAR 0 15
15145: PPUSH
15146: CALL_OW 310
15150: NOT
15151: IFFALSE 15160
15153: PUSH
15154: LD_VAR 0 21
15158: NOT
15159: AND
15160: IFFALSE 15168
15162: PUSH
15163: LD_VAR 0 35
15167: AND
15168: IFFALSE 15208
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
15170: LD_VAR 0 15
15174: PPUSH
15175: LD_VAR 0 35
15179: PUSH
15180: LD_INT 1
15182: ARRAY
15183: PPUSH
15184: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
15188: LD_ADDR_VAR 0 35
15192: PUSH
15193: LD_VAR 0 35
15197: PPUSH
15198: LD_INT 1
15200: PPUSH
15201: CALL_OW 3
15205: ST_TO_ADDR
// continue ;
15206: GO 14992
// end ; if IsInUnit ( i ) and not tag and Count ( emptyTowers ) then
15208: LD_VAR 0 15
15212: PPUSH
15213: CALL_OW 310
15217: IFFALSE 15226
15219: PUSH
15220: LD_VAR 0 21
15224: NOT
15225: AND
15226: IFFALSE 15239
15228: PUSH
15229: LD_VAR 0 37
15233: PPUSH
15234: CALL 39553 0 1
15238: AND
15239: IFFALSE 15435
// begin if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
15241: LD_VAR 0 15
15245: PPUSH
15246: CALL_OW 310
15250: PPUSH
15251: CALL_OW 266
15255: PUSH
15256: LD_INT 32
15258: PUSH
15259: LD_INT 31
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: IN
15266: IFFALSE 15270
// continue ;
15268: GO 14992
// SetTag ( i , tTower ) ;
15270: LD_VAR 0 15
15274: PPUSH
15275: LD_INT 10
15277: PPUSH
15278: CALL_OW 109
// SetTag ( emptyTowers [ 1 ] , tTower ) ;
15282: LD_VAR 0 37
15286: PUSH
15287: LD_INT 1
15289: ARRAY
15290: PPUSH
15291: LD_INT 10
15293: PPUSH
15294: CALL_OW 109
// ComExit ( i ) ;
15298: LD_VAR 0 15
15302: PPUSH
15303: CALL 75883 0 1
// AddComEnterUnit ( i , emptyTowers [ 1 ] ) ;
15307: LD_VAR 0 15
15311: PPUSH
15312: LD_VAR 0 37
15316: PUSH
15317: LD_INT 1
15319: ARRAY
15320: PPUSH
15321: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
15325: LD_INT 35
15327: PPUSH
15328: CALL_OW 67
// if not HasTask ( i ) then
15332: LD_VAR 0 15
15336: PPUSH
15337: CALL_OW 314
15341: NOT
15342: IFFALSE 15362
// ComEnterUnit ( i , emptyTowers [ 1 ] ) ;
15344: LD_VAR 0 15
15348: PPUSH
15349: LD_VAR 0 37
15353: PUSH
15354: LD_INT 1
15356: ARRAY
15357: PPUSH
15358: CALL_OW 120
// if not IsEmpty ( emptyTowers [ 1 ] ) then
15362: LD_VAR 0 37
15366: PUSH
15367: LD_INT 1
15369: ARRAY
15370: PPUSH
15371: CALL 39575 0 1
15375: NOT
15376: IFFALSE 15380
// break ;
15378: GO 15405
// until IsInUnit ( i ) or not IsOk ( i ) ;
15380: LD_VAR 0 15
15384: PPUSH
15385: CALL_OW 310
15389: IFTRUE 15403
15391: PUSH
15392: LD_VAR 0 15
15396: PPUSH
15397: CALL_OW 302
15401: NOT
15402: OR
15403: IFFALSE 15325
// SetTag ( i , 0 ) ;
15405: LD_VAR 0 15
15409: PPUSH
15410: LD_INT 0
15412: PPUSH
15413: CALL_OW 109
// SetTag ( emptyTowers [ 1 ] , 0 ) ;
15417: LD_VAR 0 37
15421: PUSH
15422: LD_INT 1
15424: ARRAY
15425: PPUSH
15426: LD_INT 0
15428: PPUSH
15429: CALL_OW 109
// continue ;
15433: GO 14992
// end ; if IsInUnit ( i ) and not tag and GetTech ( tech_LasSight , side ) = state_researched and GetClass ( i ) <> class_sniper then
15435: LD_VAR 0 15
15439: PPUSH
15440: CALL_OW 310
15444: IFFALSE 15453
15446: PUSH
15447: LD_VAR 0 21
15451: NOT
15452: AND
15453: IFFALSE 15473
15455: PUSH
15456: LD_INT 12
15458: PPUSH
15459: LD_VAR 0 1
15463: PPUSH
15464: CALL_OW 321
15468: PUSH
15469: LD_INT 2
15471: EQUAL
15472: AND
15473: IFFALSE 15490
15475: PUSH
15476: LD_VAR 0 15
15480: PPUSH
15481: CALL_OW 257
15485: PUSH
15486: LD_INT 5
15488: NONEQUAL
15489: AND
15490: IFFALSE 15564
// begin tmp := IsInUnit ( i ) ;
15492: LD_ADDR_VAR 0 16
15496: PUSH
15497: LD_VAR 0 15
15501: PPUSH
15502: CALL_OW 310
15506: ST_TO_ADDR
// if GetBType ( tmp ) = b_barracks then
15507: LD_VAR 0 16
15511: PPUSH
15512: CALL_OW 266
15516: PUSH
15517: LD_INT 5
15519: EQUAL
15520: IFFALSE 15564
// begin if UnitFilter ( UnitsInside ( tmp ) , [ f_class , class_soldier ] ) > 3 then
15522: LD_VAR 0 16
15526: PPUSH
15527: CALL_OW 313
15531: PPUSH
15532: LD_INT 25
15534: PUSH
15535: LD_INT 1
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PPUSH
15542: CALL_OW 72
15546: PUSH
15547: LD_INT 3
15549: GREATER
15550: IFFALSE 15564
// SetClass ( i , class_sniper ) ;
15552: LD_VAR 0 15
15556: PPUSH
15557: LD_INT 5
15559: PPUSH
15560: CALL_OW 336
// end ; end ; end ;
15564: GO 14992
15566: POP
15567: POP
// end ; end ; end ; end_of_file
15568: LD_VAR 0 14
15572: RET
// every 1 1$25 trigger GetResourceArea ( playerCratesArea , mat_cans ) < [ 18 , 15 , 12 ] [ Difficulty ] do
15573: LD_INT 3
15575: PPUSH
15576: LD_INT 1
15578: PPUSH
15579: CALL_OW 287
15583: PUSH
15584: LD_INT 18
15586: PUSH
15587: LD_INT 15
15589: PUSH
15590: LD_INT 12
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: LIST
15597: PUSH
15598: LD_OWVAR 67
15602: ARRAY
15603: LESS
15604: IFFALSE 15646
15606: GO 15608
15608: DISABLE
// begin enable ;
15609: ENABLE
// wait ( rand ( 0 0$10 , 0 0$30 ) ) ;
15610: LD_INT 350
15612: PPUSH
15613: LD_INT 1050
15615: PPUSH
15616: CALL_OW 12
15620: PPUSH
15621: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , playerCratesArea , true ) ;
15625: LD_INT 2
15627: PPUSH
15628: LD_INT 5
15630: PPUSH
15631: CALL_OW 12
15635: PPUSH
15636: LD_INT 3
15638: PPUSH
15639: LD_INT 1
15641: PPUSH
15642: CALL_OW 55
// end ;
15646: END
// every 1 1$40 trigger GetResourceArea ( americanBaseNorthArea , mat_cans ) < 5 do
15647: LD_INT 10
15649: PPUSH
15650: LD_INT 1
15652: PPUSH
15653: CALL_OW 287
15657: PUSH
15658: LD_INT 5
15660: LESS
15661: IFFALSE 15688
15663: GO 15665
15665: DISABLE
// begin enable ;
15666: ENABLE
// CreateCratesArea ( rand ( 2 , 5 ) , americanBaseNorthArea , true ) ;
15667: LD_INT 2
15669: PPUSH
15670: LD_INT 5
15672: PPUSH
15673: CALL_OW 12
15677: PPUSH
15678: LD_INT 10
15680: PPUSH
15681: LD_INT 1
15683: PPUSH
15684: CALL_OW 55
// end ;
15688: END
// every 1 1$40 trigger GetResourceArea ( americanBaseSouthArea , mat_cans ) < 5 do
15689: LD_INT 11
15691: PPUSH
15692: LD_INT 1
15694: PPUSH
15695: CALL_OW 287
15699: PUSH
15700: LD_INT 5
15702: LESS
15703: IFFALSE 15730
15705: GO 15707
15707: DISABLE
// begin enable ;
15708: ENABLE
// CreateCratesArea ( rand ( 2 , 5 ) , americanBaseSouthArea , true ) ;
15709: LD_INT 2
15711: PPUSH
15712: LD_INT 5
15714: PPUSH
15715: CALL_OW 12
15719: PPUSH
15720: LD_INT 11
15722: PPUSH
15723: LD_INT 1
15725: PPUSH
15726: CALL_OW 55
// end ;
15730: END
// every 1 1$40 trigger GetResourceArea ( amCrates1Area , mat_cans ) < 5 do
15731: LD_INT 16
15733: PPUSH
15734: LD_INT 1
15736: PPUSH
15737: CALL_OW 287
15741: PUSH
15742: LD_INT 5
15744: LESS
15745: IFFALSE 15772
15747: GO 15749
15749: DISABLE
// begin enable ;
15750: ENABLE
// CreateCratesArea ( rand ( 2 , 5 ) , amCrates1Area , true ) ;
15751: LD_INT 2
15753: PPUSH
15754: LD_INT 5
15756: PPUSH
15757: CALL_OW 12
15761: PPUSH
15762: LD_INT 16
15764: PPUSH
15765: LD_INT 1
15767: PPUSH
15768: CALL_OW 55
// end ;
15772: END
// every 1 1$40 trigger GetResourceArea ( amCrates2Area , mat_cans ) < 5 do
15773: LD_INT 17
15775: PPUSH
15776: LD_INT 1
15778: PPUSH
15779: CALL_OW 287
15783: PUSH
15784: LD_INT 5
15786: LESS
15787: IFFALSE 15814
15789: GO 15791
15791: DISABLE
// begin enable ;
15792: ENABLE
// CreateCratesArea ( rand ( 2 , 5 ) , amCrates2Area , true ) ;
15793: LD_INT 2
15795: PPUSH
15796: LD_INT 5
15798: PPUSH
15799: CALL_OW 12
15803: PPUSH
15804: LD_INT 17
15806: PPUSH
15807: LD_INT 1
15809: PPUSH
15810: CALL_OW 55
// end ;
15814: END
// every 0 0$50 trigger tick < 45 45$00 do
15815: LD_OWVAR 1
15819: PUSH
15820: LD_INT 94500
15822: LESS
15823: IFFALSE 15847
15825: GO 15827
15827: DISABLE
// begin enable ;
15828: ENABLE
// CreateCratesAnywhere ( rand ( 1 , 5 ) , true ) ;
15829: LD_INT 1
15831: PPUSH
15832: LD_INT 5
15834: PPUSH
15835: CALL_OW 12
15839: PPUSH
15840: LD_INT 1
15842: PPUSH
15843: CALL_OW 57
// end ; end_of_file end_of_file
15847: END
// export globalGameSaveCounter ; every 0 0$1 do
15848: GO 15850
15850: DISABLE
// begin enable ;
15851: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15852: LD_STRING updateTimer(
15854: PUSH
15855: LD_OWVAR 1
15859: STR
15860: PUSH
15861: LD_STRING );
15863: STR
15864: PPUSH
15865: CALL_OW 559
// end ;
15869: END
// every 0 0$1 do
15870: GO 15872
15872: DISABLE
// begin globalGameSaveCounter := 0 ;
15873: LD_ADDR_EXP 37
15877: PUSH
15878: LD_INT 0
15880: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
15881: LD_STRING setGameSaveCounter(0)
15883: PPUSH
15884: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
15888: LD_STRING initStreamRollete();
15890: PPUSH
15891: CALL_OW 559
// InitStreamMode ;
15895: CALL 17240 0 0
// DefineStreamItems ( false ) ;
15899: LD_INT 0
15901: PPUSH
15902: CALL 17704 0 1
// end ;
15906: END
// export function SOS_MapStart ( ) ; begin
15907: LD_INT 0
15909: PPUSH
// if streamModeActive then
15910: LD_EXP 38
15914: IFFALSE 15923
// DefineStreamItems ( true ) ;
15916: LD_INT 1
15918: PPUSH
15919: CALL 17704 0 1
// UpdateLuaVariables ( ) ;
15923: CALL 15940 0 0
// UpdateFactoryWaypoints ( ) ;
15927: CALL 30826 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15931: CALL 31078 0 0
// end ;
15935: LD_VAR 0 1
15939: RET
// function UpdateLuaVariables ( ) ; begin
15940: LD_INT 0
15942: PPUSH
// if globalGameSaveCounter then
15943: LD_EXP 37
15947: IFFALSE 15981
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
15949: LD_ADDR_EXP 37
15953: PUSH
15954: LD_EXP 37
15958: PPUSH
15959: CALL 76858 0 1
15963: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15964: LD_STRING setGameSaveCounter(
15966: PUSH
15967: LD_EXP 37
15971: STR
15972: PUSH
15973: LD_STRING )
15975: STR
15976: PPUSH
15977: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
15981: LD_STRING setGameDifficulty(
15983: PUSH
15984: LD_OWVAR 67
15988: STR
15989: PUSH
15990: LD_STRING )
15992: STR
15993: PPUSH
15994: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
15998: LD_STRING displayDifficulty(
16000: PUSH
16001: LD_OWVAR 67
16005: STR
16006: PUSH
16007: LD_STRING )
16009: STR
16010: PPUSH
16011: CALL_OW 559
// end ;
16015: LD_VAR 0 1
16019: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16020: LD_INT 0
16022: PPUSH
// if p2 = stream_mode then
16023: LD_VAR 0 2
16027: PUSH
16028: LD_INT 100
16030: EQUAL
16031: IFFALSE 17034
// begin if not StreamModeActive then
16033: LD_EXP 38
16037: NOT
16038: IFFALSE 16048
// StreamModeActive := true ;
16040: LD_ADDR_EXP 38
16044: PUSH
16045: LD_INT 1
16047: ST_TO_ADDR
// if p3 = 0 then
16048: LD_VAR 0 3
16052: PUSH
16053: LD_INT 0
16055: EQUAL
16056: IFFALSE 16062
// InitStreamMode ;
16058: CALL 17240 0 0
// if p3 = 1 then
16062: LD_VAR 0 3
16066: PUSH
16067: LD_INT 1
16069: EQUAL
16070: IFFALSE 16080
// sRocket := true ;
16072: LD_ADDR_EXP 43
16076: PUSH
16077: LD_INT 1
16079: ST_TO_ADDR
// if p3 = 2 then
16080: LD_VAR 0 3
16084: PUSH
16085: LD_INT 2
16087: EQUAL
16088: IFFALSE 16098
// sSpeed := true ;
16090: LD_ADDR_EXP 42
16094: PUSH
16095: LD_INT 1
16097: ST_TO_ADDR
// if p3 = 3 then
16098: LD_VAR 0 3
16102: PUSH
16103: LD_INT 3
16105: EQUAL
16106: IFFALSE 16116
// sEngine := true ;
16108: LD_ADDR_EXP 44
16112: PUSH
16113: LD_INT 1
16115: ST_TO_ADDR
// if p3 = 4 then
16116: LD_VAR 0 3
16120: PUSH
16121: LD_INT 4
16123: EQUAL
16124: IFFALSE 16134
// sSpec := true ;
16126: LD_ADDR_EXP 41
16130: PUSH
16131: LD_INT 1
16133: ST_TO_ADDR
// if p3 = 5 then
16134: LD_VAR 0 3
16138: PUSH
16139: LD_INT 5
16141: EQUAL
16142: IFFALSE 16152
// sLevel := true ;
16144: LD_ADDR_EXP 45
16148: PUSH
16149: LD_INT 1
16151: ST_TO_ADDR
// if p3 = 6 then
16152: LD_VAR 0 3
16156: PUSH
16157: LD_INT 6
16159: EQUAL
16160: IFFALSE 16170
// sArmoury := true ;
16162: LD_ADDR_EXP 46
16166: PUSH
16167: LD_INT 1
16169: ST_TO_ADDR
// if p3 = 7 then
16170: LD_VAR 0 3
16174: PUSH
16175: LD_INT 7
16177: EQUAL
16178: IFFALSE 16188
// sRadar := true ;
16180: LD_ADDR_EXP 47
16184: PUSH
16185: LD_INT 1
16187: ST_TO_ADDR
// if p3 = 8 then
16188: LD_VAR 0 3
16192: PUSH
16193: LD_INT 8
16195: EQUAL
16196: IFFALSE 16206
// sBunker := true ;
16198: LD_ADDR_EXP 48
16202: PUSH
16203: LD_INT 1
16205: ST_TO_ADDR
// if p3 = 9 then
16206: LD_VAR 0 3
16210: PUSH
16211: LD_INT 9
16213: EQUAL
16214: IFFALSE 16224
// sHack := true ;
16216: LD_ADDR_EXP 49
16220: PUSH
16221: LD_INT 1
16223: ST_TO_ADDR
// if p3 = 10 then
16224: LD_VAR 0 3
16228: PUSH
16229: LD_INT 10
16231: EQUAL
16232: IFFALSE 16242
// sFire := true ;
16234: LD_ADDR_EXP 50
16238: PUSH
16239: LD_INT 1
16241: ST_TO_ADDR
// if p3 = 11 then
16242: LD_VAR 0 3
16246: PUSH
16247: LD_INT 11
16249: EQUAL
16250: IFFALSE 16260
// sRefresh := true ;
16252: LD_ADDR_EXP 51
16256: PUSH
16257: LD_INT 1
16259: ST_TO_ADDR
// if p3 = 12 then
16260: LD_VAR 0 3
16264: PUSH
16265: LD_INT 12
16267: EQUAL
16268: IFFALSE 16278
// sExp := true ;
16270: LD_ADDR_EXP 52
16274: PUSH
16275: LD_INT 1
16277: ST_TO_ADDR
// if p3 = 13 then
16278: LD_VAR 0 3
16282: PUSH
16283: LD_INT 13
16285: EQUAL
16286: IFFALSE 16296
// sDepot := true ;
16288: LD_ADDR_EXP 53
16292: PUSH
16293: LD_INT 1
16295: ST_TO_ADDR
// if p3 = 14 then
16296: LD_VAR 0 3
16300: PUSH
16301: LD_INT 14
16303: EQUAL
16304: IFFALSE 16314
// sFlag := true ;
16306: LD_ADDR_EXP 54
16310: PUSH
16311: LD_INT 1
16313: ST_TO_ADDR
// if p3 = 15 then
16314: LD_VAR 0 3
16318: PUSH
16319: LD_INT 15
16321: EQUAL
16322: IFFALSE 16332
// sKamikadze := true ;
16324: LD_ADDR_EXP 62
16328: PUSH
16329: LD_INT 1
16331: ST_TO_ADDR
// if p3 = 16 then
16332: LD_VAR 0 3
16336: PUSH
16337: LD_INT 16
16339: EQUAL
16340: IFFALSE 16350
// sTroll := true ;
16342: LD_ADDR_EXP 63
16346: PUSH
16347: LD_INT 1
16349: ST_TO_ADDR
// if p3 = 17 then
16350: LD_VAR 0 3
16354: PUSH
16355: LD_INT 17
16357: EQUAL
16358: IFFALSE 16368
// sSlow := true ;
16360: LD_ADDR_EXP 64
16364: PUSH
16365: LD_INT 1
16367: ST_TO_ADDR
// if p3 = 18 then
16368: LD_VAR 0 3
16372: PUSH
16373: LD_INT 18
16375: EQUAL
16376: IFFALSE 16386
// sLack := true ;
16378: LD_ADDR_EXP 65
16382: PUSH
16383: LD_INT 1
16385: ST_TO_ADDR
// if p3 = 19 then
16386: LD_VAR 0 3
16390: PUSH
16391: LD_INT 19
16393: EQUAL
16394: IFFALSE 16404
// sTank := true ;
16396: LD_ADDR_EXP 67
16400: PUSH
16401: LD_INT 1
16403: ST_TO_ADDR
// if p3 = 20 then
16404: LD_VAR 0 3
16408: PUSH
16409: LD_INT 20
16411: EQUAL
16412: IFFALSE 16422
// sRemote := true ;
16414: LD_ADDR_EXP 68
16418: PUSH
16419: LD_INT 1
16421: ST_TO_ADDR
// if p3 = 21 then
16422: LD_VAR 0 3
16426: PUSH
16427: LD_INT 21
16429: EQUAL
16430: IFFALSE 16440
// sPowell := true ;
16432: LD_ADDR_EXP 69
16436: PUSH
16437: LD_INT 1
16439: ST_TO_ADDR
// if p3 = 22 then
16440: LD_VAR 0 3
16444: PUSH
16445: LD_INT 22
16447: EQUAL
16448: IFFALSE 16458
// sTeleport := true ;
16450: LD_ADDR_EXP 72
16454: PUSH
16455: LD_INT 1
16457: ST_TO_ADDR
// if p3 = 23 then
16458: LD_VAR 0 3
16462: PUSH
16463: LD_INT 23
16465: EQUAL
16466: IFFALSE 16476
// sOilTower := true ;
16468: LD_ADDR_EXP 74
16472: PUSH
16473: LD_INT 1
16475: ST_TO_ADDR
// if p3 = 24 then
16476: LD_VAR 0 3
16480: PUSH
16481: LD_INT 24
16483: EQUAL
16484: IFFALSE 16494
// sShovel := true ;
16486: LD_ADDR_EXP 75
16490: PUSH
16491: LD_INT 1
16493: ST_TO_ADDR
// if p3 = 25 then
16494: LD_VAR 0 3
16498: PUSH
16499: LD_INT 25
16501: EQUAL
16502: IFFALSE 16512
// sSheik := true ;
16504: LD_ADDR_EXP 76
16508: PUSH
16509: LD_INT 1
16511: ST_TO_ADDR
// if p3 = 26 then
16512: LD_VAR 0 3
16516: PUSH
16517: LD_INT 26
16519: EQUAL
16520: IFFALSE 16530
// sEarthquake := true ;
16522: LD_ADDR_EXP 78
16526: PUSH
16527: LD_INT 1
16529: ST_TO_ADDR
// if p3 = 27 then
16530: LD_VAR 0 3
16534: PUSH
16535: LD_INT 27
16537: EQUAL
16538: IFFALSE 16548
// sAI := true ;
16540: LD_ADDR_EXP 79
16544: PUSH
16545: LD_INT 1
16547: ST_TO_ADDR
// if p3 = 28 then
16548: LD_VAR 0 3
16552: PUSH
16553: LD_INT 28
16555: EQUAL
16556: IFFALSE 16566
// sCargo := true ;
16558: LD_ADDR_EXP 82
16562: PUSH
16563: LD_INT 1
16565: ST_TO_ADDR
// if p3 = 29 then
16566: LD_VAR 0 3
16570: PUSH
16571: LD_INT 29
16573: EQUAL
16574: IFFALSE 16584
// sDLaser := true ;
16576: LD_ADDR_EXP 83
16580: PUSH
16581: LD_INT 1
16583: ST_TO_ADDR
// if p3 = 30 then
16584: LD_VAR 0 3
16588: PUSH
16589: LD_INT 30
16591: EQUAL
16592: IFFALSE 16602
// sExchange := true ;
16594: LD_ADDR_EXP 84
16598: PUSH
16599: LD_INT 1
16601: ST_TO_ADDR
// if p3 = 31 then
16602: LD_VAR 0 3
16606: PUSH
16607: LD_INT 31
16609: EQUAL
16610: IFFALSE 16620
// sFac := true ;
16612: LD_ADDR_EXP 85
16616: PUSH
16617: LD_INT 1
16619: ST_TO_ADDR
// if p3 = 32 then
16620: LD_VAR 0 3
16624: PUSH
16625: LD_INT 32
16627: EQUAL
16628: IFFALSE 16638
// sPower := true ;
16630: LD_ADDR_EXP 86
16634: PUSH
16635: LD_INT 1
16637: ST_TO_ADDR
// if p3 = 33 then
16638: LD_VAR 0 3
16642: PUSH
16643: LD_INT 33
16645: EQUAL
16646: IFFALSE 16656
// sRandom := true ;
16648: LD_ADDR_EXP 87
16652: PUSH
16653: LD_INT 1
16655: ST_TO_ADDR
// if p3 = 34 then
16656: LD_VAR 0 3
16660: PUSH
16661: LD_INT 34
16663: EQUAL
16664: IFFALSE 16674
// sShield := true ;
16666: LD_ADDR_EXP 88
16670: PUSH
16671: LD_INT 1
16673: ST_TO_ADDR
// if p3 = 35 then
16674: LD_VAR 0 3
16678: PUSH
16679: LD_INT 35
16681: EQUAL
16682: IFFALSE 16692
// sTime := true ;
16684: LD_ADDR_EXP 89
16688: PUSH
16689: LD_INT 1
16691: ST_TO_ADDR
// if p3 = 36 then
16692: LD_VAR 0 3
16696: PUSH
16697: LD_INT 36
16699: EQUAL
16700: IFFALSE 16710
// sTools := true ;
16702: LD_ADDR_EXP 90
16706: PUSH
16707: LD_INT 1
16709: ST_TO_ADDR
// if p3 = 101 then
16710: LD_VAR 0 3
16714: PUSH
16715: LD_INT 101
16717: EQUAL
16718: IFFALSE 16728
// sSold := true ;
16720: LD_ADDR_EXP 55
16724: PUSH
16725: LD_INT 1
16727: ST_TO_ADDR
// if p3 = 102 then
16728: LD_VAR 0 3
16732: PUSH
16733: LD_INT 102
16735: EQUAL
16736: IFFALSE 16746
// sDiff := true ;
16738: LD_ADDR_EXP 56
16742: PUSH
16743: LD_INT 1
16745: ST_TO_ADDR
// if p3 = 103 then
16746: LD_VAR 0 3
16750: PUSH
16751: LD_INT 103
16753: EQUAL
16754: IFFALSE 16764
// sFog := true ;
16756: LD_ADDR_EXP 59
16760: PUSH
16761: LD_INT 1
16763: ST_TO_ADDR
// if p3 = 104 then
16764: LD_VAR 0 3
16768: PUSH
16769: LD_INT 104
16771: EQUAL
16772: IFFALSE 16782
// sReset := true ;
16774: LD_ADDR_EXP 60
16778: PUSH
16779: LD_INT 1
16781: ST_TO_ADDR
// if p3 = 105 then
16782: LD_VAR 0 3
16786: PUSH
16787: LD_INT 105
16789: EQUAL
16790: IFFALSE 16800
// sSun := true ;
16792: LD_ADDR_EXP 61
16796: PUSH
16797: LD_INT 1
16799: ST_TO_ADDR
// if p3 = 106 then
16800: LD_VAR 0 3
16804: PUSH
16805: LD_INT 106
16807: EQUAL
16808: IFFALSE 16818
// sTiger := true ;
16810: LD_ADDR_EXP 57
16814: PUSH
16815: LD_INT 1
16817: ST_TO_ADDR
// if p3 = 107 then
16818: LD_VAR 0 3
16822: PUSH
16823: LD_INT 107
16825: EQUAL
16826: IFFALSE 16836
// sBomb := true ;
16828: LD_ADDR_EXP 58
16832: PUSH
16833: LD_INT 1
16835: ST_TO_ADDR
// if p3 = 108 then
16836: LD_VAR 0 3
16840: PUSH
16841: LD_INT 108
16843: EQUAL
16844: IFFALSE 16854
// sWound := true ;
16846: LD_ADDR_EXP 66
16850: PUSH
16851: LD_INT 1
16853: ST_TO_ADDR
// if p3 = 109 then
16854: LD_VAR 0 3
16858: PUSH
16859: LD_INT 109
16861: EQUAL
16862: IFFALSE 16872
// sBetray := true ;
16864: LD_ADDR_EXP 70
16868: PUSH
16869: LD_INT 1
16871: ST_TO_ADDR
// if p3 = 110 then
16872: LD_VAR 0 3
16876: PUSH
16877: LD_INT 110
16879: EQUAL
16880: IFFALSE 16890
// sContamin := true ;
16882: LD_ADDR_EXP 71
16886: PUSH
16887: LD_INT 1
16889: ST_TO_ADDR
// if p3 = 111 then
16890: LD_VAR 0 3
16894: PUSH
16895: LD_INT 111
16897: EQUAL
16898: IFFALSE 16908
// sOil := true ;
16900: LD_ADDR_EXP 73
16904: PUSH
16905: LD_INT 1
16907: ST_TO_ADDR
// if p3 = 112 then
16908: LD_VAR 0 3
16912: PUSH
16913: LD_INT 112
16915: EQUAL
16916: IFFALSE 16926
// sStu := true ;
16918: LD_ADDR_EXP 77
16922: PUSH
16923: LD_INT 1
16925: ST_TO_ADDR
// if p3 = 113 then
16926: LD_VAR 0 3
16930: PUSH
16931: LD_INT 113
16933: EQUAL
16934: IFFALSE 16944
// sBazooka := true ;
16936: LD_ADDR_EXP 80
16940: PUSH
16941: LD_INT 1
16943: ST_TO_ADDR
// if p3 = 114 then
16944: LD_VAR 0 3
16948: PUSH
16949: LD_INT 114
16951: EQUAL
16952: IFFALSE 16962
// sMortar := true ;
16954: LD_ADDR_EXP 81
16958: PUSH
16959: LD_INT 1
16961: ST_TO_ADDR
// if p3 = 115 then
16962: LD_VAR 0 3
16966: PUSH
16967: LD_INT 115
16969: EQUAL
16970: IFFALSE 16980
// sRanger := true ;
16972: LD_ADDR_EXP 91
16976: PUSH
16977: LD_INT 1
16979: ST_TO_ADDR
// if p3 = 116 then
16980: LD_VAR 0 3
16984: PUSH
16985: LD_INT 116
16987: EQUAL
16988: IFFALSE 16998
// sComputer := true ;
16990: LD_ADDR_EXP 92
16994: PUSH
16995: LD_INT 1
16997: ST_TO_ADDR
// if p3 = 117 then
16998: LD_VAR 0 3
17002: PUSH
17003: LD_INT 117
17005: EQUAL
17006: IFFALSE 17016
// s30 := true ;
17008: LD_ADDR_EXP 93
17012: PUSH
17013: LD_INT 1
17015: ST_TO_ADDR
// if p3 = 118 then
17016: LD_VAR 0 3
17020: PUSH
17021: LD_INT 118
17023: EQUAL
17024: IFFALSE 17034
// s60 := true ;
17026: LD_ADDR_EXP 94
17030: PUSH
17031: LD_INT 1
17033: ST_TO_ADDR
// end ; if p2 = hack_mode then
17034: LD_VAR 0 2
17038: PUSH
17039: LD_INT 101
17041: EQUAL
17042: IFFALSE 17170
// begin case p3 of 1 :
17044: LD_VAR 0 3
17048: PUSH
17049: LD_INT 1
17051: DOUBLE
17052: EQUAL
17053: IFTRUE 17057
17055: GO 17064
17057: POP
// hHackUnlimitedResources ; 2 :
17058: CALL 29433 0 0
17062: GO 17170
17064: LD_INT 2
17066: DOUBLE
17067: EQUAL
17068: IFTRUE 17072
17070: GO 17079
17072: POP
// hHackSetLevel10 ; 3 :
17073: CALL 29566 0 0
17077: GO 17170
17079: LD_INT 3
17081: DOUBLE
17082: EQUAL
17083: IFTRUE 17087
17085: GO 17094
17087: POP
// hHackSetLevel10YourUnits ; 4 :
17088: CALL 29651 0 0
17092: GO 17170
17094: LD_INT 4
17096: DOUBLE
17097: EQUAL
17098: IFTRUE 17102
17100: GO 17109
17102: POP
// hHackInvincible ; 5 :
17103: CALL 30099 0 0
17107: GO 17170
17109: LD_INT 5
17111: DOUBLE
17112: EQUAL
17113: IFTRUE 17117
17115: GO 17124
17117: POP
// hHackInvisible ; 6 :
17118: CALL 30210 0 0
17122: GO 17170
17124: LD_INT 6
17126: DOUBLE
17127: EQUAL
17128: IFTRUE 17132
17130: GO 17139
17132: POP
// hHackChangeYourSide ; 7 :
17133: CALL 30267 0 0
17137: GO 17170
17139: LD_INT 7
17141: DOUBLE
17142: EQUAL
17143: IFTRUE 17147
17145: GO 17154
17147: POP
// hHackChangeUnitSide ; 8 :
17148: CALL 30309 0 0
17152: GO 17170
17154: LD_INT 8
17156: DOUBLE
17157: EQUAL
17158: IFTRUE 17162
17160: GO 17169
17162: POP
// hHackFog ; end ;
17163: CALL 30410 0 0
17167: GO 17170
17169: POP
// end ; if p2 = game_save_mode then
17170: LD_VAR 0 2
17174: PUSH
17175: LD_INT 102
17177: EQUAL
17178: IFFALSE 17235
// begin if p3 = 1 then
17180: LD_VAR 0 3
17184: PUSH
17185: LD_INT 1
17187: EQUAL
17188: IFFALSE 17200
// globalGameSaveCounter := p4 ;
17190: LD_ADDR_EXP 37
17194: PUSH
17195: LD_VAR 0 4
17199: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
17200: LD_VAR 0 3
17204: PUSH
17205: LD_INT 2
17207: EQUAL
17208: IFFALSE 17216
17210: PUSH
17211: LD_EXP 37
17215: AND
17216: IFFALSE 17235
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17218: LD_STRING setGameSaveCounter(
17220: PUSH
17221: LD_EXP 37
17225: STR
17226: PUSH
17227: LD_STRING )
17229: STR
17230: PPUSH
17231: CALL_OW 559
// end ; end ;
17235: LD_VAR 0 7
17239: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
17240: LD_INT 0
17242: PPUSH
// streamModeActive := false ;
17243: LD_ADDR_EXP 38
17247: PUSH
17248: LD_INT 0
17250: ST_TO_ADDR
// normalCounter := 36 ;
17251: LD_ADDR_EXP 39
17255: PUSH
17256: LD_INT 36
17258: ST_TO_ADDR
// hardcoreCounter := 18 ;
17259: LD_ADDR_EXP 40
17263: PUSH
17264: LD_INT 18
17266: ST_TO_ADDR
// sRocket := false ;
17267: LD_ADDR_EXP 43
17271: PUSH
17272: LD_INT 0
17274: ST_TO_ADDR
// sSpeed := false ;
17275: LD_ADDR_EXP 42
17279: PUSH
17280: LD_INT 0
17282: ST_TO_ADDR
// sEngine := false ;
17283: LD_ADDR_EXP 44
17287: PUSH
17288: LD_INT 0
17290: ST_TO_ADDR
// sSpec := false ;
17291: LD_ADDR_EXP 41
17295: PUSH
17296: LD_INT 0
17298: ST_TO_ADDR
// sLevel := false ;
17299: LD_ADDR_EXP 45
17303: PUSH
17304: LD_INT 0
17306: ST_TO_ADDR
// sArmoury := false ;
17307: LD_ADDR_EXP 46
17311: PUSH
17312: LD_INT 0
17314: ST_TO_ADDR
// sRadar := false ;
17315: LD_ADDR_EXP 47
17319: PUSH
17320: LD_INT 0
17322: ST_TO_ADDR
// sBunker := false ;
17323: LD_ADDR_EXP 48
17327: PUSH
17328: LD_INT 0
17330: ST_TO_ADDR
// sHack := false ;
17331: LD_ADDR_EXP 49
17335: PUSH
17336: LD_INT 0
17338: ST_TO_ADDR
// sFire := false ;
17339: LD_ADDR_EXP 50
17343: PUSH
17344: LD_INT 0
17346: ST_TO_ADDR
// sRefresh := false ;
17347: LD_ADDR_EXP 51
17351: PUSH
17352: LD_INT 0
17354: ST_TO_ADDR
// sExp := false ;
17355: LD_ADDR_EXP 52
17359: PUSH
17360: LD_INT 0
17362: ST_TO_ADDR
// sDepot := false ;
17363: LD_ADDR_EXP 53
17367: PUSH
17368: LD_INT 0
17370: ST_TO_ADDR
// sFlag := false ;
17371: LD_ADDR_EXP 54
17375: PUSH
17376: LD_INT 0
17378: ST_TO_ADDR
// sKamikadze := false ;
17379: LD_ADDR_EXP 62
17383: PUSH
17384: LD_INT 0
17386: ST_TO_ADDR
// sTroll := false ;
17387: LD_ADDR_EXP 63
17391: PUSH
17392: LD_INT 0
17394: ST_TO_ADDR
// sSlow := false ;
17395: LD_ADDR_EXP 64
17399: PUSH
17400: LD_INT 0
17402: ST_TO_ADDR
// sLack := false ;
17403: LD_ADDR_EXP 65
17407: PUSH
17408: LD_INT 0
17410: ST_TO_ADDR
// sTank := false ;
17411: LD_ADDR_EXP 67
17415: PUSH
17416: LD_INT 0
17418: ST_TO_ADDR
// sRemote := false ;
17419: LD_ADDR_EXP 68
17423: PUSH
17424: LD_INT 0
17426: ST_TO_ADDR
// sPowell := false ;
17427: LD_ADDR_EXP 69
17431: PUSH
17432: LD_INT 0
17434: ST_TO_ADDR
// sTeleport := false ;
17435: LD_ADDR_EXP 72
17439: PUSH
17440: LD_INT 0
17442: ST_TO_ADDR
// sOilTower := false ;
17443: LD_ADDR_EXP 74
17447: PUSH
17448: LD_INT 0
17450: ST_TO_ADDR
// sShovel := false ;
17451: LD_ADDR_EXP 75
17455: PUSH
17456: LD_INT 0
17458: ST_TO_ADDR
// sSheik := false ;
17459: LD_ADDR_EXP 76
17463: PUSH
17464: LD_INT 0
17466: ST_TO_ADDR
// sEarthquake := false ;
17467: LD_ADDR_EXP 78
17471: PUSH
17472: LD_INT 0
17474: ST_TO_ADDR
// sAI := false ;
17475: LD_ADDR_EXP 79
17479: PUSH
17480: LD_INT 0
17482: ST_TO_ADDR
// sCargo := false ;
17483: LD_ADDR_EXP 82
17487: PUSH
17488: LD_INT 0
17490: ST_TO_ADDR
// sDLaser := false ;
17491: LD_ADDR_EXP 83
17495: PUSH
17496: LD_INT 0
17498: ST_TO_ADDR
// sExchange := false ;
17499: LD_ADDR_EXP 84
17503: PUSH
17504: LD_INT 0
17506: ST_TO_ADDR
// sFac := false ;
17507: LD_ADDR_EXP 85
17511: PUSH
17512: LD_INT 0
17514: ST_TO_ADDR
// sPower := false ;
17515: LD_ADDR_EXP 86
17519: PUSH
17520: LD_INT 0
17522: ST_TO_ADDR
// sRandom := false ;
17523: LD_ADDR_EXP 87
17527: PUSH
17528: LD_INT 0
17530: ST_TO_ADDR
// sShield := false ;
17531: LD_ADDR_EXP 88
17535: PUSH
17536: LD_INT 0
17538: ST_TO_ADDR
// sTime := false ;
17539: LD_ADDR_EXP 89
17543: PUSH
17544: LD_INT 0
17546: ST_TO_ADDR
// sTools := false ;
17547: LD_ADDR_EXP 90
17551: PUSH
17552: LD_INT 0
17554: ST_TO_ADDR
// sSold := false ;
17555: LD_ADDR_EXP 55
17559: PUSH
17560: LD_INT 0
17562: ST_TO_ADDR
// sDiff := false ;
17563: LD_ADDR_EXP 56
17567: PUSH
17568: LD_INT 0
17570: ST_TO_ADDR
// sFog := false ;
17571: LD_ADDR_EXP 59
17575: PUSH
17576: LD_INT 0
17578: ST_TO_ADDR
// sReset := false ;
17579: LD_ADDR_EXP 60
17583: PUSH
17584: LD_INT 0
17586: ST_TO_ADDR
// sSun := false ;
17587: LD_ADDR_EXP 61
17591: PUSH
17592: LD_INT 0
17594: ST_TO_ADDR
// sTiger := false ;
17595: LD_ADDR_EXP 57
17599: PUSH
17600: LD_INT 0
17602: ST_TO_ADDR
// sBomb := false ;
17603: LD_ADDR_EXP 58
17607: PUSH
17608: LD_INT 0
17610: ST_TO_ADDR
// sWound := false ;
17611: LD_ADDR_EXP 66
17615: PUSH
17616: LD_INT 0
17618: ST_TO_ADDR
// sBetray := false ;
17619: LD_ADDR_EXP 70
17623: PUSH
17624: LD_INT 0
17626: ST_TO_ADDR
// sContamin := false ;
17627: LD_ADDR_EXP 71
17631: PUSH
17632: LD_INT 0
17634: ST_TO_ADDR
// sOil := false ;
17635: LD_ADDR_EXP 73
17639: PUSH
17640: LD_INT 0
17642: ST_TO_ADDR
// sStu := false ;
17643: LD_ADDR_EXP 77
17647: PUSH
17648: LD_INT 0
17650: ST_TO_ADDR
// sBazooka := false ;
17651: LD_ADDR_EXP 80
17655: PUSH
17656: LD_INT 0
17658: ST_TO_ADDR
// sMortar := false ;
17659: LD_ADDR_EXP 81
17663: PUSH
17664: LD_INT 0
17666: ST_TO_ADDR
// sRanger := false ;
17667: LD_ADDR_EXP 91
17671: PUSH
17672: LD_INT 0
17674: ST_TO_ADDR
// sComputer := false ;
17675: LD_ADDR_EXP 92
17679: PUSH
17680: LD_INT 0
17682: ST_TO_ADDR
// s30 := false ;
17683: LD_ADDR_EXP 93
17687: PUSH
17688: LD_INT 0
17690: ST_TO_ADDR
// s60 := false ;
17691: LD_ADDR_EXP 94
17695: PUSH
17696: LD_INT 0
17698: ST_TO_ADDR
// end ;
17699: LD_VAR 0 1
17703: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17704: LD_INT 0
17706: PPUSH
17707: PPUSH
17708: PPUSH
17709: PPUSH
17710: PPUSH
17711: PPUSH
17712: PPUSH
// result := [ ] ;
17713: LD_ADDR_VAR 0 2
17717: PUSH
17718: EMPTY
17719: ST_TO_ADDR
// if campaign_id = 1 then
17720: LD_OWVAR 69
17724: PUSH
17725: LD_INT 1
17727: EQUAL
17728: IFFALSE 20894
// begin case mission_number of 1 :
17730: LD_OWVAR 70
17734: PUSH
17735: LD_INT 1
17737: DOUBLE
17738: EQUAL
17739: IFTRUE 17743
17741: GO 17819
17743: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
17744: LD_ADDR_VAR 0 2
17748: PUSH
17749: LD_INT 2
17751: PUSH
17752: LD_INT 4
17754: PUSH
17755: LD_INT 11
17757: PUSH
17758: LD_INT 12
17760: PUSH
17761: LD_INT 15
17763: PUSH
17764: LD_INT 16
17766: PUSH
17767: LD_INT 22
17769: PUSH
17770: LD_INT 23
17772: PUSH
17773: LD_INT 26
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: PUSH
17787: LD_INT 101
17789: PUSH
17790: LD_INT 102
17792: PUSH
17793: LD_INT 106
17795: PUSH
17796: LD_INT 116
17798: PUSH
17799: LD_INT 117
17801: PUSH
17802: LD_INT 118
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: ST_TO_ADDR
17817: GO 20892
17819: LD_INT 2
17821: DOUBLE
17822: EQUAL
17823: IFTRUE 17827
17825: GO 17911
17827: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
17828: LD_ADDR_VAR 0 2
17832: PUSH
17833: LD_INT 2
17835: PUSH
17836: LD_INT 4
17838: PUSH
17839: LD_INT 11
17841: PUSH
17842: LD_INT 12
17844: PUSH
17845: LD_INT 15
17847: PUSH
17848: LD_INT 16
17850: PUSH
17851: LD_INT 22
17853: PUSH
17854: LD_INT 23
17856: PUSH
17857: LD_INT 26
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: PUSH
17871: LD_INT 101
17873: PUSH
17874: LD_INT 102
17876: PUSH
17877: LD_INT 105
17879: PUSH
17880: LD_INT 106
17882: PUSH
17883: LD_INT 108
17885: PUSH
17886: LD_INT 116
17888: PUSH
17889: LD_INT 117
17891: PUSH
17892: LD_INT 118
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: ST_TO_ADDR
17909: GO 20892
17911: LD_INT 3
17913: DOUBLE
17914: EQUAL
17915: IFTRUE 17919
17917: GO 18007
17919: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17920: LD_ADDR_VAR 0 2
17924: PUSH
17925: LD_INT 2
17927: PUSH
17928: LD_INT 4
17930: PUSH
17931: LD_INT 5
17933: PUSH
17934: LD_INT 11
17936: PUSH
17937: LD_INT 12
17939: PUSH
17940: LD_INT 15
17942: PUSH
17943: LD_INT 16
17945: PUSH
17946: LD_INT 22
17948: PUSH
17949: LD_INT 26
17951: PUSH
17952: LD_INT 36
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: PUSH
17967: LD_INT 101
17969: PUSH
17970: LD_INT 102
17972: PUSH
17973: LD_INT 105
17975: PUSH
17976: LD_INT 106
17978: PUSH
17979: LD_INT 108
17981: PUSH
17982: LD_INT 116
17984: PUSH
17985: LD_INT 117
17987: PUSH
17988: LD_INT 118
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: ST_TO_ADDR
18005: GO 20892
18007: LD_INT 4
18009: DOUBLE
18010: EQUAL
18011: IFTRUE 18015
18013: GO 18111
18015: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
18016: LD_ADDR_VAR 0 2
18020: PUSH
18021: LD_INT 2
18023: PUSH
18024: LD_INT 4
18026: PUSH
18027: LD_INT 5
18029: PUSH
18030: LD_INT 8
18032: PUSH
18033: LD_INT 11
18035: PUSH
18036: LD_INT 12
18038: PUSH
18039: LD_INT 15
18041: PUSH
18042: LD_INT 16
18044: PUSH
18045: LD_INT 22
18047: PUSH
18048: LD_INT 23
18050: PUSH
18051: LD_INT 26
18053: PUSH
18054: LD_INT 36
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 101
18073: PUSH
18074: LD_INT 102
18076: PUSH
18077: LD_INT 105
18079: PUSH
18080: LD_INT 106
18082: PUSH
18083: LD_INT 108
18085: PUSH
18086: LD_INT 116
18088: PUSH
18089: LD_INT 117
18091: PUSH
18092: LD_INT 118
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: ST_TO_ADDR
18109: GO 20892
18111: LD_INT 5
18113: DOUBLE
18114: EQUAL
18115: IFTRUE 18119
18117: GO 18231
18119: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
18120: LD_ADDR_VAR 0 2
18124: PUSH
18125: LD_INT 2
18127: PUSH
18128: LD_INT 4
18130: PUSH
18131: LD_INT 5
18133: PUSH
18134: LD_INT 6
18136: PUSH
18137: LD_INT 8
18139: PUSH
18140: LD_INT 11
18142: PUSH
18143: LD_INT 12
18145: PUSH
18146: LD_INT 15
18148: PUSH
18149: LD_INT 16
18151: PUSH
18152: LD_INT 22
18154: PUSH
18155: LD_INT 23
18157: PUSH
18158: LD_INT 25
18160: PUSH
18161: LD_INT 26
18163: PUSH
18164: LD_INT 36
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 101
18185: PUSH
18186: LD_INT 102
18188: PUSH
18189: LD_INT 105
18191: PUSH
18192: LD_INT 106
18194: PUSH
18195: LD_INT 108
18197: PUSH
18198: LD_INT 109
18200: PUSH
18201: LD_INT 112
18203: PUSH
18204: LD_INT 116
18206: PUSH
18207: LD_INT 117
18209: PUSH
18210: LD_INT 118
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: ST_TO_ADDR
18229: GO 20892
18231: LD_INT 6
18233: DOUBLE
18234: EQUAL
18235: IFTRUE 18239
18237: GO 18371
18239: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
18240: LD_ADDR_VAR 0 2
18244: PUSH
18245: LD_INT 2
18247: PUSH
18248: LD_INT 4
18250: PUSH
18251: LD_INT 5
18253: PUSH
18254: LD_INT 6
18256: PUSH
18257: LD_INT 8
18259: PUSH
18260: LD_INT 11
18262: PUSH
18263: LD_INT 12
18265: PUSH
18266: LD_INT 15
18268: PUSH
18269: LD_INT 16
18271: PUSH
18272: LD_INT 20
18274: PUSH
18275: LD_INT 21
18277: PUSH
18278: LD_INT 22
18280: PUSH
18281: LD_INT 23
18283: PUSH
18284: LD_INT 25
18286: PUSH
18287: LD_INT 26
18289: PUSH
18290: LD_INT 30
18292: PUSH
18293: LD_INT 31
18295: PUSH
18296: LD_INT 32
18298: PUSH
18299: LD_INT 36
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 101
18325: PUSH
18326: LD_INT 102
18328: PUSH
18329: LD_INT 105
18331: PUSH
18332: LD_INT 106
18334: PUSH
18335: LD_INT 108
18337: PUSH
18338: LD_INT 109
18340: PUSH
18341: LD_INT 112
18343: PUSH
18344: LD_INT 116
18346: PUSH
18347: LD_INT 117
18349: PUSH
18350: LD_INT 118
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: ST_TO_ADDR
18369: GO 20892
18371: LD_INT 7
18373: DOUBLE
18374: EQUAL
18375: IFTRUE 18379
18377: GO 18491
18379: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
18380: LD_ADDR_VAR 0 2
18384: PUSH
18385: LD_INT 2
18387: PUSH
18388: LD_INT 4
18390: PUSH
18391: LD_INT 5
18393: PUSH
18394: LD_INT 7
18396: PUSH
18397: LD_INT 11
18399: PUSH
18400: LD_INT 12
18402: PUSH
18403: LD_INT 15
18405: PUSH
18406: LD_INT 16
18408: PUSH
18409: LD_INT 20
18411: PUSH
18412: LD_INT 21
18414: PUSH
18415: LD_INT 22
18417: PUSH
18418: LD_INT 23
18420: PUSH
18421: LD_INT 25
18423: PUSH
18424: LD_INT 26
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: PUSH
18443: LD_INT 101
18445: PUSH
18446: LD_INT 102
18448: PUSH
18449: LD_INT 103
18451: PUSH
18452: LD_INT 105
18454: PUSH
18455: LD_INT 106
18457: PUSH
18458: LD_INT 108
18460: PUSH
18461: LD_INT 112
18463: PUSH
18464: LD_INT 116
18466: PUSH
18467: LD_INT 117
18469: PUSH
18470: LD_INT 118
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: ST_TO_ADDR
18489: GO 20892
18491: LD_INT 8
18493: DOUBLE
18494: EQUAL
18495: IFTRUE 18499
18497: GO 18639
18499: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
18500: LD_ADDR_VAR 0 2
18504: PUSH
18505: LD_INT 2
18507: PUSH
18508: LD_INT 4
18510: PUSH
18511: LD_INT 5
18513: PUSH
18514: LD_INT 6
18516: PUSH
18517: LD_INT 7
18519: PUSH
18520: LD_INT 8
18522: PUSH
18523: LD_INT 11
18525: PUSH
18526: LD_INT 12
18528: PUSH
18529: LD_INT 15
18531: PUSH
18532: LD_INT 16
18534: PUSH
18535: LD_INT 20
18537: PUSH
18538: LD_INT 21
18540: PUSH
18541: LD_INT 22
18543: PUSH
18544: LD_INT 23
18546: PUSH
18547: LD_INT 25
18549: PUSH
18550: LD_INT 26
18552: PUSH
18553: LD_INT 30
18555: PUSH
18556: LD_INT 31
18558: PUSH
18559: LD_INT 32
18561: PUSH
18562: LD_INT 36
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: PUSH
18587: LD_INT 101
18589: PUSH
18590: LD_INT 102
18592: PUSH
18593: LD_INT 103
18595: PUSH
18596: LD_INT 105
18598: PUSH
18599: LD_INT 106
18601: PUSH
18602: LD_INT 108
18604: PUSH
18605: LD_INT 109
18607: PUSH
18608: LD_INT 112
18610: PUSH
18611: LD_INT 116
18613: PUSH
18614: LD_INT 117
18616: PUSH
18617: LD_INT 118
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: ST_TO_ADDR
18637: GO 20892
18639: LD_INT 9
18641: DOUBLE
18642: EQUAL
18643: IFTRUE 18647
18645: GO 18795
18647: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
18648: LD_ADDR_VAR 0 2
18652: PUSH
18653: LD_INT 2
18655: PUSH
18656: LD_INT 4
18658: PUSH
18659: LD_INT 5
18661: PUSH
18662: LD_INT 6
18664: PUSH
18665: LD_INT 7
18667: PUSH
18668: LD_INT 8
18670: PUSH
18671: LD_INT 11
18673: PUSH
18674: LD_INT 12
18676: PUSH
18677: LD_INT 15
18679: PUSH
18680: LD_INT 16
18682: PUSH
18683: LD_INT 20
18685: PUSH
18686: LD_INT 21
18688: PUSH
18689: LD_INT 22
18691: PUSH
18692: LD_INT 23
18694: PUSH
18695: LD_INT 25
18697: PUSH
18698: LD_INT 26
18700: PUSH
18701: LD_INT 28
18703: PUSH
18704: LD_INT 30
18706: PUSH
18707: LD_INT 31
18709: PUSH
18710: LD_INT 32
18712: PUSH
18713: LD_INT 36
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 101
18741: PUSH
18742: LD_INT 102
18744: PUSH
18745: LD_INT 103
18747: PUSH
18748: LD_INT 105
18750: PUSH
18751: LD_INT 106
18753: PUSH
18754: LD_INT 108
18756: PUSH
18757: LD_INT 109
18759: PUSH
18760: LD_INT 112
18762: PUSH
18763: LD_INT 114
18765: PUSH
18766: LD_INT 116
18768: PUSH
18769: LD_INT 117
18771: PUSH
18772: LD_INT 118
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: ST_TO_ADDR
18793: GO 20892
18795: LD_INT 10
18797: DOUBLE
18798: EQUAL
18799: IFTRUE 18803
18801: GO 18999
18803: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18804: LD_ADDR_VAR 0 2
18808: PUSH
18809: LD_INT 2
18811: PUSH
18812: LD_INT 4
18814: PUSH
18815: LD_INT 5
18817: PUSH
18818: LD_INT 6
18820: PUSH
18821: LD_INT 7
18823: PUSH
18824: LD_INT 8
18826: PUSH
18827: LD_INT 9
18829: PUSH
18830: LD_INT 10
18832: PUSH
18833: LD_INT 11
18835: PUSH
18836: LD_INT 12
18838: PUSH
18839: LD_INT 13
18841: PUSH
18842: LD_INT 14
18844: PUSH
18845: LD_INT 15
18847: PUSH
18848: LD_INT 16
18850: PUSH
18851: LD_INT 17
18853: PUSH
18854: LD_INT 18
18856: PUSH
18857: LD_INT 19
18859: PUSH
18860: LD_INT 20
18862: PUSH
18863: LD_INT 21
18865: PUSH
18866: LD_INT 22
18868: PUSH
18869: LD_INT 23
18871: PUSH
18872: LD_INT 24
18874: PUSH
18875: LD_INT 25
18877: PUSH
18878: LD_INT 26
18880: PUSH
18881: LD_INT 28
18883: PUSH
18884: LD_INT 30
18886: PUSH
18887: LD_INT 31
18889: PUSH
18890: LD_INT 32
18892: PUSH
18893: LD_INT 36
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: PUSH
18927: LD_INT 101
18929: PUSH
18930: LD_INT 102
18932: PUSH
18933: LD_INT 103
18935: PUSH
18936: LD_INT 104
18938: PUSH
18939: LD_INT 105
18941: PUSH
18942: LD_INT 106
18944: PUSH
18945: LD_INT 107
18947: PUSH
18948: LD_INT 108
18950: PUSH
18951: LD_INT 109
18953: PUSH
18954: LD_INT 110
18956: PUSH
18957: LD_INT 111
18959: PUSH
18960: LD_INT 112
18962: PUSH
18963: LD_INT 114
18965: PUSH
18966: LD_INT 116
18968: PUSH
18969: LD_INT 117
18971: PUSH
18972: LD_INT 118
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: ST_TO_ADDR
18997: GO 20892
18999: LD_INT 11
19001: DOUBLE
19002: EQUAL
19003: IFTRUE 19007
19005: GO 19211
19007: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
19008: LD_ADDR_VAR 0 2
19012: PUSH
19013: LD_INT 2
19015: PUSH
19016: LD_INT 3
19018: PUSH
19019: LD_INT 4
19021: PUSH
19022: LD_INT 5
19024: PUSH
19025: LD_INT 6
19027: PUSH
19028: LD_INT 7
19030: PUSH
19031: LD_INT 8
19033: PUSH
19034: LD_INT 9
19036: PUSH
19037: LD_INT 10
19039: PUSH
19040: LD_INT 11
19042: PUSH
19043: LD_INT 12
19045: PUSH
19046: LD_INT 13
19048: PUSH
19049: LD_INT 14
19051: PUSH
19052: LD_INT 15
19054: PUSH
19055: LD_INT 16
19057: PUSH
19058: LD_INT 17
19060: PUSH
19061: LD_INT 18
19063: PUSH
19064: LD_INT 19
19066: PUSH
19067: LD_INT 20
19069: PUSH
19070: LD_INT 21
19072: PUSH
19073: LD_INT 22
19075: PUSH
19076: LD_INT 23
19078: PUSH
19079: LD_INT 24
19081: PUSH
19082: LD_INT 25
19084: PUSH
19085: LD_INT 26
19087: PUSH
19088: LD_INT 28
19090: PUSH
19091: LD_INT 30
19093: PUSH
19094: LD_INT 31
19096: PUSH
19097: LD_INT 32
19099: PUSH
19100: LD_INT 34
19102: PUSH
19103: LD_INT 36
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 101
19141: PUSH
19142: LD_INT 102
19144: PUSH
19145: LD_INT 103
19147: PUSH
19148: LD_INT 104
19150: PUSH
19151: LD_INT 105
19153: PUSH
19154: LD_INT 106
19156: PUSH
19157: LD_INT 107
19159: PUSH
19160: LD_INT 108
19162: PUSH
19163: LD_INT 109
19165: PUSH
19166: LD_INT 110
19168: PUSH
19169: LD_INT 111
19171: PUSH
19172: LD_INT 112
19174: PUSH
19175: LD_INT 114
19177: PUSH
19178: LD_INT 116
19180: PUSH
19181: LD_INT 117
19183: PUSH
19184: LD_INT 118
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: ST_TO_ADDR
19209: GO 20892
19211: LD_INT 12
19213: DOUBLE
19214: EQUAL
19215: IFTRUE 19219
19217: GO 19439
19219: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
19220: LD_ADDR_VAR 0 2
19224: PUSH
19225: LD_INT 1
19227: PUSH
19228: LD_INT 2
19230: PUSH
19231: LD_INT 3
19233: PUSH
19234: LD_INT 4
19236: PUSH
19237: LD_INT 5
19239: PUSH
19240: LD_INT 6
19242: PUSH
19243: LD_INT 7
19245: PUSH
19246: LD_INT 8
19248: PUSH
19249: LD_INT 9
19251: PUSH
19252: LD_INT 10
19254: PUSH
19255: LD_INT 11
19257: PUSH
19258: LD_INT 12
19260: PUSH
19261: LD_INT 13
19263: PUSH
19264: LD_INT 14
19266: PUSH
19267: LD_INT 15
19269: PUSH
19270: LD_INT 16
19272: PUSH
19273: LD_INT 17
19275: PUSH
19276: LD_INT 18
19278: PUSH
19279: LD_INT 19
19281: PUSH
19282: LD_INT 20
19284: PUSH
19285: LD_INT 21
19287: PUSH
19288: LD_INT 22
19290: PUSH
19291: LD_INT 23
19293: PUSH
19294: LD_INT 24
19296: PUSH
19297: LD_INT 25
19299: PUSH
19300: LD_INT 26
19302: PUSH
19303: LD_INT 27
19305: PUSH
19306: LD_INT 28
19308: PUSH
19309: LD_INT 30
19311: PUSH
19312: LD_INT 31
19314: PUSH
19315: LD_INT 32
19317: PUSH
19318: LD_INT 33
19320: PUSH
19321: LD_INT 34
19323: PUSH
19324: LD_INT 36
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 101
19365: PUSH
19366: LD_INT 102
19368: PUSH
19369: LD_INT 103
19371: PUSH
19372: LD_INT 104
19374: PUSH
19375: LD_INT 105
19377: PUSH
19378: LD_INT 106
19380: PUSH
19381: LD_INT 107
19383: PUSH
19384: LD_INT 108
19386: PUSH
19387: LD_INT 109
19389: PUSH
19390: LD_INT 110
19392: PUSH
19393: LD_INT 111
19395: PUSH
19396: LD_INT 112
19398: PUSH
19399: LD_INT 113
19401: PUSH
19402: LD_INT 114
19404: PUSH
19405: LD_INT 116
19407: PUSH
19408: LD_INT 117
19410: PUSH
19411: LD_INT 118
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: ST_TO_ADDR
19437: GO 20892
19439: LD_INT 13
19441: DOUBLE
19442: EQUAL
19443: IFTRUE 19447
19445: GO 19655
19447: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
19448: LD_ADDR_VAR 0 2
19452: PUSH
19453: LD_INT 1
19455: PUSH
19456: LD_INT 2
19458: PUSH
19459: LD_INT 3
19461: PUSH
19462: LD_INT 4
19464: PUSH
19465: LD_INT 5
19467: PUSH
19468: LD_INT 8
19470: PUSH
19471: LD_INT 9
19473: PUSH
19474: LD_INT 10
19476: PUSH
19477: LD_INT 11
19479: PUSH
19480: LD_INT 12
19482: PUSH
19483: LD_INT 14
19485: PUSH
19486: LD_INT 15
19488: PUSH
19489: LD_INT 16
19491: PUSH
19492: LD_INT 17
19494: PUSH
19495: LD_INT 18
19497: PUSH
19498: LD_INT 19
19500: PUSH
19501: LD_INT 20
19503: PUSH
19504: LD_INT 21
19506: PUSH
19507: LD_INT 22
19509: PUSH
19510: LD_INT 23
19512: PUSH
19513: LD_INT 24
19515: PUSH
19516: LD_INT 25
19518: PUSH
19519: LD_INT 26
19521: PUSH
19522: LD_INT 27
19524: PUSH
19525: LD_INT 28
19527: PUSH
19528: LD_INT 30
19530: PUSH
19531: LD_INT 31
19533: PUSH
19534: LD_INT 32
19536: PUSH
19537: LD_INT 33
19539: PUSH
19540: LD_INT 34
19542: PUSH
19543: LD_INT 36
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 101
19581: PUSH
19582: LD_INT 102
19584: PUSH
19585: LD_INT 103
19587: PUSH
19588: LD_INT 104
19590: PUSH
19591: LD_INT 105
19593: PUSH
19594: LD_INT 106
19596: PUSH
19597: LD_INT 107
19599: PUSH
19600: LD_INT 108
19602: PUSH
19603: LD_INT 109
19605: PUSH
19606: LD_INT 110
19608: PUSH
19609: LD_INT 111
19611: PUSH
19612: LD_INT 112
19614: PUSH
19615: LD_INT 113
19617: PUSH
19618: LD_INT 114
19620: PUSH
19621: LD_INT 116
19623: PUSH
19624: LD_INT 117
19626: PUSH
19627: LD_INT 118
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: ST_TO_ADDR
19653: GO 20892
19655: LD_INT 14
19657: DOUBLE
19658: EQUAL
19659: IFTRUE 19663
19661: GO 19887
19663: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
19664: LD_ADDR_VAR 0 2
19668: PUSH
19669: LD_INT 1
19671: PUSH
19672: LD_INT 2
19674: PUSH
19675: LD_INT 3
19677: PUSH
19678: LD_INT 4
19680: PUSH
19681: LD_INT 5
19683: PUSH
19684: LD_INT 6
19686: PUSH
19687: LD_INT 7
19689: PUSH
19690: LD_INT 8
19692: PUSH
19693: LD_INT 9
19695: PUSH
19696: LD_INT 10
19698: PUSH
19699: LD_INT 11
19701: PUSH
19702: LD_INT 12
19704: PUSH
19705: LD_INT 13
19707: PUSH
19708: LD_INT 14
19710: PUSH
19711: LD_INT 15
19713: PUSH
19714: LD_INT 16
19716: PUSH
19717: LD_INT 17
19719: PUSH
19720: LD_INT 18
19722: PUSH
19723: LD_INT 19
19725: PUSH
19726: LD_INT 20
19728: PUSH
19729: LD_INT 21
19731: PUSH
19732: LD_INT 22
19734: PUSH
19735: LD_INT 23
19737: PUSH
19738: LD_INT 24
19740: PUSH
19741: LD_INT 25
19743: PUSH
19744: LD_INT 26
19746: PUSH
19747: LD_INT 27
19749: PUSH
19750: LD_INT 28
19752: PUSH
19753: LD_INT 29
19755: PUSH
19756: LD_INT 30
19758: PUSH
19759: LD_INT 31
19761: PUSH
19762: LD_INT 32
19764: PUSH
19765: LD_INT 33
19767: PUSH
19768: LD_INT 34
19770: PUSH
19771: LD_INT 36
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: PUSH
19811: LD_INT 101
19813: PUSH
19814: LD_INT 102
19816: PUSH
19817: LD_INT 103
19819: PUSH
19820: LD_INT 104
19822: PUSH
19823: LD_INT 105
19825: PUSH
19826: LD_INT 106
19828: PUSH
19829: LD_INT 107
19831: PUSH
19832: LD_INT 108
19834: PUSH
19835: LD_INT 109
19837: PUSH
19838: LD_INT 110
19840: PUSH
19841: LD_INT 111
19843: PUSH
19844: LD_INT 112
19846: PUSH
19847: LD_INT 113
19849: PUSH
19850: LD_INT 114
19852: PUSH
19853: LD_INT 116
19855: PUSH
19856: LD_INT 117
19858: PUSH
19859: LD_INT 118
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: ST_TO_ADDR
19885: GO 20892
19887: LD_INT 15
19889: DOUBLE
19890: EQUAL
19891: IFTRUE 19895
19893: GO 20119
19895: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19896: LD_ADDR_VAR 0 2
19900: PUSH
19901: LD_INT 1
19903: PUSH
19904: LD_INT 2
19906: PUSH
19907: LD_INT 3
19909: PUSH
19910: LD_INT 4
19912: PUSH
19913: LD_INT 5
19915: PUSH
19916: LD_INT 6
19918: PUSH
19919: LD_INT 7
19921: PUSH
19922: LD_INT 8
19924: PUSH
19925: LD_INT 9
19927: PUSH
19928: LD_INT 10
19930: PUSH
19931: LD_INT 11
19933: PUSH
19934: LD_INT 12
19936: PUSH
19937: LD_INT 13
19939: PUSH
19940: LD_INT 14
19942: PUSH
19943: LD_INT 15
19945: PUSH
19946: LD_INT 16
19948: PUSH
19949: LD_INT 17
19951: PUSH
19952: LD_INT 18
19954: PUSH
19955: LD_INT 19
19957: PUSH
19958: LD_INT 20
19960: PUSH
19961: LD_INT 21
19963: PUSH
19964: LD_INT 22
19966: PUSH
19967: LD_INT 23
19969: PUSH
19970: LD_INT 24
19972: PUSH
19973: LD_INT 25
19975: PUSH
19976: LD_INT 26
19978: PUSH
19979: LD_INT 27
19981: PUSH
19982: LD_INT 28
19984: PUSH
19985: LD_INT 29
19987: PUSH
19988: LD_INT 30
19990: PUSH
19991: LD_INT 31
19993: PUSH
19994: LD_INT 32
19996: PUSH
19997: LD_INT 33
19999: PUSH
20000: LD_INT 34
20002: PUSH
20003: LD_INT 36
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 101
20045: PUSH
20046: LD_INT 102
20048: PUSH
20049: LD_INT 103
20051: PUSH
20052: LD_INT 104
20054: PUSH
20055: LD_INT 105
20057: PUSH
20058: LD_INT 106
20060: PUSH
20061: LD_INT 107
20063: PUSH
20064: LD_INT 108
20066: PUSH
20067: LD_INT 109
20069: PUSH
20070: LD_INT 110
20072: PUSH
20073: LD_INT 111
20075: PUSH
20076: LD_INT 112
20078: PUSH
20079: LD_INT 113
20081: PUSH
20082: LD_INT 114
20084: PUSH
20085: LD_INT 116
20087: PUSH
20088: LD_INT 117
20090: PUSH
20091: LD_INT 118
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: ST_TO_ADDR
20117: GO 20892
20119: LD_INT 16
20121: DOUBLE
20122: EQUAL
20123: IFTRUE 20127
20125: GO 20263
20127: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
20128: LD_ADDR_VAR 0 2
20132: PUSH
20133: LD_INT 2
20135: PUSH
20136: LD_INT 4
20138: PUSH
20139: LD_INT 5
20141: PUSH
20142: LD_INT 7
20144: PUSH
20145: LD_INT 11
20147: PUSH
20148: LD_INT 12
20150: PUSH
20151: LD_INT 15
20153: PUSH
20154: LD_INT 16
20156: PUSH
20157: LD_INT 20
20159: PUSH
20160: LD_INT 21
20162: PUSH
20163: LD_INT 22
20165: PUSH
20166: LD_INT 23
20168: PUSH
20169: LD_INT 25
20171: PUSH
20172: LD_INT 26
20174: PUSH
20175: LD_INT 30
20177: PUSH
20178: LD_INT 31
20180: PUSH
20181: LD_INT 32
20183: PUSH
20184: LD_INT 33
20186: PUSH
20187: LD_INT 34
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: PUSH
20211: LD_INT 101
20213: PUSH
20214: LD_INT 102
20216: PUSH
20217: LD_INT 103
20219: PUSH
20220: LD_INT 106
20222: PUSH
20223: LD_INT 108
20225: PUSH
20226: LD_INT 112
20228: PUSH
20229: LD_INT 113
20231: PUSH
20232: LD_INT 114
20234: PUSH
20235: LD_INT 116
20237: PUSH
20238: LD_INT 117
20240: PUSH
20241: LD_INT 118
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: ST_TO_ADDR
20261: GO 20892
20263: LD_INT 17
20265: DOUBLE
20266: EQUAL
20267: IFTRUE 20271
20269: GO 20495
20271: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
20272: LD_ADDR_VAR 0 2
20276: PUSH
20277: LD_INT 1
20279: PUSH
20280: LD_INT 2
20282: PUSH
20283: LD_INT 3
20285: PUSH
20286: LD_INT 4
20288: PUSH
20289: LD_INT 5
20291: PUSH
20292: LD_INT 6
20294: PUSH
20295: LD_INT 7
20297: PUSH
20298: LD_INT 8
20300: PUSH
20301: LD_INT 9
20303: PUSH
20304: LD_INT 10
20306: PUSH
20307: LD_INT 11
20309: PUSH
20310: LD_INT 12
20312: PUSH
20313: LD_INT 13
20315: PUSH
20316: LD_INT 14
20318: PUSH
20319: LD_INT 15
20321: PUSH
20322: LD_INT 16
20324: PUSH
20325: LD_INT 17
20327: PUSH
20328: LD_INT 18
20330: PUSH
20331: LD_INT 19
20333: PUSH
20334: LD_INT 20
20336: PUSH
20337: LD_INT 21
20339: PUSH
20340: LD_INT 22
20342: PUSH
20343: LD_INT 23
20345: PUSH
20346: LD_INT 24
20348: PUSH
20349: LD_INT 25
20351: PUSH
20352: LD_INT 26
20354: PUSH
20355: LD_INT 27
20357: PUSH
20358: LD_INT 28
20360: PUSH
20361: LD_INT 29
20363: PUSH
20364: LD_INT 30
20366: PUSH
20367: LD_INT 31
20369: PUSH
20370: LD_INT 32
20372: PUSH
20373: LD_INT 33
20375: PUSH
20376: LD_INT 34
20378: PUSH
20379: LD_INT 36
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 101
20421: PUSH
20422: LD_INT 102
20424: PUSH
20425: LD_INT 103
20427: PUSH
20428: LD_INT 104
20430: PUSH
20431: LD_INT 105
20433: PUSH
20434: LD_INT 106
20436: PUSH
20437: LD_INT 107
20439: PUSH
20440: LD_INT 108
20442: PUSH
20443: LD_INT 109
20445: PUSH
20446: LD_INT 110
20448: PUSH
20449: LD_INT 111
20451: PUSH
20452: LD_INT 112
20454: PUSH
20455: LD_INT 113
20457: PUSH
20458: LD_INT 114
20460: PUSH
20461: LD_INT 116
20463: PUSH
20464: LD_INT 117
20466: PUSH
20467: LD_INT 118
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: ST_TO_ADDR
20493: GO 20892
20495: LD_INT 18
20497: DOUBLE
20498: EQUAL
20499: IFTRUE 20503
20501: GO 20651
20503: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
20504: LD_ADDR_VAR 0 2
20508: PUSH
20509: LD_INT 2
20511: PUSH
20512: LD_INT 4
20514: PUSH
20515: LD_INT 5
20517: PUSH
20518: LD_INT 7
20520: PUSH
20521: LD_INT 11
20523: PUSH
20524: LD_INT 12
20526: PUSH
20527: LD_INT 15
20529: PUSH
20530: LD_INT 16
20532: PUSH
20533: LD_INT 20
20535: PUSH
20536: LD_INT 21
20538: PUSH
20539: LD_INT 22
20541: PUSH
20542: LD_INT 23
20544: PUSH
20545: LD_INT 25
20547: PUSH
20548: LD_INT 26
20550: PUSH
20551: LD_INT 30
20553: PUSH
20554: LD_INT 31
20556: PUSH
20557: LD_INT 32
20559: PUSH
20560: LD_INT 33
20562: PUSH
20563: LD_INT 34
20565: PUSH
20566: LD_INT 35
20568: PUSH
20569: LD_INT 36
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 101
20597: PUSH
20598: LD_INT 102
20600: PUSH
20601: LD_INT 103
20603: PUSH
20604: LD_INT 106
20606: PUSH
20607: LD_INT 108
20609: PUSH
20610: LD_INT 112
20612: PUSH
20613: LD_INT 113
20615: PUSH
20616: LD_INT 114
20618: PUSH
20619: LD_INT 115
20621: PUSH
20622: LD_INT 116
20624: PUSH
20625: LD_INT 117
20627: PUSH
20628: LD_INT 118
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: ST_TO_ADDR
20649: GO 20892
20651: LD_INT 19
20653: DOUBLE
20654: EQUAL
20655: IFTRUE 20659
20657: GO 20891
20659: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
20660: LD_ADDR_VAR 0 2
20664: PUSH
20665: LD_INT 1
20667: PUSH
20668: LD_INT 2
20670: PUSH
20671: LD_INT 3
20673: PUSH
20674: LD_INT 4
20676: PUSH
20677: LD_INT 5
20679: PUSH
20680: LD_INT 6
20682: PUSH
20683: LD_INT 7
20685: PUSH
20686: LD_INT 8
20688: PUSH
20689: LD_INT 9
20691: PUSH
20692: LD_INT 10
20694: PUSH
20695: LD_INT 11
20697: PUSH
20698: LD_INT 12
20700: PUSH
20701: LD_INT 13
20703: PUSH
20704: LD_INT 14
20706: PUSH
20707: LD_INT 15
20709: PUSH
20710: LD_INT 16
20712: PUSH
20713: LD_INT 17
20715: PUSH
20716: LD_INT 18
20718: PUSH
20719: LD_INT 19
20721: PUSH
20722: LD_INT 20
20724: PUSH
20725: LD_INT 21
20727: PUSH
20728: LD_INT 22
20730: PUSH
20731: LD_INT 23
20733: PUSH
20734: LD_INT 24
20736: PUSH
20737: LD_INT 25
20739: PUSH
20740: LD_INT 26
20742: PUSH
20743: LD_INT 27
20745: PUSH
20746: LD_INT 28
20748: PUSH
20749: LD_INT 29
20751: PUSH
20752: LD_INT 30
20754: PUSH
20755: LD_INT 31
20757: PUSH
20758: LD_INT 32
20760: PUSH
20761: LD_INT 33
20763: PUSH
20764: LD_INT 34
20766: PUSH
20767: LD_INT 35
20769: PUSH
20770: LD_INT 36
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 101
20813: PUSH
20814: LD_INT 102
20816: PUSH
20817: LD_INT 103
20819: PUSH
20820: LD_INT 104
20822: PUSH
20823: LD_INT 105
20825: PUSH
20826: LD_INT 106
20828: PUSH
20829: LD_INT 107
20831: PUSH
20832: LD_INT 108
20834: PUSH
20835: LD_INT 109
20837: PUSH
20838: LD_INT 110
20840: PUSH
20841: LD_INT 111
20843: PUSH
20844: LD_INT 112
20846: PUSH
20847: LD_INT 113
20849: PUSH
20850: LD_INT 114
20852: PUSH
20853: LD_INT 115
20855: PUSH
20856: LD_INT 116
20858: PUSH
20859: LD_INT 117
20861: PUSH
20862: LD_INT 118
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: ST_TO_ADDR
20889: GO 20892
20891: POP
// end else
20892: GO 21123
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20894: LD_ADDR_VAR 0 2
20898: PUSH
20899: LD_INT 1
20901: PUSH
20902: LD_INT 2
20904: PUSH
20905: LD_INT 3
20907: PUSH
20908: LD_INT 4
20910: PUSH
20911: LD_INT 5
20913: PUSH
20914: LD_INT 6
20916: PUSH
20917: LD_INT 7
20919: PUSH
20920: LD_INT 8
20922: PUSH
20923: LD_INT 9
20925: PUSH
20926: LD_INT 10
20928: PUSH
20929: LD_INT 11
20931: PUSH
20932: LD_INT 12
20934: PUSH
20935: LD_INT 13
20937: PUSH
20938: LD_INT 14
20940: PUSH
20941: LD_INT 15
20943: PUSH
20944: LD_INT 16
20946: PUSH
20947: LD_INT 17
20949: PUSH
20950: LD_INT 18
20952: PUSH
20953: LD_INT 19
20955: PUSH
20956: LD_INT 20
20958: PUSH
20959: LD_INT 21
20961: PUSH
20962: LD_INT 22
20964: PUSH
20965: LD_INT 23
20967: PUSH
20968: LD_INT 24
20970: PUSH
20971: LD_INT 25
20973: PUSH
20974: LD_INT 26
20976: PUSH
20977: LD_INT 27
20979: PUSH
20980: LD_INT 28
20982: PUSH
20983: LD_INT 29
20985: PUSH
20986: LD_INT 30
20988: PUSH
20989: LD_INT 31
20991: PUSH
20992: LD_INT 32
20994: PUSH
20995: LD_INT 33
20997: PUSH
20998: LD_INT 34
21000: PUSH
21001: LD_INT 35
21003: PUSH
21004: LD_INT 36
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 101
21047: PUSH
21048: LD_INT 102
21050: PUSH
21051: LD_INT 103
21053: PUSH
21054: LD_INT 104
21056: PUSH
21057: LD_INT 105
21059: PUSH
21060: LD_INT 106
21062: PUSH
21063: LD_INT 107
21065: PUSH
21066: LD_INT 108
21068: PUSH
21069: LD_INT 109
21071: PUSH
21072: LD_INT 110
21074: PUSH
21075: LD_INT 111
21077: PUSH
21078: LD_INT 112
21080: PUSH
21081: LD_INT 113
21083: PUSH
21084: LD_INT 114
21086: PUSH
21087: LD_INT 115
21089: PUSH
21090: LD_INT 116
21092: PUSH
21093: LD_INT 117
21095: PUSH
21096: LD_INT 118
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: ST_TO_ADDR
// if result then
21123: LD_VAR 0 2
21127: IFFALSE 21913
// begin normal :=  ;
21129: LD_ADDR_VAR 0 5
21133: PUSH
21134: LD_STRING 
21136: ST_TO_ADDR
// hardcore :=  ;
21137: LD_ADDR_VAR 0 6
21141: PUSH
21142: LD_STRING 
21144: ST_TO_ADDR
// active :=  ;
21145: LD_ADDR_VAR 0 7
21149: PUSH
21150: LD_STRING 
21152: ST_TO_ADDR
// for i = 1 to normalCounter do
21153: LD_ADDR_VAR 0 8
21157: PUSH
21158: DOUBLE
21159: LD_INT 1
21161: DEC
21162: ST_TO_ADDR
21163: LD_EXP 39
21167: PUSH
21168: FOR_TO
21169: IFFALSE 21270
// begin tmp := 0 ;
21171: LD_ADDR_VAR 0 3
21175: PUSH
21176: LD_STRING 0
21178: ST_TO_ADDR
// if result [ 1 ] then
21179: LD_VAR 0 2
21183: PUSH
21184: LD_INT 1
21186: ARRAY
21187: IFFALSE 21252
// if result [ 1 ] [ 1 ] = i then
21189: LD_VAR 0 2
21193: PUSH
21194: LD_INT 1
21196: ARRAY
21197: PUSH
21198: LD_INT 1
21200: ARRAY
21201: PUSH
21202: LD_VAR 0 8
21206: EQUAL
21207: IFFALSE 21252
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21209: LD_ADDR_VAR 0 2
21213: PUSH
21214: LD_VAR 0 2
21218: PPUSH
21219: LD_INT 1
21221: PPUSH
21222: LD_VAR 0 2
21226: PUSH
21227: LD_INT 1
21229: ARRAY
21230: PPUSH
21231: LD_INT 1
21233: PPUSH
21234: CALL_OW 3
21238: PPUSH
21239: CALL_OW 1
21243: ST_TO_ADDR
// tmp := 1 ;
21244: LD_ADDR_VAR 0 3
21248: PUSH
21249: LD_STRING 1
21251: ST_TO_ADDR
// end ; normal := normal & tmp ;
21252: LD_ADDR_VAR 0 5
21256: PUSH
21257: LD_VAR 0 5
21261: PUSH
21262: LD_VAR 0 3
21266: STR
21267: ST_TO_ADDR
// end ;
21268: GO 21168
21270: POP
21271: POP
// for i = 1 to hardcoreCounter do
21272: LD_ADDR_VAR 0 8
21276: PUSH
21277: DOUBLE
21278: LD_INT 1
21280: DEC
21281: ST_TO_ADDR
21282: LD_EXP 40
21286: PUSH
21287: FOR_TO
21288: IFFALSE 21393
// begin tmp := 0 ;
21290: LD_ADDR_VAR 0 3
21294: PUSH
21295: LD_STRING 0
21297: ST_TO_ADDR
// if result [ 2 ] then
21298: LD_VAR 0 2
21302: PUSH
21303: LD_INT 2
21305: ARRAY
21306: IFFALSE 21375
// if result [ 2 ] [ 1 ] = 100 + i then
21308: LD_VAR 0 2
21312: PUSH
21313: LD_INT 2
21315: ARRAY
21316: PUSH
21317: LD_INT 1
21319: ARRAY
21320: PUSH
21321: LD_INT 100
21323: PUSH
21324: LD_VAR 0 8
21328: PLUS
21329: EQUAL
21330: IFFALSE 21375
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21332: LD_ADDR_VAR 0 2
21336: PUSH
21337: LD_VAR 0 2
21341: PPUSH
21342: LD_INT 2
21344: PPUSH
21345: LD_VAR 0 2
21349: PUSH
21350: LD_INT 2
21352: ARRAY
21353: PPUSH
21354: LD_INT 1
21356: PPUSH
21357: CALL_OW 3
21361: PPUSH
21362: CALL_OW 1
21366: ST_TO_ADDR
// tmp := 1 ;
21367: LD_ADDR_VAR 0 3
21371: PUSH
21372: LD_STRING 1
21374: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21375: LD_ADDR_VAR 0 6
21379: PUSH
21380: LD_VAR 0 6
21384: PUSH
21385: LD_VAR 0 3
21389: STR
21390: ST_TO_ADDR
// end ;
21391: GO 21287
21393: POP
21394: POP
// if isGameLoad then
21395: LD_VAR 0 1
21399: IFFALSE 21874
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
21401: LD_ADDR_VAR 0 4
21405: PUSH
21406: LD_EXP 43
21410: PUSH
21411: LD_EXP 42
21415: PUSH
21416: LD_EXP 44
21420: PUSH
21421: LD_EXP 41
21425: PUSH
21426: LD_EXP 45
21430: PUSH
21431: LD_EXP 46
21435: PUSH
21436: LD_EXP 47
21440: PUSH
21441: LD_EXP 48
21445: PUSH
21446: LD_EXP 49
21450: PUSH
21451: LD_EXP 50
21455: PUSH
21456: LD_EXP 51
21460: PUSH
21461: LD_EXP 52
21465: PUSH
21466: LD_EXP 53
21470: PUSH
21471: LD_EXP 54
21475: PUSH
21476: LD_EXP 62
21480: PUSH
21481: LD_EXP 63
21485: PUSH
21486: LD_EXP 64
21490: PUSH
21491: LD_EXP 65
21495: PUSH
21496: LD_EXP 67
21500: PUSH
21501: LD_EXP 68
21505: PUSH
21506: LD_EXP 69
21510: PUSH
21511: LD_EXP 72
21515: PUSH
21516: LD_EXP 74
21520: PUSH
21521: LD_EXP 75
21525: PUSH
21526: LD_EXP 76
21530: PUSH
21531: LD_EXP 78
21535: PUSH
21536: LD_EXP 79
21540: PUSH
21541: LD_EXP 82
21545: PUSH
21546: LD_EXP 83
21550: PUSH
21551: LD_EXP 84
21555: PUSH
21556: LD_EXP 85
21560: PUSH
21561: LD_EXP 86
21565: PUSH
21566: LD_EXP 87
21570: PUSH
21571: LD_EXP 88
21575: PUSH
21576: LD_EXP 89
21580: PUSH
21581: LD_EXP 90
21585: PUSH
21586: LD_EXP 55
21590: PUSH
21591: LD_EXP 56
21595: PUSH
21596: LD_EXP 59
21600: PUSH
21601: LD_EXP 60
21605: PUSH
21606: LD_EXP 61
21610: PUSH
21611: LD_EXP 57
21615: PUSH
21616: LD_EXP 58
21620: PUSH
21621: LD_EXP 66
21625: PUSH
21626: LD_EXP 70
21630: PUSH
21631: LD_EXP 71
21635: PUSH
21636: LD_EXP 73
21640: PUSH
21641: LD_EXP 77
21645: PUSH
21646: LD_EXP 80
21650: PUSH
21651: LD_EXP 81
21655: PUSH
21656: LD_EXP 91
21660: PUSH
21661: LD_EXP 92
21665: PUSH
21666: LD_EXP 93
21670: PUSH
21671: LD_EXP 94
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: ST_TO_ADDR
// tmp :=  ;
21732: LD_ADDR_VAR 0 3
21736: PUSH
21737: LD_STRING 
21739: ST_TO_ADDR
// for i = 1 to normalCounter do
21740: LD_ADDR_VAR 0 8
21744: PUSH
21745: DOUBLE
21746: LD_INT 1
21748: DEC
21749: ST_TO_ADDR
21750: LD_EXP 39
21754: PUSH
21755: FOR_TO
21756: IFFALSE 21792
// begin if flags [ i ] then
21758: LD_VAR 0 4
21762: PUSH
21763: LD_VAR 0 8
21767: ARRAY
21768: IFFALSE 21790
// tmp := tmp & i & ; ;
21770: LD_ADDR_VAR 0 3
21774: PUSH
21775: LD_VAR 0 3
21779: PUSH
21780: LD_VAR 0 8
21784: STR
21785: PUSH
21786: LD_STRING ;
21788: STR
21789: ST_TO_ADDR
// end ;
21790: GO 21755
21792: POP
21793: POP
// for i = 1 to hardcoreCounter do
21794: LD_ADDR_VAR 0 8
21798: PUSH
21799: DOUBLE
21800: LD_INT 1
21802: DEC
21803: ST_TO_ADDR
21804: LD_EXP 40
21808: PUSH
21809: FOR_TO
21810: IFFALSE 21856
// begin if flags [ normalCounter + i ] then
21812: LD_VAR 0 4
21816: PUSH
21817: LD_EXP 39
21821: PUSH
21822: LD_VAR 0 8
21826: PLUS
21827: ARRAY
21828: IFFALSE 21854
// tmp := tmp & ( 100 + i ) & ; ;
21830: LD_ADDR_VAR 0 3
21834: PUSH
21835: LD_VAR 0 3
21839: PUSH
21840: LD_INT 100
21842: PUSH
21843: LD_VAR 0 8
21847: PLUS
21848: STR
21849: PUSH
21850: LD_STRING ;
21852: STR
21853: ST_TO_ADDR
// end ;
21854: GO 21809
21856: POP
21857: POP
// if tmp then
21858: LD_VAR 0 3
21862: IFFALSE 21874
// active := tmp ;
21864: LD_ADDR_VAR 0 7
21868: PUSH
21869: LD_VAR 0 3
21873: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21874: LD_STRING getStreamItemsFromMission("
21876: PUSH
21877: LD_VAR 0 5
21881: STR
21882: PUSH
21883: LD_STRING ","
21885: STR
21886: PUSH
21887: LD_VAR 0 6
21891: STR
21892: PUSH
21893: LD_STRING ","
21895: STR
21896: PUSH
21897: LD_VAR 0 7
21901: STR
21902: PUSH
21903: LD_STRING ")
21905: STR
21906: PPUSH
21907: CALL_OW 559
// end else
21911: GO 21920
// ToLua ( getStreamItemsFromMission("","","") ) ;
21913: LD_STRING getStreamItemsFromMission("","","")
21915: PPUSH
21916: CALL_OW 559
// end ;
21920: LD_VAR 0 2
21924: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21925: LD_EXP 38
21929: IFFALSE 21937
21931: PUSH
21932: LD_EXP 43
21936: AND
21937: IFFALSE 22061
21939: GO 21941
21941: DISABLE
21942: LD_INT 0
21944: PPUSH
21945: PPUSH
// begin enable ;
21946: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21947: LD_ADDR_VAR 0 2
21951: PUSH
21952: LD_INT 22
21954: PUSH
21955: LD_OWVAR 2
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 2
21966: PUSH
21967: LD_INT 34
21969: PUSH
21970: LD_INT 7
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 34
21979: PUSH
21980: LD_INT 45
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 34
21989: PUSH
21990: LD_INT 28
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 34
21999: PUSH
22000: LD_INT 47
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PPUSH
22018: CALL_OW 69
22022: ST_TO_ADDR
// if not tmp then
22023: LD_VAR 0 2
22027: NOT
22028: IFFALSE 22032
// exit ;
22030: GO 22061
// for i in tmp do
22032: LD_ADDR_VAR 0 1
22036: PUSH
22037: LD_VAR 0 2
22041: PUSH
22042: FOR_IN
22043: IFFALSE 22059
// begin SetLives ( i , 0 ) ;
22045: LD_VAR 0 1
22049: PPUSH
22050: LD_INT 0
22052: PPUSH
22053: CALL_OW 234
// end ;
22057: GO 22042
22059: POP
22060: POP
// end ;
22061: PPOPN 2
22063: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22064: LD_EXP 38
22068: IFFALSE 22076
22070: PUSH
22071: LD_EXP 44
22075: AND
22076: IFFALSE 22160
22078: GO 22080
22080: DISABLE
22081: LD_INT 0
22083: PPUSH
22084: PPUSH
// begin enable ;
22085: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22086: LD_ADDR_VAR 0 2
22090: PUSH
22091: LD_INT 22
22093: PUSH
22094: LD_OWVAR 2
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: PUSH
22103: LD_INT 32
22105: PUSH
22106: LD_INT 3
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: PPUSH
22117: CALL_OW 69
22121: ST_TO_ADDR
// if not tmp then
22122: LD_VAR 0 2
22126: NOT
22127: IFFALSE 22131
// exit ;
22129: GO 22160
// for i in tmp do
22131: LD_ADDR_VAR 0 1
22135: PUSH
22136: LD_VAR 0 2
22140: PUSH
22141: FOR_IN
22142: IFFALSE 22158
// begin SetLives ( i , 0 ) ;
22144: LD_VAR 0 1
22148: PPUSH
22149: LD_INT 0
22151: PPUSH
22152: CALL_OW 234
// end ;
22156: GO 22141
22158: POP
22159: POP
// end ;
22160: PPOPN 2
22162: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22163: LD_EXP 38
22167: IFFALSE 22175
22169: PUSH
22170: LD_EXP 41
22174: AND
22175: IFFALSE 22268
22177: GO 22179
22179: DISABLE
22180: LD_INT 0
22182: PPUSH
// begin enable ;
22183: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22184: LD_ADDR_VAR 0 1
22188: PUSH
22189: LD_INT 22
22191: PUSH
22192: LD_OWVAR 2
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 2
22203: PUSH
22204: LD_INT 25
22206: PUSH
22207: LD_INT 5
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 25
22216: PUSH
22217: LD_INT 9
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 25
22226: PUSH
22227: LD_INT 8
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PPUSH
22244: CALL_OW 69
22248: PUSH
22249: FOR_IN
22250: IFFALSE 22266
// begin SetClass ( i , 1 ) ;
22252: LD_VAR 0 1
22256: PPUSH
22257: LD_INT 1
22259: PPUSH
22260: CALL_OW 336
// end ;
22264: GO 22249
22266: POP
22267: POP
// end ;
22268: PPOPN 1
22270: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22271: LD_EXP 38
22275: IFFALSE 22283
22277: PUSH
22278: LD_EXP 42
22282: AND
22283: IFFALSE 22295
22285: PUSH
22286: LD_OWVAR 65
22290: PUSH
22291: LD_INT 7
22293: LESS
22294: AND
22295: IFFALSE 22309
22297: GO 22299
22299: DISABLE
// begin enable ;
22300: ENABLE
// game_speed := 7 ;
22301: LD_ADDR_OWVAR 65
22305: PUSH
22306: LD_INT 7
22308: ST_TO_ADDR
// end ;
22309: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22310: LD_EXP 38
22314: IFFALSE 22322
22316: PUSH
22317: LD_EXP 45
22321: AND
22322: IFFALSE 22524
22324: GO 22326
22326: DISABLE
22327: LD_INT 0
22329: PPUSH
22330: PPUSH
22331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22332: LD_ADDR_VAR 0 3
22336: PUSH
22337: LD_INT 81
22339: PUSH
22340: LD_OWVAR 2
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 21
22351: PUSH
22352: LD_INT 1
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PPUSH
22363: CALL_OW 69
22367: ST_TO_ADDR
// if not tmp then
22368: LD_VAR 0 3
22372: NOT
22373: IFFALSE 22377
// exit ;
22375: GO 22524
// if tmp > 5 then
22377: LD_VAR 0 3
22381: PUSH
22382: LD_INT 5
22384: GREATER
22385: IFFALSE 22397
// k := 5 else
22387: LD_ADDR_VAR 0 2
22391: PUSH
22392: LD_INT 5
22394: ST_TO_ADDR
22395: GO 22407
// k := tmp ;
22397: LD_ADDR_VAR 0 2
22401: PUSH
22402: LD_VAR 0 3
22406: ST_TO_ADDR
// for i := 1 to k do
22407: LD_ADDR_VAR 0 1
22411: PUSH
22412: DOUBLE
22413: LD_INT 1
22415: DEC
22416: ST_TO_ADDR
22417: LD_VAR 0 2
22421: PUSH
22422: FOR_TO
22423: IFFALSE 22522
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22425: LD_VAR 0 3
22429: PUSH
22430: LD_VAR 0 1
22434: ARRAY
22435: PPUSH
22436: LD_VAR 0 1
22440: PUSH
22441: LD_INT 4
22443: MOD
22444: PUSH
22445: LD_INT 1
22447: PLUS
22448: PPUSH
22449: CALL_OW 259
22453: PUSH
22454: LD_INT 10
22456: LESS
22457: IFFALSE 22520
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22459: LD_VAR 0 3
22463: PUSH
22464: LD_VAR 0 1
22468: ARRAY
22469: PPUSH
22470: LD_VAR 0 1
22474: PUSH
22475: LD_INT 4
22477: MOD
22478: PUSH
22479: LD_INT 1
22481: PLUS
22482: PPUSH
22483: LD_VAR 0 3
22487: PUSH
22488: LD_VAR 0 1
22492: ARRAY
22493: PPUSH
22494: LD_VAR 0 1
22498: PUSH
22499: LD_INT 4
22501: MOD
22502: PUSH
22503: LD_INT 1
22505: PLUS
22506: PPUSH
22507: CALL_OW 259
22511: PUSH
22512: LD_INT 1
22514: PLUS
22515: PPUSH
22516: CALL_OW 237
22520: GO 22422
22522: POP
22523: POP
// end ;
22524: PPOPN 3
22526: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22527: LD_EXP 38
22531: IFFALSE 22539
22533: PUSH
22534: LD_EXP 46
22538: AND
22539: IFFALSE 22559
22541: GO 22543
22543: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22544: LD_INT 4
22546: PPUSH
22547: LD_OWVAR 2
22551: PPUSH
22552: LD_INT 0
22554: PPUSH
22555: CALL_OW 324
22559: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22560: LD_EXP 38
22564: IFFALSE 22572
22566: PUSH
22567: LD_EXP 75
22571: AND
22572: IFFALSE 22592
22574: GO 22576
22576: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22577: LD_INT 19
22579: PPUSH
22580: LD_OWVAR 2
22584: PPUSH
22585: LD_INT 0
22587: PPUSH
22588: CALL_OW 324
22592: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22593: LD_EXP 38
22597: IFFALSE 22605
22599: PUSH
22600: LD_EXP 47
22604: AND
22605: IFFALSE 22707
22607: GO 22609
22609: DISABLE
22610: LD_INT 0
22612: PPUSH
22613: PPUSH
// begin enable ;
22614: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22615: LD_ADDR_VAR 0 2
22619: PUSH
22620: LD_INT 22
22622: PUSH
22623: LD_OWVAR 2
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: PUSH
22632: LD_INT 2
22634: PUSH
22635: LD_INT 34
22637: PUSH
22638: LD_INT 11
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 34
22647: PUSH
22648: LD_INT 30
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: LIST
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PPUSH
22664: CALL_OW 69
22668: ST_TO_ADDR
// if not tmp then
22669: LD_VAR 0 2
22673: NOT
22674: IFFALSE 22678
// exit ;
22676: GO 22707
// for i in tmp do
22678: LD_ADDR_VAR 0 1
22682: PUSH
22683: LD_VAR 0 2
22687: PUSH
22688: FOR_IN
22689: IFFALSE 22705
// begin SetLives ( i , 0 ) ;
22691: LD_VAR 0 1
22695: PPUSH
22696: LD_INT 0
22698: PPUSH
22699: CALL_OW 234
// end ;
22703: GO 22688
22705: POP
22706: POP
// end ;
22707: PPOPN 2
22709: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22710: LD_EXP 38
22714: IFFALSE 22722
22716: PUSH
22717: LD_EXP 48
22721: AND
22722: IFFALSE 22742
22724: GO 22726
22726: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22727: LD_INT 32
22729: PPUSH
22730: LD_OWVAR 2
22734: PPUSH
22735: LD_INT 0
22737: PPUSH
22738: CALL_OW 324
22742: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22743: LD_EXP 38
22747: IFFALSE 22755
22749: PUSH
22750: LD_EXP 49
22754: AND
22755: IFFALSE 22938
22757: GO 22759
22759: DISABLE
22760: LD_INT 0
22762: PPUSH
22763: PPUSH
22764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22765: LD_ADDR_VAR 0 2
22769: PUSH
22770: LD_INT 22
22772: PUSH
22773: LD_OWVAR 2
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 33
22784: PUSH
22785: LD_INT 3
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PPUSH
22796: CALL_OW 69
22800: ST_TO_ADDR
// if not tmp then
22801: LD_VAR 0 2
22805: NOT
22806: IFFALSE 22810
// exit ;
22808: GO 22938
// side := 0 ;
22810: LD_ADDR_VAR 0 3
22814: PUSH
22815: LD_INT 0
22817: ST_TO_ADDR
// for i := 1 to 8 do
22818: LD_ADDR_VAR 0 1
22822: PUSH
22823: DOUBLE
22824: LD_INT 1
22826: DEC
22827: ST_TO_ADDR
22828: LD_INT 8
22830: PUSH
22831: FOR_TO
22832: IFFALSE 22882
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22834: LD_OWVAR 2
22838: PUSH
22839: LD_VAR 0 1
22843: NONEQUAL
22844: IFFALSE 22866
22846: PUSH
22847: LD_OWVAR 2
22851: PPUSH
22852: LD_VAR 0 1
22856: PPUSH
22857: CALL_OW 81
22861: PUSH
22862: LD_INT 2
22864: EQUAL
22865: AND
22866: IFFALSE 22880
// begin side := i ;
22868: LD_ADDR_VAR 0 3
22872: PUSH
22873: LD_VAR 0 1
22877: ST_TO_ADDR
// break ;
22878: GO 22882
// end ;
22880: GO 22831
22882: POP
22883: POP
// if not side then
22884: LD_VAR 0 3
22888: NOT
22889: IFFALSE 22893
// exit ;
22891: GO 22938
// for i := 1 to tmp do
22893: LD_ADDR_VAR 0 1
22897: PUSH
22898: DOUBLE
22899: LD_INT 1
22901: DEC
22902: ST_TO_ADDR
22903: LD_VAR 0 2
22907: PUSH
22908: FOR_TO
22909: IFFALSE 22936
// if Prob ( 60 ) then
22911: LD_INT 60
22913: PPUSH
22914: CALL_OW 13
22918: IFFALSE 22934
// SetSide ( i , side ) ;
22920: LD_VAR 0 1
22924: PPUSH
22925: LD_VAR 0 3
22929: PPUSH
22930: CALL_OW 235
22934: GO 22908
22936: POP
22937: POP
// end ;
22938: PPOPN 3
22940: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22941: LD_EXP 38
22945: IFFALSE 22953
22947: PUSH
22948: LD_EXP 51
22952: AND
22953: IFFALSE 23072
22955: GO 22957
22957: DISABLE
22958: LD_INT 0
22960: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22961: LD_ADDR_VAR 0 1
22965: PUSH
22966: LD_INT 22
22968: PUSH
22969: LD_OWVAR 2
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 21
22980: PUSH
22981: LD_INT 1
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: PUSH
22988: LD_INT 3
22990: PUSH
22991: LD_INT 23
22993: PUSH
22994: LD_INT 0
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: LIST
23009: PPUSH
23010: CALL_OW 69
23014: PUSH
23015: FOR_IN
23016: IFFALSE 23070
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23018: LD_VAR 0 1
23022: PPUSH
23023: CALL_OW 257
23027: PUSH
23028: LD_INT 1
23030: PUSH
23031: LD_INT 2
23033: PUSH
23034: LD_INT 3
23036: PUSH
23037: LD_INT 4
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: IN
23046: IFFALSE 23068
// SetClass ( un , rand ( 1 , 4 ) ) ;
23048: LD_VAR 0 1
23052: PPUSH
23053: LD_INT 1
23055: PPUSH
23056: LD_INT 4
23058: PPUSH
23059: CALL_OW 12
23063: PPUSH
23064: CALL_OW 336
23068: GO 23015
23070: POP
23071: POP
// end ;
23072: PPOPN 1
23074: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23075: LD_EXP 38
23079: IFFALSE 23087
23081: PUSH
23082: LD_EXP 50
23086: AND
23087: IFFALSE 23166
23089: GO 23091
23091: DISABLE
23092: LD_INT 0
23094: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23095: LD_ADDR_VAR 0 1
23099: PUSH
23100: LD_INT 22
23102: PUSH
23103: LD_OWVAR 2
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 21
23114: PUSH
23115: LD_INT 3
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PPUSH
23126: CALL_OW 69
23130: ST_TO_ADDR
// if not tmp then
23131: LD_VAR 0 1
23135: NOT
23136: IFFALSE 23140
// exit ;
23138: GO 23166
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23140: LD_VAR 0 1
23144: PUSH
23145: LD_INT 1
23147: PPUSH
23148: LD_VAR 0 1
23152: PPUSH
23153: CALL_OW 12
23157: ARRAY
23158: PPUSH
23159: LD_INT 100
23161: PPUSH
23162: CALL_OW 234
// end ;
23166: PPOPN 1
23168: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23169: LD_EXP 38
23173: IFFALSE 23181
23175: PUSH
23176: LD_EXP 52
23180: AND
23181: IFFALSE 23279
23183: GO 23185
23185: DISABLE
23186: LD_INT 0
23188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23189: LD_ADDR_VAR 0 1
23193: PUSH
23194: LD_INT 22
23196: PUSH
23197: LD_OWVAR 2
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 21
23208: PUSH
23209: LD_INT 1
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PPUSH
23220: CALL_OW 69
23224: ST_TO_ADDR
// if not tmp then
23225: LD_VAR 0 1
23229: NOT
23230: IFFALSE 23234
// exit ;
23232: GO 23279
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23234: LD_VAR 0 1
23238: PUSH
23239: LD_INT 1
23241: PPUSH
23242: LD_VAR 0 1
23246: PPUSH
23247: CALL_OW 12
23251: ARRAY
23252: PPUSH
23253: LD_INT 1
23255: PPUSH
23256: LD_INT 4
23258: PPUSH
23259: CALL_OW 12
23263: PPUSH
23264: LD_INT 3000
23266: PPUSH
23267: LD_INT 9000
23269: PPUSH
23270: CALL_OW 12
23274: PPUSH
23275: CALL_OW 492
// end ;
23279: PPOPN 1
23281: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23282: LD_EXP 38
23286: IFFALSE 23294
23288: PUSH
23289: LD_EXP 53
23293: AND
23294: IFFALSE 23314
23296: GO 23298
23298: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23299: LD_INT 1
23301: PPUSH
23302: LD_OWVAR 2
23306: PPUSH
23307: LD_INT 0
23309: PPUSH
23310: CALL_OW 324
23314: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23315: LD_EXP 38
23319: IFFALSE 23327
23321: PUSH
23322: LD_EXP 54
23326: AND
23327: IFFALSE 23410
23329: GO 23331
23331: DISABLE
23332: LD_INT 0
23334: PPUSH
23335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23336: LD_ADDR_VAR 0 2
23340: PUSH
23341: LD_INT 22
23343: PUSH
23344: LD_OWVAR 2
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 21
23355: PUSH
23356: LD_INT 3
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PPUSH
23367: CALL_OW 69
23371: ST_TO_ADDR
// if not tmp then
23372: LD_VAR 0 2
23376: NOT
23377: IFFALSE 23381
// exit ;
23379: GO 23410
// for i in tmp do
23381: LD_ADDR_VAR 0 1
23385: PUSH
23386: LD_VAR 0 2
23390: PUSH
23391: FOR_IN
23392: IFFALSE 23408
// SetBLevel ( i , 10 ) ;
23394: LD_VAR 0 1
23398: PPUSH
23399: LD_INT 10
23401: PPUSH
23402: CALL_OW 241
23406: GO 23391
23408: POP
23409: POP
// end ;
23410: PPOPN 2
23412: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23413: LD_EXP 38
23417: IFFALSE 23425
23419: PUSH
23420: LD_EXP 55
23424: AND
23425: IFFALSE 23536
23427: GO 23429
23429: DISABLE
23430: LD_INT 0
23432: PPUSH
23433: PPUSH
23434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23435: LD_ADDR_VAR 0 3
23439: PUSH
23440: LD_INT 22
23442: PUSH
23443: LD_OWVAR 2
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 25
23454: PUSH
23455: LD_INT 1
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PPUSH
23466: CALL_OW 69
23470: ST_TO_ADDR
// if not tmp then
23471: LD_VAR 0 3
23475: NOT
23476: IFFALSE 23480
// exit ;
23478: GO 23536
// un := tmp [ rand ( 1 , tmp ) ] ;
23480: LD_ADDR_VAR 0 2
23484: PUSH
23485: LD_VAR 0 3
23489: PUSH
23490: LD_INT 1
23492: PPUSH
23493: LD_VAR 0 3
23497: PPUSH
23498: CALL_OW 12
23502: ARRAY
23503: ST_TO_ADDR
// if Crawls ( un ) then
23504: LD_VAR 0 2
23508: PPUSH
23509: CALL_OW 318
23513: IFFALSE 23524
// ComWalk ( un ) ;
23515: LD_VAR 0 2
23519: PPUSH
23520: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23524: LD_VAR 0 2
23528: PPUSH
23529: LD_INT 5
23531: PPUSH
23532: CALL_OW 336
// end ;
23536: PPOPN 3
23538: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23539: LD_EXP 38
23543: IFFALSE 23551
23545: PUSH
23546: LD_EXP 56
23550: AND
23551: IFFALSE 23563
23553: PUSH
23554: LD_OWVAR 67
23558: PUSH
23559: LD_INT 4
23561: LESS
23562: AND
23563: IFFALSE 23582
23565: GO 23567
23567: DISABLE
// begin Difficulty := Difficulty + 1 ;
23568: LD_ADDR_OWVAR 67
23572: PUSH
23573: LD_OWVAR 67
23577: PUSH
23578: LD_INT 1
23580: PLUS
23581: ST_TO_ADDR
// end ;
23582: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23583: LD_EXP 38
23587: IFFALSE 23595
23589: PUSH
23590: LD_EXP 57
23594: AND
23595: IFFALSE 23698
23597: GO 23599
23599: DISABLE
23600: LD_INT 0
23602: PPUSH
// begin for i := 1 to 5 do
23603: LD_ADDR_VAR 0 1
23607: PUSH
23608: DOUBLE
23609: LD_INT 1
23611: DEC
23612: ST_TO_ADDR
23613: LD_INT 5
23615: PUSH
23616: FOR_TO
23617: IFFALSE 23696
// begin uc_nation := nation_nature ;
23619: LD_ADDR_OWVAR 21
23623: PUSH
23624: LD_INT 0
23626: ST_TO_ADDR
// uc_side := 0 ;
23627: LD_ADDR_OWVAR 20
23631: PUSH
23632: LD_INT 0
23634: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23635: LD_ADDR_OWVAR 29
23639: PUSH
23640: LD_INT 12
23642: PUSH
23643: LD_INT 12
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: ST_TO_ADDR
// hc_agressivity := 20 ;
23650: LD_ADDR_OWVAR 35
23654: PUSH
23655: LD_INT 20
23657: ST_TO_ADDR
// hc_class := class_tiger ;
23658: LD_ADDR_OWVAR 28
23662: PUSH
23663: LD_INT 14
23665: ST_TO_ADDR
// hc_gallery :=  ;
23666: LD_ADDR_OWVAR 33
23670: PUSH
23671: LD_STRING 
23673: ST_TO_ADDR
// hc_name :=  ;
23674: LD_ADDR_OWVAR 26
23678: PUSH
23679: LD_STRING 
23681: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23682: CALL_OW 44
23686: PPUSH
23687: LD_INT 0
23689: PPUSH
23690: CALL_OW 51
// end ;
23694: GO 23616
23696: POP
23697: POP
// end ;
23698: PPOPN 1
23700: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23701: LD_EXP 38
23705: IFFALSE 23713
23707: PUSH
23708: LD_EXP 58
23712: AND
23713: IFFALSE 23722
23715: GO 23717
23717: DISABLE
// StreamSibBomb ;
23718: CALL 23723 0 0
23722: END
// export function StreamSibBomb ; var i , x , y ; begin
23723: LD_INT 0
23725: PPUSH
23726: PPUSH
23727: PPUSH
23728: PPUSH
// result := false ;
23729: LD_ADDR_VAR 0 1
23733: PUSH
23734: LD_INT 0
23736: ST_TO_ADDR
// for i := 1 to 16 do
23737: LD_ADDR_VAR 0 2
23741: PUSH
23742: DOUBLE
23743: LD_INT 1
23745: DEC
23746: ST_TO_ADDR
23747: LD_INT 16
23749: PUSH
23750: FOR_TO
23751: IFFALSE 23950
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23753: LD_ADDR_VAR 0 3
23757: PUSH
23758: LD_INT 10
23760: PUSH
23761: LD_INT 20
23763: PUSH
23764: LD_INT 30
23766: PUSH
23767: LD_INT 40
23769: PUSH
23770: LD_INT 50
23772: PUSH
23773: LD_INT 60
23775: PUSH
23776: LD_INT 70
23778: PUSH
23779: LD_INT 80
23781: PUSH
23782: LD_INT 90
23784: PUSH
23785: LD_INT 100
23787: PUSH
23788: LD_INT 110
23790: PUSH
23791: LD_INT 120
23793: PUSH
23794: LD_INT 130
23796: PUSH
23797: LD_INT 140
23799: PUSH
23800: LD_INT 150
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 1
23822: PPUSH
23823: LD_INT 15
23825: PPUSH
23826: CALL_OW 12
23830: ARRAY
23831: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23832: LD_ADDR_VAR 0 4
23836: PUSH
23837: LD_INT 10
23839: PUSH
23840: LD_INT 20
23842: PUSH
23843: LD_INT 30
23845: PUSH
23846: LD_INT 40
23848: PUSH
23849: LD_INT 50
23851: PUSH
23852: LD_INT 60
23854: PUSH
23855: LD_INT 70
23857: PUSH
23858: LD_INT 80
23860: PUSH
23861: LD_INT 90
23863: PUSH
23864: LD_INT 100
23866: PUSH
23867: LD_INT 110
23869: PUSH
23870: LD_INT 120
23872: PUSH
23873: LD_INT 130
23875: PUSH
23876: LD_INT 140
23878: PUSH
23879: LD_INT 150
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 1
23901: PPUSH
23902: LD_INT 15
23904: PPUSH
23905: CALL_OW 12
23909: ARRAY
23910: ST_TO_ADDR
// if ValidHex ( x , y ) then
23911: LD_VAR 0 3
23915: PPUSH
23916: LD_VAR 0 4
23920: PPUSH
23921: CALL_OW 488
23925: IFFALSE 23948
// begin result := [ x , y ] ;
23927: LD_ADDR_VAR 0 1
23931: PUSH
23932: LD_VAR 0 3
23936: PUSH
23937: LD_VAR 0 4
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: ST_TO_ADDR
// break ;
23946: GO 23950
// end ; end ;
23948: GO 23750
23950: POP
23951: POP
// if result then
23952: LD_VAR 0 1
23956: IFFALSE 24016
// begin ToLua ( playSibBomb() ) ;
23958: LD_STRING playSibBomb()
23960: PPUSH
23961: CALL_OW 559
// wait ( 0 0$14 ) ;
23965: LD_INT 490
23967: PPUSH
23968: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23972: LD_VAR 0 1
23976: PUSH
23977: LD_INT 1
23979: ARRAY
23980: PPUSH
23981: LD_VAR 0 1
23985: PUSH
23986: LD_INT 2
23988: ARRAY
23989: PPUSH
23990: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23994: LD_VAR 0 1
23998: PUSH
23999: LD_INT 1
24001: ARRAY
24002: PPUSH
24003: LD_VAR 0 1
24007: PUSH
24008: LD_INT 2
24010: ARRAY
24011: PPUSH
24012: CALL_OW 429
// end ; end ;
24016: LD_VAR 0 1
24020: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24021: LD_EXP 38
24025: IFFALSE 24033
24027: PUSH
24028: LD_EXP 60
24032: AND
24033: IFFALSE 24045
24035: GO 24037
24037: DISABLE
// YouLost (  ) ;
24038: LD_STRING 
24040: PPUSH
24041: CALL_OW 104
24045: END
// every 0 0$1 trigger StreamModeActive and sFog do
24046: LD_EXP 38
24050: IFFALSE 24058
24052: PUSH
24053: LD_EXP 59
24057: AND
24058: IFFALSE 24072
24060: GO 24062
24062: DISABLE
// FogOff ( your_side ) ;
24063: LD_OWVAR 2
24067: PPUSH
24068: CALL_OW 344
24072: END
// every 0 0$1 trigger StreamModeActive and sSun do
24073: LD_EXP 38
24077: IFFALSE 24085
24079: PUSH
24080: LD_EXP 61
24084: AND
24085: IFFALSE 24113
24087: GO 24089
24089: DISABLE
// begin solar_recharge_percent := 0 ;
24090: LD_ADDR_OWVAR 79
24094: PUSH
24095: LD_INT 0
24097: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24098: LD_INT 10500
24100: PPUSH
24101: CALL_OW 67
// solar_recharge_percent := 100 ;
24105: LD_ADDR_OWVAR 79
24109: PUSH
24110: LD_INT 100
24112: ST_TO_ADDR
// end ;
24113: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24114: LD_EXP 38
24118: IFFALSE 24126
24120: PUSH
24121: LD_EXP 62
24125: AND
24126: IFFALSE 24365
24128: GO 24130
24130: DISABLE
24131: LD_INT 0
24133: PPUSH
24134: PPUSH
24135: PPUSH
// begin tmp := [ ] ;
24136: LD_ADDR_VAR 0 3
24140: PUSH
24141: EMPTY
24142: ST_TO_ADDR
// for i := 1 to 6 do
24143: LD_ADDR_VAR 0 1
24147: PUSH
24148: DOUBLE
24149: LD_INT 1
24151: DEC
24152: ST_TO_ADDR
24153: LD_INT 6
24155: PUSH
24156: FOR_TO
24157: IFFALSE 24262
// begin uc_nation := nation_nature ;
24159: LD_ADDR_OWVAR 21
24163: PUSH
24164: LD_INT 0
24166: ST_TO_ADDR
// uc_side := 0 ;
24167: LD_ADDR_OWVAR 20
24171: PUSH
24172: LD_INT 0
24174: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24175: LD_ADDR_OWVAR 29
24179: PUSH
24180: LD_INT 12
24182: PUSH
24183: LD_INT 12
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: ST_TO_ADDR
// hc_agressivity := 20 ;
24190: LD_ADDR_OWVAR 35
24194: PUSH
24195: LD_INT 20
24197: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24198: LD_ADDR_OWVAR 28
24202: PUSH
24203: LD_INT 17
24205: ST_TO_ADDR
// hc_gallery :=  ;
24206: LD_ADDR_OWVAR 33
24210: PUSH
24211: LD_STRING 
24213: ST_TO_ADDR
// hc_name :=  ;
24214: LD_ADDR_OWVAR 26
24218: PUSH
24219: LD_STRING 
24221: ST_TO_ADDR
// un := CreateHuman ;
24222: LD_ADDR_VAR 0 2
24226: PUSH
24227: CALL_OW 44
24231: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24232: LD_VAR 0 2
24236: PPUSH
24237: LD_INT 1
24239: PPUSH
24240: CALL_OW 51
// tmp := tmp ^ un ;
24244: LD_ADDR_VAR 0 3
24248: PUSH
24249: LD_VAR 0 3
24253: PUSH
24254: LD_VAR 0 2
24258: ADD
24259: ST_TO_ADDR
// end ;
24260: GO 24156
24262: POP
24263: POP
// repeat wait ( 0 0$1 ) ;
24264: LD_INT 35
24266: PPUSH
24267: CALL_OW 67
// for un in tmp do
24271: LD_ADDR_VAR 0 2
24275: PUSH
24276: LD_VAR 0 3
24280: PUSH
24281: FOR_IN
24282: IFFALSE 24356
// begin if IsDead ( un ) then
24284: LD_VAR 0 2
24288: PPUSH
24289: CALL_OW 301
24293: IFFALSE 24313
// begin tmp := tmp diff un ;
24295: LD_ADDR_VAR 0 3
24299: PUSH
24300: LD_VAR 0 3
24304: PUSH
24305: LD_VAR 0 2
24309: DIFF
24310: ST_TO_ADDR
// continue ;
24311: GO 24281
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24313: LD_VAR 0 2
24317: PPUSH
24318: LD_INT 3
24320: PUSH
24321: LD_INT 22
24323: PUSH
24324: LD_INT 0
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PPUSH
24335: CALL_OW 69
24339: PPUSH
24340: LD_VAR 0 2
24344: PPUSH
24345: CALL_OW 74
24349: PPUSH
24350: CALL_OW 115
// end ;
24354: GO 24281
24356: POP
24357: POP
// until not tmp ;
24358: LD_VAR 0 3
24362: NOT
24363: IFFALSE 24264
// end ;
24365: PPOPN 3
24367: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24368: LD_EXP 38
24372: IFFALSE 24380
24374: PUSH
24375: LD_EXP 63
24379: AND
24380: IFFALSE 24434
24382: GO 24384
24384: DISABLE
// begin ToLua ( displayTroll(); ) ;
24385: LD_STRING displayTroll();
24387: PPUSH
24388: CALL_OW 559
// wait ( 3 3$00 ) ;
24392: LD_INT 6300
24394: PPUSH
24395: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24399: LD_STRING hideTroll();
24401: PPUSH
24402: CALL_OW 559
// wait ( 1 1$00 ) ;
24406: LD_INT 2100
24408: PPUSH
24409: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24413: LD_STRING displayTroll();
24415: PPUSH
24416: CALL_OW 559
// wait ( 1 1$00 ) ;
24420: LD_INT 2100
24422: PPUSH
24423: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24427: LD_STRING hideTroll();
24429: PPUSH
24430: CALL_OW 559
// end ;
24434: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24435: LD_EXP 38
24439: IFFALSE 24447
24441: PUSH
24442: LD_EXP 64
24446: AND
24447: IFFALSE 24510
24449: GO 24451
24451: DISABLE
24452: LD_INT 0
24454: PPUSH
// begin p := 0 ;
24455: LD_ADDR_VAR 0 1
24459: PUSH
24460: LD_INT 0
24462: ST_TO_ADDR
// repeat game_speed := 1 ;
24463: LD_ADDR_OWVAR 65
24467: PUSH
24468: LD_INT 1
24470: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24471: LD_INT 35
24473: PPUSH
24474: CALL_OW 67
// p := p + 1 ;
24478: LD_ADDR_VAR 0 1
24482: PUSH
24483: LD_VAR 0 1
24487: PUSH
24488: LD_INT 1
24490: PLUS
24491: ST_TO_ADDR
// until p >= 60 ;
24492: LD_VAR 0 1
24496: PUSH
24497: LD_INT 60
24499: GREATEREQUAL
24500: IFFALSE 24463
// game_speed := 4 ;
24502: LD_ADDR_OWVAR 65
24506: PUSH
24507: LD_INT 4
24509: ST_TO_ADDR
// end ;
24510: PPOPN 1
24512: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24513: LD_EXP 38
24517: IFFALSE 24525
24519: PUSH
24520: LD_EXP 65
24524: AND
24525: IFFALSE 24671
24527: GO 24529
24529: DISABLE
24530: LD_INT 0
24532: PPUSH
24533: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24534: LD_ADDR_VAR 0 1
24538: PUSH
24539: LD_INT 22
24541: PUSH
24542: LD_OWVAR 2
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 2
24553: PUSH
24554: LD_INT 30
24556: PUSH
24557: LD_INT 0
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 30
24566: PUSH
24567: LD_INT 1
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: LIST
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PPUSH
24583: CALL_OW 69
24587: ST_TO_ADDR
// if not depot then
24588: LD_VAR 0 1
24592: NOT
24593: IFFALSE 24597
// exit ;
24595: GO 24671
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24597: LD_ADDR_VAR 0 2
24601: PUSH
24602: LD_VAR 0 1
24606: PUSH
24607: LD_INT 1
24609: PPUSH
24610: LD_VAR 0 1
24614: PPUSH
24615: CALL_OW 12
24619: ARRAY
24620: PPUSH
24621: CALL_OW 274
24625: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24626: LD_VAR 0 2
24630: PPUSH
24631: LD_INT 1
24633: PPUSH
24634: LD_INT 0
24636: PPUSH
24637: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24641: LD_VAR 0 2
24645: PPUSH
24646: LD_INT 2
24648: PPUSH
24649: LD_INT 0
24651: PPUSH
24652: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24656: LD_VAR 0 2
24660: PPUSH
24661: LD_INT 3
24663: PPUSH
24664: LD_INT 0
24666: PPUSH
24667: CALL_OW 277
// end ;
24671: PPOPN 2
24673: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24674: LD_EXP 38
24678: IFFALSE 24686
24680: PUSH
24681: LD_EXP 66
24685: AND
24686: IFFALSE 24783
24688: GO 24690
24690: DISABLE
24691: LD_INT 0
24693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24694: LD_ADDR_VAR 0 1
24698: PUSH
24699: LD_INT 22
24701: PUSH
24702: LD_OWVAR 2
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 21
24713: PUSH
24714: LD_INT 1
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 3
24723: PUSH
24724: LD_INT 23
24726: PUSH
24727: LD_INT 0
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: LIST
24742: PPUSH
24743: CALL_OW 69
24747: ST_TO_ADDR
// if not tmp then
24748: LD_VAR 0 1
24752: NOT
24753: IFFALSE 24757
// exit ;
24755: GO 24783
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24757: LD_VAR 0 1
24761: PUSH
24762: LD_INT 1
24764: PPUSH
24765: LD_VAR 0 1
24769: PPUSH
24770: CALL_OW 12
24774: ARRAY
24775: PPUSH
24776: LD_INT 200
24778: PPUSH
24779: CALL_OW 234
// end ;
24783: PPOPN 1
24785: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24786: LD_EXP 38
24790: IFFALSE 24798
24792: PUSH
24793: LD_EXP 67
24797: AND
24798: IFFALSE 24877
24800: GO 24802
24802: DISABLE
24803: LD_INT 0
24805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24806: LD_ADDR_VAR 0 1
24810: PUSH
24811: LD_INT 22
24813: PUSH
24814: LD_OWVAR 2
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 21
24825: PUSH
24826: LD_INT 2
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PPUSH
24837: CALL_OW 69
24841: ST_TO_ADDR
// if not tmp then
24842: LD_VAR 0 1
24846: NOT
24847: IFFALSE 24851
// exit ;
24849: GO 24877
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24851: LD_VAR 0 1
24855: PUSH
24856: LD_INT 1
24858: PPUSH
24859: LD_VAR 0 1
24863: PPUSH
24864: CALL_OW 12
24868: ARRAY
24869: PPUSH
24870: LD_INT 60
24872: PPUSH
24873: CALL_OW 234
// end ;
24877: PPOPN 1
24879: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24880: LD_EXP 38
24884: IFFALSE 24892
24886: PUSH
24887: LD_EXP 68
24891: AND
24892: IFFALSE 24991
24894: GO 24896
24896: DISABLE
24897: LD_INT 0
24899: PPUSH
24900: PPUSH
// begin enable ;
24901: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24902: LD_ADDR_VAR 0 1
24906: PUSH
24907: LD_INT 22
24909: PUSH
24910: LD_OWVAR 2
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 61
24921: PUSH
24922: EMPTY
24923: LIST
24924: PUSH
24925: LD_INT 33
24927: PUSH
24928: LD_INT 2
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: LIST
24939: PPUSH
24940: CALL_OW 69
24944: ST_TO_ADDR
// if not tmp then
24945: LD_VAR 0 1
24949: NOT
24950: IFFALSE 24954
// exit ;
24952: GO 24991
// for i in tmp do
24954: LD_ADDR_VAR 0 2
24958: PUSH
24959: LD_VAR 0 1
24963: PUSH
24964: FOR_IN
24965: IFFALSE 24989
// if IsControledBy ( i ) then
24967: LD_VAR 0 2
24971: PPUSH
24972: CALL_OW 312
24976: IFFALSE 24987
// ComUnlink ( i ) ;
24978: LD_VAR 0 2
24982: PPUSH
24983: CALL_OW 136
24987: GO 24964
24989: POP
24990: POP
// end ;
24991: PPOPN 2
24993: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24994: LD_EXP 38
24998: IFFALSE 25006
25000: PUSH
25001: LD_EXP 69
25005: AND
25006: IFFALSE 25146
25008: GO 25010
25010: DISABLE
25011: LD_INT 0
25013: PPUSH
25014: PPUSH
// begin ToLua ( displayPowell(); ) ;
25015: LD_STRING displayPowell();
25017: PPUSH
25018: CALL_OW 559
// uc_side := 0 ;
25022: LD_ADDR_OWVAR 20
25026: PUSH
25027: LD_INT 0
25029: ST_TO_ADDR
// uc_nation := 2 ;
25030: LD_ADDR_OWVAR 21
25034: PUSH
25035: LD_INT 2
25037: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25038: LD_ADDR_OWVAR 37
25042: PUSH
25043: LD_INT 14
25045: ST_TO_ADDR
// vc_engine := engine_siberite ;
25046: LD_ADDR_OWVAR 39
25050: PUSH
25051: LD_INT 3
25053: ST_TO_ADDR
// vc_control := control_apeman ;
25054: LD_ADDR_OWVAR 38
25058: PUSH
25059: LD_INT 5
25061: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25062: LD_ADDR_OWVAR 40
25066: PUSH
25067: LD_INT 29
25069: ST_TO_ADDR
// un := CreateVehicle ;
25070: LD_ADDR_VAR 0 2
25074: PUSH
25075: CALL_OW 45
25079: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25080: LD_VAR 0 2
25084: PPUSH
25085: LD_INT 1
25087: PPUSH
25088: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25092: LD_INT 35
25094: PPUSH
25095: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25099: LD_VAR 0 2
25103: PPUSH
25104: LD_INT 22
25106: PUSH
25107: LD_OWVAR 2
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PPUSH
25116: CALL_OW 69
25120: PPUSH
25121: LD_VAR 0 2
25125: PPUSH
25126: CALL_OW 74
25130: PPUSH
25131: CALL_OW 115
// until IsDead ( un ) ;
25135: LD_VAR 0 2
25139: PPUSH
25140: CALL_OW 301
25144: IFFALSE 25092
// end ;
25146: PPOPN 2
25148: END
// every 0 0$1 trigger StreamModeActive and sStu do
25149: LD_EXP 38
25153: IFFALSE 25161
25155: PUSH
25156: LD_EXP 77
25160: AND
25161: IFFALSE 25177
25163: GO 25165
25165: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25166: LD_STRING displayStucuk();
25168: PPUSH
25169: CALL_OW 559
// ResetFog ;
25173: CALL_OW 335
// end ;
25177: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25178: LD_EXP 38
25182: IFFALSE 25190
25184: PUSH
25185: LD_EXP 70
25189: AND
25190: IFFALSE 25331
25192: GO 25194
25194: DISABLE
25195: LD_INT 0
25197: PPUSH
25198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25199: LD_ADDR_VAR 0 2
25203: PUSH
25204: LD_INT 22
25206: PUSH
25207: LD_OWVAR 2
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 21
25218: PUSH
25219: LD_INT 1
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PPUSH
25230: CALL_OW 69
25234: ST_TO_ADDR
// if not tmp then
25235: LD_VAR 0 2
25239: NOT
25240: IFFALSE 25244
// exit ;
25242: GO 25331
// un := tmp [ rand ( 1 , tmp ) ] ;
25244: LD_ADDR_VAR 0 1
25248: PUSH
25249: LD_VAR 0 2
25253: PUSH
25254: LD_INT 1
25256: PPUSH
25257: LD_VAR 0 2
25261: PPUSH
25262: CALL_OW 12
25266: ARRAY
25267: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25268: LD_VAR 0 1
25272: PPUSH
25273: LD_INT 0
25275: PPUSH
25276: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25280: LD_VAR 0 1
25284: PPUSH
25285: LD_OWVAR 3
25289: PUSH
25290: LD_VAR 0 1
25294: DIFF
25295: PPUSH
25296: LD_VAR 0 1
25300: PPUSH
25301: CALL_OW 74
25305: PPUSH
25306: CALL_OW 115
// wait ( 0 0$20 ) ;
25310: LD_INT 700
25312: PPUSH
25313: CALL_OW 67
// SetSide ( un , your_side ) ;
25317: LD_VAR 0 1
25321: PPUSH
25322: LD_OWVAR 2
25326: PPUSH
25327: CALL_OW 235
// end ;
25331: PPOPN 2
25333: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25334: LD_EXP 38
25338: IFFALSE 25346
25340: PUSH
25341: LD_EXP 71
25345: AND
25346: IFFALSE 25452
25348: GO 25350
25350: DISABLE
25351: LD_INT 0
25353: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25354: LD_ADDR_VAR 0 1
25358: PUSH
25359: LD_INT 22
25361: PUSH
25362: LD_OWVAR 2
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 2
25373: PUSH
25374: LD_INT 30
25376: PUSH
25377: LD_INT 0
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 30
25386: PUSH
25387: LD_INT 1
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: LIST
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PPUSH
25403: CALL_OW 69
25407: ST_TO_ADDR
// if not depot then
25408: LD_VAR 0 1
25412: NOT
25413: IFFALSE 25417
// exit ;
25415: GO 25452
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25417: LD_VAR 0 1
25421: PUSH
25422: LD_INT 1
25424: ARRAY
25425: PPUSH
25426: CALL_OW 250
25430: PPUSH
25431: LD_VAR 0 1
25435: PUSH
25436: LD_INT 1
25438: ARRAY
25439: PPUSH
25440: CALL_OW 251
25444: PPUSH
25445: LD_INT 70
25447: PPUSH
25448: CALL_OW 495
// end ;
25452: PPOPN 1
25454: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25455: LD_EXP 38
25459: IFFALSE 25467
25461: PUSH
25462: LD_EXP 72
25466: AND
25467: IFFALSE 25678
25469: GO 25471
25471: DISABLE
25472: LD_INT 0
25474: PPUSH
25475: PPUSH
25476: PPUSH
25477: PPUSH
25478: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25479: LD_ADDR_VAR 0 5
25483: PUSH
25484: LD_INT 22
25486: PUSH
25487: LD_OWVAR 2
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 21
25498: PUSH
25499: LD_INT 1
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PPUSH
25510: CALL_OW 69
25514: ST_TO_ADDR
// if not tmp then
25515: LD_VAR 0 5
25519: NOT
25520: IFFALSE 25524
// exit ;
25522: GO 25678
// for i in tmp do
25524: LD_ADDR_VAR 0 1
25528: PUSH
25529: LD_VAR 0 5
25533: PUSH
25534: FOR_IN
25535: IFFALSE 25676
// begin d := rand ( 0 , 5 ) ;
25537: LD_ADDR_VAR 0 4
25541: PUSH
25542: LD_INT 0
25544: PPUSH
25545: LD_INT 5
25547: PPUSH
25548: CALL_OW 12
25552: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25553: LD_ADDR_VAR 0 2
25557: PUSH
25558: LD_VAR 0 1
25562: PPUSH
25563: CALL_OW 250
25567: PPUSH
25568: LD_VAR 0 4
25572: PPUSH
25573: LD_INT 3
25575: PPUSH
25576: LD_INT 12
25578: PPUSH
25579: CALL_OW 12
25583: PPUSH
25584: CALL_OW 272
25588: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25589: LD_ADDR_VAR 0 3
25593: PUSH
25594: LD_VAR 0 1
25598: PPUSH
25599: CALL_OW 251
25603: PPUSH
25604: LD_VAR 0 4
25608: PPUSH
25609: LD_INT 3
25611: PPUSH
25612: LD_INT 12
25614: PPUSH
25615: CALL_OW 12
25619: PPUSH
25620: CALL_OW 273
25624: ST_TO_ADDR
// if ValidHex ( x , y ) then
25625: LD_VAR 0 2
25629: PPUSH
25630: LD_VAR 0 3
25634: PPUSH
25635: CALL_OW 488
25639: IFFALSE 25674
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25641: LD_VAR 0 1
25645: PPUSH
25646: LD_VAR 0 2
25650: PPUSH
25651: LD_VAR 0 3
25655: PPUSH
25656: LD_INT 3
25658: PPUSH
25659: LD_INT 6
25661: PPUSH
25662: CALL_OW 12
25666: PPUSH
25667: LD_INT 1
25669: PPUSH
25670: CALL_OW 483
// end ;
25674: GO 25534
25676: POP
25677: POP
// end ;
25678: PPOPN 5
25680: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25681: LD_EXP 38
25685: IFFALSE 25693
25687: PUSH
25688: LD_EXP 73
25692: AND
25693: IFFALSE 25787
25695: GO 25697
25697: DISABLE
25698: LD_INT 0
25700: PPUSH
25701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25702: LD_ADDR_VAR 0 2
25706: PUSH
25707: LD_INT 22
25709: PUSH
25710: LD_OWVAR 2
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 32
25721: PUSH
25722: LD_INT 1
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 21
25731: PUSH
25732: LD_INT 2
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: LIST
25743: PPUSH
25744: CALL_OW 69
25748: ST_TO_ADDR
// if not tmp then
25749: LD_VAR 0 2
25753: NOT
25754: IFFALSE 25758
// exit ;
25756: GO 25787
// for i in tmp do
25758: LD_ADDR_VAR 0 1
25762: PUSH
25763: LD_VAR 0 2
25767: PUSH
25768: FOR_IN
25769: IFFALSE 25785
// SetFuel ( i , 0 ) ;
25771: LD_VAR 0 1
25775: PPUSH
25776: LD_INT 0
25778: PPUSH
25779: CALL_OW 240
25783: GO 25768
25785: POP
25786: POP
// end ;
25787: PPOPN 2
25789: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25790: LD_EXP 38
25794: IFFALSE 25802
25796: PUSH
25797: LD_EXP 74
25801: AND
25802: IFFALSE 25868
25804: GO 25806
25806: DISABLE
25807: LD_INT 0
25809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25810: LD_ADDR_VAR 0 1
25814: PUSH
25815: LD_INT 22
25817: PUSH
25818: LD_OWVAR 2
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 30
25829: PUSH
25830: LD_INT 29
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PPUSH
25841: CALL_OW 69
25845: ST_TO_ADDR
// if not tmp then
25846: LD_VAR 0 1
25850: NOT
25851: IFFALSE 25855
// exit ;
25853: GO 25868
// DestroyUnit ( tmp [ 1 ] ) ;
25855: LD_VAR 0 1
25859: PUSH
25860: LD_INT 1
25862: ARRAY
25863: PPUSH
25864: CALL_OW 65
// end ;
25868: PPOPN 1
25870: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25871: LD_EXP 38
25875: IFFALSE 25883
25877: PUSH
25878: LD_EXP 76
25882: AND
25883: IFFALSE 26012
25885: GO 25887
25887: DISABLE
25888: LD_INT 0
25890: PPUSH
// begin uc_side := 0 ;
25891: LD_ADDR_OWVAR 20
25895: PUSH
25896: LD_INT 0
25898: ST_TO_ADDR
// uc_nation := nation_arabian ;
25899: LD_ADDR_OWVAR 21
25903: PUSH
25904: LD_INT 2
25906: ST_TO_ADDR
// hc_gallery :=  ;
25907: LD_ADDR_OWVAR 33
25911: PUSH
25912: LD_STRING 
25914: ST_TO_ADDR
// hc_name :=  ;
25915: LD_ADDR_OWVAR 26
25919: PUSH
25920: LD_STRING 
25922: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25923: LD_INT 1
25925: PPUSH
25926: LD_INT 11
25928: PPUSH
25929: LD_INT 10
25931: PPUSH
25932: CALL_OW 380
// un := CreateHuman ;
25936: LD_ADDR_VAR 0 1
25940: PUSH
25941: CALL_OW 44
25945: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25946: LD_VAR 0 1
25950: PPUSH
25951: LD_INT 1
25953: PPUSH
25954: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25958: LD_INT 35
25960: PPUSH
25961: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25965: LD_VAR 0 1
25969: PPUSH
25970: LD_INT 22
25972: PUSH
25973: LD_OWVAR 2
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PPUSH
25982: CALL_OW 69
25986: PPUSH
25987: LD_VAR 0 1
25991: PPUSH
25992: CALL_OW 74
25996: PPUSH
25997: CALL_OW 115
// until IsDead ( un ) ;
26001: LD_VAR 0 1
26005: PPUSH
26006: CALL_OW 301
26010: IFFALSE 25958
// end ;
26012: PPOPN 1
26014: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26015: LD_EXP 38
26019: IFFALSE 26027
26021: PUSH
26022: LD_EXP 78
26026: AND
26027: IFFALSE 26039
26029: GO 26031
26031: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26032: LD_STRING earthquake(getX(game), 0, 32)
26034: PPUSH
26035: CALL_OW 559
26039: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26040: LD_EXP 38
26044: IFFALSE 26052
26046: PUSH
26047: LD_EXP 79
26051: AND
26052: IFFALSE 26143
26054: GO 26056
26056: DISABLE
26057: LD_INT 0
26059: PPUSH
// begin enable ;
26060: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26061: LD_ADDR_VAR 0 1
26065: PUSH
26066: LD_INT 22
26068: PUSH
26069: LD_OWVAR 2
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 21
26080: PUSH
26081: LD_INT 2
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 33
26090: PUSH
26091: LD_INT 3
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: LIST
26102: PPUSH
26103: CALL_OW 69
26107: ST_TO_ADDR
// if not tmp then
26108: LD_VAR 0 1
26112: NOT
26113: IFFALSE 26117
// exit ;
26115: GO 26143
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26117: LD_VAR 0 1
26121: PUSH
26122: LD_INT 1
26124: PPUSH
26125: LD_VAR 0 1
26129: PPUSH
26130: CALL_OW 12
26134: ARRAY
26135: PPUSH
26136: LD_INT 1
26138: PPUSH
26139: CALL_OW 234
// end ;
26143: PPOPN 1
26145: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26146: LD_EXP 38
26150: IFFALSE 26158
26152: PUSH
26153: LD_EXP 80
26157: AND
26158: IFFALSE 26299
26160: GO 26162
26162: DISABLE
26163: LD_INT 0
26165: PPUSH
26166: PPUSH
26167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26168: LD_ADDR_VAR 0 3
26172: PUSH
26173: LD_INT 22
26175: PUSH
26176: LD_OWVAR 2
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 25
26187: PUSH
26188: LD_INT 1
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PPUSH
26199: CALL_OW 69
26203: ST_TO_ADDR
// if not tmp then
26204: LD_VAR 0 3
26208: NOT
26209: IFFALSE 26213
// exit ;
26211: GO 26299
// un := tmp [ rand ( 1 , tmp ) ] ;
26213: LD_ADDR_VAR 0 2
26217: PUSH
26218: LD_VAR 0 3
26222: PUSH
26223: LD_INT 1
26225: PPUSH
26226: LD_VAR 0 3
26230: PPUSH
26231: CALL_OW 12
26235: ARRAY
26236: ST_TO_ADDR
// if Crawls ( un ) then
26237: LD_VAR 0 2
26241: PPUSH
26242: CALL_OW 318
26246: IFFALSE 26257
// ComWalk ( un ) ;
26248: LD_VAR 0 2
26252: PPUSH
26253: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26257: LD_VAR 0 2
26261: PPUSH
26262: LD_INT 9
26264: PPUSH
26265: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26269: LD_INT 28
26271: PPUSH
26272: LD_OWVAR 2
26276: PPUSH
26277: LD_INT 2
26279: PPUSH
26280: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26284: LD_INT 29
26286: PPUSH
26287: LD_OWVAR 2
26291: PPUSH
26292: LD_INT 2
26294: PPUSH
26295: CALL_OW 322
// end ;
26299: PPOPN 3
26301: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26302: LD_EXP 38
26306: IFFALSE 26314
26308: PUSH
26309: LD_EXP 81
26313: AND
26314: IFFALSE 26425
26316: GO 26318
26318: DISABLE
26319: LD_INT 0
26321: PPUSH
26322: PPUSH
26323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26324: LD_ADDR_VAR 0 3
26328: PUSH
26329: LD_INT 22
26331: PUSH
26332: LD_OWVAR 2
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 25
26343: PUSH
26344: LD_INT 1
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PPUSH
26355: CALL_OW 69
26359: ST_TO_ADDR
// if not tmp then
26360: LD_VAR 0 3
26364: NOT
26365: IFFALSE 26369
// exit ;
26367: GO 26425
// un := tmp [ rand ( 1 , tmp ) ] ;
26369: LD_ADDR_VAR 0 2
26373: PUSH
26374: LD_VAR 0 3
26378: PUSH
26379: LD_INT 1
26381: PPUSH
26382: LD_VAR 0 3
26386: PPUSH
26387: CALL_OW 12
26391: ARRAY
26392: ST_TO_ADDR
// if Crawls ( un ) then
26393: LD_VAR 0 2
26397: PPUSH
26398: CALL_OW 318
26402: IFFALSE 26413
// ComWalk ( un ) ;
26404: LD_VAR 0 2
26408: PPUSH
26409: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26413: LD_VAR 0 2
26417: PPUSH
26418: LD_INT 8
26420: PPUSH
26421: CALL_OW 336
// end ;
26425: PPOPN 3
26427: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26428: LD_EXP 38
26432: IFFALSE 26440
26434: PUSH
26435: LD_EXP 82
26439: AND
26440: IFFALSE 26584
26442: GO 26444
26444: DISABLE
26445: LD_INT 0
26447: PPUSH
26448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26449: LD_ADDR_VAR 0 2
26453: PUSH
26454: LD_INT 22
26456: PUSH
26457: LD_OWVAR 2
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 21
26468: PUSH
26469: LD_INT 2
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 2
26478: PUSH
26479: LD_INT 34
26481: PUSH
26482: LD_INT 12
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 34
26491: PUSH
26492: LD_INT 51
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 34
26501: PUSH
26502: LD_INT 32
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: LIST
26519: PPUSH
26520: CALL_OW 69
26524: ST_TO_ADDR
// if not tmp then
26525: LD_VAR 0 2
26529: NOT
26530: IFFALSE 26534
// exit ;
26532: GO 26584
// for i in tmp do
26534: LD_ADDR_VAR 0 1
26538: PUSH
26539: LD_VAR 0 2
26543: PUSH
26544: FOR_IN
26545: IFFALSE 26582
// if GetCargo ( i , mat_artifact ) = 0 then
26547: LD_VAR 0 1
26551: PPUSH
26552: LD_INT 4
26554: PPUSH
26555: CALL_OW 289
26559: PUSH
26560: LD_INT 0
26562: EQUAL
26563: IFFALSE 26580
// SetCargo ( i , mat_siberit , 100 ) ;
26565: LD_VAR 0 1
26569: PPUSH
26570: LD_INT 3
26572: PPUSH
26573: LD_INT 100
26575: PPUSH
26576: CALL_OW 290
26580: GO 26544
26582: POP
26583: POP
// end ;
26584: PPOPN 2
26586: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26587: LD_EXP 38
26591: IFFALSE 26599
26593: PUSH
26594: LD_EXP 83
26598: AND
26599: IFFALSE 26782
26601: GO 26603
26603: DISABLE
26604: LD_INT 0
26606: PPUSH
26607: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26608: LD_ADDR_VAR 0 2
26612: PUSH
26613: LD_INT 22
26615: PUSH
26616: LD_OWVAR 2
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PPUSH
26625: CALL_OW 69
26629: ST_TO_ADDR
// if not tmp then
26630: LD_VAR 0 2
26634: NOT
26635: IFFALSE 26639
// exit ;
26637: GO 26782
// for i := 1 to 2 do
26639: LD_ADDR_VAR 0 1
26643: PUSH
26644: DOUBLE
26645: LD_INT 1
26647: DEC
26648: ST_TO_ADDR
26649: LD_INT 2
26651: PUSH
26652: FOR_TO
26653: IFFALSE 26780
// begin uc_side := your_side ;
26655: LD_ADDR_OWVAR 20
26659: PUSH
26660: LD_OWVAR 2
26664: ST_TO_ADDR
// uc_nation := nation_american ;
26665: LD_ADDR_OWVAR 21
26669: PUSH
26670: LD_INT 1
26672: ST_TO_ADDR
// vc_chassis := us_morphling ;
26673: LD_ADDR_OWVAR 37
26677: PUSH
26678: LD_INT 5
26680: ST_TO_ADDR
// vc_engine := engine_siberite ;
26681: LD_ADDR_OWVAR 39
26685: PUSH
26686: LD_INT 3
26688: ST_TO_ADDR
// vc_control := control_computer ;
26689: LD_ADDR_OWVAR 38
26693: PUSH
26694: LD_INT 3
26696: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26697: LD_ADDR_OWVAR 40
26701: PUSH
26702: LD_INT 10
26704: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26705: LD_VAR 0 2
26709: PUSH
26710: LD_INT 1
26712: ARRAY
26713: PPUSH
26714: CALL_OW 310
26718: NOT
26719: IFFALSE 26766
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26721: CALL_OW 45
26725: PPUSH
26726: LD_VAR 0 2
26730: PUSH
26731: LD_INT 1
26733: ARRAY
26734: PPUSH
26735: CALL_OW 250
26739: PPUSH
26740: LD_VAR 0 2
26744: PUSH
26745: LD_INT 1
26747: ARRAY
26748: PPUSH
26749: CALL_OW 251
26753: PPUSH
26754: LD_INT 12
26756: PPUSH
26757: LD_INT 1
26759: PPUSH
26760: CALL_OW 50
26764: GO 26778
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26766: CALL_OW 45
26770: PPUSH
26771: LD_INT 1
26773: PPUSH
26774: CALL_OW 51
// end ;
26778: GO 26652
26780: POP
26781: POP
// end ;
26782: PPOPN 2
26784: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26785: LD_EXP 38
26789: IFFALSE 26797
26791: PUSH
26792: LD_EXP 84
26796: AND
26797: IFFALSE 27019
26799: GO 26801
26801: DISABLE
26802: LD_INT 0
26804: PPUSH
26805: PPUSH
26806: PPUSH
26807: PPUSH
26808: PPUSH
26809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26810: LD_ADDR_VAR 0 6
26814: PUSH
26815: LD_INT 22
26817: PUSH
26818: LD_OWVAR 2
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: LD_INT 21
26829: PUSH
26830: LD_INT 1
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 3
26839: PUSH
26840: LD_INT 23
26842: PUSH
26843: LD_INT 0
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: LIST
26858: PPUSH
26859: CALL_OW 69
26863: ST_TO_ADDR
// if not tmp then
26864: LD_VAR 0 6
26868: NOT
26869: IFFALSE 26873
// exit ;
26871: GO 27019
// s1 := rand ( 1 , 4 ) ;
26873: LD_ADDR_VAR 0 2
26877: PUSH
26878: LD_INT 1
26880: PPUSH
26881: LD_INT 4
26883: PPUSH
26884: CALL_OW 12
26888: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26889: LD_ADDR_VAR 0 4
26893: PUSH
26894: LD_VAR 0 6
26898: PUSH
26899: LD_INT 1
26901: ARRAY
26902: PPUSH
26903: LD_VAR 0 2
26907: PPUSH
26908: CALL_OW 259
26912: ST_TO_ADDR
// if s1 = 1 then
26913: LD_VAR 0 2
26917: PUSH
26918: LD_INT 1
26920: EQUAL
26921: IFFALSE 26941
// s2 := rand ( 2 , 4 ) else
26923: LD_ADDR_VAR 0 3
26927: PUSH
26928: LD_INT 2
26930: PPUSH
26931: LD_INT 4
26933: PPUSH
26934: CALL_OW 12
26938: ST_TO_ADDR
26939: GO 26949
// s2 := 1 ;
26941: LD_ADDR_VAR 0 3
26945: PUSH
26946: LD_INT 1
26948: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26949: LD_ADDR_VAR 0 5
26953: PUSH
26954: LD_VAR 0 6
26958: PUSH
26959: LD_INT 1
26961: ARRAY
26962: PPUSH
26963: LD_VAR 0 3
26967: PPUSH
26968: CALL_OW 259
26972: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26973: LD_VAR 0 6
26977: PUSH
26978: LD_INT 1
26980: ARRAY
26981: PPUSH
26982: LD_VAR 0 2
26986: PPUSH
26987: LD_VAR 0 5
26991: PPUSH
26992: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26996: LD_VAR 0 6
27000: PUSH
27001: LD_INT 1
27003: ARRAY
27004: PPUSH
27005: LD_VAR 0 3
27009: PPUSH
27010: LD_VAR 0 4
27014: PPUSH
27015: CALL_OW 237
// end ;
27019: PPOPN 6
27021: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27022: LD_EXP 38
27026: IFFALSE 27034
27028: PUSH
27029: LD_EXP 85
27033: AND
27034: IFFALSE 27113
27036: GO 27038
27038: DISABLE
27039: LD_INT 0
27041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27042: LD_ADDR_VAR 0 1
27046: PUSH
27047: LD_INT 22
27049: PUSH
27050: LD_OWVAR 2
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 30
27061: PUSH
27062: LD_INT 3
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PPUSH
27073: CALL_OW 69
27077: ST_TO_ADDR
// if not tmp then
27078: LD_VAR 0 1
27082: NOT
27083: IFFALSE 27087
// exit ;
27085: GO 27113
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27087: LD_VAR 0 1
27091: PUSH
27092: LD_INT 1
27094: PPUSH
27095: LD_VAR 0 1
27099: PPUSH
27100: CALL_OW 12
27104: ARRAY
27105: PPUSH
27106: LD_INT 1
27108: PPUSH
27109: CALL_OW 234
// end ;
27113: PPOPN 1
27115: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27116: LD_EXP 38
27120: IFFALSE 27128
27122: PUSH
27123: LD_EXP 86
27127: AND
27128: IFFALSE 27240
27130: GO 27132
27132: DISABLE
27133: LD_INT 0
27135: PPUSH
27136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27137: LD_ADDR_VAR 0 2
27141: PUSH
27142: LD_INT 22
27144: PUSH
27145: LD_OWVAR 2
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 2
27156: PUSH
27157: LD_INT 30
27159: PUSH
27160: LD_INT 27
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 30
27169: PUSH
27170: LD_INT 26
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 30
27179: PUSH
27180: LD_INT 28
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PPUSH
27197: CALL_OW 69
27201: ST_TO_ADDR
// if not tmp then
27202: LD_VAR 0 2
27206: NOT
27207: IFFALSE 27211
// exit ;
27209: GO 27240
// for i in tmp do
27211: LD_ADDR_VAR 0 1
27215: PUSH
27216: LD_VAR 0 2
27220: PUSH
27221: FOR_IN
27222: IFFALSE 27238
// SetLives ( i , 1 ) ;
27224: LD_VAR 0 1
27228: PPUSH
27229: LD_INT 1
27231: PPUSH
27232: CALL_OW 234
27236: GO 27221
27238: POP
27239: POP
// end ;
27240: PPOPN 2
27242: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27243: LD_EXP 38
27247: IFFALSE 27255
27249: PUSH
27250: LD_EXP 87
27254: AND
27255: IFFALSE 27542
27257: GO 27259
27259: DISABLE
27260: LD_INT 0
27262: PPUSH
27263: PPUSH
27264: PPUSH
// begin i := rand ( 1 , 7 ) ;
27265: LD_ADDR_VAR 0 1
27269: PUSH
27270: LD_INT 1
27272: PPUSH
27273: LD_INT 7
27275: PPUSH
27276: CALL_OW 12
27280: ST_TO_ADDR
// case i of 1 :
27281: LD_VAR 0 1
27285: PUSH
27286: LD_INT 1
27288: DOUBLE
27289: EQUAL
27290: IFTRUE 27294
27292: GO 27304
27294: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27295: LD_STRING earthquake(getX(game), 0, 32)
27297: PPUSH
27298: CALL_OW 559
27302: GO 27542
27304: LD_INT 2
27306: DOUBLE
27307: EQUAL
27308: IFTRUE 27312
27310: GO 27326
27312: POP
// begin ToLua ( displayStucuk(); ) ;
27313: LD_STRING displayStucuk();
27315: PPUSH
27316: CALL_OW 559
// ResetFog ;
27320: CALL_OW 335
// end ; 3 :
27324: GO 27542
27326: LD_INT 3
27328: DOUBLE
27329: EQUAL
27330: IFTRUE 27334
27332: GO 27438
27334: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27335: LD_ADDR_VAR 0 2
27339: PUSH
27340: LD_INT 22
27342: PUSH
27343: LD_OWVAR 2
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 25
27354: PUSH
27355: LD_INT 1
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PPUSH
27366: CALL_OW 69
27370: ST_TO_ADDR
// if not tmp then
27371: LD_VAR 0 2
27375: NOT
27376: IFFALSE 27380
// exit ;
27378: GO 27542
// un := tmp [ rand ( 1 , tmp ) ] ;
27380: LD_ADDR_VAR 0 3
27384: PUSH
27385: LD_VAR 0 2
27389: PUSH
27390: LD_INT 1
27392: PPUSH
27393: LD_VAR 0 2
27397: PPUSH
27398: CALL_OW 12
27402: ARRAY
27403: ST_TO_ADDR
// if Crawls ( un ) then
27404: LD_VAR 0 3
27408: PPUSH
27409: CALL_OW 318
27413: IFFALSE 27424
// ComWalk ( un ) ;
27415: LD_VAR 0 3
27419: PPUSH
27420: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27424: LD_VAR 0 3
27428: PPUSH
27429: LD_INT 8
27431: PPUSH
27432: CALL_OW 336
// end ; 4 :
27436: GO 27542
27438: LD_INT 4
27440: DOUBLE
27441: EQUAL
27442: IFTRUE 27446
27444: GO 27520
27446: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27447: LD_ADDR_VAR 0 2
27451: PUSH
27452: LD_INT 22
27454: PUSH
27455: LD_OWVAR 2
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 30
27466: PUSH
27467: LD_INT 29
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PPUSH
27478: CALL_OW 69
27482: ST_TO_ADDR
// if not tmp then
27483: LD_VAR 0 2
27487: NOT
27488: IFFALSE 27492
// exit ;
27490: GO 27542
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27492: LD_VAR 0 2
27496: PUSH
27497: LD_INT 1
27499: ARRAY
27500: PPUSH
27501: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27505: LD_VAR 0 2
27509: PUSH
27510: LD_INT 1
27512: ARRAY
27513: PPUSH
27514: CALL_OW 65
// end ; 5 .. 7 :
27518: GO 27542
27520: LD_INT 5
27522: DOUBLE
27523: GREATEREQUAL
27524: IFFALSE 27532
27526: LD_INT 7
27528: DOUBLE
27529: LESSEQUAL
27530: IFTRUE 27534
27532: GO 27541
27534: POP
// StreamSibBomb ; end ;
27535: CALL 23723 0 0
27539: GO 27542
27541: POP
// end ;
27542: PPOPN 3
27544: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27545: LD_EXP 38
27549: IFFALSE 27557
27551: PUSH
27552: LD_EXP 88
27556: AND
27557: IFFALSE 27713
27559: GO 27561
27561: DISABLE
27562: LD_INT 0
27564: PPUSH
27565: PPUSH
27566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27567: LD_ADDR_VAR 0 2
27571: PUSH
27572: LD_INT 81
27574: PUSH
27575: LD_OWVAR 2
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 2
27586: PUSH
27587: LD_INT 21
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 21
27599: PUSH
27600: LD_INT 2
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: LIST
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PPUSH
27616: CALL_OW 69
27620: ST_TO_ADDR
// if not tmp then
27621: LD_VAR 0 2
27625: NOT
27626: IFFALSE 27630
// exit ;
27628: GO 27713
// p := 0 ;
27630: LD_ADDR_VAR 0 3
27634: PUSH
27635: LD_INT 0
27637: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27638: LD_INT 35
27640: PPUSH
27641: CALL_OW 67
// p := p + 1 ;
27645: LD_ADDR_VAR 0 3
27649: PUSH
27650: LD_VAR 0 3
27654: PUSH
27655: LD_INT 1
27657: PLUS
27658: ST_TO_ADDR
// for i in tmp do
27659: LD_ADDR_VAR 0 1
27663: PUSH
27664: LD_VAR 0 2
27668: PUSH
27669: FOR_IN
27670: IFFALSE 27701
// if GetLives ( i ) < 1000 then
27672: LD_VAR 0 1
27676: PPUSH
27677: CALL_OW 256
27681: PUSH
27682: LD_INT 1000
27684: LESS
27685: IFFALSE 27699
// SetLives ( i , 1000 ) ;
27687: LD_VAR 0 1
27691: PPUSH
27692: LD_INT 1000
27694: PPUSH
27695: CALL_OW 234
27699: GO 27669
27701: POP
27702: POP
// until p > 20 ;
27703: LD_VAR 0 3
27707: PUSH
27708: LD_INT 20
27710: GREATER
27711: IFFALSE 27638
// end ;
27713: PPOPN 3
27715: END
// every 0 0$1 trigger StreamModeActive and sTime do
27716: LD_EXP 38
27720: IFFALSE 27728
27722: PUSH
27723: LD_EXP 89
27727: AND
27728: IFFALSE 27763
27730: GO 27732
27732: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27733: LD_INT 28
27735: PPUSH
27736: LD_OWVAR 2
27740: PPUSH
27741: LD_INT 2
27743: PPUSH
27744: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27748: LD_INT 30
27750: PPUSH
27751: LD_OWVAR 2
27755: PPUSH
27756: LD_INT 2
27758: PPUSH
27759: CALL_OW 322
// end ;
27763: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27764: LD_EXP 38
27768: IFFALSE 27776
27770: PUSH
27771: LD_EXP 90
27775: AND
27776: IFFALSE 27897
27778: GO 27780
27780: DISABLE
27781: LD_INT 0
27783: PPUSH
27784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27785: LD_ADDR_VAR 0 2
27789: PUSH
27790: LD_INT 22
27792: PUSH
27793: LD_OWVAR 2
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: LD_INT 21
27804: PUSH
27805: LD_INT 1
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 3
27814: PUSH
27815: LD_INT 23
27817: PUSH
27818: LD_INT 0
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: LIST
27833: PPUSH
27834: CALL_OW 69
27838: ST_TO_ADDR
// if not tmp then
27839: LD_VAR 0 2
27843: NOT
27844: IFFALSE 27848
// exit ;
27846: GO 27897
// for i in tmp do
27848: LD_ADDR_VAR 0 1
27852: PUSH
27853: LD_VAR 0 2
27857: PUSH
27858: FOR_IN
27859: IFFALSE 27895
// begin if Crawls ( i ) then
27861: LD_VAR 0 1
27865: PPUSH
27866: CALL_OW 318
27870: IFFALSE 27881
// ComWalk ( i ) ;
27872: LD_VAR 0 1
27876: PPUSH
27877: CALL_OW 138
// SetClass ( i , 2 ) ;
27881: LD_VAR 0 1
27885: PPUSH
27886: LD_INT 2
27888: PPUSH
27889: CALL_OW 336
// end ;
27893: GO 27858
27895: POP
27896: POP
// end ;
27897: PPOPN 2
27899: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27900: LD_EXP 38
27904: IFFALSE 27912
27906: PUSH
27907: LD_EXP 91
27911: AND
27912: IFFALSE 28202
27914: GO 27916
27916: DISABLE
27917: LD_INT 0
27919: PPUSH
27920: PPUSH
27921: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27922: LD_OWVAR 2
27926: PPUSH
27927: LD_INT 9
27929: PPUSH
27930: LD_INT 1
27932: PPUSH
27933: LD_INT 1
27935: PPUSH
27936: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27940: LD_INT 9
27942: PPUSH
27943: LD_OWVAR 2
27947: PPUSH
27948: CALL_OW 343
// uc_side := 9 ;
27952: LD_ADDR_OWVAR 20
27956: PUSH
27957: LD_INT 9
27959: ST_TO_ADDR
// uc_nation := 2 ;
27960: LD_ADDR_OWVAR 21
27964: PUSH
27965: LD_INT 2
27967: ST_TO_ADDR
// hc_name := Dark Warrior ;
27968: LD_ADDR_OWVAR 26
27972: PUSH
27973: LD_STRING Dark Warrior
27975: ST_TO_ADDR
// hc_gallery :=  ;
27976: LD_ADDR_OWVAR 33
27980: PUSH
27981: LD_STRING 
27983: ST_TO_ADDR
// hc_noskilllimit := true ;
27984: LD_ADDR_OWVAR 76
27988: PUSH
27989: LD_INT 1
27991: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27992: LD_ADDR_OWVAR 31
27996: PUSH
27997: LD_INT 30
27999: PUSH
28000: LD_INT 30
28002: PUSH
28003: LD_INT 30
28005: PUSH
28006: LD_INT 30
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: ST_TO_ADDR
// un := CreateHuman ;
28015: LD_ADDR_VAR 0 3
28019: PUSH
28020: CALL_OW 44
28024: ST_TO_ADDR
// hc_noskilllimit := false ;
28025: LD_ADDR_OWVAR 76
28029: PUSH
28030: LD_INT 0
28032: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28033: LD_VAR 0 3
28037: PPUSH
28038: LD_INT 1
28040: PPUSH
28041: CALL_OW 51
// ToLua ( playRanger() ) ;
28045: LD_STRING playRanger()
28047: PPUSH
28048: CALL_OW 559
// p := 0 ;
28052: LD_ADDR_VAR 0 2
28056: PUSH
28057: LD_INT 0
28059: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28060: LD_INT 35
28062: PPUSH
28063: CALL_OW 67
// p := p + 1 ;
28067: LD_ADDR_VAR 0 2
28071: PUSH
28072: LD_VAR 0 2
28076: PUSH
28077: LD_INT 1
28079: PLUS
28080: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28081: LD_VAR 0 3
28085: PPUSH
28086: CALL_OW 256
28090: PUSH
28091: LD_INT 1000
28093: LESS
28094: IFFALSE 28108
// SetLives ( un , 1000 ) ;
28096: LD_VAR 0 3
28100: PPUSH
28101: LD_INT 1000
28103: PPUSH
28104: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28108: LD_VAR 0 3
28112: PPUSH
28113: LD_INT 81
28115: PUSH
28116: LD_OWVAR 2
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 91
28127: PUSH
28128: LD_VAR 0 3
28132: PUSH
28133: LD_INT 30
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: LIST
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PPUSH
28145: CALL_OW 69
28149: PPUSH
28150: LD_VAR 0 3
28154: PPUSH
28155: CALL_OW 74
28159: PPUSH
28160: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
28164: LD_VAR 0 2
28168: PUSH
28169: LD_INT 80
28171: GREATER
28172: IFTRUE 28185
28174: PUSH
28175: LD_VAR 0 3
28179: PPUSH
28180: CALL_OW 301
28184: OR
28185: IFFALSE 28060
// if un then
28187: LD_VAR 0 3
28191: IFFALSE 28202
// RemoveUnit ( un ) ;
28193: LD_VAR 0 3
28197: PPUSH
28198: CALL_OW 64
// end ;
28202: PPOPN 3
28204: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
28205: LD_EXP 92
28209: IFFALSE 28325
28211: GO 28213
28213: DISABLE
28214: LD_INT 0
28216: PPUSH
28217: PPUSH
28218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28219: LD_ADDR_VAR 0 2
28223: PUSH
28224: LD_INT 81
28226: PUSH
28227: LD_OWVAR 2
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: LD_INT 21
28238: PUSH
28239: LD_INT 1
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PPUSH
28250: CALL_OW 69
28254: ST_TO_ADDR
// ToLua ( playComputer() ) ;
28255: LD_STRING playComputer()
28257: PPUSH
28258: CALL_OW 559
// if not tmp then
28262: LD_VAR 0 2
28266: NOT
28267: IFFALSE 28271
// exit ;
28269: GO 28325
// for i in tmp do
28271: LD_ADDR_VAR 0 1
28275: PUSH
28276: LD_VAR 0 2
28280: PUSH
28281: FOR_IN
28282: IFFALSE 28323
// for j := 1 to 4 do
28284: LD_ADDR_VAR 0 3
28288: PUSH
28289: DOUBLE
28290: LD_INT 1
28292: DEC
28293: ST_TO_ADDR
28294: LD_INT 4
28296: PUSH
28297: FOR_TO
28298: IFFALSE 28319
// SetSkill ( i , j , 10 ) ;
28300: LD_VAR 0 1
28304: PPUSH
28305: LD_VAR 0 3
28309: PPUSH
28310: LD_INT 10
28312: PPUSH
28313: CALL_OW 237
28317: GO 28297
28319: POP
28320: POP
28321: GO 28281
28323: POP
28324: POP
// end ;
28325: PPOPN 3
28327: END
// every 0 0$1 trigger s30 do var i , tmp ;
28328: LD_EXP 93
28332: IFFALSE 28401
28334: GO 28336
28336: DISABLE
28337: LD_INT 0
28339: PPUSH
28340: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28341: LD_ADDR_VAR 0 2
28345: PUSH
28346: LD_INT 22
28348: PUSH
28349: LD_OWVAR 2
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PPUSH
28358: CALL_OW 69
28362: ST_TO_ADDR
// if not tmp then
28363: LD_VAR 0 2
28367: NOT
28368: IFFALSE 28372
// exit ;
28370: GO 28401
// for i in tmp do
28372: LD_ADDR_VAR 0 1
28376: PUSH
28377: LD_VAR 0 2
28381: PUSH
28382: FOR_IN
28383: IFFALSE 28399
// SetLives ( i , 300 ) ;
28385: LD_VAR 0 1
28389: PPUSH
28390: LD_INT 300
28392: PPUSH
28393: CALL_OW 234
28397: GO 28382
28399: POP
28400: POP
// end ;
28401: PPOPN 2
28403: END
// every 0 0$1 trigger s60 do var i , tmp ;
28404: LD_EXP 94
28408: IFFALSE 28477
28410: GO 28412
28412: DISABLE
28413: LD_INT 0
28415: PPUSH
28416: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28417: LD_ADDR_VAR 0 2
28421: PUSH
28422: LD_INT 22
28424: PUSH
28425: LD_OWVAR 2
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PPUSH
28434: CALL_OW 69
28438: ST_TO_ADDR
// if not tmp then
28439: LD_VAR 0 2
28443: NOT
28444: IFFALSE 28448
// exit ;
28446: GO 28477
// for i in tmp do
28448: LD_ADDR_VAR 0 1
28452: PUSH
28453: LD_VAR 0 2
28457: PUSH
28458: FOR_IN
28459: IFFALSE 28475
// SetLives ( i , 600 ) ;
28461: LD_VAR 0 1
28465: PPUSH
28466: LD_INT 600
28468: PPUSH
28469: CALL_OW 234
28473: GO 28458
28475: POP
28476: POP
// end ;
28477: PPOPN 2
28479: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28480: LD_INT 0
28482: PPUSH
// case cmd of 301 :
28483: LD_VAR 0 1
28487: PUSH
28488: LD_INT 301
28490: DOUBLE
28491: EQUAL
28492: IFTRUE 28496
28494: GO 28528
28496: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28497: LD_VAR 0 6
28501: PPUSH
28502: LD_VAR 0 7
28506: PPUSH
28507: LD_VAR 0 8
28511: PPUSH
28512: LD_VAR 0 4
28516: PPUSH
28517: LD_VAR 0 5
28521: PPUSH
28522: CALL 29741 0 5
28526: GO 28649
28528: LD_INT 302
28530: DOUBLE
28531: EQUAL
28532: IFTRUE 28536
28534: GO 28573
28536: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28537: LD_VAR 0 6
28541: PPUSH
28542: LD_VAR 0 7
28546: PPUSH
28547: LD_VAR 0 8
28551: PPUSH
28552: LD_VAR 0 9
28556: PPUSH
28557: LD_VAR 0 4
28561: PPUSH
28562: LD_VAR 0 5
28566: PPUSH
28567: CALL 29832 0 6
28571: GO 28649
28573: LD_INT 303
28575: DOUBLE
28576: EQUAL
28577: IFTRUE 28581
28579: GO 28618
28581: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28582: LD_VAR 0 6
28586: PPUSH
28587: LD_VAR 0 7
28591: PPUSH
28592: LD_VAR 0 8
28596: PPUSH
28597: LD_VAR 0 9
28601: PPUSH
28602: LD_VAR 0 4
28606: PPUSH
28607: LD_VAR 0 5
28611: PPUSH
28612: CALL 28654 0 6
28616: GO 28649
28618: LD_INT 304
28620: DOUBLE
28621: EQUAL
28622: IFTRUE 28626
28624: GO 28648
28626: POP
// hHackTeleport ( unit , x , y ) ; end ;
28627: LD_VAR 0 2
28631: PPUSH
28632: LD_VAR 0 4
28636: PPUSH
28637: LD_VAR 0 5
28641: PPUSH
28642: CALL 30425 0 3
28646: GO 28649
28648: POP
// end ;
28649: LD_VAR 0 12
28653: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28654: LD_INT 0
28656: PPUSH
28657: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28658: LD_VAR 0 1
28662: PUSH
28663: LD_INT 1
28665: LESS
28666: IFTRUE 28678
28668: PUSH
28669: LD_VAR 0 1
28673: PUSH
28674: LD_INT 3
28676: GREATER
28677: OR
28678: IFTRUE 28696
28680: PUSH
28681: LD_VAR 0 5
28685: PPUSH
28686: LD_VAR 0 6
28690: PPUSH
28691: CALL_OW 428
28695: OR
28696: IFFALSE 28700
// exit ;
28698: GO 29428
// uc_side := your_side ;
28700: LD_ADDR_OWVAR 20
28704: PUSH
28705: LD_OWVAR 2
28709: ST_TO_ADDR
// uc_nation := nation ;
28710: LD_ADDR_OWVAR 21
28714: PUSH
28715: LD_VAR 0 1
28719: ST_TO_ADDR
// bc_level = 1 ;
28720: LD_ADDR_OWVAR 43
28724: PUSH
28725: LD_INT 1
28727: ST_TO_ADDR
// case btype of 1 :
28728: LD_VAR 0 2
28732: PUSH
28733: LD_INT 1
28735: DOUBLE
28736: EQUAL
28737: IFTRUE 28741
28739: GO 28752
28741: POP
// bc_type := b_depot ; 2 :
28742: LD_ADDR_OWVAR 42
28746: PUSH
28747: LD_INT 0
28749: ST_TO_ADDR
28750: GO 29372
28752: LD_INT 2
28754: DOUBLE
28755: EQUAL
28756: IFTRUE 28760
28758: GO 28771
28760: POP
// bc_type := b_warehouse ; 3 :
28761: LD_ADDR_OWVAR 42
28765: PUSH
28766: LD_INT 1
28768: ST_TO_ADDR
28769: GO 29372
28771: LD_INT 3
28773: DOUBLE
28774: EQUAL
28775: IFTRUE 28779
28777: GO 28790
28779: POP
// bc_type := b_lab ; 4 .. 9 :
28780: LD_ADDR_OWVAR 42
28784: PUSH
28785: LD_INT 6
28787: ST_TO_ADDR
28788: GO 29372
28790: LD_INT 4
28792: DOUBLE
28793: GREATEREQUAL
28794: IFFALSE 28802
28796: LD_INT 9
28798: DOUBLE
28799: LESSEQUAL
28800: IFTRUE 28804
28802: GO 28864
28804: POP
// begin bc_type := b_lab_half ;
28805: LD_ADDR_OWVAR 42
28809: PUSH
28810: LD_INT 7
28812: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28813: LD_ADDR_OWVAR 44
28817: PUSH
28818: LD_INT 10
28820: PUSH
28821: LD_INT 11
28823: PUSH
28824: LD_INT 12
28826: PUSH
28827: LD_INT 15
28829: PUSH
28830: LD_INT 14
28832: PUSH
28833: LD_INT 13
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: PUSH
28844: LD_VAR 0 2
28848: PUSH
28849: LD_INT 3
28851: MINUS
28852: ARRAY
28853: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
28854: LD_ADDR_OWVAR 45
28858: PUSH
28859: LD_INT 9
28861: ST_TO_ADDR
// end ; 10 .. 13 :
28862: GO 29372
28864: LD_INT 10
28866: DOUBLE
28867: GREATEREQUAL
28868: IFFALSE 28876
28870: LD_INT 13
28872: DOUBLE
28873: LESSEQUAL
28874: IFTRUE 28878
28876: GO 28955
28878: POP
// begin bc_type := b_lab_full ;
28879: LD_ADDR_OWVAR 42
28883: PUSH
28884: LD_INT 8
28886: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28887: LD_ADDR_OWVAR 44
28891: PUSH
28892: LD_INT 10
28894: PUSH
28895: LD_INT 12
28897: PUSH
28898: LD_INT 14
28900: PUSH
28901: LD_INT 13
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: PUSH
28910: LD_VAR 0 2
28914: PUSH
28915: LD_INT 9
28917: MINUS
28918: ARRAY
28919: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28920: LD_ADDR_OWVAR 45
28924: PUSH
28925: LD_INT 11
28927: PUSH
28928: LD_INT 15
28930: PUSH
28931: LD_INT 12
28933: PUSH
28934: LD_INT 15
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: PUSH
28943: LD_VAR 0 2
28947: PUSH
28948: LD_INT 9
28950: MINUS
28951: ARRAY
28952: ST_TO_ADDR
// end ; 14 :
28953: GO 29372
28955: LD_INT 14
28957: DOUBLE
28958: EQUAL
28959: IFTRUE 28963
28961: GO 28974
28963: POP
// bc_type := b_workshop ; 15 :
28964: LD_ADDR_OWVAR 42
28968: PUSH
28969: LD_INT 2
28971: ST_TO_ADDR
28972: GO 29372
28974: LD_INT 15
28976: DOUBLE
28977: EQUAL
28978: IFTRUE 28982
28980: GO 28993
28982: POP
// bc_type := b_factory ; 16 :
28983: LD_ADDR_OWVAR 42
28987: PUSH
28988: LD_INT 3
28990: ST_TO_ADDR
28991: GO 29372
28993: LD_INT 16
28995: DOUBLE
28996: EQUAL
28997: IFTRUE 29001
28999: GO 29012
29001: POP
// bc_type := b_ext_gun ; 17 :
29002: LD_ADDR_OWVAR 42
29006: PUSH
29007: LD_INT 17
29009: ST_TO_ADDR
29010: GO 29372
29012: LD_INT 17
29014: DOUBLE
29015: EQUAL
29016: IFTRUE 29020
29018: GO 29048
29020: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29021: LD_ADDR_OWVAR 42
29025: PUSH
29026: LD_INT 19
29028: PUSH
29029: LD_INT 23
29031: PUSH
29032: LD_INT 19
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: LIST
29039: PUSH
29040: LD_VAR 0 1
29044: ARRAY
29045: ST_TO_ADDR
29046: GO 29372
29048: LD_INT 18
29050: DOUBLE
29051: EQUAL
29052: IFTRUE 29056
29054: GO 29067
29056: POP
// bc_type := b_ext_radar ; 19 :
29057: LD_ADDR_OWVAR 42
29061: PUSH
29062: LD_INT 20
29064: ST_TO_ADDR
29065: GO 29372
29067: LD_INT 19
29069: DOUBLE
29070: EQUAL
29071: IFTRUE 29075
29073: GO 29086
29075: POP
// bc_type := b_ext_radio ; 20 :
29076: LD_ADDR_OWVAR 42
29080: PUSH
29081: LD_INT 22
29083: ST_TO_ADDR
29084: GO 29372
29086: LD_INT 20
29088: DOUBLE
29089: EQUAL
29090: IFTRUE 29094
29092: GO 29105
29094: POP
// bc_type := b_ext_siberium ; 21 :
29095: LD_ADDR_OWVAR 42
29099: PUSH
29100: LD_INT 21
29102: ST_TO_ADDR
29103: GO 29372
29105: LD_INT 21
29107: DOUBLE
29108: EQUAL
29109: IFTRUE 29113
29111: GO 29124
29113: POP
// bc_type := b_ext_computer ; 22 :
29114: LD_ADDR_OWVAR 42
29118: PUSH
29119: LD_INT 24
29121: ST_TO_ADDR
29122: GO 29372
29124: LD_INT 22
29126: DOUBLE
29127: EQUAL
29128: IFTRUE 29132
29130: GO 29143
29132: POP
// bc_type := b_ext_track ; 23 :
29133: LD_ADDR_OWVAR 42
29137: PUSH
29138: LD_INT 16
29140: ST_TO_ADDR
29141: GO 29372
29143: LD_INT 23
29145: DOUBLE
29146: EQUAL
29147: IFTRUE 29151
29149: GO 29162
29151: POP
// bc_type := b_ext_laser ; 24 :
29152: LD_ADDR_OWVAR 42
29156: PUSH
29157: LD_INT 25
29159: ST_TO_ADDR
29160: GO 29372
29162: LD_INT 24
29164: DOUBLE
29165: EQUAL
29166: IFTRUE 29170
29168: GO 29181
29170: POP
// bc_type := b_control_tower ; 25 :
29171: LD_ADDR_OWVAR 42
29175: PUSH
29176: LD_INT 36
29178: ST_TO_ADDR
29179: GO 29372
29181: LD_INT 25
29183: DOUBLE
29184: EQUAL
29185: IFTRUE 29189
29187: GO 29200
29189: POP
// bc_type := b_breastwork ; 26 :
29190: LD_ADDR_OWVAR 42
29194: PUSH
29195: LD_INT 31
29197: ST_TO_ADDR
29198: GO 29372
29200: LD_INT 26
29202: DOUBLE
29203: EQUAL
29204: IFTRUE 29208
29206: GO 29219
29208: POP
// bc_type := b_bunker ; 27 :
29209: LD_ADDR_OWVAR 42
29213: PUSH
29214: LD_INT 32
29216: ST_TO_ADDR
29217: GO 29372
29219: LD_INT 27
29221: DOUBLE
29222: EQUAL
29223: IFTRUE 29227
29225: GO 29238
29227: POP
// bc_type := b_turret ; 28 :
29228: LD_ADDR_OWVAR 42
29232: PUSH
29233: LD_INT 33
29235: ST_TO_ADDR
29236: GO 29372
29238: LD_INT 28
29240: DOUBLE
29241: EQUAL
29242: IFTRUE 29246
29244: GO 29257
29246: POP
// bc_type := b_armoury ; 29 :
29247: LD_ADDR_OWVAR 42
29251: PUSH
29252: LD_INT 4
29254: ST_TO_ADDR
29255: GO 29372
29257: LD_INT 29
29259: DOUBLE
29260: EQUAL
29261: IFTRUE 29265
29263: GO 29276
29265: POP
// bc_type := b_barracks ; 30 :
29266: LD_ADDR_OWVAR 42
29270: PUSH
29271: LD_INT 5
29273: ST_TO_ADDR
29274: GO 29372
29276: LD_INT 30
29278: DOUBLE
29279: EQUAL
29280: IFTRUE 29284
29282: GO 29295
29284: POP
// bc_type := b_solar_power ; 31 :
29285: LD_ADDR_OWVAR 42
29289: PUSH
29290: LD_INT 27
29292: ST_TO_ADDR
29293: GO 29372
29295: LD_INT 31
29297: DOUBLE
29298: EQUAL
29299: IFTRUE 29303
29301: GO 29314
29303: POP
// bc_type := b_oil_power ; 32 :
29304: LD_ADDR_OWVAR 42
29308: PUSH
29309: LD_INT 26
29311: ST_TO_ADDR
29312: GO 29372
29314: LD_INT 32
29316: DOUBLE
29317: EQUAL
29318: IFTRUE 29322
29320: GO 29333
29322: POP
// bc_type := b_siberite_power ; 33 :
29323: LD_ADDR_OWVAR 42
29327: PUSH
29328: LD_INT 28
29330: ST_TO_ADDR
29331: GO 29372
29333: LD_INT 33
29335: DOUBLE
29336: EQUAL
29337: IFTRUE 29341
29339: GO 29352
29341: POP
// bc_type := b_oil_mine ; 34 :
29342: LD_ADDR_OWVAR 42
29346: PUSH
29347: LD_INT 29
29349: ST_TO_ADDR
29350: GO 29372
29352: LD_INT 34
29354: DOUBLE
29355: EQUAL
29356: IFTRUE 29360
29358: GO 29371
29360: POP
// bc_type := b_siberite_mine ; end ;
29361: LD_ADDR_OWVAR 42
29365: PUSH
29366: LD_INT 30
29368: ST_TO_ADDR
29369: GO 29372
29371: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29372: LD_ADDR_VAR 0 8
29376: PUSH
29377: LD_VAR 0 5
29381: PPUSH
29382: LD_VAR 0 6
29386: PPUSH
29387: LD_VAR 0 3
29391: PPUSH
29392: CALL_OW 47
29396: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29397: LD_OWVAR 42
29401: PUSH
29402: LD_INT 32
29404: PUSH
29405: LD_INT 33
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: IN
29412: IFFALSE 29428
// PlaceWeaponTurret ( b , weapon ) ;
29414: LD_VAR 0 8
29418: PPUSH
29419: LD_VAR 0 4
29423: PPUSH
29424: CALL_OW 431
// end ;
29428: LD_VAR 0 7
29432: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29433: LD_INT 0
29435: PPUSH
29436: PPUSH
29437: PPUSH
29438: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29439: LD_ADDR_VAR 0 4
29443: PUSH
29444: LD_INT 22
29446: PUSH
29447: LD_OWVAR 2
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 2
29458: PUSH
29459: LD_INT 30
29461: PUSH
29462: LD_INT 0
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 30
29471: PUSH
29472: LD_INT 1
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: LIST
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PPUSH
29488: CALL_OW 69
29492: ST_TO_ADDR
// if not tmp then
29493: LD_VAR 0 4
29497: NOT
29498: IFFALSE 29502
// exit ;
29500: GO 29561
// for i in tmp do
29502: LD_ADDR_VAR 0 2
29506: PUSH
29507: LD_VAR 0 4
29511: PUSH
29512: FOR_IN
29513: IFFALSE 29559
// for j = 1 to 3 do
29515: LD_ADDR_VAR 0 3
29519: PUSH
29520: DOUBLE
29521: LD_INT 1
29523: DEC
29524: ST_TO_ADDR
29525: LD_INT 3
29527: PUSH
29528: FOR_TO
29529: IFFALSE 29555
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29531: LD_VAR 0 2
29535: PPUSH
29536: CALL_OW 274
29540: PPUSH
29541: LD_VAR 0 3
29545: PPUSH
29546: LD_INT 99999
29548: PPUSH
29549: CALL_OW 277
29553: GO 29528
29555: POP
29556: POP
29557: GO 29512
29559: POP
29560: POP
// end ;
29561: LD_VAR 0 1
29565: RET
// export function hHackSetLevel10 ; var i , j ; begin
29566: LD_INT 0
29568: PPUSH
29569: PPUSH
29570: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29571: LD_ADDR_VAR 0 2
29575: PUSH
29576: LD_INT 21
29578: PUSH
29579: LD_INT 1
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PPUSH
29586: CALL_OW 69
29590: PUSH
29591: FOR_IN
29592: IFFALSE 29644
// if IsSelected ( i ) then
29594: LD_VAR 0 2
29598: PPUSH
29599: CALL_OW 306
29603: IFFALSE 29642
// begin for j := 1 to 4 do
29605: LD_ADDR_VAR 0 3
29609: PUSH
29610: DOUBLE
29611: LD_INT 1
29613: DEC
29614: ST_TO_ADDR
29615: LD_INT 4
29617: PUSH
29618: FOR_TO
29619: IFFALSE 29640
// SetSkill ( i , j , 10 ) ;
29621: LD_VAR 0 2
29625: PPUSH
29626: LD_VAR 0 3
29630: PPUSH
29631: LD_INT 10
29633: PPUSH
29634: CALL_OW 237
29638: GO 29618
29640: POP
29641: POP
// end ;
29642: GO 29591
29644: POP
29645: POP
// end ;
29646: LD_VAR 0 1
29650: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29651: LD_INT 0
29653: PPUSH
29654: PPUSH
29655: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29656: LD_ADDR_VAR 0 2
29660: PUSH
29661: LD_INT 22
29663: PUSH
29664: LD_OWVAR 2
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 21
29675: PUSH
29676: LD_INT 1
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PPUSH
29687: CALL_OW 69
29691: PUSH
29692: FOR_IN
29693: IFFALSE 29734
// begin for j := 1 to 4 do
29695: LD_ADDR_VAR 0 3
29699: PUSH
29700: DOUBLE
29701: LD_INT 1
29703: DEC
29704: ST_TO_ADDR
29705: LD_INT 4
29707: PUSH
29708: FOR_TO
29709: IFFALSE 29730
// SetSkill ( i , j , 10 ) ;
29711: LD_VAR 0 2
29715: PPUSH
29716: LD_VAR 0 3
29720: PPUSH
29721: LD_INT 10
29723: PPUSH
29724: CALL_OW 237
29728: GO 29708
29730: POP
29731: POP
// end ;
29732: GO 29692
29734: POP
29735: POP
// end ;
29736: LD_VAR 0 1
29740: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29741: LD_INT 0
29743: PPUSH
// uc_side := your_side ;
29744: LD_ADDR_OWVAR 20
29748: PUSH
29749: LD_OWVAR 2
29753: ST_TO_ADDR
// uc_nation := nation ;
29754: LD_ADDR_OWVAR 21
29758: PUSH
29759: LD_VAR 0 1
29763: ST_TO_ADDR
// InitHc ;
29764: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29768: LD_INT 0
29770: PPUSH
29771: LD_VAR 0 2
29775: PPUSH
29776: LD_VAR 0 3
29780: PPUSH
29781: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29785: LD_VAR 0 4
29789: PPUSH
29790: LD_VAR 0 5
29794: PPUSH
29795: CALL_OW 428
29799: PUSH
29800: LD_INT 0
29802: EQUAL
29803: IFFALSE 29827
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29805: CALL_OW 44
29809: PPUSH
29810: LD_VAR 0 4
29814: PPUSH
29815: LD_VAR 0 5
29819: PPUSH
29820: LD_INT 1
29822: PPUSH
29823: CALL_OW 48
// end ;
29827: LD_VAR 0 6
29831: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29832: LD_INT 0
29834: PPUSH
29835: PPUSH
// uc_side := your_side ;
29836: LD_ADDR_OWVAR 20
29840: PUSH
29841: LD_OWVAR 2
29845: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29846: LD_VAR 0 1
29850: PUSH
29851: LD_INT 1
29853: PUSH
29854: LD_INT 2
29856: PUSH
29857: LD_INT 3
29859: PUSH
29860: LD_INT 4
29862: PUSH
29863: LD_INT 5
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: IN
29873: IFFALSE 29885
// uc_nation := nation_american else
29875: LD_ADDR_OWVAR 21
29879: PUSH
29880: LD_INT 1
29882: ST_TO_ADDR
29883: GO 29928
// if chassis in [ 11 , 12 , 13 , 14 ] then
29885: LD_VAR 0 1
29889: PUSH
29890: LD_INT 11
29892: PUSH
29893: LD_INT 12
29895: PUSH
29896: LD_INT 13
29898: PUSH
29899: LD_INT 14
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: IN
29908: IFFALSE 29920
// uc_nation := nation_arabian else
29910: LD_ADDR_OWVAR 21
29914: PUSH
29915: LD_INT 2
29917: ST_TO_ADDR
29918: GO 29928
// uc_nation := nation_russian ;
29920: LD_ADDR_OWVAR 21
29924: PUSH
29925: LD_INT 3
29927: ST_TO_ADDR
// vc_chassis := chassis ;
29928: LD_ADDR_OWVAR 37
29932: PUSH
29933: LD_VAR 0 1
29937: ST_TO_ADDR
// vc_engine := engine ;
29938: LD_ADDR_OWVAR 39
29942: PUSH
29943: LD_VAR 0 2
29947: ST_TO_ADDR
// vc_control := control ;
29948: LD_ADDR_OWVAR 38
29952: PUSH
29953: LD_VAR 0 3
29957: ST_TO_ADDR
// vc_weapon := weapon ;
29958: LD_ADDR_OWVAR 40
29962: PUSH
29963: LD_VAR 0 4
29967: ST_TO_ADDR
// un := CreateVehicle ;
29968: LD_ADDR_VAR 0 8
29972: PUSH
29973: CALL_OW 45
29977: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29978: LD_VAR 0 8
29982: PPUSH
29983: LD_INT 0
29985: PPUSH
29986: LD_INT 5
29988: PPUSH
29989: CALL_OW 12
29993: PPUSH
29994: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29998: LD_VAR 0 8
30002: PPUSH
30003: LD_VAR 0 5
30007: PPUSH
30008: LD_VAR 0 6
30012: PPUSH
30013: LD_INT 1
30015: PPUSH
30016: CALL_OW 48
// end ;
30020: LD_VAR 0 7
30024: RET
// export hInvincible ; every 1 do
30025: GO 30027
30027: DISABLE
// hInvincible := [ ] ;
30028: LD_ADDR_EXP 95
30032: PUSH
30033: EMPTY
30034: ST_TO_ADDR
30035: END
// every 10 do var i ;
30036: GO 30038
30038: DISABLE
30039: LD_INT 0
30041: PPUSH
// begin enable ;
30042: ENABLE
// if not hInvincible then
30043: LD_EXP 95
30047: NOT
30048: IFFALSE 30052
// exit ;
30050: GO 30096
// for i in hInvincible do
30052: LD_ADDR_VAR 0 1
30056: PUSH
30057: LD_EXP 95
30061: PUSH
30062: FOR_IN
30063: IFFALSE 30094
// if GetLives ( i ) < 1000 then
30065: LD_VAR 0 1
30069: PPUSH
30070: CALL_OW 256
30074: PUSH
30075: LD_INT 1000
30077: LESS
30078: IFFALSE 30092
// SetLives ( i , 1000 ) ;
30080: LD_VAR 0 1
30084: PPUSH
30085: LD_INT 1000
30087: PPUSH
30088: CALL_OW 234
30092: GO 30062
30094: POP
30095: POP
// end ;
30096: PPOPN 1
30098: END
// export function hHackInvincible ; var i ; begin
30099: LD_INT 0
30101: PPUSH
30102: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30103: LD_ADDR_VAR 0 2
30107: PUSH
30108: LD_INT 2
30110: PUSH
30111: LD_INT 21
30113: PUSH
30114: LD_INT 1
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 21
30123: PUSH
30124: LD_INT 2
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: LIST
30135: PPUSH
30136: CALL_OW 69
30140: PUSH
30141: FOR_IN
30142: IFFALSE 30203
// if IsSelected ( i ) then
30144: LD_VAR 0 2
30148: PPUSH
30149: CALL_OW 306
30153: IFFALSE 30201
// begin if i in hInvincible then
30155: LD_VAR 0 2
30159: PUSH
30160: LD_EXP 95
30164: IN
30165: IFFALSE 30185
// hInvincible := hInvincible diff i else
30167: LD_ADDR_EXP 95
30171: PUSH
30172: LD_EXP 95
30176: PUSH
30177: LD_VAR 0 2
30181: DIFF
30182: ST_TO_ADDR
30183: GO 30201
// hInvincible := hInvincible union i ;
30185: LD_ADDR_EXP 95
30189: PUSH
30190: LD_EXP 95
30194: PUSH
30195: LD_VAR 0 2
30199: UNION
30200: ST_TO_ADDR
// end ;
30201: GO 30141
30203: POP
30204: POP
// end ;
30205: LD_VAR 0 1
30209: RET
// export function hHackInvisible ; var i , j ; begin
30210: LD_INT 0
30212: PPUSH
30213: PPUSH
30214: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30215: LD_ADDR_VAR 0 2
30219: PUSH
30220: LD_INT 21
30222: PUSH
30223: LD_INT 1
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PPUSH
30230: CALL_OW 69
30234: PUSH
30235: FOR_IN
30236: IFFALSE 30260
// if IsSelected ( i ) then
30238: LD_VAR 0 2
30242: PPUSH
30243: CALL_OW 306
30247: IFFALSE 30258
// ComForceInvisible ( i ) ;
30249: LD_VAR 0 2
30253: PPUSH
30254: CALL_OW 496
30258: GO 30235
30260: POP
30261: POP
// end ;
30262: LD_VAR 0 1
30266: RET
// export function hHackChangeYourSide ; begin
30267: LD_INT 0
30269: PPUSH
// if your_side = 8 then
30270: LD_OWVAR 2
30274: PUSH
30275: LD_INT 8
30277: EQUAL
30278: IFFALSE 30290
// your_side := 0 else
30280: LD_ADDR_OWVAR 2
30284: PUSH
30285: LD_INT 0
30287: ST_TO_ADDR
30288: GO 30304
// your_side := your_side + 1 ;
30290: LD_ADDR_OWVAR 2
30294: PUSH
30295: LD_OWVAR 2
30299: PUSH
30300: LD_INT 1
30302: PLUS
30303: ST_TO_ADDR
// end ;
30304: LD_VAR 0 1
30308: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30309: LD_INT 0
30311: PPUSH
30312: PPUSH
30313: PPUSH
// for i in all_units do
30314: LD_ADDR_VAR 0 2
30318: PUSH
30319: LD_OWVAR 3
30323: PUSH
30324: FOR_IN
30325: IFFALSE 30403
// if IsSelected ( i ) then
30327: LD_VAR 0 2
30331: PPUSH
30332: CALL_OW 306
30336: IFFALSE 30401
// begin j := GetSide ( i ) ;
30338: LD_ADDR_VAR 0 3
30342: PUSH
30343: LD_VAR 0 2
30347: PPUSH
30348: CALL_OW 255
30352: ST_TO_ADDR
// if j = 8 then
30353: LD_VAR 0 3
30357: PUSH
30358: LD_INT 8
30360: EQUAL
30361: IFFALSE 30373
// j := 0 else
30363: LD_ADDR_VAR 0 3
30367: PUSH
30368: LD_INT 0
30370: ST_TO_ADDR
30371: GO 30387
// j := j + 1 ;
30373: LD_ADDR_VAR 0 3
30377: PUSH
30378: LD_VAR 0 3
30382: PUSH
30383: LD_INT 1
30385: PLUS
30386: ST_TO_ADDR
// SetSide ( i , j ) ;
30387: LD_VAR 0 2
30391: PPUSH
30392: LD_VAR 0 3
30396: PPUSH
30397: CALL_OW 235
// end ;
30401: GO 30324
30403: POP
30404: POP
// end ;
30405: LD_VAR 0 1
30409: RET
// export function hHackFog ; begin
30410: LD_INT 0
30412: PPUSH
// FogOff ( true ) ;
30413: LD_INT 1
30415: PPUSH
30416: CALL_OW 344
// end ;
30420: LD_VAR 0 1
30424: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30425: LD_INT 0
30427: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30428: LD_VAR 0 1
30432: PPUSH
30433: LD_VAR 0 2
30437: PPUSH
30438: LD_VAR 0 3
30442: PPUSH
30443: LD_INT 1
30445: PPUSH
30446: LD_INT 1
30448: PPUSH
30449: CALL_OW 483
// CenterOnXY ( x , y ) ;
30453: LD_VAR 0 2
30457: PPUSH
30458: LD_VAR 0 3
30462: PPUSH
30463: CALL_OW 84
// end ;
30467: LD_VAR 0 4
30471: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
30472: LD_INT 0
30474: PPUSH
30475: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
30476: LD_VAR 0 1
30480: NOT
30481: IFTRUE 30500
30483: PUSH
30484: LD_VAR 0 2
30488: PPUSH
30489: LD_VAR 0 3
30493: PPUSH
30494: CALL_OW 488
30498: NOT
30499: OR
30500: IFTRUE 30535
30502: PUSH
30503: LD_VAR 0 1
30507: PPUSH
30508: CALL_OW 266
30512: PUSH
30513: LD_INT 3
30515: NONEQUAL
30516: IFFALSE 30534
30518: PUSH
30519: LD_VAR 0 1
30523: PPUSH
30524: CALL_OW 247
30528: PUSH
30529: LD_INT 1
30531: EQUAL
30532: NOT
30533: AND
30534: OR
30535: IFFALSE 30539
// exit ;
30537: GO 30821
// if GetType ( factory ) = unit_human then
30539: LD_VAR 0 1
30543: PPUSH
30544: CALL_OW 247
30548: PUSH
30549: LD_INT 1
30551: EQUAL
30552: IFFALSE 30569
// factory := IsInUnit ( factory ) ;
30554: LD_ADDR_VAR 0 1
30558: PUSH
30559: LD_VAR 0 1
30563: PPUSH
30564: CALL_OW 310
30568: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
30569: LD_VAR 0 1
30573: PPUSH
30574: CALL_OW 266
30578: PUSH
30579: LD_INT 3
30581: NONEQUAL
30582: IFFALSE 30586
// exit ;
30584: GO 30821
// for i := 1 to Count ( factoryWaypoints ) do
30586: LD_ADDR_VAR 0 5
30590: PUSH
30591: DOUBLE
30592: LD_INT 1
30594: DEC
30595: ST_TO_ADDR
30596: LD_EXP 96
30600: PPUSH
30601: CALL 39553 0 1
30605: PUSH
30606: FOR_TO
30607: IFFALSE 30769
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
30609: LD_VAR 0 2
30613: PPUSH
30614: LD_VAR 0 3
30618: PPUSH
30619: CALL_OW 428
30623: PUSH
30624: LD_EXP 96
30628: PUSH
30629: LD_VAR 0 5
30633: ARRAY
30634: PUSH
30635: LD_INT 2
30637: ARRAY
30638: EQUAL
30639: IFFALSE 30671
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
30641: LD_ADDR_EXP 96
30645: PUSH
30646: LD_EXP 96
30650: PPUSH
30651: LD_VAR 0 5
30655: PPUSH
30656: CALL_OW 3
30660: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30661: CALL 30826 0 0
// exit ;
30665: POP
30666: POP
30667: GO 30821
// end else
30669: GO 30767
// if factory = factoryWaypoints [ i ] [ 2 ] then
30671: LD_VAR 0 1
30675: PUSH
30676: LD_EXP 96
30680: PUSH
30681: LD_VAR 0 5
30685: ARRAY
30686: PUSH
30687: LD_INT 2
30689: ARRAY
30690: EQUAL
30691: IFFALSE 30767
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
30693: LD_ADDR_EXP 96
30697: PUSH
30698: LD_EXP 96
30702: PPUSH
30703: LD_VAR 0 5
30707: PPUSH
30708: CALL_OW 3
30712: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
30713: LD_ADDR_EXP 96
30717: PUSH
30718: LD_EXP 96
30722: PPUSH
30723: LD_VAR 0 1
30727: PPUSH
30728: CALL_OW 255
30732: PUSH
30733: LD_VAR 0 1
30737: PUSH
30738: LD_VAR 0 2
30742: PUSH
30743: LD_VAR 0 3
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: PPUSH
30754: CALL 75485 0 2
30758: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30759: CALL 30826 0 0
// exit ;
30763: POP
30764: POP
30765: GO 30821
// end ; end ;
30767: GO 30606
30769: POP
30770: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
30771: LD_ADDR_EXP 96
30775: PUSH
30776: LD_EXP 96
30780: PPUSH
30781: LD_VAR 0 1
30785: PPUSH
30786: CALL_OW 255
30790: PUSH
30791: LD_VAR 0 1
30795: PUSH
30796: LD_VAR 0 2
30800: PUSH
30801: LD_VAR 0 3
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: PPUSH
30812: CALL 75485 0 2
30816: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30817: CALL 30826 0 0
// end ;
30821: LD_VAR 0 4
30825: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
30826: LD_INT 0
30828: PPUSH
30829: PPUSH
30830: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
30831: LD_STRING resetFactoryWaypoint();
30833: PPUSH
30834: CALL_OW 559
// if factoryWaypoints then
30838: LD_EXP 96
30842: IFFALSE 30963
// begin list := factoryWaypoints ;
30844: LD_ADDR_VAR 0 3
30848: PUSH
30849: LD_EXP 96
30853: ST_TO_ADDR
// for i := 1 to list do
30854: LD_ADDR_VAR 0 2
30858: PUSH
30859: DOUBLE
30860: LD_INT 1
30862: DEC
30863: ST_TO_ADDR
30864: LD_VAR 0 3
30868: PUSH
30869: FOR_TO
30870: IFFALSE 30961
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30872: LD_STRING setFactoryWaypointXY(
30874: PUSH
30875: LD_VAR 0 3
30879: PUSH
30880: LD_VAR 0 2
30884: ARRAY
30885: PUSH
30886: LD_INT 1
30888: ARRAY
30889: STR
30890: PUSH
30891: LD_STRING ,
30893: STR
30894: PUSH
30895: LD_VAR 0 3
30899: PUSH
30900: LD_VAR 0 2
30904: ARRAY
30905: PUSH
30906: LD_INT 2
30908: ARRAY
30909: STR
30910: PUSH
30911: LD_STRING ,
30913: STR
30914: PUSH
30915: LD_VAR 0 3
30919: PUSH
30920: LD_VAR 0 2
30924: ARRAY
30925: PUSH
30926: LD_INT 3
30928: ARRAY
30929: STR
30930: PUSH
30931: LD_STRING ,
30933: STR
30934: PUSH
30935: LD_VAR 0 3
30939: PUSH
30940: LD_VAR 0 2
30944: ARRAY
30945: PUSH
30946: LD_INT 4
30948: ARRAY
30949: STR
30950: PUSH
30951: LD_STRING )
30953: STR
30954: PPUSH
30955: CALL_OW 559
30959: GO 30869
30961: POP
30962: POP
// end ; end ;
30963: LD_VAR 0 1
30967: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
30968: LD_INT 0
30970: PPUSH
// if HexInfo ( x , y ) = warehouse then
30971: LD_VAR 0 2
30975: PPUSH
30976: LD_VAR 0 3
30980: PPUSH
30981: CALL_OW 428
30985: PUSH
30986: LD_VAR 0 1
30990: EQUAL
30991: IFFALSE 31018
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
30993: LD_ADDR_EXP 98
30997: PUSH
30998: LD_EXP 98
31002: PPUSH
31003: LD_VAR 0 1
31007: PPUSH
31008: LD_INT 0
31010: PPUSH
31011: CALL_OW 1
31015: ST_TO_ADDR
31016: GO 31069
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
31018: LD_ADDR_EXP 98
31022: PUSH
31023: LD_EXP 98
31027: PPUSH
31028: LD_VAR 0 1
31032: PPUSH
31033: LD_VAR 0 1
31037: PPUSH
31038: CALL_OW 255
31042: PUSH
31043: LD_VAR 0 1
31047: PUSH
31048: LD_VAR 0 2
31052: PUSH
31053: LD_VAR 0 3
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: PPUSH
31064: CALL_OW 1
31068: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
31069: CALL 31078 0 0
// end ;
31073: LD_VAR 0 4
31077: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
31078: LD_INT 0
31080: PPUSH
31081: PPUSH
31082: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
31083: LD_STRING resetWarehouseGatheringPoints();
31085: PPUSH
31086: CALL_OW 559
// if warehouseGatheringPoints then
31090: LD_EXP 98
31094: IFFALSE 31220
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
31096: LD_ADDR_VAR 0 3
31100: PUSH
31101: LD_EXP 98
31105: PPUSH
31106: CALL 79419 0 1
31110: ST_TO_ADDR
// for i := 1 to list do
31111: LD_ADDR_VAR 0 2
31115: PUSH
31116: DOUBLE
31117: LD_INT 1
31119: DEC
31120: ST_TO_ADDR
31121: LD_VAR 0 3
31125: PUSH
31126: FOR_TO
31127: IFFALSE 31218
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31129: LD_STRING setWarehouseGatheringPointXY(
31131: PUSH
31132: LD_VAR 0 3
31136: PUSH
31137: LD_VAR 0 2
31141: ARRAY
31142: PUSH
31143: LD_INT 1
31145: ARRAY
31146: STR
31147: PUSH
31148: LD_STRING ,
31150: STR
31151: PUSH
31152: LD_VAR 0 3
31156: PUSH
31157: LD_VAR 0 2
31161: ARRAY
31162: PUSH
31163: LD_INT 2
31165: ARRAY
31166: STR
31167: PUSH
31168: LD_STRING ,
31170: STR
31171: PUSH
31172: LD_VAR 0 3
31176: PUSH
31177: LD_VAR 0 2
31181: ARRAY
31182: PUSH
31183: LD_INT 3
31185: ARRAY
31186: STR
31187: PUSH
31188: LD_STRING ,
31190: STR
31191: PUSH
31192: LD_VAR 0 3
31196: PUSH
31197: LD_VAR 0 2
31201: ARRAY
31202: PUSH
31203: LD_INT 4
31205: ARRAY
31206: STR
31207: PUSH
31208: LD_STRING )
31210: STR
31211: PPUSH
31212: CALL_OW 559
31216: GO 31126
31218: POP
31219: POP
// end ; end ;
31220: LD_VAR 0 1
31224: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
31225: LD_EXP 98
31229: IFFALSE 31924
31231: GO 31233
31233: DISABLE
31234: LD_INT 0
31236: PPUSH
31237: PPUSH
31238: PPUSH
31239: PPUSH
31240: PPUSH
31241: PPUSH
31242: PPUSH
31243: PPUSH
31244: PPUSH
// begin enable ;
31245: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
31246: LD_ADDR_VAR 0 3
31250: PUSH
31251: LD_EXP 98
31255: PPUSH
31256: CALL 79419 0 1
31260: ST_TO_ADDR
// if not list then
31261: LD_VAR 0 3
31265: NOT
31266: IFFALSE 31270
// exit ;
31268: GO 31924
// for i := 1 to list do
31270: LD_ADDR_VAR 0 1
31274: PUSH
31275: DOUBLE
31276: LD_INT 1
31278: DEC
31279: ST_TO_ADDR
31280: LD_VAR 0 3
31284: PUSH
31285: FOR_TO
31286: IFFALSE 31922
// begin depot := list [ i ] [ 2 ] ;
31288: LD_ADDR_VAR 0 8
31292: PUSH
31293: LD_VAR 0 3
31297: PUSH
31298: LD_VAR 0 1
31302: ARRAY
31303: PUSH
31304: LD_INT 2
31306: ARRAY
31307: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
31308: LD_ADDR_VAR 0 5
31312: PUSH
31313: LD_VAR 0 3
31317: PUSH
31318: LD_VAR 0 1
31322: ARRAY
31323: PUSH
31324: LD_INT 1
31326: ARRAY
31327: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
31328: LD_VAR 0 8
31332: PPUSH
31333: CALL_OW 301
31337: IFTRUE 31356
31339: PUSH
31340: LD_VAR 0 5
31344: PUSH
31345: LD_VAR 0 8
31349: PPUSH
31350: CALL_OW 255
31354: NONEQUAL
31355: OR
31356: IFFALSE 31385
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
31358: LD_ADDR_EXP 98
31362: PUSH
31363: LD_EXP 98
31367: PPUSH
31368: LD_VAR 0 8
31372: PPUSH
31373: LD_INT 0
31375: PPUSH
31376: CALL_OW 1
31380: ST_TO_ADDR
// exit ;
31381: POP
31382: POP
31383: GO 31924
// end ; x := list [ i ] [ 3 ] ;
31385: LD_ADDR_VAR 0 6
31389: PUSH
31390: LD_VAR 0 3
31394: PUSH
31395: LD_VAR 0 1
31399: ARRAY
31400: PUSH
31401: LD_INT 3
31403: ARRAY
31404: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
31405: LD_ADDR_VAR 0 7
31409: PUSH
31410: LD_VAR 0 3
31414: PUSH
31415: LD_VAR 0 1
31419: ARRAY
31420: PUSH
31421: LD_INT 4
31423: ARRAY
31424: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
31425: LD_ADDR_VAR 0 9
31429: PUSH
31430: LD_VAR 0 6
31434: PPUSH
31435: LD_VAR 0 7
31439: PPUSH
31440: LD_INT 16
31442: PPUSH
31443: CALL 77993 0 3
31447: ST_TO_ADDR
// if not cratesNearbyPoint then
31448: LD_VAR 0 9
31452: NOT
31453: IFFALSE 31459
// exit ;
31455: POP
31456: POP
31457: GO 31924
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
31459: LD_ADDR_VAR 0 4
31463: PUSH
31464: LD_INT 22
31466: PUSH
31467: LD_VAR 0 5
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 3
31478: PUSH
31479: LD_INT 60
31481: PUSH
31482: EMPTY
31483: LIST
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 91
31491: PUSH
31492: LD_VAR 0 8
31496: PUSH
31497: LD_INT 6
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 2
31507: PUSH
31508: LD_INT 25
31510: PUSH
31511: LD_INT 2
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 25
31520: PUSH
31521: LD_INT 16
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: LIST
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: PPUSH
31539: CALL_OW 69
31543: PUSH
31544: LD_VAR 0 8
31548: PPUSH
31549: CALL_OW 313
31553: PPUSH
31554: LD_INT 3
31556: PUSH
31557: LD_INT 60
31559: PUSH
31560: EMPTY
31561: LIST
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 2
31569: PUSH
31570: LD_INT 25
31572: PUSH
31573: LD_INT 2
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 25
31582: PUSH
31583: LD_INT 16
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: LIST
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PPUSH
31599: CALL_OW 72
31603: UNION
31604: ST_TO_ADDR
// if tmp then
31605: LD_VAR 0 4
31609: IFFALSE 31689
// begin tmp := ShrinkArray ( tmp , 3 ) ;
31611: LD_ADDR_VAR 0 4
31615: PUSH
31616: LD_VAR 0 4
31620: PPUSH
31621: LD_INT 3
31623: PPUSH
31624: CALL 75800 0 2
31628: ST_TO_ADDR
// for j in tmp do
31629: LD_ADDR_VAR 0 2
31633: PUSH
31634: LD_VAR 0 4
31638: PUSH
31639: FOR_IN
31640: IFFALSE 31683
// begin if IsInUnit ( j ) then
31642: LD_VAR 0 2
31646: PPUSH
31647: CALL_OW 310
31651: IFFALSE 31662
// ComExit ( j ) ;
31653: LD_VAR 0 2
31657: PPUSH
31658: CALL 75883 0 1
// AddComCollect ( j , x , y ) ;
31662: LD_VAR 0 2
31666: PPUSH
31667: LD_VAR 0 6
31671: PPUSH
31672: LD_VAR 0 7
31676: PPUSH
31677: CALL_OW 177
// end ;
31681: GO 31639
31683: POP
31684: POP
// exit ;
31685: POP
31686: POP
31687: GO 31924
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
31689: LD_ADDR_VAR 0 4
31693: PUSH
31694: LD_INT 22
31696: PUSH
31697: LD_VAR 0 5
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 91
31708: PUSH
31709: LD_VAR 0 8
31713: PUSH
31714: LD_INT 8
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: LIST
31721: PUSH
31722: LD_INT 2
31724: PUSH
31725: LD_INT 34
31727: PUSH
31728: LD_INT 12
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 34
31737: PUSH
31738: LD_INT 51
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 34
31747: PUSH
31748: LD_INT 32
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 34
31757: PUSH
31758: LD_INT 89
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: LIST
31776: PPUSH
31777: CALL_OW 69
31781: ST_TO_ADDR
// if tmp then
31782: LD_VAR 0 4
31786: IFFALSE 31920
// begin for j in tmp do
31788: LD_ADDR_VAR 0 2
31792: PUSH
31793: LD_VAR 0 4
31797: PUSH
31798: FOR_IN
31799: IFFALSE 31918
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
31801: LD_VAR 0 2
31805: PPUSH
31806: CALL_OW 262
31810: PUSH
31811: LD_INT 3
31813: EQUAL
31814: IFTRUE 31831
31816: PUSH
31817: LD_VAR 0 2
31821: PPUSH
31822: CALL_OW 261
31826: PUSH
31827: LD_INT 20
31829: GREATER
31830: OR
31831: IFFALSE 31845
31833: PUSH
31834: LD_VAR 0 2
31838: PPUSH
31839: CALL_OW 314
31843: NOT
31844: AND
31845: IFFALSE 31875
31847: PUSH
31848: LD_VAR 0 2
31852: PPUSH
31853: CALL_OW 263
31857: PUSH
31858: LD_INT 1
31860: NONEQUAL
31861: IFTRUE 31874
31863: PUSH
31864: LD_VAR 0 2
31868: PPUSH
31869: CALL_OW 311
31873: OR
31874: AND
31875: IFFALSE 31916
// begin ComCollect ( j , x , y ) ;
31877: LD_VAR 0 2
31881: PPUSH
31882: LD_VAR 0 6
31886: PPUSH
31887: LD_VAR 0 7
31891: PPUSH
31892: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
31896: LD_VAR 0 2
31900: PPUSH
31901: LD_VAR 0 8
31905: PPUSH
31906: CALL_OW 172
// exit ;
31910: POP
31911: POP
31912: POP
31913: POP
31914: GO 31924
// end ;
31916: GO 31798
31918: POP
31919: POP
// end ; end ;
31920: GO 31285
31922: POP
31923: POP
// end ; end_of_file
31924: PPOPN 9
31926: END
// export function SOS_UnitDestroyed ( un ) ; begin
31927: LD_INT 0
31929: PPUSH
// ComRadiation ( un ) ;
31930: LD_VAR 0 1
31934: PPUSH
31935: CALL 33016 0 1
// end ;
31939: LD_VAR 0 2
31943: RET
// export function SOS_UnitKamikazed ( un ) ; begin
31944: LD_INT 0
31946: PPUSH
// ComRadiation ( un ) ;
31947: LD_VAR 0 1
31951: PPUSH
31952: CALL 33016 0 1
// end ;
31956: LD_VAR 0 2
31960: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31961: LD_INT 0
31963: PPUSH
// end ;
31964: LD_VAR 0 4
31968: RET
// export function SOS_Command ( cmd ) ; begin
31969: LD_INT 0
31971: PPUSH
// end ;
31972: LD_VAR 0 2
31976: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
31977: LD_INT 0
31979: PPUSH
// end ;
31980: LD_VAR 0 6
31984: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
31985: LD_INT 0
31987: PPUSH
31988: PPUSH
31989: PPUSH
31990: PPUSH
// if not vehicle or not factory then
31991: LD_VAR 0 1
31995: NOT
31996: IFTRUE 32005
31998: PUSH
31999: LD_VAR 0 2
32003: NOT
32004: OR
32005: IFFALSE 32009
// exit ;
32007: GO 32591
// if not factoryWaypoints then
32009: LD_EXP 96
32013: NOT
32014: IFFALSE 32018
// exit ;
32016: GO 32591
// for i := 1 to Count ( factoryWaypoints ) do
32018: LD_ADDR_VAR 0 4
32022: PUSH
32023: DOUBLE
32024: LD_INT 1
32026: DEC
32027: ST_TO_ADDR
32028: LD_EXP 96
32032: PPUSH
32033: CALL 39553 0 1
32037: PUSH
32038: FOR_TO
32039: IFFALSE 32589
// if factoryWaypoints [ i ] [ 2 ] = factory then
32041: LD_EXP 96
32045: PUSH
32046: LD_VAR 0 4
32050: ARRAY
32051: PUSH
32052: LD_INT 2
32054: ARRAY
32055: PUSH
32056: LD_VAR 0 2
32060: EQUAL
32061: IFFALSE 32587
// begin if GetControl ( vehicle ) = control_manual then
32063: LD_VAR 0 1
32067: PPUSH
32068: CALL_OW 263
32072: PUSH
32073: LD_INT 1
32075: EQUAL
32076: IFFALSE 32440
// begin driver := IsDrivenBy ( vehicle ) ;
32078: LD_ADDR_VAR 0 5
32082: PUSH
32083: LD_VAR 0 1
32087: PPUSH
32088: CALL_OW 311
32092: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
32093: LD_VAR 0 5
32097: PUSH
32098: LD_EXP 97
32102: IN
32103: IFTRUE 32117
32105: PUSH
32106: LD_VAR 0 1
32110: PUSH
32111: LD_EXP 97
32115: IN
32116: OR
32117: IFFALSE 32123
// exit ;
32119: POP
32120: POP
32121: GO 32591
// if not HasTask ( driver ) then
32123: LD_VAR 0 5
32127: PPUSH
32128: CALL_OW 314
32132: NOT
32133: IFFALSE 32438
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
32135: LD_ADDR_EXP 97
32139: PUSH
32140: LD_EXP 97
32144: PPUSH
32145: LD_VAR 0 5
32149: PPUSH
32150: CALL 75485 0 2
32154: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
32155: LD_ADDR_EXP 97
32159: PUSH
32160: LD_EXP 97
32164: PPUSH
32165: LD_VAR 0 1
32169: PPUSH
32170: CALL 75485 0 2
32174: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
32175: LD_ADDR_VAR 0 6
32179: PUSH
32180: LD_EXP 96
32184: PUSH
32185: LD_VAR 0 4
32189: ARRAY
32190: PUSH
32191: LD_INT 3
32193: ARRAY
32194: PPUSH
32195: LD_EXP 96
32199: PUSH
32200: LD_VAR 0 4
32204: ARRAY
32205: PUSH
32206: LD_INT 4
32208: ARRAY
32209: PPUSH
32210: CALL_OW 428
32214: ST_TO_ADDR
// if hex then
32215: LD_VAR 0 6
32219: IFFALSE 32237
// ComMoveUnit ( driver , hex ) else
32221: LD_VAR 0 5
32225: PPUSH
32226: LD_VAR 0 6
32230: PPUSH
32231: CALL_OW 112
32235: GO 32321
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
32237: LD_VAR 0 1
32241: PPUSH
32242: LD_EXP 96
32246: PUSH
32247: LD_VAR 0 4
32251: ARRAY
32252: PUSH
32253: LD_INT 3
32255: ARRAY
32256: PPUSH
32257: LD_EXP 96
32261: PUSH
32262: LD_VAR 0 4
32266: ARRAY
32267: PUSH
32268: LD_INT 4
32270: ARRAY
32271: PPUSH
32272: CALL_OW 297
32276: PUSH
32277: LD_INT 0
32279: GREATER
32280: IFFALSE 32321
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
32282: LD_VAR 0 5
32286: PPUSH
32287: LD_EXP 96
32291: PUSH
32292: LD_VAR 0 4
32296: ARRAY
32297: PUSH
32298: LD_INT 3
32300: ARRAY
32301: PPUSH
32302: LD_EXP 96
32306: PUSH
32307: LD_VAR 0 4
32311: ARRAY
32312: PUSH
32313: LD_INT 4
32315: ARRAY
32316: PPUSH
32317: CALL_OW 111
// AddComExitVehicle ( driver ) ;
32321: LD_VAR 0 5
32325: PPUSH
32326: CALL_OW 181
// if Multiplayer then
32330: LD_OWVAR 4
32334: IFFALSE 32383
// begin repeat wait ( 10 ) ;
32336: LD_INT 10
32338: PPUSH
32339: CALL_OW 67
// until not IsInUnit ( driver ) ;
32343: LD_VAR 0 5
32347: PPUSH
32348: CALL_OW 310
32352: NOT
32353: IFFALSE 32336
// if not HasTask ( driver ) then
32355: LD_VAR 0 5
32359: PPUSH
32360: CALL_OW 314
32364: NOT
32365: IFFALSE 32381
// ComEnterUnit ( driver , factory ) ;
32367: LD_VAR 0 5
32371: PPUSH
32372: LD_VAR 0 2
32376: PPUSH
32377: CALL_OW 120
// end else
32381: GO 32397
// AddComEnterUnit ( driver , factory ) ;
32383: LD_VAR 0 5
32387: PPUSH
32388: LD_VAR 0 2
32392: PPUSH
32393: CALL_OW 180
// wait ( 0 0$1 ) ;
32397: LD_INT 35
32399: PPUSH
32400: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
32404: LD_ADDR_EXP 97
32408: PUSH
32409: LD_EXP 97
32413: PUSH
32414: LD_VAR 0 5
32418: DIFF
32419: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
32420: LD_ADDR_EXP 97
32424: PUSH
32425: LD_EXP 97
32429: PUSH
32430: LD_VAR 0 1
32434: DIFF
32435: ST_TO_ADDR
// break ;
32436: GO 32589
// end ; end else
32438: GO 32587
// if GetControl ( vehicle ) = control_remote then
32440: LD_VAR 0 1
32444: PPUSH
32445: CALL_OW 263
32449: PUSH
32450: LD_INT 2
32452: EQUAL
32453: IFFALSE 32539
// begin wait ( 0 0$2 ) ;
32455: LD_INT 70
32457: PPUSH
32458: CALL_OW 67
// repeat wait ( 10 ) ;
32462: LD_INT 10
32464: PPUSH
32465: CALL_OW 67
// Connect ( vehicle ) ;
32469: LD_VAR 0 1
32473: PPUSH
32474: CALL 45797 0 1
// until IsControledBy ( vehicle ) ;
32478: LD_VAR 0 1
32482: PPUSH
32483: CALL_OW 312
32487: IFFALSE 32462
// wait ( 10 ) ;
32489: LD_INT 10
32491: PPUSH
32492: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
32496: LD_VAR 0 1
32500: PPUSH
32501: LD_EXP 96
32505: PUSH
32506: LD_VAR 0 4
32510: ARRAY
32511: PUSH
32512: LD_INT 3
32514: ARRAY
32515: PPUSH
32516: LD_EXP 96
32520: PUSH
32521: LD_VAR 0 4
32525: ARRAY
32526: PUSH
32527: LD_INT 4
32529: ARRAY
32530: PPUSH
32531: CALL_OW 111
// break ;
32535: GO 32589
// end else
32537: GO 32587
// begin wait ( 0 0$3 ) ;
32539: LD_INT 105
32541: PPUSH
32542: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
32546: LD_VAR 0 1
32550: PPUSH
32551: LD_EXP 96
32555: PUSH
32556: LD_VAR 0 4
32560: ARRAY
32561: PUSH
32562: LD_INT 3
32564: ARRAY
32565: PPUSH
32566: LD_EXP 96
32570: PUSH
32571: LD_VAR 0 4
32575: ARRAY
32576: PUSH
32577: LD_INT 4
32579: ARRAY
32580: PPUSH
32581: CALL_OW 111
// break ;
32585: GO 32589
// end ; end ;
32587: GO 32038
32589: POP
32590: POP
// end ;
32591: LD_VAR 0 3
32595: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32596: LD_INT 0
32598: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32599: LD_VAR 0 1
32603: PUSH
32604: LD_INT 250
32606: EQUAL
32607: IFFALSE 32624
32609: PUSH
32610: LD_VAR 0 2
32614: PPUSH
32615: CALL_OW 264
32619: PUSH
32620: LD_INT 81
32622: EQUAL
32623: AND
32624: IFFALSE 32645
// MinerPlaceMine ( unit , x , y ) ;
32626: LD_VAR 0 2
32630: PPUSH
32631: LD_VAR 0 4
32635: PPUSH
32636: LD_VAR 0 5
32640: PPUSH
32641: CALL 35777 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32645: LD_VAR 0 1
32649: PUSH
32650: LD_INT 251
32652: EQUAL
32653: IFFALSE 32670
32655: PUSH
32656: LD_VAR 0 2
32660: PPUSH
32661: CALL_OW 264
32665: PUSH
32666: LD_INT 81
32668: EQUAL
32669: AND
32670: IFFALSE 32691
// MinerDetonateMine ( unit , x , y ) ;
32672: LD_VAR 0 2
32676: PPUSH
32677: LD_VAR 0 4
32681: PPUSH
32682: LD_VAR 0 5
32686: PPUSH
32687: CALL 36056 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32691: LD_VAR 0 1
32695: PUSH
32696: LD_INT 252
32698: EQUAL
32699: IFFALSE 32716
32701: PUSH
32702: LD_VAR 0 2
32706: PPUSH
32707: CALL_OW 264
32711: PUSH
32712: LD_INT 81
32714: EQUAL
32715: AND
32716: IFFALSE 32737
// MinerCreateMinefield ( unit , x , y ) ;
32718: LD_VAR 0 2
32722: PPUSH
32723: LD_VAR 0 4
32727: PPUSH
32728: LD_VAR 0 5
32732: PPUSH
32733: CALL 36475 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32737: LD_VAR 0 1
32741: PUSH
32742: LD_INT 253
32744: EQUAL
32745: IFFALSE 32762
32747: PUSH
32748: LD_VAR 0 2
32752: PPUSH
32753: CALL_OW 257
32757: PUSH
32758: LD_INT 5
32760: EQUAL
32761: AND
32762: IFFALSE 32783
// ComBinocular ( unit , x , y ) ;
32764: LD_VAR 0 2
32768: PPUSH
32769: LD_VAR 0 4
32773: PPUSH
32774: LD_VAR 0 5
32778: PPUSH
32779: CALL 36850 0 3
// if selectedUnit then
32783: LD_VAR 0 3
32787: IFFALSE 32847
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32789: LD_VAR 0 1
32793: PUSH
32794: LD_INT 254
32796: EQUAL
32797: IFFALSE 32814
32799: PUSH
32800: LD_VAR 0 2
32804: PPUSH
32805: CALL_OW 264
32809: PUSH
32810: LD_INT 99
32812: EQUAL
32813: AND
32814: IFFALSE 32831
32816: PUSH
32817: LD_VAR 0 3
32821: PPUSH
32822: CALL_OW 263
32826: PUSH
32827: LD_INT 3
32829: EQUAL
32830: AND
32831: IFFALSE 32847
// HackDestroyVehicle ( unit , selectedUnit ) ;
32833: LD_VAR 0 2
32837: PPUSH
32838: LD_VAR 0 3
32842: PPUSH
32843: CALL 35137 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32847: LD_VAR 0 1
32851: PUSH
32852: LD_INT 255
32854: EQUAL
32855: IFFALSE 32879
32857: PUSH
32858: LD_VAR 0 2
32862: PPUSH
32863: CALL_OW 264
32867: PUSH
32868: LD_INT 14
32870: PUSH
32871: LD_INT 53
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: IN
32878: AND
32879: IFFALSE 32897
32881: PUSH
32882: LD_VAR 0 4
32886: PPUSH
32887: LD_VAR 0 5
32891: PPUSH
32892: CALL_OW 488
32896: AND
32897: IFFALSE 32921
// CutTreeXYR ( unit , x , y , 12 ) ;
32899: LD_VAR 0 2
32903: PPUSH
32904: LD_VAR 0 4
32908: PPUSH
32909: LD_VAR 0 5
32913: PPUSH
32914: LD_INT 12
32916: PPUSH
32917: CALL 33112 0 4
// if cmd = 256 then
32921: LD_VAR 0 1
32925: PUSH
32926: LD_INT 256
32928: EQUAL
32929: IFFALSE 32950
// SetFactoryWaypoint ( unit , x , y ) ;
32931: LD_VAR 0 2
32935: PPUSH
32936: LD_VAR 0 4
32940: PPUSH
32941: LD_VAR 0 5
32945: PPUSH
32946: CALL 30472 0 3
// if cmd = 257 then
32950: LD_VAR 0 1
32954: PUSH
32955: LD_INT 257
32957: EQUAL
32958: IFFALSE 32979
// SetWarehouseGatheringPoint ( unit , x , y ) ;
32960: LD_VAR 0 2
32964: PPUSH
32965: LD_VAR 0 4
32969: PPUSH
32970: LD_VAR 0 5
32974: PPUSH
32975: CALL 30968 0 3
// if cmd = 258 then
32979: LD_VAR 0 1
32983: PUSH
32984: LD_INT 258
32986: EQUAL
32987: IFFALSE 33011
// BurnTreeXYR ( unit , x , y , 8 ) ;
32989: LD_VAR 0 2
32993: PPUSH
32994: LD_VAR 0 4
32998: PPUSH
32999: LD_VAR 0 5
33003: PPUSH
33004: LD_INT 8
33006: PPUSH
33007: CALL 33512 0 4
// end ;
33011: LD_VAR 0 6
33015: RET
// export function ComRadiation ( un ) ; var eff ; begin
33016: LD_INT 0
33018: PPUSH
33019: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
33020: LD_VAR 0 1
33024: PPUSH
33025: CALL_OW 264
33029: PUSH
33030: LD_INT 91
33032: NONEQUAL
33033: IFFALSE 33037
// exit ;
33035: GO 33107
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33037: LD_INT 68
33039: PPUSH
33040: LD_VAR 0 1
33044: PPUSH
33045: CALL_OW 255
33049: PPUSH
33050: CALL_OW 321
33054: PUSH
33055: LD_INT 2
33057: EQUAL
33058: IFFALSE 33070
// eff := 50 else
33060: LD_ADDR_VAR 0 3
33064: PUSH
33065: LD_INT 50
33067: ST_TO_ADDR
33068: GO 33078
// eff := 25 ;
33070: LD_ADDR_VAR 0 3
33074: PUSH
33075: LD_INT 25
33077: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33078: LD_VAR 0 1
33082: PPUSH
33083: CALL_OW 250
33087: PPUSH
33088: LD_VAR 0 1
33092: PPUSH
33093: CALL_OW 251
33097: PPUSH
33098: LD_VAR 0 3
33102: PPUSH
33103: CALL_OW 495
// end ;
33107: LD_VAR 0 2
33111: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33112: LD_INT 0
33114: PPUSH
33115: PPUSH
33116: PPUSH
33117: PPUSH
33118: PPUSH
33119: PPUSH
33120: PPUSH
33121: PPUSH
33122: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
33123: LD_VAR 0 1
33127: PPUSH
33128: CALL_OW 302
33132: NOT
33133: IFTRUE 33152
33135: PUSH
33136: LD_VAR 0 2
33140: PPUSH
33141: LD_VAR 0 3
33145: PPUSH
33146: CALL_OW 488
33150: NOT
33151: OR
33152: IFTRUE 33161
33154: PUSH
33155: LD_VAR 0 4
33159: NOT
33160: OR
33161: IFFALSE 33165
// exit ;
33163: GO 33507
// list := [ ] ;
33165: LD_ADDR_VAR 0 13
33169: PUSH
33170: EMPTY
33171: ST_TO_ADDR
// if x - r < 0 then
33172: LD_VAR 0 2
33176: PUSH
33177: LD_VAR 0 4
33181: MINUS
33182: PUSH
33183: LD_INT 0
33185: LESS
33186: IFFALSE 33198
// min_x := 0 else
33188: LD_ADDR_VAR 0 7
33192: PUSH
33193: LD_INT 0
33195: ST_TO_ADDR
33196: GO 33214
// min_x := x - r ;
33198: LD_ADDR_VAR 0 7
33202: PUSH
33203: LD_VAR 0 2
33207: PUSH
33208: LD_VAR 0 4
33212: MINUS
33213: ST_TO_ADDR
// if y - r < 0 then
33214: LD_VAR 0 3
33218: PUSH
33219: LD_VAR 0 4
33223: MINUS
33224: PUSH
33225: LD_INT 0
33227: LESS
33228: IFFALSE 33240
// min_y := 0 else
33230: LD_ADDR_VAR 0 8
33234: PUSH
33235: LD_INT 0
33237: ST_TO_ADDR
33238: GO 33256
// min_y := y - r ;
33240: LD_ADDR_VAR 0 8
33244: PUSH
33245: LD_VAR 0 3
33249: PUSH
33250: LD_VAR 0 4
33254: MINUS
33255: ST_TO_ADDR
// max_x := x + r ;
33256: LD_ADDR_VAR 0 9
33260: PUSH
33261: LD_VAR 0 2
33265: PUSH
33266: LD_VAR 0 4
33270: PLUS
33271: ST_TO_ADDR
// max_y := y + r ;
33272: LD_ADDR_VAR 0 10
33276: PUSH
33277: LD_VAR 0 3
33281: PUSH
33282: LD_VAR 0 4
33286: PLUS
33287: ST_TO_ADDR
// for _x = min_x to max_x do
33288: LD_ADDR_VAR 0 11
33292: PUSH
33293: DOUBLE
33294: LD_VAR 0 7
33298: DEC
33299: ST_TO_ADDR
33300: LD_VAR 0 9
33304: PUSH
33305: FOR_TO
33306: IFFALSE 33425
// for _y = min_y to max_y do
33308: LD_ADDR_VAR 0 12
33312: PUSH
33313: DOUBLE
33314: LD_VAR 0 8
33318: DEC
33319: ST_TO_ADDR
33320: LD_VAR 0 10
33324: PUSH
33325: FOR_TO
33326: IFFALSE 33421
// begin if not ValidHex ( _x , _y ) then
33328: LD_VAR 0 11
33332: PPUSH
33333: LD_VAR 0 12
33337: PPUSH
33338: CALL_OW 488
33342: NOT
33343: IFFALSE 33347
// continue ;
33345: GO 33325
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33347: LD_VAR 0 11
33351: PPUSH
33352: LD_VAR 0 12
33356: PPUSH
33357: CALL_OW 351
33361: IFFALSE 33379
33363: PUSH
33364: LD_VAR 0 11
33368: PPUSH
33369: LD_VAR 0 12
33373: PPUSH
33374: CALL_OW 554
33378: AND
33379: IFFALSE 33419
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33381: LD_ADDR_VAR 0 13
33385: PUSH
33386: LD_VAR 0 13
33390: PPUSH
33391: LD_VAR 0 13
33395: PUSH
33396: LD_INT 1
33398: PLUS
33399: PPUSH
33400: LD_VAR 0 11
33404: PUSH
33405: LD_VAR 0 12
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PPUSH
33414: CALL_OW 2
33418: ST_TO_ADDR
// end ;
33419: GO 33325
33421: POP
33422: POP
33423: GO 33305
33425: POP
33426: POP
// if not list then
33427: LD_VAR 0 13
33431: NOT
33432: IFFALSE 33436
// exit ;
33434: GO 33507
// for i in list do
33436: LD_ADDR_VAR 0 6
33440: PUSH
33441: LD_VAR 0 13
33445: PUSH
33446: FOR_IN
33447: IFFALSE 33505
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33449: LD_VAR 0 1
33453: PPUSH
33454: LD_STRING M
33456: PUSH
33457: LD_VAR 0 6
33461: PUSH
33462: LD_INT 1
33464: ARRAY
33465: PUSH
33466: LD_VAR 0 6
33470: PUSH
33471: LD_INT 2
33473: ARRAY
33474: PUSH
33475: LD_INT 0
33477: PUSH
33478: LD_INT 0
33480: PUSH
33481: LD_INT 0
33483: PUSH
33484: LD_INT 0
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: PUSH
33496: EMPTY
33497: LIST
33498: PPUSH
33499: CALL_OW 447
33503: GO 33446
33505: POP
33506: POP
// end ;
33507: LD_VAR 0 5
33511: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
33512: LD_INT 0
33514: PPUSH
33515: PPUSH
33516: PPUSH
33517: PPUSH
33518: PPUSH
33519: PPUSH
33520: PPUSH
33521: PPUSH
33522: PPUSH
33523: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
33524: LD_VAR 0 1
33528: PPUSH
33529: CALL_OW 302
33533: NOT
33534: IFTRUE 33553
33536: PUSH
33537: LD_VAR 0 2
33541: PPUSH
33542: LD_VAR 0 3
33546: PPUSH
33547: CALL_OW 488
33551: NOT
33552: OR
33553: IFTRUE 33562
33555: PUSH
33556: LD_VAR 0 4
33560: NOT
33561: OR
33562: IFFALSE 33566
// exit ;
33564: GO 34083
// list := [ ] ;
33566: LD_ADDR_VAR 0 13
33570: PUSH
33571: EMPTY
33572: ST_TO_ADDR
// if x - r < 0 then
33573: LD_VAR 0 2
33577: PUSH
33578: LD_VAR 0 4
33582: MINUS
33583: PUSH
33584: LD_INT 0
33586: LESS
33587: IFFALSE 33599
// min_x := 0 else
33589: LD_ADDR_VAR 0 7
33593: PUSH
33594: LD_INT 0
33596: ST_TO_ADDR
33597: GO 33615
// min_x := x - r ;
33599: LD_ADDR_VAR 0 7
33603: PUSH
33604: LD_VAR 0 2
33608: PUSH
33609: LD_VAR 0 4
33613: MINUS
33614: ST_TO_ADDR
// if y - r < 0 then
33615: LD_VAR 0 3
33619: PUSH
33620: LD_VAR 0 4
33624: MINUS
33625: PUSH
33626: LD_INT 0
33628: LESS
33629: IFFALSE 33641
// min_y := 0 else
33631: LD_ADDR_VAR 0 8
33635: PUSH
33636: LD_INT 0
33638: ST_TO_ADDR
33639: GO 33657
// min_y := y - r ;
33641: LD_ADDR_VAR 0 8
33645: PUSH
33646: LD_VAR 0 3
33650: PUSH
33651: LD_VAR 0 4
33655: MINUS
33656: ST_TO_ADDR
// max_x := x + r ;
33657: LD_ADDR_VAR 0 9
33661: PUSH
33662: LD_VAR 0 2
33666: PUSH
33667: LD_VAR 0 4
33671: PLUS
33672: ST_TO_ADDR
// max_y := y + r ;
33673: LD_ADDR_VAR 0 10
33677: PUSH
33678: LD_VAR 0 3
33682: PUSH
33683: LD_VAR 0 4
33687: PLUS
33688: ST_TO_ADDR
// for _x = min_x to max_x do
33689: LD_ADDR_VAR 0 11
33693: PUSH
33694: DOUBLE
33695: LD_VAR 0 7
33699: DEC
33700: ST_TO_ADDR
33701: LD_VAR 0 9
33705: PUSH
33706: FOR_TO
33707: IFFALSE 33826
// for _y = min_y to max_y do
33709: LD_ADDR_VAR 0 12
33713: PUSH
33714: DOUBLE
33715: LD_VAR 0 8
33719: DEC
33720: ST_TO_ADDR
33721: LD_VAR 0 10
33725: PUSH
33726: FOR_TO
33727: IFFALSE 33822
// begin if not ValidHex ( _x , _y ) then
33729: LD_VAR 0 11
33733: PPUSH
33734: LD_VAR 0 12
33738: PPUSH
33739: CALL_OW 488
33743: NOT
33744: IFFALSE 33748
// continue ;
33746: GO 33726
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33748: LD_VAR 0 11
33752: PPUSH
33753: LD_VAR 0 12
33757: PPUSH
33758: CALL_OW 351
33762: IFFALSE 33780
33764: PUSH
33765: LD_VAR 0 11
33769: PPUSH
33770: LD_VAR 0 12
33774: PPUSH
33775: CALL_OW 554
33779: AND
33780: IFFALSE 33820
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33782: LD_ADDR_VAR 0 13
33786: PUSH
33787: LD_VAR 0 13
33791: PPUSH
33792: LD_VAR 0 13
33796: PUSH
33797: LD_INT 1
33799: PLUS
33800: PPUSH
33801: LD_VAR 0 11
33805: PUSH
33806: LD_VAR 0 12
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PPUSH
33815: CALL_OW 2
33819: ST_TO_ADDR
// end ;
33820: GO 33726
33822: POP
33823: POP
33824: GO 33706
33826: POP
33827: POP
// if not list then
33828: LD_VAR 0 13
33832: NOT
33833: IFFALSE 33837
// exit ;
33835: GO 34083
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
33837: LD_ADDR_VAR 0 13
33841: PUSH
33842: LD_VAR 0 1
33846: PPUSH
33847: LD_VAR 0 13
33851: PPUSH
33852: LD_INT 1
33854: PPUSH
33855: LD_INT 1
33857: PPUSH
33858: CALL 42925 0 4
33862: ST_TO_ADDR
// ComStop ( flame ) ;
33863: LD_VAR 0 1
33867: PPUSH
33868: CALL_OW 141
// for i in list do
33872: LD_ADDR_VAR 0 6
33876: PUSH
33877: LD_VAR 0 13
33881: PUSH
33882: FOR_IN
33883: IFFALSE 33914
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
33885: LD_VAR 0 1
33889: PPUSH
33890: LD_VAR 0 6
33894: PUSH
33895: LD_INT 1
33897: ARRAY
33898: PPUSH
33899: LD_VAR 0 6
33903: PUSH
33904: LD_INT 2
33906: ARRAY
33907: PPUSH
33908: CALL_OW 176
33912: GO 33882
33914: POP
33915: POP
// repeat wait ( 0 0$1 ) ;
33916: LD_INT 35
33918: PPUSH
33919: CALL_OW 67
// task := GetTaskList ( flame ) ;
33923: LD_ADDR_VAR 0 14
33927: PUSH
33928: LD_VAR 0 1
33932: PPUSH
33933: CALL_OW 437
33937: ST_TO_ADDR
// if not task then
33938: LD_VAR 0 14
33942: NOT
33943: IFFALSE 33947
// exit ;
33945: GO 34083
// if task [ 1 ] [ 1 ] <> | then
33947: LD_VAR 0 14
33951: PUSH
33952: LD_INT 1
33954: ARRAY
33955: PUSH
33956: LD_INT 1
33958: ARRAY
33959: PUSH
33960: LD_STRING |
33962: NONEQUAL
33963: IFFALSE 33967
// exit ;
33965: GO 34083
// _x := task [ 1 ] [ 2 ] ;
33967: LD_ADDR_VAR 0 11
33971: PUSH
33972: LD_VAR 0 14
33976: PUSH
33977: LD_INT 1
33979: ARRAY
33980: PUSH
33981: LD_INT 2
33983: ARRAY
33984: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
33985: LD_ADDR_VAR 0 12
33989: PUSH
33990: LD_VAR 0 14
33994: PUSH
33995: LD_INT 1
33997: ARRAY
33998: PUSH
33999: LD_INT 3
34001: ARRAY
34002: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
34003: LD_VAR 0 11
34007: PPUSH
34008: LD_VAR 0 12
34012: PPUSH
34013: CALL_OW 351
34017: NOT
34018: IFTRUE 34037
34020: PUSH
34021: LD_VAR 0 11
34025: PPUSH
34026: LD_VAR 0 12
34030: PPUSH
34031: CALL_OW 554
34035: NOT
34036: OR
34037: IFFALSE 34071
// begin task := Delete ( task , 1 ) ;
34039: LD_ADDR_VAR 0 14
34043: PUSH
34044: LD_VAR 0 14
34048: PPUSH
34049: LD_INT 1
34051: PPUSH
34052: CALL_OW 3
34056: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
34057: LD_VAR 0 1
34061: PPUSH
34062: LD_VAR 0 14
34066: PPUSH
34067: CALL_OW 446
// end ; until not HasTask ( flame ) ;
34071: LD_VAR 0 1
34075: PPUSH
34076: CALL_OW 314
34080: NOT
34081: IFFALSE 33916
// end ;
34083: LD_VAR 0 5
34087: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34088: LD_EXP 100
34092: NOT
34093: IFFALSE 34143
34095: GO 34097
34097: DISABLE
// begin initHack := true ;
34098: LD_ADDR_EXP 100
34102: PUSH
34103: LD_INT 1
34105: ST_TO_ADDR
// hackTanks := [ ] ;
34106: LD_ADDR_EXP 101
34110: PUSH
34111: EMPTY
34112: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34113: LD_ADDR_EXP 102
34117: PUSH
34118: EMPTY
34119: ST_TO_ADDR
// hackLimit := 3 ;
34120: LD_ADDR_EXP 103
34124: PUSH
34125: LD_INT 3
34127: ST_TO_ADDR
// hackDist := 12 ;
34128: LD_ADDR_EXP 104
34132: PUSH
34133: LD_INT 12
34135: ST_TO_ADDR
// hackCounter := [ ] ;
34136: LD_ADDR_EXP 105
34140: PUSH
34141: EMPTY
34142: ST_TO_ADDR
// end ;
34143: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34144: LD_EXP 100
34148: IFFALSE 34166
34150: PUSH
34151: LD_INT 34
34153: PUSH
34154: LD_INT 99
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PPUSH
34161: CALL_OW 69
34165: AND
34166: IFFALSE 34419
34168: GO 34170
34170: DISABLE
34171: LD_INT 0
34173: PPUSH
34174: PPUSH
// begin enable ;
34175: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34176: LD_ADDR_VAR 0 1
34180: PUSH
34181: LD_INT 34
34183: PUSH
34184: LD_INT 99
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PPUSH
34191: CALL_OW 69
34195: PUSH
34196: FOR_IN
34197: IFFALSE 34417
// begin if not i in hackTanks then
34199: LD_VAR 0 1
34203: PUSH
34204: LD_EXP 101
34208: IN
34209: NOT
34210: IFFALSE 34293
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34212: LD_ADDR_EXP 101
34216: PUSH
34217: LD_EXP 101
34221: PPUSH
34222: LD_EXP 101
34226: PUSH
34227: LD_INT 1
34229: PLUS
34230: PPUSH
34231: LD_VAR 0 1
34235: PPUSH
34236: CALL_OW 1
34240: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34241: LD_ADDR_EXP 102
34245: PUSH
34246: LD_EXP 102
34250: PPUSH
34251: LD_EXP 102
34255: PUSH
34256: LD_INT 1
34258: PLUS
34259: PPUSH
34260: EMPTY
34261: PPUSH
34262: CALL_OW 1
34266: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34267: LD_ADDR_EXP 105
34271: PUSH
34272: LD_EXP 105
34276: PPUSH
34277: LD_EXP 105
34281: PUSH
34282: LD_INT 1
34284: PLUS
34285: PPUSH
34286: EMPTY
34287: PPUSH
34288: CALL_OW 1
34292: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34293: LD_VAR 0 1
34297: PPUSH
34298: CALL_OW 302
34302: NOT
34303: IFFALSE 34316
// begin HackUnlinkAll ( i ) ;
34305: LD_VAR 0 1
34309: PPUSH
34310: CALL 34422 0 1
// continue ;
34314: GO 34196
// end ; HackCheckCapturedStatus ( i ) ;
34316: LD_VAR 0 1
34320: PPUSH
34321: CALL 34867 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34325: LD_ADDR_VAR 0 2
34329: PUSH
34330: LD_INT 81
34332: PUSH
34333: LD_VAR 0 1
34337: PPUSH
34338: CALL_OW 255
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 33
34349: PUSH
34350: LD_INT 3
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 91
34359: PUSH
34360: LD_VAR 0 1
34364: PUSH
34365: LD_EXP 104
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 50
34377: PUSH
34378: EMPTY
34379: LIST
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: PPUSH
34387: CALL_OW 69
34391: ST_TO_ADDR
// if not tmp then
34392: LD_VAR 0 2
34396: NOT
34397: IFFALSE 34401
// continue ;
34399: GO 34196
// HackLink ( i , tmp ) ;
34401: LD_VAR 0 1
34405: PPUSH
34406: LD_VAR 0 2
34410: PPUSH
34411: CALL 34558 0 2
// end ;
34415: GO 34196
34417: POP
34418: POP
// end ;
34419: PPOPN 2
34421: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34422: LD_INT 0
34424: PPUSH
34425: PPUSH
34426: PPUSH
// if not hack in hackTanks then
34427: LD_VAR 0 1
34431: PUSH
34432: LD_EXP 101
34436: IN
34437: NOT
34438: IFFALSE 34442
// exit ;
34440: GO 34553
// index := GetElementIndex ( hackTanks , hack ) ;
34442: LD_ADDR_VAR 0 4
34446: PUSH
34447: LD_EXP 101
34451: PPUSH
34452: LD_VAR 0 1
34456: PPUSH
34457: CALL 42220 0 2
34461: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34462: LD_EXP 102
34466: PUSH
34467: LD_VAR 0 4
34471: ARRAY
34472: IFFALSE 34553
// begin for i in hackTanksCaptured [ index ] do
34474: LD_ADDR_VAR 0 3
34478: PUSH
34479: LD_EXP 102
34483: PUSH
34484: LD_VAR 0 4
34488: ARRAY
34489: PUSH
34490: FOR_IN
34491: IFFALSE 34517
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34493: LD_VAR 0 3
34497: PUSH
34498: LD_INT 1
34500: ARRAY
34501: PPUSH
34502: LD_VAR 0 3
34506: PUSH
34507: LD_INT 2
34509: ARRAY
34510: PPUSH
34511: CALL_OW 235
34515: GO 34490
34517: POP
34518: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34519: LD_ADDR_EXP 102
34523: PUSH
34524: LD_EXP 102
34528: PPUSH
34529: LD_VAR 0 4
34533: PPUSH
34534: EMPTY
34535: PPUSH
34536: CALL_OW 1
34540: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34541: LD_VAR 0 1
34545: PPUSH
34546: LD_INT 0
34548: PPUSH
34549: CALL_OW 505
// end ; end ;
34553: LD_VAR 0 2
34557: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34558: LD_INT 0
34560: PPUSH
34561: PPUSH
34562: PPUSH
// if not hack in hackTanks or not vehicles then
34563: LD_VAR 0 1
34567: PUSH
34568: LD_EXP 101
34572: IN
34573: NOT
34574: IFTRUE 34583
34576: PUSH
34577: LD_VAR 0 2
34581: NOT
34582: OR
34583: IFFALSE 34587
// exit ;
34585: GO 34862
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34587: LD_ADDR_VAR 0 2
34591: PUSH
34592: LD_VAR 0 1
34596: PPUSH
34597: LD_VAR 0 2
34601: PPUSH
34602: LD_INT 1
34604: PPUSH
34605: LD_INT 1
34607: PPUSH
34608: CALL 42872 0 4
34612: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34613: LD_ADDR_VAR 0 5
34617: PUSH
34618: LD_EXP 101
34622: PPUSH
34623: LD_VAR 0 1
34627: PPUSH
34628: CALL 42220 0 2
34632: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34633: LD_EXP 102
34637: PUSH
34638: LD_VAR 0 5
34642: ARRAY
34643: PUSH
34644: LD_EXP 103
34648: LESS
34649: IFFALSE 34838
// begin for i := 1 to vehicles do
34651: LD_ADDR_VAR 0 4
34655: PUSH
34656: DOUBLE
34657: LD_INT 1
34659: DEC
34660: ST_TO_ADDR
34661: LD_VAR 0 2
34665: PUSH
34666: FOR_TO
34667: IFFALSE 34836
// begin if hackTanksCaptured [ index ] = hackLimit then
34669: LD_EXP 102
34673: PUSH
34674: LD_VAR 0 5
34678: ARRAY
34679: PUSH
34680: LD_EXP 103
34684: EQUAL
34685: IFFALSE 34689
// break ;
34687: GO 34836
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34689: LD_ADDR_EXP 105
34693: PUSH
34694: LD_EXP 105
34698: PPUSH
34699: LD_VAR 0 5
34703: PPUSH
34704: LD_EXP 105
34708: PUSH
34709: LD_VAR 0 5
34713: ARRAY
34714: PUSH
34715: LD_INT 1
34717: PLUS
34718: PPUSH
34719: CALL_OW 1
34723: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34724: LD_ADDR_EXP 102
34728: PUSH
34729: LD_EXP 102
34733: PPUSH
34734: LD_VAR 0 5
34738: PUSH
34739: LD_EXP 102
34743: PUSH
34744: LD_VAR 0 5
34748: ARRAY
34749: PUSH
34750: LD_INT 1
34752: PLUS
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PPUSH
34758: LD_VAR 0 2
34762: PUSH
34763: LD_VAR 0 4
34767: ARRAY
34768: PUSH
34769: LD_VAR 0 2
34773: PUSH
34774: LD_VAR 0 4
34778: ARRAY
34779: PPUSH
34780: CALL_OW 255
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PPUSH
34789: CALL 42437 0 3
34793: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34794: LD_VAR 0 2
34798: PUSH
34799: LD_VAR 0 4
34803: ARRAY
34804: PPUSH
34805: LD_VAR 0 1
34809: PPUSH
34810: CALL_OW 255
34814: PPUSH
34815: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34819: LD_VAR 0 2
34823: PUSH
34824: LD_VAR 0 4
34828: ARRAY
34829: PPUSH
34830: CALL_OW 141
// end ;
34834: GO 34666
34836: POP
34837: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34838: LD_VAR 0 1
34842: PPUSH
34843: LD_EXP 102
34847: PUSH
34848: LD_VAR 0 5
34852: ARRAY
34853: PUSH
34854: LD_INT 0
34856: PLUS
34857: PPUSH
34858: CALL_OW 505
// end ;
34862: LD_VAR 0 3
34866: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34867: LD_INT 0
34869: PPUSH
34870: PPUSH
34871: PPUSH
34872: PPUSH
// if not hack in hackTanks then
34873: LD_VAR 0 1
34877: PUSH
34878: LD_EXP 101
34882: IN
34883: NOT
34884: IFFALSE 34888
// exit ;
34886: GO 35132
// index := GetElementIndex ( hackTanks , hack ) ;
34888: LD_ADDR_VAR 0 4
34892: PUSH
34893: LD_EXP 101
34897: PPUSH
34898: LD_VAR 0 1
34902: PPUSH
34903: CALL 42220 0 2
34907: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34908: LD_ADDR_VAR 0 3
34912: PUSH
34913: DOUBLE
34914: LD_EXP 102
34918: PUSH
34919: LD_VAR 0 4
34923: ARRAY
34924: INC
34925: ST_TO_ADDR
34926: LD_INT 1
34928: PUSH
34929: FOR_DOWNTO
34930: IFFALSE 35106
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34932: LD_ADDR_VAR 0 5
34936: PUSH
34937: LD_EXP 102
34941: PUSH
34942: LD_VAR 0 4
34946: ARRAY
34947: PUSH
34948: LD_VAR 0 3
34952: ARRAY
34953: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34954: LD_VAR 0 5
34958: PUSH
34959: LD_INT 1
34961: ARRAY
34962: PPUSH
34963: CALL_OW 302
34967: NOT
34968: IFTRUE 34996
34970: PUSH
34971: LD_VAR 0 5
34975: PUSH
34976: LD_INT 1
34978: ARRAY
34979: PPUSH
34980: CALL_OW 255
34984: PUSH
34985: LD_VAR 0 1
34989: PPUSH
34990: CALL_OW 255
34994: NONEQUAL
34995: OR
34996: IFFALSE 35104
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34998: LD_VAR 0 5
35002: PUSH
35003: LD_INT 1
35005: ARRAY
35006: PPUSH
35007: CALL_OW 305
35011: IFFALSE 35039
35013: PUSH
35014: LD_VAR 0 5
35018: PUSH
35019: LD_INT 1
35021: ARRAY
35022: PPUSH
35023: CALL_OW 255
35027: PUSH
35028: LD_VAR 0 1
35032: PPUSH
35033: CALL_OW 255
35037: EQUAL
35038: AND
35039: IFFALSE 35063
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35041: LD_VAR 0 5
35045: PUSH
35046: LD_INT 1
35048: ARRAY
35049: PPUSH
35050: LD_VAR 0 5
35054: PUSH
35055: LD_INT 2
35057: ARRAY
35058: PPUSH
35059: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35063: LD_ADDR_EXP 102
35067: PUSH
35068: LD_EXP 102
35072: PPUSH
35073: LD_VAR 0 4
35077: PPUSH
35078: LD_EXP 102
35082: PUSH
35083: LD_VAR 0 4
35087: ARRAY
35088: PPUSH
35089: LD_VAR 0 3
35093: PPUSH
35094: CALL_OW 3
35098: PPUSH
35099: CALL_OW 1
35103: ST_TO_ADDR
// end ; end ;
35104: GO 34929
35106: POP
35107: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35108: LD_VAR 0 1
35112: PPUSH
35113: LD_EXP 102
35117: PUSH
35118: LD_VAR 0 4
35122: ARRAY
35123: PUSH
35124: LD_INT 0
35126: PLUS
35127: PPUSH
35128: CALL_OW 505
// end ;
35132: LD_VAR 0 2
35136: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35137: LD_INT 0
35139: PPUSH
35140: PPUSH
35141: PPUSH
35142: PPUSH
// if not hack in hackTanks then
35143: LD_VAR 0 1
35147: PUSH
35148: LD_EXP 101
35152: IN
35153: NOT
35154: IFFALSE 35158
// exit ;
35156: GO 35243
// index := GetElementIndex ( hackTanks , hack ) ;
35158: LD_ADDR_VAR 0 5
35162: PUSH
35163: LD_EXP 101
35167: PPUSH
35168: LD_VAR 0 1
35172: PPUSH
35173: CALL 42220 0 2
35177: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35178: LD_ADDR_VAR 0 4
35182: PUSH
35183: DOUBLE
35184: LD_INT 1
35186: DEC
35187: ST_TO_ADDR
35188: LD_EXP 102
35192: PUSH
35193: LD_VAR 0 5
35197: ARRAY
35198: PUSH
35199: FOR_TO
35200: IFFALSE 35241
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35202: LD_EXP 102
35206: PUSH
35207: LD_VAR 0 5
35211: ARRAY
35212: PUSH
35213: LD_VAR 0 4
35217: ARRAY
35218: PUSH
35219: LD_INT 1
35221: ARRAY
35222: PUSH
35223: LD_VAR 0 2
35227: EQUAL
35228: IFFALSE 35239
// KillUnit ( vehicle ) ;
35230: LD_VAR 0 2
35234: PPUSH
35235: CALL_OW 66
35239: GO 35199
35241: POP
35242: POP
// end ;
35243: LD_VAR 0 3
35247: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35248: LD_EXP 106
35252: NOT
35253: IFFALSE 35288
35255: GO 35257
35257: DISABLE
// begin initMiner := true ;
35258: LD_ADDR_EXP 106
35262: PUSH
35263: LD_INT 1
35265: ST_TO_ADDR
// minersList := [ ] ;
35266: LD_ADDR_EXP 107
35270: PUSH
35271: EMPTY
35272: ST_TO_ADDR
// minerMinesList := [ ] ;
35273: LD_ADDR_EXP 108
35277: PUSH
35278: EMPTY
35279: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35280: LD_ADDR_EXP 109
35284: PUSH
35285: LD_INT 5
35287: ST_TO_ADDR
// end ;
35288: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35289: LD_EXP 106
35293: IFFALSE 35311
35295: PUSH
35296: LD_INT 34
35298: PUSH
35299: LD_INT 81
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PPUSH
35306: CALL_OW 69
35310: AND
35311: IFFALSE 35774
35313: GO 35315
35315: DISABLE
35316: LD_INT 0
35318: PPUSH
35319: PPUSH
35320: PPUSH
35321: PPUSH
// begin enable ;
35322: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35323: LD_ADDR_VAR 0 1
35327: PUSH
35328: LD_INT 34
35330: PUSH
35331: LD_INT 81
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PPUSH
35338: CALL_OW 69
35342: PUSH
35343: FOR_IN
35344: IFFALSE 35416
// begin if not i in minersList then
35346: LD_VAR 0 1
35350: PUSH
35351: LD_EXP 107
35355: IN
35356: NOT
35357: IFFALSE 35414
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35359: LD_ADDR_EXP 107
35363: PUSH
35364: LD_EXP 107
35368: PPUSH
35369: LD_EXP 107
35373: PUSH
35374: LD_INT 1
35376: PLUS
35377: PPUSH
35378: LD_VAR 0 1
35382: PPUSH
35383: CALL_OW 1
35387: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35388: LD_ADDR_EXP 108
35392: PUSH
35393: LD_EXP 108
35397: PPUSH
35398: LD_EXP 108
35402: PUSH
35403: LD_INT 1
35405: PLUS
35406: PPUSH
35407: EMPTY
35408: PPUSH
35409: CALL_OW 1
35413: ST_TO_ADDR
// end end ;
35414: GO 35343
35416: POP
35417: POP
// for i := minerMinesList downto 1 do
35418: LD_ADDR_VAR 0 1
35422: PUSH
35423: DOUBLE
35424: LD_EXP 108
35428: INC
35429: ST_TO_ADDR
35430: LD_INT 1
35432: PUSH
35433: FOR_DOWNTO
35434: IFFALSE 35772
// begin if IsLive ( minersList [ i ] ) then
35436: LD_EXP 107
35440: PUSH
35441: LD_VAR 0 1
35445: ARRAY
35446: PPUSH
35447: CALL_OW 300
35451: IFFALSE 35479
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35453: LD_EXP 107
35457: PUSH
35458: LD_VAR 0 1
35462: ARRAY
35463: PPUSH
35464: LD_EXP 108
35468: PUSH
35469: LD_VAR 0 1
35473: ARRAY
35474: PPUSH
35475: CALL_OW 505
// if not minerMinesList [ i ] then
35479: LD_EXP 108
35483: PUSH
35484: LD_VAR 0 1
35488: ARRAY
35489: NOT
35490: IFFALSE 35494
// continue ;
35492: GO 35433
// for j := minerMinesList [ i ] downto 1 do
35494: LD_ADDR_VAR 0 2
35498: PUSH
35499: DOUBLE
35500: LD_EXP 108
35504: PUSH
35505: LD_VAR 0 1
35509: ARRAY
35510: INC
35511: ST_TO_ADDR
35512: LD_INT 1
35514: PUSH
35515: FOR_DOWNTO
35516: IFFALSE 35768
// begin side := GetSide ( minersList [ i ] ) ;
35518: LD_ADDR_VAR 0 3
35522: PUSH
35523: LD_EXP 107
35527: PUSH
35528: LD_VAR 0 1
35532: ARRAY
35533: PPUSH
35534: CALL_OW 255
35538: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35539: LD_ADDR_VAR 0 4
35543: PUSH
35544: LD_EXP 108
35548: PUSH
35549: LD_VAR 0 1
35553: ARRAY
35554: PUSH
35555: LD_VAR 0 2
35559: ARRAY
35560: PUSH
35561: LD_INT 1
35563: ARRAY
35564: PPUSH
35565: LD_EXP 108
35569: PUSH
35570: LD_VAR 0 1
35574: ARRAY
35575: PUSH
35576: LD_VAR 0 2
35580: ARRAY
35581: PUSH
35582: LD_INT 2
35584: ARRAY
35585: PPUSH
35586: CALL_OW 428
35590: ST_TO_ADDR
// if not tmp then
35591: LD_VAR 0 4
35595: NOT
35596: IFFALSE 35600
// continue ;
35598: GO 35515
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35600: LD_VAR 0 4
35604: PUSH
35605: LD_INT 81
35607: PUSH
35608: LD_VAR 0 3
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PPUSH
35617: CALL_OW 69
35621: IN
35622: IFFALSE 35672
35624: PUSH
35625: LD_EXP 108
35629: PUSH
35630: LD_VAR 0 1
35634: ARRAY
35635: PUSH
35636: LD_VAR 0 2
35640: ARRAY
35641: PUSH
35642: LD_INT 1
35644: ARRAY
35645: PPUSH
35646: LD_EXP 108
35650: PUSH
35651: LD_VAR 0 1
35655: ARRAY
35656: PUSH
35657: LD_VAR 0 2
35661: ARRAY
35662: PUSH
35663: LD_INT 2
35665: ARRAY
35666: PPUSH
35667: CALL_OW 458
35671: AND
35672: IFFALSE 35766
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35674: LD_EXP 108
35678: PUSH
35679: LD_VAR 0 1
35683: ARRAY
35684: PUSH
35685: LD_VAR 0 2
35689: ARRAY
35690: PUSH
35691: LD_INT 1
35693: ARRAY
35694: PPUSH
35695: LD_EXP 108
35699: PUSH
35700: LD_VAR 0 1
35704: ARRAY
35705: PUSH
35706: LD_VAR 0 2
35710: ARRAY
35711: PUSH
35712: LD_INT 2
35714: ARRAY
35715: PPUSH
35716: LD_VAR 0 3
35720: PPUSH
35721: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35725: LD_ADDR_EXP 108
35729: PUSH
35730: LD_EXP 108
35734: PPUSH
35735: LD_VAR 0 1
35739: PPUSH
35740: LD_EXP 108
35744: PUSH
35745: LD_VAR 0 1
35749: ARRAY
35750: PPUSH
35751: LD_VAR 0 2
35755: PPUSH
35756: CALL_OW 3
35760: PPUSH
35761: CALL_OW 1
35765: ST_TO_ADDR
// end ; end ;
35766: GO 35515
35768: POP
35769: POP
// end ;
35770: GO 35433
35772: POP
35773: POP
// end ;
35774: PPOPN 4
35776: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35777: LD_INT 0
35779: PPUSH
35780: PPUSH
// result := false ;
35781: LD_ADDR_VAR 0 4
35785: PUSH
35786: LD_INT 0
35788: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35789: LD_VAR 0 1
35793: PPUSH
35794: CALL_OW 264
35798: PUSH
35799: LD_INT 81
35801: EQUAL
35802: NOT
35803: IFFALSE 35807
// exit ;
35805: GO 36051
// index := GetElementIndex ( minersList , unit ) ;
35807: LD_ADDR_VAR 0 5
35811: PUSH
35812: LD_EXP 107
35816: PPUSH
35817: LD_VAR 0 1
35821: PPUSH
35822: CALL 42220 0 2
35826: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35827: LD_EXP 108
35831: PUSH
35832: LD_VAR 0 5
35836: ARRAY
35837: PUSH
35838: LD_EXP 109
35842: GREATEREQUAL
35843: IFFALSE 35847
// exit ;
35845: GO 36051
// ComMoveXY ( unit , x , y ) ;
35847: LD_VAR 0 1
35851: PPUSH
35852: LD_VAR 0 2
35856: PPUSH
35857: LD_VAR 0 3
35861: PPUSH
35862: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35866: LD_INT 35
35868: PPUSH
35869: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35873: LD_VAR 0 1
35877: PPUSH
35878: LD_VAR 0 2
35882: PPUSH
35883: LD_VAR 0 3
35887: PPUSH
35888: CALL 74266 0 3
35892: NOT
35893: IFFALSE 35906
35895: PUSH
35896: LD_VAR 0 1
35900: PPUSH
35901: CALL_OW 314
35905: AND
35906: IFFALSE 35910
// exit ;
35908: GO 36051
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35910: LD_VAR 0 2
35914: PPUSH
35915: LD_VAR 0 3
35919: PPUSH
35920: CALL_OW 428
35924: PUSH
35925: LD_VAR 0 1
35929: EQUAL
35930: IFFALSE 35944
35932: PUSH
35933: LD_VAR 0 1
35937: PPUSH
35938: CALL_OW 314
35942: NOT
35943: AND
35944: IFFALSE 35866
// PlaySoundXY ( x , y , PlantMine ) ;
35946: LD_VAR 0 2
35950: PPUSH
35951: LD_VAR 0 3
35955: PPUSH
35956: LD_STRING PlantMine
35958: PPUSH
35959: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35963: LD_VAR 0 2
35967: PPUSH
35968: LD_VAR 0 3
35972: PPUSH
35973: LD_VAR 0 1
35977: PPUSH
35978: CALL_OW 255
35982: PPUSH
35983: LD_INT 0
35985: PPUSH
35986: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35990: LD_ADDR_EXP 108
35994: PUSH
35995: LD_EXP 108
35999: PPUSH
36000: LD_VAR 0 5
36004: PUSH
36005: LD_EXP 108
36009: PUSH
36010: LD_VAR 0 5
36014: ARRAY
36015: PUSH
36016: LD_INT 1
36018: PLUS
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PPUSH
36024: LD_VAR 0 2
36028: PUSH
36029: LD_VAR 0 3
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PPUSH
36038: CALL 42437 0 3
36042: ST_TO_ADDR
// result := true ;
36043: LD_ADDR_VAR 0 4
36047: PUSH
36048: LD_INT 1
36050: ST_TO_ADDR
// end ;
36051: LD_VAR 0 4
36055: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36056: LD_INT 0
36058: PPUSH
36059: PPUSH
36060: PPUSH
// if not unit in minersList then
36061: LD_VAR 0 1
36065: PUSH
36066: LD_EXP 107
36070: IN
36071: NOT
36072: IFFALSE 36076
// exit ;
36074: GO 36470
// index := GetElementIndex ( minersList , unit ) ;
36076: LD_ADDR_VAR 0 6
36080: PUSH
36081: LD_EXP 107
36085: PPUSH
36086: LD_VAR 0 1
36090: PPUSH
36091: CALL 42220 0 2
36095: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36096: LD_ADDR_VAR 0 5
36100: PUSH
36101: DOUBLE
36102: LD_EXP 108
36106: PUSH
36107: LD_VAR 0 6
36111: ARRAY
36112: INC
36113: ST_TO_ADDR
36114: LD_INT 1
36116: PUSH
36117: FOR_DOWNTO
36118: IFFALSE 36281
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36120: LD_EXP 108
36124: PUSH
36125: LD_VAR 0 6
36129: ARRAY
36130: PUSH
36131: LD_VAR 0 5
36135: ARRAY
36136: PUSH
36137: LD_INT 1
36139: ARRAY
36140: PUSH
36141: LD_VAR 0 2
36145: EQUAL
36146: IFFALSE 36176
36148: PUSH
36149: LD_EXP 108
36153: PUSH
36154: LD_VAR 0 6
36158: ARRAY
36159: PUSH
36160: LD_VAR 0 5
36164: ARRAY
36165: PUSH
36166: LD_INT 2
36168: ARRAY
36169: PUSH
36170: LD_VAR 0 3
36174: EQUAL
36175: AND
36176: IFFALSE 36279
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36178: LD_EXP 108
36182: PUSH
36183: LD_VAR 0 6
36187: ARRAY
36188: PUSH
36189: LD_VAR 0 5
36193: ARRAY
36194: PUSH
36195: LD_INT 1
36197: ARRAY
36198: PPUSH
36199: LD_EXP 108
36203: PUSH
36204: LD_VAR 0 6
36208: ARRAY
36209: PUSH
36210: LD_VAR 0 5
36214: ARRAY
36215: PUSH
36216: LD_INT 2
36218: ARRAY
36219: PPUSH
36220: LD_VAR 0 1
36224: PPUSH
36225: CALL_OW 255
36229: PPUSH
36230: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36234: LD_ADDR_EXP 108
36238: PUSH
36239: LD_EXP 108
36243: PPUSH
36244: LD_VAR 0 6
36248: PPUSH
36249: LD_EXP 108
36253: PUSH
36254: LD_VAR 0 6
36258: ARRAY
36259: PPUSH
36260: LD_VAR 0 5
36264: PPUSH
36265: CALL_OW 3
36269: PPUSH
36270: CALL_OW 1
36274: ST_TO_ADDR
// exit ;
36275: POP
36276: POP
36277: GO 36470
// end ; end ;
36279: GO 36117
36281: POP
36282: POP
// for i := minerMinesList [ index ] downto 1 do
36283: LD_ADDR_VAR 0 5
36287: PUSH
36288: DOUBLE
36289: LD_EXP 108
36293: PUSH
36294: LD_VAR 0 6
36298: ARRAY
36299: INC
36300: ST_TO_ADDR
36301: LD_INT 1
36303: PUSH
36304: FOR_DOWNTO
36305: IFFALSE 36468
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36307: LD_EXP 108
36311: PUSH
36312: LD_VAR 0 6
36316: ARRAY
36317: PUSH
36318: LD_VAR 0 5
36322: ARRAY
36323: PUSH
36324: LD_INT 1
36326: ARRAY
36327: PPUSH
36328: LD_EXP 108
36332: PUSH
36333: LD_VAR 0 6
36337: ARRAY
36338: PUSH
36339: LD_VAR 0 5
36343: ARRAY
36344: PUSH
36345: LD_INT 2
36347: ARRAY
36348: PPUSH
36349: LD_VAR 0 2
36353: PPUSH
36354: LD_VAR 0 3
36358: PPUSH
36359: CALL_OW 298
36363: PUSH
36364: LD_INT 6
36366: LESS
36367: IFFALSE 36466
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36369: LD_EXP 108
36373: PUSH
36374: LD_VAR 0 6
36378: ARRAY
36379: PUSH
36380: LD_VAR 0 5
36384: ARRAY
36385: PUSH
36386: LD_INT 1
36388: ARRAY
36389: PPUSH
36390: LD_EXP 108
36394: PUSH
36395: LD_VAR 0 6
36399: ARRAY
36400: PUSH
36401: LD_VAR 0 5
36405: ARRAY
36406: PUSH
36407: LD_INT 2
36409: ARRAY
36410: PPUSH
36411: LD_VAR 0 1
36415: PPUSH
36416: CALL_OW 255
36420: PPUSH
36421: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36425: LD_ADDR_EXP 108
36429: PUSH
36430: LD_EXP 108
36434: PPUSH
36435: LD_VAR 0 6
36439: PPUSH
36440: LD_EXP 108
36444: PUSH
36445: LD_VAR 0 6
36449: ARRAY
36450: PPUSH
36451: LD_VAR 0 5
36455: PPUSH
36456: CALL_OW 3
36460: PPUSH
36461: CALL_OW 1
36465: ST_TO_ADDR
// end ; end ;
36466: GO 36304
36468: POP
36469: POP
// end ;
36470: LD_VAR 0 4
36474: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36475: LD_INT 0
36477: PPUSH
36478: PPUSH
36479: PPUSH
36480: PPUSH
36481: PPUSH
36482: PPUSH
36483: PPUSH
36484: PPUSH
36485: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36486: LD_VAR 0 1
36490: PPUSH
36491: CALL_OW 264
36495: PUSH
36496: LD_INT 81
36498: EQUAL
36499: NOT
36500: IFTRUE 36515
36502: PUSH
36503: LD_VAR 0 1
36507: PUSH
36508: LD_EXP 107
36512: IN
36513: NOT
36514: OR
36515: IFFALSE 36519
// exit ;
36517: GO 36845
// index := GetElementIndex ( minersList , unit ) ;
36519: LD_ADDR_VAR 0 6
36523: PUSH
36524: LD_EXP 107
36528: PPUSH
36529: LD_VAR 0 1
36533: PPUSH
36534: CALL 42220 0 2
36538: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36539: LD_ADDR_VAR 0 8
36543: PUSH
36544: LD_EXP 109
36548: PUSH
36549: LD_EXP 108
36553: PUSH
36554: LD_VAR 0 6
36558: ARRAY
36559: MINUS
36560: ST_TO_ADDR
// if not minesFreeAmount then
36561: LD_VAR 0 8
36565: NOT
36566: IFFALSE 36570
// exit ;
36568: GO 36845
// tmp := [ ] ;
36570: LD_ADDR_VAR 0 7
36574: PUSH
36575: EMPTY
36576: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36577: LD_ADDR_VAR 0 5
36581: PUSH
36582: DOUBLE
36583: LD_INT 1
36585: DEC
36586: ST_TO_ADDR
36587: LD_VAR 0 8
36591: PUSH
36592: FOR_TO
36593: IFFALSE 36792
// begin _d := rand ( 0 , 5 ) ;
36595: LD_ADDR_VAR 0 11
36599: PUSH
36600: LD_INT 0
36602: PPUSH
36603: LD_INT 5
36605: PPUSH
36606: CALL_OW 12
36610: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36611: LD_ADDR_VAR 0 12
36615: PUSH
36616: LD_INT 2
36618: PPUSH
36619: LD_INT 6
36621: PPUSH
36622: CALL_OW 12
36626: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36627: LD_ADDR_VAR 0 9
36631: PUSH
36632: LD_VAR 0 2
36636: PPUSH
36637: LD_VAR 0 11
36641: PPUSH
36642: LD_VAR 0 12
36646: PPUSH
36647: CALL_OW 272
36651: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36652: LD_ADDR_VAR 0 10
36656: PUSH
36657: LD_VAR 0 3
36661: PPUSH
36662: LD_VAR 0 11
36666: PPUSH
36667: LD_VAR 0 12
36671: PPUSH
36672: CALL_OW 273
36676: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36677: LD_VAR 0 9
36681: PPUSH
36682: LD_VAR 0 10
36686: PPUSH
36687: CALL_OW 488
36691: IFFALSE 36715
36693: PUSH
36694: LD_VAR 0 9
36698: PUSH
36699: LD_VAR 0 10
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_VAR 0 7
36712: IN
36713: NOT
36714: AND
36715: IFFALSE 36734
36717: PUSH
36718: LD_VAR 0 9
36722: PPUSH
36723: LD_VAR 0 10
36727: PPUSH
36728: CALL_OW 458
36732: NOT
36733: AND
36734: IFFALSE 36776
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36736: LD_ADDR_VAR 0 7
36740: PUSH
36741: LD_VAR 0 7
36745: PPUSH
36746: LD_VAR 0 7
36750: PUSH
36751: LD_INT 1
36753: PLUS
36754: PPUSH
36755: LD_VAR 0 9
36759: PUSH
36760: LD_VAR 0 10
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PPUSH
36769: CALL_OW 1
36773: ST_TO_ADDR
36774: GO 36790
// i := i - 1 ;
36776: LD_ADDR_VAR 0 5
36780: PUSH
36781: LD_VAR 0 5
36785: PUSH
36786: LD_INT 1
36788: MINUS
36789: ST_TO_ADDR
// end ;
36790: GO 36592
36792: POP
36793: POP
// for i in tmp do
36794: LD_ADDR_VAR 0 5
36798: PUSH
36799: LD_VAR 0 7
36803: PUSH
36804: FOR_IN
36805: IFFALSE 36843
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36807: LD_VAR 0 1
36811: PPUSH
36812: LD_VAR 0 5
36816: PUSH
36817: LD_INT 1
36819: ARRAY
36820: PPUSH
36821: LD_VAR 0 5
36825: PUSH
36826: LD_INT 2
36828: ARRAY
36829: PPUSH
36830: CALL 35777 0 3
36834: NOT
36835: IFFALSE 36841
// exit ;
36837: POP
36838: POP
36839: GO 36845
36841: GO 36804
36843: POP
36844: POP
// end ;
36845: LD_VAR 0 4
36849: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
36850: LD_INT 0
36852: PPUSH
36853: PPUSH
36854: PPUSH
36855: PPUSH
36856: PPUSH
36857: PPUSH
36858: PPUSH
36859: PPUSH
36860: PPUSH
// if GetClass ( unit ) <> class_sniper then
36861: LD_VAR 0 1
36865: PPUSH
36866: CALL_OW 257
36870: PUSH
36871: LD_INT 5
36873: NONEQUAL
36874: IFFALSE 36878
// exit ;
36876: GO 37348
// dist := 8 ;
36878: LD_ADDR_VAR 0 5
36882: PUSH
36883: LD_INT 8
36885: ST_TO_ADDR
// viewRange := 12 ;
36886: LD_ADDR_VAR 0 8
36890: PUSH
36891: LD_INT 12
36893: ST_TO_ADDR
// side := GetSide ( unit ) ;
36894: LD_ADDR_VAR 0 6
36898: PUSH
36899: LD_VAR 0 1
36903: PPUSH
36904: CALL_OW 255
36908: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36909: LD_INT 61
36911: PPUSH
36912: LD_VAR 0 6
36916: PPUSH
36917: CALL_OW 321
36921: PUSH
36922: LD_INT 2
36924: EQUAL
36925: IFFALSE 36935
// viewRange := 16 ;
36927: LD_ADDR_VAR 0 8
36931: PUSH
36932: LD_INT 16
36934: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36935: LD_VAR 0 1
36939: PPUSH
36940: LD_VAR 0 2
36944: PPUSH
36945: LD_VAR 0 3
36949: PPUSH
36950: CALL_OW 297
36954: PUSH
36955: LD_VAR 0 5
36959: GREATER
36960: IFFALSE 37039
// begin ComMoveXY ( unit , x , y ) ;
36962: LD_VAR 0 1
36966: PPUSH
36967: LD_VAR 0 2
36971: PPUSH
36972: LD_VAR 0 3
36976: PPUSH
36977: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36981: LD_INT 35
36983: PPUSH
36984: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36988: LD_VAR 0 1
36992: PPUSH
36993: LD_VAR 0 2
36997: PPUSH
36998: LD_VAR 0 3
37002: PPUSH
37003: CALL 74266 0 3
37007: NOT
37008: IFFALSE 37012
// exit ;
37010: GO 37348
// until GetDistUnitXY ( unit , x , y ) < dist ;
37012: LD_VAR 0 1
37016: PPUSH
37017: LD_VAR 0 2
37021: PPUSH
37022: LD_VAR 0 3
37026: PPUSH
37027: CALL_OW 297
37031: PUSH
37032: LD_VAR 0 5
37036: LESS
37037: IFFALSE 36981
// end ; ComTurnXY ( unit , x , y ) ;
37039: LD_VAR 0 1
37043: PPUSH
37044: LD_VAR 0 2
37048: PPUSH
37049: LD_VAR 0 3
37053: PPUSH
37054: CALL_OW 118
// repeat if Multiplayer then
37058: LD_OWVAR 4
37062: IFFALSE 37073
// wait ( 35 ) else
37064: LD_INT 35
37066: PPUSH
37067: CALL_OW 67
37071: GO 37080
// wait ( 5 ) ;
37073: LD_INT 5
37075: PPUSH
37076: CALL_OW 67
// _d := GetDir ( unit ) ;
37080: LD_ADDR_VAR 0 11
37084: PUSH
37085: LD_VAR 0 1
37089: PPUSH
37090: CALL_OW 254
37094: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
37095: LD_ADDR_VAR 0 7
37099: PUSH
37100: LD_VAR 0 1
37104: PPUSH
37105: CALL_OW 250
37109: PPUSH
37110: LD_VAR 0 1
37114: PPUSH
37115: CALL_OW 251
37119: PPUSH
37120: LD_VAR 0 2
37124: PPUSH
37125: LD_VAR 0 3
37129: PPUSH
37130: CALL 76902 0 4
37134: ST_TO_ADDR
// until dir = _d ;
37135: LD_VAR 0 7
37139: PUSH
37140: LD_VAR 0 11
37144: EQUAL
37145: IFFALSE 37058
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
37147: LD_ADDR_VAR 0 9
37151: PUSH
37152: LD_VAR 0 1
37156: PPUSH
37157: CALL_OW 250
37161: PPUSH
37162: LD_VAR 0 7
37166: PPUSH
37167: LD_VAR 0 5
37171: PPUSH
37172: CALL_OW 272
37176: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
37177: LD_ADDR_VAR 0 10
37181: PUSH
37182: LD_VAR 0 1
37186: PPUSH
37187: CALL_OW 251
37191: PPUSH
37192: LD_VAR 0 7
37196: PPUSH
37197: LD_VAR 0 5
37201: PPUSH
37202: CALL_OW 273
37206: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37207: LD_VAR 0 9
37211: PPUSH
37212: LD_VAR 0 10
37216: PPUSH
37217: CALL_OW 488
37221: NOT
37222: IFFALSE 37226
// exit ;
37224: GO 37348
// ComAnimCustom ( unit , 1 ) ;
37226: LD_VAR 0 1
37230: PPUSH
37231: LD_INT 1
37233: PPUSH
37234: CALL_OW 592
// p := 0 ;
37238: LD_ADDR_VAR 0 12
37242: PUSH
37243: LD_INT 0
37245: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37246: LD_VAR 0 9
37250: PPUSH
37251: LD_VAR 0 10
37255: PPUSH
37256: LD_VAR 0 6
37260: PPUSH
37261: LD_VAR 0 8
37265: PPUSH
37266: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
37270: LD_INT 35
37272: PPUSH
37273: CALL_OW 67
// p := Inc ( p ) ;
37277: LD_ADDR_VAR 0 12
37281: PUSH
37282: LD_VAR 0 12
37286: PPUSH
37287: CALL 76858 0 1
37291: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
37292: LD_VAR 0 12
37296: PUSH
37297: LD_INT 3
37299: EQUAL
37300: IFTRUE 37314
37302: PUSH
37303: LD_VAR 0 1
37307: PPUSH
37308: CALL_OW 302
37312: NOT
37313: OR
37314: IFTRUE 37327
37316: PUSH
37317: LD_VAR 0 1
37321: PPUSH
37322: CALL_OW 301
37326: OR
37327: IFFALSE 37270
// RemoveSeeing ( _x , _y , side ) ;
37329: LD_VAR 0 9
37333: PPUSH
37334: LD_VAR 0 10
37338: PPUSH
37339: LD_VAR 0 6
37343: PPUSH
37344: CALL_OW 331
// end ; end_of_file
37348: LD_VAR 0 4
37352: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37353: LD_INT 0
37355: PPUSH
37356: PPUSH
// if exist_mode then
37357: LD_VAR 0 2
37361: IFFALSE 37407
// begin unit := CreateCharacter ( prefix & ident ) ;
37363: LD_ADDR_VAR 0 5
37367: PUSH
37368: LD_VAR 0 3
37372: PUSH
37373: LD_VAR 0 1
37377: STR
37378: PPUSH
37379: CALL_OW 34
37383: ST_TO_ADDR
// if unit then
37384: LD_VAR 0 5
37388: IFFALSE 37405
// DeleteCharacters ( prefix & ident ) ;
37390: LD_VAR 0 3
37394: PUSH
37395: LD_VAR 0 1
37399: STR
37400: PPUSH
37401: CALL_OW 40
// end else
37405: GO 37422
// unit := NewCharacter ( ident ) ;
37407: LD_ADDR_VAR 0 5
37411: PUSH
37412: LD_VAR 0 1
37416: PPUSH
37417: CALL_OW 25
37421: ST_TO_ADDR
// result := unit ;
37422: LD_ADDR_VAR 0 4
37426: PUSH
37427: LD_VAR 0 5
37431: ST_TO_ADDR
// end ;
37432: LD_VAR 0 4
37436: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
37437: LD_INT 0
37439: PPUSH
37440: PPUSH
// if exist_mode then
37441: LD_VAR 0 2
37445: IFFALSE 37470
// unit := CreateCharacter ( prefix & ident ) else
37447: LD_ADDR_VAR 0 5
37451: PUSH
37452: LD_VAR 0 3
37456: PUSH
37457: LD_VAR 0 1
37461: STR
37462: PPUSH
37463: CALL_OW 34
37467: ST_TO_ADDR
37468: GO 37485
// unit := NewCharacter ( ident ) ;
37470: LD_ADDR_VAR 0 5
37474: PUSH
37475: LD_VAR 0 1
37479: PPUSH
37480: CALL_OW 25
37484: ST_TO_ADDR
// result := unit ;
37485: LD_ADDR_VAR 0 4
37489: PUSH
37490: LD_VAR 0 5
37494: ST_TO_ADDR
// end ;
37495: LD_VAR 0 4
37499: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37500: LD_INT 0
37502: PPUSH
37503: PPUSH
// if not side or not nation then
37504: LD_VAR 0 1
37508: NOT
37509: IFTRUE 37518
37511: PUSH
37512: LD_VAR 0 2
37516: NOT
37517: OR
37518: IFFALSE 37522
// exit ;
37520: GO 38292
// case nation of nation_american :
37522: LD_VAR 0 2
37526: PUSH
37527: LD_INT 1
37529: DOUBLE
37530: EQUAL
37531: IFTRUE 37535
37533: GO 37749
37535: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37536: LD_ADDR_VAR 0 4
37540: PUSH
37541: LD_INT 35
37543: PUSH
37544: LD_INT 45
37546: PUSH
37547: LD_INT 46
37549: PUSH
37550: LD_INT 47
37552: PUSH
37553: LD_INT 82
37555: PUSH
37556: LD_INT 83
37558: PUSH
37559: LD_INT 84
37561: PUSH
37562: LD_INT 85
37564: PUSH
37565: LD_INT 86
37567: PUSH
37568: LD_INT 1
37570: PUSH
37571: LD_INT 2
37573: PUSH
37574: LD_INT 6
37576: PUSH
37577: LD_INT 15
37579: PUSH
37580: LD_INT 16
37582: PUSH
37583: LD_INT 7
37585: PUSH
37586: LD_INT 12
37588: PUSH
37589: LD_INT 13
37591: PUSH
37592: LD_INT 10
37594: PUSH
37595: LD_INT 14
37597: PUSH
37598: LD_INT 20
37600: PUSH
37601: LD_INT 21
37603: PUSH
37604: LD_INT 22
37606: PUSH
37607: LD_INT 25
37609: PUSH
37610: LD_INT 32
37612: PUSH
37613: LD_INT 27
37615: PUSH
37616: LD_INT 36
37618: PUSH
37619: LD_INT 69
37621: PUSH
37622: LD_INT 39
37624: PUSH
37625: LD_INT 34
37627: PUSH
37628: LD_INT 40
37630: PUSH
37631: LD_INT 48
37633: PUSH
37634: LD_INT 49
37636: PUSH
37637: LD_INT 50
37639: PUSH
37640: LD_INT 51
37642: PUSH
37643: LD_INT 52
37645: PUSH
37646: LD_INT 53
37648: PUSH
37649: LD_INT 54
37651: PUSH
37652: LD_INT 55
37654: PUSH
37655: LD_INT 56
37657: PUSH
37658: LD_INT 57
37660: PUSH
37661: LD_INT 58
37663: PUSH
37664: LD_INT 59
37666: PUSH
37667: LD_INT 60
37669: PUSH
37670: LD_INT 61
37672: PUSH
37673: LD_INT 62
37675: PUSH
37676: LD_INT 80
37678: PUSH
37679: LD_INT 82
37681: PUSH
37682: LD_INT 83
37684: PUSH
37685: LD_INT 84
37687: PUSH
37688: LD_INT 85
37690: PUSH
37691: LD_INT 86
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: ST_TO_ADDR
37747: GO 38214
37749: LD_INT 2
37751: DOUBLE
37752: EQUAL
37753: IFTRUE 37757
37755: GO 37983
37757: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37758: LD_ADDR_VAR 0 4
37762: PUSH
37763: LD_INT 35
37765: PUSH
37766: LD_INT 45
37768: PUSH
37769: LD_INT 46
37771: PUSH
37772: LD_INT 47
37774: PUSH
37775: LD_INT 82
37777: PUSH
37778: LD_INT 83
37780: PUSH
37781: LD_INT 84
37783: PUSH
37784: LD_INT 85
37786: PUSH
37787: LD_INT 87
37789: PUSH
37790: LD_INT 70
37792: PUSH
37793: LD_INT 1
37795: PUSH
37796: LD_INT 11
37798: PUSH
37799: LD_INT 3
37801: PUSH
37802: LD_INT 4
37804: PUSH
37805: LD_INT 5
37807: PUSH
37808: LD_INT 6
37810: PUSH
37811: LD_INT 15
37813: PUSH
37814: LD_INT 18
37816: PUSH
37817: LD_INT 7
37819: PUSH
37820: LD_INT 17
37822: PUSH
37823: LD_INT 8
37825: PUSH
37826: LD_INT 20
37828: PUSH
37829: LD_INT 21
37831: PUSH
37832: LD_INT 22
37834: PUSH
37835: LD_INT 72
37837: PUSH
37838: LD_INT 26
37840: PUSH
37841: LD_INT 69
37843: PUSH
37844: LD_INT 39
37846: PUSH
37847: LD_INT 40
37849: PUSH
37850: LD_INT 41
37852: PUSH
37853: LD_INT 42
37855: PUSH
37856: LD_INT 43
37858: PUSH
37859: LD_INT 48
37861: PUSH
37862: LD_INT 49
37864: PUSH
37865: LD_INT 50
37867: PUSH
37868: LD_INT 51
37870: PUSH
37871: LD_INT 52
37873: PUSH
37874: LD_INT 53
37876: PUSH
37877: LD_INT 54
37879: PUSH
37880: LD_INT 55
37882: PUSH
37883: LD_INT 56
37885: PUSH
37886: LD_INT 60
37888: PUSH
37889: LD_INT 61
37891: PUSH
37892: LD_INT 62
37894: PUSH
37895: LD_INT 66
37897: PUSH
37898: LD_INT 67
37900: PUSH
37901: LD_INT 68
37903: PUSH
37904: LD_INT 81
37906: PUSH
37907: LD_INT 82
37909: PUSH
37910: LD_INT 83
37912: PUSH
37913: LD_INT 84
37915: PUSH
37916: LD_INT 85
37918: PUSH
37919: LD_INT 87
37921: PUSH
37922: LD_INT 88
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: ST_TO_ADDR
37981: GO 38214
37983: LD_INT 3
37985: DOUBLE
37986: EQUAL
37987: IFTRUE 37991
37989: GO 38213
37991: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37992: LD_ADDR_VAR 0 4
37996: PUSH
37997: LD_INT 46
37999: PUSH
38000: LD_INT 47
38002: PUSH
38003: LD_INT 1
38005: PUSH
38006: LD_INT 2
38008: PUSH
38009: LD_INT 82
38011: PUSH
38012: LD_INT 83
38014: PUSH
38015: LD_INT 84
38017: PUSH
38018: LD_INT 85
38020: PUSH
38021: LD_INT 86
38023: PUSH
38024: LD_INT 11
38026: PUSH
38027: LD_INT 9
38029: PUSH
38030: LD_INT 20
38032: PUSH
38033: LD_INT 19
38035: PUSH
38036: LD_INT 21
38038: PUSH
38039: LD_INT 24
38041: PUSH
38042: LD_INT 22
38044: PUSH
38045: LD_INT 25
38047: PUSH
38048: LD_INT 28
38050: PUSH
38051: LD_INT 29
38053: PUSH
38054: LD_INT 30
38056: PUSH
38057: LD_INT 31
38059: PUSH
38060: LD_INT 37
38062: PUSH
38063: LD_INT 38
38065: PUSH
38066: LD_INT 32
38068: PUSH
38069: LD_INT 27
38071: PUSH
38072: LD_INT 33
38074: PUSH
38075: LD_INT 69
38077: PUSH
38078: LD_INT 39
38080: PUSH
38081: LD_INT 34
38083: PUSH
38084: LD_INT 40
38086: PUSH
38087: LD_INT 71
38089: PUSH
38090: LD_INT 23
38092: PUSH
38093: LD_INT 44
38095: PUSH
38096: LD_INT 48
38098: PUSH
38099: LD_INT 49
38101: PUSH
38102: LD_INT 50
38104: PUSH
38105: LD_INT 51
38107: PUSH
38108: LD_INT 52
38110: PUSH
38111: LD_INT 53
38113: PUSH
38114: LD_INT 54
38116: PUSH
38117: LD_INT 55
38119: PUSH
38120: LD_INT 56
38122: PUSH
38123: LD_INT 57
38125: PUSH
38126: LD_INT 58
38128: PUSH
38129: LD_INT 59
38131: PUSH
38132: LD_INT 63
38134: PUSH
38135: LD_INT 64
38137: PUSH
38138: LD_INT 65
38140: PUSH
38141: LD_INT 82
38143: PUSH
38144: LD_INT 83
38146: PUSH
38147: LD_INT 84
38149: PUSH
38150: LD_INT 85
38152: PUSH
38153: LD_INT 86
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: ST_TO_ADDR
38211: GO 38214
38213: POP
// if state > - 1 and state < 3 then
38214: LD_VAR 0 3
38218: PUSH
38219: LD_INT 1
38221: NEG
38222: GREATER
38223: IFFALSE 38235
38225: PUSH
38226: LD_VAR 0 3
38230: PUSH
38231: LD_INT 3
38233: LESS
38234: AND
38235: IFFALSE 38292
// for i in result do
38237: LD_ADDR_VAR 0 5
38241: PUSH
38242: LD_VAR 0 4
38246: PUSH
38247: FOR_IN
38248: IFFALSE 38290
// if GetTech ( i , side ) <> state then
38250: LD_VAR 0 5
38254: PPUSH
38255: LD_VAR 0 1
38259: PPUSH
38260: CALL_OW 321
38264: PUSH
38265: LD_VAR 0 3
38269: NONEQUAL
38270: IFFALSE 38288
// result := result diff i ;
38272: LD_ADDR_VAR 0 4
38276: PUSH
38277: LD_VAR 0 4
38281: PUSH
38282: LD_VAR 0 5
38286: DIFF
38287: ST_TO_ADDR
38288: GO 38247
38290: POP
38291: POP
// end ;
38292: LD_VAR 0 4
38296: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38297: LD_INT 0
38299: PPUSH
38300: PPUSH
38301: PPUSH
// result := true ;
38302: LD_ADDR_VAR 0 3
38306: PUSH
38307: LD_INT 1
38309: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38310: LD_ADDR_VAR 0 5
38314: PUSH
38315: LD_VAR 0 2
38319: PPUSH
38320: CALL_OW 480
38324: ST_TO_ADDR
// if not tmp then
38325: LD_VAR 0 5
38329: NOT
38330: IFFALSE 38334
// exit ;
38332: GO 38383
// for i in tmp do
38334: LD_ADDR_VAR 0 4
38338: PUSH
38339: LD_VAR 0 5
38343: PUSH
38344: FOR_IN
38345: IFFALSE 38381
// if GetTech ( i , side ) <> state_researched then
38347: LD_VAR 0 4
38351: PPUSH
38352: LD_VAR 0 1
38356: PPUSH
38357: CALL_OW 321
38361: PUSH
38362: LD_INT 2
38364: NONEQUAL
38365: IFFALSE 38379
// begin result := false ;
38367: LD_ADDR_VAR 0 3
38371: PUSH
38372: LD_INT 0
38374: ST_TO_ADDR
// exit ;
38375: POP
38376: POP
38377: GO 38383
// end ;
38379: GO 38344
38381: POP
38382: POP
// end ;
38383: LD_VAR 0 3
38387: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38388: LD_INT 0
38390: PPUSH
38391: PPUSH
38392: PPUSH
38393: PPUSH
38394: PPUSH
38395: PPUSH
38396: PPUSH
38397: PPUSH
38398: PPUSH
38399: PPUSH
38400: PPUSH
38401: PPUSH
38402: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38403: LD_VAR 0 1
38407: NOT
38408: IFTRUE 38425
38410: PUSH
38411: LD_VAR 0 1
38415: PPUSH
38416: CALL_OW 257
38420: PUSH
38421: LD_INT 9
38423: NONEQUAL
38424: OR
38425: IFFALSE 38429
// exit ;
38427: GO 39008
// side := GetSide ( unit ) ;
38429: LD_ADDR_VAR 0 9
38433: PUSH
38434: LD_VAR 0 1
38438: PPUSH
38439: CALL_OW 255
38443: ST_TO_ADDR
// tech_space := tech_spacanom ;
38444: LD_ADDR_VAR 0 12
38448: PUSH
38449: LD_INT 29
38451: ST_TO_ADDR
// tech_time := tech_taurad ;
38452: LD_ADDR_VAR 0 13
38456: PUSH
38457: LD_INT 28
38459: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38460: LD_ADDR_VAR 0 11
38464: PUSH
38465: LD_VAR 0 1
38469: PPUSH
38470: CALL_OW 310
38474: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38475: LD_VAR 0 11
38479: PPUSH
38480: CALL_OW 247
38484: PUSH
38485: LD_INT 2
38487: EQUAL
38488: IFFALSE 38492
// exit ;
38490: GO 39008
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38492: LD_ADDR_VAR 0 8
38496: PUSH
38497: LD_INT 81
38499: PUSH
38500: LD_VAR 0 9
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 3
38511: PUSH
38512: LD_INT 21
38514: PUSH
38515: LD_INT 3
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PPUSH
38530: CALL_OW 69
38534: ST_TO_ADDR
// if not tmp then
38535: LD_VAR 0 8
38539: NOT
38540: IFFALSE 38544
// exit ;
38542: GO 39008
// if in_unit then
38544: LD_VAR 0 11
38548: IFFALSE 38572
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38550: LD_ADDR_VAR 0 10
38554: PUSH
38555: LD_VAR 0 8
38559: PPUSH
38560: LD_VAR 0 11
38564: PPUSH
38565: CALL_OW 74
38569: ST_TO_ADDR
38570: GO 38592
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38572: LD_ADDR_VAR 0 10
38576: PUSH
38577: LD_VAR 0 8
38581: PPUSH
38582: LD_VAR 0 1
38586: PPUSH
38587: CALL_OW 74
38591: ST_TO_ADDR
// if not enemy then
38592: LD_VAR 0 10
38596: NOT
38597: IFFALSE 38601
// exit ;
38599: GO 39008
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38601: LD_VAR 0 11
38605: IFFALSE 38627
38607: PUSH
38608: LD_VAR 0 11
38612: PPUSH
38613: LD_VAR 0 10
38617: PPUSH
38618: CALL_OW 296
38622: PUSH
38623: LD_INT 13
38625: GREATER
38626: AND
38627: IFTRUE 38649
38629: PUSH
38630: LD_VAR 0 1
38634: PPUSH
38635: LD_VAR 0 10
38639: PPUSH
38640: CALL_OW 296
38644: PUSH
38645: LD_INT 12
38647: GREATER
38648: OR
38649: IFFALSE 38653
// exit ;
38651: GO 39008
// missile := [ 1 ] ;
38653: LD_ADDR_VAR 0 14
38657: PUSH
38658: LD_INT 1
38660: PUSH
38661: EMPTY
38662: LIST
38663: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38664: LD_VAR 0 9
38668: PPUSH
38669: LD_VAR 0 12
38673: PPUSH
38674: CALL_OW 325
38678: IFFALSE 38707
// missile := Replace ( missile , missile + 1 , 2 ) ;
38680: LD_ADDR_VAR 0 14
38684: PUSH
38685: LD_VAR 0 14
38689: PPUSH
38690: LD_VAR 0 14
38694: PUSH
38695: LD_INT 1
38697: PLUS
38698: PPUSH
38699: LD_INT 2
38701: PPUSH
38702: CALL_OW 1
38706: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38707: LD_VAR 0 9
38711: PPUSH
38712: LD_VAR 0 13
38716: PPUSH
38717: CALL_OW 325
38721: IFFALSE 38745
38723: PUSH
38724: LD_VAR 0 10
38728: PPUSH
38729: CALL_OW 255
38733: PPUSH
38734: LD_VAR 0 13
38738: PPUSH
38739: CALL_OW 325
38743: NOT
38744: AND
38745: IFFALSE 38774
// missile := Replace ( missile , missile + 1 , 3 ) ;
38747: LD_ADDR_VAR 0 14
38751: PUSH
38752: LD_VAR 0 14
38756: PPUSH
38757: LD_VAR 0 14
38761: PUSH
38762: LD_INT 1
38764: PLUS
38765: PPUSH
38766: LD_INT 3
38768: PPUSH
38769: CALL_OW 1
38773: ST_TO_ADDR
// if missile < 2 then
38774: LD_VAR 0 14
38778: PUSH
38779: LD_INT 2
38781: LESS
38782: IFFALSE 38786
// exit ;
38784: GO 39008
// x := GetX ( enemy ) ;
38786: LD_ADDR_VAR 0 4
38790: PUSH
38791: LD_VAR 0 10
38795: PPUSH
38796: CALL_OW 250
38800: ST_TO_ADDR
// y := GetY ( enemy ) ;
38801: LD_ADDR_VAR 0 5
38805: PUSH
38806: LD_VAR 0 10
38810: PPUSH
38811: CALL_OW 251
38815: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38816: LD_ADDR_VAR 0 6
38820: PUSH
38821: LD_VAR 0 4
38825: PUSH
38826: LD_INT 1
38828: NEG
38829: PPUSH
38830: LD_INT 1
38832: PPUSH
38833: CALL_OW 12
38837: PLUS
38838: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38839: LD_ADDR_VAR 0 7
38843: PUSH
38844: LD_VAR 0 5
38848: PUSH
38849: LD_INT 1
38851: NEG
38852: PPUSH
38853: LD_INT 1
38855: PPUSH
38856: CALL_OW 12
38860: PLUS
38861: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38862: LD_VAR 0 6
38866: PPUSH
38867: LD_VAR 0 7
38871: PPUSH
38872: CALL_OW 488
38876: NOT
38877: IFFALSE 38899
// begin _x := x ;
38879: LD_ADDR_VAR 0 6
38883: PUSH
38884: LD_VAR 0 4
38888: ST_TO_ADDR
// _y := y ;
38889: LD_ADDR_VAR 0 7
38893: PUSH
38894: LD_VAR 0 5
38898: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38899: LD_ADDR_VAR 0 3
38903: PUSH
38904: LD_INT 1
38906: PPUSH
38907: LD_VAR 0 14
38911: PPUSH
38912: CALL_OW 12
38916: ST_TO_ADDR
// case i of 1 :
38917: LD_VAR 0 3
38921: PUSH
38922: LD_INT 1
38924: DOUBLE
38925: EQUAL
38926: IFTRUE 38930
38928: GO 38947
38930: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38931: LD_VAR 0 1
38935: PPUSH
38936: LD_VAR 0 10
38940: PPUSH
38941: CALL_OW 115
38945: GO 39008
38947: LD_INT 2
38949: DOUBLE
38950: EQUAL
38951: IFTRUE 38955
38953: GO 38977
38955: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38956: LD_VAR 0 1
38960: PPUSH
38961: LD_VAR 0 6
38965: PPUSH
38966: LD_VAR 0 7
38970: PPUSH
38971: CALL_OW 153
38975: GO 39008
38977: LD_INT 3
38979: DOUBLE
38980: EQUAL
38981: IFTRUE 38985
38983: GO 39007
38985: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38986: LD_VAR 0 1
38990: PPUSH
38991: LD_VAR 0 6
38995: PPUSH
38996: LD_VAR 0 7
39000: PPUSH
39001: CALL_OW 154
39005: GO 39008
39007: POP
// end ;
39008: LD_VAR 0 2
39012: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39013: LD_INT 0
39015: PPUSH
39016: PPUSH
39017: PPUSH
39018: PPUSH
39019: PPUSH
39020: PPUSH
// if not unit or not building then
39021: LD_VAR 0 1
39025: NOT
39026: IFTRUE 39035
39028: PUSH
39029: LD_VAR 0 2
39033: NOT
39034: OR
39035: IFFALSE 39039
// exit ;
39037: GO 39197
// x := GetX ( building ) ;
39039: LD_ADDR_VAR 0 5
39043: PUSH
39044: LD_VAR 0 2
39048: PPUSH
39049: CALL_OW 250
39053: ST_TO_ADDR
// y := GetY ( building ) ;
39054: LD_ADDR_VAR 0 6
39058: PUSH
39059: LD_VAR 0 2
39063: PPUSH
39064: CALL_OW 251
39068: ST_TO_ADDR
// for i := 0 to 5 do
39069: LD_ADDR_VAR 0 4
39073: PUSH
39074: DOUBLE
39075: LD_INT 0
39077: DEC
39078: ST_TO_ADDR
39079: LD_INT 5
39081: PUSH
39082: FOR_TO
39083: IFFALSE 39195
// begin _x := ShiftX ( x , i , 3 ) ;
39085: LD_ADDR_VAR 0 7
39089: PUSH
39090: LD_VAR 0 5
39094: PPUSH
39095: LD_VAR 0 4
39099: PPUSH
39100: LD_INT 3
39102: PPUSH
39103: CALL_OW 272
39107: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39108: LD_ADDR_VAR 0 8
39112: PUSH
39113: LD_VAR 0 6
39117: PPUSH
39118: LD_VAR 0 4
39122: PPUSH
39123: LD_INT 3
39125: PPUSH
39126: CALL_OW 273
39130: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39131: LD_VAR 0 7
39135: PPUSH
39136: LD_VAR 0 8
39140: PPUSH
39141: CALL_OW 488
39145: NOT
39146: IFFALSE 39150
// continue ;
39148: GO 39082
// if HexInfo ( _x , _y ) = 0 then
39150: LD_VAR 0 7
39154: PPUSH
39155: LD_VAR 0 8
39159: PPUSH
39160: CALL_OW 428
39164: PUSH
39165: LD_INT 0
39167: EQUAL
39168: IFFALSE 39193
// begin ComMoveXY ( unit , _x , _y ) ;
39170: LD_VAR 0 1
39174: PPUSH
39175: LD_VAR 0 7
39179: PPUSH
39180: LD_VAR 0 8
39184: PPUSH
39185: CALL_OW 111
// exit ;
39189: POP
39190: POP
39191: GO 39197
// end ; end ;
39193: GO 39082
39195: POP
39196: POP
// end ;
39197: LD_VAR 0 3
39201: RET
// export function ScanBase ( side , base_area ) ; begin
39202: LD_INT 0
39204: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39205: LD_ADDR_VAR 0 3
39209: PUSH
39210: LD_VAR 0 2
39214: PPUSH
39215: LD_INT 81
39217: PUSH
39218: LD_VAR 0 1
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PPUSH
39227: CALL_OW 70
39231: ST_TO_ADDR
// end ;
39232: LD_VAR 0 3
39236: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39237: LD_INT 0
39239: PPUSH
39240: PPUSH
39241: PPUSH
39242: PPUSH
// result := false ;
39243: LD_ADDR_VAR 0 2
39247: PUSH
39248: LD_INT 0
39250: ST_TO_ADDR
// side := GetSide ( unit ) ;
39251: LD_ADDR_VAR 0 3
39255: PUSH
39256: LD_VAR 0 1
39260: PPUSH
39261: CALL_OW 255
39265: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39266: LD_ADDR_VAR 0 4
39270: PUSH
39271: LD_VAR 0 1
39275: PPUSH
39276: CALL_OW 248
39280: ST_TO_ADDR
// case nat of 1 :
39281: LD_VAR 0 4
39285: PUSH
39286: LD_INT 1
39288: DOUBLE
39289: EQUAL
39290: IFTRUE 39294
39292: GO 39305
39294: POP
// tech := tech_lassight ; 2 :
39295: LD_ADDR_VAR 0 5
39299: PUSH
39300: LD_INT 12
39302: ST_TO_ADDR
39303: GO 39344
39305: LD_INT 2
39307: DOUBLE
39308: EQUAL
39309: IFTRUE 39313
39311: GO 39324
39313: POP
// tech := tech_mortar ; 3 :
39314: LD_ADDR_VAR 0 5
39318: PUSH
39319: LD_INT 41
39321: ST_TO_ADDR
39322: GO 39344
39324: LD_INT 3
39326: DOUBLE
39327: EQUAL
39328: IFTRUE 39332
39330: GO 39343
39332: POP
// tech := tech_bazooka ; end ;
39333: LD_ADDR_VAR 0 5
39337: PUSH
39338: LD_INT 44
39340: ST_TO_ADDR
39341: GO 39344
39343: POP
// if Researched ( side , tech ) then
39344: LD_VAR 0 3
39348: PPUSH
39349: LD_VAR 0 5
39353: PPUSH
39354: CALL_OW 325
39358: IFFALSE 39385
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39360: LD_ADDR_VAR 0 2
39364: PUSH
39365: LD_INT 5
39367: PUSH
39368: LD_INT 8
39370: PUSH
39371: LD_INT 9
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: LIST
39378: PUSH
39379: LD_VAR 0 4
39383: ARRAY
39384: ST_TO_ADDR
// end ;
39385: LD_VAR 0 2
39389: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39390: LD_INT 0
39392: PPUSH
39393: PPUSH
39394: PPUSH
// if not mines then
39395: LD_VAR 0 2
39399: NOT
39400: IFFALSE 39404
// exit ;
39402: GO 39548
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39404: LD_ADDR_VAR 0 5
39408: PUSH
39409: LD_INT 81
39411: PUSH
39412: LD_VAR 0 1
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 3
39423: PUSH
39424: LD_INT 21
39426: PUSH
39427: LD_INT 3
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PPUSH
39442: CALL_OW 69
39446: ST_TO_ADDR
// for i in mines do
39447: LD_ADDR_VAR 0 4
39451: PUSH
39452: LD_VAR 0 2
39456: PUSH
39457: FOR_IN
39458: IFFALSE 39546
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39460: LD_VAR 0 4
39464: PUSH
39465: LD_INT 1
39467: ARRAY
39468: PPUSH
39469: LD_VAR 0 4
39473: PUSH
39474: LD_INT 2
39476: ARRAY
39477: PPUSH
39478: CALL_OW 458
39482: NOT
39483: IFFALSE 39487
// continue ;
39485: GO 39457
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39487: LD_VAR 0 4
39491: PUSH
39492: LD_INT 1
39494: ARRAY
39495: PPUSH
39496: LD_VAR 0 4
39500: PUSH
39501: LD_INT 2
39503: ARRAY
39504: PPUSH
39505: CALL_OW 428
39509: PUSH
39510: LD_VAR 0 5
39514: IN
39515: IFFALSE 39544
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39517: LD_VAR 0 4
39521: PUSH
39522: LD_INT 1
39524: ARRAY
39525: PPUSH
39526: LD_VAR 0 4
39530: PUSH
39531: LD_INT 2
39533: ARRAY
39534: PPUSH
39535: LD_VAR 0 1
39539: PPUSH
39540: CALL_OW 456
// end ;
39544: GO 39457
39546: POP
39547: POP
// end ;
39548: LD_VAR 0 3
39552: RET
// export function Count ( array ) ; begin
39553: LD_INT 0
39555: PPUSH
// result := array + 0 ;
39556: LD_ADDR_VAR 0 2
39560: PUSH
39561: LD_VAR 0 1
39565: PUSH
39566: LD_INT 0
39568: PLUS
39569: ST_TO_ADDR
// end ;
39570: LD_VAR 0 2
39574: RET
// export function IsEmpty ( building ) ; begin
39575: LD_INT 0
39577: PPUSH
// if not building then
39578: LD_VAR 0 1
39582: NOT
39583: IFFALSE 39587
// exit ;
39585: GO 39630
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39587: LD_ADDR_VAR 0 2
39591: PUSH
39592: LD_VAR 0 1
39596: PUSH
39597: LD_INT 22
39599: PUSH
39600: LD_VAR 0 1
39604: PPUSH
39605: CALL_OW 255
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 58
39616: PUSH
39617: EMPTY
39618: LIST
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PPUSH
39624: CALL_OW 69
39628: IN
39629: ST_TO_ADDR
// end ;
39630: LD_VAR 0 2
39634: RET
// export function IsNotFull ( building ) ; var places ; begin
39635: LD_INT 0
39637: PPUSH
39638: PPUSH
// if not building then
39639: LD_VAR 0 1
39643: NOT
39644: IFFALSE 39648
// exit ;
39646: GO 39676
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
39648: LD_ADDR_VAR 0 2
39652: PUSH
39653: LD_VAR 0 1
39657: PPUSH
39658: LD_INT 3
39660: PUSH
39661: LD_INT 62
39663: PUSH
39664: EMPTY
39665: LIST
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PPUSH
39671: CALL_OW 72
39675: ST_TO_ADDR
// end ;
39676: LD_VAR 0 2
39680: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39681: LD_INT 0
39683: PPUSH
39684: PPUSH
39685: PPUSH
39686: PPUSH
// tmp := [ ] ;
39687: LD_ADDR_VAR 0 3
39691: PUSH
39692: EMPTY
39693: ST_TO_ADDR
// list := [ ] ;
39694: LD_ADDR_VAR 0 5
39698: PUSH
39699: EMPTY
39700: ST_TO_ADDR
// for i = 16 to 25 do
39701: LD_ADDR_VAR 0 4
39705: PUSH
39706: DOUBLE
39707: LD_INT 16
39709: DEC
39710: ST_TO_ADDR
39711: LD_INT 25
39713: PUSH
39714: FOR_TO
39715: IFFALSE 39788
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39717: LD_ADDR_VAR 0 3
39721: PUSH
39722: LD_VAR 0 3
39726: PUSH
39727: LD_INT 22
39729: PUSH
39730: LD_VAR 0 1
39734: PPUSH
39735: CALL_OW 255
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 91
39746: PUSH
39747: LD_VAR 0 1
39751: PUSH
39752: LD_INT 6
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 30
39762: PUSH
39763: LD_VAR 0 4
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: LIST
39776: PUSH
39777: EMPTY
39778: LIST
39779: PPUSH
39780: CALL_OW 69
39784: ADD
39785: ST_TO_ADDR
39786: GO 39714
39788: POP
39789: POP
// for i = 1 to tmp do
39790: LD_ADDR_VAR 0 4
39794: PUSH
39795: DOUBLE
39796: LD_INT 1
39798: DEC
39799: ST_TO_ADDR
39800: LD_VAR 0 3
39804: PUSH
39805: FOR_TO
39806: IFFALSE 39894
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39808: LD_ADDR_VAR 0 5
39812: PUSH
39813: LD_VAR 0 5
39817: PUSH
39818: LD_VAR 0 3
39822: PUSH
39823: LD_VAR 0 4
39827: ARRAY
39828: PPUSH
39829: CALL_OW 266
39833: PUSH
39834: LD_VAR 0 3
39838: PUSH
39839: LD_VAR 0 4
39843: ARRAY
39844: PPUSH
39845: CALL_OW 250
39849: PUSH
39850: LD_VAR 0 3
39854: PUSH
39855: LD_VAR 0 4
39859: ARRAY
39860: PPUSH
39861: CALL_OW 251
39865: PUSH
39866: LD_VAR 0 3
39870: PUSH
39871: LD_VAR 0 4
39875: ARRAY
39876: PPUSH
39877: CALL_OW 254
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: PUSH
39888: EMPTY
39889: LIST
39890: ADD
39891: ST_TO_ADDR
39892: GO 39805
39894: POP
39895: POP
// result := list ;
39896: LD_ADDR_VAR 0 2
39900: PUSH
39901: LD_VAR 0 5
39905: ST_TO_ADDR
// end ;
39906: LD_VAR 0 2
39910: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39911: LD_INT 0
39913: PPUSH
39914: PPUSH
39915: PPUSH
39916: PPUSH
39917: PPUSH
39918: PPUSH
39919: PPUSH
// if not factory then
39920: LD_VAR 0 1
39924: NOT
39925: IFFALSE 39929
// exit ;
39927: GO 40532
// if control = control_apeman then
39929: LD_VAR 0 4
39933: PUSH
39934: LD_INT 5
39936: EQUAL
39937: IFFALSE 40046
// begin tmp := UnitsInside ( factory ) ;
39939: LD_ADDR_VAR 0 8
39943: PUSH
39944: LD_VAR 0 1
39948: PPUSH
39949: CALL_OW 313
39953: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39954: LD_VAR 0 8
39958: PPUSH
39959: LD_INT 25
39961: PUSH
39962: LD_INT 12
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PPUSH
39969: CALL_OW 72
39973: NOT
39974: IFFALSE 39984
// control := control_manual ;
39976: LD_ADDR_VAR 0 4
39980: PUSH
39981: LD_INT 1
39983: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39984: LD_ADDR_VAR 0 8
39988: PUSH
39989: LD_VAR 0 1
39993: PPUSH
39994: CALL 39681 0 1
39998: ST_TO_ADDR
// if tmp then
39999: LD_VAR 0 8
40003: IFFALSE 40046
// begin for i in tmp do
40005: LD_ADDR_VAR 0 7
40009: PUSH
40010: LD_VAR 0 8
40014: PUSH
40015: FOR_IN
40016: IFFALSE 40044
// if i [ 1 ] = b_ext_radio then
40018: LD_VAR 0 7
40022: PUSH
40023: LD_INT 1
40025: ARRAY
40026: PUSH
40027: LD_INT 22
40029: EQUAL
40030: IFFALSE 40042
// begin control := control_remote ;
40032: LD_ADDR_VAR 0 4
40036: PUSH
40037: LD_INT 2
40039: ST_TO_ADDR
// break ;
40040: GO 40044
// end ;
40042: GO 40015
40044: POP
40045: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40046: LD_VAR 0 1
40050: PPUSH
40051: LD_VAR 0 2
40055: PPUSH
40056: LD_VAR 0 3
40060: PPUSH
40061: LD_VAR 0 4
40065: PPUSH
40066: LD_VAR 0 5
40070: PPUSH
40071: CALL_OW 448
40075: IFFALSE 40110
// begin result := [ chassis , engine , control , weapon ] ;
40077: LD_ADDR_VAR 0 6
40081: PUSH
40082: LD_VAR 0 2
40086: PUSH
40087: LD_VAR 0 3
40091: PUSH
40092: LD_VAR 0 4
40096: PUSH
40097: LD_VAR 0 5
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: ST_TO_ADDR
// exit ;
40108: GO 40532
// end ; _chassis := AvailableChassisList ( factory ) ;
40110: LD_ADDR_VAR 0 9
40114: PUSH
40115: LD_VAR 0 1
40119: PPUSH
40120: CALL_OW 475
40124: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40125: LD_ADDR_VAR 0 11
40129: PUSH
40130: LD_VAR 0 1
40134: PPUSH
40135: CALL_OW 476
40139: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40140: LD_ADDR_VAR 0 12
40144: PUSH
40145: LD_VAR 0 1
40149: PPUSH
40150: CALL_OW 477
40154: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40155: LD_ADDR_VAR 0 10
40159: PUSH
40160: LD_VAR 0 1
40164: PPUSH
40165: CALL_OW 478
40169: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40170: LD_VAR 0 9
40174: NOT
40175: IFTRUE 40184
40177: PUSH
40178: LD_VAR 0 11
40182: NOT
40183: OR
40184: IFTRUE 40193
40186: PUSH
40187: LD_VAR 0 12
40191: NOT
40192: OR
40193: IFTRUE 40202
40195: PUSH
40196: LD_VAR 0 10
40200: NOT
40201: OR
40202: IFFALSE 40237
// begin result := [ chassis , engine , control , weapon ] ;
40204: LD_ADDR_VAR 0 6
40208: PUSH
40209: LD_VAR 0 2
40213: PUSH
40214: LD_VAR 0 3
40218: PUSH
40219: LD_VAR 0 4
40223: PUSH
40224: LD_VAR 0 5
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: ST_TO_ADDR
// exit ;
40235: GO 40532
// end ; if not chassis in _chassis then
40237: LD_VAR 0 2
40241: PUSH
40242: LD_VAR 0 9
40246: IN
40247: NOT
40248: IFFALSE 40274
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40250: LD_ADDR_VAR 0 2
40254: PUSH
40255: LD_VAR 0 9
40259: PUSH
40260: LD_INT 1
40262: PPUSH
40263: LD_VAR 0 9
40267: PPUSH
40268: CALL_OW 12
40272: ARRAY
40273: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40274: LD_VAR 0 2
40278: PPUSH
40279: LD_VAR 0 3
40283: PPUSH
40284: CALL 40537 0 2
40288: NOT
40289: IFFALSE 40350
// repeat engine := _engine [ 1 ] ;
40291: LD_ADDR_VAR 0 3
40295: PUSH
40296: LD_VAR 0 11
40300: PUSH
40301: LD_INT 1
40303: ARRAY
40304: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40305: LD_ADDR_VAR 0 11
40309: PUSH
40310: LD_VAR 0 11
40314: PPUSH
40315: LD_INT 1
40317: PPUSH
40318: CALL_OW 3
40322: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40323: LD_VAR 0 2
40327: PPUSH
40328: LD_VAR 0 3
40332: PPUSH
40333: CALL 40537 0 2
40337: IFTRUE 40348
40339: PUSH
40340: LD_VAR 0 11
40344: PUSH
40345: EMPTY
40346: EQUAL
40347: OR
40348: IFFALSE 40291
// if not control in _control then
40350: LD_VAR 0 4
40354: PUSH
40355: LD_VAR 0 12
40359: IN
40360: NOT
40361: IFFALSE 40387
// control := _control [ rand ( 1 , _control ) ] ;
40363: LD_ADDR_VAR 0 4
40367: PUSH
40368: LD_VAR 0 12
40372: PUSH
40373: LD_INT 1
40375: PPUSH
40376: LD_VAR 0 12
40380: PPUSH
40381: CALL_OW 12
40385: ARRAY
40386: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40387: LD_VAR 0 2
40391: PPUSH
40392: LD_VAR 0 5
40396: PPUSH
40397: CALL 40759 0 2
40401: NOT
40402: IFFALSE 40463
// repeat weapon := _weapon [ 1 ] ;
40404: LD_ADDR_VAR 0 5
40408: PUSH
40409: LD_VAR 0 10
40413: PUSH
40414: LD_INT 1
40416: ARRAY
40417: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40418: LD_ADDR_VAR 0 10
40422: PUSH
40423: LD_VAR 0 10
40427: PPUSH
40428: LD_INT 1
40430: PPUSH
40431: CALL_OW 3
40435: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40436: LD_VAR 0 2
40440: PPUSH
40441: LD_VAR 0 5
40445: PPUSH
40446: CALL 40759 0 2
40450: IFTRUE 40461
40452: PUSH
40453: LD_VAR 0 10
40457: PUSH
40458: EMPTY
40459: EQUAL
40460: OR
40461: IFFALSE 40404
// result := [ ] ;
40463: LD_ADDR_VAR 0 6
40467: PUSH
40468: EMPTY
40469: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40470: LD_VAR 0 1
40474: PPUSH
40475: LD_VAR 0 2
40479: PPUSH
40480: LD_VAR 0 3
40484: PPUSH
40485: LD_VAR 0 4
40489: PPUSH
40490: LD_VAR 0 5
40494: PPUSH
40495: CALL_OW 448
40499: IFFALSE 40532
// result := [ chassis , engine , control , weapon ] ;
40501: LD_ADDR_VAR 0 6
40505: PUSH
40506: LD_VAR 0 2
40510: PUSH
40511: LD_VAR 0 3
40515: PUSH
40516: LD_VAR 0 4
40520: PUSH
40521: LD_VAR 0 5
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: ST_TO_ADDR
// end ;
40532: LD_VAR 0 6
40536: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40537: LD_INT 0
40539: PPUSH
// if not chassis or not engine then
40540: LD_VAR 0 1
40544: NOT
40545: IFTRUE 40554
40547: PUSH
40548: LD_VAR 0 2
40552: NOT
40553: OR
40554: IFFALSE 40558
// exit ;
40556: GO 40754
// case engine of engine_solar :
40558: LD_VAR 0 2
40562: PUSH
40563: LD_INT 2
40565: DOUBLE
40566: EQUAL
40567: IFTRUE 40571
40569: GO 40609
40571: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40572: LD_ADDR_VAR 0 3
40576: PUSH
40577: LD_INT 11
40579: PUSH
40580: LD_INT 12
40582: PUSH
40583: LD_INT 13
40585: PUSH
40586: LD_INT 14
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: LD_INT 2
40594: PUSH
40595: LD_INT 3
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: ST_TO_ADDR
40607: GO 40738
40609: LD_INT 1
40611: DOUBLE
40612: EQUAL
40613: IFTRUE 40617
40615: GO 40679
40617: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40618: LD_ADDR_VAR 0 3
40622: PUSH
40623: LD_INT 11
40625: PUSH
40626: LD_INT 12
40628: PUSH
40629: LD_INT 13
40631: PUSH
40632: LD_INT 14
40634: PUSH
40635: LD_INT 1
40637: PUSH
40638: LD_INT 2
40640: PUSH
40641: LD_INT 3
40643: PUSH
40644: LD_INT 4
40646: PUSH
40647: LD_INT 5
40649: PUSH
40650: LD_INT 21
40652: PUSH
40653: LD_INT 23
40655: PUSH
40656: LD_INT 22
40658: PUSH
40659: LD_INT 24
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: ST_TO_ADDR
40677: GO 40738
40679: LD_INT 3
40681: DOUBLE
40682: EQUAL
40683: IFTRUE 40687
40685: GO 40737
40687: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40688: LD_ADDR_VAR 0 3
40692: PUSH
40693: LD_INT 13
40695: PUSH
40696: LD_INT 14
40698: PUSH
40699: LD_INT 2
40701: PUSH
40702: LD_INT 3
40704: PUSH
40705: LD_INT 4
40707: PUSH
40708: LD_INT 5
40710: PUSH
40711: LD_INT 21
40713: PUSH
40714: LD_INT 22
40716: PUSH
40717: LD_INT 23
40719: PUSH
40720: LD_INT 24
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: ST_TO_ADDR
40735: GO 40738
40737: POP
// result := ( chassis in result ) ;
40738: LD_ADDR_VAR 0 3
40742: PUSH
40743: LD_VAR 0 1
40747: PUSH
40748: LD_VAR 0 3
40752: IN
40753: ST_TO_ADDR
// end ;
40754: LD_VAR 0 3
40758: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40759: LD_INT 0
40761: PPUSH
// if not chassis or not weapon then
40762: LD_VAR 0 1
40766: NOT
40767: IFTRUE 40776
40769: PUSH
40770: LD_VAR 0 2
40774: NOT
40775: OR
40776: IFFALSE 40780
// exit ;
40778: GO 41840
// case weapon of us_machine_gun :
40780: LD_VAR 0 2
40784: PUSH
40785: LD_INT 2
40787: DOUBLE
40788: EQUAL
40789: IFTRUE 40793
40791: GO 40823
40793: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40794: LD_ADDR_VAR 0 3
40798: PUSH
40799: LD_INT 1
40801: PUSH
40802: LD_INT 2
40804: PUSH
40805: LD_INT 3
40807: PUSH
40808: LD_INT 4
40810: PUSH
40811: LD_INT 5
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: ST_TO_ADDR
40821: GO 41824
40823: LD_INT 3
40825: DOUBLE
40826: EQUAL
40827: IFTRUE 40831
40829: GO 40861
40831: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40832: LD_ADDR_VAR 0 3
40836: PUSH
40837: LD_INT 1
40839: PUSH
40840: LD_INT 2
40842: PUSH
40843: LD_INT 3
40845: PUSH
40846: LD_INT 4
40848: PUSH
40849: LD_INT 5
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: ST_TO_ADDR
40859: GO 41824
40861: LD_INT 11
40863: DOUBLE
40864: EQUAL
40865: IFTRUE 40869
40867: GO 40899
40869: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40870: LD_ADDR_VAR 0 3
40874: PUSH
40875: LD_INT 1
40877: PUSH
40878: LD_INT 2
40880: PUSH
40881: LD_INT 3
40883: PUSH
40884: LD_INT 4
40886: PUSH
40887: LD_INT 5
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: ST_TO_ADDR
40897: GO 41824
40899: LD_INT 4
40901: DOUBLE
40902: EQUAL
40903: IFTRUE 40907
40905: GO 40933
40907: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40908: LD_ADDR_VAR 0 3
40912: PUSH
40913: LD_INT 2
40915: PUSH
40916: LD_INT 3
40918: PUSH
40919: LD_INT 4
40921: PUSH
40922: LD_INT 5
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: ST_TO_ADDR
40931: GO 41824
40933: LD_INT 5
40935: DOUBLE
40936: EQUAL
40937: IFTRUE 40941
40939: GO 40967
40941: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40942: LD_ADDR_VAR 0 3
40946: PUSH
40947: LD_INT 2
40949: PUSH
40950: LD_INT 3
40952: PUSH
40953: LD_INT 4
40955: PUSH
40956: LD_INT 5
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: ST_TO_ADDR
40965: GO 41824
40967: LD_INT 9
40969: DOUBLE
40970: EQUAL
40971: IFTRUE 40975
40973: GO 41001
40975: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40976: LD_ADDR_VAR 0 3
40980: PUSH
40981: LD_INT 2
40983: PUSH
40984: LD_INT 3
40986: PUSH
40987: LD_INT 4
40989: PUSH
40990: LD_INT 5
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: ST_TO_ADDR
40999: GO 41824
41001: LD_INT 7
41003: DOUBLE
41004: EQUAL
41005: IFTRUE 41009
41007: GO 41035
41009: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41010: LD_ADDR_VAR 0 3
41014: PUSH
41015: LD_INT 2
41017: PUSH
41018: LD_INT 3
41020: PUSH
41021: LD_INT 4
41023: PUSH
41024: LD_INT 5
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: ST_TO_ADDR
41033: GO 41824
41035: LD_INT 12
41037: DOUBLE
41038: EQUAL
41039: IFTRUE 41043
41041: GO 41069
41043: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41044: LD_ADDR_VAR 0 3
41048: PUSH
41049: LD_INT 2
41051: PUSH
41052: LD_INT 3
41054: PUSH
41055: LD_INT 4
41057: PUSH
41058: LD_INT 5
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: ST_TO_ADDR
41067: GO 41824
41069: LD_INT 13
41071: DOUBLE
41072: EQUAL
41073: IFTRUE 41077
41075: GO 41103
41077: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41078: LD_ADDR_VAR 0 3
41082: PUSH
41083: LD_INT 2
41085: PUSH
41086: LD_INT 3
41088: PUSH
41089: LD_INT 4
41091: PUSH
41092: LD_INT 5
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: ST_TO_ADDR
41101: GO 41824
41103: LD_INT 14
41105: DOUBLE
41106: EQUAL
41107: IFTRUE 41111
41109: GO 41129
41111: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41112: LD_ADDR_VAR 0 3
41116: PUSH
41117: LD_INT 4
41119: PUSH
41120: LD_INT 5
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: ST_TO_ADDR
41127: GO 41824
41129: LD_INT 6
41131: DOUBLE
41132: EQUAL
41133: IFTRUE 41137
41135: GO 41155
41137: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41138: LD_ADDR_VAR 0 3
41142: PUSH
41143: LD_INT 4
41145: PUSH
41146: LD_INT 5
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: ST_TO_ADDR
41153: GO 41824
41155: LD_INT 10
41157: DOUBLE
41158: EQUAL
41159: IFTRUE 41163
41161: GO 41181
41163: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41164: LD_ADDR_VAR 0 3
41168: PUSH
41169: LD_INT 4
41171: PUSH
41172: LD_INT 5
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: ST_TO_ADDR
41179: GO 41824
41181: LD_INT 22
41183: DOUBLE
41184: EQUAL
41185: IFTRUE 41189
41187: GO 41215
41189: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41190: LD_ADDR_VAR 0 3
41194: PUSH
41195: LD_INT 11
41197: PUSH
41198: LD_INT 12
41200: PUSH
41201: LD_INT 13
41203: PUSH
41204: LD_INT 14
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: ST_TO_ADDR
41213: GO 41824
41215: LD_INT 23
41217: DOUBLE
41218: EQUAL
41219: IFTRUE 41223
41221: GO 41249
41223: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41224: LD_ADDR_VAR 0 3
41228: PUSH
41229: LD_INT 11
41231: PUSH
41232: LD_INT 12
41234: PUSH
41235: LD_INT 13
41237: PUSH
41238: LD_INT 14
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: ST_TO_ADDR
41247: GO 41824
41249: LD_INT 24
41251: DOUBLE
41252: EQUAL
41253: IFTRUE 41257
41255: GO 41283
41257: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41258: LD_ADDR_VAR 0 3
41262: PUSH
41263: LD_INT 11
41265: PUSH
41266: LD_INT 12
41268: PUSH
41269: LD_INT 13
41271: PUSH
41272: LD_INT 14
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: ST_TO_ADDR
41281: GO 41824
41283: LD_INT 30
41285: DOUBLE
41286: EQUAL
41287: IFTRUE 41291
41289: GO 41317
41291: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41292: LD_ADDR_VAR 0 3
41296: PUSH
41297: LD_INT 11
41299: PUSH
41300: LD_INT 12
41302: PUSH
41303: LD_INT 13
41305: PUSH
41306: LD_INT 14
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: ST_TO_ADDR
41315: GO 41824
41317: LD_INT 25
41319: DOUBLE
41320: EQUAL
41321: IFTRUE 41325
41323: GO 41343
41325: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41326: LD_ADDR_VAR 0 3
41330: PUSH
41331: LD_INT 13
41333: PUSH
41334: LD_INT 14
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: ST_TO_ADDR
41341: GO 41824
41343: LD_INT 27
41345: DOUBLE
41346: EQUAL
41347: IFTRUE 41351
41349: GO 41369
41351: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41352: LD_ADDR_VAR 0 3
41356: PUSH
41357: LD_INT 13
41359: PUSH
41360: LD_INT 14
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: ST_TO_ADDR
41367: GO 41824
41369: LD_INT 92
41371: DOUBLE
41372: EQUAL
41373: IFTRUE 41377
41375: GO 41403
41377: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41378: LD_ADDR_VAR 0 3
41382: PUSH
41383: LD_INT 11
41385: PUSH
41386: LD_INT 12
41388: PUSH
41389: LD_INT 13
41391: PUSH
41392: LD_INT 14
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: ST_TO_ADDR
41401: GO 41824
41403: LD_INT 28
41405: DOUBLE
41406: EQUAL
41407: IFTRUE 41411
41409: GO 41429
41411: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41412: LD_ADDR_VAR 0 3
41416: PUSH
41417: LD_INT 13
41419: PUSH
41420: LD_INT 14
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: ST_TO_ADDR
41427: GO 41824
41429: LD_INT 29
41431: DOUBLE
41432: EQUAL
41433: IFTRUE 41437
41435: GO 41455
41437: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41438: LD_ADDR_VAR 0 3
41442: PUSH
41443: LD_INT 13
41445: PUSH
41446: LD_INT 14
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: ST_TO_ADDR
41453: GO 41824
41455: LD_INT 31
41457: DOUBLE
41458: EQUAL
41459: IFTRUE 41463
41461: GO 41481
41463: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41464: LD_ADDR_VAR 0 3
41468: PUSH
41469: LD_INT 13
41471: PUSH
41472: LD_INT 14
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: ST_TO_ADDR
41479: GO 41824
41481: LD_INT 26
41483: DOUBLE
41484: EQUAL
41485: IFTRUE 41489
41487: GO 41507
41489: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41490: LD_ADDR_VAR 0 3
41494: PUSH
41495: LD_INT 13
41497: PUSH
41498: LD_INT 14
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: ST_TO_ADDR
41505: GO 41824
41507: LD_INT 42
41509: DOUBLE
41510: EQUAL
41511: IFTRUE 41515
41513: GO 41541
41515: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41516: LD_ADDR_VAR 0 3
41520: PUSH
41521: LD_INT 21
41523: PUSH
41524: LD_INT 22
41526: PUSH
41527: LD_INT 23
41529: PUSH
41530: LD_INT 24
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: ST_TO_ADDR
41539: GO 41824
41541: LD_INT 43
41543: DOUBLE
41544: EQUAL
41545: IFTRUE 41549
41547: GO 41575
41549: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41550: LD_ADDR_VAR 0 3
41554: PUSH
41555: LD_INT 21
41557: PUSH
41558: LD_INT 22
41560: PUSH
41561: LD_INT 23
41563: PUSH
41564: LD_INT 24
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: ST_TO_ADDR
41573: GO 41824
41575: LD_INT 44
41577: DOUBLE
41578: EQUAL
41579: IFTRUE 41583
41581: GO 41609
41583: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41584: LD_ADDR_VAR 0 3
41588: PUSH
41589: LD_INT 21
41591: PUSH
41592: LD_INT 22
41594: PUSH
41595: LD_INT 23
41597: PUSH
41598: LD_INT 24
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: ST_TO_ADDR
41607: GO 41824
41609: LD_INT 45
41611: DOUBLE
41612: EQUAL
41613: IFTRUE 41617
41615: GO 41643
41617: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41618: LD_ADDR_VAR 0 3
41622: PUSH
41623: LD_INT 21
41625: PUSH
41626: LD_INT 22
41628: PUSH
41629: LD_INT 23
41631: PUSH
41632: LD_INT 24
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: ST_TO_ADDR
41641: GO 41824
41643: LD_INT 49
41645: DOUBLE
41646: EQUAL
41647: IFTRUE 41651
41649: GO 41677
41651: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41652: LD_ADDR_VAR 0 3
41656: PUSH
41657: LD_INT 21
41659: PUSH
41660: LD_INT 22
41662: PUSH
41663: LD_INT 23
41665: PUSH
41666: LD_INT 24
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: ST_TO_ADDR
41675: GO 41824
41677: LD_INT 51
41679: DOUBLE
41680: EQUAL
41681: IFTRUE 41685
41683: GO 41711
41685: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41686: LD_ADDR_VAR 0 3
41690: PUSH
41691: LD_INT 21
41693: PUSH
41694: LD_INT 22
41696: PUSH
41697: LD_INT 23
41699: PUSH
41700: LD_INT 24
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: ST_TO_ADDR
41709: GO 41824
41711: LD_INT 52
41713: DOUBLE
41714: EQUAL
41715: IFTRUE 41719
41717: GO 41745
41719: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41720: LD_ADDR_VAR 0 3
41724: PUSH
41725: LD_INT 21
41727: PUSH
41728: LD_INT 22
41730: PUSH
41731: LD_INT 23
41733: PUSH
41734: LD_INT 24
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: ST_TO_ADDR
41743: GO 41824
41745: LD_INT 53
41747: DOUBLE
41748: EQUAL
41749: IFTRUE 41753
41751: GO 41771
41753: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41754: LD_ADDR_VAR 0 3
41758: PUSH
41759: LD_INT 23
41761: PUSH
41762: LD_INT 24
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: ST_TO_ADDR
41769: GO 41824
41771: LD_INT 46
41773: DOUBLE
41774: EQUAL
41775: IFTRUE 41779
41777: GO 41797
41779: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41780: LD_ADDR_VAR 0 3
41784: PUSH
41785: LD_INT 23
41787: PUSH
41788: LD_INT 24
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: ST_TO_ADDR
41795: GO 41824
41797: LD_INT 47
41799: DOUBLE
41800: EQUAL
41801: IFTRUE 41805
41803: GO 41823
41805: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41806: LD_ADDR_VAR 0 3
41810: PUSH
41811: LD_INT 23
41813: PUSH
41814: LD_INT 24
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: ST_TO_ADDR
41821: GO 41824
41823: POP
// result := ( chassis in result ) ;
41824: LD_ADDR_VAR 0 3
41828: PUSH
41829: LD_VAR 0 1
41833: PUSH
41834: LD_VAR 0 3
41838: IN
41839: ST_TO_ADDR
// end ;
41840: LD_VAR 0 3
41844: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41845: LD_INT 0
41847: PPUSH
41848: PPUSH
41849: PPUSH
41850: PPUSH
41851: PPUSH
41852: PPUSH
41853: PPUSH
// result := array ;
41854: LD_ADDR_VAR 0 5
41858: PUSH
41859: LD_VAR 0 1
41863: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41864: LD_VAR 0 1
41868: NOT
41869: IFTRUE 41878
41871: PUSH
41872: LD_VAR 0 2
41876: NOT
41877: OR
41878: IFTRUE 41887
41880: PUSH
41881: LD_VAR 0 3
41885: NOT
41886: OR
41887: IFTRUE 41901
41889: PUSH
41890: LD_VAR 0 2
41894: PUSH
41895: LD_VAR 0 1
41899: GREATER
41900: OR
41901: IFTRUE 41915
41903: PUSH
41904: LD_VAR 0 3
41908: PUSH
41909: LD_VAR 0 1
41913: GREATER
41914: OR
41915: IFFALSE 41919
// exit ;
41917: GO 42215
// if direction then
41919: LD_VAR 0 4
41923: IFFALSE 41987
// begin d := 1 ;
41925: LD_ADDR_VAR 0 9
41929: PUSH
41930: LD_INT 1
41932: ST_TO_ADDR
// if i_from > i_to then
41933: LD_VAR 0 2
41937: PUSH
41938: LD_VAR 0 3
41942: GREATER
41943: IFFALSE 41969
// length := ( array - i_from ) + i_to else
41945: LD_ADDR_VAR 0 11
41949: PUSH
41950: LD_VAR 0 1
41954: PUSH
41955: LD_VAR 0 2
41959: MINUS
41960: PUSH
41961: LD_VAR 0 3
41965: PLUS
41966: ST_TO_ADDR
41967: GO 41985
// length := i_to - i_from ;
41969: LD_ADDR_VAR 0 11
41973: PUSH
41974: LD_VAR 0 3
41978: PUSH
41979: LD_VAR 0 2
41983: MINUS
41984: ST_TO_ADDR
// end else
41985: GO 42048
// begin d := - 1 ;
41987: LD_ADDR_VAR 0 9
41991: PUSH
41992: LD_INT 1
41994: NEG
41995: ST_TO_ADDR
// if i_from > i_to then
41996: LD_VAR 0 2
42000: PUSH
42001: LD_VAR 0 3
42005: GREATER
42006: IFFALSE 42026
// length := i_from - i_to else
42008: LD_ADDR_VAR 0 11
42012: PUSH
42013: LD_VAR 0 2
42017: PUSH
42018: LD_VAR 0 3
42022: MINUS
42023: ST_TO_ADDR
42024: GO 42048
// length := ( array - i_to ) + i_from ;
42026: LD_ADDR_VAR 0 11
42030: PUSH
42031: LD_VAR 0 1
42035: PUSH
42036: LD_VAR 0 3
42040: MINUS
42041: PUSH
42042: LD_VAR 0 2
42046: PLUS
42047: ST_TO_ADDR
// end ; if not length then
42048: LD_VAR 0 11
42052: NOT
42053: IFFALSE 42057
// exit ;
42055: GO 42215
// tmp := array ;
42057: LD_ADDR_VAR 0 10
42061: PUSH
42062: LD_VAR 0 1
42066: ST_TO_ADDR
// for i = 1 to length do
42067: LD_ADDR_VAR 0 6
42071: PUSH
42072: DOUBLE
42073: LD_INT 1
42075: DEC
42076: ST_TO_ADDR
42077: LD_VAR 0 11
42081: PUSH
42082: FOR_TO
42083: IFFALSE 42203
// begin for j = 1 to array do
42085: LD_ADDR_VAR 0 7
42089: PUSH
42090: DOUBLE
42091: LD_INT 1
42093: DEC
42094: ST_TO_ADDR
42095: LD_VAR 0 1
42099: PUSH
42100: FOR_TO
42101: IFFALSE 42189
// begin k := j + d ;
42103: LD_ADDR_VAR 0 8
42107: PUSH
42108: LD_VAR 0 7
42112: PUSH
42113: LD_VAR 0 9
42117: PLUS
42118: ST_TO_ADDR
// if k > array then
42119: LD_VAR 0 8
42123: PUSH
42124: LD_VAR 0 1
42128: GREATER
42129: IFFALSE 42139
// k := 1 ;
42131: LD_ADDR_VAR 0 8
42135: PUSH
42136: LD_INT 1
42138: ST_TO_ADDR
// if not k then
42139: LD_VAR 0 8
42143: NOT
42144: IFFALSE 42156
// k := array ;
42146: LD_ADDR_VAR 0 8
42150: PUSH
42151: LD_VAR 0 1
42155: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42156: LD_ADDR_VAR 0 10
42160: PUSH
42161: LD_VAR 0 10
42165: PPUSH
42166: LD_VAR 0 8
42170: PPUSH
42171: LD_VAR 0 1
42175: PUSH
42176: LD_VAR 0 7
42180: ARRAY
42181: PPUSH
42182: CALL_OW 1
42186: ST_TO_ADDR
// end ;
42187: GO 42100
42189: POP
42190: POP
// array := tmp ;
42191: LD_ADDR_VAR 0 1
42195: PUSH
42196: LD_VAR 0 10
42200: ST_TO_ADDR
// end ;
42201: GO 42082
42203: POP
42204: POP
// result := array ;
42205: LD_ADDR_VAR 0 5
42209: PUSH
42210: LD_VAR 0 1
42214: ST_TO_ADDR
// end ;
42215: LD_VAR 0 5
42219: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42220: LD_INT 0
42222: PPUSH
42223: PPUSH
// result := 0 ;
42224: LD_ADDR_VAR 0 3
42228: PUSH
42229: LD_INT 0
42231: ST_TO_ADDR
// if not array or not value in array then
42232: LD_VAR 0 1
42236: NOT
42237: IFTRUE 42252
42239: PUSH
42240: LD_VAR 0 2
42244: PUSH
42245: LD_VAR 0 1
42249: IN
42250: NOT
42251: OR
42252: IFFALSE 42256
// exit ;
42254: GO 42310
// for i = 1 to array do
42256: LD_ADDR_VAR 0 4
42260: PUSH
42261: DOUBLE
42262: LD_INT 1
42264: DEC
42265: ST_TO_ADDR
42266: LD_VAR 0 1
42270: PUSH
42271: FOR_TO
42272: IFFALSE 42308
// if value = array [ i ] then
42274: LD_VAR 0 2
42278: PUSH
42279: LD_VAR 0 1
42283: PUSH
42284: LD_VAR 0 4
42288: ARRAY
42289: EQUAL
42290: IFFALSE 42306
// begin result := i ;
42292: LD_ADDR_VAR 0 3
42296: PUSH
42297: LD_VAR 0 4
42301: ST_TO_ADDR
// exit ;
42302: POP
42303: POP
42304: GO 42310
// end ;
42306: GO 42271
42308: POP
42309: POP
// end ;
42310: LD_VAR 0 3
42314: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42315: LD_INT 0
42317: PPUSH
// vc_chassis := chassis ;
42318: LD_ADDR_OWVAR 37
42322: PUSH
42323: LD_VAR 0 1
42327: ST_TO_ADDR
// vc_engine := engine ;
42328: LD_ADDR_OWVAR 39
42332: PUSH
42333: LD_VAR 0 2
42337: ST_TO_ADDR
// vc_control := control ;
42338: LD_ADDR_OWVAR 38
42342: PUSH
42343: LD_VAR 0 3
42347: ST_TO_ADDR
// vc_weapon := weapon ;
42348: LD_ADDR_OWVAR 40
42352: PUSH
42353: LD_VAR 0 4
42357: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42358: LD_ADDR_OWVAR 41
42362: PUSH
42363: LD_VAR 0 5
42367: ST_TO_ADDR
// end ;
42368: LD_VAR 0 6
42372: RET
// export function WantPlant ( unit ) ; var task ; begin
42373: LD_INT 0
42375: PPUSH
42376: PPUSH
// result := false ;
42377: LD_ADDR_VAR 0 2
42381: PUSH
42382: LD_INT 0
42384: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42385: LD_ADDR_VAR 0 3
42389: PUSH
42390: LD_VAR 0 1
42394: PPUSH
42395: CALL_OW 437
42399: ST_TO_ADDR
// if task then
42400: LD_VAR 0 3
42404: IFFALSE 42432
// if task [ 1 ] [ 1 ] = p then
42406: LD_VAR 0 3
42410: PUSH
42411: LD_INT 1
42413: ARRAY
42414: PUSH
42415: LD_INT 1
42417: ARRAY
42418: PUSH
42419: LD_STRING p
42421: EQUAL
42422: IFFALSE 42432
// result := true ;
42424: LD_ADDR_VAR 0 2
42428: PUSH
42429: LD_INT 1
42431: ST_TO_ADDR
// end ;
42432: LD_VAR 0 2
42436: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42437: LD_INT 0
42439: PPUSH
42440: PPUSH
42441: PPUSH
42442: PPUSH
// if pos < 1 then
42443: LD_VAR 0 2
42447: PUSH
42448: LD_INT 1
42450: LESS
42451: IFFALSE 42455
// exit ;
42453: GO 42758
// if pos = 1 then
42455: LD_VAR 0 2
42459: PUSH
42460: LD_INT 1
42462: EQUAL
42463: IFFALSE 42496
// result := Replace ( arr , pos [ 1 ] , value ) else
42465: LD_ADDR_VAR 0 4
42469: PUSH
42470: LD_VAR 0 1
42474: PPUSH
42475: LD_VAR 0 2
42479: PUSH
42480: LD_INT 1
42482: ARRAY
42483: PPUSH
42484: LD_VAR 0 3
42488: PPUSH
42489: CALL_OW 1
42493: ST_TO_ADDR
42494: GO 42758
// begin tmp := arr ;
42496: LD_ADDR_VAR 0 6
42500: PUSH
42501: LD_VAR 0 1
42505: ST_TO_ADDR
// s_arr := [ tmp ] ;
42506: LD_ADDR_VAR 0 7
42510: PUSH
42511: LD_VAR 0 6
42515: PUSH
42516: EMPTY
42517: LIST
42518: ST_TO_ADDR
// for i = 1 to pos - 1 do
42519: LD_ADDR_VAR 0 5
42523: PUSH
42524: DOUBLE
42525: LD_INT 1
42527: DEC
42528: ST_TO_ADDR
42529: LD_VAR 0 2
42533: PUSH
42534: LD_INT 1
42536: MINUS
42537: PUSH
42538: FOR_TO
42539: IFFALSE 42584
// begin tmp := tmp [ pos [ i ] ] ;
42541: LD_ADDR_VAR 0 6
42545: PUSH
42546: LD_VAR 0 6
42550: PUSH
42551: LD_VAR 0 2
42555: PUSH
42556: LD_VAR 0 5
42560: ARRAY
42561: ARRAY
42562: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42563: LD_ADDR_VAR 0 7
42567: PUSH
42568: LD_VAR 0 7
42572: PUSH
42573: LD_VAR 0 6
42577: PUSH
42578: EMPTY
42579: LIST
42580: ADD
42581: ST_TO_ADDR
// end ;
42582: GO 42538
42584: POP
42585: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42586: LD_ADDR_VAR 0 6
42590: PUSH
42591: LD_VAR 0 6
42595: PPUSH
42596: LD_VAR 0 2
42600: PUSH
42601: LD_VAR 0 2
42605: ARRAY
42606: PPUSH
42607: LD_VAR 0 3
42611: PPUSH
42612: CALL_OW 1
42616: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42617: LD_ADDR_VAR 0 7
42621: PUSH
42622: LD_VAR 0 7
42626: PPUSH
42627: LD_VAR 0 7
42631: PPUSH
42632: LD_VAR 0 6
42636: PPUSH
42637: CALL_OW 1
42641: ST_TO_ADDR
// for i = s_arr downto 2 do
42642: LD_ADDR_VAR 0 5
42646: PUSH
42647: DOUBLE
42648: LD_VAR 0 7
42652: INC
42653: ST_TO_ADDR
42654: LD_INT 2
42656: PUSH
42657: FOR_DOWNTO
42658: IFFALSE 42742
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42660: LD_ADDR_VAR 0 6
42664: PUSH
42665: LD_VAR 0 7
42669: PUSH
42670: LD_VAR 0 5
42674: PUSH
42675: LD_INT 1
42677: MINUS
42678: ARRAY
42679: PPUSH
42680: LD_VAR 0 2
42684: PUSH
42685: LD_VAR 0 5
42689: PUSH
42690: LD_INT 1
42692: MINUS
42693: ARRAY
42694: PPUSH
42695: LD_VAR 0 7
42699: PUSH
42700: LD_VAR 0 5
42704: ARRAY
42705: PPUSH
42706: CALL_OW 1
42710: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42711: LD_ADDR_VAR 0 7
42715: PUSH
42716: LD_VAR 0 7
42720: PPUSH
42721: LD_VAR 0 5
42725: PUSH
42726: LD_INT 1
42728: MINUS
42729: PPUSH
42730: LD_VAR 0 6
42734: PPUSH
42735: CALL_OW 1
42739: ST_TO_ADDR
// end ;
42740: GO 42657
42742: POP
42743: POP
// result := s_arr [ 1 ] ;
42744: LD_ADDR_VAR 0 4
42748: PUSH
42749: LD_VAR 0 7
42753: PUSH
42754: LD_INT 1
42756: ARRAY
42757: ST_TO_ADDR
// end ; end ;
42758: LD_VAR 0 4
42762: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42763: LD_INT 0
42765: PPUSH
42766: PPUSH
// if not list then
42767: LD_VAR 0 1
42771: NOT
42772: IFFALSE 42776
// exit ;
42774: GO 42867
// i := list [ pos1 ] ;
42776: LD_ADDR_VAR 0 5
42780: PUSH
42781: LD_VAR 0 1
42785: PUSH
42786: LD_VAR 0 2
42790: ARRAY
42791: ST_TO_ADDR
// if not i then
42792: LD_VAR 0 5
42796: NOT
42797: IFFALSE 42801
// exit ;
42799: GO 42867
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42801: LD_ADDR_VAR 0 1
42805: PUSH
42806: LD_VAR 0 1
42810: PPUSH
42811: LD_VAR 0 2
42815: PPUSH
42816: LD_VAR 0 1
42820: PUSH
42821: LD_VAR 0 3
42825: ARRAY
42826: PPUSH
42827: CALL_OW 1
42831: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42832: LD_ADDR_VAR 0 1
42836: PUSH
42837: LD_VAR 0 1
42841: PPUSH
42842: LD_VAR 0 3
42846: PPUSH
42847: LD_VAR 0 5
42851: PPUSH
42852: CALL_OW 1
42856: ST_TO_ADDR
// result := list ;
42857: LD_ADDR_VAR 0 4
42861: PUSH
42862: LD_VAR 0 1
42866: ST_TO_ADDR
// end ;
42867: LD_VAR 0 4
42871: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42872: LD_INT 0
42874: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42875: LD_ADDR_VAR 0 5
42879: PUSH
42880: LD_VAR 0 1
42884: PPUSH
42885: CALL_OW 250
42889: PPUSH
42890: LD_VAR 0 1
42894: PPUSH
42895: CALL_OW 251
42899: PPUSH
42900: LD_VAR 0 2
42904: PPUSH
42905: LD_VAR 0 3
42909: PPUSH
42910: LD_VAR 0 4
42914: PPUSH
42915: CALL 43297 0 5
42919: ST_TO_ADDR
// end ;
42920: LD_VAR 0 5
42924: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
42925: LD_INT 0
42927: PPUSH
42928: PPUSH
42929: PPUSH
42930: PPUSH
// if not list or not unit then
42931: LD_VAR 0 2
42935: NOT
42936: IFTRUE 42945
42938: PUSH
42939: LD_VAR 0 1
42943: NOT
42944: OR
42945: IFFALSE 42949
// exit ;
42947: GO 43292
// result := [ ] ;
42949: LD_ADDR_VAR 0 5
42953: PUSH
42954: EMPTY
42955: ST_TO_ADDR
// for i in list do
42956: LD_ADDR_VAR 0 6
42960: PUSH
42961: LD_VAR 0 2
42965: PUSH
42966: FOR_IN
42967: IFFALSE 43185
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42969: LD_ADDR_VAR 0 8
42973: PUSH
42974: LD_VAR 0 1
42978: PPUSH
42979: LD_VAR 0 6
42983: PUSH
42984: LD_INT 1
42986: ARRAY
42987: PPUSH
42988: LD_VAR 0 6
42992: PUSH
42993: LD_INT 2
42995: ARRAY
42996: PPUSH
42997: CALL_OW 297
43001: ST_TO_ADDR
// if not Count ( result ) then
43002: LD_VAR 0 5
43006: PPUSH
43007: CALL 39553 0 1
43011: NOT
43012: IFFALSE 43045
// begin result := Join ( result , [ i , tmp ] ) ;
43014: LD_ADDR_VAR 0 5
43018: PUSH
43019: LD_VAR 0 5
43023: PPUSH
43024: LD_VAR 0 6
43028: PUSH
43029: LD_VAR 0 8
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PPUSH
43038: CALL 75485 0 2
43042: ST_TO_ADDR
// continue ;
43043: GO 42966
// end ; if result [ result ] [ 2 ] <= tmp then
43045: LD_VAR 0 5
43049: PUSH
43050: LD_VAR 0 5
43054: ARRAY
43055: PUSH
43056: LD_INT 2
43058: ARRAY
43059: PUSH
43060: LD_VAR 0 8
43064: LESSEQUAL
43065: IFFALSE 43098
// result := Join ( result , [ i , tmp ] ) else
43067: LD_ADDR_VAR 0 5
43071: PUSH
43072: LD_VAR 0 5
43076: PPUSH
43077: LD_VAR 0 6
43081: PUSH
43082: LD_VAR 0 8
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PPUSH
43091: CALL 75485 0 2
43095: ST_TO_ADDR
43096: GO 43183
// begin for j := 1 to Count ( result ) do
43098: LD_ADDR_VAR 0 7
43102: PUSH
43103: DOUBLE
43104: LD_INT 1
43106: DEC
43107: ST_TO_ADDR
43108: LD_VAR 0 5
43112: PPUSH
43113: CALL 39553 0 1
43117: PUSH
43118: FOR_TO
43119: IFFALSE 43181
// begin if tmp < result [ j ] [ 2 ] then
43121: LD_VAR 0 8
43125: PUSH
43126: LD_VAR 0 5
43130: PUSH
43131: LD_VAR 0 7
43135: ARRAY
43136: PUSH
43137: LD_INT 2
43139: ARRAY
43140: LESS
43141: IFFALSE 43179
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43143: LD_ADDR_VAR 0 5
43147: PUSH
43148: LD_VAR 0 5
43152: PPUSH
43153: LD_VAR 0 7
43157: PPUSH
43158: LD_VAR 0 6
43162: PUSH
43163: LD_VAR 0 8
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PPUSH
43172: CALL_OW 2
43176: ST_TO_ADDR
// break ;
43177: GO 43181
// end ; end ;
43179: GO 43118
43181: POP
43182: POP
// end ; end ;
43183: GO 42966
43185: POP
43186: POP
// if result and not asc then
43187: LD_VAR 0 5
43191: IFFALSE 43200
43193: PUSH
43194: LD_VAR 0 3
43198: NOT
43199: AND
43200: IFFALSE 43217
// result := ReverseArray ( result ) ;
43202: LD_ADDR_VAR 0 5
43206: PUSH
43207: LD_VAR 0 5
43211: PPUSH
43212: CALL 70575 0 1
43216: ST_TO_ADDR
// tmp := [ ] ;
43217: LD_ADDR_VAR 0 8
43221: PUSH
43222: EMPTY
43223: ST_TO_ADDR
// if mode then
43224: LD_VAR 0 4
43228: IFFALSE 43292
// begin for i := 1 to result do
43230: LD_ADDR_VAR 0 6
43234: PUSH
43235: DOUBLE
43236: LD_INT 1
43238: DEC
43239: ST_TO_ADDR
43240: LD_VAR 0 5
43244: PUSH
43245: FOR_TO
43246: IFFALSE 43280
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
43248: LD_ADDR_VAR 0 8
43252: PUSH
43253: LD_VAR 0 8
43257: PPUSH
43258: LD_VAR 0 5
43262: PUSH
43263: LD_VAR 0 6
43267: ARRAY
43268: PUSH
43269: LD_INT 1
43271: ARRAY
43272: PPUSH
43273: CALL 75485 0 2
43277: ST_TO_ADDR
43278: GO 43245
43280: POP
43281: POP
// result := tmp ;
43282: LD_ADDR_VAR 0 5
43286: PUSH
43287: LD_VAR 0 8
43291: ST_TO_ADDR
// end ; end ;
43292: LD_VAR 0 5
43296: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43297: LD_INT 0
43299: PPUSH
43300: PPUSH
43301: PPUSH
43302: PPUSH
// if not list then
43303: LD_VAR 0 3
43307: NOT
43308: IFFALSE 43312
// exit ;
43310: GO 43702
// result := [ ] ;
43312: LD_ADDR_VAR 0 6
43316: PUSH
43317: EMPTY
43318: ST_TO_ADDR
// for i in list do
43319: LD_ADDR_VAR 0 7
43323: PUSH
43324: LD_VAR 0 3
43328: PUSH
43329: FOR_IN
43330: IFFALSE 43532
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43332: LD_ADDR_VAR 0 9
43336: PUSH
43337: LD_VAR 0 7
43341: PPUSH
43342: LD_VAR 0 1
43346: PPUSH
43347: LD_VAR 0 2
43351: PPUSH
43352: CALL_OW 297
43356: ST_TO_ADDR
// if not result then
43357: LD_VAR 0 6
43361: NOT
43362: IFFALSE 43388
// result := [ [ i , tmp ] ] else
43364: LD_ADDR_VAR 0 6
43368: PUSH
43369: LD_VAR 0 7
43373: PUSH
43374: LD_VAR 0 9
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: EMPTY
43384: LIST
43385: ST_TO_ADDR
43386: GO 43530
// begin if result [ result ] [ 2 ] <= tmp then
43388: LD_VAR 0 6
43392: PUSH
43393: LD_VAR 0 6
43397: ARRAY
43398: PUSH
43399: LD_INT 2
43401: ARRAY
43402: PUSH
43403: LD_VAR 0 9
43407: LESSEQUAL
43408: IFFALSE 43450
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43410: LD_ADDR_VAR 0 6
43414: PUSH
43415: LD_VAR 0 6
43419: PPUSH
43420: LD_VAR 0 6
43424: PUSH
43425: LD_INT 1
43427: PLUS
43428: PPUSH
43429: LD_VAR 0 7
43433: PUSH
43434: LD_VAR 0 9
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PPUSH
43443: CALL_OW 2
43447: ST_TO_ADDR
43448: GO 43530
// for j := 1 to result do
43450: LD_ADDR_VAR 0 8
43454: PUSH
43455: DOUBLE
43456: LD_INT 1
43458: DEC
43459: ST_TO_ADDR
43460: LD_VAR 0 6
43464: PUSH
43465: FOR_TO
43466: IFFALSE 43528
// begin if tmp < result [ j ] [ 2 ] then
43468: LD_VAR 0 9
43472: PUSH
43473: LD_VAR 0 6
43477: PUSH
43478: LD_VAR 0 8
43482: ARRAY
43483: PUSH
43484: LD_INT 2
43486: ARRAY
43487: LESS
43488: IFFALSE 43526
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43490: LD_ADDR_VAR 0 6
43494: PUSH
43495: LD_VAR 0 6
43499: PPUSH
43500: LD_VAR 0 8
43504: PPUSH
43505: LD_VAR 0 7
43509: PUSH
43510: LD_VAR 0 9
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PPUSH
43519: CALL_OW 2
43523: ST_TO_ADDR
// break ;
43524: GO 43528
// end ; end ;
43526: GO 43465
43528: POP
43529: POP
// end ; end ;
43530: GO 43329
43532: POP
43533: POP
// if result and not asc then
43534: LD_VAR 0 6
43538: IFFALSE 43547
43540: PUSH
43541: LD_VAR 0 4
43545: NOT
43546: AND
43547: IFFALSE 43622
// begin tmp := result ;
43549: LD_ADDR_VAR 0 9
43553: PUSH
43554: LD_VAR 0 6
43558: ST_TO_ADDR
// for i = tmp downto 1 do
43559: LD_ADDR_VAR 0 7
43563: PUSH
43564: DOUBLE
43565: LD_VAR 0 9
43569: INC
43570: ST_TO_ADDR
43571: LD_INT 1
43573: PUSH
43574: FOR_DOWNTO
43575: IFFALSE 43620
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43577: LD_ADDR_VAR 0 6
43581: PUSH
43582: LD_VAR 0 6
43586: PPUSH
43587: LD_VAR 0 9
43591: PUSH
43592: LD_VAR 0 7
43596: MINUS
43597: PUSH
43598: LD_INT 1
43600: PLUS
43601: PPUSH
43602: LD_VAR 0 9
43606: PUSH
43607: LD_VAR 0 7
43611: ARRAY
43612: PPUSH
43613: CALL_OW 1
43617: ST_TO_ADDR
43618: GO 43574
43620: POP
43621: POP
// end ; tmp := [ ] ;
43622: LD_ADDR_VAR 0 9
43626: PUSH
43627: EMPTY
43628: ST_TO_ADDR
// if mode then
43629: LD_VAR 0 5
43633: IFFALSE 43702
// begin for i = 1 to result do
43635: LD_ADDR_VAR 0 7
43639: PUSH
43640: DOUBLE
43641: LD_INT 1
43643: DEC
43644: ST_TO_ADDR
43645: LD_VAR 0 6
43649: PUSH
43650: FOR_TO
43651: IFFALSE 43690
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43653: LD_ADDR_VAR 0 9
43657: PUSH
43658: LD_VAR 0 9
43662: PPUSH
43663: LD_VAR 0 7
43667: PPUSH
43668: LD_VAR 0 6
43672: PUSH
43673: LD_VAR 0 7
43677: ARRAY
43678: PUSH
43679: LD_INT 1
43681: ARRAY
43682: PPUSH
43683: CALL_OW 1
43687: ST_TO_ADDR
43688: GO 43650
43690: POP
43691: POP
// result := tmp ;
43692: LD_ADDR_VAR 0 6
43696: PUSH
43697: LD_VAR 0 9
43701: ST_TO_ADDR
// end ; end ;
43702: LD_VAR 0 6
43706: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43707: LD_INT 0
43709: PPUSH
43710: PPUSH
43711: PPUSH
43712: PPUSH
43713: PPUSH
43714: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43715: LD_ADDR_VAR 0 5
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: LD_INT 0
43728: PUSH
43729: EMPTY
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: ST_TO_ADDR
// if not x or not y then
43737: LD_VAR 0 2
43741: NOT
43742: IFTRUE 43751
43744: PUSH
43745: LD_VAR 0 3
43749: NOT
43750: OR
43751: IFFALSE 43755
// exit ;
43753: GO 45411
// if not range then
43755: LD_VAR 0 4
43759: NOT
43760: IFFALSE 43770
// range := 10 ;
43762: LD_ADDR_VAR 0 4
43766: PUSH
43767: LD_INT 10
43769: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43770: LD_ADDR_VAR 0 8
43774: PUSH
43775: LD_INT 81
43777: PUSH
43778: LD_VAR 0 1
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 92
43789: PUSH
43790: LD_VAR 0 2
43794: PUSH
43795: LD_VAR 0 3
43799: PUSH
43800: LD_VAR 0 4
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 3
43813: PUSH
43814: LD_INT 21
43816: PUSH
43817: LD_INT 3
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: LIST
43832: PPUSH
43833: CALL_OW 69
43837: ST_TO_ADDR
// if not tmp then
43838: LD_VAR 0 8
43842: NOT
43843: IFFALSE 43847
// exit ;
43845: GO 45411
// for i in tmp do
43847: LD_ADDR_VAR 0 6
43851: PUSH
43852: LD_VAR 0 8
43856: PUSH
43857: FOR_IN
43858: IFFALSE 45386
// begin points := [ 0 , 0 , 0 ] ;
43860: LD_ADDR_VAR 0 9
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: LD_INT 0
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: LIST
43878: ST_TO_ADDR
// bpoints := 1 ;
43879: LD_ADDR_VAR 0 10
43883: PUSH
43884: LD_INT 1
43886: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43887: LD_VAR 0 6
43891: PPUSH
43892: CALL_OW 247
43896: PUSH
43897: LD_INT 1
43899: DOUBLE
43900: EQUAL
43901: IFTRUE 43905
43903: GO 44487
43905: POP
// begin if GetClass ( i ) = 1 then
43906: LD_VAR 0 6
43910: PPUSH
43911: CALL_OW 257
43915: PUSH
43916: LD_INT 1
43918: EQUAL
43919: IFFALSE 43940
// points := [ 10 , 5 , 3 ] ;
43921: LD_ADDR_VAR 0 9
43925: PUSH
43926: LD_INT 10
43928: PUSH
43929: LD_INT 5
43931: PUSH
43932: LD_INT 3
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: LIST
43939: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43940: LD_VAR 0 6
43944: PPUSH
43945: CALL_OW 257
43949: PUSH
43950: LD_INT 2
43952: PUSH
43953: LD_INT 3
43955: PUSH
43956: LD_INT 4
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: LIST
43963: IN
43964: IFFALSE 43985
// points := [ 3 , 2 , 1 ] ;
43966: LD_ADDR_VAR 0 9
43970: PUSH
43971: LD_INT 3
43973: PUSH
43974: LD_INT 2
43976: PUSH
43977: LD_INT 1
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: LIST
43984: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43985: LD_VAR 0 6
43989: PPUSH
43990: CALL_OW 257
43994: PUSH
43995: LD_INT 5
43997: EQUAL
43998: IFFALSE 44019
// points := [ 130 , 5 , 2 ] ;
44000: LD_ADDR_VAR 0 9
44004: PUSH
44005: LD_INT 130
44007: PUSH
44008: LD_INT 5
44010: PUSH
44011: LD_INT 2
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: LIST
44018: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44019: LD_VAR 0 6
44023: PPUSH
44024: CALL_OW 257
44028: PUSH
44029: LD_INT 8
44031: EQUAL
44032: IFFALSE 44053
// points := [ 35 , 35 , 30 ] ;
44034: LD_ADDR_VAR 0 9
44038: PUSH
44039: LD_INT 35
44041: PUSH
44042: LD_INT 35
44044: PUSH
44045: LD_INT 30
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: LIST
44052: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44053: LD_VAR 0 6
44057: PPUSH
44058: CALL_OW 257
44062: PUSH
44063: LD_INT 9
44065: EQUAL
44066: IFFALSE 44087
// points := [ 20 , 55 , 40 ] ;
44068: LD_ADDR_VAR 0 9
44072: PUSH
44073: LD_INT 20
44075: PUSH
44076: LD_INT 55
44078: PUSH
44079: LD_INT 40
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: LIST
44086: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44087: LD_VAR 0 6
44091: PPUSH
44092: CALL_OW 257
44096: PUSH
44097: LD_INT 12
44099: PUSH
44100: LD_INT 16
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: IN
44107: IFFALSE 44128
// points := [ 5 , 3 , 2 ] ;
44109: LD_ADDR_VAR 0 9
44113: PUSH
44114: LD_INT 5
44116: PUSH
44117: LD_INT 3
44119: PUSH
44120: LD_INT 2
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: LIST
44127: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44128: LD_VAR 0 6
44132: PPUSH
44133: CALL_OW 257
44137: PUSH
44138: LD_INT 17
44140: EQUAL
44141: IFFALSE 44162
// points := [ 100 , 50 , 75 ] ;
44143: LD_ADDR_VAR 0 9
44147: PUSH
44148: LD_INT 100
44150: PUSH
44151: LD_INT 50
44153: PUSH
44154: LD_INT 75
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: LIST
44161: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44162: LD_VAR 0 6
44166: PPUSH
44167: CALL_OW 257
44171: PUSH
44172: LD_INT 15
44174: EQUAL
44175: IFFALSE 44196
// points := [ 10 , 5 , 3 ] ;
44177: LD_ADDR_VAR 0 9
44181: PUSH
44182: LD_INT 10
44184: PUSH
44185: LD_INT 5
44187: PUSH
44188: LD_INT 3
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: LIST
44195: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44196: LD_VAR 0 6
44200: PPUSH
44201: CALL_OW 257
44205: PUSH
44206: LD_INT 14
44208: EQUAL
44209: IFFALSE 44230
// points := [ 10 , 0 , 0 ] ;
44211: LD_ADDR_VAR 0 9
44215: PUSH
44216: LD_INT 10
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: LIST
44229: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44230: LD_VAR 0 6
44234: PPUSH
44235: CALL_OW 257
44239: PUSH
44240: LD_INT 11
44242: EQUAL
44243: IFFALSE 44264
// points := [ 30 , 10 , 5 ] ;
44245: LD_ADDR_VAR 0 9
44249: PUSH
44250: LD_INT 30
44252: PUSH
44253: LD_INT 10
44255: PUSH
44256: LD_INT 5
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: LIST
44263: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44264: LD_VAR 0 1
44268: PPUSH
44269: LD_INT 5
44271: PPUSH
44272: CALL_OW 321
44276: PUSH
44277: LD_INT 2
44279: EQUAL
44280: IFFALSE 44297
// bpoints := bpoints * 1.8 ;
44282: LD_ADDR_VAR 0 10
44286: PUSH
44287: LD_VAR 0 10
44291: PUSH
44292: LD_REAL  1.80000000000000E+0000
44295: MUL
44296: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44297: LD_VAR 0 6
44301: PPUSH
44302: CALL_OW 257
44306: PUSH
44307: LD_INT 1
44309: PUSH
44310: LD_INT 2
44312: PUSH
44313: LD_INT 3
44315: PUSH
44316: LD_INT 4
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: IN
44325: IFFALSE 44345
44327: PUSH
44328: LD_VAR 0 1
44332: PPUSH
44333: LD_INT 51
44335: PPUSH
44336: CALL_OW 321
44340: PUSH
44341: LD_INT 2
44343: EQUAL
44344: AND
44345: IFFALSE 44362
// bpoints := bpoints * 1.2 ;
44347: LD_ADDR_VAR 0 10
44351: PUSH
44352: LD_VAR 0 10
44356: PUSH
44357: LD_REAL  1.20000000000000E+0000
44360: MUL
44361: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44362: LD_VAR 0 6
44366: PPUSH
44367: CALL_OW 257
44371: PUSH
44372: LD_INT 5
44374: PUSH
44375: LD_INT 7
44377: PUSH
44378: LD_INT 9
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: LIST
44385: IN
44386: IFFALSE 44406
44388: PUSH
44389: LD_VAR 0 1
44393: PPUSH
44394: LD_INT 52
44396: PPUSH
44397: CALL_OW 321
44401: PUSH
44402: LD_INT 2
44404: EQUAL
44405: AND
44406: IFFALSE 44423
// bpoints := bpoints * 1.5 ;
44408: LD_ADDR_VAR 0 10
44412: PUSH
44413: LD_VAR 0 10
44417: PUSH
44418: LD_REAL  1.50000000000000E+0000
44421: MUL
44422: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44423: LD_VAR 0 1
44427: PPUSH
44428: LD_INT 66
44430: PPUSH
44431: CALL_OW 321
44435: PUSH
44436: LD_INT 2
44438: EQUAL
44439: IFFALSE 44456
// bpoints := bpoints * 1.1 ;
44441: LD_ADDR_VAR 0 10
44445: PUSH
44446: LD_VAR 0 10
44450: PUSH
44451: LD_REAL  1.10000000000000E+0000
44454: MUL
44455: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44456: LD_ADDR_VAR 0 10
44460: PUSH
44461: LD_VAR 0 10
44465: PUSH
44466: LD_VAR 0 6
44470: PPUSH
44471: LD_INT 1
44473: PPUSH
44474: CALL_OW 259
44478: PUSH
44479: LD_REAL  1.15000000000000E+0000
44482: MUL
44483: MUL
44484: ST_TO_ADDR
// end ; unit_vehicle :
44485: GO 45315
44487: LD_INT 2
44489: DOUBLE
44490: EQUAL
44491: IFTRUE 44495
44493: GO 45303
44495: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44496: LD_VAR 0 6
44500: PPUSH
44501: CALL_OW 264
44505: PUSH
44506: LD_INT 2
44508: PUSH
44509: LD_INT 42
44511: PUSH
44512: LD_INT 24
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: LIST
44519: IN
44520: IFFALSE 44541
// points := [ 25 , 5 , 3 ] ;
44522: LD_ADDR_VAR 0 9
44526: PUSH
44527: LD_INT 25
44529: PUSH
44530: LD_INT 5
44532: PUSH
44533: LD_INT 3
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: LIST
44540: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44541: LD_VAR 0 6
44545: PPUSH
44546: CALL_OW 264
44550: PUSH
44551: LD_INT 4
44553: PUSH
44554: LD_INT 43
44556: PUSH
44557: LD_INT 25
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: LIST
44564: IN
44565: IFFALSE 44586
// points := [ 40 , 15 , 5 ] ;
44567: LD_ADDR_VAR 0 9
44571: PUSH
44572: LD_INT 40
44574: PUSH
44575: LD_INT 15
44577: PUSH
44578: LD_INT 5
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: LIST
44585: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44586: LD_VAR 0 6
44590: PPUSH
44591: CALL_OW 264
44595: PUSH
44596: LD_INT 3
44598: PUSH
44599: LD_INT 23
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: IN
44606: IFFALSE 44627
// points := [ 7 , 25 , 8 ] ;
44608: LD_ADDR_VAR 0 9
44612: PUSH
44613: LD_INT 7
44615: PUSH
44616: LD_INT 25
44618: PUSH
44619: LD_INT 8
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: LIST
44626: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44627: LD_VAR 0 6
44631: PPUSH
44632: CALL_OW 264
44636: PUSH
44637: LD_INT 5
44639: PUSH
44640: LD_INT 27
44642: PUSH
44643: LD_INT 44
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: LIST
44650: IN
44651: IFFALSE 44672
// points := [ 14 , 50 , 16 ] ;
44653: LD_ADDR_VAR 0 9
44657: PUSH
44658: LD_INT 14
44660: PUSH
44661: LD_INT 50
44663: PUSH
44664: LD_INT 16
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: LIST
44671: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44672: LD_VAR 0 6
44676: PPUSH
44677: CALL_OW 264
44681: PUSH
44682: LD_INT 6
44684: PUSH
44685: LD_INT 46
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: IN
44692: IFFALSE 44713
// points := [ 32 , 120 , 70 ] ;
44694: LD_ADDR_VAR 0 9
44698: PUSH
44699: LD_INT 32
44701: PUSH
44702: LD_INT 120
44704: PUSH
44705: LD_INT 70
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: LIST
44712: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44713: LD_VAR 0 6
44717: PPUSH
44718: CALL_OW 264
44722: PUSH
44723: LD_INT 7
44725: PUSH
44726: LD_INT 28
44728: PUSH
44729: LD_INT 45
44731: PUSH
44732: LD_INT 92
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: IN
44741: IFFALSE 44762
// points := [ 35 , 20 , 45 ] ;
44743: LD_ADDR_VAR 0 9
44747: PUSH
44748: LD_INT 35
44750: PUSH
44751: LD_INT 20
44753: PUSH
44754: LD_INT 45
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: LIST
44761: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44762: LD_VAR 0 6
44766: PPUSH
44767: CALL_OW 264
44771: PUSH
44772: LD_INT 47
44774: PUSH
44775: EMPTY
44776: LIST
44777: IN
44778: IFFALSE 44799
// points := [ 67 , 45 , 75 ] ;
44780: LD_ADDR_VAR 0 9
44784: PUSH
44785: LD_INT 67
44787: PUSH
44788: LD_INT 45
44790: PUSH
44791: LD_INT 75
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: LIST
44798: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44799: LD_VAR 0 6
44803: PPUSH
44804: CALL_OW 264
44808: PUSH
44809: LD_INT 26
44811: PUSH
44812: EMPTY
44813: LIST
44814: IN
44815: IFFALSE 44836
// points := [ 120 , 30 , 80 ] ;
44817: LD_ADDR_VAR 0 9
44821: PUSH
44822: LD_INT 120
44824: PUSH
44825: LD_INT 30
44827: PUSH
44828: LD_INT 80
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: LIST
44835: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44836: LD_VAR 0 6
44840: PPUSH
44841: CALL_OW 264
44845: PUSH
44846: LD_INT 22
44848: PUSH
44849: EMPTY
44850: LIST
44851: IN
44852: IFFALSE 44873
// points := [ 40 , 1 , 1 ] ;
44854: LD_ADDR_VAR 0 9
44858: PUSH
44859: LD_INT 40
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: LIST
44872: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44873: LD_VAR 0 6
44877: PPUSH
44878: CALL_OW 264
44882: PUSH
44883: LD_INT 29
44885: PUSH
44886: EMPTY
44887: LIST
44888: IN
44889: IFFALSE 44910
// points := [ 70 , 200 , 400 ] ;
44891: LD_ADDR_VAR 0 9
44895: PUSH
44896: LD_INT 70
44898: PUSH
44899: LD_INT 200
44901: PUSH
44902: LD_INT 400
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: LIST
44909: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44910: LD_VAR 0 6
44914: PPUSH
44915: CALL_OW 264
44919: PUSH
44920: LD_INT 14
44922: PUSH
44923: LD_INT 53
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: IN
44930: IFFALSE 44951
// points := [ 40 , 10 , 20 ] ;
44932: LD_ADDR_VAR 0 9
44936: PUSH
44937: LD_INT 40
44939: PUSH
44940: LD_INT 10
44942: PUSH
44943: LD_INT 20
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: LIST
44950: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44951: LD_VAR 0 6
44955: PPUSH
44956: CALL_OW 264
44960: PUSH
44961: LD_INT 9
44963: PUSH
44964: EMPTY
44965: LIST
44966: IN
44967: IFFALSE 44988
// points := [ 5 , 70 , 20 ] ;
44969: LD_ADDR_VAR 0 9
44973: PUSH
44974: LD_INT 5
44976: PUSH
44977: LD_INT 70
44979: PUSH
44980: LD_INT 20
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: LIST
44987: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44988: LD_VAR 0 6
44992: PPUSH
44993: CALL_OW 264
44997: PUSH
44998: LD_INT 10
45000: PUSH
45001: EMPTY
45002: LIST
45003: IN
45004: IFFALSE 45025
// points := [ 35 , 110 , 70 ] ;
45006: LD_ADDR_VAR 0 9
45010: PUSH
45011: LD_INT 35
45013: PUSH
45014: LD_INT 110
45016: PUSH
45017: LD_INT 70
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: LIST
45024: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45025: LD_VAR 0 6
45029: PPUSH
45030: CALL_OW 265
45034: PUSH
45035: LD_INT 25
45037: EQUAL
45038: IFFALSE 45059
// points := [ 80 , 65 , 100 ] ;
45040: LD_ADDR_VAR 0 9
45044: PUSH
45045: LD_INT 80
45047: PUSH
45048: LD_INT 65
45050: PUSH
45051: LD_INT 100
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: LIST
45058: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45059: LD_VAR 0 6
45063: PPUSH
45064: CALL_OW 263
45068: PUSH
45069: LD_INT 1
45071: EQUAL
45072: IFFALSE 45107
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45074: LD_ADDR_VAR 0 10
45078: PUSH
45079: LD_VAR 0 10
45083: PUSH
45084: LD_VAR 0 6
45088: PPUSH
45089: CALL_OW 311
45093: PPUSH
45094: LD_INT 3
45096: PPUSH
45097: CALL_OW 259
45101: PUSH
45102: LD_INT 4
45104: MUL
45105: MUL
45106: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45107: LD_VAR 0 6
45111: PPUSH
45112: CALL_OW 263
45116: PUSH
45117: LD_INT 2
45119: EQUAL
45120: IFFALSE 45171
// begin j := IsControledBy ( i ) ;
45122: LD_ADDR_VAR 0 7
45126: PUSH
45127: LD_VAR 0 6
45131: PPUSH
45132: CALL_OW 312
45136: ST_TO_ADDR
// if j then
45137: LD_VAR 0 7
45141: IFFALSE 45171
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45143: LD_ADDR_VAR 0 10
45147: PUSH
45148: LD_VAR 0 10
45152: PUSH
45153: LD_VAR 0 7
45157: PPUSH
45158: LD_INT 3
45160: PPUSH
45161: CALL_OW 259
45165: PUSH
45166: LD_INT 3
45168: MUL
45169: MUL
45170: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45171: LD_VAR 0 6
45175: PPUSH
45176: CALL_OW 264
45180: PUSH
45181: LD_INT 5
45183: PUSH
45184: LD_INT 6
45186: PUSH
45187: LD_INT 46
45189: PUSH
45190: LD_INT 44
45192: PUSH
45193: LD_INT 47
45195: PUSH
45196: LD_INT 45
45198: PUSH
45199: LD_INT 28
45201: PUSH
45202: LD_INT 7
45204: PUSH
45205: LD_INT 27
45207: PUSH
45208: LD_INT 29
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: IN
45223: IFFALSE 45243
45225: PUSH
45226: LD_VAR 0 1
45230: PPUSH
45231: LD_INT 52
45233: PPUSH
45234: CALL_OW 321
45238: PUSH
45239: LD_INT 2
45241: EQUAL
45242: AND
45243: IFFALSE 45260
// bpoints := bpoints * 1.2 ;
45245: LD_ADDR_VAR 0 10
45249: PUSH
45250: LD_VAR 0 10
45254: PUSH
45255: LD_REAL  1.20000000000000E+0000
45258: MUL
45259: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45260: LD_VAR 0 6
45264: PPUSH
45265: CALL_OW 264
45269: PUSH
45270: LD_INT 6
45272: PUSH
45273: LD_INT 46
45275: PUSH
45276: LD_INT 47
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: LIST
45283: IN
45284: IFFALSE 45301
// bpoints := bpoints * 1.2 ;
45286: LD_ADDR_VAR 0 10
45290: PUSH
45291: LD_VAR 0 10
45295: PUSH
45296: LD_REAL  1.20000000000000E+0000
45299: MUL
45300: ST_TO_ADDR
// end ; unit_building :
45301: GO 45315
45303: LD_INT 3
45305: DOUBLE
45306: EQUAL
45307: IFTRUE 45311
45309: GO 45314
45311: POP
// ; end ;
45312: GO 45315
45314: POP
// for j = 1 to 3 do
45315: LD_ADDR_VAR 0 7
45319: PUSH
45320: DOUBLE
45321: LD_INT 1
45323: DEC
45324: ST_TO_ADDR
45325: LD_INT 3
45327: PUSH
45328: FOR_TO
45329: IFFALSE 45382
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45331: LD_ADDR_VAR 0 5
45335: PUSH
45336: LD_VAR 0 5
45340: PPUSH
45341: LD_VAR 0 7
45345: PPUSH
45346: LD_VAR 0 5
45350: PUSH
45351: LD_VAR 0 7
45355: ARRAY
45356: PUSH
45357: LD_VAR 0 9
45361: PUSH
45362: LD_VAR 0 7
45366: ARRAY
45367: PUSH
45368: LD_VAR 0 10
45372: MUL
45373: PLUS
45374: PPUSH
45375: CALL_OW 1
45379: ST_TO_ADDR
45380: GO 45328
45382: POP
45383: POP
// end ;
45384: GO 43857
45386: POP
45387: POP
// result := Replace ( result , 4 , tmp ) ;
45388: LD_ADDR_VAR 0 5
45392: PUSH
45393: LD_VAR 0 5
45397: PPUSH
45398: LD_INT 4
45400: PPUSH
45401: LD_VAR 0 8
45405: PPUSH
45406: CALL_OW 1
45410: ST_TO_ADDR
// end ;
45411: LD_VAR 0 5
45415: RET
// export function DangerAtRange ( unit , range ) ; begin
45416: LD_INT 0
45418: PPUSH
// if not unit then
45419: LD_VAR 0 1
45423: NOT
45424: IFFALSE 45428
// exit ;
45426: GO 45473
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45428: LD_ADDR_VAR 0 3
45432: PUSH
45433: LD_VAR 0 1
45437: PPUSH
45438: CALL_OW 255
45442: PPUSH
45443: LD_VAR 0 1
45447: PPUSH
45448: CALL_OW 250
45452: PPUSH
45453: LD_VAR 0 1
45457: PPUSH
45458: CALL_OW 251
45462: PPUSH
45463: LD_VAR 0 2
45467: PPUSH
45468: CALL 43707 0 4
45472: ST_TO_ADDR
// end ;
45473: LD_VAR 0 3
45477: RET
// export function DangerInArea ( side , area ) ; begin
45478: LD_INT 0
45480: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45481: LD_ADDR_VAR 0 3
45485: PUSH
45486: LD_VAR 0 2
45490: PPUSH
45491: LD_INT 81
45493: PUSH
45494: LD_VAR 0 1
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PPUSH
45503: CALL_OW 70
45507: ST_TO_ADDR
// end ;
45508: LD_VAR 0 3
45512: RET
// export function IsExtension ( b ) ; begin
45513: LD_INT 0
45515: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45516: LD_ADDR_VAR 0 2
45520: PUSH
45521: LD_VAR 0 1
45525: PUSH
45526: LD_INT 23
45528: PUSH
45529: LD_INT 20
45531: PUSH
45532: LD_INT 22
45534: PUSH
45535: LD_INT 17
45537: PUSH
45538: LD_INT 24
45540: PUSH
45541: LD_INT 21
45543: PUSH
45544: LD_INT 19
45546: PUSH
45547: LD_INT 16
45549: PUSH
45550: LD_INT 25
45552: PUSH
45553: LD_INT 18
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: IN
45568: ST_TO_ADDR
// end ;
45569: LD_VAR 0 2
45573: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45574: LD_INT 0
45576: PPUSH
45577: PPUSH
45578: PPUSH
// result := [ ] ;
45579: LD_ADDR_VAR 0 4
45583: PUSH
45584: EMPTY
45585: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45586: LD_ADDR_VAR 0 5
45590: PUSH
45591: LD_VAR 0 2
45595: PPUSH
45596: LD_INT 21
45598: PUSH
45599: LD_INT 3
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PPUSH
45606: CALL_OW 70
45610: ST_TO_ADDR
// if not tmp then
45611: LD_VAR 0 5
45615: NOT
45616: IFFALSE 45620
// exit ;
45618: GO 45684
// if checkLink then
45620: LD_VAR 0 3
45624: IFFALSE 45674
// begin for i in tmp do
45626: LD_ADDR_VAR 0 6
45630: PUSH
45631: LD_VAR 0 5
45635: PUSH
45636: FOR_IN
45637: IFFALSE 45672
// if GetBase ( i ) <> base then
45639: LD_VAR 0 6
45643: PPUSH
45644: CALL_OW 274
45648: PUSH
45649: LD_VAR 0 1
45653: NONEQUAL
45654: IFFALSE 45670
// ComLinkToBase ( base , i ) ;
45656: LD_VAR 0 1
45660: PPUSH
45661: LD_VAR 0 6
45665: PPUSH
45666: CALL_OW 169
45670: GO 45636
45672: POP
45673: POP
// end ; result := tmp ;
45674: LD_ADDR_VAR 0 4
45678: PUSH
45679: LD_VAR 0 5
45683: ST_TO_ADDR
// end ;
45684: LD_VAR 0 4
45688: RET
// export function ComComplete ( units , b ) ; var i ; begin
45689: LD_INT 0
45691: PPUSH
45692: PPUSH
// if not units then
45693: LD_VAR 0 1
45697: NOT
45698: IFFALSE 45702
// exit ;
45700: GO 45792
// for i in units do
45702: LD_ADDR_VAR 0 4
45706: PUSH
45707: LD_VAR 0 1
45711: PUSH
45712: FOR_IN
45713: IFFALSE 45790
// if BuildingStatus ( b ) = bs_build then
45715: LD_VAR 0 2
45719: PPUSH
45720: CALL_OW 461
45724: PUSH
45725: LD_INT 1
45727: EQUAL
45728: IFFALSE 45788
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45730: LD_VAR 0 4
45734: PPUSH
45735: LD_STRING h
45737: PUSH
45738: LD_VAR 0 2
45742: PPUSH
45743: CALL_OW 250
45747: PUSH
45748: LD_VAR 0 2
45752: PPUSH
45753: CALL_OW 251
45757: PUSH
45758: LD_VAR 0 2
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: PUSH
45781: EMPTY
45782: LIST
45783: PPUSH
45784: CALL_OW 446
45788: GO 45712
45790: POP
45791: POP
// end ;
45792: LD_VAR 0 3
45796: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45797: LD_INT 0
45799: PPUSH
45800: PPUSH
45801: PPUSH
45802: PPUSH
45803: PPUSH
45804: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45805: LD_VAR 0 1
45809: NOT
45810: IFTRUE 45827
45812: PUSH
45813: LD_VAR 0 1
45817: PPUSH
45818: CALL_OW 263
45822: PUSH
45823: LD_INT 2
45825: NONEQUAL
45826: OR
45827: IFFALSE 45831
// exit ;
45829: GO 46147
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45831: LD_ADDR_VAR 0 6
45835: PUSH
45836: LD_INT 22
45838: PUSH
45839: LD_VAR 0 1
45843: PPUSH
45844: CALL_OW 255
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 2
45855: PUSH
45856: LD_INT 30
45858: PUSH
45859: LD_INT 36
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 34
45868: PUSH
45869: LD_INT 31
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: LIST
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PPUSH
45885: CALL_OW 69
45889: ST_TO_ADDR
// if not tmp then
45890: LD_VAR 0 6
45894: NOT
45895: IFFALSE 45899
// exit ;
45897: GO 46147
// result := [ ] ;
45899: LD_ADDR_VAR 0 2
45903: PUSH
45904: EMPTY
45905: ST_TO_ADDR
// for i in tmp do
45906: LD_ADDR_VAR 0 3
45910: PUSH
45911: LD_VAR 0 6
45915: PUSH
45916: FOR_IN
45917: IFFALSE 45988
// begin t := UnitsInside ( i ) ;
45919: LD_ADDR_VAR 0 4
45923: PUSH
45924: LD_VAR 0 3
45928: PPUSH
45929: CALL_OW 313
45933: ST_TO_ADDR
// if t then
45934: LD_VAR 0 4
45938: IFFALSE 45986
// for j in t do
45940: LD_ADDR_VAR 0 7
45944: PUSH
45945: LD_VAR 0 4
45949: PUSH
45950: FOR_IN
45951: IFFALSE 45984
// result := Replace ( result , result + 1 , j ) ;
45953: LD_ADDR_VAR 0 2
45957: PUSH
45958: LD_VAR 0 2
45962: PPUSH
45963: LD_VAR 0 2
45967: PUSH
45968: LD_INT 1
45970: PLUS
45971: PPUSH
45972: LD_VAR 0 7
45976: PPUSH
45977: CALL_OW 1
45981: ST_TO_ADDR
45982: GO 45950
45984: POP
45985: POP
// end ;
45986: GO 45916
45988: POP
45989: POP
// if not result then
45990: LD_VAR 0 2
45994: NOT
45995: IFFALSE 45999
// exit ;
45997: GO 46147
// mech := result [ 1 ] ;
45999: LD_ADDR_VAR 0 5
46003: PUSH
46004: LD_VAR 0 2
46008: PUSH
46009: LD_INT 1
46011: ARRAY
46012: ST_TO_ADDR
// if result > 1 then
46013: LD_VAR 0 2
46017: PUSH
46018: LD_INT 1
46020: GREATER
46021: IFFALSE 46133
// begin for i = 2 to result do
46023: LD_ADDR_VAR 0 3
46027: PUSH
46028: DOUBLE
46029: LD_INT 2
46031: DEC
46032: ST_TO_ADDR
46033: LD_VAR 0 2
46037: PUSH
46038: FOR_TO
46039: IFFALSE 46131
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46041: LD_ADDR_VAR 0 4
46045: PUSH
46046: LD_VAR 0 2
46050: PUSH
46051: LD_VAR 0 3
46055: ARRAY
46056: PPUSH
46057: LD_INT 3
46059: PPUSH
46060: CALL_OW 259
46064: PUSH
46065: LD_VAR 0 2
46069: PUSH
46070: LD_VAR 0 3
46074: ARRAY
46075: PPUSH
46076: CALL_OW 432
46080: MINUS
46081: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46082: LD_VAR 0 4
46086: PUSH
46087: LD_VAR 0 5
46091: PPUSH
46092: LD_INT 3
46094: PPUSH
46095: CALL_OW 259
46099: PUSH
46100: LD_VAR 0 5
46104: PPUSH
46105: CALL_OW 432
46109: MINUS
46110: GREATEREQUAL
46111: IFFALSE 46129
// mech := result [ i ] ;
46113: LD_ADDR_VAR 0 5
46117: PUSH
46118: LD_VAR 0 2
46122: PUSH
46123: LD_VAR 0 3
46127: ARRAY
46128: ST_TO_ADDR
// end ;
46129: GO 46038
46131: POP
46132: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46133: LD_VAR 0 1
46137: PPUSH
46138: LD_VAR 0 5
46142: PPUSH
46143: CALL_OW 135
// end ;
46147: LD_VAR 0 2
46151: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46152: LD_INT 0
46154: PPUSH
46155: PPUSH
46156: PPUSH
46157: PPUSH
46158: PPUSH
46159: PPUSH
46160: PPUSH
46161: PPUSH
46162: PPUSH
46163: PPUSH
46164: PPUSH
46165: PPUSH
46166: PPUSH
// result := [ ] ;
46167: LD_ADDR_VAR 0 7
46171: PUSH
46172: EMPTY
46173: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46174: LD_VAR 0 1
46178: PPUSH
46179: CALL_OW 266
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: IN
46194: NOT
46195: IFFALSE 46199
// exit ;
46197: GO 47839
// if name then
46199: LD_VAR 0 3
46203: IFFALSE 46219
// SetBName ( base_dep , name ) ;
46205: LD_VAR 0 1
46209: PPUSH
46210: LD_VAR 0 3
46214: PPUSH
46215: CALL_OW 500
// base := GetBase ( base_dep ) ;
46219: LD_ADDR_VAR 0 15
46223: PUSH
46224: LD_VAR 0 1
46228: PPUSH
46229: CALL_OW 274
46233: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46234: LD_ADDR_VAR 0 16
46238: PUSH
46239: LD_VAR 0 1
46243: PPUSH
46244: CALL_OW 255
46248: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46249: LD_ADDR_VAR 0 17
46253: PUSH
46254: LD_VAR 0 1
46258: PPUSH
46259: CALL_OW 248
46263: ST_TO_ADDR
// if sources then
46264: LD_VAR 0 5
46268: IFFALSE 46315
// for i = 1 to 3 do
46270: LD_ADDR_VAR 0 8
46274: PUSH
46275: DOUBLE
46276: LD_INT 1
46278: DEC
46279: ST_TO_ADDR
46280: LD_INT 3
46282: PUSH
46283: FOR_TO
46284: IFFALSE 46313
// AddResourceType ( base , i , sources [ i ] ) ;
46286: LD_VAR 0 15
46290: PPUSH
46291: LD_VAR 0 8
46295: PPUSH
46296: LD_VAR 0 5
46300: PUSH
46301: LD_VAR 0 8
46305: ARRAY
46306: PPUSH
46307: CALL_OW 276
46311: GO 46283
46313: POP
46314: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46315: LD_ADDR_VAR 0 18
46319: PUSH
46320: LD_VAR 0 15
46324: PPUSH
46325: LD_VAR 0 2
46329: PPUSH
46330: LD_INT 1
46332: PPUSH
46333: CALL 45574 0 3
46337: ST_TO_ADDR
// InitHc ;
46338: CALL_OW 19
// InitUc ;
46342: CALL_OW 18
// uc_side := side ;
46346: LD_ADDR_OWVAR 20
46350: PUSH
46351: LD_VAR 0 16
46355: ST_TO_ADDR
// uc_nation := nation ;
46356: LD_ADDR_OWVAR 21
46360: PUSH
46361: LD_VAR 0 17
46365: ST_TO_ADDR
// if buildings then
46366: LD_VAR 0 18
46370: IFFALSE 47698
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46372: LD_ADDR_VAR 0 19
46376: PUSH
46377: LD_VAR 0 18
46381: PPUSH
46382: LD_INT 2
46384: PUSH
46385: LD_INT 30
46387: PUSH
46388: LD_INT 29
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 30
46397: PUSH
46398: LD_INT 30
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: LIST
46409: PPUSH
46410: CALL_OW 72
46414: ST_TO_ADDR
// if tmp then
46415: LD_VAR 0 19
46419: IFFALSE 46467
// for i in tmp do
46421: LD_ADDR_VAR 0 8
46425: PUSH
46426: LD_VAR 0 19
46430: PUSH
46431: FOR_IN
46432: IFFALSE 46465
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46434: LD_VAR 0 8
46438: PPUSH
46439: CALL_OW 250
46443: PPUSH
46444: LD_VAR 0 8
46448: PPUSH
46449: CALL_OW 251
46453: PPUSH
46454: LD_VAR 0 16
46458: PPUSH
46459: CALL_OW 441
46463: GO 46431
46465: POP
46466: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46467: LD_VAR 0 18
46471: PPUSH
46472: LD_INT 2
46474: PUSH
46475: LD_INT 30
46477: PUSH
46478: LD_INT 32
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 30
46487: PUSH
46488: LD_INT 33
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: LIST
46499: PPUSH
46500: CALL_OW 72
46504: IFFALSE 46592
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46506: LD_ADDR_VAR 0 8
46510: PUSH
46511: LD_VAR 0 18
46515: PPUSH
46516: LD_INT 2
46518: PUSH
46519: LD_INT 30
46521: PUSH
46522: LD_INT 32
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 30
46531: PUSH
46532: LD_INT 33
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: LIST
46543: PPUSH
46544: CALL_OW 72
46548: PUSH
46549: FOR_IN
46550: IFFALSE 46590
// begin if not GetBWeapon ( i ) then
46552: LD_VAR 0 8
46556: PPUSH
46557: CALL_OW 269
46561: NOT
46562: IFFALSE 46588
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46564: LD_VAR 0 8
46568: PPUSH
46569: LD_VAR 0 8
46573: PPUSH
46574: LD_VAR 0 2
46578: PPUSH
46579: CALL 47844 0 2
46583: PPUSH
46584: CALL_OW 431
// end ;
46588: GO 46549
46590: POP
46591: POP
// end ; for i = 1 to personel do
46592: LD_ADDR_VAR 0 8
46596: PUSH
46597: DOUBLE
46598: LD_INT 1
46600: DEC
46601: ST_TO_ADDR
46602: LD_VAR 0 6
46606: PUSH
46607: FOR_TO
46608: IFFALSE 47678
// begin if i > 4 then
46610: LD_VAR 0 8
46614: PUSH
46615: LD_INT 4
46617: GREATER
46618: IFFALSE 46622
// break ;
46620: GO 47678
// case i of 1 :
46622: LD_VAR 0 8
46626: PUSH
46627: LD_INT 1
46629: DOUBLE
46630: EQUAL
46631: IFTRUE 46635
46633: GO 46715
46635: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46636: LD_ADDR_VAR 0 12
46640: PUSH
46641: LD_VAR 0 18
46645: PPUSH
46646: LD_INT 22
46648: PUSH
46649: LD_VAR 0 16
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 58
46660: PUSH
46661: EMPTY
46662: LIST
46663: PUSH
46664: LD_INT 2
46666: PUSH
46667: LD_INT 30
46669: PUSH
46670: LD_INT 32
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 30
46679: PUSH
46680: LD_INT 4
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 30
46689: PUSH
46690: LD_INT 5
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: LIST
46707: PPUSH
46708: CALL_OW 72
46712: ST_TO_ADDR
46713: GO 46937
46715: LD_INT 2
46717: DOUBLE
46718: EQUAL
46719: IFTRUE 46723
46721: GO 46785
46723: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46724: LD_ADDR_VAR 0 12
46728: PUSH
46729: LD_VAR 0 18
46733: PPUSH
46734: LD_INT 22
46736: PUSH
46737: LD_VAR 0 16
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 2
46748: PUSH
46749: LD_INT 30
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 30
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: LIST
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PPUSH
46778: CALL_OW 72
46782: ST_TO_ADDR
46783: GO 46937
46785: LD_INT 3
46787: DOUBLE
46788: EQUAL
46789: IFTRUE 46793
46791: GO 46855
46793: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46794: LD_ADDR_VAR 0 12
46798: PUSH
46799: LD_VAR 0 18
46803: PPUSH
46804: LD_INT 22
46806: PUSH
46807: LD_VAR 0 16
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 2
46818: PUSH
46819: LD_INT 30
46821: PUSH
46822: LD_INT 2
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 30
46831: PUSH
46832: LD_INT 3
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: LIST
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PPUSH
46848: CALL_OW 72
46852: ST_TO_ADDR
46853: GO 46937
46855: LD_INT 4
46857: DOUBLE
46858: EQUAL
46859: IFTRUE 46863
46861: GO 46936
46863: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46864: LD_ADDR_VAR 0 12
46868: PUSH
46869: LD_VAR 0 18
46873: PPUSH
46874: LD_INT 22
46876: PUSH
46877: LD_VAR 0 16
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 2
46888: PUSH
46889: LD_INT 30
46891: PUSH
46892: LD_INT 6
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 30
46901: PUSH
46902: LD_INT 7
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 30
46911: PUSH
46912: LD_INT 8
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PPUSH
46929: CALL_OW 72
46933: ST_TO_ADDR
46934: GO 46937
46936: POP
// if i = 1 then
46937: LD_VAR 0 8
46941: PUSH
46942: LD_INT 1
46944: EQUAL
46945: IFFALSE 47056
// begin tmp := [ ] ;
46947: LD_ADDR_VAR 0 19
46951: PUSH
46952: EMPTY
46953: ST_TO_ADDR
// for j in f do
46954: LD_ADDR_VAR 0 9
46958: PUSH
46959: LD_VAR 0 12
46963: PUSH
46964: FOR_IN
46965: IFFALSE 47038
// if GetBType ( j ) = b_bunker then
46967: LD_VAR 0 9
46971: PPUSH
46972: CALL_OW 266
46976: PUSH
46977: LD_INT 32
46979: EQUAL
46980: IFFALSE 47007
// tmp := Insert ( tmp , 1 , j ) else
46982: LD_ADDR_VAR 0 19
46986: PUSH
46987: LD_VAR 0 19
46991: PPUSH
46992: LD_INT 1
46994: PPUSH
46995: LD_VAR 0 9
46999: PPUSH
47000: CALL_OW 2
47004: ST_TO_ADDR
47005: GO 47036
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47007: LD_ADDR_VAR 0 19
47011: PUSH
47012: LD_VAR 0 19
47016: PPUSH
47017: LD_VAR 0 19
47021: PUSH
47022: LD_INT 1
47024: PLUS
47025: PPUSH
47026: LD_VAR 0 9
47030: PPUSH
47031: CALL_OW 2
47035: ST_TO_ADDR
47036: GO 46964
47038: POP
47039: POP
// if tmp then
47040: LD_VAR 0 19
47044: IFFALSE 47056
// f := tmp ;
47046: LD_ADDR_VAR 0 12
47050: PUSH
47051: LD_VAR 0 19
47055: ST_TO_ADDR
// end ; x := personel [ i ] ;
47056: LD_ADDR_VAR 0 13
47060: PUSH
47061: LD_VAR 0 6
47065: PUSH
47066: LD_VAR 0 8
47070: ARRAY
47071: ST_TO_ADDR
// if x = - 1 then
47072: LD_VAR 0 13
47076: PUSH
47077: LD_INT 1
47079: NEG
47080: EQUAL
47081: IFFALSE 47292
// begin for j in f do
47083: LD_ADDR_VAR 0 9
47087: PUSH
47088: LD_VAR 0 12
47092: PUSH
47093: FOR_IN
47094: IFFALSE 47288
// repeat InitHc ;
47096: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47100: LD_VAR 0 9
47104: PPUSH
47105: CALL_OW 266
47109: PUSH
47110: LD_INT 5
47112: EQUAL
47113: IFFALSE 47183
// begin if UnitsInside ( j ) < 3 then
47115: LD_VAR 0 9
47119: PPUSH
47120: CALL_OW 313
47124: PUSH
47125: LD_INT 3
47127: LESS
47128: IFFALSE 47164
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47130: LD_INT 0
47132: PPUSH
47133: LD_INT 5
47135: PUSH
47136: LD_INT 8
47138: PUSH
47139: LD_INT 9
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: LIST
47146: PUSH
47147: LD_VAR 0 17
47151: ARRAY
47152: PPUSH
47153: LD_VAR 0 4
47157: PPUSH
47158: CALL_OW 380
47162: GO 47181
// PrepareHuman ( false , i , skill ) ;
47164: LD_INT 0
47166: PPUSH
47167: LD_VAR 0 8
47171: PPUSH
47172: LD_VAR 0 4
47176: PPUSH
47177: CALL_OW 380
// end else
47181: GO 47200
// PrepareHuman ( false , i , skill ) ;
47183: LD_INT 0
47185: PPUSH
47186: LD_VAR 0 8
47190: PPUSH
47191: LD_VAR 0 4
47195: PPUSH
47196: CALL_OW 380
// un := CreateHuman ;
47200: LD_ADDR_VAR 0 14
47204: PUSH
47205: CALL_OW 44
47209: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47210: LD_ADDR_VAR 0 7
47214: PUSH
47215: LD_VAR 0 7
47219: PPUSH
47220: LD_INT 1
47222: PPUSH
47223: LD_VAR 0 14
47227: PPUSH
47228: CALL_OW 2
47232: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47233: LD_VAR 0 14
47237: PPUSH
47238: LD_VAR 0 9
47242: PPUSH
47243: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47247: LD_VAR 0 9
47251: PPUSH
47252: CALL_OW 313
47256: PUSH
47257: LD_INT 6
47259: EQUAL
47260: IFTRUE 47284
47262: PUSH
47263: LD_VAR 0 9
47267: PPUSH
47268: CALL_OW 266
47272: PUSH
47273: LD_INT 32
47275: PUSH
47276: LD_INT 31
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: IN
47283: OR
47284: IFFALSE 47096
47286: GO 47093
47288: POP
47289: POP
// end else
47290: GO 47676
// for j = 1 to x do
47292: LD_ADDR_VAR 0 9
47296: PUSH
47297: DOUBLE
47298: LD_INT 1
47300: DEC
47301: ST_TO_ADDR
47302: LD_VAR 0 13
47306: PUSH
47307: FOR_TO
47308: IFFALSE 47674
// begin InitHc ;
47310: CALL_OW 19
// if not f then
47314: LD_VAR 0 12
47318: NOT
47319: IFFALSE 47408
// begin PrepareHuman ( false , i , skill ) ;
47321: LD_INT 0
47323: PPUSH
47324: LD_VAR 0 8
47328: PPUSH
47329: LD_VAR 0 4
47333: PPUSH
47334: CALL_OW 380
// un := CreateHuman ;
47338: LD_ADDR_VAR 0 14
47342: PUSH
47343: CALL_OW 44
47347: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47348: LD_ADDR_VAR 0 7
47352: PUSH
47353: LD_VAR 0 7
47357: PPUSH
47358: LD_INT 1
47360: PPUSH
47361: LD_VAR 0 14
47365: PPUSH
47366: CALL_OW 2
47370: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47371: LD_VAR 0 14
47375: PPUSH
47376: LD_VAR 0 1
47380: PPUSH
47381: CALL_OW 250
47385: PPUSH
47386: LD_VAR 0 1
47390: PPUSH
47391: CALL_OW 251
47395: PPUSH
47396: LD_INT 10
47398: PPUSH
47399: LD_INT 0
47401: PPUSH
47402: CALL_OW 50
// continue ;
47406: GO 47307
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47408: LD_VAR 0 12
47412: PUSH
47413: LD_INT 1
47415: ARRAY
47416: PPUSH
47417: CALL_OW 313
47421: IFFALSE 47449
47423: PUSH
47424: LD_VAR 0 12
47428: PUSH
47429: LD_INT 1
47431: ARRAY
47432: PPUSH
47433: CALL_OW 266
47437: PUSH
47438: LD_INT 32
47440: PUSH
47441: LD_INT 31
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: IN
47448: AND
47449: IFTRUE 47470
47451: PUSH
47452: LD_VAR 0 12
47456: PUSH
47457: LD_INT 1
47459: ARRAY
47460: PPUSH
47461: CALL_OW 313
47465: PUSH
47466: LD_INT 6
47468: EQUAL
47469: OR
47470: IFFALSE 47490
// f := Delete ( f , 1 ) ;
47472: LD_ADDR_VAR 0 12
47476: PUSH
47477: LD_VAR 0 12
47481: PPUSH
47482: LD_INT 1
47484: PPUSH
47485: CALL_OW 3
47489: ST_TO_ADDR
// if not f then
47490: LD_VAR 0 12
47494: NOT
47495: IFFALSE 47513
// begin x := x + 2 ;
47497: LD_ADDR_VAR 0 13
47501: PUSH
47502: LD_VAR 0 13
47506: PUSH
47507: LD_INT 2
47509: PLUS
47510: ST_TO_ADDR
// continue ;
47511: GO 47307
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47513: LD_VAR 0 12
47517: PUSH
47518: LD_INT 1
47520: ARRAY
47521: PPUSH
47522: CALL_OW 266
47526: PUSH
47527: LD_INT 5
47529: EQUAL
47530: IFFALSE 47604
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47532: LD_VAR 0 12
47536: PUSH
47537: LD_INT 1
47539: ARRAY
47540: PPUSH
47541: CALL_OW 313
47545: PUSH
47546: LD_INT 3
47548: LESS
47549: IFFALSE 47585
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47551: LD_INT 0
47553: PPUSH
47554: LD_INT 5
47556: PUSH
47557: LD_INT 8
47559: PUSH
47560: LD_INT 9
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: LIST
47567: PUSH
47568: LD_VAR 0 17
47572: ARRAY
47573: PPUSH
47574: LD_VAR 0 4
47578: PPUSH
47579: CALL_OW 380
47583: GO 47602
// PrepareHuman ( false , i , skill ) ;
47585: LD_INT 0
47587: PPUSH
47588: LD_VAR 0 8
47592: PPUSH
47593: LD_VAR 0 4
47597: PPUSH
47598: CALL_OW 380
// end else
47602: GO 47621
// PrepareHuman ( false , i , skill ) ;
47604: LD_INT 0
47606: PPUSH
47607: LD_VAR 0 8
47611: PPUSH
47612: LD_VAR 0 4
47616: PPUSH
47617: CALL_OW 380
// un := CreateHuman ;
47621: LD_ADDR_VAR 0 14
47625: PUSH
47626: CALL_OW 44
47630: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47631: LD_ADDR_VAR 0 7
47635: PUSH
47636: LD_VAR 0 7
47640: PPUSH
47641: LD_INT 1
47643: PPUSH
47644: LD_VAR 0 14
47648: PPUSH
47649: CALL_OW 2
47653: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47654: LD_VAR 0 14
47658: PPUSH
47659: LD_VAR 0 12
47663: PUSH
47664: LD_INT 1
47666: ARRAY
47667: PPUSH
47668: CALL_OW 52
// end ;
47672: GO 47307
47674: POP
47675: POP
// end ;
47676: GO 46607
47678: POP
47679: POP
// result := result ^ buildings ;
47680: LD_ADDR_VAR 0 7
47684: PUSH
47685: LD_VAR 0 7
47689: PUSH
47690: LD_VAR 0 18
47694: ADD
47695: ST_TO_ADDR
// end else
47696: GO 47839
// begin for i = 1 to personel do
47698: LD_ADDR_VAR 0 8
47702: PUSH
47703: DOUBLE
47704: LD_INT 1
47706: DEC
47707: ST_TO_ADDR
47708: LD_VAR 0 6
47712: PUSH
47713: FOR_TO
47714: IFFALSE 47837
// begin if i > 4 then
47716: LD_VAR 0 8
47720: PUSH
47721: LD_INT 4
47723: GREATER
47724: IFFALSE 47728
// break ;
47726: GO 47837
// x := personel [ i ] ;
47728: LD_ADDR_VAR 0 13
47732: PUSH
47733: LD_VAR 0 6
47737: PUSH
47738: LD_VAR 0 8
47742: ARRAY
47743: ST_TO_ADDR
// if x = - 1 then
47744: LD_VAR 0 13
47748: PUSH
47749: LD_INT 1
47751: NEG
47752: EQUAL
47753: IFFALSE 47757
// continue ;
47755: GO 47713
// PrepareHuman ( false , i , skill ) ;
47757: LD_INT 0
47759: PPUSH
47760: LD_VAR 0 8
47764: PPUSH
47765: LD_VAR 0 4
47769: PPUSH
47770: CALL_OW 380
// un := CreateHuman ;
47774: LD_ADDR_VAR 0 14
47778: PUSH
47779: CALL_OW 44
47783: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47784: LD_VAR 0 14
47788: PPUSH
47789: LD_VAR 0 1
47793: PPUSH
47794: CALL_OW 250
47798: PPUSH
47799: LD_VAR 0 1
47803: PPUSH
47804: CALL_OW 251
47808: PPUSH
47809: LD_INT 10
47811: PPUSH
47812: LD_INT 0
47814: PPUSH
47815: CALL_OW 50
// result := result ^ un ;
47819: LD_ADDR_VAR 0 7
47823: PUSH
47824: LD_VAR 0 7
47828: PUSH
47829: LD_VAR 0 14
47833: ADD
47834: ST_TO_ADDR
// end ;
47835: GO 47713
47837: POP
47838: POP
// end ; end ;
47839: LD_VAR 0 7
47843: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47844: LD_INT 0
47846: PPUSH
47847: PPUSH
47848: PPUSH
47849: PPUSH
47850: PPUSH
47851: PPUSH
47852: PPUSH
47853: PPUSH
47854: PPUSH
47855: PPUSH
47856: PPUSH
47857: PPUSH
47858: PPUSH
47859: PPUSH
47860: PPUSH
47861: PPUSH
// result := false ;
47862: LD_ADDR_VAR 0 3
47866: PUSH
47867: LD_INT 0
47869: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47870: LD_VAR 0 1
47874: NOT
47875: IFTRUE 47900
47877: PUSH
47878: LD_VAR 0 1
47882: PPUSH
47883: CALL_OW 266
47887: PUSH
47888: LD_INT 32
47890: PUSH
47891: LD_INT 33
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: IN
47898: NOT
47899: OR
47900: IFFALSE 47904
// exit ;
47902: GO 49039
// nat := GetNation ( tower ) ;
47904: LD_ADDR_VAR 0 12
47908: PUSH
47909: LD_VAR 0 1
47913: PPUSH
47914: CALL_OW 248
47918: ST_TO_ADDR
// side := GetSide ( tower ) ;
47919: LD_ADDR_VAR 0 16
47923: PUSH
47924: LD_VAR 0 1
47928: PPUSH
47929: CALL_OW 255
47933: ST_TO_ADDR
// x := GetX ( tower ) ;
47934: LD_ADDR_VAR 0 10
47938: PUSH
47939: LD_VAR 0 1
47943: PPUSH
47944: CALL_OW 250
47948: ST_TO_ADDR
// y := GetY ( tower ) ;
47949: LD_ADDR_VAR 0 11
47953: PUSH
47954: LD_VAR 0 1
47958: PPUSH
47959: CALL_OW 251
47963: ST_TO_ADDR
// if not x or not y then
47964: LD_VAR 0 10
47968: NOT
47969: IFTRUE 47978
47971: PUSH
47972: LD_VAR 0 11
47976: NOT
47977: OR
47978: IFFALSE 47982
// exit ;
47980: GO 49039
// weapon := 0 ;
47982: LD_ADDR_VAR 0 18
47986: PUSH
47987: LD_INT 0
47989: ST_TO_ADDR
// fac_list := [ ] ;
47990: LD_ADDR_VAR 0 17
47994: PUSH
47995: EMPTY
47996: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47997: LD_ADDR_VAR 0 6
48001: PUSH
48002: LD_VAR 0 1
48006: PPUSH
48007: CALL_OW 274
48011: PPUSH
48012: LD_VAR 0 2
48016: PPUSH
48017: LD_INT 0
48019: PPUSH
48020: CALL 45574 0 3
48024: PPUSH
48025: LD_INT 30
48027: PUSH
48028: LD_INT 3
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PPUSH
48035: CALL_OW 72
48039: ST_TO_ADDR
// if not factories then
48040: LD_VAR 0 6
48044: NOT
48045: IFFALSE 48049
// exit ;
48047: GO 49039
// for i in factories do
48049: LD_ADDR_VAR 0 8
48053: PUSH
48054: LD_VAR 0 6
48058: PUSH
48059: FOR_IN
48060: IFFALSE 48085
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48062: LD_ADDR_VAR 0 17
48066: PUSH
48067: LD_VAR 0 17
48071: PUSH
48072: LD_VAR 0 8
48076: PPUSH
48077: CALL_OW 478
48081: UNION
48082: ST_TO_ADDR
48083: GO 48059
48085: POP
48086: POP
// if not fac_list then
48087: LD_VAR 0 17
48091: NOT
48092: IFFALSE 48096
// exit ;
48094: GO 49039
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48096: LD_ADDR_VAR 0 5
48100: PUSH
48101: LD_INT 4
48103: PUSH
48104: LD_INT 5
48106: PUSH
48107: LD_INT 9
48109: PUSH
48110: LD_INT 10
48112: PUSH
48113: LD_INT 6
48115: PUSH
48116: LD_INT 7
48118: PUSH
48119: LD_INT 11
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 27
48133: PUSH
48134: LD_INT 28
48136: PUSH
48137: LD_INT 26
48139: PUSH
48140: LD_INT 30
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 43
48151: PUSH
48152: LD_INT 44
48154: PUSH
48155: LD_INT 46
48157: PUSH
48158: LD_INT 45
48160: PUSH
48161: LD_INT 47
48163: PUSH
48164: LD_INT 49
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: LIST
48179: PUSH
48180: LD_VAR 0 12
48184: ARRAY
48185: ST_TO_ADDR
// list := list isect fac_list ;
48186: LD_ADDR_VAR 0 5
48190: PUSH
48191: LD_VAR 0 5
48195: PUSH
48196: LD_VAR 0 17
48200: ISECT
48201: ST_TO_ADDR
// if not list then
48202: LD_VAR 0 5
48206: NOT
48207: IFFALSE 48211
// exit ;
48209: GO 49039
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48211: LD_VAR 0 12
48215: PUSH
48216: LD_INT 3
48218: EQUAL
48219: IFFALSE 48231
48221: PUSH
48222: LD_INT 49
48224: PUSH
48225: LD_VAR 0 5
48229: IN
48230: AND
48231: IFFALSE 48251
48233: PUSH
48234: LD_INT 31
48236: PPUSH
48237: LD_VAR 0 16
48241: PPUSH
48242: CALL_OW 321
48246: PUSH
48247: LD_INT 2
48249: EQUAL
48250: AND
48251: IFFALSE 48311
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48253: LD_INT 22
48255: PUSH
48256: LD_VAR 0 16
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 35
48267: PUSH
48268: LD_INT 49
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 91
48277: PUSH
48278: LD_VAR 0 1
48282: PUSH
48283: LD_INT 10
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: LIST
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: LIST
48295: PPUSH
48296: CALL_OW 69
48300: NOT
48301: IFFALSE 48311
// weapon := ru_time_lapser ;
48303: LD_ADDR_VAR 0 18
48307: PUSH
48308: LD_INT 49
48310: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48311: LD_VAR 0 12
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: LD_INT 2
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: IN
48326: IFFALSE 48350
48328: PUSH
48329: LD_INT 11
48331: PUSH
48332: LD_VAR 0 5
48336: IN
48337: IFTRUE 48349
48339: PUSH
48340: LD_INT 30
48342: PUSH
48343: LD_VAR 0 5
48347: IN
48348: OR
48349: AND
48350: IFFALSE 48370
48352: PUSH
48353: LD_INT 6
48355: PPUSH
48356: LD_VAR 0 16
48360: PPUSH
48361: CALL_OW 321
48365: PUSH
48366: LD_INT 2
48368: EQUAL
48369: AND
48370: IFFALSE 48537
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48372: LD_INT 22
48374: PUSH
48375: LD_VAR 0 16
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 2
48386: PUSH
48387: LD_INT 35
48389: PUSH
48390: LD_INT 11
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 35
48399: PUSH
48400: LD_INT 30
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 91
48414: PUSH
48415: LD_VAR 0 1
48419: PUSH
48420: LD_INT 18
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: LIST
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: LIST
48432: PPUSH
48433: CALL_OW 69
48437: NOT
48438: IFFALSE 48514
48440: PUSH
48441: LD_INT 22
48443: PUSH
48444: LD_VAR 0 16
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 2
48455: PUSH
48456: LD_INT 30
48458: PUSH
48459: LD_INT 32
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 30
48468: PUSH
48469: LD_INT 33
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 91
48483: PUSH
48484: LD_VAR 0 1
48488: PUSH
48489: LD_INT 12
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: LIST
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: LIST
48501: PUSH
48502: EMPTY
48503: LIST
48504: PPUSH
48505: CALL_OW 69
48509: PUSH
48510: LD_INT 2
48512: GREATER
48513: AND
48514: IFFALSE 48537
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48516: LD_ADDR_VAR 0 18
48520: PUSH
48521: LD_INT 11
48523: PUSH
48524: LD_INT 30
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_VAR 0 12
48535: ARRAY
48536: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48537: LD_VAR 0 18
48541: NOT
48542: IFFALSE 48562
48544: PUSH
48545: LD_INT 40
48547: PPUSH
48548: LD_VAR 0 16
48552: PPUSH
48553: CALL_OW 321
48557: PUSH
48558: LD_INT 2
48560: EQUAL
48561: AND
48562: IFFALSE 48598
48564: PUSH
48565: LD_INT 7
48567: PUSH
48568: LD_VAR 0 5
48572: IN
48573: IFTRUE 48585
48575: PUSH
48576: LD_INT 28
48578: PUSH
48579: LD_VAR 0 5
48583: IN
48584: OR
48585: IFTRUE 48597
48587: PUSH
48588: LD_INT 45
48590: PUSH
48591: LD_VAR 0 5
48595: IN
48596: OR
48597: AND
48598: IFFALSE 48852
// begin hex := GetHexInfo ( x , y ) ;
48600: LD_ADDR_VAR 0 4
48604: PUSH
48605: LD_VAR 0 10
48609: PPUSH
48610: LD_VAR 0 11
48614: PPUSH
48615: CALL_OW 546
48619: ST_TO_ADDR
// if hex [ 1 ] then
48620: LD_VAR 0 4
48624: PUSH
48625: LD_INT 1
48627: ARRAY
48628: IFFALSE 48632
// exit ;
48630: GO 49039
// height := hex [ 2 ] ;
48632: LD_ADDR_VAR 0 15
48636: PUSH
48637: LD_VAR 0 4
48641: PUSH
48642: LD_INT 2
48644: ARRAY
48645: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48646: LD_ADDR_VAR 0 14
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: LD_INT 2
48656: PUSH
48657: LD_INT 3
48659: PUSH
48660: LD_INT 5
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: ST_TO_ADDR
// for i in tmp do
48669: LD_ADDR_VAR 0 8
48673: PUSH
48674: LD_VAR 0 14
48678: PUSH
48679: FOR_IN
48680: IFFALSE 48850
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48682: LD_ADDR_VAR 0 9
48686: PUSH
48687: LD_VAR 0 10
48691: PPUSH
48692: LD_VAR 0 8
48696: PPUSH
48697: LD_INT 5
48699: PPUSH
48700: CALL_OW 272
48704: PUSH
48705: LD_VAR 0 11
48709: PPUSH
48710: LD_VAR 0 8
48714: PPUSH
48715: LD_INT 5
48717: PPUSH
48718: CALL_OW 273
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48727: LD_VAR 0 9
48731: PUSH
48732: LD_INT 1
48734: ARRAY
48735: PPUSH
48736: LD_VAR 0 9
48740: PUSH
48741: LD_INT 2
48743: ARRAY
48744: PPUSH
48745: CALL_OW 488
48749: IFFALSE 48848
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48751: LD_ADDR_VAR 0 4
48755: PUSH
48756: LD_VAR 0 9
48760: PUSH
48761: LD_INT 1
48763: ARRAY
48764: PPUSH
48765: LD_VAR 0 9
48769: PUSH
48770: LD_INT 2
48772: ARRAY
48773: PPUSH
48774: CALL_OW 546
48778: ST_TO_ADDR
// if hex [ 1 ] then
48779: LD_VAR 0 4
48783: PUSH
48784: LD_INT 1
48786: ARRAY
48787: IFFALSE 48791
// continue ;
48789: GO 48679
// h := hex [ 2 ] ;
48791: LD_ADDR_VAR 0 13
48795: PUSH
48796: LD_VAR 0 4
48800: PUSH
48801: LD_INT 2
48803: ARRAY
48804: ST_TO_ADDR
// if h + 7 < height then
48805: LD_VAR 0 13
48809: PUSH
48810: LD_INT 7
48812: PLUS
48813: PUSH
48814: LD_VAR 0 15
48818: LESS
48819: IFFALSE 48848
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48821: LD_ADDR_VAR 0 18
48825: PUSH
48826: LD_INT 7
48828: PUSH
48829: LD_INT 28
48831: PUSH
48832: LD_INT 45
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: LIST
48839: PUSH
48840: LD_VAR 0 12
48844: ARRAY
48845: ST_TO_ADDR
// break ;
48846: GO 48850
// end ; end ; end ;
48848: GO 48679
48850: POP
48851: POP
// end ; if not weapon then
48852: LD_VAR 0 18
48856: NOT
48857: IFFALSE 48917
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48859: LD_ADDR_VAR 0 5
48863: PUSH
48864: LD_VAR 0 5
48868: PUSH
48869: LD_INT 11
48871: PUSH
48872: LD_INT 30
48874: PUSH
48875: LD_INT 49
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: LIST
48882: DIFF
48883: ST_TO_ADDR
// if not list then
48884: LD_VAR 0 5
48888: NOT
48889: IFFALSE 48893
// exit ;
48891: GO 49039
// weapon := list [ rand ( 1 , list ) ] ;
48893: LD_ADDR_VAR 0 18
48897: PUSH
48898: LD_VAR 0 5
48902: PUSH
48903: LD_INT 1
48905: PPUSH
48906: LD_VAR 0 5
48910: PPUSH
48911: CALL_OW 12
48915: ARRAY
48916: ST_TO_ADDR
// end ; if weapon then
48917: LD_VAR 0 18
48921: IFFALSE 49039
// begin tmp := CostOfWeapon ( weapon ) ;
48923: LD_ADDR_VAR 0 14
48927: PUSH
48928: LD_VAR 0 18
48932: PPUSH
48933: CALL_OW 451
48937: ST_TO_ADDR
// j := GetBase ( tower ) ;
48938: LD_ADDR_VAR 0 9
48942: PUSH
48943: LD_VAR 0 1
48947: PPUSH
48948: CALL_OW 274
48952: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48953: LD_VAR 0 9
48957: PPUSH
48958: LD_INT 1
48960: PPUSH
48961: CALL_OW 275
48965: PUSH
48966: LD_VAR 0 14
48970: PUSH
48971: LD_INT 1
48973: ARRAY
48974: GREATEREQUAL
48975: IFFALSE 49001
48977: PUSH
48978: LD_VAR 0 9
48982: PPUSH
48983: LD_INT 2
48985: PPUSH
48986: CALL_OW 275
48990: PUSH
48991: LD_VAR 0 14
48995: PUSH
48996: LD_INT 2
48998: ARRAY
48999: GREATEREQUAL
49000: AND
49001: IFFALSE 49027
49003: PUSH
49004: LD_VAR 0 9
49008: PPUSH
49009: LD_INT 3
49011: PPUSH
49012: CALL_OW 275
49016: PUSH
49017: LD_VAR 0 14
49021: PUSH
49022: LD_INT 3
49024: ARRAY
49025: GREATEREQUAL
49026: AND
49027: IFFALSE 49039
// result := weapon ;
49029: LD_ADDR_VAR 0 3
49033: PUSH
49034: LD_VAR 0 18
49038: ST_TO_ADDR
// end ; end ;
49039: LD_VAR 0 3
49043: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49044: LD_INT 0
49046: PPUSH
49047: PPUSH
// result := true ;
49048: LD_ADDR_VAR 0 3
49052: PUSH
49053: LD_INT 1
49055: ST_TO_ADDR
// if array1 = array2 then
49056: LD_VAR 0 1
49060: PUSH
49061: LD_VAR 0 2
49065: EQUAL
49066: IFFALSE 49126
// begin for i = 1 to array1 do
49068: LD_ADDR_VAR 0 4
49072: PUSH
49073: DOUBLE
49074: LD_INT 1
49076: DEC
49077: ST_TO_ADDR
49078: LD_VAR 0 1
49082: PUSH
49083: FOR_TO
49084: IFFALSE 49122
// if array1 [ i ] <> array2 [ i ] then
49086: LD_VAR 0 1
49090: PUSH
49091: LD_VAR 0 4
49095: ARRAY
49096: PUSH
49097: LD_VAR 0 2
49101: PUSH
49102: LD_VAR 0 4
49106: ARRAY
49107: NONEQUAL
49108: IFFALSE 49120
// begin result := false ;
49110: LD_ADDR_VAR 0 3
49114: PUSH
49115: LD_INT 0
49117: ST_TO_ADDR
// break ;
49118: GO 49122
// end ;
49120: GO 49083
49122: POP
49123: POP
// end else
49124: GO 49134
// result := false ;
49126: LD_ADDR_VAR 0 3
49130: PUSH
49131: LD_INT 0
49133: ST_TO_ADDR
// end ;
49134: LD_VAR 0 3
49138: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49139: LD_INT 0
49141: PPUSH
49142: PPUSH
// if not array1 or not array2 then
49143: LD_VAR 0 1
49147: NOT
49148: IFTRUE 49157
49150: PUSH
49151: LD_VAR 0 2
49155: NOT
49156: OR
49157: IFFALSE 49161
// exit ;
49159: GO 49225
// result := true ;
49161: LD_ADDR_VAR 0 3
49165: PUSH
49166: LD_INT 1
49168: ST_TO_ADDR
// for i = 1 to array1 do
49169: LD_ADDR_VAR 0 4
49173: PUSH
49174: DOUBLE
49175: LD_INT 1
49177: DEC
49178: ST_TO_ADDR
49179: LD_VAR 0 1
49183: PUSH
49184: FOR_TO
49185: IFFALSE 49223
// if array1 [ i ] <> array2 [ i ] then
49187: LD_VAR 0 1
49191: PUSH
49192: LD_VAR 0 4
49196: ARRAY
49197: PUSH
49198: LD_VAR 0 2
49202: PUSH
49203: LD_VAR 0 4
49207: ARRAY
49208: NONEQUAL
49209: IFFALSE 49221
// begin result := false ;
49211: LD_ADDR_VAR 0 3
49215: PUSH
49216: LD_INT 0
49218: ST_TO_ADDR
// break ;
49219: GO 49223
// end ;
49221: GO 49184
49223: POP
49224: POP
// end ;
49225: LD_VAR 0 3
49229: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49230: LD_INT 0
49232: PPUSH
49233: PPUSH
49234: PPUSH
// pom := GetBase ( fac ) ;
49235: LD_ADDR_VAR 0 5
49239: PUSH
49240: LD_VAR 0 1
49244: PPUSH
49245: CALL_OW 274
49249: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49250: LD_ADDR_VAR 0 4
49254: PUSH
49255: LD_VAR 0 2
49259: PUSH
49260: LD_INT 1
49262: ARRAY
49263: PPUSH
49264: LD_VAR 0 2
49268: PUSH
49269: LD_INT 2
49271: ARRAY
49272: PPUSH
49273: LD_VAR 0 2
49277: PUSH
49278: LD_INT 3
49280: ARRAY
49281: PPUSH
49282: LD_VAR 0 2
49286: PUSH
49287: LD_INT 4
49289: ARRAY
49290: PPUSH
49291: CALL_OW 449
49295: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49296: LD_ADDR_VAR 0 3
49300: PUSH
49301: LD_VAR 0 5
49305: PPUSH
49306: LD_INT 1
49308: PPUSH
49309: CALL_OW 275
49313: PUSH
49314: LD_VAR 0 4
49318: PUSH
49319: LD_INT 1
49321: ARRAY
49322: GREATEREQUAL
49323: IFFALSE 49349
49325: PUSH
49326: LD_VAR 0 5
49330: PPUSH
49331: LD_INT 2
49333: PPUSH
49334: CALL_OW 275
49338: PUSH
49339: LD_VAR 0 4
49343: PUSH
49344: LD_INT 2
49346: ARRAY
49347: GREATEREQUAL
49348: AND
49349: IFFALSE 49375
49351: PUSH
49352: LD_VAR 0 5
49356: PPUSH
49357: LD_INT 3
49359: PPUSH
49360: CALL_OW 275
49364: PUSH
49365: LD_VAR 0 4
49369: PUSH
49370: LD_INT 3
49372: ARRAY
49373: GREATEREQUAL
49374: AND
49375: ST_TO_ADDR
// end ;
49376: LD_VAR 0 3
49380: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49381: LD_INT 0
49383: PPUSH
49384: PPUSH
49385: PPUSH
49386: PPUSH
// pom := GetBase ( building ) ;
49387: LD_ADDR_VAR 0 3
49391: PUSH
49392: LD_VAR 0 1
49396: PPUSH
49397: CALL_OW 274
49401: ST_TO_ADDR
// if not pom then
49402: LD_VAR 0 3
49406: NOT
49407: IFFALSE 49411
// exit ;
49409: GO 49585
// btype := GetBType ( building ) ;
49411: LD_ADDR_VAR 0 5
49415: PUSH
49416: LD_VAR 0 1
49420: PPUSH
49421: CALL_OW 266
49425: ST_TO_ADDR
// if btype = b_armoury then
49426: LD_VAR 0 5
49430: PUSH
49431: LD_INT 4
49433: EQUAL
49434: IFFALSE 49444
// btype := b_barracks ;
49436: LD_ADDR_VAR 0 5
49440: PUSH
49441: LD_INT 5
49443: ST_TO_ADDR
// if btype = b_depot then
49444: LD_VAR 0 5
49448: PUSH
49449: LD_INT 0
49451: EQUAL
49452: IFFALSE 49462
// btype := b_warehouse ;
49454: LD_ADDR_VAR 0 5
49458: PUSH
49459: LD_INT 1
49461: ST_TO_ADDR
// if btype = b_workshop then
49462: LD_VAR 0 5
49466: PUSH
49467: LD_INT 2
49469: EQUAL
49470: IFFALSE 49480
// btype := b_factory ;
49472: LD_ADDR_VAR 0 5
49476: PUSH
49477: LD_INT 3
49479: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49480: LD_ADDR_VAR 0 4
49484: PUSH
49485: LD_VAR 0 5
49489: PPUSH
49490: LD_VAR 0 1
49494: PPUSH
49495: CALL_OW 248
49499: PPUSH
49500: CALL_OW 450
49504: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49505: LD_ADDR_VAR 0 2
49509: PUSH
49510: LD_VAR 0 3
49514: PPUSH
49515: LD_INT 1
49517: PPUSH
49518: CALL_OW 275
49522: PUSH
49523: LD_VAR 0 4
49527: PUSH
49528: LD_INT 1
49530: ARRAY
49531: GREATEREQUAL
49532: IFFALSE 49558
49534: PUSH
49535: LD_VAR 0 3
49539: PPUSH
49540: LD_INT 2
49542: PPUSH
49543: CALL_OW 275
49547: PUSH
49548: LD_VAR 0 4
49552: PUSH
49553: LD_INT 2
49555: ARRAY
49556: GREATEREQUAL
49557: AND
49558: IFFALSE 49584
49560: PUSH
49561: LD_VAR 0 3
49565: PPUSH
49566: LD_INT 3
49568: PPUSH
49569: CALL_OW 275
49573: PUSH
49574: LD_VAR 0 4
49578: PUSH
49579: LD_INT 3
49581: ARRAY
49582: GREATEREQUAL
49583: AND
49584: ST_TO_ADDR
// end ;
49585: LD_VAR 0 2
49589: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49590: LD_INT 0
49592: PPUSH
49593: PPUSH
49594: PPUSH
// pom := GetBase ( building ) ;
49595: LD_ADDR_VAR 0 4
49599: PUSH
49600: LD_VAR 0 1
49604: PPUSH
49605: CALL_OW 274
49609: ST_TO_ADDR
// if not pom then
49610: LD_VAR 0 4
49614: NOT
49615: IFFALSE 49619
// exit ;
49617: GO 49724
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49619: LD_ADDR_VAR 0 5
49623: PUSH
49624: LD_VAR 0 2
49628: PPUSH
49629: LD_VAR 0 1
49633: PPUSH
49634: CALL_OW 248
49638: PPUSH
49639: CALL_OW 450
49643: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49644: LD_ADDR_VAR 0 3
49648: PUSH
49649: LD_VAR 0 4
49653: PPUSH
49654: LD_INT 1
49656: PPUSH
49657: CALL_OW 275
49661: PUSH
49662: LD_VAR 0 5
49666: PUSH
49667: LD_INT 1
49669: ARRAY
49670: GREATEREQUAL
49671: IFFALSE 49697
49673: PUSH
49674: LD_VAR 0 4
49678: PPUSH
49679: LD_INT 2
49681: PPUSH
49682: CALL_OW 275
49686: PUSH
49687: LD_VAR 0 5
49691: PUSH
49692: LD_INT 2
49694: ARRAY
49695: GREATEREQUAL
49696: AND
49697: IFFALSE 49723
49699: PUSH
49700: LD_VAR 0 4
49704: PPUSH
49705: LD_INT 3
49707: PPUSH
49708: CALL_OW 275
49712: PUSH
49713: LD_VAR 0 5
49717: PUSH
49718: LD_INT 3
49720: ARRAY
49721: GREATEREQUAL
49722: AND
49723: ST_TO_ADDR
// end ;
49724: LD_VAR 0 3
49728: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49729: LD_INT 0
49731: PPUSH
49732: PPUSH
49733: PPUSH
49734: PPUSH
49735: PPUSH
49736: PPUSH
49737: PPUSH
49738: PPUSH
49739: PPUSH
49740: PPUSH
49741: PPUSH
// result := false ;
49742: LD_ADDR_VAR 0 8
49746: PUSH
49747: LD_INT 0
49749: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49750: LD_VAR 0 5
49754: NOT
49755: IFTRUE 49764
49757: PUSH
49758: LD_VAR 0 1
49762: NOT
49763: OR
49764: IFTRUE 49773
49766: PUSH
49767: LD_VAR 0 2
49771: NOT
49772: OR
49773: IFTRUE 49782
49775: PUSH
49776: LD_VAR 0 3
49780: NOT
49781: OR
49782: IFFALSE 49786
// exit ;
49784: GO 50612
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49786: LD_ADDR_VAR 0 14
49790: PUSH
49791: LD_VAR 0 1
49795: PPUSH
49796: LD_VAR 0 2
49800: PPUSH
49801: LD_VAR 0 3
49805: PPUSH
49806: LD_VAR 0 4
49810: PPUSH
49811: LD_VAR 0 5
49815: PUSH
49816: LD_INT 1
49818: ARRAY
49819: PPUSH
49820: CALL_OW 248
49824: PPUSH
49825: LD_INT 0
49827: PPUSH
49828: CALL 51893 0 6
49832: ST_TO_ADDR
// if not hexes then
49833: LD_VAR 0 14
49837: NOT
49838: IFFALSE 49842
// exit ;
49840: GO 50612
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49842: LD_ADDR_VAR 0 17
49846: PUSH
49847: LD_VAR 0 5
49851: PPUSH
49852: LD_INT 22
49854: PUSH
49855: LD_VAR 0 13
49859: PPUSH
49860: CALL_OW 255
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 2
49871: PUSH
49872: LD_INT 30
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 30
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: LIST
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PPUSH
49901: CALL_OW 72
49905: ST_TO_ADDR
// for i = 1 to hexes do
49906: LD_ADDR_VAR 0 9
49910: PUSH
49911: DOUBLE
49912: LD_INT 1
49914: DEC
49915: ST_TO_ADDR
49916: LD_VAR 0 14
49920: PUSH
49921: FOR_TO
49922: IFFALSE 50610
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49924: LD_ADDR_VAR 0 13
49928: PUSH
49929: LD_VAR 0 14
49933: PUSH
49934: LD_VAR 0 9
49938: ARRAY
49939: PUSH
49940: LD_INT 1
49942: ARRAY
49943: PPUSH
49944: LD_VAR 0 14
49948: PUSH
49949: LD_VAR 0 9
49953: ARRAY
49954: PUSH
49955: LD_INT 2
49957: ARRAY
49958: PPUSH
49959: CALL_OW 428
49963: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49964: LD_VAR 0 14
49968: PUSH
49969: LD_VAR 0 9
49973: ARRAY
49974: PUSH
49975: LD_INT 1
49977: ARRAY
49978: PPUSH
49979: LD_VAR 0 14
49983: PUSH
49984: LD_VAR 0 9
49988: ARRAY
49989: PUSH
49990: LD_INT 2
49992: ARRAY
49993: PPUSH
49994: CALL_OW 351
49998: IFTRUE 50037
50000: PUSH
50001: LD_VAR 0 14
50005: PUSH
50006: LD_VAR 0 9
50010: ARRAY
50011: PUSH
50012: LD_INT 1
50014: ARRAY
50015: PPUSH
50016: LD_VAR 0 14
50020: PUSH
50021: LD_VAR 0 9
50025: ARRAY
50026: PUSH
50027: LD_INT 2
50029: ARRAY
50030: PPUSH
50031: CALL_OW 488
50035: NOT
50036: OR
50037: IFTRUE 50054
50039: PUSH
50040: LD_VAR 0 13
50044: PPUSH
50045: CALL_OW 247
50049: PUSH
50050: LD_INT 3
50052: EQUAL
50053: OR
50054: IFFALSE 50060
// exit ;
50056: POP
50057: POP
50058: GO 50612
// if not tmp then
50060: LD_VAR 0 13
50064: NOT
50065: IFFALSE 50069
// continue ;
50067: GO 49921
// result := true ;
50069: LD_ADDR_VAR 0 8
50073: PUSH
50074: LD_INT 1
50076: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50077: LD_VAR 0 6
50081: IFFALSE 50098
50083: PUSH
50084: LD_VAR 0 13
50088: PPUSH
50089: CALL_OW 247
50093: PUSH
50094: LD_INT 2
50096: EQUAL
50097: AND
50098: IFFALSE 50115
50100: PUSH
50101: LD_VAR 0 13
50105: PPUSH
50106: CALL_OW 263
50110: PUSH
50111: LD_INT 1
50113: EQUAL
50114: AND
50115: IFFALSE 50279
// begin if IsDrivenBy ( tmp ) then
50117: LD_VAR 0 13
50121: PPUSH
50122: CALL_OW 311
50126: IFFALSE 50130
// continue ;
50128: GO 49921
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50130: LD_VAR 0 6
50134: PPUSH
50135: LD_INT 3
50137: PUSH
50138: LD_INT 60
50140: PUSH
50141: EMPTY
50142: LIST
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 3
50150: PUSH
50151: LD_INT 55
50153: PUSH
50154: EMPTY
50155: LIST
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PPUSH
50165: CALL_OW 72
50169: IFFALSE 50277
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50171: LD_ADDR_VAR 0 18
50175: PUSH
50176: LD_VAR 0 6
50180: PPUSH
50181: LD_INT 3
50183: PUSH
50184: LD_INT 60
50186: PUSH
50187: EMPTY
50188: LIST
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 3
50196: PUSH
50197: LD_INT 55
50199: PUSH
50200: EMPTY
50201: LIST
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PPUSH
50211: CALL_OW 72
50215: PUSH
50216: LD_INT 1
50218: ARRAY
50219: ST_TO_ADDR
// if IsInUnit ( driver ) then
50220: LD_VAR 0 18
50224: PPUSH
50225: CALL_OW 310
50229: IFFALSE 50240
// ComExit ( driver ) ;
50231: LD_VAR 0 18
50235: PPUSH
50236: CALL 75883 0 1
// AddComEnterUnit ( driver , tmp ) ;
50240: LD_VAR 0 18
50244: PPUSH
50245: LD_VAR 0 13
50249: PPUSH
50250: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50254: LD_VAR 0 18
50258: PPUSH
50259: LD_VAR 0 7
50263: PPUSH
50264: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50268: LD_VAR 0 18
50272: PPUSH
50273: CALL_OW 181
// end ; continue ;
50277: GO 49921
// end ; if not cleaners or not tmp in cleaners then
50279: LD_VAR 0 6
50283: NOT
50284: IFTRUE 50299
50286: PUSH
50287: LD_VAR 0 13
50291: PUSH
50292: LD_VAR 0 6
50296: IN
50297: NOT
50298: OR
50299: IFFALSE 50608
// begin if dep then
50301: LD_VAR 0 17
50305: IFFALSE 50441
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50307: LD_ADDR_VAR 0 16
50311: PUSH
50312: LD_VAR 0 17
50316: PUSH
50317: LD_INT 1
50319: ARRAY
50320: PPUSH
50321: CALL_OW 250
50325: PPUSH
50326: LD_VAR 0 17
50330: PUSH
50331: LD_INT 1
50333: ARRAY
50334: PPUSH
50335: CALL_OW 254
50339: PPUSH
50340: LD_INT 5
50342: PPUSH
50343: CALL_OW 272
50347: PUSH
50348: LD_VAR 0 17
50352: PUSH
50353: LD_INT 1
50355: ARRAY
50356: PPUSH
50357: CALL_OW 251
50361: PPUSH
50362: LD_VAR 0 17
50366: PUSH
50367: LD_INT 1
50369: ARRAY
50370: PPUSH
50371: CALL_OW 254
50375: PPUSH
50376: LD_INT 5
50378: PPUSH
50379: CALL_OW 273
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50388: LD_VAR 0 16
50392: PUSH
50393: LD_INT 1
50395: ARRAY
50396: PPUSH
50397: LD_VAR 0 16
50401: PUSH
50402: LD_INT 2
50404: ARRAY
50405: PPUSH
50406: CALL_OW 488
50410: IFFALSE 50441
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50412: LD_VAR 0 13
50416: PPUSH
50417: LD_VAR 0 16
50421: PUSH
50422: LD_INT 1
50424: ARRAY
50425: PPUSH
50426: LD_VAR 0 16
50430: PUSH
50431: LD_INT 2
50433: ARRAY
50434: PPUSH
50435: CALL_OW 111
// continue ;
50439: GO 49921
// end ; end ; r := GetDir ( tmp ) ;
50441: LD_ADDR_VAR 0 15
50445: PUSH
50446: LD_VAR 0 13
50450: PPUSH
50451: CALL_OW 254
50455: ST_TO_ADDR
// if r = 5 then
50456: LD_VAR 0 15
50460: PUSH
50461: LD_INT 5
50463: EQUAL
50464: IFFALSE 50474
// r := 0 ;
50466: LD_ADDR_VAR 0 15
50470: PUSH
50471: LD_INT 0
50473: ST_TO_ADDR
// for j = r to 5 do
50474: LD_ADDR_VAR 0 10
50478: PUSH
50479: DOUBLE
50480: LD_VAR 0 15
50484: DEC
50485: ST_TO_ADDR
50486: LD_INT 5
50488: PUSH
50489: FOR_TO
50490: IFFALSE 50606
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50492: LD_ADDR_VAR 0 11
50496: PUSH
50497: LD_VAR 0 13
50501: PPUSH
50502: CALL_OW 250
50506: PPUSH
50507: LD_VAR 0 10
50511: PPUSH
50512: LD_INT 2
50514: PPUSH
50515: CALL_OW 272
50519: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50520: LD_ADDR_VAR 0 12
50524: PUSH
50525: LD_VAR 0 13
50529: PPUSH
50530: CALL_OW 251
50534: PPUSH
50535: LD_VAR 0 10
50539: PPUSH
50540: LD_INT 2
50542: PPUSH
50543: CALL_OW 273
50547: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50548: LD_VAR 0 11
50552: PPUSH
50553: LD_VAR 0 12
50557: PPUSH
50558: CALL_OW 488
50562: IFFALSE 50581
50564: PUSH
50565: LD_VAR 0 11
50569: PPUSH
50570: LD_VAR 0 12
50574: PPUSH
50575: CALL_OW 428
50579: NOT
50580: AND
50581: IFFALSE 50604
// begin ComMoveXY ( tmp , _x , _y ) ;
50583: LD_VAR 0 13
50587: PPUSH
50588: LD_VAR 0 11
50592: PPUSH
50593: LD_VAR 0 12
50597: PPUSH
50598: CALL_OW 111
// break ;
50602: GO 50606
// end ; end ;
50604: GO 50489
50606: POP
50607: POP
// end ; end ;
50608: GO 49921
50610: POP
50611: POP
// end ;
50612: LD_VAR 0 8
50616: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50617: LD_INT 0
50619: PPUSH
// result := true ;
50620: LD_ADDR_VAR 0 3
50624: PUSH
50625: LD_INT 1
50627: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50628: LD_VAR 0 2
50632: PUSH
50633: LD_INT 24
50635: DOUBLE
50636: EQUAL
50637: IFTRUE 50647
50639: LD_INT 33
50641: DOUBLE
50642: EQUAL
50643: IFTRUE 50647
50645: GO 50672
50647: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50648: LD_ADDR_VAR 0 3
50652: PUSH
50653: LD_INT 32
50655: PPUSH
50656: LD_VAR 0 1
50660: PPUSH
50661: CALL_OW 321
50665: PUSH
50666: LD_INT 2
50668: EQUAL
50669: ST_TO_ADDR
50670: GO 50988
50672: LD_INT 20
50674: DOUBLE
50675: EQUAL
50676: IFTRUE 50680
50678: GO 50705
50680: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50681: LD_ADDR_VAR 0 3
50685: PUSH
50686: LD_INT 6
50688: PPUSH
50689: LD_VAR 0 1
50693: PPUSH
50694: CALL_OW 321
50698: PUSH
50699: LD_INT 2
50701: EQUAL
50702: ST_TO_ADDR
50703: GO 50988
50705: LD_INT 22
50707: DOUBLE
50708: EQUAL
50709: IFTRUE 50719
50711: LD_INT 36
50713: DOUBLE
50714: EQUAL
50715: IFTRUE 50719
50717: GO 50744
50719: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50720: LD_ADDR_VAR 0 3
50724: PUSH
50725: LD_INT 15
50727: PPUSH
50728: LD_VAR 0 1
50732: PPUSH
50733: CALL_OW 321
50737: PUSH
50738: LD_INT 2
50740: EQUAL
50741: ST_TO_ADDR
50742: GO 50988
50744: LD_INT 30
50746: DOUBLE
50747: EQUAL
50748: IFTRUE 50752
50750: GO 50777
50752: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50753: LD_ADDR_VAR 0 3
50757: PUSH
50758: LD_INT 20
50760: PPUSH
50761: LD_VAR 0 1
50765: PPUSH
50766: CALL_OW 321
50770: PUSH
50771: LD_INT 2
50773: EQUAL
50774: ST_TO_ADDR
50775: GO 50988
50777: LD_INT 28
50779: DOUBLE
50780: EQUAL
50781: IFTRUE 50791
50783: LD_INT 21
50785: DOUBLE
50786: EQUAL
50787: IFTRUE 50791
50789: GO 50816
50791: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50792: LD_ADDR_VAR 0 3
50796: PUSH
50797: LD_INT 21
50799: PPUSH
50800: LD_VAR 0 1
50804: PPUSH
50805: CALL_OW 321
50809: PUSH
50810: LD_INT 2
50812: EQUAL
50813: ST_TO_ADDR
50814: GO 50988
50816: LD_INT 16
50818: DOUBLE
50819: EQUAL
50820: IFTRUE 50824
50822: GO 50849
50824: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50825: LD_ADDR_VAR 0 3
50829: PUSH
50830: LD_INT 84
50832: PPUSH
50833: LD_VAR 0 1
50837: PPUSH
50838: CALL_OW 321
50842: PUSH
50843: LD_INT 2
50845: EQUAL
50846: ST_TO_ADDR
50847: GO 50988
50849: LD_INT 19
50851: DOUBLE
50852: EQUAL
50853: IFTRUE 50863
50855: LD_INT 23
50857: DOUBLE
50858: EQUAL
50859: IFTRUE 50863
50861: GO 50888
50863: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50864: LD_ADDR_VAR 0 3
50868: PUSH
50869: LD_INT 83
50871: PPUSH
50872: LD_VAR 0 1
50876: PPUSH
50877: CALL_OW 321
50881: PUSH
50882: LD_INT 2
50884: EQUAL
50885: ST_TO_ADDR
50886: GO 50988
50888: LD_INT 17
50890: DOUBLE
50891: EQUAL
50892: IFTRUE 50896
50894: GO 50921
50896: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50897: LD_ADDR_VAR 0 3
50901: PUSH
50902: LD_INT 39
50904: PPUSH
50905: LD_VAR 0 1
50909: PPUSH
50910: CALL_OW 321
50914: PUSH
50915: LD_INT 2
50917: EQUAL
50918: ST_TO_ADDR
50919: GO 50988
50921: LD_INT 18
50923: DOUBLE
50924: EQUAL
50925: IFTRUE 50929
50927: GO 50954
50929: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50930: LD_ADDR_VAR 0 3
50934: PUSH
50935: LD_INT 40
50937: PPUSH
50938: LD_VAR 0 1
50942: PPUSH
50943: CALL_OW 321
50947: PUSH
50948: LD_INT 2
50950: EQUAL
50951: ST_TO_ADDR
50952: GO 50988
50954: LD_INT 27
50956: DOUBLE
50957: EQUAL
50958: IFTRUE 50962
50960: GO 50987
50962: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50963: LD_ADDR_VAR 0 3
50967: PUSH
50968: LD_INT 35
50970: PPUSH
50971: LD_VAR 0 1
50975: PPUSH
50976: CALL_OW 321
50980: PUSH
50981: LD_INT 2
50983: EQUAL
50984: ST_TO_ADDR
50985: GO 50988
50987: POP
// end ;
50988: LD_VAR 0 3
50992: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50993: LD_INT 0
50995: PPUSH
50996: PPUSH
50997: PPUSH
50998: PPUSH
50999: PPUSH
51000: PPUSH
51001: PPUSH
51002: PPUSH
51003: PPUSH
51004: PPUSH
51005: PPUSH
// result := false ;
51006: LD_ADDR_VAR 0 6
51010: PUSH
51011: LD_INT 0
51013: ST_TO_ADDR
// if btype = b_depot then
51014: LD_VAR 0 2
51018: PUSH
51019: LD_INT 0
51021: EQUAL
51022: IFFALSE 51034
// begin result := true ;
51024: LD_ADDR_VAR 0 6
51028: PUSH
51029: LD_INT 1
51031: ST_TO_ADDR
// exit ;
51032: GO 51888
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51034: LD_VAR 0 1
51038: NOT
51039: IFTRUE 51064
51041: PUSH
51042: LD_VAR 0 1
51046: PPUSH
51047: CALL_OW 266
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: IN
51062: NOT
51063: OR
51064: IFTRUE 51073
51066: PUSH
51067: LD_VAR 0 2
51071: NOT
51072: OR
51073: IFTRUE 51109
51075: PUSH
51076: LD_VAR 0 5
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: LD_INT 2
51089: PUSH
51090: LD_INT 3
51092: PUSH
51093: LD_INT 4
51095: PUSH
51096: LD_INT 5
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: IN
51107: NOT
51108: OR
51109: IFTRUE 51128
51111: PUSH
51112: LD_VAR 0 3
51116: PPUSH
51117: LD_VAR 0 4
51121: PPUSH
51122: CALL_OW 488
51126: NOT
51127: OR
51128: IFFALSE 51132
// exit ;
51130: GO 51888
// side := GetSide ( depot ) ;
51132: LD_ADDR_VAR 0 9
51136: PUSH
51137: LD_VAR 0 1
51141: PPUSH
51142: CALL_OW 255
51146: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51147: LD_VAR 0 9
51151: PPUSH
51152: LD_VAR 0 2
51156: PPUSH
51157: CALL 50617 0 2
51161: NOT
51162: IFFALSE 51166
// exit ;
51164: GO 51888
// pom := GetBase ( depot ) ;
51166: LD_ADDR_VAR 0 10
51170: PUSH
51171: LD_VAR 0 1
51175: PPUSH
51176: CALL_OW 274
51180: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51181: LD_ADDR_VAR 0 11
51185: PUSH
51186: LD_VAR 0 2
51190: PPUSH
51191: LD_VAR 0 1
51195: PPUSH
51196: CALL_OW 248
51200: PPUSH
51201: CALL_OW 450
51205: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51206: LD_VAR 0 10
51210: PPUSH
51211: LD_INT 1
51213: PPUSH
51214: CALL_OW 275
51218: PUSH
51219: LD_VAR 0 11
51223: PUSH
51224: LD_INT 1
51226: ARRAY
51227: GREATEREQUAL
51228: IFFALSE 51254
51230: PUSH
51231: LD_VAR 0 10
51235: PPUSH
51236: LD_INT 2
51238: PPUSH
51239: CALL_OW 275
51243: PUSH
51244: LD_VAR 0 11
51248: PUSH
51249: LD_INT 2
51251: ARRAY
51252: GREATEREQUAL
51253: AND
51254: IFFALSE 51280
51256: PUSH
51257: LD_VAR 0 10
51261: PPUSH
51262: LD_INT 3
51264: PPUSH
51265: CALL_OW 275
51269: PUSH
51270: LD_VAR 0 11
51274: PUSH
51275: LD_INT 3
51277: ARRAY
51278: GREATEREQUAL
51279: AND
51280: NOT
51281: IFFALSE 51285
// exit ;
51283: GO 51888
// if GetBType ( depot ) = b_depot then
51285: LD_VAR 0 1
51289: PPUSH
51290: CALL_OW 266
51294: PUSH
51295: LD_INT 0
51297: EQUAL
51298: IFFALSE 51310
// dist := 28 else
51300: LD_ADDR_VAR 0 14
51304: PUSH
51305: LD_INT 28
51307: ST_TO_ADDR
51308: GO 51318
// dist := 36 ;
51310: LD_ADDR_VAR 0 14
51314: PUSH
51315: LD_INT 36
51317: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51318: LD_VAR 0 1
51322: PPUSH
51323: LD_VAR 0 3
51327: PPUSH
51328: LD_VAR 0 4
51332: PPUSH
51333: CALL_OW 297
51337: PUSH
51338: LD_VAR 0 14
51342: GREATER
51343: IFFALSE 51347
// exit ;
51345: GO 51888
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51347: LD_ADDR_VAR 0 12
51351: PUSH
51352: LD_VAR 0 2
51356: PPUSH
51357: LD_VAR 0 3
51361: PPUSH
51362: LD_VAR 0 4
51366: PPUSH
51367: LD_VAR 0 5
51371: PPUSH
51372: LD_VAR 0 1
51376: PPUSH
51377: CALL_OW 248
51381: PPUSH
51382: LD_INT 0
51384: PPUSH
51385: CALL 51893 0 6
51389: ST_TO_ADDR
// if not hexes then
51390: LD_VAR 0 12
51394: NOT
51395: IFFALSE 51399
// exit ;
51397: GO 51888
// hex := GetHexInfo ( x , y ) ;
51399: LD_ADDR_VAR 0 15
51403: PUSH
51404: LD_VAR 0 3
51408: PPUSH
51409: LD_VAR 0 4
51413: PPUSH
51414: CALL_OW 546
51418: ST_TO_ADDR
// if hex [ 1 ] then
51419: LD_VAR 0 15
51423: PUSH
51424: LD_INT 1
51426: ARRAY
51427: IFFALSE 51431
// exit ;
51429: GO 51888
// height := hex [ 2 ] ;
51431: LD_ADDR_VAR 0 13
51435: PUSH
51436: LD_VAR 0 15
51440: PUSH
51441: LD_INT 2
51443: ARRAY
51444: ST_TO_ADDR
// for i = 1 to hexes do
51445: LD_ADDR_VAR 0 7
51449: PUSH
51450: DOUBLE
51451: LD_INT 1
51453: DEC
51454: ST_TO_ADDR
51455: LD_VAR 0 12
51459: PUSH
51460: FOR_TO
51461: IFFALSE 51805
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51463: LD_VAR 0 12
51467: PUSH
51468: LD_VAR 0 7
51472: ARRAY
51473: PUSH
51474: LD_INT 1
51476: ARRAY
51477: PPUSH
51478: LD_VAR 0 12
51482: PUSH
51483: LD_VAR 0 7
51487: ARRAY
51488: PUSH
51489: LD_INT 2
51491: ARRAY
51492: PPUSH
51493: CALL_OW 488
51497: NOT
51498: IFTRUE 51540
51500: PUSH
51501: LD_VAR 0 12
51505: PUSH
51506: LD_VAR 0 7
51510: ARRAY
51511: PUSH
51512: LD_INT 1
51514: ARRAY
51515: PPUSH
51516: LD_VAR 0 12
51520: PUSH
51521: LD_VAR 0 7
51525: ARRAY
51526: PUSH
51527: LD_INT 2
51529: ARRAY
51530: PPUSH
51531: CALL_OW 428
51535: PUSH
51536: LD_INT 0
51538: GREATER
51539: OR
51540: IFTRUE 51578
51542: PUSH
51543: LD_VAR 0 12
51547: PUSH
51548: LD_VAR 0 7
51552: ARRAY
51553: PUSH
51554: LD_INT 1
51556: ARRAY
51557: PPUSH
51558: LD_VAR 0 12
51562: PUSH
51563: LD_VAR 0 7
51567: ARRAY
51568: PUSH
51569: LD_INT 2
51571: ARRAY
51572: PPUSH
51573: CALL_OW 351
51577: OR
51578: IFFALSE 51584
// exit ;
51580: POP
51581: POP
51582: GO 51888
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51584: LD_ADDR_VAR 0 8
51588: PUSH
51589: LD_VAR 0 12
51593: PUSH
51594: LD_VAR 0 7
51598: ARRAY
51599: PUSH
51600: LD_INT 1
51602: ARRAY
51603: PPUSH
51604: LD_VAR 0 12
51608: PUSH
51609: LD_VAR 0 7
51613: ARRAY
51614: PUSH
51615: LD_INT 2
51617: ARRAY
51618: PPUSH
51619: CALL_OW 546
51623: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51624: LD_VAR 0 8
51628: PUSH
51629: LD_INT 1
51631: ARRAY
51632: IFTRUE 51654
51634: PUSH
51635: LD_VAR 0 8
51639: PUSH
51640: LD_INT 2
51642: ARRAY
51643: PUSH
51644: LD_VAR 0 13
51648: PUSH
51649: LD_INT 2
51651: PLUS
51652: GREATER
51653: OR
51654: IFTRUE 51676
51656: PUSH
51657: LD_VAR 0 8
51661: PUSH
51662: LD_INT 2
51664: ARRAY
51665: PUSH
51666: LD_VAR 0 13
51670: PUSH
51671: LD_INT 2
51673: MINUS
51674: LESS
51675: OR
51676: IFTRUE 51744
51678: PUSH
51679: LD_VAR 0 8
51683: PUSH
51684: LD_INT 3
51686: ARRAY
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: LD_INT 8
51693: PUSH
51694: LD_INT 9
51696: PUSH
51697: LD_INT 10
51699: PUSH
51700: LD_INT 11
51702: PUSH
51703: LD_INT 12
51705: PUSH
51706: LD_INT 13
51708: PUSH
51709: LD_INT 16
51711: PUSH
51712: LD_INT 17
51714: PUSH
51715: LD_INT 18
51717: PUSH
51718: LD_INT 19
51720: PUSH
51721: LD_INT 20
51723: PUSH
51724: LD_INT 21
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: IN
51742: NOT
51743: OR
51744: IFTRUE 51757
51746: PUSH
51747: LD_VAR 0 8
51751: PUSH
51752: LD_INT 5
51754: ARRAY
51755: NOT
51756: OR
51757: IFTRUE 51797
51759: PUSH
51760: LD_VAR 0 8
51764: PUSH
51765: LD_INT 6
51767: ARRAY
51768: PUSH
51769: LD_INT 1
51771: PUSH
51772: LD_INT 2
51774: PUSH
51775: LD_INT 7
51777: PUSH
51778: LD_INT 9
51780: PUSH
51781: LD_INT 10
51783: PUSH
51784: LD_INT 11
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: IN
51795: NOT
51796: OR
51797: IFFALSE 51803
// exit ;
51799: POP
51800: POP
51801: GO 51888
// end ;
51803: GO 51460
51805: POP
51806: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51807: LD_VAR 0 9
51811: PPUSH
51812: LD_VAR 0 3
51816: PPUSH
51817: LD_VAR 0 4
51821: PPUSH
51822: LD_INT 20
51824: PPUSH
51825: CALL 43707 0 4
51829: PUSH
51830: LD_INT 4
51832: ARRAY
51833: IFFALSE 51837
// exit ;
51835: GO 51888
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51837: LD_VAR 0 2
51841: PUSH
51842: LD_INT 29
51844: PUSH
51845: LD_INT 30
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: IN
51852: IFFALSE 51876
51854: PUSH
51855: LD_VAR 0 3
51859: PPUSH
51860: LD_VAR 0 4
51864: PPUSH
51865: LD_VAR 0 9
51869: PPUSH
51870: CALL_OW 440
51874: NOT
51875: AND
51876: IFFALSE 51880
// exit ;
51878: GO 51888
// result := true ;
51880: LD_ADDR_VAR 0 6
51884: PUSH
51885: LD_INT 1
51887: ST_TO_ADDR
// end ;
51888: LD_VAR 0 6
51892: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51893: LD_INT 0
51895: PPUSH
51896: PPUSH
51897: PPUSH
51898: PPUSH
51899: PPUSH
51900: PPUSH
51901: PPUSH
51902: PPUSH
51903: PPUSH
51904: PPUSH
51905: PPUSH
51906: PPUSH
51907: PPUSH
51908: PPUSH
51909: PPUSH
51910: PPUSH
51911: PPUSH
51912: PPUSH
51913: PPUSH
51914: PPUSH
51915: PPUSH
51916: PPUSH
51917: PPUSH
51918: PPUSH
51919: PPUSH
51920: PPUSH
51921: PPUSH
51922: PPUSH
51923: PPUSH
51924: PPUSH
51925: PPUSH
51926: PPUSH
51927: PPUSH
51928: PPUSH
51929: PPUSH
51930: PPUSH
51931: PPUSH
51932: PPUSH
51933: PPUSH
51934: PPUSH
51935: PPUSH
51936: PPUSH
51937: PPUSH
51938: PPUSH
51939: PPUSH
51940: PPUSH
51941: PPUSH
51942: PPUSH
51943: PPUSH
51944: PPUSH
51945: PPUSH
51946: PPUSH
51947: PPUSH
51948: PPUSH
51949: PPUSH
51950: PPUSH
51951: PPUSH
51952: PPUSH
// result = [ ] ;
51953: LD_ADDR_VAR 0 7
51957: PUSH
51958: EMPTY
51959: ST_TO_ADDR
// temp_list = [ ] ;
51960: LD_ADDR_VAR 0 9
51964: PUSH
51965: EMPTY
51966: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51967: LD_VAR 0 4
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: LD_INT 2
51980: PUSH
51981: LD_INT 3
51983: PUSH
51984: LD_INT 4
51986: PUSH
51987: LD_INT 5
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: IN
51998: NOT
51999: IFTRUE 52042
52001: PUSH
52002: LD_VAR 0 1
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: LD_INT 1
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: IN
52017: IFFALSE 52041
52019: PUSH
52020: LD_VAR 0 5
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: LD_INT 2
52030: PUSH
52031: LD_INT 3
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: LIST
52038: IN
52039: NOT
52040: AND
52041: OR
52042: IFFALSE 52046
// exit ;
52044: GO 70445
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52046: LD_VAR 0 1
52050: PUSH
52051: LD_INT 6
52053: PUSH
52054: LD_INT 7
52056: PUSH
52057: LD_INT 8
52059: PUSH
52060: LD_INT 13
52062: PUSH
52063: LD_INT 12
52065: PUSH
52066: LD_INT 15
52068: PUSH
52069: LD_INT 11
52071: PUSH
52072: LD_INT 14
52074: PUSH
52075: LD_INT 10
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: IN
52089: IFFALSE 52099
// btype = b_lab ;
52091: LD_ADDR_VAR 0 1
52095: PUSH
52096: LD_INT 6
52098: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52099: LD_VAR 0 6
52103: PUSH
52104: LD_INT 0
52106: PUSH
52107: LD_INT 1
52109: PUSH
52110: LD_INT 2
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: LIST
52117: IN
52118: NOT
52119: IFTRUE 52187
52121: PUSH
52122: LD_VAR 0 1
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: LD_INT 2
52135: PUSH
52136: LD_INT 3
52138: PUSH
52139: LD_INT 6
52141: PUSH
52142: LD_INT 36
52144: PUSH
52145: LD_INT 4
52147: PUSH
52148: LD_INT 5
52150: PUSH
52151: LD_INT 31
52153: PUSH
52154: LD_INT 32
52156: PUSH
52157: LD_INT 33
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: IN
52173: NOT
52174: IFFALSE 52186
52176: PUSH
52177: LD_VAR 0 6
52181: PUSH
52182: LD_INT 1
52184: EQUAL
52185: AND
52186: OR
52187: IFTRUE 52219
52189: PUSH
52190: LD_VAR 0 1
52194: PUSH
52195: LD_INT 2
52197: PUSH
52198: LD_INT 3
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: IN
52205: NOT
52206: IFFALSE 52218
52208: PUSH
52209: LD_VAR 0 6
52213: PUSH
52214: LD_INT 2
52216: EQUAL
52217: AND
52218: OR
52219: IFFALSE 52229
// mode = 0 ;
52221: LD_ADDR_VAR 0 6
52225: PUSH
52226: LD_INT 0
52228: ST_TO_ADDR
// case mode of 0 :
52229: LD_VAR 0 6
52233: PUSH
52234: LD_INT 0
52236: DOUBLE
52237: EQUAL
52238: IFTRUE 52242
52240: GO 63695
52242: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52243: LD_ADDR_VAR 0 11
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: LD_INT 1
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: NEG
52325: PUSH
52326: LD_INT 2
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 0
52336: PUSH
52337: LD_INT 2
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 1
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: LD_INT 2
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: LD_INT 2
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: NEG
52379: PUSH
52380: LD_INT 1
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: LD_INT 3
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: LD_INT 3
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: LD_INT 2
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52436: LD_ADDR_VAR 0 12
52440: PUSH
52441: LD_INT 0
52443: PUSH
52444: LD_INT 0
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 0
52453: PUSH
52454: LD_INT 1
52456: NEG
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 1
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: LD_INT 1
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 1
52494: NEG
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 2
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 2
52538: PUSH
52539: LD_INT 1
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 2
52559: NEG
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 2
52570: NEG
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 2
52582: NEG
52583: PUSH
52584: LD_INT 1
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 3
52593: NEG
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 3
52604: NEG
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52632: LD_ADDR_VAR 0 13
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: LD_INT 0
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: LD_INT 1
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 1
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 1
52690: NEG
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: LD_INT 2
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 2
52725: PUSH
52726: LD_INT 1
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 2
52735: PUSH
52736: LD_INT 2
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 1
52745: PUSH
52746: LD_INT 2
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 2
52755: NEG
52756: PUSH
52757: LD_INT 1
52759: NEG
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 2
52767: NEG
52768: PUSH
52769: LD_INT 2
52771: NEG
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 2
52779: NEG
52780: PUSH
52781: LD_INT 3
52783: NEG
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 3
52791: NEG
52792: PUSH
52793: LD_INT 2
52795: NEG
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 3
52803: NEG
52804: PUSH
52805: LD_INT 3
52807: NEG
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52831: LD_ADDR_VAR 0 14
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: PUSH
52860: LD_INT 0
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: LD_INT 1
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: LD_INT 0
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 1
52900: NEG
52901: PUSH
52902: LD_INT 1
52904: NEG
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 1
52912: NEG
52913: PUSH
52914: LD_INT 2
52916: NEG
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: LD_INT 2
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 1
52935: PUSH
52936: LD_INT 1
52938: NEG
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 1
52946: PUSH
52947: LD_INT 2
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 0
52956: PUSH
52957: LD_INT 2
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 1
52966: NEG
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 1
52977: NEG
52978: PUSH
52979: LD_INT 3
52981: NEG
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 0
52989: PUSH
52990: LD_INT 3
52992: NEG
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 1
53000: PUSH
53001: LD_INT 2
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53027: LD_ADDR_VAR 0 15
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 1
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 2
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 2
53129: PUSH
53130: LD_INT 1
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 2
53150: NEG
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 2
53161: NEG
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 2
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 3
53184: PUSH
53185: LD_INT 0
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 3
53194: PUSH
53195: LD_INT 1
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53220: LD_ADDR_VAR 0 16
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: LD_INT 1
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 1
53278: NEG
53279: PUSH
53280: LD_INT 0
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 1
53289: NEG
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 1
53301: NEG
53302: PUSH
53303: LD_INT 2
53305: NEG
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 2
53313: PUSH
53314: LD_INT 1
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 2
53323: PUSH
53324: LD_INT 2
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: LD_INT 2
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 2
53343: NEG
53344: PUSH
53345: LD_INT 1
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 2
53355: NEG
53356: PUSH
53357: LD_INT 2
53359: NEG
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 3
53367: PUSH
53368: LD_INT 2
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 3
53377: PUSH
53378: LD_INT 3
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 2
53387: PUSH
53388: LD_INT 3
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53413: LD_ADDR_VAR 0 17
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: LD_INT 1
53433: NEG
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 1
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 0
53461: PUSH
53462: LD_INT 1
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 1
53471: NEG
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 1
53482: NEG
53483: PUSH
53484: LD_INT 1
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: LD_INT 2
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: LD_INT 2
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 2
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 2
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 2
53548: PUSH
53549: LD_INT 2
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 1
53558: PUSH
53559: LD_INT 2
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 0
53568: PUSH
53569: LD_INT 2
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 2
53589: NEG
53590: PUSH
53591: LD_INT 0
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 2
53600: NEG
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 2
53612: NEG
53613: PUSH
53614: LD_INT 2
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53643: LD_ADDR_VAR 0 18
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: LD_INT 1
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 1
53681: PUSH
53682: LD_INT 1
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 0
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 1
53701: NEG
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 1
53712: NEG
53713: PUSH
53714: LD_INT 1
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: LD_INT 2
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 0
53736: PUSH
53737: LD_INT 2
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 1
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 2
53758: PUSH
53759: LD_INT 0
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 2
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 2
53778: PUSH
53779: LD_INT 2
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: LD_INT 2
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: LD_INT 2
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: LD_INT 1
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 2
53819: NEG
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 2
53830: NEG
53831: PUSH
53832: LD_INT 1
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 2
53842: NEG
53843: PUSH
53844: LD_INT 2
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53873: LD_ADDR_VAR 0 19
53877: PUSH
53878: LD_INT 0
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: LD_INT 1
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: LD_INT 1
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 0
53921: PUSH
53922: LD_INT 1
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: LD_INT 1
53946: NEG
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: LD_INT 2
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: LD_INT 2
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 1
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 2
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 2
53998: PUSH
53999: LD_INT 1
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 2
54008: PUSH
54009: LD_INT 2
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 1
54018: PUSH
54019: LD_INT 2
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: LD_INT 2
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 2
54049: NEG
54050: PUSH
54051: LD_INT 0
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 2
54060: NEG
54061: PUSH
54062: LD_INT 1
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 2
54072: NEG
54073: PUSH
54074: LD_INT 2
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54103: LD_ADDR_VAR 0 20
54107: PUSH
54108: LD_INT 0
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 1
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 1
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: LD_INT 1
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 1
54161: NEG
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: LD_INT 1
54176: NEG
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 1
54184: NEG
54185: PUSH
54186: LD_INT 2
54188: NEG
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: LD_INT 2
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 1
54207: PUSH
54208: LD_INT 1
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 2
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 2
54228: PUSH
54229: LD_INT 1
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 2
54238: PUSH
54239: LD_INT 2
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 1
54248: PUSH
54249: LD_INT 2
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: LD_INT 2
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 1
54268: NEG
54269: PUSH
54270: LD_INT 1
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 2
54279: NEG
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 2
54290: NEG
54291: PUSH
54292: LD_INT 1
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 2
54302: NEG
54303: PUSH
54304: LD_INT 2
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54333: LD_ADDR_VAR 0 21
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: LD_INT 1
54353: NEG
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 1
54371: PUSH
54372: LD_INT 1
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: LD_INT 1
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 1
54402: NEG
54403: PUSH
54404: LD_INT 1
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 1
54414: NEG
54415: PUSH
54416: LD_INT 2
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: LD_INT 2
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: LD_INT 1
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 2
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 2
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 2
54468: PUSH
54469: LD_INT 2
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 1
54478: PUSH
54479: LD_INT 2
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: LD_INT 2
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 1
54498: NEG
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 2
54509: NEG
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 2
54520: NEG
54521: PUSH
54522: LD_INT 1
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 2
54532: NEG
54533: PUSH
54534: LD_INT 2
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54563: LD_ADDR_VAR 0 22
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: LD_INT 1
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 1
54621: NEG
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 1
54632: NEG
54633: PUSH
54634: LD_INT 1
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: LD_INT 2
54648: NEG
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: LD_INT 2
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 1
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 2
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 2
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 2
54698: PUSH
54699: LD_INT 2
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 1
54708: PUSH
54709: LD_INT 2
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: LD_INT 2
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 2
54739: NEG
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 2
54750: NEG
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 2
54762: NEG
54763: PUSH
54764: LD_INT 2
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54793: LD_ADDR_VAR 0 23
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: LD_INT 1
54813: NEG
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: LD_INT 0
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 1
54851: NEG
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 1
54862: NEG
54863: PUSH
54864: LD_INT 1
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 1
54874: NEG
54875: PUSH
54876: LD_INT 2
54878: NEG
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: LD_INT 2
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 1
54897: PUSH
54898: LD_INT 1
54900: NEG
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 2
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 2
54918: PUSH
54919: LD_INT 1
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 2
54928: PUSH
54929: LD_INT 2
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 1
54938: PUSH
54939: LD_INT 2
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: LD_INT 2
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 2
54969: NEG
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 2
54980: NEG
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 2
54992: NEG
54993: PUSH
54994: LD_INT 2
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 2
55004: NEG
55005: PUSH
55006: LD_INT 3
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: NEG
55017: PUSH
55018: LD_INT 3
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: LD_INT 2
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 2
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55073: LD_ADDR_VAR 0 24
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 0
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: LD_INT 1
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: LD_INT 1
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: NEG
55143: PUSH
55144: LD_INT 1
55146: NEG
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: LD_INT 2
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: LD_INT 2
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 2
55188: PUSH
55189: LD_INT 0
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 2
55198: PUSH
55199: LD_INT 1
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 2
55208: PUSH
55209: LD_INT 2
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: PUSH
55219: LD_INT 2
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: LD_INT 2
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 2
55249: NEG
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 2
55260: NEG
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 2
55272: NEG
55273: PUSH
55274: LD_INT 2
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: PUSH
55285: LD_INT 2
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 2
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 3
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 3
55316: PUSH
55317: LD_INT 2
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55349: LD_ADDR_VAR 0 25
55353: PUSH
55354: LD_INT 0
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 0
55366: PUSH
55367: LD_INT 1
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 1
55387: PUSH
55388: LD_INT 1
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: LD_INT 1
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 1
55407: NEG
55408: PUSH
55409: LD_INT 0
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 1
55418: NEG
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 1
55430: NEG
55431: PUSH
55432: LD_INT 2
55434: NEG
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: LD_INT 2
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 2
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 2
55474: PUSH
55475: LD_INT 1
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 2
55484: PUSH
55485: LD_INT 2
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: PUSH
55495: LD_INT 2
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 0
55504: PUSH
55505: LD_INT 2
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 2
55525: NEG
55526: PUSH
55527: LD_INT 0
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 2
55536: NEG
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 2
55548: NEG
55549: PUSH
55550: LD_INT 2
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 3
55560: PUSH
55561: LD_INT 1
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 3
55570: PUSH
55571: LD_INT 2
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 2
55580: PUSH
55581: LD_INT 3
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: LD_INT 3
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55623: LD_ADDR_VAR 0 26
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: LD_INT 0
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: LD_INT 1
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 1
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: LD_INT 1
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 1
55704: NEG
55705: PUSH
55706: LD_INT 2
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 2
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 2
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 2
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 2
55758: PUSH
55759: LD_INT 2
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: PUSH
55769: LD_INT 2
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: LD_INT 2
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 1
55788: NEG
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 2
55799: NEG
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 2
55810: NEG
55811: PUSH
55812: LD_INT 1
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 2
55822: NEG
55823: PUSH
55824: LD_INT 2
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 2
55834: PUSH
55835: LD_INT 3
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: LD_INT 3
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 1
55854: NEG
55855: PUSH
55856: LD_INT 2
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 2
55865: NEG
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55899: LD_ADDR_VAR 0 27
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: LD_INT 1
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: LD_INT 1
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 1
55957: NEG
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: NEG
55981: PUSH
55982: LD_INT 2
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: LD_INT 2
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 2
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 2
56024: PUSH
56025: LD_INT 1
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 2
56034: PUSH
56035: LD_INT 2
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 1
56044: PUSH
56045: LD_INT 2
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: LD_INT 2
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: LD_INT 1
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 2
56075: NEG
56076: PUSH
56077: LD_INT 0
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 2
56086: NEG
56087: PUSH
56088: LD_INT 1
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 2
56098: NEG
56099: PUSH
56100: LD_INT 2
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: LD_INT 2
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 2
56121: NEG
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 3
56132: NEG
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 3
56144: NEG
56145: PUSH
56146: LD_INT 2
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56179: LD_ADDR_VAR 0 28
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: LD_INT 1
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 1
56237: NEG
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 1
56260: NEG
56261: PUSH
56262: LD_INT 2
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: LD_INT 2
56275: NEG
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 2
56294: PUSH
56295: LD_INT 0
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 2
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 2
56314: PUSH
56315: LD_INT 2
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: LD_INT 2
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: LD_INT 2
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 2
56355: NEG
56356: PUSH
56357: LD_INT 0
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 2
56366: NEG
56367: PUSH
56368: LD_INT 1
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 2
56378: NEG
56379: PUSH
56380: LD_INT 2
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 2
56390: NEG
56391: PUSH
56392: LD_INT 3
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: LD_INT 3
56406: NEG
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 3
56414: NEG
56415: PUSH
56416: LD_INT 1
56418: NEG
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 3
56426: NEG
56427: PUSH
56428: LD_INT 2
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56461: LD_ADDR_VAR 0 29
56465: PUSH
56466: LD_INT 0
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: LD_INT 1
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 1
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 1
56499: PUSH
56500: LD_INT 1
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 1
56530: NEG
56531: PUSH
56532: LD_INT 1
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 1
56542: NEG
56543: PUSH
56544: LD_INT 2
56546: NEG
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: LD_INT 2
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 1
56565: PUSH
56566: LD_INT 1
56568: NEG
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 2
56576: PUSH
56577: LD_INT 0
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 2
56586: PUSH
56587: LD_INT 1
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: LD_INT 2
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: LD_INT 2
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: LD_INT 1
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 2
56627: NEG
56628: PUSH
56629: LD_INT 1
56631: NEG
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 2
56639: NEG
56640: PUSH
56641: LD_INT 2
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 2
56651: NEG
56652: PUSH
56653: LD_INT 3
56655: NEG
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 2
56663: PUSH
56664: LD_INT 1
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 3
56674: PUSH
56675: LD_INT 1
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: LD_INT 3
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: LD_INT 2
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 3
56705: NEG
56706: PUSH
56707: LD_INT 2
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56740: LD_ADDR_VAR 0 30
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: LD_INT 0
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 0
56757: PUSH
56758: LD_INT 1
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: PUSH
56769: LD_INT 0
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 1
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 0
56788: PUSH
56789: LD_INT 1
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: NEG
56799: PUSH
56800: LD_INT 0
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: LD_INT 1
56813: NEG
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 1
56821: NEG
56822: PUSH
56823: LD_INT 2
56825: NEG
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: LD_INT 2
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 1
56844: PUSH
56845: LD_INT 1
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 2
56855: PUSH
56856: LD_INT 0
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 2
56865: PUSH
56866: LD_INT 1
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 2
56875: PUSH
56876: LD_INT 2
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 1
56885: PUSH
56886: LD_INT 2
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 1
56895: NEG
56896: PUSH
56897: LD_INT 1
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 2
56906: NEG
56907: PUSH
56908: LD_INT 0
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 2
56917: NEG
56918: PUSH
56919: LD_INT 1
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 1
56929: NEG
56930: PUSH
56931: LD_INT 3
56933: NEG
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 1
56941: PUSH
56942: LD_INT 2
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 3
56952: PUSH
56953: LD_INT 2
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 2
56962: PUSH
56963: LD_INT 3
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 2
56972: NEG
56973: PUSH
56974: LD_INT 1
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 3
56983: NEG
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57018: LD_ADDR_VAR 0 31
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 1
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: LD_INT 1
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: LD_INT 1
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: LD_INT 1
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: LD_INT 2
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 1
57111: PUSH
57112: LD_INT 1
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 2
57122: PUSH
57123: LD_INT 0
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 2
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 2
57142: PUSH
57143: LD_INT 2
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 1
57152: PUSH
57153: LD_INT 2
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 0
57162: PUSH
57163: LD_INT 2
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 1
57172: NEG
57173: PUSH
57174: LD_INT 1
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 2
57183: NEG
57184: PUSH
57185: LD_INT 1
57187: NEG
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 2
57195: NEG
57196: PUSH
57197: LD_INT 2
57199: NEG
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 2
57207: NEG
57208: PUSH
57209: LD_INT 3
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 2
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 3
57230: PUSH
57231: LD_INT 1
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: LD_INT 3
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: LD_INT 2
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 3
57261: NEG
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57296: LD_ADDR_VAR 0 32
57300: PUSH
57301: LD_INT 0
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: LD_INT 1
57316: NEG
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 1
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 1
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: NEG
57355: PUSH
57356: LD_INT 0
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 1
57365: NEG
57366: PUSH
57367: LD_INT 1
57369: NEG
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 1
57377: NEG
57378: PUSH
57379: LD_INT 2
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: LD_INT 2
57392: NEG
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 1
57400: PUSH
57401: LD_INT 1
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 2
57411: PUSH
57412: LD_INT 1
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 2
57421: PUSH
57422: LD_INT 2
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 1
57431: PUSH
57432: LD_INT 2
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 0
57441: PUSH
57442: LD_INT 2
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 1
57451: NEG
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 2
57462: NEG
57463: PUSH
57464: LD_INT 0
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 2
57473: NEG
57474: PUSH
57475: LD_INT 1
57477: NEG
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 1
57485: NEG
57486: PUSH
57487: LD_INT 3
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 1
57497: PUSH
57498: LD_INT 2
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 3
57508: PUSH
57509: LD_INT 2
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 2
57518: PUSH
57519: LD_INT 3
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 2
57528: NEG
57529: PUSH
57530: LD_INT 1
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 3
57539: NEG
57540: PUSH
57541: LD_INT 1
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57574: LD_ADDR_VAR 0 33
57578: PUSH
57579: LD_INT 0
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: LD_INT 1
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: LD_INT 0
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 1
57612: PUSH
57613: LD_INT 1
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 0
57622: PUSH
57623: LD_INT 1
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 1
57632: NEG
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 1
57643: NEG
57644: PUSH
57645: LD_INT 1
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 1
57655: NEG
57656: PUSH
57657: LD_INT 2
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 1
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 2
57678: PUSH
57679: LD_INT 0
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 2
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 1
57698: PUSH
57699: LD_INT 2
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: LD_INT 2
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 1
57718: NEG
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 2
57729: NEG
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 2
57740: NEG
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 2
57752: NEG
57753: PUSH
57754: LD_INT 2
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 2
57764: NEG
57765: PUSH
57766: LD_INT 3
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 2
57776: PUSH
57777: LD_INT 1
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 3
57787: PUSH
57788: LD_INT 1
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: LD_INT 3
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: LD_INT 2
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 3
57818: NEG
57819: PUSH
57820: LD_INT 2
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57853: LD_ADDR_VAR 0 34
57857: PUSH
57858: LD_INT 0
57860: PUSH
57861: LD_INT 0
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: LD_INT 1
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 1
57881: PUSH
57882: LD_INT 0
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 1
57891: PUSH
57892: LD_INT 1
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: LD_INT 1
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 1
57911: NEG
57912: PUSH
57913: LD_INT 0
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 1
57922: NEG
57923: PUSH
57924: LD_INT 1
57926: NEG
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 1
57934: NEG
57935: PUSH
57936: LD_INT 2
57938: NEG
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: LD_INT 2
57949: NEG
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 1
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 2
57968: PUSH
57969: LD_INT 1
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 2
57978: PUSH
57979: LD_INT 2
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 1
57988: PUSH
57989: LD_INT 2
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 2
58009: NEG
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 2
58020: NEG
58021: PUSH
58022: LD_INT 1
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 2
58032: NEG
58033: PUSH
58034: LD_INT 2
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: NEG
58045: PUSH
58046: LD_INT 3
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 1
58056: PUSH
58057: LD_INT 2
58059: NEG
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 3
58067: PUSH
58068: LD_INT 2
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 2
58077: PUSH
58078: LD_INT 3
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 2
58087: NEG
58088: PUSH
58089: LD_INT 1
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 3
58098: NEG
58099: PUSH
58100: LD_INT 1
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58133: LD_ADDR_VAR 0 35
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: LD_INT 1
58153: NEG
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: LD_INT 0
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: PUSH
58172: LD_INT 1
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: LD_INT 1
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 1
58202: NEG
58203: PUSH
58204: LD_INT 1
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 2
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 2
58224: NEG
58225: PUSH
58226: LD_INT 1
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58245: LD_ADDR_VAR 0 36
58249: PUSH
58250: LD_INT 0
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 1
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 0
58293: PUSH
58294: LD_INT 1
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 1
58303: NEG
58304: PUSH
58305: LD_INT 0
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: LD_INT 1
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 1
58326: NEG
58327: PUSH
58328: LD_INT 2
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 1
58338: PUSH
58339: LD_INT 2
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58357: LD_ADDR_VAR 0 37
58361: PUSH
58362: LD_INT 0
58364: PUSH
58365: LD_INT 0
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 0
58374: PUSH
58375: LD_INT 1
58377: NEG
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 1
58385: PUSH
58386: LD_INT 0
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 1
58395: PUSH
58396: LD_INT 1
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 0
58405: PUSH
58406: LD_INT 1
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: LD_INT 0
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: LD_INT 1
58430: NEG
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 1
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 1
58449: NEG
58450: PUSH
58451: LD_INT 1
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58469: LD_ADDR_VAR 0 38
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: LD_INT 0
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 0
58486: PUSH
58487: LD_INT 1
58489: NEG
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: LD_INT 0
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 1
58507: PUSH
58508: LD_INT 1
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 0
58517: PUSH
58518: LD_INT 1
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: LD_INT 1
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 2
58550: PUSH
58551: LD_INT 1
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 2
58560: NEG
58561: PUSH
58562: LD_INT 1
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58581: LD_ADDR_VAR 0 39
58585: PUSH
58586: LD_INT 0
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: LD_INT 1
58601: NEG
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: LD_INT 0
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 1
58619: PUSH
58620: LD_INT 1
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 1
58639: NEG
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: NEG
58651: PUSH
58652: LD_INT 1
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 1
58662: NEG
58663: PUSH
58664: LD_INT 2
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: PUSH
58675: LD_INT 2
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58693: LD_ADDR_VAR 0 40
58697: PUSH
58698: LD_INT 0
58700: PUSH
58701: LD_INT 0
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: LD_INT 1
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 1
58731: PUSH
58732: LD_INT 1
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: LD_INT 1
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: LD_INT 1
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: LD_INT 1
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 1
58785: NEG
58786: PUSH
58787: LD_INT 1
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58805: LD_ADDR_VAR 0 41
58809: PUSH
58810: LD_INT 0
58812: PUSH
58813: LD_INT 0
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 1
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 1
58843: PUSH
58844: LD_INT 1
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 0
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 1
58863: NEG
58864: PUSH
58865: LD_INT 0
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 1
58874: NEG
58875: PUSH
58876: LD_INT 1
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 1
58886: NEG
58887: PUSH
58888: LD_INT 2
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 1
58898: PUSH
58899: LD_INT 1
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 2
58909: PUSH
58910: LD_INT 0
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 2
58919: PUSH
58920: LD_INT 1
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 2
58929: PUSH
58930: LD_INT 2
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 1
58939: PUSH
58940: LD_INT 2
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 1
58949: NEG
58950: PUSH
58951: LD_INT 1
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 2
58960: NEG
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 2
58971: NEG
58972: PUSH
58973: LD_INT 1
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 2
58983: NEG
58984: PUSH
58985: LD_INT 2
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 2
58995: NEG
58996: PUSH
58997: LD_INT 3
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 2
59007: PUSH
59008: LD_INT 1
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 3
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 3
59028: PUSH
59029: LD_INT 1
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 3
59038: PUSH
59039: LD_INT 2
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 3
59048: PUSH
59049: LD_INT 3
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: PUSH
59059: LD_INT 3
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 2
59068: NEG
59069: PUSH
59070: LD_INT 1
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 3
59079: NEG
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 3
59090: NEG
59091: PUSH
59092: LD_INT 1
59094: NEG
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 3
59102: NEG
59103: PUSH
59104: LD_INT 2
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 3
59114: NEG
59115: PUSH
59116: LD_INT 3
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59155: LD_ADDR_VAR 0 42
59159: PUSH
59160: LD_INT 0
59162: PUSH
59163: LD_INT 0
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 0
59172: PUSH
59173: LD_INT 1
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 1
59183: PUSH
59184: LD_INT 0
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 1
59193: PUSH
59194: LD_INT 1
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 1
59213: NEG
59214: PUSH
59215: LD_INT 0
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 1
59224: NEG
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 1
59236: NEG
59237: PUSH
59238: LD_INT 2
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 0
59248: PUSH
59249: LD_INT 2
59251: NEG
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: LD_INT 1
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 2
59270: PUSH
59271: LD_INT 1
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 2
59280: PUSH
59281: LD_INT 2
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 1
59290: PUSH
59291: LD_INT 2
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: LD_INT 2
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 1
59310: NEG
59311: PUSH
59312: LD_INT 1
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 2
59321: NEG
59322: PUSH
59323: LD_INT 1
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 2
59333: NEG
59334: PUSH
59335: LD_INT 2
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 2
59345: NEG
59346: PUSH
59347: LD_INT 3
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 1
59357: NEG
59358: PUSH
59359: LD_INT 3
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: LD_INT 3
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: PUSH
59381: LD_INT 2
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 3
59391: PUSH
59392: LD_INT 2
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 3
59401: PUSH
59402: LD_INT 3
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 2
59411: PUSH
59412: LD_INT 3
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 1
59421: PUSH
59422: LD_INT 3
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: LD_INT 3
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 1
59441: NEG
59442: PUSH
59443: LD_INT 2
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 3
59452: NEG
59453: PUSH
59454: LD_INT 2
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 3
59464: NEG
59465: PUSH
59466: LD_INT 3
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59505: LD_ADDR_VAR 0 43
59509: PUSH
59510: LD_INT 0
59512: PUSH
59513: LD_INT 0
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 0
59522: PUSH
59523: LD_INT 1
59525: NEG
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 1
59533: PUSH
59534: LD_INT 0
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: LD_INT 1
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: LD_INT 1
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 1
59563: NEG
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 1
59574: NEG
59575: PUSH
59576: LD_INT 1
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 1
59586: NEG
59587: PUSH
59588: LD_INT 2
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 0
59598: PUSH
59599: LD_INT 2
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 1
59609: PUSH
59610: LD_INT 1
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 2
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 2
59630: PUSH
59631: LD_INT 1
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 1
59640: PUSH
59641: LD_INT 2
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: LD_INT 2
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 1
59660: NEG
59661: PUSH
59662: LD_INT 1
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 2
59671: NEG
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 2
59682: NEG
59683: PUSH
59684: LD_INT 1
59686: NEG
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 1
59694: NEG
59695: PUSH
59696: LD_INT 3
59698: NEG
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 0
59706: PUSH
59707: LD_INT 3
59709: NEG
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 1
59717: PUSH
59718: LD_INT 2
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 2
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 3
59739: PUSH
59740: LD_INT 0
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 3
59749: PUSH
59750: LD_INT 1
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 1
59759: PUSH
59760: LD_INT 3
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: LD_INT 3
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 1
59779: NEG
59780: PUSH
59781: LD_INT 2
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 2
59790: NEG
59791: PUSH
59792: LD_INT 1
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 3
59801: NEG
59802: PUSH
59803: LD_INT 0
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 3
59812: NEG
59813: PUSH
59814: LD_INT 1
59816: NEG
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59853: LD_ADDR_VAR 0 44
59857: PUSH
59858: LD_INT 0
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: LD_INT 1
59873: NEG
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 1
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 1
59891: PUSH
59892: LD_INT 1
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 0
59901: PUSH
59902: LD_INT 1
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 1
59911: NEG
59912: PUSH
59913: LD_INT 0
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 1
59922: NEG
59923: PUSH
59924: LD_INT 1
59926: NEG
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 1
59934: NEG
59935: PUSH
59936: LD_INT 2
59938: NEG
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 1
59946: PUSH
59947: LD_INT 1
59949: NEG
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 2
59957: PUSH
59958: LD_INT 0
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: LD_INT 1
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 2
59977: PUSH
59978: LD_INT 2
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 1
59987: PUSH
59988: LD_INT 2
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 1
59997: NEG
59998: PUSH
59999: LD_INT 1
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 2
60008: NEG
60009: PUSH
60010: LD_INT 0
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 2
60019: NEG
60020: PUSH
60021: LD_INT 1
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 2
60031: NEG
60032: PUSH
60033: LD_INT 2
60035: NEG
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 2
60043: NEG
60044: PUSH
60045: LD_INT 3
60047: NEG
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 2
60055: PUSH
60056: LD_INT 1
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 3
60066: PUSH
60067: LD_INT 0
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 3
60076: PUSH
60077: LD_INT 1
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 3
60086: PUSH
60087: LD_INT 2
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 3
60096: PUSH
60097: LD_INT 3
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 2
60106: PUSH
60107: LD_INT 3
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 2
60116: NEG
60117: PUSH
60118: LD_INT 1
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 3
60127: NEG
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 3
60138: NEG
60139: PUSH
60140: LD_INT 1
60142: NEG
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 3
60150: NEG
60151: PUSH
60152: LD_INT 2
60154: NEG
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 3
60162: NEG
60163: PUSH
60164: LD_INT 3
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60203: LD_ADDR_VAR 0 45
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: LD_INT 0
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 0
60220: PUSH
60221: LD_INT 1
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 1
60231: PUSH
60232: LD_INT 0
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 1
60241: PUSH
60242: LD_INT 1
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 0
60251: PUSH
60252: LD_INT 1
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 1
60261: NEG
60262: PUSH
60263: LD_INT 0
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 1
60272: NEG
60273: PUSH
60274: LD_INT 1
60276: NEG
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 1
60284: NEG
60285: PUSH
60286: LD_INT 2
60288: NEG
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: LD_INT 2
60299: NEG
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: LD_INT 1
60310: NEG
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 2
60318: PUSH
60319: LD_INT 1
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 2
60328: PUSH
60329: LD_INT 2
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 1
60338: PUSH
60339: LD_INT 2
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: LD_INT 2
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 1
60358: NEG
60359: PUSH
60360: LD_INT 1
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 2
60369: NEG
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 2
60381: NEG
60382: PUSH
60383: LD_INT 2
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 2
60393: NEG
60394: PUSH
60395: LD_INT 3
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 1
60405: NEG
60406: PUSH
60407: LD_INT 3
60409: NEG
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 0
60417: PUSH
60418: LD_INT 3
60420: NEG
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 1
60428: PUSH
60429: LD_INT 2
60431: NEG
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 3
60439: PUSH
60440: LD_INT 2
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 3
60449: PUSH
60450: LD_INT 3
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 2
60459: PUSH
60460: LD_INT 3
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 1
60469: PUSH
60470: LD_INT 3
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 0
60479: PUSH
60480: LD_INT 3
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 1
60489: NEG
60490: PUSH
60491: LD_INT 2
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 3
60500: NEG
60501: PUSH
60502: LD_INT 2
60504: NEG
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 3
60512: NEG
60513: PUSH
60514: LD_INT 3
60516: NEG
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60553: LD_ADDR_VAR 0 46
60557: PUSH
60558: LD_INT 0
60560: PUSH
60561: LD_INT 0
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 0
60570: PUSH
60571: LD_INT 1
60573: NEG
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 1
60581: PUSH
60582: LD_INT 0
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 1
60591: PUSH
60592: LD_INT 1
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 0
60601: PUSH
60602: LD_INT 1
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 1
60611: NEG
60612: PUSH
60613: LD_INT 0
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 1
60622: NEG
60623: PUSH
60624: LD_INT 1
60626: NEG
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 1
60634: NEG
60635: PUSH
60636: LD_INT 2
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 0
60646: PUSH
60647: LD_INT 2
60649: NEG
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 1
60657: PUSH
60658: LD_INT 1
60660: NEG
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 2
60668: PUSH
60669: LD_INT 0
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 2
60678: PUSH
60679: LD_INT 1
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 1
60688: PUSH
60689: LD_INT 2
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 0
60698: PUSH
60699: LD_INT 2
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 1
60708: NEG
60709: PUSH
60710: LD_INT 1
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 2
60719: NEG
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 2
60730: NEG
60731: PUSH
60732: LD_INT 1
60734: NEG
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 1
60742: NEG
60743: PUSH
60744: LD_INT 3
60746: NEG
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: LD_INT 3
60757: NEG
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 1
60765: PUSH
60766: LD_INT 2
60768: NEG
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 2
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 3
60787: PUSH
60788: LD_INT 0
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 3
60797: PUSH
60798: LD_INT 1
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 1
60807: PUSH
60808: LD_INT 3
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 0
60817: PUSH
60818: LD_INT 3
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 1
60827: NEG
60828: PUSH
60829: LD_INT 2
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 2
60838: NEG
60839: PUSH
60840: LD_INT 1
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 3
60849: NEG
60850: PUSH
60851: LD_INT 0
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 3
60860: NEG
60861: PUSH
60862: LD_INT 1
60864: NEG
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60901: LD_ADDR_VAR 0 47
60905: PUSH
60906: LD_INT 0
60908: PUSH
60909: LD_INT 0
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 0
60918: PUSH
60919: LD_INT 1
60921: NEG
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 1
60939: PUSH
60940: LD_INT 1
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 0
60949: PUSH
60950: LD_INT 1
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 1
60959: NEG
60960: PUSH
60961: LD_INT 0
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 1
60970: NEG
60971: PUSH
60972: LD_INT 1
60974: NEG
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 1
60982: NEG
60983: PUSH
60984: LD_INT 2
60986: NEG
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 0
60994: PUSH
60995: LD_INT 2
60997: NEG
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 1
61005: PUSH
61006: LD_INT 1
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 2
61016: NEG
61017: PUSH
61018: LD_INT 1
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 2
61028: NEG
61029: PUSH
61030: LD_INT 2
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61052: LD_ADDR_VAR 0 48
61056: PUSH
61057: LD_INT 0
61059: PUSH
61060: LD_INT 0
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: LD_INT 1
61072: NEG
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 1
61080: PUSH
61081: LD_INT 0
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 1
61090: PUSH
61091: LD_INT 1
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: LD_INT 1
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 1
61110: NEG
61111: PUSH
61112: LD_INT 0
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 1
61121: NEG
61122: PUSH
61123: LD_INT 1
61125: NEG
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 1
61133: NEG
61134: PUSH
61135: LD_INT 2
61137: NEG
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 0
61145: PUSH
61146: LD_INT 2
61148: NEG
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 1
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 2
61167: PUSH
61168: LD_INT 0
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 2
61177: PUSH
61178: LD_INT 1
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61199: LD_ADDR_VAR 0 49
61203: PUSH
61204: LD_INT 0
61206: PUSH
61207: LD_INT 0
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 0
61216: PUSH
61217: LD_INT 1
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 1
61227: PUSH
61228: LD_INT 0
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: LD_INT 1
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 0
61247: PUSH
61248: LD_INT 1
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 1
61257: NEG
61258: PUSH
61259: LD_INT 0
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: LD_INT 1
61272: NEG
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 1
61280: PUSH
61281: LD_INT 1
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 2
61291: PUSH
61292: LD_INT 0
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 2
61301: PUSH
61302: LD_INT 1
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 2
61311: PUSH
61312: LD_INT 2
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 1
61321: PUSH
61322: LD_INT 2
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61343: LD_ADDR_VAR 0 50
61347: PUSH
61348: LD_INT 0
61350: PUSH
61351: LD_INT 0
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 0
61360: PUSH
61361: LD_INT 1
61363: NEG
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 1
61371: PUSH
61372: LD_INT 0
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 1
61381: PUSH
61382: LD_INT 1
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 0
61391: PUSH
61392: LD_INT 1
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 1
61401: NEG
61402: PUSH
61403: LD_INT 0
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 1
61412: NEG
61413: PUSH
61414: LD_INT 1
61416: NEG
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 2
61424: PUSH
61425: LD_INT 1
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 2
61434: PUSH
61435: LD_INT 2
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 1
61444: PUSH
61445: LD_INT 2
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: LD_INT 2
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 1
61464: NEG
61465: PUSH
61466: LD_INT 1
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61487: LD_ADDR_VAR 0 51
61491: PUSH
61492: LD_INT 0
61494: PUSH
61495: LD_INT 0
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 0
61504: PUSH
61505: LD_INT 1
61507: NEG
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 1
61515: PUSH
61516: LD_INT 0
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 1
61525: PUSH
61526: LD_INT 1
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: LD_INT 1
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 1
61545: NEG
61546: PUSH
61547: LD_INT 0
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 1
61556: NEG
61557: PUSH
61558: LD_INT 1
61560: NEG
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 1
61568: PUSH
61569: LD_INT 2
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 0
61578: PUSH
61579: LD_INT 2
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 1
61588: NEG
61589: PUSH
61590: LD_INT 1
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 2
61599: NEG
61600: PUSH
61601: LD_INT 0
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 2
61610: NEG
61611: PUSH
61612: LD_INT 1
61614: NEG
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61634: LD_ADDR_VAR 0 52
61638: PUSH
61639: LD_INT 0
61641: PUSH
61642: LD_INT 0
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 0
61651: PUSH
61652: LD_INT 1
61654: NEG
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 1
61662: PUSH
61663: LD_INT 0
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 1
61672: PUSH
61673: LD_INT 1
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 0
61682: PUSH
61683: LD_INT 1
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 1
61692: NEG
61693: PUSH
61694: LD_INT 0
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 1
61703: NEG
61704: PUSH
61705: LD_INT 1
61707: NEG
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 1
61715: NEG
61716: PUSH
61717: LD_INT 2
61719: NEG
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 1
61727: NEG
61728: PUSH
61729: LD_INT 1
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 2
61738: NEG
61739: PUSH
61740: LD_INT 0
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 2
61749: NEG
61750: PUSH
61751: LD_INT 1
61753: NEG
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 2
61761: NEG
61762: PUSH
61763: LD_INT 2
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61785: LD_ADDR_VAR 0 53
61789: PUSH
61790: LD_INT 0
61792: PUSH
61793: LD_INT 0
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 0
61802: PUSH
61803: LD_INT 1
61805: NEG
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 1
61813: PUSH
61814: LD_INT 0
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 1
61823: PUSH
61824: LD_INT 1
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 0
61833: PUSH
61834: LD_INT 1
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 1
61843: NEG
61844: PUSH
61845: LD_INT 0
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 1
61854: NEG
61855: PUSH
61856: LD_INT 1
61858: NEG
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 1
61866: NEG
61867: PUSH
61868: LD_INT 2
61870: NEG
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 0
61878: PUSH
61879: LD_INT 2
61881: NEG
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 1
61889: PUSH
61890: LD_INT 1
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 2
61900: PUSH
61901: LD_INT 0
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 2
61910: PUSH
61911: LD_INT 1
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: LD_INT 2
61920: PUSH
61921: LD_INT 2
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 1
61930: PUSH
61931: LD_INT 2
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 0
61940: PUSH
61941: LD_INT 2
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 1
61950: NEG
61951: PUSH
61952: LD_INT 1
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 2
61961: NEG
61962: PUSH
61963: LD_INT 0
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 2
61972: NEG
61973: PUSH
61974: LD_INT 1
61976: NEG
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 2
61984: NEG
61985: PUSH
61986: LD_INT 2
61988: NEG
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62015: LD_ADDR_VAR 0 54
62019: PUSH
62020: LD_INT 0
62022: PUSH
62023: LD_INT 0
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 0
62032: PUSH
62033: LD_INT 1
62035: NEG
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 1
62043: PUSH
62044: LD_INT 0
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 1
62053: PUSH
62054: LD_INT 1
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 0
62063: PUSH
62064: LD_INT 1
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 1
62073: NEG
62074: PUSH
62075: LD_INT 0
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 1
62084: NEG
62085: PUSH
62086: LD_INT 1
62088: NEG
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 1
62096: NEG
62097: PUSH
62098: LD_INT 2
62100: NEG
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 0
62108: PUSH
62109: LD_INT 2
62111: NEG
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 1
62119: PUSH
62120: LD_INT 1
62122: NEG
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 2
62130: PUSH
62131: LD_INT 0
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 2
62140: PUSH
62141: LD_INT 1
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 2
62150: PUSH
62151: LD_INT 2
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 1
62160: PUSH
62161: LD_INT 2
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 0
62170: PUSH
62171: LD_INT 2
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 1
62180: NEG
62181: PUSH
62182: LD_INT 1
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 2
62191: NEG
62192: PUSH
62193: LD_INT 0
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 2
62202: NEG
62203: PUSH
62204: LD_INT 1
62206: NEG
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 2
62214: NEG
62215: PUSH
62216: LD_INT 2
62218: NEG
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62245: LD_ADDR_VAR 0 55
62249: PUSH
62250: LD_INT 0
62252: PUSH
62253: LD_INT 0
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: LD_INT 1
62265: NEG
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: LD_INT 0
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 1
62283: PUSH
62284: LD_INT 1
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 0
62293: PUSH
62294: LD_INT 1
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 1
62303: NEG
62304: PUSH
62305: LD_INT 0
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 1
62314: NEG
62315: PUSH
62316: LD_INT 1
62318: NEG
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 1
62326: NEG
62327: PUSH
62328: LD_INT 2
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 0
62338: PUSH
62339: LD_INT 2
62341: NEG
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 1
62349: PUSH
62350: LD_INT 1
62352: NEG
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 2
62360: PUSH
62361: LD_INT 0
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 2
62370: PUSH
62371: LD_INT 1
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 2
62380: PUSH
62381: LD_INT 2
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 1
62390: PUSH
62391: LD_INT 2
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 0
62400: PUSH
62401: LD_INT 2
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 1
62410: NEG
62411: PUSH
62412: LD_INT 1
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 2
62421: NEG
62422: PUSH
62423: LD_INT 0
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 2
62432: NEG
62433: PUSH
62434: LD_INT 1
62436: NEG
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 2
62444: NEG
62445: PUSH
62446: LD_INT 2
62448: NEG
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62475: LD_ADDR_VAR 0 56
62479: PUSH
62480: LD_INT 0
62482: PUSH
62483: LD_INT 0
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: LD_INT 1
62495: NEG
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 1
62503: PUSH
62504: LD_INT 0
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 1
62513: PUSH
62514: LD_INT 1
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 0
62523: PUSH
62524: LD_INT 1
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 1
62533: NEG
62534: PUSH
62535: LD_INT 0
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 1
62544: NEG
62545: PUSH
62546: LD_INT 1
62548: NEG
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 1
62556: NEG
62557: PUSH
62558: LD_INT 2
62560: NEG
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 0
62568: PUSH
62569: LD_INT 2
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 1
62579: PUSH
62580: LD_INT 1
62582: NEG
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 2
62590: PUSH
62591: LD_INT 0
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 2
62600: PUSH
62601: LD_INT 1
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 2
62610: PUSH
62611: LD_INT 2
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 1
62620: PUSH
62621: LD_INT 2
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 0
62630: PUSH
62631: LD_INT 2
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 1
62640: NEG
62641: PUSH
62642: LD_INT 1
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 2
62651: NEG
62652: PUSH
62653: LD_INT 0
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 2
62662: NEG
62663: PUSH
62664: LD_INT 1
62666: NEG
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 2
62674: NEG
62675: PUSH
62676: LD_INT 2
62678: NEG
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62705: LD_ADDR_VAR 0 57
62709: PUSH
62710: LD_INT 0
62712: PUSH
62713: LD_INT 0
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: LD_INT 1
62725: NEG
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 1
62733: PUSH
62734: LD_INT 0
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 1
62743: PUSH
62744: LD_INT 1
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 0
62753: PUSH
62754: LD_INT 1
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 1
62763: NEG
62764: PUSH
62765: LD_INT 0
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 1
62774: NEG
62775: PUSH
62776: LD_INT 1
62778: NEG
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 1
62786: NEG
62787: PUSH
62788: LD_INT 2
62790: NEG
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 0
62798: PUSH
62799: LD_INT 2
62801: NEG
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 1
62809: PUSH
62810: LD_INT 1
62812: NEG
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 2
62820: PUSH
62821: LD_INT 0
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 2
62830: PUSH
62831: LD_INT 1
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 2
62840: PUSH
62841: LD_INT 2
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 1
62850: PUSH
62851: LD_INT 2
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: LD_INT 2
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 1
62870: NEG
62871: PUSH
62872: LD_INT 1
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 2
62881: NEG
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 2
62892: NEG
62893: PUSH
62894: LD_INT 1
62896: NEG
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 2
62904: NEG
62905: PUSH
62906: LD_INT 2
62908: NEG
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62935: LD_ADDR_VAR 0 58
62939: PUSH
62940: LD_INT 0
62942: PUSH
62943: LD_INT 0
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 0
62952: PUSH
62953: LD_INT 1
62955: NEG
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 1
62963: PUSH
62964: LD_INT 0
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 1
62973: PUSH
62974: LD_INT 1
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 0
62983: PUSH
62984: LD_INT 1
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 1
62993: NEG
62994: PUSH
62995: LD_INT 0
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 1
63004: NEG
63005: PUSH
63006: LD_INT 1
63008: NEG
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 1
63016: NEG
63017: PUSH
63018: LD_INT 2
63020: NEG
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 0
63028: PUSH
63029: LD_INT 2
63031: NEG
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 1
63039: PUSH
63040: LD_INT 1
63042: NEG
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 2
63050: PUSH
63051: LD_INT 0
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 2
63060: PUSH
63061: LD_INT 1
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 2
63070: PUSH
63071: LD_INT 2
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 1
63080: PUSH
63081: LD_INT 2
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 0
63090: PUSH
63091: LD_INT 2
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 1
63100: NEG
63101: PUSH
63102: LD_INT 1
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 2
63111: NEG
63112: PUSH
63113: LD_INT 0
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 2
63122: NEG
63123: PUSH
63124: LD_INT 1
63126: NEG
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 2
63134: NEG
63135: PUSH
63136: LD_INT 2
63138: NEG
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63165: LD_ADDR_VAR 0 59
63169: PUSH
63170: LD_INT 0
63172: PUSH
63173: LD_INT 0
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 0
63182: PUSH
63183: LD_INT 1
63185: NEG
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 1
63193: PUSH
63194: LD_INT 0
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 1
63203: PUSH
63204: LD_INT 1
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 0
63213: PUSH
63214: LD_INT 1
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 1
63223: NEG
63224: PUSH
63225: LD_INT 0
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 1
63234: NEG
63235: PUSH
63236: LD_INT 1
63238: NEG
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63253: LD_ADDR_VAR 0 60
63257: PUSH
63258: LD_INT 0
63260: PUSH
63261: LD_INT 0
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 0
63270: PUSH
63271: LD_INT 1
63273: NEG
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 1
63281: PUSH
63282: LD_INT 0
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 1
63291: PUSH
63292: LD_INT 1
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 0
63301: PUSH
63302: LD_INT 1
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 1
63311: NEG
63312: PUSH
63313: LD_INT 0
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 1
63322: NEG
63323: PUSH
63324: LD_INT 1
63326: NEG
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63341: LD_ADDR_VAR 0 61
63345: PUSH
63346: LD_INT 0
63348: PUSH
63349: LD_INT 0
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 0
63358: PUSH
63359: LD_INT 1
63361: NEG
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 1
63369: PUSH
63370: LD_INT 0
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 1
63379: PUSH
63380: LD_INT 1
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 0
63389: PUSH
63390: LD_INT 1
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 1
63399: NEG
63400: PUSH
63401: LD_INT 0
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 1
63410: NEG
63411: PUSH
63412: LD_INT 1
63414: NEG
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63429: LD_ADDR_VAR 0 62
63433: PUSH
63434: LD_INT 0
63436: PUSH
63437: LD_INT 0
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 0
63446: PUSH
63447: LD_INT 1
63449: NEG
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 1
63457: PUSH
63458: LD_INT 0
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 1
63467: PUSH
63468: LD_INT 1
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 0
63477: PUSH
63478: LD_INT 1
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 1
63487: NEG
63488: PUSH
63489: LD_INT 0
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 1
63498: NEG
63499: PUSH
63500: LD_INT 1
63502: NEG
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63517: LD_ADDR_VAR 0 63
63521: PUSH
63522: LD_INT 0
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 0
63534: PUSH
63535: LD_INT 1
63537: NEG
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 1
63545: PUSH
63546: LD_INT 0
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 1
63555: PUSH
63556: LD_INT 1
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 0
63565: PUSH
63566: LD_INT 1
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 1
63575: NEG
63576: PUSH
63577: LD_INT 0
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 1
63586: NEG
63587: PUSH
63588: LD_INT 1
63590: NEG
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63605: LD_ADDR_VAR 0 64
63609: PUSH
63610: LD_INT 0
63612: PUSH
63613: LD_INT 0
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 0
63622: PUSH
63623: LD_INT 1
63625: NEG
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 1
63633: PUSH
63634: LD_INT 0
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 1
63643: PUSH
63644: LD_INT 1
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 0
63653: PUSH
63654: LD_INT 1
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 1
63663: NEG
63664: PUSH
63665: LD_INT 0
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 1
63674: NEG
63675: PUSH
63676: LD_INT 1
63678: NEG
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: ST_TO_ADDR
// end ; 1 :
63693: GO 69590
63695: LD_INT 1
63697: DOUBLE
63698: EQUAL
63699: IFTRUE 63703
63701: GO 66326
63703: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63704: LD_ADDR_VAR 0 11
63708: PUSH
63709: LD_INT 1
63711: NEG
63712: PUSH
63713: LD_INT 3
63715: NEG
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 0
63723: PUSH
63724: LD_INT 3
63726: NEG
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 1
63734: PUSH
63735: LD_INT 2
63737: NEG
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: LIST
63747: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63748: LD_ADDR_VAR 0 12
63752: PUSH
63753: LD_INT 2
63755: PUSH
63756: LD_INT 1
63758: NEG
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 3
63766: PUSH
63767: LD_INT 0
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 3
63776: PUSH
63777: LD_INT 1
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: LIST
63788: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63789: LD_ADDR_VAR 0 13
63793: PUSH
63794: LD_INT 3
63796: PUSH
63797: LD_INT 2
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 3
63806: PUSH
63807: LD_INT 3
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 2
63816: PUSH
63817: LD_INT 3
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: LIST
63828: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63829: LD_ADDR_VAR 0 14
63833: PUSH
63834: LD_INT 1
63836: PUSH
63837: LD_INT 3
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 0
63846: PUSH
63847: LD_INT 3
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 1
63856: NEG
63857: PUSH
63858: LD_INT 2
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: LIST
63869: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63870: LD_ADDR_VAR 0 15
63874: PUSH
63875: LD_INT 2
63877: NEG
63878: PUSH
63879: LD_INT 1
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 3
63888: NEG
63889: PUSH
63890: LD_INT 0
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 3
63899: NEG
63900: PUSH
63901: LD_INT 1
63903: NEG
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: LIST
63913: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63914: LD_ADDR_VAR 0 16
63918: PUSH
63919: LD_INT 2
63921: NEG
63922: PUSH
63923: LD_INT 3
63925: NEG
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 3
63933: NEG
63934: PUSH
63935: LD_INT 2
63937: NEG
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 3
63945: NEG
63946: PUSH
63947: LD_INT 3
63949: NEG
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: LIST
63959: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63960: LD_ADDR_VAR 0 17
63964: PUSH
63965: LD_INT 1
63967: NEG
63968: PUSH
63969: LD_INT 3
63971: NEG
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 0
63979: PUSH
63980: LD_INT 3
63982: NEG
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 1
63990: PUSH
63991: LD_INT 2
63993: NEG
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: LIST
64003: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64004: LD_ADDR_VAR 0 18
64008: PUSH
64009: LD_INT 2
64011: PUSH
64012: LD_INT 1
64014: NEG
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 3
64022: PUSH
64023: LD_INT 0
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 3
64032: PUSH
64033: LD_INT 1
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: LIST
64044: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64045: LD_ADDR_VAR 0 19
64049: PUSH
64050: LD_INT 3
64052: PUSH
64053: LD_INT 2
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 3
64062: PUSH
64063: LD_INT 3
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 2
64072: PUSH
64073: LD_INT 3
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: LIST
64084: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64085: LD_ADDR_VAR 0 20
64089: PUSH
64090: LD_INT 1
64092: PUSH
64093: LD_INT 3
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 0
64102: PUSH
64103: LD_INT 3
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 1
64112: NEG
64113: PUSH
64114: LD_INT 2
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: LIST
64125: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64126: LD_ADDR_VAR 0 21
64130: PUSH
64131: LD_INT 2
64133: NEG
64134: PUSH
64135: LD_INT 1
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 3
64144: NEG
64145: PUSH
64146: LD_INT 0
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 3
64155: NEG
64156: PUSH
64157: LD_INT 1
64159: NEG
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: LIST
64169: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64170: LD_ADDR_VAR 0 22
64174: PUSH
64175: LD_INT 2
64177: NEG
64178: PUSH
64179: LD_INT 3
64181: NEG
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 3
64189: NEG
64190: PUSH
64191: LD_INT 2
64193: NEG
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 3
64201: NEG
64202: PUSH
64203: LD_INT 3
64205: NEG
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: LIST
64215: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64216: LD_ADDR_VAR 0 23
64220: PUSH
64221: LD_INT 0
64223: PUSH
64224: LD_INT 3
64226: NEG
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 1
64234: NEG
64235: PUSH
64236: LD_INT 4
64238: NEG
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 1
64246: PUSH
64247: LD_INT 3
64249: NEG
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: LIST
64259: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64260: LD_ADDR_VAR 0 24
64264: PUSH
64265: LD_INT 3
64267: PUSH
64268: LD_INT 0
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 3
64277: PUSH
64278: LD_INT 1
64280: NEG
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 4
64288: PUSH
64289: LD_INT 1
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: LIST
64300: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64301: LD_ADDR_VAR 0 25
64305: PUSH
64306: LD_INT 3
64308: PUSH
64309: LD_INT 3
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 4
64318: PUSH
64319: LD_INT 3
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 3
64328: PUSH
64329: LD_INT 4
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: LIST
64340: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64341: LD_ADDR_VAR 0 26
64345: PUSH
64346: LD_INT 0
64348: PUSH
64349: LD_INT 3
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 1
64358: PUSH
64359: LD_INT 4
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 1
64368: NEG
64369: PUSH
64370: LD_INT 3
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: LIST
64381: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64382: LD_ADDR_VAR 0 27
64386: PUSH
64387: LD_INT 3
64389: NEG
64390: PUSH
64391: LD_INT 0
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 3
64400: NEG
64401: PUSH
64402: LD_INT 1
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 4
64411: NEG
64412: PUSH
64413: LD_INT 1
64415: NEG
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: LIST
64425: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64426: LD_ADDR_VAR 0 28
64430: PUSH
64431: LD_INT 3
64433: NEG
64434: PUSH
64435: LD_INT 3
64437: NEG
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 3
64445: NEG
64446: PUSH
64447: LD_INT 4
64449: NEG
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 4
64457: NEG
64458: PUSH
64459: LD_INT 3
64461: NEG
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: LIST
64471: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64472: LD_ADDR_VAR 0 29
64476: PUSH
64477: LD_INT 1
64479: NEG
64480: PUSH
64481: LD_INT 3
64483: NEG
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 0
64491: PUSH
64492: LD_INT 3
64494: NEG
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 1
64502: PUSH
64503: LD_INT 2
64505: NEG
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 1
64513: NEG
64514: PUSH
64515: LD_INT 4
64517: NEG
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 0
64525: PUSH
64526: LD_INT 4
64528: NEG
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 1
64536: PUSH
64537: LD_INT 3
64539: NEG
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 1
64547: NEG
64548: PUSH
64549: LD_INT 5
64551: NEG
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 0
64559: PUSH
64560: LD_INT 5
64562: NEG
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 1
64570: PUSH
64571: LD_INT 4
64573: NEG
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 1
64581: NEG
64582: PUSH
64583: LD_INT 6
64585: NEG
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 0
64593: PUSH
64594: LD_INT 6
64596: NEG
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 1
64604: PUSH
64605: LD_INT 5
64607: NEG
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64627: LD_ADDR_VAR 0 30
64631: PUSH
64632: LD_INT 2
64634: PUSH
64635: LD_INT 1
64637: NEG
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 3
64645: PUSH
64646: LD_INT 0
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 3
64655: PUSH
64656: LD_INT 1
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: LD_INT 3
64665: PUSH
64666: LD_INT 1
64668: NEG
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 4
64676: PUSH
64677: LD_INT 0
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 4
64686: PUSH
64687: LD_INT 1
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 4
64696: PUSH
64697: LD_INT 1
64699: NEG
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 5
64707: PUSH
64708: LD_INT 0
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 5
64717: PUSH
64718: LD_INT 1
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 5
64727: PUSH
64728: LD_INT 1
64730: NEG
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 6
64738: PUSH
64739: LD_INT 0
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 6
64748: PUSH
64749: LD_INT 1
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64770: LD_ADDR_VAR 0 31
64774: PUSH
64775: LD_INT 3
64777: PUSH
64778: LD_INT 2
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 3
64787: PUSH
64788: LD_INT 3
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 2
64797: PUSH
64798: LD_INT 3
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 4
64807: PUSH
64808: LD_INT 3
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 4
64817: PUSH
64818: LD_INT 4
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 3
64827: PUSH
64828: LD_INT 4
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 5
64837: PUSH
64838: LD_INT 4
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 5
64847: PUSH
64848: LD_INT 5
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 4
64857: PUSH
64858: LD_INT 5
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 6
64867: PUSH
64868: LD_INT 5
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 6
64877: PUSH
64878: LD_INT 6
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 5
64887: PUSH
64888: LD_INT 6
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64909: LD_ADDR_VAR 0 32
64913: PUSH
64914: LD_INT 1
64916: PUSH
64917: LD_INT 3
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 0
64926: PUSH
64927: LD_INT 3
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 1
64936: NEG
64937: PUSH
64938: LD_INT 2
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 1
64947: PUSH
64948: LD_INT 4
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 0
64957: PUSH
64958: LD_INT 4
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 1
64967: NEG
64968: PUSH
64969: LD_INT 3
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 1
64978: PUSH
64979: LD_INT 5
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 0
64988: PUSH
64989: LD_INT 5
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 1
64998: NEG
64999: PUSH
65000: LD_INT 4
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 1
65009: PUSH
65010: LD_INT 6
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 0
65019: PUSH
65020: LD_INT 6
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 1
65029: NEG
65030: PUSH
65031: LD_INT 5
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65052: LD_ADDR_VAR 0 33
65056: PUSH
65057: LD_INT 2
65059: NEG
65060: PUSH
65061: LD_INT 1
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 3
65070: NEG
65071: PUSH
65072: LD_INT 0
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 3
65081: NEG
65082: PUSH
65083: LD_INT 1
65085: NEG
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 3
65093: NEG
65094: PUSH
65095: LD_INT 1
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 4
65104: NEG
65105: PUSH
65106: LD_INT 0
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 4
65115: NEG
65116: PUSH
65117: LD_INT 1
65119: NEG
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 4
65127: NEG
65128: PUSH
65129: LD_INT 1
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: LD_INT 5
65138: NEG
65139: PUSH
65140: LD_INT 0
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 5
65149: NEG
65150: PUSH
65151: LD_INT 1
65153: NEG
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 5
65161: NEG
65162: PUSH
65163: LD_INT 1
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 6
65172: NEG
65173: PUSH
65174: LD_INT 0
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 6
65183: NEG
65184: PUSH
65185: LD_INT 1
65187: NEG
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65207: LD_ADDR_VAR 0 34
65211: PUSH
65212: LD_INT 2
65214: NEG
65215: PUSH
65216: LD_INT 3
65218: NEG
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 3
65226: NEG
65227: PUSH
65228: LD_INT 2
65230: NEG
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 3
65238: NEG
65239: PUSH
65240: LD_INT 3
65242: NEG
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 3
65250: NEG
65251: PUSH
65252: LD_INT 4
65254: NEG
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: LD_INT 4
65262: NEG
65263: PUSH
65264: LD_INT 3
65266: NEG
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 4
65274: NEG
65275: PUSH
65276: LD_INT 4
65278: NEG
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 4
65286: NEG
65287: PUSH
65288: LD_INT 5
65290: NEG
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 5
65298: NEG
65299: PUSH
65300: LD_INT 4
65302: NEG
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 5
65310: NEG
65311: PUSH
65312: LD_INT 5
65314: NEG
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 5
65322: NEG
65323: PUSH
65324: LD_INT 6
65326: NEG
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 6
65334: NEG
65335: PUSH
65336: LD_INT 5
65338: NEG
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 6
65346: NEG
65347: PUSH
65348: LD_INT 6
65350: NEG
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65370: LD_ADDR_VAR 0 41
65374: PUSH
65375: LD_INT 0
65377: PUSH
65378: LD_INT 2
65380: NEG
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 1
65388: NEG
65389: PUSH
65390: LD_INT 3
65392: NEG
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 1
65400: PUSH
65401: LD_INT 2
65403: NEG
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: LIST
65413: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65414: LD_ADDR_VAR 0 42
65418: PUSH
65419: LD_INT 2
65421: PUSH
65422: LD_INT 0
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 2
65431: PUSH
65432: LD_INT 1
65434: NEG
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 3
65442: PUSH
65443: LD_INT 1
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: LIST
65454: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65455: LD_ADDR_VAR 0 43
65459: PUSH
65460: LD_INT 2
65462: PUSH
65463: LD_INT 2
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 3
65472: PUSH
65473: LD_INT 2
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 2
65482: PUSH
65483: LD_INT 3
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: LIST
65494: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65495: LD_ADDR_VAR 0 44
65499: PUSH
65500: LD_INT 0
65502: PUSH
65503: LD_INT 2
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 1
65512: PUSH
65513: LD_INT 3
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 1
65522: NEG
65523: PUSH
65524: LD_INT 2
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: LIST
65535: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65536: LD_ADDR_VAR 0 45
65540: PUSH
65541: LD_INT 2
65543: NEG
65544: PUSH
65545: LD_INT 0
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 2
65554: NEG
65555: PUSH
65556: LD_INT 1
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 3
65565: NEG
65566: PUSH
65567: LD_INT 1
65569: NEG
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: LIST
65579: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65580: LD_ADDR_VAR 0 46
65584: PUSH
65585: LD_INT 2
65587: NEG
65588: PUSH
65589: LD_INT 2
65591: NEG
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 2
65599: NEG
65600: PUSH
65601: LD_INT 3
65603: NEG
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: LD_INT 3
65611: NEG
65612: PUSH
65613: LD_INT 2
65615: NEG
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: LIST
65625: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65626: LD_ADDR_VAR 0 47
65630: PUSH
65631: LD_INT 2
65633: NEG
65634: PUSH
65635: LD_INT 3
65637: NEG
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 1
65645: NEG
65646: PUSH
65647: LD_INT 3
65649: NEG
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65659: LD_ADDR_VAR 0 48
65663: PUSH
65664: LD_INT 1
65666: PUSH
65667: LD_INT 2
65669: NEG
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 2
65677: PUSH
65678: LD_INT 1
65680: NEG
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65690: LD_ADDR_VAR 0 49
65694: PUSH
65695: LD_INT 3
65697: PUSH
65698: LD_INT 1
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_INT 3
65707: PUSH
65708: LD_INT 2
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65719: LD_ADDR_VAR 0 50
65723: PUSH
65724: LD_INT 2
65726: PUSH
65727: LD_INT 3
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 1
65736: PUSH
65737: LD_INT 3
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65748: LD_ADDR_VAR 0 51
65752: PUSH
65753: LD_INT 1
65755: NEG
65756: PUSH
65757: LD_INT 2
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 2
65766: NEG
65767: PUSH
65768: LD_INT 1
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65779: LD_ADDR_VAR 0 52
65783: PUSH
65784: LD_INT 3
65786: NEG
65787: PUSH
65788: LD_INT 1
65790: NEG
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 3
65798: NEG
65799: PUSH
65800: LD_INT 2
65802: NEG
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65812: LD_ADDR_VAR 0 53
65816: PUSH
65817: LD_INT 1
65819: NEG
65820: PUSH
65821: LD_INT 3
65823: NEG
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 0
65831: PUSH
65832: LD_INT 3
65834: NEG
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 1
65842: PUSH
65843: LD_INT 2
65845: NEG
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: LIST
65855: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65856: LD_ADDR_VAR 0 54
65860: PUSH
65861: LD_INT 2
65863: PUSH
65864: LD_INT 1
65866: NEG
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 3
65874: PUSH
65875: LD_INT 0
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 3
65884: PUSH
65885: LD_INT 1
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: LIST
65896: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65897: LD_ADDR_VAR 0 55
65901: PUSH
65902: LD_INT 3
65904: PUSH
65905: LD_INT 2
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 3
65914: PUSH
65915: LD_INT 3
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 2
65924: PUSH
65925: LD_INT 3
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: LIST
65936: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65937: LD_ADDR_VAR 0 56
65941: PUSH
65942: LD_INT 1
65944: PUSH
65945: LD_INT 3
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 0
65954: PUSH
65955: LD_INT 3
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 1
65964: NEG
65965: PUSH
65966: LD_INT 2
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: LIST
65977: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65978: LD_ADDR_VAR 0 57
65982: PUSH
65983: LD_INT 2
65985: NEG
65986: PUSH
65987: LD_INT 1
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 3
65996: NEG
65997: PUSH
65998: LD_INT 0
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 3
66007: NEG
66008: PUSH
66009: LD_INT 1
66011: NEG
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: LIST
66021: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66022: LD_ADDR_VAR 0 58
66026: PUSH
66027: LD_INT 2
66029: NEG
66030: PUSH
66031: LD_INT 3
66033: NEG
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 3
66041: NEG
66042: PUSH
66043: LD_INT 2
66045: NEG
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 3
66053: NEG
66054: PUSH
66055: LD_INT 3
66057: NEG
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: LIST
66067: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66068: LD_ADDR_VAR 0 59
66072: PUSH
66073: LD_INT 1
66075: NEG
66076: PUSH
66077: LD_INT 2
66079: NEG
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 0
66087: PUSH
66088: LD_INT 2
66090: NEG
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 1
66098: PUSH
66099: LD_INT 1
66101: NEG
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: LIST
66111: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66112: LD_ADDR_VAR 0 60
66116: PUSH
66117: LD_INT 1
66119: PUSH
66120: LD_INT 1
66122: NEG
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 2
66130: PUSH
66131: LD_INT 0
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: LD_INT 2
66140: PUSH
66141: LD_INT 1
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: LIST
66152: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66153: LD_ADDR_VAR 0 61
66157: PUSH
66158: LD_INT 2
66160: PUSH
66161: LD_INT 1
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 2
66170: PUSH
66171: LD_INT 2
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 1
66180: PUSH
66181: LD_INT 2
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: LIST
66192: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66193: LD_ADDR_VAR 0 62
66197: PUSH
66198: LD_INT 1
66200: PUSH
66201: LD_INT 2
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 0
66210: PUSH
66211: LD_INT 2
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 1
66220: NEG
66221: PUSH
66222: LD_INT 1
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: LIST
66233: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66234: LD_ADDR_VAR 0 63
66238: PUSH
66239: LD_INT 1
66241: NEG
66242: PUSH
66243: LD_INT 1
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 2
66252: NEG
66253: PUSH
66254: LD_INT 0
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 2
66263: NEG
66264: PUSH
66265: LD_INT 1
66267: NEG
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: LIST
66277: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66278: LD_ADDR_VAR 0 64
66282: PUSH
66283: LD_INT 1
66285: NEG
66286: PUSH
66287: LD_INT 2
66289: NEG
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: LD_INT 2
66297: NEG
66298: PUSH
66299: LD_INT 1
66301: NEG
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 2
66309: NEG
66310: PUSH
66311: LD_INT 2
66313: NEG
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: LIST
66323: ST_TO_ADDR
// end ; 2 :
66324: GO 69590
66326: LD_INT 2
66328: DOUBLE
66329: EQUAL
66330: IFTRUE 66334
66332: GO 69589
66334: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66335: LD_ADDR_VAR 0 29
66339: PUSH
66340: LD_INT 4
66342: PUSH
66343: LD_INT 0
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: LD_INT 4
66352: PUSH
66353: LD_INT 1
66355: NEG
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 5
66363: PUSH
66364: LD_INT 0
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: PUSH
66371: LD_INT 5
66373: PUSH
66374: LD_INT 1
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PUSH
66381: LD_INT 4
66383: PUSH
66384: LD_INT 1
66386: PUSH
66387: EMPTY
66388: LIST
66389: LIST
66390: PUSH
66391: LD_INT 3
66393: PUSH
66394: LD_INT 0
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: LD_INT 3
66403: PUSH
66404: LD_INT 1
66406: NEG
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 3
66414: PUSH
66415: LD_INT 2
66417: NEG
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 5
66425: PUSH
66426: LD_INT 2
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 3
66435: PUSH
66436: LD_INT 3
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 3
66445: PUSH
66446: LD_INT 2
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 4
66455: PUSH
66456: LD_INT 3
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 4
66465: PUSH
66466: LD_INT 4
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 3
66475: PUSH
66476: LD_INT 4
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 2
66485: PUSH
66486: LD_INT 3
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 2
66495: PUSH
66496: LD_INT 2
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 4
66505: PUSH
66506: LD_INT 2
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 2
66515: PUSH
66516: LD_INT 4
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 0
66525: PUSH
66526: LD_INT 4
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 0
66535: PUSH
66536: LD_INT 3
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 1
66545: PUSH
66546: LD_INT 4
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 1
66555: PUSH
66556: LD_INT 5
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 0
66565: PUSH
66566: LD_INT 5
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 1
66575: NEG
66576: PUSH
66577: LD_INT 4
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 1
66586: NEG
66587: PUSH
66588: LD_INT 3
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 2
66597: PUSH
66598: LD_INT 5
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 2
66607: NEG
66608: PUSH
66609: LD_INT 3
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 3
66618: NEG
66619: PUSH
66620: LD_INT 0
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 3
66629: NEG
66630: PUSH
66631: LD_INT 1
66633: NEG
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 2
66641: NEG
66642: PUSH
66643: LD_INT 0
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 2
66652: NEG
66653: PUSH
66654: LD_INT 1
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 3
66663: NEG
66664: PUSH
66665: LD_INT 1
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: LD_INT 4
66674: NEG
66675: PUSH
66676: LD_INT 0
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 4
66685: NEG
66686: PUSH
66687: LD_INT 1
66689: NEG
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 4
66697: NEG
66698: PUSH
66699: LD_INT 2
66701: NEG
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 2
66709: NEG
66710: PUSH
66711: LD_INT 2
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 4
66720: NEG
66721: PUSH
66722: LD_INT 4
66724: NEG
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: LD_INT 4
66732: NEG
66733: PUSH
66734: LD_INT 5
66736: NEG
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 3
66744: NEG
66745: PUSH
66746: LD_INT 4
66748: NEG
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 3
66756: NEG
66757: PUSH
66758: LD_INT 3
66760: NEG
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 4
66768: NEG
66769: PUSH
66770: LD_INT 3
66772: NEG
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 5
66780: NEG
66781: PUSH
66782: LD_INT 4
66784: NEG
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 5
66792: NEG
66793: PUSH
66794: LD_INT 5
66796: NEG
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 3
66804: NEG
66805: PUSH
66806: LD_INT 5
66808: NEG
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PUSH
66814: LD_INT 5
66816: NEG
66817: PUSH
66818: LD_INT 3
66820: NEG
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66873: LD_ADDR_VAR 0 30
66877: PUSH
66878: LD_INT 4
66880: PUSH
66881: LD_INT 4
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 4
66890: PUSH
66891: LD_INT 3
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 5
66900: PUSH
66901: LD_INT 4
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: LD_INT 5
66910: PUSH
66911: LD_INT 5
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PUSH
66918: LD_INT 4
66920: PUSH
66921: LD_INT 5
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 3
66930: PUSH
66931: LD_INT 4
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 3
66940: PUSH
66941: LD_INT 3
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_INT 5
66950: PUSH
66951: LD_INT 3
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 3
66960: PUSH
66961: LD_INT 5
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 0
66970: PUSH
66971: LD_INT 3
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: LD_INT 0
66980: PUSH
66981: LD_INT 2
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 1
66990: PUSH
66991: LD_INT 3
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 1
67000: PUSH
67001: LD_INT 4
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 0
67010: PUSH
67011: LD_INT 4
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 1
67020: NEG
67021: PUSH
67022: LD_INT 3
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 1
67031: NEG
67032: PUSH
67033: LD_INT 2
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 2
67042: PUSH
67043: LD_INT 4
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 2
67052: NEG
67053: PUSH
67054: LD_INT 2
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 4
67063: NEG
67064: PUSH
67065: LD_INT 0
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 4
67074: NEG
67075: PUSH
67076: LD_INT 1
67078: NEG
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 3
67086: NEG
67087: PUSH
67088: LD_INT 0
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 3
67097: NEG
67098: PUSH
67099: LD_INT 1
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 4
67108: NEG
67109: PUSH
67110: LD_INT 1
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 5
67119: NEG
67120: PUSH
67121: LD_INT 0
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 5
67130: NEG
67131: PUSH
67132: LD_INT 1
67134: NEG
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 5
67142: NEG
67143: PUSH
67144: LD_INT 2
67146: NEG
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 3
67154: NEG
67155: PUSH
67156: LD_INT 2
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 3
67165: NEG
67166: PUSH
67167: LD_INT 3
67169: NEG
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 3
67177: NEG
67178: PUSH
67179: LD_INT 4
67181: NEG
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: LD_INT 2
67189: NEG
67190: PUSH
67191: LD_INT 3
67193: NEG
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: PUSH
67199: LD_INT 2
67201: NEG
67202: PUSH
67203: LD_INT 2
67205: NEG
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 3
67213: NEG
67214: PUSH
67215: LD_INT 2
67217: NEG
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 4
67225: NEG
67226: PUSH
67227: LD_INT 3
67229: NEG
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 4
67237: NEG
67238: PUSH
67239: LD_INT 4
67241: NEG
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 2
67249: NEG
67250: PUSH
67251: LD_INT 4
67253: NEG
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 4
67261: NEG
67262: PUSH
67263: LD_INT 2
67265: NEG
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 0
67273: PUSH
67274: LD_INT 4
67276: NEG
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 0
67284: PUSH
67285: LD_INT 5
67287: NEG
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 1
67295: PUSH
67296: LD_INT 4
67298: NEG
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 1
67306: PUSH
67307: LD_INT 3
67309: NEG
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: LD_INT 0
67317: PUSH
67318: LD_INT 3
67320: NEG
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 1
67328: NEG
67329: PUSH
67330: LD_INT 4
67332: NEG
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 1
67340: NEG
67341: PUSH
67342: LD_INT 5
67344: NEG
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PUSH
67350: LD_INT 2
67352: PUSH
67353: LD_INT 3
67355: NEG
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: LD_INT 2
67363: NEG
67364: PUSH
67365: LD_INT 5
67367: NEG
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: LIST
67402: LIST
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: LIST
67408: LIST
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: LIST
67415: LIST
67416: LIST
67417: LIST
67418: LIST
67419: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67420: LD_ADDR_VAR 0 31
67424: PUSH
67425: LD_INT 0
67427: PUSH
67428: LD_INT 4
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: LD_INT 0
67437: PUSH
67438: LD_INT 3
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 1
67447: PUSH
67448: LD_INT 4
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 1
67457: PUSH
67458: LD_INT 5
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 0
67467: PUSH
67468: LD_INT 5
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 1
67477: NEG
67478: PUSH
67479: LD_INT 4
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 1
67488: NEG
67489: PUSH
67490: LD_INT 3
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 2
67499: PUSH
67500: LD_INT 5
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 2
67509: NEG
67510: PUSH
67511: LD_INT 3
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 3
67520: NEG
67521: PUSH
67522: LD_INT 0
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 3
67531: NEG
67532: PUSH
67533: LD_INT 1
67535: NEG
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 2
67543: NEG
67544: PUSH
67545: LD_INT 0
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 2
67554: NEG
67555: PUSH
67556: LD_INT 1
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 3
67565: NEG
67566: PUSH
67567: LD_INT 1
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 4
67576: NEG
67577: PUSH
67578: LD_INT 0
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 4
67587: NEG
67588: PUSH
67589: LD_INT 1
67591: NEG
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: LD_INT 4
67599: NEG
67600: PUSH
67601: LD_INT 2
67603: NEG
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: LD_INT 2
67611: NEG
67612: PUSH
67613: LD_INT 2
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 4
67622: NEG
67623: PUSH
67624: LD_INT 4
67626: NEG
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 4
67634: NEG
67635: PUSH
67636: LD_INT 5
67638: NEG
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 3
67646: NEG
67647: PUSH
67648: LD_INT 4
67650: NEG
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 3
67658: NEG
67659: PUSH
67660: LD_INT 3
67662: NEG
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 4
67670: NEG
67671: PUSH
67672: LD_INT 3
67674: NEG
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 5
67682: NEG
67683: PUSH
67684: LD_INT 4
67686: NEG
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 5
67694: NEG
67695: PUSH
67696: LD_INT 5
67698: NEG
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: LD_INT 3
67706: NEG
67707: PUSH
67708: LD_INT 5
67710: NEG
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: LD_INT 5
67718: NEG
67719: PUSH
67720: LD_INT 3
67722: NEG
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: LD_INT 0
67730: PUSH
67731: LD_INT 3
67733: NEG
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 0
67741: PUSH
67742: LD_INT 4
67744: NEG
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 1
67752: PUSH
67753: LD_INT 3
67755: NEG
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 1
67763: PUSH
67764: LD_INT 2
67766: NEG
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 0
67774: PUSH
67775: LD_INT 2
67777: NEG
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 1
67785: NEG
67786: PUSH
67787: LD_INT 3
67789: NEG
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 1
67797: NEG
67798: PUSH
67799: LD_INT 4
67801: NEG
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 2
67809: PUSH
67810: LD_INT 2
67812: NEG
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 2
67820: NEG
67821: PUSH
67822: LD_INT 4
67824: NEG
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 4
67832: PUSH
67833: LD_INT 0
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 4
67842: PUSH
67843: LD_INT 1
67845: NEG
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: LD_INT 5
67853: PUSH
67854: LD_INT 0
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 5
67863: PUSH
67864: LD_INT 1
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: PUSH
67871: LD_INT 4
67873: PUSH
67874: LD_INT 1
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: LD_INT 3
67883: PUSH
67884: LD_INT 0
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 3
67893: PUSH
67894: LD_INT 1
67896: NEG
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: LD_INT 3
67904: PUSH
67905: LD_INT 2
67907: NEG
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 5
67915: PUSH
67916: LD_INT 2
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: LIST
67929: LIST
67930: LIST
67931: LIST
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: LIST
67955: LIST
67956: LIST
67957: LIST
67958: LIST
67959: LIST
67960: LIST
67961: LIST
67962: LIST
67963: LIST
67964: LIST
67965: LIST
67966: LIST
67967: LIST
67968: LIST
67969: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67970: LD_ADDR_VAR 0 32
67974: PUSH
67975: LD_INT 4
67977: NEG
67978: PUSH
67979: LD_INT 0
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 4
67988: NEG
67989: PUSH
67990: LD_INT 1
67992: NEG
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 3
68000: NEG
68001: PUSH
68002: LD_INT 0
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PUSH
68009: LD_INT 3
68011: NEG
68012: PUSH
68013: LD_INT 1
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 4
68022: NEG
68023: PUSH
68024: LD_INT 1
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 5
68033: NEG
68034: PUSH
68035: LD_INT 0
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: LD_INT 5
68044: NEG
68045: PUSH
68046: LD_INT 1
68048: NEG
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: LD_INT 5
68056: NEG
68057: PUSH
68058: LD_INT 2
68060: NEG
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: LD_INT 3
68068: NEG
68069: PUSH
68070: LD_INT 2
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 3
68079: NEG
68080: PUSH
68081: LD_INT 3
68083: NEG
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: PUSH
68089: LD_INT 3
68091: NEG
68092: PUSH
68093: LD_INT 4
68095: NEG
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: LD_INT 2
68103: NEG
68104: PUSH
68105: LD_INT 3
68107: NEG
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: LD_INT 2
68115: NEG
68116: PUSH
68117: LD_INT 2
68119: NEG
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 3
68127: NEG
68128: PUSH
68129: LD_INT 2
68131: NEG
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 4
68139: NEG
68140: PUSH
68141: LD_INT 3
68143: NEG
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 4
68151: NEG
68152: PUSH
68153: LD_INT 4
68155: NEG
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 2
68163: NEG
68164: PUSH
68165: LD_INT 4
68167: NEG
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: PUSH
68173: LD_INT 4
68175: NEG
68176: PUSH
68177: LD_INT 2
68179: NEG
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 0
68187: PUSH
68188: LD_INT 4
68190: NEG
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 0
68198: PUSH
68199: LD_INT 5
68201: NEG
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: LD_INT 1
68209: PUSH
68210: LD_INT 4
68212: NEG
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: LD_INT 1
68220: PUSH
68221: LD_INT 3
68223: NEG
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: LD_INT 0
68231: PUSH
68232: LD_INT 3
68234: NEG
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 1
68242: NEG
68243: PUSH
68244: LD_INT 4
68246: NEG
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 1
68254: NEG
68255: PUSH
68256: LD_INT 5
68258: NEG
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 2
68266: PUSH
68267: LD_INT 3
68269: NEG
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 2
68277: NEG
68278: PUSH
68279: LD_INT 5
68281: NEG
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: PUSH
68287: LD_INT 3
68289: PUSH
68290: LD_INT 0
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 3
68299: PUSH
68300: LD_INT 1
68302: NEG
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: PUSH
68308: LD_INT 4
68310: PUSH
68311: LD_INT 0
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 4
68320: PUSH
68321: LD_INT 1
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: PUSH
68328: LD_INT 3
68330: PUSH
68331: LD_INT 1
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: LD_INT 2
68340: PUSH
68341: LD_INT 0
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 2
68350: PUSH
68351: LD_INT 1
68353: NEG
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_INT 2
68361: PUSH
68362: LD_INT 2
68364: NEG
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 4
68372: PUSH
68373: LD_INT 2
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: PUSH
68380: LD_INT 4
68382: PUSH
68383: LD_INT 4
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: LD_INT 4
68392: PUSH
68393: LD_INT 3
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: LD_INT 5
68402: PUSH
68403: LD_INT 4
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 5
68412: PUSH
68413: LD_INT 5
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: LD_INT 4
68422: PUSH
68423: LD_INT 5
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: PUSH
68430: LD_INT 3
68432: PUSH
68433: LD_INT 4
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: PUSH
68440: LD_INT 3
68442: PUSH
68443: LD_INT 3
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: LD_INT 5
68452: PUSH
68453: LD_INT 3
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: PUSH
68460: LD_INT 3
68462: PUSH
68463: LD_INT 5
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: LIST
68504: LIST
68505: LIST
68506: LIST
68507: LIST
68508: LIST
68509: LIST
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68517: LD_ADDR_VAR 0 33
68521: PUSH
68522: LD_INT 4
68524: NEG
68525: PUSH
68526: LD_INT 4
68528: NEG
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 4
68536: NEG
68537: PUSH
68538: LD_INT 5
68540: NEG
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: LD_INT 3
68548: NEG
68549: PUSH
68550: LD_INT 4
68552: NEG
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: LD_INT 3
68560: NEG
68561: PUSH
68562: LD_INT 3
68564: NEG
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: LD_INT 4
68572: NEG
68573: PUSH
68574: LD_INT 3
68576: NEG
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: LD_INT 5
68584: NEG
68585: PUSH
68586: LD_INT 4
68588: NEG
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: LD_INT 5
68596: NEG
68597: PUSH
68598: LD_INT 5
68600: NEG
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 3
68608: NEG
68609: PUSH
68610: LD_INT 5
68612: NEG
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 5
68620: NEG
68621: PUSH
68622: LD_INT 3
68624: NEG
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: LD_INT 0
68632: PUSH
68633: LD_INT 3
68635: NEG
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 0
68643: PUSH
68644: LD_INT 4
68646: NEG
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 1
68654: PUSH
68655: LD_INT 3
68657: NEG
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 1
68665: PUSH
68666: LD_INT 2
68668: NEG
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 0
68676: PUSH
68677: LD_INT 2
68679: NEG
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: LD_INT 1
68687: NEG
68688: PUSH
68689: LD_INT 3
68691: NEG
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: LD_INT 1
68699: NEG
68700: PUSH
68701: LD_INT 4
68703: NEG
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: LD_INT 2
68711: PUSH
68712: LD_INT 2
68714: NEG
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: PUSH
68720: LD_INT 2
68722: NEG
68723: PUSH
68724: LD_INT 4
68726: NEG
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 4
68734: PUSH
68735: LD_INT 0
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 4
68744: PUSH
68745: LD_INT 1
68747: NEG
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: LD_INT 5
68755: PUSH
68756: LD_INT 0
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 5
68765: PUSH
68766: LD_INT 1
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: LD_INT 4
68775: PUSH
68776: LD_INT 1
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PUSH
68783: LD_INT 3
68785: PUSH
68786: LD_INT 0
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: PUSH
68793: LD_INT 3
68795: PUSH
68796: LD_INT 1
68798: NEG
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 3
68806: PUSH
68807: LD_INT 2
68809: NEG
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 5
68817: PUSH
68818: LD_INT 2
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: PUSH
68825: LD_INT 3
68827: PUSH
68828: LD_INT 3
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: LD_INT 3
68837: PUSH
68838: LD_INT 2
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PUSH
68845: LD_INT 4
68847: PUSH
68848: LD_INT 3
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: LD_INT 4
68857: PUSH
68858: LD_INT 4
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 3
68867: PUSH
68868: LD_INT 4
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 2
68877: PUSH
68878: LD_INT 3
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: LD_INT 2
68887: PUSH
68888: LD_INT 2
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: LD_INT 4
68897: PUSH
68898: LD_INT 2
68900: PUSH
68901: EMPTY
68902: LIST
68903: LIST
68904: PUSH
68905: LD_INT 2
68907: PUSH
68908: LD_INT 4
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: PUSH
68915: LD_INT 0
68917: PUSH
68918: LD_INT 4
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 0
68927: PUSH
68928: LD_INT 3
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: PUSH
68935: LD_INT 1
68937: PUSH
68938: LD_INT 4
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 1
68947: PUSH
68948: LD_INT 5
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: PUSH
68955: LD_INT 0
68957: PUSH
68958: LD_INT 5
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: LD_INT 1
68967: NEG
68968: PUSH
68969: LD_INT 4
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 1
68978: NEG
68979: PUSH
68980: LD_INT 3
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: LD_INT 2
68989: PUSH
68990: LD_INT 5
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 2
68999: NEG
69000: PUSH
69001: LD_INT 3
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: EMPTY
69009: LIST
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69055: LD_ADDR_VAR 0 34
69059: PUSH
69060: LD_INT 0
69062: PUSH
69063: LD_INT 4
69065: NEG
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 0
69073: PUSH
69074: LD_INT 5
69076: NEG
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: LD_INT 1
69084: PUSH
69085: LD_INT 4
69087: NEG
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PUSH
69093: LD_INT 1
69095: PUSH
69096: LD_INT 3
69098: NEG
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 0
69106: PUSH
69107: LD_INT 3
69109: NEG
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 1
69117: NEG
69118: PUSH
69119: LD_INT 4
69121: NEG
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 1
69129: NEG
69130: PUSH
69131: LD_INT 5
69133: NEG
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: LD_INT 2
69141: PUSH
69142: LD_INT 3
69144: NEG
69145: PUSH
69146: EMPTY
69147: LIST
69148: LIST
69149: PUSH
69150: LD_INT 2
69152: NEG
69153: PUSH
69154: LD_INT 5
69156: NEG
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 3
69164: PUSH
69165: LD_INT 0
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: LD_INT 3
69174: PUSH
69175: LD_INT 1
69177: NEG
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 4
69185: PUSH
69186: LD_INT 0
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 4
69195: PUSH
69196: LD_INT 1
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PUSH
69203: LD_INT 3
69205: PUSH
69206: LD_INT 1
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: LD_INT 2
69215: PUSH
69216: LD_INT 0
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: LD_INT 2
69225: PUSH
69226: LD_INT 1
69228: NEG
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 2
69236: PUSH
69237: LD_INT 2
69239: NEG
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: PUSH
69245: LD_INT 4
69247: PUSH
69248: LD_INT 2
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PUSH
69255: LD_INT 4
69257: PUSH
69258: LD_INT 4
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 4
69267: PUSH
69268: LD_INT 3
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: LD_INT 5
69277: PUSH
69278: LD_INT 4
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 5
69287: PUSH
69288: LD_INT 5
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: LD_INT 4
69297: PUSH
69298: LD_INT 5
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: PUSH
69305: LD_INT 3
69307: PUSH
69308: LD_INT 4
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: PUSH
69315: LD_INT 3
69317: PUSH
69318: LD_INT 3
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 5
69327: PUSH
69328: LD_INT 3
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 3
69337: PUSH
69338: LD_INT 5
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: LD_INT 0
69347: PUSH
69348: LD_INT 3
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: PUSH
69355: LD_INT 0
69357: PUSH
69358: LD_INT 2
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: LD_INT 1
69367: PUSH
69368: LD_INT 3
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: PUSH
69375: LD_INT 1
69377: PUSH
69378: LD_INT 4
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: PUSH
69385: LD_INT 0
69387: PUSH
69388: LD_INT 4
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PUSH
69395: LD_INT 1
69397: NEG
69398: PUSH
69399: LD_INT 3
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 1
69408: NEG
69409: PUSH
69410: LD_INT 2
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 2
69419: PUSH
69420: LD_INT 4
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PUSH
69427: LD_INT 2
69429: NEG
69430: PUSH
69431: LD_INT 2
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 4
69440: NEG
69441: PUSH
69442: LD_INT 0
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: LD_INT 4
69451: NEG
69452: PUSH
69453: LD_INT 1
69455: NEG
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 3
69463: NEG
69464: PUSH
69465: LD_INT 0
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: LD_INT 3
69474: NEG
69475: PUSH
69476: LD_INT 1
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: LD_INT 4
69485: NEG
69486: PUSH
69487: LD_INT 1
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PUSH
69494: LD_INT 5
69496: NEG
69497: PUSH
69498: LD_INT 0
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: LD_INT 5
69507: NEG
69508: PUSH
69509: LD_INT 1
69511: NEG
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 5
69519: NEG
69520: PUSH
69521: LD_INT 2
69523: NEG
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: PUSH
69529: LD_INT 3
69531: NEG
69532: PUSH
69533: LD_INT 2
69535: PUSH
69536: EMPTY
69537: LIST
69538: LIST
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: ST_TO_ADDR
// end ; end ;
69587: GO 69590
69589: POP
// case btype of b_depot , b_warehouse :
69590: LD_VAR 0 1
69594: PUSH
69595: LD_INT 0
69597: DOUBLE
69598: EQUAL
69599: IFTRUE 69609
69601: LD_INT 1
69603: DOUBLE
69604: EQUAL
69605: IFTRUE 69609
69607: GO 69810
69609: POP
// case nation of nation_american :
69610: LD_VAR 0 5
69614: PUSH
69615: LD_INT 1
69617: DOUBLE
69618: EQUAL
69619: IFTRUE 69623
69621: GO 69679
69623: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69624: LD_ADDR_VAR 0 9
69628: PUSH
69629: LD_VAR 0 11
69633: PUSH
69634: LD_VAR 0 12
69638: PUSH
69639: LD_VAR 0 13
69643: PUSH
69644: LD_VAR 0 14
69648: PUSH
69649: LD_VAR 0 15
69653: PUSH
69654: LD_VAR 0 16
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: LIST
69663: LIST
69664: LIST
69665: LIST
69666: PUSH
69667: LD_VAR 0 4
69671: PUSH
69672: LD_INT 1
69674: PLUS
69675: ARRAY
69676: ST_TO_ADDR
69677: GO 69808
69679: LD_INT 2
69681: DOUBLE
69682: EQUAL
69683: IFTRUE 69687
69685: GO 69743
69687: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69688: LD_ADDR_VAR 0 9
69692: PUSH
69693: LD_VAR 0 17
69697: PUSH
69698: LD_VAR 0 18
69702: PUSH
69703: LD_VAR 0 19
69707: PUSH
69708: LD_VAR 0 20
69712: PUSH
69713: LD_VAR 0 21
69717: PUSH
69718: LD_VAR 0 22
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: LIST
69729: LIST
69730: PUSH
69731: LD_VAR 0 4
69735: PUSH
69736: LD_INT 1
69738: PLUS
69739: ARRAY
69740: ST_TO_ADDR
69741: GO 69808
69743: LD_INT 3
69745: DOUBLE
69746: EQUAL
69747: IFTRUE 69751
69749: GO 69807
69751: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69752: LD_ADDR_VAR 0 9
69756: PUSH
69757: LD_VAR 0 23
69761: PUSH
69762: LD_VAR 0 24
69766: PUSH
69767: LD_VAR 0 25
69771: PUSH
69772: LD_VAR 0 26
69776: PUSH
69777: LD_VAR 0 27
69781: PUSH
69782: LD_VAR 0 28
69786: PUSH
69787: EMPTY
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: PUSH
69795: LD_VAR 0 4
69799: PUSH
69800: LD_INT 1
69802: PLUS
69803: ARRAY
69804: ST_TO_ADDR
69805: GO 69808
69807: POP
69808: GO 70363
69810: LD_INT 2
69812: DOUBLE
69813: EQUAL
69814: IFTRUE 69824
69816: LD_INT 3
69818: DOUBLE
69819: EQUAL
69820: IFTRUE 69824
69822: GO 69880
69824: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69825: LD_ADDR_VAR 0 9
69829: PUSH
69830: LD_VAR 0 29
69834: PUSH
69835: LD_VAR 0 30
69839: PUSH
69840: LD_VAR 0 31
69844: PUSH
69845: LD_VAR 0 32
69849: PUSH
69850: LD_VAR 0 33
69854: PUSH
69855: LD_VAR 0 34
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: LIST
69864: LIST
69865: LIST
69866: LIST
69867: PUSH
69868: LD_VAR 0 4
69872: PUSH
69873: LD_INT 1
69875: PLUS
69876: ARRAY
69877: ST_TO_ADDR
69878: GO 70363
69880: LD_INT 16
69882: DOUBLE
69883: EQUAL
69884: IFTRUE 69942
69886: LD_INT 17
69888: DOUBLE
69889: EQUAL
69890: IFTRUE 69942
69892: LD_INT 18
69894: DOUBLE
69895: EQUAL
69896: IFTRUE 69942
69898: LD_INT 19
69900: DOUBLE
69901: EQUAL
69902: IFTRUE 69942
69904: LD_INT 22
69906: DOUBLE
69907: EQUAL
69908: IFTRUE 69942
69910: LD_INT 20
69912: DOUBLE
69913: EQUAL
69914: IFTRUE 69942
69916: LD_INT 21
69918: DOUBLE
69919: EQUAL
69920: IFTRUE 69942
69922: LD_INT 23
69924: DOUBLE
69925: EQUAL
69926: IFTRUE 69942
69928: LD_INT 24
69930: DOUBLE
69931: EQUAL
69932: IFTRUE 69942
69934: LD_INT 25
69936: DOUBLE
69937: EQUAL
69938: IFTRUE 69942
69940: GO 69998
69942: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69943: LD_ADDR_VAR 0 9
69947: PUSH
69948: LD_VAR 0 35
69952: PUSH
69953: LD_VAR 0 36
69957: PUSH
69958: LD_VAR 0 37
69962: PUSH
69963: LD_VAR 0 38
69967: PUSH
69968: LD_VAR 0 39
69972: PUSH
69973: LD_VAR 0 40
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: PUSH
69986: LD_VAR 0 4
69990: PUSH
69991: LD_INT 1
69993: PLUS
69994: ARRAY
69995: ST_TO_ADDR
69996: GO 70363
69998: LD_INT 6
70000: DOUBLE
70001: EQUAL
70002: IFTRUE 70054
70004: LD_INT 7
70006: DOUBLE
70007: EQUAL
70008: IFTRUE 70054
70010: LD_INT 8
70012: DOUBLE
70013: EQUAL
70014: IFTRUE 70054
70016: LD_INT 13
70018: DOUBLE
70019: EQUAL
70020: IFTRUE 70054
70022: LD_INT 12
70024: DOUBLE
70025: EQUAL
70026: IFTRUE 70054
70028: LD_INT 15
70030: DOUBLE
70031: EQUAL
70032: IFTRUE 70054
70034: LD_INT 11
70036: DOUBLE
70037: EQUAL
70038: IFTRUE 70054
70040: LD_INT 14
70042: DOUBLE
70043: EQUAL
70044: IFTRUE 70054
70046: LD_INT 10
70048: DOUBLE
70049: EQUAL
70050: IFTRUE 70054
70052: GO 70110
70054: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70055: LD_ADDR_VAR 0 9
70059: PUSH
70060: LD_VAR 0 41
70064: PUSH
70065: LD_VAR 0 42
70069: PUSH
70070: LD_VAR 0 43
70074: PUSH
70075: LD_VAR 0 44
70079: PUSH
70080: LD_VAR 0 45
70084: PUSH
70085: LD_VAR 0 46
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: PUSH
70098: LD_VAR 0 4
70102: PUSH
70103: LD_INT 1
70105: PLUS
70106: ARRAY
70107: ST_TO_ADDR
70108: GO 70363
70110: LD_INT 36
70112: DOUBLE
70113: EQUAL
70114: IFTRUE 70118
70116: GO 70174
70118: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70119: LD_ADDR_VAR 0 9
70123: PUSH
70124: LD_VAR 0 47
70128: PUSH
70129: LD_VAR 0 48
70133: PUSH
70134: LD_VAR 0 49
70138: PUSH
70139: LD_VAR 0 50
70143: PUSH
70144: LD_VAR 0 51
70148: PUSH
70149: LD_VAR 0 52
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: LIST
70158: LIST
70159: LIST
70160: LIST
70161: PUSH
70162: LD_VAR 0 4
70166: PUSH
70167: LD_INT 1
70169: PLUS
70170: ARRAY
70171: ST_TO_ADDR
70172: GO 70363
70174: LD_INT 4
70176: DOUBLE
70177: EQUAL
70178: IFTRUE 70200
70180: LD_INT 5
70182: DOUBLE
70183: EQUAL
70184: IFTRUE 70200
70186: LD_INT 34
70188: DOUBLE
70189: EQUAL
70190: IFTRUE 70200
70192: LD_INT 37
70194: DOUBLE
70195: EQUAL
70196: IFTRUE 70200
70198: GO 70256
70200: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70201: LD_ADDR_VAR 0 9
70205: PUSH
70206: LD_VAR 0 53
70210: PUSH
70211: LD_VAR 0 54
70215: PUSH
70216: LD_VAR 0 55
70220: PUSH
70221: LD_VAR 0 56
70225: PUSH
70226: LD_VAR 0 57
70230: PUSH
70231: LD_VAR 0 58
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: LIST
70240: LIST
70241: LIST
70242: LIST
70243: PUSH
70244: LD_VAR 0 4
70248: PUSH
70249: LD_INT 1
70251: PLUS
70252: ARRAY
70253: ST_TO_ADDR
70254: GO 70363
70256: LD_INT 31
70258: DOUBLE
70259: EQUAL
70260: IFTRUE 70306
70262: LD_INT 32
70264: DOUBLE
70265: EQUAL
70266: IFTRUE 70306
70268: LD_INT 33
70270: DOUBLE
70271: EQUAL
70272: IFTRUE 70306
70274: LD_INT 27
70276: DOUBLE
70277: EQUAL
70278: IFTRUE 70306
70280: LD_INT 26
70282: DOUBLE
70283: EQUAL
70284: IFTRUE 70306
70286: LD_INT 28
70288: DOUBLE
70289: EQUAL
70290: IFTRUE 70306
70292: LD_INT 29
70294: DOUBLE
70295: EQUAL
70296: IFTRUE 70306
70298: LD_INT 30
70300: DOUBLE
70301: EQUAL
70302: IFTRUE 70306
70304: GO 70362
70306: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70307: LD_ADDR_VAR 0 9
70311: PUSH
70312: LD_VAR 0 59
70316: PUSH
70317: LD_VAR 0 60
70321: PUSH
70322: LD_VAR 0 61
70326: PUSH
70327: LD_VAR 0 62
70331: PUSH
70332: LD_VAR 0 63
70336: PUSH
70337: LD_VAR 0 64
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: PUSH
70350: LD_VAR 0 4
70354: PUSH
70355: LD_INT 1
70357: PLUS
70358: ARRAY
70359: ST_TO_ADDR
70360: GO 70363
70362: POP
// temp_list2 = [ ] ;
70363: LD_ADDR_VAR 0 10
70367: PUSH
70368: EMPTY
70369: ST_TO_ADDR
// for i in temp_list do
70370: LD_ADDR_VAR 0 8
70374: PUSH
70375: LD_VAR 0 9
70379: PUSH
70380: FOR_IN
70381: IFFALSE 70433
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70383: LD_ADDR_VAR 0 10
70387: PUSH
70388: LD_VAR 0 10
70392: PUSH
70393: LD_VAR 0 8
70397: PUSH
70398: LD_INT 1
70400: ARRAY
70401: PUSH
70402: LD_VAR 0 2
70406: PLUS
70407: PUSH
70408: LD_VAR 0 8
70412: PUSH
70413: LD_INT 2
70415: ARRAY
70416: PUSH
70417: LD_VAR 0 3
70421: PLUS
70422: PUSH
70423: EMPTY
70424: LIST
70425: LIST
70426: PUSH
70427: EMPTY
70428: LIST
70429: ADD
70430: ST_TO_ADDR
70431: GO 70380
70433: POP
70434: POP
// result = temp_list2 ;
70435: LD_ADDR_VAR 0 7
70439: PUSH
70440: LD_VAR 0 10
70444: ST_TO_ADDR
// end ;
70445: LD_VAR 0 7
70449: RET
// export function EnemyInRange ( unit , dist ) ; begin
70450: LD_INT 0
70452: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70453: LD_ADDR_VAR 0 3
70457: PUSH
70458: LD_VAR 0 1
70462: PPUSH
70463: CALL_OW 255
70467: PPUSH
70468: LD_VAR 0 1
70472: PPUSH
70473: CALL_OW 250
70477: PPUSH
70478: LD_VAR 0 1
70482: PPUSH
70483: CALL_OW 251
70487: PPUSH
70488: LD_VAR 0 2
70492: PPUSH
70493: CALL 43707 0 4
70497: PUSH
70498: LD_INT 4
70500: ARRAY
70501: ST_TO_ADDR
// end ;
70502: LD_VAR 0 3
70506: RET
// export function PlayerSeeMe ( unit ) ; begin
70507: LD_INT 0
70509: PPUSH
// result := See ( your_side , unit ) ;
70510: LD_ADDR_VAR 0 2
70514: PUSH
70515: LD_OWVAR 2
70519: PPUSH
70520: LD_VAR 0 1
70524: PPUSH
70525: CALL_OW 292
70529: ST_TO_ADDR
// end ;
70530: LD_VAR 0 2
70534: RET
// export function ReverseDir ( unit ) ; begin
70535: LD_INT 0
70537: PPUSH
// if not unit then
70538: LD_VAR 0 1
70542: NOT
70543: IFFALSE 70547
// exit ;
70545: GO 70570
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70547: LD_ADDR_VAR 0 2
70551: PUSH
70552: LD_VAR 0 1
70556: PPUSH
70557: CALL_OW 254
70561: PUSH
70562: LD_INT 3
70564: PLUS
70565: PUSH
70566: LD_INT 6
70568: MOD
70569: ST_TO_ADDR
// end ;
70570: LD_VAR 0 2
70574: RET
// export function ReverseArray ( array ) ; var i ; begin
70575: LD_INT 0
70577: PPUSH
70578: PPUSH
// if not array then
70579: LD_VAR 0 1
70583: NOT
70584: IFFALSE 70588
// exit ;
70586: GO 70643
// result := [ ] ;
70588: LD_ADDR_VAR 0 2
70592: PUSH
70593: EMPTY
70594: ST_TO_ADDR
// for i := array downto 1 do
70595: LD_ADDR_VAR 0 3
70599: PUSH
70600: DOUBLE
70601: LD_VAR 0 1
70605: INC
70606: ST_TO_ADDR
70607: LD_INT 1
70609: PUSH
70610: FOR_DOWNTO
70611: IFFALSE 70641
// result := Join ( result , array [ i ] ) ;
70613: LD_ADDR_VAR 0 2
70617: PUSH
70618: LD_VAR 0 2
70622: PPUSH
70623: LD_VAR 0 1
70627: PUSH
70628: LD_VAR 0 3
70632: ARRAY
70633: PPUSH
70634: CALL 75485 0 2
70638: ST_TO_ADDR
70639: GO 70610
70641: POP
70642: POP
// end ;
70643: LD_VAR 0 2
70647: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
70648: LD_INT 0
70650: PPUSH
70651: PPUSH
70652: PPUSH
70653: PPUSH
70654: PPUSH
70655: PPUSH
// if not unit or not hexes then
70656: LD_VAR 0 1
70660: NOT
70661: IFTRUE 70670
70663: PUSH
70664: LD_VAR 0 2
70668: NOT
70669: OR
70670: IFFALSE 70674
// exit ;
70672: GO 70797
// dist := 9999 ;
70674: LD_ADDR_VAR 0 5
70678: PUSH
70679: LD_INT 9999
70681: ST_TO_ADDR
// for i = 1 to hexes do
70682: LD_ADDR_VAR 0 4
70686: PUSH
70687: DOUBLE
70688: LD_INT 1
70690: DEC
70691: ST_TO_ADDR
70692: LD_VAR 0 2
70696: PUSH
70697: FOR_TO
70698: IFFALSE 70785
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70700: LD_ADDR_VAR 0 6
70704: PUSH
70705: LD_VAR 0 1
70709: PPUSH
70710: LD_VAR 0 2
70714: PUSH
70715: LD_VAR 0 4
70719: ARRAY
70720: PUSH
70721: LD_INT 1
70723: ARRAY
70724: PPUSH
70725: LD_VAR 0 2
70729: PUSH
70730: LD_VAR 0 4
70734: ARRAY
70735: PUSH
70736: LD_INT 2
70738: ARRAY
70739: PPUSH
70740: CALL_OW 297
70744: ST_TO_ADDR
// if tdist < dist then
70745: LD_VAR 0 6
70749: PUSH
70750: LD_VAR 0 5
70754: LESS
70755: IFFALSE 70783
// begin hex := hexes [ i ] ;
70757: LD_ADDR_VAR 0 8
70761: PUSH
70762: LD_VAR 0 2
70766: PUSH
70767: LD_VAR 0 4
70771: ARRAY
70772: ST_TO_ADDR
// dist := tdist ;
70773: LD_ADDR_VAR 0 5
70777: PUSH
70778: LD_VAR 0 6
70782: ST_TO_ADDR
// end ; end ;
70783: GO 70697
70785: POP
70786: POP
// result := hex ;
70787: LD_ADDR_VAR 0 3
70791: PUSH
70792: LD_VAR 0 8
70796: ST_TO_ADDR
// end ;
70797: LD_VAR 0 3
70801: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70802: LD_INT 0
70804: PPUSH
70805: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70806: LD_VAR 0 1
70810: NOT
70811: IFTRUE 70850
70813: PUSH
70814: LD_VAR 0 1
70818: PUSH
70819: LD_INT 21
70821: PUSH
70822: LD_INT 2
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: PUSH
70829: LD_INT 23
70831: PUSH
70832: LD_INT 2
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: PUSH
70839: EMPTY
70840: LIST
70841: LIST
70842: PPUSH
70843: CALL_OW 69
70847: IN
70848: NOT
70849: OR
70850: IFFALSE 70854
// exit ;
70852: GO 70901
// for i = 1 to 3 do
70854: LD_ADDR_VAR 0 3
70858: PUSH
70859: DOUBLE
70860: LD_INT 1
70862: DEC
70863: ST_TO_ADDR
70864: LD_INT 3
70866: PUSH
70867: FOR_TO
70868: IFFALSE 70899
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70870: LD_VAR 0 1
70874: PPUSH
70875: CALL_OW 250
70879: PPUSH
70880: LD_VAR 0 1
70884: PPUSH
70885: CALL_OW 251
70889: PPUSH
70890: LD_INT 1
70892: PPUSH
70893: CALL_OW 453
70897: GO 70867
70899: POP
70900: POP
// end ;
70901: LD_VAR 0 2
70905: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70906: LD_INT 0
70908: PPUSH
70909: PPUSH
70910: PPUSH
70911: PPUSH
70912: PPUSH
70913: PPUSH
// if not unit or not enemy_unit then
70914: LD_VAR 0 1
70918: NOT
70919: IFTRUE 70928
70921: PUSH
70922: LD_VAR 0 2
70926: NOT
70927: OR
70928: IFFALSE 70932
// exit ;
70930: GO 71403
// if GetLives ( i ) < 250 then
70932: LD_VAR 0 4
70936: PPUSH
70937: CALL_OW 256
70941: PUSH
70942: LD_INT 250
70944: LESS
70945: IFFALSE 70958
// begin ComAutodestruct ( i ) ;
70947: LD_VAR 0 4
70951: PPUSH
70952: CALL 70802 0 1
// exit ;
70956: GO 71403
// end ; x := GetX ( enemy_unit ) ;
70958: LD_ADDR_VAR 0 7
70962: PUSH
70963: LD_VAR 0 2
70967: PPUSH
70968: CALL_OW 250
70972: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70973: LD_ADDR_VAR 0 8
70977: PUSH
70978: LD_VAR 0 2
70982: PPUSH
70983: CALL_OW 251
70987: ST_TO_ADDR
// if not x or not y then
70988: LD_VAR 0 7
70992: NOT
70993: IFTRUE 71002
70995: PUSH
70996: LD_VAR 0 8
71000: NOT
71001: OR
71002: IFFALSE 71006
// exit ;
71004: GO 71403
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71006: LD_ADDR_VAR 0 6
71010: PUSH
71011: LD_VAR 0 7
71015: PPUSH
71016: LD_INT 0
71018: PPUSH
71019: LD_INT 4
71021: PPUSH
71022: CALL_OW 272
71026: PUSH
71027: LD_VAR 0 8
71031: PPUSH
71032: LD_INT 0
71034: PPUSH
71035: LD_INT 4
71037: PPUSH
71038: CALL_OW 273
71042: PUSH
71043: EMPTY
71044: LIST
71045: LIST
71046: PUSH
71047: LD_VAR 0 7
71051: PPUSH
71052: LD_INT 1
71054: PPUSH
71055: LD_INT 4
71057: PPUSH
71058: CALL_OW 272
71062: PUSH
71063: LD_VAR 0 8
71067: PPUSH
71068: LD_INT 1
71070: PPUSH
71071: LD_INT 4
71073: PPUSH
71074: CALL_OW 273
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PUSH
71083: LD_VAR 0 7
71087: PPUSH
71088: LD_INT 2
71090: PPUSH
71091: LD_INT 4
71093: PPUSH
71094: CALL_OW 272
71098: PUSH
71099: LD_VAR 0 8
71103: PPUSH
71104: LD_INT 2
71106: PPUSH
71107: LD_INT 4
71109: PPUSH
71110: CALL_OW 273
71114: PUSH
71115: EMPTY
71116: LIST
71117: LIST
71118: PUSH
71119: LD_VAR 0 7
71123: PPUSH
71124: LD_INT 3
71126: PPUSH
71127: LD_INT 4
71129: PPUSH
71130: CALL_OW 272
71134: PUSH
71135: LD_VAR 0 8
71139: PPUSH
71140: LD_INT 3
71142: PPUSH
71143: LD_INT 4
71145: PPUSH
71146: CALL_OW 273
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: PUSH
71155: LD_VAR 0 7
71159: PPUSH
71160: LD_INT 4
71162: PPUSH
71163: LD_INT 4
71165: PPUSH
71166: CALL_OW 272
71170: PUSH
71171: LD_VAR 0 8
71175: PPUSH
71176: LD_INT 4
71178: PPUSH
71179: LD_INT 4
71181: PPUSH
71182: CALL_OW 273
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: PUSH
71191: LD_VAR 0 7
71195: PPUSH
71196: LD_INT 5
71198: PPUSH
71199: LD_INT 4
71201: PPUSH
71202: CALL_OW 272
71206: PUSH
71207: LD_VAR 0 8
71211: PPUSH
71212: LD_INT 5
71214: PPUSH
71215: LD_INT 4
71217: PPUSH
71218: CALL_OW 273
71222: PUSH
71223: EMPTY
71224: LIST
71225: LIST
71226: PUSH
71227: EMPTY
71228: LIST
71229: LIST
71230: LIST
71231: LIST
71232: LIST
71233: LIST
71234: ST_TO_ADDR
// for i = tmp downto 1 do
71235: LD_ADDR_VAR 0 4
71239: PUSH
71240: DOUBLE
71241: LD_VAR 0 6
71245: INC
71246: ST_TO_ADDR
71247: LD_INT 1
71249: PUSH
71250: FOR_DOWNTO
71251: IFFALSE 71354
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71253: LD_VAR 0 6
71257: PUSH
71258: LD_VAR 0 4
71262: ARRAY
71263: PUSH
71264: LD_INT 1
71266: ARRAY
71267: PPUSH
71268: LD_VAR 0 6
71272: PUSH
71273: LD_VAR 0 4
71277: ARRAY
71278: PUSH
71279: LD_INT 2
71281: ARRAY
71282: PPUSH
71283: CALL_OW 488
71287: NOT
71288: IFTRUE 71330
71290: PUSH
71291: LD_VAR 0 6
71295: PUSH
71296: LD_VAR 0 4
71300: ARRAY
71301: PUSH
71302: LD_INT 1
71304: ARRAY
71305: PPUSH
71306: LD_VAR 0 6
71310: PUSH
71311: LD_VAR 0 4
71315: ARRAY
71316: PUSH
71317: LD_INT 2
71319: ARRAY
71320: PPUSH
71321: CALL_OW 428
71325: PUSH
71326: LD_INT 0
71328: NONEQUAL
71329: OR
71330: IFFALSE 71352
// tmp := Delete ( tmp , i ) ;
71332: LD_ADDR_VAR 0 6
71336: PUSH
71337: LD_VAR 0 6
71341: PPUSH
71342: LD_VAR 0 4
71346: PPUSH
71347: CALL_OW 3
71351: ST_TO_ADDR
71352: GO 71250
71354: POP
71355: POP
// j := GetClosestHex ( unit , tmp ) ;
71356: LD_ADDR_VAR 0 5
71360: PUSH
71361: LD_VAR 0 1
71365: PPUSH
71366: LD_VAR 0 6
71370: PPUSH
71371: CALL 70648 0 2
71375: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71376: LD_VAR 0 1
71380: PPUSH
71381: LD_VAR 0 5
71385: PUSH
71386: LD_INT 1
71388: ARRAY
71389: PPUSH
71390: LD_VAR 0 5
71394: PUSH
71395: LD_INT 2
71397: ARRAY
71398: PPUSH
71399: CALL_OW 111
// end ;
71403: LD_VAR 0 3
71407: RET
// export function PrepareApemanSoldier ( ) ; begin
71408: LD_INT 0
71410: PPUSH
// uc_nation := 0 ;
71411: LD_ADDR_OWVAR 21
71415: PUSH
71416: LD_INT 0
71418: ST_TO_ADDR
// hc_sex := sex_male ;
71419: LD_ADDR_OWVAR 27
71423: PUSH
71424: LD_INT 1
71426: ST_TO_ADDR
// hc_name :=  ;
71427: LD_ADDR_OWVAR 26
71431: PUSH
71432: LD_STRING 
71434: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
71435: LD_ADDR_OWVAR 28
71439: PUSH
71440: LD_INT 15
71442: ST_TO_ADDR
// hc_gallery :=  ;
71443: LD_ADDR_OWVAR 33
71447: PUSH
71448: LD_STRING 
71450: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71451: LD_ADDR_OWVAR 31
71455: PUSH
71456: LD_INT 0
71458: PPUSH
71459: LD_INT 3
71461: PPUSH
71462: CALL_OW 12
71466: PUSH
71467: LD_INT 0
71469: PPUSH
71470: LD_INT 3
71472: PPUSH
71473: CALL_OW 12
71477: PUSH
71478: LD_INT 0
71480: PUSH
71481: LD_INT 0
71483: PUSH
71484: EMPTY
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
71490: LD_ADDR_OWVAR 29
71494: PUSH
71495: LD_INT 12
71497: PUSH
71498: LD_INT 12
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: ST_TO_ADDR
// end ;
71505: LD_VAR 0 1
71509: RET
// export function PrepareApemanEngineer ( ) ; begin
71510: LD_INT 0
71512: PPUSH
// uc_nation := 0 ;
71513: LD_ADDR_OWVAR 21
71517: PUSH
71518: LD_INT 0
71520: ST_TO_ADDR
// hc_sex := sex_male ;
71521: LD_ADDR_OWVAR 27
71525: PUSH
71526: LD_INT 1
71528: ST_TO_ADDR
// hc_name :=  ;
71529: LD_ADDR_OWVAR 26
71533: PUSH
71534: LD_STRING 
71536: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
71537: LD_ADDR_OWVAR 28
71541: PUSH
71542: LD_INT 16
71544: ST_TO_ADDR
// hc_gallery :=  ;
71545: LD_ADDR_OWVAR 33
71549: PUSH
71550: LD_STRING 
71552: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71553: LD_ADDR_OWVAR 31
71557: PUSH
71558: LD_INT 0
71560: PPUSH
71561: LD_INT 3
71563: PPUSH
71564: CALL_OW 12
71568: PUSH
71569: LD_INT 0
71571: PPUSH
71572: LD_INT 3
71574: PPUSH
71575: CALL_OW 12
71579: PUSH
71580: LD_INT 0
71582: PUSH
71583: LD_INT 0
71585: PUSH
71586: EMPTY
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
71592: LD_ADDR_OWVAR 29
71596: PUSH
71597: LD_INT 12
71599: PUSH
71600: LD_INT 12
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: ST_TO_ADDR
// end ;
71607: LD_VAR 0 1
71611: RET
// export function PrepareApeman ( agressivity ) ; begin
71612: LD_INT 0
71614: PPUSH
// uc_side := 0 ;
71615: LD_ADDR_OWVAR 20
71619: PUSH
71620: LD_INT 0
71622: ST_TO_ADDR
// uc_nation := 0 ;
71623: LD_ADDR_OWVAR 21
71627: PUSH
71628: LD_INT 0
71630: ST_TO_ADDR
// hc_sex := sex_male ;
71631: LD_ADDR_OWVAR 27
71635: PUSH
71636: LD_INT 1
71638: ST_TO_ADDR
// hc_class := class_apeman ;
71639: LD_ADDR_OWVAR 28
71643: PUSH
71644: LD_INT 12
71646: ST_TO_ADDR
// hc_gallery :=  ;
71647: LD_ADDR_OWVAR 33
71651: PUSH
71652: LD_STRING 
71654: ST_TO_ADDR
// hc_name :=  ;
71655: LD_ADDR_OWVAR 26
71659: PUSH
71660: LD_STRING 
71662: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
71663: LD_ADDR_OWVAR 29
71667: PUSH
71668: LD_INT 12
71670: PUSH
71671: LD_INT 12
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: ST_TO_ADDR
// if agressivity = 0 then
71678: LD_VAR 0 1
71682: PUSH
71683: LD_INT 0
71685: EQUAL
71686: IFFALSE 71698
// hc_agressivity := 0 else
71688: LD_ADDR_OWVAR 35
71692: PUSH
71693: LD_INT 0
71695: ST_TO_ADDR
71696: GO 71719
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71698: LD_ADDR_OWVAR 35
71702: PUSH
71703: LD_VAR 0 1
71707: NEG
71708: PPUSH
71709: LD_VAR 0 1
71713: PPUSH
71714: CALL_OW 12
71718: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71719: LD_ADDR_OWVAR 31
71723: PUSH
71724: LD_INT 0
71726: PPUSH
71727: LD_INT 3
71729: PPUSH
71730: CALL_OW 12
71734: PUSH
71735: LD_INT 0
71737: PPUSH
71738: LD_INT 3
71740: PPUSH
71741: CALL_OW 12
71745: PUSH
71746: LD_INT 0
71748: PUSH
71749: LD_INT 0
71751: PUSH
71752: EMPTY
71753: LIST
71754: LIST
71755: LIST
71756: LIST
71757: ST_TO_ADDR
// end ;
71758: LD_VAR 0 2
71762: RET
// export function PrepareTiger ( agressivity ) ; begin
71763: LD_INT 0
71765: PPUSH
// uc_side := 0 ;
71766: LD_ADDR_OWVAR 20
71770: PUSH
71771: LD_INT 0
71773: ST_TO_ADDR
// uc_nation := 0 ;
71774: LD_ADDR_OWVAR 21
71778: PUSH
71779: LD_INT 0
71781: ST_TO_ADDR
// InitHc ;
71782: CALL_OW 19
// hc_class := class_tiger ;
71786: LD_ADDR_OWVAR 28
71790: PUSH
71791: LD_INT 14
71793: ST_TO_ADDR
// hc_gallery :=  ;
71794: LD_ADDR_OWVAR 33
71798: PUSH
71799: LD_STRING 
71801: ST_TO_ADDR
// hc_name :=  ;
71802: LD_ADDR_OWVAR 26
71806: PUSH
71807: LD_STRING 
71809: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71810: LD_ADDR_OWVAR 35
71814: PUSH
71815: LD_VAR 0 1
71819: NEG
71820: PPUSH
71821: LD_VAR 0 1
71825: PPUSH
71826: CALL_OW 12
71830: ST_TO_ADDR
// end ;
71831: LD_VAR 0 2
71835: RET
// export function PrepareEnchidna ( ) ; begin
71836: LD_INT 0
71838: PPUSH
// uc_side := 0 ;
71839: LD_ADDR_OWVAR 20
71843: PUSH
71844: LD_INT 0
71846: ST_TO_ADDR
// uc_nation := 0 ;
71847: LD_ADDR_OWVAR 21
71851: PUSH
71852: LD_INT 0
71854: ST_TO_ADDR
// InitHc ;
71855: CALL_OW 19
// hc_class := class_baggie ;
71859: LD_ADDR_OWVAR 28
71863: PUSH
71864: LD_INT 13
71866: ST_TO_ADDR
// hc_gallery :=  ;
71867: LD_ADDR_OWVAR 33
71871: PUSH
71872: LD_STRING 
71874: ST_TO_ADDR
// hc_name :=  ;
71875: LD_ADDR_OWVAR 26
71879: PUSH
71880: LD_STRING 
71882: ST_TO_ADDR
// end ;
71883: LD_VAR 0 1
71887: RET
// export function PrepareFrog ( ) ; begin
71888: LD_INT 0
71890: PPUSH
// uc_side := 0 ;
71891: LD_ADDR_OWVAR 20
71895: PUSH
71896: LD_INT 0
71898: ST_TO_ADDR
// uc_nation := 0 ;
71899: LD_ADDR_OWVAR 21
71903: PUSH
71904: LD_INT 0
71906: ST_TO_ADDR
// InitHc ;
71907: CALL_OW 19
// hc_class := class_frog ;
71911: LD_ADDR_OWVAR 28
71915: PUSH
71916: LD_INT 19
71918: ST_TO_ADDR
// hc_gallery :=  ;
71919: LD_ADDR_OWVAR 33
71923: PUSH
71924: LD_STRING 
71926: ST_TO_ADDR
// hc_name :=  ;
71927: LD_ADDR_OWVAR 26
71931: PUSH
71932: LD_STRING 
71934: ST_TO_ADDR
// end ;
71935: LD_VAR 0 1
71939: RET
// export function PrepareFish ( ) ; begin
71940: LD_INT 0
71942: PPUSH
// uc_side := 0 ;
71943: LD_ADDR_OWVAR 20
71947: PUSH
71948: LD_INT 0
71950: ST_TO_ADDR
// uc_nation := 0 ;
71951: LD_ADDR_OWVAR 21
71955: PUSH
71956: LD_INT 0
71958: ST_TO_ADDR
// InitHc ;
71959: CALL_OW 19
// hc_class := class_fish ;
71963: LD_ADDR_OWVAR 28
71967: PUSH
71968: LD_INT 20
71970: ST_TO_ADDR
// hc_gallery :=  ;
71971: LD_ADDR_OWVAR 33
71975: PUSH
71976: LD_STRING 
71978: ST_TO_ADDR
// hc_name :=  ;
71979: LD_ADDR_OWVAR 26
71983: PUSH
71984: LD_STRING 
71986: ST_TO_ADDR
// end ;
71987: LD_VAR 0 1
71991: RET
// export function PrepareBird ( ) ; begin
71992: LD_INT 0
71994: PPUSH
// uc_side := 0 ;
71995: LD_ADDR_OWVAR 20
71999: PUSH
72000: LD_INT 0
72002: ST_TO_ADDR
// uc_nation := 0 ;
72003: LD_ADDR_OWVAR 21
72007: PUSH
72008: LD_INT 0
72010: ST_TO_ADDR
// InitHc ;
72011: CALL_OW 19
// hc_class := class_phororhacos ;
72015: LD_ADDR_OWVAR 28
72019: PUSH
72020: LD_INT 18
72022: ST_TO_ADDR
// hc_gallery :=  ;
72023: LD_ADDR_OWVAR 33
72027: PUSH
72028: LD_STRING 
72030: ST_TO_ADDR
// hc_name :=  ;
72031: LD_ADDR_OWVAR 26
72035: PUSH
72036: LD_STRING 
72038: ST_TO_ADDR
// end ;
72039: LD_VAR 0 1
72043: RET
// export function PrepareHorse ( ) ; begin
72044: LD_INT 0
72046: PPUSH
// uc_side := 0 ;
72047: LD_ADDR_OWVAR 20
72051: PUSH
72052: LD_INT 0
72054: ST_TO_ADDR
// uc_nation := 0 ;
72055: LD_ADDR_OWVAR 21
72059: PUSH
72060: LD_INT 0
72062: ST_TO_ADDR
// InitHc ;
72063: CALL_OW 19
// hc_class := class_horse ;
72067: LD_ADDR_OWVAR 28
72071: PUSH
72072: LD_INT 21
72074: ST_TO_ADDR
// hc_gallery :=  ;
72075: LD_ADDR_OWVAR 33
72079: PUSH
72080: LD_STRING 
72082: ST_TO_ADDR
// hc_name :=  ;
72083: LD_ADDR_OWVAR 26
72087: PUSH
72088: LD_STRING 
72090: ST_TO_ADDR
// end ;
72091: LD_VAR 0 1
72095: RET
// export function PrepareMastodont ( ) ; begin
72096: LD_INT 0
72098: PPUSH
// uc_side := 0 ;
72099: LD_ADDR_OWVAR 20
72103: PUSH
72104: LD_INT 0
72106: ST_TO_ADDR
// uc_nation := 0 ;
72107: LD_ADDR_OWVAR 21
72111: PUSH
72112: LD_INT 0
72114: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72115: LD_ADDR_OWVAR 37
72119: PUSH
72120: LD_INT 31
72122: ST_TO_ADDR
// vc_control := control_rider ;
72123: LD_ADDR_OWVAR 38
72127: PUSH
72128: LD_INT 4
72130: ST_TO_ADDR
// end ;
72131: LD_VAR 0 1
72135: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72136: LD_INT 0
72138: PPUSH
72139: PPUSH
72140: PPUSH
// uc_side = 0 ;
72141: LD_ADDR_OWVAR 20
72145: PUSH
72146: LD_INT 0
72148: ST_TO_ADDR
// uc_nation = 0 ;
72149: LD_ADDR_OWVAR 21
72153: PUSH
72154: LD_INT 0
72156: ST_TO_ADDR
// InitHc_All ( ) ;
72157: CALL_OW 584
// InitVc ;
72161: CALL_OW 20
// if mastodonts then
72165: LD_VAR 0 6
72169: IFFALSE 72236
// for i = 1 to mastodonts do
72171: LD_ADDR_VAR 0 11
72175: PUSH
72176: DOUBLE
72177: LD_INT 1
72179: DEC
72180: ST_TO_ADDR
72181: LD_VAR 0 6
72185: PUSH
72186: FOR_TO
72187: IFFALSE 72234
// begin vc_chassis := 31 ;
72189: LD_ADDR_OWVAR 37
72193: PUSH
72194: LD_INT 31
72196: ST_TO_ADDR
// vc_control := control_rider ;
72197: LD_ADDR_OWVAR 38
72201: PUSH
72202: LD_INT 4
72204: ST_TO_ADDR
// animal := CreateVehicle ;
72205: LD_ADDR_VAR 0 12
72209: PUSH
72210: CALL_OW 45
72214: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72215: LD_VAR 0 12
72219: PPUSH
72220: LD_VAR 0 8
72224: PPUSH
72225: LD_INT 0
72227: PPUSH
72228: CALL 74378 0 3
// end ;
72232: GO 72186
72234: POP
72235: POP
// if horses then
72236: LD_VAR 0 5
72240: IFFALSE 72307
// for i = 1 to horses do
72242: LD_ADDR_VAR 0 11
72246: PUSH
72247: DOUBLE
72248: LD_INT 1
72250: DEC
72251: ST_TO_ADDR
72252: LD_VAR 0 5
72256: PUSH
72257: FOR_TO
72258: IFFALSE 72305
// begin hc_class := 21 ;
72260: LD_ADDR_OWVAR 28
72264: PUSH
72265: LD_INT 21
72267: ST_TO_ADDR
// hc_gallery :=  ;
72268: LD_ADDR_OWVAR 33
72272: PUSH
72273: LD_STRING 
72275: ST_TO_ADDR
// animal := CreateHuman ;
72276: LD_ADDR_VAR 0 12
72280: PUSH
72281: CALL_OW 44
72285: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72286: LD_VAR 0 12
72290: PPUSH
72291: LD_VAR 0 8
72295: PPUSH
72296: LD_INT 0
72298: PPUSH
72299: CALL 74378 0 3
// end ;
72303: GO 72257
72305: POP
72306: POP
// if birds then
72307: LD_VAR 0 1
72311: IFFALSE 72378
// for i = 1 to birds do
72313: LD_ADDR_VAR 0 11
72317: PUSH
72318: DOUBLE
72319: LD_INT 1
72321: DEC
72322: ST_TO_ADDR
72323: LD_VAR 0 1
72327: PUSH
72328: FOR_TO
72329: IFFALSE 72376
// begin hc_class := 18 ;
72331: LD_ADDR_OWVAR 28
72335: PUSH
72336: LD_INT 18
72338: ST_TO_ADDR
// hc_gallery =  ;
72339: LD_ADDR_OWVAR 33
72343: PUSH
72344: LD_STRING 
72346: ST_TO_ADDR
// animal := CreateHuman ;
72347: LD_ADDR_VAR 0 12
72351: PUSH
72352: CALL_OW 44
72356: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72357: LD_VAR 0 12
72361: PPUSH
72362: LD_VAR 0 8
72366: PPUSH
72367: LD_INT 0
72369: PPUSH
72370: CALL 74378 0 3
// end ;
72374: GO 72328
72376: POP
72377: POP
// if tigers then
72378: LD_VAR 0 2
72382: IFFALSE 72466
// for i = 1 to tigers do
72384: LD_ADDR_VAR 0 11
72388: PUSH
72389: DOUBLE
72390: LD_INT 1
72392: DEC
72393: ST_TO_ADDR
72394: LD_VAR 0 2
72398: PUSH
72399: FOR_TO
72400: IFFALSE 72464
// begin hc_class = class_tiger ;
72402: LD_ADDR_OWVAR 28
72406: PUSH
72407: LD_INT 14
72409: ST_TO_ADDR
// hc_gallery =  ;
72410: LD_ADDR_OWVAR 33
72414: PUSH
72415: LD_STRING 
72417: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72418: LD_ADDR_OWVAR 35
72422: PUSH
72423: LD_INT 7
72425: NEG
72426: PPUSH
72427: LD_INT 7
72429: PPUSH
72430: CALL_OW 12
72434: ST_TO_ADDR
// animal := CreateHuman ;
72435: LD_ADDR_VAR 0 12
72439: PUSH
72440: CALL_OW 44
72444: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72445: LD_VAR 0 12
72449: PPUSH
72450: LD_VAR 0 8
72454: PPUSH
72455: LD_INT 0
72457: PPUSH
72458: CALL 74378 0 3
// end ;
72462: GO 72399
72464: POP
72465: POP
// if apemans then
72466: LD_VAR 0 3
72470: IFFALSE 72593
// for i = 1 to apemans do
72472: LD_ADDR_VAR 0 11
72476: PUSH
72477: DOUBLE
72478: LD_INT 1
72480: DEC
72481: ST_TO_ADDR
72482: LD_VAR 0 3
72486: PUSH
72487: FOR_TO
72488: IFFALSE 72591
// begin hc_class = class_apeman ;
72490: LD_ADDR_OWVAR 28
72494: PUSH
72495: LD_INT 12
72497: ST_TO_ADDR
// hc_gallery =  ;
72498: LD_ADDR_OWVAR 33
72502: PUSH
72503: LD_STRING 
72505: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72506: LD_ADDR_OWVAR 35
72510: PUSH
72511: LD_INT 2
72513: NEG
72514: PPUSH
72515: LD_INT 2
72517: PPUSH
72518: CALL_OW 12
72522: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72523: LD_ADDR_OWVAR 31
72527: PUSH
72528: LD_INT 1
72530: PPUSH
72531: LD_INT 3
72533: PPUSH
72534: CALL_OW 12
72538: PUSH
72539: LD_INT 1
72541: PPUSH
72542: LD_INT 3
72544: PPUSH
72545: CALL_OW 12
72549: PUSH
72550: LD_INT 0
72552: PUSH
72553: LD_INT 0
72555: PUSH
72556: EMPTY
72557: LIST
72558: LIST
72559: LIST
72560: LIST
72561: ST_TO_ADDR
// animal := CreateHuman ;
72562: LD_ADDR_VAR 0 12
72566: PUSH
72567: CALL_OW 44
72571: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72572: LD_VAR 0 12
72576: PPUSH
72577: LD_VAR 0 8
72581: PPUSH
72582: LD_INT 0
72584: PPUSH
72585: CALL 74378 0 3
// end ;
72589: GO 72487
72591: POP
72592: POP
// if enchidnas then
72593: LD_VAR 0 4
72597: IFFALSE 72664
// for i = 1 to enchidnas do
72599: LD_ADDR_VAR 0 11
72603: PUSH
72604: DOUBLE
72605: LD_INT 1
72607: DEC
72608: ST_TO_ADDR
72609: LD_VAR 0 4
72613: PUSH
72614: FOR_TO
72615: IFFALSE 72662
// begin hc_class = 13 ;
72617: LD_ADDR_OWVAR 28
72621: PUSH
72622: LD_INT 13
72624: ST_TO_ADDR
// hc_gallery =  ;
72625: LD_ADDR_OWVAR 33
72629: PUSH
72630: LD_STRING 
72632: ST_TO_ADDR
// animal := CreateHuman ;
72633: LD_ADDR_VAR 0 12
72637: PUSH
72638: CALL_OW 44
72642: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72643: LD_VAR 0 12
72647: PPUSH
72648: LD_VAR 0 8
72652: PPUSH
72653: LD_INT 0
72655: PPUSH
72656: CALL 74378 0 3
// end ;
72660: GO 72614
72662: POP
72663: POP
// if fishes then
72664: LD_VAR 0 7
72668: IFFALSE 72735
// for i = 1 to fishes do
72670: LD_ADDR_VAR 0 11
72674: PUSH
72675: DOUBLE
72676: LD_INT 1
72678: DEC
72679: ST_TO_ADDR
72680: LD_VAR 0 7
72684: PUSH
72685: FOR_TO
72686: IFFALSE 72733
// begin hc_class = 20 ;
72688: LD_ADDR_OWVAR 28
72692: PUSH
72693: LD_INT 20
72695: ST_TO_ADDR
// hc_gallery =  ;
72696: LD_ADDR_OWVAR 33
72700: PUSH
72701: LD_STRING 
72703: ST_TO_ADDR
// animal := CreateHuman ;
72704: LD_ADDR_VAR 0 12
72708: PUSH
72709: CALL_OW 44
72713: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72714: LD_VAR 0 12
72718: PPUSH
72719: LD_VAR 0 9
72723: PPUSH
72724: LD_INT 0
72726: PPUSH
72727: CALL 74378 0 3
// end ;
72731: GO 72685
72733: POP
72734: POP
// end ;
72735: LD_VAR 0 10
72739: RET
// export function WantHeal ( sci , unit ) ; begin
72740: LD_INT 0
72742: PPUSH
// if GetTaskList ( sci ) > 0 then
72743: LD_VAR 0 1
72747: PPUSH
72748: CALL_OW 437
72752: PUSH
72753: LD_INT 0
72755: GREATER
72756: IFFALSE 72828
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72758: LD_VAR 0 1
72762: PPUSH
72763: CALL_OW 437
72767: PUSH
72768: LD_INT 1
72770: ARRAY
72771: PUSH
72772: LD_INT 1
72774: ARRAY
72775: PUSH
72776: LD_STRING l
72778: EQUAL
72779: IFFALSE 72806
72781: PUSH
72782: LD_VAR 0 1
72786: PPUSH
72787: CALL_OW 437
72791: PUSH
72792: LD_INT 1
72794: ARRAY
72795: PUSH
72796: LD_INT 4
72798: ARRAY
72799: PUSH
72800: LD_VAR 0 2
72804: EQUAL
72805: AND
72806: IFFALSE 72818
// result := true else
72808: LD_ADDR_VAR 0 3
72812: PUSH
72813: LD_INT 1
72815: ST_TO_ADDR
72816: GO 72826
// result := false ;
72818: LD_ADDR_VAR 0 3
72822: PUSH
72823: LD_INT 0
72825: ST_TO_ADDR
// end else
72826: GO 72836
// result := false ;
72828: LD_ADDR_VAR 0 3
72832: PUSH
72833: LD_INT 0
72835: ST_TO_ADDR
// end ;
72836: LD_VAR 0 3
72840: RET
// export function HealTarget ( sci ) ; begin
72841: LD_INT 0
72843: PPUSH
// if not sci then
72844: LD_VAR 0 1
72848: NOT
72849: IFFALSE 72853
// exit ;
72851: GO 72918
// result := 0 ;
72853: LD_ADDR_VAR 0 2
72857: PUSH
72858: LD_INT 0
72860: ST_TO_ADDR
// if GetTaskList ( sci ) then
72861: LD_VAR 0 1
72865: PPUSH
72866: CALL_OW 437
72870: IFFALSE 72918
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72872: LD_VAR 0 1
72876: PPUSH
72877: CALL_OW 437
72881: PUSH
72882: LD_INT 1
72884: ARRAY
72885: PUSH
72886: LD_INT 1
72888: ARRAY
72889: PUSH
72890: LD_STRING l
72892: EQUAL
72893: IFFALSE 72918
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72895: LD_ADDR_VAR 0 2
72899: PUSH
72900: LD_VAR 0 1
72904: PPUSH
72905: CALL_OW 437
72909: PUSH
72910: LD_INT 1
72912: ARRAY
72913: PUSH
72914: LD_INT 4
72916: ARRAY
72917: ST_TO_ADDR
// end ;
72918: LD_VAR 0 2
72922: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72923: LD_INT 0
72925: PPUSH
72926: PPUSH
72927: PPUSH
72928: PPUSH
// if not base_units then
72929: LD_VAR 0 1
72933: NOT
72934: IFFALSE 72938
// exit ;
72936: GO 73025
// result := false ;
72938: LD_ADDR_VAR 0 2
72942: PUSH
72943: LD_INT 0
72945: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72946: LD_ADDR_VAR 0 5
72950: PUSH
72951: LD_VAR 0 1
72955: PPUSH
72956: LD_INT 21
72958: PUSH
72959: LD_INT 3
72961: PUSH
72962: EMPTY
72963: LIST
72964: LIST
72965: PPUSH
72966: CALL_OW 72
72970: ST_TO_ADDR
// if not tmp then
72971: LD_VAR 0 5
72975: NOT
72976: IFFALSE 72980
// exit ;
72978: GO 73025
// for i in tmp do
72980: LD_ADDR_VAR 0 3
72984: PUSH
72985: LD_VAR 0 5
72989: PUSH
72990: FOR_IN
72991: IFFALSE 73023
// begin result := EnemyInRange ( i , 22 ) ;
72993: LD_ADDR_VAR 0 2
72997: PUSH
72998: LD_VAR 0 3
73002: PPUSH
73003: LD_INT 22
73005: PPUSH
73006: CALL 70450 0 2
73010: ST_TO_ADDR
// if result then
73011: LD_VAR 0 2
73015: IFFALSE 73021
// exit ;
73017: POP
73018: POP
73019: GO 73025
// end ;
73021: GO 72990
73023: POP
73024: POP
// end ;
73025: LD_VAR 0 2
73029: RET
// export function FilterByTag ( units , tag ) ; begin
73030: LD_INT 0
73032: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73033: LD_ADDR_VAR 0 3
73037: PUSH
73038: LD_VAR 0 1
73042: PPUSH
73043: LD_INT 120
73045: PUSH
73046: LD_VAR 0 2
73050: PUSH
73051: EMPTY
73052: LIST
73053: LIST
73054: PPUSH
73055: CALL_OW 72
73059: ST_TO_ADDR
// end ;
73060: LD_VAR 0 3
73064: RET
// export function IsDriver ( un ) ; begin
73065: LD_INT 0
73067: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73068: LD_ADDR_VAR 0 2
73072: PUSH
73073: LD_VAR 0 1
73077: PUSH
73078: LD_INT 55
73080: PUSH
73081: EMPTY
73082: LIST
73083: PPUSH
73084: CALL_OW 69
73088: IN
73089: ST_TO_ADDR
// end ;
73090: LD_VAR 0 2
73094: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73095: LD_INT 0
73097: PPUSH
73098: PPUSH
// list := [ ] ;
73099: LD_ADDR_VAR 0 5
73103: PUSH
73104: EMPTY
73105: ST_TO_ADDR
// case d of 0 :
73106: LD_VAR 0 3
73110: PUSH
73111: LD_INT 0
73113: DOUBLE
73114: EQUAL
73115: IFTRUE 73119
73117: GO 73252
73119: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73120: LD_ADDR_VAR 0 5
73124: PUSH
73125: LD_VAR 0 1
73129: PUSH
73130: LD_INT 4
73132: MINUS
73133: PUSH
73134: LD_VAR 0 2
73138: PUSH
73139: LD_INT 4
73141: MINUS
73142: PUSH
73143: LD_INT 2
73145: PUSH
73146: EMPTY
73147: LIST
73148: LIST
73149: LIST
73150: PUSH
73151: LD_VAR 0 1
73155: PUSH
73156: LD_INT 3
73158: MINUS
73159: PUSH
73160: LD_VAR 0 2
73164: PUSH
73165: LD_INT 1
73167: PUSH
73168: EMPTY
73169: LIST
73170: LIST
73171: LIST
73172: PUSH
73173: LD_VAR 0 1
73177: PUSH
73178: LD_INT 4
73180: PLUS
73181: PUSH
73182: LD_VAR 0 2
73186: PUSH
73187: LD_INT 4
73189: PUSH
73190: EMPTY
73191: LIST
73192: LIST
73193: LIST
73194: PUSH
73195: LD_VAR 0 1
73199: PUSH
73200: LD_INT 3
73202: PLUS
73203: PUSH
73204: LD_VAR 0 2
73208: PUSH
73209: LD_INT 3
73211: PLUS
73212: PUSH
73213: LD_INT 5
73215: PUSH
73216: EMPTY
73217: LIST
73218: LIST
73219: LIST
73220: PUSH
73221: LD_VAR 0 1
73225: PUSH
73226: LD_VAR 0 2
73230: PUSH
73231: LD_INT 4
73233: PLUS
73234: PUSH
73235: LD_INT 0
73237: PUSH
73238: EMPTY
73239: LIST
73240: LIST
73241: LIST
73242: PUSH
73243: EMPTY
73244: LIST
73245: LIST
73246: LIST
73247: LIST
73248: LIST
73249: ST_TO_ADDR
// end ; 1 :
73250: GO 73950
73252: LD_INT 1
73254: DOUBLE
73255: EQUAL
73256: IFTRUE 73260
73258: GO 73393
73260: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73261: LD_ADDR_VAR 0 5
73265: PUSH
73266: LD_VAR 0 1
73270: PUSH
73271: LD_VAR 0 2
73275: PUSH
73276: LD_INT 4
73278: MINUS
73279: PUSH
73280: LD_INT 3
73282: PUSH
73283: EMPTY
73284: LIST
73285: LIST
73286: LIST
73287: PUSH
73288: LD_VAR 0 1
73292: PUSH
73293: LD_INT 3
73295: MINUS
73296: PUSH
73297: LD_VAR 0 2
73301: PUSH
73302: LD_INT 3
73304: MINUS
73305: PUSH
73306: LD_INT 2
73308: PUSH
73309: EMPTY
73310: LIST
73311: LIST
73312: LIST
73313: PUSH
73314: LD_VAR 0 1
73318: PUSH
73319: LD_INT 4
73321: MINUS
73322: PUSH
73323: LD_VAR 0 2
73327: PUSH
73328: LD_INT 1
73330: PUSH
73331: EMPTY
73332: LIST
73333: LIST
73334: LIST
73335: PUSH
73336: LD_VAR 0 1
73340: PUSH
73341: LD_VAR 0 2
73345: PUSH
73346: LD_INT 3
73348: PLUS
73349: PUSH
73350: LD_INT 0
73352: PUSH
73353: EMPTY
73354: LIST
73355: LIST
73356: LIST
73357: PUSH
73358: LD_VAR 0 1
73362: PUSH
73363: LD_INT 4
73365: PLUS
73366: PUSH
73367: LD_VAR 0 2
73371: PUSH
73372: LD_INT 4
73374: PLUS
73375: PUSH
73376: LD_INT 5
73378: PUSH
73379: EMPTY
73380: LIST
73381: LIST
73382: LIST
73383: PUSH
73384: EMPTY
73385: LIST
73386: LIST
73387: LIST
73388: LIST
73389: LIST
73390: ST_TO_ADDR
// end ; 2 :
73391: GO 73950
73393: LD_INT 2
73395: DOUBLE
73396: EQUAL
73397: IFTRUE 73401
73399: GO 73530
73401: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73402: LD_ADDR_VAR 0 5
73406: PUSH
73407: LD_VAR 0 1
73411: PUSH
73412: LD_VAR 0 2
73416: PUSH
73417: LD_INT 3
73419: MINUS
73420: PUSH
73421: LD_INT 3
73423: PUSH
73424: EMPTY
73425: LIST
73426: LIST
73427: LIST
73428: PUSH
73429: LD_VAR 0 1
73433: PUSH
73434: LD_INT 4
73436: PLUS
73437: PUSH
73438: LD_VAR 0 2
73442: PUSH
73443: LD_INT 4
73445: PUSH
73446: EMPTY
73447: LIST
73448: LIST
73449: LIST
73450: PUSH
73451: LD_VAR 0 1
73455: PUSH
73456: LD_VAR 0 2
73460: PUSH
73461: LD_INT 4
73463: PLUS
73464: PUSH
73465: LD_INT 0
73467: PUSH
73468: EMPTY
73469: LIST
73470: LIST
73471: LIST
73472: PUSH
73473: LD_VAR 0 1
73477: PUSH
73478: LD_INT 3
73480: MINUS
73481: PUSH
73482: LD_VAR 0 2
73486: PUSH
73487: LD_INT 1
73489: PUSH
73490: EMPTY
73491: LIST
73492: LIST
73493: LIST
73494: PUSH
73495: LD_VAR 0 1
73499: PUSH
73500: LD_INT 4
73502: MINUS
73503: PUSH
73504: LD_VAR 0 2
73508: PUSH
73509: LD_INT 4
73511: MINUS
73512: PUSH
73513: LD_INT 2
73515: PUSH
73516: EMPTY
73517: LIST
73518: LIST
73519: LIST
73520: PUSH
73521: EMPTY
73522: LIST
73523: LIST
73524: LIST
73525: LIST
73526: LIST
73527: ST_TO_ADDR
// end ; 3 :
73528: GO 73950
73530: LD_INT 3
73532: DOUBLE
73533: EQUAL
73534: IFTRUE 73538
73536: GO 73671
73538: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73539: LD_ADDR_VAR 0 5
73543: PUSH
73544: LD_VAR 0 1
73548: PUSH
73549: LD_INT 3
73551: PLUS
73552: PUSH
73553: LD_VAR 0 2
73557: PUSH
73558: LD_INT 4
73560: PUSH
73561: EMPTY
73562: LIST
73563: LIST
73564: LIST
73565: PUSH
73566: LD_VAR 0 1
73570: PUSH
73571: LD_INT 4
73573: PLUS
73574: PUSH
73575: LD_VAR 0 2
73579: PUSH
73580: LD_INT 4
73582: PLUS
73583: PUSH
73584: LD_INT 5
73586: PUSH
73587: EMPTY
73588: LIST
73589: LIST
73590: LIST
73591: PUSH
73592: LD_VAR 0 1
73596: PUSH
73597: LD_INT 4
73599: MINUS
73600: PUSH
73601: LD_VAR 0 2
73605: PUSH
73606: LD_INT 1
73608: PUSH
73609: EMPTY
73610: LIST
73611: LIST
73612: LIST
73613: PUSH
73614: LD_VAR 0 1
73618: PUSH
73619: LD_VAR 0 2
73623: PUSH
73624: LD_INT 4
73626: MINUS
73627: PUSH
73628: LD_INT 3
73630: PUSH
73631: EMPTY
73632: LIST
73633: LIST
73634: LIST
73635: PUSH
73636: LD_VAR 0 1
73640: PUSH
73641: LD_INT 3
73643: MINUS
73644: PUSH
73645: LD_VAR 0 2
73649: PUSH
73650: LD_INT 3
73652: MINUS
73653: PUSH
73654: LD_INT 2
73656: PUSH
73657: EMPTY
73658: LIST
73659: LIST
73660: LIST
73661: PUSH
73662: EMPTY
73663: LIST
73664: LIST
73665: LIST
73666: LIST
73667: LIST
73668: ST_TO_ADDR
// end ; 4 :
73669: GO 73950
73671: LD_INT 4
73673: DOUBLE
73674: EQUAL
73675: IFTRUE 73679
73677: GO 73812
73679: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73680: LD_ADDR_VAR 0 5
73684: PUSH
73685: LD_VAR 0 1
73689: PUSH
73690: LD_VAR 0 2
73694: PUSH
73695: LD_INT 4
73697: PLUS
73698: PUSH
73699: LD_INT 0
73701: PUSH
73702: EMPTY
73703: LIST
73704: LIST
73705: LIST
73706: PUSH
73707: LD_VAR 0 1
73711: PUSH
73712: LD_INT 3
73714: PLUS
73715: PUSH
73716: LD_VAR 0 2
73720: PUSH
73721: LD_INT 3
73723: PLUS
73724: PUSH
73725: LD_INT 5
73727: PUSH
73728: EMPTY
73729: LIST
73730: LIST
73731: LIST
73732: PUSH
73733: LD_VAR 0 1
73737: PUSH
73738: LD_INT 4
73740: PLUS
73741: PUSH
73742: LD_VAR 0 2
73746: PUSH
73747: LD_INT 4
73749: PUSH
73750: EMPTY
73751: LIST
73752: LIST
73753: LIST
73754: PUSH
73755: LD_VAR 0 1
73759: PUSH
73760: LD_VAR 0 2
73764: PUSH
73765: LD_INT 3
73767: MINUS
73768: PUSH
73769: LD_INT 3
73771: PUSH
73772: EMPTY
73773: LIST
73774: LIST
73775: LIST
73776: PUSH
73777: LD_VAR 0 1
73781: PUSH
73782: LD_INT 4
73784: MINUS
73785: PUSH
73786: LD_VAR 0 2
73790: PUSH
73791: LD_INT 4
73793: MINUS
73794: PUSH
73795: LD_INT 2
73797: PUSH
73798: EMPTY
73799: LIST
73800: LIST
73801: LIST
73802: PUSH
73803: EMPTY
73804: LIST
73805: LIST
73806: LIST
73807: LIST
73808: LIST
73809: ST_TO_ADDR
// end ; 5 :
73810: GO 73950
73812: LD_INT 5
73814: DOUBLE
73815: EQUAL
73816: IFTRUE 73820
73818: GO 73949
73820: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73821: LD_ADDR_VAR 0 5
73825: PUSH
73826: LD_VAR 0 1
73830: PUSH
73831: LD_INT 4
73833: MINUS
73834: PUSH
73835: LD_VAR 0 2
73839: PUSH
73840: LD_INT 1
73842: PUSH
73843: EMPTY
73844: LIST
73845: LIST
73846: LIST
73847: PUSH
73848: LD_VAR 0 1
73852: PUSH
73853: LD_VAR 0 2
73857: PUSH
73858: LD_INT 4
73860: MINUS
73861: PUSH
73862: LD_INT 3
73864: PUSH
73865: EMPTY
73866: LIST
73867: LIST
73868: LIST
73869: PUSH
73870: LD_VAR 0 1
73874: PUSH
73875: LD_INT 4
73877: PLUS
73878: PUSH
73879: LD_VAR 0 2
73883: PUSH
73884: LD_INT 4
73886: PLUS
73887: PUSH
73888: LD_INT 5
73890: PUSH
73891: EMPTY
73892: LIST
73893: LIST
73894: LIST
73895: PUSH
73896: LD_VAR 0 1
73900: PUSH
73901: LD_INT 3
73903: PLUS
73904: PUSH
73905: LD_VAR 0 2
73909: PUSH
73910: LD_INT 4
73912: PUSH
73913: EMPTY
73914: LIST
73915: LIST
73916: LIST
73917: PUSH
73918: LD_VAR 0 1
73922: PUSH
73923: LD_VAR 0 2
73927: PUSH
73928: LD_INT 3
73930: PLUS
73931: PUSH
73932: LD_INT 0
73934: PUSH
73935: EMPTY
73936: LIST
73937: LIST
73938: LIST
73939: PUSH
73940: EMPTY
73941: LIST
73942: LIST
73943: LIST
73944: LIST
73945: LIST
73946: ST_TO_ADDR
// end ; end ;
73947: GO 73950
73949: POP
// result := list ;
73950: LD_ADDR_VAR 0 4
73954: PUSH
73955: LD_VAR 0 5
73959: ST_TO_ADDR
// end ;
73960: LD_VAR 0 4
73964: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73965: LD_INT 0
73967: PPUSH
73968: PPUSH
73969: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73970: LD_VAR 0 1
73974: NOT
73975: IFTRUE 74003
73977: PUSH
73978: LD_VAR 0 2
73982: PUSH
73983: LD_INT 1
73985: PUSH
73986: LD_INT 2
73988: PUSH
73989: LD_INT 3
73991: PUSH
73992: LD_INT 4
73994: PUSH
73995: EMPTY
73996: LIST
73997: LIST
73998: LIST
73999: LIST
74000: IN
74001: NOT
74002: OR
74003: IFFALSE 74007
// exit ;
74005: GO 74090
// tmp := [ ] ;
74007: LD_ADDR_VAR 0 5
74011: PUSH
74012: EMPTY
74013: ST_TO_ADDR
// for i in units do
74014: LD_ADDR_VAR 0 4
74018: PUSH
74019: LD_VAR 0 1
74023: PUSH
74024: FOR_IN
74025: IFFALSE 74059
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
74027: LD_ADDR_VAR 0 5
74031: PUSH
74032: LD_VAR 0 5
74036: PPUSH
74037: LD_VAR 0 4
74041: PPUSH
74042: LD_VAR 0 2
74046: PPUSH
74047: CALL_OW 259
74051: PPUSH
74052: CALL 75485 0 2
74056: ST_TO_ADDR
74057: GO 74024
74059: POP
74060: POP
// if not tmp then
74061: LD_VAR 0 5
74065: NOT
74066: IFFALSE 74070
// exit ;
74068: GO 74090
// result := SortListByListDesc ( units , tmp ) ;
74070: LD_ADDR_VAR 0 3
74074: PUSH
74075: LD_VAR 0 1
74079: PPUSH
74080: LD_VAR 0 5
74084: PPUSH
74085: CALL_OW 77
74089: ST_TO_ADDR
// end ;
74090: LD_VAR 0 3
74094: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74095: LD_INT 0
74097: PPUSH
74098: PPUSH
74099: PPUSH
// result := false ;
74100: LD_ADDR_VAR 0 3
74104: PUSH
74105: LD_INT 0
74107: ST_TO_ADDR
// if not building then
74108: LD_VAR 0 2
74112: NOT
74113: IFFALSE 74117
// exit ;
74115: GO 74261
// x := GetX ( building ) ;
74117: LD_ADDR_VAR 0 4
74121: PUSH
74122: LD_VAR 0 2
74126: PPUSH
74127: CALL_OW 250
74131: ST_TO_ADDR
// y := GetY ( building ) ;
74132: LD_ADDR_VAR 0 5
74136: PUSH
74137: LD_VAR 0 2
74141: PPUSH
74142: CALL_OW 251
74146: ST_TO_ADDR
// if not x or not y then
74147: LD_VAR 0 4
74151: NOT
74152: IFTRUE 74161
74154: PUSH
74155: LD_VAR 0 5
74159: NOT
74160: OR
74161: IFFALSE 74165
// exit ;
74163: GO 74261
// if GetTaskList ( unit ) then
74165: LD_VAR 0 1
74169: PPUSH
74170: CALL_OW 437
74174: IFFALSE 74261
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74176: LD_STRING e
74178: PUSH
74179: LD_VAR 0 1
74183: PPUSH
74184: CALL_OW 437
74188: PUSH
74189: LD_INT 1
74191: ARRAY
74192: PUSH
74193: LD_INT 1
74195: ARRAY
74196: EQUAL
74197: IFFALSE 74224
74199: PUSH
74200: LD_VAR 0 4
74204: PUSH
74205: LD_VAR 0 1
74209: PPUSH
74210: CALL_OW 437
74214: PUSH
74215: LD_INT 1
74217: ARRAY
74218: PUSH
74219: LD_INT 2
74221: ARRAY
74222: EQUAL
74223: AND
74224: IFFALSE 74251
74226: PUSH
74227: LD_VAR 0 5
74231: PUSH
74232: LD_VAR 0 1
74236: PPUSH
74237: CALL_OW 437
74241: PUSH
74242: LD_INT 1
74244: ARRAY
74245: PUSH
74246: LD_INT 3
74248: ARRAY
74249: EQUAL
74250: AND
74251: IFFALSE 74261
// result := true end ;
74253: LD_ADDR_VAR 0 3
74257: PUSH
74258: LD_INT 1
74260: ST_TO_ADDR
// end ;
74261: LD_VAR 0 3
74265: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74266: LD_INT 0
74268: PPUSH
// result := false ;
74269: LD_ADDR_VAR 0 4
74273: PUSH
74274: LD_INT 0
74276: ST_TO_ADDR
// if GetTaskList ( unit ) then
74277: LD_VAR 0 1
74281: PPUSH
74282: CALL_OW 437
74286: IFFALSE 74373
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74288: LD_STRING M
74290: PUSH
74291: LD_VAR 0 1
74295: PPUSH
74296: CALL_OW 437
74300: PUSH
74301: LD_INT 1
74303: ARRAY
74304: PUSH
74305: LD_INT 1
74307: ARRAY
74308: EQUAL
74309: IFFALSE 74336
74311: PUSH
74312: LD_VAR 0 2
74316: PUSH
74317: LD_VAR 0 1
74321: PPUSH
74322: CALL_OW 437
74326: PUSH
74327: LD_INT 1
74329: ARRAY
74330: PUSH
74331: LD_INT 2
74333: ARRAY
74334: EQUAL
74335: AND
74336: IFFALSE 74363
74338: PUSH
74339: LD_VAR 0 3
74343: PUSH
74344: LD_VAR 0 1
74348: PPUSH
74349: CALL_OW 437
74353: PUSH
74354: LD_INT 1
74356: ARRAY
74357: PUSH
74358: LD_INT 3
74360: ARRAY
74361: EQUAL
74362: AND
74363: IFFALSE 74373
// result := true ;
74365: LD_ADDR_VAR 0 4
74369: PUSH
74370: LD_INT 1
74372: ST_TO_ADDR
// end ; end ;
74373: LD_VAR 0 4
74377: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74378: LD_INT 0
74380: PPUSH
74381: PPUSH
74382: PPUSH
74383: PPUSH
// if not unit or not area then
74384: LD_VAR 0 1
74388: NOT
74389: IFTRUE 74398
74391: PUSH
74392: LD_VAR 0 2
74396: NOT
74397: OR
74398: IFFALSE 74402
// exit ;
74400: GO 74578
// tmp := AreaToList ( area , i ) ;
74402: LD_ADDR_VAR 0 6
74406: PUSH
74407: LD_VAR 0 2
74411: PPUSH
74412: LD_VAR 0 5
74416: PPUSH
74417: CALL_OW 517
74421: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74422: LD_ADDR_VAR 0 5
74426: PUSH
74427: DOUBLE
74428: LD_INT 1
74430: DEC
74431: ST_TO_ADDR
74432: LD_VAR 0 6
74436: PUSH
74437: LD_INT 1
74439: ARRAY
74440: PUSH
74441: FOR_TO
74442: IFFALSE 74576
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74444: LD_ADDR_VAR 0 7
74448: PUSH
74449: LD_VAR 0 6
74453: PUSH
74454: LD_INT 1
74456: ARRAY
74457: PUSH
74458: LD_VAR 0 5
74462: ARRAY
74463: PUSH
74464: LD_VAR 0 6
74468: PUSH
74469: LD_INT 2
74471: ARRAY
74472: PUSH
74473: LD_VAR 0 5
74477: ARRAY
74478: PUSH
74479: EMPTY
74480: LIST
74481: LIST
74482: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
74483: LD_INT 92
74485: PUSH
74486: LD_VAR 0 7
74490: PUSH
74491: LD_INT 1
74493: ARRAY
74494: PUSH
74495: LD_VAR 0 7
74499: PUSH
74500: LD_INT 2
74502: ARRAY
74503: PUSH
74504: LD_INT 2
74506: PUSH
74507: EMPTY
74508: LIST
74509: LIST
74510: LIST
74511: LIST
74512: PPUSH
74513: CALL_OW 69
74517: PUSH
74518: LD_INT 0
74520: EQUAL
74521: IFFALSE 74574
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74523: LD_VAR 0 1
74527: PPUSH
74528: LD_VAR 0 7
74532: PUSH
74533: LD_INT 1
74535: ARRAY
74536: PPUSH
74537: LD_VAR 0 7
74541: PUSH
74542: LD_INT 2
74544: ARRAY
74545: PPUSH
74546: LD_VAR 0 3
74550: PPUSH
74551: CALL_OW 48
// result := IsPlaced ( unit ) ;
74555: LD_ADDR_VAR 0 4
74559: PUSH
74560: LD_VAR 0 1
74564: PPUSH
74565: CALL_OW 305
74569: ST_TO_ADDR
// exit ;
74570: POP
74571: POP
74572: GO 74578
// end ; end ;
74574: GO 74441
74576: POP
74577: POP
// end ;
74578: LD_VAR 0 4
74582: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74583: LD_INT 0
74585: PPUSH
74586: PPUSH
74587: PPUSH
// if not side or side > 8 then
74588: LD_VAR 0 1
74592: NOT
74593: IFTRUE 74605
74595: PUSH
74596: LD_VAR 0 1
74600: PUSH
74601: LD_INT 8
74603: GREATER
74604: OR
74605: IFFALSE 74609
// exit ;
74607: GO 74796
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74609: LD_ADDR_VAR 0 4
74613: PUSH
74614: LD_INT 22
74616: PUSH
74617: LD_VAR 0 1
74621: PUSH
74622: EMPTY
74623: LIST
74624: LIST
74625: PUSH
74626: LD_INT 21
74628: PUSH
74629: LD_INT 3
74631: PUSH
74632: EMPTY
74633: LIST
74634: LIST
74635: PUSH
74636: EMPTY
74637: LIST
74638: LIST
74639: PPUSH
74640: CALL_OW 69
74644: ST_TO_ADDR
// if not tmp then
74645: LD_VAR 0 4
74649: NOT
74650: IFFALSE 74654
// exit ;
74652: GO 74796
// enable_addtolog := true ;
74654: LD_ADDR_OWVAR 81
74658: PUSH
74659: LD_INT 1
74661: ST_TO_ADDR
// AddToLog ( [ ) ;
74662: LD_STRING [
74664: PPUSH
74665: CALL_OW 561
// for i in tmp do
74669: LD_ADDR_VAR 0 3
74673: PUSH
74674: LD_VAR 0 4
74678: PUSH
74679: FOR_IN
74680: IFFALSE 74787
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74682: LD_STRING [
74684: PUSH
74685: LD_VAR 0 3
74689: PPUSH
74690: CALL_OW 266
74694: STR
74695: PUSH
74696: LD_STRING , 
74698: STR
74699: PUSH
74700: LD_VAR 0 3
74704: PPUSH
74705: CALL_OW 250
74709: STR
74710: PUSH
74711: LD_STRING , 
74713: STR
74714: PUSH
74715: LD_VAR 0 3
74719: PPUSH
74720: CALL_OW 251
74724: STR
74725: PUSH
74726: LD_STRING , 
74728: STR
74729: PUSH
74730: LD_VAR 0 3
74734: PPUSH
74735: CALL_OW 254
74739: STR
74740: PUSH
74741: LD_STRING , 
74743: STR
74744: PUSH
74745: LD_VAR 0 3
74749: PPUSH
74750: LD_INT 1
74752: PPUSH
74753: CALL_OW 268
74757: STR
74758: PUSH
74759: LD_STRING , 
74761: STR
74762: PUSH
74763: LD_VAR 0 3
74767: PPUSH
74768: LD_INT 2
74770: PPUSH
74771: CALL_OW 268
74775: STR
74776: PUSH
74777: LD_STRING ],
74779: STR
74780: PPUSH
74781: CALL_OW 561
// end ;
74785: GO 74679
74787: POP
74788: POP
// AddToLog ( ]; ) ;
74789: LD_STRING ];
74791: PPUSH
74792: CALL_OW 561
// end ;
74796: LD_VAR 0 2
74800: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74801: LD_INT 0
74803: PPUSH
74804: PPUSH
74805: PPUSH
74806: PPUSH
74807: PPUSH
// if not area or not rate or not max then
74808: LD_VAR 0 1
74812: NOT
74813: IFTRUE 74822
74815: PUSH
74816: LD_VAR 0 2
74820: NOT
74821: OR
74822: IFTRUE 74831
74824: PUSH
74825: LD_VAR 0 4
74829: NOT
74830: OR
74831: IFFALSE 74835
// exit ;
74833: GO 75024
// while 1 do
74835: LD_INT 1
74837: IFFALSE 75024
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74839: LD_ADDR_VAR 0 9
74843: PUSH
74844: LD_VAR 0 1
74848: PPUSH
74849: LD_INT 1
74851: PPUSH
74852: CALL_OW 287
74856: PUSH
74857: LD_INT 10
74859: MUL
74860: ST_TO_ADDR
// r := rate / 10 ;
74861: LD_ADDR_VAR 0 7
74865: PUSH
74866: LD_VAR 0 2
74870: PUSH
74871: LD_INT 10
74873: DIVREAL
74874: ST_TO_ADDR
// time := 1 1$00 ;
74875: LD_ADDR_VAR 0 8
74879: PUSH
74880: LD_INT 2100
74882: ST_TO_ADDR
// if amount < min then
74883: LD_VAR 0 9
74887: PUSH
74888: LD_VAR 0 3
74892: LESS
74893: IFFALSE 74911
// r := r * 2 else
74895: LD_ADDR_VAR 0 7
74899: PUSH
74900: LD_VAR 0 7
74904: PUSH
74905: LD_INT 2
74907: MUL
74908: ST_TO_ADDR
74909: GO 74937
// if amount > max then
74911: LD_VAR 0 9
74915: PUSH
74916: LD_VAR 0 4
74920: GREATER
74921: IFFALSE 74937
// r := r / 2 ;
74923: LD_ADDR_VAR 0 7
74927: PUSH
74928: LD_VAR 0 7
74932: PUSH
74933: LD_INT 2
74935: DIVREAL
74936: ST_TO_ADDR
// time := time / r ;
74937: LD_ADDR_VAR 0 8
74941: PUSH
74942: LD_VAR 0 8
74946: PUSH
74947: LD_VAR 0 7
74951: DIVREAL
74952: ST_TO_ADDR
// if time < 0 then
74953: LD_VAR 0 8
74957: PUSH
74958: LD_INT 0
74960: LESS
74961: IFFALSE 74978
// time := time * - 1 ;
74963: LD_ADDR_VAR 0 8
74967: PUSH
74968: LD_VAR 0 8
74972: PUSH
74973: LD_INT 1
74975: NEG
74976: MUL
74977: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
74978: LD_VAR 0 8
74982: PUSH
74983: LD_INT 35
74985: PPUSH
74986: LD_INT 875
74988: PPUSH
74989: CALL_OW 12
74993: PLUS
74994: PPUSH
74995: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74999: LD_INT 1
75001: PPUSH
75002: LD_INT 5
75004: PPUSH
75005: CALL_OW 12
75009: PPUSH
75010: LD_VAR 0 1
75014: PPUSH
75015: LD_INT 1
75017: PPUSH
75018: CALL_OW 55
// end ;
75022: GO 74835
// end ;
75024: LD_VAR 0 5
75028: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75029: LD_INT 0
75031: PPUSH
75032: PPUSH
75033: PPUSH
75034: PPUSH
75035: PPUSH
75036: PPUSH
75037: PPUSH
75038: PPUSH
// if not turrets or not factories then
75039: LD_VAR 0 1
75043: NOT
75044: IFTRUE 75053
75046: PUSH
75047: LD_VAR 0 2
75051: NOT
75052: OR
75053: IFFALSE 75057
// exit ;
75055: GO 75364
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75057: LD_ADDR_VAR 0 10
75061: PUSH
75062: LD_INT 5
75064: PUSH
75065: LD_INT 6
75067: PUSH
75068: EMPTY
75069: LIST
75070: LIST
75071: PUSH
75072: LD_INT 2
75074: PUSH
75075: LD_INT 4
75077: PUSH
75078: EMPTY
75079: LIST
75080: LIST
75081: PUSH
75082: LD_INT 3
75084: PUSH
75085: LD_INT 5
75087: PUSH
75088: EMPTY
75089: LIST
75090: LIST
75091: PUSH
75092: EMPTY
75093: LIST
75094: LIST
75095: LIST
75096: PUSH
75097: LD_INT 24
75099: PUSH
75100: LD_INT 25
75102: PUSH
75103: EMPTY
75104: LIST
75105: LIST
75106: PUSH
75107: LD_INT 23
75109: PUSH
75110: LD_INT 27
75112: PUSH
75113: EMPTY
75114: LIST
75115: LIST
75116: PUSH
75117: EMPTY
75118: LIST
75119: LIST
75120: PUSH
75121: LD_INT 42
75123: PUSH
75124: LD_INT 43
75126: PUSH
75127: EMPTY
75128: LIST
75129: LIST
75130: PUSH
75131: LD_INT 44
75133: PUSH
75134: LD_INT 46
75136: PUSH
75137: EMPTY
75138: LIST
75139: LIST
75140: PUSH
75141: LD_INT 45
75143: PUSH
75144: LD_INT 47
75146: PUSH
75147: EMPTY
75148: LIST
75149: LIST
75150: PUSH
75151: EMPTY
75152: LIST
75153: LIST
75154: LIST
75155: PUSH
75156: EMPTY
75157: LIST
75158: LIST
75159: LIST
75160: ST_TO_ADDR
// result := [ ] ;
75161: LD_ADDR_VAR 0 3
75165: PUSH
75166: EMPTY
75167: ST_TO_ADDR
// for i in turrets do
75168: LD_ADDR_VAR 0 4
75172: PUSH
75173: LD_VAR 0 1
75177: PUSH
75178: FOR_IN
75179: IFFALSE 75362
// begin nat := GetNation ( i ) ;
75181: LD_ADDR_VAR 0 7
75185: PUSH
75186: LD_VAR 0 4
75190: PPUSH
75191: CALL_OW 248
75195: ST_TO_ADDR
// weapon := 0 ;
75196: LD_ADDR_VAR 0 8
75200: PUSH
75201: LD_INT 0
75203: ST_TO_ADDR
// if not nat then
75204: LD_VAR 0 7
75208: NOT
75209: IFFALSE 75213
// continue ;
75211: GO 75178
// for j in list [ nat ] do
75213: LD_ADDR_VAR 0 5
75217: PUSH
75218: LD_VAR 0 10
75222: PUSH
75223: LD_VAR 0 7
75227: ARRAY
75228: PUSH
75229: FOR_IN
75230: IFFALSE 75271
// if GetBWeapon ( i ) = j [ 1 ] then
75232: LD_VAR 0 4
75236: PPUSH
75237: CALL_OW 269
75241: PUSH
75242: LD_VAR 0 5
75246: PUSH
75247: LD_INT 1
75249: ARRAY
75250: EQUAL
75251: IFFALSE 75269
// begin weapon := j [ 2 ] ;
75253: LD_ADDR_VAR 0 8
75257: PUSH
75258: LD_VAR 0 5
75262: PUSH
75263: LD_INT 2
75265: ARRAY
75266: ST_TO_ADDR
// break ;
75267: GO 75271
// end ;
75269: GO 75229
75271: POP
75272: POP
// if not weapon then
75273: LD_VAR 0 8
75277: NOT
75278: IFFALSE 75282
// continue ;
75280: GO 75178
// for k in factories do
75282: LD_ADDR_VAR 0 6
75286: PUSH
75287: LD_VAR 0 2
75291: PUSH
75292: FOR_IN
75293: IFFALSE 75358
// begin weapons := AvailableWeaponList ( k ) ;
75295: LD_ADDR_VAR 0 9
75299: PUSH
75300: LD_VAR 0 6
75304: PPUSH
75305: CALL_OW 478
75309: ST_TO_ADDR
// if not weapons then
75310: LD_VAR 0 9
75314: NOT
75315: IFFALSE 75319
// continue ;
75317: GO 75292
// if weapon in weapons then
75319: LD_VAR 0 8
75323: PUSH
75324: LD_VAR 0 9
75328: IN
75329: IFFALSE 75356
// begin result := [ i , weapon ] ;
75331: LD_ADDR_VAR 0 3
75335: PUSH
75336: LD_VAR 0 4
75340: PUSH
75341: LD_VAR 0 8
75345: PUSH
75346: EMPTY
75347: LIST
75348: LIST
75349: ST_TO_ADDR
// exit ;
75350: POP
75351: POP
75352: POP
75353: POP
75354: GO 75364
// end ; end ;
75356: GO 75292
75358: POP
75359: POP
// end ;
75360: GO 75178
75362: POP
75363: POP
// end ;
75364: LD_VAR 0 3
75368: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75369: LD_INT 0
75371: PPUSH
// if not side or side > 8 then
75372: LD_VAR 0 3
75376: NOT
75377: IFTRUE 75389
75379: PUSH
75380: LD_VAR 0 3
75384: PUSH
75385: LD_INT 8
75387: GREATER
75388: OR
75389: IFFALSE 75393
// exit ;
75391: GO 75452
// if not range then
75393: LD_VAR 0 4
75397: NOT
75398: IFFALSE 75409
// range := - 12 ;
75400: LD_ADDR_VAR 0 4
75404: PUSH
75405: LD_INT 12
75407: NEG
75408: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75409: LD_VAR 0 1
75413: PPUSH
75414: LD_VAR 0 2
75418: PPUSH
75419: LD_VAR 0 3
75423: PPUSH
75424: LD_VAR 0 4
75428: PPUSH
75429: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75433: LD_VAR 0 1
75437: PPUSH
75438: LD_VAR 0 2
75442: PPUSH
75443: LD_VAR 0 3
75447: PPUSH
75448: CALL_OW 331
// end ;
75452: LD_VAR 0 5
75456: RET
// export function Video ( mode ) ; begin
75457: LD_INT 0
75459: PPUSH
// ingame_video = mode ;
75460: LD_ADDR_OWVAR 52
75464: PUSH
75465: LD_VAR 0 1
75469: ST_TO_ADDR
// interface_hidden = mode ;
75470: LD_ADDR_OWVAR 54
75474: PUSH
75475: LD_VAR 0 1
75479: ST_TO_ADDR
// end ;
75480: LD_VAR 0 2
75484: RET
// export function Join ( array , element ) ; begin
75485: LD_INT 0
75487: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75488: LD_ADDR_VAR 0 3
75492: PUSH
75493: LD_VAR 0 1
75497: PPUSH
75498: LD_VAR 0 1
75502: PUSH
75503: LD_INT 1
75505: PLUS
75506: PPUSH
75507: LD_VAR 0 2
75511: PPUSH
75512: CALL_OW 1
75516: ST_TO_ADDR
// end ;
75517: LD_VAR 0 3
75521: RET
// export function JoinUnion ( array , element ) ; begin
75522: LD_INT 0
75524: PPUSH
// result := array union element ;
75525: LD_ADDR_VAR 0 3
75529: PUSH
75530: LD_VAR 0 1
75534: PUSH
75535: LD_VAR 0 2
75539: UNION
75540: ST_TO_ADDR
// end ;
75541: LD_VAR 0 3
75545: RET
// export function GetBehemoths ( side ) ; begin
75546: LD_INT 0
75548: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
75549: LD_ADDR_VAR 0 2
75553: PUSH
75554: LD_INT 22
75556: PUSH
75557: LD_VAR 0 1
75561: PUSH
75562: EMPTY
75563: LIST
75564: LIST
75565: PUSH
75566: LD_INT 31
75568: PUSH
75569: LD_INT 25
75571: PUSH
75572: EMPTY
75573: LIST
75574: LIST
75575: PUSH
75576: EMPTY
75577: LIST
75578: LIST
75579: PPUSH
75580: CALL_OW 69
75584: ST_TO_ADDR
// end ;
75585: LD_VAR 0 2
75589: RET
// export function Shuffle ( array ) ; var i , index ; begin
75590: LD_INT 0
75592: PPUSH
75593: PPUSH
75594: PPUSH
// result := [ ] ;
75595: LD_ADDR_VAR 0 2
75599: PUSH
75600: EMPTY
75601: ST_TO_ADDR
// if not array then
75602: LD_VAR 0 1
75606: NOT
75607: IFFALSE 75611
// exit ;
75609: GO 75710
// Randomize ;
75611: CALL_OW 10
// for i = array downto 1 do
75615: LD_ADDR_VAR 0 3
75619: PUSH
75620: DOUBLE
75621: LD_VAR 0 1
75625: INC
75626: ST_TO_ADDR
75627: LD_INT 1
75629: PUSH
75630: FOR_DOWNTO
75631: IFFALSE 75708
// begin index := rand ( 1 , array ) ;
75633: LD_ADDR_VAR 0 4
75637: PUSH
75638: LD_INT 1
75640: PPUSH
75641: LD_VAR 0 1
75645: PPUSH
75646: CALL_OW 12
75650: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75651: LD_ADDR_VAR 0 2
75655: PUSH
75656: LD_VAR 0 2
75660: PPUSH
75661: LD_VAR 0 2
75665: PUSH
75666: LD_INT 1
75668: PLUS
75669: PPUSH
75670: LD_VAR 0 1
75674: PUSH
75675: LD_VAR 0 4
75679: ARRAY
75680: PPUSH
75681: CALL_OW 2
75685: ST_TO_ADDR
// array := Delete ( array , index ) ;
75686: LD_ADDR_VAR 0 1
75690: PUSH
75691: LD_VAR 0 1
75695: PPUSH
75696: LD_VAR 0 4
75700: PPUSH
75701: CALL_OW 3
75705: ST_TO_ADDR
// end ;
75706: GO 75630
75708: POP
75709: POP
// end ;
75710: LD_VAR 0 2
75714: RET
// export function GetBaseMaterials ( base ) ; begin
75715: LD_INT 0
75717: PPUSH
// result := [ 0 , 0 , 0 ] ;
75718: LD_ADDR_VAR 0 2
75722: PUSH
75723: LD_INT 0
75725: PUSH
75726: LD_INT 0
75728: PUSH
75729: LD_INT 0
75731: PUSH
75732: EMPTY
75733: LIST
75734: LIST
75735: LIST
75736: ST_TO_ADDR
// if not base then
75737: LD_VAR 0 1
75741: NOT
75742: IFFALSE 75746
// exit ;
75744: GO 75795
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75746: LD_ADDR_VAR 0 2
75750: PUSH
75751: LD_VAR 0 1
75755: PPUSH
75756: LD_INT 1
75758: PPUSH
75759: CALL_OW 275
75763: PUSH
75764: LD_VAR 0 1
75768: PPUSH
75769: LD_INT 2
75771: PPUSH
75772: CALL_OW 275
75776: PUSH
75777: LD_VAR 0 1
75781: PPUSH
75782: LD_INT 3
75784: PPUSH
75785: CALL_OW 275
75789: PUSH
75790: EMPTY
75791: LIST
75792: LIST
75793: LIST
75794: ST_TO_ADDR
// end ;
75795: LD_VAR 0 2
75799: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75800: LD_INT 0
75802: PPUSH
75803: PPUSH
// result := array ;
75804: LD_ADDR_VAR 0 3
75808: PUSH
75809: LD_VAR 0 1
75813: ST_TO_ADDR
// if size >= result then
75814: LD_VAR 0 2
75818: PUSH
75819: LD_VAR 0 3
75823: GREATEREQUAL
75824: IFFALSE 75828
// exit ;
75826: GO 75878
// if size then
75828: LD_VAR 0 2
75832: IFFALSE 75878
// for i := array downto size do
75834: LD_ADDR_VAR 0 4
75838: PUSH
75839: DOUBLE
75840: LD_VAR 0 1
75844: INC
75845: ST_TO_ADDR
75846: LD_VAR 0 2
75850: PUSH
75851: FOR_DOWNTO
75852: IFFALSE 75876
// result := Delete ( result , result ) ;
75854: LD_ADDR_VAR 0 3
75858: PUSH
75859: LD_VAR 0 3
75863: PPUSH
75864: LD_VAR 0 3
75868: PPUSH
75869: CALL_OW 3
75873: ST_TO_ADDR
75874: GO 75851
75876: POP
75877: POP
// end ;
75878: LD_VAR 0 3
75882: RET
// export function ComExit ( unit ) ; var tmp ; begin
75883: LD_INT 0
75885: PPUSH
75886: PPUSH
// if not IsInUnit ( unit ) then
75887: LD_VAR 0 1
75891: PPUSH
75892: CALL_OW 310
75896: NOT
75897: IFFALSE 75901
// exit ;
75899: GO 75961
// tmp := IsInUnit ( unit ) ;
75901: LD_ADDR_VAR 0 3
75905: PUSH
75906: LD_VAR 0 1
75910: PPUSH
75911: CALL_OW 310
75915: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75916: LD_VAR 0 3
75920: PPUSH
75921: CALL_OW 247
75925: PUSH
75926: LD_INT 2
75928: EQUAL
75929: IFFALSE 75942
// ComExitVehicle ( unit ) else
75931: LD_VAR 0 1
75935: PPUSH
75936: CALL_OW 121
75940: GO 75951
// ComExitBuilding ( unit ) ;
75942: LD_VAR 0 1
75946: PPUSH
75947: CALL_OW 122
// result := tmp ;
75951: LD_ADDR_VAR 0 2
75955: PUSH
75956: LD_VAR 0 3
75960: ST_TO_ADDR
// end ;
75961: LD_VAR 0 2
75965: RET
// export function ComExitAll ( units ) ; var i ; begin
75966: LD_INT 0
75968: PPUSH
75969: PPUSH
// if not units then
75970: LD_VAR 0 1
75974: NOT
75975: IFFALSE 75979
// exit ;
75977: GO 76005
// for i in units do
75979: LD_ADDR_VAR 0 3
75983: PUSH
75984: LD_VAR 0 1
75988: PUSH
75989: FOR_IN
75990: IFFALSE 76003
// ComExit ( i ) ;
75992: LD_VAR 0 3
75996: PPUSH
75997: CALL 75883 0 1
76001: GO 75989
76003: POP
76004: POP
// end ;
76005: LD_VAR 0 2
76009: RET
// export function ResetHc ; begin
76010: LD_INT 0
76012: PPUSH
// InitHc ;
76013: CALL_OW 19
// hc_importance := 0 ;
76017: LD_ADDR_OWVAR 32
76021: PUSH
76022: LD_INT 0
76024: ST_TO_ADDR
// end ;
76025: LD_VAR 0 1
76029: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76030: LD_INT 0
76032: PPUSH
76033: PPUSH
76034: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76035: LD_ADDR_VAR 0 6
76039: PUSH
76040: LD_VAR 0 1
76044: PUSH
76045: LD_VAR 0 3
76049: PLUS
76050: PUSH
76051: LD_INT 2
76053: DIV
76054: ST_TO_ADDR
// if _x < 0 then
76055: LD_VAR 0 6
76059: PUSH
76060: LD_INT 0
76062: LESS
76063: IFFALSE 76080
// _x := _x * - 1 ;
76065: LD_ADDR_VAR 0 6
76069: PUSH
76070: LD_VAR 0 6
76074: PUSH
76075: LD_INT 1
76077: NEG
76078: MUL
76079: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76080: LD_ADDR_VAR 0 7
76084: PUSH
76085: LD_VAR 0 2
76089: PUSH
76090: LD_VAR 0 4
76094: PLUS
76095: PUSH
76096: LD_INT 2
76098: DIV
76099: ST_TO_ADDR
// if _y < 0 then
76100: LD_VAR 0 7
76104: PUSH
76105: LD_INT 0
76107: LESS
76108: IFFALSE 76125
// _y := _y * - 1 ;
76110: LD_ADDR_VAR 0 7
76114: PUSH
76115: LD_VAR 0 7
76119: PUSH
76120: LD_INT 1
76122: NEG
76123: MUL
76124: ST_TO_ADDR
// result := [ _x , _y ] ;
76125: LD_ADDR_VAR 0 5
76129: PUSH
76130: LD_VAR 0 6
76134: PUSH
76135: LD_VAR 0 7
76139: PUSH
76140: EMPTY
76141: LIST
76142: LIST
76143: ST_TO_ADDR
// end ;
76144: LD_VAR 0 5
76148: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76149: LD_INT 0
76151: PPUSH
76152: PPUSH
76153: PPUSH
76154: PPUSH
// task := GetTaskList ( unit ) ;
76155: LD_ADDR_VAR 0 7
76159: PUSH
76160: LD_VAR 0 1
76164: PPUSH
76165: CALL_OW 437
76169: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76170: LD_VAR 0 7
76174: NOT
76175: IFFALSE 76194
76177: PUSH
76178: LD_VAR 0 1
76182: PPUSH
76183: LD_VAR 0 2
76187: PPUSH
76188: CALL_OW 308
76192: NOT
76193: AND
76194: IFFALSE 76198
// exit ;
76196: GO 76316
// if IsInArea ( unit , area ) then
76198: LD_VAR 0 1
76202: PPUSH
76203: LD_VAR 0 2
76207: PPUSH
76208: CALL_OW 308
76212: IFFALSE 76230
// begin ComMoveToArea ( unit , goAway ) ;
76214: LD_VAR 0 1
76218: PPUSH
76219: LD_VAR 0 3
76223: PPUSH
76224: CALL_OW 113
// exit ;
76228: GO 76316
// end ; if task [ 1 ] [ 1 ] <> M then
76230: LD_VAR 0 7
76234: PUSH
76235: LD_INT 1
76237: ARRAY
76238: PUSH
76239: LD_INT 1
76241: ARRAY
76242: PUSH
76243: LD_STRING M
76245: NONEQUAL
76246: IFFALSE 76250
// exit ;
76248: GO 76316
// x := task [ 1 ] [ 2 ] ;
76250: LD_ADDR_VAR 0 5
76254: PUSH
76255: LD_VAR 0 7
76259: PUSH
76260: LD_INT 1
76262: ARRAY
76263: PUSH
76264: LD_INT 2
76266: ARRAY
76267: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76268: LD_ADDR_VAR 0 6
76272: PUSH
76273: LD_VAR 0 7
76277: PUSH
76278: LD_INT 1
76280: ARRAY
76281: PUSH
76282: LD_INT 3
76284: ARRAY
76285: ST_TO_ADDR
// if InArea ( x , y , area ) then
76286: LD_VAR 0 5
76290: PPUSH
76291: LD_VAR 0 6
76295: PPUSH
76296: LD_VAR 0 2
76300: PPUSH
76301: CALL_OW 309
76305: IFFALSE 76316
// ComStop ( unit ) ;
76307: LD_VAR 0 1
76311: PPUSH
76312: CALL_OW 141
// end ;
76316: LD_VAR 0 4
76320: RET
// export function Abs ( value ) ; begin
76321: LD_INT 0
76323: PPUSH
// result := value ;
76324: LD_ADDR_VAR 0 2
76328: PUSH
76329: LD_VAR 0 1
76333: ST_TO_ADDR
// if value < 0 then
76334: LD_VAR 0 1
76338: PUSH
76339: LD_INT 0
76341: LESS
76342: IFFALSE 76359
// result := value * - 1 ;
76344: LD_ADDR_VAR 0 2
76348: PUSH
76349: LD_VAR 0 1
76353: PUSH
76354: LD_INT 1
76356: NEG
76357: MUL
76358: ST_TO_ADDR
// end ;
76359: LD_VAR 0 2
76363: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76364: LD_INT 0
76366: PPUSH
76367: PPUSH
76368: PPUSH
76369: PPUSH
76370: PPUSH
76371: PPUSH
76372: PPUSH
76373: PPUSH
// if not unit or not building then
76374: LD_VAR 0 1
76378: NOT
76379: IFTRUE 76388
76381: PUSH
76382: LD_VAR 0 2
76386: NOT
76387: OR
76388: IFFALSE 76392
// exit ;
76390: GO 76620
// x := GetX ( building ) ;
76392: LD_ADDR_VAR 0 4
76396: PUSH
76397: LD_VAR 0 2
76401: PPUSH
76402: CALL_OW 250
76406: ST_TO_ADDR
// y := GetY ( building ) ;
76407: LD_ADDR_VAR 0 6
76411: PUSH
76412: LD_VAR 0 2
76416: PPUSH
76417: CALL_OW 251
76421: ST_TO_ADDR
// d := GetDir ( building ) ;
76422: LD_ADDR_VAR 0 8
76426: PUSH
76427: LD_VAR 0 2
76431: PPUSH
76432: CALL_OW 254
76436: ST_TO_ADDR
// r := 4 ;
76437: LD_ADDR_VAR 0 9
76441: PUSH
76442: LD_INT 4
76444: ST_TO_ADDR
// for i := 1 to 5 do
76445: LD_ADDR_VAR 0 10
76449: PUSH
76450: DOUBLE
76451: LD_INT 1
76453: DEC
76454: ST_TO_ADDR
76455: LD_INT 5
76457: PUSH
76458: FOR_TO
76459: IFFALSE 76618
// begin _x := ShiftX ( x , d , r + i ) ;
76461: LD_ADDR_VAR 0 5
76465: PUSH
76466: LD_VAR 0 4
76470: PPUSH
76471: LD_VAR 0 8
76475: PPUSH
76476: LD_VAR 0 9
76480: PUSH
76481: LD_VAR 0 10
76485: PLUS
76486: PPUSH
76487: CALL_OW 272
76491: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76492: LD_ADDR_VAR 0 7
76496: PUSH
76497: LD_VAR 0 6
76501: PPUSH
76502: LD_VAR 0 8
76506: PPUSH
76507: LD_VAR 0 9
76511: PUSH
76512: LD_VAR 0 10
76516: PLUS
76517: PPUSH
76518: CALL_OW 273
76522: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76523: LD_VAR 0 5
76527: PPUSH
76528: LD_VAR 0 7
76532: PPUSH
76533: CALL_OW 488
76537: IFFALSE 76572
76539: PUSH
76540: LD_VAR 0 5
76544: PPUSH
76545: LD_VAR 0 7
76549: PPUSH
76550: CALL_OW 428
76554: PPUSH
76555: CALL_OW 247
76559: PUSH
76560: LD_INT 3
76562: PUSH
76563: LD_INT 2
76565: PUSH
76566: EMPTY
76567: LIST
76568: LIST
76569: IN
76570: NOT
76571: AND
76572: IFFALSE 76616
// begin ComMoveXY ( unit , _x , _y ) ;
76574: LD_VAR 0 1
76578: PPUSH
76579: LD_VAR 0 5
76583: PPUSH
76584: LD_VAR 0 7
76588: PPUSH
76589: CALL_OW 111
// result := [ _x , _y ] ;
76593: LD_ADDR_VAR 0 3
76597: PUSH
76598: LD_VAR 0 5
76602: PUSH
76603: LD_VAR 0 7
76607: PUSH
76608: EMPTY
76609: LIST
76610: LIST
76611: ST_TO_ADDR
// exit ;
76612: POP
76613: POP
76614: GO 76620
// end ; end ;
76616: GO 76458
76618: POP
76619: POP
// end ;
76620: LD_VAR 0 3
76624: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76625: LD_INT 0
76627: PPUSH
76628: PPUSH
76629: PPUSH
// result := 0 ;
76630: LD_ADDR_VAR 0 3
76634: PUSH
76635: LD_INT 0
76637: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76638: LD_VAR 0 1
76642: PUSH
76643: LD_INT 0
76645: LESS
76646: IFTRUE 76658
76648: PUSH
76649: LD_VAR 0 1
76653: PUSH
76654: LD_INT 8
76656: GREATER
76657: OR
76658: IFTRUE 76670
76660: PUSH
76661: LD_VAR 0 2
76665: PUSH
76666: LD_INT 0
76668: LESS
76669: OR
76670: IFTRUE 76682
76672: PUSH
76673: LD_VAR 0 2
76677: PUSH
76678: LD_INT 8
76680: GREATER
76681: OR
76682: IFFALSE 76686
// exit ;
76684: GO 76761
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76686: LD_ADDR_VAR 0 4
76690: PUSH
76691: LD_INT 22
76693: PUSH
76694: LD_VAR 0 2
76698: PUSH
76699: EMPTY
76700: LIST
76701: LIST
76702: PPUSH
76703: CALL_OW 69
76707: PUSH
76708: FOR_IN
76709: IFFALSE 76759
// begin un := UnitShoot ( i ) ;
76711: LD_ADDR_VAR 0 5
76715: PUSH
76716: LD_VAR 0 4
76720: PPUSH
76721: CALL_OW 504
76725: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76726: LD_VAR 0 5
76730: PPUSH
76731: CALL_OW 255
76735: PUSH
76736: LD_VAR 0 1
76740: EQUAL
76741: IFFALSE 76757
// begin result := un ;
76743: LD_ADDR_VAR 0 3
76747: PUSH
76748: LD_VAR 0 5
76752: ST_TO_ADDR
// exit ;
76753: POP
76754: POP
76755: GO 76761
// end ; end ;
76757: GO 76708
76759: POP
76760: POP
// end ;
76761: LD_VAR 0 3
76765: RET
// export function GetCargoBay ( units ) ; begin
76766: LD_INT 0
76768: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76769: LD_ADDR_VAR 0 2
76773: PUSH
76774: LD_VAR 0 1
76778: PPUSH
76779: LD_INT 2
76781: PUSH
76782: LD_INT 34
76784: PUSH
76785: LD_INT 12
76787: PUSH
76788: EMPTY
76789: LIST
76790: LIST
76791: PUSH
76792: LD_INT 34
76794: PUSH
76795: LD_INT 51
76797: PUSH
76798: EMPTY
76799: LIST
76800: LIST
76801: PUSH
76802: LD_INT 34
76804: PUSH
76805: LD_INT 32
76807: PUSH
76808: EMPTY
76809: LIST
76810: LIST
76811: PUSH
76812: LD_INT 34
76814: PUSH
76815: LD_INT 89
76817: PUSH
76818: EMPTY
76819: LIST
76820: LIST
76821: PUSH
76822: EMPTY
76823: LIST
76824: LIST
76825: LIST
76826: LIST
76827: LIST
76828: PPUSH
76829: CALL_OW 72
76833: ST_TO_ADDR
// end ;
76834: LD_VAR 0 2
76838: RET
// export function Negate ( value ) ; begin
76839: LD_INT 0
76841: PPUSH
// result := not value ;
76842: LD_ADDR_VAR 0 2
76846: PUSH
76847: LD_VAR 0 1
76851: NOT
76852: ST_TO_ADDR
// end ;
76853: LD_VAR 0 2
76857: RET
// export function Inc ( value ) ; begin
76858: LD_INT 0
76860: PPUSH
// result := value + 1 ;
76861: LD_ADDR_VAR 0 2
76865: PUSH
76866: LD_VAR 0 1
76870: PUSH
76871: LD_INT 1
76873: PLUS
76874: ST_TO_ADDR
// end ;
76875: LD_VAR 0 2
76879: RET
// export function Dec ( value ) ; begin
76880: LD_INT 0
76882: PPUSH
// result := value - 1 ;
76883: LD_ADDR_VAR 0 2
76887: PUSH
76888: LD_VAR 0 1
76892: PUSH
76893: LD_INT 1
76895: MINUS
76896: ST_TO_ADDR
// end ;
76897: LD_VAR 0 2
76901: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76902: LD_INT 0
76904: PPUSH
76905: PPUSH
76906: PPUSH
76907: PPUSH
76908: PPUSH
76909: PPUSH
76910: PPUSH
76911: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76912: LD_VAR 0 1
76916: PPUSH
76917: LD_VAR 0 2
76921: PPUSH
76922: CALL_OW 488
76926: NOT
76927: IFTRUE 76946
76929: PUSH
76930: LD_VAR 0 3
76934: PPUSH
76935: LD_VAR 0 4
76939: PPUSH
76940: CALL_OW 488
76944: NOT
76945: OR
76946: IFFALSE 76959
// begin result := - 1 ;
76948: LD_ADDR_VAR 0 5
76952: PUSH
76953: LD_INT 1
76955: NEG
76956: ST_TO_ADDR
// exit ;
76957: GO 77194
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76959: LD_ADDR_VAR 0 12
76963: PUSH
76964: LD_VAR 0 1
76968: PPUSH
76969: LD_VAR 0 2
76973: PPUSH
76974: LD_VAR 0 3
76978: PPUSH
76979: LD_VAR 0 4
76983: PPUSH
76984: CALL 76030 0 4
76988: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76989: LD_ADDR_VAR 0 11
76993: PUSH
76994: LD_VAR 0 1
76998: PPUSH
76999: LD_VAR 0 2
77003: PPUSH
77004: LD_VAR 0 12
77008: PUSH
77009: LD_INT 1
77011: ARRAY
77012: PPUSH
77013: LD_VAR 0 12
77017: PUSH
77018: LD_INT 2
77020: ARRAY
77021: PPUSH
77022: CALL_OW 298
77026: ST_TO_ADDR
// distance := 9999 ;
77027: LD_ADDR_VAR 0 10
77031: PUSH
77032: LD_INT 9999
77034: ST_TO_ADDR
// for i := 0 to 5 do
77035: LD_ADDR_VAR 0 6
77039: PUSH
77040: DOUBLE
77041: LD_INT 0
77043: DEC
77044: ST_TO_ADDR
77045: LD_INT 5
77047: PUSH
77048: FOR_TO
77049: IFFALSE 77192
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77051: LD_ADDR_VAR 0 7
77055: PUSH
77056: LD_VAR 0 1
77060: PPUSH
77061: LD_VAR 0 6
77065: PPUSH
77066: LD_VAR 0 11
77070: PPUSH
77071: CALL_OW 272
77075: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77076: LD_ADDR_VAR 0 8
77080: PUSH
77081: LD_VAR 0 2
77085: PPUSH
77086: LD_VAR 0 6
77090: PPUSH
77091: LD_VAR 0 11
77095: PPUSH
77096: CALL_OW 273
77100: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77101: LD_VAR 0 7
77105: PPUSH
77106: LD_VAR 0 8
77110: PPUSH
77111: CALL_OW 488
77115: NOT
77116: IFFALSE 77120
// continue ;
77118: GO 77048
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77120: LD_ADDR_VAR 0 9
77124: PUSH
77125: LD_VAR 0 12
77129: PUSH
77130: LD_INT 1
77132: ARRAY
77133: PPUSH
77134: LD_VAR 0 12
77138: PUSH
77139: LD_INT 2
77141: ARRAY
77142: PPUSH
77143: LD_VAR 0 7
77147: PPUSH
77148: LD_VAR 0 8
77152: PPUSH
77153: CALL_OW 298
77157: ST_TO_ADDR
// if tmp < distance then
77158: LD_VAR 0 9
77162: PUSH
77163: LD_VAR 0 10
77167: LESS
77168: IFFALSE 77190
// begin result := i ;
77170: LD_ADDR_VAR 0 5
77174: PUSH
77175: LD_VAR 0 6
77179: ST_TO_ADDR
// distance := tmp ;
77180: LD_ADDR_VAR 0 10
77184: PUSH
77185: LD_VAR 0 9
77189: ST_TO_ADDR
// end ; end ;
77190: GO 77048
77192: POP
77193: POP
// end ;
77194: LD_VAR 0 5
77198: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77199: LD_INT 0
77201: PPUSH
77202: PPUSH
// if not driver or not IsInUnit ( driver ) then
77203: LD_VAR 0 1
77207: NOT
77208: IFTRUE 77222
77210: PUSH
77211: LD_VAR 0 1
77215: PPUSH
77216: CALL_OW 310
77220: NOT
77221: OR
77222: IFFALSE 77226
// exit ;
77224: GO 77316
// vehicle := IsInUnit ( driver ) ;
77226: LD_ADDR_VAR 0 3
77230: PUSH
77231: LD_VAR 0 1
77235: PPUSH
77236: CALL_OW 310
77240: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77241: LD_VAR 0 1
77245: PPUSH
77246: LD_STRING \
77248: PUSH
77249: LD_INT 0
77251: PUSH
77252: LD_INT 0
77254: PUSH
77255: LD_INT 0
77257: PUSH
77258: LD_INT 0
77260: PUSH
77261: LD_INT 0
77263: PUSH
77264: LD_INT 0
77266: PUSH
77267: EMPTY
77268: LIST
77269: LIST
77270: LIST
77271: LIST
77272: LIST
77273: LIST
77274: LIST
77275: PUSH
77276: LD_STRING E
77278: PUSH
77279: LD_INT 0
77281: PUSH
77282: LD_INT 0
77284: PUSH
77285: LD_VAR 0 3
77289: PUSH
77290: LD_INT 0
77292: PUSH
77293: LD_INT 0
77295: PUSH
77296: LD_INT 0
77298: PUSH
77299: EMPTY
77300: LIST
77301: LIST
77302: LIST
77303: LIST
77304: LIST
77305: LIST
77306: LIST
77307: PUSH
77308: EMPTY
77309: LIST
77310: LIST
77311: PPUSH
77312: CALL_OW 446
// end ;
77316: LD_VAR 0 2
77320: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77321: LD_INT 0
77323: PPUSH
77324: PPUSH
// if not driver or not IsInUnit ( driver ) then
77325: LD_VAR 0 1
77329: NOT
77330: IFTRUE 77344
77332: PUSH
77333: LD_VAR 0 1
77337: PPUSH
77338: CALL_OW 310
77342: NOT
77343: OR
77344: IFFALSE 77348
// exit ;
77346: GO 77438
// vehicle := IsInUnit ( driver ) ;
77348: LD_ADDR_VAR 0 3
77352: PUSH
77353: LD_VAR 0 1
77357: PPUSH
77358: CALL_OW 310
77362: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77363: LD_VAR 0 1
77367: PPUSH
77368: LD_STRING \
77370: PUSH
77371: LD_INT 0
77373: PUSH
77374: LD_INT 0
77376: PUSH
77377: LD_INT 0
77379: PUSH
77380: LD_INT 0
77382: PUSH
77383: LD_INT 0
77385: PUSH
77386: LD_INT 0
77388: PUSH
77389: EMPTY
77390: LIST
77391: LIST
77392: LIST
77393: LIST
77394: LIST
77395: LIST
77396: LIST
77397: PUSH
77398: LD_STRING E
77400: PUSH
77401: LD_INT 0
77403: PUSH
77404: LD_INT 0
77406: PUSH
77407: LD_VAR 0 3
77411: PUSH
77412: LD_INT 0
77414: PUSH
77415: LD_INT 0
77417: PUSH
77418: LD_INT 0
77420: PUSH
77421: EMPTY
77422: LIST
77423: LIST
77424: LIST
77425: LIST
77426: LIST
77427: LIST
77428: LIST
77429: PUSH
77430: EMPTY
77431: LIST
77432: LIST
77433: PPUSH
77434: CALL_OW 447
// end ;
77438: LD_VAR 0 2
77442: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77443: LD_INT 0
77445: PPUSH
77446: PPUSH
77447: PPUSH
// tmp := [ ] ;
77448: LD_ADDR_VAR 0 5
77452: PUSH
77453: EMPTY
77454: ST_TO_ADDR
// for i in units do
77455: LD_ADDR_VAR 0 4
77459: PUSH
77460: LD_VAR 0 1
77464: PUSH
77465: FOR_IN
77466: IFFALSE 77504
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77468: LD_ADDR_VAR 0 5
77472: PUSH
77473: LD_VAR 0 5
77477: PPUSH
77478: LD_VAR 0 5
77482: PUSH
77483: LD_INT 1
77485: PLUS
77486: PPUSH
77487: LD_VAR 0 4
77491: PPUSH
77492: CALL_OW 256
77496: PPUSH
77497: CALL_OW 2
77501: ST_TO_ADDR
77502: GO 77465
77504: POP
77505: POP
// if not tmp then
77506: LD_VAR 0 5
77510: NOT
77511: IFFALSE 77515
// exit ;
77513: GO 77563
// if asc then
77515: LD_VAR 0 2
77519: IFFALSE 77543
// result := SortListByListAsc ( units , tmp ) else
77521: LD_ADDR_VAR 0 3
77525: PUSH
77526: LD_VAR 0 1
77530: PPUSH
77531: LD_VAR 0 5
77535: PPUSH
77536: CALL_OW 76
77540: ST_TO_ADDR
77541: GO 77563
// result := SortListByListDesc ( units , tmp ) ;
77543: LD_ADDR_VAR 0 3
77547: PUSH
77548: LD_VAR 0 1
77552: PPUSH
77553: LD_VAR 0 5
77557: PPUSH
77558: CALL_OW 77
77562: ST_TO_ADDR
// end ;
77563: LD_VAR 0 3
77567: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77568: LD_INT 0
77570: PPUSH
77571: PPUSH
// task := GetTaskList ( mech ) ;
77572: LD_ADDR_VAR 0 4
77576: PUSH
77577: LD_VAR 0 1
77581: PPUSH
77582: CALL_OW 437
77586: ST_TO_ADDR
// if not task then
77587: LD_VAR 0 4
77591: NOT
77592: IFFALSE 77596
// exit ;
77594: GO 77640
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77596: LD_ADDR_VAR 0 3
77600: PUSH
77601: LD_VAR 0 4
77605: PUSH
77606: LD_INT 1
77608: ARRAY
77609: PUSH
77610: LD_INT 1
77612: ARRAY
77613: PUSH
77614: LD_STRING r
77616: EQUAL
77617: IFFALSE 77639
77619: PUSH
77620: LD_VAR 0 4
77624: PUSH
77625: LD_INT 1
77627: ARRAY
77628: PUSH
77629: LD_INT 4
77631: ARRAY
77632: PUSH
77633: LD_VAR 0 2
77637: EQUAL
77638: AND
77639: ST_TO_ADDR
// end ;
77640: LD_VAR 0 3
77644: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77645: LD_INT 0
77647: PPUSH
// SetDir ( unit , d ) ;
77648: LD_VAR 0 1
77652: PPUSH
77653: LD_VAR 0 4
77657: PPUSH
77658: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
77662: LD_ADDR_VAR 0 6
77666: PUSH
77667: LD_VAR 0 1
77671: PPUSH
77672: LD_VAR 0 2
77676: PPUSH
77677: LD_VAR 0 3
77681: PPUSH
77682: LD_VAR 0 5
77686: PPUSH
77687: CALL_OW 48
77691: ST_TO_ADDR
// end ;
77692: LD_VAR 0 6
77696: RET
// export function ToNaturalNumber ( number ) ; begin
77697: LD_INT 0
77699: PPUSH
// result := number div 1 ;
77700: LD_ADDR_VAR 0 2
77704: PUSH
77705: LD_VAR 0 1
77709: PUSH
77710: LD_INT 1
77712: DIV
77713: ST_TO_ADDR
// if number < 0 then
77714: LD_VAR 0 1
77718: PUSH
77719: LD_INT 0
77721: LESS
77722: IFFALSE 77732
// result := 0 ;
77724: LD_ADDR_VAR 0 2
77728: PUSH
77729: LD_INT 0
77731: ST_TO_ADDR
// end ;
77732: LD_VAR 0 2
77736: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
77737: LD_INT 0
77739: PPUSH
77740: PPUSH
77741: PPUSH
// if not buildings then
77742: LD_VAR 0 1
77746: NOT
77747: IFFALSE 77751
// exit ;
77749: GO 77866
// tmp := [ ] ;
77751: LD_ADDR_VAR 0 5
77755: PUSH
77756: EMPTY
77757: ST_TO_ADDR
// for b in buildings do
77758: LD_ADDR_VAR 0 4
77762: PUSH
77763: LD_VAR 0 1
77767: PUSH
77768: FOR_IN
77769: IFFALSE 77807
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
77771: LD_ADDR_VAR 0 5
77775: PUSH
77776: LD_VAR 0 5
77780: PPUSH
77781: LD_VAR 0 5
77785: PUSH
77786: LD_INT 1
77788: PLUS
77789: PPUSH
77790: LD_VAR 0 4
77794: PPUSH
77795: CALL_OW 266
77799: PPUSH
77800: CALL_OW 1
77804: ST_TO_ADDR
77805: GO 77768
77807: POP
77808: POP
// if not tmp then
77809: LD_VAR 0 5
77813: NOT
77814: IFFALSE 77818
// exit ;
77816: GO 77866
// if asc then
77818: LD_VAR 0 2
77822: IFFALSE 77846
// result := SortListByListAsc ( buildings , tmp ) else
77824: LD_ADDR_VAR 0 3
77828: PUSH
77829: LD_VAR 0 1
77833: PPUSH
77834: LD_VAR 0 5
77838: PPUSH
77839: CALL_OW 76
77843: ST_TO_ADDR
77844: GO 77866
// result := SortListByListDesc ( buildings , tmp ) ;
77846: LD_ADDR_VAR 0 3
77850: PUSH
77851: LD_VAR 0 1
77855: PPUSH
77856: LD_VAR 0 5
77860: PPUSH
77861: CALL_OW 77
77865: ST_TO_ADDR
// end ;
77866: LD_VAR 0 3
77870: RET
// export function SortByClass ( units , class ) ; var un ; begin
77871: LD_INT 0
77873: PPUSH
77874: PPUSH
// if not units or not class then
77875: LD_VAR 0 1
77879: NOT
77880: IFTRUE 77889
77882: PUSH
77883: LD_VAR 0 2
77887: NOT
77888: OR
77889: IFFALSE 77893
// exit ;
77891: GO 77988
// result := [ ] ;
77893: LD_ADDR_VAR 0 3
77897: PUSH
77898: EMPTY
77899: ST_TO_ADDR
// for un in units do
77900: LD_ADDR_VAR 0 4
77904: PUSH
77905: LD_VAR 0 1
77909: PUSH
77910: FOR_IN
77911: IFFALSE 77986
// if GetClass ( un ) = class then
77913: LD_VAR 0 4
77917: PPUSH
77918: CALL_OW 257
77922: PUSH
77923: LD_VAR 0 2
77927: EQUAL
77928: IFFALSE 77955
// result := Insert ( result , 1 , un ) else
77930: LD_ADDR_VAR 0 3
77934: PUSH
77935: LD_VAR 0 3
77939: PPUSH
77940: LD_INT 1
77942: PPUSH
77943: LD_VAR 0 4
77947: PPUSH
77948: CALL_OW 2
77952: ST_TO_ADDR
77953: GO 77984
// result := Replace ( result , result + 1 , un ) ;
77955: LD_ADDR_VAR 0 3
77959: PUSH
77960: LD_VAR 0 3
77964: PPUSH
77965: LD_VAR 0 3
77969: PUSH
77970: LD_INT 1
77972: PLUS
77973: PPUSH
77974: LD_VAR 0 4
77978: PPUSH
77979: CALL_OW 1
77983: ST_TO_ADDR
77984: GO 77910
77986: POP
77987: POP
// end ;
77988: LD_VAR 0 3
77992: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77993: LD_INT 0
77995: PPUSH
77996: PPUSH
77997: PPUSH
77998: PPUSH
77999: PPUSH
78000: PPUSH
78001: PPUSH
// result := [ ] ;
78002: LD_ADDR_VAR 0 4
78006: PUSH
78007: EMPTY
78008: ST_TO_ADDR
// if x - r < 0 then
78009: LD_VAR 0 1
78013: PUSH
78014: LD_VAR 0 3
78018: MINUS
78019: PUSH
78020: LD_INT 0
78022: LESS
78023: IFFALSE 78035
// min_x := 0 else
78025: LD_ADDR_VAR 0 8
78029: PUSH
78030: LD_INT 0
78032: ST_TO_ADDR
78033: GO 78051
// min_x := x - r ;
78035: LD_ADDR_VAR 0 8
78039: PUSH
78040: LD_VAR 0 1
78044: PUSH
78045: LD_VAR 0 3
78049: MINUS
78050: ST_TO_ADDR
// if y - r < 0 then
78051: LD_VAR 0 2
78055: PUSH
78056: LD_VAR 0 3
78060: MINUS
78061: PUSH
78062: LD_INT 0
78064: LESS
78065: IFFALSE 78077
// min_y := 0 else
78067: LD_ADDR_VAR 0 7
78071: PUSH
78072: LD_INT 0
78074: ST_TO_ADDR
78075: GO 78093
// min_y := y - r ;
78077: LD_ADDR_VAR 0 7
78081: PUSH
78082: LD_VAR 0 2
78086: PUSH
78087: LD_VAR 0 3
78091: MINUS
78092: ST_TO_ADDR
// max_x := x + r ;
78093: LD_ADDR_VAR 0 9
78097: PUSH
78098: LD_VAR 0 1
78102: PUSH
78103: LD_VAR 0 3
78107: PLUS
78108: ST_TO_ADDR
// max_y := y + r ;
78109: LD_ADDR_VAR 0 10
78113: PUSH
78114: LD_VAR 0 2
78118: PUSH
78119: LD_VAR 0 3
78123: PLUS
78124: ST_TO_ADDR
// for _x = min_x to max_x do
78125: LD_ADDR_VAR 0 5
78129: PUSH
78130: DOUBLE
78131: LD_VAR 0 8
78135: DEC
78136: ST_TO_ADDR
78137: LD_VAR 0 9
78141: PUSH
78142: FOR_TO
78143: IFFALSE 78244
// for _y = min_y to max_y do
78145: LD_ADDR_VAR 0 6
78149: PUSH
78150: DOUBLE
78151: LD_VAR 0 7
78155: DEC
78156: ST_TO_ADDR
78157: LD_VAR 0 10
78161: PUSH
78162: FOR_TO
78163: IFFALSE 78240
// begin if not ValidHex ( _x , _y ) then
78165: LD_VAR 0 5
78169: PPUSH
78170: LD_VAR 0 6
78174: PPUSH
78175: CALL_OW 488
78179: NOT
78180: IFFALSE 78184
// continue ;
78182: GO 78162
// if GetResourceTypeXY ( _x , _y ) then
78184: LD_VAR 0 5
78188: PPUSH
78189: LD_VAR 0 6
78193: PPUSH
78194: CALL_OW 283
78198: IFFALSE 78238
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78200: LD_ADDR_VAR 0 4
78204: PUSH
78205: LD_VAR 0 4
78209: PPUSH
78210: LD_VAR 0 4
78214: PUSH
78215: LD_INT 1
78217: PLUS
78218: PPUSH
78219: LD_VAR 0 5
78223: PUSH
78224: LD_VAR 0 6
78228: PUSH
78229: EMPTY
78230: LIST
78231: LIST
78232: PPUSH
78233: CALL_OW 1
78237: ST_TO_ADDR
// end ;
78238: GO 78162
78240: POP
78241: POP
78242: GO 78142
78244: POP
78245: POP
// end ;
78246: LD_VAR 0 4
78250: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78251: LD_INT 0
78253: PPUSH
78254: PPUSH
78255: PPUSH
78256: PPUSH
78257: PPUSH
78258: PPUSH
78259: PPUSH
78260: PPUSH
// if not units then
78261: LD_VAR 0 1
78265: NOT
78266: IFFALSE 78270
// exit ;
78268: GO 78802
// result := UnitFilter ( units , [ f_ok ] ) ;
78270: LD_ADDR_VAR 0 3
78274: PUSH
78275: LD_VAR 0 1
78279: PPUSH
78280: LD_INT 50
78282: PUSH
78283: EMPTY
78284: LIST
78285: PPUSH
78286: CALL_OW 72
78290: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78291: LD_ADDR_VAR 0 8
78295: PUSH
78296: LD_VAR 0 1
78300: PUSH
78301: LD_INT 1
78303: ARRAY
78304: PPUSH
78305: CALL_OW 255
78309: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78310: LD_ADDR_VAR 0 10
78314: PUSH
78315: LD_INT 29
78317: PUSH
78318: LD_INT 91
78320: PUSH
78321: LD_INT 49
78323: PUSH
78324: EMPTY
78325: LIST
78326: LIST
78327: LIST
78328: ST_TO_ADDR
// if not result then
78329: LD_VAR 0 3
78333: NOT
78334: IFFALSE 78338
// exit ;
78336: GO 78802
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78338: LD_ADDR_VAR 0 5
78342: PUSH
78343: LD_INT 81
78345: PUSH
78346: LD_VAR 0 8
78350: PUSH
78351: EMPTY
78352: LIST
78353: LIST
78354: PPUSH
78355: CALL_OW 69
78359: ST_TO_ADDR
// for i in result do
78360: LD_ADDR_VAR 0 4
78364: PUSH
78365: LD_VAR 0 3
78369: PUSH
78370: FOR_IN
78371: IFFALSE 78800
// begin tag := GetTag ( i ) + 1 ;
78373: LD_ADDR_VAR 0 9
78377: PUSH
78378: LD_VAR 0 4
78382: PPUSH
78383: CALL_OW 110
78387: PUSH
78388: LD_INT 1
78390: PLUS
78391: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
78392: LD_ADDR_VAR 0 7
78396: PUSH
78397: LD_VAR 0 4
78401: PPUSH
78402: CALL_OW 250
78406: PPUSH
78407: LD_VAR 0 4
78411: PPUSH
78412: CALL_OW 251
78416: PPUSH
78417: LD_INT 4
78419: PPUSH
78420: CALL 77993 0 3
78424: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
78425: LD_VAR 0 4
78429: PPUSH
78430: CALL_OW 247
78434: PUSH
78435: LD_INT 2
78437: EQUAL
78438: IFFALSE 78450
78440: PUSH
78441: LD_VAR 0 7
78445: PUSH
78446: LD_INT 2
78448: GREATER
78449: AND
78450: IFFALSE 78470
78452: PUSH
78453: LD_VAR 0 4
78457: PPUSH
78458: CALL_OW 264
78462: PUSH
78463: LD_VAR 0 10
78467: IN
78468: NOT
78469: AND
78470: IFFALSE 78509
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78472: LD_VAR 0 4
78476: PPUSH
78477: LD_VAR 0 7
78481: PUSH
78482: LD_INT 1
78484: ARRAY
78485: PUSH
78486: LD_INT 1
78488: ARRAY
78489: PPUSH
78490: LD_VAR 0 7
78494: PUSH
78495: LD_INT 1
78497: ARRAY
78498: PUSH
78499: LD_INT 2
78501: ARRAY
78502: PPUSH
78503: CALL_OW 116
78507: GO 78798
// if path > tag then
78509: LD_VAR 0 2
78513: PUSH
78514: LD_VAR 0 9
78518: GREATER
78519: IFFALSE 78727
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
78521: LD_ADDR_VAR 0 6
78525: PUSH
78526: LD_VAR 0 5
78530: PPUSH
78531: LD_INT 91
78533: PUSH
78534: LD_VAR 0 4
78538: PUSH
78539: LD_INT 8
78541: PUSH
78542: EMPTY
78543: LIST
78544: LIST
78545: LIST
78546: PPUSH
78547: CALL_OW 72
78551: ST_TO_ADDR
// if nearEnemy then
78552: LD_VAR 0 6
78556: IFFALSE 78625
// begin if GetWeapon ( i ) = ru_time_lapser then
78558: LD_VAR 0 4
78562: PPUSH
78563: CALL_OW 264
78567: PUSH
78568: LD_INT 49
78570: EQUAL
78571: IFFALSE 78599
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78573: LD_VAR 0 4
78577: PPUSH
78578: LD_VAR 0 6
78582: PPUSH
78583: LD_VAR 0 4
78587: PPUSH
78588: CALL_OW 74
78592: PPUSH
78593: CALL_OW 112
78597: GO 78623
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
78599: LD_VAR 0 4
78603: PPUSH
78604: LD_VAR 0 6
78608: PPUSH
78609: LD_VAR 0 4
78613: PPUSH
78614: CALL_OW 74
78618: PPUSH
78619: CALL 79883 0 2
// end else
78623: GO 78725
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78625: LD_VAR 0 4
78629: PPUSH
78630: LD_VAR 0 2
78634: PUSH
78635: LD_VAR 0 9
78639: ARRAY
78640: PUSH
78641: LD_INT 1
78643: ARRAY
78644: PPUSH
78645: LD_VAR 0 2
78649: PUSH
78650: LD_VAR 0 9
78654: ARRAY
78655: PUSH
78656: LD_INT 2
78658: ARRAY
78659: PPUSH
78660: CALL_OW 297
78664: PUSH
78665: LD_INT 6
78667: GREATER
78668: IFFALSE 78711
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78670: LD_VAR 0 4
78674: PPUSH
78675: LD_VAR 0 2
78679: PUSH
78680: LD_VAR 0 9
78684: ARRAY
78685: PUSH
78686: LD_INT 1
78688: ARRAY
78689: PPUSH
78690: LD_VAR 0 2
78694: PUSH
78695: LD_VAR 0 9
78699: ARRAY
78700: PUSH
78701: LD_INT 2
78703: ARRAY
78704: PPUSH
78705: CALL_OW 114
78709: GO 78725
// SetTag ( i , tag ) ;
78711: LD_VAR 0 4
78715: PPUSH
78716: LD_VAR 0 9
78720: PPUSH
78721: CALL_OW 109
// end else
78725: GO 78798
// if enemy then
78727: LD_VAR 0 5
78731: IFFALSE 78798
// begin if GetWeapon ( i ) = ru_time_lapser then
78733: LD_VAR 0 4
78737: PPUSH
78738: CALL_OW 264
78742: PUSH
78743: LD_INT 49
78745: EQUAL
78746: IFFALSE 78774
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
78748: LD_VAR 0 4
78752: PPUSH
78753: LD_VAR 0 5
78757: PPUSH
78758: LD_VAR 0 4
78762: PPUSH
78763: CALL_OW 74
78767: PPUSH
78768: CALL_OW 112
78772: GO 78798
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78774: LD_VAR 0 4
78778: PPUSH
78779: LD_VAR 0 5
78783: PPUSH
78784: LD_VAR 0 4
78788: PPUSH
78789: CALL_OW 74
78793: PPUSH
78794: CALL 79883 0 2
// end ; end ;
78798: GO 78370
78800: POP
78801: POP
// end ;
78802: LD_VAR 0 3
78806: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78807: LD_INT 0
78809: PPUSH
78810: PPUSH
78811: PPUSH
// if not unit or IsInUnit ( unit ) then
78812: LD_VAR 0 1
78816: NOT
78817: IFTRUE 78830
78819: PUSH
78820: LD_VAR 0 1
78824: PPUSH
78825: CALL_OW 310
78829: OR
78830: IFFALSE 78834
// exit ;
78832: GO 78925
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78834: LD_ADDR_VAR 0 4
78838: PUSH
78839: LD_VAR 0 1
78843: PPUSH
78844: CALL_OW 250
78848: PPUSH
78849: LD_VAR 0 2
78853: PPUSH
78854: LD_INT 1
78856: PPUSH
78857: CALL_OW 272
78861: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78862: LD_ADDR_VAR 0 5
78866: PUSH
78867: LD_VAR 0 1
78871: PPUSH
78872: CALL_OW 251
78876: PPUSH
78877: LD_VAR 0 2
78881: PPUSH
78882: LD_INT 1
78884: PPUSH
78885: CALL_OW 273
78889: ST_TO_ADDR
// if ValidHex ( x , y ) then
78890: LD_VAR 0 4
78894: PPUSH
78895: LD_VAR 0 5
78899: PPUSH
78900: CALL_OW 488
78904: IFFALSE 78925
// ComTurnXY ( unit , x , y ) ;
78906: LD_VAR 0 1
78910: PPUSH
78911: LD_VAR 0 4
78915: PPUSH
78916: LD_VAR 0 5
78920: PPUSH
78921: CALL_OW 118
// end ;
78925: LD_VAR 0 3
78929: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78930: LD_INT 0
78932: PPUSH
78933: PPUSH
// result := false ;
78934: LD_ADDR_VAR 0 3
78938: PUSH
78939: LD_INT 0
78941: ST_TO_ADDR
// if not units then
78942: LD_VAR 0 2
78946: NOT
78947: IFFALSE 78951
// exit ;
78949: GO 78996
// for i in units do
78951: LD_ADDR_VAR 0 4
78955: PUSH
78956: LD_VAR 0 2
78960: PUSH
78961: FOR_IN
78962: IFFALSE 78994
// if See ( side , i ) then
78964: LD_VAR 0 1
78968: PPUSH
78969: LD_VAR 0 4
78973: PPUSH
78974: CALL_OW 292
78978: IFFALSE 78992
// begin result := true ;
78980: LD_ADDR_VAR 0 3
78984: PUSH
78985: LD_INT 1
78987: ST_TO_ADDR
// exit ;
78988: POP
78989: POP
78990: GO 78996
// end ;
78992: GO 78961
78994: POP
78995: POP
// end ;
78996: LD_VAR 0 3
79000: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79001: LD_INT 0
79003: PPUSH
79004: PPUSH
79005: PPUSH
79006: PPUSH
// if not unit or not points then
79007: LD_VAR 0 1
79011: NOT
79012: IFTRUE 79021
79014: PUSH
79015: LD_VAR 0 2
79019: NOT
79020: OR
79021: IFFALSE 79025
// exit ;
79023: GO 79115
// dist := 99999 ;
79025: LD_ADDR_VAR 0 5
79029: PUSH
79030: LD_INT 99999
79032: ST_TO_ADDR
// for i in points do
79033: LD_ADDR_VAR 0 4
79037: PUSH
79038: LD_VAR 0 2
79042: PUSH
79043: FOR_IN
79044: IFFALSE 79113
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79046: LD_ADDR_VAR 0 6
79050: PUSH
79051: LD_VAR 0 1
79055: PPUSH
79056: LD_VAR 0 4
79060: PUSH
79061: LD_INT 1
79063: ARRAY
79064: PPUSH
79065: LD_VAR 0 4
79069: PUSH
79070: LD_INT 2
79072: ARRAY
79073: PPUSH
79074: CALL_OW 297
79078: ST_TO_ADDR
// if tmpDist < dist then
79079: LD_VAR 0 6
79083: PUSH
79084: LD_VAR 0 5
79088: LESS
79089: IFFALSE 79111
// begin result := i ;
79091: LD_ADDR_VAR 0 3
79095: PUSH
79096: LD_VAR 0 4
79100: ST_TO_ADDR
// dist := tmpDist ;
79101: LD_ADDR_VAR 0 5
79105: PUSH
79106: LD_VAR 0 6
79110: ST_TO_ADDR
// end ; end ;
79111: GO 79043
79113: POP
79114: POP
// end ;
79115: LD_VAR 0 3
79119: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79120: LD_INT 0
79122: PPUSH
// uc_side := side ;
79123: LD_ADDR_OWVAR 20
79127: PUSH
79128: LD_VAR 0 1
79132: ST_TO_ADDR
// uc_nation := 3 ;
79133: LD_ADDR_OWVAR 21
79137: PUSH
79138: LD_INT 3
79140: ST_TO_ADDR
// vc_chassis := 25 ;
79141: LD_ADDR_OWVAR 37
79145: PUSH
79146: LD_INT 25
79148: ST_TO_ADDR
// vc_engine := engine_siberite ;
79149: LD_ADDR_OWVAR 39
79153: PUSH
79154: LD_INT 3
79156: ST_TO_ADDR
// vc_control := control_computer ;
79157: LD_ADDR_OWVAR 38
79161: PUSH
79162: LD_INT 3
79164: ST_TO_ADDR
// vc_weapon := 59 ;
79165: LD_ADDR_OWVAR 40
79169: PUSH
79170: LD_INT 59
79172: ST_TO_ADDR
// result := CreateVehicle ;
79173: LD_ADDR_VAR 0 5
79177: PUSH
79178: CALL_OW 45
79182: ST_TO_ADDR
// SetDir ( result , d ) ;
79183: LD_VAR 0 5
79187: PPUSH
79188: LD_VAR 0 4
79192: PPUSH
79193: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79197: LD_VAR 0 5
79201: PPUSH
79202: LD_VAR 0 2
79206: PPUSH
79207: LD_VAR 0 3
79211: PPUSH
79212: LD_INT 0
79214: PPUSH
79215: CALL_OW 48
// end ;
79219: LD_VAR 0 5
79223: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79224: LD_INT 0
79226: PPUSH
79227: PPUSH
79228: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79229: LD_ADDR_VAR 0 2
79233: PUSH
79234: LD_INT 0
79236: PUSH
79237: LD_INT 0
79239: PUSH
79240: LD_INT 0
79242: PUSH
79243: LD_INT 0
79245: PUSH
79246: EMPTY
79247: LIST
79248: LIST
79249: LIST
79250: LIST
79251: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79252: LD_VAR 0 1
79256: NOT
79257: IFTRUE 79290
79259: PUSH
79260: LD_VAR 0 1
79264: PPUSH
79265: CALL_OW 264
79269: PUSH
79270: LD_INT 12
79272: PUSH
79273: LD_INT 51
79275: PUSH
79276: LD_INT 32
79278: PUSH
79279: LD_INT 89
79281: PUSH
79282: EMPTY
79283: LIST
79284: LIST
79285: LIST
79286: LIST
79287: IN
79288: NOT
79289: OR
79290: IFFALSE 79294
// exit ;
79292: GO 79392
// for i := 1 to 3 do
79294: LD_ADDR_VAR 0 3
79298: PUSH
79299: DOUBLE
79300: LD_INT 1
79302: DEC
79303: ST_TO_ADDR
79304: LD_INT 3
79306: PUSH
79307: FOR_TO
79308: IFFALSE 79390
// begin tmp := GetCargo ( cargo , i ) ;
79310: LD_ADDR_VAR 0 4
79314: PUSH
79315: LD_VAR 0 1
79319: PPUSH
79320: LD_VAR 0 3
79324: PPUSH
79325: CALL_OW 289
79329: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79330: LD_ADDR_VAR 0 2
79334: PUSH
79335: LD_VAR 0 2
79339: PPUSH
79340: LD_VAR 0 3
79344: PPUSH
79345: LD_VAR 0 4
79349: PPUSH
79350: CALL_OW 1
79354: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79355: LD_ADDR_VAR 0 2
79359: PUSH
79360: LD_VAR 0 2
79364: PPUSH
79365: LD_INT 4
79367: PPUSH
79368: LD_VAR 0 2
79372: PUSH
79373: LD_INT 4
79375: ARRAY
79376: PUSH
79377: LD_VAR 0 4
79381: PLUS
79382: PPUSH
79383: CALL_OW 1
79387: ST_TO_ADDR
// end ;
79388: GO 79307
79390: POP
79391: POP
// end ;
79392: LD_VAR 0 2
79396: RET
// export function Length ( array ) ; begin
79397: LD_INT 0
79399: PPUSH
// result := array + 0 ;
79400: LD_ADDR_VAR 0 2
79404: PUSH
79405: LD_VAR 0 1
79409: PUSH
79410: LD_INT 0
79412: PLUS
79413: ST_TO_ADDR
// end ;
79414: LD_VAR 0 2
79418: RET
// export function PrepareArray ( array ) ; begin
79419: LD_INT 0
79421: PPUSH
// result := array diff 0 ;
79422: LD_ADDR_VAR 0 2
79426: PUSH
79427: LD_VAR 0 1
79431: PUSH
79432: LD_INT 0
79434: DIFF
79435: ST_TO_ADDR
// if not result [ 1 ] then
79436: LD_VAR 0 2
79440: PUSH
79441: LD_INT 1
79443: ARRAY
79444: NOT
79445: IFFALSE 79465
// result := Delete ( result , 1 ) ;
79447: LD_ADDR_VAR 0 2
79451: PUSH
79452: LD_VAR 0 2
79456: PPUSH
79457: LD_INT 1
79459: PPUSH
79460: CALL_OW 3
79464: ST_TO_ADDR
// end ;
79465: LD_VAR 0 2
79469: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
79470: LD_INT 0
79472: PPUSH
79473: PPUSH
79474: PPUSH
79475: PPUSH
// sibRocketRange := 25 ;
79476: LD_ADDR_VAR 0 6
79480: PUSH
79481: LD_INT 25
79483: ST_TO_ADDR
// result := false ;
79484: LD_ADDR_VAR 0 4
79488: PUSH
79489: LD_INT 0
79491: ST_TO_ADDR
// for i := 0 to 5 do
79492: LD_ADDR_VAR 0 5
79496: PUSH
79497: DOUBLE
79498: LD_INT 0
79500: DEC
79501: ST_TO_ADDR
79502: LD_INT 5
79504: PUSH
79505: FOR_TO
79506: IFFALSE 79573
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
79508: LD_VAR 0 1
79512: PPUSH
79513: LD_VAR 0 5
79517: PPUSH
79518: LD_VAR 0 6
79522: PPUSH
79523: CALL_OW 272
79527: PPUSH
79528: LD_VAR 0 2
79532: PPUSH
79533: LD_VAR 0 5
79537: PPUSH
79538: LD_VAR 0 6
79542: PPUSH
79543: CALL_OW 273
79547: PPUSH
79548: LD_VAR 0 3
79552: PPUSH
79553: CALL_OW 309
79557: IFFALSE 79571
// begin result := true ;
79559: LD_ADDR_VAR 0 4
79563: PUSH
79564: LD_INT 1
79566: ST_TO_ADDR
// exit ;
79567: POP
79568: POP
79569: GO 79575
// end ;
79571: GO 79505
79573: POP
79574: POP
// end ;
79575: LD_VAR 0 4
79579: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
79580: LD_INT 0
79582: PPUSH
79583: PPUSH
79584: PPUSH
// if btype = b_depot then
79585: LD_VAR 0 2
79589: PUSH
79590: LD_INT 0
79592: EQUAL
79593: IFFALSE 79605
// begin result := true ;
79595: LD_ADDR_VAR 0 3
79599: PUSH
79600: LD_INT 1
79602: ST_TO_ADDR
// exit ;
79603: GO 79725
// end ; pom := GetBase ( depot ) ;
79605: LD_ADDR_VAR 0 4
79609: PUSH
79610: LD_VAR 0 1
79614: PPUSH
79615: CALL_OW 274
79619: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
79620: LD_ADDR_VAR 0 5
79624: PUSH
79625: LD_VAR 0 2
79629: PPUSH
79630: LD_VAR 0 1
79634: PPUSH
79635: CALL_OW 248
79639: PPUSH
79640: CALL_OW 450
79644: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
79645: LD_ADDR_VAR 0 3
79649: PUSH
79650: LD_VAR 0 4
79654: PPUSH
79655: LD_INT 1
79657: PPUSH
79658: CALL_OW 275
79662: PUSH
79663: LD_VAR 0 5
79667: PUSH
79668: LD_INT 1
79670: ARRAY
79671: GREATEREQUAL
79672: IFFALSE 79698
79674: PUSH
79675: LD_VAR 0 4
79679: PPUSH
79680: LD_INT 2
79682: PPUSH
79683: CALL_OW 275
79687: PUSH
79688: LD_VAR 0 5
79692: PUSH
79693: LD_INT 2
79695: ARRAY
79696: GREATEREQUAL
79697: AND
79698: IFFALSE 79724
79700: PUSH
79701: LD_VAR 0 4
79705: PPUSH
79706: LD_INT 3
79708: PPUSH
79709: CALL_OW 275
79713: PUSH
79714: LD_VAR 0 5
79718: PUSH
79719: LD_INT 3
79721: ARRAY
79722: GREATEREQUAL
79723: AND
79724: ST_TO_ADDR
// end ;
79725: LD_VAR 0 3
79729: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
79730: LD_INT 0
79732: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
79733: LD_VAR 0 1
79737: PPUSH
79738: LD_VAR 0 2
79742: PPUSH
79743: LD_INT 0
79745: PPUSH
79746: LD_INT 0
79748: PPUSH
79749: LD_INT 1
79751: PPUSH
79752: LD_INT 0
79754: PPUSH
79755: CALL_OW 587
// end ;
79759: LD_VAR 0 3
79763: RET
// export function CenterOnNow ( unit ) ; begin
79764: LD_INT 0
79766: PPUSH
// result := IsInUnit ( unit ) ;
79767: LD_ADDR_VAR 0 2
79771: PUSH
79772: LD_VAR 0 1
79776: PPUSH
79777: CALL_OW 310
79781: ST_TO_ADDR
// if not result then
79782: LD_VAR 0 2
79786: NOT
79787: IFFALSE 79799
// result := unit ;
79789: LD_ADDR_VAR 0 2
79793: PUSH
79794: LD_VAR 0 1
79798: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
79799: LD_VAR 0 1
79803: PPUSH
79804: CALL_OW 87
// end ;
79808: LD_VAR 0 2
79812: RET
// export function ComMoveHex ( unit , hex ) ; begin
79813: LD_INT 0
79815: PPUSH
// if not hex then
79816: LD_VAR 0 2
79820: NOT
79821: IFFALSE 79825
// exit ;
79823: GO 79878
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
79825: LD_VAR 0 2
79829: PUSH
79830: LD_INT 1
79832: ARRAY
79833: PPUSH
79834: LD_VAR 0 2
79838: PUSH
79839: LD_INT 2
79841: ARRAY
79842: PPUSH
79843: CALL_OW 428
79847: IFFALSE 79851
// exit ;
79849: GO 79878
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
79851: LD_VAR 0 1
79855: PPUSH
79856: LD_VAR 0 2
79860: PUSH
79861: LD_INT 1
79863: ARRAY
79864: PPUSH
79865: LD_VAR 0 2
79869: PUSH
79870: LD_INT 2
79872: ARRAY
79873: PPUSH
79874: CALL_OW 111
// end ;
79878: LD_VAR 0 3
79882: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
79883: LD_INT 0
79885: PPUSH
79886: PPUSH
79887: PPUSH
// if not unit or not enemy then
79888: LD_VAR 0 1
79892: NOT
79893: IFTRUE 79902
79895: PUSH
79896: LD_VAR 0 2
79900: NOT
79901: OR
79902: IFFALSE 79906
// exit ;
79904: GO 80032
// x := GetX ( enemy ) ;
79906: LD_ADDR_VAR 0 4
79910: PUSH
79911: LD_VAR 0 2
79915: PPUSH
79916: CALL_OW 250
79920: ST_TO_ADDR
// y := GetY ( enemy ) ;
79921: LD_ADDR_VAR 0 5
79925: PUSH
79926: LD_VAR 0 2
79930: PPUSH
79931: CALL_OW 251
79935: ST_TO_ADDR
// if ValidHex ( x , y ) then
79936: LD_VAR 0 4
79940: PPUSH
79941: LD_VAR 0 5
79945: PPUSH
79946: CALL_OW 488
79950: IFFALSE 80032
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
79952: LD_VAR 0 2
79956: PPUSH
79957: CALL_OW 247
79961: PUSH
79962: LD_INT 3
79964: PUSH
79965: LD_INT 2
79967: PUSH
79968: EMPTY
79969: LIST
79970: LIST
79971: IN
79972: IFTRUE 79995
79974: PUSH
79975: LD_VAR 0 1
79979: PPUSH
79980: CALL_OW 255
79984: PPUSH
79985: LD_VAR 0 2
79989: PPUSH
79990: CALL_OW 292
79994: OR
79995: IFFALSE 80013
// ComAttackUnit ( unit , enemy ) else
79997: LD_VAR 0 1
80001: PPUSH
80002: LD_VAR 0 2
80006: PPUSH
80007: CALL_OW 115
80011: GO 80032
// ComAgressiveMove ( unit , x , y ) ;
80013: LD_VAR 0 1
80017: PPUSH
80018: LD_VAR 0 4
80022: PPUSH
80023: LD_VAR 0 5
80027: PPUSH
80028: CALL_OW 114
// end ;
80032: LD_VAR 0 3
80036: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
80037: LD_INT 0
80039: PPUSH
80040: PPUSH
80041: PPUSH
// list := AreaToList ( area , 0 ) ;
80042: LD_ADDR_VAR 0 5
80046: PUSH
80047: LD_VAR 0 1
80051: PPUSH
80052: LD_INT 0
80054: PPUSH
80055: CALL_OW 517
80059: ST_TO_ADDR
// if not list then
80060: LD_VAR 0 5
80064: NOT
80065: IFFALSE 80069
// exit ;
80067: GO 80199
// if all then
80069: LD_VAR 0 2
80073: IFFALSE 80161
// begin for i := 1 to list [ 1 ] do
80075: LD_ADDR_VAR 0 4
80079: PUSH
80080: DOUBLE
80081: LD_INT 1
80083: DEC
80084: ST_TO_ADDR
80085: LD_VAR 0 5
80089: PUSH
80090: LD_INT 1
80092: ARRAY
80093: PUSH
80094: FOR_TO
80095: IFFALSE 80157
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
80097: LD_ADDR_VAR 0 3
80101: PUSH
80102: LD_VAR 0 3
80106: PPUSH
80107: LD_VAR 0 3
80111: PUSH
80112: LD_INT 1
80114: PLUS
80115: PPUSH
80116: LD_VAR 0 5
80120: PUSH
80121: LD_INT 1
80123: ARRAY
80124: PUSH
80125: LD_VAR 0 4
80129: ARRAY
80130: PUSH
80131: LD_VAR 0 5
80135: PUSH
80136: LD_INT 2
80138: ARRAY
80139: PUSH
80140: LD_VAR 0 4
80144: ARRAY
80145: PUSH
80146: EMPTY
80147: LIST
80148: LIST
80149: PPUSH
80150: CALL_OW 1
80154: ST_TO_ADDR
80155: GO 80094
80157: POP
80158: POP
// exit ;
80159: GO 80199
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
80161: LD_ADDR_VAR 0 3
80165: PUSH
80166: LD_VAR 0 5
80170: PUSH
80171: LD_INT 1
80173: ARRAY
80174: PUSH
80175: LD_INT 1
80177: ARRAY
80178: PUSH
80179: LD_VAR 0 5
80183: PUSH
80184: LD_INT 2
80186: ARRAY
80187: PUSH
80188: LD_INT 1
80190: ARRAY
80191: PUSH
80192: EMPTY
80193: LIST
80194: LIST
80195: PUSH
80196: EMPTY
80197: LIST
80198: ST_TO_ADDR
// end ;
80199: LD_VAR 0 3
80203: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
80204: LD_INT 0
80206: PPUSH
80207: PPUSH
// list := AreaToList ( area , 0 ) ;
80208: LD_ADDR_VAR 0 4
80212: PUSH
80213: LD_VAR 0 1
80217: PPUSH
80218: LD_INT 0
80220: PPUSH
80221: CALL_OW 517
80225: ST_TO_ADDR
// if not list then
80226: LD_VAR 0 4
80230: NOT
80231: IFFALSE 80235
// exit ;
80233: GO 80276
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
80235: LD_ADDR_VAR 0 3
80239: PUSH
80240: LD_VAR 0 4
80244: PUSH
80245: LD_INT 1
80247: ARRAY
80248: PUSH
80249: LD_INT 1
80251: ARRAY
80252: PUSH
80253: LD_VAR 0 4
80257: PUSH
80258: LD_INT 2
80260: ARRAY
80261: PUSH
80262: LD_INT 1
80264: ARRAY
80265: PUSH
80266: LD_VAR 0 2
80270: PUSH
80271: EMPTY
80272: LIST
80273: LIST
80274: LIST
80275: ST_TO_ADDR
// end ;
80276: LD_VAR 0 3
80280: RET
// export function First ( array ) ; begin
80281: LD_INT 0
80283: PPUSH
// if not array then
80284: LD_VAR 0 1
80288: NOT
80289: IFFALSE 80293
// exit ;
80291: GO 80307
// result := array [ 1 ] ;
80293: LD_ADDR_VAR 0 2
80297: PUSH
80298: LD_VAR 0 1
80302: PUSH
80303: LD_INT 1
80305: ARRAY
80306: ST_TO_ADDR
// end ;
80307: LD_VAR 0 2
80311: RET
// export function Last ( array ) ; begin
80312: LD_INT 0
80314: PPUSH
// if not array then
80315: LD_VAR 0 1
80319: NOT
80320: IFFALSE 80324
// exit ;
80322: GO 80340
// result := array [ array ] ;
80324: LD_ADDR_VAR 0 2
80328: PUSH
80329: LD_VAR 0 1
80333: PUSH
80334: LD_VAR 0 1
80338: ARRAY
80339: ST_TO_ADDR
// end ;
80340: LD_VAR 0 2
80344: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
80345: LD_INT 0
80347: PPUSH
80348: PPUSH
// result := [ ] ;
80349: LD_ADDR_VAR 0 5
80353: PUSH
80354: EMPTY
80355: ST_TO_ADDR
// if not array then
80356: LD_VAR 0 1
80360: NOT
80361: IFFALSE 80365
// exit ;
80363: GO 80477
// for i := 1 to array do
80365: LD_ADDR_VAR 0 6
80369: PUSH
80370: DOUBLE
80371: LD_INT 1
80373: DEC
80374: ST_TO_ADDR
80375: LD_VAR 0 1
80379: PUSH
80380: FOR_TO
80381: IFFALSE 80475
// if array [ i ] [ index ] = value then
80383: LD_VAR 0 1
80387: PUSH
80388: LD_VAR 0 6
80392: ARRAY
80393: PUSH
80394: LD_VAR 0 2
80398: ARRAY
80399: PUSH
80400: LD_VAR 0 3
80404: EQUAL
80405: IFFALSE 80473
// begin if indexColumn then
80407: LD_VAR 0 4
80411: IFFALSE 80447
// result := Join ( result , array [ i ] [ indexColumn ] ) else
80413: LD_ADDR_VAR 0 5
80417: PUSH
80418: LD_VAR 0 5
80422: PPUSH
80423: LD_VAR 0 1
80427: PUSH
80428: LD_VAR 0 6
80432: ARRAY
80433: PUSH
80434: LD_VAR 0 4
80438: ARRAY
80439: PPUSH
80440: CALL 75485 0 2
80444: ST_TO_ADDR
80445: GO 80473
// result := Join ( result , array [ i ] ) ;
80447: LD_ADDR_VAR 0 5
80451: PUSH
80452: LD_VAR 0 5
80456: PPUSH
80457: LD_VAR 0 1
80461: PUSH
80462: LD_VAR 0 6
80466: ARRAY
80467: PPUSH
80468: CALL 75485 0 2
80472: ST_TO_ADDR
// end ;
80473: GO 80380
80475: POP
80476: POP
// end ;
80477: LD_VAR 0 5
80481: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
80482: LD_INT 0
80484: PPUSH
// if not vehicles or not parkingPoint then
80485: LD_VAR 0 1
80489: NOT
80490: IFTRUE 80499
80492: PUSH
80493: LD_VAR 0 2
80497: NOT
80498: OR
80499: IFFALSE 80503
// exit ;
80501: GO 80601
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
80503: LD_ADDR_VAR 0 1
80507: PUSH
80508: LD_VAR 0 1
80512: PPUSH
80513: LD_INT 50
80515: PUSH
80516: EMPTY
80517: LIST
80518: PUSH
80519: LD_INT 3
80521: PUSH
80522: LD_INT 92
80524: PUSH
80525: LD_VAR 0 2
80529: PUSH
80530: LD_INT 1
80532: ARRAY
80533: PUSH
80534: LD_VAR 0 2
80538: PUSH
80539: LD_INT 2
80541: ARRAY
80542: PUSH
80543: LD_INT 8
80545: PUSH
80546: EMPTY
80547: LIST
80548: LIST
80549: LIST
80550: LIST
80551: PUSH
80552: EMPTY
80553: LIST
80554: LIST
80555: PUSH
80556: EMPTY
80557: LIST
80558: LIST
80559: PPUSH
80560: CALL_OW 72
80564: ST_TO_ADDR
// if not vehicles then
80565: LD_VAR 0 1
80569: NOT
80570: IFFALSE 80574
// exit ;
80572: GO 80601
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
80574: LD_VAR 0 1
80578: PPUSH
80579: LD_VAR 0 2
80583: PUSH
80584: LD_INT 1
80586: ARRAY
80587: PPUSH
80588: LD_VAR 0 2
80592: PUSH
80593: LD_INT 2
80595: ARRAY
80596: PPUSH
80597: CALL_OW 111
// end ;
80601: LD_VAR 0 3
80605: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
80606: LD_INT 0
80608: PPUSH
80609: PPUSH
80610: PPUSH
// if not side or not area then
80611: LD_VAR 0 1
80615: NOT
80616: IFTRUE 80625
80618: PUSH
80619: LD_VAR 0 2
80623: NOT
80624: OR
80625: IFFALSE 80629
// exit ;
80627: GO 80748
// tmp := AreaToList ( area , 0 ) ;
80629: LD_ADDR_VAR 0 5
80633: PUSH
80634: LD_VAR 0 2
80638: PPUSH
80639: LD_INT 0
80641: PPUSH
80642: CALL_OW 517
80646: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
80647: LD_ADDR_VAR 0 4
80651: PUSH
80652: DOUBLE
80653: LD_INT 1
80655: DEC
80656: ST_TO_ADDR
80657: LD_VAR 0 5
80661: PUSH
80662: LD_INT 1
80664: ARRAY
80665: PUSH
80666: FOR_TO
80667: IFFALSE 80746
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
80669: LD_VAR 0 5
80673: PUSH
80674: LD_INT 1
80676: ARRAY
80677: PUSH
80678: LD_VAR 0 4
80682: ARRAY
80683: PPUSH
80684: LD_VAR 0 5
80688: PUSH
80689: LD_INT 2
80691: ARRAY
80692: PUSH
80693: LD_VAR 0 4
80697: ARRAY
80698: PPUSH
80699: CALL_OW 351
80703: IFFALSE 80744
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
80705: LD_VAR 0 5
80709: PUSH
80710: LD_INT 1
80712: ARRAY
80713: PUSH
80714: LD_VAR 0 4
80718: ARRAY
80719: PPUSH
80720: LD_VAR 0 5
80724: PUSH
80725: LD_INT 2
80727: ARRAY
80728: PUSH
80729: LD_VAR 0 4
80733: ARRAY
80734: PPUSH
80735: LD_VAR 0 1
80739: PPUSH
80740: CALL_OW 244
// end ;
80744: GO 80666
80746: POP
80747: POP
// end ;
80748: LD_VAR 0 3
80752: RET
// export function UniqueArray ( array ) ; var i ; begin
80753: LD_INT 0
80755: PPUSH
80756: PPUSH
// result := [ ] ;
80757: LD_ADDR_VAR 0 2
80761: PUSH
80762: EMPTY
80763: ST_TO_ADDR
// if not array then
80764: LD_VAR 0 1
80768: NOT
80769: IFFALSE 80773
// exit ;
80771: GO 80834
// for i := 1 to array do
80773: LD_ADDR_VAR 0 3
80777: PUSH
80778: DOUBLE
80779: LD_INT 1
80781: DEC
80782: ST_TO_ADDR
80783: LD_VAR 0 1
80787: PUSH
80788: FOR_TO
80789: IFFALSE 80832
// if not array [ i ] in result then
80791: LD_VAR 0 1
80795: PUSH
80796: LD_VAR 0 3
80800: ARRAY
80801: PUSH
80802: LD_VAR 0 2
80806: IN
80807: NOT
80808: IFFALSE 80830
// result := Join ( result , i ) ;
80810: LD_ADDR_VAR 0 2
80814: PUSH
80815: LD_VAR 0 2
80819: PPUSH
80820: LD_VAR 0 3
80824: PPUSH
80825: CALL 75485 0 2
80829: ST_TO_ADDR
80830: GO 80788
80832: POP
80833: POP
// end ; end_of_file
80834: LD_VAR 0 2
80838: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80839: LD_VAR 0 1
80843: PUSH
80844: LD_INT 200
80846: DOUBLE
80847: GREATEREQUAL
80848: IFFALSE 80856
80850: LD_INT 299
80852: DOUBLE
80853: LESSEQUAL
80854: IFTRUE 80858
80856: GO 80890
80858: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80859: LD_VAR 0 1
80863: PPUSH
80864: LD_VAR 0 2
80868: PPUSH
80869: LD_VAR 0 3
80873: PPUSH
80874: LD_VAR 0 4
80878: PPUSH
80879: LD_VAR 0 5
80883: PPUSH
80884: CALL 32596 0 5
80888: GO 80967
80890: LD_INT 300
80892: DOUBLE
80893: GREATEREQUAL
80894: IFFALSE 80902
80896: LD_INT 399
80898: DOUBLE
80899: LESSEQUAL
80900: IFTRUE 80904
80902: GO 80966
80904: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80905: LD_VAR 0 1
80909: PPUSH
80910: LD_VAR 0 2
80914: PPUSH
80915: LD_VAR 0 3
80919: PPUSH
80920: LD_VAR 0 4
80924: PPUSH
80925: LD_VAR 0 5
80929: PPUSH
80930: LD_VAR 0 6
80934: PPUSH
80935: LD_VAR 0 7
80939: PPUSH
80940: LD_VAR 0 8
80944: PPUSH
80945: LD_VAR 0 9
80949: PPUSH
80950: LD_VAR 0 10
80954: PPUSH
80955: LD_VAR 0 11
80959: PPUSH
80960: CALL 28480 0 11
80964: GO 80967
80966: POP
// end ;
80967: PPOPN 11
80969: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80970: LD_VAR 0 1
80974: PPUSH
80975: LD_VAR 0 2
80979: PPUSH
80980: LD_VAR 0 3
80984: PPUSH
80985: LD_VAR 0 4
80989: PPUSH
80990: LD_VAR 0 5
80994: PPUSH
80995: CALL 31977 0 5
// end ; end_of_file
80999: PPOPN 5
81001: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81002: LD_VAR 0 1
81006: PPUSH
81007: LD_VAR 0 2
81011: PPUSH
81012: LD_VAR 0 3
81016: PPUSH
81017: LD_VAR 0 4
81021: PPUSH
81022: LD_VAR 0 5
81026: PPUSH
81027: LD_VAR 0 6
81031: PPUSH
81032: CALL 16020 0 6
// end ;
81036: PPOPN 6
81038: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81039: LD_INT 0
81041: PPUSH
// begin if not units then
81042: LD_VAR 0 1
81046: NOT
81047: IFFALSE 81051
// exit ;
81049: GO 81051
// end ;
81051: PPOPN 7
81053: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81054: CALL 15907 0 0
// end ;
81058: PPOPN 1
81060: END
