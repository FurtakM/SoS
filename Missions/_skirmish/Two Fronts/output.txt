// starting begin isTest := true ;
   0: LD_ADDR_EXP 1
   4: PUSH
   5: LD_INT 1
   7: ST_TO_ADDR
// mission_name := TwoFronts ;
   8: LD_ADDR_OWVAR 68
  12: PUSH
  13: LD_STRING TwoFronts
  15: ST_TO_ADDR
// mission_number := 6 ;
  16: LD_ADDR_OWVAR 70
  20: PUSH
  21: LD_INT 6
  23: ST_TO_ADDR
// RandomizeAll ;
  24: CALL_OW 11
// ResetFog ;
  28: CALL_OW 335
// FogOff ( isTest ) ;
  32: LD_EXP 1
  36: PPUSH
  37: CALL_OW 344
// InitGlobalVar ;
  41: CALL 58 0 0
// InitAction ;
  45: CALL 5053 0 0
// PrepareAmericans ;
  49: CALL 130 0 0
// Action ;
  53: CALL 5311 0 0
// end ;
  57: END
// export isTest , callUsed ; export Jakes , Sylvia ; export dialogTrans , playerLoss ; export call , alfaNorthTriggered , alfaSouthTriggered , attackWave1 , attackWave2 ; function InitGlobalVar ; begin
  58: LD_INT 0
  60: PPUSH
// dialogTrans := true ;
  61: LD_ADDR_EXP 5
  65: PUSH
  66: LD_INT 1
  68: ST_TO_ADDR
// call := true ;
  69: LD_ADDR_EXP 7
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// alfaNorthTriggered := false ;
  77: LD_ADDR_EXP 8
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// alfaSouthTriggered := false ;
  85: LD_ADDR_EXP 9
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// playerLoss := 0 ;
  93: LD_ADDR_EXP 6
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// callUsed := false ;
 101: LD_ADDR_EXP 2
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// attackWave1 := 0 ;
 109: LD_ADDR_EXP 10
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// attackWave2 := 0 ;
 117: LD_ADDR_EXP 11
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// end ; end_of_file
 125: LD_VAR 0 1
 129: RET
// export usForces1 , usForces2 , usVehicles1 , usVehicles2 , usTechs1 , usTechs2 , usConstructList1 , usConstructList2 , usBuildingsToBuild1 , usBuildingsToBuild2 , usAttackVehicles1 , usAttackVehicles2 ; export function PrepareAmericans ; begin
 130: LD_INT 0
 132: PPUSH
// usForces1 := PrepareSquad ( 1 , 1 , americanBaseNorthArea , sylvia , [ 4 , 6 , 8 ] [ Difficulty ] , [ 21 , 22 , 24 ] [ Difficulty ] ) ;
 133: LD_ADDR_EXP 12
 137: PUSH
 138: LD_INT 1
 140: PPUSH
 141: LD_INT 1
 143: PPUSH
 144: LD_INT 10
 146: PPUSH
 147: LD_STRING sylvia
 149: PPUSH
 150: LD_INT 4
 152: PUSH
 153: LD_INT 6
 155: PUSH
 156: LD_INT 8
 158: PUSH
 159: EMPTY
 160: LIST
 161: LIST
 162: LIST
 163: PUSH
 164: LD_OWVAR 67
 168: ARRAY
 169: PPUSH
 170: LD_INT 21
 172: PUSH
 173: LD_INT 22
 175: PUSH
 176: LD_INT 24
 178: PUSH
 179: EMPTY
 180: LIST
 181: LIST
 182: LIST
 183: PUSH
 184: LD_OWVAR 67
 188: ARRAY
 189: PPUSH
 190: CALL 460 0 6
 194: ST_TO_ADDR
// usForces2 := PrepareSquad ( 4 , 1 , americanBaseSouthArea , jakes , [ 4 , 6 , 8 ] [ Difficulty ] , [ 21 , 22 , 24 ] [ Difficulty ] ) ;
 195: LD_ADDR_EXP 13
 199: PUSH
 200: LD_INT 4
 202: PPUSH
 203: LD_INT 1
 205: PPUSH
 206: LD_INT 11
 208: PPUSH
 209: LD_STRING jakes
 211: PPUSH
 212: LD_INT 4
 214: PUSH
 215: LD_INT 6
 217: PUSH
 218: LD_INT 8
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: LIST
 225: PUSH
 226: LD_OWVAR 67
 230: ARRAY
 231: PPUSH
 232: LD_INT 21
 234: PUSH
 235: LD_INT 22
 237: PUSH
 238: LD_INT 24
 240: PUSH
 241: EMPTY
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_OWVAR 67
 250: ARRAY
 251: PPUSH
 252: CALL 460 0 6
 256: ST_TO_ADDR
// usVehicles1 := [ ] ;
 257: LD_ADDR_EXP 14
 261: PUSH
 262: EMPTY
 263: ST_TO_ADDR
// usTechs1 := GetTechNation ( 1 , nation_american , state_enabled ) ;
 264: LD_ADDR_EXP 16
 268: PUSH
 269: LD_INT 1
 271: PPUSH
 272: LD_INT 1
 274: PPUSH
 275: LD_INT 1
 277: PPUSH
 278: CALL 35163 0 3
 282: ST_TO_ADDR
// usConstructList1 := [ ] ;
 283: LD_ADDR_EXP 18
 287: PUSH
 288: EMPTY
 289: ST_TO_ADDR
// usAttackVehicles1 := [ ] ;
 290: LD_ADDR_EXP 22
 294: PUSH
 295: EMPTY
 296: ST_TO_ADDR
// usVehicles2 := [ ] ;
 297: LD_ADDR_EXP 15
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// usTechs2 := GetTechNation ( 4 , nation_american , state_enabled ) ;
 304: LD_ADDR_EXP 17
 308: PUSH
 309: LD_INT 4
 311: PPUSH
 312: LD_INT 1
 314: PPUSH
 315: LD_INT 1
 317: PPUSH
 318: CALL 35163 0 3
 322: ST_TO_ADDR
// usConstructList2 := [ ] ;
 323: LD_ADDR_EXP 19
 327: PUSH
 328: EMPTY
 329: ST_TO_ADDR
// usAttackVehicles2 := [ ] ;
 330: LD_ADDR_EXP 23
 334: PUSH
 335: EMPTY
 336: ST_TO_ADDR
// if Difficulty > 1 then
 337: LD_OWVAR 67
 341: PUSH
 342: LD_INT 1
 344: GREATER
 345: IFFALSE 360
// SetTech ( tech_comp2 , 8 , state_researched ) ;
 347: LD_INT 58
 349: PPUSH
 350: LD_INT 8
 352: PPUSH
 353: LD_INT 2
 355: PPUSH
 356: CALL_OW 322
// if Difficulty > 2 then
 360: LD_OWVAR 67
 364: PUSH
 365: LD_INT 2
 367: GREATER
 368: IFFALSE 383
// SetTech ( tech_comp3 , 8 , state_researched ) ;
 370: LD_INT 59
 372: PPUSH
 373: LD_INT 8
 375: PPUSH
 376: LD_INT 2
 378: PPUSH
 379: CALL_OW 322
// SetResourceType ( GetBase ( usDep1 ) , mat_cans , 7500 ) ;
 383: LD_INT 9
 385: PPUSH
 386: CALL_OW 274
 390: PPUSH
 391: LD_INT 1
 393: PPUSH
 394: LD_INT 7500
 396: PPUSH
 397: CALL_OW 277
// SetResourceType ( GetBase ( usDep1 ) , mat_oil , 3000 ) ;
 401: LD_INT 9
 403: PPUSH
 404: CALL_OW 274
 408: PPUSH
 409: LD_INT 2
 411: PPUSH
 412: LD_INT 3000
 414: PPUSH
 415: CALL_OW 277
// SetResourceType ( GetBase ( usDep2 ) , mat_cans , 5500 ) ;
 419: LD_INT 40
 421: PPUSH
 422: CALL_OW 274
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_INT 5500
 432: PPUSH
 433: CALL_OW 277
// SetResourceType ( GetBase ( usDep2 ) , mat_oil , 3000 ) ;
 437: LD_INT 40
 439: PPUSH
 440: CALL_OW 274
 444: PPUSH
 445: LD_INT 2
 447: PPUSH
 448: LD_INT 3000
 450: PPUSH
 451: CALL_OW 277
// end ;
 455: LD_VAR 0 1
 459: RET
// export function PrepareSquad ( side , nat , area , commander , skill , num ) ; var i , un , team , tmp ; begin
 460: LD_INT 0
 462: PPUSH
 463: PPUSH
 464: PPUSH
 465: PPUSH
 466: PPUSH
// uc_side := side ;
 467: LD_ADDR_OWVAR 20
 471: PUSH
 472: LD_VAR 0 1
 476: ST_TO_ADDR
// uc_nation := nat ;
 477: LD_ADDR_OWVAR 21
 481: PUSH
 482: LD_VAR 0 2
 486: ST_TO_ADDR
// team := [ ] ;
 487: LD_ADDR_VAR 0 10
 491: PUSH
 492: EMPTY
 493: ST_TO_ADDR
// hc_importance := 100 ;
 494: LD_ADDR_OWVAR 32
 498: PUSH
 499: LD_INT 100
 501: ST_TO_ADDR
// case commander of jakes :
 502: LD_VAR 0 4
 506: PUSH
 507: LD_STRING jakes
 509: DOUBLE
 510: EQUAL
 511: IFTRUE 515
 513: GO 587
 515: POP
// begin PrepareHuman ( sex_male , class_soldier , skill ) ;
 516: LD_INT 1
 518: PPUSH
 519: LD_INT 1
 521: PPUSH
 522: LD_VAR 0 5
 526: PPUSH
 527: CALL_OW 380
// hc_gallery := pkremaster ;
 531: LD_ADDR_OWVAR 33
 535: PUSH
 536: LD_STRING pkremaster
 538: ST_TO_ADDR
// hc_face_number := 12 ;
 539: LD_ADDR_OWVAR 34
 543: PUSH
 544: LD_INT 12
 546: ST_TO_ADDR
// hc_name := Jan van Jakes ;
 547: LD_ADDR_OWVAR 26
 551: PUSH
 552: LD_STRING Jan van Jakes
 554: ST_TO_ADDR
// Jakes := CreateHuman ;
 555: LD_ADDR_EXP 3
 559: PUSH
 560: CALL_OW 44
 564: ST_TO_ADDR
// team := Join ( team , Jakes ) ;
 565: LD_ADDR_VAR 0 10
 569: PUSH
 570: LD_VAR 0 10
 574: PPUSH
 575: LD_EXP 3
 579: PPUSH
 580: CALL 73148 0 2
 584: ST_TO_ADDR
// end ; sylvia :
 585: GO 668
 587: LD_STRING sylvia
 589: DOUBLE
 590: EQUAL
 591: IFTRUE 595
 593: GO 667
 595: POP
// begin PrepareHuman ( sex_female , class_soldier , skill ) ;
 596: LD_INT 2
 598: PPUSH
 599: LD_INT 1
 601: PPUSH
 602: LD_VAR 0 5
 606: PPUSH
 607: CALL_OW 380
// hc_gallery := pkremaster ;
 611: LD_ADDR_OWVAR 33
 615: PUSH
 616: LD_STRING pkremaster
 618: ST_TO_ADDR
// hc_face_number := 13 ;
 619: LD_ADDR_OWVAR 34
 623: PUSH
 624: LD_INT 13
 626: ST_TO_ADDR
// hc_name := Sylvia Johnson ;
 627: LD_ADDR_OWVAR 26
 631: PUSH
 632: LD_STRING Sylvia Johnson
 634: ST_TO_ADDR
// Sylvia := CreateHuman ;
 635: LD_ADDR_EXP 4
 639: PUSH
 640: CALL_OW 44
 644: ST_TO_ADDR
// team := Join ( team , Sylvia ) ;
 645: LD_ADDR_VAR 0 10
 649: PUSH
 650: LD_VAR 0 10
 654: PPUSH
 655: LD_EXP 4
 659: PPUSH
 660: CALL 73148 0 2
 664: ST_TO_ADDR
// end ; end ;
 665: GO 668
 667: POP
// InitHC_All ( ) ;
 668: CALL_OW 584
// for i := 1 to num do
 672: LD_ADDR_VAR 0 8
 676: PUSH
 677: DOUBLE
 678: LD_INT 1
 680: DEC
 681: ST_TO_ADDR
 682: LD_VAR 0 6
 686: PUSH
 687: FOR_TO
 688: IFFALSE 743
// begin PrepareHuman ( false , ( i mod 4 ) + 1 , skill ) ;
 690: LD_INT 0
 692: PPUSH
 693: LD_VAR 0 8
 697: PUSH
 698: LD_INT 4
 700: MOD
 701: PUSH
 702: LD_INT 1
 704: PLUS
 705: PPUSH
 706: LD_VAR 0 5
 710: PPUSH
 711: CALL_OW 380
// un := CreateHuman ;
 715: LD_ADDR_VAR 0 9
 719: PUSH
 720: CALL_OW 44
 724: ST_TO_ADDR
// team := team ^ un ;
 725: LD_ADDR_VAR 0 10
 729: PUSH
 730: LD_VAR 0 10
 734: PUSH
 735: LD_VAR 0 9
 739: ADD
 740: ST_TO_ADDR
// end ;
 741: GO 687
 743: POP
 744: POP
// for i := 1 to 3 do
 745: LD_ADDR_VAR 0 8
 749: PUSH
 750: DOUBLE
 751: LD_INT 1
 753: DEC
 754: ST_TO_ADDR
 755: LD_INT 3
 757: PUSH
 758: FOR_TO
 759: IFFALSE 801
// begin PrepareMechanic ( false , skill ) ;
 761: LD_INT 0
 763: PPUSH
 764: LD_VAR 0 5
 768: PPUSH
 769: CALL_OW 383
// un := CreateHuman ;
 773: LD_ADDR_VAR 0 9
 777: PUSH
 778: CALL_OW 44
 782: ST_TO_ADDR
// team := team ^ un ;
 783: LD_ADDR_VAR 0 10
 787: PUSH
 788: LD_VAR 0 10
 792: PUSH
 793: LD_VAR 0 9
 797: ADD
 798: ST_TO_ADDR
// end ;
 799: GO 758
 801: POP
 802: POP
// for i := 1 to 5 do
 803: LD_ADDR_VAR 0 8
 807: PUSH
 808: DOUBLE
 809: LD_INT 1
 811: DEC
 812: ST_TO_ADDR
 813: LD_INT 5
 815: PUSH
 816: FOR_TO
 817: IFFALSE 859
// begin PrepareSoldier ( false , skill ) ;
 819: LD_INT 0
 821: PPUSH
 822: LD_VAR 0 5
 826: PPUSH
 827: CALL_OW 381
// un := CreateHuman ;
 831: LD_ADDR_VAR 0 9
 835: PUSH
 836: CALL_OW 44
 840: ST_TO_ADDR
// team := team ^ un ;
 841: LD_ADDR_VAR 0 10
 845: PUSH
 846: LD_VAR 0 10
 850: PUSH
 851: LD_VAR 0 9
 855: ADD
 856: ST_TO_ADDR
// end ;
 857: GO 816
 859: POP
 860: POP
// for i in team do
 861: LD_ADDR_VAR 0 8
 865: PUSH
 866: LD_VAR 0 10
 870: PUSH
 871: FOR_IN
 872: IFFALSE 1210
// begin case GetClass ( i ) of class_soldier :
 874: LD_VAR 0 8
 878: PPUSH
 879: CALL_OW 257
 883: PUSH
 884: LD_INT 1
 886: DOUBLE
 887: EQUAL
 888: IFTRUE 892
 890: GO 945
 892: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_full ] ] , [ f_btype , b_barracks ] ] ) ; class_engineer :
 893: LD_ADDR_VAR 0 11
 897: PUSH
 898: LD_INT 22
 900: PUSH
 901: LD_VAR 0 1
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: PUSH
 910: LD_INT 3
 912: PUSH
 913: LD_INT 62
 915: PUSH
 916: EMPTY
 917: LIST
 918: PUSH
 919: EMPTY
 920: LIST
 921: LIST
 922: PUSH
 923: LD_INT 30
 925: PUSH
 926: LD_INT 5
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: LIST
 937: PPUSH
 938: CALL_OW 69
 942: ST_TO_ADDR
 943: GO 1165
 945: LD_INT 2
 947: DOUBLE
 948: EQUAL
 949: IFTRUE 953
 951: GO 1024
 953: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; class_scientistic :
 954: LD_ADDR_VAR 0 11
 958: PUSH
 959: LD_INT 22
 961: PUSH
 962: LD_VAR 0 1
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: LD_INT 3
 973: PUSH
 974: LD_INT 62
 976: PUSH
 977: EMPTY
 978: LIST
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 2
 986: PUSH
 987: LD_INT 30
 989: PUSH
 990: LD_INT 0
 992: PUSH
 993: EMPTY
 994: LIST
 995: LIST
 996: PUSH
 997: LD_INT 30
 999: PUSH
1000: LD_INT 1
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: LIST
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: PPUSH
1017: CALL_OW 69
1021: ST_TO_ADDR
1022: GO 1165
1024: LD_INT 4
1026: DOUBLE
1027: EQUAL
1028: IFTRUE 1032
1030: GO 1103
1032: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) ; class_mechanic :
1033: LD_ADDR_VAR 0 11
1037: PUSH
1038: LD_INT 22
1040: PUSH
1041: LD_VAR 0 1
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: PUSH
1050: LD_INT 3
1052: PUSH
1053: LD_INT 62
1055: PUSH
1056: EMPTY
1057: LIST
1058: PUSH
1059: EMPTY
1060: LIST
1061: LIST
1062: PUSH
1063: LD_INT 2
1065: PUSH
1066: LD_INT 30
1068: PUSH
1069: LD_INT 6
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: PUSH
1076: LD_INT 30
1078: PUSH
1079: LD_INT 8
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: PUSH
1086: EMPTY
1087: LIST
1088: LIST
1089: LIST
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: LIST
1095: PPUSH
1096: CALL_OW 69
1100: ST_TO_ADDR
1101: GO 1165
1103: LD_INT 3
1105: DOUBLE
1106: EQUAL
1107: IFTRUE 1111
1109: GO 1164
1111: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_full ] ] , [ f_btype , b_factory ] ] ) ; end ;
1112: LD_ADDR_VAR 0 11
1116: PUSH
1117: LD_INT 22
1119: PUSH
1120: LD_VAR 0 1
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: LD_INT 62
1134: PUSH
1135: EMPTY
1136: LIST
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: PUSH
1142: LD_INT 30
1144: PUSH
1145: LD_INT 3
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: PPUSH
1157: CALL_OW 69
1161: ST_TO_ADDR
1162: GO 1165
1164: POP
// if tmp then
1165: LD_VAR 0 11
1169: IFFALSE 1191
// PlaceHumanInUnit ( i , tmp [ 1 ] ) else
1171: LD_VAR 0 8
1175: PPUSH
1176: LD_VAR 0 11
1180: PUSH
1181: LD_INT 1
1183: ARRAY
1184: PPUSH
1185: CALL_OW 52
1189: GO 1208
// PlaceUnitArea ( i , area , false ) ;
1191: LD_VAR 0 8
1195: PPUSH
1196: LD_VAR 0 3
1200: PPUSH
1201: LD_INT 0
1203: PPUSH
1204: CALL_OW 49
// end ;
1208: GO 871
1210: POP
1211: POP
// result := team diff 0 ;
1212: LD_ADDR_VAR 0 7
1216: PUSH
1217: LD_VAR 0 10
1221: PUSH
1222: LD_INT 0
1224: DIFF
1225: ST_TO_ADDR
// end ;
1226: LD_VAR 0 7
1230: RET
// export function PrepareAlfaAttack ( area , n ) ; var i , un , ch ; begin
1231: LD_INT 0
1233: PPUSH
1234: PPUSH
1235: PPUSH
1236: PPUSH
// result := [ ] ;
1237: LD_ADDR_VAR 0 3
1241: PUSH
1242: EMPTY
1243: ST_TO_ADDR
// for i := 1 to n do
1244: LD_ADDR_VAR 0 4
1248: PUSH
1249: DOUBLE
1250: LD_INT 1
1252: DEC
1253: ST_TO_ADDR
1254: LD_VAR 0 2
1258: PUSH
1259: FOR_TO
1260: IFFALSE 1582
// begin uc_side := 8 ;
1262: LD_ADDR_OWVAR 20
1266: PUSH
1267: LD_INT 8
1269: ST_TO_ADDR
// uc_nation := 1 ;
1270: LD_ADDR_OWVAR 21
1274: PUSH
1275: LD_INT 1
1277: ST_TO_ADDR
// ch := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ rand ( 1 , Difficulty ) ] ;
1278: LD_ADDR_VAR 0 6
1282: PUSH
1283: LD_INT 3
1285: PUSH
1286: LD_INT 4
1288: PUSH
1289: LD_INT 4
1291: PUSH
1292: EMPTY
1293: LIST
1294: LIST
1295: LIST
1296: PUSH
1297: LD_INT 1
1299: PPUSH
1300: LD_OWVAR 67
1304: PPUSH
1305: CALL_OW 12
1309: ARRAY
1310: ST_TO_ADDR
// vc_chassis := ch ;
1311: LD_ADDR_OWVAR 37
1315: PUSH
1316: LD_VAR 0 6
1320: ST_TO_ADDR
// vc_control := control_computer ;
1321: LD_ADDR_OWVAR 38
1325: PUSH
1326: LD_INT 3
1328: ST_TO_ADDR
// vc_engine := engine_combustion ;
1329: LD_ADDR_OWVAR 39
1333: PUSH
1334: LD_INT 1
1336: ST_TO_ADDR
// if tick < [ 14 14$00 , 12 12$00 , 10 10$00 ] [ Difficulty ] then
1337: LD_OWVAR 1
1341: PUSH
1342: LD_INT 29400
1344: PUSH
1345: LD_INT 25200
1347: PUSH
1348: LD_INT 21000
1350: PUSH
1351: EMPTY
1352: LIST
1353: LIST
1354: LIST
1355: PUSH
1356: LD_OWVAR 67
1360: ARRAY
1361: LESS
1362: IFFALSE 1393
// vc_weapon := [ us_light_gun , us_double_gun ] [ rand ( 1 , 2 ) ] else
1364: LD_ADDR_OWVAR 40
1368: PUSH
1369: LD_INT 3
1371: PUSH
1372: LD_INT 5
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 1
1381: PPUSH
1382: LD_INT 2
1384: PPUSH
1385: CALL_OW 12
1389: ARRAY
1390: ST_TO_ADDR
1391: GO 1489
// if ch = us_medium_tracked then
1393: LD_VAR 0 6
1397: PUSH
1398: LD_INT 3
1400: EQUAL
1401: IFFALSE 1448
// vc_weapon := [ us_light_gun , us_gatling_gun , us_double_gun , us_rocket_launcher ] [ rand ( Difficulty , Difficulty + 1 ) ] else
1403: LD_ADDR_OWVAR 40
1407: PUSH
1408: LD_INT 3
1410: PUSH
1411: LD_INT 4
1413: PUSH
1414: LD_INT 5
1416: PUSH
1417: LD_INT 7
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: PUSH
1426: LD_OWVAR 67
1430: PPUSH
1431: LD_OWVAR 67
1435: PUSH
1436: LD_INT 1
1438: PLUS
1439: PPUSH
1440: CALL_OW 12
1444: ARRAY
1445: ST_TO_ADDR
1446: GO 1489
// vc_weapon := [ us_double_gun , us_heavy_gun , us_rocket_launcher , us_rocket_launcher ] [ rand ( 1 , Difficulty + 1 ) ] ;
1448: LD_ADDR_OWVAR 40
1452: PUSH
1453: LD_INT 5
1455: PUSH
1456: LD_INT 6
1458: PUSH
1459: LD_INT 7
1461: PUSH
1462: LD_INT 7
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: PUSH
1471: LD_INT 1
1473: PPUSH
1474: LD_OWVAR 67
1478: PUSH
1479: LD_INT 1
1481: PLUS
1482: PPUSH
1483: CALL_OW 12
1487: ARRAY
1488: ST_TO_ADDR
// vc_fuel_battery := 70 ;
1489: LD_ADDR_OWVAR 41
1493: PUSH
1494: LD_INT 70
1496: ST_TO_ADDR
// un := CreateVehicle ;
1497: LD_ADDR_VAR 0 5
1501: PUSH
1502: CALL_OW 45
1506: ST_TO_ADDR
// SetDir ( un , 2 ) ;
1507: LD_VAR 0 5
1511: PPUSH
1512: LD_INT 2
1514: PPUSH
1515: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
1519: LD_INT 35
1521: PPUSH
1522: CALL_OW 67
// until PlaceUnitArea ( un , area , false ) ;
1526: LD_VAR 0 5
1530: PPUSH
1531: LD_VAR 0 1
1535: PPUSH
1536: LD_INT 0
1538: PPUSH
1539: CALL_OW 49
1543: IFFALSE 1519
// result := Join ( result , un ) ;
1545: LD_ADDR_VAR 0 3
1549: PUSH
1550: LD_VAR 0 3
1554: PPUSH
1555: LD_VAR 0 5
1559: PPUSH
1560: CALL 73148 0 2
1564: ST_TO_ADDR
// ComMoveXY ( un , 65 , 9 ) ;
1565: LD_VAR 0 5
1569: PPUSH
1570: LD_INT 65
1572: PPUSH
1573: LD_INT 9
1575: PPUSH
1576: CALL_OW 111
// end ;
1580: GO 1259
1582: POP
1583: POP
// if Prob ( [ 90 , 80 , 70 ] [ Difficulty ] ) then
1584: LD_INT 90
1586: PUSH
1587: LD_INT 80
1589: PUSH
1590: LD_INT 70
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: LIST
1597: PUSH
1598: LD_OWVAR 67
1602: ARRAY
1603: PPUSH
1604: CALL_OW 13
1608: IFFALSE 1754
// begin uc_side := 8 ;
1610: LD_ADDR_OWVAR 20
1614: PUSH
1615: LD_INT 8
1617: ST_TO_ADDR
// uc_nation := 1 ;
1618: LD_ADDR_OWVAR 21
1622: PUSH
1623: LD_INT 1
1625: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
1626: LD_ADDR_OWVAR 37
1630: PUSH
1631: LD_INT 4
1633: ST_TO_ADDR
// vc_control := control_computer ;
1634: LD_ADDR_OWVAR 38
1638: PUSH
1639: LD_INT 3
1641: ST_TO_ADDR
// vc_engine := engine_combustion ;
1642: LD_ADDR_OWVAR 39
1646: PUSH
1647: LD_INT 1
1649: ST_TO_ADDR
// vc_weapon := us_bulldozer ;
1650: LD_ADDR_OWVAR 40
1654: PUSH
1655: LD_INT 14
1657: ST_TO_ADDR
// vc_fuel_battery := 70 ;
1658: LD_ADDR_OWVAR 41
1662: PUSH
1663: LD_INT 70
1665: ST_TO_ADDR
// un := CreateVehicle ;
1666: LD_ADDR_VAR 0 5
1670: PUSH
1671: CALL_OW 45
1675: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1676: LD_INT 35
1678: PPUSH
1679: CALL_OW 67
// until PlaceUnitArea ( un , area , false ) ;
1683: LD_VAR 0 5
1687: PPUSH
1688: LD_VAR 0 1
1692: PPUSH
1693: LD_INT 0
1695: PPUSH
1696: CALL_OW 49
1700: IFFALSE 1676
// ComMoveXY ( un , 65 , 9 ) ;
1702: LD_VAR 0 5
1706: PPUSH
1707: LD_INT 65
1709: PPUSH
1710: LD_INT 9
1712: PPUSH
1713: CALL_OW 111
// wait ( 0 0$02 ) ;
1717: LD_INT 70
1719: PPUSH
1720: CALL_OW 67
// CutTreeXYR ( un , 104 , 65 , 12 ) ;
1724: LD_VAR 0 5
1728: PPUSH
1729: LD_INT 104
1731: PPUSH
1732: LD_INT 65
1734: PPUSH
1735: LD_INT 12
1737: PPUSH
1738: CALL 30775 0 4
// AddComAttackUnit ( un , playerDepot ) ;
1742: LD_VAR 0 5
1746: PPUSH
1747: LD_INT 1
1749: PPUSH
1750: CALL_OW 175
// end ; repeat wait ( 0 0$1 ) ;
1754: LD_INT 35
1756: PPUSH
1757: CALL_OW 67
// result := UnitFilter ( result , [ f_ok ] ) ;
1761: LD_ADDR_VAR 0 3
1765: PUSH
1766: LD_VAR 0 3
1770: PPUSH
1771: LD_INT 50
1773: PUSH
1774: EMPTY
1775: LIST
1776: PPUSH
1777: CALL_OW 72
1781: ST_TO_ADDR
// AgressiveMove ( result , [ [ 82 , 14 ] , [ 83 , 39 ] , [ 89 , 51 ] , [ 91 , 58 ] ] ) ;
1782: LD_VAR 0 3
1786: PPUSH
1787: LD_INT 82
1789: PUSH
1790: LD_INT 14
1792: PUSH
1793: EMPTY
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 83
1799: PUSH
1800: LD_INT 39
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PUSH
1807: LD_INT 89
1809: PUSH
1810: LD_INT 51
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PUSH
1817: LD_INT 91
1819: PUSH
1820: LD_INT 58
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: PPUSH
1833: CALL 75914 0 2
// until not result ;
1837: LD_VAR 0 3
1841: NOT
1842: IFFALSE 1754
// end ;
1844: LD_VAR 0 3
1848: RET
// every 0 0$1 trigger FilterAllUnits ( [ f_side , 1 ] ) do
1849: LD_INT 22
1851: PUSH
1852: LD_INT 1
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PPUSH
1859: CALL_OW 69
1863: IFFALSE 1935
1865: GO 1867
1867: DISABLE
// begin enable ;
1868: ENABLE
// BaseScript ( 1 , americanBaseNorthArea , americanBaseNorthArea , americanBaseNorthInnerArea , americanBaseNorthOuterArea , usForces1 , usVehicles1 , usTechs1 , usConstructList1 , usBuildingsToBuild1 , [ 19 , 9 ] , [ 40 , 5 ] , [ ] ) ;
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 10
1874: PPUSH
1875: LD_INT 10
1877: PPUSH
1878: LD_INT 13
1880: PPUSH
1881: LD_INT 12
1883: PPUSH
1884: LD_EXP 12
1888: PPUSH
1889: LD_EXP 14
1893: PPUSH
1894: LD_EXP 16
1898: PPUSH
1899: LD_EXP 18
1903: PPUSH
1904: LD_EXP 20
1908: PPUSH
1909: LD_INT 19
1911: PUSH
1912: LD_INT 9
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PPUSH
1919: LD_INT 40
1921: PUSH
1922: LD_INT 5
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PPUSH
1929: EMPTY
1930: PPUSH
1931: CALL 7744 0 13
// end ;
1935: END
// every 0 0$1 trigger FilterAllUnits ( [ f_side , 4 ] ) do
1936: LD_INT 22
1938: PUSH
1939: LD_INT 4
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PPUSH
1946: CALL_OW 69
1950: IFFALSE 2022
1952: GO 1954
1954: DISABLE
// begin enable ;
1955: ENABLE
// BaseScript ( 4 , americanBaseSouthArea , americanBaseSouthArea , americanBaseSouthInnerArea , americanBaseSouthOuterArea , usForces2 , usVehicles2 , usTechs2 , usConstructList2 , usBuildingsToBuild2 , [ 83 , 151 ] , [ 92 , 144 ] , [ ] ) ;
1956: LD_INT 4
1958: PPUSH
1959: LD_INT 11
1961: PPUSH
1962: LD_INT 11
1964: PPUSH
1965: LD_INT 15
1967: PPUSH
1968: LD_INT 14
1970: PPUSH
1971: LD_EXP 13
1975: PPUSH
1976: LD_EXP 15
1980: PPUSH
1981: LD_EXP 17
1985: PPUSH
1986: LD_EXP 19
1990: PPUSH
1991: LD_EXP 21
1995: PPUSH
1996: LD_INT 83
1998: PUSH
1999: LD_INT 151
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PPUSH
2006: LD_INT 92
2008: PUSH
2009: LD_INT 144
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: PPUSH
2016: EMPTY
2017: PPUSH
2018: CALL 7744 0 13
// end ;
2022: END
// every 5 5$00 + 3 3$00 trigger IsOk ( usDep1 ) and not usConstructList1 do var i ;
2023: LD_INT 9
2025: PPUSH
2026: CALL_OW 302
2030: IFFALSE 2039
2032: PUSH
2033: LD_EXP 18
2037: NOT
2038: AND
2039: IFFALSE 2330
2041: GO 2043
2043: DISABLE
2044: LD_INT 0
2046: PPUSH
// begin enable ;
2047: ENABLE
// usConstructList1 := [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_gatling_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] ] ;
2048: LD_ADDR_EXP 18
2052: PUSH
2053: LD_INT 3
2055: PUSH
2056: LD_INT 1
2058: PUSH
2059: LD_INT 2
2061: PUSH
2062: LD_INT 5
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: PUSH
2071: LD_INT 3
2073: PUSH
2074: LD_INT 1
2076: PUSH
2077: LD_INT 2
2079: PUSH
2080: LD_INT 4
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: PUSH
2089: LD_INT 3
2091: PUSH
2092: LD_INT 1
2094: PUSH
2095: LD_INT 2
2097: PUSH
2098: LD_INT 5
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 3
2109: PUSH
2110: LD_INT 1
2112: PUSH
2113: LD_INT 1
2115: PUSH
2116: LD_INT 5
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: ST_TO_ADDR
// if Difficulty > 1 then
2131: LD_OWVAR 67
2135: PUSH
2136: LD_INT 1
2138: GREATER
2139: IFFALSE 2192
// usConstructList1 := usConstructList1 ^ [ [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_gatling_gun ] ] ;
2141: LD_ADDR_EXP 18
2145: PUSH
2146: LD_EXP 18
2150: PUSH
2151: LD_INT 4
2153: PUSH
2154: LD_INT 1
2156: PUSH
2157: LD_INT 2
2159: PUSH
2160: LD_INT 6
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: PUSH
2169: LD_INT 3
2171: PUSH
2172: LD_INT 1
2174: PUSH
2175: LD_INT 2
2177: PUSH
2178: LD_INT 4
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: EMPTY
2188: LIST
2189: LIST
2190: ADD
2191: ST_TO_ADDR
// if Difficulty > 2 then
2192: LD_OWVAR 67
2196: PUSH
2197: LD_INT 2
2199: GREATER
2200: IFFALSE 2253
// usConstructList1 := usConstructList1 ^ [ [ us_heavy_tracked , engine_combustion , control_remote , us_gatling_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_gatling_gun ] ] ;
2202: LD_ADDR_EXP 18
2206: PUSH
2207: LD_EXP 18
2211: PUSH
2212: LD_INT 4
2214: PUSH
2215: LD_INT 1
2217: PUSH
2218: LD_INT 2
2220: PUSH
2221: LD_INT 4
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: LIST
2228: LIST
2229: PUSH
2230: LD_INT 3
2232: PUSH
2233: LD_INT 1
2235: PUSH
2236: LD_INT 2
2238: PUSH
2239: LD_INT 4
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: ADD
2252: ST_TO_ADDR
// for i := 1 to attackWave1 do
2253: LD_ADDR_VAR 0 1
2257: PUSH
2258: DOUBLE
2259: LD_INT 1
2261: DEC
2262: ST_TO_ADDR
2263: LD_EXP 10
2267: PUSH
2268: FOR_TO
2269: IFFALSE 2328
// usConstructList1 := usConstructList1 ^ [ [ us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ rand ( 1 , 3 ) ] ] ] ;
2271: LD_ADDR_EXP 18
2275: PUSH
2276: LD_EXP 18
2280: PUSH
2281: LD_INT 4
2283: PUSH
2284: LD_INT 1
2286: PUSH
2287: LD_INT 2
2289: PUSH
2290: LD_INT 4
2292: PUSH
2293: LD_INT 5
2295: PUSH
2296: LD_INT 6
2298: PUSH
2299: EMPTY
2300: LIST
2301: LIST
2302: LIST
2303: PUSH
2304: LD_INT 1
2306: PPUSH
2307: LD_INT 3
2309: PPUSH
2310: CALL_OW 12
2314: ARRAY
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: PUSH
2322: EMPTY
2323: LIST
2324: ADD
2325: ST_TO_ADDR
2326: GO 2268
2328: POP
2329: POP
// end ;
2330: PPOPN 1
2332: END
// export function SendUsAttack1 ; var i , tmp , path ; begin
2333: LD_INT 0
2335: PPUSH
2336: PPUSH
2337: PPUSH
2338: PPUSH
// attackWave1 := Inc ( attackWave1 ) ;
2339: LD_ADDR_EXP 10
2343: PUSH
2344: LD_EXP 10
2348: PPUSH
2349: CALL 74521 0 1
2353: ST_TO_ADDR
// if attackWave1 > 6 then
2354: LD_EXP 10
2358: PUSH
2359: LD_INT 6
2361: GREATER
2362: IFFALSE 2372
// attackWave1 := 6 ;
2364: LD_ADDR_EXP 10
2368: PUSH
2369: LD_INT 6
2371: ST_TO_ADDR
// tmp := usAttackVehicles1 ;
2372: LD_ADDR_VAR 0 3
2376: PUSH
2377: LD_EXP 22
2381: ST_TO_ADDR
// usAttackVehicles1 := [ ] ;
2382: LD_ADDR_EXP 22
2386: PUSH
2387: EMPTY
2388: ST_TO_ADDR
// path := [ [ [ 38 , 41 ] , [ 90 , 51 ] ] , [ [ 72 , 14 ] , [ 83 , 42 ] ] ] [ rand ( 1 , 2 ) ] ;
2389: LD_ADDR_VAR 0 4
2393: PUSH
2394: LD_INT 38
2396: PUSH
2397: LD_INT 41
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: PUSH
2404: LD_INT 90
2406: PUSH
2407: LD_INT 51
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: EMPTY
2415: LIST
2416: LIST
2417: PUSH
2418: LD_INT 72
2420: PUSH
2421: LD_INT 14
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: PUSH
2428: LD_INT 83
2430: PUSH
2431: LD_INT 42
2433: PUSH
2434: EMPTY
2435: LIST
2436: LIST
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: PUSH
2446: LD_INT 1
2448: PPUSH
2449: LD_INT 2
2451: PPUSH
2452: CALL_OW 12
2456: ARRAY
2457: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
2458: LD_INT 70
2460: PPUSH
2461: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
2465: LD_ADDR_VAR 0 3
2469: PUSH
2470: LD_VAR 0 3
2474: PPUSH
2475: LD_INT 50
2477: PUSH
2478: EMPTY
2479: LIST
2480: PPUSH
2481: CALL_OW 72
2485: ST_TO_ADDR
// for i in tmp do
2486: LD_ADDR_VAR 0 2
2490: PUSH
2491: LD_VAR 0 3
2495: PUSH
2496: FOR_IN
2497: IFFALSE 2515
// AgressiveMove ( i , path ) until not tmp ;
2499: LD_VAR 0 2
2503: PPUSH
2504: LD_VAR 0 4
2508: PPUSH
2509: CALL 75914 0 2
2513: GO 2496
2515: POP
2516: POP
2517: LD_VAR 0 3
2521: NOT
2522: IFFALSE 2458
// end ; end_of_file
2524: LD_VAR 0 1
2528: RET
// export function PrepareAttack ( area , n ) ; var i , un ; begin
2529: LD_INT 0
2531: PPUSH
2532: PPUSH
2533: PPUSH
// for i := 1 to n do
2534: LD_ADDR_VAR 0 4
2538: PUSH
2539: DOUBLE
2540: LD_INT 1
2542: DEC
2543: ST_TO_ADDR
2544: LD_VAR 0 2
2548: PUSH
2549: FOR_TO
2550: IFFALSE 2813
// begin uc_side := 6 ;
2552: LD_ADDR_OWVAR 20
2556: PUSH
2557: LD_INT 6
2559: ST_TO_ADDR
// uc_nation := 3 ;
2560: LD_ADDR_OWVAR 21
2564: PUSH
2565: LD_INT 3
2567: ST_TO_ADDR
// vc_chassis := [ ru_heavy_wheeled , ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 3 ) ] ;
2568: LD_ADDR_OWVAR 37
2572: PUSH
2573: LD_INT 23
2575: PUSH
2576: LD_INT 22
2578: PUSH
2579: LD_INT 23
2581: PUSH
2582: EMPTY
2583: LIST
2584: LIST
2585: LIST
2586: PUSH
2587: LD_INT 1
2589: PPUSH
2590: LD_INT 3
2592: PPUSH
2593: CALL_OW 12
2597: ARRAY
2598: ST_TO_ADDR
// vc_control := control_computer ;
2599: LD_ADDR_OWVAR 38
2603: PUSH
2604: LD_INT 3
2606: ST_TO_ADDR
// vc_engine := engine_combustion ;
2607: LD_ADDR_OWVAR 39
2611: PUSH
2612: LD_INT 1
2614: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , 3 ) ] ;
2615: LD_ADDR_OWVAR 40
2619: PUSH
2620: LD_INT 43
2622: PUSH
2623: LD_INT 44
2625: PUSH
2626: LD_INT 46
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: LIST
2633: PUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_INT 3
2639: PPUSH
2640: CALL_OW 12
2644: ARRAY
2645: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
2646: LD_OWVAR 40
2650: PUSH
2651: LD_INT 46
2653: EQUAL
2654: IFFALSE 2664
// vc_chassis := ru_heavy_wheeled ;
2656: LD_ADDR_OWVAR 37
2660: PUSH
2661: LD_INT 23
2663: ST_TO_ADDR
// vc_fuel_battery := 80 ;
2664: LD_ADDR_OWVAR 41
2668: PUSH
2669: LD_INT 80
2671: ST_TO_ADDR
// un := CreateVehicle ;
2672: LD_ADDR_VAR 0 5
2676: PUSH
2677: CALL_OW 45
2681: ST_TO_ADDR
// case area of eastArr :
2682: LD_VAR 0 1
2686: PUSH
2687: LD_INT 7
2689: DOUBLE
2690: EQUAL
2691: IFTRUE 2695
2693: GO 2751
2695: POP
// begin SetDir ( un , 4 ) ;
2696: LD_VAR 0 5
2700: PPUSH
2701: LD_INT 4
2703: PPUSH
2704: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
2708: LD_INT 35
2710: PPUSH
2711: CALL_OW 67
// until PlaceUnitArea ( un , area , false ) ;
2715: LD_VAR 0 5
2719: PPUSH
2720: LD_VAR 0 1
2724: PPUSH
2725: LD_INT 0
2727: PPUSH
2728: CALL_OW 49
2732: IFFALSE 2708
// ComMoveXY ( un , 79 , 33 ) ;
2734: LD_VAR 0 5
2738: PPUSH
2739: LD_INT 79
2741: PPUSH
2742: LD_INT 33
2744: PPUSH
2745: CALL_OW 111
// end ; southArr :
2749: GO 2804
2751: LD_INT 8
2753: DOUBLE
2754: EQUAL
2755: IFTRUE 2759
2757: GO 2803
2759: POP
// begin repeat wait ( 0 0$1 ) ;
2760: LD_INT 35
2762: PPUSH
2763: CALL_OW 67
// until PlaceUnitArea ( un , area , false ) ;
2767: LD_VAR 0 5
2771: PPUSH
2772: LD_VAR 0 1
2776: PPUSH
2777: LD_INT 0
2779: PPUSH
2780: CALL_OW 49
2784: IFFALSE 2760
// ComMoveXY ( un , 131 , 148 ) ;
2786: LD_VAR 0 5
2790: PPUSH
2791: LD_INT 131
2793: PPUSH
2794: LD_INT 148
2796: PPUSH
2797: CALL_OW 111
// end ; end ;
2801: GO 2804
2803: POP
// wait ( 0 0$02 ) ;
2804: LD_INT 70
2806: PPUSH
2807: CALL_OW 67
// end ;
2811: GO 2549
2813: POP
2814: POP
// end ;
2815: LD_VAR 0 3
2819: RET
// export function PrepareConvoy ( area , n ) ; var i , un ; begin
2820: LD_INT 0
2822: PPUSH
2823: PPUSH
2824: PPUSH
// for i := 1 to n do
2825: LD_ADDR_VAR 0 4
2829: PUSH
2830: DOUBLE
2831: LD_INT 1
2833: DEC
2834: ST_TO_ADDR
2835: LD_VAR 0 2
2839: PUSH
2840: FOR_TO
2841: IFFALSE 3067
// begin uc_side := 6 ;
2843: LD_ADDR_OWVAR 20
2847: PUSH
2848: LD_INT 6
2850: ST_TO_ADDR
// uc_nation := 3 ;
2851: LD_ADDR_OWVAR 21
2855: PUSH
2856: LD_INT 3
2858: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
2859: LD_INT 0
2861: PPUSH
2862: LD_INT 3
2864: PPUSH
2865: LD_INT 4
2867: PPUSH
2868: CALL_OW 380
// vc_chassis := ru_medium_tracked ;
2872: LD_ADDR_OWVAR 37
2876: PUSH
2877: LD_INT 22
2879: ST_TO_ADDR
// vc_control := control_manual ;
2880: LD_ADDR_OWVAR 38
2884: PUSH
2885: LD_INT 1
2887: ST_TO_ADDR
// vc_engine := engine_combustion ;
2888: LD_ADDR_OWVAR 39
2892: PUSH
2893: LD_INT 1
2895: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
2896: LD_ADDR_OWVAR 40
2900: PUSH
2901: LD_INT 51
2903: ST_TO_ADDR
// vc_fuel_battery := 50 ;
2904: LD_ADDR_OWVAR 41
2908: PUSH
2909: LD_INT 50
2911: ST_TO_ADDR
// un := CreateVehicle ;
2912: LD_ADDR_VAR 0 5
2916: PUSH
2917: CALL_OW 45
2921: ST_TO_ADDR
// case area of eastArr :
2922: LD_VAR 0 1
2926: PUSH
2927: LD_INT 7
2929: DOUBLE
2930: EQUAL
2931: IFTRUE 2935
2933: GO 2950
2935: POP
// SetDir ( un , 4 ) ; southArr :
2936: LD_VAR 0 5
2940: PPUSH
2941: LD_INT 4
2943: PPUSH
2944: CALL_OW 233
2948: GO 2974
2950: LD_INT 8
2952: DOUBLE
2953: EQUAL
2954: IFTRUE 2958
2956: GO 2973
2958: POP
// SetDir ( un , 5 ) ; end ;
2959: LD_VAR 0 5
2963: PPUSH
2964: LD_INT 5
2966: PPUSH
2967: CALL_OW 233
2971: GO 2974
2973: POP
// PlaceUnitArea ( un , area , false ) ;
2974: LD_VAR 0 5
2978: PPUSH
2979: LD_VAR 0 1
2983: PPUSH
2984: LD_INT 0
2986: PPUSH
2987: CALL_OW 49
// PlaceHumanInUnit ( CreateHuman , un ) ;
2991: CALL_OW 44
2995: PPUSH
2996: LD_VAR 0 5
3000: PPUSH
3001: CALL_OW 52
// SetCargo ( un , mat_cans , 100 ) ;
3005: LD_VAR 0 5
3009: PPUSH
3010: LD_INT 1
3012: PPUSH
3013: LD_INT 100
3015: PPUSH
3016: CALL_OW 290
// ComMoveXY ( un , 106 , 88 ) ;
3020: LD_VAR 0 5
3024: PPUSH
3025: LD_INT 106
3027: PPUSH
3028: LD_INT 88
3030: PPUSH
3031: CALL_OW 111
// AddComUnload ( un ) ;
3035: LD_VAR 0 5
3039: PPUSH
3040: CALL_OW 219
// AddComMoveToArea ( un , area ) ;
3044: LD_VAR 0 5
3048: PPUSH
3049: LD_VAR 0 1
3053: PPUSH
3054: CALL_OW 173
// wait ( 0 0$02 ) ;
3058: LD_INT 70
3060: PPUSH
3061: CALL_OW 67
// end ;
3065: GO 2840
3067: POP
3068: POP
// wait ( 0 0$05 ) ;
3069: LD_INT 175
3071: PPUSH
3072: CALL_OW 67
// while ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) ) do
3076: LD_INT 22
3078: PUSH
3079: LD_INT 6
3081: PUSH
3082: EMPTY
3083: LIST
3084: LIST
3085: PUSH
3086: LD_INT 34
3088: PUSH
3089: LD_INT 51
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: PPUSH
3100: CALL_OW 69
3104: IFFALSE 3309
// begin wait ( 0 0$01 ) ;
3106: LD_INT 35
3108: PPUSH
3109: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) do
3113: LD_ADDR_VAR 0 4
3117: PUSH
3118: LD_INT 22
3120: PUSH
3121: LD_INT 6
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: PUSH
3128: LD_INT 34
3130: PUSH
3131: LD_INT 51
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: PPUSH
3142: CALL_OW 69
3146: PUSH
3147: FOR_IN
3148: IFFALSE 3305
// begin if IsInArea ( i , playerBaseArea ) and GetSex ( IsDrivenBy ( i ) ) = sex_male and dialogTrans then
3150: LD_VAR 0 4
3154: PPUSH
3155: LD_INT 2
3157: PPUSH
3158: CALL_OW 308
3162: IFFALSE 3184
3164: PUSH
3165: LD_VAR 0 4
3169: PPUSH
3170: CALL_OW 311
3174: PPUSH
3175: CALL_OW 258
3179: PUSH
3180: LD_INT 1
3182: EQUAL
3183: AND
3184: IFFALSE 3192
3186: PUSH
3187: LD_EXP 5
3191: AND
3192: IFFALSE 3219
// begin Say ( IsDrivenBy ( i ) , Dtran ) ;
3194: LD_VAR 0 4
3198: PPUSH
3199: CALL_OW 311
3203: PPUSH
3204: LD_STRING Dtran
3206: PPUSH
3207: CALL_OW 88
// dialogTrans := false ;
3211: LD_ADDR_EXP 5
3215: PUSH
3216: LD_INT 0
3218: ST_TO_ADDR
// end ; if IsIdle ( i ) then
3219: LD_VAR 0 4
3223: PPUSH
3224: CALL_OW 316
3228: IFFALSE 3244
// ComMoveToArea ( i , area ) ;
3230: LD_VAR 0 4
3234: PPUSH
3235: LD_VAR 0 1
3239: PPUSH
3240: CALL_OW 113
// if IsInArea ( i , area ) and GetCargo ( i , mat_cans ) = 0 then
3244: LD_VAR 0 4
3248: PPUSH
3249: LD_VAR 0 1
3253: PPUSH
3254: CALL_OW 308
3258: IFFALSE 3278
3260: PUSH
3261: LD_VAR 0 4
3265: PPUSH
3266: LD_INT 1
3268: PPUSH
3269: CALL_OW 289
3273: PUSH
3274: LD_INT 0
3276: EQUAL
3277: AND
3278: IFFALSE 3303
// begin RemoveUnit ( IsDrivenBy ( i ) ) ;
3280: LD_VAR 0 4
3284: PPUSH
3285: CALL_OW 311
3289: PPUSH
3290: CALL_OW 64
// RemoveUnit ( i ) ;
3294: LD_VAR 0 4
3298: PPUSH
3299: CALL_OW 64
// end ; end ;
3303: GO 3147
3305: POP
3306: POP
// end ;
3307: GO 3076
// end ;
3309: LD_VAR 0 3
3313: RET
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) do var i , tmp ;
3314: LD_INT 22
3316: PUSH
3317: LD_INT 6
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PUSH
3324: LD_INT 21
3326: PUSH
3327: LD_INT 2
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: PUSH
3334: LD_INT 3
3336: PUSH
3337: LD_INT 34
3339: PUSH
3340: LD_INT 51
3342: PUSH
3343: EMPTY
3344: LIST
3345: LIST
3346: PUSH
3347: EMPTY
3348: LIST
3349: LIST
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: LIST
3355: PPUSH
3356: CALL_OW 69
3360: IFFALSE 3523
3362: GO 3364
3364: DISABLE
3365: LD_INT 0
3367: PPUSH
3368: PPUSH
// begin repeat wait ( 0 0$3 ) ;
3369: LD_INT 105
3371: PPUSH
3372: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) ;
3376: LD_ADDR_VAR 0 2
3380: PUSH
3381: LD_INT 22
3383: PUSH
3384: LD_INT 6
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PUSH
3391: LD_INT 21
3393: PUSH
3394: LD_INT 2
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: PUSH
3401: LD_INT 50
3403: PUSH
3404: EMPTY
3405: LIST
3406: PUSH
3407: LD_INT 3
3409: PUSH
3410: LD_INT 34
3412: PUSH
3413: LD_INT 51
3415: PUSH
3416: EMPTY
3417: LIST
3418: LIST
3419: PUSH
3420: EMPTY
3421: LIST
3422: LIST
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: ST_TO_ADDR
// for i in tmp do
3435: LD_ADDR_VAR 0 1
3439: PUSH
3440: LD_VAR 0 2
3444: PUSH
3445: FOR_IN
3446: IFFALSE 3513
// if not HasTask ( i ) and GetLives ( i ) > 250 then
3448: LD_VAR 0 1
3452: PPUSH
3453: CALL_OW 314
3457: NOT
3458: IFFALSE 3475
3460: PUSH
3461: LD_VAR 0 1
3465: PPUSH
3466: CALL_OW 256
3470: PUSH
3471: LD_INT 250
3473: GREATER
3474: AND
3475: IFFALSE 3511
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 6 ] ) , i ) ) ;
3477: LD_VAR 0 1
3481: PPUSH
3482: LD_INT 81
3484: PUSH
3485: LD_INT 6
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PPUSH
3492: CALL_OW 69
3496: PPUSH
3497: LD_VAR 0 1
3501: PPUSH
3502: CALL_OW 74
3506: PPUSH
3507: CALL_OW 115
3511: GO 3445
3513: POP
3514: POP
// until not tmp ;
3515: LD_VAR 0 2
3519: NOT
3520: IFFALSE 3369
// enable ;
3522: ENABLE
// end ; end_of_file
3523: PPOPN 2
3525: END
// export Commanders , Player , Gladkov , Davidov , Gorki , Stolypin , playerSquad , playerCom ; export function InitCommanders ( commander ) ; var i , skill , tmp , team , veh ; begin
3526: LD_INT 0
3528: PPUSH
3529: PPUSH
3530: PPUSH
3531: PPUSH
3532: PPUSH
3533: PPUSH
// uc_side := your_side ;
3534: LD_ADDR_OWVAR 20
3538: PUSH
3539: LD_OWVAR 2
3543: ST_TO_ADDR
// uc_nation := nation_russian ;
3544: LD_ADDR_OWVAR 21
3548: PUSH
3549: LD_INT 3
3551: ST_TO_ADDR
// Gladkov := NewCharacter ( Gladkov ) ;
3552: LD_ADDR_EXP 26
3556: PUSH
3557: LD_STRING Gladkov
3559: PPUSH
3560: CALL_OW 25
3564: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
3565: LD_ADDR_EXP 27
3569: PUSH
3570: LD_STRING Davidov
3572: PPUSH
3573: CALL_OW 25
3577: ST_TO_ADDR
// Gorki := NewCharacter ( Burlak ) ;
3578: LD_ADDR_EXP 28
3582: PUSH
3583: LD_STRING Burlak
3585: PPUSH
3586: CALL_OW 25
3590: ST_TO_ADDR
// Stolypin := NewCharacter ( Stolypin ) ;
3591: LD_ADDR_EXP 29
3595: PUSH
3596: LD_STRING Stolypin
3598: PPUSH
3599: CALL_OW 25
3603: ST_TO_ADDR
// commanders := [ Gladkov , Davidov , Gorki , Stolypin ] ;
3604: LD_ADDR_EXP 24
3608: PUSH
3609: LD_EXP 26
3613: PUSH
3614: LD_EXP 27
3618: PUSH
3619: LD_EXP 28
3623: PUSH
3624: LD_EXP 29
3628: PUSH
3629: EMPTY
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: ST_TO_ADDR
// playerCom := commanders [ commander ] ;
3635: LD_ADDR_EXP 31
3639: PUSH
3640: LD_EXP 24
3644: PUSH
3645: LD_VAR 0 1
3649: ARRAY
3650: ST_TO_ADDR
// team := [ ] ;
3651: LD_ADDR_VAR 0 6
3655: PUSH
3656: EMPTY
3657: ST_TO_ADDR
// skill := [ 4 , 3 , 3 ] [ Difficulty ] ;
3658: LD_ADDR_VAR 0 4
3662: PUSH
3663: LD_INT 4
3665: PUSH
3666: LD_INT 3
3668: PUSH
3669: LD_INT 3
3671: PUSH
3672: EMPTY
3673: LIST
3674: LIST
3675: LIST
3676: PUSH
3677: LD_OWVAR 67
3681: ARRAY
3682: ST_TO_ADDR
// uc_side := 3 ;
3683: LD_ADDR_OWVAR 20
3687: PUSH
3688: LD_INT 3
3690: ST_TO_ADDR
// uc_nation := 3 ;
3691: LD_ADDR_OWVAR 21
3695: PUSH
3696: LD_INT 3
3698: ST_TO_ADDR
// hc_gallery :=  ;
3699: LD_ADDR_OWVAR 33
3703: PUSH
3704: LD_STRING 
3706: ST_TO_ADDR
// hc_name :=  ;
3707: LD_ADDR_OWVAR 26
3711: PUSH
3712: LD_STRING 
3714: ST_TO_ADDR
// hc_importance := 0 ;
3715: LD_ADDR_OWVAR 32
3719: PUSH
3720: LD_INT 0
3722: ST_TO_ADDR
// case playerCom of Gladkov :
3723: LD_EXP 31
3727: PUSH
3728: LD_EXP 26
3732: DOUBLE
3733: EQUAL
3734: IFTRUE 3738
3736: GO 3891
3738: POP
// begin for i := 1 to 6 do
3739: LD_ADDR_VAR 0 3
3743: PUSH
3744: DOUBLE
3745: LD_INT 1
3747: DEC
3748: ST_TO_ADDR
3749: LD_INT 6
3751: PUSH
3752: FOR_TO
3753: IFFALSE 3796
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
3755: LD_INT 0
3757: PPUSH
3758: LD_INT 1
3760: PPUSH
3761: LD_VAR 0 4
3765: PUSH
3766: LD_INT 1
3768: PLUS
3769: PPUSH
3770: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
3774: LD_ADDR_VAR 0 6
3778: PUSH
3779: LD_VAR 0 6
3783: PPUSH
3784: CALL_OW 44
3788: PPUSH
3789: CALL 73148 0 2
3793: ST_TO_ADDR
// end ;
3794: GO 3752
3796: POP
3797: POP
// for i := 1 to 8 do
3798: LD_ADDR_VAR 0 3
3802: PUSH
3803: DOUBLE
3804: LD_INT 1
3806: DEC
3807: ST_TO_ADDR
3808: LD_INT 8
3810: PUSH
3811: FOR_TO
3812: IFFALSE 3861
// begin PrepareHuman ( false , ( i mod 3 ) + 2 , skill ) ;
3814: LD_INT 0
3816: PPUSH
3817: LD_VAR 0 3
3821: PUSH
3822: LD_INT 3
3824: MOD
3825: PUSH
3826: LD_INT 2
3828: PLUS
3829: PPUSH
3830: LD_VAR 0 4
3834: PPUSH
3835: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
3839: LD_ADDR_VAR 0 6
3843: PUSH
3844: LD_VAR 0 6
3848: PPUSH
3849: CALL_OW 44
3853: PPUSH
3854: CALL 73148 0 2
3858: ST_TO_ADDR
// end ;
3859: GO 3811
3861: POP
3862: POP
// SetTech ( tech_bazooka , 3 , state_enabled ) ;
3863: LD_INT 44
3865: PPUSH
3866: LD_INT 3
3868: PPUSH
3869: LD_INT 1
3871: PPUSH
3872: CALL_OW 322
// SetTech ( tech_advmet , 3 , state_enabled ) ;
3876: LD_INT 34
3878: PPUSH
3879: LD_INT 3
3881: PPUSH
3882: LD_INT 1
3884: PPUSH
3885: CALL_OW 322
// end ; Davidov :
3889: GO 4786
3891: LD_EXP 27
3895: DOUBLE
3896: EQUAL
3897: IFTRUE 3901
3899: GO 4202
3901: POP
// begin for i := 1 to 6 do
3902: LD_ADDR_VAR 0 3
3906: PUSH
3907: DOUBLE
3908: LD_INT 1
3910: DEC
3911: ST_TO_ADDR
3912: LD_INT 6
3914: PUSH
3915: FOR_TO
3916: IFFALSE 3959
// begin PrepareHuman ( false , 4 , skill + 1 ) ;
3918: LD_INT 0
3920: PPUSH
3921: LD_INT 4
3923: PPUSH
3924: LD_VAR 0 4
3928: PUSH
3929: LD_INT 1
3931: PLUS
3932: PPUSH
3933: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
3937: LD_ADDR_VAR 0 6
3941: PUSH
3942: LD_VAR 0 6
3946: PPUSH
3947: CALL_OW 44
3951: PPUSH
3952: CALL 73148 0 2
3956: ST_TO_ADDR
// end ;
3957: GO 3915
3959: POP
3960: POP
// for i := 1 to 8 do
3961: LD_ADDR_VAR 0 3
3965: PUSH
3966: DOUBLE
3967: LD_INT 1
3969: DEC
3970: ST_TO_ADDR
3971: LD_INT 8
3973: PUSH
3974: FOR_TO
3975: IFFALSE 4024
// begin PrepareHuman ( false , ( i mod 3 ) + 1 , skill ) ;
3977: LD_INT 0
3979: PPUSH
3980: LD_VAR 0 3
3984: PUSH
3985: LD_INT 3
3987: MOD
3988: PUSH
3989: LD_INT 1
3991: PLUS
3992: PPUSH
3993: LD_VAR 0 4
3997: PPUSH
3998: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
4002: LD_ADDR_VAR 0 6
4006: PUSH
4007: LD_VAR 0 6
4011: PPUSH
4012: CALL_OW 44
4016: PPUSH
4017: CALL 73148 0 2
4021: ST_TO_ADDR
// end ;
4022: GO 3974
4024: POP
4025: POP
// SetTech ( tech_advmet , 3 , state_enabled ) ;
4026: LD_INT 34
4028: PPUSH
4029: LD_INT 3
4031: PPUSH
4032: LD_INT 1
4034: PPUSH
4035: CALL_OW 322
// SetTech ( tech_ai , 3 , state_enabled ) ;
4039: LD_INT 32
4041: PPUSH
4042: LD_INT 3
4044: PPUSH
4045: LD_INT 1
4047: PPUSH
4048: CALL_OW 322
// SetTech ( tech_advai , 3 , state_enabled ) ;
4052: LD_INT 27
4054: PPUSH
4055: LD_INT 3
4057: PPUSH
4058: LD_INT 1
4060: PPUSH
4061: CALL_OW 322
// SetTech ( 30 , 3 , state_enabled ) ;
4065: LD_INT 30
4067: PPUSH
4068: LD_INT 3
4070: PPUSH
4071: LD_INT 1
4073: PPUSH
4074: CALL_OW 322
// SetTech ( 63 , 3 , state_enabled ) ;
4078: LD_INT 63
4080: PPUSH
4081: LD_INT 3
4083: PPUSH
4084: LD_INT 1
4086: PPUSH
4087: CALL_OW 322
// SetTech ( tech_comp1 , 3 , state_enabled ) ;
4091: LD_INT 57
4093: PPUSH
4094: LD_INT 3
4096: PPUSH
4097: LD_INT 1
4099: PPUSH
4100: CALL_OW 322
// SetTech ( tech_comp2 , 3 , state_enabled ) ;
4104: LD_INT 58
4106: PPUSH
4107: LD_INT 3
4109: PPUSH
4110: LD_INT 1
4112: PPUSH
4113: CALL_OW 322
// SetRestrict ( b_lab_full , 3 , state_enabled ) ;
4117: LD_INT 8
4119: PPUSH
4120: LD_INT 3
4122: PPUSH
4123: LD_INT 1
4125: PPUSH
4126: CALL_OW 324
// SetRestrict ( b_lab_computer , 3 , state_enabled ) ;
4130: LD_INT 12
4132: PPUSH
4133: LD_INT 3
4135: PPUSH
4136: LD_INT 1
4138: PPUSH
4139: CALL_OW 324
// SetRestrict ( b_lab_spacetime , 3 , state_enabled ) ;
4143: LD_INT 14
4145: PPUSH
4146: LD_INT 3
4148: PPUSH
4149: LD_INT 1
4151: PPUSH
4152: CALL_OW 324
// SetRestrict ( b_ext_computer , 3 , state_enabled ) ;
4156: LD_INT 24
4158: PPUSH
4159: LD_INT 3
4161: PPUSH
4162: LD_INT 1
4164: PPUSH
4165: CALL_OW 324
// SetRestrict ( b_turret , 3 , state_enabled ) ;
4169: LD_INT 33
4171: PPUSH
4172: LD_INT 3
4174: PPUSH
4175: LD_INT 1
4177: PPUSH
4178: CALL_OW 324
// SetResourceType ( GetBase ( playerDepot ) , 3 , 20 ) ;
4182: LD_INT 1
4184: PPUSH
4185: CALL_OW 274
4189: PPUSH
4190: LD_INT 3
4192: PPUSH
4193: LD_INT 20
4195: PPUSH
4196: CALL_OW 277
// end ; Gorki :
4200: GO 4786
4202: LD_EXP 28
4206: DOUBLE
4207: EQUAL
4208: IFTRUE 4212
4210: GO 4471
4212: POP
// begin for i := 1 to 6 do
4213: LD_ADDR_VAR 0 3
4217: PUSH
4218: DOUBLE
4219: LD_INT 1
4221: DEC
4222: ST_TO_ADDR
4223: LD_INT 6
4225: PUSH
4226: FOR_TO
4227: IFFALSE 4270
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
4229: LD_INT 0
4231: PPUSH
4232: LD_INT 3
4234: PPUSH
4235: LD_VAR 0 4
4239: PUSH
4240: LD_INT 1
4242: PLUS
4243: PPUSH
4244: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
4248: LD_ADDR_VAR 0 6
4252: PUSH
4253: LD_VAR 0 6
4257: PPUSH
4258: CALL_OW 44
4262: PPUSH
4263: CALL 73148 0 2
4267: ST_TO_ADDR
// end ;
4268: GO 4226
4270: POP
4271: POP
// for i := 1 to 8 do
4272: LD_ADDR_VAR 0 3
4276: PUSH
4277: DOUBLE
4278: LD_INT 1
4280: DEC
4281: ST_TO_ADDR
4282: LD_INT 8
4284: PUSH
4285: FOR_TO
4286: IFFALSE 4348
// begin PrepareHuman ( false , [ 1 , 2 , 4 ] [ Rand ( 1 , 3 ) ] , skill ) ;
4288: LD_INT 0
4290: PPUSH
4291: LD_INT 1
4293: PUSH
4294: LD_INT 2
4296: PUSH
4297: LD_INT 4
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: LIST
4304: PUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_INT 3
4310: PPUSH
4311: CALL_OW 12
4315: ARRAY
4316: PPUSH
4317: LD_VAR 0 4
4321: PPUSH
4322: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
4326: LD_ADDR_VAR 0 6
4330: PUSH
4331: LD_VAR 0 6
4335: PPUSH
4336: CALL_OW 44
4340: PPUSH
4341: CALL 73148 0 2
4345: ST_TO_ADDR
// end ;
4346: GO 4285
4348: POP
4349: POP
// SetTech ( tech_rocket , 3 , state_enabled ) ;
4350: LD_INT 40
4352: PPUSH
4353: LD_INT 3
4355: PPUSH
4356: LD_INT 1
4358: PPUSH
4359: CALL_OW 322
// SetTech ( tech_advmet , 3 , state_enabled ) ;
4363: LD_INT 34
4365: PPUSH
4366: LD_INT 3
4368: PPUSH
4369: LD_INT 1
4371: PPUSH
4372: CALL_OW 322
// SetRestrict ( b_ext_rocket , 3 , state_enabled ) ;
4376: LD_INT 18
4378: PPUSH
4379: LD_INT 3
4381: PPUSH
4382: LD_INT 1
4384: PPUSH
4385: CALL_OW 324
// vc_chassis := ru_medium_tracked ;
4389: LD_ADDR_OWVAR 37
4393: PUSH
4394: LD_INT 22
4396: ST_TO_ADDR
// vc_engine := engine_combustion ;
4397: LD_ADDR_OWVAR 39
4401: PUSH
4402: LD_INT 1
4404: ST_TO_ADDR
// vc_control := control_manual ;
4405: LD_ADDR_OWVAR 38
4409: PUSH
4410: LD_INT 1
4412: ST_TO_ADDR
// vc_weapon := ru_rocket_launcher ;
4413: LD_ADDR_OWVAR 40
4417: PUSH
4418: LD_INT 45
4420: ST_TO_ADDR
// vc_fuel_battery := 50 ;
4421: LD_ADDR_OWVAR 41
4425: PUSH
4426: LD_INT 50
4428: ST_TO_ADDR
// veh := CreateVehicle ;
4429: LD_ADDR_VAR 0 7
4433: PUSH
4434: CALL_OW 45
4438: ST_TO_ADDR
// SetMark ( veh , 1 ) ;
4439: LD_VAR 0 7
4443: PPUSH
4444: LD_INT 1
4446: PPUSH
4447: CALL_OW 242
// PlaceUnitXY ( veh , 107 , 83 , false ) ;
4451: LD_VAR 0 7
4455: PPUSH
4456: LD_INT 107
4458: PPUSH
4459: LD_INT 83
4461: PPUSH
4462: LD_INT 0
4464: PPUSH
4465: CALL_OW 48
// end ; Stolypin :
4469: GO 4786
4471: LD_EXP 29
4475: DOUBLE
4476: EQUAL
4477: IFTRUE 4481
4479: GO 4785
4481: POP
// begin for i := 1 to 6 do
4482: LD_ADDR_VAR 0 3
4486: PUSH
4487: DOUBLE
4488: LD_INT 1
4490: DEC
4491: ST_TO_ADDR
4492: LD_INT 6
4494: PUSH
4495: FOR_TO
4496: IFFALSE 4539
// begin PrepareHuman ( false , 2 , skill + 1 ) ;
4498: LD_INT 0
4500: PPUSH
4501: LD_INT 2
4503: PPUSH
4504: LD_VAR 0 4
4508: PUSH
4509: LD_INT 1
4511: PLUS
4512: PPUSH
4513: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
4517: LD_ADDR_VAR 0 6
4521: PUSH
4522: LD_VAR 0 6
4526: PPUSH
4527: CALL_OW 44
4531: PPUSH
4532: CALL 73148 0 2
4536: ST_TO_ADDR
// end ;
4537: GO 4495
4539: POP
4540: POP
// for i := 1 to 8 do
4541: LD_ADDR_VAR 0 3
4545: PUSH
4546: DOUBLE
4547: LD_INT 1
4549: DEC
4550: ST_TO_ADDR
4551: LD_INT 8
4553: PUSH
4554: FOR_TO
4555: IFFALSE 4617
// begin PrepareHuman ( false , [ 1 , 3 , 4 ] [ Rand ( 1 , 3 ) ] , skill ) ;
4557: LD_INT 0
4559: PPUSH
4560: LD_INT 1
4562: PUSH
4563: LD_INT 3
4565: PUSH
4566: LD_INT 4
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: LIST
4573: PUSH
4574: LD_INT 1
4576: PPUSH
4577: LD_INT 3
4579: PPUSH
4580: CALL_OW 12
4584: ARRAY
4585: PPUSH
4586: LD_VAR 0 4
4590: PPUSH
4591: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
4595: LD_ADDR_VAR 0 6
4599: PUSH
4600: LD_VAR 0 6
4604: PPUSH
4605: CALL_OW 44
4609: PPUSH
4610: CALL 73148 0 2
4614: ST_TO_ADDR
// end ;
4615: GO 4554
4617: POP
4618: POP
// SetTech ( tech_advmet , 3 , state_enabled ) ;
4619: LD_INT 34
4621: PPUSH
4622: LD_INT 3
4624: PPUSH
4625: LD_INT 1
4627: PPUSH
4628: CALL_OW 322
// vc_chassis := ru_medium_tracked ;
4632: LD_ADDR_OWVAR 37
4636: PUSH
4637: LD_INT 22
4639: ST_TO_ADDR
// vc_engine := engine_combustion ;
4640: LD_ADDR_OWVAR 39
4644: PUSH
4645: LD_INT 1
4647: ST_TO_ADDR
// vc_control := control_manual ;
4648: LD_ADDR_OWVAR 38
4652: PUSH
4653: LD_INT 1
4655: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
4656: LD_ADDR_OWVAR 40
4660: PUSH
4661: LD_INT 51
4663: ST_TO_ADDR
// vc_fuel_battery := 30 ;
4664: LD_ADDR_OWVAR 41
4668: PUSH
4669: LD_INT 30
4671: ST_TO_ADDR
// veh := CreateVehicle ;
4672: LD_ADDR_VAR 0 7
4676: PUSH
4677: CALL_OW 45
4681: ST_TO_ADDR
// SetCargo ( veh , 1 , 100 ) ;
4682: LD_VAR 0 7
4686: PPUSH
4687: LD_INT 1
4689: PPUSH
4690: LD_INT 100
4692: PPUSH
4693: CALL_OW 290
// PlaceUnitXY ( veh , 107 , 83 , false ) ;
4697: LD_VAR 0 7
4701: PPUSH
4702: LD_INT 107
4704: PPUSH
4705: LD_INT 83
4707: PPUSH
4708: LD_INT 0
4710: PPUSH
4711: CALL_OW 48
// vc_chassis := ru_medium_tracked ;
4715: LD_ADDR_OWVAR 37
4719: PUSH
4720: LD_INT 22
4722: ST_TO_ADDR
// vc_engine := engine_combustion ;
4723: LD_ADDR_OWVAR 39
4727: PUSH
4728: LD_INT 1
4730: ST_TO_ADDR
// vc_control := control_manual ;
4731: LD_ADDR_OWVAR 38
4735: PUSH
4736: LD_INT 1
4738: ST_TO_ADDR
// vc_weapon := ru_crane ;
4739: LD_ADDR_OWVAR 40
4743: PUSH
4744: LD_INT 52
4746: ST_TO_ADDR
// vc_fuel_battery := 30 ;
4747: LD_ADDR_OWVAR 41
4751: PUSH
4752: LD_INT 30
4754: ST_TO_ADDR
// veh := CreateVehicle ;
4755: LD_ADDR_VAR 0 7
4759: PUSH
4760: CALL_OW 45
4764: ST_TO_ADDR
// PlaceUnitXY ( veh , 115 , 96 , false ) ;
4765: LD_VAR 0 7
4769: PPUSH
4770: LD_INT 115
4772: PPUSH
4773: LD_INT 96
4775: PPUSH
4776: LD_INT 0
4778: PPUSH
4779: CALL_OW 48
// end ; end ;
4783: GO 4786
4785: POP
// if isTest then
4786: LD_EXP 1
4790: IFFALSE 4812
// tmp := ShrinkArray ( team , 7 ) else
4792: LD_ADDR_VAR 0 5
4796: PUSH
4797: LD_VAR 0 6
4801: PPUSH
4802: LD_INT 7
4804: PPUSH
4805: CALL 73463 0 2
4809: ST_TO_ADDR
4810: GO 4903
// tmp := CharacterSelection ( text , [ 9 , 8 , 7 ] [ Difficulty ] , [ 9 , 8 , 7 ] [ Difficulty ] , [ sel_not_hired , sel_change_class , sel_changeable ] ^ team , [ class_soldier , class_engineer , class_mechanic , class_scientistic ] ) ;
4812: LD_ADDR_VAR 0 5
4816: PUSH
4817: LD_STRING text
4819: PPUSH
4820: LD_INT 9
4822: PUSH
4823: LD_INT 8
4825: PUSH
4826: LD_INT 7
4828: PUSH
4829: EMPTY
4830: LIST
4831: LIST
4832: LIST
4833: PUSH
4834: LD_OWVAR 67
4838: ARRAY
4839: PPUSH
4840: LD_INT 9
4842: PUSH
4843: LD_INT 8
4845: PUSH
4846: LD_INT 7
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: LIST
4853: PUSH
4854: LD_OWVAR 67
4858: ARRAY
4859: PPUSH
4860: LD_INT -2
4862: PUSH
4863: LD_INT -5
4865: PUSH
4866: LD_INT -3
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: LIST
4873: PUSH
4874: LD_VAR 0 6
4878: ADD
4879: PPUSH
4880: LD_INT 1
4882: PUSH
4883: LD_INT 2
4885: PUSH
4886: LD_INT 3
4888: PUSH
4889: LD_INT 4
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: PPUSH
4898: CALL_OW 42
4902: ST_TO_ADDR
// playerSquad := tmp ;
4903: LD_ADDR_EXP 30
4907: PUSH
4908: LD_VAR 0 5
4912: ST_TO_ADDR
// SetDir ( playerCom , 4 ) ;
4913: LD_EXP 31
4917: PPUSH
4918: LD_INT 4
4920: PPUSH
4921: CALL_OW 233
// PlaceUnitArea ( playerCom , eastArr , false ) ;
4925: LD_EXP 31
4929: PPUSH
4930: LD_INT 7
4932: PPUSH
4933: LD_INT 0
4935: PPUSH
4936: CALL_OW 49
// ComHold ( playerCom ) ;
4940: LD_EXP 31
4944: PPUSH
4945: CALL_OW 140
// for i := 1 to [ 5 , 4 , 4 ] [ Difficulty ] do
4949: LD_ADDR_VAR 0 3
4953: PUSH
4954: DOUBLE
4955: LD_INT 1
4957: DEC
4958: ST_TO_ADDR
4959: LD_INT 5
4961: PUSH
4962: LD_INT 4
4964: PUSH
4965: LD_INT 4
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: LIST
4972: PUSH
4973: LD_OWVAR 67
4977: ARRAY
4978: PUSH
4979: FOR_TO
4980: IFFALSE 5046
// begin uc_side := 6 ;
4982: LD_ADDR_OWVAR 20
4986: PUSH
4987: LD_INT 6
4989: ST_TO_ADDR
// uc_nation := nation_russian ;
4990: LD_ADDR_OWVAR 21
4994: PUSH
4995: LD_INT 3
4997: ST_TO_ADDR
// PrepareHuman ( false , i mod 4 + 1 , skill ) ;
4998: LD_INT 0
5000: PPUSH
5001: LD_VAR 0 3
5005: PUSH
5006: LD_INT 4
5008: MOD
5009: PUSH
5010: LD_INT 1
5012: PLUS
5013: PPUSH
5014: LD_VAR 0 4
5018: PPUSH
5019: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 104 , 88 , 3 , false ) ;
5023: CALL_OW 44
5027: PPUSH
5028: LD_INT 104
5030: PPUSH
5031: LD_INT 88
5033: PPUSH
5034: LD_INT 3
5036: PPUSH
5037: LD_INT 0
5039: PPUSH
5040: CALL_OW 50
// end ;
5044: GO 4979
5046: POP
5047: POP
// end ;
5048: LD_VAR 0 2
5052: RET
// export Popov ; export function InitAction ; var commander ; begin
5053: LD_INT 0
5055: PPUSH
5056: PPUSH
// ChangeSideFog ( 6 , 3 ) ;
5057: LD_INT 6
5059: PPUSH
5060: LD_INT 3
5062: PPUSH
5063: CALL_OW 343
// CenterNowOnXY ( 1 , 1 ) ;
5067: LD_INT 1
5069: PPUSH
5070: LD_INT 1
5072: PPUSH
5073: CALL_OW 86
// uc_side := 6 ;
5077: LD_ADDR_OWVAR 20
5081: PUSH
5082: LD_INT 6
5084: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
5085: LD_ADDR_EXP 32
5089: PUSH
5090: LD_STRING Popov
5092: PPUSH
5093: CALL_OW 25
5097: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
5098: LD_ADDR_OWVAR 67
5102: PUSH
5103: LD_INT 0
5105: PPUSH
5106: CALL_OW 426
5110: ST_TO_ADDR
// if not Difficulty then
5111: LD_OWVAR 67
5115: NOT
5116: IFFALSE 5126
// Difficulty := 2 ;
5118: LD_ADDR_OWVAR 67
5122: PUSH
5123: LD_INT 2
5125: ST_TO_ADDR
// commander := GetMultiplayerSetting ( 1 ) ;
5126: LD_ADDR_VAR 0 2
5130: PUSH
5131: LD_INT 1
5133: PPUSH
5134: CALL_OW 426
5138: ST_TO_ADDR
// if not commander then
5139: LD_VAR 0 2
5143: NOT
5144: IFFALSE 5154
// commander := 1 ;
5146: LD_ADDR_VAR 0 2
5150: PUSH
5151: LD_INT 1
5153: ST_TO_ADDR
// InitCommanders ( commander ) ;
5154: LD_VAR 0 2
5158: PPUSH
5159: CALL 3526 0 1
// end ;
5163: LD_VAR 0 1
5167: RET
// every 0 0$03 do var i ;
5168: GO 5170
5170: DISABLE
5171: LD_INT 0
5173: PPUSH
// begin repeat wait ( rand ( 1 1$25 , 3 3$00 ) ) ;
5174: LD_INT 2975
5176: PPUSH
5177: LD_INT 6300
5179: PPUSH
5180: CALL_OW 12
5184: PPUSH
5185: CALL_OW 67
// for i := 1 to 2 do
5189: LD_ADDR_VAR 0 1
5193: PUSH
5194: DOUBLE
5195: LD_INT 1
5197: DEC
5198: ST_TO_ADDR
5199: LD_INT 2
5201: PUSH
5202: FOR_TO
5203: IFFALSE 5299
// begin repeat wait ( 0 0$3 ) ;
5205: LD_INT 105
5207: PPUSH
5208: CALL_OW 67
// until PlaceUnitArea ( playerSquad [ 1 ] , eastArr , false ) ;
5212: LD_EXP 30
5216: PUSH
5217: LD_INT 1
5219: ARRAY
5220: PPUSH
5221: LD_INT 7
5223: PPUSH
5224: LD_INT 0
5226: PPUSH
5227: CALL_OW 49
5231: IFFALSE 5205
// ComMoveXY ( playerSquad [ 1 ] , 107 , 88 ) ;
5233: LD_EXP 30
5237: PUSH
5238: LD_INT 1
5240: ARRAY
5241: PPUSH
5242: LD_INT 107
5244: PPUSH
5245: LD_INT 88
5247: PPUSH
5248: CALL_OW 111
// SetSide ( playerSquad [ 1 ] , 3 ) ;
5252: LD_EXP 30
5256: PUSH
5257: LD_INT 1
5259: ARRAY
5260: PPUSH
5261: LD_INT 3
5263: PPUSH
5264: CALL_OW 235
// playerSquad := Delete ( playerSquad , 1 ) ;
5268: LD_ADDR_EXP 30
5272: PUSH
5273: LD_EXP 30
5277: PPUSH
5278: LD_INT 1
5280: PPUSH
5281: CALL_OW 3
5285: ST_TO_ADDR
// if not playerSquad then
5286: LD_EXP 30
5290: NOT
5291: IFFALSE 5297
// exit ;
5293: POP
5294: POP
5295: GO 5308
// end ;
5297: GO 5202
5299: POP
5300: POP
// until not playerSquad ;
5301: LD_EXP 30
5305: NOT
5306: IFFALSE 5174
// end ; end_of_file
5308: PPOPN 1
5310: END
// export function Action ; var i ; begin
5311: LD_INT 0
5313: PPUSH
5314: PPUSH
// if not isTest then
5315: LD_EXP 1
5319: NOT
5320: IFFALSE 5329
// Query ( task ) ;
5322: LD_STRING task
5324: PPUSH
5325: CALL_OW 97
// PlaceSeeing ( 105 , 84 , 3 , - 30 ) ;
5329: LD_INT 105
5331: PPUSH
5332: LD_INT 84
5334: PPUSH
5335: LD_INT 3
5337: PPUSH
5338: LD_INT 30
5340: NEG
5341: PPUSH
5342: CALL_OW 330
// RemoveSeeing ( 105 , 84 , 3 ) ;
5346: LD_INT 105
5348: PPUSH
5349: LD_INT 84
5351: PPUSH
5352: LD_INT 3
5354: PPUSH
5355: CALL_OW 331
// InGameOn ;
5359: CALL_OW 8
// CenterNowOnXY ( 128 , 64 ) ;
5363: LD_INT 128
5365: PPUSH
5366: LD_INT 64
5368: PPUSH
5369: CALL_OW 86
// if isTest then
5373: LD_EXP 1
5377: IFFALSE 5387
// dialogue_skipped := true ;
5379: LD_ADDR_OWVAR 59
5383: PUSH
5384: LD_INT 1
5386: ST_TO_ADDR
// SayRadio ( Popov , DR1 ) ;
5387: LD_EXP 32
5391: PPUSH
5392: LD_STRING DR1
5394: PPUSH
5395: CALL_OW 94
// SayRadio ( Popov , DR2 ) ;
5399: LD_EXP 32
5403: PPUSH
5404: LD_STRING DR2
5406: PPUSH
5407: CALL_OW 94
// SayRadio ( Popov , DR3 ) ;
5411: LD_EXP 32
5415: PPUSH
5416: LD_STRING DR3
5418: PPUSH
5419: CALL_OW 94
// InGameOff ;
5423: CALL_OW 9
// ChangeMissionObjectives ( C1 ) ;
5427: LD_STRING C1
5429: PPUSH
5430: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
5434: LD_INT 35
5436: PPUSH
5437: CALL_OW 67
// until FilterUnitsInArea ( playerBaseArea , [ f_side , 3 ] ) ;
5441: LD_INT 2
5443: PPUSH
5444: LD_INT 22
5446: PUSH
5447: LD_INT 3
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: PPUSH
5454: CALL_OW 70
5458: IFFALSE 5434
// for i in FilterUnitsInArea ( playerBaseArea , [ f_side , 6 ] ) do
5460: LD_ADDR_VAR 0 2
5464: PUSH
5465: LD_INT 2
5467: PPUSH
5468: LD_INT 22
5470: PUSH
5471: LD_INT 6
5473: PUSH
5474: EMPTY
5475: LIST
5476: LIST
5477: PPUSH
5478: CALL_OW 70
5482: PUSH
5483: FOR_IN
5484: IFFALSE 5500
// SetSide ( i , 3 ) ;
5486: LD_VAR 0 2
5490: PPUSH
5491: LD_INT 3
5493: PPUSH
5494: CALL_OW 235
5498: GO 5483
5500: POP
5501: POP
// if not isTest then
5502: LD_EXP 1
5506: NOT
5507: IFFALSE 5516
// Query ( support ) ;
5509: LD_STRING support
5511: PPUSH
5512: CALL_OW 97
// SetArtifactUse ( 3 , art_use_exclamation , art_instant , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ) ;
5516: LD_INT 3
5518: PPUSH
5519: LD_INT 12
5521: PPUSH
5522: LD_INT 2
5524: PPUSH
5525: LD_INT 22
5527: PUSH
5528: LD_INT 3
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: PUSH
5535: LD_INT 30
5537: PUSH
5538: LD_INT 0
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: PPUSH
5549: CALL_OW 69
5553: PUSH
5554: LD_INT 1
5556: ARRAY
5557: PPUSH
5558: CALL_OW 468
// if playerCom = Stolypin then
5562: LD_EXP 31
5566: PUSH
5567: LD_EXP 29
5571: EQUAL
5572: IFFALSE 5601
// PrepareConvoy ( eastArr , [ 3 , 3 , 2 ] [ Difficulty ] ) ;
5574: LD_INT 7
5576: PPUSH
5577: LD_INT 3
5579: PUSH
5580: LD_INT 3
5582: PUSH
5583: LD_INT 2
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: LIST
5590: PUSH
5591: LD_OWVAR 67
5595: ARRAY
5596: PPUSH
5597: CALL 2820 0 2
// end ;
5601: LD_VAR 0 1
5605: RET
// every 0 0$01 trigger tick > [ 12 12$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] do var n ;
5606: LD_OWVAR 1
5610: PUSH
5611: LD_INT 25200
5613: PUSH
5614: LD_INT 23100
5616: PUSH
5617: LD_INT 21000
5619: PUSH
5620: EMPTY
5621: LIST
5622: LIST
5623: LIST
5624: PUSH
5625: LD_OWVAR 67
5629: ARRAY
5630: GREATER
5631: IFFALSE 5760
5633: GO 5635
5635: DISABLE
5636: LD_INT 0
5638: PPUSH
// begin n := [ 3 , 4 , 5 ] [ Difficulty ] ;
5639: LD_ADDR_VAR 0 1
5643: PUSH
5644: LD_INT 3
5646: PUSH
5647: LD_INT 4
5649: PUSH
5650: LD_INT 5
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: LIST
5657: PUSH
5658: LD_OWVAR 67
5662: ARRAY
5663: ST_TO_ADDR
// repeat wait ( rand ( 0 0$30 , 2 2$00 ) ) ;
5664: LD_INT 1050
5666: PPUSH
5667: LD_INT 4200
5669: PPUSH
5670: CALL_OW 12
5674: PPUSH
5675: CALL_OW 67
// SayRadio ( Popov , DR5 ) ;
5679: LD_EXP 32
5683: PPUSH
5684: LD_STRING DR5
5686: PPUSH
5687: CALL_OW 94
// PrepareAlfaAttack ( northArr , n ) ;
5691: LD_INT 9
5693: PPUSH
5694: LD_VAR 0 1
5698: PPUSH
5699: CALL 1231 0 2
// wait ( rand ( 4 4$00 , 6 6$00 ) ) ;
5703: LD_INT 8400
5705: PPUSH
5706: LD_INT 12600
5708: PPUSH
5709: CALL_OW 12
5713: PPUSH
5714: CALL_OW 67
// n := n + 1 ;
5718: LD_ADDR_VAR 0 1
5722: PUSH
5723: LD_VAR 0 1
5727: PUSH
5728: LD_INT 1
5730: PLUS
5731: ST_TO_ADDR
// if n > 12 then
5732: LD_VAR 0 1
5736: PUSH
5737: LD_INT 12
5739: GREATER
5740: IFFALSE 5750
// n := 12 ;
5742: LD_ADDR_VAR 0 1
5746: PUSH
5747: LD_INT 12
5749: ST_TO_ADDR
// until tick >= 120 120$00 ;
5750: LD_OWVAR 1
5754: PUSH
5755: LD_INT 252000
5757: GREATEREQUAL
5758: IFFALSE 5664
// end ;
5760: PPOPN 1
5762: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] ] ) = 0 do
5763: LD_INT 22
5765: PUSH
5766: LD_INT 1
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: PUSH
5773: LD_INT 50
5775: PUSH
5776: EMPTY
5777: LIST
5778: PUSH
5779: EMPTY
5780: LIST
5781: LIST
5782: PPUSH
5783: CALL_OW 69
5787: PUSH
5788: LD_INT 0
5790: EQUAL
5791: IFFALSE 5823
5793: PUSH
5794: LD_INT 22
5796: PUSH
5797: LD_INT 4
5799: PUSH
5800: EMPTY
5801: LIST
5802: LIST
5803: PUSH
5804: LD_INT 50
5806: PUSH
5807: EMPTY
5808: LIST
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: PPUSH
5814: CALL_OW 69
5818: PUSH
5819: LD_INT 0
5821: EQUAL
5822: AND
5823: IFFALSE 6129
5825: GO 5827
5827: DISABLE
// begin DialogueOn ;
5828: CALL_OW 6
// SayRadio ( Popov , DR7 ) ;
5832: LD_EXP 32
5836: PPUSH
5837: LD_STRING DR7
5839: PPUSH
5840: CALL_OW 94
// case playerCom of Gorki :
5844: LD_EXP 31
5848: PUSH
5849: LD_EXP 28
5853: DOUBLE
5854: EQUAL
5855: IFTRUE 5859
5857: GO 5869
5859: POP
// SetAchievement ( ACH_GORKI ) ; Stolypin :
5860: LD_STRING ACH_GORKI
5862: PPUSH
5863: CALL_OW 543
5867: GO 5930
5869: LD_EXP 29
5873: DOUBLE
5874: EQUAL
5875: IFTRUE 5879
5877: GO 5889
5879: POP
// SetAchievement ( ACH_STOLYP ) ; Davidov :
5880: LD_STRING ACH_STOLYP
5882: PPUSH
5883: CALL_OW 543
5887: GO 5930
5889: LD_EXP 27
5893: DOUBLE
5894: EQUAL
5895: IFTRUE 5899
5897: GO 5909
5899: POP
// SetAchievement ( ACH_DAVIDOV ) ; Gladkov :
5900: LD_STRING ACH_DAVIDOV
5902: PPUSH
5903: CALL_OW 543
5907: GO 5930
5909: LD_EXP 26
5913: DOUBLE
5914: EQUAL
5915: IFTRUE 5919
5917: GO 5929
5919: POP
// SetAchievement ( ACH_GLADKOV ) ; end ;
5920: LD_STRING ACH_GLADKOV
5922: PPUSH
5923: CALL_OW 543
5927: GO 5930
5929: POP
// if not callUsed then
5930: LD_EXP 2
5934: NOT
5935: IFFALSE 5944
// SetAchievement ( ACH_NOSUPP ) ;
5937: LD_STRING ACH_NOSUPP
5939: PPUSH
5940: CALL_OW 543
// if ( tick < [ 55 55$30 , 45 45$30 , 42 42$30 ] [ Difficulty ] ) then
5944: LD_OWVAR 1
5948: PUSH
5949: LD_INT 116550
5951: PUSH
5952: LD_INT 95550
5954: PUSH
5955: LD_INT 89250
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: LIST
5962: PUSH
5963: LD_OWVAR 67
5967: ARRAY
5968: LESS
5969: IFFALSE 5983
// AddMedal ( med1 , 1 ) else
5971: LD_STRING med1
5973: PPUSH
5974: LD_INT 1
5976: PPUSH
5977: CALL_OW 101
5981: GO 5994
// AddMedal ( med1 , - 1 ) ;
5983: LD_STRING med1
5985: PPUSH
5986: LD_INT 1
5988: NEG
5989: PPUSH
5990: CALL_OW 101
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) = 0 then
5994: LD_INT 81
5996: PUSH
5997: LD_INT 3
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: PUSH
6004: LD_INT 21
6006: PUSH
6007: LD_INT 3
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: PPUSH
6018: CALL_OW 69
6022: PUSH
6023: LD_INT 0
6025: EQUAL
6026: IFFALSE 6040
// AddMedal ( med3 , 1 ) else
6028: LD_STRING med3
6030: PPUSH
6031: LD_INT 1
6033: PPUSH
6034: CALL_OW 101
6038: GO 6051
// AddMedal ( med3 , - 1 ) ;
6040: LD_STRING med3
6042: PPUSH
6043: LD_INT 1
6045: NEG
6046: PPUSH
6047: CALL_OW 101
// if playerLoss = 0 then
6051: LD_EXP 6
6055: PUSH
6056: LD_INT 0
6058: EQUAL
6059: IFFALSE 6073
// AddMedal ( med2 , 1 ) else
6061: LD_STRING med2
6063: PPUSH
6064: LD_INT 1
6066: PPUSH
6067: CALL_OW 101
6071: GO 6118
// if playerLoss > 0 and playerLoss < 3 then
6073: LD_EXP 6
6077: PUSH
6078: LD_INT 0
6080: GREATER
6081: IFFALSE 6093
6083: PUSH
6084: LD_EXP 6
6088: PUSH
6089: LD_INT 3
6091: LESS
6092: AND
6093: IFFALSE 6107
// AddMedal ( med2 , 2 ) else
6095: LD_STRING med2
6097: PPUSH
6098: LD_INT 2
6100: PPUSH
6101: CALL_OW 101
6105: GO 6118
// AddMedal ( med2 , - 1 ) ;
6107: LD_STRING med2
6109: PPUSH
6110: LD_INT 1
6112: NEG
6113: PPUSH
6114: CALL_OW 101
// GiveMedals ( MAIN ) ;
6118: LD_STRING MAIN
6120: PPUSH
6121: CALL_OW 102
// YouWin ;
6125: CALL_OW 103
// end ;
6129: END
// every 0 0$01 trigger IsDead ( playerCom ) do
6130: LD_EXP 31
6134: PPUSH
6135: CALL_OW 301
6139: IFFALSE 6206
6141: GO 6143
6143: DISABLE
// begin if IsOk ( Jakes ) then
6144: LD_EXP 3
6148: PPUSH
6149: CALL_OW 302
6153: IFFALSE 6169
// SayRadio ( Jakes , DJ5 ) else
6155: LD_EXP 3
6159: PPUSH
6160: LD_STRING DJ5
6162: PPUSH
6163: CALL_OW 94
6167: GO 6192
// if IsOk ( Sylvia ) then
6169: LD_EXP 4
6173: PPUSH
6174: CALL_OW 302
6178: IFFALSE 6192
// SayRadio ( Sylvia , DS5 ) ;
6180: LD_EXP 4
6184: PPUSH
6185: LD_STRING DS5
6187: PPUSH
6188: CALL_OW 94
// wait ( 0 0$01 ) ;
6192: LD_INT 35
6194: PPUSH
6195: CALL_OW 67
// YouLost ( dead ) ;
6199: LD_STRING dead
6201: PPUSH
6202: CALL_OW 104
// end ;
6206: END
// every 0 0$01 trigger IsDead ( playerDepot ) and not isTest do
6207: LD_INT 1
6209: PPUSH
6210: CALL_OW 301
6214: IFFALSE 6223
6216: PUSH
6217: LD_EXP 1
6221: NOT
6222: AND
6223: IFFALSE 6290
6225: GO 6227
6227: DISABLE
// begin if IsOk ( Sylvia ) then
6228: LD_EXP 4
6232: PPUSH
6233: CALL_OW 302
6237: IFFALSE 6253
// SayRadio ( Sylvia , DS5 ) else
6239: LD_EXP 4
6243: PPUSH
6244: LD_STRING DS5
6246: PPUSH
6247: CALL_OW 94
6251: GO 6276
// if IsOk ( Jakes ) then
6253: LD_EXP 3
6257: PPUSH
6258: CALL_OW 302
6262: IFFALSE 6276
// SayRadio ( Jakes , DJ5 ) ;
6264: LD_EXP 3
6268: PPUSH
6269: LD_STRING DJ5
6271: PPUSH
6272: CALL_OW 94
// wait ( 0 0$01 ) ;
6276: LD_INT 35
6278: PPUSH
6279: CALL_OW 67
// YouLost ( depot ) ;
6283: LD_STRING depot
6285: PPUSH
6286: CALL_OW 104
// end ; end_of_file
6290: END
// on ArtifactUsed ( side , button_type , x , y ) do var side1 , side4 ;
6291: LD_INT 0
6293: PPUSH
6294: PPUSH
// begin if call and tick < 12 12$00 then
6295: LD_EXP 7
6299: IFFALSE 6311
6301: PUSH
6302: LD_OWVAR 1
6306: PUSH
6307: LD_INT 25200
6309: LESS
6310: AND
6311: IFFALSE 6479
// case query ( call1 ) of 1 :
6313: LD_STRING call1
6315: PPUSH
6316: CALL_OW 97
6320: PUSH
6321: LD_INT 1
6323: DOUBLE
6324: EQUAL
6325: IFTRUE 6329
6327: GO 6467
6329: POP
// begin callUsed := true ;
6330: LD_ADDR_EXP 2
6334: PUSH
6335: LD_INT 1
6337: ST_TO_ADDR
// SetArtifactUse ( 3 , art_use_exclamation , art_gray , playerDepot ) ;
6338: LD_INT 3
6340: PPUSH
6341: LD_INT 12
6343: PPUSH
6344: LD_INT 1
6346: PPUSH
6347: LD_INT 1
6349: PPUSH
6350: CALL_OW 468
// call := false ;
6354: LD_ADDR_EXP 7
6358: PUSH
6359: LD_INT 0
6361: ST_TO_ADDR
// SayRadio ( Popov , DR6 ) ;
6362: LD_EXP 32
6366: PPUSH
6367: LD_STRING DR6
6369: PPUSH
6370: CALL_OW 94
// wait ( rand ( 1 1$00 , 3 3$00 ) ) ;
6374: LD_INT 2100
6376: PPUSH
6377: LD_INT 6300
6379: PPUSH
6380: CALL_OW 12
6384: PPUSH
6385: CALL_OW 67
// PrepareConvoy ( [ eastArr , southArr ] [ rand ( 1 , 2 ) ] , rand ( 1 , 2 ) ) ;
6389: LD_INT 7
6391: PUSH
6392: LD_INT 8
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: PUSH
6399: LD_INT 1
6401: PPUSH
6402: LD_INT 2
6404: PPUSH
6405: CALL_OW 12
6409: ARRAY
6410: PPUSH
6411: LD_INT 1
6413: PPUSH
6414: LD_INT 2
6416: PPUSH
6417: CALL_OW 12
6421: PPUSH
6422: CALL 2820 0 2
// wait ( rand ( 6 6$00 , 8 8$00 ) ) ;
6426: LD_INT 12600
6428: PPUSH
6429: LD_INT 16800
6431: PPUSH
6432: CALL_OW 12
6436: PPUSH
6437: CALL_OW 67
// call := true ;
6441: LD_ADDR_EXP 7
6445: PUSH
6446: LD_INT 1
6448: ST_TO_ADDR
// SetArtifactUse ( 3 , art_use_exclamation , art_instant , playerDepot ) ;
6449: LD_INT 3
6451: PPUSH
6452: LD_INT 12
6454: PPUSH
6455: LD_INT 2
6457: PPUSH
6458: LD_INT 1
6460: PPUSH
6461: CALL_OW 468
// end ; 2 :
6465: GO 6479
6467: LD_INT 2
6469: DOUBLE
6470: EQUAL
6471: IFTRUE 6475
6473: GO 6478
6475: POP
// ; end ;
6476: GO 6479
6478: POP
// if call and tick >= 12 12$00 then
6479: LD_EXP 7
6483: IFFALSE 6495
6485: PUSH
6486: LD_OWVAR 1
6490: PUSH
6491: LD_INT 25200
6493: GREATEREQUAL
6494: AND
6495: IFFALSE 6942
// case query ( call2 ) of 1 :
6497: LD_STRING call2
6499: PPUSH
6500: CALL_OW 97
6504: PUSH
6505: LD_INT 1
6507: DOUBLE
6508: EQUAL
6509: IFTRUE 6513
6511: GO 6763
6513: POP
// begin callUsed := true ;
6514: LD_ADDR_EXP 2
6518: PUSH
6519: LD_INT 1
6521: ST_TO_ADDR
// call := false ;
6522: LD_ADDR_EXP 7
6526: PUSH
6527: LD_INT 0
6529: ST_TO_ADDR
// side1 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] ] ) ;
6530: LD_ADDR_VAR 0 5
6534: PUSH
6535: LD_INT 22
6537: PUSH
6538: LD_INT 1
6540: PUSH
6541: EMPTY
6542: LIST
6543: LIST
6544: PUSH
6545: LD_INT 50
6547: PUSH
6548: EMPTY
6549: LIST
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: PPUSH
6555: CALL_OW 69
6559: ST_TO_ADDR
// side4 := FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] ] ) ;
6560: LD_ADDR_VAR 0 6
6564: PUSH
6565: LD_INT 22
6567: PUSH
6568: LD_INT 4
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PUSH
6575: LD_INT 50
6577: PUSH
6578: EMPTY
6579: LIST
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: PPUSH
6585: CALL_OW 69
6589: ST_TO_ADDR
// if side1 and side4 then
6590: LD_VAR 0 5
6594: IFFALSE 6602
6596: PUSH
6597: LD_VAR 0 6
6601: AND
6602: IFFALSE 6652
// PrepareAttack ( [ eastArr , southArr ] [ rand ( 1 , 2 ) ] , [ 6 , 6 , 5 ] [ Difficulty ] ) else
6604: LD_INT 7
6606: PUSH
6607: LD_INT 8
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PUSH
6614: LD_INT 1
6616: PPUSH
6617: LD_INT 2
6619: PPUSH
6620: CALL_OW 12
6624: ARRAY
6625: PPUSH
6626: LD_INT 6
6628: PUSH
6629: LD_INT 6
6631: PUSH
6632: LD_INT 5
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: LIST
6639: PUSH
6640: LD_OWVAR 67
6644: ARRAY
6645: PPUSH
6646: CALL 2529 0 2
6650: GO 6722
// if not side1 then
6652: LD_VAR 0 5
6656: NOT
6657: IFFALSE 6688
// PrepareAttack ( southArr , [ 7 , 6 , 5 ] [ Difficulty ] ) else
6659: LD_INT 8
6661: PPUSH
6662: LD_INT 7
6664: PUSH
6665: LD_INT 6
6667: PUSH
6668: LD_INT 5
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: LIST
6675: PUSH
6676: LD_OWVAR 67
6680: ARRAY
6681: PPUSH
6682: CALL 2529 0 2
6686: GO 6722
// if not side4 then
6688: LD_VAR 0 6
6692: NOT
6693: IFFALSE 6722
// PrepareAttack ( eastArr , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
6695: LD_INT 7
6697: PPUSH
6698: LD_INT 6
6700: PUSH
6701: LD_INT 6
6703: PUSH
6704: LD_INT 5
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: LIST
6711: PUSH
6712: LD_OWVAR 67
6716: ARRAY
6717: PPUSH
6718: CALL 2529 0 2
// wait ( rand ( 5 5$00 , 8 8$00 ) ) ;
6722: LD_INT 10500
6724: PPUSH
6725: LD_INT 16800
6727: PPUSH
6728: CALL_OW 12
6732: PPUSH
6733: CALL_OW 67
// call := true ;
6737: LD_ADDR_EXP 7
6741: PUSH
6742: LD_INT 1
6744: ST_TO_ADDR
// SetArtifactUse ( 3 , art_use_exclamation , art_instant , playerDepot ) ;
6745: LD_INT 3
6747: PPUSH
6748: LD_INT 12
6750: PPUSH
6751: LD_INT 2
6753: PPUSH
6754: LD_INT 1
6756: PPUSH
6757: CALL_OW 468
// end ; 2 :
6761: GO 6942
6763: LD_INT 2
6765: DOUBLE
6766: EQUAL
6767: IFTRUE 6771
6769: GO 6930
6771: POP
// begin callUsed := true ;
6772: LD_ADDR_EXP 2
6776: PUSH
6777: LD_INT 1
6779: ST_TO_ADDR
// SetArtifactUse ( 3 , art_use_exclamation , art_gray , playerDepot ) ;
6780: LD_INT 3
6782: PPUSH
6783: LD_INT 12
6785: PPUSH
6786: LD_INT 1
6788: PPUSH
6789: LD_INT 1
6791: PPUSH
6792: CALL_OW 468
// call := false ;
6796: LD_ADDR_EXP 7
6800: PUSH
6801: LD_INT 0
6803: ST_TO_ADDR
// SayRadio ( Popov , DR6 ) ;
6804: LD_EXP 32
6808: PPUSH
6809: LD_STRING DR6
6811: PPUSH
6812: CALL_OW 94
// wait ( rand ( 1 1$00 , 3 3$00 ) ) ;
6816: LD_INT 2100
6818: PPUSH
6819: LD_INT 6300
6821: PPUSH
6822: CALL_OW 12
6826: PPUSH
6827: CALL_OW 67
// PrepareConvoy ( [ eastArr , southArr ] [ rand ( 1 , 2 ) ] , [ 3 , 2 , 2 ] [ Difficulty ] - rand ( 0 , 1 ) ) ;
6831: LD_INT 7
6833: PUSH
6834: LD_INT 8
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: PUSH
6841: LD_INT 1
6843: PPUSH
6844: LD_INT 2
6846: PPUSH
6847: CALL_OW 12
6851: ARRAY
6852: PPUSH
6853: LD_INT 3
6855: PUSH
6856: LD_INT 2
6858: PUSH
6859: LD_INT 2
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: LIST
6866: PUSH
6867: LD_OWVAR 67
6871: ARRAY
6872: PUSH
6873: LD_INT 0
6875: PPUSH
6876: LD_INT 1
6878: PPUSH
6879: CALL_OW 12
6883: MINUS
6884: PPUSH
6885: CALL 2820 0 2
// wait ( rand ( 6 6$00 , 8 8$00 ) ) ;
6889: LD_INT 12600
6891: PPUSH
6892: LD_INT 16800
6894: PPUSH
6895: CALL_OW 12
6899: PPUSH
6900: CALL_OW 67
// call := true ;
6904: LD_ADDR_EXP 7
6908: PUSH
6909: LD_INT 1
6911: ST_TO_ADDR
// SetArtifactUse ( 3 , art_use_exclamation , art_instant , playerDepot ) ;
6912: LD_INT 3
6914: PPUSH
6915: LD_INT 12
6917: PPUSH
6918: LD_INT 2
6920: PPUSH
6921: LD_INT 1
6923: PPUSH
6924: CALL_OW 468
// end ; 3 :
6928: GO 6942
6930: LD_INT 3
6932: DOUBLE
6933: EQUAL
6934: IFTRUE 6938
6936: GO 6941
6938: POP
// ; end ;
6939: GO 6942
6941: POP
// end ;
6942: PPOPN 6
6944: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6945: LD_VAR 0 1
6949: PPUSH
6950: CALL 29590 0 1
// end ;
6954: PPOPN 1
6956: END
// on VehicleConstructed ( vehicle , factory ) do var side ;
6957: LD_INT 0
6959: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
6960: LD_VAR 0 1
6964: PPUSH
6965: LD_VAR 0 2
6969: PPUSH
6970: CALL 29648 0 2
// side := GetSide ( vehicle ) ;
6974: LD_ADDR_VAR 0 3
6978: PUSH
6979: LD_VAR 0 1
6983: PPUSH
6984: CALL_OW 255
6988: ST_TO_ADDR
// if side = 1 then
6989: LD_VAR 0 3
6993: PUSH
6994: LD_INT 1
6996: EQUAL
6997: IFFALSE 7133
// begin usConstructList1 := Delete ( usConstructList1 , 1 ) ;
6999: LD_ADDR_EXP 18
7003: PUSH
7004: LD_EXP 18
7008: PPUSH
7009: LD_INT 1
7011: PPUSH
7012: CALL_OW 3
7016: ST_TO_ADDR
// if GetControl ( vehicle ) = control_manual then
7017: LD_VAR 0 1
7021: PPUSH
7022: CALL_OW 263
7026: PUSH
7027: LD_INT 1
7029: EQUAL
7030: IFFALSE 7071
// begin usVehicles1 := Join ( usVehicles1 , vehicle ) ;
7032: LD_ADDR_EXP 14
7036: PUSH
7037: LD_EXP 14
7041: PPUSH
7042: LD_VAR 0 1
7046: PPUSH
7047: CALL 73148 0 2
7051: ST_TO_ADDR
// SetTag ( IsDrivenBy ( vehicle ) , tMech ) ;
7052: LD_VAR 0 1
7056: PPUSH
7057: CALL_OW 311
7061: PPUSH
7062: LD_INT 7
7064: PPUSH
7065: CALL_OW 109
// end else
7069: GO 7133
// begin usAttackVehicles1 := Join ( usAttackVehicles1 , vehicle ) ;
7071: LD_ADDR_EXP 22
7075: PUSH
7076: LD_EXP 22
7080: PPUSH
7081: LD_VAR 0 1
7085: PPUSH
7086: CALL 73148 0 2
7090: ST_TO_ADDR
// if Count ( usAttackVehicles1 ) >= [ 3 , 5 , 7 ] [ Difficulty ] + attackWave1 then
7091: LD_EXP 22
7095: PPUSH
7096: CALL 37216 0 1
7100: PUSH
7101: LD_INT 3
7103: PUSH
7104: LD_INT 5
7106: PUSH
7107: LD_INT 7
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: PUSH
7115: LD_OWVAR 67
7119: ARRAY
7120: PUSH
7121: LD_EXP 10
7125: PLUS
7126: GREATEREQUAL
7127: IFFALSE 7133
// SendUsAttack1 ;
7129: CALL 2333 0 0
// end ; end ; if side = 4 then
7133: LD_VAR 0 3
7137: PUSH
7138: LD_INT 4
7140: EQUAL
7141: IFFALSE 7235
// begin usConstructList2 := Delete ( usConstructList2 , 1 ) ;
7143: LD_ADDR_EXP 19
7147: PUSH
7148: LD_EXP 19
7152: PPUSH
7153: LD_INT 1
7155: PPUSH
7156: CALL_OW 3
7160: ST_TO_ADDR
// if GetControl ( vehicle ) = control_manual then
7161: LD_VAR 0 1
7165: PPUSH
7166: CALL_OW 263
7170: PUSH
7171: LD_INT 1
7173: EQUAL
7174: IFFALSE 7215
// begin usVehicles2 := Join ( usVehicles2 , vehicle ) ;
7176: LD_ADDR_EXP 15
7180: PUSH
7181: LD_EXP 15
7185: PPUSH
7186: LD_VAR 0 1
7190: PPUSH
7191: CALL 73148 0 2
7195: ST_TO_ADDR
// SetTag ( IsDrivenBy ( vehicle ) , tMech ) ;
7196: LD_VAR 0 1
7200: PPUSH
7201: CALL_OW 311
7205: PPUSH
7206: LD_INT 7
7208: PPUSH
7209: CALL_OW 109
// end else
7213: GO 7235
// begin usAttackVehicles2 := Join ( usAttackVehicles2 , vehicle ) ;
7215: LD_ADDR_EXP 23
7219: PUSH
7220: LD_EXP 23
7224: PPUSH
7225: LD_VAR 0 1
7229: PPUSH
7230: CALL 73148 0 2
7234: ST_TO_ADDR
// end ; end ; end ;
7235: PPOPN 3
7237: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
7238: LD_VAR 0 1
7242: PPUSH
7243: CALL_OW 110
7247: PUSH
7248: LD_INT 7
7250: EQUAL
7251: IFFALSE 7265
// SetTag ( driver , 0 ) ;
7253: LD_VAR 0 1
7257: PPUSH
7258: LD_INT 0
7260: PPUSH
7261: CALL_OW 109
// end ;
7265: PPOPN 4
7267: END
// on EvacuateBuilding ( building , unit ) do begin if GetTag ( unit ) = tControlRemoteMech then
7268: LD_VAR 0 2
7272: PPUSH
7273: CALL_OW 110
7277: PUSH
7278: LD_INT 17
7280: EQUAL
7281: IFFALSE 7295
// SetTag ( unit , 0 ) ;
7283: LD_VAR 0 2
7287: PPUSH
7288: LD_INT 0
7290: PPUSH
7291: CALL_OW 109
// end ;
7295: PPOPN 2
7297: END
// on UpgradeComplete ( b ) do var side , btype ;
7298: LD_INT 0
7300: PPUSH
7301: PPUSH
// begin side := GetSide ( b ) ;
7302: LD_ADDR_VAR 0 2
7306: PUSH
7307: LD_VAR 0 1
7311: PPUSH
7312: CALL_OW 255
7316: ST_TO_ADDR
// btype := GetBType ( b ) ;
7317: LD_ADDR_VAR 0 3
7321: PUSH
7322: LD_VAR 0 1
7326: PPUSH
7327: CALL_OW 266
7331: ST_TO_ADDR
// if side = 1 then
7332: LD_VAR 0 2
7336: PUSH
7337: LD_INT 1
7339: EQUAL
7340: IFFALSE 7360
// begin usBuildingsToBuild1 := Delete ( usBuildingsToBuild1 , 1 ) ;
7342: LD_ADDR_EXP 20
7346: PUSH
7347: LD_EXP 20
7351: PPUSH
7352: LD_INT 1
7354: PPUSH
7355: CALL_OW 3
7359: ST_TO_ADDR
// end ; if side = 4 then
7360: LD_VAR 0 2
7364: PUSH
7365: LD_INT 4
7367: EQUAL
7368: IFFALSE 7388
// begin usBuildingsToBuild2 := Delete ( usBuildingsToBuild2 , 1 ) ;
7370: LD_ADDR_EXP 21
7374: PUSH
7375: LD_EXP 21
7379: PPUSH
7380: LD_INT 1
7382: PPUSH
7383: CALL_OW 3
7387: ST_TO_ADDR
// end ; end ;
7388: PPOPN 3
7390: END
// on ResearchComplete ( tech , lab ) do var side ;
7391: LD_INT 0
7393: PPUSH
// begin side := GetSide ( lab ) ;
7394: LD_ADDR_VAR 0 3
7398: PUSH
7399: LD_VAR 0 2
7403: PPUSH
7404: CALL_OW 255
7408: ST_TO_ADDR
// if side = 1 then
7409: LD_VAR 0 3
7413: PUSH
7414: LD_INT 1
7416: EQUAL
7417: IFFALSE 7435
// usTechs1 := usTechs1 diff tech ;
7419: LD_ADDR_EXP 16
7423: PUSH
7424: LD_EXP 16
7428: PUSH
7429: LD_VAR 0 1
7433: DIFF
7434: ST_TO_ADDR
// if side = 4 then
7435: LD_VAR 0 3
7439: PUSH
7440: LD_INT 4
7442: EQUAL
7443: IFFALSE 7461
// usTechs2 := usTechs2 diff tech ;
7445: LD_ADDR_EXP 17
7449: PUSH
7450: LD_EXP 17
7454: PUSH
7455: LD_VAR 0 1
7459: DIFF
7460: ST_TO_ADDR
// end ;
7461: PPOPN 3
7463: END
// on BuildingComplete ( b ) do var side , btype ;
7464: LD_INT 0
7466: PPUSH
7467: PPUSH
// begin side := GetSide ( b ) ;
7468: LD_ADDR_VAR 0 2
7472: PUSH
7473: LD_VAR 0 1
7477: PPUSH
7478: CALL_OW 255
7482: ST_TO_ADDR
// btype := GetBType ( b ) ;
7483: LD_ADDR_VAR 0 3
7487: PUSH
7488: LD_VAR 0 1
7492: PPUSH
7493: CALL_OW 266
7497: ST_TO_ADDR
// if side = 1 then
7498: LD_VAR 0 2
7502: PUSH
7503: LD_INT 1
7505: EQUAL
7506: IFFALSE 7526
// usBuildingsToBuild1 := Delete ( usBuildingsToBuild1 , 1 ) ;
7508: LD_ADDR_EXP 20
7512: PUSH
7513: LD_EXP 20
7517: PPUSH
7518: LD_INT 1
7520: PPUSH
7521: CALL_OW 3
7525: ST_TO_ADDR
// if side = 4 then
7526: LD_VAR 0 2
7530: PUSH
7531: LD_INT 4
7533: EQUAL
7534: IFFALSE 7554
// usBuildingsToBuild2 := Delete ( usBuildingsToBuild2 , 1 ) ;
7536: LD_ADDR_EXP 21
7540: PUSH
7541: LD_EXP 21
7545: PPUSH
7546: LD_INT 1
7548: PPUSH
7549: CALL_OW 3
7553: ST_TO_ADDR
// end ;
7554: PPOPN 3
7556: END
// on VehicleCaptured ( newId , oldId , oldSide , driver ) do begin if oldSide = 1 then
7557: LD_VAR 0 3
7561: PUSH
7562: LD_INT 1
7564: EQUAL
7565: IFFALSE 7613
// begin if oldId in usVehicles1 then
7567: LD_VAR 0 2
7571: PUSH
7572: LD_EXP 14
7576: IN
7577: IFFALSE 7597
// begin usVehicles1 := usVehicles1 diff oldId ;
7579: LD_ADDR_EXP 14
7583: PUSH
7584: LD_EXP 14
7588: PUSH
7589: LD_VAR 0 2
7593: DIFF
7594: ST_TO_ADDR
// end else
7595: GO 7613
// begin usAttackVehicles1 := usAttackVehicles1 diff oldId ;
7597: LD_ADDR_EXP 22
7601: PUSH
7602: LD_EXP 22
7606: PUSH
7607: LD_VAR 0 2
7611: DIFF
7612: ST_TO_ADDR
// end ; end ; if oldSide = 4 then
7613: LD_VAR 0 3
7617: PUSH
7618: LD_INT 4
7620: EQUAL
7621: IFFALSE 7669
// begin if oldId in usVehicles2 then
7623: LD_VAR 0 2
7627: PUSH
7628: LD_EXP 15
7632: IN
7633: IFFALSE 7653
// begin usVehicles2 := usVehicles2 diff oldId ;
7635: LD_ADDR_EXP 15
7639: PUSH
7640: LD_EXP 15
7644: PUSH
7645: LD_VAR 0 2
7649: DIFF
7650: ST_TO_ADDR
// end else
7651: GO 7669
// begin usAttackVehicles2 := usAttackVehicles2 diff oldId ;
7653: LD_ADDR_EXP 23
7657: PUSH
7658: LD_EXP 23
7662: PUSH
7663: LD_VAR 0 2
7667: DIFF
7668: ST_TO_ADDR
// end ; end ; end ;
7669: PPOPN 4
7671: END
// on ClassChanged ( un , oldClass , newClass ) do var tag ;
7672: LD_INT 0
7674: PPUSH
// begin tag := GetTag ( un ) ;
7675: LD_ADDR_VAR 0 4
7679: PUSH
7680: LD_VAR 0 1
7684: PPUSH
7685: CALL_OW 110
7689: ST_TO_ADDR
// if GetSide ( un ) in [ 1 , 4 ] then
7690: LD_VAR 0 1
7694: PPUSH
7695: CALL_OW 255
7699: PUSH
7700: LD_INT 1
7702: PUSH
7703: LD_INT 4
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: IN
7710: IFFALSE 7741
// if tag in [ tWannaBeMech , tWannaBeSold ] then
7712: LD_VAR 0 4
7716: PUSH
7717: LD_INT 14
7719: PUSH
7720: LD_INT 16
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: IN
7727: IFFALSE 7741
// SetTag ( un , 0 ) ;
7729: LD_VAR 0 1
7733: PPUSH
7734: LD_INT 0
7736: PPUSH
7737: CALL_OW 109
// end ; end_of_file
7741: PPOPN 4
7743: END
// export function BaseScript ( side , area , cratesArea , innerArea , outerArea , forces , vehicles , techs , constructList , buildingsToBuild , healPoint , parkingPoint , allowToPatrol ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , drivers , hurtUnits , enemy , vehicles2 , ct , cranes , barracks , enemyInBase , enemyOuterBase , empty , fac , emptyTowers , weapon , depot , enemySide ; begin
7744: LD_INT 0
7746: PPUSH
7747: PPUSH
7748: PPUSH
7749: PPUSH
7750: PPUSH
7751: PPUSH
7752: PPUSH
7753: PPUSH
7754: PPUSH
7755: PPUSH
7756: PPUSH
7757: PPUSH
7758: PPUSH
7759: PPUSH
7760: PPUSH
7761: PPUSH
7762: PPUSH
7763: PPUSH
7764: PPUSH
7765: PPUSH
7766: PPUSH
7767: PPUSH
7768: PPUSH
7769: PPUSH
7770: PPUSH
7771: PPUSH
7772: PPUSH
// enable ;
7773: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
7774: LD_ADDR_VAR 0 16
7778: PUSH
7779: LD_INT 81
7781: PUSH
7782: LD_VAR 0 1
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PPUSH
7791: CALL_OW 69
7795: ST_TO_ADDR
// if tmp then
7796: LD_VAR 0 16
7800: IFFALSE 7821
// enemySide := GetSide ( tmp [ 1 ] ) ;
7802: LD_ADDR_VAR 0 40
7806: PUSH
7807: LD_VAR 0 16
7811: PUSH
7812: LD_INT 1
7814: ARRAY
7815: PPUSH
7816: CALL_OW 255
7820: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( innerArea , [ f_enemy , side ] ) ;
7821: LD_ADDR_VAR 0 33
7825: PUSH
7826: LD_VAR 0 4
7830: PPUSH
7831: LD_INT 81
7833: PUSH
7834: LD_VAR 0 1
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: PPUSH
7843: CALL_OW 70
7847: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
7848: LD_ADDR_VAR 0 34
7852: PUSH
7853: LD_VAR 0 5
7857: PPUSH
7858: LD_INT 81
7860: PUSH
7861: LD_VAR 0 1
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PPUSH
7870: CALL_OW 70
7874: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7875: LD_ADDR_VAR 0 39
7879: PUSH
7880: LD_VAR 0 2
7884: PPUSH
7885: LD_INT 22
7887: PUSH
7888: LD_VAR 0 1
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: LD_INT 2
7899: PUSH
7900: LD_INT 30
7902: PUSH
7903: LD_INT 0
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: PUSH
7910: LD_INT 30
7912: PUSH
7913: LD_INT 1
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: LIST
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PPUSH
7929: CALL_OW 70
7933: ST_TO_ADDR
// if depot then
7934: LD_VAR 0 39
7938: IFFALSE 7954
// depot := depot [ 1 ] ;
7940: LD_ADDR_VAR 0 39
7944: PUSH
7945: LD_VAR 0 39
7949: PUSH
7950: LD_INT 1
7952: ARRAY
7953: ST_TO_ADDR
// fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7954: LD_ADDR_VAR 0 36
7958: PUSH
7959: LD_VAR 0 2
7963: PPUSH
7964: LD_INT 22
7966: PUSH
7967: LD_VAR 0 1
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: PUSH
7976: LD_INT 30
7978: PUSH
7979: LD_INT 3
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: PUSH
7986: LD_INT 50
7988: PUSH
7989: EMPTY
7990: LIST
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: LIST
7996: PPUSH
7997: CALL_OW 70
8001: ST_TO_ADDR
// barracks := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
8002: LD_ADDR_VAR 0 32
8006: PUSH
8007: LD_VAR 0 2
8011: PPUSH
8012: LD_INT 22
8014: PUSH
8015: LD_VAR 0 1
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PUSH
8024: LD_INT 2
8026: PUSH
8027: LD_INT 30
8029: PUSH
8030: LD_INT 4
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PUSH
8037: LD_INT 30
8039: PUSH
8040: LD_INT 5
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: LIST
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: PPUSH
8056: CALL_OW 70
8060: ST_TO_ADDR
// if Count ( techs ) then
8061: LD_VAR 0 8
8065: PPUSH
8066: CALL 37216 0 1
8070: IFFALSE 8231
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
8072: LD_ADDR_VAR 0 18
8076: PUSH
8077: LD_VAR 0 2
8081: PPUSH
8082: LD_INT 22
8084: PUSH
8085: LD_VAR 0 1
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: PUSH
8094: LD_INT 50
8096: PUSH
8097: EMPTY
8098: LIST
8099: PUSH
8100: LD_INT 2
8102: PUSH
8103: LD_INT 30
8105: PUSH
8106: LD_INT 6
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: PUSH
8113: LD_INT 30
8115: PUSH
8116: LD_INT 7
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: PUSH
8123: LD_INT 30
8125: PUSH
8126: LD_INT 8
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: LIST
8143: PPUSH
8144: CALL_OW 70
8148: ST_TO_ADDR
// if lab then
8149: LD_VAR 0 18
8153: IFFALSE 8229
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
8155: LD_VAR 0 18
8159: PUSH
8160: LD_INT 1
8162: ARRAY
8163: PPUSH
8164: CALL_OW 461
8168: PUSH
8169: LD_INT 2
8171: EQUAL
8172: IFFALSE 8229
// begin for i in techs do
8174: LD_ADDR_VAR 0 15
8178: PUSH
8179: LD_VAR 0 8
8183: PUSH
8184: FOR_IN
8185: IFFALSE 8227
// if CanBeResearched ( lab [ 1 ] , i ) then
8187: LD_VAR 0 18
8191: PUSH
8192: LD_INT 1
8194: ARRAY
8195: PPUSH
8196: LD_VAR 0 15
8200: PPUSH
8201: CALL_OW 430
8205: IFFALSE 8225
// begin AddComResearch ( lab [ 1 ] , i ) ;
8207: LD_VAR 0 18
8211: PUSH
8212: LD_INT 1
8214: ARRAY
8215: PPUSH
8216: LD_VAR 0 15
8220: PPUSH
8221: CALL_OW 184
// end ;
8225: GO 8184
8227: POP
8228: POP
// end ; end ; end else
8229: GO 8811
// if UnitFilter ( fac , [ f_not , [ f_full ] ] ) and Count ( UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_tag , 0 ] , [ f_class , 4 ] ] ) ) > 2 then
8231: LD_VAR 0 36
8235: PPUSH
8236: LD_INT 3
8238: PUSH
8239: LD_INT 62
8241: PUSH
8242: EMPTY
8243: LIST
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PPUSH
8249: CALL_OW 72
8253: IFFALSE 8313
8255: PUSH
8256: LD_VAR 0 6
8260: PPUSH
8261: LD_INT 3
8263: PUSH
8264: LD_INT 60
8266: PUSH
8267: EMPTY
8268: LIST
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PUSH
8274: LD_INT 120
8276: PUSH
8277: LD_INT 0
8279: PUSH
8280: EMPTY
8281: LIST
8282: LIST
8283: PUSH
8284: LD_INT 25
8286: PUSH
8287: LD_INT 4
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: LIST
8298: PPUSH
8299: CALL_OW 72
8303: PPUSH
8304: CALL 37216 0 1
8308: PUSH
8309: LD_INT 2
8311: GREATER
8312: AND
8313: IFFALSE 8522
// begin tmp := UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_tag , 0 ] , [ f_class , 4 ] ] ) ;
8315: LD_ADDR_VAR 0 16
8319: PUSH
8320: LD_VAR 0 6
8324: PPUSH
8325: LD_INT 3
8327: PUSH
8328: LD_INT 60
8330: PUSH
8331: EMPTY
8332: LIST
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: PUSH
8338: LD_INT 120
8340: PUSH
8341: LD_INT 0
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PUSH
8348: LD_INT 25
8350: PUSH
8351: LD_INT 4
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: LIST
8362: PPUSH
8363: CALL_OW 72
8367: ST_TO_ADDR
// for i := tmp downto 2 do
8368: LD_ADDR_VAR 0 15
8372: PUSH
8373: DOUBLE
8374: LD_VAR 0 16
8378: INC
8379: ST_TO_ADDR
8380: LD_INT 2
8382: PUSH
8383: FOR_DOWNTO
8384: IFFALSE 8518
// begin if Count ( UnitsInside ( fac [ 1 ] ) ) + Count ( UnitFilter ( forces , [ f_tag , tWannaBeMech ] ) ) = 6 then
8386: LD_VAR 0 36
8390: PUSH
8391: LD_INT 1
8393: ARRAY
8394: PPUSH
8395: CALL_OW 313
8399: PPUSH
8400: CALL 37216 0 1
8404: PUSH
8405: LD_VAR 0 6
8409: PPUSH
8410: LD_INT 120
8412: PUSH
8413: LD_INT 14
8415: PUSH
8416: EMPTY
8417: LIST
8418: LIST
8419: PPUSH
8420: CALL_OW 72
8424: PPUSH
8425: CALL 37216 0 1
8429: PLUS
8430: PUSH
8431: LD_INT 6
8433: EQUAL
8434: IFFALSE 8438
// break ;
8436: GO 8518
// sci := tmp [ i ] ;
8438: LD_ADDR_VAR 0 24
8442: PUSH
8443: LD_VAR 0 16
8447: PUSH
8448: LD_VAR 0 15
8452: ARRAY
8453: ST_TO_ADDR
// SetTag ( sci , tWannaBeMech ) ;
8454: LD_VAR 0 24
8458: PPUSH
8459: LD_INT 14
8461: PPUSH
8462: CALL_OW 109
// if IsInUnit ( sci ) then
8466: LD_VAR 0 24
8470: PPUSH
8471: CALL_OW 310
8475: IFFALSE 8486
// ComExitBuilding ( sci ) ;
8477: LD_VAR 0 24
8481: PPUSH
8482: CALL_OW 122
// AddComEnterUnit ( sci , fac [ 1 ] ) ;
8486: LD_VAR 0 24
8490: PPUSH
8491: LD_VAR 0 36
8495: PUSH
8496: LD_INT 1
8498: ARRAY
8499: PPUSH
8500: CALL_OW 180
// AddComChangeProfession ( sci , class_mechanic ) ;
8504: LD_VAR 0 24
8508: PPUSH
8509: LD_INT 3
8511: PPUSH
8512: CALL_OW 183
// end ;
8516: GO 8383
8518: POP
8519: POP
// end else
8520: GO 8811
// if UnitFilter ( barracks , [ f_not , [ f_full ] ] ) and Count ( UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_tag , 0 ] , [ f_class , 4 ] ] ) ) > 2 then
8522: LD_VAR 0 32
8526: PPUSH
8527: LD_INT 3
8529: PUSH
8530: LD_INT 62
8532: PUSH
8533: EMPTY
8534: LIST
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: PPUSH
8540: CALL_OW 72
8544: IFFALSE 8604
8546: PUSH
8547: LD_VAR 0 6
8551: PPUSH
8552: LD_INT 3
8554: PUSH
8555: LD_INT 60
8557: PUSH
8558: EMPTY
8559: LIST
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: PUSH
8565: LD_INT 120
8567: PUSH
8568: LD_INT 0
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: PUSH
8575: LD_INT 25
8577: PUSH
8578: LD_INT 4
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: LIST
8589: PPUSH
8590: CALL_OW 72
8594: PPUSH
8595: CALL 37216 0 1
8599: PUSH
8600: LD_INT 2
8602: GREATER
8603: AND
8604: IFFALSE 8811
// begin tmp := UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_tag , 0 ] , [ f_class , 4 ] ] ) ;
8606: LD_ADDR_VAR 0 16
8610: PUSH
8611: LD_VAR 0 6
8615: PPUSH
8616: LD_INT 3
8618: PUSH
8619: LD_INT 60
8621: PUSH
8622: EMPTY
8623: LIST
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: PUSH
8629: LD_INT 120
8631: PUSH
8632: LD_INT 0
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: PUSH
8639: LD_INT 25
8641: PUSH
8642: LD_INT 4
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: LIST
8653: PPUSH
8654: CALL_OW 72
8658: ST_TO_ADDR
// for i := tmp downto 2 do
8659: LD_ADDR_VAR 0 15
8663: PUSH
8664: DOUBLE
8665: LD_VAR 0 16
8669: INC
8670: ST_TO_ADDR
8671: LD_INT 2
8673: PUSH
8674: FOR_DOWNTO
8675: IFFALSE 8809
// begin if Count ( UnitsInside ( barracks [ 1 ] ) ) + Count ( UnitFilter ( forces , [ f_tag , tWannaBeSold ] ) ) = 6 then
8677: LD_VAR 0 32
8681: PUSH
8682: LD_INT 1
8684: ARRAY
8685: PPUSH
8686: CALL_OW 313
8690: PPUSH
8691: CALL 37216 0 1
8695: PUSH
8696: LD_VAR 0 6
8700: PPUSH
8701: LD_INT 120
8703: PUSH
8704: LD_INT 16
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: PPUSH
8711: CALL_OW 72
8715: PPUSH
8716: CALL 37216 0 1
8720: PLUS
8721: PUSH
8722: LD_INT 6
8724: EQUAL
8725: IFFALSE 8729
// break ;
8727: GO 8809
// sci := tmp [ i ] ;
8729: LD_ADDR_VAR 0 24
8733: PUSH
8734: LD_VAR 0 16
8738: PUSH
8739: LD_VAR 0 15
8743: ARRAY
8744: ST_TO_ADDR
// SetTag ( sci , tWannaBeSold ) ;
8745: LD_VAR 0 24
8749: PPUSH
8750: LD_INT 16
8752: PPUSH
8753: CALL_OW 109
// if IsInUnit ( sci ) then
8757: LD_VAR 0 24
8761: PPUSH
8762: CALL_OW 310
8766: IFFALSE 8777
// ComExitBuilding ( sci ) ;
8768: LD_VAR 0 24
8772: PPUSH
8773: CALL_OW 122
// AddComEnterUnit ( sci , barracks [ 1 ] ) ;
8777: LD_VAR 0 24
8781: PPUSH
8782: LD_VAR 0 32
8786: PUSH
8787: LD_INT 1
8789: ARRAY
8790: PPUSH
8791: CALL_OW 180
// AddComChangeProfession ( sci , class_soldier ) ;
8795: LD_VAR 0 24
8799: PPUSH
8800: LD_INT 1
8802: PPUSH
8803: CALL_OW 183
// end ;
8807: GO 8674
8809: POP
8810: POP
// end ; if fac then
8811: LD_VAR 0 36
8815: IFFALSE 9130
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
8817: LD_VAR 0 36
8821: PUSH
8822: LD_INT 1
8824: ARRAY
8825: PPUSH
8826: CALL_OW 461
8830: PUSH
8831: LD_INT 2
8833: EQUAL
8834: IFFALSE 9130
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
8836: LD_ADDR_VAR 0 37
8840: PUSH
8841: LD_VAR 0 2
8845: PPUSH
8846: LD_INT 2
8848: PUSH
8849: LD_INT 30
8851: PUSH
8852: LD_INT 32
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: PUSH
8859: LD_INT 30
8861: PUSH
8862: LD_INT 33
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: LIST
8873: PUSH
8874: LD_INT 35
8876: PUSH
8877: LD_INT 0
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: PPUSH
8888: CALL_OW 70
8892: ST_TO_ADDR
// if emptyTowers then
8893: LD_VAR 0 37
8897: IFFALSE 8947
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
8899: LD_ADDR_VAR 0 38
8903: PUSH
8904: LD_VAR 0 37
8908: PUSH
8909: LD_INT 1
8911: ARRAY
8912: PPUSH
8913: LD_VAR 0 2
8917: PPUSH
8918: CALL 45507 0 2
8922: ST_TO_ADDR
// if weapon then
8923: LD_VAR 0 38
8927: IFFALSE 8947
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
8929: LD_VAR 0 37
8933: PUSH
8934: LD_INT 1
8936: ARRAY
8937: PPUSH
8938: LD_VAR 0 38
8942: PPUSH
8943: CALL_OW 148
// end ; if constructList then
8947: LD_VAR 0 9
8951: IFFALSE 9130
// for i := 1 to Count ( constructList ) do
8953: LD_ADDR_VAR 0 15
8957: PUSH
8958: DOUBLE
8959: LD_INT 1
8961: DEC
8962: ST_TO_ADDR
8963: LD_VAR 0 9
8967: PPUSH
8968: CALL 37216 0 1
8972: PUSH
8973: FOR_TO
8974: IFFALSE 9128
// begin if CanBeConstructed ( fac [ 1 ] , constructList [ i ] [ 1 ] , constructList [ i ] [ 2 ] , constructList [ i ] [ 3 ] , constructList [ i ] [ 4 ] ) then
8976: LD_VAR 0 36
8980: PUSH
8981: LD_INT 1
8983: ARRAY
8984: PPUSH
8985: LD_VAR 0 9
8989: PUSH
8990: LD_VAR 0 15
8994: ARRAY
8995: PUSH
8996: LD_INT 1
8998: ARRAY
8999: PPUSH
9000: LD_VAR 0 9
9004: PUSH
9005: LD_VAR 0 15
9009: ARRAY
9010: PUSH
9011: LD_INT 2
9013: ARRAY
9014: PPUSH
9015: LD_VAR 0 9
9019: PUSH
9020: LD_VAR 0 15
9024: ARRAY
9025: PUSH
9026: LD_INT 3
9028: ARRAY
9029: PPUSH
9030: LD_VAR 0 9
9034: PUSH
9035: LD_VAR 0 15
9039: ARRAY
9040: PUSH
9041: LD_INT 4
9043: ARRAY
9044: PPUSH
9045: CALL_OW 448
9049: IFFALSE 9126
// begin ComConstruct ( fac [ 1 ] , constructList [ i ] [ 1 ] , constructList [ i ] [ 2 ] , constructList [ i ] [ 3 ] , constructList [ i ] [ 4 ] ) ;
9051: LD_VAR 0 36
9055: PUSH
9056: LD_INT 1
9058: ARRAY
9059: PPUSH
9060: LD_VAR 0 9
9064: PUSH
9065: LD_VAR 0 15
9069: ARRAY
9070: PUSH
9071: LD_INT 1
9073: ARRAY
9074: PPUSH
9075: LD_VAR 0 9
9079: PUSH
9080: LD_VAR 0 15
9084: ARRAY
9085: PUSH
9086: LD_INT 2
9088: ARRAY
9089: PPUSH
9090: LD_VAR 0 9
9094: PUSH
9095: LD_VAR 0 15
9099: ARRAY
9100: PUSH
9101: LD_INT 3
9103: ARRAY
9104: PPUSH
9105: LD_VAR 0 9
9109: PUSH
9110: LD_VAR 0 15
9114: ARRAY
9115: PUSH
9116: LD_INT 4
9118: ARRAY
9119: PPUSH
9120: CALL_OW 125
// break ;
9124: GO 9128
// end ; end ;
9126: GO 8973
9128: POP
9129: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9130: LD_ADDR_VAR 0 16
9134: PUSH
9135: LD_VAR 0 2
9139: PPUSH
9140: LD_INT 22
9142: PUSH
9143: LD_VAR 0 1
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: PUSH
9152: LD_INT 21
9154: PUSH
9155: LD_INT 3
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PUSH
9162: LD_INT 3
9164: PUSH
9165: LD_INT 57
9167: PUSH
9168: EMPTY
9169: LIST
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PUSH
9175: LD_INT 3
9177: PUSH
9178: LD_INT 24
9180: PUSH
9181: LD_INT 1000
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: PUSH
9192: EMPTY
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: PPUSH
9198: CALL_OW 70
9202: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
9203: LD_ADDR_VAR 0 23
9207: PUSH
9208: LD_VAR 0 2
9212: PPUSH
9213: CALL_OW 435
9217: ST_TO_ADDR
// if cratesArea then
9218: LD_VAR 0 3
9222: IFFALSE 9245
// cr := cr union GetListOfCratesInArea ( cratesArea ) ;
9224: LD_ADDR_VAR 0 23
9228: PUSH
9229: LD_VAR 0 23
9233: PUSH
9234: LD_VAR 0 3
9238: PPUSH
9239: CALL_OW 435
9243: UNION
9244: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
9245: LD_ADDR_VAR 0 20
9249: PUSH
9250: LD_VAR 0 6
9254: PPUSH
9255: LD_INT 25
9257: PUSH
9258: LD_INT 3
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: PUSH
9265: LD_INT 50
9267: PUSH
9268: EMPTY
9269: LIST
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: PPUSH
9275: CALL_OW 72
9279: ST_TO_ADDR
// if fac then
9280: LD_VAR 0 36
9284: IFFALSE 9441
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_tag , tControlRemoteMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
9286: LD_VAR 0 20
9290: PPUSH
9291: LD_INT 3
9293: PUSH
9294: LD_INT 120
9296: PUSH
9297: LD_INT 7
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: PUSH
9308: LD_INT 3
9310: PUSH
9311: LD_INT 120
9313: PUSH
9314: LD_INT 17
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: PUSH
9325: LD_INT 3
9327: PUSH
9328: LD_INT 54
9330: PUSH
9331: EMPTY
9332: LIST
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: LIST
9342: PPUSH
9343: CALL_OW 72
9347: IFFALSE 9364
9349: PUSH
9350: LD_VAR 0 36
9354: PUSH
9355: LD_INT 1
9357: ARRAY
9358: PPUSH
9359: CALL_OW 302
9363: AND
9364: IFFALSE 9441
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_tag , tControlRemoteMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
9366: LD_VAR 0 20
9370: PPUSH
9371: LD_INT 3
9373: PUSH
9374: LD_INT 120
9376: PUSH
9377: LD_INT 7
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: PUSH
9388: LD_INT 3
9390: PUSH
9391: LD_INT 120
9393: PUSH
9394: LD_INT 17
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: PUSH
9405: LD_INT 3
9407: PUSH
9408: LD_INT 54
9410: PUSH
9411: EMPTY
9412: LIST
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: LIST
9422: PPUSH
9423: CALL_OW 72
9427: PPUSH
9428: LD_VAR 0 36
9432: PUSH
9433: LD_INT 1
9435: ARRAY
9436: PPUSH
9437: CALL_OW 120
// ct := FilterUnitsInArea ( area , [ [ f_ok ] , [ f_not , [ f_full ] ] , [ f_btype , b_control_tower ] ] ) ;
9441: LD_ADDR_VAR 0 30
9445: PUSH
9446: LD_VAR 0 2
9450: PPUSH
9451: LD_INT 50
9453: PUSH
9454: EMPTY
9455: LIST
9456: PUSH
9457: LD_INT 3
9459: PUSH
9460: LD_INT 62
9462: PUSH
9463: EMPTY
9464: LIST
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: PUSH
9470: LD_INT 30
9472: PUSH
9473: LD_INT 36
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: LIST
9484: PPUSH
9485: CALL_OW 70
9489: ST_TO_ADDR
// if ct then
9490: LD_VAR 0 30
9494: IFFALSE 9650
// if Count ( UnitFilter ( mech , [ [ f_tag , tControlRemoteMech ] , [ f_class , 3 ] ] ) ) < 3 then
9496: LD_VAR 0 20
9500: PPUSH
9501: LD_INT 120
9503: PUSH
9504: LD_INT 17
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: LD_INT 25
9513: PUSH
9514: LD_INT 3
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PPUSH
9525: CALL_OW 72
9529: PPUSH
9530: CALL 37216 0 1
9534: PUSH
9535: LD_INT 3
9537: LESS
9538: IFFALSE 9650
// begin tmp := UnitFilter ( mech , [ [ f_not , [ f_hastask ] ] , [ f_tag , 0 ] , [ f_class , 3 ] ] ) ;
9540: LD_ADDR_VAR 0 16
9544: PUSH
9545: LD_VAR 0 20
9549: PPUSH
9550: LD_INT 3
9552: PUSH
9553: LD_INT 60
9555: PUSH
9556: EMPTY
9557: LIST
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: PUSH
9563: LD_INT 120
9565: PUSH
9566: LD_INT 0
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: PUSH
9573: LD_INT 25
9575: PUSH
9576: LD_INT 3
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: LIST
9587: PPUSH
9588: CALL_OW 72
9592: ST_TO_ADDR
// if tmp then
9593: LD_VAR 0 16
9597: IFFALSE 9650
// begin SetTag ( tmp [ 1 ] , tControlRemoteMech ) ;
9599: LD_VAR 0 16
9603: PUSH
9604: LD_INT 1
9606: ARRAY
9607: PPUSH
9608: LD_INT 17
9610: PPUSH
9611: CALL_OW 109
// ComExit ( tmp [ 1 ] ) ;
9615: LD_VAR 0 16
9619: PUSH
9620: LD_INT 1
9622: ARRAY
9623: PPUSH
9624: CALL 73546 0 1
// AddComEnterUnit ( tmp [ 1 ] , ct [ 1 ] ) ;
9628: LD_VAR 0 16
9632: PUSH
9633: LD_INT 1
9635: ARRAY
9636: PPUSH
9637: LD_VAR 0 30
9641: PUSH
9642: LD_INT 1
9644: ARRAY
9645: PPUSH
9646: CALL_OW 180
// end ; end ; sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_not , [ f_tag , tWannaBeSold ] ] , [ f_not , [ f_tag , tWannaBeMech ] ] , [ f_ok ] ] ) ;
9650: LD_ADDR_VAR 0 24
9654: PUSH
9655: LD_VAR 0 6
9659: PPUSH
9660: LD_INT 25
9662: PUSH
9663: LD_INT 4
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PUSH
9670: LD_INT 3
9672: PUSH
9673: LD_INT 120
9675: PUSH
9676: LD_INT 16
9678: PUSH
9679: EMPTY
9680: LIST
9681: LIST
9682: PUSH
9683: EMPTY
9684: LIST
9685: LIST
9686: PUSH
9687: LD_INT 3
9689: PUSH
9690: LD_INT 120
9692: PUSH
9693: LD_INT 14
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: PUSH
9704: LD_INT 50
9706: PUSH
9707: EMPTY
9708: LIST
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: PPUSH
9716: CALL_OW 72
9720: ST_TO_ADDR
// lab := FilterUnitsInarea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
9721: LD_ADDR_VAR 0 18
9725: PUSH
9726: LD_VAR 0 2
9730: PPUSH
9731: LD_INT 2
9733: PUSH
9734: LD_INT 30
9736: PUSH
9737: LD_INT 6
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 30
9746: PUSH
9747: LD_INT 7
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: LD_INT 30
9756: PUSH
9757: LD_INT 8
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: PPUSH
9770: CALL_OW 70
9774: ST_TO_ADDR
// if sci then
9775: LD_VAR 0 24
9779: IFFALSE 9958
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
9781: LD_ADDR_VAR 0 27
9785: PUSH
9786: LD_VAR 0 6
9790: PPUSH
9791: LD_INT 95
9793: PUSH
9794: LD_VAR 0 2
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: PUSH
9803: LD_INT 120
9805: PUSH
9806: LD_INT 1
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: PPUSH
9817: CALL_OW 72
9821: ST_TO_ADDR
// if hurtUnits then
9822: LD_VAR 0 27
9826: IFFALSE 9905
// begin hurtUnits := SortByHealth ( hurtUnits , true ) ;
9828: LD_ADDR_VAR 0 27
9832: PUSH
9833: LD_VAR 0 27
9837: PPUSH
9838: LD_INT 1
9840: PPUSH
9841: CALL 75106 0 2
9845: ST_TO_ADDR
// for i in sci do
9846: LD_ADDR_VAR 0 15
9850: PUSH
9851: LD_VAR 0 24
9855: PUSH
9856: FOR_IN
9857: IFFALSE 9901
// if IsInUnit ( i ) then
9859: LD_VAR 0 15
9863: PPUSH
9864: CALL_OW 310
9868: IFFALSE 9881
// ComExitBuilding ( i ) else
9870: LD_VAR 0 15
9874: PPUSH
9875: CALL_OW 122
9879: GO 9899
// ComHeal ( i , hurtUnits [ 1 ] ) ;
9881: LD_VAR 0 15
9885: PPUSH
9886: LD_VAR 0 27
9890: PUSH
9891: LD_INT 1
9893: ARRAY
9894: PPUSH
9895: CALL_OW 128
9899: GO 9856
9901: POP
9902: POP
// end else
9903: GO 9958
// if lab then
9905: LD_VAR 0 18
9909: IFFALSE 9958
// begin for i in sci do
9911: LD_ADDR_VAR 0 15
9915: PUSH
9916: LD_VAR 0 24
9920: PUSH
9921: FOR_IN
9922: IFFALSE 9956
// if not IsInUnit ( i ) then
9924: LD_VAR 0 15
9928: PPUSH
9929: CALL_OW 310
9933: NOT
9934: IFFALSE 9954
// ComEnterUnit ( i , lab [ 1 ] ) ;
9936: LD_VAR 0 15
9940: PPUSH
9941: LD_VAR 0 18
9945: PUSH
9946: LD_INT 1
9948: ARRAY
9949: PPUSH
9950: CALL_OW 120
9954: GO 9921
9956: POP
9957: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
9958: LD_ADDR_VAR 0 19
9962: PUSH
9963: LD_VAR 0 6
9967: PPUSH
9968: LD_INT 25
9970: PUSH
9971: LD_INT 2
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: PPUSH
9978: CALL_OW 72
9982: ST_TO_ADDR
// if eng then
9983: LD_VAR 0 19
9987: IFFALSE 11206
// begin for i in eng do
9989: LD_ADDR_VAR 0 15
9993: PUSH
9994: LD_VAR 0 19
9998: PUSH
9999: FOR_IN
10000: IFFALSE 11204
// begin tag := GetTag ( i ) ;
10002: LD_ADDR_VAR 0 21
10006: PUSH
10007: LD_VAR 0 15
10011: PPUSH
10012: CALL_OW 110
10016: ST_TO_ADDR
// if IsInArea ( i , outerArea ) and not tCrates then
10017: LD_VAR 0 15
10021: PPUSH
10022: LD_VAR 0 5
10026: PPUSH
10027: CALL_OW 308
10031: IFFALSE 10038
10033: PUSH
10034: LD_INT 2
10036: NOT
10037: AND
10038: IFFALSE 10069
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10040: LD_VAR 0 15
10044: PPUSH
10045: LD_VAR 0 12
10049: PUSH
10050: LD_INT 1
10052: ARRAY
10053: PPUSH
10054: LD_VAR 0 12
10058: PUSH
10059: LD_INT 2
10061: ARRAY
10062: PPUSH
10063: CALL_OW 111
// continue ;
10067: GO 9999
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
10069: LD_VAR 0 15
10073: PPUSH
10074: CALL_OW 256
10078: PUSH
10079: LD_INT 800
10081: LESS
10082: IFFALSE 10094
10084: PUSH
10085: LD_VAR 0 21
10089: PUSH
10090: LD_INT 1
10092: NONEQUAL
10093: AND
10094: IFFALSE 10144
// begin SetTag ( i , tHeal ) ;
10096: LD_VAR 0 15
10100: PPUSH
10101: LD_INT 1
10103: PPUSH
10104: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
10108: LD_VAR 0 15
10112: PPUSH
10113: LD_VAR 0 11
10117: PUSH
10118: LD_INT 1
10120: ARRAY
10121: PPUSH
10122: LD_VAR 0 11
10126: PUSH
10127: LD_INT 2
10129: ARRAY
10130: PPUSH
10131: CALL_OW 111
// AddComHold ( i ) ;
10135: LD_VAR 0 15
10139: PPUSH
10140: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
10144: LD_VAR 0 21
10148: PUSH
10149: LD_INT 1
10151: EQUAL
10152: IFFALSE 10169
10154: PUSH
10155: LD_VAR 0 15
10159: PPUSH
10160: CALL_OW 256
10164: PUSH
10165: LD_INT 1000
10167: EQUAL
10168: AND
10169: IFFALSE 10183
// SetTag ( i , 0 ) ;
10171: LD_VAR 0 15
10175: PPUSH
10176: LD_INT 0
10178: PPUSH
10179: CALL_OW 109
// if not tag then
10183: LD_VAR 0 21
10187: NOT
10188: IFFALSE 10359
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
10190: LD_ADDR_VAR 0 17
10194: PUSH
10195: LD_VAR 0 2
10199: PPUSH
10200: LD_INT 57
10202: PUSH
10203: EMPTY
10204: LIST
10205: PPUSH
10206: CALL_OW 70
10210: ST_TO_ADDR
// if undone then
10211: LD_VAR 0 17
10215: IFFALSE 10237
// begin ComComplete ( i , undone [ 1 ] ) ;
10217: LD_VAR 0 15
10221: PPUSH
10222: LD_VAR 0 17
10226: PUSH
10227: LD_INT 1
10229: ARRAY
10230: PPUSH
10231: CALL 43352 0 2
// continue ;
10235: GO 9999
// end ; if cr or tmp or buildingsToBuild then
10237: LD_VAR 0 23
10241: IFTRUE 10249
10243: PUSH
10244: LD_VAR 0 16
10248: OR
10249: IFTRUE 10257
10251: PUSH
10252: LD_VAR 0 10
10256: OR
10257: IFFALSE 10333
// begin if IsInUnit ( i ) then
10259: LD_VAR 0 15
10263: PPUSH
10264: CALL_OW 310
10268: IFFALSE 10279
// ComExitBuilding ( i ) ;
10270: LD_VAR 0 15
10274: PPUSH
10275: CALL_OW 122
// if tmp then
10279: LD_VAR 0 16
10283: IFFALSE 10299
// SetTag ( i , tRepair ) else
10285: LD_VAR 0 15
10289: PPUSH
10290: LD_INT 3
10292: PPUSH
10293: CALL_OW 109
10297: GO 10331
// if cr then
10299: LD_VAR 0 23
10303: IFFALSE 10319
// SetTag ( i , tCrates ) else
10305: LD_VAR 0 15
10309: PPUSH
10310: LD_INT 2
10312: PPUSH
10313: CALL_OW 109
10317: GO 10331
// SetTag ( i , tBuild ) ;
10319: LD_VAR 0 15
10323: PPUSH
10324: LD_INT 5
10326: PPUSH
10327: CALL_OW 109
// end else
10331: GO 10359
// if not IsInUnit ( i ) then
10333: LD_VAR 0 15
10337: PPUSH
10338: CALL_OW 310
10342: NOT
10343: IFFALSE 10359
// ComEnterUnit ( i , depot ) ;
10345: LD_VAR 0 15
10349: PPUSH
10350: LD_VAR 0 39
10354: PPUSH
10355: CALL_OW 120
// end ; if tag = tRepair then
10359: LD_VAR 0 21
10363: PUSH
10364: LD_INT 3
10366: EQUAL
10367: IFFALSE 10473
// begin if IsInUnit ( i ) then
10369: LD_VAR 0 15
10373: PPUSH
10374: CALL_OW 310
10378: IFFALSE 10391
// begin ComExitBuilding ( i ) ;
10380: LD_VAR 0 15
10384: PPUSH
10385: CALL_OW 122
// continue ;
10389: GO 9999
// end ; if not tmp then
10391: LD_VAR 0 16
10395: NOT
10396: IFFALSE 10412
// begin SetTag ( i , 0 ) ;
10398: LD_VAR 0 15
10402: PPUSH
10403: LD_INT 0
10405: PPUSH
10406: CALL_OW 109
// continue ;
10410: GO 9999
// end ; if not HasTask ( i ) then
10412: LD_VAR 0 15
10416: PPUSH
10417: CALL_OW 314
10421: NOT
10422: IFFALSE 10442
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
10424: LD_VAR 0 15
10428: PPUSH
10429: LD_VAR 0 16
10433: PUSH
10434: LD_INT 1
10436: ARRAY
10437: PPUSH
10438: CALL_OW 130
// if not IsInarea ( i , area ) then
10442: LD_VAR 0 15
10446: PPUSH
10447: LD_VAR 0 2
10451: PPUSH
10452: CALL_OW 308
10456: NOT
10457: IFFALSE 10473
// ComMoveToArea ( i , area ) ;
10459: LD_VAR 0 15
10463: PPUSH
10464: LD_VAR 0 2
10468: PPUSH
10469: CALL_OW 113
// end ; if tag = tBuild then
10473: LD_VAR 0 21
10477: PUSH
10478: LD_INT 5
10480: EQUAL
10481: IFFALSE 11055
// begin if IsInUnit ( i ) then
10483: LD_VAR 0 15
10487: PPUSH
10488: CALL_OW 310
10492: IFFALSE 10505
// begin ComExitBuilding ( i ) ;
10494: LD_VAR 0 15
10498: PPUSH
10499: CALL_OW 122
// continue ;
10503: GO 9999
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
10505: LD_VAR 0 10
10509: NOT
10510: IFTRUE 10518
10512: PUSH
10513: LD_VAR 0 33
10517: OR
10518: IFTRUE 10526
10520: PUSH
10521: LD_VAR 0 34
10525: OR
10526: IFFALSE 10544
// begin SetTag ( i , 0 ) ;
10528: LD_VAR 0 15
10532: PPUSH
10533: LD_INT 0
10535: PPUSH
10536: CALL_OW 109
// continue ;
10540: GO 9999
// end else
10542: GO 10583
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
10544: LD_VAR 0 39
10548: PPUSH
10549: LD_VAR 0 10
10553: PUSH
10554: LD_INT 1
10556: ARRAY
10557: PUSH
10558: LD_INT 1
10560: ARRAY
10561: PPUSH
10562: CALL 77243 0 2
10566: NOT
10567: IFFALSE 10583
// begin SetTag ( i , 0 ) ;
10569: LD_VAR 0 15
10573: PPUSH
10574: LD_INT 0
10576: PPUSH
10577: CALL_OW 109
// continue ;
10581: GO 9999
// end ; undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
10583: LD_ADDR_VAR 0 17
10587: PUSH
10588: LD_VAR 0 2
10592: PPUSH
10593: LD_INT 57
10595: PUSH
10596: EMPTY
10597: LIST
10598: PPUSH
10599: CALL_OW 70
10603: ST_TO_ADDR
// if undone then
10604: LD_VAR 0 17
10608: IFFALSE 10630
// begin ComComplete ( i , undone [ 1 ] ) ;
10610: LD_VAR 0 15
10614: PPUSH
10615: LD_VAR 0 17
10619: PUSH
10620: LD_INT 1
10622: ARRAY
10623: PPUSH
10624: CALL 43352 0 2
// continue ;
10628: GO 9999
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_factory , b_barracks ] then
10630: LD_VAR 0 10
10634: PUSH
10635: LD_INT 1
10637: ARRAY
10638: PUSH
10639: LD_INT 1
10641: ARRAY
10642: PUSH
10643: LD_INT 3
10645: PUSH
10646: LD_INT 5
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: IN
10653: IFFALSE 10750
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) and CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
10655: LD_VAR 0 10
10659: PUSH
10660: LD_INT 1
10662: ARRAY
10663: PUSH
10664: LD_INT 2
10666: ARRAY
10667: PPUSH
10668: LD_VAR 0 10
10672: PUSH
10673: LD_INT 1
10675: ARRAY
10676: PUSH
10677: LD_INT 3
10679: ARRAY
10680: PPUSH
10681: CALL_OW 428
10685: IFFALSE 10711
10687: PUSH
10688: LD_VAR 0 39
10692: PPUSH
10693: LD_VAR 0 10
10697: PUSH
10698: LD_INT 1
10700: ARRAY
10701: PUSH
10702: LD_INT 1
10704: ARRAY
10705: PPUSH
10706: CALL 77243 0 2
10710: AND
10711: IFFALSE 10748
// begin ComUpgrade ( HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) ) ;
10713: LD_VAR 0 10
10717: PUSH
10718: LD_INT 1
10720: ARRAY
10721: PUSH
10722: LD_INT 2
10724: ARRAY
10725: PPUSH
10726: LD_VAR 0 10
10730: PUSH
10731: LD_INT 1
10733: ARRAY
10734: PUSH
10735: LD_INT 3
10737: ARRAY
10738: PPUSH
10739: CALL_OW 428
10743: PPUSH
10744: CALL_OW 146
// end ; continue ;
10748: GO 9999
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_lab_half , b_lab_full ] then
10750: LD_VAR 0 10
10754: PUSH
10755: LD_INT 1
10757: ARRAY
10758: PUSH
10759: LD_INT 1
10761: ARRAY
10762: PUSH
10763: LD_INT 7
10765: PUSH
10766: LD_INT 8
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: IN
10773: IFFALSE 10883
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) and CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
10775: LD_VAR 0 10
10779: PUSH
10780: LD_INT 1
10782: ARRAY
10783: PUSH
10784: LD_INT 2
10786: ARRAY
10787: PPUSH
10788: LD_VAR 0 10
10792: PUSH
10793: LD_INT 1
10795: ARRAY
10796: PUSH
10797: LD_INT 3
10799: ARRAY
10800: PPUSH
10801: CALL_OW 428
10805: IFFALSE 10831
10807: PUSH
10808: LD_VAR 0 39
10812: PPUSH
10813: LD_VAR 0 10
10817: PUSH
10818: LD_INT 1
10820: ARRAY
10821: PUSH
10822: LD_INT 1
10824: ARRAY
10825: PPUSH
10826: CALL 77243 0 2
10830: AND
10831: IFFALSE 10881
// begin ComUpgradeLab ( HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) , buildingsToBuild [ 1 ] [ 5 ] ) ;
10833: LD_VAR 0 10
10837: PUSH
10838: LD_INT 1
10840: ARRAY
10841: PUSH
10842: LD_INT 2
10844: ARRAY
10845: PPUSH
10846: LD_VAR 0 10
10850: PUSH
10851: LD_INT 1
10853: ARRAY
10854: PUSH
10855: LD_INT 3
10857: ARRAY
10858: PPUSH
10859: CALL_OW 428
10863: PPUSH
10864: LD_VAR 0 10
10868: PUSH
10869: LD_INT 1
10871: ARRAY
10872: PUSH
10873: LD_INT 5
10875: ARRAY
10876: PPUSH
10877: CALL_OW 147
// end ; continue ;
10881: GO 9999
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_bunker , b_turret ] then
10883: LD_VAR 0 10
10887: PUSH
10888: LD_INT 1
10890: ARRAY
10891: PUSH
10892: LD_INT 1
10894: ARRAY
10895: PUSH
10896: LD_INT 32
10898: PUSH
10899: LD_INT 33
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: IN
10906: IFFALSE 10982
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) then
10908: LD_VAR 0 10
10912: PUSH
10913: LD_INT 1
10915: ARRAY
10916: PUSH
10917: LD_INT 2
10919: ARRAY
10920: PPUSH
10921: LD_VAR 0 10
10925: PUSH
10926: LD_INT 1
10928: ARRAY
10929: PUSH
10930: LD_INT 3
10932: ARRAY
10933: PPUSH
10934: CALL_OW 428
10938: IFFALSE 10982
// begin ComDismantle ( i , HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) ) ;
10940: LD_VAR 0 15
10944: PPUSH
10945: LD_VAR 0 10
10949: PUSH
10950: LD_INT 1
10952: ARRAY
10953: PUSH
10954: LD_INT 2
10956: ARRAY
10957: PPUSH
10958: LD_VAR 0 10
10962: PUSH
10963: LD_INT 1
10965: ARRAY
10966: PUSH
10967: LD_INT 3
10969: ARRAY
10970: PPUSH
10971: CALL_OW 428
10975: PPUSH
10976: CALL_OW 167
// continue ;
10980: GO 9999
// end ; end ; if not HasTask ( i ) then
10982: LD_VAR 0 15
10986: PPUSH
10987: CALL_OW 314
10991: NOT
10992: IFFALSE 11055
// ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
10994: LD_VAR 0 15
10998: PPUSH
10999: LD_VAR 0 10
11003: PUSH
11004: LD_INT 1
11006: ARRAY
11007: PUSH
11008: LD_INT 1
11010: ARRAY
11011: PPUSH
11012: LD_VAR 0 10
11016: PUSH
11017: LD_INT 1
11019: ARRAY
11020: PUSH
11021: LD_INT 2
11023: ARRAY
11024: PPUSH
11025: LD_VAR 0 10
11029: PUSH
11030: LD_INT 1
11032: ARRAY
11033: PUSH
11034: LD_INT 3
11036: ARRAY
11037: PPUSH
11038: LD_VAR 0 10
11042: PUSH
11043: LD_INT 1
11045: ARRAY
11046: PUSH
11047: LD_INT 4
11049: ARRAY
11050: PPUSH
11051: CALL_OW 145
// end ; if tag = tCrates then
11055: LD_VAR 0 21
11059: PUSH
11060: LD_INT 2
11062: EQUAL
11063: IFFALSE 11202
// begin if IsInUnit ( i ) then
11065: LD_VAR 0 15
11069: PPUSH
11070: CALL_OW 310
11074: IFFALSE 11087
// begin ComExitBuilding ( i ) ;
11076: LD_VAR 0 15
11080: PPUSH
11081: CALL_OW 122
// continue ;
11085: GO 9999
// end ; if not cr then
11087: LD_VAR 0 23
11091: NOT
11092: IFFALSE 11108
// begin SetTag ( i , 0 ) ;
11094: LD_VAR 0 15
11098: PPUSH
11099: LD_INT 0
11101: PPUSH
11102: CALL_OW 109
// continue ;
11106: GO 9999
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
11108: LD_VAR 0 15
11112: PPUSH
11113: CALL_OW 314
11117: NOT
11118: IFFALSE 11173
11120: PUSH
11121: LD_INT 81
11123: PUSH
11124: LD_VAR 0 1
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: PUSH
11133: LD_INT 92
11135: PUSH
11136: LD_VAR 0 23
11140: PUSH
11141: LD_INT 1
11143: ARRAY
11144: PUSH
11145: LD_VAR 0 23
11149: PUSH
11150: LD_INT 2
11152: ARRAY
11153: PUSH
11154: LD_INT 12
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: PPUSH
11167: CALL_OW 69
11171: NOT
11172: AND
11173: IFFALSE 11202
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
11175: LD_VAR 0 15
11179: PPUSH
11180: LD_VAR 0 23
11184: PUSH
11185: LD_INT 1
11187: ARRAY
11188: PPUSH
11189: LD_VAR 0 23
11193: PUSH
11194: LD_INT 2
11196: ARRAY
11197: PPUSH
11198: CALL_OW 117
// end ; end ;
11202: GO 9999
11204: POP
11205: POP
// end ; cranes := UnitFilter ( vehicles , [ [ f_weapon , us_crane ] , [ f_ok ] ] ) ;
11206: LD_ADDR_VAR 0 31
11210: PUSH
11211: LD_VAR 0 7
11215: PPUSH
11216: LD_INT 34
11218: PUSH
11219: LD_INT 13
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: LD_INT 50
11228: PUSH
11229: EMPTY
11230: LIST
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PPUSH
11236: CALL_OW 72
11240: ST_TO_ADDR
// if cranes then
11241: LD_VAR 0 31
11245: IFFALSE 11310
// begin if tmp then
11247: LD_VAR 0 16
11251: IFFALSE 11296
// begin for i in cranes do
11253: LD_ADDR_VAR 0 15
11257: PUSH
11258: LD_VAR 0 31
11262: PUSH
11263: FOR_IN
11264: IFFALSE 11292
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
11266: LD_VAR 0 15
11270: PPUSH
11271: LD_VAR 0 16
11275: PPUSH
11276: LD_VAR 0 15
11280: PPUSH
11281: CALL_OW 74
11285: PPUSH
11286: CALL_OW 130
11290: GO 11263
11292: POP
11293: POP
// end else
11294: GO 11310
// ComBackOnParking ( cranes , parkingPoint ) ;
11296: LD_VAR 0 31
11300: PPUSH
11301: LD_VAR 0 12
11305: PPUSH
11306: CALL 78145 0 2
// end ; vehicles2 := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] ] ) ;
11310: LD_ADDR_VAR 0 29
11314: PUSH
11315: LD_INT 22
11317: PUSH
11318: LD_VAR 0 1
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PUSH
11327: LD_INT 33
11329: PUSH
11330: LD_INT 2
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PPUSH
11341: CALL_OW 69
11345: ST_TO_ADDR
// if vehicles2 then
11346: LD_VAR 0 29
11350: IFFALSE 11417
// for i in UnitFilter ( vehicles2 , [ [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do
11352: LD_ADDR_VAR 0 15
11356: PUSH
11357: LD_VAR 0 29
11361: PPUSH
11362: LD_INT 33
11364: PUSH
11365: LD_INT 2
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PUSH
11372: LD_INT 50
11374: PUSH
11375: EMPTY
11376: LIST
11377: PUSH
11378: LD_INT 3
11380: PUSH
11381: LD_INT 61
11383: PUSH
11384: EMPTY
11385: LIST
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: LIST
11395: PPUSH
11396: CALL_OW 72
11400: PUSH
11401: FOR_IN
11402: IFFALSE 11415
// Connect ( i ) ;
11404: LD_VAR 0 15
11408: PPUSH
11409: CALL 43460 0 1
11413: GO 11401
11415: POP
11416: POP
// if vehicles then
11417: LD_VAR 0 7
11421: IFFALSE 12483
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ru_crane ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , us_cargo_bay ] ] ] , [ f_ok ] ] ) ;
11423: LD_ADDR_VAR 0 7
11427: PUSH
11428: LD_VAR 0 7
11432: PPUSH
11433: LD_INT 3
11435: PUSH
11436: LD_INT 2
11438: PUSH
11439: LD_INT 34
11441: PUSH
11442: LD_INT 52
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: PUSH
11449: LD_INT 34
11451: PUSH
11452: LD_INT 51
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: PUSH
11459: LD_INT 34
11461: PUSH
11462: LD_INT 13
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: PUSH
11469: LD_INT 34
11471: PUSH
11472: LD_INT 12
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 50
11492: PUSH
11493: EMPTY
11494: LIST
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PPUSH
11500: CALL_OW 72
11504: ST_TO_ADDR
// if vehicles then
11505: LD_VAR 0 7
11509: IFFALSE 12483
// begin for i in vehicles do
11511: LD_ADDR_VAR 0 15
11515: PUSH
11516: LD_VAR 0 7
11520: PUSH
11521: FOR_IN
11522: IFFALSE 12481
// begin tag := GetTag ( i ) ;
11524: LD_ADDR_VAR 0 21
11528: PUSH
11529: LD_VAR 0 15
11533: PPUSH
11534: CALL_OW 110
11538: ST_TO_ADDR
// if not tag then
11539: LD_VAR 0 21
11543: NOT
11544: IFFALSE 11681
// begin if GetControl ( i ) = control_manual then
11546: LD_VAR 0 15
11550: PPUSH
11551: CALL_OW 263
11555: PUSH
11556: LD_INT 1
11558: EQUAL
11559: IFFALSE 11667
// begin drivers := UnitFilter ( mech , [ f_tag , tMech ] ) ;
11561: LD_ADDR_VAR 0 26
11565: PUSH
11566: LD_VAR 0 20
11570: PPUSH
11571: LD_INT 120
11573: PUSH
11574: LD_INT 7
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PPUSH
11581: CALL_OW 72
11585: ST_TO_ADDR
// if not drivers then
11586: LD_VAR 0 26
11590: NOT
11591: IFFALSE 11647
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
11593: LD_ADDR_VAR 0 26
11597: PUSH
11598: LD_VAR 0 20
11602: PPUSH
11603: LD_INT 3
11605: PUSH
11606: LD_INT 120
11608: PUSH
11609: LD_INT 7
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PPUSH
11620: CALL_OW 72
11624: ST_TO_ADDR
// if drivers then
11625: LD_VAR 0 26
11629: IFFALSE 11647
// begin SetTag ( drivers [ 1 ] , tMech ) ;
11631: LD_VAR 0 26
11635: PUSH
11636: LD_INT 1
11638: ARRAY
11639: PPUSH
11640: LD_INT 7
11642: PPUSH
11643: CALL_OW 109
// end ; end ; if drivers then
11647: LD_VAR 0 26
11651: IFFALSE 11665
// SetTag ( i , tBusy ) ;
11653: LD_VAR 0 15
11657: PPUSH
11658: LD_INT 8
11660: PPUSH
11661: CALL_OW 109
// continue ;
11665: GO 11521
// end ; SetTag ( i , tBusy ) ;
11667: LD_VAR 0 15
11671: PPUSH
11672: LD_INT 8
11674: PPUSH
11675: CALL_OW 109
// end else
11679: GO 12479
// if tag = tBusy then
11681: LD_VAR 0 21
11685: PUSH
11686: LD_INT 8
11688: EQUAL
11689: IFFALSE 11944
// begin if GetLives ( i ) = 1000 then
11691: LD_VAR 0 15
11695: PPUSH
11696: CALL_OW 256
11700: PUSH
11701: LD_INT 1000
11703: EQUAL
11704: IFFALSE 11942
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
11706: LD_VAR 0 15
11710: PPUSH
11711: CALL_OW 263
11715: PUSH
11716: LD_INT 1
11718: EQUAL
11719: IFFALSE 11733
11721: PUSH
11722: LD_VAR 0 15
11726: PPUSH
11727: CALL_OW 311
11731: NOT
11732: AND
11733: IFFALSE 11910
// begin drivers := UnitFilter ( mech , [ f_tag , tMech ] ) ;
11735: LD_ADDR_VAR 0 26
11739: PUSH
11740: LD_VAR 0 20
11744: PPUSH
11745: LD_INT 120
11747: PUSH
11748: LD_INT 7
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: PPUSH
11755: CALL_OW 72
11759: ST_TO_ADDR
// if not drivers then
11760: LD_VAR 0 26
11764: NOT
11765: IFFALSE 11781
// begin SetTag ( i , 0 ) ;
11767: LD_VAR 0 15
11771: PPUSH
11772: LD_INT 0
11774: PPUSH
11775: CALL_OW 109
// continue ;
11779: GO 11521
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
11781: LD_VAR 0 26
11785: PUSH
11786: LD_INT 1
11788: ARRAY
11789: PPUSH
11790: CALL_OW 310
11794: IFFALSE 11812
11796: PUSH
11797: LD_VAR 0 26
11801: PUSH
11802: LD_INT 1
11804: ARRAY
11805: PPUSH
11806: CALL 70728 0 1
11810: NOT
11811: AND
11812: IFFALSE 11827
// ComExitBuilding ( drivers [ 1 ] ) ;
11814: LD_VAR 0 26
11818: PUSH
11819: LD_INT 1
11821: ARRAY
11822: PPUSH
11823: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
11827: LD_VAR 0 7
11831: PPUSH
11832: LD_INT 120
11834: PUSH
11835: LD_INT 3
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: PPUSH
11842: CALL_OW 72
11846: IFFALSE 11864
11848: PUSH
11849: LD_VAR 0 26
11853: PUSH
11854: LD_INT 1
11856: ARRAY
11857: PPUSH
11858: CALL_OW 314
11862: NOT
11863: AND
11864: IFTRUE 11888
11866: PUSH
11867: LD_VAR 0 7
11871: PPUSH
11872: LD_INT 120
11874: PUSH
11875: LD_INT 3
11877: PUSH
11878: EMPTY
11879: LIST
11880: LIST
11881: PPUSH
11882: CALL_OW 72
11886: NOT
11887: OR
11888: IFFALSE 11908
// ComEnterUnit ( drivers [ 1 ] , i ) ;
11890: LD_VAR 0 26
11894: PUSH
11895: LD_INT 1
11897: ARRAY
11898: PPUSH
11899: LD_VAR 0 15
11903: PPUSH
11904: CALL_OW 120
// continue ;
11908: GO 11521
// end ; if allowToPatrol then
11910: LD_VAR 0 13
11914: IFFALSE 11930
// SetTag ( i , tPatrol ) else
11916: LD_VAR 0 15
11920: PPUSH
11921: LD_INT 15
11923: PPUSH
11924: CALL_OW 109
11928: GO 11942
// SetTag ( i , tAttack ) ;
11930: LD_VAR 0 15
11934: PPUSH
11935: LD_INT 13
11937: PPUSH
11938: CALL_OW 109
// end ; end else
11942: GO 12479
// if tag = tPatrol then
11944: LD_VAR 0 21
11948: PUSH
11949: LD_INT 15
11951: EQUAL
11952: IFFALSE 12146
// begin if GetLives ( i ) < 650 then
11954: LD_VAR 0 15
11958: PPUSH
11959: CALL_OW 256
11963: PUSH
11964: LD_INT 650
11966: LESS
11967: IFFALSE 12010
// begin SetTag ( i , tVehRepair ) ;
11969: LD_VAR 0 15
11973: PPUSH
11974: LD_INT 9
11976: PPUSH
11977: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
11981: LD_VAR 0 15
11985: PPUSH
11986: LD_VAR 0 12
11990: PUSH
11991: LD_INT 1
11993: ARRAY
11994: PPUSH
11995: LD_VAR 0 12
11999: PUSH
12000: LD_INT 2
12002: ARRAY
12003: PPUSH
12004: CALL_OW 111
// continue ;
12008: GO 11521
// end ; if GetEngine ( i ) = engine_combustion then
12010: LD_VAR 0 15
12014: PPUSH
12015: CALL_OW 262
12019: PUSH
12020: LD_INT 1
12022: EQUAL
12023: IFFALSE 12070
// if GetFuel ( i ) < 30 then
12025: LD_VAR 0 15
12029: PPUSH
12030: CALL_OW 261
12034: PUSH
12035: LD_INT 30
12037: LESS
12038: IFFALSE 12070
// begin ComMoveUnit ( i , depot ) ;
12040: LD_VAR 0 15
12044: PPUSH
12045: LD_VAR 0 39
12049: PPUSH
12050: CALL_OW 112
// AddComRefuel ( i , depot ) ;
12054: LD_VAR 0 15
12058: PPUSH
12059: LD_VAR 0 39
12063: PPUSH
12064: CALL_OW 210
// continue ;
12068: GO 11521
// end ; if GetDistUnitXY ( i , allowToPatrol [ 1 ] , allowToPatrol [ 2 ] ) > 12 and not HasTask ( i ) then
12070: LD_VAR 0 15
12074: PPUSH
12075: LD_VAR 0 13
12079: PUSH
12080: LD_INT 1
12082: ARRAY
12083: PPUSH
12084: LD_VAR 0 13
12088: PUSH
12089: LD_INT 2
12091: ARRAY
12092: PPUSH
12093: CALL_OW 297
12097: PUSH
12098: LD_INT 12
12100: GREATER
12101: IFFALSE 12115
12103: PUSH
12104: LD_VAR 0 15
12108: PPUSH
12109: CALL_OW 314
12113: NOT
12114: AND
12115: IFFALSE 12144
// ComAgressiveMove ( i , allowToPatrol [ 1 ] , allowToPatrol [ 2 ] ) ;
12117: LD_VAR 0 15
12121: PPUSH
12122: LD_VAR 0 13
12126: PUSH
12127: LD_INT 1
12129: ARRAY
12130: PPUSH
12131: LD_VAR 0 13
12135: PUSH
12136: LD_INT 2
12138: ARRAY
12139: PPUSH
12140: CALL_OW 114
// end else
12144: GO 12479
// if tag = tAttack then
12146: LD_VAR 0 21
12150: PUSH
12151: LD_INT 13
12153: EQUAL
12154: IFFALSE 12336
// begin enemy := enemyInBase ;
12156: LD_ADDR_VAR 0 28
12160: PUSH
12161: LD_VAR 0 33
12165: ST_TO_ADDR
// if not enemy then
12166: LD_VAR 0 28
12170: NOT
12171: IFFALSE 12183
// enemy := enemyOuterBase ;
12173: LD_ADDR_VAR 0 28
12177: PUSH
12178: LD_VAR 0 34
12182: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
12183: LD_VAR 0 28
12187: NOT
12188: IFFALSE 12223
12190: PUSH
12191: LD_VAR 0 15
12195: PPUSH
12196: LD_VAR 0 12
12200: PUSH
12201: LD_INT 1
12203: ARRAY
12204: PPUSH
12205: LD_VAR 0 12
12209: PUSH
12210: LD_INT 2
12212: ARRAY
12213: PPUSH
12214: CALL_OW 297
12218: PUSH
12219: LD_INT 10
12221: GREATER
12222: AND
12223: IFFALSE 12254
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
12225: LD_VAR 0 15
12229: PPUSH
12230: LD_VAR 0 12
12234: PUSH
12235: LD_INT 1
12237: ARRAY
12238: PPUSH
12239: LD_VAR 0 12
12243: PUSH
12244: LD_INT 2
12246: ARRAY
12247: PPUSH
12248: CALL_OW 111
// continue ;
12252: GO 11521
// end ; if GetLives ( i ) < 650 then
12254: LD_VAR 0 15
12258: PPUSH
12259: CALL_OW 256
12263: PUSH
12264: LD_INT 650
12266: LESS
12267: IFFALSE 12310
// begin SetTag ( i , tVehRepair ) ;
12269: LD_VAR 0 15
12273: PPUSH
12274: LD_INT 9
12276: PPUSH
12277: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
12281: LD_VAR 0 15
12285: PPUSH
12286: LD_VAR 0 12
12290: PUSH
12291: LD_INT 1
12293: ARRAY
12294: PPUSH
12295: LD_VAR 0 12
12299: PUSH
12300: LD_INT 2
12302: ARRAY
12303: PPUSH
12304: CALL_OW 111
// continue ;
12308: GO 11521
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
12310: LD_VAR 0 15
12314: PPUSH
12315: LD_VAR 0 28
12319: PPUSH
12320: LD_VAR 0 15
12324: PPUSH
12325: CALL_OW 74
12329: PPUSH
12330: CALL_OW 115
// end else
12334: GO 12479
// if tag = tVehRepair then
12336: LD_VAR 0 21
12340: PUSH
12341: LD_INT 9
12343: EQUAL
12344: IFFALSE 12479
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 6 then
12346: LD_VAR 0 15
12350: PPUSH
12351: LD_VAR 0 12
12355: PUSH
12356: LD_INT 1
12358: ARRAY
12359: PPUSH
12360: LD_VAR 0 12
12364: PUSH
12365: LD_INT 2
12367: ARRAY
12368: PPUSH
12369: CALL_OW 297
12373: PUSH
12374: LD_INT 6
12376: GREATER
12377: IFFALSE 12408
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
12379: LD_VAR 0 15
12383: PPUSH
12384: LD_VAR 0 12
12388: PUSH
12389: LD_INT 1
12391: ARRAY
12392: PPUSH
12393: LD_VAR 0 12
12397: PUSH
12398: LD_INT 2
12400: ARRAY
12401: PPUSH
12402: CALL_OW 111
// continue ;
12406: GO 11521
// end ; if GetLives ( i ) = 1000 then
12408: LD_VAR 0 15
12412: PPUSH
12413: CALL_OW 256
12417: PUSH
12418: LD_INT 1000
12420: EQUAL
12421: IFFALSE 12437
// begin SetTag ( i , tBusy ) ;
12423: LD_VAR 0 15
12427: PPUSH
12428: LD_INT 8
12430: PPUSH
12431: CALL_OW 109
// continue ;
12435: GO 11521
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
12437: LD_VAR 0 15
12441: PPUSH
12442: CALL_OW 263
12446: PUSH
12447: LD_INT 1
12449: EQUAL
12450: IFFALSE 12463
12452: PUSH
12453: LD_VAR 0 15
12457: PPUSH
12458: CALL_OW 311
12462: AND
12463: IFFALSE 12479
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
12465: LD_VAR 0 15
12469: PPUSH
12470: CALL_OW 311
12474: PPUSH
12475: CALL 74862 0 1
// end ; end ;
12479: GO 11521
12481: POP
12482: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
12483: LD_ADDR_VAR 0 25
12487: PUSH
12488: LD_VAR 0 6
12492: PPUSH
12493: LD_INT 2
12495: PUSH
12496: LD_INT 25
12498: PUSH
12499: LD_INT 1
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PUSH
12506: LD_INT 25
12508: PUSH
12509: LD_INT 8
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: PUSH
12516: LD_INT 25
12518: PUSH
12519: LD_INT 5
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 25
12528: PUSH
12529: LD_INT 9
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: PUSH
12543: LD_INT 50
12545: PUSH
12546: EMPTY
12547: LIST
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PPUSH
12553: CALL_OW 72
12557: ST_TO_ADDR
// if sol then
12558: LD_VAR 0 25
12562: IFFALSE 13506
// begin if enemyInBase then
12564: LD_VAR 0 33
12568: IFFALSE 12747
// begin for i in sol do
12570: LD_ADDR_VAR 0 15
12574: PUSH
12575: LD_VAR 0 25
12579: PUSH
12580: FOR_IN
12581: IFFALSE 12743
// begin tw := IsInUnit ( i ) ;
12583: LD_ADDR_VAR 0 22
12587: PUSH
12588: LD_VAR 0 15
12592: PPUSH
12593: CALL_OW 310
12597: ST_TO_ADDR
// if tw then
12598: LD_VAR 0 22
12602: IFFALSE 12685
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
12604: LD_VAR 0 22
12608: PUSH
12609: LD_INT 22
12611: PUSH
12612: LD_VAR 0 1
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PUSH
12621: LD_INT 101
12623: PUSH
12624: LD_VAR 0 40
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: PUSH
12633: LD_INT 2
12635: PUSH
12636: LD_INT 30
12638: PUSH
12639: LD_INT 32
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: PUSH
12646: LD_INT 30
12648: PUSH
12649: LD_INT 31
12651: PUSH
12652: EMPTY
12653: LIST
12654: LIST
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: LIST
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: LIST
12665: PPUSH
12666: CALL_OW 69
12670: IN
12671: NOT
12672: IFFALSE 12683
// ComExitBuilding ( i ) ;
12674: LD_VAR 0 15
12678: PPUSH
12679: CALL_OW 122
// end else
12683: GO 12741
// if IsInArea ( i , area ) then
12685: LD_VAR 0 15
12689: PPUSH
12690: LD_VAR 0 2
12694: PPUSH
12695: CALL_OW 308
12699: IFFALSE 12727
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
12701: LD_VAR 0 15
12705: PPUSH
12706: LD_VAR 0 33
12710: PPUSH
12711: LD_VAR 0 15
12715: PPUSH
12716: CALL_OW 74
12720: PPUSH
12721: CALL_OW 115
12725: GO 12741
// ComMoveToArea ( i , area ) ;
12727: LD_VAR 0 15
12731: PPUSH
12732: LD_VAR 0 2
12736: PPUSH
12737: CALL_OW 113
// end ;
12741: GO 12580
12743: POP
12744: POP
// end else
12745: GO 13506
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
12747: LD_ADDR_VAR 0 35
12751: PUSH
12752: LD_VAR 0 2
12756: PPUSH
12757: LD_INT 3
12759: PUSH
12760: LD_INT 62
12762: PUSH
12763: EMPTY
12764: LIST
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: PUSH
12770: LD_INT 3
12772: PUSH
12773: LD_INT 57
12775: PUSH
12776: EMPTY
12777: LIST
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PUSH
12783: LD_INT 2
12785: PUSH
12786: LD_INT 30
12788: PUSH
12789: LD_INT 32
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: PUSH
12796: LD_INT 30
12798: PUSH
12799: LD_INT 4
12801: PUSH
12802: EMPTY
12803: LIST
12804: LIST
12805: PUSH
12806: LD_INT 30
12808: PUSH
12809: LD_INT 5
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PUSH
12816: LD_INT 30
12818: PUSH
12819: LD_INT 31
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: LIST
12837: PPUSH
12838: CALL_OW 70
12842: ST_TO_ADDR
// emptyTowers := [ ] ;
12843: LD_ADDR_VAR 0 37
12847: PUSH
12848: EMPTY
12849: ST_TO_ADDR
// if empty then
12850: LD_VAR 0 35
12854: IFFALSE 12920
// emptyTowers := UnitFilter ( empty , [ [ f_not , [ f_tag , tTower ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
12856: LD_ADDR_VAR 0 37
12860: PUSH
12861: LD_VAR 0 35
12865: PPUSH
12866: LD_INT 3
12868: PUSH
12869: LD_INT 120
12871: PUSH
12872: LD_INT 10
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: PUSH
12883: LD_INT 2
12885: PUSH
12886: LD_INT 30
12888: PUSH
12889: LD_INT 32
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: PUSH
12896: LD_INT 30
12898: PUSH
12899: LD_INT 33
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: LIST
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PPUSH
12915: CALL_OW 72
12919: ST_TO_ADDR
// for i in sol do
12920: LD_ADDR_VAR 0 15
12924: PUSH
12925: LD_VAR 0 25
12929: PUSH
12930: FOR_IN
12931: IFFALSE 13504
// begin tag := GetTag ( i ) ;
12933: LD_ADDR_VAR 0 21
12937: PUSH
12938: LD_VAR 0 15
12942: PPUSH
12943: CALL_OW 110
12947: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
12948: LD_VAR 0 15
12952: PPUSH
12953: CALL_OW 256
12957: PUSH
12958: LD_INT 1000
12960: LESS
12961: IFFALSE 12973
12963: PUSH
12964: LD_VAR 0 21
12968: PUSH
12969: LD_INT 1
12971: NONEQUAL
12972: AND
12973: IFFALSE 13025
// begin SetTag ( i , tHeal ) ;
12975: LD_VAR 0 15
12979: PPUSH
12980: LD_INT 1
12982: PPUSH
12983: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
12987: LD_VAR 0 15
12991: PPUSH
12992: LD_VAR 0 11
12996: PUSH
12997: LD_INT 1
12999: ARRAY
13000: PPUSH
13001: LD_VAR 0 11
13005: PUSH
13006: LD_INT 2
13008: ARRAY
13009: PPUSH
13010: CALL_OW 111
// AddComHold ( i ) ;
13014: LD_VAR 0 15
13018: PPUSH
13019: CALL_OW 200
// continue ;
13023: GO 12930
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
13025: LD_VAR 0 15
13029: PPUSH
13030: CALL_OW 256
13034: PUSH
13035: LD_INT 1000
13037: EQUAL
13038: IFFALSE 13050
13040: PUSH
13041: LD_VAR 0 21
13045: PUSH
13046: LD_INT 1
13048: EQUAL
13049: AND
13050: IFFALSE 13066
// begin SetTag ( i , 0 ) ;
13052: LD_VAR 0 15
13056: PPUSH
13057: LD_INT 0
13059: PPUSH
13060: CALL_OW 109
// continue ;
13064: GO 12930
// end ; if HasTask ( i ) then
13066: LD_VAR 0 15
13070: PPUSH
13071: CALL_OW 314
13075: IFFALSE 13079
// continue ;
13077: GO 12930
// if not IsInUnit ( i ) and not tag and empty then
13079: LD_VAR 0 15
13083: PPUSH
13084: CALL_OW 310
13088: NOT
13089: IFFALSE 13098
13091: PUSH
13092: LD_VAR 0 21
13096: NOT
13097: AND
13098: IFFALSE 13106
13100: PUSH
13101: LD_VAR 0 35
13105: AND
13106: IFFALSE 13146
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
13108: LD_VAR 0 15
13112: PPUSH
13113: LD_VAR 0 35
13117: PUSH
13118: LD_INT 1
13120: ARRAY
13121: PPUSH
13122: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
13126: LD_ADDR_VAR 0 35
13130: PUSH
13131: LD_VAR 0 35
13135: PPUSH
13136: LD_INT 1
13138: PPUSH
13139: CALL_OW 3
13143: ST_TO_ADDR
// continue ;
13144: GO 12930
// end ; if IsInUnit ( i ) and not tag and Count ( emptyTowers ) then
13146: LD_VAR 0 15
13150: PPUSH
13151: CALL_OW 310
13155: IFFALSE 13164
13157: PUSH
13158: LD_VAR 0 21
13162: NOT
13163: AND
13164: IFFALSE 13177
13166: PUSH
13167: LD_VAR 0 37
13171: PPUSH
13172: CALL 37216 0 1
13176: AND
13177: IFFALSE 13373
// begin if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
13179: LD_VAR 0 15
13183: PPUSH
13184: CALL_OW 310
13188: PPUSH
13189: CALL_OW 266
13193: PUSH
13194: LD_INT 32
13196: PUSH
13197: LD_INT 31
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: IN
13204: IFFALSE 13208
// continue ;
13206: GO 12930
// SetTag ( i , tTower ) ;
13208: LD_VAR 0 15
13212: PPUSH
13213: LD_INT 10
13215: PPUSH
13216: CALL_OW 109
// SetTag ( emptyTowers [ 1 ] , tTower ) ;
13220: LD_VAR 0 37
13224: PUSH
13225: LD_INT 1
13227: ARRAY
13228: PPUSH
13229: LD_INT 10
13231: PPUSH
13232: CALL_OW 109
// ComExit ( i ) ;
13236: LD_VAR 0 15
13240: PPUSH
13241: CALL 73546 0 1
// AddComEnterUnit ( i , emptyTowers [ 1 ] ) ;
13245: LD_VAR 0 15
13249: PPUSH
13250: LD_VAR 0 37
13254: PUSH
13255: LD_INT 1
13257: ARRAY
13258: PPUSH
13259: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
13263: LD_INT 35
13265: PPUSH
13266: CALL_OW 67
// if not HasTask ( i ) then
13270: LD_VAR 0 15
13274: PPUSH
13275: CALL_OW 314
13279: NOT
13280: IFFALSE 13300
// ComEnterUnit ( i , emptyTowers [ 1 ] ) ;
13282: LD_VAR 0 15
13286: PPUSH
13287: LD_VAR 0 37
13291: PUSH
13292: LD_INT 1
13294: ARRAY
13295: PPUSH
13296: CALL_OW 120
// if not IsEmpty ( emptyTowers [ 1 ] ) then
13300: LD_VAR 0 37
13304: PUSH
13305: LD_INT 1
13307: ARRAY
13308: PPUSH
13309: CALL 37238 0 1
13313: NOT
13314: IFFALSE 13318
// break ;
13316: GO 13343
// until IsInUnit ( i ) or not IsOk ( i ) ;
13318: LD_VAR 0 15
13322: PPUSH
13323: CALL_OW 310
13327: IFTRUE 13341
13329: PUSH
13330: LD_VAR 0 15
13334: PPUSH
13335: CALL_OW 302
13339: NOT
13340: OR
13341: IFFALSE 13263
// SetTag ( i , 0 ) ;
13343: LD_VAR 0 15
13347: PPUSH
13348: LD_INT 0
13350: PPUSH
13351: CALL_OW 109
// SetTag ( emptyTowers [ 1 ] , 0 ) ;
13355: LD_VAR 0 37
13359: PUSH
13360: LD_INT 1
13362: ARRAY
13363: PPUSH
13364: LD_INT 0
13366: PPUSH
13367: CALL_OW 109
// continue ;
13371: GO 12930
// end ; if IsInUnit ( i ) and not tag and GetTech ( tech_LasSight , side ) = state_researched and GetClass ( i ) <> class_sniper then
13373: LD_VAR 0 15
13377: PPUSH
13378: CALL_OW 310
13382: IFFALSE 13391
13384: PUSH
13385: LD_VAR 0 21
13389: NOT
13390: AND
13391: IFFALSE 13411
13393: PUSH
13394: LD_INT 12
13396: PPUSH
13397: LD_VAR 0 1
13401: PPUSH
13402: CALL_OW 321
13406: PUSH
13407: LD_INT 2
13409: EQUAL
13410: AND
13411: IFFALSE 13428
13413: PUSH
13414: LD_VAR 0 15
13418: PPUSH
13419: CALL_OW 257
13423: PUSH
13424: LD_INT 5
13426: NONEQUAL
13427: AND
13428: IFFALSE 13502
// begin tmp := IsInUnit ( i ) ;
13430: LD_ADDR_VAR 0 16
13434: PUSH
13435: LD_VAR 0 15
13439: PPUSH
13440: CALL_OW 310
13444: ST_TO_ADDR
// if GetBType ( tmp ) = b_barracks then
13445: LD_VAR 0 16
13449: PPUSH
13450: CALL_OW 266
13454: PUSH
13455: LD_INT 5
13457: EQUAL
13458: IFFALSE 13502
// begin if UnitFilter ( UnitsInside ( tmp ) , [ f_class , class_soldier ] ) > 3 then
13460: LD_VAR 0 16
13464: PPUSH
13465: CALL_OW 313
13469: PPUSH
13470: LD_INT 25
13472: PUSH
13473: LD_INT 1
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PPUSH
13480: CALL_OW 72
13484: PUSH
13485: LD_INT 3
13487: GREATER
13488: IFFALSE 13502
// SetClass ( i , class_sniper ) ;
13490: LD_VAR 0 15
13494: PPUSH
13495: LD_INT 5
13497: PPUSH
13498: CALL_OW 336
// end ; end ; end ;
13502: GO 12930
13504: POP
13505: POP
// end ; end ; end ; end_of_file end_of_file
13506: LD_VAR 0 14
13510: RET
// export globalGameSaveCounter ; every 0 0$1 do
13511: GO 13513
13513: DISABLE
// begin enable ;
13514: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
13515: LD_STRING updateTimer(
13517: PUSH
13518: LD_OWVAR 1
13522: STR
13523: PUSH
13524: LD_STRING );
13526: STR
13527: PPUSH
13528: CALL_OW 559
// end ;
13532: END
// every 0 0$1 do
13533: GO 13535
13535: DISABLE
// begin globalGameSaveCounter := 0 ;
13536: LD_ADDR_EXP 33
13540: PUSH
13541: LD_INT 0
13543: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
13544: LD_STRING setGameSaveCounter(0)
13546: PPUSH
13547: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
13551: LD_STRING initStreamRollete();
13553: PPUSH
13554: CALL_OW 559
// InitStreamMode ;
13558: CALL 14903 0 0
// DefineStreamItems ( false ) ;
13562: LD_INT 0
13564: PPUSH
13565: CALL 15367 0 1
// end ;
13569: END
// export function SOS_MapStart ( ) ; begin
13570: LD_INT 0
13572: PPUSH
// if streamModeActive then
13573: LD_EXP 34
13577: IFFALSE 13586
// DefineStreamItems ( true ) ;
13579: LD_INT 1
13581: PPUSH
13582: CALL 15367 0 1
// UpdateLuaVariables ( ) ;
13586: CALL 13603 0 0
// UpdateFactoryWaypoints ( ) ;
13590: CALL 28489 0 0
// UpdateWarehouseGatheringPoints ( ) ;
13594: CALL 28741 0 0
// end ;
13598: LD_VAR 0 1
13602: RET
// function UpdateLuaVariables ( ) ; begin
13603: LD_INT 0
13605: PPUSH
// if globalGameSaveCounter then
13606: LD_EXP 33
13610: IFFALSE 13644
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
13612: LD_ADDR_EXP 33
13616: PUSH
13617: LD_EXP 33
13621: PPUSH
13622: CALL 74521 0 1
13626: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
13627: LD_STRING setGameSaveCounter(
13629: PUSH
13630: LD_EXP 33
13634: STR
13635: PUSH
13636: LD_STRING )
13638: STR
13639: PPUSH
13640: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
13644: LD_STRING setGameDifficulty(
13646: PUSH
13647: LD_OWVAR 67
13651: STR
13652: PUSH
13653: LD_STRING )
13655: STR
13656: PPUSH
13657: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
13661: LD_STRING displayDifficulty(
13663: PUSH
13664: LD_OWVAR 67
13668: STR
13669: PUSH
13670: LD_STRING )
13672: STR
13673: PPUSH
13674: CALL_OW 559
// end ;
13678: LD_VAR 0 1
13682: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13683: LD_INT 0
13685: PPUSH
// if p2 = stream_mode then
13686: LD_VAR 0 2
13690: PUSH
13691: LD_INT 100
13693: EQUAL
13694: IFFALSE 14697
// begin if not StreamModeActive then
13696: LD_EXP 34
13700: NOT
13701: IFFALSE 13711
// StreamModeActive := true ;
13703: LD_ADDR_EXP 34
13707: PUSH
13708: LD_INT 1
13710: ST_TO_ADDR
// if p3 = 0 then
13711: LD_VAR 0 3
13715: PUSH
13716: LD_INT 0
13718: EQUAL
13719: IFFALSE 13725
// InitStreamMode ;
13721: CALL 14903 0 0
// if p3 = 1 then
13725: LD_VAR 0 3
13729: PUSH
13730: LD_INT 1
13732: EQUAL
13733: IFFALSE 13743
// sRocket := true ;
13735: LD_ADDR_EXP 39
13739: PUSH
13740: LD_INT 1
13742: ST_TO_ADDR
// if p3 = 2 then
13743: LD_VAR 0 3
13747: PUSH
13748: LD_INT 2
13750: EQUAL
13751: IFFALSE 13761
// sSpeed := true ;
13753: LD_ADDR_EXP 38
13757: PUSH
13758: LD_INT 1
13760: ST_TO_ADDR
// if p3 = 3 then
13761: LD_VAR 0 3
13765: PUSH
13766: LD_INT 3
13768: EQUAL
13769: IFFALSE 13779
// sEngine := true ;
13771: LD_ADDR_EXP 40
13775: PUSH
13776: LD_INT 1
13778: ST_TO_ADDR
// if p3 = 4 then
13779: LD_VAR 0 3
13783: PUSH
13784: LD_INT 4
13786: EQUAL
13787: IFFALSE 13797
// sSpec := true ;
13789: LD_ADDR_EXP 37
13793: PUSH
13794: LD_INT 1
13796: ST_TO_ADDR
// if p3 = 5 then
13797: LD_VAR 0 3
13801: PUSH
13802: LD_INT 5
13804: EQUAL
13805: IFFALSE 13815
// sLevel := true ;
13807: LD_ADDR_EXP 41
13811: PUSH
13812: LD_INT 1
13814: ST_TO_ADDR
// if p3 = 6 then
13815: LD_VAR 0 3
13819: PUSH
13820: LD_INT 6
13822: EQUAL
13823: IFFALSE 13833
// sArmoury := true ;
13825: LD_ADDR_EXP 42
13829: PUSH
13830: LD_INT 1
13832: ST_TO_ADDR
// if p3 = 7 then
13833: LD_VAR 0 3
13837: PUSH
13838: LD_INT 7
13840: EQUAL
13841: IFFALSE 13851
// sRadar := true ;
13843: LD_ADDR_EXP 43
13847: PUSH
13848: LD_INT 1
13850: ST_TO_ADDR
// if p3 = 8 then
13851: LD_VAR 0 3
13855: PUSH
13856: LD_INT 8
13858: EQUAL
13859: IFFALSE 13869
// sBunker := true ;
13861: LD_ADDR_EXP 44
13865: PUSH
13866: LD_INT 1
13868: ST_TO_ADDR
// if p3 = 9 then
13869: LD_VAR 0 3
13873: PUSH
13874: LD_INT 9
13876: EQUAL
13877: IFFALSE 13887
// sHack := true ;
13879: LD_ADDR_EXP 45
13883: PUSH
13884: LD_INT 1
13886: ST_TO_ADDR
// if p3 = 10 then
13887: LD_VAR 0 3
13891: PUSH
13892: LD_INT 10
13894: EQUAL
13895: IFFALSE 13905
// sFire := true ;
13897: LD_ADDR_EXP 46
13901: PUSH
13902: LD_INT 1
13904: ST_TO_ADDR
// if p3 = 11 then
13905: LD_VAR 0 3
13909: PUSH
13910: LD_INT 11
13912: EQUAL
13913: IFFALSE 13923
// sRefresh := true ;
13915: LD_ADDR_EXP 47
13919: PUSH
13920: LD_INT 1
13922: ST_TO_ADDR
// if p3 = 12 then
13923: LD_VAR 0 3
13927: PUSH
13928: LD_INT 12
13930: EQUAL
13931: IFFALSE 13941
// sExp := true ;
13933: LD_ADDR_EXP 48
13937: PUSH
13938: LD_INT 1
13940: ST_TO_ADDR
// if p3 = 13 then
13941: LD_VAR 0 3
13945: PUSH
13946: LD_INT 13
13948: EQUAL
13949: IFFALSE 13959
// sDepot := true ;
13951: LD_ADDR_EXP 49
13955: PUSH
13956: LD_INT 1
13958: ST_TO_ADDR
// if p3 = 14 then
13959: LD_VAR 0 3
13963: PUSH
13964: LD_INT 14
13966: EQUAL
13967: IFFALSE 13977
// sFlag := true ;
13969: LD_ADDR_EXP 50
13973: PUSH
13974: LD_INT 1
13976: ST_TO_ADDR
// if p3 = 15 then
13977: LD_VAR 0 3
13981: PUSH
13982: LD_INT 15
13984: EQUAL
13985: IFFALSE 13995
// sKamikadze := true ;
13987: LD_ADDR_EXP 58
13991: PUSH
13992: LD_INT 1
13994: ST_TO_ADDR
// if p3 = 16 then
13995: LD_VAR 0 3
13999: PUSH
14000: LD_INT 16
14002: EQUAL
14003: IFFALSE 14013
// sTroll := true ;
14005: LD_ADDR_EXP 59
14009: PUSH
14010: LD_INT 1
14012: ST_TO_ADDR
// if p3 = 17 then
14013: LD_VAR 0 3
14017: PUSH
14018: LD_INT 17
14020: EQUAL
14021: IFFALSE 14031
// sSlow := true ;
14023: LD_ADDR_EXP 60
14027: PUSH
14028: LD_INT 1
14030: ST_TO_ADDR
// if p3 = 18 then
14031: LD_VAR 0 3
14035: PUSH
14036: LD_INT 18
14038: EQUAL
14039: IFFALSE 14049
// sLack := true ;
14041: LD_ADDR_EXP 61
14045: PUSH
14046: LD_INT 1
14048: ST_TO_ADDR
// if p3 = 19 then
14049: LD_VAR 0 3
14053: PUSH
14054: LD_INT 19
14056: EQUAL
14057: IFFALSE 14067
// sTank := true ;
14059: LD_ADDR_EXP 63
14063: PUSH
14064: LD_INT 1
14066: ST_TO_ADDR
// if p3 = 20 then
14067: LD_VAR 0 3
14071: PUSH
14072: LD_INT 20
14074: EQUAL
14075: IFFALSE 14085
// sRemote := true ;
14077: LD_ADDR_EXP 64
14081: PUSH
14082: LD_INT 1
14084: ST_TO_ADDR
// if p3 = 21 then
14085: LD_VAR 0 3
14089: PUSH
14090: LD_INT 21
14092: EQUAL
14093: IFFALSE 14103
// sPowell := true ;
14095: LD_ADDR_EXP 65
14099: PUSH
14100: LD_INT 1
14102: ST_TO_ADDR
// if p3 = 22 then
14103: LD_VAR 0 3
14107: PUSH
14108: LD_INT 22
14110: EQUAL
14111: IFFALSE 14121
// sTeleport := true ;
14113: LD_ADDR_EXP 68
14117: PUSH
14118: LD_INT 1
14120: ST_TO_ADDR
// if p3 = 23 then
14121: LD_VAR 0 3
14125: PUSH
14126: LD_INT 23
14128: EQUAL
14129: IFFALSE 14139
// sOilTower := true ;
14131: LD_ADDR_EXP 70
14135: PUSH
14136: LD_INT 1
14138: ST_TO_ADDR
// if p3 = 24 then
14139: LD_VAR 0 3
14143: PUSH
14144: LD_INT 24
14146: EQUAL
14147: IFFALSE 14157
// sShovel := true ;
14149: LD_ADDR_EXP 71
14153: PUSH
14154: LD_INT 1
14156: ST_TO_ADDR
// if p3 = 25 then
14157: LD_VAR 0 3
14161: PUSH
14162: LD_INT 25
14164: EQUAL
14165: IFFALSE 14175
// sSheik := true ;
14167: LD_ADDR_EXP 72
14171: PUSH
14172: LD_INT 1
14174: ST_TO_ADDR
// if p3 = 26 then
14175: LD_VAR 0 3
14179: PUSH
14180: LD_INT 26
14182: EQUAL
14183: IFFALSE 14193
// sEarthquake := true ;
14185: LD_ADDR_EXP 74
14189: PUSH
14190: LD_INT 1
14192: ST_TO_ADDR
// if p3 = 27 then
14193: LD_VAR 0 3
14197: PUSH
14198: LD_INT 27
14200: EQUAL
14201: IFFALSE 14211
// sAI := true ;
14203: LD_ADDR_EXP 75
14207: PUSH
14208: LD_INT 1
14210: ST_TO_ADDR
// if p3 = 28 then
14211: LD_VAR 0 3
14215: PUSH
14216: LD_INT 28
14218: EQUAL
14219: IFFALSE 14229
// sCargo := true ;
14221: LD_ADDR_EXP 78
14225: PUSH
14226: LD_INT 1
14228: ST_TO_ADDR
// if p3 = 29 then
14229: LD_VAR 0 3
14233: PUSH
14234: LD_INT 29
14236: EQUAL
14237: IFFALSE 14247
// sDLaser := true ;
14239: LD_ADDR_EXP 79
14243: PUSH
14244: LD_INT 1
14246: ST_TO_ADDR
// if p3 = 30 then
14247: LD_VAR 0 3
14251: PUSH
14252: LD_INT 30
14254: EQUAL
14255: IFFALSE 14265
// sExchange := true ;
14257: LD_ADDR_EXP 80
14261: PUSH
14262: LD_INT 1
14264: ST_TO_ADDR
// if p3 = 31 then
14265: LD_VAR 0 3
14269: PUSH
14270: LD_INT 31
14272: EQUAL
14273: IFFALSE 14283
// sFac := true ;
14275: LD_ADDR_EXP 81
14279: PUSH
14280: LD_INT 1
14282: ST_TO_ADDR
// if p3 = 32 then
14283: LD_VAR 0 3
14287: PUSH
14288: LD_INT 32
14290: EQUAL
14291: IFFALSE 14301
// sPower := true ;
14293: LD_ADDR_EXP 82
14297: PUSH
14298: LD_INT 1
14300: ST_TO_ADDR
// if p3 = 33 then
14301: LD_VAR 0 3
14305: PUSH
14306: LD_INT 33
14308: EQUAL
14309: IFFALSE 14319
// sRandom := true ;
14311: LD_ADDR_EXP 83
14315: PUSH
14316: LD_INT 1
14318: ST_TO_ADDR
// if p3 = 34 then
14319: LD_VAR 0 3
14323: PUSH
14324: LD_INT 34
14326: EQUAL
14327: IFFALSE 14337
// sShield := true ;
14329: LD_ADDR_EXP 84
14333: PUSH
14334: LD_INT 1
14336: ST_TO_ADDR
// if p3 = 35 then
14337: LD_VAR 0 3
14341: PUSH
14342: LD_INT 35
14344: EQUAL
14345: IFFALSE 14355
// sTime := true ;
14347: LD_ADDR_EXP 85
14351: PUSH
14352: LD_INT 1
14354: ST_TO_ADDR
// if p3 = 36 then
14355: LD_VAR 0 3
14359: PUSH
14360: LD_INT 36
14362: EQUAL
14363: IFFALSE 14373
// sTools := true ;
14365: LD_ADDR_EXP 86
14369: PUSH
14370: LD_INT 1
14372: ST_TO_ADDR
// if p3 = 101 then
14373: LD_VAR 0 3
14377: PUSH
14378: LD_INT 101
14380: EQUAL
14381: IFFALSE 14391
// sSold := true ;
14383: LD_ADDR_EXP 51
14387: PUSH
14388: LD_INT 1
14390: ST_TO_ADDR
// if p3 = 102 then
14391: LD_VAR 0 3
14395: PUSH
14396: LD_INT 102
14398: EQUAL
14399: IFFALSE 14409
// sDiff := true ;
14401: LD_ADDR_EXP 52
14405: PUSH
14406: LD_INT 1
14408: ST_TO_ADDR
// if p3 = 103 then
14409: LD_VAR 0 3
14413: PUSH
14414: LD_INT 103
14416: EQUAL
14417: IFFALSE 14427
// sFog := true ;
14419: LD_ADDR_EXP 55
14423: PUSH
14424: LD_INT 1
14426: ST_TO_ADDR
// if p3 = 104 then
14427: LD_VAR 0 3
14431: PUSH
14432: LD_INT 104
14434: EQUAL
14435: IFFALSE 14445
// sReset := true ;
14437: LD_ADDR_EXP 56
14441: PUSH
14442: LD_INT 1
14444: ST_TO_ADDR
// if p3 = 105 then
14445: LD_VAR 0 3
14449: PUSH
14450: LD_INT 105
14452: EQUAL
14453: IFFALSE 14463
// sSun := true ;
14455: LD_ADDR_EXP 57
14459: PUSH
14460: LD_INT 1
14462: ST_TO_ADDR
// if p3 = 106 then
14463: LD_VAR 0 3
14467: PUSH
14468: LD_INT 106
14470: EQUAL
14471: IFFALSE 14481
// sTiger := true ;
14473: LD_ADDR_EXP 53
14477: PUSH
14478: LD_INT 1
14480: ST_TO_ADDR
// if p3 = 107 then
14481: LD_VAR 0 3
14485: PUSH
14486: LD_INT 107
14488: EQUAL
14489: IFFALSE 14499
// sBomb := true ;
14491: LD_ADDR_EXP 54
14495: PUSH
14496: LD_INT 1
14498: ST_TO_ADDR
// if p3 = 108 then
14499: LD_VAR 0 3
14503: PUSH
14504: LD_INT 108
14506: EQUAL
14507: IFFALSE 14517
// sWound := true ;
14509: LD_ADDR_EXP 62
14513: PUSH
14514: LD_INT 1
14516: ST_TO_ADDR
// if p3 = 109 then
14517: LD_VAR 0 3
14521: PUSH
14522: LD_INT 109
14524: EQUAL
14525: IFFALSE 14535
// sBetray := true ;
14527: LD_ADDR_EXP 66
14531: PUSH
14532: LD_INT 1
14534: ST_TO_ADDR
// if p3 = 110 then
14535: LD_VAR 0 3
14539: PUSH
14540: LD_INT 110
14542: EQUAL
14543: IFFALSE 14553
// sContamin := true ;
14545: LD_ADDR_EXP 67
14549: PUSH
14550: LD_INT 1
14552: ST_TO_ADDR
// if p3 = 111 then
14553: LD_VAR 0 3
14557: PUSH
14558: LD_INT 111
14560: EQUAL
14561: IFFALSE 14571
// sOil := true ;
14563: LD_ADDR_EXP 69
14567: PUSH
14568: LD_INT 1
14570: ST_TO_ADDR
// if p3 = 112 then
14571: LD_VAR 0 3
14575: PUSH
14576: LD_INT 112
14578: EQUAL
14579: IFFALSE 14589
// sStu := true ;
14581: LD_ADDR_EXP 73
14585: PUSH
14586: LD_INT 1
14588: ST_TO_ADDR
// if p3 = 113 then
14589: LD_VAR 0 3
14593: PUSH
14594: LD_INT 113
14596: EQUAL
14597: IFFALSE 14607
// sBazooka := true ;
14599: LD_ADDR_EXP 76
14603: PUSH
14604: LD_INT 1
14606: ST_TO_ADDR
// if p3 = 114 then
14607: LD_VAR 0 3
14611: PUSH
14612: LD_INT 114
14614: EQUAL
14615: IFFALSE 14625
// sMortar := true ;
14617: LD_ADDR_EXP 77
14621: PUSH
14622: LD_INT 1
14624: ST_TO_ADDR
// if p3 = 115 then
14625: LD_VAR 0 3
14629: PUSH
14630: LD_INT 115
14632: EQUAL
14633: IFFALSE 14643
// sRanger := true ;
14635: LD_ADDR_EXP 87
14639: PUSH
14640: LD_INT 1
14642: ST_TO_ADDR
// if p3 = 116 then
14643: LD_VAR 0 3
14647: PUSH
14648: LD_INT 116
14650: EQUAL
14651: IFFALSE 14661
// sComputer := true ;
14653: LD_ADDR_EXP 88
14657: PUSH
14658: LD_INT 1
14660: ST_TO_ADDR
// if p3 = 117 then
14661: LD_VAR 0 3
14665: PUSH
14666: LD_INT 117
14668: EQUAL
14669: IFFALSE 14679
// s30 := true ;
14671: LD_ADDR_EXP 89
14675: PUSH
14676: LD_INT 1
14678: ST_TO_ADDR
// if p3 = 118 then
14679: LD_VAR 0 3
14683: PUSH
14684: LD_INT 118
14686: EQUAL
14687: IFFALSE 14697
// s60 := true ;
14689: LD_ADDR_EXP 90
14693: PUSH
14694: LD_INT 1
14696: ST_TO_ADDR
// end ; if p2 = hack_mode then
14697: LD_VAR 0 2
14701: PUSH
14702: LD_INT 101
14704: EQUAL
14705: IFFALSE 14833
// begin case p3 of 1 :
14707: LD_VAR 0 3
14711: PUSH
14712: LD_INT 1
14714: DOUBLE
14715: EQUAL
14716: IFTRUE 14720
14718: GO 14727
14720: POP
// hHackUnlimitedResources ; 2 :
14721: CALL 27096 0 0
14725: GO 14833
14727: LD_INT 2
14729: DOUBLE
14730: EQUAL
14731: IFTRUE 14735
14733: GO 14742
14735: POP
// hHackSetLevel10 ; 3 :
14736: CALL 27229 0 0
14740: GO 14833
14742: LD_INT 3
14744: DOUBLE
14745: EQUAL
14746: IFTRUE 14750
14748: GO 14757
14750: POP
// hHackSetLevel10YourUnits ; 4 :
14751: CALL 27314 0 0
14755: GO 14833
14757: LD_INT 4
14759: DOUBLE
14760: EQUAL
14761: IFTRUE 14765
14763: GO 14772
14765: POP
// hHackInvincible ; 5 :
14766: CALL 27762 0 0
14770: GO 14833
14772: LD_INT 5
14774: DOUBLE
14775: EQUAL
14776: IFTRUE 14780
14778: GO 14787
14780: POP
// hHackInvisible ; 6 :
14781: CALL 27873 0 0
14785: GO 14833
14787: LD_INT 6
14789: DOUBLE
14790: EQUAL
14791: IFTRUE 14795
14793: GO 14802
14795: POP
// hHackChangeYourSide ; 7 :
14796: CALL 27930 0 0
14800: GO 14833
14802: LD_INT 7
14804: DOUBLE
14805: EQUAL
14806: IFTRUE 14810
14808: GO 14817
14810: POP
// hHackChangeUnitSide ; 8 :
14811: CALL 27972 0 0
14815: GO 14833
14817: LD_INT 8
14819: DOUBLE
14820: EQUAL
14821: IFTRUE 14825
14823: GO 14832
14825: POP
// hHackFog ; end ;
14826: CALL 28073 0 0
14830: GO 14833
14832: POP
// end ; if p2 = game_save_mode then
14833: LD_VAR 0 2
14837: PUSH
14838: LD_INT 102
14840: EQUAL
14841: IFFALSE 14898
// begin if p3 = 1 then
14843: LD_VAR 0 3
14847: PUSH
14848: LD_INT 1
14850: EQUAL
14851: IFFALSE 14863
// globalGameSaveCounter := p4 ;
14853: LD_ADDR_EXP 33
14857: PUSH
14858: LD_VAR 0 4
14862: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
14863: LD_VAR 0 3
14867: PUSH
14868: LD_INT 2
14870: EQUAL
14871: IFFALSE 14879
14873: PUSH
14874: LD_EXP 33
14878: AND
14879: IFFALSE 14898
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
14881: LD_STRING setGameSaveCounter(
14883: PUSH
14884: LD_EXP 33
14888: STR
14889: PUSH
14890: LD_STRING )
14892: STR
14893: PPUSH
14894: CALL_OW 559
// end ; end ;
14898: LD_VAR 0 7
14902: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
14903: LD_INT 0
14905: PPUSH
// streamModeActive := false ;
14906: LD_ADDR_EXP 34
14910: PUSH
14911: LD_INT 0
14913: ST_TO_ADDR
// normalCounter := 36 ;
14914: LD_ADDR_EXP 35
14918: PUSH
14919: LD_INT 36
14921: ST_TO_ADDR
// hardcoreCounter := 18 ;
14922: LD_ADDR_EXP 36
14926: PUSH
14927: LD_INT 18
14929: ST_TO_ADDR
// sRocket := false ;
14930: LD_ADDR_EXP 39
14934: PUSH
14935: LD_INT 0
14937: ST_TO_ADDR
// sSpeed := false ;
14938: LD_ADDR_EXP 38
14942: PUSH
14943: LD_INT 0
14945: ST_TO_ADDR
// sEngine := false ;
14946: LD_ADDR_EXP 40
14950: PUSH
14951: LD_INT 0
14953: ST_TO_ADDR
// sSpec := false ;
14954: LD_ADDR_EXP 37
14958: PUSH
14959: LD_INT 0
14961: ST_TO_ADDR
// sLevel := false ;
14962: LD_ADDR_EXP 41
14966: PUSH
14967: LD_INT 0
14969: ST_TO_ADDR
// sArmoury := false ;
14970: LD_ADDR_EXP 42
14974: PUSH
14975: LD_INT 0
14977: ST_TO_ADDR
// sRadar := false ;
14978: LD_ADDR_EXP 43
14982: PUSH
14983: LD_INT 0
14985: ST_TO_ADDR
// sBunker := false ;
14986: LD_ADDR_EXP 44
14990: PUSH
14991: LD_INT 0
14993: ST_TO_ADDR
// sHack := false ;
14994: LD_ADDR_EXP 45
14998: PUSH
14999: LD_INT 0
15001: ST_TO_ADDR
// sFire := false ;
15002: LD_ADDR_EXP 46
15006: PUSH
15007: LD_INT 0
15009: ST_TO_ADDR
// sRefresh := false ;
15010: LD_ADDR_EXP 47
15014: PUSH
15015: LD_INT 0
15017: ST_TO_ADDR
// sExp := false ;
15018: LD_ADDR_EXP 48
15022: PUSH
15023: LD_INT 0
15025: ST_TO_ADDR
// sDepot := false ;
15026: LD_ADDR_EXP 49
15030: PUSH
15031: LD_INT 0
15033: ST_TO_ADDR
// sFlag := false ;
15034: LD_ADDR_EXP 50
15038: PUSH
15039: LD_INT 0
15041: ST_TO_ADDR
// sKamikadze := false ;
15042: LD_ADDR_EXP 58
15046: PUSH
15047: LD_INT 0
15049: ST_TO_ADDR
// sTroll := false ;
15050: LD_ADDR_EXP 59
15054: PUSH
15055: LD_INT 0
15057: ST_TO_ADDR
// sSlow := false ;
15058: LD_ADDR_EXP 60
15062: PUSH
15063: LD_INT 0
15065: ST_TO_ADDR
// sLack := false ;
15066: LD_ADDR_EXP 61
15070: PUSH
15071: LD_INT 0
15073: ST_TO_ADDR
// sTank := false ;
15074: LD_ADDR_EXP 63
15078: PUSH
15079: LD_INT 0
15081: ST_TO_ADDR
// sRemote := false ;
15082: LD_ADDR_EXP 64
15086: PUSH
15087: LD_INT 0
15089: ST_TO_ADDR
// sPowell := false ;
15090: LD_ADDR_EXP 65
15094: PUSH
15095: LD_INT 0
15097: ST_TO_ADDR
// sTeleport := false ;
15098: LD_ADDR_EXP 68
15102: PUSH
15103: LD_INT 0
15105: ST_TO_ADDR
// sOilTower := false ;
15106: LD_ADDR_EXP 70
15110: PUSH
15111: LD_INT 0
15113: ST_TO_ADDR
// sShovel := false ;
15114: LD_ADDR_EXP 71
15118: PUSH
15119: LD_INT 0
15121: ST_TO_ADDR
// sSheik := false ;
15122: LD_ADDR_EXP 72
15126: PUSH
15127: LD_INT 0
15129: ST_TO_ADDR
// sEarthquake := false ;
15130: LD_ADDR_EXP 74
15134: PUSH
15135: LD_INT 0
15137: ST_TO_ADDR
// sAI := false ;
15138: LD_ADDR_EXP 75
15142: PUSH
15143: LD_INT 0
15145: ST_TO_ADDR
// sCargo := false ;
15146: LD_ADDR_EXP 78
15150: PUSH
15151: LD_INT 0
15153: ST_TO_ADDR
// sDLaser := false ;
15154: LD_ADDR_EXP 79
15158: PUSH
15159: LD_INT 0
15161: ST_TO_ADDR
// sExchange := false ;
15162: LD_ADDR_EXP 80
15166: PUSH
15167: LD_INT 0
15169: ST_TO_ADDR
// sFac := false ;
15170: LD_ADDR_EXP 81
15174: PUSH
15175: LD_INT 0
15177: ST_TO_ADDR
// sPower := false ;
15178: LD_ADDR_EXP 82
15182: PUSH
15183: LD_INT 0
15185: ST_TO_ADDR
// sRandom := false ;
15186: LD_ADDR_EXP 83
15190: PUSH
15191: LD_INT 0
15193: ST_TO_ADDR
// sShield := false ;
15194: LD_ADDR_EXP 84
15198: PUSH
15199: LD_INT 0
15201: ST_TO_ADDR
// sTime := false ;
15202: LD_ADDR_EXP 85
15206: PUSH
15207: LD_INT 0
15209: ST_TO_ADDR
// sTools := false ;
15210: LD_ADDR_EXP 86
15214: PUSH
15215: LD_INT 0
15217: ST_TO_ADDR
// sSold := false ;
15218: LD_ADDR_EXP 51
15222: PUSH
15223: LD_INT 0
15225: ST_TO_ADDR
// sDiff := false ;
15226: LD_ADDR_EXP 52
15230: PUSH
15231: LD_INT 0
15233: ST_TO_ADDR
// sFog := false ;
15234: LD_ADDR_EXP 55
15238: PUSH
15239: LD_INT 0
15241: ST_TO_ADDR
// sReset := false ;
15242: LD_ADDR_EXP 56
15246: PUSH
15247: LD_INT 0
15249: ST_TO_ADDR
// sSun := false ;
15250: LD_ADDR_EXP 57
15254: PUSH
15255: LD_INT 0
15257: ST_TO_ADDR
// sTiger := false ;
15258: LD_ADDR_EXP 53
15262: PUSH
15263: LD_INT 0
15265: ST_TO_ADDR
// sBomb := false ;
15266: LD_ADDR_EXP 54
15270: PUSH
15271: LD_INT 0
15273: ST_TO_ADDR
// sWound := false ;
15274: LD_ADDR_EXP 62
15278: PUSH
15279: LD_INT 0
15281: ST_TO_ADDR
// sBetray := false ;
15282: LD_ADDR_EXP 66
15286: PUSH
15287: LD_INT 0
15289: ST_TO_ADDR
// sContamin := false ;
15290: LD_ADDR_EXP 67
15294: PUSH
15295: LD_INT 0
15297: ST_TO_ADDR
// sOil := false ;
15298: LD_ADDR_EXP 69
15302: PUSH
15303: LD_INT 0
15305: ST_TO_ADDR
// sStu := false ;
15306: LD_ADDR_EXP 73
15310: PUSH
15311: LD_INT 0
15313: ST_TO_ADDR
// sBazooka := false ;
15314: LD_ADDR_EXP 76
15318: PUSH
15319: LD_INT 0
15321: ST_TO_ADDR
// sMortar := false ;
15322: LD_ADDR_EXP 77
15326: PUSH
15327: LD_INT 0
15329: ST_TO_ADDR
// sRanger := false ;
15330: LD_ADDR_EXP 87
15334: PUSH
15335: LD_INT 0
15337: ST_TO_ADDR
// sComputer := false ;
15338: LD_ADDR_EXP 88
15342: PUSH
15343: LD_INT 0
15345: ST_TO_ADDR
// s30 := false ;
15346: LD_ADDR_EXP 89
15350: PUSH
15351: LD_INT 0
15353: ST_TO_ADDR
// s60 := false ;
15354: LD_ADDR_EXP 90
15358: PUSH
15359: LD_INT 0
15361: ST_TO_ADDR
// end ;
15362: LD_VAR 0 1
15366: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
15367: LD_INT 0
15369: PPUSH
15370: PPUSH
15371: PPUSH
15372: PPUSH
15373: PPUSH
15374: PPUSH
15375: PPUSH
// result := [ ] ;
15376: LD_ADDR_VAR 0 2
15380: PUSH
15381: EMPTY
15382: ST_TO_ADDR
// if campaign_id = 1 then
15383: LD_OWVAR 69
15387: PUSH
15388: LD_INT 1
15390: EQUAL
15391: IFFALSE 18557
// begin case mission_number of 1 :
15393: LD_OWVAR 70
15397: PUSH
15398: LD_INT 1
15400: DOUBLE
15401: EQUAL
15402: IFTRUE 15406
15404: GO 15482
15406: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
15407: LD_ADDR_VAR 0 2
15411: PUSH
15412: LD_INT 2
15414: PUSH
15415: LD_INT 4
15417: PUSH
15418: LD_INT 11
15420: PUSH
15421: LD_INT 12
15423: PUSH
15424: LD_INT 15
15426: PUSH
15427: LD_INT 16
15429: PUSH
15430: LD_INT 22
15432: PUSH
15433: LD_INT 23
15435: PUSH
15436: LD_INT 26
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: PUSH
15450: LD_INT 101
15452: PUSH
15453: LD_INT 102
15455: PUSH
15456: LD_INT 106
15458: PUSH
15459: LD_INT 116
15461: PUSH
15462: LD_INT 117
15464: PUSH
15465: LD_INT 118
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: ST_TO_ADDR
15480: GO 18555
15482: LD_INT 2
15484: DOUBLE
15485: EQUAL
15486: IFTRUE 15490
15488: GO 15574
15490: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
15491: LD_ADDR_VAR 0 2
15495: PUSH
15496: LD_INT 2
15498: PUSH
15499: LD_INT 4
15501: PUSH
15502: LD_INT 11
15504: PUSH
15505: LD_INT 12
15507: PUSH
15508: LD_INT 15
15510: PUSH
15511: LD_INT 16
15513: PUSH
15514: LD_INT 22
15516: PUSH
15517: LD_INT 23
15519: PUSH
15520: LD_INT 26
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: PUSH
15534: LD_INT 101
15536: PUSH
15537: LD_INT 102
15539: PUSH
15540: LD_INT 105
15542: PUSH
15543: LD_INT 106
15545: PUSH
15546: LD_INT 108
15548: PUSH
15549: LD_INT 116
15551: PUSH
15552: LD_INT 117
15554: PUSH
15555: LD_INT 118
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: ST_TO_ADDR
15572: GO 18555
15574: LD_INT 3
15576: DOUBLE
15577: EQUAL
15578: IFTRUE 15582
15580: GO 15670
15582: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
15583: LD_ADDR_VAR 0 2
15587: PUSH
15588: LD_INT 2
15590: PUSH
15591: LD_INT 4
15593: PUSH
15594: LD_INT 5
15596: PUSH
15597: LD_INT 11
15599: PUSH
15600: LD_INT 12
15602: PUSH
15603: LD_INT 15
15605: PUSH
15606: LD_INT 16
15608: PUSH
15609: LD_INT 22
15611: PUSH
15612: LD_INT 26
15614: PUSH
15615: LD_INT 36
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: PUSH
15630: LD_INT 101
15632: PUSH
15633: LD_INT 102
15635: PUSH
15636: LD_INT 105
15638: PUSH
15639: LD_INT 106
15641: PUSH
15642: LD_INT 108
15644: PUSH
15645: LD_INT 116
15647: PUSH
15648: LD_INT 117
15650: PUSH
15651: LD_INT 118
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: ST_TO_ADDR
15668: GO 18555
15670: LD_INT 4
15672: DOUBLE
15673: EQUAL
15674: IFTRUE 15678
15676: GO 15774
15678: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
15679: LD_ADDR_VAR 0 2
15683: PUSH
15684: LD_INT 2
15686: PUSH
15687: LD_INT 4
15689: PUSH
15690: LD_INT 5
15692: PUSH
15693: LD_INT 8
15695: PUSH
15696: LD_INT 11
15698: PUSH
15699: LD_INT 12
15701: PUSH
15702: LD_INT 15
15704: PUSH
15705: LD_INT 16
15707: PUSH
15708: LD_INT 22
15710: PUSH
15711: LD_INT 23
15713: PUSH
15714: LD_INT 26
15716: PUSH
15717: LD_INT 36
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 101
15736: PUSH
15737: LD_INT 102
15739: PUSH
15740: LD_INT 105
15742: PUSH
15743: LD_INT 106
15745: PUSH
15746: LD_INT 108
15748: PUSH
15749: LD_INT 116
15751: PUSH
15752: LD_INT 117
15754: PUSH
15755: LD_INT 118
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: ST_TO_ADDR
15772: GO 18555
15774: LD_INT 5
15776: DOUBLE
15777: EQUAL
15778: IFTRUE 15782
15780: GO 15894
15782: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
15783: LD_ADDR_VAR 0 2
15787: PUSH
15788: LD_INT 2
15790: PUSH
15791: LD_INT 4
15793: PUSH
15794: LD_INT 5
15796: PUSH
15797: LD_INT 6
15799: PUSH
15800: LD_INT 8
15802: PUSH
15803: LD_INT 11
15805: PUSH
15806: LD_INT 12
15808: PUSH
15809: LD_INT 15
15811: PUSH
15812: LD_INT 16
15814: PUSH
15815: LD_INT 22
15817: PUSH
15818: LD_INT 23
15820: PUSH
15821: LD_INT 25
15823: PUSH
15824: LD_INT 26
15826: PUSH
15827: LD_INT 36
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: PUSH
15846: LD_INT 101
15848: PUSH
15849: LD_INT 102
15851: PUSH
15852: LD_INT 105
15854: PUSH
15855: LD_INT 106
15857: PUSH
15858: LD_INT 108
15860: PUSH
15861: LD_INT 109
15863: PUSH
15864: LD_INT 112
15866: PUSH
15867: LD_INT 116
15869: PUSH
15870: LD_INT 117
15872: PUSH
15873: LD_INT 118
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: ST_TO_ADDR
15892: GO 18555
15894: LD_INT 6
15896: DOUBLE
15897: EQUAL
15898: IFTRUE 15902
15900: GO 16034
15902: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
15903: LD_ADDR_VAR 0 2
15907: PUSH
15908: LD_INT 2
15910: PUSH
15911: LD_INT 4
15913: PUSH
15914: LD_INT 5
15916: PUSH
15917: LD_INT 6
15919: PUSH
15920: LD_INT 8
15922: PUSH
15923: LD_INT 11
15925: PUSH
15926: LD_INT 12
15928: PUSH
15929: LD_INT 15
15931: PUSH
15932: LD_INT 16
15934: PUSH
15935: LD_INT 20
15937: PUSH
15938: LD_INT 21
15940: PUSH
15941: LD_INT 22
15943: PUSH
15944: LD_INT 23
15946: PUSH
15947: LD_INT 25
15949: PUSH
15950: LD_INT 26
15952: PUSH
15953: LD_INT 30
15955: PUSH
15956: LD_INT 31
15958: PUSH
15959: LD_INT 32
15961: PUSH
15962: LD_INT 36
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: PUSH
15986: LD_INT 101
15988: PUSH
15989: LD_INT 102
15991: PUSH
15992: LD_INT 105
15994: PUSH
15995: LD_INT 106
15997: PUSH
15998: LD_INT 108
16000: PUSH
16001: LD_INT 109
16003: PUSH
16004: LD_INT 112
16006: PUSH
16007: LD_INT 116
16009: PUSH
16010: LD_INT 117
16012: PUSH
16013: LD_INT 118
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: ST_TO_ADDR
16032: GO 18555
16034: LD_INT 7
16036: DOUBLE
16037: EQUAL
16038: IFTRUE 16042
16040: GO 16154
16042: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
16043: LD_ADDR_VAR 0 2
16047: PUSH
16048: LD_INT 2
16050: PUSH
16051: LD_INT 4
16053: PUSH
16054: LD_INT 5
16056: PUSH
16057: LD_INT 7
16059: PUSH
16060: LD_INT 11
16062: PUSH
16063: LD_INT 12
16065: PUSH
16066: LD_INT 15
16068: PUSH
16069: LD_INT 16
16071: PUSH
16072: LD_INT 20
16074: PUSH
16075: LD_INT 21
16077: PUSH
16078: LD_INT 22
16080: PUSH
16081: LD_INT 23
16083: PUSH
16084: LD_INT 25
16086: PUSH
16087: LD_INT 26
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: PUSH
16106: LD_INT 101
16108: PUSH
16109: LD_INT 102
16111: PUSH
16112: LD_INT 103
16114: PUSH
16115: LD_INT 105
16117: PUSH
16118: LD_INT 106
16120: PUSH
16121: LD_INT 108
16123: PUSH
16124: LD_INT 112
16126: PUSH
16127: LD_INT 116
16129: PUSH
16130: LD_INT 117
16132: PUSH
16133: LD_INT 118
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: ST_TO_ADDR
16152: GO 18555
16154: LD_INT 8
16156: DOUBLE
16157: EQUAL
16158: IFTRUE 16162
16160: GO 16302
16162: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
16163: LD_ADDR_VAR 0 2
16167: PUSH
16168: LD_INT 2
16170: PUSH
16171: LD_INT 4
16173: PUSH
16174: LD_INT 5
16176: PUSH
16177: LD_INT 6
16179: PUSH
16180: LD_INT 7
16182: PUSH
16183: LD_INT 8
16185: PUSH
16186: LD_INT 11
16188: PUSH
16189: LD_INT 12
16191: PUSH
16192: LD_INT 15
16194: PUSH
16195: LD_INT 16
16197: PUSH
16198: LD_INT 20
16200: PUSH
16201: LD_INT 21
16203: PUSH
16204: LD_INT 22
16206: PUSH
16207: LD_INT 23
16209: PUSH
16210: LD_INT 25
16212: PUSH
16213: LD_INT 26
16215: PUSH
16216: LD_INT 30
16218: PUSH
16219: LD_INT 31
16221: PUSH
16222: LD_INT 32
16224: PUSH
16225: LD_INT 36
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 101
16252: PUSH
16253: LD_INT 102
16255: PUSH
16256: LD_INT 103
16258: PUSH
16259: LD_INT 105
16261: PUSH
16262: LD_INT 106
16264: PUSH
16265: LD_INT 108
16267: PUSH
16268: LD_INT 109
16270: PUSH
16271: LD_INT 112
16273: PUSH
16274: LD_INT 116
16276: PUSH
16277: LD_INT 117
16279: PUSH
16280: LD_INT 118
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: ST_TO_ADDR
16300: GO 18555
16302: LD_INT 9
16304: DOUBLE
16305: EQUAL
16306: IFTRUE 16310
16308: GO 16458
16310: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
16311: LD_ADDR_VAR 0 2
16315: PUSH
16316: LD_INT 2
16318: PUSH
16319: LD_INT 4
16321: PUSH
16322: LD_INT 5
16324: PUSH
16325: LD_INT 6
16327: PUSH
16328: LD_INT 7
16330: PUSH
16331: LD_INT 8
16333: PUSH
16334: LD_INT 11
16336: PUSH
16337: LD_INT 12
16339: PUSH
16340: LD_INT 15
16342: PUSH
16343: LD_INT 16
16345: PUSH
16346: LD_INT 20
16348: PUSH
16349: LD_INT 21
16351: PUSH
16352: LD_INT 22
16354: PUSH
16355: LD_INT 23
16357: PUSH
16358: LD_INT 25
16360: PUSH
16361: LD_INT 26
16363: PUSH
16364: LD_INT 28
16366: PUSH
16367: LD_INT 30
16369: PUSH
16370: LD_INT 31
16372: PUSH
16373: LD_INT 32
16375: PUSH
16376: LD_INT 36
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: PUSH
16402: LD_INT 101
16404: PUSH
16405: LD_INT 102
16407: PUSH
16408: LD_INT 103
16410: PUSH
16411: LD_INT 105
16413: PUSH
16414: LD_INT 106
16416: PUSH
16417: LD_INT 108
16419: PUSH
16420: LD_INT 109
16422: PUSH
16423: LD_INT 112
16425: PUSH
16426: LD_INT 114
16428: PUSH
16429: LD_INT 116
16431: PUSH
16432: LD_INT 117
16434: PUSH
16435: LD_INT 118
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: ST_TO_ADDR
16456: GO 18555
16458: LD_INT 10
16460: DOUBLE
16461: EQUAL
16462: IFTRUE 16466
16464: GO 16662
16466: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
16467: LD_ADDR_VAR 0 2
16471: PUSH
16472: LD_INT 2
16474: PUSH
16475: LD_INT 4
16477: PUSH
16478: LD_INT 5
16480: PUSH
16481: LD_INT 6
16483: PUSH
16484: LD_INT 7
16486: PUSH
16487: LD_INT 8
16489: PUSH
16490: LD_INT 9
16492: PUSH
16493: LD_INT 10
16495: PUSH
16496: LD_INT 11
16498: PUSH
16499: LD_INT 12
16501: PUSH
16502: LD_INT 13
16504: PUSH
16505: LD_INT 14
16507: PUSH
16508: LD_INT 15
16510: PUSH
16511: LD_INT 16
16513: PUSH
16514: LD_INT 17
16516: PUSH
16517: LD_INT 18
16519: PUSH
16520: LD_INT 19
16522: PUSH
16523: LD_INT 20
16525: PUSH
16526: LD_INT 21
16528: PUSH
16529: LD_INT 22
16531: PUSH
16532: LD_INT 23
16534: PUSH
16535: LD_INT 24
16537: PUSH
16538: LD_INT 25
16540: PUSH
16541: LD_INT 26
16543: PUSH
16544: LD_INT 28
16546: PUSH
16547: LD_INT 30
16549: PUSH
16550: LD_INT 31
16552: PUSH
16553: LD_INT 32
16555: PUSH
16556: LD_INT 36
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: PUSH
16590: LD_INT 101
16592: PUSH
16593: LD_INT 102
16595: PUSH
16596: LD_INT 103
16598: PUSH
16599: LD_INT 104
16601: PUSH
16602: LD_INT 105
16604: PUSH
16605: LD_INT 106
16607: PUSH
16608: LD_INT 107
16610: PUSH
16611: LD_INT 108
16613: PUSH
16614: LD_INT 109
16616: PUSH
16617: LD_INT 110
16619: PUSH
16620: LD_INT 111
16622: PUSH
16623: LD_INT 112
16625: PUSH
16626: LD_INT 114
16628: PUSH
16629: LD_INT 116
16631: PUSH
16632: LD_INT 117
16634: PUSH
16635: LD_INT 118
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: ST_TO_ADDR
16660: GO 18555
16662: LD_INT 11
16664: DOUBLE
16665: EQUAL
16666: IFTRUE 16670
16668: GO 16874
16670: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
16671: LD_ADDR_VAR 0 2
16675: PUSH
16676: LD_INT 2
16678: PUSH
16679: LD_INT 3
16681: PUSH
16682: LD_INT 4
16684: PUSH
16685: LD_INT 5
16687: PUSH
16688: LD_INT 6
16690: PUSH
16691: LD_INT 7
16693: PUSH
16694: LD_INT 8
16696: PUSH
16697: LD_INT 9
16699: PUSH
16700: LD_INT 10
16702: PUSH
16703: LD_INT 11
16705: PUSH
16706: LD_INT 12
16708: PUSH
16709: LD_INT 13
16711: PUSH
16712: LD_INT 14
16714: PUSH
16715: LD_INT 15
16717: PUSH
16718: LD_INT 16
16720: PUSH
16721: LD_INT 17
16723: PUSH
16724: LD_INT 18
16726: PUSH
16727: LD_INT 19
16729: PUSH
16730: LD_INT 20
16732: PUSH
16733: LD_INT 21
16735: PUSH
16736: LD_INT 22
16738: PUSH
16739: LD_INT 23
16741: PUSH
16742: LD_INT 24
16744: PUSH
16745: LD_INT 25
16747: PUSH
16748: LD_INT 26
16750: PUSH
16751: LD_INT 28
16753: PUSH
16754: LD_INT 30
16756: PUSH
16757: LD_INT 31
16759: PUSH
16760: LD_INT 32
16762: PUSH
16763: LD_INT 34
16765: PUSH
16766: LD_INT 36
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 101
16804: PUSH
16805: LD_INT 102
16807: PUSH
16808: LD_INT 103
16810: PUSH
16811: LD_INT 104
16813: PUSH
16814: LD_INT 105
16816: PUSH
16817: LD_INT 106
16819: PUSH
16820: LD_INT 107
16822: PUSH
16823: LD_INT 108
16825: PUSH
16826: LD_INT 109
16828: PUSH
16829: LD_INT 110
16831: PUSH
16832: LD_INT 111
16834: PUSH
16835: LD_INT 112
16837: PUSH
16838: LD_INT 114
16840: PUSH
16841: LD_INT 116
16843: PUSH
16844: LD_INT 117
16846: PUSH
16847: LD_INT 118
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: ST_TO_ADDR
16872: GO 18555
16874: LD_INT 12
16876: DOUBLE
16877: EQUAL
16878: IFTRUE 16882
16880: GO 17102
16882: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
16883: LD_ADDR_VAR 0 2
16887: PUSH
16888: LD_INT 1
16890: PUSH
16891: LD_INT 2
16893: PUSH
16894: LD_INT 3
16896: PUSH
16897: LD_INT 4
16899: PUSH
16900: LD_INT 5
16902: PUSH
16903: LD_INT 6
16905: PUSH
16906: LD_INT 7
16908: PUSH
16909: LD_INT 8
16911: PUSH
16912: LD_INT 9
16914: PUSH
16915: LD_INT 10
16917: PUSH
16918: LD_INT 11
16920: PUSH
16921: LD_INT 12
16923: PUSH
16924: LD_INT 13
16926: PUSH
16927: LD_INT 14
16929: PUSH
16930: LD_INT 15
16932: PUSH
16933: LD_INT 16
16935: PUSH
16936: LD_INT 17
16938: PUSH
16939: LD_INT 18
16941: PUSH
16942: LD_INT 19
16944: PUSH
16945: LD_INT 20
16947: PUSH
16948: LD_INT 21
16950: PUSH
16951: LD_INT 22
16953: PUSH
16954: LD_INT 23
16956: PUSH
16957: LD_INT 24
16959: PUSH
16960: LD_INT 25
16962: PUSH
16963: LD_INT 26
16965: PUSH
16966: LD_INT 27
16968: PUSH
16969: LD_INT 28
16971: PUSH
16972: LD_INT 30
16974: PUSH
16975: LD_INT 31
16977: PUSH
16978: LD_INT 32
16980: PUSH
16981: LD_INT 33
16983: PUSH
16984: LD_INT 34
16986: PUSH
16987: LD_INT 36
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: PUSH
17026: LD_INT 101
17028: PUSH
17029: LD_INT 102
17031: PUSH
17032: LD_INT 103
17034: PUSH
17035: LD_INT 104
17037: PUSH
17038: LD_INT 105
17040: PUSH
17041: LD_INT 106
17043: PUSH
17044: LD_INT 107
17046: PUSH
17047: LD_INT 108
17049: PUSH
17050: LD_INT 109
17052: PUSH
17053: LD_INT 110
17055: PUSH
17056: LD_INT 111
17058: PUSH
17059: LD_INT 112
17061: PUSH
17062: LD_INT 113
17064: PUSH
17065: LD_INT 114
17067: PUSH
17068: LD_INT 116
17070: PUSH
17071: LD_INT 117
17073: PUSH
17074: LD_INT 118
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: ST_TO_ADDR
17100: GO 18555
17102: LD_INT 13
17104: DOUBLE
17105: EQUAL
17106: IFTRUE 17110
17108: GO 17318
17110: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
17111: LD_ADDR_VAR 0 2
17115: PUSH
17116: LD_INT 1
17118: PUSH
17119: LD_INT 2
17121: PUSH
17122: LD_INT 3
17124: PUSH
17125: LD_INT 4
17127: PUSH
17128: LD_INT 5
17130: PUSH
17131: LD_INT 8
17133: PUSH
17134: LD_INT 9
17136: PUSH
17137: LD_INT 10
17139: PUSH
17140: LD_INT 11
17142: PUSH
17143: LD_INT 12
17145: PUSH
17146: LD_INT 14
17148: PUSH
17149: LD_INT 15
17151: PUSH
17152: LD_INT 16
17154: PUSH
17155: LD_INT 17
17157: PUSH
17158: LD_INT 18
17160: PUSH
17161: LD_INT 19
17163: PUSH
17164: LD_INT 20
17166: PUSH
17167: LD_INT 21
17169: PUSH
17170: LD_INT 22
17172: PUSH
17173: LD_INT 23
17175: PUSH
17176: LD_INT 24
17178: PUSH
17179: LD_INT 25
17181: PUSH
17182: LD_INT 26
17184: PUSH
17185: LD_INT 27
17187: PUSH
17188: LD_INT 28
17190: PUSH
17191: LD_INT 30
17193: PUSH
17194: LD_INT 31
17196: PUSH
17197: LD_INT 32
17199: PUSH
17200: LD_INT 33
17202: PUSH
17203: LD_INT 34
17205: PUSH
17206: LD_INT 36
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: PUSH
17242: LD_INT 101
17244: PUSH
17245: LD_INT 102
17247: PUSH
17248: LD_INT 103
17250: PUSH
17251: LD_INT 104
17253: PUSH
17254: LD_INT 105
17256: PUSH
17257: LD_INT 106
17259: PUSH
17260: LD_INT 107
17262: PUSH
17263: LD_INT 108
17265: PUSH
17266: LD_INT 109
17268: PUSH
17269: LD_INT 110
17271: PUSH
17272: LD_INT 111
17274: PUSH
17275: LD_INT 112
17277: PUSH
17278: LD_INT 113
17280: PUSH
17281: LD_INT 114
17283: PUSH
17284: LD_INT 116
17286: PUSH
17287: LD_INT 117
17289: PUSH
17290: LD_INT 118
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: ST_TO_ADDR
17316: GO 18555
17318: LD_INT 14
17320: DOUBLE
17321: EQUAL
17322: IFTRUE 17326
17324: GO 17550
17326: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
17327: LD_ADDR_VAR 0 2
17331: PUSH
17332: LD_INT 1
17334: PUSH
17335: LD_INT 2
17337: PUSH
17338: LD_INT 3
17340: PUSH
17341: LD_INT 4
17343: PUSH
17344: LD_INT 5
17346: PUSH
17347: LD_INT 6
17349: PUSH
17350: LD_INT 7
17352: PUSH
17353: LD_INT 8
17355: PUSH
17356: LD_INT 9
17358: PUSH
17359: LD_INT 10
17361: PUSH
17362: LD_INT 11
17364: PUSH
17365: LD_INT 12
17367: PUSH
17368: LD_INT 13
17370: PUSH
17371: LD_INT 14
17373: PUSH
17374: LD_INT 15
17376: PUSH
17377: LD_INT 16
17379: PUSH
17380: LD_INT 17
17382: PUSH
17383: LD_INT 18
17385: PUSH
17386: LD_INT 19
17388: PUSH
17389: LD_INT 20
17391: PUSH
17392: LD_INT 21
17394: PUSH
17395: LD_INT 22
17397: PUSH
17398: LD_INT 23
17400: PUSH
17401: LD_INT 24
17403: PUSH
17404: LD_INT 25
17406: PUSH
17407: LD_INT 26
17409: PUSH
17410: LD_INT 27
17412: PUSH
17413: LD_INT 28
17415: PUSH
17416: LD_INT 29
17418: PUSH
17419: LD_INT 30
17421: PUSH
17422: LD_INT 31
17424: PUSH
17425: LD_INT 32
17427: PUSH
17428: LD_INT 33
17430: PUSH
17431: LD_INT 34
17433: PUSH
17434: LD_INT 36
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: PUSH
17474: LD_INT 101
17476: PUSH
17477: LD_INT 102
17479: PUSH
17480: LD_INT 103
17482: PUSH
17483: LD_INT 104
17485: PUSH
17486: LD_INT 105
17488: PUSH
17489: LD_INT 106
17491: PUSH
17492: LD_INT 107
17494: PUSH
17495: LD_INT 108
17497: PUSH
17498: LD_INT 109
17500: PUSH
17501: LD_INT 110
17503: PUSH
17504: LD_INT 111
17506: PUSH
17507: LD_INT 112
17509: PUSH
17510: LD_INT 113
17512: PUSH
17513: LD_INT 114
17515: PUSH
17516: LD_INT 116
17518: PUSH
17519: LD_INT 117
17521: PUSH
17522: LD_INT 118
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: ST_TO_ADDR
17548: GO 18555
17550: LD_INT 15
17552: DOUBLE
17553: EQUAL
17554: IFTRUE 17558
17556: GO 17782
17558: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
17559: LD_ADDR_VAR 0 2
17563: PUSH
17564: LD_INT 1
17566: PUSH
17567: LD_INT 2
17569: PUSH
17570: LD_INT 3
17572: PUSH
17573: LD_INT 4
17575: PUSH
17576: LD_INT 5
17578: PUSH
17579: LD_INT 6
17581: PUSH
17582: LD_INT 7
17584: PUSH
17585: LD_INT 8
17587: PUSH
17588: LD_INT 9
17590: PUSH
17591: LD_INT 10
17593: PUSH
17594: LD_INT 11
17596: PUSH
17597: LD_INT 12
17599: PUSH
17600: LD_INT 13
17602: PUSH
17603: LD_INT 14
17605: PUSH
17606: LD_INT 15
17608: PUSH
17609: LD_INT 16
17611: PUSH
17612: LD_INT 17
17614: PUSH
17615: LD_INT 18
17617: PUSH
17618: LD_INT 19
17620: PUSH
17621: LD_INT 20
17623: PUSH
17624: LD_INT 21
17626: PUSH
17627: LD_INT 22
17629: PUSH
17630: LD_INT 23
17632: PUSH
17633: LD_INT 24
17635: PUSH
17636: LD_INT 25
17638: PUSH
17639: LD_INT 26
17641: PUSH
17642: LD_INT 27
17644: PUSH
17645: LD_INT 28
17647: PUSH
17648: LD_INT 29
17650: PUSH
17651: LD_INT 30
17653: PUSH
17654: LD_INT 31
17656: PUSH
17657: LD_INT 32
17659: PUSH
17660: LD_INT 33
17662: PUSH
17663: LD_INT 34
17665: PUSH
17666: LD_INT 36
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: PUSH
17706: LD_INT 101
17708: PUSH
17709: LD_INT 102
17711: PUSH
17712: LD_INT 103
17714: PUSH
17715: LD_INT 104
17717: PUSH
17718: LD_INT 105
17720: PUSH
17721: LD_INT 106
17723: PUSH
17724: LD_INT 107
17726: PUSH
17727: LD_INT 108
17729: PUSH
17730: LD_INT 109
17732: PUSH
17733: LD_INT 110
17735: PUSH
17736: LD_INT 111
17738: PUSH
17739: LD_INT 112
17741: PUSH
17742: LD_INT 113
17744: PUSH
17745: LD_INT 114
17747: PUSH
17748: LD_INT 116
17750: PUSH
17751: LD_INT 117
17753: PUSH
17754: LD_INT 118
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: ST_TO_ADDR
17780: GO 18555
17782: LD_INT 16
17784: DOUBLE
17785: EQUAL
17786: IFTRUE 17790
17788: GO 17926
17790: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
17791: LD_ADDR_VAR 0 2
17795: PUSH
17796: LD_INT 2
17798: PUSH
17799: LD_INT 4
17801: PUSH
17802: LD_INT 5
17804: PUSH
17805: LD_INT 7
17807: PUSH
17808: LD_INT 11
17810: PUSH
17811: LD_INT 12
17813: PUSH
17814: LD_INT 15
17816: PUSH
17817: LD_INT 16
17819: PUSH
17820: LD_INT 20
17822: PUSH
17823: LD_INT 21
17825: PUSH
17826: LD_INT 22
17828: PUSH
17829: LD_INT 23
17831: PUSH
17832: LD_INT 25
17834: PUSH
17835: LD_INT 26
17837: PUSH
17838: LD_INT 30
17840: PUSH
17841: LD_INT 31
17843: PUSH
17844: LD_INT 32
17846: PUSH
17847: LD_INT 33
17849: PUSH
17850: LD_INT 34
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 101
17876: PUSH
17877: LD_INT 102
17879: PUSH
17880: LD_INT 103
17882: PUSH
17883: LD_INT 106
17885: PUSH
17886: LD_INT 108
17888: PUSH
17889: LD_INT 112
17891: PUSH
17892: LD_INT 113
17894: PUSH
17895: LD_INT 114
17897: PUSH
17898: LD_INT 116
17900: PUSH
17901: LD_INT 117
17903: PUSH
17904: LD_INT 118
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: ST_TO_ADDR
17924: GO 18555
17926: LD_INT 17
17928: DOUBLE
17929: EQUAL
17930: IFTRUE 17934
17932: GO 18158
17934: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
17935: LD_ADDR_VAR 0 2
17939: PUSH
17940: LD_INT 1
17942: PUSH
17943: LD_INT 2
17945: PUSH
17946: LD_INT 3
17948: PUSH
17949: LD_INT 4
17951: PUSH
17952: LD_INT 5
17954: PUSH
17955: LD_INT 6
17957: PUSH
17958: LD_INT 7
17960: PUSH
17961: LD_INT 8
17963: PUSH
17964: LD_INT 9
17966: PUSH
17967: LD_INT 10
17969: PUSH
17970: LD_INT 11
17972: PUSH
17973: LD_INT 12
17975: PUSH
17976: LD_INT 13
17978: PUSH
17979: LD_INT 14
17981: PUSH
17982: LD_INT 15
17984: PUSH
17985: LD_INT 16
17987: PUSH
17988: LD_INT 17
17990: PUSH
17991: LD_INT 18
17993: PUSH
17994: LD_INT 19
17996: PUSH
17997: LD_INT 20
17999: PUSH
18000: LD_INT 21
18002: PUSH
18003: LD_INT 22
18005: PUSH
18006: LD_INT 23
18008: PUSH
18009: LD_INT 24
18011: PUSH
18012: LD_INT 25
18014: PUSH
18015: LD_INT 26
18017: PUSH
18018: LD_INT 27
18020: PUSH
18021: LD_INT 28
18023: PUSH
18024: LD_INT 29
18026: PUSH
18027: LD_INT 30
18029: PUSH
18030: LD_INT 31
18032: PUSH
18033: LD_INT 32
18035: PUSH
18036: LD_INT 33
18038: PUSH
18039: LD_INT 34
18041: PUSH
18042: LD_INT 36
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: PUSH
18082: LD_INT 101
18084: PUSH
18085: LD_INT 102
18087: PUSH
18088: LD_INT 103
18090: PUSH
18091: LD_INT 104
18093: PUSH
18094: LD_INT 105
18096: PUSH
18097: LD_INT 106
18099: PUSH
18100: LD_INT 107
18102: PUSH
18103: LD_INT 108
18105: PUSH
18106: LD_INT 109
18108: PUSH
18109: LD_INT 110
18111: PUSH
18112: LD_INT 111
18114: PUSH
18115: LD_INT 112
18117: PUSH
18118: LD_INT 113
18120: PUSH
18121: LD_INT 114
18123: PUSH
18124: LD_INT 116
18126: PUSH
18127: LD_INT 117
18129: PUSH
18130: LD_INT 118
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: ST_TO_ADDR
18156: GO 18555
18158: LD_INT 18
18160: DOUBLE
18161: EQUAL
18162: IFTRUE 18166
18164: GO 18314
18166: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
18167: LD_ADDR_VAR 0 2
18171: PUSH
18172: LD_INT 2
18174: PUSH
18175: LD_INT 4
18177: PUSH
18178: LD_INT 5
18180: PUSH
18181: LD_INT 7
18183: PUSH
18184: LD_INT 11
18186: PUSH
18187: LD_INT 12
18189: PUSH
18190: LD_INT 15
18192: PUSH
18193: LD_INT 16
18195: PUSH
18196: LD_INT 20
18198: PUSH
18199: LD_INT 21
18201: PUSH
18202: LD_INT 22
18204: PUSH
18205: LD_INT 23
18207: PUSH
18208: LD_INT 25
18210: PUSH
18211: LD_INT 26
18213: PUSH
18214: LD_INT 30
18216: PUSH
18217: LD_INT 31
18219: PUSH
18220: LD_INT 32
18222: PUSH
18223: LD_INT 33
18225: PUSH
18226: LD_INT 34
18228: PUSH
18229: LD_INT 35
18231: PUSH
18232: LD_INT 36
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 101
18260: PUSH
18261: LD_INT 102
18263: PUSH
18264: LD_INT 103
18266: PUSH
18267: LD_INT 106
18269: PUSH
18270: LD_INT 108
18272: PUSH
18273: LD_INT 112
18275: PUSH
18276: LD_INT 113
18278: PUSH
18279: LD_INT 114
18281: PUSH
18282: LD_INT 115
18284: PUSH
18285: LD_INT 116
18287: PUSH
18288: LD_INT 117
18290: PUSH
18291: LD_INT 118
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: ST_TO_ADDR
18312: GO 18555
18314: LD_INT 19
18316: DOUBLE
18317: EQUAL
18318: IFTRUE 18322
18320: GO 18554
18322: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
18323: LD_ADDR_VAR 0 2
18327: PUSH
18328: LD_INT 1
18330: PUSH
18331: LD_INT 2
18333: PUSH
18334: LD_INT 3
18336: PUSH
18337: LD_INT 4
18339: PUSH
18340: LD_INT 5
18342: PUSH
18343: LD_INT 6
18345: PUSH
18346: LD_INT 7
18348: PUSH
18349: LD_INT 8
18351: PUSH
18352: LD_INT 9
18354: PUSH
18355: LD_INT 10
18357: PUSH
18358: LD_INT 11
18360: PUSH
18361: LD_INT 12
18363: PUSH
18364: LD_INT 13
18366: PUSH
18367: LD_INT 14
18369: PUSH
18370: LD_INT 15
18372: PUSH
18373: LD_INT 16
18375: PUSH
18376: LD_INT 17
18378: PUSH
18379: LD_INT 18
18381: PUSH
18382: LD_INT 19
18384: PUSH
18385: LD_INT 20
18387: PUSH
18388: LD_INT 21
18390: PUSH
18391: LD_INT 22
18393: PUSH
18394: LD_INT 23
18396: PUSH
18397: LD_INT 24
18399: PUSH
18400: LD_INT 25
18402: PUSH
18403: LD_INT 26
18405: PUSH
18406: LD_INT 27
18408: PUSH
18409: LD_INT 28
18411: PUSH
18412: LD_INT 29
18414: PUSH
18415: LD_INT 30
18417: PUSH
18418: LD_INT 31
18420: PUSH
18421: LD_INT 32
18423: PUSH
18424: LD_INT 33
18426: PUSH
18427: LD_INT 34
18429: PUSH
18430: LD_INT 35
18432: PUSH
18433: LD_INT 36
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 101
18476: PUSH
18477: LD_INT 102
18479: PUSH
18480: LD_INT 103
18482: PUSH
18483: LD_INT 104
18485: PUSH
18486: LD_INT 105
18488: PUSH
18489: LD_INT 106
18491: PUSH
18492: LD_INT 107
18494: PUSH
18495: LD_INT 108
18497: PUSH
18498: LD_INT 109
18500: PUSH
18501: LD_INT 110
18503: PUSH
18504: LD_INT 111
18506: PUSH
18507: LD_INT 112
18509: PUSH
18510: LD_INT 113
18512: PUSH
18513: LD_INT 114
18515: PUSH
18516: LD_INT 115
18518: PUSH
18519: LD_INT 116
18521: PUSH
18522: LD_INT 117
18524: PUSH
18525: LD_INT 118
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: ST_TO_ADDR
18552: GO 18555
18554: POP
// end else
18555: GO 18786
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
18557: LD_ADDR_VAR 0 2
18561: PUSH
18562: LD_INT 1
18564: PUSH
18565: LD_INT 2
18567: PUSH
18568: LD_INT 3
18570: PUSH
18571: LD_INT 4
18573: PUSH
18574: LD_INT 5
18576: PUSH
18577: LD_INT 6
18579: PUSH
18580: LD_INT 7
18582: PUSH
18583: LD_INT 8
18585: PUSH
18586: LD_INT 9
18588: PUSH
18589: LD_INT 10
18591: PUSH
18592: LD_INT 11
18594: PUSH
18595: LD_INT 12
18597: PUSH
18598: LD_INT 13
18600: PUSH
18601: LD_INT 14
18603: PUSH
18604: LD_INT 15
18606: PUSH
18607: LD_INT 16
18609: PUSH
18610: LD_INT 17
18612: PUSH
18613: LD_INT 18
18615: PUSH
18616: LD_INT 19
18618: PUSH
18619: LD_INT 20
18621: PUSH
18622: LD_INT 21
18624: PUSH
18625: LD_INT 22
18627: PUSH
18628: LD_INT 23
18630: PUSH
18631: LD_INT 24
18633: PUSH
18634: LD_INT 25
18636: PUSH
18637: LD_INT 26
18639: PUSH
18640: LD_INT 27
18642: PUSH
18643: LD_INT 28
18645: PUSH
18646: LD_INT 29
18648: PUSH
18649: LD_INT 30
18651: PUSH
18652: LD_INT 31
18654: PUSH
18655: LD_INT 32
18657: PUSH
18658: LD_INT 33
18660: PUSH
18661: LD_INT 34
18663: PUSH
18664: LD_INT 35
18666: PUSH
18667: LD_INT 36
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 101
18710: PUSH
18711: LD_INT 102
18713: PUSH
18714: LD_INT 103
18716: PUSH
18717: LD_INT 104
18719: PUSH
18720: LD_INT 105
18722: PUSH
18723: LD_INT 106
18725: PUSH
18726: LD_INT 107
18728: PUSH
18729: LD_INT 108
18731: PUSH
18732: LD_INT 109
18734: PUSH
18735: LD_INT 110
18737: PUSH
18738: LD_INT 111
18740: PUSH
18741: LD_INT 112
18743: PUSH
18744: LD_INT 113
18746: PUSH
18747: LD_INT 114
18749: PUSH
18750: LD_INT 115
18752: PUSH
18753: LD_INT 116
18755: PUSH
18756: LD_INT 117
18758: PUSH
18759: LD_INT 118
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: ST_TO_ADDR
// if result then
18786: LD_VAR 0 2
18790: IFFALSE 19576
// begin normal :=  ;
18792: LD_ADDR_VAR 0 5
18796: PUSH
18797: LD_STRING 
18799: ST_TO_ADDR
// hardcore :=  ;
18800: LD_ADDR_VAR 0 6
18804: PUSH
18805: LD_STRING 
18807: ST_TO_ADDR
// active :=  ;
18808: LD_ADDR_VAR 0 7
18812: PUSH
18813: LD_STRING 
18815: ST_TO_ADDR
// for i = 1 to normalCounter do
18816: LD_ADDR_VAR 0 8
18820: PUSH
18821: DOUBLE
18822: LD_INT 1
18824: DEC
18825: ST_TO_ADDR
18826: LD_EXP 35
18830: PUSH
18831: FOR_TO
18832: IFFALSE 18933
// begin tmp := 0 ;
18834: LD_ADDR_VAR 0 3
18838: PUSH
18839: LD_STRING 0
18841: ST_TO_ADDR
// if result [ 1 ] then
18842: LD_VAR 0 2
18846: PUSH
18847: LD_INT 1
18849: ARRAY
18850: IFFALSE 18915
// if result [ 1 ] [ 1 ] = i then
18852: LD_VAR 0 2
18856: PUSH
18857: LD_INT 1
18859: ARRAY
18860: PUSH
18861: LD_INT 1
18863: ARRAY
18864: PUSH
18865: LD_VAR 0 8
18869: EQUAL
18870: IFFALSE 18915
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
18872: LD_ADDR_VAR 0 2
18876: PUSH
18877: LD_VAR 0 2
18881: PPUSH
18882: LD_INT 1
18884: PPUSH
18885: LD_VAR 0 2
18889: PUSH
18890: LD_INT 1
18892: ARRAY
18893: PPUSH
18894: LD_INT 1
18896: PPUSH
18897: CALL_OW 3
18901: PPUSH
18902: CALL_OW 1
18906: ST_TO_ADDR
// tmp := 1 ;
18907: LD_ADDR_VAR 0 3
18911: PUSH
18912: LD_STRING 1
18914: ST_TO_ADDR
// end ; normal := normal & tmp ;
18915: LD_ADDR_VAR 0 5
18919: PUSH
18920: LD_VAR 0 5
18924: PUSH
18925: LD_VAR 0 3
18929: STR
18930: ST_TO_ADDR
// end ;
18931: GO 18831
18933: POP
18934: POP
// for i = 1 to hardcoreCounter do
18935: LD_ADDR_VAR 0 8
18939: PUSH
18940: DOUBLE
18941: LD_INT 1
18943: DEC
18944: ST_TO_ADDR
18945: LD_EXP 36
18949: PUSH
18950: FOR_TO
18951: IFFALSE 19056
// begin tmp := 0 ;
18953: LD_ADDR_VAR 0 3
18957: PUSH
18958: LD_STRING 0
18960: ST_TO_ADDR
// if result [ 2 ] then
18961: LD_VAR 0 2
18965: PUSH
18966: LD_INT 2
18968: ARRAY
18969: IFFALSE 19038
// if result [ 2 ] [ 1 ] = 100 + i then
18971: LD_VAR 0 2
18975: PUSH
18976: LD_INT 2
18978: ARRAY
18979: PUSH
18980: LD_INT 1
18982: ARRAY
18983: PUSH
18984: LD_INT 100
18986: PUSH
18987: LD_VAR 0 8
18991: PLUS
18992: EQUAL
18993: IFFALSE 19038
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
18995: LD_ADDR_VAR 0 2
18999: PUSH
19000: LD_VAR 0 2
19004: PPUSH
19005: LD_INT 2
19007: PPUSH
19008: LD_VAR 0 2
19012: PUSH
19013: LD_INT 2
19015: ARRAY
19016: PPUSH
19017: LD_INT 1
19019: PPUSH
19020: CALL_OW 3
19024: PPUSH
19025: CALL_OW 1
19029: ST_TO_ADDR
// tmp := 1 ;
19030: LD_ADDR_VAR 0 3
19034: PUSH
19035: LD_STRING 1
19037: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
19038: LD_ADDR_VAR 0 6
19042: PUSH
19043: LD_VAR 0 6
19047: PUSH
19048: LD_VAR 0 3
19052: STR
19053: ST_TO_ADDR
// end ;
19054: GO 18950
19056: POP
19057: POP
// if isGameLoad then
19058: LD_VAR 0 1
19062: IFFALSE 19537
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
19064: LD_ADDR_VAR 0 4
19068: PUSH
19069: LD_EXP 39
19073: PUSH
19074: LD_EXP 38
19078: PUSH
19079: LD_EXP 40
19083: PUSH
19084: LD_EXP 37
19088: PUSH
19089: LD_EXP 41
19093: PUSH
19094: LD_EXP 42
19098: PUSH
19099: LD_EXP 43
19103: PUSH
19104: LD_EXP 44
19108: PUSH
19109: LD_EXP 45
19113: PUSH
19114: LD_EXP 46
19118: PUSH
19119: LD_EXP 47
19123: PUSH
19124: LD_EXP 48
19128: PUSH
19129: LD_EXP 49
19133: PUSH
19134: LD_EXP 50
19138: PUSH
19139: LD_EXP 58
19143: PUSH
19144: LD_EXP 59
19148: PUSH
19149: LD_EXP 60
19153: PUSH
19154: LD_EXP 61
19158: PUSH
19159: LD_EXP 63
19163: PUSH
19164: LD_EXP 64
19168: PUSH
19169: LD_EXP 65
19173: PUSH
19174: LD_EXP 68
19178: PUSH
19179: LD_EXP 70
19183: PUSH
19184: LD_EXP 71
19188: PUSH
19189: LD_EXP 72
19193: PUSH
19194: LD_EXP 74
19198: PUSH
19199: LD_EXP 75
19203: PUSH
19204: LD_EXP 78
19208: PUSH
19209: LD_EXP 79
19213: PUSH
19214: LD_EXP 80
19218: PUSH
19219: LD_EXP 81
19223: PUSH
19224: LD_EXP 82
19228: PUSH
19229: LD_EXP 83
19233: PUSH
19234: LD_EXP 84
19238: PUSH
19239: LD_EXP 85
19243: PUSH
19244: LD_EXP 86
19248: PUSH
19249: LD_EXP 51
19253: PUSH
19254: LD_EXP 52
19258: PUSH
19259: LD_EXP 55
19263: PUSH
19264: LD_EXP 56
19268: PUSH
19269: LD_EXP 57
19273: PUSH
19274: LD_EXP 53
19278: PUSH
19279: LD_EXP 54
19283: PUSH
19284: LD_EXP 62
19288: PUSH
19289: LD_EXP 66
19293: PUSH
19294: LD_EXP 67
19298: PUSH
19299: LD_EXP 69
19303: PUSH
19304: LD_EXP 73
19308: PUSH
19309: LD_EXP 76
19313: PUSH
19314: LD_EXP 77
19318: PUSH
19319: LD_EXP 87
19323: PUSH
19324: LD_EXP 88
19328: PUSH
19329: LD_EXP 89
19333: PUSH
19334: LD_EXP 90
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: ST_TO_ADDR
// tmp :=  ;
19395: LD_ADDR_VAR 0 3
19399: PUSH
19400: LD_STRING 
19402: ST_TO_ADDR
// for i = 1 to normalCounter do
19403: LD_ADDR_VAR 0 8
19407: PUSH
19408: DOUBLE
19409: LD_INT 1
19411: DEC
19412: ST_TO_ADDR
19413: LD_EXP 35
19417: PUSH
19418: FOR_TO
19419: IFFALSE 19455
// begin if flags [ i ] then
19421: LD_VAR 0 4
19425: PUSH
19426: LD_VAR 0 8
19430: ARRAY
19431: IFFALSE 19453
// tmp := tmp & i & ; ;
19433: LD_ADDR_VAR 0 3
19437: PUSH
19438: LD_VAR 0 3
19442: PUSH
19443: LD_VAR 0 8
19447: STR
19448: PUSH
19449: LD_STRING ;
19451: STR
19452: ST_TO_ADDR
// end ;
19453: GO 19418
19455: POP
19456: POP
// for i = 1 to hardcoreCounter do
19457: LD_ADDR_VAR 0 8
19461: PUSH
19462: DOUBLE
19463: LD_INT 1
19465: DEC
19466: ST_TO_ADDR
19467: LD_EXP 36
19471: PUSH
19472: FOR_TO
19473: IFFALSE 19519
// begin if flags [ normalCounter + i ] then
19475: LD_VAR 0 4
19479: PUSH
19480: LD_EXP 35
19484: PUSH
19485: LD_VAR 0 8
19489: PLUS
19490: ARRAY
19491: IFFALSE 19517
// tmp := tmp & ( 100 + i ) & ; ;
19493: LD_ADDR_VAR 0 3
19497: PUSH
19498: LD_VAR 0 3
19502: PUSH
19503: LD_INT 100
19505: PUSH
19506: LD_VAR 0 8
19510: PLUS
19511: STR
19512: PUSH
19513: LD_STRING ;
19515: STR
19516: ST_TO_ADDR
// end ;
19517: GO 19472
19519: POP
19520: POP
// if tmp then
19521: LD_VAR 0 3
19525: IFFALSE 19537
// active := tmp ;
19527: LD_ADDR_VAR 0 7
19531: PUSH
19532: LD_VAR 0 3
19536: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
19537: LD_STRING getStreamItemsFromMission("
19539: PUSH
19540: LD_VAR 0 5
19544: STR
19545: PUSH
19546: LD_STRING ","
19548: STR
19549: PUSH
19550: LD_VAR 0 6
19554: STR
19555: PUSH
19556: LD_STRING ","
19558: STR
19559: PUSH
19560: LD_VAR 0 7
19564: STR
19565: PUSH
19566: LD_STRING ")
19568: STR
19569: PPUSH
19570: CALL_OW 559
// end else
19574: GO 19583
// ToLua ( getStreamItemsFromMission("","","") ) ;
19576: LD_STRING getStreamItemsFromMission("","","")
19578: PPUSH
19579: CALL_OW 559
// end ;
19583: LD_VAR 0 2
19587: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
19588: LD_EXP 34
19592: IFFALSE 19600
19594: PUSH
19595: LD_EXP 39
19599: AND
19600: IFFALSE 19724
19602: GO 19604
19604: DISABLE
19605: LD_INT 0
19607: PPUSH
19608: PPUSH
// begin enable ;
19609: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
19610: LD_ADDR_VAR 0 2
19614: PUSH
19615: LD_INT 22
19617: PUSH
19618: LD_OWVAR 2
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 2
19629: PUSH
19630: LD_INT 34
19632: PUSH
19633: LD_INT 7
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 34
19642: PUSH
19643: LD_INT 45
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PUSH
19650: LD_INT 34
19652: PUSH
19653: LD_INT 28
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PUSH
19660: LD_INT 34
19662: PUSH
19663: LD_INT 47
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PPUSH
19681: CALL_OW 69
19685: ST_TO_ADDR
// if not tmp then
19686: LD_VAR 0 2
19690: NOT
19691: IFFALSE 19695
// exit ;
19693: GO 19724
// for i in tmp do
19695: LD_ADDR_VAR 0 1
19699: PUSH
19700: LD_VAR 0 2
19704: PUSH
19705: FOR_IN
19706: IFFALSE 19722
// begin SetLives ( i , 0 ) ;
19708: LD_VAR 0 1
19712: PPUSH
19713: LD_INT 0
19715: PPUSH
19716: CALL_OW 234
// end ;
19720: GO 19705
19722: POP
19723: POP
// end ;
19724: PPOPN 2
19726: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
19727: LD_EXP 34
19731: IFFALSE 19739
19733: PUSH
19734: LD_EXP 40
19738: AND
19739: IFFALSE 19823
19741: GO 19743
19743: DISABLE
19744: LD_INT 0
19746: PPUSH
19747: PPUSH
// begin enable ;
19748: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
19749: LD_ADDR_VAR 0 2
19753: PUSH
19754: LD_INT 22
19756: PUSH
19757: LD_OWVAR 2
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: LD_INT 32
19768: PUSH
19769: LD_INT 3
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PPUSH
19780: CALL_OW 69
19784: ST_TO_ADDR
// if not tmp then
19785: LD_VAR 0 2
19789: NOT
19790: IFFALSE 19794
// exit ;
19792: GO 19823
// for i in tmp do
19794: LD_ADDR_VAR 0 1
19798: PUSH
19799: LD_VAR 0 2
19803: PUSH
19804: FOR_IN
19805: IFFALSE 19821
// begin SetLives ( i , 0 ) ;
19807: LD_VAR 0 1
19811: PPUSH
19812: LD_INT 0
19814: PPUSH
19815: CALL_OW 234
// end ;
19819: GO 19804
19821: POP
19822: POP
// end ;
19823: PPOPN 2
19825: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
19826: LD_EXP 34
19830: IFFALSE 19838
19832: PUSH
19833: LD_EXP 37
19837: AND
19838: IFFALSE 19931
19840: GO 19842
19842: DISABLE
19843: LD_INT 0
19845: PPUSH
// begin enable ;
19846: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
19847: LD_ADDR_VAR 0 1
19851: PUSH
19852: LD_INT 22
19854: PUSH
19855: LD_OWVAR 2
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 2
19866: PUSH
19867: LD_INT 25
19869: PUSH
19870: LD_INT 5
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 25
19879: PUSH
19880: LD_INT 9
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 25
19889: PUSH
19890: LD_INT 8
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PPUSH
19907: CALL_OW 69
19911: PUSH
19912: FOR_IN
19913: IFFALSE 19929
// begin SetClass ( i , 1 ) ;
19915: LD_VAR 0 1
19919: PPUSH
19920: LD_INT 1
19922: PPUSH
19923: CALL_OW 336
// end ;
19927: GO 19912
19929: POP
19930: POP
// end ;
19931: PPOPN 1
19933: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
19934: LD_EXP 34
19938: IFFALSE 19946
19940: PUSH
19941: LD_EXP 38
19945: AND
19946: IFFALSE 19958
19948: PUSH
19949: LD_OWVAR 65
19953: PUSH
19954: LD_INT 7
19956: LESS
19957: AND
19958: IFFALSE 19972
19960: GO 19962
19962: DISABLE
// begin enable ;
19963: ENABLE
// game_speed := 7 ;
19964: LD_ADDR_OWVAR 65
19968: PUSH
19969: LD_INT 7
19971: ST_TO_ADDR
// end ;
19972: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
19973: LD_EXP 34
19977: IFFALSE 19985
19979: PUSH
19980: LD_EXP 41
19984: AND
19985: IFFALSE 20187
19987: GO 19989
19989: DISABLE
19990: LD_INT 0
19992: PPUSH
19993: PPUSH
19994: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19995: LD_ADDR_VAR 0 3
19999: PUSH
20000: LD_INT 81
20002: PUSH
20003: LD_OWVAR 2
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PUSH
20012: LD_INT 21
20014: PUSH
20015: LD_INT 1
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PPUSH
20026: CALL_OW 69
20030: ST_TO_ADDR
// if not tmp then
20031: LD_VAR 0 3
20035: NOT
20036: IFFALSE 20040
// exit ;
20038: GO 20187
// if tmp > 5 then
20040: LD_VAR 0 3
20044: PUSH
20045: LD_INT 5
20047: GREATER
20048: IFFALSE 20060
// k := 5 else
20050: LD_ADDR_VAR 0 2
20054: PUSH
20055: LD_INT 5
20057: ST_TO_ADDR
20058: GO 20070
// k := tmp ;
20060: LD_ADDR_VAR 0 2
20064: PUSH
20065: LD_VAR 0 3
20069: ST_TO_ADDR
// for i := 1 to k do
20070: LD_ADDR_VAR 0 1
20074: PUSH
20075: DOUBLE
20076: LD_INT 1
20078: DEC
20079: ST_TO_ADDR
20080: LD_VAR 0 2
20084: PUSH
20085: FOR_TO
20086: IFFALSE 20185
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20088: LD_VAR 0 3
20092: PUSH
20093: LD_VAR 0 1
20097: ARRAY
20098: PPUSH
20099: LD_VAR 0 1
20103: PUSH
20104: LD_INT 4
20106: MOD
20107: PUSH
20108: LD_INT 1
20110: PLUS
20111: PPUSH
20112: CALL_OW 259
20116: PUSH
20117: LD_INT 10
20119: LESS
20120: IFFALSE 20183
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20122: LD_VAR 0 3
20126: PUSH
20127: LD_VAR 0 1
20131: ARRAY
20132: PPUSH
20133: LD_VAR 0 1
20137: PUSH
20138: LD_INT 4
20140: MOD
20141: PUSH
20142: LD_INT 1
20144: PLUS
20145: PPUSH
20146: LD_VAR 0 3
20150: PUSH
20151: LD_VAR 0 1
20155: ARRAY
20156: PPUSH
20157: LD_VAR 0 1
20161: PUSH
20162: LD_INT 4
20164: MOD
20165: PUSH
20166: LD_INT 1
20168: PLUS
20169: PPUSH
20170: CALL_OW 259
20174: PUSH
20175: LD_INT 1
20177: PLUS
20178: PPUSH
20179: CALL_OW 237
20183: GO 20085
20185: POP
20186: POP
// end ;
20187: PPOPN 3
20189: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20190: LD_EXP 34
20194: IFFALSE 20202
20196: PUSH
20197: LD_EXP 42
20201: AND
20202: IFFALSE 20222
20204: GO 20206
20206: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20207: LD_INT 4
20209: PPUSH
20210: LD_OWVAR 2
20214: PPUSH
20215: LD_INT 0
20217: PPUSH
20218: CALL_OW 324
20222: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20223: LD_EXP 34
20227: IFFALSE 20235
20229: PUSH
20230: LD_EXP 71
20234: AND
20235: IFFALSE 20255
20237: GO 20239
20239: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20240: LD_INT 19
20242: PPUSH
20243: LD_OWVAR 2
20247: PPUSH
20248: LD_INT 0
20250: PPUSH
20251: CALL_OW 324
20255: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20256: LD_EXP 34
20260: IFFALSE 20268
20262: PUSH
20263: LD_EXP 43
20267: AND
20268: IFFALSE 20370
20270: GO 20272
20272: DISABLE
20273: LD_INT 0
20275: PPUSH
20276: PPUSH
// begin enable ;
20277: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20278: LD_ADDR_VAR 0 2
20282: PUSH
20283: LD_INT 22
20285: PUSH
20286: LD_OWVAR 2
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 2
20297: PUSH
20298: LD_INT 34
20300: PUSH
20301: LD_INT 11
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 34
20310: PUSH
20311: LD_INT 30
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: LIST
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PPUSH
20327: CALL_OW 69
20331: ST_TO_ADDR
// if not tmp then
20332: LD_VAR 0 2
20336: NOT
20337: IFFALSE 20341
// exit ;
20339: GO 20370
// for i in tmp do
20341: LD_ADDR_VAR 0 1
20345: PUSH
20346: LD_VAR 0 2
20350: PUSH
20351: FOR_IN
20352: IFFALSE 20368
// begin SetLives ( i , 0 ) ;
20354: LD_VAR 0 1
20358: PPUSH
20359: LD_INT 0
20361: PPUSH
20362: CALL_OW 234
// end ;
20366: GO 20351
20368: POP
20369: POP
// end ;
20370: PPOPN 2
20372: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20373: LD_EXP 34
20377: IFFALSE 20385
20379: PUSH
20380: LD_EXP 44
20384: AND
20385: IFFALSE 20405
20387: GO 20389
20389: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20390: LD_INT 32
20392: PPUSH
20393: LD_OWVAR 2
20397: PPUSH
20398: LD_INT 0
20400: PPUSH
20401: CALL_OW 324
20405: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
20406: LD_EXP 34
20410: IFFALSE 20418
20412: PUSH
20413: LD_EXP 45
20417: AND
20418: IFFALSE 20601
20420: GO 20422
20422: DISABLE
20423: LD_INT 0
20425: PPUSH
20426: PPUSH
20427: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
20428: LD_ADDR_VAR 0 2
20432: PUSH
20433: LD_INT 22
20435: PUSH
20436: LD_OWVAR 2
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 33
20447: PUSH
20448: LD_INT 3
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PPUSH
20459: CALL_OW 69
20463: ST_TO_ADDR
// if not tmp then
20464: LD_VAR 0 2
20468: NOT
20469: IFFALSE 20473
// exit ;
20471: GO 20601
// side := 0 ;
20473: LD_ADDR_VAR 0 3
20477: PUSH
20478: LD_INT 0
20480: ST_TO_ADDR
// for i := 1 to 8 do
20481: LD_ADDR_VAR 0 1
20485: PUSH
20486: DOUBLE
20487: LD_INT 1
20489: DEC
20490: ST_TO_ADDR
20491: LD_INT 8
20493: PUSH
20494: FOR_TO
20495: IFFALSE 20545
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
20497: LD_OWVAR 2
20501: PUSH
20502: LD_VAR 0 1
20506: NONEQUAL
20507: IFFALSE 20529
20509: PUSH
20510: LD_OWVAR 2
20514: PPUSH
20515: LD_VAR 0 1
20519: PPUSH
20520: CALL_OW 81
20524: PUSH
20525: LD_INT 2
20527: EQUAL
20528: AND
20529: IFFALSE 20543
// begin side := i ;
20531: LD_ADDR_VAR 0 3
20535: PUSH
20536: LD_VAR 0 1
20540: ST_TO_ADDR
// break ;
20541: GO 20545
// end ;
20543: GO 20494
20545: POP
20546: POP
// if not side then
20547: LD_VAR 0 3
20551: NOT
20552: IFFALSE 20556
// exit ;
20554: GO 20601
// for i := 1 to tmp do
20556: LD_ADDR_VAR 0 1
20560: PUSH
20561: DOUBLE
20562: LD_INT 1
20564: DEC
20565: ST_TO_ADDR
20566: LD_VAR 0 2
20570: PUSH
20571: FOR_TO
20572: IFFALSE 20599
// if Prob ( 60 ) then
20574: LD_INT 60
20576: PPUSH
20577: CALL_OW 13
20581: IFFALSE 20597
// SetSide ( i , side ) ;
20583: LD_VAR 0 1
20587: PPUSH
20588: LD_VAR 0 3
20592: PPUSH
20593: CALL_OW 235
20597: GO 20571
20599: POP
20600: POP
// end ;
20601: PPOPN 3
20603: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
20604: LD_EXP 34
20608: IFFALSE 20616
20610: PUSH
20611: LD_EXP 47
20615: AND
20616: IFFALSE 20735
20618: GO 20620
20620: DISABLE
20621: LD_INT 0
20623: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
20624: LD_ADDR_VAR 0 1
20628: PUSH
20629: LD_INT 22
20631: PUSH
20632: LD_OWVAR 2
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 21
20643: PUSH
20644: LD_INT 1
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: LD_INT 3
20653: PUSH
20654: LD_INT 23
20656: PUSH
20657: LD_INT 0
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: LIST
20672: PPUSH
20673: CALL_OW 69
20677: PUSH
20678: FOR_IN
20679: IFFALSE 20733
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
20681: LD_VAR 0 1
20685: PPUSH
20686: CALL_OW 257
20690: PUSH
20691: LD_INT 1
20693: PUSH
20694: LD_INT 2
20696: PUSH
20697: LD_INT 3
20699: PUSH
20700: LD_INT 4
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: IN
20709: IFFALSE 20731
// SetClass ( un , rand ( 1 , 4 ) ) ;
20711: LD_VAR 0 1
20715: PPUSH
20716: LD_INT 1
20718: PPUSH
20719: LD_INT 4
20721: PPUSH
20722: CALL_OW 12
20726: PPUSH
20727: CALL_OW 336
20731: GO 20678
20733: POP
20734: POP
// end ;
20735: PPOPN 1
20737: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
20738: LD_EXP 34
20742: IFFALSE 20750
20744: PUSH
20745: LD_EXP 46
20749: AND
20750: IFFALSE 20829
20752: GO 20754
20754: DISABLE
20755: LD_INT 0
20757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20758: LD_ADDR_VAR 0 1
20762: PUSH
20763: LD_INT 22
20765: PUSH
20766: LD_OWVAR 2
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 21
20777: PUSH
20778: LD_INT 3
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PPUSH
20789: CALL_OW 69
20793: ST_TO_ADDR
// if not tmp then
20794: LD_VAR 0 1
20798: NOT
20799: IFFALSE 20803
// exit ;
20801: GO 20829
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
20803: LD_VAR 0 1
20807: PUSH
20808: LD_INT 1
20810: PPUSH
20811: LD_VAR 0 1
20815: PPUSH
20816: CALL_OW 12
20820: ARRAY
20821: PPUSH
20822: LD_INT 100
20824: PPUSH
20825: CALL_OW 234
// end ;
20829: PPOPN 1
20831: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
20832: LD_EXP 34
20836: IFFALSE 20844
20838: PUSH
20839: LD_EXP 48
20843: AND
20844: IFFALSE 20942
20846: GO 20848
20848: DISABLE
20849: LD_INT 0
20851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20852: LD_ADDR_VAR 0 1
20856: PUSH
20857: LD_INT 22
20859: PUSH
20860: LD_OWVAR 2
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 21
20871: PUSH
20872: LD_INT 1
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PPUSH
20883: CALL_OW 69
20887: ST_TO_ADDR
// if not tmp then
20888: LD_VAR 0 1
20892: NOT
20893: IFFALSE 20897
// exit ;
20895: GO 20942
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
20897: LD_VAR 0 1
20901: PUSH
20902: LD_INT 1
20904: PPUSH
20905: LD_VAR 0 1
20909: PPUSH
20910: CALL_OW 12
20914: ARRAY
20915: PPUSH
20916: LD_INT 1
20918: PPUSH
20919: LD_INT 4
20921: PPUSH
20922: CALL_OW 12
20926: PPUSH
20927: LD_INT 3000
20929: PPUSH
20930: LD_INT 9000
20932: PPUSH
20933: CALL_OW 12
20937: PPUSH
20938: CALL_OW 492
// end ;
20942: PPOPN 1
20944: END
// every 0 0$1 trigger StreamModeActive and sDepot do
20945: LD_EXP 34
20949: IFFALSE 20957
20951: PUSH
20952: LD_EXP 49
20956: AND
20957: IFFALSE 20977
20959: GO 20961
20961: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
20962: LD_INT 1
20964: PPUSH
20965: LD_OWVAR 2
20969: PPUSH
20970: LD_INT 0
20972: PPUSH
20973: CALL_OW 324
20977: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
20978: LD_EXP 34
20982: IFFALSE 20990
20984: PUSH
20985: LD_EXP 50
20989: AND
20990: IFFALSE 21073
20992: GO 20994
20994: DISABLE
20995: LD_INT 0
20997: PPUSH
20998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20999: LD_ADDR_VAR 0 2
21003: PUSH
21004: LD_INT 22
21006: PUSH
21007: LD_OWVAR 2
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 21
21018: PUSH
21019: LD_INT 3
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PPUSH
21030: CALL_OW 69
21034: ST_TO_ADDR
// if not tmp then
21035: LD_VAR 0 2
21039: NOT
21040: IFFALSE 21044
// exit ;
21042: GO 21073
// for i in tmp do
21044: LD_ADDR_VAR 0 1
21048: PUSH
21049: LD_VAR 0 2
21053: PUSH
21054: FOR_IN
21055: IFFALSE 21071
// SetBLevel ( i , 10 ) ;
21057: LD_VAR 0 1
21061: PPUSH
21062: LD_INT 10
21064: PPUSH
21065: CALL_OW 241
21069: GO 21054
21071: POP
21072: POP
// end ;
21073: PPOPN 2
21075: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21076: LD_EXP 34
21080: IFFALSE 21088
21082: PUSH
21083: LD_EXP 51
21087: AND
21088: IFFALSE 21199
21090: GO 21092
21092: DISABLE
21093: LD_INT 0
21095: PPUSH
21096: PPUSH
21097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21098: LD_ADDR_VAR 0 3
21102: PUSH
21103: LD_INT 22
21105: PUSH
21106: LD_OWVAR 2
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 25
21117: PUSH
21118: LD_INT 1
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PPUSH
21129: CALL_OW 69
21133: ST_TO_ADDR
// if not tmp then
21134: LD_VAR 0 3
21138: NOT
21139: IFFALSE 21143
// exit ;
21141: GO 21199
// un := tmp [ rand ( 1 , tmp ) ] ;
21143: LD_ADDR_VAR 0 2
21147: PUSH
21148: LD_VAR 0 3
21152: PUSH
21153: LD_INT 1
21155: PPUSH
21156: LD_VAR 0 3
21160: PPUSH
21161: CALL_OW 12
21165: ARRAY
21166: ST_TO_ADDR
// if Crawls ( un ) then
21167: LD_VAR 0 2
21171: PPUSH
21172: CALL_OW 318
21176: IFFALSE 21187
// ComWalk ( un ) ;
21178: LD_VAR 0 2
21182: PPUSH
21183: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21187: LD_VAR 0 2
21191: PPUSH
21192: LD_INT 5
21194: PPUSH
21195: CALL_OW 336
// end ;
21199: PPOPN 3
21201: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
21202: LD_EXP 34
21206: IFFALSE 21214
21208: PUSH
21209: LD_EXP 52
21213: AND
21214: IFFALSE 21226
21216: PUSH
21217: LD_OWVAR 67
21221: PUSH
21222: LD_INT 4
21224: LESS
21225: AND
21226: IFFALSE 21245
21228: GO 21230
21230: DISABLE
// begin Difficulty := Difficulty + 1 ;
21231: LD_ADDR_OWVAR 67
21235: PUSH
21236: LD_OWVAR 67
21240: PUSH
21241: LD_INT 1
21243: PLUS
21244: ST_TO_ADDR
// end ;
21245: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21246: LD_EXP 34
21250: IFFALSE 21258
21252: PUSH
21253: LD_EXP 53
21257: AND
21258: IFFALSE 21361
21260: GO 21262
21262: DISABLE
21263: LD_INT 0
21265: PPUSH
// begin for i := 1 to 5 do
21266: LD_ADDR_VAR 0 1
21270: PUSH
21271: DOUBLE
21272: LD_INT 1
21274: DEC
21275: ST_TO_ADDR
21276: LD_INT 5
21278: PUSH
21279: FOR_TO
21280: IFFALSE 21359
// begin uc_nation := nation_nature ;
21282: LD_ADDR_OWVAR 21
21286: PUSH
21287: LD_INT 0
21289: ST_TO_ADDR
// uc_side := 0 ;
21290: LD_ADDR_OWVAR 20
21294: PUSH
21295: LD_INT 0
21297: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21298: LD_ADDR_OWVAR 29
21302: PUSH
21303: LD_INT 12
21305: PUSH
21306: LD_INT 12
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: ST_TO_ADDR
// hc_agressivity := 20 ;
21313: LD_ADDR_OWVAR 35
21317: PUSH
21318: LD_INT 20
21320: ST_TO_ADDR
// hc_class := class_tiger ;
21321: LD_ADDR_OWVAR 28
21325: PUSH
21326: LD_INT 14
21328: ST_TO_ADDR
// hc_gallery :=  ;
21329: LD_ADDR_OWVAR 33
21333: PUSH
21334: LD_STRING 
21336: ST_TO_ADDR
// hc_name :=  ;
21337: LD_ADDR_OWVAR 26
21341: PUSH
21342: LD_STRING 
21344: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21345: CALL_OW 44
21349: PPUSH
21350: LD_INT 0
21352: PPUSH
21353: CALL_OW 51
// end ;
21357: GO 21279
21359: POP
21360: POP
// end ;
21361: PPOPN 1
21363: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21364: LD_EXP 34
21368: IFFALSE 21376
21370: PUSH
21371: LD_EXP 54
21375: AND
21376: IFFALSE 21385
21378: GO 21380
21380: DISABLE
// StreamSibBomb ;
21381: CALL 21386 0 0
21385: END
// export function StreamSibBomb ; var i , x , y ; begin
21386: LD_INT 0
21388: PPUSH
21389: PPUSH
21390: PPUSH
21391: PPUSH
// result := false ;
21392: LD_ADDR_VAR 0 1
21396: PUSH
21397: LD_INT 0
21399: ST_TO_ADDR
// for i := 1 to 16 do
21400: LD_ADDR_VAR 0 2
21404: PUSH
21405: DOUBLE
21406: LD_INT 1
21408: DEC
21409: ST_TO_ADDR
21410: LD_INT 16
21412: PUSH
21413: FOR_TO
21414: IFFALSE 21613
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21416: LD_ADDR_VAR 0 3
21420: PUSH
21421: LD_INT 10
21423: PUSH
21424: LD_INT 20
21426: PUSH
21427: LD_INT 30
21429: PUSH
21430: LD_INT 40
21432: PUSH
21433: LD_INT 50
21435: PUSH
21436: LD_INT 60
21438: PUSH
21439: LD_INT 70
21441: PUSH
21442: LD_INT 80
21444: PUSH
21445: LD_INT 90
21447: PUSH
21448: LD_INT 100
21450: PUSH
21451: LD_INT 110
21453: PUSH
21454: LD_INT 120
21456: PUSH
21457: LD_INT 130
21459: PUSH
21460: LD_INT 140
21462: PUSH
21463: LD_INT 150
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: PUSH
21483: LD_INT 1
21485: PPUSH
21486: LD_INT 15
21488: PPUSH
21489: CALL_OW 12
21493: ARRAY
21494: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21495: LD_ADDR_VAR 0 4
21499: PUSH
21500: LD_INT 10
21502: PUSH
21503: LD_INT 20
21505: PUSH
21506: LD_INT 30
21508: PUSH
21509: LD_INT 40
21511: PUSH
21512: LD_INT 50
21514: PUSH
21515: LD_INT 60
21517: PUSH
21518: LD_INT 70
21520: PUSH
21521: LD_INT 80
21523: PUSH
21524: LD_INT 90
21526: PUSH
21527: LD_INT 100
21529: PUSH
21530: LD_INT 110
21532: PUSH
21533: LD_INT 120
21535: PUSH
21536: LD_INT 130
21538: PUSH
21539: LD_INT 140
21541: PUSH
21542: LD_INT 150
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: PUSH
21562: LD_INT 1
21564: PPUSH
21565: LD_INT 15
21567: PPUSH
21568: CALL_OW 12
21572: ARRAY
21573: ST_TO_ADDR
// if ValidHex ( x , y ) then
21574: LD_VAR 0 3
21578: PPUSH
21579: LD_VAR 0 4
21583: PPUSH
21584: CALL_OW 488
21588: IFFALSE 21611
// begin result := [ x , y ] ;
21590: LD_ADDR_VAR 0 1
21594: PUSH
21595: LD_VAR 0 3
21599: PUSH
21600: LD_VAR 0 4
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: ST_TO_ADDR
// break ;
21609: GO 21613
// end ; end ;
21611: GO 21413
21613: POP
21614: POP
// if result then
21615: LD_VAR 0 1
21619: IFFALSE 21679
// begin ToLua ( playSibBomb() ) ;
21621: LD_STRING playSibBomb()
21623: PPUSH
21624: CALL_OW 559
// wait ( 0 0$14 ) ;
21628: LD_INT 490
21630: PPUSH
21631: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
21635: LD_VAR 0 1
21639: PUSH
21640: LD_INT 1
21642: ARRAY
21643: PPUSH
21644: LD_VAR 0 1
21648: PUSH
21649: LD_INT 2
21651: ARRAY
21652: PPUSH
21653: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
21657: LD_VAR 0 1
21661: PUSH
21662: LD_INT 1
21664: ARRAY
21665: PPUSH
21666: LD_VAR 0 1
21670: PUSH
21671: LD_INT 2
21673: ARRAY
21674: PPUSH
21675: CALL_OW 429
// end ; end ;
21679: LD_VAR 0 1
21683: RET
// every 0 0$1 trigger StreamModeActive and sReset do
21684: LD_EXP 34
21688: IFFALSE 21696
21690: PUSH
21691: LD_EXP 56
21695: AND
21696: IFFALSE 21708
21698: GO 21700
21700: DISABLE
// YouLost (  ) ;
21701: LD_STRING 
21703: PPUSH
21704: CALL_OW 104
21708: END
// every 0 0$1 trigger StreamModeActive and sFog do
21709: LD_EXP 34
21713: IFFALSE 21721
21715: PUSH
21716: LD_EXP 55
21720: AND
21721: IFFALSE 21735
21723: GO 21725
21725: DISABLE
// FogOff ( your_side ) ;
21726: LD_OWVAR 2
21730: PPUSH
21731: CALL_OW 344
21735: END
// every 0 0$1 trigger StreamModeActive and sSun do
21736: LD_EXP 34
21740: IFFALSE 21748
21742: PUSH
21743: LD_EXP 57
21747: AND
21748: IFFALSE 21776
21750: GO 21752
21752: DISABLE
// begin solar_recharge_percent := 0 ;
21753: LD_ADDR_OWVAR 79
21757: PUSH
21758: LD_INT 0
21760: ST_TO_ADDR
// wait ( 5 5$00 ) ;
21761: LD_INT 10500
21763: PPUSH
21764: CALL_OW 67
// solar_recharge_percent := 100 ;
21768: LD_ADDR_OWVAR 79
21772: PUSH
21773: LD_INT 100
21775: ST_TO_ADDR
// end ;
21776: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
21777: LD_EXP 34
21781: IFFALSE 21789
21783: PUSH
21784: LD_EXP 58
21788: AND
21789: IFFALSE 22028
21791: GO 21793
21793: DISABLE
21794: LD_INT 0
21796: PPUSH
21797: PPUSH
21798: PPUSH
// begin tmp := [ ] ;
21799: LD_ADDR_VAR 0 3
21803: PUSH
21804: EMPTY
21805: ST_TO_ADDR
// for i := 1 to 6 do
21806: LD_ADDR_VAR 0 1
21810: PUSH
21811: DOUBLE
21812: LD_INT 1
21814: DEC
21815: ST_TO_ADDR
21816: LD_INT 6
21818: PUSH
21819: FOR_TO
21820: IFFALSE 21925
// begin uc_nation := nation_nature ;
21822: LD_ADDR_OWVAR 21
21826: PUSH
21827: LD_INT 0
21829: ST_TO_ADDR
// uc_side := 0 ;
21830: LD_ADDR_OWVAR 20
21834: PUSH
21835: LD_INT 0
21837: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21838: LD_ADDR_OWVAR 29
21842: PUSH
21843: LD_INT 12
21845: PUSH
21846: LD_INT 12
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: ST_TO_ADDR
// hc_agressivity := 20 ;
21853: LD_ADDR_OWVAR 35
21857: PUSH
21858: LD_INT 20
21860: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
21861: LD_ADDR_OWVAR 28
21865: PUSH
21866: LD_INT 17
21868: ST_TO_ADDR
// hc_gallery :=  ;
21869: LD_ADDR_OWVAR 33
21873: PUSH
21874: LD_STRING 
21876: ST_TO_ADDR
// hc_name :=  ;
21877: LD_ADDR_OWVAR 26
21881: PUSH
21882: LD_STRING 
21884: ST_TO_ADDR
// un := CreateHuman ;
21885: LD_ADDR_VAR 0 2
21889: PUSH
21890: CALL_OW 44
21894: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
21895: LD_VAR 0 2
21899: PPUSH
21900: LD_INT 1
21902: PPUSH
21903: CALL_OW 51
// tmp := tmp ^ un ;
21907: LD_ADDR_VAR 0 3
21911: PUSH
21912: LD_VAR 0 3
21916: PUSH
21917: LD_VAR 0 2
21921: ADD
21922: ST_TO_ADDR
// end ;
21923: GO 21819
21925: POP
21926: POP
// repeat wait ( 0 0$1 ) ;
21927: LD_INT 35
21929: PPUSH
21930: CALL_OW 67
// for un in tmp do
21934: LD_ADDR_VAR 0 2
21938: PUSH
21939: LD_VAR 0 3
21943: PUSH
21944: FOR_IN
21945: IFFALSE 22019
// begin if IsDead ( un ) then
21947: LD_VAR 0 2
21951: PPUSH
21952: CALL_OW 301
21956: IFFALSE 21976
// begin tmp := tmp diff un ;
21958: LD_ADDR_VAR 0 3
21962: PUSH
21963: LD_VAR 0 3
21967: PUSH
21968: LD_VAR 0 2
21972: DIFF
21973: ST_TO_ADDR
// continue ;
21974: GO 21944
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
21976: LD_VAR 0 2
21980: PPUSH
21981: LD_INT 3
21983: PUSH
21984: LD_INT 22
21986: PUSH
21987: LD_INT 0
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PPUSH
21998: CALL_OW 69
22002: PPUSH
22003: LD_VAR 0 2
22007: PPUSH
22008: CALL_OW 74
22012: PPUSH
22013: CALL_OW 115
// end ;
22017: GO 21944
22019: POP
22020: POP
// until not tmp ;
22021: LD_VAR 0 3
22025: NOT
22026: IFFALSE 21927
// end ;
22028: PPOPN 3
22030: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22031: LD_EXP 34
22035: IFFALSE 22043
22037: PUSH
22038: LD_EXP 59
22042: AND
22043: IFFALSE 22097
22045: GO 22047
22047: DISABLE
// begin ToLua ( displayTroll(); ) ;
22048: LD_STRING displayTroll();
22050: PPUSH
22051: CALL_OW 559
// wait ( 3 3$00 ) ;
22055: LD_INT 6300
22057: PPUSH
22058: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22062: LD_STRING hideTroll();
22064: PPUSH
22065: CALL_OW 559
// wait ( 1 1$00 ) ;
22069: LD_INT 2100
22071: PPUSH
22072: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22076: LD_STRING displayTroll();
22078: PPUSH
22079: CALL_OW 559
// wait ( 1 1$00 ) ;
22083: LD_INT 2100
22085: PPUSH
22086: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22090: LD_STRING hideTroll();
22092: PPUSH
22093: CALL_OW 559
// end ;
22097: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22098: LD_EXP 34
22102: IFFALSE 22110
22104: PUSH
22105: LD_EXP 60
22109: AND
22110: IFFALSE 22173
22112: GO 22114
22114: DISABLE
22115: LD_INT 0
22117: PPUSH
// begin p := 0 ;
22118: LD_ADDR_VAR 0 1
22122: PUSH
22123: LD_INT 0
22125: ST_TO_ADDR
// repeat game_speed := 1 ;
22126: LD_ADDR_OWVAR 65
22130: PUSH
22131: LD_INT 1
22133: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22134: LD_INT 35
22136: PPUSH
22137: CALL_OW 67
// p := p + 1 ;
22141: LD_ADDR_VAR 0 1
22145: PUSH
22146: LD_VAR 0 1
22150: PUSH
22151: LD_INT 1
22153: PLUS
22154: ST_TO_ADDR
// until p >= 60 ;
22155: LD_VAR 0 1
22159: PUSH
22160: LD_INT 60
22162: GREATEREQUAL
22163: IFFALSE 22126
// game_speed := 4 ;
22165: LD_ADDR_OWVAR 65
22169: PUSH
22170: LD_INT 4
22172: ST_TO_ADDR
// end ;
22173: PPOPN 1
22175: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22176: LD_EXP 34
22180: IFFALSE 22188
22182: PUSH
22183: LD_EXP 61
22187: AND
22188: IFFALSE 22334
22190: GO 22192
22192: DISABLE
22193: LD_INT 0
22195: PPUSH
22196: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22197: LD_ADDR_VAR 0 1
22201: PUSH
22202: LD_INT 22
22204: PUSH
22205: LD_OWVAR 2
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 2
22216: PUSH
22217: LD_INT 30
22219: PUSH
22220: LD_INT 0
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PUSH
22227: LD_INT 30
22229: PUSH
22230: LD_INT 1
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: LIST
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PPUSH
22246: CALL_OW 69
22250: ST_TO_ADDR
// if not depot then
22251: LD_VAR 0 1
22255: NOT
22256: IFFALSE 22260
// exit ;
22258: GO 22334
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22260: LD_ADDR_VAR 0 2
22264: PUSH
22265: LD_VAR 0 1
22269: PUSH
22270: LD_INT 1
22272: PPUSH
22273: LD_VAR 0 1
22277: PPUSH
22278: CALL_OW 12
22282: ARRAY
22283: PPUSH
22284: CALL_OW 274
22288: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22289: LD_VAR 0 2
22293: PPUSH
22294: LD_INT 1
22296: PPUSH
22297: LD_INT 0
22299: PPUSH
22300: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22304: LD_VAR 0 2
22308: PPUSH
22309: LD_INT 2
22311: PPUSH
22312: LD_INT 0
22314: PPUSH
22315: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22319: LD_VAR 0 2
22323: PPUSH
22324: LD_INT 3
22326: PPUSH
22327: LD_INT 0
22329: PPUSH
22330: CALL_OW 277
// end ;
22334: PPOPN 2
22336: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22337: LD_EXP 34
22341: IFFALSE 22349
22343: PUSH
22344: LD_EXP 62
22348: AND
22349: IFFALSE 22446
22351: GO 22353
22353: DISABLE
22354: LD_INT 0
22356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22357: LD_ADDR_VAR 0 1
22361: PUSH
22362: LD_INT 22
22364: PUSH
22365: LD_OWVAR 2
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 21
22376: PUSH
22377: LD_INT 1
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 3
22386: PUSH
22387: LD_INT 23
22389: PUSH
22390: LD_INT 0
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: LIST
22405: PPUSH
22406: CALL_OW 69
22410: ST_TO_ADDR
// if not tmp then
22411: LD_VAR 0 1
22415: NOT
22416: IFFALSE 22420
// exit ;
22418: GO 22446
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22420: LD_VAR 0 1
22424: PUSH
22425: LD_INT 1
22427: PPUSH
22428: LD_VAR 0 1
22432: PPUSH
22433: CALL_OW 12
22437: ARRAY
22438: PPUSH
22439: LD_INT 200
22441: PPUSH
22442: CALL_OW 234
// end ;
22446: PPOPN 1
22448: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
22449: LD_EXP 34
22453: IFFALSE 22461
22455: PUSH
22456: LD_EXP 63
22460: AND
22461: IFFALSE 22540
22463: GO 22465
22465: DISABLE
22466: LD_INT 0
22468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
22469: LD_ADDR_VAR 0 1
22473: PUSH
22474: LD_INT 22
22476: PUSH
22477: LD_OWVAR 2
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 21
22488: PUSH
22489: LD_INT 2
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PPUSH
22500: CALL_OW 69
22504: ST_TO_ADDR
// if not tmp then
22505: LD_VAR 0 1
22509: NOT
22510: IFFALSE 22514
// exit ;
22512: GO 22540
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
22514: LD_VAR 0 1
22518: PUSH
22519: LD_INT 1
22521: PPUSH
22522: LD_VAR 0 1
22526: PPUSH
22527: CALL_OW 12
22531: ARRAY
22532: PPUSH
22533: LD_INT 60
22535: PPUSH
22536: CALL_OW 234
// end ;
22540: PPOPN 1
22542: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
22543: LD_EXP 34
22547: IFFALSE 22555
22549: PUSH
22550: LD_EXP 64
22554: AND
22555: IFFALSE 22654
22557: GO 22559
22559: DISABLE
22560: LD_INT 0
22562: PPUSH
22563: PPUSH
// begin enable ;
22564: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
22565: LD_ADDR_VAR 0 1
22569: PUSH
22570: LD_INT 22
22572: PUSH
22573: LD_OWVAR 2
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 61
22584: PUSH
22585: EMPTY
22586: LIST
22587: PUSH
22588: LD_INT 33
22590: PUSH
22591: LD_INT 2
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: LIST
22602: PPUSH
22603: CALL_OW 69
22607: ST_TO_ADDR
// if not tmp then
22608: LD_VAR 0 1
22612: NOT
22613: IFFALSE 22617
// exit ;
22615: GO 22654
// for i in tmp do
22617: LD_ADDR_VAR 0 2
22621: PUSH
22622: LD_VAR 0 1
22626: PUSH
22627: FOR_IN
22628: IFFALSE 22652
// if IsControledBy ( i ) then
22630: LD_VAR 0 2
22634: PPUSH
22635: CALL_OW 312
22639: IFFALSE 22650
// ComUnlink ( i ) ;
22641: LD_VAR 0 2
22645: PPUSH
22646: CALL_OW 136
22650: GO 22627
22652: POP
22653: POP
// end ;
22654: PPOPN 2
22656: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
22657: LD_EXP 34
22661: IFFALSE 22669
22663: PUSH
22664: LD_EXP 65
22668: AND
22669: IFFALSE 22809
22671: GO 22673
22673: DISABLE
22674: LD_INT 0
22676: PPUSH
22677: PPUSH
// begin ToLua ( displayPowell(); ) ;
22678: LD_STRING displayPowell();
22680: PPUSH
22681: CALL_OW 559
// uc_side := 0 ;
22685: LD_ADDR_OWVAR 20
22689: PUSH
22690: LD_INT 0
22692: ST_TO_ADDR
// uc_nation := 2 ;
22693: LD_ADDR_OWVAR 21
22697: PUSH
22698: LD_INT 2
22700: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
22701: LD_ADDR_OWVAR 37
22705: PUSH
22706: LD_INT 14
22708: ST_TO_ADDR
// vc_engine := engine_siberite ;
22709: LD_ADDR_OWVAR 39
22713: PUSH
22714: LD_INT 3
22716: ST_TO_ADDR
// vc_control := control_apeman ;
22717: LD_ADDR_OWVAR 38
22721: PUSH
22722: LD_INT 5
22724: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
22725: LD_ADDR_OWVAR 40
22729: PUSH
22730: LD_INT 29
22732: ST_TO_ADDR
// un := CreateVehicle ;
22733: LD_ADDR_VAR 0 2
22737: PUSH
22738: CALL_OW 45
22742: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22743: LD_VAR 0 2
22747: PPUSH
22748: LD_INT 1
22750: PPUSH
22751: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22755: LD_INT 35
22757: PPUSH
22758: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22762: LD_VAR 0 2
22766: PPUSH
22767: LD_INT 22
22769: PUSH
22770: LD_OWVAR 2
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PPUSH
22779: CALL_OW 69
22783: PPUSH
22784: LD_VAR 0 2
22788: PPUSH
22789: CALL_OW 74
22793: PPUSH
22794: CALL_OW 115
// until IsDead ( un ) ;
22798: LD_VAR 0 2
22802: PPUSH
22803: CALL_OW 301
22807: IFFALSE 22755
// end ;
22809: PPOPN 2
22811: END
// every 0 0$1 trigger StreamModeActive and sStu do
22812: LD_EXP 34
22816: IFFALSE 22824
22818: PUSH
22819: LD_EXP 73
22823: AND
22824: IFFALSE 22840
22826: GO 22828
22828: DISABLE
// begin ToLua ( displayStucuk(); ) ;
22829: LD_STRING displayStucuk();
22831: PPUSH
22832: CALL_OW 559
// ResetFog ;
22836: CALL_OW 335
// end ;
22840: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
22841: LD_EXP 34
22845: IFFALSE 22853
22847: PUSH
22848: LD_EXP 66
22852: AND
22853: IFFALSE 22994
22855: GO 22857
22857: DISABLE
22858: LD_INT 0
22860: PPUSH
22861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22862: LD_ADDR_VAR 0 2
22866: PUSH
22867: LD_INT 22
22869: PUSH
22870: LD_OWVAR 2
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: LD_INT 21
22881: PUSH
22882: LD_INT 1
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PPUSH
22893: CALL_OW 69
22897: ST_TO_ADDR
// if not tmp then
22898: LD_VAR 0 2
22902: NOT
22903: IFFALSE 22907
// exit ;
22905: GO 22994
// un := tmp [ rand ( 1 , tmp ) ] ;
22907: LD_ADDR_VAR 0 1
22911: PUSH
22912: LD_VAR 0 2
22916: PUSH
22917: LD_INT 1
22919: PPUSH
22920: LD_VAR 0 2
22924: PPUSH
22925: CALL_OW 12
22929: ARRAY
22930: ST_TO_ADDR
// SetSide ( un , 0 ) ;
22931: LD_VAR 0 1
22935: PPUSH
22936: LD_INT 0
22938: PPUSH
22939: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
22943: LD_VAR 0 1
22947: PPUSH
22948: LD_OWVAR 3
22952: PUSH
22953: LD_VAR 0 1
22957: DIFF
22958: PPUSH
22959: LD_VAR 0 1
22963: PPUSH
22964: CALL_OW 74
22968: PPUSH
22969: CALL_OW 115
// wait ( 0 0$20 ) ;
22973: LD_INT 700
22975: PPUSH
22976: CALL_OW 67
// SetSide ( un , your_side ) ;
22980: LD_VAR 0 1
22984: PPUSH
22985: LD_OWVAR 2
22989: PPUSH
22990: CALL_OW 235
// end ;
22994: PPOPN 2
22996: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
22997: LD_EXP 34
23001: IFFALSE 23009
23003: PUSH
23004: LD_EXP 67
23008: AND
23009: IFFALSE 23115
23011: GO 23013
23013: DISABLE
23014: LD_INT 0
23016: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23017: LD_ADDR_VAR 0 1
23021: PUSH
23022: LD_INT 22
23024: PUSH
23025: LD_OWVAR 2
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 2
23036: PUSH
23037: LD_INT 30
23039: PUSH
23040: LD_INT 0
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 30
23049: PUSH
23050: LD_INT 1
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: LIST
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PPUSH
23066: CALL_OW 69
23070: ST_TO_ADDR
// if not depot then
23071: LD_VAR 0 1
23075: NOT
23076: IFFALSE 23080
// exit ;
23078: GO 23115
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23080: LD_VAR 0 1
23084: PUSH
23085: LD_INT 1
23087: ARRAY
23088: PPUSH
23089: CALL_OW 250
23093: PPUSH
23094: LD_VAR 0 1
23098: PUSH
23099: LD_INT 1
23101: ARRAY
23102: PPUSH
23103: CALL_OW 251
23107: PPUSH
23108: LD_INT 70
23110: PPUSH
23111: CALL_OW 495
// end ;
23115: PPOPN 1
23117: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23118: LD_EXP 34
23122: IFFALSE 23130
23124: PUSH
23125: LD_EXP 68
23129: AND
23130: IFFALSE 23341
23132: GO 23134
23134: DISABLE
23135: LD_INT 0
23137: PPUSH
23138: PPUSH
23139: PPUSH
23140: PPUSH
23141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23142: LD_ADDR_VAR 0 5
23146: PUSH
23147: LD_INT 22
23149: PUSH
23150: LD_OWVAR 2
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: LD_INT 21
23161: PUSH
23162: LD_INT 1
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PPUSH
23173: CALL_OW 69
23177: ST_TO_ADDR
// if not tmp then
23178: LD_VAR 0 5
23182: NOT
23183: IFFALSE 23187
// exit ;
23185: GO 23341
// for i in tmp do
23187: LD_ADDR_VAR 0 1
23191: PUSH
23192: LD_VAR 0 5
23196: PUSH
23197: FOR_IN
23198: IFFALSE 23339
// begin d := rand ( 0 , 5 ) ;
23200: LD_ADDR_VAR 0 4
23204: PUSH
23205: LD_INT 0
23207: PPUSH
23208: LD_INT 5
23210: PPUSH
23211: CALL_OW 12
23215: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23216: LD_ADDR_VAR 0 2
23220: PUSH
23221: LD_VAR 0 1
23225: PPUSH
23226: CALL_OW 250
23230: PPUSH
23231: LD_VAR 0 4
23235: PPUSH
23236: LD_INT 3
23238: PPUSH
23239: LD_INT 12
23241: PPUSH
23242: CALL_OW 12
23246: PPUSH
23247: CALL_OW 272
23251: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23252: LD_ADDR_VAR 0 3
23256: PUSH
23257: LD_VAR 0 1
23261: PPUSH
23262: CALL_OW 251
23266: PPUSH
23267: LD_VAR 0 4
23271: PPUSH
23272: LD_INT 3
23274: PPUSH
23275: LD_INT 12
23277: PPUSH
23278: CALL_OW 12
23282: PPUSH
23283: CALL_OW 273
23287: ST_TO_ADDR
// if ValidHex ( x , y ) then
23288: LD_VAR 0 2
23292: PPUSH
23293: LD_VAR 0 3
23297: PPUSH
23298: CALL_OW 488
23302: IFFALSE 23337
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23304: LD_VAR 0 1
23308: PPUSH
23309: LD_VAR 0 2
23313: PPUSH
23314: LD_VAR 0 3
23318: PPUSH
23319: LD_INT 3
23321: PPUSH
23322: LD_INT 6
23324: PPUSH
23325: CALL_OW 12
23329: PPUSH
23330: LD_INT 1
23332: PPUSH
23333: CALL_OW 483
// end ;
23337: GO 23197
23339: POP
23340: POP
// end ;
23341: PPOPN 5
23343: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23344: LD_EXP 34
23348: IFFALSE 23356
23350: PUSH
23351: LD_EXP 69
23355: AND
23356: IFFALSE 23450
23358: GO 23360
23360: DISABLE
23361: LD_INT 0
23363: PPUSH
23364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23365: LD_ADDR_VAR 0 2
23369: PUSH
23370: LD_INT 22
23372: PUSH
23373: LD_OWVAR 2
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: PUSH
23382: LD_INT 32
23384: PUSH
23385: LD_INT 1
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: LD_INT 21
23394: PUSH
23395: LD_INT 2
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: LIST
23406: PPUSH
23407: CALL_OW 69
23411: ST_TO_ADDR
// if not tmp then
23412: LD_VAR 0 2
23416: NOT
23417: IFFALSE 23421
// exit ;
23419: GO 23450
// for i in tmp do
23421: LD_ADDR_VAR 0 1
23425: PUSH
23426: LD_VAR 0 2
23430: PUSH
23431: FOR_IN
23432: IFFALSE 23448
// SetFuel ( i , 0 ) ;
23434: LD_VAR 0 1
23438: PPUSH
23439: LD_INT 0
23441: PPUSH
23442: CALL_OW 240
23446: GO 23431
23448: POP
23449: POP
// end ;
23450: PPOPN 2
23452: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23453: LD_EXP 34
23457: IFFALSE 23465
23459: PUSH
23460: LD_EXP 70
23464: AND
23465: IFFALSE 23531
23467: GO 23469
23469: DISABLE
23470: LD_INT 0
23472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23473: LD_ADDR_VAR 0 1
23477: PUSH
23478: LD_INT 22
23480: PUSH
23481: LD_OWVAR 2
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 30
23492: PUSH
23493: LD_INT 29
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PPUSH
23504: CALL_OW 69
23508: ST_TO_ADDR
// if not tmp then
23509: LD_VAR 0 1
23513: NOT
23514: IFFALSE 23518
// exit ;
23516: GO 23531
// DestroyUnit ( tmp [ 1 ] ) ;
23518: LD_VAR 0 1
23522: PUSH
23523: LD_INT 1
23525: ARRAY
23526: PPUSH
23527: CALL_OW 65
// end ;
23531: PPOPN 1
23533: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
23534: LD_EXP 34
23538: IFFALSE 23546
23540: PUSH
23541: LD_EXP 72
23545: AND
23546: IFFALSE 23675
23548: GO 23550
23550: DISABLE
23551: LD_INT 0
23553: PPUSH
// begin uc_side := 0 ;
23554: LD_ADDR_OWVAR 20
23558: PUSH
23559: LD_INT 0
23561: ST_TO_ADDR
// uc_nation := nation_arabian ;
23562: LD_ADDR_OWVAR 21
23566: PUSH
23567: LD_INT 2
23569: ST_TO_ADDR
// hc_gallery :=  ;
23570: LD_ADDR_OWVAR 33
23574: PUSH
23575: LD_STRING 
23577: ST_TO_ADDR
// hc_name :=  ;
23578: LD_ADDR_OWVAR 26
23582: PUSH
23583: LD_STRING 
23585: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
23586: LD_INT 1
23588: PPUSH
23589: LD_INT 11
23591: PPUSH
23592: LD_INT 10
23594: PPUSH
23595: CALL_OW 380
// un := CreateHuman ;
23599: LD_ADDR_VAR 0 1
23603: PUSH
23604: CALL_OW 44
23608: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23609: LD_VAR 0 1
23613: PPUSH
23614: LD_INT 1
23616: PPUSH
23617: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23621: LD_INT 35
23623: PPUSH
23624: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23628: LD_VAR 0 1
23632: PPUSH
23633: LD_INT 22
23635: PUSH
23636: LD_OWVAR 2
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PPUSH
23645: CALL_OW 69
23649: PPUSH
23650: LD_VAR 0 1
23654: PPUSH
23655: CALL_OW 74
23659: PPUSH
23660: CALL_OW 115
// until IsDead ( un ) ;
23664: LD_VAR 0 1
23668: PPUSH
23669: CALL_OW 301
23673: IFFALSE 23621
// end ;
23675: PPOPN 1
23677: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
23678: LD_EXP 34
23682: IFFALSE 23690
23684: PUSH
23685: LD_EXP 74
23689: AND
23690: IFFALSE 23702
23692: GO 23694
23694: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
23695: LD_STRING earthquake(getX(game), 0, 32)
23697: PPUSH
23698: CALL_OW 559
23702: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
23703: LD_EXP 34
23707: IFFALSE 23715
23709: PUSH
23710: LD_EXP 75
23714: AND
23715: IFFALSE 23806
23717: GO 23719
23719: DISABLE
23720: LD_INT 0
23722: PPUSH
// begin enable ;
23723: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
23724: LD_ADDR_VAR 0 1
23728: PUSH
23729: LD_INT 22
23731: PUSH
23732: LD_OWVAR 2
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 21
23743: PUSH
23744: LD_INT 2
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: LD_INT 33
23753: PUSH
23754: LD_INT 3
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: LIST
23765: PPUSH
23766: CALL_OW 69
23770: ST_TO_ADDR
// if not tmp then
23771: LD_VAR 0 1
23775: NOT
23776: IFFALSE 23780
// exit ;
23778: GO 23806
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23780: LD_VAR 0 1
23784: PUSH
23785: LD_INT 1
23787: PPUSH
23788: LD_VAR 0 1
23792: PPUSH
23793: CALL_OW 12
23797: ARRAY
23798: PPUSH
23799: LD_INT 1
23801: PPUSH
23802: CALL_OW 234
// end ;
23806: PPOPN 1
23808: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
23809: LD_EXP 34
23813: IFFALSE 23821
23815: PUSH
23816: LD_EXP 76
23820: AND
23821: IFFALSE 23962
23823: GO 23825
23825: DISABLE
23826: LD_INT 0
23828: PPUSH
23829: PPUSH
23830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23831: LD_ADDR_VAR 0 3
23835: PUSH
23836: LD_INT 22
23838: PUSH
23839: LD_OWVAR 2
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 25
23850: PUSH
23851: LD_INT 1
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PPUSH
23862: CALL_OW 69
23866: ST_TO_ADDR
// if not tmp then
23867: LD_VAR 0 3
23871: NOT
23872: IFFALSE 23876
// exit ;
23874: GO 23962
// un := tmp [ rand ( 1 , tmp ) ] ;
23876: LD_ADDR_VAR 0 2
23880: PUSH
23881: LD_VAR 0 3
23885: PUSH
23886: LD_INT 1
23888: PPUSH
23889: LD_VAR 0 3
23893: PPUSH
23894: CALL_OW 12
23898: ARRAY
23899: ST_TO_ADDR
// if Crawls ( un ) then
23900: LD_VAR 0 2
23904: PPUSH
23905: CALL_OW 318
23909: IFFALSE 23920
// ComWalk ( un ) ;
23911: LD_VAR 0 2
23915: PPUSH
23916: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
23920: LD_VAR 0 2
23924: PPUSH
23925: LD_INT 9
23927: PPUSH
23928: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
23932: LD_INT 28
23934: PPUSH
23935: LD_OWVAR 2
23939: PPUSH
23940: LD_INT 2
23942: PPUSH
23943: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
23947: LD_INT 29
23949: PPUSH
23950: LD_OWVAR 2
23954: PPUSH
23955: LD_INT 2
23957: PPUSH
23958: CALL_OW 322
// end ;
23962: PPOPN 3
23964: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
23965: LD_EXP 34
23969: IFFALSE 23977
23971: PUSH
23972: LD_EXP 77
23976: AND
23977: IFFALSE 24088
23979: GO 23981
23981: DISABLE
23982: LD_INT 0
23984: PPUSH
23985: PPUSH
23986: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23987: LD_ADDR_VAR 0 3
23991: PUSH
23992: LD_INT 22
23994: PUSH
23995: LD_OWVAR 2
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 25
24006: PUSH
24007: LD_INT 1
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PPUSH
24018: CALL_OW 69
24022: ST_TO_ADDR
// if not tmp then
24023: LD_VAR 0 3
24027: NOT
24028: IFFALSE 24032
// exit ;
24030: GO 24088
// un := tmp [ rand ( 1 , tmp ) ] ;
24032: LD_ADDR_VAR 0 2
24036: PUSH
24037: LD_VAR 0 3
24041: PUSH
24042: LD_INT 1
24044: PPUSH
24045: LD_VAR 0 3
24049: PPUSH
24050: CALL_OW 12
24054: ARRAY
24055: ST_TO_ADDR
// if Crawls ( un ) then
24056: LD_VAR 0 2
24060: PPUSH
24061: CALL_OW 318
24065: IFFALSE 24076
// ComWalk ( un ) ;
24067: LD_VAR 0 2
24071: PPUSH
24072: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24076: LD_VAR 0 2
24080: PPUSH
24081: LD_INT 8
24083: PPUSH
24084: CALL_OW 336
// end ;
24088: PPOPN 3
24090: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24091: LD_EXP 34
24095: IFFALSE 24103
24097: PUSH
24098: LD_EXP 78
24102: AND
24103: IFFALSE 24247
24105: GO 24107
24107: DISABLE
24108: LD_INT 0
24110: PPUSH
24111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24112: LD_ADDR_VAR 0 2
24116: PUSH
24117: LD_INT 22
24119: PUSH
24120: LD_OWVAR 2
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 21
24131: PUSH
24132: LD_INT 2
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: LD_INT 2
24141: PUSH
24142: LD_INT 34
24144: PUSH
24145: LD_INT 12
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 34
24154: PUSH
24155: LD_INT 51
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: LD_INT 34
24164: PUSH
24165: LD_INT 32
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: LIST
24182: PPUSH
24183: CALL_OW 69
24187: ST_TO_ADDR
// if not tmp then
24188: LD_VAR 0 2
24192: NOT
24193: IFFALSE 24197
// exit ;
24195: GO 24247
// for i in tmp do
24197: LD_ADDR_VAR 0 1
24201: PUSH
24202: LD_VAR 0 2
24206: PUSH
24207: FOR_IN
24208: IFFALSE 24245
// if GetCargo ( i , mat_artifact ) = 0 then
24210: LD_VAR 0 1
24214: PPUSH
24215: LD_INT 4
24217: PPUSH
24218: CALL_OW 289
24222: PUSH
24223: LD_INT 0
24225: EQUAL
24226: IFFALSE 24243
// SetCargo ( i , mat_siberit , 100 ) ;
24228: LD_VAR 0 1
24232: PPUSH
24233: LD_INT 3
24235: PPUSH
24236: LD_INT 100
24238: PPUSH
24239: CALL_OW 290
24243: GO 24207
24245: POP
24246: POP
// end ;
24247: PPOPN 2
24249: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24250: LD_EXP 34
24254: IFFALSE 24262
24256: PUSH
24257: LD_EXP 79
24261: AND
24262: IFFALSE 24445
24264: GO 24266
24266: DISABLE
24267: LD_INT 0
24269: PPUSH
24270: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24271: LD_ADDR_VAR 0 2
24275: PUSH
24276: LD_INT 22
24278: PUSH
24279: LD_OWVAR 2
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PPUSH
24288: CALL_OW 69
24292: ST_TO_ADDR
// if not tmp then
24293: LD_VAR 0 2
24297: NOT
24298: IFFALSE 24302
// exit ;
24300: GO 24445
// for i := 1 to 2 do
24302: LD_ADDR_VAR 0 1
24306: PUSH
24307: DOUBLE
24308: LD_INT 1
24310: DEC
24311: ST_TO_ADDR
24312: LD_INT 2
24314: PUSH
24315: FOR_TO
24316: IFFALSE 24443
// begin uc_side := your_side ;
24318: LD_ADDR_OWVAR 20
24322: PUSH
24323: LD_OWVAR 2
24327: ST_TO_ADDR
// uc_nation := nation_american ;
24328: LD_ADDR_OWVAR 21
24332: PUSH
24333: LD_INT 1
24335: ST_TO_ADDR
// vc_chassis := us_morphling ;
24336: LD_ADDR_OWVAR 37
24340: PUSH
24341: LD_INT 5
24343: ST_TO_ADDR
// vc_engine := engine_siberite ;
24344: LD_ADDR_OWVAR 39
24348: PUSH
24349: LD_INT 3
24351: ST_TO_ADDR
// vc_control := control_computer ;
24352: LD_ADDR_OWVAR 38
24356: PUSH
24357: LD_INT 3
24359: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24360: LD_ADDR_OWVAR 40
24364: PUSH
24365: LD_INT 10
24367: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24368: LD_VAR 0 2
24372: PUSH
24373: LD_INT 1
24375: ARRAY
24376: PPUSH
24377: CALL_OW 310
24381: NOT
24382: IFFALSE 24429
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24384: CALL_OW 45
24388: PPUSH
24389: LD_VAR 0 2
24393: PUSH
24394: LD_INT 1
24396: ARRAY
24397: PPUSH
24398: CALL_OW 250
24402: PPUSH
24403: LD_VAR 0 2
24407: PUSH
24408: LD_INT 1
24410: ARRAY
24411: PPUSH
24412: CALL_OW 251
24416: PPUSH
24417: LD_INT 12
24419: PPUSH
24420: LD_INT 1
24422: PPUSH
24423: CALL_OW 50
24427: GO 24441
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24429: CALL_OW 45
24433: PPUSH
24434: LD_INT 1
24436: PPUSH
24437: CALL_OW 51
// end ;
24441: GO 24315
24443: POP
24444: POP
// end ;
24445: PPOPN 2
24447: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24448: LD_EXP 34
24452: IFFALSE 24460
24454: PUSH
24455: LD_EXP 80
24459: AND
24460: IFFALSE 24682
24462: GO 24464
24464: DISABLE
24465: LD_INT 0
24467: PPUSH
24468: PPUSH
24469: PPUSH
24470: PPUSH
24471: PPUSH
24472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24473: LD_ADDR_VAR 0 6
24477: PUSH
24478: LD_INT 22
24480: PUSH
24481: LD_OWVAR 2
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PUSH
24490: LD_INT 21
24492: PUSH
24493: LD_INT 1
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 3
24502: PUSH
24503: LD_INT 23
24505: PUSH
24506: LD_INT 0
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: LIST
24521: PPUSH
24522: CALL_OW 69
24526: ST_TO_ADDR
// if not tmp then
24527: LD_VAR 0 6
24531: NOT
24532: IFFALSE 24536
// exit ;
24534: GO 24682
// s1 := rand ( 1 , 4 ) ;
24536: LD_ADDR_VAR 0 2
24540: PUSH
24541: LD_INT 1
24543: PPUSH
24544: LD_INT 4
24546: PPUSH
24547: CALL_OW 12
24551: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
24552: LD_ADDR_VAR 0 4
24556: PUSH
24557: LD_VAR 0 6
24561: PUSH
24562: LD_INT 1
24564: ARRAY
24565: PPUSH
24566: LD_VAR 0 2
24570: PPUSH
24571: CALL_OW 259
24575: ST_TO_ADDR
// if s1 = 1 then
24576: LD_VAR 0 2
24580: PUSH
24581: LD_INT 1
24583: EQUAL
24584: IFFALSE 24604
// s2 := rand ( 2 , 4 ) else
24586: LD_ADDR_VAR 0 3
24590: PUSH
24591: LD_INT 2
24593: PPUSH
24594: LD_INT 4
24596: PPUSH
24597: CALL_OW 12
24601: ST_TO_ADDR
24602: GO 24612
// s2 := 1 ;
24604: LD_ADDR_VAR 0 3
24608: PUSH
24609: LD_INT 1
24611: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
24612: LD_ADDR_VAR 0 5
24616: PUSH
24617: LD_VAR 0 6
24621: PUSH
24622: LD_INT 1
24624: ARRAY
24625: PPUSH
24626: LD_VAR 0 3
24630: PPUSH
24631: CALL_OW 259
24635: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
24636: LD_VAR 0 6
24640: PUSH
24641: LD_INT 1
24643: ARRAY
24644: PPUSH
24645: LD_VAR 0 2
24649: PPUSH
24650: LD_VAR 0 5
24654: PPUSH
24655: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
24659: LD_VAR 0 6
24663: PUSH
24664: LD_INT 1
24666: ARRAY
24667: PPUSH
24668: LD_VAR 0 3
24672: PPUSH
24673: LD_VAR 0 4
24677: PPUSH
24678: CALL_OW 237
// end ;
24682: PPOPN 6
24684: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
24685: LD_EXP 34
24689: IFFALSE 24697
24691: PUSH
24692: LD_EXP 81
24696: AND
24697: IFFALSE 24776
24699: GO 24701
24701: DISABLE
24702: LD_INT 0
24704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
24705: LD_ADDR_VAR 0 1
24709: PUSH
24710: LD_INT 22
24712: PUSH
24713: LD_OWVAR 2
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 30
24724: PUSH
24725: LD_INT 3
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PPUSH
24736: CALL_OW 69
24740: ST_TO_ADDR
// if not tmp then
24741: LD_VAR 0 1
24745: NOT
24746: IFFALSE 24750
// exit ;
24748: GO 24776
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24750: LD_VAR 0 1
24754: PUSH
24755: LD_INT 1
24757: PPUSH
24758: LD_VAR 0 1
24762: PPUSH
24763: CALL_OW 12
24767: ARRAY
24768: PPUSH
24769: LD_INT 1
24771: PPUSH
24772: CALL_OW 234
// end ;
24776: PPOPN 1
24778: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
24779: LD_EXP 34
24783: IFFALSE 24791
24785: PUSH
24786: LD_EXP 82
24790: AND
24791: IFFALSE 24903
24793: GO 24795
24795: DISABLE
24796: LD_INT 0
24798: PPUSH
24799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
24800: LD_ADDR_VAR 0 2
24804: PUSH
24805: LD_INT 22
24807: PUSH
24808: LD_OWVAR 2
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 2
24819: PUSH
24820: LD_INT 30
24822: PUSH
24823: LD_INT 27
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 30
24832: PUSH
24833: LD_INT 26
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 30
24842: PUSH
24843: LD_INT 28
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PPUSH
24860: CALL_OW 69
24864: ST_TO_ADDR
// if not tmp then
24865: LD_VAR 0 2
24869: NOT
24870: IFFALSE 24874
// exit ;
24872: GO 24903
// for i in tmp do
24874: LD_ADDR_VAR 0 1
24878: PUSH
24879: LD_VAR 0 2
24883: PUSH
24884: FOR_IN
24885: IFFALSE 24901
// SetLives ( i , 1 ) ;
24887: LD_VAR 0 1
24891: PPUSH
24892: LD_INT 1
24894: PPUSH
24895: CALL_OW 234
24899: GO 24884
24901: POP
24902: POP
// end ;
24903: PPOPN 2
24905: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
24906: LD_EXP 34
24910: IFFALSE 24918
24912: PUSH
24913: LD_EXP 83
24917: AND
24918: IFFALSE 25205
24920: GO 24922
24922: DISABLE
24923: LD_INT 0
24925: PPUSH
24926: PPUSH
24927: PPUSH
// begin i := rand ( 1 , 7 ) ;
24928: LD_ADDR_VAR 0 1
24932: PUSH
24933: LD_INT 1
24935: PPUSH
24936: LD_INT 7
24938: PPUSH
24939: CALL_OW 12
24943: ST_TO_ADDR
// case i of 1 :
24944: LD_VAR 0 1
24948: PUSH
24949: LD_INT 1
24951: DOUBLE
24952: EQUAL
24953: IFTRUE 24957
24955: GO 24967
24957: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
24958: LD_STRING earthquake(getX(game), 0, 32)
24960: PPUSH
24961: CALL_OW 559
24965: GO 25205
24967: LD_INT 2
24969: DOUBLE
24970: EQUAL
24971: IFTRUE 24975
24973: GO 24989
24975: POP
// begin ToLua ( displayStucuk(); ) ;
24976: LD_STRING displayStucuk();
24978: PPUSH
24979: CALL_OW 559
// ResetFog ;
24983: CALL_OW 335
// end ; 3 :
24987: GO 25205
24989: LD_INT 3
24991: DOUBLE
24992: EQUAL
24993: IFTRUE 24997
24995: GO 25101
24997: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24998: LD_ADDR_VAR 0 2
25002: PUSH
25003: LD_INT 22
25005: PUSH
25006: LD_OWVAR 2
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: LD_INT 25
25017: PUSH
25018: LD_INT 1
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PPUSH
25029: CALL_OW 69
25033: ST_TO_ADDR
// if not tmp then
25034: LD_VAR 0 2
25038: NOT
25039: IFFALSE 25043
// exit ;
25041: GO 25205
// un := tmp [ rand ( 1 , tmp ) ] ;
25043: LD_ADDR_VAR 0 3
25047: PUSH
25048: LD_VAR 0 2
25052: PUSH
25053: LD_INT 1
25055: PPUSH
25056: LD_VAR 0 2
25060: PPUSH
25061: CALL_OW 12
25065: ARRAY
25066: ST_TO_ADDR
// if Crawls ( un ) then
25067: LD_VAR 0 3
25071: PPUSH
25072: CALL_OW 318
25076: IFFALSE 25087
// ComWalk ( un ) ;
25078: LD_VAR 0 3
25082: PPUSH
25083: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25087: LD_VAR 0 3
25091: PPUSH
25092: LD_INT 8
25094: PPUSH
25095: CALL_OW 336
// end ; 4 :
25099: GO 25205
25101: LD_INT 4
25103: DOUBLE
25104: EQUAL
25105: IFTRUE 25109
25107: GO 25183
25109: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25110: LD_ADDR_VAR 0 2
25114: PUSH
25115: LD_INT 22
25117: PUSH
25118: LD_OWVAR 2
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 30
25129: PUSH
25130: LD_INT 29
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PPUSH
25141: CALL_OW 69
25145: ST_TO_ADDR
// if not tmp then
25146: LD_VAR 0 2
25150: NOT
25151: IFFALSE 25155
// exit ;
25153: GO 25205
// CenterNowOnUnits ( tmp [ 1 ] ) ;
25155: LD_VAR 0 2
25159: PUSH
25160: LD_INT 1
25162: ARRAY
25163: PPUSH
25164: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
25168: LD_VAR 0 2
25172: PUSH
25173: LD_INT 1
25175: ARRAY
25176: PPUSH
25177: CALL_OW 65
// end ; 5 .. 7 :
25181: GO 25205
25183: LD_INT 5
25185: DOUBLE
25186: GREATEREQUAL
25187: IFFALSE 25195
25189: LD_INT 7
25191: DOUBLE
25192: LESSEQUAL
25193: IFTRUE 25197
25195: GO 25204
25197: POP
// StreamSibBomb ; end ;
25198: CALL 21386 0 0
25202: GO 25205
25204: POP
// end ;
25205: PPOPN 3
25207: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25208: LD_EXP 34
25212: IFFALSE 25220
25214: PUSH
25215: LD_EXP 84
25219: AND
25220: IFFALSE 25376
25222: GO 25224
25224: DISABLE
25225: LD_INT 0
25227: PPUSH
25228: PPUSH
25229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25230: LD_ADDR_VAR 0 2
25234: PUSH
25235: LD_INT 81
25237: PUSH
25238: LD_OWVAR 2
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 2
25249: PUSH
25250: LD_INT 21
25252: PUSH
25253: LD_INT 1
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 21
25262: PUSH
25263: LD_INT 2
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: LIST
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PPUSH
25279: CALL_OW 69
25283: ST_TO_ADDR
// if not tmp then
25284: LD_VAR 0 2
25288: NOT
25289: IFFALSE 25293
// exit ;
25291: GO 25376
// p := 0 ;
25293: LD_ADDR_VAR 0 3
25297: PUSH
25298: LD_INT 0
25300: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25301: LD_INT 35
25303: PPUSH
25304: CALL_OW 67
// p := p + 1 ;
25308: LD_ADDR_VAR 0 3
25312: PUSH
25313: LD_VAR 0 3
25317: PUSH
25318: LD_INT 1
25320: PLUS
25321: ST_TO_ADDR
// for i in tmp do
25322: LD_ADDR_VAR 0 1
25326: PUSH
25327: LD_VAR 0 2
25331: PUSH
25332: FOR_IN
25333: IFFALSE 25364
// if GetLives ( i ) < 1000 then
25335: LD_VAR 0 1
25339: PPUSH
25340: CALL_OW 256
25344: PUSH
25345: LD_INT 1000
25347: LESS
25348: IFFALSE 25362
// SetLives ( i , 1000 ) ;
25350: LD_VAR 0 1
25354: PPUSH
25355: LD_INT 1000
25357: PPUSH
25358: CALL_OW 234
25362: GO 25332
25364: POP
25365: POP
// until p > 20 ;
25366: LD_VAR 0 3
25370: PUSH
25371: LD_INT 20
25373: GREATER
25374: IFFALSE 25301
// end ;
25376: PPOPN 3
25378: END
// every 0 0$1 trigger StreamModeActive and sTime do
25379: LD_EXP 34
25383: IFFALSE 25391
25385: PUSH
25386: LD_EXP 85
25390: AND
25391: IFFALSE 25426
25393: GO 25395
25395: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25396: LD_INT 28
25398: PPUSH
25399: LD_OWVAR 2
25403: PPUSH
25404: LD_INT 2
25406: PPUSH
25407: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25411: LD_INT 30
25413: PPUSH
25414: LD_OWVAR 2
25418: PPUSH
25419: LD_INT 2
25421: PPUSH
25422: CALL_OW 322
// end ;
25426: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25427: LD_EXP 34
25431: IFFALSE 25439
25433: PUSH
25434: LD_EXP 86
25438: AND
25439: IFFALSE 25560
25441: GO 25443
25443: DISABLE
25444: LD_INT 0
25446: PPUSH
25447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25448: LD_ADDR_VAR 0 2
25452: PUSH
25453: LD_INT 22
25455: PUSH
25456: LD_OWVAR 2
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 21
25467: PUSH
25468: LD_INT 1
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 3
25477: PUSH
25478: LD_INT 23
25480: PUSH
25481: LD_INT 0
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: LIST
25496: PPUSH
25497: CALL_OW 69
25501: ST_TO_ADDR
// if not tmp then
25502: LD_VAR 0 2
25506: NOT
25507: IFFALSE 25511
// exit ;
25509: GO 25560
// for i in tmp do
25511: LD_ADDR_VAR 0 1
25515: PUSH
25516: LD_VAR 0 2
25520: PUSH
25521: FOR_IN
25522: IFFALSE 25558
// begin if Crawls ( i ) then
25524: LD_VAR 0 1
25528: PPUSH
25529: CALL_OW 318
25533: IFFALSE 25544
// ComWalk ( i ) ;
25535: LD_VAR 0 1
25539: PPUSH
25540: CALL_OW 138
// SetClass ( i , 2 ) ;
25544: LD_VAR 0 1
25548: PPUSH
25549: LD_INT 2
25551: PPUSH
25552: CALL_OW 336
// end ;
25556: GO 25521
25558: POP
25559: POP
// end ;
25560: PPOPN 2
25562: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
25563: LD_EXP 34
25567: IFFALSE 25575
25569: PUSH
25570: LD_EXP 87
25574: AND
25575: IFFALSE 25865
25577: GO 25579
25579: DISABLE
25580: LD_INT 0
25582: PPUSH
25583: PPUSH
25584: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
25585: LD_OWVAR 2
25589: PPUSH
25590: LD_INT 9
25592: PPUSH
25593: LD_INT 1
25595: PPUSH
25596: LD_INT 1
25598: PPUSH
25599: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
25603: LD_INT 9
25605: PPUSH
25606: LD_OWVAR 2
25610: PPUSH
25611: CALL_OW 343
// uc_side := 9 ;
25615: LD_ADDR_OWVAR 20
25619: PUSH
25620: LD_INT 9
25622: ST_TO_ADDR
// uc_nation := 2 ;
25623: LD_ADDR_OWVAR 21
25627: PUSH
25628: LD_INT 2
25630: ST_TO_ADDR
// hc_name := Dark Warrior ;
25631: LD_ADDR_OWVAR 26
25635: PUSH
25636: LD_STRING Dark Warrior
25638: ST_TO_ADDR
// hc_gallery :=  ;
25639: LD_ADDR_OWVAR 33
25643: PUSH
25644: LD_STRING 
25646: ST_TO_ADDR
// hc_noskilllimit := true ;
25647: LD_ADDR_OWVAR 76
25651: PUSH
25652: LD_INT 1
25654: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
25655: LD_ADDR_OWVAR 31
25659: PUSH
25660: LD_INT 30
25662: PUSH
25663: LD_INT 30
25665: PUSH
25666: LD_INT 30
25668: PUSH
25669: LD_INT 30
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: ST_TO_ADDR
// un := CreateHuman ;
25678: LD_ADDR_VAR 0 3
25682: PUSH
25683: CALL_OW 44
25687: ST_TO_ADDR
// hc_noskilllimit := false ;
25688: LD_ADDR_OWVAR 76
25692: PUSH
25693: LD_INT 0
25695: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25696: LD_VAR 0 3
25700: PPUSH
25701: LD_INT 1
25703: PPUSH
25704: CALL_OW 51
// ToLua ( playRanger() ) ;
25708: LD_STRING playRanger()
25710: PPUSH
25711: CALL_OW 559
// p := 0 ;
25715: LD_ADDR_VAR 0 2
25719: PUSH
25720: LD_INT 0
25722: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25723: LD_INT 35
25725: PPUSH
25726: CALL_OW 67
// p := p + 1 ;
25730: LD_ADDR_VAR 0 2
25734: PUSH
25735: LD_VAR 0 2
25739: PUSH
25740: LD_INT 1
25742: PLUS
25743: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
25744: LD_VAR 0 3
25748: PPUSH
25749: CALL_OW 256
25753: PUSH
25754: LD_INT 1000
25756: LESS
25757: IFFALSE 25771
// SetLives ( un , 1000 ) ;
25759: LD_VAR 0 3
25763: PPUSH
25764: LD_INT 1000
25766: PPUSH
25767: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
25771: LD_VAR 0 3
25775: PPUSH
25776: LD_INT 81
25778: PUSH
25779: LD_OWVAR 2
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 91
25790: PUSH
25791: LD_VAR 0 3
25795: PUSH
25796: LD_INT 30
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: LIST
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PPUSH
25808: CALL_OW 69
25812: PPUSH
25813: LD_VAR 0 3
25817: PPUSH
25818: CALL_OW 74
25822: PPUSH
25823: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
25827: LD_VAR 0 2
25831: PUSH
25832: LD_INT 80
25834: GREATER
25835: IFTRUE 25848
25837: PUSH
25838: LD_VAR 0 3
25842: PPUSH
25843: CALL_OW 301
25847: OR
25848: IFFALSE 25723
// if un then
25850: LD_VAR 0 3
25854: IFFALSE 25865
// RemoveUnit ( un ) ;
25856: LD_VAR 0 3
25860: PPUSH
25861: CALL_OW 64
// end ;
25865: PPOPN 3
25867: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
25868: LD_EXP 88
25872: IFFALSE 25988
25874: GO 25876
25876: DISABLE
25877: LD_INT 0
25879: PPUSH
25880: PPUSH
25881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25882: LD_ADDR_VAR 0 2
25886: PUSH
25887: LD_INT 81
25889: PUSH
25890: LD_OWVAR 2
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 21
25901: PUSH
25902: LD_INT 1
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PPUSH
25913: CALL_OW 69
25917: ST_TO_ADDR
// ToLua ( playComputer() ) ;
25918: LD_STRING playComputer()
25920: PPUSH
25921: CALL_OW 559
// if not tmp then
25925: LD_VAR 0 2
25929: NOT
25930: IFFALSE 25934
// exit ;
25932: GO 25988
// for i in tmp do
25934: LD_ADDR_VAR 0 1
25938: PUSH
25939: LD_VAR 0 2
25943: PUSH
25944: FOR_IN
25945: IFFALSE 25986
// for j := 1 to 4 do
25947: LD_ADDR_VAR 0 3
25951: PUSH
25952: DOUBLE
25953: LD_INT 1
25955: DEC
25956: ST_TO_ADDR
25957: LD_INT 4
25959: PUSH
25960: FOR_TO
25961: IFFALSE 25982
// SetSkill ( i , j , 10 ) ;
25963: LD_VAR 0 1
25967: PPUSH
25968: LD_VAR 0 3
25972: PPUSH
25973: LD_INT 10
25975: PPUSH
25976: CALL_OW 237
25980: GO 25960
25982: POP
25983: POP
25984: GO 25944
25986: POP
25987: POP
// end ;
25988: PPOPN 3
25990: END
// every 0 0$1 trigger s30 do var i , tmp ;
25991: LD_EXP 89
25995: IFFALSE 26064
25997: GO 25999
25999: DISABLE
26000: LD_INT 0
26002: PPUSH
26003: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26004: LD_ADDR_VAR 0 2
26008: PUSH
26009: LD_INT 22
26011: PUSH
26012: LD_OWVAR 2
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PPUSH
26021: CALL_OW 69
26025: ST_TO_ADDR
// if not tmp then
26026: LD_VAR 0 2
26030: NOT
26031: IFFALSE 26035
// exit ;
26033: GO 26064
// for i in tmp do
26035: LD_ADDR_VAR 0 1
26039: PUSH
26040: LD_VAR 0 2
26044: PUSH
26045: FOR_IN
26046: IFFALSE 26062
// SetLives ( i , 300 ) ;
26048: LD_VAR 0 1
26052: PPUSH
26053: LD_INT 300
26055: PPUSH
26056: CALL_OW 234
26060: GO 26045
26062: POP
26063: POP
// end ;
26064: PPOPN 2
26066: END
// every 0 0$1 trigger s60 do var i , tmp ;
26067: LD_EXP 90
26071: IFFALSE 26140
26073: GO 26075
26075: DISABLE
26076: LD_INT 0
26078: PPUSH
26079: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26080: LD_ADDR_VAR 0 2
26084: PUSH
26085: LD_INT 22
26087: PUSH
26088: LD_OWVAR 2
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PPUSH
26097: CALL_OW 69
26101: ST_TO_ADDR
// if not tmp then
26102: LD_VAR 0 2
26106: NOT
26107: IFFALSE 26111
// exit ;
26109: GO 26140
// for i in tmp do
26111: LD_ADDR_VAR 0 1
26115: PUSH
26116: LD_VAR 0 2
26120: PUSH
26121: FOR_IN
26122: IFFALSE 26138
// SetLives ( i , 600 ) ;
26124: LD_VAR 0 1
26128: PPUSH
26129: LD_INT 600
26131: PPUSH
26132: CALL_OW 234
26136: GO 26121
26138: POP
26139: POP
// end ;
26140: PPOPN 2
26142: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26143: LD_INT 0
26145: PPUSH
// case cmd of 301 :
26146: LD_VAR 0 1
26150: PUSH
26151: LD_INT 301
26153: DOUBLE
26154: EQUAL
26155: IFTRUE 26159
26157: GO 26191
26159: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
26160: LD_VAR 0 6
26164: PPUSH
26165: LD_VAR 0 7
26169: PPUSH
26170: LD_VAR 0 8
26174: PPUSH
26175: LD_VAR 0 4
26179: PPUSH
26180: LD_VAR 0 5
26184: PPUSH
26185: CALL 27404 0 5
26189: GO 26312
26191: LD_INT 302
26193: DOUBLE
26194: EQUAL
26195: IFTRUE 26199
26197: GO 26236
26199: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
26200: LD_VAR 0 6
26204: PPUSH
26205: LD_VAR 0 7
26209: PPUSH
26210: LD_VAR 0 8
26214: PPUSH
26215: LD_VAR 0 9
26219: PPUSH
26220: LD_VAR 0 4
26224: PPUSH
26225: LD_VAR 0 5
26229: PPUSH
26230: CALL 27495 0 6
26234: GO 26312
26236: LD_INT 303
26238: DOUBLE
26239: EQUAL
26240: IFTRUE 26244
26242: GO 26281
26244: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
26245: LD_VAR 0 6
26249: PPUSH
26250: LD_VAR 0 7
26254: PPUSH
26255: LD_VAR 0 8
26259: PPUSH
26260: LD_VAR 0 9
26264: PPUSH
26265: LD_VAR 0 4
26269: PPUSH
26270: LD_VAR 0 5
26274: PPUSH
26275: CALL 26317 0 6
26279: GO 26312
26281: LD_INT 304
26283: DOUBLE
26284: EQUAL
26285: IFTRUE 26289
26287: GO 26311
26289: POP
// hHackTeleport ( unit , x , y ) ; end ;
26290: LD_VAR 0 2
26294: PPUSH
26295: LD_VAR 0 4
26299: PPUSH
26300: LD_VAR 0 5
26304: PPUSH
26305: CALL 28088 0 3
26309: GO 26312
26311: POP
// end ;
26312: LD_VAR 0 12
26316: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
26317: LD_INT 0
26319: PPUSH
26320: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
26321: LD_VAR 0 1
26325: PUSH
26326: LD_INT 1
26328: LESS
26329: IFTRUE 26341
26331: PUSH
26332: LD_VAR 0 1
26336: PUSH
26337: LD_INT 3
26339: GREATER
26340: OR
26341: IFTRUE 26359
26343: PUSH
26344: LD_VAR 0 5
26348: PPUSH
26349: LD_VAR 0 6
26353: PPUSH
26354: CALL_OW 428
26358: OR
26359: IFFALSE 26363
// exit ;
26361: GO 27091
// uc_side := your_side ;
26363: LD_ADDR_OWVAR 20
26367: PUSH
26368: LD_OWVAR 2
26372: ST_TO_ADDR
// uc_nation := nation ;
26373: LD_ADDR_OWVAR 21
26377: PUSH
26378: LD_VAR 0 1
26382: ST_TO_ADDR
// bc_level = 1 ;
26383: LD_ADDR_OWVAR 43
26387: PUSH
26388: LD_INT 1
26390: ST_TO_ADDR
// case btype of 1 :
26391: LD_VAR 0 2
26395: PUSH
26396: LD_INT 1
26398: DOUBLE
26399: EQUAL
26400: IFTRUE 26404
26402: GO 26415
26404: POP
// bc_type := b_depot ; 2 :
26405: LD_ADDR_OWVAR 42
26409: PUSH
26410: LD_INT 0
26412: ST_TO_ADDR
26413: GO 27035
26415: LD_INT 2
26417: DOUBLE
26418: EQUAL
26419: IFTRUE 26423
26421: GO 26434
26423: POP
// bc_type := b_warehouse ; 3 :
26424: LD_ADDR_OWVAR 42
26428: PUSH
26429: LD_INT 1
26431: ST_TO_ADDR
26432: GO 27035
26434: LD_INT 3
26436: DOUBLE
26437: EQUAL
26438: IFTRUE 26442
26440: GO 26453
26442: POP
// bc_type := b_lab ; 4 .. 9 :
26443: LD_ADDR_OWVAR 42
26447: PUSH
26448: LD_INT 6
26450: ST_TO_ADDR
26451: GO 27035
26453: LD_INT 4
26455: DOUBLE
26456: GREATEREQUAL
26457: IFFALSE 26465
26459: LD_INT 9
26461: DOUBLE
26462: LESSEQUAL
26463: IFTRUE 26467
26465: GO 26527
26467: POP
// begin bc_type := b_lab_half ;
26468: LD_ADDR_OWVAR 42
26472: PUSH
26473: LD_INT 7
26475: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
26476: LD_ADDR_OWVAR 44
26480: PUSH
26481: LD_INT 10
26483: PUSH
26484: LD_INT 11
26486: PUSH
26487: LD_INT 12
26489: PUSH
26490: LD_INT 15
26492: PUSH
26493: LD_INT 14
26495: PUSH
26496: LD_INT 13
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: PUSH
26507: LD_VAR 0 2
26511: PUSH
26512: LD_INT 3
26514: MINUS
26515: ARRAY
26516: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
26517: LD_ADDR_OWVAR 45
26521: PUSH
26522: LD_INT 9
26524: ST_TO_ADDR
// end ; 10 .. 13 :
26525: GO 27035
26527: LD_INT 10
26529: DOUBLE
26530: GREATEREQUAL
26531: IFFALSE 26539
26533: LD_INT 13
26535: DOUBLE
26536: LESSEQUAL
26537: IFTRUE 26541
26539: GO 26618
26541: POP
// begin bc_type := b_lab_full ;
26542: LD_ADDR_OWVAR 42
26546: PUSH
26547: LD_INT 8
26549: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
26550: LD_ADDR_OWVAR 44
26554: PUSH
26555: LD_INT 10
26557: PUSH
26558: LD_INT 12
26560: PUSH
26561: LD_INT 14
26563: PUSH
26564: LD_INT 13
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: PUSH
26573: LD_VAR 0 2
26577: PUSH
26578: LD_INT 9
26580: MINUS
26581: ARRAY
26582: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
26583: LD_ADDR_OWVAR 45
26587: PUSH
26588: LD_INT 11
26590: PUSH
26591: LD_INT 15
26593: PUSH
26594: LD_INT 12
26596: PUSH
26597: LD_INT 15
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: PUSH
26606: LD_VAR 0 2
26610: PUSH
26611: LD_INT 9
26613: MINUS
26614: ARRAY
26615: ST_TO_ADDR
// end ; 14 :
26616: GO 27035
26618: LD_INT 14
26620: DOUBLE
26621: EQUAL
26622: IFTRUE 26626
26624: GO 26637
26626: POP
// bc_type := b_workshop ; 15 :
26627: LD_ADDR_OWVAR 42
26631: PUSH
26632: LD_INT 2
26634: ST_TO_ADDR
26635: GO 27035
26637: LD_INT 15
26639: DOUBLE
26640: EQUAL
26641: IFTRUE 26645
26643: GO 26656
26645: POP
// bc_type := b_factory ; 16 :
26646: LD_ADDR_OWVAR 42
26650: PUSH
26651: LD_INT 3
26653: ST_TO_ADDR
26654: GO 27035
26656: LD_INT 16
26658: DOUBLE
26659: EQUAL
26660: IFTRUE 26664
26662: GO 26675
26664: POP
// bc_type := b_ext_gun ; 17 :
26665: LD_ADDR_OWVAR 42
26669: PUSH
26670: LD_INT 17
26672: ST_TO_ADDR
26673: GO 27035
26675: LD_INT 17
26677: DOUBLE
26678: EQUAL
26679: IFTRUE 26683
26681: GO 26711
26683: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
26684: LD_ADDR_OWVAR 42
26688: PUSH
26689: LD_INT 19
26691: PUSH
26692: LD_INT 23
26694: PUSH
26695: LD_INT 19
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: LIST
26702: PUSH
26703: LD_VAR 0 1
26707: ARRAY
26708: ST_TO_ADDR
26709: GO 27035
26711: LD_INT 18
26713: DOUBLE
26714: EQUAL
26715: IFTRUE 26719
26717: GO 26730
26719: POP
// bc_type := b_ext_radar ; 19 :
26720: LD_ADDR_OWVAR 42
26724: PUSH
26725: LD_INT 20
26727: ST_TO_ADDR
26728: GO 27035
26730: LD_INT 19
26732: DOUBLE
26733: EQUAL
26734: IFTRUE 26738
26736: GO 26749
26738: POP
// bc_type := b_ext_radio ; 20 :
26739: LD_ADDR_OWVAR 42
26743: PUSH
26744: LD_INT 22
26746: ST_TO_ADDR
26747: GO 27035
26749: LD_INT 20
26751: DOUBLE
26752: EQUAL
26753: IFTRUE 26757
26755: GO 26768
26757: POP
// bc_type := b_ext_siberium ; 21 :
26758: LD_ADDR_OWVAR 42
26762: PUSH
26763: LD_INT 21
26765: ST_TO_ADDR
26766: GO 27035
26768: LD_INT 21
26770: DOUBLE
26771: EQUAL
26772: IFTRUE 26776
26774: GO 26787
26776: POP
// bc_type := b_ext_computer ; 22 :
26777: LD_ADDR_OWVAR 42
26781: PUSH
26782: LD_INT 24
26784: ST_TO_ADDR
26785: GO 27035
26787: LD_INT 22
26789: DOUBLE
26790: EQUAL
26791: IFTRUE 26795
26793: GO 26806
26795: POP
// bc_type := b_ext_track ; 23 :
26796: LD_ADDR_OWVAR 42
26800: PUSH
26801: LD_INT 16
26803: ST_TO_ADDR
26804: GO 27035
26806: LD_INT 23
26808: DOUBLE
26809: EQUAL
26810: IFTRUE 26814
26812: GO 26825
26814: POP
// bc_type := b_ext_laser ; 24 :
26815: LD_ADDR_OWVAR 42
26819: PUSH
26820: LD_INT 25
26822: ST_TO_ADDR
26823: GO 27035
26825: LD_INT 24
26827: DOUBLE
26828: EQUAL
26829: IFTRUE 26833
26831: GO 26844
26833: POP
// bc_type := b_control_tower ; 25 :
26834: LD_ADDR_OWVAR 42
26838: PUSH
26839: LD_INT 36
26841: ST_TO_ADDR
26842: GO 27035
26844: LD_INT 25
26846: DOUBLE
26847: EQUAL
26848: IFTRUE 26852
26850: GO 26863
26852: POP
// bc_type := b_breastwork ; 26 :
26853: LD_ADDR_OWVAR 42
26857: PUSH
26858: LD_INT 31
26860: ST_TO_ADDR
26861: GO 27035
26863: LD_INT 26
26865: DOUBLE
26866: EQUAL
26867: IFTRUE 26871
26869: GO 26882
26871: POP
// bc_type := b_bunker ; 27 :
26872: LD_ADDR_OWVAR 42
26876: PUSH
26877: LD_INT 32
26879: ST_TO_ADDR
26880: GO 27035
26882: LD_INT 27
26884: DOUBLE
26885: EQUAL
26886: IFTRUE 26890
26888: GO 26901
26890: POP
// bc_type := b_turret ; 28 :
26891: LD_ADDR_OWVAR 42
26895: PUSH
26896: LD_INT 33
26898: ST_TO_ADDR
26899: GO 27035
26901: LD_INT 28
26903: DOUBLE
26904: EQUAL
26905: IFTRUE 26909
26907: GO 26920
26909: POP
// bc_type := b_armoury ; 29 :
26910: LD_ADDR_OWVAR 42
26914: PUSH
26915: LD_INT 4
26917: ST_TO_ADDR
26918: GO 27035
26920: LD_INT 29
26922: DOUBLE
26923: EQUAL
26924: IFTRUE 26928
26926: GO 26939
26928: POP
// bc_type := b_barracks ; 30 :
26929: LD_ADDR_OWVAR 42
26933: PUSH
26934: LD_INT 5
26936: ST_TO_ADDR
26937: GO 27035
26939: LD_INT 30
26941: DOUBLE
26942: EQUAL
26943: IFTRUE 26947
26945: GO 26958
26947: POP
// bc_type := b_solar_power ; 31 :
26948: LD_ADDR_OWVAR 42
26952: PUSH
26953: LD_INT 27
26955: ST_TO_ADDR
26956: GO 27035
26958: LD_INT 31
26960: DOUBLE
26961: EQUAL
26962: IFTRUE 26966
26964: GO 26977
26966: POP
// bc_type := b_oil_power ; 32 :
26967: LD_ADDR_OWVAR 42
26971: PUSH
26972: LD_INT 26
26974: ST_TO_ADDR
26975: GO 27035
26977: LD_INT 32
26979: DOUBLE
26980: EQUAL
26981: IFTRUE 26985
26983: GO 26996
26985: POP
// bc_type := b_siberite_power ; 33 :
26986: LD_ADDR_OWVAR 42
26990: PUSH
26991: LD_INT 28
26993: ST_TO_ADDR
26994: GO 27035
26996: LD_INT 33
26998: DOUBLE
26999: EQUAL
27000: IFTRUE 27004
27002: GO 27015
27004: POP
// bc_type := b_oil_mine ; 34 :
27005: LD_ADDR_OWVAR 42
27009: PUSH
27010: LD_INT 29
27012: ST_TO_ADDR
27013: GO 27035
27015: LD_INT 34
27017: DOUBLE
27018: EQUAL
27019: IFTRUE 27023
27021: GO 27034
27023: POP
// bc_type := b_siberite_mine ; end ;
27024: LD_ADDR_OWVAR 42
27028: PUSH
27029: LD_INT 30
27031: ST_TO_ADDR
27032: GO 27035
27034: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27035: LD_ADDR_VAR 0 8
27039: PUSH
27040: LD_VAR 0 5
27044: PPUSH
27045: LD_VAR 0 6
27049: PPUSH
27050: LD_VAR 0 3
27054: PPUSH
27055: CALL_OW 47
27059: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27060: LD_OWVAR 42
27064: PUSH
27065: LD_INT 32
27067: PUSH
27068: LD_INT 33
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: IN
27075: IFFALSE 27091
// PlaceWeaponTurret ( b , weapon ) ;
27077: LD_VAR 0 8
27081: PPUSH
27082: LD_VAR 0 4
27086: PPUSH
27087: CALL_OW 431
// end ;
27091: LD_VAR 0 7
27095: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27096: LD_INT 0
27098: PPUSH
27099: PPUSH
27100: PPUSH
27101: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27102: LD_ADDR_VAR 0 4
27106: PUSH
27107: LD_INT 22
27109: PUSH
27110: LD_OWVAR 2
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 2
27121: PUSH
27122: LD_INT 30
27124: PUSH
27125: LD_INT 0
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 30
27134: PUSH
27135: LD_INT 1
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: LIST
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PPUSH
27151: CALL_OW 69
27155: ST_TO_ADDR
// if not tmp then
27156: LD_VAR 0 4
27160: NOT
27161: IFFALSE 27165
// exit ;
27163: GO 27224
// for i in tmp do
27165: LD_ADDR_VAR 0 2
27169: PUSH
27170: LD_VAR 0 4
27174: PUSH
27175: FOR_IN
27176: IFFALSE 27222
// for j = 1 to 3 do
27178: LD_ADDR_VAR 0 3
27182: PUSH
27183: DOUBLE
27184: LD_INT 1
27186: DEC
27187: ST_TO_ADDR
27188: LD_INT 3
27190: PUSH
27191: FOR_TO
27192: IFFALSE 27218
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27194: LD_VAR 0 2
27198: PPUSH
27199: CALL_OW 274
27203: PPUSH
27204: LD_VAR 0 3
27208: PPUSH
27209: LD_INT 99999
27211: PPUSH
27212: CALL_OW 277
27216: GO 27191
27218: POP
27219: POP
27220: GO 27175
27222: POP
27223: POP
// end ;
27224: LD_VAR 0 1
27228: RET
// export function hHackSetLevel10 ; var i , j ; begin
27229: LD_INT 0
27231: PPUSH
27232: PPUSH
27233: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27234: LD_ADDR_VAR 0 2
27238: PUSH
27239: LD_INT 21
27241: PUSH
27242: LD_INT 1
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PPUSH
27249: CALL_OW 69
27253: PUSH
27254: FOR_IN
27255: IFFALSE 27307
// if IsSelected ( i ) then
27257: LD_VAR 0 2
27261: PPUSH
27262: CALL_OW 306
27266: IFFALSE 27305
// begin for j := 1 to 4 do
27268: LD_ADDR_VAR 0 3
27272: PUSH
27273: DOUBLE
27274: LD_INT 1
27276: DEC
27277: ST_TO_ADDR
27278: LD_INT 4
27280: PUSH
27281: FOR_TO
27282: IFFALSE 27303
// SetSkill ( i , j , 10 ) ;
27284: LD_VAR 0 2
27288: PPUSH
27289: LD_VAR 0 3
27293: PPUSH
27294: LD_INT 10
27296: PPUSH
27297: CALL_OW 237
27301: GO 27281
27303: POP
27304: POP
// end ;
27305: GO 27254
27307: POP
27308: POP
// end ;
27309: LD_VAR 0 1
27313: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
27314: LD_INT 0
27316: PPUSH
27317: PPUSH
27318: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
27319: LD_ADDR_VAR 0 2
27323: PUSH
27324: LD_INT 22
27326: PUSH
27327: LD_OWVAR 2
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 21
27338: PUSH
27339: LD_INT 1
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PPUSH
27350: CALL_OW 69
27354: PUSH
27355: FOR_IN
27356: IFFALSE 27397
// begin for j := 1 to 4 do
27358: LD_ADDR_VAR 0 3
27362: PUSH
27363: DOUBLE
27364: LD_INT 1
27366: DEC
27367: ST_TO_ADDR
27368: LD_INT 4
27370: PUSH
27371: FOR_TO
27372: IFFALSE 27393
// SetSkill ( i , j , 10 ) ;
27374: LD_VAR 0 2
27378: PPUSH
27379: LD_VAR 0 3
27383: PPUSH
27384: LD_INT 10
27386: PPUSH
27387: CALL_OW 237
27391: GO 27371
27393: POP
27394: POP
// end ;
27395: GO 27355
27397: POP
27398: POP
// end ;
27399: LD_VAR 0 1
27403: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
27404: LD_INT 0
27406: PPUSH
// uc_side := your_side ;
27407: LD_ADDR_OWVAR 20
27411: PUSH
27412: LD_OWVAR 2
27416: ST_TO_ADDR
// uc_nation := nation ;
27417: LD_ADDR_OWVAR 21
27421: PUSH
27422: LD_VAR 0 1
27426: ST_TO_ADDR
// InitHc ;
27427: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
27431: LD_INT 0
27433: PPUSH
27434: LD_VAR 0 2
27438: PPUSH
27439: LD_VAR 0 3
27443: PPUSH
27444: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
27448: LD_VAR 0 4
27452: PPUSH
27453: LD_VAR 0 5
27457: PPUSH
27458: CALL_OW 428
27462: PUSH
27463: LD_INT 0
27465: EQUAL
27466: IFFALSE 27490
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
27468: CALL_OW 44
27472: PPUSH
27473: LD_VAR 0 4
27477: PPUSH
27478: LD_VAR 0 5
27482: PPUSH
27483: LD_INT 1
27485: PPUSH
27486: CALL_OW 48
// end ;
27490: LD_VAR 0 6
27494: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
27495: LD_INT 0
27497: PPUSH
27498: PPUSH
// uc_side := your_side ;
27499: LD_ADDR_OWVAR 20
27503: PUSH
27504: LD_OWVAR 2
27508: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
27509: LD_VAR 0 1
27513: PUSH
27514: LD_INT 1
27516: PUSH
27517: LD_INT 2
27519: PUSH
27520: LD_INT 3
27522: PUSH
27523: LD_INT 4
27525: PUSH
27526: LD_INT 5
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: IN
27536: IFFALSE 27548
// uc_nation := nation_american else
27538: LD_ADDR_OWVAR 21
27542: PUSH
27543: LD_INT 1
27545: ST_TO_ADDR
27546: GO 27591
// if chassis in [ 11 , 12 , 13 , 14 ] then
27548: LD_VAR 0 1
27552: PUSH
27553: LD_INT 11
27555: PUSH
27556: LD_INT 12
27558: PUSH
27559: LD_INT 13
27561: PUSH
27562: LD_INT 14
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: IN
27571: IFFALSE 27583
// uc_nation := nation_arabian else
27573: LD_ADDR_OWVAR 21
27577: PUSH
27578: LD_INT 2
27580: ST_TO_ADDR
27581: GO 27591
// uc_nation := nation_russian ;
27583: LD_ADDR_OWVAR 21
27587: PUSH
27588: LD_INT 3
27590: ST_TO_ADDR
// vc_chassis := chassis ;
27591: LD_ADDR_OWVAR 37
27595: PUSH
27596: LD_VAR 0 1
27600: ST_TO_ADDR
// vc_engine := engine ;
27601: LD_ADDR_OWVAR 39
27605: PUSH
27606: LD_VAR 0 2
27610: ST_TO_ADDR
// vc_control := control ;
27611: LD_ADDR_OWVAR 38
27615: PUSH
27616: LD_VAR 0 3
27620: ST_TO_ADDR
// vc_weapon := weapon ;
27621: LD_ADDR_OWVAR 40
27625: PUSH
27626: LD_VAR 0 4
27630: ST_TO_ADDR
// un := CreateVehicle ;
27631: LD_ADDR_VAR 0 8
27635: PUSH
27636: CALL_OW 45
27640: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
27641: LD_VAR 0 8
27645: PPUSH
27646: LD_INT 0
27648: PPUSH
27649: LD_INT 5
27651: PPUSH
27652: CALL_OW 12
27656: PPUSH
27657: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
27661: LD_VAR 0 8
27665: PPUSH
27666: LD_VAR 0 5
27670: PPUSH
27671: LD_VAR 0 6
27675: PPUSH
27676: LD_INT 1
27678: PPUSH
27679: CALL_OW 48
// end ;
27683: LD_VAR 0 7
27687: RET
// export hInvincible ; every 1 do
27688: GO 27690
27690: DISABLE
// hInvincible := [ ] ;
27691: LD_ADDR_EXP 91
27695: PUSH
27696: EMPTY
27697: ST_TO_ADDR
27698: END
// every 10 do var i ;
27699: GO 27701
27701: DISABLE
27702: LD_INT 0
27704: PPUSH
// begin enable ;
27705: ENABLE
// if not hInvincible then
27706: LD_EXP 91
27710: NOT
27711: IFFALSE 27715
// exit ;
27713: GO 27759
// for i in hInvincible do
27715: LD_ADDR_VAR 0 1
27719: PUSH
27720: LD_EXP 91
27724: PUSH
27725: FOR_IN
27726: IFFALSE 27757
// if GetLives ( i ) < 1000 then
27728: LD_VAR 0 1
27732: PPUSH
27733: CALL_OW 256
27737: PUSH
27738: LD_INT 1000
27740: LESS
27741: IFFALSE 27755
// SetLives ( i , 1000 ) ;
27743: LD_VAR 0 1
27747: PPUSH
27748: LD_INT 1000
27750: PPUSH
27751: CALL_OW 234
27755: GO 27725
27757: POP
27758: POP
// end ;
27759: PPOPN 1
27761: END
// export function hHackInvincible ; var i ; begin
27762: LD_INT 0
27764: PPUSH
27765: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27766: LD_ADDR_VAR 0 2
27770: PUSH
27771: LD_INT 2
27773: PUSH
27774: LD_INT 21
27776: PUSH
27777: LD_INT 1
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 21
27786: PUSH
27787: LD_INT 2
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: LIST
27798: PPUSH
27799: CALL_OW 69
27803: PUSH
27804: FOR_IN
27805: IFFALSE 27866
// if IsSelected ( i ) then
27807: LD_VAR 0 2
27811: PPUSH
27812: CALL_OW 306
27816: IFFALSE 27864
// begin if i in hInvincible then
27818: LD_VAR 0 2
27822: PUSH
27823: LD_EXP 91
27827: IN
27828: IFFALSE 27848
// hInvincible := hInvincible diff i else
27830: LD_ADDR_EXP 91
27834: PUSH
27835: LD_EXP 91
27839: PUSH
27840: LD_VAR 0 2
27844: DIFF
27845: ST_TO_ADDR
27846: GO 27864
// hInvincible := hInvincible union i ;
27848: LD_ADDR_EXP 91
27852: PUSH
27853: LD_EXP 91
27857: PUSH
27858: LD_VAR 0 2
27862: UNION
27863: ST_TO_ADDR
// end ;
27864: GO 27804
27866: POP
27867: POP
// end ;
27868: LD_VAR 0 1
27872: RET
// export function hHackInvisible ; var i , j ; begin
27873: LD_INT 0
27875: PPUSH
27876: PPUSH
27877: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27878: LD_ADDR_VAR 0 2
27882: PUSH
27883: LD_INT 21
27885: PUSH
27886: LD_INT 1
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PPUSH
27893: CALL_OW 69
27897: PUSH
27898: FOR_IN
27899: IFFALSE 27923
// if IsSelected ( i ) then
27901: LD_VAR 0 2
27905: PPUSH
27906: CALL_OW 306
27910: IFFALSE 27921
// ComForceInvisible ( i ) ;
27912: LD_VAR 0 2
27916: PPUSH
27917: CALL_OW 496
27921: GO 27898
27923: POP
27924: POP
// end ;
27925: LD_VAR 0 1
27929: RET
// export function hHackChangeYourSide ; begin
27930: LD_INT 0
27932: PPUSH
// if your_side = 8 then
27933: LD_OWVAR 2
27937: PUSH
27938: LD_INT 8
27940: EQUAL
27941: IFFALSE 27953
// your_side := 0 else
27943: LD_ADDR_OWVAR 2
27947: PUSH
27948: LD_INT 0
27950: ST_TO_ADDR
27951: GO 27967
// your_side := your_side + 1 ;
27953: LD_ADDR_OWVAR 2
27957: PUSH
27958: LD_OWVAR 2
27962: PUSH
27963: LD_INT 1
27965: PLUS
27966: ST_TO_ADDR
// end ;
27967: LD_VAR 0 1
27971: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27972: LD_INT 0
27974: PPUSH
27975: PPUSH
27976: PPUSH
// for i in all_units do
27977: LD_ADDR_VAR 0 2
27981: PUSH
27982: LD_OWVAR 3
27986: PUSH
27987: FOR_IN
27988: IFFALSE 28066
// if IsSelected ( i ) then
27990: LD_VAR 0 2
27994: PPUSH
27995: CALL_OW 306
27999: IFFALSE 28064
// begin j := GetSide ( i ) ;
28001: LD_ADDR_VAR 0 3
28005: PUSH
28006: LD_VAR 0 2
28010: PPUSH
28011: CALL_OW 255
28015: ST_TO_ADDR
// if j = 8 then
28016: LD_VAR 0 3
28020: PUSH
28021: LD_INT 8
28023: EQUAL
28024: IFFALSE 28036
// j := 0 else
28026: LD_ADDR_VAR 0 3
28030: PUSH
28031: LD_INT 0
28033: ST_TO_ADDR
28034: GO 28050
// j := j + 1 ;
28036: LD_ADDR_VAR 0 3
28040: PUSH
28041: LD_VAR 0 3
28045: PUSH
28046: LD_INT 1
28048: PLUS
28049: ST_TO_ADDR
// SetSide ( i , j ) ;
28050: LD_VAR 0 2
28054: PPUSH
28055: LD_VAR 0 3
28059: PPUSH
28060: CALL_OW 235
// end ;
28064: GO 27987
28066: POP
28067: POP
// end ;
28068: LD_VAR 0 1
28072: RET
// export function hHackFog ; begin
28073: LD_INT 0
28075: PPUSH
// FogOff ( true ) ;
28076: LD_INT 1
28078: PPUSH
28079: CALL_OW 344
// end ;
28083: LD_VAR 0 1
28087: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28088: LD_INT 0
28090: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28091: LD_VAR 0 1
28095: PPUSH
28096: LD_VAR 0 2
28100: PPUSH
28101: LD_VAR 0 3
28105: PPUSH
28106: LD_INT 1
28108: PPUSH
28109: LD_INT 1
28111: PPUSH
28112: CALL_OW 483
// CenterOnXY ( x , y ) ;
28116: LD_VAR 0 2
28120: PPUSH
28121: LD_VAR 0 3
28125: PPUSH
28126: CALL_OW 84
// end ;
28130: LD_VAR 0 4
28134: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
28135: LD_INT 0
28137: PPUSH
28138: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
28139: LD_VAR 0 1
28143: NOT
28144: IFTRUE 28163
28146: PUSH
28147: LD_VAR 0 2
28151: PPUSH
28152: LD_VAR 0 3
28156: PPUSH
28157: CALL_OW 488
28161: NOT
28162: OR
28163: IFTRUE 28198
28165: PUSH
28166: LD_VAR 0 1
28170: PPUSH
28171: CALL_OW 266
28175: PUSH
28176: LD_INT 3
28178: NONEQUAL
28179: IFFALSE 28197
28181: PUSH
28182: LD_VAR 0 1
28186: PPUSH
28187: CALL_OW 247
28191: PUSH
28192: LD_INT 1
28194: EQUAL
28195: NOT
28196: AND
28197: OR
28198: IFFALSE 28202
// exit ;
28200: GO 28484
// if GetType ( factory ) = unit_human then
28202: LD_VAR 0 1
28206: PPUSH
28207: CALL_OW 247
28211: PUSH
28212: LD_INT 1
28214: EQUAL
28215: IFFALSE 28232
// factory := IsInUnit ( factory ) ;
28217: LD_ADDR_VAR 0 1
28221: PUSH
28222: LD_VAR 0 1
28226: PPUSH
28227: CALL_OW 310
28231: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
28232: LD_VAR 0 1
28236: PPUSH
28237: CALL_OW 266
28241: PUSH
28242: LD_INT 3
28244: NONEQUAL
28245: IFFALSE 28249
// exit ;
28247: GO 28484
// for i := 1 to Count ( factoryWaypoints ) do
28249: LD_ADDR_VAR 0 5
28253: PUSH
28254: DOUBLE
28255: LD_INT 1
28257: DEC
28258: ST_TO_ADDR
28259: LD_EXP 92
28263: PPUSH
28264: CALL 37216 0 1
28268: PUSH
28269: FOR_TO
28270: IFFALSE 28432
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
28272: LD_VAR 0 2
28276: PPUSH
28277: LD_VAR 0 3
28281: PPUSH
28282: CALL_OW 428
28286: PUSH
28287: LD_EXP 92
28291: PUSH
28292: LD_VAR 0 5
28296: ARRAY
28297: PUSH
28298: LD_INT 2
28300: ARRAY
28301: EQUAL
28302: IFFALSE 28334
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
28304: LD_ADDR_EXP 92
28308: PUSH
28309: LD_EXP 92
28313: PPUSH
28314: LD_VAR 0 5
28318: PPUSH
28319: CALL_OW 3
28323: ST_TO_ADDR
// UpdateFactoryWaypoints ;
28324: CALL 28489 0 0
// exit ;
28328: POP
28329: POP
28330: GO 28484
// end else
28332: GO 28430
// if factory = factoryWaypoints [ i ] [ 2 ] then
28334: LD_VAR 0 1
28338: PUSH
28339: LD_EXP 92
28343: PUSH
28344: LD_VAR 0 5
28348: ARRAY
28349: PUSH
28350: LD_INT 2
28352: ARRAY
28353: EQUAL
28354: IFFALSE 28430
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
28356: LD_ADDR_EXP 92
28360: PUSH
28361: LD_EXP 92
28365: PPUSH
28366: LD_VAR 0 5
28370: PPUSH
28371: CALL_OW 3
28375: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
28376: LD_ADDR_EXP 92
28380: PUSH
28381: LD_EXP 92
28385: PPUSH
28386: LD_VAR 0 1
28390: PPUSH
28391: CALL_OW 255
28395: PUSH
28396: LD_VAR 0 1
28400: PUSH
28401: LD_VAR 0 2
28405: PUSH
28406: LD_VAR 0 3
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: PPUSH
28417: CALL 73148 0 2
28421: ST_TO_ADDR
// UpdateFactoryWaypoints ;
28422: CALL 28489 0 0
// exit ;
28426: POP
28427: POP
28428: GO 28484
// end ; end ;
28430: GO 28269
28432: POP
28433: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
28434: LD_ADDR_EXP 92
28438: PUSH
28439: LD_EXP 92
28443: PPUSH
28444: LD_VAR 0 1
28448: PPUSH
28449: CALL_OW 255
28453: PUSH
28454: LD_VAR 0 1
28458: PUSH
28459: LD_VAR 0 2
28463: PUSH
28464: LD_VAR 0 3
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: PPUSH
28475: CALL 73148 0 2
28479: ST_TO_ADDR
// UpdateFactoryWaypoints ;
28480: CALL 28489 0 0
// end ;
28484: LD_VAR 0 4
28488: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
28489: LD_INT 0
28491: PPUSH
28492: PPUSH
28493: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
28494: LD_STRING resetFactoryWaypoint();
28496: PPUSH
28497: CALL_OW 559
// if factoryWaypoints then
28501: LD_EXP 92
28505: IFFALSE 28626
// begin list := factoryWaypoints ;
28507: LD_ADDR_VAR 0 3
28511: PUSH
28512: LD_EXP 92
28516: ST_TO_ADDR
// for i := 1 to list do
28517: LD_ADDR_VAR 0 2
28521: PUSH
28522: DOUBLE
28523: LD_INT 1
28525: DEC
28526: ST_TO_ADDR
28527: LD_VAR 0 3
28531: PUSH
28532: FOR_TO
28533: IFFALSE 28624
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
28535: LD_STRING setFactoryWaypointXY(
28537: PUSH
28538: LD_VAR 0 3
28542: PUSH
28543: LD_VAR 0 2
28547: ARRAY
28548: PUSH
28549: LD_INT 1
28551: ARRAY
28552: STR
28553: PUSH
28554: LD_STRING ,
28556: STR
28557: PUSH
28558: LD_VAR 0 3
28562: PUSH
28563: LD_VAR 0 2
28567: ARRAY
28568: PUSH
28569: LD_INT 2
28571: ARRAY
28572: STR
28573: PUSH
28574: LD_STRING ,
28576: STR
28577: PUSH
28578: LD_VAR 0 3
28582: PUSH
28583: LD_VAR 0 2
28587: ARRAY
28588: PUSH
28589: LD_INT 3
28591: ARRAY
28592: STR
28593: PUSH
28594: LD_STRING ,
28596: STR
28597: PUSH
28598: LD_VAR 0 3
28602: PUSH
28603: LD_VAR 0 2
28607: ARRAY
28608: PUSH
28609: LD_INT 4
28611: ARRAY
28612: STR
28613: PUSH
28614: LD_STRING )
28616: STR
28617: PPUSH
28618: CALL_OW 559
28622: GO 28532
28624: POP
28625: POP
// end ; end ;
28626: LD_VAR 0 1
28630: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
28631: LD_INT 0
28633: PPUSH
// if HexInfo ( x , y ) = warehouse then
28634: LD_VAR 0 2
28638: PPUSH
28639: LD_VAR 0 3
28643: PPUSH
28644: CALL_OW 428
28648: PUSH
28649: LD_VAR 0 1
28653: EQUAL
28654: IFFALSE 28681
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
28656: LD_ADDR_EXP 94
28660: PUSH
28661: LD_EXP 94
28665: PPUSH
28666: LD_VAR 0 1
28670: PPUSH
28671: LD_INT 0
28673: PPUSH
28674: CALL_OW 1
28678: ST_TO_ADDR
28679: GO 28732
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
28681: LD_ADDR_EXP 94
28685: PUSH
28686: LD_EXP 94
28690: PPUSH
28691: LD_VAR 0 1
28695: PPUSH
28696: LD_VAR 0 1
28700: PPUSH
28701: CALL_OW 255
28705: PUSH
28706: LD_VAR 0 1
28710: PUSH
28711: LD_VAR 0 2
28715: PUSH
28716: LD_VAR 0 3
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: PPUSH
28727: CALL_OW 1
28731: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
28732: CALL 28741 0 0
// end ;
28736: LD_VAR 0 4
28740: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
28741: LD_INT 0
28743: PPUSH
28744: PPUSH
28745: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
28746: LD_STRING resetWarehouseGatheringPoints();
28748: PPUSH
28749: CALL_OW 559
// if warehouseGatheringPoints then
28753: LD_EXP 94
28757: IFFALSE 28883
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
28759: LD_ADDR_VAR 0 3
28763: PUSH
28764: LD_EXP 94
28768: PPUSH
28769: CALL 77082 0 1
28773: ST_TO_ADDR
// for i := 1 to list do
28774: LD_ADDR_VAR 0 2
28778: PUSH
28779: DOUBLE
28780: LD_INT 1
28782: DEC
28783: ST_TO_ADDR
28784: LD_VAR 0 3
28788: PUSH
28789: FOR_TO
28790: IFFALSE 28881
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
28792: LD_STRING setWarehouseGatheringPointXY(
28794: PUSH
28795: LD_VAR 0 3
28799: PUSH
28800: LD_VAR 0 2
28804: ARRAY
28805: PUSH
28806: LD_INT 1
28808: ARRAY
28809: STR
28810: PUSH
28811: LD_STRING ,
28813: STR
28814: PUSH
28815: LD_VAR 0 3
28819: PUSH
28820: LD_VAR 0 2
28824: ARRAY
28825: PUSH
28826: LD_INT 2
28828: ARRAY
28829: STR
28830: PUSH
28831: LD_STRING ,
28833: STR
28834: PUSH
28835: LD_VAR 0 3
28839: PUSH
28840: LD_VAR 0 2
28844: ARRAY
28845: PUSH
28846: LD_INT 3
28848: ARRAY
28849: STR
28850: PUSH
28851: LD_STRING ,
28853: STR
28854: PUSH
28855: LD_VAR 0 3
28859: PUSH
28860: LD_VAR 0 2
28864: ARRAY
28865: PUSH
28866: LD_INT 4
28868: ARRAY
28869: STR
28870: PUSH
28871: LD_STRING )
28873: STR
28874: PPUSH
28875: CALL_OW 559
28879: GO 28789
28881: POP
28882: POP
// end ; end ;
28883: LD_VAR 0 1
28887: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
28888: LD_EXP 94
28892: IFFALSE 29587
28894: GO 28896
28896: DISABLE
28897: LD_INT 0
28899: PPUSH
28900: PPUSH
28901: PPUSH
28902: PPUSH
28903: PPUSH
28904: PPUSH
28905: PPUSH
28906: PPUSH
28907: PPUSH
// begin enable ;
28908: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
28909: LD_ADDR_VAR 0 3
28913: PUSH
28914: LD_EXP 94
28918: PPUSH
28919: CALL 77082 0 1
28923: ST_TO_ADDR
// if not list then
28924: LD_VAR 0 3
28928: NOT
28929: IFFALSE 28933
// exit ;
28931: GO 29587
// for i := 1 to list do
28933: LD_ADDR_VAR 0 1
28937: PUSH
28938: DOUBLE
28939: LD_INT 1
28941: DEC
28942: ST_TO_ADDR
28943: LD_VAR 0 3
28947: PUSH
28948: FOR_TO
28949: IFFALSE 29585
// begin depot := list [ i ] [ 2 ] ;
28951: LD_ADDR_VAR 0 8
28955: PUSH
28956: LD_VAR 0 3
28960: PUSH
28961: LD_VAR 0 1
28965: ARRAY
28966: PUSH
28967: LD_INT 2
28969: ARRAY
28970: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
28971: LD_ADDR_VAR 0 5
28975: PUSH
28976: LD_VAR 0 3
28980: PUSH
28981: LD_VAR 0 1
28985: ARRAY
28986: PUSH
28987: LD_INT 1
28989: ARRAY
28990: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
28991: LD_VAR 0 8
28995: PPUSH
28996: CALL_OW 301
29000: IFTRUE 29019
29002: PUSH
29003: LD_VAR 0 5
29007: PUSH
29008: LD_VAR 0 8
29012: PPUSH
29013: CALL_OW 255
29017: NONEQUAL
29018: OR
29019: IFFALSE 29048
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
29021: LD_ADDR_EXP 94
29025: PUSH
29026: LD_EXP 94
29030: PPUSH
29031: LD_VAR 0 8
29035: PPUSH
29036: LD_INT 0
29038: PPUSH
29039: CALL_OW 1
29043: ST_TO_ADDR
// exit ;
29044: POP
29045: POP
29046: GO 29587
// end ; x := list [ i ] [ 3 ] ;
29048: LD_ADDR_VAR 0 6
29052: PUSH
29053: LD_VAR 0 3
29057: PUSH
29058: LD_VAR 0 1
29062: ARRAY
29063: PUSH
29064: LD_INT 3
29066: ARRAY
29067: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
29068: LD_ADDR_VAR 0 7
29072: PUSH
29073: LD_VAR 0 3
29077: PUSH
29078: LD_VAR 0 1
29082: ARRAY
29083: PUSH
29084: LD_INT 4
29086: ARRAY
29087: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
29088: LD_ADDR_VAR 0 9
29092: PUSH
29093: LD_VAR 0 6
29097: PPUSH
29098: LD_VAR 0 7
29102: PPUSH
29103: LD_INT 16
29105: PPUSH
29106: CALL 75656 0 3
29110: ST_TO_ADDR
// if not cratesNearbyPoint then
29111: LD_VAR 0 9
29115: NOT
29116: IFFALSE 29122
// exit ;
29118: POP
29119: POP
29120: GO 29587
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
29122: LD_ADDR_VAR 0 4
29126: PUSH
29127: LD_INT 22
29129: PUSH
29130: LD_VAR 0 5
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 3
29141: PUSH
29142: LD_INT 60
29144: PUSH
29145: EMPTY
29146: LIST
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 91
29154: PUSH
29155: LD_VAR 0 8
29159: PUSH
29160: LD_INT 6
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: LIST
29167: PUSH
29168: LD_INT 2
29170: PUSH
29171: LD_INT 25
29173: PUSH
29174: LD_INT 2
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 25
29183: PUSH
29184: LD_INT 16
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: LIST
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: PPUSH
29202: CALL_OW 69
29206: PUSH
29207: LD_VAR 0 8
29211: PPUSH
29212: CALL_OW 313
29216: PPUSH
29217: LD_INT 3
29219: PUSH
29220: LD_INT 60
29222: PUSH
29223: EMPTY
29224: LIST
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 2
29232: PUSH
29233: LD_INT 25
29235: PUSH
29236: LD_INT 2
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 25
29245: PUSH
29246: LD_INT 16
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: LIST
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PPUSH
29262: CALL_OW 72
29266: UNION
29267: ST_TO_ADDR
// if tmp then
29268: LD_VAR 0 4
29272: IFFALSE 29352
// begin tmp := ShrinkArray ( tmp , 3 ) ;
29274: LD_ADDR_VAR 0 4
29278: PUSH
29279: LD_VAR 0 4
29283: PPUSH
29284: LD_INT 3
29286: PPUSH
29287: CALL 73463 0 2
29291: ST_TO_ADDR
// for j in tmp do
29292: LD_ADDR_VAR 0 2
29296: PUSH
29297: LD_VAR 0 4
29301: PUSH
29302: FOR_IN
29303: IFFALSE 29346
// begin if IsInUnit ( j ) then
29305: LD_VAR 0 2
29309: PPUSH
29310: CALL_OW 310
29314: IFFALSE 29325
// ComExit ( j ) ;
29316: LD_VAR 0 2
29320: PPUSH
29321: CALL 73546 0 1
// AddComCollect ( j , x , y ) ;
29325: LD_VAR 0 2
29329: PPUSH
29330: LD_VAR 0 6
29334: PPUSH
29335: LD_VAR 0 7
29339: PPUSH
29340: CALL_OW 177
// end ;
29344: GO 29302
29346: POP
29347: POP
// exit ;
29348: POP
29349: POP
29350: GO 29587
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
29352: LD_ADDR_VAR 0 4
29356: PUSH
29357: LD_INT 22
29359: PUSH
29360: LD_VAR 0 5
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 91
29371: PUSH
29372: LD_VAR 0 8
29376: PUSH
29377: LD_INT 8
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 2
29387: PUSH
29388: LD_INT 34
29390: PUSH
29391: LD_INT 12
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: LD_INT 34
29400: PUSH
29401: LD_INT 51
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 34
29410: PUSH
29411: LD_INT 32
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 34
29420: PUSH
29421: LD_INT 89
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: LIST
29439: PPUSH
29440: CALL_OW 69
29444: ST_TO_ADDR
// if tmp then
29445: LD_VAR 0 4
29449: IFFALSE 29583
// begin for j in tmp do
29451: LD_ADDR_VAR 0 2
29455: PUSH
29456: LD_VAR 0 4
29460: PUSH
29461: FOR_IN
29462: IFFALSE 29581
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
29464: LD_VAR 0 2
29468: PPUSH
29469: CALL_OW 262
29473: PUSH
29474: LD_INT 3
29476: EQUAL
29477: IFTRUE 29494
29479: PUSH
29480: LD_VAR 0 2
29484: PPUSH
29485: CALL_OW 261
29489: PUSH
29490: LD_INT 20
29492: GREATER
29493: OR
29494: IFFALSE 29508
29496: PUSH
29497: LD_VAR 0 2
29501: PPUSH
29502: CALL_OW 314
29506: NOT
29507: AND
29508: IFFALSE 29538
29510: PUSH
29511: LD_VAR 0 2
29515: PPUSH
29516: CALL_OW 263
29520: PUSH
29521: LD_INT 1
29523: NONEQUAL
29524: IFTRUE 29537
29526: PUSH
29527: LD_VAR 0 2
29531: PPUSH
29532: CALL_OW 311
29536: OR
29537: AND
29538: IFFALSE 29579
// begin ComCollect ( j , x , y ) ;
29540: LD_VAR 0 2
29544: PPUSH
29545: LD_VAR 0 6
29549: PPUSH
29550: LD_VAR 0 7
29554: PPUSH
29555: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
29559: LD_VAR 0 2
29563: PPUSH
29564: LD_VAR 0 8
29568: PPUSH
29569: CALL_OW 172
// exit ;
29573: POP
29574: POP
29575: POP
29576: POP
29577: GO 29587
// end ;
29579: GO 29461
29581: POP
29582: POP
// end ; end ;
29583: GO 28948
29585: POP
29586: POP
// end ; end_of_file
29587: PPOPN 9
29589: END
// export function SOS_UnitDestroyed ( un ) ; begin
29590: LD_INT 0
29592: PPUSH
// ComRadiation ( un ) ;
29593: LD_VAR 0 1
29597: PPUSH
29598: CALL 30679 0 1
// end ;
29602: LD_VAR 0 2
29606: RET
// export function SOS_UnitKamikazed ( un ) ; begin
29607: LD_INT 0
29609: PPUSH
// ComRadiation ( un ) ;
29610: LD_VAR 0 1
29614: PPUSH
29615: CALL 30679 0 1
// end ;
29619: LD_VAR 0 2
29623: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
29624: LD_INT 0
29626: PPUSH
// end ;
29627: LD_VAR 0 4
29631: RET
// export function SOS_Command ( cmd ) ; begin
29632: LD_INT 0
29634: PPUSH
// end ;
29635: LD_VAR 0 2
29639: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
29640: LD_INT 0
29642: PPUSH
// end ;
29643: LD_VAR 0 6
29647: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
29648: LD_INT 0
29650: PPUSH
29651: PPUSH
29652: PPUSH
29653: PPUSH
// if not vehicle or not factory then
29654: LD_VAR 0 1
29658: NOT
29659: IFTRUE 29668
29661: PUSH
29662: LD_VAR 0 2
29666: NOT
29667: OR
29668: IFFALSE 29672
// exit ;
29670: GO 30254
// if not factoryWaypoints then
29672: LD_EXP 92
29676: NOT
29677: IFFALSE 29681
// exit ;
29679: GO 30254
// for i := 1 to Count ( factoryWaypoints ) do
29681: LD_ADDR_VAR 0 4
29685: PUSH
29686: DOUBLE
29687: LD_INT 1
29689: DEC
29690: ST_TO_ADDR
29691: LD_EXP 92
29695: PPUSH
29696: CALL 37216 0 1
29700: PUSH
29701: FOR_TO
29702: IFFALSE 30252
// if factoryWaypoints [ i ] [ 2 ] = factory then
29704: LD_EXP 92
29708: PUSH
29709: LD_VAR 0 4
29713: ARRAY
29714: PUSH
29715: LD_INT 2
29717: ARRAY
29718: PUSH
29719: LD_VAR 0 2
29723: EQUAL
29724: IFFALSE 30250
// begin if GetControl ( vehicle ) = control_manual then
29726: LD_VAR 0 1
29730: PPUSH
29731: CALL_OW 263
29735: PUSH
29736: LD_INT 1
29738: EQUAL
29739: IFFALSE 30103
// begin driver := IsDrivenBy ( vehicle ) ;
29741: LD_ADDR_VAR 0 5
29745: PUSH
29746: LD_VAR 0 1
29750: PPUSH
29751: CALL_OW 311
29755: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
29756: LD_VAR 0 5
29760: PUSH
29761: LD_EXP 93
29765: IN
29766: IFTRUE 29780
29768: PUSH
29769: LD_VAR 0 1
29773: PUSH
29774: LD_EXP 93
29778: IN
29779: OR
29780: IFFALSE 29786
// exit ;
29782: POP
29783: POP
29784: GO 30254
// if not HasTask ( driver ) then
29786: LD_VAR 0 5
29790: PPUSH
29791: CALL_OW 314
29795: NOT
29796: IFFALSE 30101
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
29798: LD_ADDR_EXP 93
29802: PUSH
29803: LD_EXP 93
29807: PPUSH
29808: LD_VAR 0 5
29812: PPUSH
29813: CALL 73148 0 2
29817: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
29818: LD_ADDR_EXP 93
29822: PUSH
29823: LD_EXP 93
29827: PPUSH
29828: LD_VAR 0 1
29832: PPUSH
29833: CALL 73148 0 2
29837: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
29838: LD_ADDR_VAR 0 6
29842: PUSH
29843: LD_EXP 92
29847: PUSH
29848: LD_VAR 0 4
29852: ARRAY
29853: PUSH
29854: LD_INT 3
29856: ARRAY
29857: PPUSH
29858: LD_EXP 92
29862: PUSH
29863: LD_VAR 0 4
29867: ARRAY
29868: PUSH
29869: LD_INT 4
29871: ARRAY
29872: PPUSH
29873: CALL_OW 428
29877: ST_TO_ADDR
// if hex then
29878: LD_VAR 0 6
29882: IFFALSE 29900
// ComMoveUnit ( driver , hex ) else
29884: LD_VAR 0 5
29888: PPUSH
29889: LD_VAR 0 6
29893: PPUSH
29894: CALL_OW 112
29898: GO 29984
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
29900: LD_VAR 0 1
29904: PPUSH
29905: LD_EXP 92
29909: PUSH
29910: LD_VAR 0 4
29914: ARRAY
29915: PUSH
29916: LD_INT 3
29918: ARRAY
29919: PPUSH
29920: LD_EXP 92
29924: PUSH
29925: LD_VAR 0 4
29929: ARRAY
29930: PUSH
29931: LD_INT 4
29933: ARRAY
29934: PPUSH
29935: CALL_OW 297
29939: PUSH
29940: LD_INT 0
29942: GREATER
29943: IFFALSE 29984
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
29945: LD_VAR 0 5
29949: PPUSH
29950: LD_EXP 92
29954: PUSH
29955: LD_VAR 0 4
29959: ARRAY
29960: PUSH
29961: LD_INT 3
29963: ARRAY
29964: PPUSH
29965: LD_EXP 92
29969: PUSH
29970: LD_VAR 0 4
29974: ARRAY
29975: PUSH
29976: LD_INT 4
29978: ARRAY
29979: PPUSH
29980: CALL_OW 111
// AddComExitVehicle ( driver ) ;
29984: LD_VAR 0 5
29988: PPUSH
29989: CALL_OW 181
// if Multiplayer then
29993: LD_OWVAR 4
29997: IFFALSE 30046
// begin repeat wait ( 10 ) ;
29999: LD_INT 10
30001: PPUSH
30002: CALL_OW 67
// until not IsInUnit ( driver ) ;
30006: LD_VAR 0 5
30010: PPUSH
30011: CALL_OW 310
30015: NOT
30016: IFFALSE 29999
// if not HasTask ( driver ) then
30018: LD_VAR 0 5
30022: PPUSH
30023: CALL_OW 314
30027: NOT
30028: IFFALSE 30044
// ComEnterUnit ( driver , factory ) ;
30030: LD_VAR 0 5
30034: PPUSH
30035: LD_VAR 0 2
30039: PPUSH
30040: CALL_OW 120
// end else
30044: GO 30060
// AddComEnterUnit ( driver , factory ) ;
30046: LD_VAR 0 5
30050: PPUSH
30051: LD_VAR 0 2
30055: PPUSH
30056: CALL_OW 180
// wait ( 0 0$1 ) ;
30060: LD_INT 35
30062: PPUSH
30063: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
30067: LD_ADDR_EXP 93
30071: PUSH
30072: LD_EXP 93
30076: PUSH
30077: LD_VAR 0 5
30081: DIFF
30082: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
30083: LD_ADDR_EXP 93
30087: PUSH
30088: LD_EXP 93
30092: PUSH
30093: LD_VAR 0 1
30097: DIFF
30098: ST_TO_ADDR
// break ;
30099: GO 30252
// end ; end else
30101: GO 30250
// if GetControl ( vehicle ) = control_remote then
30103: LD_VAR 0 1
30107: PPUSH
30108: CALL_OW 263
30112: PUSH
30113: LD_INT 2
30115: EQUAL
30116: IFFALSE 30202
// begin wait ( 0 0$2 ) ;
30118: LD_INT 70
30120: PPUSH
30121: CALL_OW 67
// repeat wait ( 10 ) ;
30125: LD_INT 10
30127: PPUSH
30128: CALL_OW 67
// Connect ( vehicle ) ;
30132: LD_VAR 0 1
30136: PPUSH
30137: CALL 43460 0 1
// until IsControledBy ( vehicle ) ;
30141: LD_VAR 0 1
30145: PPUSH
30146: CALL_OW 312
30150: IFFALSE 30125
// wait ( 10 ) ;
30152: LD_INT 10
30154: PPUSH
30155: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
30159: LD_VAR 0 1
30163: PPUSH
30164: LD_EXP 92
30168: PUSH
30169: LD_VAR 0 4
30173: ARRAY
30174: PUSH
30175: LD_INT 3
30177: ARRAY
30178: PPUSH
30179: LD_EXP 92
30183: PUSH
30184: LD_VAR 0 4
30188: ARRAY
30189: PUSH
30190: LD_INT 4
30192: ARRAY
30193: PPUSH
30194: CALL_OW 111
// break ;
30198: GO 30252
// end else
30200: GO 30250
// begin wait ( 0 0$3 ) ;
30202: LD_INT 105
30204: PPUSH
30205: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
30209: LD_VAR 0 1
30213: PPUSH
30214: LD_EXP 92
30218: PUSH
30219: LD_VAR 0 4
30223: ARRAY
30224: PUSH
30225: LD_INT 3
30227: ARRAY
30228: PPUSH
30229: LD_EXP 92
30233: PUSH
30234: LD_VAR 0 4
30238: ARRAY
30239: PUSH
30240: LD_INT 4
30242: ARRAY
30243: PPUSH
30244: CALL_OW 111
// break ;
30248: GO 30252
// end ; end ;
30250: GO 29701
30252: POP
30253: POP
// end ;
30254: LD_VAR 0 3
30258: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
30259: LD_INT 0
30261: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
30262: LD_VAR 0 1
30266: PUSH
30267: LD_INT 250
30269: EQUAL
30270: IFFALSE 30287
30272: PUSH
30273: LD_VAR 0 2
30277: PPUSH
30278: CALL_OW 264
30282: PUSH
30283: LD_INT 81
30285: EQUAL
30286: AND
30287: IFFALSE 30308
// MinerPlaceMine ( unit , x , y ) ;
30289: LD_VAR 0 2
30293: PPUSH
30294: LD_VAR 0 4
30298: PPUSH
30299: LD_VAR 0 5
30303: PPUSH
30304: CALL 33440 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
30308: LD_VAR 0 1
30312: PUSH
30313: LD_INT 251
30315: EQUAL
30316: IFFALSE 30333
30318: PUSH
30319: LD_VAR 0 2
30323: PPUSH
30324: CALL_OW 264
30328: PUSH
30329: LD_INT 81
30331: EQUAL
30332: AND
30333: IFFALSE 30354
// MinerDetonateMine ( unit , x , y ) ;
30335: LD_VAR 0 2
30339: PPUSH
30340: LD_VAR 0 4
30344: PPUSH
30345: LD_VAR 0 5
30349: PPUSH
30350: CALL 33719 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
30354: LD_VAR 0 1
30358: PUSH
30359: LD_INT 252
30361: EQUAL
30362: IFFALSE 30379
30364: PUSH
30365: LD_VAR 0 2
30369: PPUSH
30370: CALL_OW 264
30374: PUSH
30375: LD_INT 81
30377: EQUAL
30378: AND
30379: IFFALSE 30400
// MinerCreateMinefield ( unit , x , y ) ;
30381: LD_VAR 0 2
30385: PPUSH
30386: LD_VAR 0 4
30390: PPUSH
30391: LD_VAR 0 5
30395: PPUSH
30396: CALL 34138 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
30400: LD_VAR 0 1
30404: PUSH
30405: LD_INT 253
30407: EQUAL
30408: IFFALSE 30425
30410: PUSH
30411: LD_VAR 0 2
30415: PPUSH
30416: CALL_OW 257
30420: PUSH
30421: LD_INT 5
30423: EQUAL
30424: AND
30425: IFFALSE 30446
// ComBinocular ( unit , x , y ) ;
30427: LD_VAR 0 2
30431: PPUSH
30432: LD_VAR 0 4
30436: PPUSH
30437: LD_VAR 0 5
30441: PPUSH
30442: CALL 34513 0 3
// if selectedUnit then
30446: LD_VAR 0 3
30450: IFFALSE 30510
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
30452: LD_VAR 0 1
30456: PUSH
30457: LD_INT 254
30459: EQUAL
30460: IFFALSE 30477
30462: PUSH
30463: LD_VAR 0 2
30467: PPUSH
30468: CALL_OW 264
30472: PUSH
30473: LD_INT 99
30475: EQUAL
30476: AND
30477: IFFALSE 30494
30479: PUSH
30480: LD_VAR 0 3
30484: PPUSH
30485: CALL_OW 263
30489: PUSH
30490: LD_INT 3
30492: EQUAL
30493: AND
30494: IFFALSE 30510
// HackDestroyVehicle ( unit , selectedUnit ) ;
30496: LD_VAR 0 2
30500: PPUSH
30501: LD_VAR 0 3
30505: PPUSH
30506: CALL 32800 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
30510: LD_VAR 0 1
30514: PUSH
30515: LD_INT 255
30517: EQUAL
30518: IFFALSE 30542
30520: PUSH
30521: LD_VAR 0 2
30525: PPUSH
30526: CALL_OW 264
30530: PUSH
30531: LD_INT 14
30533: PUSH
30534: LD_INT 53
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: IN
30541: AND
30542: IFFALSE 30560
30544: PUSH
30545: LD_VAR 0 4
30549: PPUSH
30550: LD_VAR 0 5
30554: PPUSH
30555: CALL_OW 488
30559: AND
30560: IFFALSE 30584
// CutTreeXYR ( unit , x , y , 12 ) ;
30562: LD_VAR 0 2
30566: PPUSH
30567: LD_VAR 0 4
30571: PPUSH
30572: LD_VAR 0 5
30576: PPUSH
30577: LD_INT 12
30579: PPUSH
30580: CALL 30775 0 4
// if cmd = 256 then
30584: LD_VAR 0 1
30588: PUSH
30589: LD_INT 256
30591: EQUAL
30592: IFFALSE 30613
// SetFactoryWaypoint ( unit , x , y ) ;
30594: LD_VAR 0 2
30598: PPUSH
30599: LD_VAR 0 4
30603: PPUSH
30604: LD_VAR 0 5
30608: PPUSH
30609: CALL 28135 0 3
// if cmd = 257 then
30613: LD_VAR 0 1
30617: PUSH
30618: LD_INT 257
30620: EQUAL
30621: IFFALSE 30642
// SetWarehouseGatheringPoint ( unit , x , y ) ;
30623: LD_VAR 0 2
30627: PPUSH
30628: LD_VAR 0 4
30632: PPUSH
30633: LD_VAR 0 5
30637: PPUSH
30638: CALL 28631 0 3
// if cmd = 258 then
30642: LD_VAR 0 1
30646: PUSH
30647: LD_INT 258
30649: EQUAL
30650: IFFALSE 30674
// BurnTreeXYR ( unit , x , y , 8 ) ;
30652: LD_VAR 0 2
30656: PPUSH
30657: LD_VAR 0 4
30661: PPUSH
30662: LD_VAR 0 5
30666: PPUSH
30667: LD_INT 8
30669: PPUSH
30670: CALL 31175 0 4
// end ;
30674: LD_VAR 0 6
30678: RET
// export function ComRadiation ( un ) ; var eff ; begin
30679: LD_INT 0
30681: PPUSH
30682: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
30683: LD_VAR 0 1
30687: PPUSH
30688: CALL_OW 264
30692: PUSH
30693: LD_INT 91
30695: NONEQUAL
30696: IFFALSE 30700
// exit ;
30698: GO 30770
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
30700: LD_INT 68
30702: PPUSH
30703: LD_VAR 0 1
30707: PPUSH
30708: CALL_OW 255
30712: PPUSH
30713: CALL_OW 321
30717: PUSH
30718: LD_INT 2
30720: EQUAL
30721: IFFALSE 30733
// eff := 50 else
30723: LD_ADDR_VAR 0 3
30727: PUSH
30728: LD_INT 50
30730: ST_TO_ADDR
30731: GO 30741
// eff := 25 ;
30733: LD_ADDR_VAR 0 3
30737: PUSH
30738: LD_INT 25
30740: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
30741: LD_VAR 0 1
30745: PPUSH
30746: CALL_OW 250
30750: PPUSH
30751: LD_VAR 0 1
30755: PPUSH
30756: CALL_OW 251
30760: PPUSH
30761: LD_VAR 0 3
30765: PPUSH
30766: CALL_OW 495
// end ;
30770: LD_VAR 0 2
30774: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
30775: LD_INT 0
30777: PPUSH
30778: PPUSH
30779: PPUSH
30780: PPUSH
30781: PPUSH
30782: PPUSH
30783: PPUSH
30784: PPUSH
30785: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
30786: LD_VAR 0 1
30790: PPUSH
30791: CALL_OW 302
30795: NOT
30796: IFTRUE 30815
30798: PUSH
30799: LD_VAR 0 2
30803: PPUSH
30804: LD_VAR 0 3
30808: PPUSH
30809: CALL_OW 488
30813: NOT
30814: OR
30815: IFTRUE 30824
30817: PUSH
30818: LD_VAR 0 4
30822: NOT
30823: OR
30824: IFFALSE 30828
// exit ;
30826: GO 31170
// list := [ ] ;
30828: LD_ADDR_VAR 0 13
30832: PUSH
30833: EMPTY
30834: ST_TO_ADDR
// if x - r < 0 then
30835: LD_VAR 0 2
30839: PUSH
30840: LD_VAR 0 4
30844: MINUS
30845: PUSH
30846: LD_INT 0
30848: LESS
30849: IFFALSE 30861
// min_x := 0 else
30851: LD_ADDR_VAR 0 7
30855: PUSH
30856: LD_INT 0
30858: ST_TO_ADDR
30859: GO 30877
// min_x := x - r ;
30861: LD_ADDR_VAR 0 7
30865: PUSH
30866: LD_VAR 0 2
30870: PUSH
30871: LD_VAR 0 4
30875: MINUS
30876: ST_TO_ADDR
// if y - r < 0 then
30877: LD_VAR 0 3
30881: PUSH
30882: LD_VAR 0 4
30886: MINUS
30887: PUSH
30888: LD_INT 0
30890: LESS
30891: IFFALSE 30903
// min_y := 0 else
30893: LD_ADDR_VAR 0 8
30897: PUSH
30898: LD_INT 0
30900: ST_TO_ADDR
30901: GO 30919
// min_y := y - r ;
30903: LD_ADDR_VAR 0 8
30907: PUSH
30908: LD_VAR 0 3
30912: PUSH
30913: LD_VAR 0 4
30917: MINUS
30918: ST_TO_ADDR
// max_x := x + r ;
30919: LD_ADDR_VAR 0 9
30923: PUSH
30924: LD_VAR 0 2
30928: PUSH
30929: LD_VAR 0 4
30933: PLUS
30934: ST_TO_ADDR
// max_y := y + r ;
30935: LD_ADDR_VAR 0 10
30939: PUSH
30940: LD_VAR 0 3
30944: PUSH
30945: LD_VAR 0 4
30949: PLUS
30950: ST_TO_ADDR
// for _x = min_x to max_x do
30951: LD_ADDR_VAR 0 11
30955: PUSH
30956: DOUBLE
30957: LD_VAR 0 7
30961: DEC
30962: ST_TO_ADDR
30963: LD_VAR 0 9
30967: PUSH
30968: FOR_TO
30969: IFFALSE 31088
// for _y = min_y to max_y do
30971: LD_ADDR_VAR 0 12
30975: PUSH
30976: DOUBLE
30977: LD_VAR 0 8
30981: DEC
30982: ST_TO_ADDR
30983: LD_VAR 0 10
30987: PUSH
30988: FOR_TO
30989: IFFALSE 31084
// begin if not ValidHex ( _x , _y ) then
30991: LD_VAR 0 11
30995: PPUSH
30996: LD_VAR 0 12
31000: PPUSH
31001: CALL_OW 488
31005: NOT
31006: IFFALSE 31010
// continue ;
31008: GO 30988
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
31010: LD_VAR 0 11
31014: PPUSH
31015: LD_VAR 0 12
31019: PPUSH
31020: CALL_OW 351
31024: IFFALSE 31042
31026: PUSH
31027: LD_VAR 0 11
31031: PPUSH
31032: LD_VAR 0 12
31036: PPUSH
31037: CALL_OW 554
31041: AND
31042: IFFALSE 31082
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
31044: LD_ADDR_VAR 0 13
31048: PUSH
31049: LD_VAR 0 13
31053: PPUSH
31054: LD_VAR 0 13
31058: PUSH
31059: LD_INT 1
31061: PLUS
31062: PPUSH
31063: LD_VAR 0 11
31067: PUSH
31068: LD_VAR 0 12
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PPUSH
31077: CALL_OW 2
31081: ST_TO_ADDR
// end ;
31082: GO 30988
31084: POP
31085: POP
31086: GO 30968
31088: POP
31089: POP
// if not list then
31090: LD_VAR 0 13
31094: NOT
31095: IFFALSE 31099
// exit ;
31097: GO 31170
// for i in list do
31099: LD_ADDR_VAR 0 6
31103: PUSH
31104: LD_VAR 0 13
31108: PUSH
31109: FOR_IN
31110: IFFALSE 31168
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
31112: LD_VAR 0 1
31116: PPUSH
31117: LD_STRING M
31119: PUSH
31120: LD_VAR 0 6
31124: PUSH
31125: LD_INT 1
31127: ARRAY
31128: PUSH
31129: LD_VAR 0 6
31133: PUSH
31134: LD_INT 2
31136: ARRAY
31137: PUSH
31138: LD_INT 0
31140: PUSH
31141: LD_INT 0
31143: PUSH
31144: LD_INT 0
31146: PUSH
31147: LD_INT 0
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: PUSH
31159: EMPTY
31160: LIST
31161: PPUSH
31162: CALL_OW 447
31166: GO 31109
31168: POP
31169: POP
// end ;
31170: LD_VAR 0 5
31174: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
31175: LD_INT 0
31177: PPUSH
31178: PPUSH
31179: PPUSH
31180: PPUSH
31181: PPUSH
31182: PPUSH
31183: PPUSH
31184: PPUSH
31185: PPUSH
31186: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
31187: LD_VAR 0 1
31191: PPUSH
31192: CALL_OW 302
31196: NOT
31197: IFTRUE 31216
31199: PUSH
31200: LD_VAR 0 2
31204: PPUSH
31205: LD_VAR 0 3
31209: PPUSH
31210: CALL_OW 488
31214: NOT
31215: OR
31216: IFTRUE 31225
31218: PUSH
31219: LD_VAR 0 4
31223: NOT
31224: OR
31225: IFFALSE 31229
// exit ;
31227: GO 31746
// list := [ ] ;
31229: LD_ADDR_VAR 0 13
31233: PUSH
31234: EMPTY
31235: ST_TO_ADDR
// if x - r < 0 then
31236: LD_VAR 0 2
31240: PUSH
31241: LD_VAR 0 4
31245: MINUS
31246: PUSH
31247: LD_INT 0
31249: LESS
31250: IFFALSE 31262
// min_x := 0 else
31252: LD_ADDR_VAR 0 7
31256: PUSH
31257: LD_INT 0
31259: ST_TO_ADDR
31260: GO 31278
// min_x := x - r ;
31262: LD_ADDR_VAR 0 7
31266: PUSH
31267: LD_VAR 0 2
31271: PUSH
31272: LD_VAR 0 4
31276: MINUS
31277: ST_TO_ADDR
// if y - r < 0 then
31278: LD_VAR 0 3
31282: PUSH
31283: LD_VAR 0 4
31287: MINUS
31288: PUSH
31289: LD_INT 0
31291: LESS
31292: IFFALSE 31304
// min_y := 0 else
31294: LD_ADDR_VAR 0 8
31298: PUSH
31299: LD_INT 0
31301: ST_TO_ADDR
31302: GO 31320
// min_y := y - r ;
31304: LD_ADDR_VAR 0 8
31308: PUSH
31309: LD_VAR 0 3
31313: PUSH
31314: LD_VAR 0 4
31318: MINUS
31319: ST_TO_ADDR
// max_x := x + r ;
31320: LD_ADDR_VAR 0 9
31324: PUSH
31325: LD_VAR 0 2
31329: PUSH
31330: LD_VAR 0 4
31334: PLUS
31335: ST_TO_ADDR
// max_y := y + r ;
31336: LD_ADDR_VAR 0 10
31340: PUSH
31341: LD_VAR 0 3
31345: PUSH
31346: LD_VAR 0 4
31350: PLUS
31351: ST_TO_ADDR
// for _x = min_x to max_x do
31352: LD_ADDR_VAR 0 11
31356: PUSH
31357: DOUBLE
31358: LD_VAR 0 7
31362: DEC
31363: ST_TO_ADDR
31364: LD_VAR 0 9
31368: PUSH
31369: FOR_TO
31370: IFFALSE 31489
// for _y = min_y to max_y do
31372: LD_ADDR_VAR 0 12
31376: PUSH
31377: DOUBLE
31378: LD_VAR 0 8
31382: DEC
31383: ST_TO_ADDR
31384: LD_VAR 0 10
31388: PUSH
31389: FOR_TO
31390: IFFALSE 31485
// begin if not ValidHex ( _x , _y ) then
31392: LD_VAR 0 11
31396: PPUSH
31397: LD_VAR 0 12
31401: PPUSH
31402: CALL_OW 488
31406: NOT
31407: IFFALSE 31411
// continue ;
31409: GO 31389
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
31411: LD_VAR 0 11
31415: PPUSH
31416: LD_VAR 0 12
31420: PPUSH
31421: CALL_OW 351
31425: IFFALSE 31443
31427: PUSH
31428: LD_VAR 0 11
31432: PPUSH
31433: LD_VAR 0 12
31437: PPUSH
31438: CALL_OW 554
31442: AND
31443: IFFALSE 31483
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
31445: LD_ADDR_VAR 0 13
31449: PUSH
31450: LD_VAR 0 13
31454: PPUSH
31455: LD_VAR 0 13
31459: PUSH
31460: LD_INT 1
31462: PLUS
31463: PPUSH
31464: LD_VAR 0 11
31468: PUSH
31469: LD_VAR 0 12
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PPUSH
31478: CALL_OW 2
31482: ST_TO_ADDR
// end ;
31483: GO 31389
31485: POP
31486: POP
31487: GO 31369
31489: POP
31490: POP
// if not list then
31491: LD_VAR 0 13
31495: NOT
31496: IFFALSE 31500
// exit ;
31498: GO 31746
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
31500: LD_ADDR_VAR 0 13
31504: PUSH
31505: LD_VAR 0 1
31509: PPUSH
31510: LD_VAR 0 13
31514: PPUSH
31515: LD_INT 1
31517: PPUSH
31518: LD_INT 1
31520: PPUSH
31521: CALL 40588 0 4
31525: ST_TO_ADDR
// ComStop ( flame ) ;
31526: LD_VAR 0 1
31530: PPUSH
31531: CALL_OW 141
// for i in list do
31535: LD_ADDR_VAR 0 6
31539: PUSH
31540: LD_VAR 0 13
31544: PUSH
31545: FOR_IN
31546: IFFALSE 31577
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
31548: LD_VAR 0 1
31552: PPUSH
31553: LD_VAR 0 6
31557: PUSH
31558: LD_INT 1
31560: ARRAY
31561: PPUSH
31562: LD_VAR 0 6
31566: PUSH
31567: LD_INT 2
31569: ARRAY
31570: PPUSH
31571: CALL_OW 176
31575: GO 31545
31577: POP
31578: POP
// repeat wait ( 0 0$1 ) ;
31579: LD_INT 35
31581: PPUSH
31582: CALL_OW 67
// task := GetTaskList ( flame ) ;
31586: LD_ADDR_VAR 0 14
31590: PUSH
31591: LD_VAR 0 1
31595: PPUSH
31596: CALL_OW 437
31600: ST_TO_ADDR
// if not task then
31601: LD_VAR 0 14
31605: NOT
31606: IFFALSE 31610
// exit ;
31608: GO 31746
// if task [ 1 ] [ 1 ] <> | then
31610: LD_VAR 0 14
31614: PUSH
31615: LD_INT 1
31617: ARRAY
31618: PUSH
31619: LD_INT 1
31621: ARRAY
31622: PUSH
31623: LD_STRING |
31625: NONEQUAL
31626: IFFALSE 31630
// exit ;
31628: GO 31746
// _x := task [ 1 ] [ 2 ] ;
31630: LD_ADDR_VAR 0 11
31634: PUSH
31635: LD_VAR 0 14
31639: PUSH
31640: LD_INT 1
31642: ARRAY
31643: PUSH
31644: LD_INT 2
31646: ARRAY
31647: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
31648: LD_ADDR_VAR 0 12
31652: PUSH
31653: LD_VAR 0 14
31657: PUSH
31658: LD_INT 1
31660: ARRAY
31661: PUSH
31662: LD_INT 3
31664: ARRAY
31665: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
31666: LD_VAR 0 11
31670: PPUSH
31671: LD_VAR 0 12
31675: PPUSH
31676: CALL_OW 351
31680: NOT
31681: IFTRUE 31700
31683: PUSH
31684: LD_VAR 0 11
31688: PPUSH
31689: LD_VAR 0 12
31693: PPUSH
31694: CALL_OW 554
31698: NOT
31699: OR
31700: IFFALSE 31734
// begin task := Delete ( task , 1 ) ;
31702: LD_ADDR_VAR 0 14
31706: PUSH
31707: LD_VAR 0 14
31711: PPUSH
31712: LD_INT 1
31714: PPUSH
31715: CALL_OW 3
31719: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
31720: LD_VAR 0 1
31724: PPUSH
31725: LD_VAR 0 14
31729: PPUSH
31730: CALL_OW 446
// end ; until not HasTask ( flame ) ;
31734: LD_VAR 0 1
31738: PPUSH
31739: CALL_OW 314
31743: NOT
31744: IFFALSE 31579
// end ;
31746: LD_VAR 0 5
31750: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
31751: LD_EXP 96
31755: NOT
31756: IFFALSE 31806
31758: GO 31760
31760: DISABLE
// begin initHack := true ;
31761: LD_ADDR_EXP 96
31765: PUSH
31766: LD_INT 1
31768: ST_TO_ADDR
// hackTanks := [ ] ;
31769: LD_ADDR_EXP 97
31773: PUSH
31774: EMPTY
31775: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
31776: LD_ADDR_EXP 98
31780: PUSH
31781: EMPTY
31782: ST_TO_ADDR
// hackLimit := 3 ;
31783: LD_ADDR_EXP 99
31787: PUSH
31788: LD_INT 3
31790: ST_TO_ADDR
// hackDist := 12 ;
31791: LD_ADDR_EXP 100
31795: PUSH
31796: LD_INT 12
31798: ST_TO_ADDR
// hackCounter := [ ] ;
31799: LD_ADDR_EXP 101
31803: PUSH
31804: EMPTY
31805: ST_TO_ADDR
// end ;
31806: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
31807: LD_EXP 96
31811: IFFALSE 31829
31813: PUSH
31814: LD_INT 34
31816: PUSH
31817: LD_INT 99
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PPUSH
31824: CALL_OW 69
31828: AND
31829: IFFALSE 32082
31831: GO 31833
31833: DISABLE
31834: LD_INT 0
31836: PPUSH
31837: PPUSH
// begin enable ;
31838: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
31839: LD_ADDR_VAR 0 1
31843: PUSH
31844: LD_INT 34
31846: PUSH
31847: LD_INT 99
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PPUSH
31854: CALL_OW 69
31858: PUSH
31859: FOR_IN
31860: IFFALSE 32080
// begin if not i in hackTanks then
31862: LD_VAR 0 1
31866: PUSH
31867: LD_EXP 97
31871: IN
31872: NOT
31873: IFFALSE 31956
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
31875: LD_ADDR_EXP 97
31879: PUSH
31880: LD_EXP 97
31884: PPUSH
31885: LD_EXP 97
31889: PUSH
31890: LD_INT 1
31892: PLUS
31893: PPUSH
31894: LD_VAR 0 1
31898: PPUSH
31899: CALL_OW 1
31903: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
31904: LD_ADDR_EXP 98
31908: PUSH
31909: LD_EXP 98
31913: PPUSH
31914: LD_EXP 98
31918: PUSH
31919: LD_INT 1
31921: PLUS
31922: PPUSH
31923: EMPTY
31924: PPUSH
31925: CALL_OW 1
31929: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
31930: LD_ADDR_EXP 101
31934: PUSH
31935: LD_EXP 101
31939: PPUSH
31940: LD_EXP 101
31944: PUSH
31945: LD_INT 1
31947: PLUS
31948: PPUSH
31949: EMPTY
31950: PPUSH
31951: CALL_OW 1
31955: ST_TO_ADDR
// end ; if not IsOk ( i ) then
31956: LD_VAR 0 1
31960: PPUSH
31961: CALL_OW 302
31965: NOT
31966: IFFALSE 31979
// begin HackUnlinkAll ( i ) ;
31968: LD_VAR 0 1
31972: PPUSH
31973: CALL 32085 0 1
// continue ;
31977: GO 31859
// end ; HackCheckCapturedStatus ( i ) ;
31979: LD_VAR 0 1
31983: PPUSH
31984: CALL 32530 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
31988: LD_ADDR_VAR 0 2
31992: PUSH
31993: LD_INT 81
31995: PUSH
31996: LD_VAR 0 1
32000: PPUSH
32001: CALL_OW 255
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 33
32012: PUSH
32013: LD_INT 3
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 91
32022: PUSH
32023: LD_VAR 0 1
32027: PUSH
32028: LD_EXP 100
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 50
32040: PUSH
32041: EMPTY
32042: LIST
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: PPUSH
32050: CALL_OW 69
32054: ST_TO_ADDR
// if not tmp then
32055: LD_VAR 0 2
32059: NOT
32060: IFFALSE 32064
// continue ;
32062: GO 31859
// HackLink ( i , tmp ) ;
32064: LD_VAR 0 1
32068: PPUSH
32069: LD_VAR 0 2
32073: PPUSH
32074: CALL 32221 0 2
// end ;
32078: GO 31859
32080: POP
32081: POP
// end ;
32082: PPOPN 2
32084: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
32085: LD_INT 0
32087: PPUSH
32088: PPUSH
32089: PPUSH
// if not hack in hackTanks then
32090: LD_VAR 0 1
32094: PUSH
32095: LD_EXP 97
32099: IN
32100: NOT
32101: IFFALSE 32105
// exit ;
32103: GO 32216
// index := GetElementIndex ( hackTanks , hack ) ;
32105: LD_ADDR_VAR 0 4
32109: PUSH
32110: LD_EXP 97
32114: PPUSH
32115: LD_VAR 0 1
32119: PPUSH
32120: CALL 39883 0 2
32124: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
32125: LD_EXP 98
32129: PUSH
32130: LD_VAR 0 4
32134: ARRAY
32135: IFFALSE 32216
// begin for i in hackTanksCaptured [ index ] do
32137: LD_ADDR_VAR 0 3
32141: PUSH
32142: LD_EXP 98
32146: PUSH
32147: LD_VAR 0 4
32151: ARRAY
32152: PUSH
32153: FOR_IN
32154: IFFALSE 32180
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
32156: LD_VAR 0 3
32160: PUSH
32161: LD_INT 1
32163: ARRAY
32164: PPUSH
32165: LD_VAR 0 3
32169: PUSH
32170: LD_INT 2
32172: ARRAY
32173: PPUSH
32174: CALL_OW 235
32178: GO 32153
32180: POP
32181: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
32182: LD_ADDR_EXP 98
32186: PUSH
32187: LD_EXP 98
32191: PPUSH
32192: LD_VAR 0 4
32196: PPUSH
32197: EMPTY
32198: PPUSH
32199: CALL_OW 1
32203: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
32204: LD_VAR 0 1
32208: PPUSH
32209: LD_INT 0
32211: PPUSH
32212: CALL_OW 505
// end ; end ;
32216: LD_VAR 0 2
32220: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
32221: LD_INT 0
32223: PPUSH
32224: PPUSH
32225: PPUSH
// if not hack in hackTanks or not vehicles then
32226: LD_VAR 0 1
32230: PUSH
32231: LD_EXP 97
32235: IN
32236: NOT
32237: IFTRUE 32246
32239: PUSH
32240: LD_VAR 0 2
32244: NOT
32245: OR
32246: IFFALSE 32250
// exit ;
32248: GO 32525
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
32250: LD_ADDR_VAR 0 2
32254: PUSH
32255: LD_VAR 0 1
32259: PPUSH
32260: LD_VAR 0 2
32264: PPUSH
32265: LD_INT 1
32267: PPUSH
32268: LD_INT 1
32270: PPUSH
32271: CALL 40535 0 4
32275: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
32276: LD_ADDR_VAR 0 5
32280: PUSH
32281: LD_EXP 97
32285: PPUSH
32286: LD_VAR 0 1
32290: PPUSH
32291: CALL 39883 0 2
32295: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
32296: LD_EXP 98
32300: PUSH
32301: LD_VAR 0 5
32305: ARRAY
32306: PUSH
32307: LD_EXP 99
32311: LESS
32312: IFFALSE 32501
// begin for i := 1 to vehicles do
32314: LD_ADDR_VAR 0 4
32318: PUSH
32319: DOUBLE
32320: LD_INT 1
32322: DEC
32323: ST_TO_ADDR
32324: LD_VAR 0 2
32328: PUSH
32329: FOR_TO
32330: IFFALSE 32499
// begin if hackTanksCaptured [ index ] = hackLimit then
32332: LD_EXP 98
32336: PUSH
32337: LD_VAR 0 5
32341: ARRAY
32342: PUSH
32343: LD_EXP 99
32347: EQUAL
32348: IFFALSE 32352
// break ;
32350: GO 32499
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
32352: LD_ADDR_EXP 101
32356: PUSH
32357: LD_EXP 101
32361: PPUSH
32362: LD_VAR 0 5
32366: PPUSH
32367: LD_EXP 101
32371: PUSH
32372: LD_VAR 0 5
32376: ARRAY
32377: PUSH
32378: LD_INT 1
32380: PLUS
32381: PPUSH
32382: CALL_OW 1
32386: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
32387: LD_ADDR_EXP 98
32391: PUSH
32392: LD_EXP 98
32396: PPUSH
32397: LD_VAR 0 5
32401: PUSH
32402: LD_EXP 98
32406: PUSH
32407: LD_VAR 0 5
32411: ARRAY
32412: PUSH
32413: LD_INT 1
32415: PLUS
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PPUSH
32421: LD_VAR 0 2
32425: PUSH
32426: LD_VAR 0 4
32430: ARRAY
32431: PUSH
32432: LD_VAR 0 2
32436: PUSH
32437: LD_VAR 0 4
32441: ARRAY
32442: PPUSH
32443: CALL_OW 255
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PPUSH
32452: CALL 40100 0 3
32456: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
32457: LD_VAR 0 2
32461: PUSH
32462: LD_VAR 0 4
32466: ARRAY
32467: PPUSH
32468: LD_VAR 0 1
32472: PPUSH
32473: CALL_OW 255
32477: PPUSH
32478: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
32482: LD_VAR 0 2
32486: PUSH
32487: LD_VAR 0 4
32491: ARRAY
32492: PPUSH
32493: CALL_OW 141
// end ;
32497: GO 32329
32499: POP
32500: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32501: LD_VAR 0 1
32505: PPUSH
32506: LD_EXP 98
32510: PUSH
32511: LD_VAR 0 5
32515: ARRAY
32516: PUSH
32517: LD_INT 0
32519: PLUS
32520: PPUSH
32521: CALL_OW 505
// end ;
32525: LD_VAR 0 3
32529: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
32530: LD_INT 0
32532: PPUSH
32533: PPUSH
32534: PPUSH
32535: PPUSH
// if not hack in hackTanks then
32536: LD_VAR 0 1
32540: PUSH
32541: LD_EXP 97
32545: IN
32546: NOT
32547: IFFALSE 32551
// exit ;
32549: GO 32795
// index := GetElementIndex ( hackTanks , hack ) ;
32551: LD_ADDR_VAR 0 4
32555: PUSH
32556: LD_EXP 97
32560: PPUSH
32561: LD_VAR 0 1
32565: PPUSH
32566: CALL 39883 0 2
32570: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
32571: LD_ADDR_VAR 0 3
32575: PUSH
32576: DOUBLE
32577: LD_EXP 98
32581: PUSH
32582: LD_VAR 0 4
32586: ARRAY
32587: INC
32588: ST_TO_ADDR
32589: LD_INT 1
32591: PUSH
32592: FOR_DOWNTO
32593: IFFALSE 32769
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
32595: LD_ADDR_VAR 0 5
32599: PUSH
32600: LD_EXP 98
32604: PUSH
32605: LD_VAR 0 4
32609: ARRAY
32610: PUSH
32611: LD_VAR 0 3
32615: ARRAY
32616: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
32617: LD_VAR 0 5
32621: PUSH
32622: LD_INT 1
32624: ARRAY
32625: PPUSH
32626: CALL_OW 302
32630: NOT
32631: IFTRUE 32659
32633: PUSH
32634: LD_VAR 0 5
32638: PUSH
32639: LD_INT 1
32641: ARRAY
32642: PPUSH
32643: CALL_OW 255
32647: PUSH
32648: LD_VAR 0 1
32652: PPUSH
32653: CALL_OW 255
32657: NONEQUAL
32658: OR
32659: IFFALSE 32767
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
32661: LD_VAR 0 5
32665: PUSH
32666: LD_INT 1
32668: ARRAY
32669: PPUSH
32670: CALL_OW 305
32674: IFFALSE 32702
32676: PUSH
32677: LD_VAR 0 5
32681: PUSH
32682: LD_INT 1
32684: ARRAY
32685: PPUSH
32686: CALL_OW 255
32690: PUSH
32691: LD_VAR 0 1
32695: PPUSH
32696: CALL_OW 255
32700: EQUAL
32701: AND
32702: IFFALSE 32726
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
32704: LD_VAR 0 5
32708: PUSH
32709: LD_INT 1
32711: ARRAY
32712: PPUSH
32713: LD_VAR 0 5
32717: PUSH
32718: LD_INT 2
32720: ARRAY
32721: PPUSH
32722: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
32726: LD_ADDR_EXP 98
32730: PUSH
32731: LD_EXP 98
32735: PPUSH
32736: LD_VAR 0 4
32740: PPUSH
32741: LD_EXP 98
32745: PUSH
32746: LD_VAR 0 4
32750: ARRAY
32751: PPUSH
32752: LD_VAR 0 3
32756: PPUSH
32757: CALL_OW 3
32761: PPUSH
32762: CALL_OW 1
32766: ST_TO_ADDR
// end ; end ;
32767: GO 32592
32769: POP
32770: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32771: LD_VAR 0 1
32775: PPUSH
32776: LD_EXP 98
32780: PUSH
32781: LD_VAR 0 4
32785: ARRAY
32786: PUSH
32787: LD_INT 0
32789: PLUS
32790: PPUSH
32791: CALL_OW 505
// end ;
32795: LD_VAR 0 2
32799: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
32800: LD_INT 0
32802: PPUSH
32803: PPUSH
32804: PPUSH
32805: PPUSH
// if not hack in hackTanks then
32806: LD_VAR 0 1
32810: PUSH
32811: LD_EXP 97
32815: IN
32816: NOT
32817: IFFALSE 32821
// exit ;
32819: GO 32906
// index := GetElementIndex ( hackTanks , hack ) ;
32821: LD_ADDR_VAR 0 5
32825: PUSH
32826: LD_EXP 97
32830: PPUSH
32831: LD_VAR 0 1
32835: PPUSH
32836: CALL 39883 0 2
32840: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
32841: LD_ADDR_VAR 0 4
32845: PUSH
32846: DOUBLE
32847: LD_INT 1
32849: DEC
32850: ST_TO_ADDR
32851: LD_EXP 98
32855: PUSH
32856: LD_VAR 0 5
32860: ARRAY
32861: PUSH
32862: FOR_TO
32863: IFFALSE 32904
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
32865: LD_EXP 98
32869: PUSH
32870: LD_VAR 0 5
32874: ARRAY
32875: PUSH
32876: LD_VAR 0 4
32880: ARRAY
32881: PUSH
32882: LD_INT 1
32884: ARRAY
32885: PUSH
32886: LD_VAR 0 2
32890: EQUAL
32891: IFFALSE 32902
// KillUnit ( vehicle ) ;
32893: LD_VAR 0 2
32897: PPUSH
32898: CALL_OW 66
32902: GO 32862
32904: POP
32905: POP
// end ;
32906: LD_VAR 0 3
32910: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
32911: LD_EXP 102
32915: NOT
32916: IFFALSE 32951
32918: GO 32920
32920: DISABLE
// begin initMiner := true ;
32921: LD_ADDR_EXP 102
32925: PUSH
32926: LD_INT 1
32928: ST_TO_ADDR
// minersList := [ ] ;
32929: LD_ADDR_EXP 103
32933: PUSH
32934: EMPTY
32935: ST_TO_ADDR
// minerMinesList := [ ] ;
32936: LD_ADDR_EXP 104
32940: PUSH
32941: EMPTY
32942: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
32943: LD_ADDR_EXP 105
32947: PUSH
32948: LD_INT 5
32950: ST_TO_ADDR
// end ;
32951: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
32952: LD_EXP 102
32956: IFFALSE 32974
32958: PUSH
32959: LD_INT 34
32961: PUSH
32962: LD_INT 81
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PPUSH
32969: CALL_OW 69
32973: AND
32974: IFFALSE 33437
32976: GO 32978
32978: DISABLE
32979: LD_INT 0
32981: PPUSH
32982: PPUSH
32983: PPUSH
32984: PPUSH
// begin enable ;
32985: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
32986: LD_ADDR_VAR 0 1
32990: PUSH
32991: LD_INT 34
32993: PUSH
32994: LD_INT 81
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PPUSH
33001: CALL_OW 69
33005: PUSH
33006: FOR_IN
33007: IFFALSE 33079
// begin if not i in minersList then
33009: LD_VAR 0 1
33013: PUSH
33014: LD_EXP 103
33018: IN
33019: NOT
33020: IFFALSE 33077
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
33022: LD_ADDR_EXP 103
33026: PUSH
33027: LD_EXP 103
33031: PPUSH
33032: LD_EXP 103
33036: PUSH
33037: LD_INT 1
33039: PLUS
33040: PPUSH
33041: LD_VAR 0 1
33045: PPUSH
33046: CALL_OW 1
33050: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
33051: LD_ADDR_EXP 104
33055: PUSH
33056: LD_EXP 104
33060: PPUSH
33061: LD_EXP 104
33065: PUSH
33066: LD_INT 1
33068: PLUS
33069: PPUSH
33070: EMPTY
33071: PPUSH
33072: CALL_OW 1
33076: ST_TO_ADDR
// end end ;
33077: GO 33006
33079: POP
33080: POP
// for i := minerMinesList downto 1 do
33081: LD_ADDR_VAR 0 1
33085: PUSH
33086: DOUBLE
33087: LD_EXP 104
33091: INC
33092: ST_TO_ADDR
33093: LD_INT 1
33095: PUSH
33096: FOR_DOWNTO
33097: IFFALSE 33435
// begin if IsLive ( minersList [ i ] ) then
33099: LD_EXP 103
33103: PUSH
33104: LD_VAR 0 1
33108: ARRAY
33109: PPUSH
33110: CALL_OW 300
33114: IFFALSE 33142
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
33116: LD_EXP 103
33120: PUSH
33121: LD_VAR 0 1
33125: ARRAY
33126: PPUSH
33127: LD_EXP 104
33131: PUSH
33132: LD_VAR 0 1
33136: ARRAY
33137: PPUSH
33138: CALL_OW 505
// if not minerMinesList [ i ] then
33142: LD_EXP 104
33146: PUSH
33147: LD_VAR 0 1
33151: ARRAY
33152: NOT
33153: IFFALSE 33157
// continue ;
33155: GO 33096
// for j := minerMinesList [ i ] downto 1 do
33157: LD_ADDR_VAR 0 2
33161: PUSH
33162: DOUBLE
33163: LD_EXP 104
33167: PUSH
33168: LD_VAR 0 1
33172: ARRAY
33173: INC
33174: ST_TO_ADDR
33175: LD_INT 1
33177: PUSH
33178: FOR_DOWNTO
33179: IFFALSE 33431
// begin side := GetSide ( minersList [ i ] ) ;
33181: LD_ADDR_VAR 0 3
33185: PUSH
33186: LD_EXP 103
33190: PUSH
33191: LD_VAR 0 1
33195: ARRAY
33196: PPUSH
33197: CALL_OW 255
33201: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
33202: LD_ADDR_VAR 0 4
33206: PUSH
33207: LD_EXP 104
33211: PUSH
33212: LD_VAR 0 1
33216: ARRAY
33217: PUSH
33218: LD_VAR 0 2
33222: ARRAY
33223: PUSH
33224: LD_INT 1
33226: ARRAY
33227: PPUSH
33228: LD_EXP 104
33232: PUSH
33233: LD_VAR 0 1
33237: ARRAY
33238: PUSH
33239: LD_VAR 0 2
33243: ARRAY
33244: PUSH
33245: LD_INT 2
33247: ARRAY
33248: PPUSH
33249: CALL_OW 428
33253: ST_TO_ADDR
// if not tmp then
33254: LD_VAR 0 4
33258: NOT
33259: IFFALSE 33263
// continue ;
33261: GO 33178
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
33263: LD_VAR 0 4
33267: PUSH
33268: LD_INT 81
33270: PUSH
33271: LD_VAR 0 3
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PPUSH
33280: CALL_OW 69
33284: IN
33285: IFFALSE 33335
33287: PUSH
33288: LD_EXP 104
33292: PUSH
33293: LD_VAR 0 1
33297: ARRAY
33298: PUSH
33299: LD_VAR 0 2
33303: ARRAY
33304: PUSH
33305: LD_INT 1
33307: ARRAY
33308: PPUSH
33309: LD_EXP 104
33313: PUSH
33314: LD_VAR 0 1
33318: ARRAY
33319: PUSH
33320: LD_VAR 0 2
33324: ARRAY
33325: PUSH
33326: LD_INT 2
33328: ARRAY
33329: PPUSH
33330: CALL_OW 458
33334: AND
33335: IFFALSE 33429
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
33337: LD_EXP 104
33341: PUSH
33342: LD_VAR 0 1
33346: ARRAY
33347: PUSH
33348: LD_VAR 0 2
33352: ARRAY
33353: PUSH
33354: LD_INT 1
33356: ARRAY
33357: PPUSH
33358: LD_EXP 104
33362: PUSH
33363: LD_VAR 0 1
33367: ARRAY
33368: PUSH
33369: LD_VAR 0 2
33373: ARRAY
33374: PUSH
33375: LD_INT 2
33377: ARRAY
33378: PPUSH
33379: LD_VAR 0 3
33383: PPUSH
33384: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
33388: LD_ADDR_EXP 104
33392: PUSH
33393: LD_EXP 104
33397: PPUSH
33398: LD_VAR 0 1
33402: PPUSH
33403: LD_EXP 104
33407: PUSH
33408: LD_VAR 0 1
33412: ARRAY
33413: PPUSH
33414: LD_VAR 0 2
33418: PPUSH
33419: CALL_OW 3
33423: PPUSH
33424: CALL_OW 1
33428: ST_TO_ADDR
// end ; end ;
33429: GO 33178
33431: POP
33432: POP
// end ;
33433: GO 33096
33435: POP
33436: POP
// end ;
33437: PPOPN 4
33439: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
33440: LD_INT 0
33442: PPUSH
33443: PPUSH
// result := false ;
33444: LD_ADDR_VAR 0 4
33448: PUSH
33449: LD_INT 0
33451: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
33452: LD_VAR 0 1
33456: PPUSH
33457: CALL_OW 264
33461: PUSH
33462: LD_INT 81
33464: EQUAL
33465: NOT
33466: IFFALSE 33470
// exit ;
33468: GO 33714
// index := GetElementIndex ( minersList , unit ) ;
33470: LD_ADDR_VAR 0 5
33474: PUSH
33475: LD_EXP 103
33479: PPUSH
33480: LD_VAR 0 1
33484: PPUSH
33485: CALL 39883 0 2
33489: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
33490: LD_EXP 104
33494: PUSH
33495: LD_VAR 0 5
33499: ARRAY
33500: PUSH
33501: LD_EXP 105
33505: GREATEREQUAL
33506: IFFALSE 33510
// exit ;
33508: GO 33714
// ComMoveXY ( unit , x , y ) ;
33510: LD_VAR 0 1
33514: PPUSH
33515: LD_VAR 0 2
33519: PPUSH
33520: LD_VAR 0 3
33524: PPUSH
33525: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33529: LD_INT 35
33531: PPUSH
33532: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
33536: LD_VAR 0 1
33540: PPUSH
33541: LD_VAR 0 2
33545: PPUSH
33546: LD_VAR 0 3
33550: PPUSH
33551: CALL 71929 0 3
33555: NOT
33556: IFFALSE 33569
33558: PUSH
33559: LD_VAR 0 1
33563: PPUSH
33564: CALL_OW 314
33568: AND
33569: IFFALSE 33573
// exit ;
33571: GO 33714
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
33573: LD_VAR 0 2
33577: PPUSH
33578: LD_VAR 0 3
33582: PPUSH
33583: CALL_OW 428
33587: PUSH
33588: LD_VAR 0 1
33592: EQUAL
33593: IFFALSE 33607
33595: PUSH
33596: LD_VAR 0 1
33600: PPUSH
33601: CALL_OW 314
33605: NOT
33606: AND
33607: IFFALSE 33529
// PlaySoundXY ( x , y , PlantMine ) ;
33609: LD_VAR 0 2
33613: PPUSH
33614: LD_VAR 0 3
33618: PPUSH
33619: LD_STRING PlantMine
33621: PPUSH
33622: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
33626: LD_VAR 0 2
33630: PPUSH
33631: LD_VAR 0 3
33635: PPUSH
33636: LD_VAR 0 1
33640: PPUSH
33641: CALL_OW 255
33645: PPUSH
33646: LD_INT 0
33648: PPUSH
33649: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
33653: LD_ADDR_EXP 104
33657: PUSH
33658: LD_EXP 104
33662: PPUSH
33663: LD_VAR 0 5
33667: PUSH
33668: LD_EXP 104
33672: PUSH
33673: LD_VAR 0 5
33677: ARRAY
33678: PUSH
33679: LD_INT 1
33681: PLUS
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PPUSH
33687: LD_VAR 0 2
33691: PUSH
33692: LD_VAR 0 3
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PPUSH
33701: CALL 40100 0 3
33705: ST_TO_ADDR
// result := true ;
33706: LD_ADDR_VAR 0 4
33710: PUSH
33711: LD_INT 1
33713: ST_TO_ADDR
// end ;
33714: LD_VAR 0 4
33718: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
33719: LD_INT 0
33721: PPUSH
33722: PPUSH
33723: PPUSH
// if not unit in minersList then
33724: LD_VAR 0 1
33728: PUSH
33729: LD_EXP 103
33733: IN
33734: NOT
33735: IFFALSE 33739
// exit ;
33737: GO 34133
// index := GetElementIndex ( minersList , unit ) ;
33739: LD_ADDR_VAR 0 6
33743: PUSH
33744: LD_EXP 103
33748: PPUSH
33749: LD_VAR 0 1
33753: PPUSH
33754: CALL 39883 0 2
33758: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
33759: LD_ADDR_VAR 0 5
33763: PUSH
33764: DOUBLE
33765: LD_EXP 104
33769: PUSH
33770: LD_VAR 0 6
33774: ARRAY
33775: INC
33776: ST_TO_ADDR
33777: LD_INT 1
33779: PUSH
33780: FOR_DOWNTO
33781: IFFALSE 33944
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
33783: LD_EXP 104
33787: PUSH
33788: LD_VAR 0 6
33792: ARRAY
33793: PUSH
33794: LD_VAR 0 5
33798: ARRAY
33799: PUSH
33800: LD_INT 1
33802: ARRAY
33803: PUSH
33804: LD_VAR 0 2
33808: EQUAL
33809: IFFALSE 33839
33811: PUSH
33812: LD_EXP 104
33816: PUSH
33817: LD_VAR 0 6
33821: ARRAY
33822: PUSH
33823: LD_VAR 0 5
33827: ARRAY
33828: PUSH
33829: LD_INT 2
33831: ARRAY
33832: PUSH
33833: LD_VAR 0 3
33837: EQUAL
33838: AND
33839: IFFALSE 33942
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33841: LD_EXP 104
33845: PUSH
33846: LD_VAR 0 6
33850: ARRAY
33851: PUSH
33852: LD_VAR 0 5
33856: ARRAY
33857: PUSH
33858: LD_INT 1
33860: ARRAY
33861: PPUSH
33862: LD_EXP 104
33866: PUSH
33867: LD_VAR 0 6
33871: ARRAY
33872: PUSH
33873: LD_VAR 0 5
33877: ARRAY
33878: PUSH
33879: LD_INT 2
33881: ARRAY
33882: PPUSH
33883: LD_VAR 0 1
33887: PPUSH
33888: CALL_OW 255
33892: PPUSH
33893: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33897: LD_ADDR_EXP 104
33901: PUSH
33902: LD_EXP 104
33906: PPUSH
33907: LD_VAR 0 6
33911: PPUSH
33912: LD_EXP 104
33916: PUSH
33917: LD_VAR 0 6
33921: ARRAY
33922: PPUSH
33923: LD_VAR 0 5
33927: PPUSH
33928: CALL_OW 3
33932: PPUSH
33933: CALL_OW 1
33937: ST_TO_ADDR
// exit ;
33938: POP
33939: POP
33940: GO 34133
// end ; end ;
33942: GO 33780
33944: POP
33945: POP
// for i := minerMinesList [ index ] downto 1 do
33946: LD_ADDR_VAR 0 5
33950: PUSH
33951: DOUBLE
33952: LD_EXP 104
33956: PUSH
33957: LD_VAR 0 6
33961: ARRAY
33962: INC
33963: ST_TO_ADDR
33964: LD_INT 1
33966: PUSH
33967: FOR_DOWNTO
33968: IFFALSE 34131
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
33970: LD_EXP 104
33974: PUSH
33975: LD_VAR 0 6
33979: ARRAY
33980: PUSH
33981: LD_VAR 0 5
33985: ARRAY
33986: PUSH
33987: LD_INT 1
33989: ARRAY
33990: PPUSH
33991: LD_EXP 104
33995: PUSH
33996: LD_VAR 0 6
34000: ARRAY
34001: PUSH
34002: LD_VAR 0 5
34006: ARRAY
34007: PUSH
34008: LD_INT 2
34010: ARRAY
34011: PPUSH
34012: LD_VAR 0 2
34016: PPUSH
34017: LD_VAR 0 3
34021: PPUSH
34022: CALL_OW 298
34026: PUSH
34027: LD_INT 6
34029: LESS
34030: IFFALSE 34129
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34032: LD_EXP 104
34036: PUSH
34037: LD_VAR 0 6
34041: ARRAY
34042: PUSH
34043: LD_VAR 0 5
34047: ARRAY
34048: PUSH
34049: LD_INT 1
34051: ARRAY
34052: PPUSH
34053: LD_EXP 104
34057: PUSH
34058: LD_VAR 0 6
34062: ARRAY
34063: PUSH
34064: LD_VAR 0 5
34068: ARRAY
34069: PUSH
34070: LD_INT 2
34072: ARRAY
34073: PPUSH
34074: LD_VAR 0 1
34078: PPUSH
34079: CALL_OW 255
34083: PPUSH
34084: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34088: LD_ADDR_EXP 104
34092: PUSH
34093: LD_EXP 104
34097: PPUSH
34098: LD_VAR 0 6
34102: PPUSH
34103: LD_EXP 104
34107: PUSH
34108: LD_VAR 0 6
34112: ARRAY
34113: PPUSH
34114: LD_VAR 0 5
34118: PPUSH
34119: CALL_OW 3
34123: PPUSH
34124: CALL_OW 1
34128: ST_TO_ADDR
// end ; end ;
34129: GO 33967
34131: POP
34132: POP
// end ;
34133: LD_VAR 0 4
34137: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
34138: LD_INT 0
34140: PPUSH
34141: PPUSH
34142: PPUSH
34143: PPUSH
34144: PPUSH
34145: PPUSH
34146: PPUSH
34147: PPUSH
34148: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
34149: LD_VAR 0 1
34153: PPUSH
34154: CALL_OW 264
34158: PUSH
34159: LD_INT 81
34161: EQUAL
34162: NOT
34163: IFTRUE 34178
34165: PUSH
34166: LD_VAR 0 1
34170: PUSH
34171: LD_EXP 103
34175: IN
34176: NOT
34177: OR
34178: IFFALSE 34182
// exit ;
34180: GO 34508
// index := GetElementIndex ( minersList , unit ) ;
34182: LD_ADDR_VAR 0 6
34186: PUSH
34187: LD_EXP 103
34191: PPUSH
34192: LD_VAR 0 1
34196: PPUSH
34197: CALL 39883 0 2
34201: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
34202: LD_ADDR_VAR 0 8
34206: PUSH
34207: LD_EXP 105
34211: PUSH
34212: LD_EXP 104
34216: PUSH
34217: LD_VAR 0 6
34221: ARRAY
34222: MINUS
34223: ST_TO_ADDR
// if not minesFreeAmount then
34224: LD_VAR 0 8
34228: NOT
34229: IFFALSE 34233
// exit ;
34231: GO 34508
// tmp := [ ] ;
34233: LD_ADDR_VAR 0 7
34237: PUSH
34238: EMPTY
34239: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
34240: LD_ADDR_VAR 0 5
34244: PUSH
34245: DOUBLE
34246: LD_INT 1
34248: DEC
34249: ST_TO_ADDR
34250: LD_VAR 0 8
34254: PUSH
34255: FOR_TO
34256: IFFALSE 34455
// begin _d := rand ( 0 , 5 ) ;
34258: LD_ADDR_VAR 0 11
34262: PUSH
34263: LD_INT 0
34265: PPUSH
34266: LD_INT 5
34268: PPUSH
34269: CALL_OW 12
34273: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
34274: LD_ADDR_VAR 0 12
34278: PUSH
34279: LD_INT 2
34281: PPUSH
34282: LD_INT 6
34284: PPUSH
34285: CALL_OW 12
34289: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
34290: LD_ADDR_VAR 0 9
34294: PUSH
34295: LD_VAR 0 2
34299: PPUSH
34300: LD_VAR 0 11
34304: PPUSH
34305: LD_VAR 0 12
34309: PPUSH
34310: CALL_OW 272
34314: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
34315: LD_ADDR_VAR 0 10
34319: PUSH
34320: LD_VAR 0 3
34324: PPUSH
34325: LD_VAR 0 11
34329: PPUSH
34330: LD_VAR 0 12
34334: PPUSH
34335: CALL_OW 273
34339: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
34340: LD_VAR 0 9
34344: PPUSH
34345: LD_VAR 0 10
34349: PPUSH
34350: CALL_OW 488
34354: IFFALSE 34378
34356: PUSH
34357: LD_VAR 0 9
34361: PUSH
34362: LD_VAR 0 10
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_VAR 0 7
34375: IN
34376: NOT
34377: AND
34378: IFFALSE 34397
34380: PUSH
34381: LD_VAR 0 9
34385: PPUSH
34386: LD_VAR 0 10
34390: PPUSH
34391: CALL_OW 458
34395: NOT
34396: AND
34397: IFFALSE 34439
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
34399: LD_ADDR_VAR 0 7
34403: PUSH
34404: LD_VAR 0 7
34408: PPUSH
34409: LD_VAR 0 7
34413: PUSH
34414: LD_INT 1
34416: PLUS
34417: PPUSH
34418: LD_VAR 0 9
34422: PUSH
34423: LD_VAR 0 10
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PPUSH
34432: CALL_OW 1
34436: ST_TO_ADDR
34437: GO 34453
// i := i - 1 ;
34439: LD_ADDR_VAR 0 5
34443: PUSH
34444: LD_VAR 0 5
34448: PUSH
34449: LD_INT 1
34451: MINUS
34452: ST_TO_ADDR
// end ;
34453: GO 34255
34455: POP
34456: POP
// for i in tmp do
34457: LD_ADDR_VAR 0 5
34461: PUSH
34462: LD_VAR 0 7
34466: PUSH
34467: FOR_IN
34468: IFFALSE 34506
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
34470: LD_VAR 0 1
34474: PPUSH
34475: LD_VAR 0 5
34479: PUSH
34480: LD_INT 1
34482: ARRAY
34483: PPUSH
34484: LD_VAR 0 5
34488: PUSH
34489: LD_INT 2
34491: ARRAY
34492: PPUSH
34493: CALL 33440 0 3
34497: NOT
34498: IFFALSE 34504
// exit ;
34500: POP
34501: POP
34502: GO 34508
34504: GO 34467
34506: POP
34507: POP
// end ;
34508: LD_VAR 0 4
34512: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
34513: LD_INT 0
34515: PPUSH
34516: PPUSH
34517: PPUSH
34518: PPUSH
34519: PPUSH
34520: PPUSH
34521: PPUSH
34522: PPUSH
34523: PPUSH
// if GetClass ( unit ) <> class_sniper then
34524: LD_VAR 0 1
34528: PPUSH
34529: CALL_OW 257
34533: PUSH
34534: LD_INT 5
34536: NONEQUAL
34537: IFFALSE 34541
// exit ;
34539: GO 35011
// dist := 8 ;
34541: LD_ADDR_VAR 0 5
34545: PUSH
34546: LD_INT 8
34548: ST_TO_ADDR
// viewRange := 12 ;
34549: LD_ADDR_VAR 0 8
34553: PUSH
34554: LD_INT 12
34556: ST_TO_ADDR
// side := GetSide ( unit ) ;
34557: LD_ADDR_VAR 0 6
34561: PUSH
34562: LD_VAR 0 1
34566: PPUSH
34567: CALL_OW 255
34571: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
34572: LD_INT 61
34574: PPUSH
34575: LD_VAR 0 6
34579: PPUSH
34580: CALL_OW 321
34584: PUSH
34585: LD_INT 2
34587: EQUAL
34588: IFFALSE 34598
// viewRange := 16 ;
34590: LD_ADDR_VAR 0 8
34594: PUSH
34595: LD_INT 16
34597: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
34598: LD_VAR 0 1
34602: PPUSH
34603: LD_VAR 0 2
34607: PPUSH
34608: LD_VAR 0 3
34612: PPUSH
34613: CALL_OW 297
34617: PUSH
34618: LD_VAR 0 5
34622: GREATER
34623: IFFALSE 34702
// begin ComMoveXY ( unit , x , y ) ;
34625: LD_VAR 0 1
34629: PPUSH
34630: LD_VAR 0 2
34634: PPUSH
34635: LD_VAR 0 3
34639: PPUSH
34640: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34644: LD_INT 35
34646: PPUSH
34647: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
34651: LD_VAR 0 1
34655: PPUSH
34656: LD_VAR 0 2
34660: PPUSH
34661: LD_VAR 0 3
34665: PPUSH
34666: CALL 71929 0 3
34670: NOT
34671: IFFALSE 34675
// exit ;
34673: GO 35011
// until GetDistUnitXY ( unit , x , y ) < dist ;
34675: LD_VAR 0 1
34679: PPUSH
34680: LD_VAR 0 2
34684: PPUSH
34685: LD_VAR 0 3
34689: PPUSH
34690: CALL_OW 297
34694: PUSH
34695: LD_VAR 0 5
34699: LESS
34700: IFFALSE 34644
// end ; ComTurnXY ( unit , x , y ) ;
34702: LD_VAR 0 1
34706: PPUSH
34707: LD_VAR 0 2
34711: PPUSH
34712: LD_VAR 0 3
34716: PPUSH
34717: CALL_OW 118
// repeat if Multiplayer then
34721: LD_OWVAR 4
34725: IFFALSE 34736
// wait ( 35 ) else
34727: LD_INT 35
34729: PPUSH
34730: CALL_OW 67
34734: GO 34743
// wait ( 5 ) ;
34736: LD_INT 5
34738: PPUSH
34739: CALL_OW 67
// _d := GetDir ( unit ) ;
34743: LD_ADDR_VAR 0 11
34747: PUSH
34748: LD_VAR 0 1
34752: PPUSH
34753: CALL_OW 254
34757: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
34758: LD_ADDR_VAR 0 7
34762: PUSH
34763: LD_VAR 0 1
34767: PPUSH
34768: CALL_OW 250
34772: PPUSH
34773: LD_VAR 0 1
34777: PPUSH
34778: CALL_OW 251
34782: PPUSH
34783: LD_VAR 0 2
34787: PPUSH
34788: LD_VAR 0 3
34792: PPUSH
34793: CALL 74565 0 4
34797: ST_TO_ADDR
// until dir = _d ;
34798: LD_VAR 0 7
34802: PUSH
34803: LD_VAR 0 11
34807: EQUAL
34808: IFFALSE 34721
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
34810: LD_ADDR_VAR 0 9
34814: PUSH
34815: LD_VAR 0 1
34819: PPUSH
34820: CALL_OW 250
34824: PPUSH
34825: LD_VAR 0 7
34829: PPUSH
34830: LD_VAR 0 5
34834: PPUSH
34835: CALL_OW 272
34839: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
34840: LD_ADDR_VAR 0 10
34844: PUSH
34845: LD_VAR 0 1
34849: PPUSH
34850: CALL_OW 251
34854: PPUSH
34855: LD_VAR 0 7
34859: PPUSH
34860: LD_VAR 0 5
34864: PPUSH
34865: CALL_OW 273
34869: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34870: LD_VAR 0 9
34874: PPUSH
34875: LD_VAR 0 10
34879: PPUSH
34880: CALL_OW 488
34884: NOT
34885: IFFALSE 34889
// exit ;
34887: GO 35011
// ComAnimCustom ( unit , 1 ) ;
34889: LD_VAR 0 1
34893: PPUSH
34894: LD_INT 1
34896: PPUSH
34897: CALL_OW 592
// p := 0 ;
34901: LD_ADDR_VAR 0 12
34905: PUSH
34906: LD_INT 0
34908: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
34909: LD_VAR 0 9
34913: PPUSH
34914: LD_VAR 0 10
34918: PPUSH
34919: LD_VAR 0 6
34923: PPUSH
34924: LD_VAR 0 8
34928: PPUSH
34929: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
34933: LD_INT 35
34935: PPUSH
34936: CALL_OW 67
// p := Inc ( p ) ;
34940: LD_ADDR_VAR 0 12
34944: PUSH
34945: LD_VAR 0 12
34949: PPUSH
34950: CALL 74521 0 1
34954: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
34955: LD_VAR 0 12
34959: PUSH
34960: LD_INT 3
34962: EQUAL
34963: IFTRUE 34977
34965: PUSH
34966: LD_VAR 0 1
34970: PPUSH
34971: CALL_OW 302
34975: NOT
34976: OR
34977: IFTRUE 34990
34979: PUSH
34980: LD_VAR 0 1
34984: PPUSH
34985: CALL_OW 301
34989: OR
34990: IFFALSE 34933
// RemoveSeeing ( _x , _y , side ) ;
34992: LD_VAR 0 9
34996: PPUSH
34997: LD_VAR 0 10
35001: PPUSH
35002: LD_VAR 0 6
35006: PPUSH
35007: CALL_OW 331
// end ; end_of_file
35011: LD_VAR 0 4
35015: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35016: LD_INT 0
35018: PPUSH
35019: PPUSH
// if exist_mode then
35020: LD_VAR 0 2
35024: IFFALSE 35070
// begin unit := CreateCharacter ( prefix & ident ) ;
35026: LD_ADDR_VAR 0 5
35030: PUSH
35031: LD_VAR 0 3
35035: PUSH
35036: LD_VAR 0 1
35040: STR
35041: PPUSH
35042: CALL_OW 34
35046: ST_TO_ADDR
// if unit then
35047: LD_VAR 0 5
35051: IFFALSE 35068
// DeleteCharacters ( prefix & ident ) ;
35053: LD_VAR 0 3
35057: PUSH
35058: LD_VAR 0 1
35062: STR
35063: PPUSH
35064: CALL_OW 40
// end else
35068: GO 35085
// unit := NewCharacter ( ident ) ;
35070: LD_ADDR_VAR 0 5
35074: PUSH
35075: LD_VAR 0 1
35079: PPUSH
35080: CALL_OW 25
35084: ST_TO_ADDR
// result := unit ;
35085: LD_ADDR_VAR 0 4
35089: PUSH
35090: LD_VAR 0 5
35094: ST_TO_ADDR
// end ;
35095: LD_VAR 0 4
35099: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
35100: LD_INT 0
35102: PPUSH
35103: PPUSH
// if exist_mode then
35104: LD_VAR 0 2
35108: IFFALSE 35133
// unit := CreateCharacter ( prefix & ident ) else
35110: LD_ADDR_VAR 0 5
35114: PUSH
35115: LD_VAR 0 3
35119: PUSH
35120: LD_VAR 0 1
35124: STR
35125: PPUSH
35126: CALL_OW 34
35130: ST_TO_ADDR
35131: GO 35148
// unit := NewCharacter ( ident ) ;
35133: LD_ADDR_VAR 0 5
35137: PUSH
35138: LD_VAR 0 1
35142: PPUSH
35143: CALL_OW 25
35147: ST_TO_ADDR
// result := unit ;
35148: LD_ADDR_VAR 0 4
35152: PUSH
35153: LD_VAR 0 5
35157: ST_TO_ADDR
// end ;
35158: LD_VAR 0 4
35162: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35163: LD_INT 0
35165: PPUSH
35166: PPUSH
// if not side or not nation then
35167: LD_VAR 0 1
35171: NOT
35172: IFTRUE 35181
35174: PUSH
35175: LD_VAR 0 2
35179: NOT
35180: OR
35181: IFFALSE 35185
// exit ;
35183: GO 35955
// case nation of nation_american :
35185: LD_VAR 0 2
35189: PUSH
35190: LD_INT 1
35192: DOUBLE
35193: EQUAL
35194: IFTRUE 35198
35196: GO 35412
35198: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35199: LD_ADDR_VAR 0 4
35203: PUSH
35204: LD_INT 35
35206: PUSH
35207: LD_INT 45
35209: PUSH
35210: LD_INT 46
35212: PUSH
35213: LD_INT 47
35215: PUSH
35216: LD_INT 82
35218: PUSH
35219: LD_INT 83
35221: PUSH
35222: LD_INT 84
35224: PUSH
35225: LD_INT 85
35227: PUSH
35228: LD_INT 86
35230: PUSH
35231: LD_INT 1
35233: PUSH
35234: LD_INT 2
35236: PUSH
35237: LD_INT 6
35239: PUSH
35240: LD_INT 15
35242: PUSH
35243: LD_INT 16
35245: PUSH
35246: LD_INT 7
35248: PUSH
35249: LD_INT 12
35251: PUSH
35252: LD_INT 13
35254: PUSH
35255: LD_INT 10
35257: PUSH
35258: LD_INT 14
35260: PUSH
35261: LD_INT 20
35263: PUSH
35264: LD_INT 21
35266: PUSH
35267: LD_INT 22
35269: PUSH
35270: LD_INT 25
35272: PUSH
35273: LD_INT 32
35275: PUSH
35276: LD_INT 27
35278: PUSH
35279: LD_INT 36
35281: PUSH
35282: LD_INT 69
35284: PUSH
35285: LD_INT 39
35287: PUSH
35288: LD_INT 34
35290: PUSH
35291: LD_INT 40
35293: PUSH
35294: LD_INT 48
35296: PUSH
35297: LD_INT 49
35299: PUSH
35300: LD_INT 50
35302: PUSH
35303: LD_INT 51
35305: PUSH
35306: LD_INT 52
35308: PUSH
35309: LD_INT 53
35311: PUSH
35312: LD_INT 54
35314: PUSH
35315: LD_INT 55
35317: PUSH
35318: LD_INT 56
35320: PUSH
35321: LD_INT 57
35323: PUSH
35324: LD_INT 58
35326: PUSH
35327: LD_INT 59
35329: PUSH
35330: LD_INT 60
35332: PUSH
35333: LD_INT 61
35335: PUSH
35336: LD_INT 62
35338: PUSH
35339: LD_INT 80
35341: PUSH
35342: LD_INT 82
35344: PUSH
35345: LD_INT 83
35347: PUSH
35348: LD_INT 84
35350: PUSH
35351: LD_INT 85
35353: PUSH
35354: LD_INT 86
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: ST_TO_ADDR
35410: GO 35877
35412: LD_INT 2
35414: DOUBLE
35415: EQUAL
35416: IFTRUE 35420
35418: GO 35646
35420: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
35421: LD_ADDR_VAR 0 4
35425: PUSH
35426: LD_INT 35
35428: PUSH
35429: LD_INT 45
35431: PUSH
35432: LD_INT 46
35434: PUSH
35435: LD_INT 47
35437: PUSH
35438: LD_INT 82
35440: PUSH
35441: LD_INT 83
35443: PUSH
35444: LD_INT 84
35446: PUSH
35447: LD_INT 85
35449: PUSH
35450: LD_INT 87
35452: PUSH
35453: LD_INT 70
35455: PUSH
35456: LD_INT 1
35458: PUSH
35459: LD_INT 11
35461: PUSH
35462: LD_INT 3
35464: PUSH
35465: LD_INT 4
35467: PUSH
35468: LD_INT 5
35470: PUSH
35471: LD_INT 6
35473: PUSH
35474: LD_INT 15
35476: PUSH
35477: LD_INT 18
35479: PUSH
35480: LD_INT 7
35482: PUSH
35483: LD_INT 17
35485: PUSH
35486: LD_INT 8
35488: PUSH
35489: LD_INT 20
35491: PUSH
35492: LD_INT 21
35494: PUSH
35495: LD_INT 22
35497: PUSH
35498: LD_INT 72
35500: PUSH
35501: LD_INT 26
35503: PUSH
35504: LD_INT 69
35506: PUSH
35507: LD_INT 39
35509: PUSH
35510: LD_INT 40
35512: PUSH
35513: LD_INT 41
35515: PUSH
35516: LD_INT 42
35518: PUSH
35519: LD_INT 43
35521: PUSH
35522: LD_INT 48
35524: PUSH
35525: LD_INT 49
35527: PUSH
35528: LD_INT 50
35530: PUSH
35531: LD_INT 51
35533: PUSH
35534: LD_INT 52
35536: PUSH
35537: LD_INT 53
35539: PUSH
35540: LD_INT 54
35542: PUSH
35543: LD_INT 55
35545: PUSH
35546: LD_INT 56
35548: PUSH
35549: LD_INT 60
35551: PUSH
35552: LD_INT 61
35554: PUSH
35555: LD_INT 62
35557: PUSH
35558: LD_INT 66
35560: PUSH
35561: LD_INT 67
35563: PUSH
35564: LD_INT 68
35566: PUSH
35567: LD_INT 81
35569: PUSH
35570: LD_INT 82
35572: PUSH
35573: LD_INT 83
35575: PUSH
35576: LD_INT 84
35578: PUSH
35579: LD_INT 85
35581: PUSH
35582: LD_INT 87
35584: PUSH
35585: LD_INT 88
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: ST_TO_ADDR
35644: GO 35877
35646: LD_INT 3
35648: DOUBLE
35649: EQUAL
35650: IFTRUE 35654
35652: GO 35876
35654: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
35655: LD_ADDR_VAR 0 4
35659: PUSH
35660: LD_INT 46
35662: PUSH
35663: LD_INT 47
35665: PUSH
35666: LD_INT 1
35668: PUSH
35669: LD_INT 2
35671: PUSH
35672: LD_INT 82
35674: PUSH
35675: LD_INT 83
35677: PUSH
35678: LD_INT 84
35680: PUSH
35681: LD_INT 85
35683: PUSH
35684: LD_INT 86
35686: PUSH
35687: LD_INT 11
35689: PUSH
35690: LD_INT 9
35692: PUSH
35693: LD_INT 20
35695: PUSH
35696: LD_INT 19
35698: PUSH
35699: LD_INT 21
35701: PUSH
35702: LD_INT 24
35704: PUSH
35705: LD_INT 22
35707: PUSH
35708: LD_INT 25
35710: PUSH
35711: LD_INT 28
35713: PUSH
35714: LD_INT 29
35716: PUSH
35717: LD_INT 30
35719: PUSH
35720: LD_INT 31
35722: PUSH
35723: LD_INT 37
35725: PUSH
35726: LD_INT 38
35728: PUSH
35729: LD_INT 32
35731: PUSH
35732: LD_INT 27
35734: PUSH
35735: LD_INT 33
35737: PUSH
35738: LD_INT 69
35740: PUSH
35741: LD_INT 39
35743: PUSH
35744: LD_INT 34
35746: PUSH
35747: LD_INT 40
35749: PUSH
35750: LD_INT 71
35752: PUSH
35753: LD_INT 23
35755: PUSH
35756: LD_INT 44
35758: PUSH
35759: LD_INT 48
35761: PUSH
35762: LD_INT 49
35764: PUSH
35765: LD_INT 50
35767: PUSH
35768: LD_INT 51
35770: PUSH
35771: LD_INT 52
35773: PUSH
35774: LD_INT 53
35776: PUSH
35777: LD_INT 54
35779: PUSH
35780: LD_INT 55
35782: PUSH
35783: LD_INT 56
35785: PUSH
35786: LD_INT 57
35788: PUSH
35789: LD_INT 58
35791: PUSH
35792: LD_INT 59
35794: PUSH
35795: LD_INT 63
35797: PUSH
35798: LD_INT 64
35800: PUSH
35801: LD_INT 65
35803: PUSH
35804: LD_INT 82
35806: PUSH
35807: LD_INT 83
35809: PUSH
35810: LD_INT 84
35812: PUSH
35813: LD_INT 85
35815: PUSH
35816: LD_INT 86
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: ST_TO_ADDR
35874: GO 35877
35876: POP
// if state > - 1 and state < 3 then
35877: LD_VAR 0 3
35881: PUSH
35882: LD_INT 1
35884: NEG
35885: GREATER
35886: IFFALSE 35898
35888: PUSH
35889: LD_VAR 0 3
35893: PUSH
35894: LD_INT 3
35896: LESS
35897: AND
35898: IFFALSE 35955
// for i in result do
35900: LD_ADDR_VAR 0 5
35904: PUSH
35905: LD_VAR 0 4
35909: PUSH
35910: FOR_IN
35911: IFFALSE 35953
// if GetTech ( i , side ) <> state then
35913: LD_VAR 0 5
35917: PPUSH
35918: LD_VAR 0 1
35922: PPUSH
35923: CALL_OW 321
35927: PUSH
35928: LD_VAR 0 3
35932: NONEQUAL
35933: IFFALSE 35951
// result := result diff i ;
35935: LD_ADDR_VAR 0 4
35939: PUSH
35940: LD_VAR 0 4
35944: PUSH
35945: LD_VAR 0 5
35949: DIFF
35950: ST_TO_ADDR
35951: GO 35910
35953: POP
35954: POP
// end ;
35955: LD_VAR 0 4
35959: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35960: LD_INT 0
35962: PPUSH
35963: PPUSH
35964: PPUSH
// result := true ;
35965: LD_ADDR_VAR 0 3
35969: PUSH
35970: LD_INT 1
35972: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35973: LD_ADDR_VAR 0 5
35977: PUSH
35978: LD_VAR 0 2
35982: PPUSH
35983: CALL_OW 480
35987: ST_TO_ADDR
// if not tmp then
35988: LD_VAR 0 5
35992: NOT
35993: IFFALSE 35997
// exit ;
35995: GO 36046
// for i in tmp do
35997: LD_ADDR_VAR 0 4
36001: PUSH
36002: LD_VAR 0 5
36006: PUSH
36007: FOR_IN
36008: IFFALSE 36044
// if GetTech ( i , side ) <> state_researched then
36010: LD_VAR 0 4
36014: PPUSH
36015: LD_VAR 0 1
36019: PPUSH
36020: CALL_OW 321
36024: PUSH
36025: LD_INT 2
36027: NONEQUAL
36028: IFFALSE 36042
// begin result := false ;
36030: LD_ADDR_VAR 0 3
36034: PUSH
36035: LD_INT 0
36037: ST_TO_ADDR
// exit ;
36038: POP
36039: POP
36040: GO 36046
// end ;
36042: GO 36007
36044: POP
36045: POP
// end ;
36046: LD_VAR 0 3
36050: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36051: LD_INT 0
36053: PPUSH
36054: PPUSH
36055: PPUSH
36056: PPUSH
36057: PPUSH
36058: PPUSH
36059: PPUSH
36060: PPUSH
36061: PPUSH
36062: PPUSH
36063: PPUSH
36064: PPUSH
36065: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36066: LD_VAR 0 1
36070: NOT
36071: IFTRUE 36088
36073: PUSH
36074: LD_VAR 0 1
36078: PPUSH
36079: CALL_OW 257
36083: PUSH
36084: LD_INT 9
36086: NONEQUAL
36087: OR
36088: IFFALSE 36092
// exit ;
36090: GO 36671
// side := GetSide ( unit ) ;
36092: LD_ADDR_VAR 0 9
36096: PUSH
36097: LD_VAR 0 1
36101: PPUSH
36102: CALL_OW 255
36106: ST_TO_ADDR
// tech_space := tech_spacanom ;
36107: LD_ADDR_VAR 0 12
36111: PUSH
36112: LD_INT 29
36114: ST_TO_ADDR
// tech_time := tech_taurad ;
36115: LD_ADDR_VAR 0 13
36119: PUSH
36120: LD_INT 28
36122: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36123: LD_ADDR_VAR 0 11
36127: PUSH
36128: LD_VAR 0 1
36132: PPUSH
36133: CALL_OW 310
36137: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36138: LD_VAR 0 11
36142: PPUSH
36143: CALL_OW 247
36147: PUSH
36148: LD_INT 2
36150: EQUAL
36151: IFFALSE 36155
// exit ;
36153: GO 36671
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36155: LD_ADDR_VAR 0 8
36159: PUSH
36160: LD_INT 81
36162: PUSH
36163: LD_VAR 0 9
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 3
36174: PUSH
36175: LD_INT 21
36177: PUSH
36178: LD_INT 3
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PPUSH
36193: CALL_OW 69
36197: ST_TO_ADDR
// if not tmp then
36198: LD_VAR 0 8
36202: NOT
36203: IFFALSE 36207
// exit ;
36205: GO 36671
// if in_unit then
36207: LD_VAR 0 11
36211: IFFALSE 36235
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36213: LD_ADDR_VAR 0 10
36217: PUSH
36218: LD_VAR 0 8
36222: PPUSH
36223: LD_VAR 0 11
36227: PPUSH
36228: CALL_OW 74
36232: ST_TO_ADDR
36233: GO 36255
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36235: LD_ADDR_VAR 0 10
36239: PUSH
36240: LD_VAR 0 8
36244: PPUSH
36245: LD_VAR 0 1
36249: PPUSH
36250: CALL_OW 74
36254: ST_TO_ADDR
// if not enemy then
36255: LD_VAR 0 10
36259: NOT
36260: IFFALSE 36264
// exit ;
36262: GO 36671
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36264: LD_VAR 0 11
36268: IFFALSE 36290
36270: PUSH
36271: LD_VAR 0 11
36275: PPUSH
36276: LD_VAR 0 10
36280: PPUSH
36281: CALL_OW 296
36285: PUSH
36286: LD_INT 13
36288: GREATER
36289: AND
36290: IFTRUE 36312
36292: PUSH
36293: LD_VAR 0 1
36297: PPUSH
36298: LD_VAR 0 10
36302: PPUSH
36303: CALL_OW 296
36307: PUSH
36308: LD_INT 12
36310: GREATER
36311: OR
36312: IFFALSE 36316
// exit ;
36314: GO 36671
// missile := [ 1 ] ;
36316: LD_ADDR_VAR 0 14
36320: PUSH
36321: LD_INT 1
36323: PUSH
36324: EMPTY
36325: LIST
36326: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36327: LD_VAR 0 9
36331: PPUSH
36332: LD_VAR 0 12
36336: PPUSH
36337: CALL_OW 325
36341: IFFALSE 36370
// missile := Replace ( missile , missile + 1 , 2 ) ;
36343: LD_ADDR_VAR 0 14
36347: PUSH
36348: LD_VAR 0 14
36352: PPUSH
36353: LD_VAR 0 14
36357: PUSH
36358: LD_INT 1
36360: PLUS
36361: PPUSH
36362: LD_INT 2
36364: PPUSH
36365: CALL_OW 1
36369: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36370: LD_VAR 0 9
36374: PPUSH
36375: LD_VAR 0 13
36379: PPUSH
36380: CALL_OW 325
36384: IFFALSE 36408
36386: PUSH
36387: LD_VAR 0 10
36391: PPUSH
36392: CALL_OW 255
36396: PPUSH
36397: LD_VAR 0 13
36401: PPUSH
36402: CALL_OW 325
36406: NOT
36407: AND
36408: IFFALSE 36437
// missile := Replace ( missile , missile + 1 , 3 ) ;
36410: LD_ADDR_VAR 0 14
36414: PUSH
36415: LD_VAR 0 14
36419: PPUSH
36420: LD_VAR 0 14
36424: PUSH
36425: LD_INT 1
36427: PLUS
36428: PPUSH
36429: LD_INT 3
36431: PPUSH
36432: CALL_OW 1
36436: ST_TO_ADDR
// if missile < 2 then
36437: LD_VAR 0 14
36441: PUSH
36442: LD_INT 2
36444: LESS
36445: IFFALSE 36449
// exit ;
36447: GO 36671
// x := GetX ( enemy ) ;
36449: LD_ADDR_VAR 0 4
36453: PUSH
36454: LD_VAR 0 10
36458: PPUSH
36459: CALL_OW 250
36463: ST_TO_ADDR
// y := GetY ( enemy ) ;
36464: LD_ADDR_VAR 0 5
36468: PUSH
36469: LD_VAR 0 10
36473: PPUSH
36474: CALL_OW 251
36478: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
36479: LD_ADDR_VAR 0 6
36483: PUSH
36484: LD_VAR 0 4
36488: PUSH
36489: LD_INT 1
36491: NEG
36492: PPUSH
36493: LD_INT 1
36495: PPUSH
36496: CALL_OW 12
36500: PLUS
36501: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
36502: LD_ADDR_VAR 0 7
36506: PUSH
36507: LD_VAR 0 5
36511: PUSH
36512: LD_INT 1
36514: NEG
36515: PPUSH
36516: LD_INT 1
36518: PPUSH
36519: CALL_OW 12
36523: PLUS
36524: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36525: LD_VAR 0 6
36529: PPUSH
36530: LD_VAR 0 7
36534: PPUSH
36535: CALL_OW 488
36539: NOT
36540: IFFALSE 36562
// begin _x := x ;
36542: LD_ADDR_VAR 0 6
36546: PUSH
36547: LD_VAR 0 4
36551: ST_TO_ADDR
// _y := y ;
36552: LD_ADDR_VAR 0 7
36556: PUSH
36557: LD_VAR 0 5
36561: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
36562: LD_ADDR_VAR 0 3
36566: PUSH
36567: LD_INT 1
36569: PPUSH
36570: LD_VAR 0 14
36574: PPUSH
36575: CALL_OW 12
36579: ST_TO_ADDR
// case i of 1 :
36580: LD_VAR 0 3
36584: PUSH
36585: LD_INT 1
36587: DOUBLE
36588: EQUAL
36589: IFTRUE 36593
36591: GO 36610
36593: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
36594: LD_VAR 0 1
36598: PPUSH
36599: LD_VAR 0 10
36603: PPUSH
36604: CALL_OW 115
36608: GO 36671
36610: LD_INT 2
36612: DOUBLE
36613: EQUAL
36614: IFTRUE 36618
36616: GO 36640
36618: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
36619: LD_VAR 0 1
36623: PPUSH
36624: LD_VAR 0 6
36628: PPUSH
36629: LD_VAR 0 7
36633: PPUSH
36634: CALL_OW 153
36638: GO 36671
36640: LD_INT 3
36642: DOUBLE
36643: EQUAL
36644: IFTRUE 36648
36646: GO 36670
36648: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
36649: LD_VAR 0 1
36653: PPUSH
36654: LD_VAR 0 6
36658: PPUSH
36659: LD_VAR 0 7
36663: PPUSH
36664: CALL_OW 154
36668: GO 36671
36670: POP
// end ;
36671: LD_VAR 0 2
36675: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
36676: LD_INT 0
36678: PPUSH
36679: PPUSH
36680: PPUSH
36681: PPUSH
36682: PPUSH
36683: PPUSH
// if not unit or not building then
36684: LD_VAR 0 1
36688: NOT
36689: IFTRUE 36698
36691: PUSH
36692: LD_VAR 0 2
36696: NOT
36697: OR
36698: IFFALSE 36702
// exit ;
36700: GO 36860
// x := GetX ( building ) ;
36702: LD_ADDR_VAR 0 5
36706: PUSH
36707: LD_VAR 0 2
36711: PPUSH
36712: CALL_OW 250
36716: ST_TO_ADDR
// y := GetY ( building ) ;
36717: LD_ADDR_VAR 0 6
36721: PUSH
36722: LD_VAR 0 2
36726: PPUSH
36727: CALL_OW 251
36731: ST_TO_ADDR
// for i := 0 to 5 do
36732: LD_ADDR_VAR 0 4
36736: PUSH
36737: DOUBLE
36738: LD_INT 0
36740: DEC
36741: ST_TO_ADDR
36742: LD_INT 5
36744: PUSH
36745: FOR_TO
36746: IFFALSE 36858
// begin _x := ShiftX ( x , i , 3 ) ;
36748: LD_ADDR_VAR 0 7
36752: PUSH
36753: LD_VAR 0 5
36757: PPUSH
36758: LD_VAR 0 4
36762: PPUSH
36763: LD_INT 3
36765: PPUSH
36766: CALL_OW 272
36770: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
36771: LD_ADDR_VAR 0 8
36775: PUSH
36776: LD_VAR 0 6
36780: PPUSH
36781: LD_VAR 0 4
36785: PPUSH
36786: LD_INT 3
36788: PPUSH
36789: CALL_OW 273
36793: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36794: LD_VAR 0 7
36798: PPUSH
36799: LD_VAR 0 8
36803: PPUSH
36804: CALL_OW 488
36808: NOT
36809: IFFALSE 36813
// continue ;
36811: GO 36745
// if HexInfo ( _x , _y ) = 0 then
36813: LD_VAR 0 7
36817: PPUSH
36818: LD_VAR 0 8
36822: PPUSH
36823: CALL_OW 428
36827: PUSH
36828: LD_INT 0
36830: EQUAL
36831: IFFALSE 36856
// begin ComMoveXY ( unit , _x , _y ) ;
36833: LD_VAR 0 1
36837: PPUSH
36838: LD_VAR 0 7
36842: PPUSH
36843: LD_VAR 0 8
36847: PPUSH
36848: CALL_OW 111
// exit ;
36852: POP
36853: POP
36854: GO 36860
// end ; end ;
36856: GO 36745
36858: POP
36859: POP
// end ;
36860: LD_VAR 0 3
36864: RET
// export function ScanBase ( side , base_area ) ; begin
36865: LD_INT 0
36867: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36868: LD_ADDR_VAR 0 3
36872: PUSH
36873: LD_VAR 0 2
36877: PPUSH
36878: LD_INT 81
36880: PUSH
36881: LD_VAR 0 1
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PPUSH
36890: CALL_OW 70
36894: ST_TO_ADDR
// end ;
36895: LD_VAR 0 3
36899: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36900: LD_INT 0
36902: PPUSH
36903: PPUSH
36904: PPUSH
36905: PPUSH
// result := false ;
36906: LD_ADDR_VAR 0 2
36910: PUSH
36911: LD_INT 0
36913: ST_TO_ADDR
// side := GetSide ( unit ) ;
36914: LD_ADDR_VAR 0 3
36918: PUSH
36919: LD_VAR 0 1
36923: PPUSH
36924: CALL_OW 255
36928: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36929: LD_ADDR_VAR 0 4
36933: PUSH
36934: LD_VAR 0 1
36938: PPUSH
36939: CALL_OW 248
36943: ST_TO_ADDR
// case nat of 1 :
36944: LD_VAR 0 4
36948: PUSH
36949: LD_INT 1
36951: DOUBLE
36952: EQUAL
36953: IFTRUE 36957
36955: GO 36968
36957: POP
// tech := tech_lassight ; 2 :
36958: LD_ADDR_VAR 0 5
36962: PUSH
36963: LD_INT 12
36965: ST_TO_ADDR
36966: GO 37007
36968: LD_INT 2
36970: DOUBLE
36971: EQUAL
36972: IFTRUE 36976
36974: GO 36987
36976: POP
// tech := tech_mortar ; 3 :
36977: LD_ADDR_VAR 0 5
36981: PUSH
36982: LD_INT 41
36984: ST_TO_ADDR
36985: GO 37007
36987: LD_INT 3
36989: DOUBLE
36990: EQUAL
36991: IFTRUE 36995
36993: GO 37006
36995: POP
// tech := tech_bazooka ; end ;
36996: LD_ADDR_VAR 0 5
37000: PUSH
37001: LD_INT 44
37003: ST_TO_ADDR
37004: GO 37007
37006: POP
// if Researched ( side , tech ) then
37007: LD_VAR 0 3
37011: PPUSH
37012: LD_VAR 0 5
37016: PPUSH
37017: CALL_OW 325
37021: IFFALSE 37048
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37023: LD_ADDR_VAR 0 2
37027: PUSH
37028: LD_INT 5
37030: PUSH
37031: LD_INT 8
37033: PUSH
37034: LD_INT 9
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: LIST
37041: PUSH
37042: LD_VAR 0 4
37046: ARRAY
37047: ST_TO_ADDR
// end ;
37048: LD_VAR 0 2
37052: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37053: LD_INT 0
37055: PPUSH
37056: PPUSH
37057: PPUSH
// if not mines then
37058: LD_VAR 0 2
37062: NOT
37063: IFFALSE 37067
// exit ;
37065: GO 37211
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37067: LD_ADDR_VAR 0 5
37071: PUSH
37072: LD_INT 81
37074: PUSH
37075: LD_VAR 0 1
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 3
37086: PUSH
37087: LD_INT 21
37089: PUSH
37090: LD_INT 3
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PPUSH
37105: CALL_OW 69
37109: ST_TO_ADDR
// for i in mines do
37110: LD_ADDR_VAR 0 4
37114: PUSH
37115: LD_VAR 0 2
37119: PUSH
37120: FOR_IN
37121: IFFALSE 37209
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37123: LD_VAR 0 4
37127: PUSH
37128: LD_INT 1
37130: ARRAY
37131: PPUSH
37132: LD_VAR 0 4
37136: PUSH
37137: LD_INT 2
37139: ARRAY
37140: PPUSH
37141: CALL_OW 458
37145: NOT
37146: IFFALSE 37150
// continue ;
37148: GO 37120
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37150: LD_VAR 0 4
37154: PUSH
37155: LD_INT 1
37157: ARRAY
37158: PPUSH
37159: LD_VAR 0 4
37163: PUSH
37164: LD_INT 2
37166: ARRAY
37167: PPUSH
37168: CALL_OW 428
37172: PUSH
37173: LD_VAR 0 5
37177: IN
37178: IFFALSE 37207
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37180: LD_VAR 0 4
37184: PUSH
37185: LD_INT 1
37187: ARRAY
37188: PPUSH
37189: LD_VAR 0 4
37193: PUSH
37194: LD_INT 2
37196: ARRAY
37197: PPUSH
37198: LD_VAR 0 1
37202: PPUSH
37203: CALL_OW 456
// end ;
37207: GO 37120
37209: POP
37210: POP
// end ;
37211: LD_VAR 0 3
37215: RET
// export function Count ( array ) ; begin
37216: LD_INT 0
37218: PPUSH
// result := array + 0 ;
37219: LD_ADDR_VAR 0 2
37223: PUSH
37224: LD_VAR 0 1
37228: PUSH
37229: LD_INT 0
37231: PLUS
37232: ST_TO_ADDR
// end ;
37233: LD_VAR 0 2
37237: RET
// export function IsEmpty ( building ) ; begin
37238: LD_INT 0
37240: PPUSH
// if not building then
37241: LD_VAR 0 1
37245: NOT
37246: IFFALSE 37250
// exit ;
37248: GO 37293
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37250: LD_ADDR_VAR 0 2
37254: PUSH
37255: LD_VAR 0 1
37259: PUSH
37260: LD_INT 22
37262: PUSH
37263: LD_VAR 0 1
37267: PPUSH
37268: CALL_OW 255
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 58
37279: PUSH
37280: EMPTY
37281: LIST
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PPUSH
37287: CALL_OW 69
37291: IN
37292: ST_TO_ADDR
// end ;
37293: LD_VAR 0 2
37297: RET
// export function IsNotFull ( building ) ; var places ; begin
37298: LD_INT 0
37300: PPUSH
37301: PPUSH
// if not building then
37302: LD_VAR 0 1
37306: NOT
37307: IFFALSE 37311
// exit ;
37309: GO 37339
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
37311: LD_ADDR_VAR 0 2
37315: PUSH
37316: LD_VAR 0 1
37320: PPUSH
37321: LD_INT 3
37323: PUSH
37324: LD_INT 62
37326: PUSH
37327: EMPTY
37328: LIST
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PPUSH
37334: CALL_OW 72
37338: ST_TO_ADDR
// end ;
37339: LD_VAR 0 2
37343: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37344: LD_INT 0
37346: PPUSH
37347: PPUSH
37348: PPUSH
37349: PPUSH
// tmp := [ ] ;
37350: LD_ADDR_VAR 0 3
37354: PUSH
37355: EMPTY
37356: ST_TO_ADDR
// list := [ ] ;
37357: LD_ADDR_VAR 0 5
37361: PUSH
37362: EMPTY
37363: ST_TO_ADDR
// for i = 16 to 25 do
37364: LD_ADDR_VAR 0 4
37368: PUSH
37369: DOUBLE
37370: LD_INT 16
37372: DEC
37373: ST_TO_ADDR
37374: LD_INT 25
37376: PUSH
37377: FOR_TO
37378: IFFALSE 37451
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37380: LD_ADDR_VAR 0 3
37384: PUSH
37385: LD_VAR 0 3
37389: PUSH
37390: LD_INT 22
37392: PUSH
37393: LD_VAR 0 1
37397: PPUSH
37398: CALL_OW 255
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 91
37409: PUSH
37410: LD_VAR 0 1
37414: PUSH
37415: LD_INT 6
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 30
37425: PUSH
37426: LD_VAR 0 4
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: LIST
37439: PUSH
37440: EMPTY
37441: LIST
37442: PPUSH
37443: CALL_OW 69
37447: ADD
37448: ST_TO_ADDR
37449: GO 37377
37451: POP
37452: POP
// for i = 1 to tmp do
37453: LD_ADDR_VAR 0 4
37457: PUSH
37458: DOUBLE
37459: LD_INT 1
37461: DEC
37462: ST_TO_ADDR
37463: LD_VAR 0 3
37467: PUSH
37468: FOR_TO
37469: IFFALSE 37557
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37471: LD_ADDR_VAR 0 5
37475: PUSH
37476: LD_VAR 0 5
37480: PUSH
37481: LD_VAR 0 3
37485: PUSH
37486: LD_VAR 0 4
37490: ARRAY
37491: PPUSH
37492: CALL_OW 266
37496: PUSH
37497: LD_VAR 0 3
37501: PUSH
37502: LD_VAR 0 4
37506: ARRAY
37507: PPUSH
37508: CALL_OW 250
37512: PUSH
37513: LD_VAR 0 3
37517: PUSH
37518: LD_VAR 0 4
37522: ARRAY
37523: PPUSH
37524: CALL_OW 251
37528: PUSH
37529: LD_VAR 0 3
37533: PUSH
37534: LD_VAR 0 4
37538: ARRAY
37539: PPUSH
37540: CALL_OW 254
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: PUSH
37551: EMPTY
37552: LIST
37553: ADD
37554: ST_TO_ADDR
37555: GO 37468
37557: POP
37558: POP
// result := list ;
37559: LD_ADDR_VAR 0 2
37563: PUSH
37564: LD_VAR 0 5
37568: ST_TO_ADDR
// end ;
37569: LD_VAR 0 2
37573: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
37574: LD_INT 0
37576: PPUSH
37577: PPUSH
37578: PPUSH
37579: PPUSH
37580: PPUSH
37581: PPUSH
37582: PPUSH
// if not factory then
37583: LD_VAR 0 1
37587: NOT
37588: IFFALSE 37592
// exit ;
37590: GO 38195
// if control = control_apeman then
37592: LD_VAR 0 4
37596: PUSH
37597: LD_INT 5
37599: EQUAL
37600: IFFALSE 37709
// begin tmp := UnitsInside ( factory ) ;
37602: LD_ADDR_VAR 0 8
37606: PUSH
37607: LD_VAR 0 1
37611: PPUSH
37612: CALL_OW 313
37616: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
37617: LD_VAR 0 8
37621: PPUSH
37622: LD_INT 25
37624: PUSH
37625: LD_INT 12
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PPUSH
37632: CALL_OW 72
37636: NOT
37637: IFFALSE 37647
// control := control_manual ;
37639: LD_ADDR_VAR 0 4
37643: PUSH
37644: LD_INT 1
37646: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
37647: LD_ADDR_VAR 0 8
37651: PUSH
37652: LD_VAR 0 1
37656: PPUSH
37657: CALL 37344 0 1
37661: ST_TO_ADDR
// if tmp then
37662: LD_VAR 0 8
37666: IFFALSE 37709
// begin for i in tmp do
37668: LD_ADDR_VAR 0 7
37672: PUSH
37673: LD_VAR 0 8
37677: PUSH
37678: FOR_IN
37679: IFFALSE 37707
// if i [ 1 ] = b_ext_radio then
37681: LD_VAR 0 7
37685: PUSH
37686: LD_INT 1
37688: ARRAY
37689: PUSH
37690: LD_INT 22
37692: EQUAL
37693: IFFALSE 37705
// begin control := control_remote ;
37695: LD_ADDR_VAR 0 4
37699: PUSH
37700: LD_INT 2
37702: ST_TO_ADDR
// break ;
37703: GO 37707
// end ;
37705: GO 37678
37707: POP
37708: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37709: LD_VAR 0 1
37713: PPUSH
37714: LD_VAR 0 2
37718: PPUSH
37719: LD_VAR 0 3
37723: PPUSH
37724: LD_VAR 0 4
37728: PPUSH
37729: LD_VAR 0 5
37733: PPUSH
37734: CALL_OW 448
37738: IFFALSE 37773
// begin result := [ chassis , engine , control , weapon ] ;
37740: LD_ADDR_VAR 0 6
37744: PUSH
37745: LD_VAR 0 2
37749: PUSH
37750: LD_VAR 0 3
37754: PUSH
37755: LD_VAR 0 4
37759: PUSH
37760: LD_VAR 0 5
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: ST_TO_ADDR
// exit ;
37771: GO 38195
// end ; _chassis := AvailableChassisList ( factory ) ;
37773: LD_ADDR_VAR 0 9
37777: PUSH
37778: LD_VAR 0 1
37782: PPUSH
37783: CALL_OW 475
37787: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
37788: LD_ADDR_VAR 0 11
37792: PUSH
37793: LD_VAR 0 1
37797: PPUSH
37798: CALL_OW 476
37802: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
37803: LD_ADDR_VAR 0 12
37807: PUSH
37808: LD_VAR 0 1
37812: PPUSH
37813: CALL_OW 477
37817: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
37818: LD_ADDR_VAR 0 10
37822: PUSH
37823: LD_VAR 0 1
37827: PPUSH
37828: CALL_OW 478
37832: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
37833: LD_VAR 0 9
37837: NOT
37838: IFTRUE 37847
37840: PUSH
37841: LD_VAR 0 11
37845: NOT
37846: OR
37847: IFTRUE 37856
37849: PUSH
37850: LD_VAR 0 12
37854: NOT
37855: OR
37856: IFTRUE 37865
37858: PUSH
37859: LD_VAR 0 10
37863: NOT
37864: OR
37865: IFFALSE 37900
// begin result := [ chassis , engine , control , weapon ] ;
37867: LD_ADDR_VAR 0 6
37871: PUSH
37872: LD_VAR 0 2
37876: PUSH
37877: LD_VAR 0 3
37881: PUSH
37882: LD_VAR 0 4
37886: PUSH
37887: LD_VAR 0 5
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: ST_TO_ADDR
// exit ;
37898: GO 38195
// end ; if not chassis in _chassis then
37900: LD_VAR 0 2
37904: PUSH
37905: LD_VAR 0 9
37909: IN
37910: NOT
37911: IFFALSE 37937
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
37913: LD_ADDR_VAR 0 2
37917: PUSH
37918: LD_VAR 0 9
37922: PUSH
37923: LD_INT 1
37925: PPUSH
37926: LD_VAR 0 9
37930: PPUSH
37931: CALL_OW 12
37935: ARRAY
37936: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
37937: LD_VAR 0 2
37941: PPUSH
37942: LD_VAR 0 3
37946: PPUSH
37947: CALL 38200 0 2
37951: NOT
37952: IFFALSE 38013
// repeat engine := _engine [ 1 ] ;
37954: LD_ADDR_VAR 0 3
37958: PUSH
37959: LD_VAR 0 11
37963: PUSH
37964: LD_INT 1
37966: ARRAY
37967: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37968: LD_ADDR_VAR 0 11
37972: PUSH
37973: LD_VAR 0 11
37977: PPUSH
37978: LD_INT 1
37980: PPUSH
37981: CALL_OW 3
37985: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37986: LD_VAR 0 2
37990: PPUSH
37991: LD_VAR 0 3
37995: PPUSH
37996: CALL 38200 0 2
38000: IFTRUE 38011
38002: PUSH
38003: LD_VAR 0 11
38007: PUSH
38008: EMPTY
38009: EQUAL
38010: OR
38011: IFFALSE 37954
// if not control in _control then
38013: LD_VAR 0 4
38017: PUSH
38018: LD_VAR 0 12
38022: IN
38023: NOT
38024: IFFALSE 38050
// control := _control [ rand ( 1 , _control ) ] ;
38026: LD_ADDR_VAR 0 4
38030: PUSH
38031: LD_VAR 0 12
38035: PUSH
38036: LD_INT 1
38038: PPUSH
38039: LD_VAR 0 12
38043: PPUSH
38044: CALL_OW 12
38048: ARRAY
38049: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38050: LD_VAR 0 2
38054: PPUSH
38055: LD_VAR 0 5
38059: PPUSH
38060: CALL 38422 0 2
38064: NOT
38065: IFFALSE 38126
// repeat weapon := _weapon [ 1 ] ;
38067: LD_ADDR_VAR 0 5
38071: PUSH
38072: LD_VAR 0 10
38076: PUSH
38077: LD_INT 1
38079: ARRAY
38080: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38081: LD_ADDR_VAR 0 10
38085: PUSH
38086: LD_VAR 0 10
38090: PPUSH
38091: LD_INT 1
38093: PPUSH
38094: CALL_OW 3
38098: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38099: LD_VAR 0 2
38103: PPUSH
38104: LD_VAR 0 5
38108: PPUSH
38109: CALL 38422 0 2
38113: IFTRUE 38124
38115: PUSH
38116: LD_VAR 0 10
38120: PUSH
38121: EMPTY
38122: EQUAL
38123: OR
38124: IFFALSE 38067
// result := [ ] ;
38126: LD_ADDR_VAR 0 6
38130: PUSH
38131: EMPTY
38132: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38133: LD_VAR 0 1
38137: PPUSH
38138: LD_VAR 0 2
38142: PPUSH
38143: LD_VAR 0 3
38147: PPUSH
38148: LD_VAR 0 4
38152: PPUSH
38153: LD_VAR 0 5
38157: PPUSH
38158: CALL_OW 448
38162: IFFALSE 38195
// result := [ chassis , engine , control , weapon ] ;
38164: LD_ADDR_VAR 0 6
38168: PUSH
38169: LD_VAR 0 2
38173: PUSH
38174: LD_VAR 0 3
38178: PUSH
38179: LD_VAR 0 4
38183: PUSH
38184: LD_VAR 0 5
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: ST_TO_ADDR
// end ;
38195: LD_VAR 0 6
38199: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38200: LD_INT 0
38202: PPUSH
// if not chassis or not engine then
38203: LD_VAR 0 1
38207: NOT
38208: IFTRUE 38217
38210: PUSH
38211: LD_VAR 0 2
38215: NOT
38216: OR
38217: IFFALSE 38221
// exit ;
38219: GO 38417
// case engine of engine_solar :
38221: LD_VAR 0 2
38225: PUSH
38226: LD_INT 2
38228: DOUBLE
38229: EQUAL
38230: IFTRUE 38234
38232: GO 38272
38234: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38235: LD_ADDR_VAR 0 3
38239: PUSH
38240: LD_INT 11
38242: PUSH
38243: LD_INT 12
38245: PUSH
38246: LD_INT 13
38248: PUSH
38249: LD_INT 14
38251: PUSH
38252: LD_INT 1
38254: PUSH
38255: LD_INT 2
38257: PUSH
38258: LD_INT 3
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: ST_TO_ADDR
38270: GO 38401
38272: LD_INT 1
38274: DOUBLE
38275: EQUAL
38276: IFTRUE 38280
38278: GO 38342
38280: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38281: LD_ADDR_VAR 0 3
38285: PUSH
38286: LD_INT 11
38288: PUSH
38289: LD_INT 12
38291: PUSH
38292: LD_INT 13
38294: PUSH
38295: LD_INT 14
38297: PUSH
38298: LD_INT 1
38300: PUSH
38301: LD_INT 2
38303: PUSH
38304: LD_INT 3
38306: PUSH
38307: LD_INT 4
38309: PUSH
38310: LD_INT 5
38312: PUSH
38313: LD_INT 21
38315: PUSH
38316: LD_INT 23
38318: PUSH
38319: LD_INT 22
38321: PUSH
38322: LD_INT 24
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: ST_TO_ADDR
38340: GO 38401
38342: LD_INT 3
38344: DOUBLE
38345: EQUAL
38346: IFTRUE 38350
38348: GO 38400
38350: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38351: LD_ADDR_VAR 0 3
38355: PUSH
38356: LD_INT 13
38358: PUSH
38359: LD_INT 14
38361: PUSH
38362: LD_INT 2
38364: PUSH
38365: LD_INT 3
38367: PUSH
38368: LD_INT 4
38370: PUSH
38371: LD_INT 5
38373: PUSH
38374: LD_INT 21
38376: PUSH
38377: LD_INT 22
38379: PUSH
38380: LD_INT 23
38382: PUSH
38383: LD_INT 24
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: ST_TO_ADDR
38398: GO 38401
38400: POP
// result := ( chassis in result ) ;
38401: LD_ADDR_VAR 0 3
38405: PUSH
38406: LD_VAR 0 1
38410: PUSH
38411: LD_VAR 0 3
38415: IN
38416: ST_TO_ADDR
// end ;
38417: LD_VAR 0 3
38421: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38422: LD_INT 0
38424: PPUSH
// if not chassis or not weapon then
38425: LD_VAR 0 1
38429: NOT
38430: IFTRUE 38439
38432: PUSH
38433: LD_VAR 0 2
38437: NOT
38438: OR
38439: IFFALSE 38443
// exit ;
38441: GO 39503
// case weapon of us_machine_gun :
38443: LD_VAR 0 2
38447: PUSH
38448: LD_INT 2
38450: DOUBLE
38451: EQUAL
38452: IFTRUE 38456
38454: GO 38486
38456: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38457: LD_ADDR_VAR 0 3
38461: PUSH
38462: LD_INT 1
38464: PUSH
38465: LD_INT 2
38467: PUSH
38468: LD_INT 3
38470: PUSH
38471: LD_INT 4
38473: PUSH
38474: LD_INT 5
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: ST_TO_ADDR
38484: GO 39487
38486: LD_INT 3
38488: DOUBLE
38489: EQUAL
38490: IFTRUE 38494
38492: GO 38524
38494: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38495: LD_ADDR_VAR 0 3
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: LD_INT 2
38505: PUSH
38506: LD_INT 3
38508: PUSH
38509: LD_INT 4
38511: PUSH
38512: LD_INT 5
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: ST_TO_ADDR
38522: GO 39487
38524: LD_INT 11
38526: DOUBLE
38527: EQUAL
38528: IFTRUE 38532
38530: GO 38562
38532: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38533: LD_ADDR_VAR 0 3
38537: PUSH
38538: LD_INT 1
38540: PUSH
38541: LD_INT 2
38543: PUSH
38544: LD_INT 3
38546: PUSH
38547: LD_INT 4
38549: PUSH
38550: LD_INT 5
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: ST_TO_ADDR
38560: GO 39487
38562: LD_INT 4
38564: DOUBLE
38565: EQUAL
38566: IFTRUE 38570
38568: GO 38596
38570: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
38571: LD_ADDR_VAR 0 3
38575: PUSH
38576: LD_INT 2
38578: PUSH
38579: LD_INT 3
38581: PUSH
38582: LD_INT 4
38584: PUSH
38585: LD_INT 5
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: ST_TO_ADDR
38594: GO 39487
38596: LD_INT 5
38598: DOUBLE
38599: EQUAL
38600: IFTRUE 38604
38602: GO 38630
38604: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
38605: LD_ADDR_VAR 0 3
38609: PUSH
38610: LD_INT 2
38612: PUSH
38613: LD_INT 3
38615: PUSH
38616: LD_INT 4
38618: PUSH
38619: LD_INT 5
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: ST_TO_ADDR
38628: GO 39487
38630: LD_INT 9
38632: DOUBLE
38633: EQUAL
38634: IFTRUE 38638
38636: GO 38664
38638: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
38639: LD_ADDR_VAR 0 3
38643: PUSH
38644: LD_INT 2
38646: PUSH
38647: LD_INT 3
38649: PUSH
38650: LD_INT 4
38652: PUSH
38653: LD_INT 5
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: ST_TO_ADDR
38662: GO 39487
38664: LD_INT 7
38666: DOUBLE
38667: EQUAL
38668: IFTRUE 38672
38670: GO 38698
38672: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
38673: LD_ADDR_VAR 0 3
38677: PUSH
38678: LD_INT 2
38680: PUSH
38681: LD_INT 3
38683: PUSH
38684: LD_INT 4
38686: PUSH
38687: LD_INT 5
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: ST_TO_ADDR
38696: GO 39487
38698: LD_INT 12
38700: DOUBLE
38701: EQUAL
38702: IFTRUE 38706
38704: GO 38732
38706: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
38707: LD_ADDR_VAR 0 3
38711: PUSH
38712: LD_INT 2
38714: PUSH
38715: LD_INT 3
38717: PUSH
38718: LD_INT 4
38720: PUSH
38721: LD_INT 5
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: ST_TO_ADDR
38730: GO 39487
38732: LD_INT 13
38734: DOUBLE
38735: EQUAL
38736: IFTRUE 38740
38738: GO 38766
38740: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
38741: LD_ADDR_VAR 0 3
38745: PUSH
38746: LD_INT 2
38748: PUSH
38749: LD_INT 3
38751: PUSH
38752: LD_INT 4
38754: PUSH
38755: LD_INT 5
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: ST_TO_ADDR
38764: GO 39487
38766: LD_INT 14
38768: DOUBLE
38769: EQUAL
38770: IFTRUE 38774
38772: GO 38792
38774: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
38775: LD_ADDR_VAR 0 3
38779: PUSH
38780: LD_INT 4
38782: PUSH
38783: LD_INT 5
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: ST_TO_ADDR
38790: GO 39487
38792: LD_INT 6
38794: DOUBLE
38795: EQUAL
38796: IFTRUE 38800
38798: GO 38818
38800: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
38801: LD_ADDR_VAR 0 3
38805: PUSH
38806: LD_INT 4
38808: PUSH
38809: LD_INT 5
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: ST_TO_ADDR
38816: GO 39487
38818: LD_INT 10
38820: DOUBLE
38821: EQUAL
38822: IFTRUE 38826
38824: GO 38844
38826: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
38827: LD_ADDR_VAR 0 3
38831: PUSH
38832: LD_INT 4
38834: PUSH
38835: LD_INT 5
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: ST_TO_ADDR
38842: GO 39487
38844: LD_INT 22
38846: DOUBLE
38847: EQUAL
38848: IFTRUE 38852
38850: GO 38878
38852: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
38853: LD_ADDR_VAR 0 3
38857: PUSH
38858: LD_INT 11
38860: PUSH
38861: LD_INT 12
38863: PUSH
38864: LD_INT 13
38866: PUSH
38867: LD_INT 14
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: ST_TO_ADDR
38876: GO 39487
38878: LD_INT 23
38880: DOUBLE
38881: EQUAL
38882: IFTRUE 38886
38884: GO 38912
38886: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
38887: LD_ADDR_VAR 0 3
38891: PUSH
38892: LD_INT 11
38894: PUSH
38895: LD_INT 12
38897: PUSH
38898: LD_INT 13
38900: PUSH
38901: LD_INT 14
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: ST_TO_ADDR
38910: GO 39487
38912: LD_INT 24
38914: DOUBLE
38915: EQUAL
38916: IFTRUE 38920
38918: GO 38946
38920: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
38921: LD_ADDR_VAR 0 3
38925: PUSH
38926: LD_INT 11
38928: PUSH
38929: LD_INT 12
38931: PUSH
38932: LD_INT 13
38934: PUSH
38935: LD_INT 14
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: ST_TO_ADDR
38944: GO 39487
38946: LD_INT 30
38948: DOUBLE
38949: EQUAL
38950: IFTRUE 38954
38952: GO 38980
38954: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38955: LD_ADDR_VAR 0 3
38959: PUSH
38960: LD_INT 11
38962: PUSH
38963: LD_INT 12
38965: PUSH
38966: LD_INT 13
38968: PUSH
38969: LD_INT 14
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: ST_TO_ADDR
38978: GO 39487
38980: LD_INT 25
38982: DOUBLE
38983: EQUAL
38984: IFTRUE 38988
38986: GO 39006
38988: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38989: LD_ADDR_VAR 0 3
38993: PUSH
38994: LD_INT 13
38996: PUSH
38997: LD_INT 14
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: ST_TO_ADDR
39004: GO 39487
39006: LD_INT 27
39008: DOUBLE
39009: EQUAL
39010: IFTRUE 39014
39012: GO 39032
39014: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39015: LD_ADDR_VAR 0 3
39019: PUSH
39020: LD_INT 13
39022: PUSH
39023: LD_INT 14
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: ST_TO_ADDR
39030: GO 39487
39032: LD_INT 92
39034: DOUBLE
39035: EQUAL
39036: IFTRUE 39040
39038: GO 39066
39040: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39041: LD_ADDR_VAR 0 3
39045: PUSH
39046: LD_INT 11
39048: PUSH
39049: LD_INT 12
39051: PUSH
39052: LD_INT 13
39054: PUSH
39055: LD_INT 14
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: ST_TO_ADDR
39064: GO 39487
39066: LD_INT 28
39068: DOUBLE
39069: EQUAL
39070: IFTRUE 39074
39072: GO 39092
39074: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39075: LD_ADDR_VAR 0 3
39079: PUSH
39080: LD_INT 13
39082: PUSH
39083: LD_INT 14
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: ST_TO_ADDR
39090: GO 39487
39092: LD_INT 29
39094: DOUBLE
39095: EQUAL
39096: IFTRUE 39100
39098: GO 39118
39100: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39101: LD_ADDR_VAR 0 3
39105: PUSH
39106: LD_INT 13
39108: PUSH
39109: LD_INT 14
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: ST_TO_ADDR
39116: GO 39487
39118: LD_INT 31
39120: DOUBLE
39121: EQUAL
39122: IFTRUE 39126
39124: GO 39144
39126: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39127: LD_ADDR_VAR 0 3
39131: PUSH
39132: LD_INT 13
39134: PUSH
39135: LD_INT 14
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: ST_TO_ADDR
39142: GO 39487
39144: LD_INT 26
39146: DOUBLE
39147: EQUAL
39148: IFTRUE 39152
39150: GO 39170
39152: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39153: LD_ADDR_VAR 0 3
39157: PUSH
39158: LD_INT 13
39160: PUSH
39161: LD_INT 14
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: ST_TO_ADDR
39168: GO 39487
39170: LD_INT 42
39172: DOUBLE
39173: EQUAL
39174: IFTRUE 39178
39176: GO 39204
39178: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39179: LD_ADDR_VAR 0 3
39183: PUSH
39184: LD_INT 21
39186: PUSH
39187: LD_INT 22
39189: PUSH
39190: LD_INT 23
39192: PUSH
39193: LD_INT 24
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: ST_TO_ADDR
39202: GO 39487
39204: LD_INT 43
39206: DOUBLE
39207: EQUAL
39208: IFTRUE 39212
39210: GO 39238
39212: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39213: LD_ADDR_VAR 0 3
39217: PUSH
39218: LD_INT 21
39220: PUSH
39221: LD_INT 22
39223: PUSH
39224: LD_INT 23
39226: PUSH
39227: LD_INT 24
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: ST_TO_ADDR
39236: GO 39487
39238: LD_INT 44
39240: DOUBLE
39241: EQUAL
39242: IFTRUE 39246
39244: GO 39272
39246: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39247: LD_ADDR_VAR 0 3
39251: PUSH
39252: LD_INT 21
39254: PUSH
39255: LD_INT 22
39257: PUSH
39258: LD_INT 23
39260: PUSH
39261: LD_INT 24
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: ST_TO_ADDR
39270: GO 39487
39272: LD_INT 45
39274: DOUBLE
39275: EQUAL
39276: IFTRUE 39280
39278: GO 39306
39280: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39281: LD_ADDR_VAR 0 3
39285: PUSH
39286: LD_INT 21
39288: PUSH
39289: LD_INT 22
39291: PUSH
39292: LD_INT 23
39294: PUSH
39295: LD_INT 24
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: ST_TO_ADDR
39304: GO 39487
39306: LD_INT 49
39308: DOUBLE
39309: EQUAL
39310: IFTRUE 39314
39312: GO 39340
39314: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39315: LD_ADDR_VAR 0 3
39319: PUSH
39320: LD_INT 21
39322: PUSH
39323: LD_INT 22
39325: PUSH
39326: LD_INT 23
39328: PUSH
39329: LD_INT 24
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: ST_TO_ADDR
39338: GO 39487
39340: LD_INT 51
39342: DOUBLE
39343: EQUAL
39344: IFTRUE 39348
39346: GO 39374
39348: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39349: LD_ADDR_VAR 0 3
39353: PUSH
39354: LD_INT 21
39356: PUSH
39357: LD_INT 22
39359: PUSH
39360: LD_INT 23
39362: PUSH
39363: LD_INT 24
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: ST_TO_ADDR
39372: GO 39487
39374: LD_INT 52
39376: DOUBLE
39377: EQUAL
39378: IFTRUE 39382
39380: GO 39408
39382: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39383: LD_ADDR_VAR 0 3
39387: PUSH
39388: LD_INT 21
39390: PUSH
39391: LD_INT 22
39393: PUSH
39394: LD_INT 23
39396: PUSH
39397: LD_INT 24
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: ST_TO_ADDR
39406: GO 39487
39408: LD_INT 53
39410: DOUBLE
39411: EQUAL
39412: IFTRUE 39416
39414: GO 39434
39416: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39417: LD_ADDR_VAR 0 3
39421: PUSH
39422: LD_INT 23
39424: PUSH
39425: LD_INT 24
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: ST_TO_ADDR
39432: GO 39487
39434: LD_INT 46
39436: DOUBLE
39437: EQUAL
39438: IFTRUE 39442
39440: GO 39460
39442: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39443: LD_ADDR_VAR 0 3
39447: PUSH
39448: LD_INT 23
39450: PUSH
39451: LD_INT 24
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: ST_TO_ADDR
39458: GO 39487
39460: LD_INT 47
39462: DOUBLE
39463: EQUAL
39464: IFTRUE 39468
39466: GO 39486
39468: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39469: LD_ADDR_VAR 0 3
39473: PUSH
39474: LD_INT 23
39476: PUSH
39477: LD_INT 24
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: ST_TO_ADDR
39484: GO 39487
39486: POP
// result := ( chassis in result ) ;
39487: LD_ADDR_VAR 0 3
39491: PUSH
39492: LD_VAR 0 1
39496: PUSH
39497: LD_VAR 0 3
39501: IN
39502: ST_TO_ADDR
// end ;
39503: LD_VAR 0 3
39507: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39508: LD_INT 0
39510: PPUSH
39511: PPUSH
39512: PPUSH
39513: PPUSH
39514: PPUSH
39515: PPUSH
39516: PPUSH
// result := array ;
39517: LD_ADDR_VAR 0 5
39521: PUSH
39522: LD_VAR 0 1
39526: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39527: LD_VAR 0 1
39531: NOT
39532: IFTRUE 39541
39534: PUSH
39535: LD_VAR 0 2
39539: NOT
39540: OR
39541: IFTRUE 39550
39543: PUSH
39544: LD_VAR 0 3
39548: NOT
39549: OR
39550: IFTRUE 39564
39552: PUSH
39553: LD_VAR 0 2
39557: PUSH
39558: LD_VAR 0 1
39562: GREATER
39563: OR
39564: IFTRUE 39578
39566: PUSH
39567: LD_VAR 0 3
39571: PUSH
39572: LD_VAR 0 1
39576: GREATER
39577: OR
39578: IFFALSE 39582
// exit ;
39580: GO 39878
// if direction then
39582: LD_VAR 0 4
39586: IFFALSE 39650
// begin d := 1 ;
39588: LD_ADDR_VAR 0 9
39592: PUSH
39593: LD_INT 1
39595: ST_TO_ADDR
// if i_from > i_to then
39596: LD_VAR 0 2
39600: PUSH
39601: LD_VAR 0 3
39605: GREATER
39606: IFFALSE 39632
// length := ( array - i_from ) + i_to else
39608: LD_ADDR_VAR 0 11
39612: PUSH
39613: LD_VAR 0 1
39617: PUSH
39618: LD_VAR 0 2
39622: MINUS
39623: PUSH
39624: LD_VAR 0 3
39628: PLUS
39629: ST_TO_ADDR
39630: GO 39648
// length := i_to - i_from ;
39632: LD_ADDR_VAR 0 11
39636: PUSH
39637: LD_VAR 0 3
39641: PUSH
39642: LD_VAR 0 2
39646: MINUS
39647: ST_TO_ADDR
// end else
39648: GO 39711
// begin d := - 1 ;
39650: LD_ADDR_VAR 0 9
39654: PUSH
39655: LD_INT 1
39657: NEG
39658: ST_TO_ADDR
// if i_from > i_to then
39659: LD_VAR 0 2
39663: PUSH
39664: LD_VAR 0 3
39668: GREATER
39669: IFFALSE 39689
// length := i_from - i_to else
39671: LD_ADDR_VAR 0 11
39675: PUSH
39676: LD_VAR 0 2
39680: PUSH
39681: LD_VAR 0 3
39685: MINUS
39686: ST_TO_ADDR
39687: GO 39711
// length := ( array - i_to ) + i_from ;
39689: LD_ADDR_VAR 0 11
39693: PUSH
39694: LD_VAR 0 1
39698: PUSH
39699: LD_VAR 0 3
39703: MINUS
39704: PUSH
39705: LD_VAR 0 2
39709: PLUS
39710: ST_TO_ADDR
// end ; if not length then
39711: LD_VAR 0 11
39715: NOT
39716: IFFALSE 39720
// exit ;
39718: GO 39878
// tmp := array ;
39720: LD_ADDR_VAR 0 10
39724: PUSH
39725: LD_VAR 0 1
39729: ST_TO_ADDR
// for i = 1 to length do
39730: LD_ADDR_VAR 0 6
39734: PUSH
39735: DOUBLE
39736: LD_INT 1
39738: DEC
39739: ST_TO_ADDR
39740: LD_VAR 0 11
39744: PUSH
39745: FOR_TO
39746: IFFALSE 39866
// begin for j = 1 to array do
39748: LD_ADDR_VAR 0 7
39752: PUSH
39753: DOUBLE
39754: LD_INT 1
39756: DEC
39757: ST_TO_ADDR
39758: LD_VAR 0 1
39762: PUSH
39763: FOR_TO
39764: IFFALSE 39852
// begin k := j + d ;
39766: LD_ADDR_VAR 0 8
39770: PUSH
39771: LD_VAR 0 7
39775: PUSH
39776: LD_VAR 0 9
39780: PLUS
39781: ST_TO_ADDR
// if k > array then
39782: LD_VAR 0 8
39786: PUSH
39787: LD_VAR 0 1
39791: GREATER
39792: IFFALSE 39802
// k := 1 ;
39794: LD_ADDR_VAR 0 8
39798: PUSH
39799: LD_INT 1
39801: ST_TO_ADDR
// if not k then
39802: LD_VAR 0 8
39806: NOT
39807: IFFALSE 39819
// k := array ;
39809: LD_ADDR_VAR 0 8
39813: PUSH
39814: LD_VAR 0 1
39818: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
39819: LD_ADDR_VAR 0 10
39823: PUSH
39824: LD_VAR 0 10
39828: PPUSH
39829: LD_VAR 0 8
39833: PPUSH
39834: LD_VAR 0 1
39838: PUSH
39839: LD_VAR 0 7
39843: ARRAY
39844: PPUSH
39845: CALL_OW 1
39849: ST_TO_ADDR
// end ;
39850: GO 39763
39852: POP
39853: POP
// array := tmp ;
39854: LD_ADDR_VAR 0 1
39858: PUSH
39859: LD_VAR 0 10
39863: ST_TO_ADDR
// end ;
39864: GO 39745
39866: POP
39867: POP
// result := array ;
39868: LD_ADDR_VAR 0 5
39872: PUSH
39873: LD_VAR 0 1
39877: ST_TO_ADDR
// end ;
39878: LD_VAR 0 5
39882: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
39883: LD_INT 0
39885: PPUSH
39886: PPUSH
// result := 0 ;
39887: LD_ADDR_VAR 0 3
39891: PUSH
39892: LD_INT 0
39894: ST_TO_ADDR
// if not array or not value in array then
39895: LD_VAR 0 1
39899: NOT
39900: IFTRUE 39915
39902: PUSH
39903: LD_VAR 0 2
39907: PUSH
39908: LD_VAR 0 1
39912: IN
39913: NOT
39914: OR
39915: IFFALSE 39919
// exit ;
39917: GO 39973
// for i = 1 to array do
39919: LD_ADDR_VAR 0 4
39923: PUSH
39924: DOUBLE
39925: LD_INT 1
39927: DEC
39928: ST_TO_ADDR
39929: LD_VAR 0 1
39933: PUSH
39934: FOR_TO
39935: IFFALSE 39971
// if value = array [ i ] then
39937: LD_VAR 0 2
39941: PUSH
39942: LD_VAR 0 1
39946: PUSH
39947: LD_VAR 0 4
39951: ARRAY
39952: EQUAL
39953: IFFALSE 39969
// begin result := i ;
39955: LD_ADDR_VAR 0 3
39959: PUSH
39960: LD_VAR 0 4
39964: ST_TO_ADDR
// exit ;
39965: POP
39966: POP
39967: GO 39973
// end ;
39969: GO 39934
39971: POP
39972: POP
// end ;
39973: LD_VAR 0 3
39977: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39978: LD_INT 0
39980: PPUSH
// vc_chassis := chassis ;
39981: LD_ADDR_OWVAR 37
39985: PUSH
39986: LD_VAR 0 1
39990: ST_TO_ADDR
// vc_engine := engine ;
39991: LD_ADDR_OWVAR 39
39995: PUSH
39996: LD_VAR 0 2
40000: ST_TO_ADDR
// vc_control := control ;
40001: LD_ADDR_OWVAR 38
40005: PUSH
40006: LD_VAR 0 3
40010: ST_TO_ADDR
// vc_weapon := weapon ;
40011: LD_ADDR_OWVAR 40
40015: PUSH
40016: LD_VAR 0 4
40020: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40021: LD_ADDR_OWVAR 41
40025: PUSH
40026: LD_VAR 0 5
40030: ST_TO_ADDR
// end ;
40031: LD_VAR 0 6
40035: RET
// export function WantPlant ( unit ) ; var task ; begin
40036: LD_INT 0
40038: PPUSH
40039: PPUSH
// result := false ;
40040: LD_ADDR_VAR 0 2
40044: PUSH
40045: LD_INT 0
40047: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40048: LD_ADDR_VAR 0 3
40052: PUSH
40053: LD_VAR 0 1
40057: PPUSH
40058: CALL_OW 437
40062: ST_TO_ADDR
// if task then
40063: LD_VAR 0 3
40067: IFFALSE 40095
// if task [ 1 ] [ 1 ] = p then
40069: LD_VAR 0 3
40073: PUSH
40074: LD_INT 1
40076: ARRAY
40077: PUSH
40078: LD_INT 1
40080: ARRAY
40081: PUSH
40082: LD_STRING p
40084: EQUAL
40085: IFFALSE 40095
// result := true ;
40087: LD_ADDR_VAR 0 2
40091: PUSH
40092: LD_INT 1
40094: ST_TO_ADDR
// end ;
40095: LD_VAR 0 2
40099: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40100: LD_INT 0
40102: PPUSH
40103: PPUSH
40104: PPUSH
40105: PPUSH
// if pos < 1 then
40106: LD_VAR 0 2
40110: PUSH
40111: LD_INT 1
40113: LESS
40114: IFFALSE 40118
// exit ;
40116: GO 40421
// if pos = 1 then
40118: LD_VAR 0 2
40122: PUSH
40123: LD_INT 1
40125: EQUAL
40126: IFFALSE 40159
// result := Replace ( arr , pos [ 1 ] , value ) else
40128: LD_ADDR_VAR 0 4
40132: PUSH
40133: LD_VAR 0 1
40137: PPUSH
40138: LD_VAR 0 2
40142: PUSH
40143: LD_INT 1
40145: ARRAY
40146: PPUSH
40147: LD_VAR 0 3
40151: PPUSH
40152: CALL_OW 1
40156: ST_TO_ADDR
40157: GO 40421
// begin tmp := arr ;
40159: LD_ADDR_VAR 0 6
40163: PUSH
40164: LD_VAR 0 1
40168: ST_TO_ADDR
// s_arr := [ tmp ] ;
40169: LD_ADDR_VAR 0 7
40173: PUSH
40174: LD_VAR 0 6
40178: PUSH
40179: EMPTY
40180: LIST
40181: ST_TO_ADDR
// for i = 1 to pos - 1 do
40182: LD_ADDR_VAR 0 5
40186: PUSH
40187: DOUBLE
40188: LD_INT 1
40190: DEC
40191: ST_TO_ADDR
40192: LD_VAR 0 2
40196: PUSH
40197: LD_INT 1
40199: MINUS
40200: PUSH
40201: FOR_TO
40202: IFFALSE 40247
// begin tmp := tmp [ pos [ i ] ] ;
40204: LD_ADDR_VAR 0 6
40208: PUSH
40209: LD_VAR 0 6
40213: PUSH
40214: LD_VAR 0 2
40218: PUSH
40219: LD_VAR 0 5
40223: ARRAY
40224: ARRAY
40225: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40226: LD_ADDR_VAR 0 7
40230: PUSH
40231: LD_VAR 0 7
40235: PUSH
40236: LD_VAR 0 6
40240: PUSH
40241: EMPTY
40242: LIST
40243: ADD
40244: ST_TO_ADDR
// end ;
40245: GO 40201
40247: POP
40248: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40249: LD_ADDR_VAR 0 6
40253: PUSH
40254: LD_VAR 0 6
40258: PPUSH
40259: LD_VAR 0 2
40263: PUSH
40264: LD_VAR 0 2
40268: ARRAY
40269: PPUSH
40270: LD_VAR 0 3
40274: PPUSH
40275: CALL_OW 1
40279: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40280: LD_ADDR_VAR 0 7
40284: PUSH
40285: LD_VAR 0 7
40289: PPUSH
40290: LD_VAR 0 7
40294: PPUSH
40295: LD_VAR 0 6
40299: PPUSH
40300: CALL_OW 1
40304: ST_TO_ADDR
// for i = s_arr downto 2 do
40305: LD_ADDR_VAR 0 5
40309: PUSH
40310: DOUBLE
40311: LD_VAR 0 7
40315: INC
40316: ST_TO_ADDR
40317: LD_INT 2
40319: PUSH
40320: FOR_DOWNTO
40321: IFFALSE 40405
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40323: LD_ADDR_VAR 0 6
40327: PUSH
40328: LD_VAR 0 7
40332: PUSH
40333: LD_VAR 0 5
40337: PUSH
40338: LD_INT 1
40340: MINUS
40341: ARRAY
40342: PPUSH
40343: LD_VAR 0 2
40347: PUSH
40348: LD_VAR 0 5
40352: PUSH
40353: LD_INT 1
40355: MINUS
40356: ARRAY
40357: PPUSH
40358: LD_VAR 0 7
40362: PUSH
40363: LD_VAR 0 5
40367: ARRAY
40368: PPUSH
40369: CALL_OW 1
40373: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40374: LD_ADDR_VAR 0 7
40378: PUSH
40379: LD_VAR 0 7
40383: PPUSH
40384: LD_VAR 0 5
40388: PUSH
40389: LD_INT 1
40391: MINUS
40392: PPUSH
40393: LD_VAR 0 6
40397: PPUSH
40398: CALL_OW 1
40402: ST_TO_ADDR
// end ;
40403: GO 40320
40405: POP
40406: POP
// result := s_arr [ 1 ] ;
40407: LD_ADDR_VAR 0 4
40411: PUSH
40412: LD_VAR 0 7
40416: PUSH
40417: LD_INT 1
40419: ARRAY
40420: ST_TO_ADDR
// end ; end ;
40421: LD_VAR 0 4
40425: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40426: LD_INT 0
40428: PPUSH
40429: PPUSH
// if not list then
40430: LD_VAR 0 1
40434: NOT
40435: IFFALSE 40439
// exit ;
40437: GO 40530
// i := list [ pos1 ] ;
40439: LD_ADDR_VAR 0 5
40443: PUSH
40444: LD_VAR 0 1
40448: PUSH
40449: LD_VAR 0 2
40453: ARRAY
40454: ST_TO_ADDR
// if not i then
40455: LD_VAR 0 5
40459: NOT
40460: IFFALSE 40464
// exit ;
40462: GO 40530
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40464: LD_ADDR_VAR 0 1
40468: PUSH
40469: LD_VAR 0 1
40473: PPUSH
40474: LD_VAR 0 2
40478: PPUSH
40479: LD_VAR 0 1
40483: PUSH
40484: LD_VAR 0 3
40488: ARRAY
40489: PPUSH
40490: CALL_OW 1
40494: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40495: LD_ADDR_VAR 0 1
40499: PUSH
40500: LD_VAR 0 1
40504: PPUSH
40505: LD_VAR 0 3
40509: PPUSH
40510: LD_VAR 0 5
40514: PPUSH
40515: CALL_OW 1
40519: ST_TO_ADDR
// result := list ;
40520: LD_ADDR_VAR 0 4
40524: PUSH
40525: LD_VAR 0 1
40529: ST_TO_ADDR
// end ;
40530: LD_VAR 0 4
40534: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40535: LD_INT 0
40537: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40538: LD_ADDR_VAR 0 5
40542: PUSH
40543: LD_VAR 0 1
40547: PPUSH
40548: CALL_OW 250
40552: PPUSH
40553: LD_VAR 0 1
40557: PPUSH
40558: CALL_OW 251
40562: PPUSH
40563: LD_VAR 0 2
40567: PPUSH
40568: LD_VAR 0 3
40572: PPUSH
40573: LD_VAR 0 4
40577: PPUSH
40578: CALL 40960 0 5
40582: ST_TO_ADDR
// end ;
40583: LD_VAR 0 5
40587: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
40588: LD_INT 0
40590: PPUSH
40591: PPUSH
40592: PPUSH
40593: PPUSH
// if not list or not unit then
40594: LD_VAR 0 2
40598: NOT
40599: IFTRUE 40608
40601: PUSH
40602: LD_VAR 0 1
40606: NOT
40607: OR
40608: IFFALSE 40612
// exit ;
40610: GO 40955
// result := [ ] ;
40612: LD_ADDR_VAR 0 5
40616: PUSH
40617: EMPTY
40618: ST_TO_ADDR
// for i in list do
40619: LD_ADDR_VAR 0 6
40623: PUSH
40624: LD_VAR 0 2
40628: PUSH
40629: FOR_IN
40630: IFFALSE 40848
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
40632: LD_ADDR_VAR 0 8
40636: PUSH
40637: LD_VAR 0 1
40641: PPUSH
40642: LD_VAR 0 6
40646: PUSH
40647: LD_INT 1
40649: ARRAY
40650: PPUSH
40651: LD_VAR 0 6
40655: PUSH
40656: LD_INT 2
40658: ARRAY
40659: PPUSH
40660: CALL_OW 297
40664: ST_TO_ADDR
// if not Count ( result ) then
40665: LD_VAR 0 5
40669: PPUSH
40670: CALL 37216 0 1
40674: NOT
40675: IFFALSE 40708
// begin result := Join ( result , [ i , tmp ] ) ;
40677: LD_ADDR_VAR 0 5
40681: PUSH
40682: LD_VAR 0 5
40686: PPUSH
40687: LD_VAR 0 6
40691: PUSH
40692: LD_VAR 0 8
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PPUSH
40701: CALL 73148 0 2
40705: ST_TO_ADDR
// continue ;
40706: GO 40629
// end ; if result [ result ] [ 2 ] <= tmp then
40708: LD_VAR 0 5
40712: PUSH
40713: LD_VAR 0 5
40717: ARRAY
40718: PUSH
40719: LD_INT 2
40721: ARRAY
40722: PUSH
40723: LD_VAR 0 8
40727: LESSEQUAL
40728: IFFALSE 40761
// result := Join ( result , [ i , tmp ] ) else
40730: LD_ADDR_VAR 0 5
40734: PUSH
40735: LD_VAR 0 5
40739: PPUSH
40740: LD_VAR 0 6
40744: PUSH
40745: LD_VAR 0 8
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PPUSH
40754: CALL 73148 0 2
40758: ST_TO_ADDR
40759: GO 40846
// begin for j := 1 to Count ( result ) do
40761: LD_ADDR_VAR 0 7
40765: PUSH
40766: DOUBLE
40767: LD_INT 1
40769: DEC
40770: ST_TO_ADDR
40771: LD_VAR 0 5
40775: PPUSH
40776: CALL 37216 0 1
40780: PUSH
40781: FOR_TO
40782: IFFALSE 40844
// begin if tmp < result [ j ] [ 2 ] then
40784: LD_VAR 0 8
40788: PUSH
40789: LD_VAR 0 5
40793: PUSH
40794: LD_VAR 0 7
40798: ARRAY
40799: PUSH
40800: LD_INT 2
40802: ARRAY
40803: LESS
40804: IFFALSE 40842
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40806: LD_ADDR_VAR 0 5
40810: PUSH
40811: LD_VAR 0 5
40815: PPUSH
40816: LD_VAR 0 7
40820: PPUSH
40821: LD_VAR 0 6
40825: PUSH
40826: LD_VAR 0 8
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PPUSH
40835: CALL_OW 2
40839: ST_TO_ADDR
// break ;
40840: GO 40844
// end ; end ;
40842: GO 40781
40844: POP
40845: POP
// end ; end ;
40846: GO 40629
40848: POP
40849: POP
// if result and not asc then
40850: LD_VAR 0 5
40854: IFFALSE 40863
40856: PUSH
40857: LD_VAR 0 3
40861: NOT
40862: AND
40863: IFFALSE 40880
// result := ReverseArray ( result ) ;
40865: LD_ADDR_VAR 0 5
40869: PUSH
40870: LD_VAR 0 5
40874: PPUSH
40875: CALL 68238 0 1
40879: ST_TO_ADDR
// tmp := [ ] ;
40880: LD_ADDR_VAR 0 8
40884: PUSH
40885: EMPTY
40886: ST_TO_ADDR
// if mode then
40887: LD_VAR 0 4
40891: IFFALSE 40955
// begin for i := 1 to result do
40893: LD_ADDR_VAR 0 6
40897: PUSH
40898: DOUBLE
40899: LD_INT 1
40901: DEC
40902: ST_TO_ADDR
40903: LD_VAR 0 5
40907: PUSH
40908: FOR_TO
40909: IFFALSE 40943
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
40911: LD_ADDR_VAR 0 8
40915: PUSH
40916: LD_VAR 0 8
40920: PPUSH
40921: LD_VAR 0 5
40925: PUSH
40926: LD_VAR 0 6
40930: ARRAY
40931: PUSH
40932: LD_INT 1
40934: ARRAY
40935: PPUSH
40936: CALL 73148 0 2
40940: ST_TO_ADDR
40941: GO 40908
40943: POP
40944: POP
// result := tmp ;
40945: LD_ADDR_VAR 0 5
40949: PUSH
40950: LD_VAR 0 8
40954: ST_TO_ADDR
// end ; end ;
40955: LD_VAR 0 5
40959: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
40960: LD_INT 0
40962: PPUSH
40963: PPUSH
40964: PPUSH
40965: PPUSH
// if not list then
40966: LD_VAR 0 3
40970: NOT
40971: IFFALSE 40975
// exit ;
40973: GO 41365
// result := [ ] ;
40975: LD_ADDR_VAR 0 6
40979: PUSH
40980: EMPTY
40981: ST_TO_ADDR
// for i in list do
40982: LD_ADDR_VAR 0 7
40986: PUSH
40987: LD_VAR 0 3
40991: PUSH
40992: FOR_IN
40993: IFFALSE 41195
// begin tmp := GetDistUnitXY ( i , x , y ) ;
40995: LD_ADDR_VAR 0 9
40999: PUSH
41000: LD_VAR 0 7
41004: PPUSH
41005: LD_VAR 0 1
41009: PPUSH
41010: LD_VAR 0 2
41014: PPUSH
41015: CALL_OW 297
41019: ST_TO_ADDR
// if not result then
41020: LD_VAR 0 6
41024: NOT
41025: IFFALSE 41051
// result := [ [ i , tmp ] ] else
41027: LD_ADDR_VAR 0 6
41031: PUSH
41032: LD_VAR 0 7
41036: PUSH
41037: LD_VAR 0 9
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: EMPTY
41047: LIST
41048: ST_TO_ADDR
41049: GO 41193
// begin if result [ result ] [ 2 ] <= tmp then
41051: LD_VAR 0 6
41055: PUSH
41056: LD_VAR 0 6
41060: ARRAY
41061: PUSH
41062: LD_INT 2
41064: ARRAY
41065: PUSH
41066: LD_VAR 0 9
41070: LESSEQUAL
41071: IFFALSE 41113
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41073: LD_ADDR_VAR 0 6
41077: PUSH
41078: LD_VAR 0 6
41082: PPUSH
41083: LD_VAR 0 6
41087: PUSH
41088: LD_INT 1
41090: PLUS
41091: PPUSH
41092: LD_VAR 0 7
41096: PUSH
41097: LD_VAR 0 9
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PPUSH
41106: CALL_OW 2
41110: ST_TO_ADDR
41111: GO 41193
// for j := 1 to result do
41113: LD_ADDR_VAR 0 8
41117: PUSH
41118: DOUBLE
41119: LD_INT 1
41121: DEC
41122: ST_TO_ADDR
41123: LD_VAR 0 6
41127: PUSH
41128: FOR_TO
41129: IFFALSE 41191
// begin if tmp < result [ j ] [ 2 ] then
41131: LD_VAR 0 9
41135: PUSH
41136: LD_VAR 0 6
41140: PUSH
41141: LD_VAR 0 8
41145: ARRAY
41146: PUSH
41147: LD_INT 2
41149: ARRAY
41150: LESS
41151: IFFALSE 41189
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41153: LD_ADDR_VAR 0 6
41157: PUSH
41158: LD_VAR 0 6
41162: PPUSH
41163: LD_VAR 0 8
41167: PPUSH
41168: LD_VAR 0 7
41172: PUSH
41173: LD_VAR 0 9
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PPUSH
41182: CALL_OW 2
41186: ST_TO_ADDR
// break ;
41187: GO 41191
// end ; end ;
41189: GO 41128
41191: POP
41192: POP
// end ; end ;
41193: GO 40992
41195: POP
41196: POP
// if result and not asc then
41197: LD_VAR 0 6
41201: IFFALSE 41210
41203: PUSH
41204: LD_VAR 0 4
41208: NOT
41209: AND
41210: IFFALSE 41285
// begin tmp := result ;
41212: LD_ADDR_VAR 0 9
41216: PUSH
41217: LD_VAR 0 6
41221: ST_TO_ADDR
// for i = tmp downto 1 do
41222: LD_ADDR_VAR 0 7
41226: PUSH
41227: DOUBLE
41228: LD_VAR 0 9
41232: INC
41233: ST_TO_ADDR
41234: LD_INT 1
41236: PUSH
41237: FOR_DOWNTO
41238: IFFALSE 41283
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41240: LD_ADDR_VAR 0 6
41244: PUSH
41245: LD_VAR 0 6
41249: PPUSH
41250: LD_VAR 0 9
41254: PUSH
41255: LD_VAR 0 7
41259: MINUS
41260: PUSH
41261: LD_INT 1
41263: PLUS
41264: PPUSH
41265: LD_VAR 0 9
41269: PUSH
41270: LD_VAR 0 7
41274: ARRAY
41275: PPUSH
41276: CALL_OW 1
41280: ST_TO_ADDR
41281: GO 41237
41283: POP
41284: POP
// end ; tmp := [ ] ;
41285: LD_ADDR_VAR 0 9
41289: PUSH
41290: EMPTY
41291: ST_TO_ADDR
// if mode then
41292: LD_VAR 0 5
41296: IFFALSE 41365
// begin for i = 1 to result do
41298: LD_ADDR_VAR 0 7
41302: PUSH
41303: DOUBLE
41304: LD_INT 1
41306: DEC
41307: ST_TO_ADDR
41308: LD_VAR 0 6
41312: PUSH
41313: FOR_TO
41314: IFFALSE 41353
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41316: LD_ADDR_VAR 0 9
41320: PUSH
41321: LD_VAR 0 9
41325: PPUSH
41326: LD_VAR 0 7
41330: PPUSH
41331: LD_VAR 0 6
41335: PUSH
41336: LD_VAR 0 7
41340: ARRAY
41341: PUSH
41342: LD_INT 1
41344: ARRAY
41345: PPUSH
41346: CALL_OW 1
41350: ST_TO_ADDR
41351: GO 41313
41353: POP
41354: POP
// result := tmp ;
41355: LD_ADDR_VAR 0 6
41359: PUSH
41360: LD_VAR 0 9
41364: ST_TO_ADDR
// end ; end ;
41365: LD_VAR 0 6
41369: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41370: LD_INT 0
41372: PPUSH
41373: PPUSH
41374: PPUSH
41375: PPUSH
41376: PPUSH
41377: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41378: LD_ADDR_VAR 0 5
41382: PUSH
41383: LD_INT 0
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: EMPTY
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: ST_TO_ADDR
// if not x or not y then
41400: LD_VAR 0 2
41404: NOT
41405: IFTRUE 41414
41407: PUSH
41408: LD_VAR 0 3
41412: NOT
41413: OR
41414: IFFALSE 41418
// exit ;
41416: GO 43074
// if not range then
41418: LD_VAR 0 4
41422: NOT
41423: IFFALSE 41433
// range := 10 ;
41425: LD_ADDR_VAR 0 4
41429: PUSH
41430: LD_INT 10
41432: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41433: LD_ADDR_VAR 0 8
41437: PUSH
41438: LD_INT 81
41440: PUSH
41441: LD_VAR 0 1
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 92
41452: PUSH
41453: LD_VAR 0 2
41457: PUSH
41458: LD_VAR 0 3
41462: PUSH
41463: LD_VAR 0 4
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 3
41476: PUSH
41477: LD_INT 21
41479: PUSH
41480: LD_INT 3
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: LIST
41495: PPUSH
41496: CALL_OW 69
41500: ST_TO_ADDR
// if not tmp then
41501: LD_VAR 0 8
41505: NOT
41506: IFFALSE 41510
// exit ;
41508: GO 43074
// for i in tmp do
41510: LD_ADDR_VAR 0 6
41514: PUSH
41515: LD_VAR 0 8
41519: PUSH
41520: FOR_IN
41521: IFFALSE 43049
// begin points := [ 0 , 0 , 0 ] ;
41523: LD_ADDR_VAR 0 9
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: LD_INT 0
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: LIST
41541: ST_TO_ADDR
// bpoints := 1 ;
41542: LD_ADDR_VAR 0 10
41546: PUSH
41547: LD_INT 1
41549: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41550: LD_VAR 0 6
41554: PPUSH
41555: CALL_OW 247
41559: PUSH
41560: LD_INT 1
41562: DOUBLE
41563: EQUAL
41564: IFTRUE 41568
41566: GO 42150
41568: POP
// begin if GetClass ( i ) = 1 then
41569: LD_VAR 0 6
41573: PPUSH
41574: CALL_OW 257
41578: PUSH
41579: LD_INT 1
41581: EQUAL
41582: IFFALSE 41603
// points := [ 10 , 5 , 3 ] ;
41584: LD_ADDR_VAR 0 9
41588: PUSH
41589: LD_INT 10
41591: PUSH
41592: LD_INT 5
41594: PUSH
41595: LD_INT 3
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: LIST
41602: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41603: LD_VAR 0 6
41607: PPUSH
41608: CALL_OW 257
41612: PUSH
41613: LD_INT 2
41615: PUSH
41616: LD_INT 3
41618: PUSH
41619: LD_INT 4
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: LIST
41626: IN
41627: IFFALSE 41648
// points := [ 3 , 2 , 1 ] ;
41629: LD_ADDR_VAR 0 9
41633: PUSH
41634: LD_INT 3
41636: PUSH
41637: LD_INT 2
41639: PUSH
41640: LD_INT 1
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: LIST
41647: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41648: LD_VAR 0 6
41652: PPUSH
41653: CALL_OW 257
41657: PUSH
41658: LD_INT 5
41660: EQUAL
41661: IFFALSE 41682
// points := [ 130 , 5 , 2 ] ;
41663: LD_ADDR_VAR 0 9
41667: PUSH
41668: LD_INT 130
41670: PUSH
41671: LD_INT 5
41673: PUSH
41674: LD_INT 2
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: LIST
41681: ST_TO_ADDR
// if GetClass ( i ) = 8 then
41682: LD_VAR 0 6
41686: PPUSH
41687: CALL_OW 257
41691: PUSH
41692: LD_INT 8
41694: EQUAL
41695: IFFALSE 41716
// points := [ 35 , 35 , 30 ] ;
41697: LD_ADDR_VAR 0 9
41701: PUSH
41702: LD_INT 35
41704: PUSH
41705: LD_INT 35
41707: PUSH
41708: LD_INT 30
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: LIST
41715: ST_TO_ADDR
// if GetClass ( i ) = 9 then
41716: LD_VAR 0 6
41720: PPUSH
41721: CALL_OW 257
41725: PUSH
41726: LD_INT 9
41728: EQUAL
41729: IFFALSE 41750
// points := [ 20 , 55 , 40 ] ;
41731: LD_ADDR_VAR 0 9
41735: PUSH
41736: LD_INT 20
41738: PUSH
41739: LD_INT 55
41741: PUSH
41742: LD_INT 40
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: LIST
41749: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
41750: LD_VAR 0 6
41754: PPUSH
41755: CALL_OW 257
41759: PUSH
41760: LD_INT 12
41762: PUSH
41763: LD_INT 16
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: IN
41770: IFFALSE 41791
// points := [ 5 , 3 , 2 ] ;
41772: LD_ADDR_VAR 0 9
41776: PUSH
41777: LD_INT 5
41779: PUSH
41780: LD_INT 3
41782: PUSH
41783: LD_INT 2
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: LIST
41790: ST_TO_ADDR
// if GetClass ( i ) = 17 then
41791: LD_VAR 0 6
41795: PPUSH
41796: CALL_OW 257
41800: PUSH
41801: LD_INT 17
41803: EQUAL
41804: IFFALSE 41825
// points := [ 100 , 50 , 75 ] ;
41806: LD_ADDR_VAR 0 9
41810: PUSH
41811: LD_INT 100
41813: PUSH
41814: LD_INT 50
41816: PUSH
41817: LD_INT 75
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: LIST
41824: ST_TO_ADDR
// if GetClass ( i ) = 15 then
41825: LD_VAR 0 6
41829: PPUSH
41830: CALL_OW 257
41834: PUSH
41835: LD_INT 15
41837: EQUAL
41838: IFFALSE 41859
// points := [ 10 , 5 , 3 ] ;
41840: LD_ADDR_VAR 0 9
41844: PUSH
41845: LD_INT 10
41847: PUSH
41848: LD_INT 5
41850: PUSH
41851: LD_INT 3
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: LIST
41858: ST_TO_ADDR
// if GetClass ( i ) = 14 then
41859: LD_VAR 0 6
41863: PPUSH
41864: CALL_OW 257
41868: PUSH
41869: LD_INT 14
41871: EQUAL
41872: IFFALSE 41893
// points := [ 10 , 0 , 0 ] ;
41874: LD_ADDR_VAR 0 9
41878: PUSH
41879: LD_INT 10
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: LIST
41892: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41893: LD_VAR 0 6
41897: PPUSH
41898: CALL_OW 257
41902: PUSH
41903: LD_INT 11
41905: EQUAL
41906: IFFALSE 41927
// points := [ 30 , 10 , 5 ] ;
41908: LD_ADDR_VAR 0 9
41912: PUSH
41913: LD_INT 30
41915: PUSH
41916: LD_INT 10
41918: PUSH
41919: LD_INT 5
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: LIST
41926: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
41927: LD_VAR 0 1
41931: PPUSH
41932: LD_INT 5
41934: PPUSH
41935: CALL_OW 321
41939: PUSH
41940: LD_INT 2
41942: EQUAL
41943: IFFALSE 41960
// bpoints := bpoints * 1.8 ;
41945: LD_ADDR_VAR 0 10
41949: PUSH
41950: LD_VAR 0 10
41954: PUSH
41955: LD_REAL  1.80000000000000E+0000
41958: MUL
41959: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
41960: LD_VAR 0 6
41964: PPUSH
41965: CALL_OW 257
41969: PUSH
41970: LD_INT 1
41972: PUSH
41973: LD_INT 2
41975: PUSH
41976: LD_INT 3
41978: PUSH
41979: LD_INT 4
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: IN
41988: IFFALSE 42008
41990: PUSH
41991: LD_VAR 0 1
41995: PPUSH
41996: LD_INT 51
41998: PPUSH
41999: CALL_OW 321
42003: PUSH
42004: LD_INT 2
42006: EQUAL
42007: AND
42008: IFFALSE 42025
// bpoints := bpoints * 1.2 ;
42010: LD_ADDR_VAR 0 10
42014: PUSH
42015: LD_VAR 0 10
42019: PUSH
42020: LD_REAL  1.20000000000000E+0000
42023: MUL
42024: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42025: LD_VAR 0 6
42029: PPUSH
42030: CALL_OW 257
42034: PUSH
42035: LD_INT 5
42037: PUSH
42038: LD_INT 7
42040: PUSH
42041: LD_INT 9
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: LIST
42048: IN
42049: IFFALSE 42069
42051: PUSH
42052: LD_VAR 0 1
42056: PPUSH
42057: LD_INT 52
42059: PPUSH
42060: CALL_OW 321
42064: PUSH
42065: LD_INT 2
42067: EQUAL
42068: AND
42069: IFFALSE 42086
// bpoints := bpoints * 1.5 ;
42071: LD_ADDR_VAR 0 10
42075: PUSH
42076: LD_VAR 0 10
42080: PUSH
42081: LD_REAL  1.50000000000000E+0000
42084: MUL
42085: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42086: LD_VAR 0 1
42090: PPUSH
42091: LD_INT 66
42093: PPUSH
42094: CALL_OW 321
42098: PUSH
42099: LD_INT 2
42101: EQUAL
42102: IFFALSE 42119
// bpoints := bpoints * 1.1 ;
42104: LD_ADDR_VAR 0 10
42108: PUSH
42109: LD_VAR 0 10
42113: PUSH
42114: LD_REAL  1.10000000000000E+0000
42117: MUL
42118: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42119: LD_ADDR_VAR 0 10
42123: PUSH
42124: LD_VAR 0 10
42128: PUSH
42129: LD_VAR 0 6
42133: PPUSH
42134: LD_INT 1
42136: PPUSH
42137: CALL_OW 259
42141: PUSH
42142: LD_REAL  1.15000000000000E+0000
42145: MUL
42146: MUL
42147: ST_TO_ADDR
// end ; unit_vehicle :
42148: GO 42978
42150: LD_INT 2
42152: DOUBLE
42153: EQUAL
42154: IFTRUE 42158
42156: GO 42966
42158: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42159: LD_VAR 0 6
42163: PPUSH
42164: CALL_OW 264
42168: PUSH
42169: LD_INT 2
42171: PUSH
42172: LD_INT 42
42174: PUSH
42175: LD_INT 24
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: LIST
42182: IN
42183: IFFALSE 42204
// points := [ 25 , 5 , 3 ] ;
42185: LD_ADDR_VAR 0 9
42189: PUSH
42190: LD_INT 25
42192: PUSH
42193: LD_INT 5
42195: PUSH
42196: LD_INT 3
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: LIST
42203: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42204: LD_VAR 0 6
42208: PPUSH
42209: CALL_OW 264
42213: PUSH
42214: LD_INT 4
42216: PUSH
42217: LD_INT 43
42219: PUSH
42220: LD_INT 25
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: LIST
42227: IN
42228: IFFALSE 42249
// points := [ 40 , 15 , 5 ] ;
42230: LD_ADDR_VAR 0 9
42234: PUSH
42235: LD_INT 40
42237: PUSH
42238: LD_INT 15
42240: PUSH
42241: LD_INT 5
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: LIST
42248: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42249: LD_VAR 0 6
42253: PPUSH
42254: CALL_OW 264
42258: PUSH
42259: LD_INT 3
42261: PUSH
42262: LD_INT 23
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: IN
42269: IFFALSE 42290
// points := [ 7 , 25 , 8 ] ;
42271: LD_ADDR_VAR 0 9
42275: PUSH
42276: LD_INT 7
42278: PUSH
42279: LD_INT 25
42281: PUSH
42282: LD_INT 8
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: LIST
42289: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42290: LD_VAR 0 6
42294: PPUSH
42295: CALL_OW 264
42299: PUSH
42300: LD_INT 5
42302: PUSH
42303: LD_INT 27
42305: PUSH
42306: LD_INT 44
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: LIST
42313: IN
42314: IFFALSE 42335
// points := [ 14 , 50 , 16 ] ;
42316: LD_ADDR_VAR 0 9
42320: PUSH
42321: LD_INT 14
42323: PUSH
42324: LD_INT 50
42326: PUSH
42327: LD_INT 16
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: LIST
42334: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42335: LD_VAR 0 6
42339: PPUSH
42340: CALL_OW 264
42344: PUSH
42345: LD_INT 6
42347: PUSH
42348: LD_INT 46
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: IN
42355: IFFALSE 42376
// points := [ 32 , 120 , 70 ] ;
42357: LD_ADDR_VAR 0 9
42361: PUSH
42362: LD_INT 32
42364: PUSH
42365: LD_INT 120
42367: PUSH
42368: LD_INT 70
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: LIST
42375: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
42376: LD_VAR 0 6
42380: PPUSH
42381: CALL_OW 264
42385: PUSH
42386: LD_INT 7
42388: PUSH
42389: LD_INT 28
42391: PUSH
42392: LD_INT 45
42394: PUSH
42395: LD_INT 92
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: IN
42404: IFFALSE 42425
// points := [ 35 , 20 , 45 ] ;
42406: LD_ADDR_VAR 0 9
42410: PUSH
42411: LD_INT 35
42413: PUSH
42414: LD_INT 20
42416: PUSH
42417: LD_INT 45
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: LIST
42424: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42425: LD_VAR 0 6
42429: PPUSH
42430: CALL_OW 264
42434: PUSH
42435: LD_INT 47
42437: PUSH
42438: EMPTY
42439: LIST
42440: IN
42441: IFFALSE 42462
// points := [ 67 , 45 , 75 ] ;
42443: LD_ADDR_VAR 0 9
42447: PUSH
42448: LD_INT 67
42450: PUSH
42451: LD_INT 45
42453: PUSH
42454: LD_INT 75
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: LIST
42461: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42462: LD_VAR 0 6
42466: PPUSH
42467: CALL_OW 264
42471: PUSH
42472: LD_INT 26
42474: PUSH
42475: EMPTY
42476: LIST
42477: IN
42478: IFFALSE 42499
// points := [ 120 , 30 , 80 ] ;
42480: LD_ADDR_VAR 0 9
42484: PUSH
42485: LD_INT 120
42487: PUSH
42488: LD_INT 30
42490: PUSH
42491: LD_INT 80
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: LIST
42498: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42499: LD_VAR 0 6
42503: PPUSH
42504: CALL_OW 264
42508: PUSH
42509: LD_INT 22
42511: PUSH
42512: EMPTY
42513: LIST
42514: IN
42515: IFFALSE 42536
// points := [ 40 , 1 , 1 ] ;
42517: LD_ADDR_VAR 0 9
42521: PUSH
42522: LD_INT 40
42524: PUSH
42525: LD_INT 1
42527: PUSH
42528: LD_INT 1
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: LIST
42535: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42536: LD_VAR 0 6
42540: PPUSH
42541: CALL_OW 264
42545: PUSH
42546: LD_INT 29
42548: PUSH
42549: EMPTY
42550: LIST
42551: IN
42552: IFFALSE 42573
// points := [ 70 , 200 , 400 ] ;
42554: LD_ADDR_VAR 0 9
42558: PUSH
42559: LD_INT 70
42561: PUSH
42562: LD_INT 200
42564: PUSH
42565: LD_INT 400
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: LIST
42572: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42573: LD_VAR 0 6
42577: PPUSH
42578: CALL_OW 264
42582: PUSH
42583: LD_INT 14
42585: PUSH
42586: LD_INT 53
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: IN
42593: IFFALSE 42614
// points := [ 40 , 10 , 20 ] ;
42595: LD_ADDR_VAR 0 9
42599: PUSH
42600: LD_INT 40
42602: PUSH
42603: LD_INT 10
42605: PUSH
42606: LD_INT 20
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: LIST
42613: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42614: LD_VAR 0 6
42618: PPUSH
42619: CALL_OW 264
42623: PUSH
42624: LD_INT 9
42626: PUSH
42627: EMPTY
42628: LIST
42629: IN
42630: IFFALSE 42651
// points := [ 5 , 70 , 20 ] ;
42632: LD_ADDR_VAR 0 9
42636: PUSH
42637: LD_INT 5
42639: PUSH
42640: LD_INT 70
42642: PUSH
42643: LD_INT 20
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: LIST
42650: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42651: LD_VAR 0 6
42655: PPUSH
42656: CALL_OW 264
42660: PUSH
42661: LD_INT 10
42663: PUSH
42664: EMPTY
42665: LIST
42666: IN
42667: IFFALSE 42688
// points := [ 35 , 110 , 70 ] ;
42669: LD_ADDR_VAR 0 9
42673: PUSH
42674: LD_INT 35
42676: PUSH
42677: LD_INT 110
42679: PUSH
42680: LD_INT 70
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: LIST
42687: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42688: LD_VAR 0 6
42692: PPUSH
42693: CALL_OW 265
42697: PUSH
42698: LD_INT 25
42700: EQUAL
42701: IFFALSE 42722
// points := [ 80 , 65 , 100 ] ;
42703: LD_ADDR_VAR 0 9
42707: PUSH
42708: LD_INT 80
42710: PUSH
42711: LD_INT 65
42713: PUSH
42714: LD_INT 100
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: LIST
42721: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
42722: LD_VAR 0 6
42726: PPUSH
42727: CALL_OW 263
42731: PUSH
42732: LD_INT 1
42734: EQUAL
42735: IFFALSE 42770
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
42737: LD_ADDR_VAR 0 10
42741: PUSH
42742: LD_VAR 0 10
42746: PUSH
42747: LD_VAR 0 6
42751: PPUSH
42752: CALL_OW 311
42756: PPUSH
42757: LD_INT 3
42759: PPUSH
42760: CALL_OW 259
42764: PUSH
42765: LD_INT 4
42767: MUL
42768: MUL
42769: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
42770: LD_VAR 0 6
42774: PPUSH
42775: CALL_OW 263
42779: PUSH
42780: LD_INT 2
42782: EQUAL
42783: IFFALSE 42834
// begin j := IsControledBy ( i ) ;
42785: LD_ADDR_VAR 0 7
42789: PUSH
42790: LD_VAR 0 6
42794: PPUSH
42795: CALL_OW 312
42799: ST_TO_ADDR
// if j then
42800: LD_VAR 0 7
42804: IFFALSE 42834
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
42806: LD_ADDR_VAR 0 10
42810: PUSH
42811: LD_VAR 0 10
42815: PUSH
42816: LD_VAR 0 7
42820: PPUSH
42821: LD_INT 3
42823: PPUSH
42824: CALL_OW 259
42828: PUSH
42829: LD_INT 3
42831: MUL
42832: MUL
42833: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
42834: LD_VAR 0 6
42838: PPUSH
42839: CALL_OW 264
42843: PUSH
42844: LD_INT 5
42846: PUSH
42847: LD_INT 6
42849: PUSH
42850: LD_INT 46
42852: PUSH
42853: LD_INT 44
42855: PUSH
42856: LD_INT 47
42858: PUSH
42859: LD_INT 45
42861: PUSH
42862: LD_INT 28
42864: PUSH
42865: LD_INT 7
42867: PUSH
42868: LD_INT 27
42870: PUSH
42871: LD_INT 29
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: IN
42886: IFFALSE 42906
42888: PUSH
42889: LD_VAR 0 1
42893: PPUSH
42894: LD_INT 52
42896: PPUSH
42897: CALL_OW 321
42901: PUSH
42902: LD_INT 2
42904: EQUAL
42905: AND
42906: IFFALSE 42923
// bpoints := bpoints * 1.2 ;
42908: LD_ADDR_VAR 0 10
42912: PUSH
42913: LD_VAR 0 10
42917: PUSH
42918: LD_REAL  1.20000000000000E+0000
42921: MUL
42922: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
42923: LD_VAR 0 6
42927: PPUSH
42928: CALL_OW 264
42932: PUSH
42933: LD_INT 6
42935: PUSH
42936: LD_INT 46
42938: PUSH
42939: LD_INT 47
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: LIST
42946: IN
42947: IFFALSE 42964
// bpoints := bpoints * 1.2 ;
42949: LD_ADDR_VAR 0 10
42953: PUSH
42954: LD_VAR 0 10
42958: PUSH
42959: LD_REAL  1.20000000000000E+0000
42962: MUL
42963: ST_TO_ADDR
// end ; unit_building :
42964: GO 42978
42966: LD_INT 3
42968: DOUBLE
42969: EQUAL
42970: IFTRUE 42974
42972: GO 42977
42974: POP
// ; end ;
42975: GO 42978
42977: POP
// for j = 1 to 3 do
42978: LD_ADDR_VAR 0 7
42982: PUSH
42983: DOUBLE
42984: LD_INT 1
42986: DEC
42987: ST_TO_ADDR
42988: LD_INT 3
42990: PUSH
42991: FOR_TO
42992: IFFALSE 43045
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
42994: LD_ADDR_VAR 0 5
42998: PUSH
42999: LD_VAR 0 5
43003: PPUSH
43004: LD_VAR 0 7
43008: PPUSH
43009: LD_VAR 0 5
43013: PUSH
43014: LD_VAR 0 7
43018: ARRAY
43019: PUSH
43020: LD_VAR 0 9
43024: PUSH
43025: LD_VAR 0 7
43029: ARRAY
43030: PUSH
43031: LD_VAR 0 10
43035: MUL
43036: PLUS
43037: PPUSH
43038: CALL_OW 1
43042: ST_TO_ADDR
43043: GO 42991
43045: POP
43046: POP
// end ;
43047: GO 41520
43049: POP
43050: POP
// result := Replace ( result , 4 , tmp ) ;
43051: LD_ADDR_VAR 0 5
43055: PUSH
43056: LD_VAR 0 5
43060: PPUSH
43061: LD_INT 4
43063: PPUSH
43064: LD_VAR 0 8
43068: PPUSH
43069: CALL_OW 1
43073: ST_TO_ADDR
// end ;
43074: LD_VAR 0 5
43078: RET
// export function DangerAtRange ( unit , range ) ; begin
43079: LD_INT 0
43081: PPUSH
// if not unit then
43082: LD_VAR 0 1
43086: NOT
43087: IFFALSE 43091
// exit ;
43089: GO 43136
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43091: LD_ADDR_VAR 0 3
43095: PUSH
43096: LD_VAR 0 1
43100: PPUSH
43101: CALL_OW 255
43105: PPUSH
43106: LD_VAR 0 1
43110: PPUSH
43111: CALL_OW 250
43115: PPUSH
43116: LD_VAR 0 1
43120: PPUSH
43121: CALL_OW 251
43125: PPUSH
43126: LD_VAR 0 2
43130: PPUSH
43131: CALL 41370 0 4
43135: ST_TO_ADDR
// end ;
43136: LD_VAR 0 3
43140: RET
// export function DangerInArea ( side , area ) ; begin
43141: LD_INT 0
43143: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43144: LD_ADDR_VAR 0 3
43148: PUSH
43149: LD_VAR 0 2
43153: PPUSH
43154: LD_INT 81
43156: PUSH
43157: LD_VAR 0 1
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PPUSH
43166: CALL_OW 70
43170: ST_TO_ADDR
// end ;
43171: LD_VAR 0 3
43175: RET
// export function IsExtension ( b ) ; begin
43176: LD_INT 0
43178: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43179: LD_ADDR_VAR 0 2
43183: PUSH
43184: LD_VAR 0 1
43188: PUSH
43189: LD_INT 23
43191: PUSH
43192: LD_INT 20
43194: PUSH
43195: LD_INT 22
43197: PUSH
43198: LD_INT 17
43200: PUSH
43201: LD_INT 24
43203: PUSH
43204: LD_INT 21
43206: PUSH
43207: LD_INT 19
43209: PUSH
43210: LD_INT 16
43212: PUSH
43213: LD_INT 25
43215: PUSH
43216: LD_INT 18
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: IN
43231: ST_TO_ADDR
// end ;
43232: LD_VAR 0 2
43236: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
43237: LD_INT 0
43239: PPUSH
43240: PPUSH
43241: PPUSH
// result := [ ] ;
43242: LD_ADDR_VAR 0 4
43246: PUSH
43247: EMPTY
43248: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43249: LD_ADDR_VAR 0 5
43253: PUSH
43254: LD_VAR 0 2
43258: PPUSH
43259: LD_INT 21
43261: PUSH
43262: LD_INT 3
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PPUSH
43269: CALL_OW 70
43273: ST_TO_ADDR
// if not tmp then
43274: LD_VAR 0 5
43278: NOT
43279: IFFALSE 43283
// exit ;
43281: GO 43347
// if checkLink then
43283: LD_VAR 0 3
43287: IFFALSE 43337
// begin for i in tmp do
43289: LD_ADDR_VAR 0 6
43293: PUSH
43294: LD_VAR 0 5
43298: PUSH
43299: FOR_IN
43300: IFFALSE 43335
// if GetBase ( i ) <> base then
43302: LD_VAR 0 6
43306: PPUSH
43307: CALL_OW 274
43311: PUSH
43312: LD_VAR 0 1
43316: NONEQUAL
43317: IFFALSE 43333
// ComLinkToBase ( base , i ) ;
43319: LD_VAR 0 1
43323: PPUSH
43324: LD_VAR 0 6
43328: PPUSH
43329: CALL_OW 169
43333: GO 43299
43335: POP
43336: POP
// end ; result := tmp ;
43337: LD_ADDR_VAR 0 4
43341: PUSH
43342: LD_VAR 0 5
43346: ST_TO_ADDR
// end ;
43347: LD_VAR 0 4
43351: RET
// export function ComComplete ( units , b ) ; var i ; begin
43352: LD_INT 0
43354: PPUSH
43355: PPUSH
// if not units then
43356: LD_VAR 0 1
43360: NOT
43361: IFFALSE 43365
// exit ;
43363: GO 43455
// for i in units do
43365: LD_ADDR_VAR 0 4
43369: PUSH
43370: LD_VAR 0 1
43374: PUSH
43375: FOR_IN
43376: IFFALSE 43453
// if BuildingStatus ( b ) = bs_build then
43378: LD_VAR 0 2
43382: PPUSH
43383: CALL_OW 461
43387: PUSH
43388: LD_INT 1
43390: EQUAL
43391: IFFALSE 43451
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43393: LD_VAR 0 4
43397: PPUSH
43398: LD_STRING h
43400: PUSH
43401: LD_VAR 0 2
43405: PPUSH
43406: CALL_OW 250
43410: PUSH
43411: LD_VAR 0 2
43415: PPUSH
43416: CALL_OW 251
43420: PUSH
43421: LD_VAR 0 2
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: LD_INT 0
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: PUSH
43444: EMPTY
43445: LIST
43446: PPUSH
43447: CALL_OW 446
43451: GO 43375
43453: POP
43454: POP
// end ;
43455: LD_VAR 0 3
43459: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43460: LD_INT 0
43462: PPUSH
43463: PPUSH
43464: PPUSH
43465: PPUSH
43466: PPUSH
43467: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
43468: LD_VAR 0 1
43472: NOT
43473: IFTRUE 43490
43475: PUSH
43476: LD_VAR 0 1
43480: PPUSH
43481: CALL_OW 263
43485: PUSH
43486: LD_INT 2
43488: NONEQUAL
43489: OR
43490: IFFALSE 43494
// exit ;
43492: GO 43810
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43494: LD_ADDR_VAR 0 6
43498: PUSH
43499: LD_INT 22
43501: PUSH
43502: LD_VAR 0 1
43506: PPUSH
43507: CALL_OW 255
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 2
43518: PUSH
43519: LD_INT 30
43521: PUSH
43522: LD_INT 36
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 34
43531: PUSH
43532: LD_INT 31
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: LIST
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PPUSH
43548: CALL_OW 69
43552: ST_TO_ADDR
// if not tmp then
43553: LD_VAR 0 6
43557: NOT
43558: IFFALSE 43562
// exit ;
43560: GO 43810
// result := [ ] ;
43562: LD_ADDR_VAR 0 2
43566: PUSH
43567: EMPTY
43568: ST_TO_ADDR
// for i in tmp do
43569: LD_ADDR_VAR 0 3
43573: PUSH
43574: LD_VAR 0 6
43578: PUSH
43579: FOR_IN
43580: IFFALSE 43651
// begin t := UnitsInside ( i ) ;
43582: LD_ADDR_VAR 0 4
43586: PUSH
43587: LD_VAR 0 3
43591: PPUSH
43592: CALL_OW 313
43596: ST_TO_ADDR
// if t then
43597: LD_VAR 0 4
43601: IFFALSE 43649
// for j in t do
43603: LD_ADDR_VAR 0 7
43607: PUSH
43608: LD_VAR 0 4
43612: PUSH
43613: FOR_IN
43614: IFFALSE 43647
// result := Replace ( result , result + 1 , j ) ;
43616: LD_ADDR_VAR 0 2
43620: PUSH
43621: LD_VAR 0 2
43625: PPUSH
43626: LD_VAR 0 2
43630: PUSH
43631: LD_INT 1
43633: PLUS
43634: PPUSH
43635: LD_VAR 0 7
43639: PPUSH
43640: CALL_OW 1
43644: ST_TO_ADDR
43645: GO 43613
43647: POP
43648: POP
// end ;
43649: GO 43579
43651: POP
43652: POP
// if not result then
43653: LD_VAR 0 2
43657: NOT
43658: IFFALSE 43662
// exit ;
43660: GO 43810
// mech := result [ 1 ] ;
43662: LD_ADDR_VAR 0 5
43666: PUSH
43667: LD_VAR 0 2
43671: PUSH
43672: LD_INT 1
43674: ARRAY
43675: ST_TO_ADDR
// if result > 1 then
43676: LD_VAR 0 2
43680: PUSH
43681: LD_INT 1
43683: GREATER
43684: IFFALSE 43796
// begin for i = 2 to result do
43686: LD_ADDR_VAR 0 3
43690: PUSH
43691: DOUBLE
43692: LD_INT 2
43694: DEC
43695: ST_TO_ADDR
43696: LD_VAR 0 2
43700: PUSH
43701: FOR_TO
43702: IFFALSE 43794
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43704: LD_ADDR_VAR 0 4
43708: PUSH
43709: LD_VAR 0 2
43713: PUSH
43714: LD_VAR 0 3
43718: ARRAY
43719: PPUSH
43720: LD_INT 3
43722: PPUSH
43723: CALL_OW 259
43727: PUSH
43728: LD_VAR 0 2
43732: PUSH
43733: LD_VAR 0 3
43737: ARRAY
43738: PPUSH
43739: CALL_OW 432
43743: MINUS
43744: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43745: LD_VAR 0 4
43749: PUSH
43750: LD_VAR 0 5
43754: PPUSH
43755: LD_INT 3
43757: PPUSH
43758: CALL_OW 259
43762: PUSH
43763: LD_VAR 0 5
43767: PPUSH
43768: CALL_OW 432
43772: MINUS
43773: GREATEREQUAL
43774: IFFALSE 43792
// mech := result [ i ] ;
43776: LD_ADDR_VAR 0 5
43780: PUSH
43781: LD_VAR 0 2
43785: PUSH
43786: LD_VAR 0 3
43790: ARRAY
43791: ST_TO_ADDR
// end ;
43792: GO 43701
43794: POP
43795: POP
// end ; ComLinkTo ( vehicle , mech ) ;
43796: LD_VAR 0 1
43800: PPUSH
43801: LD_VAR 0 5
43805: PPUSH
43806: CALL_OW 135
// end ;
43810: LD_VAR 0 2
43814: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
43815: LD_INT 0
43817: PPUSH
43818: PPUSH
43819: PPUSH
43820: PPUSH
43821: PPUSH
43822: PPUSH
43823: PPUSH
43824: PPUSH
43825: PPUSH
43826: PPUSH
43827: PPUSH
43828: PPUSH
43829: PPUSH
// result := [ ] ;
43830: LD_ADDR_VAR 0 7
43834: PUSH
43835: EMPTY
43836: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
43837: LD_VAR 0 1
43841: PPUSH
43842: CALL_OW 266
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: LD_INT 1
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: IN
43857: NOT
43858: IFFALSE 43862
// exit ;
43860: GO 45502
// if name then
43862: LD_VAR 0 3
43866: IFFALSE 43882
// SetBName ( base_dep , name ) ;
43868: LD_VAR 0 1
43872: PPUSH
43873: LD_VAR 0 3
43877: PPUSH
43878: CALL_OW 500
// base := GetBase ( base_dep ) ;
43882: LD_ADDR_VAR 0 15
43886: PUSH
43887: LD_VAR 0 1
43891: PPUSH
43892: CALL_OW 274
43896: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43897: LD_ADDR_VAR 0 16
43901: PUSH
43902: LD_VAR 0 1
43906: PPUSH
43907: CALL_OW 255
43911: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
43912: LD_ADDR_VAR 0 17
43916: PUSH
43917: LD_VAR 0 1
43921: PPUSH
43922: CALL_OW 248
43926: ST_TO_ADDR
// if sources then
43927: LD_VAR 0 5
43931: IFFALSE 43978
// for i = 1 to 3 do
43933: LD_ADDR_VAR 0 8
43937: PUSH
43938: DOUBLE
43939: LD_INT 1
43941: DEC
43942: ST_TO_ADDR
43943: LD_INT 3
43945: PUSH
43946: FOR_TO
43947: IFFALSE 43976
// AddResourceType ( base , i , sources [ i ] ) ;
43949: LD_VAR 0 15
43953: PPUSH
43954: LD_VAR 0 8
43958: PPUSH
43959: LD_VAR 0 5
43963: PUSH
43964: LD_VAR 0 8
43968: ARRAY
43969: PPUSH
43970: CALL_OW 276
43974: GO 43946
43976: POP
43977: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
43978: LD_ADDR_VAR 0 18
43982: PUSH
43983: LD_VAR 0 15
43987: PPUSH
43988: LD_VAR 0 2
43992: PPUSH
43993: LD_INT 1
43995: PPUSH
43996: CALL 43237 0 3
44000: ST_TO_ADDR
// InitHc ;
44001: CALL_OW 19
// InitUc ;
44005: CALL_OW 18
// uc_side := side ;
44009: LD_ADDR_OWVAR 20
44013: PUSH
44014: LD_VAR 0 16
44018: ST_TO_ADDR
// uc_nation := nation ;
44019: LD_ADDR_OWVAR 21
44023: PUSH
44024: LD_VAR 0 17
44028: ST_TO_ADDR
// if buildings then
44029: LD_VAR 0 18
44033: IFFALSE 45361
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44035: LD_ADDR_VAR 0 19
44039: PUSH
44040: LD_VAR 0 18
44044: PPUSH
44045: LD_INT 2
44047: PUSH
44048: LD_INT 30
44050: PUSH
44051: LD_INT 29
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 30
44060: PUSH
44061: LD_INT 30
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: LIST
44072: PPUSH
44073: CALL_OW 72
44077: ST_TO_ADDR
// if tmp then
44078: LD_VAR 0 19
44082: IFFALSE 44130
// for i in tmp do
44084: LD_ADDR_VAR 0 8
44088: PUSH
44089: LD_VAR 0 19
44093: PUSH
44094: FOR_IN
44095: IFFALSE 44128
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44097: LD_VAR 0 8
44101: PPUSH
44102: CALL_OW 250
44106: PPUSH
44107: LD_VAR 0 8
44111: PPUSH
44112: CALL_OW 251
44116: PPUSH
44117: LD_VAR 0 16
44121: PPUSH
44122: CALL_OW 441
44126: GO 44094
44128: POP
44129: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44130: LD_VAR 0 18
44134: PPUSH
44135: LD_INT 2
44137: PUSH
44138: LD_INT 30
44140: PUSH
44141: LD_INT 32
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 30
44150: PUSH
44151: LD_INT 33
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: LIST
44162: PPUSH
44163: CALL_OW 72
44167: IFFALSE 44255
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44169: LD_ADDR_VAR 0 8
44173: PUSH
44174: LD_VAR 0 18
44178: PPUSH
44179: LD_INT 2
44181: PUSH
44182: LD_INT 30
44184: PUSH
44185: LD_INT 32
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 30
44194: PUSH
44195: LD_INT 33
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: LIST
44206: PPUSH
44207: CALL_OW 72
44211: PUSH
44212: FOR_IN
44213: IFFALSE 44253
// begin if not GetBWeapon ( i ) then
44215: LD_VAR 0 8
44219: PPUSH
44220: CALL_OW 269
44224: NOT
44225: IFFALSE 44251
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44227: LD_VAR 0 8
44231: PPUSH
44232: LD_VAR 0 8
44236: PPUSH
44237: LD_VAR 0 2
44241: PPUSH
44242: CALL 45507 0 2
44246: PPUSH
44247: CALL_OW 431
// end ;
44251: GO 44212
44253: POP
44254: POP
// end ; for i = 1 to personel do
44255: LD_ADDR_VAR 0 8
44259: PUSH
44260: DOUBLE
44261: LD_INT 1
44263: DEC
44264: ST_TO_ADDR
44265: LD_VAR 0 6
44269: PUSH
44270: FOR_TO
44271: IFFALSE 45341
// begin if i > 4 then
44273: LD_VAR 0 8
44277: PUSH
44278: LD_INT 4
44280: GREATER
44281: IFFALSE 44285
// break ;
44283: GO 45341
// case i of 1 :
44285: LD_VAR 0 8
44289: PUSH
44290: LD_INT 1
44292: DOUBLE
44293: EQUAL
44294: IFTRUE 44298
44296: GO 44378
44298: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44299: LD_ADDR_VAR 0 12
44303: PUSH
44304: LD_VAR 0 18
44308: PPUSH
44309: LD_INT 22
44311: PUSH
44312: LD_VAR 0 16
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 58
44323: PUSH
44324: EMPTY
44325: LIST
44326: PUSH
44327: LD_INT 2
44329: PUSH
44330: LD_INT 30
44332: PUSH
44333: LD_INT 32
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 30
44342: PUSH
44343: LD_INT 4
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 30
44352: PUSH
44353: LD_INT 5
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: LIST
44370: PPUSH
44371: CALL_OW 72
44375: ST_TO_ADDR
44376: GO 44600
44378: LD_INT 2
44380: DOUBLE
44381: EQUAL
44382: IFTRUE 44386
44384: GO 44448
44386: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44387: LD_ADDR_VAR 0 12
44391: PUSH
44392: LD_VAR 0 18
44396: PPUSH
44397: LD_INT 22
44399: PUSH
44400: LD_VAR 0 16
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 2
44411: PUSH
44412: LD_INT 30
44414: PUSH
44415: LD_INT 0
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 30
44424: PUSH
44425: LD_INT 1
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: LIST
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PPUSH
44441: CALL_OW 72
44445: ST_TO_ADDR
44446: GO 44600
44448: LD_INT 3
44450: DOUBLE
44451: EQUAL
44452: IFTRUE 44456
44454: GO 44518
44456: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44457: LD_ADDR_VAR 0 12
44461: PUSH
44462: LD_VAR 0 18
44466: PPUSH
44467: LD_INT 22
44469: PUSH
44470: LD_VAR 0 16
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 2
44481: PUSH
44482: LD_INT 30
44484: PUSH
44485: LD_INT 2
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 30
44494: PUSH
44495: LD_INT 3
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: LIST
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PPUSH
44511: CALL_OW 72
44515: ST_TO_ADDR
44516: GO 44600
44518: LD_INT 4
44520: DOUBLE
44521: EQUAL
44522: IFTRUE 44526
44524: GO 44599
44526: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44527: LD_ADDR_VAR 0 12
44531: PUSH
44532: LD_VAR 0 18
44536: PPUSH
44537: LD_INT 22
44539: PUSH
44540: LD_VAR 0 16
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 2
44551: PUSH
44552: LD_INT 30
44554: PUSH
44555: LD_INT 6
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 30
44564: PUSH
44565: LD_INT 7
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 30
44574: PUSH
44575: LD_INT 8
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PPUSH
44592: CALL_OW 72
44596: ST_TO_ADDR
44597: GO 44600
44599: POP
// if i = 1 then
44600: LD_VAR 0 8
44604: PUSH
44605: LD_INT 1
44607: EQUAL
44608: IFFALSE 44719
// begin tmp := [ ] ;
44610: LD_ADDR_VAR 0 19
44614: PUSH
44615: EMPTY
44616: ST_TO_ADDR
// for j in f do
44617: LD_ADDR_VAR 0 9
44621: PUSH
44622: LD_VAR 0 12
44626: PUSH
44627: FOR_IN
44628: IFFALSE 44701
// if GetBType ( j ) = b_bunker then
44630: LD_VAR 0 9
44634: PPUSH
44635: CALL_OW 266
44639: PUSH
44640: LD_INT 32
44642: EQUAL
44643: IFFALSE 44670
// tmp := Insert ( tmp , 1 , j ) else
44645: LD_ADDR_VAR 0 19
44649: PUSH
44650: LD_VAR 0 19
44654: PPUSH
44655: LD_INT 1
44657: PPUSH
44658: LD_VAR 0 9
44662: PPUSH
44663: CALL_OW 2
44667: ST_TO_ADDR
44668: GO 44699
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44670: LD_ADDR_VAR 0 19
44674: PUSH
44675: LD_VAR 0 19
44679: PPUSH
44680: LD_VAR 0 19
44684: PUSH
44685: LD_INT 1
44687: PLUS
44688: PPUSH
44689: LD_VAR 0 9
44693: PPUSH
44694: CALL_OW 2
44698: ST_TO_ADDR
44699: GO 44627
44701: POP
44702: POP
// if tmp then
44703: LD_VAR 0 19
44707: IFFALSE 44719
// f := tmp ;
44709: LD_ADDR_VAR 0 12
44713: PUSH
44714: LD_VAR 0 19
44718: ST_TO_ADDR
// end ; x := personel [ i ] ;
44719: LD_ADDR_VAR 0 13
44723: PUSH
44724: LD_VAR 0 6
44728: PUSH
44729: LD_VAR 0 8
44733: ARRAY
44734: ST_TO_ADDR
// if x = - 1 then
44735: LD_VAR 0 13
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: EQUAL
44744: IFFALSE 44955
// begin for j in f do
44746: LD_ADDR_VAR 0 9
44750: PUSH
44751: LD_VAR 0 12
44755: PUSH
44756: FOR_IN
44757: IFFALSE 44951
// repeat InitHc ;
44759: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44763: LD_VAR 0 9
44767: PPUSH
44768: CALL_OW 266
44772: PUSH
44773: LD_INT 5
44775: EQUAL
44776: IFFALSE 44846
// begin if UnitsInside ( j ) < 3 then
44778: LD_VAR 0 9
44782: PPUSH
44783: CALL_OW 313
44787: PUSH
44788: LD_INT 3
44790: LESS
44791: IFFALSE 44827
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44793: LD_INT 0
44795: PPUSH
44796: LD_INT 5
44798: PUSH
44799: LD_INT 8
44801: PUSH
44802: LD_INT 9
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: LIST
44809: PUSH
44810: LD_VAR 0 17
44814: ARRAY
44815: PPUSH
44816: LD_VAR 0 4
44820: PPUSH
44821: CALL_OW 380
44825: GO 44844
// PrepareHuman ( false , i , skill ) ;
44827: LD_INT 0
44829: PPUSH
44830: LD_VAR 0 8
44834: PPUSH
44835: LD_VAR 0 4
44839: PPUSH
44840: CALL_OW 380
// end else
44844: GO 44863
// PrepareHuman ( false , i , skill ) ;
44846: LD_INT 0
44848: PPUSH
44849: LD_VAR 0 8
44853: PPUSH
44854: LD_VAR 0 4
44858: PPUSH
44859: CALL_OW 380
// un := CreateHuman ;
44863: LD_ADDR_VAR 0 14
44867: PUSH
44868: CALL_OW 44
44872: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44873: LD_ADDR_VAR 0 7
44877: PUSH
44878: LD_VAR 0 7
44882: PPUSH
44883: LD_INT 1
44885: PPUSH
44886: LD_VAR 0 14
44890: PPUSH
44891: CALL_OW 2
44895: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44896: LD_VAR 0 14
44900: PPUSH
44901: LD_VAR 0 9
44905: PPUSH
44906: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44910: LD_VAR 0 9
44914: PPUSH
44915: CALL_OW 313
44919: PUSH
44920: LD_INT 6
44922: EQUAL
44923: IFTRUE 44947
44925: PUSH
44926: LD_VAR 0 9
44930: PPUSH
44931: CALL_OW 266
44935: PUSH
44936: LD_INT 32
44938: PUSH
44939: LD_INT 31
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: IN
44946: OR
44947: IFFALSE 44759
44949: GO 44756
44951: POP
44952: POP
// end else
44953: GO 45339
// for j = 1 to x do
44955: LD_ADDR_VAR 0 9
44959: PUSH
44960: DOUBLE
44961: LD_INT 1
44963: DEC
44964: ST_TO_ADDR
44965: LD_VAR 0 13
44969: PUSH
44970: FOR_TO
44971: IFFALSE 45337
// begin InitHc ;
44973: CALL_OW 19
// if not f then
44977: LD_VAR 0 12
44981: NOT
44982: IFFALSE 45071
// begin PrepareHuman ( false , i , skill ) ;
44984: LD_INT 0
44986: PPUSH
44987: LD_VAR 0 8
44991: PPUSH
44992: LD_VAR 0 4
44996: PPUSH
44997: CALL_OW 380
// un := CreateHuman ;
45001: LD_ADDR_VAR 0 14
45005: PUSH
45006: CALL_OW 44
45010: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45011: LD_ADDR_VAR 0 7
45015: PUSH
45016: LD_VAR 0 7
45020: PPUSH
45021: LD_INT 1
45023: PPUSH
45024: LD_VAR 0 14
45028: PPUSH
45029: CALL_OW 2
45033: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45034: LD_VAR 0 14
45038: PPUSH
45039: LD_VAR 0 1
45043: PPUSH
45044: CALL_OW 250
45048: PPUSH
45049: LD_VAR 0 1
45053: PPUSH
45054: CALL_OW 251
45058: PPUSH
45059: LD_INT 10
45061: PPUSH
45062: LD_INT 0
45064: PPUSH
45065: CALL_OW 50
// continue ;
45069: GO 44970
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45071: LD_VAR 0 12
45075: PUSH
45076: LD_INT 1
45078: ARRAY
45079: PPUSH
45080: CALL_OW 313
45084: IFFALSE 45112
45086: PUSH
45087: LD_VAR 0 12
45091: PUSH
45092: LD_INT 1
45094: ARRAY
45095: PPUSH
45096: CALL_OW 266
45100: PUSH
45101: LD_INT 32
45103: PUSH
45104: LD_INT 31
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: IN
45111: AND
45112: IFTRUE 45133
45114: PUSH
45115: LD_VAR 0 12
45119: PUSH
45120: LD_INT 1
45122: ARRAY
45123: PPUSH
45124: CALL_OW 313
45128: PUSH
45129: LD_INT 6
45131: EQUAL
45132: OR
45133: IFFALSE 45153
// f := Delete ( f , 1 ) ;
45135: LD_ADDR_VAR 0 12
45139: PUSH
45140: LD_VAR 0 12
45144: PPUSH
45145: LD_INT 1
45147: PPUSH
45148: CALL_OW 3
45152: ST_TO_ADDR
// if not f then
45153: LD_VAR 0 12
45157: NOT
45158: IFFALSE 45176
// begin x := x + 2 ;
45160: LD_ADDR_VAR 0 13
45164: PUSH
45165: LD_VAR 0 13
45169: PUSH
45170: LD_INT 2
45172: PLUS
45173: ST_TO_ADDR
// continue ;
45174: GO 44970
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45176: LD_VAR 0 12
45180: PUSH
45181: LD_INT 1
45183: ARRAY
45184: PPUSH
45185: CALL_OW 266
45189: PUSH
45190: LD_INT 5
45192: EQUAL
45193: IFFALSE 45267
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45195: LD_VAR 0 12
45199: PUSH
45200: LD_INT 1
45202: ARRAY
45203: PPUSH
45204: CALL_OW 313
45208: PUSH
45209: LD_INT 3
45211: LESS
45212: IFFALSE 45248
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45214: LD_INT 0
45216: PPUSH
45217: LD_INT 5
45219: PUSH
45220: LD_INT 8
45222: PUSH
45223: LD_INT 9
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: LIST
45230: PUSH
45231: LD_VAR 0 17
45235: ARRAY
45236: PPUSH
45237: LD_VAR 0 4
45241: PPUSH
45242: CALL_OW 380
45246: GO 45265
// PrepareHuman ( false , i , skill ) ;
45248: LD_INT 0
45250: PPUSH
45251: LD_VAR 0 8
45255: PPUSH
45256: LD_VAR 0 4
45260: PPUSH
45261: CALL_OW 380
// end else
45265: GO 45284
// PrepareHuman ( false , i , skill ) ;
45267: LD_INT 0
45269: PPUSH
45270: LD_VAR 0 8
45274: PPUSH
45275: LD_VAR 0 4
45279: PPUSH
45280: CALL_OW 380
// un := CreateHuman ;
45284: LD_ADDR_VAR 0 14
45288: PUSH
45289: CALL_OW 44
45293: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45294: LD_ADDR_VAR 0 7
45298: PUSH
45299: LD_VAR 0 7
45303: PPUSH
45304: LD_INT 1
45306: PPUSH
45307: LD_VAR 0 14
45311: PPUSH
45312: CALL_OW 2
45316: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45317: LD_VAR 0 14
45321: PPUSH
45322: LD_VAR 0 12
45326: PUSH
45327: LD_INT 1
45329: ARRAY
45330: PPUSH
45331: CALL_OW 52
// end ;
45335: GO 44970
45337: POP
45338: POP
// end ;
45339: GO 44270
45341: POP
45342: POP
// result := result ^ buildings ;
45343: LD_ADDR_VAR 0 7
45347: PUSH
45348: LD_VAR 0 7
45352: PUSH
45353: LD_VAR 0 18
45357: ADD
45358: ST_TO_ADDR
// end else
45359: GO 45502
// begin for i = 1 to personel do
45361: LD_ADDR_VAR 0 8
45365: PUSH
45366: DOUBLE
45367: LD_INT 1
45369: DEC
45370: ST_TO_ADDR
45371: LD_VAR 0 6
45375: PUSH
45376: FOR_TO
45377: IFFALSE 45500
// begin if i > 4 then
45379: LD_VAR 0 8
45383: PUSH
45384: LD_INT 4
45386: GREATER
45387: IFFALSE 45391
// break ;
45389: GO 45500
// x := personel [ i ] ;
45391: LD_ADDR_VAR 0 13
45395: PUSH
45396: LD_VAR 0 6
45400: PUSH
45401: LD_VAR 0 8
45405: ARRAY
45406: ST_TO_ADDR
// if x = - 1 then
45407: LD_VAR 0 13
45411: PUSH
45412: LD_INT 1
45414: NEG
45415: EQUAL
45416: IFFALSE 45420
// continue ;
45418: GO 45376
// PrepareHuman ( false , i , skill ) ;
45420: LD_INT 0
45422: PPUSH
45423: LD_VAR 0 8
45427: PPUSH
45428: LD_VAR 0 4
45432: PPUSH
45433: CALL_OW 380
// un := CreateHuman ;
45437: LD_ADDR_VAR 0 14
45441: PUSH
45442: CALL_OW 44
45446: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45447: LD_VAR 0 14
45451: PPUSH
45452: LD_VAR 0 1
45456: PPUSH
45457: CALL_OW 250
45461: PPUSH
45462: LD_VAR 0 1
45466: PPUSH
45467: CALL_OW 251
45471: PPUSH
45472: LD_INT 10
45474: PPUSH
45475: LD_INT 0
45477: PPUSH
45478: CALL_OW 50
// result := result ^ un ;
45482: LD_ADDR_VAR 0 7
45486: PUSH
45487: LD_VAR 0 7
45491: PUSH
45492: LD_VAR 0 14
45496: ADD
45497: ST_TO_ADDR
// end ;
45498: GO 45376
45500: POP
45501: POP
// end ; end ;
45502: LD_VAR 0 7
45506: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45507: LD_INT 0
45509: PPUSH
45510: PPUSH
45511: PPUSH
45512: PPUSH
45513: PPUSH
45514: PPUSH
45515: PPUSH
45516: PPUSH
45517: PPUSH
45518: PPUSH
45519: PPUSH
45520: PPUSH
45521: PPUSH
45522: PPUSH
45523: PPUSH
45524: PPUSH
// result := false ;
45525: LD_ADDR_VAR 0 3
45529: PUSH
45530: LD_INT 0
45532: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45533: LD_VAR 0 1
45537: NOT
45538: IFTRUE 45563
45540: PUSH
45541: LD_VAR 0 1
45545: PPUSH
45546: CALL_OW 266
45550: PUSH
45551: LD_INT 32
45553: PUSH
45554: LD_INT 33
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: IN
45561: NOT
45562: OR
45563: IFFALSE 45567
// exit ;
45565: GO 46702
// nat := GetNation ( tower ) ;
45567: LD_ADDR_VAR 0 12
45571: PUSH
45572: LD_VAR 0 1
45576: PPUSH
45577: CALL_OW 248
45581: ST_TO_ADDR
// side := GetSide ( tower ) ;
45582: LD_ADDR_VAR 0 16
45586: PUSH
45587: LD_VAR 0 1
45591: PPUSH
45592: CALL_OW 255
45596: ST_TO_ADDR
// x := GetX ( tower ) ;
45597: LD_ADDR_VAR 0 10
45601: PUSH
45602: LD_VAR 0 1
45606: PPUSH
45607: CALL_OW 250
45611: ST_TO_ADDR
// y := GetY ( tower ) ;
45612: LD_ADDR_VAR 0 11
45616: PUSH
45617: LD_VAR 0 1
45621: PPUSH
45622: CALL_OW 251
45626: ST_TO_ADDR
// if not x or not y then
45627: LD_VAR 0 10
45631: NOT
45632: IFTRUE 45641
45634: PUSH
45635: LD_VAR 0 11
45639: NOT
45640: OR
45641: IFFALSE 45645
// exit ;
45643: GO 46702
// weapon := 0 ;
45645: LD_ADDR_VAR 0 18
45649: PUSH
45650: LD_INT 0
45652: ST_TO_ADDR
// fac_list := [ ] ;
45653: LD_ADDR_VAR 0 17
45657: PUSH
45658: EMPTY
45659: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
45660: LD_ADDR_VAR 0 6
45664: PUSH
45665: LD_VAR 0 1
45669: PPUSH
45670: CALL_OW 274
45674: PPUSH
45675: LD_VAR 0 2
45679: PPUSH
45680: LD_INT 0
45682: PPUSH
45683: CALL 43237 0 3
45687: PPUSH
45688: LD_INT 30
45690: PUSH
45691: LD_INT 3
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PPUSH
45698: CALL_OW 72
45702: ST_TO_ADDR
// if not factories then
45703: LD_VAR 0 6
45707: NOT
45708: IFFALSE 45712
// exit ;
45710: GO 46702
// for i in factories do
45712: LD_ADDR_VAR 0 8
45716: PUSH
45717: LD_VAR 0 6
45721: PUSH
45722: FOR_IN
45723: IFFALSE 45748
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45725: LD_ADDR_VAR 0 17
45729: PUSH
45730: LD_VAR 0 17
45734: PUSH
45735: LD_VAR 0 8
45739: PPUSH
45740: CALL_OW 478
45744: UNION
45745: ST_TO_ADDR
45746: GO 45722
45748: POP
45749: POP
// if not fac_list then
45750: LD_VAR 0 17
45754: NOT
45755: IFFALSE 45759
// exit ;
45757: GO 46702
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45759: LD_ADDR_VAR 0 5
45763: PUSH
45764: LD_INT 4
45766: PUSH
45767: LD_INT 5
45769: PUSH
45770: LD_INT 9
45772: PUSH
45773: LD_INT 10
45775: PUSH
45776: LD_INT 6
45778: PUSH
45779: LD_INT 7
45781: PUSH
45782: LD_INT 11
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 27
45796: PUSH
45797: LD_INT 28
45799: PUSH
45800: LD_INT 26
45802: PUSH
45803: LD_INT 30
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 43
45814: PUSH
45815: LD_INT 44
45817: PUSH
45818: LD_INT 46
45820: PUSH
45821: LD_INT 45
45823: PUSH
45824: LD_INT 47
45826: PUSH
45827: LD_INT 49
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: LIST
45842: PUSH
45843: LD_VAR 0 12
45847: ARRAY
45848: ST_TO_ADDR
// list := list isect fac_list ;
45849: LD_ADDR_VAR 0 5
45853: PUSH
45854: LD_VAR 0 5
45858: PUSH
45859: LD_VAR 0 17
45863: ISECT
45864: ST_TO_ADDR
// if not list then
45865: LD_VAR 0 5
45869: NOT
45870: IFFALSE 45874
// exit ;
45872: GO 46702
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
45874: LD_VAR 0 12
45878: PUSH
45879: LD_INT 3
45881: EQUAL
45882: IFFALSE 45894
45884: PUSH
45885: LD_INT 49
45887: PUSH
45888: LD_VAR 0 5
45892: IN
45893: AND
45894: IFFALSE 45914
45896: PUSH
45897: LD_INT 31
45899: PPUSH
45900: LD_VAR 0 16
45904: PPUSH
45905: CALL_OW 321
45909: PUSH
45910: LD_INT 2
45912: EQUAL
45913: AND
45914: IFFALSE 45974
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45916: LD_INT 22
45918: PUSH
45919: LD_VAR 0 16
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 35
45930: PUSH
45931: LD_INT 49
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 91
45940: PUSH
45941: LD_VAR 0 1
45945: PUSH
45946: LD_INT 10
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: LIST
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: LIST
45958: PPUSH
45959: CALL_OW 69
45963: NOT
45964: IFFALSE 45974
// weapon := ru_time_lapser ;
45966: LD_ADDR_VAR 0 18
45970: PUSH
45971: LD_INT 49
45973: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
45974: LD_VAR 0 12
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: LD_INT 2
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: IN
45989: IFFALSE 46013
45991: PUSH
45992: LD_INT 11
45994: PUSH
45995: LD_VAR 0 5
45999: IN
46000: IFTRUE 46012
46002: PUSH
46003: LD_INT 30
46005: PUSH
46006: LD_VAR 0 5
46010: IN
46011: OR
46012: AND
46013: IFFALSE 46033
46015: PUSH
46016: LD_INT 6
46018: PPUSH
46019: LD_VAR 0 16
46023: PPUSH
46024: CALL_OW 321
46028: PUSH
46029: LD_INT 2
46031: EQUAL
46032: AND
46033: IFFALSE 46200
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46035: LD_INT 22
46037: PUSH
46038: LD_VAR 0 16
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 2
46049: PUSH
46050: LD_INT 35
46052: PUSH
46053: LD_INT 11
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 35
46062: PUSH
46063: LD_INT 30
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 91
46077: PUSH
46078: LD_VAR 0 1
46082: PUSH
46083: LD_INT 18
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: LIST
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: LIST
46095: PPUSH
46096: CALL_OW 69
46100: NOT
46101: IFFALSE 46177
46103: PUSH
46104: LD_INT 22
46106: PUSH
46107: LD_VAR 0 16
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 2
46118: PUSH
46119: LD_INT 30
46121: PUSH
46122: LD_INT 32
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 30
46131: PUSH
46132: LD_INT 33
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 91
46146: PUSH
46147: LD_VAR 0 1
46151: PUSH
46152: LD_INT 12
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: LIST
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: LIST
46164: PUSH
46165: EMPTY
46166: LIST
46167: PPUSH
46168: CALL_OW 69
46172: PUSH
46173: LD_INT 2
46175: GREATER
46176: AND
46177: IFFALSE 46200
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46179: LD_ADDR_VAR 0 18
46183: PUSH
46184: LD_INT 11
46186: PUSH
46187: LD_INT 30
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_VAR 0 12
46198: ARRAY
46199: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46200: LD_VAR 0 18
46204: NOT
46205: IFFALSE 46225
46207: PUSH
46208: LD_INT 40
46210: PPUSH
46211: LD_VAR 0 16
46215: PPUSH
46216: CALL_OW 321
46220: PUSH
46221: LD_INT 2
46223: EQUAL
46224: AND
46225: IFFALSE 46261
46227: PUSH
46228: LD_INT 7
46230: PUSH
46231: LD_VAR 0 5
46235: IN
46236: IFTRUE 46248
46238: PUSH
46239: LD_INT 28
46241: PUSH
46242: LD_VAR 0 5
46246: IN
46247: OR
46248: IFTRUE 46260
46250: PUSH
46251: LD_INT 45
46253: PUSH
46254: LD_VAR 0 5
46258: IN
46259: OR
46260: AND
46261: IFFALSE 46515
// begin hex := GetHexInfo ( x , y ) ;
46263: LD_ADDR_VAR 0 4
46267: PUSH
46268: LD_VAR 0 10
46272: PPUSH
46273: LD_VAR 0 11
46277: PPUSH
46278: CALL_OW 546
46282: ST_TO_ADDR
// if hex [ 1 ] then
46283: LD_VAR 0 4
46287: PUSH
46288: LD_INT 1
46290: ARRAY
46291: IFFALSE 46295
// exit ;
46293: GO 46702
// height := hex [ 2 ] ;
46295: LD_ADDR_VAR 0 15
46299: PUSH
46300: LD_VAR 0 4
46304: PUSH
46305: LD_INT 2
46307: ARRAY
46308: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46309: LD_ADDR_VAR 0 14
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: LD_INT 2
46319: PUSH
46320: LD_INT 3
46322: PUSH
46323: LD_INT 5
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: ST_TO_ADDR
// for i in tmp do
46332: LD_ADDR_VAR 0 8
46336: PUSH
46337: LD_VAR 0 14
46341: PUSH
46342: FOR_IN
46343: IFFALSE 46513
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46345: LD_ADDR_VAR 0 9
46349: PUSH
46350: LD_VAR 0 10
46354: PPUSH
46355: LD_VAR 0 8
46359: PPUSH
46360: LD_INT 5
46362: PPUSH
46363: CALL_OW 272
46367: PUSH
46368: LD_VAR 0 11
46372: PPUSH
46373: LD_VAR 0 8
46377: PPUSH
46378: LD_INT 5
46380: PPUSH
46381: CALL_OW 273
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46390: LD_VAR 0 9
46394: PUSH
46395: LD_INT 1
46397: ARRAY
46398: PPUSH
46399: LD_VAR 0 9
46403: PUSH
46404: LD_INT 2
46406: ARRAY
46407: PPUSH
46408: CALL_OW 488
46412: IFFALSE 46511
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46414: LD_ADDR_VAR 0 4
46418: PUSH
46419: LD_VAR 0 9
46423: PUSH
46424: LD_INT 1
46426: ARRAY
46427: PPUSH
46428: LD_VAR 0 9
46432: PUSH
46433: LD_INT 2
46435: ARRAY
46436: PPUSH
46437: CALL_OW 546
46441: ST_TO_ADDR
// if hex [ 1 ] then
46442: LD_VAR 0 4
46446: PUSH
46447: LD_INT 1
46449: ARRAY
46450: IFFALSE 46454
// continue ;
46452: GO 46342
// h := hex [ 2 ] ;
46454: LD_ADDR_VAR 0 13
46458: PUSH
46459: LD_VAR 0 4
46463: PUSH
46464: LD_INT 2
46466: ARRAY
46467: ST_TO_ADDR
// if h + 7 < height then
46468: LD_VAR 0 13
46472: PUSH
46473: LD_INT 7
46475: PLUS
46476: PUSH
46477: LD_VAR 0 15
46481: LESS
46482: IFFALSE 46511
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46484: LD_ADDR_VAR 0 18
46488: PUSH
46489: LD_INT 7
46491: PUSH
46492: LD_INT 28
46494: PUSH
46495: LD_INT 45
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: LIST
46502: PUSH
46503: LD_VAR 0 12
46507: ARRAY
46508: ST_TO_ADDR
// break ;
46509: GO 46513
// end ; end ; end ;
46511: GO 46342
46513: POP
46514: POP
// end ; if not weapon then
46515: LD_VAR 0 18
46519: NOT
46520: IFFALSE 46580
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46522: LD_ADDR_VAR 0 5
46526: PUSH
46527: LD_VAR 0 5
46531: PUSH
46532: LD_INT 11
46534: PUSH
46535: LD_INT 30
46537: PUSH
46538: LD_INT 49
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: LIST
46545: DIFF
46546: ST_TO_ADDR
// if not list then
46547: LD_VAR 0 5
46551: NOT
46552: IFFALSE 46556
// exit ;
46554: GO 46702
// weapon := list [ rand ( 1 , list ) ] ;
46556: LD_ADDR_VAR 0 18
46560: PUSH
46561: LD_VAR 0 5
46565: PUSH
46566: LD_INT 1
46568: PPUSH
46569: LD_VAR 0 5
46573: PPUSH
46574: CALL_OW 12
46578: ARRAY
46579: ST_TO_ADDR
// end ; if weapon then
46580: LD_VAR 0 18
46584: IFFALSE 46702
// begin tmp := CostOfWeapon ( weapon ) ;
46586: LD_ADDR_VAR 0 14
46590: PUSH
46591: LD_VAR 0 18
46595: PPUSH
46596: CALL_OW 451
46600: ST_TO_ADDR
// j := GetBase ( tower ) ;
46601: LD_ADDR_VAR 0 9
46605: PUSH
46606: LD_VAR 0 1
46610: PPUSH
46611: CALL_OW 274
46615: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46616: LD_VAR 0 9
46620: PPUSH
46621: LD_INT 1
46623: PPUSH
46624: CALL_OW 275
46628: PUSH
46629: LD_VAR 0 14
46633: PUSH
46634: LD_INT 1
46636: ARRAY
46637: GREATEREQUAL
46638: IFFALSE 46664
46640: PUSH
46641: LD_VAR 0 9
46645: PPUSH
46646: LD_INT 2
46648: PPUSH
46649: CALL_OW 275
46653: PUSH
46654: LD_VAR 0 14
46658: PUSH
46659: LD_INT 2
46661: ARRAY
46662: GREATEREQUAL
46663: AND
46664: IFFALSE 46690
46666: PUSH
46667: LD_VAR 0 9
46671: PPUSH
46672: LD_INT 3
46674: PPUSH
46675: CALL_OW 275
46679: PUSH
46680: LD_VAR 0 14
46684: PUSH
46685: LD_INT 3
46687: ARRAY
46688: GREATEREQUAL
46689: AND
46690: IFFALSE 46702
// result := weapon ;
46692: LD_ADDR_VAR 0 3
46696: PUSH
46697: LD_VAR 0 18
46701: ST_TO_ADDR
// end ; end ;
46702: LD_VAR 0 3
46706: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46707: LD_INT 0
46709: PPUSH
46710: PPUSH
// result := true ;
46711: LD_ADDR_VAR 0 3
46715: PUSH
46716: LD_INT 1
46718: ST_TO_ADDR
// if array1 = array2 then
46719: LD_VAR 0 1
46723: PUSH
46724: LD_VAR 0 2
46728: EQUAL
46729: IFFALSE 46789
// begin for i = 1 to array1 do
46731: LD_ADDR_VAR 0 4
46735: PUSH
46736: DOUBLE
46737: LD_INT 1
46739: DEC
46740: ST_TO_ADDR
46741: LD_VAR 0 1
46745: PUSH
46746: FOR_TO
46747: IFFALSE 46785
// if array1 [ i ] <> array2 [ i ] then
46749: LD_VAR 0 1
46753: PUSH
46754: LD_VAR 0 4
46758: ARRAY
46759: PUSH
46760: LD_VAR 0 2
46764: PUSH
46765: LD_VAR 0 4
46769: ARRAY
46770: NONEQUAL
46771: IFFALSE 46783
// begin result := false ;
46773: LD_ADDR_VAR 0 3
46777: PUSH
46778: LD_INT 0
46780: ST_TO_ADDR
// break ;
46781: GO 46785
// end ;
46783: GO 46746
46785: POP
46786: POP
// end else
46787: GO 46797
// result := false ;
46789: LD_ADDR_VAR 0 3
46793: PUSH
46794: LD_INT 0
46796: ST_TO_ADDR
// end ;
46797: LD_VAR 0 3
46801: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
46802: LD_INT 0
46804: PPUSH
46805: PPUSH
// if not array1 or not array2 then
46806: LD_VAR 0 1
46810: NOT
46811: IFTRUE 46820
46813: PUSH
46814: LD_VAR 0 2
46818: NOT
46819: OR
46820: IFFALSE 46824
// exit ;
46822: GO 46888
// result := true ;
46824: LD_ADDR_VAR 0 3
46828: PUSH
46829: LD_INT 1
46831: ST_TO_ADDR
// for i = 1 to array1 do
46832: LD_ADDR_VAR 0 4
46836: PUSH
46837: DOUBLE
46838: LD_INT 1
46840: DEC
46841: ST_TO_ADDR
46842: LD_VAR 0 1
46846: PUSH
46847: FOR_TO
46848: IFFALSE 46886
// if array1 [ i ] <> array2 [ i ] then
46850: LD_VAR 0 1
46854: PUSH
46855: LD_VAR 0 4
46859: ARRAY
46860: PUSH
46861: LD_VAR 0 2
46865: PUSH
46866: LD_VAR 0 4
46870: ARRAY
46871: NONEQUAL
46872: IFFALSE 46884
// begin result := false ;
46874: LD_ADDR_VAR 0 3
46878: PUSH
46879: LD_INT 0
46881: ST_TO_ADDR
// break ;
46882: GO 46886
// end ;
46884: GO 46847
46886: POP
46887: POP
// end ;
46888: LD_VAR 0 3
46892: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
46893: LD_INT 0
46895: PPUSH
46896: PPUSH
46897: PPUSH
// pom := GetBase ( fac ) ;
46898: LD_ADDR_VAR 0 5
46902: PUSH
46903: LD_VAR 0 1
46907: PPUSH
46908: CALL_OW 274
46912: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
46913: LD_ADDR_VAR 0 4
46917: PUSH
46918: LD_VAR 0 2
46922: PUSH
46923: LD_INT 1
46925: ARRAY
46926: PPUSH
46927: LD_VAR 0 2
46931: PUSH
46932: LD_INT 2
46934: ARRAY
46935: PPUSH
46936: LD_VAR 0 2
46940: PUSH
46941: LD_INT 3
46943: ARRAY
46944: PPUSH
46945: LD_VAR 0 2
46949: PUSH
46950: LD_INT 4
46952: ARRAY
46953: PPUSH
46954: CALL_OW 449
46958: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46959: LD_ADDR_VAR 0 3
46963: PUSH
46964: LD_VAR 0 5
46968: PPUSH
46969: LD_INT 1
46971: PPUSH
46972: CALL_OW 275
46976: PUSH
46977: LD_VAR 0 4
46981: PUSH
46982: LD_INT 1
46984: ARRAY
46985: GREATEREQUAL
46986: IFFALSE 47012
46988: PUSH
46989: LD_VAR 0 5
46993: PPUSH
46994: LD_INT 2
46996: PPUSH
46997: CALL_OW 275
47001: PUSH
47002: LD_VAR 0 4
47006: PUSH
47007: LD_INT 2
47009: ARRAY
47010: GREATEREQUAL
47011: AND
47012: IFFALSE 47038
47014: PUSH
47015: LD_VAR 0 5
47019: PPUSH
47020: LD_INT 3
47022: PPUSH
47023: CALL_OW 275
47027: PUSH
47028: LD_VAR 0 4
47032: PUSH
47033: LD_INT 3
47035: ARRAY
47036: GREATEREQUAL
47037: AND
47038: ST_TO_ADDR
// end ;
47039: LD_VAR 0 3
47043: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47044: LD_INT 0
47046: PPUSH
47047: PPUSH
47048: PPUSH
47049: PPUSH
// pom := GetBase ( building ) ;
47050: LD_ADDR_VAR 0 3
47054: PUSH
47055: LD_VAR 0 1
47059: PPUSH
47060: CALL_OW 274
47064: ST_TO_ADDR
// if not pom then
47065: LD_VAR 0 3
47069: NOT
47070: IFFALSE 47074
// exit ;
47072: GO 47248
// btype := GetBType ( building ) ;
47074: LD_ADDR_VAR 0 5
47078: PUSH
47079: LD_VAR 0 1
47083: PPUSH
47084: CALL_OW 266
47088: ST_TO_ADDR
// if btype = b_armoury then
47089: LD_VAR 0 5
47093: PUSH
47094: LD_INT 4
47096: EQUAL
47097: IFFALSE 47107
// btype := b_barracks ;
47099: LD_ADDR_VAR 0 5
47103: PUSH
47104: LD_INT 5
47106: ST_TO_ADDR
// if btype = b_depot then
47107: LD_VAR 0 5
47111: PUSH
47112: LD_INT 0
47114: EQUAL
47115: IFFALSE 47125
// btype := b_warehouse ;
47117: LD_ADDR_VAR 0 5
47121: PUSH
47122: LD_INT 1
47124: ST_TO_ADDR
// if btype = b_workshop then
47125: LD_VAR 0 5
47129: PUSH
47130: LD_INT 2
47132: EQUAL
47133: IFFALSE 47143
// btype := b_factory ;
47135: LD_ADDR_VAR 0 5
47139: PUSH
47140: LD_INT 3
47142: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47143: LD_ADDR_VAR 0 4
47147: PUSH
47148: LD_VAR 0 5
47152: PPUSH
47153: LD_VAR 0 1
47157: PPUSH
47158: CALL_OW 248
47162: PPUSH
47163: CALL_OW 450
47167: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47168: LD_ADDR_VAR 0 2
47172: PUSH
47173: LD_VAR 0 3
47177: PPUSH
47178: LD_INT 1
47180: PPUSH
47181: CALL_OW 275
47185: PUSH
47186: LD_VAR 0 4
47190: PUSH
47191: LD_INT 1
47193: ARRAY
47194: GREATEREQUAL
47195: IFFALSE 47221
47197: PUSH
47198: LD_VAR 0 3
47202: PPUSH
47203: LD_INT 2
47205: PPUSH
47206: CALL_OW 275
47210: PUSH
47211: LD_VAR 0 4
47215: PUSH
47216: LD_INT 2
47218: ARRAY
47219: GREATEREQUAL
47220: AND
47221: IFFALSE 47247
47223: PUSH
47224: LD_VAR 0 3
47228: PPUSH
47229: LD_INT 3
47231: PPUSH
47232: CALL_OW 275
47236: PUSH
47237: LD_VAR 0 4
47241: PUSH
47242: LD_INT 3
47244: ARRAY
47245: GREATEREQUAL
47246: AND
47247: ST_TO_ADDR
// end ;
47248: LD_VAR 0 2
47252: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47253: LD_INT 0
47255: PPUSH
47256: PPUSH
47257: PPUSH
// pom := GetBase ( building ) ;
47258: LD_ADDR_VAR 0 4
47262: PUSH
47263: LD_VAR 0 1
47267: PPUSH
47268: CALL_OW 274
47272: ST_TO_ADDR
// if not pom then
47273: LD_VAR 0 4
47277: NOT
47278: IFFALSE 47282
// exit ;
47280: GO 47387
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47282: LD_ADDR_VAR 0 5
47286: PUSH
47287: LD_VAR 0 2
47291: PPUSH
47292: LD_VAR 0 1
47296: PPUSH
47297: CALL_OW 248
47301: PPUSH
47302: CALL_OW 450
47306: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47307: LD_ADDR_VAR 0 3
47311: PUSH
47312: LD_VAR 0 4
47316: PPUSH
47317: LD_INT 1
47319: PPUSH
47320: CALL_OW 275
47324: PUSH
47325: LD_VAR 0 5
47329: PUSH
47330: LD_INT 1
47332: ARRAY
47333: GREATEREQUAL
47334: IFFALSE 47360
47336: PUSH
47337: LD_VAR 0 4
47341: PPUSH
47342: LD_INT 2
47344: PPUSH
47345: CALL_OW 275
47349: PUSH
47350: LD_VAR 0 5
47354: PUSH
47355: LD_INT 2
47357: ARRAY
47358: GREATEREQUAL
47359: AND
47360: IFFALSE 47386
47362: PUSH
47363: LD_VAR 0 4
47367: PPUSH
47368: LD_INT 3
47370: PPUSH
47371: CALL_OW 275
47375: PUSH
47376: LD_VAR 0 5
47380: PUSH
47381: LD_INT 3
47383: ARRAY
47384: GREATEREQUAL
47385: AND
47386: ST_TO_ADDR
// end ;
47387: LD_VAR 0 3
47391: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47392: LD_INT 0
47394: PPUSH
47395: PPUSH
47396: PPUSH
47397: PPUSH
47398: PPUSH
47399: PPUSH
47400: PPUSH
47401: PPUSH
47402: PPUSH
47403: PPUSH
47404: PPUSH
// result := false ;
47405: LD_ADDR_VAR 0 8
47409: PUSH
47410: LD_INT 0
47412: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47413: LD_VAR 0 5
47417: NOT
47418: IFTRUE 47427
47420: PUSH
47421: LD_VAR 0 1
47425: NOT
47426: OR
47427: IFTRUE 47436
47429: PUSH
47430: LD_VAR 0 2
47434: NOT
47435: OR
47436: IFTRUE 47445
47438: PUSH
47439: LD_VAR 0 3
47443: NOT
47444: OR
47445: IFFALSE 47449
// exit ;
47447: GO 48275
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47449: LD_ADDR_VAR 0 14
47453: PUSH
47454: LD_VAR 0 1
47458: PPUSH
47459: LD_VAR 0 2
47463: PPUSH
47464: LD_VAR 0 3
47468: PPUSH
47469: LD_VAR 0 4
47473: PPUSH
47474: LD_VAR 0 5
47478: PUSH
47479: LD_INT 1
47481: ARRAY
47482: PPUSH
47483: CALL_OW 248
47487: PPUSH
47488: LD_INT 0
47490: PPUSH
47491: CALL 49556 0 6
47495: ST_TO_ADDR
// if not hexes then
47496: LD_VAR 0 14
47500: NOT
47501: IFFALSE 47505
// exit ;
47503: GO 48275
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47505: LD_ADDR_VAR 0 17
47509: PUSH
47510: LD_VAR 0 5
47514: PPUSH
47515: LD_INT 22
47517: PUSH
47518: LD_VAR 0 13
47522: PPUSH
47523: CALL_OW 255
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 2
47534: PUSH
47535: LD_INT 30
47537: PUSH
47538: LD_INT 0
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 30
47547: PUSH
47548: LD_INT 1
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: LIST
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PPUSH
47564: CALL_OW 72
47568: ST_TO_ADDR
// for i = 1 to hexes do
47569: LD_ADDR_VAR 0 9
47573: PUSH
47574: DOUBLE
47575: LD_INT 1
47577: DEC
47578: ST_TO_ADDR
47579: LD_VAR 0 14
47583: PUSH
47584: FOR_TO
47585: IFFALSE 48273
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47587: LD_ADDR_VAR 0 13
47591: PUSH
47592: LD_VAR 0 14
47596: PUSH
47597: LD_VAR 0 9
47601: ARRAY
47602: PUSH
47603: LD_INT 1
47605: ARRAY
47606: PPUSH
47607: LD_VAR 0 14
47611: PUSH
47612: LD_VAR 0 9
47616: ARRAY
47617: PUSH
47618: LD_INT 2
47620: ARRAY
47621: PPUSH
47622: CALL_OW 428
47626: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47627: LD_VAR 0 14
47631: PUSH
47632: LD_VAR 0 9
47636: ARRAY
47637: PUSH
47638: LD_INT 1
47640: ARRAY
47641: PPUSH
47642: LD_VAR 0 14
47646: PUSH
47647: LD_VAR 0 9
47651: ARRAY
47652: PUSH
47653: LD_INT 2
47655: ARRAY
47656: PPUSH
47657: CALL_OW 351
47661: IFTRUE 47700
47663: PUSH
47664: LD_VAR 0 14
47668: PUSH
47669: LD_VAR 0 9
47673: ARRAY
47674: PUSH
47675: LD_INT 1
47677: ARRAY
47678: PPUSH
47679: LD_VAR 0 14
47683: PUSH
47684: LD_VAR 0 9
47688: ARRAY
47689: PUSH
47690: LD_INT 2
47692: ARRAY
47693: PPUSH
47694: CALL_OW 488
47698: NOT
47699: OR
47700: IFTRUE 47717
47702: PUSH
47703: LD_VAR 0 13
47707: PPUSH
47708: CALL_OW 247
47712: PUSH
47713: LD_INT 3
47715: EQUAL
47716: OR
47717: IFFALSE 47723
// exit ;
47719: POP
47720: POP
47721: GO 48275
// if not tmp then
47723: LD_VAR 0 13
47727: NOT
47728: IFFALSE 47732
// continue ;
47730: GO 47584
// result := true ;
47732: LD_ADDR_VAR 0 8
47736: PUSH
47737: LD_INT 1
47739: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
47740: LD_VAR 0 6
47744: IFFALSE 47761
47746: PUSH
47747: LD_VAR 0 13
47751: PPUSH
47752: CALL_OW 247
47756: PUSH
47757: LD_INT 2
47759: EQUAL
47760: AND
47761: IFFALSE 47778
47763: PUSH
47764: LD_VAR 0 13
47768: PPUSH
47769: CALL_OW 263
47773: PUSH
47774: LD_INT 1
47776: EQUAL
47777: AND
47778: IFFALSE 47942
// begin if IsDrivenBy ( tmp ) then
47780: LD_VAR 0 13
47784: PPUSH
47785: CALL_OW 311
47789: IFFALSE 47793
// continue ;
47791: GO 47584
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
47793: LD_VAR 0 6
47797: PPUSH
47798: LD_INT 3
47800: PUSH
47801: LD_INT 60
47803: PUSH
47804: EMPTY
47805: LIST
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 3
47813: PUSH
47814: LD_INT 55
47816: PUSH
47817: EMPTY
47818: LIST
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PPUSH
47828: CALL_OW 72
47832: IFFALSE 47940
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
47834: LD_ADDR_VAR 0 18
47838: PUSH
47839: LD_VAR 0 6
47843: PPUSH
47844: LD_INT 3
47846: PUSH
47847: LD_INT 60
47849: PUSH
47850: EMPTY
47851: LIST
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 3
47859: PUSH
47860: LD_INT 55
47862: PUSH
47863: EMPTY
47864: LIST
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PPUSH
47874: CALL_OW 72
47878: PUSH
47879: LD_INT 1
47881: ARRAY
47882: ST_TO_ADDR
// if IsInUnit ( driver ) then
47883: LD_VAR 0 18
47887: PPUSH
47888: CALL_OW 310
47892: IFFALSE 47903
// ComExit ( driver ) ;
47894: LD_VAR 0 18
47898: PPUSH
47899: CALL 73546 0 1
// AddComEnterUnit ( driver , tmp ) ;
47903: LD_VAR 0 18
47907: PPUSH
47908: LD_VAR 0 13
47912: PPUSH
47913: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
47917: LD_VAR 0 18
47921: PPUSH
47922: LD_VAR 0 7
47926: PPUSH
47927: CALL_OW 173
// AddComExitVehicle ( driver ) ;
47931: LD_VAR 0 18
47935: PPUSH
47936: CALL_OW 181
// end ; continue ;
47940: GO 47584
// end ; if not cleaners or not tmp in cleaners then
47942: LD_VAR 0 6
47946: NOT
47947: IFTRUE 47962
47949: PUSH
47950: LD_VAR 0 13
47954: PUSH
47955: LD_VAR 0 6
47959: IN
47960: NOT
47961: OR
47962: IFFALSE 48271
// begin if dep then
47964: LD_VAR 0 17
47968: IFFALSE 48104
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47970: LD_ADDR_VAR 0 16
47974: PUSH
47975: LD_VAR 0 17
47979: PUSH
47980: LD_INT 1
47982: ARRAY
47983: PPUSH
47984: CALL_OW 250
47988: PPUSH
47989: LD_VAR 0 17
47993: PUSH
47994: LD_INT 1
47996: ARRAY
47997: PPUSH
47998: CALL_OW 254
48002: PPUSH
48003: LD_INT 5
48005: PPUSH
48006: CALL_OW 272
48010: PUSH
48011: LD_VAR 0 17
48015: PUSH
48016: LD_INT 1
48018: ARRAY
48019: PPUSH
48020: CALL_OW 251
48024: PPUSH
48025: LD_VAR 0 17
48029: PUSH
48030: LD_INT 1
48032: ARRAY
48033: PPUSH
48034: CALL_OW 254
48038: PPUSH
48039: LD_INT 5
48041: PPUSH
48042: CALL_OW 273
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48051: LD_VAR 0 16
48055: PUSH
48056: LD_INT 1
48058: ARRAY
48059: PPUSH
48060: LD_VAR 0 16
48064: PUSH
48065: LD_INT 2
48067: ARRAY
48068: PPUSH
48069: CALL_OW 488
48073: IFFALSE 48104
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48075: LD_VAR 0 13
48079: PPUSH
48080: LD_VAR 0 16
48084: PUSH
48085: LD_INT 1
48087: ARRAY
48088: PPUSH
48089: LD_VAR 0 16
48093: PUSH
48094: LD_INT 2
48096: ARRAY
48097: PPUSH
48098: CALL_OW 111
// continue ;
48102: GO 47584
// end ; end ; r := GetDir ( tmp ) ;
48104: LD_ADDR_VAR 0 15
48108: PUSH
48109: LD_VAR 0 13
48113: PPUSH
48114: CALL_OW 254
48118: ST_TO_ADDR
// if r = 5 then
48119: LD_VAR 0 15
48123: PUSH
48124: LD_INT 5
48126: EQUAL
48127: IFFALSE 48137
// r := 0 ;
48129: LD_ADDR_VAR 0 15
48133: PUSH
48134: LD_INT 0
48136: ST_TO_ADDR
// for j = r to 5 do
48137: LD_ADDR_VAR 0 10
48141: PUSH
48142: DOUBLE
48143: LD_VAR 0 15
48147: DEC
48148: ST_TO_ADDR
48149: LD_INT 5
48151: PUSH
48152: FOR_TO
48153: IFFALSE 48269
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48155: LD_ADDR_VAR 0 11
48159: PUSH
48160: LD_VAR 0 13
48164: PPUSH
48165: CALL_OW 250
48169: PPUSH
48170: LD_VAR 0 10
48174: PPUSH
48175: LD_INT 2
48177: PPUSH
48178: CALL_OW 272
48182: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48183: LD_ADDR_VAR 0 12
48187: PUSH
48188: LD_VAR 0 13
48192: PPUSH
48193: CALL_OW 251
48197: PPUSH
48198: LD_VAR 0 10
48202: PPUSH
48203: LD_INT 2
48205: PPUSH
48206: CALL_OW 273
48210: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48211: LD_VAR 0 11
48215: PPUSH
48216: LD_VAR 0 12
48220: PPUSH
48221: CALL_OW 488
48225: IFFALSE 48244
48227: PUSH
48228: LD_VAR 0 11
48232: PPUSH
48233: LD_VAR 0 12
48237: PPUSH
48238: CALL_OW 428
48242: NOT
48243: AND
48244: IFFALSE 48267
// begin ComMoveXY ( tmp , _x , _y ) ;
48246: LD_VAR 0 13
48250: PPUSH
48251: LD_VAR 0 11
48255: PPUSH
48256: LD_VAR 0 12
48260: PPUSH
48261: CALL_OW 111
// break ;
48265: GO 48269
// end ; end ;
48267: GO 48152
48269: POP
48270: POP
// end ; end ;
48271: GO 47584
48273: POP
48274: POP
// end ;
48275: LD_VAR 0 8
48279: RET
// export function BuildingTechInvented ( side , btype ) ; begin
48280: LD_INT 0
48282: PPUSH
// result := true ;
48283: LD_ADDR_VAR 0 3
48287: PUSH
48288: LD_INT 1
48290: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
48291: LD_VAR 0 2
48295: PUSH
48296: LD_INT 24
48298: DOUBLE
48299: EQUAL
48300: IFTRUE 48310
48302: LD_INT 33
48304: DOUBLE
48305: EQUAL
48306: IFTRUE 48310
48308: GO 48335
48310: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
48311: LD_ADDR_VAR 0 3
48315: PUSH
48316: LD_INT 32
48318: PPUSH
48319: LD_VAR 0 1
48323: PPUSH
48324: CALL_OW 321
48328: PUSH
48329: LD_INT 2
48331: EQUAL
48332: ST_TO_ADDR
48333: GO 48651
48335: LD_INT 20
48337: DOUBLE
48338: EQUAL
48339: IFTRUE 48343
48341: GO 48368
48343: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
48344: LD_ADDR_VAR 0 3
48348: PUSH
48349: LD_INT 6
48351: PPUSH
48352: LD_VAR 0 1
48356: PPUSH
48357: CALL_OW 321
48361: PUSH
48362: LD_INT 2
48364: EQUAL
48365: ST_TO_ADDR
48366: GO 48651
48368: LD_INT 22
48370: DOUBLE
48371: EQUAL
48372: IFTRUE 48382
48374: LD_INT 36
48376: DOUBLE
48377: EQUAL
48378: IFTRUE 48382
48380: GO 48407
48382: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
48383: LD_ADDR_VAR 0 3
48387: PUSH
48388: LD_INT 15
48390: PPUSH
48391: LD_VAR 0 1
48395: PPUSH
48396: CALL_OW 321
48400: PUSH
48401: LD_INT 2
48403: EQUAL
48404: ST_TO_ADDR
48405: GO 48651
48407: LD_INT 30
48409: DOUBLE
48410: EQUAL
48411: IFTRUE 48415
48413: GO 48440
48415: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
48416: LD_ADDR_VAR 0 3
48420: PUSH
48421: LD_INT 20
48423: PPUSH
48424: LD_VAR 0 1
48428: PPUSH
48429: CALL_OW 321
48433: PUSH
48434: LD_INT 2
48436: EQUAL
48437: ST_TO_ADDR
48438: GO 48651
48440: LD_INT 28
48442: DOUBLE
48443: EQUAL
48444: IFTRUE 48454
48446: LD_INT 21
48448: DOUBLE
48449: EQUAL
48450: IFTRUE 48454
48452: GO 48479
48454: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
48455: LD_ADDR_VAR 0 3
48459: PUSH
48460: LD_INT 21
48462: PPUSH
48463: LD_VAR 0 1
48467: PPUSH
48468: CALL_OW 321
48472: PUSH
48473: LD_INT 2
48475: EQUAL
48476: ST_TO_ADDR
48477: GO 48651
48479: LD_INT 16
48481: DOUBLE
48482: EQUAL
48483: IFTRUE 48487
48485: GO 48512
48487: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
48488: LD_ADDR_VAR 0 3
48492: PUSH
48493: LD_INT 84
48495: PPUSH
48496: LD_VAR 0 1
48500: PPUSH
48501: CALL_OW 321
48505: PUSH
48506: LD_INT 2
48508: EQUAL
48509: ST_TO_ADDR
48510: GO 48651
48512: LD_INT 19
48514: DOUBLE
48515: EQUAL
48516: IFTRUE 48526
48518: LD_INT 23
48520: DOUBLE
48521: EQUAL
48522: IFTRUE 48526
48524: GO 48551
48526: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
48527: LD_ADDR_VAR 0 3
48531: PUSH
48532: LD_INT 83
48534: PPUSH
48535: LD_VAR 0 1
48539: PPUSH
48540: CALL_OW 321
48544: PUSH
48545: LD_INT 2
48547: EQUAL
48548: ST_TO_ADDR
48549: GO 48651
48551: LD_INT 17
48553: DOUBLE
48554: EQUAL
48555: IFTRUE 48559
48557: GO 48584
48559: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
48560: LD_ADDR_VAR 0 3
48564: PUSH
48565: LD_INT 39
48567: PPUSH
48568: LD_VAR 0 1
48572: PPUSH
48573: CALL_OW 321
48577: PUSH
48578: LD_INT 2
48580: EQUAL
48581: ST_TO_ADDR
48582: GO 48651
48584: LD_INT 18
48586: DOUBLE
48587: EQUAL
48588: IFTRUE 48592
48590: GO 48617
48592: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
48593: LD_ADDR_VAR 0 3
48597: PUSH
48598: LD_INT 40
48600: PPUSH
48601: LD_VAR 0 1
48605: PPUSH
48606: CALL_OW 321
48610: PUSH
48611: LD_INT 2
48613: EQUAL
48614: ST_TO_ADDR
48615: GO 48651
48617: LD_INT 27
48619: DOUBLE
48620: EQUAL
48621: IFTRUE 48625
48623: GO 48650
48625: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
48626: LD_ADDR_VAR 0 3
48630: PUSH
48631: LD_INT 35
48633: PPUSH
48634: LD_VAR 0 1
48638: PPUSH
48639: CALL_OW 321
48643: PUSH
48644: LD_INT 2
48646: EQUAL
48647: ST_TO_ADDR
48648: GO 48651
48650: POP
// end ;
48651: LD_VAR 0 3
48655: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
48656: LD_INT 0
48658: PPUSH
48659: PPUSH
48660: PPUSH
48661: PPUSH
48662: PPUSH
48663: PPUSH
48664: PPUSH
48665: PPUSH
48666: PPUSH
48667: PPUSH
48668: PPUSH
// result := false ;
48669: LD_ADDR_VAR 0 6
48673: PUSH
48674: LD_INT 0
48676: ST_TO_ADDR
// if btype = b_depot then
48677: LD_VAR 0 2
48681: PUSH
48682: LD_INT 0
48684: EQUAL
48685: IFFALSE 48697
// begin result := true ;
48687: LD_ADDR_VAR 0 6
48691: PUSH
48692: LD_INT 1
48694: ST_TO_ADDR
// exit ;
48695: GO 49551
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48697: LD_VAR 0 1
48701: NOT
48702: IFTRUE 48727
48704: PUSH
48705: LD_VAR 0 1
48709: PPUSH
48710: CALL_OW 266
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: IN
48725: NOT
48726: OR
48727: IFTRUE 48736
48729: PUSH
48730: LD_VAR 0 2
48734: NOT
48735: OR
48736: IFTRUE 48772
48738: PUSH
48739: LD_VAR 0 5
48743: PUSH
48744: LD_INT 0
48746: PUSH
48747: LD_INT 1
48749: PUSH
48750: LD_INT 2
48752: PUSH
48753: LD_INT 3
48755: PUSH
48756: LD_INT 4
48758: PUSH
48759: LD_INT 5
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: IN
48770: NOT
48771: OR
48772: IFTRUE 48791
48774: PUSH
48775: LD_VAR 0 3
48779: PPUSH
48780: LD_VAR 0 4
48784: PPUSH
48785: CALL_OW 488
48789: NOT
48790: OR
48791: IFFALSE 48795
// exit ;
48793: GO 49551
// side := GetSide ( depot ) ;
48795: LD_ADDR_VAR 0 9
48799: PUSH
48800: LD_VAR 0 1
48804: PPUSH
48805: CALL_OW 255
48809: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
48810: LD_VAR 0 9
48814: PPUSH
48815: LD_VAR 0 2
48819: PPUSH
48820: CALL 48280 0 2
48824: NOT
48825: IFFALSE 48829
// exit ;
48827: GO 49551
// pom := GetBase ( depot ) ;
48829: LD_ADDR_VAR 0 10
48833: PUSH
48834: LD_VAR 0 1
48838: PPUSH
48839: CALL_OW 274
48843: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48844: LD_ADDR_VAR 0 11
48848: PUSH
48849: LD_VAR 0 2
48853: PPUSH
48854: LD_VAR 0 1
48858: PPUSH
48859: CALL_OW 248
48863: PPUSH
48864: CALL_OW 450
48868: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48869: LD_VAR 0 10
48873: PPUSH
48874: LD_INT 1
48876: PPUSH
48877: CALL_OW 275
48881: PUSH
48882: LD_VAR 0 11
48886: PUSH
48887: LD_INT 1
48889: ARRAY
48890: GREATEREQUAL
48891: IFFALSE 48917
48893: PUSH
48894: LD_VAR 0 10
48898: PPUSH
48899: LD_INT 2
48901: PPUSH
48902: CALL_OW 275
48906: PUSH
48907: LD_VAR 0 11
48911: PUSH
48912: LD_INT 2
48914: ARRAY
48915: GREATEREQUAL
48916: AND
48917: IFFALSE 48943
48919: PUSH
48920: LD_VAR 0 10
48924: PPUSH
48925: LD_INT 3
48927: PPUSH
48928: CALL_OW 275
48932: PUSH
48933: LD_VAR 0 11
48937: PUSH
48938: LD_INT 3
48940: ARRAY
48941: GREATEREQUAL
48942: AND
48943: NOT
48944: IFFALSE 48948
// exit ;
48946: GO 49551
// if GetBType ( depot ) = b_depot then
48948: LD_VAR 0 1
48952: PPUSH
48953: CALL_OW 266
48957: PUSH
48958: LD_INT 0
48960: EQUAL
48961: IFFALSE 48973
// dist := 28 else
48963: LD_ADDR_VAR 0 14
48967: PUSH
48968: LD_INT 28
48970: ST_TO_ADDR
48971: GO 48981
// dist := 36 ;
48973: LD_ADDR_VAR 0 14
48977: PUSH
48978: LD_INT 36
48980: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48981: LD_VAR 0 1
48985: PPUSH
48986: LD_VAR 0 3
48990: PPUSH
48991: LD_VAR 0 4
48995: PPUSH
48996: CALL_OW 297
49000: PUSH
49001: LD_VAR 0 14
49005: GREATER
49006: IFFALSE 49010
// exit ;
49008: GO 49551
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49010: LD_ADDR_VAR 0 12
49014: PUSH
49015: LD_VAR 0 2
49019: PPUSH
49020: LD_VAR 0 3
49024: PPUSH
49025: LD_VAR 0 4
49029: PPUSH
49030: LD_VAR 0 5
49034: PPUSH
49035: LD_VAR 0 1
49039: PPUSH
49040: CALL_OW 248
49044: PPUSH
49045: LD_INT 0
49047: PPUSH
49048: CALL 49556 0 6
49052: ST_TO_ADDR
// if not hexes then
49053: LD_VAR 0 12
49057: NOT
49058: IFFALSE 49062
// exit ;
49060: GO 49551
// hex := GetHexInfo ( x , y ) ;
49062: LD_ADDR_VAR 0 15
49066: PUSH
49067: LD_VAR 0 3
49071: PPUSH
49072: LD_VAR 0 4
49076: PPUSH
49077: CALL_OW 546
49081: ST_TO_ADDR
// if hex [ 1 ] then
49082: LD_VAR 0 15
49086: PUSH
49087: LD_INT 1
49089: ARRAY
49090: IFFALSE 49094
// exit ;
49092: GO 49551
// height := hex [ 2 ] ;
49094: LD_ADDR_VAR 0 13
49098: PUSH
49099: LD_VAR 0 15
49103: PUSH
49104: LD_INT 2
49106: ARRAY
49107: ST_TO_ADDR
// for i = 1 to hexes do
49108: LD_ADDR_VAR 0 7
49112: PUSH
49113: DOUBLE
49114: LD_INT 1
49116: DEC
49117: ST_TO_ADDR
49118: LD_VAR 0 12
49122: PUSH
49123: FOR_TO
49124: IFFALSE 49468
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49126: LD_VAR 0 12
49130: PUSH
49131: LD_VAR 0 7
49135: ARRAY
49136: PUSH
49137: LD_INT 1
49139: ARRAY
49140: PPUSH
49141: LD_VAR 0 12
49145: PUSH
49146: LD_VAR 0 7
49150: ARRAY
49151: PUSH
49152: LD_INT 2
49154: ARRAY
49155: PPUSH
49156: CALL_OW 488
49160: NOT
49161: IFTRUE 49203
49163: PUSH
49164: LD_VAR 0 12
49168: PUSH
49169: LD_VAR 0 7
49173: ARRAY
49174: PUSH
49175: LD_INT 1
49177: ARRAY
49178: PPUSH
49179: LD_VAR 0 12
49183: PUSH
49184: LD_VAR 0 7
49188: ARRAY
49189: PUSH
49190: LD_INT 2
49192: ARRAY
49193: PPUSH
49194: CALL_OW 428
49198: PUSH
49199: LD_INT 0
49201: GREATER
49202: OR
49203: IFTRUE 49241
49205: PUSH
49206: LD_VAR 0 12
49210: PUSH
49211: LD_VAR 0 7
49215: ARRAY
49216: PUSH
49217: LD_INT 1
49219: ARRAY
49220: PPUSH
49221: LD_VAR 0 12
49225: PUSH
49226: LD_VAR 0 7
49230: ARRAY
49231: PUSH
49232: LD_INT 2
49234: ARRAY
49235: PPUSH
49236: CALL_OW 351
49240: OR
49241: IFFALSE 49247
// exit ;
49243: POP
49244: POP
49245: GO 49551
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49247: LD_ADDR_VAR 0 8
49251: PUSH
49252: LD_VAR 0 12
49256: PUSH
49257: LD_VAR 0 7
49261: ARRAY
49262: PUSH
49263: LD_INT 1
49265: ARRAY
49266: PPUSH
49267: LD_VAR 0 12
49271: PUSH
49272: LD_VAR 0 7
49276: ARRAY
49277: PUSH
49278: LD_INT 2
49280: ARRAY
49281: PPUSH
49282: CALL_OW 546
49286: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49287: LD_VAR 0 8
49291: PUSH
49292: LD_INT 1
49294: ARRAY
49295: IFTRUE 49317
49297: PUSH
49298: LD_VAR 0 8
49302: PUSH
49303: LD_INT 2
49305: ARRAY
49306: PUSH
49307: LD_VAR 0 13
49311: PUSH
49312: LD_INT 2
49314: PLUS
49315: GREATER
49316: OR
49317: IFTRUE 49339
49319: PUSH
49320: LD_VAR 0 8
49324: PUSH
49325: LD_INT 2
49327: ARRAY
49328: PUSH
49329: LD_VAR 0 13
49333: PUSH
49334: LD_INT 2
49336: MINUS
49337: LESS
49338: OR
49339: IFTRUE 49407
49341: PUSH
49342: LD_VAR 0 8
49346: PUSH
49347: LD_INT 3
49349: ARRAY
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: LD_INT 8
49356: PUSH
49357: LD_INT 9
49359: PUSH
49360: LD_INT 10
49362: PUSH
49363: LD_INT 11
49365: PUSH
49366: LD_INT 12
49368: PUSH
49369: LD_INT 13
49371: PUSH
49372: LD_INT 16
49374: PUSH
49375: LD_INT 17
49377: PUSH
49378: LD_INT 18
49380: PUSH
49381: LD_INT 19
49383: PUSH
49384: LD_INT 20
49386: PUSH
49387: LD_INT 21
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: IN
49405: NOT
49406: OR
49407: IFTRUE 49420
49409: PUSH
49410: LD_VAR 0 8
49414: PUSH
49415: LD_INT 5
49417: ARRAY
49418: NOT
49419: OR
49420: IFTRUE 49460
49422: PUSH
49423: LD_VAR 0 8
49427: PUSH
49428: LD_INT 6
49430: ARRAY
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: LD_INT 2
49437: PUSH
49438: LD_INT 7
49440: PUSH
49441: LD_INT 9
49443: PUSH
49444: LD_INT 10
49446: PUSH
49447: LD_INT 11
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: IN
49458: NOT
49459: OR
49460: IFFALSE 49466
// exit ;
49462: POP
49463: POP
49464: GO 49551
// end ;
49466: GO 49123
49468: POP
49469: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49470: LD_VAR 0 9
49474: PPUSH
49475: LD_VAR 0 3
49479: PPUSH
49480: LD_VAR 0 4
49484: PPUSH
49485: LD_INT 20
49487: PPUSH
49488: CALL 41370 0 4
49492: PUSH
49493: LD_INT 4
49495: ARRAY
49496: IFFALSE 49500
// exit ;
49498: GO 49551
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49500: LD_VAR 0 2
49504: PUSH
49505: LD_INT 29
49507: PUSH
49508: LD_INT 30
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: IN
49515: IFFALSE 49539
49517: PUSH
49518: LD_VAR 0 3
49522: PPUSH
49523: LD_VAR 0 4
49527: PPUSH
49528: LD_VAR 0 9
49532: PPUSH
49533: CALL_OW 440
49537: NOT
49538: AND
49539: IFFALSE 49543
// exit ;
49541: GO 49551
// result := true ;
49543: LD_ADDR_VAR 0 6
49547: PUSH
49548: LD_INT 1
49550: ST_TO_ADDR
// end ;
49551: LD_VAR 0 6
49555: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49556: LD_INT 0
49558: PPUSH
49559: PPUSH
49560: PPUSH
49561: PPUSH
49562: PPUSH
49563: PPUSH
49564: PPUSH
49565: PPUSH
49566: PPUSH
49567: PPUSH
49568: PPUSH
49569: PPUSH
49570: PPUSH
49571: PPUSH
49572: PPUSH
49573: PPUSH
49574: PPUSH
49575: PPUSH
49576: PPUSH
49577: PPUSH
49578: PPUSH
49579: PPUSH
49580: PPUSH
49581: PPUSH
49582: PPUSH
49583: PPUSH
49584: PPUSH
49585: PPUSH
49586: PPUSH
49587: PPUSH
49588: PPUSH
49589: PPUSH
49590: PPUSH
49591: PPUSH
49592: PPUSH
49593: PPUSH
49594: PPUSH
49595: PPUSH
49596: PPUSH
49597: PPUSH
49598: PPUSH
49599: PPUSH
49600: PPUSH
49601: PPUSH
49602: PPUSH
49603: PPUSH
49604: PPUSH
49605: PPUSH
49606: PPUSH
49607: PPUSH
49608: PPUSH
49609: PPUSH
49610: PPUSH
49611: PPUSH
49612: PPUSH
49613: PPUSH
49614: PPUSH
49615: PPUSH
// result = [ ] ;
49616: LD_ADDR_VAR 0 7
49620: PUSH
49621: EMPTY
49622: ST_TO_ADDR
// temp_list = [ ] ;
49623: LD_ADDR_VAR 0 9
49627: PUSH
49628: EMPTY
49629: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49630: LD_VAR 0 4
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: LD_INT 2
49643: PUSH
49644: LD_INT 3
49646: PUSH
49647: LD_INT 4
49649: PUSH
49650: LD_INT 5
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: IN
49661: NOT
49662: IFTRUE 49705
49664: PUSH
49665: LD_VAR 0 1
49669: PUSH
49670: LD_INT 0
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: IN
49680: IFFALSE 49704
49682: PUSH
49683: LD_VAR 0 5
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: LD_INT 2
49693: PUSH
49694: LD_INT 3
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: LIST
49701: IN
49702: NOT
49703: AND
49704: OR
49705: IFFALSE 49709
// exit ;
49707: GO 68108
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49709: LD_VAR 0 1
49713: PUSH
49714: LD_INT 6
49716: PUSH
49717: LD_INT 7
49719: PUSH
49720: LD_INT 8
49722: PUSH
49723: LD_INT 13
49725: PUSH
49726: LD_INT 12
49728: PUSH
49729: LD_INT 15
49731: PUSH
49732: LD_INT 11
49734: PUSH
49735: LD_INT 14
49737: PUSH
49738: LD_INT 10
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: IN
49752: IFFALSE 49762
// btype = b_lab ;
49754: LD_ADDR_VAR 0 1
49758: PUSH
49759: LD_INT 6
49761: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49762: LD_VAR 0 6
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: LD_INT 2
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: LIST
49780: IN
49781: NOT
49782: IFTRUE 49850
49784: PUSH
49785: LD_VAR 0 1
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: LD_INT 1
49795: PUSH
49796: LD_INT 2
49798: PUSH
49799: LD_INT 3
49801: PUSH
49802: LD_INT 6
49804: PUSH
49805: LD_INT 36
49807: PUSH
49808: LD_INT 4
49810: PUSH
49811: LD_INT 5
49813: PUSH
49814: LD_INT 31
49816: PUSH
49817: LD_INT 32
49819: PUSH
49820: LD_INT 33
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: IN
49836: NOT
49837: IFFALSE 49849
49839: PUSH
49840: LD_VAR 0 6
49844: PUSH
49845: LD_INT 1
49847: EQUAL
49848: AND
49849: OR
49850: IFTRUE 49882
49852: PUSH
49853: LD_VAR 0 1
49857: PUSH
49858: LD_INT 2
49860: PUSH
49861: LD_INT 3
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: IN
49868: NOT
49869: IFFALSE 49881
49871: PUSH
49872: LD_VAR 0 6
49876: PUSH
49877: LD_INT 2
49879: EQUAL
49880: AND
49881: OR
49882: IFFALSE 49892
// mode = 0 ;
49884: LD_ADDR_VAR 0 6
49888: PUSH
49889: LD_INT 0
49891: ST_TO_ADDR
// case mode of 0 :
49892: LD_VAR 0 6
49896: PUSH
49897: LD_INT 0
49899: DOUBLE
49900: EQUAL
49901: IFTRUE 49905
49903: GO 61358
49905: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49906: LD_ADDR_VAR 0 11
49910: PUSH
49911: LD_INT 0
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: LD_INT 2
49991: NEG
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: LD_INT 2
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: PUSH
50022: LD_INT 2
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: LD_INT 2
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: NEG
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 1
50052: PUSH
50053: LD_INT 3
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: LD_INT 3
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: LD_INT 2
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50099: LD_ADDR_VAR 0 12
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 0
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 1
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 1
50157: NEG
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 1
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 2
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 2
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: LD_INT 1
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 2
50222: NEG
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 2
50233: NEG
50234: PUSH
50235: LD_INT 1
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 2
50245: NEG
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 3
50256: NEG
50257: PUSH
50258: LD_INT 0
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 3
50267: NEG
50268: PUSH
50269: LD_INT 1
50271: NEG
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50295: LD_ADDR_VAR 0 13
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 1
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: LD_INT 1
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 1
50376: NEG
50377: PUSH
50378: LD_INT 2
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 2
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 2
50398: PUSH
50399: LD_INT 2
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: LD_INT 2
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 2
50418: NEG
50419: PUSH
50420: LD_INT 1
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 2
50430: NEG
50431: PUSH
50432: LD_INT 2
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 2
50442: NEG
50443: PUSH
50444: LD_INT 3
50446: NEG
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 3
50454: NEG
50455: PUSH
50456: LD_INT 2
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 3
50466: NEG
50467: PUSH
50468: LD_INT 3
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50494: LD_ADDR_VAR 0 14
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: LD_INT 1
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 1
50522: PUSH
50523: LD_INT 0
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: PUSH
50533: LD_INT 1
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: NEG
50564: PUSH
50565: LD_INT 1
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: LD_INT 2
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: LD_INT 2
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: LD_INT 1
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: LD_INT 2
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: LD_INT 2
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: LD_INT 3
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: LD_INT 3
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50690: LD_ADDR_VAR 0 15
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: LD_INT 1
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: PUSH
50772: LD_INT 1
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 2
50782: PUSH
50783: LD_INT 0
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 2
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 1
50802: NEG
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 2
50813: NEG
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 2
50824: NEG
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 2
50836: PUSH
50837: LD_INT 1
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 3
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 3
50857: PUSH
50858: LD_INT 1
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50883: LD_ADDR_VAR 0 16
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: LD_INT 1
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: LD_INT 1
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 0
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 1
50941: NEG
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: LD_INT 1
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: NEG
50965: PUSH
50966: LD_INT 2
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 2
50976: PUSH
50977: LD_INT 1
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 2
50986: PUSH
50987: LD_INT 2
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: PUSH
50997: LD_INT 2
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 2
51006: NEG
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 2
51018: NEG
51019: PUSH
51020: LD_INT 2
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 3
51030: PUSH
51031: LD_INT 2
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 3
51040: PUSH
51041: LD_INT 3
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 2
51050: PUSH
51051: LD_INT 3
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51076: LD_ADDR_VAR 0 17
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: LD_INT 1
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: LD_INT 1
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: LD_INT 1
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: LD_INT 2
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: LD_INT 2
51172: NEG
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: LD_INT 1
51183: NEG
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 2
51191: PUSH
51192: LD_INT 0
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 2
51201: PUSH
51202: LD_INT 1
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 2
51211: PUSH
51212: LD_INT 2
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: LD_INT 2
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: LD_INT 2
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 2
51252: NEG
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 2
51263: NEG
51264: PUSH
51265: LD_INT 1
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 2
51275: NEG
51276: PUSH
51277: LD_INT 2
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51306: LD_ADDR_VAR 0 18
51310: PUSH
51311: LD_INT 0
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 0
51323: PUSH
51324: LD_INT 1
51326: NEG
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 1
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: LD_INT 1
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: LD_INT 1
51379: NEG
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 1
51387: NEG
51388: PUSH
51389: LD_INT 2
51391: NEG
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: LD_INT 2
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 1
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 2
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 2
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 2
51441: PUSH
51442: LD_INT 2
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: LD_INT 2
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: LD_INT 2
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 1
51471: NEG
51472: PUSH
51473: LD_INT 1
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 2
51482: NEG
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 2
51493: NEG
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 2
51505: NEG
51506: PUSH
51507: LD_INT 2
51509: NEG
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51536: LD_ADDR_VAR 0 19
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: LD_INT 1
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: LD_INT 2
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: LD_INT 2
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: PUSH
51641: LD_INT 1
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: PUSH
51652: LD_INT 0
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 2
51661: PUSH
51662: LD_INT 1
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 2
51671: PUSH
51672: LD_INT 2
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: LD_INT 2
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: LD_INT 2
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 1
51701: NEG
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 2
51712: NEG
51713: PUSH
51714: LD_INT 0
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 2
51723: NEG
51724: PUSH
51725: LD_INT 1
51727: NEG
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 2
51735: NEG
51736: PUSH
51737: LD_INT 2
51739: NEG
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51766: LD_ADDR_VAR 0 20
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 0
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 1
51804: PUSH
51805: LD_INT 1
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: LD_INT 1
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 1
51835: NEG
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 1
51847: NEG
51848: PUSH
51849: LD_INT 2
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: LD_INT 2
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 1
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 2
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 2
51891: PUSH
51892: LD_INT 1
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 2
51901: PUSH
51902: LD_INT 2
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: LD_INT 2
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: NEG
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 2
51942: NEG
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 2
51953: NEG
51954: PUSH
51955: LD_INT 1
51957: NEG
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 2
51965: NEG
51966: PUSH
51967: LD_INT 2
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51996: LD_ADDR_VAR 0 21
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 0
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: LD_INT 1
52069: NEG
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: LD_INT 2
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 0
52089: PUSH
52090: LD_INT 2
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 2
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 2
52121: PUSH
52122: LD_INT 1
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 2
52131: PUSH
52132: LD_INT 2
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: LD_INT 2
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: LD_INT 2
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 1
52161: NEG
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 2
52172: NEG
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 2
52183: NEG
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 2
52195: NEG
52196: PUSH
52197: LD_INT 2
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52226: LD_ADDR_VAR 0 22
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: LD_INT 1
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 1
52284: NEG
52285: PUSH
52286: LD_INT 0
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 1
52295: NEG
52296: PUSH
52297: LD_INT 1
52299: NEG
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: LD_INT 2
52311: NEG
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 0
52319: PUSH
52320: LD_INT 2
52322: NEG
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 1
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 2
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 2
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 2
52361: PUSH
52362: LD_INT 2
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: LD_INT 2
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: LD_INT 2
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 2
52402: NEG
52403: PUSH
52404: LD_INT 0
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 2
52413: NEG
52414: PUSH
52415: LD_INT 1
52417: NEG
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 2
52425: NEG
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52456: LD_ADDR_VAR 0 23
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 1
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: LD_INT 1
52529: NEG
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 1
52537: NEG
52538: PUSH
52539: LD_INT 2
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: LD_INT 2
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 2
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 2
52581: PUSH
52582: LD_INT 1
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: LD_INT 2
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: LD_INT 2
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 2
52632: NEG
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 2
52643: NEG
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 2
52655: NEG
52656: PUSH
52657: LD_INT 2
52659: NEG
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 2
52667: NEG
52668: PUSH
52669: LD_INT 3
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 1
52679: NEG
52680: PUSH
52681: LD_INT 3
52683: NEG
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: LD_INT 2
52694: NEG
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 2
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52736: LD_ADDR_VAR 0 24
52740: PUSH
52741: LD_INT 0
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: LD_INT 1
52756: NEG
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 1
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: LD_INT 1
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 1
52794: NEG
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 1
52805: NEG
52806: PUSH
52807: LD_INT 1
52809: NEG
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: NEG
52818: PUSH
52819: LD_INT 2
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: LD_INT 2
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: PUSH
52841: LD_INT 1
52843: NEG
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 2
52851: PUSH
52852: LD_INT 0
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 2
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 2
52871: PUSH
52872: LD_INT 2
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 1
52881: PUSH
52882: LD_INT 2
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: LD_INT 2
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 2
52912: NEG
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 2
52923: NEG
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 2
52935: NEG
52936: PUSH
52937: LD_INT 2
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: PUSH
52948: LD_INT 2
52950: NEG
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 2
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 3
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 3
52979: PUSH
52980: LD_INT 2
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53012: LD_ADDR_VAR 0 25
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: LD_INT 0
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: LD_INT 1
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: LD_INT 1
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: LD_INT 1
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 1
53070: NEG
53071: PUSH
53072: LD_INT 0
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: LD_INT 2
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: LD_INT 2
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 2
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 2
53137: PUSH
53138: LD_INT 1
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 2
53147: PUSH
53148: LD_INT 2
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: LD_INT 2
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 0
53167: PUSH
53168: LD_INT 2
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 1
53177: NEG
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 2
53188: NEG
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 2
53199: NEG
53200: PUSH
53201: LD_INT 1
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 2
53211: NEG
53212: PUSH
53213: LD_INT 2
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 3
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 3
53233: PUSH
53234: LD_INT 2
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 2
53243: PUSH
53244: LD_INT 3
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 1
53253: PUSH
53254: LD_INT 3
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53286: LD_ADDR_VAR 0 26
53290: PUSH
53291: LD_INT 0
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: LD_INT 1
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 1
53344: NEG
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: LD_INT 1
53359: NEG
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: LD_INT 2
53371: NEG
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: LD_INT 2
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 1
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 2
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 2
53411: PUSH
53412: LD_INT 1
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 2
53421: PUSH
53422: LD_INT 2
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: LD_INT 1
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 2
53462: NEG
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 2
53473: NEG
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 2
53485: NEG
53486: PUSH
53487: LD_INT 2
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 2
53497: PUSH
53498: LD_INT 3
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: LD_INT 3
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: LD_INT 2
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 2
53528: NEG
53529: PUSH
53530: LD_INT 1
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53562: LD_ADDR_VAR 0 27
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: LD_INT 0
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: LD_INT 1
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 1
53620: NEG
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 1
53643: NEG
53644: PUSH
53645: LD_INT 2
53647: NEG
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: LD_INT 2
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 2
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 2
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 2
53697: PUSH
53698: LD_INT 2
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: LD_INT 2
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: LD_INT 2
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 1
53727: NEG
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 2
53738: NEG
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 2
53749: NEG
53750: PUSH
53751: LD_INT 1
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 2
53761: NEG
53762: PUSH
53763: LD_INT 2
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: LD_INT 2
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 2
53784: NEG
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 3
53795: NEG
53796: PUSH
53797: LD_INT 1
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 3
53807: NEG
53808: PUSH
53809: LD_INT 2
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53842: LD_ADDR_VAR 0 28
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 0
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 1
53880: PUSH
53881: LD_INT 1
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 1
53900: NEG
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: LD_INT 1
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: LD_INT 2
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: LD_INT 2
53938: NEG
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 2
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 2
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 2
53977: PUSH
53978: LD_INT 2
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: LD_INT 2
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: LD_INT 2
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: LD_INT 1
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 2
54018: NEG
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 2
54029: NEG
54030: PUSH
54031: LD_INT 1
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 2
54041: NEG
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 2
54053: NEG
54054: PUSH
54055: LD_INT 3
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: LD_INT 3
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 3
54077: NEG
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 3
54089: NEG
54090: PUSH
54091: LD_INT 2
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54124: LD_ADDR_VAR 0 29
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: LD_INT 1
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 1
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 1
54182: NEG
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: LD_INT 1
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: LD_INT 2
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: LD_INT 2
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 2
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 2
54249: PUSH
54250: LD_INT 1
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: LD_INT 2
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: LD_INT 2
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: LD_INT 1
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 2
54290: NEG
54291: PUSH
54292: LD_INT 1
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 2
54302: NEG
54303: PUSH
54304: LD_INT 2
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 2
54314: NEG
54315: PUSH
54316: LD_INT 3
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 2
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 3
54337: PUSH
54338: LD_INT 1
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: LD_INT 3
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 1
54357: NEG
54358: PUSH
54359: LD_INT 2
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 3
54368: NEG
54369: PUSH
54370: LD_INT 2
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54403: LD_ADDR_VAR 0 30
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: LD_INT 1
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 1
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 1
54472: NEG
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: LD_INT 2
54488: NEG
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: LD_INT 2
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 2
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 2
54538: PUSH
54539: LD_INT 2
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: LD_INT 2
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 2
54569: NEG
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 2
54580: NEG
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: LD_INT 3
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: PUSH
54605: LD_INT 2
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 3
54615: PUSH
54616: LD_INT 2
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 2
54625: PUSH
54626: LD_INT 3
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 2
54635: NEG
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 3
54646: NEG
54647: PUSH
54648: LD_INT 1
54650: NEG
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54681: LD_ADDR_VAR 0 31
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 1
54750: NEG
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 1
54762: NEG
54763: PUSH
54764: LD_INT 2
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: LD_INT 1
54777: NEG
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 2
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 2
54795: PUSH
54796: LD_INT 1
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 2
54805: PUSH
54806: LD_INT 2
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: LD_INT 2
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: LD_INT 2
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 1
54835: NEG
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 2
54846: NEG
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 2
54858: NEG
54859: PUSH
54860: LD_INT 2
54862: NEG
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 2
54870: NEG
54871: PUSH
54872: LD_INT 3
54874: NEG
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 2
54882: PUSH
54883: LD_INT 1
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 3
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 1
54903: PUSH
54904: LD_INT 3
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: LD_INT 2
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 3
54924: NEG
54925: PUSH
54926: LD_INT 2
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54959: LD_ADDR_VAR 0 32
54963: PUSH
54964: LD_INT 0
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: LD_INT 1
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 1
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: PUSH
54998: LD_INT 1
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: LD_INT 1
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: NEG
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: LD_INT 1
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: LD_INT 2
55044: NEG
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: LD_INT 2
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: LD_INT 1
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 2
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 2
55084: PUSH
55085: LD_INT 2
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: PUSH
55095: LD_INT 2
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: LD_INT 2
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 1
55114: NEG
55115: PUSH
55116: LD_INT 1
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 2
55125: NEG
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 2
55136: NEG
55137: PUSH
55138: LD_INT 1
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: LD_INT 3
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 1
55160: PUSH
55161: LD_INT 2
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 3
55171: PUSH
55172: LD_INT 2
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 2
55181: PUSH
55182: LD_INT 3
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 2
55191: NEG
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 3
55202: NEG
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55237: LD_ADDR_VAR 0 33
55241: PUSH
55242: LD_INT 0
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 0
55254: PUSH
55255: LD_INT 1
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 1
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: LD_INT 1
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 1
55318: NEG
55319: PUSH
55320: LD_INT 2
55322: NEG
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: LD_INT 1
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 2
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 2
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: LD_INT 2
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: LD_INT 2
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: LD_INT 1
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 2
55392: NEG
55393: PUSH
55394: LD_INT 0
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 2
55403: NEG
55404: PUSH
55405: LD_INT 1
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 2
55415: NEG
55416: PUSH
55417: LD_INT 2
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 2
55427: NEG
55428: PUSH
55429: LD_INT 3
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 2
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 3
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: LD_INT 3
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: LD_INT 2
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 3
55481: NEG
55482: PUSH
55483: LD_INT 2
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55516: LD_ADDR_VAR 0 34
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 1
55554: PUSH
55555: LD_INT 1
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 0
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 1
55574: NEG
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 1
55585: NEG
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 1
55597: NEG
55598: PUSH
55599: LD_INT 2
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: LD_INT 2
55612: NEG
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 2
55631: PUSH
55632: LD_INT 1
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 2
55641: PUSH
55642: LD_INT 2
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 1
55651: PUSH
55652: LD_INT 2
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: NEG
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 2
55672: NEG
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 2
55683: NEG
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 2
55695: NEG
55696: PUSH
55697: LD_INT 2
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 1
55707: NEG
55708: PUSH
55709: LD_INT 3
55711: NEG
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 1
55719: PUSH
55720: LD_INT 2
55722: NEG
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 3
55730: PUSH
55731: LD_INT 2
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: LD_INT 3
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 2
55750: NEG
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 3
55761: NEG
55762: PUSH
55763: LD_INT 1
55765: NEG
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55796: LD_ADDR_VAR 0 35
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 1
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 0
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 1
55854: NEG
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 1
55865: NEG
55866: PUSH
55867: LD_INT 1
55869: NEG
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 2
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 2
55887: NEG
55888: PUSH
55889: LD_INT 1
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55908: LD_ADDR_VAR 0 36
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 0
55925: PUSH
55926: LD_INT 1
55928: NEG
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: PUSH
55937: LD_INT 0
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 1
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 0
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 1
55966: NEG
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 1
55977: NEG
55978: PUSH
55979: LD_INT 1
55981: NEG
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 1
55989: NEG
55990: PUSH
55991: LD_INT 2
55993: NEG
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 1
56001: PUSH
56002: LD_INT 2
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56020: LD_ADDR_VAR 0 37
56024: PUSH
56025: LD_INT 0
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: LD_INT 1
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 1
56078: NEG
56079: PUSH
56080: LD_INT 0
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 1
56089: NEG
56090: PUSH
56091: LD_INT 1
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: PUSH
56102: LD_INT 1
56104: NEG
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 1
56112: NEG
56113: PUSH
56114: LD_INT 1
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56132: LD_ADDR_VAR 0 38
56136: PUSH
56137: LD_INT 0
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: LD_INT 1
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 2
56213: PUSH
56214: LD_INT 1
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 2
56223: NEG
56224: PUSH
56225: LD_INT 1
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56244: LD_ADDR_VAR 0 39
56248: PUSH
56249: LD_INT 0
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: LD_INT 1
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 1
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: LD_INT 1
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: LD_INT 2
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: LD_INT 2
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56356: LD_ADDR_VAR 0 40
56360: PUSH
56361: LD_INT 0
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 1
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: LD_INT 1
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 1
56414: NEG
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: PUSH
56438: LD_INT 1
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: LD_INT 1
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56468: LD_ADDR_VAR 0 41
56472: PUSH
56473: LD_INT 0
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: LD_INT 1
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 1
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 1
56506: PUSH
56507: LD_INT 1
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: LD_INT 1
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 1
56526: NEG
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: NEG
56538: PUSH
56539: LD_INT 1
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: LD_INT 2
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 2
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 2
56582: PUSH
56583: LD_INT 1
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 2
56592: PUSH
56593: LD_INT 2
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 1
56602: PUSH
56603: LD_INT 2
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 1
56612: NEG
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 2
56623: NEG
56624: PUSH
56625: LD_INT 0
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 2
56634: NEG
56635: PUSH
56636: LD_INT 1
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 2
56646: NEG
56647: PUSH
56648: LD_INT 2
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 2
56658: NEG
56659: PUSH
56660: LD_INT 3
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 2
56670: PUSH
56671: LD_INT 1
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 3
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 3
56691: PUSH
56692: LD_INT 1
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 3
56701: PUSH
56702: LD_INT 2
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 3
56711: PUSH
56712: LD_INT 3
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 2
56721: PUSH
56722: LD_INT 3
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 2
56731: NEG
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 3
56742: NEG
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 3
56753: NEG
56754: PUSH
56755: LD_INT 1
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 3
56765: NEG
56766: PUSH
56767: LD_INT 2
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 3
56777: NEG
56778: PUSH
56779: LD_INT 3
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56818: LD_ADDR_VAR 0 42
56822: PUSH
56823: LD_INT 0
56825: PUSH
56826: LD_INT 0
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 0
56835: PUSH
56836: LD_INT 1
56838: NEG
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 1
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: LD_INT 1
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 1
56899: NEG
56900: PUSH
56901: LD_INT 2
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: LD_INT 2
56914: NEG
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: LD_INT 1
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 2
56933: PUSH
56934: LD_INT 1
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 2
56943: PUSH
56944: LD_INT 2
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 1
56953: PUSH
56954: LD_INT 2
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 0
56963: PUSH
56964: LD_INT 2
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 1
56973: NEG
56974: PUSH
56975: LD_INT 1
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 2
56984: NEG
56985: PUSH
56986: LD_INT 1
56988: NEG
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 2
56996: NEG
56997: PUSH
56998: LD_INT 2
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 2
57008: NEG
57009: PUSH
57010: LD_INT 3
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: LD_INT 3
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 0
57032: PUSH
57033: LD_INT 3
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: LD_INT 2
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 3
57054: PUSH
57055: LD_INT 2
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 3
57064: PUSH
57065: LD_INT 3
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 2
57074: PUSH
57075: LD_INT 3
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 1
57084: PUSH
57085: LD_INT 3
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: LD_INT 3
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 1
57104: NEG
57105: PUSH
57106: LD_INT 2
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 3
57115: NEG
57116: PUSH
57117: LD_INT 2
57119: NEG
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 3
57127: NEG
57128: PUSH
57129: LD_INT 3
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57168: LD_ADDR_VAR 0 43
57172: PUSH
57173: LD_INT 0
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 0
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 1
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 0
57216: PUSH
57217: LD_INT 1
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: NEG
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 1
57237: NEG
57238: PUSH
57239: LD_INT 1
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 1
57249: NEG
57250: PUSH
57251: LD_INT 2
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: LD_INT 2
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: LD_INT 1
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 2
57283: PUSH
57284: LD_INT 0
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 2
57293: PUSH
57294: LD_INT 1
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 1
57303: PUSH
57304: LD_INT 2
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: LD_INT 2
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 1
57323: NEG
57324: PUSH
57325: LD_INT 1
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 2
57334: NEG
57335: PUSH
57336: LD_INT 0
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 2
57345: NEG
57346: PUSH
57347: LD_INT 1
57349: NEG
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 1
57357: NEG
57358: PUSH
57359: LD_INT 3
57361: NEG
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: LD_INT 3
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: LD_INT 2
57383: NEG
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 2
57391: PUSH
57392: LD_INT 1
57394: NEG
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 3
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 3
57412: PUSH
57413: LD_INT 1
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 1
57422: PUSH
57423: LD_INT 3
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 0
57432: PUSH
57433: LD_INT 3
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: LD_INT 2
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 2
57453: NEG
57454: PUSH
57455: LD_INT 1
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 3
57464: NEG
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 3
57475: NEG
57476: PUSH
57477: LD_INT 1
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57516: LD_ADDR_VAR 0 44
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 1
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: NEG
57586: PUSH
57587: LD_INT 1
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 1
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 2
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 2
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 2
57640: PUSH
57641: LD_INT 2
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: LD_INT 2
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 1
57660: NEG
57661: PUSH
57662: LD_INT 1
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 2
57671: NEG
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 2
57682: NEG
57683: PUSH
57684: LD_INT 1
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 2
57694: NEG
57695: PUSH
57696: LD_INT 2
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 2
57706: NEG
57707: PUSH
57708: LD_INT 3
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 2
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 3
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 3
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 3
57749: PUSH
57750: LD_INT 2
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 3
57759: PUSH
57760: LD_INT 3
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 2
57769: PUSH
57770: LD_INT 3
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 2
57779: NEG
57780: PUSH
57781: LD_INT 1
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 3
57790: NEG
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 3
57801: NEG
57802: PUSH
57803: LD_INT 1
57805: NEG
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 3
57813: NEG
57814: PUSH
57815: LD_INT 2
57817: NEG
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 3
57825: NEG
57826: PUSH
57827: LD_INT 3
57829: NEG
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57866: LD_ADDR_VAR 0 45
57870: PUSH
57871: LD_INT 0
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: LD_INT 1
57886: NEG
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 1
57894: PUSH
57895: LD_INT 0
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 1
57904: PUSH
57905: LD_INT 1
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: LD_INT 1
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: LD_INT 0
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 1
57935: NEG
57936: PUSH
57937: LD_INT 1
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 1
57947: NEG
57948: PUSH
57949: LD_INT 2
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 0
57959: PUSH
57960: LD_INT 2
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 1
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 2
57981: PUSH
57982: LD_INT 1
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 2
57991: PUSH
57992: LD_INT 2
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 1
58001: PUSH
58002: LD_INT 2
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: LD_INT 2
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: LD_INT 1
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 2
58032: NEG
58033: PUSH
58034: LD_INT 1
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 2
58044: NEG
58045: PUSH
58046: LD_INT 2
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 2
58056: NEG
58057: PUSH
58058: LD_INT 3
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 1
58068: NEG
58069: PUSH
58070: LD_INT 3
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 0
58080: PUSH
58081: LD_INT 3
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 1
58091: PUSH
58092: LD_INT 2
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 3
58102: PUSH
58103: LD_INT 2
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 3
58112: PUSH
58113: LD_INT 3
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 2
58122: PUSH
58123: LD_INT 3
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 1
58132: PUSH
58133: LD_INT 3
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: LD_INT 3
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: LD_INT 2
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 3
58163: NEG
58164: PUSH
58165: LD_INT 2
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 3
58175: NEG
58176: PUSH
58177: LD_INT 3
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58216: LD_ADDR_VAR 0 46
58220: PUSH
58221: LD_INT 0
58223: PUSH
58224: LD_INT 0
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: LD_INT 1
58236: NEG
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 1
58244: PUSH
58245: LD_INT 0
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 1
58254: PUSH
58255: LD_INT 1
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: LD_INT 1
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 1
58285: NEG
58286: PUSH
58287: LD_INT 1
58289: NEG
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 1
58297: NEG
58298: PUSH
58299: LD_INT 2
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: LD_INT 2
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 1
58320: PUSH
58321: LD_INT 1
58323: NEG
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 2
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 2
58341: PUSH
58342: LD_INT 1
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 1
58351: PUSH
58352: LD_INT 2
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 0
58361: PUSH
58362: LD_INT 2
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 1
58371: NEG
58372: PUSH
58373: LD_INT 1
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 2
58382: NEG
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 2
58393: NEG
58394: PUSH
58395: LD_INT 1
58397: NEG
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 1
58405: NEG
58406: PUSH
58407: LD_INT 3
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 0
58417: PUSH
58418: LD_INT 3
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 1
58428: PUSH
58429: LD_INT 2
58431: NEG
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 2
58439: PUSH
58440: LD_INT 1
58442: NEG
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 3
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 3
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 1
58470: PUSH
58471: LD_INT 3
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: LD_INT 3
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 1
58490: NEG
58491: PUSH
58492: LD_INT 2
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 2
58501: NEG
58502: PUSH
58503: LD_INT 1
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 3
58512: NEG
58513: PUSH
58514: LD_INT 0
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 3
58523: NEG
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58564: LD_ADDR_VAR 0 47
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: LD_INT 1
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 1
58602: PUSH
58603: LD_INT 1
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 0
58612: PUSH
58613: LD_INT 1
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: NEG
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: LD_INT 1
58637: NEG
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: LD_INT 2
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: LD_INT 2
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 1
58668: PUSH
58669: LD_INT 1
58671: NEG
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 2
58679: NEG
58680: PUSH
58681: LD_INT 1
58683: NEG
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 2
58691: NEG
58692: PUSH
58693: LD_INT 2
58695: NEG
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58715: LD_ADDR_VAR 0 48
58719: PUSH
58720: LD_INT 0
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 0
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 1
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 1
58753: PUSH
58754: LD_INT 1
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 0
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 1
58773: NEG
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 1
58784: NEG
58785: PUSH
58786: LD_INT 1
58788: NEG
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: LD_INT 2
58800: NEG
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 0
58808: PUSH
58809: LD_INT 2
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 1
58819: PUSH
58820: LD_INT 1
58822: NEG
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 2
58830: PUSH
58831: LD_INT 0
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 2
58840: PUSH
58841: LD_INT 1
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58862: LD_ADDR_VAR 0 49
58866: PUSH
58867: LD_INT 0
58869: PUSH
58870: LD_INT 0
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 0
58879: PUSH
58880: LD_INT 1
58882: NEG
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 1
58890: PUSH
58891: LD_INT 0
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 1
58900: PUSH
58901: LD_INT 1
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: LD_INT 1
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 1
58920: NEG
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: LD_INT 1
58935: NEG
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 1
58943: PUSH
58944: LD_INT 1
58946: NEG
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 2
58954: PUSH
58955: LD_INT 0
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 2
58964: PUSH
58965: LD_INT 1
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 2
58974: PUSH
58975: LD_INT 2
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 1
58984: PUSH
58985: LD_INT 2
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59006: LD_ADDR_VAR 0 50
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: LD_INT 1
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 1
59034: PUSH
59035: LD_INT 0
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 0
59054: PUSH
59055: LD_INT 1
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 1
59064: NEG
59065: PUSH
59066: LD_INT 0
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 1
59075: NEG
59076: PUSH
59077: LD_INT 1
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 2
59087: PUSH
59088: LD_INT 1
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 2
59097: PUSH
59098: LD_INT 2
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 1
59107: PUSH
59108: LD_INT 2
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 0
59117: PUSH
59118: LD_INT 2
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 1
59127: NEG
59128: PUSH
59129: LD_INT 1
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59150: LD_ADDR_VAR 0 51
59154: PUSH
59155: LD_INT 0
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: LD_INT 1
59170: NEG
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 1
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 1
59188: PUSH
59189: LD_INT 1
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: LD_INT 1
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 1
59208: NEG
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 1
59219: NEG
59220: PUSH
59221: LD_INT 1
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 1
59231: PUSH
59232: LD_INT 2
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 0
59241: PUSH
59242: LD_INT 2
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: NEG
59252: PUSH
59253: LD_INT 1
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 2
59262: NEG
59263: PUSH
59264: LD_INT 0
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 2
59273: NEG
59274: PUSH
59275: LD_INT 1
59277: NEG
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59297: LD_ADDR_VAR 0 52
59301: PUSH
59302: LD_INT 0
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: LD_INT 1
59317: NEG
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 1
59325: PUSH
59326: LD_INT 0
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 1
59335: PUSH
59336: LD_INT 1
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 0
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 1
59355: NEG
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 1
59366: NEG
59367: PUSH
59368: LD_INT 1
59370: NEG
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 1
59378: NEG
59379: PUSH
59380: LD_INT 2
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 1
59390: NEG
59391: PUSH
59392: LD_INT 1
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 2
59401: NEG
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 2
59412: NEG
59413: PUSH
59414: LD_INT 1
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 2
59424: NEG
59425: PUSH
59426: LD_INT 2
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59448: LD_ADDR_VAR 0 53
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 0
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 1
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 1
59486: PUSH
59487: LD_INT 1
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 0
59496: PUSH
59497: LD_INT 1
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 1
59506: NEG
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 1
59517: NEG
59518: PUSH
59519: LD_INT 1
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 1
59529: NEG
59530: PUSH
59531: LD_INT 2
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 0
59541: PUSH
59542: LD_INT 2
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 1
59552: PUSH
59553: LD_INT 1
59555: NEG
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 2
59563: PUSH
59564: LD_INT 0
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 2
59573: PUSH
59574: LD_INT 1
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 2
59583: PUSH
59584: LD_INT 2
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 1
59593: PUSH
59594: LD_INT 2
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 0
59603: PUSH
59604: LD_INT 2
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 1
59613: NEG
59614: PUSH
59615: LD_INT 1
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 2
59624: NEG
59625: PUSH
59626: LD_INT 0
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 2
59635: NEG
59636: PUSH
59637: LD_INT 1
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 2
59647: NEG
59648: PUSH
59649: LD_INT 2
59651: NEG
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59678: LD_ADDR_VAR 0 54
59682: PUSH
59683: LD_INT 0
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 0
59695: PUSH
59696: LD_INT 1
59698: NEG
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 1
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 1
59716: PUSH
59717: LD_INT 1
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 0
59726: PUSH
59727: LD_INT 1
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 1
59736: NEG
59737: PUSH
59738: LD_INT 0
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 1
59747: NEG
59748: PUSH
59749: LD_INT 1
59751: NEG
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 1
59759: NEG
59760: PUSH
59761: LD_INT 2
59763: NEG
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 0
59771: PUSH
59772: LD_INT 2
59774: NEG
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: LD_INT 1
59785: NEG
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 2
59793: PUSH
59794: LD_INT 0
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 2
59803: PUSH
59804: LD_INT 1
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 2
59813: PUSH
59814: LD_INT 2
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 1
59823: PUSH
59824: LD_INT 2
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 0
59833: PUSH
59834: LD_INT 2
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 1
59843: NEG
59844: PUSH
59845: LD_INT 1
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 2
59854: NEG
59855: PUSH
59856: LD_INT 0
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 2
59865: NEG
59866: PUSH
59867: LD_INT 1
59869: NEG
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 2
59877: NEG
59878: PUSH
59879: LD_INT 2
59881: NEG
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59908: LD_ADDR_VAR 0 55
59912: PUSH
59913: LD_INT 0
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 0
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 1
59936: PUSH
59937: LD_INT 0
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 1
59946: PUSH
59947: LD_INT 1
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 0
59956: PUSH
59957: LD_INT 1
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 1
59966: NEG
59967: PUSH
59968: LD_INT 0
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 1
59977: NEG
59978: PUSH
59979: LD_INT 1
59981: NEG
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 1
59989: NEG
59990: PUSH
59991: LD_INT 2
59993: NEG
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 0
60001: PUSH
60002: LD_INT 2
60004: NEG
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 1
60012: PUSH
60013: LD_INT 1
60015: NEG
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 2
60023: PUSH
60024: LD_INT 0
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 2
60033: PUSH
60034: LD_INT 1
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 2
60043: PUSH
60044: LD_INT 2
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 1
60053: PUSH
60054: LD_INT 2
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 0
60063: PUSH
60064: LD_INT 2
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 1
60073: NEG
60074: PUSH
60075: LD_INT 1
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 2
60084: NEG
60085: PUSH
60086: LD_INT 0
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 2
60095: NEG
60096: PUSH
60097: LD_INT 1
60099: NEG
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 2
60107: NEG
60108: PUSH
60109: LD_INT 2
60111: NEG
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60138: LD_ADDR_VAR 0 56
60142: PUSH
60143: LD_INT 0
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 0
60155: PUSH
60156: LD_INT 1
60158: NEG
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 1
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 1
60176: PUSH
60177: LD_INT 1
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 0
60186: PUSH
60187: LD_INT 1
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 1
60196: NEG
60197: PUSH
60198: LD_INT 0
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 1
60207: NEG
60208: PUSH
60209: LD_INT 1
60211: NEG
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 1
60219: NEG
60220: PUSH
60221: LD_INT 2
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: LD_INT 2
60234: NEG
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 1
60242: PUSH
60243: LD_INT 1
60245: NEG
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 2
60253: PUSH
60254: LD_INT 0
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 2
60263: PUSH
60264: LD_INT 1
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 2
60273: PUSH
60274: LD_INT 2
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 1
60283: PUSH
60284: LD_INT 2
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 0
60293: PUSH
60294: LD_INT 2
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 1
60303: NEG
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 2
60314: NEG
60315: PUSH
60316: LD_INT 0
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 2
60325: NEG
60326: PUSH
60327: LD_INT 1
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 2
60337: NEG
60338: PUSH
60339: LD_INT 2
60341: NEG
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60368: LD_ADDR_VAR 0 57
60372: PUSH
60373: LD_INT 0
60375: PUSH
60376: LD_INT 0
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 0
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 1
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 1
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 1
60426: NEG
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 1
60437: NEG
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: NEG
60450: PUSH
60451: LD_INT 2
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 0
60461: PUSH
60462: LD_INT 2
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 1
60472: PUSH
60473: LD_INT 1
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 2
60483: PUSH
60484: LD_INT 0
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 2
60493: PUSH
60494: LD_INT 1
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 2
60503: PUSH
60504: LD_INT 2
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 1
60513: PUSH
60514: LD_INT 2
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 0
60523: PUSH
60524: LD_INT 2
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 1
60533: NEG
60534: PUSH
60535: LD_INT 1
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 2
60544: NEG
60545: PUSH
60546: LD_INT 0
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 2
60555: NEG
60556: PUSH
60557: LD_INT 1
60559: NEG
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 2
60567: NEG
60568: PUSH
60569: LD_INT 2
60571: NEG
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60598: LD_ADDR_VAR 0 58
60602: PUSH
60603: LD_INT 0
60605: PUSH
60606: LD_INT 0
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 0
60615: PUSH
60616: LD_INT 1
60618: NEG
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 1
60626: PUSH
60627: LD_INT 0
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 1
60636: PUSH
60637: LD_INT 1
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 0
60646: PUSH
60647: LD_INT 1
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 1
60656: NEG
60657: PUSH
60658: LD_INT 0
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 1
60667: NEG
60668: PUSH
60669: LD_INT 1
60671: NEG
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 1
60679: NEG
60680: PUSH
60681: LD_INT 2
60683: NEG
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 0
60691: PUSH
60692: LD_INT 2
60694: NEG
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 1
60702: PUSH
60703: LD_INT 1
60705: NEG
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 2
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 2
60723: PUSH
60724: LD_INT 1
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 2
60733: PUSH
60734: LD_INT 2
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 1
60743: PUSH
60744: LD_INT 2
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 0
60753: PUSH
60754: LD_INT 2
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 1
60763: NEG
60764: PUSH
60765: LD_INT 1
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 2
60774: NEG
60775: PUSH
60776: LD_INT 0
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 2
60785: NEG
60786: PUSH
60787: LD_INT 1
60789: NEG
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 2
60797: NEG
60798: PUSH
60799: LD_INT 2
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60828: LD_ADDR_VAR 0 59
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 0
60845: PUSH
60846: LD_INT 1
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 1
60856: PUSH
60857: LD_INT 0
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: LD_INT 1
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: LD_INT 1
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 1
60886: NEG
60887: PUSH
60888: LD_INT 0
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 1
60897: NEG
60898: PUSH
60899: LD_INT 1
60901: NEG
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60916: LD_ADDR_VAR 0 60
60920: PUSH
60921: LD_INT 0
60923: PUSH
60924: LD_INT 0
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 0
60933: PUSH
60934: LD_INT 1
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 1
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 1
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 0
60964: PUSH
60965: LD_INT 1
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 1
60974: NEG
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 1
60985: NEG
60986: PUSH
60987: LD_INT 1
60989: NEG
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61004: LD_ADDR_VAR 0 61
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: LD_INT 0
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: LD_INT 1
61024: NEG
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 1
61032: PUSH
61033: LD_INT 0
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 1
61042: PUSH
61043: LD_INT 1
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 0
61052: PUSH
61053: LD_INT 1
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 1
61062: NEG
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 1
61073: NEG
61074: PUSH
61075: LD_INT 1
61077: NEG
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61092: LD_ADDR_VAR 0 62
61096: PUSH
61097: LD_INT 0
61099: PUSH
61100: LD_INT 0
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 0
61109: PUSH
61110: LD_INT 1
61112: NEG
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 1
61120: PUSH
61121: LD_INT 0
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 1
61130: PUSH
61131: LD_INT 1
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: LD_INT 1
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 1
61150: NEG
61151: PUSH
61152: LD_INT 0
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 1
61161: NEG
61162: PUSH
61163: LD_INT 1
61165: NEG
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61180: LD_ADDR_VAR 0 63
61184: PUSH
61185: LD_INT 0
61187: PUSH
61188: LD_INT 0
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 0
61197: PUSH
61198: LD_INT 1
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 1
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 1
61218: PUSH
61219: LD_INT 1
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 0
61228: PUSH
61229: LD_INT 1
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 1
61238: NEG
61239: PUSH
61240: LD_INT 0
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 1
61249: NEG
61250: PUSH
61251: LD_INT 1
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61268: LD_ADDR_VAR 0 64
61272: PUSH
61273: LD_INT 0
61275: PUSH
61276: LD_INT 0
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 0
61285: PUSH
61286: LD_INT 1
61288: NEG
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 1
61296: PUSH
61297: LD_INT 0
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 1
61306: PUSH
61307: LD_INT 1
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: LD_INT 1
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 1
61326: NEG
61327: PUSH
61328: LD_INT 0
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 1
61337: NEG
61338: PUSH
61339: LD_INT 1
61341: NEG
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: ST_TO_ADDR
// end ; 1 :
61356: GO 67253
61358: LD_INT 1
61360: DOUBLE
61361: EQUAL
61362: IFTRUE 61366
61364: GO 63989
61366: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61367: LD_ADDR_VAR 0 11
61371: PUSH
61372: LD_INT 1
61374: NEG
61375: PUSH
61376: LD_INT 3
61378: NEG
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 0
61386: PUSH
61387: LD_INT 3
61389: NEG
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 1
61397: PUSH
61398: LD_INT 2
61400: NEG
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: LIST
61410: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61411: LD_ADDR_VAR 0 12
61415: PUSH
61416: LD_INT 2
61418: PUSH
61419: LD_INT 1
61421: NEG
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 3
61429: PUSH
61430: LD_INT 0
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 3
61439: PUSH
61440: LD_INT 1
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: LIST
61451: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61452: LD_ADDR_VAR 0 13
61456: PUSH
61457: LD_INT 3
61459: PUSH
61460: LD_INT 2
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 3
61469: PUSH
61470: LD_INT 3
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 2
61479: PUSH
61480: LD_INT 3
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: LIST
61491: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61492: LD_ADDR_VAR 0 14
61496: PUSH
61497: LD_INT 1
61499: PUSH
61500: LD_INT 3
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 0
61509: PUSH
61510: LD_INT 3
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 1
61519: NEG
61520: PUSH
61521: LD_INT 2
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: LIST
61532: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61533: LD_ADDR_VAR 0 15
61537: PUSH
61538: LD_INT 2
61540: NEG
61541: PUSH
61542: LD_INT 1
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 3
61551: NEG
61552: PUSH
61553: LD_INT 0
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 3
61562: NEG
61563: PUSH
61564: LD_INT 1
61566: NEG
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: LIST
61576: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61577: LD_ADDR_VAR 0 16
61581: PUSH
61582: LD_INT 2
61584: NEG
61585: PUSH
61586: LD_INT 3
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 3
61596: NEG
61597: PUSH
61598: LD_INT 2
61600: NEG
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 3
61608: NEG
61609: PUSH
61610: LD_INT 3
61612: NEG
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: LIST
61622: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61623: LD_ADDR_VAR 0 17
61627: PUSH
61628: LD_INT 1
61630: NEG
61631: PUSH
61632: LD_INT 3
61634: NEG
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 0
61642: PUSH
61643: LD_INT 3
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 1
61653: PUSH
61654: LD_INT 2
61656: NEG
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: LIST
61666: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61667: LD_ADDR_VAR 0 18
61671: PUSH
61672: LD_INT 2
61674: PUSH
61675: LD_INT 1
61677: NEG
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 3
61685: PUSH
61686: LD_INT 0
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 3
61695: PUSH
61696: LD_INT 1
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: LIST
61707: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61708: LD_ADDR_VAR 0 19
61712: PUSH
61713: LD_INT 3
61715: PUSH
61716: LD_INT 2
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 3
61725: PUSH
61726: LD_INT 3
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 2
61735: PUSH
61736: LD_INT 3
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: LIST
61747: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61748: LD_ADDR_VAR 0 20
61752: PUSH
61753: LD_INT 1
61755: PUSH
61756: LD_INT 3
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 0
61765: PUSH
61766: LD_INT 3
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 1
61775: NEG
61776: PUSH
61777: LD_INT 2
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: LIST
61788: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61789: LD_ADDR_VAR 0 21
61793: PUSH
61794: LD_INT 2
61796: NEG
61797: PUSH
61798: LD_INT 1
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 3
61807: NEG
61808: PUSH
61809: LD_INT 0
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 3
61818: NEG
61819: PUSH
61820: LD_INT 1
61822: NEG
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: LIST
61832: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61833: LD_ADDR_VAR 0 22
61837: PUSH
61838: LD_INT 2
61840: NEG
61841: PUSH
61842: LD_INT 3
61844: NEG
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 3
61852: NEG
61853: PUSH
61854: LD_INT 2
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 3
61864: NEG
61865: PUSH
61866: LD_INT 3
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: LIST
61878: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61879: LD_ADDR_VAR 0 23
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: LD_INT 3
61889: NEG
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 1
61897: NEG
61898: PUSH
61899: LD_INT 4
61901: NEG
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 1
61909: PUSH
61910: LD_INT 3
61912: NEG
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: LIST
61922: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61923: LD_ADDR_VAR 0 24
61927: PUSH
61928: LD_INT 3
61930: PUSH
61931: LD_INT 0
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 3
61940: PUSH
61941: LD_INT 1
61943: NEG
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 4
61951: PUSH
61952: LD_INT 1
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: LIST
61963: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61964: LD_ADDR_VAR 0 25
61968: PUSH
61969: LD_INT 3
61971: PUSH
61972: LD_INT 3
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 4
61981: PUSH
61982: LD_INT 3
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 3
61991: PUSH
61992: LD_INT 4
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: LIST
62003: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62004: LD_ADDR_VAR 0 26
62008: PUSH
62009: LD_INT 0
62011: PUSH
62012: LD_INT 3
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 1
62021: PUSH
62022: LD_INT 4
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 1
62031: NEG
62032: PUSH
62033: LD_INT 3
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: LIST
62044: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62045: LD_ADDR_VAR 0 27
62049: PUSH
62050: LD_INT 3
62052: NEG
62053: PUSH
62054: LD_INT 0
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 3
62063: NEG
62064: PUSH
62065: LD_INT 1
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 4
62074: NEG
62075: PUSH
62076: LD_INT 1
62078: NEG
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: LIST
62088: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62089: LD_ADDR_VAR 0 28
62093: PUSH
62094: LD_INT 3
62096: NEG
62097: PUSH
62098: LD_INT 3
62100: NEG
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 3
62108: NEG
62109: PUSH
62110: LD_INT 4
62112: NEG
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 4
62120: NEG
62121: PUSH
62122: LD_INT 3
62124: NEG
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: LIST
62134: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62135: LD_ADDR_VAR 0 29
62139: PUSH
62140: LD_INT 1
62142: NEG
62143: PUSH
62144: LD_INT 3
62146: NEG
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 0
62154: PUSH
62155: LD_INT 3
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 1
62165: PUSH
62166: LD_INT 2
62168: NEG
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 1
62176: NEG
62177: PUSH
62178: LD_INT 4
62180: NEG
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 0
62188: PUSH
62189: LD_INT 4
62191: NEG
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 1
62199: PUSH
62200: LD_INT 3
62202: NEG
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 1
62210: NEG
62211: PUSH
62212: LD_INT 5
62214: NEG
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: LD_INT 5
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 1
62233: PUSH
62234: LD_INT 4
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 1
62244: NEG
62245: PUSH
62246: LD_INT 6
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 0
62256: PUSH
62257: LD_INT 6
62259: NEG
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 1
62267: PUSH
62268: LD_INT 5
62270: NEG
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62290: LD_ADDR_VAR 0 30
62294: PUSH
62295: LD_INT 2
62297: PUSH
62298: LD_INT 1
62300: NEG
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 3
62308: PUSH
62309: LD_INT 0
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 3
62318: PUSH
62319: LD_INT 1
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 3
62328: PUSH
62329: LD_INT 1
62331: NEG
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 4
62339: PUSH
62340: LD_INT 0
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 4
62349: PUSH
62350: LD_INT 1
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 4
62359: PUSH
62360: LD_INT 1
62362: NEG
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 5
62370: PUSH
62371: LD_INT 0
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 5
62380: PUSH
62381: LD_INT 1
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 5
62390: PUSH
62391: LD_INT 1
62393: NEG
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 6
62401: PUSH
62402: LD_INT 0
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 6
62411: PUSH
62412: LD_INT 1
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62433: LD_ADDR_VAR 0 31
62437: PUSH
62438: LD_INT 3
62440: PUSH
62441: LD_INT 2
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 3
62450: PUSH
62451: LD_INT 3
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 2
62460: PUSH
62461: LD_INT 3
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 4
62470: PUSH
62471: LD_INT 3
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 4
62480: PUSH
62481: LD_INT 4
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 3
62490: PUSH
62491: LD_INT 4
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 5
62500: PUSH
62501: LD_INT 4
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 5
62510: PUSH
62511: LD_INT 5
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 4
62520: PUSH
62521: LD_INT 5
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 6
62530: PUSH
62531: LD_INT 5
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 6
62540: PUSH
62541: LD_INT 6
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 5
62550: PUSH
62551: LD_INT 6
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62572: LD_ADDR_VAR 0 32
62576: PUSH
62577: LD_INT 1
62579: PUSH
62580: LD_INT 3
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 0
62589: PUSH
62590: LD_INT 3
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 1
62599: NEG
62600: PUSH
62601: LD_INT 2
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 1
62610: PUSH
62611: LD_INT 4
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 0
62620: PUSH
62621: LD_INT 4
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 1
62630: NEG
62631: PUSH
62632: LD_INT 3
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 1
62641: PUSH
62642: LD_INT 5
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 0
62651: PUSH
62652: LD_INT 5
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 1
62661: NEG
62662: PUSH
62663: LD_INT 4
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 1
62672: PUSH
62673: LD_INT 6
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: LD_INT 6
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 1
62692: NEG
62693: PUSH
62694: LD_INT 5
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62715: LD_ADDR_VAR 0 33
62719: PUSH
62720: LD_INT 2
62722: NEG
62723: PUSH
62724: LD_INT 1
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 3
62733: NEG
62734: PUSH
62735: LD_INT 0
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 3
62744: NEG
62745: PUSH
62746: LD_INT 1
62748: NEG
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 3
62756: NEG
62757: PUSH
62758: LD_INT 1
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 4
62767: NEG
62768: PUSH
62769: LD_INT 0
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 4
62778: NEG
62779: PUSH
62780: LD_INT 1
62782: NEG
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 4
62790: NEG
62791: PUSH
62792: LD_INT 1
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 5
62801: NEG
62802: PUSH
62803: LD_INT 0
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 5
62812: NEG
62813: PUSH
62814: LD_INT 1
62816: NEG
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 5
62824: NEG
62825: PUSH
62826: LD_INT 1
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 6
62835: NEG
62836: PUSH
62837: LD_INT 0
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 6
62846: NEG
62847: PUSH
62848: LD_INT 1
62850: NEG
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62870: LD_ADDR_VAR 0 34
62874: PUSH
62875: LD_INT 2
62877: NEG
62878: PUSH
62879: LD_INT 3
62881: NEG
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 3
62889: NEG
62890: PUSH
62891: LD_INT 2
62893: NEG
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 3
62901: NEG
62902: PUSH
62903: LD_INT 3
62905: NEG
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 3
62913: NEG
62914: PUSH
62915: LD_INT 4
62917: NEG
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 4
62925: NEG
62926: PUSH
62927: LD_INT 3
62929: NEG
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 4
62937: NEG
62938: PUSH
62939: LD_INT 4
62941: NEG
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 4
62949: NEG
62950: PUSH
62951: LD_INT 5
62953: NEG
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 5
62961: NEG
62962: PUSH
62963: LD_INT 4
62965: NEG
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 5
62973: NEG
62974: PUSH
62975: LD_INT 5
62977: NEG
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 5
62985: NEG
62986: PUSH
62987: LD_INT 6
62989: NEG
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 6
62997: NEG
62998: PUSH
62999: LD_INT 5
63001: NEG
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 6
63009: NEG
63010: PUSH
63011: LD_INT 6
63013: NEG
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63033: LD_ADDR_VAR 0 41
63037: PUSH
63038: LD_INT 0
63040: PUSH
63041: LD_INT 2
63043: NEG
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 1
63051: NEG
63052: PUSH
63053: LD_INT 3
63055: NEG
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 1
63063: PUSH
63064: LD_INT 2
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: LIST
63076: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63077: LD_ADDR_VAR 0 42
63081: PUSH
63082: LD_INT 2
63084: PUSH
63085: LD_INT 0
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 2
63094: PUSH
63095: LD_INT 1
63097: NEG
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 3
63105: PUSH
63106: LD_INT 1
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: LIST
63117: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63118: LD_ADDR_VAR 0 43
63122: PUSH
63123: LD_INT 2
63125: PUSH
63126: LD_INT 2
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 3
63135: PUSH
63136: LD_INT 2
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 2
63145: PUSH
63146: LD_INT 3
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: LIST
63157: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63158: LD_ADDR_VAR 0 44
63162: PUSH
63163: LD_INT 0
63165: PUSH
63166: LD_INT 2
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 1
63175: PUSH
63176: LD_INT 3
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 1
63185: NEG
63186: PUSH
63187: LD_INT 2
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: LIST
63198: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63199: LD_ADDR_VAR 0 45
63203: PUSH
63204: LD_INT 2
63206: NEG
63207: PUSH
63208: LD_INT 0
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 2
63217: NEG
63218: PUSH
63219: LD_INT 1
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 3
63228: NEG
63229: PUSH
63230: LD_INT 1
63232: NEG
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: LIST
63242: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63243: LD_ADDR_VAR 0 46
63247: PUSH
63248: LD_INT 2
63250: NEG
63251: PUSH
63252: LD_INT 2
63254: NEG
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 2
63262: NEG
63263: PUSH
63264: LD_INT 3
63266: NEG
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 3
63274: NEG
63275: PUSH
63276: LD_INT 2
63278: NEG
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: LIST
63288: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63289: LD_ADDR_VAR 0 47
63293: PUSH
63294: LD_INT 2
63296: NEG
63297: PUSH
63298: LD_INT 3
63300: NEG
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 1
63308: NEG
63309: PUSH
63310: LD_INT 3
63312: NEG
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63322: LD_ADDR_VAR 0 48
63326: PUSH
63327: LD_INT 1
63329: PUSH
63330: LD_INT 2
63332: NEG
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 2
63340: PUSH
63341: LD_INT 1
63343: NEG
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63353: LD_ADDR_VAR 0 49
63357: PUSH
63358: LD_INT 3
63360: PUSH
63361: LD_INT 1
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 3
63370: PUSH
63371: LD_INT 2
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63382: LD_ADDR_VAR 0 50
63386: PUSH
63387: LD_INT 2
63389: PUSH
63390: LD_INT 3
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 1
63399: PUSH
63400: LD_INT 3
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63411: LD_ADDR_VAR 0 51
63415: PUSH
63416: LD_INT 1
63418: NEG
63419: PUSH
63420: LD_INT 2
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 2
63429: NEG
63430: PUSH
63431: LD_INT 1
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63442: LD_ADDR_VAR 0 52
63446: PUSH
63447: LD_INT 3
63449: NEG
63450: PUSH
63451: LD_INT 1
63453: NEG
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 3
63461: NEG
63462: PUSH
63463: LD_INT 2
63465: NEG
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63475: LD_ADDR_VAR 0 53
63479: PUSH
63480: LD_INT 1
63482: NEG
63483: PUSH
63484: LD_INT 3
63486: NEG
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: LD_INT 3
63497: NEG
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 1
63505: PUSH
63506: LD_INT 2
63508: NEG
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: LIST
63518: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63519: LD_ADDR_VAR 0 54
63523: PUSH
63524: LD_INT 2
63526: PUSH
63527: LD_INT 1
63529: NEG
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 3
63537: PUSH
63538: LD_INT 0
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 3
63547: PUSH
63548: LD_INT 1
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: LIST
63559: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63560: LD_ADDR_VAR 0 55
63564: PUSH
63565: LD_INT 3
63567: PUSH
63568: LD_INT 2
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 3
63577: PUSH
63578: LD_INT 3
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 2
63587: PUSH
63588: LD_INT 3
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: LIST
63599: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63600: LD_ADDR_VAR 0 56
63604: PUSH
63605: LD_INT 1
63607: PUSH
63608: LD_INT 3
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 0
63617: PUSH
63618: LD_INT 3
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 1
63627: NEG
63628: PUSH
63629: LD_INT 2
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: LIST
63640: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63641: LD_ADDR_VAR 0 57
63645: PUSH
63646: LD_INT 2
63648: NEG
63649: PUSH
63650: LD_INT 1
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 3
63659: NEG
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 3
63670: NEG
63671: PUSH
63672: LD_INT 1
63674: NEG
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: LIST
63684: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63685: LD_ADDR_VAR 0 58
63689: PUSH
63690: LD_INT 2
63692: NEG
63693: PUSH
63694: LD_INT 3
63696: NEG
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 3
63704: NEG
63705: PUSH
63706: LD_INT 2
63708: NEG
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 3
63716: NEG
63717: PUSH
63718: LD_INT 3
63720: NEG
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: LIST
63730: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63731: LD_ADDR_VAR 0 59
63735: PUSH
63736: LD_INT 1
63738: NEG
63739: PUSH
63740: LD_INT 2
63742: NEG
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: LD_INT 2
63753: NEG
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 1
63761: PUSH
63762: LD_INT 1
63764: NEG
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: LIST
63774: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63775: LD_ADDR_VAR 0 60
63779: PUSH
63780: LD_INT 1
63782: PUSH
63783: LD_INT 1
63785: NEG
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 2
63793: PUSH
63794: LD_INT 0
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 2
63803: PUSH
63804: LD_INT 1
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: LIST
63815: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63816: LD_ADDR_VAR 0 61
63820: PUSH
63821: LD_INT 2
63823: PUSH
63824: LD_INT 1
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 2
63833: PUSH
63834: LD_INT 2
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 1
63843: PUSH
63844: LD_INT 2
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: LIST
63855: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63856: LD_ADDR_VAR 0 62
63860: PUSH
63861: LD_INT 1
63863: PUSH
63864: LD_INT 2
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 0
63873: PUSH
63874: LD_INT 2
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 1
63883: NEG
63884: PUSH
63885: LD_INT 1
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: LIST
63896: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63897: LD_ADDR_VAR 0 63
63901: PUSH
63902: LD_INT 1
63904: NEG
63905: PUSH
63906: LD_INT 1
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 2
63915: NEG
63916: PUSH
63917: LD_INT 0
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 2
63926: NEG
63927: PUSH
63928: LD_INT 1
63930: NEG
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: LIST
63940: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63941: LD_ADDR_VAR 0 64
63945: PUSH
63946: LD_INT 1
63948: NEG
63949: PUSH
63950: LD_INT 2
63952: NEG
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 2
63960: NEG
63961: PUSH
63962: LD_INT 1
63964: NEG
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 2
63972: NEG
63973: PUSH
63974: LD_INT 2
63976: NEG
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: LIST
63986: ST_TO_ADDR
// end ; 2 :
63987: GO 67253
63989: LD_INT 2
63991: DOUBLE
63992: EQUAL
63993: IFTRUE 63997
63995: GO 67252
63997: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63998: LD_ADDR_VAR 0 29
64002: PUSH
64003: LD_INT 4
64005: PUSH
64006: LD_INT 0
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: LD_INT 4
64015: PUSH
64016: LD_INT 1
64018: NEG
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: LD_INT 5
64026: PUSH
64027: LD_INT 0
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 5
64036: PUSH
64037: LD_INT 1
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 4
64046: PUSH
64047: LD_INT 1
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 3
64056: PUSH
64057: LD_INT 0
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 3
64066: PUSH
64067: LD_INT 1
64069: NEG
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 3
64077: PUSH
64078: LD_INT 2
64080: NEG
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 5
64088: PUSH
64089: LD_INT 2
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 3
64098: PUSH
64099: LD_INT 3
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 3
64108: PUSH
64109: LD_INT 2
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 4
64118: PUSH
64119: LD_INT 3
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 4
64128: PUSH
64129: LD_INT 4
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 3
64138: PUSH
64139: LD_INT 4
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 2
64148: PUSH
64149: LD_INT 3
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 2
64158: PUSH
64159: LD_INT 2
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 4
64168: PUSH
64169: LD_INT 2
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: LD_INT 2
64178: PUSH
64179: LD_INT 4
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: LD_INT 0
64188: PUSH
64189: LD_INT 4
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 0
64198: PUSH
64199: LD_INT 3
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PUSH
64206: LD_INT 1
64208: PUSH
64209: LD_INT 4
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 1
64218: PUSH
64219: LD_INT 5
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: LD_INT 0
64228: PUSH
64229: LD_INT 5
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 1
64238: NEG
64239: PUSH
64240: LD_INT 4
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 1
64249: NEG
64250: PUSH
64251: LD_INT 3
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 2
64260: PUSH
64261: LD_INT 5
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 2
64270: NEG
64271: PUSH
64272: LD_INT 3
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 3
64281: NEG
64282: PUSH
64283: LD_INT 0
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 3
64292: NEG
64293: PUSH
64294: LD_INT 1
64296: NEG
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 2
64304: NEG
64305: PUSH
64306: LD_INT 0
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 2
64315: NEG
64316: PUSH
64317: LD_INT 1
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 3
64326: NEG
64327: PUSH
64328: LD_INT 1
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 4
64337: NEG
64338: PUSH
64339: LD_INT 0
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 4
64348: NEG
64349: PUSH
64350: LD_INT 1
64352: NEG
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 4
64360: NEG
64361: PUSH
64362: LD_INT 2
64364: NEG
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 2
64372: NEG
64373: PUSH
64374: LD_INT 2
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 4
64383: NEG
64384: PUSH
64385: LD_INT 4
64387: NEG
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 4
64395: NEG
64396: PUSH
64397: LD_INT 5
64399: NEG
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 3
64407: NEG
64408: PUSH
64409: LD_INT 4
64411: NEG
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 3
64419: NEG
64420: PUSH
64421: LD_INT 3
64423: NEG
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 4
64431: NEG
64432: PUSH
64433: LD_INT 3
64435: NEG
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 5
64443: NEG
64444: PUSH
64445: LD_INT 4
64447: NEG
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 5
64455: NEG
64456: PUSH
64457: LD_INT 5
64459: NEG
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 3
64467: NEG
64468: PUSH
64469: LD_INT 5
64471: NEG
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 5
64479: NEG
64480: PUSH
64481: LD_INT 3
64483: NEG
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64536: LD_ADDR_VAR 0 30
64540: PUSH
64541: LD_INT 4
64543: PUSH
64544: LD_INT 4
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 4
64553: PUSH
64554: LD_INT 3
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 5
64563: PUSH
64564: LD_INT 4
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 5
64573: PUSH
64574: LD_INT 5
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 4
64583: PUSH
64584: LD_INT 5
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 3
64593: PUSH
64594: LD_INT 4
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 3
64603: PUSH
64604: LD_INT 3
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: LD_INT 5
64613: PUSH
64614: LD_INT 3
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 3
64623: PUSH
64624: LD_INT 5
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: PUSH
64631: LD_INT 0
64633: PUSH
64634: LD_INT 3
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: LD_INT 0
64643: PUSH
64644: LD_INT 2
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 1
64653: PUSH
64654: LD_INT 3
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 1
64663: PUSH
64664: LD_INT 4
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 0
64673: PUSH
64674: LD_INT 4
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 1
64683: NEG
64684: PUSH
64685: LD_INT 3
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 1
64694: NEG
64695: PUSH
64696: LD_INT 2
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 2
64705: PUSH
64706: LD_INT 4
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 2
64715: NEG
64716: PUSH
64717: LD_INT 2
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 4
64726: NEG
64727: PUSH
64728: LD_INT 0
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 4
64737: NEG
64738: PUSH
64739: LD_INT 1
64741: NEG
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 3
64749: NEG
64750: PUSH
64751: LD_INT 0
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 3
64760: NEG
64761: PUSH
64762: LD_INT 1
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 4
64771: NEG
64772: PUSH
64773: LD_INT 1
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 5
64782: NEG
64783: PUSH
64784: LD_INT 0
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_INT 5
64793: NEG
64794: PUSH
64795: LD_INT 1
64797: NEG
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 5
64805: NEG
64806: PUSH
64807: LD_INT 2
64809: NEG
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 3
64817: NEG
64818: PUSH
64819: LD_INT 2
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 3
64828: NEG
64829: PUSH
64830: LD_INT 3
64832: NEG
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 3
64840: NEG
64841: PUSH
64842: LD_INT 4
64844: NEG
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 2
64852: NEG
64853: PUSH
64854: LD_INT 3
64856: NEG
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 2
64864: NEG
64865: PUSH
64866: LD_INT 2
64868: NEG
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 3
64876: NEG
64877: PUSH
64878: LD_INT 2
64880: NEG
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 4
64888: NEG
64889: PUSH
64890: LD_INT 3
64892: NEG
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: LD_INT 4
64900: NEG
64901: PUSH
64902: LD_INT 4
64904: NEG
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 2
64912: NEG
64913: PUSH
64914: LD_INT 4
64916: NEG
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 4
64924: NEG
64925: PUSH
64926: LD_INT 2
64928: NEG
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 0
64936: PUSH
64937: LD_INT 4
64939: NEG
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 0
64947: PUSH
64948: LD_INT 5
64950: NEG
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 1
64958: PUSH
64959: LD_INT 4
64961: NEG
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 1
64969: PUSH
64970: LD_INT 3
64972: NEG
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: LD_INT 0
64980: PUSH
64981: LD_INT 3
64983: NEG
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 1
64991: NEG
64992: PUSH
64993: LD_INT 4
64995: NEG
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 1
65003: NEG
65004: PUSH
65005: LD_INT 5
65007: NEG
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 2
65015: PUSH
65016: LD_INT 3
65018: NEG
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 2
65026: NEG
65027: PUSH
65028: LD_INT 5
65030: NEG
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65083: LD_ADDR_VAR 0 31
65087: PUSH
65088: LD_INT 0
65090: PUSH
65091: LD_INT 4
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 0
65100: PUSH
65101: LD_INT 3
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 1
65110: PUSH
65111: LD_INT 4
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 1
65120: PUSH
65121: LD_INT 5
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 0
65130: PUSH
65131: LD_INT 5
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 1
65140: NEG
65141: PUSH
65142: LD_INT 4
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 1
65151: NEG
65152: PUSH
65153: LD_INT 3
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 2
65162: PUSH
65163: LD_INT 5
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 2
65172: NEG
65173: PUSH
65174: LD_INT 3
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 3
65183: NEG
65184: PUSH
65185: LD_INT 0
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 3
65194: NEG
65195: PUSH
65196: LD_INT 1
65198: NEG
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 2
65206: NEG
65207: PUSH
65208: LD_INT 0
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 2
65217: NEG
65218: PUSH
65219: LD_INT 1
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 3
65228: NEG
65229: PUSH
65230: LD_INT 1
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 4
65239: NEG
65240: PUSH
65241: LD_INT 0
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 4
65250: NEG
65251: PUSH
65252: LD_INT 1
65254: NEG
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: LD_INT 4
65262: NEG
65263: PUSH
65264: LD_INT 2
65266: NEG
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 2
65274: NEG
65275: PUSH
65276: LD_INT 2
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 4
65285: NEG
65286: PUSH
65287: LD_INT 4
65289: NEG
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 4
65297: NEG
65298: PUSH
65299: LD_INT 5
65301: NEG
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 3
65309: NEG
65310: PUSH
65311: LD_INT 4
65313: NEG
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 3
65321: NEG
65322: PUSH
65323: LD_INT 3
65325: NEG
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 4
65333: NEG
65334: PUSH
65335: LD_INT 3
65337: NEG
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 5
65345: NEG
65346: PUSH
65347: LD_INT 4
65349: NEG
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: LD_INT 5
65357: NEG
65358: PUSH
65359: LD_INT 5
65361: NEG
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 3
65369: NEG
65370: PUSH
65371: LD_INT 5
65373: NEG
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 5
65381: NEG
65382: PUSH
65383: LD_INT 3
65385: NEG
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 0
65393: PUSH
65394: LD_INT 3
65396: NEG
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 0
65404: PUSH
65405: LD_INT 4
65407: NEG
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 1
65415: PUSH
65416: LD_INT 3
65418: NEG
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 1
65426: PUSH
65427: LD_INT 2
65429: NEG
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 0
65437: PUSH
65438: LD_INT 2
65440: NEG
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 1
65448: NEG
65449: PUSH
65450: LD_INT 3
65452: NEG
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 1
65460: NEG
65461: PUSH
65462: LD_INT 4
65464: NEG
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 2
65472: PUSH
65473: LD_INT 2
65475: NEG
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 2
65483: NEG
65484: PUSH
65485: LD_INT 4
65487: NEG
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 4
65495: PUSH
65496: LD_INT 0
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 4
65505: PUSH
65506: LD_INT 1
65508: NEG
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 5
65516: PUSH
65517: LD_INT 0
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 5
65526: PUSH
65527: LD_INT 1
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 4
65536: PUSH
65537: LD_INT 1
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 3
65546: PUSH
65547: LD_INT 0
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 3
65556: PUSH
65557: LD_INT 1
65559: NEG
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 3
65567: PUSH
65568: LD_INT 2
65570: NEG
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 5
65578: PUSH
65579: LD_INT 2
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65633: LD_ADDR_VAR 0 32
65637: PUSH
65638: LD_INT 4
65640: NEG
65641: PUSH
65642: LD_INT 0
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: PUSH
65649: LD_INT 4
65651: NEG
65652: PUSH
65653: LD_INT 1
65655: NEG
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: PUSH
65661: LD_INT 3
65663: NEG
65664: PUSH
65665: LD_INT 0
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 3
65674: NEG
65675: PUSH
65676: LD_INT 1
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 4
65685: NEG
65686: PUSH
65687: LD_INT 1
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 5
65696: NEG
65697: PUSH
65698: LD_INT 0
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_INT 5
65707: NEG
65708: PUSH
65709: LD_INT 1
65711: NEG
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 5
65719: NEG
65720: PUSH
65721: LD_INT 2
65723: NEG
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: LD_INT 3
65731: NEG
65732: PUSH
65733: LD_INT 2
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 3
65742: NEG
65743: PUSH
65744: LD_INT 3
65746: NEG
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 3
65754: NEG
65755: PUSH
65756: LD_INT 4
65758: NEG
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 2
65766: NEG
65767: PUSH
65768: LD_INT 3
65770: NEG
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 2
65778: NEG
65779: PUSH
65780: LD_INT 2
65782: NEG
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 3
65790: NEG
65791: PUSH
65792: LD_INT 2
65794: NEG
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 4
65802: NEG
65803: PUSH
65804: LD_INT 3
65806: NEG
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 4
65814: NEG
65815: PUSH
65816: LD_INT 4
65818: NEG
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 2
65826: NEG
65827: PUSH
65828: LD_INT 4
65830: NEG
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 4
65838: NEG
65839: PUSH
65840: LD_INT 2
65842: NEG
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 0
65850: PUSH
65851: LD_INT 4
65853: NEG
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 0
65861: PUSH
65862: LD_INT 5
65864: NEG
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 1
65872: PUSH
65873: LD_INT 4
65875: NEG
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 1
65883: PUSH
65884: LD_INT 3
65886: NEG
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 0
65894: PUSH
65895: LD_INT 3
65897: NEG
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 1
65905: NEG
65906: PUSH
65907: LD_INT 4
65909: NEG
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 1
65917: NEG
65918: PUSH
65919: LD_INT 5
65921: NEG
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 2
65929: PUSH
65930: LD_INT 3
65932: NEG
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 2
65940: NEG
65941: PUSH
65942: LD_INT 5
65944: NEG
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 3
65952: PUSH
65953: LD_INT 0
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 3
65962: PUSH
65963: LD_INT 1
65965: NEG
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 4
65973: PUSH
65974: LD_INT 0
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 4
65983: PUSH
65984: LD_INT 1
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: LD_INT 3
65993: PUSH
65994: LD_INT 1
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 2
66003: PUSH
66004: LD_INT 0
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 2
66013: PUSH
66014: LD_INT 1
66016: NEG
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 2
66024: PUSH
66025: LD_INT 2
66027: NEG
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 4
66035: PUSH
66036: LD_INT 2
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 4
66045: PUSH
66046: LD_INT 4
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: LD_INT 4
66055: PUSH
66056: LD_INT 3
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 5
66065: PUSH
66066: LD_INT 4
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 5
66075: PUSH
66076: LD_INT 5
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 4
66085: PUSH
66086: LD_INT 5
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 3
66095: PUSH
66096: LD_INT 4
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 3
66105: PUSH
66106: LD_INT 3
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 5
66115: PUSH
66116: LD_INT 3
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 3
66125: PUSH
66126: LD_INT 5
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66180: LD_ADDR_VAR 0 33
66184: PUSH
66185: LD_INT 4
66187: NEG
66188: PUSH
66189: LD_INT 4
66191: NEG
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 4
66199: NEG
66200: PUSH
66201: LD_INT 5
66203: NEG
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 3
66211: NEG
66212: PUSH
66213: LD_INT 4
66215: NEG
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 3
66223: NEG
66224: PUSH
66225: LD_INT 3
66227: NEG
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 4
66235: NEG
66236: PUSH
66237: LD_INT 3
66239: NEG
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: LD_INT 5
66247: NEG
66248: PUSH
66249: LD_INT 4
66251: NEG
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 5
66259: NEG
66260: PUSH
66261: LD_INT 5
66263: NEG
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 3
66271: NEG
66272: PUSH
66273: LD_INT 5
66275: NEG
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 5
66283: NEG
66284: PUSH
66285: LD_INT 3
66287: NEG
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 0
66295: PUSH
66296: LD_INT 3
66298: NEG
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 0
66306: PUSH
66307: LD_INT 4
66309: NEG
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 1
66317: PUSH
66318: LD_INT 3
66320: NEG
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 1
66328: PUSH
66329: LD_INT 2
66331: NEG
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 0
66339: PUSH
66340: LD_INT 2
66342: NEG
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 1
66350: NEG
66351: PUSH
66352: LD_INT 3
66354: NEG
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 1
66362: NEG
66363: PUSH
66364: LD_INT 4
66366: NEG
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 2
66374: PUSH
66375: LD_INT 2
66377: NEG
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 2
66385: NEG
66386: PUSH
66387: LD_INT 4
66389: NEG
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 4
66397: PUSH
66398: LD_INT 0
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 4
66407: PUSH
66408: LD_INT 1
66410: NEG
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 5
66418: PUSH
66419: LD_INT 0
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: LD_INT 5
66428: PUSH
66429: LD_INT 1
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 4
66438: PUSH
66439: LD_INT 1
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: LD_INT 3
66448: PUSH
66449: LD_INT 0
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: LD_INT 3
66458: PUSH
66459: LD_INT 1
66461: NEG
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 3
66469: PUSH
66470: LD_INT 2
66472: NEG
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 5
66480: PUSH
66481: LD_INT 2
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 3
66490: PUSH
66491: LD_INT 3
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: LD_INT 3
66500: PUSH
66501: LD_INT 2
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 4
66510: PUSH
66511: LD_INT 3
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 4
66520: PUSH
66521: LD_INT 4
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 3
66530: PUSH
66531: LD_INT 4
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 2
66540: PUSH
66541: LD_INT 3
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: LD_INT 2
66550: PUSH
66551: LD_INT 2
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 4
66560: PUSH
66561: LD_INT 2
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 2
66570: PUSH
66571: LD_INT 4
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 0
66580: PUSH
66581: LD_INT 4
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 0
66590: PUSH
66591: LD_INT 3
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 1
66600: PUSH
66601: LD_INT 4
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 1
66610: PUSH
66611: LD_INT 5
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 0
66620: PUSH
66621: LD_INT 5
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 1
66630: NEG
66631: PUSH
66632: LD_INT 4
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 1
66641: NEG
66642: PUSH
66643: LD_INT 3
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 2
66652: PUSH
66653: LD_INT 5
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 2
66662: NEG
66663: PUSH
66664: LD_INT 3
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66718: LD_ADDR_VAR 0 34
66722: PUSH
66723: LD_INT 0
66725: PUSH
66726: LD_INT 4
66728: NEG
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 0
66736: PUSH
66737: LD_INT 5
66739: NEG
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 1
66747: PUSH
66748: LD_INT 4
66750: NEG
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 1
66758: PUSH
66759: LD_INT 3
66761: NEG
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 0
66769: PUSH
66770: LD_INT 3
66772: NEG
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 1
66780: NEG
66781: PUSH
66782: LD_INT 4
66784: NEG
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 1
66792: NEG
66793: PUSH
66794: LD_INT 5
66796: NEG
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 2
66804: PUSH
66805: LD_INT 3
66807: NEG
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 2
66815: NEG
66816: PUSH
66817: LD_INT 5
66819: NEG
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: LD_INT 3
66827: PUSH
66828: LD_INT 0
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: PUSH
66835: LD_INT 3
66837: PUSH
66838: LD_INT 1
66840: NEG
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 4
66848: PUSH
66849: LD_INT 0
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 4
66858: PUSH
66859: LD_INT 1
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 3
66868: PUSH
66869: LD_INT 1
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 2
66878: PUSH
66879: LD_INT 0
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 2
66888: PUSH
66889: LD_INT 1
66891: NEG
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 2
66899: PUSH
66900: LD_INT 2
66902: NEG
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: LD_INT 4
66910: PUSH
66911: LD_INT 2
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PUSH
66918: LD_INT 4
66920: PUSH
66921: LD_INT 4
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 4
66930: PUSH
66931: LD_INT 3
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 5
66940: PUSH
66941: LD_INT 4
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_INT 5
66950: PUSH
66951: LD_INT 5
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 4
66960: PUSH
66961: LD_INT 5
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 3
66970: PUSH
66971: LD_INT 4
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: LD_INT 3
66980: PUSH
66981: LD_INT 3
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 5
66990: PUSH
66991: LD_INT 3
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 3
67000: PUSH
67001: LD_INT 5
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 0
67010: PUSH
67011: LD_INT 3
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 0
67020: PUSH
67021: LD_INT 2
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 1
67030: PUSH
67031: LD_INT 3
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 1
67040: PUSH
67041: LD_INT 4
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 0
67050: PUSH
67051: LD_INT 4
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 1
67060: NEG
67061: PUSH
67062: LD_INT 3
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 1
67071: NEG
67072: PUSH
67073: LD_INT 2
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 2
67082: PUSH
67083: LD_INT 4
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 2
67092: NEG
67093: PUSH
67094: LD_INT 2
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 4
67103: NEG
67104: PUSH
67105: LD_INT 0
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: PUSH
67112: LD_INT 4
67114: NEG
67115: PUSH
67116: LD_INT 1
67118: NEG
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 3
67126: NEG
67127: PUSH
67128: LD_INT 0
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 3
67137: NEG
67138: PUSH
67139: LD_INT 1
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 4
67148: NEG
67149: PUSH
67150: LD_INT 1
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 5
67159: NEG
67160: PUSH
67161: LD_INT 0
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: LD_INT 5
67170: NEG
67171: PUSH
67172: LD_INT 1
67174: NEG
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 5
67182: NEG
67183: PUSH
67184: LD_INT 2
67186: NEG
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 3
67194: NEG
67195: PUSH
67196: LD_INT 2
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: EMPTY
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: ST_TO_ADDR
// end ; end ;
67250: GO 67253
67252: POP
// case btype of b_depot , b_warehouse :
67253: LD_VAR 0 1
67257: PUSH
67258: LD_INT 0
67260: DOUBLE
67261: EQUAL
67262: IFTRUE 67272
67264: LD_INT 1
67266: DOUBLE
67267: EQUAL
67268: IFTRUE 67272
67270: GO 67473
67272: POP
// case nation of nation_american :
67273: LD_VAR 0 5
67277: PUSH
67278: LD_INT 1
67280: DOUBLE
67281: EQUAL
67282: IFTRUE 67286
67284: GO 67342
67286: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67287: LD_ADDR_VAR 0 9
67291: PUSH
67292: LD_VAR 0 11
67296: PUSH
67297: LD_VAR 0 12
67301: PUSH
67302: LD_VAR 0 13
67306: PUSH
67307: LD_VAR 0 14
67311: PUSH
67312: LD_VAR 0 15
67316: PUSH
67317: LD_VAR 0 16
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: PUSH
67330: LD_VAR 0 4
67334: PUSH
67335: LD_INT 1
67337: PLUS
67338: ARRAY
67339: ST_TO_ADDR
67340: GO 67471
67342: LD_INT 2
67344: DOUBLE
67345: EQUAL
67346: IFTRUE 67350
67348: GO 67406
67350: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67351: LD_ADDR_VAR 0 9
67355: PUSH
67356: LD_VAR 0 17
67360: PUSH
67361: LD_VAR 0 18
67365: PUSH
67366: LD_VAR 0 19
67370: PUSH
67371: LD_VAR 0 20
67375: PUSH
67376: LD_VAR 0 21
67380: PUSH
67381: LD_VAR 0 22
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: PUSH
67394: LD_VAR 0 4
67398: PUSH
67399: LD_INT 1
67401: PLUS
67402: ARRAY
67403: ST_TO_ADDR
67404: GO 67471
67406: LD_INT 3
67408: DOUBLE
67409: EQUAL
67410: IFTRUE 67414
67412: GO 67470
67414: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67415: LD_ADDR_VAR 0 9
67419: PUSH
67420: LD_VAR 0 23
67424: PUSH
67425: LD_VAR 0 24
67429: PUSH
67430: LD_VAR 0 25
67434: PUSH
67435: LD_VAR 0 26
67439: PUSH
67440: LD_VAR 0 27
67444: PUSH
67445: LD_VAR 0 28
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: PUSH
67458: LD_VAR 0 4
67462: PUSH
67463: LD_INT 1
67465: PLUS
67466: ARRAY
67467: ST_TO_ADDR
67468: GO 67471
67470: POP
67471: GO 68026
67473: LD_INT 2
67475: DOUBLE
67476: EQUAL
67477: IFTRUE 67487
67479: LD_INT 3
67481: DOUBLE
67482: EQUAL
67483: IFTRUE 67487
67485: GO 67543
67487: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67488: LD_ADDR_VAR 0 9
67492: PUSH
67493: LD_VAR 0 29
67497: PUSH
67498: LD_VAR 0 30
67502: PUSH
67503: LD_VAR 0 31
67507: PUSH
67508: LD_VAR 0 32
67512: PUSH
67513: LD_VAR 0 33
67517: PUSH
67518: LD_VAR 0 34
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: PUSH
67531: LD_VAR 0 4
67535: PUSH
67536: LD_INT 1
67538: PLUS
67539: ARRAY
67540: ST_TO_ADDR
67541: GO 68026
67543: LD_INT 16
67545: DOUBLE
67546: EQUAL
67547: IFTRUE 67605
67549: LD_INT 17
67551: DOUBLE
67552: EQUAL
67553: IFTRUE 67605
67555: LD_INT 18
67557: DOUBLE
67558: EQUAL
67559: IFTRUE 67605
67561: LD_INT 19
67563: DOUBLE
67564: EQUAL
67565: IFTRUE 67605
67567: LD_INT 22
67569: DOUBLE
67570: EQUAL
67571: IFTRUE 67605
67573: LD_INT 20
67575: DOUBLE
67576: EQUAL
67577: IFTRUE 67605
67579: LD_INT 21
67581: DOUBLE
67582: EQUAL
67583: IFTRUE 67605
67585: LD_INT 23
67587: DOUBLE
67588: EQUAL
67589: IFTRUE 67605
67591: LD_INT 24
67593: DOUBLE
67594: EQUAL
67595: IFTRUE 67605
67597: LD_INT 25
67599: DOUBLE
67600: EQUAL
67601: IFTRUE 67605
67603: GO 67661
67605: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67606: LD_ADDR_VAR 0 9
67610: PUSH
67611: LD_VAR 0 35
67615: PUSH
67616: LD_VAR 0 36
67620: PUSH
67621: LD_VAR 0 37
67625: PUSH
67626: LD_VAR 0 38
67630: PUSH
67631: LD_VAR 0 39
67635: PUSH
67636: LD_VAR 0 40
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: LIST
67645: LIST
67646: LIST
67647: LIST
67648: PUSH
67649: LD_VAR 0 4
67653: PUSH
67654: LD_INT 1
67656: PLUS
67657: ARRAY
67658: ST_TO_ADDR
67659: GO 68026
67661: LD_INT 6
67663: DOUBLE
67664: EQUAL
67665: IFTRUE 67717
67667: LD_INT 7
67669: DOUBLE
67670: EQUAL
67671: IFTRUE 67717
67673: LD_INT 8
67675: DOUBLE
67676: EQUAL
67677: IFTRUE 67717
67679: LD_INT 13
67681: DOUBLE
67682: EQUAL
67683: IFTRUE 67717
67685: LD_INT 12
67687: DOUBLE
67688: EQUAL
67689: IFTRUE 67717
67691: LD_INT 15
67693: DOUBLE
67694: EQUAL
67695: IFTRUE 67717
67697: LD_INT 11
67699: DOUBLE
67700: EQUAL
67701: IFTRUE 67717
67703: LD_INT 14
67705: DOUBLE
67706: EQUAL
67707: IFTRUE 67717
67709: LD_INT 10
67711: DOUBLE
67712: EQUAL
67713: IFTRUE 67717
67715: GO 67773
67717: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67718: LD_ADDR_VAR 0 9
67722: PUSH
67723: LD_VAR 0 41
67727: PUSH
67728: LD_VAR 0 42
67732: PUSH
67733: LD_VAR 0 43
67737: PUSH
67738: LD_VAR 0 44
67742: PUSH
67743: LD_VAR 0 45
67747: PUSH
67748: LD_VAR 0 46
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: LIST
67757: LIST
67758: LIST
67759: LIST
67760: PUSH
67761: LD_VAR 0 4
67765: PUSH
67766: LD_INT 1
67768: PLUS
67769: ARRAY
67770: ST_TO_ADDR
67771: GO 68026
67773: LD_INT 36
67775: DOUBLE
67776: EQUAL
67777: IFTRUE 67781
67779: GO 67837
67781: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67782: LD_ADDR_VAR 0 9
67786: PUSH
67787: LD_VAR 0 47
67791: PUSH
67792: LD_VAR 0 48
67796: PUSH
67797: LD_VAR 0 49
67801: PUSH
67802: LD_VAR 0 50
67806: PUSH
67807: LD_VAR 0 51
67811: PUSH
67812: LD_VAR 0 52
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: PUSH
67825: LD_VAR 0 4
67829: PUSH
67830: LD_INT 1
67832: PLUS
67833: ARRAY
67834: ST_TO_ADDR
67835: GO 68026
67837: LD_INT 4
67839: DOUBLE
67840: EQUAL
67841: IFTRUE 67863
67843: LD_INT 5
67845: DOUBLE
67846: EQUAL
67847: IFTRUE 67863
67849: LD_INT 34
67851: DOUBLE
67852: EQUAL
67853: IFTRUE 67863
67855: LD_INT 37
67857: DOUBLE
67858: EQUAL
67859: IFTRUE 67863
67861: GO 67919
67863: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67864: LD_ADDR_VAR 0 9
67868: PUSH
67869: LD_VAR 0 53
67873: PUSH
67874: LD_VAR 0 54
67878: PUSH
67879: LD_VAR 0 55
67883: PUSH
67884: LD_VAR 0 56
67888: PUSH
67889: LD_VAR 0 57
67893: PUSH
67894: LD_VAR 0 58
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: PUSH
67907: LD_VAR 0 4
67911: PUSH
67912: LD_INT 1
67914: PLUS
67915: ARRAY
67916: ST_TO_ADDR
67917: GO 68026
67919: LD_INT 31
67921: DOUBLE
67922: EQUAL
67923: IFTRUE 67969
67925: LD_INT 32
67927: DOUBLE
67928: EQUAL
67929: IFTRUE 67969
67931: LD_INT 33
67933: DOUBLE
67934: EQUAL
67935: IFTRUE 67969
67937: LD_INT 27
67939: DOUBLE
67940: EQUAL
67941: IFTRUE 67969
67943: LD_INT 26
67945: DOUBLE
67946: EQUAL
67947: IFTRUE 67969
67949: LD_INT 28
67951: DOUBLE
67952: EQUAL
67953: IFTRUE 67969
67955: LD_INT 29
67957: DOUBLE
67958: EQUAL
67959: IFTRUE 67969
67961: LD_INT 30
67963: DOUBLE
67964: EQUAL
67965: IFTRUE 67969
67967: GO 68025
67969: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67970: LD_ADDR_VAR 0 9
67974: PUSH
67975: LD_VAR 0 59
67979: PUSH
67980: LD_VAR 0 60
67984: PUSH
67985: LD_VAR 0 61
67989: PUSH
67990: LD_VAR 0 62
67994: PUSH
67995: LD_VAR 0 63
67999: PUSH
68000: LD_VAR 0 64
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: LIST
68012: PUSH
68013: LD_VAR 0 4
68017: PUSH
68018: LD_INT 1
68020: PLUS
68021: ARRAY
68022: ST_TO_ADDR
68023: GO 68026
68025: POP
// temp_list2 = [ ] ;
68026: LD_ADDR_VAR 0 10
68030: PUSH
68031: EMPTY
68032: ST_TO_ADDR
// for i in temp_list do
68033: LD_ADDR_VAR 0 8
68037: PUSH
68038: LD_VAR 0 9
68042: PUSH
68043: FOR_IN
68044: IFFALSE 68096
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68046: LD_ADDR_VAR 0 10
68050: PUSH
68051: LD_VAR 0 10
68055: PUSH
68056: LD_VAR 0 8
68060: PUSH
68061: LD_INT 1
68063: ARRAY
68064: PUSH
68065: LD_VAR 0 2
68069: PLUS
68070: PUSH
68071: LD_VAR 0 8
68075: PUSH
68076: LD_INT 2
68078: ARRAY
68079: PUSH
68080: LD_VAR 0 3
68084: PLUS
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: EMPTY
68091: LIST
68092: ADD
68093: ST_TO_ADDR
68094: GO 68043
68096: POP
68097: POP
// result = temp_list2 ;
68098: LD_ADDR_VAR 0 7
68102: PUSH
68103: LD_VAR 0 10
68107: ST_TO_ADDR
// end ;
68108: LD_VAR 0 7
68112: RET
// export function EnemyInRange ( unit , dist ) ; begin
68113: LD_INT 0
68115: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68116: LD_ADDR_VAR 0 3
68120: PUSH
68121: LD_VAR 0 1
68125: PPUSH
68126: CALL_OW 255
68130: PPUSH
68131: LD_VAR 0 1
68135: PPUSH
68136: CALL_OW 250
68140: PPUSH
68141: LD_VAR 0 1
68145: PPUSH
68146: CALL_OW 251
68150: PPUSH
68151: LD_VAR 0 2
68155: PPUSH
68156: CALL 41370 0 4
68160: PUSH
68161: LD_INT 4
68163: ARRAY
68164: ST_TO_ADDR
// end ;
68165: LD_VAR 0 3
68169: RET
// export function PlayerSeeMe ( unit ) ; begin
68170: LD_INT 0
68172: PPUSH
// result := See ( your_side , unit ) ;
68173: LD_ADDR_VAR 0 2
68177: PUSH
68178: LD_OWVAR 2
68182: PPUSH
68183: LD_VAR 0 1
68187: PPUSH
68188: CALL_OW 292
68192: ST_TO_ADDR
// end ;
68193: LD_VAR 0 2
68197: RET
// export function ReverseDir ( unit ) ; begin
68198: LD_INT 0
68200: PPUSH
// if not unit then
68201: LD_VAR 0 1
68205: NOT
68206: IFFALSE 68210
// exit ;
68208: GO 68233
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68210: LD_ADDR_VAR 0 2
68214: PUSH
68215: LD_VAR 0 1
68219: PPUSH
68220: CALL_OW 254
68224: PUSH
68225: LD_INT 3
68227: PLUS
68228: PUSH
68229: LD_INT 6
68231: MOD
68232: ST_TO_ADDR
// end ;
68233: LD_VAR 0 2
68237: RET
// export function ReverseArray ( array ) ; var i ; begin
68238: LD_INT 0
68240: PPUSH
68241: PPUSH
// if not array then
68242: LD_VAR 0 1
68246: NOT
68247: IFFALSE 68251
// exit ;
68249: GO 68306
// result := [ ] ;
68251: LD_ADDR_VAR 0 2
68255: PUSH
68256: EMPTY
68257: ST_TO_ADDR
// for i := array downto 1 do
68258: LD_ADDR_VAR 0 3
68262: PUSH
68263: DOUBLE
68264: LD_VAR 0 1
68268: INC
68269: ST_TO_ADDR
68270: LD_INT 1
68272: PUSH
68273: FOR_DOWNTO
68274: IFFALSE 68304
// result := Join ( result , array [ i ] ) ;
68276: LD_ADDR_VAR 0 2
68280: PUSH
68281: LD_VAR 0 2
68285: PPUSH
68286: LD_VAR 0 1
68290: PUSH
68291: LD_VAR 0 3
68295: ARRAY
68296: PPUSH
68297: CALL 73148 0 2
68301: ST_TO_ADDR
68302: GO 68273
68304: POP
68305: POP
// end ;
68306: LD_VAR 0 2
68310: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
68311: LD_INT 0
68313: PPUSH
68314: PPUSH
68315: PPUSH
68316: PPUSH
68317: PPUSH
68318: PPUSH
// if not unit or not hexes then
68319: LD_VAR 0 1
68323: NOT
68324: IFTRUE 68333
68326: PUSH
68327: LD_VAR 0 2
68331: NOT
68332: OR
68333: IFFALSE 68337
// exit ;
68335: GO 68460
// dist := 9999 ;
68337: LD_ADDR_VAR 0 5
68341: PUSH
68342: LD_INT 9999
68344: ST_TO_ADDR
// for i = 1 to hexes do
68345: LD_ADDR_VAR 0 4
68349: PUSH
68350: DOUBLE
68351: LD_INT 1
68353: DEC
68354: ST_TO_ADDR
68355: LD_VAR 0 2
68359: PUSH
68360: FOR_TO
68361: IFFALSE 68448
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68363: LD_ADDR_VAR 0 6
68367: PUSH
68368: LD_VAR 0 1
68372: PPUSH
68373: LD_VAR 0 2
68377: PUSH
68378: LD_VAR 0 4
68382: ARRAY
68383: PUSH
68384: LD_INT 1
68386: ARRAY
68387: PPUSH
68388: LD_VAR 0 2
68392: PUSH
68393: LD_VAR 0 4
68397: ARRAY
68398: PUSH
68399: LD_INT 2
68401: ARRAY
68402: PPUSH
68403: CALL_OW 297
68407: ST_TO_ADDR
// if tdist < dist then
68408: LD_VAR 0 6
68412: PUSH
68413: LD_VAR 0 5
68417: LESS
68418: IFFALSE 68446
// begin hex := hexes [ i ] ;
68420: LD_ADDR_VAR 0 8
68424: PUSH
68425: LD_VAR 0 2
68429: PUSH
68430: LD_VAR 0 4
68434: ARRAY
68435: ST_TO_ADDR
// dist := tdist ;
68436: LD_ADDR_VAR 0 5
68440: PUSH
68441: LD_VAR 0 6
68445: ST_TO_ADDR
// end ; end ;
68446: GO 68360
68448: POP
68449: POP
// result := hex ;
68450: LD_ADDR_VAR 0 3
68454: PUSH
68455: LD_VAR 0 8
68459: ST_TO_ADDR
// end ;
68460: LD_VAR 0 3
68464: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68465: LD_INT 0
68467: PPUSH
68468: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68469: LD_VAR 0 1
68473: NOT
68474: IFTRUE 68513
68476: PUSH
68477: LD_VAR 0 1
68481: PUSH
68482: LD_INT 21
68484: PUSH
68485: LD_INT 2
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 23
68494: PUSH
68495: LD_INT 2
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: PPUSH
68506: CALL_OW 69
68510: IN
68511: NOT
68512: OR
68513: IFFALSE 68517
// exit ;
68515: GO 68564
// for i = 1 to 3 do
68517: LD_ADDR_VAR 0 3
68521: PUSH
68522: DOUBLE
68523: LD_INT 1
68525: DEC
68526: ST_TO_ADDR
68527: LD_INT 3
68529: PUSH
68530: FOR_TO
68531: IFFALSE 68562
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68533: LD_VAR 0 1
68537: PPUSH
68538: CALL_OW 250
68542: PPUSH
68543: LD_VAR 0 1
68547: PPUSH
68548: CALL_OW 251
68552: PPUSH
68553: LD_INT 1
68555: PPUSH
68556: CALL_OW 453
68560: GO 68530
68562: POP
68563: POP
// end ;
68564: LD_VAR 0 2
68568: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68569: LD_INT 0
68571: PPUSH
68572: PPUSH
68573: PPUSH
68574: PPUSH
68575: PPUSH
68576: PPUSH
// if not unit or not enemy_unit then
68577: LD_VAR 0 1
68581: NOT
68582: IFTRUE 68591
68584: PUSH
68585: LD_VAR 0 2
68589: NOT
68590: OR
68591: IFFALSE 68595
// exit ;
68593: GO 69066
// if GetLives ( i ) < 250 then
68595: LD_VAR 0 4
68599: PPUSH
68600: CALL_OW 256
68604: PUSH
68605: LD_INT 250
68607: LESS
68608: IFFALSE 68621
// begin ComAutodestruct ( i ) ;
68610: LD_VAR 0 4
68614: PPUSH
68615: CALL 68465 0 1
// exit ;
68619: GO 69066
// end ; x := GetX ( enemy_unit ) ;
68621: LD_ADDR_VAR 0 7
68625: PUSH
68626: LD_VAR 0 2
68630: PPUSH
68631: CALL_OW 250
68635: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68636: LD_ADDR_VAR 0 8
68640: PUSH
68641: LD_VAR 0 2
68645: PPUSH
68646: CALL_OW 251
68650: ST_TO_ADDR
// if not x or not y then
68651: LD_VAR 0 7
68655: NOT
68656: IFTRUE 68665
68658: PUSH
68659: LD_VAR 0 8
68663: NOT
68664: OR
68665: IFFALSE 68669
// exit ;
68667: GO 69066
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68669: LD_ADDR_VAR 0 6
68673: PUSH
68674: LD_VAR 0 7
68678: PPUSH
68679: LD_INT 0
68681: PPUSH
68682: LD_INT 4
68684: PPUSH
68685: CALL_OW 272
68689: PUSH
68690: LD_VAR 0 8
68694: PPUSH
68695: LD_INT 0
68697: PPUSH
68698: LD_INT 4
68700: PPUSH
68701: CALL_OW 273
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: LD_VAR 0 7
68714: PPUSH
68715: LD_INT 1
68717: PPUSH
68718: LD_INT 4
68720: PPUSH
68721: CALL_OW 272
68725: PUSH
68726: LD_VAR 0 8
68730: PPUSH
68731: LD_INT 1
68733: PPUSH
68734: LD_INT 4
68736: PPUSH
68737: CALL_OW 273
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PUSH
68746: LD_VAR 0 7
68750: PPUSH
68751: LD_INT 2
68753: PPUSH
68754: LD_INT 4
68756: PPUSH
68757: CALL_OW 272
68761: PUSH
68762: LD_VAR 0 8
68766: PPUSH
68767: LD_INT 2
68769: PPUSH
68770: LD_INT 4
68772: PPUSH
68773: CALL_OW 273
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: LD_VAR 0 7
68786: PPUSH
68787: LD_INT 3
68789: PPUSH
68790: LD_INT 4
68792: PPUSH
68793: CALL_OW 272
68797: PUSH
68798: LD_VAR 0 8
68802: PPUSH
68803: LD_INT 3
68805: PPUSH
68806: LD_INT 4
68808: PPUSH
68809: CALL_OW 273
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: PUSH
68818: LD_VAR 0 7
68822: PPUSH
68823: LD_INT 4
68825: PPUSH
68826: LD_INT 4
68828: PPUSH
68829: CALL_OW 272
68833: PUSH
68834: LD_VAR 0 8
68838: PPUSH
68839: LD_INT 4
68841: PPUSH
68842: LD_INT 4
68844: PPUSH
68845: CALL_OW 273
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_VAR 0 7
68858: PPUSH
68859: LD_INT 5
68861: PPUSH
68862: LD_INT 4
68864: PPUSH
68865: CALL_OW 272
68869: PUSH
68870: LD_VAR 0 8
68874: PPUSH
68875: LD_INT 5
68877: PPUSH
68878: LD_INT 4
68880: PPUSH
68881: CALL_OW 273
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: ST_TO_ADDR
// for i = tmp downto 1 do
68898: LD_ADDR_VAR 0 4
68902: PUSH
68903: DOUBLE
68904: LD_VAR 0 6
68908: INC
68909: ST_TO_ADDR
68910: LD_INT 1
68912: PUSH
68913: FOR_DOWNTO
68914: IFFALSE 69017
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68916: LD_VAR 0 6
68920: PUSH
68921: LD_VAR 0 4
68925: ARRAY
68926: PUSH
68927: LD_INT 1
68929: ARRAY
68930: PPUSH
68931: LD_VAR 0 6
68935: PUSH
68936: LD_VAR 0 4
68940: ARRAY
68941: PUSH
68942: LD_INT 2
68944: ARRAY
68945: PPUSH
68946: CALL_OW 488
68950: NOT
68951: IFTRUE 68993
68953: PUSH
68954: LD_VAR 0 6
68958: PUSH
68959: LD_VAR 0 4
68963: ARRAY
68964: PUSH
68965: LD_INT 1
68967: ARRAY
68968: PPUSH
68969: LD_VAR 0 6
68973: PUSH
68974: LD_VAR 0 4
68978: ARRAY
68979: PUSH
68980: LD_INT 2
68982: ARRAY
68983: PPUSH
68984: CALL_OW 428
68988: PUSH
68989: LD_INT 0
68991: NONEQUAL
68992: OR
68993: IFFALSE 69015
// tmp := Delete ( tmp , i ) ;
68995: LD_ADDR_VAR 0 6
68999: PUSH
69000: LD_VAR 0 6
69004: PPUSH
69005: LD_VAR 0 4
69009: PPUSH
69010: CALL_OW 3
69014: ST_TO_ADDR
69015: GO 68913
69017: POP
69018: POP
// j := GetClosestHex ( unit , tmp ) ;
69019: LD_ADDR_VAR 0 5
69023: PUSH
69024: LD_VAR 0 1
69028: PPUSH
69029: LD_VAR 0 6
69033: PPUSH
69034: CALL 68311 0 2
69038: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69039: LD_VAR 0 1
69043: PPUSH
69044: LD_VAR 0 5
69048: PUSH
69049: LD_INT 1
69051: ARRAY
69052: PPUSH
69053: LD_VAR 0 5
69057: PUSH
69058: LD_INT 2
69060: ARRAY
69061: PPUSH
69062: CALL_OW 111
// end ;
69066: LD_VAR 0 3
69070: RET
// export function PrepareApemanSoldier ( ) ; begin
69071: LD_INT 0
69073: PPUSH
// uc_nation := 0 ;
69074: LD_ADDR_OWVAR 21
69078: PUSH
69079: LD_INT 0
69081: ST_TO_ADDR
// hc_sex := sex_male ;
69082: LD_ADDR_OWVAR 27
69086: PUSH
69087: LD_INT 1
69089: ST_TO_ADDR
// hc_name :=  ;
69090: LD_ADDR_OWVAR 26
69094: PUSH
69095: LD_STRING 
69097: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
69098: LD_ADDR_OWVAR 28
69102: PUSH
69103: LD_INT 15
69105: ST_TO_ADDR
// hc_gallery :=  ;
69106: LD_ADDR_OWVAR 33
69110: PUSH
69111: LD_STRING 
69113: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69114: LD_ADDR_OWVAR 31
69118: PUSH
69119: LD_INT 0
69121: PPUSH
69122: LD_INT 3
69124: PPUSH
69125: CALL_OW 12
69129: PUSH
69130: LD_INT 0
69132: PPUSH
69133: LD_INT 3
69135: PPUSH
69136: CALL_OW 12
69140: PUSH
69141: LD_INT 0
69143: PUSH
69144: LD_INT 0
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69153: LD_ADDR_OWVAR 29
69157: PUSH
69158: LD_INT 12
69160: PUSH
69161: LD_INT 12
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: ST_TO_ADDR
// end ;
69168: LD_VAR 0 1
69172: RET
// export function PrepareApemanEngineer ( ) ; begin
69173: LD_INT 0
69175: PPUSH
// uc_nation := 0 ;
69176: LD_ADDR_OWVAR 21
69180: PUSH
69181: LD_INT 0
69183: ST_TO_ADDR
// hc_sex := sex_male ;
69184: LD_ADDR_OWVAR 27
69188: PUSH
69189: LD_INT 1
69191: ST_TO_ADDR
// hc_name :=  ;
69192: LD_ADDR_OWVAR 26
69196: PUSH
69197: LD_STRING 
69199: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
69200: LD_ADDR_OWVAR 28
69204: PUSH
69205: LD_INT 16
69207: ST_TO_ADDR
// hc_gallery :=  ;
69208: LD_ADDR_OWVAR 33
69212: PUSH
69213: LD_STRING 
69215: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69216: LD_ADDR_OWVAR 31
69220: PUSH
69221: LD_INT 0
69223: PPUSH
69224: LD_INT 3
69226: PPUSH
69227: CALL_OW 12
69231: PUSH
69232: LD_INT 0
69234: PPUSH
69235: LD_INT 3
69237: PPUSH
69238: CALL_OW 12
69242: PUSH
69243: LD_INT 0
69245: PUSH
69246: LD_INT 0
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: LIST
69253: LIST
69254: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69255: LD_ADDR_OWVAR 29
69259: PUSH
69260: LD_INT 12
69262: PUSH
69263: LD_INT 12
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: ST_TO_ADDR
// end ;
69270: LD_VAR 0 1
69274: RET
// export function PrepareApeman ( agressivity ) ; begin
69275: LD_INT 0
69277: PPUSH
// uc_side := 0 ;
69278: LD_ADDR_OWVAR 20
69282: PUSH
69283: LD_INT 0
69285: ST_TO_ADDR
// uc_nation := 0 ;
69286: LD_ADDR_OWVAR 21
69290: PUSH
69291: LD_INT 0
69293: ST_TO_ADDR
// hc_sex := sex_male ;
69294: LD_ADDR_OWVAR 27
69298: PUSH
69299: LD_INT 1
69301: ST_TO_ADDR
// hc_class := class_apeman ;
69302: LD_ADDR_OWVAR 28
69306: PUSH
69307: LD_INT 12
69309: ST_TO_ADDR
// hc_gallery :=  ;
69310: LD_ADDR_OWVAR 33
69314: PUSH
69315: LD_STRING 
69317: ST_TO_ADDR
// hc_name :=  ;
69318: LD_ADDR_OWVAR 26
69322: PUSH
69323: LD_STRING 
69325: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69326: LD_ADDR_OWVAR 29
69330: PUSH
69331: LD_INT 12
69333: PUSH
69334: LD_INT 12
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: ST_TO_ADDR
// if agressivity = 0 then
69341: LD_VAR 0 1
69345: PUSH
69346: LD_INT 0
69348: EQUAL
69349: IFFALSE 69361
// hc_agressivity := 0 else
69351: LD_ADDR_OWVAR 35
69355: PUSH
69356: LD_INT 0
69358: ST_TO_ADDR
69359: GO 69382
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69361: LD_ADDR_OWVAR 35
69365: PUSH
69366: LD_VAR 0 1
69370: NEG
69371: PPUSH
69372: LD_VAR 0 1
69376: PPUSH
69377: CALL_OW 12
69381: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69382: LD_ADDR_OWVAR 31
69386: PUSH
69387: LD_INT 0
69389: PPUSH
69390: LD_INT 3
69392: PPUSH
69393: CALL_OW 12
69397: PUSH
69398: LD_INT 0
69400: PPUSH
69401: LD_INT 3
69403: PPUSH
69404: CALL_OW 12
69408: PUSH
69409: LD_INT 0
69411: PUSH
69412: LD_INT 0
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: LIST
69419: LIST
69420: ST_TO_ADDR
// end ;
69421: LD_VAR 0 2
69425: RET
// export function PrepareTiger ( agressivity ) ; begin
69426: LD_INT 0
69428: PPUSH
// uc_side := 0 ;
69429: LD_ADDR_OWVAR 20
69433: PUSH
69434: LD_INT 0
69436: ST_TO_ADDR
// uc_nation := 0 ;
69437: LD_ADDR_OWVAR 21
69441: PUSH
69442: LD_INT 0
69444: ST_TO_ADDR
// InitHc ;
69445: CALL_OW 19
// hc_class := class_tiger ;
69449: LD_ADDR_OWVAR 28
69453: PUSH
69454: LD_INT 14
69456: ST_TO_ADDR
// hc_gallery :=  ;
69457: LD_ADDR_OWVAR 33
69461: PUSH
69462: LD_STRING 
69464: ST_TO_ADDR
// hc_name :=  ;
69465: LD_ADDR_OWVAR 26
69469: PUSH
69470: LD_STRING 
69472: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69473: LD_ADDR_OWVAR 35
69477: PUSH
69478: LD_VAR 0 1
69482: NEG
69483: PPUSH
69484: LD_VAR 0 1
69488: PPUSH
69489: CALL_OW 12
69493: ST_TO_ADDR
// end ;
69494: LD_VAR 0 2
69498: RET
// export function PrepareEnchidna ( ) ; begin
69499: LD_INT 0
69501: PPUSH
// uc_side := 0 ;
69502: LD_ADDR_OWVAR 20
69506: PUSH
69507: LD_INT 0
69509: ST_TO_ADDR
// uc_nation := 0 ;
69510: LD_ADDR_OWVAR 21
69514: PUSH
69515: LD_INT 0
69517: ST_TO_ADDR
// InitHc ;
69518: CALL_OW 19
// hc_class := class_baggie ;
69522: LD_ADDR_OWVAR 28
69526: PUSH
69527: LD_INT 13
69529: ST_TO_ADDR
// hc_gallery :=  ;
69530: LD_ADDR_OWVAR 33
69534: PUSH
69535: LD_STRING 
69537: ST_TO_ADDR
// hc_name :=  ;
69538: LD_ADDR_OWVAR 26
69542: PUSH
69543: LD_STRING 
69545: ST_TO_ADDR
// end ;
69546: LD_VAR 0 1
69550: RET
// export function PrepareFrog ( ) ; begin
69551: LD_INT 0
69553: PPUSH
// uc_side := 0 ;
69554: LD_ADDR_OWVAR 20
69558: PUSH
69559: LD_INT 0
69561: ST_TO_ADDR
// uc_nation := 0 ;
69562: LD_ADDR_OWVAR 21
69566: PUSH
69567: LD_INT 0
69569: ST_TO_ADDR
// InitHc ;
69570: CALL_OW 19
// hc_class := class_frog ;
69574: LD_ADDR_OWVAR 28
69578: PUSH
69579: LD_INT 19
69581: ST_TO_ADDR
// hc_gallery :=  ;
69582: LD_ADDR_OWVAR 33
69586: PUSH
69587: LD_STRING 
69589: ST_TO_ADDR
// hc_name :=  ;
69590: LD_ADDR_OWVAR 26
69594: PUSH
69595: LD_STRING 
69597: ST_TO_ADDR
// end ;
69598: LD_VAR 0 1
69602: RET
// export function PrepareFish ( ) ; begin
69603: LD_INT 0
69605: PPUSH
// uc_side := 0 ;
69606: LD_ADDR_OWVAR 20
69610: PUSH
69611: LD_INT 0
69613: ST_TO_ADDR
// uc_nation := 0 ;
69614: LD_ADDR_OWVAR 21
69618: PUSH
69619: LD_INT 0
69621: ST_TO_ADDR
// InitHc ;
69622: CALL_OW 19
// hc_class := class_fish ;
69626: LD_ADDR_OWVAR 28
69630: PUSH
69631: LD_INT 20
69633: ST_TO_ADDR
// hc_gallery :=  ;
69634: LD_ADDR_OWVAR 33
69638: PUSH
69639: LD_STRING 
69641: ST_TO_ADDR
// hc_name :=  ;
69642: LD_ADDR_OWVAR 26
69646: PUSH
69647: LD_STRING 
69649: ST_TO_ADDR
// end ;
69650: LD_VAR 0 1
69654: RET
// export function PrepareBird ( ) ; begin
69655: LD_INT 0
69657: PPUSH
// uc_side := 0 ;
69658: LD_ADDR_OWVAR 20
69662: PUSH
69663: LD_INT 0
69665: ST_TO_ADDR
// uc_nation := 0 ;
69666: LD_ADDR_OWVAR 21
69670: PUSH
69671: LD_INT 0
69673: ST_TO_ADDR
// InitHc ;
69674: CALL_OW 19
// hc_class := class_phororhacos ;
69678: LD_ADDR_OWVAR 28
69682: PUSH
69683: LD_INT 18
69685: ST_TO_ADDR
// hc_gallery :=  ;
69686: LD_ADDR_OWVAR 33
69690: PUSH
69691: LD_STRING 
69693: ST_TO_ADDR
// hc_name :=  ;
69694: LD_ADDR_OWVAR 26
69698: PUSH
69699: LD_STRING 
69701: ST_TO_ADDR
// end ;
69702: LD_VAR 0 1
69706: RET
// export function PrepareHorse ( ) ; begin
69707: LD_INT 0
69709: PPUSH
// uc_side := 0 ;
69710: LD_ADDR_OWVAR 20
69714: PUSH
69715: LD_INT 0
69717: ST_TO_ADDR
// uc_nation := 0 ;
69718: LD_ADDR_OWVAR 21
69722: PUSH
69723: LD_INT 0
69725: ST_TO_ADDR
// InitHc ;
69726: CALL_OW 19
// hc_class := class_horse ;
69730: LD_ADDR_OWVAR 28
69734: PUSH
69735: LD_INT 21
69737: ST_TO_ADDR
// hc_gallery :=  ;
69738: LD_ADDR_OWVAR 33
69742: PUSH
69743: LD_STRING 
69745: ST_TO_ADDR
// hc_name :=  ;
69746: LD_ADDR_OWVAR 26
69750: PUSH
69751: LD_STRING 
69753: ST_TO_ADDR
// end ;
69754: LD_VAR 0 1
69758: RET
// export function PrepareMastodont ( ) ; begin
69759: LD_INT 0
69761: PPUSH
// uc_side := 0 ;
69762: LD_ADDR_OWVAR 20
69766: PUSH
69767: LD_INT 0
69769: ST_TO_ADDR
// uc_nation := 0 ;
69770: LD_ADDR_OWVAR 21
69774: PUSH
69775: LD_INT 0
69777: ST_TO_ADDR
// vc_chassis := class_mastodont ;
69778: LD_ADDR_OWVAR 37
69782: PUSH
69783: LD_INT 31
69785: ST_TO_ADDR
// vc_control := control_rider ;
69786: LD_ADDR_OWVAR 38
69790: PUSH
69791: LD_INT 4
69793: ST_TO_ADDR
// end ;
69794: LD_VAR 0 1
69798: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69799: LD_INT 0
69801: PPUSH
69802: PPUSH
69803: PPUSH
// uc_side = 0 ;
69804: LD_ADDR_OWVAR 20
69808: PUSH
69809: LD_INT 0
69811: ST_TO_ADDR
// uc_nation = 0 ;
69812: LD_ADDR_OWVAR 21
69816: PUSH
69817: LD_INT 0
69819: ST_TO_ADDR
// InitHc_All ( ) ;
69820: CALL_OW 584
// InitVc ;
69824: CALL_OW 20
// if mastodonts then
69828: LD_VAR 0 6
69832: IFFALSE 69899
// for i = 1 to mastodonts do
69834: LD_ADDR_VAR 0 11
69838: PUSH
69839: DOUBLE
69840: LD_INT 1
69842: DEC
69843: ST_TO_ADDR
69844: LD_VAR 0 6
69848: PUSH
69849: FOR_TO
69850: IFFALSE 69897
// begin vc_chassis := 31 ;
69852: LD_ADDR_OWVAR 37
69856: PUSH
69857: LD_INT 31
69859: ST_TO_ADDR
// vc_control := control_rider ;
69860: LD_ADDR_OWVAR 38
69864: PUSH
69865: LD_INT 4
69867: ST_TO_ADDR
// animal := CreateVehicle ;
69868: LD_ADDR_VAR 0 12
69872: PUSH
69873: CALL_OW 45
69877: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69878: LD_VAR 0 12
69882: PPUSH
69883: LD_VAR 0 8
69887: PPUSH
69888: LD_INT 0
69890: PPUSH
69891: CALL 72041 0 3
// end ;
69895: GO 69849
69897: POP
69898: POP
// if horses then
69899: LD_VAR 0 5
69903: IFFALSE 69970
// for i = 1 to horses do
69905: LD_ADDR_VAR 0 11
69909: PUSH
69910: DOUBLE
69911: LD_INT 1
69913: DEC
69914: ST_TO_ADDR
69915: LD_VAR 0 5
69919: PUSH
69920: FOR_TO
69921: IFFALSE 69968
// begin hc_class := 21 ;
69923: LD_ADDR_OWVAR 28
69927: PUSH
69928: LD_INT 21
69930: ST_TO_ADDR
// hc_gallery :=  ;
69931: LD_ADDR_OWVAR 33
69935: PUSH
69936: LD_STRING 
69938: ST_TO_ADDR
// animal := CreateHuman ;
69939: LD_ADDR_VAR 0 12
69943: PUSH
69944: CALL_OW 44
69948: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69949: LD_VAR 0 12
69953: PPUSH
69954: LD_VAR 0 8
69958: PPUSH
69959: LD_INT 0
69961: PPUSH
69962: CALL 72041 0 3
// end ;
69966: GO 69920
69968: POP
69969: POP
// if birds then
69970: LD_VAR 0 1
69974: IFFALSE 70041
// for i = 1 to birds do
69976: LD_ADDR_VAR 0 11
69980: PUSH
69981: DOUBLE
69982: LD_INT 1
69984: DEC
69985: ST_TO_ADDR
69986: LD_VAR 0 1
69990: PUSH
69991: FOR_TO
69992: IFFALSE 70039
// begin hc_class := 18 ;
69994: LD_ADDR_OWVAR 28
69998: PUSH
69999: LD_INT 18
70001: ST_TO_ADDR
// hc_gallery =  ;
70002: LD_ADDR_OWVAR 33
70006: PUSH
70007: LD_STRING 
70009: ST_TO_ADDR
// animal := CreateHuman ;
70010: LD_ADDR_VAR 0 12
70014: PUSH
70015: CALL_OW 44
70019: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70020: LD_VAR 0 12
70024: PPUSH
70025: LD_VAR 0 8
70029: PPUSH
70030: LD_INT 0
70032: PPUSH
70033: CALL 72041 0 3
// end ;
70037: GO 69991
70039: POP
70040: POP
// if tigers then
70041: LD_VAR 0 2
70045: IFFALSE 70129
// for i = 1 to tigers do
70047: LD_ADDR_VAR 0 11
70051: PUSH
70052: DOUBLE
70053: LD_INT 1
70055: DEC
70056: ST_TO_ADDR
70057: LD_VAR 0 2
70061: PUSH
70062: FOR_TO
70063: IFFALSE 70127
// begin hc_class = class_tiger ;
70065: LD_ADDR_OWVAR 28
70069: PUSH
70070: LD_INT 14
70072: ST_TO_ADDR
// hc_gallery =  ;
70073: LD_ADDR_OWVAR 33
70077: PUSH
70078: LD_STRING 
70080: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70081: LD_ADDR_OWVAR 35
70085: PUSH
70086: LD_INT 7
70088: NEG
70089: PPUSH
70090: LD_INT 7
70092: PPUSH
70093: CALL_OW 12
70097: ST_TO_ADDR
// animal := CreateHuman ;
70098: LD_ADDR_VAR 0 12
70102: PUSH
70103: CALL_OW 44
70107: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70108: LD_VAR 0 12
70112: PPUSH
70113: LD_VAR 0 8
70117: PPUSH
70118: LD_INT 0
70120: PPUSH
70121: CALL 72041 0 3
// end ;
70125: GO 70062
70127: POP
70128: POP
// if apemans then
70129: LD_VAR 0 3
70133: IFFALSE 70256
// for i = 1 to apemans do
70135: LD_ADDR_VAR 0 11
70139: PUSH
70140: DOUBLE
70141: LD_INT 1
70143: DEC
70144: ST_TO_ADDR
70145: LD_VAR 0 3
70149: PUSH
70150: FOR_TO
70151: IFFALSE 70254
// begin hc_class = class_apeman ;
70153: LD_ADDR_OWVAR 28
70157: PUSH
70158: LD_INT 12
70160: ST_TO_ADDR
// hc_gallery =  ;
70161: LD_ADDR_OWVAR 33
70165: PUSH
70166: LD_STRING 
70168: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70169: LD_ADDR_OWVAR 35
70173: PUSH
70174: LD_INT 2
70176: NEG
70177: PPUSH
70178: LD_INT 2
70180: PPUSH
70181: CALL_OW 12
70185: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70186: LD_ADDR_OWVAR 31
70190: PUSH
70191: LD_INT 1
70193: PPUSH
70194: LD_INT 3
70196: PPUSH
70197: CALL_OW 12
70201: PUSH
70202: LD_INT 1
70204: PPUSH
70205: LD_INT 3
70207: PPUSH
70208: CALL_OW 12
70212: PUSH
70213: LD_INT 0
70215: PUSH
70216: LD_INT 0
70218: PUSH
70219: EMPTY
70220: LIST
70221: LIST
70222: LIST
70223: LIST
70224: ST_TO_ADDR
// animal := CreateHuman ;
70225: LD_ADDR_VAR 0 12
70229: PUSH
70230: CALL_OW 44
70234: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70235: LD_VAR 0 12
70239: PPUSH
70240: LD_VAR 0 8
70244: PPUSH
70245: LD_INT 0
70247: PPUSH
70248: CALL 72041 0 3
// end ;
70252: GO 70150
70254: POP
70255: POP
// if enchidnas then
70256: LD_VAR 0 4
70260: IFFALSE 70327
// for i = 1 to enchidnas do
70262: LD_ADDR_VAR 0 11
70266: PUSH
70267: DOUBLE
70268: LD_INT 1
70270: DEC
70271: ST_TO_ADDR
70272: LD_VAR 0 4
70276: PUSH
70277: FOR_TO
70278: IFFALSE 70325
// begin hc_class = 13 ;
70280: LD_ADDR_OWVAR 28
70284: PUSH
70285: LD_INT 13
70287: ST_TO_ADDR
// hc_gallery =  ;
70288: LD_ADDR_OWVAR 33
70292: PUSH
70293: LD_STRING 
70295: ST_TO_ADDR
// animal := CreateHuman ;
70296: LD_ADDR_VAR 0 12
70300: PUSH
70301: CALL_OW 44
70305: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70306: LD_VAR 0 12
70310: PPUSH
70311: LD_VAR 0 8
70315: PPUSH
70316: LD_INT 0
70318: PPUSH
70319: CALL 72041 0 3
// end ;
70323: GO 70277
70325: POP
70326: POP
// if fishes then
70327: LD_VAR 0 7
70331: IFFALSE 70398
// for i = 1 to fishes do
70333: LD_ADDR_VAR 0 11
70337: PUSH
70338: DOUBLE
70339: LD_INT 1
70341: DEC
70342: ST_TO_ADDR
70343: LD_VAR 0 7
70347: PUSH
70348: FOR_TO
70349: IFFALSE 70396
// begin hc_class = 20 ;
70351: LD_ADDR_OWVAR 28
70355: PUSH
70356: LD_INT 20
70358: ST_TO_ADDR
// hc_gallery =  ;
70359: LD_ADDR_OWVAR 33
70363: PUSH
70364: LD_STRING 
70366: ST_TO_ADDR
// animal := CreateHuman ;
70367: LD_ADDR_VAR 0 12
70371: PUSH
70372: CALL_OW 44
70376: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70377: LD_VAR 0 12
70381: PPUSH
70382: LD_VAR 0 9
70386: PPUSH
70387: LD_INT 0
70389: PPUSH
70390: CALL 72041 0 3
// end ;
70394: GO 70348
70396: POP
70397: POP
// end ;
70398: LD_VAR 0 10
70402: RET
// export function WantHeal ( sci , unit ) ; begin
70403: LD_INT 0
70405: PPUSH
// if GetTaskList ( sci ) > 0 then
70406: LD_VAR 0 1
70410: PPUSH
70411: CALL_OW 437
70415: PUSH
70416: LD_INT 0
70418: GREATER
70419: IFFALSE 70491
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70421: LD_VAR 0 1
70425: PPUSH
70426: CALL_OW 437
70430: PUSH
70431: LD_INT 1
70433: ARRAY
70434: PUSH
70435: LD_INT 1
70437: ARRAY
70438: PUSH
70439: LD_STRING l
70441: EQUAL
70442: IFFALSE 70469
70444: PUSH
70445: LD_VAR 0 1
70449: PPUSH
70450: CALL_OW 437
70454: PUSH
70455: LD_INT 1
70457: ARRAY
70458: PUSH
70459: LD_INT 4
70461: ARRAY
70462: PUSH
70463: LD_VAR 0 2
70467: EQUAL
70468: AND
70469: IFFALSE 70481
// result := true else
70471: LD_ADDR_VAR 0 3
70475: PUSH
70476: LD_INT 1
70478: ST_TO_ADDR
70479: GO 70489
// result := false ;
70481: LD_ADDR_VAR 0 3
70485: PUSH
70486: LD_INT 0
70488: ST_TO_ADDR
// end else
70489: GO 70499
// result := false ;
70491: LD_ADDR_VAR 0 3
70495: PUSH
70496: LD_INT 0
70498: ST_TO_ADDR
// end ;
70499: LD_VAR 0 3
70503: RET
// export function HealTarget ( sci ) ; begin
70504: LD_INT 0
70506: PPUSH
// if not sci then
70507: LD_VAR 0 1
70511: NOT
70512: IFFALSE 70516
// exit ;
70514: GO 70581
// result := 0 ;
70516: LD_ADDR_VAR 0 2
70520: PUSH
70521: LD_INT 0
70523: ST_TO_ADDR
// if GetTaskList ( sci ) then
70524: LD_VAR 0 1
70528: PPUSH
70529: CALL_OW 437
70533: IFFALSE 70581
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70535: LD_VAR 0 1
70539: PPUSH
70540: CALL_OW 437
70544: PUSH
70545: LD_INT 1
70547: ARRAY
70548: PUSH
70549: LD_INT 1
70551: ARRAY
70552: PUSH
70553: LD_STRING l
70555: EQUAL
70556: IFFALSE 70581
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70558: LD_ADDR_VAR 0 2
70562: PUSH
70563: LD_VAR 0 1
70567: PPUSH
70568: CALL_OW 437
70572: PUSH
70573: LD_INT 1
70575: ARRAY
70576: PUSH
70577: LD_INT 4
70579: ARRAY
70580: ST_TO_ADDR
// end ;
70581: LD_VAR 0 2
70585: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70586: LD_INT 0
70588: PPUSH
70589: PPUSH
70590: PPUSH
70591: PPUSH
// if not base_units then
70592: LD_VAR 0 1
70596: NOT
70597: IFFALSE 70601
// exit ;
70599: GO 70688
// result := false ;
70601: LD_ADDR_VAR 0 2
70605: PUSH
70606: LD_INT 0
70608: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70609: LD_ADDR_VAR 0 5
70613: PUSH
70614: LD_VAR 0 1
70618: PPUSH
70619: LD_INT 21
70621: PUSH
70622: LD_INT 3
70624: PUSH
70625: EMPTY
70626: LIST
70627: LIST
70628: PPUSH
70629: CALL_OW 72
70633: ST_TO_ADDR
// if not tmp then
70634: LD_VAR 0 5
70638: NOT
70639: IFFALSE 70643
// exit ;
70641: GO 70688
// for i in tmp do
70643: LD_ADDR_VAR 0 3
70647: PUSH
70648: LD_VAR 0 5
70652: PUSH
70653: FOR_IN
70654: IFFALSE 70686
// begin result := EnemyInRange ( i , 22 ) ;
70656: LD_ADDR_VAR 0 2
70660: PUSH
70661: LD_VAR 0 3
70665: PPUSH
70666: LD_INT 22
70668: PPUSH
70669: CALL 68113 0 2
70673: ST_TO_ADDR
// if result then
70674: LD_VAR 0 2
70678: IFFALSE 70684
// exit ;
70680: POP
70681: POP
70682: GO 70688
// end ;
70684: GO 70653
70686: POP
70687: POP
// end ;
70688: LD_VAR 0 2
70692: RET
// export function FilterByTag ( units , tag ) ; begin
70693: LD_INT 0
70695: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
70696: LD_ADDR_VAR 0 3
70700: PUSH
70701: LD_VAR 0 1
70705: PPUSH
70706: LD_INT 120
70708: PUSH
70709: LD_VAR 0 2
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PPUSH
70718: CALL_OW 72
70722: ST_TO_ADDR
// end ;
70723: LD_VAR 0 3
70727: RET
// export function IsDriver ( un ) ; begin
70728: LD_INT 0
70730: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70731: LD_ADDR_VAR 0 2
70735: PUSH
70736: LD_VAR 0 1
70740: PUSH
70741: LD_INT 55
70743: PUSH
70744: EMPTY
70745: LIST
70746: PPUSH
70747: CALL_OW 69
70751: IN
70752: ST_TO_ADDR
// end ;
70753: LD_VAR 0 2
70757: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70758: LD_INT 0
70760: PPUSH
70761: PPUSH
// list := [ ] ;
70762: LD_ADDR_VAR 0 5
70766: PUSH
70767: EMPTY
70768: ST_TO_ADDR
// case d of 0 :
70769: LD_VAR 0 3
70773: PUSH
70774: LD_INT 0
70776: DOUBLE
70777: EQUAL
70778: IFTRUE 70782
70780: GO 70915
70782: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70783: LD_ADDR_VAR 0 5
70787: PUSH
70788: LD_VAR 0 1
70792: PUSH
70793: LD_INT 4
70795: MINUS
70796: PUSH
70797: LD_VAR 0 2
70801: PUSH
70802: LD_INT 4
70804: MINUS
70805: PUSH
70806: LD_INT 2
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: LIST
70813: PUSH
70814: LD_VAR 0 1
70818: PUSH
70819: LD_INT 3
70821: MINUS
70822: PUSH
70823: LD_VAR 0 2
70827: PUSH
70828: LD_INT 1
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: LIST
70835: PUSH
70836: LD_VAR 0 1
70840: PUSH
70841: LD_INT 4
70843: PLUS
70844: PUSH
70845: LD_VAR 0 2
70849: PUSH
70850: LD_INT 4
70852: PUSH
70853: EMPTY
70854: LIST
70855: LIST
70856: LIST
70857: PUSH
70858: LD_VAR 0 1
70862: PUSH
70863: LD_INT 3
70865: PLUS
70866: PUSH
70867: LD_VAR 0 2
70871: PUSH
70872: LD_INT 3
70874: PLUS
70875: PUSH
70876: LD_INT 5
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: LIST
70883: PUSH
70884: LD_VAR 0 1
70888: PUSH
70889: LD_VAR 0 2
70893: PUSH
70894: LD_INT 4
70896: PLUS
70897: PUSH
70898: LD_INT 0
70900: PUSH
70901: EMPTY
70902: LIST
70903: LIST
70904: LIST
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: LIST
70910: LIST
70911: LIST
70912: ST_TO_ADDR
// end ; 1 :
70913: GO 71613
70915: LD_INT 1
70917: DOUBLE
70918: EQUAL
70919: IFTRUE 70923
70921: GO 71056
70923: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70924: LD_ADDR_VAR 0 5
70928: PUSH
70929: LD_VAR 0 1
70933: PUSH
70934: LD_VAR 0 2
70938: PUSH
70939: LD_INT 4
70941: MINUS
70942: PUSH
70943: LD_INT 3
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: LIST
70950: PUSH
70951: LD_VAR 0 1
70955: PUSH
70956: LD_INT 3
70958: MINUS
70959: PUSH
70960: LD_VAR 0 2
70964: PUSH
70965: LD_INT 3
70967: MINUS
70968: PUSH
70969: LD_INT 2
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: LIST
70976: PUSH
70977: LD_VAR 0 1
70981: PUSH
70982: LD_INT 4
70984: MINUS
70985: PUSH
70986: LD_VAR 0 2
70990: PUSH
70991: LD_INT 1
70993: PUSH
70994: EMPTY
70995: LIST
70996: LIST
70997: LIST
70998: PUSH
70999: LD_VAR 0 1
71003: PUSH
71004: LD_VAR 0 2
71008: PUSH
71009: LD_INT 3
71011: PLUS
71012: PUSH
71013: LD_INT 0
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: LIST
71020: PUSH
71021: LD_VAR 0 1
71025: PUSH
71026: LD_INT 4
71028: PLUS
71029: PUSH
71030: LD_VAR 0 2
71034: PUSH
71035: LD_INT 4
71037: PLUS
71038: PUSH
71039: LD_INT 5
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: LIST
71046: PUSH
71047: EMPTY
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: ST_TO_ADDR
// end ; 2 :
71054: GO 71613
71056: LD_INT 2
71058: DOUBLE
71059: EQUAL
71060: IFTRUE 71064
71062: GO 71193
71064: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71065: LD_ADDR_VAR 0 5
71069: PUSH
71070: LD_VAR 0 1
71074: PUSH
71075: LD_VAR 0 2
71079: PUSH
71080: LD_INT 3
71082: MINUS
71083: PUSH
71084: LD_INT 3
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: LIST
71091: PUSH
71092: LD_VAR 0 1
71096: PUSH
71097: LD_INT 4
71099: PLUS
71100: PUSH
71101: LD_VAR 0 2
71105: PUSH
71106: LD_INT 4
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: LIST
71113: PUSH
71114: LD_VAR 0 1
71118: PUSH
71119: LD_VAR 0 2
71123: PUSH
71124: LD_INT 4
71126: PLUS
71127: PUSH
71128: LD_INT 0
71130: PUSH
71131: EMPTY
71132: LIST
71133: LIST
71134: LIST
71135: PUSH
71136: LD_VAR 0 1
71140: PUSH
71141: LD_INT 3
71143: MINUS
71144: PUSH
71145: LD_VAR 0 2
71149: PUSH
71150: LD_INT 1
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: LIST
71157: PUSH
71158: LD_VAR 0 1
71162: PUSH
71163: LD_INT 4
71165: MINUS
71166: PUSH
71167: LD_VAR 0 2
71171: PUSH
71172: LD_INT 4
71174: MINUS
71175: PUSH
71176: LD_INT 2
71178: PUSH
71179: EMPTY
71180: LIST
71181: LIST
71182: LIST
71183: PUSH
71184: EMPTY
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: ST_TO_ADDR
// end ; 3 :
71191: GO 71613
71193: LD_INT 3
71195: DOUBLE
71196: EQUAL
71197: IFTRUE 71201
71199: GO 71334
71201: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71202: LD_ADDR_VAR 0 5
71206: PUSH
71207: LD_VAR 0 1
71211: PUSH
71212: LD_INT 3
71214: PLUS
71215: PUSH
71216: LD_VAR 0 2
71220: PUSH
71221: LD_INT 4
71223: PUSH
71224: EMPTY
71225: LIST
71226: LIST
71227: LIST
71228: PUSH
71229: LD_VAR 0 1
71233: PUSH
71234: LD_INT 4
71236: PLUS
71237: PUSH
71238: LD_VAR 0 2
71242: PUSH
71243: LD_INT 4
71245: PLUS
71246: PUSH
71247: LD_INT 5
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: LIST
71254: PUSH
71255: LD_VAR 0 1
71259: PUSH
71260: LD_INT 4
71262: MINUS
71263: PUSH
71264: LD_VAR 0 2
71268: PUSH
71269: LD_INT 1
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: LIST
71276: PUSH
71277: LD_VAR 0 1
71281: PUSH
71282: LD_VAR 0 2
71286: PUSH
71287: LD_INT 4
71289: MINUS
71290: PUSH
71291: LD_INT 3
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: LIST
71298: PUSH
71299: LD_VAR 0 1
71303: PUSH
71304: LD_INT 3
71306: MINUS
71307: PUSH
71308: LD_VAR 0 2
71312: PUSH
71313: LD_INT 3
71315: MINUS
71316: PUSH
71317: LD_INT 2
71319: PUSH
71320: EMPTY
71321: LIST
71322: LIST
71323: LIST
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: LIST
71329: LIST
71330: LIST
71331: ST_TO_ADDR
// end ; 4 :
71332: GO 71613
71334: LD_INT 4
71336: DOUBLE
71337: EQUAL
71338: IFTRUE 71342
71340: GO 71475
71342: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71343: LD_ADDR_VAR 0 5
71347: PUSH
71348: LD_VAR 0 1
71352: PUSH
71353: LD_VAR 0 2
71357: PUSH
71358: LD_INT 4
71360: PLUS
71361: PUSH
71362: LD_INT 0
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: LIST
71369: PUSH
71370: LD_VAR 0 1
71374: PUSH
71375: LD_INT 3
71377: PLUS
71378: PUSH
71379: LD_VAR 0 2
71383: PUSH
71384: LD_INT 3
71386: PLUS
71387: PUSH
71388: LD_INT 5
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: LIST
71395: PUSH
71396: LD_VAR 0 1
71400: PUSH
71401: LD_INT 4
71403: PLUS
71404: PUSH
71405: LD_VAR 0 2
71409: PUSH
71410: LD_INT 4
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: LIST
71417: PUSH
71418: LD_VAR 0 1
71422: PUSH
71423: LD_VAR 0 2
71427: PUSH
71428: LD_INT 3
71430: MINUS
71431: PUSH
71432: LD_INT 3
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: LIST
71439: PUSH
71440: LD_VAR 0 1
71444: PUSH
71445: LD_INT 4
71447: MINUS
71448: PUSH
71449: LD_VAR 0 2
71453: PUSH
71454: LD_INT 4
71456: MINUS
71457: PUSH
71458: LD_INT 2
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: LIST
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: ST_TO_ADDR
// end ; 5 :
71473: GO 71613
71475: LD_INT 5
71477: DOUBLE
71478: EQUAL
71479: IFTRUE 71483
71481: GO 71612
71483: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71484: LD_ADDR_VAR 0 5
71488: PUSH
71489: LD_VAR 0 1
71493: PUSH
71494: LD_INT 4
71496: MINUS
71497: PUSH
71498: LD_VAR 0 2
71502: PUSH
71503: LD_INT 1
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: LIST
71510: PUSH
71511: LD_VAR 0 1
71515: PUSH
71516: LD_VAR 0 2
71520: PUSH
71521: LD_INT 4
71523: MINUS
71524: PUSH
71525: LD_INT 3
71527: PUSH
71528: EMPTY
71529: LIST
71530: LIST
71531: LIST
71532: PUSH
71533: LD_VAR 0 1
71537: PUSH
71538: LD_INT 4
71540: PLUS
71541: PUSH
71542: LD_VAR 0 2
71546: PUSH
71547: LD_INT 4
71549: PLUS
71550: PUSH
71551: LD_INT 5
71553: PUSH
71554: EMPTY
71555: LIST
71556: LIST
71557: LIST
71558: PUSH
71559: LD_VAR 0 1
71563: PUSH
71564: LD_INT 3
71566: PLUS
71567: PUSH
71568: LD_VAR 0 2
71572: PUSH
71573: LD_INT 4
71575: PUSH
71576: EMPTY
71577: LIST
71578: LIST
71579: LIST
71580: PUSH
71581: LD_VAR 0 1
71585: PUSH
71586: LD_VAR 0 2
71590: PUSH
71591: LD_INT 3
71593: PLUS
71594: PUSH
71595: LD_INT 0
71597: PUSH
71598: EMPTY
71599: LIST
71600: LIST
71601: LIST
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: LIST
71607: LIST
71608: LIST
71609: ST_TO_ADDR
// end ; end ;
71610: GO 71613
71612: POP
// result := list ;
71613: LD_ADDR_VAR 0 4
71617: PUSH
71618: LD_VAR 0 5
71622: ST_TO_ADDR
// end ;
71623: LD_VAR 0 4
71627: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71628: LD_INT 0
71630: PPUSH
71631: PPUSH
71632: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71633: LD_VAR 0 1
71637: NOT
71638: IFTRUE 71666
71640: PUSH
71641: LD_VAR 0 2
71645: PUSH
71646: LD_INT 1
71648: PUSH
71649: LD_INT 2
71651: PUSH
71652: LD_INT 3
71654: PUSH
71655: LD_INT 4
71657: PUSH
71658: EMPTY
71659: LIST
71660: LIST
71661: LIST
71662: LIST
71663: IN
71664: NOT
71665: OR
71666: IFFALSE 71670
// exit ;
71668: GO 71753
// tmp := [ ] ;
71670: LD_ADDR_VAR 0 5
71674: PUSH
71675: EMPTY
71676: ST_TO_ADDR
// for i in units do
71677: LD_ADDR_VAR 0 4
71681: PUSH
71682: LD_VAR 0 1
71686: PUSH
71687: FOR_IN
71688: IFFALSE 71722
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
71690: LD_ADDR_VAR 0 5
71694: PUSH
71695: LD_VAR 0 5
71699: PPUSH
71700: LD_VAR 0 4
71704: PPUSH
71705: LD_VAR 0 2
71709: PPUSH
71710: CALL_OW 259
71714: PPUSH
71715: CALL 73148 0 2
71719: ST_TO_ADDR
71720: GO 71687
71722: POP
71723: POP
// if not tmp then
71724: LD_VAR 0 5
71728: NOT
71729: IFFALSE 71733
// exit ;
71731: GO 71753
// result := SortListByListDesc ( units , tmp ) ;
71733: LD_ADDR_VAR 0 3
71737: PUSH
71738: LD_VAR 0 1
71742: PPUSH
71743: LD_VAR 0 5
71747: PPUSH
71748: CALL_OW 77
71752: ST_TO_ADDR
// end ;
71753: LD_VAR 0 3
71757: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71758: LD_INT 0
71760: PPUSH
71761: PPUSH
71762: PPUSH
// result := false ;
71763: LD_ADDR_VAR 0 3
71767: PUSH
71768: LD_INT 0
71770: ST_TO_ADDR
// if not building then
71771: LD_VAR 0 2
71775: NOT
71776: IFFALSE 71780
// exit ;
71778: GO 71924
// x := GetX ( building ) ;
71780: LD_ADDR_VAR 0 4
71784: PUSH
71785: LD_VAR 0 2
71789: PPUSH
71790: CALL_OW 250
71794: ST_TO_ADDR
// y := GetY ( building ) ;
71795: LD_ADDR_VAR 0 5
71799: PUSH
71800: LD_VAR 0 2
71804: PPUSH
71805: CALL_OW 251
71809: ST_TO_ADDR
// if not x or not y then
71810: LD_VAR 0 4
71814: NOT
71815: IFTRUE 71824
71817: PUSH
71818: LD_VAR 0 5
71822: NOT
71823: OR
71824: IFFALSE 71828
// exit ;
71826: GO 71924
// if GetTaskList ( unit ) then
71828: LD_VAR 0 1
71832: PPUSH
71833: CALL_OW 437
71837: IFFALSE 71924
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71839: LD_STRING e
71841: PUSH
71842: LD_VAR 0 1
71846: PPUSH
71847: CALL_OW 437
71851: PUSH
71852: LD_INT 1
71854: ARRAY
71855: PUSH
71856: LD_INT 1
71858: ARRAY
71859: EQUAL
71860: IFFALSE 71887
71862: PUSH
71863: LD_VAR 0 4
71867: PUSH
71868: LD_VAR 0 1
71872: PPUSH
71873: CALL_OW 437
71877: PUSH
71878: LD_INT 1
71880: ARRAY
71881: PUSH
71882: LD_INT 2
71884: ARRAY
71885: EQUAL
71886: AND
71887: IFFALSE 71914
71889: PUSH
71890: LD_VAR 0 5
71894: PUSH
71895: LD_VAR 0 1
71899: PPUSH
71900: CALL_OW 437
71904: PUSH
71905: LD_INT 1
71907: ARRAY
71908: PUSH
71909: LD_INT 3
71911: ARRAY
71912: EQUAL
71913: AND
71914: IFFALSE 71924
// result := true end ;
71916: LD_ADDR_VAR 0 3
71920: PUSH
71921: LD_INT 1
71923: ST_TO_ADDR
// end ;
71924: LD_VAR 0 3
71928: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71929: LD_INT 0
71931: PPUSH
// result := false ;
71932: LD_ADDR_VAR 0 4
71936: PUSH
71937: LD_INT 0
71939: ST_TO_ADDR
// if GetTaskList ( unit ) then
71940: LD_VAR 0 1
71944: PPUSH
71945: CALL_OW 437
71949: IFFALSE 72036
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71951: LD_STRING M
71953: PUSH
71954: LD_VAR 0 1
71958: PPUSH
71959: CALL_OW 437
71963: PUSH
71964: LD_INT 1
71966: ARRAY
71967: PUSH
71968: LD_INT 1
71970: ARRAY
71971: EQUAL
71972: IFFALSE 71999
71974: PUSH
71975: LD_VAR 0 2
71979: PUSH
71980: LD_VAR 0 1
71984: PPUSH
71985: CALL_OW 437
71989: PUSH
71990: LD_INT 1
71992: ARRAY
71993: PUSH
71994: LD_INT 2
71996: ARRAY
71997: EQUAL
71998: AND
71999: IFFALSE 72026
72001: PUSH
72002: LD_VAR 0 3
72006: PUSH
72007: LD_VAR 0 1
72011: PPUSH
72012: CALL_OW 437
72016: PUSH
72017: LD_INT 1
72019: ARRAY
72020: PUSH
72021: LD_INT 3
72023: ARRAY
72024: EQUAL
72025: AND
72026: IFFALSE 72036
// result := true ;
72028: LD_ADDR_VAR 0 4
72032: PUSH
72033: LD_INT 1
72035: ST_TO_ADDR
// end ; end ;
72036: LD_VAR 0 4
72040: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72041: LD_INT 0
72043: PPUSH
72044: PPUSH
72045: PPUSH
72046: PPUSH
// if not unit or not area then
72047: LD_VAR 0 1
72051: NOT
72052: IFTRUE 72061
72054: PUSH
72055: LD_VAR 0 2
72059: NOT
72060: OR
72061: IFFALSE 72065
// exit ;
72063: GO 72241
// tmp := AreaToList ( area , i ) ;
72065: LD_ADDR_VAR 0 6
72069: PUSH
72070: LD_VAR 0 2
72074: PPUSH
72075: LD_VAR 0 5
72079: PPUSH
72080: CALL_OW 517
72084: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72085: LD_ADDR_VAR 0 5
72089: PUSH
72090: DOUBLE
72091: LD_INT 1
72093: DEC
72094: ST_TO_ADDR
72095: LD_VAR 0 6
72099: PUSH
72100: LD_INT 1
72102: ARRAY
72103: PUSH
72104: FOR_TO
72105: IFFALSE 72239
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72107: LD_ADDR_VAR 0 7
72111: PUSH
72112: LD_VAR 0 6
72116: PUSH
72117: LD_INT 1
72119: ARRAY
72120: PUSH
72121: LD_VAR 0 5
72125: ARRAY
72126: PUSH
72127: LD_VAR 0 6
72131: PUSH
72132: LD_INT 2
72134: ARRAY
72135: PUSH
72136: LD_VAR 0 5
72140: ARRAY
72141: PUSH
72142: EMPTY
72143: LIST
72144: LIST
72145: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
72146: LD_INT 92
72148: PUSH
72149: LD_VAR 0 7
72153: PUSH
72154: LD_INT 1
72156: ARRAY
72157: PUSH
72158: LD_VAR 0 7
72162: PUSH
72163: LD_INT 2
72165: ARRAY
72166: PUSH
72167: LD_INT 2
72169: PUSH
72170: EMPTY
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: PPUSH
72176: CALL_OW 69
72180: PUSH
72181: LD_INT 0
72183: EQUAL
72184: IFFALSE 72237
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72186: LD_VAR 0 1
72190: PPUSH
72191: LD_VAR 0 7
72195: PUSH
72196: LD_INT 1
72198: ARRAY
72199: PPUSH
72200: LD_VAR 0 7
72204: PUSH
72205: LD_INT 2
72207: ARRAY
72208: PPUSH
72209: LD_VAR 0 3
72213: PPUSH
72214: CALL_OW 48
// result := IsPlaced ( unit ) ;
72218: LD_ADDR_VAR 0 4
72222: PUSH
72223: LD_VAR 0 1
72227: PPUSH
72228: CALL_OW 305
72232: ST_TO_ADDR
// exit ;
72233: POP
72234: POP
72235: GO 72241
// end ; end ;
72237: GO 72104
72239: POP
72240: POP
// end ;
72241: LD_VAR 0 4
72245: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72246: LD_INT 0
72248: PPUSH
72249: PPUSH
72250: PPUSH
// if not side or side > 8 then
72251: LD_VAR 0 1
72255: NOT
72256: IFTRUE 72268
72258: PUSH
72259: LD_VAR 0 1
72263: PUSH
72264: LD_INT 8
72266: GREATER
72267: OR
72268: IFFALSE 72272
// exit ;
72270: GO 72459
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72272: LD_ADDR_VAR 0 4
72276: PUSH
72277: LD_INT 22
72279: PUSH
72280: LD_VAR 0 1
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: PUSH
72289: LD_INT 21
72291: PUSH
72292: LD_INT 3
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: PUSH
72299: EMPTY
72300: LIST
72301: LIST
72302: PPUSH
72303: CALL_OW 69
72307: ST_TO_ADDR
// if not tmp then
72308: LD_VAR 0 4
72312: NOT
72313: IFFALSE 72317
// exit ;
72315: GO 72459
// enable_addtolog := true ;
72317: LD_ADDR_OWVAR 81
72321: PUSH
72322: LD_INT 1
72324: ST_TO_ADDR
// AddToLog ( [ ) ;
72325: LD_STRING [
72327: PPUSH
72328: CALL_OW 561
// for i in tmp do
72332: LD_ADDR_VAR 0 3
72336: PUSH
72337: LD_VAR 0 4
72341: PUSH
72342: FOR_IN
72343: IFFALSE 72450
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72345: LD_STRING [
72347: PUSH
72348: LD_VAR 0 3
72352: PPUSH
72353: CALL_OW 266
72357: STR
72358: PUSH
72359: LD_STRING , 
72361: STR
72362: PUSH
72363: LD_VAR 0 3
72367: PPUSH
72368: CALL_OW 250
72372: STR
72373: PUSH
72374: LD_STRING , 
72376: STR
72377: PUSH
72378: LD_VAR 0 3
72382: PPUSH
72383: CALL_OW 251
72387: STR
72388: PUSH
72389: LD_STRING , 
72391: STR
72392: PUSH
72393: LD_VAR 0 3
72397: PPUSH
72398: CALL_OW 254
72402: STR
72403: PUSH
72404: LD_STRING , 
72406: STR
72407: PUSH
72408: LD_VAR 0 3
72412: PPUSH
72413: LD_INT 1
72415: PPUSH
72416: CALL_OW 268
72420: STR
72421: PUSH
72422: LD_STRING , 
72424: STR
72425: PUSH
72426: LD_VAR 0 3
72430: PPUSH
72431: LD_INT 2
72433: PPUSH
72434: CALL_OW 268
72438: STR
72439: PUSH
72440: LD_STRING ],
72442: STR
72443: PPUSH
72444: CALL_OW 561
// end ;
72448: GO 72342
72450: POP
72451: POP
// AddToLog ( ]; ) ;
72452: LD_STRING ];
72454: PPUSH
72455: CALL_OW 561
// end ;
72459: LD_VAR 0 2
72463: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72464: LD_INT 0
72466: PPUSH
72467: PPUSH
72468: PPUSH
72469: PPUSH
72470: PPUSH
// if not area or not rate or not max then
72471: LD_VAR 0 1
72475: NOT
72476: IFTRUE 72485
72478: PUSH
72479: LD_VAR 0 2
72483: NOT
72484: OR
72485: IFTRUE 72494
72487: PUSH
72488: LD_VAR 0 4
72492: NOT
72493: OR
72494: IFFALSE 72498
// exit ;
72496: GO 72687
// while 1 do
72498: LD_INT 1
72500: IFFALSE 72687
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72502: LD_ADDR_VAR 0 9
72506: PUSH
72507: LD_VAR 0 1
72511: PPUSH
72512: LD_INT 1
72514: PPUSH
72515: CALL_OW 287
72519: PUSH
72520: LD_INT 10
72522: MUL
72523: ST_TO_ADDR
// r := rate / 10 ;
72524: LD_ADDR_VAR 0 7
72528: PUSH
72529: LD_VAR 0 2
72533: PUSH
72534: LD_INT 10
72536: DIVREAL
72537: ST_TO_ADDR
// time := 1 1$00 ;
72538: LD_ADDR_VAR 0 8
72542: PUSH
72543: LD_INT 2100
72545: ST_TO_ADDR
// if amount < min then
72546: LD_VAR 0 9
72550: PUSH
72551: LD_VAR 0 3
72555: LESS
72556: IFFALSE 72574
// r := r * 2 else
72558: LD_ADDR_VAR 0 7
72562: PUSH
72563: LD_VAR 0 7
72567: PUSH
72568: LD_INT 2
72570: MUL
72571: ST_TO_ADDR
72572: GO 72600
// if amount > max then
72574: LD_VAR 0 9
72578: PUSH
72579: LD_VAR 0 4
72583: GREATER
72584: IFFALSE 72600
// r := r / 2 ;
72586: LD_ADDR_VAR 0 7
72590: PUSH
72591: LD_VAR 0 7
72595: PUSH
72596: LD_INT 2
72598: DIVREAL
72599: ST_TO_ADDR
// time := time / r ;
72600: LD_ADDR_VAR 0 8
72604: PUSH
72605: LD_VAR 0 8
72609: PUSH
72610: LD_VAR 0 7
72614: DIVREAL
72615: ST_TO_ADDR
// if time < 0 then
72616: LD_VAR 0 8
72620: PUSH
72621: LD_INT 0
72623: LESS
72624: IFFALSE 72641
// time := time * - 1 ;
72626: LD_ADDR_VAR 0 8
72630: PUSH
72631: LD_VAR 0 8
72635: PUSH
72636: LD_INT 1
72638: NEG
72639: MUL
72640: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
72641: LD_VAR 0 8
72645: PUSH
72646: LD_INT 35
72648: PPUSH
72649: LD_INT 875
72651: PPUSH
72652: CALL_OW 12
72656: PLUS
72657: PPUSH
72658: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72662: LD_INT 1
72664: PPUSH
72665: LD_INT 5
72667: PPUSH
72668: CALL_OW 12
72672: PPUSH
72673: LD_VAR 0 1
72677: PPUSH
72678: LD_INT 1
72680: PPUSH
72681: CALL_OW 55
// end ;
72685: GO 72498
// end ;
72687: LD_VAR 0 5
72691: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72692: LD_INT 0
72694: PPUSH
72695: PPUSH
72696: PPUSH
72697: PPUSH
72698: PPUSH
72699: PPUSH
72700: PPUSH
72701: PPUSH
// if not turrets or not factories then
72702: LD_VAR 0 1
72706: NOT
72707: IFTRUE 72716
72709: PUSH
72710: LD_VAR 0 2
72714: NOT
72715: OR
72716: IFFALSE 72720
// exit ;
72718: GO 73027
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72720: LD_ADDR_VAR 0 10
72724: PUSH
72725: LD_INT 5
72727: PUSH
72728: LD_INT 6
72730: PUSH
72731: EMPTY
72732: LIST
72733: LIST
72734: PUSH
72735: LD_INT 2
72737: PUSH
72738: LD_INT 4
72740: PUSH
72741: EMPTY
72742: LIST
72743: LIST
72744: PUSH
72745: LD_INT 3
72747: PUSH
72748: LD_INT 5
72750: PUSH
72751: EMPTY
72752: LIST
72753: LIST
72754: PUSH
72755: EMPTY
72756: LIST
72757: LIST
72758: LIST
72759: PUSH
72760: LD_INT 24
72762: PUSH
72763: LD_INT 25
72765: PUSH
72766: EMPTY
72767: LIST
72768: LIST
72769: PUSH
72770: LD_INT 23
72772: PUSH
72773: LD_INT 27
72775: PUSH
72776: EMPTY
72777: LIST
72778: LIST
72779: PUSH
72780: EMPTY
72781: LIST
72782: LIST
72783: PUSH
72784: LD_INT 42
72786: PUSH
72787: LD_INT 43
72789: PUSH
72790: EMPTY
72791: LIST
72792: LIST
72793: PUSH
72794: LD_INT 44
72796: PUSH
72797: LD_INT 46
72799: PUSH
72800: EMPTY
72801: LIST
72802: LIST
72803: PUSH
72804: LD_INT 45
72806: PUSH
72807: LD_INT 47
72809: PUSH
72810: EMPTY
72811: LIST
72812: LIST
72813: PUSH
72814: EMPTY
72815: LIST
72816: LIST
72817: LIST
72818: PUSH
72819: EMPTY
72820: LIST
72821: LIST
72822: LIST
72823: ST_TO_ADDR
// result := [ ] ;
72824: LD_ADDR_VAR 0 3
72828: PUSH
72829: EMPTY
72830: ST_TO_ADDR
// for i in turrets do
72831: LD_ADDR_VAR 0 4
72835: PUSH
72836: LD_VAR 0 1
72840: PUSH
72841: FOR_IN
72842: IFFALSE 73025
// begin nat := GetNation ( i ) ;
72844: LD_ADDR_VAR 0 7
72848: PUSH
72849: LD_VAR 0 4
72853: PPUSH
72854: CALL_OW 248
72858: ST_TO_ADDR
// weapon := 0 ;
72859: LD_ADDR_VAR 0 8
72863: PUSH
72864: LD_INT 0
72866: ST_TO_ADDR
// if not nat then
72867: LD_VAR 0 7
72871: NOT
72872: IFFALSE 72876
// continue ;
72874: GO 72841
// for j in list [ nat ] do
72876: LD_ADDR_VAR 0 5
72880: PUSH
72881: LD_VAR 0 10
72885: PUSH
72886: LD_VAR 0 7
72890: ARRAY
72891: PUSH
72892: FOR_IN
72893: IFFALSE 72934
// if GetBWeapon ( i ) = j [ 1 ] then
72895: LD_VAR 0 4
72899: PPUSH
72900: CALL_OW 269
72904: PUSH
72905: LD_VAR 0 5
72909: PUSH
72910: LD_INT 1
72912: ARRAY
72913: EQUAL
72914: IFFALSE 72932
// begin weapon := j [ 2 ] ;
72916: LD_ADDR_VAR 0 8
72920: PUSH
72921: LD_VAR 0 5
72925: PUSH
72926: LD_INT 2
72928: ARRAY
72929: ST_TO_ADDR
// break ;
72930: GO 72934
// end ;
72932: GO 72892
72934: POP
72935: POP
// if not weapon then
72936: LD_VAR 0 8
72940: NOT
72941: IFFALSE 72945
// continue ;
72943: GO 72841
// for k in factories do
72945: LD_ADDR_VAR 0 6
72949: PUSH
72950: LD_VAR 0 2
72954: PUSH
72955: FOR_IN
72956: IFFALSE 73021
// begin weapons := AvailableWeaponList ( k ) ;
72958: LD_ADDR_VAR 0 9
72962: PUSH
72963: LD_VAR 0 6
72967: PPUSH
72968: CALL_OW 478
72972: ST_TO_ADDR
// if not weapons then
72973: LD_VAR 0 9
72977: NOT
72978: IFFALSE 72982
// continue ;
72980: GO 72955
// if weapon in weapons then
72982: LD_VAR 0 8
72986: PUSH
72987: LD_VAR 0 9
72991: IN
72992: IFFALSE 73019
// begin result := [ i , weapon ] ;
72994: LD_ADDR_VAR 0 3
72998: PUSH
72999: LD_VAR 0 4
73003: PUSH
73004: LD_VAR 0 8
73008: PUSH
73009: EMPTY
73010: LIST
73011: LIST
73012: ST_TO_ADDR
// exit ;
73013: POP
73014: POP
73015: POP
73016: POP
73017: GO 73027
// end ; end ;
73019: GO 72955
73021: POP
73022: POP
// end ;
73023: GO 72841
73025: POP
73026: POP
// end ;
73027: LD_VAR 0 3
73031: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73032: LD_INT 0
73034: PPUSH
// if not side or side > 8 then
73035: LD_VAR 0 3
73039: NOT
73040: IFTRUE 73052
73042: PUSH
73043: LD_VAR 0 3
73047: PUSH
73048: LD_INT 8
73050: GREATER
73051: OR
73052: IFFALSE 73056
// exit ;
73054: GO 73115
// if not range then
73056: LD_VAR 0 4
73060: NOT
73061: IFFALSE 73072
// range := - 12 ;
73063: LD_ADDR_VAR 0 4
73067: PUSH
73068: LD_INT 12
73070: NEG
73071: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73072: LD_VAR 0 1
73076: PPUSH
73077: LD_VAR 0 2
73081: PPUSH
73082: LD_VAR 0 3
73086: PPUSH
73087: LD_VAR 0 4
73091: PPUSH
73092: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73096: LD_VAR 0 1
73100: PPUSH
73101: LD_VAR 0 2
73105: PPUSH
73106: LD_VAR 0 3
73110: PPUSH
73111: CALL_OW 331
// end ;
73115: LD_VAR 0 5
73119: RET
// export function Video ( mode ) ; begin
73120: LD_INT 0
73122: PPUSH
// ingame_video = mode ;
73123: LD_ADDR_OWVAR 52
73127: PUSH
73128: LD_VAR 0 1
73132: ST_TO_ADDR
// interface_hidden = mode ;
73133: LD_ADDR_OWVAR 54
73137: PUSH
73138: LD_VAR 0 1
73142: ST_TO_ADDR
// end ;
73143: LD_VAR 0 2
73147: RET
// export function Join ( array , element ) ; begin
73148: LD_INT 0
73150: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73151: LD_ADDR_VAR 0 3
73155: PUSH
73156: LD_VAR 0 1
73160: PPUSH
73161: LD_VAR 0 1
73165: PUSH
73166: LD_INT 1
73168: PLUS
73169: PPUSH
73170: LD_VAR 0 2
73174: PPUSH
73175: CALL_OW 1
73179: ST_TO_ADDR
// end ;
73180: LD_VAR 0 3
73184: RET
// export function JoinUnion ( array , element ) ; begin
73185: LD_INT 0
73187: PPUSH
// result := array union element ;
73188: LD_ADDR_VAR 0 3
73192: PUSH
73193: LD_VAR 0 1
73197: PUSH
73198: LD_VAR 0 2
73202: UNION
73203: ST_TO_ADDR
// end ;
73204: LD_VAR 0 3
73208: RET
// export function GetBehemoths ( side ) ; begin
73209: LD_INT 0
73211: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
73212: LD_ADDR_VAR 0 2
73216: PUSH
73217: LD_INT 22
73219: PUSH
73220: LD_VAR 0 1
73224: PUSH
73225: EMPTY
73226: LIST
73227: LIST
73228: PUSH
73229: LD_INT 31
73231: PUSH
73232: LD_INT 25
73234: PUSH
73235: EMPTY
73236: LIST
73237: LIST
73238: PUSH
73239: EMPTY
73240: LIST
73241: LIST
73242: PPUSH
73243: CALL_OW 69
73247: ST_TO_ADDR
// end ;
73248: LD_VAR 0 2
73252: RET
// export function Shuffle ( array ) ; var i , index ; begin
73253: LD_INT 0
73255: PPUSH
73256: PPUSH
73257: PPUSH
// result := [ ] ;
73258: LD_ADDR_VAR 0 2
73262: PUSH
73263: EMPTY
73264: ST_TO_ADDR
// if not array then
73265: LD_VAR 0 1
73269: NOT
73270: IFFALSE 73274
// exit ;
73272: GO 73373
// Randomize ;
73274: CALL_OW 10
// for i = array downto 1 do
73278: LD_ADDR_VAR 0 3
73282: PUSH
73283: DOUBLE
73284: LD_VAR 0 1
73288: INC
73289: ST_TO_ADDR
73290: LD_INT 1
73292: PUSH
73293: FOR_DOWNTO
73294: IFFALSE 73371
// begin index := rand ( 1 , array ) ;
73296: LD_ADDR_VAR 0 4
73300: PUSH
73301: LD_INT 1
73303: PPUSH
73304: LD_VAR 0 1
73308: PPUSH
73309: CALL_OW 12
73313: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73314: LD_ADDR_VAR 0 2
73318: PUSH
73319: LD_VAR 0 2
73323: PPUSH
73324: LD_VAR 0 2
73328: PUSH
73329: LD_INT 1
73331: PLUS
73332: PPUSH
73333: LD_VAR 0 1
73337: PUSH
73338: LD_VAR 0 4
73342: ARRAY
73343: PPUSH
73344: CALL_OW 2
73348: ST_TO_ADDR
// array := Delete ( array , index ) ;
73349: LD_ADDR_VAR 0 1
73353: PUSH
73354: LD_VAR 0 1
73358: PPUSH
73359: LD_VAR 0 4
73363: PPUSH
73364: CALL_OW 3
73368: ST_TO_ADDR
// end ;
73369: GO 73293
73371: POP
73372: POP
// end ;
73373: LD_VAR 0 2
73377: RET
// export function GetBaseMaterials ( base ) ; begin
73378: LD_INT 0
73380: PPUSH
// result := [ 0 , 0 , 0 ] ;
73381: LD_ADDR_VAR 0 2
73385: PUSH
73386: LD_INT 0
73388: PUSH
73389: LD_INT 0
73391: PUSH
73392: LD_INT 0
73394: PUSH
73395: EMPTY
73396: LIST
73397: LIST
73398: LIST
73399: ST_TO_ADDR
// if not base then
73400: LD_VAR 0 1
73404: NOT
73405: IFFALSE 73409
// exit ;
73407: GO 73458
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73409: LD_ADDR_VAR 0 2
73413: PUSH
73414: LD_VAR 0 1
73418: PPUSH
73419: LD_INT 1
73421: PPUSH
73422: CALL_OW 275
73426: PUSH
73427: LD_VAR 0 1
73431: PPUSH
73432: LD_INT 2
73434: PPUSH
73435: CALL_OW 275
73439: PUSH
73440: LD_VAR 0 1
73444: PPUSH
73445: LD_INT 3
73447: PPUSH
73448: CALL_OW 275
73452: PUSH
73453: EMPTY
73454: LIST
73455: LIST
73456: LIST
73457: ST_TO_ADDR
// end ;
73458: LD_VAR 0 2
73462: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73463: LD_INT 0
73465: PPUSH
73466: PPUSH
// result := array ;
73467: LD_ADDR_VAR 0 3
73471: PUSH
73472: LD_VAR 0 1
73476: ST_TO_ADDR
// if size >= result then
73477: LD_VAR 0 2
73481: PUSH
73482: LD_VAR 0 3
73486: GREATEREQUAL
73487: IFFALSE 73491
// exit ;
73489: GO 73541
// if size then
73491: LD_VAR 0 2
73495: IFFALSE 73541
// for i := array downto size do
73497: LD_ADDR_VAR 0 4
73501: PUSH
73502: DOUBLE
73503: LD_VAR 0 1
73507: INC
73508: ST_TO_ADDR
73509: LD_VAR 0 2
73513: PUSH
73514: FOR_DOWNTO
73515: IFFALSE 73539
// result := Delete ( result , result ) ;
73517: LD_ADDR_VAR 0 3
73521: PUSH
73522: LD_VAR 0 3
73526: PPUSH
73527: LD_VAR 0 3
73531: PPUSH
73532: CALL_OW 3
73536: ST_TO_ADDR
73537: GO 73514
73539: POP
73540: POP
// end ;
73541: LD_VAR 0 3
73545: RET
// export function ComExit ( unit ) ; var tmp ; begin
73546: LD_INT 0
73548: PPUSH
73549: PPUSH
// if not IsInUnit ( unit ) then
73550: LD_VAR 0 1
73554: PPUSH
73555: CALL_OW 310
73559: NOT
73560: IFFALSE 73564
// exit ;
73562: GO 73624
// tmp := IsInUnit ( unit ) ;
73564: LD_ADDR_VAR 0 3
73568: PUSH
73569: LD_VAR 0 1
73573: PPUSH
73574: CALL_OW 310
73578: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73579: LD_VAR 0 3
73583: PPUSH
73584: CALL_OW 247
73588: PUSH
73589: LD_INT 2
73591: EQUAL
73592: IFFALSE 73605
// ComExitVehicle ( unit ) else
73594: LD_VAR 0 1
73598: PPUSH
73599: CALL_OW 121
73603: GO 73614
// ComExitBuilding ( unit ) ;
73605: LD_VAR 0 1
73609: PPUSH
73610: CALL_OW 122
// result := tmp ;
73614: LD_ADDR_VAR 0 2
73618: PUSH
73619: LD_VAR 0 3
73623: ST_TO_ADDR
// end ;
73624: LD_VAR 0 2
73628: RET
// export function ComExitAll ( units ) ; var i ; begin
73629: LD_INT 0
73631: PPUSH
73632: PPUSH
// if not units then
73633: LD_VAR 0 1
73637: NOT
73638: IFFALSE 73642
// exit ;
73640: GO 73668
// for i in units do
73642: LD_ADDR_VAR 0 3
73646: PUSH
73647: LD_VAR 0 1
73651: PUSH
73652: FOR_IN
73653: IFFALSE 73666
// ComExit ( i ) ;
73655: LD_VAR 0 3
73659: PPUSH
73660: CALL 73546 0 1
73664: GO 73652
73666: POP
73667: POP
// end ;
73668: LD_VAR 0 2
73672: RET
// export function ResetHc ; begin
73673: LD_INT 0
73675: PPUSH
// InitHc ;
73676: CALL_OW 19
// hc_importance := 0 ;
73680: LD_ADDR_OWVAR 32
73684: PUSH
73685: LD_INT 0
73687: ST_TO_ADDR
// end ;
73688: LD_VAR 0 1
73692: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73693: LD_INT 0
73695: PPUSH
73696: PPUSH
73697: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73698: LD_ADDR_VAR 0 6
73702: PUSH
73703: LD_VAR 0 1
73707: PUSH
73708: LD_VAR 0 3
73712: PLUS
73713: PUSH
73714: LD_INT 2
73716: DIV
73717: ST_TO_ADDR
// if _x < 0 then
73718: LD_VAR 0 6
73722: PUSH
73723: LD_INT 0
73725: LESS
73726: IFFALSE 73743
// _x := _x * - 1 ;
73728: LD_ADDR_VAR 0 6
73732: PUSH
73733: LD_VAR 0 6
73737: PUSH
73738: LD_INT 1
73740: NEG
73741: MUL
73742: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73743: LD_ADDR_VAR 0 7
73747: PUSH
73748: LD_VAR 0 2
73752: PUSH
73753: LD_VAR 0 4
73757: PLUS
73758: PUSH
73759: LD_INT 2
73761: DIV
73762: ST_TO_ADDR
// if _y < 0 then
73763: LD_VAR 0 7
73767: PUSH
73768: LD_INT 0
73770: LESS
73771: IFFALSE 73788
// _y := _y * - 1 ;
73773: LD_ADDR_VAR 0 7
73777: PUSH
73778: LD_VAR 0 7
73782: PUSH
73783: LD_INT 1
73785: NEG
73786: MUL
73787: ST_TO_ADDR
// result := [ _x , _y ] ;
73788: LD_ADDR_VAR 0 5
73792: PUSH
73793: LD_VAR 0 6
73797: PUSH
73798: LD_VAR 0 7
73802: PUSH
73803: EMPTY
73804: LIST
73805: LIST
73806: ST_TO_ADDR
// end ;
73807: LD_VAR 0 5
73811: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73812: LD_INT 0
73814: PPUSH
73815: PPUSH
73816: PPUSH
73817: PPUSH
// task := GetTaskList ( unit ) ;
73818: LD_ADDR_VAR 0 7
73822: PUSH
73823: LD_VAR 0 1
73827: PPUSH
73828: CALL_OW 437
73832: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73833: LD_VAR 0 7
73837: NOT
73838: IFFALSE 73857
73840: PUSH
73841: LD_VAR 0 1
73845: PPUSH
73846: LD_VAR 0 2
73850: PPUSH
73851: CALL_OW 308
73855: NOT
73856: AND
73857: IFFALSE 73861
// exit ;
73859: GO 73979
// if IsInArea ( unit , area ) then
73861: LD_VAR 0 1
73865: PPUSH
73866: LD_VAR 0 2
73870: PPUSH
73871: CALL_OW 308
73875: IFFALSE 73893
// begin ComMoveToArea ( unit , goAway ) ;
73877: LD_VAR 0 1
73881: PPUSH
73882: LD_VAR 0 3
73886: PPUSH
73887: CALL_OW 113
// exit ;
73891: GO 73979
// end ; if task [ 1 ] [ 1 ] <> M then
73893: LD_VAR 0 7
73897: PUSH
73898: LD_INT 1
73900: ARRAY
73901: PUSH
73902: LD_INT 1
73904: ARRAY
73905: PUSH
73906: LD_STRING M
73908: NONEQUAL
73909: IFFALSE 73913
// exit ;
73911: GO 73979
// x := task [ 1 ] [ 2 ] ;
73913: LD_ADDR_VAR 0 5
73917: PUSH
73918: LD_VAR 0 7
73922: PUSH
73923: LD_INT 1
73925: ARRAY
73926: PUSH
73927: LD_INT 2
73929: ARRAY
73930: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73931: LD_ADDR_VAR 0 6
73935: PUSH
73936: LD_VAR 0 7
73940: PUSH
73941: LD_INT 1
73943: ARRAY
73944: PUSH
73945: LD_INT 3
73947: ARRAY
73948: ST_TO_ADDR
// if InArea ( x , y , area ) then
73949: LD_VAR 0 5
73953: PPUSH
73954: LD_VAR 0 6
73958: PPUSH
73959: LD_VAR 0 2
73963: PPUSH
73964: CALL_OW 309
73968: IFFALSE 73979
// ComStop ( unit ) ;
73970: LD_VAR 0 1
73974: PPUSH
73975: CALL_OW 141
// end ;
73979: LD_VAR 0 4
73983: RET
// export function Abs ( value ) ; begin
73984: LD_INT 0
73986: PPUSH
// result := value ;
73987: LD_ADDR_VAR 0 2
73991: PUSH
73992: LD_VAR 0 1
73996: ST_TO_ADDR
// if value < 0 then
73997: LD_VAR 0 1
74001: PUSH
74002: LD_INT 0
74004: LESS
74005: IFFALSE 74022
// result := value * - 1 ;
74007: LD_ADDR_VAR 0 2
74011: PUSH
74012: LD_VAR 0 1
74016: PUSH
74017: LD_INT 1
74019: NEG
74020: MUL
74021: ST_TO_ADDR
// end ;
74022: LD_VAR 0 2
74026: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74027: LD_INT 0
74029: PPUSH
74030: PPUSH
74031: PPUSH
74032: PPUSH
74033: PPUSH
74034: PPUSH
74035: PPUSH
74036: PPUSH
// if not unit or not building then
74037: LD_VAR 0 1
74041: NOT
74042: IFTRUE 74051
74044: PUSH
74045: LD_VAR 0 2
74049: NOT
74050: OR
74051: IFFALSE 74055
// exit ;
74053: GO 74283
// x := GetX ( building ) ;
74055: LD_ADDR_VAR 0 4
74059: PUSH
74060: LD_VAR 0 2
74064: PPUSH
74065: CALL_OW 250
74069: ST_TO_ADDR
// y := GetY ( building ) ;
74070: LD_ADDR_VAR 0 6
74074: PUSH
74075: LD_VAR 0 2
74079: PPUSH
74080: CALL_OW 251
74084: ST_TO_ADDR
// d := GetDir ( building ) ;
74085: LD_ADDR_VAR 0 8
74089: PUSH
74090: LD_VAR 0 2
74094: PPUSH
74095: CALL_OW 254
74099: ST_TO_ADDR
// r := 4 ;
74100: LD_ADDR_VAR 0 9
74104: PUSH
74105: LD_INT 4
74107: ST_TO_ADDR
// for i := 1 to 5 do
74108: LD_ADDR_VAR 0 10
74112: PUSH
74113: DOUBLE
74114: LD_INT 1
74116: DEC
74117: ST_TO_ADDR
74118: LD_INT 5
74120: PUSH
74121: FOR_TO
74122: IFFALSE 74281
// begin _x := ShiftX ( x , d , r + i ) ;
74124: LD_ADDR_VAR 0 5
74128: PUSH
74129: LD_VAR 0 4
74133: PPUSH
74134: LD_VAR 0 8
74138: PPUSH
74139: LD_VAR 0 9
74143: PUSH
74144: LD_VAR 0 10
74148: PLUS
74149: PPUSH
74150: CALL_OW 272
74154: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74155: LD_ADDR_VAR 0 7
74159: PUSH
74160: LD_VAR 0 6
74164: PPUSH
74165: LD_VAR 0 8
74169: PPUSH
74170: LD_VAR 0 9
74174: PUSH
74175: LD_VAR 0 10
74179: PLUS
74180: PPUSH
74181: CALL_OW 273
74185: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74186: LD_VAR 0 5
74190: PPUSH
74191: LD_VAR 0 7
74195: PPUSH
74196: CALL_OW 488
74200: IFFALSE 74235
74202: PUSH
74203: LD_VAR 0 5
74207: PPUSH
74208: LD_VAR 0 7
74212: PPUSH
74213: CALL_OW 428
74217: PPUSH
74218: CALL_OW 247
74222: PUSH
74223: LD_INT 3
74225: PUSH
74226: LD_INT 2
74228: PUSH
74229: EMPTY
74230: LIST
74231: LIST
74232: IN
74233: NOT
74234: AND
74235: IFFALSE 74279
// begin ComMoveXY ( unit , _x , _y ) ;
74237: LD_VAR 0 1
74241: PPUSH
74242: LD_VAR 0 5
74246: PPUSH
74247: LD_VAR 0 7
74251: PPUSH
74252: CALL_OW 111
// result := [ _x , _y ] ;
74256: LD_ADDR_VAR 0 3
74260: PUSH
74261: LD_VAR 0 5
74265: PUSH
74266: LD_VAR 0 7
74270: PUSH
74271: EMPTY
74272: LIST
74273: LIST
74274: ST_TO_ADDR
// exit ;
74275: POP
74276: POP
74277: GO 74283
// end ; end ;
74279: GO 74121
74281: POP
74282: POP
// end ;
74283: LD_VAR 0 3
74287: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74288: LD_INT 0
74290: PPUSH
74291: PPUSH
74292: PPUSH
// result := 0 ;
74293: LD_ADDR_VAR 0 3
74297: PUSH
74298: LD_INT 0
74300: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74301: LD_VAR 0 1
74305: PUSH
74306: LD_INT 0
74308: LESS
74309: IFTRUE 74321
74311: PUSH
74312: LD_VAR 0 1
74316: PUSH
74317: LD_INT 8
74319: GREATER
74320: OR
74321: IFTRUE 74333
74323: PUSH
74324: LD_VAR 0 2
74328: PUSH
74329: LD_INT 0
74331: LESS
74332: OR
74333: IFTRUE 74345
74335: PUSH
74336: LD_VAR 0 2
74340: PUSH
74341: LD_INT 8
74343: GREATER
74344: OR
74345: IFFALSE 74349
// exit ;
74347: GO 74424
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74349: LD_ADDR_VAR 0 4
74353: PUSH
74354: LD_INT 22
74356: PUSH
74357: LD_VAR 0 2
74361: PUSH
74362: EMPTY
74363: LIST
74364: LIST
74365: PPUSH
74366: CALL_OW 69
74370: PUSH
74371: FOR_IN
74372: IFFALSE 74422
// begin un := UnitShoot ( i ) ;
74374: LD_ADDR_VAR 0 5
74378: PUSH
74379: LD_VAR 0 4
74383: PPUSH
74384: CALL_OW 504
74388: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74389: LD_VAR 0 5
74393: PPUSH
74394: CALL_OW 255
74398: PUSH
74399: LD_VAR 0 1
74403: EQUAL
74404: IFFALSE 74420
// begin result := un ;
74406: LD_ADDR_VAR 0 3
74410: PUSH
74411: LD_VAR 0 5
74415: ST_TO_ADDR
// exit ;
74416: POP
74417: POP
74418: GO 74424
// end ; end ;
74420: GO 74371
74422: POP
74423: POP
// end ;
74424: LD_VAR 0 3
74428: RET
// export function GetCargoBay ( units ) ; begin
74429: LD_INT 0
74431: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74432: LD_ADDR_VAR 0 2
74436: PUSH
74437: LD_VAR 0 1
74441: PPUSH
74442: LD_INT 2
74444: PUSH
74445: LD_INT 34
74447: PUSH
74448: LD_INT 12
74450: PUSH
74451: EMPTY
74452: LIST
74453: LIST
74454: PUSH
74455: LD_INT 34
74457: PUSH
74458: LD_INT 51
74460: PUSH
74461: EMPTY
74462: LIST
74463: LIST
74464: PUSH
74465: LD_INT 34
74467: PUSH
74468: LD_INT 32
74470: PUSH
74471: EMPTY
74472: LIST
74473: LIST
74474: PUSH
74475: LD_INT 34
74477: PUSH
74478: LD_INT 89
74480: PUSH
74481: EMPTY
74482: LIST
74483: LIST
74484: PUSH
74485: EMPTY
74486: LIST
74487: LIST
74488: LIST
74489: LIST
74490: LIST
74491: PPUSH
74492: CALL_OW 72
74496: ST_TO_ADDR
// end ;
74497: LD_VAR 0 2
74501: RET
// export function Negate ( value ) ; begin
74502: LD_INT 0
74504: PPUSH
// result := not value ;
74505: LD_ADDR_VAR 0 2
74509: PUSH
74510: LD_VAR 0 1
74514: NOT
74515: ST_TO_ADDR
// end ;
74516: LD_VAR 0 2
74520: RET
// export function Inc ( value ) ; begin
74521: LD_INT 0
74523: PPUSH
// result := value + 1 ;
74524: LD_ADDR_VAR 0 2
74528: PUSH
74529: LD_VAR 0 1
74533: PUSH
74534: LD_INT 1
74536: PLUS
74537: ST_TO_ADDR
// end ;
74538: LD_VAR 0 2
74542: RET
// export function Dec ( value ) ; begin
74543: LD_INT 0
74545: PPUSH
// result := value - 1 ;
74546: LD_ADDR_VAR 0 2
74550: PUSH
74551: LD_VAR 0 1
74555: PUSH
74556: LD_INT 1
74558: MINUS
74559: ST_TO_ADDR
// end ;
74560: LD_VAR 0 2
74564: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
74565: LD_INT 0
74567: PPUSH
74568: PPUSH
74569: PPUSH
74570: PPUSH
74571: PPUSH
74572: PPUSH
74573: PPUSH
74574: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
74575: LD_VAR 0 1
74579: PPUSH
74580: LD_VAR 0 2
74584: PPUSH
74585: CALL_OW 488
74589: NOT
74590: IFTRUE 74609
74592: PUSH
74593: LD_VAR 0 3
74597: PPUSH
74598: LD_VAR 0 4
74602: PPUSH
74603: CALL_OW 488
74607: NOT
74608: OR
74609: IFFALSE 74622
// begin result := - 1 ;
74611: LD_ADDR_VAR 0 5
74615: PUSH
74616: LD_INT 1
74618: NEG
74619: ST_TO_ADDR
// exit ;
74620: GO 74857
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
74622: LD_ADDR_VAR 0 12
74626: PUSH
74627: LD_VAR 0 1
74631: PPUSH
74632: LD_VAR 0 2
74636: PPUSH
74637: LD_VAR 0 3
74641: PPUSH
74642: LD_VAR 0 4
74646: PPUSH
74647: CALL 73693 0 4
74651: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
74652: LD_ADDR_VAR 0 11
74656: PUSH
74657: LD_VAR 0 1
74661: PPUSH
74662: LD_VAR 0 2
74666: PPUSH
74667: LD_VAR 0 12
74671: PUSH
74672: LD_INT 1
74674: ARRAY
74675: PPUSH
74676: LD_VAR 0 12
74680: PUSH
74681: LD_INT 2
74683: ARRAY
74684: PPUSH
74685: CALL_OW 298
74689: ST_TO_ADDR
// distance := 9999 ;
74690: LD_ADDR_VAR 0 10
74694: PUSH
74695: LD_INT 9999
74697: ST_TO_ADDR
// for i := 0 to 5 do
74698: LD_ADDR_VAR 0 6
74702: PUSH
74703: DOUBLE
74704: LD_INT 0
74706: DEC
74707: ST_TO_ADDR
74708: LD_INT 5
74710: PUSH
74711: FOR_TO
74712: IFFALSE 74855
// begin _x := ShiftX ( x1 , i , centerDist ) ;
74714: LD_ADDR_VAR 0 7
74718: PUSH
74719: LD_VAR 0 1
74723: PPUSH
74724: LD_VAR 0 6
74728: PPUSH
74729: LD_VAR 0 11
74733: PPUSH
74734: CALL_OW 272
74738: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
74739: LD_ADDR_VAR 0 8
74743: PUSH
74744: LD_VAR 0 2
74748: PPUSH
74749: LD_VAR 0 6
74753: PPUSH
74754: LD_VAR 0 11
74758: PPUSH
74759: CALL_OW 273
74763: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74764: LD_VAR 0 7
74768: PPUSH
74769: LD_VAR 0 8
74773: PPUSH
74774: CALL_OW 488
74778: NOT
74779: IFFALSE 74783
// continue ;
74781: GO 74711
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
74783: LD_ADDR_VAR 0 9
74787: PUSH
74788: LD_VAR 0 12
74792: PUSH
74793: LD_INT 1
74795: ARRAY
74796: PPUSH
74797: LD_VAR 0 12
74801: PUSH
74802: LD_INT 2
74804: ARRAY
74805: PPUSH
74806: LD_VAR 0 7
74810: PPUSH
74811: LD_VAR 0 8
74815: PPUSH
74816: CALL_OW 298
74820: ST_TO_ADDR
// if tmp < distance then
74821: LD_VAR 0 9
74825: PUSH
74826: LD_VAR 0 10
74830: LESS
74831: IFFALSE 74853
// begin result := i ;
74833: LD_ADDR_VAR 0 5
74837: PUSH
74838: LD_VAR 0 6
74842: ST_TO_ADDR
// distance := tmp ;
74843: LD_ADDR_VAR 0 10
74847: PUSH
74848: LD_VAR 0 9
74852: ST_TO_ADDR
// end ; end ;
74853: GO 74711
74855: POP
74856: POP
// end ;
74857: LD_VAR 0 5
74861: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74862: LD_INT 0
74864: PPUSH
74865: PPUSH
// if not driver or not IsInUnit ( driver ) then
74866: LD_VAR 0 1
74870: NOT
74871: IFTRUE 74885
74873: PUSH
74874: LD_VAR 0 1
74878: PPUSH
74879: CALL_OW 310
74883: NOT
74884: OR
74885: IFFALSE 74889
// exit ;
74887: GO 74979
// vehicle := IsInUnit ( driver ) ;
74889: LD_ADDR_VAR 0 3
74893: PUSH
74894: LD_VAR 0 1
74898: PPUSH
74899: CALL_OW 310
74903: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74904: LD_VAR 0 1
74908: PPUSH
74909: LD_STRING \
74911: PUSH
74912: LD_INT 0
74914: PUSH
74915: LD_INT 0
74917: PUSH
74918: LD_INT 0
74920: PUSH
74921: LD_INT 0
74923: PUSH
74924: LD_INT 0
74926: PUSH
74927: LD_INT 0
74929: PUSH
74930: EMPTY
74931: LIST
74932: LIST
74933: LIST
74934: LIST
74935: LIST
74936: LIST
74937: LIST
74938: PUSH
74939: LD_STRING E
74941: PUSH
74942: LD_INT 0
74944: PUSH
74945: LD_INT 0
74947: PUSH
74948: LD_VAR 0 3
74952: PUSH
74953: LD_INT 0
74955: PUSH
74956: LD_INT 0
74958: PUSH
74959: LD_INT 0
74961: PUSH
74962: EMPTY
74963: LIST
74964: LIST
74965: LIST
74966: LIST
74967: LIST
74968: LIST
74969: LIST
74970: PUSH
74971: EMPTY
74972: LIST
74973: LIST
74974: PPUSH
74975: CALL_OW 446
// end ;
74979: LD_VAR 0 2
74983: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74984: LD_INT 0
74986: PPUSH
74987: PPUSH
// if not driver or not IsInUnit ( driver ) then
74988: LD_VAR 0 1
74992: NOT
74993: IFTRUE 75007
74995: PUSH
74996: LD_VAR 0 1
75000: PPUSH
75001: CALL_OW 310
75005: NOT
75006: OR
75007: IFFALSE 75011
// exit ;
75009: GO 75101
// vehicle := IsInUnit ( driver ) ;
75011: LD_ADDR_VAR 0 3
75015: PUSH
75016: LD_VAR 0 1
75020: PPUSH
75021: CALL_OW 310
75025: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75026: LD_VAR 0 1
75030: PPUSH
75031: LD_STRING \
75033: PUSH
75034: LD_INT 0
75036: PUSH
75037: LD_INT 0
75039: PUSH
75040: LD_INT 0
75042: PUSH
75043: LD_INT 0
75045: PUSH
75046: LD_INT 0
75048: PUSH
75049: LD_INT 0
75051: PUSH
75052: EMPTY
75053: LIST
75054: LIST
75055: LIST
75056: LIST
75057: LIST
75058: LIST
75059: LIST
75060: PUSH
75061: LD_STRING E
75063: PUSH
75064: LD_INT 0
75066: PUSH
75067: LD_INT 0
75069: PUSH
75070: LD_VAR 0 3
75074: PUSH
75075: LD_INT 0
75077: PUSH
75078: LD_INT 0
75080: PUSH
75081: LD_INT 0
75083: PUSH
75084: EMPTY
75085: LIST
75086: LIST
75087: LIST
75088: LIST
75089: LIST
75090: LIST
75091: LIST
75092: PUSH
75093: EMPTY
75094: LIST
75095: LIST
75096: PPUSH
75097: CALL_OW 447
// end ;
75101: LD_VAR 0 2
75105: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75106: LD_INT 0
75108: PPUSH
75109: PPUSH
75110: PPUSH
// tmp := [ ] ;
75111: LD_ADDR_VAR 0 5
75115: PUSH
75116: EMPTY
75117: ST_TO_ADDR
// for i in units do
75118: LD_ADDR_VAR 0 4
75122: PUSH
75123: LD_VAR 0 1
75127: PUSH
75128: FOR_IN
75129: IFFALSE 75167
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75131: LD_ADDR_VAR 0 5
75135: PUSH
75136: LD_VAR 0 5
75140: PPUSH
75141: LD_VAR 0 5
75145: PUSH
75146: LD_INT 1
75148: PLUS
75149: PPUSH
75150: LD_VAR 0 4
75154: PPUSH
75155: CALL_OW 256
75159: PPUSH
75160: CALL_OW 2
75164: ST_TO_ADDR
75165: GO 75128
75167: POP
75168: POP
// if not tmp then
75169: LD_VAR 0 5
75173: NOT
75174: IFFALSE 75178
// exit ;
75176: GO 75226
// if asc then
75178: LD_VAR 0 2
75182: IFFALSE 75206
// result := SortListByListAsc ( units , tmp ) else
75184: LD_ADDR_VAR 0 3
75188: PUSH
75189: LD_VAR 0 1
75193: PPUSH
75194: LD_VAR 0 5
75198: PPUSH
75199: CALL_OW 76
75203: ST_TO_ADDR
75204: GO 75226
// result := SortListByListDesc ( units , tmp ) ;
75206: LD_ADDR_VAR 0 3
75210: PUSH
75211: LD_VAR 0 1
75215: PPUSH
75216: LD_VAR 0 5
75220: PPUSH
75221: CALL_OW 77
75225: ST_TO_ADDR
// end ;
75226: LD_VAR 0 3
75230: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75231: LD_INT 0
75233: PPUSH
75234: PPUSH
// task := GetTaskList ( mech ) ;
75235: LD_ADDR_VAR 0 4
75239: PUSH
75240: LD_VAR 0 1
75244: PPUSH
75245: CALL_OW 437
75249: ST_TO_ADDR
// if not task then
75250: LD_VAR 0 4
75254: NOT
75255: IFFALSE 75259
// exit ;
75257: GO 75303
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75259: LD_ADDR_VAR 0 3
75263: PUSH
75264: LD_VAR 0 4
75268: PUSH
75269: LD_INT 1
75271: ARRAY
75272: PUSH
75273: LD_INT 1
75275: ARRAY
75276: PUSH
75277: LD_STRING r
75279: EQUAL
75280: IFFALSE 75302
75282: PUSH
75283: LD_VAR 0 4
75287: PUSH
75288: LD_INT 1
75290: ARRAY
75291: PUSH
75292: LD_INT 4
75294: ARRAY
75295: PUSH
75296: LD_VAR 0 2
75300: EQUAL
75301: AND
75302: ST_TO_ADDR
// end ;
75303: LD_VAR 0 3
75307: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75308: LD_INT 0
75310: PPUSH
// SetDir ( unit , d ) ;
75311: LD_VAR 0 1
75315: PPUSH
75316: LD_VAR 0 4
75320: PPUSH
75321: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
75325: LD_ADDR_VAR 0 6
75329: PUSH
75330: LD_VAR 0 1
75334: PPUSH
75335: LD_VAR 0 2
75339: PPUSH
75340: LD_VAR 0 3
75344: PPUSH
75345: LD_VAR 0 5
75349: PPUSH
75350: CALL_OW 48
75354: ST_TO_ADDR
// end ;
75355: LD_VAR 0 6
75359: RET
// export function ToNaturalNumber ( number ) ; begin
75360: LD_INT 0
75362: PPUSH
// result := number div 1 ;
75363: LD_ADDR_VAR 0 2
75367: PUSH
75368: LD_VAR 0 1
75372: PUSH
75373: LD_INT 1
75375: DIV
75376: ST_TO_ADDR
// if number < 0 then
75377: LD_VAR 0 1
75381: PUSH
75382: LD_INT 0
75384: LESS
75385: IFFALSE 75395
// result := 0 ;
75387: LD_ADDR_VAR 0 2
75391: PUSH
75392: LD_INT 0
75394: ST_TO_ADDR
// end ;
75395: LD_VAR 0 2
75399: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
75400: LD_INT 0
75402: PPUSH
75403: PPUSH
75404: PPUSH
// if not buildings then
75405: LD_VAR 0 1
75409: NOT
75410: IFFALSE 75414
// exit ;
75412: GO 75529
// tmp := [ ] ;
75414: LD_ADDR_VAR 0 5
75418: PUSH
75419: EMPTY
75420: ST_TO_ADDR
// for b in buildings do
75421: LD_ADDR_VAR 0 4
75425: PUSH
75426: LD_VAR 0 1
75430: PUSH
75431: FOR_IN
75432: IFFALSE 75470
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
75434: LD_ADDR_VAR 0 5
75438: PUSH
75439: LD_VAR 0 5
75443: PPUSH
75444: LD_VAR 0 5
75448: PUSH
75449: LD_INT 1
75451: PLUS
75452: PPUSH
75453: LD_VAR 0 4
75457: PPUSH
75458: CALL_OW 266
75462: PPUSH
75463: CALL_OW 1
75467: ST_TO_ADDR
75468: GO 75431
75470: POP
75471: POP
// if not tmp then
75472: LD_VAR 0 5
75476: NOT
75477: IFFALSE 75481
// exit ;
75479: GO 75529
// if asc then
75481: LD_VAR 0 2
75485: IFFALSE 75509
// result := SortListByListAsc ( buildings , tmp ) else
75487: LD_ADDR_VAR 0 3
75491: PUSH
75492: LD_VAR 0 1
75496: PPUSH
75497: LD_VAR 0 5
75501: PPUSH
75502: CALL_OW 76
75506: ST_TO_ADDR
75507: GO 75529
// result := SortListByListDesc ( buildings , tmp ) ;
75509: LD_ADDR_VAR 0 3
75513: PUSH
75514: LD_VAR 0 1
75518: PPUSH
75519: LD_VAR 0 5
75523: PPUSH
75524: CALL_OW 77
75528: ST_TO_ADDR
// end ;
75529: LD_VAR 0 3
75533: RET
// export function SortByClass ( units , class ) ; var un ; begin
75534: LD_INT 0
75536: PPUSH
75537: PPUSH
// if not units or not class then
75538: LD_VAR 0 1
75542: NOT
75543: IFTRUE 75552
75545: PUSH
75546: LD_VAR 0 2
75550: NOT
75551: OR
75552: IFFALSE 75556
// exit ;
75554: GO 75651
// result := [ ] ;
75556: LD_ADDR_VAR 0 3
75560: PUSH
75561: EMPTY
75562: ST_TO_ADDR
// for un in units do
75563: LD_ADDR_VAR 0 4
75567: PUSH
75568: LD_VAR 0 1
75572: PUSH
75573: FOR_IN
75574: IFFALSE 75649
// if GetClass ( un ) = class then
75576: LD_VAR 0 4
75580: PPUSH
75581: CALL_OW 257
75585: PUSH
75586: LD_VAR 0 2
75590: EQUAL
75591: IFFALSE 75618
// result := Insert ( result , 1 , un ) else
75593: LD_ADDR_VAR 0 3
75597: PUSH
75598: LD_VAR 0 3
75602: PPUSH
75603: LD_INT 1
75605: PPUSH
75606: LD_VAR 0 4
75610: PPUSH
75611: CALL_OW 2
75615: ST_TO_ADDR
75616: GO 75647
// result := Replace ( result , result + 1 , un ) ;
75618: LD_ADDR_VAR 0 3
75622: PUSH
75623: LD_VAR 0 3
75627: PPUSH
75628: LD_VAR 0 3
75632: PUSH
75633: LD_INT 1
75635: PLUS
75636: PPUSH
75637: LD_VAR 0 4
75641: PPUSH
75642: CALL_OW 1
75646: ST_TO_ADDR
75647: GO 75573
75649: POP
75650: POP
// end ;
75651: LD_VAR 0 3
75655: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75656: LD_INT 0
75658: PPUSH
75659: PPUSH
75660: PPUSH
75661: PPUSH
75662: PPUSH
75663: PPUSH
75664: PPUSH
// result := [ ] ;
75665: LD_ADDR_VAR 0 4
75669: PUSH
75670: EMPTY
75671: ST_TO_ADDR
// if x - r < 0 then
75672: LD_VAR 0 1
75676: PUSH
75677: LD_VAR 0 3
75681: MINUS
75682: PUSH
75683: LD_INT 0
75685: LESS
75686: IFFALSE 75698
// min_x := 0 else
75688: LD_ADDR_VAR 0 8
75692: PUSH
75693: LD_INT 0
75695: ST_TO_ADDR
75696: GO 75714
// min_x := x - r ;
75698: LD_ADDR_VAR 0 8
75702: PUSH
75703: LD_VAR 0 1
75707: PUSH
75708: LD_VAR 0 3
75712: MINUS
75713: ST_TO_ADDR
// if y - r < 0 then
75714: LD_VAR 0 2
75718: PUSH
75719: LD_VAR 0 3
75723: MINUS
75724: PUSH
75725: LD_INT 0
75727: LESS
75728: IFFALSE 75740
// min_y := 0 else
75730: LD_ADDR_VAR 0 7
75734: PUSH
75735: LD_INT 0
75737: ST_TO_ADDR
75738: GO 75756
// min_y := y - r ;
75740: LD_ADDR_VAR 0 7
75744: PUSH
75745: LD_VAR 0 2
75749: PUSH
75750: LD_VAR 0 3
75754: MINUS
75755: ST_TO_ADDR
// max_x := x + r ;
75756: LD_ADDR_VAR 0 9
75760: PUSH
75761: LD_VAR 0 1
75765: PUSH
75766: LD_VAR 0 3
75770: PLUS
75771: ST_TO_ADDR
// max_y := y + r ;
75772: LD_ADDR_VAR 0 10
75776: PUSH
75777: LD_VAR 0 2
75781: PUSH
75782: LD_VAR 0 3
75786: PLUS
75787: ST_TO_ADDR
// for _x = min_x to max_x do
75788: LD_ADDR_VAR 0 5
75792: PUSH
75793: DOUBLE
75794: LD_VAR 0 8
75798: DEC
75799: ST_TO_ADDR
75800: LD_VAR 0 9
75804: PUSH
75805: FOR_TO
75806: IFFALSE 75907
// for _y = min_y to max_y do
75808: LD_ADDR_VAR 0 6
75812: PUSH
75813: DOUBLE
75814: LD_VAR 0 7
75818: DEC
75819: ST_TO_ADDR
75820: LD_VAR 0 10
75824: PUSH
75825: FOR_TO
75826: IFFALSE 75903
// begin if not ValidHex ( _x , _y ) then
75828: LD_VAR 0 5
75832: PPUSH
75833: LD_VAR 0 6
75837: PPUSH
75838: CALL_OW 488
75842: NOT
75843: IFFALSE 75847
// continue ;
75845: GO 75825
// if GetResourceTypeXY ( _x , _y ) then
75847: LD_VAR 0 5
75851: PPUSH
75852: LD_VAR 0 6
75856: PPUSH
75857: CALL_OW 283
75861: IFFALSE 75901
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75863: LD_ADDR_VAR 0 4
75867: PUSH
75868: LD_VAR 0 4
75872: PPUSH
75873: LD_VAR 0 4
75877: PUSH
75878: LD_INT 1
75880: PLUS
75881: PPUSH
75882: LD_VAR 0 5
75886: PUSH
75887: LD_VAR 0 6
75891: PUSH
75892: EMPTY
75893: LIST
75894: LIST
75895: PPUSH
75896: CALL_OW 1
75900: ST_TO_ADDR
// end ;
75901: GO 75825
75903: POP
75904: POP
75905: GO 75805
75907: POP
75908: POP
// end ;
75909: LD_VAR 0 4
75913: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
75914: LD_INT 0
75916: PPUSH
75917: PPUSH
75918: PPUSH
75919: PPUSH
75920: PPUSH
75921: PPUSH
75922: PPUSH
75923: PPUSH
// if not units then
75924: LD_VAR 0 1
75928: NOT
75929: IFFALSE 75933
// exit ;
75931: GO 76465
// result := UnitFilter ( units , [ f_ok ] ) ;
75933: LD_ADDR_VAR 0 3
75937: PUSH
75938: LD_VAR 0 1
75942: PPUSH
75943: LD_INT 50
75945: PUSH
75946: EMPTY
75947: LIST
75948: PPUSH
75949: CALL_OW 72
75953: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75954: LD_ADDR_VAR 0 8
75958: PUSH
75959: LD_VAR 0 1
75963: PUSH
75964: LD_INT 1
75966: ARRAY
75967: PPUSH
75968: CALL_OW 255
75972: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
75973: LD_ADDR_VAR 0 10
75977: PUSH
75978: LD_INT 29
75980: PUSH
75981: LD_INT 91
75983: PUSH
75984: LD_INT 49
75986: PUSH
75987: EMPTY
75988: LIST
75989: LIST
75990: LIST
75991: ST_TO_ADDR
// if not result then
75992: LD_VAR 0 3
75996: NOT
75997: IFFALSE 76001
// exit ;
75999: GO 76465
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76001: LD_ADDR_VAR 0 5
76005: PUSH
76006: LD_INT 81
76008: PUSH
76009: LD_VAR 0 8
76013: PUSH
76014: EMPTY
76015: LIST
76016: LIST
76017: PPUSH
76018: CALL_OW 69
76022: ST_TO_ADDR
// for i in result do
76023: LD_ADDR_VAR 0 4
76027: PUSH
76028: LD_VAR 0 3
76032: PUSH
76033: FOR_IN
76034: IFFALSE 76463
// begin tag := GetTag ( i ) + 1 ;
76036: LD_ADDR_VAR 0 9
76040: PUSH
76041: LD_VAR 0 4
76045: PPUSH
76046: CALL_OW 110
76050: PUSH
76051: LD_INT 1
76053: PLUS
76054: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
76055: LD_ADDR_VAR 0 7
76059: PUSH
76060: LD_VAR 0 4
76064: PPUSH
76065: CALL_OW 250
76069: PPUSH
76070: LD_VAR 0 4
76074: PPUSH
76075: CALL_OW 251
76079: PPUSH
76080: LD_INT 4
76082: PPUSH
76083: CALL 75656 0 3
76087: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
76088: LD_VAR 0 4
76092: PPUSH
76093: CALL_OW 247
76097: PUSH
76098: LD_INT 2
76100: EQUAL
76101: IFFALSE 76113
76103: PUSH
76104: LD_VAR 0 7
76108: PUSH
76109: LD_INT 2
76111: GREATER
76112: AND
76113: IFFALSE 76133
76115: PUSH
76116: LD_VAR 0 4
76120: PPUSH
76121: CALL_OW 264
76125: PUSH
76126: LD_VAR 0 10
76130: IN
76131: NOT
76132: AND
76133: IFFALSE 76172
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76135: LD_VAR 0 4
76139: PPUSH
76140: LD_VAR 0 7
76144: PUSH
76145: LD_INT 1
76147: ARRAY
76148: PUSH
76149: LD_INT 1
76151: ARRAY
76152: PPUSH
76153: LD_VAR 0 7
76157: PUSH
76158: LD_INT 1
76160: ARRAY
76161: PUSH
76162: LD_INT 2
76164: ARRAY
76165: PPUSH
76166: CALL_OW 116
76170: GO 76461
// if path > tag then
76172: LD_VAR 0 2
76176: PUSH
76177: LD_VAR 0 9
76181: GREATER
76182: IFFALSE 76390
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
76184: LD_ADDR_VAR 0 6
76188: PUSH
76189: LD_VAR 0 5
76193: PPUSH
76194: LD_INT 91
76196: PUSH
76197: LD_VAR 0 4
76201: PUSH
76202: LD_INT 8
76204: PUSH
76205: EMPTY
76206: LIST
76207: LIST
76208: LIST
76209: PPUSH
76210: CALL_OW 72
76214: ST_TO_ADDR
// if nearEnemy then
76215: LD_VAR 0 6
76219: IFFALSE 76288
// begin if GetWeapon ( i ) = ru_time_lapser then
76221: LD_VAR 0 4
76225: PPUSH
76226: CALL_OW 264
76230: PUSH
76231: LD_INT 49
76233: EQUAL
76234: IFFALSE 76262
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
76236: LD_VAR 0 4
76240: PPUSH
76241: LD_VAR 0 6
76245: PPUSH
76246: LD_VAR 0 4
76250: PPUSH
76251: CALL_OW 74
76255: PPUSH
76256: CALL_OW 112
76260: GO 76286
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
76262: LD_VAR 0 4
76266: PPUSH
76267: LD_VAR 0 6
76271: PPUSH
76272: LD_VAR 0 4
76276: PPUSH
76277: CALL_OW 74
76281: PPUSH
76282: CALL 77546 0 2
// end else
76286: GO 76388
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76288: LD_VAR 0 4
76292: PPUSH
76293: LD_VAR 0 2
76297: PUSH
76298: LD_VAR 0 9
76302: ARRAY
76303: PUSH
76304: LD_INT 1
76306: ARRAY
76307: PPUSH
76308: LD_VAR 0 2
76312: PUSH
76313: LD_VAR 0 9
76317: ARRAY
76318: PUSH
76319: LD_INT 2
76321: ARRAY
76322: PPUSH
76323: CALL_OW 297
76327: PUSH
76328: LD_INT 6
76330: GREATER
76331: IFFALSE 76374
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76333: LD_VAR 0 4
76337: PPUSH
76338: LD_VAR 0 2
76342: PUSH
76343: LD_VAR 0 9
76347: ARRAY
76348: PUSH
76349: LD_INT 1
76351: ARRAY
76352: PPUSH
76353: LD_VAR 0 2
76357: PUSH
76358: LD_VAR 0 9
76362: ARRAY
76363: PUSH
76364: LD_INT 2
76366: ARRAY
76367: PPUSH
76368: CALL_OW 114
76372: GO 76388
// SetTag ( i , tag ) ;
76374: LD_VAR 0 4
76378: PPUSH
76379: LD_VAR 0 9
76383: PPUSH
76384: CALL_OW 109
// end else
76388: GO 76461
// if enemy then
76390: LD_VAR 0 5
76394: IFFALSE 76461
// begin if GetWeapon ( i ) = ru_time_lapser then
76396: LD_VAR 0 4
76400: PPUSH
76401: CALL_OW 264
76405: PUSH
76406: LD_INT 49
76408: EQUAL
76409: IFFALSE 76437
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76411: LD_VAR 0 4
76415: PPUSH
76416: LD_VAR 0 5
76420: PPUSH
76421: LD_VAR 0 4
76425: PPUSH
76426: CALL_OW 74
76430: PPUSH
76431: CALL_OW 112
76435: GO 76461
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76437: LD_VAR 0 4
76441: PPUSH
76442: LD_VAR 0 5
76446: PPUSH
76447: LD_VAR 0 4
76451: PPUSH
76452: CALL_OW 74
76456: PPUSH
76457: CALL 77546 0 2
// end ; end ;
76461: GO 76033
76463: POP
76464: POP
// end ;
76465: LD_VAR 0 3
76469: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
76470: LD_INT 0
76472: PPUSH
76473: PPUSH
76474: PPUSH
// if not unit or IsInUnit ( unit ) then
76475: LD_VAR 0 1
76479: NOT
76480: IFTRUE 76493
76482: PUSH
76483: LD_VAR 0 1
76487: PPUSH
76488: CALL_OW 310
76492: OR
76493: IFFALSE 76497
// exit ;
76495: GO 76588
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
76497: LD_ADDR_VAR 0 4
76501: PUSH
76502: LD_VAR 0 1
76506: PPUSH
76507: CALL_OW 250
76511: PPUSH
76512: LD_VAR 0 2
76516: PPUSH
76517: LD_INT 1
76519: PPUSH
76520: CALL_OW 272
76524: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
76525: LD_ADDR_VAR 0 5
76529: PUSH
76530: LD_VAR 0 1
76534: PPUSH
76535: CALL_OW 251
76539: PPUSH
76540: LD_VAR 0 2
76544: PPUSH
76545: LD_INT 1
76547: PPUSH
76548: CALL_OW 273
76552: ST_TO_ADDR
// if ValidHex ( x , y ) then
76553: LD_VAR 0 4
76557: PPUSH
76558: LD_VAR 0 5
76562: PPUSH
76563: CALL_OW 488
76567: IFFALSE 76588
// ComTurnXY ( unit , x , y ) ;
76569: LD_VAR 0 1
76573: PPUSH
76574: LD_VAR 0 4
76578: PPUSH
76579: LD_VAR 0 5
76583: PPUSH
76584: CALL_OW 118
// end ;
76588: LD_VAR 0 3
76592: RET
// export function SeeUnits ( side , units ) ; var i ; begin
76593: LD_INT 0
76595: PPUSH
76596: PPUSH
// result := false ;
76597: LD_ADDR_VAR 0 3
76601: PUSH
76602: LD_INT 0
76604: ST_TO_ADDR
// if not units then
76605: LD_VAR 0 2
76609: NOT
76610: IFFALSE 76614
// exit ;
76612: GO 76659
// for i in units do
76614: LD_ADDR_VAR 0 4
76618: PUSH
76619: LD_VAR 0 2
76623: PUSH
76624: FOR_IN
76625: IFFALSE 76657
// if See ( side , i ) then
76627: LD_VAR 0 1
76631: PPUSH
76632: LD_VAR 0 4
76636: PPUSH
76637: CALL_OW 292
76641: IFFALSE 76655
// begin result := true ;
76643: LD_ADDR_VAR 0 3
76647: PUSH
76648: LD_INT 1
76650: ST_TO_ADDR
// exit ;
76651: POP
76652: POP
76653: GO 76659
// end ;
76655: GO 76624
76657: POP
76658: POP
// end ;
76659: LD_VAR 0 3
76663: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
76664: LD_INT 0
76666: PPUSH
76667: PPUSH
76668: PPUSH
76669: PPUSH
// if not unit or not points then
76670: LD_VAR 0 1
76674: NOT
76675: IFTRUE 76684
76677: PUSH
76678: LD_VAR 0 2
76682: NOT
76683: OR
76684: IFFALSE 76688
// exit ;
76686: GO 76778
// dist := 99999 ;
76688: LD_ADDR_VAR 0 5
76692: PUSH
76693: LD_INT 99999
76695: ST_TO_ADDR
// for i in points do
76696: LD_ADDR_VAR 0 4
76700: PUSH
76701: LD_VAR 0 2
76705: PUSH
76706: FOR_IN
76707: IFFALSE 76776
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
76709: LD_ADDR_VAR 0 6
76713: PUSH
76714: LD_VAR 0 1
76718: PPUSH
76719: LD_VAR 0 4
76723: PUSH
76724: LD_INT 1
76726: ARRAY
76727: PPUSH
76728: LD_VAR 0 4
76732: PUSH
76733: LD_INT 2
76735: ARRAY
76736: PPUSH
76737: CALL_OW 297
76741: ST_TO_ADDR
// if tmpDist < dist then
76742: LD_VAR 0 6
76746: PUSH
76747: LD_VAR 0 5
76751: LESS
76752: IFFALSE 76774
// begin result := i ;
76754: LD_ADDR_VAR 0 3
76758: PUSH
76759: LD_VAR 0 4
76763: ST_TO_ADDR
// dist := tmpDist ;
76764: LD_ADDR_VAR 0 5
76768: PUSH
76769: LD_VAR 0 6
76773: ST_TO_ADDR
// end ; end ;
76774: GO 76706
76776: POP
76777: POP
// end ;
76778: LD_VAR 0 3
76782: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
76783: LD_INT 0
76785: PPUSH
// uc_side := side ;
76786: LD_ADDR_OWVAR 20
76790: PUSH
76791: LD_VAR 0 1
76795: ST_TO_ADDR
// uc_nation := 3 ;
76796: LD_ADDR_OWVAR 21
76800: PUSH
76801: LD_INT 3
76803: ST_TO_ADDR
// vc_chassis := 25 ;
76804: LD_ADDR_OWVAR 37
76808: PUSH
76809: LD_INT 25
76811: ST_TO_ADDR
// vc_engine := engine_siberite ;
76812: LD_ADDR_OWVAR 39
76816: PUSH
76817: LD_INT 3
76819: ST_TO_ADDR
// vc_control := control_computer ;
76820: LD_ADDR_OWVAR 38
76824: PUSH
76825: LD_INT 3
76827: ST_TO_ADDR
// vc_weapon := 59 ;
76828: LD_ADDR_OWVAR 40
76832: PUSH
76833: LD_INT 59
76835: ST_TO_ADDR
// result := CreateVehicle ;
76836: LD_ADDR_VAR 0 5
76840: PUSH
76841: CALL_OW 45
76845: ST_TO_ADDR
// SetDir ( result , d ) ;
76846: LD_VAR 0 5
76850: PPUSH
76851: LD_VAR 0 4
76855: PPUSH
76856: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
76860: LD_VAR 0 5
76864: PPUSH
76865: LD_VAR 0 2
76869: PPUSH
76870: LD_VAR 0 3
76874: PPUSH
76875: LD_INT 0
76877: PPUSH
76878: CALL_OW 48
// end ;
76882: LD_VAR 0 5
76886: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
76887: LD_INT 0
76889: PPUSH
76890: PPUSH
76891: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
76892: LD_ADDR_VAR 0 2
76896: PUSH
76897: LD_INT 0
76899: PUSH
76900: LD_INT 0
76902: PUSH
76903: LD_INT 0
76905: PUSH
76906: LD_INT 0
76908: PUSH
76909: EMPTY
76910: LIST
76911: LIST
76912: LIST
76913: LIST
76914: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
76915: LD_VAR 0 1
76919: NOT
76920: IFTRUE 76953
76922: PUSH
76923: LD_VAR 0 1
76927: PPUSH
76928: CALL_OW 264
76932: PUSH
76933: LD_INT 12
76935: PUSH
76936: LD_INT 51
76938: PUSH
76939: LD_INT 32
76941: PUSH
76942: LD_INT 89
76944: PUSH
76945: EMPTY
76946: LIST
76947: LIST
76948: LIST
76949: LIST
76950: IN
76951: NOT
76952: OR
76953: IFFALSE 76957
// exit ;
76955: GO 77055
// for i := 1 to 3 do
76957: LD_ADDR_VAR 0 3
76961: PUSH
76962: DOUBLE
76963: LD_INT 1
76965: DEC
76966: ST_TO_ADDR
76967: LD_INT 3
76969: PUSH
76970: FOR_TO
76971: IFFALSE 77053
// begin tmp := GetCargo ( cargo , i ) ;
76973: LD_ADDR_VAR 0 4
76977: PUSH
76978: LD_VAR 0 1
76982: PPUSH
76983: LD_VAR 0 3
76987: PPUSH
76988: CALL_OW 289
76992: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
76993: LD_ADDR_VAR 0 2
76997: PUSH
76998: LD_VAR 0 2
77002: PPUSH
77003: LD_VAR 0 3
77007: PPUSH
77008: LD_VAR 0 4
77012: PPUSH
77013: CALL_OW 1
77017: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
77018: LD_ADDR_VAR 0 2
77022: PUSH
77023: LD_VAR 0 2
77027: PPUSH
77028: LD_INT 4
77030: PPUSH
77031: LD_VAR 0 2
77035: PUSH
77036: LD_INT 4
77038: ARRAY
77039: PUSH
77040: LD_VAR 0 4
77044: PLUS
77045: PPUSH
77046: CALL_OW 1
77050: ST_TO_ADDR
// end ;
77051: GO 76970
77053: POP
77054: POP
// end ;
77055: LD_VAR 0 2
77059: RET
// export function Length ( array ) ; begin
77060: LD_INT 0
77062: PPUSH
// result := array + 0 ;
77063: LD_ADDR_VAR 0 2
77067: PUSH
77068: LD_VAR 0 1
77072: PUSH
77073: LD_INT 0
77075: PLUS
77076: ST_TO_ADDR
// end ;
77077: LD_VAR 0 2
77081: RET
// export function PrepareArray ( array ) ; begin
77082: LD_INT 0
77084: PPUSH
// result := array diff 0 ;
77085: LD_ADDR_VAR 0 2
77089: PUSH
77090: LD_VAR 0 1
77094: PUSH
77095: LD_INT 0
77097: DIFF
77098: ST_TO_ADDR
// if not result [ 1 ] then
77099: LD_VAR 0 2
77103: PUSH
77104: LD_INT 1
77106: ARRAY
77107: NOT
77108: IFFALSE 77128
// result := Delete ( result , 1 ) ;
77110: LD_ADDR_VAR 0 2
77114: PUSH
77115: LD_VAR 0 2
77119: PPUSH
77120: LD_INT 1
77122: PPUSH
77123: CALL_OW 3
77127: ST_TO_ADDR
// end ;
77128: LD_VAR 0 2
77132: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
77133: LD_INT 0
77135: PPUSH
77136: PPUSH
77137: PPUSH
77138: PPUSH
// sibRocketRange := 25 ;
77139: LD_ADDR_VAR 0 6
77143: PUSH
77144: LD_INT 25
77146: ST_TO_ADDR
// result := false ;
77147: LD_ADDR_VAR 0 4
77151: PUSH
77152: LD_INT 0
77154: ST_TO_ADDR
// for i := 0 to 5 do
77155: LD_ADDR_VAR 0 5
77159: PUSH
77160: DOUBLE
77161: LD_INT 0
77163: DEC
77164: ST_TO_ADDR
77165: LD_INT 5
77167: PUSH
77168: FOR_TO
77169: IFFALSE 77236
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
77171: LD_VAR 0 1
77175: PPUSH
77176: LD_VAR 0 5
77180: PPUSH
77181: LD_VAR 0 6
77185: PPUSH
77186: CALL_OW 272
77190: PPUSH
77191: LD_VAR 0 2
77195: PPUSH
77196: LD_VAR 0 5
77200: PPUSH
77201: LD_VAR 0 6
77205: PPUSH
77206: CALL_OW 273
77210: PPUSH
77211: LD_VAR 0 3
77215: PPUSH
77216: CALL_OW 309
77220: IFFALSE 77234
// begin result := true ;
77222: LD_ADDR_VAR 0 4
77226: PUSH
77227: LD_INT 1
77229: ST_TO_ADDR
// exit ;
77230: POP
77231: POP
77232: GO 77238
// end ;
77234: GO 77168
77236: POP
77237: POP
// end ;
77238: LD_VAR 0 4
77242: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
77243: LD_INT 0
77245: PPUSH
77246: PPUSH
77247: PPUSH
// if btype = b_depot then
77248: LD_VAR 0 2
77252: PUSH
77253: LD_INT 0
77255: EQUAL
77256: IFFALSE 77268
// begin result := true ;
77258: LD_ADDR_VAR 0 3
77262: PUSH
77263: LD_INT 1
77265: ST_TO_ADDR
// exit ;
77266: GO 77388
// end ; pom := GetBase ( depot ) ;
77268: LD_ADDR_VAR 0 4
77272: PUSH
77273: LD_VAR 0 1
77277: PPUSH
77278: CALL_OW 274
77282: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
77283: LD_ADDR_VAR 0 5
77287: PUSH
77288: LD_VAR 0 2
77292: PPUSH
77293: LD_VAR 0 1
77297: PPUSH
77298: CALL_OW 248
77302: PPUSH
77303: CALL_OW 450
77307: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
77308: LD_ADDR_VAR 0 3
77312: PUSH
77313: LD_VAR 0 4
77317: PPUSH
77318: LD_INT 1
77320: PPUSH
77321: CALL_OW 275
77325: PUSH
77326: LD_VAR 0 5
77330: PUSH
77331: LD_INT 1
77333: ARRAY
77334: GREATEREQUAL
77335: IFFALSE 77361
77337: PUSH
77338: LD_VAR 0 4
77342: PPUSH
77343: LD_INT 2
77345: PPUSH
77346: CALL_OW 275
77350: PUSH
77351: LD_VAR 0 5
77355: PUSH
77356: LD_INT 2
77358: ARRAY
77359: GREATEREQUAL
77360: AND
77361: IFFALSE 77387
77363: PUSH
77364: LD_VAR 0 4
77368: PPUSH
77369: LD_INT 3
77371: PPUSH
77372: CALL_OW 275
77376: PUSH
77377: LD_VAR 0 5
77381: PUSH
77382: LD_INT 3
77384: ARRAY
77385: GREATEREQUAL
77386: AND
77387: ST_TO_ADDR
// end ;
77388: LD_VAR 0 3
77392: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
77393: LD_INT 0
77395: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
77396: LD_VAR 0 1
77400: PPUSH
77401: LD_VAR 0 2
77405: PPUSH
77406: LD_INT 0
77408: PPUSH
77409: LD_INT 0
77411: PPUSH
77412: LD_INT 1
77414: PPUSH
77415: LD_INT 0
77417: PPUSH
77418: CALL_OW 587
// end ;
77422: LD_VAR 0 3
77426: RET
// export function CenterOnNow ( unit ) ; begin
77427: LD_INT 0
77429: PPUSH
// result := IsInUnit ( unit ) ;
77430: LD_ADDR_VAR 0 2
77434: PUSH
77435: LD_VAR 0 1
77439: PPUSH
77440: CALL_OW 310
77444: ST_TO_ADDR
// if not result then
77445: LD_VAR 0 2
77449: NOT
77450: IFFALSE 77462
// result := unit ;
77452: LD_ADDR_VAR 0 2
77456: PUSH
77457: LD_VAR 0 1
77461: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
77462: LD_VAR 0 1
77466: PPUSH
77467: CALL_OW 87
// end ;
77471: LD_VAR 0 2
77475: RET
// export function ComMoveHex ( unit , hex ) ; begin
77476: LD_INT 0
77478: PPUSH
// if not hex then
77479: LD_VAR 0 2
77483: NOT
77484: IFFALSE 77488
// exit ;
77486: GO 77541
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
77488: LD_VAR 0 2
77492: PUSH
77493: LD_INT 1
77495: ARRAY
77496: PPUSH
77497: LD_VAR 0 2
77501: PUSH
77502: LD_INT 2
77504: ARRAY
77505: PPUSH
77506: CALL_OW 428
77510: IFFALSE 77514
// exit ;
77512: GO 77541
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
77514: LD_VAR 0 1
77518: PPUSH
77519: LD_VAR 0 2
77523: PUSH
77524: LD_INT 1
77526: ARRAY
77527: PPUSH
77528: LD_VAR 0 2
77532: PUSH
77533: LD_INT 2
77535: ARRAY
77536: PPUSH
77537: CALL_OW 111
// end ;
77541: LD_VAR 0 3
77545: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
77546: LD_INT 0
77548: PPUSH
77549: PPUSH
77550: PPUSH
// if not unit or not enemy then
77551: LD_VAR 0 1
77555: NOT
77556: IFTRUE 77565
77558: PUSH
77559: LD_VAR 0 2
77563: NOT
77564: OR
77565: IFFALSE 77569
// exit ;
77567: GO 77695
// x := GetX ( enemy ) ;
77569: LD_ADDR_VAR 0 4
77573: PUSH
77574: LD_VAR 0 2
77578: PPUSH
77579: CALL_OW 250
77583: ST_TO_ADDR
// y := GetY ( enemy ) ;
77584: LD_ADDR_VAR 0 5
77588: PUSH
77589: LD_VAR 0 2
77593: PPUSH
77594: CALL_OW 251
77598: ST_TO_ADDR
// if ValidHex ( x , y ) then
77599: LD_VAR 0 4
77603: PPUSH
77604: LD_VAR 0 5
77608: PPUSH
77609: CALL_OW 488
77613: IFFALSE 77695
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
77615: LD_VAR 0 2
77619: PPUSH
77620: CALL_OW 247
77624: PUSH
77625: LD_INT 3
77627: PUSH
77628: LD_INT 2
77630: PUSH
77631: EMPTY
77632: LIST
77633: LIST
77634: IN
77635: IFTRUE 77658
77637: PUSH
77638: LD_VAR 0 1
77642: PPUSH
77643: CALL_OW 255
77647: PPUSH
77648: LD_VAR 0 2
77652: PPUSH
77653: CALL_OW 292
77657: OR
77658: IFFALSE 77676
// ComAttackUnit ( unit , enemy ) else
77660: LD_VAR 0 1
77664: PPUSH
77665: LD_VAR 0 2
77669: PPUSH
77670: CALL_OW 115
77674: GO 77695
// ComAgressiveMove ( unit , x , y ) ;
77676: LD_VAR 0 1
77680: PPUSH
77681: LD_VAR 0 4
77685: PPUSH
77686: LD_VAR 0 5
77690: PPUSH
77691: CALL_OW 114
// end ;
77695: LD_VAR 0 3
77699: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
77700: LD_INT 0
77702: PPUSH
77703: PPUSH
77704: PPUSH
// list := AreaToList ( area , 0 ) ;
77705: LD_ADDR_VAR 0 5
77709: PUSH
77710: LD_VAR 0 1
77714: PPUSH
77715: LD_INT 0
77717: PPUSH
77718: CALL_OW 517
77722: ST_TO_ADDR
// if not list then
77723: LD_VAR 0 5
77727: NOT
77728: IFFALSE 77732
// exit ;
77730: GO 77862
// if all then
77732: LD_VAR 0 2
77736: IFFALSE 77824
// begin for i := 1 to list [ 1 ] do
77738: LD_ADDR_VAR 0 4
77742: PUSH
77743: DOUBLE
77744: LD_INT 1
77746: DEC
77747: ST_TO_ADDR
77748: LD_VAR 0 5
77752: PUSH
77753: LD_INT 1
77755: ARRAY
77756: PUSH
77757: FOR_TO
77758: IFFALSE 77820
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
77760: LD_ADDR_VAR 0 3
77764: PUSH
77765: LD_VAR 0 3
77769: PPUSH
77770: LD_VAR 0 3
77774: PUSH
77775: LD_INT 1
77777: PLUS
77778: PPUSH
77779: LD_VAR 0 5
77783: PUSH
77784: LD_INT 1
77786: ARRAY
77787: PUSH
77788: LD_VAR 0 4
77792: ARRAY
77793: PUSH
77794: LD_VAR 0 5
77798: PUSH
77799: LD_INT 2
77801: ARRAY
77802: PUSH
77803: LD_VAR 0 4
77807: ARRAY
77808: PUSH
77809: EMPTY
77810: LIST
77811: LIST
77812: PPUSH
77813: CALL_OW 1
77817: ST_TO_ADDR
77818: GO 77757
77820: POP
77821: POP
// exit ;
77822: GO 77862
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
77824: LD_ADDR_VAR 0 3
77828: PUSH
77829: LD_VAR 0 5
77833: PUSH
77834: LD_INT 1
77836: ARRAY
77837: PUSH
77838: LD_INT 1
77840: ARRAY
77841: PUSH
77842: LD_VAR 0 5
77846: PUSH
77847: LD_INT 2
77849: ARRAY
77850: PUSH
77851: LD_INT 1
77853: ARRAY
77854: PUSH
77855: EMPTY
77856: LIST
77857: LIST
77858: PUSH
77859: EMPTY
77860: LIST
77861: ST_TO_ADDR
// end ;
77862: LD_VAR 0 3
77866: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
77867: LD_INT 0
77869: PPUSH
77870: PPUSH
// list := AreaToList ( area , 0 ) ;
77871: LD_ADDR_VAR 0 4
77875: PUSH
77876: LD_VAR 0 1
77880: PPUSH
77881: LD_INT 0
77883: PPUSH
77884: CALL_OW 517
77888: ST_TO_ADDR
// if not list then
77889: LD_VAR 0 4
77893: NOT
77894: IFFALSE 77898
// exit ;
77896: GO 77939
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
77898: LD_ADDR_VAR 0 3
77902: PUSH
77903: LD_VAR 0 4
77907: PUSH
77908: LD_INT 1
77910: ARRAY
77911: PUSH
77912: LD_INT 1
77914: ARRAY
77915: PUSH
77916: LD_VAR 0 4
77920: PUSH
77921: LD_INT 2
77923: ARRAY
77924: PUSH
77925: LD_INT 1
77927: ARRAY
77928: PUSH
77929: LD_VAR 0 2
77933: PUSH
77934: EMPTY
77935: LIST
77936: LIST
77937: LIST
77938: ST_TO_ADDR
// end ;
77939: LD_VAR 0 3
77943: RET
// export function First ( array ) ; begin
77944: LD_INT 0
77946: PPUSH
// if not array then
77947: LD_VAR 0 1
77951: NOT
77952: IFFALSE 77956
// exit ;
77954: GO 77970
// result := array [ 1 ] ;
77956: LD_ADDR_VAR 0 2
77960: PUSH
77961: LD_VAR 0 1
77965: PUSH
77966: LD_INT 1
77968: ARRAY
77969: ST_TO_ADDR
// end ;
77970: LD_VAR 0 2
77974: RET
// export function Last ( array ) ; begin
77975: LD_INT 0
77977: PPUSH
// if not array then
77978: LD_VAR 0 1
77982: NOT
77983: IFFALSE 77987
// exit ;
77985: GO 78003
// result := array [ array ] ;
77987: LD_ADDR_VAR 0 2
77991: PUSH
77992: LD_VAR 0 1
77996: PUSH
77997: LD_VAR 0 1
78001: ARRAY
78002: ST_TO_ADDR
// end ;
78003: LD_VAR 0 2
78007: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
78008: LD_INT 0
78010: PPUSH
78011: PPUSH
// result := [ ] ;
78012: LD_ADDR_VAR 0 5
78016: PUSH
78017: EMPTY
78018: ST_TO_ADDR
// if not array then
78019: LD_VAR 0 1
78023: NOT
78024: IFFALSE 78028
// exit ;
78026: GO 78140
// for i := 1 to array do
78028: LD_ADDR_VAR 0 6
78032: PUSH
78033: DOUBLE
78034: LD_INT 1
78036: DEC
78037: ST_TO_ADDR
78038: LD_VAR 0 1
78042: PUSH
78043: FOR_TO
78044: IFFALSE 78138
// if array [ i ] [ index ] = value then
78046: LD_VAR 0 1
78050: PUSH
78051: LD_VAR 0 6
78055: ARRAY
78056: PUSH
78057: LD_VAR 0 2
78061: ARRAY
78062: PUSH
78063: LD_VAR 0 3
78067: EQUAL
78068: IFFALSE 78136
// begin if indexColumn then
78070: LD_VAR 0 4
78074: IFFALSE 78110
// result := Join ( result , array [ i ] [ indexColumn ] ) else
78076: LD_ADDR_VAR 0 5
78080: PUSH
78081: LD_VAR 0 5
78085: PPUSH
78086: LD_VAR 0 1
78090: PUSH
78091: LD_VAR 0 6
78095: ARRAY
78096: PUSH
78097: LD_VAR 0 4
78101: ARRAY
78102: PPUSH
78103: CALL 73148 0 2
78107: ST_TO_ADDR
78108: GO 78136
// result := Join ( result , array [ i ] ) ;
78110: LD_ADDR_VAR 0 5
78114: PUSH
78115: LD_VAR 0 5
78119: PPUSH
78120: LD_VAR 0 1
78124: PUSH
78125: LD_VAR 0 6
78129: ARRAY
78130: PPUSH
78131: CALL 73148 0 2
78135: ST_TO_ADDR
// end ;
78136: GO 78043
78138: POP
78139: POP
// end ;
78140: LD_VAR 0 5
78144: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
78145: LD_INT 0
78147: PPUSH
// if not vehicles or not parkingPoint then
78148: LD_VAR 0 1
78152: NOT
78153: IFTRUE 78162
78155: PUSH
78156: LD_VAR 0 2
78160: NOT
78161: OR
78162: IFFALSE 78166
// exit ;
78164: GO 78264
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
78166: LD_ADDR_VAR 0 1
78170: PUSH
78171: LD_VAR 0 1
78175: PPUSH
78176: LD_INT 50
78178: PUSH
78179: EMPTY
78180: LIST
78181: PUSH
78182: LD_INT 3
78184: PUSH
78185: LD_INT 92
78187: PUSH
78188: LD_VAR 0 2
78192: PUSH
78193: LD_INT 1
78195: ARRAY
78196: PUSH
78197: LD_VAR 0 2
78201: PUSH
78202: LD_INT 2
78204: ARRAY
78205: PUSH
78206: LD_INT 8
78208: PUSH
78209: EMPTY
78210: LIST
78211: LIST
78212: LIST
78213: LIST
78214: PUSH
78215: EMPTY
78216: LIST
78217: LIST
78218: PUSH
78219: EMPTY
78220: LIST
78221: LIST
78222: PPUSH
78223: CALL_OW 72
78227: ST_TO_ADDR
// if not vehicles then
78228: LD_VAR 0 1
78232: NOT
78233: IFFALSE 78237
// exit ;
78235: GO 78264
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
78237: LD_VAR 0 1
78241: PPUSH
78242: LD_VAR 0 2
78246: PUSH
78247: LD_INT 1
78249: ARRAY
78250: PPUSH
78251: LD_VAR 0 2
78255: PUSH
78256: LD_INT 2
78258: ARRAY
78259: PPUSH
78260: CALL_OW 111
// end ;
78264: LD_VAR 0 3
78268: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
78269: LD_INT 0
78271: PPUSH
78272: PPUSH
78273: PPUSH
// if not side or not area then
78274: LD_VAR 0 1
78278: NOT
78279: IFTRUE 78288
78281: PUSH
78282: LD_VAR 0 2
78286: NOT
78287: OR
78288: IFFALSE 78292
// exit ;
78290: GO 78411
// tmp := AreaToList ( area , 0 ) ;
78292: LD_ADDR_VAR 0 5
78296: PUSH
78297: LD_VAR 0 2
78301: PPUSH
78302: LD_INT 0
78304: PPUSH
78305: CALL_OW 517
78309: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
78310: LD_ADDR_VAR 0 4
78314: PUSH
78315: DOUBLE
78316: LD_INT 1
78318: DEC
78319: ST_TO_ADDR
78320: LD_VAR 0 5
78324: PUSH
78325: LD_INT 1
78327: ARRAY
78328: PUSH
78329: FOR_TO
78330: IFFALSE 78409
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
78332: LD_VAR 0 5
78336: PUSH
78337: LD_INT 1
78339: ARRAY
78340: PUSH
78341: LD_VAR 0 4
78345: ARRAY
78346: PPUSH
78347: LD_VAR 0 5
78351: PUSH
78352: LD_INT 2
78354: ARRAY
78355: PUSH
78356: LD_VAR 0 4
78360: ARRAY
78361: PPUSH
78362: CALL_OW 351
78366: IFFALSE 78407
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
78368: LD_VAR 0 5
78372: PUSH
78373: LD_INT 1
78375: ARRAY
78376: PUSH
78377: LD_VAR 0 4
78381: ARRAY
78382: PPUSH
78383: LD_VAR 0 5
78387: PUSH
78388: LD_INT 2
78390: ARRAY
78391: PUSH
78392: LD_VAR 0 4
78396: ARRAY
78397: PPUSH
78398: LD_VAR 0 1
78402: PPUSH
78403: CALL_OW 244
// end ;
78407: GO 78329
78409: POP
78410: POP
// end ;
78411: LD_VAR 0 3
78415: RET
// export function UniqueArray ( array ) ; var i ; begin
78416: LD_INT 0
78418: PPUSH
78419: PPUSH
// result := [ ] ;
78420: LD_ADDR_VAR 0 2
78424: PUSH
78425: EMPTY
78426: ST_TO_ADDR
// if not array then
78427: LD_VAR 0 1
78431: NOT
78432: IFFALSE 78436
// exit ;
78434: GO 78497
// for i := 1 to array do
78436: LD_ADDR_VAR 0 3
78440: PUSH
78441: DOUBLE
78442: LD_INT 1
78444: DEC
78445: ST_TO_ADDR
78446: LD_VAR 0 1
78450: PUSH
78451: FOR_TO
78452: IFFALSE 78495
// if not array [ i ] in result then
78454: LD_VAR 0 1
78458: PUSH
78459: LD_VAR 0 3
78463: ARRAY
78464: PUSH
78465: LD_VAR 0 2
78469: IN
78470: NOT
78471: IFFALSE 78493
// result := Join ( result , i ) ;
78473: LD_ADDR_VAR 0 2
78477: PUSH
78478: LD_VAR 0 2
78482: PPUSH
78483: LD_VAR 0 3
78487: PPUSH
78488: CALL 73148 0 2
78492: ST_TO_ADDR
78493: GO 78451
78495: POP
78496: POP
// end ; end_of_file
78497: LD_VAR 0 2
78501: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78502: LD_VAR 0 1
78506: PUSH
78507: LD_INT 200
78509: DOUBLE
78510: GREATEREQUAL
78511: IFFALSE 78519
78513: LD_INT 299
78515: DOUBLE
78516: LESSEQUAL
78517: IFTRUE 78521
78519: GO 78553
78521: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78522: LD_VAR 0 1
78526: PPUSH
78527: LD_VAR 0 2
78531: PPUSH
78532: LD_VAR 0 3
78536: PPUSH
78537: LD_VAR 0 4
78541: PPUSH
78542: LD_VAR 0 5
78546: PPUSH
78547: CALL 30259 0 5
78551: GO 78630
78553: LD_INT 300
78555: DOUBLE
78556: GREATEREQUAL
78557: IFFALSE 78565
78559: LD_INT 399
78561: DOUBLE
78562: LESSEQUAL
78563: IFTRUE 78567
78565: GO 78629
78567: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78568: LD_VAR 0 1
78572: PPUSH
78573: LD_VAR 0 2
78577: PPUSH
78578: LD_VAR 0 3
78582: PPUSH
78583: LD_VAR 0 4
78587: PPUSH
78588: LD_VAR 0 5
78592: PPUSH
78593: LD_VAR 0 6
78597: PPUSH
78598: LD_VAR 0 7
78602: PPUSH
78603: LD_VAR 0 8
78607: PPUSH
78608: LD_VAR 0 9
78612: PPUSH
78613: LD_VAR 0 10
78617: PPUSH
78618: LD_VAR 0 11
78622: PPUSH
78623: CALL 26143 0 11
78627: GO 78630
78629: POP
// end ;
78630: PPOPN 11
78632: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78633: LD_VAR 0 1
78637: PPUSH
78638: LD_VAR 0 2
78642: PPUSH
78643: LD_VAR 0 3
78647: PPUSH
78648: LD_VAR 0 4
78652: PPUSH
78653: LD_VAR 0 5
78657: PPUSH
78658: CALL 29640 0 5
// end ; end_of_file
78662: PPOPN 5
78664: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78665: LD_VAR 0 1
78669: PPUSH
78670: LD_VAR 0 2
78674: PPUSH
78675: LD_VAR 0 3
78679: PPUSH
78680: LD_VAR 0 4
78684: PPUSH
78685: LD_VAR 0 5
78689: PPUSH
78690: LD_VAR 0 6
78694: PPUSH
78695: CALL 13683 0 6
// end ;
78699: PPOPN 6
78701: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78702: LD_INT 0
78704: PPUSH
// begin if not units then
78705: LD_VAR 0 1
78709: NOT
78710: IFFALSE 78714
// exit ;
78712: GO 78714
// end ;
78714: PPOPN 7
78716: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78717: CALL 13570 0 0
// end ;
78721: PPOPN 1
78723: END
