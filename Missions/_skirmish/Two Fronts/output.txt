// starting begin isTest := false ;
   0: LD_ADDR_EXP 1
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// mission_name := TwoFronts ;
   8: LD_ADDR_OWVAR 68
  12: PUSH
  13: LD_STRING TwoFronts
  15: ST_TO_ADDR
// mission_number := 6 ;
  16: LD_ADDR_OWVAR 70
  20: PUSH
  21: LD_INT 6
  23: ST_TO_ADDR
// RandomizeAll ;
  24: CALL_OW 11
// ResetFog ;
  28: CALL_OW 335
// FogOff ( isTest ) ;
  32: LD_EXP 1
  36: PPUSH
  37: CALL_OW 344
// InitGlobalVar ;
  41: CALL 58 0 0
// InitAction ;
  45: CALL 6518 0 0
// PrepareAmericans ;
  49: CALL 146 0 0
// Action ;
  53: CALL 6776 0 0
// end ;
  57: END
// export isTest , callUsed ; export Jakes , Sylvia ; export dialogTrans , playerLoss ; export call , alfaNorthTriggered , alfaSouthTriggered , attackWave1 , attackWave2 ; export lastRadioMsg , lastRadioAttackMsg ; function InitGlobalVar ; begin
  58: LD_INT 0
  60: PPUSH
// dialogTrans := true ;
  61: LD_ADDR_EXP 5
  65: PUSH
  66: LD_INT 1
  68: ST_TO_ADDR
// call := true ;
  69: LD_ADDR_EXP 7
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// alfaNorthTriggered := false ;
  77: LD_ADDR_EXP 8
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// alfaSouthTriggered := false ;
  85: LD_ADDR_EXP 9
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// playerLoss := 0 ;
  93: LD_ADDR_EXP 6
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// callUsed := false ;
 101: LD_ADDR_EXP 2
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// attackWave1 := 0 ;
 109: LD_ADDR_EXP 10
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// attackWave2 := 0 ;
 117: LD_ADDR_EXP 11
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// lastRadioMsg := 0 0$00 ;
 125: LD_ADDR_EXP 12
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// lastRadioAttackMsg := 0 0$00 ;
 133: LD_ADDR_EXP 13
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// end ; end_of_file
 141: LD_VAR 0 1
 145: RET
// export usForces1 , usForces2 , usVehicles1 , usVehicles2 , usTechs1 , usTechs2 , usConstructList1 , usConstructList2 , usBuildingsToBuild1 , usBuildingsToBuild2 , usAttackVehicles1 , usAttackVehicles2 , usCargo1 , usCargo2 ; export function PrepareAmericans ; begin
 146: LD_INT 0
 148: PPUSH
// usForces1 := PrepareSquad ( 1 , 1 , americanBaseNorthArea , jakes , [ 4 , 6 , 8 ] [ Difficulty ] , [ 21 , 22 , 24 ] [ Difficulty ] ) ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 1
 156: PPUSH
 157: LD_INT 1
 159: PPUSH
 160: LD_INT 10
 162: PPUSH
 163: LD_STRING jakes
 165: PPUSH
 166: LD_INT 4
 168: PUSH
 169: LD_INT 6
 171: PUSH
 172: LD_INT 8
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_OWVAR 67
 184: ARRAY
 185: PPUSH
 186: LD_INT 21
 188: PUSH
 189: LD_INT 22
 191: PUSH
 192: LD_INT 24
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: PUSH
 200: LD_OWVAR 67
 204: ARRAY
 205: PPUSH
 206: CALL 521 0 6
 210: ST_TO_ADDR
// usForces2 := PrepareSquad ( 4 , 1 , americanBaseSouthArea , sylvia , [ 4 , 6 , 8 ] [ Difficulty ] , [ 21 , 22 , 24 ] [ Difficulty ] ) ;
 211: LD_ADDR_EXP 15
 215: PUSH
 216: LD_INT 4
 218: PPUSH
 219: LD_INT 1
 221: PPUSH
 222: LD_INT 11
 224: PPUSH
 225: LD_STRING sylvia
 227: PPUSH
 228: LD_INT 4
 230: PUSH
 231: LD_INT 6
 233: PUSH
 234: LD_INT 8
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: LIST
 241: PUSH
 242: LD_OWVAR 67
 246: ARRAY
 247: PPUSH
 248: LD_INT 21
 250: PUSH
 251: LD_INT 22
 253: PUSH
 254: LD_INT 24
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: LIST
 261: PUSH
 262: LD_OWVAR 67
 266: ARRAY
 267: PPUSH
 268: CALL 521 0 6
 272: ST_TO_ADDR
// usVehicles1 := [ ] ;
 273: LD_ADDR_EXP 16
 277: PUSH
 278: EMPTY
 279: ST_TO_ADDR
// usTechs1 := GetTechNation ( 1 , nation_american , state_enabled ) ;
 280: LD_ADDR_EXP 18
 284: PUSH
 285: LD_INT 1
 287: PPUSH
 288: LD_INT 1
 290: PPUSH
 291: LD_INT 1
 293: PPUSH
 294: CALL 38555 0 3
 298: ST_TO_ADDR
// usConstructList1 := [ ] ;
 299: LD_ADDR_EXP 20
 303: PUSH
 304: EMPTY
 305: ST_TO_ADDR
// usAttackVehicles1 := [ ] ;
 306: LD_ADDR_EXP 24
 310: PUSH
 311: EMPTY
 312: ST_TO_ADDR
// usVehicles2 := [ ] ;
 313: LD_ADDR_EXP 17
 317: PUSH
 318: EMPTY
 319: ST_TO_ADDR
// usTechs2 := GetTechNation ( 4 , nation_american , state_enabled ) ;
 320: LD_ADDR_EXP 19
 324: PUSH
 325: LD_INT 4
 327: PPUSH
 328: LD_INT 1
 330: PPUSH
 331: LD_INT 1
 333: PPUSH
 334: CALL 38555 0 3
 338: ST_TO_ADDR
// usConstructList2 := [ ] ;
 339: LD_ADDR_EXP 21
 343: PUSH
 344: EMPTY
 345: ST_TO_ADDR
// usAttackVehicles2 := [ ] ;
 346: LD_ADDR_EXP 25
 350: PUSH
 351: EMPTY
 352: ST_TO_ADDR
// if Difficulty > 1 then
 353: LD_OWVAR 67
 357: PUSH
 358: LD_INT 1
 360: GREATER
 361: IFFALSE 376
// SetTech ( tech_comp2 , 8 , state_researched ) ;
 363: LD_INT 58
 365: PPUSH
 366: LD_INT 8
 368: PPUSH
 369: LD_INT 2
 371: PPUSH
 372: CALL_OW 322
// if Difficulty > 2 then
 376: LD_OWVAR 67
 380: PUSH
 381: LD_INT 2
 383: GREATER
 384: IFFALSE 399
// SetTech ( tech_comp3 , 8 , state_researched ) ;
 386: LD_INT 59
 388: PPUSH
 389: LD_INT 8
 391: PPUSH
 392: LD_INT 2
 394: PPUSH
 395: CALL_OW 322
// SetResourceType ( GetBase ( usDep1 ) , mat_cans , 7500 ) ;
 399: LD_INT 9
 401: PPUSH
 402: CALL_OW 274
 406: PPUSH
 407: LD_INT 1
 409: PPUSH
 410: LD_INT 7500
 412: PPUSH
 413: CALL_OW 277
// SetResourceType ( GetBase ( usDep1 ) , mat_oil , 3000 ) ;
 417: LD_INT 9
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 2
 427: PPUSH
 428: LD_INT 3000
 430: PPUSH
 431: CALL_OW 277
// SetResourceType ( GetBase ( usDep2 ) , mat_cans , 5500 ) ;
 435: LD_INT 40
 437: PPUSH
 438: CALL_OW 274
 442: PPUSH
 443: LD_INT 1
 445: PPUSH
 446: LD_INT 5500
 448: PPUSH
 449: CALL_OW 277
// SetResourceType ( GetBase ( usDep2 ) , mat_oil , 3000 ) ;
 453: LD_INT 40
 455: PPUSH
 456: CALL_OW 274
 460: PPUSH
 461: LD_INT 2
 463: PPUSH
 464: LD_INT 3000
 466: PPUSH
 467: CALL_OW 277
// usConstructList2 := [ [ us_medium_wheeled , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ] ;
 471: LD_ADDR_EXP 21
 475: PUSH
 476: LD_INT 2
 478: PUSH
 479: LD_INT 1
 481: PUSH
 482: LD_INT 1
 484: PUSH
 485: LD_INT 5
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: PUSH
 494: LD_INT 2
 496: PUSH
 497: LD_INT 1
 499: PUSH
 500: LD_INT 1
 502: PUSH
 503: LD_INT 4
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: ST_TO_ADDR
// end ;
 516: LD_VAR 0 1
 520: RET
// export function PrepareSquad ( side , nat , area , commander , skill , num ) ; var i , un , team , tmp ; begin
 521: LD_INT 0
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
// uc_side := side ;
 528: LD_ADDR_OWVAR 20
 532: PUSH
 533: LD_VAR 0 1
 537: ST_TO_ADDR
// uc_nation := nat ;
 538: LD_ADDR_OWVAR 21
 542: PUSH
 543: LD_VAR 0 2
 547: ST_TO_ADDR
// team := [ ] ;
 548: LD_ADDR_VAR 0 10
 552: PUSH
 553: EMPTY
 554: ST_TO_ADDR
// hc_importance := 100 ;
 555: LD_ADDR_OWVAR 32
 559: PUSH
 560: LD_INT 100
 562: ST_TO_ADDR
// case commander of jakes :
 563: LD_VAR 0 4
 567: PUSH
 568: LD_STRING jakes
 570: DOUBLE
 571: EQUAL
 572: IFTRUE 576
 574: GO 648
 576: POP
// begin PrepareHuman ( sex_male , class_soldier , skill ) ;
 577: LD_INT 1
 579: PPUSH
 580: LD_INT 1
 582: PPUSH
 583: LD_VAR 0 5
 587: PPUSH
 588: CALL_OW 380
// hc_gallery := pkremaster ;
 592: LD_ADDR_OWVAR 33
 596: PUSH
 597: LD_STRING pkremaster
 599: ST_TO_ADDR
// hc_face_number := 12 ;
 600: LD_ADDR_OWVAR 34
 604: PUSH
 605: LD_INT 12
 607: ST_TO_ADDR
// hc_name := Jan van Jakes ;
 608: LD_ADDR_OWVAR 26
 612: PUSH
 613: LD_STRING Jan van Jakes
 615: ST_TO_ADDR
// Jakes := CreateHuman ;
 616: LD_ADDR_EXP 3
 620: PUSH
 621: CALL_OW 44
 625: ST_TO_ADDR
// team := Join ( team , Jakes ) ;
 626: LD_ADDR_VAR 0 10
 630: PUSH
 631: LD_VAR 0 10
 635: PPUSH
 636: LD_EXP 3
 640: PPUSH
 641: CALL 76608 0 2
 645: ST_TO_ADDR
// end ; sylvia :
 646: GO 729
 648: LD_STRING sylvia
 650: DOUBLE
 651: EQUAL
 652: IFTRUE 656
 654: GO 728
 656: POP
// begin PrepareHuman ( sex_female , class_soldier , skill ) ;
 657: LD_INT 2
 659: PPUSH
 660: LD_INT 1
 662: PPUSH
 663: LD_VAR 0 5
 667: PPUSH
 668: CALL_OW 380
// hc_gallery := pkremaster ;
 672: LD_ADDR_OWVAR 33
 676: PUSH
 677: LD_STRING pkremaster
 679: ST_TO_ADDR
// hc_face_number := 13 ;
 680: LD_ADDR_OWVAR 34
 684: PUSH
 685: LD_INT 13
 687: ST_TO_ADDR
// hc_name := Sylvia Johnson ;
 688: LD_ADDR_OWVAR 26
 692: PUSH
 693: LD_STRING Sylvia Johnson
 695: ST_TO_ADDR
// Sylvia := CreateHuman ;
 696: LD_ADDR_EXP 4
 700: PUSH
 701: CALL_OW 44
 705: ST_TO_ADDR
// team := Join ( team , Sylvia ) ;
 706: LD_ADDR_VAR 0 10
 710: PUSH
 711: LD_VAR 0 10
 715: PPUSH
 716: LD_EXP 4
 720: PPUSH
 721: CALL 76608 0 2
 725: ST_TO_ADDR
// end ; end ;
 726: GO 729
 728: POP
// InitHC_All ( ) ;
 729: CALL_OW 584
// for i := 1 to num do
 733: LD_ADDR_VAR 0 8
 737: PUSH
 738: DOUBLE
 739: LD_INT 1
 741: DEC
 742: ST_TO_ADDR
 743: LD_VAR 0 6
 747: PUSH
 748: FOR_TO
 749: IFFALSE 804
// begin PrepareHuman ( false , ( i mod 4 ) + 1 , skill ) ;
 751: LD_INT 0
 753: PPUSH
 754: LD_VAR 0 8
 758: PUSH
 759: LD_INT 4
 761: MOD
 762: PUSH
 763: LD_INT 1
 765: PLUS
 766: PPUSH
 767: LD_VAR 0 5
 771: PPUSH
 772: CALL_OW 380
// un := CreateHuman ;
 776: LD_ADDR_VAR 0 9
 780: PUSH
 781: CALL_OW 44
 785: ST_TO_ADDR
// team := team ^ un ;
 786: LD_ADDR_VAR 0 10
 790: PUSH
 791: LD_VAR 0 10
 795: PUSH
 796: LD_VAR 0 9
 800: ADD
 801: ST_TO_ADDR
// end ;
 802: GO 748
 804: POP
 805: POP
// for i := 1 to 3 do
 806: LD_ADDR_VAR 0 8
 810: PUSH
 811: DOUBLE
 812: LD_INT 1
 814: DEC
 815: ST_TO_ADDR
 816: LD_INT 3
 818: PUSH
 819: FOR_TO
 820: IFFALSE 862
// begin PrepareMechanic ( false , skill ) ;
 822: LD_INT 0
 824: PPUSH
 825: LD_VAR 0 5
 829: PPUSH
 830: CALL_OW 383
// un := CreateHuman ;
 834: LD_ADDR_VAR 0 9
 838: PUSH
 839: CALL_OW 44
 843: ST_TO_ADDR
// team := team ^ un ;
 844: LD_ADDR_VAR 0 10
 848: PUSH
 849: LD_VAR 0 10
 853: PUSH
 854: LD_VAR 0 9
 858: ADD
 859: ST_TO_ADDR
// end ;
 860: GO 819
 862: POP
 863: POP
// for i := 1 to 5 do
 864: LD_ADDR_VAR 0 8
 868: PUSH
 869: DOUBLE
 870: LD_INT 1
 872: DEC
 873: ST_TO_ADDR
 874: LD_INT 5
 876: PUSH
 877: FOR_TO
 878: IFFALSE 920
// begin PrepareSoldier ( false , skill ) ;
 880: LD_INT 0
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 381
// un := CreateHuman ;
 892: LD_ADDR_VAR 0 9
 896: PUSH
 897: CALL_OW 44
 901: ST_TO_ADDR
// team := team ^ un ;
 902: LD_ADDR_VAR 0 10
 906: PUSH
 907: LD_VAR 0 10
 911: PUSH
 912: LD_VAR 0 9
 916: ADD
 917: ST_TO_ADDR
// end ;
 918: GO 877
 920: POP
 921: POP
// for i in team do
 922: LD_ADDR_VAR 0 8
 926: PUSH
 927: LD_VAR 0 10
 931: PUSH
 932: FOR_IN
 933: IFFALSE 1271
// begin case GetClass ( i ) of class_soldier :
 935: LD_VAR 0 8
 939: PPUSH
 940: CALL_OW 257
 944: PUSH
 945: LD_INT 1
 947: DOUBLE
 948: EQUAL
 949: IFTRUE 953
 951: GO 1006
 953: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_full ] ] , [ f_btype , b_barracks ] ] ) ; class_engineer :
 954: LD_ADDR_VAR 0 11
 958: PUSH
 959: LD_INT 22
 961: PUSH
 962: LD_VAR 0 1
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: LD_INT 3
 973: PUSH
 974: LD_INT 62
 976: PUSH
 977: EMPTY
 978: LIST
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 30
 986: PUSH
 987: LD_INT 5
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: PPUSH
 999: CALL_OW 69
1003: ST_TO_ADDR
1004: GO 1226
1006: LD_INT 2
1008: DOUBLE
1009: EQUAL
1010: IFTRUE 1014
1012: GO 1085
1014: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; class_scientistic :
1015: LD_ADDR_VAR 0 11
1019: PUSH
1020: LD_INT 22
1022: PUSH
1023: LD_VAR 0 1
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: PUSH
1032: LD_INT 3
1034: PUSH
1035: LD_INT 62
1037: PUSH
1038: EMPTY
1039: LIST
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PUSH
1045: LD_INT 2
1047: PUSH
1048: LD_INT 30
1050: PUSH
1051: LD_INT 0
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: PUSH
1058: LD_INT 30
1060: PUSH
1061: LD_INT 1
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: LIST
1072: PUSH
1073: EMPTY
1074: LIST
1075: LIST
1076: LIST
1077: PPUSH
1078: CALL_OW 69
1082: ST_TO_ADDR
1083: GO 1226
1085: LD_INT 4
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1164
1093: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) ; class_mechanic :
1094: LD_ADDR_VAR 0 11
1098: PUSH
1099: LD_INT 22
1101: PUSH
1102: LD_VAR 0 1
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: PUSH
1111: LD_INT 3
1113: PUSH
1114: LD_INT 62
1116: PUSH
1117: EMPTY
1118: LIST
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: PUSH
1124: LD_INT 2
1126: PUSH
1127: LD_INT 30
1129: PUSH
1130: LD_INT 6
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: PUSH
1137: LD_INT 30
1139: PUSH
1140: LD_INT 8
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: PUSH
1147: EMPTY
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: PPUSH
1157: CALL_OW 69
1161: ST_TO_ADDR
1162: GO 1226
1164: LD_INT 3
1166: DOUBLE
1167: EQUAL
1168: IFTRUE 1172
1170: GO 1225
1172: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_full ] ] , [ f_btype , b_factory ] ] ) ; end ;
1173: LD_ADDR_VAR 0 11
1177: PUSH
1178: LD_INT 22
1180: PUSH
1181: LD_VAR 0 1
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: LD_INT 3
1192: PUSH
1193: LD_INT 62
1195: PUSH
1196: EMPTY
1197: LIST
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PUSH
1203: LD_INT 30
1205: PUSH
1206: LD_INT 3
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: LIST
1217: PPUSH
1218: CALL_OW 69
1222: ST_TO_ADDR
1223: GO 1226
1225: POP
// if tmp then
1226: LD_VAR 0 11
1230: IFFALSE 1252
// PlaceHumanInUnit ( i , tmp [ 1 ] ) else
1232: LD_VAR 0 8
1236: PPUSH
1237: LD_VAR 0 11
1241: PUSH
1242: LD_INT 1
1244: ARRAY
1245: PPUSH
1246: CALL_OW 52
1250: GO 1269
// PlaceUnitArea ( i , area , false ) ;
1252: LD_VAR 0 8
1256: PPUSH
1257: LD_VAR 0 3
1261: PPUSH
1262: LD_INT 0
1264: PPUSH
1265: CALL_OW 49
// end ;
1269: GO 932
1271: POP
1272: POP
// result := team diff 0 ;
1273: LD_ADDR_VAR 0 7
1277: PUSH
1278: LD_VAR 0 10
1282: PUSH
1283: LD_INT 0
1285: DIFF
1286: ST_TO_ADDR
// end ;
1287: LD_VAR 0 7
1291: RET
// export function PrepareAlfaAttack ( area , n ) ; var i , un , ch ; begin
1292: LD_INT 0
1294: PPUSH
1295: PPUSH
1296: PPUSH
1297: PPUSH
// result := [ ] ;
1298: LD_ADDR_VAR 0 3
1302: PUSH
1303: EMPTY
1304: ST_TO_ADDR
// for i := 1 to n do
1305: LD_ADDR_VAR 0 4
1309: PUSH
1310: DOUBLE
1311: LD_INT 1
1313: DEC
1314: ST_TO_ADDR
1315: LD_VAR 0 2
1319: PUSH
1320: FOR_TO
1321: IFFALSE 1643
// begin uc_side := 8 ;
1323: LD_ADDR_OWVAR 20
1327: PUSH
1328: LD_INT 8
1330: ST_TO_ADDR
// uc_nation := 1 ;
1331: LD_ADDR_OWVAR 21
1335: PUSH
1336: LD_INT 1
1338: ST_TO_ADDR
// ch := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ rand ( 1 , Difficulty ) ] ;
1339: LD_ADDR_VAR 0 6
1343: PUSH
1344: LD_INT 3
1346: PUSH
1347: LD_INT 4
1349: PUSH
1350: LD_INT 4
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: LIST
1357: PUSH
1358: LD_INT 1
1360: PPUSH
1361: LD_OWVAR 67
1365: PPUSH
1366: CALL_OW 12
1370: ARRAY
1371: ST_TO_ADDR
// vc_chassis := ch ;
1372: LD_ADDR_OWVAR 37
1376: PUSH
1377: LD_VAR 0 6
1381: ST_TO_ADDR
// vc_control := control_computer ;
1382: LD_ADDR_OWVAR 38
1386: PUSH
1387: LD_INT 3
1389: ST_TO_ADDR
// vc_engine := engine_combustion ;
1390: LD_ADDR_OWVAR 39
1394: PUSH
1395: LD_INT 1
1397: ST_TO_ADDR
// if tick < [ 14 14$00 , 12 12$00 , 10 10$00 ] [ Difficulty ] then
1398: LD_OWVAR 1
1402: PUSH
1403: LD_INT 29400
1405: PUSH
1406: LD_INT 25200
1408: PUSH
1409: LD_INT 21000
1411: PUSH
1412: EMPTY
1413: LIST
1414: LIST
1415: LIST
1416: PUSH
1417: LD_OWVAR 67
1421: ARRAY
1422: LESS
1423: IFFALSE 1454
// vc_weapon := [ us_light_gun , us_double_gun ] [ rand ( 1 , 2 ) ] else
1425: LD_ADDR_OWVAR 40
1429: PUSH
1430: LD_INT 3
1432: PUSH
1433: LD_INT 5
1435: PUSH
1436: EMPTY
1437: LIST
1438: LIST
1439: PUSH
1440: LD_INT 1
1442: PPUSH
1443: LD_INT 2
1445: PPUSH
1446: CALL_OW 12
1450: ARRAY
1451: ST_TO_ADDR
1452: GO 1550
// if ch = us_medium_tracked then
1454: LD_VAR 0 6
1458: PUSH
1459: LD_INT 3
1461: EQUAL
1462: IFFALSE 1509
// vc_weapon := [ us_light_gun , us_gatling_gun , us_double_gun , us_rocket_launcher ] [ rand ( Difficulty , Difficulty + 1 ) ] else
1464: LD_ADDR_OWVAR 40
1468: PUSH
1469: LD_INT 3
1471: PUSH
1472: LD_INT 4
1474: PUSH
1475: LD_INT 5
1477: PUSH
1478: LD_INT 7
1480: PUSH
1481: EMPTY
1482: LIST
1483: LIST
1484: LIST
1485: LIST
1486: PUSH
1487: LD_OWVAR 67
1491: PPUSH
1492: LD_OWVAR 67
1496: PUSH
1497: LD_INT 1
1499: PLUS
1500: PPUSH
1501: CALL_OW 12
1505: ARRAY
1506: ST_TO_ADDR
1507: GO 1550
// vc_weapon := [ us_double_gun , us_heavy_gun , us_rocket_launcher , us_rocket_launcher ] [ rand ( 1 , Difficulty + 1 ) ] ;
1509: LD_ADDR_OWVAR 40
1513: PUSH
1514: LD_INT 5
1516: PUSH
1517: LD_INT 6
1519: PUSH
1520: LD_INT 7
1522: PUSH
1523: LD_INT 7
1525: PUSH
1526: EMPTY
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: PUSH
1532: LD_INT 1
1534: PPUSH
1535: LD_OWVAR 67
1539: PUSH
1540: LD_INT 1
1542: PLUS
1543: PPUSH
1544: CALL_OW 12
1548: ARRAY
1549: ST_TO_ADDR
// vc_fuel_battery := 70 ;
1550: LD_ADDR_OWVAR 41
1554: PUSH
1555: LD_INT 70
1557: ST_TO_ADDR
// un := CreateVehicle ;
1558: LD_ADDR_VAR 0 5
1562: PUSH
1563: CALL_OW 45
1567: ST_TO_ADDR
// SetDir ( un , 2 ) ;
1568: LD_VAR 0 5
1572: PPUSH
1573: LD_INT 2
1575: PPUSH
1576: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
1580: LD_INT 35
1582: PPUSH
1583: CALL_OW 67
// until PlaceUnitArea ( un , area , false ) ;
1587: LD_VAR 0 5
1591: PPUSH
1592: LD_VAR 0 1
1596: PPUSH
1597: LD_INT 0
1599: PPUSH
1600: CALL_OW 49
1604: IFFALSE 1580
// result := Join ( result , un ) ;
1606: LD_ADDR_VAR 0 3
1610: PUSH
1611: LD_VAR 0 3
1615: PPUSH
1616: LD_VAR 0 5
1620: PPUSH
1621: CALL 76608 0 2
1625: ST_TO_ADDR
// ComMoveXY ( un , 65 , 9 ) ;
1626: LD_VAR 0 5
1630: PPUSH
1631: LD_INT 65
1633: PPUSH
1634: LD_INT 9
1636: PPUSH
1637: CALL_OW 111
// end ;
1641: GO 1320
1643: POP
1644: POP
// if Prob ( [ 90 , 80 , 70 ] [ Difficulty ] ) then
1645: LD_INT 90
1647: PUSH
1648: LD_INT 80
1650: PUSH
1651: LD_INT 70
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: LIST
1658: PUSH
1659: LD_OWVAR 67
1663: ARRAY
1664: PPUSH
1665: CALL_OW 13
1669: IFFALSE 1815
// begin uc_side := 8 ;
1671: LD_ADDR_OWVAR 20
1675: PUSH
1676: LD_INT 8
1678: ST_TO_ADDR
// uc_nation := 1 ;
1679: LD_ADDR_OWVAR 21
1683: PUSH
1684: LD_INT 1
1686: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
1687: LD_ADDR_OWVAR 37
1691: PUSH
1692: LD_INT 4
1694: ST_TO_ADDR
// vc_control := control_computer ;
1695: LD_ADDR_OWVAR 38
1699: PUSH
1700: LD_INT 3
1702: ST_TO_ADDR
// vc_engine := engine_combustion ;
1703: LD_ADDR_OWVAR 39
1707: PUSH
1708: LD_INT 1
1710: ST_TO_ADDR
// vc_weapon := us_bulldozer ;
1711: LD_ADDR_OWVAR 40
1715: PUSH
1716: LD_INT 14
1718: ST_TO_ADDR
// vc_fuel_battery := 70 ;
1719: LD_ADDR_OWVAR 41
1723: PUSH
1724: LD_INT 70
1726: ST_TO_ADDR
// un := CreateVehicle ;
1727: LD_ADDR_VAR 0 5
1731: PUSH
1732: CALL_OW 45
1736: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1737: LD_INT 35
1739: PPUSH
1740: CALL_OW 67
// until PlaceUnitArea ( un , area , false ) ;
1744: LD_VAR 0 5
1748: PPUSH
1749: LD_VAR 0 1
1753: PPUSH
1754: LD_INT 0
1756: PPUSH
1757: CALL_OW 49
1761: IFFALSE 1737
// ComMoveXY ( un , 65 , 9 ) ;
1763: LD_VAR 0 5
1767: PPUSH
1768: LD_INT 65
1770: PPUSH
1771: LD_INT 9
1773: PPUSH
1774: CALL_OW 111
// wait ( 0 0$02 ) ;
1778: LD_INT 70
1780: PPUSH
1781: CALL_OW 67
// CutTreeXYR ( un , 104 , 65 , 12 ) ;
1785: LD_VAR 0 5
1789: PPUSH
1790: LD_INT 104
1792: PPUSH
1793: LD_INT 65
1795: PPUSH
1796: LD_INT 12
1798: PPUSH
1799: CALL 33200 0 4
// AddComAttackUnit ( un , playerDepot ) ;
1803: LD_VAR 0 5
1807: PPUSH
1808: LD_INT 1
1810: PPUSH
1811: CALL_OW 175
// end ; repeat wait ( 0 0$1 ) ;
1815: LD_INT 35
1817: PPUSH
1818: CALL_OW 67
// result := UnitFilter ( result , [ f_ok ] ) ;
1822: LD_ADDR_VAR 0 3
1826: PUSH
1827: LD_VAR 0 3
1831: PPUSH
1832: LD_INT 50
1834: PUSH
1835: EMPTY
1836: LIST
1837: PPUSH
1838: CALL_OW 72
1842: ST_TO_ADDR
// AgressiveMove ( result , [ [ 82 , 14 ] , [ 83 , 39 ] , [ 89 , 51 ] , [ 91 , 58 ] ] ) ;
1843: LD_VAR 0 3
1847: PPUSH
1848: LD_INT 82
1850: PUSH
1851: LD_INT 14
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 83
1860: PUSH
1861: LD_INT 39
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 89
1870: PUSH
1871: LD_INT 51
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 91
1880: PUSH
1881: LD_INT 58
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PUSH
1888: EMPTY
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: PPUSH
1894: CALL 79374 0 2
// until not result ;
1898: LD_VAR 0 3
1902: NOT
1903: IFFALSE 1815
// end ;
1905: LD_VAR 0 3
1909: RET
// every 0 0$1 trigger FilterAllUnits ( [ f_side , 1 ] ) do
1910: LD_INT 22
1912: PUSH
1913: LD_INT 1
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: PPUSH
1920: CALL_OW 69
1924: IFFALSE 2004
1926: GO 1928
1928: DISABLE
// begin enable ;
1929: ENABLE
// BaseScript ( 1 , americanBaseNorthArea , americanBaseNorthArea , americanBaseNorthInnerArea , americanBaseNorthOuterArea , usForces1 , usVehicles1 , usTechs1 , usConstructList1 , usBuildingsToBuild1 , [ 19 , 9 ] , [ 40 , 5 ] , [ 82 , 47 ] ) ;
1930: LD_INT 1
1932: PPUSH
1933: LD_INT 10
1935: PPUSH
1936: LD_INT 10
1938: PPUSH
1939: LD_INT 13
1941: PPUSH
1942: LD_INT 12
1944: PPUSH
1945: LD_EXP 14
1949: PPUSH
1950: LD_EXP 16
1954: PPUSH
1955: LD_EXP 18
1959: PPUSH
1960: LD_EXP 20
1964: PPUSH
1965: LD_EXP 22
1969: PPUSH
1970: LD_INT 19
1972: PUSH
1973: LD_INT 9
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PPUSH
1980: LD_INT 40
1982: PUSH
1983: LD_INT 5
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: PPUSH
1990: LD_INT 82
1992: PUSH
1993: LD_INT 47
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PPUSH
2000: CALL 9762 0 13
// end ;
2004: END
// every 0 0$1 trigger FilterAllUnits ( [ f_side , 4 ] ) do
2005: LD_INT 22
2007: PUSH
2008: LD_INT 4
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PPUSH
2015: CALL_OW 69
2019: IFFALSE 2091
2021: GO 2023
2023: DISABLE
// begin enable ;
2024: ENABLE
// BaseScript ( 4 , americanBaseSouthArea , americanBaseSouthArea , americanBaseSouthInnerArea , americanBaseSouthOuterArea , usForces2 , usVehicles2 , usTechs2 , usConstructList2 , usBuildingsToBuild2 , [ 83 , 151 ] , [ 92 , 144 ] , [ ] ) ;
2025: LD_INT 4
2027: PPUSH
2028: LD_INT 11
2030: PPUSH
2031: LD_INT 11
2033: PPUSH
2034: LD_INT 15
2036: PPUSH
2037: LD_INT 14
2039: PPUSH
2040: LD_EXP 15
2044: PPUSH
2045: LD_EXP 17
2049: PPUSH
2050: LD_EXP 19
2054: PPUSH
2055: LD_EXP 21
2059: PPUSH
2060: LD_EXP 23
2064: PPUSH
2065: LD_INT 83
2067: PUSH
2068: LD_INT 151
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PPUSH
2075: LD_INT 92
2077: PUSH
2078: LD_INT 144
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PPUSH
2085: EMPTY
2086: PPUSH
2087: CALL 9762 0 13
// end ;
2091: END
// every 5 5$00 + 3 3$00 trigger IsOk ( usDep1 ) and not usConstructList1 do var i ;
2092: LD_INT 9
2094: PPUSH
2095: CALL_OW 302
2099: IFFALSE 2108
2101: PUSH
2102: LD_EXP 20
2106: NOT
2107: AND
2108: IFFALSE 2554
2110: GO 2112
2112: DISABLE
2113: LD_INT 0
2115: PPUSH
// begin enable ;
2116: ENABLE
// usConstructList1 := [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_gatling_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] ] ;
2117: LD_ADDR_EXP 20
2121: PUSH
2122: LD_INT 3
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 2
2130: PUSH
2131: LD_INT 5
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: PUSH
2140: LD_INT 3
2142: PUSH
2143: LD_INT 1
2145: PUSH
2146: LD_INT 2
2148: PUSH
2149: LD_INT 4
2151: PUSH
2152: EMPTY
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: PUSH
2158: LD_INT 3
2160: PUSH
2161: LD_INT 1
2163: PUSH
2164: LD_INT 2
2166: PUSH
2167: LD_INT 5
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: PUSH
2176: EMPTY
2177: LIST
2178: LIST
2179: LIST
2180: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) then
2181: LD_INT 22
2183: PUSH
2184: LD_INT 1
2186: PUSH
2187: EMPTY
2188: LIST
2189: LIST
2190: PUSH
2191: LD_INT 34
2193: PUSH
2194: LD_INT 12
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PPUSH
2205: CALL_OW 69
2209: NOT
2210: IFFALSE 2244
// usConstructList1 := usConstructList1 ^ [ [ us_medium_tracked , engine_combustion , control_remote , us_cargo_bay ] ] ;
2212: LD_ADDR_EXP 20
2216: PUSH
2217: LD_EXP 20
2221: PUSH
2222: LD_INT 3
2224: PUSH
2225: LD_INT 1
2227: PUSH
2228: LD_INT 2
2230: PUSH
2231: LD_INT 12
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: LIST
2238: LIST
2239: PUSH
2240: EMPTY
2241: LIST
2242: ADD
2243: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) < 2 then
2244: LD_INT 22
2246: PUSH
2247: LD_INT 1
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: PUSH
2254: LD_INT 34
2256: PUSH
2257: LD_INT 13
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: PUSH
2264: EMPTY
2265: LIST
2266: LIST
2267: PPUSH
2268: CALL_OW 69
2272: PUSH
2273: LD_INT 2
2275: LESS
2276: IFFALSE 2310
// usConstructList1 := usConstructList1 ^ [ [ us_medium_tracked , engine_combustion , control_remote , us_crane ] ] ;
2278: LD_ADDR_EXP 20
2282: PUSH
2283: LD_EXP 20
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: LD_INT 1
2293: PUSH
2294: LD_INT 2
2296: PUSH
2297: LD_INT 13
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: PUSH
2306: EMPTY
2307: LIST
2308: ADD
2309: ST_TO_ADDR
// if UnitsInside ( usFac1 ) > 3 then
2310: LD_INT 10
2312: PPUSH
2313: CALL_OW 313
2317: PUSH
2318: LD_INT 3
2320: GREATER
2321: IFFALSE 2355
// usConstructList1 := usConstructList1 ^ [ [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] ] ;
2323: LD_ADDR_EXP 20
2327: PUSH
2328: LD_EXP 20
2332: PUSH
2333: LD_INT 3
2335: PUSH
2336: LD_INT 1
2338: PUSH
2339: LD_INT 1
2341: PUSH
2342: LD_INT 5
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: LIST
2349: LIST
2350: PUSH
2351: EMPTY
2352: LIST
2353: ADD
2354: ST_TO_ADDR
// if Difficulty > 1 then
2355: LD_OWVAR 67
2359: PUSH
2360: LD_INT 1
2362: GREATER
2363: IFFALSE 2416
// usConstructList1 := usConstructList1 ^ [ [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_gatling_gun ] ] ;
2365: LD_ADDR_EXP 20
2369: PUSH
2370: LD_EXP 20
2374: PUSH
2375: LD_INT 4
2377: PUSH
2378: LD_INT 1
2380: PUSH
2381: LD_INT 2
2383: PUSH
2384: LD_INT 6
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: PUSH
2393: LD_INT 3
2395: PUSH
2396: LD_INT 1
2398: PUSH
2399: LD_INT 2
2401: PUSH
2402: LD_INT 4
2404: PUSH
2405: EMPTY
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: ADD
2415: ST_TO_ADDR
// if Difficulty > 2 then
2416: LD_OWVAR 67
2420: PUSH
2421: LD_INT 2
2423: GREATER
2424: IFFALSE 2477
// usConstructList1 := usConstructList1 ^ [ [ us_heavy_tracked , engine_combustion , control_remote , us_gatling_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_gatling_gun ] ] ;
2426: LD_ADDR_EXP 20
2430: PUSH
2431: LD_EXP 20
2435: PUSH
2436: LD_INT 4
2438: PUSH
2439: LD_INT 1
2441: PUSH
2442: LD_INT 2
2444: PUSH
2445: LD_INT 4
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: LIST
2452: LIST
2453: PUSH
2454: LD_INT 3
2456: PUSH
2457: LD_INT 1
2459: PUSH
2460: LD_INT 2
2462: PUSH
2463: LD_INT 4
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: ADD
2476: ST_TO_ADDR
// for i := 1 to attackWave1 do
2477: LD_ADDR_VAR 0 1
2481: PUSH
2482: DOUBLE
2483: LD_INT 1
2485: DEC
2486: ST_TO_ADDR
2487: LD_EXP 10
2491: PUSH
2492: FOR_TO
2493: IFFALSE 2552
// usConstructList1 := usConstructList1 ^ [ [ us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ rand ( 1 , 3 ) ] ] ] ;
2495: LD_ADDR_EXP 20
2499: PUSH
2500: LD_EXP 20
2504: PUSH
2505: LD_INT 4
2507: PUSH
2508: LD_INT 1
2510: PUSH
2511: LD_INT 2
2513: PUSH
2514: LD_INT 4
2516: PUSH
2517: LD_INT 5
2519: PUSH
2520: LD_INT 6
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: LIST
2527: PUSH
2528: LD_INT 1
2530: PPUSH
2531: LD_INT 3
2533: PPUSH
2534: CALL_OW 12
2538: ARRAY
2539: PUSH
2540: EMPTY
2541: LIST
2542: LIST
2543: LIST
2544: LIST
2545: PUSH
2546: EMPTY
2547: LIST
2548: ADD
2549: ST_TO_ADDR
2550: GO 2492
2552: POP
2553: POP
// end ;
2554: PPOPN 1
2556: END
// export function SendUsAttack1 ; var i , tmp , path , dial ; begin
2557: LD_INT 0
2559: PPUSH
2560: PPUSH
2561: PPUSH
2562: PPUSH
2563: PPUSH
// attackWave1 := Inc ( attackWave1 ) ;
2564: LD_ADDR_EXP 10
2568: PUSH
2569: LD_EXP 10
2573: PPUSH
2574: CALL 77981 0 1
2578: ST_TO_ADDR
// if attackWave1 > 6 then
2579: LD_EXP 10
2583: PUSH
2584: LD_INT 6
2586: GREATER
2587: IFFALSE 2597
// attackWave1 := 6 ;
2589: LD_ADDR_EXP 10
2593: PUSH
2594: LD_INT 6
2596: ST_TO_ADDR
// tmp := usAttackVehicles1 ;
2597: LD_ADDR_VAR 0 3
2601: PUSH
2602: LD_EXP 24
2606: ST_TO_ADDR
// usAttackVehicles1 := [ ] ;
2607: LD_ADDR_EXP 24
2611: PUSH
2612: EMPTY
2613: ST_TO_ADDR
// if IsOk ( Jakes ) and lastRadioAttackMsg + 1 1$00 < tick then
2614: LD_EXP 3
2618: PPUSH
2619: CALL_OW 302
2623: IFFALSE 2641
2625: PUSH
2626: LD_EXP 13
2630: PUSH
2631: LD_INT 2100
2633: PLUS
2634: PUSH
2635: LD_OWVAR 1
2639: LESS
2640: AND
2641: IFFALSE 2735
// begin dial := [ DJ1 , DJ6 ] ;
2643: LD_ADDR_VAR 0 5
2647: PUSH
2648: LD_STRING DJ1
2650: PUSH
2651: LD_STRING DJ6
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_weapon , us_heavy_gun ] ) then
2658: LD_VAR 0 3
2662: PPUSH
2663: LD_INT 34
2665: PUSH
2666: LD_INT 6
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: PPUSH
2673: CALL_OW 72
2677: IFFALSE 2697
// dial := Join ( dial , DJ4 ) ;
2679: LD_ADDR_VAR 0 5
2683: PUSH
2684: LD_VAR 0 5
2688: PPUSH
2689: LD_STRING DJ4
2691: PPUSH
2692: CALL 76608 0 2
2696: ST_TO_ADDR
// lastRadioAttackMsg := tick ;
2697: LD_ADDR_EXP 13
2701: PUSH
2702: LD_OWVAR 1
2706: ST_TO_ADDR
// SayRadio ( Jakes , dial [ rand ( 1 , dial ) ] ) ;
2707: LD_EXP 3
2711: PPUSH
2712: LD_VAR 0 5
2716: PUSH
2717: LD_INT 1
2719: PPUSH
2720: LD_VAR 0 5
2724: PPUSH
2725: CALL_OW 12
2729: ARRAY
2730: PPUSH
2731: CALL_OW 94
// end ; path := [ [ [ 38 , 41 ] , [ 90 , 51 ] ] , [ [ 72 , 14 ] , [ 83 , 42 ] ] ] [ rand ( 1 , 2 ) ] ;
2735: LD_ADDR_VAR 0 4
2739: PUSH
2740: LD_INT 38
2742: PUSH
2743: LD_INT 41
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: PUSH
2750: LD_INT 90
2752: PUSH
2753: LD_INT 51
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: PUSH
2764: LD_INT 72
2766: PUSH
2767: LD_INT 14
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 83
2776: PUSH
2777: LD_INT 42
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 1
2794: PPUSH
2795: LD_INT 2
2797: PPUSH
2798: CALL_OW 12
2802: ARRAY
2803: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
2804: LD_INT 70
2806: PPUSH
2807: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
2811: LD_ADDR_VAR 0 3
2815: PUSH
2816: LD_VAR 0 3
2820: PPUSH
2821: LD_INT 50
2823: PUSH
2824: EMPTY
2825: LIST
2826: PPUSH
2827: CALL_OW 72
2831: ST_TO_ADDR
// for i in tmp do
2832: LD_ADDR_VAR 0 2
2836: PUSH
2837: LD_VAR 0 3
2841: PUSH
2842: FOR_IN
2843: IFFALSE 2861
// AgressiveMove ( i , path ) until not tmp ;
2845: LD_VAR 0 2
2849: PPUSH
2850: LD_VAR 0 4
2854: PPUSH
2855: CALL 79374 0 2
2859: GO 2842
2861: POP
2862: POP
2863: LD_VAR 0 3
2867: NOT
2868: IFFALSE 2804
// end ;
2870: LD_VAR 0 1
2874: RET
// every 5 5$00 + 3 3$00 trigger IsOk ( usDep2 ) and not usConstructList2 do var i ;
2875: LD_INT 40
2877: PPUSH
2878: CALL_OW 302
2882: IFFALSE 2891
2884: PUSH
2885: LD_EXP 21
2889: NOT
2890: AND
2891: IFFALSE 3147
2893: GO 2895
2895: DISABLE
2896: LD_INT 0
2898: PPUSH
// begin enable ;
2899: ENABLE
// usConstructList2 := [ [ us_medium_wheeled , engine_combustion , control_remote , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_remote , us_gatling_gun ] , [ us_medium_wheeled , engine_combustion , control_remote , us_double_gun ] ] ;
2900: LD_ADDR_EXP 21
2904: PUSH
2905: LD_INT 2
2907: PUSH
2908: LD_INT 1
2910: PUSH
2911: LD_INT 2
2913: PUSH
2914: LD_INT 5
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: LIST
2921: LIST
2922: PUSH
2923: LD_INT 2
2925: PUSH
2926: LD_INT 1
2928: PUSH
2929: LD_INT 2
2931: PUSH
2932: LD_INT 4
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: LIST
2939: LIST
2940: PUSH
2941: LD_INT 2
2943: PUSH
2944: LD_INT 1
2946: PUSH
2947: LD_INT 2
2949: PUSH
2950: LD_INT 5
2952: PUSH
2953: EMPTY
2954: LIST
2955: LIST
2956: LIST
2957: LIST
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: LIST
2963: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) then
2964: LD_INT 22
2966: PUSH
2967: LD_INT 4
2969: PUSH
2970: EMPTY
2971: LIST
2972: LIST
2973: PUSH
2974: LD_INT 34
2976: PUSH
2977: LD_INT 12
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: PPUSH
2988: CALL_OW 69
2992: NOT
2993: IFFALSE 3027
// usConstructList2 := usConstructList2 ^ [ [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] ] ;
2995: LD_ADDR_EXP 21
2999: PUSH
3000: LD_EXP 21
3004: PUSH
3005: LD_INT 2
3007: PUSH
3008: LD_INT 1
3010: PUSH
3011: LD_INT 2
3013: PUSH
3014: LD_INT 12
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: LIST
3021: LIST
3022: PUSH
3023: EMPTY
3024: LIST
3025: ADD
3026: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_crane ] ] ) < 2 then
3027: LD_INT 22
3029: PUSH
3030: LD_INT 4
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PUSH
3037: LD_INT 34
3039: PUSH
3040: LD_INT 13
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: PUSH
3056: LD_INT 2
3058: LESS
3059: IFFALSE 3093
// usConstructList2 := usConstructList2 ^ [ [ us_medium_wheeled , engine_combustion , control_remote , us_crane ] ] ;
3061: LD_ADDR_EXP 21
3065: PUSH
3066: LD_EXP 21
3070: PUSH
3071: LD_INT 2
3073: PUSH
3074: LD_INT 1
3076: PUSH
3077: LD_INT 2
3079: PUSH
3080: LD_INT 13
3082: PUSH
3083: EMPTY
3084: LIST
3085: LIST
3086: LIST
3087: LIST
3088: PUSH
3089: EMPTY
3090: LIST
3091: ADD
3092: ST_TO_ADDR
// for i := 1 to attackWave2 do
3093: LD_ADDR_VAR 0 1
3097: PUSH
3098: DOUBLE
3099: LD_INT 1
3101: DEC
3102: ST_TO_ADDR
3103: LD_EXP 11
3107: PUSH
3108: FOR_TO
3109: IFFALSE 3145
// usConstructList2 := usConstructList2 ^ [ [ us_medium_wheeled , engine_combustion , control_remote , us_rocket_launcher ] ] ;
3111: LD_ADDR_EXP 21
3115: PUSH
3116: LD_EXP 21
3120: PUSH
3121: LD_INT 2
3123: PUSH
3124: LD_INT 1
3126: PUSH
3127: LD_INT 2
3129: PUSH
3130: LD_INT 7
3132: PUSH
3133: EMPTY
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: PUSH
3139: EMPTY
3140: LIST
3141: ADD
3142: ST_TO_ADDR
3143: GO 3108
3145: POP
3146: POP
// end ;
3147: PPOPN 1
3149: END
// export function SendUsAttack2 ; var i , tmp , path , dial ; begin
3150: LD_INT 0
3152: PPUSH
3153: PPUSH
3154: PPUSH
3155: PPUSH
3156: PPUSH
// attackWave2 := Inc ( attackWave2 ) ;
3157: LD_ADDR_EXP 11
3161: PUSH
3162: LD_EXP 11
3166: PPUSH
3167: CALL 77981 0 1
3171: ST_TO_ADDR
// if attackWave2 > 9 then
3172: LD_EXP 11
3176: PUSH
3177: LD_INT 9
3179: GREATER
3180: IFFALSE 3190
// attackWave2 := 9 ;
3182: LD_ADDR_EXP 11
3186: PUSH
3187: LD_INT 9
3189: ST_TO_ADDR
// tmp := usAttackVehicles2 ;
3190: LD_ADDR_VAR 0 3
3194: PUSH
3195: LD_EXP 25
3199: ST_TO_ADDR
// usAttackVehicles2 := [ ] ;
3200: LD_ADDR_EXP 25
3204: PUSH
3205: EMPTY
3206: ST_TO_ADDR
// if IsOk ( Sylvia ) and lastRadioAttackMsg + 1 1$00 < tick then
3207: LD_EXP 4
3211: PPUSH
3212: CALL_OW 302
3216: IFFALSE 3234
3218: PUSH
3219: LD_EXP 13
3223: PUSH
3224: LD_INT 2100
3226: PLUS
3227: PUSH
3228: LD_OWVAR 1
3232: LESS
3233: AND
3234: IFFALSE 3328
// begin dial := [ DS2 , DS3 ] ;
3236: LD_ADDR_VAR 0 5
3240: PUSH
3241: LD_STRING DS2
3243: PUSH
3244: LD_STRING DS3
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_weapon , us_rocket_launcher ] ) then
3251: LD_VAR 0 3
3255: PPUSH
3256: LD_INT 34
3258: PUSH
3259: LD_INT 7
3261: PUSH
3262: EMPTY
3263: LIST
3264: LIST
3265: PPUSH
3266: CALL_OW 72
3270: IFFALSE 3290
// dial := Join ( dial , DS6 ) ;
3272: LD_ADDR_VAR 0 5
3276: PUSH
3277: LD_VAR 0 5
3281: PPUSH
3282: LD_STRING DS6
3284: PPUSH
3285: CALL 76608 0 2
3289: ST_TO_ADDR
// lastRadioAttackMsg := tick ;
3290: LD_ADDR_EXP 13
3294: PUSH
3295: LD_OWVAR 1
3299: ST_TO_ADDR
// SayRadio ( Sylvia , dial [ rand ( 1 , dial ) ] ) ;
3300: LD_EXP 4
3304: PPUSH
3305: LD_VAR 0 5
3309: PUSH
3310: LD_INT 1
3312: PPUSH
3313: LD_VAR 0 5
3317: PPUSH
3318: CALL_OW 12
3322: ARRAY
3323: PPUSH
3324: CALL_OW 94
// end ; path := [ [ 123 , 138 ] , [ 125 , 126 ] ] ;
3328: LD_ADDR_VAR 0 4
3332: PUSH
3333: LD_INT 123
3335: PUSH
3336: LD_INT 138
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 125
3345: PUSH
3346: LD_INT 126
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
3357: LD_INT 70
3359: PPUSH
3360: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
3364: LD_ADDR_VAR 0 3
3368: PUSH
3369: LD_VAR 0 3
3373: PPUSH
3374: LD_INT 50
3376: PUSH
3377: EMPTY
3378: LIST
3379: PPUSH
3380: CALL_OW 72
3384: ST_TO_ADDR
// for i in tmp do
3385: LD_ADDR_VAR 0 2
3389: PUSH
3390: LD_VAR 0 3
3394: PUSH
3395: FOR_IN
3396: IFFALSE 3414
// AgressiveMove ( i , path ) until not tmp ;
3398: LD_VAR 0 2
3402: PPUSH
3403: LD_VAR 0 4
3407: PPUSH
3408: CALL 79374 0 2
3412: GO 3395
3414: POP
3415: POP
3416: LD_VAR 0 3
3420: NOT
3421: IFFALSE 3357
// end ;
3423: LD_VAR 0 1
3427: RET
// every 0 0$2 trigger IsOk ( usCargo1 ) do var cr , enemyInArea ;
3428: LD_EXP 26
3432: PPUSH
3433: CALL_OW 302
3437: IFFALSE 3708
3439: GO 3441
3441: DISABLE
3442: LD_INT 0
3444: PPUSH
3445: PPUSH
// begin enable ;
3446: ENABLE
// enemyInArea := FilterUnitsInArea ( amCrates1Area , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
3447: LD_ADDR_VAR 0 2
3451: PUSH
3452: LD_INT 16
3454: PPUSH
3455: LD_INT 81
3457: PUSH
3458: LD_INT 1
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: PUSH
3465: LD_INT 50
3467: PUSH
3468: EMPTY
3469: LIST
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PPUSH
3475: CALL_OW 70
3479: ST_TO_ADDR
// cr := GetListOfCratesInArea ( amCrates1Area ) ;
3480: LD_ADDR_VAR 0 1
3484: PUSH
3485: LD_INT 16
3487: PPUSH
3488: CALL_OW 435
3492: ST_TO_ADDR
// if GetFuel ( usCargo1 ) < 10 and not See ( 3 , usCargo1 ) then
3493: LD_EXP 26
3497: PPUSH
3498: CALL_OW 261
3502: PUSH
3503: LD_INT 10
3505: LESS
3506: IFFALSE 3523
3508: PUSH
3509: LD_INT 3
3511: PPUSH
3512: LD_EXP 26
3516: PPUSH
3517: CALL_OW 292
3521: NOT
3522: AND
3523: IFFALSE 3537
// SetFuel ( usCargo1 , 100 ) ;
3525: LD_EXP 26
3529: PPUSH
3530: LD_INT 100
3532: PPUSH
3533: CALL_OW 240
// if not HasTask ( usCargo1 ) and GetCargo ( usCargo1 , mat_cans ) < 100 and not enemyInArea then
3537: LD_EXP 26
3541: PPUSH
3542: CALL_OW 314
3546: NOT
3547: IFFALSE 3567
3549: PUSH
3550: LD_EXP 26
3554: PPUSH
3555: LD_INT 1
3557: PPUSH
3558: CALL_OW 289
3562: PUSH
3563: LD_INT 100
3565: LESS
3566: AND
3567: IFFALSE 3576
3569: PUSH
3570: LD_VAR 0 2
3574: NOT
3575: AND
3576: IFFALSE 3642
// begin if cr then
3578: LD_VAR 0 1
3582: IFFALSE 3613
// ComCollect ( usCargo1 , cr [ 1 ] , cr [ 2 ] ) else
3584: LD_EXP 26
3588: PPUSH
3589: LD_VAR 0 1
3593: PUSH
3594: LD_INT 1
3596: ARRAY
3597: PPUSH
3598: LD_VAR 0 1
3602: PUSH
3603: LD_INT 2
3605: ARRAY
3606: PPUSH
3607: CALL_OW 117
3611: GO 3640
// if not IsInArea ( usCargo1 , amCrates1Area ) then
3613: LD_EXP 26
3617: PPUSH
3618: LD_INT 16
3620: PPUSH
3621: CALL_OW 308
3625: NOT
3626: IFFALSE 3640
// ComMoveToArea ( usCargo1 , amCrates1Area ) ;
3628: LD_EXP 26
3632: PPUSH
3633: LD_INT 16
3635: PPUSH
3636: CALL_OW 113
// exit ;
3640: GO 3708
// end ; if enemyInArea and not IsInArea ( usCargo1 , americanBaseNorthArea ) then
3642: LD_VAR 0 2
3646: IFFALSE 3663
3648: PUSH
3649: LD_EXP 26
3653: PPUSH
3654: LD_INT 10
3656: PPUSH
3657: CALL_OW 308
3661: NOT
3662: AND
3663: IFFALSE 3682
// ComMoveXY ( usCargo1 , 21 , 8 ) else
3665: LD_EXP 26
3669: PPUSH
3670: LD_INT 21
3672: PPUSH
3673: LD_INT 8
3675: PPUSH
3676: CALL_OW 111
3680: GO 3708
// if GetCargo ( usCargo1 , mat_cans ) then
3682: LD_EXP 26
3686: PPUSH
3687: LD_INT 1
3689: PPUSH
3690: CALL_OW 289
3694: IFFALSE 3708
// ComGive ( usCargo1 , usDep1 ) ;
3696: LD_EXP 26
3700: PPUSH
3701: LD_INT 9
3703: PPUSH
3704: CALL_OW 161
// end ;
3708: PPOPN 2
3710: END
// every 0 0$2 trigger IsOk ( usCargo2 ) do var cr , enemyInArea ;
3711: LD_EXP 27
3715: PPUSH
3716: CALL_OW 302
3720: IFFALSE 3991
3722: GO 3724
3724: DISABLE
3725: LD_INT 0
3727: PPUSH
3728: PPUSH
// begin enable ;
3729: ENABLE
// enemyInArea := FilterUnitsInArea ( amCrates2Area , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
3730: LD_ADDR_VAR 0 2
3734: PUSH
3735: LD_INT 17
3737: PPUSH
3738: LD_INT 81
3740: PUSH
3741: LD_INT 1
3743: PUSH
3744: EMPTY
3745: LIST
3746: LIST
3747: PUSH
3748: LD_INT 50
3750: PUSH
3751: EMPTY
3752: LIST
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: PPUSH
3758: CALL_OW 70
3762: ST_TO_ADDR
// cr := GetListOfCratesInArea ( amCrates2Area ) ;
3763: LD_ADDR_VAR 0 1
3767: PUSH
3768: LD_INT 17
3770: PPUSH
3771: CALL_OW 435
3775: ST_TO_ADDR
// if GetFuel ( usCargo2 ) < 10 and not See ( 3 , usCargo2 ) then
3776: LD_EXP 27
3780: PPUSH
3781: CALL_OW 261
3785: PUSH
3786: LD_INT 10
3788: LESS
3789: IFFALSE 3806
3791: PUSH
3792: LD_INT 3
3794: PPUSH
3795: LD_EXP 27
3799: PPUSH
3800: CALL_OW 292
3804: NOT
3805: AND
3806: IFFALSE 3820
// SetFuel ( usCargo2 , 100 ) ;
3808: LD_EXP 27
3812: PPUSH
3813: LD_INT 100
3815: PPUSH
3816: CALL_OW 240
// if not HasTask ( usCargo2 ) and GetCargo ( usCargo2 , mat_cans ) < 100 and not enemyInArea then
3820: LD_EXP 27
3824: PPUSH
3825: CALL_OW 314
3829: NOT
3830: IFFALSE 3850
3832: PUSH
3833: LD_EXP 27
3837: PPUSH
3838: LD_INT 1
3840: PPUSH
3841: CALL_OW 289
3845: PUSH
3846: LD_INT 100
3848: LESS
3849: AND
3850: IFFALSE 3859
3852: PUSH
3853: LD_VAR 0 2
3857: NOT
3858: AND
3859: IFFALSE 3925
// begin if cr then
3861: LD_VAR 0 1
3865: IFFALSE 3896
// ComCollect ( usCargo2 , cr [ 1 ] , cr [ 2 ] ) else
3867: LD_EXP 27
3871: PPUSH
3872: LD_VAR 0 1
3876: PUSH
3877: LD_INT 1
3879: ARRAY
3880: PPUSH
3881: LD_VAR 0 1
3885: PUSH
3886: LD_INT 2
3888: ARRAY
3889: PPUSH
3890: CALL_OW 117
3894: GO 3923
// if not IsInArea ( usCargo2 , amCrates2Area ) then
3896: LD_EXP 27
3900: PPUSH
3901: LD_INT 17
3903: PPUSH
3904: CALL_OW 308
3908: NOT
3909: IFFALSE 3923
// ComMoveToArea ( usCargo2 , amCrates2Area ) ;
3911: LD_EXP 27
3915: PPUSH
3916: LD_INT 17
3918: PPUSH
3919: CALL_OW 113
// exit ;
3923: GO 3991
// end ; if enemyInArea and not IsInArea ( usCargo2 , americanBaseSouthArea ) then
3925: LD_VAR 0 2
3929: IFFALSE 3946
3931: PUSH
3932: LD_EXP 27
3936: PPUSH
3937: LD_INT 11
3939: PPUSH
3940: CALL_OW 308
3944: NOT
3945: AND
3946: IFFALSE 3965
// ComMoveXY ( usCargo2 , 85 , 153 ) else
3948: LD_EXP 27
3952: PPUSH
3953: LD_INT 85
3955: PPUSH
3956: LD_INT 153
3958: PPUSH
3959: CALL_OW 111
3963: GO 3991
// if GetCargo ( usCargo2 , mat_cans ) then
3965: LD_EXP 27
3969: PPUSH
3970: LD_INT 1
3972: PPUSH
3973: CALL_OW 289
3977: IFFALSE 3991
// ComGive ( usCargo2 , usDep2 ) ;
3979: LD_EXP 27
3983: PPUSH
3984: LD_INT 40
3986: PPUSH
3987: CALL_OW 161
// end ; end_of_file
3991: PPOPN 2
3993: END
// export function PrepareAttack ( area , n ) ; var i , un ; begin
3994: LD_INT 0
3996: PPUSH
3997: PPUSH
3998: PPUSH
// for i := 1 to n do
3999: LD_ADDR_VAR 0 4
4003: PUSH
4004: DOUBLE
4005: LD_INT 1
4007: DEC
4008: ST_TO_ADDR
4009: LD_VAR 0 2
4013: PUSH
4014: FOR_TO
4015: IFFALSE 4278
// begin uc_side := 6 ;
4017: LD_ADDR_OWVAR 20
4021: PUSH
4022: LD_INT 6
4024: ST_TO_ADDR
// uc_nation := 3 ;
4025: LD_ADDR_OWVAR 21
4029: PUSH
4030: LD_INT 3
4032: ST_TO_ADDR
// vc_chassis := [ ru_heavy_wheeled , ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 3 ) ] ;
4033: LD_ADDR_OWVAR 37
4037: PUSH
4038: LD_INT 23
4040: PUSH
4041: LD_INT 22
4043: PUSH
4044: LD_INT 23
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: LIST
4051: PUSH
4052: LD_INT 1
4054: PPUSH
4055: LD_INT 3
4057: PPUSH
4058: CALL_OW 12
4062: ARRAY
4063: ST_TO_ADDR
// vc_control := control_computer ;
4064: LD_ADDR_OWVAR 38
4068: PUSH
4069: LD_INT 3
4071: ST_TO_ADDR
// vc_engine := engine_combustion ;
4072: LD_ADDR_OWVAR 39
4076: PUSH
4077: LD_INT 1
4079: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , 3 ) ] ;
4080: LD_ADDR_OWVAR 40
4084: PUSH
4085: LD_INT 43
4087: PUSH
4088: LD_INT 44
4090: PUSH
4091: LD_INT 46
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: LIST
4098: PUSH
4099: LD_INT 1
4101: PPUSH
4102: LD_INT 3
4104: PPUSH
4105: CALL_OW 12
4109: ARRAY
4110: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4111: LD_OWVAR 40
4115: PUSH
4116: LD_INT 46
4118: EQUAL
4119: IFFALSE 4129
// vc_chassis := ru_heavy_wheeled ;
4121: LD_ADDR_OWVAR 37
4125: PUSH
4126: LD_INT 23
4128: ST_TO_ADDR
// vc_fuel_battery := 80 ;
4129: LD_ADDR_OWVAR 41
4133: PUSH
4134: LD_INT 80
4136: ST_TO_ADDR
// un := CreateVehicle ;
4137: LD_ADDR_VAR 0 5
4141: PUSH
4142: CALL_OW 45
4146: ST_TO_ADDR
// case area of eastArr :
4147: LD_VAR 0 1
4151: PUSH
4152: LD_INT 7
4154: DOUBLE
4155: EQUAL
4156: IFTRUE 4160
4158: GO 4216
4160: POP
// begin SetDir ( un , 4 ) ;
4161: LD_VAR 0 5
4165: PPUSH
4166: LD_INT 4
4168: PPUSH
4169: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
4173: LD_INT 35
4175: PPUSH
4176: CALL_OW 67
// until PlaceUnitArea ( un , area , false ) ;
4180: LD_VAR 0 5
4184: PPUSH
4185: LD_VAR 0 1
4189: PPUSH
4190: LD_INT 0
4192: PPUSH
4193: CALL_OW 49
4197: IFFALSE 4173
// ComMoveXY ( un , 79 , 33 ) ;
4199: LD_VAR 0 5
4203: PPUSH
4204: LD_INT 79
4206: PPUSH
4207: LD_INT 33
4209: PPUSH
4210: CALL_OW 111
// end ; southArr :
4214: GO 4269
4216: LD_INT 8
4218: DOUBLE
4219: EQUAL
4220: IFTRUE 4224
4222: GO 4268
4224: POP
// begin repeat wait ( 0 0$1 ) ;
4225: LD_INT 35
4227: PPUSH
4228: CALL_OW 67
// until PlaceUnitArea ( un , area , false ) ;
4232: LD_VAR 0 5
4236: PPUSH
4237: LD_VAR 0 1
4241: PPUSH
4242: LD_INT 0
4244: PPUSH
4245: CALL_OW 49
4249: IFFALSE 4225
// ComMoveXY ( un , 131 , 148 ) ;
4251: LD_VAR 0 5
4255: PPUSH
4256: LD_INT 131
4258: PPUSH
4259: LD_INT 148
4261: PPUSH
4262: CALL_OW 111
// end ; end ;
4266: GO 4269
4268: POP
// wait ( 0 0$02 ) ;
4269: LD_INT 70
4271: PPUSH
4272: CALL_OW 67
// end ;
4276: GO 4014
4278: POP
4279: POP
// end ;
4280: LD_VAR 0 3
4284: RET
// export function PrepareConvoy ( area , n ) ; var i , un ; begin
4285: LD_INT 0
4287: PPUSH
4288: PPUSH
4289: PPUSH
// for i := 1 to n do
4290: LD_ADDR_VAR 0 4
4294: PUSH
4295: DOUBLE
4296: LD_INT 1
4298: DEC
4299: ST_TO_ADDR
4300: LD_VAR 0 2
4304: PUSH
4305: FOR_TO
4306: IFFALSE 4532
// begin uc_side := 6 ;
4308: LD_ADDR_OWVAR 20
4312: PUSH
4313: LD_INT 6
4315: ST_TO_ADDR
// uc_nation := 3 ;
4316: LD_ADDR_OWVAR 21
4320: PUSH
4321: LD_INT 3
4323: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
4324: LD_INT 0
4326: PPUSH
4327: LD_INT 3
4329: PPUSH
4330: LD_INT 4
4332: PPUSH
4333: CALL_OW 380
// vc_chassis := ru_medium_tracked ;
4337: LD_ADDR_OWVAR 37
4341: PUSH
4342: LD_INT 22
4344: ST_TO_ADDR
// vc_control := control_manual ;
4345: LD_ADDR_OWVAR 38
4349: PUSH
4350: LD_INT 1
4352: ST_TO_ADDR
// vc_engine := engine_combustion ;
4353: LD_ADDR_OWVAR 39
4357: PUSH
4358: LD_INT 1
4360: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
4361: LD_ADDR_OWVAR 40
4365: PUSH
4366: LD_INT 51
4368: ST_TO_ADDR
// vc_fuel_battery := 50 ;
4369: LD_ADDR_OWVAR 41
4373: PUSH
4374: LD_INT 50
4376: ST_TO_ADDR
// un := CreateVehicle ;
4377: LD_ADDR_VAR 0 5
4381: PUSH
4382: CALL_OW 45
4386: ST_TO_ADDR
// case area of eastArr :
4387: LD_VAR 0 1
4391: PUSH
4392: LD_INT 7
4394: DOUBLE
4395: EQUAL
4396: IFTRUE 4400
4398: GO 4415
4400: POP
// SetDir ( un , 4 ) ; southArr :
4401: LD_VAR 0 5
4405: PPUSH
4406: LD_INT 4
4408: PPUSH
4409: CALL_OW 233
4413: GO 4439
4415: LD_INT 8
4417: DOUBLE
4418: EQUAL
4419: IFTRUE 4423
4421: GO 4438
4423: POP
// SetDir ( un , 5 ) ; end ;
4424: LD_VAR 0 5
4428: PPUSH
4429: LD_INT 5
4431: PPUSH
4432: CALL_OW 233
4436: GO 4439
4438: POP
// PlaceUnitArea ( un , area , false ) ;
4439: LD_VAR 0 5
4443: PPUSH
4444: LD_VAR 0 1
4448: PPUSH
4449: LD_INT 0
4451: PPUSH
4452: CALL_OW 49
// PlaceHumanInUnit ( CreateHuman , un ) ;
4456: CALL_OW 44
4460: PPUSH
4461: LD_VAR 0 5
4465: PPUSH
4466: CALL_OW 52
// SetCargo ( un , mat_cans , 100 ) ;
4470: LD_VAR 0 5
4474: PPUSH
4475: LD_INT 1
4477: PPUSH
4478: LD_INT 100
4480: PPUSH
4481: CALL_OW 290
// ComMoveXY ( un , 106 , 88 ) ;
4485: LD_VAR 0 5
4489: PPUSH
4490: LD_INT 106
4492: PPUSH
4493: LD_INT 88
4495: PPUSH
4496: CALL_OW 111
// AddComUnload ( un ) ;
4500: LD_VAR 0 5
4504: PPUSH
4505: CALL_OW 219
// AddComMoveToArea ( un , area ) ;
4509: LD_VAR 0 5
4513: PPUSH
4514: LD_VAR 0 1
4518: PPUSH
4519: CALL_OW 173
// wait ( 0 0$02 ) ;
4523: LD_INT 70
4525: PPUSH
4526: CALL_OW 67
// end ;
4530: GO 4305
4532: POP
4533: POP
// wait ( 0 0$05 ) ;
4534: LD_INT 175
4536: PPUSH
4537: CALL_OW 67
// while ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) ) do
4541: LD_INT 22
4543: PUSH
4544: LD_INT 6
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PUSH
4551: LD_INT 34
4553: PUSH
4554: LD_INT 51
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PUSH
4561: EMPTY
4562: LIST
4563: LIST
4564: PPUSH
4565: CALL_OW 69
4569: IFFALSE 4774
// begin wait ( 0 0$01 ) ;
4571: LD_INT 35
4573: PPUSH
4574: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) do
4578: LD_ADDR_VAR 0 4
4582: PUSH
4583: LD_INT 22
4585: PUSH
4586: LD_INT 6
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: PUSH
4593: LD_INT 34
4595: PUSH
4596: LD_INT 51
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PPUSH
4607: CALL_OW 69
4611: PUSH
4612: FOR_IN
4613: IFFALSE 4770
// begin if IsInArea ( i , playerBaseArea ) and GetSex ( IsDrivenBy ( i ) ) = sex_male and dialogTrans then
4615: LD_VAR 0 4
4619: PPUSH
4620: LD_INT 2
4622: PPUSH
4623: CALL_OW 308
4627: IFFALSE 4649
4629: PUSH
4630: LD_VAR 0 4
4634: PPUSH
4635: CALL_OW 311
4639: PPUSH
4640: CALL_OW 258
4644: PUSH
4645: LD_INT 1
4647: EQUAL
4648: AND
4649: IFFALSE 4657
4651: PUSH
4652: LD_EXP 5
4656: AND
4657: IFFALSE 4684
// begin Say ( IsDrivenBy ( i ) , Dtran ) ;
4659: LD_VAR 0 4
4663: PPUSH
4664: CALL_OW 311
4668: PPUSH
4669: LD_STRING Dtran
4671: PPUSH
4672: CALL_OW 88
// dialogTrans := false ;
4676: LD_ADDR_EXP 5
4680: PUSH
4681: LD_INT 0
4683: ST_TO_ADDR
// end ; if IsIdle ( i ) then
4684: LD_VAR 0 4
4688: PPUSH
4689: CALL_OW 316
4693: IFFALSE 4709
// ComMoveToArea ( i , area ) ;
4695: LD_VAR 0 4
4699: PPUSH
4700: LD_VAR 0 1
4704: PPUSH
4705: CALL_OW 113
// if IsInArea ( i , area ) and GetCargo ( i , mat_cans ) = 0 then
4709: LD_VAR 0 4
4713: PPUSH
4714: LD_VAR 0 1
4718: PPUSH
4719: CALL_OW 308
4723: IFFALSE 4743
4725: PUSH
4726: LD_VAR 0 4
4730: PPUSH
4731: LD_INT 1
4733: PPUSH
4734: CALL_OW 289
4738: PUSH
4739: LD_INT 0
4741: EQUAL
4742: AND
4743: IFFALSE 4768
// begin RemoveUnit ( IsDrivenBy ( i ) ) ;
4745: LD_VAR 0 4
4749: PPUSH
4750: CALL_OW 311
4754: PPUSH
4755: CALL_OW 64
// RemoveUnit ( i ) ;
4759: LD_VAR 0 4
4763: PPUSH
4764: CALL_OW 64
// end ; end ;
4768: GO 4612
4770: POP
4771: POP
// end ;
4772: GO 4541
// end ;
4774: LD_VAR 0 3
4778: RET
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) do var i , tmp ;
4779: LD_INT 22
4781: PUSH
4782: LD_INT 6
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PUSH
4789: LD_INT 21
4791: PUSH
4792: LD_INT 2
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PUSH
4799: LD_INT 3
4801: PUSH
4802: LD_INT 34
4804: PUSH
4805: LD_INT 51
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: EMPTY
4817: LIST
4818: LIST
4819: LIST
4820: PPUSH
4821: CALL_OW 69
4825: IFFALSE 4988
4827: GO 4829
4829: DISABLE
4830: LD_INT 0
4832: PPUSH
4833: PPUSH
// begin repeat wait ( 0 0$3 ) ;
4834: LD_INT 105
4836: PPUSH
4837: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) ;
4841: LD_ADDR_VAR 0 2
4845: PUSH
4846: LD_INT 22
4848: PUSH
4849: LD_INT 6
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: LD_INT 21
4858: PUSH
4859: LD_INT 2
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: PUSH
4866: LD_INT 50
4868: PUSH
4869: EMPTY
4870: LIST
4871: PUSH
4872: LD_INT 3
4874: PUSH
4875: LD_INT 34
4877: PUSH
4878: LD_INT 51
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: PPUSH
4895: CALL_OW 69
4899: ST_TO_ADDR
// for i in tmp do
4900: LD_ADDR_VAR 0 1
4904: PUSH
4905: LD_VAR 0 2
4909: PUSH
4910: FOR_IN
4911: IFFALSE 4978
// if not HasTask ( i ) and GetLives ( i ) > 250 then
4913: LD_VAR 0 1
4917: PPUSH
4918: CALL_OW 314
4922: NOT
4923: IFFALSE 4940
4925: PUSH
4926: LD_VAR 0 1
4930: PPUSH
4931: CALL_OW 256
4935: PUSH
4936: LD_INT 250
4938: GREATER
4939: AND
4940: IFFALSE 4976
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 6 ] ) , i ) ) ;
4942: LD_VAR 0 1
4946: PPUSH
4947: LD_INT 81
4949: PUSH
4950: LD_INT 6
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: PPUSH
4957: CALL_OW 69
4961: PPUSH
4962: LD_VAR 0 1
4966: PPUSH
4967: CALL_OW 74
4971: PPUSH
4972: CALL_OW 115
4976: GO 4910
4978: POP
4979: POP
// until not tmp ;
4980: LD_VAR 0 2
4984: NOT
4985: IFFALSE 4834
// enable ;
4987: ENABLE
// end ; end_of_file
4988: PPOPN 2
4990: END
// export Commanders , Player , Gladkov , Davidov , Gorki , Stolypin , playerSquad , playerCom ; export function InitCommanders ( commander ) ; var i , skill , tmp , team , veh ; begin
4991: LD_INT 0
4993: PPUSH
4994: PPUSH
4995: PPUSH
4996: PPUSH
4997: PPUSH
4998: PPUSH
// uc_side := your_side ;
4999: LD_ADDR_OWVAR 20
5003: PUSH
5004: LD_OWVAR 2
5008: ST_TO_ADDR
// uc_nation := nation_russian ;
5009: LD_ADDR_OWVAR 21
5013: PUSH
5014: LD_INT 3
5016: ST_TO_ADDR
// Gladkov := NewCharacter ( Gladkov ) ;
5017: LD_ADDR_EXP 30
5021: PUSH
5022: LD_STRING Gladkov
5024: PPUSH
5025: CALL_OW 25
5029: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
5030: LD_ADDR_EXP 31
5034: PUSH
5035: LD_STRING Davidov
5037: PPUSH
5038: CALL_OW 25
5042: ST_TO_ADDR
// Gorki := NewCharacter ( Burlak ) ;
5043: LD_ADDR_EXP 32
5047: PUSH
5048: LD_STRING Burlak
5050: PPUSH
5051: CALL_OW 25
5055: ST_TO_ADDR
// Stolypin := NewCharacter ( Stolypin ) ;
5056: LD_ADDR_EXP 33
5060: PUSH
5061: LD_STRING Stolypin
5063: PPUSH
5064: CALL_OW 25
5068: ST_TO_ADDR
// commanders := [ Gladkov , Davidov , Gorki , Stolypin ] ;
5069: LD_ADDR_EXP 28
5073: PUSH
5074: LD_EXP 30
5078: PUSH
5079: LD_EXP 31
5083: PUSH
5084: LD_EXP 32
5088: PUSH
5089: LD_EXP 33
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: ST_TO_ADDR
// playerCom := commanders [ commander ] ;
5100: LD_ADDR_EXP 35
5104: PUSH
5105: LD_EXP 28
5109: PUSH
5110: LD_VAR 0 1
5114: ARRAY
5115: ST_TO_ADDR
// team := [ ] ;
5116: LD_ADDR_VAR 0 6
5120: PUSH
5121: EMPTY
5122: ST_TO_ADDR
// skill := [ 4 , 3 , 3 ] [ Difficulty ] ;
5123: LD_ADDR_VAR 0 4
5127: PUSH
5128: LD_INT 4
5130: PUSH
5131: LD_INT 3
5133: PUSH
5134: LD_INT 3
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: LIST
5141: PUSH
5142: LD_OWVAR 67
5146: ARRAY
5147: ST_TO_ADDR
// uc_side := 3 ;
5148: LD_ADDR_OWVAR 20
5152: PUSH
5153: LD_INT 3
5155: ST_TO_ADDR
// uc_nation := 3 ;
5156: LD_ADDR_OWVAR 21
5160: PUSH
5161: LD_INT 3
5163: ST_TO_ADDR
// hc_gallery :=  ;
5164: LD_ADDR_OWVAR 33
5168: PUSH
5169: LD_STRING 
5171: ST_TO_ADDR
// hc_name :=  ;
5172: LD_ADDR_OWVAR 26
5176: PUSH
5177: LD_STRING 
5179: ST_TO_ADDR
// hc_importance := 0 ;
5180: LD_ADDR_OWVAR 32
5184: PUSH
5185: LD_INT 0
5187: ST_TO_ADDR
// case playerCom of Gladkov :
5188: LD_EXP 35
5192: PUSH
5193: LD_EXP 30
5197: DOUBLE
5198: EQUAL
5199: IFTRUE 5203
5201: GO 5356
5203: POP
// begin for i := 1 to 6 do
5204: LD_ADDR_VAR 0 3
5208: PUSH
5209: DOUBLE
5210: LD_INT 1
5212: DEC
5213: ST_TO_ADDR
5214: LD_INT 6
5216: PUSH
5217: FOR_TO
5218: IFFALSE 5261
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
5220: LD_INT 0
5222: PPUSH
5223: LD_INT 1
5225: PPUSH
5226: LD_VAR 0 4
5230: PUSH
5231: LD_INT 1
5233: PLUS
5234: PPUSH
5235: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
5239: LD_ADDR_VAR 0 6
5243: PUSH
5244: LD_VAR 0 6
5248: PPUSH
5249: CALL_OW 44
5253: PPUSH
5254: CALL 76608 0 2
5258: ST_TO_ADDR
// end ;
5259: GO 5217
5261: POP
5262: POP
// for i := 1 to 8 do
5263: LD_ADDR_VAR 0 3
5267: PUSH
5268: DOUBLE
5269: LD_INT 1
5271: DEC
5272: ST_TO_ADDR
5273: LD_INT 8
5275: PUSH
5276: FOR_TO
5277: IFFALSE 5326
// begin PrepareHuman ( false , ( i mod 3 ) + 2 , skill ) ;
5279: LD_INT 0
5281: PPUSH
5282: LD_VAR 0 3
5286: PUSH
5287: LD_INT 3
5289: MOD
5290: PUSH
5291: LD_INT 2
5293: PLUS
5294: PPUSH
5295: LD_VAR 0 4
5299: PPUSH
5300: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
5304: LD_ADDR_VAR 0 6
5308: PUSH
5309: LD_VAR 0 6
5313: PPUSH
5314: CALL_OW 44
5318: PPUSH
5319: CALL 76608 0 2
5323: ST_TO_ADDR
// end ;
5324: GO 5276
5326: POP
5327: POP
// SetTech ( tech_bazooka , 3 , state_enabled ) ;
5328: LD_INT 44
5330: PPUSH
5331: LD_INT 3
5333: PPUSH
5334: LD_INT 1
5336: PPUSH
5337: CALL_OW 322
// SetTech ( tech_advmet , 3 , state_enabled ) ;
5341: LD_INT 34
5343: PPUSH
5344: LD_INT 3
5346: PPUSH
5347: LD_INT 1
5349: PPUSH
5350: CALL_OW 322
// end ; Davidov :
5354: GO 6251
5356: LD_EXP 31
5360: DOUBLE
5361: EQUAL
5362: IFTRUE 5366
5364: GO 5667
5366: POP
// begin for i := 1 to 6 do
5367: LD_ADDR_VAR 0 3
5371: PUSH
5372: DOUBLE
5373: LD_INT 1
5375: DEC
5376: ST_TO_ADDR
5377: LD_INT 6
5379: PUSH
5380: FOR_TO
5381: IFFALSE 5424
// begin PrepareHuman ( false , 4 , skill + 1 ) ;
5383: LD_INT 0
5385: PPUSH
5386: LD_INT 4
5388: PPUSH
5389: LD_VAR 0 4
5393: PUSH
5394: LD_INT 1
5396: PLUS
5397: PPUSH
5398: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
5402: LD_ADDR_VAR 0 6
5406: PUSH
5407: LD_VAR 0 6
5411: PPUSH
5412: CALL_OW 44
5416: PPUSH
5417: CALL 76608 0 2
5421: ST_TO_ADDR
// end ;
5422: GO 5380
5424: POP
5425: POP
// for i := 1 to 8 do
5426: LD_ADDR_VAR 0 3
5430: PUSH
5431: DOUBLE
5432: LD_INT 1
5434: DEC
5435: ST_TO_ADDR
5436: LD_INT 8
5438: PUSH
5439: FOR_TO
5440: IFFALSE 5489
// begin PrepareHuman ( false , ( i mod 3 ) + 1 , skill ) ;
5442: LD_INT 0
5444: PPUSH
5445: LD_VAR 0 3
5449: PUSH
5450: LD_INT 3
5452: MOD
5453: PUSH
5454: LD_INT 1
5456: PLUS
5457: PPUSH
5458: LD_VAR 0 4
5462: PPUSH
5463: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
5467: LD_ADDR_VAR 0 6
5471: PUSH
5472: LD_VAR 0 6
5476: PPUSH
5477: CALL_OW 44
5481: PPUSH
5482: CALL 76608 0 2
5486: ST_TO_ADDR
// end ;
5487: GO 5439
5489: POP
5490: POP
// SetTech ( tech_advmet , 3 , state_enabled ) ;
5491: LD_INT 34
5493: PPUSH
5494: LD_INT 3
5496: PPUSH
5497: LD_INT 1
5499: PPUSH
5500: CALL_OW 322
// SetTech ( tech_ai , 3 , state_enabled ) ;
5504: LD_INT 32
5506: PPUSH
5507: LD_INT 3
5509: PPUSH
5510: LD_INT 1
5512: PPUSH
5513: CALL_OW 322
// SetTech ( tech_advai , 3 , state_enabled ) ;
5517: LD_INT 27
5519: PPUSH
5520: LD_INT 3
5522: PPUSH
5523: LD_INT 1
5525: PPUSH
5526: CALL_OW 322
// SetTech ( 30 , 3 , state_enabled ) ;
5530: LD_INT 30
5532: PPUSH
5533: LD_INT 3
5535: PPUSH
5536: LD_INT 1
5538: PPUSH
5539: CALL_OW 322
// SetTech ( 63 , 3 , state_enabled ) ;
5543: LD_INT 63
5545: PPUSH
5546: LD_INT 3
5548: PPUSH
5549: LD_INT 1
5551: PPUSH
5552: CALL_OW 322
// SetTech ( tech_comp1 , 3 , state_enabled ) ;
5556: LD_INT 57
5558: PPUSH
5559: LD_INT 3
5561: PPUSH
5562: LD_INT 1
5564: PPUSH
5565: CALL_OW 322
// SetTech ( tech_comp2 , 3 , state_enabled ) ;
5569: LD_INT 58
5571: PPUSH
5572: LD_INT 3
5574: PPUSH
5575: LD_INT 1
5577: PPUSH
5578: CALL_OW 322
// SetRestrict ( b_lab_full , 3 , state_enabled ) ;
5582: LD_INT 8
5584: PPUSH
5585: LD_INT 3
5587: PPUSH
5588: LD_INT 1
5590: PPUSH
5591: CALL_OW 324
// SetRestrict ( b_lab_computer , 3 , state_enabled ) ;
5595: LD_INT 12
5597: PPUSH
5598: LD_INT 3
5600: PPUSH
5601: LD_INT 1
5603: PPUSH
5604: CALL_OW 324
// SetRestrict ( b_lab_spacetime , 3 , state_enabled ) ;
5608: LD_INT 14
5610: PPUSH
5611: LD_INT 3
5613: PPUSH
5614: LD_INT 1
5616: PPUSH
5617: CALL_OW 324
// SetRestrict ( b_ext_computer , 3 , state_enabled ) ;
5621: LD_INT 24
5623: PPUSH
5624: LD_INT 3
5626: PPUSH
5627: LD_INT 1
5629: PPUSH
5630: CALL_OW 324
// SetRestrict ( b_turret , 3 , state_enabled ) ;
5634: LD_INT 33
5636: PPUSH
5637: LD_INT 3
5639: PPUSH
5640: LD_INT 1
5642: PPUSH
5643: CALL_OW 324
// SetResourceType ( GetBase ( playerDepot ) , 3 , 20 ) ;
5647: LD_INT 1
5649: PPUSH
5650: CALL_OW 274
5654: PPUSH
5655: LD_INT 3
5657: PPUSH
5658: LD_INT 20
5660: PPUSH
5661: CALL_OW 277
// end ; Gorki :
5665: GO 6251
5667: LD_EXP 32
5671: DOUBLE
5672: EQUAL
5673: IFTRUE 5677
5675: GO 5936
5677: POP
// begin for i := 1 to 6 do
5678: LD_ADDR_VAR 0 3
5682: PUSH
5683: DOUBLE
5684: LD_INT 1
5686: DEC
5687: ST_TO_ADDR
5688: LD_INT 6
5690: PUSH
5691: FOR_TO
5692: IFFALSE 5735
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
5694: LD_INT 0
5696: PPUSH
5697: LD_INT 3
5699: PPUSH
5700: LD_VAR 0 4
5704: PUSH
5705: LD_INT 1
5707: PLUS
5708: PPUSH
5709: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
5713: LD_ADDR_VAR 0 6
5717: PUSH
5718: LD_VAR 0 6
5722: PPUSH
5723: CALL_OW 44
5727: PPUSH
5728: CALL 76608 0 2
5732: ST_TO_ADDR
// end ;
5733: GO 5691
5735: POP
5736: POP
// for i := 1 to 8 do
5737: LD_ADDR_VAR 0 3
5741: PUSH
5742: DOUBLE
5743: LD_INT 1
5745: DEC
5746: ST_TO_ADDR
5747: LD_INT 8
5749: PUSH
5750: FOR_TO
5751: IFFALSE 5813
// begin PrepareHuman ( false , [ 1 , 2 , 4 ] [ Rand ( 1 , 3 ) ] , skill ) ;
5753: LD_INT 0
5755: PPUSH
5756: LD_INT 1
5758: PUSH
5759: LD_INT 2
5761: PUSH
5762: LD_INT 4
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: LIST
5769: PUSH
5770: LD_INT 1
5772: PPUSH
5773: LD_INT 3
5775: PPUSH
5776: CALL_OW 12
5780: ARRAY
5781: PPUSH
5782: LD_VAR 0 4
5786: PPUSH
5787: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
5791: LD_ADDR_VAR 0 6
5795: PUSH
5796: LD_VAR 0 6
5800: PPUSH
5801: CALL_OW 44
5805: PPUSH
5806: CALL 76608 0 2
5810: ST_TO_ADDR
// end ;
5811: GO 5750
5813: POP
5814: POP
// SetTech ( tech_rocket , 3 , state_enabled ) ;
5815: LD_INT 40
5817: PPUSH
5818: LD_INT 3
5820: PPUSH
5821: LD_INT 1
5823: PPUSH
5824: CALL_OW 322
// SetTech ( tech_advmet , 3 , state_enabled ) ;
5828: LD_INT 34
5830: PPUSH
5831: LD_INT 3
5833: PPUSH
5834: LD_INT 1
5836: PPUSH
5837: CALL_OW 322
// SetRestrict ( b_ext_rocket , 3 , state_enabled ) ;
5841: LD_INT 18
5843: PPUSH
5844: LD_INT 3
5846: PPUSH
5847: LD_INT 1
5849: PPUSH
5850: CALL_OW 324
// vc_chassis := ru_medium_tracked ;
5854: LD_ADDR_OWVAR 37
5858: PUSH
5859: LD_INT 22
5861: ST_TO_ADDR
// vc_engine := engine_combustion ;
5862: LD_ADDR_OWVAR 39
5866: PUSH
5867: LD_INT 1
5869: ST_TO_ADDR
// vc_control := control_manual ;
5870: LD_ADDR_OWVAR 38
5874: PUSH
5875: LD_INT 1
5877: ST_TO_ADDR
// vc_weapon := ru_rocket_launcher ;
5878: LD_ADDR_OWVAR 40
5882: PUSH
5883: LD_INT 45
5885: ST_TO_ADDR
// vc_fuel_battery := 50 ;
5886: LD_ADDR_OWVAR 41
5890: PUSH
5891: LD_INT 50
5893: ST_TO_ADDR
// veh := CreateVehicle ;
5894: LD_ADDR_VAR 0 7
5898: PUSH
5899: CALL_OW 45
5903: ST_TO_ADDR
// SetMark ( veh , 1 ) ;
5904: LD_VAR 0 7
5908: PPUSH
5909: LD_INT 1
5911: PPUSH
5912: CALL_OW 242
// PlaceUnitXY ( veh , 107 , 83 , false ) ;
5916: LD_VAR 0 7
5920: PPUSH
5921: LD_INT 107
5923: PPUSH
5924: LD_INT 83
5926: PPUSH
5927: LD_INT 0
5929: PPUSH
5930: CALL_OW 48
// end ; Stolypin :
5934: GO 6251
5936: LD_EXP 33
5940: DOUBLE
5941: EQUAL
5942: IFTRUE 5946
5944: GO 6250
5946: POP
// begin for i := 1 to 6 do
5947: LD_ADDR_VAR 0 3
5951: PUSH
5952: DOUBLE
5953: LD_INT 1
5955: DEC
5956: ST_TO_ADDR
5957: LD_INT 6
5959: PUSH
5960: FOR_TO
5961: IFFALSE 6004
// begin PrepareHuman ( false , 2 , skill + 1 ) ;
5963: LD_INT 0
5965: PPUSH
5966: LD_INT 2
5968: PPUSH
5969: LD_VAR 0 4
5973: PUSH
5974: LD_INT 1
5976: PLUS
5977: PPUSH
5978: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
5982: LD_ADDR_VAR 0 6
5986: PUSH
5987: LD_VAR 0 6
5991: PPUSH
5992: CALL_OW 44
5996: PPUSH
5997: CALL 76608 0 2
6001: ST_TO_ADDR
// end ;
6002: GO 5960
6004: POP
6005: POP
// for i := 1 to 8 do
6006: LD_ADDR_VAR 0 3
6010: PUSH
6011: DOUBLE
6012: LD_INT 1
6014: DEC
6015: ST_TO_ADDR
6016: LD_INT 8
6018: PUSH
6019: FOR_TO
6020: IFFALSE 6082
// begin PrepareHuman ( false , [ 1 , 3 , 4 ] [ Rand ( 1 , 3 ) ] , skill ) ;
6022: LD_INT 0
6024: PPUSH
6025: LD_INT 1
6027: PUSH
6028: LD_INT 3
6030: PUSH
6031: LD_INT 4
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: LIST
6038: PUSH
6039: LD_INT 1
6041: PPUSH
6042: LD_INT 3
6044: PPUSH
6045: CALL_OW 12
6049: ARRAY
6050: PPUSH
6051: LD_VAR 0 4
6055: PPUSH
6056: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
6060: LD_ADDR_VAR 0 6
6064: PUSH
6065: LD_VAR 0 6
6069: PPUSH
6070: CALL_OW 44
6074: PPUSH
6075: CALL 76608 0 2
6079: ST_TO_ADDR
// end ;
6080: GO 6019
6082: POP
6083: POP
// SetTech ( tech_advmet , 3 , state_enabled ) ;
6084: LD_INT 34
6086: PPUSH
6087: LD_INT 3
6089: PPUSH
6090: LD_INT 1
6092: PPUSH
6093: CALL_OW 322
// vc_chassis := ru_medium_tracked ;
6097: LD_ADDR_OWVAR 37
6101: PUSH
6102: LD_INT 22
6104: ST_TO_ADDR
// vc_engine := engine_combustion ;
6105: LD_ADDR_OWVAR 39
6109: PUSH
6110: LD_INT 1
6112: ST_TO_ADDR
// vc_control := control_manual ;
6113: LD_ADDR_OWVAR 38
6117: PUSH
6118: LD_INT 1
6120: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
6121: LD_ADDR_OWVAR 40
6125: PUSH
6126: LD_INT 51
6128: ST_TO_ADDR
// vc_fuel_battery := 30 ;
6129: LD_ADDR_OWVAR 41
6133: PUSH
6134: LD_INT 30
6136: ST_TO_ADDR
// veh := CreateVehicle ;
6137: LD_ADDR_VAR 0 7
6141: PUSH
6142: CALL_OW 45
6146: ST_TO_ADDR
// SetCargo ( veh , 1 , 100 ) ;
6147: LD_VAR 0 7
6151: PPUSH
6152: LD_INT 1
6154: PPUSH
6155: LD_INT 100
6157: PPUSH
6158: CALL_OW 290
// PlaceUnitXY ( veh , 107 , 83 , false ) ;
6162: LD_VAR 0 7
6166: PPUSH
6167: LD_INT 107
6169: PPUSH
6170: LD_INT 83
6172: PPUSH
6173: LD_INT 0
6175: PPUSH
6176: CALL_OW 48
// vc_chassis := ru_medium_tracked ;
6180: LD_ADDR_OWVAR 37
6184: PUSH
6185: LD_INT 22
6187: ST_TO_ADDR
// vc_engine := engine_combustion ;
6188: LD_ADDR_OWVAR 39
6192: PUSH
6193: LD_INT 1
6195: ST_TO_ADDR
// vc_control := control_manual ;
6196: LD_ADDR_OWVAR 38
6200: PUSH
6201: LD_INT 1
6203: ST_TO_ADDR
// vc_weapon := ru_crane ;
6204: LD_ADDR_OWVAR 40
6208: PUSH
6209: LD_INT 52
6211: ST_TO_ADDR
// vc_fuel_battery := 30 ;
6212: LD_ADDR_OWVAR 41
6216: PUSH
6217: LD_INT 30
6219: ST_TO_ADDR
// veh := CreateVehicle ;
6220: LD_ADDR_VAR 0 7
6224: PUSH
6225: CALL_OW 45
6229: ST_TO_ADDR
// PlaceUnitXY ( veh , 115 , 96 , false ) ;
6230: LD_VAR 0 7
6234: PPUSH
6235: LD_INT 115
6237: PPUSH
6238: LD_INT 96
6240: PPUSH
6241: LD_INT 0
6243: PPUSH
6244: CALL_OW 48
// end ; end ;
6248: GO 6251
6250: POP
// if isTest then
6251: LD_EXP 1
6255: IFFALSE 6277
// tmp := ShrinkArray ( team , 7 ) else
6257: LD_ADDR_VAR 0 5
6261: PUSH
6262: LD_VAR 0 6
6266: PPUSH
6267: LD_INT 7
6269: PPUSH
6270: CALL 76923 0 2
6274: ST_TO_ADDR
6275: GO 6368
// tmp := CharacterSelection ( text , [ 9 , 8 , 7 ] [ Difficulty ] , [ 9 , 8 , 7 ] [ Difficulty ] , [ sel_not_hired , sel_change_class , sel_changeable ] ^ team , [ class_soldier , class_engineer , class_mechanic , class_scientistic ] ) ;
6277: LD_ADDR_VAR 0 5
6281: PUSH
6282: LD_STRING text
6284: PPUSH
6285: LD_INT 9
6287: PUSH
6288: LD_INT 8
6290: PUSH
6291: LD_INT 7
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: LIST
6298: PUSH
6299: LD_OWVAR 67
6303: ARRAY
6304: PPUSH
6305: LD_INT 9
6307: PUSH
6308: LD_INT 8
6310: PUSH
6311: LD_INT 7
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_OWVAR 67
6323: ARRAY
6324: PPUSH
6325: LD_INT -2
6327: PUSH
6328: LD_INT -5
6330: PUSH
6331: LD_INT -3
6333: PUSH
6334: EMPTY
6335: LIST
6336: LIST
6337: LIST
6338: PUSH
6339: LD_VAR 0 6
6343: ADD
6344: PPUSH
6345: LD_INT 1
6347: PUSH
6348: LD_INT 2
6350: PUSH
6351: LD_INT 3
6353: PUSH
6354: LD_INT 4
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: PPUSH
6363: CALL_OW 42
6367: ST_TO_ADDR
// playerSquad := tmp ;
6368: LD_ADDR_EXP 34
6372: PUSH
6373: LD_VAR 0 5
6377: ST_TO_ADDR
// SetDir ( playerCom , 4 ) ;
6378: LD_EXP 35
6382: PPUSH
6383: LD_INT 4
6385: PPUSH
6386: CALL_OW 233
// PlaceUnitArea ( playerCom , eastArr , false ) ;
6390: LD_EXP 35
6394: PPUSH
6395: LD_INT 7
6397: PPUSH
6398: LD_INT 0
6400: PPUSH
6401: CALL_OW 49
// ComHold ( playerCom ) ;
6405: LD_EXP 35
6409: PPUSH
6410: CALL_OW 140
// for i := 1 to [ 5 , 4 , 4 ] [ Difficulty ] do
6414: LD_ADDR_VAR 0 3
6418: PUSH
6419: DOUBLE
6420: LD_INT 1
6422: DEC
6423: ST_TO_ADDR
6424: LD_INT 5
6426: PUSH
6427: LD_INT 4
6429: PUSH
6430: LD_INT 4
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: LIST
6437: PUSH
6438: LD_OWVAR 67
6442: ARRAY
6443: PUSH
6444: FOR_TO
6445: IFFALSE 6511
// begin uc_side := 6 ;
6447: LD_ADDR_OWVAR 20
6451: PUSH
6452: LD_INT 6
6454: ST_TO_ADDR
// uc_nation := nation_russian ;
6455: LD_ADDR_OWVAR 21
6459: PUSH
6460: LD_INT 3
6462: ST_TO_ADDR
// PrepareHuman ( false , i mod 4 + 1 , skill ) ;
6463: LD_INT 0
6465: PPUSH
6466: LD_VAR 0 3
6470: PUSH
6471: LD_INT 4
6473: MOD
6474: PUSH
6475: LD_INT 1
6477: PLUS
6478: PPUSH
6479: LD_VAR 0 4
6483: PPUSH
6484: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 104 , 88 , 3 , false ) ;
6488: CALL_OW 44
6492: PPUSH
6493: LD_INT 104
6495: PPUSH
6496: LD_INT 88
6498: PPUSH
6499: LD_INT 3
6501: PPUSH
6502: LD_INT 0
6504: PPUSH
6505: CALL_OW 50
// end ;
6509: GO 6444
6511: POP
6512: POP
// end ;
6513: LD_VAR 0 2
6517: RET
// export Popov ; export function InitAction ; var commander ; begin
6518: LD_INT 0
6520: PPUSH
6521: PPUSH
// ChangeSideFog ( 6 , 3 ) ;
6522: LD_INT 6
6524: PPUSH
6525: LD_INT 3
6527: PPUSH
6528: CALL_OW 343
// CenterNowOnXY ( 1 , 1 ) ;
6532: LD_INT 1
6534: PPUSH
6535: LD_INT 1
6537: PPUSH
6538: CALL_OW 86
// uc_side := 6 ;
6542: LD_ADDR_OWVAR 20
6546: PUSH
6547: LD_INT 6
6549: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
6550: LD_ADDR_EXP 36
6554: PUSH
6555: LD_STRING Popov
6557: PPUSH
6558: CALL_OW 25
6562: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
6563: LD_ADDR_OWVAR 67
6567: PUSH
6568: LD_INT 0
6570: PPUSH
6571: CALL_OW 426
6575: ST_TO_ADDR
// if not Difficulty then
6576: LD_OWVAR 67
6580: NOT
6581: IFFALSE 6591
// Difficulty := 2 ;
6583: LD_ADDR_OWVAR 67
6587: PUSH
6588: LD_INT 2
6590: ST_TO_ADDR
// commander := GetMultiplayerSetting ( 1 ) ;
6591: LD_ADDR_VAR 0 2
6595: PUSH
6596: LD_INT 1
6598: PPUSH
6599: CALL_OW 426
6603: ST_TO_ADDR
// if not commander then
6604: LD_VAR 0 2
6608: NOT
6609: IFFALSE 6619
// commander := 1 ;
6611: LD_ADDR_VAR 0 2
6615: PUSH
6616: LD_INT 1
6618: ST_TO_ADDR
// InitCommanders ( commander ) ;
6619: LD_VAR 0 2
6623: PPUSH
6624: CALL 4991 0 1
// end ;
6628: LD_VAR 0 1
6632: RET
// every 0 0$03 do var i ;
6633: GO 6635
6635: DISABLE
6636: LD_INT 0
6638: PPUSH
// begin repeat wait ( rand ( 1 1$25 , 3 3$00 ) ) ;
6639: LD_INT 2975
6641: PPUSH
6642: LD_INT 6300
6644: PPUSH
6645: CALL_OW 12
6649: PPUSH
6650: CALL_OW 67
// for i := 1 to 2 do
6654: LD_ADDR_VAR 0 1
6658: PUSH
6659: DOUBLE
6660: LD_INT 1
6662: DEC
6663: ST_TO_ADDR
6664: LD_INT 2
6666: PUSH
6667: FOR_TO
6668: IFFALSE 6764
// begin repeat wait ( 0 0$3 ) ;
6670: LD_INT 105
6672: PPUSH
6673: CALL_OW 67
// until PlaceUnitArea ( playerSquad [ 1 ] , eastArr , false ) ;
6677: LD_EXP 34
6681: PUSH
6682: LD_INT 1
6684: ARRAY
6685: PPUSH
6686: LD_INT 7
6688: PPUSH
6689: LD_INT 0
6691: PPUSH
6692: CALL_OW 49
6696: IFFALSE 6670
// ComMoveXY ( playerSquad [ 1 ] , 107 , 88 ) ;
6698: LD_EXP 34
6702: PUSH
6703: LD_INT 1
6705: ARRAY
6706: PPUSH
6707: LD_INT 107
6709: PPUSH
6710: LD_INT 88
6712: PPUSH
6713: CALL_OW 111
// SetSide ( playerSquad [ 1 ] , 3 ) ;
6717: LD_EXP 34
6721: PUSH
6722: LD_INT 1
6724: ARRAY
6725: PPUSH
6726: LD_INT 3
6728: PPUSH
6729: CALL_OW 235
// playerSquad := Delete ( playerSquad , 1 ) ;
6733: LD_ADDR_EXP 34
6737: PUSH
6738: LD_EXP 34
6742: PPUSH
6743: LD_INT 1
6745: PPUSH
6746: CALL_OW 3
6750: ST_TO_ADDR
// if not playerSquad then
6751: LD_EXP 34
6755: NOT
6756: IFFALSE 6762
// exit ;
6758: POP
6759: POP
6760: GO 6773
// end ;
6762: GO 6667
6764: POP
6765: POP
// until not playerSquad ;
6766: LD_EXP 34
6770: NOT
6771: IFFALSE 6639
// end ; end_of_file
6773: PPOPN 1
6775: END
// export function Action ; var i ; begin
6776: LD_INT 0
6778: PPUSH
6779: PPUSH
// if not isTest then
6780: LD_EXP 1
6784: NOT
6785: IFFALSE 6794
// Query ( task ) ;
6787: LD_STRING task
6789: PPUSH
6790: CALL_OW 97
// PlaceSeeing ( 105 , 84 , 3 , - 30 ) ;
6794: LD_INT 105
6796: PPUSH
6797: LD_INT 84
6799: PPUSH
6800: LD_INT 3
6802: PPUSH
6803: LD_INT 30
6805: NEG
6806: PPUSH
6807: CALL_OW 330
// RemoveSeeing ( 105 , 84 , 3 ) ;
6811: LD_INT 105
6813: PPUSH
6814: LD_INT 84
6816: PPUSH
6817: LD_INT 3
6819: PPUSH
6820: CALL_OW 331
// InGameOn ;
6824: CALL_OW 8
// CenterNowOnXY ( 128 , 64 ) ;
6828: LD_INT 128
6830: PPUSH
6831: LD_INT 64
6833: PPUSH
6834: CALL_OW 86
// if isTest then
6838: LD_EXP 1
6842: IFFALSE 6852
// dialogue_skipped := true ;
6844: LD_ADDR_OWVAR 59
6848: PUSH
6849: LD_INT 1
6851: ST_TO_ADDR
// SayRadio ( Popov , DR1 ) ;
6852: LD_EXP 36
6856: PPUSH
6857: LD_STRING DR1
6859: PPUSH
6860: CALL_OW 94
// SayRadio ( Popov , DR2 ) ;
6864: LD_EXP 36
6868: PPUSH
6869: LD_STRING DR2
6871: PPUSH
6872: CALL_OW 94
// SayRadio ( Popov , DR3 ) ;
6876: LD_EXP 36
6880: PPUSH
6881: LD_STRING DR3
6883: PPUSH
6884: CALL_OW 94
// InGameOff ;
6888: CALL_OW 9
// ChangeMissionObjectives ( C1 ) ;
6892: LD_STRING C1
6894: PPUSH
6895: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
6899: LD_INT 35
6901: PPUSH
6902: CALL_OW 67
// until FilterUnitsInArea ( playerBaseArea , [ f_side , 3 ] ) ;
6906: LD_INT 2
6908: PPUSH
6909: LD_INT 22
6911: PUSH
6912: LD_INT 3
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PPUSH
6919: CALL_OW 70
6923: IFFALSE 6899
// for i in FilterUnitsInArea ( playerBaseArea , [ f_side , 6 ] ) do
6925: LD_ADDR_VAR 0 2
6929: PUSH
6930: LD_INT 2
6932: PPUSH
6933: LD_INT 22
6935: PUSH
6936: LD_INT 6
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PPUSH
6943: CALL_OW 70
6947: PUSH
6948: FOR_IN
6949: IFFALSE 6965
// SetSide ( i , 3 ) ;
6951: LD_VAR 0 2
6955: PPUSH
6956: LD_INT 3
6958: PPUSH
6959: CALL_OW 235
6963: GO 6948
6965: POP
6966: POP
// if not isTest then
6967: LD_EXP 1
6971: NOT
6972: IFFALSE 6981
// Query ( support ) ;
6974: LD_STRING support
6976: PPUSH
6977: CALL_OW 97
// SetArtifactUse ( 3 , art_use_exclamation , art_instant , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ) ;
6981: LD_INT 3
6983: PPUSH
6984: LD_INT 12
6986: PPUSH
6987: LD_INT 2
6989: PPUSH
6990: LD_INT 22
6992: PUSH
6993: LD_INT 3
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: LD_INT 30
7002: PUSH
7003: LD_INT 0
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: PPUSH
7014: CALL_OW 69
7018: PUSH
7019: LD_INT 1
7021: ARRAY
7022: PPUSH
7023: CALL_OW 468
// if playerCom = Stolypin then
7027: LD_EXP 35
7031: PUSH
7032: LD_EXP 33
7036: EQUAL
7037: IFFALSE 7066
// PrepareConvoy ( eastArr , [ 3 , 3 , 2 ] [ Difficulty ] ) ;
7039: LD_INT 7
7041: PPUSH
7042: LD_INT 3
7044: PUSH
7045: LD_INT 3
7047: PUSH
7048: LD_INT 2
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: LIST
7055: PUSH
7056: LD_OWVAR 67
7060: ARRAY
7061: PPUSH
7062: CALL 4285 0 2
// end ;
7066: LD_VAR 0 1
7070: RET
// every 0 0$01 trigger tick > [ 12 12$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] do var n ;
7071: LD_OWVAR 1
7075: PUSH
7076: LD_INT 25200
7078: PUSH
7079: LD_INT 23100
7081: PUSH
7082: LD_INT 21000
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: LIST
7089: PUSH
7090: LD_OWVAR 67
7094: ARRAY
7095: GREATER
7096: IFFALSE 7225
7098: GO 7100
7100: DISABLE
7101: LD_INT 0
7103: PPUSH
// begin n := [ 3 , 4 , 5 ] [ Difficulty ] ;
7104: LD_ADDR_VAR 0 1
7108: PUSH
7109: LD_INT 3
7111: PUSH
7112: LD_INT 4
7114: PUSH
7115: LD_INT 5
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: LIST
7122: PUSH
7123: LD_OWVAR 67
7127: ARRAY
7128: ST_TO_ADDR
// repeat wait ( rand ( 0 0$30 , 2 2$00 ) ) ;
7129: LD_INT 1050
7131: PPUSH
7132: LD_INT 4200
7134: PPUSH
7135: CALL_OW 12
7139: PPUSH
7140: CALL_OW 67
// SayRadio ( Popov , DR5 ) ;
7144: LD_EXP 36
7148: PPUSH
7149: LD_STRING DR5
7151: PPUSH
7152: CALL_OW 94
// PrepareAlfaAttack ( northArr , n ) ;
7156: LD_INT 9
7158: PPUSH
7159: LD_VAR 0 1
7163: PPUSH
7164: CALL 1292 0 2
// wait ( rand ( 4 4$00 , 6 6$00 ) ) ;
7168: LD_INT 8400
7170: PPUSH
7171: LD_INT 12600
7173: PPUSH
7174: CALL_OW 12
7178: PPUSH
7179: CALL_OW 67
// n := n + 1 ;
7183: LD_ADDR_VAR 0 1
7187: PUSH
7188: LD_VAR 0 1
7192: PUSH
7193: LD_INT 1
7195: PLUS
7196: ST_TO_ADDR
// if n > 12 then
7197: LD_VAR 0 1
7201: PUSH
7202: LD_INT 12
7204: GREATER
7205: IFFALSE 7215
// n := 12 ;
7207: LD_ADDR_VAR 0 1
7211: PUSH
7212: LD_INT 12
7214: ST_TO_ADDR
// until tick >= 120 120$00 ;
7215: LD_OWVAR 1
7219: PUSH
7220: LD_INT 252000
7222: GREATEREQUAL
7223: IFFALSE 7129
// end ;
7225: PPOPN 1
7227: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 do
7228: LD_INT 22
7230: PUSH
7231: LD_INT 1
7233: PUSH
7234: EMPTY
7235: LIST
7236: LIST
7237: PUSH
7238: LD_INT 21
7240: PUSH
7241: LD_INT 1
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: PUSH
7248: LD_INT 50
7250: PUSH
7251: EMPTY
7252: LIST
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: LIST
7258: PPUSH
7259: CALL_OW 69
7263: PUSH
7264: LD_INT 0
7266: EQUAL
7267: IFFALSE 7310
7269: PUSH
7270: LD_INT 22
7272: PUSH
7273: LD_INT 4
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PUSH
7280: LD_INT 21
7282: PUSH
7283: LD_INT 1
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: PUSH
7290: LD_INT 50
7292: PUSH
7293: EMPTY
7294: LIST
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: LIST
7300: PPUSH
7301: CALL_OW 69
7305: PUSH
7306: LD_INT 0
7308: EQUAL
7309: AND
7310: IFFALSE 7616
7312: GO 7314
7314: DISABLE
// begin DialogueOn ;
7315: CALL_OW 6
// SayRadio ( Popov , DR7 ) ;
7319: LD_EXP 36
7323: PPUSH
7324: LD_STRING DR7
7326: PPUSH
7327: CALL_OW 94
// case playerCom of Gorki :
7331: LD_EXP 35
7335: PUSH
7336: LD_EXP 32
7340: DOUBLE
7341: EQUAL
7342: IFTRUE 7346
7344: GO 7356
7346: POP
// SetAchievement ( ACH_GORKI ) ; Stolypin :
7347: LD_STRING ACH_GORKI
7349: PPUSH
7350: CALL_OW 543
7354: GO 7417
7356: LD_EXP 33
7360: DOUBLE
7361: EQUAL
7362: IFTRUE 7366
7364: GO 7376
7366: POP
// SetAchievement ( ACH_STOLYP ) ; Davidov :
7367: LD_STRING ACH_STOLYP
7369: PPUSH
7370: CALL_OW 543
7374: GO 7417
7376: LD_EXP 31
7380: DOUBLE
7381: EQUAL
7382: IFTRUE 7386
7384: GO 7396
7386: POP
// SetAchievement ( ACH_DAVIDOV ) ; Gladkov :
7387: LD_STRING ACH_DAVIDOV
7389: PPUSH
7390: CALL_OW 543
7394: GO 7417
7396: LD_EXP 30
7400: DOUBLE
7401: EQUAL
7402: IFTRUE 7406
7404: GO 7416
7406: POP
// SetAchievement ( ACH_GLADKOV ) ; end ;
7407: LD_STRING ACH_GLADKOV
7409: PPUSH
7410: CALL_OW 543
7414: GO 7417
7416: POP
// if not callUsed then
7417: LD_EXP 2
7421: NOT
7422: IFFALSE 7431
// SetAchievement ( ACH_NOSUPP ) ;
7424: LD_STRING ACH_NOSUPP
7426: PPUSH
7427: CALL_OW 543
// if ( tick < [ 55 55$30 , 45 45$30 , 42 42$30 ] [ Difficulty ] ) then
7431: LD_OWVAR 1
7435: PUSH
7436: LD_INT 116550
7438: PUSH
7439: LD_INT 95550
7441: PUSH
7442: LD_INT 89250
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: LIST
7449: PUSH
7450: LD_OWVAR 67
7454: ARRAY
7455: LESS
7456: IFFALSE 7470
// AddMedal ( med1 , 1 ) else
7458: LD_STRING med1
7460: PPUSH
7461: LD_INT 1
7463: PPUSH
7464: CALL_OW 101
7468: GO 7481
// AddMedal ( med1 , - 1 ) ;
7470: LD_STRING med1
7472: PPUSH
7473: LD_INT 1
7475: NEG
7476: PPUSH
7477: CALL_OW 101
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) = 0 then
7481: LD_INT 81
7483: PUSH
7484: LD_INT 3
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: LD_INT 21
7493: PUSH
7494: LD_INT 3
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PPUSH
7505: CALL_OW 69
7509: PUSH
7510: LD_INT 0
7512: EQUAL
7513: IFFALSE 7527
// AddMedal ( med3 , 1 ) else
7515: LD_STRING med3
7517: PPUSH
7518: LD_INT 1
7520: PPUSH
7521: CALL_OW 101
7525: GO 7538
// AddMedal ( med3 , - 1 ) ;
7527: LD_STRING med3
7529: PPUSH
7530: LD_INT 1
7532: NEG
7533: PPUSH
7534: CALL_OW 101
// if playerLoss = 0 then
7538: LD_EXP 6
7542: PUSH
7543: LD_INT 0
7545: EQUAL
7546: IFFALSE 7560
// AddMedal ( med2 , 1 ) else
7548: LD_STRING med2
7550: PPUSH
7551: LD_INT 1
7553: PPUSH
7554: CALL_OW 101
7558: GO 7605
// if playerLoss > 0 and playerLoss < 3 then
7560: LD_EXP 6
7564: PUSH
7565: LD_INT 0
7567: GREATER
7568: IFFALSE 7580
7570: PUSH
7571: LD_EXP 6
7575: PUSH
7576: LD_INT 3
7578: LESS
7579: AND
7580: IFFALSE 7594
// AddMedal ( med2 , 2 ) else
7582: LD_STRING med2
7584: PPUSH
7585: LD_INT 2
7587: PPUSH
7588: CALL_OW 101
7592: GO 7605
// AddMedal ( med2 , - 1 ) ;
7594: LD_STRING med2
7596: PPUSH
7597: LD_INT 1
7599: NEG
7600: PPUSH
7601: CALL_OW 101
// GiveMedals ( MAIN ) ;
7605: LD_STRING MAIN
7607: PPUSH
7608: CALL_OW 102
// YouWin ;
7612: CALL_OW 103
// end ;
7616: END
// every 0 0$01 trigger IsDead ( playerCom ) do
7617: LD_EXP 35
7621: PPUSH
7622: CALL_OW 301
7626: IFFALSE 7693
7628: GO 7630
7630: DISABLE
// begin if IsOk ( Jakes ) then
7631: LD_EXP 3
7635: PPUSH
7636: CALL_OW 302
7640: IFFALSE 7656
// SayRadio ( Jakes , DJ5 ) else
7642: LD_EXP 3
7646: PPUSH
7647: LD_STRING DJ5
7649: PPUSH
7650: CALL_OW 94
7654: GO 7679
// if IsOk ( Sylvia ) then
7656: LD_EXP 4
7660: PPUSH
7661: CALL_OW 302
7665: IFFALSE 7679
// SayRadio ( Sylvia , DS5 ) ;
7667: LD_EXP 4
7671: PPUSH
7672: LD_STRING DS5
7674: PPUSH
7675: CALL_OW 94
// wait ( 0 0$01 ) ;
7679: LD_INT 35
7681: PPUSH
7682: CALL_OW 67
// YouLost ( dead ) ;
7686: LD_STRING dead
7688: PPUSH
7689: CALL_OW 104
// end ;
7693: END
// every 0 0$01 trigger IsDead ( playerDepot ) and not isTest do
7694: LD_INT 1
7696: PPUSH
7697: CALL_OW 301
7701: IFFALSE 7710
7703: PUSH
7704: LD_EXP 1
7708: NOT
7709: AND
7710: IFFALSE 7777
7712: GO 7714
7714: DISABLE
// begin if IsOk ( Sylvia ) then
7715: LD_EXP 4
7719: PPUSH
7720: CALL_OW 302
7724: IFFALSE 7740
// SayRadio ( Sylvia , DS5 ) else
7726: LD_EXP 4
7730: PPUSH
7731: LD_STRING DS5
7733: PPUSH
7734: CALL_OW 94
7738: GO 7763
// if IsOk ( Jakes ) then
7740: LD_EXP 3
7744: PPUSH
7745: CALL_OW 302
7749: IFFALSE 7763
// SayRadio ( Jakes , DJ5 ) ;
7751: LD_EXP 3
7755: PPUSH
7756: LD_STRING DJ5
7758: PPUSH
7759: CALL_OW 94
// wait ( 0 0$01 ) ;
7763: LD_INT 35
7765: PPUSH
7766: CALL_OW 67
// YouLost ( depot ) ;
7770: LD_STRING depot
7772: PPUSH
7773: CALL_OW 104
// end ; end_of_file
7777: END
// on ArtifactUsed ( side , button_type , x , y ) do var side1 , side4 ;
7778: LD_INT 0
7780: PPUSH
7781: PPUSH
// begin if call and tick < 12 12$00 then
7782: LD_EXP 7
7786: IFFALSE 7798
7788: PUSH
7789: LD_OWVAR 1
7793: PUSH
7794: LD_INT 25200
7796: LESS
7797: AND
7798: IFFALSE 7966
// case query ( call1 ) of 1 :
7800: LD_STRING call1
7802: PPUSH
7803: CALL_OW 97
7807: PUSH
7808: LD_INT 1
7810: DOUBLE
7811: EQUAL
7812: IFTRUE 7816
7814: GO 7954
7816: POP
// begin callUsed := true ;
7817: LD_ADDR_EXP 2
7821: PUSH
7822: LD_INT 1
7824: ST_TO_ADDR
// SetArtifactUse ( 3 , art_use_exclamation , art_gray , playerDepot ) ;
7825: LD_INT 3
7827: PPUSH
7828: LD_INT 12
7830: PPUSH
7831: LD_INT 1
7833: PPUSH
7834: LD_INT 1
7836: PPUSH
7837: CALL_OW 468
// call := false ;
7841: LD_ADDR_EXP 7
7845: PUSH
7846: LD_INT 0
7848: ST_TO_ADDR
// SayRadio ( Popov , DR6 ) ;
7849: LD_EXP 36
7853: PPUSH
7854: LD_STRING DR6
7856: PPUSH
7857: CALL_OW 94
// wait ( rand ( 1 1$00 , 3 3$00 ) ) ;
7861: LD_INT 2100
7863: PPUSH
7864: LD_INT 6300
7866: PPUSH
7867: CALL_OW 12
7871: PPUSH
7872: CALL_OW 67
// PrepareConvoy ( [ eastArr , southArr ] [ rand ( 1 , 2 ) ] , rand ( 1 , 2 ) ) ;
7876: LD_INT 7
7878: PUSH
7879: LD_INT 8
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: PUSH
7886: LD_INT 1
7888: PPUSH
7889: LD_INT 2
7891: PPUSH
7892: CALL_OW 12
7896: ARRAY
7897: PPUSH
7898: LD_INT 1
7900: PPUSH
7901: LD_INT 2
7903: PPUSH
7904: CALL_OW 12
7908: PPUSH
7909: CALL 4285 0 2
// wait ( rand ( 6 6$00 , 8 8$00 ) ) ;
7913: LD_INT 12600
7915: PPUSH
7916: LD_INT 16800
7918: PPUSH
7919: CALL_OW 12
7923: PPUSH
7924: CALL_OW 67
// call := true ;
7928: LD_ADDR_EXP 7
7932: PUSH
7933: LD_INT 1
7935: ST_TO_ADDR
// SetArtifactUse ( 3 , art_use_exclamation , art_instant , playerDepot ) ;
7936: LD_INT 3
7938: PPUSH
7939: LD_INT 12
7941: PPUSH
7942: LD_INT 2
7944: PPUSH
7945: LD_INT 1
7947: PPUSH
7948: CALL_OW 468
// end ; 2 :
7952: GO 7966
7954: LD_INT 2
7956: DOUBLE
7957: EQUAL
7958: IFTRUE 7962
7960: GO 7965
7962: POP
// ; end ;
7963: GO 7966
7965: POP
// if call and tick >= 12 12$00 then
7966: LD_EXP 7
7970: IFFALSE 7982
7972: PUSH
7973: LD_OWVAR 1
7977: PUSH
7978: LD_INT 25200
7980: GREATEREQUAL
7981: AND
7982: IFFALSE 8429
// case query ( call2 ) of 1 :
7984: LD_STRING call2
7986: PPUSH
7987: CALL_OW 97
7991: PUSH
7992: LD_INT 1
7994: DOUBLE
7995: EQUAL
7996: IFTRUE 8000
7998: GO 8250
8000: POP
// begin callUsed := true ;
8001: LD_ADDR_EXP 2
8005: PUSH
8006: LD_INT 1
8008: ST_TO_ADDR
// call := false ;
8009: LD_ADDR_EXP 7
8013: PUSH
8014: LD_INT 0
8016: ST_TO_ADDR
// side1 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] ] ) ;
8017: LD_ADDR_VAR 0 5
8021: PUSH
8022: LD_INT 22
8024: PUSH
8025: LD_INT 1
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: PUSH
8032: LD_INT 50
8034: PUSH
8035: EMPTY
8036: LIST
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PPUSH
8042: CALL_OW 69
8046: ST_TO_ADDR
// side4 := FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] ] ) ;
8047: LD_ADDR_VAR 0 6
8051: PUSH
8052: LD_INT 22
8054: PUSH
8055: LD_INT 4
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: LD_INT 50
8064: PUSH
8065: EMPTY
8066: LIST
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PPUSH
8072: CALL_OW 69
8076: ST_TO_ADDR
// if side1 and side4 then
8077: LD_VAR 0 5
8081: IFFALSE 8089
8083: PUSH
8084: LD_VAR 0 6
8088: AND
8089: IFFALSE 8139
// PrepareAttack ( [ eastArr , southArr ] [ rand ( 1 , 2 ) ] , [ 6 , 6 , 5 ] [ Difficulty ] ) else
8091: LD_INT 7
8093: PUSH
8094: LD_INT 8
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: PUSH
8101: LD_INT 1
8103: PPUSH
8104: LD_INT 2
8106: PPUSH
8107: CALL_OW 12
8111: ARRAY
8112: PPUSH
8113: LD_INT 6
8115: PUSH
8116: LD_INT 6
8118: PUSH
8119: LD_INT 5
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: LIST
8126: PUSH
8127: LD_OWVAR 67
8131: ARRAY
8132: PPUSH
8133: CALL 3994 0 2
8137: GO 8209
// if not side1 then
8139: LD_VAR 0 5
8143: NOT
8144: IFFALSE 8175
// PrepareAttack ( southArr , [ 7 , 6 , 5 ] [ Difficulty ] ) else
8146: LD_INT 8
8148: PPUSH
8149: LD_INT 7
8151: PUSH
8152: LD_INT 6
8154: PUSH
8155: LD_INT 5
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: LIST
8162: PUSH
8163: LD_OWVAR 67
8167: ARRAY
8168: PPUSH
8169: CALL 3994 0 2
8173: GO 8209
// if not side4 then
8175: LD_VAR 0 6
8179: NOT
8180: IFFALSE 8209
// PrepareAttack ( eastArr , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
8182: LD_INT 7
8184: PPUSH
8185: LD_INT 6
8187: PUSH
8188: LD_INT 6
8190: PUSH
8191: LD_INT 5
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: LIST
8198: PUSH
8199: LD_OWVAR 67
8203: ARRAY
8204: PPUSH
8205: CALL 3994 0 2
// wait ( rand ( 5 5$00 , 8 8$00 ) ) ;
8209: LD_INT 10500
8211: PPUSH
8212: LD_INT 16800
8214: PPUSH
8215: CALL_OW 12
8219: PPUSH
8220: CALL_OW 67
// call := true ;
8224: LD_ADDR_EXP 7
8228: PUSH
8229: LD_INT 1
8231: ST_TO_ADDR
// SetArtifactUse ( 3 , art_use_exclamation , art_instant , playerDepot ) ;
8232: LD_INT 3
8234: PPUSH
8235: LD_INT 12
8237: PPUSH
8238: LD_INT 2
8240: PPUSH
8241: LD_INT 1
8243: PPUSH
8244: CALL_OW 468
// end ; 2 :
8248: GO 8429
8250: LD_INT 2
8252: DOUBLE
8253: EQUAL
8254: IFTRUE 8258
8256: GO 8417
8258: POP
// begin callUsed := true ;
8259: LD_ADDR_EXP 2
8263: PUSH
8264: LD_INT 1
8266: ST_TO_ADDR
// SetArtifactUse ( 3 , art_use_exclamation , art_gray , playerDepot ) ;
8267: LD_INT 3
8269: PPUSH
8270: LD_INT 12
8272: PPUSH
8273: LD_INT 1
8275: PPUSH
8276: LD_INT 1
8278: PPUSH
8279: CALL_OW 468
// call := false ;
8283: LD_ADDR_EXP 7
8287: PUSH
8288: LD_INT 0
8290: ST_TO_ADDR
// SayRadio ( Popov , DR6 ) ;
8291: LD_EXP 36
8295: PPUSH
8296: LD_STRING DR6
8298: PPUSH
8299: CALL_OW 94
// wait ( rand ( 1 1$00 , 3 3$00 ) ) ;
8303: LD_INT 2100
8305: PPUSH
8306: LD_INT 6300
8308: PPUSH
8309: CALL_OW 12
8313: PPUSH
8314: CALL_OW 67
// PrepareConvoy ( [ eastArr , southArr ] [ rand ( 1 , 2 ) ] , [ 3 , 2 , 2 ] [ Difficulty ] - rand ( 0 , 1 ) ) ;
8318: LD_INT 7
8320: PUSH
8321: LD_INT 8
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: PUSH
8328: LD_INT 1
8330: PPUSH
8331: LD_INT 2
8333: PPUSH
8334: CALL_OW 12
8338: ARRAY
8339: PPUSH
8340: LD_INT 3
8342: PUSH
8343: LD_INT 2
8345: PUSH
8346: LD_INT 2
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: LIST
8353: PUSH
8354: LD_OWVAR 67
8358: ARRAY
8359: PUSH
8360: LD_INT 0
8362: PPUSH
8363: LD_INT 1
8365: PPUSH
8366: CALL_OW 12
8370: MINUS
8371: PPUSH
8372: CALL 4285 0 2
// wait ( rand ( 6 6$00 , 8 8$00 ) ) ;
8376: LD_INT 12600
8378: PPUSH
8379: LD_INT 16800
8381: PPUSH
8382: CALL_OW 12
8386: PPUSH
8387: CALL_OW 67
// call := true ;
8391: LD_ADDR_EXP 7
8395: PUSH
8396: LD_INT 1
8398: ST_TO_ADDR
// SetArtifactUse ( 3 , art_use_exclamation , art_instant , playerDepot ) ;
8399: LD_INT 3
8401: PPUSH
8402: LD_INT 12
8404: PPUSH
8405: LD_INT 2
8407: PPUSH
8408: LD_INT 1
8410: PPUSH
8411: CALL_OW 468
// end ; 3 :
8415: GO 8429
8417: LD_INT 3
8419: DOUBLE
8420: EQUAL
8421: IFTRUE 8425
8423: GO 8428
8425: POP
// ; end ;
8426: GO 8429
8428: POP
// end ;
8429: PPOPN 6
8431: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8432: LD_VAR 0 1
8436: PPUSH
8437: CALL 31934 0 1
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) and not alfaNorthTriggered then
8441: LD_VAR 0 1
8445: PUSH
8446: LD_INT 22
8448: PUSH
8449: LD_INT 1
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: PUSH
8456: LD_INT 21
8458: PUSH
8459: LD_INT 3
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PPUSH
8470: CALL_OW 69
8474: IN
8475: IFFALSE 8484
8477: PUSH
8478: LD_EXP 8
8482: NOT
8483: AND
8484: IFFALSE 8540
// begin alfaNorthTriggered := true ;
8486: LD_ADDR_EXP 8
8490: PUSH
8491: LD_INT 1
8493: ST_TO_ADDR
// SayRadio ( Jakes , DJ3 ) ;
8494: LD_EXP 3
8498: PPUSH
8499: LD_STRING DJ3
8501: PPUSH
8502: CALL_OW 94
// wait ( 0 0$30 ) ;
8506: LD_INT 1050
8508: PPUSH
8509: CALL_OW 67
// PrepareAlfaAttack ( northArr , [ 6 , 7 , 8 ] [ Difficulty ] ) ;
8513: LD_INT 9
8515: PPUSH
8516: LD_INT 6
8518: PUSH
8519: LD_INT 7
8521: PUSH
8522: LD_INT 8
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: LIST
8529: PUSH
8530: LD_OWVAR 67
8534: ARRAY
8535: PPUSH
8536: CALL 1292 0 2
// end ; if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) and not alfaSouthTriggered then
8540: LD_VAR 0 1
8544: PUSH
8545: LD_INT 22
8547: PUSH
8548: LD_INT 4
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: PUSH
8555: LD_INT 21
8557: PUSH
8558: LD_INT 3
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: PPUSH
8569: CALL_OW 69
8573: IN
8574: IFFALSE 8583
8576: PUSH
8577: LD_EXP 9
8581: NOT
8582: AND
8583: IFFALSE 8639
// begin alfaSouthTriggered := true ;
8585: LD_ADDR_EXP 9
8589: PUSH
8590: LD_INT 1
8592: ST_TO_ADDR
// SayRadio ( Sylvia , DS4 ) ;
8593: LD_EXP 4
8597: PPUSH
8598: LD_STRING DS4
8600: PPUSH
8601: CALL_OW 94
// wait ( 0 0$30 ) ;
8605: LD_INT 1050
8607: PPUSH
8608: CALL_OW 67
// PrepareAlfaAttack ( northArr , [ 6 , 7 , 8 ] [ Difficulty ] ) ;
8612: LD_INT 9
8614: PPUSH
8615: LD_INT 6
8617: PUSH
8618: LD_INT 7
8620: PUSH
8621: LD_INT 8
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: LIST
8628: PUSH
8629: LD_OWVAR 67
8633: ARRAY
8634: PPUSH
8635: CALL 1292 0 2
// end ; end ;
8639: PPOPN 1
8641: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) then
8642: LD_VAR 0 1
8646: PUSH
8647: LD_INT 22
8649: PUSH
8650: LD_INT 3
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: PUSH
8657: LD_INT 21
8659: PUSH
8660: LD_INT 1
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: PUSH
8667: LD_INT 23
8669: PUSH
8670: LD_INT 3
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: LIST
8681: PPUSH
8682: CALL_OW 69
8686: IN
8687: IFFALSE 8796
// begin if Prob ( 50 ) or lastRadioMsg + 1 1$00 > tick then
8689: LD_INT 50
8691: PPUSH
8692: CALL_OW 13
8696: IFTRUE 8714
8698: PUSH
8699: LD_EXP 12
8703: PUSH
8704: LD_INT 2100
8706: PLUS
8707: PUSH
8708: LD_OWVAR 1
8712: GREATER
8713: OR
8714: IFFALSE 8718
// exit ;
8716: GO 8796
// lastRadioMsg := tick ;
8718: LD_ADDR_EXP 12
8722: PUSH
8723: LD_OWVAR 1
8727: ST_TO_ADDR
// if killerSide = 1 then
8728: LD_VAR 0 2
8732: PUSH
8733: LD_INT 1
8735: EQUAL
8736: IFFALSE 8763
// begin if IsOk ( Jakes ) then
8738: LD_EXP 3
8742: PPUSH
8743: CALL_OW 302
8747: IFFALSE 8761
// SayRadio ( Jakes , DJ2 ) ;
8749: LD_EXP 3
8753: PPUSH
8754: LD_STRING DJ2
8756: PPUSH
8757: CALL_OW 94
// end else
8761: GO 8796
// if killerSide = 4 then
8763: LD_VAR 0 2
8767: PUSH
8768: LD_INT 4
8770: EQUAL
8771: IFFALSE 8796
// begin if IsOk ( Sylvia ) then
8773: LD_EXP 4
8777: PPUSH
8778: CALL_OW 302
8782: IFFALSE 8796
// SayRadio ( Sylvia , DS1 ) ;
8784: LD_EXP 4
8788: PPUSH
8789: LD_STRING DS1
8791: PPUSH
8792: CALL_OW 94
// end ; end ; end ;
8796: PPOPN 3
8798: END
// on VehicleConstructed ( vehicle , factory ) do var side ;
8799: LD_INT 0
8801: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
8802: LD_VAR 0 1
8806: PPUSH
8807: LD_VAR 0 2
8811: PPUSH
8812: CALL 31992 0 2
// side := GetSide ( vehicle ) ;
8816: LD_ADDR_VAR 0 3
8820: PUSH
8821: LD_VAR 0 1
8825: PPUSH
8826: CALL_OW 255
8830: ST_TO_ADDR
// if side = 1 then
8831: LD_VAR 0 3
8835: PUSH
8836: LD_INT 1
8838: EQUAL
8839: IFFALSE 9042
// begin usConstructList1 := Delete ( usConstructList1 , 1 ) ;
8841: LD_ADDR_EXP 20
8845: PUSH
8846: LD_EXP 20
8850: PPUSH
8851: LD_INT 1
8853: PPUSH
8854: CALL_OW 3
8858: ST_TO_ADDR
// if GetWeapon ( vehicle ) in [ us_cargo_bay ] then
8859: LD_VAR 0 1
8863: PPUSH
8864: CALL_OW 264
8868: PUSH
8869: LD_INT 12
8871: PUSH
8872: EMPTY
8873: LIST
8874: IN
8875: IFFALSE 8889
// begin usCargo1 := vehicle ;
8877: LD_ADDR_EXP 26
8881: PUSH
8882: LD_VAR 0 1
8886: ST_TO_ADDR
// exit ;
8887: GO 9253
// end ; if GetWeapon ( vehicle ) = us_crane then
8889: LD_VAR 0 1
8893: PPUSH
8894: CALL_OW 264
8898: PUSH
8899: LD_INT 13
8901: EQUAL
8902: IFFALSE 8926
// begin usVehicles1 := Join ( usVehicles1 , vehicle ) ;
8904: LD_ADDR_EXP 16
8908: PUSH
8909: LD_EXP 16
8913: PPUSH
8914: LD_VAR 0 1
8918: PPUSH
8919: CALL 76608 0 2
8923: ST_TO_ADDR
// exit ;
8924: GO 9253
// end ; if GetControl ( vehicle ) = control_manual then
8926: LD_VAR 0 1
8930: PPUSH
8931: CALL_OW 263
8935: PUSH
8936: LD_INT 1
8938: EQUAL
8939: IFFALSE 8980
// begin usVehicles1 := Join ( usVehicles1 , vehicle ) ;
8941: LD_ADDR_EXP 16
8945: PUSH
8946: LD_EXP 16
8950: PPUSH
8951: LD_VAR 0 1
8955: PPUSH
8956: CALL 76608 0 2
8960: ST_TO_ADDR
// SetTag ( IsDrivenBy ( vehicle ) , tMech ) ;
8961: LD_VAR 0 1
8965: PPUSH
8966: CALL_OW 311
8970: PPUSH
8971: LD_INT 7
8973: PPUSH
8974: CALL_OW 109
// end else
8978: GO 9042
// begin usAttackVehicles1 := Join ( usAttackVehicles1 , vehicle ) ;
8980: LD_ADDR_EXP 24
8984: PUSH
8985: LD_EXP 24
8989: PPUSH
8990: LD_VAR 0 1
8994: PPUSH
8995: CALL 76608 0 2
8999: ST_TO_ADDR
// if Count ( usAttackVehicles1 ) >= [ 3 , 5 , 7 ] [ Difficulty ] + attackWave1 then
9000: LD_EXP 24
9004: PPUSH
9005: CALL 40632 0 1
9009: PUSH
9010: LD_INT 3
9012: PUSH
9013: LD_INT 5
9015: PUSH
9016: LD_INT 7
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: LIST
9023: PUSH
9024: LD_OWVAR 67
9028: ARRAY
9029: PUSH
9030: LD_EXP 10
9034: PLUS
9035: GREATEREQUAL
9036: IFFALSE 9042
// SendUsAttack1 ;
9038: CALL 2557 0 0
// end ; end ; if side = 4 then
9042: LD_VAR 0 3
9046: PUSH
9047: LD_INT 4
9049: EQUAL
9050: IFFALSE 9253
// begin usConstructList2 := Delete ( usConstructList2 , 1 ) ;
9052: LD_ADDR_EXP 21
9056: PUSH
9057: LD_EXP 21
9061: PPUSH
9062: LD_INT 1
9064: PPUSH
9065: CALL_OW 3
9069: ST_TO_ADDR
// if GetWeapon ( vehicle ) in [ us_cargo_bay ] then
9070: LD_VAR 0 1
9074: PPUSH
9075: CALL_OW 264
9079: PUSH
9080: LD_INT 12
9082: PUSH
9083: EMPTY
9084: LIST
9085: IN
9086: IFFALSE 9100
// begin usCargo2 := vehicle ;
9088: LD_ADDR_EXP 27
9092: PUSH
9093: LD_VAR 0 1
9097: ST_TO_ADDR
// exit ;
9098: GO 9253
// end ; if GetWeapon ( vehicle ) = us_crane then
9100: LD_VAR 0 1
9104: PPUSH
9105: CALL_OW 264
9109: PUSH
9110: LD_INT 13
9112: EQUAL
9113: IFFALSE 9137
// begin usVehicles2 := Join ( usVehicles2 , vehicle ) ;
9115: LD_ADDR_EXP 17
9119: PUSH
9120: LD_EXP 17
9124: PPUSH
9125: LD_VAR 0 1
9129: PPUSH
9130: CALL 76608 0 2
9134: ST_TO_ADDR
// exit ;
9135: GO 9253
// end ; if GetControl ( vehicle ) = control_manual then
9137: LD_VAR 0 1
9141: PPUSH
9142: CALL_OW 263
9146: PUSH
9147: LD_INT 1
9149: EQUAL
9150: IFFALSE 9191
// begin usVehicles2 := Join ( usVehicles2 , vehicle ) ;
9152: LD_ADDR_EXP 17
9156: PUSH
9157: LD_EXP 17
9161: PPUSH
9162: LD_VAR 0 1
9166: PPUSH
9167: CALL 76608 0 2
9171: ST_TO_ADDR
// SetTag ( IsDrivenBy ( vehicle ) , tMech ) ;
9172: LD_VAR 0 1
9176: PPUSH
9177: CALL_OW 311
9181: PPUSH
9182: LD_INT 7
9184: PPUSH
9185: CALL_OW 109
// end else
9189: GO 9253
// begin usAttackVehicles2 := Join ( usAttackVehicles2 , vehicle ) ;
9191: LD_ADDR_EXP 25
9195: PUSH
9196: LD_EXP 25
9200: PPUSH
9201: LD_VAR 0 1
9205: PPUSH
9206: CALL 76608 0 2
9210: ST_TO_ADDR
// if Count ( usAttackVehicles2 ) >= [ 3 , 5 , 7 ] [ Difficulty ] + attackWave2 then
9211: LD_EXP 25
9215: PPUSH
9216: CALL 40632 0 1
9220: PUSH
9221: LD_INT 3
9223: PUSH
9224: LD_INT 5
9226: PUSH
9227: LD_INT 7
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: LIST
9234: PUSH
9235: LD_OWVAR 67
9239: ARRAY
9240: PUSH
9241: LD_EXP 11
9245: PLUS
9246: GREATEREQUAL
9247: IFFALSE 9253
// SendUsAttack2 ;
9249: CALL 3150 0 0
// end ; end ; end ;
9253: PPOPN 3
9255: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
9256: LD_VAR 0 1
9260: PPUSH
9261: CALL_OW 110
9265: PUSH
9266: LD_INT 7
9268: EQUAL
9269: IFFALSE 9283
// SetTag ( driver , 0 ) ;
9271: LD_VAR 0 1
9275: PPUSH
9276: LD_INT 0
9278: PPUSH
9279: CALL_OW 109
// end ;
9283: PPOPN 4
9285: END
// on EvacuateBuilding ( building , unit ) do begin if GetTag ( unit ) = tControlRemoteMech then
9286: LD_VAR 0 2
9290: PPUSH
9291: CALL_OW 110
9295: PUSH
9296: LD_INT 17
9298: EQUAL
9299: IFFALSE 9313
// SetTag ( unit , 0 ) ;
9301: LD_VAR 0 2
9305: PPUSH
9306: LD_INT 0
9308: PPUSH
9309: CALL_OW 109
// end ;
9313: PPOPN 2
9315: END
// on UpgradeComplete ( b ) do var side , btype ;
9316: LD_INT 0
9318: PPUSH
9319: PPUSH
// begin side := GetSide ( b ) ;
9320: LD_ADDR_VAR 0 2
9324: PUSH
9325: LD_VAR 0 1
9329: PPUSH
9330: CALL_OW 255
9334: ST_TO_ADDR
// btype := GetBType ( b ) ;
9335: LD_ADDR_VAR 0 3
9339: PUSH
9340: LD_VAR 0 1
9344: PPUSH
9345: CALL_OW 266
9349: ST_TO_ADDR
// if side = 1 then
9350: LD_VAR 0 2
9354: PUSH
9355: LD_INT 1
9357: EQUAL
9358: IFFALSE 9378
// begin usBuildingsToBuild1 := Delete ( usBuildingsToBuild1 , 1 ) ;
9360: LD_ADDR_EXP 22
9364: PUSH
9365: LD_EXP 22
9369: PPUSH
9370: LD_INT 1
9372: PPUSH
9373: CALL_OW 3
9377: ST_TO_ADDR
// end ; if side = 4 then
9378: LD_VAR 0 2
9382: PUSH
9383: LD_INT 4
9385: EQUAL
9386: IFFALSE 9406
// begin usBuildingsToBuild2 := Delete ( usBuildingsToBuild2 , 1 ) ;
9388: LD_ADDR_EXP 23
9392: PUSH
9393: LD_EXP 23
9397: PPUSH
9398: LD_INT 1
9400: PPUSH
9401: CALL_OW 3
9405: ST_TO_ADDR
// end ; end ;
9406: PPOPN 3
9408: END
// on ResearchComplete ( tech , lab ) do var side ;
9409: LD_INT 0
9411: PPUSH
// begin side := GetSide ( lab ) ;
9412: LD_ADDR_VAR 0 3
9416: PUSH
9417: LD_VAR 0 2
9421: PPUSH
9422: CALL_OW 255
9426: ST_TO_ADDR
// if side = 1 then
9427: LD_VAR 0 3
9431: PUSH
9432: LD_INT 1
9434: EQUAL
9435: IFFALSE 9453
// usTechs1 := usTechs1 diff tech ;
9437: LD_ADDR_EXP 18
9441: PUSH
9442: LD_EXP 18
9446: PUSH
9447: LD_VAR 0 1
9451: DIFF
9452: ST_TO_ADDR
// if side = 4 then
9453: LD_VAR 0 3
9457: PUSH
9458: LD_INT 4
9460: EQUAL
9461: IFFALSE 9479
// usTechs2 := usTechs2 diff tech ;
9463: LD_ADDR_EXP 19
9467: PUSH
9468: LD_EXP 19
9472: PUSH
9473: LD_VAR 0 1
9477: DIFF
9478: ST_TO_ADDR
// end ;
9479: PPOPN 3
9481: END
// on BuildingComplete ( b ) do var side , btype ;
9482: LD_INT 0
9484: PPUSH
9485: PPUSH
// begin side := GetSide ( b ) ;
9486: LD_ADDR_VAR 0 2
9490: PUSH
9491: LD_VAR 0 1
9495: PPUSH
9496: CALL_OW 255
9500: ST_TO_ADDR
// btype := GetBType ( b ) ;
9501: LD_ADDR_VAR 0 3
9505: PUSH
9506: LD_VAR 0 1
9510: PPUSH
9511: CALL_OW 266
9515: ST_TO_ADDR
// if side = 1 then
9516: LD_VAR 0 2
9520: PUSH
9521: LD_INT 1
9523: EQUAL
9524: IFFALSE 9544
// usBuildingsToBuild1 := Delete ( usBuildingsToBuild1 , 1 ) ;
9526: LD_ADDR_EXP 22
9530: PUSH
9531: LD_EXP 22
9535: PPUSH
9536: LD_INT 1
9538: PPUSH
9539: CALL_OW 3
9543: ST_TO_ADDR
// if side = 4 then
9544: LD_VAR 0 2
9548: PUSH
9549: LD_INT 4
9551: EQUAL
9552: IFFALSE 9572
// usBuildingsToBuild2 := Delete ( usBuildingsToBuild2 , 1 ) ;
9554: LD_ADDR_EXP 23
9558: PUSH
9559: LD_EXP 23
9563: PPUSH
9564: LD_INT 1
9566: PPUSH
9567: CALL_OW 3
9571: ST_TO_ADDR
// end ;
9572: PPOPN 3
9574: END
// on VehicleCaptured ( newId , oldId , oldSide , driver ) do begin if oldSide = 1 then
9575: LD_VAR 0 3
9579: PUSH
9580: LD_INT 1
9582: EQUAL
9583: IFFALSE 9631
// begin if oldId in usVehicles1 then
9585: LD_VAR 0 2
9589: PUSH
9590: LD_EXP 16
9594: IN
9595: IFFALSE 9615
// begin usVehicles1 := usVehicles1 diff oldId ;
9597: LD_ADDR_EXP 16
9601: PUSH
9602: LD_EXP 16
9606: PUSH
9607: LD_VAR 0 2
9611: DIFF
9612: ST_TO_ADDR
// end else
9613: GO 9631
// begin usAttackVehicles1 := usAttackVehicles1 diff oldId ;
9615: LD_ADDR_EXP 24
9619: PUSH
9620: LD_EXP 24
9624: PUSH
9625: LD_VAR 0 2
9629: DIFF
9630: ST_TO_ADDR
// end ; end ; if oldSide = 4 then
9631: LD_VAR 0 3
9635: PUSH
9636: LD_INT 4
9638: EQUAL
9639: IFFALSE 9687
// begin if oldId in usVehicles2 then
9641: LD_VAR 0 2
9645: PUSH
9646: LD_EXP 17
9650: IN
9651: IFFALSE 9671
// begin usVehicles2 := usVehicles2 diff oldId ;
9653: LD_ADDR_EXP 17
9657: PUSH
9658: LD_EXP 17
9662: PUSH
9663: LD_VAR 0 2
9667: DIFF
9668: ST_TO_ADDR
// end else
9669: GO 9687
// begin usAttackVehicles2 := usAttackVehicles2 diff oldId ;
9671: LD_ADDR_EXP 25
9675: PUSH
9676: LD_EXP 25
9680: PUSH
9681: LD_VAR 0 2
9685: DIFF
9686: ST_TO_ADDR
// end ; end ; end ;
9687: PPOPN 4
9689: END
// on ClassChanged ( un , oldClass , newClass ) do var tag ;
9690: LD_INT 0
9692: PPUSH
// begin tag := GetTag ( un ) ;
9693: LD_ADDR_VAR 0 4
9697: PUSH
9698: LD_VAR 0 1
9702: PPUSH
9703: CALL_OW 110
9707: ST_TO_ADDR
// if GetSide ( un ) in [ 1 , 4 ] then
9708: LD_VAR 0 1
9712: PPUSH
9713: CALL_OW 255
9717: PUSH
9718: LD_INT 1
9720: PUSH
9721: LD_INT 4
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: IN
9728: IFFALSE 9759
// if tag in [ tWannaBeMech , tWannaBeSold ] then
9730: LD_VAR 0 4
9734: PUSH
9735: LD_INT 14
9737: PUSH
9738: LD_INT 16
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: IN
9745: IFFALSE 9759
// SetTag ( un , 0 ) ;
9747: LD_VAR 0 1
9751: PPUSH
9752: LD_INT 0
9754: PPUSH
9755: CALL_OW 109
// end ; end_of_file
9759: PPOPN 4
9761: END
// export function BaseScript ( side , area , cratesArea , innerArea , outerArea , forces , vehicles , techs , constructList , buildingsToBuild , healPoint , parkingPoint , allowToPatrol ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , drivers , hurtUnits , enemy , vehicles2 , ct , cranes , barracks , enemyInBase , enemyOuterBase , empty , fac , emptyTowers , weapon , depot , enemySide ; begin
9762: LD_INT 0
9764: PPUSH
9765: PPUSH
9766: PPUSH
9767: PPUSH
9768: PPUSH
9769: PPUSH
9770: PPUSH
9771: PPUSH
9772: PPUSH
9773: PPUSH
9774: PPUSH
9775: PPUSH
9776: PPUSH
9777: PPUSH
9778: PPUSH
9779: PPUSH
9780: PPUSH
9781: PPUSH
9782: PPUSH
9783: PPUSH
9784: PPUSH
9785: PPUSH
9786: PPUSH
9787: PPUSH
9788: PPUSH
9789: PPUSH
9790: PPUSH
// enable ;
9791: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
9792: LD_ADDR_VAR 0 16
9796: PUSH
9797: LD_INT 81
9799: PUSH
9800: LD_VAR 0 1
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: PPUSH
9809: CALL_OW 69
9813: ST_TO_ADDR
// if tmp then
9814: LD_VAR 0 16
9818: IFFALSE 9839
// enemySide := GetSide ( tmp [ 1 ] ) ;
9820: LD_ADDR_VAR 0 40
9824: PUSH
9825: LD_VAR 0 16
9829: PUSH
9830: LD_INT 1
9832: ARRAY
9833: PPUSH
9834: CALL_OW 255
9838: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( innerArea , [ f_enemy , side ] ) ;
9839: LD_ADDR_VAR 0 33
9843: PUSH
9844: LD_VAR 0 4
9848: PPUSH
9849: LD_INT 81
9851: PUSH
9852: LD_VAR 0 1
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PPUSH
9861: CALL_OW 70
9865: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
9866: LD_ADDR_VAR 0 34
9870: PUSH
9871: LD_VAR 0 5
9875: PPUSH
9876: LD_INT 81
9878: PUSH
9879: LD_VAR 0 1
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PPUSH
9888: CALL_OW 70
9892: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9893: LD_ADDR_VAR 0 39
9897: PUSH
9898: LD_VAR 0 2
9902: PPUSH
9903: LD_INT 22
9905: PUSH
9906: LD_VAR 0 1
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: PUSH
9915: LD_INT 2
9917: PUSH
9918: LD_INT 30
9920: PUSH
9921: LD_INT 0
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: PUSH
9928: LD_INT 30
9930: PUSH
9931: LD_INT 1
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: LIST
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PPUSH
9947: CALL_OW 70
9951: ST_TO_ADDR
// if depot then
9952: LD_VAR 0 39
9956: IFFALSE 9972
// depot := depot [ 1 ] ;
9958: LD_ADDR_VAR 0 39
9962: PUSH
9963: LD_VAR 0 39
9967: PUSH
9968: LD_INT 1
9970: ARRAY
9971: ST_TO_ADDR
// fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
9972: LD_ADDR_VAR 0 36
9976: PUSH
9977: LD_VAR 0 2
9981: PPUSH
9982: LD_INT 22
9984: PUSH
9985: LD_VAR 0 1
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: PUSH
9994: LD_INT 30
9996: PUSH
9997: LD_INT 3
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: PUSH
10004: LD_INT 50
10006: PUSH
10007: EMPTY
10008: LIST
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: LIST
10014: PPUSH
10015: CALL_OW 70
10019: ST_TO_ADDR
// barracks := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
10020: LD_ADDR_VAR 0 32
10024: PUSH
10025: LD_VAR 0 2
10029: PPUSH
10030: LD_INT 22
10032: PUSH
10033: LD_VAR 0 1
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: PUSH
10042: LD_INT 2
10044: PUSH
10045: LD_INT 30
10047: PUSH
10048: LD_INT 4
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 30
10057: PUSH
10058: LD_INT 5
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: LIST
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: PPUSH
10074: CALL_OW 70
10078: ST_TO_ADDR
// if Count ( techs ) then
10079: LD_VAR 0 8
10083: PPUSH
10084: CALL 40632 0 1
10088: IFFALSE 10249
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
10090: LD_ADDR_VAR 0 18
10094: PUSH
10095: LD_VAR 0 2
10099: PPUSH
10100: LD_INT 22
10102: PUSH
10103: LD_VAR 0 1
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PUSH
10112: LD_INT 50
10114: PUSH
10115: EMPTY
10116: LIST
10117: PUSH
10118: LD_INT 2
10120: PUSH
10121: LD_INT 30
10123: PUSH
10124: LD_INT 6
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: PUSH
10131: LD_INT 30
10133: PUSH
10134: LD_INT 7
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: PUSH
10141: LD_INT 30
10143: PUSH
10144: LD_INT 8
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: LIST
10161: PPUSH
10162: CALL_OW 70
10166: ST_TO_ADDR
// if lab then
10167: LD_VAR 0 18
10171: IFFALSE 10247
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
10173: LD_VAR 0 18
10177: PUSH
10178: LD_INT 1
10180: ARRAY
10181: PPUSH
10182: CALL_OW 461
10186: PUSH
10187: LD_INT 2
10189: EQUAL
10190: IFFALSE 10247
// begin for i in techs do
10192: LD_ADDR_VAR 0 15
10196: PUSH
10197: LD_VAR 0 8
10201: PUSH
10202: FOR_IN
10203: IFFALSE 10245
// if CanBeResearched ( lab [ 1 ] , i ) then
10205: LD_VAR 0 18
10209: PUSH
10210: LD_INT 1
10212: ARRAY
10213: PPUSH
10214: LD_VAR 0 15
10218: PPUSH
10219: CALL_OW 430
10223: IFFALSE 10243
// begin AddComResearch ( lab [ 1 ] , i ) ;
10225: LD_VAR 0 18
10229: PUSH
10230: LD_INT 1
10232: ARRAY
10233: PPUSH
10234: LD_VAR 0 15
10238: PPUSH
10239: CALL_OW 184
// end ;
10243: GO 10202
10245: POP
10246: POP
// end ; end ; end else
10247: GO 10829
// if UnitFilter ( fac , [ f_not , [ f_full ] ] ) and Count ( UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_tag , 0 ] , [ f_class , 4 ] ] ) ) > 2 then
10249: LD_VAR 0 36
10253: PPUSH
10254: LD_INT 3
10256: PUSH
10257: LD_INT 62
10259: PUSH
10260: EMPTY
10261: LIST
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PPUSH
10267: CALL_OW 72
10271: IFFALSE 10331
10273: PUSH
10274: LD_VAR 0 6
10278: PPUSH
10279: LD_INT 3
10281: PUSH
10282: LD_INT 60
10284: PUSH
10285: EMPTY
10286: LIST
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PUSH
10292: LD_INT 120
10294: PUSH
10295: LD_INT 0
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: LD_INT 25
10304: PUSH
10305: LD_INT 4
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: LIST
10316: PPUSH
10317: CALL_OW 72
10321: PPUSH
10322: CALL 40632 0 1
10326: PUSH
10327: LD_INT 2
10329: GREATER
10330: AND
10331: IFFALSE 10540
// begin tmp := UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_tag , 0 ] , [ f_class , 4 ] ] ) ;
10333: LD_ADDR_VAR 0 16
10337: PUSH
10338: LD_VAR 0 6
10342: PPUSH
10343: LD_INT 3
10345: PUSH
10346: LD_INT 60
10348: PUSH
10349: EMPTY
10350: LIST
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: LD_INT 120
10358: PUSH
10359: LD_INT 0
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: LD_INT 25
10368: PUSH
10369: LD_INT 4
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: LIST
10380: PPUSH
10381: CALL_OW 72
10385: ST_TO_ADDR
// for i := tmp downto 2 do
10386: LD_ADDR_VAR 0 15
10390: PUSH
10391: DOUBLE
10392: LD_VAR 0 16
10396: INC
10397: ST_TO_ADDR
10398: LD_INT 2
10400: PUSH
10401: FOR_DOWNTO
10402: IFFALSE 10536
// begin if Count ( UnitsInside ( fac [ 1 ] ) ) + Count ( UnitFilter ( forces , [ f_tag , tWannaBeMech ] ) ) = 6 then
10404: LD_VAR 0 36
10408: PUSH
10409: LD_INT 1
10411: ARRAY
10412: PPUSH
10413: CALL_OW 313
10417: PPUSH
10418: CALL 40632 0 1
10422: PUSH
10423: LD_VAR 0 6
10427: PPUSH
10428: LD_INT 120
10430: PUSH
10431: LD_INT 14
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: PPUSH
10438: CALL_OW 72
10442: PPUSH
10443: CALL 40632 0 1
10447: PLUS
10448: PUSH
10449: LD_INT 6
10451: EQUAL
10452: IFFALSE 10456
// break ;
10454: GO 10536
// sci := tmp [ i ] ;
10456: LD_ADDR_VAR 0 24
10460: PUSH
10461: LD_VAR 0 16
10465: PUSH
10466: LD_VAR 0 15
10470: ARRAY
10471: ST_TO_ADDR
// SetTag ( sci , tWannaBeMech ) ;
10472: LD_VAR 0 24
10476: PPUSH
10477: LD_INT 14
10479: PPUSH
10480: CALL_OW 109
// if IsInUnit ( sci ) then
10484: LD_VAR 0 24
10488: PPUSH
10489: CALL_OW 310
10493: IFFALSE 10504
// ComExitBuilding ( sci ) ;
10495: LD_VAR 0 24
10499: PPUSH
10500: CALL_OW 122
// AddComEnterUnit ( sci , fac [ 1 ] ) ;
10504: LD_VAR 0 24
10508: PPUSH
10509: LD_VAR 0 36
10513: PUSH
10514: LD_INT 1
10516: ARRAY
10517: PPUSH
10518: CALL_OW 180
// AddComChangeProfession ( sci , class_mechanic ) ;
10522: LD_VAR 0 24
10526: PPUSH
10527: LD_INT 3
10529: PPUSH
10530: CALL_OW 183
// end ;
10534: GO 10401
10536: POP
10537: POP
// end else
10538: GO 10829
// if UnitFilter ( barracks , [ f_not , [ f_full ] ] ) and Count ( UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_tag , 0 ] , [ f_class , 4 ] ] ) ) > 2 then
10540: LD_VAR 0 32
10544: PPUSH
10545: LD_INT 3
10547: PUSH
10548: LD_INT 62
10550: PUSH
10551: EMPTY
10552: LIST
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PPUSH
10558: CALL_OW 72
10562: IFFALSE 10622
10564: PUSH
10565: LD_VAR 0 6
10569: PPUSH
10570: LD_INT 3
10572: PUSH
10573: LD_INT 60
10575: PUSH
10576: EMPTY
10577: LIST
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: PUSH
10583: LD_INT 120
10585: PUSH
10586: LD_INT 0
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PUSH
10593: LD_INT 25
10595: PUSH
10596: LD_INT 4
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: PPUSH
10608: CALL_OW 72
10612: PPUSH
10613: CALL 40632 0 1
10617: PUSH
10618: LD_INT 2
10620: GREATER
10621: AND
10622: IFFALSE 10829
// begin tmp := UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_tag , 0 ] , [ f_class , 4 ] ] ) ;
10624: LD_ADDR_VAR 0 16
10628: PUSH
10629: LD_VAR 0 6
10633: PPUSH
10634: LD_INT 3
10636: PUSH
10637: LD_INT 60
10639: PUSH
10640: EMPTY
10641: LIST
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: PUSH
10647: LD_INT 120
10649: PUSH
10650: LD_INT 0
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PUSH
10657: LD_INT 25
10659: PUSH
10660: LD_INT 4
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: PUSH
10667: EMPTY
10668: LIST
10669: LIST
10670: LIST
10671: PPUSH
10672: CALL_OW 72
10676: ST_TO_ADDR
// for i := tmp downto 2 do
10677: LD_ADDR_VAR 0 15
10681: PUSH
10682: DOUBLE
10683: LD_VAR 0 16
10687: INC
10688: ST_TO_ADDR
10689: LD_INT 2
10691: PUSH
10692: FOR_DOWNTO
10693: IFFALSE 10827
// begin if Count ( UnitsInside ( barracks [ 1 ] ) ) + Count ( UnitFilter ( forces , [ f_tag , tWannaBeSold ] ) ) = 6 then
10695: LD_VAR 0 32
10699: PUSH
10700: LD_INT 1
10702: ARRAY
10703: PPUSH
10704: CALL_OW 313
10708: PPUSH
10709: CALL 40632 0 1
10713: PUSH
10714: LD_VAR 0 6
10718: PPUSH
10719: LD_INT 120
10721: PUSH
10722: LD_INT 16
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PPUSH
10729: CALL_OW 72
10733: PPUSH
10734: CALL 40632 0 1
10738: PLUS
10739: PUSH
10740: LD_INT 6
10742: EQUAL
10743: IFFALSE 10747
// break ;
10745: GO 10827
// sci := tmp [ i ] ;
10747: LD_ADDR_VAR 0 24
10751: PUSH
10752: LD_VAR 0 16
10756: PUSH
10757: LD_VAR 0 15
10761: ARRAY
10762: ST_TO_ADDR
// SetTag ( sci , tWannaBeSold ) ;
10763: LD_VAR 0 24
10767: PPUSH
10768: LD_INT 16
10770: PPUSH
10771: CALL_OW 109
// if IsInUnit ( sci ) then
10775: LD_VAR 0 24
10779: PPUSH
10780: CALL_OW 310
10784: IFFALSE 10795
// ComExitBuilding ( sci ) ;
10786: LD_VAR 0 24
10790: PPUSH
10791: CALL_OW 122
// AddComEnterUnit ( sci , barracks [ 1 ] ) ;
10795: LD_VAR 0 24
10799: PPUSH
10800: LD_VAR 0 32
10804: PUSH
10805: LD_INT 1
10807: ARRAY
10808: PPUSH
10809: CALL_OW 180
// AddComChangeProfession ( sci , class_soldier ) ;
10813: LD_VAR 0 24
10817: PPUSH
10818: LD_INT 1
10820: PPUSH
10821: CALL_OW 183
// end ;
10825: GO 10692
10827: POP
10828: POP
// end ; if fac then
10829: LD_VAR 0 36
10833: IFFALSE 11148
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
10835: LD_VAR 0 36
10839: PUSH
10840: LD_INT 1
10842: ARRAY
10843: PPUSH
10844: CALL_OW 461
10848: PUSH
10849: LD_INT 2
10851: EQUAL
10852: IFFALSE 11148
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
10854: LD_ADDR_VAR 0 37
10858: PUSH
10859: LD_VAR 0 2
10863: PPUSH
10864: LD_INT 2
10866: PUSH
10867: LD_INT 30
10869: PUSH
10870: LD_INT 32
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: PUSH
10877: LD_INT 30
10879: PUSH
10880: LD_INT 33
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: LIST
10891: PUSH
10892: LD_INT 35
10894: PUSH
10895: LD_INT 0
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: PPUSH
10906: CALL_OW 70
10910: ST_TO_ADDR
// if emptyTowers then
10911: LD_VAR 0 37
10915: IFFALSE 10965
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
10917: LD_ADDR_VAR 0 38
10921: PUSH
10922: LD_VAR 0 37
10926: PUSH
10927: LD_INT 1
10929: ARRAY
10930: PPUSH
10931: LD_VAR 0 2
10935: PPUSH
10936: CALL 48957 0 2
10940: ST_TO_ADDR
// if weapon then
10941: LD_VAR 0 38
10945: IFFALSE 10965
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
10947: LD_VAR 0 37
10951: PUSH
10952: LD_INT 1
10954: ARRAY
10955: PPUSH
10956: LD_VAR 0 38
10960: PPUSH
10961: CALL_OW 148
// end ; if constructList then
10965: LD_VAR 0 9
10969: IFFALSE 11148
// for i := 1 to Count ( constructList ) do
10971: LD_ADDR_VAR 0 15
10975: PUSH
10976: DOUBLE
10977: LD_INT 1
10979: DEC
10980: ST_TO_ADDR
10981: LD_VAR 0 9
10985: PPUSH
10986: CALL 40632 0 1
10990: PUSH
10991: FOR_TO
10992: IFFALSE 11146
// begin if CanBeConstructed ( fac [ 1 ] , constructList [ i ] [ 1 ] , constructList [ i ] [ 2 ] , constructList [ i ] [ 3 ] , constructList [ i ] [ 4 ] ) then
10994: LD_VAR 0 36
10998: PUSH
10999: LD_INT 1
11001: ARRAY
11002: PPUSH
11003: LD_VAR 0 9
11007: PUSH
11008: LD_VAR 0 15
11012: ARRAY
11013: PUSH
11014: LD_INT 1
11016: ARRAY
11017: PPUSH
11018: LD_VAR 0 9
11022: PUSH
11023: LD_VAR 0 15
11027: ARRAY
11028: PUSH
11029: LD_INT 2
11031: ARRAY
11032: PPUSH
11033: LD_VAR 0 9
11037: PUSH
11038: LD_VAR 0 15
11042: ARRAY
11043: PUSH
11044: LD_INT 3
11046: ARRAY
11047: PPUSH
11048: LD_VAR 0 9
11052: PUSH
11053: LD_VAR 0 15
11057: ARRAY
11058: PUSH
11059: LD_INT 4
11061: ARRAY
11062: PPUSH
11063: CALL_OW 448
11067: IFFALSE 11144
// begin ComConstruct ( fac [ 1 ] , constructList [ i ] [ 1 ] , constructList [ i ] [ 2 ] , constructList [ i ] [ 3 ] , constructList [ i ] [ 4 ] ) ;
11069: LD_VAR 0 36
11073: PUSH
11074: LD_INT 1
11076: ARRAY
11077: PPUSH
11078: LD_VAR 0 9
11082: PUSH
11083: LD_VAR 0 15
11087: ARRAY
11088: PUSH
11089: LD_INT 1
11091: ARRAY
11092: PPUSH
11093: LD_VAR 0 9
11097: PUSH
11098: LD_VAR 0 15
11102: ARRAY
11103: PUSH
11104: LD_INT 2
11106: ARRAY
11107: PPUSH
11108: LD_VAR 0 9
11112: PUSH
11113: LD_VAR 0 15
11117: ARRAY
11118: PUSH
11119: LD_INT 3
11121: ARRAY
11122: PPUSH
11123: LD_VAR 0 9
11127: PUSH
11128: LD_VAR 0 15
11132: ARRAY
11133: PUSH
11134: LD_INT 4
11136: ARRAY
11137: PPUSH
11138: CALL_OW 125
// break ;
11142: GO 11146
// end ; end ;
11144: GO 10991
11146: POP
11147: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11148: LD_ADDR_VAR 0 16
11152: PUSH
11153: LD_VAR 0 2
11157: PPUSH
11158: LD_INT 22
11160: PUSH
11161: LD_VAR 0 1
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: LD_INT 21
11172: PUSH
11173: LD_INT 3
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PUSH
11180: LD_INT 3
11182: PUSH
11183: LD_INT 57
11185: PUSH
11186: EMPTY
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PUSH
11193: LD_INT 3
11195: PUSH
11196: LD_INT 24
11198: PUSH
11199: LD_INT 1000
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: PPUSH
11216: CALL_OW 70
11220: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
11221: LD_ADDR_VAR 0 23
11225: PUSH
11226: LD_VAR 0 2
11230: PPUSH
11231: CALL_OW 435
11235: ST_TO_ADDR
// if cratesArea then
11236: LD_VAR 0 3
11240: IFFALSE 11263
// cr := cr union GetListOfCratesInArea ( cratesArea ) ;
11242: LD_ADDR_VAR 0 23
11246: PUSH
11247: LD_VAR 0 23
11251: PUSH
11252: LD_VAR 0 3
11256: PPUSH
11257: CALL_OW 435
11261: UNION
11262: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
11263: LD_ADDR_VAR 0 20
11267: PUSH
11268: LD_VAR 0 6
11272: PPUSH
11273: LD_INT 25
11275: PUSH
11276: LD_INT 3
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PUSH
11283: LD_INT 50
11285: PUSH
11286: EMPTY
11287: LIST
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PPUSH
11293: CALL_OW 72
11297: ST_TO_ADDR
// if fac then
11298: LD_VAR 0 36
11302: IFFALSE 11459
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_tag , tControlRemoteMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
11304: LD_VAR 0 20
11308: PPUSH
11309: LD_INT 3
11311: PUSH
11312: LD_INT 120
11314: PUSH
11315: LD_INT 7
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: PUSH
11326: LD_INT 3
11328: PUSH
11329: LD_INT 120
11331: PUSH
11332: LD_INT 17
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PUSH
11343: LD_INT 3
11345: PUSH
11346: LD_INT 54
11348: PUSH
11349: EMPTY
11350: LIST
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: LIST
11360: PPUSH
11361: CALL_OW 72
11365: IFFALSE 11382
11367: PUSH
11368: LD_VAR 0 36
11372: PUSH
11373: LD_INT 1
11375: ARRAY
11376: PPUSH
11377: CALL_OW 302
11381: AND
11382: IFFALSE 11459
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_tag , tControlRemoteMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
11384: LD_VAR 0 20
11388: PPUSH
11389: LD_INT 3
11391: PUSH
11392: LD_INT 120
11394: PUSH
11395: LD_INT 7
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PUSH
11406: LD_INT 3
11408: PUSH
11409: LD_INT 120
11411: PUSH
11412: LD_INT 17
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PUSH
11423: LD_INT 3
11425: PUSH
11426: LD_INT 54
11428: PUSH
11429: EMPTY
11430: LIST
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: LIST
11440: PPUSH
11441: CALL_OW 72
11445: PPUSH
11446: LD_VAR 0 36
11450: PUSH
11451: LD_INT 1
11453: ARRAY
11454: PPUSH
11455: CALL_OW 120
// ct := FilterUnitsInArea ( area , [ [ f_ok ] , [ f_not , [ f_full ] ] , [ f_btype , b_control_tower ] ] ) ;
11459: LD_ADDR_VAR 0 30
11463: PUSH
11464: LD_VAR 0 2
11468: PPUSH
11469: LD_INT 50
11471: PUSH
11472: EMPTY
11473: LIST
11474: PUSH
11475: LD_INT 3
11477: PUSH
11478: LD_INT 62
11480: PUSH
11481: EMPTY
11482: LIST
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: PUSH
11488: LD_INT 30
11490: PUSH
11491: LD_INT 36
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: LIST
11502: PPUSH
11503: CALL_OW 70
11507: ST_TO_ADDR
// if ct then
11508: LD_VAR 0 30
11512: IFFALSE 11668
// if Count ( UnitFilter ( mech , [ [ f_tag , tControlRemoteMech ] , [ f_class , 3 ] ] ) ) < 3 then
11514: LD_VAR 0 20
11518: PPUSH
11519: LD_INT 120
11521: PUSH
11522: LD_INT 17
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: LD_INT 25
11531: PUSH
11532: LD_INT 3
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PPUSH
11543: CALL_OW 72
11547: PPUSH
11548: CALL 40632 0 1
11552: PUSH
11553: LD_INT 3
11555: LESS
11556: IFFALSE 11668
// begin tmp := UnitFilter ( mech , [ [ f_not , [ f_hastask ] ] , [ f_tag , 0 ] , [ f_class , 3 ] ] ) ;
11558: LD_ADDR_VAR 0 16
11562: PUSH
11563: LD_VAR 0 20
11567: PPUSH
11568: LD_INT 3
11570: PUSH
11571: LD_INT 60
11573: PUSH
11574: EMPTY
11575: LIST
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: LD_INT 120
11583: PUSH
11584: LD_INT 0
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: LD_INT 25
11593: PUSH
11594: LD_INT 3
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: LIST
11605: PPUSH
11606: CALL_OW 72
11610: ST_TO_ADDR
// if tmp then
11611: LD_VAR 0 16
11615: IFFALSE 11668
// begin SetTag ( tmp [ 1 ] , tControlRemoteMech ) ;
11617: LD_VAR 0 16
11621: PUSH
11622: LD_INT 1
11624: ARRAY
11625: PPUSH
11626: LD_INT 17
11628: PPUSH
11629: CALL_OW 109
// ComExit ( tmp [ 1 ] ) ;
11633: LD_VAR 0 16
11637: PUSH
11638: LD_INT 1
11640: ARRAY
11641: PPUSH
11642: CALL 77006 0 1
// AddComEnterUnit ( tmp [ 1 ] , ct [ 1 ] ) ;
11646: LD_VAR 0 16
11650: PUSH
11651: LD_INT 1
11653: ARRAY
11654: PPUSH
11655: LD_VAR 0 30
11659: PUSH
11660: LD_INT 1
11662: ARRAY
11663: PPUSH
11664: CALL_OW 180
// end ; end ; sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_not , [ f_tag , tWannaBeSold ] ] , [ f_not , [ f_tag , tWannaBeMech ] ] , [ f_ok ] ] ) ;
11668: LD_ADDR_VAR 0 24
11672: PUSH
11673: LD_VAR 0 6
11677: PPUSH
11678: LD_INT 25
11680: PUSH
11681: LD_INT 4
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PUSH
11688: LD_INT 3
11690: PUSH
11691: LD_INT 120
11693: PUSH
11694: LD_INT 16
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: PUSH
11705: LD_INT 3
11707: PUSH
11708: LD_INT 120
11710: PUSH
11711: LD_INT 14
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: PUSH
11722: LD_INT 50
11724: PUSH
11725: EMPTY
11726: LIST
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: PPUSH
11734: CALL_OW 72
11738: ST_TO_ADDR
// lab := FilterUnitsInarea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
11739: LD_ADDR_VAR 0 18
11743: PUSH
11744: LD_VAR 0 2
11748: PPUSH
11749: LD_INT 2
11751: PUSH
11752: LD_INT 30
11754: PUSH
11755: LD_INT 6
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: PUSH
11762: LD_INT 30
11764: PUSH
11765: LD_INT 7
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 30
11774: PUSH
11775: LD_INT 8
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: PPUSH
11788: CALL_OW 70
11792: ST_TO_ADDR
// if sci then
11793: LD_VAR 0 24
11797: IFFALSE 12020
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) union UnitFilter ( forces , [ [ f_inarea , area ] , [ f_not , [ f_lives , 250 ] ] ] ) ;
11799: LD_ADDR_VAR 0 27
11803: PUSH
11804: LD_VAR 0 6
11808: PPUSH
11809: LD_INT 95
11811: PUSH
11812: LD_VAR 0 2
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: LD_INT 120
11823: PUSH
11824: LD_INT 1
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: PPUSH
11835: CALL_OW 72
11839: PUSH
11840: LD_VAR 0 6
11844: PPUSH
11845: LD_INT 95
11847: PUSH
11848: LD_VAR 0 2
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: PUSH
11857: LD_INT 3
11859: PUSH
11860: LD_INT 24
11862: PUSH
11863: LD_INT 250
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PPUSH
11878: CALL_OW 72
11882: UNION
11883: ST_TO_ADDR
// if hurtUnits then
11884: LD_VAR 0 27
11888: IFFALSE 11967
// begin hurtUnits := SortByHealth ( hurtUnits , true ) ;
11890: LD_ADDR_VAR 0 27
11894: PUSH
11895: LD_VAR 0 27
11899: PPUSH
11900: LD_INT 1
11902: PPUSH
11903: CALL 78566 0 2
11907: ST_TO_ADDR
// for i in sci do
11908: LD_ADDR_VAR 0 15
11912: PUSH
11913: LD_VAR 0 24
11917: PUSH
11918: FOR_IN
11919: IFFALSE 11963
// if IsInUnit ( i ) then
11921: LD_VAR 0 15
11925: PPUSH
11926: CALL_OW 310
11930: IFFALSE 11943
// ComExitBuilding ( i ) else
11932: LD_VAR 0 15
11936: PPUSH
11937: CALL_OW 122
11941: GO 11961
// ComHeal ( i , hurtUnits [ 1 ] ) ;
11943: LD_VAR 0 15
11947: PPUSH
11948: LD_VAR 0 27
11952: PUSH
11953: LD_INT 1
11955: ARRAY
11956: PPUSH
11957: CALL_OW 128
11961: GO 11918
11963: POP
11964: POP
// end else
11965: GO 12020
// if lab then
11967: LD_VAR 0 18
11971: IFFALSE 12020
// begin for i in sci do
11973: LD_ADDR_VAR 0 15
11977: PUSH
11978: LD_VAR 0 24
11982: PUSH
11983: FOR_IN
11984: IFFALSE 12018
// if not IsInUnit ( i ) then
11986: LD_VAR 0 15
11990: PPUSH
11991: CALL_OW 310
11995: NOT
11996: IFFALSE 12016
// ComEnterUnit ( i , lab [ 1 ] ) ;
11998: LD_VAR 0 15
12002: PPUSH
12003: LD_VAR 0 18
12007: PUSH
12008: LD_INT 1
12010: ARRAY
12011: PPUSH
12012: CALL_OW 120
12016: GO 11983
12018: POP
12019: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
12020: LD_ADDR_VAR 0 19
12024: PUSH
12025: LD_VAR 0 6
12029: PPUSH
12030: LD_INT 25
12032: PUSH
12033: LD_INT 2
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PPUSH
12040: CALL_OW 72
12044: ST_TO_ADDR
// if eng then
12045: LD_VAR 0 19
12049: IFFALSE 13268
// begin for i in eng do
12051: LD_ADDR_VAR 0 15
12055: PUSH
12056: LD_VAR 0 19
12060: PUSH
12061: FOR_IN
12062: IFFALSE 13266
// begin tag := GetTag ( i ) ;
12064: LD_ADDR_VAR 0 21
12068: PUSH
12069: LD_VAR 0 15
12073: PPUSH
12074: CALL_OW 110
12078: ST_TO_ADDR
// if IsInArea ( i , outerArea ) and not tCrates then
12079: LD_VAR 0 15
12083: PPUSH
12084: LD_VAR 0 5
12088: PPUSH
12089: CALL_OW 308
12093: IFFALSE 12100
12095: PUSH
12096: LD_INT 2
12098: NOT
12099: AND
12100: IFFALSE 12131
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
12102: LD_VAR 0 15
12106: PPUSH
12107: LD_VAR 0 12
12111: PUSH
12112: LD_INT 1
12114: ARRAY
12115: PPUSH
12116: LD_VAR 0 12
12120: PUSH
12121: LD_INT 2
12123: ARRAY
12124: PPUSH
12125: CALL_OW 111
// continue ;
12129: GO 12061
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
12131: LD_VAR 0 15
12135: PPUSH
12136: CALL_OW 256
12140: PUSH
12141: LD_INT 800
12143: LESS
12144: IFFALSE 12156
12146: PUSH
12147: LD_VAR 0 21
12151: PUSH
12152: LD_INT 1
12154: NONEQUAL
12155: AND
12156: IFFALSE 12206
// begin SetTag ( i , tHeal ) ;
12158: LD_VAR 0 15
12162: PPUSH
12163: LD_INT 1
12165: PPUSH
12166: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
12170: LD_VAR 0 15
12174: PPUSH
12175: LD_VAR 0 11
12179: PUSH
12180: LD_INT 1
12182: ARRAY
12183: PPUSH
12184: LD_VAR 0 11
12188: PUSH
12189: LD_INT 2
12191: ARRAY
12192: PPUSH
12193: CALL_OW 111
// AddComHold ( i ) ;
12197: LD_VAR 0 15
12201: PPUSH
12202: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
12206: LD_VAR 0 21
12210: PUSH
12211: LD_INT 1
12213: EQUAL
12214: IFFALSE 12231
12216: PUSH
12217: LD_VAR 0 15
12221: PPUSH
12222: CALL_OW 256
12226: PUSH
12227: LD_INT 1000
12229: EQUAL
12230: AND
12231: IFFALSE 12245
// SetTag ( i , 0 ) ;
12233: LD_VAR 0 15
12237: PPUSH
12238: LD_INT 0
12240: PPUSH
12241: CALL_OW 109
// if not tag then
12245: LD_VAR 0 21
12249: NOT
12250: IFFALSE 12421
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
12252: LD_ADDR_VAR 0 17
12256: PUSH
12257: LD_VAR 0 2
12261: PPUSH
12262: LD_INT 57
12264: PUSH
12265: EMPTY
12266: LIST
12267: PPUSH
12268: CALL_OW 70
12272: ST_TO_ADDR
// if undone then
12273: LD_VAR 0 17
12277: IFFALSE 12299
// begin ComComplete ( i , undone [ 1 ] ) ;
12279: LD_VAR 0 15
12283: PPUSH
12284: LD_VAR 0 17
12288: PUSH
12289: LD_INT 1
12291: ARRAY
12292: PPUSH
12293: CALL 46802 0 2
// continue ;
12297: GO 12061
// end ; if cr or tmp or buildingsToBuild then
12299: LD_VAR 0 23
12303: IFTRUE 12311
12305: PUSH
12306: LD_VAR 0 16
12310: OR
12311: IFTRUE 12319
12313: PUSH
12314: LD_VAR 0 10
12318: OR
12319: IFFALSE 12395
// begin if IsInUnit ( i ) then
12321: LD_VAR 0 15
12325: PPUSH
12326: CALL_OW 310
12330: IFFALSE 12341
// ComExitBuilding ( i ) ;
12332: LD_VAR 0 15
12336: PPUSH
12337: CALL_OW 122
// if tmp then
12341: LD_VAR 0 16
12345: IFFALSE 12361
// SetTag ( i , tRepair ) else
12347: LD_VAR 0 15
12351: PPUSH
12352: LD_INT 3
12354: PPUSH
12355: CALL_OW 109
12359: GO 12393
// if cr then
12361: LD_VAR 0 23
12365: IFFALSE 12381
// SetTag ( i , tCrates ) else
12367: LD_VAR 0 15
12371: PPUSH
12372: LD_INT 2
12374: PPUSH
12375: CALL_OW 109
12379: GO 12393
// SetTag ( i , tBuild ) ;
12381: LD_VAR 0 15
12385: PPUSH
12386: LD_INT 5
12388: PPUSH
12389: CALL_OW 109
// end else
12393: GO 12421
// if not IsInUnit ( i ) then
12395: LD_VAR 0 15
12399: PPUSH
12400: CALL_OW 310
12404: NOT
12405: IFFALSE 12421
// ComEnterUnit ( i , depot ) ;
12407: LD_VAR 0 15
12411: PPUSH
12412: LD_VAR 0 39
12416: PPUSH
12417: CALL_OW 120
// end ; if tag = tRepair then
12421: LD_VAR 0 21
12425: PUSH
12426: LD_INT 3
12428: EQUAL
12429: IFFALSE 12535
// begin if IsInUnit ( i ) then
12431: LD_VAR 0 15
12435: PPUSH
12436: CALL_OW 310
12440: IFFALSE 12453
// begin ComExitBuilding ( i ) ;
12442: LD_VAR 0 15
12446: PPUSH
12447: CALL_OW 122
// continue ;
12451: GO 12061
// end ; if not tmp then
12453: LD_VAR 0 16
12457: NOT
12458: IFFALSE 12474
// begin SetTag ( i , 0 ) ;
12460: LD_VAR 0 15
12464: PPUSH
12465: LD_INT 0
12467: PPUSH
12468: CALL_OW 109
// continue ;
12472: GO 12061
// end ; if not HasTask ( i ) then
12474: LD_VAR 0 15
12478: PPUSH
12479: CALL_OW 314
12483: NOT
12484: IFFALSE 12504
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
12486: LD_VAR 0 15
12490: PPUSH
12491: LD_VAR 0 16
12495: PUSH
12496: LD_INT 1
12498: ARRAY
12499: PPUSH
12500: CALL_OW 130
// if not IsInarea ( i , area ) then
12504: LD_VAR 0 15
12508: PPUSH
12509: LD_VAR 0 2
12513: PPUSH
12514: CALL_OW 308
12518: NOT
12519: IFFALSE 12535
// ComMoveToArea ( i , area ) ;
12521: LD_VAR 0 15
12525: PPUSH
12526: LD_VAR 0 2
12530: PPUSH
12531: CALL_OW 113
// end ; if tag = tBuild then
12535: LD_VAR 0 21
12539: PUSH
12540: LD_INT 5
12542: EQUAL
12543: IFFALSE 13117
// begin if IsInUnit ( i ) then
12545: LD_VAR 0 15
12549: PPUSH
12550: CALL_OW 310
12554: IFFALSE 12567
// begin ComExitBuilding ( i ) ;
12556: LD_VAR 0 15
12560: PPUSH
12561: CALL_OW 122
// continue ;
12565: GO 12061
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
12567: LD_VAR 0 10
12571: NOT
12572: IFTRUE 12580
12574: PUSH
12575: LD_VAR 0 33
12579: OR
12580: IFTRUE 12588
12582: PUSH
12583: LD_VAR 0 34
12587: OR
12588: IFFALSE 12606
// begin SetTag ( i , 0 ) ;
12590: LD_VAR 0 15
12594: PPUSH
12595: LD_INT 0
12597: PPUSH
12598: CALL_OW 109
// continue ;
12602: GO 12061
// end else
12604: GO 12645
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
12606: LD_VAR 0 39
12610: PPUSH
12611: LD_VAR 0 10
12615: PUSH
12616: LD_INT 1
12618: ARRAY
12619: PUSH
12620: LD_INT 1
12622: ARRAY
12623: PPUSH
12624: CALL 80703 0 2
12628: NOT
12629: IFFALSE 12645
// begin SetTag ( i , 0 ) ;
12631: LD_VAR 0 15
12635: PPUSH
12636: LD_INT 0
12638: PPUSH
12639: CALL_OW 109
// continue ;
12643: GO 12061
// end ; undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
12645: LD_ADDR_VAR 0 17
12649: PUSH
12650: LD_VAR 0 2
12654: PPUSH
12655: LD_INT 57
12657: PUSH
12658: EMPTY
12659: LIST
12660: PPUSH
12661: CALL_OW 70
12665: ST_TO_ADDR
// if undone then
12666: LD_VAR 0 17
12670: IFFALSE 12692
// begin ComComplete ( i , undone [ 1 ] ) ;
12672: LD_VAR 0 15
12676: PPUSH
12677: LD_VAR 0 17
12681: PUSH
12682: LD_INT 1
12684: ARRAY
12685: PPUSH
12686: CALL 46802 0 2
// continue ;
12690: GO 12061
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_factory , b_barracks ] then
12692: LD_VAR 0 10
12696: PUSH
12697: LD_INT 1
12699: ARRAY
12700: PUSH
12701: LD_INT 1
12703: ARRAY
12704: PUSH
12705: LD_INT 3
12707: PUSH
12708: LD_INT 5
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: IN
12715: IFFALSE 12812
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) and CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
12717: LD_VAR 0 10
12721: PUSH
12722: LD_INT 1
12724: ARRAY
12725: PUSH
12726: LD_INT 2
12728: ARRAY
12729: PPUSH
12730: LD_VAR 0 10
12734: PUSH
12735: LD_INT 1
12737: ARRAY
12738: PUSH
12739: LD_INT 3
12741: ARRAY
12742: PPUSH
12743: CALL_OW 428
12747: IFFALSE 12773
12749: PUSH
12750: LD_VAR 0 39
12754: PPUSH
12755: LD_VAR 0 10
12759: PUSH
12760: LD_INT 1
12762: ARRAY
12763: PUSH
12764: LD_INT 1
12766: ARRAY
12767: PPUSH
12768: CALL 80703 0 2
12772: AND
12773: IFFALSE 12810
// begin ComUpgrade ( HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) ) ;
12775: LD_VAR 0 10
12779: PUSH
12780: LD_INT 1
12782: ARRAY
12783: PUSH
12784: LD_INT 2
12786: ARRAY
12787: PPUSH
12788: LD_VAR 0 10
12792: PUSH
12793: LD_INT 1
12795: ARRAY
12796: PUSH
12797: LD_INT 3
12799: ARRAY
12800: PPUSH
12801: CALL_OW 428
12805: PPUSH
12806: CALL_OW 146
// end ; continue ;
12810: GO 12061
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_lab_half , b_lab_full ] then
12812: LD_VAR 0 10
12816: PUSH
12817: LD_INT 1
12819: ARRAY
12820: PUSH
12821: LD_INT 1
12823: ARRAY
12824: PUSH
12825: LD_INT 7
12827: PUSH
12828: LD_INT 8
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: IN
12835: IFFALSE 12945
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) and CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
12837: LD_VAR 0 10
12841: PUSH
12842: LD_INT 1
12844: ARRAY
12845: PUSH
12846: LD_INT 2
12848: ARRAY
12849: PPUSH
12850: LD_VAR 0 10
12854: PUSH
12855: LD_INT 1
12857: ARRAY
12858: PUSH
12859: LD_INT 3
12861: ARRAY
12862: PPUSH
12863: CALL_OW 428
12867: IFFALSE 12893
12869: PUSH
12870: LD_VAR 0 39
12874: PPUSH
12875: LD_VAR 0 10
12879: PUSH
12880: LD_INT 1
12882: ARRAY
12883: PUSH
12884: LD_INT 1
12886: ARRAY
12887: PPUSH
12888: CALL 80703 0 2
12892: AND
12893: IFFALSE 12943
// begin ComUpgradeLab ( HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) , buildingsToBuild [ 1 ] [ 5 ] ) ;
12895: LD_VAR 0 10
12899: PUSH
12900: LD_INT 1
12902: ARRAY
12903: PUSH
12904: LD_INT 2
12906: ARRAY
12907: PPUSH
12908: LD_VAR 0 10
12912: PUSH
12913: LD_INT 1
12915: ARRAY
12916: PUSH
12917: LD_INT 3
12919: ARRAY
12920: PPUSH
12921: CALL_OW 428
12925: PPUSH
12926: LD_VAR 0 10
12930: PUSH
12931: LD_INT 1
12933: ARRAY
12934: PUSH
12935: LD_INT 5
12937: ARRAY
12938: PPUSH
12939: CALL_OW 147
// end ; continue ;
12943: GO 12061
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_bunker , b_turret ] then
12945: LD_VAR 0 10
12949: PUSH
12950: LD_INT 1
12952: ARRAY
12953: PUSH
12954: LD_INT 1
12956: ARRAY
12957: PUSH
12958: LD_INT 32
12960: PUSH
12961: LD_INT 33
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: IN
12968: IFFALSE 13044
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) then
12970: LD_VAR 0 10
12974: PUSH
12975: LD_INT 1
12977: ARRAY
12978: PUSH
12979: LD_INT 2
12981: ARRAY
12982: PPUSH
12983: LD_VAR 0 10
12987: PUSH
12988: LD_INT 1
12990: ARRAY
12991: PUSH
12992: LD_INT 3
12994: ARRAY
12995: PPUSH
12996: CALL_OW 428
13000: IFFALSE 13044
// begin ComDismantle ( i , HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) ) ;
13002: LD_VAR 0 15
13006: PPUSH
13007: LD_VAR 0 10
13011: PUSH
13012: LD_INT 1
13014: ARRAY
13015: PUSH
13016: LD_INT 2
13018: ARRAY
13019: PPUSH
13020: LD_VAR 0 10
13024: PUSH
13025: LD_INT 1
13027: ARRAY
13028: PUSH
13029: LD_INT 3
13031: ARRAY
13032: PPUSH
13033: CALL_OW 428
13037: PPUSH
13038: CALL_OW 167
// continue ;
13042: GO 12061
// end ; end ; if not HasTask ( i ) then
13044: LD_VAR 0 15
13048: PPUSH
13049: CALL_OW 314
13053: NOT
13054: IFFALSE 13117
// ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
13056: LD_VAR 0 15
13060: PPUSH
13061: LD_VAR 0 10
13065: PUSH
13066: LD_INT 1
13068: ARRAY
13069: PUSH
13070: LD_INT 1
13072: ARRAY
13073: PPUSH
13074: LD_VAR 0 10
13078: PUSH
13079: LD_INT 1
13081: ARRAY
13082: PUSH
13083: LD_INT 2
13085: ARRAY
13086: PPUSH
13087: LD_VAR 0 10
13091: PUSH
13092: LD_INT 1
13094: ARRAY
13095: PUSH
13096: LD_INT 3
13098: ARRAY
13099: PPUSH
13100: LD_VAR 0 10
13104: PUSH
13105: LD_INT 1
13107: ARRAY
13108: PUSH
13109: LD_INT 4
13111: ARRAY
13112: PPUSH
13113: CALL_OW 145
// end ; if tag = tCrates then
13117: LD_VAR 0 21
13121: PUSH
13122: LD_INT 2
13124: EQUAL
13125: IFFALSE 13264
// begin if IsInUnit ( i ) then
13127: LD_VAR 0 15
13131: PPUSH
13132: CALL_OW 310
13136: IFFALSE 13149
// begin ComExitBuilding ( i ) ;
13138: LD_VAR 0 15
13142: PPUSH
13143: CALL_OW 122
// continue ;
13147: GO 12061
// end ; if not cr then
13149: LD_VAR 0 23
13153: NOT
13154: IFFALSE 13170
// begin SetTag ( i , 0 ) ;
13156: LD_VAR 0 15
13160: PPUSH
13161: LD_INT 0
13163: PPUSH
13164: CALL_OW 109
// continue ;
13168: GO 12061
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
13170: LD_VAR 0 15
13174: PPUSH
13175: CALL_OW 314
13179: NOT
13180: IFFALSE 13235
13182: PUSH
13183: LD_INT 81
13185: PUSH
13186: LD_VAR 0 1
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: PUSH
13195: LD_INT 92
13197: PUSH
13198: LD_VAR 0 23
13202: PUSH
13203: LD_INT 1
13205: ARRAY
13206: PUSH
13207: LD_VAR 0 23
13211: PUSH
13212: LD_INT 2
13214: ARRAY
13215: PUSH
13216: LD_INT 12
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PPUSH
13229: CALL_OW 69
13233: NOT
13234: AND
13235: IFFALSE 13264
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
13237: LD_VAR 0 15
13241: PPUSH
13242: LD_VAR 0 23
13246: PUSH
13247: LD_INT 1
13249: ARRAY
13250: PPUSH
13251: LD_VAR 0 23
13255: PUSH
13256: LD_INT 2
13258: ARRAY
13259: PPUSH
13260: CALL_OW 117
// end ; end ;
13264: GO 12061
13266: POP
13267: POP
// end ; cranes := UnitFilter ( vehicles , [ [ f_weapon , us_crane ] , [ f_ok ] ] ) ;
13268: LD_ADDR_VAR 0 31
13272: PUSH
13273: LD_VAR 0 7
13277: PPUSH
13278: LD_INT 34
13280: PUSH
13281: LD_INT 13
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PUSH
13288: LD_INT 50
13290: PUSH
13291: EMPTY
13292: LIST
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PPUSH
13298: CALL_OW 72
13302: ST_TO_ADDR
// if cranes then
13303: LD_VAR 0 31
13307: IFFALSE 13372
// begin if tmp then
13309: LD_VAR 0 16
13313: IFFALSE 13358
// begin for i in cranes do
13315: LD_ADDR_VAR 0 15
13319: PUSH
13320: LD_VAR 0 31
13324: PUSH
13325: FOR_IN
13326: IFFALSE 13354
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
13328: LD_VAR 0 15
13332: PPUSH
13333: LD_VAR 0 16
13337: PPUSH
13338: LD_VAR 0 15
13342: PPUSH
13343: CALL_OW 74
13347: PPUSH
13348: CALL_OW 130
13352: GO 13325
13354: POP
13355: POP
// end else
13356: GO 13372
// ComBackOnParking ( cranes , parkingPoint ) ;
13358: LD_VAR 0 31
13362: PPUSH
13363: LD_VAR 0 12
13367: PPUSH
13368: CALL 81605 0 2
// end ; vehicles2 := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] ] ) ;
13372: LD_ADDR_VAR 0 29
13376: PUSH
13377: LD_INT 22
13379: PUSH
13380: LD_VAR 0 1
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: LD_INT 33
13391: PUSH
13392: LD_INT 2
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: PPUSH
13403: CALL_OW 69
13407: ST_TO_ADDR
// if vehicles2 then
13408: LD_VAR 0 29
13412: IFFALSE 13479
// for i in UnitFilter ( vehicles2 , [ [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do
13414: LD_ADDR_VAR 0 15
13418: PUSH
13419: LD_VAR 0 29
13423: PPUSH
13424: LD_INT 33
13426: PUSH
13427: LD_INT 2
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 50
13436: PUSH
13437: EMPTY
13438: LIST
13439: PUSH
13440: LD_INT 3
13442: PUSH
13443: LD_INT 61
13445: PUSH
13446: EMPTY
13447: LIST
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: LIST
13457: PPUSH
13458: CALL_OW 72
13462: PUSH
13463: FOR_IN
13464: IFFALSE 13477
// Connect ( i ) ;
13466: LD_VAR 0 15
13470: PPUSH
13471: CALL 46910 0 1
13475: GO 13463
13477: POP
13478: POP
// if vehicles then
13479: LD_VAR 0 7
13483: IFFALSE 14545
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ru_crane ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , us_cargo_bay ] ] ] , [ f_ok ] ] ) ;
13485: LD_ADDR_VAR 0 7
13489: PUSH
13490: LD_VAR 0 7
13494: PPUSH
13495: LD_INT 3
13497: PUSH
13498: LD_INT 2
13500: PUSH
13501: LD_INT 34
13503: PUSH
13504: LD_INT 52
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: PUSH
13511: LD_INT 34
13513: PUSH
13514: LD_INT 51
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: LD_INT 34
13523: PUSH
13524: LD_INT 13
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: PUSH
13531: LD_INT 34
13533: PUSH
13534: LD_INT 12
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: PUSH
13552: LD_INT 50
13554: PUSH
13555: EMPTY
13556: LIST
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: PPUSH
13562: CALL_OW 72
13566: ST_TO_ADDR
// if vehicles then
13567: LD_VAR 0 7
13571: IFFALSE 14545
// begin for i in vehicles do
13573: LD_ADDR_VAR 0 15
13577: PUSH
13578: LD_VAR 0 7
13582: PUSH
13583: FOR_IN
13584: IFFALSE 14543
// begin tag := GetTag ( i ) ;
13586: LD_ADDR_VAR 0 21
13590: PUSH
13591: LD_VAR 0 15
13595: PPUSH
13596: CALL_OW 110
13600: ST_TO_ADDR
// if not tag then
13601: LD_VAR 0 21
13605: NOT
13606: IFFALSE 13743
// begin if GetControl ( i ) = control_manual then
13608: LD_VAR 0 15
13612: PPUSH
13613: CALL_OW 263
13617: PUSH
13618: LD_INT 1
13620: EQUAL
13621: IFFALSE 13729
// begin drivers := UnitFilter ( mech , [ f_tag , tMech ] ) ;
13623: LD_ADDR_VAR 0 26
13627: PUSH
13628: LD_VAR 0 20
13632: PPUSH
13633: LD_INT 120
13635: PUSH
13636: LD_INT 7
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PPUSH
13643: CALL_OW 72
13647: ST_TO_ADDR
// if not drivers then
13648: LD_VAR 0 26
13652: NOT
13653: IFFALSE 13709
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
13655: LD_ADDR_VAR 0 26
13659: PUSH
13660: LD_VAR 0 20
13664: PPUSH
13665: LD_INT 3
13667: PUSH
13668: LD_INT 120
13670: PUSH
13671: LD_INT 7
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PPUSH
13682: CALL_OW 72
13686: ST_TO_ADDR
// if drivers then
13687: LD_VAR 0 26
13691: IFFALSE 13709
// begin SetTag ( drivers [ 1 ] , tMech ) ;
13693: LD_VAR 0 26
13697: PUSH
13698: LD_INT 1
13700: ARRAY
13701: PPUSH
13702: LD_INT 7
13704: PPUSH
13705: CALL_OW 109
// end ; end ; if drivers then
13709: LD_VAR 0 26
13713: IFFALSE 13727
// SetTag ( i , tBusy ) ;
13715: LD_VAR 0 15
13719: PPUSH
13720: LD_INT 8
13722: PPUSH
13723: CALL_OW 109
// continue ;
13727: GO 13583
// end ; SetTag ( i , tBusy ) ;
13729: LD_VAR 0 15
13733: PPUSH
13734: LD_INT 8
13736: PPUSH
13737: CALL_OW 109
// end else
13741: GO 14541
// if tag = tBusy then
13743: LD_VAR 0 21
13747: PUSH
13748: LD_INT 8
13750: EQUAL
13751: IFFALSE 14006
// begin if GetLives ( i ) = 1000 then
13753: LD_VAR 0 15
13757: PPUSH
13758: CALL_OW 256
13762: PUSH
13763: LD_INT 1000
13765: EQUAL
13766: IFFALSE 14004
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
13768: LD_VAR 0 15
13772: PPUSH
13773: CALL_OW 263
13777: PUSH
13778: LD_INT 1
13780: EQUAL
13781: IFFALSE 13795
13783: PUSH
13784: LD_VAR 0 15
13788: PPUSH
13789: CALL_OW 311
13793: NOT
13794: AND
13795: IFFALSE 13972
// begin drivers := UnitFilter ( mech , [ f_tag , tMech ] ) ;
13797: LD_ADDR_VAR 0 26
13801: PUSH
13802: LD_VAR 0 20
13806: PPUSH
13807: LD_INT 120
13809: PUSH
13810: LD_INT 7
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: PPUSH
13817: CALL_OW 72
13821: ST_TO_ADDR
// if not drivers then
13822: LD_VAR 0 26
13826: NOT
13827: IFFALSE 13843
// begin SetTag ( i , 0 ) ;
13829: LD_VAR 0 15
13833: PPUSH
13834: LD_INT 0
13836: PPUSH
13837: CALL_OW 109
// continue ;
13841: GO 13583
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
13843: LD_VAR 0 26
13847: PUSH
13848: LD_INT 1
13850: ARRAY
13851: PPUSH
13852: CALL_OW 310
13856: IFFALSE 13874
13858: PUSH
13859: LD_VAR 0 26
13863: PUSH
13864: LD_INT 1
13866: ARRAY
13867: PPUSH
13868: CALL 74188 0 1
13872: NOT
13873: AND
13874: IFFALSE 13889
// ComExitBuilding ( drivers [ 1 ] ) ;
13876: LD_VAR 0 26
13880: PUSH
13881: LD_INT 1
13883: ARRAY
13884: PPUSH
13885: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
13889: LD_VAR 0 7
13893: PPUSH
13894: LD_INT 120
13896: PUSH
13897: LD_INT 3
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: PPUSH
13904: CALL_OW 72
13908: IFFALSE 13926
13910: PUSH
13911: LD_VAR 0 26
13915: PUSH
13916: LD_INT 1
13918: ARRAY
13919: PPUSH
13920: CALL_OW 314
13924: NOT
13925: AND
13926: IFTRUE 13950
13928: PUSH
13929: LD_VAR 0 7
13933: PPUSH
13934: LD_INT 120
13936: PUSH
13937: LD_INT 3
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PPUSH
13944: CALL_OW 72
13948: NOT
13949: OR
13950: IFFALSE 13970
// ComEnterUnit ( drivers [ 1 ] , i ) ;
13952: LD_VAR 0 26
13956: PUSH
13957: LD_INT 1
13959: ARRAY
13960: PPUSH
13961: LD_VAR 0 15
13965: PPUSH
13966: CALL_OW 120
// continue ;
13970: GO 13583
// end ; if allowToPatrol then
13972: LD_VAR 0 13
13976: IFFALSE 13992
// SetTag ( i , tPatrol ) else
13978: LD_VAR 0 15
13982: PPUSH
13983: LD_INT 15
13985: PPUSH
13986: CALL_OW 109
13990: GO 14004
// SetTag ( i , tAttack ) ;
13992: LD_VAR 0 15
13996: PPUSH
13997: LD_INT 13
13999: PPUSH
14000: CALL_OW 109
// end ; end else
14004: GO 14541
// if tag = tPatrol then
14006: LD_VAR 0 21
14010: PUSH
14011: LD_INT 15
14013: EQUAL
14014: IFFALSE 14208
// begin if GetLives ( i ) < 650 then
14016: LD_VAR 0 15
14020: PPUSH
14021: CALL_OW 256
14025: PUSH
14026: LD_INT 650
14028: LESS
14029: IFFALSE 14072
// begin SetTag ( i , tVehRepair ) ;
14031: LD_VAR 0 15
14035: PPUSH
14036: LD_INT 9
14038: PPUSH
14039: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14043: LD_VAR 0 15
14047: PPUSH
14048: LD_VAR 0 12
14052: PUSH
14053: LD_INT 1
14055: ARRAY
14056: PPUSH
14057: LD_VAR 0 12
14061: PUSH
14062: LD_INT 2
14064: ARRAY
14065: PPUSH
14066: CALL_OW 111
// continue ;
14070: GO 13583
// end ; if GetEngine ( i ) = engine_combustion then
14072: LD_VAR 0 15
14076: PPUSH
14077: CALL_OW 262
14081: PUSH
14082: LD_INT 1
14084: EQUAL
14085: IFFALSE 14132
// if GetFuel ( i ) < 30 then
14087: LD_VAR 0 15
14091: PPUSH
14092: CALL_OW 261
14096: PUSH
14097: LD_INT 30
14099: LESS
14100: IFFALSE 14132
// begin ComMoveUnit ( i , depot ) ;
14102: LD_VAR 0 15
14106: PPUSH
14107: LD_VAR 0 39
14111: PPUSH
14112: CALL_OW 112
// AddComRefuel ( i , depot ) ;
14116: LD_VAR 0 15
14120: PPUSH
14121: LD_VAR 0 39
14125: PPUSH
14126: CALL_OW 210
// continue ;
14130: GO 13583
// end ; if GetDistUnitXY ( i , allowToPatrol [ 1 ] , allowToPatrol [ 2 ] ) > 12 and not HasTask ( i ) then
14132: LD_VAR 0 15
14136: PPUSH
14137: LD_VAR 0 13
14141: PUSH
14142: LD_INT 1
14144: ARRAY
14145: PPUSH
14146: LD_VAR 0 13
14150: PUSH
14151: LD_INT 2
14153: ARRAY
14154: PPUSH
14155: CALL_OW 297
14159: PUSH
14160: LD_INT 12
14162: GREATER
14163: IFFALSE 14177
14165: PUSH
14166: LD_VAR 0 15
14170: PPUSH
14171: CALL_OW 314
14175: NOT
14176: AND
14177: IFFALSE 14206
// ComAgressiveMove ( i , allowToPatrol [ 1 ] , allowToPatrol [ 2 ] ) ;
14179: LD_VAR 0 15
14183: PPUSH
14184: LD_VAR 0 13
14188: PUSH
14189: LD_INT 1
14191: ARRAY
14192: PPUSH
14193: LD_VAR 0 13
14197: PUSH
14198: LD_INT 2
14200: ARRAY
14201: PPUSH
14202: CALL_OW 114
// end else
14206: GO 14541
// if tag = tAttack then
14208: LD_VAR 0 21
14212: PUSH
14213: LD_INT 13
14215: EQUAL
14216: IFFALSE 14398
// begin enemy := enemyInBase ;
14218: LD_ADDR_VAR 0 28
14222: PUSH
14223: LD_VAR 0 33
14227: ST_TO_ADDR
// if not enemy then
14228: LD_VAR 0 28
14232: NOT
14233: IFFALSE 14245
// enemy := enemyOuterBase ;
14235: LD_ADDR_VAR 0 28
14239: PUSH
14240: LD_VAR 0 34
14244: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
14245: LD_VAR 0 28
14249: NOT
14250: IFFALSE 14285
14252: PUSH
14253: LD_VAR 0 15
14257: PPUSH
14258: LD_VAR 0 12
14262: PUSH
14263: LD_INT 1
14265: ARRAY
14266: PPUSH
14267: LD_VAR 0 12
14271: PUSH
14272: LD_INT 2
14274: ARRAY
14275: PPUSH
14276: CALL_OW 297
14280: PUSH
14281: LD_INT 10
14283: GREATER
14284: AND
14285: IFFALSE 14316
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14287: LD_VAR 0 15
14291: PPUSH
14292: LD_VAR 0 12
14296: PUSH
14297: LD_INT 1
14299: ARRAY
14300: PPUSH
14301: LD_VAR 0 12
14305: PUSH
14306: LD_INT 2
14308: ARRAY
14309: PPUSH
14310: CALL_OW 111
// continue ;
14314: GO 13583
// end ; if GetLives ( i ) < 650 then
14316: LD_VAR 0 15
14320: PPUSH
14321: CALL_OW 256
14325: PUSH
14326: LD_INT 650
14328: LESS
14329: IFFALSE 14372
// begin SetTag ( i , tVehRepair ) ;
14331: LD_VAR 0 15
14335: PPUSH
14336: LD_INT 9
14338: PPUSH
14339: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14343: LD_VAR 0 15
14347: PPUSH
14348: LD_VAR 0 12
14352: PUSH
14353: LD_INT 1
14355: ARRAY
14356: PPUSH
14357: LD_VAR 0 12
14361: PUSH
14362: LD_INT 2
14364: ARRAY
14365: PPUSH
14366: CALL_OW 111
// continue ;
14370: GO 13583
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14372: LD_VAR 0 15
14376: PPUSH
14377: LD_VAR 0 28
14381: PPUSH
14382: LD_VAR 0 15
14386: PPUSH
14387: CALL_OW 74
14391: PPUSH
14392: CALL_OW 115
// end else
14396: GO 14541
// if tag = tVehRepair then
14398: LD_VAR 0 21
14402: PUSH
14403: LD_INT 9
14405: EQUAL
14406: IFFALSE 14541
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 6 then
14408: LD_VAR 0 15
14412: PPUSH
14413: LD_VAR 0 12
14417: PUSH
14418: LD_INT 1
14420: ARRAY
14421: PPUSH
14422: LD_VAR 0 12
14426: PUSH
14427: LD_INT 2
14429: ARRAY
14430: PPUSH
14431: CALL_OW 297
14435: PUSH
14436: LD_INT 6
14438: GREATER
14439: IFFALSE 14470
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14441: LD_VAR 0 15
14445: PPUSH
14446: LD_VAR 0 12
14450: PUSH
14451: LD_INT 1
14453: ARRAY
14454: PPUSH
14455: LD_VAR 0 12
14459: PUSH
14460: LD_INT 2
14462: ARRAY
14463: PPUSH
14464: CALL_OW 111
// continue ;
14468: GO 13583
// end ; if GetLives ( i ) = 1000 then
14470: LD_VAR 0 15
14474: PPUSH
14475: CALL_OW 256
14479: PUSH
14480: LD_INT 1000
14482: EQUAL
14483: IFFALSE 14499
// begin SetTag ( i , tBusy ) ;
14485: LD_VAR 0 15
14489: PPUSH
14490: LD_INT 8
14492: PPUSH
14493: CALL_OW 109
// continue ;
14497: GO 13583
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
14499: LD_VAR 0 15
14503: PPUSH
14504: CALL_OW 263
14508: PUSH
14509: LD_INT 1
14511: EQUAL
14512: IFFALSE 14525
14514: PUSH
14515: LD_VAR 0 15
14519: PPUSH
14520: CALL_OW 311
14524: AND
14525: IFFALSE 14541
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
14527: LD_VAR 0 15
14531: PPUSH
14532: CALL_OW 311
14536: PPUSH
14537: CALL 78322 0 1
// end ; end ;
14541: GO 13583
14543: POP
14544: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
14545: LD_ADDR_VAR 0 25
14549: PUSH
14550: LD_VAR 0 6
14554: PPUSH
14555: LD_INT 2
14557: PUSH
14558: LD_INT 25
14560: PUSH
14561: LD_INT 1
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: PUSH
14568: LD_INT 25
14570: PUSH
14571: LD_INT 8
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: PUSH
14578: LD_INT 25
14580: PUSH
14581: LD_INT 5
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: PUSH
14588: LD_INT 25
14590: PUSH
14591: LD_INT 9
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: PUSH
14605: LD_INT 50
14607: PUSH
14608: EMPTY
14609: LIST
14610: PUSH
14611: EMPTY
14612: LIST
14613: LIST
14614: PPUSH
14615: CALL_OW 72
14619: ST_TO_ADDR
// if sol then
14620: LD_VAR 0 25
14624: IFFALSE 15568
// begin if enemyInBase then
14626: LD_VAR 0 33
14630: IFFALSE 14809
// begin for i in sol do
14632: LD_ADDR_VAR 0 15
14636: PUSH
14637: LD_VAR 0 25
14641: PUSH
14642: FOR_IN
14643: IFFALSE 14805
// begin tw := IsInUnit ( i ) ;
14645: LD_ADDR_VAR 0 22
14649: PUSH
14650: LD_VAR 0 15
14654: PPUSH
14655: CALL_OW 310
14659: ST_TO_ADDR
// if tw then
14660: LD_VAR 0 22
14664: IFFALSE 14747
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
14666: LD_VAR 0 22
14670: PUSH
14671: LD_INT 22
14673: PUSH
14674: LD_VAR 0 1
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: PUSH
14683: LD_INT 101
14685: PUSH
14686: LD_VAR 0 40
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: PUSH
14695: LD_INT 2
14697: PUSH
14698: LD_INT 30
14700: PUSH
14701: LD_INT 32
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PUSH
14708: LD_INT 30
14710: PUSH
14711: LD_INT 31
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: LIST
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: LIST
14727: PPUSH
14728: CALL_OW 69
14732: IN
14733: NOT
14734: IFFALSE 14745
// ComExitBuilding ( i ) ;
14736: LD_VAR 0 15
14740: PPUSH
14741: CALL_OW 122
// end else
14745: GO 14803
// if IsInArea ( i , area ) then
14747: LD_VAR 0 15
14751: PPUSH
14752: LD_VAR 0 2
14756: PPUSH
14757: CALL_OW 308
14761: IFFALSE 14789
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
14763: LD_VAR 0 15
14767: PPUSH
14768: LD_VAR 0 33
14772: PPUSH
14773: LD_VAR 0 15
14777: PPUSH
14778: CALL_OW 74
14782: PPUSH
14783: CALL_OW 115
14787: GO 14803
// ComMoveToArea ( i , area ) ;
14789: LD_VAR 0 15
14793: PPUSH
14794: LD_VAR 0 2
14798: PPUSH
14799: CALL_OW 113
// end ;
14803: GO 14642
14805: POP
14806: POP
// end else
14807: GO 15568
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
14809: LD_ADDR_VAR 0 35
14813: PUSH
14814: LD_VAR 0 2
14818: PPUSH
14819: LD_INT 3
14821: PUSH
14822: LD_INT 62
14824: PUSH
14825: EMPTY
14826: LIST
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: LD_INT 3
14834: PUSH
14835: LD_INT 57
14837: PUSH
14838: EMPTY
14839: LIST
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: LD_INT 2
14847: PUSH
14848: LD_INT 30
14850: PUSH
14851: LD_INT 32
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: PUSH
14858: LD_INT 30
14860: PUSH
14861: LD_INT 4
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: PUSH
14868: LD_INT 30
14870: PUSH
14871: LD_INT 5
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PUSH
14878: LD_INT 30
14880: PUSH
14881: LD_INT 31
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: LIST
14899: PPUSH
14900: CALL_OW 70
14904: ST_TO_ADDR
// emptyTowers := [ ] ;
14905: LD_ADDR_VAR 0 37
14909: PUSH
14910: EMPTY
14911: ST_TO_ADDR
// if empty then
14912: LD_VAR 0 35
14916: IFFALSE 14982
// emptyTowers := UnitFilter ( empty , [ [ f_not , [ f_tag , tTower ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
14918: LD_ADDR_VAR 0 37
14922: PUSH
14923: LD_VAR 0 35
14927: PPUSH
14928: LD_INT 3
14930: PUSH
14931: LD_INT 120
14933: PUSH
14934: LD_INT 10
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 2
14947: PUSH
14948: LD_INT 30
14950: PUSH
14951: LD_INT 32
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PUSH
14958: LD_INT 30
14960: PUSH
14961: LD_INT 33
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: LIST
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PPUSH
14977: CALL_OW 72
14981: ST_TO_ADDR
// for i in sol do
14982: LD_ADDR_VAR 0 15
14986: PUSH
14987: LD_VAR 0 25
14991: PUSH
14992: FOR_IN
14993: IFFALSE 15566
// begin tag := GetTag ( i ) ;
14995: LD_ADDR_VAR 0 21
14999: PUSH
15000: LD_VAR 0 15
15004: PPUSH
15005: CALL_OW 110
15009: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
15010: LD_VAR 0 15
15014: PPUSH
15015: CALL_OW 256
15019: PUSH
15020: LD_INT 1000
15022: LESS
15023: IFFALSE 15035
15025: PUSH
15026: LD_VAR 0 21
15030: PUSH
15031: LD_INT 1
15033: NONEQUAL
15034: AND
15035: IFFALSE 15087
// begin SetTag ( i , tHeal ) ;
15037: LD_VAR 0 15
15041: PPUSH
15042: LD_INT 1
15044: PPUSH
15045: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
15049: LD_VAR 0 15
15053: PPUSH
15054: LD_VAR 0 11
15058: PUSH
15059: LD_INT 1
15061: ARRAY
15062: PPUSH
15063: LD_VAR 0 11
15067: PUSH
15068: LD_INT 2
15070: ARRAY
15071: PPUSH
15072: CALL_OW 111
// AddComHold ( i ) ;
15076: LD_VAR 0 15
15080: PPUSH
15081: CALL_OW 200
// continue ;
15085: GO 14992
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
15087: LD_VAR 0 15
15091: PPUSH
15092: CALL_OW 256
15096: PUSH
15097: LD_INT 1000
15099: EQUAL
15100: IFFALSE 15112
15102: PUSH
15103: LD_VAR 0 21
15107: PUSH
15108: LD_INT 1
15110: EQUAL
15111: AND
15112: IFFALSE 15128
// begin SetTag ( i , 0 ) ;
15114: LD_VAR 0 15
15118: PPUSH
15119: LD_INT 0
15121: PPUSH
15122: CALL_OW 109
// continue ;
15126: GO 14992
// end ; if HasTask ( i ) then
15128: LD_VAR 0 15
15132: PPUSH
15133: CALL_OW 314
15137: IFFALSE 15141
// continue ;
15139: GO 14992
// if not IsInUnit ( i ) and not tag and empty then
15141: LD_VAR 0 15
15145: PPUSH
15146: CALL_OW 310
15150: NOT
15151: IFFALSE 15160
15153: PUSH
15154: LD_VAR 0 21
15158: NOT
15159: AND
15160: IFFALSE 15168
15162: PUSH
15163: LD_VAR 0 35
15167: AND
15168: IFFALSE 15208
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
15170: LD_VAR 0 15
15174: PPUSH
15175: LD_VAR 0 35
15179: PUSH
15180: LD_INT 1
15182: ARRAY
15183: PPUSH
15184: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
15188: LD_ADDR_VAR 0 35
15192: PUSH
15193: LD_VAR 0 35
15197: PPUSH
15198: LD_INT 1
15200: PPUSH
15201: CALL_OW 3
15205: ST_TO_ADDR
// continue ;
15206: GO 14992
// end ; if IsInUnit ( i ) and not tag and Count ( emptyTowers ) then
15208: LD_VAR 0 15
15212: PPUSH
15213: CALL_OW 310
15217: IFFALSE 15226
15219: PUSH
15220: LD_VAR 0 21
15224: NOT
15225: AND
15226: IFFALSE 15239
15228: PUSH
15229: LD_VAR 0 37
15233: PPUSH
15234: CALL 40632 0 1
15238: AND
15239: IFFALSE 15435
// begin if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
15241: LD_VAR 0 15
15245: PPUSH
15246: CALL_OW 310
15250: PPUSH
15251: CALL_OW 266
15255: PUSH
15256: LD_INT 32
15258: PUSH
15259: LD_INT 31
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: IN
15266: IFFALSE 15270
// continue ;
15268: GO 14992
// SetTag ( i , tTower ) ;
15270: LD_VAR 0 15
15274: PPUSH
15275: LD_INT 10
15277: PPUSH
15278: CALL_OW 109
// SetTag ( emptyTowers [ 1 ] , tTower ) ;
15282: LD_VAR 0 37
15286: PUSH
15287: LD_INT 1
15289: ARRAY
15290: PPUSH
15291: LD_INT 10
15293: PPUSH
15294: CALL_OW 109
// ComExit ( i ) ;
15298: LD_VAR 0 15
15302: PPUSH
15303: CALL 77006 0 1
// AddComEnterUnit ( i , emptyTowers [ 1 ] ) ;
15307: LD_VAR 0 15
15311: PPUSH
15312: LD_VAR 0 37
15316: PUSH
15317: LD_INT 1
15319: ARRAY
15320: PPUSH
15321: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
15325: LD_INT 35
15327: PPUSH
15328: CALL_OW 67
// if not HasTask ( i ) then
15332: LD_VAR 0 15
15336: PPUSH
15337: CALL_OW 314
15341: NOT
15342: IFFALSE 15362
// ComEnterUnit ( i , emptyTowers [ 1 ] ) ;
15344: LD_VAR 0 15
15348: PPUSH
15349: LD_VAR 0 37
15353: PUSH
15354: LD_INT 1
15356: ARRAY
15357: PPUSH
15358: CALL_OW 120
// if not IsEmpty ( emptyTowers [ 1 ] ) then
15362: LD_VAR 0 37
15366: PUSH
15367: LD_INT 1
15369: ARRAY
15370: PPUSH
15371: CALL 40654 0 1
15375: NOT
15376: IFFALSE 15380
// break ;
15378: GO 15405
// until IsInUnit ( i ) or not IsOk ( i ) ;
15380: LD_VAR 0 15
15384: PPUSH
15385: CALL_OW 310
15389: IFTRUE 15403
15391: PUSH
15392: LD_VAR 0 15
15396: PPUSH
15397: CALL_OW 302
15401: NOT
15402: OR
15403: IFFALSE 15325
// SetTag ( i , 0 ) ;
15405: LD_VAR 0 15
15409: PPUSH
15410: LD_INT 0
15412: PPUSH
15413: CALL_OW 109
// SetTag ( emptyTowers [ 1 ] , 0 ) ;
15417: LD_VAR 0 37
15421: PUSH
15422: LD_INT 1
15424: ARRAY
15425: PPUSH
15426: LD_INT 0
15428: PPUSH
15429: CALL_OW 109
// continue ;
15433: GO 14992
// end ; if IsInUnit ( i ) and not tag and GetTech ( tech_LasSight , side ) = state_researched and GetClass ( i ) <> class_sniper then
15435: LD_VAR 0 15
15439: PPUSH
15440: CALL_OW 310
15444: IFFALSE 15453
15446: PUSH
15447: LD_VAR 0 21
15451: NOT
15452: AND
15453: IFFALSE 15473
15455: PUSH
15456: LD_INT 12
15458: PPUSH
15459: LD_VAR 0 1
15463: PPUSH
15464: CALL_OW 321
15468: PUSH
15469: LD_INT 2
15471: EQUAL
15472: AND
15473: IFFALSE 15490
15475: PUSH
15476: LD_VAR 0 15
15480: PPUSH
15481: CALL_OW 257
15485: PUSH
15486: LD_INT 5
15488: NONEQUAL
15489: AND
15490: IFFALSE 15564
// begin tmp := IsInUnit ( i ) ;
15492: LD_ADDR_VAR 0 16
15496: PUSH
15497: LD_VAR 0 15
15501: PPUSH
15502: CALL_OW 310
15506: ST_TO_ADDR
// if GetBType ( tmp ) = b_barracks then
15507: LD_VAR 0 16
15511: PPUSH
15512: CALL_OW 266
15516: PUSH
15517: LD_INT 5
15519: EQUAL
15520: IFFALSE 15564
// begin if UnitFilter ( UnitsInside ( tmp ) , [ f_class , class_soldier ] ) > 3 then
15522: LD_VAR 0 16
15526: PPUSH
15527: CALL_OW 313
15531: PPUSH
15532: LD_INT 25
15534: PUSH
15535: LD_INT 1
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PPUSH
15542: CALL_OW 72
15546: PUSH
15547: LD_INT 3
15549: GREATER
15550: IFFALSE 15564
// SetClass ( i , class_sniper ) ;
15552: LD_VAR 0 15
15556: PPUSH
15557: LD_INT 5
15559: PPUSH
15560: CALL_OW 336
// end ; end ; end ;
15564: GO 14992
15566: POP
15567: POP
// end ; end ; end ; end_of_file
15568: LD_VAR 0 14
15572: RET
// every 1 1$25 trigger GetResourceArea ( playerCratesArea , mat_cans ) < [ 18 , 15 , 12 ] [ Difficulty ] do
15573: LD_INT 3
15575: PPUSH
15576: LD_INT 1
15578: PPUSH
15579: CALL_OW 287
15583: PUSH
15584: LD_INT 18
15586: PUSH
15587: LD_INT 15
15589: PUSH
15590: LD_INT 12
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: LIST
15597: PUSH
15598: LD_OWVAR 67
15602: ARRAY
15603: LESS
15604: IFFALSE 15646
15606: GO 15608
15608: DISABLE
// begin enable ;
15609: ENABLE
// wait ( rand ( 0 0$10 , 0 0$30 ) ) ;
15610: LD_INT 350
15612: PPUSH
15613: LD_INT 1050
15615: PPUSH
15616: CALL_OW 12
15620: PPUSH
15621: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , playerCratesArea , true ) ;
15625: LD_INT 2
15627: PPUSH
15628: LD_INT 5
15630: PPUSH
15631: CALL_OW 12
15635: PPUSH
15636: LD_INT 3
15638: PPUSH
15639: LD_INT 1
15641: PPUSH
15642: CALL_OW 55
// end ;
15646: END
// every 1 1$40 trigger GetResourceArea ( americanBaseNorthArea , mat_cans ) < 5 do
15647: LD_INT 10
15649: PPUSH
15650: LD_INT 1
15652: PPUSH
15653: CALL_OW 287
15657: PUSH
15658: LD_INT 5
15660: LESS
15661: IFFALSE 15688
15663: GO 15665
15665: DISABLE
// begin enable ;
15666: ENABLE
// CreateCratesArea ( rand ( 2 , 5 ) , americanBaseNorthArea , true ) ;
15667: LD_INT 2
15669: PPUSH
15670: LD_INT 5
15672: PPUSH
15673: CALL_OW 12
15677: PPUSH
15678: LD_INT 10
15680: PPUSH
15681: LD_INT 1
15683: PPUSH
15684: CALL_OW 55
// end ;
15688: END
// every 1 1$40 trigger GetResourceArea ( americanBaseSouthArea , mat_cans ) < 5 do
15689: LD_INT 11
15691: PPUSH
15692: LD_INT 1
15694: PPUSH
15695: CALL_OW 287
15699: PUSH
15700: LD_INT 5
15702: LESS
15703: IFFALSE 15730
15705: GO 15707
15707: DISABLE
// begin enable ;
15708: ENABLE
// CreateCratesArea ( rand ( 2 , 5 ) , americanBaseSouthArea , true ) ;
15709: LD_INT 2
15711: PPUSH
15712: LD_INT 5
15714: PPUSH
15715: CALL_OW 12
15719: PPUSH
15720: LD_INT 11
15722: PPUSH
15723: LD_INT 1
15725: PPUSH
15726: CALL_OW 55
// end ;
15730: END
// every 1 1$40 trigger GetResourceArea ( amCrates1Area , mat_cans ) < 5 do
15731: LD_INT 16
15733: PPUSH
15734: LD_INT 1
15736: PPUSH
15737: CALL_OW 287
15741: PUSH
15742: LD_INT 5
15744: LESS
15745: IFFALSE 15772
15747: GO 15749
15749: DISABLE
// begin enable ;
15750: ENABLE
// CreateCratesArea ( rand ( 2 , 5 ) , amCrates1Area , true ) ;
15751: LD_INT 2
15753: PPUSH
15754: LD_INT 5
15756: PPUSH
15757: CALL_OW 12
15761: PPUSH
15762: LD_INT 16
15764: PPUSH
15765: LD_INT 1
15767: PPUSH
15768: CALL_OW 55
// end ;
15772: END
// every 1 1$40 trigger GetResourceArea ( amCrates2Area , mat_cans ) < 5 do
15773: LD_INT 17
15775: PPUSH
15776: LD_INT 1
15778: PPUSH
15779: CALL_OW 287
15783: PUSH
15784: LD_INT 5
15786: LESS
15787: IFFALSE 15814
15789: GO 15791
15791: DISABLE
// begin enable ;
15792: ENABLE
// CreateCratesArea ( rand ( 2 , 5 ) , amCrates2Area , true ) ;
15793: LD_INT 2
15795: PPUSH
15796: LD_INT 5
15798: PPUSH
15799: CALL_OW 12
15803: PPUSH
15804: LD_INT 17
15806: PPUSH
15807: LD_INT 1
15809: PPUSH
15810: CALL_OW 55
// end ;
15814: END
// every 0 0$50 trigger tick < 45 45$00 do
15815: LD_OWVAR 1
15819: PUSH
15820: LD_INT 94500
15822: LESS
15823: IFFALSE 15847
15825: GO 15827
15827: DISABLE
// begin enable ;
15828: ENABLE
// CreateCratesAnywhere ( rand ( 1 , 5 ) , true ) ;
15829: LD_INT 1
15831: PPUSH
15832: LD_INT 5
15834: PPUSH
15835: CALL_OW 12
15839: PPUSH
15840: LD_INT 1
15842: PPUSH
15843: CALL_OW 57
// end ; end_of_file end_of_file
15847: END
// export globalGameSaveCounter ; every 0 0$1 do
15848: GO 15850
15850: DISABLE
// begin enable ;
15851: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15852: LD_STRING updateTimer(
15854: PUSH
15855: LD_OWVAR 1
15859: STR
15860: PUSH
15861: LD_STRING );
15863: STR
15864: PPUSH
15865: CALL_OW 559
// end ;
15869: END
// every 0 0$1 do
15870: GO 15872
15872: DISABLE
// begin globalGameSaveCounter := 0 ;
15873: LD_ADDR_EXP 37
15877: PUSH
15878: LD_INT 0
15880: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
15881: LD_STRING setGameSaveCounter(0)
15883: PPUSH
15884: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
15888: LD_STRING initStreamRollete();
15890: PPUSH
15891: CALL_OW 559
// InitStreamMode ;
15895: CALL 17247 0 0
// DefineStreamItems ( false ) ;
15899: LD_INT 0
15901: PPUSH
15902: CALL 17711 0 1
// end ;
15906: END
// export function SOS_MapStart ( ) ; begin
15907: LD_INT 0
15909: PPUSH
// if streamModeActive then
15910: LD_EXP 38
15914: IFFALSE 15923
// DefineStreamItems ( true ) ;
15916: LD_INT 1
15918: PPUSH
15919: CALL 17711 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
15923: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
15925: PPUSH
15926: CALL_OW 559
// UpdateLuaVariables ( ) ;
15930: CALL 15947 0 0
// UpdateFactoryWaypoints ( ) ;
15934: CALL 30833 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15938: CALL 31085 0 0
// end ;
15942: LD_VAR 0 1
15946: RET
// function UpdateLuaVariables ( ) ; begin
15947: LD_INT 0
15949: PPUSH
// if globalGameSaveCounter then
15950: LD_EXP 37
15954: IFFALSE 15988
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
15956: LD_ADDR_EXP 37
15960: PUSH
15961: LD_EXP 37
15965: PPUSH
15966: CALL 77981 0 1
15970: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15971: LD_STRING setGameSaveCounter(
15973: PUSH
15974: LD_EXP 37
15978: STR
15979: PUSH
15980: LD_STRING )
15982: STR
15983: PPUSH
15984: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
15988: LD_STRING setGameDifficulty(
15990: PUSH
15991: LD_OWVAR 67
15995: STR
15996: PUSH
15997: LD_STRING )
15999: STR
16000: PPUSH
16001: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
16005: LD_STRING displayDifficulty(
16007: PUSH
16008: LD_OWVAR 67
16012: STR
16013: PUSH
16014: LD_STRING )
16016: STR
16017: PPUSH
16018: CALL_OW 559
// end ;
16022: LD_VAR 0 1
16026: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16027: LD_INT 0
16029: PPUSH
// if p2 = stream_mode then
16030: LD_VAR 0 2
16034: PUSH
16035: LD_INT 100
16037: EQUAL
16038: IFFALSE 17041
// begin if not StreamModeActive then
16040: LD_EXP 38
16044: NOT
16045: IFFALSE 16055
// StreamModeActive := true ;
16047: LD_ADDR_EXP 38
16051: PUSH
16052: LD_INT 1
16054: ST_TO_ADDR
// if p3 = 0 then
16055: LD_VAR 0 3
16059: PUSH
16060: LD_INT 0
16062: EQUAL
16063: IFFALSE 16069
// InitStreamMode ;
16065: CALL 17247 0 0
// if p3 = 1 then
16069: LD_VAR 0 3
16073: PUSH
16074: LD_INT 1
16076: EQUAL
16077: IFFALSE 16087
// sRocket := true ;
16079: LD_ADDR_EXP 43
16083: PUSH
16084: LD_INT 1
16086: ST_TO_ADDR
// if p3 = 2 then
16087: LD_VAR 0 3
16091: PUSH
16092: LD_INT 2
16094: EQUAL
16095: IFFALSE 16105
// sSpeed := true ;
16097: LD_ADDR_EXP 42
16101: PUSH
16102: LD_INT 1
16104: ST_TO_ADDR
// if p3 = 3 then
16105: LD_VAR 0 3
16109: PUSH
16110: LD_INT 3
16112: EQUAL
16113: IFFALSE 16123
// sEngine := true ;
16115: LD_ADDR_EXP 44
16119: PUSH
16120: LD_INT 1
16122: ST_TO_ADDR
// if p3 = 4 then
16123: LD_VAR 0 3
16127: PUSH
16128: LD_INT 4
16130: EQUAL
16131: IFFALSE 16141
// sSpec := true ;
16133: LD_ADDR_EXP 41
16137: PUSH
16138: LD_INT 1
16140: ST_TO_ADDR
// if p3 = 5 then
16141: LD_VAR 0 3
16145: PUSH
16146: LD_INT 5
16148: EQUAL
16149: IFFALSE 16159
// sLevel := true ;
16151: LD_ADDR_EXP 45
16155: PUSH
16156: LD_INT 1
16158: ST_TO_ADDR
// if p3 = 6 then
16159: LD_VAR 0 3
16163: PUSH
16164: LD_INT 6
16166: EQUAL
16167: IFFALSE 16177
// sArmoury := true ;
16169: LD_ADDR_EXP 46
16173: PUSH
16174: LD_INT 1
16176: ST_TO_ADDR
// if p3 = 7 then
16177: LD_VAR 0 3
16181: PUSH
16182: LD_INT 7
16184: EQUAL
16185: IFFALSE 16195
// sRadar := true ;
16187: LD_ADDR_EXP 47
16191: PUSH
16192: LD_INT 1
16194: ST_TO_ADDR
// if p3 = 8 then
16195: LD_VAR 0 3
16199: PUSH
16200: LD_INT 8
16202: EQUAL
16203: IFFALSE 16213
// sBunker := true ;
16205: LD_ADDR_EXP 48
16209: PUSH
16210: LD_INT 1
16212: ST_TO_ADDR
// if p3 = 9 then
16213: LD_VAR 0 3
16217: PUSH
16218: LD_INT 9
16220: EQUAL
16221: IFFALSE 16231
// sHack := true ;
16223: LD_ADDR_EXP 49
16227: PUSH
16228: LD_INT 1
16230: ST_TO_ADDR
// if p3 = 10 then
16231: LD_VAR 0 3
16235: PUSH
16236: LD_INT 10
16238: EQUAL
16239: IFFALSE 16249
// sFire := true ;
16241: LD_ADDR_EXP 50
16245: PUSH
16246: LD_INT 1
16248: ST_TO_ADDR
// if p3 = 11 then
16249: LD_VAR 0 3
16253: PUSH
16254: LD_INT 11
16256: EQUAL
16257: IFFALSE 16267
// sRefresh := true ;
16259: LD_ADDR_EXP 51
16263: PUSH
16264: LD_INT 1
16266: ST_TO_ADDR
// if p3 = 12 then
16267: LD_VAR 0 3
16271: PUSH
16272: LD_INT 12
16274: EQUAL
16275: IFFALSE 16285
// sExp := true ;
16277: LD_ADDR_EXP 52
16281: PUSH
16282: LD_INT 1
16284: ST_TO_ADDR
// if p3 = 13 then
16285: LD_VAR 0 3
16289: PUSH
16290: LD_INT 13
16292: EQUAL
16293: IFFALSE 16303
// sDepot := true ;
16295: LD_ADDR_EXP 53
16299: PUSH
16300: LD_INT 1
16302: ST_TO_ADDR
// if p3 = 14 then
16303: LD_VAR 0 3
16307: PUSH
16308: LD_INT 14
16310: EQUAL
16311: IFFALSE 16321
// sFlag := true ;
16313: LD_ADDR_EXP 54
16317: PUSH
16318: LD_INT 1
16320: ST_TO_ADDR
// if p3 = 15 then
16321: LD_VAR 0 3
16325: PUSH
16326: LD_INT 15
16328: EQUAL
16329: IFFALSE 16339
// sKamikadze := true ;
16331: LD_ADDR_EXP 62
16335: PUSH
16336: LD_INT 1
16338: ST_TO_ADDR
// if p3 = 16 then
16339: LD_VAR 0 3
16343: PUSH
16344: LD_INT 16
16346: EQUAL
16347: IFFALSE 16357
// sTroll := true ;
16349: LD_ADDR_EXP 63
16353: PUSH
16354: LD_INT 1
16356: ST_TO_ADDR
// if p3 = 17 then
16357: LD_VAR 0 3
16361: PUSH
16362: LD_INT 17
16364: EQUAL
16365: IFFALSE 16375
// sSlow := true ;
16367: LD_ADDR_EXP 64
16371: PUSH
16372: LD_INT 1
16374: ST_TO_ADDR
// if p3 = 18 then
16375: LD_VAR 0 3
16379: PUSH
16380: LD_INT 18
16382: EQUAL
16383: IFFALSE 16393
// sLack := true ;
16385: LD_ADDR_EXP 65
16389: PUSH
16390: LD_INT 1
16392: ST_TO_ADDR
// if p3 = 19 then
16393: LD_VAR 0 3
16397: PUSH
16398: LD_INT 19
16400: EQUAL
16401: IFFALSE 16411
// sTank := true ;
16403: LD_ADDR_EXP 67
16407: PUSH
16408: LD_INT 1
16410: ST_TO_ADDR
// if p3 = 20 then
16411: LD_VAR 0 3
16415: PUSH
16416: LD_INT 20
16418: EQUAL
16419: IFFALSE 16429
// sRemote := true ;
16421: LD_ADDR_EXP 68
16425: PUSH
16426: LD_INT 1
16428: ST_TO_ADDR
// if p3 = 21 then
16429: LD_VAR 0 3
16433: PUSH
16434: LD_INT 21
16436: EQUAL
16437: IFFALSE 16447
// sPowell := true ;
16439: LD_ADDR_EXP 69
16443: PUSH
16444: LD_INT 1
16446: ST_TO_ADDR
// if p3 = 22 then
16447: LD_VAR 0 3
16451: PUSH
16452: LD_INT 22
16454: EQUAL
16455: IFFALSE 16465
// sTeleport := true ;
16457: LD_ADDR_EXP 72
16461: PUSH
16462: LD_INT 1
16464: ST_TO_ADDR
// if p3 = 23 then
16465: LD_VAR 0 3
16469: PUSH
16470: LD_INT 23
16472: EQUAL
16473: IFFALSE 16483
// sOilTower := true ;
16475: LD_ADDR_EXP 74
16479: PUSH
16480: LD_INT 1
16482: ST_TO_ADDR
// if p3 = 24 then
16483: LD_VAR 0 3
16487: PUSH
16488: LD_INT 24
16490: EQUAL
16491: IFFALSE 16501
// sShovel := true ;
16493: LD_ADDR_EXP 75
16497: PUSH
16498: LD_INT 1
16500: ST_TO_ADDR
// if p3 = 25 then
16501: LD_VAR 0 3
16505: PUSH
16506: LD_INT 25
16508: EQUAL
16509: IFFALSE 16519
// sSheik := true ;
16511: LD_ADDR_EXP 76
16515: PUSH
16516: LD_INT 1
16518: ST_TO_ADDR
// if p3 = 26 then
16519: LD_VAR 0 3
16523: PUSH
16524: LD_INT 26
16526: EQUAL
16527: IFFALSE 16537
// sEarthquake := true ;
16529: LD_ADDR_EXP 78
16533: PUSH
16534: LD_INT 1
16536: ST_TO_ADDR
// if p3 = 27 then
16537: LD_VAR 0 3
16541: PUSH
16542: LD_INT 27
16544: EQUAL
16545: IFFALSE 16555
// sAI := true ;
16547: LD_ADDR_EXP 79
16551: PUSH
16552: LD_INT 1
16554: ST_TO_ADDR
// if p3 = 28 then
16555: LD_VAR 0 3
16559: PUSH
16560: LD_INT 28
16562: EQUAL
16563: IFFALSE 16573
// sCargo := true ;
16565: LD_ADDR_EXP 82
16569: PUSH
16570: LD_INT 1
16572: ST_TO_ADDR
// if p3 = 29 then
16573: LD_VAR 0 3
16577: PUSH
16578: LD_INT 29
16580: EQUAL
16581: IFFALSE 16591
// sDLaser := true ;
16583: LD_ADDR_EXP 83
16587: PUSH
16588: LD_INT 1
16590: ST_TO_ADDR
// if p3 = 30 then
16591: LD_VAR 0 3
16595: PUSH
16596: LD_INT 30
16598: EQUAL
16599: IFFALSE 16609
// sExchange := true ;
16601: LD_ADDR_EXP 84
16605: PUSH
16606: LD_INT 1
16608: ST_TO_ADDR
// if p3 = 31 then
16609: LD_VAR 0 3
16613: PUSH
16614: LD_INT 31
16616: EQUAL
16617: IFFALSE 16627
// sFac := true ;
16619: LD_ADDR_EXP 85
16623: PUSH
16624: LD_INT 1
16626: ST_TO_ADDR
// if p3 = 32 then
16627: LD_VAR 0 3
16631: PUSH
16632: LD_INT 32
16634: EQUAL
16635: IFFALSE 16645
// sPower := true ;
16637: LD_ADDR_EXP 86
16641: PUSH
16642: LD_INT 1
16644: ST_TO_ADDR
// if p3 = 33 then
16645: LD_VAR 0 3
16649: PUSH
16650: LD_INT 33
16652: EQUAL
16653: IFFALSE 16663
// sRandom := true ;
16655: LD_ADDR_EXP 87
16659: PUSH
16660: LD_INT 1
16662: ST_TO_ADDR
// if p3 = 34 then
16663: LD_VAR 0 3
16667: PUSH
16668: LD_INT 34
16670: EQUAL
16671: IFFALSE 16681
// sShield := true ;
16673: LD_ADDR_EXP 88
16677: PUSH
16678: LD_INT 1
16680: ST_TO_ADDR
// if p3 = 35 then
16681: LD_VAR 0 3
16685: PUSH
16686: LD_INT 35
16688: EQUAL
16689: IFFALSE 16699
// sTime := true ;
16691: LD_ADDR_EXP 89
16695: PUSH
16696: LD_INT 1
16698: ST_TO_ADDR
// if p3 = 36 then
16699: LD_VAR 0 3
16703: PUSH
16704: LD_INT 36
16706: EQUAL
16707: IFFALSE 16717
// sTools := true ;
16709: LD_ADDR_EXP 90
16713: PUSH
16714: LD_INT 1
16716: ST_TO_ADDR
// if p3 = 101 then
16717: LD_VAR 0 3
16721: PUSH
16722: LD_INT 101
16724: EQUAL
16725: IFFALSE 16735
// sSold := true ;
16727: LD_ADDR_EXP 55
16731: PUSH
16732: LD_INT 1
16734: ST_TO_ADDR
// if p3 = 102 then
16735: LD_VAR 0 3
16739: PUSH
16740: LD_INT 102
16742: EQUAL
16743: IFFALSE 16753
// sDiff := true ;
16745: LD_ADDR_EXP 56
16749: PUSH
16750: LD_INT 1
16752: ST_TO_ADDR
// if p3 = 103 then
16753: LD_VAR 0 3
16757: PUSH
16758: LD_INT 103
16760: EQUAL
16761: IFFALSE 16771
// sFog := true ;
16763: LD_ADDR_EXP 59
16767: PUSH
16768: LD_INT 1
16770: ST_TO_ADDR
// if p3 = 104 then
16771: LD_VAR 0 3
16775: PUSH
16776: LD_INT 104
16778: EQUAL
16779: IFFALSE 16789
// sReset := true ;
16781: LD_ADDR_EXP 60
16785: PUSH
16786: LD_INT 1
16788: ST_TO_ADDR
// if p3 = 105 then
16789: LD_VAR 0 3
16793: PUSH
16794: LD_INT 105
16796: EQUAL
16797: IFFALSE 16807
// sSun := true ;
16799: LD_ADDR_EXP 61
16803: PUSH
16804: LD_INT 1
16806: ST_TO_ADDR
// if p3 = 106 then
16807: LD_VAR 0 3
16811: PUSH
16812: LD_INT 106
16814: EQUAL
16815: IFFALSE 16825
// sTiger := true ;
16817: LD_ADDR_EXP 57
16821: PUSH
16822: LD_INT 1
16824: ST_TO_ADDR
// if p3 = 107 then
16825: LD_VAR 0 3
16829: PUSH
16830: LD_INT 107
16832: EQUAL
16833: IFFALSE 16843
// sBomb := true ;
16835: LD_ADDR_EXP 58
16839: PUSH
16840: LD_INT 1
16842: ST_TO_ADDR
// if p3 = 108 then
16843: LD_VAR 0 3
16847: PUSH
16848: LD_INT 108
16850: EQUAL
16851: IFFALSE 16861
// sWound := true ;
16853: LD_ADDR_EXP 66
16857: PUSH
16858: LD_INT 1
16860: ST_TO_ADDR
// if p3 = 109 then
16861: LD_VAR 0 3
16865: PUSH
16866: LD_INT 109
16868: EQUAL
16869: IFFALSE 16879
// sBetray := true ;
16871: LD_ADDR_EXP 70
16875: PUSH
16876: LD_INT 1
16878: ST_TO_ADDR
// if p3 = 110 then
16879: LD_VAR 0 3
16883: PUSH
16884: LD_INT 110
16886: EQUAL
16887: IFFALSE 16897
// sContamin := true ;
16889: LD_ADDR_EXP 71
16893: PUSH
16894: LD_INT 1
16896: ST_TO_ADDR
// if p3 = 111 then
16897: LD_VAR 0 3
16901: PUSH
16902: LD_INT 111
16904: EQUAL
16905: IFFALSE 16915
// sOil := true ;
16907: LD_ADDR_EXP 73
16911: PUSH
16912: LD_INT 1
16914: ST_TO_ADDR
// if p3 = 112 then
16915: LD_VAR 0 3
16919: PUSH
16920: LD_INT 112
16922: EQUAL
16923: IFFALSE 16933
// sStu := true ;
16925: LD_ADDR_EXP 77
16929: PUSH
16930: LD_INT 1
16932: ST_TO_ADDR
// if p3 = 113 then
16933: LD_VAR 0 3
16937: PUSH
16938: LD_INT 113
16940: EQUAL
16941: IFFALSE 16951
// sBazooka := true ;
16943: LD_ADDR_EXP 80
16947: PUSH
16948: LD_INT 1
16950: ST_TO_ADDR
// if p3 = 114 then
16951: LD_VAR 0 3
16955: PUSH
16956: LD_INT 114
16958: EQUAL
16959: IFFALSE 16969
// sMortar := true ;
16961: LD_ADDR_EXP 81
16965: PUSH
16966: LD_INT 1
16968: ST_TO_ADDR
// if p3 = 115 then
16969: LD_VAR 0 3
16973: PUSH
16974: LD_INT 115
16976: EQUAL
16977: IFFALSE 16987
// sRanger := true ;
16979: LD_ADDR_EXP 91
16983: PUSH
16984: LD_INT 1
16986: ST_TO_ADDR
// if p3 = 116 then
16987: LD_VAR 0 3
16991: PUSH
16992: LD_INT 116
16994: EQUAL
16995: IFFALSE 17005
// sComputer := true ;
16997: LD_ADDR_EXP 92
17001: PUSH
17002: LD_INT 1
17004: ST_TO_ADDR
// if p3 = 117 then
17005: LD_VAR 0 3
17009: PUSH
17010: LD_INT 117
17012: EQUAL
17013: IFFALSE 17023
// s30 := true ;
17015: LD_ADDR_EXP 93
17019: PUSH
17020: LD_INT 1
17022: ST_TO_ADDR
// if p3 = 118 then
17023: LD_VAR 0 3
17027: PUSH
17028: LD_INT 118
17030: EQUAL
17031: IFFALSE 17041
// s60 := true ;
17033: LD_ADDR_EXP 94
17037: PUSH
17038: LD_INT 1
17040: ST_TO_ADDR
// end ; if p2 = hack_mode then
17041: LD_VAR 0 2
17045: PUSH
17046: LD_INT 101
17048: EQUAL
17049: IFFALSE 17177
// begin case p3 of 1 :
17051: LD_VAR 0 3
17055: PUSH
17056: LD_INT 1
17058: DOUBLE
17059: EQUAL
17060: IFTRUE 17064
17062: GO 17071
17064: POP
// hHackUnlimitedResources ; 2 :
17065: CALL 29440 0 0
17069: GO 17177
17071: LD_INT 2
17073: DOUBLE
17074: EQUAL
17075: IFTRUE 17079
17077: GO 17086
17079: POP
// hHackSetLevel10 ; 3 :
17080: CALL 29573 0 0
17084: GO 17177
17086: LD_INT 3
17088: DOUBLE
17089: EQUAL
17090: IFTRUE 17094
17092: GO 17101
17094: POP
// hHackSetLevel10YourUnits ; 4 :
17095: CALL 29658 0 0
17099: GO 17177
17101: LD_INT 4
17103: DOUBLE
17104: EQUAL
17105: IFTRUE 17109
17107: GO 17116
17109: POP
// hHackInvincible ; 5 :
17110: CALL 30106 0 0
17114: GO 17177
17116: LD_INT 5
17118: DOUBLE
17119: EQUAL
17120: IFTRUE 17124
17122: GO 17131
17124: POP
// hHackInvisible ; 6 :
17125: CALL 30217 0 0
17129: GO 17177
17131: LD_INT 6
17133: DOUBLE
17134: EQUAL
17135: IFTRUE 17139
17137: GO 17146
17139: POP
// hHackChangeYourSide ; 7 :
17140: CALL 30274 0 0
17144: GO 17177
17146: LD_INT 7
17148: DOUBLE
17149: EQUAL
17150: IFTRUE 17154
17152: GO 17161
17154: POP
// hHackChangeUnitSide ; 8 :
17155: CALL 30316 0 0
17159: GO 17177
17161: LD_INT 8
17163: DOUBLE
17164: EQUAL
17165: IFTRUE 17169
17167: GO 17176
17169: POP
// hHackFog ; end ;
17170: CALL 30417 0 0
17174: GO 17177
17176: POP
// end ; if p2 = game_save_mode then
17177: LD_VAR 0 2
17181: PUSH
17182: LD_INT 102
17184: EQUAL
17185: IFFALSE 17242
// begin if p3 = 1 then
17187: LD_VAR 0 3
17191: PUSH
17192: LD_INT 1
17194: EQUAL
17195: IFFALSE 17207
// globalGameSaveCounter := p4 ;
17197: LD_ADDR_EXP 37
17201: PUSH
17202: LD_VAR 0 4
17206: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
17207: LD_VAR 0 3
17211: PUSH
17212: LD_INT 2
17214: EQUAL
17215: IFFALSE 17223
17217: PUSH
17218: LD_EXP 37
17222: AND
17223: IFFALSE 17242
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17225: LD_STRING setGameSaveCounter(
17227: PUSH
17228: LD_EXP 37
17232: STR
17233: PUSH
17234: LD_STRING )
17236: STR
17237: PPUSH
17238: CALL_OW 559
// end ; end ;
17242: LD_VAR 0 7
17246: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
17247: LD_INT 0
17249: PPUSH
// streamModeActive := false ;
17250: LD_ADDR_EXP 38
17254: PUSH
17255: LD_INT 0
17257: ST_TO_ADDR
// normalCounter := 36 ;
17258: LD_ADDR_EXP 39
17262: PUSH
17263: LD_INT 36
17265: ST_TO_ADDR
// hardcoreCounter := 18 ;
17266: LD_ADDR_EXP 40
17270: PUSH
17271: LD_INT 18
17273: ST_TO_ADDR
// sRocket := false ;
17274: LD_ADDR_EXP 43
17278: PUSH
17279: LD_INT 0
17281: ST_TO_ADDR
// sSpeed := false ;
17282: LD_ADDR_EXP 42
17286: PUSH
17287: LD_INT 0
17289: ST_TO_ADDR
// sEngine := false ;
17290: LD_ADDR_EXP 44
17294: PUSH
17295: LD_INT 0
17297: ST_TO_ADDR
// sSpec := false ;
17298: LD_ADDR_EXP 41
17302: PUSH
17303: LD_INT 0
17305: ST_TO_ADDR
// sLevel := false ;
17306: LD_ADDR_EXP 45
17310: PUSH
17311: LD_INT 0
17313: ST_TO_ADDR
// sArmoury := false ;
17314: LD_ADDR_EXP 46
17318: PUSH
17319: LD_INT 0
17321: ST_TO_ADDR
// sRadar := false ;
17322: LD_ADDR_EXP 47
17326: PUSH
17327: LD_INT 0
17329: ST_TO_ADDR
// sBunker := false ;
17330: LD_ADDR_EXP 48
17334: PUSH
17335: LD_INT 0
17337: ST_TO_ADDR
// sHack := false ;
17338: LD_ADDR_EXP 49
17342: PUSH
17343: LD_INT 0
17345: ST_TO_ADDR
// sFire := false ;
17346: LD_ADDR_EXP 50
17350: PUSH
17351: LD_INT 0
17353: ST_TO_ADDR
// sRefresh := false ;
17354: LD_ADDR_EXP 51
17358: PUSH
17359: LD_INT 0
17361: ST_TO_ADDR
// sExp := false ;
17362: LD_ADDR_EXP 52
17366: PUSH
17367: LD_INT 0
17369: ST_TO_ADDR
// sDepot := false ;
17370: LD_ADDR_EXP 53
17374: PUSH
17375: LD_INT 0
17377: ST_TO_ADDR
// sFlag := false ;
17378: LD_ADDR_EXP 54
17382: PUSH
17383: LD_INT 0
17385: ST_TO_ADDR
// sKamikadze := false ;
17386: LD_ADDR_EXP 62
17390: PUSH
17391: LD_INT 0
17393: ST_TO_ADDR
// sTroll := false ;
17394: LD_ADDR_EXP 63
17398: PUSH
17399: LD_INT 0
17401: ST_TO_ADDR
// sSlow := false ;
17402: LD_ADDR_EXP 64
17406: PUSH
17407: LD_INT 0
17409: ST_TO_ADDR
// sLack := false ;
17410: LD_ADDR_EXP 65
17414: PUSH
17415: LD_INT 0
17417: ST_TO_ADDR
// sTank := false ;
17418: LD_ADDR_EXP 67
17422: PUSH
17423: LD_INT 0
17425: ST_TO_ADDR
// sRemote := false ;
17426: LD_ADDR_EXP 68
17430: PUSH
17431: LD_INT 0
17433: ST_TO_ADDR
// sPowell := false ;
17434: LD_ADDR_EXP 69
17438: PUSH
17439: LD_INT 0
17441: ST_TO_ADDR
// sTeleport := false ;
17442: LD_ADDR_EXP 72
17446: PUSH
17447: LD_INT 0
17449: ST_TO_ADDR
// sOilTower := false ;
17450: LD_ADDR_EXP 74
17454: PUSH
17455: LD_INT 0
17457: ST_TO_ADDR
// sShovel := false ;
17458: LD_ADDR_EXP 75
17462: PUSH
17463: LD_INT 0
17465: ST_TO_ADDR
// sSheik := false ;
17466: LD_ADDR_EXP 76
17470: PUSH
17471: LD_INT 0
17473: ST_TO_ADDR
// sEarthquake := false ;
17474: LD_ADDR_EXP 78
17478: PUSH
17479: LD_INT 0
17481: ST_TO_ADDR
// sAI := false ;
17482: LD_ADDR_EXP 79
17486: PUSH
17487: LD_INT 0
17489: ST_TO_ADDR
// sCargo := false ;
17490: LD_ADDR_EXP 82
17494: PUSH
17495: LD_INT 0
17497: ST_TO_ADDR
// sDLaser := false ;
17498: LD_ADDR_EXP 83
17502: PUSH
17503: LD_INT 0
17505: ST_TO_ADDR
// sExchange := false ;
17506: LD_ADDR_EXP 84
17510: PUSH
17511: LD_INT 0
17513: ST_TO_ADDR
// sFac := false ;
17514: LD_ADDR_EXP 85
17518: PUSH
17519: LD_INT 0
17521: ST_TO_ADDR
// sPower := false ;
17522: LD_ADDR_EXP 86
17526: PUSH
17527: LD_INT 0
17529: ST_TO_ADDR
// sRandom := false ;
17530: LD_ADDR_EXP 87
17534: PUSH
17535: LD_INT 0
17537: ST_TO_ADDR
// sShield := false ;
17538: LD_ADDR_EXP 88
17542: PUSH
17543: LD_INT 0
17545: ST_TO_ADDR
// sTime := false ;
17546: LD_ADDR_EXP 89
17550: PUSH
17551: LD_INT 0
17553: ST_TO_ADDR
// sTools := false ;
17554: LD_ADDR_EXP 90
17558: PUSH
17559: LD_INT 0
17561: ST_TO_ADDR
// sSold := false ;
17562: LD_ADDR_EXP 55
17566: PUSH
17567: LD_INT 0
17569: ST_TO_ADDR
// sDiff := false ;
17570: LD_ADDR_EXP 56
17574: PUSH
17575: LD_INT 0
17577: ST_TO_ADDR
// sFog := false ;
17578: LD_ADDR_EXP 59
17582: PUSH
17583: LD_INT 0
17585: ST_TO_ADDR
// sReset := false ;
17586: LD_ADDR_EXP 60
17590: PUSH
17591: LD_INT 0
17593: ST_TO_ADDR
// sSun := false ;
17594: LD_ADDR_EXP 61
17598: PUSH
17599: LD_INT 0
17601: ST_TO_ADDR
// sTiger := false ;
17602: LD_ADDR_EXP 57
17606: PUSH
17607: LD_INT 0
17609: ST_TO_ADDR
// sBomb := false ;
17610: LD_ADDR_EXP 58
17614: PUSH
17615: LD_INT 0
17617: ST_TO_ADDR
// sWound := false ;
17618: LD_ADDR_EXP 66
17622: PUSH
17623: LD_INT 0
17625: ST_TO_ADDR
// sBetray := false ;
17626: LD_ADDR_EXP 70
17630: PUSH
17631: LD_INT 0
17633: ST_TO_ADDR
// sContamin := false ;
17634: LD_ADDR_EXP 71
17638: PUSH
17639: LD_INT 0
17641: ST_TO_ADDR
// sOil := false ;
17642: LD_ADDR_EXP 73
17646: PUSH
17647: LD_INT 0
17649: ST_TO_ADDR
// sStu := false ;
17650: LD_ADDR_EXP 77
17654: PUSH
17655: LD_INT 0
17657: ST_TO_ADDR
// sBazooka := false ;
17658: LD_ADDR_EXP 80
17662: PUSH
17663: LD_INT 0
17665: ST_TO_ADDR
// sMortar := false ;
17666: LD_ADDR_EXP 81
17670: PUSH
17671: LD_INT 0
17673: ST_TO_ADDR
// sRanger := false ;
17674: LD_ADDR_EXP 91
17678: PUSH
17679: LD_INT 0
17681: ST_TO_ADDR
// sComputer := false ;
17682: LD_ADDR_EXP 92
17686: PUSH
17687: LD_INT 0
17689: ST_TO_ADDR
// s30 := false ;
17690: LD_ADDR_EXP 93
17694: PUSH
17695: LD_INT 0
17697: ST_TO_ADDR
// s60 := false ;
17698: LD_ADDR_EXP 94
17702: PUSH
17703: LD_INT 0
17705: ST_TO_ADDR
// end ;
17706: LD_VAR 0 1
17710: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17711: LD_INT 0
17713: PPUSH
17714: PPUSH
17715: PPUSH
17716: PPUSH
17717: PPUSH
17718: PPUSH
17719: PPUSH
// result := [ ] ;
17720: LD_ADDR_VAR 0 2
17724: PUSH
17725: EMPTY
17726: ST_TO_ADDR
// if campaign_id = 1 then
17727: LD_OWVAR 69
17731: PUSH
17732: LD_INT 1
17734: EQUAL
17735: IFFALSE 20901
// begin case mission_number of 1 :
17737: LD_OWVAR 70
17741: PUSH
17742: LD_INT 1
17744: DOUBLE
17745: EQUAL
17746: IFTRUE 17750
17748: GO 17826
17750: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
17751: LD_ADDR_VAR 0 2
17755: PUSH
17756: LD_INT 2
17758: PUSH
17759: LD_INT 4
17761: PUSH
17762: LD_INT 11
17764: PUSH
17765: LD_INT 12
17767: PUSH
17768: LD_INT 15
17770: PUSH
17771: LD_INT 16
17773: PUSH
17774: LD_INT 22
17776: PUSH
17777: LD_INT 23
17779: PUSH
17780: LD_INT 26
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: PUSH
17794: LD_INT 101
17796: PUSH
17797: LD_INT 102
17799: PUSH
17800: LD_INT 106
17802: PUSH
17803: LD_INT 116
17805: PUSH
17806: LD_INT 117
17808: PUSH
17809: LD_INT 118
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: ST_TO_ADDR
17824: GO 20899
17826: LD_INT 2
17828: DOUBLE
17829: EQUAL
17830: IFTRUE 17834
17832: GO 17918
17834: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
17835: LD_ADDR_VAR 0 2
17839: PUSH
17840: LD_INT 2
17842: PUSH
17843: LD_INT 4
17845: PUSH
17846: LD_INT 11
17848: PUSH
17849: LD_INT 12
17851: PUSH
17852: LD_INT 15
17854: PUSH
17855: LD_INT 16
17857: PUSH
17858: LD_INT 22
17860: PUSH
17861: LD_INT 23
17863: PUSH
17864: LD_INT 26
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 101
17880: PUSH
17881: LD_INT 102
17883: PUSH
17884: LD_INT 105
17886: PUSH
17887: LD_INT 106
17889: PUSH
17890: LD_INT 108
17892: PUSH
17893: LD_INT 116
17895: PUSH
17896: LD_INT 117
17898: PUSH
17899: LD_INT 118
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: ST_TO_ADDR
17916: GO 20899
17918: LD_INT 3
17920: DOUBLE
17921: EQUAL
17922: IFTRUE 17926
17924: GO 18014
17926: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17927: LD_ADDR_VAR 0 2
17931: PUSH
17932: LD_INT 2
17934: PUSH
17935: LD_INT 4
17937: PUSH
17938: LD_INT 5
17940: PUSH
17941: LD_INT 11
17943: PUSH
17944: LD_INT 12
17946: PUSH
17947: LD_INT 15
17949: PUSH
17950: LD_INT 16
17952: PUSH
17953: LD_INT 22
17955: PUSH
17956: LD_INT 26
17958: PUSH
17959: LD_INT 36
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 101
17976: PUSH
17977: LD_INT 102
17979: PUSH
17980: LD_INT 105
17982: PUSH
17983: LD_INT 106
17985: PUSH
17986: LD_INT 108
17988: PUSH
17989: LD_INT 116
17991: PUSH
17992: LD_INT 117
17994: PUSH
17995: LD_INT 118
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: ST_TO_ADDR
18012: GO 20899
18014: LD_INT 4
18016: DOUBLE
18017: EQUAL
18018: IFTRUE 18022
18020: GO 18118
18022: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
18023: LD_ADDR_VAR 0 2
18027: PUSH
18028: LD_INT 2
18030: PUSH
18031: LD_INT 4
18033: PUSH
18034: LD_INT 5
18036: PUSH
18037: LD_INT 8
18039: PUSH
18040: LD_INT 11
18042: PUSH
18043: LD_INT 12
18045: PUSH
18046: LD_INT 15
18048: PUSH
18049: LD_INT 16
18051: PUSH
18052: LD_INT 22
18054: PUSH
18055: LD_INT 23
18057: PUSH
18058: LD_INT 26
18060: PUSH
18061: LD_INT 36
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 101
18080: PUSH
18081: LD_INT 102
18083: PUSH
18084: LD_INT 105
18086: PUSH
18087: LD_INT 106
18089: PUSH
18090: LD_INT 108
18092: PUSH
18093: LD_INT 116
18095: PUSH
18096: LD_INT 117
18098: PUSH
18099: LD_INT 118
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: ST_TO_ADDR
18116: GO 20899
18118: LD_INT 5
18120: DOUBLE
18121: EQUAL
18122: IFTRUE 18126
18124: GO 18238
18126: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
18127: LD_ADDR_VAR 0 2
18131: PUSH
18132: LD_INT 2
18134: PUSH
18135: LD_INT 4
18137: PUSH
18138: LD_INT 5
18140: PUSH
18141: LD_INT 6
18143: PUSH
18144: LD_INT 8
18146: PUSH
18147: LD_INT 11
18149: PUSH
18150: LD_INT 12
18152: PUSH
18153: LD_INT 15
18155: PUSH
18156: LD_INT 16
18158: PUSH
18159: LD_INT 22
18161: PUSH
18162: LD_INT 23
18164: PUSH
18165: LD_INT 25
18167: PUSH
18168: LD_INT 26
18170: PUSH
18171: LD_INT 36
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: PUSH
18190: LD_INT 101
18192: PUSH
18193: LD_INT 102
18195: PUSH
18196: LD_INT 105
18198: PUSH
18199: LD_INT 106
18201: PUSH
18202: LD_INT 108
18204: PUSH
18205: LD_INT 109
18207: PUSH
18208: LD_INT 112
18210: PUSH
18211: LD_INT 116
18213: PUSH
18214: LD_INT 117
18216: PUSH
18217: LD_INT 118
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: ST_TO_ADDR
18236: GO 20899
18238: LD_INT 6
18240: DOUBLE
18241: EQUAL
18242: IFTRUE 18246
18244: GO 18378
18246: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
18247: LD_ADDR_VAR 0 2
18251: PUSH
18252: LD_INT 2
18254: PUSH
18255: LD_INT 4
18257: PUSH
18258: LD_INT 5
18260: PUSH
18261: LD_INT 6
18263: PUSH
18264: LD_INT 8
18266: PUSH
18267: LD_INT 11
18269: PUSH
18270: LD_INT 12
18272: PUSH
18273: LD_INT 15
18275: PUSH
18276: LD_INT 16
18278: PUSH
18279: LD_INT 20
18281: PUSH
18282: LD_INT 21
18284: PUSH
18285: LD_INT 22
18287: PUSH
18288: LD_INT 23
18290: PUSH
18291: LD_INT 25
18293: PUSH
18294: LD_INT 26
18296: PUSH
18297: LD_INT 30
18299: PUSH
18300: LD_INT 31
18302: PUSH
18303: LD_INT 32
18305: PUSH
18306: LD_INT 36
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: PUSH
18330: LD_INT 101
18332: PUSH
18333: LD_INT 102
18335: PUSH
18336: LD_INT 105
18338: PUSH
18339: LD_INT 106
18341: PUSH
18342: LD_INT 108
18344: PUSH
18345: LD_INT 109
18347: PUSH
18348: LD_INT 112
18350: PUSH
18351: LD_INT 116
18353: PUSH
18354: LD_INT 117
18356: PUSH
18357: LD_INT 118
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: ST_TO_ADDR
18376: GO 20899
18378: LD_INT 7
18380: DOUBLE
18381: EQUAL
18382: IFTRUE 18386
18384: GO 18498
18386: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
18387: LD_ADDR_VAR 0 2
18391: PUSH
18392: LD_INT 2
18394: PUSH
18395: LD_INT 4
18397: PUSH
18398: LD_INT 5
18400: PUSH
18401: LD_INT 7
18403: PUSH
18404: LD_INT 11
18406: PUSH
18407: LD_INT 12
18409: PUSH
18410: LD_INT 15
18412: PUSH
18413: LD_INT 16
18415: PUSH
18416: LD_INT 20
18418: PUSH
18419: LD_INT 21
18421: PUSH
18422: LD_INT 22
18424: PUSH
18425: LD_INT 23
18427: PUSH
18428: LD_INT 25
18430: PUSH
18431: LD_INT 26
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 101
18452: PUSH
18453: LD_INT 102
18455: PUSH
18456: LD_INT 103
18458: PUSH
18459: LD_INT 105
18461: PUSH
18462: LD_INT 106
18464: PUSH
18465: LD_INT 108
18467: PUSH
18468: LD_INT 112
18470: PUSH
18471: LD_INT 116
18473: PUSH
18474: LD_INT 117
18476: PUSH
18477: LD_INT 118
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: ST_TO_ADDR
18496: GO 20899
18498: LD_INT 8
18500: DOUBLE
18501: EQUAL
18502: IFTRUE 18506
18504: GO 18646
18506: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
18507: LD_ADDR_VAR 0 2
18511: PUSH
18512: LD_INT 2
18514: PUSH
18515: LD_INT 4
18517: PUSH
18518: LD_INT 5
18520: PUSH
18521: LD_INT 6
18523: PUSH
18524: LD_INT 7
18526: PUSH
18527: LD_INT 8
18529: PUSH
18530: LD_INT 11
18532: PUSH
18533: LD_INT 12
18535: PUSH
18536: LD_INT 15
18538: PUSH
18539: LD_INT 16
18541: PUSH
18542: LD_INT 20
18544: PUSH
18545: LD_INT 21
18547: PUSH
18548: LD_INT 22
18550: PUSH
18551: LD_INT 23
18553: PUSH
18554: LD_INT 25
18556: PUSH
18557: LD_INT 26
18559: PUSH
18560: LD_INT 30
18562: PUSH
18563: LD_INT 31
18565: PUSH
18566: LD_INT 32
18568: PUSH
18569: LD_INT 36
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 101
18596: PUSH
18597: LD_INT 102
18599: PUSH
18600: LD_INT 103
18602: PUSH
18603: LD_INT 105
18605: PUSH
18606: LD_INT 106
18608: PUSH
18609: LD_INT 108
18611: PUSH
18612: LD_INT 109
18614: PUSH
18615: LD_INT 112
18617: PUSH
18618: LD_INT 116
18620: PUSH
18621: LD_INT 117
18623: PUSH
18624: LD_INT 118
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: ST_TO_ADDR
18644: GO 20899
18646: LD_INT 9
18648: DOUBLE
18649: EQUAL
18650: IFTRUE 18654
18652: GO 18802
18654: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
18655: LD_ADDR_VAR 0 2
18659: PUSH
18660: LD_INT 2
18662: PUSH
18663: LD_INT 4
18665: PUSH
18666: LD_INT 5
18668: PUSH
18669: LD_INT 6
18671: PUSH
18672: LD_INT 7
18674: PUSH
18675: LD_INT 8
18677: PUSH
18678: LD_INT 11
18680: PUSH
18681: LD_INT 12
18683: PUSH
18684: LD_INT 15
18686: PUSH
18687: LD_INT 16
18689: PUSH
18690: LD_INT 20
18692: PUSH
18693: LD_INT 21
18695: PUSH
18696: LD_INT 22
18698: PUSH
18699: LD_INT 23
18701: PUSH
18702: LD_INT 25
18704: PUSH
18705: LD_INT 26
18707: PUSH
18708: LD_INT 28
18710: PUSH
18711: LD_INT 30
18713: PUSH
18714: LD_INT 31
18716: PUSH
18717: LD_INT 32
18719: PUSH
18720: LD_INT 36
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: PUSH
18746: LD_INT 101
18748: PUSH
18749: LD_INT 102
18751: PUSH
18752: LD_INT 103
18754: PUSH
18755: LD_INT 105
18757: PUSH
18758: LD_INT 106
18760: PUSH
18761: LD_INT 108
18763: PUSH
18764: LD_INT 109
18766: PUSH
18767: LD_INT 112
18769: PUSH
18770: LD_INT 114
18772: PUSH
18773: LD_INT 116
18775: PUSH
18776: LD_INT 117
18778: PUSH
18779: LD_INT 118
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: ST_TO_ADDR
18800: GO 20899
18802: LD_INT 10
18804: DOUBLE
18805: EQUAL
18806: IFTRUE 18810
18808: GO 19006
18810: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18811: LD_ADDR_VAR 0 2
18815: PUSH
18816: LD_INT 2
18818: PUSH
18819: LD_INT 4
18821: PUSH
18822: LD_INT 5
18824: PUSH
18825: LD_INT 6
18827: PUSH
18828: LD_INT 7
18830: PUSH
18831: LD_INT 8
18833: PUSH
18834: LD_INT 9
18836: PUSH
18837: LD_INT 10
18839: PUSH
18840: LD_INT 11
18842: PUSH
18843: LD_INT 12
18845: PUSH
18846: LD_INT 13
18848: PUSH
18849: LD_INT 14
18851: PUSH
18852: LD_INT 15
18854: PUSH
18855: LD_INT 16
18857: PUSH
18858: LD_INT 17
18860: PUSH
18861: LD_INT 18
18863: PUSH
18864: LD_INT 19
18866: PUSH
18867: LD_INT 20
18869: PUSH
18870: LD_INT 21
18872: PUSH
18873: LD_INT 22
18875: PUSH
18876: LD_INT 23
18878: PUSH
18879: LD_INT 24
18881: PUSH
18882: LD_INT 25
18884: PUSH
18885: LD_INT 26
18887: PUSH
18888: LD_INT 28
18890: PUSH
18891: LD_INT 30
18893: PUSH
18894: LD_INT 31
18896: PUSH
18897: LD_INT 32
18899: PUSH
18900: LD_INT 36
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 101
18936: PUSH
18937: LD_INT 102
18939: PUSH
18940: LD_INT 103
18942: PUSH
18943: LD_INT 104
18945: PUSH
18946: LD_INT 105
18948: PUSH
18949: LD_INT 106
18951: PUSH
18952: LD_INT 107
18954: PUSH
18955: LD_INT 108
18957: PUSH
18958: LD_INT 109
18960: PUSH
18961: LD_INT 110
18963: PUSH
18964: LD_INT 111
18966: PUSH
18967: LD_INT 112
18969: PUSH
18970: LD_INT 114
18972: PUSH
18973: LD_INT 116
18975: PUSH
18976: LD_INT 117
18978: PUSH
18979: LD_INT 118
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: ST_TO_ADDR
19004: GO 20899
19006: LD_INT 11
19008: DOUBLE
19009: EQUAL
19010: IFTRUE 19014
19012: GO 19218
19014: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
19015: LD_ADDR_VAR 0 2
19019: PUSH
19020: LD_INT 2
19022: PUSH
19023: LD_INT 3
19025: PUSH
19026: LD_INT 4
19028: PUSH
19029: LD_INT 5
19031: PUSH
19032: LD_INT 6
19034: PUSH
19035: LD_INT 7
19037: PUSH
19038: LD_INT 8
19040: PUSH
19041: LD_INT 9
19043: PUSH
19044: LD_INT 10
19046: PUSH
19047: LD_INT 11
19049: PUSH
19050: LD_INT 12
19052: PUSH
19053: LD_INT 13
19055: PUSH
19056: LD_INT 14
19058: PUSH
19059: LD_INT 15
19061: PUSH
19062: LD_INT 16
19064: PUSH
19065: LD_INT 17
19067: PUSH
19068: LD_INT 18
19070: PUSH
19071: LD_INT 19
19073: PUSH
19074: LD_INT 20
19076: PUSH
19077: LD_INT 21
19079: PUSH
19080: LD_INT 22
19082: PUSH
19083: LD_INT 23
19085: PUSH
19086: LD_INT 24
19088: PUSH
19089: LD_INT 25
19091: PUSH
19092: LD_INT 26
19094: PUSH
19095: LD_INT 28
19097: PUSH
19098: LD_INT 30
19100: PUSH
19101: LD_INT 31
19103: PUSH
19104: LD_INT 32
19106: PUSH
19107: LD_INT 34
19109: PUSH
19110: LD_INT 36
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 101
19148: PUSH
19149: LD_INT 102
19151: PUSH
19152: LD_INT 103
19154: PUSH
19155: LD_INT 104
19157: PUSH
19158: LD_INT 105
19160: PUSH
19161: LD_INT 106
19163: PUSH
19164: LD_INT 107
19166: PUSH
19167: LD_INT 108
19169: PUSH
19170: LD_INT 109
19172: PUSH
19173: LD_INT 110
19175: PUSH
19176: LD_INT 111
19178: PUSH
19179: LD_INT 112
19181: PUSH
19182: LD_INT 114
19184: PUSH
19185: LD_INT 116
19187: PUSH
19188: LD_INT 117
19190: PUSH
19191: LD_INT 118
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: ST_TO_ADDR
19216: GO 20899
19218: LD_INT 12
19220: DOUBLE
19221: EQUAL
19222: IFTRUE 19226
19224: GO 19446
19226: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
19227: LD_ADDR_VAR 0 2
19231: PUSH
19232: LD_INT 1
19234: PUSH
19235: LD_INT 2
19237: PUSH
19238: LD_INT 3
19240: PUSH
19241: LD_INT 4
19243: PUSH
19244: LD_INT 5
19246: PUSH
19247: LD_INT 6
19249: PUSH
19250: LD_INT 7
19252: PUSH
19253: LD_INT 8
19255: PUSH
19256: LD_INT 9
19258: PUSH
19259: LD_INT 10
19261: PUSH
19262: LD_INT 11
19264: PUSH
19265: LD_INT 12
19267: PUSH
19268: LD_INT 13
19270: PUSH
19271: LD_INT 14
19273: PUSH
19274: LD_INT 15
19276: PUSH
19277: LD_INT 16
19279: PUSH
19280: LD_INT 17
19282: PUSH
19283: LD_INT 18
19285: PUSH
19286: LD_INT 19
19288: PUSH
19289: LD_INT 20
19291: PUSH
19292: LD_INT 21
19294: PUSH
19295: LD_INT 22
19297: PUSH
19298: LD_INT 23
19300: PUSH
19301: LD_INT 24
19303: PUSH
19304: LD_INT 25
19306: PUSH
19307: LD_INT 26
19309: PUSH
19310: LD_INT 27
19312: PUSH
19313: LD_INT 28
19315: PUSH
19316: LD_INT 30
19318: PUSH
19319: LD_INT 31
19321: PUSH
19322: LD_INT 32
19324: PUSH
19325: LD_INT 33
19327: PUSH
19328: LD_INT 34
19330: PUSH
19331: LD_INT 36
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: PUSH
19370: LD_INT 101
19372: PUSH
19373: LD_INT 102
19375: PUSH
19376: LD_INT 103
19378: PUSH
19379: LD_INT 104
19381: PUSH
19382: LD_INT 105
19384: PUSH
19385: LD_INT 106
19387: PUSH
19388: LD_INT 107
19390: PUSH
19391: LD_INT 108
19393: PUSH
19394: LD_INT 109
19396: PUSH
19397: LD_INT 110
19399: PUSH
19400: LD_INT 111
19402: PUSH
19403: LD_INT 112
19405: PUSH
19406: LD_INT 113
19408: PUSH
19409: LD_INT 114
19411: PUSH
19412: LD_INT 116
19414: PUSH
19415: LD_INT 117
19417: PUSH
19418: LD_INT 118
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: ST_TO_ADDR
19444: GO 20899
19446: LD_INT 13
19448: DOUBLE
19449: EQUAL
19450: IFTRUE 19454
19452: GO 19662
19454: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
19455: LD_ADDR_VAR 0 2
19459: PUSH
19460: LD_INT 1
19462: PUSH
19463: LD_INT 2
19465: PUSH
19466: LD_INT 3
19468: PUSH
19469: LD_INT 4
19471: PUSH
19472: LD_INT 5
19474: PUSH
19475: LD_INT 8
19477: PUSH
19478: LD_INT 9
19480: PUSH
19481: LD_INT 10
19483: PUSH
19484: LD_INT 11
19486: PUSH
19487: LD_INT 12
19489: PUSH
19490: LD_INT 14
19492: PUSH
19493: LD_INT 15
19495: PUSH
19496: LD_INT 16
19498: PUSH
19499: LD_INT 17
19501: PUSH
19502: LD_INT 18
19504: PUSH
19505: LD_INT 19
19507: PUSH
19508: LD_INT 20
19510: PUSH
19511: LD_INT 21
19513: PUSH
19514: LD_INT 22
19516: PUSH
19517: LD_INT 23
19519: PUSH
19520: LD_INT 24
19522: PUSH
19523: LD_INT 25
19525: PUSH
19526: LD_INT 26
19528: PUSH
19529: LD_INT 27
19531: PUSH
19532: LD_INT 28
19534: PUSH
19535: LD_INT 30
19537: PUSH
19538: LD_INT 31
19540: PUSH
19541: LD_INT 32
19543: PUSH
19544: LD_INT 33
19546: PUSH
19547: LD_INT 34
19549: PUSH
19550: LD_INT 36
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: PUSH
19586: LD_INT 101
19588: PUSH
19589: LD_INT 102
19591: PUSH
19592: LD_INT 103
19594: PUSH
19595: LD_INT 104
19597: PUSH
19598: LD_INT 105
19600: PUSH
19601: LD_INT 106
19603: PUSH
19604: LD_INT 107
19606: PUSH
19607: LD_INT 108
19609: PUSH
19610: LD_INT 109
19612: PUSH
19613: LD_INT 110
19615: PUSH
19616: LD_INT 111
19618: PUSH
19619: LD_INT 112
19621: PUSH
19622: LD_INT 113
19624: PUSH
19625: LD_INT 114
19627: PUSH
19628: LD_INT 116
19630: PUSH
19631: LD_INT 117
19633: PUSH
19634: LD_INT 118
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: ST_TO_ADDR
19660: GO 20899
19662: LD_INT 14
19664: DOUBLE
19665: EQUAL
19666: IFTRUE 19670
19668: GO 19894
19670: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
19671: LD_ADDR_VAR 0 2
19675: PUSH
19676: LD_INT 1
19678: PUSH
19679: LD_INT 2
19681: PUSH
19682: LD_INT 3
19684: PUSH
19685: LD_INT 4
19687: PUSH
19688: LD_INT 5
19690: PUSH
19691: LD_INT 6
19693: PUSH
19694: LD_INT 7
19696: PUSH
19697: LD_INT 8
19699: PUSH
19700: LD_INT 9
19702: PUSH
19703: LD_INT 10
19705: PUSH
19706: LD_INT 11
19708: PUSH
19709: LD_INT 12
19711: PUSH
19712: LD_INT 13
19714: PUSH
19715: LD_INT 14
19717: PUSH
19718: LD_INT 15
19720: PUSH
19721: LD_INT 16
19723: PUSH
19724: LD_INT 17
19726: PUSH
19727: LD_INT 18
19729: PUSH
19730: LD_INT 19
19732: PUSH
19733: LD_INT 20
19735: PUSH
19736: LD_INT 21
19738: PUSH
19739: LD_INT 22
19741: PUSH
19742: LD_INT 23
19744: PUSH
19745: LD_INT 24
19747: PUSH
19748: LD_INT 25
19750: PUSH
19751: LD_INT 26
19753: PUSH
19754: LD_INT 27
19756: PUSH
19757: LD_INT 28
19759: PUSH
19760: LD_INT 29
19762: PUSH
19763: LD_INT 30
19765: PUSH
19766: LD_INT 31
19768: PUSH
19769: LD_INT 32
19771: PUSH
19772: LD_INT 33
19774: PUSH
19775: LD_INT 34
19777: PUSH
19778: LD_INT 36
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 101
19820: PUSH
19821: LD_INT 102
19823: PUSH
19824: LD_INT 103
19826: PUSH
19827: LD_INT 104
19829: PUSH
19830: LD_INT 105
19832: PUSH
19833: LD_INT 106
19835: PUSH
19836: LD_INT 107
19838: PUSH
19839: LD_INT 108
19841: PUSH
19842: LD_INT 109
19844: PUSH
19845: LD_INT 110
19847: PUSH
19848: LD_INT 111
19850: PUSH
19851: LD_INT 112
19853: PUSH
19854: LD_INT 113
19856: PUSH
19857: LD_INT 114
19859: PUSH
19860: LD_INT 116
19862: PUSH
19863: LD_INT 117
19865: PUSH
19866: LD_INT 118
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: ST_TO_ADDR
19892: GO 20899
19894: LD_INT 15
19896: DOUBLE
19897: EQUAL
19898: IFTRUE 19902
19900: GO 20126
19902: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19903: LD_ADDR_VAR 0 2
19907: PUSH
19908: LD_INT 1
19910: PUSH
19911: LD_INT 2
19913: PUSH
19914: LD_INT 3
19916: PUSH
19917: LD_INT 4
19919: PUSH
19920: LD_INT 5
19922: PUSH
19923: LD_INT 6
19925: PUSH
19926: LD_INT 7
19928: PUSH
19929: LD_INT 8
19931: PUSH
19932: LD_INT 9
19934: PUSH
19935: LD_INT 10
19937: PUSH
19938: LD_INT 11
19940: PUSH
19941: LD_INT 12
19943: PUSH
19944: LD_INT 13
19946: PUSH
19947: LD_INT 14
19949: PUSH
19950: LD_INT 15
19952: PUSH
19953: LD_INT 16
19955: PUSH
19956: LD_INT 17
19958: PUSH
19959: LD_INT 18
19961: PUSH
19962: LD_INT 19
19964: PUSH
19965: LD_INT 20
19967: PUSH
19968: LD_INT 21
19970: PUSH
19971: LD_INT 22
19973: PUSH
19974: LD_INT 23
19976: PUSH
19977: LD_INT 24
19979: PUSH
19980: LD_INT 25
19982: PUSH
19983: LD_INT 26
19985: PUSH
19986: LD_INT 27
19988: PUSH
19989: LD_INT 28
19991: PUSH
19992: LD_INT 29
19994: PUSH
19995: LD_INT 30
19997: PUSH
19998: LD_INT 31
20000: PUSH
20001: LD_INT 32
20003: PUSH
20004: LD_INT 33
20006: PUSH
20007: LD_INT 34
20009: PUSH
20010: LD_INT 36
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: PUSH
20050: LD_INT 101
20052: PUSH
20053: LD_INT 102
20055: PUSH
20056: LD_INT 103
20058: PUSH
20059: LD_INT 104
20061: PUSH
20062: LD_INT 105
20064: PUSH
20065: LD_INT 106
20067: PUSH
20068: LD_INT 107
20070: PUSH
20071: LD_INT 108
20073: PUSH
20074: LD_INT 109
20076: PUSH
20077: LD_INT 110
20079: PUSH
20080: LD_INT 111
20082: PUSH
20083: LD_INT 112
20085: PUSH
20086: LD_INT 113
20088: PUSH
20089: LD_INT 114
20091: PUSH
20092: LD_INT 116
20094: PUSH
20095: LD_INT 117
20097: PUSH
20098: LD_INT 118
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: ST_TO_ADDR
20124: GO 20899
20126: LD_INT 16
20128: DOUBLE
20129: EQUAL
20130: IFTRUE 20134
20132: GO 20270
20134: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
20135: LD_ADDR_VAR 0 2
20139: PUSH
20140: LD_INT 2
20142: PUSH
20143: LD_INT 4
20145: PUSH
20146: LD_INT 5
20148: PUSH
20149: LD_INT 7
20151: PUSH
20152: LD_INT 11
20154: PUSH
20155: LD_INT 12
20157: PUSH
20158: LD_INT 15
20160: PUSH
20161: LD_INT 16
20163: PUSH
20164: LD_INT 20
20166: PUSH
20167: LD_INT 21
20169: PUSH
20170: LD_INT 22
20172: PUSH
20173: LD_INT 23
20175: PUSH
20176: LD_INT 25
20178: PUSH
20179: LD_INT 26
20181: PUSH
20182: LD_INT 30
20184: PUSH
20185: LD_INT 31
20187: PUSH
20188: LD_INT 32
20190: PUSH
20191: LD_INT 33
20193: PUSH
20194: LD_INT 34
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: PUSH
20218: LD_INT 101
20220: PUSH
20221: LD_INT 102
20223: PUSH
20224: LD_INT 103
20226: PUSH
20227: LD_INT 106
20229: PUSH
20230: LD_INT 108
20232: PUSH
20233: LD_INT 112
20235: PUSH
20236: LD_INT 113
20238: PUSH
20239: LD_INT 114
20241: PUSH
20242: LD_INT 116
20244: PUSH
20245: LD_INT 117
20247: PUSH
20248: LD_INT 118
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: ST_TO_ADDR
20268: GO 20899
20270: LD_INT 17
20272: DOUBLE
20273: EQUAL
20274: IFTRUE 20278
20276: GO 20502
20278: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
20279: LD_ADDR_VAR 0 2
20283: PUSH
20284: LD_INT 1
20286: PUSH
20287: LD_INT 2
20289: PUSH
20290: LD_INT 3
20292: PUSH
20293: LD_INT 4
20295: PUSH
20296: LD_INT 5
20298: PUSH
20299: LD_INT 6
20301: PUSH
20302: LD_INT 7
20304: PUSH
20305: LD_INT 8
20307: PUSH
20308: LD_INT 9
20310: PUSH
20311: LD_INT 10
20313: PUSH
20314: LD_INT 11
20316: PUSH
20317: LD_INT 12
20319: PUSH
20320: LD_INT 13
20322: PUSH
20323: LD_INT 14
20325: PUSH
20326: LD_INT 15
20328: PUSH
20329: LD_INT 16
20331: PUSH
20332: LD_INT 17
20334: PUSH
20335: LD_INT 18
20337: PUSH
20338: LD_INT 19
20340: PUSH
20341: LD_INT 20
20343: PUSH
20344: LD_INT 21
20346: PUSH
20347: LD_INT 22
20349: PUSH
20350: LD_INT 23
20352: PUSH
20353: LD_INT 24
20355: PUSH
20356: LD_INT 25
20358: PUSH
20359: LD_INT 26
20361: PUSH
20362: LD_INT 27
20364: PUSH
20365: LD_INT 28
20367: PUSH
20368: LD_INT 29
20370: PUSH
20371: LD_INT 30
20373: PUSH
20374: LD_INT 31
20376: PUSH
20377: LD_INT 32
20379: PUSH
20380: LD_INT 33
20382: PUSH
20383: LD_INT 34
20385: PUSH
20386: LD_INT 36
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 101
20428: PUSH
20429: LD_INT 102
20431: PUSH
20432: LD_INT 103
20434: PUSH
20435: LD_INT 104
20437: PUSH
20438: LD_INT 105
20440: PUSH
20441: LD_INT 106
20443: PUSH
20444: LD_INT 107
20446: PUSH
20447: LD_INT 108
20449: PUSH
20450: LD_INT 109
20452: PUSH
20453: LD_INT 110
20455: PUSH
20456: LD_INT 111
20458: PUSH
20459: LD_INT 112
20461: PUSH
20462: LD_INT 113
20464: PUSH
20465: LD_INT 114
20467: PUSH
20468: LD_INT 116
20470: PUSH
20471: LD_INT 117
20473: PUSH
20474: LD_INT 118
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: ST_TO_ADDR
20500: GO 20899
20502: LD_INT 18
20504: DOUBLE
20505: EQUAL
20506: IFTRUE 20510
20508: GO 20658
20510: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
20511: LD_ADDR_VAR 0 2
20515: PUSH
20516: LD_INT 2
20518: PUSH
20519: LD_INT 4
20521: PUSH
20522: LD_INT 5
20524: PUSH
20525: LD_INT 7
20527: PUSH
20528: LD_INT 11
20530: PUSH
20531: LD_INT 12
20533: PUSH
20534: LD_INT 15
20536: PUSH
20537: LD_INT 16
20539: PUSH
20540: LD_INT 20
20542: PUSH
20543: LD_INT 21
20545: PUSH
20546: LD_INT 22
20548: PUSH
20549: LD_INT 23
20551: PUSH
20552: LD_INT 25
20554: PUSH
20555: LD_INT 26
20557: PUSH
20558: LD_INT 30
20560: PUSH
20561: LD_INT 31
20563: PUSH
20564: LD_INT 32
20566: PUSH
20567: LD_INT 33
20569: PUSH
20570: LD_INT 34
20572: PUSH
20573: LD_INT 35
20575: PUSH
20576: LD_INT 36
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 101
20604: PUSH
20605: LD_INT 102
20607: PUSH
20608: LD_INT 103
20610: PUSH
20611: LD_INT 106
20613: PUSH
20614: LD_INT 108
20616: PUSH
20617: LD_INT 112
20619: PUSH
20620: LD_INT 113
20622: PUSH
20623: LD_INT 114
20625: PUSH
20626: LD_INT 115
20628: PUSH
20629: LD_INT 116
20631: PUSH
20632: LD_INT 117
20634: PUSH
20635: LD_INT 118
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: ST_TO_ADDR
20656: GO 20899
20658: LD_INT 19
20660: DOUBLE
20661: EQUAL
20662: IFTRUE 20666
20664: GO 20898
20666: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
20667: LD_ADDR_VAR 0 2
20671: PUSH
20672: LD_INT 1
20674: PUSH
20675: LD_INT 2
20677: PUSH
20678: LD_INT 3
20680: PUSH
20681: LD_INT 4
20683: PUSH
20684: LD_INT 5
20686: PUSH
20687: LD_INT 6
20689: PUSH
20690: LD_INT 7
20692: PUSH
20693: LD_INT 8
20695: PUSH
20696: LD_INT 9
20698: PUSH
20699: LD_INT 10
20701: PUSH
20702: LD_INT 11
20704: PUSH
20705: LD_INT 12
20707: PUSH
20708: LD_INT 13
20710: PUSH
20711: LD_INT 14
20713: PUSH
20714: LD_INT 15
20716: PUSH
20717: LD_INT 16
20719: PUSH
20720: LD_INT 17
20722: PUSH
20723: LD_INT 18
20725: PUSH
20726: LD_INT 19
20728: PUSH
20729: LD_INT 20
20731: PUSH
20732: LD_INT 21
20734: PUSH
20735: LD_INT 22
20737: PUSH
20738: LD_INT 23
20740: PUSH
20741: LD_INT 24
20743: PUSH
20744: LD_INT 25
20746: PUSH
20747: LD_INT 26
20749: PUSH
20750: LD_INT 27
20752: PUSH
20753: LD_INT 28
20755: PUSH
20756: LD_INT 29
20758: PUSH
20759: LD_INT 30
20761: PUSH
20762: LD_INT 31
20764: PUSH
20765: LD_INT 32
20767: PUSH
20768: LD_INT 33
20770: PUSH
20771: LD_INT 34
20773: PUSH
20774: LD_INT 35
20776: PUSH
20777: LD_INT 36
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 101
20820: PUSH
20821: LD_INT 102
20823: PUSH
20824: LD_INT 103
20826: PUSH
20827: LD_INT 104
20829: PUSH
20830: LD_INT 105
20832: PUSH
20833: LD_INT 106
20835: PUSH
20836: LD_INT 107
20838: PUSH
20839: LD_INT 108
20841: PUSH
20842: LD_INT 109
20844: PUSH
20845: LD_INT 110
20847: PUSH
20848: LD_INT 111
20850: PUSH
20851: LD_INT 112
20853: PUSH
20854: LD_INT 113
20856: PUSH
20857: LD_INT 114
20859: PUSH
20860: LD_INT 115
20862: PUSH
20863: LD_INT 116
20865: PUSH
20866: LD_INT 117
20868: PUSH
20869: LD_INT 118
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: ST_TO_ADDR
20896: GO 20899
20898: POP
// end else
20899: GO 21130
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20901: LD_ADDR_VAR 0 2
20905: PUSH
20906: LD_INT 1
20908: PUSH
20909: LD_INT 2
20911: PUSH
20912: LD_INT 3
20914: PUSH
20915: LD_INT 4
20917: PUSH
20918: LD_INT 5
20920: PUSH
20921: LD_INT 6
20923: PUSH
20924: LD_INT 7
20926: PUSH
20927: LD_INT 8
20929: PUSH
20930: LD_INT 9
20932: PUSH
20933: LD_INT 10
20935: PUSH
20936: LD_INT 11
20938: PUSH
20939: LD_INT 12
20941: PUSH
20942: LD_INT 13
20944: PUSH
20945: LD_INT 14
20947: PUSH
20948: LD_INT 15
20950: PUSH
20951: LD_INT 16
20953: PUSH
20954: LD_INT 17
20956: PUSH
20957: LD_INT 18
20959: PUSH
20960: LD_INT 19
20962: PUSH
20963: LD_INT 20
20965: PUSH
20966: LD_INT 21
20968: PUSH
20969: LD_INT 22
20971: PUSH
20972: LD_INT 23
20974: PUSH
20975: LD_INT 24
20977: PUSH
20978: LD_INT 25
20980: PUSH
20981: LD_INT 26
20983: PUSH
20984: LD_INT 27
20986: PUSH
20987: LD_INT 28
20989: PUSH
20990: LD_INT 29
20992: PUSH
20993: LD_INT 30
20995: PUSH
20996: LD_INT 31
20998: PUSH
20999: LD_INT 32
21001: PUSH
21002: LD_INT 33
21004: PUSH
21005: LD_INT 34
21007: PUSH
21008: LD_INT 35
21010: PUSH
21011: LD_INT 36
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 101
21054: PUSH
21055: LD_INT 102
21057: PUSH
21058: LD_INT 103
21060: PUSH
21061: LD_INT 104
21063: PUSH
21064: LD_INT 105
21066: PUSH
21067: LD_INT 106
21069: PUSH
21070: LD_INT 107
21072: PUSH
21073: LD_INT 108
21075: PUSH
21076: LD_INT 109
21078: PUSH
21079: LD_INT 110
21081: PUSH
21082: LD_INT 111
21084: PUSH
21085: LD_INT 112
21087: PUSH
21088: LD_INT 113
21090: PUSH
21091: LD_INT 114
21093: PUSH
21094: LD_INT 115
21096: PUSH
21097: LD_INT 116
21099: PUSH
21100: LD_INT 117
21102: PUSH
21103: LD_INT 118
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: ST_TO_ADDR
// if result then
21130: LD_VAR 0 2
21134: IFFALSE 21920
// begin normal :=  ;
21136: LD_ADDR_VAR 0 5
21140: PUSH
21141: LD_STRING 
21143: ST_TO_ADDR
// hardcore :=  ;
21144: LD_ADDR_VAR 0 6
21148: PUSH
21149: LD_STRING 
21151: ST_TO_ADDR
// active :=  ;
21152: LD_ADDR_VAR 0 7
21156: PUSH
21157: LD_STRING 
21159: ST_TO_ADDR
// for i = 1 to normalCounter do
21160: LD_ADDR_VAR 0 8
21164: PUSH
21165: DOUBLE
21166: LD_INT 1
21168: DEC
21169: ST_TO_ADDR
21170: LD_EXP 39
21174: PUSH
21175: FOR_TO
21176: IFFALSE 21277
// begin tmp := 0 ;
21178: LD_ADDR_VAR 0 3
21182: PUSH
21183: LD_STRING 0
21185: ST_TO_ADDR
// if result [ 1 ] then
21186: LD_VAR 0 2
21190: PUSH
21191: LD_INT 1
21193: ARRAY
21194: IFFALSE 21259
// if result [ 1 ] [ 1 ] = i then
21196: LD_VAR 0 2
21200: PUSH
21201: LD_INT 1
21203: ARRAY
21204: PUSH
21205: LD_INT 1
21207: ARRAY
21208: PUSH
21209: LD_VAR 0 8
21213: EQUAL
21214: IFFALSE 21259
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21216: LD_ADDR_VAR 0 2
21220: PUSH
21221: LD_VAR 0 2
21225: PPUSH
21226: LD_INT 1
21228: PPUSH
21229: LD_VAR 0 2
21233: PUSH
21234: LD_INT 1
21236: ARRAY
21237: PPUSH
21238: LD_INT 1
21240: PPUSH
21241: CALL_OW 3
21245: PPUSH
21246: CALL_OW 1
21250: ST_TO_ADDR
// tmp := 1 ;
21251: LD_ADDR_VAR 0 3
21255: PUSH
21256: LD_STRING 1
21258: ST_TO_ADDR
// end ; normal := normal & tmp ;
21259: LD_ADDR_VAR 0 5
21263: PUSH
21264: LD_VAR 0 5
21268: PUSH
21269: LD_VAR 0 3
21273: STR
21274: ST_TO_ADDR
// end ;
21275: GO 21175
21277: POP
21278: POP
// for i = 1 to hardcoreCounter do
21279: LD_ADDR_VAR 0 8
21283: PUSH
21284: DOUBLE
21285: LD_INT 1
21287: DEC
21288: ST_TO_ADDR
21289: LD_EXP 40
21293: PUSH
21294: FOR_TO
21295: IFFALSE 21400
// begin tmp := 0 ;
21297: LD_ADDR_VAR 0 3
21301: PUSH
21302: LD_STRING 0
21304: ST_TO_ADDR
// if result [ 2 ] then
21305: LD_VAR 0 2
21309: PUSH
21310: LD_INT 2
21312: ARRAY
21313: IFFALSE 21382
// if result [ 2 ] [ 1 ] = 100 + i then
21315: LD_VAR 0 2
21319: PUSH
21320: LD_INT 2
21322: ARRAY
21323: PUSH
21324: LD_INT 1
21326: ARRAY
21327: PUSH
21328: LD_INT 100
21330: PUSH
21331: LD_VAR 0 8
21335: PLUS
21336: EQUAL
21337: IFFALSE 21382
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21339: LD_ADDR_VAR 0 2
21343: PUSH
21344: LD_VAR 0 2
21348: PPUSH
21349: LD_INT 2
21351: PPUSH
21352: LD_VAR 0 2
21356: PUSH
21357: LD_INT 2
21359: ARRAY
21360: PPUSH
21361: LD_INT 1
21363: PPUSH
21364: CALL_OW 3
21368: PPUSH
21369: CALL_OW 1
21373: ST_TO_ADDR
// tmp := 1 ;
21374: LD_ADDR_VAR 0 3
21378: PUSH
21379: LD_STRING 1
21381: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21382: LD_ADDR_VAR 0 6
21386: PUSH
21387: LD_VAR 0 6
21391: PUSH
21392: LD_VAR 0 3
21396: STR
21397: ST_TO_ADDR
// end ;
21398: GO 21294
21400: POP
21401: POP
// if isGameLoad then
21402: LD_VAR 0 1
21406: IFFALSE 21881
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
21408: LD_ADDR_VAR 0 4
21412: PUSH
21413: LD_EXP 43
21417: PUSH
21418: LD_EXP 42
21422: PUSH
21423: LD_EXP 44
21427: PUSH
21428: LD_EXP 41
21432: PUSH
21433: LD_EXP 45
21437: PUSH
21438: LD_EXP 46
21442: PUSH
21443: LD_EXP 47
21447: PUSH
21448: LD_EXP 48
21452: PUSH
21453: LD_EXP 49
21457: PUSH
21458: LD_EXP 50
21462: PUSH
21463: LD_EXP 51
21467: PUSH
21468: LD_EXP 52
21472: PUSH
21473: LD_EXP 53
21477: PUSH
21478: LD_EXP 54
21482: PUSH
21483: LD_EXP 62
21487: PUSH
21488: LD_EXP 63
21492: PUSH
21493: LD_EXP 64
21497: PUSH
21498: LD_EXP 65
21502: PUSH
21503: LD_EXP 67
21507: PUSH
21508: LD_EXP 68
21512: PUSH
21513: LD_EXP 69
21517: PUSH
21518: LD_EXP 72
21522: PUSH
21523: LD_EXP 74
21527: PUSH
21528: LD_EXP 75
21532: PUSH
21533: LD_EXP 76
21537: PUSH
21538: LD_EXP 78
21542: PUSH
21543: LD_EXP 79
21547: PUSH
21548: LD_EXP 82
21552: PUSH
21553: LD_EXP 83
21557: PUSH
21558: LD_EXP 84
21562: PUSH
21563: LD_EXP 85
21567: PUSH
21568: LD_EXP 86
21572: PUSH
21573: LD_EXP 87
21577: PUSH
21578: LD_EXP 88
21582: PUSH
21583: LD_EXP 89
21587: PUSH
21588: LD_EXP 90
21592: PUSH
21593: LD_EXP 55
21597: PUSH
21598: LD_EXP 56
21602: PUSH
21603: LD_EXP 59
21607: PUSH
21608: LD_EXP 60
21612: PUSH
21613: LD_EXP 61
21617: PUSH
21618: LD_EXP 57
21622: PUSH
21623: LD_EXP 58
21627: PUSH
21628: LD_EXP 66
21632: PUSH
21633: LD_EXP 70
21637: PUSH
21638: LD_EXP 71
21642: PUSH
21643: LD_EXP 73
21647: PUSH
21648: LD_EXP 77
21652: PUSH
21653: LD_EXP 80
21657: PUSH
21658: LD_EXP 81
21662: PUSH
21663: LD_EXP 91
21667: PUSH
21668: LD_EXP 92
21672: PUSH
21673: LD_EXP 93
21677: PUSH
21678: LD_EXP 94
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: ST_TO_ADDR
// tmp :=  ;
21739: LD_ADDR_VAR 0 3
21743: PUSH
21744: LD_STRING 
21746: ST_TO_ADDR
// for i = 1 to normalCounter do
21747: LD_ADDR_VAR 0 8
21751: PUSH
21752: DOUBLE
21753: LD_INT 1
21755: DEC
21756: ST_TO_ADDR
21757: LD_EXP 39
21761: PUSH
21762: FOR_TO
21763: IFFALSE 21799
// begin if flags [ i ] then
21765: LD_VAR 0 4
21769: PUSH
21770: LD_VAR 0 8
21774: ARRAY
21775: IFFALSE 21797
// tmp := tmp & i & ; ;
21777: LD_ADDR_VAR 0 3
21781: PUSH
21782: LD_VAR 0 3
21786: PUSH
21787: LD_VAR 0 8
21791: STR
21792: PUSH
21793: LD_STRING ;
21795: STR
21796: ST_TO_ADDR
// end ;
21797: GO 21762
21799: POP
21800: POP
// for i = 1 to hardcoreCounter do
21801: LD_ADDR_VAR 0 8
21805: PUSH
21806: DOUBLE
21807: LD_INT 1
21809: DEC
21810: ST_TO_ADDR
21811: LD_EXP 40
21815: PUSH
21816: FOR_TO
21817: IFFALSE 21863
// begin if flags [ normalCounter + i ] then
21819: LD_VAR 0 4
21823: PUSH
21824: LD_EXP 39
21828: PUSH
21829: LD_VAR 0 8
21833: PLUS
21834: ARRAY
21835: IFFALSE 21861
// tmp := tmp & ( 100 + i ) & ; ;
21837: LD_ADDR_VAR 0 3
21841: PUSH
21842: LD_VAR 0 3
21846: PUSH
21847: LD_INT 100
21849: PUSH
21850: LD_VAR 0 8
21854: PLUS
21855: STR
21856: PUSH
21857: LD_STRING ;
21859: STR
21860: ST_TO_ADDR
// end ;
21861: GO 21816
21863: POP
21864: POP
// if tmp then
21865: LD_VAR 0 3
21869: IFFALSE 21881
// active := tmp ;
21871: LD_ADDR_VAR 0 7
21875: PUSH
21876: LD_VAR 0 3
21880: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21881: LD_STRING getStreamItemsFromMission("
21883: PUSH
21884: LD_VAR 0 5
21888: STR
21889: PUSH
21890: LD_STRING ","
21892: STR
21893: PUSH
21894: LD_VAR 0 6
21898: STR
21899: PUSH
21900: LD_STRING ","
21902: STR
21903: PUSH
21904: LD_VAR 0 7
21908: STR
21909: PUSH
21910: LD_STRING ")
21912: STR
21913: PPUSH
21914: CALL_OW 559
// end else
21918: GO 21927
// ToLua ( getStreamItemsFromMission("","","") ) ;
21920: LD_STRING getStreamItemsFromMission("","","")
21922: PPUSH
21923: CALL_OW 559
// end ;
21927: LD_VAR 0 2
21931: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21932: LD_EXP 38
21936: IFFALSE 21944
21938: PUSH
21939: LD_EXP 43
21943: AND
21944: IFFALSE 22068
21946: GO 21948
21948: DISABLE
21949: LD_INT 0
21951: PPUSH
21952: PPUSH
// begin enable ;
21953: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21954: LD_ADDR_VAR 0 2
21958: PUSH
21959: LD_INT 22
21961: PUSH
21962: LD_OWVAR 2
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: LD_INT 2
21973: PUSH
21974: LD_INT 34
21976: PUSH
21977: LD_INT 7
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 34
21986: PUSH
21987: LD_INT 45
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PUSH
21994: LD_INT 34
21996: PUSH
21997: LD_INT 28
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 34
22006: PUSH
22007: LD_INT 47
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PPUSH
22025: CALL_OW 69
22029: ST_TO_ADDR
// if not tmp then
22030: LD_VAR 0 2
22034: NOT
22035: IFFALSE 22039
// exit ;
22037: GO 22068
// for i in tmp do
22039: LD_ADDR_VAR 0 1
22043: PUSH
22044: LD_VAR 0 2
22048: PUSH
22049: FOR_IN
22050: IFFALSE 22066
// begin SetLives ( i , 0 ) ;
22052: LD_VAR 0 1
22056: PPUSH
22057: LD_INT 0
22059: PPUSH
22060: CALL_OW 234
// end ;
22064: GO 22049
22066: POP
22067: POP
// end ;
22068: PPOPN 2
22070: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22071: LD_EXP 38
22075: IFFALSE 22083
22077: PUSH
22078: LD_EXP 44
22082: AND
22083: IFFALSE 22167
22085: GO 22087
22087: DISABLE
22088: LD_INT 0
22090: PPUSH
22091: PPUSH
// begin enable ;
22092: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22093: LD_ADDR_VAR 0 2
22097: PUSH
22098: LD_INT 22
22100: PUSH
22101: LD_OWVAR 2
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 32
22112: PUSH
22113: LD_INT 3
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PPUSH
22124: CALL_OW 69
22128: ST_TO_ADDR
// if not tmp then
22129: LD_VAR 0 2
22133: NOT
22134: IFFALSE 22138
// exit ;
22136: GO 22167
// for i in tmp do
22138: LD_ADDR_VAR 0 1
22142: PUSH
22143: LD_VAR 0 2
22147: PUSH
22148: FOR_IN
22149: IFFALSE 22165
// begin SetLives ( i , 0 ) ;
22151: LD_VAR 0 1
22155: PPUSH
22156: LD_INT 0
22158: PPUSH
22159: CALL_OW 234
// end ;
22163: GO 22148
22165: POP
22166: POP
// end ;
22167: PPOPN 2
22169: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22170: LD_EXP 38
22174: IFFALSE 22182
22176: PUSH
22177: LD_EXP 41
22181: AND
22182: IFFALSE 22275
22184: GO 22186
22186: DISABLE
22187: LD_INT 0
22189: PPUSH
// begin enable ;
22190: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22191: LD_ADDR_VAR 0 1
22195: PUSH
22196: LD_INT 22
22198: PUSH
22199: LD_OWVAR 2
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 2
22210: PUSH
22211: LD_INT 25
22213: PUSH
22214: LD_INT 5
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 25
22223: PUSH
22224: LD_INT 9
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 25
22233: PUSH
22234: LD_INT 8
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PPUSH
22251: CALL_OW 69
22255: PUSH
22256: FOR_IN
22257: IFFALSE 22273
// begin SetClass ( i , 1 ) ;
22259: LD_VAR 0 1
22263: PPUSH
22264: LD_INT 1
22266: PPUSH
22267: CALL_OW 336
// end ;
22271: GO 22256
22273: POP
22274: POP
// end ;
22275: PPOPN 1
22277: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22278: LD_EXP 38
22282: IFFALSE 22290
22284: PUSH
22285: LD_EXP 42
22289: AND
22290: IFFALSE 22302
22292: PUSH
22293: LD_OWVAR 65
22297: PUSH
22298: LD_INT 7
22300: LESS
22301: AND
22302: IFFALSE 22316
22304: GO 22306
22306: DISABLE
// begin enable ;
22307: ENABLE
// game_speed := 7 ;
22308: LD_ADDR_OWVAR 65
22312: PUSH
22313: LD_INT 7
22315: ST_TO_ADDR
// end ;
22316: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22317: LD_EXP 38
22321: IFFALSE 22329
22323: PUSH
22324: LD_EXP 45
22328: AND
22329: IFFALSE 22531
22331: GO 22333
22333: DISABLE
22334: LD_INT 0
22336: PPUSH
22337: PPUSH
22338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22339: LD_ADDR_VAR 0 3
22343: PUSH
22344: LD_INT 81
22346: PUSH
22347: LD_OWVAR 2
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 21
22358: PUSH
22359: LD_INT 1
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PPUSH
22370: CALL_OW 69
22374: ST_TO_ADDR
// if not tmp then
22375: LD_VAR 0 3
22379: NOT
22380: IFFALSE 22384
// exit ;
22382: GO 22531
// if tmp > 5 then
22384: LD_VAR 0 3
22388: PUSH
22389: LD_INT 5
22391: GREATER
22392: IFFALSE 22404
// k := 5 else
22394: LD_ADDR_VAR 0 2
22398: PUSH
22399: LD_INT 5
22401: ST_TO_ADDR
22402: GO 22414
// k := tmp ;
22404: LD_ADDR_VAR 0 2
22408: PUSH
22409: LD_VAR 0 3
22413: ST_TO_ADDR
// for i := 1 to k do
22414: LD_ADDR_VAR 0 1
22418: PUSH
22419: DOUBLE
22420: LD_INT 1
22422: DEC
22423: ST_TO_ADDR
22424: LD_VAR 0 2
22428: PUSH
22429: FOR_TO
22430: IFFALSE 22529
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22432: LD_VAR 0 3
22436: PUSH
22437: LD_VAR 0 1
22441: ARRAY
22442: PPUSH
22443: LD_VAR 0 1
22447: PUSH
22448: LD_INT 4
22450: MOD
22451: PUSH
22452: LD_INT 1
22454: PLUS
22455: PPUSH
22456: CALL_OW 259
22460: PUSH
22461: LD_INT 10
22463: LESS
22464: IFFALSE 22527
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22466: LD_VAR 0 3
22470: PUSH
22471: LD_VAR 0 1
22475: ARRAY
22476: PPUSH
22477: LD_VAR 0 1
22481: PUSH
22482: LD_INT 4
22484: MOD
22485: PUSH
22486: LD_INT 1
22488: PLUS
22489: PPUSH
22490: LD_VAR 0 3
22494: PUSH
22495: LD_VAR 0 1
22499: ARRAY
22500: PPUSH
22501: LD_VAR 0 1
22505: PUSH
22506: LD_INT 4
22508: MOD
22509: PUSH
22510: LD_INT 1
22512: PLUS
22513: PPUSH
22514: CALL_OW 259
22518: PUSH
22519: LD_INT 1
22521: PLUS
22522: PPUSH
22523: CALL_OW 237
22527: GO 22429
22529: POP
22530: POP
// end ;
22531: PPOPN 3
22533: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22534: LD_EXP 38
22538: IFFALSE 22546
22540: PUSH
22541: LD_EXP 46
22545: AND
22546: IFFALSE 22566
22548: GO 22550
22550: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22551: LD_INT 4
22553: PPUSH
22554: LD_OWVAR 2
22558: PPUSH
22559: LD_INT 0
22561: PPUSH
22562: CALL_OW 324
22566: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22567: LD_EXP 38
22571: IFFALSE 22579
22573: PUSH
22574: LD_EXP 75
22578: AND
22579: IFFALSE 22599
22581: GO 22583
22583: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22584: LD_INT 19
22586: PPUSH
22587: LD_OWVAR 2
22591: PPUSH
22592: LD_INT 0
22594: PPUSH
22595: CALL_OW 324
22599: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22600: LD_EXP 38
22604: IFFALSE 22612
22606: PUSH
22607: LD_EXP 47
22611: AND
22612: IFFALSE 22714
22614: GO 22616
22616: DISABLE
22617: LD_INT 0
22619: PPUSH
22620: PPUSH
// begin enable ;
22621: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22622: LD_ADDR_VAR 0 2
22626: PUSH
22627: LD_INT 22
22629: PUSH
22630: LD_OWVAR 2
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 2
22641: PUSH
22642: LD_INT 34
22644: PUSH
22645: LD_INT 11
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 34
22654: PUSH
22655: LD_INT 30
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: LIST
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PPUSH
22671: CALL_OW 69
22675: ST_TO_ADDR
// if not tmp then
22676: LD_VAR 0 2
22680: NOT
22681: IFFALSE 22685
// exit ;
22683: GO 22714
// for i in tmp do
22685: LD_ADDR_VAR 0 1
22689: PUSH
22690: LD_VAR 0 2
22694: PUSH
22695: FOR_IN
22696: IFFALSE 22712
// begin SetLives ( i , 0 ) ;
22698: LD_VAR 0 1
22702: PPUSH
22703: LD_INT 0
22705: PPUSH
22706: CALL_OW 234
// end ;
22710: GO 22695
22712: POP
22713: POP
// end ;
22714: PPOPN 2
22716: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22717: LD_EXP 38
22721: IFFALSE 22729
22723: PUSH
22724: LD_EXP 48
22728: AND
22729: IFFALSE 22749
22731: GO 22733
22733: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22734: LD_INT 32
22736: PPUSH
22737: LD_OWVAR 2
22741: PPUSH
22742: LD_INT 0
22744: PPUSH
22745: CALL_OW 324
22749: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22750: LD_EXP 38
22754: IFFALSE 22762
22756: PUSH
22757: LD_EXP 49
22761: AND
22762: IFFALSE 22945
22764: GO 22766
22766: DISABLE
22767: LD_INT 0
22769: PPUSH
22770: PPUSH
22771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22772: LD_ADDR_VAR 0 2
22776: PUSH
22777: LD_INT 22
22779: PUSH
22780: LD_OWVAR 2
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 33
22791: PUSH
22792: LD_INT 3
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PPUSH
22803: CALL_OW 69
22807: ST_TO_ADDR
// if not tmp then
22808: LD_VAR 0 2
22812: NOT
22813: IFFALSE 22817
// exit ;
22815: GO 22945
// side := 0 ;
22817: LD_ADDR_VAR 0 3
22821: PUSH
22822: LD_INT 0
22824: ST_TO_ADDR
// for i := 1 to 8 do
22825: LD_ADDR_VAR 0 1
22829: PUSH
22830: DOUBLE
22831: LD_INT 1
22833: DEC
22834: ST_TO_ADDR
22835: LD_INT 8
22837: PUSH
22838: FOR_TO
22839: IFFALSE 22889
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22841: LD_OWVAR 2
22845: PUSH
22846: LD_VAR 0 1
22850: NONEQUAL
22851: IFFALSE 22873
22853: PUSH
22854: LD_OWVAR 2
22858: PPUSH
22859: LD_VAR 0 1
22863: PPUSH
22864: CALL_OW 81
22868: PUSH
22869: LD_INT 2
22871: EQUAL
22872: AND
22873: IFFALSE 22887
// begin side := i ;
22875: LD_ADDR_VAR 0 3
22879: PUSH
22880: LD_VAR 0 1
22884: ST_TO_ADDR
// break ;
22885: GO 22889
// end ;
22887: GO 22838
22889: POP
22890: POP
// if not side then
22891: LD_VAR 0 3
22895: NOT
22896: IFFALSE 22900
// exit ;
22898: GO 22945
// for i := 1 to tmp do
22900: LD_ADDR_VAR 0 1
22904: PUSH
22905: DOUBLE
22906: LD_INT 1
22908: DEC
22909: ST_TO_ADDR
22910: LD_VAR 0 2
22914: PUSH
22915: FOR_TO
22916: IFFALSE 22943
// if Prob ( 60 ) then
22918: LD_INT 60
22920: PPUSH
22921: CALL_OW 13
22925: IFFALSE 22941
// SetSide ( i , side ) ;
22927: LD_VAR 0 1
22931: PPUSH
22932: LD_VAR 0 3
22936: PPUSH
22937: CALL_OW 235
22941: GO 22915
22943: POP
22944: POP
// end ;
22945: PPOPN 3
22947: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22948: LD_EXP 38
22952: IFFALSE 22960
22954: PUSH
22955: LD_EXP 51
22959: AND
22960: IFFALSE 23079
22962: GO 22964
22964: DISABLE
22965: LD_INT 0
22967: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22968: LD_ADDR_VAR 0 1
22972: PUSH
22973: LD_INT 22
22975: PUSH
22976: LD_OWVAR 2
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 21
22987: PUSH
22988: LD_INT 1
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PUSH
22995: LD_INT 3
22997: PUSH
22998: LD_INT 23
23000: PUSH
23001: LD_INT 0
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: LIST
23016: PPUSH
23017: CALL_OW 69
23021: PUSH
23022: FOR_IN
23023: IFFALSE 23077
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23025: LD_VAR 0 1
23029: PPUSH
23030: CALL_OW 257
23034: PUSH
23035: LD_INT 1
23037: PUSH
23038: LD_INT 2
23040: PUSH
23041: LD_INT 3
23043: PUSH
23044: LD_INT 4
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: IN
23053: IFFALSE 23075
// SetClass ( un , rand ( 1 , 4 ) ) ;
23055: LD_VAR 0 1
23059: PPUSH
23060: LD_INT 1
23062: PPUSH
23063: LD_INT 4
23065: PPUSH
23066: CALL_OW 12
23070: PPUSH
23071: CALL_OW 336
23075: GO 23022
23077: POP
23078: POP
// end ;
23079: PPOPN 1
23081: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23082: LD_EXP 38
23086: IFFALSE 23094
23088: PUSH
23089: LD_EXP 50
23093: AND
23094: IFFALSE 23173
23096: GO 23098
23098: DISABLE
23099: LD_INT 0
23101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23102: LD_ADDR_VAR 0 1
23106: PUSH
23107: LD_INT 22
23109: PUSH
23110: LD_OWVAR 2
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 21
23121: PUSH
23122: LD_INT 3
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PPUSH
23133: CALL_OW 69
23137: ST_TO_ADDR
// if not tmp then
23138: LD_VAR 0 1
23142: NOT
23143: IFFALSE 23147
// exit ;
23145: GO 23173
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23147: LD_VAR 0 1
23151: PUSH
23152: LD_INT 1
23154: PPUSH
23155: LD_VAR 0 1
23159: PPUSH
23160: CALL_OW 12
23164: ARRAY
23165: PPUSH
23166: LD_INT 100
23168: PPUSH
23169: CALL_OW 234
// end ;
23173: PPOPN 1
23175: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23176: LD_EXP 38
23180: IFFALSE 23188
23182: PUSH
23183: LD_EXP 52
23187: AND
23188: IFFALSE 23286
23190: GO 23192
23192: DISABLE
23193: LD_INT 0
23195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23196: LD_ADDR_VAR 0 1
23200: PUSH
23201: LD_INT 22
23203: PUSH
23204: LD_OWVAR 2
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: LD_INT 21
23215: PUSH
23216: LD_INT 1
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PPUSH
23227: CALL_OW 69
23231: ST_TO_ADDR
// if not tmp then
23232: LD_VAR 0 1
23236: NOT
23237: IFFALSE 23241
// exit ;
23239: GO 23286
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23241: LD_VAR 0 1
23245: PUSH
23246: LD_INT 1
23248: PPUSH
23249: LD_VAR 0 1
23253: PPUSH
23254: CALL_OW 12
23258: ARRAY
23259: PPUSH
23260: LD_INT 1
23262: PPUSH
23263: LD_INT 4
23265: PPUSH
23266: CALL_OW 12
23270: PPUSH
23271: LD_INT 3000
23273: PPUSH
23274: LD_INT 9000
23276: PPUSH
23277: CALL_OW 12
23281: PPUSH
23282: CALL_OW 492
// end ;
23286: PPOPN 1
23288: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23289: LD_EXP 38
23293: IFFALSE 23301
23295: PUSH
23296: LD_EXP 53
23300: AND
23301: IFFALSE 23321
23303: GO 23305
23305: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23306: LD_INT 1
23308: PPUSH
23309: LD_OWVAR 2
23313: PPUSH
23314: LD_INT 0
23316: PPUSH
23317: CALL_OW 324
23321: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23322: LD_EXP 38
23326: IFFALSE 23334
23328: PUSH
23329: LD_EXP 54
23333: AND
23334: IFFALSE 23417
23336: GO 23338
23338: DISABLE
23339: LD_INT 0
23341: PPUSH
23342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23343: LD_ADDR_VAR 0 2
23347: PUSH
23348: LD_INT 22
23350: PUSH
23351: LD_OWVAR 2
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 21
23362: PUSH
23363: LD_INT 3
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PPUSH
23374: CALL_OW 69
23378: ST_TO_ADDR
// if not tmp then
23379: LD_VAR 0 2
23383: NOT
23384: IFFALSE 23388
// exit ;
23386: GO 23417
// for i in tmp do
23388: LD_ADDR_VAR 0 1
23392: PUSH
23393: LD_VAR 0 2
23397: PUSH
23398: FOR_IN
23399: IFFALSE 23415
// SetBLevel ( i , 10 ) ;
23401: LD_VAR 0 1
23405: PPUSH
23406: LD_INT 10
23408: PPUSH
23409: CALL_OW 241
23413: GO 23398
23415: POP
23416: POP
// end ;
23417: PPOPN 2
23419: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23420: LD_EXP 38
23424: IFFALSE 23432
23426: PUSH
23427: LD_EXP 55
23431: AND
23432: IFFALSE 23543
23434: GO 23436
23436: DISABLE
23437: LD_INT 0
23439: PPUSH
23440: PPUSH
23441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23442: LD_ADDR_VAR 0 3
23446: PUSH
23447: LD_INT 22
23449: PUSH
23450: LD_OWVAR 2
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: LD_INT 25
23461: PUSH
23462: LD_INT 1
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PPUSH
23473: CALL_OW 69
23477: ST_TO_ADDR
// if not tmp then
23478: LD_VAR 0 3
23482: NOT
23483: IFFALSE 23487
// exit ;
23485: GO 23543
// un := tmp [ rand ( 1 , tmp ) ] ;
23487: LD_ADDR_VAR 0 2
23491: PUSH
23492: LD_VAR 0 3
23496: PUSH
23497: LD_INT 1
23499: PPUSH
23500: LD_VAR 0 3
23504: PPUSH
23505: CALL_OW 12
23509: ARRAY
23510: ST_TO_ADDR
// if Crawls ( un ) then
23511: LD_VAR 0 2
23515: PPUSH
23516: CALL_OW 318
23520: IFFALSE 23531
// ComWalk ( un ) ;
23522: LD_VAR 0 2
23526: PPUSH
23527: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23531: LD_VAR 0 2
23535: PPUSH
23536: LD_INT 5
23538: PPUSH
23539: CALL_OW 336
// end ;
23543: PPOPN 3
23545: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23546: LD_EXP 38
23550: IFFALSE 23558
23552: PUSH
23553: LD_EXP 56
23557: AND
23558: IFFALSE 23570
23560: PUSH
23561: LD_OWVAR 67
23565: PUSH
23566: LD_INT 4
23568: LESS
23569: AND
23570: IFFALSE 23589
23572: GO 23574
23574: DISABLE
// begin Difficulty := Difficulty + 1 ;
23575: LD_ADDR_OWVAR 67
23579: PUSH
23580: LD_OWVAR 67
23584: PUSH
23585: LD_INT 1
23587: PLUS
23588: ST_TO_ADDR
// end ;
23589: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23590: LD_EXP 38
23594: IFFALSE 23602
23596: PUSH
23597: LD_EXP 57
23601: AND
23602: IFFALSE 23705
23604: GO 23606
23606: DISABLE
23607: LD_INT 0
23609: PPUSH
// begin for i := 1 to 5 do
23610: LD_ADDR_VAR 0 1
23614: PUSH
23615: DOUBLE
23616: LD_INT 1
23618: DEC
23619: ST_TO_ADDR
23620: LD_INT 5
23622: PUSH
23623: FOR_TO
23624: IFFALSE 23703
// begin uc_nation := nation_nature ;
23626: LD_ADDR_OWVAR 21
23630: PUSH
23631: LD_INT 0
23633: ST_TO_ADDR
// uc_side := 0 ;
23634: LD_ADDR_OWVAR 20
23638: PUSH
23639: LD_INT 0
23641: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23642: LD_ADDR_OWVAR 29
23646: PUSH
23647: LD_INT 12
23649: PUSH
23650: LD_INT 12
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: ST_TO_ADDR
// hc_agressivity := 20 ;
23657: LD_ADDR_OWVAR 35
23661: PUSH
23662: LD_INT 20
23664: ST_TO_ADDR
// hc_class := class_tiger ;
23665: LD_ADDR_OWVAR 28
23669: PUSH
23670: LD_INT 14
23672: ST_TO_ADDR
// hc_gallery :=  ;
23673: LD_ADDR_OWVAR 33
23677: PUSH
23678: LD_STRING 
23680: ST_TO_ADDR
// hc_name :=  ;
23681: LD_ADDR_OWVAR 26
23685: PUSH
23686: LD_STRING 
23688: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23689: CALL_OW 44
23693: PPUSH
23694: LD_INT 0
23696: PPUSH
23697: CALL_OW 51
// end ;
23701: GO 23623
23703: POP
23704: POP
// end ;
23705: PPOPN 1
23707: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23708: LD_EXP 38
23712: IFFALSE 23720
23714: PUSH
23715: LD_EXP 58
23719: AND
23720: IFFALSE 23729
23722: GO 23724
23724: DISABLE
// StreamSibBomb ;
23725: CALL 23730 0 0
23729: END
// export function StreamSibBomb ; var i , x , y ; begin
23730: LD_INT 0
23732: PPUSH
23733: PPUSH
23734: PPUSH
23735: PPUSH
// result := false ;
23736: LD_ADDR_VAR 0 1
23740: PUSH
23741: LD_INT 0
23743: ST_TO_ADDR
// for i := 1 to 16 do
23744: LD_ADDR_VAR 0 2
23748: PUSH
23749: DOUBLE
23750: LD_INT 1
23752: DEC
23753: ST_TO_ADDR
23754: LD_INT 16
23756: PUSH
23757: FOR_TO
23758: IFFALSE 23957
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23760: LD_ADDR_VAR 0 3
23764: PUSH
23765: LD_INT 10
23767: PUSH
23768: LD_INT 20
23770: PUSH
23771: LD_INT 30
23773: PUSH
23774: LD_INT 40
23776: PUSH
23777: LD_INT 50
23779: PUSH
23780: LD_INT 60
23782: PUSH
23783: LD_INT 70
23785: PUSH
23786: LD_INT 80
23788: PUSH
23789: LD_INT 90
23791: PUSH
23792: LD_INT 100
23794: PUSH
23795: LD_INT 110
23797: PUSH
23798: LD_INT 120
23800: PUSH
23801: LD_INT 130
23803: PUSH
23804: LD_INT 140
23806: PUSH
23807: LD_INT 150
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 1
23829: PPUSH
23830: LD_INT 15
23832: PPUSH
23833: CALL_OW 12
23837: ARRAY
23838: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23839: LD_ADDR_VAR 0 4
23843: PUSH
23844: LD_INT 10
23846: PUSH
23847: LD_INT 20
23849: PUSH
23850: LD_INT 30
23852: PUSH
23853: LD_INT 40
23855: PUSH
23856: LD_INT 50
23858: PUSH
23859: LD_INT 60
23861: PUSH
23862: LD_INT 70
23864: PUSH
23865: LD_INT 80
23867: PUSH
23868: LD_INT 90
23870: PUSH
23871: LD_INT 100
23873: PUSH
23874: LD_INT 110
23876: PUSH
23877: LD_INT 120
23879: PUSH
23880: LD_INT 130
23882: PUSH
23883: LD_INT 140
23885: PUSH
23886: LD_INT 150
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 1
23908: PPUSH
23909: LD_INT 15
23911: PPUSH
23912: CALL_OW 12
23916: ARRAY
23917: ST_TO_ADDR
// if ValidHex ( x , y ) then
23918: LD_VAR 0 3
23922: PPUSH
23923: LD_VAR 0 4
23927: PPUSH
23928: CALL_OW 488
23932: IFFALSE 23955
// begin result := [ x , y ] ;
23934: LD_ADDR_VAR 0 1
23938: PUSH
23939: LD_VAR 0 3
23943: PUSH
23944: LD_VAR 0 4
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: ST_TO_ADDR
// break ;
23953: GO 23957
// end ; end ;
23955: GO 23757
23957: POP
23958: POP
// if result then
23959: LD_VAR 0 1
23963: IFFALSE 24023
// begin ToLua ( playSibBomb() ) ;
23965: LD_STRING playSibBomb()
23967: PPUSH
23968: CALL_OW 559
// wait ( 0 0$14 ) ;
23972: LD_INT 490
23974: PPUSH
23975: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23979: LD_VAR 0 1
23983: PUSH
23984: LD_INT 1
23986: ARRAY
23987: PPUSH
23988: LD_VAR 0 1
23992: PUSH
23993: LD_INT 2
23995: ARRAY
23996: PPUSH
23997: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24001: LD_VAR 0 1
24005: PUSH
24006: LD_INT 1
24008: ARRAY
24009: PPUSH
24010: LD_VAR 0 1
24014: PUSH
24015: LD_INT 2
24017: ARRAY
24018: PPUSH
24019: CALL_OW 429
// end ; end ;
24023: LD_VAR 0 1
24027: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24028: LD_EXP 38
24032: IFFALSE 24040
24034: PUSH
24035: LD_EXP 60
24039: AND
24040: IFFALSE 24052
24042: GO 24044
24044: DISABLE
// YouLost (  ) ;
24045: LD_STRING 
24047: PPUSH
24048: CALL_OW 104
24052: END
// every 0 0$1 trigger StreamModeActive and sFog do
24053: LD_EXP 38
24057: IFFALSE 24065
24059: PUSH
24060: LD_EXP 59
24064: AND
24065: IFFALSE 24079
24067: GO 24069
24069: DISABLE
// FogOff ( your_side ) ;
24070: LD_OWVAR 2
24074: PPUSH
24075: CALL_OW 344
24079: END
// every 0 0$1 trigger StreamModeActive and sSun do
24080: LD_EXP 38
24084: IFFALSE 24092
24086: PUSH
24087: LD_EXP 61
24091: AND
24092: IFFALSE 24120
24094: GO 24096
24096: DISABLE
// begin solar_recharge_percent := 0 ;
24097: LD_ADDR_OWVAR 79
24101: PUSH
24102: LD_INT 0
24104: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24105: LD_INT 10500
24107: PPUSH
24108: CALL_OW 67
// solar_recharge_percent := 100 ;
24112: LD_ADDR_OWVAR 79
24116: PUSH
24117: LD_INT 100
24119: ST_TO_ADDR
// end ;
24120: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24121: LD_EXP 38
24125: IFFALSE 24133
24127: PUSH
24128: LD_EXP 62
24132: AND
24133: IFFALSE 24372
24135: GO 24137
24137: DISABLE
24138: LD_INT 0
24140: PPUSH
24141: PPUSH
24142: PPUSH
// begin tmp := [ ] ;
24143: LD_ADDR_VAR 0 3
24147: PUSH
24148: EMPTY
24149: ST_TO_ADDR
// for i := 1 to 6 do
24150: LD_ADDR_VAR 0 1
24154: PUSH
24155: DOUBLE
24156: LD_INT 1
24158: DEC
24159: ST_TO_ADDR
24160: LD_INT 6
24162: PUSH
24163: FOR_TO
24164: IFFALSE 24269
// begin uc_nation := nation_nature ;
24166: LD_ADDR_OWVAR 21
24170: PUSH
24171: LD_INT 0
24173: ST_TO_ADDR
// uc_side := 0 ;
24174: LD_ADDR_OWVAR 20
24178: PUSH
24179: LD_INT 0
24181: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24182: LD_ADDR_OWVAR 29
24186: PUSH
24187: LD_INT 12
24189: PUSH
24190: LD_INT 12
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: ST_TO_ADDR
// hc_agressivity := 20 ;
24197: LD_ADDR_OWVAR 35
24201: PUSH
24202: LD_INT 20
24204: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24205: LD_ADDR_OWVAR 28
24209: PUSH
24210: LD_INT 17
24212: ST_TO_ADDR
// hc_gallery :=  ;
24213: LD_ADDR_OWVAR 33
24217: PUSH
24218: LD_STRING 
24220: ST_TO_ADDR
// hc_name :=  ;
24221: LD_ADDR_OWVAR 26
24225: PUSH
24226: LD_STRING 
24228: ST_TO_ADDR
// un := CreateHuman ;
24229: LD_ADDR_VAR 0 2
24233: PUSH
24234: CALL_OW 44
24238: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24239: LD_VAR 0 2
24243: PPUSH
24244: LD_INT 1
24246: PPUSH
24247: CALL_OW 51
// tmp := tmp ^ un ;
24251: LD_ADDR_VAR 0 3
24255: PUSH
24256: LD_VAR 0 3
24260: PUSH
24261: LD_VAR 0 2
24265: ADD
24266: ST_TO_ADDR
// end ;
24267: GO 24163
24269: POP
24270: POP
// repeat wait ( 0 0$1 ) ;
24271: LD_INT 35
24273: PPUSH
24274: CALL_OW 67
// for un in tmp do
24278: LD_ADDR_VAR 0 2
24282: PUSH
24283: LD_VAR 0 3
24287: PUSH
24288: FOR_IN
24289: IFFALSE 24363
// begin if IsDead ( un ) then
24291: LD_VAR 0 2
24295: PPUSH
24296: CALL_OW 301
24300: IFFALSE 24320
// begin tmp := tmp diff un ;
24302: LD_ADDR_VAR 0 3
24306: PUSH
24307: LD_VAR 0 3
24311: PUSH
24312: LD_VAR 0 2
24316: DIFF
24317: ST_TO_ADDR
// continue ;
24318: GO 24288
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24320: LD_VAR 0 2
24324: PPUSH
24325: LD_INT 3
24327: PUSH
24328: LD_INT 22
24330: PUSH
24331: LD_INT 0
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PPUSH
24342: CALL_OW 69
24346: PPUSH
24347: LD_VAR 0 2
24351: PPUSH
24352: CALL_OW 74
24356: PPUSH
24357: CALL_OW 115
// end ;
24361: GO 24288
24363: POP
24364: POP
// until not tmp ;
24365: LD_VAR 0 3
24369: NOT
24370: IFFALSE 24271
// end ;
24372: PPOPN 3
24374: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24375: LD_EXP 38
24379: IFFALSE 24387
24381: PUSH
24382: LD_EXP 63
24386: AND
24387: IFFALSE 24441
24389: GO 24391
24391: DISABLE
// begin ToLua ( displayTroll(); ) ;
24392: LD_STRING displayTroll();
24394: PPUSH
24395: CALL_OW 559
// wait ( 3 3$00 ) ;
24399: LD_INT 6300
24401: PPUSH
24402: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24406: LD_STRING hideTroll();
24408: PPUSH
24409: CALL_OW 559
// wait ( 1 1$00 ) ;
24413: LD_INT 2100
24415: PPUSH
24416: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24420: LD_STRING displayTroll();
24422: PPUSH
24423: CALL_OW 559
// wait ( 1 1$00 ) ;
24427: LD_INT 2100
24429: PPUSH
24430: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24434: LD_STRING hideTroll();
24436: PPUSH
24437: CALL_OW 559
// end ;
24441: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24442: LD_EXP 38
24446: IFFALSE 24454
24448: PUSH
24449: LD_EXP 64
24453: AND
24454: IFFALSE 24517
24456: GO 24458
24458: DISABLE
24459: LD_INT 0
24461: PPUSH
// begin p := 0 ;
24462: LD_ADDR_VAR 0 1
24466: PUSH
24467: LD_INT 0
24469: ST_TO_ADDR
// repeat game_speed := 1 ;
24470: LD_ADDR_OWVAR 65
24474: PUSH
24475: LD_INT 1
24477: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24478: LD_INT 35
24480: PPUSH
24481: CALL_OW 67
// p := p + 1 ;
24485: LD_ADDR_VAR 0 1
24489: PUSH
24490: LD_VAR 0 1
24494: PUSH
24495: LD_INT 1
24497: PLUS
24498: ST_TO_ADDR
// until p >= 60 ;
24499: LD_VAR 0 1
24503: PUSH
24504: LD_INT 60
24506: GREATEREQUAL
24507: IFFALSE 24470
// game_speed := 4 ;
24509: LD_ADDR_OWVAR 65
24513: PUSH
24514: LD_INT 4
24516: ST_TO_ADDR
// end ;
24517: PPOPN 1
24519: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24520: LD_EXP 38
24524: IFFALSE 24532
24526: PUSH
24527: LD_EXP 65
24531: AND
24532: IFFALSE 24678
24534: GO 24536
24536: DISABLE
24537: LD_INT 0
24539: PPUSH
24540: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24541: LD_ADDR_VAR 0 1
24545: PUSH
24546: LD_INT 22
24548: PUSH
24549: LD_OWVAR 2
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 2
24560: PUSH
24561: LD_INT 30
24563: PUSH
24564: LD_INT 0
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 30
24573: PUSH
24574: LD_INT 1
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: LIST
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PPUSH
24590: CALL_OW 69
24594: ST_TO_ADDR
// if not depot then
24595: LD_VAR 0 1
24599: NOT
24600: IFFALSE 24604
// exit ;
24602: GO 24678
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24604: LD_ADDR_VAR 0 2
24608: PUSH
24609: LD_VAR 0 1
24613: PUSH
24614: LD_INT 1
24616: PPUSH
24617: LD_VAR 0 1
24621: PPUSH
24622: CALL_OW 12
24626: ARRAY
24627: PPUSH
24628: CALL_OW 274
24632: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24633: LD_VAR 0 2
24637: PPUSH
24638: LD_INT 1
24640: PPUSH
24641: LD_INT 0
24643: PPUSH
24644: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24648: LD_VAR 0 2
24652: PPUSH
24653: LD_INT 2
24655: PPUSH
24656: LD_INT 0
24658: PPUSH
24659: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24663: LD_VAR 0 2
24667: PPUSH
24668: LD_INT 3
24670: PPUSH
24671: LD_INT 0
24673: PPUSH
24674: CALL_OW 277
// end ;
24678: PPOPN 2
24680: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24681: LD_EXP 38
24685: IFFALSE 24693
24687: PUSH
24688: LD_EXP 66
24692: AND
24693: IFFALSE 24790
24695: GO 24697
24697: DISABLE
24698: LD_INT 0
24700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24701: LD_ADDR_VAR 0 1
24705: PUSH
24706: LD_INT 22
24708: PUSH
24709: LD_OWVAR 2
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 21
24720: PUSH
24721: LD_INT 1
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 3
24730: PUSH
24731: LD_INT 23
24733: PUSH
24734: LD_INT 0
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: LIST
24749: PPUSH
24750: CALL_OW 69
24754: ST_TO_ADDR
// if not tmp then
24755: LD_VAR 0 1
24759: NOT
24760: IFFALSE 24764
// exit ;
24762: GO 24790
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24764: LD_VAR 0 1
24768: PUSH
24769: LD_INT 1
24771: PPUSH
24772: LD_VAR 0 1
24776: PPUSH
24777: CALL_OW 12
24781: ARRAY
24782: PPUSH
24783: LD_INT 200
24785: PPUSH
24786: CALL_OW 234
// end ;
24790: PPOPN 1
24792: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24793: LD_EXP 38
24797: IFFALSE 24805
24799: PUSH
24800: LD_EXP 67
24804: AND
24805: IFFALSE 24884
24807: GO 24809
24809: DISABLE
24810: LD_INT 0
24812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24813: LD_ADDR_VAR 0 1
24817: PUSH
24818: LD_INT 22
24820: PUSH
24821: LD_OWVAR 2
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 21
24832: PUSH
24833: LD_INT 2
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PPUSH
24844: CALL_OW 69
24848: ST_TO_ADDR
// if not tmp then
24849: LD_VAR 0 1
24853: NOT
24854: IFFALSE 24858
// exit ;
24856: GO 24884
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24858: LD_VAR 0 1
24862: PUSH
24863: LD_INT 1
24865: PPUSH
24866: LD_VAR 0 1
24870: PPUSH
24871: CALL_OW 12
24875: ARRAY
24876: PPUSH
24877: LD_INT 60
24879: PPUSH
24880: CALL_OW 234
// end ;
24884: PPOPN 1
24886: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24887: LD_EXP 38
24891: IFFALSE 24899
24893: PUSH
24894: LD_EXP 68
24898: AND
24899: IFFALSE 24998
24901: GO 24903
24903: DISABLE
24904: LD_INT 0
24906: PPUSH
24907: PPUSH
// begin enable ;
24908: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24909: LD_ADDR_VAR 0 1
24913: PUSH
24914: LD_INT 22
24916: PUSH
24917: LD_OWVAR 2
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: LD_INT 61
24928: PUSH
24929: EMPTY
24930: LIST
24931: PUSH
24932: LD_INT 33
24934: PUSH
24935: LD_INT 2
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: LIST
24946: PPUSH
24947: CALL_OW 69
24951: ST_TO_ADDR
// if not tmp then
24952: LD_VAR 0 1
24956: NOT
24957: IFFALSE 24961
// exit ;
24959: GO 24998
// for i in tmp do
24961: LD_ADDR_VAR 0 2
24965: PUSH
24966: LD_VAR 0 1
24970: PUSH
24971: FOR_IN
24972: IFFALSE 24996
// if IsControledBy ( i ) then
24974: LD_VAR 0 2
24978: PPUSH
24979: CALL_OW 312
24983: IFFALSE 24994
// ComUnlink ( i ) ;
24985: LD_VAR 0 2
24989: PPUSH
24990: CALL_OW 136
24994: GO 24971
24996: POP
24997: POP
// end ;
24998: PPOPN 2
25000: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25001: LD_EXP 38
25005: IFFALSE 25013
25007: PUSH
25008: LD_EXP 69
25012: AND
25013: IFFALSE 25153
25015: GO 25017
25017: DISABLE
25018: LD_INT 0
25020: PPUSH
25021: PPUSH
// begin ToLua ( displayPowell(); ) ;
25022: LD_STRING displayPowell();
25024: PPUSH
25025: CALL_OW 559
// uc_side := 0 ;
25029: LD_ADDR_OWVAR 20
25033: PUSH
25034: LD_INT 0
25036: ST_TO_ADDR
// uc_nation := 2 ;
25037: LD_ADDR_OWVAR 21
25041: PUSH
25042: LD_INT 2
25044: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25045: LD_ADDR_OWVAR 37
25049: PUSH
25050: LD_INT 14
25052: ST_TO_ADDR
// vc_engine := engine_siberite ;
25053: LD_ADDR_OWVAR 39
25057: PUSH
25058: LD_INT 3
25060: ST_TO_ADDR
// vc_control := control_apeman ;
25061: LD_ADDR_OWVAR 38
25065: PUSH
25066: LD_INT 5
25068: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25069: LD_ADDR_OWVAR 40
25073: PUSH
25074: LD_INT 29
25076: ST_TO_ADDR
// un := CreateVehicle ;
25077: LD_ADDR_VAR 0 2
25081: PUSH
25082: CALL_OW 45
25086: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25087: LD_VAR 0 2
25091: PPUSH
25092: LD_INT 1
25094: PPUSH
25095: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25099: LD_INT 35
25101: PPUSH
25102: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25106: LD_VAR 0 2
25110: PPUSH
25111: LD_INT 22
25113: PUSH
25114: LD_OWVAR 2
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PPUSH
25123: CALL_OW 69
25127: PPUSH
25128: LD_VAR 0 2
25132: PPUSH
25133: CALL_OW 74
25137: PPUSH
25138: CALL_OW 115
// until IsDead ( un ) ;
25142: LD_VAR 0 2
25146: PPUSH
25147: CALL_OW 301
25151: IFFALSE 25099
// end ;
25153: PPOPN 2
25155: END
// every 0 0$1 trigger StreamModeActive and sStu do
25156: LD_EXP 38
25160: IFFALSE 25168
25162: PUSH
25163: LD_EXP 77
25167: AND
25168: IFFALSE 25184
25170: GO 25172
25172: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25173: LD_STRING displayStucuk();
25175: PPUSH
25176: CALL_OW 559
// ResetFog ;
25180: CALL_OW 335
// end ;
25184: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25185: LD_EXP 38
25189: IFFALSE 25197
25191: PUSH
25192: LD_EXP 70
25196: AND
25197: IFFALSE 25338
25199: GO 25201
25201: DISABLE
25202: LD_INT 0
25204: PPUSH
25205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25206: LD_ADDR_VAR 0 2
25210: PUSH
25211: LD_INT 22
25213: PUSH
25214: LD_OWVAR 2
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 21
25225: PUSH
25226: LD_INT 1
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PPUSH
25237: CALL_OW 69
25241: ST_TO_ADDR
// if not tmp then
25242: LD_VAR 0 2
25246: NOT
25247: IFFALSE 25251
// exit ;
25249: GO 25338
// un := tmp [ rand ( 1 , tmp ) ] ;
25251: LD_ADDR_VAR 0 1
25255: PUSH
25256: LD_VAR 0 2
25260: PUSH
25261: LD_INT 1
25263: PPUSH
25264: LD_VAR 0 2
25268: PPUSH
25269: CALL_OW 12
25273: ARRAY
25274: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25275: LD_VAR 0 1
25279: PPUSH
25280: LD_INT 0
25282: PPUSH
25283: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25287: LD_VAR 0 1
25291: PPUSH
25292: LD_OWVAR 3
25296: PUSH
25297: LD_VAR 0 1
25301: DIFF
25302: PPUSH
25303: LD_VAR 0 1
25307: PPUSH
25308: CALL_OW 74
25312: PPUSH
25313: CALL_OW 115
// wait ( 0 0$20 ) ;
25317: LD_INT 700
25319: PPUSH
25320: CALL_OW 67
// SetSide ( un , your_side ) ;
25324: LD_VAR 0 1
25328: PPUSH
25329: LD_OWVAR 2
25333: PPUSH
25334: CALL_OW 235
// end ;
25338: PPOPN 2
25340: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25341: LD_EXP 38
25345: IFFALSE 25353
25347: PUSH
25348: LD_EXP 71
25352: AND
25353: IFFALSE 25459
25355: GO 25357
25357: DISABLE
25358: LD_INT 0
25360: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25361: LD_ADDR_VAR 0 1
25365: PUSH
25366: LD_INT 22
25368: PUSH
25369: LD_OWVAR 2
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: LD_INT 2
25380: PUSH
25381: LD_INT 30
25383: PUSH
25384: LD_INT 0
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 30
25393: PUSH
25394: LD_INT 1
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: LIST
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PPUSH
25410: CALL_OW 69
25414: ST_TO_ADDR
// if not depot then
25415: LD_VAR 0 1
25419: NOT
25420: IFFALSE 25424
// exit ;
25422: GO 25459
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25424: LD_VAR 0 1
25428: PUSH
25429: LD_INT 1
25431: ARRAY
25432: PPUSH
25433: CALL_OW 250
25437: PPUSH
25438: LD_VAR 0 1
25442: PUSH
25443: LD_INT 1
25445: ARRAY
25446: PPUSH
25447: CALL_OW 251
25451: PPUSH
25452: LD_INT 70
25454: PPUSH
25455: CALL_OW 495
// end ;
25459: PPOPN 1
25461: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25462: LD_EXP 38
25466: IFFALSE 25474
25468: PUSH
25469: LD_EXP 72
25473: AND
25474: IFFALSE 25685
25476: GO 25478
25478: DISABLE
25479: LD_INT 0
25481: PPUSH
25482: PPUSH
25483: PPUSH
25484: PPUSH
25485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25486: LD_ADDR_VAR 0 5
25490: PUSH
25491: LD_INT 22
25493: PUSH
25494: LD_OWVAR 2
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 21
25505: PUSH
25506: LD_INT 1
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PPUSH
25517: CALL_OW 69
25521: ST_TO_ADDR
// if not tmp then
25522: LD_VAR 0 5
25526: NOT
25527: IFFALSE 25531
// exit ;
25529: GO 25685
// for i in tmp do
25531: LD_ADDR_VAR 0 1
25535: PUSH
25536: LD_VAR 0 5
25540: PUSH
25541: FOR_IN
25542: IFFALSE 25683
// begin d := rand ( 0 , 5 ) ;
25544: LD_ADDR_VAR 0 4
25548: PUSH
25549: LD_INT 0
25551: PPUSH
25552: LD_INT 5
25554: PPUSH
25555: CALL_OW 12
25559: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25560: LD_ADDR_VAR 0 2
25564: PUSH
25565: LD_VAR 0 1
25569: PPUSH
25570: CALL_OW 250
25574: PPUSH
25575: LD_VAR 0 4
25579: PPUSH
25580: LD_INT 3
25582: PPUSH
25583: LD_INT 12
25585: PPUSH
25586: CALL_OW 12
25590: PPUSH
25591: CALL_OW 272
25595: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25596: LD_ADDR_VAR 0 3
25600: PUSH
25601: LD_VAR 0 1
25605: PPUSH
25606: CALL_OW 251
25610: PPUSH
25611: LD_VAR 0 4
25615: PPUSH
25616: LD_INT 3
25618: PPUSH
25619: LD_INT 12
25621: PPUSH
25622: CALL_OW 12
25626: PPUSH
25627: CALL_OW 273
25631: ST_TO_ADDR
// if ValidHex ( x , y ) then
25632: LD_VAR 0 2
25636: PPUSH
25637: LD_VAR 0 3
25641: PPUSH
25642: CALL_OW 488
25646: IFFALSE 25681
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25648: LD_VAR 0 1
25652: PPUSH
25653: LD_VAR 0 2
25657: PPUSH
25658: LD_VAR 0 3
25662: PPUSH
25663: LD_INT 3
25665: PPUSH
25666: LD_INT 6
25668: PPUSH
25669: CALL_OW 12
25673: PPUSH
25674: LD_INT 1
25676: PPUSH
25677: CALL_OW 483
// end ;
25681: GO 25541
25683: POP
25684: POP
// end ;
25685: PPOPN 5
25687: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25688: LD_EXP 38
25692: IFFALSE 25700
25694: PUSH
25695: LD_EXP 73
25699: AND
25700: IFFALSE 25794
25702: GO 25704
25704: DISABLE
25705: LD_INT 0
25707: PPUSH
25708: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25709: LD_ADDR_VAR 0 2
25713: PUSH
25714: LD_INT 22
25716: PUSH
25717: LD_OWVAR 2
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 32
25728: PUSH
25729: LD_INT 1
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 21
25738: PUSH
25739: LD_INT 2
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: LIST
25750: PPUSH
25751: CALL_OW 69
25755: ST_TO_ADDR
// if not tmp then
25756: LD_VAR 0 2
25760: NOT
25761: IFFALSE 25765
// exit ;
25763: GO 25794
// for i in tmp do
25765: LD_ADDR_VAR 0 1
25769: PUSH
25770: LD_VAR 0 2
25774: PUSH
25775: FOR_IN
25776: IFFALSE 25792
// SetFuel ( i , 0 ) ;
25778: LD_VAR 0 1
25782: PPUSH
25783: LD_INT 0
25785: PPUSH
25786: CALL_OW 240
25790: GO 25775
25792: POP
25793: POP
// end ;
25794: PPOPN 2
25796: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25797: LD_EXP 38
25801: IFFALSE 25809
25803: PUSH
25804: LD_EXP 74
25808: AND
25809: IFFALSE 25875
25811: GO 25813
25813: DISABLE
25814: LD_INT 0
25816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25817: LD_ADDR_VAR 0 1
25821: PUSH
25822: LD_INT 22
25824: PUSH
25825: LD_OWVAR 2
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 30
25836: PUSH
25837: LD_INT 29
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PPUSH
25848: CALL_OW 69
25852: ST_TO_ADDR
// if not tmp then
25853: LD_VAR 0 1
25857: NOT
25858: IFFALSE 25862
// exit ;
25860: GO 25875
// DestroyUnit ( tmp [ 1 ] ) ;
25862: LD_VAR 0 1
25866: PUSH
25867: LD_INT 1
25869: ARRAY
25870: PPUSH
25871: CALL_OW 65
// end ;
25875: PPOPN 1
25877: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25878: LD_EXP 38
25882: IFFALSE 25890
25884: PUSH
25885: LD_EXP 76
25889: AND
25890: IFFALSE 26019
25892: GO 25894
25894: DISABLE
25895: LD_INT 0
25897: PPUSH
// begin uc_side := 0 ;
25898: LD_ADDR_OWVAR 20
25902: PUSH
25903: LD_INT 0
25905: ST_TO_ADDR
// uc_nation := nation_arabian ;
25906: LD_ADDR_OWVAR 21
25910: PUSH
25911: LD_INT 2
25913: ST_TO_ADDR
// hc_gallery :=  ;
25914: LD_ADDR_OWVAR 33
25918: PUSH
25919: LD_STRING 
25921: ST_TO_ADDR
// hc_name :=  ;
25922: LD_ADDR_OWVAR 26
25926: PUSH
25927: LD_STRING 
25929: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25930: LD_INT 1
25932: PPUSH
25933: LD_INT 11
25935: PPUSH
25936: LD_INT 10
25938: PPUSH
25939: CALL_OW 380
// un := CreateHuman ;
25943: LD_ADDR_VAR 0 1
25947: PUSH
25948: CALL_OW 44
25952: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25953: LD_VAR 0 1
25957: PPUSH
25958: LD_INT 1
25960: PPUSH
25961: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25965: LD_INT 35
25967: PPUSH
25968: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25972: LD_VAR 0 1
25976: PPUSH
25977: LD_INT 22
25979: PUSH
25980: LD_OWVAR 2
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PPUSH
25989: CALL_OW 69
25993: PPUSH
25994: LD_VAR 0 1
25998: PPUSH
25999: CALL_OW 74
26003: PPUSH
26004: CALL_OW 115
// until IsDead ( un ) ;
26008: LD_VAR 0 1
26012: PPUSH
26013: CALL_OW 301
26017: IFFALSE 25965
// end ;
26019: PPOPN 1
26021: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26022: LD_EXP 38
26026: IFFALSE 26034
26028: PUSH
26029: LD_EXP 78
26033: AND
26034: IFFALSE 26046
26036: GO 26038
26038: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26039: LD_STRING earthquake(getX(game), 0, 32)
26041: PPUSH
26042: CALL_OW 559
26046: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26047: LD_EXP 38
26051: IFFALSE 26059
26053: PUSH
26054: LD_EXP 79
26058: AND
26059: IFFALSE 26150
26061: GO 26063
26063: DISABLE
26064: LD_INT 0
26066: PPUSH
// begin enable ;
26067: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26068: LD_ADDR_VAR 0 1
26072: PUSH
26073: LD_INT 22
26075: PUSH
26076: LD_OWVAR 2
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: LD_INT 21
26087: PUSH
26088: LD_INT 2
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 33
26097: PUSH
26098: LD_INT 3
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: LIST
26109: PPUSH
26110: CALL_OW 69
26114: ST_TO_ADDR
// if not tmp then
26115: LD_VAR 0 1
26119: NOT
26120: IFFALSE 26124
// exit ;
26122: GO 26150
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26124: LD_VAR 0 1
26128: PUSH
26129: LD_INT 1
26131: PPUSH
26132: LD_VAR 0 1
26136: PPUSH
26137: CALL_OW 12
26141: ARRAY
26142: PPUSH
26143: LD_INT 1
26145: PPUSH
26146: CALL_OW 234
// end ;
26150: PPOPN 1
26152: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26153: LD_EXP 38
26157: IFFALSE 26165
26159: PUSH
26160: LD_EXP 80
26164: AND
26165: IFFALSE 26306
26167: GO 26169
26169: DISABLE
26170: LD_INT 0
26172: PPUSH
26173: PPUSH
26174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26175: LD_ADDR_VAR 0 3
26179: PUSH
26180: LD_INT 22
26182: PUSH
26183: LD_OWVAR 2
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 25
26194: PUSH
26195: LD_INT 1
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PPUSH
26206: CALL_OW 69
26210: ST_TO_ADDR
// if not tmp then
26211: LD_VAR 0 3
26215: NOT
26216: IFFALSE 26220
// exit ;
26218: GO 26306
// un := tmp [ rand ( 1 , tmp ) ] ;
26220: LD_ADDR_VAR 0 2
26224: PUSH
26225: LD_VAR 0 3
26229: PUSH
26230: LD_INT 1
26232: PPUSH
26233: LD_VAR 0 3
26237: PPUSH
26238: CALL_OW 12
26242: ARRAY
26243: ST_TO_ADDR
// if Crawls ( un ) then
26244: LD_VAR 0 2
26248: PPUSH
26249: CALL_OW 318
26253: IFFALSE 26264
// ComWalk ( un ) ;
26255: LD_VAR 0 2
26259: PPUSH
26260: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26264: LD_VAR 0 2
26268: PPUSH
26269: LD_INT 9
26271: PPUSH
26272: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26276: LD_INT 28
26278: PPUSH
26279: LD_OWVAR 2
26283: PPUSH
26284: LD_INT 2
26286: PPUSH
26287: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26291: LD_INT 29
26293: PPUSH
26294: LD_OWVAR 2
26298: PPUSH
26299: LD_INT 2
26301: PPUSH
26302: CALL_OW 322
// end ;
26306: PPOPN 3
26308: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26309: LD_EXP 38
26313: IFFALSE 26321
26315: PUSH
26316: LD_EXP 81
26320: AND
26321: IFFALSE 26432
26323: GO 26325
26325: DISABLE
26326: LD_INT 0
26328: PPUSH
26329: PPUSH
26330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26331: LD_ADDR_VAR 0 3
26335: PUSH
26336: LD_INT 22
26338: PUSH
26339: LD_OWVAR 2
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 25
26350: PUSH
26351: LD_INT 1
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PPUSH
26362: CALL_OW 69
26366: ST_TO_ADDR
// if not tmp then
26367: LD_VAR 0 3
26371: NOT
26372: IFFALSE 26376
// exit ;
26374: GO 26432
// un := tmp [ rand ( 1 , tmp ) ] ;
26376: LD_ADDR_VAR 0 2
26380: PUSH
26381: LD_VAR 0 3
26385: PUSH
26386: LD_INT 1
26388: PPUSH
26389: LD_VAR 0 3
26393: PPUSH
26394: CALL_OW 12
26398: ARRAY
26399: ST_TO_ADDR
// if Crawls ( un ) then
26400: LD_VAR 0 2
26404: PPUSH
26405: CALL_OW 318
26409: IFFALSE 26420
// ComWalk ( un ) ;
26411: LD_VAR 0 2
26415: PPUSH
26416: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26420: LD_VAR 0 2
26424: PPUSH
26425: LD_INT 8
26427: PPUSH
26428: CALL_OW 336
// end ;
26432: PPOPN 3
26434: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26435: LD_EXP 38
26439: IFFALSE 26447
26441: PUSH
26442: LD_EXP 82
26446: AND
26447: IFFALSE 26591
26449: GO 26451
26451: DISABLE
26452: LD_INT 0
26454: PPUSH
26455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26456: LD_ADDR_VAR 0 2
26460: PUSH
26461: LD_INT 22
26463: PUSH
26464: LD_OWVAR 2
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 21
26475: PUSH
26476: LD_INT 2
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 2
26485: PUSH
26486: LD_INT 34
26488: PUSH
26489: LD_INT 12
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 34
26498: PUSH
26499: LD_INT 51
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 34
26508: PUSH
26509: LD_INT 32
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: LIST
26526: PPUSH
26527: CALL_OW 69
26531: ST_TO_ADDR
// if not tmp then
26532: LD_VAR 0 2
26536: NOT
26537: IFFALSE 26541
// exit ;
26539: GO 26591
// for i in tmp do
26541: LD_ADDR_VAR 0 1
26545: PUSH
26546: LD_VAR 0 2
26550: PUSH
26551: FOR_IN
26552: IFFALSE 26589
// if GetCargo ( i , mat_artifact ) = 0 then
26554: LD_VAR 0 1
26558: PPUSH
26559: LD_INT 4
26561: PPUSH
26562: CALL_OW 289
26566: PUSH
26567: LD_INT 0
26569: EQUAL
26570: IFFALSE 26587
// SetCargo ( i , mat_siberit , 100 ) ;
26572: LD_VAR 0 1
26576: PPUSH
26577: LD_INT 3
26579: PPUSH
26580: LD_INT 100
26582: PPUSH
26583: CALL_OW 290
26587: GO 26551
26589: POP
26590: POP
// end ;
26591: PPOPN 2
26593: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26594: LD_EXP 38
26598: IFFALSE 26606
26600: PUSH
26601: LD_EXP 83
26605: AND
26606: IFFALSE 26789
26608: GO 26610
26610: DISABLE
26611: LD_INT 0
26613: PPUSH
26614: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26615: LD_ADDR_VAR 0 2
26619: PUSH
26620: LD_INT 22
26622: PUSH
26623: LD_OWVAR 2
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PPUSH
26632: CALL_OW 69
26636: ST_TO_ADDR
// if not tmp then
26637: LD_VAR 0 2
26641: NOT
26642: IFFALSE 26646
// exit ;
26644: GO 26789
// for i := 1 to 2 do
26646: LD_ADDR_VAR 0 1
26650: PUSH
26651: DOUBLE
26652: LD_INT 1
26654: DEC
26655: ST_TO_ADDR
26656: LD_INT 2
26658: PUSH
26659: FOR_TO
26660: IFFALSE 26787
// begin uc_side := your_side ;
26662: LD_ADDR_OWVAR 20
26666: PUSH
26667: LD_OWVAR 2
26671: ST_TO_ADDR
// uc_nation := nation_american ;
26672: LD_ADDR_OWVAR 21
26676: PUSH
26677: LD_INT 1
26679: ST_TO_ADDR
// vc_chassis := us_morphling ;
26680: LD_ADDR_OWVAR 37
26684: PUSH
26685: LD_INT 5
26687: ST_TO_ADDR
// vc_engine := engine_siberite ;
26688: LD_ADDR_OWVAR 39
26692: PUSH
26693: LD_INT 3
26695: ST_TO_ADDR
// vc_control := control_computer ;
26696: LD_ADDR_OWVAR 38
26700: PUSH
26701: LD_INT 3
26703: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26704: LD_ADDR_OWVAR 40
26708: PUSH
26709: LD_INT 10
26711: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26712: LD_VAR 0 2
26716: PUSH
26717: LD_INT 1
26719: ARRAY
26720: PPUSH
26721: CALL_OW 310
26725: NOT
26726: IFFALSE 26773
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26728: CALL_OW 45
26732: PPUSH
26733: LD_VAR 0 2
26737: PUSH
26738: LD_INT 1
26740: ARRAY
26741: PPUSH
26742: CALL_OW 250
26746: PPUSH
26747: LD_VAR 0 2
26751: PUSH
26752: LD_INT 1
26754: ARRAY
26755: PPUSH
26756: CALL_OW 251
26760: PPUSH
26761: LD_INT 12
26763: PPUSH
26764: LD_INT 1
26766: PPUSH
26767: CALL_OW 50
26771: GO 26785
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26773: CALL_OW 45
26777: PPUSH
26778: LD_INT 1
26780: PPUSH
26781: CALL_OW 51
// end ;
26785: GO 26659
26787: POP
26788: POP
// end ;
26789: PPOPN 2
26791: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26792: LD_EXP 38
26796: IFFALSE 26804
26798: PUSH
26799: LD_EXP 84
26803: AND
26804: IFFALSE 27026
26806: GO 26808
26808: DISABLE
26809: LD_INT 0
26811: PPUSH
26812: PPUSH
26813: PPUSH
26814: PPUSH
26815: PPUSH
26816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26817: LD_ADDR_VAR 0 6
26821: PUSH
26822: LD_INT 22
26824: PUSH
26825: LD_OWVAR 2
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 21
26836: PUSH
26837: LD_INT 1
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 3
26846: PUSH
26847: LD_INT 23
26849: PUSH
26850: LD_INT 0
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: LIST
26865: PPUSH
26866: CALL_OW 69
26870: ST_TO_ADDR
// if not tmp then
26871: LD_VAR 0 6
26875: NOT
26876: IFFALSE 26880
// exit ;
26878: GO 27026
// s1 := rand ( 1 , 4 ) ;
26880: LD_ADDR_VAR 0 2
26884: PUSH
26885: LD_INT 1
26887: PPUSH
26888: LD_INT 4
26890: PPUSH
26891: CALL_OW 12
26895: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26896: LD_ADDR_VAR 0 4
26900: PUSH
26901: LD_VAR 0 6
26905: PUSH
26906: LD_INT 1
26908: ARRAY
26909: PPUSH
26910: LD_VAR 0 2
26914: PPUSH
26915: CALL_OW 259
26919: ST_TO_ADDR
// if s1 = 1 then
26920: LD_VAR 0 2
26924: PUSH
26925: LD_INT 1
26927: EQUAL
26928: IFFALSE 26948
// s2 := rand ( 2 , 4 ) else
26930: LD_ADDR_VAR 0 3
26934: PUSH
26935: LD_INT 2
26937: PPUSH
26938: LD_INT 4
26940: PPUSH
26941: CALL_OW 12
26945: ST_TO_ADDR
26946: GO 26956
// s2 := 1 ;
26948: LD_ADDR_VAR 0 3
26952: PUSH
26953: LD_INT 1
26955: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26956: LD_ADDR_VAR 0 5
26960: PUSH
26961: LD_VAR 0 6
26965: PUSH
26966: LD_INT 1
26968: ARRAY
26969: PPUSH
26970: LD_VAR 0 3
26974: PPUSH
26975: CALL_OW 259
26979: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26980: LD_VAR 0 6
26984: PUSH
26985: LD_INT 1
26987: ARRAY
26988: PPUSH
26989: LD_VAR 0 2
26993: PPUSH
26994: LD_VAR 0 5
26998: PPUSH
26999: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27003: LD_VAR 0 6
27007: PUSH
27008: LD_INT 1
27010: ARRAY
27011: PPUSH
27012: LD_VAR 0 3
27016: PPUSH
27017: LD_VAR 0 4
27021: PPUSH
27022: CALL_OW 237
// end ;
27026: PPOPN 6
27028: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27029: LD_EXP 38
27033: IFFALSE 27041
27035: PUSH
27036: LD_EXP 85
27040: AND
27041: IFFALSE 27120
27043: GO 27045
27045: DISABLE
27046: LD_INT 0
27048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27049: LD_ADDR_VAR 0 1
27053: PUSH
27054: LD_INT 22
27056: PUSH
27057: LD_OWVAR 2
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 30
27068: PUSH
27069: LD_INT 3
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PPUSH
27080: CALL_OW 69
27084: ST_TO_ADDR
// if not tmp then
27085: LD_VAR 0 1
27089: NOT
27090: IFFALSE 27094
// exit ;
27092: GO 27120
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27094: LD_VAR 0 1
27098: PUSH
27099: LD_INT 1
27101: PPUSH
27102: LD_VAR 0 1
27106: PPUSH
27107: CALL_OW 12
27111: ARRAY
27112: PPUSH
27113: LD_INT 1
27115: PPUSH
27116: CALL_OW 234
// end ;
27120: PPOPN 1
27122: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27123: LD_EXP 38
27127: IFFALSE 27135
27129: PUSH
27130: LD_EXP 86
27134: AND
27135: IFFALSE 27247
27137: GO 27139
27139: DISABLE
27140: LD_INT 0
27142: PPUSH
27143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27144: LD_ADDR_VAR 0 2
27148: PUSH
27149: LD_INT 22
27151: PUSH
27152: LD_OWVAR 2
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 2
27163: PUSH
27164: LD_INT 30
27166: PUSH
27167: LD_INT 27
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 30
27176: PUSH
27177: LD_INT 26
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 30
27186: PUSH
27187: LD_INT 28
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PPUSH
27204: CALL_OW 69
27208: ST_TO_ADDR
// if not tmp then
27209: LD_VAR 0 2
27213: NOT
27214: IFFALSE 27218
// exit ;
27216: GO 27247
// for i in tmp do
27218: LD_ADDR_VAR 0 1
27222: PUSH
27223: LD_VAR 0 2
27227: PUSH
27228: FOR_IN
27229: IFFALSE 27245
// SetLives ( i , 1 ) ;
27231: LD_VAR 0 1
27235: PPUSH
27236: LD_INT 1
27238: PPUSH
27239: CALL_OW 234
27243: GO 27228
27245: POP
27246: POP
// end ;
27247: PPOPN 2
27249: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27250: LD_EXP 38
27254: IFFALSE 27262
27256: PUSH
27257: LD_EXP 87
27261: AND
27262: IFFALSE 27549
27264: GO 27266
27266: DISABLE
27267: LD_INT 0
27269: PPUSH
27270: PPUSH
27271: PPUSH
// begin i := rand ( 1 , 7 ) ;
27272: LD_ADDR_VAR 0 1
27276: PUSH
27277: LD_INT 1
27279: PPUSH
27280: LD_INT 7
27282: PPUSH
27283: CALL_OW 12
27287: ST_TO_ADDR
// case i of 1 :
27288: LD_VAR 0 1
27292: PUSH
27293: LD_INT 1
27295: DOUBLE
27296: EQUAL
27297: IFTRUE 27301
27299: GO 27311
27301: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27302: LD_STRING earthquake(getX(game), 0, 32)
27304: PPUSH
27305: CALL_OW 559
27309: GO 27549
27311: LD_INT 2
27313: DOUBLE
27314: EQUAL
27315: IFTRUE 27319
27317: GO 27333
27319: POP
// begin ToLua ( displayStucuk(); ) ;
27320: LD_STRING displayStucuk();
27322: PPUSH
27323: CALL_OW 559
// ResetFog ;
27327: CALL_OW 335
// end ; 3 :
27331: GO 27549
27333: LD_INT 3
27335: DOUBLE
27336: EQUAL
27337: IFTRUE 27341
27339: GO 27445
27341: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27342: LD_ADDR_VAR 0 2
27346: PUSH
27347: LD_INT 22
27349: PUSH
27350: LD_OWVAR 2
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 25
27361: PUSH
27362: LD_INT 1
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PPUSH
27373: CALL_OW 69
27377: ST_TO_ADDR
// if not tmp then
27378: LD_VAR 0 2
27382: NOT
27383: IFFALSE 27387
// exit ;
27385: GO 27549
// un := tmp [ rand ( 1 , tmp ) ] ;
27387: LD_ADDR_VAR 0 3
27391: PUSH
27392: LD_VAR 0 2
27396: PUSH
27397: LD_INT 1
27399: PPUSH
27400: LD_VAR 0 2
27404: PPUSH
27405: CALL_OW 12
27409: ARRAY
27410: ST_TO_ADDR
// if Crawls ( un ) then
27411: LD_VAR 0 3
27415: PPUSH
27416: CALL_OW 318
27420: IFFALSE 27431
// ComWalk ( un ) ;
27422: LD_VAR 0 3
27426: PPUSH
27427: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27431: LD_VAR 0 3
27435: PPUSH
27436: LD_INT 8
27438: PPUSH
27439: CALL_OW 336
// end ; 4 :
27443: GO 27549
27445: LD_INT 4
27447: DOUBLE
27448: EQUAL
27449: IFTRUE 27453
27451: GO 27527
27453: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27454: LD_ADDR_VAR 0 2
27458: PUSH
27459: LD_INT 22
27461: PUSH
27462: LD_OWVAR 2
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 30
27473: PUSH
27474: LD_INT 29
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PPUSH
27485: CALL_OW 69
27489: ST_TO_ADDR
// if not tmp then
27490: LD_VAR 0 2
27494: NOT
27495: IFFALSE 27499
// exit ;
27497: GO 27549
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27499: LD_VAR 0 2
27503: PUSH
27504: LD_INT 1
27506: ARRAY
27507: PPUSH
27508: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27512: LD_VAR 0 2
27516: PUSH
27517: LD_INT 1
27519: ARRAY
27520: PPUSH
27521: CALL_OW 65
// end ; 5 .. 7 :
27525: GO 27549
27527: LD_INT 5
27529: DOUBLE
27530: GREATEREQUAL
27531: IFFALSE 27539
27533: LD_INT 7
27535: DOUBLE
27536: LESSEQUAL
27537: IFTRUE 27541
27539: GO 27548
27541: POP
// StreamSibBomb ; end ;
27542: CALL 23730 0 0
27546: GO 27549
27548: POP
// end ;
27549: PPOPN 3
27551: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27552: LD_EXP 38
27556: IFFALSE 27564
27558: PUSH
27559: LD_EXP 88
27563: AND
27564: IFFALSE 27720
27566: GO 27568
27568: DISABLE
27569: LD_INT 0
27571: PPUSH
27572: PPUSH
27573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27574: LD_ADDR_VAR 0 2
27578: PUSH
27579: LD_INT 81
27581: PUSH
27582: LD_OWVAR 2
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 2
27593: PUSH
27594: LD_INT 21
27596: PUSH
27597: LD_INT 1
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: LD_INT 21
27606: PUSH
27607: LD_INT 2
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: LIST
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PPUSH
27623: CALL_OW 69
27627: ST_TO_ADDR
// if not tmp then
27628: LD_VAR 0 2
27632: NOT
27633: IFFALSE 27637
// exit ;
27635: GO 27720
// p := 0 ;
27637: LD_ADDR_VAR 0 3
27641: PUSH
27642: LD_INT 0
27644: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27645: LD_INT 35
27647: PPUSH
27648: CALL_OW 67
// p := p + 1 ;
27652: LD_ADDR_VAR 0 3
27656: PUSH
27657: LD_VAR 0 3
27661: PUSH
27662: LD_INT 1
27664: PLUS
27665: ST_TO_ADDR
// for i in tmp do
27666: LD_ADDR_VAR 0 1
27670: PUSH
27671: LD_VAR 0 2
27675: PUSH
27676: FOR_IN
27677: IFFALSE 27708
// if GetLives ( i ) < 1000 then
27679: LD_VAR 0 1
27683: PPUSH
27684: CALL_OW 256
27688: PUSH
27689: LD_INT 1000
27691: LESS
27692: IFFALSE 27706
// SetLives ( i , 1000 ) ;
27694: LD_VAR 0 1
27698: PPUSH
27699: LD_INT 1000
27701: PPUSH
27702: CALL_OW 234
27706: GO 27676
27708: POP
27709: POP
// until p > 20 ;
27710: LD_VAR 0 3
27714: PUSH
27715: LD_INT 20
27717: GREATER
27718: IFFALSE 27645
// end ;
27720: PPOPN 3
27722: END
// every 0 0$1 trigger StreamModeActive and sTime do
27723: LD_EXP 38
27727: IFFALSE 27735
27729: PUSH
27730: LD_EXP 89
27734: AND
27735: IFFALSE 27770
27737: GO 27739
27739: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27740: LD_INT 28
27742: PPUSH
27743: LD_OWVAR 2
27747: PPUSH
27748: LD_INT 2
27750: PPUSH
27751: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27755: LD_INT 30
27757: PPUSH
27758: LD_OWVAR 2
27762: PPUSH
27763: LD_INT 2
27765: PPUSH
27766: CALL_OW 322
// end ;
27770: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27771: LD_EXP 38
27775: IFFALSE 27783
27777: PUSH
27778: LD_EXP 90
27782: AND
27783: IFFALSE 27904
27785: GO 27787
27787: DISABLE
27788: LD_INT 0
27790: PPUSH
27791: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27792: LD_ADDR_VAR 0 2
27796: PUSH
27797: LD_INT 22
27799: PUSH
27800: LD_OWVAR 2
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 21
27811: PUSH
27812: LD_INT 1
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 3
27821: PUSH
27822: LD_INT 23
27824: PUSH
27825: LD_INT 0
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: LIST
27840: PPUSH
27841: CALL_OW 69
27845: ST_TO_ADDR
// if not tmp then
27846: LD_VAR 0 2
27850: NOT
27851: IFFALSE 27855
// exit ;
27853: GO 27904
// for i in tmp do
27855: LD_ADDR_VAR 0 1
27859: PUSH
27860: LD_VAR 0 2
27864: PUSH
27865: FOR_IN
27866: IFFALSE 27902
// begin if Crawls ( i ) then
27868: LD_VAR 0 1
27872: PPUSH
27873: CALL_OW 318
27877: IFFALSE 27888
// ComWalk ( i ) ;
27879: LD_VAR 0 1
27883: PPUSH
27884: CALL_OW 138
// SetClass ( i , 2 ) ;
27888: LD_VAR 0 1
27892: PPUSH
27893: LD_INT 2
27895: PPUSH
27896: CALL_OW 336
// end ;
27900: GO 27865
27902: POP
27903: POP
// end ;
27904: PPOPN 2
27906: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27907: LD_EXP 38
27911: IFFALSE 27919
27913: PUSH
27914: LD_EXP 91
27918: AND
27919: IFFALSE 28209
27921: GO 27923
27923: DISABLE
27924: LD_INT 0
27926: PPUSH
27927: PPUSH
27928: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27929: LD_OWVAR 2
27933: PPUSH
27934: LD_INT 9
27936: PPUSH
27937: LD_INT 1
27939: PPUSH
27940: LD_INT 1
27942: PPUSH
27943: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27947: LD_INT 9
27949: PPUSH
27950: LD_OWVAR 2
27954: PPUSH
27955: CALL_OW 343
// uc_side := 9 ;
27959: LD_ADDR_OWVAR 20
27963: PUSH
27964: LD_INT 9
27966: ST_TO_ADDR
// uc_nation := 2 ;
27967: LD_ADDR_OWVAR 21
27971: PUSH
27972: LD_INT 2
27974: ST_TO_ADDR
// hc_name := Dark Warrior ;
27975: LD_ADDR_OWVAR 26
27979: PUSH
27980: LD_STRING Dark Warrior
27982: ST_TO_ADDR
// hc_gallery :=  ;
27983: LD_ADDR_OWVAR 33
27987: PUSH
27988: LD_STRING 
27990: ST_TO_ADDR
// hc_noskilllimit := true ;
27991: LD_ADDR_OWVAR 76
27995: PUSH
27996: LD_INT 1
27998: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27999: LD_ADDR_OWVAR 31
28003: PUSH
28004: LD_INT 30
28006: PUSH
28007: LD_INT 30
28009: PUSH
28010: LD_INT 30
28012: PUSH
28013: LD_INT 30
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: ST_TO_ADDR
// un := CreateHuman ;
28022: LD_ADDR_VAR 0 3
28026: PUSH
28027: CALL_OW 44
28031: ST_TO_ADDR
// hc_noskilllimit := false ;
28032: LD_ADDR_OWVAR 76
28036: PUSH
28037: LD_INT 0
28039: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28040: LD_VAR 0 3
28044: PPUSH
28045: LD_INT 1
28047: PPUSH
28048: CALL_OW 51
// ToLua ( playRanger() ) ;
28052: LD_STRING playRanger()
28054: PPUSH
28055: CALL_OW 559
// p := 0 ;
28059: LD_ADDR_VAR 0 2
28063: PUSH
28064: LD_INT 0
28066: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28067: LD_INT 35
28069: PPUSH
28070: CALL_OW 67
// p := p + 1 ;
28074: LD_ADDR_VAR 0 2
28078: PUSH
28079: LD_VAR 0 2
28083: PUSH
28084: LD_INT 1
28086: PLUS
28087: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28088: LD_VAR 0 3
28092: PPUSH
28093: CALL_OW 256
28097: PUSH
28098: LD_INT 1000
28100: LESS
28101: IFFALSE 28115
// SetLives ( un , 1000 ) ;
28103: LD_VAR 0 3
28107: PPUSH
28108: LD_INT 1000
28110: PPUSH
28111: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28115: LD_VAR 0 3
28119: PPUSH
28120: LD_INT 81
28122: PUSH
28123: LD_OWVAR 2
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 91
28134: PUSH
28135: LD_VAR 0 3
28139: PUSH
28140: LD_INT 30
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: LIST
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PPUSH
28152: CALL_OW 69
28156: PPUSH
28157: LD_VAR 0 3
28161: PPUSH
28162: CALL_OW 74
28166: PPUSH
28167: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
28171: LD_VAR 0 2
28175: PUSH
28176: LD_INT 80
28178: GREATER
28179: IFTRUE 28192
28181: PUSH
28182: LD_VAR 0 3
28186: PPUSH
28187: CALL_OW 301
28191: OR
28192: IFFALSE 28067
// if un then
28194: LD_VAR 0 3
28198: IFFALSE 28209
// RemoveUnit ( un ) ;
28200: LD_VAR 0 3
28204: PPUSH
28205: CALL_OW 64
// end ;
28209: PPOPN 3
28211: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
28212: LD_EXP 92
28216: IFFALSE 28332
28218: GO 28220
28220: DISABLE
28221: LD_INT 0
28223: PPUSH
28224: PPUSH
28225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28226: LD_ADDR_VAR 0 2
28230: PUSH
28231: LD_INT 81
28233: PUSH
28234: LD_OWVAR 2
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 21
28245: PUSH
28246: LD_INT 1
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PPUSH
28257: CALL_OW 69
28261: ST_TO_ADDR
// ToLua ( playComputer() ) ;
28262: LD_STRING playComputer()
28264: PPUSH
28265: CALL_OW 559
// if not tmp then
28269: LD_VAR 0 2
28273: NOT
28274: IFFALSE 28278
// exit ;
28276: GO 28332
// for i in tmp do
28278: LD_ADDR_VAR 0 1
28282: PUSH
28283: LD_VAR 0 2
28287: PUSH
28288: FOR_IN
28289: IFFALSE 28330
// for j := 1 to 4 do
28291: LD_ADDR_VAR 0 3
28295: PUSH
28296: DOUBLE
28297: LD_INT 1
28299: DEC
28300: ST_TO_ADDR
28301: LD_INT 4
28303: PUSH
28304: FOR_TO
28305: IFFALSE 28326
// SetSkill ( i , j , 10 ) ;
28307: LD_VAR 0 1
28311: PPUSH
28312: LD_VAR 0 3
28316: PPUSH
28317: LD_INT 10
28319: PPUSH
28320: CALL_OW 237
28324: GO 28304
28326: POP
28327: POP
28328: GO 28288
28330: POP
28331: POP
// end ;
28332: PPOPN 3
28334: END
// every 0 0$1 trigger s30 do var i , tmp ;
28335: LD_EXP 93
28339: IFFALSE 28408
28341: GO 28343
28343: DISABLE
28344: LD_INT 0
28346: PPUSH
28347: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28348: LD_ADDR_VAR 0 2
28352: PUSH
28353: LD_INT 22
28355: PUSH
28356: LD_OWVAR 2
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PPUSH
28365: CALL_OW 69
28369: ST_TO_ADDR
// if not tmp then
28370: LD_VAR 0 2
28374: NOT
28375: IFFALSE 28379
// exit ;
28377: GO 28408
// for i in tmp do
28379: LD_ADDR_VAR 0 1
28383: PUSH
28384: LD_VAR 0 2
28388: PUSH
28389: FOR_IN
28390: IFFALSE 28406
// SetLives ( i , 300 ) ;
28392: LD_VAR 0 1
28396: PPUSH
28397: LD_INT 300
28399: PPUSH
28400: CALL_OW 234
28404: GO 28389
28406: POP
28407: POP
// end ;
28408: PPOPN 2
28410: END
// every 0 0$1 trigger s60 do var i , tmp ;
28411: LD_EXP 94
28415: IFFALSE 28484
28417: GO 28419
28419: DISABLE
28420: LD_INT 0
28422: PPUSH
28423: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28424: LD_ADDR_VAR 0 2
28428: PUSH
28429: LD_INT 22
28431: PUSH
28432: LD_OWVAR 2
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PPUSH
28441: CALL_OW 69
28445: ST_TO_ADDR
// if not tmp then
28446: LD_VAR 0 2
28450: NOT
28451: IFFALSE 28455
// exit ;
28453: GO 28484
// for i in tmp do
28455: LD_ADDR_VAR 0 1
28459: PUSH
28460: LD_VAR 0 2
28464: PUSH
28465: FOR_IN
28466: IFFALSE 28482
// SetLives ( i , 600 ) ;
28468: LD_VAR 0 1
28472: PPUSH
28473: LD_INT 600
28475: PPUSH
28476: CALL_OW 234
28480: GO 28465
28482: POP
28483: POP
// end ;
28484: PPOPN 2
28486: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28487: LD_INT 0
28489: PPUSH
// case cmd of 301 :
28490: LD_VAR 0 1
28494: PUSH
28495: LD_INT 301
28497: DOUBLE
28498: EQUAL
28499: IFTRUE 28503
28501: GO 28535
28503: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28504: LD_VAR 0 6
28508: PPUSH
28509: LD_VAR 0 7
28513: PPUSH
28514: LD_VAR 0 8
28518: PPUSH
28519: LD_VAR 0 4
28523: PPUSH
28524: LD_VAR 0 5
28528: PPUSH
28529: CALL 29748 0 5
28533: GO 28656
28535: LD_INT 302
28537: DOUBLE
28538: EQUAL
28539: IFTRUE 28543
28541: GO 28580
28543: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28544: LD_VAR 0 6
28548: PPUSH
28549: LD_VAR 0 7
28553: PPUSH
28554: LD_VAR 0 8
28558: PPUSH
28559: LD_VAR 0 9
28563: PPUSH
28564: LD_VAR 0 4
28568: PPUSH
28569: LD_VAR 0 5
28573: PPUSH
28574: CALL 29839 0 6
28578: GO 28656
28580: LD_INT 303
28582: DOUBLE
28583: EQUAL
28584: IFTRUE 28588
28586: GO 28625
28588: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28589: LD_VAR 0 6
28593: PPUSH
28594: LD_VAR 0 7
28598: PPUSH
28599: LD_VAR 0 8
28603: PPUSH
28604: LD_VAR 0 9
28608: PPUSH
28609: LD_VAR 0 4
28613: PPUSH
28614: LD_VAR 0 5
28618: PPUSH
28619: CALL 28661 0 6
28623: GO 28656
28625: LD_INT 304
28627: DOUBLE
28628: EQUAL
28629: IFTRUE 28633
28631: GO 28655
28633: POP
// hHackTeleport ( unit , x , y ) ; end ;
28634: LD_VAR 0 2
28638: PPUSH
28639: LD_VAR 0 4
28643: PPUSH
28644: LD_VAR 0 5
28648: PPUSH
28649: CALL 30432 0 3
28653: GO 28656
28655: POP
// end ;
28656: LD_VAR 0 12
28660: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28661: LD_INT 0
28663: PPUSH
28664: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28665: LD_VAR 0 1
28669: PUSH
28670: LD_INT 1
28672: LESS
28673: IFTRUE 28685
28675: PUSH
28676: LD_VAR 0 1
28680: PUSH
28681: LD_INT 3
28683: GREATER
28684: OR
28685: IFTRUE 28703
28687: PUSH
28688: LD_VAR 0 5
28692: PPUSH
28693: LD_VAR 0 6
28697: PPUSH
28698: CALL_OW 428
28702: OR
28703: IFFALSE 28707
// exit ;
28705: GO 29435
// uc_side := your_side ;
28707: LD_ADDR_OWVAR 20
28711: PUSH
28712: LD_OWVAR 2
28716: ST_TO_ADDR
// uc_nation := nation ;
28717: LD_ADDR_OWVAR 21
28721: PUSH
28722: LD_VAR 0 1
28726: ST_TO_ADDR
// bc_level = 1 ;
28727: LD_ADDR_OWVAR 43
28731: PUSH
28732: LD_INT 1
28734: ST_TO_ADDR
// case btype of 1 :
28735: LD_VAR 0 2
28739: PUSH
28740: LD_INT 1
28742: DOUBLE
28743: EQUAL
28744: IFTRUE 28748
28746: GO 28759
28748: POP
// bc_type := b_depot ; 2 :
28749: LD_ADDR_OWVAR 42
28753: PUSH
28754: LD_INT 0
28756: ST_TO_ADDR
28757: GO 29379
28759: LD_INT 2
28761: DOUBLE
28762: EQUAL
28763: IFTRUE 28767
28765: GO 28778
28767: POP
// bc_type := b_warehouse ; 3 :
28768: LD_ADDR_OWVAR 42
28772: PUSH
28773: LD_INT 1
28775: ST_TO_ADDR
28776: GO 29379
28778: LD_INT 3
28780: DOUBLE
28781: EQUAL
28782: IFTRUE 28786
28784: GO 28797
28786: POP
// bc_type := b_lab ; 4 .. 9 :
28787: LD_ADDR_OWVAR 42
28791: PUSH
28792: LD_INT 6
28794: ST_TO_ADDR
28795: GO 29379
28797: LD_INT 4
28799: DOUBLE
28800: GREATEREQUAL
28801: IFFALSE 28809
28803: LD_INT 9
28805: DOUBLE
28806: LESSEQUAL
28807: IFTRUE 28811
28809: GO 28871
28811: POP
// begin bc_type := b_lab_half ;
28812: LD_ADDR_OWVAR 42
28816: PUSH
28817: LD_INT 7
28819: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28820: LD_ADDR_OWVAR 44
28824: PUSH
28825: LD_INT 10
28827: PUSH
28828: LD_INT 11
28830: PUSH
28831: LD_INT 12
28833: PUSH
28834: LD_INT 15
28836: PUSH
28837: LD_INT 14
28839: PUSH
28840: LD_INT 13
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: PUSH
28851: LD_VAR 0 2
28855: PUSH
28856: LD_INT 3
28858: MINUS
28859: ARRAY
28860: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
28861: LD_ADDR_OWVAR 45
28865: PUSH
28866: LD_INT 9
28868: ST_TO_ADDR
// end ; 10 .. 13 :
28869: GO 29379
28871: LD_INT 10
28873: DOUBLE
28874: GREATEREQUAL
28875: IFFALSE 28883
28877: LD_INT 13
28879: DOUBLE
28880: LESSEQUAL
28881: IFTRUE 28885
28883: GO 28962
28885: POP
// begin bc_type := b_lab_full ;
28886: LD_ADDR_OWVAR 42
28890: PUSH
28891: LD_INT 8
28893: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28894: LD_ADDR_OWVAR 44
28898: PUSH
28899: LD_INT 10
28901: PUSH
28902: LD_INT 12
28904: PUSH
28905: LD_INT 14
28907: PUSH
28908: LD_INT 13
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: PUSH
28917: LD_VAR 0 2
28921: PUSH
28922: LD_INT 9
28924: MINUS
28925: ARRAY
28926: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28927: LD_ADDR_OWVAR 45
28931: PUSH
28932: LD_INT 11
28934: PUSH
28935: LD_INT 15
28937: PUSH
28938: LD_INT 12
28940: PUSH
28941: LD_INT 15
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: PUSH
28950: LD_VAR 0 2
28954: PUSH
28955: LD_INT 9
28957: MINUS
28958: ARRAY
28959: ST_TO_ADDR
// end ; 14 :
28960: GO 29379
28962: LD_INT 14
28964: DOUBLE
28965: EQUAL
28966: IFTRUE 28970
28968: GO 28981
28970: POP
// bc_type := b_workshop ; 15 :
28971: LD_ADDR_OWVAR 42
28975: PUSH
28976: LD_INT 2
28978: ST_TO_ADDR
28979: GO 29379
28981: LD_INT 15
28983: DOUBLE
28984: EQUAL
28985: IFTRUE 28989
28987: GO 29000
28989: POP
// bc_type := b_factory ; 16 :
28990: LD_ADDR_OWVAR 42
28994: PUSH
28995: LD_INT 3
28997: ST_TO_ADDR
28998: GO 29379
29000: LD_INT 16
29002: DOUBLE
29003: EQUAL
29004: IFTRUE 29008
29006: GO 29019
29008: POP
// bc_type := b_ext_gun ; 17 :
29009: LD_ADDR_OWVAR 42
29013: PUSH
29014: LD_INT 17
29016: ST_TO_ADDR
29017: GO 29379
29019: LD_INT 17
29021: DOUBLE
29022: EQUAL
29023: IFTRUE 29027
29025: GO 29055
29027: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29028: LD_ADDR_OWVAR 42
29032: PUSH
29033: LD_INT 19
29035: PUSH
29036: LD_INT 23
29038: PUSH
29039: LD_INT 19
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: LIST
29046: PUSH
29047: LD_VAR 0 1
29051: ARRAY
29052: ST_TO_ADDR
29053: GO 29379
29055: LD_INT 18
29057: DOUBLE
29058: EQUAL
29059: IFTRUE 29063
29061: GO 29074
29063: POP
// bc_type := b_ext_radar ; 19 :
29064: LD_ADDR_OWVAR 42
29068: PUSH
29069: LD_INT 20
29071: ST_TO_ADDR
29072: GO 29379
29074: LD_INT 19
29076: DOUBLE
29077: EQUAL
29078: IFTRUE 29082
29080: GO 29093
29082: POP
// bc_type := b_ext_radio ; 20 :
29083: LD_ADDR_OWVAR 42
29087: PUSH
29088: LD_INT 22
29090: ST_TO_ADDR
29091: GO 29379
29093: LD_INT 20
29095: DOUBLE
29096: EQUAL
29097: IFTRUE 29101
29099: GO 29112
29101: POP
// bc_type := b_ext_siberium ; 21 :
29102: LD_ADDR_OWVAR 42
29106: PUSH
29107: LD_INT 21
29109: ST_TO_ADDR
29110: GO 29379
29112: LD_INT 21
29114: DOUBLE
29115: EQUAL
29116: IFTRUE 29120
29118: GO 29131
29120: POP
// bc_type := b_ext_computer ; 22 :
29121: LD_ADDR_OWVAR 42
29125: PUSH
29126: LD_INT 24
29128: ST_TO_ADDR
29129: GO 29379
29131: LD_INT 22
29133: DOUBLE
29134: EQUAL
29135: IFTRUE 29139
29137: GO 29150
29139: POP
// bc_type := b_ext_track ; 23 :
29140: LD_ADDR_OWVAR 42
29144: PUSH
29145: LD_INT 16
29147: ST_TO_ADDR
29148: GO 29379
29150: LD_INT 23
29152: DOUBLE
29153: EQUAL
29154: IFTRUE 29158
29156: GO 29169
29158: POP
// bc_type := b_ext_laser ; 24 :
29159: LD_ADDR_OWVAR 42
29163: PUSH
29164: LD_INT 25
29166: ST_TO_ADDR
29167: GO 29379
29169: LD_INT 24
29171: DOUBLE
29172: EQUAL
29173: IFTRUE 29177
29175: GO 29188
29177: POP
// bc_type := b_control_tower ; 25 :
29178: LD_ADDR_OWVAR 42
29182: PUSH
29183: LD_INT 36
29185: ST_TO_ADDR
29186: GO 29379
29188: LD_INT 25
29190: DOUBLE
29191: EQUAL
29192: IFTRUE 29196
29194: GO 29207
29196: POP
// bc_type := b_breastwork ; 26 :
29197: LD_ADDR_OWVAR 42
29201: PUSH
29202: LD_INT 31
29204: ST_TO_ADDR
29205: GO 29379
29207: LD_INT 26
29209: DOUBLE
29210: EQUAL
29211: IFTRUE 29215
29213: GO 29226
29215: POP
// bc_type := b_bunker ; 27 :
29216: LD_ADDR_OWVAR 42
29220: PUSH
29221: LD_INT 32
29223: ST_TO_ADDR
29224: GO 29379
29226: LD_INT 27
29228: DOUBLE
29229: EQUAL
29230: IFTRUE 29234
29232: GO 29245
29234: POP
// bc_type := b_turret ; 28 :
29235: LD_ADDR_OWVAR 42
29239: PUSH
29240: LD_INT 33
29242: ST_TO_ADDR
29243: GO 29379
29245: LD_INT 28
29247: DOUBLE
29248: EQUAL
29249: IFTRUE 29253
29251: GO 29264
29253: POP
// bc_type := b_armoury ; 29 :
29254: LD_ADDR_OWVAR 42
29258: PUSH
29259: LD_INT 4
29261: ST_TO_ADDR
29262: GO 29379
29264: LD_INT 29
29266: DOUBLE
29267: EQUAL
29268: IFTRUE 29272
29270: GO 29283
29272: POP
// bc_type := b_barracks ; 30 :
29273: LD_ADDR_OWVAR 42
29277: PUSH
29278: LD_INT 5
29280: ST_TO_ADDR
29281: GO 29379
29283: LD_INT 30
29285: DOUBLE
29286: EQUAL
29287: IFTRUE 29291
29289: GO 29302
29291: POP
// bc_type := b_solar_power ; 31 :
29292: LD_ADDR_OWVAR 42
29296: PUSH
29297: LD_INT 27
29299: ST_TO_ADDR
29300: GO 29379
29302: LD_INT 31
29304: DOUBLE
29305: EQUAL
29306: IFTRUE 29310
29308: GO 29321
29310: POP
// bc_type := b_oil_power ; 32 :
29311: LD_ADDR_OWVAR 42
29315: PUSH
29316: LD_INT 26
29318: ST_TO_ADDR
29319: GO 29379
29321: LD_INT 32
29323: DOUBLE
29324: EQUAL
29325: IFTRUE 29329
29327: GO 29340
29329: POP
// bc_type := b_siberite_power ; 33 :
29330: LD_ADDR_OWVAR 42
29334: PUSH
29335: LD_INT 28
29337: ST_TO_ADDR
29338: GO 29379
29340: LD_INT 33
29342: DOUBLE
29343: EQUAL
29344: IFTRUE 29348
29346: GO 29359
29348: POP
// bc_type := b_oil_mine ; 34 :
29349: LD_ADDR_OWVAR 42
29353: PUSH
29354: LD_INT 29
29356: ST_TO_ADDR
29357: GO 29379
29359: LD_INT 34
29361: DOUBLE
29362: EQUAL
29363: IFTRUE 29367
29365: GO 29378
29367: POP
// bc_type := b_siberite_mine ; end ;
29368: LD_ADDR_OWVAR 42
29372: PUSH
29373: LD_INT 30
29375: ST_TO_ADDR
29376: GO 29379
29378: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29379: LD_ADDR_VAR 0 8
29383: PUSH
29384: LD_VAR 0 5
29388: PPUSH
29389: LD_VAR 0 6
29393: PPUSH
29394: LD_VAR 0 3
29398: PPUSH
29399: CALL_OW 47
29403: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29404: LD_OWVAR 42
29408: PUSH
29409: LD_INT 32
29411: PUSH
29412: LD_INT 33
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: IN
29419: IFFALSE 29435
// PlaceWeaponTurret ( b , weapon ) ;
29421: LD_VAR 0 8
29425: PPUSH
29426: LD_VAR 0 4
29430: PPUSH
29431: CALL_OW 431
// end ;
29435: LD_VAR 0 7
29439: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29440: LD_INT 0
29442: PPUSH
29443: PPUSH
29444: PPUSH
29445: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29446: LD_ADDR_VAR 0 4
29450: PUSH
29451: LD_INT 22
29453: PUSH
29454: LD_OWVAR 2
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 2
29465: PUSH
29466: LD_INT 30
29468: PUSH
29469: LD_INT 0
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 30
29478: PUSH
29479: LD_INT 1
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: LIST
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PPUSH
29495: CALL_OW 69
29499: ST_TO_ADDR
// if not tmp then
29500: LD_VAR 0 4
29504: NOT
29505: IFFALSE 29509
// exit ;
29507: GO 29568
// for i in tmp do
29509: LD_ADDR_VAR 0 2
29513: PUSH
29514: LD_VAR 0 4
29518: PUSH
29519: FOR_IN
29520: IFFALSE 29566
// for j = 1 to 3 do
29522: LD_ADDR_VAR 0 3
29526: PUSH
29527: DOUBLE
29528: LD_INT 1
29530: DEC
29531: ST_TO_ADDR
29532: LD_INT 3
29534: PUSH
29535: FOR_TO
29536: IFFALSE 29562
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29538: LD_VAR 0 2
29542: PPUSH
29543: CALL_OW 274
29547: PPUSH
29548: LD_VAR 0 3
29552: PPUSH
29553: LD_INT 99999
29555: PPUSH
29556: CALL_OW 277
29560: GO 29535
29562: POP
29563: POP
29564: GO 29519
29566: POP
29567: POP
// end ;
29568: LD_VAR 0 1
29572: RET
// export function hHackSetLevel10 ; var i , j ; begin
29573: LD_INT 0
29575: PPUSH
29576: PPUSH
29577: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29578: LD_ADDR_VAR 0 2
29582: PUSH
29583: LD_INT 21
29585: PUSH
29586: LD_INT 1
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PPUSH
29593: CALL_OW 69
29597: PUSH
29598: FOR_IN
29599: IFFALSE 29651
// if IsSelected ( i ) then
29601: LD_VAR 0 2
29605: PPUSH
29606: CALL_OW 306
29610: IFFALSE 29649
// begin for j := 1 to 4 do
29612: LD_ADDR_VAR 0 3
29616: PUSH
29617: DOUBLE
29618: LD_INT 1
29620: DEC
29621: ST_TO_ADDR
29622: LD_INT 4
29624: PUSH
29625: FOR_TO
29626: IFFALSE 29647
// SetSkill ( i , j , 10 ) ;
29628: LD_VAR 0 2
29632: PPUSH
29633: LD_VAR 0 3
29637: PPUSH
29638: LD_INT 10
29640: PPUSH
29641: CALL_OW 237
29645: GO 29625
29647: POP
29648: POP
// end ;
29649: GO 29598
29651: POP
29652: POP
// end ;
29653: LD_VAR 0 1
29657: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29658: LD_INT 0
29660: PPUSH
29661: PPUSH
29662: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29663: LD_ADDR_VAR 0 2
29667: PUSH
29668: LD_INT 22
29670: PUSH
29671: LD_OWVAR 2
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 21
29682: PUSH
29683: LD_INT 1
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PPUSH
29694: CALL_OW 69
29698: PUSH
29699: FOR_IN
29700: IFFALSE 29741
// begin for j := 1 to 4 do
29702: LD_ADDR_VAR 0 3
29706: PUSH
29707: DOUBLE
29708: LD_INT 1
29710: DEC
29711: ST_TO_ADDR
29712: LD_INT 4
29714: PUSH
29715: FOR_TO
29716: IFFALSE 29737
// SetSkill ( i , j , 10 ) ;
29718: LD_VAR 0 2
29722: PPUSH
29723: LD_VAR 0 3
29727: PPUSH
29728: LD_INT 10
29730: PPUSH
29731: CALL_OW 237
29735: GO 29715
29737: POP
29738: POP
// end ;
29739: GO 29699
29741: POP
29742: POP
// end ;
29743: LD_VAR 0 1
29747: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29748: LD_INT 0
29750: PPUSH
// uc_side := your_side ;
29751: LD_ADDR_OWVAR 20
29755: PUSH
29756: LD_OWVAR 2
29760: ST_TO_ADDR
// uc_nation := nation ;
29761: LD_ADDR_OWVAR 21
29765: PUSH
29766: LD_VAR 0 1
29770: ST_TO_ADDR
// InitHc ;
29771: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29775: LD_INT 0
29777: PPUSH
29778: LD_VAR 0 2
29782: PPUSH
29783: LD_VAR 0 3
29787: PPUSH
29788: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29792: LD_VAR 0 4
29796: PPUSH
29797: LD_VAR 0 5
29801: PPUSH
29802: CALL_OW 428
29806: PUSH
29807: LD_INT 0
29809: EQUAL
29810: IFFALSE 29834
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29812: CALL_OW 44
29816: PPUSH
29817: LD_VAR 0 4
29821: PPUSH
29822: LD_VAR 0 5
29826: PPUSH
29827: LD_INT 1
29829: PPUSH
29830: CALL_OW 48
// end ;
29834: LD_VAR 0 6
29838: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29839: LD_INT 0
29841: PPUSH
29842: PPUSH
// uc_side := your_side ;
29843: LD_ADDR_OWVAR 20
29847: PUSH
29848: LD_OWVAR 2
29852: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29853: LD_VAR 0 1
29857: PUSH
29858: LD_INT 1
29860: PUSH
29861: LD_INT 2
29863: PUSH
29864: LD_INT 3
29866: PUSH
29867: LD_INT 4
29869: PUSH
29870: LD_INT 5
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: IN
29880: IFFALSE 29892
// uc_nation := nation_american else
29882: LD_ADDR_OWVAR 21
29886: PUSH
29887: LD_INT 1
29889: ST_TO_ADDR
29890: GO 29935
// if chassis in [ 11 , 12 , 13 , 14 ] then
29892: LD_VAR 0 1
29896: PUSH
29897: LD_INT 11
29899: PUSH
29900: LD_INT 12
29902: PUSH
29903: LD_INT 13
29905: PUSH
29906: LD_INT 14
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: IN
29915: IFFALSE 29927
// uc_nation := nation_arabian else
29917: LD_ADDR_OWVAR 21
29921: PUSH
29922: LD_INT 2
29924: ST_TO_ADDR
29925: GO 29935
// uc_nation := nation_russian ;
29927: LD_ADDR_OWVAR 21
29931: PUSH
29932: LD_INT 3
29934: ST_TO_ADDR
// vc_chassis := chassis ;
29935: LD_ADDR_OWVAR 37
29939: PUSH
29940: LD_VAR 0 1
29944: ST_TO_ADDR
// vc_engine := engine ;
29945: LD_ADDR_OWVAR 39
29949: PUSH
29950: LD_VAR 0 2
29954: ST_TO_ADDR
// vc_control := control ;
29955: LD_ADDR_OWVAR 38
29959: PUSH
29960: LD_VAR 0 3
29964: ST_TO_ADDR
// vc_weapon := weapon ;
29965: LD_ADDR_OWVAR 40
29969: PUSH
29970: LD_VAR 0 4
29974: ST_TO_ADDR
// un := CreateVehicle ;
29975: LD_ADDR_VAR 0 8
29979: PUSH
29980: CALL_OW 45
29984: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29985: LD_VAR 0 8
29989: PPUSH
29990: LD_INT 0
29992: PPUSH
29993: LD_INT 5
29995: PPUSH
29996: CALL_OW 12
30000: PPUSH
30001: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30005: LD_VAR 0 8
30009: PPUSH
30010: LD_VAR 0 5
30014: PPUSH
30015: LD_VAR 0 6
30019: PPUSH
30020: LD_INT 1
30022: PPUSH
30023: CALL_OW 48
// end ;
30027: LD_VAR 0 7
30031: RET
// export hInvincible ; every 1 do
30032: GO 30034
30034: DISABLE
// hInvincible := [ ] ;
30035: LD_ADDR_EXP 95
30039: PUSH
30040: EMPTY
30041: ST_TO_ADDR
30042: END
// every 10 do var i ;
30043: GO 30045
30045: DISABLE
30046: LD_INT 0
30048: PPUSH
// begin enable ;
30049: ENABLE
// if not hInvincible then
30050: LD_EXP 95
30054: NOT
30055: IFFALSE 30059
// exit ;
30057: GO 30103
// for i in hInvincible do
30059: LD_ADDR_VAR 0 1
30063: PUSH
30064: LD_EXP 95
30068: PUSH
30069: FOR_IN
30070: IFFALSE 30101
// if GetLives ( i ) < 1000 then
30072: LD_VAR 0 1
30076: PPUSH
30077: CALL_OW 256
30081: PUSH
30082: LD_INT 1000
30084: LESS
30085: IFFALSE 30099
// SetLives ( i , 1000 ) ;
30087: LD_VAR 0 1
30091: PPUSH
30092: LD_INT 1000
30094: PPUSH
30095: CALL_OW 234
30099: GO 30069
30101: POP
30102: POP
// end ;
30103: PPOPN 1
30105: END
// export function hHackInvincible ; var i ; begin
30106: LD_INT 0
30108: PPUSH
30109: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30110: LD_ADDR_VAR 0 2
30114: PUSH
30115: LD_INT 2
30117: PUSH
30118: LD_INT 21
30120: PUSH
30121: LD_INT 1
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 21
30130: PUSH
30131: LD_INT 2
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: LIST
30142: PPUSH
30143: CALL_OW 69
30147: PUSH
30148: FOR_IN
30149: IFFALSE 30210
// if IsSelected ( i ) then
30151: LD_VAR 0 2
30155: PPUSH
30156: CALL_OW 306
30160: IFFALSE 30208
// begin if i in hInvincible then
30162: LD_VAR 0 2
30166: PUSH
30167: LD_EXP 95
30171: IN
30172: IFFALSE 30192
// hInvincible := hInvincible diff i else
30174: LD_ADDR_EXP 95
30178: PUSH
30179: LD_EXP 95
30183: PUSH
30184: LD_VAR 0 2
30188: DIFF
30189: ST_TO_ADDR
30190: GO 30208
// hInvincible := hInvincible union i ;
30192: LD_ADDR_EXP 95
30196: PUSH
30197: LD_EXP 95
30201: PUSH
30202: LD_VAR 0 2
30206: UNION
30207: ST_TO_ADDR
// end ;
30208: GO 30148
30210: POP
30211: POP
// end ;
30212: LD_VAR 0 1
30216: RET
// export function hHackInvisible ; var i , j ; begin
30217: LD_INT 0
30219: PPUSH
30220: PPUSH
30221: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30222: LD_ADDR_VAR 0 2
30226: PUSH
30227: LD_INT 21
30229: PUSH
30230: LD_INT 1
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PPUSH
30237: CALL_OW 69
30241: PUSH
30242: FOR_IN
30243: IFFALSE 30267
// if IsSelected ( i ) then
30245: LD_VAR 0 2
30249: PPUSH
30250: CALL_OW 306
30254: IFFALSE 30265
// ComForceInvisible ( i ) ;
30256: LD_VAR 0 2
30260: PPUSH
30261: CALL_OW 496
30265: GO 30242
30267: POP
30268: POP
// end ;
30269: LD_VAR 0 1
30273: RET
// export function hHackChangeYourSide ; begin
30274: LD_INT 0
30276: PPUSH
// if your_side = 8 then
30277: LD_OWVAR 2
30281: PUSH
30282: LD_INT 8
30284: EQUAL
30285: IFFALSE 30297
// your_side := 0 else
30287: LD_ADDR_OWVAR 2
30291: PUSH
30292: LD_INT 0
30294: ST_TO_ADDR
30295: GO 30311
// your_side := your_side + 1 ;
30297: LD_ADDR_OWVAR 2
30301: PUSH
30302: LD_OWVAR 2
30306: PUSH
30307: LD_INT 1
30309: PLUS
30310: ST_TO_ADDR
// end ;
30311: LD_VAR 0 1
30315: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30316: LD_INT 0
30318: PPUSH
30319: PPUSH
30320: PPUSH
// for i in all_units do
30321: LD_ADDR_VAR 0 2
30325: PUSH
30326: LD_OWVAR 3
30330: PUSH
30331: FOR_IN
30332: IFFALSE 30410
// if IsSelected ( i ) then
30334: LD_VAR 0 2
30338: PPUSH
30339: CALL_OW 306
30343: IFFALSE 30408
// begin j := GetSide ( i ) ;
30345: LD_ADDR_VAR 0 3
30349: PUSH
30350: LD_VAR 0 2
30354: PPUSH
30355: CALL_OW 255
30359: ST_TO_ADDR
// if j = 8 then
30360: LD_VAR 0 3
30364: PUSH
30365: LD_INT 8
30367: EQUAL
30368: IFFALSE 30380
// j := 0 else
30370: LD_ADDR_VAR 0 3
30374: PUSH
30375: LD_INT 0
30377: ST_TO_ADDR
30378: GO 30394
// j := j + 1 ;
30380: LD_ADDR_VAR 0 3
30384: PUSH
30385: LD_VAR 0 3
30389: PUSH
30390: LD_INT 1
30392: PLUS
30393: ST_TO_ADDR
// SetSide ( i , j ) ;
30394: LD_VAR 0 2
30398: PPUSH
30399: LD_VAR 0 3
30403: PPUSH
30404: CALL_OW 235
// end ;
30408: GO 30331
30410: POP
30411: POP
// end ;
30412: LD_VAR 0 1
30416: RET
// export function hHackFog ; begin
30417: LD_INT 0
30419: PPUSH
// FogOff ( true ) ;
30420: LD_INT 1
30422: PPUSH
30423: CALL_OW 344
// end ;
30427: LD_VAR 0 1
30431: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30432: LD_INT 0
30434: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30435: LD_VAR 0 1
30439: PPUSH
30440: LD_VAR 0 2
30444: PPUSH
30445: LD_VAR 0 3
30449: PPUSH
30450: LD_INT 1
30452: PPUSH
30453: LD_INT 1
30455: PPUSH
30456: CALL_OW 483
// CenterOnXY ( x , y ) ;
30460: LD_VAR 0 2
30464: PPUSH
30465: LD_VAR 0 3
30469: PPUSH
30470: CALL_OW 84
// end ;
30474: LD_VAR 0 4
30478: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
30479: LD_INT 0
30481: PPUSH
30482: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
30483: LD_VAR 0 1
30487: NOT
30488: IFTRUE 30507
30490: PUSH
30491: LD_VAR 0 2
30495: PPUSH
30496: LD_VAR 0 3
30500: PPUSH
30501: CALL_OW 488
30505: NOT
30506: OR
30507: IFTRUE 30542
30509: PUSH
30510: LD_VAR 0 1
30514: PPUSH
30515: CALL_OW 266
30519: PUSH
30520: LD_INT 3
30522: NONEQUAL
30523: IFFALSE 30541
30525: PUSH
30526: LD_VAR 0 1
30530: PPUSH
30531: CALL_OW 247
30535: PUSH
30536: LD_INT 1
30538: EQUAL
30539: NOT
30540: AND
30541: OR
30542: IFFALSE 30546
// exit ;
30544: GO 30828
// if GetType ( factory ) = unit_human then
30546: LD_VAR 0 1
30550: PPUSH
30551: CALL_OW 247
30555: PUSH
30556: LD_INT 1
30558: EQUAL
30559: IFFALSE 30576
// factory := IsInUnit ( factory ) ;
30561: LD_ADDR_VAR 0 1
30565: PUSH
30566: LD_VAR 0 1
30570: PPUSH
30571: CALL_OW 310
30575: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
30576: LD_VAR 0 1
30580: PPUSH
30581: CALL_OW 266
30585: PUSH
30586: LD_INT 3
30588: NONEQUAL
30589: IFFALSE 30593
// exit ;
30591: GO 30828
// for i := 1 to Count ( factoryWaypoints ) do
30593: LD_ADDR_VAR 0 5
30597: PUSH
30598: DOUBLE
30599: LD_INT 1
30601: DEC
30602: ST_TO_ADDR
30603: LD_EXP 96
30607: PPUSH
30608: CALL 40632 0 1
30612: PUSH
30613: FOR_TO
30614: IFFALSE 30776
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
30616: LD_VAR 0 2
30620: PPUSH
30621: LD_VAR 0 3
30625: PPUSH
30626: CALL_OW 428
30630: PUSH
30631: LD_EXP 96
30635: PUSH
30636: LD_VAR 0 5
30640: ARRAY
30641: PUSH
30642: LD_INT 2
30644: ARRAY
30645: EQUAL
30646: IFFALSE 30678
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
30648: LD_ADDR_EXP 96
30652: PUSH
30653: LD_EXP 96
30657: PPUSH
30658: LD_VAR 0 5
30662: PPUSH
30663: CALL_OW 3
30667: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30668: CALL 30833 0 0
// exit ;
30672: POP
30673: POP
30674: GO 30828
// end else
30676: GO 30774
// if factory = factoryWaypoints [ i ] [ 2 ] then
30678: LD_VAR 0 1
30682: PUSH
30683: LD_EXP 96
30687: PUSH
30688: LD_VAR 0 5
30692: ARRAY
30693: PUSH
30694: LD_INT 2
30696: ARRAY
30697: EQUAL
30698: IFFALSE 30774
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
30700: LD_ADDR_EXP 96
30704: PUSH
30705: LD_EXP 96
30709: PPUSH
30710: LD_VAR 0 5
30714: PPUSH
30715: CALL_OW 3
30719: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
30720: LD_ADDR_EXP 96
30724: PUSH
30725: LD_EXP 96
30729: PPUSH
30730: LD_VAR 0 1
30734: PPUSH
30735: CALL_OW 255
30739: PUSH
30740: LD_VAR 0 1
30744: PUSH
30745: LD_VAR 0 2
30749: PUSH
30750: LD_VAR 0 3
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: PPUSH
30761: CALL 76608 0 2
30765: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30766: CALL 30833 0 0
// exit ;
30770: POP
30771: POP
30772: GO 30828
// end ; end ;
30774: GO 30613
30776: POP
30777: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
30778: LD_ADDR_EXP 96
30782: PUSH
30783: LD_EXP 96
30787: PPUSH
30788: LD_VAR 0 1
30792: PPUSH
30793: CALL_OW 255
30797: PUSH
30798: LD_VAR 0 1
30802: PUSH
30803: LD_VAR 0 2
30807: PUSH
30808: LD_VAR 0 3
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: PPUSH
30819: CALL 76608 0 2
30823: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30824: CALL 30833 0 0
// end ;
30828: LD_VAR 0 4
30832: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
30833: LD_INT 0
30835: PPUSH
30836: PPUSH
30837: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
30838: LD_STRING resetFactoryWaypoint();
30840: PPUSH
30841: CALL_OW 559
// if factoryWaypoints then
30845: LD_EXP 96
30849: IFFALSE 30970
// begin list := factoryWaypoints ;
30851: LD_ADDR_VAR 0 3
30855: PUSH
30856: LD_EXP 96
30860: ST_TO_ADDR
// for i := 1 to list do
30861: LD_ADDR_VAR 0 2
30865: PUSH
30866: DOUBLE
30867: LD_INT 1
30869: DEC
30870: ST_TO_ADDR
30871: LD_VAR 0 3
30875: PUSH
30876: FOR_TO
30877: IFFALSE 30968
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30879: LD_STRING setFactoryWaypointXY(
30881: PUSH
30882: LD_VAR 0 3
30886: PUSH
30887: LD_VAR 0 2
30891: ARRAY
30892: PUSH
30893: LD_INT 1
30895: ARRAY
30896: STR
30897: PUSH
30898: LD_STRING ,
30900: STR
30901: PUSH
30902: LD_VAR 0 3
30906: PUSH
30907: LD_VAR 0 2
30911: ARRAY
30912: PUSH
30913: LD_INT 2
30915: ARRAY
30916: STR
30917: PUSH
30918: LD_STRING ,
30920: STR
30921: PUSH
30922: LD_VAR 0 3
30926: PUSH
30927: LD_VAR 0 2
30931: ARRAY
30932: PUSH
30933: LD_INT 3
30935: ARRAY
30936: STR
30937: PUSH
30938: LD_STRING ,
30940: STR
30941: PUSH
30942: LD_VAR 0 3
30946: PUSH
30947: LD_VAR 0 2
30951: ARRAY
30952: PUSH
30953: LD_INT 4
30955: ARRAY
30956: STR
30957: PUSH
30958: LD_STRING )
30960: STR
30961: PPUSH
30962: CALL_OW 559
30966: GO 30876
30968: POP
30969: POP
// end ; end ;
30970: LD_VAR 0 1
30974: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
30975: LD_INT 0
30977: PPUSH
// if HexInfo ( x , y ) = warehouse then
30978: LD_VAR 0 2
30982: PPUSH
30983: LD_VAR 0 3
30987: PPUSH
30988: CALL_OW 428
30992: PUSH
30993: LD_VAR 0 1
30997: EQUAL
30998: IFFALSE 31025
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
31000: LD_ADDR_EXP 98
31004: PUSH
31005: LD_EXP 98
31009: PPUSH
31010: LD_VAR 0 1
31014: PPUSH
31015: LD_INT 0
31017: PPUSH
31018: CALL_OW 1
31022: ST_TO_ADDR
31023: GO 31076
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
31025: LD_ADDR_EXP 98
31029: PUSH
31030: LD_EXP 98
31034: PPUSH
31035: LD_VAR 0 1
31039: PPUSH
31040: LD_VAR 0 1
31044: PPUSH
31045: CALL_OW 255
31049: PUSH
31050: LD_VAR 0 1
31054: PUSH
31055: LD_VAR 0 2
31059: PUSH
31060: LD_VAR 0 3
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: PPUSH
31071: CALL_OW 1
31075: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
31076: CALL 31085 0 0
// end ;
31080: LD_VAR 0 4
31084: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
31085: LD_INT 0
31087: PPUSH
31088: PPUSH
31089: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
31090: LD_STRING resetWarehouseGatheringPoints();
31092: PPUSH
31093: CALL_OW 559
// if warehouseGatheringPoints then
31097: LD_EXP 98
31101: IFFALSE 31227
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
31103: LD_ADDR_VAR 0 3
31107: PUSH
31108: LD_EXP 98
31112: PPUSH
31113: CALL 80542 0 1
31117: ST_TO_ADDR
// for i := 1 to list do
31118: LD_ADDR_VAR 0 2
31122: PUSH
31123: DOUBLE
31124: LD_INT 1
31126: DEC
31127: ST_TO_ADDR
31128: LD_VAR 0 3
31132: PUSH
31133: FOR_TO
31134: IFFALSE 31225
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31136: LD_STRING setWarehouseGatheringPointXY(
31138: PUSH
31139: LD_VAR 0 3
31143: PUSH
31144: LD_VAR 0 2
31148: ARRAY
31149: PUSH
31150: LD_INT 1
31152: ARRAY
31153: STR
31154: PUSH
31155: LD_STRING ,
31157: STR
31158: PUSH
31159: LD_VAR 0 3
31163: PUSH
31164: LD_VAR 0 2
31168: ARRAY
31169: PUSH
31170: LD_INT 2
31172: ARRAY
31173: STR
31174: PUSH
31175: LD_STRING ,
31177: STR
31178: PUSH
31179: LD_VAR 0 3
31183: PUSH
31184: LD_VAR 0 2
31188: ARRAY
31189: PUSH
31190: LD_INT 3
31192: ARRAY
31193: STR
31194: PUSH
31195: LD_STRING ,
31197: STR
31198: PUSH
31199: LD_VAR 0 3
31203: PUSH
31204: LD_VAR 0 2
31208: ARRAY
31209: PUSH
31210: LD_INT 4
31212: ARRAY
31213: STR
31214: PUSH
31215: LD_STRING )
31217: STR
31218: PPUSH
31219: CALL_OW 559
31223: GO 31133
31225: POP
31226: POP
// end ; end ;
31227: LD_VAR 0 1
31231: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
31232: LD_EXP 98
31236: IFFALSE 31931
31238: GO 31240
31240: DISABLE
31241: LD_INT 0
31243: PPUSH
31244: PPUSH
31245: PPUSH
31246: PPUSH
31247: PPUSH
31248: PPUSH
31249: PPUSH
31250: PPUSH
31251: PPUSH
// begin enable ;
31252: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
31253: LD_ADDR_VAR 0 3
31257: PUSH
31258: LD_EXP 98
31262: PPUSH
31263: CALL 80542 0 1
31267: ST_TO_ADDR
// if not list then
31268: LD_VAR 0 3
31272: NOT
31273: IFFALSE 31277
// exit ;
31275: GO 31931
// for i := 1 to list do
31277: LD_ADDR_VAR 0 1
31281: PUSH
31282: DOUBLE
31283: LD_INT 1
31285: DEC
31286: ST_TO_ADDR
31287: LD_VAR 0 3
31291: PUSH
31292: FOR_TO
31293: IFFALSE 31929
// begin depot := list [ i ] [ 2 ] ;
31295: LD_ADDR_VAR 0 8
31299: PUSH
31300: LD_VAR 0 3
31304: PUSH
31305: LD_VAR 0 1
31309: ARRAY
31310: PUSH
31311: LD_INT 2
31313: ARRAY
31314: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
31315: LD_ADDR_VAR 0 5
31319: PUSH
31320: LD_VAR 0 3
31324: PUSH
31325: LD_VAR 0 1
31329: ARRAY
31330: PUSH
31331: LD_INT 1
31333: ARRAY
31334: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
31335: LD_VAR 0 8
31339: PPUSH
31340: CALL_OW 301
31344: IFTRUE 31363
31346: PUSH
31347: LD_VAR 0 5
31351: PUSH
31352: LD_VAR 0 8
31356: PPUSH
31357: CALL_OW 255
31361: NONEQUAL
31362: OR
31363: IFFALSE 31392
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
31365: LD_ADDR_EXP 98
31369: PUSH
31370: LD_EXP 98
31374: PPUSH
31375: LD_VAR 0 8
31379: PPUSH
31380: LD_INT 0
31382: PPUSH
31383: CALL_OW 1
31387: ST_TO_ADDR
// exit ;
31388: POP
31389: POP
31390: GO 31931
// end ; x := list [ i ] [ 3 ] ;
31392: LD_ADDR_VAR 0 6
31396: PUSH
31397: LD_VAR 0 3
31401: PUSH
31402: LD_VAR 0 1
31406: ARRAY
31407: PUSH
31408: LD_INT 3
31410: ARRAY
31411: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
31412: LD_ADDR_VAR 0 7
31416: PUSH
31417: LD_VAR 0 3
31421: PUSH
31422: LD_VAR 0 1
31426: ARRAY
31427: PUSH
31428: LD_INT 4
31430: ARRAY
31431: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
31432: LD_ADDR_VAR 0 9
31436: PUSH
31437: LD_VAR 0 6
31441: PPUSH
31442: LD_VAR 0 7
31446: PPUSH
31447: LD_INT 16
31449: PPUSH
31450: CALL 79116 0 3
31454: ST_TO_ADDR
// if not cratesNearbyPoint then
31455: LD_VAR 0 9
31459: NOT
31460: IFFALSE 31466
// exit ;
31462: POP
31463: POP
31464: GO 31931
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
31466: LD_ADDR_VAR 0 4
31470: PUSH
31471: LD_INT 22
31473: PUSH
31474: LD_VAR 0 5
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 3
31485: PUSH
31486: LD_INT 60
31488: PUSH
31489: EMPTY
31490: LIST
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 91
31498: PUSH
31499: LD_VAR 0 8
31503: PUSH
31504: LD_INT 6
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 2
31514: PUSH
31515: LD_INT 25
31517: PUSH
31518: LD_INT 2
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 25
31527: PUSH
31528: LD_INT 16
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: LIST
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: PPUSH
31546: CALL_OW 69
31550: PUSH
31551: LD_VAR 0 8
31555: PPUSH
31556: CALL_OW 313
31560: PPUSH
31561: LD_INT 3
31563: PUSH
31564: LD_INT 60
31566: PUSH
31567: EMPTY
31568: LIST
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 2
31576: PUSH
31577: LD_INT 25
31579: PUSH
31580: LD_INT 2
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 25
31589: PUSH
31590: LD_INT 16
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: LIST
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PPUSH
31606: CALL_OW 72
31610: UNION
31611: ST_TO_ADDR
// if tmp then
31612: LD_VAR 0 4
31616: IFFALSE 31696
// begin tmp := ShrinkArray ( tmp , 3 ) ;
31618: LD_ADDR_VAR 0 4
31622: PUSH
31623: LD_VAR 0 4
31627: PPUSH
31628: LD_INT 3
31630: PPUSH
31631: CALL 76923 0 2
31635: ST_TO_ADDR
// for j in tmp do
31636: LD_ADDR_VAR 0 2
31640: PUSH
31641: LD_VAR 0 4
31645: PUSH
31646: FOR_IN
31647: IFFALSE 31690
// begin if IsInUnit ( j ) then
31649: LD_VAR 0 2
31653: PPUSH
31654: CALL_OW 310
31658: IFFALSE 31669
// ComExit ( j ) ;
31660: LD_VAR 0 2
31664: PPUSH
31665: CALL 77006 0 1
// AddComCollect ( j , x , y ) ;
31669: LD_VAR 0 2
31673: PPUSH
31674: LD_VAR 0 6
31678: PPUSH
31679: LD_VAR 0 7
31683: PPUSH
31684: CALL_OW 177
// end ;
31688: GO 31646
31690: POP
31691: POP
// exit ;
31692: POP
31693: POP
31694: GO 31931
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
31696: LD_ADDR_VAR 0 4
31700: PUSH
31701: LD_INT 22
31703: PUSH
31704: LD_VAR 0 5
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 91
31715: PUSH
31716: LD_VAR 0 8
31720: PUSH
31721: LD_INT 8
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 2
31731: PUSH
31732: LD_INT 34
31734: PUSH
31735: LD_INT 12
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 34
31744: PUSH
31745: LD_INT 51
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 34
31754: PUSH
31755: LD_INT 32
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 34
31764: PUSH
31765: LD_INT 89
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: LIST
31783: PPUSH
31784: CALL_OW 69
31788: ST_TO_ADDR
// if tmp then
31789: LD_VAR 0 4
31793: IFFALSE 31927
// begin for j in tmp do
31795: LD_ADDR_VAR 0 2
31799: PUSH
31800: LD_VAR 0 4
31804: PUSH
31805: FOR_IN
31806: IFFALSE 31925
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
31808: LD_VAR 0 2
31812: PPUSH
31813: CALL_OW 262
31817: PUSH
31818: LD_INT 3
31820: EQUAL
31821: IFTRUE 31838
31823: PUSH
31824: LD_VAR 0 2
31828: PPUSH
31829: CALL_OW 261
31833: PUSH
31834: LD_INT 20
31836: GREATER
31837: OR
31838: IFFALSE 31852
31840: PUSH
31841: LD_VAR 0 2
31845: PPUSH
31846: CALL_OW 314
31850: NOT
31851: AND
31852: IFFALSE 31882
31854: PUSH
31855: LD_VAR 0 2
31859: PPUSH
31860: CALL_OW 263
31864: PUSH
31865: LD_INT 1
31867: NONEQUAL
31868: IFTRUE 31881
31870: PUSH
31871: LD_VAR 0 2
31875: PPUSH
31876: CALL_OW 311
31880: OR
31881: AND
31882: IFFALSE 31923
// begin ComCollect ( j , x , y ) ;
31884: LD_VAR 0 2
31888: PPUSH
31889: LD_VAR 0 6
31893: PPUSH
31894: LD_VAR 0 7
31898: PPUSH
31899: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
31903: LD_VAR 0 2
31907: PPUSH
31908: LD_VAR 0 8
31912: PPUSH
31913: CALL_OW 172
// exit ;
31917: POP
31918: POP
31919: POP
31920: POP
31921: GO 31931
// end ;
31923: GO 31805
31925: POP
31926: POP
// end ; end ;
31927: GO 31292
31929: POP
31930: POP
// end ; end_of_file
31931: PPOPN 9
31933: END
// export function SOS_UnitDestroyed ( un ) ; begin
31934: LD_INT 0
31936: PPUSH
// ComRadiation ( un ) ;
31937: LD_VAR 0 1
31941: PPUSH
31942: CALL 33104 0 1
// end ;
31946: LD_VAR 0 2
31950: RET
// export function SOS_UnitKamikazed ( un ) ; begin
31951: LD_INT 0
31953: PPUSH
// ComRadiation ( un ) ;
31954: LD_VAR 0 1
31958: PPUSH
31959: CALL 33104 0 1
// end ;
31963: LD_VAR 0 2
31967: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31968: LD_INT 0
31970: PPUSH
// end ;
31971: LD_VAR 0 4
31975: RET
// export function SOS_Command ( cmd ) ; begin
31976: LD_INT 0
31978: PPUSH
// end ;
31979: LD_VAR 0 2
31983: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
31984: LD_INT 0
31986: PPUSH
// end ;
31987: LD_VAR 0 6
31991: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
31992: LD_INT 0
31994: PPUSH
31995: PPUSH
31996: PPUSH
31997: PPUSH
31998: PPUSH
// if not vehicle or not factory then
31999: LD_VAR 0 1
32003: NOT
32004: IFTRUE 32013
32006: PUSH
32007: LD_VAR 0 2
32011: NOT
32012: OR
32013: IFFALSE 32017
// exit ;
32015: GO 32679
// weapon := GetWeapon ( vehicle ) ;
32017: LD_ADDR_VAR 0 7
32021: PUSH
32022: LD_VAR 0 1
32026: PPUSH
32027: CALL_OW 264
32031: ST_TO_ADDR
// if weapon = ar_miner then
32032: LD_VAR 0 7
32036: PUSH
32037: LD_INT 81
32039: EQUAL
32040: IFFALSE 32097
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
32042: LD_ADDR_EXP 107
32046: PUSH
32047: LD_EXP 107
32051: PPUSH
32052: LD_EXP 107
32056: PUSH
32057: LD_INT 1
32059: PLUS
32060: PPUSH
32061: LD_VAR 0 1
32065: PPUSH
32066: CALL_OW 1
32070: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
32071: LD_ADDR_EXP 108
32075: PUSH
32076: LD_EXP 108
32080: PPUSH
32081: LD_EXP 108
32085: PUSH
32086: LD_INT 1
32088: PLUS
32089: PPUSH
32090: EMPTY
32091: PPUSH
32092: CALL_OW 1
32096: ST_TO_ADDR
// end ; if not factoryWaypoints then
32097: LD_EXP 96
32101: NOT
32102: IFFALSE 32106
// exit ;
32104: GO 32679
// for i := 1 to Count ( factoryWaypoints ) do
32106: LD_ADDR_VAR 0 4
32110: PUSH
32111: DOUBLE
32112: LD_INT 1
32114: DEC
32115: ST_TO_ADDR
32116: LD_EXP 96
32120: PPUSH
32121: CALL 40632 0 1
32125: PUSH
32126: FOR_TO
32127: IFFALSE 32677
// if factoryWaypoints [ i ] [ 2 ] = factory then
32129: LD_EXP 96
32133: PUSH
32134: LD_VAR 0 4
32138: ARRAY
32139: PUSH
32140: LD_INT 2
32142: ARRAY
32143: PUSH
32144: LD_VAR 0 2
32148: EQUAL
32149: IFFALSE 32675
// begin if GetControl ( vehicle ) = control_manual then
32151: LD_VAR 0 1
32155: PPUSH
32156: CALL_OW 263
32160: PUSH
32161: LD_INT 1
32163: EQUAL
32164: IFFALSE 32528
// begin driver := IsDrivenBy ( vehicle ) ;
32166: LD_ADDR_VAR 0 5
32170: PUSH
32171: LD_VAR 0 1
32175: PPUSH
32176: CALL_OW 311
32180: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
32181: LD_VAR 0 5
32185: PUSH
32186: LD_EXP 97
32190: IN
32191: IFTRUE 32205
32193: PUSH
32194: LD_VAR 0 1
32198: PUSH
32199: LD_EXP 97
32203: IN
32204: OR
32205: IFFALSE 32211
// exit ;
32207: POP
32208: POP
32209: GO 32679
// if not HasTask ( driver ) then
32211: LD_VAR 0 5
32215: PPUSH
32216: CALL_OW 314
32220: NOT
32221: IFFALSE 32526
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
32223: LD_ADDR_EXP 97
32227: PUSH
32228: LD_EXP 97
32232: PPUSH
32233: LD_VAR 0 5
32237: PPUSH
32238: CALL 76608 0 2
32242: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
32243: LD_ADDR_EXP 97
32247: PUSH
32248: LD_EXP 97
32252: PPUSH
32253: LD_VAR 0 1
32257: PPUSH
32258: CALL 76608 0 2
32262: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
32263: LD_ADDR_VAR 0 6
32267: PUSH
32268: LD_EXP 96
32272: PUSH
32273: LD_VAR 0 4
32277: ARRAY
32278: PUSH
32279: LD_INT 3
32281: ARRAY
32282: PPUSH
32283: LD_EXP 96
32287: PUSH
32288: LD_VAR 0 4
32292: ARRAY
32293: PUSH
32294: LD_INT 4
32296: ARRAY
32297: PPUSH
32298: CALL_OW 428
32302: ST_TO_ADDR
// if hex then
32303: LD_VAR 0 6
32307: IFFALSE 32325
// ComMoveUnit ( driver , hex ) else
32309: LD_VAR 0 5
32313: PPUSH
32314: LD_VAR 0 6
32318: PPUSH
32319: CALL_OW 112
32323: GO 32409
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
32325: LD_VAR 0 1
32329: PPUSH
32330: LD_EXP 96
32334: PUSH
32335: LD_VAR 0 4
32339: ARRAY
32340: PUSH
32341: LD_INT 3
32343: ARRAY
32344: PPUSH
32345: LD_EXP 96
32349: PUSH
32350: LD_VAR 0 4
32354: ARRAY
32355: PUSH
32356: LD_INT 4
32358: ARRAY
32359: PPUSH
32360: CALL_OW 297
32364: PUSH
32365: LD_INT 0
32367: GREATER
32368: IFFALSE 32409
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
32370: LD_VAR 0 5
32374: PPUSH
32375: LD_EXP 96
32379: PUSH
32380: LD_VAR 0 4
32384: ARRAY
32385: PUSH
32386: LD_INT 3
32388: ARRAY
32389: PPUSH
32390: LD_EXP 96
32394: PUSH
32395: LD_VAR 0 4
32399: ARRAY
32400: PUSH
32401: LD_INT 4
32403: ARRAY
32404: PPUSH
32405: CALL_OW 111
// AddComExitVehicle ( driver ) ;
32409: LD_VAR 0 5
32413: PPUSH
32414: CALL_OW 181
// if Multiplayer then
32418: LD_OWVAR 4
32422: IFFALSE 32471
// begin repeat wait ( 10 ) ;
32424: LD_INT 10
32426: PPUSH
32427: CALL_OW 67
// until not IsInUnit ( driver ) ;
32431: LD_VAR 0 5
32435: PPUSH
32436: CALL_OW 310
32440: NOT
32441: IFFALSE 32424
// if not HasTask ( driver ) then
32443: LD_VAR 0 5
32447: PPUSH
32448: CALL_OW 314
32452: NOT
32453: IFFALSE 32469
// ComEnterUnit ( driver , factory ) ;
32455: LD_VAR 0 5
32459: PPUSH
32460: LD_VAR 0 2
32464: PPUSH
32465: CALL_OW 120
// end else
32469: GO 32485
// AddComEnterUnit ( driver , factory ) ;
32471: LD_VAR 0 5
32475: PPUSH
32476: LD_VAR 0 2
32480: PPUSH
32481: CALL_OW 180
// wait ( 0 0$1 ) ;
32485: LD_INT 35
32487: PPUSH
32488: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
32492: LD_ADDR_EXP 97
32496: PUSH
32497: LD_EXP 97
32501: PUSH
32502: LD_VAR 0 5
32506: DIFF
32507: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
32508: LD_ADDR_EXP 97
32512: PUSH
32513: LD_EXP 97
32517: PUSH
32518: LD_VAR 0 1
32522: DIFF
32523: ST_TO_ADDR
// break ;
32524: GO 32677
// end ; end else
32526: GO 32675
// if GetControl ( vehicle ) = control_remote then
32528: LD_VAR 0 1
32532: PPUSH
32533: CALL_OW 263
32537: PUSH
32538: LD_INT 2
32540: EQUAL
32541: IFFALSE 32627
// begin wait ( 0 0$2 ) ;
32543: LD_INT 70
32545: PPUSH
32546: CALL_OW 67
// repeat wait ( 10 ) ;
32550: LD_INT 10
32552: PPUSH
32553: CALL_OW 67
// Connect ( vehicle ) ;
32557: LD_VAR 0 1
32561: PPUSH
32562: CALL 46910 0 1
// until IsControledBy ( vehicle ) ;
32566: LD_VAR 0 1
32570: PPUSH
32571: CALL_OW 312
32575: IFFALSE 32550
// wait ( 10 ) ;
32577: LD_INT 10
32579: PPUSH
32580: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
32584: LD_VAR 0 1
32588: PPUSH
32589: LD_EXP 96
32593: PUSH
32594: LD_VAR 0 4
32598: ARRAY
32599: PUSH
32600: LD_INT 3
32602: ARRAY
32603: PPUSH
32604: LD_EXP 96
32608: PUSH
32609: LD_VAR 0 4
32613: ARRAY
32614: PUSH
32615: LD_INT 4
32617: ARRAY
32618: PPUSH
32619: CALL_OW 111
// break ;
32623: GO 32677
// end else
32625: GO 32675
// begin wait ( 0 0$3 ) ;
32627: LD_INT 105
32629: PPUSH
32630: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
32634: LD_VAR 0 1
32638: PPUSH
32639: LD_EXP 96
32643: PUSH
32644: LD_VAR 0 4
32648: ARRAY
32649: PUSH
32650: LD_INT 3
32652: ARRAY
32653: PPUSH
32654: LD_EXP 96
32658: PUSH
32659: LD_VAR 0 4
32663: ARRAY
32664: PUSH
32665: LD_INT 4
32667: ARRAY
32668: PPUSH
32669: CALL_OW 111
// break ;
32673: GO 32677
// end ; end ;
32675: GO 32126
32677: POP
32678: POP
// end ;
32679: LD_VAR 0 3
32683: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32684: LD_INT 0
32686: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32687: LD_VAR 0 1
32691: PUSH
32692: LD_INT 250
32694: EQUAL
32695: IFFALSE 32712
32697: PUSH
32698: LD_VAR 0 2
32702: PPUSH
32703: CALL_OW 264
32707: PUSH
32708: LD_INT 81
32710: EQUAL
32711: AND
32712: IFFALSE 32733
// MinerPlaceMine ( unit , x , y ) ;
32714: LD_VAR 0 2
32718: PPUSH
32719: LD_VAR 0 4
32723: PPUSH
32724: LD_VAR 0 5
32728: PPUSH
32729: CALL 36079 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32733: LD_VAR 0 1
32737: PUSH
32738: LD_INT 251
32740: EQUAL
32741: IFFALSE 32758
32743: PUSH
32744: LD_VAR 0 2
32748: PPUSH
32749: CALL_OW 264
32753: PUSH
32754: LD_INT 81
32756: EQUAL
32757: AND
32758: IFFALSE 32779
// MinerDetonateMine ( unit , x , y ) ;
32760: LD_VAR 0 2
32764: PPUSH
32765: LD_VAR 0 4
32769: PPUSH
32770: LD_VAR 0 5
32774: PPUSH
32775: CALL 36486 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32779: LD_VAR 0 1
32783: PUSH
32784: LD_INT 252
32786: EQUAL
32787: IFFALSE 32804
32789: PUSH
32790: LD_VAR 0 2
32794: PPUSH
32795: CALL_OW 264
32799: PUSH
32800: LD_INT 81
32802: EQUAL
32803: AND
32804: IFFALSE 32825
// MinerCreateMinefield ( unit , x , y ) ;
32806: LD_VAR 0 2
32810: PPUSH
32811: LD_VAR 0 4
32815: PPUSH
32816: LD_VAR 0 5
32820: PPUSH
32821: CALL 36718 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32825: LD_VAR 0 1
32829: PUSH
32830: LD_INT 253
32832: EQUAL
32833: IFFALSE 32850
32835: PUSH
32836: LD_VAR 0 2
32840: PPUSH
32841: CALL_OW 257
32845: PUSH
32846: LD_INT 5
32848: EQUAL
32849: AND
32850: IFFALSE 32871
// ComBinocular ( unit , x , y ) ;
32852: LD_VAR 0 2
32856: PPUSH
32857: LD_VAR 0 4
32861: PPUSH
32862: LD_VAR 0 5
32866: PPUSH
32867: CALL 37093 0 3
// if selectedUnit then
32871: LD_VAR 0 3
32875: IFFALSE 32935
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32877: LD_VAR 0 1
32881: PUSH
32882: LD_INT 254
32884: EQUAL
32885: IFFALSE 32902
32887: PUSH
32888: LD_VAR 0 2
32892: PPUSH
32893: CALL_OW 264
32897: PUSH
32898: LD_INT 99
32900: EQUAL
32901: AND
32902: IFFALSE 32919
32904: PUSH
32905: LD_VAR 0 3
32909: PPUSH
32910: CALL_OW 263
32914: PUSH
32915: LD_INT 3
32917: EQUAL
32918: AND
32919: IFFALSE 32935
// HackDestroyVehicle ( unit , selectedUnit ) ;
32921: LD_VAR 0 2
32925: PPUSH
32926: LD_VAR 0 3
32930: PPUSH
32931: CALL 35269 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32935: LD_VAR 0 1
32939: PUSH
32940: LD_INT 255
32942: EQUAL
32943: IFFALSE 32967
32945: PUSH
32946: LD_VAR 0 2
32950: PPUSH
32951: CALL_OW 264
32955: PUSH
32956: LD_INT 14
32958: PUSH
32959: LD_INT 53
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: IN
32966: AND
32967: IFFALSE 32985
32969: PUSH
32970: LD_VAR 0 4
32974: PPUSH
32975: LD_VAR 0 5
32979: PPUSH
32980: CALL_OW 488
32984: AND
32985: IFFALSE 33009
// CutTreeXYR ( unit , x , y , 12 ) ;
32987: LD_VAR 0 2
32991: PPUSH
32992: LD_VAR 0 4
32996: PPUSH
32997: LD_VAR 0 5
33001: PPUSH
33002: LD_INT 12
33004: PPUSH
33005: CALL 33200 0 4
// if cmd = 256 then
33009: LD_VAR 0 1
33013: PUSH
33014: LD_INT 256
33016: EQUAL
33017: IFFALSE 33038
// SetFactoryWaypoint ( unit , x , y ) ;
33019: LD_VAR 0 2
33023: PPUSH
33024: LD_VAR 0 4
33028: PPUSH
33029: LD_VAR 0 5
33033: PPUSH
33034: CALL 30479 0 3
// if cmd = 257 then
33038: LD_VAR 0 1
33042: PUSH
33043: LD_INT 257
33045: EQUAL
33046: IFFALSE 33067
// SetWarehouseGatheringPoint ( unit , x , y ) ;
33048: LD_VAR 0 2
33052: PPUSH
33053: LD_VAR 0 4
33057: PPUSH
33058: LD_VAR 0 5
33062: PPUSH
33063: CALL 30975 0 3
// if cmd = 258 then
33067: LD_VAR 0 1
33071: PUSH
33072: LD_INT 258
33074: EQUAL
33075: IFFALSE 33099
// BurnTreeXYR ( unit , x , y , 8 ) ;
33077: LD_VAR 0 2
33081: PPUSH
33082: LD_VAR 0 4
33086: PPUSH
33087: LD_VAR 0 5
33091: PPUSH
33092: LD_INT 8
33094: PPUSH
33095: CALL 33622 0 4
// end ;
33099: LD_VAR 0 6
33103: RET
// export function ComRadiation ( un ) ; var eff ; begin
33104: LD_INT 0
33106: PPUSH
33107: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
33108: LD_VAR 0 1
33112: PPUSH
33113: CALL_OW 264
33117: PUSH
33118: LD_INT 91
33120: NONEQUAL
33121: IFFALSE 33125
// exit ;
33123: GO 33195
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33125: LD_INT 68
33127: PPUSH
33128: LD_VAR 0 1
33132: PPUSH
33133: CALL_OW 255
33137: PPUSH
33138: CALL_OW 321
33142: PUSH
33143: LD_INT 2
33145: EQUAL
33146: IFFALSE 33158
// eff := 50 else
33148: LD_ADDR_VAR 0 3
33152: PUSH
33153: LD_INT 50
33155: ST_TO_ADDR
33156: GO 33166
// eff := 25 ;
33158: LD_ADDR_VAR 0 3
33162: PUSH
33163: LD_INT 25
33165: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33166: LD_VAR 0 1
33170: PPUSH
33171: CALL_OW 250
33175: PPUSH
33176: LD_VAR 0 1
33180: PPUSH
33181: CALL_OW 251
33185: PPUSH
33186: LD_VAR 0 3
33190: PPUSH
33191: CALL_OW 495
// end ;
33195: LD_VAR 0 2
33199: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33200: LD_INT 0
33202: PPUSH
33203: PPUSH
33204: PPUSH
33205: PPUSH
33206: PPUSH
33207: PPUSH
33208: PPUSH
33209: PPUSH
33210: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
33211: LD_VAR 0 1
33215: PPUSH
33216: CALL_OW 302
33220: NOT
33221: IFTRUE 33240
33223: PUSH
33224: LD_VAR 0 2
33228: PPUSH
33229: LD_VAR 0 3
33233: PPUSH
33234: CALL_OW 488
33238: NOT
33239: OR
33240: IFTRUE 33249
33242: PUSH
33243: LD_VAR 0 4
33247: NOT
33248: OR
33249: IFFALSE 33253
// exit ;
33251: GO 33617
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
33253: LD_VAR 0 1
33257: PPUSH
33258: CALL_OW 437
33262: PPUSH
33263: CALL 40632 0 1
33267: PUSH
33268: LD_INT 10
33270: GREATER
33271: IFFALSE 33275
// exit ;
33273: GO 33617
// list := [ ] ;
33275: LD_ADDR_VAR 0 13
33279: PUSH
33280: EMPTY
33281: ST_TO_ADDR
// if x - r < 0 then
33282: LD_VAR 0 2
33286: PUSH
33287: LD_VAR 0 4
33291: MINUS
33292: PUSH
33293: LD_INT 0
33295: LESS
33296: IFFALSE 33308
// min_x := 0 else
33298: LD_ADDR_VAR 0 7
33302: PUSH
33303: LD_INT 0
33305: ST_TO_ADDR
33306: GO 33324
// min_x := x - r ;
33308: LD_ADDR_VAR 0 7
33312: PUSH
33313: LD_VAR 0 2
33317: PUSH
33318: LD_VAR 0 4
33322: MINUS
33323: ST_TO_ADDR
// if y - r < 0 then
33324: LD_VAR 0 3
33328: PUSH
33329: LD_VAR 0 4
33333: MINUS
33334: PUSH
33335: LD_INT 0
33337: LESS
33338: IFFALSE 33350
// min_y := 0 else
33340: LD_ADDR_VAR 0 8
33344: PUSH
33345: LD_INT 0
33347: ST_TO_ADDR
33348: GO 33366
// min_y := y - r ;
33350: LD_ADDR_VAR 0 8
33354: PUSH
33355: LD_VAR 0 3
33359: PUSH
33360: LD_VAR 0 4
33364: MINUS
33365: ST_TO_ADDR
// max_x := x + r ;
33366: LD_ADDR_VAR 0 9
33370: PUSH
33371: LD_VAR 0 2
33375: PUSH
33376: LD_VAR 0 4
33380: PLUS
33381: ST_TO_ADDR
// max_y := y + r ;
33382: LD_ADDR_VAR 0 10
33386: PUSH
33387: LD_VAR 0 3
33391: PUSH
33392: LD_VAR 0 4
33396: PLUS
33397: ST_TO_ADDR
// for _x = min_x to max_x do
33398: LD_ADDR_VAR 0 11
33402: PUSH
33403: DOUBLE
33404: LD_VAR 0 7
33408: DEC
33409: ST_TO_ADDR
33410: LD_VAR 0 9
33414: PUSH
33415: FOR_TO
33416: IFFALSE 33535
// for _y = min_y to max_y do
33418: LD_ADDR_VAR 0 12
33422: PUSH
33423: DOUBLE
33424: LD_VAR 0 8
33428: DEC
33429: ST_TO_ADDR
33430: LD_VAR 0 10
33434: PUSH
33435: FOR_TO
33436: IFFALSE 33531
// begin if not ValidHex ( _x , _y ) then
33438: LD_VAR 0 11
33442: PPUSH
33443: LD_VAR 0 12
33447: PPUSH
33448: CALL_OW 488
33452: NOT
33453: IFFALSE 33457
// continue ;
33455: GO 33435
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33457: LD_VAR 0 11
33461: PPUSH
33462: LD_VAR 0 12
33466: PPUSH
33467: CALL_OW 351
33471: IFFALSE 33489
33473: PUSH
33474: LD_VAR 0 11
33478: PPUSH
33479: LD_VAR 0 12
33483: PPUSH
33484: CALL_OW 554
33488: AND
33489: IFFALSE 33529
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33491: LD_ADDR_VAR 0 13
33495: PUSH
33496: LD_VAR 0 13
33500: PPUSH
33501: LD_VAR 0 13
33505: PUSH
33506: LD_INT 1
33508: PLUS
33509: PPUSH
33510: LD_VAR 0 11
33514: PUSH
33515: LD_VAR 0 12
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PPUSH
33524: CALL_OW 2
33528: ST_TO_ADDR
// end ;
33529: GO 33435
33531: POP
33532: POP
33533: GO 33415
33535: POP
33536: POP
// if not list then
33537: LD_VAR 0 13
33541: NOT
33542: IFFALSE 33546
// exit ;
33544: GO 33617
// for i in list do
33546: LD_ADDR_VAR 0 6
33550: PUSH
33551: LD_VAR 0 13
33555: PUSH
33556: FOR_IN
33557: IFFALSE 33615
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33559: LD_VAR 0 1
33563: PPUSH
33564: LD_STRING M
33566: PUSH
33567: LD_VAR 0 6
33571: PUSH
33572: LD_INT 1
33574: ARRAY
33575: PUSH
33576: LD_VAR 0 6
33580: PUSH
33581: LD_INT 2
33583: ARRAY
33584: PUSH
33585: LD_INT 0
33587: PUSH
33588: LD_INT 0
33590: PUSH
33591: LD_INT 0
33593: PUSH
33594: LD_INT 0
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: PUSH
33606: EMPTY
33607: LIST
33608: PPUSH
33609: CALL_OW 447
33613: GO 33556
33615: POP
33616: POP
// end ;
33617: LD_VAR 0 5
33621: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
33622: LD_INT 0
33624: PPUSH
33625: PPUSH
33626: PPUSH
33627: PPUSH
33628: PPUSH
33629: PPUSH
33630: PPUSH
33631: PPUSH
33632: PPUSH
33633: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
33634: LD_VAR 0 1
33638: PPUSH
33639: CALL_OW 302
33643: NOT
33644: IFTRUE 33663
33646: PUSH
33647: LD_VAR 0 2
33651: PPUSH
33652: LD_VAR 0 3
33656: PPUSH
33657: CALL_OW 488
33661: NOT
33662: OR
33663: IFTRUE 33672
33665: PUSH
33666: LD_VAR 0 4
33670: NOT
33671: OR
33672: IFFALSE 33676
// exit ;
33674: GO 34215
// if Count ( GetTaskList ( flame ) ) > 10 then
33676: LD_VAR 0 1
33680: PPUSH
33681: CALL_OW 437
33685: PPUSH
33686: CALL 40632 0 1
33690: PUSH
33691: LD_INT 10
33693: GREATER
33694: IFFALSE 33698
// exit ;
33696: GO 34215
// list := [ ] ;
33698: LD_ADDR_VAR 0 13
33702: PUSH
33703: EMPTY
33704: ST_TO_ADDR
// if x - r < 0 then
33705: LD_VAR 0 2
33709: PUSH
33710: LD_VAR 0 4
33714: MINUS
33715: PUSH
33716: LD_INT 0
33718: LESS
33719: IFFALSE 33731
// min_x := 0 else
33721: LD_ADDR_VAR 0 7
33725: PUSH
33726: LD_INT 0
33728: ST_TO_ADDR
33729: GO 33747
// min_x := x - r ;
33731: LD_ADDR_VAR 0 7
33735: PUSH
33736: LD_VAR 0 2
33740: PUSH
33741: LD_VAR 0 4
33745: MINUS
33746: ST_TO_ADDR
// if y - r < 0 then
33747: LD_VAR 0 3
33751: PUSH
33752: LD_VAR 0 4
33756: MINUS
33757: PUSH
33758: LD_INT 0
33760: LESS
33761: IFFALSE 33773
// min_y := 0 else
33763: LD_ADDR_VAR 0 8
33767: PUSH
33768: LD_INT 0
33770: ST_TO_ADDR
33771: GO 33789
// min_y := y - r ;
33773: LD_ADDR_VAR 0 8
33777: PUSH
33778: LD_VAR 0 3
33782: PUSH
33783: LD_VAR 0 4
33787: MINUS
33788: ST_TO_ADDR
// max_x := x + r ;
33789: LD_ADDR_VAR 0 9
33793: PUSH
33794: LD_VAR 0 2
33798: PUSH
33799: LD_VAR 0 4
33803: PLUS
33804: ST_TO_ADDR
// max_y := y + r ;
33805: LD_ADDR_VAR 0 10
33809: PUSH
33810: LD_VAR 0 3
33814: PUSH
33815: LD_VAR 0 4
33819: PLUS
33820: ST_TO_ADDR
// for _x = min_x to max_x do
33821: LD_ADDR_VAR 0 11
33825: PUSH
33826: DOUBLE
33827: LD_VAR 0 7
33831: DEC
33832: ST_TO_ADDR
33833: LD_VAR 0 9
33837: PUSH
33838: FOR_TO
33839: IFFALSE 33958
// for _y = min_y to max_y do
33841: LD_ADDR_VAR 0 12
33845: PUSH
33846: DOUBLE
33847: LD_VAR 0 8
33851: DEC
33852: ST_TO_ADDR
33853: LD_VAR 0 10
33857: PUSH
33858: FOR_TO
33859: IFFALSE 33954
// begin if not ValidHex ( _x , _y ) then
33861: LD_VAR 0 11
33865: PPUSH
33866: LD_VAR 0 12
33870: PPUSH
33871: CALL_OW 488
33875: NOT
33876: IFFALSE 33880
// continue ;
33878: GO 33858
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33880: LD_VAR 0 11
33884: PPUSH
33885: LD_VAR 0 12
33889: PPUSH
33890: CALL_OW 351
33894: IFFALSE 33912
33896: PUSH
33897: LD_VAR 0 11
33901: PPUSH
33902: LD_VAR 0 12
33906: PPUSH
33907: CALL_OW 554
33911: AND
33912: IFFALSE 33952
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33914: LD_ADDR_VAR 0 13
33918: PUSH
33919: LD_VAR 0 13
33923: PPUSH
33924: LD_VAR 0 13
33928: PUSH
33929: LD_INT 1
33931: PLUS
33932: PPUSH
33933: LD_VAR 0 11
33937: PUSH
33938: LD_VAR 0 12
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PPUSH
33947: CALL_OW 2
33951: ST_TO_ADDR
// end ;
33952: GO 33858
33954: POP
33955: POP
33956: GO 33838
33958: POP
33959: POP
// if not list then
33960: LD_VAR 0 13
33964: NOT
33965: IFFALSE 33969
// exit ;
33967: GO 34215
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
33969: LD_ADDR_VAR 0 13
33973: PUSH
33974: LD_VAR 0 1
33978: PPUSH
33979: LD_VAR 0 13
33983: PPUSH
33984: LD_INT 1
33986: PPUSH
33987: LD_INT 1
33989: PPUSH
33990: CALL 44038 0 4
33994: ST_TO_ADDR
// ComStop ( flame ) ;
33995: LD_VAR 0 1
33999: PPUSH
34000: CALL_OW 141
// for i in list do
34004: LD_ADDR_VAR 0 6
34008: PUSH
34009: LD_VAR 0 13
34013: PUSH
34014: FOR_IN
34015: IFFALSE 34046
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
34017: LD_VAR 0 1
34021: PPUSH
34022: LD_VAR 0 6
34026: PUSH
34027: LD_INT 1
34029: ARRAY
34030: PPUSH
34031: LD_VAR 0 6
34035: PUSH
34036: LD_INT 2
34038: ARRAY
34039: PPUSH
34040: CALL_OW 176
34044: GO 34014
34046: POP
34047: POP
// repeat wait ( 0 0$1 ) ;
34048: LD_INT 35
34050: PPUSH
34051: CALL_OW 67
// task := GetTaskList ( flame ) ;
34055: LD_ADDR_VAR 0 14
34059: PUSH
34060: LD_VAR 0 1
34064: PPUSH
34065: CALL_OW 437
34069: ST_TO_ADDR
// if not task then
34070: LD_VAR 0 14
34074: NOT
34075: IFFALSE 34079
// exit ;
34077: GO 34215
// if task [ 1 ] [ 1 ] <> | then
34079: LD_VAR 0 14
34083: PUSH
34084: LD_INT 1
34086: ARRAY
34087: PUSH
34088: LD_INT 1
34090: ARRAY
34091: PUSH
34092: LD_STRING |
34094: NONEQUAL
34095: IFFALSE 34099
// exit ;
34097: GO 34215
// _x := task [ 1 ] [ 2 ] ;
34099: LD_ADDR_VAR 0 11
34103: PUSH
34104: LD_VAR 0 14
34108: PUSH
34109: LD_INT 1
34111: ARRAY
34112: PUSH
34113: LD_INT 2
34115: ARRAY
34116: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
34117: LD_ADDR_VAR 0 12
34121: PUSH
34122: LD_VAR 0 14
34126: PUSH
34127: LD_INT 1
34129: ARRAY
34130: PUSH
34131: LD_INT 3
34133: ARRAY
34134: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
34135: LD_VAR 0 11
34139: PPUSH
34140: LD_VAR 0 12
34144: PPUSH
34145: CALL_OW 351
34149: NOT
34150: IFTRUE 34169
34152: PUSH
34153: LD_VAR 0 11
34157: PPUSH
34158: LD_VAR 0 12
34162: PPUSH
34163: CALL_OW 554
34167: NOT
34168: OR
34169: IFFALSE 34203
// begin task := Delete ( task , 1 ) ;
34171: LD_ADDR_VAR 0 14
34175: PUSH
34176: LD_VAR 0 14
34180: PPUSH
34181: LD_INT 1
34183: PPUSH
34184: CALL_OW 3
34188: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
34189: LD_VAR 0 1
34193: PPUSH
34194: LD_VAR 0 14
34198: PPUSH
34199: CALL_OW 446
// end ; until not HasTask ( flame ) ;
34203: LD_VAR 0 1
34207: PPUSH
34208: CALL_OW 314
34212: NOT
34213: IFFALSE 34048
// end ;
34215: LD_VAR 0 5
34219: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34220: LD_EXP 100
34224: NOT
34225: IFFALSE 34275
34227: GO 34229
34229: DISABLE
// begin initHack := true ;
34230: LD_ADDR_EXP 100
34234: PUSH
34235: LD_INT 1
34237: ST_TO_ADDR
// hackTanks := [ ] ;
34238: LD_ADDR_EXP 101
34242: PUSH
34243: EMPTY
34244: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34245: LD_ADDR_EXP 102
34249: PUSH
34250: EMPTY
34251: ST_TO_ADDR
// hackLimit := 3 ;
34252: LD_ADDR_EXP 103
34256: PUSH
34257: LD_INT 3
34259: ST_TO_ADDR
// hackDist := 12 ;
34260: LD_ADDR_EXP 104
34264: PUSH
34265: LD_INT 12
34267: ST_TO_ADDR
// hackCounter := [ ] ;
34268: LD_ADDR_EXP 105
34272: PUSH
34273: EMPTY
34274: ST_TO_ADDR
// end ;
34275: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34276: LD_EXP 100
34280: IFFALSE 34298
34282: PUSH
34283: LD_INT 34
34285: PUSH
34286: LD_INT 99
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PPUSH
34293: CALL_OW 69
34297: AND
34298: IFFALSE 34551
34300: GO 34302
34302: DISABLE
34303: LD_INT 0
34305: PPUSH
34306: PPUSH
// begin enable ;
34307: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34308: LD_ADDR_VAR 0 1
34312: PUSH
34313: LD_INT 34
34315: PUSH
34316: LD_INT 99
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PPUSH
34323: CALL_OW 69
34327: PUSH
34328: FOR_IN
34329: IFFALSE 34549
// begin if not i in hackTanks then
34331: LD_VAR 0 1
34335: PUSH
34336: LD_EXP 101
34340: IN
34341: NOT
34342: IFFALSE 34425
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34344: LD_ADDR_EXP 101
34348: PUSH
34349: LD_EXP 101
34353: PPUSH
34354: LD_EXP 101
34358: PUSH
34359: LD_INT 1
34361: PLUS
34362: PPUSH
34363: LD_VAR 0 1
34367: PPUSH
34368: CALL_OW 1
34372: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34373: LD_ADDR_EXP 102
34377: PUSH
34378: LD_EXP 102
34382: PPUSH
34383: LD_EXP 102
34387: PUSH
34388: LD_INT 1
34390: PLUS
34391: PPUSH
34392: EMPTY
34393: PPUSH
34394: CALL_OW 1
34398: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34399: LD_ADDR_EXP 105
34403: PUSH
34404: LD_EXP 105
34408: PPUSH
34409: LD_EXP 105
34413: PUSH
34414: LD_INT 1
34416: PLUS
34417: PPUSH
34418: EMPTY
34419: PPUSH
34420: CALL_OW 1
34424: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34425: LD_VAR 0 1
34429: PPUSH
34430: CALL_OW 302
34434: NOT
34435: IFFALSE 34448
// begin HackUnlinkAll ( i ) ;
34437: LD_VAR 0 1
34441: PPUSH
34442: CALL 34554 0 1
// continue ;
34446: GO 34328
// end ; HackCheckCapturedStatus ( i ) ;
34448: LD_VAR 0 1
34452: PPUSH
34453: CALL 34999 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34457: LD_ADDR_VAR 0 2
34461: PUSH
34462: LD_INT 81
34464: PUSH
34465: LD_VAR 0 1
34469: PPUSH
34470: CALL_OW 255
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 33
34481: PUSH
34482: LD_INT 3
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 91
34491: PUSH
34492: LD_VAR 0 1
34496: PUSH
34497: LD_EXP 104
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 50
34509: PUSH
34510: EMPTY
34511: LIST
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: PPUSH
34519: CALL_OW 69
34523: ST_TO_ADDR
// if not tmp then
34524: LD_VAR 0 2
34528: NOT
34529: IFFALSE 34533
// continue ;
34531: GO 34328
// HackLink ( i , tmp ) ;
34533: LD_VAR 0 1
34537: PPUSH
34538: LD_VAR 0 2
34542: PPUSH
34543: CALL 34690 0 2
// end ;
34547: GO 34328
34549: POP
34550: POP
// end ;
34551: PPOPN 2
34553: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34554: LD_INT 0
34556: PPUSH
34557: PPUSH
34558: PPUSH
// if not hack in hackTanks then
34559: LD_VAR 0 1
34563: PUSH
34564: LD_EXP 101
34568: IN
34569: NOT
34570: IFFALSE 34574
// exit ;
34572: GO 34685
// index := GetElementIndex ( hackTanks , hack ) ;
34574: LD_ADDR_VAR 0 4
34578: PUSH
34579: LD_EXP 101
34583: PPUSH
34584: LD_VAR 0 1
34588: PPUSH
34589: CALL 43333 0 2
34593: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34594: LD_EXP 102
34598: PUSH
34599: LD_VAR 0 4
34603: ARRAY
34604: IFFALSE 34685
// begin for i in hackTanksCaptured [ index ] do
34606: LD_ADDR_VAR 0 3
34610: PUSH
34611: LD_EXP 102
34615: PUSH
34616: LD_VAR 0 4
34620: ARRAY
34621: PUSH
34622: FOR_IN
34623: IFFALSE 34649
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34625: LD_VAR 0 3
34629: PUSH
34630: LD_INT 1
34632: ARRAY
34633: PPUSH
34634: LD_VAR 0 3
34638: PUSH
34639: LD_INT 2
34641: ARRAY
34642: PPUSH
34643: CALL_OW 235
34647: GO 34622
34649: POP
34650: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34651: LD_ADDR_EXP 102
34655: PUSH
34656: LD_EXP 102
34660: PPUSH
34661: LD_VAR 0 4
34665: PPUSH
34666: EMPTY
34667: PPUSH
34668: CALL_OW 1
34672: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34673: LD_VAR 0 1
34677: PPUSH
34678: LD_INT 0
34680: PPUSH
34681: CALL_OW 505
// end ; end ;
34685: LD_VAR 0 2
34689: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34690: LD_INT 0
34692: PPUSH
34693: PPUSH
34694: PPUSH
// if not hack in hackTanks or not vehicles then
34695: LD_VAR 0 1
34699: PUSH
34700: LD_EXP 101
34704: IN
34705: NOT
34706: IFTRUE 34715
34708: PUSH
34709: LD_VAR 0 2
34713: NOT
34714: OR
34715: IFFALSE 34719
// exit ;
34717: GO 34994
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34719: LD_ADDR_VAR 0 2
34723: PUSH
34724: LD_VAR 0 1
34728: PPUSH
34729: LD_VAR 0 2
34733: PPUSH
34734: LD_INT 1
34736: PPUSH
34737: LD_INT 1
34739: PPUSH
34740: CALL 43985 0 4
34744: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34745: LD_ADDR_VAR 0 5
34749: PUSH
34750: LD_EXP 101
34754: PPUSH
34755: LD_VAR 0 1
34759: PPUSH
34760: CALL 43333 0 2
34764: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34765: LD_EXP 102
34769: PUSH
34770: LD_VAR 0 5
34774: ARRAY
34775: PUSH
34776: LD_EXP 103
34780: LESS
34781: IFFALSE 34970
// begin for i := 1 to vehicles do
34783: LD_ADDR_VAR 0 4
34787: PUSH
34788: DOUBLE
34789: LD_INT 1
34791: DEC
34792: ST_TO_ADDR
34793: LD_VAR 0 2
34797: PUSH
34798: FOR_TO
34799: IFFALSE 34968
// begin if hackTanksCaptured [ index ] = hackLimit then
34801: LD_EXP 102
34805: PUSH
34806: LD_VAR 0 5
34810: ARRAY
34811: PUSH
34812: LD_EXP 103
34816: EQUAL
34817: IFFALSE 34821
// break ;
34819: GO 34968
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34821: LD_ADDR_EXP 105
34825: PUSH
34826: LD_EXP 105
34830: PPUSH
34831: LD_VAR 0 5
34835: PPUSH
34836: LD_EXP 105
34840: PUSH
34841: LD_VAR 0 5
34845: ARRAY
34846: PUSH
34847: LD_INT 1
34849: PLUS
34850: PPUSH
34851: CALL_OW 1
34855: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34856: LD_ADDR_EXP 102
34860: PUSH
34861: LD_EXP 102
34865: PPUSH
34866: LD_VAR 0 5
34870: PUSH
34871: LD_EXP 102
34875: PUSH
34876: LD_VAR 0 5
34880: ARRAY
34881: PUSH
34882: LD_INT 1
34884: PLUS
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PPUSH
34890: LD_VAR 0 2
34894: PUSH
34895: LD_VAR 0 4
34899: ARRAY
34900: PUSH
34901: LD_VAR 0 2
34905: PUSH
34906: LD_VAR 0 4
34910: ARRAY
34911: PPUSH
34912: CALL_OW 255
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PPUSH
34921: CALL 43550 0 3
34925: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34926: LD_VAR 0 2
34930: PUSH
34931: LD_VAR 0 4
34935: ARRAY
34936: PPUSH
34937: LD_VAR 0 1
34941: PPUSH
34942: CALL_OW 255
34946: PPUSH
34947: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34951: LD_VAR 0 2
34955: PUSH
34956: LD_VAR 0 4
34960: ARRAY
34961: PPUSH
34962: CALL_OW 141
// end ;
34966: GO 34798
34968: POP
34969: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34970: LD_VAR 0 1
34974: PPUSH
34975: LD_EXP 102
34979: PUSH
34980: LD_VAR 0 5
34984: ARRAY
34985: PUSH
34986: LD_INT 0
34988: PLUS
34989: PPUSH
34990: CALL_OW 505
// end ;
34994: LD_VAR 0 3
34998: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34999: LD_INT 0
35001: PPUSH
35002: PPUSH
35003: PPUSH
35004: PPUSH
// if not hack in hackTanks then
35005: LD_VAR 0 1
35009: PUSH
35010: LD_EXP 101
35014: IN
35015: NOT
35016: IFFALSE 35020
// exit ;
35018: GO 35264
// index := GetElementIndex ( hackTanks , hack ) ;
35020: LD_ADDR_VAR 0 4
35024: PUSH
35025: LD_EXP 101
35029: PPUSH
35030: LD_VAR 0 1
35034: PPUSH
35035: CALL 43333 0 2
35039: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35040: LD_ADDR_VAR 0 3
35044: PUSH
35045: DOUBLE
35046: LD_EXP 102
35050: PUSH
35051: LD_VAR 0 4
35055: ARRAY
35056: INC
35057: ST_TO_ADDR
35058: LD_INT 1
35060: PUSH
35061: FOR_DOWNTO
35062: IFFALSE 35238
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35064: LD_ADDR_VAR 0 5
35068: PUSH
35069: LD_EXP 102
35073: PUSH
35074: LD_VAR 0 4
35078: ARRAY
35079: PUSH
35080: LD_VAR 0 3
35084: ARRAY
35085: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35086: LD_VAR 0 5
35090: PUSH
35091: LD_INT 1
35093: ARRAY
35094: PPUSH
35095: CALL_OW 302
35099: NOT
35100: IFTRUE 35128
35102: PUSH
35103: LD_VAR 0 5
35107: PUSH
35108: LD_INT 1
35110: ARRAY
35111: PPUSH
35112: CALL_OW 255
35116: PUSH
35117: LD_VAR 0 1
35121: PPUSH
35122: CALL_OW 255
35126: NONEQUAL
35127: OR
35128: IFFALSE 35236
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35130: LD_VAR 0 5
35134: PUSH
35135: LD_INT 1
35137: ARRAY
35138: PPUSH
35139: CALL_OW 305
35143: IFFALSE 35171
35145: PUSH
35146: LD_VAR 0 5
35150: PUSH
35151: LD_INT 1
35153: ARRAY
35154: PPUSH
35155: CALL_OW 255
35159: PUSH
35160: LD_VAR 0 1
35164: PPUSH
35165: CALL_OW 255
35169: EQUAL
35170: AND
35171: IFFALSE 35195
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35173: LD_VAR 0 5
35177: PUSH
35178: LD_INT 1
35180: ARRAY
35181: PPUSH
35182: LD_VAR 0 5
35186: PUSH
35187: LD_INT 2
35189: ARRAY
35190: PPUSH
35191: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35195: LD_ADDR_EXP 102
35199: PUSH
35200: LD_EXP 102
35204: PPUSH
35205: LD_VAR 0 4
35209: PPUSH
35210: LD_EXP 102
35214: PUSH
35215: LD_VAR 0 4
35219: ARRAY
35220: PPUSH
35221: LD_VAR 0 3
35225: PPUSH
35226: CALL_OW 3
35230: PPUSH
35231: CALL_OW 1
35235: ST_TO_ADDR
// end ; end ;
35236: GO 35061
35238: POP
35239: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35240: LD_VAR 0 1
35244: PPUSH
35245: LD_EXP 102
35249: PUSH
35250: LD_VAR 0 4
35254: ARRAY
35255: PUSH
35256: LD_INT 0
35258: PLUS
35259: PPUSH
35260: CALL_OW 505
// end ;
35264: LD_VAR 0 2
35268: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35269: LD_INT 0
35271: PPUSH
35272: PPUSH
35273: PPUSH
35274: PPUSH
// if not hack in hackTanks then
35275: LD_VAR 0 1
35279: PUSH
35280: LD_EXP 101
35284: IN
35285: NOT
35286: IFFALSE 35290
// exit ;
35288: GO 35375
// index := GetElementIndex ( hackTanks , hack ) ;
35290: LD_ADDR_VAR 0 5
35294: PUSH
35295: LD_EXP 101
35299: PPUSH
35300: LD_VAR 0 1
35304: PPUSH
35305: CALL 43333 0 2
35309: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35310: LD_ADDR_VAR 0 4
35314: PUSH
35315: DOUBLE
35316: LD_INT 1
35318: DEC
35319: ST_TO_ADDR
35320: LD_EXP 102
35324: PUSH
35325: LD_VAR 0 5
35329: ARRAY
35330: PUSH
35331: FOR_TO
35332: IFFALSE 35373
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35334: LD_EXP 102
35338: PUSH
35339: LD_VAR 0 5
35343: ARRAY
35344: PUSH
35345: LD_VAR 0 4
35349: ARRAY
35350: PUSH
35351: LD_INT 1
35353: ARRAY
35354: PUSH
35355: LD_VAR 0 2
35359: EQUAL
35360: IFFALSE 35371
// KillUnit ( vehicle ) ;
35362: LD_VAR 0 2
35366: PPUSH
35367: CALL_OW 66
35371: GO 35331
35373: POP
35374: POP
// end ;
35375: LD_VAR 0 3
35379: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
35380: LD_EXP 106
35384: NOT
35385: IFFALSE 35518
35387: GO 35389
35389: DISABLE
35390: LD_INT 0
35392: PPUSH
// begin initMiner := true ;
35393: LD_ADDR_EXP 106
35397: PUSH
35398: LD_INT 1
35400: ST_TO_ADDR
// minersList := [ ] ;
35401: LD_ADDR_EXP 107
35405: PUSH
35406: EMPTY
35407: ST_TO_ADDR
// minerMinesList := [ ] ;
35408: LD_ADDR_EXP 108
35412: PUSH
35413: EMPTY
35414: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
35415: LD_ADDR_EXP 109
35419: PUSH
35420: LD_INT 10
35422: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35423: LD_ADDR_VAR 0 1
35427: PUSH
35428: LD_INT 34
35430: PUSH
35431: LD_INT 81
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PPUSH
35438: CALL_OW 69
35442: PUSH
35443: FOR_IN
35444: IFFALSE 35516
// begin if not i in minersList then
35446: LD_VAR 0 1
35450: PUSH
35451: LD_EXP 107
35455: IN
35456: NOT
35457: IFFALSE 35514
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35459: LD_ADDR_EXP 107
35463: PUSH
35464: LD_EXP 107
35468: PPUSH
35469: LD_EXP 107
35473: PUSH
35474: LD_INT 1
35476: PLUS
35477: PPUSH
35478: LD_VAR 0 1
35482: PPUSH
35483: CALL_OW 1
35487: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35488: LD_ADDR_EXP 108
35492: PUSH
35493: LD_EXP 108
35497: PPUSH
35498: LD_EXP 108
35502: PUSH
35503: LD_INT 1
35505: PLUS
35506: PPUSH
35507: EMPTY
35508: PPUSH
35509: CALL_OW 1
35513: ST_TO_ADDR
// end end ;
35514: GO 35443
35516: POP
35517: POP
// end ;
35518: PPOPN 1
35520: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
35521: LD_EXP 106
35525: IFFALSE 35556
35527: PUSH
35528: LD_EXP 108
35532: PPUSH
35533: CALL 40632 0 1
35537: IFTRUE 35555
35539: PUSH
35540: LD_INT 34
35542: PUSH
35543: LD_INT 81
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PPUSH
35550: CALL_OW 69
35554: OR
35555: AND
35556: IFFALSE 36076
35558: GO 35560
35560: DISABLE
35561: LD_INT 0
35563: PPUSH
35564: PPUSH
35565: PPUSH
35566: PPUSH
// begin enable ;
35567: ENABLE
// for i := minerMinesList downto 1 do
35568: LD_ADDR_VAR 0 1
35572: PUSH
35573: DOUBLE
35574: LD_EXP 108
35578: INC
35579: ST_TO_ADDR
35580: LD_INT 1
35582: PUSH
35583: FOR_DOWNTO
35584: IFFALSE 36074
// begin side := GetSide ( minersList [ i ] ) ;
35586: LD_ADDR_VAR 0 3
35590: PUSH
35591: LD_EXP 107
35595: PUSH
35596: LD_VAR 0 1
35600: ARRAY
35601: PPUSH
35602: CALL_OW 255
35606: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
35607: LD_EXP 107
35611: PUSH
35612: LD_VAR 0 1
35616: ARRAY
35617: PPUSH
35618: CALL_OW 300
35622: IFFALSE 35643
35624: PUSH
35625: LD_VAR 0 3
35629: PUSH
35630: LD_OWVAR 2
35634: PUSH
35635: LD_INT 9
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: IN
35642: AND
35643: IFFALSE 35676
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
35645: LD_EXP 107
35649: PUSH
35650: LD_VAR 0 1
35654: ARRAY
35655: PPUSH
35656: LD_EXP 108
35660: PUSH
35661: LD_VAR 0 1
35665: ARRAY
35666: PPUSH
35667: CALL 40632 0 1
35671: PPUSH
35672: CALL_OW 505
// if not minerMinesList [ i ] then
35676: LD_EXP 108
35680: PUSH
35681: LD_VAR 0 1
35685: ARRAY
35686: NOT
35687: IFFALSE 35691
// continue ;
35689: GO 35583
// for j := minerMinesList [ i ] downto 1 do
35691: LD_ADDR_VAR 0 2
35695: PUSH
35696: DOUBLE
35697: LD_EXP 108
35701: PUSH
35702: LD_VAR 0 1
35706: ARRAY
35707: INC
35708: ST_TO_ADDR
35709: LD_INT 1
35711: PUSH
35712: FOR_DOWNTO
35713: IFFALSE 36070
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
35715: LD_EXP 107
35719: PUSH
35720: LD_VAR 0 1
35724: ARRAY
35725: PPUSH
35726: CALL_OW 301
35730: IFTRUE 35750
35732: PUSH
35733: LD_EXP 107
35737: PUSH
35738: LD_VAR 0 1
35742: ARRAY
35743: PPUSH
35744: CALL_OW 305
35748: NOT
35749: OR
35750: IFFALSE 35841
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35752: LD_EXP 108
35756: PUSH
35757: LD_VAR 0 1
35761: ARRAY
35762: PUSH
35763: LD_VAR 0 2
35767: ARRAY
35768: PUSH
35769: LD_INT 1
35771: ARRAY
35772: PPUSH
35773: LD_EXP 108
35777: PUSH
35778: LD_VAR 0 1
35782: ARRAY
35783: PUSH
35784: LD_VAR 0 2
35788: ARRAY
35789: PUSH
35790: LD_INT 2
35792: ARRAY
35793: PPUSH
35794: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35798: LD_ADDR_EXP 108
35802: PUSH
35803: LD_EXP 108
35807: PPUSH
35808: LD_VAR 0 1
35812: PPUSH
35813: LD_EXP 108
35817: PUSH
35818: LD_VAR 0 1
35822: ARRAY
35823: PPUSH
35824: LD_VAR 0 2
35828: PPUSH
35829: CALL_OW 3
35833: PPUSH
35834: CALL_OW 1
35838: ST_TO_ADDR
// continue ;
35839: GO 35712
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35841: LD_ADDR_VAR 0 4
35845: PUSH
35846: LD_EXP 108
35850: PUSH
35851: LD_VAR 0 1
35855: ARRAY
35856: PUSH
35857: LD_VAR 0 2
35861: ARRAY
35862: PUSH
35863: LD_INT 1
35865: ARRAY
35866: PPUSH
35867: LD_EXP 108
35871: PUSH
35872: LD_VAR 0 1
35876: ARRAY
35877: PUSH
35878: LD_VAR 0 2
35882: ARRAY
35883: PUSH
35884: LD_INT 2
35886: ARRAY
35887: PPUSH
35888: CALL_OW 428
35892: ST_TO_ADDR
// if not tmp then
35893: LD_VAR 0 4
35897: NOT
35898: IFFALSE 35902
// continue ;
35900: GO 35712
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35902: LD_VAR 0 4
35906: PUSH
35907: LD_INT 81
35909: PUSH
35910: LD_VAR 0 3
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PPUSH
35919: CALL_OW 69
35923: IN
35924: IFFALSE 35974
35926: PUSH
35927: LD_EXP 108
35931: PUSH
35932: LD_VAR 0 1
35936: ARRAY
35937: PUSH
35938: LD_VAR 0 2
35942: ARRAY
35943: PUSH
35944: LD_INT 1
35946: ARRAY
35947: PPUSH
35948: LD_EXP 108
35952: PUSH
35953: LD_VAR 0 1
35957: ARRAY
35958: PUSH
35959: LD_VAR 0 2
35963: ARRAY
35964: PUSH
35965: LD_INT 2
35967: ARRAY
35968: PPUSH
35969: CALL_OW 458
35973: AND
35974: IFFALSE 36068
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35976: LD_EXP 108
35980: PUSH
35981: LD_VAR 0 1
35985: ARRAY
35986: PUSH
35987: LD_VAR 0 2
35991: ARRAY
35992: PUSH
35993: LD_INT 1
35995: ARRAY
35996: PPUSH
35997: LD_EXP 108
36001: PUSH
36002: LD_VAR 0 1
36006: ARRAY
36007: PUSH
36008: LD_VAR 0 2
36012: ARRAY
36013: PUSH
36014: LD_INT 2
36016: ARRAY
36017: PPUSH
36018: LD_VAR 0 3
36022: PPUSH
36023: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36027: LD_ADDR_EXP 108
36031: PUSH
36032: LD_EXP 108
36036: PPUSH
36037: LD_VAR 0 1
36041: PPUSH
36042: LD_EXP 108
36046: PUSH
36047: LD_VAR 0 1
36051: ARRAY
36052: PPUSH
36053: LD_VAR 0 2
36057: PPUSH
36058: CALL_OW 3
36062: PPUSH
36063: CALL_OW 1
36067: ST_TO_ADDR
// end ; end ;
36068: GO 35712
36070: POP
36071: POP
// end ;
36072: GO 35583
36074: POP
36075: POP
// end ;
36076: PPOPN 4
36078: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
36079: LD_INT 0
36081: PPUSH
36082: PPUSH
36083: PPUSH
36084: PPUSH
// result := false ;
36085: LD_ADDR_VAR 0 4
36089: PUSH
36090: LD_INT 0
36092: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36093: LD_VAR 0 1
36097: PPUSH
36098: CALL_OW 264
36102: PUSH
36103: LD_INT 81
36105: EQUAL
36106: NOT
36107: IFFALSE 36111
// exit ;
36109: GO 36481
// side := GetSide ( unit ) ;
36111: LD_ADDR_VAR 0 6
36115: PUSH
36116: LD_VAR 0 1
36120: PPUSH
36121: CALL_OW 255
36125: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
36126: LD_ADDR_VAR 0 5
36130: PUSH
36131: LD_EXP 107
36135: PPUSH
36136: LD_VAR 0 1
36140: PPUSH
36141: CALL 43333 0 2
36145: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36146: LD_EXP 108
36150: PUSH
36151: LD_VAR 0 5
36155: ARRAY
36156: PUSH
36157: LD_EXP 109
36161: GREATEREQUAL
36162: IFFALSE 36166
// exit ;
36164: GO 36481
// ComMoveXY ( unit , x , y ) ;
36166: LD_VAR 0 1
36170: PPUSH
36171: LD_VAR 0 2
36175: PPUSH
36176: LD_VAR 0 3
36180: PPUSH
36181: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36185: LD_INT 35
36187: PPUSH
36188: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36192: LD_VAR 0 1
36196: PPUSH
36197: LD_VAR 0 2
36201: PPUSH
36202: LD_VAR 0 3
36206: PPUSH
36207: CALL 75389 0 3
36211: NOT
36212: IFFALSE 36225
36214: PUSH
36215: LD_VAR 0 1
36219: PPUSH
36220: CALL_OW 314
36224: AND
36225: IFFALSE 36229
// exit ;
36227: GO 36481
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36229: LD_VAR 0 2
36233: PPUSH
36234: LD_VAR 0 3
36238: PPUSH
36239: CALL_OW 428
36243: PUSH
36244: LD_VAR 0 1
36248: EQUAL
36249: IFFALSE 36263
36251: PUSH
36252: LD_VAR 0 1
36256: PPUSH
36257: CALL_OW 314
36261: NOT
36262: AND
36263: IFFALSE 36185
// if MineAtPos ( x , y ) then
36265: LD_VAR 0 2
36269: PPUSH
36270: LD_VAR 0 3
36274: PPUSH
36275: CALL_OW 458
36279: IFFALSE 36283
// exit ;
36281: GO 36481
// if your_side = side then
36283: LD_OWVAR 2
36287: PUSH
36288: LD_VAR 0 6
36292: EQUAL
36293: IFFALSE 36312
// PlaySoundXY ( x , y , PlantMine ) ;
36295: LD_VAR 0 2
36299: PPUSH
36300: LD_VAR 0 3
36304: PPUSH
36305: LD_STRING PlantMine
36307: PPUSH
36308: CALL_OW 366
// repeat wait ( 1 ) ;
36312: LD_INT 1
36314: PPUSH
36315: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
36319: LD_VAR 0 2
36323: PPUSH
36324: LD_VAR 0 3
36328: PPUSH
36329: LD_VAR 0 6
36333: PPUSH
36334: LD_INT 0
36336: PPUSH
36337: CALL_OW 454
36341: IFFALSE 36312
// if MineAtPos ( x , y ) then
36343: LD_VAR 0 2
36347: PPUSH
36348: LD_VAR 0 3
36352: PPUSH
36353: CALL_OW 458
36357: IFFALSE 36473
// begin for i in minerMinesList [ index ] do
36359: LD_ADDR_VAR 0 7
36363: PUSH
36364: LD_EXP 108
36368: PUSH
36369: LD_VAR 0 5
36373: ARRAY
36374: PUSH
36375: FOR_IN
36376: IFFALSE 36418
// if i [ 1 ] = x and i [ 2 ] = y then
36378: LD_VAR 0 7
36382: PUSH
36383: LD_INT 1
36385: ARRAY
36386: PUSH
36387: LD_VAR 0 2
36391: EQUAL
36392: IFFALSE 36410
36394: PUSH
36395: LD_VAR 0 7
36399: PUSH
36400: LD_INT 2
36402: ARRAY
36403: PUSH
36404: LD_VAR 0 3
36408: EQUAL
36409: AND
36410: IFFALSE 36416
// exit ;
36412: POP
36413: POP
36414: GO 36481
36416: GO 36375
36418: POP
36419: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36420: LD_ADDR_EXP 108
36424: PUSH
36425: LD_EXP 108
36429: PPUSH
36430: LD_VAR 0 5
36434: PUSH
36435: LD_EXP 108
36439: PUSH
36440: LD_VAR 0 5
36444: ARRAY
36445: PUSH
36446: LD_INT 1
36448: PLUS
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PPUSH
36454: LD_VAR 0 2
36458: PUSH
36459: LD_VAR 0 3
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PPUSH
36468: CALL 43550 0 3
36472: ST_TO_ADDR
// end ; result := true ;
36473: LD_ADDR_VAR 0 4
36477: PUSH
36478: LD_INT 1
36480: ST_TO_ADDR
// end ;
36481: LD_VAR 0 4
36485: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36486: LD_INT 0
36488: PPUSH
36489: PPUSH
36490: PPUSH
// if not unit in minersList then
36491: LD_VAR 0 1
36495: PUSH
36496: LD_EXP 107
36500: IN
36501: NOT
36502: IFFALSE 36506
// exit ;
36504: GO 36713
// index := GetElementIndex ( minersList , unit ) ;
36506: LD_ADDR_VAR 0 6
36510: PUSH
36511: LD_EXP 107
36515: PPUSH
36516: LD_VAR 0 1
36520: PPUSH
36521: CALL 43333 0 2
36525: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36526: LD_ADDR_VAR 0 5
36530: PUSH
36531: DOUBLE
36532: LD_EXP 108
36536: PUSH
36537: LD_VAR 0 6
36541: ARRAY
36542: INC
36543: ST_TO_ADDR
36544: LD_INT 1
36546: PUSH
36547: FOR_DOWNTO
36548: IFFALSE 36711
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36550: LD_EXP 108
36554: PUSH
36555: LD_VAR 0 6
36559: ARRAY
36560: PUSH
36561: LD_VAR 0 5
36565: ARRAY
36566: PUSH
36567: LD_INT 1
36569: ARRAY
36570: PPUSH
36571: LD_EXP 108
36575: PUSH
36576: LD_VAR 0 6
36580: ARRAY
36581: PUSH
36582: LD_VAR 0 5
36586: ARRAY
36587: PUSH
36588: LD_INT 2
36590: ARRAY
36591: PPUSH
36592: LD_VAR 0 2
36596: PPUSH
36597: LD_VAR 0 3
36601: PPUSH
36602: CALL_OW 298
36606: PUSH
36607: LD_INT 6
36609: LESS
36610: IFFALSE 36709
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36612: LD_EXP 108
36616: PUSH
36617: LD_VAR 0 6
36621: ARRAY
36622: PUSH
36623: LD_VAR 0 5
36627: ARRAY
36628: PUSH
36629: LD_INT 1
36631: ARRAY
36632: PPUSH
36633: LD_EXP 108
36637: PUSH
36638: LD_VAR 0 6
36642: ARRAY
36643: PUSH
36644: LD_VAR 0 5
36648: ARRAY
36649: PUSH
36650: LD_INT 2
36652: ARRAY
36653: PPUSH
36654: LD_VAR 0 1
36658: PPUSH
36659: CALL_OW 255
36663: PPUSH
36664: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36668: LD_ADDR_EXP 108
36672: PUSH
36673: LD_EXP 108
36677: PPUSH
36678: LD_VAR 0 6
36682: PPUSH
36683: LD_EXP 108
36687: PUSH
36688: LD_VAR 0 6
36692: ARRAY
36693: PPUSH
36694: LD_VAR 0 5
36698: PPUSH
36699: CALL_OW 3
36703: PPUSH
36704: CALL_OW 1
36708: ST_TO_ADDR
// end ; end ;
36709: GO 36547
36711: POP
36712: POP
// end ;
36713: LD_VAR 0 4
36717: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36718: LD_INT 0
36720: PPUSH
36721: PPUSH
36722: PPUSH
36723: PPUSH
36724: PPUSH
36725: PPUSH
36726: PPUSH
36727: PPUSH
36728: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36729: LD_VAR 0 1
36733: PPUSH
36734: CALL_OW 264
36738: PUSH
36739: LD_INT 81
36741: EQUAL
36742: NOT
36743: IFTRUE 36758
36745: PUSH
36746: LD_VAR 0 1
36750: PUSH
36751: LD_EXP 107
36755: IN
36756: NOT
36757: OR
36758: IFFALSE 36762
// exit ;
36760: GO 37088
// index := GetElementIndex ( minersList , unit ) ;
36762: LD_ADDR_VAR 0 6
36766: PUSH
36767: LD_EXP 107
36771: PPUSH
36772: LD_VAR 0 1
36776: PPUSH
36777: CALL 43333 0 2
36781: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36782: LD_ADDR_VAR 0 8
36786: PUSH
36787: LD_EXP 109
36791: PUSH
36792: LD_EXP 108
36796: PUSH
36797: LD_VAR 0 6
36801: ARRAY
36802: MINUS
36803: ST_TO_ADDR
// if not minesFreeAmount then
36804: LD_VAR 0 8
36808: NOT
36809: IFFALSE 36813
// exit ;
36811: GO 37088
// tmp := [ ] ;
36813: LD_ADDR_VAR 0 7
36817: PUSH
36818: EMPTY
36819: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36820: LD_ADDR_VAR 0 5
36824: PUSH
36825: DOUBLE
36826: LD_INT 1
36828: DEC
36829: ST_TO_ADDR
36830: LD_VAR 0 8
36834: PUSH
36835: FOR_TO
36836: IFFALSE 37035
// begin _d := rand ( 0 , 5 ) ;
36838: LD_ADDR_VAR 0 11
36842: PUSH
36843: LD_INT 0
36845: PPUSH
36846: LD_INT 5
36848: PPUSH
36849: CALL_OW 12
36853: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36854: LD_ADDR_VAR 0 12
36858: PUSH
36859: LD_INT 2
36861: PPUSH
36862: LD_INT 6
36864: PPUSH
36865: CALL_OW 12
36869: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36870: LD_ADDR_VAR 0 9
36874: PUSH
36875: LD_VAR 0 2
36879: PPUSH
36880: LD_VAR 0 11
36884: PPUSH
36885: LD_VAR 0 12
36889: PPUSH
36890: CALL_OW 272
36894: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36895: LD_ADDR_VAR 0 10
36899: PUSH
36900: LD_VAR 0 3
36904: PPUSH
36905: LD_VAR 0 11
36909: PPUSH
36910: LD_VAR 0 12
36914: PPUSH
36915: CALL_OW 273
36919: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36920: LD_VAR 0 9
36924: PPUSH
36925: LD_VAR 0 10
36929: PPUSH
36930: CALL_OW 488
36934: IFFALSE 36958
36936: PUSH
36937: LD_VAR 0 9
36941: PUSH
36942: LD_VAR 0 10
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_VAR 0 7
36955: IN
36956: NOT
36957: AND
36958: IFFALSE 36977
36960: PUSH
36961: LD_VAR 0 9
36965: PPUSH
36966: LD_VAR 0 10
36970: PPUSH
36971: CALL_OW 458
36975: NOT
36976: AND
36977: IFFALSE 37019
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36979: LD_ADDR_VAR 0 7
36983: PUSH
36984: LD_VAR 0 7
36988: PPUSH
36989: LD_VAR 0 7
36993: PUSH
36994: LD_INT 1
36996: PLUS
36997: PPUSH
36998: LD_VAR 0 9
37002: PUSH
37003: LD_VAR 0 10
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PPUSH
37012: CALL_OW 1
37016: ST_TO_ADDR
37017: GO 37033
// i := i - 1 ;
37019: LD_ADDR_VAR 0 5
37023: PUSH
37024: LD_VAR 0 5
37028: PUSH
37029: LD_INT 1
37031: MINUS
37032: ST_TO_ADDR
// end ;
37033: GO 36835
37035: POP
37036: POP
// for i in tmp do
37037: LD_ADDR_VAR 0 5
37041: PUSH
37042: LD_VAR 0 7
37046: PUSH
37047: FOR_IN
37048: IFFALSE 37086
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37050: LD_VAR 0 1
37054: PPUSH
37055: LD_VAR 0 5
37059: PUSH
37060: LD_INT 1
37062: ARRAY
37063: PPUSH
37064: LD_VAR 0 5
37068: PUSH
37069: LD_INT 2
37071: ARRAY
37072: PPUSH
37073: CALL 36079 0 3
37077: NOT
37078: IFFALSE 37084
// exit ;
37080: POP
37081: POP
37082: GO 37088
37084: GO 37047
37086: POP
37087: POP
// end ;
37088: LD_VAR 0 4
37092: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
37093: LD_INT 0
37095: PPUSH
37096: PPUSH
37097: PPUSH
37098: PPUSH
37099: PPUSH
37100: PPUSH
37101: PPUSH
37102: PPUSH
37103: PPUSH
// if GetClass ( unit ) <> class_sniper then
37104: LD_VAR 0 1
37108: PPUSH
37109: CALL_OW 257
37113: PUSH
37114: LD_INT 5
37116: NONEQUAL
37117: IFFALSE 37121
// exit ;
37119: GO 37591
// dist := 8 ;
37121: LD_ADDR_VAR 0 5
37125: PUSH
37126: LD_INT 8
37128: ST_TO_ADDR
// viewRange := 12 ;
37129: LD_ADDR_VAR 0 8
37133: PUSH
37134: LD_INT 12
37136: ST_TO_ADDR
// side := GetSide ( unit ) ;
37137: LD_ADDR_VAR 0 6
37141: PUSH
37142: LD_VAR 0 1
37146: PPUSH
37147: CALL_OW 255
37151: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37152: LD_INT 61
37154: PPUSH
37155: LD_VAR 0 6
37159: PPUSH
37160: CALL_OW 321
37164: PUSH
37165: LD_INT 2
37167: EQUAL
37168: IFFALSE 37178
// viewRange := 16 ;
37170: LD_ADDR_VAR 0 8
37174: PUSH
37175: LD_INT 16
37177: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37178: LD_VAR 0 1
37182: PPUSH
37183: LD_VAR 0 2
37187: PPUSH
37188: LD_VAR 0 3
37192: PPUSH
37193: CALL_OW 297
37197: PUSH
37198: LD_VAR 0 5
37202: GREATER
37203: IFFALSE 37282
// begin ComMoveXY ( unit , x , y ) ;
37205: LD_VAR 0 1
37209: PPUSH
37210: LD_VAR 0 2
37214: PPUSH
37215: LD_VAR 0 3
37219: PPUSH
37220: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37224: LD_INT 35
37226: PPUSH
37227: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37231: LD_VAR 0 1
37235: PPUSH
37236: LD_VAR 0 2
37240: PPUSH
37241: LD_VAR 0 3
37245: PPUSH
37246: CALL 75389 0 3
37250: NOT
37251: IFFALSE 37255
// exit ;
37253: GO 37591
// until GetDistUnitXY ( unit , x , y ) < dist ;
37255: LD_VAR 0 1
37259: PPUSH
37260: LD_VAR 0 2
37264: PPUSH
37265: LD_VAR 0 3
37269: PPUSH
37270: CALL_OW 297
37274: PUSH
37275: LD_VAR 0 5
37279: LESS
37280: IFFALSE 37224
// end ; ComTurnXY ( unit , x , y ) ;
37282: LD_VAR 0 1
37286: PPUSH
37287: LD_VAR 0 2
37291: PPUSH
37292: LD_VAR 0 3
37296: PPUSH
37297: CALL_OW 118
// repeat if Multiplayer then
37301: LD_OWVAR 4
37305: IFFALSE 37316
// wait ( 35 ) else
37307: LD_INT 35
37309: PPUSH
37310: CALL_OW 67
37314: GO 37323
// wait ( 5 ) ;
37316: LD_INT 5
37318: PPUSH
37319: CALL_OW 67
// _d := GetDir ( unit ) ;
37323: LD_ADDR_VAR 0 11
37327: PUSH
37328: LD_VAR 0 1
37332: PPUSH
37333: CALL_OW 254
37337: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
37338: LD_ADDR_VAR 0 7
37342: PUSH
37343: LD_VAR 0 1
37347: PPUSH
37348: CALL_OW 250
37352: PPUSH
37353: LD_VAR 0 1
37357: PPUSH
37358: CALL_OW 251
37362: PPUSH
37363: LD_VAR 0 2
37367: PPUSH
37368: LD_VAR 0 3
37372: PPUSH
37373: CALL 78025 0 4
37377: ST_TO_ADDR
// until dir = _d ;
37378: LD_VAR 0 7
37382: PUSH
37383: LD_VAR 0 11
37387: EQUAL
37388: IFFALSE 37301
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
37390: LD_ADDR_VAR 0 9
37394: PUSH
37395: LD_VAR 0 1
37399: PPUSH
37400: CALL_OW 250
37404: PPUSH
37405: LD_VAR 0 7
37409: PPUSH
37410: LD_VAR 0 5
37414: PPUSH
37415: CALL_OW 272
37419: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
37420: LD_ADDR_VAR 0 10
37424: PUSH
37425: LD_VAR 0 1
37429: PPUSH
37430: CALL_OW 251
37434: PPUSH
37435: LD_VAR 0 7
37439: PPUSH
37440: LD_VAR 0 5
37444: PPUSH
37445: CALL_OW 273
37449: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37450: LD_VAR 0 9
37454: PPUSH
37455: LD_VAR 0 10
37459: PPUSH
37460: CALL_OW 488
37464: NOT
37465: IFFALSE 37469
// exit ;
37467: GO 37591
// ComAnimCustom ( unit , 1 ) ;
37469: LD_VAR 0 1
37473: PPUSH
37474: LD_INT 1
37476: PPUSH
37477: CALL_OW 592
// p := 0 ;
37481: LD_ADDR_VAR 0 12
37485: PUSH
37486: LD_INT 0
37488: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37489: LD_VAR 0 9
37493: PPUSH
37494: LD_VAR 0 10
37498: PPUSH
37499: LD_VAR 0 6
37503: PPUSH
37504: LD_VAR 0 8
37508: PPUSH
37509: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
37513: LD_INT 35
37515: PPUSH
37516: CALL_OW 67
// p := Inc ( p ) ;
37520: LD_ADDR_VAR 0 12
37524: PUSH
37525: LD_VAR 0 12
37529: PPUSH
37530: CALL 77981 0 1
37534: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
37535: LD_VAR 0 12
37539: PUSH
37540: LD_INT 3
37542: EQUAL
37543: IFTRUE 37557
37545: PUSH
37546: LD_VAR 0 1
37550: PPUSH
37551: CALL_OW 302
37555: NOT
37556: OR
37557: IFTRUE 37570
37559: PUSH
37560: LD_VAR 0 1
37564: PPUSH
37565: CALL_OW 301
37569: OR
37570: IFFALSE 37513
// RemoveSeeing ( _x , _y , side ) ;
37572: LD_VAR 0 9
37576: PPUSH
37577: LD_VAR 0 10
37581: PPUSH
37582: LD_VAR 0 6
37586: PPUSH
37587: CALL_OW 331
// end ;
37591: LD_VAR 0 4
37595: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
37596: LD_INT 0
37598: PPUSH
37599: PPUSH
37600: PPUSH
37601: PPUSH
37602: PPUSH
37603: PPUSH
37604: PPUSH
37605: PPUSH
37606: PPUSH
37607: PPUSH
37608: PPUSH
// if not unit then
37609: LD_VAR 0 1
37613: NOT
37614: IFFALSE 37618
// exit ;
37616: GO 37889
// side := GetSide ( unit ) ;
37618: LD_ADDR_VAR 0 3
37622: PUSH
37623: LD_VAR 0 1
37627: PPUSH
37628: CALL_OW 255
37632: ST_TO_ADDR
// x := GetX ( unit ) ;
37633: LD_ADDR_VAR 0 5
37637: PUSH
37638: LD_VAR 0 1
37642: PPUSH
37643: CALL_OW 250
37647: ST_TO_ADDR
// y := GetY ( unit ) ;
37648: LD_ADDR_VAR 0 6
37652: PUSH
37653: LD_VAR 0 1
37657: PPUSH
37658: CALL_OW 251
37662: ST_TO_ADDR
// r := 8 ;
37663: LD_ADDR_VAR 0 4
37667: PUSH
37668: LD_INT 8
37670: ST_TO_ADDR
// if x - r < 0 then
37671: LD_VAR 0 5
37675: PUSH
37676: LD_VAR 0 4
37680: MINUS
37681: PUSH
37682: LD_INT 0
37684: LESS
37685: IFFALSE 37697
// min_x := 0 else
37687: LD_ADDR_VAR 0 7
37691: PUSH
37692: LD_INT 0
37694: ST_TO_ADDR
37695: GO 37713
// min_x := x - r ;
37697: LD_ADDR_VAR 0 7
37701: PUSH
37702: LD_VAR 0 5
37706: PUSH
37707: LD_VAR 0 4
37711: MINUS
37712: ST_TO_ADDR
// if y - r < 0 then
37713: LD_VAR 0 6
37717: PUSH
37718: LD_VAR 0 4
37722: MINUS
37723: PUSH
37724: LD_INT 0
37726: LESS
37727: IFFALSE 37739
// min_y := 0 else
37729: LD_ADDR_VAR 0 8
37733: PUSH
37734: LD_INT 0
37736: ST_TO_ADDR
37737: GO 37755
// min_y := y - r ;
37739: LD_ADDR_VAR 0 8
37743: PUSH
37744: LD_VAR 0 6
37748: PUSH
37749: LD_VAR 0 4
37753: MINUS
37754: ST_TO_ADDR
// max_x := x + r ;
37755: LD_ADDR_VAR 0 9
37759: PUSH
37760: LD_VAR 0 5
37764: PUSH
37765: LD_VAR 0 4
37769: PLUS
37770: ST_TO_ADDR
// max_y := y + r ;
37771: LD_ADDR_VAR 0 10
37775: PUSH
37776: LD_VAR 0 6
37780: PUSH
37781: LD_VAR 0 4
37785: PLUS
37786: ST_TO_ADDR
// for _x = min_x to max_x do
37787: LD_ADDR_VAR 0 11
37791: PUSH
37792: DOUBLE
37793: LD_VAR 0 7
37797: DEC
37798: ST_TO_ADDR
37799: LD_VAR 0 9
37803: PUSH
37804: FOR_TO
37805: IFFALSE 37887
// for _y = min_y to max_y do
37807: LD_ADDR_VAR 0 12
37811: PUSH
37812: DOUBLE
37813: LD_VAR 0 8
37817: DEC
37818: ST_TO_ADDR
37819: LD_VAR 0 10
37823: PUSH
37824: FOR_TO
37825: IFFALSE 37883
// begin if not ValidHex ( _x , _y ) then
37827: LD_VAR 0 11
37831: PPUSH
37832: LD_VAR 0 12
37836: PPUSH
37837: CALL_OW 488
37841: NOT
37842: IFFALSE 37846
// continue ;
37844: GO 37824
// if MineAtPos ( _x , _y ) then
37846: LD_VAR 0 11
37850: PPUSH
37851: LD_VAR 0 12
37855: PPUSH
37856: CALL_OW 458
37860: IFFALSE 37881
// ViewMineAtPos ( _x , _y , side ) ;
37862: LD_VAR 0 11
37866: PPUSH
37867: LD_VAR 0 12
37871: PPUSH
37872: LD_VAR 0 3
37876: PPUSH
37877: CALL_OW 457
// end ;
37881: GO 37824
37883: POP
37884: POP
37885: GO 37804
37887: POP
37888: POP
// end ;
37889: LD_VAR 0 2
37893: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
37894: LD_INT 0
37896: PPUSH
37897: PPUSH
37898: PPUSH
37899: PPUSH
37900: PPUSH
37901: PPUSH
37902: PPUSH
// if not units then
37903: LD_VAR 0 1
37907: NOT
37908: IFFALSE 37912
// exit ;
37910: GO 38376
// scaners := [ ] ;
37912: LD_ADDR_VAR 0 6
37916: PUSH
37917: EMPTY
37918: ST_TO_ADDR
// for i in units do
37919: LD_ADDR_VAR 0 3
37923: PUSH
37924: LD_VAR 0 1
37928: PUSH
37929: FOR_IN
37930: IFFALSE 38087
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
37932: LD_VAR 0 3
37936: PPUSH
37937: CALL_OW 264
37941: PUSH
37942: LD_INT 11
37944: NONEQUAL
37945: IFTRUE 37959
37947: PUSH
37948: LD_VAR 0 3
37952: PPUSH
37953: CALL_OW 302
37957: NOT
37958: OR
37959: IFTRUE 37976
37961: PUSH
37962: LD_VAR 0 3
37966: PPUSH
37967: CALL_OW 110
37971: PUSH
37972: LD_INT 502
37974: EQUAL
37975: OR
37976: IFFALSE 37980
// continue ;
37978: GO 37929
// ComStop ( i ) ;
37980: LD_VAR 0 3
37984: PPUSH
37985: CALL_OW 141
// x := GetX ( i ) ;
37989: LD_ADDR_VAR 0 4
37993: PUSH
37994: LD_VAR 0 3
37998: PPUSH
37999: CALL_OW 250
38003: ST_TO_ADDR
// y := GetY ( i ) ;
38004: LD_ADDR_VAR 0 5
38008: PUSH
38009: LD_VAR 0 3
38013: PPUSH
38014: CALL_OW 251
38018: ST_TO_ADDR
// if GetSide ( i ) = your_side then
38019: LD_VAR 0 3
38023: PPUSH
38024: CALL_OW 255
38028: PUSH
38029: LD_OWVAR 2
38033: EQUAL
38034: IFFALSE 38053
// PlaySoundXY ( x , y , mineDetector ) ;
38036: LD_VAR 0 4
38040: PPUSH
38041: LD_VAR 0 5
38045: PPUSH
38046: LD_STRING mineDetector
38048: PPUSH
38049: CALL_OW 366
// scaners := Join ( scaners , i ) ;
38053: LD_ADDR_VAR 0 6
38057: PUSH
38058: LD_VAR 0 6
38062: PPUSH
38063: LD_VAR 0 3
38067: PPUSH
38068: CALL 76608 0 2
38072: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
38073: LD_VAR 0 3
38077: PPUSH
38078: LD_INT 502
38080: PPUSH
38081: CALL_OW 109
// end ;
38085: GO 37929
38087: POP
38088: POP
// if not scaners then
38089: LD_VAR 0 6
38093: NOT
38094: IFFALSE 38098
// exit ;
38096: GO 38376
// wait ( 3 ) ;
38098: LD_INT 3
38100: PPUSH
38101: CALL_OW 67
// timer := 6 ;
38105: LD_ADDR_VAR 0 7
38109: PUSH
38110: LD_INT 6
38112: ST_TO_ADDR
// repeat for i in scaners do
38113: LD_ADDR_VAR 0 3
38117: PUSH
38118: LD_VAR 0 6
38122: PUSH
38123: FOR_IN
38124: IFFALSE 38274
// begin side := GetSide ( i ) ;
38126: LD_ADDR_VAR 0 8
38130: PUSH
38131: LD_VAR 0 3
38135: PPUSH
38136: CALL_OW 255
38140: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
38141: LD_VAR 0 3
38145: PPUSH
38146: CALL_OW 302
38150: NOT
38151: IFTRUE 38164
38153: PUSH
38154: LD_VAR 0 3
38158: PPUSH
38159: CALL_OW 314
38163: OR
38164: IFTRUE 38195
38166: PUSH
38167: LD_VAR 0 3
38171: PPUSH
38172: CALL_OW 263
38176: PUSH
38177: LD_INT 1
38179: EQUAL
38180: IFFALSE 38194
38182: PUSH
38183: LD_VAR 0 3
38187: PPUSH
38188: CALL_OW 311
38192: NOT
38193: AND
38194: OR
38195: IFFALSE 38239
// begin SetUnitDisplayNumber ( i , 0 ) ;
38197: LD_VAR 0 3
38201: PPUSH
38202: LD_INT 0
38204: PPUSH
38205: CALL_OW 505
// SetTag ( i , 0 ) ;
38209: LD_VAR 0 3
38213: PPUSH
38214: LD_INT 0
38216: PPUSH
38217: CALL_OW 109
// scaners := scaners diff i ;
38221: LD_ADDR_VAR 0 6
38225: PUSH
38226: LD_VAR 0 6
38230: PUSH
38231: LD_VAR 0 3
38235: DIFF
38236: ST_TO_ADDR
// continue ;
38237: GO 38123
// end ; if side in [ your_side , 9 ] then
38239: LD_VAR 0 8
38243: PUSH
38244: LD_OWVAR 2
38248: PUSH
38249: LD_INT 9
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: IN
38256: IFFALSE 38272
// SetUnitDisplayNumber ( i , timer ) ;
38258: LD_VAR 0 3
38262: PPUSH
38263: LD_VAR 0 7
38267: PPUSH
38268: CALL_OW 505
// end ;
38272: GO 38123
38274: POP
38275: POP
// if not scaners then
38276: LD_VAR 0 6
38280: NOT
38281: IFFALSE 38285
// exit ;
38283: GO 38376
// timer := Dec ( timer ) ;
38285: LD_ADDR_VAR 0 7
38289: PUSH
38290: LD_VAR 0 7
38294: PPUSH
38295: CALL 78003 0 1
38299: ST_TO_ADDR
// wait ( 0 0$1 ) ;
38300: LD_INT 35
38302: PPUSH
38303: CALL_OW 67
// until timer = 0 ;
38307: LD_VAR 0 7
38311: PUSH
38312: LD_INT 0
38314: EQUAL
38315: IFFALSE 38113
// if not scaners then
38317: LD_VAR 0 6
38321: NOT
38322: IFFALSE 38326
// exit ;
38324: GO 38376
// for i in scaners do
38326: LD_ADDR_VAR 0 3
38330: PUSH
38331: LD_VAR 0 6
38335: PUSH
38336: FOR_IN
38337: IFFALSE 38374
// begin SetUnitDisplayNumber ( i , 0 ) ;
38339: LD_VAR 0 3
38343: PPUSH
38344: LD_INT 0
38346: PPUSH
38347: CALL_OW 505
// SetTag ( i , 0 ) ;
38351: LD_VAR 0 3
38355: PPUSH
38356: LD_INT 0
38358: PPUSH
38359: CALL_OW 109
// RevealDetectorMine ( i ) ;
38363: LD_VAR 0 3
38367: PPUSH
38368: CALL 37596 0 1
// end ;
38372: GO 38336
38374: POP
38375: POP
// end ;
38376: LD_VAR 0 2
38380: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
38381: LD_INT 0
38383: PPUSH
// if p1 = mine_detector_mode then
38384: LD_VAR 0 2
38388: PUSH
38389: LD_INT 103
38391: EQUAL
38392: IFFALSE 38403
// DetectMine ( units ) ;
38394: LD_VAR 0 1
38398: PPUSH
38399: CALL 37894 0 1
// end ; end_of_file
38403: LD_VAR 0 7
38407: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38408: LD_INT 0
38410: PPUSH
38411: PPUSH
// if exist_mode then
38412: LD_VAR 0 2
38416: IFFALSE 38462
// begin unit := CreateCharacter ( prefix & ident ) ;
38418: LD_ADDR_VAR 0 5
38422: PUSH
38423: LD_VAR 0 3
38427: PUSH
38428: LD_VAR 0 1
38432: STR
38433: PPUSH
38434: CALL_OW 34
38438: ST_TO_ADDR
// if unit then
38439: LD_VAR 0 5
38443: IFFALSE 38460
// DeleteCharacters ( prefix & ident ) ;
38445: LD_VAR 0 3
38449: PUSH
38450: LD_VAR 0 1
38454: STR
38455: PPUSH
38456: CALL_OW 40
// end else
38460: GO 38477
// unit := NewCharacter ( ident ) ;
38462: LD_ADDR_VAR 0 5
38466: PUSH
38467: LD_VAR 0 1
38471: PPUSH
38472: CALL_OW 25
38476: ST_TO_ADDR
// result := unit ;
38477: LD_ADDR_VAR 0 4
38481: PUSH
38482: LD_VAR 0 5
38486: ST_TO_ADDR
// end ;
38487: LD_VAR 0 4
38491: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
38492: LD_INT 0
38494: PPUSH
38495: PPUSH
// if exist_mode then
38496: LD_VAR 0 2
38500: IFFALSE 38525
// unit := CreateCharacter ( prefix & ident ) else
38502: LD_ADDR_VAR 0 5
38506: PUSH
38507: LD_VAR 0 3
38511: PUSH
38512: LD_VAR 0 1
38516: STR
38517: PPUSH
38518: CALL_OW 34
38522: ST_TO_ADDR
38523: GO 38540
// unit := NewCharacter ( ident ) ;
38525: LD_ADDR_VAR 0 5
38529: PUSH
38530: LD_VAR 0 1
38534: PPUSH
38535: CALL_OW 25
38539: ST_TO_ADDR
// result := unit ;
38540: LD_ADDR_VAR 0 4
38544: PUSH
38545: LD_VAR 0 5
38549: ST_TO_ADDR
// end ;
38550: LD_VAR 0 4
38554: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38555: LD_INT 0
38557: PPUSH
38558: PPUSH
// if not side or not nation then
38559: LD_VAR 0 1
38563: NOT
38564: IFTRUE 38573
38566: PUSH
38567: LD_VAR 0 2
38571: NOT
38572: OR
38573: IFFALSE 38577
// exit ;
38575: GO 39371
// case nation of nation_american :
38577: LD_VAR 0 2
38581: PUSH
38582: LD_INT 1
38584: DOUBLE
38585: EQUAL
38586: IFTRUE 38590
38588: GO 38812
38590: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
38591: LD_ADDR_VAR 0 4
38595: PUSH
38596: LD_INT 35
38598: PUSH
38599: LD_INT 45
38601: PUSH
38602: LD_INT 46
38604: PUSH
38605: LD_INT 47
38607: PUSH
38608: LD_INT 82
38610: PUSH
38611: LD_INT 83
38613: PUSH
38614: LD_INT 84
38616: PUSH
38617: LD_INT 85
38619: PUSH
38620: LD_INT 86
38622: PUSH
38623: LD_INT 1
38625: PUSH
38626: LD_INT 2
38628: PUSH
38629: LD_INT 6
38631: PUSH
38632: LD_INT 15
38634: PUSH
38635: LD_INT 16
38637: PUSH
38638: LD_INT 7
38640: PUSH
38641: LD_INT 12
38643: PUSH
38644: LD_INT 13
38646: PUSH
38647: LD_INT 10
38649: PUSH
38650: LD_INT 14
38652: PUSH
38653: LD_INT 20
38655: PUSH
38656: LD_INT 21
38658: PUSH
38659: LD_INT 22
38661: PUSH
38662: LD_INT 25
38664: PUSH
38665: LD_INT 32
38667: PUSH
38668: LD_INT 27
38670: PUSH
38671: LD_INT 36
38673: PUSH
38674: LD_INT 69
38676: PUSH
38677: LD_INT 39
38679: PUSH
38680: LD_INT 34
38682: PUSH
38683: LD_INT 40
38685: PUSH
38686: LD_INT 48
38688: PUSH
38689: LD_INT 49
38691: PUSH
38692: LD_INT 50
38694: PUSH
38695: LD_INT 51
38697: PUSH
38698: LD_INT 52
38700: PUSH
38701: LD_INT 53
38703: PUSH
38704: LD_INT 54
38706: PUSH
38707: LD_INT 55
38709: PUSH
38710: LD_INT 56
38712: PUSH
38713: LD_INT 57
38715: PUSH
38716: LD_INT 58
38718: PUSH
38719: LD_INT 59
38721: PUSH
38722: LD_INT 60
38724: PUSH
38725: LD_INT 61
38727: PUSH
38728: LD_INT 62
38730: PUSH
38731: LD_INT 80
38733: PUSH
38734: LD_INT 82
38736: PUSH
38737: LD_INT 83
38739: PUSH
38740: LD_INT 84
38742: PUSH
38743: LD_INT 85
38745: PUSH
38746: LD_INT 86
38748: PUSH
38749: LD_INT 90
38751: PUSH
38752: LD_INT 93
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: ST_TO_ADDR
38810: GO 39293
38812: LD_INT 2
38814: DOUBLE
38815: EQUAL
38816: IFTRUE 38820
38818: GO 39054
38820: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
38821: LD_ADDR_VAR 0 4
38825: PUSH
38826: LD_INT 35
38828: PUSH
38829: LD_INT 45
38831: PUSH
38832: LD_INT 46
38834: PUSH
38835: LD_INT 47
38837: PUSH
38838: LD_INT 82
38840: PUSH
38841: LD_INT 83
38843: PUSH
38844: LD_INT 84
38846: PUSH
38847: LD_INT 85
38849: PUSH
38850: LD_INT 87
38852: PUSH
38853: LD_INT 70
38855: PUSH
38856: LD_INT 1
38858: PUSH
38859: LD_INT 11
38861: PUSH
38862: LD_INT 3
38864: PUSH
38865: LD_INT 4
38867: PUSH
38868: LD_INT 5
38870: PUSH
38871: LD_INT 6
38873: PUSH
38874: LD_INT 15
38876: PUSH
38877: LD_INT 18
38879: PUSH
38880: LD_INT 7
38882: PUSH
38883: LD_INT 17
38885: PUSH
38886: LD_INT 8
38888: PUSH
38889: LD_INT 20
38891: PUSH
38892: LD_INT 21
38894: PUSH
38895: LD_INT 22
38897: PUSH
38898: LD_INT 72
38900: PUSH
38901: LD_INT 26
38903: PUSH
38904: LD_INT 69
38906: PUSH
38907: LD_INT 39
38909: PUSH
38910: LD_INT 40
38912: PUSH
38913: LD_INT 41
38915: PUSH
38916: LD_INT 42
38918: PUSH
38919: LD_INT 43
38921: PUSH
38922: LD_INT 48
38924: PUSH
38925: LD_INT 49
38927: PUSH
38928: LD_INT 50
38930: PUSH
38931: LD_INT 51
38933: PUSH
38934: LD_INT 52
38936: PUSH
38937: LD_INT 53
38939: PUSH
38940: LD_INT 54
38942: PUSH
38943: LD_INT 55
38945: PUSH
38946: LD_INT 56
38948: PUSH
38949: LD_INT 60
38951: PUSH
38952: LD_INT 61
38954: PUSH
38955: LD_INT 62
38957: PUSH
38958: LD_INT 66
38960: PUSH
38961: LD_INT 67
38963: PUSH
38964: LD_INT 68
38966: PUSH
38967: LD_INT 81
38969: PUSH
38970: LD_INT 82
38972: PUSH
38973: LD_INT 83
38975: PUSH
38976: LD_INT 84
38978: PUSH
38979: LD_INT 85
38981: PUSH
38982: LD_INT 87
38984: PUSH
38985: LD_INT 88
38987: PUSH
38988: LD_INT 92
38990: PUSH
38991: LD_INT 94
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: ST_TO_ADDR
39052: GO 39293
39054: LD_INT 3
39056: DOUBLE
39057: EQUAL
39058: IFTRUE 39062
39060: GO 39292
39062: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
39063: LD_ADDR_VAR 0 4
39067: PUSH
39068: LD_INT 46
39070: PUSH
39071: LD_INT 47
39073: PUSH
39074: LD_INT 1
39076: PUSH
39077: LD_INT 2
39079: PUSH
39080: LD_INT 82
39082: PUSH
39083: LD_INT 83
39085: PUSH
39086: LD_INT 84
39088: PUSH
39089: LD_INT 85
39091: PUSH
39092: LD_INT 86
39094: PUSH
39095: LD_INT 11
39097: PUSH
39098: LD_INT 9
39100: PUSH
39101: LD_INT 20
39103: PUSH
39104: LD_INT 19
39106: PUSH
39107: LD_INT 21
39109: PUSH
39110: LD_INT 24
39112: PUSH
39113: LD_INT 22
39115: PUSH
39116: LD_INT 25
39118: PUSH
39119: LD_INT 28
39121: PUSH
39122: LD_INT 29
39124: PUSH
39125: LD_INT 30
39127: PUSH
39128: LD_INT 31
39130: PUSH
39131: LD_INT 37
39133: PUSH
39134: LD_INT 38
39136: PUSH
39137: LD_INT 32
39139: PUSH
39140: LD_INT 27
39142: PUSH
39143: LD_INT 33
39145: PUSH
39146: LD_INT 69
39148: PUSH
39149: LD_INT 39
39151: PUSH
39152: LD_INT 34
39154: PUSH
39155: LD_INT 40
39157: PUSH
39158: LD_INT 71
39160: PUSH
39161: LD_INT 23
39163: PUSH
39164: LD_INT 44
39166: PUSH
39167: LD_INT 48
39169: PUSH
39170: LD_INT 49
39172: PUSH
39173: LD_INT 50
39175: PUSH
39176: LD_INT 51
39178: PUSH
39179: LD_INT 52
39181: PUSH
39182: LD_INT 53
39184: PUSH
39185: LD_INT 54
39187: PUSH
39188: LD_INT 55
39190: PUSH
39191: LD_INT 56
39193: PUSH
39194: LD_INT 57
39196: PUSH
39197: LD_INT 58
39199: PUSH
39200: LD_INT 59
39202: PUSH
39203: LD_INT 63
39205: PUSH
39206: LD_INT 64
39208: PUSH
39209: LD_INT 65
39211: PUSH
39212: LD_INT 82
39214: PUSH
39215: LD_INT 83
39217: PUSH
39218: LD_INT 84
39220: PUSH
39221: LD_INT 85
39223: PUSH
39224: LD_INT 86
39226: PUSH
39227: LD_INT 89
39229: PUSH
39230: LD_INT 91
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: ST_TO_ADDR
39290: GO 39293
39292: POP
// if state > - 1 and state < 3 then
39293: LD_VAR 0 3
39297: PUSH
39298: LD_INT 1
39300: NEG
39301: GREATER
39302: IFFALSE 39314
39304: PUSH
39305: LD_VAR 0 3
39309: PUSH
39310: LD_INT 3
39312: LESS
39313: AND
39314: IFFALSE 39371
// for i in result do
39316: LD_ADDR_VAR 0 5
39320: PUSH
39321: LD_VAR 0 4
39325: PUSH
39326: FOR_IN
39327: IFFALSE 39369
// if GetTech ( i , side ) <> state then
39329: LD_VAR 0 5
39333: PPUSH
39334: LD_VAR 0 1
39338: PPUSH
39339: CALL_OW 321
39343: PUSH
39344: LD_VAR 0 3
39348: NONEQUAL
39349: IFFALSE 39367
// result := result diff i ;
39351: LD_ADDR_VAR 0 4
39355: PUSH
39356: LD_VAR 0 4
39360: PUSH
39361: LD_VAR 0 5
39365: DIFF
39366: ST_TO_ADDR
39367: GO 39326
39369: POP
39370: POP
// end ;
39371: LD_VAR 0 4
39375: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39376: LD_INT 0
39378: PPUSH
39379: PPUSH
39380: PPUSH
// result := true ;
39381: LD_ADDR_VAR 0 3
39385: PUSH
39386: LD_INT 1
39388: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39389: LD_ADDR_VAR 0 5
39393: PUSH
39394: LD_VAR 0 2
39398: PPUSH
39399: CALL_OW 480
39403: ST_TO_ADDR
// if not tmp then
39404: LD_VAR 0 5
39408: NOT
39409: IFFALSE 39413
// exit ;
39411: GO 39462
// for i in tmp do
39413: LD_ADDR_VAR 0 4
39417: PUSH
39418: LD_VAR 0 5
39422: PUSH
39423: FOR_IN
39424: IFFALSE 39460
// if GetTech ( i , side ) <> state_researched then
39426: LD_VAR 0 4
39430: PPUSH
39431: LD_VAR 0 1
39435: PPUSH
39436: CALL_OW 321
39440: PUSH
39441: LD_INT 2
39443: NONEQUAL
39444: IFFALSE 39458
// begin result := false ;
39446: LD_ADDR_VAR 0 3
39450: PUSH
39451: LD_INT 0
39453: ST_TO_ADDR
// exit ;
39454: POP
39455: POP
39456: GO 39462
// end ;
39458: GO 39423
39460: POP
39461: POP
// end ;
39462: LD_VAR 0 3
39466: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39467: LD_INT 0
39469: PPUSH
39470: PPUSH
39471: PPUSH
39472: PPUSH
39473: PPUSH
39474: PPUSH
39475: PPUSH
39476: PPUSH
39477: PPUSH
39478: PPUSH
39479: PPUSH
39480: PPUSH
39481: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39482: LD_VAR 0 1
39486: NOT
39487: IFTRUE 39504
39489: PUSH
39490: LD_VAR 0 1
39494: PPUSH
39495: CALL_OW 257
39499: PUSH
39500: LD_INT 9
39502: NONEQUAL
39503: OR
39504: IFFALSE 39508
// exit ;
39506: GO 40087
// side := GetSide ( unit ) ;
39508: LD_ADDR_VAR 0 9
39512: PUSH
39513: LD_VAR 0 1
39517: PPUSH
39518: CALL_OW 255
39522: ST_TO_ADDR
// tech_space := tech_spacanom ;
39523: LD_ADDR_VAR 0 12
39527: PUSH
39528: LD_INT 29
39530: ST_TO_ADDR
// tech_time := tech_taurad ;
39531: LD_ADDR_VAR 0 13
39535: PUSH
39536: LD_INT 28
39538: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39539: LD_ADDR_VAR 0 11
39543: PUSH
39544: LD_VAR 0 1
39548: PPUSH
39549: CALL_OW 310
39553: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39554: LD_VAR 0 11
39558: PPUSH
39559: CALL_OW 247
39563: PUSH
39564: LD_INT 2
39566: EQUAL
39567: IFFALSE 39571
// exit ;
39569: GO 40087
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39571: LD_ADDR_VAR 0 8
39575: PUSH
39576: LD_INT 81
39578: PUSH
39579: LD_VAR 0 9
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 3
39590: PUSH
39591: LD_INT 21
39593: PUSH
39594: LD_INT 3
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PPUSH
39609: CALL_OW 69
39613: ST_TO_ADDR
// if not tmp then
39614: LD_VAR 0 8
39618: NOT
39619: IFFALSE 39623
// exit ;
39621: GO 40087
// if in_unit then
39623: LD_VAR 0 11
39627: IFFALSE 39651
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39629: LD_ADDR_VAR 0 10
39633: PUSH
39634: LD_VAR 0 8
39638: PPUSH
39639: LD_VAR 0 11
39643: PPUSH
39644: CALL_OW 74
39648: ST_TO_ADDR
39649: GO 39671
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39651: LD_ADDR_VAR 0 10
39655: PUSH
39656: LD_VAR 0 8
39660: PPUSH
39661: LD_VAR 0 1
39665: PPUSH
39666: CALL_OW 74
39670: ST_TO_ADDR
// if not enemy then
39671: LD_VAR 0 10
39675: NOT
39676: IFFALSE 39680
// exit ;
39678: GO 40087
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39680: LD_VAR 0 11
39684: IFFALSE 39706
39686: PUSH
39687: LD_VAR 0 11
39691: PPUSH
39692: LD_VAR 0 10
39696: PPUSH
39697: CALL_OW 296
39701: PUSH
39702: LD_INT 13
39704: GREATER
39705: AND
39706: IFTRUE 39728
39708: PUSH
39709: LD_VAR 0 1
39713: PPUSH
39714: LD_VAR 0 10
39718: PPUSH
39719: CALL_OW 296
39723: PUSH
39724: LD_INT 12
39726: GREATER
39727: OR
39728: IFFALSE 39732
// exit ;
39730: GO 40087
// missile := [ 1 ] ;
39732: LD_ADDR_VAR 0 14
39736: PUSH
39737: LD_INT 1
39739: PUSH
39740: EMPTY
39741: LIST
39742: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39743: LD_VAR 0 9
39747: PPUSH
39748: LD_VAR 0 12
39752: PPUSH
39753: CALL_OW 325
39757: IFFALSE 39786
// missile := Replace ( missile , missile + 1 , 2 ) ;
39759: LD_ADDR_VAR 0 14
39763: PUSH
39764: LD_VAR 0 14
39768: PPUSH
39769: LD_VAR 0 14
39773: PUSH
39774: LD_INT 1
39776: PLUS
39777: PPUSH
39778: LD_INT 2
39780: PPUSH
39781: CALL_OW 1
39785: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39786: LD_VAR 0 9
39790: PPUSH
39791: LD_VAR 0 13
39795: PPUSH
39796: CALL_OW 325
39800: IFFALSE 39824
39802: PUSH
39803: LD_VAR 0 10
39807: PPUSH
39808: CALL_OW 255
39812: PPUSH
39813: LD_VAR 0 13
39817: PPUSH
39818: CALL_OW 325
39822: NOT
39823: AND
39824: IFFALSE 39853
// missile := Replace ( missile , missile + 1 , 3 ) ;
39826: LD_ADDR_VAR 0 14
39830: PUSH
39831: LD_VAR 0 14
39835: PPUSH
39836: LD_VAR 0 14
39840: PUSH
39841: LD_INT 1
39843: PLUS
39844: PPUSH
39845: LD_INT 3
39847: PPUSH
39848: CALL_OW 1
39852: ST_TO_ADDR
// if missile < 2 then
39853: LD_VAR 0 14
39857: PUSH
39858: LD_INT 2
39860: LESS
39861: IFFALSE 39865
// exit ;
39863: GO 40087
// x := GetX ( enemy ) ;
39865: LD_ADDR_VAR 0 4
39869: PUSH
39870: LD_VAR 0 10
39874: PPUSH
39875: CALL_OW 250
39879: ST_TO_ADDR
// y := GetY ( enemy ) ;
39880: LD_ADDR_VAR 0 5
39884: PUSH
39885: LD_VAR 0 10
39889: PPUSH
39890: CALL_OW 251
39894: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39895: LD_ADDR_VAR 0 6
39899: PUSH
39900: LD_VAR 0 4
39904: PUSH
39905: LD_INT 1
39907: NEG
39908: PPUSH
39909: LD_INT 1
39911: PPUSH
39912: CALL_OW 12
39916: PLUS
39917: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39918: LD_ADDR_VAR 0 7
39922: PUSH
39923: LD_VAR 0 5
39927: PUSH
39928: LD_INT 1
39930: NEG
39931: PPUSH
39932: LD_INT 1
39934: PPUSH
39935: CALL_OW 12
39939: PLUS
39940: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39941: LD_VAR 0 6
39945: PPUSH
39946: LD_VAR 0 7
39950: PPUSH
39951: CALL_OW 488
39955: NOT
39956: IFFALSE 39978
// begin _x := x ;
39958: LD_ADDR_VAR 0 6
39962: PUSH
39963: LD_VAR 0 4
39967: ST_TO_ADDR
// _y := y ;
39968: LD_ADDR_VAR 0 7
39972: PUSH
39973: LD_VAR 0 5
39977: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39978: LD_ADDR_VAR 0 3
39982: PUSH
39983: LD_INT 1
39985: PPUSH
39986: LD_VAR 0 14
39990: PPUSH
39991: CALL_OW 12
39995: ST_TO_ADDR
// case i of 1 :
39996: LD_VAR 0 3
40000: PUSH
40001: LD_INT 1
40003: DOUBLE
40004: EQUAL
40005: IFTRUE 40009
40007: GO 40026
40009: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40010: LD_VAR 0 1
40014: PPUSH
40015: LD_VAR 0 10
40019: PPUSH
40020: CALL_OW 115
40024: GO 40087
40026: LD_INT 2
40028: DOUBLE
40029: EQUAL
40030: IFTRUE 40034
40032: GO 40056
40034: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40035: LD_VAR 0 1
40039: PPUSH
40040: LD_VAR 0 6
40044: PPUSH
40045: LD_VAR 0 7
40049: PPUSH
40050: CALL_OW 153
40054: GO 40087
40056: LD_INT 3
40058: DOUBLE
40059: EQUAL
40060: IFTRUE 40064
40062: GO 40086
40064: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40065: LD_VAR 0 1
40069: PPUSH
40070: LD_VAR 0 6
40074: PPUSH
40075: LD_VAR 0 7
40079: PPUSH
40080: CALL_OW 154
40084: GO 40087
40086: POP
// end ;
40087: LD_VAR 0 2
40091: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40092: LD_INT 0
40094: PPUSH
40095: PPUSH
40096: PPUSH
40097: PPUSH
40098: PPUSH
40099: PPUSH
// if not unit or not building then
40100: LD_VAR 0 1
40104: NOT
40105: IFTRUE 40114
40107: PUSH
40108: LD_VAR 0 2
40112: NOT
40113: OR
40114: IFFALSE 40118
// exit ;
40116: GO 40276
// x := GetX ( building ) ;
40118: LD_ADDR_VAR 0 5
40122: PUSH
40123: LD_VAR 0 2
40127: PPUSH
40128: CALL_OW 250
40132: ST_TO_ADDR
// y := GetY ( building ) ;
40133: LD_ADDR_VAR 0 6
40137: PUSH
40138: LD_VAR 0 2
40142: PPUSH
40143: CALL_OW 251
40147: ST_TO_ADDR
// for i := 0 to 5 do
40148: LD_ADDR_VAR 0 4
40152: PUSH
40153: DOUBLE
40154: LD_INT 0
40156: DEC
40157: ST_TO_ADDR
40158: LD_INT 5
40160: PUSH
40161: FOR_TO
40162: IFFALSE 40274
// begin _x := ShiftX ( x , i , 3 ) ;
40164: LD_ADDR_VAR 0 7
40168: PUSH
40169: LD_VAR 0 5
40173: PPUSH
40174: LD_VAR 0 4
40178: PPUSH
40179: LD_INT 3
40181: PPUSH
40182: CALL_OW 272
40186: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40187: LD_ADDR_VAR 0 8
40191: PUSH
40192: LD_VAR 0 6
40196: PPUSH
40197: LD_VAR 0 4
40201: PPUSH
40202: LD_INT 3
40204: PPUSH
40205: CALL_OW 273
40209: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40210: LD_VAR 0 7
40214: PPUSH
40215: LD_VAR 0 8
40219: PPUSH
40220: CALL_OW 488
40224: NOT
40225: IFFALSE 40229
// continue ;
40227: GO 40161
// if HexInfo ( _x , _y ) = 0 then
40229: LD_VAR 0 7
40233: PPUSH
40234: LD_VAR 0 8
40238: PPUSH
40239: CALL_OW 428
40243: PUSH
40244: LD_INT 0
40246: EQUAL
40247: IFFALSE 40272
// begin ComMoveXY ( unit , _x , _y ) ;
40249: LD_VAR 0 1
40253: PPUSH
40254: LD_VAR 0 7
40258: PPUSH
40259: LD_VAR 0 8
40263: PPUSH
40264: CALL_OW 111
// exit ;
40268: POP
40269: POP
40270: GO 40276
// end ; end ;
40272: GO 40161
40274: POP
40275: POP
// end ;
40276: LD_VAR 0 3
40280: RET
// export function ScanBase ( side , base_area ) ; begin
40281: LD_INT 0
40283: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40284: LD_ADDR_VAR 0 3
40288: PUSH
40289: LD_VAR 0 2
40293: PPUSH
40294: LD_INT 81
40296: PUSH
40297: LD_VAR 0 1
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PPUSH
40306: CALL_OW 70
40310: ST_TO_ADDR
// end ;
40311: LD_VAR 0 3
40315: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40316: LD_INT 0
40318: PPUSH
40319: PPUSH
40320: PPUSH
40321: PPUSH
// result := false ;
40322: LD_ADDR_VAR 0 2
40326: PUSH
40327: LD_INT 0
40329: ST_TO_ADDR
// side := GetSide ( unit ) ;
40330: LD_ADDR_VAR 0 3
40334: PUSH
40335: LD_VAR 0 1
40339: PPUSH
40340: CALL_OW 255
40344: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40345: LD_ADDR_VAR 0 4
40349: PUSH
40350: LD_VAR 0 1
40354: PPUSH
40355: CALL_OW 248
40359: ST_TO_ADDR
// case nat of 1 :
40360: LD_VAR 0 4
40364: PUSH
40365: LD_INT 1
40367: DOUBLE
40368: EQUAL
40369: IFTRUE 40373
40371: GO 40384
40373: POP
// tech := tech_lassight ; 2 :
40374: LD_ADDR_VAR 0 5
40378: PUSH
40379: LD_INT 12
40381: ST_TO_ADDR
40382: GO 40423
40384: LD_INT 2
40386: DOUBLE
40387: EQUAL
40388: IFTRUE 40392
40390: GO 40403
40392: POP
// tech := tech_mortar ; 3 :
40393: LD_ADDR_VAR 0 5
40397: PUSH
40398: LD_INT 41
40400: ST_TO_ADDR
40401: GO 40423
40403: LD_INT 3
40405: DOUBLE
40406: EQUAL
40407: IFTRUE 40411
40409: GO 40422
40411: POP
// tech := tech_bazooka ; end ;
40412: LD_ADDR_VAR 0 5
40416: PUSH
40417: LD_INT 44
40419: ST_TO_ADDR
40420: GO 40423
40422: POP
// if Researched ( side , tech ) then
40423: LD_VAR 0 3
40427: PPUSH
40428: LD_VAR 0 5
40432: PPUSH
40433: CALL_OW 325
40437: IFFALSE 40464
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40439: LD_ADDR_VAR 0 2
40443: PUSH
40444: LD_INT 5
40446: PUSH
40447: LD_INT 8
40449: PUSH
40450: LD_INT 9
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: LIST
40457: PUSH
40458: LD_VAR 0 4
40462: ARRAY
40463: ST_TO_ADDR
// end ;
40464: LD_VAR 0 2
40468: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40469: LD_INT 0
40471: PPUSH
40472: PPUSH
40473: PPUSH
// if not mines then
40474: LD_VAR 0 2
40478: NOT
40479: IFFALSE 40483
// exit ;
40481: GO 40627
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40483: LD_ADDR_VAR 0 5
40487: PUSH
40488: LD_INT 81
40490: PUSH
40491: LD_VAR 0 1
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 3
40502: PUSH
40503: LD_INT 21
40505: PUSH
40506: LD_INT 3
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PPUSH
40521: CALL_OW 69
40525: ST_TO_ADDR
// for i in mines do
40526: LD_ADDR_VAR 0 4
40530: PUSH
40531: LD_VAR 0 2
40535: PUSH
40536: FOR_IN
40537: IFFALSE 40625
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40539: LD_VAR 0 4
40543: PUSH
40544: LD_INT 1
40546: ARRAY
40547: PPUSH
40548: LD_VAR 0 4
40552: PUSH
40553: LD_INT 2
40555: ARRAY
40556: PPUSH
40557: CALL_OW 458
40561: NOT
40562: IFFALSE 40566
// continue ;
40564: GO 40536
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40566: LD_VAR 0 4
40570: PUSH
40571: LD_INT 1
40573: ARRAY
40574: PPUSH
40575: LD_VAR 0 4
40579: PUSH
40580: LD_INT 2
40582: ARRAY
40583: PPUSH
40584: CALL_OW 428
40588: PUSH
40589: LD_VAR 0 5
40593: IN
40594: IFFALSE 40623
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40596: LD_VAR 0 4
40600: PUSH
40601: LD_INT 1
40603: ARRAY
40604: PPUSH
40605: LD_VAR 0 4
40609: PUSH
40610: LD_INT 2
40612: ARRAY
40613: PPUSH
40614: LD_VAR 0 1
40618: PPUSH
40619: CALL_OW 456
// end ;
40623: GO 40536
40625: POP
40626: POP
// end ;
40627: LD_VAR 0 3
40631: RET
// export function Count ( array ) ; begin
40632: LD_INT 0
40634: PPUSH
// result := array + 0 ;
40635: LD_ADDR_VAR 0 2
40639: PUSH
40640: LD_VAR 0 1
40644: PUSH
40645: LD_INT 0
40647: PLUS
40648: ST_TO_ADDR
// end ;
40649: LD_VAR 0 2
40653: RET
// export function IsEmpty ( building ) ; begin
40654: LD_INT 0
40656: PPUSH
// if not building then
40657: LD_VAR 0 1
40661: NOT
40662: IFFALSE 40666
// exit ;
40664: GO 40709
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40666: LD_ADDR_VAR 0 2
40670: PUSH
40671: LD_VAR 0 1
40675: PUSH
40676: LD_INT 22
40678: PUSH
40679: LD_VAR 0 1
40683: PPUSH
40684: CALL_OW 255
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 58
40695: PUSH
40696: EMPTY
40697: LIST
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PPUSH
40703: CALL_OW 69
40707: IN
40708: ST_TO_ADDR
// end ;
40709: LD_VAR 0 2
40713: RET
// export function IsNotFull ( building ) ; var places ; begin
40714: LD_INT 0
40716: PPUSH
40717: PPUSH
// if not building then
40718: LD_VAR 0 1
40722: NOT
40723: IFFALSE 40727
// exit ;
40725: GO 40755
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
40727: LD_ADDR_VAR 0 2
40731: PUSH
40732: LD_VAR 0 1
40736: PPUSH
40737: LD_INT 3
40739: PUSH
40740: LD_INT 62
40742: PUSH
40743: EMPTY
40744: LIST
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PPUSH
40750: CALL_OW 72
40754: ST_TO_ADDR
// end ;
40755: LD_VAR 0 2
40759: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40760: LD_INT 0
40762: PPUSH
40763: PPUSH
40764: PPUSH
40765: PPUSH
// tmp := [ ] ;
40766: LD_ADDR_VAR 0 3
40770: PUSH
40771: EMPTY
40772: ST_TO_ADDR
// list := [ ] ;
40773: LD_ADDR_VAR 0 5
40777: PUSH
40778: EMPTY
40779: ST_TO_ADDR
// for i = 16 to 25 do
40780: LD_ADDR_VAR 0 4
40784: PUSH
40785: DOUBLE
40786: LD_INT 16
40788: DEC
40789: ST_TO_ADDR
40790: LD_INT 25
40792: PUSH
40793: FOR_TO
40794: IFFALSE 40867
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40796: LD_ADDR_VAR 0 3
40800: PUSH
40801: LD_VAR 0 3
40805: PUSH
40806: LD_INT 22
40808: PUSH
40809: LD_VAR 0 1
40813: PPUSH
40814: CALL_OW 255
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 91
40825: PUSH
40826: LD_VAR 0 1
40830: PUSH
40831: LD_INT 6
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 30
40841: PUSH
40842: LD_VAR 0 4
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: LIST
40855: PUSH
40856: EMPTY
40857: LIST
40858: PPUSH
40859: CALL_OW 69
40863: ADD
40864: ST_TO_ADDR
40865: GO 40793
40867: POP
40868: POP
// for i = 1 to tmp do
40869: LD_ADDR_VAR 0 4
40873: PUSH
40874: DOUBLE
40875: LD_INT 1
40877: DEC
40878: ST_TO_ADDR
40879: LD_VAR 0 3
40883: PUSH
40884: FOR_TO
40885: IFFALSE 40973
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40887: LD_ADDR_VAR 0 5
40891: PUSH
40892: LD_VAR 0 5
40896: PUSH
40897: LD_VAR 0 3
40901: PUSH
40902: LD_VAR 0 4
40906: ARRAY
40907: PPUSH
40908: CALL_OW 266
40912: PUSH
40913: LD_VAR 0 3
40917: PUSH
40918: LD_VAR 0 4
40922: ARRAY
40923: PPUSH
40924: CALL_OW 250
40928: PUSH
40929: LD_VAR 0 3
40933: PUSH
40934: LD_VAR 0 4
40938: ARRAY
40939: PPUSH
40940: CALL_OW 251
40944: PUSH
40945: LD_VAR 0 3
40949: PUSH
40950: LD_VAR 0 4
40954: ARRAY
40955: PPUSH
40956: CALL_OW 254
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: PUSH
40967: EMPTY
40968: LIST
40969: ADD
40970: ST_TO_ADDR
40971: GO 40884
40973: POP
40974: POP
// result := list ;
40975: LD_ADDR_VAR 0 2
40979: PUSH
40980: LD_VAR 0 5
40984: ST_TO_ADDR
// end ;
40985: LD_VAR 0 2
40989: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40990: LD_INT 0
40992: PPUSH
40993: PPUSH
40994: PPUSH
40995: PPUSH
40996: PPUSH
40997: PPUSH
40998: PPUSH
// if not factory then
40999: LD_VAR 0 1
41003: NOT
41004: IFFALSE 41008
// exit ;
41006: GO 41611
// if control = control_apeman then
41008: LD_VAR 0 4
41012: PUSH
41013: LD_INT 5
41015: EQUAL
41016: IFFALSE 41125
// begin tmp := UnitsInside ( factory ) ;
41018: LD_ADDR_VAR 0 8
41022: PUSH
41023: LD_VAR 0 1
41027: PPUSH
41028: CALL_OW 313
41032: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41033: LD_VAR 0 8
41037: PPUSH
41038: LD_INT 25
41040: PUSH
41041: LD_INT 12
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PPUSH
41048: CALL_OW 72
41052: NOT
41053: IFFALSE 41063
// control := control_manual ;
41055: LD_ADDR_VAR 0 4
41059: PUSH
41060: LD_INT 1
41062: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41063: LD_ADDR_VAR 0 8
41067: PUSH
41068: LD_VAR 0 1
41072: PPUSH
41073: CALL 40760 0 1
41077: ST_TO_ADDR
// if tmp then
41078: LD_VAR 0 8
41082: IFFALSE 41125
// begin for i in tmp do
41084: LD_ADDR_VAR 0 7
41088: PUSH
41089: LD_VAR 0 8
41093: PUSH
41094: FOR_IN
41095: IFFALSE 41123
// if i [ 1 ] = b_ext_radio then
41097: LD_VAR 0 7
41101: PUSH
41102: LD_INT 1
41104: ARRAY
41105: PUSH
41106: LD_INT 22
41108: EQUAL
41109: IFFALSE 41121
// begin control := control_remote ;
41111: LD_ADDR_VAR 0 4
41115: PUSH
41116: LD_INT 2
41118: ST_TO_ADDR
// break ;
41119: GO 41123
// end ;
41121: GO 41094
41123: POP
41124: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41125: LD_VAR 0 1
41129: PPUSH
41130: LD_VAR 0 2
41134: PPUSH
41135: LD_VAR 0 3
41139: PPUSH
41140: LD_VAR 0 4
41144: PPUSH
41145: LD_VAR 0 5
41149: PPUSH
41150: CALL_OW 448
41154: IFFALSE 41189
// begin result := [ chassis , engine , control , weapon ] ;
41156: LD_ADDR_VAR 0 6
41160: PUSH
41161: LD_VAR 0 2
41165: PUSH
41166: LD_VAR 0 3
41170: PUSH
41171: LD_VAR 0 4
41175: PUSH
41176: LD_VAR 0 5
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: ST_TO_ADDR
// exit ;
41187: GO 41611
// end ; _chassis := AvailableChassisList ( factory ) ;
41189: LD_ADDR_VAR 0 9
41193: PUSH
41194: LD_VAR 0 1
41198: PPUSH
41199: CALL_OW 475
41203: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41204: LD_ADDR_VAR 0 11
41208: PUSH
41209: LD_VAR 0 1
41213: PPUSH
41214: CALL_OW 476
41218: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41219: LD_ADDR_VAR 0 12
41223: PUSH
41224: LD_VAR 0 1
41228: PPUSH
41229: CALL_OW 477
41233: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41234: LD_ADDR_VAR 0 10
41238: PUSH
41239: LD_VAR 0 1
41243: PPUSH
41244: CALL_OW 478
41248: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41249: LD_VAR 0 9
41253: NOT
41254: IFTRUE 41263
41256: PUSH
41257: LD_VAR 0 11
41261: NOT
41262: OR
41263: IFTRUE 41272
41265: PUSH
41266: LD_VAR 0 12
41270: NOT
41271: OR
41272: IFTRUE 41281
41274: PUSH
41275: LD_VAR 0 10
41279: NOT
41280: OR
41281: IFFALSE 41316
// begin result := [ chassis , engine , control , weapon ] ;
41283: LD_ADDR_VAR 0 6
41287: PUSH
41288: LD_VAR 0 2
41292: PUSH
41293: LD_VAR 0 3
41297: PUSH
41298: LD_VAR 0 4
41302: PUSH
41303: LD_VAR 0 5
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: ST_TO_ADDR
// exit ;
41314: GO 41611
// end ; if not chassis in _chassis then
41316: LD_VAR 0 2
41320: PUSH
41321: LD_VAR 0 9
41325: IN
41326: NOT
41327: IFFALSE 41353
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41329: LD_ADDR_VAR 0 2
41333: PUSH
41334: LD_VAR 0 9
41338: PUSH
41339: LD_INT 1
41341: PPUSH
41342: LD_VAR 0 9
41346: PPUSH
41347: CALL_OW 12
41351: ARRAY
41352: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41353: LD_VAR 0 2
41357: PPUSH
41358: LD_VAR 0 3
41362: PPUSH
41363: CALL 41616 0 2
41367: NOT
41368: IFFALSE 41429
// repeat engine := _engine [ 1 ] ;
41370: LD_ADDR_VAR 0 3
41374: PUSH
41375: LD_VAR 0 11
41379: PUSH
41380: LD_INT 1
41382: ARRAY
41383: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41384: LD_ADDR_VAR 0 11
41388: PUSH
41389: LD_VAR 0 11
41393: PPUSH
41394: LD_INT 1
41396: PPUSH
41397: CALL_OW 3
41401: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41402: LD_VAR 0 2
41406: PPUSH
41407: LD_VAR 0 3
41411: PPUSH
41412: CALL 41616 0 2
41416: IFTRUE 41427
41418: PUSH
41419: LD_VAR 0 11
41423: PUSH
41424: EMPTY
41425: EQUAL
41426: OR
41427: IFFALSE 41370
// if not control in _control then
41429: LD_VAR 0 4
41433: PUSH
41434: LD_VAR 0 12
41438: IN
41439: NOT
41440: IFFALSE 41466
// control := _control [ rand ( 1 , _control ) ] ;
41442: LD_ADDR_VAR 0 4
41446: PUSH
41447: LD_VAR 0 12
41451: PUSH
41452: LD_INT 1
41454: PPUSH
41455: LD_VAR 0 12
41459: PPUSH
41460: CALL_OW 12
41464: ARRAY
41465: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41466: LD_VAR 0 2
41470: PPUSH
41471: LD_VAR 0 5
41475: PPUSH
41476: CALL 41838 0 2
41480: NOT
41481: IFFALSE 41542
// repeat weapon := _weapon [ 1 ] ;
41483: LD_ADDR_VAR 0 5
41487: PUSH
41488: LD_VAR 0 10
41492: PUSH
41493: LD_INT 1
41495: ARRAY
41496: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41497: LD_ADDR_VAR 0 10
41501: PUSH
41502: LD_VAR 0 10
41506: PPUSH
41507: LD_INT 1
41509: PPUSH
41510: CALL_OW 3
41514: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41515: LD_VAR 0 2
41519: PPUSH
41520: LD_VAR 0 5
41524: PPUSH
41525: CALL 41838 0 2
41529: IFTRUE 41540
41531: PUSH
41532: LD_VAR 0 10
41536: PUSH
41537: EMPTY
41538: EQUAL
41539: OR
41540: IFFALSE 41483
// result := [ ] ;
41542: LD_ADDR_VAR 0 6
41546: PUSH
41547: EMPTY
41548: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41549: LD_VAR 0 1
41553: PPUSH
41554: LD_VAR 0 2
41558: PPUSH
41559: LD_VAR 0 3
41563: PPUSH
41564: LD_VAR 0 4
41568: PPUSH
41569: LD_VAR 0 5
41573: PPUSH
41574: CALL_OW 448
41578: IFFALSE 41611
// result := [ chassis , engine , control , weapon ] ;
41580: LD_ADDR_VAR 0 6
41584: PUSH
41585: LD_VAR 0 2
41589: PUSH
41590: LD_VAR 0 3
41594: PUSH
41595: LD_VAR 0 4
41599: PUSH
41600: LD_VAR 0 5
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: ST_TO_ADDR
// end ;
41611: LD_VAR 0 6
41615: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41616: LD_INT 0
41618: PPUSH
// if not chassis or not engine then
41619: LD_VAR 0 1
41623: NOT
41624: IFTRUE 41633
41626: PUSH
41627: LD_VAR 0 2
41631: NOT
41632: OR
41633: IFFALSE 41637
// exit ;
41635: GO 41833
// case engine of engine_solar :
41637: LD_VAR 0 2
41641: PUSH
41642: LD_INT 2
41644: DOUBLE
41645: EQUAL
41646: IFTRUE 41650
41648: GO 41688
41650: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41651: LD_ADDR_VAR 0 3
41655: PUSH
41656: LD_INT 11
41658: PUSH
41659: LD_INT 12
41661: PUSH
41662: LD_INT 13
41664: PUSH
41665: LD_INT 14
41667: PUSH
41668: LD_INT 1
41670: PUSH
41671: LD_INT 2
41673: PUSH
41674: LD_INT 3
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: ST_TO_ADDR
41686: GO 41817
41688: LD_INT 1
41690: DOUBLE
41691: EQUAL
41692: IFTRUE 41696
41694: GO 41758
41696: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41697: LD_ADDR_VAR 0 3
41701: PUSH
41702: LD_INT 11
41704: PUSH
41705: LD_INT 12
41707: PUSH
41708: LD_INT 13
41710: PUSH
41711: LD_INT 14
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: LD_INT 2
41719: PUSH
41720: LD_INT 3
41722: PUSH
41723: LD_INT 4
41725: PUSH
41726: LD_INT 5
41728: PUSH
41729: LD_INT 21
41731: PUSH
41732: LD_INT 23
41734: PUSH
41735: LD_INT 22
41737: PUSH
41738: LD_INT 24
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: ST_TO_ADDR
41756: GO 41817
41758: LD_INT 3
41760: DOUBLE
41761: EQUAL
41762: IFTRUE 41766
41764: GO 41816
41766: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41767: LD_ADDR_VAR 0 3
41771: PUSH
41772: LD_INT 13
41774: PUSH
41775: LD_INT 14
41777: PUSH
41778: LD_INT 2
41780: PUSH
41781: LD_INT 3
41783: PUSH
41784: LD_INT 4
41786: PUSH
41787: LD_INT 5
41789: PUSH
41790: LD_INT 21
41792: PUSH
41793: LD_INT 22
41795: PUSH
41796: LD_INT 23
41798: PUSH
41799: LD_INT 24
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: ST_TO_ADDR
41814: GO 41817
41816: POP
// result := ( chassis in result ) ;
41817: LD_ADDR_VAR 0 3
41821: PUSH
41822: LD_VAR 0 1
41826: PUSH
41827: LD_VAR 0 3
41831: IN
41832: ST_TO_ADDR
// end ;
41833: LD_VAR 0 3
41837: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41838: LD_INT 0
41840: PPUSH
// if not chassis or not weapon then
41841: LD_VAR 0 1
41845: NOT
41846: IFTRUE 41855
41848: PUSH
41849: LD_VAR 0 2
41853: NOT
41854: OR
41855: IFFALSE 41859
// exit ;
41857: GO 42953
// case weapon of us_machine_gun :
41859: LD_VAR 0 2
41863: PUSH
41864: LD_INT 2
41866: DOUBLE
41867: EQUAL
41868: IFTRUE 41872
41870: GO 41902
41872: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41873: LD_ADDR_VAR 0 3
41877: PUSH
41878: LD_INT 1
41880: PUSH
41881: LD_INT 2
41883: PUSH
41884: LD_INT 3
41886: PUSH
41887: LD_INT 4
41889: PUSH
41890: LD_INT 5
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: ST_TO_ADDR
41900: GO 42937
41902: LD_INT 3
41904: DOUBLE
41905: EQUAL
41906: IFTRUE 41910
41908: GO 41940
41910: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41911: LD_ADDR_VAR 0 3
41915: PUSH
41916: LD_INT 1
41918: PUSH
41919: LD_INT 2
41921: PUSH
41922: LD_INT 3
41924: PUSH
41925: LD_INT 4
41927: PUSH
41928: LD_INT 5
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: ST_TO_ADDR
41938: GO 42937
41940: LD_INT 11
41942: DOUBLE
41943: EQUAL
41944: IFTRUE 41948
41946: GO 41978
41948: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41949: LD_ADDR_VAR 0 3
41953: PUSH
41954: LD_INT 1
41956: PUSH
41957: LD_INT 2
41959: PUSH
41960: LD_INT 3
41962: PUSH
41963: LD_INT 4
41965: PUSH
41966: LD_INT 5
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: ST_TO_ADDR
41976: GO 42937
41978: LD_INT 4
41980: DOUBLE
41981: EQUAL
41982: IFTRUE 41986
41984: GO 42012
41986: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41987: LD_ADDR_VAR 0 3
41991: PUSH
41992: LD_INT 2
41994: PUSH
41995: LD_INT 3
41997: PUSH
41998: LD_INT 4
42000: PUSH
42001: LD_INT 5
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: ST_TO_ADDR
42010: GO 42937
42012: LD_INT 5
42014: DOUBLE
42015: EQUAL
42016: IFTRUE 42020
42018: GO 42046
42020: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42021: LD_ADDR_VAR 0 3
42025: PUSH
42026: LD_INT 2
42028: PUSH
42029: LD_INT 3
42031: PUSH
42032: LD_INT 4
42034: PUSH
42035: LD_INT 5
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: ST_TO_ADDR
42044: GO 42937
42046: LD_INT 9
42048: DOUBLE
42049: EQUAL
42050: IFTRUE 42054
42052: GO 42080
42054: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42055: LD_ADDR_VAR 0 3
42059: PUSH
42060: LD_INT 2
42062: PUSH
42063: LD_INT 3
42065: PUSH
42066: LD_INT 4
42068: PUSH
42069: LD_INT 5
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: ST_TO_ADDR
42078: GO 42937
42080: LD_INT 7
42082: DOUBLE
42083: EQUAL
42084: IFTRUE 42088
42086: GO 42114
42088: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42089: LD_ADDR_VAR 0 3
42093: PUSH
42094: LD_INT 2
42096: PUSH
42097: LD_INT 3
42099: PUSH
42100: LD_INT 4
42102: PUSH
42103: LD_INT 5
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: ST_TO_ADDR
42112: GO 42937
42114: LD_INT 12
42116: DOUBLE
42117: EQUAL
42118: IFTRUE 42122
42120: GO 42148
42122: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42123: LD_ADDR_VAR 0 3
42127: PUSH
42128: LD_INT 2
42130: PUSH
42131: LD_INT 3
42133: PUSH
42134: LD_INT 4
42136: PUSH
42137: LD_INT 5
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: ST_TO_ADDR
42146: GO 42937
42148: LD_INT 13
42150: DOUBLE
42151: EQUAL
42152: IFTRUE 42156
42154: GO 42182
42156: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42157: LD_ADDR_VAR 0 3
42161: PUSH
42162: LD_INT 2
42164: PUSH
42165: LD_INT 3
42167: PUSH
42168: LD_INT 4
42170: PUSH
42171: LD_INT 5
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: ST_TO_ADDR
42180: GO 42937
42182: LD_INT 14
42184: DOUBLE
42185: EQUAL
42186: IFTRUE 42190
42188: GO 42208
42190: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42191: LD_ADDR_VAR 0 3
42195: PUSH
42196: LD_INT 4
42198: PUSH
42199: LD_INT 5
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: ST_TO_ADDR
42206: GO 42937
42208: LD_INT 6
42210: DOUBLE
42211: EQUAL
42212: IFTRUE 42216
42214: GO 42234
42216: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42217: LD_ADDR_VAR 0 3
42221: PUSH
42222: LD_INT 4
42224: PUSH
42225: LD_INT 5
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: ST_TO_ADDR
42232: GO 42937
42234: LD_INT 10
42236: DOUBLE
42237: EQUAL
42238: IFTRUE 42242
42240: GO 42260
42242: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42243: LD_ADDR_VAR 0 3
42247: PUSH
42248: LD_INT 4
42250: PUSH
42251: LD_INT 5
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: ST_TO_ADDR
42258: GO 42937
42260: LD_INT 22
42262: DOUBLE
42263: EQUAL
42264: IFTRUE 42268
42266: GO 42294
42268: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42269: LD_ADDR_VAR 0 3
42273: PUSH
42274: LD_INT 11
42276: PUSH
42277: LD_INT 12
42279: PUSH
42280: LD_INT 13
42282: PUSH
42283: LD_INT 14
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: ST_TO_ADDR
42292: GO 42937
42294: LD_INT 23
42296: DOUBLE
42297: EQUAL
42298: IFTRUE 42302
42300: GO 42328
42302: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42303: LD_ADDR_VAR 0 3
42307: PUSH
42308: LD_INT 11
42310: PUSH
42311: LD_INT 12
42313: PUSH
42314: LD_INT 13
42316: PUSH
42317: LD_INT 14
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: ST_TO_ADDR
42326: GO 42937
42328: LD_INT 24
42330: DOUBLE
42331: EQUAL
42332: IFTRUE 42336
42334: GO 42362
42336: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42337: LD_ADDR_VAR 0 3
42341: PUSH
42342: LD_INT 11
42344: PUSH
42345: LD_INT 12
42347: PUSH
42348: LD_INT 13
42350: PUSH
42351: LD_INT 14
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: ST_TO_ADDR
42360: GO 42937
42362: LD_INT 30
42364: DOUBLE
42365: EQUAL
42366: IFTRUE 42370
42368: GO 42396
42370: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42371: LD_ADDR_VAR 0 3
42375: PUSH
42376: LD_INT 11
42378: PUSH
42379: LD_INT 12
42381: PUSH
42382: LD_INT 13
42384: PUSH
42385: LD_INT 14
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: ST_TO_ADDR
42394: GO 42937
42396: LD_INT 25
42398: DOUBLE
42399: EQUAL
42400: IFTRUE 42404
42402: GO 42422
42404: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42405: LD_ADDR_VAR 0 3
42409: PUSH
42410: LD_INT 13
42412: PUSH
42413: LD_INT 14
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: ST_TO_ADDR
42420: GO 42937
42422: LD_INT 27
42424: DOUBLE
42425: EQUAL
42426: IFTRUE 42430
42428: GO 42448
42430: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42431: LD_ADDR_VAR 0 3
42435: PUSH
42436: LD_INT 13
42438: PUSH
42439: LD_INT 14
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: ST_TO_ADDR
42446: GO 42937
42448: LD_INT 92
42450: DOUBLE
42451: EQUAL
42452: IFTRUE 42456
42454: GO 42482
42456: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42457: LD_ADDR_VAR 0 3
42461: PUSH
42462: LD_INT 11
42464: PUSH
42465: LD_INT 12
42467: PUSH
42468: LD_INT 13
42470: PUSH
42471: LD_INT 14
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: ST_TO_ADDR
42480: GO 42937
42482: LD_INT 28
42484: DOUBLE
42485: EQUAL
42486: IFTRUE 42490
42488: GO 42508
42490: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42491: LD_ADDR_VAR 0 3
42495: PUSH
42496: LD_INT 13
42498: PUSH
42499: LD_INT 14
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: ST_TO_ADDR
42506: GO 42937
42508: LD_INT 29
42510: DOUBLE
42511: EQUAL
42512: IFTRUE 42516
42514: GO 42534
42516: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42517: LD_ADDR_VAR 0 3
42521: PUSH
42522: LD_INT 13
42524: PUSH
42525: LD_INT 14
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: ST_TO_ADDR
42532: GO 42937
42534: LD_INT 31
42536: DOUBLE
42537: EQUAL
42538: IFTRUE 42542
42540: GO 42560
42542: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42543: LD_ADDR_VAR 0 3
42547: PUSH
42548: LD_INT 13
42550: PUSH
42551: LD_INT 14
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: ST_TO_ADDR
42558: GO 42937
42560: LD_INT 26
42562: DOUBLE
42563: EQUAL
42564: IFTRUE 42568
42566: GO 42586
42568: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42569: LD_ADDR_VAR 0 3
42573: PUSH
42574: LD_INT 13
42576: PUSH
42577: LD_INT 14
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: ST_TO_ADDR
42584: GO 42937
42586: LD_INT 42
42588: DOUBLE
42589: EQUAL
42590: IFTRUE 42594
42592: GO 42620
42594: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42595: LD_ADDR_VAR 0 3
42599: PUSH
42600: LD_INT 21
42602: PUSH
42603: LD_INT 22
42605: PUSH
42606: LD_INT 23
42608: PUSH
42609: LD_INT 24
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: ST_TO_ADDR
42618: GO 42937
42620: LD_INT 43
42622: DOUBLE
42623: EQUAL
42624: IFTRUE 42628
42626: GO 42654
42628: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42629: LD_ADDR_VAR 0 3
42633: PUSH
42634: LD_INT 21
42636: PUSH
42637: LD_INT 22
42639: PUSH
42640: LD_INT 23
42642: PUSH
42643: LD_INT 24
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: ST_TO_ADDR
42652: GO 42937
42654: LD_INT 44
42656: DOUBLE
42657: EQUAL
42658: IFTRUE 42662
42660: GO 42688
42662: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42663: LD_ADDR_VAR 0 3
42667: PUSH
42668: LD_INT 21
42670: PUSH
42671: LD_INT 22
42673: PUSH
42674: LD_INT 23
42676: PUSH
42677: LD_INT 24
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: ST_TO_ADDR
42686: GO 42937
42688: LD_INT 45
42690: DOUBLE
42691: EQUAL
42692: IFTRUE 42696
42694: GO 42722
42696: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42697: LD_ADDR_VAR 0 3
42701: PUSH
42702: LD_INT 21
42704: PUSH
42705: LD_INT 22
42707: PUSH
42708: LD_INT 23
42710: PUSH
42711: LD_INT 24
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: ST_TO_ADDR
42720: GO 42937
42722: LD_INT 49
42724: DOUBLE
42725: EQUAL
42726: IFTRUE 42730
42728: GO 42756
42730: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42731: LD_ADDR_VAR 0 3
42735: PUSH
42736: LD_INT 21
42738: PUSH
42739: LD_INT 22
42741: PUSH
42742: LD_INT 23
42744: PUSH
42745: LD_INT 24
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: ST_TO_ADDR
42754: GO 42937
42756: LD_INT 51
42758: DOUBLE
42759: EQUAL
42760: IFTRUE 42764
42762: GO 42790
42764: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42765: LD_ADDR_VAR 0 3
42769: PUSH
42770: LD_INT 21
42772: PUSH
42773: LD_INT 22
42775: PUSH
42776: LD_INT 23
42778: PUSH
42779: LD_INT 24
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: ST_TO_ADDR
42788: GO 42937
42790: LD_INT 52
42792: DOUBLE
42793: EQUAL
42794: IFTRUE 42798
42796: GO 42824
42798: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42799: LD_ADDR_VAR 0 3
42803: PUSH
42804: LD_INT 21
42806: PUSH
42807: LD_INT 22
42809: PUSH
42810: LD_INT 23
42812: PUSH
42813: LD_INT 24
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: ST_TO_ADDR
42822: GO 42937
42824: LD_INT 53
42826: DOUBLE
42827: EQUAL
42828: IFTRUE 42832
42830: GO 42850
42832: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42833: LD_ADDR_VAR 0 3
42837: PUSH
42838: LD_INT 23
42840: PUSH
42841: LD_INT 24
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: ST_TO_ADDR
42848: GO 42937
42850: LD_INT 46
42852: DOUBLE
42853: EQUAL
42854: IFTRUE 42858
42856: GO 42876
42858: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42859: LD_ADDR_VAR 0 3
42863: PUSH
42864: LD_INT 23
42866: PUSH
42867: LD_INT 24
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: ST_TO_ADDR
42874: GO 42937
42876: LD_INT 47
42878: DOUBLE
42879: EQUAL
42880: IFTRUE 42884
42882: GO 42902
42884: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
42885: LD_ADDR_VAR 0 3
42889: PUSH
42890: LD_INT 23
42892: PUSH
42893: LD_INT 24
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: ST_TO_ADDR
42900: GO 42937
42902: LD_INT 98
42904: DOUBLE
42905: EQUAL
42906: IFTRUE 42910
42908: GO 42936
42910: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42911: LD_ADDR_VAR 0 3
42915: PUSH
42916: LD_INT 21
42918: PUSH
42919: LD_INT 22
42921: PUSH
42922: LD_INT 23
42924: PUSH
42925: LD_INT 24
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: ST_TO_ADDR
42934: GO 42937
42936: POP
// result := ( chassis in result ) ;
42937: LD_ADDR_VAR 0 3
42941: PUSH
42942: LD_VAR 0 1
42946: PUSH
42947: LD_VAR 0 3
42951: IN
42952: ST_TO_ADDR
// end ;
42953: LD_VAR 0 3
42957: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42958: LD_INT 0
42960: PPUSH
42961: PPUSH
42962: PPUSH
42963: PPUSH
42964: PPUSH
42965: PPUSH
42966: PPUSH
// result := array ;
42967: LD_ADDR_VAR 0 5
42971: PUSH
42972: LD_VAR 0 1
42976: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42977: LD_VAR 0 1
42981: NOT
42982: IFTRUE 42991
42984: PUSH
42985: LD_VAR 0 2
42989: NOT
42990: OR
42991: IFTRUE 43000
42993: PUSH
42994: LD_VAR 0 3
42998: NOT
42999: OR
43000: IFTRUE 43014
43002: PUSH
43003: LD_VAR 0 2
43007: PUSH
43008: LD_VAR 0 1
43012: GREATER
43013: OR
43014: IFTRUE 43028
43016: PUSH
43017: LD_VAR 0 3
43021: PUSH
43022: LD_VAR 0 1
43026: GREATER
43027: OR
43028: IFFALSE 43032
// exit ;
43030: GO 43328
// if direction then
43032: LD_VAR 0 4
43036: IFFALSE 43100
// begin d := 1 ;
43038: LD_ADDR_VAR 0 9
43042: PUSH
43043: LD_INT 1
43045: ST_TO_ADDR
// if i_from > i_to then
43046: LD_VAR 0 2
43050: PUSH
43051: LD_VAR 0 3
43055: GREATER
43056: IFFALSE 43082
// length := ( array - i_from ) + i_to else
43058: LD_ADDR_VAR 0 11
43062: PUSH
43063: LD_VAR 0 1
43067: PUSH
43068: LD_VAR 0 2
43072: MINUS
43073: PUSH
43074: LD_VAR 0 3
43078: PLUS
43079: ST_TO_ADDR
43080: GO 43098
// length := i_to - i_from ;
43082: LD_ADDR_VAR 0 11
43086: PUSH
43087: LD_VAR 0 3
43091: PUSH
43092: LD_VAR 0 2
43096: MINUS
43097: ST_TO_ADDR
// end else
43098: GO 43161
// begin d := - 1 ;
43100: LD_ADDR_VAR 0 9
43104: PUSH
43105: LD_INT 1
43107: NEG
43108: ST_TO_ADDR
// if i_from > i_to then
43109: LD_VAR 0 2
43113: PUSH
43114: LD_VAR 0 3
43118: GREATER
43119: IFFALSE 43139
// length := i_from - i_to else
43121: LD_ADDR_VAR 0 11
43125: PUSH
43126: LD_VAR 0 2
43130: PUSH
43131: LD_VAR 0 3
43135: MINUS
43136: ST_TO_ADDR
43137: GO 43161
// length := ( array - i_to ) + i_from ;
43139: LD_ADDR_VAR 0 11
43143: PUSH
43144: LD_VAR 0 1
43148: PUSH
43149: LD_VAR 0 3
43153: MINUS
43154: PUSH
43155: LD_VAR 0 2
43159: PLUS
43160: ST_TO_ADDR
// end ; if not length then
43161: LD_VAR 0 11
43165: NOT
43166: IFFALSE 43170
// exit ;
43168: GO 43328
// tmp := array ;
43170: LD_ADDR_VAR 0 10
43174: PUSH
43175: LD_VAR 0 1
43179: ST_TO_ADDR
// for i = 1 to length do
43180: LD_ADDR_VAR 0 6
43184: PUSH
43185: DOUBLE
43186: LD_INT 1
43188: DEC
43189: ST_TO_ADDR
43190: LD_VAR 0 11
43194: PUSH
43195: FOR_TO
43196: IFFALSE 43316
// begin for j = 1 to array do
43198: LD_ADDR_VAR 0 7
43202: PUSH
43203: DOUBLE
43204: LD_INT 1
43206: DEC
43207: ST_TO_ADDR
43208: LD_VAR 0 1
43212: PUSH
43213: FOR_TO
43214: IFFALSE 43302
// begin k := j + d ;
43216: LD_ADDR_VAR 0 8
43220: PUSH
43221: LD_VAR 0 7
43225: PUSH
43226: LD_VAR 0 9
43230: PLUS
43231: ST_TO_ADDR
// if k > array then
43232: LD_VAR 0 8
43236: PUSH
43237: LD_VAR 0 1
43241: GREATER
43242: IFFALSE 43252
// k := 1 ;
43244: LD_ADDR_VAR 0 8
43248: PUSH
43249: LD_INT 1
43251: ST_TO_ADDR
// if not k then
43252: LD_VAR 0 8
43256: NOT
43257: IFFALSE 43269
// k := array ;
43259: LD_ADDR_VAR 0 8
43263: PUSH
43264: LD_VAR 0 1
43268: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43269: LD_ADDR_VAR 0 10
43273: PUSH
43274: LD_VAR 0 10
43278: PPUSH
43279: LD_VAR 0 8
43283: PPUSH
43284: LD_VAR 0 1
43288: PUSH
43289: LD_VAR 0 7
43293: ARRAY
43294: PPUSH
43295: CALL_OW 1
43299: ST_TO_ADDR
// end ;
43300: GO 43213
43302: POP
43303: POP
// array := tmp ;
43304: LD_ADDR_VAR 0 1
43308: PUSH
43309: LD_VAR 0 10
43313: ST_TO_ADDR
// end ;
43314: GO 43195
43316: POP
43317: POP
// result := array ;
43318: LD_ADDR_VAR 0 5
43322: PUSH
43323: LD_VAR 0 1
43327: ST_TO_ADDR
// end ;
43328: LD_VAR 0 5
43332: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43333: LD_INT 0
43335: PPUSH
43336: PPUSH
// result := 0 ;
43337: LD_ADDR_VAR 0 3
43341: PUSH
43342: LD_INT 0
43344: ST_TO_ADDR
// if not array or not value in array then
43345: LD_VAR 0 1
43349: NOT
43350: IFTRUE 43365
43352: PUSH
43353: LD_VAR 0 2
43357: PUSH
43358: LD_VAR 0 1
43362: IN
43363: NOT
43364: OR
43365: IFFALSE 43369
// exit ;
43367: GO 43423
// for i = 1 to array do
43369: LD_ADDR_VAR 0 4
43373: PUSH
43374: DOUBLE
43375: LD_INT 1
43377: DEC
43378: ST_TO_ADDR
43379: LD_VAR 0 1
43383: PUSH
43384: FOR_TO
43385: IFFALSE 43421
// if value = array [ i ] then
43387: LD_VAR 0 2
43391: PUSH
43392: LD_VAR 0 1
43396: PUSH
43397: LD_VAR 0 4
43401: ARRAY
43402: EQUAL
43403: IFFALSE 43419
// begin result := i ;
43405: LD_ADDR_VAR 0 3
43409: PUSH
43410: LD_VAR 0 4
43414: ST_TO_ADDR
// exit ;
43415: POP
43416: POP
43417: GO 43423
// end ;
43419: GO 43384
43421: POP
43422: POP
// end ;
43423: LD_VAR 0 3
43427: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43428: LD_INT 0
43430: PPUSH
// vc_chassis := chassis ;
43431: LD_ADDR_OWVAR 37
43435: PUSH
43436: LD_VAR 0 1
43440: ST_TO_ADDR
// vc_engine := engine ;
43441: LD_ADDR_OWVAR 39
43445: PUSH
43446: LD_VAR 0 2
43450: ST_TO_ADDR
// vc_control := control ;
43451: LD_ADDR_OWVAR 38
43455: PUSH
43456: LD_VAR 0 3
43460: ST_TO_ADDR
// vc_weapon := weapon ;
43461: LD_ADDR_OWVAR 40
43465: PUSH
43466: LD_VAR 0 4
43470: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43471: LD_ADDR_OWVAR 41
43475: PUSH
43476: LD_VAR 0 5
43480: ST_TO_ADDR
// end ;
43481: LD_VAR 0 6
43485: RET
// export function WantPlant ( unit ) ; var task ; begin
43486: LD_INT 0
43488: PPUSH
43489: PPUSH
// result := false ;
43490: LD_ADDR_VAR 0 2
43494: PUSH
43495: LD_INT 0
43497: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43498: LD_ADDR_VAR 0 3
43502: PUSH
43503: LD_VAR 0 1
43507: PPUSH
43508: CALL_OW 437
43512: ST_TO_ADDR
// if task then
43513: LD_VAR 0 3
43517: IFFALSE 43545
// if task [ 1 ] [ 1 ] = p then
43519: LD_VAR 0 3
43523: PUSH
43524: LD_INT 1
43526: ARRAY
43527: PUSH
43528: LD_INT 1
43530: ARRAY
43531: PUSH
43532: LD_STRING p
43534: EQUAL
43535: IFFALSE 43545
// result := true ;
43537: LD_ADDR_VAR 0 2
43541: PUSH
43542: LD_INT 1
43544: ST_TO_ADDR
// end ;
43545: LD_VAR 0 2
43549: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43550: LD_INT 0
43552: PPUSH
43553: PPUSH
43554: PPUSH
43555: PPUSH
// if pos < 1 then
43556: LD_VAR 0 2
43560: PUSH
43561: LD_INT 1
43563: LESS
43564: IFFALSE 43568
// exit ;
43566: GO 43871
// if pos = 1 then
43568: LD_VAR 0 2
43572: PUSH
43573: LD_INT 1
43575: EQUAL
43576: IFFALSE 43609
// result := Replace ( arr , pos [ 1 ] , value ) else
43578: LD_ADDR_VAR 0 4
43582: PUSH
43583: LD_VAR 0 1
43587: PPUSH
43588: LD_VAR 0 2
43592: PUSH
43593: LD_INT 1
43595: ARRAY
43596: PPUSH
43597: LD_VAR 0 3
43601: PPUSH
43602: CALL_OW 1
43606: ST_TO_ADDR
43607: GO 43871
// begin tmp := arr ;
43609: LD_ADDR_VAR 0 6
43613: PUSH
43614: LD_VAR 0 1
43618: ST_TO_ADDR
// s_arr := [ tmp ] ;
43619: LD_ADDR_VAR 0 7
43623: PUSH
43624: LD_VAR 0 6
43628: PUSH
43629: EMPTY
43630: LIST
43631: ST_TO_ADDR
// for i = 1 to pos - 1 do
43632: LD_ADDR_VAR 0 5
43636: PUSH
43637: DOUBLE
43638: LD_INT 1
43640: DEC
43641: ST_TO_ADDR
43642: LD_VAR 0 2
43646: PUSH
43647: LD_INT 1
43649: MINUS
43650: PUSH
43651: FOR_TO
43652: IFFALSE 43697
// begin tmp := tmp [ pos [ i ] ] ;
43654: LD_ADDR_VAR 0 6
43658: PUSH
43659: LD_VAR 0 6
43663: PUSH
43664: LD_VAR 0 2
43668: PUSH
43669: LD_VAR 0 5
43673: ARRAY
43674: ARRAY
43675: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43676: LD_ADDR_VAR 0 7
43680: PUSH
43681: LD_VAR 0 7
43685: PUSH
43686: LD_VAR 0 6
43690: PUSH
43691: EMPTY
43692: LIST
43693: ADD
43694: ST_TO_ADDR
// end ;
43695: GO 43651
43697: POP
43698: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43699: LD_ADDR_VAR 0 6
43703: PUSH
43704: LD_VAR 0 6
43708: PPUSH
43709: LD_VAR 0 2
43713: PUSH
43714: LD_VAR 0 2
43718: ARRAY
43719: PPUSH
43720: LD_VAR 0 3
43724: PPUSH
43725: CALL_OW 1
43729: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43730: LD_ADDR_VAR 0 7
43734: PUSH
43735: LD_VAR 0 7
43739: PPUSH
43740: LD_VAR 0 7
43744: PPUSH
43745: LD_VAR 0 6
43749: PPUSH
43750: CALL_OW 1
43754: ST_TO_ADDR
// for i = s_arr downto 2 do
43755: LD_ADDR_VAR 0 5
43759: PUSH
43760: DOUBLE
43761: LD_VAR 0 7
43765: INC
43766: ST_TO_ADDR
43767: LD_INT 2
43769: PUSH
43770: FOR_DOWNTO
43771: IFFALSE 43855
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43773: LD_ADDR_VAR 0 6
43777: PUSH
43778: LD_VAR 0 7
43782: PUSH
43783: LD_VAR 0 5
43787: PUSH
43788: LD_INT 1
43790: MINUS
43791: ARRAY
43792: PPUSH
43793: LD_VAR 0 2
43797: PUSH
43798: LD_VAR 0 5
43802: PUSH
43803: LD_INT 1
43805: MINUS
43806: ARRAY
43807: PPUSH
43808: LD_VAR 0 7
43812: PUSH
43813: LD_VAR 0 5
43817: ARRAY
43818: PPUSH
43819: CALL_OW 1
43823: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43824: LD_ADDR_VAR 0 7
43828: PUSH
43829: LD_VAR 0 7
43833: PPUSH
43834: LD_VAR 0 5
43838: PUSH
43839: LD_INT 1
43841: MINUS
43842: PPUSH
43843: LD_VAR 0 6
43847: PPUSH
43848: CALL_OW 1
43852: ST_TO_ADDR
// end ;
43853: GO 43770
43855: POP
43856: POP
// result := s_arr [ 1 ] ;
43857: LD_ADDR_VAR 0 4
43861: PUSH
43862: LD_VAR 0 7
43866: PUSH
43867: LD_INT 1
43869: ARRAY
43870: ST_TO_ADDR
// end ; end ;
43871: LD_VAR 0 4
43875: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43876: LD_INT 0
43878: PPUSH
43879: PPUSH
// if not list then
43880: LD_VAR 0 1
43884: NOT
43885: IFFALSE 43889
// exit ;
43887: GO 43980
// i := list [ pos1 ] ;
43889: LD_ADDR_VAR 0 5
43893: PUSH
43894: LD_VAR 0 1
43898: PUSH
43899: LD_VAR 0 2
43903: ARRAY
43904: ST_TO_ADDR
// if not i then
43905: LD_VAR 0 5
43909: NOT
43910: IFFALSE 43914
// exit ;
43912: GO 43980
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43914: LD_ADDR_VAR 0 1
43918: PUSH
43919: LD_VAR 0 1
43923: PPUSH
43924: LD_VAR 0 2
43928: PPUSH
43929: LD_VAR 0 1
43933: PUSH
43934: LD_VAR 0 3
43938: ARRAY
43939: PPUSH
43940: CALL_OW 1
43944: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43945: LD_ADDR_VAR 0 1
43949: PUSH
43950: LD_VAR 0 1
43954: PPUSH
43955: LD_VAR 0 3
43959: PPUSH
43960: LD_VAR 0 5
43964: PPUSH
43965: CALL_OW 1
43969: ST_TO_ADDR
// result := list ;
43970: LD_ADDR_VAR 0 4
43974: PUSH
43975: LD_VAR 0 1
43979: ST_TO_ADDR
// end ;
43980: LD_VAR 0 4
43984: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43985: LD_INT 0
43987: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43988: LD_ADDR_VAR 0 5
43992: PUSH
43993: LD_VAR 0 1
43997: PPUSH
43998: CALL_OW 250
44002: PPUSH
44003: LD_VAR 0 1
44007: PPUSH
44008: CALL_OW 251
44012: PPUSH
44013: LD_VAR 0 2
44017: PPUSH
44018: LD_VAR 0 3
44022: PPUSH
44023: LD_VAR 0 4
44027: PPUSH
44028: CALL 44410 0 5
44032: ST_TO_ADDR
// end ;
44033: LD_VAR 0 5
44037: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
44038: LD_INT 0
44040: PPUSH
44041: PPUSH
44042: PPUSH
44043: PPUSH
// if not list or not unit then
44044: LD_VAR 0 2
44048: NOT
44049: IFTRUE 44058
44051: PUSH
44052: LD_VAR 0 1
44056: NOT
44057: OR
44058: IFFALSE 44062
// exit ;
44060: GO 44405
// result := [ ] ;
44062: LD_ADDR_VAR 0 5
44066: PUSH
44067: EMPTY
44068: ST_TO_ADDR
// for i in list do
44069: LD_ADDR_VAR 0 6
44073: PUSH
44074: LD_VAR 0 2
44078: PUSH
44079: FOR_IN
44080: IFFALSE 44298
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44082: LD_ADDR_VAR 0 8
44086: PUSH
44087: LD_VAR 0 1
44091: PPUSH
44092: LD_VAR 0 6
44096: PUSH
44097: LD_INT 1
44099: ARRAY
44100: PPUSH
44101: LD_VAR 0 6
44105: PUSH
44106: LD_INT 2
44108: ARRAY
44109: PPUSH
44110: CALL_OW 297
44114: ST_TO_ADDR
// if not Count ( result ) then
44115: LD_VAR 0 5
44119: PPUSH
44120: CALL 40632 0 1
44124: NOT
44125: IFFALSE 44158
// begin result := Join ( result , [ i , tmp ] ) ;
44127: LD_ADDR_VAR 0 5
44131: PUSH
44132: LD_VAR 0 5
44136: PPUSH
44137: LD_VAR 0 6
44141: PUSH
44142: LD_VAR 0 8
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PPUSH
44151: CALL 76608 0 2
44155: ST_TO_ADDR
// continue ;
44156: GO 44079
// end ; if result [ result ] [ 2 ] <= tmp then
44158: LD_VAR 0 5
44162: PUSH
44163: LD_VAR 0 5
44167: ARRAY
44168: PUSH
44169: LD_INT 2
44171: ARRAY
44172: PUSH
44173: LD_VAR 0 8
44177: LESSEQUAL
44178: IFFALSE 44211
// result := Join ( result , [ i , tmp ] ) else
44180: LD_ADDR_VAR 0 5
44184: PUSH
44185: LD_VAR 0 5
44189: PPUSH
44190: LD_VAR 0 6
44194: PUSH
44195: LD_VAR 0 8
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PPUSH
44204: CALL 76608 0 2
44208: ST_TO_ADDR
44209: GO 44296
// begin for j := 1 to Count ( result ) do
44211: LD_ADDR_VAR 0 7
44215: PUSH
44216: DOUBLE
44217: LD_INT 1
44219: DEC
44220: ST_TO_ADDR
44221: LD_VAR 0 5
44225: PPUSH
44226: CALL 40632 0 1
44230: PUSH
44231: FOR_TO
44232: IFFALSE 44294
// begin if tmp < result [ j ] [ 2 ] then
44234: LD_VAR 0 8
44238: PUSH
44239: LD_VAR 0 5
44243: PUSH
44244: LD_VAR 0 7
44248: ARRAY
44249: PUSH
44250: LD_INT 2
44252: ARRAY
44253: LESS
44254: IFFALSE 44292
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44256: LD_ADDR_VAR 0 5
44260: PUSH
44261: LD_VAR 0 5
44265: PPUSH
44266: LD_VAR 0 7
44270: PPUSH
44271: LD_VAR 0 6
44275: PUSH
44276: LD_VAR 0 8
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PPUSH
44285: CALL_OW 2
44289: ST_TO_ADDR
// break ;
44290: GO 44294
// end ; end ;
44292: GO 44231
44294: POP
44295: POP
// end ; end ;
44296: GO 44079
44298: POP
44299: POP
// if result and not asc then
44300: LD_VAR 0 5
44304: IFFALSE 44313
44306: PUSH
44307: LD_VAR 0 3
44311: NOT
44312: AND
44313: IFFALSE 44330
// result := ReverseArray ( result ) ;
44315: LD_ADDR_VAR 0 5
44319: PUSH
44320: LD_VAR 0 5
44324: PPUSH
44325: CALL 71688 0 1
44329: ST_TO_ADDR
// tmp := [ ] ;
44330: LD_ADDR_VAR 0 8
44334: PUSH
44335: EMPTY
44336: ST_TO_ADDR
// if mode then
44337: LD_VAR 0 4
44341: IFFALSE 44405
// begin for i := 1 to result do
44343: LD_ADDR_VAR 0 6
44347: PUSH
44348: DOUBLE
44349: LD_INT 1
44351: DEC
44352: ST_TO_ADDR
44353: LD_VAR 0 5
44357: PUSH
44358: FOR_TO
44359: IFFALSE 44393
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
44361: LD_ADDR_VAR 0 8
44365: PUSH
44366: LD_VAR 0 8
44370: PPUSH
44371: LD_VAR 0 5
44375: PUSH
44376: LD_VAR 0 6
44380: ARRAY
44381: PUSH
44382: LD_INT 1
44384: ARRAY
44385: PPUSH
44386: CALL 76608 0 2
44390: ST_TO_ADDR
44391: GO 44358
44393: POP
44394: POP
// result := tmp ;
44395: LD_ADDR_VAR 0 5
44399: PUSH
44400: LD_VAR 0 8
44404: ST_TO_ADDR
// end ; end ;
44405: LD_VAR 0 5
44409: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44410: LD_INT 0
44412: PPUSH
44413: PPUSH
44414: PPUSH
44415: PPUSH
// if not list then
44416: LD_VAR 0 3
44420: NOT
44421: IFFALSE 44425
// exit ;
44423: GO 44815
// result := [ ] ;
44425: LD_ADDR_VAR 0 6
44429: PUSH
44430: EMPTY
44431: ST_TO_ADDR
// for i in list do
44432: LD_ADDR_VAR 0 7
44436: PUSH
44437: LD_VAR 0 3
44441: PUSH
44442: FOR_IN
44443: IFFALSE 44645
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44445: LD_ADDR_VAR 0 9
44449: PUSH
44450: LD_VAR 0 7
44454: PPUSH
44455: LD_VAR 0 1
44459: PPUSH
44460: LD_VAR 0 2
44464: PPUSH
44465: CALL_OW 297
44469: ST_TO_ADDR
// if not result then
44470: LD_VAR 0 6
44474: NOT
44475: IFFALSE 44501
// result := [ [ i , tmp ] ] else
44477: LD_ADDR_VAR 0 6
44481: PUSH
44482: LD_VAR 0 7
44486: PUSH
44487: LD_VAR 0 9
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: EMPTY
44497: LIST
44498: ST_TO_ADDR
44499: GO 44643
// begin if result [ result ] [ 2 ] <= tmp then
44501: LD_VAR 0 6
44505: PUSH
44506: LD_VAR 0 6
44510: ARRAY
44511: PUSH
44512: LD_INT 2
44514: ARRAY
44515: PUSH
44516: LD_VAR 0 9
44520: LESSEQUAL
44521: IFFALSE 44563
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44523: LD_ADDR_VAR 0 6
44527: PUSH
44528: LD_VAR 0 6
44532: PPUSH
44533: LD_VAR 0 6
44537: PUSH
44538: LD_INT 1
44540: PLUS
44541: PPUSH
44542: LD_VAR 0 7
44546: PUSH
44547: LD_VAR 0 9
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PPUSH
44556: CALL_OW 2
44560: ST_TO_ADDR
44561: GO 44643
// for j := 1 to result do
44563: LD_ADDR_VAR 0 8
44567: PUSH
44568: DOUBLE
44569: LD_INT 1
44571: DEC
44572: ST_TO_ADDR
44573: LD_VAR 0 6
44577: PUSH
44578: FOR_TO
44579: IFFALSE 44641
// begin if tmp < result [ j ] [ 2 ] then
44581: LD_VAR 0 9
44585: PUSH
44586: LD_VAR 0 6
44590: PUSH
44591: LD_VAR 0 8
44595: ARRAY
44596: PUSH
44597: LD_INT 2
44599: ARRAY
44600: LESS
44601: IFFALSE 44639
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44603: LD_ADDR_VAR 0 6
44607: PUSH
44608: LD_VAR 0 6
44612: PPUSH
44613: LD_VAR 0 8
44617: PPUSH
44618: LD_VAR 0 7
44622: PUSH
44623: LD_VAR 0 9
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PPUSH
44632: CALL_OW 2
44636: ST_TO_ADDR
// break ;
44637: GO 44641
// end ; end ;
44639: GO 44578
44641: POP
44642: POP
// end ; end ;
44643: GO 44442
44645: POP
44646: POP
// if result and not asc then
44647: LD_VAR 0 6
44651: IFFALSE 44660
44653: PUSH
44654: LD_VAR 0 4
44658: NOT
44659: AND
44660: IFFALSE 44735
// begin tmp := result ;
44662: LD_ADDR_VAR 0 9
44666: PUSH
44667: LD_VAR 0 6
44671: ST_TO_ADDR
// for i = tmp downto 1 do
44672: LD_ADDR_VAR 0 7
44676: PUSH
44677: DOUBLE
44678: LD_VAR 0 9
44682: INC
44683: ST_TO_ADDR
44684: LD_INT 1
44686: PUSH
44687: FOR_DOWNTO
44688: IFFALSE 44733
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44690: LD_ADDR_VAR 0 6
44694: PUSH
44695: LD_VAR 0 6
44699: PPUSH
44700: LD_VAR 0 9
44704: PUSH
44705: LD_VAR 0 7
44709: MINUS
44710: PUSH
44711: LD_INT 1
44713: PLUS
44714: PPUSH
44715: LD_VAR 0 9
44719: PUSH
44720: LD_VAR 0 7
44724: ARRAY
44725: PPUSH
44726: CALL_OW 1
44730: ST_TO_ADDR
44731: GO 44687
44733: POP
44734: POP
// end ; tmp := [ ] ;
44735: LD_ADDR_VAR 0 9
44739: PUSH
44740: EMPTY
44741: ST_TO_ADDR
// if mode then
44742: LD_VAR 0 5
44746: IFFALSE 44815
// begin for i = 1 to result do
44748: LD_ADDR_VAR 0 7
44752: PUSH
44753: DOUBLE
44754: LD_INT 1
44756: DEC
44757: ST_TO_ADDR
44758: LD_VAR 0 6
44762: PUSH
44763: FOR_TO
44764: IFFALSE 44803
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44766: LD_ADDR_VAR 0 9
44770: PUSH
44771: LD_VAR 0 9
44775: PPUSH
44776: LD_VAR 0 7
44780: PPUSH
44781: LD_VAR 0 6
44785: PUSH
44786: LD_VAR 0 7
44790: ARRAY
44791: PUSH
44792: LD_INT 1
44794: ARRAY
44795: PPUSH
44796: CALL_OW 1
44800: ST_TO_ADDR
44801: GO 44763
44803: POP
44804: POP
// result := tmp ;
44805: LD_ADDR_VAR 0 6
44809: PUSH
44810: LD_VAR 0 9
44814: ST_TO_ADDR
// end ; end ;
44815: LD_VAR 0 6
44819: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44820: LD_INT 0
44822: PPUSH
44823: PPUSH
44824: PPUSH
44825: PPUSH
44826: PPUSH
44827: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44828: LD_ADDR_VAR 0 5
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: EMPTY
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: ST_TO_ADDR
// if not x or not y then
44850: LD_VAR 0 2
44854: NOT
44855: IFTRUE 44864
44857: PUSH
44858: LD_VAR 0 3
44862: NOT
44863: OR
44864: IFFALSE 44868
// exit ;
44866: GO 46524
// if not range then
44868: LD_VAR 0 4
44872: NOT
44873: IFFALSE 44883
// range := 10 ;
44875: LD_ADDR_VAR 0 4
44879: PUSH
44880: LD_INT 10
44882: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44883: LD_ADDR_VAR 0 8
44887: PUSH
44888: LD_INT 81
44890: PUSH
44891: LD_VAR 0 1
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 92
44902: PUSH
44903: LD_VAR 0 2
44907: PUSH
44908: LD_VAR 0 3
44912: PUSH
44913: LD_VAR 0 4
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 3
44926: PUSH
44927: LD_INT 21
44929: PUSH
44930: LD_INT 3
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: LIST
44945: PPUSH
44946: CALL_OW 69
44950: ST_TO_ADDR
// if not tmp then
44951: LD_VAR 0 8
44955: NOT
44956: IFFALSE 44960
// exit ;
44958: GO 46524
// for i in tmp do
44960: LD_ADDR_VAR 0 6
44964: PUSH
44965: LD_VAR 0 8
44969: PUSH
44970: FOR_IN
44971: IFFALSE 46499
// begin points := [ 0 , 0 , 0 ] ;
44973: LD_ADDR_VAR 0 9
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: LIST
44991: ST_TO_ADDR
// bpoints := 1 ;
44992: LD_ADDR_VAR 0 10
44996: PUSH
44997: LD_INT 1
44999: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45000: LD_VAR 0 6
45004: PPUSH
45005: CALL_OW 247
45009: PUSH
45010: LD_INT 1
45012: DOUBLE
45013: EQUAL
45014: IFTRUE 45018
45016: GO 45600
45018: POP
// begin if GetClass ( i ) = 1 then
45019: LD_VAR 0 6
45023: PPUSH
45024: CALL_OW 257
45028: PUSH
45029: LD_INT 1
45031: EQUAL
45032: IFFALSE 45053
// points := [ 10 , 5 , 3 ] ;
45034: LD_ADDR_VAR 0 9
45038: PUSH
45039: LD_INT 10
45041: PUSH
45042: LD_INT 5
45044: PUSH
45045: LD_INT 3
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: LIST
45052: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45053: LD_VAR 0 6
45057: PPUSH
45058: CALL_OW 257
45062: PUSH
45063: LD_INT 2
45065: PUSH
45066: LD_INT 3
45068: PUSH
45069: LD_INT 4
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: LIST
45076: IN
45077: IFFALSE 45098
// points := [ 3 , 2 , 1 ] ;
45079: LD_ADDR_VAR 0 9
45083: PUSH
45084: LD_INT 3
45086: PUSH
45087: LD_INT 2
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: LIST
45097: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45098: LD_VAR 0 6
45102: PPUSH
45103: CALL_OW 257
45107: PUSH
45108: LD_INT 5
45110: EQUAL
45111: IFFALSE 45132
// points := [ 130 , 5 , 2 ] ;
45113: LD_ADDR_VAR 0 9
45117: PUSH
45118: LD_INT 130
45120: PUSH
45121: LD_INT 5
45123: PUSH
45124: LD_INT 2
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: LIST
45131: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45132: LD_VAR 0 6
45136: PPUSH
45137: CALL_OW 257
45141: PUSH
45142: LD_INT 8
45144: EQUAL
45145: IFFALSE 45166
// points := [ 35 , 35 , 30 ] ;
45147: LD_ADDR_VAR 0 9
45151: PUSH
45152: LD_INT 35
45154: PUSH
45155: LD_INT 35
45157: PUSH
45158: LD_INT 30
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: LIST
45165: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45166: LD_VAR 0 6
45170: PPUSH
45171: CALL_OW 257
45175: PUSH
45176: LD_INT 9
45178: EQUAL
45179: IFFALSE 45200
// points := [ 20 , 55 , 40 ] ;
45181: LD_ADDR_VAR 0 9
45185: PUSH
45186: LD_INT 20
45188: PUSH
45189: LD_INT 55
45191: PUSH
45192: LD_INT 40
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: LIST
45199: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45200: LD_VAR 0 6
45204: PPUSH
45205: CALL_OW 257
45209: PUSH
45210: LD_INT 12
45212: PUSH
45213: LD_INT 16
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: IN
45220: IFFALSE 45241
// points := [ 5 , 3 , 2 ] ;
45222: LD_ADDR_VAR 0 9
45226: PUSH
45227: LD_INT 5
45229: PUSH
45230: LD_INT 3
45232: PUSH
45233: LD_INT 2
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: LIST
45240: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45241: LD_VAR 0 6
45245: PPUSH
45246: CALL_OW 257
45250: PUSH
45251: LD_INT 17
45253: EQUAL
45254: IFFALSE 45275
// points := [ 100 , 50 , 75 ] ;
45256: LD_ADDR_VAR 0 9
45260: PUSH
45261: LD_INT 100
45263: PUSH
45264: LD_INT 50
45266: PUSH
45267: LD_INT 75
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: LIST
45274: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45275: LD_VAR 0 6
45279: PPUSH
45280: CALL_OW 257
45284: PUSH
45285: LD_INT 15
45287: EQUAL
45288: IFFALSE 45309
// points := [ 10 , 5 , 3 ] ;
45290: LD_ADDR_VAR 0 9
45294: PUSH
45295: LD_INT 10
45297: PUSH
45298: LD_INT 5
45300: PUSH
45301: LD_INT 3
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: LIST
45308: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45309: LD_VAR 0 6
45313: PPUSH
45314: CALL_OW 257
45318: PUSH
45319: LD_INT 14
45321: EQUAL
45322: IFFALSE 45343
// points := [ 10 , 0 , 0 ] ;
45324: LD_ADDR_VAR 0 9
45328: PUSH
45329: LD_INT 10
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: LD_INT 0
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: LIST
45342: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45343: LD_VAR 0 6
45347: PPUSH
45348: CALL_OW 257
45352: PUSH
45353: LD_INT 11
45355: EQUAL
45356: IFFALSE 45377
// points := [ 30 , 10 , 5 ] ;
45358: LD_ADDR_VAR 0 9
45362: PUSH
45363: LD_INT 30
45365: PUSH
45366: LD_INT 10
45368: PUSH
45369: LD_INT 5
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: LIST
45376: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45377: LD_VAR 0 1
45381: PPUSH
45382: LD_INT 5
45384: PPUSH
45385: CALL_OW 321
45389: PUSH
45390: LD_INT 2
45392: EQUAL
45393: IFFALSE 45410
// bpoints := bpoints * 1.8 ;
45395: LD_ADDR_VAR 0 10
45399: PUSH
45400: LD_VAR 0 10
45404: PUSH
45405: LD_REAL  1.80000000000000E+0000
45408: MUL
45409: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45410: LD_VAR 0 6
45414: PPUSH
45415: CALL_OW 257
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: LD_INT 2
45425: PUSH
45426: LD_INT 3
45428: PUSH
45429: LD_INT 4
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: IN
45438: IFFALSE 45458
45440: PUSH
45441: LD_VAR 0 1
45445: PPUSH
45446: LD_INT 51
45448: PPUSH
45449: CALL_OW 321
45453: PUSH
45454: LD_INT 2
45456: EQUAL
45457: AND
45458: IFFALSE 45475
// bpoints := bpoints * 1.2 ;
45460: LD_ADDR_VAR 0 10
45464: PUSH
45465: LD_VAR 0 10
45469: PUSH
45470: LD_REAL  1.20000000000000E+0000
45473: MUL
45474: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45475: LD_VAR 0 6
45479: PPUSH
45480: CALL_OW 257
45484: PUSH
45485: LD_INT 5
45487: PUSH
45488: LD_INT 7
45490: PUSH
45491: LD_INT 9
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: LIST
45498: IN
45499: IFFALSE 45519
45501: PUSH
45502: LD_VAR 0 1
45506: PPUSH
45507: LD_INT 52
45509: PPUSH
45510: CALL_OW 321
45514: PUSH
45515: LD_INT 2
45517: EQUAL
45518: AND
45519: IFFALSE 45536
// bpoints := bpoints * 1.5 ;
45521: LD_ADDR_VAR 0 10
45525: PUSH
45526: LD_VAR 0 10
45530: PUSH
45531: LD_REAL  1.50000000000000E+0000
45534: MUL
45535: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45536: LD_VAR 0 1
45540: PPUSH
45541: LD_INT 66
45543: PPUSH
45544: CALL_OW 321
45548: PUSH
45549: LD_INT 2
45551: EQUAL
45552: IFFALSE 45569
// bpoints := bpoints * 1.1 ;
45554: LD_ADDR_VAR 0 10
45558: PUSH
45559: LD_VAR 0 10
45563: PUSH
45564: LD_REAL  1.10000000000000E+0000
45567: MUL
45568: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45569: LD_ADDR_VAR 0 10
45573: PUSH
45574: LD_VAR 0 10
45578: PUSH
45579: LD_VAR 0 6
45583: PPUSH
45584: LD_INT 1
45586: PPUSH
45587: CALL_OW 259
45591: PUSH
45592: LD_REAL  1.15000000000000E+0000
45595: MUL
45596: MUL
45597: ST_TO_ADDR
// end ; unit_vehicle :
45598: GO 46428
45600: LD_INT 2
45602: DOUBLE
45603: EQUAL
45604: IFTRUE 45608
45606: GO 46416
45608: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45609: LD_VAR 0 6
45613: PPUSH
45614: CALL_OW 264
45618: PUSH
45619: LD_INT 2
45621: PUSH
45622: LD_INT 42
45624: PUSH
45625: LD_INT 24
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: LIST
45632: IN
45633: IFFALSE 45654
// points := [ 25 , 5 , 3 ] ;
45635: LD_ADDR_VAR 0 9
45639: PUSH
45640: LD_INT 25
45642: PUSH
45643: LD_INT 5
45645: PUSH
45646: LD_INT 3
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: LIST
45653: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45654: LD_VAR 0 6
45658: PPUSH
45659: CALL_OW 264
45663: PUSH
45664: LD_INT 4
45666: PUSH
45667: LD_INT 43
45669: PUSH
45670: LD_INT 25
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: LIST
45677: IN
45678: IFFALSE 45699
// points := [ 40 , 15 , 5 ] ;
45680: LD_ADDR_VAR 0 9
45684: PUSH
45685: LD_INT 40
45687: PUSH
45688: LD_INT 15
45690: PUSH
45691: LD_INT 5
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: LIST
45698: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45699: LD_VAR 0 6
45703: PPUSH
45704: CALL_OW 264
45708: PUSH
45709: LD_INT 3
45711: PUSH
45712: LD_INT 23
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: IN
45719: IFFALSE 45740
// points := [ 7 , 25 , 8 ] ;
45721: LD_ADDR_VAR 0 9
45725: PUSH
45726: LD_INT 7
45728: PUSH
45729: LD_INT 25
45731: PUSH
45732: LD_INT 8
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: LIST
45739: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45740: LD_VAR 0 6
45744: PPUSH
45745: CALL_OW 264
45749: PUSH
45750: LD_INT 5
45752: PUSH
45753: LD_INT 27
45755: PUSH
45756: LD_INT 44
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: LIST
45763: IN
45764: IFFALSE 45785
// points := [ 14 , 50 , 16 ] ;
45766: LD_ADDR_VAR 0 9
45770: PUSH
45771: LD_INT 14
45773: PUSH
45774: LD_INT 50
45776: PUSH
45777: LD_INT 16
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: LIST
45784: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45785: LD_VAR 0 6
45789: PPUSH
45790: CALL_OW 264
45794: PUSH
45795: LD_INT 6
45797: PUSH
45798: LD_INT 46
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: IN
45805: IFFALSE 45826
// points := [ 32 , 120 , 70 ] ;
45807: LD_ADDR_VAR 0 9
45811: PUSH
45812: LD_INT 32
45814: PUSH
45815: LD_INT 120
45817: PUSH
45818: LD_INT 70
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: LIST
45825: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45826: LD_VAR 0 6
45830: PPUSH
45831: CALL_OW 264
45835: PUSH
45836: LD_INT 7
45838: PUSH
45839: LD_INT 28
45841: PUSH
45842: LD_INT 45
45844: PUSH
45845: LD_INT 92
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: IN
45854: IFFALSE 45875
// points := [ 35 , 20 , 45 ] ;
45856: LD_ADDR_VAR 0 9
45860: PUSH
45861: LD_INT 35
45863: PUSH
45864: LD_INT 20
45866: PUSH
45867: LD_INT 45
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: LIST
45874: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45875: LD_VAR 0 6
45879: PPUSH
45880: CALL_OW 264
45884: PUSH
45885: LD_INT 47
45887: PUSH
45888: EMPTY
45889: LIST
45890: IN
45891: IFFALSE 45912
// points := [ 67 , 45 , 75 ] ;
45893: LD_ADDR_VAR 0 9
45897: PUSH
45898: LD_INT 67
45900: PUSH
45901: LD_INT 45
45903: PUSH
45904: LD_INT 75
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: LIST
45911: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45912: LD_VAR 0 6
45916: PPUSH
45917: CALL_OW 264
45921: PUSH
45922: LD_INT 26
45924: PUSH
45925: EMPTY
45926: LIST
45927: IN
45928: IFFALSE 45949
// points := [ 120 , 30 , 80 ] ;
45930: LD_ADDR_VAR 0 9
45934: PUSH
45935: LD_INT 120
45937: PUSH
45938: LD_INT 30
45940: PUSH
45941: LD_INT 80
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: LIST
45948: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45949: LD_VAR 0 6
45953: PPUSH
45954: CALL_OW 264
45958: PUSH
45959: LD_INT 22
45961: PUSH
45962: EMPTY
45963: LIST
45964: IN
45965: IFFALSE 45986
// points := [ 40 , 1 , 1 ] ;
45967: LD_ADDR_VAR 0 9
45971: PUSH
45972: LD_INT 40
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: LD_INT 1
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: LIST
45985: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45986: LD_VAR 0 6
45990: PPUSH
45991: CALL_OW 264
45995: PUSH
45996: LD_INT 29
45998: PUSH
45999: EMPTY
46000: LIST
46001: IN
46002: IFFALSE 46023
// points := [ 70 , 200 , 400 ] ;
46004: LD_ADDR_VAR 0 9
46008: PUSH
46009: LD_INT 70
46011: PUSH
46012: LD_INT 200
46014: PUSH
46015: LD_INT 400
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: LIST
46022: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46023: LD_VAR 0 6
46027: PPUSH
46028: CALL_OW 264
46032: PUSH
46033: LD_INT 14
46035: PUSH
46036: LD_INT 53
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: IN
46043: IFFALSE 46064
// points := [ 40 , 10 , 20 ] ;
46045: LD_ADDR_VAR 0 9
46049: PUSH
46050: LD_INT 40
46052: PUSH
46053: LD_INT 10
46055: PUSH
46056: LD_INT 20
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: LIST
46063: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46064: LD_VAR 0 6
46068: PPUSH
46069: CALL_OW 264
46073: PUSH
46074: LD_INT 9
46076: PUSH
46077: EMPTY
46078: LIST
46079: IN
46080: IFFALSE 46101
// points := [ 5 , 70 , 20 ] ;
46082: LD_ADDR_VAR 0 9
46086: PUSH
46087: LD_INT 5
46089: PUSH
46090: LD_INT 70
46092: PUSH
46093: LD_INT 20
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: LIST
46100: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46101: LD_VAR 0 6
46105: PPUSH
46106: CALL_OW 264
46110: PUSH
46111: LD_INT 10
46113: PUSH
46114: EMPTY
46115: LIST
46116: IN
46117: IFFALSE 46138
// points := [ 35 , 110 , 70 ] ;
46119: LD_ADDR_VAR 0 9
46123: PUSH
46124: LD_INT 35
46126: PUSH
46127: LD_INT 110
46129: PUSH
46130: LD_INT 70
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: LIST
46137: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46138: LD_VAR 0 6
46142: PPUSH
46143: CALL_OW 265
46147: PUSH
46148: LD_INT 25
46150: EQUAL
46151: IFFALSE 46172
// points := [ 80 , 65 , 100 ] ;
46153: LD_ADDR_VAR 0 9
46157: PUSH
46158: LD_INT 80
46160: PUSH
46161: LD_INT 65
46163: PUSH
46164: LD_INT 100
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: LIST
46171: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46172: LD_VAR 0 6
46176: PPUSH
46177: CALL_OW 263
46181: PUSH
46182: LD_INT 1
46184: EQUAL
46185: IFFALSE 46220
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46187: LD_ADDR_VAR 0 10
46191: PUSH
46192: LD_VAR 0 10
46196: PUSH
46197: LD_VAR 0 6
46201: PPUSH
46202: CALL_OW 311
46206: PPUSH
46207: LD_INT 3
46209: PPUSH
46210: CALL_OW 259
46214: PUSH
46215: LD_INT 4
46217: MUL
46218: MUL
46219: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46220: LD_VAR 0 6
46224: PPUSH
46225: CALL_OW 263
46229: PUSH
46230: LD_INT 2
46232: EQUAL
46233: IFFALSE 46284
// begin j := IsControledBy ( i ) ;
46235: LD_ADDR_VAR 0 7
46239: PUSH
46240: LD_VAR 0 6
46244: PPUSH
46245: CALL_OW 312
46249: ST_TO_ADDR
// if j then
46250: LD_VAR 0 7
46254: IFFALSE 46284
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46256: LD_ADDR_VAR 0 10
46260: PUSH
46261: LD_VAR 0 10
46265: PUSH
46266: LD_VAR 0 7
46270: PPUSH
46271: LD_INT 3
46273: PPUSH
46274: CALL_OW 259
46278: PUSH
46279: LD_INT 3
46281: MUL
46282: MUL
46283: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46284: LD_VAR 0 6
46288: PPUSH
46289: CALL_OW 264
46293: PUSH
46294: LD_INT 5
46296: PUSH
46297: LD_INT 6
46299: PUSH
46300: LD_INT 46
46302: PUSH
46303: LD_INT 44
46305: PUSH
46306: LD_INT 47
46308: PUSH
46309: LD_INT 45
46311: PUSH
46312: LD_INT 28
46314: PUSH
46315: LD_INT 7
46317: PUSH
46318: LD_INT 27
46320: PUSH
46321: LD_INT 29
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: IN
46336: IFFALSE 46356
46338: PUSH
46339: LD_VAR 0 1
46343: PPUSH
46344: LD_INT 52
46346: PPUSH
46347: CALL_OW 321
46351: PUSH
46352: LD_INT 2
46354: EQUAL
46355: AND
46356: IFFALSE 46373
// bpoints := bpoints * 1.2 ;
46358: LD_ADDR_VAR 0 10
46362: PUSH
46363: LD_VAR 0 10
46367: PUSH
46368: LD_REAL  1.20000000000000E+0000
46371: MUL
46372: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46373: LD_VAR 0 6
46377: PPUSH
46378: CALL_OW 264
46382: PUSH
46383: LD_INT 6
46385: PUSH
46386: LD_INT 46
46388: PUSH
46389: LD_INT 47
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: LIST
46396: IN
46397: IFFALSE 46414
// bpoints := bpoints * 1.2 ;
46399: LD_ADDR_VAR 0 10
46403: PUSH
46404: LD_VAR 0 10
46408: PUSH
46409: LD_REAL  1.20000000000000E+0000
46412: MUL
46413: ST_TO_ADDR
// end ; unit_building :
46414: GO 46428
46416: LD_INT 3
46418: DOUBLE
46419: EQUAL
46420: IFTRUE 46424
46422: GO 46427
46424: POP
// ; end ;
46425: GO 46428
46427: POP
// for j = 1 to 3 do
46428: LD_ADDR_VAR 0 7
46432: PUSH
46433: DOUBLE
46434: LD_INT 1
46436: DEC
46437: ST_TO_ADDR
46438: LD_INT 3
46440: PUSH
46441: FOR_TO
46442: IFFALSE 46495
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46444: LD_ADDR_VAR 0 5
46448: PUSH
46449: LD_VAR 0 5
46453: PPUSH
46454: LD_VAR 0 7
46458: PPUSH
46459: LD_VAR 0 5
46463: PUSH
46464: LD_VAR 0 7
46468: ARRAY
46469: PUSH
46470: LD_VAR 0 9
46474: PUSH
46475: LD_VAR 0 7
46479: ARRAY
46480: PUSH
46481: LD_VAR 0 10
46485: MUL
46486: PLUS
46487: PPUSH
46488: CALL_OW 1
46492: ST_TO_ADDR
46493: GO 46441
46495: POP
46496: POP
// end ;
46497: GO 44970
46499: POP
46500: POP
// result := Replace ( result , 4 , tmp ) ;
46501: LD_ADDR_VAR 0 5
46505: PUSH
46506: LD_VAR 0 5
46510: PPUSH
46511: LD_INT 4
46513: PPUSH
46514: LD_VAR 0 8
46518: PPUSH
46519: CALL_OW 1
46523: ST_TO_ADDR
// end ;
46524: LD_VAR 0 5
46528: RET
// export function DangerAtRange ( unit , range ) ; begin
46529: LD_INT 0
46531: PPUSH
// if not unit then
46532: LD_VAR 0 1
46536: NOT
46537: IFFALSE 46541
// exit ;
46539: GO 46586
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46541: LD_ADDR_VAR 0 3
46545: PUSH
46546: LD_VAR 0 1
46550: PPUSH
46551: CALL_OW 255
46555: PPUSH
46556: LD_VAR 0 1
46560: PPUSH
46561: CALL_OW 250
46565: PPUSH
46566: LD_VAR 0 1
46570: PPUSH
46571: CALL_OW 251
46575: PPUSH
46576: LD_VAR 0 2
46580: PPUSH
46581: CALL 44820 0 4
46585: ST_TO_ADDR
// end ;
46586: LD_VAR 0 3
46590: RET
// export function DangerInArea ( side , area ) ; begin
46591: LD_INT 0
46593: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46594: LD_ADDR_VAR 0 3
46598: PUSH
46599: LD_VAR 0 2
46603: PPUSH
46604: LD_INT 81
46606: PUSH
46607: LD_VAR 0 1
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PPUSH
46616: CALL_OW 70
46620: ST_TO_ADDR
// end ;
46621: LD_VAR 0 3
46625: RET
// export function IsExtension ( b ) ; begin
46626: LD_INT 0
46628: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46629: LD_ADDR_VAR 0 2
46633: PUSH
46634: LD_VAR 0 1
46638: PUSH
46639: LD_INT 23
46641: PUSH
46642: LD_INT 20
46644: PUSH
46645: LD_INT 22
46647: PUSH
46648: LD_INT 17
46650: PUSH
46651: LD_INT 24
46653: PUSH
46654: LD_INT 21
46656: PUSH
46657: LD_INT 19
46659: PUSH
46660: LD_INT 16
46662: PUSH
46663: LD_INT 25
46665: PUSH
46666: LD_INT 18
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: IN
46681: ST_TO_ADDR
// end ;
46682: LD_VAR 0 2
46686: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46687: LD_INT 0
46689: PPUSH
46690: PPUSH
46691: PPUSH
// result := [ ] ;
46692: LD_ADDR_VAR 0 4
46696: PUSH
46697: EMPTY
46698: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46699: LD_ADDR_VAR 0 5
46703: PUSH
46704: LD_VAR 0 2
46708: PPUSH
46709: LD_INT 21
46711: PUSH
46712: LD_INT 3
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PPUSH
46719: CALL_OW 70
46723: ST_TO_ADDR
// if not tmp then
46724: LD_VAR 0 5
46728: NOT
46729: IFFALSE 46733
// exit ;
46731: GO 46797
// if checkLink then
46733: LD_VAR 0 3
46737: IFFALSE 46787
// begin for i in tmp do
46739: LD_ADDR_VAR 0 6
46743: PUSH
46744: LD_VAR 0 5
46748: PUSH
46749: FOR_IN
46750: IFFALSE 46785
// if GetBase ( i ) <> base then
46752: LD_VAR 0 6
46756: PPUSH
46757: CALL_OW 274
46761: PUSH
46762: LD_VAR 0 1
46766: NONEQUAL
46767: IFFALSE 46783
// ComLinkToBase ( base , i ) ;
46769: LD_VAR 0 1
46773: PPUSH
46774: LD_VAR 0 6
46778: PPUSH
46779: CALL_OW 169
46783: GO 46749
46785: POP
46786: POP
// end ; result := tmp ;
46787: LD_ADDR_VAR 0 4
46791: PUSH
46792: LD_VAR 0 5
46796: ST_TO_ADDR
// end ;
46797: LD_VAR 0 4
46801: RET
// export function ComComplete ( units , b ) ; var i ; begin
46802: LD_INT 0
46804: PPUSH
46805: PPUSH
// if not units then
46806: LD_VAR 0 1
46810: NOT
46811: IFFALSE 46815
// exit ;
46813: GO 46905
// for i in units do
46815: LD_ADDR_VAR 0 4
46819: PUSH
46820: LD_VAR 0 1
46824: PUSH
46825: FOR_IN
46826: IFFALSE 46903
// if BuildingStatus ( b ) = bs_build then
46828: LD_VAR 0 2
46832: PPUSH
46833: CALL_OW 461
46837: PUSH
46838: LD_INT 1
46840: EQUAL
46841: IFFALSE 46901
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46843: LD_VAR 0 4
46847: PPUSH
46848: LD_STRING h
46850: PUSH
46851: LD_VAR 0 2
46855: PPUSH
46856: CALL_OW 250
46860: PUSH
46861: LD_VAR 0 2
46865: PPUSH
46866: CALL_OW 251
46870: PUSH
46871: LD_VAR 0 2
46875: PUSH
46876: LD_INT 0
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: PUSH
46894: EMPTY
46895: LIST
46896: PPUSH
46897: CALL_OW 446
46901: GO 46825
46903: POP
46904: POP
// end ;
46905: LD_VAR 0 3
46909: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46910: LD_INT 0
46912: PPUSH
46913: PPUSH
46914: PPUSH
46915: PPUSH
46916: PPUSH
46917: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46918: LD_VAR 0 1
46922: NOT
46923: IFTRUE 46940
46925: PUSH
46926: LD_VAR 0 1
46930: PPUSH
46931: CALL_OW 263
46935: PUSH
46936: LD_INT 2
46938: NONEQUAL
46939: OR
46940: IFFALSE 46944
// exit ;
46942: GO 47260
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46944: LD_ADDR_VAR 0 6
46948: PUSH
46949: LD_INT 22
46951: PUSH
46952: LD_VAR 0 1
46956: PPUSH
46957: CALL_OW 255
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 2
46968: PUSH
46969: LD_INT 30
46971: PUSH
46972: LD_INT 36
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 34
46981: PUSH
46982: LD_INT 31
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: LIST
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PPUSH
46998: CALL_OW 69
47002: ST_TO_ADDR
// if not tmp then
47003: LD_VAR 0 6
47007: NOT
47008: IFFALSE 47012
// exit ;
47010: GO 47260
// result := [ ] ;
47012: LD_ADDR_VAR 0 2
47016: PUSH
47017: EMPTY
47018: ST_TO_ADDR
// for i in tmp do
47019: LD_ADDR_VAR 0 3
47023: PUSH
47024: LD_VAR 0 6
47028: PUSH
47029: FOR_IN
47030: IFFALSE 47101
// begin t := UnitsInside ( i ) ;
47032: LD_ADDR_VAR 0 4
47036: PUSH
47037: LD_VAR 0 3
47041: PPUSH
47042: CALL_OW 313
47046: ST_TO_ADDR
// if t then
47047: LD_VAR 0 4
47051: IFFALSE 47099
// for j in t do
47053: LD_ADDR_VAR 0 7
47057: PUSH
47058: LD_VAR 0 4
47062: PUSH
47063: FOR_IN
47064: IFFALSE 47097
// result := Replace ( result , result + 1 , j ) ;
47066: LD_ADDR_VAR 0 2
47070: PUSH
47071: LD_VAR 0 2
47075: PPUSH
47076: LD_VAR 0 2
47080: PUSH
47081: LD_INT 1
47083: PLUS
47084: PPUSH
47085: LD_VAR 0 7
47089: PPUSH
47090: CALL_OW 1
47094: ST_TO_ADDR
47095: GO 47063
47097: POP
47098: POP
// end ;
47099: GO 47029
47101: POP
47102: POP
// if not result then
47103: LD_VAR 0 2
47107: NOT
47108: IFFALSE 47112
// exit ;
47110: GO 47260
// mech := result [ 1 ] ;
47112: LD_ADDR_VAR 0 5
47116: PUSH
47117: LD_VAR 0 2
47121: PUSH
47122: LD_INT 1
47124: ARRAY
47125: ST_TO_ADDR
// if result > 1 then
47126: LD_VAR 0 2
47130: PUSH
47131: LD_INT 1
47133: GREATER
47134: IFFALSE 47246
// begin for i = 2 to result do
47136: LD_ADDR_VAR 0 3
47140: PUSH
47141: DOUBLE
47142: LD_INT 2
47144: DEC
47145: ST_TO_ADDR
47146: LD_VAR 0 2
47150: PUSH
47151: FOR_TO
47152: IFFALSE 47244
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47154: LD_ADDR_VAR 0 4
47158: PUSH
47159: LD_VAR 0 2
47163: PUSH
47164: LD_VAR 0 3
47168: ARRAY
47169: PPUSH
47170: LD_INT 3
47172: PPUSH
47173: CALL_OW 259
47177: PUSH
47178: LD_VAR 0 2
47182: PUSH
47183: LD_VAR 0 3
47187: ARRAY
47188: PPUSH
47189: CALL_OW 432
47193: MINUS
47194: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47195: LD_VAR 0 4
47199: PUSH
47200: LD_VAR 0 5
47204: PPUSH
47205: LD_INT 3
47207: PPUSH
47208: CALL_OW 259
47212: PUSH
47213: LD_VAR 0 5
47217: PPUSH
47218: CALL_OW 432
47222: MINUS
47223: GREATEREQUAL
47224: IFFALSE 47242
// mech := result [ i ] ;
47226: LD_ADDR_VAR 0 5
47230: PUSH
47231: LD_VAR 0 2
47235: PUSH
47236: LD_VAR 0 3
47240: ARRAY
47241: ST_TO_ADDR
// end ;
47242: GO 47151
47244: POP
47245: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47246: LD_VAR 0 1
47250: PPUSH
47251: LD_VAR 0 5
47255: PPUSH
47256: CALL_OW 135
// end ;
47260: LD_VAR 0 2
47264: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47265: LD_INT 0
47267: PPUSH
47268: PPUSH
47269: PPUSH
47270: PPUSH
47271: PPUSH
47272: PPUSH
47273: PPUSH
47274: PPUSH
47275: PPUSH
47276: PPUSH
47277: PPUSH
47278: PPUSH
47279: PPUSH
// result := [ ] ;
47280: LD_ADDR_VAR 0 7
47284: PUSH
47285: EMPTY
47286: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47287: LD_VAR 0 1
47291: PPUSH
47292: CALL_OW 266
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: LD_INT 1
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: IN
47307: NOT
47308: IFFALSE 47312
// exit ;
47310: GO 48952
// if name then
47312: LD_VAR 0 3
47316: IFFALSE 47332
// SetBName ( base_dep , name ) ;
47318: LD_VAR 0 1
47322: PPUSH
47323: LD_VAR 0 3
47327: PPUSH
47328: CALL_OW 500
// base := GetBase ( base_dep ) ;
47332: LD_ADDR_VAR 0 15
47336: PUSH
47337: LD_VAR 0 1
47341: PPUSH
47342: CALL_OW 274
47346: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47347: LD_ADDR_VAR 0 16
47351: PUSH
47352: LD_VAR 0 1
47356: PPUSH
47357: CALL_OW 255
47361: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47362: LD_ADDR_VAR 0 17
47366: PUSH
47367: LD_VAR 0 1
47371: PPUSH
47372: CALL_OW 248
47376: ST_TO_ADDR
// if sources then
47377: LD_VAR 0 5
47381: IFFALSE 47428
// for i = 1 to 3 do
47383: LD_ADDR_VAR 0 8
47387: PUSH
47388: DOUBLE
47389: LD_INT 1
47391: DEC
47392: ST_TO_ADDR
47393: LD_INT 3
47395: PUSH
47396: FOR_TO
47397: IFFALSE 47426
// AddResourceType ( base , i , sources [ i ] ) ;
47399: LD_VAR 0 15
47403: PPUSH
47404: LD_VAR 0 8
47408: PPUSH
47409: LD_VAR 0 5
47413: PUSH
47414: LD_VAR 0 8
47418: ARRAY
47419: PPUSH
47420: CALL_OW 276
47424: GO 47396
47426: POP
47427: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47428: LD_ADDR_VAR 0 18
47432: PUSH
47433: LD_VAR 0 15
47437: PPUSH
47438: LD_VAR 0 2
47442: PPUSH
47443: LD_INT 1
47445: PPUSH
47446: CALL 46687 0 3
47450: ST_TO_ADDR
// InitHc ;
47451: CALL_OW 19
// InitUc ;
47455: CALL_OW 18
// uc_side := side ;
47459: LD_ADDR_OWVAR 20
47463: PUSH
47464: LD_VAR 0 16
47468: ST_TO_ADDR
// uc_nation := nation ;
47469: LD_ADDR_OWVAR 21
47473: PUSH
47474: LD_VAR 0 17
47478: ST_TO_ADDR
// if buildings then
47479: LD_VAR 0 18
47483: IFFALSE 48811
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47485: LD_ADDR_VAR 0 19
47489: PUSH
47490: LD_VAR 0 18
47494: PPUSH
47495: LD_INT 2
47497: PUSH
47498: LD_INT 30
47500: PUSH
47501: LD_INT 29
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 30
47510: PUSH
47511: LD_INT 30
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: LIST
47522: PPUSH
47523: CALL_OW 72
47527: ST_TO_ADDR
// if tmp then
47528: LD_VAR 0 19
47532: IFFALSE 47580
// for i in tmp do
47534: LD_ADDR_VAR 0 8
47538: PUSH
47539: LD_VAR 0 19
47543: PUSH
47544: FOR_IN
47545: IFFALSE 47578
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47547: LD_VAR 0 8
47551: PPUSH
47552: CALL_OW 250
47556: PPUSH
47557: LD_VAR 0 8
47561: PPUSH
47562: CALL_OW 251
47566: PPUSH
47567: LD_VAR 0 16
47571: PPUSH
47572: CALL_OW 441
47576: GO 47544
47578: POP
47579: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47580: LD_VAR 0 18
47584: PPUSH
47585: LD_INT 2
47587: PUSH
47588: LD_INT 30
47590: PUSH
47591: LD_INT 32
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 30
47600: PUSH
47601: LD_INT 33
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: LIST
47612: PPUSH
47613: CALL_OW 72
47617: IFFALSE 47705
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47619: LD_ADDR_VAR 0 8
47623: PUSH
47624: LD_VAR 0 18
47628: PPUSH
47629: LD_INT 2
47631: PUSH
47632: LD_INT 30
47634: PUSH
47635: LD_INT 32
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 30
47644: PUSH
47645: LD_INT 33
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: LIST
47656: PPUSH
47657: CALL_OW 72
47661: PUSH
47662: FOR_IN
47663: IFFALSE 47703
// begin if not GetBWeapon ( i ) then
47665: LD_VAR 0 8
47669: PPUSH
47670: CALL_OW 269
47674: NOT
47675: IFFALSE 47701
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47677: LD_VAR 0 8
47681: PPUSH
47682: LD_VAR 0 8
47686: PPUSH
47687: LD_VAR 0 2
47691: PPUSH
47692: CALL 48957 0 2
47696: PPUSH
47697: CALL_OW 431
// end ;
47701: GO 47662
47703: POP
47704: POP
// end ; for i = 1 to personel do
47705: LD_ADDR_VAR 0 8
47709: PUSH
47710: DOUBLE
47711: LD_INT 1
47713: DEC
47714: ST_TO_ADDR
47715: LD_VAR 0 6
47719: PUSH
47720: FOR_TO
47721: IFFALSE 48791
// begin if i > 4 then
47723: LD_VAR 0 8
47727: PUSH
47728: LD_INT 4
47730: GREATER
47731: IFFALSE 47735
// break ;
47733: GO 48791
// case i of 1 :
47735: LD_VAR 0 8
47739: PUSH
47740: LD_INT 1
47742: DOUBLE
47743: EQUAL
47744: IFTRUE 47748
47746: GO 47828
47748: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47749: LD_ADDR_VAR 0 12
47753: PUSH
47754: LD_VAR 0 18
47758: PPUSH
47759: LD_INT 22
47761: PUSH
47762: LD_VAR 0 16
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 58
47773: PUSH
47774: EMPTY
47775: LIST
47776: PUSH
47777: LD_INT 2
47779: PUSH
47780: LD_INT 30
47782: PUSH
47783: LD_INT 32
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 30
47792: PUSH
47793: LD_INT 4
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 30
47802: PUSH
47803: LD_INT 5
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: LIST
47820: PPUSH
47821: CALL_OW 72
47825: ST_TO_ADDR
47826: GO 48050
47828: LD_INT 2
47830: DOUBLE
47831: EQUAL
47832: IFTRUE 47836
47834: GO 47898
47836: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47837: LD_ADDR_VAR 0 12
47841: PUSH
47842: LD_VAR 0 18
47846: PPUSH
47847: LD_INT 22
47849: PUSH
47850: LD_VAR 0 16
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 2
47861: PUSH
47862: LD_INT 30
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 30
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: LIST
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PPUSH
47891: CALL_OW 72
47895: ST_TO_ADDR
47896: GO 48050
47898: LD_INT 3
47900: DOUBLE
47901: EQUAL
47902: IFTRUE 47906
47904: GO 47968
47906: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47907: LD_ADDR_VAR 0 12
47911: PUSH
47912: LD_VAR 0 18
47916: PPUSH
47917: LD_INT 22
47919: PUSH
47920: LD_VAR 0 16
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 2
47931: PUSH
47932: LD_INT 30
47934: PUSH
47935: LD_INT 2
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 30
47944: PUSH
47945: LD_INT 3
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: LIST
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PPUSH
47961: CALL_OW 72
47965: ST_TO_ADDR
47966: GO 48050
47968: LD_INT 4
47970: DOUBLE
47971: EQUAL
47972: IFTRUE 47976
47974: GO 48049
47976: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47977: LD_ADDR_VAR 0 12
47981: PUSH
47982: LD_VAR 0 18
47986: PPUSH
47987: LD_INT 22
47989: PUSH
47990: LD_VAR 0 16
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 2
48001: PUSH
48002: LD_INT 30
48004: PUSH
48005: LD_INT 6
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 30
48014: PUSH
48015: LD_INT 7
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 30
48024: PUSH
48025: LD_INT 8
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PPUSH
48042: CALL_OW 72
48046: ST_TO_ADDR
48047: GO 48050
48049: POP
// if i = 1 then
48050: LD_VAR 0 8
48054: PUSH
48055: LD_INT 1
48057: EQUAL
48058: IFFALSE 48169
// begin tmp := [ ] ;
48060: LD_ADDR_VAR 0 19
48064: PUSH
48065: EMPTY
48066: ST_TO_ADDR
// for j in f do
48067: LD_ADDR_VAR 0 9
48071: PUSH
48072: LD_VAR 0 12
48076: PUSH
48077: FOR_IN
48078: IFFALSE 48151
// if GetBType ( j ) = b_bunker then
48080: LD_VAR 0 9
48084: PPUSH
48085: CALL_OW 266
48089: PUSH
48090: LD_INT 32
48092: EQUAL
48093: IFFALSE 48120
// tmp := Insert ( tmp , 1 , j ) else
48095: LD_ADDR_VAR 0 19
48099: PUSH
48100: LD_VAR 0 19
48104: PPUSH
48105: LD_INT 1
48107: PPUSH
48108: LD_VAR 0 9
48112: PPUSH
48113: CALL_OW 2
48117: ST_TO_ADDR
48118: GO 48149
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48120: LD_ADDR_VAR 0 19
48124: PUSH
48125: LD_VAR 0 19
48129: PPUSH
48130: LD_VAR 0 19
48134: PUSH
48135: LD_INT 1
48137: PLUS
48138: PPUSH
48139: LD_VAR 0 9
48143: PPUSH
48144: CALL_OW 2
48148: ST_TO_ADDR
48149: GO 48077
48151: POP
48152: POP
// if tmp then
48153: LD_VAR 0 19
48157: IFFALSE 48169
// f := tmp ;
48159: LD_ADDR_VAR 0 12
48163: PUSH
48164: LD_VAR 0 19
48168: ST_TO_ADDR
// end ; x := personel [ i ] ;
48169: LD_ADDR_VAR 0 13
48173: PUSH
48174: LD_VAR 0 6
48178: PUSH
48179: LD_VAR 0 8
48183: ARRAY
48184: ST_TO_ADDR
// if x = - 1 then
48185: LD_VAR 0 13
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: EQUAL
48194: IFFALSE 48405
// begin for j in f do
48196: LD_ADDR_VAR 0 9
48200: PUSH
48201: LD_VAR 0 12
48205: PUSH
48206: FOR_IN
48207: IFFALSE 48401
// repeat InitHc ;
48209: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48213: LD_VAR 0 9
48217: PPUSH
48218: CALL_OW 266
48222: PUSH
48223: LD_INT 5
48225: EQUAL
48226: IFFALSE 48296
// begin if UnitsInside ( j ) < 3 then
48228: LD_VAR 0 9
48232: PPUSH
48233: CALL_OW 313
48237: PUSH
48238: LD_INT 3
48240: LESS
48241: IFFALSE 48277
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48243: LD_INT 0
48245: PPUSH
48246: LD_INT 5
48248: PUSH
48249: LD_INT 8
48251: PUSH
48252: LD_INT 9
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: LIST
48259: PUSH
48260: LD_VAR 0 17
48264: ARRAY
48265: PPUSH
48266: LD_VAR 0 4
48270: PPUSH
48271: CALL_OW 380
48275: GO 48294
// PrepareHuman ( false , i , skill ) ;
48277: LD_INT 0
48279: PPUSH
48280: LD_VAR 0 8
48284: PPUSH
48285: LD_VAR 0 4
48289: PPUSH
48290: CALL_OW 380
// end else
48294: GO 48313
// PrepareHuman ( false , i , skill ) ;
48296: LD_INT 0
48298: PPUSH
48299: LD_VAR 0 8
48303: PPUSH
48304: LD_VAR 0 4
48308: PPUSH
48309: CALL_OW 380
// un := CreateHuman ;
48313: LD_ADDR_VAR 0 14
48317: PUSH
48318: CALL_OW 44
48322: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48323: LD_ADDR_VAR 0 7
48327: PUSH
48328: LD_VAR 0 7
48332: PPUSH
48333: LD_INT 1
48335: PPUSH
48336: LD_VAR 0 14
48340: PPUSH
48341: CALL_OW 2
48345: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48346: LD_VAR 0 14
48350: PPUSH
48351: LD_VAR 0 9
48355: PPUSH
48356: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48360: LD_VAR 0 9
48364: PPUSH
48365: CALL_OW 313
48369: PUSH
48370: LD_INT 6
48372: EQUAL
48373: IFTRUE 48397
48375: PUSH
48376: LD_VAR 0 9
48380: PPUSH
48381: CALL_OW 266
48385: PUSH
48386: LD_INT 32
48388: PUSH
48389: LD_INT 31
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: IN
48396: OR
48397: IFFALSE 48209
48399: GO 48206
48401: POP
48402: POP
// end else
48403: GO 48789
// for j = 1 to x do
48405: LD_ADDR_VAR 0 9
48409: PUSH
48410: DOUBLE
48411: LD_INT 1
48413: DEC
48414: ST_TO_ADDR
48415: LD_VAR 0 13
48419: PUSH
48420: FOR_TO
48421: IFFALSE 48787
// begin InitHc ;
48423: CALL_OW 19
// if not f then
48427: LD_VAR 0 12
48431: NOT
48432: IFFALSE 48521
// begin PrepareHuman ( false , i , skill ) ;
48434: LD_INT 0
48436: PPUSH
48437: LD_VAR 0 8
48441: PPUSH
48442: LD_VAR 0 4
48446: PPUSH
48447: CALL_OW 380
// un := CreateHuman ;
48451: LD_ADDR_VAR 0 14
48455: PUSH
48456: CALL_OW 44
48460: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48461: LD_ADDR_VAR 0 7
48465: PUSH
48466: LD_VAR 0 7
48470: PPUSH
48471: LD_INT 1
48473: PPUSH
48474: LD_VAR 0 14
48478: PPUSH
48479: CALL_OW 2
48483: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48484: LD_VAR 0 14
48488: PPUSH
48489: LD_VAR 0 1
48493: PPUSH
48494: CALL_OW 250
48498: PPUSH
48499: LD_VAR 0 1
48503: PPUSH
48504: CALL_OW 251
48508: PPUSH
48509: LD_INT 10
48511: PPUSH
48512: LD_INT 0
48514: PPUSH
48515: CALL_OW 50
// continue ;
48519: GO 48420
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48521: LD_VAR 0 12
48525: PUSH
48526: LD_INT 1
48528: ARRAY
48529: PPUSH
48530: CALL_OW 313
48534: IFFALSE 48562
48536: PUSH
48537: LD_VAR 0 12
48541: PUSH
48542: LD_INT 1
48544: ARRAY
48545: PPUSH
48546: CALL_OW 266
48550: PUSH
48551: LD_INT 32
48553: PUSH
48554: LD_INT 31
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: IN
48561: AND
48562: IFTRUE 48583
48564: PUSH
48565: LD_VAR 0 12
48569: PUSH
48570: LD_INT 1
48572: ARRAY
48573: PPUSH
48574: CALL_OW 313
48578: PUSH
48579: LD_INT 6
48581: EQUAL
48582: OR
48583: IFFALSE 48603
// f := Delete ( f , 1 ) ;
48585: LD_ADDR_VAR 0 12
48589: PUSH
48590: LD_VAR 0 12
48594: PPUSH
48595: LD_INT 1
48597: PPUSH
48598: CALL_OW 3
48602: ST_TO_ADDR
// if not f then
48603: LD_VAR 0 12
48607: NOT
48608: IFFALSE 48626
// begin x := x + 2 ;
48610: LD_ADDR_VAR 0 13
48614: PUSH
48615: LD_VAR 0 13
48619: PUSH
48620: LD_INT 2
48622: PLUS
48623: ST_TO_ADDR
// continue ;
48624: GO 48420
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48626: LD_VAR 0 12
48630: PUSH
48631: LD_INT 1
48633: ARRAY
48634: PPUSH
48635: CALL_OW 266
48639: PUSH
48640: LD_INT 5
48642: EQUAL
48643: IFFALSE 48717
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48645: LD_VAR 0 12
48649: PUSH
48650: LD_INT 1
48652: ARRAY
48653: PPUSH
48654: CALL_OW 313
48658: PUSH
48659: LD_INT 3
48661: LESS
48662: IFFALSE 48698
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48664: LD_INT 0
48666: PPUSH
48667: LD_INT 5
48669: PUSH
48670: LD_INT 8
48672: PUSH
48673: LD_INT 9
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: LIST
48680: PUSH
48681: LD_VAR 0 17
48685: ARRAY
48686: PPUSH
48687: LD_VAR 0 4
48691: PPUSH
48692: CALL_OW 380
48696: GO 48715
// PrepareHuman ( false , i , skill ) ;
48698: LD_INT 0
48700: PPUSH
48701: LD_VAR 0 8
48705: PPUSH
48706: LD_VAR 0 4
48710: PPUSH
48711: CALL_OW 380
// end else
48715: GO 48734
// PrepareHuman ( false , i , skill ) ;
48717: LD_INT 0
48719: PPUSH
48720: LD_VAR 0 8
48724: PPUSH
48725: LD_VAR 0 4
48729: PPUSH
48730: CALL_OW 380
// un := CreateHuman ;
48734: LD_ADDR_VAR 0 14
48738: PUSH
48739: CALL_OW 44
48743: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48744: LD_ADDR_VAR 0 7
48748: PUSH
48749: LD_VAR 0 7
48753: PPUSH
48754: LD_INT 1
48756: PPUSH
48757: LD_VAR 0 14
48761: PPUSH
48762: CALL_OW 2
48766: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48767: LD_VAR 0 14
48771: PPUSH
48772: LD_VAR 0 12
48776: PUSH
48777: LD_INT 1
48779: ARRAY
48780: PPUSH
48781: CALL_OW 52
// end ;
48785: GO 48420
48787: POP
48788: POP
// end ;
48789: GO 47720
48791: POP
48792: POP
// result := result ^ buildings ;
48793: LD_ADDR_VAR 0 7
48797: PUSH
48798: LD_VAR 0 7
48802: PUSH
48803: LD_VAR 0 18
48807: ADD
48808: ST_TO_ADDR
// end else
48809: GO 48952
// begin for i = 1 to personel do
48811: LD_ADDR_VAR 0 8
48815: PUSH
48816: DOUBLE
48817: LD_INT 1
48819: DEC
48820: ST_TO_ADDR
48821: LD_VAR 0 6
48825: PUSH
48826: FOR_TO
48827: IFFALSE 48950
// begin if i > 4 then
48829: LD_VAR 0 8
48833: PUSH
48834: LD_INT 4
48836: GREATER
48837: IFFALSE 48841
// break ;
48839: GO 48950
// x := personel [ i ] ;
48841: LD_ADDR_VAR 0 13
48845: PUSH
48846: LD_VAR 0 6
48850: PUSH
48851: LD_VAR 0 8
48855: ARRAY
48856: ST_TO_ADDR
// if x = - 1 then
48857: LD_VAR 0 13
48861: PUSH
48862: LD_INT 1
48864: NEG
48865: EQUAL
48866: IFFALSE 48870
// continue ;
48868: GO 48826
// PrepareHuman ( false , i , skill ) ;
48870: LD_INT 0
48872: PPUSH
48873: LD_VAR 0 8
48877: PPUSH
48878: LD_VAR 0 4
48882: PPUSH
48883: CALL_OW 380
// un := CreateHuman ;
48887: LD_ADDR_VAR 0 14
48891: PUSH
48892: CALL_OW 44
48896: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48897: LD_VAR 0 14
48901: PPUSH
48902: LD_VAR 0 1
48906: PPUSH
48907: CALL_OW 250
48911: PPUSH
48912: LD_VAR 0 1
48916: PPUSH
48917: CALL_OW 251
48921: PPUSH
48922: LD_INT 10
48924: PPUSH
48925: LD_INT 0
48927: PPUSH
48928: CALL_OW 50
// result := result ^ un ;
48932: LD_ADDR_VAR 0 7
48936: PUSH
48937: LD_VAR 0 7
48941: PUSH
48942: LD_VAR 0 14
48946: ADD
48947: ST_TO_ADDR
// end ;
48948: GO 48826
48950: POP
48951: POP
// end ; end ;
48952: LD_VAR 0 7
48956: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48957: LD_INT 0
48959: PPUSH
48960: PPUSH
48961: PPUSH
48962: PPUSH
48963: PPUSH
48964: PPUSH
48965: PPUSH
48966: PPUSH
48967: PPUSH
48968: PPUSH
48969: PPUSH
48970: PPUSH
48971: PPUSH
48972: PPUSH
48973: PPUSH
48974: PPUSH
// result := false ;
48975: LD_ADDR_VAR 0 3
48979: PUSH
48980: LD_INT 0
48982: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48983: LD_VAR 0 1
48987: NOT
48988: IFTRUE 49013
48990: PUSH
48991: LD_VAR 0 1
48995: PPUSH
48996: CALL_OW 266
49000: PUSH
49001: LD_INT 32
49003: PUSH
49004: LD_INT 33
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: IN
49011: NOT
49012: OR
49013: IFFALSE 49017
// exit ;
49015: GO 50152
// nat := GetNation ( tower ) ;
49017: LD_ADDR_VAR 0 12
49021: PUSH
49022: LD_VAR 0 1
49026: PPUSH
49027: CALL_OW 248
49031: ST_TO_ADDR
// side := GetSide ( tower ) ;
49032: LD_ADDR_VAR 0 16
49036: PUSH
49037: LD_VAR 0 1
49041: PPUSH
49042: CALL_OW 255
49046: ST_TO_ADDR
// x := GetX ( tower ) ;
49047: LD_ADDR_VAR 0 10
49051: PUSH
49052: LD_VAR 0 1
49056: PPUSH
49057: CALL_OW 250
49061: ST_TO_ADDR
// y := GetY ( tower ) ;
49062: LD_ADDR_VAR 0 11
49066: PUSH
49067: LD_VAR 0 1
49071: PPUSH
49072: CALL_OW 251
49076: ST_TO_ADDR
// if not x or not y then
49077: LD_VAR 0 10
49081: NOT
49082: IFTRUE 49091
49084: PUSH
49085: LD_VAR 0 11
49089: NOT
49090: OR
49091: IFFALSE 49095
// exit ;
49093: GO 50152
// weapon := 0 ;
49095: LD_ADDR_VAR 0 18
49099: PUSH
49100: LD_INT 0
49102: ST_TO_ADDR
// fac_list := [ ] ;
49103: LD_ADDR_VAR 0 17
49107: PUSH
49108: EMPTY
49109: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49110: LD_ADDR_VAR 0 6
49114: PUSH
49115: LD_VAR 0 1
49119: PPUSH
49120: CALL_OW 274
49124: PPUSH
49125: LD_VAR 0 2
49129: PPUSH
49130: LD_INT 0
49132: PPUSH
49133: CALL 46687 0 3
49137: PPUSH
49138: LD_INT 30
49140: PUSH
49141: LD_INT 3
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PPUSH
49148: CALL_OW 72
49152: ST_TO_ADDR
// if not factories then
49153: LD_VAR 0 6
49157: NOT
49158: IFFALSE 49162
// exit ;
49160: GO 50152
// for i in factories do
49162: LD_ADDR_VAR 0 8
49166: PUSH
49167: LD_VAR 0 6
49171: PUSH
49172: FOR_IN
49173: IFFALSE 49198
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49175: LD_ADDR_VAR 0 17
49179: PUSH
49180: LD_VAR 0 17
49184: PUSH
49185: LD_VAR 0 8
49189: PPUSH
49190: CALL_OW 478
49194: UNION
49195: ST_TO_ADDR
49196: GO 49172
49198: POP
49199: POP
// if not fac_list then
49200: LD_VAR 0 17
49204: NOT
49205: IFFALSE 49209
// exit ;
49207: GO 50152
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49209: LD_ADDR_VAR 0 5
49213: PUSH
49214: LD_INT 4
49216: PUSH
49217: LD_INT 5
49219: PUSH
49220: LD_INT 9
49222: PUSH
49223: LD_INT 10
49225: PUSH
49226: LD_INT 6
49228: PUSH
49229: LD_INT 7
49231: PUSH
49232: LD_INT 11
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 27
49246: PUSH
49247: LD_INT 28
49249: PUSH
49250: LD_INT 26
49252: PUSH
49253: LD_INT 30
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 43
49264: PUSH
49265: LD_INT 44
49267: PUSH
49268: LD_INT 46
49270: PUSH
49271: LD_INT 45
49273: PUSH
49274: LD_INT 47
49276: PUSH
49277: LD_INT 49
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: LIST
49292: PUSH
49293: LD_VAR 0 12
49297: ARRAY
49298: ST_TO_ADDR
// list := list isect fac_list ;
49299: LD_ADDR_VAR 0 5
49303: PUSH
49304: LD_VAR 0 5
49308: PUSH
49309: LD_VAR 0 17
49313: ISECT
49314: ST_TO_ADDR
// if not list then
49315: LD_VAR 0 5
49319: NOT
49320: IFFALSE 49324
// exit ;
49322: GO 50152
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49324: LD_VAR 0 12
49328: PUSH
49329: LD_INT 3
49331: EQUAL
49332: IFFALSE 49344
49334: PUSH
49335: LD_INT 49
49337: PUSH
49338: LD_VAR 0 5
49342: IN
49343: AND
49344: IFFALSE 49364
49346: PUSH
49347: LD_INT 31
49349: PPUSH
49350: LD_VAR 0 16
49354: PPUSH
49355: CALL_OW 321
49359: PUSH
49360: LD_INT 2
49362: EQUAL
49363: AND
49364: IFFALSE 49424
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49366: LD_INT 22
49368: PUSH
49369: LD_VAR 0 16
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 35
49380: PUSH
49381: LD_INT 49
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 91
49390: PUSH
49391: LD_VAR 0 1
49395: PUSH
49396: LD_INT 10
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: LIST
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: LIST
49408: PPUSH
49409: CALL_OW 69
49413: NOT
49414: IFFALSE 49424
// weapon := ru_time_lapser ;
49416: LD_ADDR_VAR 0 18
49420: PUSH
49421: LD_INT 49
49423: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49424: LD_VAR 0 12
49428: PUSH
49429: LD_INT 1
49431: PUSH
49432: LD_INT 2
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: IN
49439: IFFALSE 49463
49441: PUSH
49442: LD_INT 11
49444: PUSH
49445: LD_VAR 0 5
49449: IN
49450: IFTRUE 49462
49452: PUSH
49453: LD_INT 30
49455: PUSH
49456: LD_VAR 0 5
49460: IN
49461: OR
49462: AND
49463: IFFALSE 49483
49465: PUSH
49466: LD_INT 6
49468: PPUSH
49469: LD_VAR 0 16
49473: PPUSH
49474: CALL_OW 321
49478: PUSH
49479: LD_INT 2
49481: EQUAL
49482: AND
49483: IFFALSE 49650
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49485: LD_INT 22
49487: PUSH
49488: LD_VAR 0 16
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 2
49499: PUSH
49500: LD_INT 35
49502: PUSH
49503: LD_INT 11
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 35
49512: PUSH
49513: LD_INT 30
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 91
49527: PUSH
49528: LD_VAR 0 1
49532: PUSH
49533: LD_INT 18
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: LIST
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: LIST
49545: PPUSH
49546: CALL_OW 69
49550: NOT
49551: IFFALSE 49627
49553: PUSH
49554: LD_INT 22
49556: PUSH
49557: LD_VAR 0 16
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 2
49568: PUSH
49569: LD_INT 30
49571: PUSH
49572: LD_INT 32
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 30
49581: PUSH
49582: LD_INT 33
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 91
49596: PUSH
49597: LD_VAR 0 1
49601: PUSH
49602: LD_INT 12
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: LIST
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: LIST
49614: PUSH
49615: EMPTY
49616: LIST
49617: PPUSH
49618: CALL_OW 69
49622: PUSH
49623: LD_INT 2
49625: GREATER
49626: AND
49627: IFFALSE 49650
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49629: LD_ADDR_VAR 0 18
49633: PUSH
49634: LD_INT 11
49636: PUSH
49637: LD_INT 30
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_VAR 0 12
49648: ARRAY
49649: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49650: LD_VAR 0 18
49654: NOT
49655: IFFALSE 49675
49657: PUSH
49658: LD_INT 40
49660: PPUSH
49661: LD_VAR 0 16
49665: PPUSH
49666: CALL_OW 321
49670: PUSH
49671: LD_INT 2
49673: EQUAL
49674: AND
49675: IFFALSE 49711
49677: PUSH
49678: LD_INT 7
49680: PUSH
49681: LD_VAR 0 5
49685: IN
49686: IFTRUE 49698
49688: PUSH
49689: LD_INT 28
49691: PUSH
49692: LD_VAR 0 5
49696: IN
49697: OR
49698: IFTRUE 49710
49700: PUSH
49701: LD_INT 45
49703: PUSH
49704: LD_VAR 0 5
49708: IN
49709: OR
49710: AND
49711: IFFALSE 49965
// begin hex := GetHexInfo ( x , y ) ;
49713: LD_ADDR_VAR 0 4
49717: PUSH
49718: LD_VAR 0 10
49722: PPUSH
49723: LD_VAR 0 11
49727: PPUSH
49728: CALL_OW 546
49732: ST_TO_ADDR
// if hex [ 1 ] then
49733: LD_VAR 0 4
49737: PUSH
49738: LD_INT 1
49740: ARRAY
49741: IFFALSE 49745
// exit ;
49743: GO 50152
// height := hex [ 2 ] ;
49745: LD_ADDR_VAR 0 15
49749: PUSH
49750: LD_VAR 0 4
49754: PUSH
49755: LD_INT 2
49757: ARRAY
49758: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49759: LD_ADDR_VAR 0 14
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: LD_INT 2
49769: PUSH
49770: LD_INT 3
49772: PUSH
49773: LD_INT 5
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: ST_TO_ADDR
// for i in tmp do
49782: LD_ADDR_VAR 0 8
49786: PUSH
49787: LD_VAR 0 14
49791: PUSH
49792: FOR_IN
49793: IFFALSE 49963
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49795: LD_ADDR_VAR 0 9
49799: PUSH
49800: LD_VAR 0 10
49804: PPUSH
49805: LD_VAR 0 8
49809: PPUSH
49810: LD_INT 5
49812: PPUSH
49813: CALL_OW 272
49817: PUSH
49818: LD_VAR 0 11
49822: PPUSH
49823: LD_VAR 0 8
49827: PPUSH
49828: LD_INT 5
49830: PPUSH
49831: CALL_OW 273
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49840: LD_VAR 0 9
49844: PUSH
49845: LD_INT 1
49847: ARRAY
49848: PPUSH
49849: LD_VAR 0 9
49853: PUSH
49854: LD_INT 2
49856: ARRAY
49857: PPUSH
49858: CALL_OW 488
49862: IFFALSE 49961
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49864: LD_ADDR_VAR 0 4
49868: PUSH
49869: LD_VAR 0 9
49873: PUSH
49874: LD_INT 1
49876: ARRAY
49877: PPUSH
49878: LD_VAR 0 9
49882: PUSH
49883: LD_INT 2
49885: ARRAY
49886: PPUSH
49887: CALL_OW 546
49891: ST_TO_ADDR
// if hex [ 1 ] then
49892: LD_VAR 0 4
49896: PUSH
49897: LD_INT 1
49899: ARRAY
49900: IFFALSE 49904
// continue ;
49902: GO 49792
// h := hex [ 2 ] ;
49904: LD_ADDR_VAR 0 13
49908: PUSH
49909: LD_VAR 0 4
49913: PUSH
49914: LD_INT 2
49916: ARRAY
49917: ST_TO_ADDR
// if h + 7 < height then
49918: LD_VAR 0 13
49922: PUSH
49923: LD_INT 7
49925: PLUS
49926: PUSH
49927: LD_VAR 0 15
49931: LESS
49932: IFFALSE 49961
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49934: LD_ADDR_VAR 0 18
49938: PUSH
49939: LD_INT 7
49941: PUSH
49942: LD_INT 28
49944: PUSH
49945: LD_INT 45
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: LIST
49952: PUSH
49953: LD_VAR 0 12
49957: ARRAY
49958: ST_TO_ADDR
// break ;
49959: GO 49963
// end ; end ; end ;
49961: GO 49792
49963: POP
49964: POP
// end ; if not weapon then
49965: LD_VAR 0 18
49969: NOT
49970: IFFALSE 50030
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49972: LD_ADDR_VAR 0 5
49976: PUSH
49977: LD_VAR 0 5
49981: PUSH
49982: LD_INT 11
49984: PUSH
49985: LD_INT 30
49987: PUSH
49988: LD_INT 49
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: LIST
49995: DIFF
49996: ST_TO_ADDR
// if not list then
49997: LD_VAR 0 5
50001: NOT
50002: IFFALSE 50006
// exit ;
50004: GO 50152
// weapon := list [ rand ( 1 , list ) ] ;
50006: LD_ADDR_VAR 0 18
50010: PUSH
50011: LD_VAR 0 5
50015: PUSH
50016: LD_INT 1
50018: PPUSH
50019: LD_VAR 0 5
50023: PPUSH
50024: CALL_OW 12
50028: ARRAY
50029: ST_TO_ADDR
// end ; if weapon then
50030: LD_VAR 0 18
50034: IFFALSE 50152
// begin tmp := CostOfWeapon ( weapon ) ;
50036: LD_ADDR_VAR 0 14
50040: PUSH
50041: LD_VAR 0 18
50045: PPUSH
50046: CALL_OW 451
50050: ST_TO_ADDR
// j := GetBase ( tower ) ;
50051: LD_ADDR_VAR 0 9
50055: PUSH
50056: LD_VAR 0 1
50060: PPUSH
50061: CALL_OW 274
50065: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50066: LD_VAR 0 9
50070: PPUSH
50071: LD_INT 1
50073: PPUSH
50074: CALL_OW 275
50078: PUSH
50079: LD_VAR 0 14
50083: PUSH
50084: LD_INT 1
50086: ARRAY
50087: GREATEREQUAL
50088: IFFALSE 50114
50090: PUSH
50091: LD_VAR 0 9
50095: PPUSH
50096: LD_INT 2
50098: PPUSH
50099: CALL_OW 275
50103: PUSH
50104: LD_VAR 0 14
50108: PUSH
50109: LD_INT 2
50111: ARRAY
50112: GREATEREQUAL
50113: AND
50114: IFFALSE 50140
50116: PUSH
50117: LD_VAR 0 9
50121: PPUSH
50122: LD_INT 3
50124: PPUSH
50125: CALL_OW 275
50129: PUSH
50130: LD_VAR 0 14
50134: PUSH
50135: LD_INT 3
50137: ARRAY
50138: GREATEREQUAL
50139: AND
50140: IFFALSE 50152
// result := weapon ;
50142: LD_ADDR_VAR 0 3
50146: PUSH
50147: LD_VAR 0 18
50151: ST_TO_ADDR
// end ; end ;
50152: LD_VAR 0 3
50156: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50157: LD_INT 0
50159: PPUSH
50160: PPUSH
// result := true ;
50161: LD_ADDR_VAR 0 3
50165: PUSH
50166: LD_INT 1
50168: ST_TO_ADDR
// if array1 = array2 then
50169: LD_VAR 0 1
50173: PUSH
50174: LD_VAR 0 2
50178: EQUAL
50179: IFFALSE 50239
// begin for i = 1 to array1 do
50181: LD_ADDR_VAR 0 4
50185: PUSH
50186: DOUBLE
50187: LD_INT 1
50189: DEC
50190: ST_TO_ADDR
50191: LD_VAR 0 1
50195: PUSH
50196: FOR_TO
50197: IFFALSE 50235
// if array1 [ i ] <> array2 [ i ] then
50199: LD_VAR 0 1
50203: PUSH
50204: LD_VAR 0 4
50208: ARRAY
50209: PUSH
50210: LD_VAR 0 2
50214: PUSH
50215: LD_VAR 0 4
50219: ARRAY
50220: NONEQUAL
50221: IFFALSE 50233
// begin result := false ;
50223: LD_ADDR_VAR 0 3
50227: PUSH
50228: LD_INT 0
50230: ST_TO_ADDR
// break ;
50231: GO 50235
// end ;
50233: GO 50196
50235: POP
50236: POP
// end else
50237: GO 50247
// result := false ;
50239: LD_ADDR_VAR 0 3
50243: PUSH
50244: LD_INT 0
50246: ST_TO_ADDR
// end ;
50247: LD_VAR 0 3
50251: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50252: LD_INT 0
50254: PPUSH
50255: PPUSH
// if not array1 or not array2 then
50256: LD_VAR 0 1
50260: NOT
50261: IFTRUE 50270
50263: PUSH
50264: LD_VAR 0 2
50268: NOT
50269: OR
50270: IFFALSE 50274
// exit ;
50272: GO 50338
// result := true ;
50274: LD_ADDR_VAR 0 3
50278: PUSH
50279: LD_INT 1
50281: ST_TO_ADDR
// for i = 1 to array1 do
50282: LD_ADDR_VAR 0 4
50286: PUSH
50287: DOUBLE
50288: LD_INT 1
50290: DEC
50291: ST_TO_ADDR
50292: LD_VAR 0 1
50296: PUSH
50297: FOR_TO
50298: IFFALSE 50336
// if array1 [ i ] <> array2 [ i ] then
50300: LD_VAR 0 1
50304: PUSH
50305: LD_VAR 0 4
50309: ARRAY
50310: PUSH
50311: LD_VAR 0 2
50315: PUSH
50316: LD_VAR 0 4
50320: ARRAY
50321: NONEQUAL
50322: IFFALSE 50334
// begin result := false ;
50324: LD_ADDR_VAR 0 3
50328: PUSH
50329: LD_INT 0
50331: ST_TO_ADDR
// break ;
50332: GO 50336
// end ;
50334: GO 50297
50336: POP
50337: POP
// end ;
50338: LD_VAR 0 3
50342: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50343: LD_INT 0
50345: PPUSH
50346: PPUSH
50347: PPUSH
// pom := GetBase ( fac ) ;
50348: LD_ADDR_VAR 0 5
50352: PUSH
50353: LD_VAR 0 1
50357: PPUSH
50358: CALL_OW 274
50362: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50363: LD_ADDR_VAR 0 4
50367: PUSH
50368: LD_VAR 0 2
50372: PUSH
50373: LD_INT 1
50375: ARRAY
50376: PPUSH
50377: LD_VAR 0 2
50381: PUSH
50382: LD_INT 2
50384: ARRAY
50385: PPUSH
50386: LD_VAR 0 2
50390: PUSH
50391: LD_INT 3
50393: ARRAY
50394: PPUSH
50395: LD_VAR 0 2
50399: PUSH
50400: LD_INT 4
50402: ARRAY
50403: PPUSH
50404: CALL_OW 449
50408: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50409: LD_ADDR_VAR 0 3
50413: PUSH
50414: LD_VAR 0 5
50418: PPUSH
50419: LD_INT 1
50421: PPUSH
50422: CALL_OW 275
50426: PUSH
50427: LD_VAR 0 4
50431: PUSH
50432: LD_INT 1
50434: ARRAY
50435: GREATEREQUAL
50436: IFFALSE 50462
50438: PUSH
50439: LD_VAR 0 5
50443: PPUSH
50444: LD_INT 2
50446: PPUSH
50447: CALL_OW 275
50451: PUSH
50452: LD_VAR 0 4
50456: PUSH
50457: LD_INT 2
50459: ARRAY
50460: GREATEREQUAL
50461: AND
50462: IFFALSE 50488
50464: PUSH
50465: LD_VAR 0 5
50469: PPUSH
50470: LD_INT 3
50472: PPUSH
50473: CALL_OW 275
50477: PUSH
50478: LD_VAR 0 4
50482: PUSH
50483: LD_INT 3
50485: ARRAY
50486: GREATEREQUAL
50487: AND
50488: ST_TO_ADDR
// end ;
50489: LD_VAR 0 3
50493: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50494: LD_INT 0
50496: PPUSH
50497: PPUSH
50498: PPUSH
50499: PPUSH
// pom := GetBase ( building ) ;
50500: LD_ADDR_VAR 0 3
50504: PUSH
50505: LD_VAR 0 1
50509: PPUSH
50510: CALL_OW 274
50514: ST_TO_ADDR
// if not pom then
50515: LD_VAR 0 3
50519: NOT
50520: IFFALSE 50524
// exit ;
50522: GO 50698
// btype := GetBType ( building ) ;
50524: LD_ADDR_VAR 0 5
50528: PUSH
50529: LD_VAR 0 1
50533: PPUSH
50534: CALL_OW 266
50538: ST_TO_ADDR
// if btype = b_armoury then
50539: LD_VAR 0 5
50543: PUSH
50544: LD_INT 4
50546: EQUAL
50547: IFFALSE 50557
// btype := b_barracks ;
50549: LD_ADDR_VAR 0 5
50553: PUSH
50554: LD_INT 5
50556: ST_TO_ADDR
// if btype = b_depot then
50557: LD_VAR 0 5
50561: PUSH
50562: LD_INT 0
50564: EQUAL
50565: IFFALSE 50575
// btype := b_warehouse ;
50567: LD_ADDR_VAR 0 5
50571: PUSH
50572: LD_INT 1
50574: ST_TO_ADDR
// if btype = b_workshop then
50575: LD_VAR 0 5
50579: PUSH
50580: LD_INT 2
50582: EQUAL
50583: IFFALSE 50593
// btype := b_factory ;
50585: LD_ADDR_VAR 0 5
50589: PUSH
50590: LD_INT 3
50592: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50593: LD_ADDR_VAR 0 4
50597: PUSH
50598: LD_VAR 0 5
50602: PPUSH
50603: LD_VAR 0 1
50607: PPUSH
50608: CALL_OW 248
50612: PPUSH
50613: CALL_OW 450
50617: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50618: LD_ADDR_VAR 0 2
50622: PUSH
50623: LD_VAR 0 3
50627: PPUSH
50628: LD_INT 1
50630: PPUSH
50631: CALL_OW 275
50635: PUSH
50636: LD_VAR 0 4
50640: PUSH
50641: LD_INT 1
50643: ARRAY
50644: GREATEREQUAL
50645: IFFALSE 50671
50647: PUSH
50648: LD_VAR 0 3
50652: PPUSH
50653: LD_INT 2
50655: PPUSH
50656: CALL_OW 275
50660: PUSH
50661: LD_VAR 0 4
50665: PUSH
50666: LD_INT 2
50668: ARRAY
50669: GREATEREQUAL
50670: AND
50671: IFFALSE 50697
50673: PUSH
50674: LD_VAR 0 3
50678: PPUSH
50679: LD_INT 3
50681: PPUSH
50682: CALL_OW 275
50686: PUSH
50687: LD_VAR 0 4
50691: PUSH
50692: LD_INT 3
50694: ARRAY
50695: GREATEREQUAL
50696: AND
50697: ST_TO_ADDR
// end ;
50698: LD_VAR 0 2
50702: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50703: LD_INT 0
50705: PPUSH
50706: PPUSH
50707: PPUSH
// pom := GetBase ( building ) ;
50708: LD_ADDR_VAR 0 4
50712: PUSH
50713: LD_VAR 0 1
50717: PPUSH
50718: CALL_OW 274
50722: ST_TO_ADDR
// if not pom then
50723: LD_VAR 0 4
50727: NOT
50728: IFFALSE 50732
// exit ;
50730: GO 50837
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50732: LD_ADDR_VAR 0 5
50736: PUSH
50737: LD_VAR 0 2
50741: PPUSH
50742: LD_VAR 0 1
50746: PPUSH
50747: CALL_OW 248
50751: PPUSH
50752: CALL_OW 450
50756: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50757: LD_ADDR_VAR 0 3
50761: PUSH
50762: LD_VAR 0 4
50766: PPUSH
50767: LD_INT 1
50769: PPUSH
50770: CALL_OW 275
50774: PUSH
50775: LD_VAR 0 5
50779: PUSH
50780: LD_INT 1
50782: ARRAY
50783: GREATEREQUAL
50784: IFFALSE 50810
50786: PUSH
50787: LD_VAR 0 4
50791: PPUSH
50792: LD_INT 2
50794: PPUSH
50795: CALL_OW 275
50799: PUSH
50800: LD_VAR 0 5
50804: PUSH
50805: LD_INT 2
50807: ARRAY
50808: GREATEREQUAL
50809: AND
50810: IFFALSE 50836
50812: PUSH
50813: LD_VAR 0 4
50817: PPUSH
50818: LD_INT 3
50820: PPUSH
50821: CALL_OW 275
50825: PUSH
50826: LD_VAR 0 5
50830: PUSH
50831: LD_INT 3
50833: ARRAY
50834: GREATEREQUAL
50835: AND
50836: ST_TO_ADDR
// end ;
50837: LD_VAR 0 3
50841: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50842: LD_INT 0
50844: PPUSH
50845: PPUSH
50846: PPUSH
50847: PPUSH
50848: PPUSH
50849: PPUSH
50850: PPUSH
50851: PPUSH
50852: PPUSH
50853: PPUSH
50854: PPUSH
// result := false ;
50855: LD_ADDR_VAR 0 8
50859: PUSH
50860: LD_INT 0
50862: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50863: LD_VAR 0 5
50867: NOT
50868: IFTRUE 50877
50870: PUSH
50871: LD_VAR 0 1
50875: NOT
50876: OR
50877: IFTRUE 50886
50879: PUSH
50880: LD_VAR 0 2
50884: NOT
50885: OR
50886: IFTRUE 50895
50888: PUSH
50889: LD_VAR 0 3
50893: NOT
50894: OR
50895: IFFALSE 50899
// exit ;
50897: GO 51725
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50899: LD_ADDR_VAR 0 14
50903: PUSH
50904: LD_VAR 0 1
50908: PPUSH
50909: LD_VAR 0 2
50913: PPUSH
50914: LD_VAR 0 3
50918: PPUSH
50919: LD_VAR 0 4
50923: PPUSH
50924: LD_VAR 0 5
50928: PUSH
50929: LD_INT 1
50931: ARRAY
50932: PPUSH
50933: CALL_OW 248
50937: PPUSH
50938: LD_INT 0
50940: PPUSH
50941: CALL 53006 0 6
50945: ST_TO_ADDR
// if not hexes then
50946: LD_VAR 0 14
50950: NOT
50951: IFFALSE 50955
// exit ;
50953: GO 51725
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50955: LD_ADDR_VAR 0 17
50959: PUSH
50960: LD_VAR 0 5
50964: PPUSH
50965: LD_INT 22
50967: PUSH
50968: LD_VAR 0 13
50972: PPUSH
50973: CALL_OW 255
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 2
50984: PUSH
50985: LD_INT 30
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 30
50997: PUSH
50998: LD_INT 1
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: LIST
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PPUSH
51014: CALL_OW 72
51018: ST_TO_ADDR
// for i = 1 to hexes do
51019: LD_ADDR_VAR 0 9
51023: PUSH
51024: DOUBLE
51025: LD_INT 1
51027: DEC
51028: ST_TO_ADDR
51029: LD_VAR 0 14
51033: PUSH
51034: FOR_TO
51035: IFFALSE 51723
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51037: LD_ADDR_VAR 0 13
51041: PUSH
51042: LD_VAR 0 14
51046: PUSH
51047: LD_VAR 0 9
51051: ARRAY
51052: PUSH
51053: LD_INT 1
51055: ARRAY
51056: PPUSH
51057: LD_VAR 0 14
51061: PUSH
51062: LD_VAR 0 9
51066: ARRAY
51067: PUSH
51068: LD_INT 2
51070: ARRAY
51071: PPUSH
51072: CALL_OW 428
51076: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51077: LD_VAR 0 14
51081: PUSH
51082: LD_VAR 0 9
51086: ARRAY
51087: PUSH
51088: LD_INT 1
51090: ARRAY
51091: PPUSH
51092: LD_VAR 0 14
51096: PUSH
51097: LD_VAR 0 9
51101: ARRAY
51102: PUSH
51103: LD_INT 2
51105: ARRAY
51106: PPUSH
51107: CALL_OW 351
51111: IFTRUE 51150
51113: PUSH
51114: LD_VAR 0 14
51118: PUSH
51119: LD_VAR 0 9
51123: ARRAY
51124: PUSH
51125: LD_INT 1
51127: ARRAY
51128: PPUSH
51129: LD_VAR 0 14
51133: PUSH
51134: LD_VAR 0 9
51138: ARRAY
51139: PUSH
51140: LD_INT 2
51142: ARRAY
51143: PPUSH
51144: CALL_OW 488
51148: NOT
51149: OR
51150: IFTRUE 51167
51152: PUSH
51153: LD_VAR 0 13
51157: PPUSH
51158: CALL_OW 247
51162: PUSH
51163: LD_INT 3
51165: EQUAL
51166: OR
51167: IFFALSE 51173
// exit ;
51169: POP
51170: POP
51171: GO 51725
// if not tmp then
51173: LD_VAR 0 13
51177: NOT
51178: IFFALSE 51182
// continue ;
51180: GO 51034
// result := true ;
51182: LD_ADDR_VAR 0 8
51186: PUSH
51187: LD_INT 1
51189: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51190: LD_VAR 0 6
51194: IFFALSE 51211
51196: PUSH
51197: LD_VAR 0 13
51201: PPUSH
51202: CALL_OW 247
51206: PUSH
51207: LD_INT 2
51209: EQUAL
51210: AND
51211: IFFALSE 51228
51213: PUSH
51214: LD_VAR 0 13
51218: PPUSH
51219: CALL_OW 263
51223: PUSH
51224: LD_INT 1
51226: EQUAL
51227: AND
51228: IFFALSE 51392
// begin if IsDrivenBy ( tmp ) then
51230: LD_VAR 0 13
51234: PPUSH
51235: CALL_OW 311
51239: IFFALSE 51243
// continue ;
51241: GO 51034
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51243: LD_VAR 0 6
51247: PPUSH
51248: LD_INT 3
51250: PUSH
51251: LD_INT 60
51253: PUSH
51254: EMPTY
51255: LIST
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 3
51263: PUSH
51264: LD_INT 55
51266: PUSH
51267: EMPTY
51268: LIST
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PPUSH
51278: CALL_OW 72
51282: IFFALSE 51390
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51284: LD_ADDR_VAR 0 18
51288: PUSH
51289: LD_VAR 0 6
51293: PPUSH
51294: LD_INT 3
51296: PUSH
51297: LD_INT 60
51299: PUSH
51300: EMPTY
51301: LIST
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 3
51309: PUSH
51310: LD_INT 55
51312: PUSH
51313: EMPTY
51314: LIST
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PPUSH
51324: CALL_OW 72
51328: PUSH
51329: LD_INT 1
51331: ARRAY
51332: ST_TO_ADDR
// if IsInUnit ( driver ) then
51333: LD_VAR 0 18
51337: PPUSH
51338: CALL_OW 310
51342: IFFALSE 51353
// ComExit ( driver ) ;
51344: LD_VAR 0 18
51348: PPUSH
51349: CALL 77006 0 1
// AddComEnterUnit ( driver , tmp ) ;
51353: LD_VAR 0 18
51357: PPUSH
51358: LD_VAR 0 13
51362: PPUSH
51363: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51367: LD_VAR 0 18
51371: PPUSH
51372: LD_VAR 0 7
51376: PPUSH
51377: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51381: LD_VAR 0 18
51385: PPUSH
51386: CALL_OW 181
// end ; continue ;
51390: GO 51034
// end ; if not cleaners or not tmp in cleaners then
51392: LD_VAR 0 6
51396: NOT
51397: IFTRUE 51412
51399: PUSH
51400: LD_VAR 0 13
51404: PUSH
51405: LD_VAR 0 6
51409: IN
51410: NOT
51411: OR
51412: IFFALSE 51721
// begin if dep then
51414: LD_VAR 0 17
51418: IFFALSE 51554
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51420: LD_ADDR_VAR 0 16
51424: PUSH
51425: LD_VAR 0 17
51429: PUSH
51430: LD_INT 1
51432: ARRAY
51433: PPUSH
51434: CALL_OW 250
51438: PPUSH
51439: LD_VAR 0 17
51443: PUSH
51444: LD_INT 1
51446: ARRAY
51447: PPUSH
51448: CALL_OW 254
51452: PPUSH
51453: LD_INT 5
51455: PPUSH
51456: CALL_OW 272
51460: PUSH
51461: LD_VAR 0 17
51465: PUSH
51466: LD_INT 1
51468: ARRAY
51469: PPUSH
51470: CALL_OW 251
51474: PPUSH
51475: LD_VAR 0 17
51479: PUSH
51480: LD_INT 1
51482: ARRAY
51483: PPUSH
51484: CALL_OW 254
51488: PPUSH
51489: LD_INT 5
51491: PPUSH
51492: CALL_OW 273
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51501: LD_VAR 0 16
51505: PUSH
51506: LD_INT 1
51508: ARRAY
51509: PPUSH
51510: LD_VAR 0 16
51514: PUSH
51515: LD_INT 2
51517: ARRAY
51518: PPUSH
51519: CALL_OW 488
51523: IFFALSE 51554
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51525: LD_VAR 0 13
51529: PPUSH
51530: LD_VAR 0 16
51534: PUSH
51535: LD_INT 1
51537: ARRAY
51538: PPUSH
51539: LD_VAR 0 16
51543: PUSH
51544: LD_INT 2
51546: ARRAY
51547: PPUSH
51548: CALL_OW 111
// continue ;
51552: GO 51034
// end ; end ; r := GetDir ( tmp ) ;
51554: LD_ADDR_VAR 0 15
51558: PUSH
51559: LD_VAR 0 13
51563: PPUSH
51564: CALL_OW 254
51568: ST_TO_ADDR
// if r = 5 then
51569: LD_VAR 0 15
51573: PUSH
51574: LD_INT 5
51576: EQUAL
51577: IFFALSE 51587
// r := 0 ;
51579: LD_ADDR_VAR 0 15
51583: PUSH
51584: LD_INT 0
51586: ST_TO_ADDR
// for j = r to 5 do
51587: LD_ADDR_VAR 0 10
51591: PUSH
51592: DOUBLE
51593: LD_VAR 0 15
51597: DEC
51598: ST_TO_ADDR
51599: LD_INT 5
51601: PUSH
51602: FOR_TO
51603: IFFALSE 51719
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51605: LD_ADDR_VAR 0 11
51609: PUSH
51610: LD_VAR 0 13
51614: PPUSH
51615: CALL_OW 250
51619: PPUSH
51620: LD_VAR 0 10
51624: PPUSH
51625: LD_INT 2
51627: PPUSH
51628: CALL_OW 272
51632: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51633: LD_ADDR_VAR 0 12
51637: PUSH
51638: LD_VAR 0 13
51642: PPUSH
51643: CALL_OW 251
51647: PPUSH
51648: LD_VAR 0 10
51652: PPUSH
51653: LD_INT 2
51655: PPUSH
51656: CALL_OW 273
51660: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51661: LD_VAR 0 11
51665: PPUSH
51666: LD_VAR 0 12
51670: PPUSH
51671: CALL_OW 488
51675: IFFALSE 51694
51677: PUSH
51678: LD_VAR 0 11
51682: PPUSH
51683: LD_VAR 0 12
51687: PPUSH
51688: CALL_OW 428
51692: NOT
51693: AND
51694: IFFALSE 51717
// begin ComMoveXY ( tmp , _x , _y ) ;
51696: LD_VAR 0 13
51700: PPUSH
51701: LD_VAR 0 11
51705: PPUSH
51706: LD_VAR 0 12
51710: PPUSH
51711: CALL_OW 111
// break ;
51715: GO 51719
// end ; end ;
51717: GO 51602
51719: POP
51720: POP
// end ; end ;
51721: GO 51034
51723: POP
51724: POP
// end ;
51725: LD_VAR 0 8
51729: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51730: LD_INT 0
51732: PPUSH
// result := true ;
51733: LD_ADDR_VAR 0 3
51737: PUSH
51738: LD_INT 1
51740: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51741: LD_VAR 0 2
51745: PUSH
51746: LD_INT 24
51748: DOUBLE
51749: EQUAL
51750: IFTRUE 51760
51752: LD_INT 33
51754: DOUBLE
51755: EQUAL
51756: IFTRUE 51760
51758: GO 51785
51760: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51761: LD_ADDR_VAR 0 3
51765: PUSH
51766: LD_INT 32
51768: PPUSH
51769: LD_VAR 0 1
51773: PPUSH
51774: CALL_OW 321
51778: PUSH
51779: LD_INT 2
51781: EQUAL
51782: ST_TO_ADDR
51783: GO 52101
51785: LD_INT 20
51787: DOUBLE
51788: EQUAL
51789: IFTRUE 51793
51791: GO 51818
51793: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51794: LD_ADDR_VAR 0 3
51798: PUSH
51799: LD_INT 6
51801: PPUSH
51802: LD_VAR 0 1
51806: PPUSH
51807: CALL_OW 321
51811: PUSH
51812: LD_INT 2
51814: EQUAL
51815: ST_TO_ADDR
51816: GO 52101
51818: LD_INT 22
51820: DOUBLE
51821: EQUAL
51822: IFTRUE 51832
51824: LD_INT 36
51826: DOUBLE
51827: EQUAL
51828: IFTRUE 51832
51830: GO 51857
51832: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51833: LD_ADDR_VAR 0 3
51837: PUSH
51838: LD_INT 15
51840: PPUSH
51841: LD_VAR 0 1
51845: PPUSH
51846: CALL_OW 321
51850: PUSH
51851: LD_INT 2
51853: EQUAL
51854: ST_TO_ADDR
51855: GO 52101
51857: LD_INT 30
51859: DOUBLE
51860: EQUAL
51861: IFTRUE 51865
51863: GO 51890
51865: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51866: LD_ADDR_VAR 0 3
51870: PUSH
51871: LD_INT 20
51873: PPUSH
51874: LD_VAR 0 1
51878: PPUSH
51879: CALL_OW 321
51883: PUSH
51884: LD_INT 2
51886: EQUAL
51887: ST_TO_ADDR
51888: GO 52101
51890: LD_INT 28
51892: DOUBLE
51893: EQUAL
51894: IFTRUE 51904
51896: LD_INT 21
51898: DOUBLE
51899: EQUAL
51900: IFTRUE 51904
51902: GO 51929
51904: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51905: LD_ADDR_VAR 0 3
51909: PUSH
51910: LD_INT 21
51912: PPUSH
51913: LD_VAR 0 1
51917: PPUSH
51918: CALL_OW 321
51922: PUSH
51923: LD_INT 2
51925: EQUAL
51926: ST_TO_ADDR
51927: GO 52101
51929: LD_INT 16
51931: DOUBLE
51932: EQUAL
51933: IFTRUE 51937
51935: GO 51962
51937: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51938: LD_ADDR_VAR 0 3
51942: PUSH
51943: LD_INT 84
51945: PPUSH
51946: LD_VAR 0 1
51950: PPUSH
51951: CALL_OW 321
51955: PUSH
51956: LD_INT 2
51958: EQUAL
51959: ST_TO_ADDR
51960: GO 52101
51962: LD_INT 19
51964: DOUBLE
51965: EQUAL
51966: IFTRUE 51976
51968: LD_INT 23
51970: DOUBLE
51971: EQUAL
51972: IFTRUE 51976
51974: GO 52001
51976: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51977: LD_ADDR_VAR 0 3
51981: PUSH
51982: LD_INT 83
51984: PPUSH
51985: LD_VAR 0 1
51989: PPUSH
51990: CALL_OW 321
51994: PUSH
51995: LD_INT 2
51997: EQUAL
51998: ST_TO_ADDR
51999: GO 52101
52001: LD_INT 17
52003: DOUBLE
52004: EQUAL
52005: IFTRUE 52009
52007: GO 52034
52009: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52010: LD_ADDR_VAR 0 3
52014: PUSH
52015: LD_INT 39
52017: PPUSH
52018: LD_VAR 0 1
52022: PPUSH
52023: CALL_OW 321
52027: PUSH
52028: LD_INT 2
52030: EQUAL
52031: ST_TO_ADDR
52032: GO 52101
52034: LD_INT 18
52036: DOUBLE
52037: EQUAL
52038: IFTRUE 52042
52040: GO 52067
52042: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52043: LD_ADDR_VAR 0 3
52047: PUSH
52048: LD_INT 40
52050: PPUSH
52051: LD_VAR 0 1
52055: PPUSH
52056: CALL_OW 321
52060: PUSH
52061: LD_INT 2
52063: EQUAL
52064: ST_TO_ADDR
52065: GO 52101
52067: LD_INT 27
52069: DOUBLE
52070: EQUAL
52071: IFTRUE 52075
52073: GO 52100
52075: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52076: LD_ADDR_VAR 0 3
52080: PUSH
52081: LD_INT 35
52083: PPUSH
52084: LD_VAR 0 1
52088: PPUSH
52089: CALL_OW 321
52093: PUSH
52094: LD_INT 2
52096: EQUAL
52097: ST_TO_ADDR
52098: GO 52101
52100: POP
// end ;
52101: LD_VAR 0 3
52105: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52106: LD_INT 0
52108: PPUSH
52109: PPUSH
52110: PPUSH
52111: PPUSH
52112: PPUSH
52113: PPUSH
52114: PPUSH
52115: PPUSH
52116: PPUSH
52117: PPUSH
52118: PPUSH
// result := false ;
52119: LD_ADDR_VAR 0 6
52123: PUSH
52124: LD_INT 0
52126: ST_TO_ADDR
// if btype = b_depot then
52127: LD_VAR 0 2
52131: PUSH
52132: LD_INT 0
52134: EQUAL
52135: IFFALSE 52147
// begin result := true ;
52137: LD_ADDR_VAR 0 6
52141: PUSH
52142: LD_INT 1
52144: ST_TO_ADDR
// exit ;
52145: GO 53001
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52147: LD_VAR 0 1
52151: NOT
52152: IFTRUE 52177
52154: PUSH
52155: LD_VAR 0 1
52159: PPUSH
52160: CALL_OW 266
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: IN
52175: NOT
52176: OR
52177: IFTRUE 52186
52179: PUSH
52180: LD_VAR 0 2
52184: NOT
52185: OR
52186: IFTRUE 52222
52188: PUSH
52189: LD_VAR 0 5
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: LD_INT 1
52199: PUSH
52200: LD_INT 2
52202: PUSH
52203: LD_INT 3
52205: PUSH
52206: LD_INT 4
52208: PUSH
52209: LD_INT 5
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: IN
52220: NOT
52221: OR
52222: IFTRUE 52241
52224: PUSH
52225: LD_VAR 0 3
52229: PPUSH
52230: LD_VAR 0 4
52234: PPUSH
52235: CALL_OW 488
52239: NOT
52240: OR
52241: IFFALSE 52245
// exit ;
52243: GO 53001
// side := GetSide ( depot ) ;
52245: LD_ADDR_VAR 0 9
52249: PUSH
52250: LD_VAR 0 1
52254: PPUSH
52255: CALL_OW 255
52259: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52260: LD_VAR 0 9
52264: PPUSH
52265: LD_VAR 0 2
52269: PPUSH
52270: CALL 51730 0 2
52274: NOT
52275: IFFALSE 52279
// exit ;
52277: GO 53001
// pom := GetBase ( depot ) ;
52279: LD_ADDR_VAR 0 10
52283: PUSH
52284: LD_VAR 0 1
52288: PPUSH
52289: CALL_OW 274
52293: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52294: LD_ADDR_VAR 0 11
52298: PUSH
52299: LD_VAR 0 2
52303: PPUSH
52304: LD_VAR 0 1
52308: PPUSH
52309: CALL_OW 248
52313: PPUSH
52314: CALL_OW 450
52318: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52319: LD_VAR 0 10
52323: PPUSH
52324: LD_INT 1
52326: PPUSH
52327: CALL_OW 275
52331: PUSH
52332: LD_VAR 0 11
52336: PUSH
52337: LD_INT 1
52339: ARRAY
52340: GREATEREQUAL
52341: IFFALSE 52367
52343: PUSH
52344: LD_VAR 0 10
52348: PPUSH
52349: LD_INT 2
52351: PPUSH
52352: CALL_OW 275
52356: PUSH
52357: LD_VAR 0 11
52361: PUSH
52362: LD_INT 2
52364: ARRAY
52365: GREATEREQUAL
52366: AND
52367: IFFALSE 52393
52369: PUSH
52370: LD_VAR 0 10
52374: PPUSH
52375: LD_INT 3
52377: PPUSH
52378: CALL_OW 275
52382: PUSH
52383: LD_VAR 0 11
52387: PUSH
52388: LD_INT 3
52390: ARRAY
52391: GREATEREQUAL
52392: AND
52393: NOT
52394: IFFALSE 52398
// exit ;
52396: GO 53001
// if GetBType ( depot ) = b_depot then
52398: LD_VAR 0 1
52402: PPUSH
52403: CALL_OW 266
52407: PUSH
52408: LD_INT 0
52410: EQUAL
52411: IFFALSE 52423
// dist := 28 else
52413: LD_ADDR_VAR 0 14
52417: PUSH
52418: LD_INT 28
52420: ST_TO_ADDR
52421: GO 52431
// dist := 36 ;
52423: LD_ADDR_VAR 0 14
52427: PUSH
52428: LD_INT 36
52430: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52431: LD_VAR 0 1
52435: PPUSH
52436: LD_VAR 0 3
52440: PPUSH
52441: LD_VAR 0 4
52445: PPUSH
52446: CALL_OW 297
52450: PUSH
52451: LD_VAR 0 14
52455: GREATER
52456: IFFALSE 52460
// exit ;
52458: GO 53001
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52460: LD_ADDR_VAR 0 12
52464: PUSH
52465: LD_VAR 0 2
52469: PPUSH
52470: LD_VAR 0 3
52474: PPUSH
52475: LD_VAR 0 4
52479: PPUSH
52480: LD_VAR 0 5
52484: PPUSH
52485: LD_VAR 0 1
52489: PPUSH
52490: CALL_OW 248
52494: PPUSH
52495: LD_INT 0
52497: PPUSH
52498: CALL 53006 0 6
52502: ST_TO_ADDR
// if not hexes then
52503: LD_VAR 0 12
52507: NOT
52508: IFFALSE 52512
// exit ;
52510: GO 53001
// hex := GetHexInfo ( x , y ) ;
52512: LD_ADDR_VAR 0 15
52516: PUSH
52517: LD_VAR 0 3
52521: PPUSH
52522: LD_VAR 0 4
52526: PPUSH
52527: CALL_OW 546
52531: ST_TO_ADDR
// if hex [ 1 ] then
52532: LD_VAR 0 15
52536: PUSH
52537: LD_INT 1
52539: ARRAY
52540: IFFALSE 52544
// exit ;
52542: GO 53001
// height := hex [ 2 ] ;
52544: LD_ADDR_VAR 0 13
52548: PUSH
52549: LD_VAR 0 15
52553: PUSH
52554: LD_INT 2
52556: ARRAY
52557: ST_TO_ADDR
// for i = 1 to hexes do
52558: LD_ADDR_VAR 0 7
52562: PUSH
52563: DOUBLE
52564: LD_INT 1
52566: DEC
52567: ST_TO_ADDR
52568: LD_VAR 0 12
52572: PUSH
52573: FOR_TO
52574: IFFALSE 52918
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52576: LD_VAR 0 12
52580: PUSH
52581: LD_VAR 0 7
52585: ARRAY
52586: PUSH
52587: LD_INT 1
52589: ARRAY
52590: PPUSH
52591: LD_VAR 0 12
52595: PUSH
52596: LD_VAR 0 7
52600: ARRAY
52601: PUSH
52602: LD_INT 2
52604: ARRAY
52605: PPUSH
52606: CALL_OW 488
52610: NOT
52611: IFTRUE 52653
52613: PUSH
52614: LD_VAR 0 12
52618: PUSH
52619: LD_VAR 0 7
52623: ARRAY
52624: PUSH
52625: LD_INT 1
52627: ARRAY
52628: PPUSH
52629: LD_VAR 0 12
52633: PUSH
52634: LD_VAR 0 7
52638: ARRAY
52639: PUSH
52640: LD_INT 2
52642: ARRAY
52643: PPUSH
52644: CALL_OW 428
52648: PUSH
52649: LD_INT 0
52651: GREATER
52652: OR
52653: IFTRUE 52691
52655: PUSH
52656: LD_VAR 0 12
52660: PUSH
52661: LD_VAR 0 7
52665: ARRAY
52666: PUSH
52667: LD_INT 1
52669: ARRAY
52670: PPUSH
52671: LD_VAR 0 12
52675: PUSH
52676: LD_VAR 0 7
52680: ARRAY
52681: PUSH
52682: LD_INT 2
52684: ARRAY
52685: PPUSH
52686: CALL_OW 351
52690: OR
52691: IFFALSE 52697
// exit ;
52693: POP
52694: POP
52695: GO 53001
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52697: LD_ADDR_VAR 0 8
52701: PUSH
52702: LD_VAR 0 12
52706: PUSH
52707: LD_VAR 0 7
52711: ARRAY
52712: PUSH
52713: LD_INT 1
52715: ARRAY
52716: PPUSH
52717: LD_VAR 0 12
52721: PUSH
52722: LD_VAR 0 7
52726: ARRAY
52727: PUSH
52728: LD_INT 2
52730: ARRAY
52731: PPUSH
52732: CALL_OW 546
52736: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52737: LD_VAR 0 8
52741: PUSH
52742: LD_INT 1
52744: ARRAY
52745: IFTRUE 52767
52747: PUSH
52748: LD_VAR 0 8
52752: PUSH
52753: LD_INT 2
52755: ARRAY
52756: PUSH
52757: LD_VAR 0 13
52761: PUSH
52762: LD_INT 2
52764: PLUS
52765: GREATER
52766: OR
52767: IFTRUE 52789
52769: PUSH
52770: LD_VAR 0 8
52774: PUSH
52775: LD_INT 2
52777: ARRAY
52778: PUSH
52779: LD_VAR 0 13
52783: PUSH
52784: LD_INT 2
52786: MINUS
52787: LESS
52788: OR
52789: IFTRUE 52857
52791: PUSH
52792: LD_VAR 0 8
52796: PUSH
52797: LD_INT 3
52799: ARRAY
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: LD_INT 8
52806: PUSH
52807: LD_INT 9
52809: PUSH
52810: LD_INT 10
52812: PUSH
52813: LD_INT 11
52815: PUSH
52816: LD_INT 12
52818: PUSH
52819: LD_INT 13
52821: PUSH
52822: LD_INT 16
52824: PUSH
52825: LD_INT 17
52827: PUSH
52828: LD_INT 18
52830: PUSH
52831: LD_INT 19
52833: PUSH
52834: LD_INT 20
52836: PUSH
52837: LD_INT 21
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: IN
52855: NOT
52856: OR
52857: IFTRUE 52870
52859: PUSH
52860: LD_VAR 0 8
52864: PUSH
52865: LD_INT 5
52867: ARRAY
52868: NOT
52869: OR
52870: IFTRUE 52910
52872: PUSH
52873: LD_VAR 0 8
52877: PUSH
52878: LD_INT 6
52880: ARRAY
52881: PUSH
52882: LD_INT 1
52884: PUSH
52885: LD_INT 2
52887: PUSH
52888: LD_INT 7
52890: PUSH
52891: LD_INT 9
52893: PUSH
52894: LD_INT 10
52896: PUSH
52897: LD_INT 11
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: IN
52908: NOT
52909: OR
52910: IFFALSE 52916
// exit ;
52912: POP
52913: POP
52914: GO 53001
// end ;
52916: GO 52573
52918: POP
52919: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52920: LD_VAR 0 9
52924: PPUSH
52925: LD_VAR 0 3
52929: PPUSH
52930: LD_VAR 0 4
52934: PPUSH
52935: LD_INT 20
52937: PPUSH
52938: CALL 44820 0 4
52942: PUSH
52943: LD_INT 4
52945: ARRAY
52946: IFFALSE 52950
// exit ;
52948: GO 53001
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52950: LD_VAR 0 2
52954: PUSH
52955: LD_INT 29
52957: PUSH
52958: LD_INT 30
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: IN
52965: IFFALSE 52989
52967: PUSH
52968: LD_VAR 0 3
52972: PPUSH
52973: LD_VAR 0 4
52977: PPUSH
52978: LD_VAR 0 9
52982: PPUSH
52983: CALL_OW 440
52987: NOT
52988: AND
52989: IFFALSE 52993
// exit ;
52991: GO 53001
// result := true ;
52993: LD_ADDR_VAR 0 6
52997: PUSH
52998: LD_INT 1
53000: ST_TO_ADDR
// end ;
53001: LD_VAR 0 6
53005: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53006: LD_INT 0
53008: PPUSH
53009: PPUSH
53010: PPUSH
53011: PPUSH
53012: PPUSH
53013: PPUSH
53014: PPUSH
53015: PPUSH
53016: PPUSH
53017: PPUSH
53018: PPUSH
53019: PPUSH
53020: PPUSH
53021: PPUSH
53022: PPUSH
53023: PPUSH
53024: PPUSH
53025: PPUSH
53026: PPUSH
53027: PPUSH
53028: PPUSH
53029: PPUSH
53030: PPUSH
53031: PPUSH
53032: PPUSH
53033: PPUSH
53034: PPUSH
53035: PPUSH
53036: PPUSH
53037: PPUSH
53038: PPUSH
53039: PPUSH
53040: PPUSH
53041: PPUSH
53042: PPUSH
53043: PPUSH
53044: PPUSH
53045: PPUSH
53046: PPUSH
53047: PPUSH
53048: PPUSH
53049: PPUSH
53050: PPUSH
53051: PPUSH
53052: PPUSH
53053: PPUSH
53054: PPUSH
53055: PPUSH
53056: PPUSH
53057: PPUSH
53058: PPUSH
53059: PPUSH
53060: PPUSH
53061: PPUSH
53062: PPUSH
53063: PPUSH
53064: PPUSH
53065: PPUSH
// result = [ ] ;
53066: LD_ADDR_VAR 0 7
53070: PUSH
53071: EMPTY
53072: ST_TO_ADDR
// temp_list = [ ] ;
53073: LD_ADDR_VAR 0 9
53077: PUSH
53078: EMPTY
53079: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53080: LD_VAR 0 4
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: LD_INT 2
53093: PUSH
53094: LD_INT 3
53096: PUSH
53097: LD_INT 4
53099: PUSH
53100: LD_INT 5
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: IN
53111: NOT
53112: IFTRUE 53155
53114: PUSH
53115: LD_VAR 0 1
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: LD_INT 1
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: IN
53130: IFFALSE 53154
53132: PUSH
53133: LD_VAR 0 5
53137: PUSH
53138: LD_INT 1
53140: PUSH
53141: LD_INT 2
53143: PUSH
53144: LD_INT 3
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: LIST
53151: IN
53152: NOT
53153: AND
53154: OR
53155: IFFALSE 53159
// exit ;
53157: GO 71558
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53159: LD_VAR 0 1
53163: PUSH
53164: LD_INT 6
53166: PUSH
53167: LD_INT 7
53169: PUSH
53170: LD_INT 8
53172: PUSH
53173: LD_INT 13
53175: PUSH
53176: LD_INT 12
53178: PUSH
53179: LD_INT 15
53181: PUSH
53182: LD_INT 11
53184: PUSH
53185: LD_INT 14
53187: PUSH
53188: LD_INT 10
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: IN
53202: IFFALSE 53212
// btype = b_lab ;
53204: LD_ADDR_VAR 0 1
53208: PUSH
53209: LD_INT 6
53211: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53212: LD_VAR 0 6
53216: PUSH
53217: LD_INT 0
53219: PUSH
53220: LD_INT 1
53222: PUSH
53223: LD_INT 2
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: LIST
53230: IN
53231: NOT
53232: IFTRUE 53300
53234: PUSH
53235: LD_VAR 0 1
53239: PUSH
53240: LD_INT 0
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: LD_INT 2
53248: PUSH
53249: LD_INT 3
53251: PUSH
53252: LD_INT 6
53254: PUSH
53255: LD_INT 36
53257: PUSH
53258: LD_INT 4
53260: PUSH
53261: LD_INT 5
53263: PUSH
53264: LD_INT 31
53266: PUSH
53267: LD_INT 32
53269: PUSH
53270: LD_INT 33
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: IN
53286: NOT
53287: IFFALSE 53299
53289: PUSH
53290: LD_VAR 0 6
53294: PUSH
53295: LD_INT 1
53297: EQUAL
53298: AND
53299: OR
53300: IFTRUE 53332
53302: PUSH
53303: LD_VAR 0 1
53307: PUSH
53308: LD_INT 2
53310: PUSH
53311: LD_INT 3
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: IN
53318: NOT
53319: IFFALSE 53331
53321: PUSH
53322: LD_VAR 0 6
53326: PUSH
53327: LD_INT 2
53329: EQUAL
53330: AND
53331: OR
53332: IFFALSE 53342
// mode = 0 ;
53334: LD_ADDR_VAR 0 6
53338: PUSH
53339: LD_INT 0
53341: ST_TO_ADDR
// case mode of 0 :
53342: LD_VAR 0 6
53346: PUSH
53347: LD_INT 0
53349: DOUBLE
53350: EQUAL
53351: IFTRUE 53355
53353: GO 64808
53355: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53356: LD_ADDR_VAR 0 11
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 1
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: LD_INT 1
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: LD_INT 2
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: LD_INT 2
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: PUSH
53461: LD_INT 1
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: LD_INT 2
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: LD_INT 2
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 1
53491: NEG
53492: PUSH
53493: LD_INT 1
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: LD_INT 3
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 0
53512: PUSH
53513: LD_INT 3
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 1
53522: NEG
53523: PUSH
53524: LD_INT 2
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53549: LD_ADDR_VAR 0 12
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 1
53607: NEG
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: LD_INT 1
53633: NEG
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 2
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 2
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: LD_INT 1
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 2
53672: NEG
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 2
53683: NEG
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 2
53695: NEG
53696: PUSH
53697: LD_INT 1
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 3
53706: NEG
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 3
53717: NEG
53718: PUSH
53719: LD_INT 1
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53745: LD_ADDR_VAR 0 13
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: LD_INT 1
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: LD_INT 0
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: LD_INT 2
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 2
53838: PUSH
53839: LD_INT 1
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 2
53848: PUSH
53849: LD_INT 2
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: LD_INT 2
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 2
53868: NEG
53869: PUSH
53870: LD_INT 1
53872: NEG
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 2
53880: NEG
53881: PUSH
53882: LD_INT 2
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 2
53892: NEG
53893: PUSH
53894: LD_INT 3
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 3
53904: NEG
53905: PUSH
53906: LD_INT 2
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 3
53916: NEG
53917: PUSH
53918: LD_INT 3
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53944: LD_ADDR_VAR 0 14
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: LD_INT 0
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: LD_INT 1
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 1
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 0
53992: PUSH
53993: LD_INT 1
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 1
54013: NEG
54014: PUSH
54015: LD_INT 1
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 1
54025: NEG
54026: PUSH
54027: LD_INT 2
54029: NEG
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: LD_INT 2
54040: NEG
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: LD_INT 1
54051: NEG
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: LD_INT 2
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: LD_INT 2
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 1
54079: NEG
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 1
54090: NEG
54091: PUSH
54092: LD_INT 3
54094: NEG
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: LD_INT 3
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 1
54113: PUSH
54114: LD_INT 2
54116: NEG
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54140: LD_ADDR_VAR 0 15
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 1
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: LD_INT 1
54224: NEG
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 2
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 2
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 1
54252: NEG
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 2
54263: NEG
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 2
54274: NEG
54275: PUSH
54276: LD_INT 1
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 2
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 3
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 3
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54333: LD_ADDR_VAR 0 16
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: LD_INT 1
54353: NEG
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 1
54371: PUSH
54372: LD_INT 1
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: LD_INT 1
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 1
54402: NEG
54403: PUSH
54404: LD_INT 1
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 1
54414: NEG
54415: PUSH
54416: LD_INT 2
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 2
54426: PUSH
54427: LD_INT 1
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 2
54436: PUSH
54437: LD_INT 2
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: PUSH
54447: LD_INT 2
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 2
54456: NEG
54457: PUSH
54458: LD_INT 1
54460: NEG
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 2
54468: NEG
54469: PUSH
54470: LD_INT 2
54472: NEG
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 3
54480: PUSH
54481: LD_INT 2
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 3
54490: PUSH
54491: LD_INT 3
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 2
54500: PUSH
54501: LD_INT 3
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54526: LD_ADDR_VAR 0 17
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 0
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 0
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: LD_INT 1
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: NEG
54608: PUSH
54609: LD_INT 2
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: LD_INT 2
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 2
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 2
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 2
54661: PUSH
54662: LD_INT 2
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 1
54671: PUSH
54672: LD_INT 2
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: LD_INT 2
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 2
54702: NEG
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 2
54713: NEG
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 2
54725: NEG
54726: PUSH
54727: LD_INT 2
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54756: LD_ADDR_VAR 0 18
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 0
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: LD_INT 0
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: LD_INT 2
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: LD_INT 2
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 1
54860: PUSH
54861: LD_INT 1
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 2
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 2
54881: PUSH
54882: LD_INT 1
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 2
54891: PUSH
54892: LD_INT 2
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 1
54901: PUSH
54902: LD_INT 2
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: LD_INT 2
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: NEG
54922: PUSH
54923: LD_INT 1
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 2
54932: NEG
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 2
54943: NEG
54944: PUSH
54945: LD_INT 1
54947: NEG
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 2
54955: NEG
54956: PUSH
54957: LD_INT 2
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54986: LD_ADDR_VAR 0 19
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 0
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 1
55014: PUSH
55015: LD_INT 0
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: LD_INT 1
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 1
55044: NEG
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: LD_INT 2
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: LD_INT 2
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 1
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 2
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 2
55111: PUSH
55112: LD_INT 1
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 2
55121: PUSH
55122: LD_INT 2
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: PUSH
55132: LD_INT 2
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 0
55141: PUSH
55142: LD_INT 2
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: LD_INT 1
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 2
55162: NEG
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 2
55173: NEG
55174: PUSH
55175: LD_INT 1
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 2
55185: NEG
55186: PUSH
55187: LD_INT 2
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55216: LD_ADDR_VAR 0 20
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: LD_INT 1
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 1
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: LD_INT 1
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 1
55285: NEG
55286: PUSH
55287: LD_INT 1
55289: NEG
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: LD_INT 2
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: LD_INT 2
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 2
55331: PUSH
55332: LD_INT 0
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 2
55341: PUSH
55342: LD_INT 1
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 2
55351: PUSH
55352: LD_INT 2
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: LD_INT 2
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: LD_INT 2
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: LD_INT 1
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 2
55392: NEG
55393: PUSH
55394: LD_INT 0
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 2
55403: NEG
55404: PUSH
55405: LD_INT 1
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 2
55415: NEG
55416: PUSH
55417: LD_INT 2
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55446: LD_ADDR_VAR 0 21
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 1
55484: PUSH
55485: LD_INT 1
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: LD_INT 1
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: NEG
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 1
55515: NEG
55516: PUSH
55517: LD_INT 1
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: LD_INT 2
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 0
55539: PUSH
55540: LD_INT 2
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 1
55550: PUSH
55551: LD_INT 1
55553: NEG
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 2
55561: PUSH
55562: LD_INT 0
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 2
55571: PUSH
55572: LD_INT 1
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 2
55581: PUSH
55582: LD_INT 2
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: LD_INT 2
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: LD_INT 2
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 2
55622: NEG
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 2
55633: NEG
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 2
55645: NEG
55646: PUSH
55647: LD_INT 2
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55676: LD_ADDR_VAR 0 22
55680: PUSH
55681: LD_INT 0
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 1
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: LD_INT 1
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 0
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 1
55734: NEG
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 1
55745: NEG
55746: PUSH
55747: LD_INT 1
55749: NEG
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: LD_INT 2
55761: NEG
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 0
55769: PUSH
55770: LD_INT 2
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 2
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 2
55801: PUSH
55802: LD_INT 1
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 2
55811: PUSH
55812: LD_INT 2
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 1
55821: PUSH
55822: LD_INT 2
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 0
55831: PUSH
55832: LD_INT 2
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: NEG
55842: PUSH
55843: LD_INT 1
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 2
55852: NEG
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 2
55863: NEG
55864: PUSH
55865: LD_INT 1
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 2
55875: NEG
55876: PUSH
55877: LD_INT 2
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55906: LD_ADDR_VAR 0 23
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 1
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 1
55964: NEG
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: LD_INT 2
55991: NEG
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: LD_INT 2
56002: NEG
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 2
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 2
56031: PUSH
56032: LD_INT 1
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 2
56041: PUSH
56042: LD_INT 2
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: PUSH
56052: LD_INT 2
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: LD_INT 2
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: NEG
56072: PUSH
56073: LD_INT 1
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 2
56082: NEG
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 2
56093: NEG
56094: PUSH
56095: LD_INT 1
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 2
56105: NEG
56106: PUSH
56107: LD_INT 2
56109: NEG
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 2
56117: NEG
56118: PUSH
56119: LD_INT 3
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 1
56129: NEG
56130: PUSH
56131: LD_INT 3
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: LD_INT 2
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 2
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56186: LD_ADDR_VAR 0 24
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: LD_INT 1
56206: NEG
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: PUSH
56215: LD_INT 0
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: LD_INT 1
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: LD_INT 1
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: NEG
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 1
56267: NEG
56268: PUSH
56269: LD_INT 2
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: LD_INT 2
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 2
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 2
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 2
56321: PUSH
56322: LD_INT 2
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: LD_INT 2
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: LD_INT 2
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 2
56362: NEG
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 2
56373: NEG
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 2
56385: NEG
56386: PUSH
56387: LD_INT 2
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: LD_INT 2
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 2
56408: PUSH
56409: LD_INT 1
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 3
56419: PUSH
56420: LD_INT 1
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 3
56429: PUSH
56430: LD_INT 2
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56462: LD_ADDR_VAR 0 25
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: LD_INT 0
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: NEG
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: NEG
56532: PUSH
56533: LD_INT 1
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: LD_INT 2
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: LD_INT 2
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: LD_INT 1
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 2
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 2
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 2
56597: PUSH
56598: LD_INT 2
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 1
56607: PUSH
56608: LD_INT 2
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: LD_INT 2
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 2
56638: NEG
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 2
56649: NEG
56650: PUSH
56651: LD_INT 1
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 2
56661: NEG
56662: PUSH
56663: LD_INT 2
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 3
56673: PUSH
56674: LD_INT 1
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 3
56683: PUSH
56684: LD_INT 2
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 2
56693: PUSH
56694: LD_INT 3
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 1
56703: PUSH
56704: LD_INT 3
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56736: LD_ADDR_VAR 0 26
56740: PUSH
56741: LD_INT 0
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 1
56764: PUSH
56765: LD_INT 0
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 1
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: LD_INT 0
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 1
56805: NEG
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: LD_INT 2
56821: NEG
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: LD_INT 2
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 2
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 2
56861: PUSH
56862: LD_INT 1
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 2
56871: PUSH
56872: LD_INT 2
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 1
56881: PUSH
56882: LD_INT 2
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 0
56891: PUSH
56892: LD_INT 2
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 1
56901: NEG
56902: PUSH
56903: LD_INT 1
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 2
56912: NEG
56913: PUSH
56914: LD_INT 0
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 2
56923: NEG
56924: PUSH
56925: LD_INT 1
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 2
56935: NEG
56936: PUSH
56937: LD_INT 2
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 2
56947: PUSH
56948: LD_INT 3
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 1
56957: PUSH
56958: LD_INT 3
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 1
56967: NEG
56968: PUSH
56969: LD_INT 2
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 2
56978: NEG
56979: PUSH
56980: LD_INT 1
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57012: LD_ADDR_VAR 0 27
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 0
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 1
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 1
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 0
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 1
57070: NEG
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 1
57081: NEG
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 1
57093: NEG
57094: PUSH
57095: LD_INT 2
57097: NEG
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: LD_INT 2
57108: NEG
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 1
57116: PUSH
57117: LD_INT 1
57119: NEG
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 2
57127: PUSH
57128: LD_INT 0
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 2
57137: PUSH
57138: LD_INT 1
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 2
57147: PUSH
57148: LD_INT 2
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 1
57157: PUSH
57158: LD_INT 2
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: LD_INT 2
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: LD_INT 1
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 2
57188: NEG
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 2
57199: NEG
57200: PUSH
57201: LD_INT 1
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 2
57211: NEG
57212: PUSH
57213: LD_INT 2
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 1
57223: NEG
57224: PUSH
57225: LD_INT 2
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 2
57234: NEG
57235: PUSH
57236: LD_INT 1
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 3
57245: NEG
57246: PUSH
57247: LD_INT 1
57249: NEG
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 3
57257: NEG
57258: PUSH
57259: LD_INT 2
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57292: LD_ADDR_VAR 0 28
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: LD_INT 1
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: NEG
57362: PUSH
57363: LD_INT 1
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: NEG
57374: PUSH
57375: LD_INT 2
57377: NEG
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: LD_INT 2
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 1
57396: PUSH
57397: LD_INT 1
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 2
57407: PUSH
57408: LD_INT 0
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 2
57417: PUSH
57418: LD_INT 1
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 2
57427: PUSH
57428: LD_INT 2
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 1
57437: PUSH
57438: LD_INT 2
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: LD_INT 2
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 1
57457: NEG
57458: PUSH
57459: LD_INT 1
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 2
57468: NEG
57469: PUSH
57470: LD_INT 0
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 2
57479: NEG
57480: PUSH
57481: LD_INT 1
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 2
57491: NEG
57492: PUSH
57493: LD_INT 2
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: LD_INT 3
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 1
57515: NEG
57516: PUSH
57517: LD_INT 3
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 3
57527: NEG
57528: PUSH
57529: LD_INT 1
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 3
57539: NEG
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57574: LD_ADDR_VAR 0 29
57578: PUSH
57579: LD_INT 0
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: LD_INT 1
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: LD_INT 0
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 1
57612: PUSH
57613: LD_INT 1
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 0
57622: PUSH
57623: LD_INT 1
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 1
57632: NEG
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 1
57643: NEG
57644: PUSH
57645: LD_INT 1
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 1
57655: NEG
57656: PUSH
57657: LD_INT 2
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 0
57667: PUSH
57668: LD_INT 2
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: PUSH
57679: LD_INT 1
57681: NEG
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 2
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 2
57699: PUSH
57700: LD_INT 1
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 1
57709: PUSH
57710: LD_INT 2
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: LD_INT 2
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 1
57729: NEG
57730: PUSH
57731: LD_INT 1
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 2
57740: NEG
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 2
57752: NEG
57753: PUSH
57754: LD_INT 2
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 2
57764: NEG
57765: PUSH
57766: LD_INT 3
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 2
57776: PUSH
57777: LD_INT 1
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 3
57787: PUSH
57788: LD_INT 1
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: LD_INT 3
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: LD_INT 2
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 3
57818: NEG
57819: PUSH
57820: LD_INT 2
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57853: LD_ADDR_VAR 0 30
57857: PUSH
57858: LD_INT 0
57860: PUSH
57861: LD_INT 0
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: LD_INT 1
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 1
57881: PUSH
57882: LD_INT 0
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 1
57891: PUSH
57892: LD_INT 1
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: LD_INT 1
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 1
57911: NEG
57912: PUSH
57913: LD_INT 0
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 1
57922: NEG
57923: PUSH
57924: LD_INT 1
57926: NEG
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 1
57934: NEG
57935: PUSH
57936: LD_INT 2
57938: NEG
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: LD_INT 2
57949: NEG
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 1
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 2
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 2
57978: PUSH
57979: LD_INT 1
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 2
57988: PUSH
57989: LD_INT 2
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: LD_INT 2
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 1
58008: NEG
58009: PUSH
58010: LD_INT 1
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 2
58019: NEG
58020: PUSH
58021: LD_INT 0
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 2
58030: NEG
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 1
58042: NEG
58043: PUSH
58044: LD_INT 3
58046: NEG
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 1
58054: PUSH
58055: LD_INT 2
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 3
58065: PUSH
58066: LD_INT 2
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 2
58075: PUSH
58076: LD_INT 3
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 2
58085: NEG
58086: PUSH
58087: LD_INT 1
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 3
58096: NEG
58097: PUSH
58098: LD_INT 1
58100: NEG
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58131: LD_ADDR_VAR 0 31
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: LD_INT 0
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: LD_INT 1
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 1
58169: PUSH
58170: LD_INT 1
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: LD_INT 1
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: NEG
58190: PUSH
58191: LD_INT 0
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 1
58200: NEG
58201: PUSH
58202: LD_INT 1
58204: NEG
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 1
58212: NEG
58213: PUSH
58214: LD_INT 2
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 1
58224: PUSH
58225: LD_INT 1
58227: NEG
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 2
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 2
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 2
58255: PUSH
58256: LD_INT 2
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: PUSH
58266: LD_INT 2
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 0
58275: PUSH
58276: LD_INT 2
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 1
58285: NEG
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 2
58296: NEG
58297: PUSH
58298: LD_INT 1
58300: NEG
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 2
58308: NEG
58309: PUSH
58310: LD_INT 2
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 2
58320: NEG
58321: PUSH
58322: LD_INT 3
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 2
58332: PUSH
58333: LD_INT 1
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 3
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: LD_INT 3
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 1
58363: NEG
58364: PUSH
58365: LD_INT 2
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 3
58374: NEG
58375: PUSH
58376: LD_INT 2
58378: NEG
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58409: LD_ADDR_VAR 0 32
58413: PUSH
58414: LD_INT 0
58416: PUSH
58417: LD_INT 0
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 0
58426: PUSH
58427: LD_INT 1
58429: NEG
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 1
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 0
58457: PUSH
58458: LD_INT 1
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: NEG
58468: PUSH
58469: LD_INT 0
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 1
58478: NEG
58479: PUSH
58480: LD_INT 1
58482: NEG
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 1
58490: NEG
58491: PUSH
58492: LD_INT 2
58494: NEG
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 0
58502: PUSH
58503: LD_INT 2
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 1
58513: PUSH
58514: LD_INT 1
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 2
58524: PUSH
58525: LD_INT 1
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 2
58534: PUSH
58535: LD_INT 2
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: PUSH
58545: LD_INT 2
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 0
58554: PUSH
58555: LD_INT 2
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 1
58564: NEG
58565: PUSH
58566: LD_INT 1
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 2
58575: NEG
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 2
58586: NEG
58587: PUSH
58588: LD_INT 1
58590: NEG
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 1
58598: NEG
58599: PUSH
58600: LD_INT 3
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: PUSH
58611: LD_INT 2
58613: NEG
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 3
58621: PUSH
58622: LD_INT 2
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 2
58631: PUSH
58632: LD_INT 3
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 2
58641: NEG
58642: PUSH
58643: LD_INT 1
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 3
58652: NEG
58653: PUSH
58654: LD_INT 1
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58687: LD_ADDR_VAR 0 33
58691: PUSH
58692: LD_INT 0
58694: PUSH
58695: LD_INT 0
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 0
58704: PUSH
58705: LD_INT 1
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 1
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 1
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 0
58735: PUSH
58736: LD_INT 1
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 1
58745: NEG
58746: PUSH
58747: LD_INT 0
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 1
58756: NEG
58757: PUSH
58758: LD_INT 1
58760: NEG
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 1
58768: NEG
58769: PUSH
58770: LD_INT 2
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 1
58780: PUSH
58781: LD_INT 1
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 2
58791: PUSH
58792: LD_INT 0
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 2
58801: PUSH
58802: LD_INT 1
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 1
58811: PUSH
58812: LD_INT 2
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: LD_INT 2
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 1
58831: NEG
58832: PUSH
58833: LD_INT 1
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 2
58842: NEG
58843: PUSH
58844: LD_INT 0
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 2
58853: NEG
58854: PUSH
58855: LD_INT 1
58857: NEG
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 2
58865: NEG
58866: PUSH
58867: LD_INT 2
58869: NEG
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 2
58877: NEG
58878: PUSH
58879: LD_INT 3
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 2
58889: PUSH
58890: LD_INT 1
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 3
58900: PUSH
58901: LD_INT 1
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 1
58910: PUSH
58911: LD_INT 3
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 1
58920: NEG
58921: PUSH
58922: LD_INT 2
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 3
58931: NEG
58932: PUSH
58933: LD_INT 2
58935: NEG
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58966: LD_ADDR_VAR 0 34
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: LD_INT 0
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: LD_INT 1
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 1
58994: PUSH
58995: LD_INT 0
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 1
59004: PUSH
59005: LD_INT 1
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 0
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 1
59024: NEG
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 1
59035: NEG
59036: PUSH
59037: LD_INT 1
59039: NEG
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 1
59047: NEG
59048: PUSH
59049: LD_INT 2
59051: NEG
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: LD_INT 2
59062: NEG
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 1
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 2
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 2
59091: PUSH
59092: LD_INT 2
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 1
59101: PUSH
59102: LD_INT 2
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 1
59111: NEG
59112: PUSH
59113: LD_INT 1
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 2
59122: NEG
59123: PUSH
59124: LD_INT 0
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 2
59133: NEG
59134: PUSH
59135: LD_INT 1
59137: NEG
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 2
59145: NEG
59146: PUSH
59147: LD_INT 2
59149: NEG
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 1
59157: NEG
59158: PUSH
59159: LD_INT 3
59161: NEG
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 1
59169: PUSH
59170: LD_INT 2
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 3
59180: PUSH
59181: LD_INT 2
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 2
59190: PUSH
59191: LD_INT 3
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 2
59200: NEG
59201: PUSH
59202: LD_INT 1
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 3
59211: NEG
59212: PUSH
59213: LD_INT 1
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59246: LD_ADDR_VAR 0 35
59250: PUSH
59251: LD_INT 0
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 0
59263: PUSH
59264: LD_INT 1
59266: NEG
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 1
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 1
59284: PUSH
59285: LD_INT 1
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 0
59294: PUSH
59295: LD_INT 1
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 1
59304: NEG
59305: PUSH
59306: LD_INT 0
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 1
59315: NEG
59316: PUSH
59317: LD_INT 1
59319: NEG
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 2
59327: PUSH
59328: LD_INT 1
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 2
59337: NEG
59338: PUSH
59339: LD_INT 1
59341: NEG
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59358: LD_ADDR_VAR 0 36
59362: PUSH
59363: LD_INT 0
59365: PUSH
59366: LD_INT 0
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: LD_INT 1
59378: NEG
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 1
59386: PUSH
59387: LD_INT 0
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 1
59396: PUSH
59397: LD_INT 1
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 0
59406: PUSH
59407: LD_INT 1
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 1
59416: NEG
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 1
59427: NEG
59428: PUSH
59429: LD_INT 1
59431: NEG
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 1
59439: NEG
59440: PUSH
59441: LD_INT 2
59443: NEG
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 1
59451: PUSH
59452: LD_INT 2
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59470: LD_ADDR_VAR 0 37
59474: PUSH
59475: LD_INT 0
59477: PUSH
59478: LD_INT 0
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 0
59487: PUSH
59488: LD_INT 1
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 1
59498: PUSH
59499: LD_INT 0
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 1
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 0
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 1
59528: NEG
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: PUSH
59541: LD_INT 1
59543: NEG
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 1
59551: PUSH
59552: LD_INT 1
59554: NEG
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 1
59562: NEG
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59582: LD_ADDR_VAR 0 38
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 0
59599: PUSH
59600: LD_INT 1
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 1
59610: PUSH
59611: LD_INT 0
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 1
59620: PUSH
59621: LD_INT 1
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 0
59630: PUSH
59631: LD_INT 1
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 1
59640: NEG
59641: PUSH
59642: LD_INT 0
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 1
59651: NEG
59652: PUSH
59653: LD_INT 1
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 2
59663: PUSH
59664: LD_INT 1
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 2
59673: NEG
59674: PUSH
59675: LD_INT 1
59677: NEG
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59694: LD_ADDR_VAR 0 39
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: LD_INT 0
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 0
59711: PUSH
59712: LD_INT 1
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 1
59722: PUSH
59723: LD_INT 0
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 1
59732: PUSH
59733: LD_INT 1
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 0
59742: PUSH
59743: LD_INT 1
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 1
59752: NEG
59753: PUSH
59754: LD_INT 0
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 1
59763: NEG
59764: PUSH
59765: LD_INT 1
59767: NEG
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 1
59775: NEG
59776: PUSH
59777: LD_INT 2
59779: NEG
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 1
59787: PUSH
59788: LD_INT 2
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59806: LD_ADDR_VAR 0 40
59810: PUSH
59811: LD_INT 0
59813: PUSH
59814: LD_INT 0
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 0
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: PUSH
59835: LD_INT 0
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 1
59844: PUSH
59845: LD_INT 1
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 0
59854: PUSH
59855: LD_INT 1
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 1
59864: NEG
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 1
59875: NEG
59876: PUSH
59877: LD_INT 1
59879: NEG
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 1
59887: PUSH
59888: LD_INT 1
59890: NEG
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 1
59898: NEG
59899: PUSH
59900: LD_INT 1
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59918: LD_ADDR_VAR 0 41
59922: PUSH
59923: LD_INT 0
59925: PUSH
59926: LD_INT 0
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 0
59935: PUSH
59936: LD_INT 1
59938: NEG
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 1
59946: PUSH
59947: LD_INT 0
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: PUSH
59957: LD_INT 1
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 0
59966: PUSH
59967: LD_INT 1
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 1
59976: NEG
59977: PUSH
59978: LD_INT 0
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 1
59987: NEG
59988: PUSH
59989: LD_INT 1
59991: NEG
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 1
59999: NEG
60000: PUSH
60001: LD_INT 2
60003: NEG
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 1
60011: PUSH
60012: LD_INT 1
60014: NEG
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 2
60022: PUSH
60023: LD_INT 0
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 2
60032: PUSH
60033: LD_INT 1
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 2
60042: PUSH
60043: LD_INT 2
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 1
60052: PUSH
60053: LD_INT 2
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 1
60062: NEG
60063: PUSH
60064: LD_INT 1
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 2
60073: NEG
60074: PUSH
60075: LD_INT 0
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 2
60084: NEG
60085: PUSH
60086: LD_INT 1
60088: NEG
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 2
60096: NEG
60097: PUSH
60098: LD_INT 2
60100: NEG
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 2
60108: NEG
60109: PUSH
60110: LD_INT 3
60112: NEG
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 2
60120: PUSH
60121: LD_INT 1
60123: NEG
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 3
60131: PUSH
60132: LD_INT 0
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 3
60141: PUSH
60142: LD_INT 1
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 3
60151: PUSH
60152: LD_INT 2
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 3
60161: PUSH
60162: LD_INT 3
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 2
60171: PUSH
60172: LD_INT 3
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 2
60181: NEG
60182: PUSH
60183: LD_INT 1
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 3
60192: NEG
60193: PUSH
60194: LD_INT 0
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 3
60203: NEG
60204: PUSH
60205: LD_INT 1
60207: NEG
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 3
60215: NEG
60216: PUSH
60217: LD_INT 2
60219: NEG
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 3
60227: NEG
60228: PUSH
60229: LD_INT 3
60231: NEG
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60268: LD_ADDR_VAR 0 42
60272: PUSH
60273: LD_INT 0
60275: PUSH
60276: LD_INT 0
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: LD_INT 1
60288: NEG
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 1
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 1
60306: PUSH
60307: LD_INT 1
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 0
60316: PUSH
60317: LD_INT 1
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 1
60326: NEG
60327: PUSH
60328: LD_INT 0
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: NEG
60338: PUSH
60339: LD_INT 1
60341: NEG
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 1
60349: NEG
60350: PUSH
60351: LD_INT 2
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 0
60361: PUSH
60362: LD_INT 2
60364: NEG
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 1
60372: PUSH
60373: LD_INT 1
60375: NEG
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 2
60383: PUSH
60384: LD_INT 1
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 2
60393: PUSH
60394: LD_INT 2
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 1
60403: PUSH
60404: LD_INT 2
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 0
60413: PUSH
60414: LD_INT 2
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 1
60423: NEG
60424: PUSH
60425: LD_INT 1
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 2
60434: NEG
60435: PUSH
60436: LD_INT 1
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 2
60446: NEG
60447: PUSH
60448: LD_INT 2
60450: NEG
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 2
60458: NEG
60459: PUSH
60460: LD_INT 3
60462: NEG
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 1
60470: NEG
60471: PUSH
60472: LD_INT 3
60474: NEG
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 0
60482: PUSH
60483: LD_INT 3
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 1
60493: PUSH
60494: LD_INT 2
60496: NEG
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 3
60504: PUSH
60505: LD_INT 2
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 3
60514: PUSH
60515: LD_INT 3
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 2
60524: PUSH
60525: LD_INT 3
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 1
60534: PUSH
60535: LD_INT 3
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 0
60544: PUSH
60545: LD_INT 3
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 1
60554: NEG
60555: PUSH
60556: LD_INT 2
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 3
60565: NEG
60566: PUSH
60567: LD_INT 2
60569: NEG
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 3
60577: NEG
60578: PUSH
60579: LD_INT 3
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60618: LD_ADDR_VAR 0 43
60622: PUSH
60623: LD_INT 0
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: LD_INT 1
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 1
60646: PUSH
60647: LD_INT 0
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 1
60656: PUSH
60657: LD_INT 1
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 1
60676: NEG
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: NEG
60688: PUSH
60689: LD_INT 1
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: LD_INT 2
60703: NEG
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: LD_INT 2
60714: NEG
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 1
60722: PUSH
60723: LD_INT 1
60725: NEG
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 2
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 2
60743: PUSH
60744: LD_INT 1
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 1
60753: PUSH
60754: LD_INT 2
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 0
60763: PUSH
60764: LD_INT 2
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 1
60773: NEG
60774: PUSH
60775: LD_INT 1
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 2
60784: NEG
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 2
60795: NEG
60796: PUSH
60797: LD_INT 1
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 1
60807: NEG
60808: PUSH
60809: LD_INT 3
60811: NEG
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: LD_INT 3
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 1
60830: PUSH
60831: LD_INT 2
60833: NEG
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 2
60841: PUSH
60842: LD_INT 1
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 3
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 3
60862: PUSH
60863: LD_INT 1
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 1
60872: PUSH
60873: LD_INT 3
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 0
60882: PUSH
60883: LD_INT 3
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 1
60892: NEG
60893: PUSH
60894: LD_INT 2
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 2
60903: NEG
60904: PUSH
60905: LD_INT 1
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 3
60914: NEG
60915: PUSH
60916: LD_INT 0
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 3
60925: NEG
60926: PUSH
60927: LD_INT 1
60929: NEG
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60966: LD_ADDR_VAR 0 44
60970: PUSH
60971: LD_INT 0
60973: PUSH
60974: LD_INT 0
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 0
60983: PUSH
60984: LD_INT 1
60986: NEG
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 1
60994: PUSH
60995: LD_INT 0
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 1
61004: PUSH
61005: LD_INT 1
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 0
61014: PUSH
61015: LD_INT 1
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 1
61024: NEG
61025: PUSH
61026: LD_INT 0
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 1
61035: NEG
61036: PUSH
61037: LD_INT 1
61039: NEG
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 1
61047: NEG
61048: PUSH
61049: LD_INT 2
61051: NEG
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 1
61059: PUSH
61060: LD_INT 1
61062: NEG
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 2
61070: PUSH
61071: LD_INT 0
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 2
61080: PUSH
61081: LD_INT 1
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 2
61090: PUSH
61091: LD_INT 2
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 1
61100: PUSH
61101: LD_INT 2
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 1
61110: NEG
61111: PUSH
61112: LD_INT 1
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 2
61121: NEG
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 2
61132: NEG
61133: PUSH
61134: LD_INT 1
61136: NEG
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 2
61144: NEG
61145: PUSH
61146: LD_INT 2
61148: NEG
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 2
61156: NEG
61157: PUSH
61158: LD_INT 3
61160: NEG
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 2
61168: PUSH
61169: LD_INT 1
61171: NEG
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 3
61179: PUSH
61180: LD_INT 0
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 3
61189: PUSH
61190: LD_INT 1
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 3
61199: PUSH
61200: LD_INT 2
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 3
61209: PUSH
61210: LD_INT 3
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 2
61219: PUSH
61220: LD_INT 3
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 2
61229: NEG
61230: PUSH
61231: LD_INT 1
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 3
61240: NEG
61241: PUSH
61242: LD_INT 0
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 3
61251: NEG
61252: PUSH
61253: LD_INT 1
61255: NEG
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 3
61263: NEG
61264: PUSH
61265: LD_INT 2
61267: NEG
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 3
61275: NEG
61276: PUSH
61277: LD_INT 3
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61316: LD_ADDR_VAR 0 45
61320: PUSH
61321: LD_INT 0
61323: PUSH
61324: LD_INT 0
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: LD_INT 1
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 1
61344: PUSH
61345: LD_INT 0
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 1
61354: PUSH
61355: LD_INT 1
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 0
61364: PUSH
61365: LD_INT 1
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 1
61374: NEG
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 1
61385: NEG
61386: PUSH
61387: LD_INT 1
61389: NEG
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 1
61397: NEG
61398: PUSH
61399: LD_INT 2
61401: NEG
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 0
61409: PUSH
61410: LD_INT 2
61412: NEG
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 1
61420: PUSH
61421: LD_INT 1
61423: NEG
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 2
61431: PUSH
61432: LD_INT 1
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 2
61441: PUSH
61442: LD_INT 2
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 1
61451: PUSH
61452: LD_INT 2
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 0
61461: PUSH
61462: LD_INT 2
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 1
61471: NEG
61472: PUSH
61473: LD_INT 1
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 2
61482: NEG
61483: PUSH
61484: LD_INT 1
61486: NEG
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 2
61494: NEG
61495: PUSH
61496: LD_INT 2
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 2
61506: NEG
61507: PUSH
61508: LD_INT 3
61510: NEG
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 1
61518: NEG
61519: PUSH
61520: LD_INT 3
61522: NEG
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 0
61530: PUSH
61531: LD_INT 3
61533: NEG
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 1
61541: PUSH
61542: LD_INT 2
61544: NEG
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 3
61552: PUSH
61553: LD_INT 2
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 3
61562: PUSH
61563: LD_INT 3
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 2
61572: PUSH
61573: LD_INT 3
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 1
61582: PUSH
61583: LD_INT 3
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 0
61592: PUSH
61593: LD_INT 3
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 1
61602: NEG
61603: PUSH
61604: LD_INT 2
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 3
61613: NEG
61614: PUSH
61615: LD_INT 2
61617: NEG
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 3
61625: NEG
61626: PUSH
61627: LD_INT 3
61629: NEG
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61666: LD_ADDR_VAR 0 46
61670: PUSH
61671: LD_INT 0
61673: PUSH
61674: LD_INT 0
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 0
61683: PUSH
61684: LD_INT 1
61686: NEG
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 1
61694: PUSH
61695: LD_INT 0
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 1
61704: PUSH
61705: LD_INT 1
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 0
61714: PUSH
61715: LD_INT 1
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 1
61724: NEG
61725: PUSH
61726: LD_INT 0
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 1
61735: NEG
61736: PUSH
61737: LD_INT 1
61739: NEG
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 1
61747: NEG
61748: PUSH
61749: LD_INT 2
61751: NEG
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 0
61759: PUSH
61760: LD_INT 2
61762: NEG
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: LD_INT 1
61773: NEG
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 2
61781: PUSH
61782: LD_INT 0
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 2
61791: PUSH
61792: LD_INT 1
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 1
61801: PUSH
61802: LD_INT 2
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 0
61811: PUSH
61812: LD_INT 2
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 1
61821: NEG
61822: PUSH
61823: LD_INT 1
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 2
61832: NEG
61833: PUSH
61834: LD_INT 0
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 2
61843: NEG
61844: PUSH
61845: LD_INT 1
61847: NEG
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 1
61855: NEG
61856: PUSH
61857: LD_INT 3
61859: NEG
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: LD_INT 3
61870: NEG
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 1
61878: PUSH
61879: LD_INT 2
61881: NEG
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 2
61889: PUSH
61890: LD_INT 1
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 3
61900: PUSH
61901: LD_INT 0
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 3
61910: PUSH
61911: LD_INT 1
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: LD_INT 1
61920: PUSH
61921: LD_INT 3
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: LD_INT 3
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 1
61940: NEG
61941: PUSH
61942: LD_INT 2
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 2
61951: NEG
61952: PUSH
61953: LD_INT 1
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 3
61962: NEG
61963: PUSH
61964: LD_INT 0
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 3
61973: NEG
61974: PUSH
61975: LD_INT 1
61977: NEG
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62014: LD_ADDR_VAR 0 47
62018: PUSH
62019: LD_INT 0
62021: PUSH
62022: LD_INT 0
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 0
62031: PUSH
62032: LD_INT 1
62034: NEG
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 1
62042: PUSH
62043: LD_INT 0
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 1
62052: PUSH
62053: LD_INT 1
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 0
62062: PUSH
62063: LD_INT 1
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 1
62072: NEG
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 1
62083: NEG
62084: PUSH
62085: LD_INT 1
62087: NEG
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 1
62095: NEG
62096: PUSH
62097: LD_INT 2
62099: NEG
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: LD_INT 2
62110: NEG
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 1
62118: PUSH
62119: LD_INT 1
62121: NEG
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 2
62129: NEG
62130: PUSH
62131: LD_INT 1
62133: NEG
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 2
62141: NEG
62142: PUSH
62143: LD_INT 2
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62165: LD_ADDR_VAR 0 48
62169: PUSH
62170: LD_INT 0
62172: PUSH
62173: LD_INT 0
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 0
62182: PUSH
62183: LD_INT 1
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 1
62193: PUSH
62194: LD_INT 0
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 1
62203: PUSH
62204: LD_INT 1
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 0
62213: PUSH
62214: LD_INT 1
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 1
62223: NEG
62224: PUSH
62225: LD_INT 0
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 1
62234: NEG
62235: PUSH
62236: LD_INT 1
62238: NEG
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 1
62246: NEG
62247: PUSH
62248: LD_INT 2
62250: NEG
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 0
62258: PUSH
62259: LD_INT 2
62261: NEG
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 1
62269: PUSH
62270: LD_INT 1
62272: NEG
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 2
62280: PUSH
62281: LD_INT 0
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 2
62290: PUSH
62291: LD_INT 1
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62312: LD_ADDR_VAR 0 49
62316: PUSH
62317: LD_INT 0
62319: PUSH
62320: LD_INT 0
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 0
62329: PUSH
62330: LD_INT 1
62332: NEG
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 1
62340: PUSH
62341: LD_INT 0
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 1
62350: PUSH
62351: LD_INT 1
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 0
62360: PUSH
62361: LD_INT 1
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 1
62370: NEG
62371: PUSH
62372: LD_INT 0
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 1
62381: NEG
62382: PUSH
62383: LD_INT 1
62385: NEG
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 1
62393: PUSH
62394: LD_INT 1
62396: NEG
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 2
62404: PUSH
62405: LD_INT 0
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 2
62414: PUSH
62415: LD_INT 1
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 2
62424: PUSH
62425: LD_INT 2
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 1
62434: PUSH
62435: LD_INT 2
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62456: LD_ADDR_VAR 0 50
62460: PUSH
62461: LD_INT 0
62463: PUSH
62464: LD_INT 0
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 0
62473: PUSH
62474: LD_INT 1
62476: NEG
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 1
62484: PUSH
62485: LD_INT 0
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 1
62494: PUSH
62495: LD_INT 1
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 0
62504: PUSH
62505: LD_INT 1
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 1
62514: NEG
62515: PUSH
62516: LD_INT 0
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 1
62525: NEG
62526: PUSH
62527: LD_INT 1
62529: NEG
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 2
62537: PUSH
62538: LD_INT 1
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 2
62547: PUSH
62548: LD_INT 2
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 1
62557: PUSH
62558: LD_INT 2
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 0
62567: PUSH
62568: LD_INT 2
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 1
62577: NEG
62578: PUSH
62579: LD_INT 1
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62600: LD_ADDR_VAR 0 51
62604: PUSH
62605: LD_INT 0
62607: PUSH
62608: LD_INT 0
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 0
62617: PUSH
62618: LD_INT 1
62620: NEG
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 1
62628: PUSH
62629: LD_INT 0
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 1
62638: PUSH
62639: LD_INT 1
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 0
62648: PUSH
62649: LD_INT 1
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 1
62658: NEG
62659: PUSH
62660: LD_INT 0
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 1
62669: NEG
62670: PUSH
62671: LD_INT 1
62673: NEG
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 1
62681: PUSH
62682: LD_INT 2
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 0
62691: PUSH
62692: LD_INT 2
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 1
62701: NEG
62702: PUSH
62703: LD_INT 1
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 2
62712: NEG
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 2
62723: NEG
62724: PUSH
62725: LD_INT 1
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62747: LD_ADDR_VAR 0 52
62751: PUSH
62752: LD_INT 0
62754: PUSH
62755: LD_INT 0
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 0
62764: PUSH
62765: LD_INT 1
62767: NEG
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 1
62775: PUSH
62776: LD_INT 0
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 1
62785: PUSH
62786: LD_INT 1
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 0
62795: PUSH
62796: LD_INT 1
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 1
62805: NEG
62806: PUSH
62807: LD_INT 0
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 1
62816: NEG
62817: PUSH
62818: LD_INT 1
62820: NEG
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 1
62828: NEG
62829: PUSH
62830: LD_INT 2
62832: NEG
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 1
62840: NEG
62841: PUSH
62842: LD_INT 1
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 2
62851: NEG
62852: PUSH
62853: LD_INT 0
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 2
62862: NEG
62863: PUSH
62864: LD_INT 1
62866: NEG
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 2
62874: NEG
62875: PUSH
62876: LD_INT 2
62878: NEG
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62898: LD_ADDR_VAR 0 53
62902: PUSH
62903: LD_INT 0
62905: PUSH
62906: LD_INT 0
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 0
62915: PUSH
62916: LD_INT 1
62918: NEG
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 1
62926: PUSH
62927: LD_INT 0
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 1
62936: PUSH
62937: LD_INT 1
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: LD_INT 1
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 1
62956: NEG
62957: PUSH
62958: LD_INT 0
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 1
62967: NEG
62968: PUSH
62969: LD_INT 1
62971: NEG
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 1
62979: NEG
62980: PUSH
62981: LD_INT 2
62983: NEG
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 0
62991: PUSH
62992: LD_INT 2
62994: NEG
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 1
63002: PUSH
63003: LD_INT 1
63005: NEG
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 2
63013: PUSH
63014: LD_INT 0
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 2
63023: PUSH
63024: LD_INT 1
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 2
63033: PUSH
63034: LD_INT 2
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 1
63043: PUSH
63044: LD_INT 2
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 0
63053: PUSH
63054: LD_INT 2
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 1
63063: NEG
63064: PUSH
63065: LD_INT 1
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 2
63074: NEG
63075: PUSH
63076: LD_INT 0
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 2
63085: NEG
63086: PUSH
63087: LD_INT 1
63089: NEG
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 2
63097: NEG
63098: PUSH
63099: LD_INT 2
63101: NEG
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63128: LD_ADDR_VAR 0 54
63132: PUSH
63133: LD_INT 0
63135: PUSH
63136: LD_INT 0
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 0
63145: PUSH
63146: LD_INT 1
63148: NEG
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 1
63156: PUSH
63157: LD_INT 0
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 1
63166: PUSH
63167: LD_INT 1
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 0
63176: PUSH
63177: LD_INT 1
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 1
63186: NEG
63187: PUSH
63188: LD_INT 0
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 1
63197: NEG
63198: PUSH
63199: LD_INT 1
63201: NEG
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 1
63209: NEG
63210: PUSH
63211: LD_INT 2
63213: NEG
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 0
63221: PUSH
63222: LD_INT 2
63224: NEG
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 1
63232: PUSH
63233: LD_INT 1
63235: NEG
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 2
63243: PUSH
63244: LD_INT 0
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 2
63253: PUSH
63254: LD_INT 1
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 2
63263: PUSH
63264: LD_INT 2
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 1
63273: PUSH
63274: LD_INT 2
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 0
63283: PUSH
63284: LD_INT 2
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 1
63293: NEG
63294: PUSH
63295: LD_INT 1
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 2
63304: NEG
63305: PUSH
63306: LD_INT 0
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 2
63315: NEG
63316: PUSH
63317: LD_INT 1
63319: NEG
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 2
63327: NEG
63328: PUSH
63329: LD_INT 2
63331: NEG
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63358: LD_ADDR_VAR 0 55
63362: PUSH
63363: LD_INT 0
63365: PUSH
63366: LD_INT 0
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: LD_INT 0
63375: PUSH
63376: LD_INT 1
63378: NEG
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 1
63386: PUSH
63387: LD_INT 0
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 1
63396: PUSH
63397: LD_INT 1
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 0
63406: PUSH
63407: LD_INT 1
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 1
63416: NEG
63417: PUSH
63418: LD_INT 0
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 1
63427: NEG
63428: PUSH
63429: LD_INT 1
63431: NEG
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 1
63439: NEG
63440: PUSH
63441: LD_INT 2
63443: NEG
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 0
63451: PUSH
63452: LD_INT 2
63454: NEG
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 1
63462: PUSH
63463: LD_INT 1
63465: NEG
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 2
63473: PUSH
63474: LD_INT 0
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 2
63483: PUSH
63484: LD_INT 1
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 2
63493: PUSH
63494: LD_INT 2
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 1
63503: PUSH
63504: LD_INT 2
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 0
63513: PUSH
63514: LD_INT 2
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 1
63523: NEG
63524: PUSH
63525: LD_INT 1
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 2
63534: NEG
63535: PUSH
63536: LD_INT 0
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 2
63545: NEG
63546: PUSH
63547: LD_INT 1
63549: NEG
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 2
63557: NEG
63558: PUSH
63559: LD_INT 2
63561: NEG
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63588: LD_ADDR_VAR 0 56
63592: PUSH
63593: LD_INT 0
63595: PUSH
63596: LD_INT 0
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 0
63605: PUSH
63606: LD_INT 1
63608: NEG
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 1
63616: PUSH
63617: LD_INT 0
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 1
63626: PUSH
63627: LD_INT 1
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 0
63636: PUSH
63637: LD_INT 1
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 1
63646: NEG
63647: PUSH
63648: LD_INT 0
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 1
63657: NEG
63658: PUSH
63659: LD_INT 1
63661: NEG
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 1
63669: NEG
63670: PUSH
63671: LD_INT 2
63673: NEG
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 0
63681: PUSH
63682: LD_INT 2
63684: NEG
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 1
63692: PUSH
63693: LD_INT 1
63695: NEG
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 2
63703: PUSH
63704: LD_INT 0
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 2
63713: PUSH
63714: LD_INT 1
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 2
63723: PUSH
63724: LD_INT 2
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 1
63733: PUSH
63734: LD_INT 2
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 0
63743: PUSH
63744: LD_INT 2
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 1
63753: NEG
63754: PUSH
63755: LD_INT 1
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 2
63764: NEG
63765: PUSH
63766: LD_INT 0
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 2
63775: NEG
63776: PUSH
63777: LD_INT 1
63779: NEG
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 2
63787: NEG
63788: PUSH
63789: LD_INT 2
63791: NEG
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: LIST
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63818: LD_ADDR_VAR 0 57
63822: PUSH
63823: LD_INT 0
63825: PUSH
63826: LD_INT 0
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 0
63835: PUSH
63836: LD_INT 1
63838: NEG
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 1
63846: PUSH
63847: LD_INT 0
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 1
63856: PUSH
63857: LD_INT 1
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 0
63866: PUSH
63867: LD_INT 1
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 1
63876: NEG
63877: PUSH
63878: LD_INT 0
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 1
63887: NEG
63888: PUSH
63889: LD_INT 1
63891: NEG
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 1
63899: NEG
63900: PUSH
63901: LD_INT 2
63903: NEG
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 0
63911: PUSH
63912: LD_INT 2
63914: NEG
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 1
63922: PUSH
63923: LD_INT 1
63925: NEG
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 2
63933: PUSH
63934: LD_INT 0
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 2
63943: PUSH
63944: LD_INT 1
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 2
63953: PUSH
63954: LD_INT 2
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 1
63963: PUSH
63964: LD_INT 2
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 0
63973: PUSH
63974: LD_INT 2
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 1
63983: NEG
63984: PUSH
63985: LD_INT 1
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 2
63994: NEG
63995: PUSH
63996: LD_INT 0
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 2
64005: NEG
64006: PUSH
64007: LD_INT 1
64009: NEG
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 2
64017: NEG
64018: PUSH
64019: LD_INT 2
64021: NEG
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64048: LD_ADDR_VAR 0 58
64052: PUSH
64053: LD_INT 0
64055: PUSH
64056: LD_INT 0
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 0
64065: PUSH
64066: LD_INT 1
64068: NEG
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 1
64076: PUSH
64077: LD_INT 0
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 1
64086: PUSH
64087: LD_INT 1
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 0
64096: PUSH
64097: LD_INT 1
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_INT 1
64106: NEG
64107: PUSH
64108: LD_INT 0
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 1
64117: NEG
64118: PUSH
64119: LD_INT 1
64121: NEG
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 1
64129: NEG
64130: PUSH
64131: LD_INT 2
64133: NEG
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 0
64141: PUSH
64142: LD_INT 2
64144: NEG
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 1
64152: PUSH
64153: LD_INT 1
64155: NEG
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 2
64163: PUSH
64164: LD_INT 0
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 2
64173: PUSH
64174: LD_INT 1
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: LD_INT 2
64183: PUSH
64184: LD_INT 2
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 1
64193: PUSH
64194: LD_INT 2
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 0
64203: PUSH
64204: LD_INT 2
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 1
64213: NEG
64214: PUSH
64215: LD_INT 1
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 2
64224: NEG
64225: PUSH
64226: LD_INT 0
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 2
64235: NEG
64236: PUSH
64237: LD_INT 1
64239: NEG
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 2
64247: NEG
64248: PUSH
64249: LD_INT 2
64251: NEG
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64278: LD_ADDR_VAR 0 59
64282: PUSH
64283: LD_INT 0
64285: PUSH
64286: LD_INT 0
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 0
64295: PUSH
64296: LD_INT 1
64298: NEG
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 1
64306: PUSH
64307: LD_INT 0
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 1
64316: PUSH
64317: LD_INT 1
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 0
64326: PUSH
64327: LD_INT 1
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 1
64336: NEG
64337: PUSH
64338: LD_INT 0
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 1
64347: NEG
64348: PUSH
64349: LD_INT 1
64351: NEG
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64366: LD_ADDR_VAR 0 60
64370: PUSH
64371: LD_INT 0
64373: PUSH
64374: LD_INT 0
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 0
64383: PUSH
64384: LD_INT 1
64386: NEG
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 1
64394: PUSH
64395: LD_INT 0
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 1
64404: PUSH
64405: LD_INT 1
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 0
64414: PUSH
64415: LD_INT 1
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 1
64424: NEG
64425: PUSH
64426: LD_INT 0
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 1
64435: NEG
64436: PUSH
64437: LD_INT 1
64439: NEG
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64454: LD_ADDR_VAR 0 61
64458: PUSH
64459: LD_INT 0
64461: PUSH
64462: LD_INT 0
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 0
64471: PUSH
64472: LD_INT 1
64474: NEG
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 1
64482: PUSH
64483: LD_INT 0
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 1
64492: PUSH
64493: LD_INT 1
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 0
64502: PUSH
64503: LD_INT 1
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 1
64512: NEG
64513: PUSH
64514: LD_INT 0
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 1
64523: NEG
64524: PUSH
64525: LD_INT 1
64527: NEG
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64542: LD_ADDR_VAR 0 62
64546: PUSH
64547: LD_INT 0
64549: PUSH
64550: LD_INT 0
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 0
64559: PUSH
64560: LD_INT 1
64562: NEG
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 1
64570: PUSH
64571: LD_INT 0
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 1
64580: PUSH
64581: LD_INT 1
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 0
64590: PUSH
64591: LD_INT 1
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 1
64600: NEG
64601: PUSH
64602: LD_INT 0
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 1
64611: NEG
64612: PUSH
64613: LD_INT 1
64615: NEG
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64630: LD_ADDR_VAR 0 63
64634: PUSH
64635: LD_INT 0
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 0
64647: PUSH
64648: LD_INT 1
64650: NEG
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 1
64658: PUSH
64659: LD_INT 0
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 1
64668: PUSH
64669: LD_INT 1
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 0
64678: PUSH
64679: LD_INT 1
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 1
64688: NEG
64689: PUSH
64690: LD_INT 0
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 1
64699: NEG
64700: PUSH
64701: LD_INT 1
64703: NEG
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64718: LD_ADDR_VAR 0 64
64722: PUSH
64723: LD_INT 0
64725: PUSH
64726: LD_INT 0
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 0
64735: PUSH
64736: LD_INT 1
64738: NEG
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 1
64746: PUSH
64747: LD_INT 0
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 1
64756: PUSH
64757: LD_INT 1
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 0
64766: PUSH
64767: LD_INT 1
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 1
64776: NEG
64777: PUSH
64778: LD_INT 0
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 1
64787: NEG
64788: PUSH
64789: LD_INT 1
64791: NEG
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: ST_TO_ADDR
// end ; 1 :
64806: GO 70703
64808: LD_INT 1
64810: DOUBLE
64811: EQUAL
64812: IFTRUE 64816
64814: GO 67439
64816: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64817: LD_ADDR_VAR 0 11
64821: PUSH
64822: LD_INT 1
64824: NEG
64825: PUSH
64826: LD_INT 3
64828: NEG
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: PUSH
64834: LD_INT 0
64836: PUSH
64837: LD_INT 3
64839: NEG
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 1
64847: PUSH
64848: LD_INT 2
64850: NEG
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: LIST
64860: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64861: LD_ADDR_VAR 0 12
64865: PUSH
64866: LD_INT 2
64868: PUSH
64869: LD_INT 1
64871: NEG
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 3
64879: PUSH
64880: LD_INT 0
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 3
64889: PUSH
64890: LD_INT 1
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: LIST
64901: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64902: LD_ADDR_VAR 0 13
64906: PUSH
64907: LD_INT 3
64909: PUSH
64910: LD_INT 2
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 3
64919: PUSH
64920: LD_INT 3
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 2
64929: PUSH
64930: LD_INT 3
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: LIST
64941: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64942: LD_ADDR_VAR 0 14
64946: PUSH
64947: LD_INT 1
64949: PUSH
64950: LD_INT 3
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 0
64959: PUSH
64960: LD_INT 3
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 1
64969: NEG
64970: PUSH
64971: LD_INT 2
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: LIST
64982: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64983: LD_ADDR_VAR 0 15
64987: PUSH
64988: LD_INT 2
64990: NEG
64991: PUSH
64992: LD_INT 1
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 3
65001: NEG
65002: PUSH
65003: LD_INT 0
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 3
65012: NEG
65013: PUSH
65014: LD_INT 1
65016: NEG
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: LIST
65026: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65027: LD_ADDR_VAR 0 16
65031: PUSH
65032: LD_INT 2
65034: NEG
65035: PUSH
65036: LD_INT 3
65038: NEG
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 3
65046: NEG
65047: PUSH
65048: LD_INT 2
65050: NEG
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 3
65058: NEG
65059: PUSH
65060: LD_INT 3
65062: NEG
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: LIST
65072: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65073: LD_ADDR_VAR 0 17
65077: PUSH
65078: LD_INT 1
65080: NEG
65081: PUSH
65082: LD_INT 3
65084: NEG
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 0
65092: PUSH
65093: LD_INT 3
65095: NEG
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 1
65103: PUSH
65104: LD_INT 2
65106: NEG
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: LIST
65116: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65117: LD_ADDR_VAR 0 18
65121: PUSH
65122: LD_INT 2
65124: PUSH
65125: LD_INT 1
65127: NEG
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 3
65135: PUSH
65136: LD_INT 0
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 3
65145: PUSH
65146: LD_INT 1
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: LIST
65157: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65158: LD_ADDR_VAR 0 19
65162: PUSH
65163: LD_INT 3
65165: PUSH
65166: LD_INT 2
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 3
65175: PUSH
65176: LD_INT 3
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 2
65185: PUSH
65186: LD_INT 3
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: LIST
65197: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65198: LD_ADDR_VAR 0 20
65202: PUSH
65203: LD_INT 1
65205: PUSH
65206: LD_INT 3
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 0
65215: PUSH
65216: LD_INT 3
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 1
65225: NEG
65226: PUSH
65227: LD_INT 2
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: LIST
65238: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65239: LD_ADDR_VAR 0 21
65243: PUSH
65244: LD_INT 2
65246: NEG
65247: PUSH
65248: LD_INT 1
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 3
65257: NEG
65258: PUSH
65259: LD_INT 0
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 3
65268: NEG
65269: PUSH
65270: LD_INT 1
65272: NEG
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: LIST
65282: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65283: LD_ADDR_VAR 0 22
65287: PUSH
65288: LD_INT 2
65290: NEG
65291: PUSH
65292: LD_INT 3
65294: NEG
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 3
65302: NEG
65303: PUSH
65304: LD_INT 2
65306: NEG
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 3
65314: NEG
65315: PUSH
65316: LD_INT 3
65318: NEG
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: LIST
65328: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65329: LD_ADDR_VAR 0 23
65333: PUSH
65334: LD_INT 0
65336: PUSH
65337: LD_INT 3
65339: NEG
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 1
65347: NEG
65348: PUSH
65349: LD_INT 4
65351: NEG
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 1
65359: PUSH
65360: LD_INT 3
65362: NEG
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: LIST
65372: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65373: LD_ADDR_VAR 0 24
65377: PUSH
65378: LD_INT 3
65380: PUSH
65381: LD_INT 0
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 3
65390: PUSH
65391: LD_INT 1
65393: NEG
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 4
65401: PUSH
65402: LD_INT 1
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: LIST
65413: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65414: LD_ADDR_VAR 0 25
65418: PUSH
65419: LD_INT 3
65421: PUSH
65422: LD_INT 3
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 4
65431: PUSH
65432: LD_INT 3
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 3
65441: PUSH
65442: LD_INT 4
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: LIST
65453: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65454: LD_ADDR_VAR 0 26
65458: PUSH
65459: LD_INT 0
65461: PUSH
65462: LD_INT 3
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 1
65471: PUSH
65472: LD_INT 4
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 1
65481: NEG
65482: PUSH
65483: LD_INT 3
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: LIST
65494: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65495: LD_ADDR_VAR 0 27
65499: PUSH
65500: LD_INT 3
65502: NEG
65503: PUSH
65504: LD_INT 0
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 3
65513: NEG
65514: PUSH
65515: LD_INT 1
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 4
65524: NEG
65525: PUSH
65526: LD_INT 1
65528: NEG
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: LIST
65538: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65539: LD_ADDR_VAR 0 28
65543: PUSH
65544: LD_INT 3
65546: NEG
65547: PUSH
65548: LD_INT 3
65550: NEG
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 3
65558: NEG
65559: PUSH
65560: LD_INT 4
65562: NEG
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 4
65570: NEG
65571: PUSH
65572: LD_INT 3
65574: NEG
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: LIST
65584: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65585: LD_ADDR_VAR 0 29
65589: PUSH
65590: LD_INT 1
65592: NEG
65593: PUSH
65594: LD_INT 3
65596: NEG
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 0
65604: PUSH
65605: LD_INT 3
65607: NEG
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 1
65615: PUSH
65616: LD_INT 2
65618: NEG
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 1
65626: NEG
65627: PUSH
65628: LD_INT 4
65630: NEG
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 0
65638: PUSH
65639: LD_INT 4
65641: NEG
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 1
65649: PUSH
65650: LD_INT 3
65652: NEG
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 1
65660: NEG
65661: PUSH
65662: LD_INT 5
65664: NEG
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PUSH
65670: LD_INT 0
65672: PUSH
65673: LD_INT 5
65675: NEG
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: LD_INT 1
65683: PUSH
65684: LD_INT 4
65686: NEG
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 1
65694: NEG
65695: PUSH
65696: LD_INT 6
65698: NEG
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 0
65706: PUSH
65707: LD_INT 6
65709: NEG
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 1
65717: PUSH
65718: LD_INT 5
65720: NEG
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65740: LD_ADDR_VAR 0 30
65744: PUSH
65745: LD_INT 2
65747: PUSH
65748: LD_INT 1
65750: NEG
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 3
65758: PUSH
65759: LD_INT 0
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 3
65768: PUSH
65769: LD_INT 1
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 3
65778: PUSH
65779: LD_INT 1
65781: NEG
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 4
65789: PUSH
65790: LD_INT 0
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 4
65799: PUSH
65800: LD_INT 1
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 4
65809: PUSH
65810: LD_INT 1
65812: NEG
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 5
65820: PUSH
65821: LD_INT 0
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 5
65830: PUSH
65831: LD_INT 1
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 5
65840: PUSH
65841: LD_INT 1
65843: NEG
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 6
65851: PUSH
65852: LD_INT 0
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 6
65861: PUSH
65862: LD_INT 1
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65883: LD_ADDR_VAR 0 31
65887: PUSH
65888: LD_INT 3
65890: PUSH
65891: LD_INT 2
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 3
65900: PUSH
65901: LD_INT 3
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 2
65910: PUSH
65911: LD_INT 3
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 4
65920: PUSH
65921: LD_INT 3
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 4
65930: PUSH
65931: LD_INT 4
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 3
65940: PUSH
65941: LD_INT 4
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 5
65950: PUSH
65951: LD_INT 4
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 5
65960: PUSH
65961: LD_INT 5
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 4
65970: PUSH
65971: LD_INT 5
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 6
65980: PUSH
65981: LD_INT 5
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 6
65990: PUSH
65991: LD_INT 6
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 5
66000: PUSH
66001: LD_INT 6
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66022: LD_ADDR_VAR 0 32
66026: PUSH
66027: LD_INT 1
66029: PUSH
66030: LD_INT 3
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 0
66039: PUSH
66040: LD_INT 3
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 1
66049: NEG
66050: PUSH
66051: LD_INT 2
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 1
66060: PUSH
66061: LD_INT 4
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: LD_INT 0
66070: PUSH
66071: LD_INT 4
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 1
66080: NEG
66081: PUSH
66082: LD_INT 3
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: PUSH
66089: LD_INT 1
66091: PUSH
66092: LD_INT 5
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 0
66101: PUSH
66102: LD_INT 5
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 1
66111: NEG
66112: PUSH
66113: LD_INT 4
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: LD_INT 1
66122: PUSH
66123: LD_INT 6
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 0
66132: PUSH
66133: LD_INT 6
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 1
66142: NEG
66143: PUSH
66144: LD_INT 5
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66165: LD_ADDR_VAR 0 33
66169: PUSH
66170: LD_INT 2
66172: NEG
66173: PUSH
66174: LD_INT 1
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 3
66183: NEG
66184: PUSH
66185: LD_INT 0
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 3
66194: NEG
66195: PUSH
66196: LD_INT 1
66198: NEG
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 3
66206: NEG
66207: PUSH
66208: LD_INT 1
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 4
66217: NEG
66218: PUSH
66219: LD_INT 0
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 4
66228: NEG
66229: PUSH
66230: LD_INT 1
66232: NEG
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 4
66240: NEG
66241: PUSH
66242: LD_INT 1
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 5
66251: NEG
66252: PUSH
66253: LD_INT 0
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 5
66262: NEG
66263: PUSH
66264: LD_INT 1
66266: NEG
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 5
66274: NEG
66275: PUSH
66276: LD_INT 1
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 6
66285: NEG
66286: PUSH
66287: LD_INT 0
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 6
66296: NEG
66297: PUSH
66298: LD_INT 1
66300: NEG
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66320: LD_ADDR_VAR 0 34
66324: PUSH
66325: LD_INT 2
66327: NEG
66328: PUSH
66329: LD_INT 3
66331: NEG
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 3
66339: NEG
66340: PUSH
66341: LD_INT 2
66343: NEG
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 3
66351: NEG
66352: PUSH
66353: LD_INT 3
66355: NEG
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 3
66363: NEG
66364: PUSH
66365: LD_INT 4
66367: NEG
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 4
66375: NEG
66376: PUSH
66377: LD_INT 3
66379: NEG
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 4
66387: NEG
66388: PUSH
66389: LD_INT 4
66391: NEG
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 4
66399: NEG
66400: PUSH
66401: LD_INT 5
66403: NEG
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 5
66411: NEG
66412: PUSH
66413: LD_INT 4
66415: NEG
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: LD_INT 5
66423: NEG
66424: PUSH
66425: LD_INT 5
66427: NEG
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 5
66435: NEG
66436: PUSH
66437: LD_INT 6
66439: NEG
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 6
66447: NEG
66448: PUSH
66449: LD_INT 5
66451: NEG
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 6
66459: NEG
66460: PUSH
66461: LD_INT 6
66463: NEG
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66483: LD_ADDR_VAR 0 41
66487: PUSH
66488: LD_INT 0
66490: PUSH
66491: LD_INT 2
66493: NEG
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 1
66501: NEG
66502: PUSH
66503: LD_INT 3
66505: NEG
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 1
66513: PUSH
66514: LD_INT 2
66516: NEG
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: LIST
66526: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66527: LD_ADDR_VAR 0 42
66531: PUSH
66532: LD_INT 2
66534: PUSH
66535: LD_INT 0
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 2
66544: PUSH
66545: LD_INT 1
66547: NEG
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 3
66555: PUSH
66556: LD_INT 1
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: LIST
66567: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66568: LD_ADDR_VAR 0 43
66572: PUSH
66573: LD_INT 2
66575: PUSH
66576: LD_INT 2
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: PUSH
66583: LD_INT 3
66585: PUSH
66586: LD_INT 2
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 2
66595: PUSH
66596: LD_INT 3
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: LIST
66607: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66608: LD_ADDR_VAR 0 44
66612: PUSH
66613: LD_INT 0
66615: PUSH
66616: LD_INT 2
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 1
66625: PUSH
66626: LD_INT 3
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 1
66635: NEG
66636: PUSH
66637: LD_INT 2
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: LIST
66648: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66649: LD_ADDR_VAR 0 45
66653: PUSH
66654: LD_INT 2
66656: NEG
66657: PUSH
66658: LD_INT 0
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 2
66667: NEG
66668: PUSH
66669: LD_INT 1
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 3
66678: NEG
66679: PUSH
66680: LD_INT 1
66682: NEG
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: LIST
66692: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66693: LD_ADDR_VAR 0 46
66697: PUSH
66698: LD_INT 2
66700: NEG
66701: PUSH
66702: LD_INT 2
66704: NEG
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_INT 2
66712: NEG
66713: PUSH
66714: LD_INT 3
66716: NEG
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 3
66724: NEG
66725: PUSH
66726: LD_INT 2
66728: NEG
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: LIST
66738: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66739: LD_ADDR_VAR 0 47
66743: PUSH
66744: LD_INT 2
66746: NEG
66747: PUSH
66748: LD_INT 3
66750: NEG
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 1
66758: NEG
66759: PUSH
66760: LD_INT 3
66762: NEG
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66772: LD_ADDR_VAR 0 48
66776: PUSH
66777: LD_INT 1
66779: PUSH
66780: LD_INT 2
66782: NEG
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 2
66790: PUSH
66791: LD_INT 1
66793: NEG
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66803: LD_ADDR_VAR 0 49
66807: PUSH
66808: LD_INT 3
66810: PUSH
66811: LD_INT 1
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 3
66820: PUSH
66821: LD_INT 2
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66832: LD_ADDR_VAR 0 50
66836: PUSH
66837: LD_INT 2
66839: PUSH
66840: LD_INT 3
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 1
66849: PUSH
66850: LD_INT 3
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66861: LD_ADDR_VAR 0 51
66865: PUSH
66866: LD_INT 1
66868: NEG
66869: PUSH
66870: LD_INT 2
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 2
66879: NEG
66880: PUSH
66881: LD_INT 1
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66892: LD_ADDR_VAR 0 52
66896: PUSH
66897: LD_INT 3
66899: NEG
66900: PUSH
66901: LD_INT 1
66903: NEG
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 3
66911: NEG
66912: PUSH
66913: LD_INT 2
66915: NEG
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66925: LD_ADDR_VAR 0 53
66929: PUSH
66930: LD_INT 1
66932: NEG
66933: PUSH
66934: LD_INT 3
66936: NEG
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 0
66944: PUSH
66945: LD_INT 3
66947: NEG
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: LD_INT 1
66955: PUSH
66956: LD_INT 2
66958: NEG
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: LIST
66968: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66969: LD_ADDR_VAR 0 54
66973: PUSH
66974: LD_INT 2
66976: PUSH
66977: LD_INT 1
66979: NEG
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 3
66987: PUSH
66988: LD_INT 0
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: LD_INT 3
66997: PUSH
66998: LD_INT 1
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: LIST
67009: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67010: LD_ADDR_VAR 0 55
67014: PUSH
67015: LD_INT 3
67017: PUSH
67018: LD_INT 2
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: LD_INT 3
67027: PUSH
67028: LD_INT 3
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 2
67037: PUSH
67038: LD_INT 3
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: LIST
67049: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67050: LD_ADDR_VAR 0 56
67054: PUSH
67055: LD_INT 1
67057: PUSH
67058: LD_INT 3
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 0
67067: PUSH
67068: LD_INT 3
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 1
67077: NEG
67078: PUSH
67079: LD_INT 2
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: LIST
67090: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67091: LD_ADDR_VAR 0 57
67095: PUSH
67096: LD_INT 2
67098: NEG
67099: PUSH
67100: LD_INT 1
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 3
67109: NEG
67110: PUSH
67111: LD_INT 0
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 3
67120: NEG
67121: PUSH
67122: LD_INT 1
67124: NEG
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: LIST
67134: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67135: LD_ADDR_VAR 0 58
67139: PUSH
67140: LD_INT 2
67142: NEG
67143: PUSH
67144: LD_INT 3
67146: NEG
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 3
67154: NEG
67155: PUSH
67156: LD_INT 2
67158: NEG
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 3
67166: NEG
67167: PUSH
67168: LD_INT 3
67170: NEG
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: LIST
67180: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67181: LD_ADDR_VAR 0 59
67185: PUSH
67186: LD_INT 1
67188: NEG
67189: PUSH
67190: LD_INT 2
67192: NEG
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 0
67200: PUSH
67201: LD_INT 2
67203: NEG
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: LD_INT 1
67211: PUSH
67212: LD_INT 1
67214: NEG
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: LIST
67224: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67225: LD_ADDR_VAR 0 60
67229: PUSH
67230: LD_INT 1
67232: PUSH
67233: LD_INT 1
67235: NEG
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: LD_INT 2
67243: PUSH
67244: LD_INT 0
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_INT 2
67253: PUSH
67254: LD_INT 1
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: LIST
67265: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67266: LD_ADDR_VAR 0 61
67270: PUSH
67271: LD_INT 2
67273: PUSH
67274: LD_INT 1
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 2
67283: PUSH
67284: LD_INT 2
67286: PUSH
67287: EMPTY
67288: LIST
67289: LIST
67290: PUSH
67291: LD_INT 1
67293: PUSH
67294: LD_INT 2
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: LIST
67305: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67306: LD_ADDR_VAR 0 62
67310: PUSH
67311: LD_INT 1
67313: PUSH
67314: LD_INT 2
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 0
67323: PUSH
67324: LD_INT 2
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 1
67333: NEG
67334: PUSH
67335: LD_INT 1
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: LIST
67346: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67347: LD_ADDR_VAR 0 63
67351: PUSH
67352: LD_INT 1
67354: NEG
67355: PUSH
67356: LD_INT 1
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 2
67365: NEG
67366: PUSH
67367: LD_INT 0
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 2
67376: NEG
67377: PUSH
67378: LD_INT 1
67380: NEG
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: LIST
67390: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67391: LD_ADDR_VAR 0 64
67395: PUSH
67396: LD_INT 1
67398: NEG
67399: PUSH
67400: LD_INT 2
67402: NEG
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 2
67410: NEG
67411: PUSH
67412: LD_INT 1
67414: NEG
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 2
67422: NEG
67423: PUSH
67424: LD_INT 2
67426: NEG
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: LIST
67436: ST_TO_ADDR
// end ; 2 :
67437: GO 70703
67439: LD_INT 2
67441: DOUBLE
67442: EQUAL
67443: IFTRUE 67447
67445: GO 70702
67447: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67448: LD_ADDR_VAR 0 29
67452: PUSH
67453: LD_INT 4
67455: PUSH
67456: LD_INT 0
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 4
67465: PUSH
67466: LD_INT 1
67468: NEG
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 5
67476: PUSH
67477: LD_INT 0
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: LD_INT 5
67486: PUSH
67487: LD_INT 1
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 4
67496: PUSH
67497: LD_INT 1
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: PUSH
67504: LD_INT 3
67506: PUSH
67507: LD_INT 0
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: PUSH
67514: LD_INT 3
67516: PUSH
67517: LD_INT 1
67519: NEG
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: LD_INT 3
67527: PUSH
67528: LD_INT 2
67530: NEG
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 5
67538: PUSH
67539: LD_INT 2
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 3
67548: PUSH
67549: LD_INT 3
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 3
67558: PUSH
67559: LD_INT 2
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 4
67568: PUSH
67569: LD_INT 3
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 4
67578: PUSH
67579: LD_INT 4
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 3
67588: PUSH
67589: LD_INT 4
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 2
67598: PUSH
67599: LD_INT 3
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 2
67608: PUSH
67609: LD_INT 2
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 4
67618: PUSH
67619: LD_INT 2
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 2
67628: PUSH
67629: LD_INT 4
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 0
67638: PUSH
67639: LD_INT 4
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 0
67648: PUSH
67649: LD_INT 3
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 1
67658: PUSH
67659: LD_INT 4
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: LD_INT 1
67668: PUSH
67669: LD_INT 5
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 0
67678: PUSH
67679: LD_INT 5
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 1
67688: NEG
67689: PUSH
67690: LD_INT 4
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: LD_INT 1
67699: NEG
67700: PUSH
67701: LD_INT 3
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: PUSH
67708: LD_INT 2
67710: PUSH
67711: LD_INT 5
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 2
67720: NEG
67721: PUSH
67722: LD_INT 3
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 3
67731: NEG
67732: PUSH
67733: LD_INT 0
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_INT 3
67742: NEG
67743: PUSH
67744: LD_INT 1
67746: NEG
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 2
67754: NEG
67755: PUSH
67756: LD_INT 0
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 2
67765: NEG
67766: PUSH
67767: LD_INT 1
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 3
67776: NEG
67777: PUSH
67778: LD_INT 1
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 4
67787: NEG
67788: PUSH
67789: LD_INT 0
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: LD_INT 4
67798: NEG
67799: PUSH
67800: LD_INT 1
67802: NEG
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: LD_INT 4
67810: NEG
67811: PUSH
67812: LD_INT 2
67814: NEG
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: PUSH
67820: LD_INT 2
67822: NEG
67823: PUSH
67824: LD_INT 2
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: LD_INT 4
67833: NEG
67834: PUSH
67835: LD_INT 4
67837: NEG
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: LD_INT 4
67845: NEG
67846: PUSH
67847: LD_INT 5
67849: NEG
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 3
67857: NEG
67858: PUSH
67859: LD_INT 4
67861: NEG
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 3
67869: NEG
67870: PUSH
67871: LD_INT 3
67873: NEG
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: LD_INT 4
67881: NEG
67882: PUSH
67883: LD_INT 3
67885: NEG
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 5
67893: NEG
67894: PUSH
67895: LD_INT 4
67897: NEG
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 5
67905: NEG
67906: PUSH
67907: LD_INT 5
67909: NEG
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: LD_INT 3
67917: NEG
67918: PUSH
67919: LD_INT 5
67921: NEG
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 5
67929: NEG
67930: PUSH
67931: LD_INT 3
67933: NEG
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: LIST
67955: LIST
67956: LIST
67957: LIST
67958: LIST
67959: LIST
67960: LIST
67961: LIST
67962: LIST
67963: LIST
67964: LIST
67965: LIST
67966: LIST
67967: LIST
67968: LIST
67969: LIST
67970: LIST
67971: LIST
67972: LIST
67973: LIST
67974: LIST
67975: LIST
67976: LIST
67977: LIST
67978: LIST
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67986: LD_ADDR_VAR 0 30
67990: PUSH
67991: LD_INT 4
67993: PUSH
67994: LD_INT 4
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: LD_INT 4
68003: PUSH
68004: LD_INT 3
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 5
68013: PUSH
68014: LD_INT 4
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PUSH
68021: LD_INT 5
68023: PUSH
68024: LD_INT 5
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 4
68033: PUSH
68034: LD_INT 5
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 3
68043: PUSH
68044: LD_INT 4
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: LD_INT 3
68053: PUSH
68054: LD_INT 3
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 5
68063: PUSH
68064: LD_INT 3
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 3
68073: PUSH
68074: LD_INT 5
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 0
68083: PUSH
68084: LD_INT 3
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 0
68093: PUSH
68094: LD_INT 2
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: LD_INT 1
68103: PUSH
68104: LD_INT 3
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 1
68113: PUSH
68114: LD_INT 4
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 0
68123: PUSH
68124: LD_INT 4
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 1
68133: NEG
68134: PUSH
68135: LD_INT 3
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 1
68144: NEG
68145: PUSH
68146: LD_INT 2
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 2
68155: PUSH
68156: LD_INT 4
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 2
68165: NEG
68166: PUSH
68167: LD_INT 2
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: LD_INT 4
68176: NEG
68177: PUSH
68178: LD_INT 0
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 4
68187: NEG
68188: PUSH
68189: LD_INT 1
68191: NEG
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: LD_INT 3
68199: NEG
68200: PUSH
68201: LD_INT 0
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 3
68210: NEG
68211: PUSH
68212: LD_INT 1
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 4
68221: NEG
68222: PUSH
68223: LD_INT 1
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 5
68232: NEG
68233: PUSH
68234: LD_INT 0
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: LD_INT 5
68243: NEG
68244: PUSH
68245: LD_INT 1
68247: NEG
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: LD_INT 5
68255: NEG
68256: PUSH
68257: LD_INT 2
68259: NEG
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 3
68267: NEG
68268: PUSH
68269: LD_INT 2
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 3
68278: NEG
68279: PUSH
68280: LD_INT 3
68282: NEG
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 3
68290: NEG
68291: PUSH
68292: LD_INT 4
68294: NEG
68295: PUSH
68296: EMPTY
68297: LIST
68298: LIST
68299: PUSH
68300: LD_INT 2
68302: NEG
68303: PUSH
68304: LD_INT 3
68306: NEG
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 2
68314: NEG
68315: PUSH
68316: LD_INT 2
68318: NEG
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 3
68326: NEG
68327: PUSH
68328: LD_INT 2
68330: NEG
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 4
68338: NEG
68339: PUSH
68340: LD_INT 3
68342: NEG
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 4
68350: NEG
68351: PUSH
68352: LD_INT 4
68354: NEG
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: LD_INT 2
68362: NEG
68363: PUSH
68364: LD_INT 4
68366: NEG
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 4
68374: NEG
68375: PUSH
68376: LD_INT 2
68378: NEG
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: LD_INT 0
68386: PUSH
68387: LD_INT 4
68389: NEG
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: LD_INT 0
68397: PUSH
68398: LD_INT 5
68400: NEG
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: LD_INT 1
68408: PUSH
68409: LD_INT 4
68411: NEG
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: PUSH
68417: LD_INT 1
68419: PUSH
68420: LD_INT 3
68422: NEG
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: PUSH
68428: LD_INT 0
68430: PUSH
68431: LD_INT 3
68433: NEG
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: PUSH
68439: LD_INT 1
68441: NEG
68442: PUSH
68443: LD_INT 4
68445: NEG
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: PUSH
68451: LD_INT 1
68453: NEG
68454: PUSH
68455: LD_INT 5
68457: NEG
68458: PUSH
68459: EMPTY
68460: LIST
68461: LIST
68462: PUSH
68463: LD_INT 2
68465: PUSH
68466: LD_INT 3
68468: NEG
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 2
68476: NEG
68477: PUSH
68478: LD_INT 5
68480: NEG
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: LIST
68504: LIST
68505: LIST
68506: LIST
68507: LIST
68508: LIST
68509: LIST
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68533: LD_ADDR_VAR 0 31
68537: PUSH
68538: LD_INT 0
68540: PUSH
68541: LD_INT 4
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 0
68550: PUSH
68551: LD_INT 3
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: LD_INT 1
68560: PUSH
68561: LD_INT 4
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 1
68570: PUSH
68571: LD_INT 5
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: PUSH
68578: LD_INT 0
68580: PUSH
68581: LD_INT 5
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: PUSH
68588: LD_INT 1
68590: NEG
68591: PUSH
68592: LD_INT 4
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: LD_INT 1
68601: NEG
68602: PUSH
68603: LD_INT 3
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: LD_INT 2
68612: PUSH
68613: LD_INT 5
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 2
68622: NEG
68623: PUSH
68624: LD_INT 3
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 3
68633: NEG
68634: PUSH
68635: LD_INT 0
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: PUSH
68642: LD_INT 3
68644: NEG
68645: PUSH
68646: LD_INT 1
68648: NEG
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 2
68656: NEG
68657: PUSH
68658: LD_INT 0
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 2
68667: NEG
68668: PUSH
68669: LD_INT 1
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: LD_INT 3
68678: NEG
68679: PUSH
68680: LD_INT 1
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PUSH
68687: LD_INT 4
68689: NEG
68690: PUSH
68691: LD_INT 0
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: LD_INT 4
68700: NEG
68701: PUSH
68702: LD_INT 1
68704: NEG
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: LD_INT 4
68712: NEG
68713: PUSH
68714: LD_INT 2
68716: NEG
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 2
68724: NEG
68725: PUSH
68726: LD_INT 2
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 4
68735: NEG
68736: PUSH
68737: LD_INT 4
68739: NEG
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 4
68747: NEG
68748: PUSH
68749: LD_INT 5
68751: NEG
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: LD_INT 3
68759: NEG
68760: PUSH
68761: LD_INT 4
68763: NEG
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 3
68771: NEG
68772: PUSH
68773: LD_INT 3
68775: NEG
68776: PUSH
68777: EMPTY
68778: LIST
68779: LIST
68780: PUSH
68781: LD_INT 4
68783: NEG
68784: PUSH
68785: LD_INT 3
68787: NEG
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: PUSH
68793: LD_INT 5
68795: NEG
68796: PUSH
68797: LD_INT 4
68799: NEG
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: PUSH
68805: LD_INT 5
68807: NEG
68808: PUSH
68809: LD_INT 5
68811: NEG
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PUSH
68817: LD_INT 3
68819: NEG
68820: PUSH
68821: LD_INT 5
68823: NEG
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: PUSH
68829: LD_INT 5
68831: NEG
68832: PUSH
68833: LD_INT 3
68835: NEG
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PUSH
68841: LD_INT 0
68843: PUSH
68844: LD_INT 3
68846: NEG
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 0
68854: PUSH
68855: LD_INT 4
68857: NEG
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 1
68865: PUSH
68866: LD_INT 3
68868: NEG
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 1
68876: PUSH
68877: LD_INT 2
68879: NEG
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: LD_INT 0
68887: PUSH
68888: LD_INT 2
68890: NEG
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: PUSH
68896: LD_INT 1
68898: NEG
68899: PUSH
68900: LD_INT 3
68902: NEG
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: PUSH
68908: LD_INT 1
68910: NEG
68911: PUSH
68912: LD_INT 4
68914: NEG
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: PUSH
68920: LD_INT 2
68922: PUSH
68923: LD_INT 2
68925: NEG
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: PUSH
68931: LD_INT 2
68933: NEG
68934: PUSH
68935: LD_INT 4
68937: NEG
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: LD_INT 4
68945: PUSH
68946: LD_INT 0
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 4
68955: PUSH
68956: LD_INT 1
68958: NEG
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 5
68966: PUSH
68967: LD_INT 0
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 5
68976: PUSH
68977: LD_INT 1
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 4
68986: PUSH
68987: LD_INT 1
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 3
68996: PUSH
68997: LD_INT 0
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 3
69006: PUSH
69007: LD_INT 1
69009: NEG
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PUSH
69015: LD_INT 3
69017: PUSH
69018: LD_INT 2
69020: NEG
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 5
69028: PUSH
69029: LD_INT 2
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: LIST
69076: LIST
69077: LIST
69078: LIST
69079: LIST
69080: LIST
69081: LIST
69082: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69083: LD_ADDR_VAR 0 32
69087: PUSH
69088: LD_INT 4
69090: NEG
69091: PUSH
69092: LD_INT 0
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: PUSH
69099: LD_INT 4
69101: NEG
69102: PUSH
69103: LD_INT 1
69105: NEG
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 3
69113: NEG
69114: PUSH
69115: LD_INT 0
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PUSH
69122: LD_INT 3
69124: NEG
69125: PUSH
69126: LD_INT 1
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: LD_INT 4
69135: NEG
69136: PUSH
69137: LD_INT 1
69139: PUSH
69140: EMPTY
69141: LIST
69142: LIST
69143: PUSH
69144: LD_INT 5
69146: NEG
69147: PUSH
69148: LD_INT 0
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PUSH
69155: LD_INT 5
69157: NEG
69158: PUSH
69159: LD_INT 1
69161: NEG
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: PUSH
69167: LD_INT 5
69169: NEG
69170: PUSH
69171: LD_INT 2
69173: NEG
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PUSH
69179: LD_INT 3
69181: NEG
69182: PUSH
69183: LD_INT 2
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: LD_INT 3
69192: NEG
69193: PUSH
69194: LD_INT 3
69196: NEG
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: PUSH
69202: LD_INT 3
69204: NEG
69205: PUSH
69206: LD_INT 4
69208: NEG
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: LD_INT 2
69216: NEG
69217: PUSH
69218: LD_INT 3
69220: NEG
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: PUSH
69226: LD_INT 2
69228: NEG
69229: PUSH
69230: LD_INT 2
69232: NEG
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: PUSH
69238: LD_INT 3
69240: NEG
69241: PUSH
69242: LD_INT 2
69244: NEG
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 4
69252: NEG
69253: PUSH
69254: LD_INT 3
69256: NEG
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: LD_INT 4
69264: NEG
69265: PUSH
69266: LD_INT 4
69268: NEG
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 2
69276: NEG
69277: PUSH
69278: LD_INT 4
69280: NEG
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: LD_INT 4
69288: NEG
69289: PUSH
69290: LD_INT 2
69292: NEG
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 0
69300: PUSH
69301: LD_INT 4
69303: NEG
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 0
69311: PUSH
69312: LD_INT 5
69314: NEG
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 1
69322: PUSH
69323: LD_INT 4
69325: NEG
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 1
69333: PUSH
69334: LD_INT 3
69336: NEG
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 0
69344: PUSH
69345: LD_INT 3
69347: NEG
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: PUSH
69353: LD_INT 1
69355: NEG
69356: PUSH
69357: LD_INT 4
69359: NEG
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: LD_INT 1
69367: NEG
69368: PUSH
69369: LD_INT 5
69371: NEG
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: PUSH
69377: LD_INT 2
69379: PUSH
69380: LD_INT 3
69382: NEG
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 2
69390: NEG
69391: PUSH
69392: LD_INT 5
69394: NEG
69395: PUSH
69396: EMPTY
69397: LIST
69398: LIST
69399: PUSH
69400: LD_INT 3
69402: PUSH
69403: LD_INT 0
69405: PUSH
69406: EMPTY
69407: LIST
69408: LIST
69409: PUSH
69410: LD_INT 3
69412: PUSH
69413: LD_INT 1
69415: NEG
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: PUSH
69421: LD_INT 4
69423: PUSH
69424: LD_INT 0
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: PUSH
69431: LD_INT 4
69433: PUSH
69434: LD_INT 1
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: PUSH
69441: LD_INT 3
69443: PUSH
69444: LD_INT 1
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: PUSH
69451: LD_INT 2
69453: PUSH
69454: LD_INT 0
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 2
69463: PUSH
69464: LD_INT 1
69466: NEG
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: LD_INT 2
69474: PUSH
69475: LD_INT 2
69477: NEG
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: LD_INT 4
69485: PUSH
69486: LD_INT 2
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PUSH
69493: LD_INT 4
69495: PUSH
69496: LD_INT 4
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PUSH
69503: LD_INT 4
69505: PUSH
69506: LD_INT 3
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: PUSH
69513: LD_INT 5
69515: PUSH
69516: LD_INT 4
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: LD_INT 5
69525: PUSH
69526: LD_INT 5
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 4
69535: PUSH
69536: LD_INT 5
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 3
69545: PUSH
69546: LD_INT 4
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PUSH
69553: LD_INT 3
69555: PUSH
69556: LD_INT 3
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PUSH
69563: LD_INT 5
69565: PUSH
69566: LD_INT 3
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: PUSH
69573: LD_INT 3
69575: PUSH
69576: LD_INT 5
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: LIST
69593: LIST
69594: LIST
69595: LIST
69596: LIST
69597: LIST
69598: LIST
69599: LIST
69600: LIST
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: LIST
69609: LIST
69610: LIST
69611: LIST
69612: LIST
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: LIST
69626: LIST
69627: LIST
69628: LIST
69629: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69630: LD_ADDR_VAR 0 33
69634: PUSH
69635: LD_INT 4
69637: NEG
69638: PUSH
69639: LD_INT 4
69641: NEG
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 4
69649: NEG
69650: PUSH
69651: LD_INT 5
69653: NEG
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: PUSH
69659: LD_INT 3
69661: NEG
69662: PUSH
69663: LD_INT 4
69665: NEG
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: PUSH
69671: LD_INT 3
69673: NEG
69674: PUSH
69675: LD_INT 3
69677: NEG
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: LD_INT 4
69685: NEG
69686: PUSH
69687: LD_INT 3
69689: NEG
69690: PUSH
69691: EMPTY
69692: LIST
69693: LIST
69694: PUSH
69695: LD_INT 5
69697: NEG
69698: PUSH
69699: LD_INT 4
69701: NEG
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: LD_INT 5
69709: NEG
69710: PUSH
69711: LD_INT 5
69713: NEG
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: LD_INT 3
69721: NEG
69722: PUSH
69723: LD_INT 5
69725: NEG
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PUSH
69731: LD_INT 5
69733: NEG
69734: PUSH
69735: LD_INT 3
69737: NEG
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: PUSH
69743: LD_INT 0
69745: PUSH
69746: LD_INT 3
69748: NEG
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: LD_INT 0
69756: PUSH
69757: LD_INT 4
69759: NEG
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_INT 1
69767: PUSH
69768: LD_INT 3
69770: NEG
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: LD_INT 1
69778: PUSH
69779: LD_INT 2
69781: NEG
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PUSH
69787: LD_INT 0
69789: PUSH
69790: LD_INT 2
69792: NEG
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: PUSH
69798: LD_INT 1
69800: NEG
69801: PUSH
69802: LD_INT 3
69804: NEG
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: LD_INT 1
69812: NEG
69813: PUSH
69814: LD_INT 4
69816: NEG
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: PUSH
69822: LD_INT 2
69824: PUSH
69825: LD_INT 2
69827: NEG
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PUSH
69833: LD_INT 2
69835: NEG
69836: PUSH
69837: LD_INT 4
69839: NEG
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 4
69847: PUSH
69848: LD_INT 0
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 4
69857: PUSH
69858: LD_INT 1
69860: NEG
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: PUSH
69866: LD_INT 5
69868: PUSH
69869: LD_INT 0
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: PUSH
69876: LD_INT 5
69878: PUSH
69879: LD_INT 1
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: PUSH
69886: LD_INT 4
69888: PUSH
69889: LD_INT 1
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: PUSH
69896: LD_INT 3
69898: PUSH
69899: LD_INT 0
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: LD_INT 3
69908: PUSH
69909: LD_INT 1
69911: NEG
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 3
69919: PUSH
69920: LD_INT 2
69922: NEG
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 5
69930: PUSH
69931: LD_INT 2
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PUSH
69938: LD_INT 3
69940: PUSH
69941: LD_INT 3
69943: PUSH
69944: EMPTY
69945: LIST
69946: LIST
69947: PUSH
69948: LD_INT 3
69950: PUSH
69951: LD_INT 2
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 4
69960: PUSH
69961: LD_INT 3
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 4
69970: PUSH
69971: LD_INT 4
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: PUSH
69978: LD_INT 3
69980: PUSH
69981: LD_INT 4
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 2
69990: PUSH
69991: LD_INT 3
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 2
70000: PUSH
70001: LD_INT 2
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 4
70010: PUSH
70011: LD_INT 2
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 2
70020: PUSH
70021: LD_INT 4
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: LD_INT 0
70030: PUSH
70031: LD_INT 4
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: PUSH
70038: LD_INT 0
70040: PUSH
70041: LD_INT 3
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 1
70050: PUSH
70051: LD_INT 4
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 1
70060: PUSH
70061: LD_INT 5
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 0
70070: PUSH
70071: LD_INT 5
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 1
70080: NEG
70081: PUSH
70082: LD_INT 4
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: LD_INT 1
70091: NEG
70092: PUSH
70093: LD_INT 3
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: PUSH
70100: LD_INT 2
70102: PUSH
70103: LD_INT 5
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 2
70112: NEG
70113: PUSH
70114: LD_INT 3
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: LIST
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: LIST
70145: LIST
70146: LIST
70147: LIST
70148: LIST
70149: LIST
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: LIST
70155: LIST
70156: LIST
70157: LIST
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: LIST
70165: LIST
70166: LIST
70167: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70168: LD_ADDR_VAR 0 34
70172: PUSH
70173: LD_INT 0
70175: PUSH
70176: LD_INT 4
70178: NEG
70179: PUSH
70180: EMPTY
70181: LIST
70182: LIST
70183: PUSH
70184: LD_INT 0
70186: PUSH
70187: LD_INT 5
70189: NEG
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: LD_INT 1
70197: PUSH
70198: LD_INT 4
70200: NEG
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: PUSH
70206: LD_INT 1
70208: PUSH
70209: LD_INT 3
70211: NEG
70212: PUSH
70213: EMPTY
70214: LIST
70215: LIST
70216: PUSH
70217: LD_INT 0
70219: PUSH
70220: LD_INT 3
70222: NEG
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: PUSH
70228: LD_INT 1
70230: NEG
70231: PUSH
70232: LD_INT 4
70234: NEG
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: PUSH
70240: LD_INT 1
70242: NEG
70243: PUSH
70244: LD_INT 5
70246: NEG
70247: PUSH
70248: EMPTY
70249: LIST
70250: LIST
70251: PUSH
70252: LD_INT 2
70254: PUSH
70255: LD_INT 3
70257: NEG
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: LD_INT 2
70265: NEG
70266: PUSH
70267: LD_INT 5
70269: NEG
70270: PUSH
70271: EMPTY
70272: LIST
70273: LIST
70274: PUSH
70275: LD_INT 3
70277: PUSH
70278: LD_INT 0
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: PUSH
70285: LD_INT 3
70287: PUSH
70288: LD_INT 1
70290: NEG
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: PUSH
70296: LD_INT 4
70298: PUSH
70299: LD_INT 0
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 4
70308: PUSH
70309: LD_INT 1
70311: PUSH
70312: EMPTY
70313: LIST
70314: LIST
70315: PUSH
70316: LD_INT 3
70318: PUSH
70319: LD_INT 1
70321: PUSH
70322: EMPTY
70323: LIST
70324: LIST
70325: PUSH
70326: LD_INT 2
70328: PUSH
70329: LD_INT 0
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: PUSH
70336: LD_INT 2
70338: PUSH
70339: LD_INT 1
70341: NEG
70342: PUSH
70343: EMPTY
70344: LIST
70345: LIST
70346: PUSH
70347: LD_INT 2
70349: PUSH
70350: LD_INT 2
70352: NEG
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: PUSH
70358: LD_INT 4
70360: PUSH
70361: LD_INT 2
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: PUSH
70368: LD_INT 4
70370: PUSH
70371: LD_INT 4
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PUSH
70378: LD_INT 4
70380: PUSH
70381: LD_INT 3
70383: PUSH
70384: EMPTY
70385: LIST
70386: LIST
70387: PUSH
70388: LD_INT 5
70390: PUSH
70391: LD_INT 4
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: LD_INT 5
70400: PUSH
70401: LD_INT 5
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: LD_INT 4
70410: PUSH
70411: LD_INT 5
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: PUSH
70418: LD_INT 3
70420: PUSH
70421: LD_INT 4
70423: PUSH
70424: EMPTY
70425: LIST
70426: LIST
70427: PUSH
70428: LD_INT 3
70430: PUSH
70431: LD_INT 3
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: LD_INT 5
70440: PUSH
70441: LD_INT 3
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: PUSH
70448: LD_INT 3
70450: PUSH
70451: LD_INT 5
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: LD_INT 0
70460: PUSH
70461: LD_INT 3
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PUSH
70468: LD_INT 0
70470: PUSH
70471: LD_INT 2
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: PUSH
70478: LD_INT 1
70480: PUSH
70481: LD_INT 3
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: PUSH
70488: LD_INT 1
70490: PUSH
70491: LD_INT 4
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 0
70500: PUSH
70501: LD_INT 4
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: LD_INT 1
70510: NEG
70511: PUSH
70512: LD_INT 3
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: PUSH
70519: LD_INT 1
70521: NEG
70522: PUSH
70523: LD_INT 2
70525: PUSH
70526: EMPTY
70527: LIST
70528: LIST
70529: PUSH
70530: LD_INT 2
70532: PUSH
70533: LD_INT 4
70535: PUSH
70536: EMPTY
70537: LIST
70538: LIST
70539: PUSH
70540: LD_INT 2
70542: NEG
70543: PUSH
70544: LD_INT 2
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: PUSH
70551: LD_INT 4
70553: NEG
70554: PUSH
70555: LD_INT 0
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PUSH
70562: LD_INT 4
70564: NEG
70565: PUSH
70566: LD_INT 1
70568: NEG
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: PUSH
70574: LD_INT 3
70576: NEG
70577: PUSH
70578: LD_INT 0
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PUSH
70585: LD_INT 3
70587: NEG
70588: PUSH
70589: LD_INT 1
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PUSH
70596: LD_INT 4
70598: NEG
70599: PUSH
70600: LD_INT 1
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: PUSH
70607: LD_INT 5
70609: NEG
70610: PUSH
70611: LD_INT 0
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: PUSH
70618: LD_INT 5
70620: NEG
70621: PUSH
70622: LD_INT 1
70624: NEG
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 5
70632: NEG
70633: PUSH
70634: LD_INT 2
70636: NEG
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: PUSH
70642: LD_INT 3
70644: NEG
70645: PUSH
70646: LD_INT 2
70648: PUSH
70649: EMPTY
70650: LIST
70651: LIST
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: LIST
70677: LIST
70678: LIST
70679: LIST
70680: LIST
70681: LIST
70682: LIST
70683: LIST
70684: LIST
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: LIST
70693: LIST
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: ST_TO_ADDR
// end ; end ;
70700: GO 70703
70702: POP
// case btype of b_depot , b_warehouse :
70703: LD_VAR 0 1
70707: PUSH
70708: LD_INT 0
70710: DOUBLE
70711: EQUAL
70712: IFTRUE 70722
70714: LD_INT 1
70716: DOUBLE
70717: EQUAL
70718: IFTRUE 70722
70720: GO 70923
70722: POP
// case nation of nation_american :
70723: LD_VAR 0 5
70727: PUSH
70728: LD_INT 1
70730: DOUBLE
70731: EQUAL
70732: IFTRUE 70736
70734: GO 70792
70736: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70737: LD_ADDR_VAR 0 9
70741: PUSH
70742: LD_VAR 0 11
70746: PUSH
70747: LD_VAR 0 12
70751: PUSH
70752: LD_VAR 0 13
70756: PUSH
70757: LD_VAR 0 14
70761: PUSH
70762: LD_VAR 0 15
70766: PUSH
70767: LD_VAR 0 16
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: LIST
70776: LIST
70777: LIST
70778: LIST
70779: PUSH
70780: LD_VAR 0 4
70784: PUSH
70785: LD_INT 1
70787: PLUS
70788: ARRAY
70789: ST_TO_ADDR
70790: GO 70921
70792: LD_INT 2
70794: DOUBLE
70795: EQUAL
70796: IFTRUE 70800
70798: GO 70856
70800: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70801: LD_ADDR_VAR 0 9
70805: PUSH
70806: LD_VAR 0 17
70810: PUSH
70811: LD_VAR 0 18
70815: PUSH
70816: LD_VAR 0 19
70820: PUSH
70821: LD_VAR 0 20
70825: PUSH
70826: LD_VAR 0 21
70830: PUSH
70831: LD_VAR 0 22
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: PUSH
70844: LD_VAR 0 4
70848: PUSH
70849: LD_INT 1
70851: PLUS
70852: ARRAY
70853: ST_TO_ADDR
70854: GO 70921
70856: LD_INT 3
70858: DOUBLE
70859: EQUAL
70860: IFTRUE 70864
70862: GO 70920
70864: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70865: LD_ADDR_VAR 0 9
70869: PUSH
70870: LD_VAR 0 23
70874: PUSH
70875: LD_VAR 0 24
70879: PUSH
70880: LD_VAR 0 25
70884: PUSH
70885: LD_VAR 0 26
70889: PUSH
70890: LD_VAR 0 27
70894: PUSH
70895: LD_VAR 0 28
70899: PUSH
70900: EMPTY
70901: LIST
70902: LIST
70903: LIST
70904: LIST
70905: LIST
70906: LIST
70907: PUSH
70908: LD_VAR 0 4
70912: PUSH
70913: LD_INT 1
70915: PLUS
70916: ARRAY
70917: ST_TO_ADDR
70918: GO 70921
70920: POP
70921: GO 71476
70923: LD_INT 2
70925: DOUBLE
70926: EQUAL
70927: IFTRUE 70937
70929: LD_INT 3
70931: DOUBLE
70932: EQUAL
70933: IFTRUE 70937
70935: GO 70993
70937: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70938: LD_ADDR_VAR 0 9
70942: PUSH
70943: LD_VAR 0 29
70947: PUSH
70948: LD_VAR 0 30
70952: PUSH
70953: LD_VAR 0 31
70957: PUSH
70958: LD_VAR 0 32
70962: PUSH
70963: LD_VAR 0 33
70967: PUSH
70968: LD_VAR 0 34
70972: PUSH
70973: EMPTY
70974: LIST
70975: LIST
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: PUSH
70981: LD_VAR 0 4
70985: PUSH
70986: LD_INT 1
70988: PLUS
70989: ARRAY
70990: ST_TO_ADDR
70991: GO 71476
70993: LD_INT 16
70995: DOUBLE
70996: EQUAL
70997: IFTRUE 71055
70999: LD_INT 17
71001: DOUBLE
71002: EQUAL
71003: IFTRUE 71055
71005: LD_INT 18
71007: DOUBLE
71008: EQUAL
71009: IFTRUE 71055
71011: LD_INT 19
71013: DOUBLE
71014: EQUAL
71015: IFTRUE 71055
71017: LD_INT 22
71019: DOUBLE
71020: EQUAL
71021: IFTRUE 71055
71023: LD_INT 20
71025: DOUBLE
71026: EQUAL
71027: IFTRUE 71055
71029: LD_INT 21
71031: DOUBLE
71032: EQUAL
71033: IFTRUE 71055
71035: LD_INT 23
71037: DOUBLE
71038: EQUAL
71039: IFTRUE 71055
71041: LD_INT 24
71043: DOUBLE
71044: EQUAL
71045: IFTRUE 71055
71047: LD_INT 25
71049: DOUBLE
71050: EQUAL
71051: IFTRUE 71055
71053: GO 71111
71055: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71056: LD_ADDR_VAR 0 9
71060: PUSH
71061: LD_VAR 0 35
71065: PUSH
71066: LD_VAR 0 36
71070: PUSH
71071: LD_VAR 0 37
71075: PUSH
71076: LD_VAR 0 38
71080: PUSH
71081: LD_VAR 0 39
71085: PUSH
71086: LD_VAR 0 40
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: LIST
71095: LIST
71096: LIST
71097: LIST
71098: PUSH
71099: LD_VAR 0 4
71103: PUSH
71104: LD_INT 1
71106: PLUS
71107: ARRAY
71108: ST_TO_ADDR
71109: GO 71476
71111: LD_INT 6
71113: DOUBLE
71114: EQUAL
71115: IFTRUE 71167
71117: LD_INT 7
71119: DOUBLE
71120: EQUAL
71121: IFTRUE 71167
71123: LD_INT 8
71125: DOUBLE
71126: EQUAL
71127: IFTRUE 71167
71129: LD_INT 13
71131: DOUBLE
71132: EQUAL
71133: IFTRUE 71167
71135: LD_INT 12
71137: DOUBLE
71138: EQUAL
71139: IFTRUE 71167
71141: LD_INT 15
71143: DOUBLE
71144: EQUAL
71145: IFTRUE 71167
71147: LD_INT 11
71149: DOUBLE
71150: EQUAL
71151: IFTRUE 71167
71153: LD_INT 14
71155: DOUBLE
71156: EQUAL
71157: IFTRUE 71167
71159: LD_INT 10
71161: DOUBLE
71162: EQUAL
71163: IFTRUE 71167
71165: GO 71223
71167: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71168: LD_ADDR_VAR 0 9
71172: PUSH
71173: LD_VAR 0 41
71177: PUSH
71178: LD_VAR 0 42
71182: PUSH
71183: LD_VAR 0 43
71187: PUSH
71188: LD_VAR 0 44
71192: PUSH
71193: LD_VAR 0 45
71197: PUSH
71198: LD_VAR 0 46
71202: PUSH
71203: EMPTY
71204: LIST
71205: LIST
71206: LIST
71207: LIST
71208: LIST
71209: LIST
71210: PUSH
71211: LD_VAR 0 4
71215: PUSH
71216: LD_INT 1
71218: PLUS
71219: ARRAY
71220: ST_TO_ADDR
71221: GO 71476
71223: LD_INT 36
71225: DOUBLE
71226: EQUAL
71227: IFTRUE 71231
71229: GO 71287
71231: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71232: LD_ADDR_VAR 0 9
71236: PUSH
71237: LD_VAR 0 47
71241: PUSH
71242: LD_VAR 0 48
71246: PUSH
71247: LD_VAR 0 49
71251: PUSH
71252: LD_VAR 0 50
71256: PUSH
71257: LD_VAR 0 51
71261: PUSH
71262: LD_VAR 0 52
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: LIST
71271: LIST
71272: LIST
71273: LIST
71274: PUSH
71275: LD_VAR 0 4
71279: PUSH
71280: LD_INT 1
71282: PLUS
71283: ARRAY
71284: ST_TO_ADDR
71285: GO 71476
71287: LD_INT 4
71289: DOUBLE
71290: EQUAL
71291: IFTRUE 71313
71293: LD_INT 5
71295: DOUBLE
71296: EQUAL
71297: IFTRUE 71313
71299: LD_INT 34
71301: DOUBLE
71302: EQUAL
71303: IFTRUE 71313
71305: LD_INT 37
71307: DOUBLE
71308: EQUAL
71309: IFTRUE 71313
71311: GO 71369
71313: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71314: LD_ADDR_VAR 0 9
71318: PUSH
71319: LD_VAR 0 53
71323: PUSH
71324: LD_VAR 0 54
71328: PUSH
71329: LD_VAR 0 55
71333: PUSH
71334: LD_VAR 0 56
71338: PUSH
71339: LD_VAR 0 57
71343: PUSH
71344: LD_VAR 0 58
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: LIST
71353: LIST
71354: LIST
71355: LIST
71356: PUSH
71357: LD_VAR 0 4
71361: PUSH
71362: LD_INT 1
71364: PLUS
71365: ARRAY
71366: ST_TO_ADDR
71367: GO 71476
71369: LD_INT 31
71371: DOUBLE
71372: EQUAL
71373: IFTRUE 71419
71375: LD_INT 32
71377: DOUBLE
71378: EQUAL
71379: IFTRUE 71419
71381: LD_INT 33
71383: DOUBLE
71384: EQUAL
71385: IFTRUE 71419
71387: LD_INT 27
71389: DOUBLE
71390: EQUAL
71391: IFTRUE 71419
71393: LD_INT 26
71395: DOUBLE
71396: EQUAL
71397: IFTRUE 71419
71399: LD_INT 28
71401: DOUBLE
71402: EQUAL
71403: IFTRUE 71419
71405: LD_INT 29
71407: DOUBLE
71408: EQUAL
71409: IFTRUE 71419
71411: LD_INT 30
71413: DOUBLE
71414: EQUAL
71415: IFTRUE 71419
71417: GO 71475
71419: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71420: LD_ADDR_VAR 0 9
71424: PUSH
71425: LD_VAR 0 59
71429: PUSH
71430: LD_VAR 0 60
71434: PUSH
71435: LD_VAR 0 61
71439: PUSH
71440: LD_VAR 0 62
71444: PUSH
71445: LD_VAR 0 63
71449: PUSH
71450: LD_VAR 0 64
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: LIST
71459: LIST
71460: LIST
71461: LIST
71462: PUSH
71463: LD_VAR 0 4
71467: PUSH
71468: LD_INT 1
71470: PLUS
71471: ARRAY
71472: ST_TO_ADDR
71473: GO 71476
71475: POP
// temp_list2 = [ ] ;
71476: LD_ADDR_VAR 0 10
71480: PUSH
71481: EMPTY
71482: ST_TO_ADDR
// for i in temp_list do
71483: LD_ADDR_VAR 0 8
71487: PUSH
71488: LD_VAR 0 9
71492: PUSH
71493: FOR_IN
71494: IFFALSE 71546
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71496: LD_ADDR_VAR 0 10
71500: PUSH
71501: LD_VAR 0 10
71505: PUSH
71506: LD_VAR 0 8
71510: PUSH
71511: LD_INT 1
71513: ARRAY
71514: PUSH
71515: LD_VAR 0 2
71519: PLUS
71520: PUSH
71521: LD_VAR 0 8
71525: PUSH
71526: LD_INT 2
71528: ARRAY
71529: PUSH
71530: LD_VAR 0 3
71534: PLUS
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: PUSH
71540: EMPTY
71541: LIST
71542: ADD
71543: ST_TO_ADDR
71544: GO 71493
71546: POP
71547: POP
// result = temp_list2 ;
71548: LD_ADDR_VAR 0 7
71552: PUSH
71553: LD_VAR 0 10
71557: ST_TO_ADDR
// end ;
71558: LD_VAR 0 7
71562: RET
// export function EnemyInRange ( unit , dist ) ; begin
71563: LD_INT 0
71565: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71566: LD_ADDR_VAR 0 3
71570: PUSH
71571: LD_VAR 0 1
71575: PPUSH
71576: CALL_OW 255
71580: PPUSH
71581: LD_VAR 0 1
71585: PPUSH
71586: CALL_OW 250
71590: PPUSH
71591: LD_VAR 0 1
71595: PPUSH
71596: CALL_OW 251
71600: PPUSH
71601: LD_VAR 0 2
71605: PPUSH
71606: CALL 44820 0 4
71610: PUSH
71611: LD_INT 4
71613: ARRAY
71614: ST_TO_ADDR
// end ;
71615: LD_VAR 0 3
71619: RET
// export function PlayerSeeMe ( unit ) ; begin
71620: LD_INT 0
71622: PPUSH
// result := See ( your_side , unit ) ;
71623: LD_ADDR_VAR 0 2
71627: PUSH
71628: LD_OWVAR 2
71632: PPUSH
71633: LD_VAR 0 1
71637: PPUSH
71638: CALL_OW 292
71642: ST_TO_ADDR
// end ;
71643: LD_VAR 0 2
71647: RET
// export function ReverseDir ( unit ) ; begin
71648: LD_INT 0
71650: PPUSH
// if not unit then
71651: LD_VAR 0 1
71655: NOT
71656: IFFALSE 71660
// exit ;
71658: GO 71683
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71660: LD_ADDR_VAR 0 2
71664: PUSH
71665: LD_VAR 0 1
71669: PPUSH
71670: CALL_OW 254
71674: PUSH
71675: LD_INT 3
71677: PLUS
71678: PUSH
71679: LD_INT 6
71681: MOD
71682: ST_TO_ADDR
// end ;
71683: LD_VAR 0 2
71687: RET
// export function ReverseArray ( array ) ; var i ; begin
71688: LD_INT 0
71690: PPUSH
71691: PPUSH
// if not array then
71692: LD_VAR 0 1
71696: NOT
71697: IFFALSE 71701
// exit ;
71699: GO 71756
// result := [ ] ;
71701: LD_ADDR_VAR 0 2
71705: PUSH
71706: EMPTY
71707: ST_TO_ADDR
// for i := array downto 1 do
71708: LD_ADDR_VAR 0 3
71712: PUSH
71713: DOUBLE
71714: LD_VAR 0 1
71718: INC
71719: ST_TO_ADDR
71720: LD_INT 1
71722: PUSH
71723: FOR_DOWNTO
71724: IFFALSE 71754
// result := Join ( result , array [ i ] ) ;
71726: LD_ADDR_VAR 0 2
71730: PUSH
71731: LD_VAR 0 2
71735: PPUSH
71736: LD_VAR 0 1
71740: PUSH
71741: LD_VAR 0 3
71745: ARRAY
71746: PPUSH
71747: CALL 76608 0 2
71751: ST_TO_ADDR
71752: GO 71723
71754: POP
71755: POP
// end ;
71756: LD_VAR 0 2
71760: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71761: LD_INT 0
71763: PPUSH
71764: PPUSH
71765: PPUSH
71766: PPUSH
71767: PPUSH
71768: PPUSH
// if not unit or not hexes then
71769: LD_VAR 0 1
71773: NOT
71774: IFTRUE 71783
71776: PUSH
71777: LD_VAR 0 2
71781: NOT
71782: OR
71783: IFFALSE 71787
// exit ;
71785: GO 71910
// dist := 9999 ;
71787: LD_ADDR_VAR 0 5
71791: PUSH
71792: LD_INT 9999
71794: ST_TO_ADDR
// for i = 1 to hexes do
71795: LD_ADDR_VAR 0 4
71799: PUSH
71800: DOUBLE
71801: LD_INT 1
71803: DEC
71804: ST_TO_ADDR
71805: LD_VAR 0 2
71809: PUSH
71810: FOR_TO
71811: IFFALSE 71898
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71813: LD_ADDR_VAR 0 6
71817: PUSH
71818: LD_VAR 0 1
71822: PPUSH
71823: LD_VAR 0 2
71827: PUSH
71828: LD_VAR 0 4
71832: ARRAY
71833: PUSH
71834: LD_INT 1
71836: ARRAY
71837: PPUSH
71838: LD_VAR 0 2
71842: PUSH
71843: LD_VAR 0 4
71847: ARRAY
71848: PUSH
71849: LD_INT 2
71851: ARRAY
71852: PPUSH
71853: CALL_OW 297
71857: ST_TO_ADDR
// if tdist < dist then
71858: LD_VAR 0 6
71862: PUSH
71863: LD_VAR 0 5
71867: LESS
71868: IFFALSE 71896
// begin hex := hexes [ i ] ;
71870: LD_ADDR_VAR 0 8
71874: PUSH
71875: LD_VAR 0 2
71879: PUSH
71880: LD_VAR 0 4
71884: ARRAY
71885: ST_TO_ADDR
// dist := tdist ;
71886: LD_ADDR_VAR 0 5
71890: PUSH
71891: LD_VAR 0 6
71895: ST_TO_ADDR
// end ; end ;
71896: GO 71810
71898: POP
71899: POP
// result := hex ;
71900: LD_ADDR_VAR 0 3
71904: PUSH
71905: LD_VAR 0 8
71909: ST_TO_ADDR
// end ;
71910: LD_VAR 0 3
71914: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71915: LD_INT 0
71917: PPUSH
71918: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71919: LD_VAR 0 1
71923: NOT
71924: IFTRUE 71963
71926: PUSH
71927: LD_VAR 0 1
71931: PUSH
71932: LD_INT 21
71934: PUSH
71935: LD_INT 2
71937: PUSH
71938: EMPTY
71939: LIST
71940: LIST
71941: PUSH
71942: LD_INT 23
71944: PUSH
71945: LD_INT 2
71947: PUSH
71948: EMPTY
71949: LIST
71950: LIST
71951: PUSH
71952: EMPTY
71953: LIST
71954: LIST
71955: PPUSH
71956: CALL_OW 69
71960: IN
71961: NOT
71962: OR
71963: IFFALSE 71967
// exit ;
71965: GO 72014
// for i = 1 to 3 do
71967: LD_ADDR_VAR 0 3
71971: PUSH
71972: DOUBLE
71973: LD_INT 1
71975: DEC
71976: ST_TO_ADDR
71977: LD_INT 3
71979: PUSH
71980: FOR_TO
71981: IFFALSE 72012
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71983: LD_VAR 0 1
71987: PPUSH
71988: CALL_OW 250
71992: PPUSH
71993: LD_VAR 0 1
71997: PPUSH
71998: CALL_OW 251
72002: PPUSH
72003: LD_INT 1
72005: PPUSH
72006: CALL_OW 453
72010: GO 71980
72012: POP
72013: POP
// end ;
72014: LD_VAR 0 2
72018: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72019: LD_INT 0
72021: PPUSH
72022: PPUSH
72023: PPUSH
72024: PPUSH
72025: PPUSH
72026: PPUSH
// if not unit or not enemy_unit then
72027: LD_VAR 0 1
72031: NOT
72032: IFTRUE 72041
72034: PUSH
72035: LD_VAR 0 2
72039: NOT
72040: OR
72041: IFFALSE 72045
// exit ;
72043: GO 72526
// if GetLives ( i ) < 250 then
72045: LD_VAR 0 4
72049: PPUSH
72050: CALL_OW 256
72054: PUSH
72055: LD_INT 250
72057: LESS
72058: IFFALSE 72071
// begin ComAutodestruct ( i ) ;
72060: LD_VAR 0 4
72064: PPUSH
72065: CALL 71915 0 1
// exit ;
72069: GO 72526
// end ; x := GetX ( enemy_unit ) ;
72071: LD_ADDR_VAR 0 7
72075: PUSH
72076: LD_VAR 0 2
72080: PPUSH
72081: CALL_OW 250
72085: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72086: LD_ADDR_VAR 0 8
72090: PUSH
72091: LD_VAR 0 2
72095: PPUSH
72096: CALL_OW 251
72100: ST_TO_ADDR
// if not x or not y then
72101: LD_VAR 0 7
72105: NOT
72106: IFTRUE 72115
72108: PUSH
72109: LD_VAR 0 8
72113: NOT
72114: OR
72115: IFFALSE 72119
// exit ;
72117: GO 72526
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72119: LD_ADDR_VAR 0 6
72123: PUSH
72124: LD_VAR 0 7
72128: PPUSH
72129: LD_INT 0
72131: PPUSH
72132: LD_INT 4
72134: PPUSH
72135: CALL_OW 272
72139: PUSH
72140: LD_VAR 0 8
72144: PPUSH
72145: LD_INT 0
72147: PPUSH
72148: LD_INT 4
72150: PPUSH
72151: CALL_OW 273
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: PUSH
72160: LD_VAR 0 7
72164: PPUSH
72165: LD_INT 1
72167: PPUSH
72168: LD_INT 4
72170: PPUSH
72171: CALL_OW 272
72175: PUSH
72176: LD_VAR 0 8
72180: PPUSH
72181: LD_INT 1
72183: PPUSH
72184: LD_INT 4
72186: PPUSH
72187: CALL_OW 273
72191: PUSH
72192: EMPTY
72193: LIST
72194: LIST
72195: PUSH
72196: LD_VAR 0 7
72200: PPUSH
72201: LD_INT 2
72203: PPUSH
72204: LD_INT 4
72206: PPUSH
72207: CALL_OW 272
72211: PUSH
72212: LD_VAR 0 8
72216: PPUSH
72217: LD_INT 2
72219: PPUSH
72220: LD_INT 4
72222: PPUSH
72223: CALL_OW 273
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: PUSH
72232: LD_VAR 0 7
72236: PPUSH
72237: LD_INT 3
72239: PPUSH
72240: LD_INT 4
72242: PPUSH
72243: CALL_OW 272
72247: PUSH
72248: LD_VAR 0 8
72252: PPUSH
72253: LD_INT 3
72255: PPUSH
72256: LD_INT 4
72258: PPUSH
72259: CALL_OW 273
72263: PUSH
72264: EMPTY
72265: LIST
72266: LIST
72267: PUSH
72268: LD_VAR 0 7
72272: PPUSH
72273: LD_INT 4
72275: PPUSH
72276: LD_INT 4
72278: PPUSH
72279: CALL_OW 272
72283: PUSH
72284: LD_VAR 0 8
72288: PPUSH
72289: LD_INT 4
72291: PPUSH
72292: LD_INT 4
72294: PPUSH
72295: CALL_OW 273
72299: PUSH
72300: EMPTY
72301: LIST
72302: LIST
72303: PUSH
72304: LD_VAR 0 7
72308: PPUSH
72309: LD_INT 5
72311: PPUSH
72312: LD_INT 4
72314: PPUSH
72315: CALL_OW 272
72319: PUSH
72320: LD_VAR 0 8
72324: PPUSH
72325: LD_INT 5
72327: PPUSH
72328: LD_INT 4
72330: PPUSH
72331: CALL_OW 273
72335: PUSH
72336: EMPTY
72337: LIST
72338: LIST
72339: PUSH
72340: EMPTY
72341: LIST
72342: LIST
72343: LIST
72344: LIST
72345: LIST
72346: LIST
72347: ST_TO_ADDR
// for i = tmp downto 1 do
72348: LD_ADDR_VAR 0 4
72352: PUSH
72353: DOUBLE
72354: LD_VAR 0 6
72358: INC
72359: ST_TO_ADDR
72360: LD_INT 1
72362: PUSH
72363: FOR_DOWNTO
72364: IFFALSE 72467
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72366: LD_VAR 0 6
72370: PUSH
72371: LD_VAR 0 4
72375: ARRAY
72376: PUSH
72377: LD_INT 1
72379: ARRAY
72380: PPUSH
72381: LD_VAR 0 6
72385: PUSH
72386: LD_VAR 0 4
72390: ARRAY
72391: PUSH
72392: LD_INT 2
72394: ARRAY
72395: PPUSH
72396: CALL_OW 488
72400: NOT
72401: IFTRUE 72443
72403: PUSH
72404: LD_VAR 0 6
72408: PUSH
72409: LD_VAR 0 4
72413: ARRAY
72414: PUSH
72415: LD_INT 1
72417: ARRAY
72418: PPUSH
72419: LD_VAR 0 6
72423: PUSH
72424: LD_VAR 0 4
72428: ARRAY
72429: PUSH
72430: LD_INT 2
72432: ARRAY
72433: PPUSH
72434: CALL_OW 428
72438: PUSH
72439: LD_INT 0
72441: NONEQUAL
72442: OR
72443: IFFALSE 72465
// tmp := Delete ( tmp , i ) ;
72445: LD_ADDR_VAR 0 6
72449: PUSH
72450: LD_VAR 0 6
72454: PPUSH
72455: LD_VAR 0 4
72459: PPUSH
72460: CALL_OW 3
72464: ST_TO_ADDR
72465: GO 72363
72467: POP
72468: POP
// j := GetClosestHex ( unit , tmp ) ;
72469: LD_ADDR_VAR 0 5
72473: PUSH
72474: LD_VAR 0 1
72478: PPUSH
72479: LD_VAR 0 6
72483: PPUSH
72484: CALL 71761 0 2
72488: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72489: LD_VAR 0 1
72493: PPUSH
72494: LD_VAR 0 5
72498: PUSH
72499: LD_INT 1
72501: ARRAY
72502: PPUSH
72503: LD_VAR 0 5
72507: PUSH
72508: LD_INT 2
72510: ARRAY
72511: PPUSH
72512: CALL_OW 111
// result := j ;
72516: LD_ADDR_VAR 0 3
72520: PUSH
72521: LD_VAR 0 5
72525: ST_TO_ADDR
// end ;
72526: LD_VAR 0 3
72530: RET
// export function PrepareApemanSoldier ( ) ; begin
72531: LD_INT 0
72533: PPUSH
// uc_nation := 0 ;
72534: LD_ADDR_OWVAR 21
72538: PUSH
72539: LD_INT 0
72541: ST_TO_ADDR
// hc_sex := sex_male ;
72542: LD_ADDR_OWVAR 27
72546: PUSH
72547: LD_INT 1
72549: ST_TO_ADDR
// hc_name :=  ;
72550: LD_ADDR_OWVAR 26
72554: PUSH
72555: LD_STRING 
72557: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72558: LD_ADDR_OWVAR 28
72562: PUSH
72563: LD_INT 15
72565: ST_TO_ADDR
// hc_gallery :=  ;
72566: LD_ADDR_OWVAR 33
72570: PUSH
72571: LD_STRING 
72573: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72574: LD_ADDR_OWVAR 31
72578: PUSH
72579: LD_INT 0
72581: PPUSH
72582: LD_INT 3
72584: PPUSH
72585: CALL_OW 12
72589: PUSH
72590: LD_INT 0
72592: PPUSH
72593: LD_INT 3
72595: PPUSH
72596: CALL_OW 12
72600: PUSH
72601: LD_INT 0
72603: PUSH
72604: LD_INT 0
72606: PUSH
72607: EMPTY
72608: LIST
72609: LIST
72610: LIST
72611: LIST
72612: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
72613: LD_ADDR_OWVAR 29
72617: PUSH
72618: LD_INT 10
72620: PUSH
72621: LD_INT 12
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: ST_TO_ADDR
// end ;
72628: LD_VAR 0 1
72632: RET
// export function PrepareApemanEngineer ( ) ; begin
72633: LD_INT 0
72635: PPUSH
// uc_nation := 0 ;
72636: LD_ADDR_OWVAR 21
72640: PUSH
72641: LD_INT 0
72643: ST_TO_ADDR
// hc_sex := sex_male ;
72644: LD_ADDR_OWVAR 27
72648: PUSH
72649: LD_INT 1
72651: ST_TO_ADDR
// hc_name :=  ;
72652: LD_ADDR_OWVAR 26
72656: PUSH
72657: LD_STRING 
72659: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72660: LD_ADDR_OWVAR 28
72664: PUSH
72665: LD_INT 16
72667: ST_TO_ADDR
// hc_gallery :=  ;
72668: LD_ADDR_OWVAR 33
72672: PUSH
72673: LD_STRING 
72675: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72676: LD_ADDR_OWVAR 31
72680: PUSH
72681: LD_INT 0
72683: PPUSH
72684: LD_INT 3
72686: PPUSH
72687: CALL_OW 12
72691: PUSH
72692: LD_INT 0
72694: PPUSH
72695: LD_INT 3
72697: PPUSH
72698: CALL_OW 12
72702: PUSH
72703: LD_INT 0
72705: PUSH
72706: LD_INT 0
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: LIST
72713: LIST
72714: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
72715: LD_ADDR_OWVAR 29
72719: PUSH
72720: LD_INT 10
72722: PUSH
72723: LD_INT 12
72725: PUSH
72726: EMPTY
72727: LIST
72728: LIST
72729: ST_TO_ADDR
// end ;
72730: LD_VAR 0 1
72734: RET
// export function PrepareApeman ( agressivity ) ; begin
72735: LD_INT 0
72737: PPUSH
// uc_side := 0 ;
72738: LD_ADDR_OWVAR 20
72742: PUSH
72743: LD_INT 0
72745: ST_TO_ADDR
// uc_nation := 0 ;
72746: LD_ADDR_OWVAR 21
72750: PUSH
72751: LD_INT 0
72753: ST_TO_ADDR
// hc_sex := sex_male ;
72754: LD_ADDR_OWVAR 27
72758: PUSH
72759: LD_INT 1
72761: ST_TO_ADDR
// hc_class := class_apeman ;
72762: LD_ADDR_OWVAR 28
72766: PUSH
72767: LD_INT 12
72769: ST_TO_ADDR
// hc_gallery :=  ;
72770: LD_ADDR_OWVAR 33
72774: PUSH
72775: LD_STRING 
72777: ST_TO_ADDR
// hc_name :=  ;
72778: LD_ADDR_OWVAR 26
72782: PUSH
72783: LD_STRING 
72785: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
72786: LD_ADDR_OWVAR 29
72790: PUSH
72791: LD_INT 10
72793: PUSH
72794: LD_INT 12
72796: PUSH
72797: EMPTY
72798: LIST
72799: LIST
72800: ST_TO_ADDR
// if agressivity = 0 then
72801: LD_VAR 0 1
72805: PUSH
72806: LD_INT 0
72808: EQUAL
72809: IFFALSE 72821
// hc_agressivity := 0 else
72811: LD_ADDR_OWVAR 35
72815: PUSH
72816: LD_INT 0
72818: ST_TO_ADDR
72819: GO 72842
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72821: LD_ADDR_OWVAR 35
72825: PUSH
72826: LD_VAR 0 1
72830: NEG
72831: PPUSH
72832: LD_VAR 0 1
72836: PPUSH
72837: CALL_OW 12
72841: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72842: LD_ADDR_OWVAR 31
72846: PUSH
72847: LD_INT 0
72849: PPUSH
72850: LD_INT 3
72852: PPUSH
72853: CALL_OW 12
72857: PUSH
72858: LD_INT 0
72860: PPUSH
72861: LD_INT 3
72863: PPUSH
72864: CALL_OW 12
72868: PUSH
72869: LD_INT 0
72871: PUSH
72872: LD_INT 0
72874: PUSH
72875: EMPTY
72876: LIST
72877: LIST
72878: LIST
72879: LIST
72880: ST_TO_ADDR
// end ;
72881: LD_VAR 0 2
72885: RET
// export function PrepareTiger ( agressivity ) ; begin
72886: LD_INT 0
72888: PPUSH
// uc_side := 0 ;
72889: LD_ADDR_OWVAR 20
72893: PUSH
72894: LD_INT 0
72896: ST_TO_ADDR
// uc_nation := 0 ;
72897: LD_ADDR_OWVAR 21
72901: PUSH
72902: LD_INT 0
72904: ST_TO_ADDR
// InitHc ;
72905: CALL_OW 19
// hc_class := class_tiger ;
72909: LD_ADDR_OWVAR 28
72913: PUSH
72914: LD_INT 14
72916: ST_TO_ADDR
// hc_gallery :=  ;
72917: LD_ADDR_OWVAR 33
72921: PUSH
72922: LD_STRING 
72924: ST_TO_ADDR
// hc_name :=  ;
72925: LD_ADDR_OWVAR 26
72929: PUSH
72930: LD_STRING 
72932: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72933: LD_ADDR_OWVAR 35
72937: PUSH
72938: LD_VAR 0 1
72942: NEG
72943: PPUSH
72944: LD_VAR 0 1
72948: PPUSH
72949: CALL_OW 12
72953: ST_TO_ADDR
// end ;
72954: LD_VAR 0 2
72958: RET
// export function PrepareEnchidna ( ) ; begin
72959: LD_INT 0
72961: PPUSH
// uc_side := 0 ;
72962: LD_ADDR_OWVAR 20
72966: PUSH
72967: LD_INT 0
72969: ST_TO_ADDR
// uc_nation := 0 ;
72970: LD_ADDR_OWVAR 21
72974: PUSH
72975: LD_INT 0
72977: ST_TO_ADDR
// InitHc ;
72978: CALL_OW 19
// hc_class := class_baggie ;
72982: LD_ADDR_OWVAR 28
72986: PUSH
72987: LD_INT 13
72989: ST_TO_ADDR
// hc_gallery :=  ;
72990: LD_ADDR_OWVAR 33
72994: PUSH
72995: LD_STRING 
72997: ST_TO_ADDR
// hc_name :=  ;
72998: LD_ADDR_OWVAR 26
73002: PUSH
73003: LD_STRING 
73005: ST_TO_ADDR
// end ;
73006: LD_VAR 0 1
73010: RET
// export function PrepareFrog ( ) ; begin
73011: LD_INT 0
73013: PPUSH
// uc_side := 0 ;
73014: LD_ADDR_OWVAR 20
73018: PUSH
73019: LD_INT 0
73021: ST_TO_ADDR
// uc_nation := 0 ;
73022: LD_ADDR_OWVAR 21
73026: PUSH
73027: LD_INT 0
73029: ST_TO_ADDR
// InitHc ;
73030: CALL_OW 19
// hc_class := class_frog ;
73034: LD_ADDR_OWVAR 28
73038: PUSH
73039: LD_INT 19
73041: ST_TO_ADDR
// hc_gallery :=  ;
73042: LD_ADDR_OWVAR 33
73046: PUSH
73047: LD_STRING 
73049: ST_TO_ADDR
// hc_name :=  ;
73050: LD_ADDR_OWVAR 26
73054: PUSH
73055: LD_STRING 
73057: ST_TO_ADDR
// end ;
73058: LD_VAR 0 1
73062: RET
// export function PrepareFish ( ) ; begin
73063: LD_INT 0
73065: PPUSH
// uc_side := 0 ;
73066: LD_ADDR_OWVAR 20
73070: PUSH
73071: LD_INT 0
73073: ST_TO_ADDR
// uc_nation := 0 ;
73074: LD_ADDR_OWVAR 21
73078: PUSH
73079: LD_INT 0
73081: ST_TO_ADDR
// InitHc ;
73082: CALL_OW 19
// hc_class := class_fish ;
73086: LD_ADDR_OWVAR 28
73090: PUSH
73091: LD_INT 20
73093: ST_TO_ADDR
// hc_gallery :=  ;
73094: LD_ADDR_OWVAR 33
73098: PUSH
73099: LD_STRING 
73101: ST_TO_ADDR
// hc_name :=  ;
73102: LD_ADDR_OWVAR 26
73106: PUSH
73107: LD_STRING 
73109: ST_TO_ADDR
// end ;
73110: LD_VAR 0 1
73114: RET
// export function PrepareBird ( ) ; begin
73115: LD_INT 0
73117: PPUSH
// uc_side := 0 ;
73118: LD_ADDR_OWVAR 20
73122: PUSH
73123: LD_INT 0
73125: ST_TO_ADDR
// uc_nation := 0 ;
73126: LD_ADDR_OWVAR 21
73130: PUSH
73131: LD_INT 0
73133: ST_TO_ADDR
// InitHc ;
73134: CALL_OW 19
// hc_class := class_phororhacos ;
73138: LD_ADDR_OWVAR 28
73142: PUSH
73143: LD_INT 18
73145: ST_TO_ADDR
// hc_gallery :=  ;
73146: LD_ADDR_OWVAR 33
73150: PUSH
73151: LD_STRING 
73153: ST_TO_ADDR
// hc_name :=  ;
73154: LD_ADDR_OWVAR 26
73158: PUSH
73159: LD_STRING 
73161: ST_TO_ADDR
// end ;
73162: LD_VAR 0 1
73166: RET
// export function PrepareHorse ( ) ; begin
73167: LD_INT 0
73169: PPUSH
// uc_side := 0 ;
73170: LD_ADDR_OWVAR 20
73174: PUSH
73175: LD_INT 0
73177: ST_TO_ADDR
// uc_nation := 0 ;
73178: LD_ADDR_OWVAR 21
73182: PUSH
73183: LD_INT 0
73185: ST_TO_ADDR
// InitHc ;
73186: CALL_OW 19
// hc_class := class_horse ;
73190: LD_ADDR_OWVAR 28
73194: PUSH
73195: LD_INT 21
73197: ST_TO_ADDR
// hc_gallery :=  ;
73198: LD_ADDR_OWVAR 33
73202: PUSH
73203: LD_STRING 
73205: ST_TO_ADDR
// hc_name :=  ;
73206: LD_ADDR_OWVAR 26
73210: PUSH
73211: LD_STRING 
73213: ST_TO_ADDR
// end ;
73214: LD_VAR 0 1
73218: RET
// export function PrepareMastodont ( ) ; begin
73219: LD_INT 0
73221: PPUSH
// uc_side := 0 ;
73222: LD_ADDR_OWVAR 20
73226: PUSH
73227: LD_INT 0
73229: ST_TO_ADDR
// uc_nation := 0 ;
73230: LD_ADDR_OWVAR 21
73234: PUSH
73235: LD_INT 0
73237: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73238: LD_ADDR_OWVAR 37
73242: PUSH
73243: LD_INT 31
73245: ST_TO_ADDR
// vc_control := control_rider ;
73246: LD_ADDR_OWVAR 38
73250: PUSH
73251: LD_INT 4
73253: ST_TO_ADDR
// end ;
73254: LD_VAR 0 1
73258: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73259: LD_INT 0
73261: PPUSH
73262: PPUSH
73263: PPUSH
// uc_side = 0 ;
73264: LD_ADDR_OWVAR 20
73268: PUSH
73269: LD_INT 0
73271: ST_TO_ADDR
// uc_nation = 0 ;
73272: LD_ADDR_OWVAR 21
73276: PUSH
73277: LD_INT 0
73279: ST_TO_ADDR
// InitHc_All ( ) ;
73280: CALL_OW 584
// InitVc ;
73284: CALL_OW 20
// if mastodonts then
73288: LD_VAR 0 6
73292: IFFALSE 73359
// for i = 1 to mastodonts do
73294: LD_ADDR_VAR 0 11
73298: PUSH
73299: DOUBLE
73300: LD_INT 1
73302: DEC
73303: ST_TO_ADDR
73304: LD_VAR 0 6
73308: PUSH
73309: FOR_TO
73310: IFFALSE 73357
// begin vc_chassis := 31 ;
73312: LD_ADDR_OWVAR 37
73316: PUSH
73317: LD_INT 31
73319: ST_TO_ADDR
// vc_control := control_rider ;
73320: LD_ADDR_OWVAR 38
73324: PUSH
73325: LD_INT 4
73327: ST_TO_ADDR
// animal := CreateVehicle ;
73328: LD_ADDR_VAR 0 12
73332: PUSH
73333: CALL_OW 45
73337: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73338: LD_VAR 0 12
73342: PPUSH
73343: LD_VAR 0 8
73347: PPUSH
73348: LD_INT 0
73350: PPUSH
73351: CALL 75501 0 3
// end ;
73355: GO 73309
73357: POP
73358: POP
// if horses then
73359: LD_VAR 0 5
73363: IFFALSE 73430
// for i = 1 to horses do
73365: LD_ADDR_VAR 0 11
73369: PUSH
73370: DOUBLE
73371: LD_INT 1
73373: DEC
73374: ST_TO_ADDR
73375: LD_VAR 0 5
73379: PUSH
73380: FOR_TO
73381: IFFALSE 73428
// begin hc_class := 21 ;
73383: LD_ADDR_OWVAR 28
73387: PUSH
73388: LD_INT 21
73390: ST_TO_ADDR
// hc_gallery :=  ;
73391: LD_ADDR_OWVAR 33
73395: PUSH
73396: LD_STRING 
73398: ST_TO_ADDR
// animal := CreateHuman ;
73399: LD_ADDR_VAR 0 12
73403: PUSH
73404: CALL_OW 44
73408: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73409: LD_VAR 0 12
73413: PPUSH
73414: LD_VAR 0 8
73418: PPUSH
73419: LD_INT 0
73421: PPUSH
73422: CALL 75501 0 3
// end ;
73426: GO 73380
73428: POP
73429: POP
// if birds then
73430: LD_VAR 0 1
73434: IFFALSE 73501
// for i = 1 to birds do
73436: LD_ADDR_VAR 0 11
73440: PUSH
73441: DOUBLE
73442: LD_INT 1
73444: DEC
73445: ST_TO_ADDR
73446: LD_VAR 0 1
73450: PUSH
73451: FOR_TO
73452: IFFALSE 73499
// begin hc_class := 18 ;
73454: LD_ADDR_OWVAR 28
73458: PUSH
73459: LD_INT 18
73461: ST_TO_ADDR
// hc_gallery =  ;
73462: LD_ADDR_OWVAR 33
73466: PUSH
73467: LD_STRING 
73469: ST_TO_ADDR
// animal := CreateHuman ;
73470: LD_ADDR_VAR 0 12
73474: PUSH
73475: CALL_OW 44
73479: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73480: LD_VAR 0 12
73484: PPUSH
73485: LD_VAR 0 8
73489: PPUSH
73490: LD_INT 0
73492: PPUSH
73493: CALL 75501 0 3
// end ;
73497: GO 73451
73499: POP
73500: POP
// if tigers then
73501: LD_VAR 0 2
73505: IFFALSE 73589
// for i = 1 to tigers do
73507: LD_ADDR_VAR 0 11
73511: PUSH
73512: DOUBLE
73513: LD_INT 1
73515: DEC
73516: ST_TO_ADDR
73517: LD_VAR 0 2
73521: PUSH
73522: FOR_TO
73523: IFFALSE 73587
// begin hc_class = class_tiger ;
73525: LD_ADDR_OWVAR 28
73529: PUSH
73530: LD_INT 14
73532: ST_TO_ADDR
// hc_gallery =  ;
73533: LD_ADDR_OWVAR 33
73537: PUSH
73538: LD_STRING 
73540: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73541: LD_ADDR_OWVAR 35
73545: PUSH
73546: LD_INT 7
73548: NEG
73549: PPUSH
73550: LD_INT 7
73552: PPUSH
73553: CALL_OW 12
73557: ST_TO_ADDR
// animal := CreateHuman ;
73558: LD_ADDR_VAR 0 12
73562: PUSH
73563: CALL_OW 44
73567: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73568: LD_VAR 0 12
73572: PPUSH
73573: LD_VAR 0 8
73577: PPUSH
73578: LD_INT 0
73580: PPUSH
73581: CALL 75501 0 3
// end ;
73585: GO 73522
73587: POP
73588: POP
// if apemans then
73589: LD_VAR 0 3
73593: IFFALSE 73716
// for i = 1 to apemans do
73595: LD_ADDR_VAR 0 11
73599: PUSH
73600: DOUBLE
73601: LD_INT 1
73603: DEC
73604: ST_TO_ADDR
73605: LD_VAR 0 3
73609: PUSH
73610: FOR_TO
73611: IFFALSE 73714
// begin hc_class = class_apeman ;
73613: LD_ADDR_OWVAR 28
73617: PUSH
73618: LD_INT 12
73620: ST_TO_ADDR
// hc_gallery =  ;
73621: LD_ADDR_OWVAR 33
73625: PUSH
73626: LD_STRING 
73628: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73629: LD_ADDR_OWVAR 35
73633: PUSH
73634: LD_INT 2
73636: NEG
73637: PPUSH
73638: LD_INT 2
73640: PPUSH
73641: CALL_OW 12
73645: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73646: LD_ADDR_OWVAR 31
73650: PUSH
73651: LD_INT 1
73653: PPUSH
73654: LD_INT 3
73656: PPUSH
73657: CALL_OW 12
73661: PUSH
73662: LD_INT 1
73664: PPUSH
73665: LD_INT 3
73667: PPUSH
73668: CALL_OW 12
73672: PUSH
73673: LD_INT 0
73675: PUSH
73676: LD_INT 0
73678: PUSH
73679: EMPTY
73680: LIST
73681: LIST
73682: LIST
73683: LIST
73684: ST_TO_ADDR
// animal := CreateHuman ;
73685: LD_ADDR_VAR 0 12
73689: PUSH
73690: CALL_OW 44
73694: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73695: LD_VAR 0 12
73699: PPUSH
73700: LD_VAR 0 8
73704: PPUSH
73705: LD_INT 0
73707: PPUSH
73708: CALL 75501 0 3
// end ;
73712: GO 73610
73714: POP
73715: POP
// if enchidnas then
73716: LD_VAR 0 4
73720: IFFALSE 73787
// for i = 1 to enchidnas do
73722: LD_ADDR_VAR 0 11
73726: PUSH
73727: DOUBLE
73728: LD_INT 1
73730: DEC
73731: ST_TO_ADDR
73732: LD_VAR 0 4
73736: PUSH
73737: FOR_TO
73738: IFFALSE 73785
// begin hc_class = 13 ;
73740: LD_ADDR_OWVAR 28
73744: PUSH
73745: LD_INT 13
73747: ST_TO_ADDR
// hc_gallery =  ;
73748: LD_ADDR_OWVAR 33
73752: PUSH
73753: LD_STRING 
73755: ST_TO_ADDR
// animal := CreateHuman ;
73756: LD_ADDR_VAR 0 12
73760: PUSH
73761: CALL_OW 44
73765: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73766: LD_VAR 0 12
73770: PPUSH
73771: LD_VAR 0 8
73775: PPUSH
73776: LD_INT 0
73778: PPUSH
73779: CALL 75501 0 3
// end ;
73783: GO 73737
73785: POP
73786: POP
// if fishes then
73787: LD_VAR 0 7
73791: IFFALSE 73858
// for i = 1 to fishes do
73793: LD_ADDR_VAR 0 11
73797: PUSH
73798: DOUBLE
73799: LD_INT 1
73801: DEC
73802: ST_TO_ADDR
73803: LD_VAR 0 7
73807: PUSH
73808: FOR_TO
73809: IFFALSE 73856
// begin hc_class = 20 ;
73811: LD_ADDR_OWVAR 28
73815: PUSH
73816: LD_INT 20
73818: ST_TO_ADDR
// hc_gallery =  ;
73819: LD_ADDR_OWVAR 33
73823: PUSH
73824: LD_STRING 
73826: ST_TO_ADDR
// animal := CreateHuman ;
73827: LD_ADDR_VAR 0 12
73831: PUSH
73832: CALL_OW 44
73836: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73837: LD_VAR 0 12
73841: PPUSH
73842: LD_VAR 0 9
73846: PPUSH
73847: LD_INT 0
73849: PPUSH
73850: CALL 75501 0 3
// end ;
73854: GO 73808
73856: POP
73857: POP
// end ;
73858: LD_VAR 0 10
73862: RET
// export function WantHeal ( sci , unit ) ; begin
73863: LD_INT 0
73865: PPUSH
// if GetTaskList ( sci ) > 0 then
73866: LD_VAR 0 1
73870: PPUSH
73871: CALL_OW 437
73875: PUSH
73876: LD_INT 0
73878: GREATER
73879: IFFALSE 73951
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73881: LD_VAR 0 1
73885: PPUSH
73886: CALL_OW 437
73890: PUSH
73891: LD_INT 1
73893: ARRAY
73894: PUSH
73895: LD_INT 1
73897: ARRAY
73898: PUSH
73899: LD_STRING l
73901: EQUAL
73902: IFFALSE 73929
73904: PUSH
73905: LD_VAR 0 1
73909: PPUSH
73910: CALL_OW 437
73914: PUSH
73915: LD_INT 1
73917: ARRAY
73918: PUSH
73919: LD_INT 4
73921: ARRAY
73922: PUSH
73923: LD_VAR 0 2
73927: EQUAL
73928: AND
73929: IFFALSE 73941
// result := true else
73931: LD_ADDR_VAR 0 3
73935: PUSH
73936: LD_INT 1
73938: ST_TO_ADDR
73939: GO 73949
// result := false ;
73941: LD_ADDR_VAR 0 3
73945: PUSH
73946: LD_INT 0
73948: ST_TO_ADDR
// end else
73949: GO 73959
// result := false ;
73951: LD_ADDR_VAR 0 3
73955: PUSH
73956: LD_INT 0
73958: ST_TO_ADDR
// end ;
73959: LD_VAR 0 3
73963: RET
// export function HealTarget ( sci ) ; begin
73964: LD_INT 0
73966: PPUSH
// if not sci then
73967: LD_VAR 0 1
73971: NOT
73972: IFFALSE 73976
// exit ;
73974: GO 74041
// result := 0 ;
73976: LD_ADDR_VAR 0 2
73980: PUSH
73981: LD_INT 0
73983: ST_TO_ADDR
// if GetTaskList ( sci ) then
73984: LD_VAR 0 1
73988: PPUSH
73989: CALL_OW 437
73993: IFFALSE 74041
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73995: LD_VAR 0 1
73999: PPUSH
74000: CALL_OW 437
74004: PUSH
74005: LD_INT 1
74007: ARRAY
74008: PUSH
74009: LD_INT 1
74011: ARRAY
74012: PUSH
74013: LD_STRING l
74015: EQUAL
74016: IFFALSE 74041
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74018: LD_ADDR_VAR 0 2
74022: PUSH
74023: LD_VAR 0 1
74027: PPUSH
74028: CALL_OW 437
74032: PUSH
74033: LD_INT 1
74035: ARRAY
74036: PUSH
74037: LD_INT 4
74039: ARRAY
74040: ST_TO_ADDR
// end ;
74041: LD_VAR 0 2
74045: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74046: LD_INT 0
74048: PPUSH
74049: PPUSH
74050: PPUSH
74051: PPUSH
// if not base_units then
74052: LD_VAR 0 1
74056: NOT
74057: IFFALSE 74061
// exit ;
74059: GO 74148
// result := false ;
74061: LD_ADDR_VAR 0 2
74065: PUSH
74066: LD_INT 0
74068: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74069: LD_ADDR_VAR 0 5
74073: PUSH
74074: LD_VAR 0 1
74078: PPUSH
74079: LD_INT 21
74081: PUSH
74082: LD_INT 3
74084: PUSH
74085: EMPTY
74086: LIST
74087: LIST
74088: PPUSH
74089: CALL_OW 72
74093: ST_TO_ADDR
// if not tmp then
74094: LD_VAR 0 5
74098: NOT
74099: IFFALSE 74103
// exit ;
74101: GO 74148
// for i in tmp do
74103: LD_ADDR_VAR 0 3
74107: PUSH
74108: LD_VAR 0 5
74112: PUSH
74113: FOR_IN
74114: IFFALSE 74146
// begin result := EnemyInRange ( i , 22 ) ;
74116: LD_ADDR_VAR 0 2
74120: PUSH
74121: LD_VAR 0 3
74125: PPUSH
74126: LD_INT 22
74128: PPUSH
74129: CALL 71563 0 2
74133: ST_TO_ADDR
// if result then
74134: LD_VAR 0 2
74138: IFFALSE 74144
// exit ;
74140: POP
74141: POP
74142: GO 74148
// end ;
74144: GO 74113
74146: POP
74147: POP
// end ;
74148: LD_VAR 0 2
74152: RET
// export function FilterByTag ( units , tag ) ; begin
74153: LD_INT 0
74155: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74156: LD_ADDR_VAR 0 3
74160: PUSH
74161: LD_VAR 0 1
74165: PPUSH
74166: LD_INT 120
74168: PUSH
74169: LD_VAR 0 2
74173: PUSH
74174: EMPTY
74175: LIST
74176: LIST
74177: PPUSH
74178: CALL_OW 72
74182: ST_TO_ADDR
// end ;
74183: LD_VAR 0 3
74187: RET
// export function IsDriver ( un ) ; begin
74188: LD_INT 0
74190: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74191: LD_ADDR_VAR 0 2
74195: PUSH
74196: LD_VAR 0 1
74200: PUSH
74201: LD_INT 55
74203: PUSH
74204: EMPTY
74205: LIST
74206: PPUSH
74207: CALL_OW 69
74211: IN
74212: ST_TO_ADDR
// end ;
74213: LD_VAR 0 2
74217: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74218: LD_INT 0
74220: PPUSH
74221: PPUSH
// list := [ ] ;
74222: LD_ADDR_VAR 0 5
74226: PUSH
74227: EMPTY
74228: ST_TO_ADDR
// case d of 0 :
74229: LD_VAR 0 3
74233: PUSH
74234: LD_INT 0
74236: DOUBLE
74237: EQUAL
74238: IFTRUE 74242
74240: GO 74375
74242: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74243: LD_ADDR_VAR 0 5
74247: PUSH
74248: LD_VAR 0 1
74252: PUSH
74253: LD_INT 4
74255: MINUS
74256: PUSH
74257: LD_VAR 0 2
74261: PUSH
74262: LD_INT 4
74264: MINUS
74265: PUSH
74266: LD_INT 2
74268: PUSH
74269: EMPTY
74270: LIST
74271: LIST
74272: LIST
74273: PUSH
74274: LD_VAR 0 1
74278: PUSH
74279: LD_INT 3
74281: MINUS
74282: PUSH
74283: LD_VAR 0 2
74287: PUSH
74288: LD_INT 1
74290: PUSH
74291: EMPTY
74292: LIST
74293: LIST
74294: LIST
74295: PUSH
74296: LD_VAR 0 1
74300: PUSH
74301: LD_INT 4
74303: PLUS
74304: PUSH
74305: LD_VAR 0 2
74309: PUSH
74310: LD_INT 4
74312: PUSH
74313: EMPTY
74314: LIST
74315: LIST
74316: LIST
74317: PUSH
74318: LD_VAR 0 1
74322: PUSH
74323: LD_INT 3
74325: PLUS
74326: PUSH
74327: LD_VAR 0 2
74331: PUSH
74332: LD_INT 3
74334: PLUS
74335: PUSH
74336: LD_INT 5
74338: PUSH
74339: EMPTY
74340: LIST
74341: LIST
74342: LIST
74343: PUSH
74344: LD_VAR 0 1
74348: PUSH
74349: LD_VAR 0 2
74353: PUSH
74354: LD_INT 4
74356: PLUS
74357: PUSH
74358: LD_INT 0
74360: PUSH
74361: EMPTY
74362: LIST
74363: LIST
74364: LIST
74365: PUSH
74366: EMPTY
74367: LIST
74368: LIST
74369: LIST
74370: LIST
74371: LIST
74372: ST_TO_ADDR
// end ; 1 :
74373: GO 75073
74375: LD_INT 1
74377: DOUBLE
74378: EQUAL
74379: IFTRUE 74383
74381: GO 74516
74383: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74384: LD_ADDR_VAR 0 5
74388: PUSH
74389: LD_VAR 0 1
74393: PUSH
74394: LD_VAR 0 2
74398: PUSH
74399: LD_INT 4
74401: MINUS
74402: PUSH
74403: LD_INT 3
74405: PUSH
74406: EMPTY
74407: LIST
74408: LIST
74409: LIST
74410: PUSH
74411: LD_VAR 0 1
74415: PUSH
74416: LD_INT 3
74418: MINUS
74419: PUSH
74420: LD_VAR 0 2
74424: PUSH
74425: LD_INT 3
74427: MINUS
74428: PUSH
74429: LD_INT 2
74431: PUSH
74432: EMPTY
74433: LIST
74434: LIST
74435: LIST
74436: PUSH
74437: LD_VAR 0 1
74441: PUSH
74442: LD_INT 4
74444: MINUS
74445: PUSH
74446: LD_VAR 0 2
74450: PUSH
74451: LD_INT 1
74453: PUSH
74454: EMPTY
74455: LIST
74456: LIST
74457: LIST
74458: PUSH
74459: LD_VAR 0 1
74463: PUSH
74464: LD_VAR 0 2
74468: PUSH
74469: LD_INT 3
74471: PLUS
74472: PUSH
74473: LD_INT 0
74475: PUSH
74476: EMPTY
74477: LIST
74478: LIST
74479: LIST
74480: PUSH
74481: LD_VAR 0 1
74485: PUSH
74486: LD_INT 4
74488: PLUS
74489: PUSH
74490: LD_VAR 0 2
74494: PUSH
74495: LD_INT 4
74497: PLUS
74498: PUSH
74499: LD_INT 5
74501: PUSH
74502: EMPTY
74503: LIST
74504: LIST
74505: LIST
74506: PUSH
74507: EMPTY
74508: LIST
74509: LIST
74510: LIST
74511: LIST
74512: LIST
74513: ST_TO_ADDR
// end ; 2 :
74514: GO 75073
74516: LD_INT 2
74518: DOUBLE
74519: EQUAL
74520: IFTRUE 74524
74522: GO 74653
74524: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74525: LD_ADDR_VAR 0 5
74529: PUSH
74530: LD_VAR 0 1
74534: PUSH
74535: LD_VAR 0 2
74539: PUSH
74540: LD_INT 3
74542: MINUS
74543: PUSH
74544: LD_INT 3
74546: PUSH
74547: EMPTY
74548: LIST
74549: LIST
74550: LIST
74551: PUSH
74552: LD_VAR 0 1
74556: PUSH
74557: LD_INT 4
74559: PLUS
74560: PUSH
74561: LD_VAR 0 2
74565: PUSH
74566: LD_INT 4
74568: PUSH
74569: EMPTY
74570: LIST
74571: LIST
74572: LIST
74573: PUSH
74574: LD_VAR 0 1
74578: PUSH
74579: LD_VAR 0 2
74583: PUSH
74584: LD_INT 4
74586: PLUS
74587: PUSH
74588: LD_INT 0
74590: PUSH
74591: EMPTY
74592: LIST
74593: LIST
74594: LIST
74595: PUSH
74596: LD_VAR 0 1
74600: PUSH
74601: LD_INT 3
74603: MINUS
74604: PUSH
74605: LD_VAR 0 2
74609: PUSH
74610: LD_INT 1
74612: PUSH
74613: EMPTY
74614: LIST
74615: LIST
74616: LIST
74617: PUSH
74618: LD_VAR 0 1
74622: PUSH
74623: LD_INT 4
74625: MINUS
74626: PUSH
74627: LD_VAR 0 2
74631: PUSH
74632: LD_INT 4
74634: MINUS
74635: PUSH
74636: LD_INT 2
74638: PUSH
74639: EMPTY
74640: LIST
74641: LIST
74642: LIST
74643: PUSH
74644: EMPTY
74645: LIST
74646: LIST
74647: LIST
74648: LIST
74649: LIST
74650: ST_TO_ADDR
// end ; 3 :
74651: GO 75073
74653: LD_INT 3
74655: DOUBLE
74656: EQUAL
74657: IFTRUE 74661
74659: GO 74794
74661: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74662: LD_ADDR_VAR 0 5
74666: PUSH
74667: LD_VAR 0 1
74671: PUSH
74672: LD_INT 3
74674: PLUS
74675: PUSH
74676: LD_VAR 0 2
74680: PUSH
74681: LD_INT 4
74683: PUSH
74684: EMPTY
74685: LIST
74686: LIST
74687: LIST
74688: PUSH
74689: LD_VAR 0 1
74693: PUSH
74694: LD_INT 4
74696: PLUS
74697: PUSH
74698: LD_VAR 0 2
74702: PUSH
74703: LD_INT 4
74705: PLUS
74706: PUSH
74707: LD_INT 5
74709: PUSH
74710: EMPTY
74711: LIST
74712: LIST
74713: LIST
74714: PUSH
74715: LD_VAR 0 1
74719: PUSH
74720: LD_INT 4
74722: MINUS
74723: PUSH
74724: LD_VAR 0 2
74728: PUSH
74729: LD_INT 1
74731: PUSH
74732: EMPTY
74733: LIST
74734: LIST
74735: LIST
74736: PUSH
74737: LD_VAR 0 1
74741: PUSH
74742: LD_VAR 0 2
74746: PUSH
74747: LD_INT 4
74749: MINUS
74750: PUSH
74751: LD_INT 3
74753: PUSH
74754: EMPTY
74755: LIST
74756: LIST
74757: LIST
74758: PUSH
74759: LD_VAR 0 1
74763: PUSH
74764: LD_INT 3
74766: MINUS
74767: PUSH
74768: LD_VAR 0 2
74772: PUSH
74773: LD_INT 3
74775: MINUS
74776: PUSH
74777: LD_INT 2
74779: PUSH
74780: EMPTY
74781: LIST
74782: LIST
74783: LIST
74784: PUSH
74785: EMPTY
74786: LIST
74787: LIST
74788: LIST
74789: LIST
74790: LIST
74791: ST_TO_ADDR
// end ; 4 :
74792: GO 75073
74794: LD_INT 4
74796: DOUBLE
74797: EQUAL
74798: IFTRUE 74802
74800: GO 74935
74802: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74803: LD_ADDR_VAR 0 5
74807: PUSH
74808: LD_VAR 0 1
74812: PUSH
74813: LD_VAR 0 2
74817: PUSH
74818: LD_INT 4
74820: PLUS
74821: PUSH
74822: LD_INT 0
74824: PUSH
74825: EMPTY
74826: LIST
74827: LIST
74828: LIST
74829: PUSH
74830: LD_VAR 0 1
74834: PUSH
74835: LD_INT 3
74837: PLUS
74838: PUSH
74839: LD_VAR 0 2
74843: PUSH
74844: LD_INT 3
74846: PLUS
74847: PUSH
74848: LD_INT 5
74850: PUSH
74851: EMPTY
74852: LIST
74853: LIST
74854: LIST
74855: PUSH
74856: LD_VAR 0 1
74860: PUSH
74861: LD_INT 4
74863: PLUS
74864: PUSH
74865: LD_VAR 0 2
74869: PUSH
74870: LD_INT 4
74872: PUSH
74873: EMPTY
74874: LIST
74875: LIST
74876: LIST
74877: PUSH
74878: LD_VAR 0 1
74882: PUSH
74883: LD_VAR 0 2
74887: PUSH
74888: LD_INT 3
74890: MINUS
74891: PUSH
74892: LD_INT 3
74894: PUSH
74895: EMPTY
74896: LIST
74897: LIST
74898: LIST
74899: PUSH
74900: LD_VAR 0 1
74904: PUSH
74905: LD_INT 4
74907: MINUS
74908: PUSH
74909: LD_VAR 0 2
74913: PUSH
74914: LD_INT 4
74916: MINUS
74917: PUSH
74918: LD_INT 2
74920: PUSH
74921: EMPTY
74922: LIST
74923: LIST
74924: LIST
74925: PUSH
74926: EMPTY
74927: LIST
74928: LIST
74929: LIST
74930: LIST
74931: LIST
74932: ST_TO_ADDR
// end ; 5 :
74933: GO 75073
74935: LD_INT 5
74937: DOUBLE
74938: EQUAL
74939: IFTRUE 74943
74941: GO 75072
74943: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74944: LD_ADDR_VAR 0 5
74948: PUSH
74949: LD_VAR 0 1
74953: PUSH
74954: LD_INT 4
74956: MINUS
74957: PUSH
74958: LD_VAR 0 2
74962: PUSH
74963: LD_INT 1
74965: PUSH
74966: EMPTY
74967: LIST
74968: LIST
74969: LIST
74970: PUSH
74971: LD_VAR 0 1
74975: PUSH
74976: LD_VAR 0 2
74980: PUSH
74981: LD_INT 4
74983: MINUS
74984: PUSH
74985: LD_INT 3
74987: PUSH
74988: EMPTY
74989: LIST
74990: LIST
74991: LIST
74992: PUSH
74993: LD_VAR 0 1
74997: PUSH
74998: LD_INT 4
75000: PLUS
75001: PUSH
75002: LD_VAR 0 2
75006: PUSH
75007: LD_INT 4
75009: PLUS
75010: PUSH
75011: LD_INT 5
75013: PUSH
75014: EMPTY
75015: LIST
75016: LIST
75017: LIST
75018: PUSH
75019: LD_VAR 0 1
75023: PUSH
75024: LD_INT 3
75026: PLUS
75027: PUSH
75028: LD_VAR 0 2
75032: PUSH
75033: LD_INT 4
75035: PUSH
75036: EMPTY
75037: LIST
75038: LIST
75039: LIST
75040: PUSH
75041: LD_VAR 0 1
75045: PUSH
75046: LD_VAR 0 2
75050: PUSH
75051: LD_INT 3
75053: PLUS
75054: PUSH
75055: LD_INT 0
75057: PUSH
75058: EMPTY
75059: LIST
75060: LIST
75061: LIST
75062: PUSH
75063: EMPTY
75064: LIST
75065: LIST
75066: LIST
75067: LIST
75068: LIST
75069: ST_TO_ADDR
// end ; end ;
75070: GO 75073
75072: POP
// result := list ;
75073: LD_ADDR_VAR 0 4
75077: PUSH
75078: LD_VAR 0 5
75082: ST_TO_ADDR
// end ;
75083: LD_VAR 0 4
75087: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75088: LD_INT 0
75090: PPUSH
75091: PPUSH
75092: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75093: LD_VAR 0 1
75097: NOT
75098: IFTRUE 75126
75100: PUSH
75101: LD_VAR 0 2
75105: PUSH
75106: LD_INT 1
75108: PUSH
75109: LD_INT 2
75111: PUSH
75112: LD_INT 3
75114: PUSH
75115: LD_INT 4
75117: PUSH
75118: EMPTY
75119: LIST
75120: LIST
75121: LIST
75122: LIST
75123: IN
75124: NOT
75125: OR
75126: IFFALSE 75130
// exit ;
75128: GO 75213
// tmp := [ ] ;
75130: LD_ADDR_VAR 0 5
75134: PUSH
75135: EMPTY
75136: ST_TO_ADDR
// for i in units do
75137: LD_ADDR_VAR 0 4
75141: PUSH
75142: LD_VAR 0 1
75146: PUSH
75147: FOR_IN
75148: IFFALSE 75182
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75150: LD_ADDR_VAR 0 5
75154: PUSH
75155: LD_VAR 0 5
75159: PPUSH
75160: LD_VAR 0 4
75164: PPUSH
75165: LD_VAR 0 2
75169: PPUSH
75170: CALL_OW 259
75174: PPUSH
75175: CALL 76608 0 2
75179: ST_TO_ADDR
75180: GO 75147
75182: POP
75183: POP
// if not tmp then
75184: LD_VAR 0 5
75188: NOT
75189: IFFALSE 75193
// exit ;
75191: GO 75213
// result := SortListByListDesc ( units , tmp ) ;
75193: LD_ADDR_VAR 0 3
75197: PUSH
75198: LD_VAR 0 1
75202: PPUSH
75203: LD_VAR 0 5
75207: PPUSH
75208: CALL_OW 77
75212: ST_TO_ADDR
// end ;
75213: LD_VAR 0 3
75217: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75218: LD_INT 0
75220: PPUSH
75221: PPUSH
75222: PPUSH
// result := false ;
75223: LD_ADDR_VAR 0 3
75227: PUSH
75228: LD_INT 0
75230: ST_TO_ADDR
// if not building then
75231: LD_VAR 0 2
75235: NOT
75236: IFFALSE 75240
// exit ;
75238: GO 75384
// x := GetX ( building ) ;
75240: LD_ADDR_VAR 0 4
75244: PUSH
75245: LD_VAR 0 2
75249: PPUSH
75250: CALL_OW 250
75254: ST_TO_ADDR
// y := GetY ( building ) ;
75255: LD_ADDR_VAR 0 5
75259: PUSH
75260: LD_VAR 0 2
75264: PPUSH
75265: CALL_OW 251
75269: ST_TO_ADDR
// if not x or not y then
75270: LD_VAR 0 4
75274: NOT
75275: IFTRUE 75284
75277: PUSH
75278: LD_VAR 0 5
75282: NOT
75283: OR
75284: IFFALSE 75288
// exit ;
75286: GO 75384
// if GetTaskList ( unit ) then
75288: LD_VAR 0 1
75292: PPUSH
75293: CALL_OW 437
75297: IFFALSE 75384
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75299: LD_STRING e
75301: PUSH
75302: LD_VAR 0 1
75306: PPUSH
75307: CALL_OW 437
75311: PUSH
75312: LD_INT 1
75314: ARRAY
75315: PUSH
75316: LD_INT 1
75318: ARRAY
75319: EQUAL
75320: IFFALSE 75347
75322: PUSH
75323: LD_VAR 0 4
75327: PUSH
75328: LD_VAR 0 1
75332: PPUSH
75333: CALL_OW 437
75337: PUSH
75338: LD_INT 1
75340: ARRAY
75341: PUSH
75342: LD_INT 2
75344: ARRAY
75345: EQUAL
75346: AND
75347: IFFALSE 75374
75349: PUSH
75350: LD_VAR 0 5
75354: PUSH
75355: LD_VAR 0 1
75359: PPUSH
75360: CALL_OW 437
75364: PUSH
75365: LD_INT 1
75367: ARRAY
75368: PUSH
75369: LD_INT 3
75371: ARRAY
75372: EQUAL
75373: AND
75374: IFFALSE 75384
// result := true end ;
75376: LD_ADDR_VAR 0 3
75380: PUSH
75381: LD_INT 1
75383: ST_TO_ADDR
// end ;
75384: LD_VAR 0 3
75388: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75389: LD_INT 0
75391: PPUSH
// result := false ;
75392: LD_ADDR_VAR 0 4
75396: PUSH
75397: LD_INT 0
75399: ST_TO_ADDR
// if GetTaskList ( unit ) then
75400: LD_VAR 0 1
75404: PPUSH
75405: CALL_OW 437
75409: IFFALSE 75496
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75411: LD_STRING M
75413: PUSH
75414: LD_VAR 0 1
75418: PPUSH
75419: CALL_OW 437
75423: PUSH
75424: LD_INT 1
75426: ARRAY
75427: PUSH
75428: LD_INT 1
75430: ARRAY
75431: EQUAL
75432: IFFALSE 75459
75434: PUSH
75435: LD_VAR 0 2
75439: PUSH
75440: LD_VAR 0 1
75444: PPUSH
75445: CALL_OW 437
75449: PUSH
75450: LD_INT 1
75452: ARRAY
75453: PUSH
75454: LD_INT 2
75456: ARRAY
75457: EQUAL
75458: AND
75459: IFFALSE 75486
75461: PUSH
75462: LD_VAR 0 3
75466: PUSH
75467: LD_VAR 0 1
75471: PPUSH
75472: CALL_OW 437
75476: PUSH
75477: LD_INT 1
75479: ARRAY
75480: PUSH
75481: LD_INT 3
75483: ARRAY
75484: EQUAL
75485: AND
75486: IFFALSE 75496
// result := true ;
75488: LD_ADDR_VAR 0 4
75492: PUSH
75493: LD_INT 1
75495: ST_TO_ADDR
// end ; end ;
75496: LD_VAR 0 4
75500: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75501: LD_INT 0
75503: PPUSH
75504: PPUSH
75505: PPUSH
75506: PPUSH
// if not unit or not area then
75507: LD_VAR 0 1
75511: NOT
75512: IFTRUE 75521
75514: PUSH
75515: LD_VAR 0 2
75519: NOT
75520: OR
75521: IFFALSE 75525
// exit ;
75523: GO 75701
// tmp := AreaToList ( area , i ) ;
75525: LD_ADDR_VAR 0 6
75529: PUSH
75530: LD_VAR 0 2
75534: PPUSH
75535: LD_VAR 0 5
75539: PPUSH
75540: CALL_OW 517
75544: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75545: LD_ADDR_VAR 0 5
75549: PUSH
75550: DOUBLE
75551: LD_INT 1
75553: DEC
75554: ST_TO_ADDR
75555: LD_VAR 0 6
75559: PUSH
75560: LD_INT 1
75562: ARRAY
75563: PUSH
75564: FOR_TO
75565: IFFALSE 75699
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75567: LD_ADDR_VAR 0 7
75571: PUSH
75572: LD_VAR 0 6
75576: PUSH
75577: LD_INT 1
75579: ARRAY
75580: PUSH
75581: LD_VAR 0 5
75585: ARRAY
75586: PUSH
75587: LD_VAR 0 6
75591: PUSH
75592: LD_INT 2
75594: ARRAY
75595: PUSH
75596: LD_VAR 0 5
75600: ARRAY
75601: PUSH
75602: EMPTY
75603: LIST
75604: LIST
75605: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
75606: LD_INT 92
75608: PUSH
75609: LD_VAR 0 7
75613: PUSH
75614: LD_INT 1
75616: ARRAY
75617: PUSH
75618: LD_VAR 0 7
75622: PUSH
75623: LD_INT 2
75625: ARRAY
75626: PUSH
75627: LD_INT 2
75629: PUSH
75630: EMPTY
75631: LIST
75632: LIST
75633: LIST
75634: LIST
75635: PPUSH
75636: CALL_OW 69
75640: PUSH
75641: LD_INT 0
75643: EQUAL
75644: IFFALSE 75697
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75646: LD_VAR 0 1
75650: PPUSH
75651: LD_VAR 0 7
75655: PUSH
75656: LD_INT 1
75658: ARRAY
75659: PPUSH
75660: LD_VAR 0 7
75664: PUSH
75665: LD_INT 2
75667: ARRAY
75668: PPUSH
75669: LD_VAR 0 3
75673: PPUSH
75674: CALL_OW 48
// result := IsPlaced ( unit ) ;
75678: LD_ADDR_VAR 0 4
75682: PUSH
75683: LD_VAR 0 1
75687: PPUSH
75688: CALL_OW 305
75692: ST_TO_ADDR
// exit ;
75693: POP
75694: POP
75695: GO 75701
// end ; end ;
75697: GO 75564
75699: POP
75700: POP
// end ;
75701: LD_VAR 0 4
75705: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75706: LD_INT 0
75708: PPUSH
75709: PPUSH
75710: PPUSH
// if not side or side > 8 then
75711: LD_VAR 0 1
75715: NOT
75716: IFTRUE 75728
75718: PUSH
75719: LD_VAR 0 1
75723: PUSH
75724: LD_INT 8
75726: GREATER
75727: OR
75728: IFFALSE 75732
// exit ;
75730: GO 75919
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75732: LD_ADDR_VAR 0 4
75736: PUSH
75737: LD_INT 22
75739: PUSH
75740: LD_VAR 0 1
75744: PUSH
75745: EMPTY
75746: LIST
75747: LIST
75748: PUSH
75749: LD_INT 21
75751: PUSH
75752: LD_INT 3
75754: PUSH
75755: EMPTY
75756: LIST
75757: LIST
75758: PUSH
75759: EMPTY
75760: LIST
75761: LIST
75762: PPUSH
75763: CALL_OW 69
75767: ST_TO_ADDR
// if not tmp then
75768: LD_VAR 0 4
75772: NOT
75773: IFFALSE 75777
// exit ;
75775: GO 75919
// enable_addtolog := true ;
75777: LD_ADDR_OWVAR 81
75781: PUSH
75782: LD_INT 1
75784: ST_TO_ADDR
// AddToLog ( [ ) ;
75785: LD_STRING [
75787: PPUSH
75788: CALL_OW 561
// for i in tmp do
75792: LD_ADDR_VAR 0 3
75796: PUSH
75797: LD_VAR 0 4
75801: PUSH
75802: FOR_IN
75803: IFFALSE 75910
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75805: LD_STRING [
75807: PUSH
75808: LD_VAR 0 3
75812: PPUSH
75813: CALL_OW 266
75817: STR
75818: PUSH
75819: LD_STRING , 
75821: STR
75822: PUSH
75823: LD_VAR 0 3
75827: PPUSH
75828: CALL_OW 250
75832: STR
75833: PUSH
75834: LD_STRING , 
75836: STR
75837: PUSH
75838: LD_VAR 0 3
75842: PPUSH
75843: CALL_OW 251
75847: STR
75848: PUSH
75849: LD_STRING , 
75851: STR
75852: PUSH
75853: LD_VAR 0 3
75857: PPUSH
75858: CALL_OW 254
75862: STR
75863: PUSH
75864: LD_STRING , 
75866: STR
75867: PUSH
75868: LD_VAR 0 3
75872: PPUSH
75873: LD_INT 1
75875: PPUSH
75876: CALL_OW 268
75880: STR
75881: PUSH
75882: LD_STRING , 
75884: STR
75885: PUSH
75886: LD_VAR 0 3
75890: PPUSH
75891: LD_INT 2
75893: PPUSH
75894: CALL_OW 268
75898: STR
75899: PUSH
75900: LD_STRING ],
75902: STR
75903: PPUSH
75904: CALL_OW 561
// end ;
75908: GO 75802
75910: POP
75911: POP
// AddToLog ( ]; ) ;
75912: LD_STRING ];
75914: PPUSH
75915: CALL_OW 561
// end ;
75919: LD_VAR 0 2
75923: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75924: LD_INT 0
75926: PPUSH
75927: PPUSH
75928: PPUSH
75929: PPUSH
75930: PPUSH
// if not area or not rate or not max then
75931: LD_VAR 0 1
75935: NOT
75936: IFTRUE 75945
75938: PUSH
75939: LD_VAR 0 2
75943: NOT
75944: OR
75945: IFTRUE 75954
75947: PUSH
75948: LD_VAR 0 4
75952: NOT
75953: OR
75954: IFFALSE 75958
// exit ;
75956: GO 76147
// while 1 do
75958: LD_INT 1
75960: IFFALSE 76147
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75962: LD_ADDR_VAR 0 9
75966: PUSH
75967: LD_VAR 0 1
75971: PPUSH
75972: LD_INT 1
75974: PPUSH
75975: CALL_OW 287
75979: PUSH
75980: LD_INT 10
75982: MUL
75983: ST_TO_ADDR
// r := rate / 10 ;
75984: LD_ADDR_VAR 0 7
75988: PUSH
75989: LD_VAR 0 2
75993: PUSH
75994: LD_INT 10
75996: DIVREAL
75997: ST_TO_ADDR
// time := 1 1$00 ;
75998: LD_ADDR_VAR 0 8
76002: PUSH
76003: LD_INT 2100
76005: ST_TO_ADDR
// if amount < min then
76006: LD_VAR 0 9
76010: PUSH
76011: LD_VAR 0 3
76015: LESS
76016: IFFALSE 76034
// r := r * 2 else
76018: LD_ADDR_VAR 0 7
76022: PUSH
76023: LD_VAR 0 7
76027: PUSH
76028: LD_INT 2
76030: MUL
76031: ST_TO_ADDR
76032: GO 76060
// if amount > max then
76034: LD_VAR 0 9
76038: PUSH
76039: LD_VAR 0 4
76043: GREATER
76044: IFFALSE 76060
// r := r / 2 ;
76046: LD_ADDR_VAR 0 7
76050: PUSH
76051: LD_VAR 0 7
76055: PUSH
76056: LD_INT 2
76058: DIVREAL
76059: ST_TO_ADDR
// time := time / r ;
76060: LD_ADDR_VAR 0 8
76064: PUSH
76065: LD_VAR 0 8
76069: PUSH
76070: LD_VAR 0 7
76074: DIVREAL
76075: ST_TO_ADDR
// if time < 0 then
76076: LD_VAR 0 8
76080: PUSH
76081: LD_INT 0
76083: LESS
76084: IFFALSE 76101
// time := time * - 1 ;
76086: LD_ADDR_VAR 0 8
76090: PUSH
76091: LD_VAR 0 8
76095: PUSH
76096: LD_INT 1
76098: NEG
76099: MUL
76100: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76101: LD_VAR 0 8
76105: PUSH
76106: LD_INT 35
76108: PPUSH
76109: LD_INT 875
76111: PPUSH
76112: CALL_OW 12
76116: PLUS
76117: PPUSH
76118: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76122: LD_INT 1
76124: PPUSH
76125: LD_INT 5
76127: PPUSH
76128: CALL_OW 12
76132: PPUSH
76133: LD_VAR 0 1
76137: PPUSH
76138: LD_INT 1
76140: PPUSH
76141: CALL_OW 55
// end ;
76145: GO 75958
// end ;
76147: LD_VAR 0 5
76151: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76152: LD_INT 0
76154: PPUSH
76155: PPUSH
76156: PPUSH
76157: PPUSH
76158: PPUSH
76159: PPUSH
76160: PPUSH
76161: PPUSH
// if not turrets or not factories then
76162: LD_VAR 0 1
76166: NOT
76167: IFTRUE 76176
76169: PUSH
76170: LD_VAR 0 2
76174: NOT
76175: OR
76176: IFFALSE 76180
// exit ;
76178: GO 76487
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76180: LD_ADDR_VAR 0 10
76184: PUSH
76185: LD_INT 5
76187: PUSH
76188: LD_INT 6
76190: PUSH
76191: EMPTY
76192: LIST
76193: LIST
76194: PUSH
76195: LD_INT 2
76197: PUSH
76198: LD_INT 4
76200: PUSH
76201: EMPTY
76202: LIST
76203: LIST
76204: PUSH
76205: LD_INT 3
76207: PUSH
76208: LD_INT 5
76210: PUSH
76211: EMPTY
76212: LIST
76213: LIST
76214: PUSH
76215: EMPTY
76216: LIST
76217: LIST
76218: LIST
76219: PUSH
76220: LD_INT 24
76222: PUSH
76223: LD_INT 25
76225: PUSH
76226: EMPTY
76227: LIST
76228: LIST
76229: PUSH
76230: LD_INT 23
76232: PUSH
76233: LD_INT 27
76235: PUSH
76236: EMPTY
76237: LIST
76238: LIST
76239: PUSH
76240: EMPTY
76241: LIST
76242: LIST
76243: PUSH
76244: LD_INT 42
76246: PUSH
76247: LD_INT 43
76249: PUSH
76250: EMPTY
76251: LIST
76252: LIST
76253: PUSH
76254: LD_INT 44
76256: PUSH
76257: LD_INT 46
76259: PUSH
76260: EMPTY
76261: LIST
76262: LIST
76263: PUSH
76264: LD_INT 45
76266: PUSH
76267: LD_INT 47
76269: PUSH
76270: EMPTY
76271: LIST
76272: LIST
76273: PUSH
76274: EMPTY
76275: LIST
76276: LIST
76277: LIST
76278: PUSH
76279: EMPTY
76280: LIST
76281: LIST
76282: LIST
76283: ST_TO_ADDR
// result := [ ] ;
76284: LD_ADDR_VAR 0 3
76288: PUSH
76289: EMPTY
76290: ST_TO_ADDR
// for i in turrets do
76291: LD_ADDR_VAR 0 4
76295: PUSH
76296: LD_VAR 0 1
76300: PUSH
76301: FOR_IN
76302: IFFALSE 76485
// begin nat := GetNation ( i ) ;
76304: LD_ADDR_VAR 0 7
76308: PUSH
76309: LD_VAR 0 4
76313: PPUSH
76314: CALL_OW 248
76318: ST_TO_ADDR
// weapon := 0 ;
76319: LD_ADDR_VAR 0 8
76323: PUSH
76324: LD_INT 0
76326: ST_TO_ADDR
// if not nat then
76327: LD_VAR 0 7
76331: NOT
76332: IFFALSE 76336
// continue ;
76334: GO 76301
// for j in list [ nat ] do
76336: LD_ADDR_VAR 0 5
76340: PUSH
76341: LD_VAR 0 10
76345: PUSH
76346: LD_VAR 0 7
76350: ARRAY
76351: PUSH
76352: FOR_IN
76353: IFFALSE 76394
// if GetBWeapon ( i ) = j [ 1 ] then
76355: LD_VAR 0 4
76359: PPUSH
76360: CALL_OW 269
76364: PUSH
76365: LD_VAR 0 5
76369: PUSH
76370: LD_INT 1
76372: ARRAY
76373: EQUAL
76374: IFFALSE 76392
// begin weapon := j [ 2 ] ;
76376: LD_ADDR_VAR 0 8
76380: PUSH
76381: LD_VAR 0 5
76385: PUSH
76386: LD_INT 2
76388: ARRAY
76389: ST_TO_ADDR
// break ;
76390: GO 76394
// end ;
76392: GO 76352
76394: POP
76395: POP
// if not weapon then
76396: LD_VAR 0 8
76400: NOT
76401: IFFALSE 76405
// continue ;
76403: GO 76301
// for k in factories do
76405: LD_ADDR_VAR 0 6
76409: PUSH
76410: LD_VAR 0 2
76414: PUSH
76415: FOR_IN
76416: IFFALSE 76481
// begin weapons := AvailableWeaponList ( k ) ;
76418: LD_ADDR_VAR 0 9
76422: PUSH
76423: LD_VAR 0 6
76427: PPUSH
76428: CALL_OW 478
76432: ST_TO_ADDR
// if not weapons then
76433: LD_VAR 0 9
76437: NOT
76438: IFFALSE 76442
// continue ;
76440: GO 76415
// if weapon in weapons then
76442: LD_VAR 0 8
76446: PUSH
76447: LD_VAR 0 9
76451: IN
76452: IFFALSE 76479
// begin result := [ i , weapon ] ;
76454: LD_ADDR_VAR 0 3
76458: PUSH
76459: LD_VAR 0 4
76463: PUSH
76464: LD_VAR 0 8
76468: PUSH
76469: EMPTY
76470: LIST
76471: LIST
76472: ST_TO_ADDR
// exit ;
76473: POP
76474: POP
76475: POP
76476: POP
76477: GO 76487
// end ; end ;
76479: GO 76415
76481: POP
76482: POP
// end ;
76483: GO 76301
76485: POP
76486: POP
// end ;
76487: LD_VAR 0 3
76491: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76492: LD_INT 0
76494: PPUSH
// if not side or side > 8 then
76495: LD_VAR 0 3
76499: NOT
76500: IFTRUE 76512
76502: PUSH
76503: LD_VAR 0 3
76507: PUSH
76508: LD_INT 8
76510: GREATER
76511: OR
76512: IFFALSE 76516
// exit ;
76514: GO 76575
// if not range then
76516: LD_VAR 0 4
76520: NOT
76521: IFFALSE 76532
// range := - 12 ;
76523: LD_ADDR_VAR 0 4
76527: PUSH
76528: LD_INT 12
76530: NEG
76531: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76532: LD_VAR 0 1
76536: PPUSH
76537: LD_VAR 0 2
76541: PPUSH
76542: LD_VAR 0 3
76546: PPUSH
76547: LD_VAR 0 4
76551: PPUSH
76552: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76556: LD_VAR 0 1
76560: PPUSH
76561: LD_VAR 0 2
76565: PPUSH
76566: LD_VAR 0 3
76570: PPUSH
76571: CALL_OW 331
// end ;
76575: LD_VAR 0 5
76579: RET
// export function Video ( mode ) ; begin
76580: LD_INT 0
76582: PPUSH
// ingame_video = mode ;
76583: LD_ADDR_OWVAR 52
76587: PUSH
76588: LD_VAR 0 1
76592: ST_TO_ADDR
// interface_hidden = mode ;
76593: LD_ADDR_OWVAR 54
76597: PUSH
76598: LD_VAR 0 1
76602: ST_TO_ADDR
// end ;
76603: LD_VAR 0 2
76607: RET
// export function Join ( array , element ) ; begin
76608: LD_INT 0
76610: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76611: LD_ADDR_VAR 0 3
76615: PUSH
76616: LD_VAR 0 1
76620: PPUSH
76621: LD_VAR 0 1
76625: PUSH
76626: LD_INT 1
76628: PLUS
76629: PPUSH
76630: LD_VAR 0 2
76634: PPUSH
76635: CALL_OW 1
76639: ST_TO_ADDR
// end ;
76640: LD_VAR 0 3
76644: RET
// export function JoinUnion ( array , element ) ; begin
76645: LD_INT 0
76647: PPUSH
// result := array union element ;
76648: LD_ADDR_VAR 0 3
76652: PUSH
76653: LD_VAR 0 1
76657: PUSH
76658: LD_VAR 0 2
76662: UNION
76663: ST_TO_ADDR
// end ;
76664: LD_VAR 0 3
76668: RET
// export function GetBehemoths ( side ) ; begin
76669: LD_INT 0
76671: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76672: LD_ADDR_VAR 0 2
76676: PUSH
76677: LD_INT 22
76679: PUSH
76680: LD_VAR 0 1
76684: PUSH
76685: EMPTY
76686: LIST
76687: LIST
76688: PUSH
76689: LD_INT 31
76691: PUSH
76692: LD_INT 25
76694: PUSH
76695: EMPTY
76696: LIST
76697: LIST
76698: PUSH
76699: EMPTY
76700: LIST
76701: LIST
76702: PPUSH
76703: CALL_OW 69
76707: ST_TO_ADDR
// end ;
76708: LD_VAR 0 2
76712: RET
// export function Shuffle ( array ) ; var i , index ; begin
76713: LD_INT 0
76715: PPUSH
76716: PPUSH
76717: PPUSH
// result := [ ] ;
76718: LD_ADDR_VAR 0 2
76722: PUSH
76723: EMPTY
76724: ST_TO_ADDR
// if not array then
76725: LD_VAR 0 1
76729: NOT
76730: IFFALSE 76734
// exit ;
76732: GO 76833
// Randomize ;
76734: CALL_OW 10
// for i = array downto 1 do
76738: LD_ADDR_VAR 0 3
76742: PUSH
76743: DOUBLE
76744: LD_VAR 0 1
76748: INC
76749: ST_TO_ADDR
76750: LD_INT 1
76752: PUSH
76753: FOR_DOWNTO
76754: IFFALSE 76831
// begin index := rand ( 1 , array ) ;
76756: LD_ADDR_VAR 0 4
76760: PUSH
76761: LD_INT 1
76763: PPUSH
76764: LD_VAR 0 1
76768: PPUSH
76769: CALL_OW 12
76773: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76774: LD_ADDR_VAR 0 2
76778: PUSH
76779: LD_VAR 0 2
76783: PPUSH
76784: LD_VAR 0 2
76788: PUSH
76789: LD_INT 1
76791: PLUS
76792: PPUSH
76793: LD_VAR 0 1
76797: PUSH
76798: LD_VAR 0 4
76802: ARRAY
76803: PPUSH
76804: CALL_OW 2
76808: ST_TO_ADDR
// array := Delete ( array , index ) ;
76809: LD_ADDR_VAR 0 1
76813: PUSH
76814: LD_VAR 0 1
76818: PPUSH
76819: LD_VAR 0 4
76823: PPUSH
76824: CALL_OW 3
76828: ST_TO_ADDR
// end ;
76829: GO 76753
76831: POP
76832: POP
// end ;
76833: LD_VAR 0 2
76837: RET
// export function GetBaseMaterials ( base ) ; begin
76838: LD_INT 0
76840: PPUSH
// result := [ 0 , 0 , 0 ] ;
76841: LD_ADDR_VAR 0 2
76845: PUSH
76846: LD_INT 0
76848: PUSH
76849: LD_INT 0
76851: PUSH
76852: LD_INT 0
76854: PUSH
76855: EMPTY
76856: LIST
76857: LIST
76858: LIST
76859: ST_TO_ADDR
// if not base then
76860: LD_VAR 0 1
76864: NOT
76865: IFFALSE 76869
// exit ;
76867: GO 76918
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76869: LD_ADDR_VAR 0 2
76873: PUSH
76874: LD_VAR 0 1
76878: PPUSH
76879: LD_INT 1
76881: PPUSH
76882: CALL_OW 275
76886: PUSH
76887: LD_VAR 0 1
76891: PPUSH
76892: LD_INT 2
76894: PPUSH
76895: CALL_OW 275
76899: PUSH
76900: LD_VAR 0 1
76904: PPUSH
76905: LD_INT 3
76907: PPUSH
76908: CALL_OW 275
76912: PUSH
76913: EMPTY
76914: LIST
76915: LIST
76916: LIST
76917: ST_TO_ADDR
// end ;
76918: LD_VAR 0 2
76922: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76923: LD_INT 0
76925: PPUSH
76926: PPUSH
// result := array ;
76927: LD_ADDR_VAR 0 3
76931: PUSH
76932: LD_VAR 0 1
76936: ST_TO_ADDR
// if size >= result then
76937: LD_VAR 0 2
76941: PUSH
76942: LD_VAR 0 3
76946: GREATEREQUAL
76947: IFFALSE 76951
// exit ;
76949: GO 77001
// if size then
76951: LD_VAR 0 2
76955: IFFALSE 77001
// for i := array downto size do
76957: LD_ADDR_VAR 0 4
76961: PUSH
76962: DOUBLE
76963: LD_VAR 0 1
76967: INC
76968: ST_TO_ADDR
76969: LD_VAR 0 2
76973: PUSH
76974: FOR_DOWNTO
76975: IFFALSE 76999
// result := Delete ( result , result ) ;
76977: LD_ADDR_VAR 0 3
76981: PUSH
76982: LD_VAR 0 3
76986: PPUSH
76987: LD_VAR 0 3
76991: PPUSH
76992: CALL_OW 3
76996: ST_TO_ADDR
76997: GO 76974
76999: POP
77000: POP
// end ;
77001: LD_VAR 0 3
77005: RET
// export function ComExit ( unit ) ; var tmp ; begin
77006: LD_INT 0
77008: PPUSH
77009: PPUSH
// if not IsInUnit ( unit ) then
77010: LD_VAR 0 1
77014: PPUSH
77015: CALL_OW 310
77019: NOT
77020: IFFALSE 77024
// exit ;
77022: GO 77084
// tmp := IsInUnit ( unit ) ;
77024: LD_ADDR_VAR 0 3
77028: PUSH
77029: LD_VAR 0 1
77033: PPUSH
77034: CALL_OW 310
77038: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77039: LD_VAR 0 3
77043: PPUSH
77044: CALL_OW 247
77048: PUSH
77049: LD_INT 2
77051: EQUAL
77052: IFFALSE 77065
// ComExitVehicle ( unit ) else
77054: LD_VAR 0 1
77058: PPUSH
77059: CALL_OW 121
77063: GO 77074
// ComExitBuilding ( unit ) ;
77065: LD_VAR 0 1
77069: PPUSH
77070: CALL_OW 122
// result := tmp ;
77074: LD_ADDR_VAR 0 2
77078: PUSH
77079: LD_VAR 0 3
77083: ST_TO_ADDR
// end ;
77084: LD_VAR 0 2
77088: RET
// export function ComExitAll ( units ) ; var i ; begin
77089: LD_INT 0
77091: PPUSH
77092: PPUSH
// if not units then
77093: LD_VAR 0 1
77097: NOT
77098: IFFALSE 77102
// exit ;
77100: GO 77128
// for i in units do
77102: LD_ADDR_VAR 0 3
77106: PUSH
77107: LD_VAR 0 1
77111: PUSH
77112: FOR_IN
77113: IFFALSE 77126
// ComExit ( i ) ;
77115: LD_VAR 0 3
77119: PPUSH
77120: CALL 77006 0 1
77124: GO 77112
77126: POP
77127: POP
// end ;
77128: LD_VAR 0 2
77132: RET
// export function ResetHc ; begin
77133: LD_INT 0
77135: PPUSH
// InitHc ;
77136: CALL_OW 19
// hc_importance := 0 ;
77140: LD_ADDR_OWVAR 32
77144: PUSH
77145: LD_INT 0
77147: ST_TO_ADDR
// end ;
77148: LD_VAR 0 1
77152: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77153: LD_INT 0
77155: PPUSH
77156: PPUSH
77157: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77158: LD_ADDR_VAR 0 6
77162: PUSH
77163: LD_VAR 0 1
77167: PUSH
77168: LD_VAR 0 3
77172: PLUS
77173: PUSH
77174: LD_INT 2
77176: DIV
77177: ST_TO_ADDR
// if _x < 0 then
77178: LD_VAR 0 6
77182: PUSH
77183: LD_INT 0
77185: LESS
77186: IFFALSE 77203
// _x := _x * - 1 ;
77188: LD_ADDR_VAR 0 6
77192: PUSH
77193: LD_VAR 0 6
77197: PUSH
77198: LD_INT 1
77200: NEG
77201: MUL
77202: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77203: LD_ADDR_VAR 0 7
77207: PUSH
77208: LD_VAR 0 2
77212: PUSH
77213: LD_VAR 0 4
77217: PLUS
77218: PUSH
77219: LD_INT 2
77221: DIV
77222: ST_TO_ADDR
// if _y < 0 then
77223: LD_VAR 0 7
77227: PUSH
77228: LD_INT 0
77230: LESS
77231: IFFALSE 77248
// _y := _y * - 1 ;
77233: LD_ADDR_VAR 0 7
77237: PUSH
77238: LD_VAR 0 7
77242: PUSH
77243: LD_INT 1
77245: NEG
77246: MUL
77247: ST_TO_ADDR
// result := [ _x , _y ] ;
77248: LD_ADDR_VAR 0 5
77252: PUSH
77253: LD_VAR 0 6
77257: PUSH
77258: LD_VAR 0 7
77262: PUSH
77263: EMPTY
77264: LIST
77265: LIST
77266: ST_TO_ADDR
// end ;
77267: LD_VAR 0 5
77271: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77272: LD_INT 0
77274: PPUSH
77275: PPUSH
77276: PPUSH
77277: PPUSH
// task := GetTaskList ( unit ) ;
77278: LD_ADDR_VAR 0 7
77282: PUSH
77283: LD_VAR 0 1
77287: PPUSH
77288: CALL_OW 437
77292: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77293: LD_VAR 0 7
77297: NOT
77298: IFFALSE 77317
77300: PUSH
77301: LD_VAR 0 1
77305: PPUSH
77306: LD_VAR 0 2
77310: PPUSH
77311: CALL_OW 308
77315: NOT
77316: AND
77317: IFFALSE 77321
// exit ;
77319: GO 77439
// if IsInArea ( unit , area ) then
77321: LD_VAR 0 1
77325: PPUSH
77326: LD_VAR 0 2
77330: PPUSH
77331: CALL_OW 308
77335: IFFALSE 77353
// begin ComMoveToArea ( unit , goAway ) ;
77337: LD_VAR 0 1
77341: PPUSH
77342: LD_VAR 0 3
77346: PPUSH
77347: CALL_OW 113
// exit ;
77351: GO 77439
// end ; if task [ 1 ] [ 1 ] <> M then
77353: LD_VAR 0 7
77357: PUSH
77358: LD_INT 1
77360: ARRAY
77361: PUSH
77362: LD_INT 1
77364: ARRAY
77365: PUSH
77366: LD_STRING M
77368: NONEQUAL
77369: IFFALSE 77373
// exit ;
77371: GO 77439
// x := task [ 1 ] [ 2 ] ;
77373: LD_ADDR_VAR 0 5
77377: PUSH
77378: LD_VAR 0 7
77382: PUSH
77383: LD_INT 1
77385: ARRAY
77386: PUSH
77387: LD_INT 2
77389: ARRAY
77390: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77391: LD_ADDR_VAR 0 6
77395: PUSH
77396: LD_VAR 0 7
77400: PUSH
77401: LD_INT 1
77403: ARRAY
77404: PUSH
77405: LD_INT 3
77407: ARRAY
77408: ST_TO_ADDR
// if InArea ( x , y , area ) then
77409: LD_VAR 0 5
77413: PPUSH
77414: LD_VAR 0 6
77418: PPUSH
77419: LD_VAR 0 2
77423: PPUSH
77424: CALL_OW 309
77428: IFFALSE 77439
// ComStop ( unit ) ;
77430: LD_VAR 0 1
77434: PPUSH
77435: CALL_OW 141
// end ;
77439: LD_VAR 0 4
77443: RET
// export function Abs ( value ) ; begin
77444: LD_INT 0
77446: PPUSH
// result := value ;
77447: LD_ADDR_VAR 0 2
77451: PUSH
77452: LD_VAR 0 1
77456: ST_TO_ADDR
// if value < 0 then
77457: LD_VAR 0 1
77461: PUSH
77462: LD_INT 0
77464: LESS
77465: IFFALSE 77482
// result := value * - 1 ;
77467: LD_ADDR_VAR 0 2
77471: PUSH
77472: LD_VAR 0 1
77476: PUSH
77477: LD_INT 1
77479: NEG
77480: MUL
77481: ST_TO_ADDR
// end ;
77482: LD_VAR 0 2
77486: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77487: LD_INT 0
77489: PPUSH
77490: PPUSH
77491: PPUSH
77492: PPUSH
77493: PPUSH
77494: PPUSH
77495: PPUSH
77496: PPUSH
// if not unit or not building then
77497: LD_VAR 0 1
77501: NOT
77502: IFTRUE 77511
77504: PUSH
77505: LD_VAR 0 2
77509: NOT
77510: OR
77511: IFFALSE 77515
// exit ;
77513: GO 77743
// x := GetX ( building ) ;
77515: LD_ADDR_VAR 0 4
77519: PUSH
77520: LD_VAR 0 2
77524: PPUSH
77525: CALL_OW 250
77529: ST_TO_ADDR
// y := GetY ( building ) ;
77530: LD_ADDR_VAR 0 6
77534: PUSH
77535: LD_VAR 0 2
77539: PPUSH
77540: CALL_OW 251
77544: ST_TO_ADDR
// d := GetDir ( building ) ;
77545: LD_ADDR_VAR 0 8
77549: PUSH
77550: LD_VAR 0 2
77554: PPUSH
77555: CALL_OW 254
77559: ST_TO_ADDR
// r := 4 ;
77560: LD_ADDR_VAR 0 9
77564: PUSH
77565: LD_INT 4
77567: ST_TO_ADDR
// for i := 1 to 5 do
77568: LD_ADDR_VAR 0 10
77572: PUSH
77573: DOUBLE
77574: LD_INT 1
77576: DEC
77577: ST_TO_ADDR
77578: LD_INT 5
77580: PUSH
77581: FOR_TO
77582: IFFALSE 77741
// begin _x := ShiftX ( x , d , r + i ) ;
77584: LD_ADDR_VAR 0 5
77588: PUSH
77589: LD_VAR 0 4
77593: PPUSH
77594: LD_VAR 0 8
77598: PPUSH
77599: LD_VAR 0 9
77603: PUSH
77604: LD_VAR 0 10
77608: PLUS
77609: PPUSH
77610: CALL_OW 272
77614: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77615: LD_ADDR_VAR 0 7
77619: PUSH
77620: LD_VAR 0 6
77624: PPUSH
77625: LD_VAR 0 8
77629: PPUSH
77630: LD_VAR 0 9
77634: PUSH
77635: LD_VAR 0 10
77639: PLUS
77640: PPUSH
77641: CALL_OW 273
77645: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77646: LD_VAR 0 5
77650: PPUSH
77651: LD_VAR 0 7
77655: PPUSH
77656: CALL_OW 488
77660: IFFALSE 77695
77662: PUSH
77663: LD_VAR 0 5
77667: PPUSH
77668: LD_VAR 0 7
77672: PPUSH
77673: CALL_OW 428
77677: PPUSH
77678: CALL_OW 247
77682: PUSH
77683: LD_INT 3
77685: PUSH
77686: LD_INT 2
77688: PUSH
77689: EMPTY
77690: LIST
77691: LIST
77692: IN
77693: NOT
77694: AND
77695: IFFALSE 77739
// begin ComMoveXY ( unit , _x , _y ) ;
77697: LD_VAR 0 1
77701: PPUSH
77702: LD_VAR 0 5
77706: PPUSH
77707: LD_VAR 0 7
77711: PPUSH
77712: CALL_OW 111
// result := [ _x , _y ] ;
77716: LD_ADDR_VAR 0 3
77720: PUSH
77721: LD_VAR 0 5
77725: PUSH
77726: LD_VAR 0 7
77730: PUSH
77731: EMPTY
77732: LIST
77733: LIST
77734: ST_TO_ADDR
// exit ;
77735: POP
77736: POP
77737: GO 77743
// end ; end ;
77739: GO 77581
77741: POP
77742: POP
// end ;
77743: LD_VAR 0 3
77747: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77748: LD_INT 0
77750: PPUSH
77751: PPUSH
77752: PPUSH
// result := 0 ;
77753: LD_ADDR_VAR 0 3
77757: PUSH
77758: LD_INT 0
77760: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77761: LD_VAR 0 1
77765: PUSH
77766: LD_INT 0
77768: LESS
77769: IFTRUE 77781
77771: PUSH
77772: LD_VAR 0 1
77776: PUSH
77777: LD_INT 8
77779: GREATER
77780: OR
77781: IFTRUE 77793
77783: PUSH
77784: LD_VAR 0 2
77788: PUSH
77789: LD_INT 0
77791: LESS
77792: OR
77793: IFTRUE 77805
77795: PUSH
77796: LD_VAR 0 2
77800: PUSH
77801: LD_INT 8
77803: GREATER
77804: OR
77805: IFFALSE 77809
// exit ;
77807: GO 77884
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77809: LD_ADDR_VAR 0 4
77813: PUSH
77814: LD_INT 22
77816: PUSH
77817: LD_VAR 0 2
77821: PUSH
77822: EMPTY
77823: LIST
77824: LIST
77825: PPUSH
77826: CALL_OW 69
77830: PUSH
77831: FOR_IN
77832: IFFALSE 77882
// begin un := UnitShoot ( i ) ;
77834: LD_ADDR_VAR 0 5
77838: PUSH
77839: LD_VAR 0 4
77843: PPUSH
77844: CALL_OW 504
77848: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77849: LD_VAR 0 5
77853: PPUSH
77854: CALL_OW 255
77858: PUSH
77859: LD_VAR 0 1
77863: EQUAL
77864: IFFALSE 77880
// begin result := un ;
77866: LD_ADDR_VAR 0 3
77870: PUSH
77871: LD_VAR 0 5
77875: ST_TO_ADDR
// exit ;
77876: POP
77877: POP
77878: GO 77884
// end ; end ;
77880: GO 77831
77882: POP
77883: POP
// end ;
77884: LD_VAR 0 3
77888: RET
// export function GetCargoBay ( units ) ; begin
77889: LD_INT 0
77891: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77892: LD_ADDR_VAR 0 2
77896: PUSH
77897: LD_VAR 0 1
77901: PPUSH
77902: LD_INT 2
77904: PUSH
77905: LD_INT 34
77907: PUSH
77908: LD_INT 12
77910: PUSH
77911: EMPTY
77912: LIST
77913: LIST
77914: PUSH
77915: LD_INT 34
77917: PUSH
77918: LD_INT 51
77920: PUSH
77921: EMPTY
77922: LIST
77923: LIST
77924: PUSH
77925: LD_INT 34
77927: PUSH
77928: LD_INT 32
77930: PUSH
77931: EMPTY
77932: LIST
77933: LIST
77934: PUSH
77935: LD_INT 34
77937: PUSH
77938: LD_INT 89
77940: PUSH
77941: EMPTY
77942: LIST
77943: LIST
77944: PUSH
77945: EMPTY
77946: LIST
77947: LIST
77948: LIST
77949: LIST
77950: LIST
77951: PPUSH
77952: CALL_OW 72
77956: ST_TO_ADDR
// end ;
77957: LD_VAR 0 2
77961: RET
// export function Negate ( value ) ; begin
77962: LD_INT 0
77964: PPUSH
// result := not value ;
77965: LD_ADDR_VAR 0 2
77969: PUSH
77970: LD_VAR 0 1
77974: NOT
77975: ST_TO_ADDR
// end ;
77976: LD_VAR 0 2
77980: RET
// export function Inc ( value ) ; begin
77981: LD_INT 0
77983: PPUSH
// result := value + 1 ;
77984: LD_ADDR_VAR 0 2
77988: PUSH
77989: LD_VAR 0 1
77993: PUSH
77994: LD_INT 1
77996: PLUS
77997: ST_TO_ADDR
// end ;
77998: LD_VAR 0 2
78002: RET
// export function Dec ( value ) ; begin
78003: LD_INT 0
78005: PPUSH
// result := value - 1 ;
78006: LD_ADDR_VAR 0 2
78010: PUSH
78011: LD_VAR 0 1
78015: PUSH
78016: LD_INT 1
78018: MINUS
78019: ST_TO_ADDR
// end ;
78020: LD_VAR 0 2
78024: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78025: LD_INT 0
78027: PPUSH
78028: PPUSH
78029: PPUSH
78030: PPUSH
78031: PPUSH
78032: PPUSH
78033: PPUSH
78034: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78035: LD_VAR 0 1
78039: PPUSH
78040: LD_VAR 0 2
78044: PPUSH
78045: CALL_OW 488
78049: NOT
78050: IFTRUE 78069
78052: PUSH
78053: LD_VAR 0 3
78057: PPUSH
78058: LD_VAR 0 4
78062: PPUSH
78063: CALL_OW 488
78067: NOT
78068: OR
78069: IFFALSE 78082
// begin result := - 1 ;
78071: LD_ADDR_VAR 0 5
78075: PUSH
78076: LD_INT 1
78078: NEG
78079: ST_TO_ADDR
// exit ;
78080: GO 78317
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78082: LD_ADDR_VAR 0 12
78086: PUSH
78087: LD_VAR 0 1
78091: PPUSH
78092: LD_VAR 0 2
78096: PPUSH
78097: LD_VAR 0 3
78101: PPUSH
78102: LD_VAR 0 4
78106: PPUSH
78107: CALL 77153 0 4
78111: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78112: LD_ADDR_VAR 0 11
78116: PUSH
78117: LD_VAR 0 1
78121: PPUSH
78122: LD_VAR 0 2
78126: PPUSH
78127: LD_VAR 0 12
78131: PUSH
78132: LD_INT 1
78134: ARRAY
78135: PPUSH
78136: LD_VAR 0 12
78140: PUSH
78141: LD_INT 2
78143: ARRAY
78144: PPUSH
78145: CALL_OW 298
78149: ST_TO_ADDR
// distance := 9999 ;
78150: LD_ADDR_VAR 0 10
78154: PUSH
78155: LD_INT 9999
78157: ST_TO_ADDR
// for i := 0 to 5 do
78158: LD_ADDR_VAR 0 6
78162: PUSH
78163: DOUBLE
78164: LD_INT 0
78166: DEC
78167: ST_TO_ADDR
78168: LD_INT 5
78170: PUSH
78171: FOR_TO
78172: IFFALSE 78315
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78174: LD_ADDR_VAR 0 7
78178: PUSH
78179: LD_VAR 0 1
78183: PPUSH
78184: LD_VAR 0 6
78188: PPUSH
78189: LD_VAR 0 11
78193: PPUSH
78194: CALL_OW 272
78198: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78199: LD_ADDR_VAR 0 8
78203: PUSH
78204: LD_VAR 0 2
78208: PPUSH
78209: LD_VAR 0 6
78213: PPUSH
78214: LD_VAR 0 11
78218: PPUSH
78219: CALL_OW 273
78223: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78224: LD_VAR 0 7
78228: PPUSH
78229: LD_VAR 0 8
78233: PPUSH
78234: CALL_OW 488
78238: NOT
78239: IFFALSE 78243
// continue ;
78241: GO 78171
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78243: LD_ADDR_VAR 0 9
78247: PUSH
78248: LD_VAR 0 12
78252: PUSH
78253: LD_INT 1
78255: ARRAY
78256: PPUSH
78257: LD_VAR 0 12
78261: PUSH
78262: LD_INT 2
78264: ARRAY
78265: PPUSH
78266: LD_VAR 0 7
78270: PPUSH
78271: LD_VAR 0 8
78275: PPUSH
78276: CALL_OW 298
78280: ST_TO_ADDR
// if tmp < distance then
78281: LD_VAR 0 9
78285: PUSH
78286: LD_VAR 0 10
78290: LESS
78291: IFFALSE 78313
// begin result := i ;
78293: LD_ADDR_VAR 0 5
78297: PUSH
78298: LD_VAR 0 6
78302: ST_TO_ADDR
// distance := tmp ;
78303: LD_ADDR_VAR 0 10
78307: PUSH
78308: LD_VAR 0 9
78312: ST_TO_ADDR
// end ; end ;
78313: GO 78171
78315: POP
78316: POP
// end ;
78317: LD_VAR 0 5
78321: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78322: LD_INT 0
78324: PPUSH
78325: PPUSH
// if not driver or not IsInUnit ( driver ) then
78326: LD_VAR 0 1
78330: NOT
78331: IFTRUE 78345
78333: PUSH
78334: LD_VAR 0 1
78338: PPUSH
78339: CALL_OW 310
78343: NOT
78344: OR
78345: IFFALSE 78349
// exit ;
78347: GO 78439
// vehicle := IsInUnit ( driver ) ;
78349: LD_ADDR_VAR 0 3
78353: PUSH
78354: LD_VAR 0 1
78358: PPUSH
78359: CALL_OW 310
78363: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78364: LD_VAR 0 1
78368: PPUSH
78369: LD_STRING \
78371: PUSH
78372: LD_INT 0
78374: PUSH
78375: LD_INT 0
78377: PUSH
78378: LD_INT 0
78380: PUSH
78381: LD_INT 0
78383: PUSH
78384: LD_INT 0
78386: PUSH
78387: LD_INT 0
78389: PUSH
78390: EMPTY
78391: LIST
78392: LIST
78393: LIST
78394: LIST
78395: LIST
78396: LIST
78397: LIST
78398: PUSH
78399: LD_STRING E
78401: PUSH
78402: LD_INT 0
78404: PUSH
78405: LD_INT 0
78407: PUSH
78408: LD_VAR 0 3
78412: PUSH
78413: LD_INT 0
78415: PUSH
78416: LD_INT 0
78418: PUSH
78419: LD_INT 0
78421: PUSH
78422: EMPTY
78423: LIST
78424: LIST
78425: LIST
78426: LIST
78427: LIST
78428: LIST
78429: LIST
78430: PUSH
78431: EMPTY
78432: LIST
78433: LIST
78434: PPUSH
78435: CALL_OW 446
// end ;
78439: LD_VAR 0 2
78443: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78444: LD_INT 0
78446: PPUSH
78447: PPUSH
// if not driver or not IsInUnit ( driver ) then
78448: LD_VAR 0 1
78452: NOT
78453: IFTRUE 78467
78455: PUSH
78456: LD_VAR 0 1
78460: PPUSH
78461: CALL_OW 310
78465: NOT
78466: OR
78467: IFFALSE 78471
// exit ;
78469: GO 78561
// vehicle := IsInUnit ( driver ) ;
78471: LD_ADDR_VAR 0 3
78475: PUSH
78476: LD_VAR 0 1
78480: PPUSH
78481: CALL_OW 310
78485: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78486: LD_VAR 0 1
78490: PPUSH
78491: LD_STRING \
78493: PUSH
78494: LD_INT 0
78496: PUSH
78497: LD_INT 0
78499: PUSH
78500: LD_INT 0
78502: PUSH
78503: LD_INT 0
78505: PUSH
78506: LD_INT 0
78508: PUSH
78509: LD_INT 0
78511: PUSH
78512: EMPTY
78513: LIST
78514: LIST
78515: LIST
78516: LIST
78517: LIST
78518: LIST
78519: LIST
78520: PUSH
78521: LD_STRING E
78523: PUSH
78524: LD_INT 0
78526: PUSH
78527: LD_INT 0
78529: PUSH
78530: LD_VAR 0 3
78534: PUSH
78535: LD_INT 0
78537: PUSH
78538: LD_INT 0
78540: PUSH
78541: LD_INT 0
78543: PUSH
78544: EMPTY
78545: LIST
78546: LIST
78547: LIST
78548: LIST
78549: LIST
78550: LIST
78551: LIST
78552: PUSH
78553: EMPTY
78554: LIST
78555: LIST
78556: PPUSH
78557: CALL_OW 447
// end ;
78561: LD_VAR 0 2
78565: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78566: LD_INT 0
78568: PPUSH
78569: PPUSH
78570: PPUSH
// tmp := [ ] ;
78571: LD_ADDR_VAR 0 5
78575: PUSH
78576: EMPTY
78577: ST_TO_ADDR
// for i in units do
78578: LD_ADDR_VAR 0 4
78582: PUSH
78583: LD_VAR 0 1
78587: PUSH
78588: FOR_IN
78589: IFFALSE 78627
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78591: LD_ADDR_VAR 0 5
78595: PUSH
78596: LD_VAR 0 5
78600: PPUSH
78601: LD_VAR 0 5
78605: PUSH
78606: LD_INT 1
78608: PLUS
78609: PPUSH
78610: LD_VAR 0 4
78614: PPUSH
78615: CALL_OW 256
78619: PPUSH
78620: CALL_OW 2
78624: ST_TO_ADDR
78625: GO 78588
78627: POP
78628: POP
// if not tmp then
78629: LD_VAR 0 5
78633: NOT
78634: IFFALSE 78638
// exit ;
78636: GO 78686
// if asc then
78638: LD_VAR 0 2
78642: IFFALSE 78666
// result := SortListByListAsc ( units , tmp ) else
78644: LD_ADDR_VAR 0 3
78648: PUSH
78649: LD_VAR 0 1
78653: PPUSH
78654: LD_VAR 0 5
78658: PPUSH
78659: CALL_OW 76
78663: ST_TO_ADDR
78664: GO 78686
// result := SortListByListDesc ( units , tmp ) ;
78666: LD_ADDR_VAR 0 3
78670: PUSH
78671: LD_VAR 0 1
78675: PPUSH
78676: LD_VAR 0 5
78680: PPUSH
78681: CALL_OW 77
78685: ST_TO_ADDR
// end ;
78686: LD_VAR 0 3
78690: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78691: LD_INT 0
78693: PPUSH
78694: PPUSH
// task := GetTaskList ( mech ) ;
78695: LD_ADDR_VAR 0 4
78699: PUSH
78700: LD_VAR 0 1
78704: PPUSH
78705: CALL_OW 437
78709: ST_TO_ADDR
// if not task then
78710: LD_VAR 0 4
78714: NOT
78715: IFFALSE 78719
// exit ;
78717: GO 78763
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78719: LD_ADDR_VAR 0 3
78723: PUSH
78724: LD_VAR 0 4
78728: PUSH
78729: LD_INT 1
78731: ARRAY
78732: PUSH
78733: LD_INT 1
78735: ARRAY
78736: PUSH
78737: LD_STRING r
78739: EQUAL
78740: IFFALSE 78762
78742: PUSH
78743: LD_VAR 0 4
78747: PUSH
78748: LD_INT 1
78750: ARRAY
78751: PUSH
78752: LD_INT 4
78754: ARRAY
78755: PUSH
78756: LD_VAR 0 2
78760: EQUAL
78761: AND
78762: ST_TO_ADDR
// end ;
78763: LD_VAR 0 3
78767: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78768: LD_INT 0
78770: PPUSH
// SetDir ( unit , d ) ;
78771: LD_VAR 0 1
78775: PPUSH
78776: LD_VAR 0 4
78780: PPUSH
78781: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
78785: LD_ADDR_VAR 0 6
78789: PUSH
78790: LD_VAR 0 1
78794: PPUSH
78795: LD_VAR 0 2
78799: PPUSH
78800: LD_VAR 0 3
78804: PPUSH
78805: LD_VAR 0 5
78809: PPUSH
78810: CALL_OW 48
78814: ST_TO_ADDR
// end ;
78815: LD_VAR 0 6
78819: RET
// export function ToNaturalNumber ( number ) ; begin
78820: LD_INT 0
78822: PPUSH
// result := number div 1 ;
78823: LD_ADDR_VAR 0 2
78827: PUSH
78828: LD_VAR 0 1
78832: PUSH
78833: LD_INT 1
78835: DIV
78836: ST_TO_ADDR
// if number < 0 then
78837: LD_VAR 0 1
78841: PUSH
78842: LD_INT 0
78844: LESS
78845: IFFALSE 78855
// result := 0 ;
78847: LD_ADDR_VAR 0 2
78851: PUSH
78852: LD_INT 0
78854: ST_TO_ADDR
// end ;
78855: LD_VAR 0 2
78859: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
78860: LD_INT 0
78862: PPUSH
78863: PPUSH
78864: PPUSH
// if not buildings then
78865: LD_VAR 0 1
78869: NOT
78870: IFFALSE 78874
// exit ;
78872: GO 78989
// tmp := [ ] ;
78874: LD_ADDR_VAR 0 5
78878: PUSH
78879: EMPTY
78880: ST_TO_ADDR
// for b in buildings do
78881: LD_ADDR_VAR 0 4
78885: PUSH
78886: LD_VAR 0 1
78890: PUSH
78891: FOR_IN
78892: IFFALSE 78930
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
78894: LD_ADDR_VAR 0 5
78898: PUSH
78899: LD_VAR 0 5
78903: PPUSH
78904: LD_VAR 0 5
78908: PUSH
78909: LD_INT 1
78911: PLUS
78912: PPUSH
78913: LD_VAR 0 4
78917: PPUSH
78918: CALL_OW 266
78922: PPUSH
78923: CALL_OW 1
78927: ST_TO_ADDR
78928: GO 78891
78930: POP
78931: POP
// if not tmp then
78932: LD_VAR 0 5
78936: NOT
78937: IFFALSE 78941
// exit ;
78939: GO 78989
// if asc then
78941: LD_VAR 0 2
78945: IFFALSE 78969
// result := SortListByListAsc ( buildings , tmp ) else
78947: LD_ADDR_VAR 0 3
78951: PUSH
78952: LD_VAR 0 1
78956: PPUSH
78957: LD_VAR 0 5
78961: PPUSH
78962: CALL_OW 76
78966: ST_TO_ADDR
78967: GO 78989
// result := SortListByListDesc ( buildings , tmp ) ;
78969: LD_ADDR_VAR 0 3
78973: PUSH
78974: LD_VAR 0 1
78978: PPUSH
78979: LD_VAR 0 5
78983: PPUSH
78984: CALL_OW 77
78988: ST_TO_ADDR
// end ;
78989: LD_VAR 0 3
78993: RET
// export function SortByClass ( units , class ) ; var un ; begin
78994: LD_INT 0
78996: PPUSH
78997: PPUSH
// if not units or not class then
78998: LD_VAR 0 1
79002: NOT
79003: IFTRUE 79012
79005: PUSH
79006: LD_VAR 0 2
79010: NOT
79011: OR
79012: IFFALSE 79016
// exit ;
79014: GO 79111
// result := [ ] ;
79016: LD_ADDR_VAR 0 3
79020: PUSH
79021: EMPTY
79022: ST_TO_ADDR
// for un in units do
79023: LD_ADDR_VAR 0 4
79027: PUSH
79028: LD_VAR 0 1
79032: PUSH
79033: FOR_IN
79034: IFFALSE 79109
// if GetClass ( un ) = class then
79036: LD_VAR 0 4
79040: PPUSH
79041: CALL_OW 257
79045: PUSH
79046: LD_VAR 0 2
79050: EQUAL
79051: IFFALSE 79078
// result := Insert ( result , 1 , un ) else
79053: LD_ADDR_VAR 0 3
79057: PUSH
79058: LD_VAR 0 3
79062: PPUSH
79063: LD_INT 1
79065: PPUSH
79066: LD_VAR 0 4
79070: PPUSH
79071: CALL_OW 2
79075: ST_TO_ADDR
79076: GO 79107
// result := Replace ( result , result + 1 , un ) ;
79078: LD_ADDR_VAR 0 3
79082: PUSH
79083: LD_VAR 0 3
79087: PPUSH
79088: LD_VAR 0 3
79092: PUSH
79093: LD_INT 1
79095: PLUS
79096: PPUSH
79097: LD_VAR 0 4
79101: PPUSH
79102: CALL_OW 1
79106: ST_TO_ADDR
79107: GO 79033
79109: POP
79110: POP
// end ;
79111: LD_VAR 0 3
79115: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79116: LD_INT 0
79118: PPUSH
79119: PPUSH
79120: PPUSH
79121: PPUSH
79122: PPUSH
79123: PPUSH
79124: PPUSH
// result := [ ] ;
79125: LD_ADDR_VAR 0 4
79129: PUSH
79130: EMPTY
79131: ST_TO_ADDR
// if x - r < 0 then
79132: LD_VAR 0 1
79136: PUSH
79137: LD_VAR 0 3
79141: MINUS
79142: PUSH
79143: LD_INT 0
79145: LESS
79146: IFFALSE 79158
// min_x := 0 else
79148: LD_ADDR_VAR 0 8
79152: PUSH
79153: LD_INT 0
79155: ST_TO_ADDR
79156: GO 79174
// min_x := x - r ;
79158: LD_ADDR_VAR 0 8
79162: PUSH
79163: LD_VAR 0 1
79167: PUSH
79168: LD_VAR 0 3
79172: MINUS
79173: ST_TO_ADDR
// if y - r < 0 then
79174: LD_VAR 0 2
79178: PUSH
79179: LD_VAR 0 3
79183: MINUS
79184: PUSH
79185: LD_INT 0
79187: LESS
79188: IFFALSE 79200
// min_y := 0 else
79190: LD_ADDR_VAR 0 7
79194: PUSH
79195: LD_INT 0
79197: ST_TO_ADDR
79198: GO 79216
// min_y := y - r ;
79200: LD_ADDR_VAR 0 7
79204: PUSH
79205: LD_VAR 0 2
79209: PUSH
79210: LD_VAR 0 3
79214: MINUS
79215: ST_TO_ADDR
// max_x := x + r ;
79216: LD_ADDR_VAR 0 9
79220: PUSH
79221: LD_VAR 0 1
79225: PUSH
79226: LD_VAR 0 3
79230: PLUS
79231: ST_TO_ADDR
// max_y := y + r ;
79232: LD_ADDR_VAR 0 10
79236: PUSH
79237: LD_VAR 0 2
79241: PUSH
79242: LD_VAR 0 3
79246: PLUS
79247: ST_TO_ADDR
// for _x = min_x to max_x do
79248: LD_ADDR_VAR 0 5
79252: PUSH
79253: DOUBLE
79254: LD_VAR 0 8
79258: DEC
79259: ST_TO_ADDR
79260: LD_VAR 0 9
79264: PUSH
79265: FOR_TO
79266: IFFALSE 79367
// for _y = min_y to max_y do
79268: LD_ADDR_VAR 0 6
79272: PUSH
79273: DOUBLE
79274: LD_VAR 0 7
79278: DEC
79279: ST_TO_ADDR
79280: LD_VAR 0 10
79284: PUSH
79285: FOR_TO
79286: IFFALSE 79363
// begin if not ValidHex ( _x , _y ) then
79288: LD_VAR 0 5
79292: PPUSH
79293: LD_VAR 0 6
79297: PPUSH
79298: CALL_OW 488
79302: NOT
79303: IFFALSE 79307
// continue ;
79305: GO 79285
// if GetResourceTypeXY ( _x , _y ) then
79307: LD_VAR 0 5
79311: PPUSH
79312: LD_VAR 0 6
79316: PPUSH
79317: CALL_OW 283
79321: IFFALSE 79361
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79323: LD_ADDR_VAR 0 4
79327: PUSH
79328: LD_VAR 0 4
79332: PPUSH
79333: LD_VAR 0 4
79337: PUSH
79338: LD_INT 1
79340: PLUS
79341: PPUSH
79342: LD_VAR 0 5
79346: PUSH
79347: LD_VAR 0 6
79351: PUSH
79352: EMPTY
79353: LIST
79354: LIST
79355: PPUSH
79356: CALL_OW 1
79360: ST_TO_ADDR
// end ;
79361: GO 79285
79363: POP
79364: POP
79365: GO 79265
79367: POP
79368: POP
// end ;
79369: LD_VAR 0 4
79373: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79374: LD_INT 0
79376: PPUSH
79377: PPUSH
79378: PPUSH
79379: PPUSH
79380: PPUSH
79381: PPUSH
79382: PPUSH
79383: PPUSH
// if not units then
79384: LD_VAR 0 1
79388: NOT
79389: IFFALSE 79393
// exit ;
79391: GO 79925
// result := UnitFilter ( units , [ f_ok ] ) ;
79393: LD_ADDR_VAR 0 3
79397: PUSH
79398: LD_VAR 0 1
79402: PPUSH
79403: LD_INT 50
79405: PUSH
79406: EMPTY
79407: LIST
79408: PPUSH
79409: CALL_OW 72
79413: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79414: LD_ADDR_VAR 0 8
79418: PUSH
79419: LD_VAR 0 1
79423: PUSH
79424: LD_INT 1
79426: ARRAY
79427: PPUSH
79428: CALL_OW 255
79432: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79433: LD_ADDR_VAR 0 10
79437: PUSH
79438: LD_INT 29
79440: PUSH
79441: LD_INT 91
79443: PUSH
79444: LD_INT 49
79446: PUSH
79447: EMPTY
79448: LIST
79449: LIST
79450: LIST
79451: ST_TO_ADDR
// if not result then
79452: LD_VAR 0 3
79456: NOT
79457: IFFALSE 79461
// exit ;
79459: GO 79925
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79461: LD_ADDR_VAR 0 5
79465: PUSH
79466: LD_INT 81
79468: PUSH
79469: LD_VAR 0 8
79473: PUSH
79474: EMPTY
79475: LIST
79476: LIST
79477: PPUSH
79478: CALL_OW 69
79482: ST_TO_ADDR
// for i in result do
79483: LD_ADDR_VAR 0 4
79487: PUSH
79488: LD_VAR 0 3
79492: PUSH
79493: FOR_IN
79494: IFFALSE 79923
// begin tag := GetTag ( i ) + 1 ;
79496: LD_ADDR_VAR 0 9
79500: PUSH
79501: LD_VAR 0 4
79505: PPUSH
79506: CALL_OW 110
79510: PUSH
79511: LD_INT 1
79513: PLUS
79514: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
79515: LD_ADDR_VAR 0 7
79519: PUSH
79520: LD_VAR 0 4
79524: PPUSH
79525: CALL_OW 250
79529: PPUSH
79530: LD_VAR 0 4
79534: PPUSH
79535: CALL_OW 251
79539: PPUSH
79540: LD_INT 4
79542: PPUSH
79543: CALL 79116 0 3
79547: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
79548: LD_VAR 0 4
79552: PPUSH
79553: CALL_OW 247
79557: PUSH
79558: LD_INT 2
79560: EQUAL
79561: IFFALSE 79573
79563: PUSH
79564: LD_VAR 0 7
79568: PUSH
79569: LD_INT 2
79571: GREATER
79572: AND
79573: IFFALSE 79593
79575: PUSH
79576: LD_VAR 0 4
79580: PPUSH
79581: CALL_OW 264
79585: PUSH
79586: LD_VAR 0 10
79590: IN
79591: NOT
79592: AND
79593: IFFALSE 79632
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79595: LD_VAR 0 4
79599: PPUSH
79600: LD_VAR 0 7
79604: PUSH
79605: LD_INT 1
79607: ARRAY
79608: PUSH
79609: LD_INT 1
79611: ARRAY
79612: PPUSH
79613: LD_VAR 0 7
79617: PUSH
79618: LD_INT 1
79620: ARRAY
79621: PUSH
79622: LD_INT 2
79624: ARRAY
79625: PPUSH
79626: CALL_OW 116
79630: GO 79921
// if path > tag then
79632: LD_VAR 0 2
79636: PUSH
79637: LD_VAR 0 9
79641: GREATER
79642: IFFALSE 79850
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79644: LD_ADDR_VAR 0 6
79648: PUSH
79649: LD_VAR 0 5
79653: PPUSH
79654: LD_INT 91
79656: PUSH
79657: LD_VAR 0 4
79661: PUSH
79662: LD_INT 8
79664: PUSH
79665: EMPTY
79666: LIST
79667: LIST
79668: LIST
79669: PPUSH
79670: CALL_OW 72
79674: ST_TO_ADDR
// if nearEnemy then
79675: LD_VAR 0 6
79679: IFFALSE 79748
// begin if GetWeapon ( i ) = ru_time_lapser then
79681: LD_VAR 0 4
79685: PPUSH
79686: CALL_OW 264
79690: PUSH
79691: LD_INT 49
79693: EQUAL
79694: IFFALSE 79722
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79696: LD_VAR 0 4
79700: PPUSH
79701: LD_VAR 0 6
79705: PPUSH
79706: LD_VAR 0 4
79710: PPUSH
79711: CALL_OW 74
79715: PPUSH
79716: CALL_OW 112
79720: GO 79746
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79722: LD_VAR 0 4
79726: PPUSH
79727: LD_VAR 0 6
79731: PPUSH
79732: LD_VAR 0 4
79736: PPUSH
79737: CALL_OW 74
79741: PPUSH
79742: CALL 81006 0 2
// end else
79746: GO 79848
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79748: LD_VAR 0 4
79752: PPUSH
79753: LD_VAR 0 2
79757: PUSH
79758: LD_VAR 0 9
79762: ARRAY
79763: PUSH
79764: LD_INT 1
79766: ARRAY
79767: PPUSH
79768: LD_VAR 0 2
79772: PUSH
79773: LD_VAR 0 9
79777: ARRAY
79778: PUSH
79779: LD_INT 2
79781: ARRAY
79782: PPUSH
79783: CALL_OW 297
79787: PUSH
79788: LD_INT 6
79790: GREATER
79791: IFFALSE 79834
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79793: LD_VAR 0 4
79797: PPUSH
79798: LD_VAR 0 2
79802: PUSH
79803: LD_VAR 0 9
79807: ARRAY
79808: PUSH
79809: LD_INT 1
79811: ARRAY
79812: PPUSH
79813: LD_VAR 0 2
79817: PUSH
79818: LD_VAR 0 9
79822: ARRAY
79823: PUSH
79824: LD_INT 2
79826: ARRAY
79827: PPUSH
79828: CALL_OW 114
79832: GO 79848
// SetTag ( i , tag ) ;
79834: LD_VAR 0 4
79838: PPUSH
79839: LD_VAR 0 9
79843: PPUSH
79844: CALL_OW 109
// end else
79848: GO 79921
// if enemy then
79850: LD_VAR 0 5
79854: IFFALSE 79921
// begin if GetWeapon ( i ) = ru_time_lapser then
79856: LD_VAR 0 4
79860: PPUSH
79861: CALL_OW 264
79865: PUSH
79866: LD_INT 49
79868: EQUAL
79869: IFFALSE 79897
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79871: LD_VAR 0 4
79875: PPUSH
79876: LD_VAR 0 5
79880: PPUSH
79881: LD_VAR 0 4
79885: PPUSH
79886: CALL_OW 74
79890: PPUSH
79891: CALL_OW 112
79895: GO 79921
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79897: LD_VAR 0 4
79901: PPUSH
79902: LD_VAR 0 5
79906: PPUSH
79907: LD_VAR 0 4
79911: PPUSH
79912: CALL_OW 74
79916: PPUSH
79917: CALL 81006 0 2
// end ; end ;
79921: GO 79493
79923: POP
79924: POP
// end ;
79925: LD_VAR 0 3
79929: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79930: LD_INT 0
79932: PPUSH
79933: PPUSH
79934: PPUSH
// if not unit or IsInUnit ( unit ) then
79935: LD_VAR 0 1
79939: NOT
79940: IFTRUE 79953
79942: PUSH
79943: LD_VAR 0 1
79947: PPUSH
79948: CALL_OW 310
79952: OR
79953: IFFALSE 79957
// exit ;
79955: GO 80048
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79957: LD_ADDR_VAR 0 4
79961: PUSH
79962: LD_VAR 0 1
79966: PPUSH
79967: CALL_OW 250
79971: PPUSH
79972: LD_VAR 0 2
79976: PPUSH
79977: LD_INT 1
79979: PPUSH
79980: CALL_OW 272
79984: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79985: LD_ADDR_VAR 0 5
79989: PUSH
79990: LD_VAR 0 1
79994: PPUSH
79995: CALL_OW 251
79999: PPUSH
80000: LD_VAR 0 2
80004: PPUSH
80005: LD_INT 1
80007: PPUSH
80008: CALL_OW 273
80012: ST_TO_ADDR
// if ValidHex ( x , y ) then
80013: LD_VAR 0 4
80017: PPUSH
80018: LD_VAR 0 5
80022: PPUSH
80023: CALL_OW 488
80027: IFFALSE 80048
// ComTurnXY ( unit , x , y ) ;
80029: LD_VAR 0 1
80033: PPUSH
80034: LD_VAR 0 4
80038: PPUSH
80039: LD_VAR 0 5
80043: PPUSH
80044: CALL_OW 118
// end ;
80048: LD_VAR 0 3
80052: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80053: LD_INT 0
80055: PPUSH
80056: PPUSH
// result := false ;
80057: LD_ADDR_VAR 0 3
80061: PUSH
80062: LD_INT 0
80064: ST_TO_ADDR
// if not units then
80065: LD_VAR 0 2
80069: NOT
80070: IFFALSE 80074
// exit ;
80072: GO 80119
// for i in units do
80074: LD_ADDR_VAR 0 4
80078: PUSH
80079: LD_VAR 0 2
80083: PUSH
80084: FOR_IN
80085: IFFALSE 80117
// if See ( side , i ) then
80087: LD_VAR 0 1
80091: PPUSH
80092: LD_VAR 0 4
80096: PPUSH
80097: CALL_OW 292
80101: IFFALSE 80115
// begin result := true ;
80103: LD_ADDR_VAR 0 3
80107: PUSH
80108: LD_INT 1
80110: ST_TO_ADDR
// exit ;
80111: POP
80112: POP
80113: GO 80119
// end ;
80115: GO 80084
80117: POP
80118: POP
// end ;
80119: LD_VAR 0 3
80123: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80124: LD_INT 0
80126: PPUSH
80127: PPUSH
80128: PPUSH
80129: PPUSH
// if not unit or not points then
80130: LD_VAR 0 1
80134: NOT
80135: IFTRUE 80144
80137: PUSH
80138: LD_VAR 0 2
80142: NOT
80143: OR
80144: IFFALSE 80148
// exit ;
80146: GO 80238
// dist := 99999 ;
80148: LD_ADDR_VAR 0 5
80152: PUSH
80153: LD_INT 99999
80155: ST_TO_ADDR
// for i in points do
80156: LD_ADDR_VAR 0 4
80160: PUSH
80161: LD_VAR 0 2
80165: PUSH
80166: FOR_IN
80167: IFFALSE 80236
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80169: LD_ADDR_VAR 0 6
80173: PUSH
80174: LD_VAR 0 1
80178: PPUSH
80179: LD_VAR 0 4
80183: PUSH
80184: LD_INT 1
80186: ARRAY
80187: PPUSH
80188: LD_VAR 0 4
80192: PUSH
80193: LD_INT 2
80195: ARRAY
80196: PPUSH
80197: CALL_OW 297
80201: ST_TO_ADDR
// if tmpDist < dist then
80202: LD_VAR 0 6
80206: PUSH
80207: LD_VAR 0 5
80211: LESS
80212: IFFALSE 80234
// begin result := i ;
80214: LD_ADDR_VAR 0 3
80218: PUSH
80219: LD_VAR 0 4
80223: ST_TO_ADDR
// dist := tmpDist ;
80224: LD_ADDR_VAR 0 5
80228: PUSH
80229: LD_VAR 0 6
80233: ST_TO_ADDR
// end ; end ;
80234: GO 80166
80236: POP
80237: POP
// end ;
80238: LD_VAR 0 3
80242: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80243: LD_INT 0
80245: PPUSH
// uc_side := side ;
80246: LD_ADDR_OWVAR 20
80250: PUSH
80251: LD_VAR 0 1
80255: ST_TO_ADDR
// uc_nation := 3 ;
80256: LD_ADDR_OWVAR 21
80260: PUSH
80261: LD_INT 3
80263: ST_TO_ADDR
// vc_chassis := 25 ;
80264: LD_ADDR_OWVAR 37
80268: PUSH
80269: LD_INT 25
80271: ST_TO_ADDR
// vc_engine := engine_siberite ;
80272: LD_ADDR_OWVAR 39
80276: PUSH
80277: LD_INT 3
80279: ST_TO_ADDR
// vc_control := control_computer ;
80280: LD_ADDR_OWVAR 38
80284: PUSH
80285: LD_INT 3
80287: ST_TO_ADDR
// vc_weapon := 59 ;
80288: LD_ADDR_OWVAR 40
80292: PUSH
80293: LD_INT 59
80295: ST_TO_ADDR
// result := CreateVehicle ;
80296: LD_ADDR_VAR 0 5
80300: PUSH
80301: CALL_OW 45
80305: ST_TO_ADDR
// SetDir ( result , d ) ;
80306: LD_VAR 0 5
80310: PPUSH
80311: LD_VAR 0 4
80315: PPUSH
80316: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80320: LD_VAR 0 5
80324: PPUSH
80325: LD_VAR 0 2
80329: PPUSH
80330: LD_VAR 0 3
80334: PPUSH
80335: LD_INT 0
80337: PPUSH
80338: CALL_OW 48
// end ;
80342: LD_VAR 0 5
80346: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80347: LD_INT 0
80349: PPUSH
80350: PPUSH
80351: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80352: LD_ADDR_VAR 0 2
80356: PUSH
80357: LD_INT 0
80359: PUSH
80360: LD_INT 0
80362: PUSH
80363: LD_INT 0
80365: PUSH
80366: LD_INT 0
80368: PUSH
80369: EMPTY
80370: LIST
80371: LIST
80372: LIST
80373: LIST
80374: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80375: LD_VAR 0 1
80379: NOT
80380: IFTRUE 80413
80382: PUSH
80383: LD_VAR 0 1
80387: PPUSH
80388: CALL_OW 264
80392: PUSH
80393: LD_INT 12
80395: PUSH
80396: LD_INT 51
80398: PUSH
80399: LD_INT 32
80401: PUSH
80402: LD_INT 89
80404: PUSH
80405: EMPTY
80406: LIST
80407: LIST
80408: LIST
80409: LIST
80410: IN
80411: NOT
80412: OR
80413: IFFALSE 80417
// exit ;
80415: GO 80515
// for i := 1 to 3 do
80417: LD_ADDR_VAR 0 3
80421: PUSH
80422: DOUBLE
80423: LD_INT 1
80425: DEC
80426: ST_TO_ADDR
80427: LD_INT 3
80429: PUSH
80430: FOR_TO
80431: IFFALSE 80513
// begin tmp := GetCargo ( cargo , i ) ;
80433: LD_ADDR_VAR 0 4
80437: PUSH
80438: LD_VAR 0 1
80442: PPUSH
80443: LD_VAR 0 3
80447: PPUSH
80448: CALL_OW 289
80452: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80453: LD_ADDR_VAR 0 2
80457: PUSH
80458: LD_VAR 0 2
80462: PPUSH
80463: LD_VAR 0 3
80467: PPUSH
80468: LD_VAR 0 4
80472: PPUSH
80473: CALL_OW 1
80477: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80478: LD_ADDR_VAR 0 2
80482: PUSH
80483: LD_VAR 0 2
80487: PPUSH
80488: LD_INT 4
80490: PPUSH
80491: LD_VAR 0 2
80495: PUSH
80496: LD_INT 4
80498: ARRAY
80499: PUSH
80500: LD_VAR 0 4
80504: PLUS
80505: PPUSH
80506: CALL_OW 1
80510: ST_TO_ADDR
// end ;
80511: GO 80430
80513: POP
80514: POP
// end ;
80515: LD_VAR 0 2
80519: RET
// export function Length ( array ) ; begin
80520: LD_INT 0
80522: PPUSH
// result := array + 0 ;
80523: LD_ADDR_VAR 0 2
80527: PUSH
80528: LD_VAR 0 1
80532: PUSH
80533: LD_INT 0
80535: PLUS
80536: ST_TO_ADDR
// end ;
80537: LD_VAR 0 2
80541: RET
// export function PrepareArray ( array ) ; begin
80542: LD_INT 0
80544: PPUSH
// result := array diff 0 ;
80545: LD_ADDR_VAR 0 2
80549: PUSH
80550: LD_VAR 0 1
80554: PUSH
80555: LD_INT 0
80557: DIFF
80558: ST_TO_ADDR
// if not result [ 1 ] then
80559: LD_VAR 0 2
80563: PUSH
80564: LD_INT 1
80566: ARRAY
80567: NOT
80568: IFFALSE 80588
// result := Delete ( result , 1 ) ;
80570: LD_ADDR_VAR 0 2
80574: PUSH
80575: LD_VAR 0 2
80579: PPUSH
80580: LD_INT 1
80582: PPUSH
80583: CALL_OW 3
80587: ST_TO_ADDR
// end ;
80588: LD_VAR 0 2
80592: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80593: LD_INT 0
80595: PPUSH
80596: PPUSH
80597: PPUSH
80598: PPUSH
// sibRocketRange := 25 ;
80599: LD_ADDR_VAR 0 6
80603: PUSH
80604: LD_INT 25
80606: ST_TO_ADDR
// result := false ;
80607: LD_ADDR_VAR 0 4
80611: PUSH
80612: LD_INT 0
80614: ST_TO_ADDR
// for i := 0 to 5 do
80615: LD_ADDR_VAR 0 5
80619: PUSH
80620: DOUBLE
80621: LD_INT 0
80623: DEC
80624: ST_TO_ADDR
80625: LD_INT 5
80627: PUSH
80628: FOR_TO
80629: IFFALSE 80696
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80631: LD_VAR 0 1
80635: PPUSH
80636: LD_VAR 0 5
80640: PPUSH
80641: LD_VAR 0 6
80645: PPUSH
80646: CALL_OW 272
80650: PPUSH
80651: LD_VAR 0 2
80655: PPUSH
80656: LD_VAR 0 5
80660: PPUSH
80661: LD_VAR 0 6
80665: PPUSH
80666: CALL_OW 273
80670: PPUSH
80671: LD_VAR 0 3
80675: PPUSH
80676: CALL_OW 309
80680: IFFALSE 80694
// begin result := true ;
80682: LD_ADDR_VAR 0 4
80686: PUSH
80687: LD_INT 1
80689: ST_TO_ADDR
// exit ;
80690: POP
80691: POP
80692: GO 80698
// end ;
80694: GO 80628
80696: POP
80697: POP
// end ;
80698: LD_VAR 0 4
80702: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
80703: LD_INT 0
80705: PPUSH
80706: PPUSH
80707: PPUSH
// if btype = b_depot then
80708: LD_VAR 0 2
80712: PUSH
80713: LD_INT 0
80715: EQUAL
80716: IFFALSE 80728
// begin result := true ;
80718: LD_ADDR_VAR 0 3
80722: PUSH
80723: LD_INT 1
80725: ST_TO_ADDR
// exit ;
80726: GO 80848
// end ; pom := GetBase ( depot ) ;
80728: LD_ADDR_VAR 0 4
80732: PUSH
80733: LD_VAR 0 1
80737: PPUSH
80738: CALL_OW 274
80742: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
80743: LD_ADDR_VAR 0 5
80747: PUSH
80748: LD_VAR 0 2
80752: PPUSH
80753: LD_VAR 0 1
80757: PPUSH
80758: CALL_OW 248
80762: PPUSH
80763: CALL_OW 450
80767: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
80768: LD_ADDR_VAR 0 3
80772: PUSH
80773: LD_VAR 0 4
80777: PPUSH
80778: LD_INT 1
80780: PPUSH
80781: CALL_OW 275
80785: PUSH
80786: LD_VAR 0 5
80790: PUSH
80791: LD_INT 1
80793: ARRAY
80794: GREATEREQUAL
80795: IFFALSE 80821
80797: PUSH
80798: LD_VAR 0 4
80802: PPUSH
80803: LD_INT 2
80805: PPUSH
80806: CALL_OW 275
80810: PUSH
80811: LD_VAR 0 5
80815: PUSH
80816: LD_INT 2
80818: ARRAY
80819: GREATEREQUAL
80820: AND
80821: IFFALSE 80847
80823: PUSH
80824: LD_VAR 0 4
80828: PPUSH
80829: LD_INT 3
80831: PPUSH
80832: CALL_OW 275
80836: PUSH
80837: LD_VAR 0 5
80841: PUSH
80842: LD_INT 3
80844: ARRAY
80845: GREATEREQUAL
80846: AND
80847: ST_TO_ADDR
// end ;
80848: LD_VAR 0 3
80852: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80853: LD_INT 0
80855: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80856: LD_VAR 0 1
80860: PPUSH
80861: LD_VAR 0 2
80865: PPUSH
80866: LD_INT 0
80868: PPUSH
80869: LD_INT 0
80871: PPUSH
80872: LD_INT 1
80874: PPUSH
80875: LD_INT 0
80877: PPUSH
80878: CALL_OW 587
// end ;
80882: LD_VAR 0 3
80886: RET
// export function CenterOnNow ( unit ) ; begin
80887: LD_INT 0
80889: PPUSH
// result := IsInUnit ( unit ) ;
80890: LD_ADDR_VAR 0 2
80894: PUSH
80895: LD_VAR 0 1
80899: PPUSH
80900: CALL_OW 310
80904: ST_TO_ADDR
// if not result then
80905: LD_VAR 0 2
80909: NOT
80910: IFFALSE 80922
// result := unit ;
80912: LD_ADDR_VAR 0 2
80916: PUSH
80917: LD_VAR 0 1
80921: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
80922: LD_VAR 0 1
80926: PPUSH
80927: CALL_OW 87
// end ;
80931: LD_VAR 0 2
80935: RET
// export function ComMoveHex ( unit , hex ) ; begin
80936: LD_INT 0
80938: PPUSH
// if not hex then
80939: LD_VAR 0 2
80943: NOT
80944: IFFALSE 80948
// exit ;
80946: GO 81001
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
80948: LD_VAR 0 2
80952: PUSH
80953: LD_INT 1
80955: ARRAY
80956: PPUSH
80957: LD_VAR 0 2
80961: PUSH
80962: LD_INT 2
80964: ARRAY
80965: PPUSH
80966: CALL_OW 428
80970: IFFALSE 80974
// exit ;
80972: GO 81001
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
80974: LD_VAR 0 1
80978: PPUSH
80979: LD_VAR 0 2
80983: PUSH
80984: LD_INT 1
80986: ARRAY
80987: PPUSH
80988: LD_VAR 0 2
80992: PUSH
80993: LD_INT 2
80995: ARRAY
80996: PPUSH
80997: CALL_OW 111
// end ;
81001: LD_VAR 0 3
81005: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
81006: LD_INT 0
81008: PPUSH
81009: PPUSH
81010: PPUSH
// if not unit or not enemy then
81011: LD_VAR 0 1
81015: NOT
81016: IFTRUE 81025
81018: PUSH
81019: LD_VAR 0 2
81023: NOT
81024: OR
81025: IFFALSE 81029
// exit ;
81027: GO 81155
// x := GetX ( enemy ) ;
81029: LD_ADDR_VAR 0 4
81033: PUSH
81034: LD_VAR 0 2
81038: PPUSH
81039: CALL_OW 250
81043: ST_TO_ADDR
// y := GetY ( enemy ) ;
81044: LD_ADDR_VAR 0 5
81048: PUSH
81049: LD_VAR 0 2
81053: PPUSH
81054: CALL_OW 251
81058: ST_TO_ADDR
// if ValidHex ( x , y ) then
81059: LD_VAR 0 4
81063: PPUSH
81064: LD_VAR 0 5
81068: PPUSH
81069: CALL_OW 488
81073: IFFALSE 81155
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
81075: LD_VAR 0 2
81079: PPUSH
81080: CALL_OW 247
81084: PUSH
81085: LD_INT 3
81087: PUSH
81088: LD_INT 2
81090: PUSH
81091: EMPTY
81092: LIST
81093: LIST
81094: IN
81095: IFTRUE 81118
81097: PUSH
81098: LD_VAR 0 1
81102: PPUSH
81103: CALL_OW 255
81107: PPUSH
81108: LD_VAR 0 2
81112: PPUSH
81113: CALL_OW 292
81117: OR
81118: IFFALSE 81136
// ComAttackUnit ( unit , enemy ) else
81120: LD_VAR 0 1
81124: PPUSH
81125: LD_VAR 0 2
81129: PPUSH
81130: CALL_OW 115
81134: GO 81155
// ComAgressiveMove ( unit , x , y ) ;
81136: LD_VAR 0 1
81140: PPUSH
81141: LD_VAR 0 4
81145: PPUSH
81146: LD_VAR 0 5
81150: PPUSH
81151: CALL_OW 114
// end ;
81155: LD_VAR 0 3
81159: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
81160: LD_INT 0
81162: PPUSH
81163: PPUSH
81164: PPUSH
// list := AreaToList ( area , 0 ) ;
81165: LD_ADDR_VAR 0 5
81169: PUSH
81170: LD_VAR 0 1
81174: PPUSH
81175: LD_INT 0
81177: PPUSH
81178: CALL_OW 517
81182: ST_TO_ADDR
// if not list then
81183: LD_VAR 0 5
81187: NOT
81188: IFFALSE 81192
// exit ;
81190: GO 81322
// if all then
81192: LD_VAR 0 2
81196: IFFALSE 81284
// begin for i := 1 to list [ 1 ] do
81198: LD_ADDR_VAR 0 4
81202: PUSH
81203: DOUBLE
81204: LD_INT 1
81206: DEC
81207: ST_TO_ADDR
81208: LD_VAR 0 5
81212: PUSH
81213: LD_INT 1
81215: ARRAY
81216: PUSH
81217: FOR_TO
81218: IFFALSE 81280
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
81220: LD_ADDR_VAR 0 3
81224: PUSH
81225: LD_VAR 0 3
81229: PPUSH
81230: LD_VAR 0 3
81234: PUSH
81235: LD_INT 1
81237: PLUS
81238: PPUSH
81239: LD_VAR 0 5
81243: PUSH
81244: LD_INT 1
81246: ARRAY
81247: PUSH
81248: LD_VAR 0 4
81252: ARRAY
81253: PUSH
81254: LD_VAR 0 5
81258: PUSH
81259: LD_INT 2
81261: ARRAY
81262: PUSH
81263: LD_VAR 0 4
81267: ARRAY
81268: PUSH
81269: EMPTY
81270: LIST
81271: LIST
81272: PPUSH
81273: CALL_OW 1
81277: ST_TO_ADDR
81278: GO 81217
81280: POP
81281: POP
// exit ;
81282: GO 81322
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
81284: LD_ADDR_VAR 0 3
81288: PUSH
81289: LD_VAR 0 5
81293: PUSH
81294: LD_INT 1
81296: ARRAY
81297: PUSH
81298: LD_INT 1
81300: ARRAY
81301: PUSH
81302: LD_VAR 0 5
81306: PUSH
81307: LD_INT 2
81309: ARRAY
81310: PUSH
81311: LD_INT 1
81313: ARRAY
81314: PUSH
81315: EMPTY
81316: LIST
81317: LIST
81318: PUSH
81319: EMPTY
81320: LIST
81321: ST_TO_ADDR
// end ;
81322: LD_VAR 0 3
81326: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
81327: LD_INT 0
81329: PPUSH
81330: PPUSH
// list := AreaToList ( area , 0 ) ;
81331: LD_ADDR_VAR 0 4
81335: PUSH
81336: LD_VAR 0 1
81340: PPUSH
81341: LD_INT 0
81343: PPUSH
81344: CALL_OW 517
81348: ST_TO_ADDR
// if not list then
81349: LD_VAR 0 4
81353: NOT
81354: IFFALSE 81358
// exit ;
81356: GO 81399
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
81358: LD_ADDR_VAR 0 3
81362: PUSH
81363: LD_VAR 0 4
81367: PUSH
81368: LD_INT 1
81370: ARRAY
81371: PUSH
81372: LD_INT 1
81374: ARRAY
81375: PUSH
81376: LD_VAR 0 4
81380: PUSH
81381: LD_INT 2
81383: ARRAY
81384: PUSH
81385: LD_INT 1
81387: ARRAY
81388: PUSH
81389: LD_VAR 0 2
81393: PUSH
81394: EMPTY
81395: LIST
81396: LIST
81397: LIST
81398: ST_TO_ADDR
// end ;
81399: LD_VAR 0 3
81403: RET
// export function First ( array ) ; begin
81404: LD_INT 0
81406: PPUSH
// if not array then
81407: LD_VAR 0 1
81411: NOT
81412: IFFALSE 81416
// exit ;
81414: GO 81430
// result := array [ 1 ] ;
81416: LD_ADDR_VAR 0 2
81420: PUSH
81421: LD_VAR 0 1
81425: PUSH
81426: LD_INT 1
81428: ARRAY
81429: ST_TO_ADDR
// end ;
81430: LD_VAR 0 2
81434: RET
// export function Last ( array ) ; begin
81435: LD_INT 0
81437: PPUSH
// if not array then
81438: LD_VAR 0 1
81442: NOT
81443: IFFALSE 81447
// exit ;
81445: GO 81463
// result := array [ array ] ;
81447: LD_ADDR_VAR 0 2
81451: PUSH
81452: LD_VAR 0 1
81456: PUSH
81457: LD_VAR 0 1
81461: ARRAY
81462: ST_TO_ADDR
// end ;
81463: LD_VAR 0 2
81467: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
81468: LD_INT 0
81470: PPUSH
81471: PPUSH
// result := [ ] ;
81472: LD_ADDR_VAR 0 5
81476: PUSH
81477: EMPTY
81478: ST_TO_ADDR
// if not array then
81479: LD_VAR 0 1
81483: NOT
81484: IFFALSE 81488
// exit ;
81486: GO 81600
// for i := 1 to array do
81488: LD_ADDR_VAR 0 6
81492: PUSH
81493: DOUBLE
81494: LD_INT 1
81496: DEC
81497: ST_TO_ADDR
81498: LD_VAR 0 1
81502: PUSH
81503: FOR_TO
81504: IFFALSE 81598
// if array [ i ] [ index ] = value then
81506: LD_VAR 0 1
81510: PUSH
81511: LD_VAR 0 6
81515: ARRAY
81516: PUSH
81517: LD_VAR 0 2
81521: ARRAY
81522: PUSH
81523: LD_VAR 0 3
81527: EQUAL
81528: IFFALSE 81596
// begin if indexColumn then
81530: LD_VAR 0 4
81534: IFFALSE 81570
// result := Join ( result , array [ i ] [ indexColumn ] ) else
81536: LD_ADDR_VAR 0 5
81540: PUSH
81541: LD_VAR 0 5
81545: PPUSH
81546: LD_VAR 0 1
81550: PUSH
81551: LD_VAR 0 6
81555: ARRAY
81556: PUSH
81557: LD_VAR 0 4
81561: ARRAY
81562: PPUSH
81563: CALL 76608 0 2
81567: ST_TO_ADDR
81568: GO 81596
// result := Join ( result , array [ i ] ) ;
81570: LD_ADDR_VAR 0 5
81574: PUSH
81575: LD_VAR 0 5
81579: PPUSH
81580: LD_VAR 0 1
81584: PUSH
81585: LD_VAR 0 6
81589: ARRAY
81590: PPUSH
81591: CALL 76608 0 2
81595: ST_TO_ADDR
// end ;
81596: GO 81503
81598: POP
81599: POP
// end ;
81600: LD_VAR 0 5
81604: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
81605: LD_INT 0
81607: PPUSH
// if not vehicles or not parkingPoint then
81608: LD_VAR 0 1
81612: NOT
81613: IFTRUE 81622
81615: PUSH
81616: LD_VAR 0 2
81620: NOT
81621: OR
81622: IFFALSE 81626
// exit ;
81624: GO 81724
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
81626: LD_ADDR_VAR 0 1
81630: PUSH
81631: LD_VAR 0 1
81635: PPUSH
81636: LD_INT 50
81638: PUSH
81639: EMPTY
81640: LIST
81641: PUSH
81642: LD_INT 3
81644: PUSH
81645: LD_INT 92
81647: PUSH
81648: LD_VAR 0 2
81652: PUSH
81653: LD_INT 1
81655: ARRAY
81656: PUSH
81657: LD_VAR 0 2
81661: PUSH
81662: LD_INT 2
81664: ARRAY
81665: PUSH
81666: LD_INT 8
81668: PUSH
81669: EMPTY
81670: LIST
81671: LIST
81672: LIST
81673: LIST
81674: PUSH
81675: EMPTY
81676: LIST
81677: LIST
81678: PUSH
81679: EMPTY
81680: LIST
81681: LIST
81682: PPUSH
81683: CALL_OW 72
81687: ST_TO_ADDR
// if not vehicles then
81688: LD_VAR 0 1
81692: NOT
81693: IFFALSE 81697
// exit ;
81695: GO 81724
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
81697: LD_VAR 0 1
81701: PPUSH
81702: LD_VAR 0 2
81706: PUSH
81707: LD_INT 1
81709: ARRAY
81710: PPUSH
81711: LD_VAR 0 2
81715: PUSH
81716: LD_INT 2
81718: ARRAY
81719: PPUSH
81720: CALL_OW 111
// end ;
81724: LD_VAR 0 3
81728: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
81729: LD_INT 0
81731: PPUSH
81732: PPUSH
81733: PPUSH
// if not side or not area then
81734: LD_VAR 0 1
81738: NOT
81739: IFTRUE 81748
81741: PUSH
81742: LD_VAR 0 2
81746: NOT
81747: OR
81748: IFFALSE 81752
// exit ;
81750: GO 81871
// tmp := AreaToList ( area , 0 ) ;
81752: LD_ADDR_VAR 0 5
81756: PUSH
81757: LD_VAR 0 2
81761: PPUSH
81762: LD_INT 0
81764: PPUSH
81765: CALL_OW 517
81769: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
81770: LD_ADDR_VAR 0 4
81774: PUSH
81775: DOUBLE
81776: LD_INT 1
81778: DEC
81779: ST_TO_ADDR
81780: LD_VAR 0 5
81784: PUSH
81785: LD_INT 1
81787: ARRAY
81788: PUSH
81789: FOR_TO
81790: IFFALSE 81869
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
81792: LD_VAR 0 5
81796: PUSH
81797: LD_INT 1
81799: ARRAY
81800: PUSH
81801: LD_VAR 0 4
81805: ARRAY
81806: PPUSH
81807: LD_VAR 0 5
81811: PUSH
81812: LD_INT 2
81814: ARRAY
81815: PUSH
81816: LD_VAR 0 4
81820: ARRAY
81821: PPUSH
81822: CALL_OW 351
81826: IFFALSE 81867
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
81828: LD_VAR 0 5
81832: PUSH
81833: LD_INT 1
81835: ARRAY
81836: PUSH
81837: LD_VAR 0 4
81841: ARRAY
81842: PPUSH
81843: LD_VAR 0 5
81847: PUSH
81848: LD_INT 2
81850: ARRAY
81851: PUSH
81852: LD_VAR 0 4
81856: ARRAY
81857: PPUSH
81858: LD_VAR 0 1
81862: PPUSH
81863: CALL_OW 244
// end ;
81867: GO 81789
81869: POP
81870: POP
// end ;
81871: LD_VAR 0 3
81875: RET
// export function UniqueArray ( array ) ; var i ; begin
81876: LD_INT 0
81878: PPUSH
81879: PPUSH
// result := [ ] ;
81880: LD_ADDR_VAR 0 2
81884: PUSH
81885: EMPTY
81886: ST_TO_ADDR
// if not array then
81887: LD_VAR 0 1
81891: NOT
81892: IFFALSE 81896
// exit ;
81894: GO 81957
// for i := 1 to array do
81896: LD_ADDR_VAR 0 3
81900: PUSH
81901: DOUBLE
81902: LD_INT 1
81904: DEC
81905: ST_TO_ADDR
81906: LD_VAR 0 1
81910: PUSH
81911: FOR_TO
81912: IFFALSE 81955
// if not array [ i ] in result then
81914: LD_VAR 0 1
81918: PUSH
81919: LD_VAR 0 3
81923: ARRAY
81924: PUSH
81925: LD_VAR 0 2
81929: IN
81930: NOT
81931: IFFALSE 81953
// result := Join ( result , i ) ;
81933: LD_ADDR_VAR 0 2
81937: PUSH
81938: LD_VAR 0 2
81942: PPUSH
81943: LD_VAR 0 3
81947: PPUSH
81948: CALL 76608 0 2
81952: ST_TO_ADDR
81953: GO 81911
81955: POP
81956: POP
// end ; end_of_file
81957: LD_VAR 0 2
81961: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81962: LD_VAR 0 1
81966: PUSH
81967: LD_INT 200
81969: DOUBLE
81970: GREATEREQUAL
81971: IFFALSE 81979
81973: LD_INT 299
81975: DOUBLE
81976: LESSEQUAL
81977: IFTRUE 81981
81979: GO 82013
81981: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81982: LD_VAR 0 1
81986: PPUSH
81987: LD_VAR 0 2
81991: PPUSH
81992: LD_VAR 0 3
81996: PPUSH
81997: LD_VAR 0 4
82001: PPUSH
82002: LD_VAR 0 5
82006: PPUSH
82007: CALL 32684 0 5
82011: GO 82090
82013: LD_INT 300
82015: DOUBLE
82016: GREATEREQUAL
82017: IFFALSE 82025
82019: LD_INT 399
82021: DOUBLE
82022: LESSEQUAL
82023: IFTRUE 82027
82025: GO 82089
82027: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82028: LD_VAR 0 1
82032: PPUSH
82033: LD_VAR 0 2
82037: PPUSH
82038: LD_VAR 0 3
82042: PPUSH
82043: LD_VAR 0 4
82047: PPUSH
82048: LD_VAR 0 5
82052: PPUSH
82053: LD_VAR 0 6
82057: PPUSH
82058: LD_VAR 0 7
82062: PPUSH
82063: LD_VAR 0 8
82067: PPUSH
82068: LD_VAR 0 9
82072: PPUSH
82073: LD_VAR 0 10
82077: PPUSH
82078: LD_VAR 0 11
82082: PPUSH
82083: CALL 28487 0 11
82087: GO 82090
82089: POP
// end ;
82090: PPOPN 11
82092: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82093: LD_VAR 0 1
82097: PPUSH
82098: LD_VAR 0 2
82102: PPUSH
82103: LD_VAR 0 3
82107: PPUSH
82108: LD_VAR 0 4
82112: PPUSH
82113: LD_VAR 0 5
82117: PPUSH
82118: CALL 31984 0 5
// end ; end_of_file
82122: PPOPN 5
82124: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
82125: LD_VAR 0 1
82129: PPUSH
82130: LD_VAR 0 2
82134: PPUSH
82135: LD_VAR 0 3
82139: PPUSH
82140: LD_VAR 0 4
82144: PPUSH
82145: LD_VAR 0 5
82149: PPUSH
82150: LD_VAR 0 6
82154: PPUSH
82155: CALL 16027 0 6
// end ;
82159: PPOPN 6
82161: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
82162: LD_INT 0
82164: PPUSH
// begin if not units then
82165: LD_VAR 0 1
82169: NOT
82170: IFFALSE 82174
// exit ;
82172: GO 82208
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
82174: LD_VAR 0 1
82178: PPUSH
82179: LD_VAR 0 2
82183: PPUSH
82184: LD_VAR 0 3
82188: PPUSH
82189: LD_VAR 0 4
82193: PPUSH
82194: LD_VAR 0 5
82198: PPUSH
82199: LD_VAR 0 6
82203: PPUSH
82204: CALL 38381 0 6
// end ;
82208: PPOPN 7
82210: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
82211: CALL 15907 0 0
// end ;
82215: PPOPN 1
82217: END
