// starting begin isTest := false ;
   0: LD_ADDR_EXP 1
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// mission_name := TwoFronts ;
   8: LD_ADDR_OWVAR 68
  12: PUSH
  13: LD_STRING TwoFronts
  15: ST_TO_ADDR
// mission_number := 6 ;
  16: LD_ADDR_OWVAR 70
  20: PUSH
  21: LD_INT 6
  23: ST_TO_ADDR
// RandomizeAll ;
  24: CALL_OW 11
// ResetFog ;
  28: CALL_OW 335
// FogOff ( isTest ) ;
  32: LD_EXP 1
  36: PPUSH
  37: CALL_OW 344
// InitGlobalVar ;
  41: CALL 58 0 0
// InitAction ;
  45: CALL 6518 0 0
// PrepareAmericans ;
  49: CALL 146 0 0
// Action ;
  53: CALL 6776 0 0
// end ;
  57: END
// export isTest , callUsed ; export Jakes , Sylvia ; export dialogTrans , playerLoss ; export call , alfaNorthTriggered , alfaSouthTriggered , attackWave1 , attackWave2 ; export lastRadioMsg , lastRadioAttackMsg ; function InitGlobalVar ; begin
  58: LD_INT 0
  60: PPUSH
// dialogTrans := true ;
  61: LD_ADDR_EXP 5
  65: PUSH
  66: LD_INT 1
  68: ST_TO_ADDR
// call := true ;
  69: LD_ADDR_EXP 7
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// alfaNorthTriggered := false ;
  77: LD_ADDR_EXP 8
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// alfaSouthTriggered := false ;
  85: LD_ADDR_EXP 9
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// playerLoss := 0 ;
  93: LD_ADDR_EXP 6
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// callUsed := false ;
 101: LD_ADDR_EXP 2
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// attackWave1 := 0 ;
 109: LD_ADDR_EXP 10
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// attackWave2 := 0 ;
 117: LD_ADDR_EXP 11
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// lastRadioMsg := 0 0$00 ;
 125: LD_ADDR_EXP 12
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// lastRadioAttackMsg := 0 0$00 ;
 133: LD_ADDR_EXP 13
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// end ; end_of_file
 141: LD_VAR 0 1
 145: RET
// export usForces1 , usForces2 , usVehicles1 , usVehicles2 , usTechs1 , usTechs2 , usConstructList1 , usConstructList2 , usBuildingsToBuild1 , usBuildingsToBuild2 , usAttackVehicles1 , usAttackVehicles2 , usCargo1 , usCargo2 ; export function PrepareAmericans ; begin
 146: LD_INT 0
 148: PPUSH
// usForces1 := PrepareSquad ( 1 , 1 , americanBaseNorthArea , jakes , [ 4 , 6 , 8 ] [ Difficulty ] , [ 21 , 22 , 24 ] [ Difficulty ] ) ;
 149: LD_ADDR_EXP 14
 153: PUSH
 154: LD_INT 1
 156: PPUSH
 157: LD_INT 1
 159: PPUSH
 160: LD_INT 10
 162: PPUSH
 163: LD_STRING jakes
 165: PPUSH
 166: LD_INT 4
 168: PUSH
 169: LD_INT 6
 171: PUSH
 172: LD_INT 8
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_OWVAR 67
 184: ARRAY
 185: PPUSH
 186: LD_INT 21
 188: PUSH
 189: LD_INT 22
 191: PUSH
 192: LD_INT 24
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: PUSH
 200: LD_OWVAR 67
 204: ARRAY
 205: PPUSH
 206: CALL 521 0 6
 210: ST_TO_ADDR
// usForces2 := PrepareSquad ( 4 , 1 , americanBaseSouthArea , sylvia , [ 4 , 6 , 8 ] [ Difficulty ] , [ 21 , 22 , 24 ] [ Difficulty ] ) ;
 211: LD_ADDR_EXP 15
 215: PUSH
 216: LD_INT 4
 218: PPUSH
 219: LD_INT 1
 221: PPUSH
 222: LD_INT 11
 224: PPUSH
 225: LD_STRING sylvia
 227: PPUSH
 228: LD_INT 4
 230: PUSH
 231: LD_INT 6
 233: PUSH
 234: LD_INT 8
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: LIST
 241: PUSH
 242: LD_OWVAR 67
 246: ARRAY
 247: PPUSH
 248: LD_INT 21
 250: PUSH
 251: LD_INT 22
 253: PUSH
 254: LD_INT 24
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: LIST
 261: PUSH
 262: LD_OWVAR 67
 266: ARRAY
 267: PPUSH
 268: CALL 521 0 6
 272: ST_TO_ADDR
// usVehicles1 := [ ] ;
 273: LD_ADDR_EXP 16
 277: PUSH
 278: EMPTY
 279: ST_TO_ADDR
// usTechs1 := GetTechNation ( 1 , nation_american , state_enabled ) ;
 280: LD_ADDR_EXP 18
 284: PUSH
 285: LD_INT 1
 287: PPUSH
 288: LD_INT 1
 290: PPUSH
 291: LD_INT 1
 293: PPUSH
 294: CALL 38277 0 3
 298: ST_TO_ADDR
// usConstructList1 := [ ] ;
 299: LD_ADDR_EXP 20
 303: PUSH
 304: EMPTY
 305: ST_TO_ADDR
// usAttackVehicles1 := [ ] ;
 306: LD_ADDR_EXP 24
 310: PUSH
 311: EMPTY
 312: ST_TO_ADDR
// usVehicles2 := [ ] ;
 313: LD_ADDR_EXP 17
 317: PUSH
 318: EMPTY
 319: ST_TO_ADDR
// usTechs2 := GetTechNation ( 4 , nation_american , state_enabled ) ;
 320: LD_ADDR_EXP 19
 324: PUSH
 325: LD_INT 4
 327: PPUSH
 328: LD_INT 1
 330: PPUSH
 331: LD_INT 1
 333: PPUSH
 334: CALL 38277 0 3
 338: ST_TO_ADDR
// usConstructList2 := [ ] ;
 339: LD_ADDR_EXP 21
 343: PUSH
 344: EMPTY
 345: ST_TO_ADDR
// usAttackVehicles2 := [ ] ;
 346: LD_ADDR_EXP 25
 350: PUSH
 351: EMPTY
 352: ST_TO_ADDR
// if Difficulty > 1 then
 353: LD_OWVAR 67
 357: PUSH
 358: LD_INT 1
 360: GREATER
 361: IFFALSE 376
// SetTech ( tech_comp2 , 8 , state_researched ) ;
 363: LD_INT 58
 365: PPUSH
 366: LD_INT 8
 368: PPUSH
 369: LD_INT 2
 371: PPUSH
 372: CALL_OW 322
// if Difficulty > 2 then
 376: LD_OWVAR 67
 380: PUSH
 381: LD_INT 2
 383: GREATER
 384: IFFALSE 399
// SetTech ( tech_comp3 , 8 , state_researched ) ;
 386: LD_INT 59
 388: PPUSH
 389: LD_INT 8
 391: PPUSH
 392: LD_INT 2
 394: PPUSH
 395: CALL_OW 322
// SetResourceType ( GetBase ( usDep1 ) , mat_cans , 7500 ) ;
 399: LD_INT 9
 401: PPUSH
 402: CALL_OW 274
 406: PPUSH
 407: LD_INT 1
 409: PPUSH
 410: LD_INT 7500
 412: PPUSH
 413: CALL_OW 277
// SetResourceType ( GetBase ( usDep1 ) , mat_oil , 3000 ) ;
 417: LD_INT 9
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 2
 427: PPUSH
 428: LD_INT 3000
 430: PPUSH
 431: CALL_OW 277
// SetResourceType ( GetBase ( usDep2 ) , mat_cans , 5500 ) ;
 435: LD_INT 40
 437: PPUSH
 438: CALL_OW 274
 442: PPUSH
 443: LD_INT 1
 445: PPUSH
 446: LD_INT 5500
 448: PPUSH
 449: CALL_OW 277
// SetResourceType ( GetBase ( usDep2 ) , mat_oil , 3000 ) ;
 453: LD_INT 40
 455: PPUSH
 456: CALL_OW 274
 460: PPUSH
 461: LD_INT 2
 463: PPUSH
 464: LD_INT 3000
 466: PPUSH
 467: CALL_OW 277
// usConstructList2 := [ [ us_medium_wheeled , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ] ;
 471: LD_ADDR_EXP 21
 475: PUSH
 476: LD_INT 2
 478: PUSH
 479: LD_INT 1
 481: PUSH
 482: LD_INT 1
 484: PUSH
 485: LD_INT 5
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: PUSH
 494: LD_INT 2
 496: PUSH
 497: LD_INT 1
 499: PUSH
 500: LD_INT 1
 502: PUSH
 503: LD_INT 4
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: ST_TO_ADDR
// end ;
 516: LD_VAR 0 1
 520: RET
// export function PrepareSquad ( side , nat , area , commander , skill , num ) ; var i , un , team , tmp ; begin
 521: LD_INT 0
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
// uc_side := side ;
 528: LD_ADDR_OWVAR 20
 532: PUSH
 533: LD_VAR 0 1
 537: ST_TO_ADDR
// uc_nation := nat ;
 538: LD_ADDR_OWVAR 21
 542: PUSH
 543: LD_VAR 0 2
 547: ST_TO_ADDR
// team := [ ] ;
 548: LD_ADDR_VAR 0 10
 552: PUSH
 553: EMPTY
 554: ST_TO_ADDR
// hc_importance := 100 ;
 555: LD_ADDR_OWVAR 32
 559: PUSH
 560: LD_INT 100
 562: ST_TO_ADDR
// case commander of jakes :
 563: LD_VAR 0 4
 567: PUSH
 568: LD_STRING jakes
 570: DOUBLE
 571: EQUAL
 572: IFTRUE 576
 574: GO 648
 576: POP
// begin PrepareHuman ( sex_male , class_soldier , skill ) ;
 577: LD_INT 1
 579: PPUSH
 580: LD_INT 1
 582: PPUSH
 583: LD_VAR 0 5
 587: PPUSH
 588: CALL_OW 380
// hc_gallery := pkremaster ;
 592: LD_ADDR_OWVAR 33
 596: PUSH
 597: LD_STRING pkremaster
 599: ST_TO_ADDR
// hc_face_number := 12 ;
 600: LD_ADDR_OWVAR 34
 604: PUSH
 605: LD_INT 12
 607: ST_TO_ADDR
// hc_name := Jan van Jakes ;
 608: LD_ADDR_OWVAR 26
 612: PUSH
 613: LD_STRING Jan van Jakes
 615: ST_TO_ADDR
// Jakes := CreateHuman ;
 616: LD_ADDR_EXP 3
 620: PUSH
 621: CALL_OW 44
 625: ST_TO_ADDR
// team := Join ( team , Jakes ) ;
 626: LD_ADDR_VAR 0 10
 630: PUSH
 631: LD_VAR 0 10
 635: PPUSH
 636: LD_EXP 3
 640: PPUSH
 641: CALL 76286 0 2
 645: ST_TO_ADDR
// end ; sylvia :
 646: GO 729
 648: LD_STRING sylvia
 650: DOUBLE
 651: EQUAL
 652: IFTRUE 656
 654: GO 728
 656: POP
// begin PrepareHuman ( sex_female , class_soldier , skill ) ;
 657: LD_INT 2
 659: PPUSH
 660: LD_INT 1
 662: PPUSH
 663: LD_VAR 0 5
 667: PPUSH
 668: CALL_OW 380
// hc_gallery := pkremaster ;
 672: LD_ADDR_OWVAR 33
 676: PUSH
 677: LD_STRING pkremaster
 679: ST_TO_ADDR
// hc_face_number := 13 ;
 680: LD_ADDR_OWVAR 34
 684: PUSH
 685: LD_INT 13
 687: ST_TO_ADDR
// hc_name := Sylvia Johnson ;
 688: LD_ADDR_OWVAR 26
 692: PUSH
 693: LD_STRING Sylvia Johnson
 695: ST_TO_ADDR
// Sylvia := CreateHuman ;
 696: LD_ADDR_EXP 4
 700: PUSH
 701: CALL_OW 44
 705: ST_TO_ADDR
// team := Join ( team , Sylvia ) ;
 706: LD_ADDR_VAR 0 10
 710: PUSH
 711: LD_VAR 0 10
 715: PPUSH
 716: LD_EXP 4
 720: PPUSH
 721: CALL 76286 0 2
 725: ST_TO_ADDR
// end ; end ;
 726: GO 729
 728: POP
// InitHC_All ( ) ;
 729: CALL_OW 584
// for i := 1 to num do
 733: LD_ADDR_VAR 0 8
 737: PUSH
 738: DOUBLE
 739: LD_INT 1
 741: DEC
 742: ST_TO_ADDR
 743: LD_VAR 0 6
 747: PUSH
 748: FOR_TO
 749: IFFALSE 804
// begin PrepareHuman ( false , ( i mod 4 ) + 1 , skill ) ;
 751: LD_INT 0
 753: PPUSH
 754: LD_VAR 0 8
 758: PUSH
 759: LD_INT 4
 761: MOD
 762: PUSH
 763: LD_INT 1
 765: PLUS
 766: PPUSH
 767: LD_VAR 0 5
 771: PPUSH
 772: CALL_OW 380
// un := CreateHuman ;
 776: LD_ADDR_VAR 0 9
 780: PUSH
 781: CALL_OW 44
 785: ST_TO_ADDR
// team := team ^ un ;
 786: LD_ADDR_VAR 0 10
 790: PUSH
 791: LD_VAR 0 10
 795: PUSH
 796: LD_VAR 0 9
 800: ADD
 801: ST_TO_ADDR
// end ;
 802: GO 748
 804: POP
 805: POP
// for i := 1 to 3 do
 806: LD_ADDR_VAR 0 8
 810: PUSH
 811: DOUBLE
 812: LD_INT 1
 814: DEC
 815: ST_TO_ADDR
 816: LD_INT 3
 818: PUSH
 819: FOR_TO
 820: IFFALSE 862
// begin PrepareMechanic ( false , skill ) ;
 822: LD_INT 0
 824: PPUSH
 825: LD_VAR 0 5
 829: PPUSH
 830: CALL_OW 383
// un := CreateHuman ;
 834: LD_ADDR_VAR 0 9
 838: PUSH
 839: CALL_OW 44
 843: ST_TO_ADDR
// team := team ^ un ;
 844: LD_ADDR_VAR 0 10
 848: PUSH
 849: LD_VAR 0 10
 853: PUSH
 854: LD_VAR 0 9
 858: ADD
 859: ST_TO_ADDR
// end ;
 860: GO 819
 862: POP
 863: POP
// for i := 1 to 5 do
 864: LD_ADDR_VAR 0 8
 868: PUSH
 869: DOUBLE
 870: LD_INT 1
 872: DEC
 873: ST_TO_ADDR
 874: LD_INT 5
 876: PUSH
 877: FOR_TO
 878: IFFALSE 920
// begin PrepareSoldier ( false , skill ) ;
 880: LD_INT 0
 882: PPUSH
 883: LD_VAR 0 5
 887: PPUSH
 888: CALL_OW 381
// un := CreateHuman ;
 892: LD_ADDR_VAR 0 9
 896: PUSH
 897: CALL_OW 44
 901: ST_TO_ADDR
// team := team ^ un ;
 902: LD_ADDR_VAR 0 10
 906: PUSH
 907: LD_VAR 0 10
 911: PUSH
 912: LD_VAR 0 9
 916: ADD
 917: ST_TO_ADDR
// end ;
 918: GO 877
 920: POP
 921: POP
// for i in team do
 922: LD_ADDR_VAR 0 8
 926: PUSH
 927: LD_VAR 0 10
 931: PUSH
 932: FOR_IN
 933: IFFALSE 1271
// begin case GetClass ( i ) of class_soldier :
 935: LD_VAR 0 8
 939: PPUSH
 940: CALL_OW 257
 944: PUSH
 945: LD_INT 1
 947: DOUBLE
 948: EQUAL
 949: IFTRUE 953
 951: GO 1006
 953: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_full ] ] , [ f_btype , b_barracks ] ] ) ; class_engineer :
 954: LD_ADDR_VAR 0 11
 958: PUSH
 959: LD_INT 22
 961: PUSH
 962: LD_VAR 0 1
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: LD_INT 3
 973: PUSH
 974: LD_INT 62
 976: PUSH
 977: EMPTY
 978: LIST
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 30
 986: PUSH
 987: LD_INT 5
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: PPUSH
 999: CALL_OW 69
1003: ST_TO_ADDR
1004: GO 1226
1006: LD_INT 2
1008: DOUBLE
1009: EQUAL
1010: IFTRUE 1014
1012: GO 1085
1014: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; class_scientistic :
1015: LD_ADDR_VAR 0 11
1019: PUSH
1020: LD_INT 22
1022: PUSH
1023: LD_VAR 0 1
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: PUSH
1032: LD_INT 3
1034: PUSH
1035: LD_INT 62
1037: PUSH
1038: EMPTY
1039: LIST
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PUSH
1045: LD_INT 2
1047: PUSH
1048: LD_INT 30
1050: PUSH
1051: LD_INT 0
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: PUSH
1058: LD_INT 30
1060: PUSH
1061: LD_INT 1
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: LIST
1072: PUSH
1073: EMPTY
1074: LIST
1075: LIST
1076: LIST
1077: PPUSH
1078: CALL_OW 69
1082: ST_TO_ADDR
1083: GO 1226
1085: LD_INT 4
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1164
1093: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) ; class_mechanic :
1094: LD_ADDR_VAR 0 11
1098: PUSH
1099: LD_INT 22
1101: PUSH
1102: LD_VAR 0 1
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: PUSH
1111: LD_INT 3
1113: PUSH
1114: LD_INT 62
1116: PUSH
1117: EMPTY
1118: LIST
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: PUSH
1124: LD_INT 2
1126: PUSH
1127: LD_INT 30
1129: PUSH
1130: LD_INT 6
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: PUSH
1137: LD_INT 30
1139: PUSH
1140: LD_INT 8
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: PUSH
1147: EMPTY
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: PPUSH
1157: CALL_OW 69
1161: ST_TO_ADDR
1162: GO 1226
1164: LD_INT 3
1166: DOUBLE
1167: EQUAL
1168: IFTRUE 1172
1170: GO 1225
1172: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_full ] ] , [ f_btype , b_factory ] ] ) ; end ;
1173: LD_ADDR_VAR 0 11
1177: PUSH
1178: LD_INT 22
1180: PUSH
1181: LD_VAR 0 1
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: LD_INT 3
1192: PUSH
1193: LD_INT 62
1195: PUSH
1196: EMPTY
1197: LIST
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PUSH
1203: LD_INT 30
1205: PUSH
1206: LD_INT 3
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: LIST
1217: PPUSH
1218: CALL_OW 69
1222: ST_TO_ADDR
1223: GO 1226
1225: POP
// if tmp then
1226: LD_VAR 0 11
1230: IFFALSE 1252
// PlaceHumanInUnit ( i , tmp [ 1 ] ) else
1232: LD_VAR 0 8
1236: PPUSH
1237: LD_VAR 0 11
1241: PUSH
1242: LD_INT 1
1244: ARRAY
1245: PPUSH
1246: CALL_OW 52
1250: GO 1269
// PlaceUnitArea ( i , area , false ) ;
1252: LD_VAR 0 8
1256: PPUSH
1257: LD_VAR 0 3
1261: PPUSH
1262: LD_INT 0
1264: PPUSH
1265: CALL_OW 49
// end ;
1269: GO 932
1271: POP
1272: POP
// result := team diff 0 ;
1273: LD_ADDR_VAR 0 7
1277: PUSH
1278: LD_VAR 0 10
1282: PUSH
1283: LD_INT 0
1285: DIFF
1286: ST_TO_ADDR
// end ;
1287: LD_VAR 0 7
1291: RET
// export function PrepareAlfaAttack ( area , n ) ; var i , un , ch ; begin
1292: LD_INT 0
1294: PPUSH
1295: PPUSH
1296: PPUSH
1297: PPUSH
// result := [ ] ;
1298: LD_ADDR_VAR 0 3
1302: PUSH
1303: EMPTY
1304: ST_TO_ADDR
// for i := 1 to n do
1305: LD_ADDR_VAR 0 4
1309: PUSH
1310: DOUBLE
1311: LD_INT 1
1313: DEC
1314: ST_TO_ADDR
1315: LD_VAR 0 2
1319: PUSH
1320: FOR_TO
1321: IFFALSE 1643
// begin uc_side := 8 ;
1323: LD_ADDR_OWVAR 20
1327: PUSH
1328: LD_INT 8
1330: ST_TO_ADDR
// uc_nation := 1 ;
1331: LD_ADDR_OWVAR 21
1335: PUSH
1336: LD_INT 1
1338: ST_TO_ADDR
// ch := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ rand ( 1 , Difficulty ) ] ;
1339: LD_ADDR_VAR 0 6
1343: PUSH
1344: LD_INT 3
1346: PUSH
1347: LD_INT 4
1349: PUSH
1350: LD_INT 4
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: LIST
1357: PUSH
1358: LD_INT 1
1360: PPUSH
1361: LD_OWVAR 67
1365: PPUSH
1366: CALL_OW 12
1370: ARRAY
1371: ST_TO_ADDR
// vc_chassis := ch ;
1372: LD_ADDR_OWVAR 37
1376: PUSH
1377: LD_VAR 0 6
1381: ST_TO_ADDR
// vc_control := control_computer ;
1382: LD_ADDR_OWVAR 38
1386: PUSH
1387: LD_INT 3
1389: ST_TO_ADDR
// vc_engine := engine_combustion ;
1390: LD_ADDR_OWVAR 39
1394: PUSH
1395: LD_INT 1
1397: ST_TO_ADDR
// if tick < [ 14 14$00 , 12 12$00 , 10 10$00 ] [ Difficulty ] then
1398: LD_OWVAR 1
1402: PUSH
1403: LD_INT 29400
1405: PUSH
1406: LD_INT 25200
1408: PUSH
1409: LD_INT 21000
1411: PUSH
1412: EMPTY
1413: LIST
1414: LIST
1415: LIST
1416: PUSH
1417: LD_OWVAR 67
1421: ARRAY
1422: LESS
1423: IFFALSE 1454
// vc_weapon := [ us_light_gun , us_double_gun ] [ rand ( 1 , 2 ) ] else
1425: LD_ADDR_OWVAR 40
1429: PUSH
1430: LD_INT 3
1432: PUSH
1433: LD_INT 5
1435: PUSH
1436: EMPTY
1437: LIST
1438: LIST
1439: PUSH
1440: LD_INT 1
1442: PPUSH
1443: LD_INT 2
1445: PPUSH
1446: CALL_OW 12
1450: ARRAY
1451: ST_TO_ADDR
1452: GO 1550
// if ch = us_medium_tracked then
1454: LD_VAR 0 6
1458: PUSH
1459: LD_INT 3
1461: EQUAL
1462: IFFALSE 1509
// vc_weapon := [ us_light_gun , us_gatling_gun , us_double_gun , us_rocket_launcher ] [ rand ( Difficulty , Difficulty + 1 ) ] else
1464: LD_ADDR_OWVAR 40
1468: PUSH
1469: LD_INT 3
1471: PUSH
1472: LD_INT 4
1474: PUSH
1475: LD_INT 5
1477: PUSH
1478: LD_INT 7
1480: PUSH
1481: EMPTY
1482: LIST
1483: LIST
1484: LIST
1485: LIST
1486: PUSH
1487: LD_OWVAR 67
1491: PPUSH
1492: LD_OWVAR 67
1496: PUSH
1497: LD_INT 1
1499: PLUS
1500: PPUSH
1501: CALL_OW 12
1505: ARRAY
1506: ST_TO_ADDR
1507: GO 1550
// vc_weapon := [ us_double_gun , us_heavy_gun , us_rocket_launcher , us_rocket_launcher ] [ rand ( 1 , Difficulty + 1 ) ] ;
1509: LD_ADDR_OWVAR 40
1513: PUSH
1514: LD_INT 5
1516: PUSH
1517: LD_INT 6
1519: PUSH
1520: LD_INT 7
1522: PUSH
1523: LD_INT 7
1525: PUSH
1526: EMPTY
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: PUSH
1532: LD_INT 1
1534: PPUSH
1535: LD_OWVAR 67
1539: PUSH
1540: LD_INT 1
1542: PLUS
1543: PPUSH
1544: CALL_OW 12
1548: ARRAY
1549: ST_TO_ADDR
// vc_fuel_battery := 70 ;
1550: LD_ADDR_OWVAR 41
1554: PUSH
1555: LD_INT 70
1557: ST_TO_ADDR
// un := CreateVehicle ;
1558: LD_ADDR_VAR 0 5
1562: PUSH
1563: CALL_OW 45
1567: ST_TO_ADDR
// SetDir ( un , 2 ) ;
1568: LD_VAR 0 5
1572: PPUSH
1573: LD_INT 2
1575: PPUSH
1576: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
1580: LD_INT 35
1582: PPUSH
1583: CALL_OW 67
// until PlaceUnitArea ( un , area , false ) ;
1587: LD_VAR 0 5
1591: PPUSH
1592: LD_VAR 0 1
1596: PPUSH
1597: LD_INT 0
1599: PPUSH
1600: CALL_OW 49
1604: IFFALSE 1580
// result := Join ( result , un ) ;
1606: LD_ADDR_VAR 0 3
1610: PUSH
1611: LD_VAR 0 3
1615: PPUSH
1616: LD_VAR 0 5
1620: PPUSH
1621: CALL 76286 0 2
1625: ST_TO_ADDR
// ComMoveXY ( un , 65 , 9 ) ;
1626: LD_VAR 0 5
1630: PPUSH
1631: LD_INT 65
1633: PPUSH
1634: LD_INT 9
1636: PPUSH
1637: CALL_OW 111
// end ;
1641: GO 1320
1643: POP
1644: POP
// if Prob ( [ 90 , 80 , 70 ] [ Difficulty ] ) then
1645: LD_INT 90
1647: PUSH
1648: LD_INT 80
1650: PUSH
1651: LD_INT 70
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: LIST
1658: PUSH
1659: LD_OWVAR 67
1663: ARRAY
1664: PPUSH
1665: CALL_OW 13
1669: IFFALSE 1815
// begin uc_side := 8 ;
1671: LD_ADDR_OWVAR 20
1675: PUSH
1676: LD_INT 8
1678: ST_TO_ADDR
// uc_nation := 1 ;
1679: LD_ADDR_OWVAR 21
1683: PUSH
1684: LD_INT 1
1686: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
1687: LD_ADDR_OWVAR 37
1691: PUSH
1692: LD_INT 4
1694: ST_TO_ADDR
// vc_control := control_computer ;
1695: LD_ADDR_OWVAR 38
1699: PUSH
1700: LD_INT 3
1702: ST_TO_ADDR
// vc_engine := engine_combustion ;
1703: LD_ADDR_OWVAR 39
1707: PUSH
1708: LD_INT 1
1710: ST_TO_ADDR
// vc_weapon := us_bulldozer ;
1711: LD_ADDR_OWVAR 40
1715: PUSH
1716: LD_INT 14
1718: ST_TO_ADDR
// vc_fuel_battery := 70 ;
1719: LD_ADDR_OWVAR 41
1723: PUSH
1724: LD_INT 70
1726: ST_TO_ADDR
// un := CreateVehicle ;
1727: LD_ADDR_VAR 0 5
1731: PUSH
1732: CALL_OW 45
1736: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1737: LD_INT 35
1739: PPUSH
1740: CALL_OW 67
// until PlaceUnitArea ( un , area , false ) ;
1744: LD_VAR 0 5
1748: PPUSH
1749: LD_VAR 0 1
1753: PPUSH
1754: LD_INT 0
1756: PPUSH
1757: CALL_OW 49
1761: IFFALSE 1737
// ComMoveXY ( un , 65 , 9 ) ;
1763: LD_VAR 0 5
1767: PPUSH
1768: LD_INT 65
1770: PPUSH
1771: LD_INT 9
1773: PPUSH
1774: CALL_OW 111
// wait ( 0 0$02 ) ;
1778: LD_INT 70
1780: PPUSH
1781: CALL_OW 67
// CutTreeXYR ( un , 104 , 65 , 12 ) ;
1785: LD_VAR 0 5
1789: PPUSH
1790: LD_INT 104
1792: PPUSH
1793: LD_INT 65
1795: PPUSH
1796: LD_INT 12
1798: PPUSH
1799: CALL 33112 0 4
// AddComAttackUnit ( un , playerDepot ) ;
1803: LD_VAR 0 5
1807: PPUSH
1808: LD_INT 1
1810: PPUSH
1811: CALL_OW 175
// end ; repeat wait ( 0 0$1 ) ;
1815: LD_INT 35
1817: PPUSH
1818: CALL_OW 67
// result := UnitFilter ( result , [ f_ok ] ) ;
1822: LD_ADDR_VAR 0 3
1826: PUSH
1827: LD_VAR 0 3
1831: PPUSH
1832: LD_INT 50
1834: PUSH
1835: EMPTY
1836: LIST
1837: PPUSH
1838: CALL_OW 72
1842: ST_TO_ADDR
// AgressiveMove ( result , [ [ 82 , 14 ] , [ 83 , 39 ] , [ 89 , 51 ] , [ 91 , 58 ] ] ) ;
1843: LD_VAR 0 3
1847: PPUSH
1848: LD_INT 82
1850: PUSH
1851: LD_INT 14
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 83
1860: PUSH
1861: LD_INT 39
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 89
1870: PUSH
1871: LD_INT 51
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 91
1880: PUSH
1881: LD_INT 58
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PUSH
1888: EMPTY
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: PPUSH
1894: CALL 79052 0 2
// until not result ;
1898: LD_VAR 0 3
1902: NOT
1903: IFFALSE 1815
// end ;
1905: LD_VAR 0 3
1909: RET
// every 0 0$1 trigger FilterAllUnits ( [ f_side , 1 ] ) do
1910: LD_INT 22
1912: PUSH
1913: LD_INT 1
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: PPUSH
1920: CALL_OW 69
1924: IFFALSE 2004
1926: GO 1928
1928: DISABLE
// begin enable ;
1929: ENABLE
// BaseScript ( 1 , americanBaseNorthArea , americanBaseNorthArea , americanBaseNorthInnerArea , americanBaseNorthOuterArea , usForces1 , usVehicles1 , usTechs1 , usConstructList1 , usBuildingsToBuild1 , [ 19 , 9 ] , [ 40 , 5 ] , [ 82 , 47 ] ) ;
1930: LD_INT 1
1932: PPUSH
1933: LD_INT 10
1935: PPUSH
1936: LD_INT 10
1938: PPUSH
1939: LD_INT 13
1941: PPUSH
1942: LD_INT 12
1944: PPUSH
1945: LD_EXP 14
1949: PPUSH
1950: LD_EXP 16
1954: PPUSH
1955: LD_EXP 18
1959: PPUSH
1960: LD_EXP 20
1964: PPUSH
1965: LD_EXP 22
1969: PPUSH
1970: LD_INT 19
1972: PUSH
1973: LD_INT 9
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PPUSH
1980: LD_INT 40
1982: PUSH
1983: LD_INT 5
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: PPUSH
1990: LD_INT 82
1992: PUSH
1993: LD_INT 47
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PPUSH
2000: CALL 9762 0 13
// end ;
2004: END
// every 0 0$1 trigger FilterAllUnits ( [ f_side , 4 ] ) do
2005: LD_INT 22
2007: PUSH
2008: LD_INT 4
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PPUSH
2015: CALL_OW 69
2019: IFFALSE 2091
2021: GO 2023
2023: DISABLE
// begin enable ;
2024: ENABLE
// BaseScript ( 4 , americanBaseSouthArea , americanBaseSouthArea , americanBaseSouthInnerArea , americanBaseSouthOuterArea , usForces2 , usVehicles2 , usTechs2 , usConstructList2 , usBuildingsToBuild2 , [ 83 , 151 ] , [ 92 , 144 ] , [ ] ) ;
2025: LD_INT 4
2027: PPUSH
2028: LD_INT 11
2030: PPUSH
2031: LD_INT 11
2033: PPUSH
2034: LD_INT 15
2036: PPUSH
2037: LD_INT 14
2039: PPUSH
2040: LD_EXP 15
2044: PPUSH
2045: LD_EXP 17
2049: PPUSH
2050: LD_EXP 19
2054: PPUSH
2055: LD_EXP 21
2059: PPUSH
2060: LD_EXP 23
2064: PPUSH
2065: LD_INT 83
2067: PUSH
2068: LD_INT 151
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PPUSH
2075: LD_INT 92
2077: PUSH
2078: LD_INT 144
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PPUSH
2085: EMPTY
2086: PPUSH
2087: CALL 9762 0 13
// end ;
2091: END
// every 5 5$00 + 3 3$00 trigger IsOk ( usDep1 ) and not usConstructList1 do var i ;
2092: LD_INT 9
2094: PPUSH
2095: CALL_OW 302
2099: IFFALSE 2108
2101: PUSH
2102: LD_EXP 20
2106: NOT
2107: AND
2108: IFFALSE 2554
2110: GO 2112
2112: DISABLE
2113: LD_INT 0
2115: PPUSH
// begin enable ;
2116: ENABLE
// usConstructList1 := [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_gatling_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] ] ;
2117: LD_ADDR_EXP 20
2121: PUSH
2122: LD_INT 3
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 2
2130: PUSH
2131: LD_INT 5
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: PUSH
2140: LD_INT 3
2142: PUSH
2143: LD_INT 1
2145: PUSH
2146: LD_INT 2
2148: PUSH
2149: LD_INT 4
2151: PUSH
2152: EMPTY
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: PUSH
2158: LD_INT 3
2160: PUSH
2161: LD_INT 1
2163: PUSH
2164: LD_INT 2
2166: PUSH
2167: LD_INT 5
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: PUSH
2176: EMPTY
2177: LIST
2178: LIST
2179: LIST
2180: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) then
2181: LD_INT 22
2183: PUSH
2184: LD_INT 1
2186: PUSH
2187: EMPTY
2188: LIST
2189: LIST
2190: PUSH
2191: LD_INT 34
2193: PUSH
2194: LD_INT 12
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PPUSH
2205: CALL_OW 69
2209: NOT
2210: IFFALSE 2244
// usConstructList1 := usConstructList1 ^ [ [ us_medium_tracked , engine_combustion , control_remote , us_cargo_bay ] ] ;
2212: LD_ADDR_EXP 20
2216: PUSH
2217: LD_EXP 20
2221: PUSH
2222: LD_INT 3
2224: PUSH
2225: LD_INT 1
2227: PUSH
2228: LD_INT 2
2230: PUSH
2231: LD_INT 12
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: LIST
2238: LIST
2239: PUSH
2240: EMPTY
2241: LIST
2242: ADD
2243: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) < 2 then
2244: LD_INT 22
2246: PUSH
2247: LD_INT 1
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: PUSH
2254: LD_INT 34
2256: PUSH
2257: LD_INT 13
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: PUSH
2264: EMPTY
2265: LIST
2266: LIST
2267: PPUSH
2268: CALL_OW 69
2272: PUSH
2273: LD_INT 2
2275: LESS
2276: IFFALSE 2310
// usConstructList1 := usConstructList1 ^ [ [ us_medium_tracked , engine_combustion , control_remote , us_crane ] ] ;
2278: LD_ADDR_EXP 20
2282: PUSH
2283: LD_EXP 20
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: LD_INT 1
2293: PUSH
2294: LD_INT 2
2296: PUSH
2297: LD_INT 13
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: PUSH
2306: EMPTY
2307: LIST
2308: ADD
2309: ST_TO_ADDR
// if UnitsInside ( usFac1 ) > 3 then
2310: LD_INT 10
2312: PPUSH
2313: CALL_OW 313
2317: PUSH
2318: LD_INT 3
2320: GREATER
2321: IFFALSE 2355
// usConstructList1 := usConstructList1 ^ [ [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] ] ;
2323: LD_ADDR_EXP 20
2327: PUSH
2328: LD_EXP 20
2332: PUSH
2333: LD_INT 3
2335: PUSH
2336: LD_INT 1
2338: PUSH
2339: LD_INT 1
2341: PUSH
2342: LD_INT 5
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: LIST
2349: LIST
2350: PUSH
2351: EMPTY
2352: LIST
2353: ADD
2354: ST_TO_ADDR
// if Difficulty > 1 then
2355: LD_OWVAR 67
2359: PUSH
2360: LD_INT 1
2362: GREATER
2363: IFFALSE 2416
// usConstructList1 := usConstructList1 ^ [ [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_gatling_gun ] ] ;
2365: LD_ADDR_EXP 20
2369: PUSH
2370: LD_EXP 20
2374: PUSH
2375: LD_INT 4
2377: PUSH
2378: LD_INT 1
2380: PUSH
2381: LD_INT 2
2383: PUSH
2384: LD_INT 6
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: PUSH
2393: LD_INT 3
2395: PUSH
2396: LD_INT 1
2398: PUSH
2399: LD_INT 2
2401: PUSH
2402: LD_INT 4
2404: PUSH
2405: EMPTY
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: ADD
2415: ST_TO_ADDR
// if Difficulty > 2 then
2416: LD_OWVAR 67
2420: PUSH
2421: LD_INT 2
2423: GREATER
2424: IFFALSE 2477
// usConstructList1 := usConstructList1 ^ [ [ us_heavy_tracked , engine_combustion , control_remote , us_gatling_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_gatling_gun ] ] ;
2426: LD_ADDR_EXP 20
2430: PUSH
2431: LD_EXP 20
2435: PUSH
2436: LD_INT 4
2438: PUSH
2439: LD_INT 1
2441: PUSH
2442: LD_INT 2
2444: PUSH
2445: LD_INT 4
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: LIST
2452: LIST
2453: PUSH
2454: LD_INT 3
2456: PUSH
2457: LD_INT 1
2459: PUSH
2460: LD_INT 2
2462: PUSH
2463: LD_INT 4
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: ADD
2476: ST_TO_ADDR
// for i := 1 to attackWave1 do
2477: LD_ADDR_VAR 0 1
2481: PUSH
2482: DOUBLE
2483: LD_INT 1
2485: DEC
2486: ST_TO_ADDR
2487: LD_EXP 10
2491: PUSH
2492: FOR_TO
2493: IFFALSE 2552
// usConstructList1 := usConstructList1 ^ [ [ us_heavy_tracked , engine_combustion , control_remote , [ us_gatling_gun , us_double_gun , us_heavy_gun ] [ rand ( 1 , 3 ) ] ] ] ;
2495: LD_ADDR_EXP 20
2499: PUSH
2500: LD_EXP 20
2504: PUSH
2505: LD_INT 4
2507: PUSH
2508: LD_INT 1
2510: PUSH
2511: LD_INT 2
2513: PUSH
2514: LD_INT 4
2516: PUSH
2517: LD_INT 5
2519: PUSH
2520: LD_INT 6
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: LIST
2527: PUSH
2528: LD_INT 1
2530: PPUSH
2531: LD_INT 3
2533: PPUSH
2534: CALL_OW 12
2538: ARRAY
2539: PUSH
2540: EMPTY
2541: LIST
2542: LIST
2543: LIST
2544: LIST
2545: PUSH
2546: EMPTY
2547: LIST
2548: ADD
2549: ST_TO_ADDR
2550: GO 2492
2552: POP
2553: POP
// end ;
2554: PPOPN 1
2556: END
// export function SendUsAttack1 ; var i , tmp , path , dial ; begin
2557: LD_INT 0
2559: PPUSH
2560: PPUSH
2561: PPUSH
2562: PPUSH
2563: PPUSH
// attackWave1 := Inc ( attackWave1 ) ;
2564: LD_ADDR_EXP 10
2568: PUSH
2569: LD_EXP 10
2573: PPUSH
2574: CALL 77659 0 1
2578: ST_TO_ADDR
// if attackWave1 > 6 then
2579: LD_EXP 10
2583: PUSH
2584: LD_INT 6
2586: GREATER
2587: IFFALSE 2597
// attackWave1 := 6 ;
2589: LD_ADDR_EXP 10
2593: PUSH
2594: LD_INT 6
2596: ST_TO_ADDR
// tmp := usAttackVehicles1 ;
2597: LD_ADDR_VAR 0 3
2601: PUSH
2602: LD_EXP 24
2606: ST_TO_ADDR
// usAttackVehicles1 := [ ] ;
2607: LD_ADDR_EXP 24
2611: PUSH
2612: EMPTY
2613: ST_TO_ADDR
// if IsOk ( Jakes ) and lastRadioAttackMsg + 1 1$00 < tick then
2614: LD_EXP 3
2618: PPUSH
2619: CALL_OW 302
2623: IFFALSE 2641
2625: PUSH
2626: LD_EXP 13
2630: PUSH
2631: LD_INT 2100
2633: PLUS
2634: PUSH
2635: LD_OWVAR 1
2639: LESS
2640: AND
2641: IFFALSE 2735
// begin dial := [ DJ1 , DJ6 ] ;
2643: LD_ADDR_VAR 0 5
2647: PUSH
2648: LD_STRING DJ1
2650: PUSH
2651: LD_STRING DJ6
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_weapon , us_heavy_gun ] ) then
2658: LD_VAR 0 3
2662: PPUSH
2663: LD_INT 34
2665: PUSH
2666: LD_INT 6
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: PPUSH
2673: CALL_OW 72
2677: IFFALSE 2697
// dial := Join ( dial , DJ4 ) ;
2679: LD_ADDR_VAR 0 5
2683: PUSH
2684: LD_VAR 0 5
2688: PPUSH
2689: LD_STRING DJ4
2691: PPUSH
2692: CALL 76286 0 2
2696: ST_TO_ADDR
// lastRadioAttackMsg := tick ;
2697: LD_ADDR_EXP 13
2701: PUSH
2702: LD_OWVAR 1
2706: ST_TO_ADDR
// SayRadio ( Jakes , dial [ rand ( 1 , dial ) ] ) ;
2707: LD_EXP 3
2711: PPUSH
2712: LD_VAR 0 5
2716: PUSH
2717: LD_INT 1
2719: PPUSH
2720: LD_VAR 0 5
2724: PPUSH
2725: CALL_OW 12
2729: ARRAY
2730: PPUSH
2731: CALL_OW 94
// end ; path := [ [ [ 38 , 41 ] , [ 90 , 51 ] ] , [ [ 72 , 14 ] , [ 83 , 42 ] ] ] [ rand ( 1 , 2 ) ] ;
2735: LD_ADDR_VAR 0 4
2739: PUSH
2740: LD_INT 38
2742: PUSH
2743: LD_INT 41
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: PUSH
2750: LD_INT 90
2752: PUSH
2753: LD_INT 51
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: PUSH
2764: LD_INT 72
2766: PUSH
2767: LD_INT 14
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 83
2776: PUSH
2777: LD_INT 42
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 1
2794: PPUSH
2795: LD_INT 2
2797: PPUSH
2798: CALL_OW 12
2802: ARRAY
2803: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
2804: LD_INT 70
2806: PPUSH
2807: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
2811: LD_ADDR_VAR 0 3
2815: PUSH
2816: LD_VAR 0 3
2820: PPUSH
2821: LD_INT 50
2823: PUSH
2824: EMPTY
2825: LIST
2826: PPUSH
2827: CALL_OW 72
2831: ST_TO_ADDR
// for i in tmp do
2832: LD_ADDR_VAR 0 2
2836: PUSH
2837: LD_VAR 0 3
2841: PUSH
2842: FOR_IN
2843: IFFALSE 2861
// AgressiveMove ( i , path ) until not tmp ;
2845: LD_VAR 0 2
2849: PPUSH
2850: LD_VAR 0 4
2854: PPUSH
2855: CALL 79052 0 2
2859: GO 2842
2861: POP
2862: POP
2863: LD_VAR 0 3
2867: NOT
2868: IFFALSE 2804
// end ;
2870: LD_VAR 0 1
2874: RET
// every 5 5$00 + 3 3$00 trigger IsOk ( usDep2 ) and not usConstructList2 do var i ;
2875: LD_INT 40
2877: PPUSH
2878: CALL_OW 302
2882: IFFALSE 2891
2884: PUSH
2885: LD_EXP 21
2889: NOT
2890: AND
2891: IFFALSE 3147
2893: GO 2895
2895: DISABLE
2896: LD_INT 0
2898: PPUSH
// begin enable ;
2899: ENABLE
// usConstructList2 := [ [ us_medium_wheeled , engine_combustion , control_remote , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_remote , us_gatling_gun ] , [ us_medium_wheeled , engine_combustion , control_remote , us_double_gun ] ] ;
2900: LD_ADDR_EXP 21
2904: PUSH
2905: LD_INT 2
2907: PUSH
2908: LD_INT 1
2910: PUSH
2911: LD_INT 2
2913: PUSH
2914: LD_INT 5
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: LIST
2921: LIST
2922: PUSH
2923: LD_INT 2
2925: PUSH
2926: LD_INT 1
2928: PUSH
2929: LD_INT 2
2931: PUSH
2932: LD_INT 4
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: LIST
2939: LIST
2940: PUSH
2941: LD_INT 2
2943: PUSH
2944: LD_INT 1
2946: PUSH
2947: LD_INT 2
2949: PUSH
2950: LD_INT 5
2952: PUSH
2953: EMPTY
2954: LIST
2955: LIST
2956: LIST
2957: LIST
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: LIST
2963: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) then
2964: LD_INT 22
2966: PUSH
2967: LD_INT 4
2969: PUSH
2970: EMPTY
2971: LIST
2972: LIST
2973: PUSH
2974: LD_INT 34
2976: PUSH
2977: LD_INT 12
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: PPUSH
2988: CALL_OW 69
2992: NOT
2993: IFFALSE 3027
// usConstructList2 := usConstructList2 ^ [ [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] ] ;
2995: LD_ADDR_EXP 21
2999: PUSH
3000: LD_EXP 21
3004: PUSH
3005: LD_INT 2
3007: PUSH
3008: LD_INT 1
3010: PUSH
3011: LD_INT 2
3013: PUSH
3014: LD_INT 12
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: LIST
3021: LIST
3022: PUSH
3023: EMPTY
3024: LIST
3025: ADD
3026: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_crane ] ] ) < 2 then
3027: LD_INT 22
3029: PUSH
3030: LD_INT 4
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PUSH
3037: LD_INT 34
3039: PUSH
3040: LD_INT 13
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: PUSH
3056: LD_INT 2
3058: LESS
3059: IFFALSE 3093
// usConstructList2 := usConstructList2 ^ [ [ us_medium_wheeled , engine_combustion , control_remote , us_crane ] ] ;
3061: LD_ADDR_EXP 21
3065: PUSH
3066: LD_EXP 21
3070: PUSH
3071: LD_INT 2
3073: PUSH
3074: LD_INT 1
3076: PUSH
3077: LD_INT 2
3079: PUSH
3080: LD_INT 13
3082: PUSH
3083: EMPTY
3084: LIST
3085: LIST
3086: LIST
3087: LIST
3088: PUSH
3089: EMPTY
3090: LIST
3091: ADD
3092: ST_TO_ADDR
// for i := 1 to attackWave2 do
3093: LD_ADDR_VAR 0 1
3097: PUSH
3098: DOUBLE
3099: LD_INT 1
3101: DEC
3102: ST_TO_ADDR
3103: LD_EXP 11
3107: PUSH
3108: FOR_TO
3109: IFFALSE 3145
// usConstructList2 := usConstructList2 ^ [ [ us_medium_wheeled , engine_combustion , control_remote , us_rocket_launcher ] ] ;
3111: LD_ADDR_EXP 21
3115: PUSH
3116: LD_EXP 21
3120: PUSH
3121: LD_INT 2
3123: PUSH
3124: LD_INT 1
3126: PUSH
3127: LD_INT 2
3129: PUSH
3130: LD_INT 7
3132: PUSH
3133: EMPTY
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: PUSH
3139: EMPTY
3140: LIST
3141: ADD
3142: ST_TO_ADDR
3143: GO 3108
3145: POP
3146: POP
// end ;
3147: PPOPN 1
3149: END
// export function SendUsAttack2 ; var i , tmp , path , dial ; begin
3150: LD_INT 0
3152: PPUSH
3153: PPUSH
3154: PPUSH
3155: PPUSH
3156: PPUSH
// attackWave2 := Inc ( attackWave2 ) ;
3157: LD_ADDR_EXP 11
3161: PUSH
3162: LD_EXP 11
3166: PPUSH
3167: CALL 77659 0 1
3171: ST_TO_ADDR
// if attackWave2 > 9 then
3172: LD_EXP 11
3176: PUSH
3177: LD_INT 9
3179: GREATER
3180: IFFALSE 3190
// attackWave2 := 9 ;
3182: LD_ADDR_EXP 11
3186: PUSH
3187: LD_INT 9
3189: ST_TO_ADDR
// tmp := usAttackVehicles2 ;
3190: LD_ADDR_VAR 0 3
3194: PUSH
3195: LD_EXP 25
3199: ST_TO_ADDR
// usAttackVehicles2 := [ ] ;
3200: LD_ADDR_EXP 25
3204: PUSH
3205: EMPTY
3206: ST_TO_ADDR
// if IsOk ( Sylvia ) and lastRadioAttackMsg + 1 1$00 < tick then
3207: LD_EXP 4
3211: PPUSH
3212: CALL_OW 302
3216: IFFALSE 3234
3218: PUSH
3219: LD_EXP 13
3223: PUSH
3224: LD_INT 2100
3226: PLUS
3227: PUSH
3228: LD_OWVAR 1
3232: LESS
3233: AND
3234: IFFALSE 3328
// begin dial := [ DS2 , DS3 ] ;
3236: LD_ADDR_VAR 0 5
3240: PUSH
3241: LD_STRING DS2
3243: PUSH
3244: LD_STRING DS3
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_weapon , us_rocket_launcher ] ) then
3251: LD_VAR 0 3
3255: PPUSH
3256: LD_INT 34
3258: PUSH
3259: LD_INT 7
3261: PUSH
3262: EMPTY
3263: LIST
3264: LIST
3265: PPUSH
3266: CALL_OW 72
3270: IFFALSE 3290
// dial := Join ( dial , DS6 ) ;
3272: LD_ADDR_VAR 0 5
3276: PUSH
3277: LD_VAR 0 5
3281: PPUSH
3282: LD_STRING DS6
3284: PPUSH
3285: CALL 76286 0 2
3289: ST_TO_ADDR
// lastRadioAttackMsg := tick ;
3290: LD_ADDR_EXP 13
3294: PUSH
3295: LD_OWVAR 1
3299: ST_TO_ADDR
// SayRadio ( Sylvia , dial [ rand ( 1 , dial ) ] ) ;
3300: LD_EXP 4
3304: PPUSH
3305: LD_VAR 0 5
3309: PUSH
3310: LD_INT 1
3312: PPUSH
3313: LD_VAR 0 5
3317: PPUSH
3318: CALL_OW 12
3322: ARRAY
3323: PPUSH
3324: CALL_OW 94
// end ; path := [ [ 123 , 138 ] , [ 125 , 126 ] ] ;
3328: LD_ADDR_VAR 0 4
3332: PUSH
3333: LD_INT 123
3335: PUSH
3336: LD_INT 138
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 125
3345: PUSH
3346: LD_INT 126
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
3357: LD_INT 70
3359: PPUSH
3360: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
3364: LD_ADDR_VAR 0 3
3368: PUSH
3369: LD_VAR 0 3
3373: PPUSH
3374: LD_INT 50
3376: PUSH
3377: EMPTY
3378: LIST
3379: PPUSH
3380: CALL_OW 72
3384: ST_TO_ADDR
// for i in tmp do
3385: LD_ADDR_VAR 0 2
3389: PUSH
3390: LD_VAR 0 3
3394: PUSH
3395: FOR_IN
3396: IFFALSE 3414
// AgressiveMove ( i , path ) until not tmp ;
3398: LD_VAR 0 2
3402: PPUSH
3403: LD_VAR 0 4
3407: PPUSH
3408: CALL 79052 0 2
3412: GO 3395
3414: POP
3415: POP
3416: LD_VAR 0 3
3420: NOT
3421: IFFALSE 3357
// end ;
3423: LD_VAR 0 1
3427: RET
// every 0 0$2 trigger IsOk ( usCargo1 ) do var cr , enemyInArea ;
3428: LD_EXP 26
3432: PPUSH
3433: CALL_OW 302
3437: IFFALSE 3708
3439: GO 3441
3441: DISABLE
3442: LD_INT 0
3444: PPUSH
3445: PPUSH
// begin enable ;
3446: ENABLE
// enemyInArea := FilterUnitsInArea ( amCrates1Area , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
3447: LD_ADDR_VAR 0 2
3451: PUSH
3452: LD_INT 16
3454: PPUSH
3455: LD_INT 81
3457: PUSH
3458: LD_INT 1
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: PUSH
3465: LD_INT 50
3467: PUSH
3468: EMPTY
3469: LIST
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PPUSH
3475: CALL_OW 70
3479: ST_TO_ADDR
// cr := GetListOfCratesInArea ( amCrates1Area ) ;
3480: LD_ADDR_VAR 0 1
3484: PUSH
3485: LD_INT 16
3487: PPUSH
3488: CALL_OW 435
3492: ST_TO_ADDR
// if GetFuel ( usCargo1 ) < 10 and not See ( 3 , usCargo1 ) then
3493: LD_EXP 26
3497: PPUSH
3498: CALL_OW 261
3502: PUSH
3503: LD_INT 10
3505: LESS
3506: IFFALSE 3523
3508: PUSH
3509: LD_INT 3
3511: PPUSH
3512: LD_EXP 26
3516: PPUSH
3517: CALL_OW 292
3521: NOT
3522: AND
3523: IFFALSE 3537
// SetFuel ( usCargo1 , 100 ) ;
3525: LD_EXP 26
3529: PPUSH
3530: LD_INT 100
3532: PPUSH
3533: CALL_OW 240
// if not HasTask ( usCargo1 ) and GetCargo ( usCargo1 , mat_cans ) < 100 and not enemyInArea then
3537: LD_EXP 26
3541: PPUSH
3542: CALL_OW 314
3546: NOT
3547: IFFALSE 3567
3549: PUSH
3550: LD_EXP 26
3554: PPUSH
3555: LD_INT 1
3557: PPUSH
3558: CALL_OW 289
3562: PUSH
3563: LD_INT 100
3565: LESS
3566: AND
3567: IFFALSE 3576
3569: PUSH
3570: LD_VAR 0 2
3574: NOT
3575: AND
3576: IFFALSE 3642
// begin if cr then
3578: LD_VAR 0 1
3582: IFFALSE 3613
// ComCollect ( usCargo1 , cr [ 1 ] , cr [ 2 ] ) else
3584: LD_EXP 26
3588: PPUSH
3589: LD_VAR 0 1
3593: PUSH
3594: LD_INT 1
3596: ARRAY
3597: PPUSH
3598: LD_VAR 0 1
3602: PUSH
3603: LD_INT 2
3605: ARRAY
3606: PPUSH
3607: CALL_OW 117
3611: GO 3640
// if not IsInArea ( usCargo1 , amCrates1Area ) then
3613: LD_EXP 26
3617: PPUSH
3618: LD_INT 16
3620: PPUSH
3621: CALL_OW 308
3625: NOT
3626: IFFALSE 3640
// ComMoveToArea ( usCargo1 , amCrates1Area ) ;
3628: LD_EXP 26
3632: PPUSH
3633: LD_INT 16
3635: PPUSH
3636: CALL_OW 113
// exit ;
3640: GO 3708
// end ; if enemyInArea and not IsInArea ( usCargo1 , americanBaseNorthArea ) then
3642: LD_VAR 0 2
3646: IFFALSE 3663
3648: PUSH
3649: LD_EXP 26
3653: PPUSH
3654: LD_INT 10
3656: PPUSH
3657: CALL_OW 308
3661: NOT
3662: AND
3663: IFFALSE 3682
// ComMoveXY ( usCargo1 , 21 , 8 ) else
3665: LD_EXP 26
3669: PPUSH
3670: LD_INT 21
3672: PPUSH
3673: LD_INT 8
3675: PPUSH
3676: CALL_OW 111
3680: GO 3708
// if GetCargo ( usCargo1 , mat_cans ) then
3682: LD_EXP 26
3686: PPUSH
3687: LD_INT 1
3689: PPUSH
3690: CALL_OW 289
3694: IFFALSE 3708
// ComGive ( usCargo1 , usDep1 ) ;
3696: LD_EXP 26
3700: PPUSH
3701: LD_INT 9
3703: PPUSH
3704: CALL_OW 161
// end ;
3708: PPOPN 2
3710: END
// every 0 0$2 trigger IsOk ( usCargo2 ) do var cr , enemyInArea ;
3711: LD_EXP 27
3715: PPUSH
3716: CALL_OW 302
3720: IFFALSE 3991
3722: GO 3724
3724: DISABLE
3725: LD_INT 0
3727: PPUSH
3728: PPUSH
// begin enable ;
3729: ENABLE
// enemyInArea := FilterUnitsInArea ( amCrates2Area , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
3730: LD_ADDR_VAR 0 2
3734: PUSH
3735: LD_INT 17
3737: PPUSH
3738: LD_INT 81
3740: PUSH
3741: LD_INT 1
3743: PUSH
3744: EMPTY
3745: LIST
3746: LIST
3747: PUSH
3748: LD_INT 50
3750: PUSH
3751: EMPTY
3752: LIST
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: PPUSH
3758: CALL_OW 70
3762: ST_TO_ADDR
// cr := GetListOfCratesInArea ( amCrates2Area ) ;
3763: LD_ADDR_VAR 0 1
3767: PUSH
3768: LD_INT 17
3770: PPUSH
3771: CALL_OW 435
3775: ST_TO_ADDR
// if GetFuel ( usCargo2 ) < 10 and not See ( 3 , usCargo2 ) then
3776: LD_EXP 27
3780: PPUSH
3781: CALL_OW 261
3785: PUSH
3786: LD_INT 10
3788: LESS
3789: IFFALSE 3806
3791: PUSH
3792: LD_INT 3
3794: PPUSH
3795: LD_EXP 27
3799: PPUSH
3800: CALL_OW 292
3804: NOT
3805: AND
3806: IFFALSE 3820
// SetFuel ( usCargo2 , 100 ) ;
3808: LD_EXP 27
3812: PPUSH
3813: LD_INT 100
3815: PPUSH
3816: CALL_OW 240
// if not HasTask ( usCargo2 ) and GetCargo ( usCargo2 , mat_cans ) < 100 and not enemyInArea then
3820: LD_EXP 27
3824: PPUSH
3825: CALL_OW 314
3829: NOT
3830: IFFALSE 3850
3832: PUSH
3833: LD_EXP 27
3837: PPUSH
3838: LD_INT 1
3840: PPUSH
3841: CALL_OW 289
3845: PUSH
3846: LD_INT 100
3848: LESS
3849: AND
3850: IFFALSE 3859
3852: PUSH
3853: LD_VAR 0 2
3857: NOT
3858: AND
3859: IFFALSE 3925
// begin if cr then
3861: LD_VAR 0 1
3865: IFFALSE 3896
// ComCollect ( usCargo2 , cr [ 1 ] , cr [ 2 ] ) else
3867: LD_EXP 27
3871: PPUSH
3872: LD_VAR 0 1
3876: PUSH
3877: LD_INT 1
3879: ARRAY
3880: PPUSH
3881: LD_VAR 0 1
3885: PUSH
3886: LD_INT 2
3888: ARRAY
3889: PPUSH
3890: CALL_OW 117
3894: GO 3923
// if not IsInArea ( usCargo2 , amCrates2Area ) then
3896: LD_EXP 27
3900: PPUSH
3901: LD_INT 17
3903: PPUSH
3904: CALL_OW 308
3908: NOT
3909: IFFALSE 3923
// ComMoveToArea ( usCargo2 , amCrates2Area ) ;
3911: LD_EXP 27
3915: PPUSH
3916: LD_INT 17
3918: PPUSH
3919: CALL_OW 113
// exit ;
3923: GO 3991
// end ; if enemyInArea and not IsInArea ( usCargo2 , americanBaseSouthArea ) then
3925: LD_VAR 0 2
3929: IFFALSE 3946
3931: PUSH
3932: LD_EXP 27
3936: PPUSH
3937: LD_INT 11
3939: PPUSH
3940: CALL_OW 308
3944: NOT
3945: AND
3946: IFFALSE 3965
// ComMoveXY ( usCargo2 , 85 , 153 ) else
3948: LD_EXP 27
3952: PPUSH
3953: LD_INT 85
3955: PPUSH
3956: LD_INT 153
3958: PPUSH
3959: CALL_OW 111
3963: GO 3991
// if GetCargo ( usCargo2 , mat_cans ) then
3965: LD_EXP 27
3969: PPUSH
3970: LD_INT 1
3972: PPUSH
3973: CALL_OW 289
3977: IFFALSE 3991
// ComGive ( usCargo2 , usDep2 ) ;
3979: LD_EXP 27
3983: PPUSH
3984: LD_INT 40
3986: PPUSH
3987: CALL_OW 161
// end ; end_of_file
3991: PPOPN 2
3993: END
// export function PrepareAttack ( area , n ) ; var i , un ; begin
3994: LD_INT 0
3996: PPUSH
3997: PPUSH
3998: PPUSH
// for i := 1 to n do
3999: LD_ADDR_VAR 0 4
4003: PUSH
4004: DOUBLE
4005: LD_INT 1
4007: DEC
4008: ST_TO_ADDR
4009: LD_VAR 0 2
4013: PUSH
4014: FOR_TO
4015: IFFALSE 4278
// begin uc_side := 6 ;
4017: LD_ADDR_OWVAR 20
4021: PUSH
4022: LD_INT 6
4024: ST_TO_ADDR
// uc_nation := 3 ;
4025: LD_ADDR_OWVAR 21
4029: PUSH
4030: LD_INT 3
4032: ST_TO_ADDR
// vc_chassis := [ ru_heavy_wheeled , ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 3 ) ] ;
4033: LD_ADDR_OWVAR 37
4037: PUSH
4038: LD_INT 23
4040: PUSH
4041: LD_INT 22
4043: PUSH
4044: LD_INT 23
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: LIST
4051: PUSH
4052: LD_INT 1
4054: PPUSH
4055: LD_INT 3
4057: PPUSH
4058: CALL_OW 12
4062: ARRAY
4063: ST_TO_ADDR
// vc_control := control_computer ;
4064: LD_ADDR_OWVAR 38
4068: PUSH
4069: LD_INT 3
4071: ST_TO_ADDR
// vc_engine := engine_combustion ;
4072: LD_ADDR_OWVAR 39
4076: PUSH
4077: LD_INT 1
4079: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , 3 ) ] ;
4080: LD_ADDR_OWVAR 40
4084: PUSH
4085: LD_INT 43
4087: PUSH
4088: LD_INT 44
4090: PUSH
4091: LD_INT 46
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: LIST
4098: PUSH
4099: LD_INT 1
4101: PPUSH
4102: LD_INT 3
4104: PPUSH
4105: CALL_OW 12
4109: ARRAY
4110: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4111: LD_OWVAR 40
4115: PUSH
4116: LD_INT 46
4118: EQUAL
4119: IFFALSE 4129
// vc_chassis := ru_heavy_wheeled ;
4121: LD_ADDR_OWVAR 37
4125: PUSH
4126: LD_INT 23
4128: ST_TO_ADDR
// vc_fuel_battery := 80 ;
4129: LD_ADDR_OWVAR 41
4133: PUSH
4134: LD_INT 80
4136: ST_TO_ADDR
// un := CreateVehicle ;
4137: LD_ADDR_VAR 0 5
4141: PUSH
4142: CALL_OW 45
4146: ST_TO_ADDR
// case area of eastArr :
4147: LD_VAR 0 1
4151: PUSH
4152: LD_INT 7
4154: DOUBLE
4155: EQUAL
4156: IFTRUE 4160
4158: GO 4216
4160: POP
// begin SetDir ( un , 4 ) ;
4161: LD_VAR 0 5
4165: PPUSH
4166: LD_INT 4
4168: PPUSH
4169: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
4173: LD_INT 35
4175: PPUSH
4176: CALL_OW 67
// until PlaceUnitArea ( un , area , false ) ;
4180: LD_VAR 0 5
4184: PPUSH
4185: LD_VAR 0 1
4189: PPUSH
4190: LD_INT 0
4192: PPUSH
4193: CALL_OW 49
4197: IFFALSE 4173
// ComMoveXY ( un , 79 , 33 ) ;
4199: LD_VAR 0 5
4203: PPUSH
4204: LD_INT 79
4206: PPUSH
4207: LD_INT 33
4209: PPUSH
4210: CALL_OW 111
// end ; southArr :
4214: GO 4269
4216: LD_INT 8
4218: DOUBLE
4219: EQUAL
4220: IFTRUE 4224
4222: GO 4268
4224: POP
// begin repeat wait ( 0 0$1 ) ;
4225: LD_INT 35
4227: PPUSH
4228: CALL_OW 67
// until PlaceUnitArea ( un , area , false ) ;
4232: LD_VAR 0 5
4236: PPUSH
4237: LD_VAR 0 1
4241: PPUSH
4242: LD_INT 0
4244: PPUSH
4245: CALL_OW 49
4249: IFFALSE 4225
// ComMoveXY ( un , 131 , 148 ) ;
4251: LD_VAR 0 5
4255: PPUSH
4256: LD_INT 131
4258: PPUSH
4259: LD_INT 148
4261: PPUSH
4262: CALL_OW 111
// end ; end ;
4266: GO 4269
4268: POP
// wait ( 0 0$02 ) ;
4269: LD_INT 70
4271: PPUSH
4272: CALL_OW 67
// end ;
4276: GO 4014
4278: POP
4279: POP
// end ;
4280: LD_VAR 0 3
4284: RET
// export function PrepareConvoy ( area , n ) ; var i , un ; begin
4285: LD_INT 0
4287: PPUSH
4288: PPUSH
4289: PPUSH
// for i := 1 to n do
4290: LD_ADDR_VAR 0 4
4294: PUSH
4295: DOUBLE
4296: LD_INT 1
4298: DEC
4299: ST_TO_ADDR
4300: LD_VAR 0 2
4304: PUSH
4305: FOR_TO
4306: IFFALSE 4532
// begin uc_side := 6 ;
4308: LD_ADDR_OWVAR 20
4312: PUSH
4313: LD_INT 6
4315: ST_TO_ADDR
// uc_nation := 3 ;
4316: LD_ADDR_OWVAR 21
4320: PUSH
4321: LD_INT 3
4323: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
4324: LD_INT 0
4326: PPUSH
4327: LD_INT 3
4329: PPUSH
4330: LD_INT 4
4332: PPUSH
4333: CALL_OW 380
// vc_chassis := ru_medium_tracked ;
4337: LD_ADDR_OWVAR 37
4341: PUSH
4342: LD_INT 22
4344: ST_TO_ADDR
// vc_control := control_manual ;
4345: LD_ADDR_OWVAR 38
4349: PUSH
4350: LD_INT 1
4352: ST_TO_ADDR
// vc_engine := engine_combustion ;
4353: LD_ADDR_OWVAR 39
4357: PUSH
4358: LD_INT 1
4360: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
4361: LD_ADDR_OWVAR 40
4365: PUSH
4366: LD_INT 51
4368: ST_TO_ADDR
// vc_fuel_battery := 50 ;
4369: LD_ADDR_OWVAR 41
4373: PUSH
4374: LD_INT 50
4376: ST_TO_ADDR
// un := CreateVehicle ;
4377: LD_ADDR_VAR 0 5
4381: PUSH
4382: CALL_OW 45
4386: ST_TO_ADDR
// case area of eastArr :
4387: LD_VAR 0 1
4391: PUSH
4392: LD_INT 7
4394: DOUBLE
4395: EQUAL
4396: IFTRUE 4400
4398: GO 4415
4400: POP
// SetDir ( un , 4 ) ; southArr :
4401: LD_VAR 0 5
4405: PPUSH
4406: LD_INT 4
4408: PPUSH
4409: CALL_OW 233
4413: GO 4439
4415: LD_INT 8
4417: DOUBLE
4418: EQUAL
4419: IFTRUE 4423
4421: GO 4438
4423: POP
// SetDir ( un , 5 ) ; end ;
4424: LD_VAR 0 5
4428: PPUSH
4429: LD_INT 5
4431: PPUSH
4432: CALL_OW 233
4436: GO 4439
4438: POP
// PlaceUnitArea ( un , area , false ) ;
4439: LD_VAR 0 5
4443: PPUSH
4444: LD_VAR 0 1
4448: PPUSH
4449: LD_INT 0
4451: PPUSH
4452: CALL_OW 49
// PlaceHumanInUnit ( CreateHuman , un ) ;
4456: CALL_OW 44
4460: PPUSH
4461: LD_VAR 0 5
4465: PPUSH
4466: CALL_OW 52
// SetCargo ( un , mat_cans , 100 ) ;
4470: LD_VAR 0 5
4474: PPUSH
4475: LD_INT 1
4477: PPUSH
4478: LD_INT 100
4480: PPUSH
4481: CALL_OW 290
// ComMoveXY ( un , 106 , 88 ) ;
4485: LD_VAR 0 5
4489: PPUSH
4490: LD_INT 106
4492: PPUSH
4493: LD_INT 88
4495: PPUSH
4496: CALL_OW 111
// AddComUnload ( un ) ;
4500: LD_VAR 0 5
4504: PPUSH
4505: CALL_OW 219
// AddComMoveToArea ( un , area ) ;
4509: LD_VAR 0 5
4513: PPUSH
4514: LD_VAR 0 1
4518: PPUSH
4519: CALL_OW 173
// wait ( 0 0$02 ) ;
4523: LD_INT 70
4525: PPUSH
4526: CALL_OW 67
// end ;
4530: GO 4305
4532: POP
4533: POP
// wait ( 0 0$05 ) ;
4534: LD_INT 175
4536: PPUSH
4537: CALL_OW 67
// while ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) ) do
4541: LD_INT 22
4543: PUSH
4544: LD_INT 6
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PUSH
4551: LD_INT 34
4553: PUSH
4554: LD_INT 51
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PUSH
4561: EMPTY
4562: LIST
4563: LIST
4564: PPUSH
4565: CALL_OW 69
4569: IFFALSE 4774
// begin wait ( 0 0$01 ) ;
4571: LD_INT 35
4573: PPUSH
4574: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) do
4578: LD_ADDR_VAR 0 4
4582: PUSH
4583: LD_INT 22
4585: PUSH
4586: LD_INT 6
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: PUSH
4593: LD_INT 34
4595: PUSH
4596: LD_INT 51
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PPUSH
4607: CALL_OW 69
4611: PUSH
4612: FOR_IN
4613: IFFALSE 4770
// begin if IsInArea ( i , playerBaseArea ) and GetSex ( IsDrivenBy ( i ) ) = sex_male and dialogTrans then
4615: LD_VAR 0 4
4619: PPUSH
4620: LD_INT 2
4622: PPUSH
4623: CALL_OW 308
4627: IFFALSE 4649
4629: PUSH
4630: LD_VAR 0 4
4634: PPUSH
4635: CALL_OW 311
4639: PPUSH
4640: CALL_OW 258
4644: PUSH
4645: LD_INT 1
4647: EQUAL
4648: AND
4649: IFFALSE 4657
4651: PUSH
4652: LD_EXP 5
4656: AND
4657: IFFALSE 4684
// begin Say ( IsDrivenBy ( i ) , Dtran ) ;
4659: LD_VAR 0 4
4663: PPUSH
4664: CALL_OW 311
4668: PPUSH
4669: LD_STRING Dtran
4671: PPUSH
4672: CALL_OW 88
// dialogTrans := false ;
4676: LD_ADDR_EXP 5
4680: PUSH
4681: LD_INT 0
4683: ST_TO_ADDR
// end ; if IsIdle ( i ) then
4684: LD_VAR 0 4
4688: PPUSH
4689: CALL_OW 316
4693: IFFALSE 4709
// ComMoveToArea ( i , area ) ;
4695: LD_VAR 0 4
4699: PPUSH
4700: LD_VAR 0 1
4704: PPUSH
4705: CALL_OW 113
// if IsInArea ( i , area ) and GetCargo ( i , mat_cans ) = 0 then
4709: LD_VAR 0 4
4713: PPUSH
4714: LD_VAR 0 1
4718: PPUSH
4719: CALL_OW 308
4723: IFFALSE 4743
4725: PUSH
4726: LD_VAR 0 4
4730: PPUSH
4731: LD_INT 1
4733: PPUSH
4734: CALL_OW 289
4738: PUSH
4739: LD_INT 0
4741: EQUAL
4742: AND
4743: IFFALSE 4768
// begin RemoveUnit ( IsDrivenBy ( i ) ) ;
4745: LD_VAR 0 4
4749: PPUSH
4750: CALL_OW 311
4754: PPUSH
4755: CALL_OW 64
// RemoveUnit ( i ) ;
4759: LD_VAR 0 4
4763: PPUSH
4764: CALL_OW 64
// end ; end ;
4768: GO 4612
4770: POP
4771: POP
// end ;
4772: GO 4541
// end ;
4774: LD_VAR 0 3
4778: RET
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) do var i , tmp ;
4779: LD_INT 22
4781: PUSH
4782: LD_INT 6
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PUSH
4789: LD_INT 21
4791: PUSH
4792: LD_INT 2
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PUSH
4799: LD_INT 3
4801: PUSH
4802: LD_INT 34
4804: PUSH
4805: LD_INT 51
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: EMPTY
4817: LIST
4818: LIST
4819: LIST
4820: PPUSH
4821: CALL_OW 69
4825: IFFALSE 4988
4827: GO 4829
4829: DISABLE
4830: LD_INT 0
4832: PPUSH
4833: PPUSH
// begin repeat wait ( 0 0$3 ) ;
4834: LD_INT 105
4836: PPUSH
4837: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) ;
4841: LD_ADDR_VAR 0 2
4845: PUSH
4846: LD_INT 22
4848: PUSH
4849: LD_INT 6
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: LD_INT 21
4858: PUSH
4859: LD_INT 2
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: PUSH
4866: LD_INT 50
4868: PUSH
4869: EMPTY
4870: LIST
4871: PUSH
4872: LD_INT 3
4874: PUSH
4875: LD_INT 34
4877: PUSH
4878: LD_INT 51
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: PPUSH
4895: CALL_OW 69
4899: ST_TO_ADDR
// for i in tmp do
4900: LD_ADDR_VAR 0 1
4904: PUSH
4905: LD_VAR 0 2
4909: PUSH
4910: FOR_IN
4911: IFFALSE 4978
// if not HasTask ( i ) and GetLives ( i ) > 250 then
4913: LD_VAR 0 1
4917: PPUSH
4918: CALL_OW 314
4922: NOT
4923: IFFALSE 4940
4925: PUSH
4926: LD_VAR 0 1
4930: PPUSH
4931: CALL_OW 256
4935: PUSH
4936: LD_INT 250
4938: GREATER
4939: AND
4940: IFFALSE 4976
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 6 ] ) , i ) ) ;
4942: LD_VAR 0 1
4946: PPUSH
4947: LD_INT 81
4949: PUSH
4950: LD_INT 6
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: PPUSH
4957: CALL_OW 69
4961: PPUSH
4962: LD_VAR 0 1
4966: PPUSH
4967: CALL_OW 74
4971: PPUSH
4972: CALL_OW 115
4976: GO 4910
4978: POP
4979: POP
// until not tmp ;
4980: LD_VAR 0 2
4984: NOT
4985: IFFALSE 4834
// enable ;
4987: ENABLE
// end ; end_of_file
4988: PPOPN 2
4990: END
// export Commanders , Player , Gladkov , Davidov , Gorki , Stolypin , playerSquad , playerCom ; export function InitCommanders ( commander ) ; var i , skill , tmp , team , veh ; begin
4991: LD_INT 0
4993: PPUSH
4994: PPUSH
4995: PPUSH
4996: PPUSH
4997: PPUSH
4998: PPUSH
// uc_side := your_side ;
4999: LD_ADDR_OWVAR 20
5003: PUSH
5004: LD_OWVAR 2
5008: ST_TO_ADDR
// uc_nation := nation_russian ;
5009: LD_ADDR_OWVAR 21
5013: PUSH
5014: LD_INT 3
5016: ST_TO_ADDR
// Gladkov := NewCharacter ( Gladkov ) ;
5017: LD_ADDR_EXP 30
5021: PUSH
5022: LD_STRING Gladkov
5024: PPUSH
5025: CALL_OW 25
5029: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
5030: LD_ADDR_EXP 31
5034: PUSH
5035: LD_STRING Davidov
5037: PPUSH
5038: CALL_OW 25
5042: ST_TO_ADDR
// Gorki := NewCharacter ( Burlak ) ;
5043: LD_ADDR_EXP 32
5047: PUSH
5048: LD_STRING Burlak
5050: PPUSH
5051: CALL_OW 25
5055: ST_TO_ADDR
// Stolypin := NewCharacter ( Stolypin ) ;
5056: LD_ADDR_EXP 33
5060: PUSH
5061: LD_STRING Stolypin
5063: PPUSH
5064: CALL_OW 25
5068: ST_TO_ADDR
// commanders := [ Gladkov , Davidov , Gorki , Stolypin ] ;
5069: LD_ADDR_EXP 28
5073: PUSH
5074: LD_EXP 30
5078: PUSH
5079: LD_EXP 31
5083: PUSH
5084: LD_EXP 32
5088: PUSH
5089: LD_EXP 33
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: ST_TO_ADDR
// playerCom := commanders [ commander ] ;
5100: LD_ADDR_EXP 35
5104: PUSH
5105: LD_EXP 28
5109: PUSH
5110: LD_VAR 0 1
5114: ARRAY
5115: ST_TO_ADDR
// team := [ ] ;
5116: LD_ADDR_VAR 0 6
5120: PUSH
5121: EMPTY
5122: ST_TO_ADDR
// skill := [ 4 , 3 , 3 ] [ Difficulty ] ;
5123: LD_ADDR_VAR 0 4
5127: PUSH
5128: LD_INT 4
5130: PUSH
5131: LD_INT 3
5133: PUSH
5134: LD_INT 3
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: LIST
5141: PUSH
5142: LD_OWVAR 67
5146: ARRAY
5147: ST_TO_ADDR
// uc_side := 3 ;
5148: LD_ADDR_OWVAR 20
5152: PUSH
5153: LD_INT 3
5155: ST_TO_ADDR
// uc_nation := 3 ;
5156: LD_ADDR_OWVAR 21
5160: PUSH
5161: LD_INT 3
5163: ST_TO_ADDR
// hc_gallery :=  ;
5164: LD_ADDR_OWVAR 33
5168: PUSH
5169: LD_STRING 
5171: ST_TO_ADDR
// hc_name :=  ;
5172: LD_ADDR_OWVAR 26
5176: PUSH
5177: LD_STRING 
5179: ST_TO_ADDR
// hc_importance := 0 ;
5180: LD_ADDR_OWVAR 32
5184: PUSH
5185: LD_INT 0
5187: ST_TO_ADDR
// case playerCom of Gladkov :
5188: LD_EXP 35
5192: PUSH
5193: LD_EXP 30
5197: DOUBLE
5198: EQUAL
5199: IFTRUE 5203
5201: GO 5356
5203: POP
// begin for i := 1 to 6 do
5204: LD_ADDR_VAR 0 3
5208: PUSH
5209: DOUBLE
5210: LD_INT 1
5212: DEC
5213: ST_TO_ADDR
5214: LD_INT 6
5216: PUSH
5217: FOR_TO
5218: IFFALSE 5261
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
5220: LD_INT 0
5222: PPUSH
5223: LD_INT 1
5225: PPUSH
5226: LD_VAR 0 4
5230: PUSH
5231: LD_INT 1
5233: PLUS
5234: PPUSH
5235: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
5239: LD_ADDR_VAR 0 6
5243: PUSH
5244: LD_VAR 0 6
5248: PPUSH
5249: CALL_OW 44
5253: PPUSH
5254: CALL 76286 0 2
5258: ST_TO_ADDR
// end ;
5259: GO 5217
5261: POP
5262: POP
// for i := 1 to 8 do
5263: LD_ADDR_VAR 0 3
5267: PUSH
5268: DOUBLE
5269: LD_INT 1
5271: DEC
5272: ST_TO_ADDR
5273: LD_INT 8
5275: PUSH
5276: FOR_TO
5277: IFFALSE 5326
// begin PrepareHuman ( false , ( i mod 3 ) + 2 , skill ) ;
5279: LD_INT 0
5281: PPUSH
5282: LD_VAR 0 3
5286: PUSH
5287: LD_INT 3
5289: MOD
5290: PUSH
5291: LD_INT 2
5293: PLUS
5294: PPUSH
5295: LD_VAR 0 4
5299: PPUSH
5300: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
5304: LD_ADDR_VAR 0 6
5308: PUSH
5309: LD_VAR 0 6
5313: PPUSH
5314: CALL_OW 44
5318: PPUSH
5319: CALL 76286 0 2
5323: ST_TO_ADDR
// end ;
5324: GO 5276
5326: POP
5327: POP
// SetTech ( tech_bazooka , 3 , state_enabled ) ;
5328: LD_INT 44
5330: PPUSH
5331: LD_INT 3
5333: PPUSH
5334: LD_INT 1
5336: PPUSH
5337: CALL_OW 322
// SetTech ( tech_advmet , 3 , state_enabled ) ;
5341: LD_INT 34
5343: PPUSH
5344: LD_INT 3
5346: PPUSH
5347: LD_INT 1
5349: PPUSH
5350: CALL_OW 322
// end ; Davidov :
5354: GO 6251
5356: LD_EXP 31
5360: DOUBLE
5361: EQUAL
5362: IFTRUE 5366
5364: GO 5667
5366: POP
// begin for i := 1 to 6 do
5367: LD_ADDR_VAR 0 3
5371: PUSH
5372: DOUBLE
5373: LD_INT 1
5375: DEC
5376: ST_TO_ADDR
5377: LD_INT 6
5379: PUSH
5380: FOR_TO
5381: IFFALSE 5424
// begin PrepareHuman ( false , 4 , skill + 1 ) ;
5383: LD_INT 0
5385: PPUSH
5386: LD_INT 4
5388: PPUSH
5389: LD_VAR 0 4
5393: PUSH
5394: LD_INT 1
5396: PLUS
5397: PPUSH
5398: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
5402: LD_ADDR_VAR 0 6
5406: PUSH
5407: LD_VAR 0 6
5411: PPUSH
5412: CALL_OW 44
5416: PPUSH
5417: CALL 76286 0 2
5421: ST_TO_ADDR
// end ;
5422: GO 5380
5424: POP
5425: POP
// for i := 1 to 8 do
5426: LD_ADDR_VAR 0 3
5430: PUSH
5431: DOUBLE
5432: LD_INT 1
5434: DEC
5435: ST_TO_ADDR
5436: LD_INT 8
5438: PUSH
5439: FOR_TO
5440: IFFALSE 5489
// begin PrepareHuman ( false , ( i mod 3 ) + 1 , skill ) ;
5442: LD_INT 0
5444: PPUSH
5445: LD_VAR 0 3
5449: PUSH
5450: LD_INT 3
5452: MOD
5453: PUSH
5454: LD_INT 1
5456: PLUS
5457: PPUSH
5458: LD_VAR 0 4
5462: PPUSH
5463: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
5467: LD_ADDR_VAR 0 6
5471: PUSH
5472: LD_VAR 0 6
5476: PPUSH
5477: CALL_OW 44
5481: PPUSH
5482: CALL 76286 0 2
5486: ST_TO_ADDR
// end ;
5487: GO 5439
5489: POP
5490: POP
// SetTech ( tech_advmet , 3 , state_enabled ) ;
5491: LD_INT 34
5493: PPUSH
5494: LD_INT 3
5496: PPUSH
5497: LD_INT 1
5499: PPUSH
5500: CALL_OW 322
// SetTech ( tech_ai , 3 , state_enabled ) ;
5504: LD_INT 32
5506: PPUSH
5507: LD_INT 3
5509: PPUSH
5510: LD_INT 1
5512: PPUSH
5513: CALL_OW 322
// SetTech ( tech_advai , 3 , state_enabled ) ;
5517: LD_INT 27
5519: PPUSH
5520: LD_INT 3
5522: PPUSH
5523: LD_INT 1
5525: PPUSH
5526: CALL_OW 322
// SetTech ( 30 , 3 , state_enabled ) ;
5530: LD_INT 30
5532: PPUSH
5533: LD_INT 3
5535: PPUSH
5536: LD_INT 1
5538: PPUSH
5539: CALL_OW 322
// SetTech ( 63 , 3 , state_enabled ) ;
5543: LD_INT 63
5545: PPUSH
5546: LD_INT 3
5548: PPUSH
5549: LD_INT 1
5551: PPUSH
5552: CALL_OW 322
// SetTech ( tech_comp1 , 3 , state_enabled ) ;
5556: LD_INT 57
5558: PPUSH
5559: LD_INT 3
5561: PPUSH
5562: LD_INT 1
5564: PPUSH
5565: CALL_OW 322
// SetTech ( tech_comp2 , 3 , state_enabled ) ;
5569: LD_INT 58
5571: PPUSH
5572: LD_INT 3
5574: PPUSH
5575: LD_INT 1
5577: PPUSH
5578: CALL_OW 322
// SetRestrict ( b_lab_full , 3 , state_enabled ) ;
5582: LD_INT 8
5584: PPUSH
5585: LD_INT 3
5587: PPUSH
5588: LD_INT 1
5590: PPUSH
5591: CALL_OW 324
// SetRestrict ( b_lab_computer , 3 , state_enabled ) ;
5595: LD_INT 12
5597: PPUSH
5598: LD_INT 3
5600: PPUSH
5601: LD_INT 1
5603: PPUSH
5604: CALL_OW 324
// SetRestrict ( b_lab_spacetime , 3 , state_enabled ) ;
5608: LD_INT 14
5610: PPUSH
5611: LD_INT 3
5613: PPUSH
5614: LD_INT 1
5616: PPUSH
5617: CALL_OW 324
// SetRestrict ( b_ext_computer , 3 , state_enabled ) ;
5621: LD_INT 24
5623: PPUSH
5624: LD_INT 3
5626: PPUSH
5627: LD_INT 1
5629: PPUSH
5630: CALL_OW 324
// SetRestrict ( b_turret , 3 , state_enabled ) ;
5634: LD_INT 33
5636: PPUSH
5637: LD_INT 3
5639: PPUSH
5640: LD_INT 1
5642: PPUSH
5643: CALL_OW 324
// SetResourceType ( GetBase ( playerDepot ) , 3 , 20 ) ;
5647: LD_INT 1
5649: PPUSH
5650: CALL_OW 274
5654: PPUSH
5655: LD_INT 3
5657: PPUSH
5658: LD_INT 20
5660: PPUSH
5661: CALL_OW 277
// end ; Gorki :
5665: GO 6251
5667: LD_EXP 32
5671: DOUBLE
5672: EQUAL
5673: IFTRUE 5677
5675: GO 5936
5677: POP
// begin for i := 1 to 6 do
5678: LD_ADDR_VAR 0 3
5682: PUSH
5683: DOUBLE
5684: LD_INT 1
5686: DEC
5687: ST_TO_ADDR
5688: LD_INT 6
5690: PUSH
5691: FOR_TO
5692: IFFALSE 5735
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
5694: LD_INT 0
5696: PPUSH
5697: LD_INT 3
5699: PPUSH
5700: LD_VAR 0 4
5704: PUSH
5705: LD_INT 1
5707: PLUS
5708: PPUSH
5709: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
5713: LD_ADDR_VAR 0 6
5717: PUSH
5718: LD_VAR 0 6
5722: PPUSH
5723: CALL_OW 44
5727: PPUSH
5728: CALL 76286 0 2
5732: ST_TO_ADDR
// end ;
5733: GO 5691
5735: POP
5736: POP
// for i := 1 to 8 do
5737: LD_ADDR_VAR 0 3
5741: PUSH
5742: DOUBLE
5743: LD_INT 1
5745: DEC
5746: ST_TO_ADDR
5747: LD_INT 8
5749: PUSH
5750: FOR_TO
5751: IFFALSE 5813
// begin PrepareHuman ( false , [ 1 , 2 , 4 ] [ Rand ( 1 , 3 ) ] , skill ) ;
5753: LD_INT 0
5755: PPUSH
5756: LD_INT 1
5758: PUSH
5759: LD_INT 2
5761: PUSH
5762: LD_INT 4
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: LIST
5769: PUSH
5770: LD_INT 1
5772: PPUSH
5773: LD_INT 3
5775: PPUSH
5776: CALL_OW 12
5780: ARRAY
5781: PPUSH
5782: LD_VAR 0 4
5786: PPUSH
5787: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
5791: LD_ADDR_VAR 0 6
5795: PUSH
5796: LD_VAR 0 6
5800: PPUSH
5801: CALL_OW 44
5805: PPUSH
5806: CALL 76286 0 2
5810: ST_TO_ADDR
// end ;
5811: GO 5750
5813: POP
5814: POP
// SetTech ( tech_rocket , 3 , state_enabled ) ;
5815: LD_INT 40
5817: PPUSH
5818: LD_INT 3
5820: PPUSH
5821: LD_INT 1
5823: PPUSH
5824: CALL_OW 322
// SetTech ( tech_advmet , 3 , state_enabled ) ;
5828: LD_INT 34
5830: PPUSH
5831: LD_INT 3
5833: PPUSH
5834: LD_INT 1
5836: PPUSH
5837: CALL_OW 322
// SetRestrict ( b_ext_rocket , 3 , state_enabled ) ;
5841: LD_INT 18
5843: PPUSH
5844: LD_INT 3
5846: PPUSH
5847: LD_INT 1
5849: PPUSH
5850: CALL_OW 324
// vc_chassis := ru_medium_tracked ;
5854: LD_ADDR_OWVAR 37
5858: PUSH
5859: LD_INT 22
5861: ST_TO_ADDR
// vc_engine := engine_combustion ;
5862: LD_ADDR_OWVAR 39
5866: PUSH
5867: LD_INT 1
5869: ST_TO_ADDR
// vc_control := control_manual ;
5870: LD_ADDR_OWVAR 38
5874: PUSH
5875: LD_INT 1
5877: ST_TO_ADDR
// vc_weapon := ru_rocket_launcher ;
5878: LD_ADDR_OWVAR 40
5882: PUSH
5883: LD_INT 45
5885: ST_TO_ADDR
// vc_fuel_battery := 50 ;
5886: LD_ADDR_OWVAR 41
5890: PUSH
5891: LD_INT 50
5893: ST_TO_ADDR
// veh := CreateVehicle ;
5894: LD_ADDR_VAR 0 7
5898: PUSH
5899: CALL_OW 45
5903: ST_TO_ADDR
// SetMark ( veh , 1 ) ;
5904: LD_VAR 0 7
5908: PPUSH
5909: LD_INT 1
5911: PPUSH
5912: CALL_OW 242
// PlaceUnitXY ( veh , 107 , 83 , false ) ;
5916: LD_VAR 0 7
5920: PPUSH
5921: LD_INT 107
5923: PPUSH
5924: LD_INT 83
5926: PPUSH
5927: LD_INT 0
5929: PPUSH
5930: CALL_OW 48
// end ; Stolypin :
5934: GO 6251
5936: LD_EXP 33
5940: DOUBLE
5941: EQUAL
5942: IFTRUE 5946
5944: GO 6250
5946: POP
// begin for i := 1 to 6 do
5947: LD_ADDR_VAR 0 3
5951: PUSH
5952: DOUBLE
5953: LD_INT 1
5955: DEC
5956: ST_TO_ADDR
5957: LD_INT 6
5959: PUSH
5960: FOR_TO
5961: IFFALSE 6004
// begin PrepareHuman ( false , 2 , skill + 1 ) ;
5963: LD_INT 0
5965: PPUSH
5966: LD_INT 2
5968: PPUSH
5969: LD_VAR 0 4
5973: PUSH
5974: LD_INT 1
5976: PLUS
5977: PPUSH
5978: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
5982: LD_ADDR_VAR 0 6
5986: PUSH
5987: LD_VAR 0 6
5991: PPUSH
5992: CALL_OW 44
5996: PPUSH
5997: CALL 76286 0 2
6001: ST_TO_ADDR
// end ;
6002: GO 5960
6004: POP
6005: POP
// for i := 1 to 8 do
6006: LD_ADDR_VAR 0 3
6010: PUSH
6011: DOUBLE
6012: LD_INT 1
6014: DEC
6015: ST_TO_ADDR
6016: LD_INT 8
6018: PUSH
6019: FOR_TO
6020: IFFALSE 6082
// begin PrepareHuman ( false , [ 1 , 3 , 4 ] [ Rand ( 1 , 3 ) ] , skill ) ;
6022: LD_INT 0
6024: PPUSH
6025: LD_INT 1
6027: PUSH
6028: LD_INT 3
6030: PUSH
6031: LD_INT 4
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: LIST
6038: PUSH
6039: LD_INT 1
6041: PPUSH
6042: LD_INT 3
6044: PPUSH
6045: CALL_OW 12
6049: ARRAY
6050: PPUSH
6051: LD_VAR 0 4
6055: PPUSH
6056: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
6060: LD_ADDR_VAR 0 6
6064: PUSH
6065: LD_VAR 0 6
6069: PPUSH
6070: CALL_OW 44
6074: PPUSH
6075: CALL 76286 0 2
6079: ST_TO_ADDR
// end ;
6080: GO 6019
6082: POP
6083: POP
// SetTech ( tech_advmet , 3 , state_enabled ) ;
6084: LD_INT 34
6086: PPUSH
6087: LD_INT 3
6089: PPUSH
6090: LD_INT 1
6092: PPUSH
6093: CALL_OW 322
// vc_chassis := ru_medium_tracked ;
6097: LD_ADDR_OWVAR 37
6101: PUSH
6102: LD_INT 22
6104: ST_TO_ADDR
// vc_engine := engine_combustion ;
6105: LD_ADDR_OWVAR 39
6109: PUSH
6110: LD_INT 1
6112: ST_TO_ADDR
// vc_control := control_manual ;
6113: LD_ADDR_OWVAR 38
6117: PUSH
6118: LD_INT 1
6120: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
6121: LD_ADDR_OWVAR 40
6125: PUSH
6126: LD_INT 51
6128: ST_TO_ADDR
// vc_fuel_battery := 30 ;
6129: LD_ADDR_OWVAR 41
6133: PUSH
6134: LD_INT 30
6136: ST_TO_ADDR
// veh := CreateVehicle ;
6137: LD_ADDR_VAR 0 7
6141: PUSH
6142: CALL_OW 45
6146: ST_TO_ADDR
// SetCargo ( veh , 1 , 100 ) ;
6147: LD_VAR 0 7
6151: PPUSH
6152: LD_INT 1
6154: PPUSH
6155: LD_INT 100
6157: PPUSH
6158: CALL_OW 290
// PlaceUnitXY ( veh , 107 , 83 , false ) ;
6162: LD_VAR 0 7
6166: PPUSH
6167: LD_INT 107
6169: PPUSH
6170: LD_INT 83
6172: PPUSH
6173: LD_INT 0
6175: PPUSH
6176: CALL_OW 48
// vc_chassis := ru_medium_tracked ;
6180: LD_ADDR_OWVAR 37
6184: PUSH
6185: LD_INT 22
6187: ST_TO_ADDR
// vc_engine := engine_combustion ;
6188: LD_ADDR_OWVAR 39
6192: PUSH
6193: LD_INT 1
6195: ST_TO_ADDR
// vc_control := control_manual ;
6196: LD_ADDR_OWVAR 38
6200: PUSH
6201: LD_INT 1
6203: ST_TO_ADDR
// vc_weapon := ru_crane ;
6204: LD_ADDR_OWVAR 40
6208: PUSH
6209: LD_INT 52
6211: ST_TO_ADDR
// vc_fuel_battery := 30 ;
6212: LD_ADDR_OWVAR 41
6216: PUSH
6217: LD_INT 30
6219: ST_TO_ADDR
// veh := CreateVehicle ;
6220: LD_ADDR_VAR 0 7
6224: PUSH
6225: CALL_OW 45
6229: ST_TO_ADDR
// PlaceUnitXY ( veh , 115 , 96 , false ) ;
6230: LD_VAR 0 7
6234: PPUSH
6235: LD_INT 115
6237: PPUSH
6238: LD_INT 96
6240: PPUSH
6241: LD_INT 0
6243: PPUSH
6244: CALL_OW 48
// end ; end ;
6248: GO 6251
6250: POP
// if isTest then
6251: LD_EXP 1
6255: IFFALSE 6277
// tmp := ShrinkArray ( team , 7 ) else
6257: LD_ADDR_VAR 0 5
6261: PUSH
6262: LD_VAR 0 6
6266: PPUSH
6267: LD_INT 7
6269: PPUSH
6270: CALL 76601 0 2
6274: ST_TO_ADDR
6275: GO 6368
// tmp := CharacterSelection ( text , [ 9 , 8 , 7 ] [ Difficulty ] , [ 9 , 8 , 7 ] [ Difficulty ] , [ sel_not_hired , sel_change_class , sel_changeable ] ^ team , [ class_soldier , class_engineer , class_mechanic , class_scientistic ] ) ;
6277: LD_ADDR_VAR 0 5
6281: PUSH
6282: LD_STRING text
6284: PPUSH
6285: LD_INT 9
6287: PUSH
6288: LD_INT 8
6290: PUSH
6291: LD_INT 7
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: LIST
6298: PUSH
6299: LD_OWVAR 67
6303: ARRAY
6304: PPUSH
6305: LD_INT 9
6307: PUSH
6308: LD_INT 8
6310: PUSH
6311: LD_INT 7
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_OWVAR 67
6323: ARRAY
6324: PPUSH
6325: LD_INT -2
6327: PUSH
6328: LD_INT -5
6330: PUSH
6331: LD_INT -3
6333: PUSH
6334: EMPTY
6335: LIST
6336: LIST
6337: LIST
6338: PUSH
6339: LD_VAR 0 6
6343: ADD
6344: PPUSH
6345: LD_INT 1
6347: PUSH
6348: LD_INT 2
6350: PUSH
6351: LD_INT 3
6353: PUSH
6354: LD_INT 4
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: PPUSH
6363: CALL_OW 42
6367: ST_TO_ADDR
// playerSquad := tmp ;
6368: LD_ADDR_EXP 34
6372: PUSH
6373: LD_VAR 0 5
6377: ST_TO_ADDR
// SetDir ( playerCom , 4 ) ;
6378: LD_EXP 35
6382: PPUSH
6383: LD_INT 4
6385: PPUSH
6386: CALL_OW 233
// PlaceUnitArea ( playerCom , eastArr , false ) ;
6390: LD_EXP 35
6394: PPUSH
6395: LD_INT 7
6397: PPUSH
6398: LD_INT 0
6400: PPUSH
6401: CALL_OW 49
// ComHold ( playerCom ) ;
6405: LD_EXP 35
6409: PPUSH
6410: CALL_OW 140
// for i := 1 to [ 5 , 4 , 4 ] [ Difficulty ] do
6414: LD_ADDR_VAR 0 3
6418: PUSH
6419: DOUBLE
6420: LD_INT 1
6422: DEC
6423: ST_TO_ADDR
6424: LD_INT 5
6426: PUSH
6427: LD_INT 4
6429: PUSH
6430: LD_INT 4
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: LIST
6437: PUSH
6438: LD_OWVAR 67
6442: ARRAY
6443: PUSH
6444: FOR_TO
6445: IFFALSE 6511
// begin uc_side := 6 ;
6447: LD_ADDR_OWVAR 20
6451: PUSH
6452: LD_INT 6
6454: ST_TO_ADDR
// uc_nation := nation_russian ;
6455: LD_ADDR_OWVAR 21
6459: PUSH
6460: LD_INT 3
6462: ST_TO_ADDR
// PrepareHuman ( false , i mod 4 + 1 , skill ) ;
6463: LD_INT 0
6465: PPUSH
6466: LD_VAR 0 3
6470: PUSH
6471: LD_INT 4
6473: MOD
6474: PUSH
6475: LD_INT 1
6477: PLUS
6478: PPUSH
6479: LD_VAR 0 4
6483: PPUSH
6484: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 104 , 88 , 3 , false ) ;
6488: CALL_OW 44
6492: PPUSH
6493: LD_INT 104
6495: PPUSH
6496: LD_INT 88
6498: PPUSH
6499: LD_INT 3
6501: PPUSH
6502: LD_INT 0
6504: PPUSH
6505: CALL_OW 50
// end ;
6509: GO 6444
6511: POP
6512: POP
// end ;
6513: LD_VAR 0 2
6517: RET
// export Popov ; export function InitAction ; var commander ; begin
6518: LD_INT 0
6520: PPUSH
6521: PPUSH
// ChangeSideFog ( 6 , 3 ) ;
6522: LD_INT 6
6524: PPUSH
6525: LD_INT 3
6527: PPUSH
6528: CALL_OW 343
// CenterNowOnXY ( 1 , 1 ) ;
6532: LD_INT 1
6534: PPUSH
6535: LD_INT 1
6537: PPUSH
6538: CALL_OW 86
// uc_side := 6 ;
6542: LD_ADDR_OWVAR 20
6546: PUSH
6547: LD_INT 6
6549: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
6550: LD_ADDR_EXP 36
6554: PUSH
6555: LD_STRING Popov
6557: PPUSH
6558: CALL_OW 25
6562: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
6563: LD_ADDR_OWVAR 67
6567: PUSH
6568: LD_INT 0
6570: PPUSH
6571: CALL_OW 426
6575: ST_TO_ADDR
// if not Difficulty then
6576: LD_OWVAR 67
6580: NOT
6581: IFFALSE 6591
// Difficulty := 2 ;
6583: LD_ADDR_OWVAR 67
6587: PUSH
6588: LD_INT 2
6590: ST_TO_ADDR
// commander := GetMultiplayerSetting ( 1 ) ;
6591: LD_ADDR_VAR 0 2
6595: PUSH
6596: LD_INT 1
6598: PPUSH
6599: CALL_OW 426
6603: ST_TO_ADDR
// if not commander then
6604: LD_VAR 0 2
6608: NOT
6609: IFFALSE 6619
// commander := 1 ;
6611: LD_ADDR_VAR 0 2
6615: PUSH
6616: LD_INT 1
6618: ST_TO_ADDR
// InitCommanders ( commander ) ;
6619: LD_VAR 0 2
6623: PPUSH
6624: CALL 4991 0 1
// end ;
6628: LD_VAR 0 1
6632: RET
// every 0 0$03 do var i ;
6633: GO 6635
6635: DISABLE
6636: LD_INT 0
6638: PPUSH
// begin repeat wait ( rand ( 1 1$25 , 3 3$00 ) ) ;
6639: LD_INT 2975
6641: PPUSH
6642: LD_INT 6300
6644: PPUSH
6645: CALL_OW 12
6649: PPUSH
6650: CALL_OW 67
// for i := 1 to 2 do
6654: LD_ADDR_VAR 0 1
6658: PUSH
6659: DOUBLE
6660: LD_INT 1
6662: DEC
6663: ST_TO_ADDR
6664: LD_INT 2
6666: PUSH
6667: FOR_TO
6668: IFFALSE 6764
// begin repeat wait ( 0 0$3 ) ;
6670: LD_INT 105
6672: PPUSH
6673: CALL_OW 67
// until PlaceUnitArea ( playerSquad [ 1 ] , eastArr , false ) ;
6677: LD_EXP 34
6681: PUSH
6682: LD_INT 1
6684: ARRAY
6685: PPUSH
6686: LD_INT 7
6688: PPUSH
6689: LD_INT 0
6691: PPUSH
6692: CALL_OW 49
6696: IFFALSE 6670
// ComMoveXY ( playerSquad [ 1 ] , 107 , 88 ) ;
6698: LD_EXP 34
6702: PUSH
6703: LD_INT 1
6705: ARRAY
6706: PPUSH
6707: LD_INT 107
6709: PPUSH
6710: LD_INT 88
6712: PPUSH
6713: CALL_OW 111
// SetSide ( playerSquad [ 1 ] , 3 ) ;
6717: LD_EXP 34
6721: PUSH
6722: LD_INT 1
6724: ARRAY
6725: PPUSH
6726: LD_INT 3
6728: PPUSH
6729: CALL_OW 235
// playerSquad := Delete ( playerSquad , 1 ) ;
6733: LD_ADDR_EXP 34
6737: PUSH
6738: LD_EXP 34
6742: PPUSH
6743: LD_INT 1
6745: PPUSH
6746: CALL_OW 3
6750: ST_TO_ADDR
// if not playerSquad then
6751: LD_EXP 34
6755: NOT
6756: IFFALSE 6762
// exit ;
6758: POP
6759: POP
6760: GO 6773
// end ;
6762: GO 6667
6764: POP
6765: POP
// until not playerSquad ;
6766: LD_EXP 34
6770: NOT
6771: IFFALSE 6639
// end ; end_of_file
6773: PPOPN 1
6775: END
// export function Action ; var i ; begin
6776: LD_INT 0
6778: PPUSH
6779: PPUSH
// if not isTest then
6780: LD_EXP 1
6784: NOT
6785: IFFALSE 6794
// Query ( task ) ;
6787: LD_STRING task
6789: PPUSH
6790: CALL_OW 97
// PlaceSeeing ( 105 , 84 , 3 , - 30 ) ;
6794: LD_INT 105
6796: PPUSH
6797: LD_INT 84
6799: PPUSH
6800: LD_INT 3
6802: PPUSH
6803: LD_INT 30
6805: NEG
6806: PPUSH
6807: CALL_OW 330
// RemoveSeeing ( 105 , 84 , 3 ) ;
6811: LD_INT 105
6813: PPUSH
6814: LD_INT 84
6816: PPUSH
6817: LD_INT 3
6819: PPUSH
6820: CALL_OW 331
// InGameOn ;
6824: CALL_OW 8
// CenterNowOnXY ( 128 , 64 ) ;
6828: LD_INT 128
6830: PPUSH
6831: LD_INT 64
6833: PPUSH
6834: CALL_OW 86
// if isTest then
6838: LD_EXP 1
6842: IFFALSE 6852
// dialogue_skipped := true ;
6844: LD_ADDR_OWVAR 59
6848: PUSH
6849: LD_INT 1
6851: ST_TO_ADDR
// SayRadio ( Popov , DR1 ) ;
6852: LD_EXP 36
6856: PPUSH
6857: LD_STRING DR1
6859: PPUSH
6860: CALL_OW 94
// SayRadio ( Popov , DR2 ) ;
6864: LD_EXP 36
6868: PPUSH
6869: LD_STRING DR2
6871: PPUSH
6872: CALL_OW 94
// SayRadio ( Popov , DR3 ) ;
6876: LD_EXP 36
6880: PPUSH
6881: LD_STRING DR3
6883: PPUSH
6884: CALL_OW 94
// InGameOff ;
6888: CALL_OW 9
// ChangeMissionObjectives ( C1 ) ;
6892: LD_STRING C1
6894: PPUSH
6895: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
6899: LD_INT 35
6901: PPUSH
6902: CALL_OW 67
// until FilterUnitsInArea ( playerBaseArea , [ f_side , 3 ] ) ;
6906: LD_INT 2
6908: PPUSH
6909: LD_INT 22
6911: PUSH
6912: LD_INT 3
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PPUSH
6919: CALL_OW 70
6923: IFFALSE 6899
// for i in FilterUnitsInArea ( playerBaseArea , [ f_side , 6 ] ) do
6925: LD_ADDR_VAR 0 2
6929: PUSH
6930: LD_INT 2
6932: PPUSH
6933: LD_INT 22
6935: PUSH
6936: LD_INT 6
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PPUSH
6943: CALL_OW 70
6947: PUSH
6948: FOR_IN
6949: IFFALSE 6965
// SetSide ( i , 3 ) ;
6951: LD_VAR 0 2
6955: PPUSH
6956: LD_INT 3
6958: PPUSH
6959: CALL_OW 235
6963: GO 6948
6965: POP
6966: POP
// if not isTest then
6967: LD_EXP 1
6971: NOT
6972: IFFALSE 6981
// Query ( support ) ;
6974: LD_STRING support
6976: PPUSH
6977: CALL_OW 97
// SetArtifactUse ( 3 , art_use_exclamation , art_instant , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ) ;
6981: LD_INT 3
6983: PPUSH
6984: LD_INT 12
6986: PPUSH
6987: LD_INT 2
6989: PPUSH
6990: LD_INT 22
6992: PUSH
6993: LD_INT 3
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: LD_INT 30
7002: PUSH
7003: LD_INT 0
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: PPUSH
7014: CALL_OW 69
7018: PUSH
7019: LD_INT 1
7021: ARRAY
7022: PPUSH
7023: CALL_OW 468
// if playerCom = Stolypin then
7027: LD_EXP 35
7031: PUSH
7032: LD_EXP 33
7036: EQUAL
7037: IFFALSE 7066
// PrepareConvoy ( eastArr , [ 3 , 3 , 2 ] [ Difficulty ] ) ;
7039: LD_INT 7
7041: PPUSH
7042: LD_INT 3
7044: PUSH
7045: LD_INT 3
7047: PUSH
7048: LD_INT 2
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: LIST
7055: PUSH
7056: LD_OWVAR 67
7060: ARRAY
7061: PPUSH
7062: CALL 4285 0 2
// end ;
7066: LD_VAR 0 1
7070: RET
// every 0 0$01 trigger tick > [ 12 12$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] do var n ;
7071: LD_OWVAR 1
7075: PUSH
7076: LD_INT 25200
7078: PUSH
7079: LD_INT 23100
7081: PUSH
7082: LD_INT 21000
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: LIST
7089: PUSH
7090: LD_OWVAR 67
7094: ARRAY
7095: GREATER
7096: IFFALSE 7225
7098: GO 7100
7100: DISABLE
7101: LD_INT 0
7103: PPUSH
// begin n := [ 3 , 4 , 5 ] [ Difficulty ] ;
7104: LD_ADDR_VAR 0 1
7108: PUSH
7109: LD_INT 3
7111: PUSH
7112: LD_INT 4
7114: PUSH
7115: LD_INT 5
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: LIST
7122: PUSH
7123: LD_OWVAR 67
7127: ARRAY
7128: ST_TO_ADDR
// repeat wait ( rand ( 0 0$30 , 2 2$00 ) ) ;
7129: LD_INT 1050
7131: PPUSH
7132: LD_INT 4200
7134: PPUSH
7135: CALL_OW 12
7139: PPUSH
7140: CALL_OW 67
// SayRadio ( Popov , DR5 ) ;
7144: LD_EXP 36
7148: PPUSH
7149: LD_STRING DR5
7151: PPUSH
7152: CALL_OW 94
// PrepareAlfaAttack ( northArr , n ) ;
7156: LD_INT 9
7158: PPUSH
7159: LD_VAR 0 1
7163: PPUSH
7164: CALL 1292 0 2
// wait ( rand ( 4 4$00 , 6 6$00 ) ) ;
7168: LD_INT 8400
7170: PPUSH
7171: LD_INT 12600
7173: PPUSH
7174: CALL_OW 12
7178: PPUSH
7179: CALL_OW 67
// n := n + 1 ;
7183: LD_ADDR_VAR 0 1
7187: PUSH
7188: LD_VAR 0 1
7192: PUSH
7193: LD_INT 1
7195: PLUS
7196: ST_TO_ADDR
// if n > 12 then
7197: LD_VAR 0 1
7201: PUSH
7202: LD_INT 12
7204: GREATER
7205: IFFALSE 7215
// n := 12 ;
7207: LD_ADDR_VAR 0 1
7211: PUSH
7212: LD_INT 12
7214: ST_TO_ADDR
// until tick >= 120 120$00 ;
7215: LD_OWVAR 1
7219: PUSH
7220: LD_INT 252000
7222: GREATEREQUAL
7223: IFFALSE 7129
// end ;
7225: PPOPN 1
7227: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 do
7228: LD_INT 22
7230: PUSH
7231: LD_INT 1
7233: PUSH
7234: EMPTY
7235: LIST
7236: LIST
7237: PUSH
7238: LD_INT 21
7240: PUSH
7241: LD_INT 1
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: PUSH
7248: LD_INT 50
7250: PUSH
7251: EMPTY
7252: LIST
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: LIST
7258: PPUSH
7259: CALL_OW 69
7263: PUSH
7264: LD_INT 0
7266: EQUAL
7267: IFFALSE 7310
7269: PUSH
7270: LD_INT 22
7272: PUSH
7273: LD_INT 4
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PUSH
7280: LD_INT 21
7282: PUSH
7283: LD_INT 1
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: PUSH
7290: LD_INT 50
7292: PUSH
7293: EMPTY
7294: LIST
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: LIST
7300: PPUSH
7301: CALL_OW 69
7305: PUSH
7306: LD_INT 0
7308: EQUAL
7309: AND
7310: IFFALSE 7616
7312: GO 7314
7314: DISABLE
// begin DialogueOn ;
7315: CALL_OW 6
// SayRadio ( Popov , DR7 ) ;
7319: LD_EXP 36
7323: PPUSH
7324: LD_STRING DR7
7326: PPUSH
7327: CALL_OW 94
// case playerCom of Gorki :
7331: LD_EXP 35
7335: PUSH
7336: LD_EXP 32
7340: DOUBLE
7341: EQUAL
7342: IFTRUE 7346
7344: GO 7356
7346: POP
// SetAchievement ( ACH_GORKI ) ; Stolypin :
7347: LD_STRING ACH_GORKI
7349: PPUSH
7350: CALL_OW 543
7354: GO 7417
7356: LD_EXP 33
7360: DOUBLE
7361: EQUAL
7362: IFTRUE 7366
7364: GO 7376
7366: POP
// SetAchievement ( ACH_STOLYP ) ; Davidov :
7367: LD_STRING ACH_STOLYP
7369: PPUSH
7370: CALL_OW 543
7374: GO 7417
7376: LD_EXP 31
7380: DOUBLE
7381: EQUAL
7382: IFTRUE 7386
7384: GO 7396
7386: POP
// SetAchievement ( ACH_DAVIDOV ) ; Gladkov :
7387: LD_STRING ACH_DAVIDOV
7389: PPUSH
7390: CALL_OW 543
7394: GO 7417
7396: LD_EXP 30
7400: DOUBLE
7401: EQUAL
7402: IFTRUE 7406
7404: GO 7416
7406: POP
// SetAchievement ( ACH_GLADKOV ) ; end ;
7407: LD_STRING ACH_GLADKOV
7409: PPUSH
7410: CALL_OW 543
7414: GO 7417
7416: POP
// if not callUsed then
7417: LD_EXP 2
7421: NOT
7422: IFFALSE 7431
// SetAchievement ( ACH_NOSUPP ) ;
7424: LD_STRING ACH_NOSUPP
7426: PPUSH
7427: CALL_OW 543
// if ( tick < [ 55 55$30 , 45 45$30 , 42 42$30 ] [ Difficulty ] ) then
7431: LD_OWVAR 1
7435: PUSH
7436: LD_INT 116550
7438: PUSH
7439: LD_INT 95550
7441: PUSH
7442: LD_INT 89250
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: LIST
7449: PUSH
7450: LD_OWVAR 67
7454: ARRAY
7455: LESS
7456: IFFALSE 7470
// AddMedal ( med1 , 1 ) else
7458: LD_STRING med1
7460: PPUSH
7461: LD_INT 1
7463: PPUSH
7464: CALL_OW 101
7468: GO 7481
// AddMedal ( med1 , - 1 ) ;
7470: LD_STRING med1
7472: PPUSH
7473: LD_INT 1
7475: NEG
7476: PPUSH
7477: CALL_OW 101
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) = 0 then
7481: LD_INT 81
7483: PUSH
7484: LD_INT 3
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: LD_INT 21
7493: PUSH
7494: LD_INT 3
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PPUSH
7505: CALL_OW 69
7509: PUSH
7510: LD_INT 0
7512: EQUAL
7513: IFFALSE 7527
// AddMedal ( med3 , 1 ) else
7515: LD_STRING med3
7517: PPUSH
7518: LD_INT 1
7520: PPUSH
7521: CALL_OW 101
7525: GO 7538
// AddMedal ( med3 , - 1 ) ;
7527: LD_STRING med3
7529: PPUSH
7530: LD_INT 1
7532: NEG
7533: PPUSH
7534: CALL_OW 101
// if playerLoss = 0 then
7538: LD_EXP 6
7542: PUSH
7543: LD_INT 0
7545: EQUAL
7546: IFFALSE 7560
// AddMedal ( med2 , 1 ) else
7548: LD_STRING med2
7550: PPUSH
7551: LD_INT 1
7553: PPUSH
7554: CALL_OW 101
7558: GO 7605
// if playerLoss > 0 and playerLoss < 3 then
7560: LD_EXP 6
7564: PUSH
7565: LD_INT 0
7567: GREATER
7568: IFFALSE 7580
7570: PUSH
7571: LD_EXP 6
7575: PUSH
7576: LD_INT 3
7578: LESS
7579: AND
7580: IFFALSE 7594
// AddMedal ( med2 , 2 ) else
7582: LD_STRING med2
7584: PPUSH
7585: LD_INT 2
7587: PPUSH
7588: CALL_OW 101
7592: GO 7605
// AddMedal ( med2 , - 1 ) ;
7594: LD_STRING med2
7596: PPUSH
7597: LD_INT 1
7599: NEG
7600: PPUSH
7601: CALL_OW 101
// GiveMedals ( MAIN ) ;
7605: LD_STRING MAIN
7607: PPUSH
7608: CALL_OW 102
// YouWin ;
7612: CALL_OW 103
// end ;
7616: END
// every 0 0$01 trigger IsDead ( playerCom ) do
7617: LD_EXP 35
7621: PPUSH
7622: CALL_OW 301
7626: IFFALSE 7693
7628: GO 7630
7630: DISABLE
// begin if IsOk ( Jakes ) then
7631: LD_EXP 3
7635: PPUSH
7636: CALL_OW 302
7640: IFFALSE 7656
// SayRadio ( Jakes , DJ5 ) else
7642: LD_EXP 3
7646: PPUSH
7647: LD_STRING DJ5
7649: PPUSH
7650: CALL_OW 94
7654: GO 7679
// if IsOk ( Sylvia ) then
7656: LD_EXP 4
7660: PPUSH
7661: CALL_OW 302
7665: IFFALSE 7679
// SayRadio ( Sylvia , DS5 ) ;
7667: LD_EXP 4
7671: PPUSH
7672: LD_STRING DS5
7674: PPUSH
7675: CALL_OW 94
// wait ( 0 0$01 ) ;
7679: LD_INT 35
7681: PPUSH
7682: CALL_OW 67
// YouLost ( dead ) ;
7686: LD_STRING dead
7688: PPUSH
7689: CALL_OW 104
// end ;
7693: END
// every 0 0$01 trigger IsDead ( playerDepot ) and not isTest do
7694: LD_INT 1
7696: PPUSH
7697: CALL_OW 301
7701: IFFALSE 7710
7703: PUSH
7704: LD_EXP 1
7708: NOT
7709: AND
7710: IFFALSE 7777
7712: GO 7714
7714: DISABLE
// begin if IsOk ( Sylvia ) then
7715: LD_EXP 4
7719: PPUSH
7720: CALL_OW 302
7724: IFFALSE 7740
// SayRadio ( Sylvia , DS5 ) else
7726: LD_EXP 4
7730: PPUSH
7731: LD_STRING DS5
7733: PPUSH
7734: CALL_OW 94
7738: GO 7763
// if IsOk ( Jakes ) then
7740: LD_EXP 3
7744: PPUSH
7745: CALL_OW 302
7749: IFFALSE 7763
// SayRadio ( Jakes , DJ5 ) ;
7751: LD_EXP 3
7755: PPUSH
7756: LD_STRING DJ5
7758: PPUSH
7759: CALL_OW 94
// wait ( 0 0$01 ) ;
7763: LD_INT 35
7765: PPUSH
7766: CALL_OW 67
// YouLost ( depot ) ;
7770: LD_STRING depot
7772: PPUSH
7773: CALL_OW 104
// end ; end_of_file
7777: END
// on ArtifactUsed ( side , button_type , x , y ) do var side1 , side4 ;
7778: LD_INT 0
7780: PPUSH
7781: PPUSH
// begin if call and tick < 12 12$00 then
7782: LD_EXP 7
7786: IFFALSE 7798
7788: PUSH
7789: LD_OWVAR 1
7793: PUSH
7794: LD_INT 25200
7796: LESS
7797: AND
7798: IFFALSE 7966
// case query ( call1 ) of 1 :
7800: LD_STRING call1
7802: PPUSH
7803: CALL_OW 97
7807: PUSH
7808: LD_INT 1
7810: DOUBLE
7811: EQUAL
7812: IFTRUE 7816
7814: GO 7954
7816: POP
// begin callUsed := true ;
7817: LD_ADDR_EXP 2
7821: PUSH
7822: LD_INT 1
7824: ST_TO_ADDR
// SetArtifactUse ( 3 , art_use_exclamation , art_gray , playerDepot ) ;
7825: LD_INT 3
7827: PPUSH
7828: LD_INT 12
7830: PPUSH
7831: LD_INT 1
7833: PPUSH
7834: LD_INT 1
7836: PPUSH
7837: CALL_OW 468
// call := false ;
7841: LD_ADDR_EXP 7
7845: PUSH
7846: LD_INT 0
7848: ST_TO_ADDR
// SayRadio ( Popov , DR6 ) ;
7849: LD_EXP 36
7853: PPUSH
7854: LD_STRING DR6
7856: PPUSH
7857: CALL_OW 94
// wait ( rand ( 1 1$00 , 3 3$00 ) ) ;
7861: LD_INT 2100
7863: PPUSH
7864: LD_INT 6300
7866: PPUSH
7867: CALL_OW 12
7871: PPUSH
7872: CALL_OW 67
// PrepareConvoy ( [ eastArr , southArr ] [ rand ( 1 , 2 ) ] , rand ( 1 , 2 ) ) ;
7876: LD_INT 7
7878: PUSH
7879: LD_INT 8
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: PUSH
7886: LD_INT 1
7888: PPUSH
7889: LD_INT 2
7891: PPUSH
7892: CALL_OW 12
7896: ARRAY
7897: PPUSH
7898: LD_INT 1
7900: PPUSH
7901: LD_INT 2
7903: PPUSH
7904: CALL_OW 12
7908: PPUSH
7909: CALL 4285 0 2
// wait ( rand ( 6 6$00 , 8 8$00 ) ) ;
7913: LD_INT 12600
7915: PPUSH
7916: LD_INT 16800
7918: PPUSH
7919: CALL_OW 12
7923: PPUSH
7924: CALL_OW 67
// call := true ;
7928: LD_ADDR_EXP 7
7932: PUSH
7933: LD_INT 1
7935: ST_TO_ADDR
// SetArtifactUse ( 3 , art_use_exclamation , art_instant , playerDepot ) ;
7936: LD_INT 3
7938: PPUSH
7939: LD_INT 12
7941: PPUSH
7942: LD_INT 2
7944: PPUSH
7945: LD_INT 1
7947: PPUSH
7948: CALL_OW 468
// end ; 2 :
7952: GO 7966
7954: LD_INT 2
7956: DOUBLE
7957: EQUAL
7958: IFTRUE 7962
7960: GO 7965
7962: POP
// ; end ;
7963: GO 7966
7965: POP
// if call and tick >= 12 12$00 then
7966: LD_EXP 7
7970: IFFALSE 7982
7972: PUSH
7973: LD_OWVAR 1
7977: PUSH
7978: LD_INT 25200
7980: GREATEREQUAL
7981: AND
7982: IFFALSE 8429
// case query ( call2 ) of 1 :
7984: LD_STRING call2
7986: PPUSH
7987: CALL_OW 97
7991: PUSH
7992: LD_INT 1
7994: DOUBLE
7995: EQUAL
7996: IFTRUE 8000
7998: GO 8250
8000: POP
// begin callUsed := true ;
8001: LD_ADDR_EXP 2
8005: PUSH
8006: LD_INT 1
8008: ST_TO_ADDR
// call := false ;
8009: LD_ADDR_EXP 7
8013: PUSH
8014: LD_INT 0
8016: ST_TO_ADDR
// side1 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] ] ) ;
8017: LD_ADDR_VAR 0 5
8021: PUSH
8022: LD_INT 22
8024: PUSH
8025: LD_INT 1
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: PUSH
8032: LD_INT 50
8034: PUSH
8035: EMPTY
8036: LIST
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PPUSH
8042: CALL_OW 69
8046: ST_TO_ADDR
// side4 := FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] ] ) ;
8047: LD_ADDR_VAR 0 6
8051: PUSH
8052: LD_INT 22
8054: PUSH
8055: LD_INT 4
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: LD_INT 50
8064: PUSH
8065: EMPTY
8066: LIST
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PPUSH
8072: CALL_OW 69
8076: ST_TO_ADDR
// if side1 and side4 then
8077: LD_VAR 0 5
8081: IFFALSE 8089
8083: PUSH
8084: LD_VAR 0 6
8088: AND
8089: IFFALSE 8139
// PrepareAttack ( [ eastArr , southArr ] [ rand ( 1 , 2 ) ] , [ 6 , 6 , 5 ] [ Difficulty ] ) else
8091: LD_INT 7
8093: PUSH
8094: LD_INT 8
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: PUSH
8101: LD_INT 1
8103: PPUSH
8104: LD_INT 2
8106: PPUSH
8107: CALL_OW 12
8111: ARRAY
8112: PPUSH
8113: LD_INT 6
8115: PUSH
8116: LD_INT 6
8118: PUSH
8119: LD_INT 5
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: LIST
8126: PUSH
8127: LD_OWVAR 67
8131: ARRAY
8132: PPUSH
8133: CALL 3994 0 2
8137: GO 8209
// if not side1 then
8139: LD_VAR 0 5
8143: NOT
8144: IFFALSE 8175
// PrepareAttack ( southArr , [ 7 , 6 , 5 ] [ Difficulty ] ) else
8146: LD_INT 8
8148: PPUSH
8149: LD_INT 7
8151: PUSH
8152: LD_INT 6
8154: PUSH
8155: LD_INT 5
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: LIST
8162: PUSH
8163: LD_OWVAR 67
8167: ARRAY
8168: PPUSH
8169: CALL 3994 0 2
8173: GO 8209
// if not side4 then
8175: LD_VAR 0 6
8179: NOT
8180: IFFALSE 8209
// PrepareAttack ( eastArr , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
8182: LD_INT 7
8184: PPUSH
8185: LD_INT 6
8187: PUSH
8188: LD_INT 6
8190: PUSH
8191: LD_INT 5
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: LIST
8198: PUSH
8199: LD_OWVAR 67
8203: ARRAY
8204: PPUSH
8205: CALL 3994 0 2
// wait ( rand ( 5 5$00 , 8 8$00 ) ) ;
8209: LD_INT 10500
8211: PPUSH
8212: LD_INT 16800
8214: PPUSH
8215: CALL_OW 12
8219: PPUSH
8220: CALL_OW 67
// call := true ;
8224: LD_ADDR_EXP 7
8228: PUSH
8229: LD_INT 1
8231: ST_TO_ADDR
// SetArtifactUse ( 3 , art_use_exclamation , art_instant , playerDepot ) ;
8232: LD_INT 3
8234: PPUSH
8235: LD_INT 12
8237: PPUSH
8238: LD_INT 2
8240: PPUSH
8241: LD_INT 1
8243: PPUSH
8244: CALL_OW 468
// end ; 2 :
8248: GO 8429
8250: LD_INT 2
8252: DOUBLE
8253: EQUAL
8254: IFTRUE 8258
8256: GO 8417
8258: POP
// begin callUsed := true ;
8259: LD_ADDR_EXP 2
8263: PUSH
8264: LD_INT 1
8266: ST_TO_ADDR
// SetArtifactUse ( 3 , art_use_exclamation , art_gray , playerDepot ) ;
8267: LD_INT 3
8269: PPUSH
8270: LD_INT 12
8272: PPUSH
8273: LD_INT 1
8275: PPUSH
8276: LD_INT 1
8278: PPUSH
8279: CALL_OW 468
// call := false ;
8283: LD_ADDR_EXP 7
8287: PUSH
8288: LD_INT 0
8290: ST_TO_ADDR
// SayRadio ( Popov , DR6 ) ;
8291: LD_EXP 36
8295: PPUSH
8296: LD_STRING DR6
8298: PPUSH
8299: CALL_OW 94
// wait ( rand ( 1 1$00 , 3 3$00 ) ) ;
8303: LD_INT 2100
8305: PPUSH
8306: LD_INT 6300
8308: PPUSH
8309: CALL_OW 12
8313: PPUSH
8314: CALL_OW 67
// PrepareConvoy ( [ eastArr , southArr ] [ rand ( 1 , 2 ) ] , [ 3 , 2 , 2 ] [ Difficulty ] - rand ( 0 , 1 ) ) ;
8318: LD_INT 7
8320: PUSH
8321: LD_INT 8
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: PUSH
8328: LD_INT 1
8330: PPUSH
8331: LD_INT 2
8333: PPUSH
8334: CALL_OW 12
8338: ARRAY
8339: PPUSH
8340: LD_INT 3
8342: PUSH
8343: LD_INT 2
8345: PUSH
8346: LD_INT 2
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: LIST
8353: PUSH
8354: LD_OWVAR 67
8358: ARRAY
8359: PUSH
8360: LD_INT 0
8362: PPUSH
8363: LD_INT 1
8365: PPUSH
8366: CALL_OW 12
8370: MINUS
8371: PPUSH
8372: CALL 4285 0 2
// wait ( rand ( 6 6$00 , 8 8$00 ) ) ;
8376: LD_INT 12600
8378: PPUSH
8379: LD_INT 16800
8381: PPUSH
8382: CALL_OW 12
8386: PPUSH
8387: CALL_OW 67
// call := true ;
8391: LD_ADDR_EXP 7
8395: PUSH
8396: LD_INT 1
8398: ST_TO_ADDR
// SetArtifactUse ( 3 , art_use_exclamation , art_instant , playerDepot ) ;
8399: LD_INT 3
8401: PPUSH
8402: LD_INT 12
8404: PPUSH
8405: LD_INT 2
8407: PPUSH
8408: LD_INT 1
8410: PPUSH
8411: CALL_OW 468
// end ; 3 :
8415: GO 8429
8417: LD_INT 3
8419: DOUBLE
8420: EQUAL
8421: IFTRUE 8425
8423: GO 8428
8425: POP
// ; end ;
8426: GO 8429
8428: POP
// end ;
8429: PPOPN 6
8431: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8432: LD_VAR 0 1
8436: PPUSH
8437: CALL 31927 0 1
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) and not alfaNorthTriggered then
8441: LD_VAR 0 1
8445: PUSH
8446: LD_INT 22
8448: PUSH
8449: LD_INT 1
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: PUSH
8456: LD_INT 21
8458: PUSH
8459: LD_INT 3
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PPUSH
8470: CALL_OW 69
8474: IN
8475: IFFALSE 8484
8477: PUSH
8478: LD_EXP 8
8482: NOT
8483: AND
8484: IFFALSE 8540
// begin alfaNorthTriggered := true ;
8486: LD_ADDR_EXP 8
8490: PUSH
8491: LD_INT 1
8493: ST_TO_ADDR
// SayRadio ( Jakes , DJ3 ) ;
8494: LD_EXP 3
8498: PPUSH
8499: LD_STRING DJ3
8501: PPUSH
8502: CALL_OW 94
// wait ( 0 0$30 ) ;
8506: LD_INT 1050
8508: PPUSH
8509: CALL_OW 67
// PrepareAlfaAttack ( northArr , [ 6 , 7 , 8 ] [ Difficulty ] ) ;
8513: LD_INT 9
8515: PPUSH
8516: LD_INT 6
8518: PUSH
8519: LD_INT 7
8521: PUSH
8522: LD_INT 8
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: LIST
8529: PUSH
8530: LD_OWVAR 67
8534: ARRAY
8535: PPUSH
8536: CALL 1292 0 2
// end ; if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) and not alfaSouthTriggered then
8540: LD_VAR 0 1
8544: PUSH
8545: LD_INT 22
8547: PUSH
8548: LD_INT 4
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: PUSH
8555: LD_INT 21
8557: PUSH
8558: LD_INT 3
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: PPUSH
8569: CALL_OW 69
8573: IN
8574: IFFALSE 8583
8576: PUSH
8577: LD_EXP 9
8581: NOT
8582: AND
8583: IFFALSE 8639
// begin alfaSouthTriggered := true ;
8585: LD_ADDR_EXP 9
8589: PUSH
8590: LD_INT 1
8592: ST_TO_ADDR
// SayRadio ( Sylvia , DS4 ) ;
8593: LD_EXP 4
8597: PPUSH
8598: LD_STRING DS4
8600: PPUSH
8601: CALL_OW 94
// wait ( 0 0$30 ) ;
8605: LD_INT 1050
8607: PPUSH
8608: CALL_OW 67
// PrepareAlfaAttack ( northArr , [ 6 , 7 , 8 ] [ Difficulty ] ) ;
8612: LD_INT 9
8614: PPUSH
8615: LD_INT 6
8617: PUSH
8618: LD_INT 7
8620: PUSH
8621: LD_INT 8
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: LIST
8628: PUSH
8629: LD_OWVAR 67
8633: ARRAY
8634: PPUSH
8635: CALL 1292 0 2
// end ; end ;
8639: PPOPN 1
8641: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) then
8642: LD_VAR 0 1
8646: PUSH
8647: LD_INT 22
8649: PUSH
8650: LD_INT 3
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: PUSH
8657: LD_INT 21
8659: PUSH
8660: LD_INT 1
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: PUSH
8667: LD_INT 23
8669: PUSH
8670: LD_INT 3
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: LIST
8681: PPUSH
8682: CALL_OW 69
8686: IN
8687: IFFALSE 8796
// begin if Prob ( 50 ) or lastRadioMsg + 1 1$00 > tick then
8689: LD_INT 50
8691: PPUSH
8692: CALL_OW 13
8696: IFTRUE 8714
8698: PUSH
8699: LD_EXP 12
8703: PUSH
8704: LD_INT 2100
8706: PLUS
8707: PUSH
8708: LD_OWVAR 1
8712: GREATER
8713: OR
8714: IFFALSE 8718
// exit ;
8716: GO 8796
// lastRadioMsg := tick ;
8718: LD_ADDR_EXP 12
8722: PUSH
8723: LD_OWVAR 1
8727: ST_TO_ADDR
// if killerSide = 1 then
8728: LD_VAR 0 2
8732: PUSH
8733: LD_INT 1
8735: EQUAL
8736: IFFALSE 8763
// begin if IsOk ( Jakes ) then
8738: LD_EXP 3
8742: PPUSH
8743: CALL_OW 302
8747: IFFALSE 8761
// SayRadio ( Jakes , DJ2 ) ;
8749: LD_EXP 3
8753: PPUSH
8754: LD_STRING DJ2
8756: PPUSH
8757: CALL_OW 94
// end else
8761: GO 8796
// if killerSide = 4 then
8763: LD_VAR 0 2
8767: PUSH
8768: LD_INT 4
8770: EQUAL
8771: IFFALSE 8796
// begin if IsOk ( Sylvia ) then
8773: LD_EXP 4
8777: PPUSH
8778: CALL_OW 302
8782: IFFALSE 8796
// SayRadio ( Sylvia , DS1 ) ;
8784: LD_EXP 4
8788: PPUSH
8789: LD_STRING DS1
8791: PPUSH
8792: CALL_OW 94
// end ; end ; end ;
8796: PPOPN 3
8798: END
// on VehicleConstructed ( vehicle , factory ) do var side ;
8799: LD_INT 0
8801: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
8802: LD_VAR 0 1
8806: PPUSH
8807: LD_VAR 0 2
8811: PPUSH
8812: CALL 31985 0 2
// side := GetSide ( vehicle ) ;
8816: LD_ADDR_VAR 0 3
8820: PUSH
8821: LD_VAR 0 1
8825: PPUSH
8826: CALL_OW 255
8830: ST_TO_ADDR
// if side = 1 then
8831: LD_VAR 0 3
8835: PUSH
8836: LD_INT 1
8838: EQUAL
8839: IFFALSE 9042
// begin usConstructList1 := Delete ( usConstructList1 , 1 ) ;
8841: LD_ADDR_EXP 20
8845: PUSH
8846: LD_EXP 20
8850: PPUSH
8851: LD_INT 1
8853: PPUSH
8854: CALL_OW 3
8858: ST_TO_ADDR
// if GetWeapon ( vehicle ) in [ us_cargo_bay ] then
8859: LD_VAR 0 1
8863: PPUSH
8864: CALL_OW 264
8868: PUSH
8869: LD_INT 12
8871: PUSH
8872: EMPTY
8873: LIST
8874: IN
8875: IFFALSE 8889
// begin usCargo1 := vehicle ;
8877: LD_ADDR_EXP 26
8881: PUSH
8882: LD_VAR 0 1
8886: ST_TO_ADDR
// exit ;
8887: GO 9253
// end ; if GetWeapon ( vehicle ) = us_crane then
8889: LD_VAR 0 1
8893: PPUSH
8894: CALL_OW 264
8898: PUSH
8899: LD_INT 13
8901: EQUAL
8902: IFFALSE 8926
// begin usVehicles1 := Join ( usVehicles1 , vehicle ) ;
8904: LD_ADDR_EXP 16
8908: PUSH
8909: LD_EXP 16
8913: PPUSH
8914: LD_VAR 0 1
8918: PPUSH
8919: CALL 76286 0 2
8923: ST_TO_ADDR
// exit ;
8924: GO 9253
// end ; if GetControl ( vehicle ) = control_manual then
8926: LD_VAR 0 1
8930: PPUSH
8931: CALL_OW 263
8935: PUSH
8936: LD_INT 1
8938: EQUAL
8939: IFFALSE 8980
// begin usVehicles1 := Join ( usVehicles1 , vehicle ) ;
8941: LD_ADDR_EXP 16
8945: PUSH
8946: LD_EXP 16
8950: PPUSH
8951: LD_VAR 0 1
8955: PPUSH
8956: CALL 76286 0 2
8960: ST_TO_ADDR
// SetTag ( IsDrivenBy ( vehicle ) , tMech ) ;
8961: LD_VAR 0 1
8965: PPUSH
8966: CALL_OW 311
8970: PPUSH
8971: LD_INT 7
8973: PPUSH
8974: CALL_OW 109
// end else
8978: GO 9042
// begin usAttackVehicles1 := Join ( usAttackVehicles1 , vehicle ) ;
8980: LD_ADDR_EXP 24
8984: PUSH
8985: LD_EXP 24
8989: PPUSH
8990: LD_VAR 0 1
8994: PPUSH
8995: CALL 76286 0 2
8999: ST_TO_ADDR
// if Count ( usAttackVehicles1 ) >= [ 3 , 5 , 7 ] [ Difficulty ] + attackWave1 then
9000: LD_EXP 24
9004: PPUSH
9005: CALL 40354 0 1
9009: PUSH
9010: LD_INT 3
9012: PUSH
9013: LD_INT 5
9015: PUSH
9016: LD_INT 7
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: LIST
9023: PUSH
9024: LD_OWVAR 67
9028: ARRAY
9029: PUSH
9030: LD_EXP 10
9034: PLUS
9035: GREATEREQUAL
9036: IFFALSE 9042
// SendUsAttack1 ;
9038: CALL 2557 0 0
// end ; end ; if side = 4 then
9042: LD_VAR 0 3
9046: PUSH
9047: LD_INT 4
9049: EQUAL
9050: IFFALSE 9253
// begin usConstructList2 := Delete ( usConstructList2 , 1 ) ;
9052: LD_ADDR_EXP 21
9056: PUSH
9057: LD_EXP 21
9061: PPUSH
9062: LD_INT 1
9064: PPUSH
9065: CALL_OW 3
9069: ST_TO_ADDR
// if GetWeapon ( vehicle ) in [ us_cargo_bay ] then
9070: LD_VAR 0 1
9074: PPUSH
9075: CALL_OW 264
9079: PUSH
9080: LD_INT 12
9082: PUSH
9083: EMPTY
9084: LIST
9085: IN
9086: IFFALSE 9100
// begin usCargo2 := vehicle ;
9088: LD_ADDR_EXP 27
9092: PUSH
9093: LD_VAR 0 1
9097: ST_TO_ADDR
// exit ;
9098: GO 9253
// end ; if GetWeapon ( vehicle ) = us_crane then
9100: LD_VAR 0 1
9104: PPUSH
9105: CALL_OW 264
9109: PUSH
9110: LD_INT 13
9112: EQUAL
9113: IFFALSE 9137
// begin usVehicles2 := Join ( usVehicles2 , vehicle ) ;
9115: LD_ADDR_EXP 17
9119: PUSH
9120: LD_EXP 17
9124: PPUSH
9125: LD_VAR 0 1
9129: PPUSH
9130: CALL 76286 0 2
9134: ST_TO_ADDR
// exit ;
9135: GO 9253
// end ; if GetControl ( vehicle ) = control_manual then
9137: LD_VAR 0 1
9141: PPUSH
9142: CALL_OW 263
9146: PUSH
9147: LD_INT 1
9149: EQUAL
9150: IFFALSE 9191
// begin usVehicles2 := Join ( usVehicles2 , vehicle ) ;
9152: LD_ADDR_EXP 17
9156: PUSH
9157: LD_EXP 17
9161: PPUSH
9162: LD_VAR 0 1
9166: PPUSH
9167: CALL 76286 0 2
9171: ST_TO_ADDR
// SetTag ( IsDrivenBy ( vehicle ) , tMech ) ;
9172: LD_VAR 0 1
9176: PPUSH
9177: CALL_OW 311
9181: PPUSH
9182: LD_INT 7
9184: PPUSH
9185: CALL_OW 109
// end else
9189: GO 9253
// begin usAttackVehicles2 := Join ( usAttackVehicles2 , vehicle ) ;
9191: LD_ADDR_EXP 25
9195: PUSH
9196: LD_EXP 25
9200: PPUSH
9201: LD_VAR 0 1
9205: PPUSH
9206: CALL 76286 0 2
9210: ST_TO_ADDR
// if Count ( usAttackVehicles2 ) >= [ 3 , 5 , 7 ] [ Difficulty ] + attackWave2 then
9211: LD_EXP 25
9215: PPUSH
9216: CALL 40354 0 1
9220: PUSH
9221: LD_INT 3
9223: PUSH
9224: LD_INT 5
9226: PUSH
9227: LD_INT 7
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: LIST
9234: PUSH
9235: LD_OWVAR 67
9239: ARRAY
9240: PUSH
9241: LD_EXP 11
9245: PLUS
9246: GREATEREQUAL
9247: IFFALSE 9253
// SendUsAttack2 ;
9249: CALL 3150 0 0
// end ; end ; end ;
9253: PPOPN 3
9255: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
9256: LD_VAR 0 1
9260: PPUSH
9261: CALL_OW 110
9265: PUSH
9266: LD_INT 7
9268: EQUAL
9269: IFFALSE 9283
// SetTag ( driver , 0 ) ;
9271: LD_VAR 0 1
9275: PPUSH
9276: LD_INT 0
9278: PPUSH
9279: CALL_OW 109
// end ;
9283: PPOPN 4
9285: END
// on EvacuateBuilding ( building , unit ) do begin if GetTag ( unit ) = tControlRemoteMech then
9286: LD_VAR 0 2
9290: PPUSH
9291: CALL_OW 110
9295: PUSH
9296: LD_INT 17
9298: EQUAL
9299: IFFALSE 9313
// SetTag ( unit , 0 ) ;
9301: LD_VAR 0 2
9305: PPUSH
9306: LD_INT 0
9308: PPUSH
9309: CALL_OW 109
// end ;
9313: PPOPN 2
9315: END
// on UpgradeComplete ( b ) do var side , btype ;
9316: LD_INT 0
9318: PPUSH
9319: PPUSH
// begin side := GetSide ( b ) ;
9320: LD_ADDR_VAR 0 2
9324: PUSH
9325: LD_VAR 0 1
9329: PPUSH
9330: CALL_OW 255
9334: ST_TO_ADDR
// btype := GetBType ( b ) ;
9335: LD_ADDR_VAR 0 3
9339: PUSH
9340: LD_VAR 0 1
9344: PPUSH
9345: CALL_OW 266
9349: ST_TO_ADDR
// if side = 1 then
9350: LD_VAR 0 2
9354: PUSH
9355: LD_INT 1
9357: EQUAL
9358: IFFALSE 9378
// begin usBuildingsToBuild1 := Delete ( usBuildingsToBuild1 , 1 ) ;
9360: LD_ADDR_EXP 22
9364: PUSH
9365: LD_EXP 22
9369: PPUSH
9370: LD_INT 1
9372: PPUSH
9373: CALL_OW 3
9377: ST_TO_ADDR
// end ; if side = 4 then
9378: LD_VAR 0 2
9382: PUSH
9383: LD_INT 4
9385: EQUAL
9386: IFFALSE 9406
// begin usBuildingsToBuild2 := Delete ( usBuildingsToBuild2 , 1 ) ;
9388: LD_ADDR_EXP 23
9392: PUSH
9393: LD_EXP 23
9397: PPUSH
9398: LD_INT 1
9400: PPUSH
9401: CALL_OW 3
9405: ST_TO_ADDR
// end ; end ;
9406: PPOPN 3
9408: END
// on ResearchComplete ( tech , lab ) do var side ;
9409: LD_INT 0
9411: PPUSH
// begin side := GetSide ( lab ) ;
9412: LD_ADDR_VAR 0 3
9416: PUSH
9417: LD_VAR 0 2
9421: PPUSH
9422: CALL_OW 255
9426: ST_TO_ADDR
// if side = 1 then
9427: LD_VAR 0 3
9431: PUSH
9432: LD_INT 1
9434: EQUAL
9435: IFFALSE 9453
// usTechs1 := usTechs1 diff tech ;
9437: LD_ADDR_EXP 18
9441: PUSH
9442: LD_EXP 18
9446: PUSH
9447: LD_VAR 0 1
9451: DIFF
9452: ST_TO_ADDR
// if side = 4 then
9453: LD_VAR 0 3
9457: PUSH
9458: LD_INT 4
9460: EQUAL
9461: IFFALSE 9479
// usTechs2 := usTechs2 diff tech ;
9463: LD_ADDR_EXP 19
9467: PUSH
9468: LD_EXP 19
9472: PUSH
9473: LD_VAR 0 1
9477: DIFF
9478: ST_TO_ADDR
// end ;
9479: PPOPN 3
9481: END
// on BuildingComplete ( b ) do var side , btype ;
9482: LD_INT 0
9484: PPUSH
9485: PPUSH
// begin side := GetSide ( b ) ;
9486: LD_ADDR_VAR 0 2
9490: PUSH
9491: LD_VAR 0 1
9495: PPUSH
9496: CALL_OW 255
9500: ST_TO_ADDR
// btype := GetBType ( b ) ;
9501: LD_ADDR_VAR 0 3
9505: PUSH
9506: LD_VAR 0 1
9510: PPUSH
9511: CALL_OW 266
9515: ST_TO_ADDR
// if side = 1 then
9516: LD_VAR 0 2
9520: PUSH
9521: LD_INT 1
9523: EQUAL
9524: IFFALSE 9544
// usBuildingsToBuild1 := Delete ( usBuildingsToBuild1 , 1 ) ;
9526: LD_ADDR_EXP 22
9530: PUSH
9531: LD_EXP 22
9535: PPUSH
9536: LD_INT 1
9538: PPUSH
9539: CALL_OW 3
9543: ST_TO_ADDR
// if side = 4 then
9544: LD_VAR 0 2
9548: PUSH
9549: LD_INT 4
9551: EQUAL
9552: IFFALSE 9572
// usBuildingsToBuild2 := Delete ( usBuildingsToBuild2 , 1 ) ;
9554: LD_ADDR_EXP 23
9558: PUSH
9559: LD_EXP 23
9563: PPUSH
9564: LD_INT 1
9566: PPUSH
9567: CALL_OW 3
9571: ST_TO_ADDR
// end ;
9572: PPOPN 3
9574: END
// on VehicleCaptured ( newId , oldId , oldSide , driver ) do begin if oldSide = 1 then
9575: LD_VAR 0 3
9579: PUSH
9580: LD_INT 1
9582: EQUAL
9583: IFFALSE 9631
// begin if oldId in usVehicles1 then
9585: LD_VAR 0 2
9589: PUSH
9590: LD_EXP 16
9594: IN
9595: IFFALSE 9615
// begin usVehicles1 := usVehicles1 diff oldId ;
9597: LD_ADDR_EXP 16
9601: PUSH
9602: LD_EXP 16
9606: PUSH
9607: LD_VAR 0 2
9611: DIFF
9612: ST_TO_ADDR
// end else
9613: GO 9631
// begin usAttackVehicles1 := usAttackVehicles1 diff oldId ;
9615: LD_ADDR_EXP 24
9619: PUSH
9620: LD_EXP 24
9624: PUSH
9625: LD_VAR 0 2
9629: DIFF
9630: ST_TO_ADDR
// end ; end ; if oldSide = 4 then
9631: LD_VAR 0 3
9635: PUSH
9636: LD_INT 4
9638: EQUAL
9639: IFFALSE 9687
// begin if oldId in usVehicles2 then
9641: LD_VAR 0 2
9645: PUSH
9646: LD_EXP 17
9650: IN
9651: IFFALSE 9671
// begin usVehicles2 := usVehicles2 diff oldId ;
9653: LD_ADDR_EXP 17
9657: PUSH
9658: LD_EXP 17
9662: PUSH
9663: LD_VAR 0 2
9667: DIFF
9668: ST_TO_ADDR
// end else
9669: GO 9687
// begin usAttackVehicles2 := usAttackVehicles2 diff oldId ;
9671: LD_ADDR_EXP 25
9675: PUSH
9676: LD_EXP 25
9680: PUSH
9681: LD_VAR 0 2
9685: DIFF
9686: ST_TO_ADDR
// end ; end ; end ;
9687: PPOPN 4
9689: END
// on ClassChanged ( un , oldClass , newClass ) do var tag ;
9690: LD_INT 0
9692: PPUSH
// begin tag := GetTag ( un ) ;
9693: LD_ADDR_VAR 0 4
9697: PUSH
9698: LD_VAR 0 1
9702: PPUSH
9703: CALL_OW 110
9707: ST_TO_ADDR
// if GetSide ( un ) in [ 1 , 4 ] then
9708: LD_VAR 0 1
9712: PPUSH
9713: CALL_OW 255
9717: PUSH
9718: LD_INT 1
9720: PUSH
9721: LD_INT 4
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: IN
9728: IFFALSE 9759
// if tag in [ tWannaBeMech , tWannaBeSold ] then
9730: LD_VAR 0 4
9734: PUSH
9735: LD_INT 14
9737: PUSH
9738: LD_INT 16
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: IN
9745: IFFALSE 9759
// SetTag ( un , 0 ) ;
9747: LD_VAR 0 1
9751: PPUSH
9752: LD_INT 0
9754: PPUSH
9755: CALL_OW 109
// end ; end_of_file
9759: PPOPN 4
9761: END
// export function BaseScript ( side , area , cratesArea , innerArea , outerArea , forces , vehicles , techs , constructList , buildingsToBuild , healPoint , parkingPoint , allowToPatrol ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , drivers , hurtUnits , enemy , vehicles2 , ct , cranes , barracks , enemyInBase , enemyOuterBase , empty , fac , emptyTowers , weapon , depot , enemySide ; begin
9762: LD_INT 0
9764: PPUSH
9765: PPUSH
9766: PPUSH
9767: PPUSH
9768: PPUSH
9769: PPUSH
9770: PPUSH
9771: PPUSH
9772: PPUSH
9773: PPUSH
9774: PPUSH
9775: PPUSH
9776: PPUSH
9777: PPUSH
9778: PPUSH
9779: PPUSH
9780: PPUSH
9781: PPUSH
9782: PPUSH
9783: PPUSH
9784: PPUSH
9785: PPUSH
9786: PPUSH
9787: PPUSH
9788: PPUSH
9789: PPUSH
9790: PPUSH
// enable ;
9791: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
9792: LD_ADDR_VAR 0 16
9796: PUSH
9797: LD_INT 81
9799: PUSH
9800: LD_VAR 0 1
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: PPUSH
9809: CALL_OW 69
9813: ST_TO_ADDR
// if tmp then
9814: LD_VAR 0 16
9818: IFFALSE 9839
// enemySide := GetSide ( tmp [ 1 ] ) ;
9820: LD_ADDR_VAR 0 40
9824: PUSH
9825: LD_VAR 0 16
9829: PUSH
9830: LD_INT 1
9832: ARRAY
9833: PPUSH
9834: CALL_OW 255
9838: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( innerArea , [ f_enemy , side ] ) ;
9839: LD_ADDR_VAR 0 33
9843: PUSH
9844: LD_VAR 0 4
9848: PPUSH
9849: LD_INT 81
9851: PUSH
9852: LD_VAR 0 1
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PPUSH
9861: CALL_OW 70
9865: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
9866: LD_ADDR_VAR 0 34
9870: PUSH
9871: LD_VAR 0 5
9875: PPUSH
9876: LD_INT 81
9878: PUSH
9879: LD_VAR 0 1
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PPUSH
9888: CALL_OW 70
9892: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9893: LD_ADDR_VAR 0 39
9897: PUSH
9898: LD_VAR 0 2
9902: PPUSH
9903: LD_INT 22
9905: PUSH
9906: LD_VAR 0 1
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: PUSH
9915: LD_INT 2
9917: PUSH
9918: LD_INT 30
9920: PUSH
9921: LD_INT 0
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: PUSH
9928: LD_INT 30
9930: PUSH
9931: LD_INT 1
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: LIST
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PPUSH
9947: CALL_OW 70
9951: ST_TO_ADDR
// if depot then
9952: LD_VAR 0 39
9956: IFFALSE 9972
// depot := depot [ 1 ] ;
9958: LD_ADDR_VAR 0 39
9962: PUSH
9963: LD_VAR 0 39
9967: PUSH
9968: LD_INT 1
9970: ARRAY
9971: ST_TO_ADDR
// fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
9972: LD_ADDR_VAR 0 36
9976: PUSH
9977: LD_VAR 0 2
9981: PPUSH
9982: LD_INT 22
9984: PUSH
9985: LD_VAR 0 1
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: PUSH
9994: LD_INT 30
9996: PUSH
9997: LD_INT 3
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: PUSH
10004: LD_INT 50
10006: PUSH
10007: EMPTY
10008: LIST
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: LIST
10014: PPUSH
10015: CALL_OW 70
10019: ST_TO_ADDR
// barracks := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
10020: LD_ADDR_VAR 0 32
10024: PUSH
10025: LD_VAR 0 2
10029: PPUSH
10030: LD_INT 22
10032: PUSH
10033: LD_VAR 0 1
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: PUSH
10042: LD_INT 2
10044: PUSH
10045: LD_INT 30
10047: PUSH
10048: LD_INT 4
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 30
10057: PUSH
10058: LD_INT 5
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: LIST
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: PPUSH
10074: CALL_OW 70
10078: ST_TO_ADDR
// if Count ( techs ) then
10079: LD_VAR 0 8
10083: PPUSH
10084: CALL 40354 0 1
10088: IFFALSE 10249
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
10090: LD_ADDR_VAR 0 18
10094: PUSH
10095: LD_VAR 0 2
10099: PPUSH
10100: LD_INT 22
10102: PUSH
10103: LD_VAR 0 1
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PUSH
10112: LD_INT 50
10114: PUSH
10115: EMPTY
10116: LIST
10117: PUSH
10118: LD_INT 2
10120: PUSH
10121: LD_INT 30
10123: PUSH
10124: LD_INT 6
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: PUSH
10131: LD_INT 30
10133: PUSH
10134: LD_INT 7
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: PUSH
10141: LD_INT 30
10143: PUSH
10144: LD_INT 8
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: LIST
10161: PPUSH
10162: CALL_OW 70
10166: ST_TO_ADDR
// if lab then
10167: LD_VAR 0 18
10171: IFFALSE 10247
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
10173: LD_VAR 0 18
10177: PUSH
10178: LD_INT 1
10180: ARRAY
10181: PPUSH
10182: CALL_OW 461
10186: PUSH
10187: LD_INT 2
10189: EQUAL
10190: IFFALSE 10247
// begin for i in techs do
10192: LD_ADDR_VAR 0 15
10196: PUSH
10197: LD_VAR 0 8
10201: PUSH
10202: FOR_IN
10203: IFFALSE 10245
// if CanBeResearched ( lab [ 1 ] , i ) then
10205: LD_VAR 0 18
10209: PUSH
10210: LD_INT 1
10212: ARRAY
10213: PPUSH
10214: LD_VAR 0 15
10218: PPUSH
10219: CALL_OW 430
10223: IFFALSE 10243
// begin AddComResearch ( lab [ 1 ] , i ) ;
10225: LD_VAR 0 18
10229: PUSH
10230: LD_INT 1
10232: ARRAY
10233: PPUSH
10234: LD_VAR 0 15
10238: PPUSH
10239: CALL_OW 184
// end ;
10243: GO 10202
10245: POP
10246: POP
// end ; end ; end else
10247: GO 10829
// if UnitFilter ( fac , [ f_not , [ f_full ] ] ) and Count ( UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_tag , 0 ] , [ f_class , 4 ] ] ) ) > 2 then
10249: LD_VAR 0 36
10253: PPUSH
10254: LD_INT 3
10256: PUSH
10257: LD_INT 62
10259: PUSH
10260: EMPTY
10261: LIST
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PPUSH
10267: CALL_OW 72
10271: IFFALSE 10331
10273: PUSH
10274: LD_VAR 0 6
10278: PPUSH
10279: LD_INT 3
10281: PUSH
10282: LD_INT 60
10284: PUSH
10285: EMPTY
10286: LIST
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PUSH
10292: LD_INT 120
10294: PUSH
10295: LD_INT 0
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: LD_INT 25
10304: PUSH
10305: LD_INT 4
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: LIST
10316: PPUSH
10317: CALL_OW 72
10321: PPUSH
10322: CALL 40354 0 1
10326: PUSH
10327: LD_INT 2
10329: GREATER
10330: AND
10331: IFFALSE 10540
// begin tmp := UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_tag , 0 ] , [ f_class , 4 ] ] ) ;
10333: LD_ADDR_VAR 0 16
10337: PUSH
10338: LD_VAR 0 6
10342: PPUSH
10343: LD_INT 3
10345: PUSH
10346: LD_INT 60
10348: PUSH
10349: EMPTY
10350: LIST
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: LD_INT 120
10358: PUSH
10359: LD_INT 0
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: LD_INT 25
10368: PUSH
10369: LD_INT 4
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: LIST
10380: PPUSH
10381: CALL_OW 72
10385: ST_TO_ADDR
// for i := tmp downto 2 do
10386: LD_ADDR_VAR 0 15
10390: PUSH
10391: DOUBLE
10392: LD_VAR 0 16
10396: INC
10397: ST_TO_ADDR
10398: LD_INT 2
10400: PUSH
10401: FOR_DOWNTO
10402: IFFALSE 10536
// begin if Count ( UnitsInside ( fac [ 1 ] ) ) + Count ( UnitFilter ( forces , [ f_tag , tWannaBeMech ] ) ) = 6 then
10404: LD_VAR 0 36
10408: PUSH
10409: LD_INT 1
10411: ARRAY
10412: PPUSH
10413: CALL_OW 313
10417: PPUSH
10418: CALL 40354 0 1
10422: PUSH
10423: LD_VAR 0 6
10427: PPUSH
10428: LD_INT 120
10430: PUSH
10431: LD_INT 14
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: PPUSH
10438: CALL_OW 72
10442: PPUSH
10443: CALL 40354 0 1
10447: PLUS
10448: PUSH
10449: LD_INT 6
10451: EQUAL
10452: IFFALSE 10456
// break ;
10454: GO 10536
// sci := tmp [ i ] ;
10456: LD_ADDR_VAR 0 24
10460: PUSH
10461: LD_VAR 0 16
10465: PUSH
10466: LD_VAR 0 15
10470: ARRAY
10471: ST_TO_ADDR
// SetTag ( sci , tWannaBeMech ) ;
10472: LD_VAR 0 24
10476: PPUSH
10477: LD_INT 14
10479: PPUSH
10480: CALL_OW 109
// if IsInUnit ( sci ) then
10484: LD_VAR 0 24
10488: PPUSH
10489: CALL_OW 310
10493: IFFALSE 10504
// ComExitBuilding ( sci ) ;
10495: LD_VAR 0 24
10499: PPUSH
10500: CALL_OW 122
// AddComEnterUnit ( sci , fac [ 1 ] ) ;
10504: LD_VAR 0 24
10508: PPUSH
10509: LD_VAR 0 36
10513: PUSH
10514: LD_INT 1
10516: ARRAY
10517: PPUSH
10518: CALL_OW 180
// AddComChangeProfession ( sci , class_mechanic ) ;
10522: LD_VAR 0 24
10526: PPUSH
10527: LD_INT 3
10529: PPUSH
10530: CALL_OW 183
// end ;
10534: GO 10401
10536: POP
10537: POP
// end else
10538: GO 10829
// if UnitFilter ( barracks , [ f_not , [ f_full ] ] ) and Count ( UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_tag , 0 ] , [ f_class , 4 ] ] ) ) > 2 then
10540: LD_VAR 0 32
10544: PPUSH
10545: LD_INT 3
10547: PUSH
10548: LD_INT 62
10550: PUSH
10551: EMPTY
10552: LIST
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PPUSH
10558: CALL_OW 72
10562: IFFALSE 10622
10564: PUSH
10565: LD_VAR 0 6
10569: PPUSH
10570: LD_INT 3
10572: PUSH
10573: LD_INT 60
10575: PUSH
10576: EMPTY
10577: LIST
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: PUSH
10583: LD_INT 120
10585: PUSH
10586: LD_INT 0
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PUSH
10593: LD_INT 25
10595: PUSH
10596: LD_INT 4
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: PPUSH
10608: CALL_OW 72
10612: PPUSH
10613: CALL 40354 0 1
10617: PUSH
10618: LD_INT 2
10620: GREATER
10621: AND
10622: IFFALSE 10829
// begin tmp := UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_tag , 0 ] , [ f_class , 4 ] ] ) ;
10624: LD_ADDR_VAR 0 16
10628: PUSH
10629: LD_VAR 0 6
10633: PPUSH
10634: LD_INT 3
10636: PUSH
10637: LD_INT 60
10639: PUSH
10640: EMPTY
10641: LIST
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: PUSH
10647: LD_INT 120
10649: PUSH
10650: LD_INT 0
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PUSH
10657: LD_INT 25
10659: PUSH
10660: LD_INT 4
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: PUSH
10667: EMPTY
10668: LIST
10669: LIST
10670: LIST
10671: PPUSH
10672: CALL_OW 72
10676: ST_TO_ADDR
// for i := tmp downto 2 do
10677: LD_ADDR_VAR 0 15
10681: PUSH
10682: DOUBLE
10683: LD_VAR 0 16
10687: INC
10688: ST_TO_ADDR
10689: LD_INT 2
10691: PUSH
10692: FOR_DOWNTO
10693: IFFALSE 10827
// begin if Count ( UnitsInside ( barracks [ 1 ] ) ) + Count ( UnitFilter ( forces , [ f_tag , tWannaBeSold ] ) ) = 6 then
10695: LD_VAR 0 32
10699: PUSH
10700: LD_INT 1
10702: ARRAY
10703: PPUSH
10704: CALL_OW 313
10708: PPUSH
10709: CALL 40354 0 1
10713: PUSH
10714: LD_VAR 0 6
10718: PPUSH
10719: LD_INT 120
10721: PUSH
10722: LD_INT 16
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PPUSH
10729: CALL_OW 72
10733: PPUSH
10734: CALL 40354 0 1
10738: PLUS
10739: PUSH
10740: LD_INT 6
10742: EQUAL
10743: IFFALSE 10747
// break ;
10745: GO 10827
// sci := tmp [ i ] ;
10747: LD_ADDR_VAR 0 24
10751: PUSH
10752: LD_VAR 0 16
10756: PUSH
10757: LD_VAR 0 15
10761: ARRAY
10762: ST_TO_ADDR
// SetTag ( sci , tWannaBeSold ) ;
10763: LD_VAR 0 24
10767: PPUSH
10768: LD_INT 16
10770: PPUSH
10771: CALL_OW 109
// if IsInUnit ( sci ) then
10775: LD_VAR 0 24
10779: PPUSH
10780: CALL_OW 310
10784: IFFALSE 10795
// ComExitBuilding ( sci ) ;
10786: LD_VAR 0 24
10790: PPUSH
10791: CALL_OW 122
// AddComEnterUnit ( sci , barracks [ 1 ] ) ;
10795: LD_VAR 0 24
10799: PPUSH
10800: LD_VAR 0 32
10804: PUSH
10805: LD_INT 1
10807: ARRAY
10808: PPUSH
10809: CALL_OW 180
// AddComChangeProfession ( sci , class_soldier ) ;
10813: LD_VAR 0 24
10817: PPUSH
10818: LD_INT 1
10820: PPUSH
10821: CALL_OW 183
// end ;
10825: GO 10692
10827: POP
10828: POP
// end ; if fac then
10829: LD_VAR 0 36
10833: IFFALSE 11148
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
10835: LD_VAR 0 36
10839: PUSH
10840: LD_INT 1
10842: ARRAY
10843: PPUSH
10844: CALL_OW 461
10848: PUSH
10849: LD_INT 2
10851: EQUAL
10852: IFFALSE 11148
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
10854: LD_ADDR_VAR 0 37
10858: PUSH
10859: LD_VAR 0 2
10863: PPUSH
10864: LD_INT 2
10866: PUSH
10867: LD_INT 30
10869: PUSH
10870: LD_INT 32
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: PUSH
10877: LD_INT 30
10879: PUSH
10880: LD_INT 33
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: LIST
10891: PUSH
10892: LD_INT 35
10894: PUSH
10895: LD_INT 0
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: PPUSH
10906: CALL_OW 70
10910: ST_TO_ADDR
// if emptyTowers then
10911: LD_VAR 0 37
10915: IFFALSE 10965
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
10917: LD_ADDR_VAR 0 38
10921: PUSH
10922: LD_VAR 0 37
10926: PUSH
10927: LD_INT 1
10929: ARRAY
10930: PPUSH
10931: LD_VAR 0 2
10935: PPUSH
10936: CALL 48645 0 2
10940: ST_TO_ADDR
// if weapon then
10941: LD_VAR 0 38
10945: IFFALSE 10965
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
10947: LD_VAR 0 37
10951: PUSH
10952: LD_INT 1
10954: ARRAY
10955: PPUSH
10956: LD_VAR 0 38
10960: PPUSH
10961: CALL_OW 148
// end ; if constructList then
10965: LD_VAR 0 9
10969: IFFALSE 11148
// for i := 1 to Count ( constructList ) do
10971: LD_ADDR_VAR 0 15
10975: PUSH
10976: DOUBLE
10977: LD_INT 1
10979: DEC
10980: ST_TO_ADDR
10981: LD_VAR 0 9
10985: PPUSH
10986: CALL 40354 0 1
10990: PUSH
10991: FOR_TO
10992: IFFALSE 11146
// begin if CanBeConstructed ( fac [ 1 ] , constructList [ i ] [ 1 ] , constructList [ i ] [ 2 ] , constructList [ i ] [ 3 ] , constructList [ i ] [ 4 ] ) then
10994: LD_VAR 0 36
10998: PUSH
10999: LD_INT 1
11001: ARRAY
11002: PPUSH
11003: LD_VAR 0 9
11007: PUSH
11008: LD_VAR 0 15
11012: ARRAY
11013: PUSH
11014: LD_INT 1
11016: ARRAY
11017: PPUSH
11018: LD_VAR 0 9
11022: PUSH
11023: LD_VAR 0 15
11027: ARRAY
11028: PUSH
11029: LD_INT 2
11031: ARRAY
11032: PPUSH
11033: LD_VAR 0 9
11037: PUSH
11038: LD_VAR 0 15
11042: ARRAY
11043: PUSH
11044: LD_INT 3
11046: ARRAY
11047: PPUSH
11048: LD_VAR 0 9
11052: PUSH
11053: LD_VAR 0 15
11057: ARRAY
11058: PUSH
11059: LD_INT 4
11061: ARRAY
11062: PPUSH
11063: CALL_OW 448
11067: IFFALSE 11144
// begin ComConstruct ( fac [ 1 ] , constructList [ i ] [ 1 ] , constructList [ i ] [ 2 ] , constructList [ i ] [ 3 ] , constructList [ i ] [ 4 ] ) ;
11069: LD_VAR 0 36
11073: PUSH
11074: LD_INT 1
11076: ARRAY
11077: PPUSH
11078: LD_VAR 0 9
11082: PUSH
11083: LD_VAR 0 15
11087: ARRAY
11088: PUSH
11089: LD_INT 1
11091: ARRAY
11092: PPUSH
11093: LD_VAR 0 9
11097: PUSH
11098: LD_VAR 0 15
11102: ARRAY
11103: PUSH
11104: LD_INT 2
11106: ARRAY
11107: PPUSH
11108: LD_VAR 0 9
11112: PUSH
11113: LD_VAR 0 15
11117: ARRAY
11118: PUSH
11119: LD_INT 3
11121: ARRAY
11122: PPUSH
11123: LD_VAR 0 9
11127: PUSH
11128: LD_VAR 0 15
11132: ARRAY
11133: PUSH
11134: LD_INT 4
11136: ARRAY
11137: PPUSH
11138: CALL_OW 125
// break ;
11142: GO 11146
// end ; end ;
11144: GO 10991
11146: POP
11147: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11148: LD_ADDR_VAR 0 16
11152: PUSH
11153: LD_VAR 0 2
11157: PPUSH
11158: LD_INT 22
11160: PUSH
11161: LD_VAR 0 1
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: LD_INT 21
11172: PUSH
11173: LD_INT 3
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PUSH
11180: LD_INT 3
11182: PUSH
11183: LD_INT 57
11185: PUSH
11186: EMPTY
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PUSH
11193: LD_INT 3
11195: PUSH
11196: LD_INT 24
11198: PUSH
11199: LD_INT 1000
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: PPUSH
11216: CALL_OW 70
11220: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
11221: LD_ADDR_VAR 0 23
11225: PUSH
11226: LD_VAR 0 2
11230: PPUSH
11231: CALL_OW 435
11235: ST_TO_ADDR
// if cratesArea then
11236: LD_VAR 0 3
11240: IFFALSE 11263
// cr := cr union GetListOfCratesInArea ( cratesArea ) ;
11242: LD_ADDR_VAR 0 23
11246: PUSH
11247: LD_VAR 0 23
11251: PUSH
11252: LD_VAR 0 3
11256: PPUSH
11257: CALL_OW 435
11261: UNION
11262: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
11263: LD_ADDR_VAR 0 20
11267: PUSH
11268: LD_VAR 0 6
11272: PPUSH
11273: LD_INT 25
11275: PUSH
11276: LD_INT 3
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PUSH
11283: LD_INT 50
11285: PUSH
11286: EMPTY
11287: LIST
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PPUSH
11293: CALL_OW 72
11297: ST_TO_ADDR
// if fac then
11298: LD_VAR 0 36
11302: IFFALSE 11459
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_tag , tControlRemoteMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
11304: LD_VAR 0 20
11308: PPUSH
11309: LD_INT 3
11311: PUSH
11312: LD_INT 120
11314: PUSH
11315: LD_INT 7
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: PUSH
11326: LD_INT 3
11328: PUSH
11329: LD_INT 120
11331: PUSH
11332: LD_INT 17
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PUSH
11343: LD_INT 3
11345: PUSH
11346: LD_INT 54
11348: PUSH
11349: EMPTY
11350: LIST
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: LIST
11360: PPUSH
11361: CALL_OW 72
11365: IFFALSE 11382
11367: PUSH
11368: LD_VAR 0 36
11372: PUSH
11373: LD_INT 1
11375: ARRAY
11376: PPUSH
11377: CALL_OW 302
11381: AND
11382: IFFALSE 11459
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_tag , tControlRemoteMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
11384: LD_VAR 0 20
11388: PPUSH
11389: LD_INT 3
11391: PUSH
11392: LD_INT 120
11394: PUSH
11395: LD_INT 7
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PUSH
11406: LD_INT 3
11408: PUSH
11409: LD_INT 120
11411: PUSH
11412: LD_INT 17
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PUSH
11423: LD_INT 3
11425: PUSH
11426: LD_INT 54
11428: PUSH
11429: EMPTY
11430: LIST
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: LIST
11440: PPUSH
11441: CALL_OW 72
11445: PPUSH
11446: LD_VAR 0 36
11450: PUSH
11451: LD_INT 1
11453: ARRAY
11454: PPUSH
11455: CALL_OW 120
// ct := FilterUnitsInArea ( area , [ [ f_ok ] , [ f_not , [ f_full ] ] , [ f_btype , b_control_tower ] ] ) ;
11459: LD_ADDR_VAR 0 30
11463: PUSH
11464: LD_VAR 0 2
11468: PPUSH
11469: LD_INT 50
11471: PUSH
11472: EMPTY
11473: LIST
11474: PUSH
11475: LD_INT 3
11477: PUSH
11478: LD_INT 62
11480: PUSH
11481: EMPTY
11482: LIST
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: PUSH
11488: LD_INT 30
11490: PUSH
11491: LD_INT 36
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: LIST
11502: PPUSH
11503: CALL_OW 70
11507: ST_TO_ADDR
// if ct then
11508: LD_VAR 0 30
11512: IFFALSE 11668
// if Count ( UnitFilter ( mech , [ [ f_tag , tControlRemoteMech ] , [ f_class , 3 ] ] ) ) < 3 then
11514: LD_VAR 0 20
11518: PPUSH
11519: LD_INT 120
11521: PUSH
11522: LD_INT 17
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: LD_INT 25
11531: PUSH
11532: LD_INT 3
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PPUSH
11543: CALL_OW 72
11547: PPUSH
11548: CALL 40354 0 1
11552: PUSH
11553: LD_INT 3
11555: LESS
11556: IFFALSE 11668
// begin tmp := UnitFilter ( mech , [ [ f_not , [ f_hastask ] ] , [ f_tag , 0 ] , [ f_class , 3 ] ] ) ;
11558: LD_ADDR_VAR 0 16
11562: PUSH
11563: LD_VAR 0 20
11567: PPUSH
11568: LD_INT 3
11570: PUSH
11571: LD_INT 60
11573: PUSH
11574: EMPTY
11575: LIST
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: LD_INT 120
11583: PUSH
11584: LD_INT 0
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: LD_INT 25
11593: PUSH
11594: LD_INT 3
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: LIST
11605: PPUSH
11606: CALL_OW 72
11610: ST_TO_ADDR
// if tmp then
11611: LD_VAR 0 16
11615: IFFALSE 11668
// begin SetTag ( tmp [ 1 ] , tControlRemoteMech ) ;
11617: LD_VAR 0 16
11621: PUSH
11622: LD_INT 1
11624: ARRAY
11625: PPUSH
11626: LD_INT 17
11628: PPUSH
11629: CALL_OW 109
// ComExit ( tmp [ 1 ] ) ;
11633: LD_VAR 0 16
11637: PUSH
11638: LD_INT 1
11640: ARRAY
11641: PPUSH
11642: CALL 76684 0 1
// AddComEnterUnit ( tmp [ 1 ] , ct [ 1 ] ) ;
11646: LD_VAR 0 16
11650: PUSH
11651: LD_INT 1
11653: ARRAY
11654: PPUSH
11655: LD_VAR 0 30
11659: PUSH
11660: LD_INT 1
11662: ARRAY
11663: PPUSH
11664: CALL_OW 180
// end ; end ; sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_not , [ f_tag , tWannaBeSold ] ] , [ f_not , [ f_tag , tWannaBeMech ] ] , [ f_ok ] ] ) ;
11668: LD_ADDR_VAR 0 24
11672: PUSH
11673: LD_VAR 0 6
11677: PPUSH
11678: LD_INT 25
11680: PUSH
11681: LD_INT 4
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PUSH
11688: LD_INT 3
11690: PUSH
11691: LD_INT 120
11693: PUSH
11694: LD_INT 16
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: PUSH
11705: LD_INT 3
11707: PUSH
11708: LD_INT 120
11710: PUSH
11711: LD_INT 14
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: PUSH
11722: LD_INT 50
11724: PUSH
11725: EMPTY
11726: LIST
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: PPUSH
11734: CALL_OW 72
11738: ST_TO_ADDR
// lab := FilterUnitsInarea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
11739: LD_ADDR_VAR 0 18
11743: PUSH
11744: LD_VAR 0 2
11748: PPUSH
11749: LD_INT 2
11751: PUSH
11752: LD_INT 30
11754: PUSH
11755: LD_INT 6
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: PUSH
11762: LD_INT 30
11764: PUSH
11765: LD_INT 7
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 30
11774: PUSH
11775: LD_INT 8
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: PPUSH
11788: CALL_OW 70
11792: ST_TO_ADDR
// if sci then
11793: LD_VAR 0 24
11797: IFFALSE 12020
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) union UnitFilter ( forces , [ [ f_inarea , area ] , [ f_not , [ f_lives , 250 ] ] ] ) ;
11799: LD_ADDR_VAR 0 27
11803: PUSH
11804: LD_VAR 0 6
11808: PPUSH
11809: LD_INT 95
11811: PUSH
11812: LD_VAR 0 2
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: LD_INT 120
11823: PUSH
11824: LD_INT 1
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: PPUSH
11835: CALL_OW 72
11839: PUSH
11840: LD_VAR 0 6
11844: PPUSH
11845: LD_INT 95
11847: PUSH
11848: LD_VAR 0 2
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: PUSH
11857: LD_INT 3
11859: PUSH
11860: LD_INT 24
11862: PUSH
11863: LD_INT 250
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PPUSH
11878: CALL_OW 72
11882: UNION
11883: ST_TO_ADDR
// if hurtUnits then
11884: LD_VAR 0 27
11888: IFFALSE 11967
// begin hurtUnits := SortByHealth ( hurtUnits , true ) ;
11890: LD_ADDR_VAR 0 27
11894: PUSH
11895: LD_VAR 0 27
11899: PPUSH
11900: LD_INT 1
11902: PPUSH
11903: CALL 78244 0 2
11907: ST_TO_ADDR
// for i in sci do
11908: LD_ADDR_VAR 0 15
11912: PUSH
11913: LD_VAR 0 24
11917: PUSH
11918: FOR_IN
11919: IFFALSE 11963
// if IsInUnit ( i ) then
11921: LD_VAR 0 15
11925: PPUSH
11926: CALL_OW 310
11930: IFFALSE 11943
// ComExitBuilding ( i ) else
11932: LD_VAR 0 15
11936: PPUSH
11937: CALL_OW 122
11941: GO 11961
// ComHeal ( i , hurtUnits [ 1 ] ) ;
11943: LD_VAR 0 15
11947: PPUSH
11948: LD_VAR 0 27
11952: PUSH
11953: LD_INT 1
11955: ARRAY
11956: PPUSH
11957: CALL_OW 128
11961: GO 11918
11963: POP
11964: POP
// end else
11965: GO 12020
// if lab then
11967: LD_VAR 0 18
11971: IFFALSE 12020
// begin for i in sci do
11973: LD_ADDR_VAR 0 15
11977: PUSH
11978: LD_VAR 0 24
11982: PUSH
11983: FOR_IN
11984: IFFALSE 12018
// if not IsInUnit ( i ) then
11986: LD_VAR 0 15
11990: PPUSH
11991: CALL_OW 310
11995: NOT
11996: IFFALSE 12016
// ComEnterUnit ( i , lab [ 1 ] ) ;
11998: LD_VAR 0 15
12002: PPUSH
12003: LD_VAR 0 18
12007: PUSH
12008: LD_INT 1
12010: ARRAY
12011: PPUSH
12012: CALL_OW 120
12016: GO 11983
12018: POP
12019: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
12020: LD_ADDR_VAR 0 19
12024: PUSH
12025: LD_VAR 0 6
12029: PPUSH
12030: LD_INT 25
12032: PUSH
12033: LD_INT 2
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PPUSH
12040: CALL_OW 72
12044: ST_TO_ADDR
// if eng then
12045: LD_VAR 0 19
12049: IFFALSE 13268
// begin for i in eng do
12051: LD_ADDR_VAR 0 15
12055: PUSH
12056: LD_VAR 0 19
12060: PUSH
12061: FOR_IN
12062: IFFALSE 13266
// begin tag := GetTag ( i ) ;
12064: LD_ADDR_VAR 0 21
12068: PUSH
12069: LD_VAR 0 15
12073: PPUSH
12074: CALL_OW 110
12078: ST_TO_ADDR
// if IsInArea ( i , outerArea ) and not tCrates then
12079: LD_VAR 0 15
12083: PPUSH
12084: LD_VAR 0 5
12088: PPUSH
12089: CALL_OW 308
12093: IFFALSE 12100
12095: PUSH
12096: LD_INT 2
12098: NOT
12099: AND
12100: IFFALSE 12131
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
12102: LD_VAR 0 15
12106: PPUSH
12107: LD_VAR 0 12
12111: PUSH
12112: LD_INT 1
12114: ARRAY
12115: PPUSH
12116: LD_VAR 0 12
12120: PUSH
12121: LD_INT 2
12123: ARRAY
12124: PPUSH
12125: CALL_OW 111
// continue ;
12129: GO 12061
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
12131: LD_VAR 0 15
12135: PPUSH
12136: CALL_OW 256
12140: PUSH
12141: LD_INT 800
12143: LESS
12144: IFFALSE 12156
12146: PUSH
12147: LD_VAR 0 21
12151: PUSH
12152: LD_INT 1
12154: NONEQUAL
12155: AND
12156: IFFALSE 12206
// begin SetTag ( i , tHeal ) ;
12158: LD_VAR 0 15
12162: PPUSH
12163: LD_INT 1
12165: PPUSH
12166: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
12170: LD_VAR 0 15
12174: PPUSH
12175: LD_VAR 0 11
12179: PUSH
12180: LD_INT 1
12182: ARRAY
12183: PPUSH
12184: LD_VAR 0 11
12188: PUSH
12189: LD_INT 2
12191: ARRAY
12192: PPUSH
12193: CALL_OW 111
// AddComHold ( i ) ;
12197: LD_VAR 0 15
12201: PPUSH
12202: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
12206: LD_VAR 0 21
12210: PUSH
12211: LD_INT 1
12213: EQUAL
12214: IFFALSE 12231
12216: PUSH
12217: LD_VAR 0 15
12221: PPUSH
12222: CALL_OW 256
12226: PUSH
12227: LD_INT 1000
12229: EQUAL
12230: AND
12231: IFFALSE 12245
// SetTag ( i , 0 ) ;
12233: LD_VAR 0 15
12237: PPUSH
12238: LD_INT 0
12240: PPUSH
12241: CALL_OW 109
// if not tag then
12245: LD_VAR 0 21
12249: NOT
12250: IFFALSE 12421
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
12252: LD_ADDR_VAR 0 17
12256: PUSH
12257: LD_VAR 0 2
12261: PPUSH
12262: LD_INT 57
12264: PUSH
12265: EMPTY
12266: LIST
12267: PPUSH
12268: CALL_OW 70
12272: ST_TO_ADDR
// if undone then
12273: LD_VAR 0 17
12277: IFFALSE 12299
// begin ComComplete ( i , undone [ 1 ] ) ;
12279: LD_VAR 0 15
12283: PPUSH
12284: LD_VAR 0 17
12288: PUSH
12289: LD_INT 1
12291: ARRAY
12292: PPUSH
12293: CALL 46490 0 2
// continue ;
12297: GO 12061
// end ; if cr or tmp or buildingsToBuild then
12299: LD_VAR 0 23
12303: IFTRUE 12311
12305: PUSH
12306: LD_VAR 0 16
12310: OR
12311: IFTRUE 12319
12313: PUSH
12314: LD_VAR 0 10
12318: OR
12319: IFFALSE 12395
// begin if IsInUnit ( i ) then
12321: LD_VAR 0 15
12325: PPUSH
12326: CALL_OW 310
12330: IFFALSE 12341
// ComExitBuilding ( i ) ;
12332: LD_VAR 0 15
12336: PPUSH
12337: CALL_OW 122
// if tmp then
12341: LD_VAR 0 16
12345: IFFALSE 12361
// SetTag ( i , tRepair ) else
12347: LD_VAR 0 15
12351: PPUSH
12352: LD_INT 3
12354: PPUSH
12355: CALL_OW 109
12359: GO 12393
// if cr then
12361: LD_VAR 0 23
12365: IFFALSE 12381
// SetTag ( i , tCrates ) else
12367: LD_VAR 0 15
12371: PPUSH
12372: LD_INT 2
12374: PPUSH
12375: CALL_OW 109
12379: GO 12393
// SetTag ( i , tBuild ) ;
12381: LD_VAR 0 15
12385: PPUSH
12386: LD_INT 5
12388: PPUSH
12389: CALL_OW 109
// end else
12393: GO 12421
// if not IsInUnit ( i ) then
12395: LD_VAR 0 15
12399: PPUSH
12400: CALL_OW 310
12404: NOT
12405: IFFALSE 12421
// ComEnterUnit ( i , depot ) ;
12407: LD_VAR 0 15
12411: PPUSH
12412: LD_VAR 0 39
12416: PPUSH
12417: CALL_OW 120
// end ; if tag = tRepair then
12421: LD_VAR 0 21
12425: PUSH
12426: LD_INT 3
12428: EQUAL
12429: IFFALSE 12535
// begin if IsInUnit ( i ) then
12431: LD_VAR 0 15
12435: PPUSH
12436: CALL_OW 310
12440: IFFALSE 12453
// begin ComExitBuilding ( i ) ;
12442: LD_VAR 0 15
12446: PPUSH
12447: CALL_OW 122
// continue ;
12451: GO 12061
// end ; if not tmp then
12453: LD_VAR 0 16
12457: NOT
12458: IFFALSE 12474
// begin SetTag ( i , 0 ) ;
12460: LD_VAR 0 15
12464: PPUSH
12465: LD_INT 0
12467: PPUSH
12468: CALL_OW 109
// continue ;
12472: GO 12061
// end ; if not HasTask ( i ) then
12474: LD_VAR 0 15
12478: PPUSH
12479: CALL_OW 314
12483: NOT
12484: IFFALSE 12504
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
12486: LD_VAR 0 15
12490: PPUSH
12491: LD_VAR 0 16
12495: PUSH
12496: LD_INT 1
12498: ARRAY
12499: PPUSH
12500: CALL_OW 130
// if not IsInarea ( i , area ) then
12504: LD_VAR 0 15
12508: PPUSH
12509: LD_VAR 0 2
12513: PPUSH
12514: CALL_OW 308
12518: NOT
12519: IFFALSE 12535
// ComMoveToArea ( i , area ) ;
12521: LD_VAR 0 15
12525: PPUSH
12526: LD_VAR 0 2
12530: PPUSH
12531: CALL_OW 113
// end ; if tag = tBuild then
12535: LD_VAR 0 21
12539: PUSH
12540: LD_INT 5
12542: EQUAL
12543: IFFALSE 13117
// begin if IsInUnit ( i ) then
12545: LD_VAR 0 15
12549: PPUSH
12550: CALL_OW 310
12554: IFFALSE 12567
// begin ComExitBuilding ( i ) ;
12556: LD_VAR 0 15
12560: PPUSH
12561: CALL_OW 122
// continue ;
12565: GO 12061
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
12567: LD_VAR 0 10
12571: NOT
12572: IFTRUE 12580
12574: PUSH
12575: LD_VAR 0 33
12579: OR
12580: IFTRUE 12588
12582: PUSH
12583: LD_VAR 0 34
12587: OR
12588: IFFALSE 12606
// begin SetTag ( i , 0 ) ;
12590: LD_VAR 0 15
12594: PPUSH
12595: LD_INT 0
12597: PPUSH
12598: CALL_OW 109
// continue ;
12602: GO 12061
// end else
12604: GO 12645
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
12606: LD_VAR 0 39
12610: PPUSH
12611: LD_VAR 0 10
12615: PUSH
12616: LD_INT 1
12618: ARRAY
12619: PUSH
12620: LD_INT 1
12622: ARRAY
12623: PPUSH
12624: CALL 80381 0 2
12628: NOT
12629: IFFALSE 12645
// begin SetTag ( i , 0 ) ;
12631: LD_VAR 0 15
12635: PPUSH
12636: LD_INT 0
12638: PPUSH
12639: CALL_OW 109
// continue ;
12643: GO 12061
// end ; undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
12645: LD_ADDR_VAR 0 17
12649: PUSH
12650: LD_VAR 0 2
12654: PPUSH
12655: LD_INT 57
12657: PUSH
12658: EMPTY
12659: LIST
12660: PPUSH
12661: CALL_OW 70
12665: ST_TO_ADDR
// if undone then
12666: LD_VAR 0 17
12670: IFFALSE 12692
// begin ComComplete ( i , undone [ 1 ] ) ;
12672: LD_VAR 0 15
12676: PPUSH
12677: LD_VAR 0 17
12681: PUSH
12682: LD_INT 1
12684: ARRAY
12685: PPUSH
12686: CALL 46490 0 2
// continue ;
12690: GO 12061
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_factory , b_barracks ] then
12692: LD_VAR 0 10
12696: PUSH
12697: LD_INT 1
12699: ARRAY
12700: PUSH
12701: LD_INT 1
12703: ARRAY
12704: PUSH
12705: LD_INT 3
12707: PUSH
12708: LD_INT 5
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: IN
12715: IFFALSE 12812
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) and CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
12717: LD_VAR 0 10
12721: PUSH
12722: LD_INT 1
12724: ARRAY
12725: PUSH
12726: LD_INT 2
12728: ARRAY
12729: PPUSH
12730: LD_VAR 0 10
12734: PUSH
12735: LD_INT 1
12737: ARRAY
12738: PUSH
12739: LD_INT 3
12741: ARRAY
12742: PPUSH
12743: CALL_OW 428
12747: IFFALSE 12773
12749: PUSH
12750: LD_VAR 0 39
12754: PPUSH
12755: LD_VAR 0 10
12759: PUSH
12760: LD_INT 1
12762: ARRAY
12763: PUSH
12764: LD_INT 1
12766: ARRAY
12767: PPUSH
12768: CALL 80381 0 2
12772: AND
12773: IFFALSE 12810
// begin ComUpgrade ( HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) ) ;
12775: LD_VAR 0 10
12779: PUSH
12780: LD_INT 1
12782: ARRAY
12783: PUSH
12784: LD_INT 2
12786: ARRAY
12787: PPUSH
12788: LD_VAR 0 10
12792: PUSH
12793: LD_INT 1
12795: ARRAY
12796: PUSH
12797: LD_INT 3
12799: ARRAY
12800: PPUSH
12801: CALL_OW 428
12805: PPUSH
12806: CALL_OW 146
// end ; continue ;
12810: GO 12061
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_lab_half , b_lab_full ] then
12812: LD_VAR 0 10
12816: PUSH
12817: LD_INT 1
12819: ARRAY
12820: PUSH
12821: LD_INT 1
12823: ARRAY
12824: PUSH
12825: LD_INT 7
12827: PUSH
12828: LD_INT 8
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: IN
12835: IFFALSE 12945
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) and CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
12837: LD_VAR 0 10
12841: PUSH
12842: LD_INT 1
12844: ARRAY
12845: PUSH
12846: LD_INT 2
12848: ARRAY
12849: PPUSH
12850: LD_VAR 0 10
12854: PUSH
12855: LD_INT 1
12857: ARRAY
12858: PUSH
12859: LD_INT 3
12861: ARRAY
12862: PPUSH
12863: CALL_OW 428
12867: IFFALSE 12893
12869: PUSH
12870: LD_VAR 0 39
12874: PPUSH
12875: LD_VAR 0 10
12879: PUSH
12880: LD_INT 1
12882: ARRAY
12883: PUSH
12884: LD_INT 1
12886: ARRAY
12887: PPUSH
12888: CALL 80381 0 2
12892: AND
12893: IFFALSE 12943
// begin ComUpgradeLab ( HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) , buildingsToBuild [ 1 ] [ 5 ] ) ;
12895: LD_VAR 0 10
12899: PUSH
12900: LD_INT 1
12902: ARRAY
12903: PUSH
12904: LD_INT 2
12906: ARRAY
12907: PPUSH
12908: LD_VAR 0 10
12912: PUSH
12913: LD_INT 1
12915: ARRAY
12916: PUSH
12917: LD_INT 3
12919: ARRAY
12920: PPUSH
12921: CALL_OW 428
12925: PPUSH
12926: LD_VAR 0 10
12930: PUSH
12931: LD_INT 1
12933: ARRAY
12934: PUSH
12935: LD_INT 5
12937: ARRAY
12938: PPUSH
12939: CALL_OW 147
// end ; continue ;
12943: GO 12061
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_bunker , b_turret ] then
12945: LD_VAR 0 10
12949: PUSH
12950: LD_INT 1
12952: ARRAY
12953: PUSH
12954: LD_INT 1
12956: ARRAY
12957: PUSH
12958: LD_INT 32
12960: PUSH
12961: LD_INT 33
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: IN
12968: IFFALSE 13044
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) then
12970: LD_VAR 0 10
12974: PUSH
12975: LD_INT 1
12977: ARRAY
12978: PUSH
12979: LD_INT 2
12981: ARRAY
12982: PPUSH
12983: LD_VAR 0 10
12987: PUSH
12988: LD_INT 1
12990: ARRAY
12991: PUSH
12992: LD_INT 3
12994: ARRAY
12995: PPUSH
12996: CALL_OW 428
13000: IFFALSE 13044
// begin ComDismantle ( i , HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) ) ;
13002: LD_VAR 0 15
13006: PPUSH
13007: LD_VAR 0 10
13011: PUSH
13012: LD_INT 1
13014: ARRAY
13015: PUSH
13016: LD_INT 2
13018: ARRAY
13019: PPUSH
13020: LD_VAR 0 10
13024: PUSH
13025: LD_INT 1
13027: ARRAY
13028: PUSH
13029: LD_INT 3
13031: ARRAY
13032: PPUSH
13033: CALL_OW 428
13037: PPUSH
13038: CALL_OW 167
// continue ;
13042: GO 12061
// end ; end ; if not HasTask ( i ) then
13044: LD_VAR 0 15
13048: PPUSH
13049: CALL_OW 314
13053: NOT
13054: IFFALSE 13117
// ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
13056: LD_VAR 0 15
13060: PPUSH
13061: LD_VAR 0 10
13065: PUSH
13066: LD_INT 1
13068: ARRAY
13069: PUSH
13070: LD_INT 1
13072: ARRAY
13073: PPUSH
13074: LD_VAR 0 10
13078: PUSH
13079: LD_INT 1
13081: ARRAY
13082: PUSH
13083: LD_INT 2
13085: ARRAY
13086: PPUSH
13087: LD_VAR 0 10
13091: PUSH
13092: LD_INT 1
13094: ARRAY
13095: PUSH
13096: LD_INT 3
13098: ARRAY
13099: PPUSH
13100: LD_VAR 0 10
13104: PUSH
13105: LD_INT 1
13107: ARRAY
13108: PUSH
13109: LD_INT 4
13111: ARRAY
13112: PPUSH
13113: CALL_OW 145
// end ; if tag = tCrates then
13117: LD_VAR 0 21
13121: PUSH
13122: LD_INT 2
13124: EQUAL
13125: IFFALSE 13264
// begin if IsInUnit ( i ) then
13127: LD_VAR 0 15
13131: PPUSH
13132: CALL_OW 310
13136: IFFALSE 13149
// begin ComExitBuilding ( i ) ;
13138: LD_VAR 0 15
13142: PPUSH
13143: CALL_OW 122
// continue ;
13147: GO 12061
// end ; if not cr then
13149: LD_VAR 0 23
13153: NOT
13154: IFFALSE 13170
// begin SetTag ( i , 0 ) ;
13156: LD_VAR 0 15
13160: PPUSH
13161: LD_INT 0
13163: PPUSH
13164: CALL_OW 109
// continue ;
13168: GO 12061
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
13170: LD_VAR 0 15
13174: PPUSH
13175: CALL_OW 314
13179: NOT
13180: IFFALSE 13235
13182: PUSH
13183: LD_INT 81
13185: PUSH
13186: LD_VAR 0 1
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: PUSH
13195: LD_INT 92
13197: PUSH
13198: LD_VAR 0 23
13202: PUSH
13203: LD_INT 1
13205: ARRAY
13206: PUSH
13207: LD_VAR 0 23
13211: PUSH
13212: LD_INT 2
13214: ARRAY
13215: PUSH
13216: LD_INT 12
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PPUSH
13229: CALL_OW 69
13233: NOT
13234: AND
13235: IFFALSE 13264
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
13237: LD_VAR 0 15
13241: PPUSH
13242: LD_VAR 0 23
13246: PUSH
13247: LD_INT 1
13249: ARRAY
13250: PPUSH
13251: LD_VAR 0 23
13255: PUSH
13256: LD_INT 2
13258: ARRAY
13259: PPUSH
13260: CALL_OW 117
// end ; end ;
13264: GO 12061
13266: POP
13267: POP
// end ; cranes := UnitFilter ( vehicles , [ [ f_weapon , us_crane ] , [ f_ok ] ] ) ;
13268: LD_ADDR_VAR 0 31
13272: PUSH
13273: LD_VAR 0 7
13277: PPUSH
13278: LD_INT 34
13280: PUSH
13281: LD_INT 13
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PUSH
13288: LD_INT 50
13290: PUSH
13291: EMPTY
13292: LIST
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PPUSH
13298: CALL_OW 72
13302: ST_TO_ADDR
// if cranes then
13303: LD_VAR 0 31
13307: IFFALSE 13372
// begin if tmp then
13309: LD_VAR 0 16
13313: IFFALSE 13358
// begin for i in cranes do
13315: LD_ADDR_VAR 0 15
13319: PUSH
13320: LD_VAR 0 31
13324: PUSH
13325: FOR_IN
13326: IFFALSE 13354
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
13328: LD_VAR 0 15
13332: PPUSH
13333: LD_VAR 0 16
13337: PPUSH
13338: LD_VAR 0 15
13342: PPUSH
13343: CALL_OW 74
13347: PPUSH
13348: CALL_OW 130
13352: GO 13325
13354: POP
13355: POP
// end else
13356: GO 13372
// ComBackOnParking ( cranes , parkingPoint ) ;
13358: LD_VAR 0 31
13362: PPUSH
13363: LD_VAR 0 12
13367: PPUSH
13368: CALL 81283 0 2
// end ; vehicles2 := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] ] ) ;
13372: LD_ADDR_VAR 0 29
13376: PUSH
13377: LD_INT 22
13379: PUSH
13380: LD_VAR 0 1
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: LD_INT 33
13391: PUSH
13392: LD_INT 2
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: PPUSH
13403: CALL_OW 69
13407: ST_TO_ADDR
// if vehicles2 then
13408: LD_VAR 0 29
13412: IFFALSE 13479
// for i in UnitFilter ( vehicles2 , [ [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do
13414: LD_ADDR_VAR 0 15
13418: PUSH
13419: LD_VAR 0 29
13423: PPUSH
13424: LD_INT 33
13426: PUSH
13427: LD_INT 2
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 50
13436: PUSH
13437: EMPTY
13438: LIST
13439: PUSH
13440: LD_INT 3
13442: PUSH
13443: LD_INT 61
13445: PUSH
13446: EMPTY
13447: LIST
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: LIST
13457: PPUSH
13458: CALL_OW 72
13462: PUSH
13463: FOR_IN
13464: IFFALSE 13477
// Connect ( i ) ;
13466: LD_VAR 0 15
13470: PPUSH
13471: CALL 46598 0 1
13475: GO 13463
13477: POP
13478: POP
// if vehicles then
13479: LD_VAR 0 7
13483: IFFALSE 14545
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ru_crane ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , us_cargo_bay ] ] ] , [ f_ok ] ] ) ;
13485: LD_ADDR_VAR 0 7
13489: PUSH
13490: LD_VAR 0 7
13494: PPUSH
13495: LD_INT 3
13497: PUSH
13498: LD_INT 2
13500: PUSH
13501: LD_INT 34
13503: PUSH
13504: LD_INT 52
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: PUSH
13511: LD_INT 34
13513: PUSH
13514: LD_INT 51
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: LD_INT 34
13523: PUSH
13524: LD_INT 13
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: PUSH
13531: LD_INT 34
13533: PUSH
13534: LD_INT 12
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: PUSH
13552: LD_INT 50
13554: PUSH
13555: EMPTY
13556: LIST
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: PPUSH
13562: CALL_OW 72
13566: ST_TO_ADDR
// if vehicles then
13567: LD_VAR 0 7
13571: IFFALSE 14545
// begin for i in vehicles do
13573: LD_ADDR_VAR 0 15
13577: PUSH
13578: LD_VAR 0 7
13582: PUSH
13583: FOR_IN
13584: IFFALSE 14543
// begin tag := GetTag ( i ) ;
13586: LD_ADDR_VAR 0 21
13590: PUSH
13591: LD_VAR 0 15
13595: PPUSH
13596: CALL_OW 110
13600: ST_TO_ADDR
// if not tag then
13601: LD_VAR 0 21
13605: NOT
13606: IFFALSE 13743
// begin if GetControl ( i ) = control_manual then
13608: LD_VAR 0 15
13612: PPUSH
13613: CALL_OW 263
13617: PUSH
13618: LD_INT 1
13620: EQUAL
13621: IFFALSE 13729
// begin drivers := UnitFilter ( mech , [ f_tag , tMech ] ) ;
13623: LD_ADDR_VAR 0 26
13627: PUSH
13628: LD_VAR 0 20
13632: PPUSH
13633: LD_INT 120
13635: PUSH
13636: LD_INT 7
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PPUSH
13643: CALL_OW 72
13647: ST_TO_ADDR
// if not drivers then
13648: LD_VAR 0 26
13652: NOT
13653: IFFALSE 13709
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
13655: LD_ADDR_VAR 0 26
13659: PUSH
13660: LD_VAR 0 20
13664: PPUSH
13665: LD_INT 3
13667: PUSH
13668: LD_INT 120
13670: PUSH
13671: LD_INT 7
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PPUSH
13682: CALL_OW 72
13686: ST_TO_ADDR
// if drivers then
13687: LD_VAR 0 26
13691: IFFALSE 13709
// begin SetTag ( drivers [ 1 ] , tMech ) ;
13693: LD_VAR 0 26
13697: PUSH
13698: LD_INT 1
13700: ARRAY
13701: PPUSH
13702: LD_INT 7
13704: PPUSH
13705: CALL_OW 109
// end ; end ; if drivers then
13709: LD_VAR 0 26
13713: IFFALSE 13727
// SetTag ( i , tBusy ) ;
13715: LD_VAR 0 15
13719: PPUSH
13720: LD_INT 8
13722: PPUSH
13723: CALL_OW 109
// continue ;
13727: GO 13583
// end ; SetTag ( i , tBusy ) ;
13729: LD_VAR 0 15
13733: PPUSH
13734: LD_INT 8
13736: PPUSH
13737: CALL_OW 109
// end else
13741: GO 14541
// if tag = tBusy then
13743: LD_VAR 0 21
13747: PUSH
13748: LD_INT 8
13750: EQUAL
13751: IFFALSE 14006
// begin if GetLives ( i ) = 1000 then
13753: LD_VAR 0 15
13757: PPUSH
13758: CALL_OW 256
13762: PUSH
13763: LD_INT 1000
13765: EQUAL
13766: IFFALSE 14004
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
13768: LD_VAR 0 15
13772: PPUSH
13773: CALL_OW 263
13777: PUSH
13778: LD_INT 1
13780: EQUAL
13781: IFFALSE 13795
13783: PUSH
13784: LD_VAR 0 15
13788: PPUSH
13789: CALL_OW 311
13793: NOT
13794: AND
13795: IFFALSE 13972
// begin drivers := UnitFilter ( mech , [ f_tag , tMech ] ) ;
13797: LD_ADDR_VAR 0 26
13801: PUSH
13802: LD_VAR 0 20
13806: PPUSH
13807: LD_INT 120
13809: PUSH
13810: LD_INT 7
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: PPUSH
13817: CALL_OW 72
13821: ST_TO_ADDR
// if not drivers then
13822: LD_VAR 0 26
13826: NOT
13827: IFFALSE 13843
// begin SetTag ( i , 0 ) ;
13829: LD_VAR 0 15
13833: PPUSH
13834: LD_INT 0
13836: PPUSH
13837: CALL_OW 109
// continue ;
13841: GO 13583
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
13843: LD_VAR 0 26
13847: PUSH
13848: LD_INT 1
13850: ARRAY
13851: PPUSH
13852: CALL_OW 310
13856: IFFALSE 13874
13858: PUSH
13859: LD_VAR 0 26
13863: PUSH
13864: LD_INT 1
13866: ARRAY
13867: PPUSH
13868: CALL 73866 0 1
13872: NOT
13873: AND
13874: IFFALSE 13889
// ComExitBuilding ( drivers [ 1 ] ) ;
13876: LD_VAR 0 26
13880: PUSH
13881: LD_INT 1
13883: ARRAY
13884: PPUSH
13885: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
13889: LD_VAR 0 7
13893: PPUSH
13894: LD_INT 120
13896: PUSH
13897: LD_INT 3
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: PPUSH
13904: CALL_OW 72
13908: IFFALSE 13926
13910: PUSH
13911: LD_VAR 0 26
13915: PUSH
13916: LD_INT 1
13918: ARRAY
13919: PPUSH
13920: CALL_OW 314
13924: NOT
13925: AND
13926: IFTRUE 13950
13928: PUSH
13929: LD_VAR 0 7
13933: PPUSH
13934: LD_INT 120
13936: PUSH
13937: LD_INT 3
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PPUSH
13944: CALL_OW 72
13948: NOT
13949: OR
13950: IFFALSE 13970
// ComEnterUnit ( drivers [ 1 ] , i ) ;
13952: LD_VAR 0 26
13956: PUSH
13957: LD_INT 1
13959: ARRAY
13960: PPUSH
13961: LD_VAR 0 15
13965: PPUSH
13966: CALL_OW 120
// continue ;
13970: GO 13583
// end ; if allowToPatrol then
13972: LD_VAR 0 13
13976: IFFALSE 13992
// SetTag ( i , tPatrol ) else
13978: LD_VAR 0 15
13982: PPUSH
13983: LD_INT 15
13985: PPUSH
13986: CALL_OW 109
13990: GO 14004
// SetTag ( i , tAttack ) ;
13992: LD_VAR 0 15
13996: PPUSH
13997: LD_INT 13
13999: PPUSH
14000: CALL_OW 109
// end ; end else
14004: GO 14541
// if tag = tPatrol then
14006: LD_VAR 0 21
14010: PUSH
14011: LD_INT 15
14013: EQUAL
14014: IFFALSE 14208
// begin if GetLives ( i ) < 650 then
14016: LD_VAR 0 15
14020: PPUSH
14021: CALL_OW 256
14025: PUSH
14026: LD_INT 650
14028: LESS
14029: IFFALSE 14072
// begin SetTag ( i , tVehRepair ) ;
14031: LD_VAR 0 15
14035: PPUSH
14036: LD_INT 9
14038: PPUSH
14039: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14043: LD_VAR 0 15
14047: PPUSH
14048: LD_VAR 0 12
14052: PUSH
14053: LD_INT 1
14055: ARRAY
14056: PPUSH
14057: LD_VAR 0 12
14061: PUSH
14062: LD_INT 2
14064: ARRAY
14065: PPUSH
14066: CALL_OW 111
// continue ;
14070: GO 13583
// end ; if GetEngine ( i ) = engine_combustion then
14072: LD_VAR 0 15
14076: PPUSH
14077: CALL_OW 262
14081: PUSH
14082: LD_INT 1
14084: EQUAL
14085: IFFALSE 14132
// if GetFuel ( i ) < 30 then
14087: LD_VAR 0 15
14091: PPUSH
14092: CALL_OW 261
14096: PUSH
14097: LD_INT 30
14099: LESS
14100: IFFALSE 14132
// begin ComMoveUnit ( i , depot ) ;
14102: LD_VAR 0 15
14106: PPUSH
14107: LD_VAR 0 39
14111: PPUSH
14112: CALL_OW 112
// AddComRefuel ( i , depot ) ;
14116: LD_VAR 0 15
14120: PPUSH
14121: LD_VAR 0 39
14125: PPUSH
14126: CALL_OW 210
// continue ;
14130: GO 13583
// end ; if GetDistUnitXY ( i , allowToPatrol [ 1 ] , allowToPatrol [ 2 ] ) > 12 and not HasTask ( i ) then
14132: LD_VAR 0 15
14136: PPUSH
14137: LD_VAR 0 13
14141: PUSH
14142: LD_INT 1
14144: ARRAY
14145: PPUSH
14146: LD_VAR 0 13
14150: PUSH
14151: LD_INT 2
14153: ARRAY
14154: PPUSH
14155: CALL_OW 297
14159: PUSH
14160: LD_INT 12
14162: GREATER
14163: IFFALSE 14177
14165: PUSH
14166: LD_VAR 0 15
14170: PPUSH
14171: CALL_OW 314
14175: NOT
14176: AND
14177: IFFALSE 14206
// ComAgressiveMove ( i , allowToPatrol [ 1 ] , allowToPatrol [ 2 ] ) ;
14179: LD_VAR 0 15
14183: PPUSH
14184: LD_VAR 0 13
14188: PUSH
14189: LD_INT 1
14191: ARRAY
14192: PPUSH
14193: LD_VAR 0 13
14197: PUSH
14198: LD_INT 2
14200: ARRAY
14201: PPUSH
14202: CALL_OW 114
// end else
14206: GO 14541
// if tag = tAttack then
14208: LD_VAR 0 21
14212: PUSH
14213: LD_INT 13
14215: EQUAL
14216: IFFALSE 14398
// begin enemy := enemyInBase ;
14218: LD_ADDR_VAR 0 28
14222: PUSH
14223: LD_VAR 0 33
14227: ST_TO_ADDR
// if not enemy then
14228: LD_VAR 0 28
14232: NOT
14233: IFFALSE 14245
// enemy := enemyOuterBase ;
14235: LD_ADDR_VAR 0 28
14239: PUSH
14240: LD_VAR 0 34
14244: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
14245: LD_VAR 0 28
14249: NOT
14250: IFFALSE 14285
14252: PUSH
14253: LD_VAR 0 15
14257: PPUSH
14258: LD_VAR 0 12
14262: PUSH
14263: LD_INT 1
14265: ARRAY
14266: PPUSH
14267: LD_VAR 0 12
14271: PUSH
14272: LD_INT 2
14274: ARRAY
14275: PPUSH
14276: CALL_OW 297
14280: PUSH
14281: LD_INT 10
14283: GREATER
14284: AND
14285: IFFALSE 14316
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14287: LD_VAR 0 15
14291: PPUSH
14292: LD_VAR 0 12
14296: PUSH
14297: LD_INT 1
14299: ARRAY
14300: PPUSH
14301: LD_VAR 0 12
14305: PUSH
14306: LD_INT 2
14308: ARRAY
14309: PPUSH
14310: CALL_OW 111
// continue ;
14314: GO 13583
// end ; if GetLives ( i ) < 650 then
14316: LD_VAR 0 15
14320: PPUSH
14321: CALL_OW 256
14325: PUSH
14326: LD_INT 650
14328: LESS
14329: IFFALSE 14372
// begin SetTag ( i , tVehRepair ) ;
14331: LD_VAR 0 15
14335: PPUSH
14336: LD_INT 9
14338: PPUSH
14339: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14343: LD_VAR 0 15
14347: PPUSH
14348: LD_VAR 0 12
14352: PUSH
14353: LD_INT 1
14355: ARRAY
14356: PPUSH
14357: LD_VAR 0 12
14361: PUSH
14362: LD_INT 2
14364: ARRAY
14365: PPUSH
14366: CALL_OW 111
// continue ;
14370: GO 13583
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14372: LD_VAR 0 15
14376: PPUSH
14377: LD_VAR 0 28
14381: PPUSH
14382: LD_VAR 0 15
14386: PPUSH
14387: CALL_OW 74
14391: PPUSH
14392: CALL_OW 115
// end else
14396: GO 14541
// if tag = tVehRepair then
14398: LD_VAR 0 21
14402: PUSH
14403: LD_INT 9
14405: EQUAL
14406: IFFALSE 14541
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 6 then
14408: LD_VAR 0 15
14412: PPUSH
14413: LD_VAR 0 12
14417: PUSH
14418: LD_INT 1
14420: ARRAY
14421: PPUSH
14422: LD_VAR 0 12
14426: PUSH
14427: LD_INT 2
14429: ARRAY
14430: PPUSH
14431: CALL_OW 297
14435: PUSH
14436: LD_INT 6
14438: GREATER
14439: IFFALSE 14470
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14441: LD_VAR 0 15
14445: PPUSH
14446: LD_VAR 0 12
14450: PUSH
14451: LD_INT 1
14453: ARRAY
14454: PPUSH
14455: LD_VAR 0 12
14459: PUSH
14460: LD_INT 2
14462: ARRAY
14463: PPUSH
14464: CALL_OW 111
// continue ;
14468: GO 13583
// end ; if GetLives ( i ) = 1000 then
14470: LD_VAR 0 15
14474: PPUSH
14475: CALL_OW 256
14479: PUSH
14480: LD_INT 1000
14482: EQUAL
14483: IFFALSE 14499
// begin SetTag ( i , tBusy ) ;
14485: LD_VAR 0 15
14489: PPUSH
14490: LD_INT 8
14492: PPUSH
14493: CALL_OW 109
// continue ;
14497: GO 13583
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
14499: LD_VAR 0 15
14503: PPUSH
14504: CALL_OW 263
14508: PUSH
14509: LD_INT 1
14511: EQUAL
14512: IFFALSE 14525
14514: PUSH
14515: LD_VAR 0 15
14519: PPUSH
14520: CALL_OW 311
14524: AND
14525: IFFALSE 14541
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
14527: LD_VAR 0 15
14531: PPUSH
14532: CALL_OW 311
14536: PPUSH
14537: CALL 78000 0 1
// end ; end ;
14541: GO 13583
14543: POP
14544: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
14545: LD_ADDR_VAR 0 25
14549: PUSH
14550: LD_VAR 0 6
14554: PPUSH
14555: LD_INT 2
14557: PUSH
14558: LD_INT 25
14560: PUSH
14561: LD_INT 1
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: PUSH
14568: LD_INT 25
14570: PUSH
14571: LD_INT 8
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: PUSH
14578: LD_INT 25
14580: PUSH
14581: LD_INT 5
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: PUSH
14588: LD_INT 25
14590: PUSH
14591: LD_INT 9
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: PUSH
14605: LD_INT 50
14607: PUSH
14608: EMPTY
14609: LIST
14610: PUSH
14611: EMPTY
14612: LIST
14613: LIST
14614: PPUSH
14615: CALL_OW 72
14619: ST_TO_ADDR
// if sol then
14620: LD_VAR 0 25
14624: IFFALSE 15568
// begin if enemyInBase then
14626: LD_VAR 0 33
14630: IFFALSE 14809
// begin for i in sol do
14632: LD_ADDR_VAR 0 15
14636: PUSH
14637: LD_VAR 0 25
14641: PUSH
14642: FOR_IN
14643: IFFALSE 14805
// begin tw := IsInUnit ( i ) ;
14645: LD_ADDR_VAR 0 22
14649: PUSH
14650: LD_VAR 0 15
14654: PPUSH
14655: CALL_OW 310
14659: ST_TO_ADDR
// if tw then
14660: LD_VAR 0 22
14664: IFFALSE 14747
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
14666: LD_VAR 0 22
14670: PUSH
14671: LD_INT 22
14673: PUSH
14674: LD_VAR 0 1
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: PUSH
14683: LD_INT 101
14685: PUSH
14686: LD_VAR 0 40
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: PUSH
14695: LD_INT 2
14697: PUSH
14698: LD_INT 30
14700: PUSH
14701: LD_INT 32
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PUSH
14708: LD_INT 30
14710: PUSH
14711: LD_INT 31
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: LIST
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: LIST
14727: PPUSH
14728: CALL_OW 69
14732: IN
14733: NOT
14734: IFFALSE 14745
// ComExitBuilding ( i ) ;
14736: LD_VAR 0 15
14740: PPUSH
14741: CALL_OW 122
// end else
14745: GO 14803
// if IsInArea ( i , area ) then
14747: LD_VAR 0 15
14751: PPUSH
14752: LD_VAR 0 2
14756: PPUSH
14757: CALL_OW 308
14761: IFFALSE 14789
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
14763: LD_VAR 0 15
14767: PPUSH
14768: LD_VAR 0 33
14772: PPUSH
14773: LD_VAR 0 15
14777: PPUSH
14778: CALL_OW 74
14782: PPUSH
14783: CALL_OW 115
14787: GO 14803
// ComMoveToArea ( i , area ) ;
14789: LD_VAR 0 15
14793: PPUSH
14794: LD_VAR 0 2
14798: PPUSH
14799: CALL_OW 113
// end ;
14803: GO 14642
14805: POP
14806: POP
// end else
14807: GO 15568
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
14809: LD_ADDR_VAR 0 35
14813: PUSH
14814: LD_VAR 0 2
14818: PPUSH
14819: LD_INT 3
14821: PUSH
14822: LD_INT 62
14824: PUSH
14825: EMPTY
14826: LIST
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: LD_INT 3
14834: PUSH
14835: LD_INT 57
14837: PUSH
14838: EMPTY
14839: LIST
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: LD_INT 2
14847: PUSH
14848: LD_INT 30
14850: PUSH
14851: LD_INT 32
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: PUSH
14858: LD_INT 30
14860: PUSH
14861: LD_INT 4
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: PUSH
14868: LD_INT 30
14870: PUSH
14871: LD_INT 5
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PUSH
14878: LD_INT 30
14880: PUSH
14881: LD_INT 31
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: LIST
14899: PPUSH
14900: CALL_OW 70
14904: ST_TO_ADDR
// emptyTowers := [ ] ;
14905: LD_ADDR_VAR 0 37
14909: PUSH
14910: EMPTY
14911: ST_TO_ADDR
// if empty then
14912: LD_VAR 0 35
14916: IFFALSE 14982
// emptyTowers := UnitFilter ( empty , [ [ f_not , [ f_tag , tTower ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
14918: LD_ADDR_VAR 0 37
14922: PUSH
14923: LD_VAR 0 35
14927: PPUSH
14928: LD_INT 3
14930: PUSH
14931: LD_INT 120
14933: PUSH
14934: LD_INT 10
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 2
14947: PUSH
14948: LD_INT 30
14950: PUSH
14951: LD_INT 32
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PUSH
14958: LD_INT 30
14960: PUSH
14961: LD_INT 33
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: LIST
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PPUSH
14977: CALL_OW 72
14981: ST_TO_ADDR
// for i in sol do
14982: LD_ADDR_VAR 0 15
14986: PUSH
14987: LD_VAR 0 25
14991: PUSH
14992: FOR_IN
14993: IFFALSE 15566
// begin tag := GetTag ( i ) ;
14995: LD_ADDR_VAR 0 21
14999: PUSH
15000: LD_VAR 0 15
15004: PPUSH
15005: CALL_OW 110
15009: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
15010: LD_VAR 0 15
15014: PPUSH
15015: CALL_OW 256
15019: PUSH
15020: LD_INT 1000
15022: LESS
15023: IFFALSE 15035
15025: PUSH
15026: LD_VAR 0 21
15030: PUSH
15031: LD_INT 1
15033: NONEQUAL
15034: AND
15035: IFFALSE 15087
// begin SetTag ( i , tHeal ) ;
15037: LD_VAR 0 15
15041: PPUSH
15042: LD_INT 1
15044: PPUSH
15045: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
15049: LD_VAR 0 15
15053: PPUSH
15054: LD_VAR 0 11
15058: PUSH
15059: LD_INT 1
15061: ARRAY
15062: PPUSH
15063: LD_VAR 0 11
15067: PUSH
15068: LD_INT 2
15070: ARRAY
15071: PPUSH
15072: CALL_OW 111
// AddComHold ( i ) ;
15076: LD_VAR 0 15
15080: PPUSH
15081: CALL_OW 200
// continue ;
15085: GO 14992
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
15087: LD_VAR 0 15
15091: PPUSH
15092: CALL_OW 256
15096: PUSH
15097: LD_INT 1000
15099: EQUAL
15100: IFFALSE 15112
15102: PUSH
15103: LD_VAR 0 21
15107: PUSH
15108: LD_INT 1
15110: EQUAL
15111: AND
15112: IFFALSE 15128
// begin SetTag ( i , 0 ) ;
15114: LD_VAR 0 15
15118: PPUSH
15119: LD_INT 0
15121: PPUSH
15122: CALL_OW 109
// continue ;
15126: GO 14992
// end ; if HasTask ( i ) then
15128: LD_VAR 0 15
15132: PPUSH
15133: CALL_OW 314
15137: IFFALSE 15141
// continue ;
15139: GO 14992
// if not IsInUnit ( i ) and not tag and empty then
15141: LD_VAR 0 15
15145: PPUSH
15146: CALL_OW 310
15150: NOT
15151: IFFALSE 15160
15153: PUSH
15154: LD_VAR 0 21
15158: NOT
15159: AND
15160: IFFALSE 15168
15162: PUSH
15163: LD_VAR 0 35
15167: AND
15168: IFFALSE 15208
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
15170: LD_VAR 0 15
15174: PPUSH
15175: LD_VAR 0 35
15179: PUSH
15180: LD_INT 1
15182: ARRAY
15183: PPUSH
15184: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
15188: LD_ADDR_VAR 0 35
15192: PUSH
15193: LD_VAR 0 35
15197: PPUSH
15198: LD_INT 1
15200: PPUSH
15201: CALL_OW 3
15205: ST_TO_ADDR
// continue ;
15206: GO 14992
// end ; if IsInUnit ( i ) and not tag and Count ( emptyTowers ) then
15208: LD_VAR 0 15
15212: PPUSH
15213: CALL_OW 310
15217: IFFALSE 15226
15219: PUSH
15220: LD_VAR 0 21
15224: NOT
15225: AND
15226: IFFALSE 15239
15228: PUSH
15229: LD_VAR 0 37
15233: PPUSH
15234: CALL 40354 0 1
15238: AND
15239: IFFALSE 15435
// begin if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
15241: LD_VAR 0 15
15245: PPUSH
15246: CALL_OW 310
15250: PPUSH
15251: CALL_OW 266
15255: PUSH
15256: LD_INT 32
15258: PUSH
15259: LD_INT 31
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: IN
15266: IFFALSE 15270
// continue ;
15268: GO 14992
// SetTag ( i , tTower ) ;
15270: LD_VAR 0 15
15274: PPUSH
15275: LD_INT 10
15277: PPUSH
15278: CALL_OW 109
// SetTag ( emptyTowers [ 1 ] , tTower ) ;
15282: LD_VAR 0 37
15286: PUSH
15287: LD_INT 1
15289: ARRAY
15290: PPUSH
15291: LD_INT 10
15293: PPUSH
15294: CALL_OW 109
// ComExit ( i ) ;
15298: LD_VAR 0 15
15302: PPUSH
15303: CALL 76684 0 1
// AddComEnterUnit ( i , emptyTowers [ 1 ] ) ;
15307: LD_VAR 0 15
15311: PPUSH
15312: LD_VAR 0 37
15316: PUSH
15317: LD_INT 1
15319: ARRAY
15320: PPUSH
15321: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
15325: LD_INT 35
15327: PPUSH
15328: CALL_OW 67
// if not HasTask ( i ) then
15332: LD_VAR 0 15
15336: PPUSH
15337: CALL_OW 314
15341: NOT
15342: IFFALSE 15362
// ComEnterUnit ( i , emptyTowers [ 1 ] ) ;
15344: LD_VAR 0 15
15348: PPUSH
15349: LD_VAR 0 37
15353: PUSH
15354: LD_INT 1
15356: ARRAY
15357: PPUSH
15358: CALL_OW 120
// if not IsEmpty ( emptyTowers [ 1 ] ) then
15362: LD_VAR 0 37
15366: PUSH
15367: LD_INT 1
15369: ARRAY
15370: PPUSH
15371: CALL 40376 0 1
15375: NOT
15376: IFFALSE 15380
// break ;
15378: GO 15405
// until IsInUnit ( i ) or not IsOk ( i ) ;
15380: LD_VAR 0 15
15384: PPUSH
15385: CALL_OW 310
15389: IFTRUE 15403
15391: PUSH
15392: LD_VAR 0 15
15396: PPUSH
15397: CALL_OW 302
15401: NOT
15402: OR
15403: IFFALSE 15325
// SetTag ( i , 0 ) ;
15405: LD_VAR 0 15
15409: PPUSH
15410: LD_INT 0
15412: PPUSH
15413: CALL_OW 109
// SetTag ( emptyTowers [ 1 ] , 0 ) ;
15417: LD_VAR 0 37
15421: PUSH
15422: LD_INT 1
15424: ARRAY
15425: PPUSH
15426: LD_INT 0
15428: PPUSH
15429: CALL_OW 109
// continue ;
15433: GO 14992
// end ; if IsInUnit ( i ) and not tag and GetTech ( tech_LasSight , side ) = state_researched and GetClass ( i ) <> class_sniper then
15435: LD_VAR 0 15
15439: PPUSH
15440: CALL_OW 310
15444: IFFALSE 15453
15446: PUSH
15447: LD_VAR 0 21
15451: NOT
15452: AND
15453: IFFALSE 15473
15455: PUSH
15456: LD_INT 12
15458: PPUSH
15459: LD_VAR 0 1
15463: PPUSH
15464: CALL_OW 321
15468: PUSH
15469: LD_INT 2
15471: EQUAL
15472: AND
15473: IFFALSE 15490
15475: PUSH
15476: LD_VAR 0 15
15480: PPUSH
15481: CALL_OW 257
15485: PUSH
15486: LD_INT 5
15488: NONEQUAL
15489: AND
15490: IFFALSE 15564
// begin tmp := IsInUnit ( i ) ;
15492: LD_ADDR_VAR 0 16
15496: PUSH
15497: LD_VAR 0 15
15501: PPUSH
15502: CALL_OW 310
15506: ST_TO_ADDR
// if GetBType ( tmp ) = b_barracks then
15507: LD_VAR 0 16
15511: PPUSH
15512: CALL_OW 266
15516: PUSH
15517: LD_INT 5
15519: EQUAL
15520: IFFALSE 15564
// begin if UnitFilter ( UnitsInside ( tmp ) , [ f_class , class_soldier ] ) > 3 then
15522: LD_VAR 0 16
15526: PPUSH
15527: CALL_OW 313
15531: PPUSH
15532: LD_INT 25
15534: PUSH
15535: LD_INT 1
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PPUSH
15542: CALL_OW 72
15546: PUSH
15547: LD_INT 3
15549: GREATER
15550: IFFALSE 15564
// SetClass ( i , class_sniper ) ;
15552: LD_VAR 0 15
15556: PPUSH
15557: LD_INT 5
15559: PPUSH
15560: CALL_OW 336
// end ; end ; end ;
15564: GO 14992
15566: POP
15567: POP
// end ; end ; end ; end_of_file
15568: LD_VAR 0 14
15572: RET
// every 1 1$25 trigger GetResourceArea ( playerCratesArea , mat_cans ) < [ 18 , 15 , 12 ] [ Difficulty ] do
15573: LD_INT 3
15575: PPUSH
15576: LD_INT 1
15578: PPUSH
15579: CALL_OW 287
15583: PUSH
15584: LD_INT 18
15586: PUSH
15587: LD_INT 15
15589: PUSH
15590: LD_INT 12
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: LIST
15597: PUSH
15598: LD_OWVAR 67
15602: ARRAY
15603: LESS
15604: IFFALSE 15646
15606: GO 15608
15608: DISABLE
// begin enable ;
15609: ENABLE
// wait ( rand ( 0 0$10 , 0 0$30 ) ) ;
15610: LD_INT 350
15612: PPUSH
15613: LD_INT 1050
15615: PPUSH
15616: CALL_OW 12
15620: PPUSH
15621: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , playerCratesArea , true ) ;
15625: LD_INT 2
15627: PPUSH
15628: LD_INT 5
15630: PPUSH
15631: CALL_OW 12
15635: PPUSH
15636: LD_INT 3
15638: PPUSH
15639: LD_INT 1
15641: PPUSH
15642: CALL_OW 55
// end ;
15646: END
// every 1 1$40 trigger GetResourceArea ( americanBaseNorthArea , mat_cans ) < 5 do
15647: LD_INT 10
15649: PPUSH
15650: LD_INT 1
15652: PPUSH
15653: CALL_OW 287
15657: PUSH
15658: LD_INT 5
15660: LESS
15661: IFFALSE 15688
15663: GO 15665
15665: DISABLE
// begin enable ;
15666: ENABLE
// CreateCratesArea ( rand ( 2 , 5 ) , americanBaseNorthArea , true ) ;
15667: LD_INT 2
15669: PPUSH
15670: LD_INT 5
15672: PPUSH
15673: CALL_OW 12
15677: PPUSH
15678: LD_INT 10
15680: PPUSH
15681: LD_INT 1
15683: PPUSH
15684: CALL_OW 55
// end ;
15688: END
// every 1 1$40 trigger GetResourceArea ( americanBaseSouthArea , mat_cans ) < 5 do
15689: LD_INT 11
15691: PPUSH
15692: LD_INT 1
15694: PPUSH
15695: CALL_OW 287
15699: PUSH
15700: LD_INT 5
15702: LESS
15703: IFFALSE 15730
15705: GO 15707
15707: DISABLE
// begin enable ;
15708: ENABLE
// CreateCratesArea ( rand ( 2 , 5 ) , americanBaseSouthArea , true ) ;
15709: LD_INT 2
15711: PPUSH
15712: LD_INT 5
15714: PPUSH
15715: CALL_OW 12
15719: PPUSH
15720: LD_INT 11
15722: PPUSH
15723: LD_INT 1
15725: PPUSH
15726: CALL_OW 55
// end ;
15730: END
// every 1 1$40 trigger GetResourceArea ( amCrates1Area , mat_cans ) < 5 do
15731: LD_INT 16
15733: PPUSH
15734: LD_INT 1
15736: PPUSH
15737: CALL_OW 287
15741: PUSH
15742: LD_INT 5
15744: LESS
15745: IFFALSE 15772
15747: GO 15749
15749: DISABLE
// begin enable ;
15750: ENABLE
// CreateCratesArea ( rand ( 2 , 5 ) , amCrates1Area , true ) ;
15751: LD_INT 2
15753: PPUSH
15754: LD_INT 5
15756: PPUSH
15757: CALL_OW 12
15761: PPUSH
15762: LD_INT 16
15764: PPUSH
15765: LD_INT 1
15767: PPUSH
15768: CALL_OW 55
// end ;
15772: END
// every 1 1$40 trigger GetResourceArea ( amCrates2Area , mat_cans ) < 5 do
15773: LD_INT 17
15775: PPUSH
15776: LD_INT 1
15778: PPUSH
15779: CALL_OW 287
15783: PUSH
15784: LD_INT 5
15786: LESS
15787: IFFALSE 15814
15789: GO 15791
15791: DISABLE
// begin enable ;
15792: ENABLE
// CreateCratesArea ( rand ( 2 , 5 ) , amCrates2Area , true ) ;
15793: LD_INT 2
15795: PPUSH
15796: LD_INT 5
15798: PPUSH
15799: CALL_OW 12
15803: PPUSH
15804: LD_INT 17
15806: PPUSH
15807: LD_INT 1
15809: PPUSH
15810: CALL_OW 55
// end ;
15814: END
// every 0 0$50 trigger tick < 45 45$00 do
15815: LD_OWVAR 1
15819: PUSH
15820: LD_INT 94500
15822: LESS
15823: IFFALSE 15847
15825: GO 15827
15827: DISABLE
// begin enable ;
15828: ENABLE
// CreateCratesAnywhere ( rand ( 1 , 5 ) , true ) ;
15829: LD_INT 1
15831: PPUSH
15832: LD_INT 5
15834: PPUSH
15835: CALL_OW 12
15839: PPUSH
15840: LD_INT 1
15842: PPUSH
15843: CALL_OW 57
// end ; end_of_file end_of_file
15847: END
// export globalGameSaveCounter ; every 0 0$1 do
15848: GO 15850
15850: DISABLE
// begin enable ;
15851: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15852: LD_STRING updateTimer(
15854: PUSH
15855: LD_OWVAR 1
15859: STR
15860: PUSH
15861: LD_STRING );
15863: STR
15864: PPUSH
15865: CALL_OW 559
// end ;
15869: END
// every 0 0$1 do
15870: GO 15872
15872: DISABLE
// begin globalGameSaveCounter := 0 ;
15873: LD_ADDR_EXP 37
15877: PUSH
15878: LD_INT 0
15880: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
15881: LD_STRING setGameSaveCounter(0)
15883: PPUSH
15884: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
15888: LD_STRING initStreamRollete();
15890: PPUSH
15891: CALL_OW 559
// InitStreamMode ;
15895: CALL 17240 0 0
// DefineStreamItems ( false ) ;
15899: LD_INT 0
15901: PPUSH
15902: CALL 17704 0 1
// end ;
15906: END
// export function SOS_MapStart ( ) ; begin
15907: LD_INT 0
15909: PPUSH
// if streamModeActive then
15910: LD_EXP 38
15914: IFFALSE 15923
// DefineStreamItems ( true ) ;
15916: LD_INT 1
15918: PPUSH
15919: CALL 17704 0 1
// UpdateLuaVariables ( ) ;
15923: CALL 15940 0 0
// UpdateFactoryWaypoints ( ) ;
15927: CALL 30826 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15931: CALL 31078 0 0
// end ;
15935: LD_VAR 0 1
15939: RET
// function UpdateLuaVariables ( ) ; begin
15940: LD_INT 0
15942: PPUSH
// if globalGameSaveCounter then
15943: LD_EXP 37
15947: IFFALSE 15981
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
15949: LD_ADDR_EXP 37
15953: PUSH
15954: LD_EXP 37
15958: PPUSH
15959: CALL 77659 0 1
15963: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15964: LD_STRING setGameSaveCounter(
15966: PUSH
15967: LD_EXP 37
15971: STR
15972: PUSH
15973: LD_STRING )
15975: STR
15976: PPUSH
15977: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
15981: LD_STRING setGameDifficulty(
15983: PUSH
15984: LD_OWVAR 67
15988: STR
15989: PUSH
15990: LD_STRING )
15992: STR
15993: PPUSH
15994: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
15998: LD_STRING displayDifficulty(
16000: PUSH
16001: LD_OWVAR 67
16005: STR
16006: PUSH
16007: LD_STRING )
16009: STR
16010: PPUSH
16011: CALL_OW 559
// end ;
16015: LD_VAR 0 1
16019: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16020: LD_INT 0
16022: PPUSH
// if p2 = stream_mode then
16023: LD_VAR 0 2
16027: PUSH
16028: LD_INT 100
16030: EQUAL
16031: IFFALSE 17034
// begin if not StreamModeActive then
16033: LD_EXP 38
16037: NOT
16038: IFFALSE 16048
// StreamModeActive := true ;
16040: LD_ADDR_EXP 38
16044: PUSH
16045: LD_INT 1
16047: ST_TO_ADDR
// if p3 = 0 then
16048: LD_VAR 0 3
16052: PUSH
16053: LD_INT 0
16055: EQUAL
16056: IFFALSE 16062
// InitStreamMode ;
16058: CALL 17240 0 0
// if p3 = 1 then
16062: LD_VAR 0 3
16066: PUSH
16067: LD_INT 1
16069: EQUAL
16070: IFFALSE 16080
// sRocket := true ;
16072: LD_ADDR_EXP 43
16076: PUSH
16077: LD_INT 1
16079: ST_TO_ADDR
// if p3 = 2 then
16080: LD_VAR 0 3
16084: PUSH
16085: LD_INT 2
16087: EQUAL
16088: IFFALSE 16098
// sSpeed := true ;
16090: LD_ADDR_EXP 42
16094: PUSH
16095: LD_INT 1
16097: ST_TO_ADDR
// if p3 = 3 then
16098: LD_VAR 0 3
16102: PUSH
16103: LD_INT 3
16105: EQUAL
16106: IFFALSE 16116
// sEngine := true ;
16108: LD_ADDR_EXP 44
16112: PUSH
16113: LD_INT 1
16115: ST_TO_ADDR
// if p3 = 4 then
16116: LD_VAR 0 3
16120: PUSH
16121: LD_INT 4
16123: EQUAL
16124: IFFALSE 16134
// sSpec := true ;
16126: LD_ADDR_EXP 41
16130: PUSH
16131: LD_INT 1
16133: ST_TO_ADDR
// if p3 = 5 then
16134: LD_VAR 0 3
16138: PUSH
16139: LD_INT 5
16141: EQUAL
16142: IFFALSE 16152
// sLevel := true ;
16144: LD_ADDR_EXP 45
16148: PUSH
16149: LD_INT 1
16151: ST_TO_ADDR
// if p3 = 6 then
16152: LD_VAR 0 3
16156: PUSH
16157: LD_INT 6
16159: EQUAL
16160: IFFALSE 16170
// sArmoury := true ;
16162: LD_ADDR_EXP 46
16166: PUSH
16167: LD_INT 1
16169: ST_TO_ADDR
// if p3 = 7 then
16170: LD_VAR 0 3
16174: PUSH
16175: LD_INT 7
16177: EQUAL
16178: IFFALSE 16188
// sRadar := true ;
16180: LD_ADDR_EXP 47
16184: PUSH
16185: LD_INT 1
16187: ST_TO_ADDR
// if p3 = 8 then
16188: LD_VAR 0 3
16192: PUSH
16193: LD_INT 8
16195: EQUAL
16196: IFFALSE 16206
// sBunker := true ;
16198: LD_ADDR_EXP 48
16202: PUSH
16203: LD_INT 1
16205: ST_TO_ADDR
// if p3 = 9 then
16206: LD_VAR 0 3
16210: PUSH
16211: LD_INT 9
16213: EQUAL
16214: IFFALSE 16224
// sHack := true ;
16216: LD_ADDR_EXP 49
16220: PUSH
16221: LD_INT 1
16223: ST_TO_ADDR
// if p3 = 10 then
16224: LD_VAR 0 3
16228: PUSH
16229: LD_INT 10
16231: EQUAL
16232: IFFALSE 16242
// sFire := true ;
16234: LD_ADDR_EXP 50
16238: PUSH
16239: LD_INT 1
16241: ST_TO_ADDR
// if p3 = 11 then
16242: LD_VAR 0 3
16246: PUSH
16247: LD_INT 11
16249: EQUAL
16250: IFFALSE 16260
// sRefresh := true ;
16252: LD_ADDR_EXP 51
16256: PUSH
16257: LD_INT 1
16259: ST_TO_ADDR
// if p3 = 12 then
16260: LD_VAR 0 3
16264: PUSH
16265: LD_INT 12
16267: EQUAL
16268: IFFALSE 16278
// sExp := true ;
16270: LD_ADDR_EXP 52
16274: PUSH
16275: LD_INT 1
16277: ST_TO_ADDR
// if p3 = 13 then
16278: LD_VAR 0 3
16282: PUSH
16283: LD_INT 13
16285: EQUAL
16286: IFFALSE 16296
// sDepot := true ;
16288: LD_ADDR_EXP 53
16292: PUSH
16293: LD_INT 1
16295: ST_TO_ADDR
// if p3 = 14 then
16296: LD_VAR 0 3
16300: PUSH
16301: LD_INT 14
16303: EQUAL
16304: IFFALSE 16314
// sFlag := true ;
16306: LD_ADDR_EXP 54
16310: PUSH
16311: LD_INT 1
16313: ST_TO_ADDR
// if p3 = 15 then
16314: LD_VAR 0 3
16318: PUSH
16319: LD_INT 15
16321: EQUAL
16322: IFFALSE 16332
// sKamikadze := true ;
16324: LD_ADDR_EXP 62
16328: PUSH
16329: LD_INT 1
16331: ST_TO_ADDR
// if p3 = 16 then
16332: LD_VAR 0 3
16336: PUSH
16337: LD_INT 16
16339: EQUAL
16340: IFFALSE 16350
// sTroll := true ;
16342: LD_ADDR_EXP 63
16346: PUSH
16347: LD_INT 1
16349: ST_TO_ADDR
// if p3 = 17 then
16350: LD_VAR 0 3
16354: PUSH
16355: LD_INT 17
16357: EQUAL
16358: IFFALSE 16368
// sSlow := true ;
16360: LD_ADDR_EXP 64
16364: PUSH
16365: LD_INT 1
16367: ST_TO_ADDR
// if p3 = 18 then
16368: LD_VAR 0 3
16372: PUSH
16373: LD_INT 18
16375: EQUAL
16376: IFFALSE 16386
// sLack := true ;
16378: LD_ADDR_EXP 65
16382: PUSH
16383: LD_INT 1
16385: ST_TO_ADDR
// if p3 = 19 then
16386: LD_VAR 0 3
16390: PUSH
16391: LD_INT 19
16393: EQUAL
16394: IFFALSE 16404
// sTank := true ;
16396: LD_ADDR_EXP 67
16400: PUSH
16401: LD_INT 1
16403: ST_TO_ADDR
// if p3 = 20 then
16404: LD_VAR 0 3
16408: PUSH
16409: LD_INT 20
16411: EQUAL
16412: IFFALSE 16422
// sRemote := true ;
16414: LD_ADDR_EXP 68
16418: PUSH
16419: LD_INT 1
16421: ST_TO_ADDR
// if p3 = 21 then
16422: LD_VAR 0 3
16426: PUSH
16427: LD_INT 21
16429: EQUAL
16430: IFFALSE 16440
// sPowell := true ;
16432: LD_ADDR_EXP 69
16436: PUSH
16437: LD_INT 1
16439: ST_TO_ADDR
// if p3 = 22 then
16440: LD_VAR 0 3
16444: PUSH
16445: LD_INT 22
16447: EQUAL
16448: IFFALSE 16458
// sTeleport := true ;
16450: LD_ADDR_EXP 72
16454: PUSH
16455: LD_INT 1
16457: ST_TO_ADDR
// if p3 = 23 then
16458: LD_VAR 0 3
16462: PUSH
16463: LD_INT 23
16465: EQUAL
16466: IFFALSE 16476
// sOilTower := true ;
16468: LD_ADDR_EXP 74
16472: PUSH
16473: LD_INT 1
16475: ST_TO_ADDR
// if p3 = 24 then
16476: LD_VAR 0 3
16480: PUSH
16481: LD_INT 24
16483: EQUAL
16484: IFFALSE 16494
// sShovel := true ;
16486: LD_ADDR_EXP 75
16490: PUSH
16491: LD_INT 1
16493: ST_TO_ADDR
// if p3 = 25 then
16494: LD_VAR 0 3
16498: PUSH
16499: LD_INT 25
16501: EQUAL
16502: IFFALSE 16512
// sSheik := true ;
16504: LD_ADDR_EXP 76
16508: PUSH
16509: LD_INT 1
16511: ST_TO_ADDR
// if p3 = 26 then
16512: LD_VAR 0 3
16516: PUSH
16517: LD_INT 26
16519: EQUAL
16520: IFFALSE 16530
// sEarthquake := true ;
16522: LD_ADDR_EXP 78
16526: PUSH
16527: LD_INT 1
16529: ST_TO_ADDR
// if p3 = 27 then
16530: LD_VAR 0 3
16534: PUSH
16535: LD_INT 27
16537: EQUAL
16538: IFFALSE 16548
// sAI := true ;
16540: LD_ADDR_EXP 79
16544: PUSH
16545: LD_INT 1
16547: ST_TO_ADDR
// if p3 = 28 then
16548: LD_VAR 0 3
16552: PUSH
16553: LD_INT 28
16555: EQUAL
16556: IFFALSE 16566
// sCargo := true ;
16558: LD_ADDR_EXP 82
16562: PUSH
16563: LD_INT 1
16565: ST_TO_ADDR
// if p3 = 29 then
16566: LD_VAR 0 3
16570: PUSH
16571: LD_INT 29
16573: EQUAL
16574: IFFALSE 16584
// sDLaser := true ;
16576: LD_ADDR_EXP 83
16580: PUSH
16581: LD_INT 1
16583: ST_TO_ADDR
// if p3 = 30 then
16584: LD_VAR 0 3
16588: PUSH
16589: LD_INT 30
16591: EQUAL
16592: IFFALSE 16602
// sExchange := true ;
16594: LD_ADDR_EXP 84
16598: PUSH
16599: LD_INT 1
16601: ST_TO_ADDR
// if p3 = 31 then
16602: LD_VAR 0 3
16606: PUSH
16607: LD_INT 31
16609: EQUAL
16610: IFFALSE 16620
// sFac := true ;
16612: LD_ADDR_EXP 85
16616: PUSH
16617: LD_INT 1
16619: ST_TO_ADDR
// if p3 = 32 then
16620: LD_VAR 0 3
16624: PUSH
16625: LD_INT 32
16627: EQUAL
16628: IFFALSE 16638
// sPower := true ;
16630: LD_ADDR_EXP 86
16634: PUSH
16635: LD_INT 1
16637: ST_TO_ADDR
// if p3 = 33 then
16638: LD_VAR 0 3
16642: PUSH
16643: LD_INT 33
16645: EQUAL
16646: IFFALSE 16656
// sRandom := true ;
16648: LD_ADDR_EXP 87
16652: PUSH
16653: LD_INT 1
16655: ST_TO_ADDR
// if p3 = 34 then
16656: LD_VAR 0 3
16660: PUSH
16661: LD_INT 34
16663: EQUAL
16664: IFFALSE 16674
// sShield := true ;
16666: LD_ADDR_EXP 88
16670: PUSH
16671: LD_INT 1
16673: ST_TO_ADDR
// if p3 = 35 then
16674: LD_VAR 0 3
16678: PUSH
16679: LD_INT 35
16681: EQUAL
16682: IFFALSE 16692
// sTime := true ;
16684: LD_ADDR_EXP 89
16688: PUSH
16689: LD_INT 1
16691: ST_TO_ADDR
// if p3 = 36 then
16692: LD_VAR 0 3
16696: PUSH
16697: LD_INT 36
16699: EQUAL
16700: IFFALSE 16710
// sTools := true ;
16702: LD_ADDR_EXP 90
16706: PUSH
16707: LD_INT 1
16709: ST_TO_ADDR
// if p3 = 101 then
16710: LD_VAR 0 3
16714: PUSH
16715: LD_INT 101
16717: EQUAL
16718: IFFALSE 16728
// sSold := true ;
16720: LD_ADDR_EXP 55
16724: PUSH
16725: LD_INT 1
16727: ST_TO_ADDR
// if p3 = 102 then
16728: LD_VAR 0 3
16732: PUSH
16733: LD_INT 102
16735: EQUAL
16736: IFFALSE 16746
// sDiff := true ;
16738: LD_ADDR_EXP 56
16742: PUSH
16743: LD_INT 1
16745: ST_TO_ADDR
// if p3 = 103 then
16746: LD_VAR 0 3
16750: PUSH
16751: LD_INT 103
16753: EQUAL
16754: IFFALSE 16764
// sFog := true ;
16756: LD_ADDR_EXP 59
16760: PUSH
16761: LD_INT 1
16763: ST_TO_ADDR
// if p3 = 104 then
16764: LD_VAR 0 3
16768: PUSH
16769: LD_INT 104
16771: EQUAL
16772: IFFALSE 16782
// sReset := true ;
16774: LD_ADDR_EXP 60
16778: PUSH
16779: LD_INT 1
16781: ST_TO_ADDR
// if p3 = 105 then
16782: LD_VAR 0 3
16786: PUSH
16787: LD_INT 105
16789: EQUAL
16790: IFFALSE 16800
// sSun := true ;
16792: LD_ADDR_EXP 61
16796: PUSH
16797: LD_INT 1
16799: ST_TO_ADDR
// if p3 = 106 then
16800: LD_VAR 0 3
16804: PUSH
16805: LD_INT 106
16807: EQUAL
16808: IFFALSE 16818
// sTiger := true ;
16810: LD_ADDR_EXP 57
16814: PUSH
16815: LD_INT 1
16817: ST_TO_ADDR
// if p3 = 107 then
16818: LD_VAR 0 3
16822: PUSH
16823: LD_INT 107
16825: EQUAL
16826: IFFALSE 16836
// sBomb := true ;
16828: LD_ADDR_EXP 58
16832: PUSH
16833: LD_INT 1
16835: ST_TO_ADDR
// if p3 = 108 then
16836: LD_VAR 0 3
16840: PUSH
16841: LD_INT 108
16843: EQUAL
16844: IFFALSE 16854
// sWound := true ;
16846: LD_ADDR_EXP 66
16850: PUSH
16851: LD_INT 1
16853: ST_TO_ADDR
// if p3 = 109 then
16854: LD_VAR 0 3
16858: PUSH
16859: LD_INT 109
16861: EQUAL
16862: IFFALSE 16872
// sBetray := true ;
16864: LD_ADDR_EXP 70
16868: PUSH
16869: LD_INT 1
16871: ST_TO_ADDR
// if p3 = 110 then
16872: LD_VAR 0 3
16876: PUSH
16877: LD_INT 110
16879: EQUAL
16880: IFFALSE 16890
// sContamin := true ;
16882: LD_ADDR_EXP 71
16886: PUSH
16887: LD_INT 1
16889: ST_TO_ADDR
// if p3 = 111 then
16890: LD_VAR 0 3
16894: PUSH
16895: LD_INT 111
16897: EQUAL
16898: IFFALSE 16908
// sOil := true ;
16900: LD_ADDR_EXP 73
16904: PUSH
16905: LD_INT 1
16907: ST_TO_ADDR
// if p3 = 112 then
16908: LD_VAR 0 3
16912: PUSH
16913: LD_INT 112
16915: EQUAL
16916: IFFALSE 16926
// sStu := true ;
16918: LD_ADDR_EXP 77
16922: PUSH
16923: LD_INT 1
16925: ST_TO_ADDR
// if p3 = 113 then
16926: LD_VAR 0 3
16930: PUSH
16931: LD_INT 113
16933: EQUAL
16934: IFFALSE 16944
// sBazooka := true ;
16936: LD_ADDR_EXP 80
16940: PUSH
16941: LD_INT 1
16943: ST_TO_ADDR
// if p3 = 114 then
16944: LD_VAR 0 3
16948: PUSH
16949: LD_INT 114
16951: EQUAL
16952: IFFALSE 16962
// sMortar := true ;
16954: LD_ADDR_EXP 81
16958: PUSH
16959: LD_INT 1
16961: ST_TO_ADDR
// if p3 = 115 then
16962: LD_VAR 0 3
16966: PUSH
16967: LD_INT 115
16969: EQUAL
16970: IFFALSE 16980
// sRanger := true ;
16972: LD_ADDR_EXP 91
16976: PUSH
16977: LD_INT 1
16979: ST_TO_ADDR
// if p3 = 116 then
16980: LD_VAR 0 3
16984: PUSH
16985: LD_INT 116
16987: EQUAL
16988: IFFALSE 16998
// sComputer := true ;
16990: LD_ADDR_EXP 92
16994: PUSH
16995: LD_INT 1
16997: ST_TO_ADDR
// if p3 = 117 then
16998: LD_VAR 0 3
17002: PUSH
17003: LD_INT 117
17005: EQUAL
17006: IFFALSE 17016
// s30 := true ;
17008: LD_ADDR_EXP 93
17012: PUSH
17013: LD_INT 1
17015: ST_TO_ADDR
// if p3 = 118 then
17016: LD_VAR 0 3
17020: PUSH
17021: LD_INT 118
17023: EQUAL
17024: IFFALSE 17034
// s60 := true ;
17026: LD_ADDR_EXP 94
17030: PUSH
17031: LD_INT 1
17033: ST_TO_ADDR
// end ; if p2 = hack_mode then
17034: LD_VAR 0 2
17038: PUSH
17039: LD_INT 101
17041: EQUAL
17042: IFFALSE 17170
// begin case p3 of 1 :
17044: LD_VAR 0 3
17048: PUSH
17049: LD_INT 1
17051: DOUBLE
17052: EQUAL
17053: IFTRUE 17057
17055: GO 17064
17057: POP
// hHackUnlimitedResources ; 2 :
17058: CALL 29433 0 0
17062: GO 17170
17064: LD_INT 2
17066: DOUBLE
17067: EQUAL
17068: IFTRUE 17072
17070: GO 17079
17072: POP
// hHackSetLevel10 ; 3 :
17073: CALL 29566 0 0
17077: GO 17170
17079: LD_INT 3
17081: DOUBLE
17082: EQUAL
17083: IFTRUE 17087
17085: GO 17094
17087: POP
// hHackSetLevel10YourUnits ; 4 :
17088: CALL 29651 0 0
17092: GO 17170
17094: LD_INT 4
17096: DOUBLE
17097: EQUAL
17098: IFTRUE 17102
17100: GO 17109
17102: POP
// hHackInvincible ; 5 :
17103: CALL 30099 0 0
17107: GO 17170
17109: LD_INT 5
17111: DOUBLE
17112: EQUAL
17113: IFTRUE 17117
17115: GO 17124
17117: POP
// hHackInvisible ; 6 :
17118: CALL 30210 0 0
17122: GO 17170
17124: LD_INT 6
17126: DOUBLE
17127: EQUAL
17128: IFTRUE 17132
17130: GO 17139
17132: POP
// hHackChangeYourSide ; 7 :
17133: CALL 30267 0 0
17137: GO 17170
17139: LD_INT 7
17141: DOUBLE
17142: EQUAL
17143: IFTRUE 17147
17145: GO 17154
17147: POP
// hHackChangeUnitSide ; 8 :
17148: CALL 30309 0 0
17152: GO 17170
17154: LD_INT 8
17156: DOUBLE
17157: EQUAL
17158: IFTRUE 17162
17160: GO 17169
17162: POP
// hHackFog ; end ;
17163: CALL 30410 0 0
17167: GO 17170
17169: POP
// end ; if p2 = game_save_mode then
17170: LD_VAR 0 2
17174: PUSH
17175: LD_INT 102
17177: EQUAL
17178: IFFALSE 17235
// begin if p3 = 1 then
17180: LD_VAR 0 3
17184: PUSH
17185: LD_INT 1
17187: EQUAL
17188: IFFALSE 17200
// globalGameSaveCounter := p4 ;
17190: LD_ADDR_EXP 37
17194: PUSH
17195: LD_VAR 0 4
17199: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
17200: LD_VAR 0 3
17204: PUSH
17205: LD_INT 2
17207: EQUAL
17208: IFFALSE 17216
17210: PUSH
17211: LD_EXP 37
17215: AND
17216: IFFALSE 17235
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17218: LD_STRING setGameSaveCounter(
17220: PUSH
17221: LD_EXP 37
17225: STR
17226: PUSH
17227: LD_STRING )
17229: STR
17230: PPUSH
17231: CALL_OW 559
// end ; end ;
17235: LD_VAR 0 7
17239: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
17240: LD_INT 0
17242: PPUSH
// streamModeActive := false ;
17243: LD_ADDR_EXP 38
17247: PUSH
17248: LD_INT 0
17250: ST_TO_ADDR
// normalCounter := 36 ;
17251: LD_ADDR_EXP 39
17255: PUSH
17256: LD_INT 36
17258: ST_TO_ADDR
// hardcoreCounter := 18 ;
17259: LD_ADDR_EXP 40
17263: PUSH
17264: LD_INT 18
17266: ST_TO_ADDR
// sRocket := false ;
17267: LD_ADDR_EXP 43
17271: PUSH
17272: LD_INT 0
17274: ST_TO_ADDR
// sSpeed := false ;
17275: LD_ADDR_EXP 42
17279: PUSH
17280: LD_INT 0
17282: ST_TO_ADDR
// sEngine := false ;
17283: LD_ADDR_EXP 44
17287: PUSH
17288: LD_INT 0
17290: ST_TO_ADDR
// sSpec := false ;
17291: LD_ADDR_EXP 41
17295: PUSH
17296: LD_INT 0
17298: ST_TO_ADDR
// sLevel := false ;
17299: LD_ADDR_EXP 45
17303: PUSH
17304: LD_INT 0
17306: ST_TO_ADDR
// sArmoury := false ;
17307: LD_ADDR_EXP 46
17311: PUSH
17312: LD_INT 0
17314: ST_TO_ADDR
// sRadar := false ;
17315: LD_ADDR_EXP 47
17319: PUSH
17320: LD_INT 0
17322: ST_TO_ADDR
// sBunker := false ;
17323: LD_ADDR_EXP 48
17327: PUSH
17328: LD_INT 0
17330: ST_TO_ADDR
// sHack := false ;
17331: LD_ADDR_EXP 49
17335: PUSH
17336: LD_INT 0
17338: ST_TO_ADDR
// sFire := false ;
17339: LD_ADDR_EXP 50
17343: PUSH
17344: LD_INT 0
17346: ST_TO_ADDR
// sRefresh := false ;
17347: LD_ADDR_EXP 51
17351: PUSH
17352: LD_INT 0
17354: ST_TO_ADDR
// sExp := false ;
17355: LD_ADDR_EXP 52
17359: PUSH
17360: LD_INT 0
17362: ST_TO_ADDR
// sDepot := false ;
17363: LD_ADDR_EXP 53
17367: PUSH
17368: LD_INT 0
17370: ST_TO_ADDR
// sFlag := false ;
17371: LD_ADDR_EXP 54
17375: PUSH
17376: LD_INT 0
17378: ST_TO_ADDR
// sKamikadze := false ;
17379: LD_ADDR_EXP 62
17383: PUSH
17384: LD_INT 0
17386: ST_TO_ADDR
// sTroll := false ;
17387: LD_ADDR_EXP 63
17391: PUSH
17392: LD_INT 0
17394: ST_TO_ADDR
// sSlow := false ;
17395: LD_ADDR_EXP 64
17399: PUSH
17400: LD_INT 0
17402: ST_TO_ADDR
// sLack := false ;
17403: LD_ADDR_EXP 65
17407: PUSH
17408: LD_INT 0
17410: ST_TO_ADDR
// sTank := false ;
17411: LD_ADDR_EXP 67
17415: PUSH
17416: LD_INT 0
17418: ST_TO_ADDR
// sRemote := false ;
17419: LD_ADDR_EXP 68
17423: PUSH
17424: LD_INT 0
17426: ST_TO_ADDR
// sPowell := false ;
17427: LD_ADDR_EXP 69
17431: PUSH
17432: LD_INT 0
17434: ST_TO_ADDR
// sTeleport := false ;
17435: LD_ADDR_EXP 72
17439: PUSH
17440: LD_INT 0
17442: ST_TO_ADDR
// sOilTower := false ;
17443: LD_ADDR_EXP 74
17447: PUSH
17448: LD_INT 0
17450: ST_TO_ADDR
// sShovel := false ;
17451: LD_ADDR_EXP 75
17455: PUSH
17456: LD_INT 0
17458: ST_TO_ADDR
// sSheik := false ;
17459: LD_ADDR_EXP 76
17463: PUSH
17464: LD_INT 0
17466: ST_TO_ADDR
// sEarthquake := false ;
17467: LD_ADDR_EXP 78
17471: PUSH
17472: LD_INT 0
17474: ST_TO_ADDR
// sAI := false ;
17475: LD_ADDR_EXP 79
17479: PUSH
17480: LD_INT 0
17482: ST_TO_ADDR
// sCargo := false ;
17483: LD_ADDR_EXP 82
17487: PUSH
17488: LD_INT 0
17490: ST_TO_ADDR
// sDLaser := false ;
17491: LD_ADDR_EXP 83
17495: PUSH
17496: LD_INT 0
17498: ST_TO_ADDR
// sExchange := false ;
17499: LD_ADDR_EXP 84
17503: PUSH
17504: LD_INT 0
17506: ST_TO_ADDR
// sFac := false ;
17507: LD_ADDR_EXP 85
17511: PUSH
17512: LD_INT 0
17514: ST_TO_ADDR
// sPower := false ;
17515: LD_ADDR_EXP 86
17519: PUSH
17520: LD_INT 0
17522: ST_TO_ADDR
// sRandom := false ;
17523: LD_ADDR_EXP 87
17527: PUSH
17528: LD_INT 0
17530: ST_TO_ADDR
// sShield := false ;
17531: LD_ADDR_EXP 88
17535: PUSH
17536: LD_INT 0
17538: ST_TO_ADDR
// sTime := false ;
17539: LD_ADDR_EXP 89
17543: PUSH
17544: LD_INT 0
17546: ST_TO_ADDR
// sTools := false ;
17547: LD_ADDR_EXP 90
17551: PUSH
17552: LD_INT 0
17554: ST_TO_ADDR
// sSold := false ;
17555: LD_ADDR_EXP 55
17559: PUSH
17560: LD_INT 0
17562: ST_TO_ADDR
// sDiff := false ;
17563: LD_ADDR_EXP 56
17567: PUSH
17568: LD_INT 0
17570: ST_TO_ADDR
// sFog := false ;
17571: LD_ADDR_EXP 59
17575: PUSH
17576: LD_INT 0
17578: ST_TO_ADDR
// sReset := false ;
17579: LD_ADDR_EXP 60
17583: PUSH
17584: LD_INT 0
17586: ST_TO_ADDR
// sSun := false ;
17587: LD_ADDR_EXP 61
17591: PUSH
17592: LD_INT 0
17594: ST_TO_ADDR
// sTiger := false ;
17595: LD_ADDR_EXP 57
17599: PUSH
17600: LD_INT 0
17602: ST_TO_ADDR
// sBomb := false ;
17603: LD_ADDR_EXP 58
17607: PUSH
17608: LD_INT 0
17610: ST_TO_ADDR
// sWound := false ;
17611: LD_ADDR_EXP 66
17615: PUSH
17616: LD_INT 0
17618: ST_TO_ADDR
// sBetray := false ;
17619: LD_ADDR_EXP 70
17623: PUSH
17624: LD_INT 0
17626: ST_TO_ADDR
// sContamin := false ;
17627: LD_ADDR_EXP 71
17631: PUSH
17632: LD_INT 0
17634: ST_TO_ADDR
// sOil := false ;
17635: LD_ADDR_EXP 73
17639: PUSH
17640: LD_INT 0
17642: ST_TO_ADDR
// sStu := false ;
17643: LD_ADDR_EXP 77
17647: PUSH
17648: LD_INT 0
17650: ST_TO_ADDR
// sBazooka := false ;
17651: LD_ADDR_EXP 80
17655: PUSH
17656: LD_INT 0
17658: ST_TO_ADDR
// sMortar := false ;
17659: LD_ADDR_EXP 81
17663: PUSH
17664: LD_INT 0
17666: ST_TO_ADDR
// sRanger := false ;
17667: LD_ADDR_EXP 91
17671: PUSH
17672: LD_INT 0
17674: ST_TO_ADDR
// sComputer := false ;
17675: LD_ADDR_EXP 92
17679: PUSH
17680: LD_INT 0
17682: ST_TO_ADDR
// s30 := false ;
17683: LD_ADDR_EXP 93
17687: PUSH
17688: LD_INT 0
17690: ST_TO_ADDR
// s60 := false ;
17691: LD_ADDR_EXP 94
17695: PUSH
17696: LD_INT 0
17698: ST_TO_ADDR
// end ;
17699: LD_VAR 0 1
17703: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17704: LD_INT 0
17706: PPUSH
17707: PPUSH
17708: PPUSH
17709: PPUSH
17710: PPUSH
17711: PPUSH
17712: PPUSH
// result := [ ] ;
17713: LD_ADDR_VAR 0 2
17717: PUSH
17718: EMPTY
17719: ST_TO_ADDR
// if campaign_id = 1 then
17720: LD_OWVAR 69
17724: PUSH
17725: LD_INT 1
17727: EQUAL
17728: IFFALSE 20894
// begin case mission_number of 1 :
17730: LD_OWVAR 70
17734: PUSH
17735: LD_INT 1
17737: DOUBLE
17738: EQUAL
17739: IFTRUE 17743
17741: GO 17819
17743: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
17744: LD_ADDR_VAR 0 2
17748: PUSH
17749: LD_INT 2
17751: PUSH
17752: LD_INT 4
17754: PUSH
17755: LD_INT 11
17757: PUSH
17758: LD_INT 12
17760: PUSH
17761: LD_INT 15
17763: PUSH
17764: LD_INT 16
17766: PUSH
17767: LD_INT 22
17769: PUSH
17770: LD_INT 23
17772: PUSH
17773: LD_INT 26
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: PUSH
17787: LD_INT 101
17789: PUSH
17790: LD_INT 102
17792: PUSH
17793: LD_INT 106
17795: PUSH
17796: LD_INT 116
17798: PUSH
17799: LD_INT 117
17801: PUSH
17802: LD_INT 118
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: ST_TO_ADDR
17817: GO 20892
17819: LD_INT 2
17821: DOUBLE
17822: EQUAL
17823: IFTRUE 17827
17825: GO 17911
17827: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
17828: LD_ADDR_VAR 0 2
17832: PUSH
17833: LD_INT 2
17835: PUSH
17836: LD_INT 4
17838: PUSH
17839: LD_INT 11
17841: PUSH
17842: LD_INT 12
17844: PUSH
17845: LD_INT 15
17847: PUSH
17848: LD_INT 16
17850: PUSH
17851: LD_INT 22
17853: PUSH
17854: LD_INT 23
17856: PUSH
17857: LD_INT 26
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: PUSH
17871: LD_INT 101
17873: PUSH
17874: LD_INT 102
17876: PUSH
17877: LD_INT 105
17879: PUSH
17880: LD_INT 106
17882: PUSH
17883: LD_INT 108
17885: PUSH
17886: LD_INT 116
17888: PUSH
17889: LD_INT 117
17891: PUSH
17892: LD_INT 118
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: ST_TO_ADDR
17909: GO 20892
17911: LD_INT 3
17913: DOUBLE
17914: EQUAL
17915: IFTRUE 17919
17917: GO 18007
17919: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17920: LD_ADDR_VAR 0 2
17924: PUSH
17925: LD_INT 2
17927: PUSH
17928: LD_INT 4
17930: PUSH
17931: LD_INT 5
17933: PUSH
17934: LD_INT 11
17936: PUSH
17937: LD_INT 12
17939: PUSH
17940: LD_INT 15
17942: PUSH
17943: LD_INT 16
17945: PUSH
17946: LD_INT 22
17948: PUSH
17949: LD_INT 26
17951: PUSH
17952: LD_INT 36
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: PUSH
17967: LD_INT 101
17969: PUSH
17970: LD_INT 102
17972: PUSH
17973: LD_INT 105
17975: PUSH
17976: LD_INT 106
17978: PUSH
17979: LD_INT 108
17981: PUSH
17982: LD_INT 116
17984: PUSH
17985: LD_INT 117
17987: PUSH
17988: LD_INT 118
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: ST_TO_ADDR
18005: GO 20892
18007: LD_INT 4
18009: DOUBLE
18010: EQUAL
18011: IFTRUE 18015
18013: GO 18111
18015: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
18016: LD_ADDR_VAR 0 2
18020: PUSH
18021: LD_INT 2
18023: PUSH
18024: LD_INT 4
18026: PUSH
18027: LD_INT 5
18029: PUSH
18030: LD_INT 8
18032: PUSH
18033: LD_INT 11
18035: PUSH
18036: LD_INT 12
18038: PUSH
18039: LD_INT 15
18041: PUSH
18042: LD_INT 16
18044: PUSH
18045: LD_INT 22
18047: PUSH
18048: LD_INT 23
18050: PUSH
18051: LD_INT 26
18053: PUSH
18054: LD_INT 36
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 101
18073: PUSH
18074: LD_INT 102
18076: PUSH
18077: LD_INT 105
18079: PUSH
18080: LD_INT 106
18082: PUSH
18083: LD_INT 108
18085: PUSH
18086: LD_INT 116
18088: PUSH
18089: LD_INT 117
18091: PUSH
18092: LD_INT 118
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: ST_TO_ADDR
18109: GO 20892
18111: LD_INT 5
18113: DOUBLE
18114: EQUAL
18115: IFTRUE 18119
18117: GO 18231
18119: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
18120: LD_ADDR_VAR 0 2
18124: PUSH
18125: LD_INT 2
18127: PUSH
18128: LD_INT 4
18130: PUSH
18131: LD_INT 5
18133: PUSH
18134: LD_INT 6
18136: PUSH
18137: LD_INT 8
18139: PUSH
18140: LD_INT 11
18142: PUSH
18143: LD_INT 12
18145: PUSH
18146: LD_INT 15
18148: PUSH
18149: LD_INT 16
18151: PUSH
18152: LD_INT 22
18154: PUSH
18155: LD_INT 23
18157: PUSH
18158: LD_INT 25
18160: PUSH
18161: LD_INT 26
18163: PUSH
18164: LD_INT 36
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 101
18185: PUSH
18186: LD_INT 102
18188: PUSH
18189: LD_INT 105
18191: PUSH
18192: LD_INT 106
18194: PUSH
18195: LD_INT 108
18197: PUSH
18198: LD_INT 109
18200: PUSH
18201: LD_INT 112
18203: PUSH
18204: LD_INT 116
18206: PUSH
18207: LD_INT 117
18209: PUSH
18210: LD_INT 118
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: ST_TO_ADDR
18229: GO 20892
18231: LD_INT 6
18233: DOUBLE
18234: EQUAL
18235: IFTRUE 18239
18237: GO 18371
18239: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
18240: LD_ADDR_VAR 0 2
18244: PUSH
18245: LD_INT 2
18247: PUSH
18248: LD_INT 4
18250: PUSH
18251: LD_INT 5
18253: PUSH
18254: LD_INT 6
18256: PUSH
18257: LD_INT 8
18259: PUSH
18260: LD_INT 11
18262: PUSH
18263: LD_INT 12
18265: PUSH
18266: LD_INT 15
18268: PUSH
18269: LD_INT 16
18271: PUSH
18272: LD_INT 20
18274: PUSH
18275: LD_INT 21
18277: PUSH
18278: LD_INT 22
18280: PUSH
18281: LD_INT 23
18283: PUSH
18284: LD_INT 25
18286: PUSH
18287: LD_INT 26
18289: PUSH
18290: LD_INT 30
18292: PUSH
18293: LD_INT 31
18295: PUSH
18296: LD_INT 32
18298: PUSH
18299: LD_INT 36
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 101
18325: PUSH
18326: LD_INT 102
18328: PUSH
18329: LD_INT 105
18331: PUSH
18332: LD_INT 106
18334: PUSH
18335: LD_INT 108
18337: PUSH
18338: LD_INT 109
18340: PUSH
18341: LD_INT 112
18343: PUSH
18344: LD_INT 116
18346: PUSH
18347: LD_INT 117
18349: PUSH
18350: LD_INT 118
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: ST_TO_ADDR
18369: GO 20892
18371: LD_INT 7
18373: DOUBLE
18374: EQUAL
18375: IFTRUE 18379
18377: GO 18491
18379: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
18380: LD_ADDR_VAR 0 2
18384: PUSH
18385: LD_INT 2
18387: PUSH
18388: LD_INT 4
18390: PUSH
18391: LD_INT 5
18393: PUSH
18394: LD_INT 7
18396: PUSH
18397: LD_INT 11
18399: PUSH
18400: LD_INT 12
18402: PUSH
18403: LD_INT 15
18405: PUSH
18406: LD_INT 16
18408: PUSH
18409: LD_INT 20
18411: PUSH
18412: LD_INT 21
18414: PUSH
18415: LD_INT 22
18417: PUSH
18418: LD_INT 23
18420: PUSH
18421: LD_INT 25
18423: PUSH
18424: LD_INT 26
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: PUSH
18443: LD_INT 101
18445: PUSH
18446: LD_INT 102
18448: PUSH
18449: LD_INT 103
18451: PUSH
18452: LD_INT 105
18454: PUSH
18455: LD_INT 106
18457: PUSH
18458: LD_INT 108
18460: PUSH
18461: LD_INT 112
18463: PUSH
18464: LD_INT 116
18466: PUSH
18467: LD_INT 117
18469: PUSH
18470: LD_INT 118
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: ST_TO_ADDR
18489: GO 20892
18491: LD_INT 8
18493: DOUBLE
18494: EQUAL
18495: IFTRUE 18499
18497: GO 18639
18499: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
18500: LD_ADDR_VAR 0 2
18504: PUSH
18505: LD_INT 2
18507: PUSH
18508: LD_INT 4
18510: PUSH
18511: LD_INT 5
18513: PUSH
18514: LD_INT 6
18516: PUSH
18517: LD_INT 7
18519: PUSH
18520: LD_INT 8
18522: PUSH
18523: LD_INT 11
18525: PUSH
18526: LD_INT 12
18528: PUSH
18529: LD_INT 15
18531: PUSH
18532: LD_INT 16
18534: PUSH
18535: LD_INT 20
18537: PUSH
18538: LD_INT 21
18540: PUSH
18541: LD_INT 22
18543: PUSH
18544: LD_INT 23
18546: PUSH
18547: LD_INT 25
18549: PUSH
18550: LD_INT 26
18552: PUSH
18553: LD_INT 30
18555: PUSH
18556: LD_INT 31
18558: PUSH
18559: LD_INT 32
18561: PUSH
18562: LD_INT 36
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: PUSH
18587: LD_INT 101
18589: PUSH
18590: LD_INT 102
18592: PUSH
18593: LD_INT 103
18595: PUSH
18596: LD_INT 105
18598: PUSH
18599: LD_INT 106
18601: PUSH
18602: LD_INT 108
18604: PUSH
18605: LD_INT 109
18607: PUSH
18608: LD_INT 112
18610: PUSH
18611: LD_INT 116
18613: PUSH
18614: LD_INT 117
18616: PUSH
18617: LD_INT 118
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: ST_TO_ADDR
18637: GO 20892
18639: LD_INT 9
18641: DOUBLE
18642: EQUAL
18643: IFTRUE 18647
18645: GO 18795
18647: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
18648: LD_ADDR_VAR 0 2
18652: PUSH
18653: LD_INT 2
18655: PUSH
18656: LD_INT 4
18658: PUSH
18659: LD_INT 5
18661: PUSH
18662: LD_INT 6
18664: PUSH
18665: LD_INT 7
18667: PUSH
18668: LD_INT 8
18670: PUSH
18671: LD_INT 11
18673: PUSH
18674: LD_INT 12
18676: PUSH
18677: LD_INT 15
18679: PUSH
18680: LD_INT 16
18682: PUSH
18683: LD_INT 20
18685: PUSH
18686: LD_INT 21
18688: PUSH
18689: LD_INT 22
18691: PUSH
18692: LD_INT 23
18694: PUSH
18695: LD_INT 25
18697: PUSH
18698: LD_INT 26
18700: PUSH
18701: LD_INT 28
18703: PUSH
18704: LD_INT 30
18706: PUSH
18707: LD_INT 31
18709: PUSH
18710: LD_INT 32
18712: PUSH
18713: LD_INT 36
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 101
18741: PUSH
18742: LD_INT 102
18744: PUSH
18745: LD_INT 103
18747: PUSH
18748: LD_INT 105
18750: PUSH
18751: LD_INT 106
18753: PUSH
18754: LD_INT 108
18756: PUSH
18757: LD_INT 109
18759: PUSH
18760: LD_INT 112
18762: PUSH
18763: LD_INT 114
18765: PUSH
18766: LD_INT 116
18768: PUSH
18769: LD_INT 117
18771: PUSH
18772: LD_INT 118
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: ST_TO_ADDR
18793: GO 20892
18795: LD_INT 10
18797: DOUBLE
18798: EQUAL
18799: IFTRUE 18803
18801: GO 18999
18803: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18804: LD_ADDR_VAR 0 2
18808: PUSH
18809: LD_INT 2
18811: PUSH
18812: LD_INT 4
18814: PUSH
18815: LD_INT 5
18817: PUSH
18818: LD_INT 6
18820: PUSH
18821: LD_INT 7
18823: PUSH
18824: LD_INT 8
18826: PUSH
18827: LD_INT 9
18829: PUSH
18830: LD_INT 10
18832: PUSH
18833: LD_INT 11
18835: PUSH
18836: LD_INT 12
18838: PUSH
18839: LD_INT 13
18841: PUSH
18842: LD_INT 14
18844: PUSH
18845: LD_INT 15
18847: PUSH
18848: LD_INT 16
18850: PUSH
18851: LD_INT 17
18853: PUSH
18854: LD_INT 18
18856: PUSH
18857: LD_INT 19
18859: PUSH
18860: LD_INT 20
18862: PUSH
18863: LD_INT 21
18865: PUSH
18866: LD_INT 22
18868: PUSH
18869: LD_INT 23
18871: PUSH
18872: LD_INT 24
18874: PUSH
18875: LD_INT 25
18877: PUSH
18878: LD_INT 26
18880: PUSH
18881: LD_INT 28
18883: PUSH
18884: LD_INT 30
18886: PUSH
18887: LD_INT 31
18889: PUSH
18890: LD_INT 32
18892: PUSH
18893: LD_INT 36
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: PUSH
18927: LD_INT 101
18929: PUSH
18930: LD_INT 102
18932: PUSH
18933: LD_INT 103
18935: PUSH
18936: LD_INT 104
18938: PUSH
18939: LD_INT 105
18941: PUSH
18942: LD_INT 106
18944: PUSH
18945: LD_INT 107
18947: PUSH
18948: LD_INT 108
18950: PUSH
18951: LD_INT 109
18953: PUSH
18954: LD_INT 110
18956: PUSH
18957: LD_INT 111
18959: PUSH
18960: LD_INT 112
18962: PUSH
18963: LD_INT 114
18965: PUSH
18966: LD_INT 116
18968: PUSH
18969: LD_INT 117
18971: PUSH
18972: LD_INT 118
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: ST_TO_ADDR
18997: GO 20892
18999: LD_INT 11
19001: DOUBLE
19002: EQUAL
19003: IFTRUE 19007
19005: GO 19211
19007: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
19008: LD_ADDR_VAR 0 2
19012: PUSH
19013: LD_INT 2
19015: PUSH
19016: LD_INT 3
19018: PUSH
19019: LD_INT 4
19021: PUSH
19022: LD_INT 5
19024: PUSH
19025: LD_INT 6
19027: PUSH
19028: LD_INT 7
19030: PUSH
19031: LD_INT 8
19033: PUSH
19034: LD_INT 9
19036: PUSH
19037: LD_INT 10
19039: PUSH
19040: LD_INT 11
19042: PUSH
19043: LD_INT 12
19045: PUSH
19046: LD_INT 13
19048: PUSH
19049: LD_INT 14
19051: PUSH
19052: LD_INT 15
19054: PUSH
19055: LD_INT 16
19057: PUSH
19058: LD_INT 17
19060: PUSH
19061: LD_INT 18
19063: PUSH
19064: LD_INT 19
19066: PUSH
19067: LD_INT 20
19069: PUSH
19070: LD_INT 21
19072: PUSH
19073: LD_INT 22
19075: PUSH
19076: LD_INT 23
19078: PUSH
19079: LD_INT 24
19081: PUSH
19082: LD_INT 25
19084: PUSH
19085: LD_INT 26
19087: PUSH
19088: LD_INT 28
19090: PUSH
19091: LD_INT 30
19093: PUSH
19094: LD_INT 31
19096: PUSH
19097: LD_INT 32
19099: PUSH
19100: LD_INT 34
19102: PUSH
19103: LD_INT 36
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 101
19141: PUSH
19142: LD_INT 102
19144: PUSH
19145: LD_INT 103
19147: PUSH
19148: LD_INT 104
19150: PUSH
19151: LD_INT 105
19153: PUSH
19154: LD_INT 106
19156: PUSH
19157: LD_INT 107
19159: PUSH
19160: LD_INT 108
19162: PUSH
19163: LD_INT 109
19165: PUSH
19166: LD_INT 110
19168: PUSH
19169: LD_INT 111
19171: PUSH
19172: LD_INT 112
19174: PUSH
19175: LD_INT 114
19177: PUSH
19178: LD_INT 116
19180: PUSH
19181: LD_INT 117
19183: PUSH
19184: LD_INT 118
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: ST_TO_ADDR
19209: GO 20892
19211: LD_INT 12
19213: DOUBLE
19214: EQUAL
19215: IFTRUE 19219
19217: GO 19439
19219: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
19220: LD_ADDR_VAR 0 2
19224: PUSH
19225: LD_INT 1
19227: PUSH
19228: LD_INT 2
19230: PUSH
19231: LD_INT 3
19233: PUSH
19234: LD_INT 4
19236: PUSH
19237: LD_INT 5
19239: PUSH
19240: LD_INT 6
19242: PUSH
19243: LD_INT 7
19245: PUSH
19246: LD_INT 8
19248: PUSH
19249: LD_INT 9
19251: PUSH
19252: LD_INT 10
19254: PUSH
19255: LD_INT 11
19257: PUSH
19258: LD_INT 12
19260: PUSH
19261: LD_INT 13
19263: PUSH
19264: LD_INT 14
19266: PUSH
19267: LD_INT 15
19269: PUSH
19270: LD_INT 16
19272: PUSH
19273: LD_INT 17
19275: PUSH
19276: LD_INT 18
19278: PUSH
19279: LD_INT 19
19281: PUSH
19282: LD_INT 20
19284: PUSH
19285: LD_INT 21
19287: PUSH
19288: LD_INT 22
19290: PUSH
19291: LD_INT 23
19293: PUSH
19294: LD_INT 24
19296: PUSH
19297: LD_INT 25
19299: PUSH
19300: LD_INT 26
19302: PUSH
19303: LD_INT 27
19305: PUSH
19306: LD_INT 28
19308: PUSH
19309: LD_INT 30
19311: PUSH
19312: LD_INT 31
19314: PUSH
19315: LD_INT 32
19317: PUSH
19318: LD_INT 33
19320: PUSH
19321: LD_INT 34
19323: PUSH
19324: LD_INT 36
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 101
19365: PUSH
19366: LD_INT 102
19368: PUSH
19369: LD_INT 103
19371: PUSH
19372: LD_INT 104
19374: PUSH
19375: LD_INT 105
19377: PUSH
19378: LD_INT 106
19380: PUSH
19381: LD_INT 107
19383: PUSH
19384: LD_INT 108
19386: PUSH
19387: LD_INT 109
19389: PUSH
19390: LD_INT 110
19392: PUSH
19393: LD_INT 111
19395: PUSH
19396: LD_INT 112
19398: PUSH
19399: LD_INT 113
19401: PUSH
19402: LD_INT 114
19404: PUSH
19405: LD_INT 116
19407: PUSH
19408: LD_INT 117
19410: PUSH
19411: LD_INT 118
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: ST_TO_ADDR
19437: GO 20892
19439: LD_INT 13
19441: DOUBLE
19442: EQUAL
19443: IFTRUE 19447
19445: GO 19655
19447: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
19448: LD_ADDR_VAR 0 2
19452: PUSH
19453: LD_INT 1
19455: PUSH
19456: LD_INT 2
19458: PUSH
19459: LD_INT 3
19461: PUSH
19462: LD_INT 4
19464: PUSH
19465: LD_INT 5
19467: PUSH
19468: LD_INT 8
19470: PUSH
19471: LD_INT 9
19473: PUSH
19474: LD_INT 10
19476: PUSH
19477: LD_INT 11
19479: PUSH
19480: LD_INT 12
19482: PUSH
19483: LD_INT 14
19485: PUSH
19486: LD_INT 15
19488: PUSH
19489: LD_INT 16
19491: PUSH
19492: LD_INT 17
19494: PUSH
19495: LD_INT 18
19497: PUSH
19498: LD_INT 19
19500: PUSH
19501: LD_INT 20
19503: PUSH
19504: LD_INT 21
19506: PUSH
19507: LD_INT 22
19509: PUSH
19510: LD_INT 23
19512: PUSH
19513: LD_INT 24
19515: PUSH
19516: LD_INT 25
19518: PUSH
19519: LD_INT 26
19521: PUSH
19522: LD_INT 27
19524: PUSH
19525: LD_INT 28
19527: PUSH
19528: LD_INT 30
19530: PUSH
19531: LD_INT 31
19533: PUSH
19534: LD_INT 32
19536: PUSH
19537: LD_INT 33
19539: PUSH
19540: LD_INT 34
19542: PUSH
19543: LD_INT 36
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 101
19581: PUSH
19582: LD_INT 102
19584: PUSH
19585: LD_INT 103
19587: PUSH
19588: LD_INT 104
19590: PUSH
19591: LD_INT 105
19593: PUSH
19594: LD_INT 106
19596: PUSH
19597: LD_INT 107
19599: PUSH
19600: LD_INT 108
19602: PUSH
19603: LD_INT 109
19605: PUSH
19606: LD_INT 110
19608: PUSH
19609: LD_INT 111
19611: PUSH
19612: LD_INT 112
19614: PUSH
19615: LD_INT 113
19617: PUSH
19618: LD_INT 114
19620: PUSH
19621: LD_INT 116
19623: PUSH
19624: LD_INT 117
19626: PUSH
19627: LD_INT 118
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: ST_TO_ADDR
19653: GO 20892
19655: LD_INT 14
19657: DOUBLE
19658: EQUAL
19659: IFTRUE 19663
19661: GO 19887
19663: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
19664: LD_ADDR_VAR 0 2
19668: PUSH
19669: LD_INT 1
19671: PUSH
19672: LD_INT 2
19674: PUSH
19675: LD_INT 3
19677: PUSH
19678: LD_INT 4
19680: PUSH
19681: LD_INT 5
19683: PUSH
19684: LD_INT 6
19686: PUSH
19687: LD_INT 7
19689: PUSH
19690: LD_INT 8
19692: PUSH
19693: LD_INT 9
19695: PUSH
19696: LD_INT 10
19698: PUSH
19699: LD_INT 11
19701: PUSH
19702: LD_INT 12
19704: PUSH
19705: LD_INT 13
19707: PUSH
19708: LD_INT 14
19710: PUSH
19711: LD_INT 15
19713: PUSH
19714: LD_INT 16
19716: PUSH
19717: LD_INT 17
19719: PUSH
19720: LD_INT 18
19722: PUSH
19723: LD_INT 19
19725: PUSH
19726: LD_INT 20
19728: PUSH
19729: LD_INT 21
19731: PUSH
19732: LD_INT 22
19734: PUSH
19735: LD_INT 23
19737: PUSH
19738: LD_INT 24
19740: PUSH
19741: LD_INT 25
19743: PUSH
19744: LD_INT 26
19746: PUSH
19747: LD_INT 27
19749: PUSH
19750: LD_INT 28
19752: PUSH
19753: LD_INT 29
19755: PUSH
19756: LD_INT 30
19758: PUSH
19759: LD_INT 31
19761: PUSH
19762: LD_INT 32
19764: PUSH
19765: LD_INT 33
19767: PUSH
19768: LD_INT 34
19770: PUSH
19771: LD_INT 36
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: PUSH
19811: LD_INT 101
19813: PUSH
19814: LD_INT 102
19816: PUSH
19817: LD_INT 103
19819: PUSH
19820: LD_INT 104
19822: PUSH
19823: LD_INT 105
19825: PUSH
19826: LD_INT 106
19828: PUSH
19829: LD_INT 107
19831: PUSH
19832: LD_INT 108
19834: PUSH
19835: LD_INT 109
19837: PUSH
19838: LD_INT 110
19840: PUSH
19841: LD_INT 111
19843: PUSH
19844: LD_INT 112
19846: PUSH
19847: LD_INT 113
19849: PUSH
19850: LD_INT 114
19852: PUSH
19853: LD_INT 116
19855: PUSH
19856: LD_INT 117
19858: PUSH
19859: LD_INT 118
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: ST_TO_ADDR
19885: GO 20892
19887: LD_INT 15
19889: DOUBLE
19890: EQUAL
19891: IFTRUE 19895
19893: GO 20119
19895: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19896: LD_ADDR_VAR 0 2
19900: PUSH
19901: LD_INT 1
19903: PUSH
19904: LD_INT 2
19906: PUSH
19907: LD_INT 3
19909: PUSH
19910: LD_INT 4
19912: PUSH
19913: LD_INT 5
19915: PUSH
19916: LD_INT 6
19918: PUSH
19919: LD_INT 7
19921: PUSH
19922: LD_INT 8
19924: PUSH
19925: LD_INT 9
19927: PUSH
19928: LD_INT 10
19930: PUSH
19931: LD_INT 11
19933: PUSH
19934: LD_INT 12
19936: PUSH
19937: LD_INT 13
19939: PUSH
19940: LD_INT 14
19942: PUSH
19943: LD_INT 15
19945: PUSH
19946: LD_INT 16
19948: PUSH
19949: LD_INT 17
19951: PUSH
19952: LD_INT 18
19954: PUSH
19955: LD_INT 19
19957: PUSH
19958: LD_INT 20
19960: PUSH
19961: LD_INT 21
19963: PUSH
19964: LD_INT 22
19966: PUSH
19967: LD_INT 23
19969: PUSH
19970: LD_INT 24
19972: PUSH
19973: LD_INT 25
19975: PUSH
19976: LD_INT 26
19978: PUSH
19979: LD_INT 27
19981: PUSH
19982: LD_INT 28
19984: PUSH
19985: LD_INT 29
19987: PUSH
19988: LD_INT 30
19990: PUSH
19991: LD_INT 31
19993: PUSH
19994: LD_INT 32
19996: PUSH
19997: LD_INT 33
19999: PUSH
20000: LD_INT 34
20002: PUSH
20003: LD_INT 36
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 101
20045: PUSH
20046: LD_INT 102
20048: PUSH
20049: LD_INT 103
20051: PUSH
20052: LD_INT 104
20054: PUSH
20055: LD_INT 105
20057: PUSH
20058: LD_INT 106
20060: PUSH
20061: LD_INT 107
20063: PUSH
20064: LD_INT 108
20066: PUSH
20067: LD_INT 109
20069: PUSH
20070: LD_INT 110
20072: PUSH
20073: LD_INT 111
20075: PUSH
20076: LD_INT 112
20078: PUSH
20079: LD_INT 113
20081: PUSH
20082: LD_INT 114
20084: PUSH
20085: LD_INT 116
20087: PUSH
20088: LD_INT 117
20090: PUSH
20091: LD_INT 118
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: ST_TO_ADDR
20117: GO 20892
20119: LD_INT 16
20121: DOUBLE
20122: EQUAL
20123: IFTRUE 20127
20125: GO 20263
20127: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
20128: LD_ADDR_VAR 0 2
20132: PUSH
20133: LD_INT 2
20135: PUSH
20136: LD_INT 4
20138: PUSH
20139: LD_INT 5
20141: PUSH
20142: LD_INT 7
20144: PUSH
20145: LD_INT 11
20147: PUSH
20148: LD_INT 12
20150: PUSH
20151: LD_INT 15
20153: PUSH
20154: LD_INT 16
20156: PUSH
20157: LD_INT 20
20159: PUSH
20160: LD_INT 21
20162: PUSH
20163: LD_INT 22
20165: PUSH
20166: LD_INT 23
20168: PUSH
20169: LD_INT 25
20171: PUSH
20172: LD_INT 26
20174: PUSH
20175: LD_INT 30
20177: PUSH
20178: LD_INT 31
20180: PUSH
20181: LD_INT 32
20183: PUSH
20184: LD_INT 33
20186: PUSH
20187: LD_INT 34
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: PUSH
20211: LD_INT 101
20213: PUSH
20214: LD_INT 102
20216: PUSH
20217: LD_INT 103
20219: PUSH
20220: LD_INT 106
20222: PUSH
20223: LD_INT 108
20225: PUSH
20226: LD_INT 112
20228: PUSH
20229: LD_INT 113
20231: PUSH
20232: LD_INT 114
20234: PUSH
20235: LD_INT 116
20237: PUSH
20238: LD_INT 117
20240: PUSH
20241: LD_INT 118
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: ST_TO_ADDR
20261: GO 20892
20263: LD_INT 17
20265: DOUBLE
20266: EQUAL
20267: IFTRUE 20271
20269: GO 20495
20271: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
20272: LD_ADDR_VAR 0 2
20276: PUSH
20277: LD_INT 1
20279: PUSH
20280: LD_INT 2
20282: PUSH
20283: LD_INT 3
20285: PUSH
20286: LD_INT 4
20288: PUSH
20289: LD_INT 5
20291: PUSH
20292: LD_INT 6
20294: PUSH
20295: LD_INT 7
20297: PUSH
20298: LD_INT 8
20300: PUSH
20301: LD_INT 9
20303: PUSH
20304: LD_INT 10
20306: PUSH
20307: LD_INT 11
20309: PUSH
20310: LD_INT 12
20312: PUSH
20313: LD_INT 13
20315: PUSH
20316: LD_INT 14
20318: PUSH
20319: LD_INT 15
20321: PUSH
20322: LD_INT 16
20324: PUSH
20325: LD_INT 17
20327: PUSH
20328: LD_INT 18
20330: PUSH
20331: LD_INT 19
20333: PUSH
20334: LD_INT 20
20336: PUSH
20337: LD_INT 21
20339: PUSH
20340: LD_INT 22
20342: PUSH
20343: LD_INT 23
20345: PUSH
20346: LD_INT 24
20348: PUSH
20349: LD_INT 25
20351: PUSH
20352: LD_INT 26
20354: PUSH
20355: LD_INT 27
20357: PUSH
20358: LD_INT 28
20360: PUSH
20361: LD_INT 29
20363: PUSH
20364: LD_INT 30
20366: PUSH
20367: LD_INT 31
20369: PUSH
20370: LD_INT 32
20372: PUSH
20373: LD_INT 33
20375: PUSH
20376: LD_INT 34
20378: PUSH
20379: LD_INT 36
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 101
20421: PUSH
20422: LD_INT 102
20424: PUSH
20425: LD_INT 103
20427: PUSH
20428: LD_INT 104
20430: PUSH
20431: LD_INT 105
20433: PUSH
20434: LD_INT 106
20436: PUSH
20437: LD_INT 107
20439: PUSH
20440: LD_INT 108
20442: PUSH
20443: LD_INT 109
20445: PUSH
20446: LD_INT 110
20448: PUSH
20449: LD_INT 111
20451: PUSH
20452: LD_INT 112
20454: PUSH
20455: LD_INT 113
20457: PUSH
20458: LD_INT 114
20460: PUSH
20461: LD_INT 116
20463: PUSH
20464: LD_INT 117
20466: PUSH
20467: LD_INT 118
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: ST_TO_ADDR
20493: GO 20892
20495: LD_INT 18
20497: DOUBLE
20498: EQUAL
20499: IFTRUE 20503
20501: GO 20651
20503: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
20504: LD_ADDR_VAR 0 2
20508: PUSH
20509: LD_INT 2
20511: PUSH
20512: LD_INT 4
20514: PUSH
20515: LD_INT 5
20517: PUSH
20518: LD_INT 7
20520: PUSH
20521: LD_INT 11
20523: PUSH
20524: LD_INT 12
20526: PUSH
20527: LD_INT 15
20529: PUSH
20530: LD_INT 16
20532: PUSH
20533: LD_INT 20
20535: PUSH
20536: LD_INT 21
20538: PUSH
20539: LD_INT 22
20541: PUSH
20542: LD_INT 23
20544: PUSH
20545: LD_INT 25
20547: PUSH
20548: LD_INT 26
20550: PUSH
20551: LD_INT 30
20553: PUSH
20554: LD_INT 31
20556: PUSH
20557: LD_INT 32
20559: PUSH
20560: LD_INT 33
20562: PUSH
20563: LD_INT 34
20565: PUSH
20566: LD_INT 35
20568: PUSH
20569: LD_INT 36
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 101
20597: PUSH
20598: LD_INT 102
20600: PUSH
20601: LD_INT 103
20603: PUSH
20604: LD_INT 106
20606: PUSH
20607: LD_INT 108
20609: PUSH
20610: LD_INT 112
20612: PUSH
20613: LD_INT 113
20615: PUSH
20616: LD_INT 114
20618: PUSH
20619: LD_INT 115
20621: PUSH
20622: LD_INT 116
20624: PUSH
20625: LD_INT 117
20627: PUSH
20628: LD_INT 118
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: ST_TO_ADDR
20649: GO 20892
20651: LD_INT 19
20653: DOUBLE
20654: EQUAL
20655: IFTRUE 20659
20657: GO 20891
20659: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
20660: LD_ADDR_VAR 0 2
20664: PUSH
20665: LD_INT 1
20667: PUSH
20668: LD_INT 2
20670: PUSH
20671: LD_INT 3
20673: PUSH
20674: LD_INT 4
20676: PUSH
20677: LD_INT 5
20679: PUSH
20680: LD_INT 6
20682: PUSH
20683: LD_INT 7
20685: PUSH
20686: LD_INT 8
20688: PUSH
20689: LD_INT 9
20691: PUSH
20692: LD_INT 10
20694: PUSH
20695: LD_INT 11
20697: PUSH
20698: LD_INT 12
20700: PUSH
20701: LD_INT 13
20703: PUSH
20704: LD_INT 14
20706: PUSH
20707: LD_INT 15
20709: PUSH
20710: LD_INT 16
20712: PUSH
20713: LD_INT 17
20715: PUSH
20716: LD_INT 18
20718: PUSH
20719: LD_INT 19
20721: PUSH
20722: LD_INT 20
20724: PUSH
20725: LD_INT 21
20727: PUSH
20728: LD_INT 22
20730: PUSH
20731: LD_INT 23
20733: PUSH
20734: LD_INT 24
20736: PUSH
20737: LD_INT 25
20739: PUSH
20740: LD_INT 26
20742: PUSH
20743: LD_INT 27
20745: PUSH
20746: LD_INT 28
20748: PUSH
20749: LD_INT 29
20751: PUSH
20752: LD_INT 30
20754: PUSH
20755: LD_INT 31
20757: PUSH
20758: LD_INT 32
20760: PUSH
20761: LD_INT 33
20763: PUSH
20764: LD_INT 34
20766: PUSH
20767: LD_INT 35
20769: PUSH
20770: LD_INT 36
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 101
20813: PUSH
20814: LD_INT 102
20816: PUSH
20817: LD_INT 103
20819: PUSH
20820: LD_INT 104
20822: PUSH
20823: LD_INT 105
20825: PUSH
20826: LD_INT 106
20828: PUSH
20829: LD_INT 107
20831: PUSH
20832: LD_INT 108
20834: PUSH
20835: LD_INT 109
20837: PUSH
20838: LD_INT 110
20840: PUSH
20841: LD_INT 111
20843: PUSH
20844: LD_INT 112
20846: PUSH
20847: LD_INT 113
20849: PUSH
20850: LD_INT 114
20852: PUSH
20853: LD_INT 115
20855: PUSH
20856: LD_INT 116
20858: PUSH
20859: LD_INT 117
20861: PUSH
20862: LD_INT 118
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: ST_TO_ADDR
20889: GO 20892
20891: POP
// end else
20892: GO 21123
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20894: LD_ADDR_VAR 0 2
20898: PUSH
20899: LD_INT 1
20901: PUSH
20902: LD_INT 2
20904: PUSH
20905: LD_INT 3
20907: PUSH
20908: LD_INT 4
20910: PUSH
20911: LD_INT 5
20913: PUSH
20914: LD_INT 6
20916: PUSH
20917: LD_INT 7
20919: PUSH
20920: LD_INT 8
20922: PUSH
20923: LD_INT 9
20925: PUSH
20926: LD_INT 10
20928: PUSH
20929: LD_INT 11
20931: PUSH
20932: LD_INT 12
20934: PUSH
20935: LD_INT 13
20937: PUSH
20938: LD_INT 14
20940: PUSH
20941: LD_INT 15
20943: PUSH
20944: LD_INT 16
20946: PUSH
20947: LD_INT 17
20949: PUSH
20950: LD_INT 18
20952: PUSH
20953: LD_INT 19
20955: PUSH
20956: LD_INT 20
20958: PUSH
20959: LD_INT 21
20961: PUSH
20962: LD_INT 22
20964: PUSH
20965: LD_INT 23
20967: PUSH
20968: LD_INT 24
20970: PUSH
20971: LD_INT 25
20973: PUSH
20974: LD_INT 26
20976: PUSH
20977: LD_INT 27
20979: PUSH
20980: LD_INT 28
20982: PUSH
20983: LD_INT 29
20985: PUSH
20986: LD_INT 30
20988: PUSH
20989: LD_INT 31
20991: PUSH
20992: LD_INT 32
20994: PUSH
20995: LD_INT 33
20997: PUSH
20998: LD_INT 34
21000: PUSH
21001: LD_INT 35
21003: PUSH
21004: LD_INT 36
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 101
21047: PUSH
21048: LD_INT 102
21050: PUSH
21051: LD_INT 103
21053: PUSH
21054: LD_INT 104
21056: PUSH
21057: LD_INT 105
21059: PUSH
21060: LD_INT 106
21062: PUSH
21063: LD_INT 107
21065: PUSH
21066: LD_INT 108
21068: PUSH
21069: LD_INT 109
21071: PUSH
21072: LD_INT 110
21074: PUSH
21075: LD_INT 111
21077: PUSH
21078: LD_INT 112
21080: PUSH
21081: LD_INT 113
21083: PUSH
21084: LD_INT 114
21086: PUSH
21087: LD_INT 115
21089: PUSH
21090: LD_INT 116
21092: PUSH
21093: LD_INT 117
21095: PUSH
21096: LD_INT 118
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: ST_TO_ADDR
// if result then
21123: LD_VAR 0 2
21127: IFFALSE 21913
// begin normal :=  ;
21129: LD_ADDR_VAR 0 5
21133: PUSH
21134: LD_STRING 
21136: ST_TO_ADDR
// hardcore :=  ;
21137: LD_ADDR_VAR 0 6
21141: PUSH
21142: LD_STRING 
21144: ST_TO_ADDR
// active :=  ;
21145: LD_ADDR_VAR 0 7
21149: PUSH
21150: LD_STRING 
21152: ST_TO_ADDR
// for i = 1 to normalCounter do
21153: LD_ADDR_VAR 0 8
21157: PUSH
21158: DOUBLE
21159: LD_INT 1
21161: DEC
21162: ST_TO_ADDR
21163: LD_EXP 39
21167: PUSH
21168: FOR_TO
21169: IFFALSE 21270
// begin tmp := 0 ;
21171: LD_ADDR_VAR 0 3
21175: PUSH
21176: LD_STRING 0
21178: ST_TO_ADDR
// if result [ 1 ] then
21179: LD_VAR 0 2
21183: PUSH
21184: LD_INT 1
21186: ARRAY
21187: IFFALSE 21252
// if result [ 1 ] [ 1 ] = i then
21189: LD_VAR 0 2
21193: PUSH
21194: LD_INT 1
21196: ARRAY
21197: PUSH
21198: LD_INT 1
21200: ARRAY
21201: PUSH
21202: LD_VAR 0 8
21206: EQUAL
21207: IFFALSE 21252
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21209: LD_ADDR_VAR 0 2
21213: PUSH
21214: LD_VAR 0 2
21218: PPUSH
21219: LD_INT 1
21221: PPUSH
21222: LD_VAR 0 2
21226: PUSH
21227: LD_INT 1
21229: ARRAY
21230: PPUSH
21231: LD_INT 1
21233: PPUSH
21234: CALL_OW 3
21238: PPUSH
21239: CALL_OW 1
21243: ST_TO_ADDR
// tmp := 1 ;
21244: LD_ADDR_VAR 0 3
21248: PUSH
21249: LD_STRING 1
21251: ST_TO_ADDR
// end ; normal := normal & tmp ;
21252: LD_ADDR_VAR 0 5
21256: PUSH
21257: LD_VAR 0 5
21261: PUSH
21262: LD_VAR 0 3
21266: STR
21267: ST_TO_ADDR
// end ;
21268: GO 21168
21270: POP
21271: POP
// for i = 1 to hardcoreCounter do
21272: LD_ADDR_VAR 0 8
21276: PUSH
21277: DOUBLE
21278: LD_INT 1
21280: DEC
21281: ST_TO_ADDR
21282: LD_EXP 40
21286: PUSH
21287: FOR_TO
21288: IFFALSE 21393
// begin tmp := 0 ;
21290: LD_ADDR_VAR 0 3
21294: PUSH
21295: LD_STRING 0
21297: ST_TO_ADDR
// if result [ 2 ] then
21298: LD_VAR 0 2
21302: PUSH
21303: LD_INT 2
21305: ARRAY
21306: IFFALSE 21375
// if result [ 2 ] [ 1 ] = 100 + i then
21308: LD_VAR 0 2
21312: PUSH
21313: LD_INT 2
21315: ARRAY
21316: PUSH
21317: LD_INT 1
21319: ARRAY
21320: PUSH
21321: LD_INT 100
21323: PUSH
21324: LD_VAR 0 8
21328: PLUS
21329: EQUAL
21330: IFFALSE 21375
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21332: LD_ADDR_VAR 0 2
21336: PUSH
21337: LD_VAR 0 2
21341: PPUSH
21342: LD_INT 2
21344: PPUSH
21345: LD_VAR 0 2
21349: PUSH
21350: LD_INT 2
21352: ARRAY
21353: PPUSH
21354: LD_INT 1
21356: PPUSH
21357: CALL_OW 3
21361: PPUSH
21362: CALL_OW 1
21366: ST_TO_ADDR
// tmp := 1 ;
21367: LD_ADDR_VAR 0 3
21371: PUSH
21372: LD_STRING 1
21374: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21375: LD_ADDR_VAR 0 6
21379: PUSH
21380: LD_VAR 0 6
21384: PUSH
21385: LD_VAR 0 3
21389: STR
21390: ST_TO_ADDR
// end ;
21391: GO 21287
21393: POP
21394: POP
// if isGameLoad then
21395: LD_VAR 0 1
21399: IFFALSE 21874
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
21401: LD_ADDR_VAR 0 4
21405: PUSH
21406: LD_EXP 43
21410: PUSH
21411: LD_EXP 42
21415: PUSH
21416: LD_EXP 44
21420: PUSH
21421: LD_EXP 41
21425: PUSH
21426: LD_EXP 45
21430: PUSH
21431: LD_EXP 46
21435: PUSH
21436: LD_EXP 47
21440: PUSH
21441: LD_EXP 48
21445: PUSH
21446: LD_EXP 49
21450: PUSH
21451: LD_EXP 50
21455: PUSH
21456: LD_EXP 51
21460: PUSH
21461: LD_EXP 52
21465: PUSH
21466: LD_EXP 53
21470: PUSH
21471: LD_EXP 54
21475: PUSH
21476: LD_EXP 62
21480: PUSH
21481: LD_EXP 63
21485: PUSH
21486: LD_EXP 64
21490: PUSH
21491: LD_EXP 65
21495: PUSH
21496: LD_EXP 67
21500: PUSH
21501: LD_EXP 68
21505: PUSH
21506: LD_EXP 69
21510: PUSH
21511: LD_EXP 72
21515: PUSH
21516: LD_EXP 74
21520: PUSH
21521: LD_EXP 75
21525: PUSH
21526: LD_EXP 76
21530: PUSH
21531: LD_EXP 78
21535: PUSH
21536: LD_EXP 79
21540: PUSH
21541: LD_EXP 82
21545: PUSH
21546: LD_EXP 83
21550: PUSH
21551: LD_EXP 84
21555: PUSH
21556: LD_EXP 85
21560: PUSH
21561: LD_EXP 86
21565: PUSH
21566: LD_EXP 87
21570: PUSH
21571: LD_EXP 88
21575: PUSH
21576: LD_EXP 89
21580: PUSH
21581: LD_EXP 90
21585: PUSH
21586: LD_EXP 55
21590: PUSH
21591: LD_EXP 56
21595: PUSH
21596: LD_EXP 59
21600: PUSH
21601: LD_EXP 60
21605: PUSH
21606: LD_EXP 61
21610: PUSH
21611: LD_EXP 57
21615: PUSH
21616: LD_EXP 58
21620: PUSH
21621: LD_EXP 66
21625: PUSH
21626: LD_EXP 70
21630: PUSH
21631: LD_EXP 71
21635: PUSH
21636: LD_EXP 73
21640: PUSH
21641: LD_EXP 77
21645: PUSH
21646: LD_EXP 80
21650: PUSH
21651: LD_EXP 81
21655: PUSH
21656: LD_EXP 91
21660: PUSH
21661: LD_EXP 92
21665: PUSH
21666: LD_EXP 93
21670: PUSH
21671: LD_EXP 94
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: ST_TO_ADDR
// tmp :=  ;
21732: LD_ADDR_VAR 0 3
21736: PUSH
21737: LD_STRING 
21739: ST_TO_ADDR
// for i = 1 to normalCounter do
21740: LD_ADDR_VAR 0 8
21744: PUSH
21745: DOUBLE
21746: LD_INT 1
21748: DEC
21749: ST_TO_ADDR
21750: LD_EXP 39
21754: PUSH
21755: FOR_TO
21756: IFFALSE 21792
// begin if flags [ i ] then
21758: LD_VAR 0 4
21762: PUSH
21763: LD_VAR 0 8
21767: ARRAY
21768: IFFALSE 21790
// tmp := tmp & i & ; ;
21770: LD_ADDR_VAR 0 3
21774: PUSH
21775: LD_VAR 0 3
21779: PUSH
21780: LD_VAR 0 8
21784: STR
21785: PUSH
21786: LD_STRING ;
21788: STR
21789: ST_TO_ADDR
// end ;
21790: GO 21755
21792: POP
21793: POP
// for i = 1 to hardcoreCounter do
21794: LD_ADDR_VAR 0 8
21798: PUSH
21799: DOUBLE
21800: LD_INT 1
21802: DEC
21803: ST_TO_ADDR
21804: LD_EXP 40
21808: PUSH
21809: FOR_TO
21810: IFFALSE 21856
// begin if flags [ normalCounter + i ] then
21812: LD_VAR 0 4
21816: PUSH
21817: LD_EXP 39
21821: PUSH
21822: LD_VAR 0 8
21826: PLUS
21827: ARRAY
21828: IFFALSE 21854
// tmp := tmp & ( 100 + i ) & ; ;
21830: LD_ADDR_VAR 0 3
21834: PUSH
21835: LD_VAR 0 3
21839: PUSH
21840: LD_INT 100
21842: PUSH
21843: LD_VAR 0 8
21847: PLUS
21848: STR
21849: PUSH
21850: LD_STRING ;
21852: STR
21853: ST_TO_ADDR
// end ;
21854: GO 21809
21856: POP
21857: POP
// if tmp then
21858: LD_VAR 0 3
21862: IFFALSE 21874
// active := tmp ;
21864: LD_ADDR_VAR 0 7
21868: PUSH
21869: LD_VAR 0 3
21873: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21874: LD_STRING getStreamItemsFromMission("
21876: PUSH
21877: LD_VAR 0 5
21881: STR
21882: PUSH
21883: LD_STRING ","
21885: STR
21886: PUSH
21887: LD_VAR 0 6
21891: STR
21892: PUSH
21893: LD_STRING ","
21895: STR
21896: PUSH
21897: LD_VAR 0 7
21901: STR
21902: PUSH
21903: LD_STRING ")
21905: STR
21906: PPUSH
21907: CALL_OW 559
// end else
21911: GO 21920
// ToLua ( getStreamItemsFromMission("","","") ) ;
21913: LD_STRING getStreamItemsFromMission("","","")
21915: PPUSH
21916: CALL_OW 559
// end ;
21920: LD_VAR 0 2
21924: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21925: LD_EXP 38
21929: IFFALSE 21937
21931: PUSH
21932: LD_EXP 43
21936: AND
21937: IFFALSE 22061
21939: GO 21941
21941: DISABLE
21942: LD_INT 0
21944: PPUSH
21945: PPUSH
// begin enable ;
21946: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21947: LD_ADDR_VAR 0 2
21951: PUSH
21952: LD_INT 22
21954: PUSH
21955: LD_OWVAR 2
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 2
21966: PUSH
21967: LD_INT 34
21969: PUSH
21970: LD_INT 7
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 34
21979: PUSH
21980: LD_INT 45
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 34
21989: PUSH
21990: LD_INT 28
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 34
21999: PUSH
22000: LD_INT 47
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PPUSH
22018: CALL_OW 69
22022: ST_TO_ADDR
// if not tmp then
22023: LD_VAR 0 2
22027: NOT
22028: IFFALSE 22032
// exit ;
22030: GO 22061
// for i in tmp do
22032: LD_ADDR_VAR 0 1
22036: PUSH
22037: LD_VAR 0 2
22041: PUSH
22042: FOR_IN
22043: IFFALSE 22059
// begin SetLives ( i , 0 ) ;
22045: LD_VAR 0 1
22049: PPUSH
22050: LD_INT 0
22052: PPUSH
22053: CALL_OW 234
// end ;
22057: GO 22042
22059: POP
22060: POP
// end ;
22061: PPOPN 2
22063: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22064: LD_EXP 38
22068: IFFALSE 22076
22070: PUSH
22071: LD_EXP 44
22075: AND
22076: IFFALSE 22160
22078: GO 22080
22080: DISABLE
22081: LD_INT 0
22083: PPUSH
22084: PPUSH
// begin enable ;
22085: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22086: LD_ADDR_VAR 0 2
22090: PUSH
22091: LD_INT 22
22093: PUSH
22094: LD_OWVAR 2
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: PUSH
22103: LD_INT 32
22105: PUSH
22106: LD_INT 3
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: PPUSH
22117: CALL_OW 69
22121: ST_TO_ADDR
// if not tmp then
22122: LD_VAR 0 2
22126: NOT
22127: IFFALSE 22131
// exit ;
22129: GO 22160
// for i in tmp do
22131: LD_ADDR_VAR 0 1
22135: PUSH
22136: LD_VAR 0 2
22140: PUSH
22141: FOR_IN
22142: IFFALSE 22158
// begin SetLives ( i , 0 ) ;
22144: LD_VAR 0 1
22148: PPUSH
22149: LD_INT 0
22151: PPUSH
22152: CALL_OW 234
// end ;
22156: GO 22141
22158: POP
22159: POP
// end ;
22160: PPOPN 2
22162: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22163: LD_EXP 38
22167: IFFALSE 22175
22169: PUSH
22170: LD_EXP 41
22174: AND
22175: IFFALSE 22268
22177: GO 22179
22179: DISABLE
22180: LD_INT 0
22182: PPUSH
// begin enable ;
22183: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22184: LD_ADDR_VAR 0 1
22188: PUSH
22189: LD_INT 22
22191: PUSH
22192: LD_OWVAR 2
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 2
22203: PUSH
22204: LD_INT 25
22206: PUSH
22207: LD_INT 5
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 25
22216: PUSH
22217: LD_INT 9
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 25
22226: PUSH
22227: LD_INT 8
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PPUSH
22244: CALL_OW 69
22248: PUSH
22249: FOR_IN
22250: IFFALSE 22266
// begin SetClass ( i , 1 ) ;
22252: LD_VAR 0 1
22256: PPUSH
22257: LD_INT 1
22259: PPUSH
22260: CALL_OW 336
// end ;
22264: GO 22249
22266: POP
22267: POP
// end ;
22268: PPOPN 1
22270: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22271: LD_EXP 38
22275: IFFALSE 22283
22277: PUSH
22278: LD_EXP 42
22282: AND
22283: IFFALSE 22295
22285: PUSH
22286: LD_OWVAR 65
22290: PUSH
22291: LD_INT 7
22293: LESS
22294: AND
22295: IFFALSE 22309
22297: GO 22299
22299: DISABLE
// begin enable ;
22300: ENABLE
// game_speed := 7 ;
22301: LD_ADDR_OWVAR 65
22305: PUSH
22306: LD_INT 7
22308: ST_TO_ADDR
// end ;
22309: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22310: LD_EXP 38
22314: IFFALSE 22322
22316: PUSH
22317: LD_EXP 45
22321: AND
22322: IFFALSE 22524
22324: GO 22326
22326: DISABLE
22327: LD_INT 0
22329: PPUSH
22330: PPUSH
22331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22332: LD_ADDR_VAR 0 3
22336: PUSH
22337: LD_INT 81
22339: PUSH
22340: LD_OWVAR 2
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 21
22351: PUSH
22352: LD_INT 1
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PPUSH
22363: CALL_OW 69
22367: ST_TO_ADDR
// if not tmp then
22368: LD_VAR 0 3
22372: NOT
22373: IFFALSE 22377
// exit ;
22375: GO 22524
// if tmp > 5 then
22377: LD_VAR 0 3
22381: PUSH
22382: LD_INT 5
22384: GREATER
22385: IFFALSE 22397
// k := 5 else
22387: LD_ADDR_VAR 0 2
22391: PUSH
22392: LD_INT 5
22394: ST_TO_ADDR
22395: GO 22407
// k := tmp ;
22397: LD_ADDR_VAR 0 2
22401: PUSH
22402: LD_VAR 0 3
22406: ST_TO_ADDR
// for i := 1 to k do
22407: LD_ADDR_VAR 0 1
22411: PUSH
22412: DOUBLE
22413: LD_INT 1
22415: DEC
22416: ST_TO_ADDR
22417: LD_VAR 0 2
22421: PUSH
22422: FOR_TO
22423: IFFALSE 22522
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22425: LD_VAR 0 3
22429: PUSH
22430: LD_VAR 0 1
22434: ARRAY
22435: PPUSH
22436: LD_VAR 0 1
22440: PUSH
22441: LD_INT 4
22443: MOD
22444: PUSH
22445: LD_INT 1
22447: PLUS
22448: PPUSH
22449: CALL_OW 259
22453: PUSH
22454: LD_INT 10
22456: LESS
22457: IFFALSE 22520
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22459: LD_VAR 0 3
22463: PUSH
22464: LD_VAR 0 1
22468: ARRAY
22469: PPUSH
22470: LD_VAR 0 1
22474: PUSH
22475: LD_INT 4
22477: MOD
22478: PUSH
22479: LD_INT 1
22481: PLUS
22482: PPUSH
22483: LD_VAR 0 3
22487: PUSH
22488: LD_VAR 0 1
22492: ARRAY
22493: PPUSH
22494: LD_VAR 0 1
22498: PUSH
22499: LD_INT 4
22501: MOD
22502: PUSH
22503: LD_INT 1
22505: PLUS
22506: PPUSH
22507: CALL_OW 259
22511: PUSH
22512: LD_INT 1
22514: PLUS
22515: PPUSH
22516: CALL_OW 237
22520: GO 22422
22522: POP
22523: POP
// end ;
22524: PPOPN 3
22526: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22527: LD_EXP 38
22531: IFFALSE 22539
22533: PUSH
22534: LD_EXP 46
22538: AND
22539: IFFALSE 22559
22541: GO 22543
22543: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22544: LD_INT 4
22546: PPUSH
22547: LD_OWVAR 2
22551: PPUSH
22552: LD_INT 0
22554: PPUSH
22555: CALL_OW 324
22559: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22560: LD_EXP 38
22564: IFFALSE 22572
22566: PUSH
22567: LD_EXP 75
22571: AND
22572: IFFALSE 22592
22574: GO 22576
22576: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22577: LD_INT 19
22579: PPUSH
22580: LD_OWVAR 2
22584: PPUSH
22585: LD_INT 0
22587: PPUSH
22588: CALL_OW 324
22592: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22593: LD_EXP 38
22597: IFFALSE 22605
22599: PUSH
22600: LD_EXP 47
22604: AND
22605: IFFALSE 22707
22607: GO 22609
22609: DISABLE
22610: LD_INT 0
22612: PPUSH
22613: PPUSH
// begin enable ;
22614: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22615: LD_ADDR_VAR 0 2
22619: PUSH
22620: LD_INT 22
22622: PUSH
22623: LD_OWVAR 2
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: PUSH
22632: LD_INT 2
22634: PUSH
22635: LD_INT 34
22637: PUSH
22638: LD_INT 11
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 34
22647: PUSH
22648: LD_INT 30
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: LIST
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PPUSH
22664: CALL_OW 69
22668: ST_TO_ADDR
// if not tmp then
22669: LD_VAR 0 2
22673: NOT
22674: IFFALSE 22678
// exit ;
22676: GO 22707
// for i in tmp do
22678: LD_ADDR_VAR 0 1
22682: PUSH
22683: LD_VAR 0 2
22687: PUSH
22688: FOR_IN
22689: IFFALSE 22705
// begin SetLives ( i , 0 ) ;
22691: LD_VAR 0 1
22695: PPUSH
22696: LD_INT 0
22698: PPUSH
22699: CALL_OW 234
// end ;
22703: GO 22688
22705: POP
22706: POP
// end ;
22707: PPOPN 2
22709: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22710: LD_EXP 38
22714: IFFALSE 22722
22716: PUSH
22717: LD_EXP 48
22721: AND
22722: IFFALSE 22742
22724: GO 22726
22726: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22727: LD_INT 32
22729: PPUSH
22730: LD_OWVAR 2
22734: PPUSH
22735: LD_INT 0
22737: PPUSH
22738: CALL_OW 324
22742: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22743: LD_EXP 38
22747: IFFALSE 22755
22749: PUSH
22750: LD_EXP 49
22754: AND
22755: IFFALSE 22938
22757: GO 22759
22759: DISABLE
22760: LD_INT 0
22762: PPUSH
22763: PPUSH
22764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22765: LD_ADDR_VAR 0 2
22769: PUSH
22770: LD_INT 22
22772: PUSH
22773: LD_OWVAR 2
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 33
22784: PUSH
22785: LD_INT 3
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PPUSH
22796: CALL_OW 69
22800: ST_TO_ADDR
// if not tmp then
22801: LD_VAR 0 2
22805: NOT
22806: IFFALSE 22810
// exit ;
22808: GO 22938
// side := 0 ;
22810: LD_ADDR_VAR 0 3
22814: PUSH
22815: LD_INT 0
22817: ST_TO_ADDR
// for i := 1 to 8 do
22818: LD_ADDR_VAR 0 1
22822: PUSH
22823: DOUBLE
22824: LD_INT 1
22826: DEC
22827: ST_TO_ADDR
22828: LD_INT 8
22830: PUSH
22831: FOR_TO
22832: IFFALSE 22882
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22834: LD_OWVAR 2
22838: PUSH
22839: LD_VAR 0 1
22843: NONEQUAL
22844: IFFALSE 22866
22846: PUSH
22847: LD_OWVAR 2
22851: PPUSH
22852: LD_VAR 0 1
22856: PPUSH
22857: CALL_OW 81
22861: PUSH
22862: LD_INT 2
22864: EQUAL
22865: AND
22866: IFFALSE 22880
// begin side := i ;
22868: LD_ADDR_VAR 0 3
22872: PUSH
22873: LD_VAR 0 1
22877: ST_TO_ADDR
// break ;
22878: GO 22882
// end ;
22880: GO 22831
22882: POP
22883: POP
// if not side then
22884: LD_VAR 0 3
22888: NOT
22889: IFFALSE 22893
// exit ;
22891: GO 22938
// for i := 1 to tmp do
22893: LD_ADDR_VAR 0 1
22897: PUSH
22898: DOUBLE
22899: LD_INT 1
22901: DEC
22902: ST_TO_ADDR
22903: LD_VAR 0 2
22907: PUSH
22908: FOR_TO
22909: IFFALSE 22936
// if Prob ( 60 ) then
22911: LD_INT 60
22913: PPUSH
22914: CALL_OW 13
22918: IFFALSE 22934
// SetSide ( i , side ) ;
22920: LD_VAR 0 1
22924: PPUSH
22925: LD_VAR 0 3
22929: PPUSH
22930: CALL_OW 235
22934: GO 22908
22936: POP
22937: POP
// end ;
22938: PPOPN 3
22940: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22941: LD_EXP 38
22945: IFFALSE 22953
22947: PUSH
22948: LD_EXP 51
22952: AND
22953: IFFALSE 23072
22955: GO 22957
22957: DISABLE
22958: LD_INT 0
22960: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22961: LD_ADDR_VAR 0 1
22965: PUSH
22966: LD_INT 22
22968: PUSH
22969: LD_OWVAR 2
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 21
22980: PUSH
22981: LD_INT 1
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: PUSH
22988: LD_INT 3
22990: PUSH
22991: LD_INT 23
22993: PUSH
22994: LD_INT 0
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: LIST
23009: PPUSH
23010: CALL_OW 69
23014: PUSH
23015: FOR_IN
23016: IFFALSE 23070
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23018: LD_VAR 0 1
23022: PPUSH
23023: CALL_OW 257
23027: PUSH
23028: LD_INT 1
23030: PUSH
23031: LD_INT 2
23033: PUSH
23034: LD_INT 3
23036: PUSH
23037: LD_INT 4
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: IN
23046: IFFALSE 23068
// SetClass ( un , rand ( 1 , 4 ) ) ;
23048: LD_VAR 0 1
23052: PPUSH
23053: LD_INT 1
23055: PPUSH
23056: LD_INT 4
23058: PPUSH
23059: CALL_OW 12
23063: PPUSH
23064: CALL_OW 336
23068: GO 23015
23070: POP
23071: POP
// end ;
23072: PPOPN 1
23074: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23075: LD_EXP 38
23079: IFFALSE 23087
23081: PUSH
23082: LD_EXP 50
23086: AND
23087: IFFALSE 23166
23089: GO 23091
23091: DISABLE
23092: LD_INT 0
23094: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23095: LD_ADDR_VAR 0 1
23099: PUSH
23100: LD_INT 22
23102: PUSH
23103: LD_OWVAR 2
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 21
23114: PUSH
23115: LD_INT 3
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PPUSH
23126: CALL_OW 69
23130: ST_TO_ADDR
// if not tmp then
23131: LD_VAR 0 1
23135: NOT
23136: IFFALSE 23140
// exit ;
23138: GO 23166
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23140: LD_VAR 0 1
23144: PUSH
23145: LD_INT 1
23147: PPUSH
23148: LD_VAR 0 1
23152: PPUSH
23153: CALL_OW 12
23157: ARRAY
23158: PPUSH
23159: LD_INT 100
23161: PPUSH
23162: CALL_OW 234
// end ;
23166: PPOPN 1
23168: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23169: LD_EXP 38
23173: IFFALSE 23181
23175: PUSH
23176: LD_EXP 52
23180: AND
23181: IFFALSE 23279
23183: GO 23185
23185: DISABLE
23186: LD_INT 0
23188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23189: LD_ADDR_VAR 0 1
23193: PUSH
23194: LD_INT 22
23196: PUSH
23197: LD_OWVAR 2
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 21
23208: PUSH
23209: LD_INT 1
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PPUSH
23220: CALL_OW 69
23224: ST_TO_ADDR
// if not tmp then
23225: LD_VAR 0 1
23229: NOT
23230: IFFALSE 23234
// exit ;
23232: GO 23279
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23234: LD_VAR 0 1
23238: PUSH
23239: LD_INT 1
23241: PPUSH
23242: LD_VAR 0 1
23246: PPUSH
23247: CALL_OW 12
23251: ARRAY
23252: PPUSH
23253: LD_INT 1
23255: PPUSH
23256: LD_INT 4
23258: PPUSH
23259: CALL_OW 12
23263: PPUSH
23264: LD_INT 3000
23266: PPUSH
23267: LD_INT 9000
23269: PPUSH
23270: CALL_OW 12
23274: PPUSH
23275: CALL_OW 492
// end ;
23279: PPOPN 1
23281: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23282: LD_EXP 38
23286: IFFALSE 23294
23288: PUSH
23289: LD_EXP 53
23293: AND
23294: IFFALSE 23314
23296: GO 23298
23298: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23299: LD_INT 1
23301: PPUSH
23302: LD_OWVAR 2
23306: PPUSH
23307: LD_INT 0
23309: PPUSH
23310: CALL_OW 324
23314: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23315: LD_EXP 38
23319: IFFALSE 23327
23321: PUSH
23322: LD_EXP 54
23326: AND
23327: IFFALSE 23410
23329: GO 23331
23331: DISABLE
23332: LD_INT 0
23334: PPUSH
23335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23336: LD_ADDR_VAR 0 2
23340: PUSH
23341: LD_INT 22
23343: PUSH
23344: LD_OWVAR 2
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 21
23355: PUSH
23356: LD_INT 3
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PPUSH
23367: CALL_OW 69
23371: ST_TO_ADDR
// if not tmp then
23372: LD_VAR 0 2
23376: NOT
23377: IFFALSE 23381
// exit ;
23379: GO 23410
// for i in tmp do
23381: LD_ADDR_VAR 0 1
23385: PUSH
23386: LD_VAR 0 2
23390: PUSH
23391: FOR_IN
23392: IFFALSE 23408
// SetBLevel ( i , 10 ) ;
23394: LD_VAR 0 1
23398: PPUSH
23399: LD_INT 10
23401: PPUSH
23402: CALL_OW 241
23406: GO 23391
23408: POP
23409: POP
// end ;
23410: PPOPN 2
23412: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23413: LD_EXP 38
23417: IFFALSE 23425
23419: PUSH
23420: LD_EXP 55
23424: AND
23425: IFFALSE 23536
23427: GO 23429
23429: DISABLE
23430: LD_INT 0
23432: PPUSH
23433: PPUSH
23434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23435: LD_ADDR_VAR 0 3
23439: PUSH
23440: LD_INT 22
23442: PUSH
23443: LD_OWVAR 2
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 25
23454: PUSH
23455: LD_INT 1
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PPUSH
23466: CALL_OW 69
23470: ST_TO_ADDR
// if not tmp then
23471: LD_VAR 0 3
23475: NOT
23476: IFFALSE 23480
// exit ;
23478: GO 23536
// un := tmp [ rand ( 1 , tmp ) ] ;
23480: LD_ADDR_VAR 0 2
23484: PUSH
23485: LD_VAR 0 3
23489: PUSH
23490: LD_INT 1
23492: PPUSH
23493: LD_VAR 0 3
23497: PPUSH
23498: CALL_OW 12
23502: ARRAY
23503: ST_TO_ADDR
// if Crawls ( un ) then
23504: LD_VAR 0 2
23508: PPUSH
23509: CALL_OW 318
23513: IFFALSE 23524
// ComWalk ( un ) ;
23515: LD_VAR 0 2
23519: PPUSH
23520: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23524: LD_VAR 0 2
23528: PPUSH
23529: LD_INT 5
23531: PPUSH
23532: CALL_OW 336
// end ;
23536: PPOPN 3
23538: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23539: LD_EXP 38
23543: IFFALSE 23551
23545: PUSH
23546: LD_EXP 56
23550: AND
23551: IFFALSE 23563
23553: PUSH
23554: LD_OWVAR 67
23558: PUSH
23559: LD_INT 4
23561: LESS
23562: AND
23563: IFFALSE 23582
23565: GO 23567
23567: DISABLE
// begin Difficulty := Difficulty + 1 ;
23568: LD_ADDR_OWVAR 67
23572: PUSH
23573: LD_OWVAR 67
23577: PUSH
23578: LD_INT 1
23580: PLUS
23581: ST_TO_ADDR
// end ;
23582: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23583: LD_EXP 38
23587: IFFALSE 23595
23589: PUSH
23590: LD_EXP 57
23594: AND
23595: IFFALSE 23698
23597: GO 23599
23599: DISABLE
23600: LD_INT 0
23602: PPUSH
// begin for i := 1 to 5 do
23603: LD_ADDR_VAR 0 1
23607: PUSH
23608: DOUBLE
23609: LD_INT 1
23611: DEC
23612: ST_TO_ADDR
23613: LD_INT 5
23615: PUSH
23616: FOR_TO
23617: IFFALSE 23696
// begin uc_nation := nation_nature ;
23619: LD_ADDR_OWVAR 21
23623: PUSH
23624: LD_INT 0
23626: ST_TO_ADDR
// uc_side := 0 ;
23627: LD_ADDR_OWVAR 20
23631: PUSH
23632: LD_INT 0
23634: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23635: LD_ADDR_OWVAR 29
23639: PUSH
23640: LD_INT 12
23642: PUSH
23643: LD_INT 12
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: ST_TO_ADDR
// hc_agressivity := 20 ;
23650: LD_ADDR_OWVAR 35
23654: PUSH
23655: LD_INT 20
23657: ST_TO_ADDR
// hc_class := class_tiger ;
23658: LD_ADDR_OWVAR 28
23662: PUSH
23663: LD_INT 14
23665: ST_TO_ADDR
// hc_gallery :=  ;
23666: LD_ADDR_OWVAR 33
23670: PUSH
23671: LD_STRING 
23673: ST_TO_ADDR
// hc_name :=  ;
23674: LD_ADDR_OWVAR 26
23678: PUSH
23679: LD_STRING 
23681: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23682: CALL_OW 44
23686: PPUSH
23687: LD_INT 0
23689: PPUSH
23690: CALL_OW 51
// end ;
23694: GO 23616
23696: POP
23697: POP
// end ;
23698: PPOPN 1
23700: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23701: LD_EXP 38
23705: IFFALSE 23713
23707: PUSH
23708: LD_EXP 58
23712: AND
23713: IFFALSE 23722
23715: GO 23717
23717: DISABLE
// StreamSibBomb ;
23718: CALL 23723 0 0
23722: END
// export function StreamSibBomb ; var i , x , y ; begin
23723: LD_INT 0
23725: PPUSH
23726: PPUSH
23727: PPUSH
23728: PPUSH
// result := false ;
23729: LD_ADDR_VAR 0 1
23733: PUSH
23734: LD_INT 0
23736: ST_TO_ADDR
// for i := 1 to 16 do
23737: LD_ADDR_VAR 0 2
23741: PUSH
23742: DOUBLE
23743: LD_INT 1
23745: DEC
23746: ST_TO_ADDR
23747: LD_INT 16
23749: PUSH
23750: FOR_TO
23751: IFFALSE 23950
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23753: LD_ADDR_VAR 0 3
23757: PUSH
23758: LD_INT 10
23760: PUSH
23761: LD_INT 20
23763: PUSH
23764: LD_INT 30
23766: PUSH
23767: LD_INT 40
23769: PUSH
23770: LD_INT 50
23772: PUSH
23773: LD_INT 60
23775: PUSH
23776: LD_INT 70
23778: PUSH
23779: LD_INT 80
23781: PUSH
23782: LD_INT 90
23784: PUSH
23785: LD_INT 100
23787: PUSH
23788: LD_INT 110
23790: PUSH
23791: LD_INT 120
23793: PUSH
23794: LD_INT 130
23796: PUSH
23797: LD_INT 140
23799: PUSH
23800: LD_INT 150
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 1
23822: PPUSH
23823: LD_INT 15
23825: PPUSH
23826: CALL_OW 12
23830: ARRAY
23831: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23832: LD_ADDR_VAR 0 4
23836: PUSH
23837: LD_INT 10
23839: PUSH
23840: LD_INT 20
23842: PUSH
23843: LD_INT 30
23845: PUSH
23846: LD_INT 40
23848: PUSH
23849: LD_INT 50
23851: PUSH
23852: LD_INT 60
23854: PUSH
23855: LD_INT 70
23857: PUSH
23858: LD_INT 80
23860: PUSH
23861: LD_INT 90
23863: PUSH
23864: LD_INT 100
23866: PUSH
23867: LD_INT 110
23869: PUSH
23870: LD_INT 120
23872: PUSH
23873: LD_INT 130
23875: PUSH
23876: LD_INT 140
23878: PUSH
23879: LD_INT 150
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 1
23901: PPUSH
23902: LD_INT 15
23904: PPUSH
23905: CALL_OW 12
23909: ARRAY
23910: ST_TO_ADDR
// if ValidHex ( x , y ) then
23911: LD_VAR 0 3
23915: PPUSH
23916: LD_VAR 0 4
23920: PPUSH
23921: CALL_OW 488
23925: IFFALSE 23948
// begin result := [ x , y ] ;
23927: LD_ADDR_VAR 0 1
23931: PUSH
23932: LD_VAR 0 3
23936: PUSH
23937: LD_VAR 0 4
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: ST_TO_ADDR
// break ;
23946: GO 23950
// end ; end ;
23948: GO 23750
23950: POP
23951: POP
// if result then
23952: LD_VAR 0 1
23956: IFFALSE 24016
// begin ToLua ( playSibBomb() ) ;
23958: LD_STRING playSibBomb()
23960: PPUSH
23961: CALL_OW 559
// wait ( 0 0$14 ) ;
23965: LD_INT 490
23967: PPUSH
23968: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23972: LD_VAR 0 1
23976: PUSH
23977: LD_INT 1
23979: ARRAY
23980: PPUSH
23981: LD_VAR 0 1
23985: PUSH
23986: LD_INT 2
23988: ARRAY
23989: PPUSH
23990: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23994: LD_VAR 0 1
23998: PUSH
23999: LD_INT 1
24001: ARRAY
24002: PPUSH
24003: LD_VAR 0 1
24007: PUSH
24008: LD_INT 2
24010: ARRAY
24011: PPUSH
24012: CALL_OW 429
// end ; end ;
24016: LD_VAR 0 1
24020: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24021: LD_EXP 38
24025: IFFALSE 24033
24027: PUSH
24028: LD_EXP 60
24032: AND
24033: IFFALSE 24045
24035: GO 24037
24037: DISABLE
// YouLost (  ) ;
24038: LD_STRING 
24040: PPUSH
24041: CALL_OW 104
24045: END
// every 0 0$1 trigger StreamModeActive and sFog do
24046: LD_EXP 38
24050: IFFALSE 24058
24052: PUSH
24053: LD_EXP 59
24057: AND
24058: IFFALSE 24072
24060: GO 24062
24062: DISABLE
// FogOff ( your_side ) ;
24063: LD_OWVAR 2
24067: PPUSH
24068: CALL_OW 344
24072: END
// every 0 0$1 trigger StreamModeActive and sSun do
24073: LD_EXP 38
24077: IFFALSE 24085
24079: PUSH
24080: LD_EXP 61
24084: AND
24085: IFFALSE 24113
24087: GO 24089
24089: DISABLE
// begin solar_recharge_percent := 0 ;
24090: LD_ADDR_OWVAR 79
24094: PUSH
24095: LD_INT 0
24097: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24098: LD_INT 10500
24100: PPUSH
24101: CALL_OW 67
// solar_recharge_percent := 100 ;
24105: LD_ADDR_OWVAR 79
24109: PUSH
24110: LD_INT 100
24112: ST_TO_ADDR
// end ;
24113: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24114: LD_EXP 38
24118: IFFALSE 24126
24120: PUSH
24121: LD_EXP 62
24125: AND
24126: IFFALSE 24365
24128: GO 24130
24130: DISABLE
24131: LD_INT 0
24133: PPUSH
24134: PPUSH
24135: PPUSH
// begin tmp := [ ] ;
24136: LD_ADDR_VAR 0 3
24140: PUSH
24141: EMPTY
24142: ST_TO_ADDR
// for i := 1 to 6 do
24143: LD_ADDR_VAR 0 1
24147: PUSH
24148: DOUBLE
24149: LD_INT 1
24151: DEC
24152: ST_TO_ADDR
24153: LD_INT 6
24155: PUSH
24156: FOR_TO
24157: IFFALSE 24262
// begin uc_nation := nation_nature ;
24159: LD_ADDR_OWVAR 21
24163: PUSH
24164: LD_INT 0
24166: ST_TO_ADDR
// uc_side := 0 ;
24167: LD_ADDR_OWVAR 20
24171: PUSH
24172: LD_INT 0
24174: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24175: LD_ADDR_OWVAR 29
24179: PUSH
24180: LD_INT 12
24182: PUSH
24183: LD_INT 12
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: ST_TO_ADDR
// hc_agressivity := 20 ;
24190: LD_ADDR_OWVAR 35
24194: PUSH
24195: LD_INT 20
24197: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24198: LD_ADDR_OWVAR 28
24202: PUSH
24203: LD_INT 17
24205: ST_TO_ADDR
// hc_gallery :=  ;
24206: LD_ADDR_OWVAR 33
24210: PUSH
24211: LD_STRING 
24213: ST_TO_ADDR
// hc_name :=  ;
24214: LD_ADDR_OWVAR 26
24218: PUSH
24219: LD_STRING 
24221: ST_TO_ADDR
// un := CreateHuman ;
24222: LD_ADDR_VAR 0 2
24226: PUSH
24227: CALL_OW 44
24231: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24232: LD_VAR 0 2
24236: PPUSH
24237: LD_INT 1
24239: PPUSH
24240: CALL_OW 51
// tmp := tmp ^ un ;
24244: LD_ADDR_VAR 0 3
24248: PUSH
24249: LD_VAR 0 3
24253: PUSH
24254: LD_VAR 0 2
24258: ADD
24259: ST_TO_ADDR
// end ;
24260: GO 24156
24262: POP
24263: POP
// repeat wait ( 0 0$1 ) ;
24264: LD_INT 35
24266: PPUSH
24267: CALL_OW 67
// for un in tmp do
24271: LD_ADDR_VAR 0 2
24275: PUSH
24276: LD_VAR 0 3
24280: PUSH
24281: FOR_IN
24282: IFFALSE 24356
// begin if IsDead ( un ) then
24284: LD_VAR 0 2
24288: PPUSH
24289: CALL_OW 301
24293: IFFALSE 24313
// begin tmp := tmp diff un ;
24295: LD_ADDR_VAR 0 3
24299: PUSH
24300: LD_VAR 0 3
24304: PUSH
24305: LD_VAR 0 2
24309: DIFF
24310: ST_TO_ADDR
// continue ;
24311: GO 24281
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24313: LD_VAR 0 2
24317: PPUSH
24318: LD_INT 3
24320: PUSH
24321: LD_INT 22
24323: PUSH
24324: LD_INT 0
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PPUSH
24335: CALL_OW 69
24339: PPUSH
24340: LD_VAR 0 2
24344: PPUSH
24345: CALL_OW 74
24349: PPUSH
24350: CALL_OW 115
// end ;
24354: GO 24281
24356: POP
24357: POP
// until not tmp ;
24358: LD_VAR 0 3
24362: NOT
24363: IFFALSE 24264
// end ;
24365: PPOPN 3
24367: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24368: LD_EXP 38
24372: IFFALSE 24380
24374: PUSH
24375: LD_EXP 63
24379: AND
24380: IFFALSE 24434
24382: GO 24384
24384: DISABLE
// begin ToLua ( displayTroll(); ) ;
24385: LD_STRING displayTroll();
24387: PPUSH
24388: CALL_OW 559
// wait ( 3 3$00 ) ;
24392: LD_INT 6300
24394: PPUSH
24395: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24399: LD_STRING hideTroll();
24401: PPUSH
24402: CALL_OW 559
// wait ( 1 1$00 ) ;
24406: LD_INT 2100
24408: PPUSH
24409: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24413: LD_STRING displayTroll();
24415: PPUSH
24416: CALL_OW 559
// wait ( 1 1$00 ) ;
24420: LD_INT 2100
24422: PPUSH
24423: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24427: LD_STRING hideTroll();
24429: PPUSH
24430: CALL_OW 559
// end ;
24434: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24435: LD_EXP 38
24439: IFFALSE 24447
24441: PUSH
24442: LD_EXP 64
24446: AND
24447: IFFALSE 24510
24449: GO 24451
24451: DISABLE
24452: LD_INT 0
24454: PPUSH
// begin p := 0 ;
24455: LD_ADDR_VAR 0 1
24459: PUSH
24460: LD_INT 0
24462: ST_TO_ADDR
// repeat game_speed := 1 ;
24463: LD_ADDR_OWVAR 65
24467: PUSH
24468: LD_INT 1
24470: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24471: LD_INT 35
24473: PPUSH
24474: CALL_OW 67
// p := p + 1 ;
24478: LD_ADDR_VAR 0 1
24482: PUSH
24483: LD_VAR 0 1
24487: PUSH
24488: LD_INT 1
24490: PLUS
24491: ST_TO_ADDR
// until p >= 60 ;
24492: LD_VAR 0 1
24496: PUSH
24497: LD_INT 60
24499: GREATEREQUAL
24500: IFFALSE 24463
// game_speed := 4 ;
24502: LD_ADDR_OWVAR 65
24506: PUSH
24507: LD_INT 4
24509: ST_TO_ADDR
// end ;
24510: PPOPN 1
24512: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24513: LD_EXP 38
24517: IFFALSE 24525
24519: PUSH
24520: LD_EXP 65
24524: AND
24525: IFFALSE 24671
24527: GO 24529
24529: DISABLE
24530: LD_INT 0
24532: PPUSH
24533: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24534: LD_ADDR_VAR 0 1
24538: PUSH
24539: LD_INT 22
24541: PUSH
24542: LD_OWVAR 2
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 2
24553: PUSH
24554: LD_INT 30
24556: PUSH
24557: LD_INT 0
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 30
24566: PUSH
24567: LD_INT 1
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: LIST
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PPUSH
24583: CALL_OW 69
24587: ST_TO_ADDR
// if not depot then
24588: LD_VAR 0 1
24592: NOT
24593: IFFALSE 24597
// exit ;
24595: GO 24671
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24597: LD_ADDR_VAR 0 2
24601: PUSH
24602: LD_VAR 0 1
24606: PUSH
24607: LD_INT 1
24609: PPUSH
24610: LD_VAR 0 1
24614: PPUSH
24615: CALL_OW 12
24619: ARRAY
24620: PPUSH
24621: CALL_OW 274
24625: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24626: LD_VAR 0 2
24630: PPUSH
24631: LD_INT 1
24633: PPUSH
24634: LD_INT 0
24636: PPUSH
24637: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24641: LD_VAR 0 2
24645: PPUSH
24646: LD_INT 2
24648: PPUSH
24649: LD_INT 0
24651: PPUSH
24652: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24656: LD_VAR 0 2
24660: PPUSH
24661: LD_INT 3
24663: PPUSH
24664: LD_INT 0
24666: PPUSH
24667: CALL_OW 277
// end ;
24671: PPOPN 2
24673: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24674: LD_EXP 38
24678: IFFALSE 24686
24680: PUSH
24681: LD_EXP 66
24685: AND
24686: IFFALSE 24783
24688: GO 24690
24690: DISABLE
24691: LD_INT 0
24693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24694: LD_ADDR_VAR 0 1
24698: PUSH
24699: LD_INT 22
24701: PUSH
24702: LD_OWVAR 2
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 21
24713: PUSH
24714: LD_INT 1
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 3
24723: PUSH
24724: LD_INT 23
24726: PUSH
24727: LD_INT 0
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: LIST
24742: PPUSH
24743: CALL_OW 69
24747: ST_TO_ADDR
// if not tmp then
24748: LD_VAR 0 1
24752: NOT
24753: IFFALSE 24757
// exit ;
24755: GO 24783
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24757: LD_VAR 0 1
24761: PUSH
24762: LD_INT 1
24764: PPUSH
24765: LD_VAR 0 1
24769: PPUSH
24770: CALL_OW 12
24774: ARRAY
24775: PPUSH
24776: LD_INT 200
24778: PPUSH
24779: CALL_OW 234
// end ;
24783: PPOPN 1
24785: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24786: LD_EXP 38
24790: IFFALSE 24798
24792: PUSH
24793: LD_EXP 67
24797: AND
24798: IFFALSE 24877
24800: GO 24802
24802: DISABLE
24803: LD_INT 0
24805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24806: LD_ADDR_VAR 0 1
24810: PUSH
24811: LD_INT 22
24813: PUSH
24814: LD_OWVAR 2
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 21
24825: PUSH
24826: LD_INT 2
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PPUSH
24837: CALL_OW 69
24841: ST_TO_ADDR
// if not tmp then
24842: LD_VAR 0 1
24846: NOT
24847: IFFALSE 24851
// exit ;
24849: GO 24877
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24851: LD_VAR 0 1
24855: PUSH
24856: LD_INT 1
24858: PPUSH
24859: LD_VAR 0 1
24863: PPUSH
24864: CALL_OW 12
24868: ARRAY
24869: PPUSH
24870: LD_INT 60
24872: PPUSH
24873: CALL_OW 234
// end ;
24877: PPOPN 1
24879: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24880: LD_EXP 38
24884: IFFALSE 24892
24886: PUSH
24887: LD_EXP 68
24891: AND
24892: IFFALSE 24991
24894: GO 24896
24896: DISABLE
24897: LD_INT 0
24899: PPUSH
24900: PPUSH
// begin enable ;
24901: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24902: LD_ADDR_VAR 0 1
24906: PUSH
24907: LD_INT 22
24909: PUSH
24910: LD_OWVAR 2
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 61
24921: PUSH
24922: EMPTY
24923: LIST
24924: PUSH
24925: LD_INT 33
24927: PUSH
24928: LD_INT 2
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: LIST
24939: PPUSH
24940: CALL_OW 69
24944: ST_TO_ADDR
// if not tmp then
24945: LD_VAR 0 1
24949: NOT
24950: IFFALSE 24954
// exit ;
24952: GO 24991
// for i in tmp do
24954: LD_ADDR_VAR 0 2
24958: PUSH
24959: LD_VAR 0 1
24963: PUSH
24964: FOR_IN
24965: IFFALSE 24989
// if IsControledBy ( i ) then
24967: LD_VAR 0 2
24971: PPUSH
24972: CALL_OW 312
24976: IFFALSE 24987
// ComUnlink ( i ) ;
24978: LD_VAR 0 2
24982: PPUSH
24983: CALL_OW 136
24987: GO 24964
24989: POP
24990: POP
// end ;
24991: PPOPN 2
24993: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24994: LD_EXP 38
24998: IFFALSE 25006
25000: PUSH
25001: LD_EXP 69
25005: AND
25006: IFFALSE 25146
25008: GO 25010
25010: DISABLE
25011: LD_INT 0
25013: PPUSH
25014: PPUSH
// begin ToLua ( displayPowell(); ) ;
25015: LD_STRING displayPowell();
25017: PPUSH
25018: CALL_OW 559
// uc_side := 0 ;
25022: LD_ADDR_OWVAR 20
25026: PUSH
25027: LD_INT 0
25029: ST_TO_ADDR
// uc_nation := 2 ;
25030: LD_ADDR_OWVAR 21
25034: PUSH
25035: LD_INT 2
25037: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25038: LD_ADDR_OWVAR 37
25042: PUSH
25043: LD_INT 14
25045: ST_TO_ADDR
// vc_engine := engine_siberite ;
25046: LD_ADDR_OWVAR 39
25050: PUSH
25051: LD_INT 3
25053: ST_TO_ADDR
// vc_control := control_apeman ;
25054: LD_ADDR_OWVAR 38
25058: PUSH
25059: LD_INT 5
25061: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25062: LD_ADDR_OWVAR 40
25066: PUSH
25067: LD_INT 29
25069: ST_TO_ADDR
// un := CreateVehicle ;
25070: LD_ADDR_VAR 0 2
25074: PUSH
25075: CALL_OW 45
25079: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25080: LD_VAR 0 2
25084: PPUSH
25085: LD_INT 1
25087: PPUSH
25088: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25092: LD_INT 35
25094: PPUSH
25095: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25099: LD_VAR 0 2
25103: PPUSH
25104: LD_INT 22
25106: PUSH
25107: LD_OWVAR 2
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PPUSH
25116: CALL_OW 69
25120: PPUSH
25121: LD_VAR 0 2
25125: PPUSH
25126: CALL_OW 74
25130: PPUSH
25131: CALL_OW 115
// until IsDead ( un ) ;
25135: LD_VAR 0 2
25139: PPUSH
25140: CALL_OW 301
25144: IFFALSE 25092
// end ;
25146: PPOPN 2
25148: END
// every 0 0$1 trigger StreamModeActive and sStu do
25149: LD_EXP 38
25153: IFFALSE 25161
25155: PUSH
25156: LD_EXP 77
25160: AND
25161: IFFALSE 25177
25163: GO 25165
25165: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25166: LD_STRING displayStucuk();
25168: PPUSH
25169: CALL_OW 559
// ResetFog ;
25173: CALL_OW 335
// end ;
25177: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25178: LD_EXP 38
25182: IFFALSE 25190
25184: PUSH
25185: LD_EXP 70
25189: AND
25190: IFFALSE 25331
25192: GO 25194
25194: DISABLE
25195: LD_INT 0
25197: PPUSH
25198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25199: LD_ADDR_VAR 0 2
25203: PUSH
25204: LD_INT 22
25206: PUSH
25207: LD_OWVAR 2
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 21
25218: PUSH
25219: LD_INT 1
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PPUSH
25230: CALL_OW 69
25234: ST_TO_ADDR
// if not tmp then
25235: LD_VAR 0 2
25239: NOT
25240: IFFALSE 25244
// exit ;
25242: GO 25331
// un := tmp [ rand ( 1 , tmp ) ] ;
25244: LD_ADDR_VAR 0 1
25248: PUSH
25249: LD_VAR 0 2
25253: PUSH
25254: LD_INT 1
25256: PPUSH
25257: LD_VAR 0 2
25261: PPUSH
25262: CALL_OW 12
25266: ARRAY
25267: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25268: LD_VAR 0 1
25272: PPUSH
25273: LD_INT 0
25275: PPUSH
25276: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25280: LD_VAR 0 1
25284: PPUSH
25285: LD_OWVAR 3
25289: PUSH
25290: LD_VAR 0 1
25294: DIFF
25295: PPUSH
25296: LD_VAR 0 1
25300: PPUSH
25301: CALL_OW 74
25305: PPUSH
25306: CALL_OW 115
// wait ( 0 0$20 ) ;
25310: LD_INT 700
25312: PPUSH
25313: CALL_OW 67
// SetSide ( un , your_side ) ;
25317: LD_VAR 0 1
25321: PPUSH
25322: LD_OWVAR 2
25326: PPUSH
25327: CALL_OW 235
// end ;
25331: PPOPN 2
25333: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25334: LD_EXP 38
25338: IFFALSE 25346
25340: PUSH
25341: LD_EXP 71
25345: AND
25346: IFFALSE 25452
25348: GO 25350
25350: DISABLE
25351: LD_INT 0
25353: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25354: LD_ADDR_VAR 0 1
25358: PUSH
25359: LD_INT 22
25361: PUSH
25362: LD_OWVAR 2
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 2
25373: PUSH
25374: LD_INT 30
25376: PUSH
25377: LD_INT 0
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 30
25386: PUSH
25387: LD_INT 1
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: LIST
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PPUSH
25403: CALL_OW 69
25407: ST_TO_ADDR
// if not depot then
25408: LD_VAR 0 1
25412: NOT
25413: IFFALSE 25417
// exit ;
25415: GO 25452
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25417: LD_VAR 0 1
25421: PUSH
25422: LD_INT 1
25424: ARRAY
25425: PPUSH
25426: CALL_OW 250
25430: PPUSH
25431: LD_VAR 0 1
25435: PUSH
25436: LD_INT 1
25438: ARRAY
25439: PPUSH
25440: CALL_OW 251
25444: PPUSH
25445: LD_INT 70
25447: PPUSH
25448: CALL_OW 495
// end ;
25452: PPOPN 1
25454: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25455: LD_EXP 38
25459: IFFALSE 25467
25461: PUSH
25462: LD_EXP 72
25466: AND
25467: IFFALSE 25678
25469: GO 25471
25471: DISABLE
25472: LD_INT 0
25474: PPUSH
25475: PPUSH
25476: PPUSH
25477: PPUSH
25478: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25479: LD_ADDR_VAR 0 5
25483: PUSH
25484: LD_INT 22
25486: PUSH
25487: LD_OWVAR 2
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 21
25498: PUSH
25499: LD_INT 1
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PPUSH
25510: CALL_OW 69
25514: ST_TO_ADDR
// if not tmp then
25515: LD_VAR 0 5
25519: NOT
25520: IFFALSE 25524
// exit ;
25522: GO 25678
// for i in tmp do
25524: LD_ADDR_VAR 0 1
25528: PUSH
25529: LD_VAR 0 5
25533: PUSH
25534: FOR_IN
25535: IFFALSE 25676
// begin d := rand ( 0 , 5 ) ;
25537: LD_ADDR_VAR 0 4
25541: PUSH
25542: LD_INT 0
25544: PPUSH
25545: LD_INT 5
25547: PPUSH
25548: CALL_OW 12
25552: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25553: LD_ADDR_VAR 0 2
25557: PUSH
25558: LD_VAR 0 1
25562: PPUSH
25563: CALL_OW 250
25567: PPUSH
25568: LD_VAR 0 4
25572: PPUSH
25573: LD_INT 3
25575: PPUSH
25576: LD_INT 12
25578: PPUSH
25579: CALL_OW 12
25583: PPUSH
25584: CALL_OW 272
25588: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25589: LD_ADDR_VAR 0 3
25593: PUSH
25594: LD_VAR 0 1
25598: PPUSH
25599: CALL_OW 251
25603: PPUSH
25604: LD_VAR 0 4
25608: PPUSH
25609: LD_INT 3
25611: PPUSH
25612: LD_INT 12
25614: PPUSH
25615: CALL_OW 12
25619: PPUSH
25620: CALL_OW 273
25624: ST_TO_ADDR
// if ValidHex ( x , y ) then
25625: LD_VAR 0 2
25629: PPUSH
25630: LD_VAR 0 3
25634: PPUSH
25635: CALL_OW 488
25639: IFFALSE 25674
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25641: LD_VAR 0 1
25645: PPUSH
25646: LD_VAR 0 2
25650: PPUSH
25651: LD_VAR 0 3
25655: PPUSH
25656: LD_INT 3
25658: PPUSH
25659: LD_INT 6
25661: PPUSH
25662: CALL_OW 12
25666: PPUSH
25667: LD_INT 1
25669: PPUSH
25670: CALL_OW 483
// end ;
25674: GO 25534
25676: POP
25677: POP
// end ;
25678: PPOPN 5
25680: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25681: LD_EXP 38
25685: IFFALSE 25693
25687: PUSH
25688: LD_EXP 73
25692: AND
25693: IFFALSE 25787
25695: GO 25697
25697: DISABLE
25698: LD_INT 0
25700: PPUSH
25701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25702: LD_ADDR_VAR 0 2
25706: PUSH
25707: LD_INT 22
25709: PUSH
25710: LD_OWVAR 2
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 32
25721: PUSH
25722: LD_INT 1
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 21
25731: PUSH
25732: LD_INT 2
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: LIST
25743: PPUSH
25744: CALL_OW 69
25748: ST_TO_ADDR
// if not tmp then
25749: LD_VAR 0 2
25753: NOT
25754: IFFALSE 25758
// exit ;
25756: GO 25787
// for i in tmp do
25758: LD_ADDR_VAR 0 1
25762: PUSH
25763: LD_VAR 0 2
25767: PUSH
25768: FOR_IN
25769: IFFALSE 25785
// SetFuel ( i , 0 ) ;
25771: LD_VAR 0 1
25775: PPUSH
25776: LD_INT 0
25778: PPUSH
25779: CALL_OW 240
25783: GO 25768
25785: POP
25786: POP
// end ;
25787: PPOPN 2
25789: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25790: LD_EXP 38
25794: IFFALSE 25802
25796: PUSH
25797: LD_EXP 74
25801: AND
25802: IFFALSE 25868
25804: GO 25806
25806: DISABLE
25807: LD_INT 0
25809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25810: LD_ADDR_VAR 0 1
25814: PUSH
25815: LD_INT 22
25817: PUSH
25818: LD_OWVAR 2
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 30
25829: PUSH
25830: LD_INT 29
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PPUSH
25841: CALL_OW 69
25845: ST_TO_ADDR
// if not tmp then
25846: LD_VAR 0 1
25850: NOT
25851: IFFALSE 25855
// exit ;
25853: GO 25868
// DestroyUnit ( tmp [ 1 ] ) ;
25855: LD_VAR 0 1
25859: PUSH
25860: LD_INT 1
25862: ARRAY
25863: PPUSH
25864: CALL_OW 65
// end ;
25868: PPOPN 1
25870: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25871: LD_EXP 38
25875: IFFALSE 25883
25877: PUSH
25878: LD_EXP 76
25882: AND
25883: IFFALSE 26012
25885: GO 25887
25887: DISABLE
25888: LD_INT 0
25890: PPUSH
// begin uc_side := 0 ;
25891: LD_ADDR_OWVAR 20
25895: PUSH
25896: LD_INT 0
25898: ST_TO_ADDR
// uc_nation := nation_arabian ;
25899: LD_ADDR_OWVAR 21
25903: PUSH
25904: LD_INT 2
25906: ST_TO_ADDR
// hc_gallery :=  ;
25907: LD_ADDR_OWVAR 33
25911: PUSH
25912: LD_STRING 
25914: ST_TO_ADDR
// hc_name :=  ;
25915: LD_ADDR_OWVAR 26
25919: PUSH
25920: LD_STRING 
25922: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25923: LD_INT 1
25925: PPUSH
25926: LD_INT 11
25928: PPUSH
25929: LD_INT 10
25931: PPUSH
25932: CALL_OW 380
// un := CreateHuman ;
25936: LD_ADDR_VAR 0 1
25940: PUSH
25941: CALL_OW 44
25945: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25946: LD_VAR 0 1
25950: PPUSH
25951: LD_INT 1
25953: PPUSH
25954: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25958: LD_INT 35
25960: PPUSH
25961: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25965: LD_VAR 0 1
25969: PPUSH
25970: LD_INT 22
25972: PUSH
25973: LD_OWVAR 2
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PPUSH
25982: CALL_OW 69
25986: PPUSH
25987: LD_VAR 0 1
25991: PPUSH
25992: CALL_OW 74
25996: PPUSH
25997: CALL_OW 115
// until IsDead ( un ) ;
26001: LD_VAR 0 1
26005: PPUSH
26006: CALL_OW 301
26010: IFFALSE 25958
// end ;
26012: PPOPN 1
26014: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26015: LD_EXP 38
26019: IFFALSE 26027
26021: PUSH
26022: LD_EXP 78
26026: AND
26027: IFFALSE 26039
26029: GO 26031
26031: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26032: LD_STRING earthquake(getX(game), 0, 32)
26034: PPUSH
26035: CALL_OW 559
26039: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26040: LD_EXP 38
26044: IFFALSE 26052
26046: PUSH
26047: LD_EXP 79
26051: AND
26052: IFFALSE 26143
26054: GO 26056
26056: DISABLE
26057: LD_INT 0
26059: PPUSH
// begin enable ;
26060: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26061: LD_ADDR_VAR 0 1
26065: PUSH
26066: LD_INT 22
26068: PUSH
26069: LD_OWVAR 2
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 21
26080: PUSH
26081: LD_INT 2
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 33
26090: PUSH
26091: LD_INT 3
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: LIST
26102: PPUSH
26103: CALL_OW 69
26107: ST_TO_ADDR
// if not tmp then
26108: LD_VAR 0 1
26112: NOT
26113: IFFALSE 26117
// exit ;
26115: GO 26143
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26117: LD_VAR 0 1
26121: PUSH
26122: LD_INT 1
26124: PPUSH
26125: LD_VAR 0 1
26129: PPUSH
26130: CALL_OW 12
26134: ARRAY
26135: PPUSH
26136: LD_INT 1
26138: PPUSH
26139: CALL_OW 234
// end ;
26143: PPOPN 1
26145: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26146: LD_EXP 38
26150: IFFALSE 26158
26152: PUSH
26153: LD_EXP 80
26157: AND
26158: IFFALSE 26299
26160: GO 26162
26162: DISABLE
26163: LD_INT 0
26165: PPUSH
26166: PPUSH
26167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26168: LD_ADDR_VAR 0 3
26172: PUSH
26173: LD_INT 22
26175: PUSH
26176: LD_OWVAR 2
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 25
26187: PUSH
26188: LD_INT 1
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PPUSH
26199: CALL_OW 69
26203: ST_TO_ADDR
// if not tmp then
26204: LD_VAR 0 3
26208: NOT
26209: IFFALSE 26213
// exit ;
26211: GO 26299
// un := tmp [ rand ( 1 , tmp ) ] ;
26213: LD_ADDR_VAR 0 2
26217: PUSH
26218: LD_VAR 0 3
26222: PUSH
26223: LD_INT 1
26225: PPUSH
26226: LD_VAR 0 3
26230: PPUSH
26231: CALL_OW 12
26235: ARRAY
26236: ST_TO_ADDR
// if Crawls ( un ) then
26237: LD_VAR 0 2
26241: PPUSH
26242: CALL_OW 318
26246: IFFALSE 26257
// ComWalk ( un ) ;
26248: LD_VAR 0 2
26252: PPUSH
26253: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26257: LD_VAR 0 2
26261: PPUSH
26262: LD_INT 9
26264: PPUSH
26265: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26269: LD_INT 28
26271: PPUSH
26272: LD_OWVAR 2
26276: PPUSH
26277: LD_INT 2
26279: PPUSH
26280: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26284: LD_INT 29
26286: PPUSH
26287: LD_OWVAR 2
26291: PPUSH
26292: LD_INT 2
26294: PPUSH
26295: CALL_OW 322
// end ;
26299: PPOPN 3
26301: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26302: LD_EXP 38
26306: IFFALSE 26314
26308: PUSH
26309: LD_EXP 81
26313: AND
26314: IFFALSE 26425
26316: GO 26318
26318: DISABLE
26319: LD_INT 0
26321: PPUSH
26322: PPUSH
26323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26324: LD_ADDR_VAR 0 3
26328: PUSH
26329: LD_INT 22
26331: PUSH
26332: LD_OWVAR 2
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 25
26343: PUSH
26344: LD_INT 1
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PPUSH
26355: CALL_OW 69
26359: ST_TO_ADDR
// if not tmp then
26360: LD_VAR 0 3
26364: NOT
26365: IFFALSE 26369
// exit ;
26367: GO 26425
// un := tmp [ rand ( 1 , tmp ) ] ;
26369: LD_ADDR_VAR 0 2
26373: PUSH
26374: LD_VAR 0 3
26378: PUSH
26379: LD_INT 1
26381: PPUSH
26382: LD_VAR 0 3
26386: PPUSH
26387: CALL_OW 12
26391: ARRAY
26392: ST_TO_ADDR
// if Crawls ( un ) then
26393: LD_VAR 0 2
26397: PPUSH
26398: CALL_OW 318
26402: IFFALSE 26413
// ComWalk ( un ) ;
26404: LD_VAR 0 2
26408: PPUSH
26409: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26413: LD_VAR 0 2
26417: PPUSH
26418: LD_INT 8
26420: PPUSH
26421: CALL_OW 336
// end ;
26425: PPOPN 3
26427: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26428: LD_EXP 38
26432: IFFALSE 26440
26434: PUSH
26435: LD_EXP 82
26439: AND
26440: IFFALSE 26584
26442: GO 26444
26444: DISABLE
26445: LD_INT 0
26447: PPUSH
26448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26449: LD_ADDR_VAR 0 2
26453: PUSH
26454: LD_INT 22
26456: PUSH
26457: LD_OWVAR 2
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 21
26468: PUSH
26469: LD_INT 2
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 2
26478: PUSH
26479: LD_INT 34
26481: PUSH
26482: LD_INT 12
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 34
26491: PUSH
26492: LD_INT 51
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 34
26501: PUSH
26502: LD_INT 32
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: LIST
26519: PPUSH
26520: CALL_OW 69
26524: ST_TO_ADDR
// if not tmp then
26525: LD_VAR 0 2
26529: NOT
26530: IFFALSE 26534
// exit ;
26532: GO 26584
// for i in tmp do
26534: LD_ADDR_VAR 0 1
26538: PUSH
26539: LD_VAR 0 2
26543: PUSH
26544: FOR_IN
26545: IFFALSE 26582
// if GetCargo ( i , mat_artifact ) = 0 then
26547: LD_VAR 0 1
26551: PPUSH
26552: LD_INT 4
26554: PPUSH
26555: CALL_OW 289
26559: PUSH
26560: LD_INT 0
26562: EQUAL
26563: IFFALSE 26580
// SetCargo ( i , mat_siberit , 100 ) ;
26565: LD_VAR 0 1
26569: PPUSH
26570: LD_INT 3
26572: PPUSH
26573: LD_INT 100
26575: PPUSH
26576: CALL_OW 290
26580: GO 26544
26582: POP
26583: POP
// end ;
26584: PPOPN 2
26586: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26587: LD_EXP 38
26591: IFFALSE 26599
26593: PUSH
26594: LD_EXP 83
26598: AND
26599: IFFALSE 26782
26601: GO 26603
26603: DISABLE
26604: LD_INT 0
26606: PPUSH
26607: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26608: LD_ADDR_VAR 0 2
26612: PUSH
26613: LD_INT 22
26615: PUSH
26616: LD_OWVAR 2
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PPUSH
26625: CALL_OW 69
26629: ST_TO_ADDR
// if not tmp then
26630: LD_VAR 0 2
26634: NOT
26635: IFFALSE 26639
// exit ;
26637: GO 26782
// for i := 1 to 2 do
26639: LD_ADDR_VAR 0 1
26643: PUSH
26644: DOUBLE
26645: LD_INT 1
26647: DEC
26648: ST_TO_ADDR
26649: LD_INT 2
26651: PUSH
26652: FOR_TO
26653: IFFALSE 26780
// begin uc_side := your_side ;
26655: LD_ADDR_OWVAR 20
26659: PUSH
26660: LD_OWVAR 2
26664: ST_TO_ADDR
// uc_nation := nation_american ;
26665: LD_ADDR_OWVAR 21
26669: PUSH
26670: LD_INT 1
26672: ST_TO_ADDR
// vc_chassis := us_morphling ;
26673: LD_ADDR_OWVAR 37
26677: PUSH
26678: LD_INT 5
26680: ST_TO_ADDR
// vc_engine := engine_siberite ;
26681: LD_ADDR_OWVAR 39
26685: PUSH
26686: LD_INT 3
26688: ST_TO_ADDR
// vc_control := control_computer ;
26689: LD_ADDR_OWVAR 38
26693: PUSH
26694: LD_INT 3
26696: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26697: LD_ADDR_OWVAR 40
26701: PUSH
26702: LD_INT 10
26704: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26705: LD_VAR 0 2
26709: PUSH
26710: LD_INT 1
26712: ARRAY
26713: PPUSH
26714: CALL_OW 310
26718: NOT
26719: IFFALSE 26766
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26721: CALL_OW 45
26725: PPUSH
26726: LD_VAR 0 2
26730: PUSH
26731: LD_INT 1
26733: ARRAY
26734: PPUSH
26735: CALL_OW 250
26739: PPUSH
26740: LD_VAR 0 2
26744: PUSH
26745: LD_INT 1
26747: ARRAY
26748: PPUSH
26749: CALL_OW 251
26753: PPUSH
26754: LD_INT 12
26756: PPUSH
26757: LD_INT 1
26759: PPUSH
26760: CALL_OW 50
26764: GO 26778
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26766: CALL_OW 45
26770: PPUSH
26771: LD_INT 1
26773: PPUSH
26774: CALL_OW 51
// end ;
26778: GO 26652
26780: POP
26781: POP
// end ;
26782: PPOPN 2
26784: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26785: LD_EXP 38
26789: IFFALSE 26797
26791: PUSH
26792: LD_EXP 84
26796: AND
26797: IFFALSE 27019
26799: GO 26801
26801: DISABLE
26802: LD_INT 0
26804: PPUSH
26805: PPUSH
26806: PPUSH
26807: PPUSH
26808: PPUSH
26809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26810: LD_ADDR_VAR 0 6
26814: PUSH
26815: LD_INT 22
26817: PUSH
26818: LD_OWVAR 2
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: LD_INT 21
26829: PUSH
26830: LD_INT 1
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 3
26839: PUSH
26840: LD_INT 23
26842: PUSH
26843: LD_INT 0
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: LIST
26858: PPUSH
26859: CALL_OW 69
26863: ST_TO_ADDR
// if not tmp then
26864: LD_VAR 0 6
26868: NOT
26869: IFFALSE 26873
// exit ;
26871: GO 27019
// s1 := rand ( 1 , 4 ) ;
26873: LD_ADDR_VAR 0 2
26877: PUSH
26878: LD_INT 1
26880: PPUSH
26881: LD_INT 4
26883: PPUSH
26884: CALL_OW 12
26888: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26889: LD_ADDR_VAR 0 4
26893: PUSH
26894: LD_VAR 0 6
26898: PUSH
26899: LD_INT 1
26901: ARRAY
26902: PPUSH
26903: LD_VAR 0 2
26907: PPUSH
26908: CALL_OW 259
26912: ST_TO_ADDR
// if s1 = 1 then
26913: LD_VAR 0 2
26917: PUSH
26918: LD_INT 1
26920: EQUAL
26921: IFFALSE 26941
// s2 := rand ( 2 , 4 ) else
26923: LD_ADDR_VAR 0 3
26927: PUSH
26928: LD_INT 2
26930: PPUSH
26931: LD_INT 4
26933: PPUSH
26934: CALL_OW 12
26938: ST_TO_ADDR
26939: GO 26949
// s2 := 1 ;
26941: LD_ADDR_VAR 0 3
26945: PUSH
26946: LD_INT 1
26948: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26949: LD_ADDR_VAR 0 5
26953: PUSH
26954: LD_VAR 0 6
26958: PUSH
26959: LD_INT 1
26961: ARRAY
26962: PPUSH
26963: LD_VAR 0 3
26967: PPUSH
26968: CALL_OW 259
26972: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26973: LD_VAR 0 6
26977: PUSH
26978: LD_INT 1
26980: ARRAY
26981: PPUSH
26982: LD_VAR 0 2
26986: PPUSH
26987: LD_VAR 0 5
26991: PPUSH
26992: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26996: LD_VAR 0 6
27000: PUSH
27001: LD_INT 1
27003: ARRAY
27004: PPUSH
27005: LD_VAR 0 3
27009: PPUSH
27010: LD_VAR 0 4
27014: PPUSH
27015: CALL_OW 237
// end ;
27019: PPOPN 6
27021: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27022: LD_EXP 38
27026: IFFALSE 27034
27028: PUSH
27029: LD_EXP 85
27033: AND
27034: IFFALSE 27113
27036: GO 27038
27038: DISABLE
27039: LD_INT 0
27041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27042: LD_ADDR_VAR 0 1
27046: PUSH
27047: LD_INT 22
27049: PUSH
27050: LD_OWVAR 2
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 30
27061: PUSH
27062: LD_INT 3
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PPUSH
27073: CALL_OW 69
27077: ST_TO_ADDR
// if not tmp then
27078: LD_VAR 0 1
27082: NOT
27083: IFFALSE 27087
// exit ;
27085: GO 27113
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27087: LD_VAR 0 1
27091: PUSH
27092: LD_INT 1
27094: PPUSH
27095: LD_VAR 0 1
27099: PPUSH
27100: CALL_OW 12
27104: ARRAY
27105: PPUSH
27106: LD_INT 1
27108: PPUSH
27109: CALL_OW 234
// end ;
27113: PPOPN 1
27115: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27116: LD_EXP 38
27120: IFFALSE 27128
27122: PUSH
27123: LD_EXP 86
27127: AND
27128: IFFALSE 27240
27130: GO 27132
27132: DISABLE
27133: LD_INT 0
27135: PPUSH
27136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27137: LD_ADDR_VAR 0 2
27141: PUSH
27142: LD_INT 22
27144: PUSH
27145: LD_OWVAR 2
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 2
27156: PUSH
27157: LD_INT 30
27159: PUSH
27160: LD_INT 27
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 30
27169: PUSH
27170: LD_INT 26
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 30
27179: PUSH
27180: LD_INT 28
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PPUSH
27197: CALL_OW 69
27201: ST_TO_ADDR
// if not tmp then
27202: LD_VAR 0 2
27206: NOT
27207: IFFALSE 27211
// exit ;
27209: GO 27240
// for i in tmp do
27211: LD_ADDR_VAR 0 1
27215: PUSH
27216: LD_VAR 0 2
27220: PUSH
27221: FOR_IN
27222: IFFALSE 27238
// SetLives ( i , 1 ) ;
27224: LD_VAR 0 1
27228: PPUSH
27229: LD_INT 1
27231: PPUSH
27232: CALL_OW 234
27236: GO 27221
27238: POP
27239: POP
// end ;
27240: PPOPN 2
27242: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27243: LD_EXP 38
27247: IFFALSE 27255
27249: PUSH
27250: LD_EXP 87
27254: AND
27255: IFFALSE 27542
27257: GO 27259
27259: DISABLE
27260: LD_INT 0
27262: PPUSH
27263: PPUSH
27264: PPUSH
// begin i := rand ( 1 , 7 ) ;
27265: LD_ADDR_VAR 0 1
27269: PUSH
27270: LD_INT 1
27272: PPUSH
27273: LD_INT 7
27275: PPUSH
27276: CALL_OW 12
27280: ST_TO_ADDR
// case i of 1 :
27281: LD_VAR 0 1
27285: PUSH
27286: LD_INT 1
27288: DOUBLE
27289: EQUAL
27290: IFTRUE 27294
27292: GO 27304
27294: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27295: LD_STRING earthquake(getX(game), 0, 32)
27297: PPUSH
27298: CALL_OW 559
27302: GO 27542
27304: LD_INT 2
27306: DOUBLE
27307: EQUAL
27308: IFTRUE 27312
27310: GO 27326
27312: POP
// begin ToLua ( displayStucuk(); ) ;
27313: LD_STRING displayStucuk();
27315: PPUSH
27316: CALL_OW 559
// ResetFog ;
27320: CALL_OW 335
// end ; 3 :
27324: GO 27542
27326: LD_INT 3
27328: DOUBLE
27329: EQUAL
27330: IFTRUE 27334
27332: GO 27438
27334: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27335: LD_ADDR_VAR 0 2
27339: PUSH
27340: LD_INT 22
27342: PUSH
27343: LD_OWVAR 2
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 25
27354: PUSH
27355: LD_INT 1
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PPUSH
27366: CALL_OW 69
27370: ST_TO_ADDR
// if not tmp then
27371: LD_VAR 0 2
27375: NOT
27376: IFFALSE 27380
// exit ;
27378: GO 27542
// un := tmp [ rand ( 1 , tmp ) ] ;
27380: LD_ADDR_VAR 0 3
27384: PUSH
27385: LD_VAR 0 2
27389: PUSH
27390: LD_INT 1
27392: PPUSH
27393: LD_VAR 0 2
27397: PPUSH
27398: CALL_OW 12
27402: ARRAY
27403: ST_TO_ADDR
// if Crawls ( un ) then
27404: LD_VAR 0 3
27408: PPUSH
27409: CALL_OW 318
27413: IFFALSE 27424
// ComWalk ( un ) ;
27415: LD_VAR 0 3
27419: PPUSH
27420: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27424: LD_VAR 0 3
27428: PPUSH
27429: LD_INT 8
27431: PPUSH
27432: CALL_OW 336
// end ; 4 :
27436: GO 27542
27438: LD_INT 4
27440: DOUBLE
27441: EQUAL
27442: IFTRUE 27446
27444: GO 27520
27446: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27447: LD_ADDR_VAR 0 2
27451: PUSH
27452: LD_INT 22
27454: PUSH
27455: LD_OWVAR 2
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 30
27466: PUSH
27467: LD_INT 29
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PPUSH
27478: CALL_OW 69
27482: ST_TO_ADDR
// if not tmp then
27483: LD_VAR 0 2
27487: NOT
27488: IFFALSE 27492
// exit ;
27490: GO 27542
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27492: LD_VAR 0 2
27496: PUSH
27497: LD_INT 1
27499: ARRAY
27500: PPUSH
27501: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27505: LD_VAR 0 2
27509: PUSH
27510: LD_INT 1
27512: ARRAY
27513: PPUSH
27514: CALL_OW 65
// end ; 5 .. 7 :
27518: GO 27542
27520: LD_INT 5
27522: DOUBLE
27523: GREATEREQUAL
27524: IFFALSE 27532
27526: LD_INT 7
27528: DOUBLE
27529: LESSEQUAL
27530: IFTRUE 27534
27532: GO 27541
27534: POP
// StreamSibBomb ; end ;
27535: CALL 23723 0 0
27539: GO 27542
27541: POP
// end ;
27542: PPOPN 3
27544: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27545: LD_EXP 38
27549: IFFALSE 27557
27551: PUSH
27552: LD_EXP 88
27556: AND
27557: IFFALSE 27713
27559: GO 27561
27561: DISABLE
27562: LD_INT 0
27564: PPUSH
27565: PPUSH
27566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27567: LD_ADDR_VAR 0 2
27571: PUSH
27572: LD_INT 81
27574: PUSH
27575: LD_OWVAR 2
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 2
27586: PUSH
27587: LD_INT 21
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 21
27599: PUSH
27600: LD_INT 2
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: LIST
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PPUSH
27616: CALL_OW 69
27620: ST_TO_ADDR
// if not tmp then
27621: LD_VAR 0 2
27625: NOT
27626: IFFALSE 27630
// exit ;
27628: GO 27713
// p := 0 ;
27630: LD_ADDR_VAR 0 3
27634: PUSH
27635: LD_INT 0
27637: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27638: LD_INT 35
27640: PPUSH
27641: CALL_OW 67
// p := p + 1 ;
27645: LD_ADDR_VAR 0 3
27649: PUSH
27650: LD_VAR 0 3
27654: PUSH
27655: LD_INT 1
27657: PLUS
27658: ST_TO_ADDR
// for i in tmp do
27659: LD_ADDR_VAR 0 1
27663: PUSH
27664: LD_VAR 0 2
27668: PUSH
27669: FOR_IN
27670: IFFALSE 27701
// if GetLives ( i ) < 1000 then
27672: LD_VAR 0 1
27676: PPUSH
27677: CALL_OW 256
27681: PUSH
27682: LD_INT 1000
27684: LESS
27685: IFFALSE 27699
// SetLives ( i , 1000 ) ;
27687: LD_VAR 0 1
27691: PPUSH
27692: LD_INT 1000
27694: PPUSH
27695: CALL_OW 234
27699: GO 27669
27701: POP
27702: POP
// until p > 20 ;
27703: LD_VAR 0 3
27707: PUSH
27708: LD_INT 20
27710: GREATER
27711: IFFALSE 27638
// end ;
27713: PPOPN 3
27715: END
// every 0 0$1 trigger StreamModeActive and sTime do
27716: LD_EXP 38
27720: IFFALSE 27728
27722: PUSH
27723: LD_EXP 89
27727: AND
27728: IFFALSE 27763
27730: GO 27732
27732: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27733: LD_INT 28
27735: PPUSH
27736: LD_OWVAR 2
27740: PPUSH
27741: LD_INT 2
27743: PPUSH
27744: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27748: LD_INT 30
27750: PPUSH
27751: LD_OWVAR 2
27755: PPUSH
27756: LD_INT 2
27758: PPUSH
27759: CALL_OW 322
// end ;
27763: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27764: LD_EXP 38
27768: IFFALSE 27776
27770: PUSH
27771: LD_EXP 90
27775: AND
27776: IFFALSE 27897
27778: GO 27780
27780: DISABLE
27781: LD_INT 0
27783: PPUSH
27784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27785: LD_ADDR_VAR 0 2
27789: PUSH
27790: LD_INT 22
27792: PUSH
27793: LD_OWVAR 2
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: LD_INT 21
27804: PUSH
27805: LD_INT 1
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 3
27814: PUSH
27815: LD_INT 23
27817: PUSH
27818: LD_INT 0
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: LIST
27833: PPUSH
27834: CALL_OW 69
27838: ST_TO_ADDR
// if not tmp then
27839: LD_VAR 0 2
27843: NOT
27844: IFFALSE 27848
// exit ;
27846: GO 27897
// for i in tmp do
27848: LD_ADDR_VAR 0 1
27852: PUSH
27853: LD_VAR 0 2
27857: PUSH
27858: FOR_IN
27859: IFFALSE 27895
// begin if Crawls ( i ) then
27861: LD_VAR 0 1
27865: PPUSH
27866: CALL_OW 318
27870: IFFALSE 27881
// ComWalk ( i ) ;
27872: LD_VAR 0 1
27876: PPUSH
27877: CALL_OW 138
// SetClass ( i , 2 ) ;
27881: LD_VAR 0 1
27885: PPUSH
27886: LD_INT 2
27888: PPUSH
27889: CALL_OW 336
// end ;
27893: GO 27858
27895: POP
27896: POP
// end ;
27897: PPOPN 2
27899: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27900: LD_EXP 38
27904: IFFALSE 27912
27906: PUSH
27907: LD_EXP 91
27911: AND
27912: IFFALSE 28202
27914: GO 27916
27916: DISABLE
27917: LD_INT 0
27919: PPUSH
27920: PPUSH
27921: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27922: LD_OWVAR 2
27926: PPUSH
27927: LD_INT 9
27929: PPUSH
27930: LD_INT 1
27932: PPUSH
27933: LD_INT 1
27935: PPUSH
27936: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27940: LD_INT 9
27942: PPUSH
27943: LD_OWVAR 2
27947: PPUSH
27948: CALL_OW 343
// uc_side := 9 ;
27952: LD_ADDR_OWVAR 20
27956: PUSH
27957: LD_INT 9
27959: ST_TO_ADDR
// uc_nation := 2 ;
27960: LD_ADDR_OWVAR 21
27964: PUSH
27965: LD_INT 2
27967: ST_TO_ADDR
// hc_name := Dark Warrior ;
27968: LD_ADDR_OWVAR 26
27972: PUSH
27973: LD_STRING Dark Warrior
27975: ST_TO_ADDR
// hc_gallery :=  ;
27976: LD_ADDR_OWVAR 33
27980: PUSH
27981: LD_STRING 
27983: ST_TO_ADDR
// hc_noskilllimit := true ;
27984: LD_ADDR_OWVAR 76
27988: PUSH
27989: LD_INT 1
27991: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27992: LD_ADDR_OWVAR 31
27996: PUSH
27997: LD_INT 30
27999: PUSH
28000: LD_INT 30
28002: PUSH
28003: LD_INT 30
28005: PUSH
28006: LD_INT 30
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: ST_TO_ADDR
// un := CreateHuman ;
28015: LD_ADDR_VAR 0 3
28019: PUSH
28020: CALL_OW 44
28024: ST_TO_ADDR
// hc_noskilllimit := false ;
28025: LD_ADDR_OWVAR 76
28029: PUSH
28030: LD_INT 0
28032: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28033: LD_VAR 0 3
28037: PPUSH
28038: LD_INT 1
28040: PPUSH
28041: CALL_OW 51
// ToLua ( playRanger() ) ;
28045: LD_STRING playRanger()
28047: PPUSH
28048: CALL_OW 559
// p := 0 ;
28052: LD_ADDR_VAR 0 2
28056: PUSH
28057: LD_INT 0
28059: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28060: LD_INT 35
28062: PPUSH
28063: CALL_OW 67
// p := p + 1 ;
28067: LD_ADDR_VAR 0 2
28071: PUSH
28072: LD_VAR 0 2
28076: PUSH
28077: LD_INT 1
28079: PLUS
28080: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28081: LD_VAR 0 3
28085: PPUSH
28086: CALL_OW 256
28090: PUSH
28091: LD_INT 1000
28093: LESS
28094: IFFALSE 28108
// SetLives ( un , 1000 ) ;
28096: LD_VAR 0 3
28100: PPUSH
28101: LD_INT 1000
28103: PPUSH
28104: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28108: LD_VAR 0 3
28112: PPUSH
28113: LD_INT 81
28115: PUSH
28116: LD_OWVAR 2
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 91
28127: PUSH
28128: LD_VAR 0 3
28132: PUSH
28133: LD_INT 30
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: LIST
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PPUSH
28145: CALL_OW 69
28149: PPUSH
28150: LD_VAR 0 3
28154: PPUSH
28155: CALL_OW 74
28159: PPUSH
28160: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
28164: LD_VAR 0 2
28168: PUSH
28169: LD_INT 80
28171: GREATER
28172: IFTRUE 28185
28174: PUSH
28175: LD_VAR 0 3
28179: PPUSH
28180: CALL_OW 301
28184: OR
28185: IFFALSE 28060
// if un then
28187: LD_VAR 0 3
28191: IFFALSE 28202
// RemoveUnit ( un ) ;
28193: LD_VAR 0 3
28197: PPUSH
28198: CALL_OW 64
// end ;
28202: PPOPN 3
28204: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
28205: LD_EXP 92
28209: IFFALSE 28325
28211: GO 28213
28213: DISABLE
28214: LD_INT 0
28216: PPUSH
28217: PPUSH
28218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28219: LD_ADDR_VAR 0 2
28223: PUSH
28224: LD_INT 81
28226: PUSH
28227: LD_OWVAR 2
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: LD_INT 21
28238: PUSH
28239: LD_INT 1
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PPUSH
28250: CALL_OW 69
28254: ST_TO_ADDR
// ToLua ( playComputer() ) ;
28255: LD_STRING playComputer()
28257: PPUSH
28258: CALL_OW 559
// if not tmp then
28262: LD_VAR 0 2
28266: NOT
28267: IFFALSE 28271
// exit ;
28269: GO 28325
// for i in tmp do
28271: LD_ADDR_VAR 0 1
28275: PUSH
28276: LD_VAR 0 2
28280: PUSH
28281: FOR_IN
28282: IFFALSE 28323
// for j := 1 to 4 do
28284: LD_ADDR_VAR 0 3
28288: PUSH
28289: DOUBLE
28290: LD_INT 1
28292: DEC
28293: ST_TO_ADDR
28294: LD_INT 4
28296: PUSH
28297: FOR_TO
28298: IFFALSE 28319
// SetSkill ( i , j , 10 ) ;
28300: LD_VAR 0 1
28304: PPUSH
28305: LD_VAR 0 3
28309: PPUSH
28310: LD_INT 10
28312: PPUSH
28313: CALL_OW 237
28317: GO 28297
28319: POP
28320: POP
28321: GO 28281
28323: POP
28324: POP
// end ;
28325: PPOPN 3
28327: END
// every 0 0$1 trigger s30 do var i , tmp ;
28328: LD_EXP 93
28332: IFFALSE 28401
28334: GO 28336
28336: DISABLE
28337: LD_INT 0
28339: PPUSH
28340: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28341: LD_ADDR_VAR 0 2
28345: PUSH
28346: LD_INT 22
28348: PUSH
28349: LD_OWVAR 2
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PPUSH
28358: CALL_OW 69
28362: ST_TO_ADDR
// if not tmp then
28363: LD_VAR 0 2
28367: NOT
28368: IFFALSE 28372
// exit ;
28370: GO 28401
// for i in tmp do
28372: LD_ADDR_VAR 0 1
28376: PUSH
28377: LD_VAR 0 2
28381: PUSH
28382: FOR_IN
28383: IFFALSE 28399
// SetLives ( i , 300 ) ;
28385: LD_VAR 0 1
28389: PPUSH
28390: LD_INT 300
28392: PPUSH
28393: CALL_OW 234
28397: GO 28382
28399: POP
28400: POP
// end ;
28401: PPOPN 2
28403: END
// every 0 0$1 trigger s60 do var i , tmp ;
28404: LD_EXP 94
28408: IFFALSE 28477
28410: GO 28412
28412: DISABLE
28413: LD_INT 0
28415: PPUSH
28416: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28417: LD_ADDR_VAR 0 2
28421: PUSH
28422: LD_INT 22
28424: PUSH
28425: LD_OWVAR 2
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PPUSH
28434: CALL_OW 69
28438: ST_TO_ADDR
// if not tmp then
28439: LD_VAR 0 2
28443: NOT
28444: IFFALSE 28448
// exit ;
28446: GO 28477
// for i in tmp do
28448: LD_ADDR_VAR 0 1
28452: PUSH
28453: LD_VAR 0 2
28457: PUSH
28458: FOR_IN
28459: IFFALSE 28475
// SetLives ( i , 600 ) ;
28461: LD_VAR 0 1
28465: PPUSH
28466: LD_INT 600
28468: PPUSH
28469: CALL_OW 234
28473: GO 28458
28475: POP
28476: POP
// end ;
28477: PPOPN 2
28479: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28480: LD_INT 0
28482: PPUSH
// case cmd of 301 :
28483: LD_VAR 0 1
28487: PUSH
28488: LD_INT 301
28490: DOUBLE
28491: EQUAL
28492: IFTRUE 28496
28494: GO 28528
28496: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28497: LD_VAR 0 6
28501: PPUSH
28502: LD_VAR 0 7
28506: PPUSH
28507: LD_VAR 0 8
28511: PPUSH
28512: LD_VAR 0 4
28516: PPUSH
28517: LD_VAR 0 5
28521: PPUSH
28522: CALL 29741 0 5
28526: GO 28649
28528: LD_INT 302
28530: DOUBLE
28531: EQUAL
28532: IFTRUE 28536
28534: GO 28573
28536: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28537: LD_VAR 0 6
28541: PPUSH
28542: LD_VAR 0 7
28546: PPUSH
28547: LD_VAR 0 8
28551: PPUSH
28552: LD_VAR 0 9
28556: PPUSH
28557: LD_VAR 0 4
28561: PPUSH
28562: LD_VAR 0 5
28566: PPUSH
28567: CALL 29832 0 6
28571: GO 28649
28573: LD_INT 303
28575: DOUBLE
28576: EQUAL
28577: IFTRUE 28581
28579: GO 28618
28581: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28582: LD_VAR 0 6
28586: PPUSH
28587: LD_VAR 0 7
28591: PPUSH
28592: LD_VAR 0 8
28596: PPUSH
28597: LD_VAR 0 9
28601: PPUSH
28602: LD_VAR 0 4
28606: PPUSH
28607: LD_VAR 0 5
28611: PPUSH
28612: CALL 28654 0 6
28616: GO 28649
28618: LD_INT 304
28620: DOUBLE
28621: EQUAL
28622: IFTRUE 28626
28624: GO 28648
28626: POP
// hHackTeleport ( unit , x , y ) ; end ;
28627: LD_VAR 0 2
28631: PPUSH
28632: LD_VAR 0 4
28636: PPUSH
28637: LD_VAR 0 5
28641: PPUSH
28642: CALL 30425 0 3
28646: GO 28649
28648: POP
// end ;
28649: LD_VAR 0 12
28653: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28654: LD_INT 0
28656: PPUSH
28657: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28658: LD_VAR 0 1
28662: PUSH
28663: LD_INT 1
28665: LESS
28666: IFTRUE 28678
28668: PUSH
28669: LD_VAR 0 1
28673: PUSH
28674: LD_INT 3
28676: GREATER
28677: OR
28678: IFTRUE 28696
28680: PUSH
28681: LD_VAR 0 5
28685: PPUSH
28686: LD_VAR 0 6
28690: PPUSH
28691: CALL_OW 428
28695: OR
28696: IFFALSE 28700
// exit ;
28698: GO 29428
// uc_side := your_side ;
28700: LD_ADDR_OWVAR 20
28704: PUSH
28705: LD_OWVAR 2
28709: ST_TO_ADDR
// uc_nation := nation ;
28710: LD_ADDR_OWVAR 21
28714: PUSH
28715: LD_VAR 0 1
28719: ST_TO_ADDR
// bc_level = 1 ;
28720: LD_ADDR_OWVAR 43
28724: PUSH
28725: LD_INT 1
28727: ST_TO_ADDR
// case btype of 1 :
28728: LD_VAR 0 2
28732: PUSH
28733: LD_INT 1
28735: DOUBLE
28736: EQUAL
28737: IFTRUE 28741
28739: GO 28752
28741: POP
// bc_type := b_depot ; 2 :
28742: LD_ADDR_OWVAR 42
28746: PUSH
28747: LD_INT 0
28749: ST_TO_ADDR
28750: GO 29372
28752: LD_INT 2
28754: DOUBLE
28755: EQUAL
28756: IFTRUE 28760
28758: GO 28771
28760: POP
// bc_type := b_warehouse ; 3 :
28761: LD_ADDR_OWVAR 42
28765: PUSH
28766: LD_INT 1
28768: ST_TO_ADDR
28769: GO 29372
28771: LD_INT 3
28773: DOUBLE
28774: EQUAL
28775: IFTRUE 28779
28777: GO 28790
28779: POP
// bc_type := b_lab ; 4 .. 9 :
28780: LD_ADDR_OWVAR 42
28784: PUSH
28785: LD_INT 6
28787: ST_TO_ADDR
28788: GO 29372
28790: LD_INT 4
28792: DOUBLE
28793: GREATEREQUAL
28794: IFFALSE 28802
28796: LD_INT 9
28798: DOUBLE
28799: LESSEQUAL
28800: IFTRUE 28804
28802: GO 28864
28804: POP
// begin bc_type := b_lab_half ;
28805: LD_ADDR_OWVAR 42
28809: PUSH
28810: LD_INT 7
28812: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28813: LD_ADDR_OWVAR 44
28817: PUSH
28818: LD_INT 10
28820: PUSH
28821: LD_INT 11
28823: PUSH
28824: LD_INT 12
28826: PUSH
28827: LD_INT 15
28829: PUSH
28830: LD_INT 14
28832: PUSH
28833: LD_INT 13
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: PUSH
28844: LD_VAR 0 2
28848: PUSH
28849: LD_INT 3
28851: MINUS
28852: ARRAY
28853: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
28854: LD_ADDR_OWVAR 45
28858: PUSH
28859: LD_INT 9
28861: ST_TO_ADDR
// end ; 10 .. 13 :
28862: GO 29372
28864: LD_INT 10
28866: DOUBLE
28867: GREATEREQUAL
28868: IFFALSE 28876
28870: LD_INT 13
28872: DOUBLE
28873: LESSEQUAL
28874: IFTRUE 28878
28876: GO 28955
28878: POP
// begin bc_type := b_lab_full ;
28879: LD_ADDR_OWVAR 42
28883: PUSH
28884: LD_INT 8
28886: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28887: LD_ADDR_OWVAR 44
28891: PUSH
28892: LD_INT 10
28894: PUSH
28895: LD_INT 12
28897: PUSH
28898: LD_INT 14
28900: PUSH
28901: LD_INT 13
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: PUSH
28910: LD_VAR 0 2
28914: PUSH
28915: LD_INT 9
28917: MINUS
28918: ARRAY
28919: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28920: LD_ADDR_OWVAR 45
28924: PUSH
28925: LD_INT 11
28927: PUSH
28928: LD_INT 15
28930: PUSH
28931: LD_INT 12
28933: PUSH
28934: LD_INT 15
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: PUSH
28943: LD_VAR 0 2
28947: PUSH
28948: LD_INT 9
28950: MINUS
28951: ARRAY
28952: ST_TO_ADDR
// end ; 14 :
28953: GO 29372
28955: LD_INT 14
28957: DOUBLE
28958: EQUAL
28959: IFTRUE 28963
28961: GO 28974
28963: POP
// bc_type := b_workshop ; 15 :
28964: LD_ADDR_OWVAR 42
28968: PUSH
28969: LD_INT 2
28971: ST_TO_ADDR
28972: GO 29372
28974: LD_INT 15
28976: DOUBLE
28977: EQUAL
28978: IFTRUE 28982
28980: GO 28993
28982: POP
// bc_type := b_factory ; 16 :
28983: LD_ADDR_OWVAR 42
28987: PUSH
28988: LD_INT 3
28990: ST_TO_ADDR
28991: GO 29372
28993: LD_INT 16
28995: DOUBLE
28996: EQUAL
28997: IFTRUE 29001
28999: GO 29012
29001: POP
// bc_type := b_ext_gun ; 17 :
29002: LD_ADDR_OWVAR 42
29006: PUSH
29007: LD_INT 17
29009: ST_TO_ADDR
29010: GO 29372
29012: LD_INT 17
29014: DOUBLE
29015: EQUAL
29016: IFTRUE 29020
29018: GO 29048
29020: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29021: LD_ADDR_OWVAR 42
29025: PUSH
29026: LD_INT 19
29028: PUSH
29029: LD_INT 23
29031: PUSH
29032: LD_INT 19
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: LIST
29039: PUSH
29040: LD_VAR 0 1
29044: ARRAY
29045: ST_TO_ADDR
29046: GO 29372
29048: LD_INT 18
29050: DOUBLE
29051: EQUAL
29052: IFTRUE 29056
29054: GO 29067
29056: POP
// bc_type := b_ext_radar ; 19 :
29057: LD_ADDR_OWVAR 42
29061: PUSH
29062: LD_INT 20
29064: ST_TO_ADDR
29065: GO 29372
29067: LD_INT 19
29069: DOUBLE
29070: EQUAL
29071: IFTRUE 29075
29073: GO 29086
29075: POP
// bc_type := b_ext_radio ; 20 :
29076: LD_ADDR_OWVAR 42
29080: PUSH
29081: LD_INT 22
29083: ST_TO_ADDR
29084: GO 29372
29086: LD_INT 20
29088: DOUBLE
29089: EQUAL
29090: IFTRUE 29094
29092: GO 29105
29094: POP
// bc_type := b_ext_siberium ; 21 :
29095: LD_ADDR_OWVAR 42
29099: PUSH
29100: LD_INT 21
29102: ST_TO_ADDR
29103: GO 29372
29105: LD_INT 21
29107: DOUBLE
29108: EQUAL
29109: IFTRUE 29113
29111: GO 29124
29113: POP
// bc_type := b_ext_computer ; 22 :
29114: LD_ADDR_OWVAR 42
29118: PUSH
29119: LD_INT 24
29121: ST_TO_ADDR
29122: GO 29372
29124: LD_INT 22
29126: DOUBLE
29127: EQUAL
29128: IFTRUE 29132
29130: GO 29143
29132: POP
// bc_type := b_ext_track ; 23 :
29133: LD_ADDR_OWVAR 42
29137: PUSH
29138: LD_INT 16
29140: ST_TO_ADDR
29141: GO 29372
29143: LD_INT 23
29145: DOUBLE
29146: EQUAL
29147: IFTRUE 29151
29149: GO 29162
29151: POP
// bc_type := b_ext_laser ; 24 :
29152: LD_ADDR_OWVAR 42
29156: PUSH
29157: LD_INT 25
29159: ST_TO_ADDR
29160: GO 29372
29162: LD_INT 24
29164: DOUBLE
29165: EQUAL
29166: IFTRUE 29170
29168: GO 29181
29170: POP
// bc_type := b_control_tower ; 25 :
29171: LD_ADDR_OWVAR 42
29175: PUSH
29176: LD_INT 36
29178: ST_TO_ADDR
29179: GO 29372
29181: LD_INT 25
29183: DOUBLE
29184: EQUAL
29185: IFTRUE 29189
29187: GO 29200
29189: POP
// bc_type := b_breastwork ; 26 :
29190: LD_ADDR_OWVAR 42
29194: PUSH
29195: LD_INT 31
29197: ST_TO_ADDR
29198: GO 29372
29200: LD_INT 26
29202: DOUBLE
29203: EQUAL
29204: IFTRUE 29208
29206: GO 29219
29208: POP
// bc_type := b_bunker ; 27 :
29209: LD_ADDR_OWVAR 42
29213: PUSH
29214: LD_INT 32
29216: ST_TO_ADDR
29217: GO 29372
29219: LD_INT 27
29221: DOUBLE
29222: EQUAL
29223: IFTRUE 29227
29225: GO 29238
29227: POP
// bc_type := b_turret ; 28 :
29228: LD_ADDR_OWVAR 42
29232: PUSH
29233: LD_INT 33
29235: ST_TO_ADDR
29236: GO 29372
29238: LD_INT 28
29240: DOUBLE
29241: EQUAL
29242: IFTRUE 29246
29244: GO 29257
29246: POP
// bc_type := b_armoury ; 29 :
29247: LD_ADDR_OWVAR 42
29251: PUSH
29252: LD_INT 4
29254: ST_TO_ADDR
29255: GO 29372
29257: LD_INT 29
29259: DOUBLE
29260: EQUAL
29261: IFTRUE 29265
29263: GO 29276
29265: POP
// bc_type := b_barracks ; 30 :
29266: LD_ADDR_OWVAR 42
29270: PUSH
29271: LD_INT 5
29273: ST_TO_ADDR
29274: GO 29372
29276: LD_INT 30
29278: DOUBLE
29279: EQUAL
29280: IFTRUE 29284
29282: GO 29295
29284: POP
// bc_type := b_solar_power ; 31 :
29285: LD_ADDR_OWVAR 42
29289: PUSH
29290: LD_INT 27
29292: ST_TO_ADDR
29293: GO 29372
29295: LD_INT 31
29297: DOUBLE
29298: EQUAL
29299: IFTRUE 29303
29301: GO 29314
29303: POP
// bc_type := b_oil_power ; 32 :
29304: LD_ADDR_OWVAR 42
29308: PUSH
29309: LD_INT 26
29311: ST_TO_ADDR
29312: GO 29372
29314: LD_INT 32
29316: DOUBLE
29317: EQUAL
29318: IFTRUE 29322
29320: GO 29333
29322: POP
// bc_type := b_siberite_power ; 33 :
29323: LD_ADDR_OWVAR 42
29327: PUSH
29328: LD_INT 28
29330: ST_TO_ADDR
29331: GO 29372
29333: LD_INT 33
29335: DOUBLE
29336: EQUAL
29337: IFTRUE 29341
29339: GO 29352
29341: POP
// bc_type := b_oil_mine ; 34 :
29342: LD_ADDR_OWVAR 42
29346: PUSH
29347: LD_INT 29
29349: ST_TO_ADDR
29350: GO 29372
29352: LD_INT 34
29354: DOUBLE
29355: EQUAL
29356: IFTRUE 29360
29358: GO 29371
29360: POP
// bc_type := b_siberite_mine ; end ;
29361: LD_ADDR_OWVAR 42
29365: PUSH
29366: LD_INT 30
29368: ST_TO_ADDR
29369: GO 29372
29371: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29372: LD_ADDR_VAR 0 8
29376: PUSH
29377: LD_VAR 0 5
29381: PPUSH
29382: LD_VAR 0 6
29386: PPUSH
29387: LD_VAR 0 3
29391: PPUSH
29392: CALL_OW 47
29396: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29397: LD_OWVAR 42
29401: PUSH
29402: LD_INT 32
29404: PUSH
29405: LD_INT 33
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: IN
29412: IFFALSE 29428
// PlaceWeaponTurret ( b , weapon ) ;
29414: LD_VAR 0 8
29418: PPUSH
29419: LD_VAR 0 4
29423: PPUSH
29424: CALL_OW 431
// end ;
29428: LD_VAR 0 7
29432: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29433: LD_INT 0
29435: PPUSH
29436: PPUSH
29437: PPUSH
29438: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29439: LD_ADDR_VAR 0 4
29443: PUSH
29444: LD_INT 22
29446: PUSH
29447: LD_OWVAR 2
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 2
29458: PUSH
29459: LD_INT 30
29461: PUSH
29462: LD_INT 0
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 30
29471: PUSH
29472: LD_INT 1
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: LIST
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PPUSH
29488: CALL_OW 69
29492: ST_TO_ADDR
// if not tmp then
29493: LD_VAR 0 4
29497: NOT
29498: IFFALSE 29502
// exit ;
29500: GO 29561
// for i in tmp do
29502: LD_ADDR_VAR 0 2
29506: PUSH
29507: LD_VAR 0 4
29511: PUSH
29512: FOR_IN
29513: IFFALSE 29559
// for j = 1 to 3 do
29515: LD_ADDR_VAR 0 3
29519: PUSH
29520: DOUBLE
29521: LD_INT 1
29523: DEC
29524: ST_TO_ADDR
29525: LD_INT 3
29527: PUSH
29528: FOR_TO
29529: IFFALSE 29555
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29531: LD_VAR 0 2
29535: PPUSH
29536: CALL_OW 274
29540: PPUSH
29541: LD_VAR 0 3
29545: PPUSH
29546: LD_INT 99999
29548: PPUSH
29549: CALL_OW 277
29553: GO 29528
29555: POP
29556: POP
29557: GO 29512
29559: POP
29560: POP
// end ;
29561: LD_VAR 0 1
29565: RET
// export function hHackSetLevel10 ; var i , j ; begin
29566: LD_INT 0
29568: PPUSH
29569: PPUSH
29570: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29571: LD_ADDR_VAR 0 2
29575: PUSH
29576: LD_INT 21
29578: PUSH
29579: LD_INT 1
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PPUSH
29586: CALL_OW 69
29590: PUSH
29591: FOR_IN
29592: IFFALSE 29644
// if IsSelected ( i ) then
29594: LD_VAR 0 2
29598: PPUSH
29599: CALL_OW 306
29603: IFFALSE 29642
// begin for j := 1 to 4 do
29605: LD_ADDR_VAR 0 3
29609: PUSH
29610: DOUBLE
29611: LD_INT 1
29613: DEC
29614: ST_TO_ADDR
29615: LD_INT 4
29617: PUSH
29618: FOR_TO
29619: IFFALSE 29640
// SetSkill ( i , j , 10 ) ;
29621: LD_VAR 0 2
29625: PPUSH
29626: LD_VAR 0 3
29630: PPUSH
29631: LD_INT 10
29633: PPUSH
29634: CALL_OW 237
29638: GO 29618
29640: POP
29641: POP
// end ;
29642: GO 29591
29644: POP
29645: POP
// end ;
29646: LD_VAR 0 1
29650: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29651: LD_INT 0
29653: PPUSH
29654: PPUSH
29655: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29656: LD_ADDR_VAR 0 2
29660: PUSH
29661: LD_INT 22
29663: PUSH
29664: LD_OWVAR 2
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 21
29675: PUSH
29676: LD_INT 1
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PPUSH
29687: CALL_OW 69
29691: PUSH
29692: FOR_IN
29693: IFFALSE 29734
// begin for j := 1 to 4 do
29695: LD_ADDR_VAR 0 3
29699: PUSH
29700: DOUBLE
29701: LD_INT 1
29703: DEC
29704: ST_TO_ADDR
29705: LD_INT 4
29707: PUSH
29708: FOR_TO
29709: IFFALSE 29730
// SetSkill ( i , j , 10 ) ;
29711: LD_VAR 0 2
29715: PPUSH
29716: LD_VAR 0 3
29720: PPUSH
29721: LD_INT 10
29723: PPUSH
29724: CALL_OW 237
29728: GO 29708
29730: POP
29731: POP
// end ;
29732: GO 29692
29734: POP
29735: POP
// end ;
29736: LD_VAR 0 1
29740: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29741: LD_INT 0
29743: PPUSH
// uc_side := your_side ;
29744: LD_ADDR_OWVAR 20
29748: PUSH
29749: LD_OWVAR 2
29753: ST_TO_ADDR
// uc_nation := nation ;
29754: LD_ADDR_OWVAR 21
29758: PUSH
29759: LD_VAR 0 1
29763: ST_TO_ADDR
// InitHc ;
29764: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29768: LD_INT 0
29770: PPUSH
29771: LD_VAR 0 2
29775: PPUSH
29776: LD_VAR 0 3
29780: PPUSH
29781: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29785: LD_VAR 0 4
29789: PPUSH
29790: LD_VAR 0 5
29794: PPUSH
29795: CALL_OW 428
29799: PUSH
29800: LD_INT 0
29802: EQUAL
29803: IFFALSE 29827
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29805: CALL_OW 44
29809: PPUSH
29810: LD_VAR 0 4
29814: PPUSH
29815: LD_VAR 0 5
29819: PPUSH
29820: LD_INT 1
29822: PPUSH
29823: CALL_OW 48
// end ;
29827: LD_VAR 0 6
29831: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29832: LD_INT 0
29834: PPUSH
29835: PPUSH
// uc_side := your_side ;
29836: LD_ADDR_OWVAR 20
29840: PUSH
29841: LD_OWVAR 2
29845: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29846: LD_VAR 0 1
29850: PUSH
29851: LD_INT 1
29853: PUSH
29854: LD_INT 2
29856: PUSH
29857: LD_INT 3
29859: PUSH
29860: LD_INT 4
29862: PUSH
29863: LD_INT 5
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: IN
29873: IFFALSE 29885
// uc_nation := nation_american else
29875: LD_ADDR_OWVAR 21
29879: PUSH
29880: LD_INT 1
29882: ST_TO_ADDR
29883: GO 29928
// if chassis in [ 11 , 12 , 13 , 14 ] then
29885: LD_VAR 0 1
29889: PUSH
29890: LD_INT 11
29892: PUSH
29893: LD_INT 12
29895: PUSH
29896: LD_INT 13
29898: PUSH
29899: LD_INT 14
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: IN
29908: IFFALSE 29920
// uc_nation := nation_arabian else
29910: LD_ADDR_OWVAR 21
29914: PUSH
29915: LD_INT 2
29917: ST_TO_ADDR
29918: GO 29928
// uc_nation := nation_russian ;
29920: LD_ADDR_OWVAR 21
29924: PUSH
29925: LD_INT 3
29927: ST_TO_ADDR
// vc_chassis := chassis ;
29928: LD_ADDR_OWVAR 37
29932: PUSH
29933: LD_VAR 0 1
29937: ST_TO_ADDR
// vc_engine := engine ;
29938: LD_ADDR_OWVAR 39
29942: PUSH
29943: LD_VAR 0 2
29947: ST_TO_ADDR
// vc_control := control ;
29948: LD_ADDR_OWVAR 38
29952: PUSH
29953: LD_VAR 0 3
29957: ST_TO_ADDR
// vc_weapon := weapon ;
29958: LD_ADDR_OWVAR 40
29962: PUSH
29963: LD_VAR 0 4
29967: ST_TO_ADDR
// un := CreateVehicle ;
29968: LD_ADDR_VAR 0 8
29972: PUSH
29973: CALL_OW 45
29977: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29978: LD_VAR 0 8
29982: PPUSH
29983: LD_INT 0
29985: PPUSH
29986: LD_INT 5
29988: PPUSH
29989: CALL_OW 12
29993: PPUSH
29994: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29998: LD_VAR 0 8
30002: PPUSH
30003: LD_VAR 0 5
30007: PPUSH
30008: LD_VAR 0 6
30012: PPUSH
30013: LD_INT 1
30015: PPUSH
30016: CALL_OW 48
// end ;
30020: LD_VAR 0 7
30024: RET
// export hInvincible ; every 1 do
30025: GO 30027
30027: DISABLE
// hInvincible := [ ] ;
30028: LD_ADDR_EXP 95
30032: PUSH
30033: EMPTY
30034: ST_TO_ADDR
30035: END
// every 10 do var i ;
30036: GO 30038
30038: DISABLE
30039: LD_INT 0
30041: PPUSH
// begin enable ;
30042: ENABLE
// if not hInvincible then
30043: LD_EXP 95
30047: NOT
30048: IFFALSE 30052
// exit ;
30050: GO 30096
// for i in hInvincible do
30052: LD_ADDR_VAR 0 1
30056: PUSH
30057: LD_EXP 95
30061: PUSH
30062: FOR_IN
30063: IFFALSE 30094
// if GetLives ( i ) < 1000 then
30065: LD_VAR 0 1
30069: PPUSH
30070: CALL_OW 256
30074: PUSH
30075: LD_INT 1000
30077: LESS
30078: IFFALSE 30092
// SetLives ( i , 1000 ) ;
30080: LD_VAR 0 1
30084: PPUSH
30085: LD_INT 1000
30087: PPUSH
30088: CALL_OW 234
30092: GO 30062
30094: POP
30095: POP
// end ;
30096: PPOPN 1
30098: END
// export function hHackInvincible ; var i ; begin
30099: LD_INT 0
30101: PPUSH
30102: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30103: LD_ADDR_VAR 0 2
30107: PUSH
30108: LD_INT 2
30110: PUSH
30111: LD_INT 21
30113: PUSH
30114: LD_INT 1
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 21
30123: PUSH
30124: LD_INT 2
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: LIST
30135: PPUSH
30136: CALL_OW 69
30140: PUSH
30141: FOR_IN
30142: IFFALSE 30203
// if IsSelected ( i ) then
30144: LD_VAR 0 2
30148: PPUSH
30149: CALL_OW 306
30153: IFFALSE 30201
// begin if i in hInvincible then
30155: LD_VAR 0 2
30159: PUSH
30160: LD_EXP 95
30164: IN
30165: IFFALSE 30185
// hInvincible := hInvincible diff i else
30167: LD_ADDR_EXP 95
30171: PUSH
30172: LD_EXP 95
30176: PUSH
30177: LD_VAR 0 2
30181: DIFF
30182: ST_TO_ADDR
30183: GO 30201
// hInvincible := hInvincible union i ;
30185: LD_ADDR_EXP 95
30189: PUSH
30190: LD_EXP 95
30194: PUSH
30195: LD_VAR 0 2
30199: UNION
30200: ST_TO_ADDR
// end ;
30201: GO 30141
30203: POP
30204: POP
// end ;
30205: LD_VAR 0 1
30209: RET
// export function hHackInvisible ; var i , j ; begin
30210: LD_INT 0
30212: PPUSH
30213: PPUSH
30214: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30215: LD_ADDR_VAR 0 2
30219: PUSH
30220: LD_INT 21
30222: PUSH
30223: LD_INT 1
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PPUSH
30230: CALL_OW 69
30234: PUSH
30235: FOR_IN
30236: IFFALSE 30260
// if IsSelected ( i ) then
30238: LD_VAR 0 2
30242: PPUSH
30243: CALL_OW 306
30247: IFFALSE 30258
// ComForceInvisible ( i ) ;
30249: LD_VAR 0 2
30253: PPUSH
30254: CALL_OW 496
30258: GO 30235
30260: POP
30261: POP
// end ;
30262: LD_VAR 0 1
30266: RET
// export function hHackChangeYourSide ; begin
30267: LD_INT 0
30269: PPUSH
// if your_side = 8 then
30270: LD_OWVAR 2
30274: PUSH
30275: LD_INT 8
30277: EQUAL
30278: IFFALSE 30290
// your_side := 0 else
30280: LD_ADDR_OWVAR 2
30284: PUSH
30285: LD_INT 0
30287: ST_TO_ADDR
30288: GO 30304
// your_side := your_side + 1 ;
30290: LD_ADDR_OWVAR 2
30294: PUSH
30295: LD_OWVAR 2
30299: PUSH
30300: LD_INT 1
30302: PLUS
30303: ST_TO_ADDR
// end ;
30304: LD_VAR 0 1
30308: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30309: LD_INT 0
30311: PPUSH
30312: PPUSH
30313: PPUSH
// for i in all_units do
30314: LD_ADDR_VAR 0 2
30318: PUSH
30319: LD_OWVAR 3
30323: PUSH
30324: FOR_IN
30325: IFFALSE 30403
// if IsSelected ( i ) then
30327: LD_VAR 0 2
30331: PPUSH
30332: CALL_OW 306
30336: IFFALSE 30401
// begin j := GetSide ( i ) ;
30338: LD_ADDR_VAR 0 3
30342: PUSH
30343: LD_VAR 0 2
30347: PPUSH
30348: CALL_OW 255
30352: ST_TO_ADDR
// if j = 8 then
30353: LD_VAR 0 3
30357: PUSH
30358: LD_INT 8
30360: EQUAL
30361: IFFALSE 30373
// j := 0 else
30363: LD_ADDR_VAR 0 3
30367: PUSH
30368: LD_INT 0
30370: ST_TO_ADDR
30371: GO 30387
// j := j + 1 ;
30373: LD_ADDR_VAR 0 3
30377: PUSH
30378: LD_VAR 0 3
30382: PUSH
30383: LD_INT 1
30385: PLUS
30386: ST_TO_ADDR
// SetSide ( i , j ) ;
30387: LD_VAR 0 2
30391: PPUSH
30392: LD_VAR 0 3
30396: PPUSH
30397: CALL_OW 235
// end ;
30401: GO 30324
30403: POP
30404: POP
// end ;
30405: LD_VAR 0 1
30409: RET
// export function hHackFog ; begin
30410: LD_INT 0
30412: PPUSH
// FogOff ( true ) ;
30413: LD_INT 1
30415: PPUSH
30416: CALL_OW 344
// end ;
30420: LD_VAR 0 1
30424: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30425: LD_INT 0
30427: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30428: LD_VAR 0 1
30432: PPUSH
30433: LD_VAR 0 2
30437: PPUSH
30438: LD_VAR 0 3
30442: PPUSH
30443: LD_INT 1
30445: PPUSH
30446: LD_INT 1
30448: PPUSH
30449: CALL_OW 483
// CenterOnXY ( x , y ) ;
30453: LD_VAR 0 2
30457: PPUSH
30458: LD_VAR 0 3
30462: PPUSH
30463: CALL_OW 84
// end ;
30467: LD_VAR 0 4
30471: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
30472: LD_INT 0
30474: PPUSH
30475: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
30476: LD_VAR 0 1
30480: NOT
30481: IFTRUE 30500
30483: PUSH
30484: LD_VAR 0 2
30488: PPUSH
30489: LD_VAR 0 3
30493: PPUSH
30494: CALL_OW 488
30498: NOT
30499: OR
30500: IFTRUE 30535
30502: PUSH
30503: LD_VAR 0 1
30507: PPUSH
30508: CALL_OW 266
30512: PUSH
30513: LD_INT 3
30515: NONEQUAL
30516: IFFALSE 30534
30518: PUSH
30519: LD_VAR 0 1
30523: PPUSH
30524: CALL_OW 247
30528: PUSH
30529: LD_INT 1
30531: EQUAL
30532: NOT
30533: AND
30534: OR
30535: IFFALSE 30539
// exit ;
30537: GO 30821
// if GetType ( factory ) = unit_human then
30539: LD_VAR 0 1
30543: PPUSH
30544: CALL_OW 247
30548: PUSH
30549: LD_INT 1
30551: EQUAL
30552: IFFALSE 30569
// factory := IsInUnit ( factory ) ;
30554: LD_ADDR_VAR 0 1
30558: PUSH
30559: LD_VAR 0 1
30563: PPUSH
30564: CALL_OW 310
30568: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
30569: LD_VAR 0 1
30573: PPUSH
30574: CALL_OW 266
30578: PUSH
30579: LD_INT 3
30581: NONEQUAL
30582: IFFALSE 30586
// exit ;
30584: GO 30821
// for i := 1 to Count ( factoryWaypoints ) do
30586: LD_ADDR_VAR 0 5
30590: PUSH
30591: DOUBLE
30592: LD_INT 1
30594: DEC
30595: ST_TO_ADDR
30596: LD_EXP 96
30600: PPUSH
30601: CALL 40354 0 1
30605: PUSH
30606: FOR_TO
30607: IFFALSE 30769
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
30609: LD_VAR 0 2
30613: PPUSH
30614: LD_VAR 0 3
30618: PPUSH
30619: CALL_OW 428
30623: PUSH
30624: LD_EXP 96
30628: PUSH
30629: LD_VAR 0 5
30633: ARRAY
30634: PUSH
30635: LD_INT 2
30637: ARRAY
30638: EQUAL
30639: IFFALSE 30671
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
30641: LD_ADDR_EXP 96
30645: PUSH
30646: LD_EXP 96
30650: PPUSH
30651: LD_VAR 0 5
30655: PPUSH
30656: CALL_OW 3
30660: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30661: CALL 30826 0 0
// exit ;
30665: POP
30666: POP
30667: GO 30821
// end else
30669: GO 30767
// if factory = factoryWaypoints [ i ] [ 2 ] then
30671: LD_VAR 0 1
30675: PUSH
30676: LD_EXP 96
30680: PUSH
30681: LD_VAR 0 5
30685: ARRAY
30686: PUSH
30687: LD_INT 2
30689: ARRAY
30690: EQUAL
30691: IFFALSE 30767
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
30693: LD_ADDR_EXP 96
30697: PUSH
30698: LD_EXP 96
30702: PPUSH
30703: LD_VAR 0 5
30707: PPUSH
30708: CALL_OW 3
30712: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
30713: LD_ADDR_EXP 96
30717: PUSH
30718: LD_EXP 96
30722: PPUSH
30723: LD_VAR 0 1
30727: PPUSH
30728: CALL_OW 255
30732: PUSH
30733: LD_VAR 0 1
30737: PUSH
30738: LD_VAR 0 2
30742: PUSH
30743: LD_VAR 0 3
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: PPUSH
30754: CALL 76286 0 2
30758: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30759: CALL 30826 0 0
// exit ;
30763: POP
30764: POP
30765: GO 30821
// end ; end ;
30767: GO 30606
30769: POP
30770: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
30771: LD_ADDR_EXP 96
30775: PUSH
30776: LD_EXP 96
30780: PPUSH
30781: LD_VAR 0 1
30785: PPUSH
30786: CALL_OW 255
30790: PUSH
30791: LD_VAR 0 1
30795: PUSH
30796: LD_VAR 0 2
30800: PUSH
30801: LD_VAR 0 3
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: PPUSH
30812: CALL 76286 0 2
30816: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30817: CALL 30826 0 0
// end ;
30821: LD_VAR 0 4
30825: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
30826: LD_INT 0
30828: PPUSH
30829: PPUSH
30830: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
30831: LD_STRING resetFactoryWaypoint();
30833: PPUSH
30834: CALL_OW 559
// if factoryWaypoints then
30838: LD_EXP 96
30842: IFFALSE 30963
// begin list := factoryWaypoints ;
30844: LD_ADDR_VAR 0 3
30848: PUSH
30849: LD_EXP 96
30853: ST_TO_ADDR
// for i := 1 to list do
30854: LD_ADDR_VAR 0 2
30858: PUSH
30859: DOUBLE
30860: LD_INT 1
30862: DEC
30863: ST_TO_ADDR
30864: LD_VAR 0 3
30868: PUSH
30869: FOR_TO
30870: IFFALSE 30961
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30872: LD_STRING setFactoryWaypointXY(
30874: PUSH
30875: LD_VAR 0 3
30879: PUSH
30880: LD_VAR 0 2
30884: ARRAY
30885: PUSH
30886: LD_INT 1
30888: ARRAY
30889: STR
30890: PUSH
30891: LD_STRING ,
30893: STR
30894: PUSH
30895: LD_VAR 0 3
30899: PUSH
30900: LD_VAR 0 2
30904: ARRAY
30905: PUSH
30906: LD_INT 2
30908: ARRAY
30909: STR
30910: PUSH
30911: LD_STRING ,
30913: STR
30914: PUSH
30915: LD_VAR 0 3
30919: PUSH
30920: LD_VAR 0 2
30924: ARRAY
30925: PUSH
30926: LD_INT 3
30928: ARRAY
30929: STR
30930: PUSH
30931: LD_STRING ,
30933: STR
30934: PUSH
30935: LD_VAR 0 3
30939: PUSH
30940: LD_VAR 0 2
30944: ARRAY
30945: PUSH
30946: LD_INT 4
30948: ARRAY
30949: STR
30950: PUSH
30951: LD_STRING )
30953: STR
30954: PPUSH
30955: CALL_OW 559
30959: GO 30869
30961: POP
30962: POP
// end ; end ;
30963: LD_VAR 0 1
30967: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
30968: LD_INT 0
30970: PPUSH
// if HexInfo ( x , y ) = warehouse then
30971: LD_VAR 0 2
30975: PPUSH
30976: LD_VAR 0 3
30980: PPUSH
30981: CALL_OW 428
30985: PUSH
30986: LD_VAR 0 1
30990: EQUAL
30991: IFFALSE 31018
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
30993: LD_ADDR_EXP 98
30997: PUSH
30998: LD_EXP 98
31002: PPUSH
31003: LD_VAR 0 1
31007: PPUSH
31008: LD_INT 0
31010: PPUSH
31011: CALL_OW 1
31015: ST_TO_ADDR
31016: GO 31069
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
31018: LD_ADDR_EXP 98
31022: PUSH
31023: LD_EXP 98
31027: PPUSH
31028: LD_VAR 0 1
31032: PPUSH
31033: LD_VAR 0 1
31037: PPUSH
31038: CALL_OW 255
31042: PUSH
31043: LD_VAR 0 1
31047: PUSH
31048: LD_VAR 0 2
31052: PUSH
31053: LD_VAR 0 3
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: PPUSH
31064: CALL_OW 1
31068: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
31069: CALL 31078 0 0
// end ;
31073: LD_VAR 0 4
31077: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
31078: LD_INT 0
31080: PPUSH
31081: PPUSH
31082: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
31083: LD_STRING resetWarehouseGatheringPoints();
31085: PPUSH
31086: CALL_OW 559
// if warehouseGatheringPoints then
31090: LD_EXP 98
31094: IFFALSE 31220
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
31096: LD_ADDR_VAR 0 3
31100: PUSH
31101: LD_EXP 98
31105: PPUSH
31106: CALL 80220 0 1
31110: ST_TO_ADDR
// for i := 1 to list do
31111: LD_ADDR_VAR 0 2
31115: PUSH
31116: DOUBLE
31117: LD_INT 1
31119: DEC
31120: ST_TO_ADDR
31121: LD_VAR 0 3
31125: PUSH
31126: FOR_TO
31127: IFFALSE 31218
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31129: LD_STRING setWarehouseGatheringPointXY(
31131: PUSH
31132: LD_VAR 0 3
31136: PUSH
31137: LD_VAR 0 2
31141: ARRAY
31142: PUSH
31143: LD_INT 1
31145: ARRAY
31146: STR
31147: PUSH
31148: LD_STRING ,
31150: STR
31151: PUSH
31152: LD_VAR 0 3
31156: PUSH
31157: LD_VAR 0 2
31161: ARRAY
31162: PUSH
31163: LD_INT 2
31165: ARRAY
31166: STR
31167: PUSH
31168: LD_STRING ,
31170: STR
31171: PUSH
31172: LD_VAR 0 3
31176: PUSH
31177: LD_VAR 0 2
31181: ARRAY
31182: PUSH
31183: LD_INT 3
31185: ARRAY
31186: STR
31187: PUSH
31188: LD_STRING ,
31190: STR
31191: PUSH
31192: LD_VAR 0 3
31196: PUSH
31197: LD_VAR 0 2
31201: ARRAY
31202: PUSH
31203: LD_INT 4
31205: ARRAY
31206: STR
31207: PUSH
31208: LD_STRING )
31210: STR
31211: PPUSH
31212: CALL_OW 559
31216: GO 31126
31218: POP
31219: POP
// end ; end ;
31220: LD_VAR 0 1
31224: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
31225: LD_EXP 98
31229: IFFALSE 31924
31231: GO 31233
31233: DISABLE
31234: LD_INT 0
31236: PPUSH
31237: PPUSH
31238: PPUSH
31239: PPUSH
31240: PPUSH
31241: PPUSH
31242: PPUSH
31243: PPUSH
31244: PPUSH
// begin enable ;
31245: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
31246: LD_ADDR_VAR 0 3
31250: PUSH
31251: LD_EXP 98
31255: PPUSH
31256: CALL 80220 0 1
31260: ST_TO_ADDR
// if not list then
31261: LD_VAR 0 3
31265: NOT
31266: IFFALSE 31270
// exit ;
31268: GO 31924
// for i := 1 to list do
31270: LD_ADDR_VAR 0 1
31274: PUSH
31275: DOUBLE
31276: LD_INT 1
31278: DEC
31279: ST_TO_ADDR
31280: LD_VAR 0 3
31284: PUSH
31285: FOR_TO
31286: IFFALSE 31922
// begin depot := list [ i ] [ 2 ] ;
31288: LD_ADDR_VAR 0 8
31292: PUSH
31293: LD_VAR 0 3
31297: PUSH
31298: LD_VAR 0 1
31302: ARRAY
31303: PUSH
31304: LD_INT 2
31306: ARRAY
31307: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
31308: LD_ADDR_VAR 0 5
31312: PUSH
31313: LD_VAR 0 3
31317: PUSH
31318: LD_VAR 0 1
31322: ARRAY
31323: PUSH
31324: LD_INT 1
31326: ARRAY
31327: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
31328: LD_VAR 0 8
31332: PPUSH
31333: CALL_OW 301
31337: IFTRUE 31356
31339: PUSH
31340: LD_VAR 0 5
31344: PUSH
31345: LD_VAR 0 8
31349: PPUSH
31350: CALL_OW 255
31354: NONEQUAL
31355: OR
31356: IFFALSE 31385
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
31358: LD_ADDR_EXP 98
31362: PUSH
31363: LD_EXP 98
31367: PPUSH
31368: LD_VAR 0 8
31372: PPUSH
31373: LD_INT 0
31375: PPUSH
31376: CALL_OW 1
31380: ST_TO_ADDR
// exit ;
31381: POP
31382: POP
31383: GO 31924
// end ; x := list [ i ] [ 3 ] ;
31385: LD_ADDR_VAR 0 6
31389: PUSH
31390: LD_VAR 0 3
31394: PUSH
31395: LD_VAR 0 1
31399: ARRAY
31400: PUSH
31401: LD_INT 3
31403: ARRAY
31404: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
31405: LD_ADDR_VAR 0 7
31409: PUSH
31410: LD_VAR 0 3
31414: PUSH
31415: LD_VAR 0 1
31419: ARRAY
31420: PUSH
31421: LD_INT 4
31423: ARRAY
31424: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
31425: LD_ADDR_VAR 0 9
31429: PUSH
31430: LD_VAR 0 6
31434: PPUSH
31435: LD_VAR 0 7
31439: PPUSH
31440: LD_INT 16
31442: PPUSH
31443: CALL 78794 0 3
31447: ST_TO_ADDR
// if not cratesNearbyPoint then
31448: LD_VAR 0 9
31452: NOT
31453: IFFALSE 31459
// exit ;
31455: POP
31456: POP
31457: GO 31924
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
31459: LD_ADDR_VAR 0 4
31463: PUSH
31464: LD_INT 22
31466: PUSH
31467: LD_VAR 0 5
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 3
31478: PUSH
31479: LD_INT 60
31481: PUSH
31482: EMPTY
31483: LIST
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 91
31491: PUSH
31492: LD_VAR 0 8
31496: PUSH
31497: LD_INT 6
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 2
31507: PUSH
31508: LD_INT 25
31510: PUSH
31511: LD_INT 2
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 25
31520: PUSH
31521: LD_INT 16
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: LIST
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: PPUSH
31539: CALL_OW 69
31543: PUSH
31544: LD_VAR 0 8
31548: PPUSH
31549: CALL_OW 313
31553: PPUSH
31554: LD_INT 3
31556: PUSH
31557: LD_INT 60
31559: PUSH
31560: EMPTY
31561: LIST
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 2
31569: PUSH
31570: LD_INT 25
31572: PUSH
31573: LD_INT 2
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 25
31582: PUSH
31583: LD_INT 16
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: LIST
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PPUSH
31599: CALL_OW 72
31603: UNION
31604: ST_TO_ADDR
// if tmp then
31605: LD_VAR 0 4
31609: IFFALSE 31689
// begin tmp := ShrinkArray ( tmp , 3 ) ;
31611: LD_ADDR_VAR 0 4
31615: PUSH
31616: LD_VAR 0 4
31620: PPUSH
31621: LD_INT 3
31623: PPUSH
31624: CALL 76601 0 2
31628: ST_TO_ADDR
// for j in tmp do
31629: LD_ADDR_VAR 0 2
31633: PUSH
31634: LD_VAR 0 4
31638: PUSH
31639: FOR_IN
31640: IFFALSE 31683
// begin if IsInUnit ( j ) then
31642: LD_VAR 0 2
31646: PPUSH
31647: CALL_OW 310
31651: IFFALSE 31662
// ComExit ( j ) ;
31653: LD_VAR 0 2
31657: PPUSH
31658: CALL 76684 0 1
// AddComCollect ( j , x , y ) ;
31662: LD_VAR 0 2
31666: PPUSH
31667: LD_VAR 0 6
31671: PPUSH
31672: LD_VAR 0 7
31676: PPUSH
31677: CALL_OW 177
// end ;
31681: GO 31639
31683: POP
31684: POP
// exit ;
31685: POP
31686: POP
31687: GO 31924
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
31689: LD_ADDR_VAR 0 4
31693: PUSH
31694: LD_INT 22
31696: PUSH
31697: LD_VAR 0 5
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 91
31708: PUSH
31709: LD_VAR 0 8
31713: PUSH
31714: LD_INT 8
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: LIST
31721: PUSH
31722: LD_INT 2
31724: PUSH
31725: LD_INT 34
31727: PUSH
31728: LD_INT 12
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 34
31737: PUSH
31738: LD_INT 51
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 34
31747: PUSH
31748: LD_INT 32
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 34
31757: PUSH
31758: LD_INT 89
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: LIST
31776: PPUSH
31777: CALL_OW 69
31781: ST_TO_ADDR
// if tmp then
31782: LD_VAR 0 4
31786: IFFALSE 31920
// begin for j in tmp do
31788: LD_ADDR_VAR 0 2
31792: PUSH
31793: LD_VAR 0 4
31797: PUSH
31798: FOR_IN
31799: IFFALSE 31918
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
31801: LD_VAR 0 2
31805: PPUSH
31806: CALL_OW 262
31810: PUSH
31811: LD_INT 3
31813: EQUAL
31814: IFTRUE 31831
31816: PUSH
31817: LD_VAR 0 2
31821: PPUSH
31822: CALL_OW 261
31826: PUSH
31827: LD_INT 20
31829: GREATER
31830: OR
31831: IFFALSE 31845
31833: PUSH
31834: LD_VAR 0 2
31838: PPUSH
31839: CALL_OW 314
31843: NOT
31844: AND
31845: IFFALSE 31875
31847: PUSH
31848: LD_VAR 0 2
31852: PPUSH
31853: CALL_OW 263
31857: PUSH
31858: LD_INT 1
31860: NONEQUAL
31861: IFTRUE 31874
31863: PUSH
31864: LD_VAR 0 2
31868: PPUSH
31869: CALL_OW 311
31873: OR
31874: AND
31875: IFFALSE 31916
// begin ComCollect ( j , x , y ) ;
31877: LD_VAR 0 2
31881: PPUSH
31882: LD_VAR 0 6
31886: PPUSH
31887: LD_VAR 0 7
31891: PPUSH
31892: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
31896: LD_VAR 0 2
31900: PPUSH
31901: LD_VAR 0 8
31905: PPUSH
31906: CALL_OW 172
// exit ;
31910: POP
31911: POP
31912: POP
31913: POP
31914: GO 31924
// end ;
31916: GO 31798
31918: POP
31919: POP
// end ; end ;
31920: GO 31285
31922: POP
31923: POP
// end ; end_of_file
31924: PPOPN 9
31926: END
// export function SOS_UnitDestroyed ( un ) ; begin
31927: LD_INT 0
31929: PPUSH
// ComRadiation ( un ) ;
31930: LD_VAR 0 1
31934: PPUSH
31935: CALL 33016 0 1
// end ;
31939: LD_VAR 0 2
31943: RET
// export function SOS_UnitKamikazed ( un ) ; begin
31944: LD_INT 0
31946: PPUSH
// ComRadiation ( un ) ;
31947: LD_VAR 0 1
31951: PPUSH
31952: CALL 33016 0 1
// end ;
31956: LD_VAR 0 2
31960: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31961: LD_INT 0
31963: PPUSH
// end ;
31964: LD_VAR 0 4
31968: RET
// export function SOS_Command ( cmd ) ; begin
31969: LD_INT 0
31971: PPUSH
// end ;
31972: LD_VAR 0 2
31976: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
31977: LD_INT 0
31979: PPUSH
// end ;
31980: LD_VAR 0 6
31984: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
31985: LD_INT 0
31987: PPUSH
31988: PPUSH
31989: PPUSH
31990: PPUSH
// if not vehicle or not factory then
31991: LD_VAR 0 1
31995: NOT
31996: IFTRUE 32005
31998: PUSH
31999: LD_VAR 0 2
32003: NOT
32004: OR
32005: IFFALSE 32009
// exit ;
32007: GO 32591
// if not factoryWaypoints then
32009: LD_EXP 96
32013: NOT
32014: IFFALSE 32018
// exit ;
32016: GO 32591
// for i := 1 to Count ( factoryWaypoints ) do
32018: LD_ADDR_VAR 0 4
32022: PUSH
32023: DOUBLE
32024: LD_INT 1
32026: DEC
32027: ST_TO_ADDR
32028: LD_EXP 96
32032: PPUSH
32033: CALL 40354 0 1
32037: PUSH
32038: FOR_TO
32039: IFFALSE 32589
// if factoryWaypoints [ i ] [ 2 ] = factory then
32041: LD_EXP 96
32045: PUSH
32046: LD_VAR 0 4
32050: ARRAY
32051: PUSH
32052: LD_INT 2
32054: ARRAY
32055: PUSH
32056: LD_VAR 0 2
32060: EQUAL
32061: IFFALSE 32587
// begin if GetControl ( vehicle ) = control_manual then
32063: LD_VAR 0 1
32067: PPUSH
32068: CALL_OW 263
32072: PUSH
32073: LD_INT 1
32075: EQUAL
32076: IFFALSE 32440
// begin driver := IsDrivenBy ( vehicle ) ;
32078: LD_ADDR_VAR 0 5
32082: PUSH
32083: LD_VAR 0 1
32087: PPUSH
32088: CALL_OW 311
32092: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
32093: LD_VAR 0 5
32097: PUSH
32098: LD_EXP 97
32102: IN
32103: IFTRUE 32117
32105: PUSH
32106: LD_VAR 0 1
32110: PUSH
32111: LD_EXP 97
32115: IN
32116: OR
32117: IFFALSE 32123
// exit ;
32119: POP
32120: POP
32121: GO 32591
// if not HasTask ( driver ) then
32123: LD_VAR 0 5
32127: PPUSH
32128: CALL_OW 314
32132: NOT
32133: IFFALSE 32438
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
32135: LD_ADDR_EXP 97
32139: PUSH
32140: LD_EXP 97
32144: PPUSH
32145: LD_VAR 0 5
32149: PPUSH
32150: CALL 76286 0 2
32154: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
32155: LD_ADDR_EXP 97
32159: PUSH
32160: LD_EXP 97
32164: PPUSH
32165: LD_VAR 0 1
32169: PPUSH
32170: CALL 76286 0 2
32174: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
32175: LD_ADDR_VAR 0 6
32179: PUSH
32180: LD_EXP 96
32184: PUSH
32185: LD_VAR 0 4
32189: ARRAY
32190: PUSH
32191: LD_INT 3
32193: ARRAY
32194: PPUSH
32195: LD_EXP 96
32199: PUSH
32200: LD_VAR 0 4
32204: ARRAY
32205: PUSH
32206: LD_INT 4
32208: ARRAY
32209: PPUSH
32210: CALL_OW 428
32214: ST_TO_ADDR
// if hex then
32215: LD_VAR 0 6
32219: IFFALSE 32237
// ComMoveUnit ( driver , hex ) else
32221: LD_VAR 0 5
32225: PPUSH
32226: LD_VAR 0 6
32230: PPUSH
32231: CALL_OW 112
32235: GO 32321
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
32237: LD_VAR 0 1
32241: PPUSH
32242: LD_EXP 96
32246: PUSH
32247: LD_VAR 0 4
32251: ARRAY
32252: PUSH
32253: LD_INT 3
32255: ARRAY
32256: PPUSH
32257: LD_EXP 96
32261: PUSH
32262: LD_VAR 0 4
32266: ARRAY
32267: PUSH
32268: LD_INT 4
32270: ARRAY
32271: PPUSH
32272: CALL_OW 297
32276: PUSH
32277: LD_INT 0
32279: GREATER
32280: IFFALSE 32321
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
32282: LD_VAR 0 5
32286: PPUSH
32287: LD_EXP 96
32291: PUSH
32292: LD_VAR 0 4
32296: ARRAY
32297: PUSH
32298: LD_INT 3
32300: ARRAY
32301: PPUSH
32302: LD_EXP 96
32306: PUSH
32307: LD_VAR 0 4
32311: ARRAY
32312: PUSH
32313: LD_INT 4
32315: ARRAY
32316: PPUSH
32317: CALL_OW 111
// AddComExitVehicle ( driver ) ;
32321: LD_VAR 0 5
32325: PPUSH
32326: CALL_OW 181
// if Multiplayer then
32330: LD_OWVAR 4
32334: IFFALSE 32383
// begin repeat wait ( 10 ) ;
32336: LD_INT 10
32338: PPUSH
32339: CALL_OW 67
// until not IsInUnit ( driver ) ;
32343: LD_VAR 0 5
32347: PPUSH
32348: CALL_OW 310
32352: NOT
32353: IFFALSE 32336
// if not HasTask ( driver ) then
32355: LD_VAR 0 5
32359: PPUSH
32360: CALL_OW 314
32364: NOT
32365: IFFALSE 32381
// ComEnterUnit ( driver , factory ) ;
32367: LD_VAR 0 5
32371: PPUSH
32372: LD_VAR 0 2
32376: PPUSH
32377: CALL_OW 120
// end else
32381: GO 32397
// AddComEnterUnit ( driver , factory ) ;
32383: LD_VAR 0 5
32387: PPUSH
32388: LD_VAR 0 2
32392: PPUSH
32393: CALL_OW 180
// wait ( 0 0$1 ) ;
32397: LD_INT 35
32399: PPUSH
32400: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
32404: LD_ADDR_EXP 97
32408: PUSH
32409: LD_EXP 97
32413: PUSH
32414: LD_VAR 0 5
32418: DIFF
32419: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
32420: LD_ADDR_EXP 97
32424: PUSH
32425: LD_EXP 97
32429: PUSH
32430: LD_VAR 0 1
32434: DIFF
32435: ST_TO_ADDR
// break ;
32436: GO 32589
// end ; end else
32438: GO 32587
// if GetControl ( vehicle ) = control_remote then
32440: LD_VAR 0 1
32444: PPUSH
32445: CALL_OW 263
32449: PUSH
32450: LD_INT 2
32452: EQUAL
32453: IFFALSE 32539
// begin wait ( 0 0$2 ) ;
32455: LD_INT 70
32457: PPUSH
32458: CALL_OW 67
// repeat wait ( 10 ) ;
32462: LD_INT 10
32464: PPUSH
32465: CALL_OW 67
// Connect ( vehicle ) ;
32469: LD_VAR 0 1
32473: PPUSH
32474: CALL 46598 0 1
// until IsControledBy ( vehicle ) ;
32478: LD_VAR 0 1
32482: PPUSH
32483: CALL_OW 312
32487: IFFALSE 32462
// wait ( 10 ) ;
32489: LD_INT 10
32491: PPUSH
32492: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
32496: LD_VAR 0 1
32500: PPUSH
32501: LD_EXP 96
32505: PUSH
32506: LD_VAR 0 4
32510: ARRAY
32511: PUSH
32512: LD_INT 3
32514: ARRAY
32515: PPUSH
32516: LD_EXP 96
32520: PUSH
32521: LD_VAR 0 4
32525: ARRAY
32526: PUSH
32527: LD_INT 4
32529: ARRAY
32530: PPUSH
32531: CALL_OW 111
// break ;
32535: GO 32589
// end else
32537: GO 32587
// begin wait ( 0 0$3 ) ;
32539: LD_INT 105
32541: PPUSH
32542: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
32546: LD_VAR 0 1
32550: PPUSH
32551: LD_EXP 96
32555: PUSH
32556: LD_VAR 0 4
32560: ARRAY
32561: PUSH
32562: LD_INT 3
32564: ARRAY
32565: PPUSH
32566: LD_EXP 96
32570: PUSH
32571: LD_VAR 0 4
32575: ARRAY
32576: PUSH
32577: LD_INT 4
32579: ARRAY
32580: PPUSH
32581: CALL_OW 111
// break ;
32585: GO 32589
// end ; end ;
32587: GO 32038
32589: POP
32590: POP
// end ;
32591: LD_VAR 0 3
32595: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32596: LD_INT 0
32598: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32599: LD_VAR 0 1
32603: PUSH
32604: LD_INT 250
32606: EQUAL
32607: IFFALSE 32624
32609: PUSH
32610: LD_VAR 0 2
32614: PPUSH
32615: CALL_OW 264
32619: PUSH
32620: LD_INT 81
32622: EQUAL
32623: AND
32624: IFFALSE 32645
// MinerPlaceMine ( unit , x , y ) ;
32626: LD_VAR 0 2
32630: PPUSH
32631: LD_VAR 0 4
32635: PPUSH
32636: LD_VAR 0 5
32640: PPUSH
32641: CALL 35777 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32645: LD_VAR 0 1
32649: PUSH
32650: LD_INT 251
32652: EQUAL
32653: IFFALSE 32670
32655: PUSH
32656: LD_VAR 0 2
32660: PPUSH
32661: CALL_OW 264
32665: PUSH
32666: LD_INT 81
32668: EQUAL
32669: AND
32670: IFFALSE 32691
// MinerDetonateMine ( unit , x , y ) ;
32672: LD_VAR 0 2
32676: PPUSH
32677: LD_VAR 0 4
32681: PPUSH
32682: LD_VAR 0 5
32686: PPUSH
32687: CALL 36056 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32691: LD_VAR 0 1
32695: PUSH
32696: LD_INT 252
32698: EQUAL
32699: IFFALSE 32716
32701: PUSH
32702: LD_VAR 0 2
32706: PPUSH
32707: CALL_OW 264
32711: PUSH
32712: LD_INT 81
32714: EQUAL
32715: AND
32716: IFFALSE 32737
// MinerCreateMinefield ( unit , x , y ) ;
32718: LD_VAR 0 2
32722: PPUSH
32723: LD_VAR 0 4
32727: PPUSH
32728: LD_VAR 0 5
32732: PPUSH
32733: CALL 36475 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32737: LD_VAR 0 1
32741: PUSH
32742: LD_INT 253
32744: EQUAL
32745: IFFALSE 32762
32747: PUSH
32748: LD_VAR 0 2
32752: PPUSH
32753: CALL_OW 257
32757: PUSH
32758: LD_INT 5
32760: EQUAL
32761: AND
32762: IFFALSE 32783
// ComBinocular ( unit , x , y ) ;
32764: LD_VAR 0 2
32768: PPUSH
32769: LD_VAR 0 4
32773: PPUSH
32774: LD_VAR 0 5
32778: PPUSH
32779: CALL 36850 0 3
// if selectedUnit then
32783: LD_VAR 0 3
32787: IFFALSE 32847
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32789: LD_VAR 0 1
32793: PUSH
32794: LD_INT 254
32796: EQUAL
32797: IFFALSE 32814
32799: PUSH
32800: LD_VAR 0 2
32804: PPUSH
32805: CALL_OW 264
32809: PUSH
32810: LD_INT 99
32812: EQUAL
32813: AND
32814: IFFALSE 32831
32816: PUSH
32817: LD_VAR 0 3
32821: PPUSH
32822: CALL_OW 263
32826: PUSH
32827: LD_INT 3
32829: EQUAL
32830: AND
32831: IFFALSE 32847
// HackDestroyVehicle ( unit , selectedUnit ) ;
32833: LD_VAR 0 2
32837: PPUSH
32838: LD_VAR 0 3
32842: PPUSH
32843: CALL 35137 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32847: LD_VAR 0 1
32851: PUSH
32852: LD_INT 255
32854: EQUAL
32855: IFFALSE 32879
32857: PUSH
32858: LD_VAR 0 2
32862: PPUSH
32863: CALL_OW 264
32867: PUSH
32868: LD_INT 14
32870: PUSH
32871: LD_INT 53
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: IN
32878: AND
32879: IFFALSE 32897
32881: PUSH
32882: LD_VAR 0 4
32886: PPUSH
32887: LD_VAR 0 5
32891: PPUSH
32892: CALL_OW 488
32896: AND
32897: IFFALSE 32921
// CutTreeXYR ( unit , x , y , 12 ) ;
32899: LD_VAR 0 2
32903: PPUSH
32904: LD_VAR 0 4
32908: PPUSH
32909: LD_VAR 0 5
32913: PPUSH
32914: LD_INT 12
32916: PPUSH
32917: CALL 33112 0 4
// if cmd = 256 then
32921: LD_VAR 0 1
32925: PUSH
32926: LD_INT 256
32928: EQUAL
32929: IFFALSE 32950
// SetFactoryWaypoint ( unit , x , y ) ;
32931: LD_VAR 0 2
32935: PPUSH
32936: LD_VAR 0 4
32940: PPUSH
32941: LD_VAR 0 5
32945: PPUSH
32946: CALL 30472 0 3
// if cmd = 257 then
32950: LD_VAR 0 1
32954: PUSH
32955: LD_INT 257
32957: EQUAL
32958: IFFALSE 32979
// SetWarehouseGatheringPoint ( unit , x , y ) ;
32960: LD_VAR 0 2
32964: PPUSH
32965: LD_VAR 0 4
32969: PPUSH
32970: LD_VAR 0 5
32974: PPUSH
32975: CALL 30968 0 3
// if cmd = 258 then
32979: LD_VAR 0 1
32983: PUSH
32984: LD_INT 258
32986: EQUAL
32987: IFFALSE 33011
// BurnTreeXYR ( unit , x , y , 8 ) ;
32989: LD_VAR 0 2
32993: PPUSH
32994: LD_VAR 0 4
32998: PPUSH
32999: LD_VAR 0 5
33003: PPUSH
33004: LD_INT 8
33006: PPUSH
33007: CALL 33512 0 4
// end ;
33011: LD_VAR 0 6
33015: RET
// export function ComRadiation ( un ) ; var eff ; begin
33016: LD_INT 0
33018: PPUSH
33019: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
33020: LD_VAR 0 1
33024: PPUSH
33025: CALL_OW 264
33029: PUSH
33030: LD_INT 91
33032: NONEQUAL
33033: IFFALSE 33037
// exit ;
33035: GO 33107
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33037: LD_INT 68
33039: PPUSH
33040: LD_VAR 0 1
33044: PPUSH
33045: CALL_OW 255
33049: PPUSH
33050: CALL_OW 321
33054: PUSH
33055: LD_INT 2
33057: EQUAL
33058: IFFALSE 33070
// eff := 50 else
33060: LD_ADDR_VAR 0 3
33064: PUSH
33065: LD_INT 50
33067: ST_TO_ADDR
33068: GO 33078
// eff := 25 ;
33070: LD_ADDR_VAR 0 3
33074: PUSH
33075: LD_INT 25
33077: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33078: LD_VAR 0 1
33082: PPUSH
33083: CALL_OW 250
33087: PPUSH
33088: LD_VAR 0 1
33092: PPUSH
33093: CALL_OW 251
33097: PPUSH
33098: LD_VAR 0 3
33102: PPUSH
33103: CALL_OW 495
// end ;
33107: LD_VAR 0 2
33111: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33112: LD_INT 0
33114: PPUSH
33115: PPUSH
33116: PPUSH
33117: PPUSH
33118: PPUSH
33119: PPUSH
33120: PPUSH
33121: PPUSH
33122: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
33123: LD_VAR 0 1
33127: PPUSH
33128: CALL_OW 302
33132: NOT
33133: IFTRUE 33152
33135: PUSH
33136: LD_VAR 0 2
33140: PPUSH
33141: LD_VAR 0 3
33145: PPUSH
33146: CALL_OW 488
33150: NOT
33151: OR
33152: IFTRUE 33161
33154: PUSH
33155: LD_VAR 0 4
33159: NOT
33160: OR
33161: IFFALSE 33165
// exit ;
33163: GO 33507
// list := [ ] ;
33165: LD_ADDR_VAR 0 13
33169: PUSH
33170: EMPTY
33171: ST_TO_ADDR
// if x - r < 0 then
33172: LD_VAR 0 2
33176: PUSH
33177: LD_VAR 0 4
33181: MINUS
33182: PUSH
33183: LD_INT 0
33185: LESS
33186: IFFALSE 33198
// min_x := 0 else
33188: LD_ADDR_VAR 0 7
33192: PUSH
33193: LD_INT 0
33195: ST_TO_ADDR
33196: GO 33214
// min_x := x - r ;
33198: LD_ADDR_VAR 0 7
33202: PUSH
33203: LD_VAR 0 2
33207: PUSH
33208: LD_VAR 0 4
33212: MINUS
33213: ST_TO_ADDR
// if y - r < 0 then
33214: LD_VAR 0 3
33218: PUSH
33219: LD_VAR 0 4
33223: MINUS
33224: PUSH
33225: LD_INT 0
33227: LESS
33228: IFFALSE 33240
// min_y := 0 else
33230: LD_ADDR_VAR 0 8
33234: PUSH
33235: LD_INT 0
33237: ST_TO_ADDR
33238: GO 33256
// min_y := y - r ;
33240: LD_ADDR_VAR 0 8
33244: PUSH
33245: LD_VAR 0 3
33249: PUSH
33250: LD_VAR 0 4
33254: MINUS
33255: ST_TO_ADDR
// max_x := x + r ;
33256: LD_ADDR_VAR 0 9
33260: PUSH
33261: LD_VAR 0 2
33265: PUSH
33266: LD_VAR 0 4
33270: PLUS
33271: ST_TO_ADDR
// max_y := y + r ;
33272: LD_ADDR_VAR 0 10
33276: PUSH
33277: LD_VAR 0 3
33281: PUSH
33282: LD_VAR 0 4
33286: PLUS
33287: ST_TO_ADDR
// for _x = min_x to max_x do
33288: LD_ADDR_VAR 0 11
33292: PUSH
33293: DOUBLE
33294: LD_VAR 0 7
33298: DEC
33299: ST_TO_ADDR
33300: LD_VAR 0 9
33304: PUSH
33305: FOR_TO
33306: IFFALSE 33425
// for _y = min_y to max_y do
33308: LD_ADDR_VAR 0 12
33312: PUSH
33313: DOUBLE
33314: LD_VAR 0 8
33318: DEC
33319: ST_TO_ADDR
33320: LD_VAR 0 10
33324: PUSH
33325: FOR_TO
33326: IFFALSE 33421
// begin if not ValidHex ( _x , _y ) then
33328: LD_VAR 0 11
33332: PPUSH
33333: LD_VAR 0 12
33337: PPUSH
33338: CALL_OW 488
33342: NOT
33343: IFFALSE 33347
// continue ;
33345: GO 33325
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33347: LD_VAR 0 11
33351: PPUSH
33352: LD_VAR 0 12
33356: PPUSH
33357: CALL_OW 351
33361: IFFALSE 33379
33363: PUSH
33364: LD_VAR 0 11
33368: PPUSH
33369: LD_VAR 0 12
33373: PPUSH
33374: CALL_OW 554
33378: AND
33379: IFFALSE 33419
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33381: LD_ADDR_VAR 0 13
33385: PUSH
33386: LD_VAR 0 13
33390: PPUSH
33391: LD_VAR 0 13
33395: PUSH
33396: LD_INT 1
33398: PLUS
33399: PPUSH
33400: LD_VAR 0 11
33404: PUSH
33405: LD_VAR 0 12
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PPUSH
33414: CALL_OW 2
33418: ST_TO_ADDR
// end ;
33419: GO 33325
33421: POP
33422: POP
33423: GO 33305
33425: POP
33426: POP
// if not list then
33427: LD_VAR 0 13
33431: NOT
33432: IFFALSE 33436
// exit ;
33434: GO 33507
// for i in list do
33436: LD_ADDR_VAR 0 6
33440: PUSH
33441: LD_VAR 0 13
33445: PUSH
33446: FOR_IN
33447: IFFALSE 33505
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33449: LD_VAR 0 1
33453: PPUSH
33454: LD_STRING M
33456: PUSH
33457: LD_VAR 0 6
33461: PUSH
33462: LD_INT 1
33464: ARRAY
33465: PUSH
33466: LD_VAR 0 6
33470: PUSH
33471: LD_INT 2
33473: ARRAY
33474: PUSH
33475: LD_INT 0
33477: PUSH
33478: LD_INT 0
33480: PUSH
33481: LD_INT 0
33483: PUSH
33484: LD_INT 0
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: PUSH
33496: EMPTY
33497: LIST
33498: PPUSH
33499: CALL_OW 447
33503: GO 33446
33505: POP
33506: POP
// end ;
33507: LD_VAR 0 5
33511: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
33512: LD_INT 0
33514: PPUSH
33515: PPUSH
33516: PPUSH
33517: PPUSH
33518: PPUSH
33519: PPUSH
33520: PPUSH
33521: PPUSH
33522: PPUSH
33523: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
33524: LD_VAR 0 1
33528: PPUSH
33529: CALL_OW 302
33533: NOT
33534: IFTRUE 33553
33536: PUSH
33537: LD_VAR 0 2
33541: PPUSH
33542: LD_VAR 0 3
33546: PPUSH
33547: CALL_OW 488
33551: NOT
33552: OR
33553: IFTRUE 33562
33555: PUSH
33556: LD_VAR 0 4
33560: NOT
33561: OR
33562: IFFALSE 33566
// exit ;
33564: GO 34083
// list := [ ] ;
33566: LD_ADDR_VAR 0 13
33570: PUSH
33571: EMPTY
33572: ST_TO_ADDR
// if x - r < 0 then
33573: LD_VAR 0 2
33577: PUSH
33578: LD_VAR 0 4
33582: MINUS
33583: PUSH
33584: LD_INT 0
33586: LESS
33587: IFFALSE 33599
// min_x := 0 else
33589: LD_ADDR_VAR 0 7
33593: PUSH
33594: LD_INT 0
33596: ST_TO_ADDR
33597: GO 33615
// min_x := x - r ;
33599: LD_ADDR_VAR 0 7
33603: PUSH
33604: LD_VAR 0 2
33608: PUSH
33609: LD_VAR 0 4
33613: MINUS
33614: ST_TO_ADDR
// if y - r < 0 then
33615: LD_VAR 0 3
33619: PUSH
33620: LD_VAR 0 4
33624: MINUS
33625: PUSH
33626: LD_INT 0
33628: LESS
33629: IFFALSE 33641
// min_y := 0 else
33631: LD_ADDR_VAR 0 8
33635: PUSH
33636: LD_INT 0
33638: ST_TO_ADDR
33639: GO 33657
// min_y := y - r ;
33641: LD_ADDR_VAR 0 8
33645: PUSH
33646: LD_VAR 0 3
33650: PUSH
33651: LD_VAR 0 4
33655: MINUS
33656: ST_TO_ADDR
// max_x := x + r ;
33657: LD_ADDR_VAR 0 9
33661: PUSH
33662: LD_VAR 0 2
33666: PUSH
33667: LD_VAR 0 4
33671: PLUS
33672: ST_TO_ADDR
// max_y := y + r ;
33673: LD_ADDR_VAR 0 10
33677: PUSH
33678: LD_VAR 0 3
33682: PUSH
33683: LD_VAR 0 4
33687: PLUS
33688: ST_TO_ADDR
// for _x = min_x to max_x do
33689: LD_ADDR_VAR 0 11
33693: PUSH
33694: DOUBLE
33695: LD_VAR 0 7
33699: DEC
33700: ST_TO_ADDR
33701: LD_VAR 0 9
33705: PUSH
33706: FOR_TO
33707: IFFALSE 33826
// for _y = min_y to max_y do
33709: LD_ADDR_VAR 0 12
33713: PUSH
33714: DOUBLE
33715: LD_VAR 0 8
33719: DEC
33720: ST_TO_ADDR
33721: LD_VAR 0 10
33725: PUSH
33726: FOR_TO
33727: IFFALSE 33822
// begin if not ValidHex ( _x , _y ) then
33729: LD_VAR 0 11
33733: PPUSH
33734: LD_VAR 0 12
33738: PPUSH
33739: CALL_OW 488
33743: NOT
33744: IFFALSE 33748
// continue ;
33746: GO 33726
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33748: LD_VAR 0 11
33752: PPUSH
33753: LD_VAR 0 12
33757: PPUSH
33758: CALL_OW 351
33762: IFFALSE 33780
33764: PUSH
33765: LD_VAR 0 11
33769: PPUSH
33770: LD_VAR 0 12
33774: PPUSH
33775: CALL_OW 554
33779: AND
33780: IFFALSE 33820
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33782: LD_ADDR_VAR 0 13
33786: PUSH
33787: LD_VAR 0 13
33791: PPUSH
33792: LD_VAR 0 13
33796: PUSH
33797: LD_INT 1
33799: PLUS
33800: PPUSH
33801: LD_VAR 0 11
33805: PUSH
33806: LD_VAR 0 12
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PPUSH
33815: CALL_OW 2
33819: ST_TO_ADDR
// end ;
33820: GO 33726
33822: POP
33823: POP
33824: GO 33706
33826: POP
33827: POP
// if not list then
33828: LD_VAR 0 13
33832: NOT
33833: IFFALSE 33837
// exit ;
33835: GO 34083
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
33837: LD_ADDR_VAR 0 13
33841: PUSH
33842: LD_VAR 0 1
33846: PPUSH
33847: LD_VAR 0 13
33851: PPUSH
33852: LD_INT 1
33854: PPUSH
33855: LD_INT 1
33857: PPUSH
33858: CALL 43726 0 4
33862: ST_TO_ADDR
// ComStop ( flame ) ;
33863: LD_VAR 0 1
33867: PPUSH
33868: CALL_OW 141
// for i in list do
33872: LD_ADDR_VAR 0 6
33876: PUSH
33877: LD_VAR 0 13
33881: PUSH
33882: FOR_IN
33883: IFFALSE 33914
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
33885: LD_VAR 0 1
33889: PPUSH
33890: LD_VAR 0 6
33894: PUSH
33895: LD_INT 1
33897: ARRAY
33898: PPUSH
33899: LD_VAR 0 6
33903: PUSH
33904: LD_INT 2
33906: ARRAY
33907: PPUSH
33908: CALL_OW 176
33912: GO 33882
33914: POP
33915: POP
// repeat wait ( 0 0$1 ) ;
33916: LD_INT 35
33918: PPUSH
33919: CALL_OW 67
// task := GetTaskList ( flame ) ;
33923: LD_ADDR_VAR 0 14
33927: PUSH
33928: LD_VAR 0 1
33932: PPUSH
33933: CALL_OW 437
33937: ST_TO_ADDR
// if not task then
33938: LD_VAR 0 14
33942: NOT
33943: IFFALSE 33947
// exit ;
33945: GO 34083
// if task [ 1 ] [ 1 ] <> | then
33947: LD_VAR 0 14
33951: PUSH
33952: LD_INT 1
33954: ARRAY
33955: PUSH
33956: LD_INT 1
33958: ARRAY
33959: PUSH
33960: LD_STRING |
33962: NONEQUAL
33963: IFFALSE 33967
// exit ;
33965: GO 34083
// _x := task [ 1 ] [ 2 ] ;
33967: LD_ADDR_VAR 0 11
33971: PUSH
33972: LD_VAR 0 14
33976: PUSH
33977: LD_INT 1
33979: ARRAY
33980: PUSH
33981: LD_INT 2
33983: ARRAY
33984: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
33985: LD_ADDR_VAR 0 12
33989: PUSH
33990: LD_VAR 0 14
33994: PUSH
33995: LD_INT 1
33997: ARRAY
33998: PUSH
33999: LD_INT 3
34001: ARRAY
34002: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
34003: LD_VAR 0 11
34007: PPUSH
34008: LD_VAR 0 12
34012: PPUSH
34013: CALL_OW 351
34017: NOT
34018: IFTRUE 34037
34020: PUSH
34021: LD_VAR 0 11
34025: PPUSH
34026: LD_VAR 0 12
34030: PPUSH
34031: CALL_OW 554
34035: NOT
34036: OR
34037: IFFALSE 34071
// begin task := Delete ( task , 1 ) ;
34039: LD_ADDR_VAR 0 14
34043: PUSH
34044: LD_VAR 0 14
34048: PPUSH
34049: LD_INT 1
34051: PPUSH
34052: CALL_OW 3
34056: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
34057: LD_VAR 0 1
34061: PPUSH
34062: LD_VAR 0 14
34066: PPUSH
34067: CALL_OW 446
// end ; until not HasTask ( flame ) ;
34071: LD_VAR 0 1
34075: PPUSH
34076: CALL_OW 314
34080: NOT
34081: IFFALSE 33916
// end ;
34083: LD_VAR 0 5
34087: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34088: LD_EXP 100
34092: NOT
34093: IFFALSE 34143
34095: GO 34097
34097: DISABLE
// begin initHack := true ;
34098: LD_ADDR_EXP 100
34102: PUSH
34103: LD_INT 1
34105: ST_TO_ADDR
// hackTanks := [ ] ;
34106: LD_ADDR_EXP 101
34110: PUSH
34111: EMPTY
34112: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34113: LD_ADDR_EXP 102
34117: PUSH
34118: EMPTY
34119: ST_TO_ADDR
// hackLimit := 3 ;
34120: LD_ADDR_EXP 103
34124: PUSH
34125: LD_INT 3
34127: ST_TO_ADDR
// hackDist := 12 ;
34128: LD_ADDR_EXP 104
34132: PUSH
34133: LD_INT 12
34135: ST_TO_ADDR
// hackCounter := [ ] ;
34136: LD_ADDR_EXP 105
34140: PUSH
34141: EMPTY
34142: ST_TO_ADDR
// end ;
34143: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34144: LD_EXP 100
34148: IFFALSE 34166
34150: PUSH
34151: LD_INT 34
34153: PUSH
34154: LD_INT 99
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PPUSH
34161: CALL_OW 69
34165: AND
34166: IFFALSE 34419
34168: GO 34170
34170: DISABLE
34171: LD_INT 0
34173: PPUSH
34174: PPUSH
// begin enable ;
34175: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34176: LD_ADDR_VAR 0 1
34180: PUSH
34181: LD_INT 34
34183: PUSH
34184: LD_INT 99
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PPUSH
34191: CALL_OW 69
34195: PUSH
34196: FOR_IN
34197: IFFALSE 34417
// begin if not i in hackTanks then
34199: LD_VAR 0 1
34203: PUSH
34204: LD_EXP 101
34208: IN
34209: NOT
34210: IFFALSE 34293
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34212: LD_ADDR_EXP 101
34216: PUSH
34217: LD_EXP 101
34221: PPUSH
34222: LD_EXP 101
34226: PUSH
34227: LD_INT 1
34229: PLUS
34230: PPUSH
34231: LD_VAR 0 1
34235: PPUSH
34236: CALL_OW 1
34240: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34241: LD_ADDR_EXP 102
34245: PUSH
34246: LD_EXP 102
34250: PPUSH
34251: LD_EXP 102
34255: PUSH
34256: LD_INT 1
34258: PLUS
34259: PPUSH
34260: EMPTY
34261: PPUSH
34262: CALL_OW 1
34266: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34267: LD_ADDR_EXP 105
34271: PUSH
34272: LD_EXP 105
34276: PPUSH
34277: LD_EXP 105
34281: PUSH
34282: LD_INT 1
34284: PLUS
34285: PPUSH
34286: EMPTY
34287: PPUSH
34288: CALL_OW 1
34292: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34293: LD_VAR 0 1
34297: PPUSH
34298: CALL_OW 302
34302: NOT
34303: IFFALSE 34316
// begin HackUnlinkAll ( i ) ;
34305: LD_VAR 0 1
34309: PPUSH
34310: CALL 34422 0 1
// continue ;
34314: GO 34196
// end ; HackCheckCapturedStatus ( i ) ;
34316: LD_VAR 0 1
34320: PPUSH
34321: CALL 34867 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34325: LD_ADDR_VAR 0 2
34329: PUSH
34330: LD_INT 81
34332: PUSH
34333: LD_VAR 0 1
34337: PPUSH
34338: CALL_OW 255
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 33
34349: PUSH
34350: LD_INT 3
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 91
34359: PUSH
34360: LD_VAR 0 1
34364: PUSH
34365: LD_EXP 104
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 50
34377: PUSH
34378: EMPTY
34379: LIST
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: PPUSH
34387: CALL_OW 69
34391: ST_TO_ADDR
// if not tmp then
34392: LD_VAR 0 2
34396: NOT
34397: IFFALSE 34401
// continue ;
34399: GO 34196
// HackLink ( i , tmp ) ;
34401: LD_VAR 0 1
34405: PPUSH
34406: LD_VAR 0 2
34410: PPUSH
34411: CALL 34558 0 2
// end ;
34415: GO 34196
34417: POP
34418: POP
// end ;
34419: PPOPN 2
34421: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34422: LD_INT 0
34424: PPUSH
34425: PPUSH
34426: PPUSH
// if not hack in hackTanks then
34427: LD_VAR 0 1
34431: PUSH
34432: LD_EXP 101
34436: IN
34437: NOT
34438: IFFALSE 34442
// exit ;
34440: GO 34553
// index := GetElementIndex ( hackTanks , hack ) ;
34442: LD_ADDR_VAR 0 4
34446: PUSH
34447: LD_EXP 101
34451: PPUSH
34452: LD_VAR 0 1
34456: PPUSH
34457: CALL 43021 0 2
34461: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34462: LD_EXP 102
34466: PUSH
34467: LD_VAR 0 4
34471: ARRAY
34472: IFFALSE 34553
// begin for i in hackTanksCaptured [ index ] do
34474: LD_ADDR_VAR 0 3
34478: PUSH
34479: LD_EXP 102
34483: PUSH
34484: LD_VAR 0 4
34488: ARRAY
34489: PUSH
34490: FOR_IN
34491: IFFALSE 34517
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34493: LD_VAR 0 3
34497: PUSH
34498: LD_INT 1
34500: ARRAY
34501: PPUSH
34502: LD_VAR 0 3
34506: PUSH
34507: LD_INT 2
34509: ARRAY
34510: PPUSH
34511: CALL_OW 235
34515: GO 34490
34517: POP
34518: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34519: LD_ADDR_EXP 102
34523: PUSH
34524: LD_EXP 102
34528: PPUSH
34529: LD_VAR 0 4
34533: PPUSH
34534: EMPTY
34535: PPUSH
34536: CALL_OW 1
34540: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34541: LD_VAR 0 1
34545: PPUSH
34546: LD_INT 0
34548: PPUSH
34549: CALL_OW 505
// end ; end ;
34553: LD_VAR 0 2
34557: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34558: LD_INT 0
34560: PPUSH
34561: PPUSH
34562: PPUSH
// if not hack in hackTanks or not vehicles then
34563: LD_VAR 0 1
34567: PUSH
34568: LD_EXP 101
34572: IN
34573: NOT
34574: IFTRUE 34583
34576: PUSH
34577: LD_VAR 0 2
34581: NOT
34582: OR
34583: IFFALSE 34587
// exit ;
34585: GO 34862
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34587: LD_ADDR_VAR 0 2
34591: PUSH
34592: LD_VAR 0 1
34596: PPUSH
34597: LD_VAR 0 2
34601: PPUSH
34602: LD_INT 1
34604: PPUSH
34605: LD_INT 1
34607: PPUSH
34608: CALL 43673 0 4
34612: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34613: LD_ADDR_VAR 0 5
34617: PUSH
34618: LD_EXP 101
34622: PPUSH
34623: LD_VAR 0 1
34627: PPUSH
34628: CALL 43021 0 2
34632: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34633: LD_EXP 102
34637: PUSH
34638: LD_VAR 0 5
34642: ARRAY
34643: PUSH
34644: LD_EXP 103
34648: LESS
34649: IFFALSE 34838
// begin for i := 1 to vehicles do
34651: LD_ADDR_VAR 0 4
34655: PUSH
34656: DOUBLE
34657: LD_INT 1
34659: DEC
34660: ST_TO_ADDR
34661: LD_VAR 0 2
34665: PUSH
34666: FOR_TO
34667: IFFALSE 34836
// begin if hackTanksCaptured [ index ] = hackLimit then
34669: LD_EXP 102
34673: PUSH
34674: LD_VAR 0 5
34678: ARRAY
34679: PUSH
34680: LD_EXP 103
34684: EQUAL
34685: IFFALSE 34689
// break ;
34687: GO 34836
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34689: LD_ADDR_EXP 105
34693: PUSH
34694: LD_EXP 105
34698: PPUSH
34699: LD_VAR 0 5
34703: PPUSH
34704: LD_EXP 105
34708: PUSH
34709: LD_VAR 0 5
34713: ARRAY
34714: PUSH
34715: LD_INT 1
34717: PLUS
34718: PPUSH
34719: CALL_OW 1
34723: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34724: LD_ADDR_EXP 102
34728: PUSH
34729: LD_EXP 102
34733: PPUSH
34734: LD_VAR 0 5
34738: PUSH
34739: LD_EXP 102
34743: PUSH
34744: LD_VAR 0 5
34748: ARRAY
34749: PUSH
34750: LD_INT 1
34752: PLUS
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PPUSH
34758: LD_VAR 0 2
34762: PUSH
34763: LD_VAR 0 4
34767: ARRAY
34768: PUSH
34769: LD_VAR 0 2
34773: PUSH
34774: LD_VAR 0 4
34778: ARRAY
34779: PPUSH
34780: CALL_OW 255
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PPUSH
34789: CALL 43238 0 3
34793: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34794: LD_VAR 0 2
34798: PUSH
34799: LD_VAR 0 4
34803: ARRAY
34804: PPUSH
34805: LD_VAR 0 1
34809: PPUSH
34810: CALL_OW 255
34814: PPUSH
34815: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34819: LD_VAR 0 2
34823: PUSH
34824: LD_VAR 0 4
34828: ARRAY
34829: PPUSH
34830: CALL_OW 141
// end ;
34834: GO 34666
34836: POP
34837: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34838: LD_VAR 0 1
34842: PPUSH
34843: LD_EXP 102
34847: PUSH
34848: LD_VAR 0 5
34852: ARRAY
34853: PUSH
34854: LD_INT 0
34856: PLUS
34857: PPUSH
34858: CALL_OW 505
// end ;
34862: LD_VAR 0 3
34866: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34867: LD_INT 0
34869: PPUSH
34870: PPUSH
34871: PPUSH
34872: PPUSH
// if not hack in hackTanks then
34873: LD_VAR 0 1
34877: PUSH
34878: LD_EXP 101
34882: IN
34883: NOT
34884: IFFALSE 34888
// exit ;
34886: GO 35132
// index := GetElementIndex ( hackTanks , hack ) ;
34888: LD_ADDR_VAR 0 4
34892: PUSH
34893: LD_EXP 101
34897: PPUSH
34898: LD_VAR 0 1
34902: PPUSH
34903: CALL 43021 0 2
34907: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34908: LD_ADDR_VAR 0 3
34912: PUSH
34913: DOUBLE
34914: LD_EXP 102
34918: PUSH
34919: LD_VAR 0 4
34923: ARRAY
34924: INC
34925: ST_TO_ADDR
34926: LD_INT 1
34928: PUSH
34929: FOR_DOWNTO
34930: IFFALSE 35106
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34932: LD_ADDR_VAR 0 5
34936: PUSH
34937: LD_EXP 102
34941: PUSH
34942: LD_VAR 0 4
34946: ARRAY
34947: PUSH
34948: LD_VAR 0 3
34952: ARRAY
34953: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34954: LD_VAR 0 5
34958: PUSH
34959: LD_INT 1
34961: ARRAY
34962: PPUSH
34963: CALL_OW 302
34967: NOT
34968: IFTRUE 34996
34970: PUSH
34971: LD_VAR 0 5
34975: PUSH
34976: LD_INT 1
34978: ARRAY
34979: PPUSH
34980: CALL_OW 255
34984: PUSH
34985: LD_VAR 0 1
34989: PPUSH
34990: CALL_OW 255
34994: NONEQUAL
34995: OR
34996: IFFALSE 35104
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34998: LD_VAR 0 5
35002: PUSH
35003: LD_INT 1
35005: ARRAY
35006: PPUSH
35007: CALL_OW 305
35011: IFFALSE 35039
35013: PUSH
35014: LD_VAR 0 5
35018: PUSH
35019: LD_INT 1
35021: ARRAY
35022: PPUSH
35023: CALL_OW 255
35027: PUSH
35028: LD_VAR 0 1
35032: PPUSH
35033: CALL_OW 255
35037: EQUAL
35038: AND
35039: IFFALSE 35063
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35041: LD_VAR 0 5
35045: PUSH
35046: LD_INT 1
35048: ARRAY
35049: PPUSH
35050: LD_VAR 0 5
35054: PUSH
35055: LD_INT 2
35057: ARRAY
35058: PPUSH
35059: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35063: LD_ADDR_EXP 102
35067: PUSH
35068: LD_EXP 102
35072: PPUSH
35073: LD_VAR 0 4
35077: PPUSH
35078: LD_EXP 102
35082: PUSH
35083: LD_VAR 0 4
35087: ARRAY
35088: PPUSH
35089: LD_VAR 0 3
35093: PPUSH
35094: CALL_OW 3
35098: PPUSH
35099: CALL_OW 1
35103: ST_TO_ADDR
// end ; end ;
35104: GO 34929
35106: POP
35107: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35108: LD_VAR 0 1
35112: PPUSH
35113: LD_EXP 102
35117: PUSH
35118: LD_VAR 0 4
35122: ARRAY
35123: PUSH
35124: LD_INT 0
35126: PLUS
35127: PPUSH
35128: CALL_OW 505
// end ;
35132: LD_VAR 0 2
35136: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35137: LD_INT 0
35139: PPUSH
35140: PPUSH
35141: PPUSH
35142: PPUSH
// if not hack in hackTanks then
35143: LD_VAR 0 1
35147: PUSH
35148: LD_EXP 101
35152: IN
35153: NOT
35154: IFFALSE 35158
// exit ;
35156: GO 35243
// index := GetElementIndex ( hackTanks , hack ) ;
35158: LD_ADDR_VAR 0 5
35162: PUSH
35163: LD_EXP 101
35167: PPUSH
35168: LD_VAR 0 1
35172: PPUSH
35173: CALL 43021 0 2
35177: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35178: LD_ADDR_VAR 0 4
35182: PUSH
35183: DOUBLE
35184: LD_INT 1
35186: DEC
35187: ST_TO_ADDR
35188: LD_EXP 102
35192: PUSH
35193: LD_VAR 0 5
35197: ARRAY
35198: PUSH
35199: FOR_TO
35200: IFFALSE 35241
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35202: LD_EXP 102
35206: PUSH
35207: LD_VAR 0 5
35211: ARRAY
35212: PUSH
35213: LD_VAR 0 4
35217: ARRAY
35218: PUSH
35219: LD_INT 1
35221: ARRAY
35222: PUSH
35223: LD_VAR 0 2
35227: EQUAL
35228: IFFALSE 35239
// KillUnit ( vehicle ) ;
35230: LD_VAR 0 2
35234: PPUSH
35235: CALL_OW 66
35239: GO 35199
35241: POP
35242: POP
// end ;
35243: LD_VAR 0 3
35247: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35248: LD_EXP 106
35252: NOT
35253: IFFALSE 35288
35255: GO 35257
35257: DISABLE
// begin initMiner := true ;
35258: LD_ADDR_EXP 106
35262: PUSH
35263: LD_INT 1
35265: ST_TO_ADDR
// minersList := [ ] ;
35266: LD_ADDR_EXP 107
35270: PUSH
35271: EMPTY
35272: ST_TO_ADDR
// minerMinesList := [ ] ;
35273: LD_ADDR_EXP 108
35277: PUSH
35278: EMPTY
35279: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35280: LD_ADDR_EXP 109
35284: PUSH
35285: LD_INT 5
35287: ST_TO_ADDR
// end ;
35288: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35289: LD_EXP 106
35293: IFFALSE 35311
35295: PUSH
35296: LD_INT 34
35298: PUSH
35299: LD_INT 81
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PPUSH
35306: CALL_OW 69
35310: AND
35311: IFFALSE 35774
35313: GO 35315
35315: DISABLE
35316: LD_INT 0
35318: PPUSH
35319: PPUSH
35320: PPUSH
35321: PPUSH
// begin enable ;
35322: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35323: LD_ADDR_VAR 0 1
35327: PUSH
35328: LD_INT 34
35330: PUSH
35331: LD_INT 81
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PPUSH
35338: CALL_OW 69
35342: PUSH
35343: FOR_IN
35344: IFFALSE 35416
// begin if not i in minersList then
35346: LD_VAR 0 1
35350: PUSH
35351: LD_EXP 107
35355: IN
35356: NOT
35357: IFFALSE 35414
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35359: LD_ADDR_EXP 107
35363: PUSH
35364: LD_EXP 107
35368: PPUSH
35369: LD_EXP 107
35373: PUSH
35374: LD_INT 1
35376: PLUS
35377: PPUSH
35378: LD_VAR 0 1
35382: PPUSH
35383: CALL_OW 1
35387: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35388: LD_ADDR_EXP 108
35392: PUSH
35393: LD_EXP 108
35397: PPUSH
35398: LD_EXP 108
35402: PUSH
35403: LD_INT 1
35405: PLUS
35406: PPUSH
35407: EMPTY
35408: PPUSH
35409: CALL_OW 1
35413: ST_TO_ADDR
// end end ;
35414: GO 35343
35416: POP
35417: POP
// for i := minerMinesList downto 1 do
35418: LD_ADDR_VAR 0 1
35422: PUSH
35423: DOUBLE
35424: LD_EXP 108
35428: INC
35429: ST_TO_ADDR
35430: LD_INT 1
35432: PUSH
35433: FOR_DOWNTO
35434: IFFALSE 35772
// begin if IsLive ( minersList [ i ] ) then
35436: LD_EXP 107
35440: PUSH
35441: LD_VAR 0 1
35445: ARRAY
35446: PPUSH
35447: CALL_OW 300
35451: IFFALSE 35479
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35453: LD_EXP 107
35457: PUSH
35458: LD_VAR 0 1
35462: ARRAY
35463: PPUSH
35464: LD_EXP 108
35468: PUSH
35469: LD_VAR 0 1
35473: ARRAY
35474: PPUSH
35475: CALL_OW 505
// if not minerMinesList [ i ] then
35479: LD_EXP 108
35483: PUSH
35484: LD_VAR 0 1
35488: ARRAY
35489: NOT
35490: IFFALSE 35494
// continue ;
35492: GO 35433
// for j := minerMinesList [ i ] downto 1 do
35494: LD_ADDR_VAR 0 2
35498: PUSH
35499: DOUBLE
35500: LD_EXP 108
35504: PUSH
35505: LD_VAR 0 1
35509: ARRAY
35510: INC
35511: ST_TO_ADDR
35512: LD_INT 1
35514: PUSH
35515: FOR_DOWNTO
35516: IFFALSE 35768
// begin side := GetSide ( minersList [ i ] ) ;
35518: LD_ADDR_VAR 0 3
35522: PUSH
35523: LD_EXP 107
35527: PUSH
35528: LD_VAR 0 1
35532: ARRAY
35533: PPUSH
35534: CALL_OW 255
35538: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35539: LD_ADDR_VAR 0 4
35543: PUSH
35544: LD_EXP 108
35548: PUSH
35549: LD_VAR 0 1
35553: ARRAY
35554: PUSH
35555: LD_VAR 0 2
35559: ARRAY
35560: PUSH
35561: LD_INT 1
35563: ARRAY
35564: PPUSH
35565: LD_EXP 108
35569: PUSH
35570: LD_VAR 0 1
35574: ARRAY
35575: PUSH
35576: LD_VAR 0 2
35580: ARRAY
35581: PUSH
35582: LD_INT 2
35584: ARRAY
35585: PPUSH
35586: CALL_OW 428
35590: ST_TO_ADDR
// if not tmp then
35591: LD_VAR 0 4
35595: NOT
35596: IFFALSE 35600
// continue ;
35598: GO 35515
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35600: LD_VAR 0 4
35604: PUSH
35605: LD_INT 81
35607: PUSH
35608: LD_VAR 0 3
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PPUSH
35617: CALL_OW 69
35621: IN
35622: IFFALSE 35672
35624: PUSH
35625: LD_EXP 108
35629: PUSH
35630: LD_VAR 0 1
35634: ARRAY
35635: PUSH
35636: LD_VAR 0 2
35640: ARRAY
35641: PUSH
35642: LD_INT 1
35644: ARRAY
35645: PPUSH
35646: LD_EXP 108
35650: PUSH
35651: LD_VAR 0 1
35655: ARRAY
35656: PUSH
35657: LD_VAR 0 2
35661: ARRAY
35662: PUSH
35663: LD_INT 2
35665: ARRAY
35666: PPUSH
35667: CALL_OW 458
35671: AND
35672: IFFALSE 35766
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35674: LD_EXP 108
35678: PUSH
35679: LD_VAR 0 1
35683: ARRAY
35684: PUSH
35685: LD_VAR 0 2
35689: ARRAY
35690: PUSH
35691: LD_INT 1
35693: ARRAY
35694: PPUSH
35695: LD_EXP 108
35699: PUSH
35700: LD_VAR 0 1
35704: ARRAY
35705: PUSH
35706: LD_VAR 0 2
35710: ARRAY
35711: PUSH
35712: LD_INT 2
35714: ARRAY
35715: PPUSH
35716: LD_VAR 0 3
35720: PPUSH
35721: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35725: LD_ADDR_EXP 108
35729: PUSH
35730: LD_EXP 108
35734: PPUSH
35735: LD_VAR 0 1
35739: PPUSH
35740: LD_EXP 108
35744: PUSH
35745: LD_VAR 0 1
35749: ARRAY
35750: PPUSH
35751: LD_VAR 0 2
35755: PPUSH
35756: CALL_OW 3
35760: PPUSH
35761: CALL_OW 1
35765: ST_TO_ADDR
// end ; end ;
35766: GO 35515
35768: POP
35769: POP
// end ;
35770: GO 35433
35772: POP
35773: POP
// end ;
35774: PPOPN 4
35776: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35777: LD_INT 0
35779: PPUSH
35780: PPUSH
// result := false ;
35781: LD_ADDR_VAR 0 4
35785: PUSH
35786: LD_INT 0
35788: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35789: LD_VAR 0 1
35793: PPUSH
35794: CALL_OW 264
35798: PUSH
35799: LD_INT 81
35801: EQUAL
35802: NOT
35803: IFFALSE 35807
// exit ;
35805: GO 36051
// index := GetElementIndex ( minersList , unit ) ;
35807: LD_ADDR_VAR 0 5
35811: PUSH
35812: LD_EXP 107
35816: PPUSH
35817: LD_VAR 0 1
35821: PPUSH
35822: CALL 43021 0 2
35826: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35827: LD_EXP 108
35831: PUSH
35832: LD_VAR 0 5
35836: ARRAY
35837: PUSH
35838: LD_EXP 109
35842: GREATEREQUAL
35843: IFFALSE 35847
// exit ;
35845: GO 36051
// ComMoveXY ( unit , x , y ) ;
35847: LD_VAR 0 1
35851: PPUSH
35852: LD_VAR 0 2
35856: PPUSH
35857: LD_VAR 0 3
35861: PPUSH
35862: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35866: LD_INT 35
35868: PPUSH
35869: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35873: LD_VAR 0 1
35877: PPUSH
35878: LD_VAR 0 2
35882: PPUSH
35883: LD_VAR 0 3
35887: PPUSH
35888: CALL 75067 0 3
35892: NOT
35893: IFFALSE 35906
35895: PUSH
35896: LD_VAR 0 1
35900: PPUSH
35901: CALL_OW 314
35905: AND
35906: IFFALSE 35910
// exit ;
35908: GO 36051
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35910: LD_VAR 0 2
35914: PPUSH
35915: LD_VAR 0 3
35919: PPUSH
35920: CALL_OW 428
35924: PUSH
35925: LD_VAR 0 1
35929: EQUAL
35930: IFFALSE 35944
35932: PUSH
35933: LD_VAR 0 1
35937: PPUSH
35938: CALL_OW 314
35942: NOT
35943: AND
35944: IFFALSE 35866
// PlaySoundXY ( x , y , PlantMine ) ;
35946: LD_VAR 0 2
35950: PPUSH
35951: LD_VAR 0 3
35955: PPUSH
35956: LD_STRING PlantMine
35958: PPUSH
35959: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35963: LD_VAR 0 2
35967: PPUSH
35968: LD_VAR 0 3
35972: PPUSH
35973: LD_VAR 0 1
35977: PPUSH
35978: CALL_OW 255
35982: PPUSH
35983: LD_INT 0
35985: PPUSH
35986: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35990: LD_ADDR_EXP 108
35994: PUSH
35995: LD_EXP 108
35999: PPUSH
36000: LD_VAR 0 5
36004: PUSH
36005: LD_EXP 108
36009: PUSH
36010: LD_VAR 0 5
36014: ARRAY
36015: PUSH
36016: LD_INT 1
36018: PLUS
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PPUSH
36024: LD_VAR 0 2
36028: PUSH
36029: LD_VAR 0 3
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PPUSH
36038: CALL 43238 0 3
36042: ST_TO_ADDR
// result := true ;
36043: LD_ADDR_VAR 0 4
36047: PUSH
36048: LD_INT 1
36050: ST_TO_ADDR
// end ;
36051: LD_VAR 0 4
36055: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36056: LD_INT 0
36058: PPUSH
36059: PPUSH
36060: PPUSH
// if not unit in minersList then
36061: LD_VAR 0 1
36065: PUSH
36066: LD_EXP 107
36070: IN
36071: NOT
36072: IFFALSE 36076
// exit ;
36074: GO 36470
// index := GetElementIndex ( minersList , unit ) ;
36076: LD_ADDR_VAR 0 6
36080: PUSH
36081: LD_EXP 107
36085: PPUSH
36086: LD_VAR 0 1
36090: PPUSH
36091: CALL 43021 0 2
36095: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36096: LD_ADDR_VAR 0 5
36100: PUSH
36101: DOUBLE
36102: LD_EXP 108
36106: PUSH
36107: LD_VAR 0 6
36111: ARRAY
36112: INC
36113: ST_TO_ADDR
36114: LD_INT 1
36116: PUSH
36117: FOR_DOWNTO
36118: IFFALSE 36281
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36120: LD_EXP 108
36124: PUSH
36125: LD_VAR 0 6
36129: ARRAY
36130: PUSH
36131: LD_VAR 0 5
36135: ARRAY
36136: PUSH
36137: LD_INT 1
36139: ARRAY
36140: PUSH
36141: LD_VAR 0 2
36145: EQUAL
36146: IFFALSE 36176
36148: PUSH
36149: LD_EXP 108
36153: PUSH
36154: LD_VAR 0 6
36158: ARRAY
36159: PUSH
36160: LD_VAR 0 5
36164: ARRAY
36165: PUSH
36166: LD_INT 2
36168: ARRAY
36169: PUSH
36170: LD_VAR 0 3
36174: EQUAL
36175: AND
36176: IFFALSE 36279
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36178: LD_EXP 108
36182: PUSH
36183: LD_VAR 0 6
36187: ARRAY
36188: PUSH
36189: LD_VAR 0 5
36193: ARRAY
36194: PUSH
36195: LD_INT 1
36197: ARRAY
36198: PPUSH
36199: LD_EXP 108
36203: PUSH
36204: LD_VAR 0 6
36208: ARRAY
36209: PUSH
36210: LD_VAR 0 5
36214: ARRAY
36215: PUSH
36216: LD_INT 2
36218: ARRAY
36219: PPUSH
36220: LD_VAR 0 1
36224: PPUSH
36225: CALL_OW 255
36229: PPUSH
36230: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36234: LD_ADDR_EXP 108
36238: PUSH
36239: LD_EXP 108
36243: PPUSH
36244: LD_VAR 0 6
36248: PPUSH
36249: LD_EXP 108
36253: PUSH
36254: LD_VAR 0 6
36258: ARRAY
36259: PPUSH
36260: LD_VAR 0 5
36264: PPUSH
36265: CALL_OW 3
36269: PPUSH
36270: CALL_OW 1
36274: ST_TO_ADDR
// exit ;
36275: POP
36276: POP
36277: GO 36470
// end ; end ;
36279: GO 36117
36281: POP
36282: POP
// for i := minerMinesList [ index ] downto 1 do
36283: LD_ADDR_VAR 0 5
36287: PUSH
36288: DOUBLE
36289: LD_EXP 108
36293: PUSH
36294: LD_VAR 0 6
36298: ARRAY
36299: INC
36300: ST_TO_ADDR
36301: LD_INT 1
36303: PUSH
36304: FOR_DOWNTO
36305: IFFALSE 36468
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36307: LD_EXP 108
36311: PUSH
36312: LD_VAR 0 6
36316: ARRAY
36317: PUSH
36318: LD_VAR 0 5
36322: ARRAY
36323: PUSH
36324: LD_INT 1
36326: ARRAY
36327: PPUSH
36328: LD_EXP 108
36332: PUSH
36333: LD_VAR 0 6
36337: ARRAY
36338: PUSH
36339: LD_VAR 0 5
36343: ARRAY
36344: PUSH
36345: LD_INT 2
36347: ARRAY
36348: PPUSH
36349: LD_VAR 0 2
36353: PPUSH
36354: LD_VAR 0 3
36358: PPUSH
36359: CALL_OW 298
36363: PUSH
36364: LD_INT 6
36366: LESS
36367: IFFALSE 36466
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36369: LD_EXP 108
36373: PUSH
36374: LD_VAR 0 6
36378: ARRAY
36379: PUSH
36380: LD_VAR 0 5
36384: ARRAY
36385: PUSH
36386: LD_INT 1
36388: ARRAY
36389: PPUSH
36390: LD_EXP 108
36394: PUSH
36395: LD_VAR 0 6
36399: ARRAY
36400: PUSH
36401: LD_VAR 0 5
36405: ARRAY
36406: PUSH
36407: LD_INT 2
36409: ARRAY
36410: PPUSH
36411: LD_VAR 0 1
36415: PPUSH
36416: CALL_OW 255
36420: PPUSH
36421: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36425: LD_ADDR_EXP 108
36429: PUSH
36430: LD_EXP 108
36434: PPUSH
36435: LD_VAR 0 6
36439: PPUSH
36440: LD_EXP 108
36444: PUSH
36445: LD_VAR 0 6
36449: ARRAY
36450: PPUSH
36451: LD_VAR 0 5
36455: PPUSH
36456: CALL_OW 3
36460: PPUSH
36461: CALL_OW 1
36465: ST_TO_ADDR
// end ; end ;
36466: GO 36304
36468: POP
36469: POP
// end ;
36470: LD_VAR 0 4
36474: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36475: LD_INT 0
36477: PPUSH
36478: PPUSH
36479: PPUSH
36480: PPUSH
36481: PPUSH
36482: PPUSH
36483: PPUSH
36484: PPUSH
36485: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36486: LD_VAR 0 1
36490: PPUSH
36491: CALL_OW 264
36495: PUSH
36496: LD_INT 81
36498: EQUAL
36499: NOT
36500: IFTRUE 36515
36502: PUSH
36503: LD_VAR 0 1
36507: PUSH
36508: LD_EXP 107
36512: IN
36513: NOT
36514: OR
36515: IFFALSE 36519
// exit ;
36517: GO 36845
// index := GetElementIndex ( minersList , unit ) ;
36519: LD_ADDR_VAR 0 6
36523: PUSH
36524: LD_EXP 107
36528: PPUSH
36529: LD_VAR 0 1
36533: PPUSH
36534: CALL 43021 0 2
36538: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36539: LD_ADDR_VAR 0 8
36543: PUSH
36544: LD_EXP 109
36548: PUSH
36549: LD_EXP 108
36553: PUSH
36554: LD_VAR 0 6
36558: ARRAY
36559: MINUS
36560: ST_TO_ADDR
// if not minesFreeAmount then
36561: LD_VAR 0 8
36565: NOT
36566: IFFALSE 36570
// exit ;
36568: GO 36845
// tmp := [ ] ;
36570: LD_ADDR_VAR 0 7
36574: PUSH
36575: EMPTY
36576: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36577: LD_ADDR_VAR 0 5
36581: PUSH
36582: DOUBLE
36583: LD_INT 1
36585: DEC
36586: ST_TO_ADDR
36587: LD_VAR 0 8
36591: PUSH
36592: FOR_TO
36593: IFFALSE 36792
// begin _d := rand ( 0 , 5 ) ;
36595: LD_ADDR_VAR 0 11
36599: PUSH
36600: LD_INT 0
36602: PPUSH
36603: LD_INT 5
36605: PPUSH
36606: CALL_OW 12
36610: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36611: LD_ADDR_VAR 0 12
36615: PUSH
36616: LD_INT 2
36618: PPUSH
36619: LD_INT 6
36621: PPUSH
36622: CALL_OW 12
36626: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36627: LD_ADDR_VAR 0 9
36631: PUSH
36632: LD_VAR 0 2
36636: PPUSH
36637: LD_VAR 0 11
36641: PPUSH
36642: LD_VAR 0 12
36646: PPUSH
36647: CALL_OW 272
36651: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36652: LD_ADDR_VAR 0 10
36656: PUSH
36657: LD_VAR 0 3
36661: PPUSH
36662: LD_VAR 0 11
36666: PPUSH
36667: LD_VAR 0 12
36671: PPUSH
36672: CALL_OW 273
36676: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36677: LD_VAR 0 9
36681: PPUSH
36682: LD_VAR 0 10
36686: PPUSH
36687: CALL_OW 488
36691: IFFALSE 36715
36693: PUSH
36694: LD_VAR 0 9
36698: PUSH
36699: LD_VAR 0 10
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_VAR 0 7
36712: IN
36713: NOT
36714: AND
36715: IFFALSE 36734
36717: PUSH
36718: LD_VAR 0 9
36722: PPUSH
36723: LD_VAR 0 10
36727: PPUSH
36728: CALL_OW 458
36732: NOT
36733: AND
36734: IFFALSE 36776
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36736: LD_ADDR_VAR 0 7
36740: PUSH
36741: LD_VAR 0 7
36745: PPUSH
36746: LD_VAR 0 7
36750: PUSH
36751: LD_INT 1
36753: PLUS
36754: PPUSH
36755: LD_VAR 0 9
36759: PUSH
36760: LD_VAR 0 10
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PPUSH
36769: CALL_OW 1
36773: ST_TO_ADDR
36774: GO 36790
// i := i - 1 ;
36776: LD_ADDR_VAR 0 5
36780: PUSH
36781: LD_VAR 0 5
36785: PUSH
36786: LD_INT 1
36788: MINUS
36789: ST_TO_ADDR
// end ;
36790: GO 36592
36792: POP
36793: POP
// for i in tmp do
36794: LD_ADDR_VAR 0 5
36798: PUSH
36799: LD_VAR 0 7
36803: PUSH
36804: FOR_IN
36805: IFFALSE 36843
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36807: LD_VAR 0 1
36811: PPUSH
36812: LD_VAR 0 5
36816: PUSH
36817: LD_INT 1
36819: ARRAY
36820: PPUSH
36821: LD_VAR 0 5
36825: PUSH
36826: LD_INT 2
36828: ARRAY
36829: PPUSH
36830: CALL 35777 0 3
36834: NOT
36835: IFFALSE 36841
// exit ;
36837: POP
36838: POP
36839: GO 36845
36841: GO 36804
36843: POP
36844: POP
// end ;
36845: LD_VAR 0 4
36849: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
36850: LD_INT 0
36852: PPUSH
36853: PPUSH
36854: PPUSH
36855: PPUSH
36856: PPUSH
36857: PPUSH
36858: PPUSH
36859: PPUSH
36860: PPUSH
// if GetClass ( unit ) <> class_sniper then
36861: LD_VAR 0 1
36865: PPUSH
36866: CALL_OW 257
36870: PUSH
36871: LD_INT 5
36873: NONEQUAL
36874: IFFALSE 36878
// exit ;
36876: GO 37348
// dist := 8 ;
36878: LD_ADDR_VAR 0 5
36882: PUSH
36883: LD_INT 8
36885: ST_TO_ADDR
// viewRange := 12 ;
36886: LD_ADDR_VAR 0 8
36890: PUSH
36891: LD_INT 12
36893: ST_TO_ADDR
// side := GetSide ( unit ) ;
36894: LD_ADDR_VAR 0 6
36898: PUSH
36899: LD_VAR 0 1
36903: PPUSH
36904: CALL_OW 255
36908: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36909: LD_INT 61
36911: PPUSH
36912: LD_VAR 0 6
36916: PPUSH
36917: CALL_OW 321
36921: PUSH
36922: LD_INT 2
36924: EQUAL
36925: IFFALSE 36935
// viewRange := 16 ;
36927: LD_ADDR_VAR 0 8
36931: PUSH
36932: LD_INT 16
36934: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36935: LD_VAR 0 1
36939: PPUSH
36940: LD_VAR 0 2
36944: PPUSH
36945: LD_VAR 0 3
36949: PPUSH
36950: CALL_OW 297
36954: PUSH
36955: LD_VAR 0 5
36959: GREATER
36960: IFFALSE 37039
// begin ComMoveXY ( unit , x , y ) ;
36962: LD_VAR 0 1
36966: PPUSH
36967: LD_VAR 0 2
36971: PPUSH
36972: LD_VAR 0 3
36976: PPUSH
36977: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36981: LD_INT 35
36983: PPUSH
36984: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36988: LD_VAR 0 1
36992: PPUSH
36993: LD_VAR 0 2
36997: PPUSH
36998: LD_VAR 0 3
37002: PPUSH
37003: CALL 75067 0 3
37007: NOT
37008: IFFALSE 37012
// exit ;
37010: GO 37348
// until GetDistUnitXY ( unit , x , y ) < dist ;
37012: LD_VAR 0 1
37016: PPUSH
37017: LD_VAR 0 2
37021: PPUSH
37022: LD_VAR 0 3
37026: PPUSH
37027: CALL_OW 297
37031: PUSH
37032: LD_VAR 0 5
37036: LESS
37037: IFFALSE 36981
// end ; ComTurnXY ( unit , x , y ) ;
37039: LD_VAR 0 1
37043: PPUSH
37044: LD_VAR 0 2
37048: PPUSH
37049: LD_VAR 0 3
37053: PPUSH
37054: CALL_OW 118
// repeat if Multiplayer then
37058: LD_OWVAR 4
37062: IFFALSE 37073
// wait ( 35 ) else
37064: LD_INT 35
37066: PPUSH
37067: CALL_OW 67
37071: GO 37080
// wait ( 5 ) ;
37073: LD_INT 5
37075: PPUSH
37076: CALL_OW 67
// _d := GetDir ( unit ) ;
37080: LD_ADDR_VAR 0 11
37084: PUSH
37085: LD_VAR 0 1
37089: PPUSH
37090: CALL_OW 254
37094: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
37095: LD_ADDR_VAR 0 7
37099: PUSH
37100: LD_VAR 0 1
37104: PPUSH
37105: CALL_OW 250
37109: PPUSH
37110: LD_VAR 0 1
37114: PPUSH
37115: CALL_OW 251
37119: PPUSH
37120: LD_VAR 0 2
37124: PPUSH
37125: LD_VAR 0 3
37129: PPUSH
37130: CALL 77703 0 4
37134: ST_TO_ADDR
// until dir = _d ;
37135: LD_VAR 0 7
37139: PUSH
37140: LD_VAR 0 11
37144: EQUAL
37145: IFFALSE 37058
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
37147: LD_ADDR_VAR 0 9
37151: PUSH
37152: LD_VAR 0 1
37156: PPUSH
37157: CALL_OW 250
37161: PPUSH
37162: LD_VAR 0 7
37166: PPUSH
37167: LD_VAR 0 5
37171: PPUSH
37172: CALL_OW 272
37176: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
37177: LD_ADDR_VAR 0 10
37181: PUSH
37182: LD_VAR 0 1
37186: PPUSH
37187: CALL_OW 251
37191: PPUSH
37192: LD_VAR 0 7
37196: PPUSH
37197: LD_VAR 0 5
37201: PPUSH
37202: CALL_OW 273
37206: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37207: LD_VAR 0 9
37211: PPUSH
37212: LD_VAR 0 10
37216: PPUSH
37217: CALL_OW 488
37221: NOT
37222: IFFALSE 37226
// exit ;
37224: GO 37348
// ComAnimCustom ( unit , 1 ) ;
37226: LD_VAR 0 1
37230: PPUSH
37231: LD_INT 1
37233: PPUSH
37234: CALL_OW 592
// p := 0 ;
37238: LD_ADDR_VAR 0 12
37242: PUSH
37243: LD_INT 0
37245: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37246: LD_VAR 0 9
37250: PPUSH
37251: LD_VAR 0 10
37255: PPUSH
37256: LD_VAR 0 6
37260: PPUSH
37261: LD_VAR 0 8
37265: PPUSH
37266: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
37270: LD_INT 35
37272: PPUSH
37273: CALL_OW 67
// p := Inc ( p ) ;
37277: LD_ADDR_VAR 0 12
37281: PUSH
37282: LD_VAR 0 12
37286: PPUSH
37287: CALL 77659 0 1
37291: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
37292: LD_VAR 0 12
37296: PUSH
37297: LD_INT 3
37299: EQUAL
37300: IFTRUE 37314
37302: PUSH
37303: LD_VAR 0 1
37307: PPUSH
37308: CALL_OW 302
37312: NOT
37313: OR
37314: IFTRUE 37327
37316: PUSH
37317: LD_VAR 0 1
37321: PPUSH
37322: CALL_OW 301
37326: OR
37327: IFFALSE 37270
// RemoveSeeing ( _x , _y , side ) ;
37329: LD_VAR 0 9
37333: PPUSH
37334: LD_VAR 0 10
37338: PPUSH
37339: LD_VAR 0 6
37343: PPUSH
37344: CALL_OW 331
// end ;
37348: LD_VAR 0 4
37352: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
37353: LD_INT 0
37355: PPUSH
37356: PPUSH
37357: PPUSH
37358: PPUSH
37359: PPUSH
37360: PPUSH
37361: PPUSH
37362: PPUSH
37363: PPUSH
37364: PPUSH
37365: PPUSH
// if not unit then
37366: LD_VAR 0 1
37370: NOT
37371: IFFALSE 37375
// exit ;
37373: GO 37646
// side := GetSide ( unit ) ;
37375: LD_ADDR_VAR 0 3
37379: PUSH
37380: LD_VAR 0 1
37384: PPUSH
37385: CALL_OW 255
37389: ST_TO_ADDR
// x := GetX ( unit ) ;
37390: LD_ADDR_VAR 0 5
37394: PUSH
37395: LD_VAR 0 1
37399: PPUSH
37400: CALL_OW 250
37404: ST_TO_ADDR
// y := GetY ( unit ) ;
37405: LD_ADDR_VAR 0 6
37409: PUSH
37410: LD_VAR 0 1
37414: PPUSH
37415: CALL_OW 251
37419: ST_TO_ADDR
// r := 8 ;
37420: LD_ADDR_VAR 0 4
37424: PUSH
37425: LD_INT 8
37427: ST_TO_ADDR
// if x - r < 0 then
37428: LD_VAR 0 5
37432: PUSH
37433: LD_VAR 0 4
37437: MINUS
37438: PUSH
37439: LD_INT 0
37441: LESS
37442: IFFALSE 37454
// min_x := 0 else
37444: LD_ADDR_VAR 0 7
37448: PUSH
37449: LD_INT 0
37451: ST_TO_ADDR
37452: GO 37470
// min_x := x - r ;
37454: LD_ADDR_VAR 0 7
37458: PUSH
37459: LD_VAR 0 5
37463: PUSH
37464: LD_VAR 0 4
37468: MINUS
37469: ST_TO_ADDR
// if y - r < 0 then
37470: LD_VAR 0 6
37474: PUSH
37475: LD_VAR 0 4
37479: MINUS
37480: PUSH
37481: LD_INT 0
37483: LESS
37484: IFFALSE 37496
// min_y := 0 else
37486: LD_ADDR_VAR 0 8
37490: PUSH
37491: LD_INT 0
37493: ST_TO_ADDR
37494: GO 37512
// min_y := y - r ;
37496: LD_ADDR_VAR 0 8
37500: PUSH
37501: LD_VAR 0 6
37505: PUSH
37506: LD_VAR 0 4
37510: MINUS
37511: ST_TO_ADDR
// max_x := x + r ;
37512: LD_ADDR_VAR 0 9
37516: PUSH
37517: LD_VAR 0 5
37521: PUSH
37522: LD_VAR 0 4
37526: PLUS
37527: ST_TO_ADDR
// max_y := y + r ;
37528: LD_ADDR_VAR 0 10
37532: PUSH
37533: LD_VAR 0 6
37537: PUSH
37538: LD_VAR 0 4
37542: PLUS
37543: ST_TO_ADDR
// for _x = min_x to max_x do
37544: LD_ADDR_VAR 0 11
37548: PUSH
37549: DOUBLE
37550: LD_VAR 0 7
37554: DEC
37555: ST_TO_ADDR
37556: LD_VAR 0 9
37560: PUSH
37561: FOR_TO
37562: IFFALSE 37644
// for _y = min_y to max_y do
37564: LD_ADDR_VAR 0 12
37568: PUSH
37569: DOUBLE
37570: LD_VAR 0 8
37574: DEC
37575: ST_TO_ADDR
37576: LD_VAR 0 10
37580: PUSH
37581: FOR_TO
37582: IFFALSE 37640
// begin if not ValidHex ( _x , _y ) then
37584: LD_VAR 0 11
37588: PPUSH
37589: LD_VAR 0 12
37593: PPUSH
37594: CALL_OW 488
37598: NOT
37599: IFFALSE 37603
// continue ;
37601: GO 37581
// if MineAtPos ( _x , _y ) then
37603: LD_VAR 0 11
37607: PPUSH
37608: LD_VAR 0 12
37612: PPUSH
37613: CALL_OW 458
37617: IFFALSE 37638
// ViewMineAtPos ( _x , _y , side ) ;
37619: LD_VAR 0 11
37623: PPUSH
37624: LD_VAR 0 12
37628: PPUSH
37629: LD_VAR 0 3
37633: PPUSH
37634: CALL_OW 457
// end ;
37638: GO 37581
37640: POP
37641: POP
37642: GO 37561
37644: POP
37645: POP
// end ;
37646: LD_VAR 0 2
37650: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
37651: LD_INT 0
37653: PPUSH
37654: PPUSH
37655: PPUSH
37656: PPUSH
37657: PPUSH
37658: PPUSH
// if not units then
37659: LD_VAR 0 1
37663: NOT
37664: IFFALSE 37668
// exit ;
37666: GO 38098
// scaners := [ ] ;
37668: LD_ADDR_VAR 0 6
37672: PUSH
37673: EMPTY
37674: ST_TO_ADDR
// for i in units do
37675: LD_ADDR_VAR 0 3
37679: PUSH
37680: LD_VAR 0 1
37684: PUSH
37685: FOR_IN
37686: IFFALSE 37843
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
37688: LD_VAR 0 3
37692: PPUSH
37693: CALL_OW 264
37697: PUSH
37698: LD_INT 11
37700: NONEQUAL
37701: IFTRUE 37715
37703: PUSH
37704: LD_VAR 0 3
37708: PPUSH
37709: CALL_OW 302
37713: NOT
37714: OR
37715: IFTRUE 37732
37717: PUSH
37718: LD_VAR 0 3
37722: PPUSH
37723: CALL_OW 110
37727: PUSH
37728: LD_INT 502
37730: EQUAL
37731: OR
37732: IFFALSE 37736
// continue ;
37734: GO 37685
// ComStop ( i ) ;
37736: LD_VAR 0 3
37740: PPUSH
37741: CALL_OW 141
// x := GetX ( i ) ;
37745: LD_ADDR_VAR 0 4
37749: PUSH
37750: LD_VAR 0 3
37754: PPUSH
37755: CALL_OW 250
37759: ST_TO_ADDR
// y := GetY ( i ) ;
37760: LD_ADDR_VAR 0 5
37764: PUSH
37765: LD_VAR 0 3
37769: PPUSH
37770: CALL_OW 251
37774: ST_TO_ADDR
// if GetSide ( i ) = your_side then
37775: LD_VAR 0 3
37779: PPUSH
37780: CALL_OW 255
37784: PUSH
37785: LD_OWVAR 2
37789: EQUAL
37790: IFFALSE 37809
// PlaySoundXY ( x , y , mineDetector ) ;
37792: LD_VAR 0 4
37796: PPUSH
37797: LD_VAR 0 5
37801: PPUSH
37802: LD_STRING mineDetector
37804: PPUSH
37805: CALL_OW 366
// scaners := Join ( scaners , i ) ;
37809: LD_ADDR_VAR 0 6
37813: PUSH
37814: LD_VAR 0 6
37818: PPUSH
37819: LD_VAR 0 3
37823: PPUSH
37824: CALL 76286 0 2
37828: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
37829: LD_VAR 0 3
37833: PPUSH
37834: LD_INT 502
37836: PPUSH
37837: CALL_OW 109
// end ;
37841: GO 37685
37843: POP
37844: POP
// if not scaners then
37845: LD_VAR 0 6
37849: NOT
37850: IFFALSE 37854
// exit ;
37852: GO 38098
// wait ( 3 ) ;
37854: LD_INT 3
37856: PPUSH
37857: CALL_OW 67
// timer := 6 ;
37861: LD_ADDR_VAR 0 7
37865: PUSH
37866: LD_INT 6
37868: ST_TO_ADDR
// repeat for i in scaners do
37869: LD_ADDR_VAR 0 3
37873: PUSH
37874: LD_VAR 0 6
37878: PUSH
37879: FOR_IN
37880: IFFALSE 37996
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
37882: LD_VAR 0 3
37886: PPUSH
37887: CALL_OW 302
37891: NOT
37892: IFTRUE 37905
37894: PUSH
37895: LD_VAR 0 3
37899: PPUSH
37900: CALL_OW 314
37904: OR
37905: IFTRUE 37936
37907: PUSH
37908: LD_VAR 0 3
37912: PPUSH
37913: CALL_OW 263
37917: PUSH
37918: LD_INT 1
37920: EQUAL
37921: IFFALSE 37935
37923: PUSH
37924: LD_VAR 0 3
37928: PPUSH
37929: CALL_OW 311
37933: NOT
37934: AND
37935: OR
37936: IFFALSE 37980
// begin SetUnitDisplayNumber ( i , 0 ) ;
37938: LD_VAR 0 3
37942: PPUSH
37943: LD_INT 0
37945: PPUSH
37946: CALL_OW 505
// SetTag ( i , 0 ) ;
37950: LD_VAR 0 3
37954: PPUSH
37955: LD_INT 0
37957: PPUSH
37958: CALL_OW 109
// scaners := scaners diff i ;
37962: LD_ADDR_VAR 0 6
37966: PUSH
37967: LD_VAR 0 6
37971: PUSH
37972: LD_VAR 0 3
37976: DIFF
37977: ST_TO_ADDR
// continue ;
37978: GO 37879
// end ; SetUnitDisplayNumber ( i , timer ) ;
37980: LD_VAR 0 3
37984: PPUSH
37985: LD_VAR 0 7
37989: PPUSH
37990: CALL_OW 505
// end ;
37994: GO 37879
37996: POP
37997: POP
// if not scaners then
37998: LD_VAR 0 6
38002: NOT
38003: IFFALSE 38007
// exit ;
38005: GO 38098
// timer := Dec ( timer ) ;
38007: LD_ADDR_VAR 0 7
38011: PUSH
38012: LD_VAR 0 7
38016: PPUSH
38017: CALL 77681 0 1
38021: ST_TO_ADDR
// wait ( 0 0$1 ) ;
38022: LD_INT 35
38024: PPUSH
38025: CALL_OW 67
// until timer = 0 ;
38029: LD_VAR 0 7
38033: PUSH
38034: LD_INT 0
38036: EQUAL
38037: IFFALSE 37869
// if not scaners then
38039: LD_VAR 0 6
38043: NOT
38044: IFFALSE 38048
// exit ;
38046: GO 38098
// for i in scaners do
38048: LD_ADDR_VAR 0 3
38052: PUSH
38053: LD_VAR 0 6
38057: PUSH
38058: FOR_IN
38059: IFFALSE 38096
// begin SetUnitDisplayNumber ( i , 0 ) ;
38061: LD_VAR 0 3
38065: PPUSH
38066: LD_INT 0
38068: PPUSH
38069: CALL_OW 505
// SetTag ( i , 0 ) ;
38073: LD_VAR 0 3
38077: PPUSH
38078: LD_INT 0
38080: PPUSH
38081: CALL_OW 109
// RevealDetectorMine ( i ) ;
38085: LD_VAR 0 3
38089: PPUSH
38090: CALL 37353 0 1
// end ;
38094: GO 38058
38096: POP
38097: POP
// end ;
38098: LD_VAR 0 2
38102: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
38103: LD_INT 0
38105: PPUSH
// if p1 = mine_detector_mode then
38106: LD_VAR 0 2
38110: PUSH
38111: LD_INT 103
38113: EQUAL
38114: IFFALSE 38125
// DetectMine ( units ) ;
38116: LD_VAR 0 1
38120: PPUSH
38121: CALL 37651 0 1
// end ; end_of_file
38125: LD_VAR 0 7
38129: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38130: LD_INT 0
38132: PPUSH
38133: PPUSH
// if exist_mode then
38134: LD_VAR 0 2
38138: IFFALSE 38184
// begin unit := CreateCharacter ( prefix & ident ) ;
38140: LD_ADDR_VAR 0 5
38144: PUSH
38145: LD_VAR 0 3
38149: PUSH
38150: LD_VAR 0 1
38154: STR
38155: PPUSH
38156: CALL_OW 34
38160: ST_TO_ADDR
// if unit then
38161: LD_VAR 0 5
38165: IFFALSE 38182
// DeleteCharacters ( prefix & ident ) ;
38167: LD_VAR 0 3
38171: PUSH
38172: LD_VAR 0 1
38176: STR
38177: PPUSH
38178: CALL_OW 40
// end else
38182: GO 38199
// unit := NewCharacter ( ident ) ;
38184: LD_ADDR_VAR 0 5
38188: PUSH
38189: LD_VAR 0 1
38193: PPUSH
38194: CALL_OW 25
38198: ST_TO_ADDR
// result := unit ;
38199: LD_ADDR_VAR 0 4
38203: PUSH
38204: LD_VAR 0 5
38208: ST_TO_ADDR
// end ;
38209: LD_VAR 0 4
38213: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
38214: LD_INT 0
38216: PPUSH
38217: PPUSH
// if exist_mode then
38218: LD_VAR 0 2
38222: IFFALSE 38247
// unit := CreateCharacter ( prefix & ident ) else
38224: LD_ADDR_VAR 0 5
38228: PUSH
38229: LD_VAR 0 3
38233: PUSH
38234: LD_VAR 0 1
38238: STR
38239: PPUSH
38240: CALL_OW 34
38244: ST_TO_ADDR
38245: GO 38262
// unit := NewCharacter ( ident ) ;
38247: LD_ADDR_VAR 0 5
38251: PUSH
38252: LD_VAR 0 1
38256: PPUSH
38257: CALL_OW 25
38261: ST_TO_ADDR
// result := unit ;
38262: LD_ADDR_VAR 0 4
38266: PUSH
38267: LD_VAR 0 5
38271: ST_TO_ADDR
// end ;
38272: LD_VAR 0 4
38276: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38277: LD_INT 0
38279: PPUSH
38280: PPUSH
// if not side or not nation then
38281: LD_VAR 0 1
38285: NOT
38286: IFTRUE 38295
38288: PUSH
38289: LD_VAR 0 2
38293: NOT
38294: OR
38295: IFFALSE 38299
// exit ;
38297: GO 39093
// case nation of nation_american :
38299: LD_VAR 0 2
38303: PUSH
38304: LD_INT 1
38306: DOUBLE
38307: EQUAL
38308: IFTRUE 38312
38310: GO 38534
38312: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
38313: LD_ADDR_VAR 0 4
38317: PUSH
38318: LD_INT 35
38320: PUSH
38321: LD_INT 45
38323: PUSH
38324: LD_INT 46
38326: PUSH
38327: LD_INT 47
38329: PUSH
38330: LD_INT 82
38332: PUSH
38333: LD_INT 83
38335: PUSH
38336: LD_INT 84
38338: PUSH
38339: LD_INT 85
38341: PUSH
38342: LD_INT 86
38344: PUSH
38345: LD_INT 1
38347: PUSH
38348: LD_INT 2
38350: PUSH
38351: LD_INT 6
38353: PUSH
38354: LD_INT 15
38356: PUSH
38357: LD_INT 16
38359: PUSH
38360: LD_INT 7
38362: PUSH
38363: LD_INT 12
38365: PUSH
38366: LD_INT 13
38368: PUSH
38369: LD_INT 10
38371: PUSH
38372: LD_INT 14
38374: PUSH
38375: LD_INT 20
38377: PUSH
38378: LD_INT 21
38380: PUSH
38381: LD_INT 22
38383: PUSH
38384: LD_INT 25
38386: PUSH
38387: LD_INT 32
38389: PUSH
38390: LD_INT 27
38392: PUSH
38393: LD_INT 36
38395: PUSH
38396: LD_INT 69
38398: PUSH
38399: LD_INT 39
38401: PUSH
38402: LD_INT 34
38404: PUSH
38405: LD_INT 40
38407: PUSH
38408: LD_INT 48
38410: PUSH
38411: LD_INT 49
38413: PUSH
38414: LD_INT 50
38416: PUSH
38417: LD_INT 51
38419: PUSH
38420: LD_INT 52
38422: PUSH
38423: LD_INT 53
38425: PUSH
38426: LD_INT 54
38428: PUSH
38429: LD_INT 55
38431: PUSH
38432: LD_INT 56
38434: PUSH
38435: LD_INT 57
38437: PUSH
38438: LD_INT 58
38440: PUSH
38441: LD_INT 59
38443: PUSH
38444: LD_INT 60
38446: PUSH
38447: LD_INT 61
38449: PUSH
38450: LD_INT 62
38452: PUSH
38453: LD_INT 80
38455: PUSH
38456: LD_INT 82
38458: PUSH
38459: LD_INT 83
38461: PUSH
38462: LD_INT 84
38464: PUSH
38465: LD_INT 85
38467: PUSH
38468: LD_INT 86
38470: PUSH
38471: LD_INT 90
38473: PUSH
38474: LD_INT 93
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: ST_TO_ADDR
38532: GO 39015
38534: LD_INT 2
38536: DOUBLE
38537: EQUAL
38538: IFTRUE 38542
38540: GO 38776
38542: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
38543: LD_ADDR_VAR 0 4
38547: PUSH
38548: LD_INT 35
38550: PUSH
38551: LD_INT 45
38553: PUSH
38554: LD_INT 46
38556: PUSH
38557: LD_INT 47
38559: PUSH
38560: LD_INT 82
38562: PUSH
38563: LD_INT 83
38565: PUSH
38566: LD_INT 84
38568: PUSH
38569: LD_INT 85
38571: PUSH
38572: LD_INT 87
38574: PUSH
38575: LD_INT 70
38577: PUSH
38578: LD_INT 1
38580: PUSH
38581: LD_INT 11
38583: PUSH
38584: LD_INT 3
38586: PUSH
38587: LD_INT 4
38589: PUSH
38590: LD_INT 5
38592: PUSH
38593: LD_INT 6
38595: PUSH
38596: LD_INT 15
38598: PUSH
38599: LD_INT 18
38601: PUSH
38602: LD_INT 7
38604: PUSH
38605: LD_INT 17
38607: PUSH
38608: LD_INT 8
38610: PUSH
38611: LD_INT 20
38613: PUSH
38614: LD_INT 21
38616: PUSH
38617: LD_INT 22
38619: PUSH
38620: LD_INT 72
38622: PUSH
38623: LD_INT 26
38625: PUSH
38626: LD_INT 69
38628: PUSH
38629: LD_INT 39
38631: PUSH
38632: LD_INT 40
38634: PUSH
38635: LD_INT 41
38637: PUSH
38638: LD_INT 42
38640: PUSH
38641: LD_INT 43
38643: PUSH
38644: LD_INT 48
38646: PUSH
38647: LD_INT 49
38649: PUSH
38650: LD_INT 50
38652: PUSH
38653: LD_INT 51
38655: PUSH
38656: LD_INT 52
38658: PUSH
38659: LD_INT 53
38661: PUSH
38662: LD_INT 54
38664: PUSH
38665: LD_INT 55
38667: PUSH
38668: LD_INT 56
38670: PUSH
38671: LD_INT 60
38673: PUSH
38674: LD_INT 61
38676: PUSH
38677: LD_INT 62
38679: PUSH
38680: LD_INT 66
38682: PUSH
38683: LD_INT 67
38685: PUSH
38686: LD_INT 68
38688: PUSH
38689: LD_INT 81
38691: PUSH
38692: LD_INT 82
38694: PUSH
38695: LD_INT 83
38697: PUSH
38698: LD_INT 84
38700: PUSH
38701: LD_INT 85
38703: PUSH
38704: LD_INT 87
38706: PUSH
38707: LD_INT 88
38709: PUSH
38710: LD_INT 92
38712: PUSH
38713: LD_INT 94
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: ST_TO_ADDR
38774: GO 39015
38776: LD_INT 3
38778: DOUBLE
38779: EQUAL
38780: IFTRUE 38784
38782: GO 39014
38784: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
38785: LD_ADDR_VAR 0 4
38789: PUSH
38790: LD_INT 46
38792: PUSH
38793: LD_INT 47
38795: PUSH
38796: LD_INT 1
38798: PUSH
38799: LD_INT 2
38801: PUSH
38802: LD_INT 82
38804: PUSH
38805: LD_INT 83
38807: PUSH
38808: LD_INT 84
38810: PUSH
38811: LD_INT 85
38813: PUSH
38814: LD_INT 86
38816: PUSH
38817: LD_INT 11
38819: PUSH
38820: LD_INT 9
38822: PUSH
38823: LD_INT 20
38825: PUSH
38826: LD_INT 19
38828: PUSH
38829: LD_INT 21
38831: PUSH
38832: LD_INT 24
38834: PUSH
38835: LD_INT 22
38837: PUSH
38838: LD_INT 25
38840: PUSH
38841: LD_INT 28
38843: PUSH
38844: LD_INT 29
38846: PUSH
38847: LD_INT 30
38849: PUSH
38850: LD_INT 31
38852: PUSH
38853: LD_INT 37
38855: PUSH
38856: LD_INT 38
38858: PUSH
38859: LD_INT 32
38861: PUSH
38862: LD_INT 27
38864: PUSH
38865: LD_INT 33
38867: PUSH
38868: LD_INT 69
38870: PUSH
38871: LD_INT 39
38873: PUSH
38874: LD_INT 34
38876: PUSH
38877: LD_INT 40
38879: PUSH
38880: LD_INT 71
38882: PUSH
38883: LD_INT 23
38885: PUSH
38886: LD_INT 44
38888: PUSH
38889: LD_INT 48
38891: PUSH
38892: LD_INT 49
38894: PUSH
38895: LD_INT 50
38897: PUSH
38898: LD_INT 51
38900: PUSH
38901: LD_INT 52
38903: PUSH
38904: LD_INT 53
38906: PUSH
38907: LD_INT 54
38909: PUSH
38910: LD_INT 55
38912: PUSH
38913: LD_INT 56
38915: PUSH
38916: LD_INT 57
38918: PUSH
38919: LD_INT 58
38921: PUSH
38922: LD_INT 59
38924: PUSH
38925: LD_INT 63
38927: PUSH
38928: LD_INT 64
38930: PUSH
38931: LD_INT 65
38933: PUSH
38934: LD_INT 82
38936: PUSH
38937: LD_INT 83
38939: PUSH
38940: LD_INT 84
38942: PUSH
38943: LD_INT 85
38945: PUSH
38946: LD_INT 86
38948: PUSH
38949: LD_INT 89
38951: PUSH
38952: LD_INT 91
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: ST_TO_ADDR
39012: GO 39015
39014: POP
// if state > - 1 and state < 3 then
39015: LD_VAR 0 3
39019: PUSH
39020: LD_INT 1
39022: NEG
39023: GREATER
39024: IFFALSE 39036
39026: PUSH
39027: LD_VAR 0 3
39031: PUSH
39032: LD_INT 3
39034: LESS
39035: AND
39036: IFFALSE 39093
// for i in result do
39038: LD_ADDR_VAR 0 5
39042: PUSH
39043: LD_VAR 0 4
39047: PUSH
39048: FOR_IN
39049: IFFALSE 39091
// if GetTech ( i , side ) <> state then
39051: LD_VAR 0 5
39055: PPUSH
39056: LD_VAR 0 1
39060: PPUSH
39061: CALL_OW 321
39065: PUSH
39066: LD_VAR 0 3
39070: NONEQUAL
39071: IFFALSE 39089
// result := result diff i ;
39073: LD_ADDR_VAR 0 4
39077: PUSH
39078: LD_VAR 0 4
39082: PUSH
39083: LD_VAR 0 5
39087: DIFF
39088: ST_TO_ADDR
39089: GO 39048
39091: POP
39092: POP
// end ;
39093: LD_VAR 0 4
39097: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39098: LD_INT 0
39100: PPUSH
39101: PPUSH
39102: PPUSH
// result := true ;
39103: LD_ADDR_VAR 0 3
39107: PUSH
39108: LD_INT 1
39110: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39111: LD_ADDR_VAR 0 5
39115: PUSH
39116: LD_VAR 0 2
39120: PPUSH
39121: CALL_OW 480
39125: ST_TO_ADDR
// if not tmp then
39126: LD_VAR 0 5
39130: NOT
39131: IFFALSE 39135
// exit ;
39133: GO 39184
// for i in tmp do
39135: LD_ADDR_VAR 0 4
39139: PUSH
39140: LD_VAR 0 5
39144: PUSH
39145: FOR_IN
39146: IFFALSE 39182
// if GetTech ( i , side ) <> state_researched then
39148: LD_VAR 0 4
39152: PPUSH
39153: LD_VAR 0 1
39157: PPUSH
39158: CALL_OW 321
39162: PUSH
39163: LD_INT 2
39165: NONEQUAL
39166: IFFALSE 39180
// begin result := false ;
39168: LD_ADDR_VAR 0 3
39172: PUSH
39173: LD_INT 0
39175: ST_TO_ADDR
// exit ;
39176: POP
39177: POP
39178: GO 39184
// end ;
39180: GO 39145
39182: POP
39183: POP
// end ;
39184: LD_VAR 0 3
39188: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39189: LD_INT 0
39191: PPUSH
39192: PPUSH
39193: PPUSH
39194: PPUSH
39195: PPUSH
39196: PPUSH
39197: PPUSH
39198: PPUSH
39199: PPUSH
39200: PPUSH
39201: PPUSH
39202: PPUSH
39203: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39204: LD_VAR 0 1
39208: NOT
39209: IFTRUE 39226
39211: PUSH
39212: LD_VAR 0 1
39216: PPUSH
39217: CALL_OW 257
39221: PUSH
39222: LD_INT 9
39224: NONEQUAL
39225: OR
39226: IFFALSE 39230
// exit ;
39228: GO 39809
// side := GetSide ( unit ) ;
39230: LD_ADDR_VAR 0 9
39234: PUSH
39235: LD_VAR 0 1
39239: PPUSH
39240: CALL_OW 255
39244: ST_TO_ADDR
// tech_space := tech_spacanom ;
39245: LD_ADDR_VAR 0 12
39249: PUSH
39250: LD_INT 29
39252: ST_TO_ADDR
// tech_time := tech_taurad ;
39253: LD_ADDR_VAR 0 13
39257: PUSH
39258: LD_INT 28
39260: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39261: LD_ADDR_VAR 0 11
39265: PUSH
39266: LD_VAR 0 1
39270: PPUSH
39271: CALL_OW 310
39275: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39276: LD_VAR 0 11
39280: PPUSH
39281: CALL_OW 247
39285: PUSH
39286: LD_INT 2
39288: EQUAL
39289: IFFALSE 39293
// exit ;
39291: GO 39809
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39293: LD_ADDR_VAR 0 8
39297: PUSH
39298: LD_INT 81
39300: PUSH
39301: LD_VAR 0 9
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 3
39312: PUSH
39313: LD_INT 21
39315: PUSH
39316: LD_INT 3
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PPUSH
39331: CALL_OW 69
39335: ST_TO_ADDR
// if not tmp then
39336: LD_VAR 0 8
39340: NOT
39341: IFFALSE 39345
// exit ;
39343: GO 39809
// if in_unit then
39345: LD_VAR 0 11
39349: IFFALSE 39373
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39351: LD_ADDR_VAR 0 10
39355: PUSH
39356: LD_VAR 0 8
39360: PPUSH
39361: LD_VAR 0 11
39365: PPUSH
39366: CALL_OW 74
39370: ST_TO_ADDR
39371: GO 39393
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39373: LD_ADDR_VAR 0 10
39377: PUSH
39378: LD_VAR 0 8
39382: PPUSH
39383: LD_VAR 0 1
39387: PPUSH
39388: CALL_OW 74
39392: ST_TO_ADDR
// if not enemy then
39393: LD_VAR 0 10
39397: NOT
39398: IFFALSE 39402
// exit ;
39400: GO 39809
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39402: LD_VAR 0 11
39406: IFFALSE 39428
39408: PUSH
39409: LD_VAR 0 11
39413: PPUSH
39414: LD_VAR 0 10
39418: PPUSH
39419: CALL_OW 296
39423: PUSH
39424: LD_INT 13
39426: GREATER
39427: AND
39428: IFTRUE 39450
39430: PUSH
39431: LD_VAR 0 1
39435: PPUSH
39436: LD_VAR 0 10
39440: PPUSH
39441: CALL_OW 296
39445: PUSH
39446: LD_INT 12
39448: GREATER
39449: OR
39450: IFFALSE 39454
// exit ;
39452: GO 39809
// missile := [ 1 ] ;
39454: LD_ADDR_VAR 0 14
39458: PUSH
39459: LD_INT 1
39461: PUSH
39462: EMPTY
39463: LIST
39464: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39465: LD_VAR 0 9
39469: PPUSH
39470: LD_VAR 0 12
39474: PPUSH
39475: CALL_OW 325
39479: IFFALSE 39508
// missile := Replace ( missile , missile + 1 , 2 ) ;
39481: LD_ADDR_VAR 0 14
39485: PUSH
39486: LD_VAR 0 14
39490: PPUSH
39491: LD_VAR 0 14
39495: PUSH
39496: LD_INT 1
39498: PLUS
39499: PPUSH
39500: LD_INT 2
39502: PPUSH
39503: CALL_OW 1
39507: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39508: LD_VAR 0 9
39512: PPUSH
39513: LD_VAR 0 13
39517: PPUSH
39518: CALL_OW 325
39522: IFFALSE 39546
39524: PUSH
39525: LD_VAR 0 10
39529: PPUSH
39530: CALL_OW 255
39534: PPUSH
39535: LD_VAR 0 13
39539: PPUSH
39540: CALL_OW 325
39544: NOT
39545: AND
39546: IFFALSE 39575
// missile := Replace ( missile , missile + 1 , 3 ) ;
39548: LD_ADDR_VAR 0 14
39552: PUSH
39553: LD_VAR 0 14
39557: PPUSH
39558: LD_VAR 0 14
39562: PUSH
39563: LD_INT 1
39565: PLUS
39566: PPUSH
39567: LD_INT 3
39569: PPUSH
39570: CALL_OW 1
39574: ST_TO_ADDR
// if missile < 2 then
39575: LD_VAR 0 14
39579: PUSH
39580: LD_INT 2
39582: LESS
39583: IFFALSE 39587
// exit ;
39585: GO 39809
// x := GetX ( enemy ) ;
39587: LD_ADDR_VAR 0 4
39591: PUSH
39592: LD_VAR 0 10
39596: PPUSH
39597: CALL_OW 250
39601: ST_TO_ADDR
// y := GetY ( enemy ) ;
39602: LD_ADDR_VAR 0 5
39606: PUSH
39607: LD_VAR 0 10
39611: PPUSH
39612: CALL_OW 251
39616: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39617: LD_ADDR_VAR 0 6
39621: PUSH
39622: LD_VAR 0 4
39626: PUSH
39627: LD_INT 1
39629: NEG
39630: PPUSH
39631: LD_INT 1
39633: PPUSH
39634: CALL_OW 12
39638: PLUS
39639: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39640: LD_ADDR_VAR 0 7
39644: PUSH
39645: LD_VAR 0 5
39649: PUSH
39650: LD_INT 1
39652: NEG
39653: PPUSH
39654: LD_INT 1
39656: PPUSH
39657: CALL_OW 12
39661: PLUS
39662: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39663: LD_VAR 0 6
39667: PPUSH
39668: LD_VAR 0 7
39672: PPUSH
39673: CALL_OW 488
39677: NOT
39678: IFFALSE 39700
// begin _x := x ;
39680: LD_ADDR_VAR 0 6
39684: PUSH
39685: LD_VAR 0 4
39689: ST_TO_ADDR
// _y := y ;
39690: LD_ADDR_VAR 0 7
39694: PUSH
39695: LD_VAR 0 5
39699: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39700: LD_ADDR_VAR 0 3
39704: PUSH
39705: LD_INT 1
39707: PPUSH
39708: LD_VAR 0 14
39712: PPUSH
39713: CALL_OW 12
39717: ST_TO_ADDR
// case i of 1 :
39718: LD_VAR 0 3
39722: PUSH
39723: LD_INT 1
39725: DOUBLE
39726: EQUAL
39727: IFTRUE 39731
39729: GO 39748
39731: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39732: LD_VAR 0 1
39736: PPUSH
39737: LD_VAR 0 10
39741: PPUSH
39742: CALL_OW 115
39746: GO 39809
39748: LD_INT 2
39750: DOUBLE
39751: EQUAL
39752: IFTRUE 39756
39754: GO 39778
39756: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39757: LD_VAR 0 1
39761: PPUSH
39762: LD_VAR 0 6
39766: PPUSH
39767: LD_VAR 0 7
39771: PPUSH
39772: CALL_OW 153
39776: GO 39809
39778: LD_INT 3
39780: DOUBLE
39781: EQUAL
39782: IFTRUE 39786
39784: GO 39808
39786: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39787: LD_VAR 0 1
39791: PPUSH
39792: LD_VAR 0 6
39796: PPUSH
39797: LD_VAR 0 7
39801: PPUSH
39802: CALL_OW 154
39806: GO 39809
39808: POP
// end ;
39809: LD_VAR 0 2
39813: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39814: LD_INT 0
39816: PPUSH
39817: PPUSH
39818: PPUSH
39819: PPUSH
39820: PPUSH
39821: PPUSH
// if not unit or not building then
39822: LD_VAR 0 1
39826: NOT
39827: IFTRUE 39836
39829: PUSH
39830: LD_VAR 0 2
39834: NOT
39835: OR
39836: IFFALSE 39840
// exit ;
39838: GO 39998
// x := GetX ( building ) ;
39840: LD_ADDR_VAR 0 5
39844: PUSH
39845: LD_VAR 0 2
39849: PPUSH
39850: CALL_OW 250
39854: ST_TO_ADDR
// y := GetY ( building ) ;
39855: LD_ADDR_VAR 0 6
39859: PUSH
39860: LD_VAR 0 2
39864: PPUSH
39865: CALL_OW 251
39869: ST_TO_ADDR
// for i := 0 to 5 do
39870: LD_ADDR_VAR 0 4
39874: PUSH
39875: DOUBLE
39876: LD_INT 0
39878: DEC
39879: ST_TO_ADDR
39880: LD_INT 5
39882: PUSH
39883: FOR_TO
39884: IFFALSE 39996
// begin _x := ShiftX ( x , i , 3 ) ;
39886: LD_ADDR_VAR 0 7
39890: PUSH
39891: LD_VAR 0 5
39895: PPUSH
39896: LD_VAR 0 4
39900: PPUSH
39901: LD_INT 3
39903: PPUSH
39904: CALL_OW 272
39908: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39909: LD_ADDR_VAR 0 8
39913: PUSH
39914: LD_VAR 0 6
39918: PPUSH
39919: LD_VAR 0 4
39923: PPUSH
39924: LD_INT 3
39926: PPUSH
39927: CALL_OW 273
39931: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39932: LD_VAR 0 7
39936: PPUSH
39937: LD_VAR 0 8
39941: PPUSH
39942: CALL_OW 488
39946: NOT
39947: IFFALSE 39951
// continue ;
39949: GO 39883
// if HexInfo ( _x , _y ) = 0 then
39951: LD_VAR 0 7
39955: PPUSH
39956: LD_VAR 0 8
39960: PPUSH
39961: CALL_OW 428
39965: PUSH
39966: LD_INT 0
39968: EQUAL
39969: IFFALSE 39994
// begin ComMoveXY ( unit , _x , _y ) ;
39971: LD_VAR 0 1
39975: PPUSH
39976: LD_VAR 0 7
39980: PPUSH
39981: LD_VAR 0 8
39985: PPUSH
39986: CALL_OW 111
// exit ;
39990: POP
39991: POP
39992: GO 39998
// end ; end ;
39994: GO 39883
39996: POP
39997: POP
// end ;
39998: LD_VAR 0 3
40002: RET
// export function ScanBase ( side , base_area ) ; begin
40003: LD_INT 0
40005: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40006: LD_ADDR_VAR 0 3
40010: PUSH
40011: LD_VAR 0 2
40015: PPUSH
40016: LD_INT 81
40018: PUSH
40019: LD_VAR 0 1
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PPUSH
40028: CALL_OW 70
40032: ST_TO_ADDR
// end ;
40033: LD_VAR 0 3
40037: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40038: LD_INT 0
40040: PPUSH
40041: PPUSH
40042: PPUSH
40043: PPUSH
// result := false ;
40044: LD_ADDR_VAR 0 2
40048: PUSH
40049: LD_INT 0
40051: ST_TO_ADDR
// side := GetSide ( unit ) ;
40052: LD_ADDR_VAR 0 3
40056: PUSH
40057: LD_VAR 0 1
40061: PPUSH
40062: CALL_OW 255
40066: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40067: LD_ADDR_VAR 0 4
40071: PUSH
40072: LD_VAR 0 1
40076: PPUSH
40077: CALL_OW 248
40081: ST_TO_ADDR
// case nat of 1 :
40082: LD_VAR 0 4
40086: PUSH
40087: LD_INT 1
40089: DOUBLE
40090: EQUAL
40091: IFTRUE 40095
40093: GO 40106
40095: POP
// tech := tech_lassight ; 2 :
40096: LD_ADDR_VAR 0 5
40100: PUSH
40101: LD_INT 12
40103: ST_TO_ADDR
40104: GO 40145
40106: LD_INT 2
40108: DOUBLE
40109: EQUAL
40110: IFTRUE 40114
40112: GO 40125
40114: POP
// tech := tech_mortar ; 3 :
40115: LD_ADDR_VAR 0 5
40119: PUSH
40120: LD_INT 41
40122: ST_TO_ADDR
40123: GO 40145
40125: LD_INT 3
40127: DOUBLE
40128: EQUAL
40129: IFTRUE 40133
40131: GO 40144
40133: POP
// tech := tech_bazooka ; end ;
40134: LD_ADDR_VAR 0 5
40138: PUSH
40139: LD_INT 44
40141: ST_TO_ADDR
40142: GO 40145
40144: POP
// if Researched ( side , tech ) then
40145: LD_VAR 0 3
40149: PPUSH
40150: LD_VAR 0 5
40154: PPUSH
40155: CALL_OW 325
40159: IFFALSE 40186
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40161: LD_ADDR_VAR 0 2
40165: PUSH
40166: LD_INT 5
40168: PUSH
40169: LD_INT 8
40171: PUSH
40172: LD_INT 9
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: LIST
40179: PUSH
40180: LD_VAR 0 4
40184: ARRAY
40185: ST_TO_ADDR
// end ;
40186: LD_VAR 0 2
40190: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40191: LD_INT 0
40193: PPUSH
40194: PPUSH
40195: PPUSH
// if not mines then
40196: LD_VAR 0 2
40200: NOT
40201: IFFALSE 40205
// exit ;
40203: GO 40349
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40205: LD_ADDR_VAR 0 5
40209: PUSH
40210: LD_INT 81
40212: PUSH
40213: LD_VAR 0 1
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 3
40224: PUSH
40225: LD_INT 21
40227: PUSH
40228: LD_INT 3
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PPUSH
40243: CALL_OW 69
40247: ST_TO_ADDR
// for i in mines do
40248: LD_ADDR_VAR 0 4
40252: PUSH
40253: LD_VAR 0 2
40257: PUSH
40258: FOR_IN
40259: IFFALSE 40347
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40261: LD_VAR 0 4
40265: PUSH
40266: LD_INT 1
40268: ARRAY
40269: PPUSH
40270: LD_VAR 0 4
40274: PUSH
40275: LD_INT 2
40277: ARRAY
40278: PPUSH
40279: CALL_OW 458
40283: NOT
40284: IFFALSE 40288
// continue ;
40286: GO 40258
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40288: LD_VAR 0 4
40292: PUSH
40293: LD_INT 1
40295: ARRAY
40296: PPUSH
40297: LD_VAR 0 4
40301: PUSH
40302: LD_INT 2
40304: ARRAY
40305: PPUSH
40306: CALL_OW 428
40310: PUSH
40311: LD_VAR 0 5
40315: IN
40316: IFFALSE 40345
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40318: LD_VAR 0 4
40322: PUSH
40323: LD_INT 1
40325: ARRAY
40326: PPUSH
40327: LD_VAR 0 4
40331: PUSH
40332: LD_INT 2
40334: ARRAY
40335: PPUSH
40336: LD_VAR 0 1
40340: PPUSH
40341: CALL_OW 456
// end ;
40345: GO 40258
40347: POP
40348: POP
// end ;
40349: LD_VAR 0 3
40353: RET
// export function Count ( array ) ; begin
40354: LD_INT 0
40356: PPUSH
// result := array + 0 ;
40357: LD_ADDR_VAR 0 2
40361: PUSH
40362: LD_VAR 0 1
40366: PUSH
40367: LD_INT 0
40369: PLUS
40370: ST_TO_ADDR
// end ;
40371: LD_VAR 0 2
40375: RET
// export function IsEmpty ( building ) ; begin
40376: LD_INT 0
40378: PPUSH
// if not building then
40379: LD_VAR 0 1
40383: NOT
40384: IFFALSE 40388
// exit ;
40386: GO 40431
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40388: LD_ADDR_VAR 0 2
40392: PUSH
40393: LD_VAR 0 1
40397: PUSH
40398: LD_INT 22
40400: PUSH
40401: LD_VAR 0 1
40405: PPUSH
40406: CALL_OW 255
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 58
40417: PUSH
40418: EMPTY
40419: LIST
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PPUSH
40425: CALL_OW 69
40429: IN
40430: ST_TO_ADDR
// end ;
40431: LD_VAR 0 2
40435: RET
// export function IsNotFull ( building ) ; var places ; begin
40436: LD_INT 0
40438: PPUSH
40439: PPUSH
// if not building then
40440: LD_VAR 0 1
40444: NOT
40445: IFFALSE 40449
// exit ;
40447: GO 40477
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
40449: LD_ADDR_VAR 0 2
40453: PUSH
40454: LD_VAR 0 1
40458: PPUSH
40459: LD_INT 3
40461: PUSH
40462: LD_INT 62
40464: PUSH
40465: EMPTY
40466: LIST
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PPUSH
40472: CALL_OW 72
40476: ST_TO_ADDR
// end ;
40477: LD_VAR 0 2
40481: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40482: LD_INT 0
40484: PPUSH
40485: PPUSH
40486: PPUSH
40487: PPUSH
// tmp := [ ] ;
40488: LD_ADDR_VAR 0 3
40492: PUSH
40493: EMPTY
40494: ST_TO_ADDR
// list := [ ] ;
40495: LD_ADDR_VAR 0 5
40499: PUSH
40500: EMPTY
40501: ST_TO_ADDR
// for i = 16 to 25 do
40502: LD_ADDR_VAR 0 4
40506: PUSH
40507: DOUBLE
40508: LD_INT 16
40510: DEC
40511: ST_TO_ADDR
40512: LD_INT 25
40514: PUSH
40515: FOR_TO
40516: IFFALSE 40589
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40518: LD_ADDR_VAR 0 3
40522: PUSH
40523: LD_VAR 0 3
40527: PUSH
40528: LD_INT 22
40530: PUSH
40531: LD_VAR 0 1
40535: PPUSH
40536: CALL_OW 255
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 91
40547: PUSH
40548: LD_VAR 0 1
40552: PUSH
40553: LD_INT 6
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 30
40563: PUSH
40564: LD_VAR 0 4
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: LIST
40577: PUSH
40578: EMPTY
40579: LIST
40580: PPUSH
40581: CALL_OW 69
40585: ADD
40586: ST_TO_ADDR
40587: GO 40515
40589: POP
40590: POP
// for i = 1 to tmp do
40591: LD_ADDR_VAR 0 4
40595: PUSH
40596: DOUBLE
40597: LD_INT 1
40599: DEC
40600: ST_TO_ADDR
40601: LD_VAR 0 3
40605: PUSH
40606: FOR_TO
40607: IFFALSE 40695
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40609: LD_ADDR_VAR 0 5
40613: PUSH
40614: LD_VAR 0 5
40618: PUSH
40619: LD_VAR 0 3
40623: PUSH
40624: LD_VAR 0 4
40628: ARRAY
40629: PPUSH
40630: CALL_OW 266
40634: PUSH
40635: LD_VAR 0 3
40639: PUSH
40640: LD_VAR 0 4
40644: ARRAY
40645: PPUSH
40646: CALL_OW 250
40650: PUSH
40651: LD_VAR 0 3
40655: PUSH
40656: LD_VAR 0 4
40660: ARRAY
40661: PPUSH
40662: CALL_OW 251
40666: PUSH
40667: LD_VAR 0 3
40671: PUSH
40672: LD_VAR 0 4
40676: ARRAY
40677: PPUSH
40678: CALL_OW 254
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: PUSH
40689: EMPTY
40690: LIST
40691: ADD
40692: ST_TO_ADDR
40693: GO 40606
40695: POP
40696: POP
// result := list ;
40697: LD_ADDR_VAR 0 2
40701: PUSH
40702: LD_VAR 0 5
40706: ST_TO_ADDR
// end ;
40707: LD_VAR 0 2
40711: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40712: LD_INT 0
40714: PPUSH
40715: PPUSH
40716: PPUSH
40717: PPUSH
40718: PPUSH
40719: PPUSH
40720: PPUSH
// if not factory then
40721: LD_VAR 0 1
40725: NOT
40726: IFFALSE 40730
// exit ;
40728: GO 41333
// if control = control_apeman then
40730: LD_VAR 0 4
40734: PUSH
40735: LD_INT 5
40737: EQUAL
40738: IFFALSE 40847
// begin tmp := UnitsInside ( factory ) ;
40740: LD_ADDR_VAR 0 8
40744: PUSH
40745: LD_VAR 0 1
40749: PPUSH
40750: CALL_OW 313
40754: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40755: LD_VAR 0 8
40759: PPUSH
40760: LD_INT 25
40762: PUSH
40763: LD_INT 12
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PPUSH
40770: CALL_OW 72
40774: NOT
40775: IFFALSE 40785
// control := control_manual ;
40777: LD_ADDR_VAR 0 4
40781: PUSH
40782: LD_INT 1
40784: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40785: LD_ADDR_VAR 0 8
40789: PUSH
40790: LD_VAR 0 1
40794: PPUSH
40795: CALL 40482 0 1
40799: ST_TO_ADDR
// if tmp then
40800: LD_VAR 0 8
40804: IFFALSE 40847
// begin for i in tmp do
40806: LD_ADDR_VAR 0 7
40810: PUSH
40811: LD_VAR 0 8
40815: PUSH
40816: FOR_IN
40817: IFFALSE 40845
// if i [ 1 ] = b_ext_radio then
40819: LD_VAR 0 7
40823: PUSH
40824: LD_INT 1
40826: ARRAY
40827: PUSH
40828: LD_INT 22
40830: EQUAL
40831: IFFALSE 40843
// begin control := control_remote ;
40833: LD_ADDR_VAR 0 4
40837: PUSH
40838: LD_INT 2
40840: ST_TO_ADDR
// break ;
40841: GO 40845
// end ;
40843: GO 40816
40845: POP
40846: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40847: LD_VAR 0 1
40851: PPUSH
40852: LD_VAR 0 2
40856: PPUSH
40857: LD_VAR 0 3
40861: PPUSH
40862: LD_VAR 0 4
40866: PPUSH
40867: LD_VAR 0 5
40871: PPUSH
40872: CALL_OW 448
40876: IFFALSE 40911
// begin result := [ chassis , engine , control , weapon ] ;
40878: LD_ADDR_VAR 0 6
40882: PUSH
40883: LD_VAR 0 2
40887: PUSH
40888: LD_VAR 0 3
40892: PUSH
40893: LD_VAR 0 4
40897: PUSH
40898: LD_VAR 0 5
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: ST_TO_ADDR
// exit ;
40909: GO 41333
// end ; _chassis := AvailableChassisList ( factory ) ;
40911: LD_ADDR_VAR 0 9
40915: PUSH
40916: LD_VAR 0 1
40920: PPUSH
40921: CALL_OW 475
40925: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40926: LD_ADDR_VAR 0 11
40930: PUSH
40931: LD_VAR 0 1
40935: PPUSH
40936: CALL_OW 476
40940: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40941: LD_ADDR_VAR 0 12
40945: PUSH
40946: LD_VAR 0 1
40950: PPUSH
40951: CALL_OW 477
40955: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40956: LD_ADDR_VAR 0 10
40960: PUSH
40961: LD_VAR 0 1
40965: PPUSH
40966: CALL_OW 478
40970: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40971: LD_VAR 0 9
40975: NOT
40976: IFTRUE 40985
40978: PUSH
40979: LD_VAR 0 11
40983: NOT
40984: OR
40985: IFTRUE 40994
40987: PUSH
40988: LD_VAR 0 12
40992: NOT
40993: OR
40994: IFTRUE 41003
40996: PUSH
40997: LD_VAR 0 10
41001: NOT
41002: OR
41003: IFFALSE 41038
// begin result := [ chassis , engine , control , weapon ] ;
41005: LD_ADDR_VAR 0 6
41009: PUSH
41010: LD_VAR 0 2
41014: PUSH
41015: LD_VAR 0 3
41019: PUSH
41020: LD_VAR 0 4
41024: PUSH
41025: LD_VAR 0 5
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: ST_TO_ADDR
// exit ;
41036: GO 41333
// end ; if not chassis in _chassis then
41038: LD_VAR 0 2
41042: PUSH
41043: LD_VAR 0 9
41047: IN
41048: NOT
41049: IFFALSE 41075
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41051: LD_ADDR_VAR 0 2
41055: PUSH
41056: LD_VAR 0 9
41060: PUSH
41061: LD_INT 1
41063: PPUSH
41064: LD_VAR 0 9
41068: PPUSH
41069: CALL_OW 12
41073: ARRAY
41074: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41075: LD_VAR 0 2
41079: PPUSH
41080: LD_VAR 0 3
41084: PPUSH
41085: CALL 41338 0 2
41089: NOT
41090: IFFALSE 41151
// repeat engine := _engine [ 1 ] ;
41092: LD_ADDR_VAR 0 3
41096: PUSH
41097: LD_VAR 0 11
41101: PUSH
41102: LD_INT 1
41104: ARRAY
41105: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41106: LD_ADDR_VAR 0 11
41110: PUSH
41111: LD_VAR 0 11
41115: PPUSH
41116: LD_INT 1
41118: PPUSH
41119: CALL_OW 3
41123: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41124: LD_VAR 0 2
41128: PPUSH
41129: LD_VAR 0 3
41133: PPUSH
41134: CALL 41338 0 2
41138: IFTRUE 41149
41140: PUSH
41141: LD_VAR 0 11
41145: PUSH
41146: EMPTY
41147: EQUAL
41148: OR
41149: IFFALSE 41092
// if not control in _control then
41151: LD_VAR 0 4
41155: PUSH
41156: LD_VAR 0 12
41160: IN
41161: NOT
41162: IFFALSE 41188
// control := _control [ rand ( 1 , _control ) ] ;
41164: LD_ADDR_VAR 0 4
41168: PUSH
41169: LD_VAR 0 12
41173: PUSH
41174: LD_INT 1
41176: PPUSH
41177: LD_VAR 0 12
41181: PPUSH
41182: CALL_OW 12
41186: ARRAY
41187: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41188: LD_VAR 0 2
41192: PPUSH
41193: LD_VAR 0 5
41197: PPUSH
41198: CALL 41560 0 2
41202: NOT
41203: IFFALSE 41264
// repeat weapon := _weapon [ 1 ] ;
41205: LD_ADDR_VAR 0 5
41209: PUSH
41210: LD_VAR 0 10
41214: PUSH
41215: LD_INT 1
41217: ARRAY
41218: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41219: LD_ADDR_VAR 0 10
41223: PUSH
41224: LD_VAR 0 10
41228: PPUSH
41229: LD_INT 1
41231: PPUSH
41232: CALL_OW 3
41236: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41237: LD_VAR 0 2
41241: PPUSH
41242: LD_VAR 0 5
41246: PPUSH
41247: CALL 41560 0 2
41251: IFTRUE 41262
41253: PUSH
41254: LD_VAR 0 10
41258: PUSH
41259: EMPTY
41260: EQUAL
41261: OR
41262: IFFALSE 41205
// result := [ ] ;
41264: LD_ADDR_VAR 0 6
41268: PUSH
41269: EMPTY
41270: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41271: LD_VAR 0 1
41275: PPUSH
41276: LD_VAR 0 2
41280: PPUSH
41281: LD_VAR 0 3
41285: PPUSH
41286: LD_VAR 0 4
41290: PPUSH
41291: LD_VAR 0 5
41295: PPUSH
41296: CALL_OW 448
41300: IFFALSE 41333
// result := [ chassis , engine , control , weapon ] ;
41302: LD_ADDR_VAR 0 6
41306: PUSH
41307: LD_VAR 0 2
41311: PUSH
41312: LD_VAR 0 3
41316: PUSH
41317: LD_VAR 0 4
41321: PUSH
41322: LD_VAR 0 5
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: ST_TO_ADDR
// end ;
41333: LD_VAR 0 6
41337: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41338: LD_INT 0
41340: PPUSH
// if not chassis or not engine then
41341: LD_VAR 0 1
41345: NOT
41346: IFTRUE 41355
41348: PUSH
41349: LD_VAR 0 2
41353: NOT
41354: OR
41355: IFFALSE 41359
// exit ;
41357: GO 41555
// case engine of engine_solar :
41359: LD_VAR 0 2
41363: PUSH
41364: LD_INT 2
41366: DOUBLE
41367: EQUAL
41368: IFTRUE 41372
41370: GO 41410
41372: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41373: LD_ADDR_VAR 0 3
41377: PUSH
41378: LD_INT 11
41380: PUSH
41381: LD_INT 12
41383: PUSH
41384: LD_INT 13
41386: PUSH
41387: LD_INT 14
41389: PUSH
41390: LD_INT 1
41392: PUSH
41393: LD_INT 2
41395: PUSH
41396: LD_INT 3
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: ST_TO_ADDR
41408: GO 41539
41410: LD_INT 1
41412: DOUBLE
41413: EQUAL
41414: IFTRUE 41418
41416: GO 41480
41418: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41419: LD_ADDR_VAR 0 3
41423: PUSH
41424: LD_INT 11
41426: PUSH
41427: LD_INT 12
41429: PUSH
41430: LD_INT 13
41432: PUSH
41433: LD_INT 14
41435: PUSH
41436: LD_INT 1
41438: PUSH
41439: LD_INT 2
41441: PUSH
41442: LD_INT 3
41444: PUSH
41445: LD_INT 4
41447: PUSH
41448: LD_INT 5
41450: PUSH
41451: LD_INT 21
41453: PUSH
41454: LD_INT 23
41456: PUSH
41457: LD_INT 22
41459: PUSH
41460: LD_INT 24
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: ST_TO_ADDR
41478: GO 41539
41480: LD_INT 3
41482: DOUBLE
41483: EQUAL
41484: IFTRUE 41488
41486: GO 41538
41488: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41489: LD_ADDR_VAR 0 3
41493: PUSH
41494: LD_INT 13
41496: PUSH
41497: LD_INT 14
41499: PUSH
41500: LD_INT 2
41502: PUSH
41503: LD_INT 3
41505: PUSH
41506: LD_INT 4
41508: PUSH
41509: LD_INT 5
41511: PUSH
41512: LD_INT 21
41514: PUSH
41515: LD_INT 22
41517: PUSH
41518: LD_INT 23
41520: PUSH
41521: LD_INT 24
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: ST_TO_ADDR
41536: GO 41539
41538: POP
// result := ( chassis in result ) ;
41539: LD_ADDR_VAR 0 3
41543: PUSH
41544: LD_VAR 0 1
41548: PUSH
41549: LD_VAR 0 3
41553: IN
41554: ST_TO_ADDR
// end ;
41555: LD_VAR 0 3
41559: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41560: LD_INT 0
41562: PPUSH
// if not chassis or not weapon then
41563: LD_VAR 0 1
41567: NOT
41568: IFTRUE 41577
41570: PUSH
41571: LD_VAR 0 2
41575: NOT
41576: OR
41577: IFFALSE 41581
// exit ;
41579: GO 42641
// case weapon of us_machine_gun :
41581: LD_VAR 0 2
41585: PUSH
41586: LD_INT 2
41588: DOUBLE
41589: EQUAL
41590: IFTRUE 41594
41592: GO 41624
41594: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41595: LD_ADDR_VAR 0 3
41599: PUSH
41600: LD_INT 1
41602: PUSH
41603: LD_INT 2
41605: PUSH
41606: LD_INT 3
41608: PUSH
41609: LD_INT 4
41611: PUSH
41612: LD_INT 5
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: ST_TO_ADDR
41622: GO 42625
41624: LD_INT 3
41626: DOUBLE
41627: EQUAL
41628: IFTRUE 41632
41630: GO 41662
41632: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41633: LD_ADDR_VAR 0 3
41637: PUSH
41638: LD_INT 1
41640: PUSH
41641: LD_INT 2
41643: PUSH
41644: LD_INT 3
41646: PUSH
41647: LD_INT 4
41649: PUSH
41650: LD_INT 5
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: ST_TO_ADDR
41660: GO 42625
41662: LD_INT 11
41664: DOUBLE
41665: EQUAL
41666: IFTRUE 41670
41668: GO 41700
41670: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41671: LD_ADDR_VAR 0 3
41675: PUSH
41676: LD_INT 1
41678: PUSH
41679: LD_INT 2
41681: PUSH
41682: LD_INT 3
41684: PUSH
41685: LD_INT 4
41687: PUSH
41688: LD_INT 5
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: ST_TO_ADDR
41698: GO 42625
41700: LD_INT 4
41702: DOUBLE
41703: EQUAL
41704: IFTRUE 41708
41706: GO 41734
41708: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41709: LD_ADDR_VAR 0 3
41713: PUSH
41714: LD_INT 2
41716: PUSH
41717: LD_INT 3
41719: PUSH
41720: LD_INT 4
41722: PUSH
41723: LD_INT 5
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: ST_TO_ADDR
41732: GO 42625
41734: LD_INT 5
41736: DOUBLE
41737: EQUAL
41738: IFTRUE 41742
41740: GO 41768
41742: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41743: LD_ADDR_VAR 0 3
41747: PUSH
41748: LD_INT 2
41750: PUSH
41751: LD_INT 3
41753: PUSH
41754: LD_INT 4
41756: PUSH
41757: LD_INT 5
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: ST_TO_ADDR
41766: GO 42625
41768: LD_INT 9
41770: DOUBLE
41771: EQUAL
41772: IFTRUE 41776
41774: GO 41802
41776: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41777: LD_ADDR_VAR 0 3
41781: PUSH
41782: LD_INT 2
41784: PUSH
41785: LD_INT 3
41787: PUSH
41788: LD_INT 4
41790: PUSH
41791: LD_INT 5
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: ST_TO_ADDR
41800: GO 42625
41802: LD_INT 7
41804: DOUBLE
41805: EQUAL
41806: IFTRUE 41810
41808: GO 41836
41810: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41811: LD_ADDR_VAR 0 3
41815: PUSH
41816: LD_INT 2
41818: PUSH
41819: LD_INT 3
41821: PUSH
41822: LD_INT 4
41824: PUSH
41825: LD_INT 5
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: ST_TO_ADDR
41834: GO 42625
41836: LD_INT 12
41838: DOUBLE
41839: EQUAL
41840: IFTRUE 41844
41842: GO 41870
41844: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41845: LD_ADDR_VAR 0 3
41849: PUSH
41850: LD_INT 2
41852: PUSH
41853: LD_INT 3
41855: PUSH
41856: LD_INT 4
41858: PUSH
41859: LD_INT 5
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: ST_TO_ADDR
41868: GO 42625
41870: LD_INT 13
41872: DOUBLE
41873: EQUAL
41874: IFTRUE 41878
41876: GO 41904
41878: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41879: LD_ADDR_VAR 0 3
41883: PUSH
41884: LD_INT 2
41886: PUSH
41887: LD_INT 3
41889: PUSH
41890: LD_INT 4
41892: PUSH
41893: LD_INT 5
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: ST_TO_ADDR
41902: GO 42625
41904: LD_INT 14
41906: DOUBLE
41907: EQUAL
41908: IFTRUE 41912
41910: GO 41930
41912: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41913: LD_ADDR_VAR 0 3
41917: PUSH
41918: LD_INT 4
41920: PUSH
41921: LD_INT 5
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: ST_TO_ADDR
41928: GO 42625
41930: LD_INT 6
41932: DOUBLE
41933: EQUAL
41934: IFTRUE 41938
41936: GO 41956
41938: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41939: LD_ADDR_VAR 0 3
41943: PUSH
41944: LD_INT 4
41946: PUSH
41947: LD_INT 5
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: ST_TO_ADDR
41954: GO 42625
41956: LD_INT 10
41958: DOUBLE
41959: EQUAL
41960: IFTRUE 41964
41962: GO 41982
41964: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41965: LD_ADDR_VAR 0 3
41969: PUSH
41970: LD_INT 4
41972: PUSH
41973: LD_INT 5
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: ST_TO_ADDR
41980: GO 42625
41982: LD_INT 22
41984: DOUBLE
41985: EQUAL
41986: IFTRUE 41990
41988: GO 42016
41990: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41991: LD_ADDR_VAR 0 3
41995: PUSH
41996: LD_INT 11
41998: PUSH
41999: LD_INT 12
42001: PUSH
42002: LD_INT 13
42004: PUSH
42005: LD_INT 14
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: ST_TO_ADDR
42014: GO 42625
42016: LD_INT 23
42018: DOUBLE
42019: EQUAL
42020: IFTRUE 42024
42022: GO 42050
42024: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42025: LD_ADDR_VAR 0 3
42029: PUSH
42030: LD_INT 11
42032: PUSH
42033: LD_INT 12
42035: PUSH
42036: LD_INT 13
42038: PUSH
42039: LD_INT 14
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: ST_TO_ADDR
42048: GO 42625
42050: LD_INT 24
42052: DOUBLE
42053: EQUAL
42054: IFTRUE 42058
42056: GO 42084
42058: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42059: LD_ADDR_VAR 0 3
42063: PUSH
42064: LD_INT 11
42066: PUSH
42067: LD_INT 12
42069: PUSH
42070: LD_INT 13
42072: PUSH
42073: LD_INT 14
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: ST_TO_ADDR
42082: GO 42625
42084: LD_INT 30
42086: DOUBLE
42087: EQUAL
42088: IFTRUE 42092
42090: GO 42118
42092: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42093: LD_ADDR_VAR 0 3
42097: PUSH
42098: LD_INT 11
42100: PUSH
42101: LD_INT 12
42103: PUSH
42104: LD_INT 13
42106: PUSH
42107: LD_INT 14
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: ST_TO_ADDR
42116: GO 42625
42118: LD_INT 25
42120: DOUBLE
42121: EQUAL
42122: IFTRUE 42126
42124: GO 42144
42126: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42127: LD_ADDR_VAR 0 3
42131: PUSH
42132: LD_INT 13
42134: PUSH
42135: LD_INT 14
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: ST_TO_ADDR
42142: GO 42625
42144: LD_INT 27
42146: DOUBLE
42147: EQUAL
42148: IFTRUE 42152
42150: GO 42170
42152: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42153: LD_ADDR_VAR 0 3
42157: PUSH
42158: LD_INT 13
42160: PUSH
42161: LD_INT 14
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: ST_TO_ADDR
42168: GO 42625
42170: LD_INT 92
42172: DOUBLE
42173: EQUAL
42174: IFTRUE 42178
42176: GO 42204
42178: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42179: LD_ADDR_VAR 0 3
42183: PUSH
42184: LD_INT 11
42186: PUSH
42187: LD_INT 12
42189: PUSH
42190: LD_INT 13
42192: PUSH
42193: LD_INT 14
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: ST_TO_ADDR
42202: GO 42625
42204: LD_INT 28
42206: DOUBLE
42207: EQUAL
42208: IFTRUE 42212
42210: GO 42230
42212: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42213: LD_ADDR_VAR 0 3
42217: PUSH
42218: LD_INT 13
42220: PUSH
42221: LD_INT 14
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: ST_TO_ADDR
42228: GO 42625
42230: LD_INT 29
42232: DOUBLE
42233: EQUAL
42234: IFTRUE 42238
42236: GO 42256
42238: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42239: LD_ADDR_VAR 0 3
42243: PUSH
42244: LD_INT 13
42246: PUSH
42247: LD_INT 14
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: ST_TO_ADDR
42254: GO 42625
42256: LD_INT 31
42258: DOUBLE
42259: EQUAL
42260: IFTRUE 42264
42262: GO 42282
42264: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42265: LD_ADDR_VAR 0 3
42269: PUSH
42270: LD_INT 13
42272: PUSH
42273: LD_INT 14
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: ST_TO_ADDR
42280: GO 42625
42282: LD_INT 26
42284: DOUBLE
42285: EQUAL
42286: IFTRUE 42290
42288: GO 42308
42290: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42291: LD_ADDR_VAR 0 3
42295: PUSH
42296: LD_INT 13
42298: PUSH
42299: LD_INT 14
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: ST_TO_ADDR
42306: GO 42625
42308: LD_INT 42
42310: DOUBLE
42311: EQUAL
42312: IFTRUE 42316
42314: GO 42342
42316: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42317: LD_ADDR_VAR 0 3
42321: PUSH
42322: LD_INT 21
42324: PUSH
42325: LD_INT 22
42327: PUSH
42328: LD_INT 23
42330: PUSH
42331: LD_INT 24
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: ST_TO_ADDR
42340: GO 42625
42342: LD_INT 43
42344: DOUBLE
42345: EQUAL
42346: IFTRUE 42350
42348: GO 42376
42350: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42351: LD_ADDR_VAR 0 3
42355: PUSH
42356: LD_INT 21
42358: PUSH
42359: LD_INT 22
42361: PUSH
42362: LD_INT 23
42364: PUSH
42365: LD_INT 24
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: ST_TO_ADDR
42374: GO 42625
42376: LD_INT 44
42378: DOUBLE
42379: EQUAL
42380: IFTRUE 42384
42382: GO 42410
42384: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42385: LD_ADDR_VAR 0 3
42389: PUSH
42390: LD_INT 21
42392: PUSH
42393: LD_INT 22
42395: PUSH
42396: LD_INT 23
42398: PUSH
42399: LD_INT 24
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: ST_TO_ADDR
42408: GO 42625
42410: LD_INT 45
42412: DOUBLE
42413: EQUAL
42414: IFTRUE 42418
42416: GO 42444
42418: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42419: LD_ADDR_VAR 0 3
42423: PUSH
42424: LD_INT 21
42426: PUSH
42427: LD_INT 22
42429: PUSH
42430: LD_INT 23
42432: PUSH
42433: LD_INT 24
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: ST_TO_ADDR
42442: GO 42625
42444: LD_INT 49
42446: DOUBLE
42447: EQUAL
42448: IFTRUE 42452
42450: GO 42478
42452: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42453: LD_ADDR_VAR 0 3
42457: PUSH
42458: LD_INT 21
42460: PUSH
42461: LD_INT 22
42463: PUSH
42464: LD_INT 23
42466: PUSH
42467: LD_INT 24
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: ST_TO_ADDR
42476: GO 42625
42478: LD_INT 51
42480: DOUBLE
42481: EQUAL
42482: IFTRUE 42486
42484: GO 42512
42486: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42487: LD_ADDR_VAR 0 3
42491: PUSH
42492: LD_INT 21
42494: PUSH
42495: LD_INT 22
42497: PUSH
42498: LD_INT 23
42500: PUSH
42501: LD_INT 24
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: ST_TO_ADDR
42510: GO 42625
42512: LD_INT 52
42514: DOUBLE
42515: EQUAL
42516: IFTRUE 42520
42518: GO 42546
42520: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42521: LD_ADDR_VAR 0 3
42525: PUSH
42526: LD_INT 21
42528: PUSH
42529: LD_INT 22
42531: PUSH
42532: LD_INT 23
42534: PUSH
42535: LD_INT 24
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: ST_TO_ADDR
42544: GO 42625
42546: LD_INT 53
42548: DOUBLE
42549: EQUAL
42550: IFTRUE 42554
42552: GO 42572
42554: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42555: LD_ADDR_VAR 0 3
42559: PUSH
42560: LD_INT 23
42562: PUSH
42563: LD_INT 24
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: ST_TO_ADDR
42570: GO 42625
42572: LD_INT 46
42574: DOUBLE
42575: EQUAL
42576: IFTRUE 42580
42578: GO 42598
42580: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42581: LD_ADDR_VAR 0 3
42585: PUSH
42586: LD_INT 23
42588: PUSH
42589: LD_INT 24
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: ST_TO_ADDR
42596: GO 42625
42598: LD_INT 47
42600: DOUBLE
42601: EQUAL
42602: IFTRUE 42606
42604: GO 42624
42606: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42607: LD_ADDR_VAR 0 3
42611: PUSH
42612: LD_INT 23
42614: PUSH
42615: LD_INT 24
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: ST_TO_ADDR
42622: GO 42625
42624: POP
// result := ( chassis in result ) ;
42625: LD_ADDR_VAR 0 3
42629: PUSH
42630: LD_VAR 0 1
42634: PUSH
42635: LD_VAR 0 3
42639: IN
42640: ST_TO_ADDR
// end ;
42641: LD_VAR 0 3
42645: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42646: LD_INT 0
42648: PPUSH
42649: PPUSH
42650: PPUSH
42651: PPUSH
42652: PPUSH
42653: PPUSH
42654: PPUSH
// result := array ;
42655: LD_ADDR_VAR 0 5
42659: PUSH
42660: LD_VAR 0 1
42664: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42665: LD_VAR 0 1
42669: NOT
42670: IFTRUE 42679
42672: PUSH
42673: LD_VAR 0 2
42677: NOT
42678: OR
42679: IFTRUE 42688
42681: PUSH
42682: LD_VAR 0 3
42686: NOT
42687: OR
42688: IFTRUE 42702
42690: PUSH
42691: LD_VAR 0 2
42695: PUSH
42696: LD_VAR 0 1
42700: GREATER
42701: OR
42702: IFTRUE 42716
42704: PUSH
42705: LD_VAR 0 3
42709: PUSH
42710: LD_VAR 0 1
42714: GREATER
42715: OR
42716: IFFALSE 42720
// exit ;
42718: GO 43016
// if direction then
42720: LD_VAR 0 4
42724: IFFALSE 42788
// begin d := 1 ;
42726: LD_ADDR_VAR 0 9
42730: PUSH
42731: LD_INT 1
42733: ST_TO_ADDR
// if i_from > i_to then
42734: LD_VAR 0 2
42738: PUSH
42739: LD_VAR 0 3
42743: GREATER
42744: IFFALSE 42770
// length := ( array - i_from ) + i_to else
42746: LD_ADDR_VAR 0 11
42750: PUSH
42751: LD_VAR 0 1
42755: PUSH
42756: LD_VAR 0 2
42760: MINUS
42761: PUSH
42762: LD_VAR 0 3
42766: PLUS
42767: ST_TO_ADDR
42768: GO 42786
// length := i_to - i_from ;
42770: LD_ADDR_VAR 0 11
42774: PUSH
42775: LD_VAR 0 3
42779: PUSH
42780: LD_VAR 0 2
42784: MINUS
42785: ST_TO_ADDR
// end else
42786: GO 42849
// begin d := - 1 ;
42788: LD_ADDR_VAR 0 9
42792: PUSH
42793: LD_INT 1
42795: NEG
42796: ST_TO_ADDR
// if i_from > i_to then
42797: LD_VAR 0 2
42801: PUSH
42802: LD_VAR 0 3
42806: GREATER
42807: IFFALSE 42827
// length := i_from - i_to else
42809: LD_ADDR_VAR 0 11
42813: PUSH
42814: LD_VAR 0 2
42818: PUSH
42819: LD_VAR 0 3
42823: MINUS
42824: ST_TO_ADDR
42825: GO 42849
// length := ( array - i_to ) + i_from ;
42827: LD_ADDR_VAR 0 11
42831: PUSH
42832: LD_VAR 0 1
42836: PUSH
42837: LD_VAR 0 3
42841: MINUS
42842: PUSH
42843: LD_VAR 0 2
42847: PLUS
42848: ST_TO_ADDR
// end ; if not length then
42849: LD_VAR 0 11
42853: NOT
42854: IFFALSE 42858
// exit ;
42856: GO 43016
// tmp := array ;
42858: LD_ADDR_VAR 0 10
42862: PUSH
42863: LD_VAR 0 1
42867: ST_TO_ADDR
// for i = 1 to length do
42868: LD_ADDR_VAR 0 6
42872: PUSH
42873: DOUBLE
42874: LD_INT 1
42876: DEC
42877: ST_TO_ADDR
42878: LD_VAR 0 11
42882: PUSH
42883: FOR_TO
42884: IFFALSE 43004
// begin for j = 1 to array do
42886: LD_ADDR_VAR 0 7
42890: PUSH
42891: DOUBLE
42892: LD_INT 1
42894: DEC
42895: ST_TO_ADDR
42896: LD_VAR 0 1
42900: PUSH
42901: FOR_TO
42902: IFFALSE 42990
// begin k := j + d ;
42904: LD_ADDR_VAR 0 8
42908: PUSH
42909: LD_VAR 0 7
42913: PUSH
42914: LD_VAR 0 9
42918: PLUS
42919: ST_TO_ADDR
// if k > array then
42920: LD_VAR 0 8
42924: PUSH
42925: LD_VAR 0 1
42929: GREATER
42930: IFFALSE 42940
// k := 1 ;
42932: LD_ADDR_VAR 0 8
42936: PUSH
42937: LD_INT 1
42939: ST_TO_ADDR
// if not k then
42940: LD_VAR 0 8
42944: NOT
42945: IFFALSE 42957
// k := array ;
42947: LD_ADDR_VAR 0 8
42951: PUSH
42952: LD_VAR 0 1
42956: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42957: LD_ADDR_VAR 0 10
42961: PUSH
42962: LD_VAR 0 10
42966: PPUSH
42967: LD_VAR 0 8
42971: PPUSH
42972: LD_VAR 0 1
42976: PUSH
42977: LD_VAR 0 7
42981: ARRAY
42982: PPUSH
42983: CALL_OW 1
42987: ST_TO_ADDR
// end ;
42988: GO 42901
42990: POP
42991: POP
// array := tmp ;
42992: LD_ADDR_VAR 0 1
42996: PUSH
42997: LD_VAR 0 10
43001: ST_TO_ADDR
// end ;
43002: GO 42883
43004: POP
43005: POP
// result := array ;
43006: LD_ADDR_VAR 0 5
43010: PUSH
43011: LD_VAR 0 1
43015: ST_TO_ADDR
// end ;
43016: LD_VAR 0 5
43020: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43021: LD_INT 0
43023: PPUSH
43024: PPUSH
// result := 0 ;
43025: LD_ADDR_VAR 0 3
43029: PUSH
43030: LD_INT 0
43032: ST_TO_ADDR
// if not array or not value in array then
43033: LD_VAR 0 1
43037: NOT
43038: IFTRUE 43053
43040: PUSH
43041: LD_VAR 0 2
43045: PUSH
43046: LD_VAR 0 1
43050: IN
43051: NOT
43052: OR
43053: IFFALSE 43057
// exit ;
43055: GO 43111
// for i = 1 to array do
43057: LD_ADDR_VAR 0 4
43061: PUSH
43062: DOUBLE
43063: LD_INT 1
43065: DEC
43066: ST_TO_ADDR
43067: LD_VAR 0 1
43071: PUSH
43072: FOR_TO
43073: IFFALSE 43109
// if value = array [ i ] then
43075: LD_VAR 0 2
43079: PUSH
43080: LD_VAR 0 1
43084: PUSH
43085: LD_VAR 0 4
43089: ARRAY
43090: EQUAL
43091: IFFALSE 43107
// begin result := i ;
43093: LD_ADDR_VAR 0 3
43097: PUSH
43098: LD_VAR 0 4
43102: ST_TO_ADDR
// exit ;
43103: POP
43104: POP
43105: GO 43111
// end ;
43107: GO 43072
43109: POP
43110: POP
// end ;
43111: LD_VAR 0 3
43115: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43116: LD_INT 0
43118: PPUSH
// vc_chassis := chassis ;
43119: LD_ADDR_OWVAR 37
43123: PUSH
43124: LD_VAR 0 1
43128: ST_TO_ADDR
// vc_engine := engine ;
43129: LD_ADDR_OWVAR 39
43133: PUSH
43134: LD_VAR 0 2
43138: ST_TO_ADDR
// vc_control := control ;
43139: LD_ADDR_OWVAR 38
43143: PUSH
43144: LD_VAR 0 3
43148: ST_TO_ADDR
// vc_weapon := weapon ;
43149: LD_ADDR_OWVAR 40
43153: PUSH
43154: LD_VAR 0 4
43158: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43159: LD_ADDR_OWVAR 41
43163: PUSH
43164: LD_VAR 0 5
43168: ST_TO_ADDR
// end ;
43169: LD_VAR 0 6
43173: RET
// export function WantPlant ( unit ) ; var task ; begin
43174: LD_INT 0
43176: PPUSH
43177: PPUSH
// result := false ;
43178: LD_ADDR_VAR 0 2
43182: PUSH
43183: LD_INT 0
43185: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43186: LD_ADDR_VAR 0 3
43190: PUSH
43191: LD_VAR 0 1
43195: PPUSH
43196: CALL_OW 437
43200: ST_TO_ADDR
// if task then
43201: LD_VAR 0 3
43205: IFFALSE 43233
// if task [ 1 ] [ 1 ] = p then
43207: LD_VAR 0 3
43211: PUSH
43212: LD_INT 1
43214: ARRAY
43215: PUSH
43216: LD_INT 1
43218: ARRAY
43219: PUSH
43220: LD_STRING p
43222: EQUAL
43223: IFFALSE 43233
// result := true ;
43225: LD_ADDR_VAR 0 2
43229: PUSH
43230: LD_INT 1
43232: ST_TO_ADDR
// end ;
43233: LD_VAR 0 2
43237: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43238: LD_INT 0
43240: PPUSH
43241: PPUSH
43242: PPUSH
43243: PPUSH
// if pos < 1 then
43244: LD_VAR 0 2
43248: PUSH
43249: LD_INT 1
43251: LESS
43252: IFFALSE 43256
// exit ;
43254: GO 43559
// if pos = 1 then
43256: LD_VAR 0 2
43260: PUSH
43261: LD_INT 1
43263: EQUAL
43264: IFFALSE 43297
// result := Replace ( arr , pos [ 1 ] , value ) else
43266: LD_ADDR_VAR 0 4
43270: PUSH
43271: LD_VAR 0 1
43275: PPUSH
43276: LD_VAR 0 2
43280: PUSH
43281: LD_INT 1
43283: ARRAY
43284: PPUSH
43285: LD_VAR 0 3
43289: PPUSH
43290: CALL_OW 1
43294: ST_TO_ADDR
43295: GO 43559
// begin tmp := arr ;
43297: LD_ADDR_VAR 0 6
43301: PUSH
43302: LD_VAR 0 1
43306: ST_TO_ADDR
// s_arr := [ tmp ] ;
43307: LD_ADDR_VAR 0 7
43311: PUSH
43312: LD_VAR 0 6
43316: PUSH
43317: EMPTY
43318: LIST
43319: ST_TO_ADDR
// for i = 1 to pos - 1 do
43320: LD_ADDR_VAR 0 5
43324: PUSH
43325: DOUBLE
43326: LD_INT 1
43328: DEC
43329: ST_TO_ADDR
43330: LD_VAR 0 2
43334: PUSH
43335: LD_INT 1
43337: MINUS
43338: PUSH
43339: FOR_TO
43340: IFFALSE 43385
// begin tmp := tmp [ pos [ i ] ] ;
43342: LD_ADDR_VAR 0 6
43346: PUSH
43347: LD_VAR 0 6
43351: PUSH
43352: LD_VAR 0 2
43356: PUSH
43357: LD_VAR 0 5
43361: ARRAY
43362: ARRAY
43363: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43364: LD_ADDR_VAR 0 7
43368: PUSH
43369: LD_VAR 0 7
43373: PUSH
43374: LD_VAR 0 6
43378: PUSH
43379: EMPTY
43380: LIST
43381: ADD
43382: ST_TO_ADDR
// end ;
43383: GO 43339
43385: POP
43386: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43387: LD_ADDR_VAR 0 6
43391: PUSH
43392: LD_VAR 0 6
43396: PPUSH
43397: LD_VAR 0 2
43401: PUSH
43402: LD_VAR 0 2
43406: ARRAY
43407: PPUSH
43408: LD_VAR 0 3
43412: PPUSH
43413: CALL_OW 1
43417: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43418: LD_ADDR_VAR 0 7
43422: PUSH
43423: LD_VAR 0 7
43427: PPUSH
43428: LD_VAR 0 7
43432: PPUSH
43433: LD_VAR 0 6
43437: PPUSH
43438: CALL_OW 1
43442: ST_TO_ADDR
// for i = s_arr downto 2 do
43443: LD_ADDR_VAR 0 5
43447: PUSH
43448: DOUBLE
43449: LD_VAR 0 7
43453: INC
43454: ST_TO_ADDR
43455: LD_INT 2
43457: PUSH
43458: FOR_DOWNTO
43459: IFFALSE 43543
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43461: LD_ADDR_VAR 0 6
43465: PUSH
43466: LD_VAR 0 7
43470: PUSH
43471: LD_VAR 0 5
43475: PUSH
43476: LD_INT 1
43478: MINUS
43479: ARRAY
43480: PPUSH
43481: LD_VAR 0 2
43485: PUSH
43486: LD_VAR 0 5
43490: PUSH
43491: LD_INT 1
43493: MINUS
43494: ARRAY
43495: PPUSH
43496: LD_VAR 0 7
43500: PUSH
43501: LD_VAR 0 5
43505: ARRAY
43506: PPUSH
43507: CALL_OW 1
43511: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43512: LD_ADDR_VAR 0 7
43516: PUSH
43517: LD_VAR 0 7
43521: PPUSH
43522: LD_VAR 0 5
43526: PUSH
43527: LD_INT 1
43529: MINUS
43530: PPUSH
43531: LD_VAR 0 6
43535: PPUSH
43536: CALL_OW 1
43540: ST_TO_ADDR
// end ;
43541: GO 43458
43543: POP
43544: POP
// result := s_arr [ 1 ] ;
43545: LD_ADDR_VAR 0 4
43549: PUSH
43550: LD_VAR 0 7
43554: PUSH
43555: LD_INT 1
43557: ARRAY
43558: ST_TO_ADDR
// end ; end ;
43559: LD_VAR 0 4
43563: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43564: LD_INT 0
43566: PPUSH
43567: PPUSH
// if not list then
43568: LD_VAR 0 1
43572: NOT
43573: IFFALSE 43577
// exit ;
43575: GO 43668
// i := list [ pos1 ] ;
43577: LD_ADDR_VAR 0 5
43581: PUSH
43582: LD_VAR 0 1
43586: PUSH
43587: LD_VAR 0 2
43591: ARRAY
43592: ST_TO_ADDR
// if not i then
43593: LD_VAR 0 5
43597: NOT
43598: IFFALSE 43602
// exit ;
43600: GO 43668
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43602: LD_ADDR_VAR 0 1
43606: PUSH
43607: LD_VAR 0 1
43611: PPUSH
43612: LD_VAR 0 2
43616: PPUSH
43617: LD_VAR 0 1
43621: PUSH
43622: LD_VAR 0 3
43626: ARRAY
43627: PPUSH
43628: CALL_OW 1
43632: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43633: LD_ADDR_VAR 0 1
43637: PUSH
43638: LD_VAR 0 1
43642: PPUSH
43643: LD_VAR 0 3
43647: PPUSH
43648: LD_VAR 0 5
43652: PPUSH
43653: CALL_OW 1
43657: ST_TO_ADDR
// result := list ;
43658: LD_ADDR_VAR 0 4
43662: PUSH
43663: LD_VAR 0 1
43667: ST_TO_ADDR
// end ;
43668: LD_VAR 0 4
43672: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43673: LD_INT 0
43675: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43676: LD_ADDR_VAR 0 5
43680: PUSH
43681: LD_VAR 0 1
43685: PPUSH
43686: CALL_OW 250
43690: PPUSH
43691: LD_VAR 0 1
43695: PPUSH
43696: CALL_OW 251
43700: PPUSH
43701: LD_VAR 0 2
43705: PPUSH
43706: LD_VAR 0 3
43710: PPUSH
43711: LD_VAR 0 4
43715: PPUSH
43716: CALL 44098 0 5
43720: ST_TO_ADDR
// end ;
43721: LD_VAR 0 5
43725: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
43726: LD_INT 0
43728: PPUSH
43729: PPUSH
43730: PPUSH
43731: PPUSH
// if not list or not unit then
43732: LD_VAR 0 2
43736: NOT
43737: IFTRUE 43746
43739: PUSH
43740: LD_VAR 0 1
43744: NOT
43745: OR
43746: IFFALSE 43750
// exit ;
43748: GO 44093
// result := [ ] ;
43750: LD_ADDR_VAR 0 5
43754: PUSH
43755: EMPTY
43756: ST_TO_ADDR
// for i in list do
43757: LD_ADDR_VAR 0 6
43761: PUSH
43762: LD_VAR 0 2
43766: PUSH
43767: FOR_IN
43768: IFFALSE 43986
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43770: LD_ADDR_VAR 0 8
43774: PUSH
43775: LD_VAR 0 1
43779: PPUSH
43780: LD_VAR 0 6
43784: PUSH
43785: LD_INT 1
43787: ARRAY
43788: PPUSH
43789: LD_VAR 0 6
43793: PUSH
43794: LD_INT 2
43796: ARRAY
43797: PPUSH
43798: CALL_OW 297
43802: ST_TO_ADDR
// if not Count ( result ) then
43803: LD_VAR 0 5
43807: PPUSH
43808: CALL 40354 0 1
43812: NOT
43813: IFFALSE 43846
// begin result := Join ( result , [ i , tmp ] ) ;
43815: LD_ADDR_VAR 0 5
43819: PUSH
43820: LD_VAR 0 5
43824: PPUSH
43825: LD_VAR 0 6
43829: PUSH
43830: LD_VAR 0 8
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PPUSH
43839: CALL 76286 0 2
43843: ST_TO_ADDR
// continue ;
43844: GO 43767
// end ; if result [ result ] [ 2 ] <= tmp then
43846: LD_VAR 0 5
43850: PUSH
43851: LD_VAR 0 5
43855: ARRAY
43856: PUSH
43857: LD_INT 2
43859: ARRAY
43860: PUSH
43861: LD_VAR 0 8
43865: LESSEQUAL
43866: IFFALSE 43899
// result := Join ( result , [ i , tmp ] ) else
43868: LD_ADDR_VAR 0 5
43872: PUSH
43873: LD_VAR 0 5
43877: PPUSH
43878: LD_VAR 0 6
43882: PUSH
43883: LD_VAR 0 8
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PPUSH
43892: CALL 76286 0 2
43896: ST_TO_ADDR
43897: GO 43984
// begin for j := 1 to Count ( result ) do
43899: LD_ADDR_VAR 0 7
43903: PUSH
43904: DOUBLE
43905: LD_INT 1
43907: DEC
43908: ST_TO_ADDR
43909: LD_VAR 0 5
43913: PPUSH
43914: CALL 40354 0 1
43918: PUSH
43919: FOR_TO
43920: IFFALSE 43982
// begin if tmp < result [ j ] [ 2 ] then
43922: LD_VAR 0 8
43926: PUSH
43927: LD_VAR 0 5
43931: PUSH
43932: LD_VAR 0 7
43936: ARRAY
43937: PUSH
43938: LD_INT 2
43940: ARRAY
43941: LESS
43942: IFFALSE 43980
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43944: LD_ADDR_VAR 0 5
43948: PUSH
43949: LD_VAR 0 5
43953: PPUSH
43954: LD_VAR 0 7
43958: PPUSH
43959: LD_VAR 0 6
43963: PUSH
43964: LD_VAR 0 8
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PPUSH
43973: CALL_OW 2
43977: ST_TO_ADDR
// break ;
43978: GO 43982
// end ; end ;
43980: GO 43919
43982: POP
43983: POP
// end ; end ;
43984: GO 43767
43986: POP
43987: POP
// if result and not asc then
43988: LD_VAR 0 5
43992: IFFALSE 44001
43994: PUSH
43995: LD_VAR 0 3
43999: NOT
44000: AND
44001: IFFALSE 44018
// result := ReverseArray ( result ) ;
44003: LD_ADDR_VAR 0 5
44007: PUSH
44008: LD_VAR 0 5
44012: PPUSH
44013: CALL 71376 0 1
44017: ST_TO_ADDR
// tmp := [ ] ;
44018: LD_ADDR_VAR 0 8
44022: PUSH
44023: EMPTY
44024: ST_TO_ADDR
// if mode then
44025: LD_VAR 0 4
44029: IFFALSE 44093
// begin for i := 1 to result do
44031: LD_ADDR_VAR 0 6
44035: PUSH
44036: DOUBLE
44037: LD_INT 1
44039: DEC
44040: ST_TO_ADDR
44041: LD_VAR 0 5
44045: PUSH
44046: FOR_TO
44047: IFFALSE 44081
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
44049: LD_ADDR_VAR 0 8
44053: PUSH
44054: LD_VAR 0 8
44058: PPUSH
44059: LD_VAR 0 5
44063: PUSH
44064: LD_VAR 0 6
44068: ARRAY
44069: PUSH
44070: LD_INT 1
44072: ARRAY
44073: PPUSH
44074: CALL 76286 0 2
44078: ST_TO_ADDR
44079: GO 44046
44081: POP
44082: POP
// result := tmp ;
44083: LD_ADDR_VAR 0 5
44087: PUSH
44088: LD_VAR 0 8
44092: ST_TO_ADDR
// end ; end ;
44093: LD_VAR 0 5
44097: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44098: LD_INT 0
44100: PPUSH
44101: PPUSH
44102: PPUSH
44103: PPUSH
// if not list then
44104: LD_VAR 0 3
44108: NOT
44109: IFFALSE 44113
// exit ;
44111: GO 44503
// result := [ ] ;
44113: LD_ADDR_VAR 0 6
44117: PUSH
44118: EMPTY
44119: ST_TO_ADDR
// for i in list do
44120: LD_ADDR_VAR 0 7
44124: PUSH
44125: LD_VAR 0 3
44129: PUSH
44130: FOR_IN
44131: IFFALSE 44333
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44133: LD_ADDR_VAR 0 9
44137: PUSH
44138: LD_VAR 0 7
44142: PPUSH
44143: LD_VAR 0 1
44147: PPUSH
44148: LD_VAR 0 2
44152: PPUSH
44153: CALL_OW 297
44157: ST_TO_ADDR
// if not result then
44158: LD_VAR 0 6
44162: NOT
44163: IFFALSE 44189
// result := [ [ i , tmp ] ] else
44165: LD_ADDR_VAR 0 6
44169: PUSH
44170: LD_VAR 0 7
44174: PUSH
44175: LD_VAR 0 9
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: EMPTY
44185: LIST
44186: ST_TO_ADDR
44187: GO 44331
// begin if result [ result ] [ 2 ] <= tmp then
44189: LD_VAR 0 6
44193: PUSH
44194: LD_VAR 0 6
44198: ARRAY
44199: PUSH
44200: LD_INT 2
44202: ARRAY
44203: PUSH
44204: LD_VAR 0 9
44208: LESSEQUAL
44209: IFFALSE 44251
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44211: LD_ADDR_VAR 0 6
44215: PUSH
44216: LD_VAR 0 6
44220: PPUSH
44221: LD_VAR 0 6
44225: PUSH
44226: LD_INT 1
44228: PLUS
44229: PPUSH
44230: LD_VAR 0 7
44234: PUSH
44235: LD_VAR 0 9
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PPUSH
44244: CALL_OW 2
44248: ST_TO_ADDR
44249: GO 44331
// for j := 1 to result do
44251: LD_ADDR_VAR 0 8
44255: PUSH
44256: DOUBLE
44257: LD_INT 1
44259: DEC
44260: ST_TO_ADDR
44261: LD_VAR 0 6
44265: PUSH
44266: FOR_TO
44267: IFFALSE 44329
// begin if tmp < result [ j ] [ 2 ] then
44269: LD_VAR 0 9
44273: PUSH
44274: LD_VAR 0 6
44278: PUSH
44279: LD_VAR 0 8
44283: ARRAY
44284: PUSH
44285: LD_INT 2
44287: ARRAY
44288: LESS
44289: IFFALSE 44327
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44291: LD_ADDR_VAR 0 6
44295: PUSH
44296: LD_VAR 0 6
44300: PPUSH
44301: LD_VAR 0 8
44305: PPUSH
44306: LD_VAR 0 7
44310: PUSH
44311: LD_VAR 0 9
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PPUSH
44320: CALL_OW 2
44324: ST_TO_ADDR
// break ;
44325: GO 44329
// end ; end ;
44327: GO 44266
44329: POP
44330: POP
// end ; end ;
44331: GO 44130
44333: POP
44334: POP
// if result and not asc then
44335: LD_VAR 0 6
44339: IFFALSE 44348
44341: PUSH
44342: LD_VAR 0 4
44346: NOT
44347: AND
44348: IFFALSE 44423
// begin tmp := result ;
44350: LD_ADDR_VAR 0 9
44354: PUSH
44355: LD_VAR 0 6
44359: ST_TO_ADDR
// for i = tmp downto 1 do
44360: LD_ADDR_VAR 0 7
44364: PUSH
44365: DOUBLE
44366: LD_VAR 0 9
44370: INC
44371: ST_TO_ADDR
44372: LD_INT 1
44374: PUSH
44375: FOR_DOWNTO
44376: IFFALSE 44421
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44378: LD_ADDR_VAR 0 6
44382: PUSH
44383: LD_VAR 0 6
44387: PPUSH
44388: LD_VAR 0 9
44392: PUSH
44393: LD_VAR 0 7
44397: MINUS
44398: PUSH
44399: LD_INT 1
44401: PLUS
44402: PPUSH
44403: LD_VAR 0 9
44407: PUSH
44408: LD_VAR 0 7
44412: ARRAY
44413: PPUSH
44414: CALL_OW 1
44418: ST_TO_ADDR
44419: GO 44375
44421: POP
44422: POP
// end ; tmp := [ ] ;
44423: LD_ADDR_VAR 0 9
44427: PUSH
44428: EMPTY
44429: ST_TO_ADDR
// if mode then
44430: LD_VAR 0 5
44434: IFFALSE 44503
// begin for i = 1 to result do
44436: LD_ADDR_VAR 0 7
44440: PUSH
44441: DOUBLE
44442: LD_INT 1
44444: DEC
44445: ST_TO_ADDR
44446: LD_VAR 0 6
44450: PUSH
44451: FOR_TO
44452: IFFALSE 44491
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44454: LD_ADDR_VAR 0 9
44458: PUSH
44459: LD_VAR 0 9
44463: PPUSH
44464: LD_VAR 0 7
44468: PPUSH
44469: LD_VAR 0 6
44473: PUSH
44474: LD_VAR 0 7
44478: ARRAY
44479: PUSH
44480: LD_INT 1
44482: ARRAY
44483: PPUSH
44484: CALL_OW 1
44488: ST_TO_ADDR
44489: GO 44451
44491: POP
44492: POP
// result := tmp ;
44493: LD_ADDR_VAR 0 6
44497: PUSH
44498: LD_VAR 0 9
44502: ST_TO_ADDR
// end ; end ;
44503: LD_VAR 0 6
44507: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44508: LD_INT 0
44510: PPUSH
44511: PPUSH
44512: PPUSH
44513: PPUSH
44514: PPUSH
44515: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44516: LD_ADDR_VAR 0 5
44520: PUSH
44521: LD_INT 0
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: EMPTY
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: ST_TO_ADDR
// if not x or not y then
44538: LD_VAR 0 2
44542: NOT
44543: IFTRUE 44552
44545: PUSH
44546: LD_VAR 0 3
44550: NOT
44551: OR
44552: IFFALSE 44556
// exit ;
44554: GO 46212
// if not range then
44556: LD_VAR 0 4
44560: NOT
44561: IFFALSE 44571
// range := 10 ;
44563: LD_ADDR_VAR 0 4
44567: PUSH
44568: LD_INT 10
44570: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44571: LD_ADDR_VAR 0 8
44575: PUSH
44576: LD_INT 81
44578: PUSH
44579: LD_VAR 0 1
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 92
44590: PUSH
44591: LD_VAR 0 2
44595: PUSH
44596: LD_VAR 0 3
44600: PUSH
44601: LD_VAR 0 4
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 3
44614: PUSH
44615: LD_INT 21
44617: PUSH
44618: LD_INT 3
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: LIST
44633: PPUSH
44634: CALL_OW 69
44638: ST_TO_ADDR
// if not tmp then
44639: LD_VAR 0 8
44643: NOT
44644: IFFALSE 44648
// exit ;
44646: GO 46212
// for i in tmp do
44648: LD_ADDR_VAR 0 6
44652: PUSH
44653: LD_VAR 0 8
44657: PUSH
44658: FOR_IN
44659: IFFALSE 46187
// begin points := [ 0 , 0 , 0 ] ;
44661: LD_ADDR_VAR 0 9
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: LD_INT 0
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: LIST
44679: ST_TO_ADDR
// bpoints := 1 ;
44680: LD_ADDR_VAR 0 10
44684: PUSH
44685: LD_INT 1
44687: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44688: LD_VAR 0 6
44692: PPUSH
44693: CALL_OW 247
44697: PUSH
44698: LD_INT 1
44700: DOUBLE
44701: EQUAL
44702: IFTRUE 44706
44704: GO 45288
44706: POP
// begin if GetClass ( i ) = 1 then
44707: LD_VAR 0 6
44711: PPUSH
44712: CALL_OW 257
44716: PUSH
44717: LD_INT 1
44719: EQUAL
44720: IFFALSE 44741
// points := [ 10 , 5 , 3 ] ;
44722: LD_ADDR_VAR 0 9
44726: PUSH
44727: LD_INT 10
44729: PUSH
44730: LD_INT 5
44732: PUSH
44733: LD_INT 3
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: LIST
44740: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44741: LD_VAR 0 6
44745: PPUSH
44746: CALL_OW 257
44750: PUSH
44751: LD_INT 2
44753: PUSH
44754: LD_INT 3
44756: PUSH
44757: LD_INT 4
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: LIST
44764: IN
44765: IFFALSE 44786
// points := [ 3 , 2 , 1 ] ;
44767: LD_ADDR_VAR 0 9
44771: PUSH
44772: LD_INT 3
44774: PUSH
44775: LD_INT 2
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: LIST
44785: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44786: LD_VAR 0 6
44790: PPUSH
44791: CALL_OW 257
44795: PUSH
44796: LD_INT 5
44798: EQUAL
44799: IFFALSE 44820
// points := [ 130 , 5 , 2 ] ;
44801: LD_ADDR_VAR 0 9
44805: PUSH
44806: LD_INT 130
44808: PUSH
44809: LD_INT 5
44811: PUSH
44812: LD_INT 2
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: LIST
44819: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44820: LD_VAR 0 6
44824: PPUSH
44825: CALL_OW 257
44829: PUSH
44830: LD_INT 8
44832: EQUAL
44833: IFFALSE 44854
// points := [ 35 , 35 , 30 ] ;
44835: LD_ADDR_VAR 0 9
44839: PUSH
44840: LD_INT 35
44842: PUSH
44843: LD_INT 35
44845: PUSH
44846: LD_INT 30
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: LIST
44853: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44854: LD_VAR 0 6
44858: PPUSH
44859: CALL_OW 257
44863: PUSH
44864: LD_INT 9
44866: EQUAL
44867: IFFALSE 44888
// points := [ 20 , 55 , 40 ] ;
44869: LD_ADDR_VAR 0 9
44873: PUSH
44874: LD_INT 20
44876: PUSH
44877: LD_INT 55
44879: PUSH
44880: LD_INT 40
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: LIST
44887: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44888: LD_VAR 0 6
44892: PPUSH
44893: CALL_OW 257
44897: PUSH
44898: LD_INT 12
44900: PUSH
44901: LD_INT 16
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: IN
44908: IFFALSE 44929
// points := [ 5 , 3 , 2 ] ;
44910: LD_ADDR_VAR 0 9
44914: PUSH
44915: LD_INT 5
44917: PUSH
44918: LD_INT 3
44920: PUSH
44921: LD_INT 2
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: LIST
44928: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44929: LD_VAR 0 6
44933: PPUSH
44934: CALL_OW 257
44938: PUSH
44939: LD_INT 17
44941: EQUAL
44942: IFFALSE 44963
// points := [ 100 , 50 , 75 ] ;
44944: LD_ADDR_VAR 0 9
44948: PUSH
44949: LD_INT 100
44951: PUSH
44952: LD_INT 50
44954: PUSH
44955: LD_INT 75
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: LIST
44962: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44963: LD_VAR 0 6
44967: PPUSH
44968: CALL_OW 257
44972: PUSH
44973: LD_INT 15
44975: EQUAL
44976: IFFALSE 44997
// points := [ 10 , 5 , 3 ] ;
44978: LD_ADDR_VAR 0 9
44982: PUSH
44983: LD_INT 10
44985: PUSH
44986: LD_INT 5
44988: PUSH
44989: LD_INT 3
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: LIST
44996: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44997: LD_VAR 0 6
45001: PPUSH
45002: CALL_OW 257
45006: PUSH
45007: LD_INT 14
45009: EQUAL
45010: IFFALSE 45031
// points := [ 10 , 0 , 0 ] ;
45012: LD_ADDR_VAR 0 9
45016: PUSH
45017: LD_INT 10
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: LIST
45030: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45031: LD_VAR 0 6
45035: PPUSH
45036: CALL_OW 257
45040: PUSH
45041: LD_INT 11
45043: EQUAL
45044: IFFALSE 45065
// points := [ 30 , 10 , 5 ] ;
45046: LD_ADDR_VAR 0 9
45050: PUSH
45051: LD_INT 30
45053: PUSH
45054: LD_INT 10
45056: PUSH
45057: LD_INT 5
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: LIST
45064: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45065: LD_VAR 0 1
45069: PPUSH
45070: LD_INT 5
45072: PPUSH
45073: CALL_OW 321
45077: PUSH
45078: LD_INT 2
45080: EQUAL
45081: IFFALSE 45098
// bpoints := bpoints * 1.8 ;
45083: LD_ADDR_VAR 0 10
45087: PUSH
45088: LD_VAR 0 10
45092: PUSH
45093: LD_REAL  1.80000000000000E+0000
45096: MUL
45097: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45098: LD_VAR 0 6
45102: PPUSH
45103: CALL_OW 257
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: LD_INT 2
45113: PUSH
45114: LD_INT 3
45116: PUSH
45117: LD_INT 4
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: IN
45126: IFFALSE 45146
45128: PUSH
45129: LD_VAR 0 1
45133: PPUSH
45134: LD_INT 51
45136: PPUSH
45137: CALL_OW 321
45141: PUSH
45142: LD_INT 2
45144: EQUAL
45145: AND
45146: IFFALSE 45163
// bpoints := bpoints * 1.2 ;
45148: LD_ADDR_VAR 0 10
45152: PUSH
45153: LD_VAR 0 10
45157: PUSH
45158: LD_REAL  1.20000000000000E+0000
45161: MUL
45162: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45163: LD_VAR 0 6
45167: PPUSH
45168: CALL_OW 257
45172: PUSH
45173: LD_INT 5
45175: PUSH
45176: LD_INT 7
45178: PUSH
45179: LD_INT 9
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: LIST
45186: IN
45187: IFFALSE 45207
45189: PUSH
45190: LD_VAR 0 1
45194: PPUSH
45195: LD_INT 52
45197: PPUSH
45198: CALL_OW 321
45202: PUSH
45203: LD_INT 2
45205: EQUAL
45206: AND
45207: IFFALSE 45224
// bpoints := bpoints * 1.5 ;
45209: LD_ADDR_VAR 0 10
45213: PUSH
45214: LD_VAR 0 10
45218: PUSH
45219: LD_REAL  1.50000000000000E+0000
45222: MUL
45223: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45224: LD_VAR 0 1
45228: PPUSH
45229: LD_INT 66
45231: PPUSH
45232: CALL_OW 321
45236: PUSH
45237: LD_INT 2
45239: EQUAL
45240: IFFALSE 45257
// bpoints := bpoints * 1.1 ;
45242: LD_ADDR_VAR 0 10
45246: PUSH
45247: LD_VAR 0 10
45251: PUSH
45252: LD_REAL  1.10000000000000E+0000
45255: MUL
45256: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45257: LD_ADDR_VAR 0 10
45261: PUSH
45262: LD_VAR 0 10
45266: PUSH
45267: LD_VAR 0 6
45271: PPUSH
45272: LD_INT 1
45274: PPUSH
45275: CALL_OW 259
45279: PUSH
45280: LD_REAL  1.15000000000000E+0000
45283: MUL
45284: MUL
45285: ST_TO_ADDR
// end ; unit_vehicle :
45286: GO 46116
45288: LD_INT 2
45290: DOUBLE
45291: EQUAL
45292: IFTRUE 45296
45294: GO 46104
45296: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45297: LD_VAR 0 6
45301: PPUSH
45302: CALL_OW 264
45306: PUSH
45307: LD_INT 2
45309: PUSH
45310: LD_INT 42
45312: PUSH
45313: LD_INT 24
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: LIST
45320: IN
45321: IFFALSE 45342
// points := [ 25 , 5 , 3 ] ;
45323: LD_ADDR_VAR 0 9
45327: PUSH
45328: LD_INT 25
45330: PUSH
45331: LD_INT 5
45333: PUSH
45334: LD_INT 3
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: LIST
45341: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45342: LD_VAR 0 6
45346: PPUSH
45347: CALL_OW 264
45351: PUSH
45352: LD_INT 4
45354: PUSH
45355: LD_INT 43
45357: PUSH
45358: LD_INT 25
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: LIST
45365: IN
45366: IFFALSE 45387
// points := [ 40 , 15 , 5 ] ;
45368: LD_ADDR_VAR 0 9
45372: PUSH
45373: LD_INT 40
45375: PUSH
45376: LD_INT 15
45378: PUSH
45379: LD_INT 5
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: LIST
45386: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45387: LD_VAR 0 6
45391: PPUSH
45392: CALL_OW 264
45396: PUSH
45397: LD_INT 3
45399: PUSH
45400: LD_INT 23
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: IN
45407: IFFALSE 45428
// points := [ 7 , 25 , 8 ] ;
45409: LD_ADDR_VAR 0 9
45413: PUSH
45414: LD_INT 7
45416: PUSH
45417: LD_INT 25
45419: PUSH
45420: LD_INT 8
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: LIST
45427: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45428: LD_VAR 0 6
45432: PPUSH
45433: CALL_OW 264
45437: PUSH
45438: LD_INT 5
45440: PUSH
45441: LD_INT 27
45443: PUSH
45444: LD_INT 44
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: LIST
45451: IN
45452: IFFALSE 45473
// points := [ 14 , 50 , 16 ] ;
45454: LD_ADDR_VAR 0 9
45458: PUSH
45459: LD_INT 14
45461: PUSH
45462: LD_INT 50
45464: PUSH
45465: LD_INT 16
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: LIST
45472: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45473: LD_VAR 0 6
45477: PPUSH
45478: CALL_OW 264
45482: PUSH
45483: LD_INT 6
45485: PUSH
45486: LD_INT 46
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: IN
45493: IFFALSE 45514
// points := [ 32 , 120 , 70 ] ;
45495: LD_ADDR_VAR 0 9
45499: PUSH
45500: LD_INT 32
45502: PUSH
45503: LD_INT 120
45505: PUSH
45506: LD_INT 70
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: LIST
45513: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45514: LD_VAR 0 6
45518: PPUSH
45519: CALL_OW 264
45523: PUSH
45524: LD_INT 7
45526: PUSH
45527: LD_INT 28
45529: PUSH
45530: LD_INT 45
45532: PUSH
45533: LD_INT 92
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: IN
45542: IFFALSE 45563
// points := [ 35 , 20 , 45 ] ;
45544: LD_ADDR_VAR 0 9
45548: PUSH
45549: LD_INT 35
45551: PUSH
45552: LD_INT 20
45554: PUSH
45555: LD_INT 45
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: LIST
45562: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45563: LD_VAR 0 6
45567: PPUSH
45568: CALL_OW 264
45572: PUSH
45573: LD_INT 47
45575: PUSH
45576: EMPTY
45577: LIST
45578: IN
45579: IFFALSE 45600
// points := [ 67 , 45 , 75 ] ;
45581: LD_ADDR_VAR 0 9
45585: PUSH
45586: LD_INT 67
45588: PUSH
45589: LD_INT 45
45591: PUSH
45592: LD_INT 75
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: LIST
45599: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45600: LD_VAR 0 6
45604: PPUSH
45605: CALL_OW 264
45609: PUSH
45610: LD_INT 26
45612: PUSH
45613: EMPTY
45614: LIST
45615: IN
45616: IFFALSE 45637
// points := [ 120 , 30 , 80 ] ;
45618: LD_ADDR_VAR 0 9
45622: PUSH
45623: LD_INT 120
45625: PUSH
45626: LD_INT 30
45628: PUSH
45629: LD_INT 80
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: LIST
45636: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45637: LD_VAR 0 6
45641: PPUSH
45642: CALL_OW 264
45646: PUSH
45647: LD_INT 22
45649: PUSH
45650: EMPTY
45651: LIST
45652: IN
45653: IFFALSE 45674
// points := [ 40 , 1 , 1 ] ;
45655: LD_ADDR_VAR 0 9
45659: PUSH
45660: LD_INT 40
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: LIST
45673: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45674: LD_VAR 0 6
45678: PPUSH
45679: CALL_OW 264
45683: PUSH
45684: LD_INT 29
45686: PUSH
45687: EMPTY
45688: LIST
45689: IN
45690: IFFALSE 45711
// points := [ 70 , 200 , 400 ] ;
45692: LD_ADDR_VAR 0 9
45696: PUSH
45697: LD_INT 70
45699: PUSH
45700: LD_INT 200
45702: PUSH
45703: LD_INT 400
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: LIST
45710: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45711: LD_VAR 0 6
45715: PPUSH
45716: CALL_OW 264
45720: PUSH
45721: LD_INT 14
45723: PUSH
45724: LD_INT 53
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: IN
45731: IFFALSE 45752
// points := [ 40 , 10 , 20 ] ;
45733: LD_ADDR_VAR 0 9
45737: PUSH
45738: LD_INT 40
45740: PUSH
45741: LD_INT 10
45743: PUSH
45744: LD_INT 20
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: LIST
45751: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45752: LD_VAR 0 6
45756: PPUSH
45757: CALL_OW 264
45761: PUSH
45762: LD_INT 9
45764: PUSH
45765: EMPTY
45766: LIST
45767: IN
45768: IFFALSE 45789
// points := [ 5 , 70 , 20 ] ;
45770: LD_ADDR_VAR 0 9
45774: PUSH
45775: LD_INT 5
45777: PUSH
45778: LD_INT 70
45780: PUSH
45781: LD_INT 20
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: LIST
45788: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45789: LD_VAR 0 6
45793: PPUSH
45794: CALL_OW 264
45798: PUSH
45799: LD_INT 10
45801: PUSH
45802: EMPTY
45803: LIST
45804: IN
45805: IFFALSE 45826
// points := [ 35 , 110 , 70 ] ;
45807: LD_ADDR_VAR 0 9
45811: PUSH
45812: LD_INT 35
45814: PUSH
45815: LD_INT 110
45817: PUSH
45818: LD_INT 70
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: LIST
45825: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45826: LD_VAR 0 6
45830: PPUSH
45831: CALL_OW 265
45835: PUSH
45836: LD_INT 25
45838: EQUAL
45839: IFFALSE 45860
// points := [ 80 , 65 , 100 ] ;
45841: LD_ADDR_VAR 0 9
45845: PUSH
45846: LD_INT 80
45848: PUSH
45849: LD_INT 65
45851: PUSH
45852: LD_INT 100
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: LIST
45859: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45860: LD_VAR 0 6
45864: PPUSH
45865: CALL_OW 263
45869: PUSH
45870: LD_INT 1
45872: EQUAL
45873: IFFALSE 45908
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45875: LD_ADDR_VAR 0 10
45879: PUSH
45880: LD_VAR 0 10
45884: PUSH
45885: LD_VAR 0 6
45889: PPUSH
45890: CALL_OW 311
45894: PPUSH
45895: LD_INT 3
45897: PPUSH
45898: CALL_OW 259
45902: PUSH
45903: LD_INT 4
45905: MUL
45906: MUL
45907: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45908: LD_VAR 0 6
45912: PPUSH
45913: CALL_OW 263
45917: PUSH
45918: LD_INT 2
45920: EQUAL
45921: IFFALSE 45972
// begin j := IsControledBy ( i ) ;
45923: LD_ADDR_VAR 0 7
45927: PUSH
45928: LD_VAR 0 6
45932: PPUSH
45933: CALL_OW 312
45937: ST_TO_ADDR
// if j then
45938: LD_VAR 0 7
45942: IFFALSE 45972
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45944: LD_ADDR_VAR 0 10
45948: PUSH
45949: LD_VAR 0 10
45953: PUSH
45954: LD_VAR 0 7
45958: PPUSH
45959: LD_INT 3
45961: PPUSH
45962: CALL_OW 259
45966: PUSH
45967: LD_INT 3
45969: MUL
45970: MUL
45971: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45972: LD_VAR 0 6
45976: PPUSH
45977: CALL_OW 264
45981: PUSH
45982: LD_INT 5
45984: PUSH
45985: LD_INT 6
45987: PUSH
45988: LD_INT 46
45990: PUSH
45991: LD_INT 44
45993: PUSH
45994: LD_INT 47
45996: PUSH
45997: LD_INT 45
45999: PUSH
46000: LD_INT 28
46002: PUSH
46003: LD_INT 7
46005: PUSH
46006: LD_INT 27
46008: PUSH
46009: LD_INT 29
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: IN
46024: IFFALSE 46044
46026: PUSH
46027: LD_VAR 0 1
46031: PPUSH
46032: LD_INT 52
46034: PPUSH
46035: CALL_OW 321
46039: PUSH
46040: LD_INT 2
46042: EQUAL
46043: AND
46044: IFFALSE 46061
// bpoints := bpoints * 1.2 ;
46046: LD_ADDR_VAR 0 10
46050: PUSH
46051: LD_VAR 0 10
46055: PUSH
46056: LD_REAL  1.20000000000000E+0000
46059: MUL
46060: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46061: LD_VAR 0 6
46065: PPUSH
46066: CALL_OW 264
46070: PUSH
46071: LD_INT 6
46073: PUSH
46074: LD_INT 46
46076: PUSH
46077: LD_INT 47
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: LIST
46084: IN
46085: IFFALSE 46102
// bpoints := bpoints * 1.2 ;
46087: LD_ADDR_VAR 0 10
46091: PUSH
46092: LD_VAR 0 10
46096: PUSH
46097: LD_REAL  1.20000000000000E+0000
46100: MUL
46101: ST_TO_ADDR
// end ; unit_building :
46102: GO 46116
46104: LD_INT 3
46106: DOUBLE
46107: EQUAL
46108: IFTRUE 46112
46110: GO 46115
46112: POP
// ; end ;
46113: GO 46116
46115: POP
// for j = 1 to 3 do
46116: LD_ADDR_VAR 0 7
46120: PUSH
46121: DOUBLE
46122: LD_INT 1
46124: DEC
46125: ST_TO_ADDR
46126: LD_INT 3
46128: PUSH
46129: FOR_TO
46130: IFFALSE 46183
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46132: LD_ADDR_VAR 0 5
46136: PUSH
46137: LD_VAR 0 5
46141: PPUSH
46142: LD_VAR 0 7
46146: PPUSH
46147: LD_VAR 0 5
46151: PUSH
46152: LD_VAR 0 7
46156: ARRAY
46157: PUSH
46158: LD_VAR 0 9
46162: PUSH
46163: LD_VAR 0 7
46167: ARRAY
46168: PUSH
46169: LD_VAR 0 10
46173: MUL
46174: PLUS
46175: PPUSH
46176: CALL_OW 1
46180: ST_TO_ADDR
46181: GO 46129
46183: POP
46184: POP
// end ;
46185: GO 44658
46187: POP
46188: POP
// result := Replace ( result , 4 , tmp ) ;
46189: LD_ADDR_VAR 0 5
46193: PUSH
46194: LD_VAR 0 5
46198: PPUSH
46199: LD_INT 4
46201: PPUSH
46202: LD_VAR 0 8
46206: PPUSH
46207: CALL_OW 1
46211: ST_TO_ADDR
// end ;
46212: LD_VAR 0 5
46216: RET
// export function DangerAtRange ( unit , range ) ; begin
46217: LD_INT 0
46219: PPUSH
// if not unit then
46220: LD_VAR 0 1
46224: NOT
46225: IFFALSE 46229
// exit ;
46227: GO 46274
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46229: LD_ADDR_VAR 0 3
46233: PUSH
46234: LD_VAR 0 1
46238: PPUSH
46239: CALL_OW 255
46243: PPUSH
46244: LD_VAR 0 1
46248: PPUSH
46249: CALL_OW 250
46253: PPUSH
46254: LD_VAR 0 1
46258: PPUSH
46259: CALL_OW 251
46263: PPUSH
46264: LD_VAR 0 2
46268: PPUSH
46269: CALL 44508 0 4
46273: ST_TO_ADDR
// end ;
46274: LD_VAR 0 3
46278: RET
// export function DangerInArea ( side , area ) ; begin
46279: LD_INT 0
46281: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46282: LD_ADDR_VAR 0 3
46286: PUSH
46287: LD_VAR 0 2
46291: PPUSH
46292: LD_INT 81
46294: PUSH
46295: LD_VAR 0 1
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PPUSH
46304: CALL_OW 70
46308: ST_TO_ADDR
// end ;
46309: LD_VAR 0 3
46313: RET
// export function IsExtension ( b ) ; begin
46314: LD_INT 0
46316: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46317: LD_ADDR_VAR 0 2
46321: PUSH
46322: LD_VAR 0 1
46326: PUSH
46327: LD_INT 23
46329: PUSH
46330: LD_INT 20
46332: PUSH
46333: LD_INT 22
46335: PUSH
46336: LD_INT 17
46338: PUSH
46339: LD_INT 24
46341: PUSH
46342: LD_INT 21
46344: PUSH
46345: LD_INT 19
46347: PUSH
46348: LD_INT 16
46350: PUSH
46351: LD_INT 25
46353: PUSH
46354: LD_INT 18
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: IN
46369: ST_TO_ADDR
// end ;
46370: LD_VAR 0 2
46374: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46375: LD_INT 0
46377: PPUSH
46378: PPUSH
46379: PPUSH
// result := [ ] ;
46380: LD_ADDR_VAR 0 4
46384: PUSH
46385: EMPTY
46386: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46387: LD_ADDR_VAR 0 5
46391: PUSH
46392: LD_VAR 0 2
46396: PPUSH
46397: LD_INT 21
46399: PUSH
46400: LD_INT 3
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PPUSH
46407: CALL_OW 70
46411: ST_TO_ADDR
// if not tmp then
46412: LD_VAR 0 5
46416: NOT
46417: IFFALSE 46421
// exit ;
46419: GO 46485
// if checkLink then
46421: LD_VAR 0 3
46425: IFFALSE 46475
// begin for i in tmp do
46427: LD_ADDR_VAR 0 6
46431: PUSH
46432: LD_VAR 0 5
46436: PUSH
46437: FOR_IN
46438: IFFALSE 46473
// if GetBase ( i ) <> base then
46440: LD_VAR 0 6
46444: PPUSH
46445: CALL_OW 274
46449: PUSH
46450: LD_VAR 0 1
46454: NONEQUAL
46455: IFFALSE 46471
// ComLinkToBase ( base , i ) ;
46457: LD_VAR 0 1
46461: PPUSH
46462: LD_VAR 0 6
46466: PPUSH
46467: CALL_OW 169
46471: GO 46437
46473: POP
46474: POP
// end ; result := tmp ;
46475: LD_ADDR_VAR 0 4
46479: PUSH
46480: LD_VAR 0 5
46484: ST_TO_ADDR
// end ;
46485: LD_VAR 0 4
46489: RET
// export function ComComplete ( units , b ) ; var i ; begin
46490: LD_INT 0
46492: PPUSH
46493: PPUSH
// if not units then
46494: LD_VAR 0 1
46498: NOT
46499: IFFALSE 46503
// exit ;
46501: GO 46593
// for i in units do
46503: LD_ADDR_VAR 0 4
46507: PUSH
46508: LD_VAR 0 1
46512: PUSH
46513: FOR_IN
46514: IFFALSE 46591
// if BuildingStatus ( b ) = bs_build then
46516: LD_VAR 0 2
46520: PPUSH
46521: CALL_OW 461
46525: PUSH
46526: LD_INT 1
46528: EQUAL
46529: IFFALSE 46589
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46531: LD_VAR 0 4
46535: PPUSH
46536: LD_STRING h
46538: PUSH
46539: LD_VAR 0 2
46543: PPUSH
46544: CALL_OW 250
46548: PUSH
46549: LD_VAR 0 2
46553: PPUSH
46554: CALL_OW 251
46558: PUSH
46559: LD_VAR 0 2
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: PUSH
46582: EMPTY
46583: LIST
46584: PPUSH
46585: CALL_OW 446
46589: GO 46513
46591: POP
46592: POP
// end ;
46593: LD_VAR 0 3
46597: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46598: LD_INT 0
46600: PPUSH
46601: PPUSH
46602: PPUSH
46603: PPUSH
46604: PPUSH
46605: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46606: LD_VAR 0 1
46610: NOT
46611: IFTRUE 46628
46613: PUSH
46614: LD_VAR 0 1
46618: PPUSH
46619: CALL_OW 263
46623: PUSH
46624: LD_INT 2
46626: NONEQUAL
46627: OR
46628: IFFALSE 46632
// exit ;
46630: GO 46948
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46632: LD_ADDR_VAR 0 6
46636: PUSH
46637: LD_INT 22
46639: PUSH
46640: LD_VAR 0 1
46644: PPUSH
46645: CALL_OW 255
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 2
46656: PUSH
46657: LD_INT 30
46659: PUSH
46660: LD_INT 36
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 34
46669: PUSH
46670: LD_INT 31
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: LIST
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PPUSH
46686: CALL_OW 69
46690: ST_TO_ADDR
// if not tmp then
46691: LD_VAR 0 6
46695: NOT
46696: IFFALSE 46700
// exit ;
46698: GO 46948
// result := [ ] ;
46700: LD_ADDR_VAR 0 2
46704: PUSH
46705: EMPTY
46706: ST_TO_ADDR
// for i in tmp do
46707: LD_ADDR_VAR 0 3
46711: PUSH
46712: LD_VAR 0 6
46716: PUSH
46717: FOR_IN
46718: IFFALSE 46789
// begin t := UnitsInside ( i ) ;
46720: LD_ADDR_VAR 0 4
46724: PUSH
46725: LD_VAR 0 3
46729: PPUSH
46730: CALL_OW 313
46734: ST_TO_ADDR
// if t then
46735: LD_VAR 0 4
46739: IFFALSE 46787
// for j in t do
46741: LD_ADDR_VAR 0 7
46745: PUSH
46746: LD_VAR 0 4
46750: PUSH
46751: FOR_IN
46752: IFFALSE 46785
// result := Replace ( result , result + 1 , j ) ;
46754: LD_ADDR_VAR 0 2
46758: PUSH
46759: LD_VAR 0 2
46763: PPUSH
46764: LD_VAR 0 2
46768: PUSH
46769: LD_INT 1
46771: PLUS
46772: PPUSH
46773: LD_VAR 0 7
46777: PPUSH
46778: CALL_OW 1
46782: ST_TO_ADDR
46783: GO 46751
46785: POP
46786: POP
// end ;
46787: GO 46717
46789: POP
46790: POP
// if not result then
46791: LD_VAR 0 2
46795: NOT
46796: IFFALSE 46800
// exit ;
46798: GO 46948
// mech := result [ 1 ] ;
46800: LD_ADDR_VAR 0 5
46804: PUSH
46805: LD_VAR 0 2
46809: PUSH
46810: LD_INT 1
46812: ARRAY
46813: ST_TO_ADDR
// if result > 1 then
46814: LD_VAR 0 2
46818: PUSH
46819: LD_INT 1
46821: GREATER
46822: IFFALSE 46934
// begin for i = 2 to result do
46824: LD_ADDR_VAR 0 3
46828: PUSH
46829: DOUBLE
46830: LD_INT 2
46832: DEC
46833: ST_TO_ADDR
46834: LD_VAR 0 2
46838: PUSH
46839: FOR_TO
46840: IFFALSE 46932
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46842: LD_ADDR_VAR 0 4
46846: PUSH
46847: LD_VAR 0 2
46851: PUSH
46852: LD_VAR 0 3
46856: ARRAY
46857: PPUSH
46858: LD_INT 3
46860: PPUSH
46861: CALL_OW 259
46865: PUSH
46866: LD_VAR 0 2
46870: PUSH
46871: LD_VAR 0 3
46875: ARRAY
46876: PPUSH
46877: CALL_OW 432
46881: MINUS
46882: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46883: LD_VAR 0 4
46887: PUSH
46888: LD_VAR 0 5
46892: PPUSH
46893: LD_INT 3
46895: PPUSH
46896: CALL_OW 259
46900: PUSH
46901: LD_VAR 0 5
46905: PPUSH
46906: CALL_OW 432
46910: MINUS
46911: GREATEREQUAL
46912: IFFALSE 46930
// mech := result [ i ] ;
46914: LD_ADDR_VAR 0 5
46918: PUSH
46919: LD_VAR 0 2
46923: PUSH
46924: LD_VAR 0 3
46928: ARRAY
46929: ST_TO_ADDR
// end ;
46930: GO 46839
46932: POP
46933: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46934: LD_VAR 0 1
46938: PPUSH
46939: LD_VAR 0 5
46943: PPUSH
46944: CALL_OW 135
// end ;
46948: LD_VAR 0 2
46952: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46953: LD_INT 0
46955: PPUSH
46956: PPUSH
46957: PPUSH
46958: PPUSH
46959: PPUSH
46960: PPUSH
46961: PPUSH
46962: PPUSH
46963: PPUSH
46964: PPUSH
46965: PPUSH
46966: PPUSH
46967: PPUSH
// result := [ ] ;
46968: LD_ADDR_VAR 0 7
46972: PUSH
46973: EMPTY
46974: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46975: LD_VAR 0 1
46979: PPUSH
46980: CALL_OW 266
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: LD_INT 1
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: IN
46995: NOT
46996: IFFALSE 47000
// exit ;
46998: GO 48640
// if name then
47000: LD_VAR 0 3
47004: IFFALSE 47020
// SetBName ( base_dep , name ) ;
47006: LD_VAR 0 1
47010: PPUSH
47011: LD_VAR 0 3
47015: PPUSH
47016: CALL_OW 500
// base := GetBase ( base_dep ) ;
47020: LD_ADDR_VAR 0 15
47024: PUSH
47025: LD_VAR 0 1
47029: PPUSH
47030: CALL_OW 274
47034: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47035: LD_ADDR_VAR 0 16
47039: PUSH
47040: LD_VAR 0 1
47044: PPUSH
47045: CALL_OW 255
47049: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47050: LD_ADDR_VAR 0 17
47054: PUSH
47055: LD_VAR 0 1
47059: PPUSH
47060: CALL_OW 248
47064: ST_TO_ADDR
// if sources then
47065: LD_VAR 0 5
47069: IFFALSE 47116
// for i = 1 to 3 do
47071: LD_ADDR_VAR 0 8
47075: PUSH
47076: DOUBLE
47077: LD_INT 1
47079: DEC
47080: ST_TO_ADDR
47081: LD_INT 3
47083: PUSH
47084: FOR_TO
47085: IFFALSE 47114
// AddResourceType ( base , i , sources [ i ] ) ;
47087: LD_VAR 0 15
47091: PPUSH
47092: LD_VAR 0 8
47096: PPUSH
47097: LD_VAR 0 5
47101: PUSH
47102: LD_VAR 0 8
47106: ARRAY
47107: PPUSH
47108: CALL_OW 276
47112: GO 47084
47114: POP
47115: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47116: LD_ADDR_VAR 0 18
47120: PUSH
47121: LD_VAR 0 15
47125: PPUSH
47126: LD_VAR 0 2
47130: PPUSH
47131: LD_INT 1
47133: PPUSH
47134: CALL 46375 0 3
47138: ST_TO_ADDR
// InitHc ;
47139: CALL_OW 19
// InitUc ;
47143: CALL_OW 18
// uc_side := side ;
47147: LD_ADDR_OWVAR 20
47151: PUSH
47152: LD_VAR 0 16
47156: ST_TO_ADDR
// uc_nation := nation ;
47157: LD_ADDR_OWVAR 21
47161: PUSH
47162: LD_VAR 0 17
47166: ST_TO_ADDR
// if buildings then
47167: LD_VAR 0 18
47171: IFFALSE 48499
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47173: LD_ADDR_VAR 0 19
47177: PUSH
47178: LD_VAR 0 18
47182: PPUSH
47183: LD_INT 2
47185: PUSH
47186: LD_INT 30
47188: PUSH
47189: LD_INT 29
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 30
47198: PUSH
47199: LD_INT 30
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: LIST
47210: PPUSH
47211: CALL_OW 72
47215: ST_TO_ADDR
// if tmp then
47216: LD_VAR 0 19
47220: IFFALSE 47268
// for i in tmp do
47222: LD_ADDR_VAR 0 8
47226: PUSH
47227: LD_VAR 0 19
47231: PUSH
47232: FOR_IN
47233: IFFALSE 47266
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47235: LD_VAR 0 8
47239: PPUSH
47240: CALL_OW 250
47244: PPUSH
47245: LD_VAR 0 8
47249: PPUSH
47250: CALL_OW 251
47254: PPUSH
47255: LD_VAR 0 16
47259: PPUSH
47260: CALL_OW 441
47264: GO 47232
47266: POP
47267: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47268: LD_VAR 0 18
47272: PPUSH
47273: LD_INT 2
47275: PUSH
47276: LD_INT 30
47278: PUSH
47279: LD_INT 32
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 30
47288: PUSH
47289: LD_INT 33
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: LIST
47300: PPUSH
47301: CALL_OW 72
47305: IFFALSE 47393
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47307: LD_ADDR_VAR 0 8
47311: PUSH
47312: LD_VAR 0 18
47316: PPUSH
47317: LD_INT 2
47319: PUSH
47320: LD_INT 30
47322: PUSH
47323: LD_INT 32
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 30
47332: PUSH
47333: LD_INT 33
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: LIST
47344: PPUSH
47345: CALL_OW 72
47349: PUSH
47350: FOR_IN
47351: IFFALSE 47391
// begin if not GetBWeapon ( i ) then
47353: LD_VAR 0 8
47357: PPUSH
47358: CALL_OW 269
47362: NOT
47363: IFFALSE 47389
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47365: LD_VAR 0 8
47369: PPUSH
47370: LD_VAR 0 8
47374: PPUSH
47375: LD_VAR 0 2
47379: PPUSH
47380: CALL 48645 0 2
47384: PPUSH
47385: CALL_OW 431
// end ;
47389: GO 47350
47391: POP
47392: POP
// end ; for i = 1 to personel do
47393: LD_ADDR_VAR 0 8
47397: PUSH
47398: DOUBLE
47399: LD_INT 1
47401: DEC
47402: ST_TO_ADDR
47403: LD_VAR 0 6
47407: PUSH
47408: FOR_TO
47409: IFFALSE 48479
// begin if i > 4 then
47411: LD_VAR 0 8
47415: PUSH
47416: LD_INT 4
47418: GREATER
47419: IFFALSE 47423
// break ;
47421: GO 48479
// case i of 1 :
47423: LD_VAR 0 8
47427: PUSH
47428: LD_INT 1
47430: DOUBLE
47431: EQUAL
47432: IFTRUE 47436
47434: GO 47516
47436: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47437: LD_ADDR_VAR 0 12
47441: PUSH
47442: LD_VAR 0 18
47446: PPUSH
47447: LD_INT 22
47449: PUSH
47450: LD_VAR 0 16
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 58
47461: PUSH
47462: EMPTY
47463: LIST
47464: PUSH
47465: LD_INT 2
47467: PUSH
47468: LD_INT 30
47470: PUSH
47471: LD_INT 32
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 30
47480: PUSH
47481: LD_INT 4
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 30
47490: PUSH
47491: LD_INT 5
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: LIST
47508: PPUSH
47509: CALL_OW 72
47513: ST_TO_ADDR
47514: GO 47738
47516: LD_INT 2
47518: DOUBLE
47519: EQUAL
47520: IFTRUE 47524
47522: GO 47586
47524: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47525: LD_ADDR_VAR 0 12
47529: PUSH
47530: LD_VAR 0 18
47534: PPUSH
47535: LD_INT 22
47537: PUSH
47538: LD_VAR 0 16
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 2
47549: PUSH
47550: LD_INT 30
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 30
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: LIST
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PPUSH
47579: CALL_OW 72
47583: ST_TO_ADDR
47584: GO 47738
47586: LD_INT 3
47588: DOUBLE
47589: EQUAL
47590: IFTRUE 47594
47592: GO 47656
47594: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47595: LD_ADDR_VAR 0 12
47599: PUSH
47600: LD_VAR 0 18
47604: PPUSH
47605: LD_INT 22
47607: PUSH
47608: LD_VAR 0 16
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 2
47619: PUSH
47620: LD_INT 30
47622: PUSH
47623: LD_INT 2
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 30
47632: PUSH
47633: LD_INT 3
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: LIST
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PPUSH
47649: CALL_OW 72
47653: ST_TO_ADDR
47654: GO 47738
47656: LD_INT 4
47658: DOUBLE
47659: EQUAL
47660: IFTRUE 47664
47662: GO 47737
47664: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47665: LD_ADDR_VAR 0 12
47669: PUSH
47670: LD_VAR 0 18
47674: PPUSH
47675: LD_INT 22
47677: PUSH
47678: LD_VAR 0 16
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 2
47689: PUSH
47690: LD_INT 30
47692: PUSH
47693: LD_INT 6
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 30
47702: PUSH
47703: LD_INT 7
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 30
47712: PUSH
47713: LD_INT 8
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PPUSH
47730: CALL_OW 72
47734: ST_TO_ADDR
47735: GO 47738
47737: POP
// if i = 1 then
47738: LD_VAR 0 8
47742: PUSH
47743: LD_INT 1
47745: EQUAL
47746: IFFALSE 47857
// begin tmp := [ ] ;
47748: LD_ADDR_VAR 0 19
47752: PUSH
47753: EMPTY
47754: ST_TO_ADDR
// for j in f do
47755: LD_ADDR_VAR 0 9
47759: PUSH
47760: LD_VAR 0 12
47764: PUSH
47765: FOR_IN
47766: IFFALSE 47839
// if GetBType ( j ) = b_bunker then
47768: LD_VAR 0 9
47772: PPUSH
47773: CALL_OW 266
47777: PUSH
47778: LD_INT 32
47780: EQUAL
47781: IFFALSE 47808
// tmp := Insert ( tmp , 1 , j ) else
47783: LD_ADDR_VAR 0 19
47787: PUSH
47788: LD_VAR 0 19
47792: PPUSH
47793: LD_INT 1
47795: PPUSH
47796: LD_VAR 0 9
47800: PPUSH
47801: CALL_OW 2
47805: ST_TO_ADDR
47806: GO 47837
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47808: LD_ADDR_VAR 0 19
47812: PUSH
47813: LD_VAR 0 19
47817: PPUSH
47818: LD_VAR 0 19
47822: PUSH
47823: LD_INT 1
47825: PLUS
47826: PPUSH
47827: LD_VAR 0 9
47831: PPUSH
47832: CALL_OW 2
47836: ST_TO_ADDR
47837: GO 47765
47839: POP
47840: POP
// if tmp then
47841: LD_VAR 0 19
47845: IFFALSE 47857
// f := tmp ;
47847: LD_ADDR_VAR 0 12
47851: PUSH
47852: LD_VAR 0 19
47856: ST_TO_ADDR
// end ; x := personel [ i ] ;
47857: LD_ADDR_VAR 0 13
47861: PUSH
47862: LD_VAR 0 6
47866: PUSH
47867: LD_VAR 0 8
47871: ARRAY
47872: ST_TO_ADDR
// if x = - 1 then
47873: LD_VAR 0 13
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: EQUAL
47882: IFFALSE 48093
// begin for j in f do
47884: LD_ADDR_VAR 0 9
47888: PUSH
47889: LD_VAR 0 12
47893: PUSH
47894: FOR_IN
47895: IFFALSE 48089
// repeat InitHc ;
47897: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47901: LD_VAR 0 9
47905: PPUSH
47906: CALL_OW 266
47910: PUSH
47911: LD_INT 5
47913: EQUAL
47914: IFFALSE 47984
// begin if UnitsInside ( j ) < 3 then
47916: LD_VAR 0 9
47920: PPUSH
47921: CALL_OW 313
47925: PUSH
47926: LD_INT 3
47928: LESS
47929: IFFALSE 47965
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47931: LD_INT 0
47933: PPUSH
47934: LD_INT 5
47936: PUSH
47937: LD_INT 8
47939: PUSH
47940: LD_INT 9
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: LIST
47947: PUSH
47948: LD_VAR 0 17
47952: ARRAY
47953: PPUSH
47954: LD_VAR 0 4
47958: PPUSH
47959: CALL_OW 380
47963: GO 47982
// PrepareHuman ( false , i , skill ) ;
47965: LD_INT 0
47967: PPUSH
47968: LD_VAR 0 8
47972: PPUSH
47973: LD_VAR 0 4
47977: PPUSH
47978: CALL_OW 380
// end else
47982: GO 48001
// PrepareHuman ( false , i , skill ) ;
47984: LD_INT 0
47986: PPUSH
47987: LD_VAR 0 8
47991: PPUSH
47992: LD_VAR 0 4
47996: PPUSH
47997: CALL_OW 380
// un := CreateHuman ;
48001: LD_ADDR_VAR 0 14
48005: PUSH
48006: CALL_OW 44
48010: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48011: LD_ADDR_VAR 0 7
48015: PUSH
48016: LD_VAR 0 7
48020: PPUSH
48021: LD_INT 1
48023: PPUSH
48024: LD_VAR 0 14
48028: PPUSH
48029: CALL_OW 2
48033: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48034: LD_VAR 0 14
48038: PPUSH
48039: LD_VAR 0 9
48043: PPUSH
48044: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48048: LD_VAR 0 9
48052: PPUSH
48053: CALL_OW 313
48057: PUSH
48058: LD_INT 6
48060: EQUAL
48061: IFTRUE 48085
48063: PUSH
48064: LD_VAR 0 9
48068: PPUSH
48069: CALL_OW 266
48073: PUSH
48074: LD_INT 32
48076: PUSH
48077: LD_INT 31
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: IN
48084: OR
48085: IFFALSE 47897
48087: GO 47894
48089: POP
48090: POP
// end else
48091: GO 48477
// for j = 1 to x do
48093: LD_ADDR_VAR 0 9
48097: PUSH
48098: DOUBLE
48099: LD_INT 1
48101: DEC
48102: ST_TO_ADDR
48103: LD_VAR 0 13
48107: PUSH
48108: FOR_TO
48109: IFFALSE 48475
// begin InitHc ;
48111: CALL_OW 19
// if not f then
48115: LD_VAR 0 12
48119: NOT
48120: IFFALSE 48209
// begin PrepareHuman ( false , i , skill ) ;
48122: LD_INT 0
48124: PPUSH
48125: LD_VAR 0 8
48129: PPUSH
48130: LD_VAR 0 4
48134: PPUSH
48135: CALL_OW 380
// un := CreateHuman ;
48139: LD_ADDR_VAR 0 14
48143: PUSH
48144: CALL_OW 44
48148: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48149: LD_ADDR_VAR 0 7
48153: PUSH
48154: LD_VAR 0 7
48158: PPUSH
48159: LD_INT 1
48161: PPUSH
48162: LD_VAR 0 14
48166: PPUSH
48167: CALL_OW 2
48171: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48172: LD_VAR 0 14
48176: PPUSH
48177: LD_VAR 0 1
48181: PPUSH
48182: CALL_OW 250
48186: PPUSH
48187: LD_VAR 0 1
48191: PPUSH
48192: CALL_OW 251
48196: PPUSH
48197: LD_INT 10
48199: PPUSH
48200: LD_INT 0
48202: PPUSH
48203: CALL_OW 50
// continue ;
48207: GO 48108
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48209: LD_VAR 0 12
48213: PUSH
48214: LD_INT 1
48216: ARRAY
48217: PPUSH
48218: CALL_OW 313
48222: IFFALSE 48250
48224: PUSH
48225: LD_VAR 0 12
48229: PUSH
48230: LD_INT 1
48232: ARRAY
48233: PPUSH
48234: CALL_OW 266
48238: PUSH
48239: LD_INT 32
48241: PUSH
48242: LD_INT 31
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: IN
48249: AND
48250: IFTRUE 48271
48252: PUSH
48253: LD_VAR 0 12
48257: PUSH
48258: LD_INT 1
48260: ARRAY
48261: PPUSH
48262: CALL_OW 313
48266: PUSH
48267: LD_INT 6
48269: EQUAL
48270: OR
48271: IFFALSE 48291
// f := Delete ( f , 1 ) ;
48273: LD_ADDR_VAR 0 12
48277: PUSH
48278: LD_VAR 0 12
48282: PPUSH
48283: LD_INT 1
48285: PPUSH
48286: CALL_OW 3
48290: ST_TO_ADDR
// if not f then
48291: LD_VAR 0 12
48295: NOT
48296: IFFALSE 48314
// begin x := x + 2 ;
48298: LD_ADDR_VAR 0 13
48302: PUSH
48303: LD_VAR 0 13
48307: PUSH
48308: LD_INT 2
48310: PLUS
48311: ST_TO_ADDR
// continue ;
48312: GO 48108
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48314: LD_VAR 0 12
48318: PUSH
48319: LD_INT 1
48321: ARRAY
48322: PPUSH
48323: CALL_OW 266
48327: PUSH
48328: LD_INT 5
48330: EQUAL
48331: IFFALSE 48405
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48333: LD_VAR 0 12
48337: PUSH
48338: LD_INT 1
48340: ARRAY
48341: PPUSH
48342: CALL_OW 313
48346: PUSH
48347: LD_INT 3
48349: LESS
48350: IFFALSE 48386
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48352: LD_INT 0
48354: PPUSH
48355: LD_INT 5
48357: PUSH
48358: LD_INT 8
48360: PUSH
48361: LD_INT 9
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: LIST
48368: PUSH
48369: LD_VAR 0 17
48373: ARRAY
48374: PPUSH
48375: LD_VAR 0 4
48379: PPUSH
48380: CALL_OW 380
48384: GO 48403
// PrepareHuman ( false , i , skill ) ;
48386: LD_INT 0
48388: PPUSH
48389: LD_VAR 0 8
48393: PPUSH
48394: LD_VAR 0 4
48398: PPUSH
48399: CALL_OW 380
// end else
48403: GO 48422
// PrepareHuman ( false , i , skill ) ;
48405: LD_INT 0
48407: PPUSH
48408: LD_VAR 0 8
48412: PPUSH
48413: LD_VAR 0 4
48417: PPUSH
48418: CALL_OW 380
// un := CreateHuman ;
48422: LD_ADDR_VAR 0 14
48426: PUSH
48427: CALL_OW 44
48431: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48432: LD_ADDR_VAR 0 7
48436: PUSH
48437: LD_VAR 0 7
48441: PPUSH
48442: LD_INT 1
48444: PPUSH
48445: LD_VAR 0 14
48449: PPUSH
48450: CALL_OW 2
48454: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48455: LD_VAR 0 14
48459: PPUSH
48460: LD_VAR 0 12
48464: PUSH
48465: LD_INT 1
48467: ARRAY
48468: PPUSH
48469: CALL_OW 52
// end ;
48473: GO 48108
48475: POP
48476: POP
// end ;
48477: GO 47408
48479: POP
48480: POP
// result := result ^ buildings ;
48481: LD_ADDR_VAR 0 7
48485: PUSH
48486: LD_VAR 0 7
48490: PUSH
48491: LD_VAR 0 18
48495: ADD
48496: ST_TO_ADDR
// end else
48497: GO 48640
// begin for i = 1 to personel do
48499: LD_ADDR_VAR 0 8
48503: PUSH
48504: DOUBLE
48505: LD_INT 1
48507: DEC
48508: ST_TO_ADDR
48509: LD_VAR 0 6
48513: PUSH
48514: FOR_TO
48515: IFFALSE 48638
// begin if i > 4 then
48517: LD_VAR 0 8
48521: PUSH
48522: LD_INT 4
48524: GREATER
48525: IFFALSE 48529
// break ;
48527: GO 48638
// x := personel [ i ] ;
48529: LD_ADDR_VAR 0 13
48533: PUSH
48534: LD_VAR 0 6
48538: PUSH
48539: LD_VAR 0 8
48543: ARRAY
48544: ST_TO_ADDR
// if x = - 1 then
48545: LD_VAR 0 13
48549: PUSH
48550: LD_INT 1
48552: NEG
48553: EQUAL
48554: IFFALSE 48558
// continue ;
48556: GO 48514
// PrepareHuman ( false , i , skill ) ;
48558: LD_INT 0
48560: PPUSH
48561: LD_VAR 0 8
48565: PPUSH
48566: LD_VAR 0 4
48570: PPUSH
48571: CALL_OW 380
// un := CreateHuman ;
48575: LD_ADDR_VAR 0 14
48579: PUSH
48580: CALL_OW 44
48584: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48585: LD_VAR 0 14
48589: PPUSH
48590: LD_VAR 0 1
48594: PPUSH
48595: CALL_OW 250
48599: PPUSH
48600: LD_VAR 0 1
48604: PPUSH
48605: CALL_OW 251
48609: PPUSH
48610: LD_INT 10
48612: PPUSH
48613: LD_INT 0
48615: PPUSH
48616: CALL_OW 50
// result := result ^ un ;
48620: LD_ADDR_VAR 0 7
48624: PUSH
48625: LD_VAR 0 7
48629: PUSH
48630: LD_VAR 0 14
48634: ADD
48635: ST_TO_ADDR
// end ;
48636: GO 48514
48638: POP
48639: POP
// end ; end ;
48640: LD_VAR 0 7
48644: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48645: LD_INT 0
48647: PPUSH
48648: PPUSH
48649: PPUSH
48650: PPUSH
48651: PPUSH
48652: PPUSH
48653: PPUSH
48654: PPUSH
48655: PPUSH
48656: PPUSH
48657: PPUSH
48658: PPUSH
48659: PPUSH
48660: PPUSH
48661: PPUSH
48662: PPUSH
// result := false ;
48663: LD_ADDR_VAR 0 3
48667: PUSH
48668: LD_INT 0
48670: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48671: LD_VAR 0 1
48675: NOT
48676: IFTRUE 48701
48678: PUSH
48679: LD_VAR 0 1
48683: PPUSH
48684: CALL_OW 266
48688: PUSH
48689: LD_INT 32
48691: PUSH
48692: LD_INT 33
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: IN
48699: NOT
48700: OR
48701: IFFALSE 48705
// exit ;
48703: GO 49840
// nat := GetNation ( tower ) ;
48705: LD_ADDR_VAR 0 12
48709: PUSH
48710: LD_VAR 0 1
48714: PPUSH
48715: CALL_OW 248
48719: ST_TO_ADDR
// side := GetSide ( tower ) ;
48720: LD_ADDR_VAR 0 16
48724: PUSH
48725: LD_VAR 0 1
48729: PPUSH
48730: CALL_OW 255
48734: ST_TO_ADDR
// x := GetX ( tower ) ;
48735: LD_ADDR_VAR 0 10
48739: PUSH
48740: LD_VAR 0 1
48744: PPUSH
48745: CALL_OW 250
48749: ST_TO_ADDR
// y := GetY ( tower ) ;
48750: LD_ADDR_VAR 0 11
48754: PUSH
48755: LD_VAR 0 1
48759: PPUSH
48760: CALL_OW 251
48764: ST_TO_ADDR
// if not x or not y then
48765: LD_VAR 0 10
48769: NOT
48770: IFTRUE 48779
48772: PUSH
48773: LD_VAR 0 11
48777: NOT
48778: OR
48779: IFFALSE 48783
// exit ;
48781: GO 49840
// weapon := 0 ;
48783: LD_ADDR_VAR 0 18
48787: PUSH
48788: LD_INT 0
48790: ST_TO_ADDR
// fac_list := [ ] ;
48791: LD_ADDR_VAR 0 17
48795: PUSH
48796: EMPTY
48797: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48798: LD_ADDR_VAR 0 6
48802: PUSH
48803: LD_VAR 0 1
48807: PPUSH
48808: CALL_OW 274
48812: PPUSH
48813: LD_VAR 0 2
48817: PPUSH
48818: LD_INT 0
48820: PPUSH
48821: CALL 46375 0 3
48825: PPUSH
48826: LD_INT 30
48828: PUSH
48829: LD_INT 3
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PPUSH
48836: CALL_OW 72
48840: ST_TO_ADDR
// if not factories then
48841: LD_VAR 0 6
48845: NOT
48846: IFFALSE 48850
// exit ;
48848: GO 49840
// for i in factories do
48850: LD_ADDR_VAR 0 8
48854: PUSH
48855: LD_VAR 0 6
48859: PUSH
48860: FOR_IN
48861: IFFALSE 48886
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48863: LD_ADDR_VAR 0 17
48867: PUSH
48868: LD_VAR 0 17
48872: PUSH
48873: LD_VAR 0 8
48877: PPUSH
48878: CALL_OW 478
48882: UNION
48883: ST_TO_ADDR
48884: GO 48860
48886: POP
48887: POP
// if not fac_list then
48888: LD_VAR 0 17
48892: NOT
48893: IFFALSE 48897
// exit ;
48895: GO 49840
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48897: LD_ADDR_VAR 0 5
48901: PUSH
48902: LD_INT 4
48904: PUSH
48905: LD_INT 5
48907: PUSH
48908: LD_INT 9
48910: PUSH
48911: LD_INT 10
48913: PUSH
48914: LD_INT 6
48916: PUSH
48917: LD_INT 7
48919: PUSH
48920: LD_INT 11
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 27
48934: PUSH
48935: LD_INT 28
48937: PUSH
48938: LD_INT 26
48940: PUSH
48941: LD_INT 30
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 43
48952: PUSH
48953: LD_INT 44
48955: PUSH
48956: LD_INT 46
48958: PUSH
48959: LD_INT 45
48961: PUSH
48962: LD_INT 47
48964: PUSH
48965: LD_INT 49
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: LIST
48980: PUSH
48981: LD_VAR 0 12
48985: ARRAY
48986: ST_TO_ADDR
// list := list isect fac_list ;
48987: LD_ADDR_VAR 0 5
48991: PUSH
48992: LD_VAR 0 5
48996: PUSH
48997: LD_VAR 0 17
49001: ISECT
49002: ST_TO_ADDR
// if not list then
49003: LD_VAR 0 5
49007: NOT
49008: IFFALSE 49012
// exit ;
49010: GO 49840
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49012: LD_VAR 0 12
49016: PUSH
49017: LD_INT 3
49019: EQUAL
49020: IFFALSE 49032
49022: PUSH
49023: LD_INT 49
49025: PUSH
49026: LD_VAR 0 5
49030: IN
49031: AND
49032: IFFALSE 49052
49034: PUSH
49035: LD_INT 31
49037: PPUSH
49038: LD_VAR 0 16
49042: PPUSH
49043: CALL_OW 321
49047: PUSH
49048: LD_INT 2
49050: EQUAL
49051: AND
49052: IFFALSE 49112
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49054: LD_INT 22
49056: PUSH
49057: LD_VAR 0 16
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 35
49068: PUSH
49069: LD_INT 49
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 91
49078: PUSH
49079: LD_VAR 0 1
49083: PUSH
49084: LD_INT 10
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: LIST
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: LIST
49096: PPUSH
49097: CALL_OW 69
49101: NOT
49102: IFFALSE 49112
// weapon := ru_time_lapser ;
49104: LD_ADDR_VAR 0 18
49108: PUSH
49109: LD_INT 49
49111: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49112: LD_VAR 0 12
49116: PUSH
49117: LD_INT 1
49119: PUSH
49120: LD_INT 2
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: IN
49127: IFFALSE 49151
49129: PUSH
49130: LD_INT 11
49132: PUSH
49133: LD_VAR 0 5
49137: IN
49138: IFTRUE 49150
49140: PUSH
49141: LD_INT 30
49143: PUSH
49144: LD_VAR 0 5
49148: IN
49149: OR
49150: AND
49151: IFFALSE 49171
49153: PUSH
49154: LD_INT 6
49156: PPUSH
49157: LD_VAR 0 16
49161: PPUSH
49162: CALL_OW 321
49166: PUSH
49167: LD_INT 2
49169: EQUAL
49170: AND
49171: IFFALSE 49338
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49173: LD_INT 22
49175: PUSH
49176: LD_VAR 0 16
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 2
49187: PUSH
49188: LD_INT 35
49190: PUSH
49191: LD_INT 11
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 35
49200: PUSH
49201: LD_INT 30
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 91
49215: PUSH
49216: LD_VAR 0 1
49220: PUSH
49221: LD_INT 18
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: LIST
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: LIST
49233: PPUSH
49234: CALL_OW 69
49238: NOT
49239: IFFALSE 49315
49241: PUSH
49242: LD_INT 22
49244: PUSH
49245: LD_VAR 0 16
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 2
49256: PUSH
49257: LD_INT 30
49259: PUSH
49260: LD_INT 32
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 30
49269: PUSH
49270: LD_INT 33
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 91
49284: PUSH
49285: LD_VAR 0 1
49289: PUSH
49290: LD_INT 12
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: LIST
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: LIST
49302: PUSH
49303: EMPTY
49304: LIST
49305: PPUSH
49306: CALL_OW 69
49310: PUSH
49311: LD_INT 2
49313: GREATER
49314: AND
49315: IFFALSE 49338
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49317: LD_ADDR_VAR 0 18
49321: PUSH
49322: LD_INT 11
49324: PUSH
49325: LD_INT 30
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_VAR 0 12
49336: ARRAY
49337: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49338: LD_VAR 0 18
49342: NOT
49343: IFFALSE 49363
49345: PUSH
49346: LD_INT 40
49348: PPUSH
49349: LD_VAR 0 16
49353: PPUSH
49354: CALL_OW 321
49358: PUSH
49359: LD_INT 2
49361: EQUAL
49362: AND
49363: IFFALSE 49399
49365: PUSH
49366: LD_INT 7
49368: PUSH
49369: LD_VAR 0 5
49373: IN
49374: IFTRUE 49386
49376: PUSH
49377: LD_INT 28
49379: PUSH
49380: LD_VAR 0 5
49384: IN
49385: OR
49386: IFTRUE 49398
49388: PUSH
49389: LD_INT 45
49391: PUSH
49392: LD_VAR 0 5
49396: IN
49397: OR
49398: AND
49399: IFFALSE 49653
// begin hex := GetHexInfo ( x , y ) ;
49401: LD_ADDR_VAR 0 4
49405: PUSH
49406: LD_VAR 0 10
49410: PPUSH
49411: LD_VAR 0 11
49415: PPUSH
49416: CALL_OW 546
49420: ST_TO_ADDR
// if hex [ 1 ] then
49421: LD_VAR 0 4
49425: PUSH
49426: LD_INT 1
49428: ARRAY
49429: IFFALSE 49433
// exit ;
49431: GO 49840
// height := hex [ 2 ] ;
49433: LD_ADDR_VAR 0 15
49437: PUSH
49438: LD_VAR 0 4
49442: PUSH
49443: LD_INT 2
49445: ARRAY
49446: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49447: LD_ADDR_VAR 0 14
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: LD_INT 2
49457: PUSH
49458: LD_INT 3
49460: PUSH
49461: LD_INT 5
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: ST_TO_ADDR
// for i in tmp do
49470: LD_ADDR_VAR 0 8
49474: PUSH
49475: LD_VAR 0 14
49479: PUSH
49480: FOR_IN
49481: IFFALSE 49651
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49483: LD_ADDR_VAR 0 9
49487: PUSH
49488: LD_VAR 0 10
49492: PPUSH
49493: LD_VAR 0 8
49497: PPUSH
49498: LD_INT 5
49500: PPUSH
49501: CALL_OW 272
49505: PUSH
49506: LD_VAR 0 11
49510: PPUSH
49511: LD_VAR 0 8
49515: PPUSH
49516: LD_INT 5
49518: PPUSH
49519: CALL_OW 273
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49528: LD_VAR 0 9
49532: PUSH
49533: LD_INT 1
49535: ARRAY
49536: PPUSH
49537: LD_VAR 0 9
49541: PUSH
49542: LD_INT 2
49544: ARRAY
49545: PPUSH
49546: CALL_OW 488
49550: IFFALSE 49649
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49552: LD_ADDR_VAR 0 4
49556: PUSH
49557: LD_VAR 0 9
49561: PUSH
49562: LD_INT 1
49564: ARRAY
49565: PPUSH
49566: LD_VAR 0 9
49570: PUSH
49571: LD_INT 2
49573: ARRAY
49574: PPUSH
49575: CALL_OW 546
49579: ST_TO_ADDR
// if hex [ 1 ] then
49580: LD_VAR 0 4
49584: PUSH
49585: LD_INT 1
49587: ARRAY
49588: IFFALSE 49592
// continue ;
49590: GO 49480
// h := hex [ 2 ] ;
49592: LD_ADDR_VAR 0 13
49596: PUSH
49597: LD_VAR 0 4
49601: PUSH
49602: LD_INT 2
49604: ARRAY
49605: ST_TO_ADDR
// if h + 7 < height then
49606: LD_VAR 0 13
49610: PUSH
49611: LD_INT 7
49613: PLUS
49614: PUSH
49615: LD_VAR 0 15
49619: LESS
49620: IFFALSE 49649
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49622: LD_ADDR_VAR 0 18
49626: PUSH
49627: LD_INT 7
49629: PUSH
49630: LD_INT 28
49632: PUSH
49633: LD_INT 45
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: LIST
49640: PUSH
49641: LD_VAR 0 12
49645: ARRAY
49646: ST_TO_ADDR
// break ;
49647: GO 49651
// end ; end ; end ;
49649: GO 49480
49651: POP
49652: POP
// end ; if not weapon then
49653: LD_VAR 0 18
49657: NOT
49658: IFFALSE 49718
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49660: LD_ADDR_VAR 0 5
49664: PUSH
49665: LD_VAR 0 5
49669: PUSH
49670: LD_INT 11
49672: PUSH
49673: LD_INT 30
49675: PUSH
49676: LD_INT 49
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: LIST
49683: DIFF
49684: ST_TO_ADDR
// if not list then
49685: LD_VAR 0 5
49689: NOT
49690: IFFALSE 49694
// exit ;
49692: GO 49840
// weapon := list [ rand ( 1 , list ) ] ;
49694: LD_ADDR_VAR 0 18
49698: PUSH
49699: LD_VAR 0 5
49703: PUSH
49704: LD_INT 1
49706: PPUSH
49707: LD_VAR 0 5
49711: PPUSH
49712: CALL_OW 12
49716: ARRAY
49717: ST_TO_ADDR
// end ; if weapon then
49718: LD_VAR 0 18
49722: IFFALSE 49840
// begin tmp := CostOfWeapon ( weapon ) ;
49724: LD_ADDR_VAR 0 14
49728: PUSH
49729: LD_VAR 0 18
49733: PPUSH
49734: CALL_OW 451
49738: ST_TO_ADDR
// j := GetBase ( tower ) ;
49739: LD_ADDR_VAR 0 9
49743: PUSH
49744: LD_VAR 0 1
49748: PPUSH
49749: CALL_OW 274
49753: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49754: LD_VAR 0 9
49758: PPUSH
49759: LD_INT 1
49761: PPUSH
49762: CALL_OW 275
49766: PUSH
49767: LD_VAR 0 14
49771: PUSH
49772: LD_INT 1
49774: ARRAY
49775: GREATEREQUAL
49776: IFFALSE 49802
49778: PUSH
49779: LD_VAR 0 9
49783: PPUSH
49784: LD_INT 2
49786: PPUSH
49787: CALL_OW 275
49791: PUSH
49792: LD_VAR 0 14
49796: PUSH
49797: LD_INT 2
49799: ARRAY
49800: GREATEREQUAL
49801: AND
49802: IFFALSE 49828
49804: PUSH
49805: LD_VAR 0 9
49809: PPUSH
49810: LD_INT 3
49812: PPUSH
49813: CALL_OW 275
49817: PUSH
49818: LD_VAR 0 14
49822: PUSH
49823: LD_INT 3
49825: ARRAY
49826: GREATEREQUAL
49827: AND
49828: IFFALSE 49840
// result := weapon ;
49830: LD_ADDR_VAR 0 3
49834: PUSH
49835: LD_VAR 0 18
49839: ST_TO_ADDR
// end ; end ;
49840: LD_VAR 0 3
49844: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49845: LD_INT 0
49847: PPUSH
49848: PPUSH
// result := true ;
49849: LD_ADDR_VAR 0 3
49853: PUSH
49854: LD_INT 1
49856: ST_TO_ADDR
// if array1 = array2 then
49857: LD_VAR 0 1
49861: PUSH
49862: LD_VAR 0 2
49866: EQUAL
49867: IFFALSE 49927
// begin for i = 1 to array1 do
49869: LD_ADDR_VAR 0 4
49873: PUSH
49874: DOUBLE
49875: LD_INT 1
49877: DEC
49878: ST_TO_ADDR
49879: LD_VAR 0 1
49883: PUSH
49884: FOR_TO
49885: IFFALSE 49923
// if array1 [ i ] <> array2 [ i ] then
49887: LD_VAR 0 1
49891: PUSH
49892: LD_VAR 0 4
49896: ARRAY
49897: PUSH
49898: LD_VAR 0 2
49902: PUSH
49903: LD_VAR 0 4
49907: ARRAY
49908: NONEQUAL
49909: IFFALSE 49921
// begin result := false ;
49911: LD_ADDR_VAR 0 3
49915: PUSH
49916: LD_INT 0
49918: ST_TO_ADDR
// break ;
49919: GO 49923
// end ;
49921: GO 49884
49923: POP
49924: POP
// end else
49925: GO 49935
// result := false ;
49927: LD_ADDR_VAR 0 3
49931: PUSH
49932: LD_INT 0
49934: ST_TO_ADDR
// end ;
49935: LD_VAR 0 3
49939: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49940: LD_INT 0
49942: PPUSH
49943: PPUSH
// if not array1 or not array2 then
49944: LD_VAR 0 1
49948: NOT
49949: IFTRUE 49958
49951: PUSH
49952: LD_VAR 0 2
49956: NOT
49957: OR
49958: IFFALSE 49962
// exit ;
49960: GO 50026
// result := true ;
49962: LD_ADDR_VAR 0 3
49966: PUSH
49967: LD_INT 1
49969: ST_TO_ADDR
// for i = 1 to array1 do
49970: LD_ADDR_VAR 0 4
49974: PUSH
49975: DOUBLE
49976: LD_INT 1
49978: DEC
49979: ST_TO_ADDR
49980: LD_VAR 0 1
49984: PUSH
49985: FOR_TO
49986: IFFALSE 50024
// if array1 [ i ] <> array2 [ i ] then
49988: LD_VAR 0 1
49992: PUSH
49993: LD_VAR 0 4
49997: ARRAY
49998: PUSH
49999: LD_VAR 0 2
50003: PUSH
50004: LD_VAR 0 4
50008: ARRAY
50009: NONEQUAL
50010: IFFALSE 50022
// begin result := false ;
50012: LD_ADDR_VAR 0 3
50016: PUSH
50017: LD_INT 0
50019: ST_TO_ADDR
// break ;
50020: GO 50024
// end ;
50022: GO 49985
50024: POP
50025: POP
// end ;
50026: LD_VAR 0 3
50030: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50031: LD_INT 0
50033: PPUSH
50034: PPUSH
50035: PPUSH
// pom := GetBase ( fac ) ;
50036: LD_ADDR_VAR 0 5
50040: PUSH
50041: LD_VAR 0 1
50045: PPUSH
50046: CALL_OW 274
50050: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50051: LD_ADDR_VAR 0 4
50055: PUSH
50056: LD_VAR 0 2
50060: PUSH
50061: LD_INT 1
50063: ARRAY
50064: PPUSH
50065: LD_VAR 0 2
50069: PUSH
50070: LD_INT 2
50072: ARRAY
50073: PPUSH
50074: LD_VAR 0 2
50078: PUSH
50079: LD_INT 3
50081: ARRAY
50082: PPUSH
50083: LD_VAR 0 2
50087: PUSH
50088: LD_INT 4
50090: ARRAY
50091: PPUSH
50092: CALL_OW 449
50096: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50097: LD_ADDR_VAR 0 3
50101: PUSH
50102: LD_VAR 0 5
50106: PPUSH
50107: LD_INT 1
50109: PPUSH
50110: CALL_OW 275
50114: PUSH
50115: LD_VAR 0 4
50119: PUSH
50120: LD_INT 1
50122: ARRAY
50123: GREATEREQUAL
50124: IFFALSE 50150
50126: PUSH
50127: LD_VAR 0 5
50131: PPUSH
50132: LD_INT 2
50134: PPUSH
50135: CALL_OW 275
50139: PUSH
50140: LD_VAR 0 4
50144: PUSH
50145: LD_INT 2
50147: ARRAY
50148: GREATEREQUAL
50149: AND
50150: IFFALSE 50176
50152: PUSH
50153: LD_VAR 0 5
50157: PPUSH
50158: LD_INT 3
50160: PPUSH
50161: CALL_OW 275
50165: PUSH
50166: LD_VAR 0 4
50170: PUSH
50171: LD_INT 3
50173: ARRAY
50174: GREATEREQUAL
50175: AND
50176: ST_TO_ADDR
// end ;
50177: LD_VAR 0 3
50181: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50182: LD_INT 0
50184: PPUSH
50185: PPUSH
50186: PPUSH
50187: PPUSH
// pom := GetBase ( building ) ;
50188: LD_ADDR_VAR 0 3
50192: PUSH
50193: LD_VAR 0 1
50197: PPUSH
50198: CALL_OW 274
50202: ST_TO_ADDR
// if not pom then
50203: LD_VAR 0 3
50207: NOT
50208: IFFALSE 50212
// exit ;
50210: GO 50386
// btype := GetBType ( building ) ;
50212: LD_ADDR_VAR 0 5
50216: PUSH
50217: LD_VAR 0 1
50221: PPUSH
50222: CALL_OW 266
50226: ST_TO_ADDR
// if btype = b_armoury then
50227: LD_VAR 0 5
50231: PUSH
50232: LD_INT 4
50234: EQUAL
50235: IFFALSE 50245
// btype := b_barracks ;
50237: LD_ADDR_VAR 0 5
50241: PUSH
50242: LD_INT 5
50244: ST_TO_ADDR
// if btype = b_depot then
50245: LD_VAR 0 5
50249: PUSH
50250: LD_INT 0
50252: EQUAL
50253: IFFALSE 50263
// btype := b_warehouse ;
50255: LD_ADDR_VAR 0 5
50259: PUSH
50260: LD_INT 1
50262: ST_TO_ADDR
// if btype = b_workshop then
50263: LD_VAR 0 5
50267: PUSH
50268: LD_INT 2
50270: EQUAL
50271: IFFALSE 50281
// btype := b_factory ;
50273: LD_ADDR_VAR 0 5
50277: PUSH
50278: LD_INT 3
50280: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50281: LD_ADDR_VAR 0 4
50285: PUSH
50286: LD_VAR 0 5
50290: PPUSH
50291: LD_VAR 0 1
50295: PPUSH
50296: CALL_OW 248
50300: PPUSH
50301: CALL_OW 450
50305: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50306: LD_ADDR_VAR 0 2
50310: PUSH
50311: LD_VAR 0 3
50315: PPUSH
50316: LD_INT 1
50318: PPUSH
50319: CALL_OW 275
50323: PUSH
50324: LD_VAR 0 4
50328: PUSH
50329: LD_INT 1
50331: ARRAY
50332: GREATEREQUAL
50333: IFFALSE 50359
50335: PUSH
50336: LD_VAR 0 3
50340: PPUSH
50341: LD_INT 2
50343: PPUSH
50344: CALL_OW 275
50348: PUSH
50349: LD_VAR 0 4
50353: PUSH
50354: LD_INT 2
50356: ARRAY
50357: GREATEREQUAL
50358: AND
50359: IFFALSE 50385
50361: PUSH
50362: LD_VAR 0 3
50366: PPUSH
50367: LD_INT 3
50369: PPUSH
50370: CALL_OW 275
50374: PUSH
50375: LD_VAR 0 4
50379: PUSH
50380: LD_INT 3
50382: ARRAY
50383: GREATEREQUAL
50384: AND
50385: ST_TO_ADDR
// end ;
50386: LD_VAR 0 2
50390: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50391: LD_INT 0
50393: PPUSH
50394: PPUSH
50395: PPUSH
// pom := GetBase ( building ) ;
50396: LD_ADDR_VAR 0 4
50400: PUSH
50401: LD_VAR 0 1
50405: PPUSH
50406: CALL_OW 274
50410: ST_TO_ADDR
// if not pom then
50411: LD_VAR 0 4
50415: NOT
50416: IFFALSE 50420
// exit ;
50418: GO 50525
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50420: LD_ADDR_VAR 0 5
50424: PUSH
50425: LD_VAR 0 2
50429: PPUSH
50430: LD_VAR 0 1
50434: PPUSH
50435: CALL_OW 248
50439: PPUSH
50440: CALL_OW 450
50444: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50445: LD_ADDR_VAR 0 3
50449: PUSH
50450: LD_VAR 0 4
50454: PPUSH
50455: LD_INT 1
50457: PPUSH
50458: CALL_OW 275
50462: PUSH
50463: LD_VAR 0 5
50467: PUSH
50468: LD_INT 1
50470: ARRAY
50471: GREATEREQUAL
50472: IFFALSE 50498
50474: PUSH
50475: LD_VAR 0 4
50479: PPUSH
50480: LD_INT 2
50482: PPUSH
50483: CALL_OW 275
50487: PUSH
50488: LD_VAR 0 5
50492: PUSH
50493: LD_INT 2
50495: ARRAY
50496: GREATEREQUAL
50497: AND
50498: IFFALSE 50524
50500: PUSH
50501: LD_VAR 0 4
50505: PPUSH
50506: LD_INT 3
50508: PPUSH
50509: CALL_OW 275
50513: PUSH
50514: LD_VAR 0 5
50518: PUSH
50519: LD_INT 3
50521: ARRAY
50522: GREATEREQUAL
50523: AND
50524: ST_TO_ADDR
// end ;
50525: LD_VAR 0 3
50529: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50530: LD_INT 0
50532: PPUSH
50533: PPUSH
50534: PPUSH
50535: PPUSH
50536: PPUSH
50537: PPUSH
50538: PPUSH
50539: PPUSH
50540: PPUSH
50541: PPUSH
50542: PPUSH
// result := false ;
50543: LD_ADDR_VAR 0 8
50547: PUSH
50548: LD_INT 0
50550: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50551: LD_VAR 0 5
50555: NOT
50556: IFTRUE 50565
50558: PUSH
50559: LD_VAR 0 1
50563: NOT
50564: OR
50565: IFTRUE 50574
50567: PUSH
50568: LD_VAR 0 2
50572: NOT
50573: OR
50574: IFTRUE 50583
50576: PUSH
50577: LD_VAR 0 3
50581: NOT
50582: OR
50583: IFFALSE 50587
// exit ;
50585: GO 51413
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50587: LD_ADDR_VAR 0 14
50591: PUSH
50592: LD_VAR 0 1
50596: PPUSH
50597: LD_VAR 0 2
50601: PPUSH
50602: LD_VAR 0 3
50606: PPUSH
50607: LD_VAR 0 4
50611: PPUSH
50612: LD_VAR 0 5
50616: PUSH
50617: LD_INT 1
50619: ARRAY
50620: PPUSH
50621: CALL_OW 248
50625: PPUSH
50626: LD_INT 0
50628: PPUSH
50629: CALL 52694 0 6
50633: ST_TO_ADDR
// if not hexes then
50634: LD_VAR 0 14
50638: NOT
50639: IFFALSE 50643
// exit ;
50641: GO 51413
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50643: LD_ADDR_VAR 0 17
50647: PUSH
50648: LD_VAR 0 5
50652: PPUSH
50653: LD_INT 22
50655: PUSH
50656: LD_VAR 0 13
50660: PPUSH
50661: CALL_OW 255
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 2
50672: PUSH
50673: LD_INT 30
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 30
50685: PUSH
50686: LD_INT 1
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: LIST
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PPUSH
50702: CALL_OW 72
50706: ST_TO_ADDR
// for i = 1 to hexes do
50707: LD_ADDR_VAR 0 9
50711: PUSH
50712: DOUBLE
50713: LD_INT 1
50715: DEC
50716: ST_TO_ADDR
50717: LD_VAR 0 14
50721: PUSH
50722: FOR_TO
50723: IFFALSE 51411
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50725: LD_ADDR_VAR 0 13
50729: PUSH
50730: LD_VAR 0 14
50734: PUSH
50735: LD_VAR 0 9
50739: ARRAY
50740: PUSH
50741: LD_INT 1
50743: ARRAY
50744: PPUSH
50745: LD_VAR 0 14
50749: PUSH
50750: LD_VAR 0 9
50754: ARRAY
50755: PUSH
50756: LD_INT 2
50758: ARRAY
50759: PPUSH
50760: CALL_OW 428
50764: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50765: LD_VAR 0 14
50769: PUSH
50770: LD_VAR 0 9
50774: ARRAY
50775: PUSH
50776: LD_INT 1
50778: ARRAY
50779: PPUSH
50780: LD_VAR 0 14
50784: PUSH
50785: LD_VAR 0 9
50789: ARRAY
50790: PUSH
50791: LD_INT 2
50793: ARRAY
50794: PPUSH
50795: CALL_OW 351
50799: IFTRUE 50838
50801: PUSH
50802: LD_VAR 0 14
50806: PUSH
50807: LD_VAR 0 9
50811: ARRAY
50812: PUSH
50813: LD_INT 1
50815: ARRAY
50816: PPUSH
50817: LD_VAR 0 14
50821: PUSH
50822: LD_VAR 0 9
50826: ARRAY
50827: PUSH
50828: LD_INT 2
50830: ARRAY
50831: PPUSH
50832: CALL_OW 488
50836: NOT
50837: OR
50838: IFTRUE 50855
50840: PUSH
50841: LD_VAR 0 13
50845: PPUSH
50846: CALL_OW 247
50850: PUSH
50851: LD_INT 3
50853: EQUAL
50854: OR
50855: IFFALSE 50861
// exit ;
50857: POP
50858: POP
50859: GO 51413
// if not tmp then
50861: LD_VAR 0 13
50865: NOT
50866: IFFALSE 50870
// continue ;
50868: GO 50722
// result := true ;
50870: LD_ADDR_VAR 0 8
50874: PUSH
50875: LD_INT 1
50877: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50878: LD_VAR 0 6
50882: IFFALSE 50899
50884: PUSH
50885: LD_VAR 0 13
50889: PPUSH
50890: CALL_OW 247
50894: PUSH
50895: LD_INT 2
50897: EQUAL
50898: AND
50899: IFFALSE 50916
50901: PUSH
50902: LD_VAR 0 13
50906: PPUSH
50907: CALL_OW 263
50911: PUSH
50912: LD_INT 1
50914: EQUAL
50915: AND
50916: IFFALSE 51080
// begin if IsDrivenBy ( tmp ) then
50918: LD_VAR 0 13
50922: PPUSH
50923: CALL_OW 311
50927: IFFALSE 50931
// continue ;
50929: GO 50722
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50931: LD_VAR 0 6
50935: PPUSH
50936: LD_INT 3
50938: PUSH
50939: LD_INT 60
50941: PUSH
50942: EMPTY
50943: LIST
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 3
50951: PUSH
50952: LD_INT 55
50954: PUSH
50955: EMPTY
50956: LIST
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PPUSH
50966: CALL_OW 72
50970: IFFALSE 51078
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50972: LD_ADDR_VAR 0 18
50976: PUSH
50977: LD_VAR 0 6
50981: PPUSH
50982: LD_INT 3
50984: PUSH
50985: LD_INT 60
50987: PUSH
50988: EMPTY
50989: LIST
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 3
50997: PUSH
50998: LD_INT 55
51000: PUSH
51001: EMPTY
51002: LIST
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PPUSH
51012: CALL_OW 72
51016: PUSH
51017: LD_INT 1
51019: ARRAY
51020: ST_TO_ADDR
// if IsInUnit ( driver ) then
51021: LD_VAR 0 18
51025: PPUSH
51026: CALL_OW 310
51030: IFFALSE 51041
// ComExit ( driver ) ;
51032: LD_VAR 0 18
51036: PPUSH
51037: CALL 76684 0 1
// AddComEnterUnit ( driver , tmp ) ;
51041: LD_VAR 0 18
51045: PPUSH
51046: LD_VAR 0 13
51050: PPUSH
51051: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51055: LD_VAR 0 18
51059: PPUSH
51060: LD_VAR 0 7
51064: PPUSH
51065: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51069: LD_VAR 0 18
51073: PPUSH
51074: CALL_OW 181
// end ; continue ;
51078: GO 50722
// end ; if not cleaners or not tmp in cleaners then
51080: LD_VAR 0 6
51084: NOT
51085: IFTRUE 51100
51087: PUSH
51088: LD_VAR 0 13
51092: PUSH
51093: LD_VAR 0 6
51097: IN
51098: NOT
51099: OR
51100: IFFALSE 51409
// begin if dep then
51102: LD_VAR 0 17
51106: IFFALSE 51242
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51108: LD_ADDR_VAR 0 16
51112: PUSH
51113: LD_VAR 0 17
51117: PUSH
51118: LD_INT 1
51120: ARRAY
51121: PPUSH
51122: CALL_OW 250
51126: PPUSH
51127: LD_VAR 0 17
51131: PUSH
51132: LD_INT 1
51134: ARRAY
51135: PPUSH
51136: CALL_OW 254
51140: PPUSH
51141: LD_INT 5
51143: PPUSH
51144: CALL_OW 272
51148: PUSH
51149: LD_VAR 0 17
51153: PUSH
51154: LD_INT 1
51156: ARRAY
51157: PPUSH
51158: CALL_OW 251
51162: PPUSH
51163: LD_VAR 0 17
51167: PUSH
51168: LD_INT 1
51170: ARRAY
51171: PPUSH
51172: CALL_OW 254
51176: PPUSH
51177: LD_INT 5
51179: PPUSH
51180: CALL_OW 273
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51189: LD_VAR 0 16
51193: PUSH
51194: LD_INT 1
51196: ARRAY
51197: PPUSH
51198: LD_VAR 0 16
51202: PUSH
51203: LD_INT 2
51205: ARRAY
51206: PPUSH
51207: CALL_OW 488
51211: IFFALSE 51242
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51213: LD_VAR 0 13
51217: PPUSH
51218: LD_VAR 0 16
51222: PUSH
51223: LD_INT 1
51225: ARRAY
51226: PPUSH
51227: LD_VAR 0 16
51231: PUSH
51232: LD_INT 2
51234: ARRAY
51235: PPUSH
51236: CALL_OW 111
// continue ;
51240: GO 50722
// end ; end ; r := GetDir ( tmp ) ;
51242: LD_ADDR_VAR 0 15
51246: PUSH
51247: LD_VAR 0 13
51251: PPUSH
51252: CALL_OW 254
51256: ST_TO_ADDR
// if r = 5 then
51257: LD_VAR 0 15
51261: PUSH
51262: LD_INT 5
51264: EQUAL
51265: IFFALSE 51275
// r := 0 ;
51267: LD_ADDR_VAR 0 15
51271: PUSH
51272: LD_INT 0
51274: ST_TO_ADDR
// for j = r to 5 do
51275: LD_ADDR_VAR 0 10
51279: PUSH
51280: DOUBLE
51281: LD_VAR 0 15
51285: DEC
51286: ST_TO_ADDR
51287: LD_INT 5
51289: PUSH
51290: FOR_TO
51291: IFFALSE 51407
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51293: LD_ADDR_VAR 0 11
51297: PUSH
51298: LD_VAR 0 13
51302: PPUSH
51303: CALL_OW 250
51307: PPUSH
51308: LD_VAR 0 10
51312: PPUSH
51313: LD_INT 2
51315: PPUSH
51316: CALL_OW 272
51320: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51321: LD_ADDR_VAR 0 12
51325: PUSH
51326: LD_VAR 0 13
51330: PPUSH
51331: CALL_OW 251
51335: PPUSH
51336: LD_VAR 0 10
51340: PPUSH
51341: LD_INT 2
51343: PPUSH
51344: CALL_OW 273
51348: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51349: LD_VAR 0 11
51353: PPUSH
51354: LD_VAR 0 12
51358: PPUSH
51359: CALL_OW 488
51363: IFFALSE 51382
51365: PUSH
51366: LD_VAR 0 11
51370: PPUSH
51371: LD_VAR 0 12
51375: PPUSH
51376: CALL_OW 428
51380: NOT
51381: AND
51382: IFFALSE 51405
// begin ComMoveXY ( tmp , _x , _y ) ;
51384: LD_VAR 0 13
51388: PPUSH
51389: LD_VAR 0 11
51393: PPUSH
51394: LD_VAR 0 12
51398: PPUSH
51399: CALL_OW 111
// break ;
51403: GO 51407
// end ; end ;
51405: GO 51290
51407: POP
51408: POP
// end ; end ;
51409: GO 50722
51411: POP
51412: POP
// end ;
51413: LD_VAR 0 8
51417: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51418: LD_INT 0
51420: PPUSH
// result := true ;
51421: LD_ADDR_VAR 0 3
51425: PUSH
51426: LD_INT 1
51428: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51429: LD_VAR 0 2
51433: PUSH
51434: LD_INT 24
51436: DOUBLE
51437: EQUAL
51438: IFTRUE 51448
51440: LD_INT 33
51442: DOUBLE
51443: EQUAL
51444: IFTRUE 51448
51446: GO 51473
51448: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51449: LD_ADDR_VAR 0 3
51453: PUSH
51454: LD_INT 32
51456: PPUSH
51457: LD_VAR 0 1
51461: PPUSH
51462: CALL_OW 321
51466: PUSH
51467: LD_INT 2
51469: EQUAL
51470: ST_TO_ADDR
51471: GO 51789
51473: LD_INT 20
51475: DOUBLE
51476: EQUAL
51477: IFTRUE 51481
51479: GO 51506
51481: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51482: LD_ADDR_VAR 0 3
51486: PUSH
51487: LD_INT 6
51489: PPUSH
51490: LD_VAR 0 1
51494: PPUSH
51495: CALL_OW 321
51499: PUSH
51500: LD_INT 2
51502: EQUAL
51503: ST_TO_ADDR
51504: GO 51789
51506: LD_INT 22
51508: DOUBLE
51509: EQUAL
51510: IFTRUE 51520
51512: LD_INT 36
51514: DOUBLE
51515: EQUAL
51516: IFTRUE 51520
51518: GO 51545
51520: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51521: LD_ADDR_VAR 0 3
51525: PUSH
51526: LD_INT 15
51528: PPUSH
51529: LD_VAR 0 1
51533: PPUSH
51534: CALL_OW 321
51538: PUSH
51539: LD_INT 2
51541: EQUAL
51542: ST_TO_ADDR
51543: GO 51789
51545: LD_INT 30
51547: DOUBLE
51548: EQUAL
51549: IFTRUE 51553
51551: GO 51578
51553: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51554: LD_ADDR_VAR 0 3
51558: PUSH
51559: LD_INT 20
51561: PPUSH
51562: LD_VAR 0 1
51566: PPUSH
51567: CALL_OW 321
51571: PUSH
51572: LD_INT 2
51574: EQUAL
51575: ST_TO_ADDR
51576: GO 51789
51578: LD_INT 28
51580: DOUBLE
51581: EQUAL
51582: IFTRUE 51592
51584: LD_INT 21
51586: DOUBLE
51587: EQUAL
51588: IFTRUE 51592
51590: GO 51617
51592: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51593: LD_ADDR_VAR 0 3
51597: PUSH
51598: LD_INT 21
51600: PPUSH
51601: LD_VAR 0 1
51605: PPUSH
51606: CALL_OW 321
51610: PUSH
51611: LD_INT 2
51613: EQUAL
51614: ST_TO_ADDR
51615: GO 51789
51617: LD_INT 16
51619: DOUBLE
51620: EQUAL
51621: IFTRUE 51625
51623: GO 51650
51625: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51626: LD_ADDR_VAR 0 3
51630: PUSH
51631: LD_INT 84
51633: PPUSH
51634: LD_VAR 0 1
51638: PPUSH
51639: CALL_OW 321
51643: PUSH
51644: LD_INT 2
51646: EQUAL
51647: ST_TO_ADDR
51648: GO 51789
51650: LD_INT 19
51652: DOUBLE
51653: EQUAL
51654: IFTRUE 51664
51656: LD_INT 23
51658: DOUBLE
51659: EQUAL
51660: IFTRUE 51664
51662: GO 51689
51664: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51665: LD_ADDR_VAR 0 3
51669: PUSH
51670: LD_INT 83
51672: PPUSH
51673: LD_VAR 0 1
51677: PPUSH
51678: CALL_OW 321
51682: PUSH
51683: LD_INT 2
51685: EQUAL
51686: ST_TO_ADDR
51687: GO 51789
51689: LD_INT 17
51691: DOUBLE
51692: EQUAL
51693: IFTRUE 51697
51695: GO 51722
51697: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51698: LD_ADDR_VAR 0 3
51702: PUSH
51703: LD_INT 39
51705: PPUSH
51706: LD_VAR 0 1
51710: PPUSH
51711: CALL_OW 321
51715: PUSH
51716: LD_INT 2
51718: EQUAL
51719: ST_TO_ADDR
51720: GO 51789
51722: LD_INT 18
51724: DOUBLE
51725: EQUAL
51726: IFTRUE 51730
51728: GO 51755
51730: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51731: LD_ADDR_VAR 0 3
51735: PUSH
51736: LD_INT 40
51738: PPUSH
51739: LD_VAR 0 1
51743: PPUSH
51744: CALL_OW 321
51748: PUSH
51749: LD_INT 2
51751: EQUAL
51752: ST_TO_ADDR
51753: GO 51789
51755: LD_INT 27
51757: DOUBLE
51758: EQUAL
51759: IFTRUE 51763
51761: GO 51788
51763: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51764: LD_ADDR_VAR 0 3
51768: PUSH
51769: LD_INT 35
51771: PPUSH
51772: LD_VAR 0 1
51776: PPUSH
51777: CALL_OW 321
51781: PUSH
51782: LD_INT 2
51784: EQUAL
51785: ST_TO_ADDR
51786: GO 51789
51788: POP
// end ;
51789: LD_VAR 0 3
51793: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51794: LD_INT 0
51796: PPUSH
51797: PPUSH
51798: PPUSH
51799: PPUSH
51800: PPUSH
51801: PPUSH
51802: PPUSH
51803: PPUSH
51804: PPUSH
51805: PPUSH
51806: PPUSH
// result := false ;
51807: LD_ADDR_VAR 0 6
51811: PUSH
51812: LD_INT 0
51814: ST_TO_ADDR
// if btype = b_depot then
51815: LD_VAR 0 2
51819: PUSH
51820: LD_INT 0
51822: EQUAL
51823: IFFALSE 51835
// begin result := true ;
51825: LD_ADDR_VAR 0 6
51829: PUSH
51830: LD_INT 1
51832: ST_TO_ADDR
// exit ;
51833: GO 52689
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51835: LD_VAR 0 1
51839: NOT
51840: IFTRUE 51865
51842: PUSH
51843: LD_VAR 0 1
51847: PPUSH
51848: CALL_OW 266
51852: PUSH
51853: LD_INT 0
51855: PUSH
51856: LD_INT 1
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: IN
51863: NOT
51864: OR
51865: IFTRUE 51874
51867: PUSH
51868: LD_VAR 0 2
51872: NOT
51873: OR
51874: IFTRUE 51910
51876: PUSH
51877: LD_VAR 0 5
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: LD_INT 2
51890: PUSH
51891: LD_INT 3
51893: PUSH
51894: LD_INT 4
51896: PUSH
51897: LD_INT 5
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: IN
51908: NOT
51909: OR
51910: IFTRUE 51929
51912: PUSH
51913: LD_VAR 0 3
51917: PPUSH
51918: LD_VAR 0 4
51922: PPUSH
51923: CALL_OW 488
51927: NOT
51928: OR
51929: IFFALSE 51933
// exit ;
51931: GO 52689
// side := GetSide ( depot ) ;
51933: LD_ADDR_VAR 0 9
51937: PUSH
51938: LD_VAR 0 1
51942: PPUSH
51943: CALL_OW 255
51947: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51948: LD_VAR 0 9
51952: PPUSH
51953: LD_VAR 0 2
51957: PPUSH
51958: CALL 51418 0 2
51962: NOT
51963: IFFALSE 51967
// exit ;
51965: GO 52689
// pom := GetBase ( depot ) ;
51967: LD_ADDR_VAR 0 10
51971: PUSH
51972: LD_VAR 0 1
51976: PPUSH
51977: CALL_OW 274
51981: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51982: LD_ADDR_VAR 0 11
51986: PUSH
51987: LD_VAR 0 2
51991: PPUSH
51992: LD_VAR 0 1
51996: PPUSH
51997: CALL_OW 248
52001: PPUSH
52002: CALL_OW 450
52006: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52007: LD_VAR 0 10
52011: PPUSH
52012: LD_INT 1
52014: PPUSH
52015: CALL_OW 275
52019: PUSH
52020: LD_VAR 0 11
52024: PUSH
52025: LD_INT 1
52027: ARRAY
52028: GREATEREQUAL
52029: IFFALSE 52055
52031: PUSH
52032: LD_VAR 0 10
52036: PPUSH
52037: LD_INT 2
52039: PPUSH
52040: CALL_OW 275
52044: PUSH
52045: LD_VAR 0 11
52049: PUSH
52050: LD_INT 2
52052: ARRAY
52053: GREATEREQUAL
52054: AND
52055: IFFALSE 52081
52057: PUSH
52058: LD_VAR 0 10
52062: PPUSH
52063: LD_INT 3
52065: PPUSH
52066: CALL_OW 275
52070: PUSH
52071: LD_VAR 0 11
52075: PUSH
52076: LD_INT 3
52078: ARRAY
52079: GREATEREQUAL
52080: AND
52081: NOT
52082: IFFALSE 52086
// exit ;
52084: GO 52689
// if GetBType ( depot ) = b_depot then
52086: LD_VAR 0 1
52090: PPUSH
52091: CALL_OW 266
52095: PUSH
52096: LD_INT 0
52098: EQUAL
52099: IFFALSE 52111
// dist := 28 else
52101: LD_ADDR_VAR 0 14
52105: PUSH
52106: LD_INT 28
52108: ST_TO_ADDR
52109: GO 52119
// dist := 36 ;
52111: LD_ADDR_VAR 0 14
52115: PUSH
52116: LD_INT 36
52118: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52119: LD_VAR 0 1
52123: PPUSH
52124: LD_VAR 0 3
52128: PPUSH
52129: LD_VAR 0 4
52133: PPUSH
52134: CALL_OW 297
52138: PUSH
52139: LD_VAR 0 14
52143: GREATER
52144: IFFALSE 52148
// exit ;
52146: GO 52689
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52148: LD_ADDR_VAR 0 12
52152: PUSH
52153: LD_VAR 0 2
52157: PPUSH
52158: LD_VAR 0 3
52162: PPUSH
52163: LD_VAR 0 4
52167: PPUSH
52168: LD_VAR 0 5
52172: PPUSH
52173: LD_VAR 0 1
52177: PPUSH
52178: CALL_OW 248
52182: PPUSH
52183: LD_INT 0
52185: PPUSH
52186: CALL 52694 0 6
52190: ST_TO_ADDR
// if not hexes then
52191: LD_VAR 0 12
52195: NOT
52196: IFFALSE 52200
// exit ;
52198: GO 52689
// hex := GetHexInfo ( x , y ) ;
52200: LD_ADDR_VAR 0 15
52204: PUSH
52205: LD_VAR 0 3
52209: PPUSH
52210: LD_VAR 0 4
52214: PPUSH
52215: CALL_OW 546
52219: ST_TO_ADDR
// if hex [ 1 ] then
52220: LD_VAR 0 15
52224: PUSH
52225: LD_INT 1
52227: ARRAY
52228: IFFALSE 52232
// exit ;
52230: GO 52689
// height := hex [ 2 ] ;
52232: LD_ADDR_VAR 0 13
52236: PUSH
52237: LD_VAR 0 15
52241: PUSH
52242: LD_INT 2
52244: ARRAY
52245: ST_TO_ADDR
// for i = 1 to hexes do
52246: LD_ADDR_VAR 0 7
52250: PUSH
52251: DOUBLE
52252: LD_INT 1
52254: DEC
52255: ST_TO_ADDR
52256: LD_VAR 0 12
52260: PUSH
52261: FOR_TO
52262: IFFALSE 52606
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52264: LD_VAR 0 12
52268: PUSH
52269: LD_VAR 0 7
52273: ARRAY
52274: PUSH
52275: LD_INT 1
52277: ARRAY
52278: PPUSH
52279: LD_VAR 0 12
52283: PUSH
52284: LD_VAR 0 7
52288: ARRAY
52289: PUSH
52290: LD_INT 2
52292: ARRAY
52293: PPUSH
52294: CALL_OW 488
52298: NOT
52299: IFTRUE 52341
52301: PUSH
52302: LD_VAR 0 12
52306: PUSH
52307: LD_VAR 0 7
52311: ARRAY
52312: PUSH
52313: LD_INT 1
52315: ARRAY
52316: PPUSH
52317: LD_VAR 0 12
52321: PUSH
52322: LD_VAR 0 7
52326: ARRAY
52327: PUSH
52328: LD_INT 2
52330: ARRAY
52331: PPUSH
52332: CALL_OW 428
52336: PUSH
52337: LD_INT 0
52339: GREATER
52340: OR
52341: IFTRUE 52379
52343: PUSH
52344: LD_VAR 0 12
52348: PUSH
52349: LD_VAR 0 7
52353: ARRAY
52354: PUSH
52355: LD_INT 1
52357: ARRAY
52358: PPUSH
52359: LD_VAR 0 12
52363: PUSH
52364: LD_VAR 0 7
52368: ARRAY
52369: PUSH
52370: LD_INT 2
52372: ARRAY
52373: PPUSH
52374: CALL_OW 351
52378: OR
52379: IFFALSE 52385
// exit ;
52381: POP
52382: POP
52383: GO 52689
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52385: LD_ADDR_VAR 0 8
52389: PUSH
52390: LD_VAR 0 12
52394: PUSH
52395: LD_VAR 0 7
52399: ARRAY
52400: PUSH
52401: LD_INT 1
52403: ARRAY
52404: PPUSH
52405: LD_VAR 0 12
52409: PUSH
52410: LD_VAR 0 7
52414: ARRAY
52415: PUSH
52416: LD_INT 2
52418: ARRAY
52419: PPUSH
52420: CALL_OW 546
52424: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52425: LD_VAR 0 8
52429: PUSH
52430: LD_INT 1
52432: ARRAY
52433: IFTRUE 52455
52435: PUSH
52436: LD_VAR 0 8
52440: PUSH
52441: LD_INT 2
52443: ARRAY
52444: PUSH
52445: LD_VAR 0 13
52449: PUSH
52450: LD_INT 2
52452: PLUS
52453: GREATER
52454: OR
52455: IFTRUE 52477
52457: PUSH
52458: LD_VAR 0 8
52462: PUSH
52463: LD_INT 2
52465: ARRAY
52466: PUSH
52467: LD_VAR 0 13
52471: PUSH
52472: LD_INT 2
52474: MINUS
52475: LESS
52476: OR
52477: IFTRUE 52545
52479: PUSH
52480: LD_VAR 0 8
52484: PUSH
52485: LD_INT 3
52487: ARRAY
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: LD_INT 8
52494: PUSH
52495: LD_INT 9
52497: PUSH
52498: LD_INT 10
52500: PUSH
52501: LD_INT 11
52503: PUSH
52504: LD_INT 12
52506: PUSH
52507: LD_INT 13
52509: PUSH
52510: LD_INT 16
52512: PUSH
52513: LD_INT 17
52515: PUSH
52516: LD_INT 18
52518: PUSH
52519: LD_INT 19
52521: PUSH
52522: LD_INT 20
52524: PUSH
52525: LD_INT 21
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: IN
52543: NOT
52544: OR
52545: IFTRUE 52558
52547: PUSH
52548: LD_VAR 0 8
52552: PUSH
52553: LD_INT 5
52555: ARRAY
52556: NOT
52557: OR
52558: IFTRUE 52598
52560: PUSH
52561: LD_VAR 0 8
52565: PUSH
52566: LD_INT 6
52568: ARRAY
52569: PUSH
52570: LD_INT 1
52572: PUSH
52573: LD_INT 2
52575: PUSH
52576: LD_INT 7
52578: PUSH
52579: LD_INT 9
52581: PUSH
52582: LD_INT 10
52584: PUSH
52585: LD_INT 11
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: IN
52596: NOT
52597: OR
52598: IFFALSE 52604
// exit ;
52600: POP
52601: POP
52602: GO 52689
// end ;
52604: GO 52261
52606: POP
52607: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52608: LD_VAR 0 9
52612: PPUSH
52613: LD_VAR 0 3
52617: PPUSH
52618: LD_VAR 0 4
52622: PPUSH
52623: LD_INT 20
52625: PPUSH
52626: CALL 44508 0 4
52630: PUSH
52631: LD_INT 4
52633: ARRAY
52634: IFFALSE 52638
// exit ;
52636: GO 52689
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52638: LD_VAR 0 2
52642: PUSH
52643: LD_INT 29
52645: PUSH
52646: LD_INT 30
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: IN
52653: IFFALSE 52677
52655: PUSH
52656: LD_VAR 0 3
52660: PPUSH
52661: LD_VAR 0 4
52665: PPUSH
52666: LD_VAR 0 9
52670: PPUSH
52671: CALL_OW 440
52675: NOT
52676: AND
52677: IFFALSE 52681
// exit ;
52679: GO 52689
// result := true ;
52681: LD_ADDR_VAR 0 6
52685: PUSH
52686: LD_INT 1
52688: ST_TO_ADDR
// end ;
52689: LD_VAR 0 6
52693: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52694: LD_INT 0
52696: PPUSH
52697: PPUSH
52698: PPUSH
52699: PPUSH
52700: PPUSH
52701: PPUSH
52702: PPUSH
52703: PPUSH
52704: PPUSH
52705: PPUSH
52706: PPUSH
52707: PPUSH
52708: PPUSH
52709: PPUSH
52710: PPUSH
52711: PPUSH
52712: PPUSH
52713: PPUSH
52714: PPUSH
52715: PPUSH
52716: PPUSH
52717: PPUSH
52718: PPUSH
52719: PPUSH
52720: PPUSH
52721: PPUSH
52722: PPUSH
52723: PPUSH
52724: PPUSH
52725: PPUSH
52726: PPUSH
52727: PPUSH
52728: PPUSH
52729: PPUSH
52730: PPUSH
52731: PPUSH
52732: PPUSH
52733: PPUSH
52734: PPUSH
52735: PPUSH
52736: PPUSH
52737: PPUSH
52738: PPUSH
52739: PPUSH
52740: PPUSH
52741: PPUSH
52742: PPUSH
52743: PPUSH
52744: PPUSH
52745: PPUSH
52746: PPUSH
52747: PPUSH
52748: PPUSH
52749: PPUSH
52750: PPUSH
52751: PPUSH
52752: PPUSH
52753: PPUSH
// result = [ ] ;
52754: LD_ADDR_VAR 0 7
52758: PUSH
52759: EMPTY
52760: ST_TO_ADDR
// temp_list = [ ] ;
52761: LD_ADDR_VAR 0 9
52765: PUSH
52766: EMPTY
52767: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52768: LD_VAR 0 4
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: LD_INT 2
52781: PUSH
52782: LD_INT 3
52784: PUSH
52785: LD_INT 4
52787: PUSH
52788: LD_INT 5
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: IN
52799: NOT
52800: IFTRUE 52843
52802: PUSH
52803: LD_VAR 0 1
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: LD_INT 1
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: IN
52818: IFFALSE 52842
52820: PUSH
52821: LD_VAR 0 5
52825: PUSH
52826: LD_INT 1
52828: PUSH
52829: LD_INT 2
52831: PUSH
52832: LD_INT 3
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: LIST
52839: IN
52840: NOT
52841: AND
52842: OR
52843: IFFALSE 52847
// exit ;
52845: GO 71246
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52847: LD_VAR 0 1
52851: PUSH
52852: LD_INT 6
52854: PUSH
52855: LD_INT 7
52857: PUSH
52858: LD_INT 8
52860: PUSH
52861: LD_INT 13
52863: PUSH
52864: LD_INT 12
52866: PUSH
52867: LD_INT 15
52869: PUSH
52870: LD_INT 11
52872: PUSH
52873: LD_INT 14
52875: PUSH
52876: LD_INT 10
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: IN
52890: IFFALSE 52900
// btype = b_lab ;
52892: LD_ADDR_VAR 0 1
52896: PUSH
52897: LD_INT 6
52899: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52900: LD_VAR 0 6
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: LD_INT 1
52910: PUSH
52911: LD_INT 2
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: LIST
52918: IN
52919: NOT
52920: IFTRUE 52988
52922: PUSH
52923: LD_VAR 0 1
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: LD_INT 2
52936: PUSH
52937: LD_INT 3
52939: PUSH
52940: LD_INT 6
52942: PUSH
52943: LD_INT 36
52945: PUSH
52946: LD_INT 4
52948: PUSH
52949: LD_INT 5
52951: PUSH
52952: LD_INT 31
52954: PUSH
52955: LD_INT 32
52957: PUSH
52958: LD_INT 33
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: IN
52974: NOT
52975: IFFALSE 52987
52977: PUSH
52978: LD_VAR 0 6
52982: PUSH
52983: LD_INT 1
52985: EQUAL
52986: AND
52987: OR
52988: IFTRUE 53020
52990: PUSH
52991: LD_VAR 0 1
52995: PUSH
52996: LD_INT 2
52998: PUSH
52999: LD_INT 3
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: IN
53006: NOT
53007: IFFALSE 53019
53009: PUSH
53010: LD_VAR 0 6
53014: PUSH
53015: LD_INT 2
53017: EQUAL
53018: AND
53019: OR
53020: IFFALSE 53030
// mode = 0 ;
53022: LD_ADDR_VAR 0 6
53026: PUSH
53027: LD_INT 0
53029: ST_TO_ADDR
// case mode of 0 :
53030: LD_VAR 0 6
53034: PUSH
53035: LD_INT 0
53037: DOUBLE
53038: EQUAL
53039: IFTRUE 53043
53041: GO 64496
53043: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53044: LD_ADDR_VAR 0 11
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: LD_INT 1
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 1
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: LD_INT 1
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 1
53113: NEG
53114: PUSH
53115: LD_INT 1
53117: NEG
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 1
53125: NEG
53126: PUSH
53127: LD_INT 2
53129: NEG
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: LD_INT 2
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 1
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: LD_INT 2
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: LD_INT 2
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: LD_INT 1
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: PUSH
53191: LD_INT 3
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: LD_INT 3
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: NEG
53211: PUSH
53212: LD_INT 2
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53237: LD_ADDR_VAR 0 12
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 0
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: NEG
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: PUSH
53308: LD_INT 1
53310: NEG
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: LD_INT 1
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 2
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 2
53339: PUSH
53340: LD_INT 1
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 2
53360: NEG
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 2
53371: NEG
53372: PUSH
53373: LD_INT 1
53375: NEG
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 2
53383: NEG
53384: PUSH
53385: LD_INT 1
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 3
53394: NEG
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 3
53405: NEG
53406: PUSH
53407: LD_INT 1
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53433: LD_ADDR_VAR 0 13
53437: PUSH
53438: LD_INT 0
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 0
53450: PUSH
53451: LD_INT 1
53453: NEG
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: LD_INT 0
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: LD_INT 1
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 1
53491: NEG
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: NEG
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: NEG
53515: PUSH
53516: LD_INT 2
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 2
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 2
53536: PUSH
53537: LD_INT 2
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: LD_INT 2
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 2
53556: NEG
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 2
53568: NEG
53569: PUSH
53570: LD_INT 2
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 2
53580: NEG
53581: PUSH
53582: LD_INT 3
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 3
53592: NEG
53593: PUSH
53594: LD_INT 2
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 3
53604: NEG
53605: PUSH
53606: LD_INT 3
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53632: LD_ADDR_VAR 0 14
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 0
53649: PUSH
53650: LD_INT 1
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 1
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: LD_INT 1
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 1
53690: NEG
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 1
53701: NEG
53702: PUSH
53703: LD_INT 1
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: LD_INT 2
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: LD_INT 2
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 1
53747: PUSH
53748: LD_INT 2
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: LD_INT 2
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 1
53767: NEG
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: NEG
53779: PUSH
53780: LD_INT 3
53782: NEG
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 0
53790: PUSH
53791: LD_INT 3
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: LD_INT 2
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53828: LD_ADDR_VAR 0 15
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 0
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 1
53856: PUSH
53857: LD_INT 0
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 1
53886: NEG
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 1
53897: NEG
53898: PUSH
53899: LD_INT 1
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: LD_INT 1
53912: NEG
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 2
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 2
53930: PUSH
53931: LD_INT 1
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 2
53951: NEG
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 2
53962: NEG
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 2
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 3
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 3
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54021: LD_ADDR_VAR 0 16
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: LD_INT 1
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 1
54049: PUSH
54050: LD_INT 0
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: LD_INT 1
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 1
54079: NEG
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 1
54090: NEG
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 1
54102: NEG
54103: PUSH
54104: LD_INT 2
54106: NEG
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 2
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 2
54124: PUSH
54125: LD_INT 2
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: LD_INT 2
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 2
54144: NEG
54145: PUSH
54146: LD_INT 1
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 2
54156: NEG
54157: PUSH
54158: LD_INT 2
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 3
54168: PUSH
54169: LD_INT 2
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 3
54178: PUSH
54179: LD_INT 3
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 2
54188: PUSH
54189: LD_INT 3
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54214: LD_ADDR_VAR 0 17
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 1
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 1
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 0
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 1
54272: NEG
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: NEG
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: LD_INT 2
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: LD_INT 2
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 2
54329: PUSH
54330: LD_INT 0
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 2
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 2
54349: PUSH
54350: LD_INT 2
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: LD_INT 2
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: LD_INT 2
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 2
54390: NEG
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 2
54401: NEG
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 2
54413: NEG
54414: PUSH
54415: LD_INT 2
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54444: LD_ADDR_VAR 0 18
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: LD_INT 0
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: LD_INT 1
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: LD_INT 0
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 1
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: LD_INT 1
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: LD_INT 1
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: LD_INT 2
54529: NEG
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: LD_INT 2
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: LD_INT 1
54551: NEG
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 2
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 2
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 2
54579: PUSH
54580: LD_INT 2
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: LD_INT 2
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: LD_INT 2
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 2
54620: NEG
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 2
54631: NEG
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 2
54643: NEG
54644: PUSH
54645: LD_INT 2
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54674: LD_ADDR_VAR 0 19
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: LD_INT 1
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 1
54732: NEG
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: LD_INT 1
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: LD_INT 2
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: LD_INT 2
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: LD_INT 1
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 2
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 2
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 2
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: LD_INT 2
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: LD_INT 2
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 1
54839: NEG
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 2
54850: NEG
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 2
54861: NEG
54862: PUSH
54863: LD_INT 1
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 2
54873: NEG
54874: PUSH
54875: LD_INT 2
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54904: LD_ADDR_VAR 0 20
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 1
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: NEG
54963: PUSH
54964: LD_INT 0
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: LD_INT 1
54977: NEG
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: LD_INT 2
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: LD_INT 2
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: LD_INT 1
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 2
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 2
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 2
55039: PUSH
55040: LD_INT 2
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: LD_INT 2
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: LD_INT 2
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 2
55080: NEG
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 2
55091: NEG
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 2
55103: NEG
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55134: LD_ADDR_VAR 0 21
55138: PUSH
55139: LD_INT 0
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 1
55172: PUSH
55173: LD_INT 1
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: LD_INT 1
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 1
55192: NEG
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: LD_INT 2
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: LD_INT 2
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: LD_INT 1
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 2
55249: PUSH
55250: LD_INT 0
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 2
55259: PUSH
55260: LD_INT 1
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 2
55269: PUSH
55270: LD_INT 2
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: LD_INT 2
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: LD_INT 2
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 2
55310: NEG
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 2
55321: NEG
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 2
55333: NEG
55334: PUSH
55335: LD_INT 2
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55364: LD_ADDR_VAR 0 22
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: LD_INT 0
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 0
55381: PUSH
55382: LD_INT 1
55384: NEG
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 1
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: LD_INT 1
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 1
55433: NEG
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 1
55445: NEG
55446: PUSH
55447: LD_INT 2
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: LD_INT 2
55460: NEG
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 1
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 2
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 2
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 2
55499: PUSH
55500: LD_INT 2
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 1
55509: PUSH
55510: LD_INT 2
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: LD_INT 2
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: NEG
55530: PUSH
55531: LD_INT 1
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 2
55540: NEG
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: LD_INT 1
55555: NEG
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 2
55563: NEG
55564: PUSH
55565: LD_INT 2
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55594: LD_ADDR_VAR 0 23
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: LD_INT 1
55614: NEG
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 1
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 1
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: LD_INT 1
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 1
55663: NEG
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: LD_INT 2
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 0
55687: PUSH
55688: LD_INT 2
55690: NEG
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 1
55698: PUSH
55699: LD_INT 1
55701: NEG
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 2
55709: PUSH
55710: LD_INT 0
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 2
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 2
55729: PUSH
55730: LD_INT 2
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: LD_INT 2
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: LD_INT 2
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 1
55759: NEG
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 2
55770: NEG
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 2
55781: NEG
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 2
55793: NEG
55794: PUSH
55795: LD_INT 2
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 2
55805: NEG
55806: PUSH
55807: LD_INT 3
55809: NEG
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 1
55817: NEG
55818: PUSH
55819: LD_INT 3
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 1
55829: PUSH
55830: LD_INT 2
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 2
55840: PUSH
55841: LD_INT 1
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55874: LD_ADDR_VAR 0 24
55878: PUSH
55879: LD_INT 0
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 0
55891: PUSH
55892: LD_INT 1
55894: NEG
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 1
55902: PUSH
55903: LD_INT 0
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: PUSH
55913: LD_INT 1
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: LD_INT 1
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: LD_INT 0
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: NEG
55944: PUSH
55945: LD_INT 1
55947: NEG
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: LD_INT 2
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: LD_INT 2
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: LD_INT 1
55981: NEG
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 2
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 2
55999: PUSH
56000: LD_INT 1
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 2
56009: PUSH
56010: LD_INT 2
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: PUSH
56020: LD_INT 2
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: LD_INT 2
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 2
56050: NEG
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 2
56061: NEG
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 2
56073: NEG
56074: PUSH
56075: LD_INT 2
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 1
56085: PUSH
56086: LD_INT 2
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 2
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 3
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 3
56117: PUSH
56118: LD_INT 2
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56150: LD_ADDR_VAR 0 25
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 1
56188: PUSH
56189: LD_INT 1
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: LD_INT 1
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 1
56208: NEG
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: NEG
56220: PUSH
56221: LD_INT 1
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 1
56231: NEG
56232: PUSH
56233: LD_INT 2
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: LD_INT 2
56246: NEG
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 2
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 2
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 2
56285: PUSH
56286: LD_INT 2
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: LD_INT 2
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: LD_INT 2
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 1
56315: NEG
56316: PUSH
56317: LD_INT 1
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 2
56326: NEG
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 2
56337: NEG
56338: PUSH
56339: LD_INT 1
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 2
56349: NEG
56350: PUSH
56351: LD_INT 2
56353: NEG
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 3
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 3
56371: PUSH
56372: LD_INT 2
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 2
56381: PUSH
56382: LD_INT 3
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 1
56391: PUSH
56392: LD_INT 3
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56424: LD_ADDR_VAR 0 26
56428: PUSH
56429: LD_INT 0
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 1
56452: PUSH
56453: LD_INT 0
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 0
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 1
56493: NEG
56494: PUSH
56495: LD_INT 1
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 1
56505: NEG
56506: PUSH
56507: LD_INT 2
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 0
56517: PUSH
56518: LD_INT 2
56520: NEG
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 1
56528: PUSH
56529: LD_INT 1
56531: NEG
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 2
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 2
56549: PUSH
56550: LD_INT 1
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 2
56559: PUSH
56560: LD_INT 2
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: LD_INT 2
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 0
56579: PUSH
56580: LD_INT 2
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 1
56589: NEG
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 2
56600: NEG
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 2
56611: NEG
56612: PUSH
56613: LD_INT 1
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 2
56623: NEG
56624: PUSH
56625: LD_INT 2
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 2
56635: PUSH
56636: LD_INT 3
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: LD_INT 3
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 1
56655: NEG
56656: PUSH
56657: LD_INT 2
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 2
56666: NEG
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56700: LD_ADDR_VAR 0 27
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: LD_INT 0
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: LD_INT 1
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 1
56728: PUSH
56729: LD_INT 0
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: LD_INT 1
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: LD_INT 1
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: LD_INT 1
56773: NEG
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 1
56781: NEG
56782: PUSH
56783: LD_INT 2
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 0
56793: PUSH
56794: LD_INT 2
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 1
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 2
56815: PUSH
56816: LD_INT 0
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 2
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 2
56835: PUSH
56836: LD_INT 2
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 1
56845: PUSH
56846: LD_INT 2
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: LD_INT 2
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 1
56865: NEG
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 2
56876: NEG
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 2
56887: NEG
56888: PUSH
56889: LD_INT 1
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 2
56899: NEG
56900: PUSH
56901: LD_INT 2
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: LD_INT 2
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 2
56922: NEG
56923: PUSH
56924: LD_INT 1
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 3
56933: NEG
56934: PUSH
56935: LD_INT 1
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 3
56945: NEG
56946: PUSH
56947: LD_INT 2
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56980: LD_ADDR_VAR 0 28
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 0
56997: PUSH
56998: LD_INT 1
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 1
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: LD_INT 1
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: LD_INT 1
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: LD_INT 0
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 1
57049: NEG
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 1
57061: NEG
57062: PUSH
57063: LD_INT 2
57065: NEG
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: LD_INT 2
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 1
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 2
57095: PUSH
57096: LD_INT 0
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 2
57105: PUSH
57106: LD_INT 1
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 2
57115: PUSH
57116: LD_INT 2
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: LD_INT 2
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: LD_INT 2
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 1
57145: NEG
57146: PUSH
57147: LD_INT 1
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 2
57156: NEG
57157: PUSH
57158: LD_INT 0
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 2
57167: NEG
57168: PUSH
57169: LD_INT 1
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 2
57179: NEG
57180: PUSH
57181: LD_INT 2
57183: NEG
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 2
57191: NEG
57192: PUSH
57193: LD_INT 3
57195: NEG
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 1
57203: NEG
57204: PUSH
57205: LD_INT 3
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 3
57215: NEG
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 3
57227: NEG
57228: PUSH
57229: LD_INT 2
57231: NEG
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57262: LD_ADDR_VAR 0 29
57266: PUSH
57267: LD_INT 0
57269: PUSH
57270: LD_INT 0
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 0
57279: PUSH
57280: LD_INT 1
57282: NEG
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 1
57290: PUSH
57291: LD_INT 0
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 1
57300: PUSH
57301: LD_INT 1
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 0
57310: PUSH
57311: LD_INT 1
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 1
57320: NEG
57321: PUSH
57322: LD_INT 0
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 1
57331: NEG
57332: PUSH
57333: LD_INT 1
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: LD_INT 2
57347: NEG
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 0
57355: PUSH
57356: LD_INT 2
57358: NEG
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: LD_INT 1
57369: NEG
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 2
57377: PUSH
57378: LD_INT 0
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 2
57387: PUSH
57388: LD_INT 1
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 1
57397: PUSH
57398: LD_INT 2
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: LD_INT 2
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 1
57417: NEG
57418: PUSH
57419: LD_INT 1
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 2
57428: NEG
57429: PUSH
57430: LD_INT 1
57432: NEG
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 2
57440: NEG
57441: PUSH
57442: LD_INT 2
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 2
57452: NEG
57453: PUSH
57454: LD_INT 3
57456: NEG
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 2
57464: PUSH
57465: LD_INT 1
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 3
57475: PUSH
57476: LD_INT 1
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: LD_INT 3
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: LD_INT 2
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 3
57506: NEG
57507: PUSH
57508: LD_INT 2
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57541: LD_ADDR_VAR 0 30
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: LD_INT 0
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 1
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 1
57610: NEG
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 1
57622: NEG
57623: PUSH
57624: LD_INT 2
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 0
57634: PUSH
57635: LD_INT 2
57637: NEG
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 1
57645: PUSH
57646: LD_INT 1
57648: NEG
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 2
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 2
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 2
57676: PUSH
57677: LD_INT 2
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: LD_INT 2
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 1
57696: NEG
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 2
57707: NEG
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 2
57718: NEG
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: LD_INT 3
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: LD_INT 2
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 3
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 2
57763: PUSH
57764: LD_INT 3
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 2
57773: NEG
57774: PUSH
57775: LD_INT 1
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 3
57784: NEG
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57819: LD_ADDR_VAR 0 31
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 1
57857: PUSH
57858: LD_INT 1
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: LD_INT 1
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 1
57877: NEG
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 1
57888: NEG
57889: PUSH
57890: LD_INT 1
57892: NEG
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 1
57900: NEG
57901: PUSH
57902: LD_INT 2
57904: NEG
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: LD_INT 1
57915: NEG
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 2
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 2
57933: PUSH
57934: LD_INT 1
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 2
57943: PUSH
57944: LD_INT 2
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 1
57953: PUSH
57954: LD_INT 2
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: LD_INT 2
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: LD_INT 1
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 2
57984: NEG
57985: PUSH
57986: LD_INT 1
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 2
57996: NEG
57997: PUSH
57998: LD_INT 2
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 2
58008: NEG
58009: PUSH
58010: LD_INT 3
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 2
58020: PUSH
58021: LD_INT 1
58023: NEG
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 3
58031: PUSH
58032: LD_INT 1
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 1
58041: PUSH
58042: LD_INT 3
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 1
58051: NEG
58052: PUSH
58053: LD_INT 2
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 3
58062: NEG
58063: PUSH
58064: LD_INT 2
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58097: LD_ADDR_VAR 0 32
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: LD_INT 0
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: LD_INT 1
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 1
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 1
58135: PUSH
58136: LD_INT 1
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 0
58145: PUSH
58146: LD_INT 1
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 1
58155: NEG
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 1
58166: NEG
58167: PUSH
58168: LD_INT 1
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 1
58178: NEG
58179: PUSH
58180: LD_INT 2
58182: NEG
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 0
58190: PUSH
58191: LD_INT 2
58193: NEG
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 1
58201: PUSH
58202: LD_INT 1
58204: NEG
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 2
58212: PUSH
58213: LD_INT 1
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 2
58222: PUSH
58223: LD_INT 2
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 1
58232: PUSH
58233: LD_INT 2
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 0
58242: PUSH
58243: LD_INT 2
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 1
58252: NEG
58253: PUSH
58254: LD_INT 1
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 2
58263: NEG
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 2
58274: NEG
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: PUSH
58288: LD_INT 3
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 1
58298: PUSH
58299: LD_INT 2
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 3
58309: PUSH
58310: LD_INT 2
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 2
58319: PUSH
58320: LD_INT 3
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 2
58329: NEG
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 3
58340: NEG
58341: PUSH
58342: LD_INT 1
58344: NEG
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58375: LD_ADDR_VAR 0 33
58379: PUSH
58380: LD_INT 0
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 0
58392: PUSH
58393: LD_INT 1
58395: NEG
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: PUSH
58404: LD_INT 0
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 1
58413: PUSH
58414: LD_INT 1
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: LD_INT 1
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 1
58433: NEG
58434: PUSH
58435: LD_INT 0
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 1
58444: NEG
58445: PUSH
58446: LD_INT 1
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 1
58456: NEG
58457: PUSH
58458: LD_INT 2
58460: NEG
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 1
58468: PUSH
58469: LD_INT 1
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 2
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 2
58489: PUSH
58490: LD_INT 1
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 1
58499: PUSH
58500: LD_INT 2
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 0
58509: PUSH
58510: LD_INT 2
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 1
58519: NEG
58520: PUSH
58521: LD_INT 1
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 2
58530: NEG
58531: PUSH
58532: LD_INT 0
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 2
58541: NEG
58542: PUSH
58543: LD_INT 1
58545: NEG
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 2
58553: NEG
58554: PUSH
58555: LD_INT 2
58557: NEG
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 2
58565: NEG
58566: PUSH
58567: LD_INT 3
58569: NEG
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 2
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 3
58588: PUSH
58589: LD_INT 1
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: LD_INT 3
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 1
58608: NEG
58609: PUSH
58610: LD_INT 2
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 3
58619: NEG
58620: PUSH
58621: LD_INT 2
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58654: LD_ADDR_VAR 0 34
58658: PUSH
58659: LD_INT 0
58661: PUSH
58662: LD_INT 0
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 0
58671: PUSH
58672: LD_INT 1
58674: NEG
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 1
58682: PUSH
58683: LD_INT 0
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 1
58692: PUSH
58693: LD_INT 1
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 1
58712: NEG
58713: PUSH
58714: LD_INT 0
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 1
58723: NEG
58724: PUSH
58725: LD_INT 1
58727: NEG
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: LD_INT 2
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 0
58747: PUSH
58748: LD_INT 2
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 1
58758: PUSH
58759: LD_INT 1
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 2
58769: PUSH
58770: LD_INT 1
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 2
58779: PUSH
58780: LD_INT 2
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 1
58789: PUSH
58790: LD_INT 2
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 1
58799: NEG
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 2
58810: NEG
58811: PUSH
58812: LD_INT 0
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 2
58821: NEG
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 2
58833: NEG
58834: PUSH
58835: LD_INT 2
58837: NEG
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 1
58845: NEG
58846: PUSH
58847: LD_INT 3
58849: NEG
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 1
58857: PUSH
58858: LD_INT 2
58860: NEG
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 3
58868: PUSH
58869: LD_INT 2
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 2
58878: PUSH
58879: LD_INT 3
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 2
58888: NEG
58889: PUSH
58890: LD_INT 1
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 3
58899: NEG
58900: PUSH
58901: LD_INT 1
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58934: LD_ADDR_VAR 0 35
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: LD_INT 0
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 0
58951: PUSH
58952: LD_INT 1
58954: NEG
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 1
58962: PUSH
58963: LD_INT 0
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 1
58972: PUSH
58973: LD_INT 1
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 0
58982: PUSH
58983: LD_INT 1
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 1
58992: NEG
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 1
59003: NEG
59004: PUSH
59005: LD_INT 1
59007: NEG
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 2
59015: PUSH
59016: LD_INT 1
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 2
59025: NEG
59026: PUSH
59027: LD_INT 1
59029: NEG
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59046: LD_ADDR_VAR 0 36
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: LD_INT 0
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 0
59063: PUSH
59064: LD_INT 1
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 1
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: LD_INT 1
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: LD_INT 1
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 1
59104: NEG
59105: PUSH
59106: LD_INT 0
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 1
59115: NEG
59116: PUSH
59117: LD_INT 1
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 1
59127: NEG
59128: PUSH
59129: LD_INT 2
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 1
59139: PUSH
59140: LD_INT 2
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59158: LD_ADDR_VAR 0 37
59162: PUSH
59163: LD_INT 0
59165: PUSH
59166: LD_INT 0
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 0
59175: PUSH
59176: LD_INT 1
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 1
59186: PUSH
59187: LD_INT 0
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 1
59196: PUSH
59197: LD_INT 1
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: LD_INT 1
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 1
59227: NEG
59228: PUSH
59229: LD_INT 1
59231: NEG
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 1
59239: PUSH
59240: LD_INT 1
59242: NEG
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 1
59250: NEG
59251: PUSH
59252: LD_INT 1
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59270: LD_ADDR_VAR 0 38
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: LD_INT 0
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 0
59287: PUSH
59288: LD_INT 1
59290: NEG
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 1
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 1
59308: PUSH
59309: LD_INT 1
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 0
59318: PUSH
59319: LD_INT 1
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 1
59328: NEG
59329: PUSH
59330: LD_INT 0
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 1
59339: NEG
59340: PUSH
59341: LD_INT 1
59343: NEG
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 2
59351: PUSH
59352: LD_INT 1
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 2
59361: NEG
59362: PUSH
59363: LD_INT 1
59365: NEG
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59382: LD_ADDR_VAR 0 39
59386: PUSH
59387: LD_INT 0
59389: PUSH
59390: LD_INT 0
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 0
59399: PUSH
59400: LD_INT 1
59402: NEG
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 1
59410: PUSH
59411: LD_INT 0
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 1
59420: PUSH
59421: LD_INT 1
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: LD_INT 1
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 1
59440: NEG
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 1
59451: NEG
59452: PUSH
59453: LD_INT 1
59455: NEG
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 1
59463: NEG
59464: PUSH
59465: LD_INT 2
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 1
59475: PUSH
59476: LD_INT 2
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59494: LD_ADDR_VAR 0 40
59498: PUSH
59499: LD_INT 0
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 0
59511: PUSH
59512: LD_INT 1
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 1
59522: PUSH
59523: LD_INT 0
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 1
59532: PUSH
59533: LD_INT 1
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 0
59542: PUSH
59543: LD_INT 1
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 1
59552: NEG
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 1
59563: NEG
59564: PUSH
59565: LD_INT 1
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 1
59575: PUSH
59576: LD_INT 1
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 1
59586: NEG
59587: PUSH
59588: LD_INT 1
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59606: LD_ADDR_VAR 0 41
59610: PUSH
59611: LD_INT 0
59613: PUSH
59614: LD_INT 0
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: LD_INT 1
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 1
59634: PUSH
59635: LD_INT 0
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 1
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: LD_INT 1
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 1
59675: NEG
59676: PUSH
59677: LD_INT 1
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 1
59687: NEG
59688: PUSH
59689: LD_INT 2
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: PUSH
59700: LD_INT 1
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 2
59710: PUSH
59711: LD_INT 0
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 2
59720: PUSH
59721: LD_INT 1
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 2
59730: PUSH
59731: LD_INT 2
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 1
59740: PUSH
59741: LD_INT 2
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 1
59750: NEG
59751: PUSH
59752: LD_INT 1
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 2
59761: NEG
59762: PUSH
59763: LD_INT 0
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 2
59772: NEG
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 2
59784: NEG
59785: PUSH
59786: LD_INT 2
59788: NEG
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 2
59796: NEG
59797: PUSH
59798: LD_INT 3
59800: NEG
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 2
59808: PUSH
59809: LD_INT 1
59811: NEG
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 3
59819: PUSH
59820: LD_INT 0
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 3
59829: PUSH
59830: LD_INT 1
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 3
59839: PUSH
59840: LD_INT 2
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 3
59849: PUSH
59850: LD_INT 3
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 2
59859: PUSH
59860: LD_INT 3
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 2
59869: NEG
59870: PUSH
59871: LD_INT 1
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 3
59880: NEG
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 3
59891: NEG
59892: PUSH
59893: LD_INT 1
59895: NEG
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 3
59903: NEG
59904: PUSH
59905: LD_INT 2
59907: NEG
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 3
59915: NEG
59916: PUSH
59917: LD_INT 3
59919: NEG
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59956: LD_ADDR_VAR 0 42
59960: PUSH
59961: LD_INT 0
59963: PUSH
59964: LD_INT 0
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: LD_INT 1
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 1
59984: PUSH
59985: LD_INT 0
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 1
59994: PUSH
59995: LD_INT 1
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 0
60004: PUSH
60005: LD_INT 1
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 1
60014: NEG
60015: PUSH
60016: LD_INT 0
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 1
60025: NEG
60026: PUSH
60027: LD_INT 1
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 1
60037: NEG
60038: PUSH
60039: LD_INT 2
60041: NEG
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 0
60049: PUSH
60050: LD_INT 2
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 1
60060: PUSH
60061: LD_INT 1
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 2
60071: PUSH
60072: LD_INT 1
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 2
60081: PUSH
60082: LD_INT 2
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: LD_INT 2
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 0
60101: PUSH
60102: LD_INT 2
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 1
60111: NEG
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 2
60122: NEG
60123: PUSH
60124: LD_INT 1
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 2
60134: NEG
60135: PUSH
60136: LD_INT 2
60138: NEG
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 2
60146: NEG
60147: PUSH
60148: LD_INT 3
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 1
60158: NEG
60159: PUSH
60160: LD_INT 3
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 0
60170: PUSH
60171: LD_INT 3
60173: NEG
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 1
60181: PUSH
60182: LD_INT 2
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 3
60192: PUSH
60193: LD_INT 2
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 3
60202: PUSH
60203: LD_INT 3
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 2
60212: PUSH
60213: LD_INT 3
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 1
60222: PUSH
60223: LD_INT 3
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 0
60232: PUSH
60233: LD_INT 3
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 1
60242: NEG
60243: PUSH
60244: LD_INT 2
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 3
60253: NEG
60254: PUSH
60255: LD_INT 2
60257: NEG
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 3
60265: NEG
60266: PUSH
60267: LD_INT 3
60269: NEG
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60306: LD_ADDR_VAR 0 43
60310: PUSH
60311: LD_INT 0
60313: PUSH
60314: LD_INT 0
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 0
60323: PUSH
60324: LD_INT 1
60326: NEG
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 1
60334: PUSH
60335: LD_INT 0
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 1
60344: PUSH
60345: LD_INT 1
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 0
60354: PUSH
60355: LD_INT 1
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 1
60364: NEG
60365: PUSH
60366: LD_INT 0
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 1
60375: NEG
60376: PUSH
60377: LD_INT 1
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 1
60387: NEG
60388: PUSH
60389: LD_INT 2
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: LD_INT 2
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 1
60410: PUSH
60411: LD_INT 1
60413: NEG
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 2
60421: PUSH
60422: LD_INT 0
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 2
60431: PUSH
60432: LD_INT 1
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 1
60441: PUSH
60442: LD_INT 2
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 0
60451: PUSH
60452: LD_INT 2
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 1
60461: NEG
60462: PUSH
60463: LD_INT 1
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 2
60472: NEG
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 2
60483: NEG
60484: PUSH
60485: LD_INT 1
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 1
60495: NEG
60496: PUSH
60497: LD_INT 3
60499: NEG
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 0
60507: PUSH
60508: LD_INT 3
60510: NEG
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 1
60518: PUSH
60519: LD_INT 2
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 2
60529: PUSH
60530: LD_INT 1
60532: NEG
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 3
60540: PUSH
60541: LD_INT 0
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 3
60550: PUSH
60551: LD_INT 1
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: LD_INT 3
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 0
60570: PUSH
60571: LD_INT 3
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 1
60580: NEG
60581: PUSH
60582: LD_INT 2
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 2
60591: NEG
60592: PUSH
60593: LD_INT 1
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 3
60602: NEG
60603: PUSH
60604: LD_INT 0
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 3
60613: NEG
60614: PUSH
60615: LD_INT 1
60617: NEG
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60654: LD_ADDR_VAR 0 44
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: LD_INT 0
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 0
60671: PUSH
60672: LD_INT 1
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 1
60682: PUSH
60683: LD_INT 0
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 1
60692: PUSH
60693: LD_INT 1
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 0
60702: PUSH
60703: LD_INT 1
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 1
60712: NEG
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 1
60723: NEG
60724: PUSH
60725: LD_INT 1
60727: NEG
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 1
60735: NEG
60736: PUSH
60737: LD_INT 2
60739: NEG
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 1
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 2
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 2
60768: PUSH
60769: LD_INT 1
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 2
60778: PUSH
60779: LD_INT 2
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 1
60788: PUSH
60789: LD_INT 2
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 1
60798: NEG
60799: PUSH
60800: LD_INT 1
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 2
60809: NEG
60810: PUSH
60811: LD_INT 0
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 2
60820: NEG
60821: PUSH
60822: LD_INT 1
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 2
60832: NEG
60833: PUSH
60834: LD_INT 2
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 2
60844: NEG
60845: PUSH
60846: LD_INT 3
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 2
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 3
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 3
60877: PUSH
60878: LD_INT 1
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 3
60887: PUSH
60888: LD_INT 2
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 3
60897: PUSH
60898: LD_INT 3
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 2
60907: PUSH
60908: LD_INT 3
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 2
60917: NEG
60918: PUSH
60919: LD_INT 1
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 3
60928: NEG
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 3
60939: NEG
60940: PUSH
60941: LD_INT 1
60943: NEG
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 3
60951: NEG
60952: PUSH
60953: LD_INT 2
60955: NEG
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 3
60963: NEG
60964: PUSH
60965: LD_INT 3
60967: NEG
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61004: LD_ADDR_VAR 0 45
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: LD_INT 0
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: LD_INT 1
61024: NEG
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 1
61032: PUSH
61033: LD_INT 0
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 1
61042: PUSH
61043: LD_INT 1
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 0
61052: PUSH
61053: LD_INT 1
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 1
61062: NEG
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 1
61073: NEG
61074: PUSH
61075: LD_INT 1
61077: NEG
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 1
61085: NEG
61086: PUSH
61087: LD_INT 2
61089: NEG
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 0
61097: PUSH
61098: LD_INT 2
61100: NEG
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 1
61108: PUSH
61109: LD_INT 1
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 2
61119: PUSH
61120: LD_INT 1
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 2
61129: PUSH
61130: LD_INT 2
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 1
61139: PUSH
61140: LD_INT 2
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 0
61149: PUSH
61150: LD_INT 2
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 2
61170: NEG
61171: PUSH
61172: LD_INT 1
61174: NEG
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 2
61182: NEG
61183: PUSH
61184: LD_INT 2
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 2
61194: NEG
61195: PUSH
61196: LD_INT 3
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 1
61206: NEG
61207: PUSH
61208: LD_INT 3
61210: NEG
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 0
61218: PUSH
61219: LD_INT 3
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: PUSH
61230: LD_INT 2
61232: NEG
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 3
61240: PUSH
61241: LD_INT 2
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 3
61250: PUSH
61251: LD_INT 3
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 2
61260: PUSH
61261: LD_INT 3
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 1
61270: PUSH
61271: LD_INT 3
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: LD_INT 3
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 1
61290: NEG
61291: PUSH
61292: LD_INT 2
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 3
61301: NEG
61302: PUSH
61303: LD_INT 2
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 3
61313: NEG
61314: PUSH
61315: LD_INT 3
61317: NEG
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61354: LD_ADDR_VAR 0 46
61358: PUSH
61359: LD_INT 0
61361: PUSH
61362: LD_INT 0
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 0
61371: PUSH
61372: LD_INT 1
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 1
61382: PUSH
61383: LD_INT 0
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 1
61392: PUSH
61393: LD_INT 1
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 0
61402: PUSH
61403: LD_INT 1
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 1
61412: NEG
61413: PUSH
61414: LD_INT 0
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 1
61423: NEG
61424: PUSH
61425: LD_INT 1
61427: NEG
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 1
61435: NEG
61436: PUSH
61437: LD_INT 2
61439: NEG
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: LD_INT 2
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 1
61458: PUSH
61459: LD_INT 1
61461: NEG
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 2
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 2
61479: PUSH
61480: LD_INT 1
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 1
61489: PUSH
61490: LD_INT 2
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 0
61499: PUSH
61500: LD_INT 2
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 1
61509: NEG
61510: PUSH
61511: LD_INT 1
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 2
61520: NEG
61521: PUSH
61522: LD_INT 0
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 2
61531: NEG
61532: PUSH
61533: LD_INT 1
61535: NEG
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 1
61543: NEG
61544: PUSH
61545: LD_INT 3
61547: NEG
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 0
61555: PUSH
61556: LD_INT 3
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 1
61566: PUSH
61567: LD_INT 2
61569: NEG
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 2
61577: PUSH
61578: LD_INT 1
61580: NEG
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 3
61588: PUSH
61589: LD_INT 0
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 3
61598: PUSH
61599: LD_INT 1
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 1
61608: PUSH
61609: LD_INT 3
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 0
61618: PUSH
61619: LD_INT 3
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 1
61628: NEG
61629: PUSH
61630: LD_INT 2
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 2
61639: NEG
61640: PUSH
61641: LD_INT 1
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 3
61650: NEG
61651: PUSH
61652: LD_INT 0
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 3
61661: NEG
61662: PUSH
61663: LD_INT 1
61665: NEG
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61702: LD_ADDR_VAR 0 47
61706: PUSH
61707: LD_INT 0
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 0
61719: PUSH
61720: LD_INT 1
61722: NEG
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 1
61730: PUSH
61731: LD_INT 0
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 1
61740: PUSH
61741: LD_INT 1
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 0
61750: PUSH
61751: LD_INT 1
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 1
61760: NEG
61761: PUSH
61762: LD_INT 0
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 1
61771: NEG
61772: PUSH
61773: LD_INT 1
61775: NEG
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 1
61783: NEG
61784: PUSH
61785: LD_INT 2
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 0
61795: PUSH
61796: LD_INT 2
61798: NEG
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 1
61806: PUSH
61807: LD_INT 1
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 2
61817: NEG
61818: PUSH
61819: LD_INT 1
61821: NEG
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 2
61829: NEG
61830: PUSH
61831: LD_INT 2
61833: NEG
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61853: LD_ADDR_VAR 0 48
61857: PUSH
61858: LD_INT 0
61860: PUSH
61861: LD_INT 0
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 1
61881: PUSH
61882: LD_INT 0
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 1
61891: PUSH
61892: LD_INT 1
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 0
61901: PUSH
61902: LD_INT 1
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 1
61911: NEG
61912: PUSH
61913: LD_INT 0
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 1
61922: NEG
61923: PUSH
61924: LD_INT 1
61926: NEG
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 1
61934: NEG
61935: PUSH
61936: LD_INT 2
61938: NEG
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 0
61946: PUSH
61947: LD_INT 2
61949: NEG
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 1
61957: PUSH
61958: LD_INT 1
61960: NEG
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 2
61968: PUSH
61969: LD_INT 0
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 2
61978: PUSH
61979: LD_INT 1
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62000: LD_ADDR_VAR 0 49
62004: PUSH
62005: LD_INT 0
62007: PUSH
62008: LD_INT 0
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 0
62017: PUSH
62018: LD_INT 1
62020: NEG
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 1
62028: PUSH
62029: LD_INT 0
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 1
62038: PUSH
62039: LD_INT 1
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: LD_INT 1
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 1
62058: NEG
62059: PUSH
62060: LD_INT 0
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 1
62069: NEG
62070: PUSH
62071: LD_INT 1
62073: NEG
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 1
62081: PUSH
62082: LD_INT 1
62084: NEG
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 2
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 2
62102: PUSH
62103: LD_INT 1
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 2
62112: PUSH
62113: LD_INT 2
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 1
62122: PUSH
62123: LD_INT 2
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62144: LD_ADDR_VAR 0 50
62148: PUSH
62149: LD_INT 0
62151: PUSH
62152: LD_INT 0
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 0
62161: PUSH
62162: LD_INT 1
62164: NEG
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 1
62172: PUSH
62173: LD_INT 0
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 1
62182: PUSH
62183: LD_INT 1
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 0
62192: PUSH
62193: LD_INT 1
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 1
62202: NEG
62203: PUSH
62204: LD_INT 0
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 1
62213: NEG
62214: PUSH
62215: LD_INT 1
62217: NEG
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 2
62225: PUSH
62226: LD_INT 1
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 2
62235: PUSH
62236: LD_INT 2
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 1
62245: PUSH
62246: LD_INT 2
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 0
62255: PUSH
62256: LD_INT 2
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 1
62265: NEG
62266: PUSH
62267: LD_INT 1
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62288: LD_ADDR_VAR 0 51
62292: PUSH
62293: LD_INT 0
62295: PUSH
62296: LD_INT 0
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 0
62305: PUSH
62306: LD_INT 1
62308: NEG
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 1
62316: PUSH
62317: LD_INT 0
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 1
62326: PUSH
62327: LD_INT 1
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 0
62336: PUSH
62337: LD_INT 1
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 1
62346: NEG
62347: PUSH
62348: LD_INT 0
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 1
62357: NEG
62358: PUSH
62359: LD_INT 1
62361: NEG
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 1
62369: PUSH
62370: LD_INT 2
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 0
62379: PUSH
62380: LD_INT 2
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 1
62389: NEG
62390: PUSH
62391: LD_INT 1
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 2
62400: NEG
62401: PUSH
62402: LD_INT 0
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 2
62411: NEG
62412: PUSH
62413: LD_INT 1
62415: NEG
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62435: LD_ADDR_VAR 0 52
62439: PUSH
62440: LD_INT 0
62442: PUSH
62443: LD_INT 0
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 0
62452: PUSH
62453: LD_INT 1
62455: NEG
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 1
62463: PUSH
62464: LD_INT 0
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 1
62473: PUSH
62474: LD_INT 1
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 0
62483: PUSH
62484: LD_INT 1
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 1
62493: NEG
62494: PUSH
62495: LD_INT 0
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 1
62504: NEG
62505: PUSH
62506: LD_INT 1
62508: NEG
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 1
62516: NEG
62517: PUSH
62518: LD_INT 2
62520: NEG
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 1
62528: NEG
62529: PUSH
62530: LD_INT 1
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 2
62539: NEG
62540: PUSH
62541: LD_INT 0
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 2
62550: NEG
62551: PUSH
62552: LD_INT 1
62554: NEG
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 2
62562: NEG
62563: PUSH
62564: LD_INT 2
62566: NEG
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62586: LD_ADDR_VAR 0 53
62590: PUSH
62591: LD_INT 0
62593: PUSH
62594: LD_INT 0
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 0
62603: PUSH
62604: LD_INT 1
62606: NEG
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 1
62614: PUSH
62615: LD_INT 0
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 1
62624: PUSH
62625: LD_INT 1
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 0
62634: PUSH
62635: LD_INT 1
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 1
62644: NEG
62645: PUSH
62646: LD_INT 0
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 1
62655: NEG
62656: PUSH
62657: LD_INT 1
62659: NEG
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 1
62667: NEG
62668: PUSH
62669: LD_INT 2
62671: NEG
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: LD_INT 2
62682: NEG
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 1
62690: PUSH
62691: LD_INT 1
62693: NEG
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 2
62701: PUSH
62702: LD_INT 0
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 2
62711: PUSH
62712: LD_INT 1
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 2
62721: PUSH
62722: LD_INT 2
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 1
62731: PUSH
62732: LD_INT 2
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 0
62741: PUSH
62742: LD_INT 2
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 1
62751: NEG
62752: PUSH
62753: LD_INT 1
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 2
62762: NEG
62763: PUSH
62764: LD_INT 0
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 2
62773: NEG
62774: PUSH
62775: LD_INT 1
62777: NEG
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 2
62785: NEG
62786: PUSH
62787: LD_INT 2
62789: NEG
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62816: LD_ADDR_VAR 0 54
62820: PUSH
62821: LD_INT 0
62823: PUSH
62824: LD_INT 0
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: LD_INT 1
62836: NEG
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 1
62844: PUSH
62845: LD_INT 0
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 1
62854: PUSH
62855: LD_INT 1
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 0
62864: PUSH
62865: LD_INT 1
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 1
62874: NEG
62875: PUSH
62876: LD_INT 0
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 1
62885: NEG
62886: PUSH
62887: LD_INT 1
62889: NEG
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 1
62897: NEG
62898: PUSH
62899: LD_INT 2
62901: NEG
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 0
62909: PUSH
62910: LD_INT 2
62912: NEG
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 1
62920: PUSH
62921: LD_INT 1
62923: NEG
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 2
62931: PUSH
62932: LD_INT 0
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 2
62941: PUSH
62942: LD_INT 1
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 2
62951: PUSH
62952: LD_INT 2
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 1
62961: PUSH
62962: LD_INT 2
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 0
62971: PUSH
62972: LD_INT 2
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 1
62981: NEG
62982: PUSH
62983: LD_INT 1
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 2
62992: NEG
62993: PUSH
62994: LD_INT 0
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 2
63003: NEG
63004: PUSH
63005: LD_INT 1
63007: NEG
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 2
63015: NEG
63016: PUSH
63017: LD_INT 2
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63046: LD_ADDR_VAR 0 55
63050: PUSH
63051: LD_INT 0
63053: PUSH
63054: LD_INT 0
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 0
63063: PUSH
63064: LD_INT 1
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 1
63074: PUSH
63075: LD_INT 0
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 1
63084: PUSH
63085: LD_INT 1
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 0
63094: PUSH
63095: LD_INT 1
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 1
63104: NEG
63105: PUSH
63106: LD_INT 0
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 1
63115: NEG
63116: PUSH
63117: LD_INT 1
63119: NEG
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 1
63127: NEG
63128: PUSH
63129: LD_INT 2
63131: NEG
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 0
63139: PUSH
63140: LD_INT 2
63142: NEG
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 1
63150: PUSH
63151: LD_INT 1
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 2
63161: PUSH
63162: LD_INT 0
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 2
63171: PUSH
63172: LD_INT 1
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 2
63181: PUSH
63182: LD_INT 2
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 1
63191: PUSH
63192: LD_INT 2
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 0
63201: PUSH
63202: LD_INT 2
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 1
63211: NEG
63212: PUSH
63213: LD_INT 1
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 2
63222: NEG
63223: PUSH
63224: LD_INT 0
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 2
63233: NEG
63234: PUSH
63235: LD_INT 1
63237: NEG
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 2
63245: NEG
63246: PUSH
63247: LD_INT 2
63249: NEG
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63276: LD_ADDR_VAR 0 56
63280: PUSH
63281: LD_INT 0
63283: PUSH
63284: LD_INT 0
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: LD_INT 1
63296: NEG
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 1
63304: PUSH
63305: LD_INT 0
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 1
63314: PUSH
63315: LD_INT 1
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 0
63324: PUSH
63325: LD_INT 1
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 1
63334: NEG
63335: PUSH
63336: LD_INT 0
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 1
63345: NEG
63346: PUSH
63347: LD_INT 1
63349: NEG
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 1
63357: NEG
63358: PUSH
63359: LD_INT 2
63361: NEG
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 0
63369: PUSH
63370: LD_INT 2
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 1
63380: PUSH
63381: LD_INT 1
63383: NEG
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 2
63391: PUSH
63392: LD_INT 0
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 2
63401: PUSH
63402: LD_INT 1
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 2
63411: PUSH
63412: LD_INT 2
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 1
63421: PUSH
63422: LD_INT 2
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: LD_INT 2
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 1
63441: NEG
63442: PUSH
63443: LD_INT 1
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 2
63452: NEG
63453: PUSH
63454: LD_INT 0
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 2
63463: NEG
63464: PUSH
63465: LD_INT 1
63467: NEG
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 2
63475: NEG
63476: PUSH
63477: LD_INT 2
63479: NEG
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63506: LD_ADDR_VAR 0 57
63510: PUSH
63511: LD_INT 0
63513: PUSH
63514: LD_INT 0
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 0
63523: PUSH
63524: LD_INT 1
63526: NEG
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 1
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 1
63544: PUSH
63545: LD_INT 1
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 0
63554: PUSH
63555: LD_INT 1
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 1
63564: NEG
63565: PUSH
63566: LD_INT 0
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 1
63575: NEG
63576: PUSH
63577: LD_INT 1
63579: NEG
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 1
63587: NEG
63588: PUSH
63589: LD_INT 2
63591: NEG
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 0
63599: PUSH
63600: LD_INT 2
63602: NEG
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 1
63610: PUSH
63611: LD_INT 1
63613: NEG
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 2
63621: PUSH
63622: LD_INT 0
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 2
63631: PUSH
63632: LD_INT 1
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 2
63641: PUSH
63642: LD_INT 2
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 1
63651: PUSH
63652: LD_INT 2
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 0
63661: PUSH
63662: LD_INT 2
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 1
63671: NEG
63672: PUSH
63673: LD_INT 1
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 2
63682: NEG
63683: PUSH
63684: LD_INT 0
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 2
63693: NEG
63694: PUSH
63695: LD_INT 1
63697: NEG
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 2
63705: NEG
63706: PUSH
63707: LD_INT 2
63709: NEG
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63736: LD_ADDR_VAR 0 58
63740: PUSH
63741: LD_INT 0
63743: PUSH
63744: LD_INT 0
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 0
63753: PUSH
63754: LD_INT 1
63756: NEG
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 1
63764: PUSH
63765: LD_INT 0
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 1
63774: PUSH
63775: LD_INT 1
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 0
63784: PUSH
63785: LD_INT 1
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 1
63794: NEG
63795: PUSH
63796: LD_INT 0
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 1
63805: NEG
63806: PUSH
63807: LD_INT 1
63809: NEG
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 1
63817: NEG
63818: PUSH
63819: LD_INT 2
63821: NEG
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 0
63829: PUSH
63830: LD_INT 2
63832: NEG
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 1
63840: PUSH
63841: LD_INT 1
63843: NEG
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 2
63851: PUSH
63852: LD_INT 0
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 2
63861: PUSH
63862: LD_INT 1
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 2
63871: PUSH
63872: LD_INT 2
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 1
63881: PUSH
63882: LD_INT 2
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 0
63891: PUSH
63892: LD_INT 2
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 1
63901: NEG
63902: PUSH
63903: LD_INT 1
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 2
63912: NEG
63913: PUSH
63914: LD_INT 0
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 2
63923: NEG
63924: PUSH
63925: LD_INT 1
63927: NEG
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 2
63935: NEG
63936: PUSH
63937: LD_INT 2
63939: NEG
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63966: LD_ADDR_VAR 0 59
63970: PUSH
63971: LD_INT 0
63973: PUSH
63974: LD_INT 0
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 0
63983: PUSH
63984: LD_INT 1
63986: NEG
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 1
63994: PUSH
63995: LD_INT 0
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 1
64004: PUSH
64005: LD_INT 1
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 0
64014: PUSH
64015: LD_INT 1
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 1
64024: NEG
64025: PUSH
64026: LD_INT 0
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 1
64035: NEG
64036: PUSH
64037: LD_INT 1
64039: NEG
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64054: LD_ADDR_VAR 0 60
64058: PUSH
64059: LD_INT 0
64061: PUSH
64062: LD_INT 0
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 0
64071: PUSH
64072: LD_INT 1
64074: NEG
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 1
64082: PUSH
64083: LD_INT 0
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 1
64092: PUSH
64093: LD_INT 1
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 0
64102: PUSH
64103: LD_INT 1
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 1
64112: NEG
64113: PUSH
64114: LD_INT 0
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 1
64123: NEG
64124: PUSH
64125: LD_INT 1
64127: NEG
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64142: LD_ADDR_VAR 0 61
64146: PUSH
64147: LD_INT 0
64149: PUSH
64150: LD_INT 0
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 0
64159: PUSH
64160: LD_INT 1
64162: NEG
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 1
64170: PUSH
64171: LD_INT 0
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 1
64180: PUSH
64181: LD_INT 1
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 0
64190: PUSH
64191: LD_INT 1
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 1
64200: NEG
64201: PUSH
64202: LD_INT 0
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 1
64211: NEG
64212: PUSH
64213: LD_INT 1
64215: NEG
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64230: LD_ADDR_VAR 0 62
64234: PUSH
64235: LD_INT 0
64237: PUSH
64238: LD_INT 0
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 0
64247: PUSH
64248: LD_INT 1
64250: NEG
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 1
64258: PUSH
64259: LD_INT 0
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 1
64268: PUSH
64269: LD_INT 1
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 0
64278: PUSH
64279: LD_INT 1
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 1
64288: NEG
64289: PUSH
64290: LD_INT 0
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 1
64299: NEG
64300: PUSH
64301: LD_INT 1
64303: NEG
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64318: LD_ADDR_VAR 0 63
64322: PUSH
64323: LD_INT 0
64325: PUSH
64326: LD_INT 0
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 0
64335: PUSH
64336: LD_INT 1
64338: NEG
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 1
64346: PUSH
64347: LD_INT 0
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 1
64356: PUSH
64357: LD_INT 1
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 0
64366: PUSH
64367: LD_INT 1
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 1
64376: NEG
64377: PUSH
64378: LD_INT 0
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 1
64387: NEG
64388: PUSH
64389: LD_INT 1
64391: NEG
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64406: LD_ADDR_VAR 0 64
64410: PUSH
64411: LD_INT 0
64413: PUSH
64414: LD_INT 0
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 0
64423: PUSH
64424: LD_INT 1
64426: NEG
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 1
64434: PUSH
64435: LD_INT 0
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 1
64444: PUSH
64445: LD_INT 1
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 0
64454: PUSH
64455: LD_INT 1
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 1
64464: NEG
64465: PUSH
64466: LD_INT 0
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 1
64475: NEG
64476: PUSH
64477: LD_INT 1
64479: NEG
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: ST_TO_ADDR
// end ; 1 :
64494: GO 70391
64496: LD_INT 1
64498: DOUBLE
64499: EQUAL
64500: IFTRUE 64504
64502: GO 67127
64504: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64505: LD_ADDR_VAR 0 11
64509: PUSH
64510: LD_INT 1
64512: NEG
64513: PUSH
64514: LD_INT 3
64516: NEG
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 0
64524: PUSH
64525: LD_INT 3
64527: NEG
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 1
64535: PUSH
64536: LD_INT 2
64538: NEG
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: LIST
64548: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64549: LD_ADDR_VAR 0 12
64553: PUSH
64554: LD_INT 2
64556: PUSH
64557: LD_INT 1
64559: NEG
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 3
64567: PUSH
64568: LD_INT 0
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 3
64577: PUSH
64578: LD_INT 1
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: LIST
64589: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64590: LD_ADDR_VAR 0 13
64594: PUSH
64595: LD_INT 3
64597: PUSH
64598: LD_INT 2
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 3
64607: PUSH
64608: LD_INT 3
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 2
64617: PUSH
64618: LD_INT 3
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: LIST
64629: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64630: LD_ADDR_VAR 0 14
64634: PUSH
64635: LD_INT 1
64637: PUSH
64638: LD_INT 3
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 0
64647: PUSH
64648: LD_INT 3
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 1
64657: NEG
64658: PUSH
64659: LD_INT 2
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: LIST
64670: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64671: LD_ADDR_VAR 0 15
64675: PUSH
64676: LD_INT 2
64678: NEG
64679: PUSH
64680: LD_INT 1
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 3
64689: NEG
64690: PUSH
64691: LD_INT 0
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 3
64700: NEG
64701: PUSH
64702: LD_INT 1
64704: NEG
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: LIST
64714: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64715: LD_ADDR_VAR 0 16
64719: PUSH
64720: LD_INT 2
64722: NEG
64723: PUSH
64724: LD_INT 3
64726: NEG
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 3
64734: NEG
64735: PUSH
64736: LD_INT 2
64738: NEG
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 3
64746: NEG
64747: PUSH
64748: LD_INT 3
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: LIST
64760: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64761: LD_ADDR_VAR 0 17
64765: PUSH
64766: LD_INT 1
64768: NEG
64769: PUSH
64770: LD_INT 3
64772: NEG
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 0
64780: PUSH
64781: LD_INT 3
64783: NEG
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 1
64791: PUSH
64792: LD_INT 2
64794: NEG
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: LIST
64804: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64805: LD_ADDR_VAR 0 18
64809: PUSH
64810: LD_INT 2
64812: PUSH
64813: LD_INT 1
64815: NEG
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 3
64823: PUSH
64824: LD_INT 0
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 3
64833: PUSH
64834: LD_INT 1
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: LIST
64845: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64846: LD_ADDR_VAR 0 19
64850: PUSH
64851: LD_INT 3
64853: PUSH
64854: LD_INT 2
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 3
64863: PUSH
64864: LD_INT 3
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 2
64873: PUSH
64874: LD_INT 3
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: LIST
64885: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64886: LD_ADDR_VAR 0 20
64890: PUSH
64891: LD_INT 1
64893: PUSH
64894: LD_INT 3
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 0
64903: PUSH
64904: LD_INT 3
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 1
64913: NEG
64914: PUSH
64915: LD_INT 2
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: LIST
64926: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64927: LD_ADDR_VAR 0 21
64931: PUSH
64932: LD_INT 2
64934: NEG
64935: PUSH
64936: LD_INT 1
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 3
64945: NEG
64946: PUSH
64947: LD_INT 0
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 3
64956: NEG
64957: PUSH
64958: LD_INT 1
64960: NEG
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: LIST
64970: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64971: LD_ADDR_VAR 0 22
64975: PUSH
64976: LD_INT 2
64978: NEG
64979: PUSH
64980: LD_INT 3
64982: NEG
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: LD_INT 3
64990: NEG
64991: PUSH
64992: LD_INT 2
64994: NEG
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 3
65002: NEG
65003: PUSH
65004: LD_INT 3
65006: NEG
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: LIST
65016: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65017: LD_ADDR_VAR 0 23
65021: PUSH
65022: LD_INT 0
65024: PUSH
65025: LD_INT 3
65027: NEG
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 1
65035: NEG
65036: PUSH
65037: LD_INT 4
65039: NEG
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 1
65047: PUSH
65048: LD_INT 3
65050: NEG
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: LIST
65060: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65061: LD_ADDR_VAR 0 24
65065: PUSH
65066: LD_INT 3
65068: PUSH
65069: LD_INT 0
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 3
65078: PUSH
65079: LD_INT 1
65081: NEG
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 4
65089: PUSH
65090: LD_INT 1
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: LIST
65101: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65102: LD_ADDR_VAR 0 25
65106: PUSH
65107: LD_INT 3
65109: PUSH
65110: LD_INT 3
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 4
65119: PUSH
65120: LD_INT 3
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 3
65129: PUSH
65130: LD_INT 4
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: LIST
65141: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65142: LD_ADDR_VAR 0 26
65146: PUSH
65147: LD_INT 0
65149: PUSH
65150: LD_INT 3
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 1
65159: PUSH
65160: LD_INT 4
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 1
65169: NEG
65170: PUSH
65171: LD_INT 3
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: LIST
65182: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65183: LD_ADDR_VAR 0 27
65187: PUSH
65188: LD_INT 3
65190: NEG
65191: PUSH
65192: LD_INT 0
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 3
65201: NEG
65202: PUSH
65203: LD_INT 1
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 4
65212: NEG
65213: PUSH
65214: LD_INT 1
65216: NEG
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: LIST
65226: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65227: LD_ADDR_VAR 0 28
65231: PUSH
65232: LD_INT 3
65234: NEG
65235: PUSH
65236: LD_INT 3
65238: NEG
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: LD_INT 3
65246: NEG
65247: PUSH
65248: LD_INT 4
65250: NEG
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 4
65258: NEG
65259: PUSH
65260: LD_INT 3
65262: NEG
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: LIST
65272: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65273: LD_ADDR_VAR 0 29
65277: PUSH
65278: LD_INT 1
65280: NEG
65281: PUSH
65282: LD_INT 3
65284: NEG
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 0
65292: PUSH
65293: LD_INT 3
65295: NEG
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 1
65303: PUSH
65304: LD_INT 2
65306: NEG
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 1
65314: NEG
65315: PUSH
65316: LD_INT 4
65318: NEG
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 0
65326: PUSH
65327: LD_INT 4
65329: NEG
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 1
65337: PUSH
65338: LD_INT 3
65340: NEG
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 1
65348: NEG
65349: PUSH
65350: LD_INT 5
65352: NEG
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 0
65360: PUSH
65361: LD_INT 5
65363: NEG
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 1
65371: PUSH
65372: LD_INT 4
65374: NEG
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 1
65382: NEG
65383: PUSH
65384: LD_INT 6
65386: NEG
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 0
65394: PUSH
65395: LD_INT 6
65397: NEG
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 1
65405: PUSH
65406: LD_INT 5
65408: NEG
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: LIST
65423: LIST
65424: LIST
65425: LIST
65426: LIST
65427: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65428: LD_ADDR_VAR 0 30
65432: PUSH
65433: LD_INT 2
65435: PUSH
65436: LD_INT 1
65438: NEG
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 3
65446: PUSH
65447: LD_INT 0
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 3
65456: PUSH
65457: LD_INT 1
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 3
65466: PUSH
65467: LD_INT 1
65469: NEG
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 4
65477: PUSH
65478: LD_INT 0
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 4
65487: PUSH
65488: LD_INT 1
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 4
65497: PUSH
65498: LD_INT 1
65500: NEG
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 5
65508: PUSH
65509: LD_INT 0
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 5
65518: PUSH
65519: LD_INT 1
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 5
65528: PUSH
65529: LD_INT 1
65531: NEG
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 6
65539: PUSH
65540: LD_INT 0
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 6
65549: PUSH
65550: LD_INT 1
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65571: LD_ADDR_VAR 0 31
65575: PUSH
65576: LD_INT 3
65578: PUSH
65579: LD_INT 2
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 3
65588: PUSH
65589: LD_INT 3
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 2
65598: PUSH
65599: LD_INT 3
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 4
65608: PUSH
65609: LD_INT 3
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 4
65618: PUSH
65619: LD_INT 4
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: LD_INT 3
65628: PUSH
65629: LD_INT 4
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 5
65638: PUSH
65639: LD_INT 4
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 5
65648: PUSH
65649: LD_INT 5
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 4
65658: PUSH
65659: LD_INT 5
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 6
65668: PUSH
65669: LD_INT 5
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 6
65678: PUSH
65679: LD_INT 6
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 5
65688: PUSH
65689: LD_INT 6
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65710: LD_ADDR_VAR 0 32
65714: PUSH
65715: LD_INT 1
65717: PUSH
65718: LD_INT 3
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 0
65727: PUSH
65728: LD_INT 3
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 1
65737: NEG
65738: PUSH
65739: LD_INT 2
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 1
65748: PUSH
65749: LD_INT 4
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 0
65758: PUSH
65759: LD_INT 4
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 1
65768: NEG
65769: PUSH
65770: LD_INT 3
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 1
65779: PUSH
65780: LD_INT 5
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 0
65789: PUSH
65790: LD_INT 5
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 1
65799: NEG
65800: PUSH
65801: LD_INT 4
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 1
65810: PUSH
65811: LD_INT 6
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 0
65820: PUSH
65821: LD_INT 6
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 1
65830: NEG
65831: PUSH
65832: LD_INT 5
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65853: LD_ADDR_VAR 0 33
65857: PUSH
65858: LD_INT 2
65860: NEG
65861: PUSH
65862: LD_INT 1
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 3
65871: NEG
65872: PUSH
65873: LD_INT 0
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 3
65882: NEG
65883: PUSH
65884: LD_INT 1
65886: NEG
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 3
65894: NEG
65895: PUSH
65896: LD_INT 1
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 4
65905: NEG
65906: PUSH
65907: LD_INT 0
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 4
65916: NEG
65917: PUSH
65918: LD_INT 1
65920: NEG
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 4
65928: NEG
65929: PUSH
65930: LD_INT 1
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 5
65939: NEG
65940: PUSH
65941: LD_INT 0
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 5
65950: NEG
65951: PUSH
65952: LD_INT 1
65954: NEG
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 5
65962: NEG
65963: PUSH
65964: LD_INT 1
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 6
65973: NEG
65974: PUSH
65975: LD_INT 0
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 6
65984: NEG
65985: PUSH
65986: LD_INT 1
65988: NEG
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66008: LD_ADDR_VAR 0 34
66012: PUSH
66013: LD_INT 2
66015: NEG
66016: PUSH
66017: LD_INT 3
66019: NEG
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 3
66027: NEG
66028: PUSH
66029: LD_INT 2
66031: NEG
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 3
66039: NEG
66040: PUSH
66041: LD_INT 3
66043: NEG
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 3
66051: NEG
66052: PUSH
66053: LD_INT 4
66055: NEG
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 4
66063: NEG
66064: PUSH
66065: LD_INT 3
66067: NEG
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 4
66075: NEG
66076: PUSH
66077: LD_INT 4
66079: NEG
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 4
66087: NEG
66088: PUSH
66089: LD_INT 5
66091: NEG
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 5
66099: NEG
66100: PUSH
66101: LD_INT 4
66103: NEG
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 5
66111: NEG
66112: PUSH
66113: LD_INT 5
66115: NEG
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 5
66123: NEG
66124: PUSH
66125: LD_INT 6
66127: NEG
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 6
66135: NEG
66136: PUSH
66137: LD_INT 5
66139: NEG
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: LD_INT 6
66147: NEG
66148: PUSH
66149: LD_INT 6
66151: NEG
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66171: LD_ADDR_VAR 0 41
66175: PUSH
66176: LD_INT 0
66178: PUSH
66179: LD_INT 2
66181: NEG
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 1
66189: NEG
66190: PUSH
66191: LD_INT 3
66193: NEG
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 1
66201: PUSH
66202: LD_INT 2
66204: NEG
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: LIST
66214: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66215: LD_ADDR_VAR 0 42
66219: PUSH
66220: LD_INT 2
66222: PUSH
66223: LD_INT 0
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 2
66232: PUSH
66233: LD_INT 1
66235: NEG
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 3
66243: PUSH
66244: LD_INT 1
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: LIST
66255: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66256: LD_ADDR_VAR 0 43
66260: PUSH
66261: LD_INT 2
66263: PUSH
66264: LD_INT 2
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 3
66273: PUSH
66274: LD_INT 2
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 2
66283: PUSH
66284: LD_INT 3
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: LIST
66295: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66296: LD_ADDR_VAR 0 44
66300: PUSH
66301: LD_INT 0
66303: PUSH
66304: LD_INT 2
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 1
66313: PUSH
66314: LD_INT 3
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 1
66323: NEG
66324: PUSH
66325: LD_INT 2
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: LIST
66336: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66337: LD_ADDR_VAR 0 45
66341: PUSH
66342: LD_INT 2
66344: NEG
66345: PUSH
66346: LD_INT 0
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 2
66355: NEG
66356: PUSH
66357: LD_INT 1
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 3
66366: NEG
66367: PUSH
66368: LD_INT 1
66370: NEG
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: LIST
66380: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66381: LD_ADDR_VAR 0 46
66385: PUSH
66386: LD_INT 2
66388: NEG
66389: PUSH
66390: LD_INT 2
66392: NEG
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 2
66400: NEG
66401: PUSH
66402: LD_INT 3
66404: NEG
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 3
66412: NEG
66413: PUSH
66414: LD_INT 2
66416: NEG
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: LIST
66426: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66427: LD_ADDR_VAR 0 47
66431: PUSH
66432: LD_INT 2
66434: NEG
66435: PUSH
66436: LD_INT 3
66438: NEG
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 1
66446: NEG
66447: PUSH
66448: LD_INT 3
66450: NEG
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66460: LD_ADDR_VAR 0 48
66464: PUSH
66465: LD_INT 1
66467: PUSH
66468: LD_INT 2
66470: NEG
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 2
66478: PUSH
66479: LD_INT 1
66481: NEG
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66491: LD_ADDR_VAR 0 49
66495: PUSH
66496: LD_INT 3
66498: PUSH
66499: LD_INT 1
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: LD_INT 3
66508: PUSH
66509: LD_INT 2
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66520: LD_ADDR_VAR 0 50
66524: PUSH
66525: LD_INT 2
66527: PUSH
66528: LD_INT 3
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 1
66537: PUSH
66538: LD_INT 3
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66549: LD_ADDR_VAR 0 51
66553: PUSH
66554: LD_INT 1
66556: NEG
66557: PUSH
66558: LD_INT 2
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 2
66567: NEG
66568: PUSH
66569: LD_INT 1
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66580: LD_ADDR_VAR 0 52
66584: PUSH
66585: LD_INT 3
66587: NEG
66588: PUSH
66589: LD_INT 1
66591: NEG
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 3
66599: NEG
66600: PUSH
66601: LD_INT 2
66603: NEG
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66613: LD_ADDR_VAR 0 53
66617: PUSH
66618: LD_INT 1
66620: NEG
66621: PUSH
66622: LD_INT 3
66624: NEG
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 0
66632: PUSH
66633: LD_INT 3
66635: NEG
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: LD_INT 1
66643: PUSH
66644: LD_INT 2
66646: NEG
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: LIST
66656: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66657: LD_ADDR_VAR 0 54
66661: PUSH
66662: LD_INT 2
66664: PUSH
66665: LD_INT 1
66667: NEG
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 3
66675: PUSH
66676: LD_INT 0
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 3
66685: PUSH
66686: LD_INT 1
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: LIST
66697: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66698: LD_ADDR_VAR 0 55
66702: PUSH
66703: LD_INT 3
66705: PUSH
66706: LD_INT 2
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: LD_INT 3
66715: PUSH
66716: LD_INT 3
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 2
66725: PUSH
66726: LD_INT 3
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: LIST
66737: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66738: LD_ADDR_VAR 0 56
66742: PUSH
66743: LD_INT 1
66745: PUSH
66746: LD_INT 3
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 0
66755: PUSH
66756: LD_INT 3
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: LD_INT 1
66765: NEG
66766: PUSH
66767: LD_INT 2
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: LIST
66778: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66779: LD_ADDR_VAR 0 57
66783: PUSH
66784: LD_INT 2
66786: NEG
66787: PUSH
66788: LD_INT 1
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: LD_INT 3
66797: NEG
66798: PUSH
66799: LD_INT 0
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 3
66808: NEG
66809: PUSH
66810: LD_INT 1
66812: NEG
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: LIST
66822: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66823: LD_ADDR_VAR 0 58
66827: PUSH
66828: LD_INT 2
66830: NEG
66831: PUSH
66832: LD_INT 3
66834: NEG
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 3
66842: NEG
66843: PUSH
66844: LD_INT 2
66846: NEG
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 3
66854: NEG
66855: PUSH
66856: LD_INT 3
66858: NEG
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: LIST
66868: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66869: LD_ADDR_VAR 0 59
66873: PUSH
66874: LD_INT 1
66876: NEG
66877: PUSH
66878: LD_INT 2
66880: NEG
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 0
66888: PUSH
66889: LD_INT 2
66891: NEG
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 1
66899: PUSH
66900: LD_INT 1
66902: NEG
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: LIST
66912: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66913: LD_ADDR_VAR 0 60
66917: PUSH
66918: LD_INT 1
66920: PUSH
66921: LD_INT 1
66923: NEG
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 2
66931: PUSH
66932: LD_INT 0
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 2
66941: PUSH
66942: LD_INT 1
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: LIST
66953: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66954: LD_ADDR_VAR 0 61
66958: PUSH
66959: LD_INT 2
66961: PUSH
66962: LD_INT 1
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 2
66971: PUSH
66972: LD_INT 2
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 1
66981: PUSH
66982: LD_INT 2
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: LIST
66993: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66994: LD_ADDR_VAR 0 62
66998: PUSH
66999: LD_INT 1
67001: PUSH
67002: LD_INT 2
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 0
67011: PUSH
67012: LD_INT 2
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 1
67021: NEG
67022: PUSH
67023: LD_INT 1
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: LIST
67034: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67035: LD_ADDR_VAR 0 63
67039: PUSH
67040: LD_INT 1
67042: NEG
67043: PUSH
67044: LD_INT 1
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 2
67053: NEG
67054: PUSH
67055: LD_INT 0
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 2
67064: NEG
67065: PUSH
67066: LD_INT 1
67068: NEG
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: LIST
67078: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67079: LD_ADDR_VAR 0 64
67083: PUSH
67084: LD_INT 1
67086: NEG
67087: PUSH
67088: LD_INT 2
67090: NEG
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 2
67098: NEG
67099: PUSH
67100: LD_INT 1
67102: NEG
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 2
67110: NEG
67111: PUSH
67112: LD_INT 2
67114: NEG
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: LIST
67124: ST_TO_ADDR
// end ; 2 :
67125: GO 70391
67127: LD_INT 2
67129: DOUBLE
67130: EQUAL
67131: IFTRUE 67135
67133: GO 70390
67135: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67136: LD_ADDR_VAR 0 29
67140: PUSH
67141: LD_INT 4
67143: PUSH
67144: LD_INT 0
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 4
67153: PUSH
67154: LD_INT 1
67156: NEG
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: LD_INT 5
67164: PUSH
67165: LD_INT 0
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 5
67174: PUSH
67175: LD_INT 1
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 4
67184: PUSH
67185: LD_INT 1
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 3
67194: PUSH
67195: LD_INT 0
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 3
67204: PUSH
67205: LD_INT 1
67207: NEG
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 3
67215: PUSH
67216: LD_INT 2
67218: NEG
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 5
67226: PUSH
67227: LD_INT 2
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 3
67236: PUSH
67237: LD_INT 3
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: LD_INT 3
67246: PUSH
67247: LD_INT 2
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 4
67256: PUSH
67257: LD_INT 3
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 4
67266: PUSH
67267: LD_INT 4
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 3
67276: PUSH
67277: LD_INT 4
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 2
67286: PUSH
67287: LD_INT 3
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 2
67296: PUSH
67297: LD_INT 2
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 4
67306: PUSH
67307: LD_INT 2
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 2
67316: PUSH
67317: LD_INT 4
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 0
67326: PUSH
67327: LD_INT 4
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 0
67336: PUSH
67337: LD_INT 3
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 1
67346: PUSH
67347: LD_INT 4
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: LD_INT 1
67356: PUSH
67357: LD_INT 5
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 0
67366: PUSH
67367: LD_INT 5
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 1
67376: NEG
67377: PUSH
67378: LD_INT 4
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_INT 1
67387: NEG
67388: PUSH
67389: LD_INT 3
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: PUSH
67396: LD_INT 2
67398: PUSH
67399: LD_INT 5
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: LD_INT 2
67408: NEG
67409: PUSH
67410: LD_INT 3
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 3
67419: NEG
67420: PUSH
67421: LD_INT 0
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 3
67430: NEG
67431: PUSH
67432: LD_INT 1
67434: NEG
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 2
67442: NEG
67443: PUSH
67444: LD_INT 0
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 2
67453: NEG
67454: PUSH
67455: LD_INT 1
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 3
67464: NEG
67465: PUSH
67466: LD_INT 1
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 4
67475: NEG
67476: PUSH
67477: LD_INT 0
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: LD_INT 4
67486: NEG
67487: PUSH
67488: LD_INT 1
67490: NEG
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 4
67498: NEG
67499: PUSH
67500: LD_INT 2
67502: NEG
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 2
67510: NEG
67511: PUSH
67512: LD_INT 2
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 4
67521: NEG
67522: PUSH
67523: LD_INT 4
67525: NEG
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 4
67533: NEG
67534: PUSH
67535: LD_INT 5
67537: NEG
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 3
67545: NEG
67546: PUSH
67547: LD_INT 4
67549: NEG
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 3
67557: NEG
67558: PUSH
67559: LD_INT 3
67561: NEG
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 4
67569: NEG
67570: PUSH
67571: LD_INT 3
67573: NEG
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 5
67581: NEG
67582: PUSH
67583: LD_INT 4
67585: NEG
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 5
67593: NEG
67594: PUSH
67595: LD_INT 5
67597: NEG
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 3
67605: NEG
67606: PUSH
67607: LD_INT 5
67609: NEG
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: LD_INT 5
67617: NEG
67618: PUSH
67619: LD_INT 3
67621: NEG
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: LIST
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: LIST
67651: LIST
67652: LIST
67653: LIST
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: LIST
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67674: LD_ADDR_VAR 0 30
67678: PUSH
67679: LD_INT 4
67681: PUSH
67682: LD_INT 4
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 4
67691: PUSH
67692: LD_INT 3
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 5
67701: PUSH
67702: LD_INT 4
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_INT 5
67711: PUSH
67712: LD_INT 5
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: LD_INT 4
67721: PUSH
67722: LD_INT 5
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 3
67731: PUSH
67732: LD_INT 4
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 3
67741: PUSH
67742: LD_INT 3
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 5
67751: PUSH
67752: LD_INT 3
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: LD_INT 3
67761: PUSH
67762: LD_INT 5
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PUSH
67769: LD_INT 0
67771: PUSH
67772: LD_INT 3
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: LD_INT 0
67781: PUSH
67782: LD_INT 2
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 1
67791: PUSH
67792: LD_INT 3
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 1
67801: PUSH
67802: LD_INT 4
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 0
67811: PUSH
67812: LD_INT 4
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 1
67821: NEG
67822: PUSH
67823: LD_INT 3
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 1
67832: NEG
67833: PUSH
67834: LD_INT 2
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 2
67843: PUSH
67844: LD_INT 4
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: LD_INT 2
67853: NEG
67854: PUSH
67855: LD_INT 2
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 4
67864: NEG
67865: PUSH
67866: LD_INT 0
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 4
67875: NEG
67876: PUSH
67877: LD_INT 1
67879: NEG
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: PUSH
67885: LD_INT 3
67887: NEG
67888: PUSH
67889: LD_INT 0
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 3
67898: NEG
67899: PUSH
67900: LD_INT 1
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 4
67909: NEG
67910: PUSH
67911: LD_INT 1
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 5
67920: NEG
67921: PUSH
67922: LD_INT 0
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: PUSH
67929: LD_INT 5
67931: NEG
67932: PUSH
67933: LD_INT 1
67935: NEG
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PUSH
67941: LD_INT 5
67943: NEG
67944: PUSH
67945: LD_INT 2
67947: NEG
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: LD_INT 3
67955: NEG
67956: PUSH
67957: LD_INT 2
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: LD_INT 3
67966: NEG
67967: PUSH
67968: LD_INT 3
67970: NEG
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 3
67978: NEG
67979: PUSH
67980: LD_INT 4
67982: NEG
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 2
67990: NEG
67991: PUSH
67992: LD_INT 3
67994: NEG
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 2
68002: NEG
68003: PUSH
68004: LD_INT 2
68006: NEG
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 3
68014: NEG
68015: PUSH
68016: LD_INT 2
68018: NEG
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 4
68026: NEG
68027: PUSH
68028: LD_INT 3
68030: NEG
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 4
68038: NEG
68039: PUSH
68040: LD_INT 4
68042: NEG
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 2
68050: NEG
68051: PUSH
68052: LD_INT 4
68054: NEG
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: LD_INT 4
68062: NEG
68063: PUSH
68064: LD_INT 2
68066: NEG
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 0
68074: PUSH
68075: LD_INT 4
68077: NEG
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: LD_INT 0
68085: PUSH
68086: LD_INT 5
68088: NEG
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 1
68096: PUSH
68097: LD_INT 4
68099: NEG
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 1
68107: PUSH
68108: LD_INT 3
68110: NEG
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 0
68118: PUSH
68119: LD_INT 3
68121: NEG
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: PUSH
68127: LD_INT 1
68129: NEG
68130: PUSH
68131: LD_INT 4
68133: NEG
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: LD_INT 1
68141: NEG
68142: PUSH
68143: LD_INT 5
68145: NEG
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 2
68153: PUSH
68154: LD_INT 3
68156: NEG
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 2
68164: NEG
68165: PUSH
68166: LD_INT 5
68168: NEG
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: LIST
68180: LIST
68181: LIST
68182: LIST
68183: LIST
68184: LIST
68185: LIST
68186: LIST
68187: LIST
68188: LIST
68189: LIST
68190: LIST
68191: LIST
68192: LIST
68193: LIST
68194: LIST
68195: LIST
68196: LIST
68197: LIST
68198: LIST
68199: LIST
68200: LIST
68201: LIST
68202: LIST
68203: LIST
68204: LIST
68205: LIST
68206: LIST
68207: LIST
68208: LIST
68209: LIST
68210: LIST
68211: LIST
68212: LIST
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68221: LD_ADDR_VAR 0 31
68225: PUSH
68226: LD_INT 0
68228: PUSH
68229: LD_INT 4
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: LD_INT 0
68238: PUSH
68239: LD_INT 3
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: LD_INT 1
68248: PUSH
68249: LD_INT 4
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: PUSH
68256: LD_INT 1
68258: PUSH
68259: LD_INT 5
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 0
68268: PUSH
68269: LD_INT 5
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 1
68278: NEG
68279: PUSH
68280: LD_INT 4
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: PUSH
68287: LD_INT 1
68289: NEG
68290: PUSH
68291: LD_INT 3
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: LD_INT 2
68300: PUSH
68301: LD_INT 5
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: PUSH
68308: LD_INT 2
68310: NEG
68311: PUSH
68312: LD_INT 3
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: LD_INT 3
68321: NEG
68322: PUSH
68323: LD_INT 0
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PUSH
68330: LD_INT 3
68332: NEG
68333: PUSH
68334: LD_INT 1
68336: NEG
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 2
68344: NEG
68345: PUSH
68346: LD_INT 0
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 2
68355: NEG
68356: PUSH
68357: LD_INT 1
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: LD_INT 3
68366: NEG
68367: PUSH
68368: LD_INT 1
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 4
68377: NEG
68378: PUSH
68379: LD_INT 0
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: LD_INT 4
68388: NEG
68389: PUSH
68390: LD_INT 1
68392: NEG
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PUSH
68398: LD_INT 4
68400: NEG
68401: PUSH
68402: LD_INT 2
68404: NEG
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 2
68412: NEG
68413: PUSH
68414: LD_INT 2
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: LD_INT 4
68423: NEG
68424: PUSH
68425: LD_INT 4
68427: NEG
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 4
68435: NEG
68436: PUSH
68437: LD_INT 5
68439: NEG
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 3
68447: NEG
68448: PUSH
68449: LD_INT 4
68451: NEG
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 3
68459: NEG
68460: PUSH
68461: LD_INT 3
68463: NEG
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 4
68471: NEG
68472: PUSH
68473: LD_INT 3
68475: NEG
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: LD_INT 5
68483: NEG
68484: PUSH
68485: LD_INT 4
68487: NEG
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: PUSH
68493: LD_INT 5
68495: NEG
68496: PUSH
68497: LD_INT 5
68499: NEG
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 3
68507: NEG
68508: PUSH
68509: LD_INT 5
68511: NEG
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 5
68519: NEG
68520: PUSH
68521: LD_INT 3
68523: NEG
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 0
68531: PUSH
68532: LD_INT 3
68534: NEG
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 0
68542: PUSH
68543: LD_INT 4
68545: NEG
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 1
68553: PUSH
68554: LD_INT 3
68556: NEG
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PUSH
68562: LD_INT 1
68564: PUSH
68565: LD_INT 2
68567: NEG
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: PUSH
68573: LD_INT 0
68575: PUSH
68576: LD_INT 2
68578: NEG
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 1
68586: NEG
68587: PUSH
68588: LD_INT 3
68590: NEG
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 1
68598: NEG
68599: PUSH
68600: LD_INT 4
68602: NEG
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PUSH
68608: LD_INT 2
68610: PUSH
68611: LD_INT 2
68613: NEG
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_INT 2
68621: NEG
68622: PUSH
68623: LD_INT 4
68625: NEG
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 4
68633: PUSH
68634: LD_INT 0
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 4
68643: PUSH
68644: LD_INT 1
68646: NEG
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 5
68654: PUSH
68655: LD_INT 0
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: PUSH
68662: LD_INT 5
68664: PUSH
68665: LD_INT 1
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PUSH
68672: LD_INT 4
68674: PUSH
68675: LD_INT 1
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 3
68684: PUSH
68685: LD_INT 0
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 3
68694: PUSH
68695: LD_INT 1
68697: NEG
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: PUSH
68703: LD_INT 3
68705: PUSH
68706: LD_INT 2
68708: NEG
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PUSH
68714: LD_INT 5
68716: PUSH
68717: LD_INT 2
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: LIST
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68771: LD_ADDR_VAR 0 32
68775: PUSH
68776: LD_INT 4
68778: NEG
68779: PUSH
68780: LD_INT 0
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 4
68789: NEG
68790: PUSH
68791: LD_INT 1
68793: NEG
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 3
68801: NEG
68802: PUSH
68803: LD_INT 0
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 3
68812: NEG
68813: PUSH
68814: LD_INT 1
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 4
68823: NEG
68824: PUSH
68825: LD_INT 1
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 5
68834: NEG
68835: PUSH
68836: LD_INT 0
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 5
68845: NEG
68846: PUSH
68847: LD_INT 1
68849: NEG
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: LD_INT 5
68857: NEG
68858: PUSH
68859: LD_INT 2
68861: NEG
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: LD_INT 3
68869: NEG
68870: PUSH
68871: LD_INT 2
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: LD_INT 3
68880: NEG
68881: PUSH
68882: LD_INT 3
68884: NEG
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: LD_INT 3
68892: NEG
68893: PUSH
68894: LD_INT 4
68896: NEG
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 2
68904: NEG
68905: PUSH
68906: LD_INT 3
68908: NEG
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 2
68916: NEG
68917: PUSH
68918: LD_INT 2
68920: NEG
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: PUSH
68926: LD_INT 3
68928: NEG
68929: PUSH
68930: LD_INT 2
68932: NEG
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: LD_INT 4
68940: NEG
68941: PUSH
68942: LD_INT 3
68944: NEG
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: LD_INT 4
68952: NEG
68953: PUSH
68954: LD_INT 4
68956: NEG
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PUSH
68962: LD_INT 2
68964: NEG
68965: PUSH
68966: LD_INT 4
68968: NEG
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 4
68976: NEG
68977: PUSH
68978: LD_INT 2
68980: NEG
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 0
68988: PUSH
68989: LD_INT 4
68991: NEG
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 0
68999: PUSH
69000: LD_INT 5
69002: NEG
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 1
69010: PUSH
69011: LD_INT 4
69013: NEG
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: LD_INT 1
69021: PUSH
69022: LD_INT 3
69024: NEG
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_INT 0
69032: PUSH
69033: LD_INT 3
69035: NEG
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: PUSH
69041: LD_INT 1
69043: NEG
69044: PUSH
69045: LD_INT 4
69047: NEG
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: PUSH
69053: LD_INT 1
69055: NEG
69056: PUSH
69057: LD_INT 5
69059: NEG
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: PUSH
69065: LD_INT 2
69067: PUSH
69068: LD_INT 3
69070: NEG
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: LD_INT 2
69078: NEG
69079: PUSH
69080: LD_INT 5
69082: NEG
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: LD_INT 3
69090: PUSH
69091: LD_INT 0
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: LD_INT 3
69100: PUSH
69101: LD_INT 1
69103: NEG
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: PUSH
69109: LD_INT 4
69111: PUSH
69112: LD_INT 0
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: PUSH
69119: LD_INT 4
69121: PUSH
69122: LD_INT 1
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: PUSH
69129: LD_INT 3
69131: PUSH
69132: LD_INT 1
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: LD_INT 2
69141: PUSH
69142: LD_INT 0
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: LD_INT 2
69151: PUSH
69152: LD_INT 1
69154: NEG
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: PUSH
69160: LD_INT 2
69162: PUSH
69163: LD_INT 2
69165: NEG
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: LD_INT 4
69173: PUSH
69174: LD_INT 2
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: LD_INT 4
69183: PUSH
69184: LD_INT 4
69186: PUSH
69187: EMPTY
69188: LIST
69189: LIST
69190: PUSH
69191: LD_INT 4
69193: PUSH
69194: LD_INT 3
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: PUSH
69201: LD_INT 5
69203: PUSH
69204: LD_INT 4
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: PUSH
69211: LD_INT 5
69213: PUSH
69214: LD_INT 5
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: PUSH
69221: LD_INT 4
69223: PUSH
69224: LD_INT 5
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: PUSH
69231: LD_INT 3
69233: PUSH
69234: LD_INT 4
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: PUSH
69241: LD_INT 3
69243: PUSH
69244: LD_INT 3
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: PUSH
69251: LD_INT 5
69253: PUSH
69254: LD_INT 3
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: PUSH
69261: LD_INT 3
69263: PUSH
69264: LD_INT 5
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: LIST
69290: LIST
69291: LIST
69292: LIST
69293: LIST
69294: LIST
69295: LIST
69296: LIST
69297: LIST
69298: LIST
69299: LIST
69300: LIST
69301: LIST
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: LIST
69313: LIST
69314: LIST
69315: LIST
69316: LIST
69317: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69318: LD_ADDR_VAR 0 33
69322: PUSH
69323: LD_INT 4
69325: NEG
69326: PUSH
69327: LD_INT 4
69329: NEG
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 4
69337: NEG
69338: PUSH
69339: LD_INT 5
69341: NEG
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 3
69349: NEG
69350: PUSH
69351: LD_INT 4
69353: NEG
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: PUSH
69359: LD_INT 3
69361: NEG
69362: PUSH
69363: LD_INT 3
69365: NEG
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 4
69373: NEG
69374: PUSH
69375: LD_INT 3
69377: NEG
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PUSH
69383: LD_INT 5
69385: NEG
69386: PUSH
69387: LD_INT 4
69389: NEG
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PUSH
69395: LD_INT 5
69397: NEG
69398: PUSH
69399: LD_INT 5
69401: NEG
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: LD_INT 3
69409: NEG
69410: PUSH
69411: LD_INT 5
69413: NEG
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 5
69421: NEG
69422: PUSH
69423: LD_INT 3
69425: NEG
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: PUSH
69431: LD_INT 0
69433: PUSH
69434: LD_INT 3
69436: NEG
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: PUSH
69442: LD_INT 0
69444: PUSH
69445: LD_INT 4
69447: NEG
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PUSH
69453: LD_INT 1
69455: PUSH
69456: LD_INT 3
69458: NEG
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 1
69466: PUSH
69467: LD_INT 2
69469: NEG
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PUSH
69475: LD_INT 0
69477: PUSH
69478: LD_INT 2
69480: NEG
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 1
69488: NEG
69489: PUSH
69490: LD_INT 3
69492: NEG
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: PUSH
69498: LD_INT 1
69500: NEG
69501: PUSH
69502: LD_INT 4
69504: NEG
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: PUSH
69510: LD_INT 2
69512: PUSH
69513: LD_INT 2
69515: NEG
69516: PUSH
69517: EMPTY
69518: LIST
69519: LIST
69520: PUSH
69521: LD_INT 2
69523: NEG
69524: PUSH
69525: LD_INT 4
69527: NEG
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 4
69535: PUSH
69536: LD_INT 0
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 4
69545: PUSH
69546: LD_INT 1
69548: NEG
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 5
69556: PUSH
69557: LD_INT 0
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PUSH
69564: LD_INT 5
69566: PUSH
69567: LD_INT 1
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: LD_INT 4
69576: PUSH
69577: LD_INT 1
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 3
69586: PUSH
69587: LD_INT 0
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 3
69596: PUSH
69597: LD_INT 1
69599: NEG
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_INT 3
69607: PUSH
69608: LD_INT 2
69610: NEG
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: PUSH
69616: LD_INT 5
69618: PUSH
69619: LD_INT 2
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: PUSH
69626: LD_INT 3
69628: PUSH
69629: LD_INT 3
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: PUSH
69636: LD_INT 3
69638: PUSH
69639: LD_INT 2
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: PUSH
69646: LD_INT 4
69648: PUSH
69649: LD_INT 3
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 4
69658: PUSH
69659: LD_INT 4
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: PUSH
69666: LD_INT 3
69668: PUSH
69669: LD_INT 4
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: PUSH
69676: LD_INT 2
69678: PUSH
69679: LD_INT 3
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: PUSH
69686: LD_INT 2
69688: PUSH
69689: LD_INT 2
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 4
69698: PUSH
69699: LD_INT 2
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 2
69708: PUSH
69709: LD_INT 4
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: PUSH
69716: LD_INT 0
69718: PUSH
69719: LD_INT 4
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: PUSH
69726: LD_INT 0
69728: PUSH
69729: LD_INT 3
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: LD_INT 1
69738: PUSH
69739: LD_INT 4
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PUSH
69746: LD_INT 1
69748: PUSH
69749: LD_INT 5
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: PUSH
69756: LD_INT 0
69758: PUSH
69759: LD_INT 5
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 1
69768: NEG
69769: PUSH
69770: LD_INT 4
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 1
69779: NEG
69780: PUSH
69781: LD_INT 3
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: PUSH
69788: LD_INT 2
69790: PUSH
69791: LD_INT 5
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: PUSH
69798: LD_INT 2
69800: NEG
69801: PUSH
69802: LD_INT 3
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: LIST
69813: LIST
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: LIST
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: LIST
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: LIST
69840: LIST
69841: LIST
69842: LIST
69843: LIST
69844: LIST
69845: LIST
69846: LIST
69847: LIST
69848: LIST
69849: LIST
69850: LIST
69851: LIST
69852: LIST
69853: LIST
69854: LIST
69855: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69856: LD_ADDR_VAR 0 34
69860: PUSH
69861: LD_INT 0
69863: PUSH
69864: LD_INT 4
69866: NEG
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: PUSH
69872: LD_INT 0
69874: PUSH
69875: LD_INT 5
69877: NEG
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: LD_INT 1
69885: PUSH
69886: LD_INT 4
69888: NEG
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: PUSH
69894: LD_INT 1
69896: PUSH
69897: LD_INT 3
69899: NEG
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 0
69907: PUSH
69908: LD_INT 3
69910: NEG
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: PUSH
69916: LD_INT 1
69918: NEG
69919: PUSH
69920: LD_INT 4
69922: NEG
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 1
69930: NEG
69931: PUSH
69932: LD_INT 5
69934: NEG
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 2
69942: PUSH
69943: LD_INT 3
69945: NEG
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: LD_INT 2
69953: NEG
69954: PUSH
69955: LD_INT 5
69957: NEG
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PUSH
69963: LD_INT 3
69965: PUSH
69966: LD_INT 0
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 3
69975: PUSH
69976: LD_INT 1
69978: NEG
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: PUSH
69984: LD_INT 4
69986: PUSH
69987: LD_INT 0
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: PUSH
69994: LD_INT 4
69996: PUSH
69997: LD_INT 1
69999: PUSH
70000: EMPTY
70001: LIST
70002: LIST
70003: PUSH
70004: LD_INT 3
70006: PUSH
70007: LD_INT 1
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: PUSH
70014: LD_INT 2
70016: PUSH
70017: LD_INT 0
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: PUSH
70024: LD_INT 2
70026: PUSH
70027: LD_INT 1
70029: NEG
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: PUSH
70035: LD_INT 2
70037: PUSH
70038: LD_INT 2
70040: NEG
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: PUSH
70046: LD_INT 4
70048: PUSH
70049: LD_INT 2
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PUSH
70056: LD_INT 4
70058: PUSH
70059: LD_INT 4
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: PUSH
70066: LD_INT 4
70068: PUSH
70069: LD_INT 3
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: PUSH
70076: LD_INT 5
70078: PUSH
70079: LD_INT 4
70081: PUSH
70082: EMPTY
70083: LIST
70084: LIST
70085: PUSH
70086: LD_INT 5
70088: PUSH
70089: LD_INT 5
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: PUSH
70096: LD_INT 4
70098: PUSH
70099: LD_INT 5
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: PUSH
70106: LD_INT 3
70108: PUSH
70109: LD_INT 4
70111: PUSH
70112: EMPTY
70113: LIST
70114: LIST
70115: PUSH
70116: LD_INT 3
70118: PUSH
70119: LD_INT 3
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: PUSH
70126: LD_INT 5
70128: PUSH
70129: LD_INT 3
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: PUSH
70136: LD_INT 3
70138: PUSH
70139: LD_INT 5
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 0
70148: PUSH
70149: LD_INT 3
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: LD_INT 0
70158: PUSH
70159: LD_INT 2
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 1
70168: PUSH
70169: LD_INT 3
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: PUSH
70176: LD_INT 1
70178: PUSH
70179: LD_INT 4
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_INT 0
70188: PUSH
70189: LD_INT 4
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: PUSH
70196: LD_INT 1
70198: NEG
70199: PUSH
70200: LD_INT 3
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: PUSH
70207: LD_INT 1
70209: NEG
70210: PUSH
70211: LD_INT 2
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: PUSH
70218: LD_INT 2
70220: PUSH
70221: LD_INT 4
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: PUSH
70228: LD_INT 2
70230: NEG
70231: PUSH
70232: LD_INT 2
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PUSH
70239: LD_INT 4
70241: NEG
70242: PUSH
70243: LD_INT 0
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: PUSH
70250: LD_INT 4
70252: NEG
70253: PUSH
70254: LD_INT 1
70256: NEG
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: PUSH
70262: LD_INT 3
70264: NEG
70265: PUSH
70266: LD_INT 0
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: PUSH
70273: LD_INT 3
70275: NEG
70276: PUSH
70277: LD_INT 1
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: LD_INT 4
70286: NEG
70287: PUSH
70288: LD_INT 1
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: PUSH
70295: LD_INT 5
70297: NEG
70298: PUSH
70299: LD_INT 0
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 5
70308: NEG
70309: PUSH
70310: LD_INT 1
70312: NEG
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: LD_INT 5
70320: NEG
70321: PUSH
70322: LD_INT 2
70324: NEG
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 3
70332: NEG
70333: PUSH
70334: LD_INT 2
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: LIST
70362: LIST
70363: LIST
70364: LIST
70365: LIST
70366: LIST
70367: LIST
70368: LIST
70369: LIST
70370: LIST
70371: LIST
70372: LIST
70373: LIST
70374: LIST
70375: LIST
70376: LIST
70377: LIST
70378: LIST
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: ST_TO_ADDR
// end ; end ;
70388: GO 70391
70390: POP
// case btype of b_depot , b_warehouse :
70391: LD_VAR 0 1
70395: PUSH
70396: LD_INT 0
70398: DOUBLE
70399: EQUAL
70400: IFTRUE 70410
70402: LD_INT 1
70404: DOUBLE
70405: EQUAL
70406: IFTRUE 70410
70408: GO 70611
70410: POP
// case nation of nation_american :
70411: LD_VAR 0 5
70415: PUSH
70416: LD_INT 1
70418: DOUBLE
70419: EQUAL
70420: IFTRUE 70424
70422: GO 70480
70424: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70425: LD_ADDR_VAR 0 9
70429: PUSH
70430: LD_VAR 0 11
70434: PUSH
70435: LD_VAR 0 12
70439: PUSH
70440: LD_VAR 0 13
70444: PUSH
70445: LD_VAR 0 14
70449: PUSH
70450: LD_VAR 0 15
70454: PUSH
70455: LD_VAR 0 16
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: PUSH
70468: LD_VAR 0 4
70472: PUSH
70473: LD_INT 1
70475: PLUS
70476: ARRAY
70477: ST_TO_ADDR
70478: GO 70609
70480: LD_INT 2
70482: DOUBLE
70483: EQUAL
70484: IFTRUE 70488
70486: GO 70544
70488: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70489: LD_ADDR_VAR 0 9
70493: PUSH
70494: LD_VAR 0 17
70498: PUSH
70499: LD_VAR 0 18
70503: PUSH
70504: LD_VAR 0 19
70508: PUSH
70509: LD_VAR 0 20
70513: PUSH
70514: LD_VAR 0 21
70518: PUSH
70519: LD_VAR 0 22
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: PUSH
70532: LD_VAR 0 4
70536: PUSH
70537: LD_INT 1
70539: PLUS
70540: ARRAY
70541: ST_TO_ADDR
70542: GO 70609
70544: LD_INT 3
70546: DOUBLE
70547: EQUAL
70548: IFTRUE 70552
70550: GO 70608
70552: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70553: LD_ADDR_VAR 0 9
70557: PUSH
70558: LD_VAR 0 23
70562: PUSH
70563: LD_VAR 0 24
70567: PUSH
70568: LD_VAR 0 25
70572: PUSH
70573: LD_VAR 0 26
70577: PUSH
70578: LD_VAR 0 27
70582: PUSH
70583: LD_VAR 0 28
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: PUSH
70596: LD_VAR 0 4
70600: PUSH
70601: LD_INT 1
70603: PLUS
70604: ARRAY
70605: ST_TO_ADDR
70606: GO 70609
70608: POP
70609: GO 71164
70611: LD_INT 2
70613: DOUBLE
70614: EQUAL
70615: IFTRUE 70625
70617: LD_INT 3
70619: DOUBLE
70620: EQUAL
70621: IFTRUE 70625
70623: GO 70681
70625: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70626: LD_ADDR_VAR 0 9
70630: PUSH
70631: LD_VAR 0 29
70635: PUSH
70636: LD_VAR 0 30
70640: PUSH
70641: LD_VAR 0 31
70645: PUSH
70646: LD_VAR 0 32
70650: PUSH
70651: LD_VAR 0 33
70655: PUSH
70656: LD_VAR 0 34
70660: PUSH
70661: EMPTY
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: LIST
70667: LIST
70668: PUSH
70669: LD_VAR 0 4
70673: PUSH
70674: LD_INT 1
70676: PLUS
70677: ARRAY
70678: ST_TO_ADDR
70679: GO 71164
70681: LD_INT 16
70683: DOUBLE
70684: EQUAL
70685: IFTRUE 70743
70687: LD_INT 17
70689: DOUBLE
70690: EQUAL
70691: IFTRUE 70743
70693: LD_INT 18
70695: DOUBLE
70696: EQUAL
70697: IFTRUE 70743
70699: LD_INT 19
70701: DOUBLE
70702: EQUAL
70703: IFTRUE 70743
70705: LD_INT 22
70707: DOUBLE
70708: EQUAL
70709: IFTRUE 70743
70711: LD_INT 20
70713: DOUBLE
70714: EQUAL
70715: IFTRUE 70743
70717: LD_INT 21
70719: DOUBLE
70720: EQUAL
70721: IFTRUE 70743
70723: LD_INT 23
70725: DOUBLE
70726: EQUAL
70727: IFTRUE 70743
70729: LD_INT 24
70731: DOUBLE
70732: EQUAL
70733: IFTRUE 70743
70735: LD_INT 25
70737: DOUBLE
70738: EQUAL
70739: IFTRUE 70743
70741: GO 70799
70743: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70744: LD_ADDR_VAR 0 9
70748: PUSH
70749: LD_VAR 0 35
70753: PUSH
70754: LD_VAR 0 36
70758: PUSH
70759: LD_VAR 0 37
70763: PUSH
70764: LD_VAR 0 38
70768: PUSH
70769: LD_VAR 0 39
70773: PUSH
70774: LD_VAR 0 40
70778: PUSH
70779: EMPTY
70780: LIST
70781: LIST
70782: LIST
70783: LIST
70784: LIST
70785: LIST
70786: PUSH
70787: LD_VAR 0 4
70791: PUSH
70792: LD_INT 1
70794: PLUS
70795: ARRAY
70796: ST_TO_ADDR
70797: GO 71164
70799: LD_INT 6
70801: DOUBLE
70802: EQUAL
70803: IFTRUE 70855
70805: LD_INT 7
70807: DOUBLE
70808: EQUAL
70809: IFTRUE 70855
70811: LD_INT 8
70813: DOUBLE
70814: EQUAL
70815: IFTRUE 70855
70817: LD_INT 13
70819: DOUBLE
70820: EQUAL
70821: IFTRUE 70855
70823: LD_INT 12
70825: DOUBLE
70826: EQUAL
70827: IFTRUE 70855
70829: LD_INT 15
70831: DOUBLE
70832: EQUAL
70833: IFTRUE 70855
70835: LD_INT 11
70837: DOUBLE
70838: EQUAL
70839: IFTRUE 70855
70841: LD_INT 14
70843: DOUBLE
70844: EQUAL
70845: IFTRUE 70855
70847: LD_INT 10
70849: DOUBLE
70850: EQUAL
70851: IFTRUE 70855
70853: GO 70911
70855: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70856: LD_ADDR_VAR 0 9
70860: PUSH
70861: LD_VAR 0 41
70865: PUSH
70866: LD_VAR 0 42
70870: PUSH
70871: LD_VAR 0 43
70875: PUSH
70876: LD_VAR 0 44
70880: PUSH
70881: LD_VAR 0 45
70885: PUSH
70886: LD_VAR 0 46
70890: PUSH
70891: EMPTY
70892: LIST
70893: LIST
70894: LIST
70895: LIST
70896: LIST
70897: LIST
70898: PUSH
70899: LD_VAR 0 4
70903: PUSH
70904: LD_INT 1
70906: PLUS
70907: ARRAY
70908: ST_TO_ADDR
70909: GO 71164
70911: LD_INT 36
70913: DOUBLE
70914: EQUAL
70915: IFTRUE 70919
70917: GO 70975
70919: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70920: LD_ADDR_VAR 0 9
70924: PUSH
70925: LD_VAR 0 47
70929: PUSH
70930: LD_VAR 0 48
70934: PUSH
70935: LD_VAR 0 49
70939: PUSH
70940: LD_VAR 0 50
70944: PUSH
70945: LD_VAR 0 51
70949: PUSH
70950: LD_VAR 0 52
70954: PUSH
70955: EMPTY
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: PUSH
70963: LD_VAR 0 4
70967: PUSH
70968: LD_INT 1
70970: PLUS
70971: ARRAY
70972: ST_TO_ADDR
70973: GO 71164
70975: LD_INT 4
70977: DOUBLE
70978: EQUAL
70979: IFTRUE 71001
70981: LD_INT 5
70983: DOUBLE
70984: EQUAL
70985: IFTRUE 71001
70987: LD_INT 34
70989: DOUBLE
70990: EQUAL
70991: IFTRUE 71001
70993: LD_INT 37
70995: DOUBLE
70996: EQUAL
70997: IFTRUE 71001
70999: GO 71057
71001: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71002: LD_ADDR_VAR 0 9
71006: PUSH
71007: LD_VAR 0 53
71011: PUSH
71012: LD_VAR 0 54
71016: PUSH
71017: LD_VAR 0 55
71021: PUSH
71022: LD_VAR 0 56
71026: PUSH
71027: LD_VAR 0 57
71031: PUSH
71032: LD_VAR 0 58
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: PUSH
71045: LD_VAR 0 4
71049: PUSH
71050: LD_INT 1
71052: PLUS
71053: ARRAY
71054: ST_TO_ADDR
71055: GO 71164
71057: LD_INT 31
71059: DOUBLE
71060: EQUAL
71061: IFTRUE 71107
71063: LD_INT 32
71065: DOUBLE
71066: EQUAL
71067: IFTRUE 71107
71069: LD_INT 33
71071: DOUBLE
71072: EQUAL
71073: IFTRUE 71107
71075: LD_INT 27
71077: DOUBLE
71078: EQUAL
71079: IFTRUE 71107
71081: LD_INT 26
71083: DOUBLE
71084: EQUAL
71085: IFTRUE 71107
71087: LD_INT 28
71089: DOUBLE
71090: EQUAL
71091: IFTRUE 71107
71093: LD_INT 29
71095: DOUBLE
71096: EQUAL
71097: IFTRUE 71107
71099: LD_INT 30
71101: DOUBLE
71102: EQUAL
71103: IFTRUE 71107
71105: GO 71163
71107: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71108: LD_ADDR_VAR 0 9
71112: PUSH
71113: LD_VAR 0 59
71117: PUSH
71118: LD_VAR 0 60
71122: PUSH
71123: LD_VAR 0 61
71127: PUSH
71128: LD_VAR 0 62
71132: PUSH
71133: LD_VAR 0 63
71137: PUSH
71138: LD_VAR 0 64
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: LIST
71147: LIST
71148: LIST
71149: LIST
71150: PUSH
71151: LD_VAR 0 4
71155: PUSH
71156: LD_INT 1
71158: PLUS
71159: ARRAY
71160: ST_TO_ADDR
71161: GO 71164
71163: POP
// temp_list2 = [ ] ;
71164: LD_ADDR_VAR 0 10
71168: PUSH
71169: EMPTY
71170: ST_TO_ADDR
// for i in temp_list do
71171: LD_ADDR_VAR 0 8
71175: PUSH
71176: LD_VAR 0 9
71180: PUSH
71181: FOR_IN
71182: IFFALSE 71234
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71184: LD_ADDR_VAR 0 10
71188: PUSH
71189: LD_VAR 0 10
71193: PUSH
71194: LD_VAR 0 8
71198: PUSH
71199: LD_INT 1
71201: ARRAY
71202: PUSH
71203: LD_VAR 0 2
71207: PLUS
71208: PUSH
71209: LD_VAR 0 8
71213: PUSH
71214: LD_INT 2
71216: ARRAY
71217: PUSH
71218: LD_VAR 0 3
71222: PLUS
71223: PUSH
71224: EMPTY
71225: LIST
71226: LIST
71227: PUSH
71228: EMPTY
71229: LIST
71230: ADD
71231: ST_TO_ADDR
71232: GO 71181
71234: POP
71235: POP
// result = temp_list2 ;
71236: LD_ADDR_VAR 0 7
71240: PUSH
71241: LD_VAR 0 10
71245: ST_TO_ADDR
// end ;
71246: LD_VAR 0 7
71250: RET
// export function EnemyInRange ( unit , dist ) ; begin
71251: LD_INT 0
71253: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71254: LD_ADDR_VAR 0 3
71258: PUSH
71259: LD_VAR 0 1
71263: PPUSH
71264: CALL_OW 255
71268: PPUSH
71269: LD_VAR 0 1
71273: PPUSH
71274: CALL_OW 250
71278: PPUSH
71279: LD_VAR 0 1
71283: PPUSH
71284: CALL_OW 251
71288: PPUSH
71289: LD_VAR 0 2
71293: PPUSH
71294: CALL 44508 0 4
71298: PUSH
71299: LD_INT 4
71301: ARRAY
71302: ST_TO_ADDR
// end ;
71303: LD_VAR 0 3
71307: RET
// export function PlayerSeeMe ( unit ) ; begin
71308: LD_INT 0
71310: PPUSH
// result := See ( your_side , unit ) ;
71311: LD_ADDR_VAR 0 2
71315: PUSH
71316: LD_OWVAR 2
71320: PPUSH
71321: LD_VAR 0 1
71325: PPUSH
71326: CALL_OW 292
71330: ST_TO_ADDR
// end ;
71331: LD_VAR 0 2
71335: RET
// export function ReverseDir ( unit ) ; begin
71336: LD_INT 0
71338: PPUSH
// if not unit then
71339: LD_VAR 0 1
71343: NOT
71344: IFFALSE 71348
// exit ;
71346: GO 71371
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71348: LD_ADDR_VAR 0 2
71352: PUSH
71353: LD_VAR 0 1
71357: PPUSH
71358: CALL_OW 254
71362: PUSH
71363: LD_INT 3
71365: PLUS
71366: PUSH
71367: LD_INT 6
71369: MOD
71370: ST_TO_ADDR
// end ;
71371: LD_VAR 0 2
71375: RET
// export function ReverseArray ( array ) ; var i ; begin
71376: LD_INT 0
71378: PPUSH
71379: PPUSH
// if not array then
71380: LD_VAR 0 1
71384: NOT
71385: IFFALSE 71389
// exit ;
71387: GO 71444
// result := [ ] ;
71389: LD_ADDR_VAR 0 2
71393: PUSH
71394: EMPTY
71395: ST_TO_ADDR
// for i := array downto 1 do
71396: LD_ADDR_VAR 0 3
71400: PUSH
71401: DOUBLE
71402: LD_VAR 0 1
71406: INC
71407: ST_TO_ADDR
71408: LD_INT 1
71410: PUSH
71411: FOR_DOWNTO
71412: IFFALSE 71442
// result := Join ( result , array [ i ] ) ;
71414: LD_ADDR_VAR 0 2
71418: PUSH
71419: LD_VAR 0 2
71423: PPUSH
71424: LD_VAR 0 1
71428: PUSH
71429: LD_VAR 0 3
71433: ARRAY
71434: PPUSH
71435: CALL 76286 0 2
71439: ST_TO_ADDR
71440: GO 71411
71442: POP
71443: POP
// end ;
71444: LD_VAR 0 2
71448: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71449: LD_INT 0
71451: PPUSH
71452: PPUSH
71453: PPUSH
71454: PPUSH
71455: PPUSH
71456: PPUSH
// if not unit or not hexes then
71457: LD_VAR 0 1
71461: NOT
71462: IFTRUE 71471
71464: PUSH
71465: LD_VAR 0 2
71469: NOT
71470: OR
71471: IFFALSE 71475
// exit ;
71473: GO 71598
// dist := 9999 ;
71475: LD_ADDR_VAR 0 5
71479: PUSH
71480: LD_INT 9999
71482: ST_TO_ADDR
// for i = 1 to hexes do
71483: LD_ADDR_VAR 0 4
71487: PUSH
71488: DOUBLE
71489: LD_INT 1
71491: DEC
71492: ST_TO_ADDR
71493: LD_VAR 0 2
71497: PUSH
71498: FOR_TO
71499: IFFALSE 71586
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71501: LD_ADDR_VAR 0 6
71505: PUSH
71506: LD_VAR 0 1
71510: PPUSH
71511: LD_VAR 0 2
71515: PUSH
71516: LD_VAR 0 4
71520: ARRAY
71521: PUSH
71522: LD_INT 1
71524: ARRAY
71525: PPUSH
71526: LD_VAR 0 2
71530: PUSH
71531: LD_VAR 0 4
71535: ARRAY
71536: PUSH
71537: LD_INT 2
71539: ARRAY
71540: PPUSH
71541: CALL_OW 297
71545: ST_TO_ADDR
// if tdist < dist then
71546: LD_VAR 0 6
71550: PUSH
71551: LD_VAR 0 5
71555: LESS
71556: IFFALSE 71584
// begin hex := hexes [ i ] ;
71558: LD_ADDR_VAR 0 8
71562: PUSH
71563: LD_VAR 0 2
71567: PUSH
71568: LD_VAR 0 4
71572: ARRAY
71573: ST_TO_ADDR
// dist := tdist ;
71574: LD_ADDR_VAR 0 5
71578: PUSH
71579: LD_VAR 0 6
71583: ST_TO_ADDR
// end ; end ;
71584: GO 71498
71586: POP
71587: POP
// result := hex ;
71588: LD_ADDR_VAR 0 3
71592: PUSH
71593: LD_VAR 0 8
71597: ST_TO_ADDR
// end ;
71598: LD_VAR 0 3
71602: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71603: LD_INT 0
71605: PPUSH
71606: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71607: LD_VAR 0 1
71611: NOT
71612: IFTRUE 71651
71614: PUSH
71615: LD_VAR 0 1
71619: PUSH
71620: LD_INT 21
71622: PUSH
71623: LD_INT 2
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: LD_INT 23
71632: PUSH
71633: LD_INT 2
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: PPUSH
71644: CALL_OW 69
71648: IN
71649: NOT
71650: OR
71651: IFFALSE 71655
// exit ;
71653: GO 71702
// for i = 1 to 3 do
71655: LD_ADDR_VAR 0 3
71659: PUSH
71660: DOUBLE
71661: LD_INT 1
71663: DEC
71664: ST_TO_ADDR
71665: LD_INT 3
71667: PUSH
71668: FOR_TO
71669: IFFALSE 71700
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71671: LD_VAR 0 1
71675: PPUSH
71676: CALL_OW 250
71680: PPUSH
71681: LD_VAR 0 1
71685: PPUSH
71686: CALL_OW 251
71690: PPUSH
71691: LD_INT 1
71693: PPUSH
71694: CALL_OW 453
71698: GO 71668
71700: POP
71701: POP
// end ;
71702: LD_VAR 0 2
71706: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71707: LD_INT 0
71709: PPUSH
71710: PPUSH
71711: PPUSH
71712: PPUSH
71713: PPUSH
71714: PPUSH
// if not unit or not enemy_unit then
71715: LD_VAR 0 1
71719: NOT
71720: IFTRUE 71729
71722: PUSH
71723: LD_VAR 0 2
71727: NOT
71728: OR
71729: IFFALSE 71733
// exit ;
71731: GO 72204
// if GetLives ( i ) < 250 then
71733: LD_VAR 0 4
71737: PPUSH
71738: CALL_OW 256
71742: PUSH
71743: LD_INT 250
71745: LESS
71746: IFFALSE 71759
// begin ComAutodestruct ( i ) ;
71748: LD_VAR 0 4
71752: PPUSH
71753: CALL 71603 0 1
// exit ;
71757: GO 72204
// end ; x := GetX ( enemy_unit ) ;
71759: LD_ADDR_VAR 0 7
71763: PUSH
71764: LD_VAR 0 2
71768: PPUSH
71769: CALL_OW 250
71773: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71774: LD_ADDR_VAR 0 8
71778: PUSH
71779: LD_VAR 0 2
71783: PPUSH
71784: CALL_OW 251
71788: ST_TO_ADDR
// if not x or not y then
71789: LD_VAR 0 7
71793: NOT
71794: IFTRUE 71803
71796: PUSH
71797: LD_VAR 0 8
71801: NOT
71802: OR
71803: IFFALSE 71807
// exit ;
71805: GO 72204
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71807: LD_ADDR_VAR 0 6
71811: PUSH
71812: LD_VAR 0 7
71816: PPUSH
71817: LD_INT 0
71819: PPUSH
71820: LD_INT 4
71822: PPUSH
71823: CALL_OW 272
71827: PUSH
71828: LD_VAR 0 8
71832: PPUSH
71833: LD_INT 0
71835: PPUSH
71836: LD_INT 4
71838: PPUSH
71839: CALL_OW 273
71843: PUSH
71844: EMPTY
71845: LIST
71846: LIST
71847: PUSH
71848: LD_VAR 0 7
71852: PPUSH
71853: LD_INT 1
71855: PPUSH
71856: LD_INT 4
71858: PPUSH
71859: CALL_OW 272
71863: PUSH
71864: LD_VAR 0 8
71868: PPUSH
71869: LD_INT 1
71871: PPUSH
71872: LD_INT 4
71874: PPUSH
71875: CALL_OW 273
71879: PUSH
71880: EMPTY
71881: LIST
71882: LIST
71883: PUSH
71884: LD_VAR 0 7
71888: PPUSH
71889: LD_INT 2
71891: PPUSH
71892: LD_INT 4
71894: PPUSH
71895: CALL_OW 272
71899: PUSH
71900: LD_VAR 0 8
71904: PPUSH
71905: LD_INT 2
71907: PPUSH
71908: LD_INT 4
71910: PPUSH
71911: CALL_OW 273
71915: PUSH
71916: EMPTY
71917: LIST
71918: LIST
71919: PUSH
71920: LD_VAR 0 7
71924: PPUSH
71925: LD_INT 3
71927: PPUSH
71928: LD_INT 4
71930: PPUSH
71931: CALL_OW 272
71935: PUSH
71936: LD_VAR 0 8
71940: PPUSH
71941: LD_INT 3
71943: PPUSH
71944: LD_INT 4
71946: PPUSH
71947: CALL_OW 273
71951: PUSH
71952: EMPTY
71953: LIST
71954: LIST
71955: PUSH
71956: LD_VAR 0 7
71960: PPUSH
71961: LD_INT 4
71963: PPUSH
71964: LD_INT 4
71966: PPUSH
71967: CALL_OW 272
71971: PUSH
71972: LD_VAR 0 8
71976: PPUSH
71977: LD_INT 4
71979: PPUSH
71980: LD_INT 4
71982: PPUSH
71983: CALL_OW 273
71987: PUSH
71988: EMPTY
71989: LIST
71990: LIST
71991: PUSH
71992: LD_VAR 0 7
71996: PPUSH
71997: LD_INT 5
71999: PPUSH
72000: LD_INT 4
72002: PPUSH
72003: CALL_OW 272
72007: PUSH
72008: LD_VAR 0 8
72012: PPUSH
72013: LD_INT 5
72015: PPUSH
72016: LD_INT 4
72018: PPUSH
72019: CALL_OW 273
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: PUSH
72028: EMPTY
72029: LIST
72030: LIST
72031: LIST
72032: LIST
72033: LIST
72034: LIST
72035: ST_TO_ADDR
// for i = tmp downto 1 do
72036: LD_ADDR_VAR 0 4
72040: PUSH
72041: DOUBLE
72042: LD_VAR 0 6
72046: INC
72047: ST_TO_ADDR
72048: LD_INT 1
72050: PUSH
72051: FOR_DOWNTO
72052: IFFALSE 72155
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72054: LD_VAR 0 6
72058: PUSH
72059: LD_VAR 0 4
72063: ARRAY
72064: PUSH
72065: LD_INT 1
72067: ARRAY
72068: PPUSH
72069: LD_VAR 0 6
72073: PUSH
72074: LD_VAR 0 4
72078: ARRAY
72079: PUSH
72080: LD_INT 2
72082: ARRAY
72083: PPUSH
72084: CALL_OW 488
72088: NOT
72089: IFTRUE 72131
72091: PUSH
72092: LD_VAR 0 6
72096: PUSH
72097: LD_VAR 0 4
72101: ARRAY
72102: PUSH
72103: LD_INT 1
72105: ARRAY
72106: PPUSH
72107: LD_VAR 0 6
72111: PUSH
72112: LD_VAR 0 4
72116: ARRAY
72117: PUSH
72118: LD_INT 2
72120: ARRAY
72121: PPUSH
72122: CALL_OW 428
72126: PUSH
72127: LD_INT 0
72129: NONEQUAL
72130: OR
72131: IFFALSE 72153
// tmp := Delete ( tmp , i ) ;
72133: LD_ADDR_VAR 0 6
72137: PUSH
72138: LD_VAR 0 6
72142: PPUSH
72143: LD_VAR 0 4
72147: PPUSH
72148: CALL_OW 3
72152: ST_TO_ADDR
72153: GO 72051
72155: POP
72156: POP
// j := GetClosestHex ( unit , tmp ) ;
72157: LD_ADDR_VAR 0 5
72161: PUSH
72162: LD_VAR 0 1
72166: PPUSH
72167: LD_VAR 0 6
72171: PPUSH
72172: CALL 71449 0 2
72176: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72177: LD_VAR 0 1
72181: PPUSH
72182: LD_VAR 0 5
72186: PUSH
72187: LD_INT 1
72189: ARRAY
72190: PPUSH
72191: LD_VAR 0 5
72195: PUSH
72196: LD_INT 2
72198: ARRAY
72199: PPUSH
72200: CALL_OW 111
// end ;
72204: LD_VAR 0 3
72208: RET
// export function PrepareApemanSoldier ( ) ; begin
72209: LD_INT 0
72211: PPUSH
// uc_nation := 0 ;
72212: LD_ADDR_OWVAR 21
72216: PUSH
72217: LD_INT 0
72219: ST_TO_ADDR
// hc_sex := sex_male ;
72220: LD_ADDR_OWVAR 27
72224: PUSH
72225: LD_INT 1
72227: ST_TO_ADDR
// hc_name :=  ;
72228: LD_ADDR_OWVAR 26
72232: PUSH
72233: LD_STRING 
72235: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72236: LD_ADDR_OWVAR 28
72240: PUSH
72241: LD_INT 15
72243: ST_TO_ADDR
// hc_gallery :=  ;
72244: LD_ADDR_OWVAR 33
72248: PUSH
72249: LD_STRING 
72251: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72252: LD_ADDR_OWVAR 31
72256: PUSH
72257: LD_INT 0
72259: PPUSH
72260: LD_INT 3
72262: PPUSH
72263: CALL_OW 12
72267: PUSH
72268: LD_INT 0
72270: PPUSH
72271: LD_INT 3
72273: PPUSH
72274: CALL_OW 12
72278: PUSH
72279: LD_INT 0
72281: PUSH
72282: LD_INT 0
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: LIST
72289: LIST
72290: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
72291: LD_ADDR_OWVAR 29
72295: PUSH
72296: LD_INT 12
72298: PUSH
72299: LD_INT 12
72301: PUSH
72302: EMPTY
72303: LIST
72304: LIST
72305: ST_TO_ADDR
// end ;
72306: LD_VAR 0 1
72310: RET
// export function PrepareApemanEngineer ( ) ; begin
72311: LD_INT 0
72313: PPUSH
// uc_nation := 0 ;
72314: LD_ADDR_OWVAR 21
72318: PUSH
72319: LD_INT 0
72321: ST_TO_ADDR
// hc_sex := sex_male ;
72322: LD_ADDR_OWVAR 27
72326: PUSH
72327: LD_INT 1
72329: ST_TO_ADDR
// hc_name :=  ;
72330: LD_ADDR_OWVAR 26
72334: PUSH
72335: LD_STRING 
72337: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72338: LD_ADDR_OWVAR 28
72342: PUSH
72343: LD_INT 16
72345: ST_TO_ADDR
// hc_gallery :=  ;
72346: LD_ADDR_OWVAR 33
72350: PUSH
72351: LD_STRING 
72353: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72354: LD_ADDR_OWVAR 31
72358: PUSH
72359: LD_INT 0
72361: PPUSH
72362: LD_INT 3
72364: PPUSH
72365: CALL_OW 12
72369: PUSH
72370: LD_INT 0
72372: PPUSH
72373: LD_INT 3
72375: PPUSH
72376: CALL_OW 12
72380: PUSH
72381: LD_INT 0
72383: PUSH
72384: LD_INT 0
72386: PUSH
72387: EMPTY
72388: LIST
72389: LIST
72390: LIST
72391: LIST
72392: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
72393: LD_ADDR_OWVAR 29
72397: PUSH
72398: LD_INT 12
72400: PUSH
72401: LD_INT 12
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: ST_TO_ADDR
// end ;
72408: LD_VAR 0 1
72412: RET
// export function PrepareApeman ( agressivity ) ; begin
72413: LD_INT 0
72415: PPUSH
// uc_side := 0 ;
72416: LD_ADDR_OWVAR 20
72420: PUSH
72421: LD_INT 0
72423: ST_TO_ADDR
// uc_nation := 0 ;
72424: LD_ADDR_OWVAR 21
72428: PUSH
72429: LD_INT 0
72431: ST_TO_ADDR
// hc_sex := sex_male ;
72432: LD_ADDR_OWVAR 27
72436: PUSH
72437: LD_INT 1
72439: ST_TO_ADDR
// hc_class := class_apeman ;
72440: LD_ADDR_OWVAR 28
72444: PUSH
72445: LD_INT 12
72447: ST_TO_ADDR
// hc_gallery :=  ;
72448: LD_ADDR_OWVAR 33
72452: PUSH
72453: LD_STRING 
72455: ST_TO_ADDR
// hc_name :=  ;
72456: LD_ADDR_OWVAR 26
72460: PUSH
72461: LD_STRING 
72463: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
72464: LD_ADDR_OWVAR 29
72468: PUSH
72469: LD_INT 12
72471: PUSH
72472: LD_INT 12
72474: PUSH
72475: EMPTY
72476: LIST
72477: LIST
72478: ST_TO_ADDR
// if agressivity = 0 then
72479: LD_VAR 0 1
72483: PUSH
72484: LD_INT 0
72486: EQUAL
72487: IFFALSE 72499
// hc_agressivity := 0 else
72489: LD_ADDR_OWVAR 35
72493: PUSH
72494: LD_INT 0
72496: ST_TO_ADDR
72497: GO 72520
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72499: LD_ADDR_OWVAR 35
72503: PUSH
72504: LD_VAR 0 1
72508: NEG
72509: PPUSH
72510: LD_VAR 0 1
72514: PPUSH
72515: CALL_OW 12
72519: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72520: LD_ADDR_OWVAR 31
72524: PUSH
72525: LD_INT 0
72527: PPUSH
72528: LD_INT 3
72530: PPUSH
72531: CALL_OW 12
72535: PUSH
72536: LD_INT 0
72538: PPUSH
72539: LD_INT 3
72541: PPUSH
72542: CALL_OW 12
72546: PUSH
72547: LD_INT 0
72549: PUSH
72550: LD_INT 0
72552: PUSH
72553: EMPTY
72554: LIST
72555: LIST
72556: LIST
72557: LIST
72558: ST_TO_ADDR
// end ;
72559: LD_VAR 0 2
72563: RET
// export function PrepareTiger ( agressivity ) ; begin
72564: LD_INT 0
72566: PPUSH
// uc_side := 0 ;
72567: LD_ADDR_OWVAR 20
72571: PUSH
72572: LD_INT 0
72574: ST_TO_ADDR
// uc_nation := 0 ;
72575: LD_ADDR_OWVAR 21
72579: PUSH
72580: LD_INT 0
72582: ST_TO_ADDR
// InitHc ;
72583: CALL_OW 19
// hc_class := class_tiger ;
72587: LD_ADDR_OWVAR 28
72591: PUSH
72592: LD_INT 14
72594: ST_TO_ADDR
// hc_gallery :=  ;
72595: LD_ADDR_OWVAR 33
72599: PUSH
72600: LD_STRING 
72602: ST_TO_ADDR
// hc_name :=  ;
72603: LD_ADDR_OWVAR 26
72607: PUSH
72608: LD_STRING 
72610: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72611: LD_ADDR_OWVAR 35
72615: PUSH
72616: LD_VAR 0 1
72620: NEG
72621: PPUSH
72622: LD_VAR 0 1
72626: PPUSH
72627: CALL_OW 12
72631: ST_TO_ADDR
// end ;
72632: LD_VAR 0 2
72636: RET
// export function PrepareEnchidna ( ) ; begin
72637: LD_INT 0
72639: PPUSH
// uc_side := 0 ;
72640: LD_ADDR_OWVAR 20
72644: PUSH
72645: LD_INT 0
72647: ST_TO_ADDR
// uc_nation := 0 ;
72648: LD_ADDR_OWVAR 21
72652: PUSH
72653: LD_INT 0
72655: ST_TO_ADDR
// InitHc ;
72656: CALL_OW 19
// hc_class := class_baggie ;
72660: LD_ADDR_OWVAR 28
72664: PUSH
72665: LD_INT 13
72667: ST_TO_ADDR
// hc_gallery :=  ;
72668: LD_ADDR_OWVAR 33
72672: PUSH
72673: LD_STRING 
72675: ST_TO_ADDR
// hc_name :=  ;
72676: LD_ADDR_OWVAR 26
72680: PUSH
72681: LD_STRING 
72683: ST_TO_ADDR
// end ;
72684: LD_VAR 0 1
72688: RET
// export function PrepareFrog ( ) ; begin
72689: LD_INT 0
72691: PPUSH
// uc_side := 0 ;
72692: LD_ADDR_OWVAR 20
72696: PUSH
72697: LD_INT 0
72699: ST_TO_ADDR
// uc_nation := 0 ;
72700: LD_ADDR_OWVAR 21
72704: PUSH
72705: LD_INT 0
72707: ST_TO_ADDR
// InitHc ;
72708: CALL_OW 19
// hc_class := class_frog ;
72712: LD_ADDR_OWVAR 28
72716: PUSH
72717: LD_INT 19
72719: ST_TO_ADDR
// hc_gallery :=  ;
72720: LD_ADDR_OWVAR 33
72724: PUSH
72725: LD_STRING 
72727: ST_TO_ADDR
// hc_name :=  ;
72728: LD_ADDR_OWVAR 26
72732: PUSH
72733: LD_STRING 
72735: ST_TO_ADDR
// end ;
72736: LD_VAR 0 1
72740: RET
// export function PrepareFish ( ) ; begin
72741: LD_INT 0
72743: PPUSH
// uc_side := 0 ;
72744: LD_ADDR_OWVAR 20
72748: PUSH
72749: LD_INT 0
72751: ST_TO_ADDR
// uc_nation := 0 ;
72752: LD_ADDR_OWVAR 21
72756: PUSH
72757: LD_INT 0
72759: ST_TO_ADDR
// InitHc ;
72760: CALL_OW 19
// hc_class := class_fish ;
72764: LD_ADDR_OWVAR 28
72768: PUSH
72769: LD_INT 20
72771: ST_TO_ADDR
// hc_gallery :=  ;
72772: LD_ADDR_OWVAR 33
72776: PUSH
72777: LD_STRING 
72779: ST_TO_ADDR
// hc_name :=  ;
72780: LD_ADDR_OWVAR 26
72784: PUSH
72785: LD_STRING 
72787: ST_TO_ADDR
// end ;
72788: LD_VAR 0 1
72792: RET
// export function PrepareBird ( ) ; begin
72793: LD_INT 0
72795: PPUSH
// uc_side := 0 ;
72796: LD_ADDR_OWVAR 20
72800: PUSH
72801: LD_INT 0
72803: ST_TO_ADDR
// uc_nation := 0 ;
72804: LD_ADDR_OWVAR 21
72808: PUSH
72809: LD_INT 0
72811: ST_TO_ADDR
// InitHc ;
72812: CALL_OW 19
// hc_class := class_phororhacos ;
72816: LD_ADDR_OWVAR 28
72820: PUSH
72821: LD_INT 18
72823: ST_TO_ADDR
// hc_gallery :=  ;
72824: LD_ADDR_OWVAR 33
72828: PUSH
72829: LD_STRING 
72831: ST_TO_ADDR
// hc_name :=  ;
72832: LD_ADDR_OWVAR 26
72836: PUSH
72837: LD_STRING 
72839: ST_TO_ADDR
// end ;
72840: LD_VAR 0 1
72844: RET
// export function PrepareHorse ( ) ; begin
72845: LD_INT 0
72847: PPUSH
// uc_side := 0 ;
72848: LD_ADDR_OWVAR 20
72852: PUSH
72853: LD_INT 0
72855: ST_TO_ADDR
// uc_nation := 0 ;
72856: LD_ADDR_OWVAR 21
72860: PUSH
72861: LD_INT 0
72863: ST_TO_ADDR
// InitHc ;
72864: CALL_OW 19
// hc_class := class_horse ;
72868: LD_ADDR_OWVAR 28
72872: PUSH
72873: LD_INT 21
72875: ST_TO_ADDR
// hc_gallery :=  ;
72876: LD_ADDR_OWVAR 33
72880: PUSH
72881: LD_STRING 
72883: ST_TO_ADDR
// hc_name :=  ;
72884: LD_ADDR_OWVAR 26
72888: PUSH
72889: LD_STRING 
72891: ST_TO_ADDR
// end ;
72892: LD_VAR 0 1
72896: RET
// export function PrepareMastodont ( ) ; begin
72897: LD_INT 0
72899: PPUSH
// uc_side := 0 ;
72900: LD_ADDR_OWVAR 20
72904: PUSH
72905: LD_INT 0
72907: ST_TO_ADDR
// uc_nation := 0 ;
72908: LD_ADDR_OWVAR 21
72912: PUSH
72913: LD_INT 0
72915: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72916: LD_ADDR_OWVAR 37
72920: PUSH
72921: LD_INT 31
72923: ST_TO_ADDR
// vc_control := control_rider ;
72924: LD_ADDR_OWVAR 38
72928: PUSH
72929: LD_INT 4
72931: ST_TO_ADDR
// end ;
72932: LD_VAR 0 1
72936: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72937: LD_INT 0
72939: PPUSH
72940: PPUSH
72941: PPUSH
// uc_side = 0 ;
72942: LD_ADDR_OWVAR 20
72946: PUSH
72947: LD_INT 0
72949: ST_TO_ADDR
// uc_nation = 0 ;
72950: LD_ADDR_OWVAR 21
72954: PUSH
72955: LD_INT 0
72957: ST_TO_ADDR
// InitHc_All ( ) ;
72958: CALL_OW 584
// InitVc ;
72962: CALL_OW 20
// if mastodonts then
72966: LD_VAR 0 6
72970: IFFALSE 73037
// for i = 1 to mastodonts do
72972: LD_ADDR_VAR 0 11
72976: PUSH
72977: DOUBLE
72978: LD_INT 1
72980: DEC
72981: ST_TO_ADDR
72982: LD_VAR 0 6
72986: PUSH
72987: FOR_TO
72988: IFFALSE 73035
// begin vc_chassis := 31 ;
72990: LD_ADDR_OWVAR 37
72994: PUSH
72995: LD_INT 31
72997: ST_TO_ADDR
// vc_control := control_rider ;
72998: LD_ADDR_OWVAR 38
73002: PUSH
73003: LD_INT 4
73005: ST_TO_ADDR
// animal := CreateVehicle ;
73006: LD_ADDR_VAR 0 12
73010: PUSH
73011: CALL_OW 45
73015: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73016: LD_VAR 0 12
73020: PPUSH
73021: LD_VAR 0 8
73025: PPUSH
73026: LD_INT 0
73028: PPUSH
73029: CALL 75179 0 3
// end ;
73033: GO 72987
73035: POP
73036: POP
// if horses then
73037: LD_VAR 0 5
73041: IFFALSE 73108
// for i = 1 to horses do
73043: LD_ADDR_VAR 0 11
73047: PUSH
73048: DOUBLE
73049: LD_INT 1
73051: DEC
73052: ST_TO_ADDR
73053: LD_VAR 0 5
73057: PUSH
73058: FOR_TO
73059: IFFALSE 73106
// begin hc_class := 21 ;
73061: LD_ADDR_OWVAR 28
73065: PUSH
73066: LD_INT 21
73068: ST_TO_ADDR
// hc_gallery :=  ;
73069: LD_ADDR_OWVAR 33
73073: PUSH
73074: LD_STRING 
73076: ST_TO_ADDR
// animal := CreateHuman ;
73077: LD_ADDR_VAR 0 12
73081: PUSH
73082: CALL_OW 44
73086: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73087: LD_VAR 0 12
73091: PPUSH
73092: LD_VAR 0 8
73096: PPUSH
73097: LD_INT 0
73099: PPUSH
73100: CALL 75179 0 3
// end ;
73104: GO 73058
73106: POP
73107: POP
// if birds then
73108: LD_VAR 0 1
73112: IFFALSE 73179
// for i = 1 to birds do
73114: LD_ADDR_VAR 0 11
73118: PUSH
73119: DOUBLE
73120: LD_INT 1
73122: DEC
73123: ST_TO_ADDR
73124: LD_VAR 0 1
73128: PUSH
73129: FOR_TO
73130: IFFALSE 73177
// begin hc_class := 18 ;
73132: LD_ADDR_OWVAR 28
73136: PUSH
73137: LD_INT 18
73139: ST_TO_ADDR
// hc_gallery =  ;
73140: LD_ADDR_OWVAR 33
73144: PUSH
73145: LD_STRING 
73147: ST_TO_ADDR
// animal := CreateHuman ;
73148: LD_ADDR_VAR 0 12
73152: PUSH
73153: CALL_OW 44
73157: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73158: LD_VAR 0 12
73162: PPUSH
73163: LD_VAR 0 8
73167: PPUSH
73168: LD_INT 0
73170: PPUSH
73171: CALL 75179 0 3
// end ;
73175: GO 73129
73177: POP
73178: POP
// if tigers then
73179: LD_VAR 0 2
73183: IFFALSE 73267
// for i = 1 to tigers do
73185: LD_ADDR_VAR 0 11
73189: PUSH
73190: DOUBLE
73191: LD_INT 1
73193: DEC
73194: ST_TO_ADDR
73195: LD_VAR 0 2
73199: PUSH
73200: FOR_TO
73201: IFFALSE 73265
// begin hc_class = class_tiger ;
73203: LD_ADDR_OWVAR 28
73207: PUSH
73208: LD_INT 14
73210: ST_TO_ADDR
// hc_gallery =  ;
73211: LD_ADDR_OWVAR 33
73215: PUSH
73216: LD_STRING 
73218: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73219: LD_ADDR_OWVAR 35
73223: PUSH
73224: LD_INT 7
73226: NEG
73227: PPUSH
73228: LD_INT 7
73230: PPUSH
73231: CALL_OW 12
73235: ST_TO_ADDR
// animal := CreateHuman ;
73236: LD_ADDR_VAR 0 12
73240: PUSH
73241: CALL_OW 44
73245: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73246: LD_VAR 0 12
73250: PPUSH
73251: LD_VAR 0 8
73255: PPUSH
73256: LD_INT 0
73258: PPUSH
73259: CALL 75179 0 3
// end ;
73263: GO 73200
73265: POP
73266: POP
// if apemans then
73267: LD_VAR 0 3
73271: IFFALSE 73394
// for i = 1 to apemans do
73273: LD_ADDR_VAR 0 11
73277: PUSH
73278: DOUBLE
73279: LD_INT 1
73281: DEC
73282: ST_TO_ADDR
73283: LD_VAR 0 3
73287: PUSH
73288: FOR_TO
73289: IFFALSE 73392
// begin hc_class = class_apeman ;
73291: LD_ADDR_OWVAR 28
73295: PUSH
73296: LD_INT 12
73298: ST_TO_ADDR
// hc_gallery =  ;
73299: LD_ADDR_OWVAR 33
73303: PUSH
73304: LD_STRING 
73306: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73307: LD_ADDR_OWVAR 35
73311: PUSH
73312: LD_INT 2
73314: NEG
73315: PPUSH
73316: LD_INT 2
73318: PPUSH
73319: CALL_OW 12
73323: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73324: LD_ADDR_OWVAR 31
73328: PUSH
73329: LD_INT 1
73331: PPUSH
73332: LD_INT 3
73334: PPUSH
73335: CALL_OW 12
73339: PUSH
73340: LD_INT 1
73342: PPUSH
73343: LD_INT 3
73345: PPUSH
73346: CALL_OW 12
73350: PUSH
73351: LD_INT 0
73353: PUSH
73354: LD_INT 0
73356: PUSH
73357: EMPTY
73358: LIST
73359: LIST
73360: LIST
73361: LIST
73362: ST_TO_ADDR
// animal := CreateHuman ;
73363: LD_ADDR_VAR 0 12
73367: PUSH
73368: CALL_OW 44
73372: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73373: LD_VAR 0 12
73377: PPUSH
73378: LD_VAR 0 8
73382: PPUSH
73383: LD_INT 0
73385: PPUSH
73386: CALL 75179 0 3
// end ;
73390: GO 73288
73392: POP
73393: POP
// if enchidnas then
73394: LD_VAR 0 4
73398: IFFALSE 73465
// for i = 1 to enchidnas do
73400: LD_ADDR_VAR 0 11
73404: PUSH
73405: DOUBLE
73406: LD_INT 1
73408: DEC
73409: ST_TO_ADDR
73410: LD_VAR 0 4
73414: PUSH
73415: FOR_TO
73416: IFFALSE 73463
// begin hc_class = 13 ;
73418: LD_ADDR_OWVAR 28
73422: PUSH
73423: LD_INT 13
73425: ST_TO_ADDR
// hc_gallery =  ;
73426: LD_ADDR_OWVAR 33
73430: PUSH
73431: LD_STRING 
73433: ST_TO_ADDR
// animal := CreateHuman ;
73434: LD_ADDR_VAR 0 12
73438: PUSH
73439: CALL_OW 44
73443: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73444: LD_VAR 0 12
73448: PPUSH
73449: LD_VAR 0 8
73453: PPUSH
73454: LD_INT 0
73456: PPUSH
73457: CALL 75179 0 3
// end ;
73461: GO 73415
73463: POP
73464: POP
// if fishes then
73465: LD_VAR 0 7
73469: IFFALSE 73536
// for i = 1 to fishes do
73471: LD_ADDR_VAR 0 11
73475: PUSH
73476: DOUBLE
73477: LD_INT 1
73479: DEC
73480: ST_TO_ADDR
73481: LD_VAR 0 7
73485: PUSH
73486: FOR_TO
73487: IFFALSE 73534
// begin hc_class = 20 ;
73489: LD_ADDR_OWVAR 28
73493: PUSH
73494: LD_INT 20
73496: ST_TO_ADDR
// hc_gallery =  ;
73497: LD_ADDR_OWVAR 33
73501: PUSH
73502: LD_STRING 
73504: ST_TO_ADDR
// animal := CreateHuman ;
73505: LD_ADDR_VAR 0 12
73509: PUSH
73510: CALL_OW 44
73514: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73515: LD_VAR 0 12
73519: PPUSH
73520: LD_VAR 0 9
73524: PPUSH
73525: LD_INT 0
73527: PPUSH
73528: CALL 75179 0 3
// end ;
73532: GO 73486
73534: POP
73535: POP
// end ;
73536: LD_VAR 0 10
73540: RET
// export function WantHeal ( sci , unit ) ; begin
73541: LD_INT 0
73543: PPUSH
// if GetTaskList ( sci ) > 0 then
73544: LD_VAR 0 1
73548: PPUSH
73549: CALL_OW 437
73553: PUSH
73554: LD_INT 0
73556: GREATER
73557: IFFALSE 73629
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73559: LD_VAR 0 1
73563: PPUSH
73564: CALL_OW 437
73568: PUSH
73569: LD_INT 1
73571: ARRAY
73572: PUSH
73573: LD_INT 1
73575: ARRAY
73576: PUSH
73577: LD_STRING l
73579: EQUAL
73580: IFFALSE 73607
73582: PUSH
73583: LD_VAR 0 1
73587: PPUSH
73588: CALL_OW 437
73592: PUSH
73593: LD_INT 1
73595: ARRAY
73596: PUSH
73597: LD_INT 4
73599: ARRAY
73600: PUSH
73601: LD_VAR 0 2
73605: EQUAL
73606: AND
73607: IFFALSE 73619
// result := true else
73609: LD_ADDR_VAR 0 3
73613: PUSH
73614: LD_INT 1
73616: ST_TO_ADDR
73617: GO 73627
// result := false ;
73619: LD_ADDR_VAR 0 3
73623: PUSH
73624: LD_INT 0
73626: ST_TO_ADDR
// end else
73627: GO 73637
// result := false ;
73629: LD_ADDR_VAR 0 3
73633: PUSH
73634: LD_INT 0
73636: ST_TO_ADDR
// end ;
73637: LD_VAR 0 3
73641: RET
// export function HealTarget ( sci ) ; begin
73642: LD_INT 0
73644: PPUSH
// if not sci then
73645: LD_VAR 0 1
73649: NOT
73650: IFFALSE 73654
// exit ;
73652: GO 73719
// result := 0 ;
73654: LD_ADDR_VAR 0 2
73658: PUSH
73659: LD_INT 0
73661: ST_TO_ADDR
// if GetTaskList ( sci ) then
73662: LD_VAR 0 1
73666: PPUSH
73667: CALL_OW 437
73671: IFFALSE 73719
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73673: LD_VAR 0 1
73677: PPUSH
73678: CALL_OW 437
73682: PUSH
73683: LD_INT 1
73685: ARRAY
73686: PUSH
73687: LD_INT 1
73689: ARRAY
73690: PUSH
73691: LD_STRING l
73693: EQUAL
73694: IFFALSE 73719
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73696: LD_ADDR_VAR 0 2
73700: PUSH
73701: LD_VAR 0 1
73705: PPUSH
73706: CALL_OW 437
73710: PUSH
73711: LD_INT 1
73713: ARRAY
73714: PUSH
73715: LD_INT 4
73717: ARRAY
73718: ST_TO_ADDR
// end ;
73719: LD_VAR 0 2
73723: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73724: LD_INT 0
73726: PPUSH
73727: PPUSH
73728: PPUSH
73729: PPUSH
// if not base_units then
73730: LD_VAR 0 1
73734: NOT
73735: IFFALSE 73739
// exit ;
73737: GO 73826
// result := false ;
73739: LD_ADDR_VAR 0 2
73743: PUSH
73744: LD_INT 0
73746: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73747: LD_ADDR_VAR 0 5
73751: PUSH
73752: LD_VAR 0 1
73756: PPUSH
73757: LD_INT 21
73759: PUSH
73760: LD_INT 3
73762: PUSH
73763: EMPTY
73764: LIST
73765: LIST
73766: PPUSH
73767: CALL_OW 72
73771: ST_TO_ADDR
// if not tmp then
73772: LD_VAR 0 5
73776: NOT
73777: IFFALSE 73781
// exit ;
73779: GO 73826
// for i in tmp do
73781: LD_ADDR_VAR 0 3
73785: PUSH
73786: LD_VAR 0 5
73790: PUSH
73791: FOR_IN
73792: IFFALSE 73824
// begin result := EnemyInRange ( i , 22 ) ;
73794: LD_ADDR_VAR 0 2
73798: PUSH
73799: LD_VAR 0 3
73803: PPUSH
73804: LD_INT 22
73806: PPUSH
73807: CALL 71251 0 2
73811: ST_TO_ADDR
// if result then
73812: LD_VAR 0 2
73816: IFFALSE 73822
// exit ;
73818: POP
73819: POP
73820: GO 73826
// end ;
73822: GO 73791
73824: POP
73825: POP
// end ;
73826: LD_VAR 0 2
73830: RET
// export function FilterByTag ( units , tag ) ; begin
73831: LD_INT 0
73833: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73834: LD_ADDR_VAR 0 3
73838: PUSH
73839: LD_VAR 0 1
73843: PPUSH
73844: LD_INT 120
73846: PUSH
73847: LD_VAR 0 2
73851: PUSH
73852: EMPTY
73853: LIST
73854: LIST
73855: PPUSH
73856: CALL_OW 72
73860: ST_TO_ADDR
// end ;
73861: LD_VAR 0 3
73865: RET
// export function IsDriver ( un ) ; begin
73866: LD_INT 0
73868: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73869: LD_ADDR_VAR 0 2
73873: PUSH
73874: LD_VAR 0 1
73878: PUSH
73879: LD_INT 55
73881: PUSH
73882: EMPTY
73883: LIST
73884: PPUSH
73885: CALL_OW 69
73889: IN
73890: ST_TO_ADDR
// end ;
73891: LD_VAR 0 2
73895: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73896: LD_INT 0
73898: PPUSH
73899: PPUSH
// list := [ ] ;
73900: LD_ADDR_VAR 0 5
73904: PUSH
73905: EMPTY
73906: ST_TO_ADDR
// case d of 0 :
73907: LD_VAR 0 3
73911: PUSH
73912: LD_INT 0
73914: DOUBLE
73915: EQUAL
73916: IFTRUE 73920
73918: GO 74053
73920: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73921: LD_ADDR_VAR 0 5
73925: PUSH
73926: LD_VAR 0 1
73930: PUSH
73931: LD_INT 4
73933: MINUS
73934: PUSH
73935: LD_VAR 0 2
73939: PUSH
73940: LD_INT 4
73942: MINUS
73943: PUSH
73944: LD_INT 2
73946: PUSH
73947: EMPTY
73948: LIST
73949: LIST
73950: LIST
73951: PUSH
73952: LD_VAR 0 1
73956: PUSH
73957: LD_INT 3
73959: MINUS
73960: PUSH
73961: LD_VAR 0 2
73965: PUSH
73966: LD_INT 1
73968: PUSH
73969: EMPTY
73970: LIST
73971: LIST
73972: LIST
73973: PUSH
73974: LD_VAR 0 1
73978: PUSH
73979: LD_INT 4
73981: PLUS
73982: PUSH
73983: LD_VAR 0 2
73987: PUSH
73988: LD_INT 4
73990: PUSH
73991: EMPTY
73992: LIST
73993: LIST
73994: LIST
73995: PUSH
73996: LD_VAR 0 1
74000: PUSH
74001: LD_INT 3
74003: PLUS
74004: PUSH
74005: LD_VAR 0 2
74009: PUSH
74010: LD_INT 3
74012: PLUS
74013: PUSH
74014: LD_INT 5
74016: PUSH
74017: EMPTY
74018: LIST
74019: LIST
74020: LIST
74021: PUSH
74022: LD_VAR 0 1
74026: PUSH
74027: LD_VAR 0 2
74031: PUSH
74032: LD_INT 4
74034: PLUS
74035: PUSH
74036: LD_INT 0
74038: PUSH
74039: EMPTY
74040: LIST
74041: LIST
74042: LIST
74043: PUSH
74044: EMPTY
74045: LIST
74046: LIST
74047: LIST
74048: LIST
74049: LIST
74050: ST_TO_ADDR
// end ; 1 :
74051: GO 74751
74053: LD_INT 1
74055: DOUBLE
74056: EQUAL
74057: IFTRUE 74061
74059: GO 74194
74061: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74062: LD_ADDR_VAR 0 5
74066: PUSH
74067: LD_VAR 0 1
74071: PUSH
74072: LD_VAR 0 2
74076: PUSH
74077: LD_INT 4
74079: MINUS
74080: PUSH
74081: LD_INT 3
74083: PUSH
74084: EMPTY
74085: LIST
74086: LIST
74087: LIST
74088: PUSH
74089: LD_VAR 0 1
74093: PUSH
74094: LD_INT 3
74096: MINUS
74097: PUSH
74098: LD_VAR 0 2
74102: PUSH
74103: LD_INT 3
74105: MINUS
74106: PUSH
74107: LD_INT 2
74109: PUSH
74110: EMPTY
74111: LIST
74112: LIST
74113: LIST
74114: PUSH
74115: LD_VAR 0 1
74119: PUSH
74120: LD_INT 4
74122: MINUS
74123: PUSH
74124: LD_VAR 0 2
74128: PUSH
74129: LD_INT 1
74131: PUSH
74132: EMPTY
74133: LIST
74134: LIST
74135: LIST
74136: PUSH
74137: LD_VAR 0 1
74141: PUSH
74142: LD_VAR 0 2
74146: PUSH
74147: LD_INT 3
74149: PLUS
74150: PUSH
74151: LD_INT 0
74153: PUSH
74154: EMPTY
74155: LIST
74156: LIST
74157: LIST
74158: PUSH
74159: LD_VAR 0 1
74163: PUSH
74164: LD_INT 4
74166: PLUS
74167: PUSH
74168: LD_VAR 0 2
74172: PUSH
74173: LD_INT 4
74175: PLUS
74176: PUSH
74177: LD_INT 5
74179: PUSH
74180: EMPTY
74181: LIST
74182: LIST
74183: LIST
74184: PUSH
74185: EMPTY
74186: LIST
74187: LIST
74188: LIST
74189: LIST
74190: LIST
74191: ST_TO_ADDR
// end ; 2 :
74192: GO 74751
74194: LD_INT 2
74196: DOUBLE
74197: EQUAL
74198: IFTRUE 74202
74200: GO 74331
74202: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74203: LD_ADDR_VAR 0 5
74207: PUSH
74208: LD_VAR 0 1
74212: PUSH
74213: LD_VAR 0 2
74217: PUSH
74218: LD_INT 3
74220: MINUS
74221: PUSH
74222: LD_INT 3
74224: PUSH
74225: EMPTY
74226: LIST
74227: LIST
74228: LIST
74229: PUSH
74230: LD_VAR 0 1
74234: PUSH
74235: LD_INT 4
74237: PLUS
74238: PUSH
74239: LD_VAR 0 2
74243: PUSH
74244: LD_INT 4
74246: PUSH
74247: EMPTY
74248: LIST
74249: LIST
74250: LIST
74251: PUSH
74252: LD_VAR 0 1
74256: PUSH
74257: LD_VAR 0 2
74261: PUSH
74262: LD_INT 4
74264: PLUS
74265: PUSH
74266: LD_INT 0
74268: PUSH
74269: EMPTY
74270: LIST
74271: LIST
74272: LIST
74273: PUSH
74274: LD_VAR 0 1
74278: PUSH
74279: LD_INT 3
74281: MINUS
74282: PUSH
74283: LD_VAR 0 2
74287: PUSH
74288: LD_INT 1
74290: PUSH
74291: EMPTY
74292: LIST
74293: LIST
74294: LIST
74295: PUSH
74296: LD_VAR 0 1
74300: PUSH
74301: LD_INT 4
74303: MINUS
74304: PUSH
74305: LD_VAR 0 2
74309: PUSH
74310: LD_INT 4
74312: MINUS
74313: PUSH
74314: LD_INT 2
74316: PUSH
74317: EMPTY
74318: LIST
74319: LIST
74320: LIST
74321: PUSH
74322: EMPTY
74323: LIST
74324: LIST
74325: LIST
74326: LIST
74327: LIST
74328: ST_TO_ADDR
// end ; 3 :
74329: GO 74751
74331: LD_INT 3
74333: DOUBLE
74334: EQUAL
74335: IFTRUE 74339
74337: GO 74472
74339: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74340: LD_ADDR_VAR 0 5
74344: PUSH
74345: LD_VAR 0 1
74349: PUSH
74350: LD_INT 3
74352: PLUS
74353: PUSH
74354: LD_VAR 0 2
74358: PUSH
74359: LD_INT 4
74361: PUSH
74362: EMPTY
74363: LIST
74364: LIST
74365: LIST
74366: PUSH
74367: LD_VAR 0 1
74371: PUSH
74372: LD_INT 4
74374: PLUS
74375: PUSH
74376: LD_VAR 0 2
74380: PUSH
74381: LD_INT 4
74383: PLUS
74384: PUSH
74385: LD_INT 5
74387: PUSH
74388: EMPTY
74389: LIST
74390: LIST
74391: LIST
74392: PUSH
74393: LD_VAR 0 1
74397: PUSH
74398: LD_INT 4
74400: MINUS
74401: PUSH
74402: LD_VAR 0 2
74406: PUSH
74407: LD_INT 1
74409: PUSH
74410: EMPTY
74411: LIST
74412: LIST
74413: LIST
74414: PUSH
74415: LD_VAR 0 1
74419: PUSH
74420: LD_VAR 0 2
74424: PUSH
74425: LD_INT 4
74427: MINUS
74428: PUSH
74429: LD_INT 3
74431: PUSH
74432: EMPTY
74433: LIST
74434: LIST
74435: LIST
74436: PUSH
74437: LD_VAR 0 1
74441: PUSH
74442: LD_INT 3
74444: MINUS
74445: PUSH
74446: LD_VAR 0 2
74450: PUSH
74451: LD_INT 3
74453: MINUS
74454: PUSH
74455: LD_INT 2
74457: PUSH
74458: EMPTY
74459: LIST
74460: LIST
74461: LIST
74462: PUSH
74463: EMPTY
74464: LIST
74465: LIST
74466: LIST
74467: LIST
74468: LIST
74469: ST_TO_ADDR
// end ; 4 :
74470: GO 74751
74472: LD_INT 4
74474: DOUBLE
74475: EQUAL
74476: IFTRUE 74480
74478: GO 74613
74480: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74481: LD_ADDR_VAR 0 5
74485: PUSH
74486: LD_VAR 0 1
74490: PUSH
74491: LD_VAR 0 2
74495: PUSH
74496: LD_INT 4
74498: PLUS
74499: PUSH
74500: LD_INT 0
74502: PUSH
74503: EMPTY
74504: LIST
74505: LIST
74506: LIST
74507: PUSH
74508: LD_VAR 0 1
74512: PUSH
74513: LD_INT 3
74515: PLUS
74516: PUSH
74517: LD_VAR 0 2
74521: PUSH
74522: LD_INT 3
74524: PLUS
74525: PUSH
74526: LD_INT 5
74528: PUSH
74529: EMPTY
74530: LIST
74531: LIST
74532: LIST
74533: PUSH
74534: LD_VAR 0 1
74538: PUSH
74539: LD_INT 4
74541: PLUS
74542: PUSH
74543: LD_VAR 0 2
74547: PUSH
74548: LD_INT 4
74550: PUSH
74551: EMPTY
74552: LIST
74553: LIST
74554: LIST
74555: PUSH
74556: LD_VAR 0 1
74560: PUSH
74561: LD_VAR 0 2
74565: PUSH
74566: LD_INT 3
74568: MINUS
74569: PUSH
74570: LD_INT 3
74572: PUSH
74573: EMPTY
74574: LIST
74575: LIST
74576: LIST
74577: PUSH
74578: LD_VAR 0 1
74582: PUSH
74583: LD_INT 4
74585: MINUS
74586: PUSH
74587: LD_VAR 0 2
74591: PUSH
74592: LD_INT 4
74594: MINUS
74595: PUSH
74596: LD_INT 2
74598: PUSH
74599: EMPTY
74600: LIST
74601: LIST
74602: LIST
74603: PUSH
74604: EMPTY
74605: LIST
74606: LIST
74607: LIST
74608: LIST
74609: LIST
74610: ST_TO_ADDR
// end ; 5 :
74611: GO 74751
74613: LD_INT 5
74615: DOUBLE
74616: EQUAL
74617: IFTRUE 74621
74619: GO 74750
74621: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74622: LD_ADDR_VAR 0 5
74626: PUSH
74627: LD_VAR 0 1
74631: PUSH
74632: LD_INT 4
74634: MINUS
74635: PUSH
74636: LD_VAR 0 2
74640: PUSH
74641: LD_INT 1
74643: PUSH
74644: EMPTY
74645: LIST
74646: LIST
74647: LIST
74648: PUSH
74649: LD_VAR 0 1
74653: PUSH
74654: LD_VAR 0 2
74658: PUSH
74659: LD_INT 4
74661: MINUS
74662: PUSH
74663: LD_INT 3
74665: PUSH
74666: EMPTY
74667: LIST
74668: LIST
74669: LIST
74670: PUSH
74671: LD_VAR 0 1
74675: PUSH
74676: LD_INT 4
74678: PLUS
74679: PUSH
74680: LD_VAR 0 2
74684: PUSH
74685: LD_INT 4
74687: PLUS
74688: PUSH
74689: LD_INT 5
74691: PUSH
74692: EMPTY
74693: LIST
74694: LIST
74695: LIST
74696: PUSH
74697: LD_VAR 0 1
74701: PUSH
74702: LD_INT 3
74704: PLUS
74705: PUSH
74706: LD_VAR 0 2
74710: PUSH
74711: LD_INT 4
74713: PUSH
74714: EMPTY
74715: LIST
74716: LIST
74717: LIST
74718: PUSH
74719: LD_VAR 0 1
74723: PUSH
74724: LD_VAR 0 2
74728: PUSH
74729: LD_INT 3
74731: PLUS
74732: PUSH
74733: LD_INT 0
74735: PUSH
74736: EMPTY
74737: LIST
74738: LIST
74739: LIST
74740: PUSH
74741: EMPTY
74742: LIST
74743: LIST
74744: LIST
74745: LIST
74746: LIST
74747: ST_TO_ADDR
// end ; end ;
74748: GO 74751
74750: POP
// result := list ;
74751: LD_ADDR_VAR 0 4
74755: PUSH
74756: LD_VAR 0 5
74760: ST_TO_ADDR
// end ;
74761: LD_VAR 0 4
74765: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74766: LD_INT 0
74768: PPUSH
74769: PPUSH
74770: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74771: LD_VAR 0 1
74775: NOT
74776: IFTRUE 74804
74778: PUSH
74779: LD_VAR 0 2
74783: PUSH
74784: LD_INT 1
74786: PUSH
74787: LD_INT 2
74789: PUSH
74790: LD_INT 3
74792: PUSH
74793: LD_INT 4
74795: PUSH
74796: EMPTY
74797: LIST
74798: LIST
74799: LIST
74800: LIST
74801: IN
74802: NOT
74803: OR
74804: IFFALSE 74808
// exit ;
74806: GO 74891
// tmp := [ ] ;
74808: LD_ADDR_VAR 0 5
74812: PUSH
74813: EMPTY
74814: ST_TO_ADDR
// for i in units do
74815: LD_ADDR_VAR 0 4
74819: PUSH
74820: LD_VAR 0 1
74824: PUSH
74825: FOR_IN
74826: IFFALSE 74860
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
74828: LD_ADDR_VAR 0 5
74832: PUSH
74833: LD_VAR 0 5
74837: PPUSH
74838: LD_VAR 0 4
74842: PPUSH
74843: LD_VAR 0 2
74847: PPUSH
74848: CALL_OW 259
74852: PPUSH
74853: CALL 76286 0 2
74857: ST_TO_ADDR
74858: GO 74825
74860: POP
74861: POP
// if not tmp then
74862: LD_VAR 0 5
74866: NOT
74867: IFFALSE 74871
// exit ;
74869: GO 74891
// result := SortListByListDesc ( units , tmp ) ;
74871: LD_ADDR_VAR 0 3
74875: PUSH
74876: LD_VAR 0 1
74880: PPUSH
74881: LD_VAR 0 5
74885: PPUSH
74886: CALL_OW 77
74890: ST_TO_ADDR
// end ;
74891: LD_VAR 0 3
74895: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74896: LD_INT 0
74898: PPUSH
74899: PPUSH
74900: PPUSH
// result := false ;
74901: LD_ADDR_VAR 0 3
74905: PUSH
74906: LD_INT 0
74908: ST_TO_ADDR
// if not building then
74909: LD_VAR 0 2
74913: NOT
74914: IFFALSE 74918
// exit ;
74916: GO 75062
// x := GetX ( building ) ;
74918: LD_ADDR_VAR 0 4
74922: PUSH
74923: LD_VAR 0 2
74927: PPUSH
74928: CALL_OW 250
74932: ST_TO_ADDR
// y := GetY ( building ) ;
74933: LD_ADDR_VAR 0 5
74937: PUSH
74938: LD_VAR 0 2
74942: PPUSH
74943: CALL_OW 251
74947: ST_TO_ADDR
// if not x or not y then
74948: LD_VAR 0 4
74952: NOT
74953: IFTRUE 74962
74955: PUSH
74956: LD_VAR 0 5
74960: NOT
74961: OR
74962: IFFALSE 74966
// exit ;
74964: GO 75062
// if GetTaskList ( unit ) then
74966: LD_VAR 0 1
74970: PPUSH
74971: CALL_OW 437
74975: IFFALSE 75062
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74977: LD_STRING e
74979: PUSH
74980: LD_VAR 0 1
74984: PPUSH
74985: CALL_OW 437
74989: PUSH
74990: LD_INT 1
74992: ARRAY
74993: PUSH
74994: LD_INT 1
74996: ARRAY
74997: EQUAL
74998: IFFALSE 75025
75000: PUSH
75001: LD_VAR 0 4
75005: PUSH
75006: LD_VAR 0 1
75010: PPUSH
75011: CALL_OW 437
75015: PUSH
75016: LD_INT 1
75018: ARRAY
75019: PUSH
75020: LD_INT 2
75022: ARRAY
75023: EQUAL
75024: AND
75025: IFFALSE 75052
75027: PUSH
75028: LD_VAR 0 5
75032: PUSH
75033: LD_VAR 0 1
75037: PPUSH
75038: CALL_OW 437
75042: PUSH
75043: LD_INT 1
75045: ARRAY
75046: PUSH
75047: LD_INT 3
75049: ARRAY
75050: EQUAL
75051: AND
75052: IFFALSE 75062
// result := true end ;
75054: LD_ADDR_VAR 0 3
75058: PUSH
75059: LD_INT 1
75061: ST_TO_ADDR
// end ;
75062: LD_VAR 0 3
75066: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75067: LD_INT 0
75069: PPUSH
// result := false ;
75070: LD_ADDR_VAR 0 4
75074: PUSH
75075: LD_INT 0
75077: ST_TO_ADDR
// if GetTaskList ( unit ) then
75078: LD_VAR 0 1
75082: PPUSH
75083: CALL_OW 437
75087: IFFALSE 75174
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75089: LD_STRING M
75091: PUSH
75092: LD_VAR 0 1
75096: PPUSH
75097: CALL_OW 437
75101: PUSH
75102: LD_INT 1
75104: ARRAY
75105: PUSH
75106: LD_INT 1
75108: ARRAY
75109: EQUAL
75110: IFFALSE 75137
75112: PUSH
75113: LD_VAR 0 2
75117: PUSH
75118: LD_VAR 0 1
75122: PPUSH
75123: CALL_OW 437
75127: PUSH
75128: LD_INT 1
75130: ARRAY
75131: PUSH
75132: LD_INT 2
75134: ARRAY
75135: EQUAL
75136: AND
75137: IFFALSE 75164
75139: PUSH
75140: LD_VAR 0 3
75144: PUSH
75145: LD_VAR 0 1
75149: PPUSH
75150: CALL_OW 437
75154: PUSH
75155: LD_INT 1
75157: ARRAY
75158: PUSH
75159: LD_INT 3
75161: ARRAY
75162: EQUAL
75163: AND
75164: IFFALSE 75174
// result := true ;
75166: LD_ADDR_VAR 0 4
75170: PUSH
75171: LD_INT 1
75173: ST_TO_ADDR
// end ; end ;
75174: LD_VAR 0 4
75178: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75179: LD_INT 0
75181: PPUSH
75182: PPUSH
75183: PPUSH
75184: PPUSH
// if not unit or not area then
75185: LD_VAR 0 1
75189: NOT
75190: IFTRUE 75199
75192: PUSH
75193: LD_VAR 0 2
75197: NOT
75198: OR
75199: IFFALSE 75203
// exit ;
75201: GO 75379
// tmp := AreaToList ( area , i ) ;
75203: LD_ADDR_VAR 0 6
75207: PUSH
75208: LD_VAR 0 2
75212: PPUSH
75213: LD_VAR 0 5
75217: PPUSH
75218: CALL_OW 517
75222: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75223: LD_ADDR_VAR 0 5
75227: PUSH
75228: DOUBLE
75229: LD_INT 1
75231: DEC
75232: ST_TO_ADDR
75233: LD_VAR 0 6
75237: PUSH
75238: LD_INT 1
75240: ARRAY
75241: PUSH
75242: FOR_TO
75243: IFFALSE 75377
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75245: LD_ADDR_VAR 0 7
75249: PUSH
75250: LD_VAR 0 6
75254: PUSH
75255: LD_INT 1
75257: ARRAY
75258: PUSH
75259: LD_VAR 0 5
75263: ARRAY
75264: PUSH
75265: LD_VAR 0 6
75269: PUSH
75270: LD_INT 2
75272: ARRAY
75273: PUSH
75274: LD_VAR 0 5
75278: ARRAY
75279: PUSH
75280: EMPTY
75281: LIST
75282: LIST
75283: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
75284: LD_INT 92
75286: PUSH
75287: LD_VAR 0 7
75291: PUSH
75292: LD_INT 1
75294: ARRAY
75295: PUSH
75296: LD_VAR 0 7
75300: PUSH
75301: LD_INT 2
75303: ARRAY
75304: PUSH
75305: LD_INT 2
75307: PUSH
75308: EMPTY
75309: LIST
75310: LIST
75311: LIST
75312: LIST
75313: PPUSH
75314: CALL_OW 69
75318: PUSH
75319: LD_INT 0
75321: EQUAL
75322: IFFALSE 75375
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75324: LD_VAR 0 1
75328: PPUSH
75329: LD_VAR 0 7
75333: PUSH
75334: LD_INT 1
75336: ARRAY
75337: PPUSH
75338: LD_VAR 0 7
75342: PUSH
75343: LD_INT 2
75345: ARRAY
75346: PPUSH
75347: LD_VAR 0 3
75351: PPUSH
75352: CALL_OW 48
// result := IsPlaced ( unit ) ;
75356: LD_ADDR_VAR 0 4
75360: PUSH
75361: LD_VAR 0 1
75365: PPUSH
75366: CALL_OW 305
75370: ST_TO_ADDR
// exit ;
75371: POP
75372: POP
75373: GO 75379
// end ; end ;
75375: GO 75242
75377: POP
75378: POP
// end ;
75379: LD_VAR 0 4
75383: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75384: LD_INT 0
75386: PPUSH
75387: PPUSH
75388: PPUSH
// if not side or side > 8 then
75389: LD_VAR 0 1
75393: NOT
75394: IFTRUE 75406
75396: PUSH
75397: LD_VAR 0 1
75401: PUSH
75402: LD_INT 8
75404: GREATER
75405: OR
75406: IFFALSE 75410
// exit ;
75408: GO 75597
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75410: LD_ADDR_VAR 0 4
75414: PUSH
75415: LD_INT 22
75417: PUSH
75418: LD_VAR 0 1
75422: PUSH
75423: EMPTY
75424: LIST
75425: LIST
75426: PUSH
75427: LD_INT 21
75429: PUSH
75430: LD_INT 3
75432: PUSH
75433: EMPTY
75434: LIST
75435: LIST
75436: PUSH
75437: EMPTY
75438: LIST
75439: LIST
75440: PPUSH
75441: CALL_OW 69
75445: ST_TO_ADDR
// if not tmp then
75446: LD_VAR 0 4
75450: NOT
75451: IFFALSE 75455
// exit ;
75453: GO 75597
// enable_addtolog := true ;
75455: LD_ADDR_OWVAR 81
75459: PUSH
75460: LD_INT 1
75462: ST_TO_ADDR
// AddToLog ( [ ) ;
75463: LD_STRING [
75465: PPUSH
75466: CALL_OW 561
// for i in tmp do
75470: LD_ADDR_VAR 0 3
75474: PUSH
75475: LD_VAR 0 4
75479: PUSH
75480: FOR_IN
75481: IFFALSE 75588
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75483: LD_STRING [
75485: PUSH
75486: LD_VAR 0 3
75490: PPUSH
75491: CALL_OW 266
75495: STR
75496: PUSH
75497: LD_STRING , 
75499: STR
75500: PUSH
75501: LD_VAR 0 3
75505: PPUSH
75506: CALL_OW 250
75510: STR
75511: PUSH
75512: LD_STRING , 
75514: STR
75515: PUSH
75516: LD_VAR 0 3
75520: PPUSH
75521: CALL_OW 251
75525: STR
75526: PUSH
75527: LD_STRING , 
75529: STR
75530: PUSH
75531: LD_VAR 0 3
75535: PPUSH
75536: CALL_OW 254
75540: STR
75541: PUSH
75542: LD_STRING , 
75544: STR
75545: PUSH
75546: LD_VAR 0 3
75550: PPUSH
75551: LD_INT 1
75553: PPUSH
75554: CALL_OW 268
75558: STR
75559: PUSH
75560: LD_STRING , 
75562: STR
75563: PUSH
75564: LD_VAR 0 3
75568: PPUSH
75569: LD_INT 2
75571: PPUSH
75572: CALL_OW 268
75576: STR
75577: PUSH
75578: LD_STRING ],
75580: STR
75581: PPUSH
75582: CALL_OW 561
// end ;
75586: GO 75480
75588: POP
75589: POP
// AddToLog ( ]; ) ;
75590: LD_STRING ];
75592: PPUSH
75593: CALL_OW 561
// end ;
75597: LD_VAR 0 2
75601: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75602: LD_INT 0
75604: PPUSH
75605: PPUSH
75606: PPUSH
75607: PPUSH
75608: PPUSH
// if not area or not rate or not max then
75609: LD_VAR 0 1
75613: NOT
75614: IFTRUE 75623
75616: PUSH
75617: LD_VAR 0 2
75621: NOT
75622: OR
75623: IFTRUE 75632
75625: PUSH
75626: LD_VAR 0 4
75630: NOT
75631: OR
75632: IFFALSE 75636
// exit ;
75634: GO 75825
// while 1 do
75636: LD_INT 1
75638: IFFALSE 75825
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75640: LD_ADDR_VAR 0 9
75644: PUSH
75645: LD_VAR 0 1
75649: PPUSH
75650: LD_INT 1
75652: PPUSH
75653: CALL_OW 287
75657: PUSH
75658: LD_INT 10
75660: MUL
75661: ST_TO_ADDR
// r := rate / 10 ;
75662: LD_ADDR_VAR 0 7
75666: PUSH
75667: LD_VAR 0 2
75671: PUSH
75672: LD_INT 10
75674: DIVREAL
75675: ST_TO_ADDR
// time := 1 1$00 ;
75676: LD_ADDR_VAR 0 8
75680: PUSH
75681: LD_INT 2100
75683: ST_TO_ADDR
// if amount < min then
75684: LD_VAR 0 9
75688: PUSH
75689: LD_VAR 0 3
75693: LESS
75694: IFFALSE 75712
// r := r * 2 else
75696: LD_ADDR_VAR 0 7
75700: PUSH
75701: LD_VAR 0 7
75705: PUSH
75706: LD_INT 2
75708: MUL
75709: ST_TO_ADDR
75710: GO 75738
// if amount > max then
75712: LD_VAR 0 9
75716: PUSH
75717: LD_VAR 0 4
75721: GREATER
75722: IFFALSE 75738
// r := r / 2 ;
75724: LD_ADDR_VAR 0 7
75728: PUSH
75729: LD_VAR 0 7
75733: PUSH
75734: LD_INT 2
75736: DIVREAL
75737: ST_TO_ADDR
// time := time / r ;
75738: LD_ADDR_VAR 0 8
75742: PUSH
75743: LD_VAR 0 8
75747: PUSH
75748: LD_VAR 0 7
75752: DIVREAL
75753: ST_TO_ADDR
// if time < 0 then
75754: LD_VAR 0 8
75758: PUSH
75759: LD_INT 0
75761: LESS
75762: IFFALSE 75779
// time := time * - 1 ;
75764: LD_ADDR_VAR 0 8
75768: PUSH
75769: LD_VAR 0 8
75773: PUSH
75774: LD_INT 1
75776: NEG
75777: MUL
75778: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75779: LD_VAR 0 8
75783: PUSH
75784: LD_INT 35
75786: PPUSH
75787: LD_INT 875
75789: PPUSH
75790: CALL_OW 12
75794: PLUS
75795: PPUSH
75796: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75800: LD_INT 1
75802: PPUSH
75803: LD_INT 5
75805: PPUSH
75806: CALL_OW 12
75810: PPUSH
75811: LD_VAR 0 1
75815: PPUSH
75816: LD_INT 1
75818: PPUSH
75819: CALL_OW 55
// end ;
75823: GO 75636
// end ;
75825: LD_VAR 0 5
75829: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75830: LD_INT 0
75832: PPUSH
75833: PPUSH
75834: PPUSH
75835: PPUSH
75836: PPUSH
75837: PPUSH
75838: PPUSH
75839: PPUSH
// if not turrets or not factories then
75840: LD_VAR 0 1
75844: NOT
75845: IFTRUE 75854
75847: PUSH
75848: LD_VAR 0 2
75852: NOT
75853: OR
75854: IFFALSE 75858
// exit ;
75856: GO 76165
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75858: LD_ADDR_VAR 0 10
75862: PUSH
75863: LD_INT 5
75865: PUSH
75866: LD_INT 6
75868: PUSH
75869: EMPTY
75870: LIST
75871: LIST
75872: PUSH
75873: LD_INT 2
75875: PUSH
75876: LD_INT 4
75878: PUSH
75879: EMPTY
75880: LIST
75881: LIST
75882: PUSH
75883: LD_INT 3
75885: PUSH
75886: LD_INT 5
75888: PUSH
75889: EMPTY
75890: LIST
75891: LIST
75892: PUSH
75893: EMPTY
75894: LIST
75895: LIST
75896: LIST
75897: PUSH
75898: LD_INT 24
75900: PUSH
75901: LD_INT 25
75903: PUSH
75904: EMPTY
75905: LIST
75906: LIST
75907: PUSH
75908: LD_INT 23
75910: PUSH
75911: LD_INT 27
75913: PUSH
75914: EMPTY
75915: LIST
75916: LIST
75917: PUSH
75918: EMPTY
75919: LIST
75920: LIST
75921: PUSH
75922: LD_INT 42
75924: PUSH
75925: LD_INT 43
75927: PUSH
75928: EMPTY
75929: LIST
75930: LIST
75931: PUSH
75932: LD_INT 44
75934: PUSH
75935: LD_INT 46
75937: PUSH
75938: EMPTY
75939: LIST
75940: LIST
75941: PUSH
75942: LD_INT 45
75944: PUSH
75945: LD_INT 47
75947: PUSH
75948: EMPTY
75949: LIST
75950: LIST
75951: PUSH
75952: EMPTY
75953: LIST
75954: LIST
75955: LIST
75956: PUSH
75957: EMPTY
75958: LIST
75959: LIST
75960: LIST
75961: ST_TO_ADDR
// result := [ ] ;
75962: LD_ADDR_VAR 0 3
75966: PUSH
75967: EMPTY
75968: ST_TO_ADDR
// for i in turrets do
75969: LD_ADDR_VAR 0 4
75973: PUSH
75974: LD_VAR 0 1
75978: PUSH
75979: FOR_IN
75980: IFFALSE 76163
// begin nat := GetNation ( i ) ;
75982: LD_ADDR_VAR 0 7
75986: PUSH
75987: LD_VAR 0 4
75991: PPUSH
75992: CALL_OW 248
75996: ST_TO_ADDR
// weapon := 0 ;
75997: LD_ADDR_VAR 0 8
76001: PUSH
76002: LD_INT 0
76004: ST_TO_ADDR
// if not nat then
76005: LD_VAR 0 7
76009: NOT
76010: IFFALSE 76014
// continue ;
76012: GO 75979
// for j in list [ nat ] do
76014: LD_ADDR_VAR 0 5
76018: PUSH
76019: LD_VAR 0 10
76023: PUSH
76024: LD_VAR 0 7
76028: ARRAY
76029: PUSH
76030: FOR_IN
76031: IFFALSE 76072
// if GetBWeapon ( i ) = j [ 1 ] then
76033: LD_VAR 0 4
76037: PPUSH
76038: CALL_OW 269
76042: PUSH
76043: LD_VAR 0 5
76047: PUSH
76048: LD_INT 1
76050: ARRAY
76051: EQUAL
76052: IFFALSE 76070
// begin weapon := j [ 2 ] ;
76054: LD_ADDR_VAR 0 8
76058: PUSH
76059: LD_VAR 0 5
76063: PUSH
76064: LD_INT 2
76066: ARRAY
76067: ST_TO_ADDR
// break ;
76068: GO 76072
// end ;
76070: GO 76030
76072: POP
76073: POP
// if not weapon then
76074: LD_VAR 0 8
76078: NOT
76079: IFFALSE 76083
// continue ;
76081: GO 75979
// for k in factories do
76083: LD_ADDR_VAR 0 6
76087: PUSH
76088: LD_VAR 0 2
76092: PUSH
76093: FOR_IN
76094: IFFALSE 76159
// begin weapons := AvailableWeaponList ( k ) ;
76096: LD_ADDR_VAR 0 9
76100: PUSH
76101: LD_VAR 0 6
76105: PPUSH
76106: CALL_OW 478
76110: ST_TO_ADDR
// if not weapons then
76111: LD_VAR 0 9
76115: NOT
76116: IFFALSE 76120
// continue ;
76118: GO 76093
// if weapon in weapons then
76120: LD_VAR 0 8
76124: PUSH
76125: LD_VAR 0 9
76129: IN
76130: IFFALSE 76157
// begin result := [ i , weapon ] ;
76132: LD_ADDR_VAR 0 3
76136: PUSH
76137: LD_VAR 0 4
76141: PUSH
76142: LD_VAR 0 8
76146: PUSH
76147: EMPTY
76148: LIST
76149: LIST
76150: ST_TO_ADDR
// exit ;
76151: POP
76152: POP
76153: POP
76154: POP
76155: GO 76165
// end ; end ;
76157: GO 76093
76159: POP
76160: POP
// end ;
76161: GO 75979
76163: POP
76164: POP
// end ;
76165: LD_VAR 0 3
76169: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76170: LD_INT 0
76172: PPUSH
// if not side or side > 8 then
76173: LD_VAR 0 3
76177: NOT
76178: IFTRUE 76190
76180: PUSH
76181: LD_VAR 0 3
76185: PUSH
76186: LD_INT 8
76188: GREATER
76189: OR
76190: IFFALSE 76194
// exit ;
76192: GO 76253
// if not range then
76194: LD_VAR 0 4
76198: NOT
76199: IFFALSE 76210
// range := - 12 ;
76201: LD_ADDR_VAR 0 4
76205: PUSH
76206: LD_INT 12
76208: NEG
76209: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76210: LD_VAR 0 1
76214: PPUSH
76215: LD_VAR 0 2
76219: PPUSH
76220: LD_VAR 0 3
76224: PPUSH
76225: LD_VAR 0 4
76229: PPUSH
76230: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76234: LD_VAR 0 1
76238: PPUSH
76239: LD_VAR 0 2
76243: PPUSH
76244: LD_VAR 0 3
76248: PPUSH
76249: CALL_OW 331
// end ;
76253: LD_VAR 0 5
76257: RET
// export function Video ( mode ) ; begin
76258: LD_INT 0
76260: PPUSH
// ingame_video = mode ;
76261: LD_ADDR_OWVAR 52
76265: PUSH
76266: LD_VAR 0 1
76270: ST_TO_ADDR
// interface_hidden = mode ;
76271: LD_ADDR_OWVAR 54
76275: PUSH
76276: LD_VAR 0 1
76280: ST_TO_ADDR
// end ;
76281: LD_VAR 0 2
76285: RET
// export function Join ( array , element ) ; begin
76286: LD_INT 0
76288: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76289: LD_ADDR_VAR 0 3
76293: PUSH
76294: LD_VAR 0 1
76298: PPUSH
76299: LD_VAR 0 1
76303: PUSH
76304: LD_INT 1
76306: PLUS
76307: PPUSH
76308: LD_VAR 0 2
76312: PPUSH
76313: CALL_OW 1
76317: ST_TO_ADDR
// end ;
76318: LD_VAR 0 3
76322: RET
// export function JoinUnion ( array , element ) ; begin
76323: LD_INT 0
76325: PPUSH
// result := array union element ;
76326: LD_ADDR_VAR 0 3
76330: PUSH
76331: LD_VAR 0 1
76335: PUSH
76336: LD_VAR 0 2
76340: UNION
76341: ST_TO_ADDR
// end ;
76342: LD_VAR 0 3
76346: RET
// export function GetBehemoths ( side ) ; begin
76347: LD_INT 0
76349: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76350: LD_ADDR_VAR 0 2
76354: PUSH
76355: LD_INT 22
76357: PUSH
76358: LD_VAR 0 1
76362: PUSH
76363: EMPTY
76364: LIST
76365: LIST
76366: PUSH
76367: LD_INT 31
76369: PUSH
76370: LD_INT 25
76372: PUSH
76373: EMPTY
76374: LIST
76375: LIST
76376: PUSH
76377: EMPTY
76378: LIST
76379: LIST
76380: PPUSH
76381: CALL_OW 69
76385: ST_TO_ADDR
// end ;
76386: LD_VAR 0 2
76390: RET
// export function Shuffle ( array ) ; var i , index ; begin
76391: LD_INT 0
76393: PPUSH
76394: PPUSH
76395: PPUSH
// result := [ ] ;
76396: LD_ADDR_VAR 0 2
76400: PUSH
76401: EMPTY
76402: ST_TO_ADDR
// if not array then
76403: LD_VAR 0 1
76407: NOT
76408: IFFALSE 76412
// exit ;
76410: GO 76511
// Randomize ;
76412: CALL_OW 10
// for i = array downto 1 do
76416: LD_ADDR_VAR 0 3
76420: PUSH
76421: DOUBLE
76422: LD_VAR 0 1
76426: INC
76427: ST_TO_ADDR
76428: LD_INT 1
76430: PUSH
76431: FOR_DOWNTO
76432: IFFALSE 76509
// begin index := rand ( 1 , array ) ;
76434: LD_ADDR_VAR 0 4
76438: PUSH
76439: LD_INT 1
76441: PPUSH
76442: LD_VAR 0 1
76446: PPUSH
76447: CALL_OW 12
76451: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76452: LD_ADDR_VAR 0 2
76456: PUSH
76457: LD_VAR 0 2
76461: PPUSH
76462: LD_VAR 0 2
76466: PUSH
76467: LD_INT 1
76469: PLUS
76470: PPUSH
76471: LD_VAR 0 1
76475: PUSH
76476: LD_VAR 0 4
76480: ARRAY
76481: PPUSH
76482: CALL_OW 2
76486: ST_TO_ADDR
// array := Delete ( array , index ) ;
76487: LD_ADDR_VAR 0 1
76491: PUSH
76492: LD_VAR 0 1
76496: PPUSH
76497: LD_VAR 0 4
76501: PPUSH
76502: CALL_OW 3
76506: ST_TO_ADDR
// end ;
76507: GO 76431
76509: POP
76510: POP
// end ;
76511: LD_VAR 0 2
76515: RET
// export function GetBaseMaterials ( base ) ; begin
76516: LD_INT 0
76518: PPUSH
// result := [ 0 , 0 , 0 ] ;
76519: LD_ADDR_VAR 0 2
76523: PUSH
76524: LD_INT 0
76526: PUSH
76527: LD_INT 0
76529: PUSH
76530: LD_INT 0
76532: PUSH
76533: EMPTY
76534: LIST
76535: LIST
76536: LIST
76537: ST_TO_ADDR
// if not base then
76538: LD_VAR 0 1
76542: NOT
76543: IFFALSE 76547
// exit ;
76545: GO 76596
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76547: LD_ADDR_VAR 0 2
76551: PUSH
76552: LD_VAR 0 1
76556: PPUSH
76557: LD_INT 1
76559: PPUSH
76560: CALL_OW 275
76564: PUSH
76565: LD_VAR 0 1
76569: PPUSH
76570: LD_INT 2
76572: PPUSH
76573: CALL_OW 275
76577: PUSH
76578: LD_VAR 0 1
76582: PPUSH
76583: LD_INT 3
76585: PPUSH
76586: CALL_OW 275
76590: PUSH
76591: EMPTY
76592: LIST
76593: LIST
76594: LIST
76595: ST_TO_ADDR
// end ;
76596: LD_VAR 0 2
76600: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76601: LD_INT 0
76603: PPUSH
76604: PPUSH
// result := array ;
76605: LD_ADDR_VAR 0 3
76609: PUSH
76610: LD_VAR 0 1
76614: ST_TO_ADDR
// if size >= result then
76615: LD_VAR 0 2
76619: PUSH
76620: LD_VAR 0 3
76624: GREATEREQUAL
76625: IFFALSE 76629
// exit ;
76627: GO 76679
// if size then
76629: LD_VAR 0 2
76633: IFFALSE 76679
// for i := array downto size do
76635: LD_ADDR_VAR 0 4
76639: PUSH
76640: DOUBLE
76641: LD_VAR 0 1
76645: INC
76646: ST_TO_ADDR
76647: LD_VAR 0 2
76651: PUSH
76652: FOR_DOWNTO
76653: IFFALSE 76677
// result := Delete ( result , result ) ;
76655: LD_ADDR_VAR 0 3
76659: PUSH
76660: LD_VAR 0 3
76664: PPUSH
76665: LD_VAR 0 3
76669: PPUSH
76670: CALL_OW 3
76674: ST_TO_ADDR
76675: GO 76652
76677: POP
76678: POP
// end ;
76679: LD_VAR 0 3
76683: RET
// export function ComExit ( unit ) ; var tmp ; begin
76684: LD_INT 0
76686: PPUSH
76687: PPUSH
// if not IsInUnit ( unit ) then
76688: LD_VAR 0 1
76692: PPUSH
76693: CALL_OW 310
76697: NOT
76698: IFFALSE 76702
// exit ;
76700: GO 76762
// tmp := IsInUnit ( unit ) ;
76702: LD_ADDR_VAR 0 3
76706: PUSH
76707: LD_VAR 0 1
76711: PPUSH
76712: CALL_OW 310
76716: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76717: LD_VAR 0 3
76721: PPUSH
76722: CALL_OW 247
76726: PUSH
76727: LD_INT 2
76729: EQUAL
76730: IFFALSE 76743
// ComExitVehicle ( unit ) else
76732: LD_VAR 0 1
76736: PPUSH
76737: CALL_OW 121
76741: GO 76752
// ComExitBuilding ( unit ) ;
76743: LD_VAR 0 1
76747: PPUSH
76748: CALL_OW 122
// result := tmp ;
76752: LD_ADDR_VAR 0 2
76756: PUSH
76757: LD_VAR 0 3
76761: ST_TO_ADDR
// end ;
76762: LD_VAR 0 2
76766: RET
// export function ComExitAll ( units ) ; var i ; begin
76767: LD_INT 0
76769: PPUSH
76770: PPUSH
// if not units then
76771: LD_VAR 0 1
76775: NOT
76776: IFFALSE 76780
// exit ;
76778: GO 76806
// for i in units do
76780: LD_ADDR_VAR 0 3
76784: PUSH
76785: LD_VAR 0 1
76789: PUSH
76790: FOR_IN
76791: IFFALSE 76804
// ComExit ( i ) ;
76793: LD_VAR 0 3
76797: PPUSH
76798: CALL 76684 0 1
76802: GO 76790
76804: POP
76805: POP
// end ;
76806: LD_VAR 0 2
76810: RET
// export function ResetHc ; begin
76811: LD_INT 0
76813: PPUSH
// InitHc ;
76814: CALL_OW 19
// hc_importance := 0 ;
76818: LD_ADDR_OWVAR 32
76822: PUSH
76823: LD_INT 0
76825: ST_TO_ADDR
// end ;
76826: LD_VAR 0 1
76830: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76831: LD_INT 0
76833: PPUSH
76834: PPUSH
76835: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76836: LD_ADDR_VAR 0 6
76840: PUSH
76841: LD_VAR 0 1
76845: PUSH
76846: LD_VAR 0 3
76850: PLUS
76851: PUSH
76852: LD_INT 2
76854: DIV
76855: ST_TO_ADDR
// if _x < 0 then
76856: LD_VAR 0 6
76860: PUSH
76861: LD_INT 0
76863: LESS
76864: IFFALSE 76881
// _x := _x * - 1 ;
76866: LD_ADDR_VAR 0 6
76870: PUSH
76871: LD_VAR 0 6
76875: PUSH
76876: LD_INT 1
76878: NEG
76879: MUL
76880: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76881: LD_ADDR_VAR 0 7
76885: PUSH
76886: LD_VAR 0 2
76890: PUSH
76891: LD_VAR 0 4
76895: PLUS
76896: PUSH
76897: LD_INT 2
76899: DIV
76900: ST_TO_ADDR
// if _y < 0 then
76901: LD_VAR 0 7
76905: PUSH
76906: LD_INT 0
76908: LESS
76909: IFFALSE 76926
// _y := _y * - 1 ;
76911: LD_ADDR_VAR 0 7
76915: PUSH
76916: LD_VAR 0 7
76920: PUSH
76921: LD_INT 1
76923: NEG
76924: MUL
76925: ST_TO_ADDR
// result := [ _x , _y ] ;
76926: LD_ADDR_VAR 0 5
76930: PUSH
76931: LD_VAR 0 6
76935: PUSH
76936: LD_VAR 0 7
76940: PUSH
76941: EMPTY
76942: LIST
76943: LIST
76944: ST_TO_ADDR
// end ;
76945: LD_VAR 0 5
76949: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76950: LD_INT 0
76952: PPUSH
76953: PPUSH
76954: PPUSH
76955: PPUSH
// task := GetTaskList ( unit ) ;
76956: LD_ADDR_VAR 0 7
76960: PUSH
76961: LD_VAR 0 1
76965: PPUSH
76966: CALL_OW 437
76970: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76971: LD_VAR 0 7
76975: NOT
76976: IFFALSE 76995
76978: PUSH
76979: LD_VAR 0 1
76983: PPUSH
76984: LD_VAR 0 2
76988: PPUSH
76989: CALL_OW 308
76993: NOT
76994: AND
76995: IFFALSE 76999
// exit ;
76997: GO 77117
// if IsInArea ( unit , area ) then
76999: LD_VAR 0 1
77003: PPUSH
77004: LD_VAR 0 2
77008: PPUSH
77009: CALL_OW 308
77013: IFFALSE 77031
// begin ComMoveToArea ( unit , goAway ) ;
77015: LD_VAR 0 1
77019: PPUSH
77020: LD_VAR 0 3
77024: PPUSH
77025: CALL_OW 113
// exit ;
77029: GO 77117
// end ; if task [ 1 ] [ 1 ] <> M then
77031: LD_VAR 0 7
77035: PUSH
77036: LD_INT 1
77038: ARRAY
77039: PUSH
77040: LD_INT 1
77042: ARRAY
77043: PUSH
77044: LD_STRING M
77046: NONEQUAL
77047: IFFALSE 77051
// exit ;
77049: GO 77117
// x := task [ 1 ] [ 2 ] ;
77051: LD_ADDR_VAR 0 5
77055: PUSH
77056: LD_VAR 0 7
77060: PUSH
77061: LD_INT 1
77063: ARRAY
77064: PUSH
77065: LD_INT 2
77067: ARRAY
77068: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77069: LD_ADDR_VAR 0 6
77073: PUSH
77074: LD_VAR 0 7
77078: PUSH
77079: LD_INT 1
77081: ARRAY
77082: PUSH
77083: LD_INT 3
77085: ARRAY
77086: ST_TO_ADDR
// if InArea ( x , y , area ) then
77087: LD_VAR 0 5
77091: PPUSH
77092: LD_VAR 0 6
77096: PPUSH
77097: LD_VAR 0 2
77101: PPUSH
77102: CALL_OW 309
77106: IFFALSE 77117
// ComStop ( unit ) ;
77108: LD_VAR 0 1
77112: PPUSH
77113: CALL_OW 141
// end ;
77117: LD_VAR 0 4
77121: RET
// export function Abs ( value ) ; begin
77122: LD_INT 0
77124: PPUSH
// result := value ;
77125: LD_ADDR_VAR 0 2
77129: PUSH
77130: LD_VAR 0 1
77134: ST_TO_ADDR
// if value < 0 then
77135: LD_VAR 0 1
77139: PUSH
77140: LD_INT 0
77142: LESS
77143: IFFALSE 77160
// result := value * - 1 ;
77145: LD_ADDR_VAR 0 2
77149: PUSH
77150: LD_VAR 0 1
77154: PUSH
77155: LD_INT 1
77157: NEG
77158: MUL
77159: ST_TO_ADDR
// end ;
77160: LD_VAR 0 2
77164: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77165: LD_INT 0
77167: PPUSH
77168: PPUSH
77169: PPUSH
77170: PPUSH
77171: PPUSH
77172: PPUSH
77173: PPUSH
77174: PPUSH
// if not unit or not building then
77175: LD_VAR 0 1
77179: NOT
77180: IFTRUE 77189
77182: PUSH
77183: LD_VAR 0 2
77187: NOT
77188: OR
77189: IFFALSE 77193
// exit ;
77191: GO 77421
// x := GetX ( building ) ;
77193: LD_ADDR_VAR 0 4
77197: PUSH
77198: LD_VAR 0 2
77202: PPUSH
77203: CALL_OW 250
77207: ST_TO_ADDR
// y := GetY ( building ) ;
77208: LD_ADDR_VAR 0 6
77212: PUSH
77213: LD_VAR 0 2
77217: PPUSH
77218: CALL_OW 251
77222: ST_TO_ADDR
// d := GetDir ( building ) ;
77223: LD_ADDR_VAR 0 8
77227: PUSH
77228: LD_VAR 0 2
77232: PPUSH
77233: CALL_OW 254
77237: ST_TO_ADDR
// r := 4 ;
77238: LD_ADDR_VAR 0 9
77242: PUSH
77243: LD_INT 4
77245: ST_TO_ADDR
// for i := 1 to 5 do
77246: LD_ADDR_VAR 0 10
77250: PUSH
77251: DOUBLE
77252: LD_INT 1
77254: DEC
77255: ST_TO_ADDR
77256: LD_INT 5
77258: PUSH
77259: FOR_TO
77260: IFFALSE 77419
// begin _x := ShiftX ( x , d , r + i ) ;
77262: LD_ADDR_VAR 0 5
77266: PUSH
77267: LD_VAR 0 4
77271: PPUSH
77272: LD_VAR 0 8
77276: PPUSH
77277: LD_VAR 0 9
77281: PUSH
77282: LD_VAR 0 10
77286: PLUS
77287: PPUSH
77288: CALL_OW 272
77292: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77293: LD_ADDR_VAR 0 7
77297: PUSH
77298: LD_VAR 0 6
77302: PPUSH
77303: LD_VAR 0 8
77307: PPUSH
77308: LD_VAR 0 9
77312: PUSH
77313: LD_VAR 0 10
77317: PLUS
77318: PPUSH
77319: CALL_OW 273
77323: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77324: LD_VAR 0 5
77328: PPUSH
77329: LD_VAR 0 7
77333: PPUSH
77334: CALL_OW 488
77338: IFFALSE 77373
77340: PUSH
77341: LD_VAR 0 5
77345: PPUSH
77346: LD_VAR 0 7
77350: PPUSH
77351: CALL_OW 428
77355: PPUSH
77356: CALL_OW 247
77360: PUSH
77361: LD_INT 3
77363: PUSH
77364: LD_INT 2
77366: PUSH
77367: EMPTY
77368: LIST
77369: LIST
77370: IN
77371: NOT
77372: AND
77373: IFFALSE 77417
// begin ComMoveXY ( unit , _x , _y ) ;
77375: LD_VAR 0 1
77379: PPUSH
77380: LD_VAR 0 5
77384: PPUSH
77385: LD_VAR 0 7
77389: PPUSH
77390: CALL_OW 111
// result := [ _x , _y ] ;
77394: LD_ADDR_VAR 0 3
77398: PUSH
77399: LD_VAR 0 5
77403: PUSH
77404: LD_VAR 0 7
77408: PUSH
77409: EMPTY
77410: LIST
77411: LIST
77412: ST_TO_ADDR
// exit ;
77413: POP
77414: POP
77415: GO 77421
// end ; end ;
77417: GO 77259
77419: POP
77420: POP
// end ;
77421: LD_VAR 0 3
77425: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77426: LD_INT 0
77428: PPUSH
77429: PPUSH
77430: PPUSH
// result := 0 ;
77431: LD_ADDR_VAR 0 3
77435: PUSH
77436: LD_INT 0
77438: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77439: LD_VAR 0 1
77443: PUSH
77444: LD_INT 0
77446: LESS
77447: IFTRUE 77459
77449: PUSH
77450: LD_VAR 0 1
77454: PUSH
77455: LD_INT 8
77457: GREATER
77458: OR
77459: IFTRUE 77471
77461: PUSH
77462: LD_VAR 0 2
77466: PUSH
77467: LD_INT 0
77469: LESS
77470: OR
77471: IFTRUE 77483
77473: PUSH
77474: LD_VAR 0 2
77478: PUSH
77479: LD_INT 8
77481: GREATER
77482: OR
77483: IFFALSE 77487
// exit ;
77485: GO 77562
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77487: LD_ADDR_VAR 0 4
77491: PUSH
77492: LD_INT 22
77494: PUSH
77495: LD_VAR 0 2
77499: PUSH
77500: EMPTY
77501: LIST
77502: LIST
77503: PPUSH
77504: CALL_OW 69
77508: PUSH
77509: FOR_IN
77510: IFFALSE 77560
// begin un := UnitShoot ( i ) ;
77512: LD_ADDR_VAR 0 5
77516: PUSH
77517: LD_VAR 0 4
77521: PPUSH
77522: CALL_OW 504
77526: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77527: LD_VAR 0 5
77531: PPUSH
77532: CALL_OW 255
77536: PUSH
77537: LD_VAR 0 1
77541: EQUAL
77542: IFFALSE 77558
// begin result := un ;
77544: LD_ADDR_VAR 0 3
77548: PUSH
77549: LD_VAR 0 5
77553: ST_TO_ADDR
// exit ;
77554: POP
77555: POP
77556: GO 77562
// end ; end ;
77558: GO 77509
77560: POP
77561: POP
// end ;
77562: LD_VAR 0 3
77566: RET
// export function GetCargoBay ( units ) ; begin
77567: LD_INT 0
77569: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77570: LD_ADDR_VAR 0 2
77574: PUSH
77575: LD_VAR 0 1
77579: PPUSH
77580: LD_INT 2
77582: PUSH
77583: LD_INT 34
77585: PUSH
77586: LD_INT 12
77588: PUSH
77589: EMPTY
77590: LIST
77591: LIST
77592: PUSH
77593: LD_INT 34
77595: PUSH
77596: LD_INT 51
77598: PUSH
77599: EMPTY
77600: LIST
77601: LIST
77602: PUSH
77603: LD_INT 34
77605: PUSH
77606: LD_INT 32
77608: PUSH
77609: EMPTY
77610: LIST
77611: LIST
77612: PUSH
77613: LD_INT 34
77615: PUSH
77616: LD_INT 89
77618: PUSH
77619: EMPTY
77620: LIST
77621: LIST
77622: PUSH
77623: EMPTY
77624: LIST
77625: LIST
77626: LIST
77627: LIST
77628: LIST
77629: PPUSH
77630: CALL_OW 72
77634: ST_TO_ADDR
// end ;
77635: LD_VAR 0 2
77639: RET
// export function Negate ( value ) ; begin
77640: LD_INT 0
77642: PPUSH
// result := not value ;
77643: LD_ADDR_VAR 0 2
77647: PUSH
77648: LD_VAR 0 1
77652: NOT
77653: ST_TO_ADDR
// end ;
77654: LD_VAR 0 2
77658: RET
// export function Inc ( value ) ; begin
77659: LD_INT 0
77661: PPUSH
// result := value + 1 ;
77662: LD_ADDR_VAR 0 2
77666: PUSH
77667: LD_VAR 0 1
77671: PUSH
77672: LD_INT 1
77674: PLUS
77675: ST_TO_ADDR
// end ;
77676: LD_VAR 0 2
77680: RET
// export function Dec ( value ) ; begin
77681: LD_INT 0
77683: PPUSH
// result := value - 1 ;
77684: LD_ADDR_VAR 0 2
77688: PUSH
77689: LD_VAR 0 1
77693: PUSH
77694: LD_INT 1
77696: MINUS
77697: ST_TO_ADDR
// end ;
77698: LD_VAR 0 2
77702: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77703: LD_INT 0
77705: PPUSH
77706: PPUSH
77707: PPUSH
77708: PPUSH
77709: PPUSH
77710: PPUSH
77711: PPUSH
77712: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77713: LD_VAR 0 1
77717: PPUSH
77718: LD_VAR 0 2
77722: PPUSH
77723: CALL_OW 488
77727: NOT
77728: IFTRUE 77747
77730: PUSH
77731: LD_VAR 0 3
77735: PPUSH
77736: LD_VAR 0 4
77740: PPUSH
77741: CALL_OW 488
77745: NOT
77746: OR
77747: IFFALSE 77760
// begin result := - 1 ;
77749: LD_ADDR_VAR 0 5
77753: PUSH
77754: LD_INT 1
77756: NEG
77757: ST_TO_ADDR
// exit ;
77758: GO 77995
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77760: LD_ADDR_VAR 0 12
77764: PUSH
77765: LD_VAR 0 1
77769: PPUSH
77770: LD_VAR 0 2
77774: PPUSH
77775: LD_VAR 0 3
77779: PPUSH
77780: LD_VAR 0 4
77784: PPUSH
77785: CALL 76831 0 4
77789: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77790: LD_ADDR_VAR 0 11
77794: PUSH
77795: LD_VAR 0 1
77799: PPUSH
77800: LD_VAR 0 2
77804: PPUSH
77805: LD_VAR 0 12
77809: PUSH
77810: LD_INT 1
77812: ARRAY
77813: PPUSH
77814: LD_VAR 0 12
77818: PUSH
77819: LD_INT 2
77821: ARRAY
77822: PPUSH
77823: CALL_OW 298
77827: ST_TO_ADDR
// distance := 9999 ;
77828: LD_ADDR_VAR 0 10
77832: PUSH
77833: LD_INT 9999
77835: ST_TO_ADDR
// for i := 0 to 5 do
77836: LD_ADDR_VAR 0 6
77840: PUSH
77841: DOUBLE
77842: LD_INT 0
77844: DEC
77845: ST_TO_ADDR
77846: LD_INT 5
77848: PUSH
77849: FOR_TO
77850: IFFALSE 77993
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77852: LD_ADDR_VAR 0 7
77856: PUSH
77857: LD_VAR 0 1
77861: PPUSH
77862: LD_VAR 0 6
77866: PPUSH
77867: LD_VAR 0 11
77871: PPUSH
77872: CALL_OW 272
77876: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77877: LD_ADDR_VAR 0 8
77881: PUSH
77882: LD_VAR 0 2
77886: PPUSH
77887: LD_VAR 0 6
77891: PPUSH
77892: LD_VAR 0 11
77896: PPUSH
77897: CALL_OW 273
77901: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77902: LD_VAR 0 7
77906: PPUSH
77907: LD_VAR 0 8
77911: PPUSH
77912: CALL_OW 488
77916: NOT
77917: IFFALSE 77921
// continue ;
77919: GO 77849
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77921: LD_ADDR_VAR 0 9
77925: PUSH
77926: LD_VAR 0 12
77930: PUSH
77931: LD_INT 1
77933: ARRAY
77934: PPUSH
77935: LD_VAR 0 12
77939: PUSH
77940: LD_INT 2
77942: ARRAY
77943: PPUSH
77944: LD_VAR 0 7
77948: PPUSH
77949: LD_VAR 0 8
77953: PPUSH
77954: CALL_OW 298
77958: ST_TO_ADDR
// if tmp < distance then
77959: LD_VAR 0 9
77963: PUSH
77964: LD_VAR 0 10
77968: LESS
77969: IFFALSE 77991
// begin result := i ;
77971: LD_ADDR_VAR 0 5
77975: PUSH
77976: LD_VAR 0 6
77980: ST_TO_ADDR
// distance := tmp ;
77981: LD_ADDR_VAR 0 10
77985: PUSH
77986: LD_VAR 0 9
77990: ST_TO_ADDR
// end ; end ;
77991: GO 77849
77993: POP
77994: POP
// end ;
77995: LD_VAR 0 5
77999: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78000: LD_INT 0
78002: PPUSH
78003: PPUSH
// if not driver or not IsInUnit ( driver ) then
78004: LD_VAR 0 1
78008: NOT
78009: IFTRUE 78023
78011: PUSH
78012: LD_VAR 0 1
78016: PPUSH
78017: CALL_OW 310
78021: NOT
78022: OR
78023: IFFALSE 78027
// exit ;
78025: GO 78117
// vehicle := IsInUnit ( driver ) ;
78027: LD_ADDR_VAR 0 3
78031: PUSH
78032: LD_VAR 0 1
78036: PPUSH
78037: CALL_OW 310
78041: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78042: LD_VAR 0 1
78046: PPUSH
78047: LD_STRING \
78049: PUSH
78050: LD_INT 0
78052: PUSH
78053: LD_INT 0
78055: PUSH
78056: LD_INT 0
78058: PUSH
78059: LD_INT 0
78061: PUSH
78062: LD_INT 0
78064: PUSH
78065: LD_INT 0
78067: PUSH
78068: EMPTY
78069: LIST
78070: LIST
78071: LIST
78072: LIST
78073: LIST
78074: LIST
78075: LIST
78076: PUSH
78077: LD_STRING E
78079: PUSH
78080: LD_INT 0
78082: PUSH
78083: LD_INT 0
78085: PUSH
78086: LD_VAR 0 3
78090: PUSH
78091: LD_INT 0
78093: PUSH
78094: LD_INT 0
78096: PUSH
78097: LD_INT 0
78099: PUSH
78100: EMPTY
78101: LIST
78102: LIST
78103: LIST
78104: LIST
78105: LIST
78106: LIST
78107: LIST
78108: PUSH
78109: EMPTY
78110: LIST
78111: LIST
78112: PPUSH
78113: CALL_OW 446
// end ;
78117: LD_VAR 0 2
78121: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78122: LD_INT 0
78124: PPUSH
78125: PPUSH
// if not driver or not IsInUnit ( driver ) then
78126: LD_VAR 0 1
78130: NOT
78131: IFTRUE 78145
78133: PUSH
78134: LD_VAR 0 1
78138: PPUSH
78139: CALL_OW 310
78143: NOT
78144: OR
78145: IFFALSE 78149
// exit ;
78147: GO 78239
// vehicle := IsInUnit ( driver ) ;
78149: LD_ADDR_VAR 0 3
78153: PUSH
78154: LD_VAR 0 1
78158: PPUSH
78159: CALL_OW 310
78163: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78164: LD_VAR 0 1
78168: PPUSH
78169: LD_STRING \
78171: PUSH
78172: LD_INT 0
78174: PUSH
78175: LD_INT 0
78177: PUSH
78178: LD_INT 0
78180: PUSH
78181: LD_INT 0
78183: PUSH
78184: LD_INT 0
78186: PUSH
78187: LD_INT 0
78189: PUSH
78190: EMPTY
78191: LIST
78192: LIST
78193: LIST
78194: LIST
78195: LIST
78196: LIST
78197: LIST
78198: PUSH
78199: LD_STRING E
78201: PUSH
78202: LD_INT 0
78204: PUSH
78205: LD_INT 0
78207: PUSH
78208: LD_VAR 0 3
78212: PUSH
78213: LD_INT 0
78215: PUSH
78216: LD_INT 0
78218: PUSH
78219: LD_INT 0
78221: PUSH
78222: EMPTY
78223: LIST
78224: LIST
78225: LIST
78226: LIST
78227: LIST
78228: LIST
78229: LIST
78230: PUSH
78231: EMPTY
78232: LIST
78233: LIST
78234: PPUSH
78235: CALL_OW 447
// end ;
78239: LD_VAR 0 2
78243: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78244: LD_INT 0
78246: PPUSH
78247: PPUSH
78248: PPUSH
// tmp := [ ] ;
78249: LD_ADDR_VAR 0 5
78253: PUSH
78254: EMPTY
78255: ST_TO_ADDR
// for i in units do
78256: LD_ADDR_VAR 0 4
78260: PUSH
78261: LD_VAR 0 1
78265: PUSH
78266: FOR_IN
78267: IFFALSE 78305
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78269: LD_ADDR_VAR 0 5
78273: PUSH
78274: LD_VAR 0 5
78278: PPUSH
78279: LD_VAR 0 5
78283: PUSH
78284: LD_INT 1
78286: PLUS
78287: PPUSH
78288: LD_VAR 0 4
78292: PPUSH
78293: CALL_OW 256
78297: PPUSH
78298: CALL_OW 2
78302: ST_TO_ADDR
78303: GO 78266
78305: POP
78306: POP
// if not tmp then
78307: LD_VAR 0 5
78311: NOT
78312: IFFALSE 78316
// exit ;
78314: GO 78364
// if asc then
78316: LD_VAR 0 2
78320: IFFALSE 78344
// result := SortListByListAsc ( units , tmp ) else
78322: LD_ADDR_VAR 0 3
78326: PUSH
78327: LD_VAR 0 1
78331: PPUSH
78332: LD_VAR 0 5
78336: PPUSH
78337: CALL_OW 76
78341: ST_TO_ADDR
78342: GO 78364
// result := SortListByListDesc ( units , tmp ) ;
78344: LD_ADDR_VAR 0 3
78348: PUSH
78349: LD_VAR 0 1
78353: PPUSH
78354: LD_VAR 0 5
78358: PPUSH
78359: CALL_OW 77
78363: ST_TO_ADDR
// end ;
78364: LD_VAR 0 3
78368: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78369: LD_INT 0
78371: PPUSH
78372: PPUSH
// task := GetTaskList ( mech ) ;
78373: LD_ADDR_VAR 0 4
78377: PUSH
78378: LD_VAR 0 1
78382: PPUSH
78383: CALL_OW 437
78387: ST_TO_ADDR
// if not task then
78388: LD_VAR 0 4
78392: NOT
78393: IFFALSE 78397
// exit ;
78395: GO 78441
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78397: LD_ADDR_VAR 0 3
78401: PUSH
78402: LD_VAR 0 4
78406: PUSH
78407: LD_INT 1
78409: ARRAY
78410: PUSH
78411: LD_INT 1
78413: ARRAY
78414: PUSH
78415: LD_STRING r
78417: EQUAL
78418: IFFALSE 78440
78420: PUSH
78421: LD_VAR 0 4
78425: PUSH
78426: LD_INT 1
78428: ARRAY
78429: PUSH
78430: LD_INT 4
78432: ARRAY
78433: PUSH
78434: LD_VAR 0 2
78438: EQUAL
78439: AND
78440: ST_TO_ADDR
// end ;
78441: LD_VAR 0 3
78445: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78446: LD_INT 0
78448: PPUSH
// SetDir ( unit , d ) ;
78449: LD_VAR 0 1
78453: PPUSH
78454: LD_VAR 0 4
78458: PPUSH
78459: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
78463: LD_ADDR_VAR 0 6
78467: PUSH
78468: LD_VAR 0 1
78472: PPUSH
78473: LD_VAR 0 2
78477: PPUSH
78478: LD_VAR 0 3
78482: PPUSH
78483: LD_VAR 0 5
78487: PPUSH
78488: CALL_OW 48
78492: ST_TO_ADDR
// end ;
78493: LD_VAR 0 6
78497: RET
// export function ToNaturalNumber ( number ) ; begin
78498: LD_INT 0
78500: PPUSH
// result := number div 1 ;
78501: LD_ADDR_VAR 0 2
78505: PUSH
78506: LD_VAR 0 1
78510: PUSH
78511: LD_INT 1
78513: DIV
78514: ST_TO_ADDR
// if number < 0 then
78515: LD_VAR 0 1
78519: PUSH
78520: LD_INT 0
78522: LESS
78523: IFFALSE 78533
// result := 0 ;
78525: LD_ADDR_VAR 0 2
78529: PUSH
78530: LD_INT 0
78532: ST_TO_ADDR
// end ;
78533: LD_VAR 0 2
78537: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
78538: LD_INT 0
78540: PPUSH
78541: PPUSH
78542: PPUSH
// if not buildings then
78543: LD_VAR 0 1
78547: NOT
78548: IFFALSE 78552
// exit ;
78550: GO 78667
// tmp := [ ] ;
78552: LD_ADDR_VAR 0 5
78556: PUSH
78557: EMPTY
78558: ST_TO_ADDR
// for b in buildings do
78559: LD_ADDR_VAR 0 4
78563: PUSH
78564: LD_VAR 0 1
78568: PUSH
78569: FOR_IN
78570: IFFALSE 78608
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
78572: LD_ADDR_VAR 0 5
78576: PUSH
78577: LD_VAR 0 5
78581: PPUSH
78582: LD_VAR 0 5
78586: PUSH
78587: LD_INT 1
78589: PLUS
78590: PPUSH
78591: LD_VAR 0 4
78595: PPUSH
78596: CALL_OW 266
78600: PPUSH
78601: CALL_OW 1
78605: ST_TO_ADDR
78606: GO 78569
78608: POP
78609: POP
// if not tmp then
78610: LD_VAR 0 5
78614: NOT
78615: IFFALSE 78619
// exit ;
78617: GO 78667
// if asc then
78619: LD_VAR 0 2
78623: IFFALSE 78647
// result := SortListByListAsc ( buildings , tmp ) else
78625: LD_ADDR_VAR 0 3
78629: PUSH
78630: LD_VAR 0 1
78634: PPUSH
78635: LD_VAR 0 5
78639: PPUSH
78640: CALL_OW 76
78644: ST_TO_ADDR
78645: GO 78667
// result := SortListByListDesc ( buildings , tmp ) ;
78647: LD_ADDR_VAR 0 3
78651: PUSH
78652: LD_VAR 0 1
78656: PPUSH
78657: LD_VAR 0 5
78661: PPUSH
78662: CALL_OW 77
78666: ST_TO_ADDR
// end ;
78667: LD_VAR 0 3
78671: RET
// export function SortByClass ( units , class ) ; var un ; begin
78672: LD_INT 0
78674: PPUSH
78675: PPUSH
// if not units or not class then
78676: LD_VAR 0 1
78680: NOT
78681: IFTRUE 78690
78683: PUSH
78684: LD_VAR 0 2
78688: NOT
78689: OR
78690: IFFALSE 78694
// exit ;
78692: GO 78789
// result := [ ] ;
78694: LD_ADDR_VAR 0 3
78698: PUSH
78699: EMPTY
78700: ST_TO_ADDR
// for un in units do
78701: LD_ADDR_VAR 0 4
78705: PUSH
78706: LD_VAR 0 1
78710: PUSH
78711: FOR_IN
78712: IFFALSE 78787
// if GetClass ( un ) = class then
78714: LD_VAR 0 4
78718: PPUSH
78719: CALL_OW 257
78723: PUSH
78724: LD_VAR 0 2
78728: EQUAL
78729: IFFALSE 78756
// result := Insert ( result , 1 , un ) else
78731: LD_ADDR_VAR 0 3
78735: PUSH
78736: LD_VAR 0 3
78740: PPUSH
78741: LD_INT 1
78743: PPUSH
78744: LD_VAR 0 4
78748: PPUSH
78749: CALL_OW 2
78753: ST_TO_ADDR
78754: GO 78785
// result := Replace ( result , result + 1 , un ) ;
78756: LD_ADDR_VAR 0 3
78760: PUSH
78761: LD_VAR 0 3
78765: PPUSH
78766: LD_VAR 0 3
78770: PUSH
78771: LD_INT 1
78773: PLUS
78774: PPUSH
78775: LD_VAR 0 4
78779: PPUSH
78780: CALL_OW 1
78784: ST_TO_ADDR
78785: GO 78711
78787: POP
78788: POP
// end ;
78789: LD_VAR 0 3
78793: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78794: LD_INT 0
78796: PPUSH
78797: PPUSH
78798: PPUSH
78799: PPUSH
78800: PPUSH
78801: PPUSH
78802: PPUSH
// result := [ ] ;
78803: LD_ADDR_VAR 0 4
78807: PUSH
78808: EMPTY
78809: ST_TO_ADDR
// if x - r < 0 then
78810: LD_VAR 0 1
78814: PUSH
78815: LD_VAR 0 3
78819: MINUS
78820: PUSH
78821: LD_INT 0
78823: LESS
78824: IFFALSE 78836
// min_x := 0 else
78826: LD_ADDR_VAR 0 8
78830: PUSH
78831: LD_INT 0
78833: ST_TO_ADDR
78834: GO 78852
// min_x := x - r ;
78836: LD_ADDR_VAR 0 8
78840: PUSH
78841: LD_VAR 0 1
78845: PUSH
78846: LD_VAR 0 3
78850: MINUS
78851: ST_TO_ADDR
// if y - r < 0 then
78852: LD_VAR 0 2
78856: PUSH
78857: LD_VAR 0 3
78861: MINUS
78862: PUSH
78863: LD_INT 0
78865: LESS
78866: IFFALSE 78878
// min_y := 0 else
78868: LD_ADDR_VAR 0 7
78872: PUSH
78873: LD_INT 0
78875: ST_TO_ADDR
78876: GO 78894
// min_y := y - r ;
78878: LD_ADDR_VAR 0 7
78882: PUSH
78883: LD_VAR 0 2
78887: PUSH
78888: LD_VAR 0 3
78892: MINUS
78893: ST_TO_ADDR
// max_x := x + r ;
78894: LD_ADDR_VAR 0 9
78898: PUSH
78899: LD_VAR 0 1
78903: PUSH
78904: LD_VAR 0 3
78908: PLUS
78909: ST_TO_ADDR
// max_y := y + r ;
78910: LD_ADDR_VAR 0 10
78914: PUSH
78915: LD_VAR 0 2
78919: PUSH
78920: LD_VAR 0 3
78924: PLUS
78925: ST_TO_ADDR
// for _x = min_x to max_x do
78926: LD_ADDR_VAR 0 5
78930: PUSH
78931: DOUBLE
78932: LD_VAR 0 8
78936: DEC
78937: ST_TO_ADDR
78938: LD_VAR 0 9
78942: PUSH
78943: FOR_TO
78944: IFFALSE 79045
// for _y = min_y to max_y do
78946: LD_ADDR_VAR 0 6
78950: PUSH
78951: DOUBLE
78952: LD_VAR 0 7
78956: DEC
78957: ST_TO_ADDR
78958: LD_VAR 0 10
78962: PUSH
78963: FOR_TO
78964: IFFALSE 79041
// begin if not ValidHex ( _x , _y ) then
78966: LD_VAR 0 5
78970: PPUSH
78971: LD_VAR 0 6
78975: PPUSH
78976: CALL_OW 488
78980: NOT
78981: IFFALSE 78985
// continue ;
78983: GO 78963
// if GetResourceTypeXY ( _x , _y ) then
78985: LD_VAR 0 5
78989: PPUSH
78990: LD_VAR 0 6
78994: PPUSH
78995: CALL_OW 283
78999: IFFALSE 79039
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79001: LD_ADDR_VAR 0 4
79005: PUSH
79006: LD_VAR 0 4
79010: PPUSH
79011: LD_VAR 0 4
79015: PUSH
79016: LD_INT 1
79018: PLUS
79019: PPUSH
79020: LD_VAR 0 5
79024: PUSH
79025: LD_VAR 0 6
79029: PUSH
79030: EMPTY
79031: LIST
79032: LIST
79033: PPUSH
79034: CALL_OW 1
79038: ST_TO_ADDR
// end ;
79039: GO 78963
79041: POP
79042: POP
79043: GO 78943
79045: POP
79046: POP
// end ;
79047: LD_VAR 0 4
79051: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79052: LD_INT 0
79054: PPUSH
79055: PPUSH
79056: PPUSH
79057: PPUSH
79058: PPUSH
79059: PPUSH
79060: PPUSH
79061: PPUSH
// if not units then
79062: LD_VAR 0 1
79066: NOT
79067: IFFALSE 79071
// exit ;
79069: GO 79603
// result := UnitFilter ( units , [ f_ok ] ) ;
79071: LD_ADDR_VAR 0 3
79075: PUSH
79076: LD_VAR 0 1
79080: PPUSH
79081: LD_INT 50
79083: PUSH
79084: EMPTY
79085: LIST
79086: PPUSH
79087: CALL_OW 72
79091: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79092: LD_ADDR_VAR 0 8
79096: PUSH
79097: LD_VAR 0 1
79101: PUSH
79102: LD_INT 1
79104: ARRAY
79105: PPUSH
79106: CALL_OW 255
79110: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79111: LD_ADDR_VAR 0 10
79115: PUSH
79116: LD_INT 29
79118: PUSH
79119: LD_INT 91
79121: PUSH
79122: LD_INT 49
79124: PUSH
79125: EMPTY
79126: LIST
79127: LIST
79128: LIST
79129: ST_TO_ADDR
// if not result then
79130: LD_VAR 0 3
79134: NOT
79135: IFFALSE 79139
// exit ;
79137: GO 79603
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79139: LD_ADDR_VAR 0 5
79143: PUSH
79144: LD_INT 81
79146: PUSH
79147: LD_VAR 0 8
79151: PUSH
79152: EMPTY
79153: LIST
79154: LIST
79155: PPUSH
79156: CALL_OW 69
79160: ST_TO_ADDR
// for i in result do
79161: LD_ADDR_VAR 0 4
79165: PUSH
79166: LD_VAR 0 3
79170: PUSH
79171: FOR_IN
79172: IFFALSE 79601
// begin tag := GetTag ( i ) + 1 ;
79174: LD_ADDR_VAR 0 9
79178: PUSH
79179: LD_VAR 0 4
79183: PPUSH
79184: CALL_OW 110
79188: PUSH
79189: LD_INT 1
79191: PLUS
79192: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
79193: LD_ADDR_VAR 0 7
79197: PUSH
79198: LD_VAR 0 4
79202: PPUSH
79203: CALL_OW 250
79207: PPUSH
79208: LD_VAR 0 4
79212: PPUSH
79213: CALL_OW 251
79217: PPUSH
79218: LD_INT 4
79220: PPUSH
79221: CALL 78794 0 3
79225: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
79226: LD_VAR 0 4
79230: PPUSH
79231: CALL_OW 247
79235: PUSH
79236: LD_INT 2
79238: EQUAL
79239: IFFALSE 79251
79241: PUSH
79242: LD_VAR 0 7
79246: PUSH
79247: LD_INT 2
79249: GREATER
79250: AND
79251: IFFALSE 79271
79253: PUSH
79254: LD_VAR 0 4
79258: PPUSH
79259: CALL_OW 264
79263: PUSH
79264: LD_VAR 0 10
79268: IN
79269: NOT
79270: AND
79271: IFFALSE 79310
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79273: LD_VAR 0 4
79277: PPUSH
79278: LD_VAR 0 7
79282: PUSH
79283: LD_INT 1
79285: ARRAY
79286: PUSH
79287: LD_INT 1
79289: ARRAY
79290: PPUSH
79291: LD_VAR 0 7
79295: PUSH
79296: LD_INT 1
79298: ARRAY
79299: PUSH
79300: LD_INT 2
79302: ARRAY
79303: PPUSH
79304: CALL_OW 116
79308: GO 79599
// if path > tag then
79310: LD_VAR 0 2
79314: PUSH
79315: LD_VAR 0 9
79319: GREATER
79320: IFFALSE 79528
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79322: LD_ADDR_VAR 0 6
79326: PUSH
79327: LD_VAR 0 5
79331: PPUSH
79332: LD_INT 91
79334: PUSH
79335: LD_VAR 0 4
79339: PUSH
79340: LD_INT 8
79342: PUSH
79343: EMPTY
79344: LIST
79345: LIST
79346: LIST
79347: PPUSH
79348: CALL_OW 72
79352: ST_TO_ADDR
// if nearEnemy then
79353: LD_VAR 0 6
79357: IFFALSE 79426
// begin if GetWeapon ( i ) = ru_time_lapser then
79359: LD_VAR 0 4
79363: PPUSH
79364: CALL_OW 264
79368: PUSH
79369: LD_INT 49
79371: EQUAL
79372: IFFALSE 79400
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79374: LD_VAR 0 4
79378: PPUSH
79379: LD_VAR 0 6
79383: PPUSH
79384: LD_VAR 0 4
79388: PPUSH
79389: CALL_OW 74
79393: PPUSH
79394: CALL_OW 112
79398: GO 79424
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79400: LD_VAR 0 4
79404: PPUSH
79405: LD_VAR 0 6
79409: PPUSH
79410: LD_VAR 0 4
79414: PPUSH
79415: CALL_OW 74
79419: PPUSH
79420: CALL 80684 0 2
// end else
79424: GO 79526
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79426: LD_VAR 0 4
79430: PPUSH
79431: LD_VAR 0 2
79435: PUSH
79436: LD_VAR 0 9
79440: ARRAY
79441: PUSH
79442: LD_INT 1
79444: ARRAY
79445: PPUSH
79446: LD_VAR 0 2
79450: PUSH
79451: LD_VAR 0 9
79455: ARRAY
79456: PUSH
79457: LD_INT 2
79459: ARRAY
79460: PPUSH
79461: CALL_OW 297
79465: PUSH
79466: LD_INT 6
79468: GREATER
79469: IFFALSE 79512
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79471: LD_VAR 0 4
79475: PPUSH
79476: LD_VAR 0 2
79480: PUSH
79481: LD_VAR 0 9
79485: ARRAY
79486: PUSH
79487: LD_INT 1
79489: ARRAY
79490: PPUSH
79491: LD_VAR 0 2
79495: PUSH
79496: LD_VAR 0 9
79500: ARRAY
79501: PUSH
79502: LD_INT 2
79504: ARRAY
79505: PPUSH
79506: CALL_OW 114
79510: GO 79526
// SetTag ( i , tag ) ;
79512: LD_VAR 0 4
79516: PPUSH
79517: LD_VAR 0 9
79521: PPUSH
79522: CALL_OW 109
// end else
79526: GO 79599
// if enemy then
79528: LD_VAR 0 5
79532: IFFALSE 79599
// begin if GetWeapon ( i ) = ru_time_lapser then
79534: LD_VAR 0 4
79538: PPUSH
79539: CALL_OW 264
79543: PUSH
79544: LD_INT 49
79546: EQUAL
79547: IFFALSE 79575
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79549: LD_VAR 0 4
79553: PPUSH
79554: LD_VAR 0 5
79558: PPUSH
79559: LD_VAR 0 4
79563: PPUSH
79564: CALL_OW 74
79568: PPUSH
79569: CALL_OW 112
79573: GO 79599
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79575: LD_VAR 0 4
79579: PPUSH
79580: LD_VAR 0 5
79584: PPUSH
79585: LD_VAR 0 4
79589: PPUSH
79590: CALL_OW 74
79594: PPUSH
79595: CALL 80684 0 2
// end ; end ;
79599: GO 79171
79601: POP
79602: POP
// end ;
79603: LD_VAR 0 3
79607: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79608: LD_INT 0
79610: PPUSH
79611: PPUSH
79612: PPUSH
// if not unit or IsInUnit ( unit ) then
79613: LD_VAR 0 1
79617: NOT
79618: IFTRUE 79631
79620: PUSH
79621: LD_VAR 0 1
79625: PPUSH
79626: CALL_OW 310
79630: OR
79631: IFFALSE 79635
// exit ;
79633: GO 79726
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79635: LD_ADDR_VAR 0 4
79639: PUSH
79640: LD_VAR 0 1
79644: PPUSH
79645: CALL_OW 250
79649: PPUSH
79650: LD_VAR 0 2
79654: PPUSH
79655: LD_INT 1
79657: PPUSH
79658: CALL_OW 272
79662: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79663: LD_ADDR_VAR 0 5
79667: PUSH
79668: LD_VAR 0 1
79672: PPUSH
79673: CALL_OW 251
79677: PPUSH
79678: LD_VAR 0 2
79682: PPUSH
79683: LD_INT 1
79685: PPUSH
79686: CALL_OW 273
79690: ST_TO_ADDR
// if ValidHex ( x , y ) then
79691: LD_VAR 0 4
79695: PPUSH
79696: LD_VAR 0 5
79700: PPUSH
79701: CALL_OW 488
79705: IFFALSE 79726
// ComTurnXY ( unit , x , y ) ;
79707: LD_VAR 0 1
79711: PPUSH
79712: LD_VAR 0 4
79716: PPUSH
79717: LD_VAR 0 5
79721: PPUSH
79722: CALL_OW 118
// end ;
79726: LD_VAR 0 3
79730: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79731: LD_INT 0
79733: PPUSH
79734: PPUSH
// result := false ;
79735: LD_ADDR_VAR 0 3
79739: PUSH
79740: LD_INT 0
79742: ST_TO_ADDR
// if not units then
79743: LD_VAR 0 2
79747: NOT
79748: IFFALSE 79752
// exit ;
79750: GO 79797
// for i in units do
79752: LD_ADDR_VAR 0 4
79756: PUSH
79757: LD_VAR 0 2
79761: PUSH
79762: FOR_IN
79763: IFFALSE 79795
// if See ( side , i ) then
79765: LD_VAR 0 1
79769: PPUSH
79770: LD_VAR 0 4
79774: PPUSH
79775: CALL_OW 292
79779: IFFALSE 79793
// begin result := true ;
79781: LD_ADDR_VAR 0 3
79785: PUSH
79786: LD_INT 1
79788: ST_TO_ADDR
// exit ;
79789: POP
79790: POP
79791: GO 79797
// end ;
79793: GO 79762
79795: POP
79796: POP
// end ;
79797: LD_VAR 0 3
79801: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79802: LD_INT 0
79804: PPUSH
79805: PPUSH
79806: PPUSH
79807: PPUSH
// if not unit or not points then
79808: LD_VAR 0 1
79812: NOT
79813: IFTRUE 79822
79815: PUSH
79816: LD_VAR 0 2
79820: NOT
79821: OR
79822: IFFALSE 79826
// exit ;
79824: GO 79916
// dist := 99999 ;
79826: LD_ADDR_VAR 0 5
79830: PUSH
79831: LD_INT 99999
79833: ST_TO_ADDR
// for i in points do
79834: LD_ADDR_VAR 0 4
79838: PUSH
79839: LD_VAR 0 2
79843: PUSH
79844: FOR_IN
79845: IFFALSE 79914
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79847: LD_ADDR_VAR 0 6
79851: PUSH
79852: LD_VAR 0 1
79856: PPUSH
79857: LD_VAR 0 4
79861: PUSH
79862: LD_INT 1
79864: ARRAY
79865: PPUSH
79866: LD_VAR 0 4
79870: PUSH
79871: LD_INT 2
79873: ARRAY
79874: PPUSH
79875: CALL_OW 297
79879: ST_TO_ADDR
// if tmpDist < dist then
79880: LD_VAR 0 6
79884: PUSH
79885: LD_VAR 0 5
79889: LESS
79890: IFFALSE 79912
// begin result := i ;
79892: LD_ADDR_VAR 0 3
79896: PUSH
79897: LD_VAR 0 4
79901: ST_TO_ADDR
// dist := tmpDist ;
79902: LD_ADDR_VAR 0 5
79906: PUSH
79907: LD_VAR 0 6
79911: ST_TO_ADDR
// end ; end ;
79912: GO 79844
79914: POP
79915: POP
// end ;
79916: LD_VAR 0 3
79920: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79921: LD_INT 0
79923: PPUSH
// uc_side := side ;
79924: LD_ADDR_OWVAR 20
79928: PUSH
79929: LD_VAR 0 1
79933: ST_TO_ADDR
// uc_nation := 3 ;
79934: LD_ADDR_OWVAR 21
79938: PUSH
79939: LD_INT 3
79941: ST_TO_ADDR
// vc_chassis := 25 ;
79942: LD_ADDR_OWVAR 37
79946: PUSH
79947: LD_INT 25
79949: ST_TO_ADDR
// vc_engine := engine_siberite ;
79950: LD_ADDR_OWVAR 39
79954: PUSH
79955: LD_INT 3
79957: ST_TO_ADDR
// vc_control := control_computer ;
79958: LD_ADDR_OWVAR 38
79962: PUSH
79963: LD_INT 3
79965: ST_TO_ADDR
// vc_weapon := 59 ;
79966: LD_ADDR_OWVAR 40
79970: PUSH
79971: LD_INT 59
79973: ST_TO_ADDR
// result := CreateVehicle ;
79974: LD_ADDR_VAR 0 5
79978: PUSH
79979: CALL_OW 45
79983: ST_TO_ADDR
// SetDir ( result , d ) ;
79984: LD_VAR 0 5
79988: PPUSH
79989: LD_VAR 0 4
79993: PPUSH
79994: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79998: LD_VAR 0 5
80002: PPUSH
80003: LD_VAR 0 2
80007: PPUSH
80008: LD_VAR 0 3
80012: PPUSH
80013: LD_INT 0
80015: PPUSH
80016: CALL_OW 48
// end ;
80020: LD_VAR 0 5
80024: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80025: LD_INT 0
80027: PPUSH
80028: PPUSH
80029: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80030: LD_ADDR_VAR 0 2
80034: PUSH
80035: LD_INT 0
80037: PUSH
80038: LD_INT 0
80040: PUSH
80041: LD_INT 0
80043: PUSH
80044: LD_INT 0
80046: PUSH
80047: EMPTY
80048: LIST
80049: LIST
80050: LIST
80051: LIST
80052: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80053: LD_VAR 0 1
80057: NOT
80058: IFTRUE 80091
80060: PUSH
80061: LD_VAR 0 1
80065: PPUSH
80066: CALL_OW 264
80070: PUSH
80071: LD_INT 12
80073: PUSH
80074: LD_INT 51
80076: PUSH
80077: LD_INT 32
80079: PUSH
80080: LD_INT 89
80082: PUSH
80083: EMPTY
80084: LIST
80085: LIST
80086: LIST
80087: LIST
80088: IN
80089: NOT
80090: OR
80091: IFFALSE 80095
// exit ;
80093: GO 80193
// for i := 1 to 3 do
80095: LD_ADDR_VAR 0 3
80099: PUSH
80100: DOUBLE
80101: LD_INT 1
80103: DEC
80104: ST_TO_ADDR
80105: LD_INT 3
80107: PUSH
80108: FOR_TO
80109: IFFALSE 80191
// begin tmp := GetCargo ( cargo , i ) ;
80111: LD_ADDR_VAR 0 4
80115: PUSH
80116: LD_VAR 0 1
80120: PPUSH
80121: LD_VAR 0 3
80125: PPUSH
80126: CALL_OW 289
80130: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80131: LD_ADDR_VAR 0 2
80135: PUSH
80136: LD_VAR 0 2
80140: PPUSH
80141: LD_VAR 0 3
80145: PPUSH
80146: LD_VAR 0 4
80150: PPUSH
80151: CALL_OW 1
80155: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80156: LD_ADDR_VAR 0 2
80160: PUSH
80161: LD_VAR 0 2
80165: PPUSH
80166: LD_INT 4
80168: PPUSH
80169: LD_VAR 0 2
80173: PUSH
80174: LD_INT 4
80176: ARRAY
80177: PUSH
80178: LD_VAR 0 4
80182: PLUS
80183: PPUSH
80184: CALL_OW 1
80188: ST_TO_ADDR
// end ;
80189: GO 80108
80191: POP
80192: POP
// end ;
80193: LD_VAR 0 2
80197: RET
// export function Length ( array ) ; begin
80198: LD_INT 0
80200: PPUSH
// result := array + 0 ;
80201: LD_ADDR_VAR 0 2
80205: PUSH
80206: LD_VAR 0 1
80210: PUSH
80211: LD_INT 0
80213: PLUS
80214: ST_TO_ADDR
// end ;
80215: LD_VAR 0 2
80219: RET
// export function PrepareArray ( array ) ; begin
80220: LD_INT 0
80222: PPUSH
// result := array diff 0 ;
80223: LD_ADDR_VAR 0 2
80227: PUSH
80228: LD_VAR 0 1
80232: PUSH
80233: LD_INT 0
80235: DIFF
80236: ST_TO_ADDR
// if not result [ 1 ] then
80237: LD_VAR 0 2
80241: PUSH
80242: LD_INT 1
80244: ARRAY
80245: NOT
80246: IFFALSE 80266
// result := Delete ( result , 1 ) ;
80248: LD_ADDR_VAR 0 2
80252: PUSH
80253: LD_VAR 0 2
80257: PPUSH
80258: LD_INT 1
80260: PPUSH
80261: CALL_OW 3
80265: ST_TO_ADDR
// end ;
80266: LD_VAR 0 2
80270: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80271: LD_INT 0
80273: PPUSH
80274: PPUSH
80275: PPUSH
80276: PPUSH
// sibRocketRange := 25 ;
80277: LD_ADDR_VAR 0 6
80281: PUSH
80282: LD_INT 25
80284: ST_TO_ADDR
// result := false ;
80285: LD_ADDR_VAR 0 4
80289: PUSH
80290: LD_INT 0
80292: ST_TO_ADDR
// for i := 0 to 5 do
80293: LD_ADDR_VAR 0 5
80297: PUSH
80298: DOUBLE
80299: LD_INT 0
80301: DEC
80302: ST_TO_ADDR
80303: LD_INT 5
80305: PUSH
80306: FOR_TO
80307: IFFALSE 80374
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80309: LD_VAR 0 1
80313: PPUSH
80314: LD_VAR 0 5
80318: PPUSH
80319: LD_VAR 0 6
80323: PPUSH
80324: CALL_OW 272
80328: PPUSH
80329: LD_VAR 0 2
80333: PPUSH
80334: LD_VAR 0 5
80338: PPUSH
80339: LD_VAR 0 6
80343: PPUSH
80344: CALL_OW 273
80348: PPUSH
80349: LD_VAR 0 3
80353: PPUSH
80354: CALL_OW 309
80358: IFFALSE 80372
// begin result := true ;
80360: LD_ADDR_VAR 0 4
80364: PUSH
80365: LD_INT 1
80367: ST_TO_ADDR
// exit ;
80368: POP
80369: POP
80370: GO 80376
// end ;
80372: GO 80306
80374: POP
80375: POP
// end ;
80376: LD_VAR 0 4
80380: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
80381: LD_INT 0
80383: PPUSH
80384: PPUSH
80385: PPUSH
// if btype = b_depot then
80386: LD_VAR 0 2
80390: PUSH
80391: LD_INT 0
80393: EQUAL
80394: IFFALSE 80406
// begin result := true ;
80396: LD_ADDR_VAR 0 3
80400: PUSH
80401: LD_INT 1
80403: ST_TO_ADDR
// exit ;
80404: GO 80526
// end ; pom := GetBase ( depot ) ;
80406: LD_ADDR_VAR 0 4
80410: PUSH
80411: LD_VAR 0 1
80415: PPUSH
80416: CALL_OW 274
80420: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
80421: LD_ADDR_VAR 0 5
80425: PUSH
80426: LD_VAR 0 2
80430: PPUSH
80431: LD_VAR 0 1
80435: PPUSH
80436: CALL_OW 248
80440: PPUSH
80441: CALL_OW 450
80445: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
80446: LD_ADDR_VAR 0 3
80450: PUSH
80451: LD_VAR 0 4
80455: PPUSH
80456: LD_INT 1
80458: PPUSH
80459: CALL_OW 275
80463: PUSH
80464: LD_VAR 0 5
80468: PUSH
80469: LD_INT 1
80471: ARRAY
80472: GREATEREQUAL
80473: IFFALSE 80499
80475: PUSH
80476: LD_VAR 0 4
80480: PPUSH
80481: LD_INT 2
80483: PPUSH
80484: CALL_OW 275
80488: PUSH
80489: LD_VAR 0 5
80493: PUSH
80494: LD_INT 2
80496: ARRAY
80497: GREATEREQUAL
80498: AND
80499: IFFALSE 80525
80501: PUSH
80502: LD_VAR 0 4
80506: PPUSH
80507: LD_INT 3
80509: PPUSH
80510: CALL_OW 275
80514: PUSH
80515: LD_VAR 0 5
80519: PUSH
80520: LD_INT 3
80522: ARRAY
80523: GREATEREQUAL
80524: AND
80525: ST_TO_ADDR
// end ;
80526: LD_VAR 0 3
80530: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80531: LD_INT 0
80533: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80534: LD_VAR 0 1
80538: PPUSH
80539: LD_VAR 0 2
80543: PPUSH
80544: LD_INT 0
80546: PPUSH
80547: LD_INT 0
80549: PPUSH
80550: LD_INT 1
80552: PPUSH
80553: LD_INT 0
80555: PPUSH
80556: CALL_OW 587
// end ;
80560: LD_VAR 0 3
80564: RET
// export function CenterOnNow ( unit ) ; begin
80565: LD_INT 0
80567: PPUSH
// result := IsInUnit ( unit ) ;
80568: LD_ADDR_VAR 0 2
80572: PUSH
80573: LD_VAR 0 1
80577: PPUSH
80578: CALL_OW 310
80582: ST_TO_ADDR
// if not result then
80583: LD_VAR 0 2
80587: NOT
80588: IFFALSE 80600
// result := unit ;
80590: LD_ADDR_VAR 0 2
80594: PUSH
80595: LD_VAR 0 1
80599: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
80600: LD_VAR 0 1
80604: PPUSH
80605: CALL_OW 87
// end ;
80609: LD_VAR 0 2
80613: RET
// export function ComMoveHex ( unit , hex ) ; begin
80614: LD_INT 0
80616: PPUSH
// if not hex then
80617: LD_VAR 0 2
80621: NOT
80622: IFFALSE 80626
// exit ;
80624: GO 80679
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
80626: LD_VAR 0 2
80630: PUSH
80631: LD_INT 1
80633: ARRAY
80634: PPUSH
80635: LD_VAR 0 2
80639: PUSH
80640: LD_INT 2
80642: ARRAY
80643: PPUSH
80644: CALL_OW 428
80648: IFFALSE 80652
// exit ;
80650: GO 80679
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
80652: LD_VAR 0 1
80656: PPUSH
80657: LD_VAR 0 2
80661: PUSH
80662: LD_INT 1
80664: ARRAY
80665: PPUSH
80666: LD_VAR 0 2
80670: PUSH
80671: LD_INT 2
80673: ARRAY
80674: PPUSH
80675: CALL_OW 111
// end ;
80679: LD_VAR 0 3
80683: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
80684: LD_INT 0
80686: PPUSH
80687: PPUSH
80688: PPUSH
// if not unit or not enemy then
80689: LD_VAR 0 1
80693: NOT
80694: IFTRUE 80703
80696: PUSH
80697: LD_VAR 0 2
80701: NOT
80702: OR
80703: IFFALSE 80707
// exit ;
80705: GO 80833
// x := GetX ( enemy ) ;
80707: LD_ADDR_VAR 0 4
80711: PUSH
80712: LD_VAR 0 2
80716: PPUSH
80717: CALL_OW 250
80721: ST_TO_ADDR
// y := GetY ( enemy ) ;
80722: LD_ADDR_VAR 0 5
80726: PUSH
80727: LD_VAR 0 2
80731: PPUSH
80732: CALL_OW 251
80736: ST_TO_ADDR
// if ValidHex ( x , y ) then
80737: LD_VAR 0 4
80741: PPUSH
80742: LD_VAR 0 5
80746: PPUSH
80747: CALL_OW 488
80751: IFFALSE 80833
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
80753: LD_VAR 0 2
80757: PPUSH
80758: CALL_OW 247
80762: PUSH
80763: LD_INT 3
80765: PUSH
80766: LD_INT 2
80768: PUSH
80769: EMPTY
80770: LIST
80771: LIST
80772: IN
80773: IFTRUE 80796
80775: PUSH
80776: LD_VAR 0 1
80780: PPUSH
80781: CALL_OW 255
80785: PPUSH
80786: LD_VAR 0 2
80790: PPUSH
80791: CALL_OW 292
80795: OR
80796: IFFALSE 80814
// ComAttackUnit ( unit , enemy ) else
80798: LD_VAR 0 1
80802: PPUSH
80803: LD_VAR 0 2
80807: PPUSH
80808: CALL_OW 115
80812: GO 80833
// ComAgressiveMove ( unit , x , y ) ;
80814: LD_VAR 0 1
80818: PPUSH
80819: LD_VAR 0 4
80823: PPUSH
80824: LD_VAR 0 5
80828: PPUSH
80829: CALL_OW 114
// end ;
80833: LD_VAR 0 3
80837: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
80838: LD_INT 0
80840: PPUSH
80841: PPUSH
80842: PPUSH
// list := AreaToList ( area , 0 ) ;
80843: LD_ADDR_VAR 0 5
80847: PUSH
80848: LD_VAR 0 1
80852: PPUSH
80853: LD_INT 0
80855: PPUSH
80856: CALL_OW 517
80860: ST_TO_ADDR
// if not list then
80861: LD_VAR 0 5
80865: NOT
80866: IFFALSE 80870
// exit ;
80868: GO 81000
// if all then
80870: LD_VAR 0 2
80874: IFFALSE 80962
// begin for i := 1 to list [ 1 ] do
80876: LD_ADDR_VAR 0 4
80880: PUSH
80881: DOUBLE
80882: LD_INT 1
80884: DEC
80885: ST_TO_ADDR
80886: LD_VAR 0 5
80890: PUSH
80891: LD_INT 1
80893: ARRAY
80894: PUSH
80895: FOR_TO
80896: IFFALSE 80958
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
80898: LD_ADDR_VAR 0 3
80902: PUSH
80903: LD_VAR 0 3
80907: PPUSH
80908: LD_VAR 0 3
80912: PUSH
80913: LD_INT 1
80915: PLUS
80916: PPUSH
80917: LD_VAR 0 5
80921: PUSH
80922: LD_INT 1
80924: ARRAY
80925: PUSH
80926: LD_VAR 0 4
80930: ARRAY
80931: PUSH
80932: LD_VAR 0 5
80936: PUSH
80937: LD_INT 2
80939: ARRAY
80940: PUSH
80941: LD_VAR 0 4
80945: ARRAY
80946: PUSH
80947: EMPTY
80948: LIST
80949: LIST
80950: PPUSH
80951: CALL_OW 1
80955: ST_TO_ADDR
80956: GO 80895
80958: POP
80959: POP
// exit ;
80960: GO 81000
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
80962: LD_ADDR_VAR 0 3
80966: PUSH
80967: LD_VAR 0 5
80971: PUSH
80972: LD_INT 1
80974: ARRAY
80975: PUSH
80976: LD_INT 1
80978: ARRAY
80979: PUSH
80980: LD_VAR 0 5
80984: PUSH
80985: LD_INT 2
80987: ARRAY
80988: PUSH
80989: LD_INT 1
80991: ARRAY
80992: PUSH
80993: EMPTY
80994: LIST
80995: LIST
80996: PUSH
80997: EMPTY
80998: LIST
80999: ST_TO_ADDR
// end ;
81000: LD_VAR 0 3
81004: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
81005: LD_INT 0
81007: PPUSH
81008: PPUSH
// list := AreaToList ( area , 0 ) ;
81009: LD_ADDR_VAR 0 4
81013: PUSH
81014: LD_VAR 0 1
81018: PPUSH
81019: LD_INT 0
81021: PPUSH
81022: CALL_OW 517
81026: ST_TO_ADDR
// if not list then
81027: LD_VAR 0 4
81031: NOT
81032: IFFALSE 81036
// exit ;
81034: GO 81077
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
81036: LD_ADDR_VAR 0 3
81040: PUSH
81041: LD_VAR 0 4
81045: PUSH
81046: LD_INT 1
81048: ARRAY
81049: PUSH
81050: LD_INT 1
81052: ARRAY
81053: PUSH
81054: LD_VAR 0 4
81058: PUSH
81059: LD_INT 2
81061: ARRAY
81062: PUSH
81063: LD_INT 1
81065: ARRAY
81066: PUSH
81067: LD_VAR 0 2
81071: PUSH
81072: EMPTY
81073: LIST
81074: LIST
81075: LIST
81076: ST_TO_ADDR
// end ;
81077: LD_VAR 0 3
81081: RET
// export function First ( array ) ; begin
81082: LD_INT 0
81084: PPUSH
// if not array then
81085: LD_VAR 0 1
81089: NOT
81090: IFFALSE 81094
// exit ;
81092: GO 81108
// result := array [ 1 ] ;
81094: LD_ADDR_VAR 0 2
81098: PUSH
81099: LD_VAR 0 1
81103: PUSH
81104: LD_INT 1
81106: ARRAY
81107: ST_TO_ADDR
// end ;
81108: LD_VAR 0 2
81112: RET
// export function Last ( array ) ; begin
81113: LD_INT 0
81115: PPUSH
// if not array then
81116: LD_VAR 0 1
81120: NOT
81121: IFFALSE 81125
// exit ;
81123: GO 81141
// result := array [ array ] ;
81125: LD_ADDR_VAR 0 2
81129: PUSH
81130: LD_VAR 0 1
81134: PUSH
81135: LD_VAR 0 1
81139: ARRAY
81140: ST_TO_ADDR
// end ;
81141: LD_VAR 0 2
81145: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
81146: LD_INT 0
81148: PPUSH
81149: PPUSH
// result := [ ] ;
81150: LD_ADDR_VAR 0 5
81154: PUSH
81155: EMPTY
81156: ST_TO_ADDR
// if not array then
81157: LD_VAR 0 1
81161: NOT
81162: IFFALSE 81166
// exit ;
81164: GO 81278
// for i := 1 to array do
81166: LD_ADDR_VAR 0 6
81170: PUSH
81171: DOUBLE
81172: LD_INT 1
81174: DEC
81175: ST_TO_ADDR
81176: LD_VAR 0 1
81180: PUSH
81181: FOR_TO
81182: IFFALSE 81276
// if array [ i ] [ index ] = value then
81184: LD_VAR 0 1
81188: PUSH
81189: LD_VAR 0 6
81193: ARRAY
81194: PUSH
81195: LD_VAR 0 2
81199: ARRAY
81200: PUSH
81201: LD_VAR 0 3
81205: EQUAL
81206: IFFALSE 81274
// begin if indexColumn then
81208: LD_VAR 0 4
81212: IFFALSE 81248
// result := Join ( result , array [ i ] [ indexColumn ] ) else
81214: LD_ADDR_VAR 0 5
81218: PUSH
81219: LD_VAR 0 5
81223: PPUSH
81224: LD_VAR 0 1
81228: PUSH
81229: LD_VAR 0 6
81233: ARRAY
81234: PUSH
81235: LD_VAR 0 4
81239: ARRAY
81240: PPUSH
81241: CALL 76286 0 2
81245: ST_TO_ADDR
81246: GO 81274
// result := Join ( result , array [ i ] ) ;
81248: LD_ADDR_VAR 0 5
81252: PUSH
81253: LD_VAR 0 5
81257: PPUSH
81258: LD_VAR 0 1
81262: PUSH
81263: LD_VAR 0 6
81267: ARRAY
81268: PPUSH
81269: CALL 76286 0 2
81273: ST_TO_ADDR
// end ;
81274: GO 81181
81276: POP
81277: POP
// end ;
81278: LD_VAR 0 5
81282: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
81283: LD_INT 0
81285: PPUSH
// if not vehicles or not parkingPoint then
81286: LD_VAR 0 1
81290: NOT
81291: IFTRUE 81300
81293: PUSH
81294: LD_VAR 0 2
81298: NOT
81299: OR
81300: IFFALSE 81304
// exit ;
81302: GO 81402
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
81304: LD_ADDR_VAR 0 1
81308: PUSH
81309: LD_VAR 0 1
81313: PPUSH
81314: LD_INT 50
81316: PUSH
81317: EMPTY
81318: LIST
81319: PUSH
81320: LD_INT 3
81322: PUSH
81323: LD_INT 92
81325: PUSH
81326: LD_VAR 0 2
81330: PUSH
81331: LD_INT 1
81333: ARRAY
81334: PUSH
81335: LD_VAR 0 2
81339: PUSH
81340: LD_INT 2
81342: ARRAY
81343: PUSH
81344: LD_INT 8
81346: PUSH
81347: EMPTY
81348: LIST
81349: LIST
81350: LIST
81351: LIST
81352: PUSH
81353: EMPTY
81354: LIST
81355: LIST
81356: PUSH
81357: EMPTY
81358: LIST
81359: LIST
81360: PPUSH
81361: CALL_OW 72
81365: ST_TO_ADDR
// if not vehicles then
81366: LD_VAR 0 1
81370: NOT
81371: IFFALSE 81375
// exit ;
81373: GO 81402
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
81375: LD_VAR 0 1
81379: PPUSH
81380: LD_VAR 0 2
81384: PUSH
81385: LD_INT 1
81387: ARRAY
81388: PPUSH
81389: LD_VAR 0 2
81393: PUSH
81394: LD_INT 2
81396: ARRAY
81397: PPUSH
81398: CALL_OW 111
// end ;
81402: LD_VAR 0 3
81406: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
81407: LD_INT 0
81409: PPUSH
81410: PPUSH
81411: PPUSH
// if not side or not area then
81412: LD_VAR 0 1
81416: NOT
81417: IFTRUE 81426
81419: PUSH
81420: LD_VAR 0 2
81424: NOT
81425: OR
81426: IFFALSE 81430
// exit ;
81428: GO 81549
// tmp := AreaToList ( area , 0 ) ;
81430: LD_ADDR_VAR 0 5
81434: PUSH
81435: LD_VAR 0 2
81439: PPUSH
81440: LD_INT 0
81442: PPUSH
81443: CALL_OW 517
81447: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
81448: LD_ADDR_VAR 0 4
81452: PUSH
81453: DOUBLE
81454: LD_INT 1
81456: DEC
81457: ST_TO_ADDR
81458: LD_VAR 0 5
81462: PUSH
81463: LD_INT 1
81465: ARRAY
81466: PUSH
81467: FOR_TO
81468: IFFALSE 81547
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
81470: LD_VAR 0 5
81474: PUSH
81475: LD_INT 1
81477: ARRAY
81478: PUSH
81479: LD_VAR 0 4
81483: ARRAY
81484: PPUSH
81485: LD_VAR 0 5
81489: PUSH
81490: LD_INT 2
81492: ARRAY
81493: PUSH
81494: LD_VAR 0 4
81498: ARRAY
81499: PPUSH
81500: CALL_OW 351
81504: IFFALSE 81545
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
81506: LD_VAR 0 5
81510: PUSH
81511: LD_INT 1
81513: ARRAY
81514: PUSH
81515: LD_VAR 0 4
81519: ARRAY
81520: PPUSH
81521: LD_VAR 0 5
81525: PUSH
81526: LD_INT 2
81528: ARRAY
81529: PUSH
81530: LD_VAR 0 4
81534: ARRAY
81535: PPUSH
81536: LD_VAR 0 1
81540: PPUSH
81541: CALL_OW 244
// end ;
81545: GO 81467
81547: POP
81548: POP
// end ;
81549: LD_VAR 0 3
81553: RET
// export function UniqueArray ( array ) ; var i ; begin
81554: LD_INT 0
81556: PPUSH
81557: PPUSH
// result := [ ] ;
81558: LD_ADDR_VAR 0 2
81562: PUSH
81563: EMPTY
81564: ST_TO_ADDR
// if not array then
81565: LD_VAR 0 1
81569: NOT
81570: IFFALSE 81574
// exit ;
81572: GO 81635
// for i := 1 to array do
81574: LD_ADDR_VAR 0 3
81578: PUSH
81579: DOUBLE
81580: LD_INT 1
81582: DEC
81583: ST_TO_ADDR
81584: LD_VAR 0 1
81588: PUSH
81589: FOR_TO
81590: IFFALSE 81633
// if not array [ i ] in result then
81592: LD_VAR 0 1
81596: PUSH
81597: LD_VAR 0 3
81601: ARRAY
81602: PUSH
81603: LD_VAR 0 2
81607: IN
81608: NOT
81609: IFFALSE 81631
// result := Join ( result , i ) ;
81611: LD_ADDR_VAR 0 2
81615: PUSH
81616: LD_VAR 0 2
81620: PPUSH
81621: LD_VAR 0 3
81625: PPUSH
81626: CALL 76286 0 2
81630: ST_TO_ADDR
81631: GO 81589
81633: POP
81634: POP
// end ; end_of_file
81635: LD_VAR 0 2
81639: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81640: LD_VAR 0 1
81644: PUSH
81645: LD_INT 200
81647: DOUBLE
81648: GREATEREQUAL
81649: IFFALSE 81657
81651: LD_INT 299
81653: DOUBLE
81654: LESSEQUAL
81655: IFTRUE 81659
81657: GO 81691
81659: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81660: LD_VAR 0 1
81664: PPUSH
81665: LD_VAR 0 2
81669: PPUSH
81670: LD_VAR 0 3
81674: PPUSH
81675: LD_VAR 0 4
81679: PPUSH
81680: LD_VAR 0 5
81684: PPUSH
81685: CALL 32596 0 5
81689: GO 81768
81691: LD_INT 300
81693: DOUBLE
81694: GREATEREQUAL
81695: IFFALSE 81703
81697: LD_INT 399
81699: DOUBLE
81700: LESSEQUAL
81701: IFTRUE 81705
81703: GO 81767
81705: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81706: LD_VAR 0 1
81710: PPUSH
81711: LD_VAR 0 2
81715: PPUSH
81716: LD_VAR 0 3
81720: PPUSH
81721: LD_VAR 0 4
81725: PPUSH
81726: LD_VAR 0 5
81730: PPUSH
81731: LD_VAR 0 6
81735: PPUSH
81736: LD_VAR 0 7
81740: PPUSH
81741: LD_VAR 0 8
81745: PPUSH
81746: LD_VAR 0 9
81750: PPUSH
81751: LD_VAR 0 10
81755: PPUSH
81756: LD_VAR 0 11
81760: PPUSH
81761: CALL 28480 0 11
81765: GO 81768
81767: POP
// end ;
81768: PPOPN 11
81770: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81771: LD_VAR 0 1
81775: PPUSH
81776: LD_VAR 0 2
81780: PPUSH
81781: LD_VAR 0 3
81785: PPUSH
81786: LD_VAR 0 4
81790: PPUSH
81791: LD_VAR 0 5
81795: PPUSH
81796: CALL 31977 0 5
// end ; end_of_file
81800: PPOPN 5
81802: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81803: LD_VAR 0 1
81807: PPUSH
81808: LD_VAR 0 2
81812: PPUSH
81813: LD_VAR 0 3
81817: PPUSH
81818: LD_VAR 0 4
81822: PPUSH
81823: LD_VAR 0 5
81827: PPUSH
81828: LD_VAR 0 6
81832: PPUSH
81833: CALL 16020 0 6
// end ;
81837: PPOPN 6
81839: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81840: LD_INT 0
81842: PPUSH
// begin if not units then
81843: LD_VAR 0 1
81847: NOT
81848: IFFALSE 81852
// exit ;
81850: GO 81886
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
81852: LD_VAR 0 1
81856: PPUSH
81857: LD_VAR 0 2
81861: PPUSH
81862: LD_VAR 0 3
81866: PPUSH
81867: LD_VAR 0 4
81871: PPUSH
81872: LD_VAR 0 5
81876: PPUSH
81877: LD_VAR 0 6
81881: PPUSH
81882: CALL 38103 0 6
// end ;
81886: PPOPN 7
81888: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81889: CALL 15907 0 0
// end ;
81893: PPOPN 1
81895: END
