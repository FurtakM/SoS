// starting begin isTest := true ;
   0: LD_ADDR_EXP 1
   4: PUSH
   5: LD_INT 1
   7: ST_TO_ADDR
// mission_name := TwoFronts ;
   8: LD_ADDR_OWVAR 68
  12: PUSH
  13: LD_STRING TwoFronts
  15: ST_TO_ADDR
// mission_number := 6 ;
  16: LD_ADDR_OWVAR 70
  20: PUSH
  21: LD_INT 6
  23: ST_TO_ADDR
// RandomizeAll ;
  24: CALL_OW 11
// ResetFog ;
  28: CALL_OW 335
// FogOff ( isTest ) ;
  32: LD_EXP 1
  36: PPUSH
  37: CALL_OW 344
// InitGlobalVar ;
  41: CALL 58 0 0
// InitAction ;
  45: CALL 4376 0 0
// PrepareAmericans ;
  49: CALL 114 0 0
// Action ;
  53: CALL 4626 0 0
// end ;
  57: END
// export isTest , callUsed ; export Jakes , Sylvia ; export dialogTrans , playerLoss ; export call , alfaNorthTriggered , alfaSouthTriggered ; function InitGlobalVar ; begin
  58: LD_INT 0
  60: PPUSH
// dialogTrans := true ;
  61: LD_ADDR_EXP 5
  65: PUSH
  66: LD_INT 1
  68: ST_TO_ADDR
// call := true ;
  69: LD_ADDR_EXP 7
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// alfaNorthTriggered := false ;
  77: LD_ADDR_EXP 8
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// alfaSouthTriggered := false ;
  85: LD_ADDR_EXP 9
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// playerLoss := 0 ;
  93: LD_ADDR_EXP 6
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// callUsed := false ;
 101: LD_ADDR_EXP 2
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// end ; end_of_file
 109: LD_VAR 0 1
 113: RET
// export usForces1 , usForces2 , usVehicles1 , usVehicles2 , usTechs1 , usTechs2 , usConstructList1 , usConstructList2 , usBuildingsToBuild1 , usBuildingsToBuild2 , usAttackVehicles1 , usAttackVehicles2 ; export function PrepareAmericans ; begin
 114: LD_INT 0
 116: PPUSH
// usForces1 := PrepareSquad ( 1 , 1 , americanBaseNorthArea , sylvia , [ 4 , 6 , 8 ] [ Difficulty ] , [ 21 , 22 , 24 ] [ Difficulty ] ) ;
 117: LD_ADDR_EXP 10
 121: PUSH
 122: LD_INT 1
 124: PPUSH
 125: LD_INT 1
 127: PPUSH
 128: LD_INT 10
 130: PPUSH
 131: LD_STRING sylvia
 133: PPUSH
 134: LD_INT 4
 136: PUSH
 137: LD_INT 6
 139: PUSH
 140: LD_INT 8
 142: PUSH
 143: EMPTY
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_OWVAR 67
 152: ARRAY
 153: PPUSH
 154: LD_INT 21
 156: PUSH
 157: LD_INT 22
 159: PUSH
 160: LD_INT 24
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: LIST
 167: PUSH
 168: LD_OWVAR 67
 172: ARRAY
 173: PPUSH
 174: CALL 372 0 6
 178: ST_TO_ADDR
// usForces2 := PrepareSquad ( 4 , 1 , americanBaseSouthArea , jakes , [ 4 , 6 , 8 ] [ Difficulty ] , [ 21 , 22 , 24 ] [ Difficulty ] ) ;
 179: LD_ADDR_EXP 11
 183: PUSH
 184: LD_INT 4
 186: PPUSH
 187: LD_INT 1
 189: PPUSH
 190: LD_INT 11
 192: PPUSH
 193: LD_STRING jakes
 195: PPUSH
 196: LD_INT 4
 198: PUSH
 199: LD_INT 6
 201: PUSH
 202: LD_INT 8
 204: PUSH
 205: EMPTY
 206: LIST
 207: LIST
 208: LIST
 209: PUSH
 210: LD_OWVAR 67
 214: ARRAY
 215: PPUSH
 216: LD_INT 21
 218: PUSH
 219: LD_INT 22
 221: PUSH
 222: LD_INT 24
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: LIST
 229: PUSH
 230: LD_OWVAR 67
 234: ARRAY
 235: PPUSH
 236: CALL 372 0 6
 240: ST_TO_ADDR
// usVehicles1 := [ ] ;
 241: LD_ADDR_EXP 12
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// usTechs1 := GetTechNation ( 1 , nation_american , state_enabled ) ;
 248: LD_ADDR_EXP 14
 252: PUSH
 253: LD_INT 1
 255: PPUSH
 256: LD_INT 1
 258: PPUSH
 259: LD_INT 1
 261: PPUSH
 262: CALL 33990 0 3
 266: ST_TO_ADDR
// usConstructList1 := [ ] ;
 267: LD_ADDR_EXP 16
 271: PUSH
 272: EMPTY
 273: ST_TO_ADDR
// usAttackVehicles1 := [ ] ;
 274: LD_ADDR_EXP 20
 278: PUSH
 279: EMPTY
 280: ST_TO_ADDR
// usVehicles2 := [ ] ;
 281: LD_ADDR_EXP 13
 285: PUSH
 286: EMPTY
 287: ST_TO_ADDR
// usTechs2 := GetTechNation ( 4 , nation_american , state_enabled ) ;
 288: LD_ADDR_EXP 15
 292: PUSH
 293: LD_INT 4
 295: PPUSH
 296: LD_INT 1
 298: PPUSH
 299: LD_INT 1
 301: PPUSH
 302: CALL 33990 0 3
 306: ST_TO_ADDR
// usConstructList2 := [ ] ;
 307: LD_ADDR_EXP 17
 311: PUSH
 312: EMPTY
 313: ST_TO_ADDR
// usAttackVehicles2 := [ ] ;
 314: LD_ADDR_EXP 21
 318: PUSH
 319: EMPTY
 320: ST_TO_ADDR
// if Difficulty > 1 then
 321: LD_OWVAR 67
 325: PUSH
 326: LD_INT 1
 328: GREATER
 329: IFFALSE 344
// SetTech ( tech_comp2 , 8 , state_researched ) ;
 331: LD_INT 58
 333: PPUSH
 334: LD_INT 8
 336: PPUSH
 337: LD_INT 2
 339: PPUSH
 340: CALL_OW 322
// if Difficulty > 2 then
 344: LD_OWVAR 67
 348: PUSH
 349: LD_INT 2
 351: GREATER
 352: IFFALSE 367
// SetTech ( tech_comp3 , 8 , state_researched ) ;
 354: LD_INT 59
 356: PPUSH
 357: LD_INT 8
 359: PPUSH
 360: LD_INT 2
 362: PPUSH
 363: CALL_OW 322
// end ;
 367: LD_VAR 0 1
 371: RET
// export function PrepareSquad ( side , nat , area , commander , skill , num ) ; var i , un , team , tmp ; begin
 372: LD_INT 0
 374: PPUSH
 375: PPUSH
 376: PPUSH
 377: PPUSH
 378: PPUSH
// uc_side := side ;
 379: LD_ADDR_OWVAR 20
 383: PUSH
 384: LD_VAR 0 1
 388: ST_TO_ADDR
// uc_nation := nat ;
 389: LD_ADDR_OWVAR 21
 393: PUSH
 394: LD_VAR 0 2
 398: ST_TO_ADDR
// team := [ ] ;
 399: LD_ADDR_VAR 0 10
 403: PUSH
 404: EMPTY
 405: ST_TO_ADDR
// hc_importance := 100 ;
 406: LD_ADDR_OWVAR 32
 410: PUSH
 411: LD_INT 100
 413: ST_TO_ADDR
// case commander of jakes :
 414: LD_VAR 0 4
 418: PUSH
 419: LD_STRING jakes
 421: DOUBLE
 422: EQUAL
 423: IFTRUE 427
 425: GO 499
 427: POP
// begin PrepareHuman ( sex_male , class_soldier , skill ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 1
 433: PPUSH
 434: LD_VAR 0 5
 438: PPUSH
 439: CALL_OW 380
// hc_gallery := pkremaster ;
 443: LD_ADDR_OWVAR 33
 447: PUSH
 448: LD_STRING pkremaster
 450: ST_TO_ADDR
// hc_face_number := 12 ;
 451: LD_ADDR_OWVAR 34
 455: PUSH
 456: LD_INT 12
 458: ST_TO_ADDR
// hc_name := Jan van Jakes ;
 459: LD_ADDR_OWVAR 26
 463: PUSH
 464: LD_STRING Jan van Jakes
 466: ST_TO_ADDR
// Jakes := CreateHuman ;
 467: LD_ADDR_EXP 3
 471: PUSH
 472: CALL_OW 44
 476: ST_TO_ADDR
// team := Join ( team , Jakes ) ;
 477: LD_ADDR_VAR 0 10
 481: PUSH
 482: LD_VAR 0 10
 486: PPUSH
 487: LD_EXP 3
 491: PPUSH
 492: CALL 71779 0 2
 496: ST_TO_ADDR
// end ; sylvia :
 497: GO 580
 499: LD_STRING sylvia
 501: DOUBLE
 502: EQUAL
 503: IFTRUE 507
 505: GO 579
 507: POP
// begin PrepareHuman ( sex_female , class_soldier , skill ) ;
 508: LD_INT 2
 510: PPUSH
 511: LD_INT 1
 513: PPUSH
 514: LD_VAR 0 5
 518: PPUSH
 519: CALL_OW 380
// hc_gallery := pkremaster ;
 523: LD_ADDR_OWVAR 33
 527: PUSH
 528: LD_STRING pkremaster
 530: ST_TO_ADDR
// hc_face_number := 13 ;
 531: LD_ADDR_OWVAR 34
 535: PUSH
 536: LD_INT 13
 538: ST_TO_ADDR
// hc_name := Sylvia Johnson ;
 539: LD_ADDR_OWVAR 26
 543: PUSH
 544: LD_STRING Sylvia Johnson
 546: ST_TO_ADDR
// Sylvia := CreateHuman ;
 547: LD_ADDR_EXP 4
 551: PUSH
 552: CALL_OW 44
 556: ST_TO_ADDR
// team := Join ( team , Sylvia ) ;
 557: LD_ADDR_VAR 0 10
 561: PUSH
 562: LD_VAR 0 10
 566: PPUSH
 567: LD_EXP 4
 571: PPUSH
 572: CALL 71779 0 2
 576: ST_TO_ADDR
// end ; end ;
 577: GO 580
 579: POP
// InitHC_All ( ) ;
 580: CALL_OW 584
// for i := 1 to num do
 584: LD_ADDR_VAR 0 8
 588: PUSH
 589: DOUBLE
 590: LD_INT 1
 592: DEC
 593: ST_TO_ADDR
 594: LD_VAR 0 6
 598: PUSH
 599: FOR_TO
 600: IFFALSE 655
// begin PrepareHuman ( false , ( i mod 4 ) + 1 , skill ) ;
 602: LD_INT 0
 604: PPUSH
 605: LD_VAR 0 8
 609: PUSH
 610: LD_INT 4
 612: MOD
 613: PUSH
 614: LD_INT 1
 616: PLUS
 617: PPUSH
 618: LD_VAR 0 5
 622: PPUSH
 623: CALL_OW 380
// un := CreateHuman ;
 627: LD_ADDR_VAR 0 9
 631: PUSH
 632: CALL_OW 44
 636: ST_TO_ADDR
// team := team ^ un ;
 637: LD_ADDR_VAR 0 10
 641: PUSH
 642: LD_VAR 0 10
 646: PUSH
 647: LD_VAR 0 9
 651: ADD
 652: ST_TO_ADDR
// end ;
 653: GO 599
 655: POP
 656: POP
// for i := 1 to 5 do
 657: LD_ADDR_VAR 0 8
 661: PUSH
 662: DOUBLE
 663: LD_INT 1
 665: DEC
 666: ST_TO_ADDR
 667: LD_INT 5
 669: PUSH
 670: FOR_TO
 671: IFFALSE 713
// begin PrepareSoldier ( false , skill ) ;
 673: LD_INT 0
 675: PPUSH
 676: LD_VAR 0 5
 680: PPUSH
 681: CALL_OW 381
// un := CreateHuman ;
 685: LD_ADDR_VAR 0 9
 689: PUSH
 690: CALL_OW 44
 694: ST_TO_ADDR
// team := team ^ un ;
 695: LD_ADDR_VAR 0 10
 699: PUSH
 700: LD_VAR 0 10
 704: PUSH
 705: LD_VAR 0 9
 709: ADD
 710: ST_TO_ADDR
// end ;
 711: GO 670
 713: POP
 714: POP
// for i in team do
 715: LD_ADDR_VAR 0 8
 719: PUSH
 720: LD_VAR 0 10
 724: PUSH
 725: FOR_IN
 726: IFFALSE 1064
// begin case GetClass ( i ) of class_soldier :
 728: LD_VAR 0 8
 732: PPUSH
 733: CALL_OW 257
 737: PUSH
 738: LD_INT 1
 740: DOUBLE
 741: EQUAL
 742: IFTRUE 746
 744: GO 799
 746: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_full ] ] , [ f_btype , b_barracks ] ] ) ; class_engineer :
 747: LD_ADDR_VAR 0 11
 751: PUSH
 752: LD_INT 22
 754: PUSH
 755: LD_VAR 0 1
 759: PUSH
 760: EMPTY
 761: LIST
 762: LIST
 763: PUSH
 764: LD_INT 3
 766: PUSH
 767: LD_INT 62
 769: PUSH
 770: EMPTY
 771: LIST
 772: PUSH
 773: EMPTY
 774: LIST
 775: LIST
 776: PUSH
 777: LD_INT 30
 779: PUSH
 780: LD_INT 5
 782: PUSH
 783: EMPTY
 784: LIST
 785: LIST
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: LIST
 791: PPUSH
 792: CALL_OW 69
 796: ST_TO_ADDR
 797: GO 1019
 799: LD_INT 2
 801: DOUBLE
 802: EQUAL
 803: IFTRUE 807
 805: GO 878
 807: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; class_scientistic :
 808: LD_ADDR_VAR 0 11
 812: PUSH
 813: LD_INT 22
 815: PUSH
 816: LD_VAR 0 1
 820: PUSH
 821: EMPTY
 822: LIST
 823: LIST
 824: PUSH
 825: LD_INT 3
 827: PUSH
 828: LD_INT 62
 830: PUSH
 831: EMPTY
 832: LIST
 833: PUSH
 834: EMPTY
 835: LIST
 836: LIST
 837: PUSH
 838: LD_INT 2
 840: PUSH
 841: LD_INT 30
 843: PUSH
 844: LD_INT 0
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: LD_INT 30
 853: PUSH
 854: LD_INT 1
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: LIST
 865: PUSH
 866: EMPTY
 867: LIST
 868: LIST
 869: LIST
 870: PPUSH
 871: CALL_OW 69
 875: ST_TO_ADDR
 876: GO 1019
 878: LD_INT 4
 880: DOUBLE
 881: EQUAL
 882: IFTRUE 886
 884: GO 957
 886: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) ; class_mechanic :
 887: LD_ADDR_VAR 0 11
 891: PUSH
 892: LD_INT 22
 894: PUSH
 895: LD_VAR 0 1
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 3
 906: PUSH
 907: LD_INT 62
 909: PUSH
 910: EMPTY
 911: LIST
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: PUSH
 917: LD_INT 2
 919: PUSH
 920: LD_INT 30
 922: PUSH
 923: LD_INT 6
 925: PUSH
 926: EMPTY
 927: LIST
 928: LIST
 929: PUSH
 930: LD_INT 30
 932: PUSH
 933: LD_INT 8
 935: PUSH
 936: EMPTY
 937: LIST
 938: LIST
 939: PUSH
 940: EMPTY
 941: LIST
 942: LIST
 943: LIST
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: LIST
 949: PPUSH
 950: CALL_OW 69
 954: ST_TO_ADDR
 955: GO 1019
 957: LD_INT 3
 959: DOUBLE
 960: EQUAL
 961: IFTRUE 965
 963: GO 1018
 965: POP
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_full ] ] , [ f_btype , b_factory ] ] ) ; end ;
 966: LD_ADDR_VAR 0 11
 970: PUSH
 971: LD_INT 22
 973: PUSH
 974: LD_VAR 0 1
 978: PUSH
 979: EMPTY
 980: LIST
 981: LIST
 982: PUSH
 983: LD_INT 3
 985: PUSH
 986: LD_INT 62
 988: PUSH
 989: EMPTY
 990: LIST
 991: PUSH
 992: EMPTY
 993: LIST
 994: LIST
 995: PUSH
 996: LD_INT 30
 998: PUSH
 999: LD_INT 3
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: LIST
1010: PPUSH
1011: CALL_OW 69
1015: ST_TO_ADDR
1016: GO 1019
1018: POP
// if tmp then
1019: LD_VAR 0 11
1023: IFFALSE 1045
// PlaceHumanInUnit ( i , tmp [ 1 ] ) else
1025: LD_VAR 0 8
1029: PPUSH
1030: LD_VAR 0 11
1034: PUSH
1035: LD_INT 1
1037: ARRAY
1038: PPUSH
1039: CALL_OW 52
1043: GO 1062
// PlaceUnitArea ( i , area , false ) ;
1045: LD_VAR 0 8
1049: PPUSH
1050: LD_VAR 0 3
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL_OW 49
// end ;
1062: GO 725
1064: POP
1065: POP
// result := team diff 0 ;
1066: LD_ADDR_VAR 0 7
1070: PUSH
1071: LD_VAR 0 10
1075: PUSH
1076: LD_INT 0
1078: DIFF
1079: ST_TO_ADDR
// end ;
1080: LD_VAR 0 7
1084: RET
// export function PrepareAlfaAttack ( area , n ) ; var i , un , ch ; begin
1085: LD_INT 0
1087: PPUSH
1088: PPUSH
1089: PPUSH
1090: PPUSH
// result := [ ] ;
1091: LD_ADDR_VAR 0 3
1095: PUSH
1096: EMPTY
1097: ST_TO_ADDR
// for i := 1 to n do
1098: LD_ADDR_VAR 0 4
1102: PUSH
1103: DOUBLE
1104: LD_INT 1
1106: DEC
1107: ST_TO_ADDR
1108: LD_VAR 0 2
1112: PUSH
1113: FOR_TO
1114: IFFALSE 1436
// begin uc_side := 8 ;
1116: LD_ADDR_OWVAR 20
1120: PUSH
1121: LD_INT 8
1123: ST_TO_ADDR
// uc_nation := 1 ;
1124: LD_ADDR_OWVAR 21
1128: PUSH
1129: LD_INT 1
1131: ST_TO_ADDR
// ch := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ rand ( 1 , Difficulty ) ] ;
1132: LD_ADDR_VAR 0 6
1136: PUSH
1137: LD_INT 3
1139: PUSH
1140: LD_INT 4
1142: PUSH
1143: LD_INT 4
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: LD_INT 1
1153: PPUSH
1154: LD_OWVAR 67
1158: PPUSH
1159: CALL_OW 12
1163: ARRAY
1164: ST_TO_ADDR
// vc_chassis := ch ;
1165: LD_ADDR_OWVAR 37
1169: PUSH
1170: LD_VAR 0 6
1174: ST_TO_ADDR
// vc_control := control_computer ;
1175: LD_ADDR_OWVAR 38
1179: PUSH
1180: LD_INT 3
1182: ST_TO_ADDR
// vc_engine := engine_combustion ;
1183: LD_ADDR_OWVAR 39
1187: PUSH
1188: LD_INT 1
1190: ST_TO_ADDR
// if tick < [ 14 14$00 , 12 12$00 , 10 10$00 ] [ Difficulty ] then
1191: LD_OWVAR 1
1195: PUSH
1196: LD_INT 29400
1198: PUSH
1199: LD_INT 25200
1201: PUSH
1202: LD_INT 21000
1204: PUSH
1205: EMPTY
1206: LIST
1207: LIST
1208: LIST
1209: PUSH
1210: LD_OWVAR 67
1214: ARRAY
1215: LESS
1216: IFFALSE 1247
// vc_weapon := [ us_light_gun , us_double_gun ] [ rand ( 1 , 2 ) ] else
1218: LD_ADDR_OWVAR 40
1222: PUSH
1223: LD_INT 3
1225: PUSH
1226: LD_INT 5
1228: PUSH
1229: EMPTY
1230: LIST
1231: LIST
1232: PUSH
1233: LD_INT 1
1235: PPUSH
1236: LD_INT 2
1238: PPUSH
1239: CALL_OW 12
1243: ARRAY
1244: ST_TO_ADDR
1245: GO 1343
// if ch = us_medium_tracked then
1247: LD_VAR 0 6
1251: PUSH
1252: LD_INT 3
1254: EQUAL
1255: IFFALSE 1302
// vc_weapon := [ us_light_gun , us_gatling_gun , us_double_gun , us_rocket_launcher ] [ rand ( Difficulty , Difficulty + 1 ) ] else
1257: LD_ADDR_OWVAR 40
1261: PUSH
1262: LD_INT 3
1264: PUSH
1265: LD_INT 4
1267: PUSH
1268: LD_INT 5
1270: PUSH
1271: LD_INT 7
1273: PUSH
1274: EMPTY
1275: LIST
1276: LIST
1277: LIST
1278: LIST
1279: PUSH
1280: LD_OWVAR 67
1284: PPUSH
1285: LD_OWVAR 67
1289: PUSH
1290: LD_INT 1
1292: PLUS
1293: PPUSH
1294: CALL_OW 12
1298: ARRAY
1299: ST_TO_ADDR
1300: GO 1343
// vc_weapon := [ us_double_gun , us_heavy_gun , us_rocket_launcher , us_rocket_launcher ] [ rand ( 1 , Difficulty + 1 ) ] ;
1302: LD_ADDR_OWVAR 40
1306: PUSH
1307: LD_INT 5
1309: PUSH
1310: LD_INT 6
1312: PUSH
1313: LD_INT 7
1315: PUSH
1316: LD_INT 7
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: PUSH
1325: LD_INT 1
1327: PPUSH
1328: LD_OWVAR 67
1332: PUSH
1333: LD_INT 1
1335: PLUS
1336: PPUSH
1337: CALL_OW 12
1341: ARRAY
1342: ST_TO_ADDR
// vc_fuel_battery := 70 ;
1343: LD_ADDR_OWVAR 41
1347: PUSH
1348: LD_INT 70
1350: ST_TO_ADDR
// un := CreateVehicle ;
1351: LD_ADDR_VAR 0 5
1355: PUSH
1356: CALL_OW 45
1360: ST_TO_ADDR
// SetDir ( un , 2 ) ;
1361: LD_VAR 0 5
1365: PPUSH
1366: LD_INT 2
1368: PPUSH
1369: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
1373: LD_INT 35
1375: PPUSH
1376: CALL_OW 67
// until PlaceUnitArea ( un , area , false ) ;
1380: LD_VAR 0 5
1384: PPUSH
1385: LD_VAR 0 1
1389: PPUSH
1390: LD_INT 0
1392: PPUSH
1393: CALL_OW 49
1397: IFFALSE 1373
// result := Join ( result , un ) ;
1399: LD_ADDR_VAR 0 3
1403: PUSH
1404: LD_VAR 0 3
1408: PPUSH
1409: LD_VAR 0 5
1413: PPUSH
1414: CALL 71779 0 2
1418: ST_TO_ADDR
// ComMoveXY ( un , 65 , 9 ) ;
1419: LD_VAR 0 5
1423: PPUSH
1424: LD_INT 65
1426: PPUSH
1427: LD_INT 9
1429: PPUSH
1430: CALL_OW 111
// end ;
1434: GO 1113
1436: POP
1437: POP
// if Prob ( [ 90 , 80 , 70 ] [ Difficulty ] ) then
1438: LD_INT 90
1440: PUSH
1441: LD_INT 80
1443: PUSH
1444: LD_INT 70
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: LIST
1451: PUSH
1452: LD_OWVAR 67
1456: ARRAY
1457: PPUSH
1458: CALL_OW 13
1462: IFFALSE 1608
// begin uc_side := 8 ;
1464: LD_ADDR_OWVAR 20
1468: PUSH
1469: LD_INT 8
1471: ST_TO_ADDR
// uc_nation := 1 ;
1472: LD_ADDR_OWVAR 21
1476: PUSH
1477: LD_INT 1
1479: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
1480: LD_ADDR_OWVAR 37
1484: PUSH
1485: LD_INT 4
1487: ST_TO_ADDR
// vc_control := control_computer ;
1488: LD_ADDR_OWVAR 38
1492: PUSH
1493: LD_INT 3
1495: ST_TO_ADDR
// vc_engine := engine_combustion ;
1496: LD_ADDR_OWVAR 39
1500: PUSH
1501: LD_INT 1
1503: ST_TO_ADDR
// vc_weapon := us_bulldozer ;
1504: LD_ADDR_OWVAR 40
1508: PUSH
1509: LD_INT 14
1511: ST_TO_ADDR
// vc_fuel_battery := 70 ;
1512: LD_ADDR_OWVAR 41
1516: PUSH
1517: LD_INT 70
1519: ST_TO_ADDR
// un := CreateVehicle ;
1520: LD_ADDR_VAR 0 5
1524: PUSH
1525: CALL_OW 45
1529: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1530: LD_INT 35
1532: PPUSH
1533: CALL_OW 67
// until PlaceUnitArea ( un , area , false ) ;
1537: LD_VAR 0 5
1541: PPUSH
1542: LD_VAR 0 1
1546: PPUSH
1547: LD_INT 0
1549: PPUSH
1550: CALL_OW 49
1554: IFFALSE 1530
// ComMoveXY ( un , 65 , 9 ) ;
1556: LD_VAR 0 5
1560: PPUSH
1561: LD_INT 65
1563: PPUSH
1564: LD_INT 9
1566: PPUSH
1567: CALL_OW 111
// wait ( 0 0$02 ) ;
1571: LD_INT 70
1573: PPUSH
1574: CALL_OW 67
// CutTreeXYR ( un , 104 , 65 , 12 ) ;
1578: LD_VAR 0 5
1582: PPUSH
1583: LD_INT 104
1585: PPUSH
1586: LD_INT 65
1588: PPUSH
1589: LD_INT 12
1591: PPUSH
1592: CALL 29644 0 4
// AddComAttackUnit ( un , playerDepot ) ;
1596: LD_VAR 0 5
1600: PPUSH
1601: LD_INT 1
1603: PPUSH
1604: CALL_OW 175
// end ; repeat wait ( 0 0$1 ) ;
1608: LD_INT 35
1610: PPUSH
1611: CALL_OW 67
// result := UnitFilter ( result , [ f_ok ] ) ;
1615: LD_ADDR_VAR 0 3
1619: PUSH
1620: LD_VAR 0 3
1624: PPUSH
1625: LD_INT 50
1627: PUSH
1628: EMPTY
1629: LIST
1630: PPUSH
1631: CALL_OW 72
1635: ST_TO_ADDR
// AgressiveMove ( result , [ [ 82 , 14 ] , [ 83 , 39 ] , [ 89 , 51 ] , [ 91 , 58 ] ] ) ;
1636: LD_VAR 0 3
1640: PPUSH
1641: LD_INT 82
1643: PUSH
1644: LD_INT 14
1646: PUSH
1647: EMPTY
1648: LIST
1649: LIST
1650: PUSH
1651: LD_INT 83
1653: PUSH
1654: LD_INT 39
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PUSH
1661: LD_INT 89
1663: PUSH
1664: LD_INT 51
1666: PUSH
1667: EMPTY
1668: LIST
1669: LIST
1670: PUSH
1671: LD_INT 91
1673: PUSH
1674: LD_INT 58
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: PPUSH
1687: CALL 74523 0 2
// until not result ;
1691: LD_VAR 0 3
1695: NOT
1696: IFFALSE 1608
// end ;
1698: LD_VAR 0 3
1702: RET
// every 0 0$1 trigger FilterAllUnits ( [ f_side , 1 ] ) do
1703: LD_INT 22
1705: PUSH
1706: LD_INT 1
1708: PUSH
1709: EMPTY
1710: LIST
1711: LIST
1712: PPUSH
1713: CALL_OW 69
1717: IFFALSE 1789
1719: GO 1721
1721: DISABLE
// begin enable ;
1722: ENABLE
// BaseScript ( 1 , americanBaseNorthArea , americanBaseNorthArea , americanBaseNorthInnerArea , americanBaseNorthOuterArea , usForces1 , usVehicles1 , usTechs1 , usConstructList1 , usBuildingsToBuild1 , [ 19 , 9 ] , [ 40 , 5 ] , [ ] ) ;
1723: LD_INT 1
1725: PPUSH
1726: LD_INT 10
1728: PPUSH
1729: LD_INT 10
1731: PPUSH
1732: LD_INT 13
1734: PPUSH
1735: LD_INT 12
1737: PPUSH
1738: LD_EXP 10
1742: PPUSH
1743: LD_EXP 12
1747: PPUSH
1748: LD_EXP 14
1752: PPUSH
1753: LD_EXP 16
1757: PPUSH
1758: LD_EXP 18
1762: PPUSH
1763: LD_INT 19
1765: PUSH
1766: LD_INT 9
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: PPUSH
1773: LD_INT 40
1775: PUSH
1776: LD_INT 5
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: PPUSH
1783: EMPTY
1784: PPUSH
1785: CALL 6969 0 13
// end ;
1789: END
// every 0 0$1 trigger FilterAllUnits ( [ f_side , 4 ] ) do
1790: LD_INT 22
1792: PUSH
1793: LD_INT 4
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: PPUSH
1800: CALL_OW 69
1804: IFFALSE 1876
1806: GO 1808
1808: DISABLE
// begin enable ;
1809: ENABLE
// BaseScript ( 4 , americanBaseSouthArea , americanBaseSouthArea , americanBaseSouthInnerArea , americanBaseSouthOuterArea , usForces2 , usVehicles2 , usTechs2 , usConstructList2 , usBuildingsToBuild2 , [ 83 , 151 ] , [ 92 , 144 ] , [ ] ) ;
1810: LD_INT 4
1812: PPUSH
1813: LD_INT 11
1815: PPUSH
1816: LD_INT 11
1818: PPUSH
1819: LD_INT 15
1821: PPUSH
1822: LD_INT 14
1824: PPUSH
1825: LD_EXP 11
1829: PPUSH
1830: LD_EXP 13
1834: PPUSH
1835: LD_EXP 15
1839: PPUSH
1840: LD_EXP 17
1844: PPUSH
1845: LD_EXP 19
1849: PPUSH
1850: LD_INT 83
1852: PUSH
1853: LD_INT 151
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PPUSH
1860: LD_INT 92
1862: PUSH
1863: LD_INT 144
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: PPUSH
1870: EMPTY
1871: PPUSH
1872: CALL 6969 0 13
// end ; end_of_file
1876: END
// export function PrepareAttack ( area , n ) ; var i , un ; begin
1877: LD_INT 0
1879: PPUSH
1880: PPUSH
1881: PPUSH
// for i := 1 to n do
1882: LD_ADDR_VAR 0 4
1886: PUSH
1887: DOUBLE
1888: LD_INT 1
1890: DEC
1891: ST_TO_ADDR
1892: LD_VAR 0 2
1896: PUSH
1897: FOR_TO
1898: IFFALSE 2143
// begin uc_side := 6 ;
1900: LD_ADDR_OWVAR 20
1904: PUSH
1905: LD_INT 6
1907: ST_TO_ADDR
// uc_nation := 3 ;
1908: LD_ADDR_OWVAR 21
1912: PUSH
1913: LD_INT 3
1915: ST_TO_ADDR
// vc_chassis := [ ru_heavy_wheeled , ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 3 ) ] ;
1916: LD_ADDR_OWVAR 37
1920: PUSH
1921: LD_INT 23
1923: PUSH
1924: LD_INT 22
1926: PUSH
1927: LD_INT 23
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 1
1937: PPUSH
1938: LD_INT 3
1940: PPUSH
1941: CALL_OW 12
1945: ARRAY
1946: ST_TO_ADDR
// vc_control := control_computer ;
1947: LD_ADDR_OWVAR 38
1951: PUSH
1952: LD_INT 3
1954: ST_TO_ADDR
// vc_engine := engine_combustion ;
1955: LD_ADDR_OWVAR 39
1959: PUSH
1960: LD_INT 1
1962: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_gun ] [ rand ( 1 , 3 ) ] ;
1963: LD_ADDR_OWVAR 40
1967: PUSH
1968: LD_INT 43
1970: PUSH
1971: LD_INT 44
1973: PUSH
1974: LD_INT 44
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_INT 1
1984: PPUSH
1985: LD_INT 3
1987: PPUSH
1988: CALL_OW 12
1992: ARRAY
1993: ST_TO_ADDR
// vc_fuel_battery := 80 ;
1994: LD_ADDR_OWVAR 41
1998: PUSH
1999: LD_INT 80
2001: ST_TO_ADDR
// un := CreateVehicle ;
2002: LD_ADDR_VAR 0 5
2006: PUSH
2007: CALL_OW 45
2011: ST_TO_ADDR
// case area of eastArr :
2012: LD_VAR 0 1
2016: PUSH
2017: LD_INT 7
2019: DOUBLE
2020: EQUAL
2021: IFTRUE 2025
2023: GO 2081
2025: POP
// begin SetDir ( un , 4 ) ;
2026: LD_VAR 0 5
2030: PPUSH
2031: LD_INT 4
2033: PPUSH
2034: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
2038: LD_INT 35
2040: PPUSH
2041: CALL_OW 67
// until PlaceUnitArea ( un , area , false ) ;
2045: LD_VAR 0 5
2049: PPUSH
2050: LD_VAR 0 1
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: CALL_OW 49
2062: IFFALSE 2038
// ComMoveXY ( un , 79 , 33 ) ;
2064: LD_VAR 0 5
2068: PPUSH
2069: LD_INT 79
2071: PPUSH
2072: LD_INT 33
2074: PPUSH
2075: CALL_OW 111
// end ; southArr :
2079: GO 2134
2081: LD_INT 8
2083: DOUBLE
2084: EQUAL
2085: IFTRUE 2089
2087: GO 2133
2089: POP
// begin repeat wait ( 0 0$1 ) ;
2090: LD_INT 35
2092: PPUSH
2093: CALL_OW 67
// until PlaceUnitArea ( un , area , false ) ;
2097: LD_VAR 0 5
2101: PPUSH
2102: LD_VAR 0 1
2106: PPUSH
2107: LD_INT 0
2109: PPUSH
2110: CALL_OW 49
2114: IFFALSE 2090
// ComMoveXY ( un , 131 , 148 ) ;
2116: LD_VAR 0 5
2120: PPUSH
2121: LD_INT 131
2123: PPUSH
2124: LD_INT 148
2126: PPUSH
2127: CALL_OW 111
// end ; end ;
2131: GO 2134
2133: POP
// wait ( 0 0$02 ) ;
2134: LD_INT 70
2136: PPUSH
2137: CALL_OW 67
// end ;
2141: GO 1897
2143: POP
2144: POP
// end ;
2145: LD_VAR 0 3
2149: RET
// export function PrepareConvoy ( area , n ) ; var i , un ; begin
2150: LD_INT 0
2152: PPUSH
2153: PPUSH
2154: PPUSH
// for i := 1 to n do
2155: LD_ADDR_VAR 0 4
2159: PUSH
2160: DOUBLE
2161: LD_INT 1
2163: DEC
2164: ST_TO_ADDR
2165: LD_VAR 0 2
2169: PUSH
2170: FOR_TO
2171: IFFALSE 2397
// begin uc_side := 6 ;
2173: LD_ADDR_OWVAR 20
2177: PUSH
2178: LD_INT 6
2180: ST_TO_ADDR
// uc_nation := 3 ;
2181: LD_ADDR_OWVAR 21
2185: PUSH
2186: LD_INT 3
2188: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
2189: LD_INT 0
2191: PPUSH
2192: LD_INT 3
2194: PPUSH
2195: LD_INT 4
2197: PPUSH
2198: CALL_OW 380
// vc_chassis := ru_medium_tracked ;
2202: LD_ADDR_OWVAR 37
2206: PUSH
2207: LD_INT 22
2209: ST_TO_ADDR
// vc_control := control_manual ;
2210: LD_ADDR_OWVAR 38
2214: PUSH
2215: LD_INT 1
2217: ST_TO_ADDR
// vc_engine := engine_combustion ;
2218: LD_ADDR_OWVAR 39
2222: PUSH
2223: LD_INT 1
2225: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
2226: LD_ADDR_OWVAR 40
2230: PUSH
2231: LD_INT 51
2233: ST_TO_ADDR
// vc_fuel_battery := 50 ;
2234: LD_ADDR_OWVAR 41
2238: PUSH
2239: LD_INT 50
2241: ST_TO_ADDR
// un := CreateVehicle ;
2242: LD_ADDR_VAR 0 5
2246: PUSH
2247: CALL_OW 45
2251: ST_TO_ADDR
// case area of eastArr :
2252: LD_VAR 0 1
2256: PUSH
2257: LD_INT 7
2259: DOUBLE
2260: EQUAL
2261: IFTRUE 2265
2263: GO 2280
2265: POP
// SetDir ( un , 4 ) ; southArr :
2266: LD_VAR 0 5
2270: PPUSH
2271: LD_INT 4
2273: PPUSH
2274: CALL_OW 233
2278: GO 2304
2280: LD_INT 8
2282: DOUBLE
2283: EQUAL
2284: IFTRUE 2288
2286: GO 2303
2288: POP
// SetDir ( un , 5 ) ; end ;
2289: LD_VAR 0 5
2293: PPUSH
2294: LD_INT 5
2296: PPUSH
2297: CALL_OW 233
2301: GO 2304
2303: POP
// PlaceUnitArea ( un , area , false ) ;
2304: LD_VAR 0 5
2308: PPUSH
2309: LD_VAR 0 1
2313: PPUSH
2314: LD_INT 0
2316: PPUSH
2317: CALL_OW 49
// PlaceHumanInUnit ( CreateHuman , un ) ;
2321: CALL_OW 44
2325: PPUSH
2326: LD_VAR 0 5
2330: PPUSH
2331: CALL_OW 52
// SetCargo ( un , mat_cans , 100 ) ;
2335: LD_VAR 0 5
2339: PPUSH
2340: LD_INT 1
2342: PPUSH
2343: LD_INT 100
2345: PPUSH
2346: CALL_OW 290
// ComMoveXY ( un , 106 , 88 ) ;
2350: LD_VAR 0 5
2354: PPUSH
2355: LD_INT 106
2357: PPUSH
2358: LD_INT 88
2360: PPUSH
2361: CALL_OW 111
// AddComUnload ( un ) ;
2365: LD_VAR 0 5
2369: PPUSH
2370: CALL_OW 219
// AddComMoveToArea ( un , area ) ;
2374: LD_VAR 0 5
2378: PPUSH
2379: LD_VAR 0 1
2383: PPUSH
2384: CALL_OW 173
// wait ( 0 0$02 ) ;
2388: LD_INT 70
2390: PPUSH
2391: CALL_OW 67
// end ;
2395: GO 2170
2397: POP
2398: POP
// wait ( 0 0$05 ) ;
2399: LD_INT 175
2401: PPUSH
2402: CALL_OW 67
// while ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) ) do
2406: LD_INT 22
2408: PUSH
2409: LD_INT 6
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PUSH
2416: LD_INT 34
2418: PUSH
2419: LD_INT 51
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PPUSH
2430: CALL_OW 69
2434: IFFALSE 2633
// begin wait ( 0 0$01 ) ;
2436: LD_INT 35
2438: PPUSH
2439: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) do
2443: LD_ADDR_VAR 0 4
2447: PUSH
2448: LD_INT 22
2450: PUSH
2451: LD_INT 6
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 34
2460: PUSH
2461: LD_INT 51
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL_OW 69
2476: PUSH
2477: FOR_IN
2478: IFFALSE 2629
// begin if IsInArea ( i , playerBaseArea ) and GetSex ( IsDrivenBy ( i ) ) = sex_male and dialogTrans then
2480: LD_VAR 0 4
2484: PPUSH
2485: LD_INT 2
2487: PPUSH
2488: CALL_OW 308
2492: PUSH
2493: LD_VAR 0 4
2497: PPUSH
2498: CALL_OW 311
2502: PPUSH
2503: CALL_OW 258
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: AND
2512: PUSH
2513: LD_EXP 5
2517: AND
2518: IFFALSE 2545
// begin Say ( IsDrivenBy ( i ) , Dtran ) ;
2520: LD_VAR 0 4
2524: PPUSH
2525: CALL_OW 311
2529: PPUSH
2530: LD_STRING Dtran
2532: PPUSH
2533: CALL_OW 88
// dialogTrans := false ;
2537: LD_ADDR_EXP 5
2541: PUSH
2542: LD_INT 0
2544: ST_TO_ADDR
// end ; if IsIdle ( i ) then
2545: LD_VAR 0 4
2549: PPUSH
2550: CALL_OW 316
2554: IFFALSE 2570
// ComMoveToArea ( i , area ) ;
2556: LD_VAR 0 4
2560: PPUSH
2561: LD_VAR 0 1
2565: PPUSH
2566: CALL_OW 113
// if IsInArea ( i , area ) and GetCargo ( i , mat_cans ) = 0 then
2570: LD_VAR 0 4
2574: PPUSH
2575: LD_VAR 0 1
2579: PPUSH
2580: CALL_OW 308
2584: PUSH
2585: LD_VAR 0 4
2589: PPUSH
2590: LD_INT 1
2592: PPUSH
2593: CALL_OW 289
2597: PUSH
2598: LD_INT 0
2600: EQUAL
2601: AND
2602: IFFALSE 2627
// begin RemoveUnit ( IsDrivenBy ( i ) ) ;
2604: LD_VAR 0 4
2608: PPUSH
2609: CALL_OW 311
2613: PPUSH
2614: CALL_OW 64
// RemoveUnit ( i ) ;
2618: LD_VAR 0 4
2622: PPUSH
2623: CALL_OW 64
// end ; end ;
2627: GO 2477
2629: POP
2630: POP
// end ;
2631: GO 2406
// end ;
2633: LD_VAR 0 3
2637: RET
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) do var i , tmp ;
2638: LD_INT 22
2640: PUSH
2641: LD_INT 6
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: PUSH
2648: LD_INT 21
2650: PUSH
2651: LD_INT 2
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 3
2660: PUSH
2661: LD_INT 34
2663: PUSH
2664: LD_INT 51
2666: PUSH
2667: EMPTY
2668: LIST
2669: LIST
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: LIST
2679: PPUSH
2680: CALL_OW 69
2684: IFFALSE 2845
2686: GO 2688
2688: DISABLE
2689: LD_INT 0
2691: PPUSH
2692: PPUSH
// begin repeat wait ( 0 0$3 ) ;
2693: LD_INT 105
2695: PPUSH
2696: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) ;
2700: LD_ADDR_VAR 0 2
2704: PUSH
2705: LD_INT 22
2707: PUSH
2708: LD_INT 6
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: PUSH
2715: LD_INT 21
2717: PUSH
2718: LD_INT 2
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PUSH
2725: LD_INT 50
2727: PUSH
2728: EMPTY
2729: LIST
2730: PUSH
2731: LD_INT 3
2733: PUSH
2734: LD_INT 34
2736: PUSH
2737: LD_INT 51
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: LIST
2752: LIST
2753: PPUSH
2754: CALL_OW 69
2758: ST_TO_ADDR
// for i in tmp do
2759: LD_ADDR_VAR 0 1
2763: PUSH
2764: LD_VAR 0 2
2768: PUSH
2769: FOR_IN
2770: IFFALSE 2835
// if not HasTask ( i ) and GetLives ( i ) > 250 then
2772: LD_VAR 0 1
2776: PPUSH
2777: CALL_OW 314
2781: NOT
2782: PUSH
2783: LD_VAR 0 1
2787: PPUSH
2788: CALL_OW 256
2792: PUSH
2793: LD_INT 250
2795: GREATER
2796: AND
2797: IFFALSE 2833
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 6 ] ) , i ) ) ;
2799: LD_VAR 0 1
2803: PPUSH
2804: LD_INT 81
2806: PUSH
2807: LD_INT 6
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: PPUSH
2814: CALL_OW 69
2818: PPUSH
2819: LD_VAR 0 1
2823: PPUSH
2824: CALL_OW 74
2828: PPUSH
2829: CALL_OW 115
2833: GO 2769
2835: POP
2836: POP
// until not tmp ;
2837: LD_VAR 0 2
2841: NOT
2842: IFFALSE 2693
// enable ;
2844: ENABLE
// end ; end_of_file
2845: PPOPN 2
2847: END
// export Commanders , Player , Gladkov , Davidov , Gorki , Stolypin , playerSquad , playerCom ; export function InitCommanders ( commander ) ; var i , skill , tmp , team , veh ; begin
2848: LD_INT 0
2850: PPUSH
2851: PPUSH
2852: PPUSH
2853: PPUSH
2854: PPUSH
2855: PPUSH
// uc_side := your_side ;
2856: LD_ADDR_OWVAR 20
2860: PUSH
2861: LD_OWVAR 2
2865: ST_TO_ADDR
// uc_nation := nation_russian ;
2866: LD_ADDR_OWVAR 21
2870: PUSH
2871: LD_INT 3
2873: ST_TO_ADDR
// Gladkov := NewCharacter ( Gladkov ) ;
2874: LD_ADDR_EXP 24
2878: PUSH
2879: LD_STRING Gladkov
2881: PPUSH
2882: CALL_OW 25
2886: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
2887: LD_ADDR_EXP 25
2891: PUSH
2892: LD_STRING Davidov
2894: PPUSH
2895: CALL_OW 25
2899: ST_TO_ADDR
// Gorki := NewCharacter ( Burlak ) ;
2900: LD_ADDR_EXP 26
2904: PUSH
2905: LD_STRING Burlak
2907: PPUSH
2908: CALL_OW 25
2912: ST_TO_ADDR
// Stolypin := NewCharacter ( Stolypin ) ;
2913: LD_ADDR_EXP 27
2917: PUSH
2918: LD_STRING Stolypin
2920: PPUSH
2921: CALL_OW 25
2925: ST_TO_ADDR
// commanders := [ Gladkov , Davidov , Gorki , Stolypin ] ;
2926: LD_ADDR_EXP 22
2930: PUSH
2931: LD_EXP 24
2935: PUSH
2936: LD_EXP 25
2940: PUSH
2941: LD_EXP 26
2945: PUSH
2946: LD_EXP 27
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: LIST
2955: LIST
2956: ST_TO_ADDR
// playerCom := commanders [ commander ] ;
2957: LD_ADDR_EXP 29
2961: PUSH
2962: LD_EXP 22
2966: PUSH
2967: LD_VAR 0 1
2971: ARRAY
2972: ST_TO_ADDR
// team := [ ] ;
2973: LD_ADDR_VAR 0 6
2977: PUSH
2978: EMPTY
2979: ST_TO_ADDR
// skill := [ 4 , 3 , 3 ] [ Difficulty ] ;
2980: LD_ADDR_VAR 0 4
2984: PUSH
2985: LD_INT 4
2987: PUSH
2988: LD_INT 3
2990: PUSH
2991: LD_INT 3
2993: PUSH
2994: EMPTY
2995: LIST
2996: LIST
2997: LIST
2998: PUSH
2999: LD_OWVAR 67
3003: ARRAY
3004: ST_TO_ADDR
// uc_side := 3 ;
3005: LD_ADDR_OWVAR 20
3009: PUSH
3010: LD_INT 3
3012: ST_TO_ADDR
// uc_nation := 3 ;
3013: LD_ADDR_OWVAR 21
3017: PUSH
3018: LD_INT 3
3020: ST_TO_ADDR
// hc_gallery :=  ;
3021: LD_ADDR_OWVAR 33
3025: PUSH
3026: LD_STRING 
3028: ST_TO_ADDR
// hc_name :=  ;
3029: LD_ADDR_OWVAR 26
3033: PUSH
3034: LD_STRING 
3036: ST_TO_ADDR
// hc_importance := 0 ;
3037: LD_ADDR_OWVAR 32
3041: PUSH
3042: LD_INT 0
3044: ST_TO_ADDR
// case playerCom of Gladkov :
3045: LD_EXP 29
3049: PUSH
3050: LD_EXP 24
3054: DOUBLE
3055: EQUAL
3056: IFTRUE 3060
3058: GO 3213
3060: POP
// begin for i := 1 to 10 do
3061: LD_ADDR_VAR 0 3
3065: PUSH
3066: DOUBLE
3067: LD_INT 1
3069: DEC
3070: ST_TO_ADDR
3071: LD_INT 10
3073: PUSH
3074: FOR_TO
3075: IFFALSE 3118
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
3077: LD_INT 0
3079: PPUSH
3080: LD_INT 1
3082: PPUSH
3083: LD_VAR 0 4
3087: PUSH
3088: LD_INT 1
3090: PLUS
3091: PPUSH
3092: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
3096: LD_ADDR_VAR 0 6
3100: PUSH
3101: LD_VAR 0 6
3105: PPUSH
3106: CALL_OW 44
3110: PPUSH
3111: CALL 71779 0 2
3115: ST_TO_ADDR
// end ;
3116: GO 3074
3118: POP
3119: POP
// for i := 1 to 15 do
3120: LD_ADDR_VAR 0 3
3124: PUSH
3125: DOUBLE
3126: LD_INT 1
3128: DEC
3129: ST_TO_ADDR
3130: LD_INT 15
3132: PUSH
3133: FOR_TO
3134: IFFALSE 3183
// begin PrepareHuman ( false , ( i mod 3 ) + 2 , skill ) ;
3136: LD_INT 0
3138: PPUSH
3139: LD_VAR 0 3
3143: PUSH
3144: LD_INT 3
3146: MOD
3147: PUSH
3148: LD_INT 2
3150: PLUS
3151: PPUSH
3152: LD_VAR 0 4
3156: PPUSH
3157: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
3161: LD_ADDR_VAR 0 6
3165: PUSH
3166: LD_VAR 0 6
3170: PPUSH
3171: CALL_OW 44
3175: PPUSH
3176: CALL 71779 0 2
3180: ST_TO_ADDR
// end ;
3181: GO 3133
3183: POP
3184: POP
// SetTech ( tech_bazooka , 3 , state_enabled ) ;
3185: LD_INT 44
3187: PPUSH
3188: LD_INT 3
3190: PPUSH
3191: LD_INT 1
3193: PPUSH
3194: CALL_OW 322
// SetTech ( tech_advmet , 3 , state_enabled ) ;
3198: LD_INT 34
3200: PPUSH
3201: LD_INT 3
3203: PPUSH
3204: LD_INT 1
3206: PPUSH
3207: CALL_OW 322
// end ; Davidov :
3211: GO 4108
3213: LD_EXP 25
3217: DOUBLE
3218: EQUAL
3219: IFTRUE 3223
3221: GO 3524
3223: POP
// begin for i := 1 to 10 do
3224: LD_ADDR_VAR 0 3
3228: PUSH
3229: DOUBLE
3230: LD_INT 1
3232: DEC
3233: ST_TO_ADDR
3234: LD_INT 10
3236: PUSH
3237: FOR_TO
3238: IFFALSE 3281
// begin PrepareHuman ( false , 4 , skill + 1 ) ;
3240: LD_INT 0
3242: PPUSH
3243: LD_INT 4
3245: PPUSH
3246: LD_VAR 0 4
3250: PUSH
3251: LD_INT 1
3253: PLUS
3254: PPUSH
3255: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
3259: LD_ADDR_VAR 0 6
3263: PUSH
3264: LD_VAR 0 6
3268: PPUSH
3269: CALL_OW 44
3273: PPUSH
3274: CALL 71779 0 2
3278: ST_TO_ADDR
// end ;
3279: GO 3237
3281: POP
3282: POP
// for i := 1 to 15 do
3283: LD_ADDR_VAR 0 3
3287: PUSH
3288: DOUBLE
3289: LD_INT 1
3291: DEC
3292: ST_TO_ADDR
3293: LD_INT 15
3295: PUSH
3296: FOR_TO
3297: IFFALSE 3346
// begin PrepareHuman ( false , ( i mod 3 ) + 1 , skill ) ;
3299: LD_INT 0
3301: PPUSH
3302: LD_VAR 0 3
3306: PUSH
3307: LD_INT 3
3309: MOD
3310: PUSH
3311: LD_INT 1
3313: PLUS
3314: PPUSH
3315: LD_VAR 0 4
3319: PPUSH
3320: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
3324: LD_ADDR_VAR 0 6
3328: PUSH
3329: LD_VAR 0 6
3333: PPUSH
3334: CALL_OW 44
3338: PPUSH
3339: CALL 71779 0 2
3343: ST_TO_ADDR
// end ;
3344: GO 3296
3346: POP
3347: POP
// SetTech ( tech_advmet , 3 , state_enabled ) ;
3348: LD_INT 34
3350: PPUSH
3351: LD_INT 3
3353: PPUSH
3354: LD_INT 1
3356: PPUSH
3357: CALL_OW 322
// SetTech ( tech_ai , 3 , state_enabled ) ;
3361: LD_INT 32
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: LD_INT 1
3369: PPUSH
3370: CALL_OW 322
// SetTech ( tech_advai , 3 , state_enabled ) ;
3374: LD_INT 27
3376: PPUSH
3377: LD_INT 3
3379: PPUSH
3380: LD_INT 1
3382: PPUSH
3383: CALL_OW 322
// SetTech ( 30 , 3 , state_enabled ) ;
3387: LD_INT 30
3389: PPUSH
3390: LD_INT 3
3392: PPUSH
3393: LD_INT 1
3395: PPUSH
3396: CALL_OW 322
// SetTech ( 63 , 3 , state_enabled ) ;
3400: LD_INT 63
3402: PPUSH
3403: LD_INT 3
3405: PPUSH
3406: LD_INT 1
3408: PPUSH
3409: CALL_OW 322
// SetTech ( tech_comp1 , 3 , state_enabled ) ;
3413: LD_INT 57
3415: PPUSH
3416: LD_INT 3
3418: PPUSH
3419: LD_INT 1
3421: PPUSH
3422: CALL_OW 322
// SetTech ( tech_comp2 , 3 , state_enabled ) ;
3426: LD_INT 58
3428: PPUSH
3429: LD_INT 3
3431: PPUSH
3432: LD_INT 1
3434: PPUSH
3435: CALL_OW 322
// SetRestrict ( b_lab_full , 3 , state_enabled ) ;
3439: LD_INT 8
3441: PPUSH
3442: LD_INT 3
3444: PPUSH
3445: LD_INT 1
3447: PPUSH
3448: CALL_OW 324
// SetRestrict ( b_lab_computer , 3 , state_enabled ) ;
3452: LD_INT 12
3454: PPUSH
3455: LD_INT 3
3457: PPUSH
3458: LD_INT 1
3460: PPUSH
3461: CALL_OW 324
// SetRestrict ( b_lab_spacetime , 3 , state_enabled ) ;
3465: LD_INT 14
3467: PPUSH
3468: LD_INT 3
3470: PPUSH
3471: LD_INT 1
3473: PPUSH
3474: CALL_OW 324
// SetRestrict ( b_ext_computer , 3 , state_enabled ) ;
3478: LD_INT 24
3480: PPUSH
3481: LD_INT 3
3483: PPUSH
3484: LD_INT 1
3486: PPUSH
3487: CALL_OW 324
// SetRestrict ( b_turret , 3 , state_enabled ) ;
3491: LD_INT 33
3493: PPUSH
3494: LD_INT 3
3496: PPUSH
3497: LD_INT 1
3499: PPUSH
3500: CALL_OW 324
// SetResourceType ( GetBase ( playerDepot ) , 3 , 20 ) ;
3504: LD_INT 1
3506: PPUSH
3507: CALL_OW 274
3511: PPUSH
3512: LD_INT 3
3514: PPUSH
3515: LD_INT 20
3517: PPUSH
3518: CALL_OW 277
// end ; Gorki :
3522: GO 4108
3524: LD_EXP 26
3528: DOUBLE
3529: EQUAL
3530: IFTRUE 3534
3532: GO 3793
3534: POP
// begin for i := 1 to 10 do
3535: LD_ADDR_VAR 0 3
3539: PUSH
3540: DOUBLE
3541: LD_INT 1
3543: DEC
3544: ST_TO_ADDR
3545: LD_INT 10
3547: PUSH
3548: FOR_TO
3549: IFFALSE 3592
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
3551: LD_INT 0
3553: PPUSH
3554: LD_INT 3
3556: PPUSH
3557: LD_VAR 0 4
3561: PUSH
3562: LD_INT 1
3564: PLUS
3565: PPUSH
3566: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
3570: LD_ADDR_VAR 0 6
3574: PUSH
3575: LD_VAR 0 6
3579: PPUSH
3580: CALL_OW 44
3584: PPUSH
3585: CALL 71779 0 2
3589: ST_TO_ADDR
// end ;
3590: GO 3548
3592: POP
3593: POP
// for i := 1 to 15 do
3594: LD_ADDR_VAR 0 3
3598: PUSH
3599: DOUBLE
3600: LD_INT 1
3602: DEC
3603: ST_TO_ADDR
3604: LD_INT 15
3606: PUSH
3607: FOR_TO
3608: IFFALSE 3670
// begin PrepareHuman ( false , [ 1 , 2 , 4 ] [ Rand ( 1 , 3 ) ] , skill ) ;
3610: LD_INT 0
3612: PPUSH
3613: LD_INT 1
3615: PUSH
3616: LD_INT 2
3618: PUSH
3619: LD_INT 4
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: LIST
3626: PUSH
3627: LD_INT 1
3629: PPUSH
3630: LD_INT 3
3632: PPUSH
3633: CALL_OW 12
3637: ARRAY
3638: PPUSH
3639: LD_VAR 0 4
3643: PPUSH
3644: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
3648: LD_ADDR_VAR 0 6
3652: PUSH
3653: LD_VAR 0 6
3657: PPUSH
3658: CALL_OW 44
3662: PPUSH
3663: CALL 71779 0 2
3667: ST_TO_ADDR
// end ;
3668: GO 3607
3670: POP
3671: POP
// SetTech ( tech_rocket , 3 , state_enabled ) ;
3672: LD_INT 40
3674: PPUSH
3675: LD_INT 3
3677: PPUSH
3678: LD_INT 1
3680: PPUSH
3681: CALL_OW 322
// SetTech ( tech_advmet , 3 , state_enabled ) ;
3685: LD_INT 34
3687: PPUSH
3688: LD_INT 3
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: CALL_OW 322
// SetRestrict ( b_ext_rocket , 3 , state_enabled ) ;
3698: LD_INT 18
3700: PPUSH
3701: LD_INT 3
3703: PPUSH
3704: LD_INT 1
3706: PPUSH
3707: CALL_OW 324
// vc_chassis := ru_medium_tracked ;
3711: LD_ADDR_OWVAR 37
3715: PUSH
3716: LD_INT 22
3718: ST_TO_ADDR
// vc_engine := engine_combustion ;
3719: LD_ADDR_OWVAR 39
3723: PUSH
3724: LD_INT 1
3726: ST_TO_ADDR
// vc_control := control_manual ;
3727: LD_ADDR_OWVAR 38
3731: PUSH
3732: LD_INT 1
3734: ST_TO_ADDR
// vc_weapon := ru_rocket_launcher ;
3735: LD_ADDR_OWVAR 40
3739: PUSH
3740: LD_INT 45
3742: ST_TO_ADDR
// vc_fuel_battery := 50 ;
3743: LD_ADDR_OWVAR 41
3747: PUSH
3748: LD_INT 50
3750: ST_TO_ADDR
// veh := CreateVehicle ;
3751: LD_ADDR_VAR 0 7
3755: PUSH
3756: CALL_OW 45
3760: ST_TO_ADDR
// SetMark ( veh , 1 ) ;
3761: LD_VAR 0 7
3765: PPUSH
3766: LD_INT 1
3768: PPUSH
3769: CALL_OW 242
// PlaceUnitXY ( veh , 107 , 83 , false ) ;
3773: LD_VAR 0 7
3777: PPUSH
3778: LD_INT 107
3780: PPUSH
3781: LD_INT 83
3783: PPUSH
3784: LD_INT 0
3786: PPUSH
3787: CALL_OW 48
// end ; Stolypin :
3791: GO 4108
3793: LD_EXP 27
3797: DOUBLE
3798: EQUAL
3799: IFTRUE 3803
3801: GO 4107
3803: POP
// begin for i := 1 to 10 do
3804: LD_ADDR_VAR 0 3
3808: PUSH
3809: DOUBLE
3810: LD_INT 1
3812: DEC
3813: ST_TO_ADDR
3814: LD_INT 10
3816: PUSH
3817: FOR_TO
3818: IFFALSE 3861
// begin PrepareHuman ( false , 2 , skill + 1 ) ;
3820: LD_INT 0
3822: PPUSH
3823: LD_INT 2
3825: PPUSH
3826: LD_VAR 0 4
3830: PUSH
3831: LD_INT 1
3833: PLUS
3834: PPUSH
3835: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
3839: LD_ADDR_VAR 0 6
3843: PUSH
3844: LD_VAR 0 6
3848: PPUSH
3849: CALL_OW 44
3853: PPUSH
3854: CALL 71779 0 2
3858: ST_TO_ADDR
// end ;
3859: GO 3817
3861: POP
3862: POP
// for i := 1 to 15 do
3863: LD_ADDR_VAR 0 3
3867: PUSH
3868: DOUBLE
3869: LD_INT 1
3871: DEC
3872: ST_TO_ADDR
3873: LD_INT 15
3875: PUSH
3876: FOR_TO
3877: IFFALSE 3939
// begin PrepareHuman ( false , [ 1 , 3 , 4 ] [ Rand ( 1 , 3 ) ] , skill ) ;
3879: LD_INT 0
3881: PPUSH
3882: LD_INT 1
3884: PUSH
3885: LD_INT 3
3887: PUSH
3888: LD_INT 4
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: LIST
3895: PUSH
3896: LD_INT 1
3898: PPUSH
3899: LD_INT 3
3901: PPUSH
3902: CALL_OW 12
3906: ARRAY
3907: PPUSH
3908: LD_VAR 0 4
3912: PPUSH
3913: CALL_OW 380
// team := Join ( team , CreateHuman ) ;
3917: LD_ADDR_VAR 0 6
3921: PUSH
3922: LD_VAR 0 6
3926: PPUSH
3927: CALL_OW 44
3931: PPUSH
3932: CALL 71779 0 2
3936: ST_TO_ADDR
// end ;
3937: GO 3876
3939: POP
3940: POP
// SetTech ( tech_advmet , 3 , state_enabled ) ;
3941: LD_INT 34
3943: PPUSH
3944: LD_INT 3
3946: PPUSH
3947: LD_INT 1
3949: PPUSH
3950: CALL_OW 322
// vc_chassis := ru_medium_tracked ;
3954: LD_ADDR_OWVAR 37
3958: PUSH
3959: LD_INT 22
3961: ST_TO_ADDR
// vc_engine := engine_combustion ;
3962: LD_ADDR_OWVAR 39
3966: PUSH
3967: LD_INT 1
3969: ST_TO_ADDR
// vc_control := control_manual ;
3970: LD_ADDR_OWVAR 38
3974: PUSH
3975: LD_INT 1
3977: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
3978: LD_ADDR_OWVAR 40
3982: PUSH
3983: LD_INT 51
3985: ST_TO_ADDR
// vc_fuel_battery := 30 ;
3986: LD_ADDR_OWVAR 41
3990: PUSH
3991: LD_INT 30
3993: ST_TO_ADDR
// veh := CreateVehicle ;
3994: LD_ADDR_VAR 0 7
3998: PUSH
3999: CALL_OW 45
4003: ST_TO_ADDR
// SetCargo ( veh , 1 , 100 ) ;
4004: LD_VAR 0 7
4008: PPUSH
4009: LD_INT 1
4011: PPUSH
4012: LD_INT 100
4014: PPUSH
4015: CALL_OW 290
// PlaceUnitXY ( veh , 107 , 83 , false ) ;
4019: LD_VAR 0 7
4023: PPUSH
4024: LD_INT 107
4026: PPUSH
4027: LD_INT 83
4029: PPUSH
4030: LD_INT 0
4032: PPUSH
4033: CALL_OW 48
// vc_chassis := ru_medium_tracked ;
4037: LD_ADDR_OWVAR 37
4041: PUSH
4042: LD_INT 22
4044: ST_TO_ADDR
// vc_engine := engine_combustion ;
4045: LD_ADDR_OWVAR 39
4049: PUSH
4050: LD_INT 1
4052: ST_TO_ADDR
// vc_control := control_manual ;
4053: LD_ADDR_OWVAR 38
4057: PUSH
4058: LD_INT 1
4060: ST_TO_ADDR
// vc_weapon := ru_crane ;
4061: LD_ADDR_OWVAR 40
4065: PUSH
4066: LD_INT 52
4068: ST_TO_ADDR
// vc_fuel_battery := 30 ;
4069: LD_ADDR_OWVAR 41
4073: PUSH
4074: LD_INT 30
4076: ST_TO_ADDR
// veh := CreateVehicle ;
4077: LD_ADDR_VAR 0 7
4081: PUSH
4082: CALL_OW 45
4086: ST_TO_ADDR
// PlaceUnitXY ( veh , 115 , 96 , false ) ;
4087: LD_VAR 0 7
4091: PPUSH
4092: LD_INT 115
4094: PPUSH
4095: LD_INT 96
4097: PPUSH
4098: LD_INT 0
4100: PPUSH
4101: CALL_OW 48
// end ; end ;
4105: GO 4108
4107: POP
// if isTest then
4108: LD_EXP 1
4112: IFFALSE 4126
// tmp := team else
4114: LD_ADDR_VAR 0 5
4118: PUSH
4119: LD_VAR 0 6
4123: ST_TO_ADDR
4124: GO 4217
// tmp := CharacterSelection ( text , [ 10 , 9 , 8 ] [ Difficulty ] , [ 10 , 9 , 8 ] [ Difficulty ] , [ sel_not_hired , sel_change_class , sel_changeable ] ^ team , [ class_soldier , class_engineer , class_mechanic , class_scientistic ] ) ;
4126: LD_ADDR_VAR 0 5
4130: PUSH
4131: LD_STRING text
4133: PPUSH
4134: LD_INT 10
4136: PUSH
4137: LD_INT 9
4139: PUSH
4140: LD_INT 8
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: LIST
4147: PUSH
4148: LD_OWVAR 67
4152: ARRAY
4153: PPUSH
4154: LD_INT 10
4156: PUSH
4157: LD_INT 9
4159: PUSH
4160: LD_INT 8
4162: PUSH
4163: EMPTY
4164: LIST
4165: LIST
4166: LIST
4167: PUSH
4168: LD_OWVAR 67
4172: ARRAY
4173: PPUSH
4174: LD_INT -2
4176: PUSH
4177: LD_INT -5
4179: PUSH
4180: LD_INT -3
4182: PUSH
4183: EMPTY
4184: LIST
4185: LIST
4186: LIST
4187: PUSH
4188: LD_VAR 0 6
4192: ADD
4193: PPUSH
4194: LD_INT 1
4196: PUSH
4197: LD_INT 2
4199: PUSH
4200: LD_INT 3
4202: PUSH
4203: LD_INT 4
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: PPUSH
4212: CALL_OW 42
4216: ST_TO_ADDR
// SetDir ( playerCom , 4 ) ;
4217: LD_EXP 29
4221: PPUSH
4222: LD_INT 4
4224: PPUSH
4225: CALL_OW 233
// PlaceUnitArea ( playerCom , eastArr , false ) ;
4229: LD_EXP 29
4233: PPUSH
4234: LD_INT 7
4236: PPUSH
4237: LD_INT 0
4239: PPUSH
4240: CALL_OW 49
// ComHold ( playerCom ) ;
4244: LD_EXP 29
4248: PPUSH
4249: CALL_OW 140
// for i in tmp do
4253: LD_ADDR_VAR 0 3
4257: PUSH
4258: LD_VAR 0 5
4262: PUSH
4263: FOR_IN
4264: IFFALSE 4280
// SetSide ( i , 6 ) ;
4266: LD_VAR 0 3
4270: PPUSH
4271: LD_INT 6
4273: PPUSH
4274: CALL_OW 235
4278: GO 4263
4280: POP
4281: POP
// for i = 1 to 4 do
4282: LD_ADDR_VAR 0 3
4286: PUSH
4287: DOUBLE
4288: LD_INT 1
4290: DEC
4291: ST_TO_ADDR
4292: LD_INT 4
4294: PUSH
4295: FOR_TO
4296: IFFALSE 4359
// begin SetDir ( tmp [ 1 ] , 4 ) ;
4298: LD_VAR 0 5
4302: PUSH
4303: LD_INT 1
4305: ARRAY
4306: PPUSH
4307: LD_INT 4
4309: PPUSH
4310: CALL_OW 233
// PlaceUnitXYR ( tmp [ 1 ] , 104 , 88 , 3 , false ) ;
4314: LD_VAR 0 5
4318: PUSH
4319: LD_INT 1
4321: ARRAY
4322: PPUSH
4323: LD_INT 104
4325: PPUSH
4326: LD_INT 88
4328: PPUSH
4329: LD_INT 3
4331: PPUSH
4332: LD_INT 0
4334: PPUSH
4335: CALL_OW 50
// tmp := Delete ( tmp , 1 ) ;
4339: LD_ADDR_VAR 0 5
4343: PUSH
4344: LD_VAR 0 5
4348: PPUSH
4349: LD_INT 1
4351: PPUSH
4352: CALL_OW 3
4356: ST_TO_ADDR
// end ;
4357: GO 4295
4359: POP
4360: POP
// playerSquad := tmp ;
4361: LD_ADDR_EXP 28
4365: PUSH
4366: LD_VAR 0 5
4370: ST_TO_ADDR
// end ;
4371: LD_VAR 0 2
4375: RET
// export Popov ; export function InitAction ; var commander ; begin
4376: LD_INT 0
4378: PPUSH
4379: PPUSH
// ChangeSideFog ( 6 , 3 ) ;
4380: LD_INT 6
4382: PPUSH
4383: LD_INT 3
4385: PPUSH
4386: CALL_OW 343
// CenterNowOnXY ( 1 , 1 ) ;
4390: LD_INT 1
4392: PPUSH
4393: LD_INT 1
4395: PPUSH
4396: CALL_OW 86
// uc_side := 6 ;
4400: LD_ADDR_OWVAR 20
4404: PUSH
4405: LD_INT 6
4407: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
4408: LD_ADDR_EXP 30
4412: PUSH
4413: LD_STRING Popov
4415: PPUSH
4416: CALL_OW 25
4420: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
4421: LD_ADDR_OWVAR 67
4425: PUSH
4426: LD_INT 0
4428: PPUSH
4429: CALL_OW 426
4433: ST_TO_ADDR
// if not Difficulty then
4434: LD_OWVAR 67
4438: NOT
4439: IFFALSE 4449
// Difficulty := 2 ;
4441: LD_ADDR_OWVAR 67
4445: PUSH
4446: LD_INT 2
4448: ST_TO_ADDR
// commander := GetMultiplayerSetting ( 1 ) ;
4449: LD_ADDR_VAR 0 2
4453: PUSH
4454: LD_INT 1
4456: PPUSH
4457: CALL_OW 426
4461: ST_TO_ADDR
// if not commander then
4462: LD_VAR 0 2
4466: NOT
4467: IFFALSE 4477
// commander := 1 ;
4469: LD_ADDR_VAR 0 2
4473: PUSH
4474: LD_INT 1
4476: ST_TO_ADDR
// InitCommanders ( commander ) ;
4477: LD_VAR 0 2
4481: PPUSH
4482: CALL 2848 0 1
// end ;
4486: LD_VAR 0 1
4490: RET
// every 0 0$03 do var i ;
4491: GO 4493
4493: DISABLE
4494: LD_INT 0
4496: PPUSH
// begin repeat wait ( 0 0$45 ) ;
4497: LD_INT 1575
4499: PPUSH
4500: CALL_OW 67
// for i := 1 to 3 do
4504: LD_ADDR_VAR 0 1
4508: PUSH
4509: DOUBLE
4510: LD_INT 1
4512: DEC
4513: ST_TO_ADDR
4514: LD_INT 3
4516: PUSH
4517: FOR_TO
4518: IFFALSE 4614
// begin repeat wait ( 0 0$3 ) ;
4520: LD_INT 105
4522: PPUSH
4523: CALL_OW 67
// until PlaceUnitArea ( playerSquad [ 1 ] , eastArr , false ) ;
4527: LD_EXP 28
4531: PUSH
4532: LD_INT 1
4534: ARRAY
4535: PPUSH
4536: LD_INT 7
4538: PPUSH
4539: LD_INT 0
4541: PPUSH
4542: CALL_OW 49
4546: IFFALSE 4520
// ComMoveXY ( playerSquad [ 1 ] , 107 , 88 ) ;
4548: LD_EXP 28
4552: PUSH
4553: LD_INT 1
4555: ARRAY
4556: PPUSH
4557: LD_INT 107
4559: PPUSH
4560: LD_INT 88
4562: PPUSH
4563: CALL_OW 111
// SetSide ( playerSquad [ 1 ] , 3 ) ;
4567: LD_EXP 28
4571: PUSH
4572: LD_INT 1
4574: ARRAY
4575: PPUSH
4576: LD_INT 3
4578: PPUSH
4579: CALL_OW 235
// playerSquad := Delete ( playerSquad , 1 ) ;
4583: LD_ADDR_EXP 28
4587: PUSH
4588: LD_EXP 28
4592: PPUSH
4593: LD_INT 1
4595: PPUSH
4596: CALL_OW 3
4600: ST_TO_ADDR
// if not playerSquad then
4601: LD_EXP 28
4605: NOT
4606: IFFALSE 4612
// exit ;
4608: POP
4609: POP
4610: GO 4623
// end ;
4612: GO 4517
4614: POP
4615: POP
// until not playerSquad ;
4616: LD_EXP 28
4620: NOT
4621: IFFALSE 4497
// end ; end_of_file
4623: PPOPN 1
4625: END
// export function Action ; var i ; begin
4626: LD_INT 0
4628: PPUSH
4629: PPUSH
// if not isTest then
4630: LD_EXP 1
4634: NOT
4635: IFFALSE 4644
// Query ( task ) ;
4637: LD_STRING task
4639: PPUSH
4640: CALL_OW 97
// PlaceSeeing ( 105 , 84 , 3 , - 30 ) ;
4644: LD_INT 105
4646: PPUSH
4647: LD_INT 84
4649: PPUSH
4650: LD_INT 3
4652: PPUSH
4653: LD_INT 30
4655: NEG
4656: PPUSH
4657: CALL_OW 330
// RemoveSeeing ( 105 , 84 , 3 ) ;
4661: LD_INT 105
4663: PPUSH
4664: LD_INT 84
4666: PPUSH
4667: LD_INT 3
4669: PPUSH
4670: CALL_OW 331
// InGameOn ;
4674: CALL_OW 8
// CenterNowOnXY ( 128 , 64 ) ;
4678: LD_INT 128
4680: PPUSH
4681: LD_INT 64
4683: PPUSH
4684: CALL_OW 86
// if isTest then
4688: LD_EXP 1
4692: IFFALSE 4702
// dialogue_skipped := true ;
4694: LD_ADDR_OWVAR 59
4698: PUSH
4699: LD_INT 1
4701: ST_TO_ADDR
// SayRadio ( Popov , DR1 ) ;
4702: LD_EXP 30
4706: PPUSH
4707: LD_STRING DR1
4709: PPUSH
4710: CALL_OW 94
// SayRadio ( Popov , DR2 ) ;
4714: LD_EXP 30
4718: PPUSH
4719: LD_STRING DR2
4721: PPUSH
4722: CALL_OW 94
// SayRadio ( Popov , DR3 ) ;
4726: LD_EXP 30
4730: PPUSH
4731: LD_STRING DR3
4733: PPUSH
4734: CALL_OW 94
// InGameOff ;
4738: CALL_OW 9
// ChangeMissionObjectives ( C1 ) ;
4742: LD_STRING C1
4744: PPUSH
4745: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
4749: LD_INT 35
4751: PPUSH
4752: CALL_OW 67
// until FilterUnitsInArea ( playerBaseArea , [ f_side , 3 ] ) ;
4756: LD_INT 2
4758: PPUSH
4759: LD_INT 22
4761: PUSH
4762: LD_INT 3
4764: PUSH
4765: EMPTY
4766: LIST
4767: LIST
4768: PPUSH
4769: CALL_OW 70
4773: IFFALSE 4749
// for i in FilterUnitsInArea ( playerBaseArea , [ f_side , 6 ] ) do
4775: LD_ADDR_VAR 0 2
4779: PUSH
4780: LD_INT 2
4782: PPUSH
4783: LD_INT 22
4785: PUSH
4786: LD_INT 6
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PPUSH
4793: CALL_OW 70
4797: PUSH
4798: FOR_IN
4799: IFFALSE 4815
// SetSide ( i , 3 ) ;
4801: LD_VAR 0 2
4805: PPUSH
4806: LD_INT 3
4808: PPUSH
4809: CALL_OW 235
4813: GO 4798
4815: POP
4816: POP
// if not isTest then
4817: LD_EXP 1
4821: NOT
4822: IFFALSE 4831
// Query ( support ) ;
4824: LD_STRING support
4826: PPUSH
4827: CALL_OW 97
// SetArtifactUse ( 3 , art_use_exclamation , art_instant , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ) ;
4831: LD_INT 3
4833: PPUSH
4834: LD_INT 12
4836: PPUSH
4837: LD_INT 2
4839: PPUSH
4840: LD_INT 22
4842: PUSH
4843: LD_INT 3
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: PUSH
4850: LD_INT 30
4852: PUSH
4853: LD_INT 0
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PPUSH
4864: CALL_OW 69
4868: PUSH
4869: LD_INT 1
4871: ARRAY
4872: PPUSH
4873: CALL_OW 468
// if playerCom = Stolypin then
4877: LD_EXP 29
4881: PUSH
4882: LD_EXP 27
4886: EQUAL
4887: IFFALSE 4916
// PrepareConvoy ( eastArr , [ 3 , 3 , 2 ] [ Difficulty ] ) ;
4889: LD_INT 7
4891: PPUSH
4892: LD_INT 3
4894: PUSH
4895: LD_INT 3
4897: PUSH
4898: LD_INT 2
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: LIST
4905: PUSH
4906: LD_OWVAR 67
4910: ARRAY
4911: PPUSH
4912: CALL 2150 0 2
// end ;
4916: LD_VAR 0 1
4920: RET
// every 0 0$01 trigger tick > [ 12 12$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] do var n ;
4921: LD_OWVAR 1
4925: PUSH
4926: LD_INT 25200
4928: PUSH
4929: LD_INT 23100
4931: PUSH
4932: LD_INT 21000
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: LIST
4939: PUSH
4940: LD_OWVAR 67
4944: ARRAY
4945: GREATER
4946: IFFALSE 5075
4948: GO 4950
4950: DISABLE
4951: LD_INT 0
4953: PPUSH
// begin n := [ 3 , 4 , 5 ] [ Difficulty ] ;
4954: LD_ADDR_VAR 0 1
4958: PUSH
4959: LD_INT 3
4961: PUSH
4962: LD_INT 4
4964: PUSH
4965: LD_INT 5
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: LIST
4972: PUSH
4973: LD_OWVAR 67
4977: ARRAY
4978: ST_TO_ADDR
// repeat wait ( rand ( 0 0$30 , 2 2$00 ) ) ;
4979: LD_INT 1050
4981: PPUSH
4982: LD_INT 4200
4984: PPUSH
4985: CALL_OW 12
4989: PPUSH
4990: CALL_OW 67
// SayRadio ( Popov , DR5 ) ;
4994: LD_EXP 30
4998: PPUSH
4999: LD_STRING DR5
5001: PPUSH
5002: CALL_OW 94
// PrepareAlfaAttack ( northArr , n ) ;
5006: LD_INT 9
5008: PPUSH
5009: LD_VAR 0 1
5013: PPUSH
5014: CALL 1085 0 2
// wait ( rand ( 4 4$00 , 6 6$00 ) ) ;
5018: LD_INT 8400
5020: PPUSH
5021: LD_INT 12600
5023: PPUSH
5024: CALL_OW 12
5028: PPUSH
5029: CALL_OW 67
// n := n + 1 ;
5033: LD_ADDR_VAR 0 1
5037: PUSH
5038: LD_VAR 0 1
5042: PUSH
5043: LD_INT 1
5045: PLUS
5046: ST_TO_ADDR
// if n > 12 then
5047: LD_VAR 0 1
5051: PUSH
5052: LD_INT 12
5054: GREATER
5055: IFFALSE 5065
// n := 12 ;
5057: LD_ADDR_VAR 0 1
5061: PUSH
5062: LD_INT 12
5064: ST_TO_ADDR
// until tick >= 120 120$00 ;
5065: LD_OWVAR 1
5069: PUSH
5070: LD_INT 252000
5072: GREATEREQUAL
5073: IFFALSE 4979
// end ;
5075: PPOPN 1
5077: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] ] ) = 0 do
5078: LD_INT 22
5080: PUSH
5081: LD_INT 1
5083: PUSH
5084: EMPTY
5085: LIST
5086: LIST
5087: PUSH
5088: LD_INT 50
5090: PUSH
5091: EMPTY
5092: LIST
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: PPUSH
5098: CALL_OW 69
5102: PUSH
5103: LD_INT 0
5105: EQUAL
5106: PUSH
5107: LD_INT 22
5109: PUSH
5110: LD_INT 4
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PUSH
5117: LD_INT 50
5119: PUSH
5120: EMPTY
5121: LIST
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: PPUSH
5127: CALL_OW 69
5131: PUSH
5132: LD_INT 0
5134: EQUAL
5135: AND
5136: IFFALSE 5440
5138: GO 5140
5140: DISABLE
// begin DialogueOn ;
5141: CALL_OW 6
// SayRadio ( Popov , DR7 ) ;
5145: LD_EXP 30
5149: PPUSH
5150: LD_STRING DR7
5152: PPUSH
5153: CALL_OW 94
// case playerCom of Gorki :
5157: LD_EXP 29
5161: PUSH
5162: LD_EXP 26
5166: DOUBLE
5167: EQUAL
5168: IFTRUE 5172
5170: GO 5182
5172: POP
// SetAchievement ( ACH_GORKI ) ; Stolypin :
5173: LD_STRING ACH_GORKI
5175: PPUSH
5176: CALL_OW 543
5180: GO 5243
5182: LD_EXP 27
5186: DOUBLE
5187: EQUAL
5188: IFTRUE 5192
5190: GO 5202
5192: POP
// SetAchievement ( ACH_STOLYP ) ; Davidov :
5193: LD_STRING ACH_STOLYP
5195: PPUSH
5196: CALL_OW 543
5200: GO 5243
5202: LD_EXP 25
5206: DOUBLE
5207: EQUAL
5208: IFTRUE 5212
5210: GO 5222
5212: POP
// SetAchievement ( ACH_DAVIDOV ) ; Gladkov :
5213: LD_STRING ACH_DAVIDOV
5215: PPUSH
5216: CALL_OW 543
5220: GO 5243
5222: LD_EXP 24
5226: DOUBLE
5227: EQUAL
5228: IFTRUE 5232
5230: GO 5242
5232: POP
// SetAchievement ( ACH_GLADKOV ) ; end ;
5233: LD_STRING ACH_GLADKOV
5235: PPUSH
5236: CALL_OW 543
5240: GO 5243
5242: POP
// if not callUsed then
5243: LD_EXP 2
5247: NOT
5248: IFFALSE 5257
// SetAchievement ( ACH_NOSUPP ) ;
5250: LD_STRING ACH_NOSUPP
5252: PPUSH
5253: CALL_OW 543
// if ( tick < [ 55 55$30 , 45 45$30 , 42 42$30 ] [ Difficulty ] ) then
5257: LD_OWVAR 1
5261: PUSH
5262: LD_INT 116550
5264: PUSH
5265: LD_INT 95550
5267: PUSH
5268: LD_INT 89250
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: LIST
5275: PUSH
5276: LD_OWVAR 67
5280: ARRAY
5281: LESS
5282: IFFALSE 5296
// AddMedal ( med1 , 1 ) else
5284: LD_STRING med1
5286: PPUSH
5287: LD_INT 1
5289: PPUSH
5290: CALL_OW 101
5294: GO 5307
// AddMedal ( med1 , - 1 ) ;
5296: LD_STRING med1
5298: PPUSH
5299: LD_INT 1
5301: NEG
5302: PPUSH
5303: CALL_OW 101
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) = 0 then
5307: LD_INT 81
5309: PUSH
5310: LD_INT 3
5312: PUSH
5313: EMPTY
5314: LIST
5315: LIST
5316: PUSH
5317: LD_INT 21
5319: PUSH
5320: LD_INT 3
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: PPUSH
5331: CALL_OW 69
5335: PUSH
5336: LD_INT 0
5338: EQUAL
5339: IFFALSE 5353
// AddMedal ( med3 , 1 ) else
5341: LD_STRING med3
5343: PPUSH
5344: LD_INT 1
5346: PPUSH
5347: CALL_OW 101
5351: GO 5364
// AddMedal ( med3 , - 1 ) ;
5353: LD_STRING med3
5355: PPUSH
5356: LD_INT 1
5358: NEG
5359: PPUSH
5360: CALL_OW 101
// if playerLoss = 0 then
5364: LD_EXP 6
5368: PUSH
5369: LD_INT 0
5371: EQUAL
5372: IFFALSE 5386
// AddMedal ( med2 , 1 ) else
5374: LD_STRING med2
5376: PPUSH
5377: LD_INT 1
5379: PPUSH
5380: CALL_OW 101
5384: GO 5429
// if playerLoss > 0 and playerLoss < 3 then
5386: LD_EXP 6
5390: PUSH
5391: LD_INT 0
5393: GREATER
5394: PUSH
5395: LD_EXP 6
5399: PUSH
5400: LD_INT 3
5402: LESS
5403: AND
5404: IFFALSE 5418
// AddMedal ( med2 , 2 ) else
5406: LD_STRING med2
5408: PPUSH
5409: LD_INT 2
5411: PPUSH
5412: CALL_OW 101
5416: GO 5429
// AddMedal ( med2 , - 1 ) ;
5418: LD_STRING med2
5420: PPUSH
5421: LD_INT 1
5423: NEG
5424: PPUSH
5425: CALL_OW 101
// GiveMedals ( MAIN ) ;
5429: LD_STRING MAIN
5431: PPUSH
5432: CALL_OW 102
// YouWin ;
5436: CALL_OW 103
// end ;
5440: END
// every 0 0$01 trigger IsDead ( playerCom ) do
5441: LD_EXP 29
5445: PPUSH
5446: CALL_OW 301
5450: IFFALSE 5517
5452: GO 5454
5454: DISABLE
// begin if IsOk ( Jakes ) then
5455: LD_EXP 3
5459: PPUSH
5460: CALL_OW 302
5464: IFFALSE 5480
// SayRadio ( Jakes , DJ5 ) else
5466: LD_EXP 3
5470: PPUSH
5471: LD_STRING DJ5
5473: PPUSH
5474: CALL_OW 94
5478: GO 5503
// if IsOk ( Sylvia ) then
5480: LD_EXP 4
5484: PPUSH
5485: CALL_OW 302
5489: IFFALSE 5503
// SayRadio ( Sylvia , DS5 ) ;
5491: LD_EXP 4
5495: PPUSH
5496: LD_STRING DS5
5498: PPUSH
5499: CALL_OW 94
// wait ( 0 0$01 ) ;
5503: LD_INT 35
5505: PPUSH
5506: CALL_OW 67
// YouLost ( dead ) ;
5510: LD_STRING dead
5512: PPUSH
5513: CALL_OW 104
// end ;
5517: END
// every 0 0$01 trigger IsDead ( playerDepot ) and not isTest do
5518: LD_INT 1
5520: PPUSH
5521: CALL_OW 301
5525: PUSH
5526: LD_EXP 1
5530: NOT
5531: AND
5532: IFFALSE 5599
5534: GO 5536
5536: DISABLE
// begin if IsOk ( Sylvia ) then
5537: LD_EXP 4
5541: PPUSH
5542: CALL_OW 302
5546: IFFALSE 5562
// SayRadio ( Sylvia , DS5 ) else
5548: LD_EXP 4
5552: PPUSH
5553: LD_STRING DS5
5555: PPUSH
5556: CALL_OW 94
5560: GO 5585
// if IsOk ( Jakes ) then
5562: LD_EXP 3
5566: PPUSH
5567: CALL_OW 302
5571: IFFALSE 5585
// SayRadio ( Jakes , DJ5 ) ;
5573: LD_EXP 3
5577: PPUSH
5578: LD_STRING DJ5
5580: PPUSH
5581: CALL_OW 94
// wait ( 0 0$01 ) ;
5585: LD_INT 35
5587: PPUSH
5588: CALL_OW 67
// YouLost ( depot ) ;
5592: LD_STRING depot
5594: PPUSH
5595: CALL_OW 104
// end ; end_of_file
5599: END
// on ArtifactUsed ( side , button_type , x , y ) do var side1 , side4 ;
5600: LD_INT 0
5602: PPUSH
5603: PPUSH
// begin if call and tick < 12 12$00 then
5604: LD_EXP 7
5608: PUSH
5609: LD_OWVAR 1
5613: PUSH
5614: LD_INT 25200
5616: LESS
5617: AND
5618: IFFALSE 5786
// case query ( call1 ) of 1 :
5620: LD_STRING call1
5622: PPUSH
5623: CALL_OW 97
5627: PUSH
5628: LD_INT 1
5630: DOUBLE
5631: EQUAL
5632: IFTRUE 5636
5634: GO 5774
5636: POP
// begin callUsed := true ;
5637: LD_ADDR_EXP 2
5641: PUSH
5642: LD_INT 1
5644: ST_TO_ADDR
// SetArtifactUse ( 3 , art_use_exclamation , art_gray , playerDepot ) ;
5645: LD_INT 3
5647: PPUSH
5648: LD_INT 12
5650: PPUSH
5651: LD_INT 1
5653: PPUSH
5654: LD_INT 1
5656: PPUSH
5657: CALL_OW 468
// call := false ;
5661: LD_ADDR_EXP 7
5665: PUSH
5666: LD_INT 0
5668: ST_TO_ADDR
// SayRadio ( Popov , DR6 ) ;
5669: LD_EXP 30
5673: PPUSH
5674: LD_STRING DR6
5676: PPUSH
5677: CALL_OW 94
// wait ( rand ( 3 3$00 , 4 4$00 ) ) ;
5681: LD_INT 6300
5683: PPUSH
5684: LD_INT 8400
5686: PPUSH
5687: CALL_OW 12
5691: PPUSH
5692: CALL_OW 67
// PrepareConvoy ( [ eastArr , southArr ] [ rand ( 1 , 2 ) ] , rand ( 1 , 2 ) ) ;
5696: LD_INT 7
5698: PUSH
5699: LD_INT 8
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: PUSH
5706: LD_INT 1
5708: PPUSH
5709: LD_INT 2
5711: PPUSH
5712: CALL_OW 12
5716: ARRAY
5717: PPUSH
5718: LD_INT 1
5720: PPUSH
5721: LD_INT 2
5723: PPUSH
5724: CALL_OW 12
5728: PPUSH
5729: CALL 2150 0 2
// wait ( rand ( 8 8$00 , 11 11$00 ) ) ;
5733: LD_INT 16800
5735: PPUSH
5736: LD_INT 23100
5738: PPUSH
5739: CALL_OW 12
5743: PPUSH
5744: CALL_OW 67
// call := true ;
5748: LD_ADDR_EXP 7
5752: PUSH
5753: LD_INT 1
5755: ST_TO_ADDR
// SetArtifactUse ( 3 , art_use_exclamation , art_instant , playerDepot ) ;
5756: LD_INT 3
5758: PPUSH
5759: LD_INT 12
5761: PPUSH
5762: LD_INT 2
5764: PPUSH
5765: LD_INT 1
5767: PPUSH
5768: CALL_OW 468
// end ; 2 :
5772: GO 5786
5774: LD_INT 2
5776: DOUBLE
5777: EQUAL
5778: IFTRUE 5782
5780: GO 5785
5782: POP
// ; end ;
5783: GO 5786
5785: POP
// if call and tick >= 12 12$00 then
5786: LD_EXP 7
5790: PUSH
5791: LD_OWVAR 1
5795: PUSH
5796: LD_INT 25200
5798: GREATEREQUAL
5799: AND
5800: IFFALSE 6245
// case query ( call2 ) of 1 :
5802: LD_STRING call2
5804: PPUSH
5805: CALL_OW 97
5809: PUSH
5810: LD_INT 1
5812: DOUBLE
5813: EQUAL
5814: IFTRUE 5818
5816: GO 6066
5818: POP
// begin callUsed := true ;
5819: LD_ADDR_EXP 2
5823: PUSH
5824: LD_INT 1
5826: ST_TO_ADDR
// call := false ;
5827: LD_ADDR_EXP 7
5831: PUSH
5832: LD_INT 0
5834: ST_TO_ADDR
// side1 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] ] ) ;
5835: LD_ADDR_VAR 0 5
5839: PUSH
5840: LD_INT 22
5842: PUSH
5843: LD_INT 1
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: PUSH
5850: LD_INT 50
5852: PUSH
5853: EMPTY
5854: LIST
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: PPUSH
5860: CALL_OW 69
5864: ST_TO_ADDR
// side4 := FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] ] ) ;
5865: LD_ADDR_VAR 0 6
5869: PUSH
5870: LD_INT 22
5872: PUSH
5873: LD_INT 4
5875: PUSH
5876: EMPTY
5877: LIST
5878: LIST
5879: PUSH
5880: LD_INT 50
5882: PUSH
5883: EMPTY
5884: LIST
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: PPUSH
5890: CALL_OW 69
5894: ST_TO_ADDR
// if side1 and side4 then
5895: LD_VAR 0 5
5899: PUSH
5900: LD_VAR 0 6
5904: AND
5905: IFFALSE 5955
// PrepareAttack ( [ eastArr , southArr ] [ rand ( 1 , 2 ) ] , [ 5 , 4 , 4 ] [ Difficulty ] ) else
5907: LD_INT 7
5909: PUSH
5910: LD_INT 8
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: PUSH
5917: LD_INT 1
5919: PPUSH
5920: LD_INT 2
5922: PPUSH
5923: CALL_OW 12
5927: ARRAY
5928: PPUSH
5929: LD_INT 5
5931: PUSH
5932: LD_INT 4
5934: PUSH
5935: LD_INT 4
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: LIST
5942: PUSH
5943: LD_OWVAR 67
5947: ARRAY
5948: PPUSH
5949: CALL 1877 0 2
5953: GO 6025
// if not side1 then
5955: LD_VAR 0 5
5959: NOT
5960: IFFALSE 5991
// PrepareAttack ( southArr , [ 5 , 4 , 3 ] [ Difficulty ] ) else
5962: LD_INT 8
5964: PPUSH
5965: LD_INT 5
5967: PUSH
5968: LD_INT 4
5970: PUSH
5971: LD_INT 3
5973: PUSH
5974: EMPTY
5975: LIST
5976: LIST
5977: LIST
5978: PUSH
5979: LD_OWVAR 67
5983: ARRAY
5984: PPUSH
5985: CALL 1877 0 2
5989: GO 6025
// if not side4 then
5991: LD_VAR 0 6
5995: NOT
5996: IFFALSE 6025
// PrepareAttack ( eastArr , [ 5 , 4 , 4 ] [ Difficulty ] ) ;
5998: LD_INT 7
6000: PPUSH
6001: LD_INT 5
6003: PUSH
6004: LD_INT 4
6006: PUSH
6007: LD_INT 4
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: LIST
6014: PUSH
6015: LD_OWVAR 67
6019: ARRAY
6020: PPUSH
6021: CALL 1877 0 2
// wait ( rand ( 5 5$00 , 8 8$00 ) ) ;
6025: LD_INT 10500
6027: PPUSH
6028: LD_INT 16800
6030: PPUSH
6031: CALL_OW 12
6035: PPUSH
6036: CALL_OW 67
// call := true ;
6040: LD_ADDR_EXP 7
6044: PUSH
6045: LD_INT 1
6047: ST_TO_ADDR
// SetArtifactUse ( 3 , art_use_exclamation , art_instant , playerDepot ) ;
6048: LD_INT 3
6050: PPUSH
6051: LD_INT 12
6053: PPUSH
6054: LD_INT 2
6056: PPUSH
6057: LD_INT 1
6059: PPUSH
6060: CALL_OW 468
// end ; 2 :
6064: GO 6245
6066: LD_INT 2
6068: DOUBLE
6069: EQUAL
6070: IFTRUE 6074
6072: GO 6233
6074: POP
// begin callUsed := true ;
6075: LD_ADDR_EXP 2
6079: PUSH
6080: LD_INT 1
6082: ST_TO_ADDR
// SetArtifactUse ( 3 , art_use_exclamation , art_gray , playerDepot ) ;
6083: LD_INT 3
6085: PPUSH
6086: LD_INT 12
6088: PPUSH
6089: LD_INT 1
6091: PPUSH
6092: LD_INT 1
6094: PPUSH
6095: CALL_OW 468
// call := false ;
6099: LD_ADDR_EXP 7
6103: PUSH
6104: LD_INT 0
6106: ST_TO_ADDR
// SayRadio ( Popov , DR6 ) ;
6107: LD_EXP 30
6111: PPUSH
6112: LD_STRING DR6
6114: PPUSH
6115: CALL_OW 94
// wait ( rand ( 3 3$00 , 4 4$00 ) ) ;
6119: LD_INT 6300
6121: PPUSH
6122: LD_INT 8400
6124: PPUSH
6125: CALL_OW 12
6129: PPUSH
6130: CALL_OW 67
// PrepareConvoy ( [ eastArr , southArr ] [ rand ( 1 , 2 ) ] , [ 3 , 2 , 2 ] [ Difficulty ] - rand ( 0 , 1 ) ) ;
6134: LD_INT 7
6136: PUSH
6137: LD_INT 8
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: LD_INT 1
6146: PPUSH
6147: LD_INT 2
6149: PPUSH
6150: CALL_OW 12
6154: ARRAY
6155: PPUSH
6156: LD_INT 3
6158: PUSH
6159: LD_INT 2
6161: PUSH
6162: LD_INT 2
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: LIST
6169: PUSH
6170: LD_OWVAR 67
6174: ARRAY
6175: PUSH
6176: LD_INT 0
6178: PPUSH
6179: LD_INT 1
6181: PPUSH
6182: CALL_OW 12
6186: MINUS
6187: PPUSH
6188: CALL 2150 0 2
// wait ( rand ( 11 11$00 , 15 15$00 ) ) ;
6192: LD_INT 23100
6194: PPUSH
6195: LD_INT 31500
6197: PPUSH
6198: CALL_OW 12
6202: PPUSH
6203: CALL_OW 67
// call := true ;
6207: LD_ADDR_EXP 7
6211: PUSH
6212: LD_INT 1
6214: ST_TO_ADDR
// SetArtifactUse ( 3 , art_use_exclamation , art_instant , playerDepot ) ;
6215: LD_INT 3
6217: PPUSH
6218: LD_INT 12
6220: PPUSH
6221: LD_INT 2
6223: PPUSH
6224: LD_INT 1
6226: PPUSH
6227: CALL_OW 468
// end ; 3 :
6231: GO 6245
6233: LD_INT 3
6235: DOUBLE
6236: EQUAL
6237: IFTRUE 6241
6239: GO 6244
6241: POP
// ; end ;
6242: GO 6245
6244: POP
// end ;
6245: PPOPN 6
6247: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6248: LD_VAR 0 1
6252: PPUSH
6253: CALL 28479 0 1
// end ;
6257: PPOPN 1
6259: END
// on VehicleConstructed ( vehicle , factory ) do var side ;
6260: LD_INT 0
6262: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
6263: LD_VAR 0 1
6267: PPUSH
6268: LD_VAR 0 2
6272: PPUSH
6273: CALL 28537 0 2
// side := GetSide ( vehicle ) ;
6277: LD_ADDR_VAR 0 3
6281: PUSH
6282: LD_VAR 0 1
6286: PPUSH
6287: CALL_OW 255
6291: ST_TO_ADDR
// if side = 1 then
6292: LD_VAR 0 3
6296: PUSH
6297: LD_INT 1
6299: EQUAL
6300: IFFALSE 6376
// begin if GetControl ( vehicle ) = control_manual then
6302: LD_VAR 0 1
6306: PPUSH
6307: CALL_OW 263
6311: PUSH
6312: LD_INT 1
6314: EQUAL
6315: IFFALSE 6356
// begin usVehicles1 := Join ( usVehicles1 , vehicle ) ;
6317: LD_ADDR_EXP 12
6321: PUSH
6322: LD_EXP 12
6326: PPUSH
6327: LD_VAR 0 1
6331: PPUSH
6332: CALL 71779 0 2
6336: ST_TO_ADDR
// SetTag ( IsDrivenBy ( vehicle ) , tMech ) ;
6337: LD_VAR 0 1
6341: PPUSH
6342: CALL_OW 311
6346: PPUSH
6347: LD_INT 7
6349: PPUSH
6350: CALL_OW 109
// end else
6354: GO 6376
// begin usAttackVehicles1 := Join ( usAttackVehicles1 , vehicle ) ;
6356: LD_ADDR_EXP 20
6360: PUSH
6361: LD_EXP 20
6365: PPUSH
6366: LD_VAR 0 1
6370: PPUSH
6371: CALL 71779 0 2
6375: ST_TO_ADDR
// end ; end ; if side = 4 then
6376: LD_VAR 0 3
6380: PUSH
6381: LD_INT 4
6383: EQUAL
6384: IFFALSE 6460
// begin if GetControl ( vehicle ) = control_manual then
6386: LD_VAR 0 1
6390: PPUSH
6391: CALL_OW 263
6395: PUSH
6396: LD_INT 1
6398: EQUAL
6399: IFFALSE 6440
// begin usVehicles2 := Join ( usVehicles2 , vehicle ) ;
6401: LD_ADDR_EXP 13
6405: PUSH
6406: LD_EXP 13
6410: PPUSH
6411: LD_VAR 0 1
6415: PPUSH
6416: CALL 71779 0 2
6420: ST_TO_ADDR
// SetTag ( IsDrivenBy ( vehicle ) , tMech ) ;
6421: LD_VAR 0 1
6425: PPUSH
6426: CALL_OW 311
6430: PPUSH
6431: LD_INT 7
6433: PPUSH
6434: CALL_OW 109
// end else
6438: GO 6460
// begin usAttackVehicles2 := Join ( usAttackVehicles2 , vehicle ) ;
6440: LD_ADDR_EXP 21
6444: PUSH
6445: LD_EXP 21
6449: PPUSH
6450: LD_VAR 0 1
6454: PPUSH
6455: CALL 71779 0 2
6459: ST_TO_ADDR
// end ; end ; end ;
6460: PPOPN 3
6462: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
6463: LD_VAR 0 1
6467: PPUSH
6468: CALL_OW 110
6472: PUSH
6473: LD_INT 7
6475: EQUAL
6476: IFFALSE 6490
// SetTag ( driver , 0 ) ;
6478: LD_VAR 0 1
6482: PPUSH
6483: LD_INT 0
6485: PPUSH
6486: CALL_OW 109
// end ;
6490: PPOPN 4
6492: END
// on EvacuateBuilding ( building , unit ) do begin if GetTag ( unit ) = tControlRemoteMech then
6493: LD_VAR 0 2
6497: PPUSH
6498: CALL_OW 110
6502: PUSH
6503: LD_INT 17
6505: EQUAL
6506: IFFALSE 6520
// SetTag ( unit , 0 ) ;
6508: LD_VAR 0 2
6512: PPUSH
6513: LD_INT 0
6515: PPUSH
6516: CALL_OW 109
// end ;
6520: PPOPN 2
6522: END
// on UpgradeComplete ( b ) do var side , btype ;
6523: LD_INT 0
6525: PPUSH
6526: PPUSH
// begin side := GetSide ( b ) ;
6527: LD_ADDR_VAR 0 2
6531: PUSH
6532: LD_VAR 0 1
6536: PPUSH
6537: CALL_OW 255
6541: ST_TO_ADDR
// btype := GetBType ( b ) ;
6542: LD_ADDR_VAR 0 3
6546: PUSH
6547: LD_VAR 0 1
6551: PPUSH
6552: CALL_OW 266
6556: ST_TO_ADDR
// if side = 1 then
6557: LD_VAR 0 2
6561: PUSH
6562: LD_INT 1
6564: EQUAL
6565: IFFALSE 6585
// begin usBuildingsToBuild1 := Delete ( usBuildingsToBuild1 , 1 ) ;
6567: LD_ADDR_EXP 18
6571: PUSH
6572: LD_EXP 18
6576: PPUSH
6577: LD_INT 1
6579: PPUSH
6580: CALL_OW 3
6584: ST_TO_ADDR
// end ; if side = 4 then
6585: LD_VAR 0 2
6589: PUSH
6590: LD_INT 4
6592: EQUAL
6593: IFFALSE 6613
// begin usBuildingsToBuild2 := Delete ( usBuildingsToBuild2 , 1 ) ;
6595: LD_ADDR_EXP 19
6599: PUSH
6600: LD_EXP 19
6604: PPUSH
6605: LD_INT 1
6607: PPUSH
6608: CALL_OW 3
6612: ST_TO_ADDR
// end ; end ;
6613: PPOPN 3
6615: END
// on ResearchComplete ( tech , lab ) do var side ;
6616: LD_INT 0
6618: PPUSH
// begin side := GetSide ( lab ) ;
6619: LD_ADDR_VAR 0 3
6623: PUSH
6624: LD_VAR 0 2
6628: PPUSH
6629: CALL_OW 255
6633: ST_TO_ADDR
// if side = 1 then
6634: LD_VAR 0 3
6638: PUSH
6639: LD_INT 1
6641: EQUAL
6642: IFFALSE 6660
// usTechs1 := usTechs1 diff tech ;
6644: LD_ADDR_EXP 14
6648: PUSH
6649: LD_EXP 14
6653: PUSH
6654: LD_VAR 0 1
6658: DIFF
6659: ST_TO_ADDR
// if side = 4 then
6660: LD_VAR 0 3
6664: PUSH
6665: LD_INT 4
6667: EQUAL
6668: IFFALSE 6686
// usTechs2 := usTechs2 diff tech ;
6670: LD_ADDR_EXP 15
6674: PUSH
6675: LD_EXP 15
6679: PUSH
6680: LD_VAR 0 1
6684: DIFF
6685: ST_TO_ADDR
// end ;
6686: PPOPN 3
6688: END
// on BuildingComplete ( b ) do var side , btype ;
6689: LD_INT 0
6691: PPUSH
6692: PPUSH
// begin side := GetSide ( b ) ;
6693: LD_ADDR_VAR 0 2
6697: PUSH
6698: LD_VAR 0 1
6702: PPUSH
6703: CALL_OW 255
6707: ST_TO_ADDR
// btype := GetBType ( b ) ;
6708: LD_ADDR_VAR 0 3
6712: PUSH
6713: LD_VAR 0 1
6717: PPUSH
6718: CALL_OW 266
6722: ST_TO_ADDR
// if side = 1 then
6723: LD_VAR 0 2
6727: PUSH
6728: LD_INT 1
6730: EQUAL
6731: IFFALSE 6751
// usBuildingsToBuild1 := Delete ( usBuildingsToBuild1 , 1 ) ;
6733: LD_ADDR_EXP 18
6737: PUSH
6738: LD_EXP 18
6742: PPUSH
6743: LD_INT 1
6745: PPUSH
6746: CALL_OW 3
6750: ST_TO_ADDR
// if side = 4 then
6751: LD_VAR 0 2
6755: PUSH
6756: LD_INT 4
6758: EQUAL
6759: IFFALSE 6779
// usBuildingsToBuild2 := Delete ( usBuildingsToBuild2 , 1 ) ;
6761: LD_ADDR_EXP 19
6765: PUSH
6766: LD_EXP 19
6770: PPUSH
6771: LD_INT 1
6773: PPUSH
6774: CALL_OW 3
6778: ST_TO_ADDR
// end ;
6779: PPOPN 3
6781: END
// on VehicleCaptured ( newId , oldId , oldSide , driver ) do begin if oldSide = 1 then
6782: LD_VAR 0 3
6786: PUSH
6787: LD_INT 1
6789: EQUAL
6790: IFFALSE 6838
// begin if oldId in usVehicles1 then
6792: LD_VAR 0 2
6796: PUSH
6797: LD_EXP 12
6801: IN
6802: IFFALSE 6822
// begin usVehicles1 := usVehicles1 diff oldId ;
6804: LD_ADDR_EXP 12
6808: PUSH
6809: LD_EXP 12
6813: PUSH
6814: LD_VAR 0 2
6818: DIFF
6819: ST_TO_ADDR
// end else
6820: GO 6838
// begin usAttackVehicles1 := usAttackVehicles1 diff oldId ;
6822: LD_ADDR_EXP 20
6826: PUSH
6827: LD_EXP 20
6831: PUSH
6832: LD_VAR 0 2
6836: DIFF
6837: ST_TO_ADDR
// end ; end ; if oldSide = 4 then
6838: LD_VAR 0 3
6842: PUSH
6843: LD_INT 4
6845: EQUAL
6846: IFFALSE 6894
// begin if oldId in usVehicles2 then
6848: LD_VAR 0 2
6852: PUSH
6853: LD_EXP 13
6857: IN
6858: IFFALSE 6878
// begin usVehicles2 := usVehicles2 diff oldId ;
6860: LD_ADDR_EXP 13
6864: PUSH
6865: LD_EXP 13
6869: PUSH
6870: LD_VAR 0 2
6874: DIFF
6875: ST_TO_ADDR
// end else
6876: GO 6894
// begin usAttackVehicles2 := usAttackVehicles2 diff oldId ;
6878: LD_ADDR_EXP 21
6882: PUSH
6883: LD_EXP 21
6887: PUSH
6888: LD_VAR 0 2
6892: DIFF
6893: ST_TO_ADDR
// end ; end ; end ;
6894: PPOPN 4
6896: END
// on ClassChanged ( un , oldClass , newClass ) do var tag ;
6897: LD_INT 0
6899: PPUSH
// begin tag := GetTag ( un ) ;
6900: LD_ADDR_VAR 0 4
6904: PUSH
6905: LD_VAR 0 1
6909: PPUSH
6910: CALL_OW 110
6914: ST_TO_ADDR
// if GetSide ( un ) in [ 1 , 4 ] then
6915: LD_VAR 0 1
6919: PPUSH
6920: CALL_OW 255
6924: PUSH
6925: LD_INT 1
6927: PUSH
6928: LD_INT 4
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: IN
6935: IFFALSE 6966
// if tag in [ tWannaBeMech , tWannaBeSold ] then
6937: LD_VAR 0 4
6941: PUSH
6942: LD_INT 14
6944: PUSH
6945: LD_INT 16
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: IN
6952: IFFALSE 6966
// SetTag ( un , 0 ) ;
6954: LD_VAR 0 1
6958: PPUSH
6959: LD_INT 0
6961: PPUSH
6962: CALL_OW 109
// end ; end_of_file
6966: PPOPN 4
6968: END
// export function BaseScript ( side , area , cratesArea , innerArea , outerArea , forces , vehicles , techs , constructList , buildingsToBuild , healPoint , parkingPoint , allowToPatrol ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , drivers , hurtUnits , enemy , vehicles2 , ct , cranes , barracks , enemyInBase , enemyOuterBase , empty , fac , emptyTowers , weapon , depot , enemySide ; begin
6969: LD_INT 0
6971: PPUSH
6972: PPUSH
6973: PPUSH
6974: PPUSH
6975: PPUSH
6976: PPUSH
6977: PPUSH
6978: PPUSH
6979: PPUSH
6980: PPUSH
6981: PPUSH
6982: PPUSH
6983: PPUSH
6984: PPUSH
6985: PPUSH
6986: PPUSH
6987: PPUSH
6988: PPUSH
6989: PPUSH
6990: PPUSH
6991: PPUSH
6992: PPUSH
6993: PPUSH
6994: PPUSH
6995: PPUSH
6996: PPUSH
6997: PPUSH
// enable ;
6998: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
6999: LD_ADDR_VAR 0 16
7003: PUSH
7004: LD_INT 81
7006: PUSH
7007: LD_VAR 0 1
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PPUSH
7016: CALL_OW 69
7020: ST_TO_ADDR
// if tmp then
7021: LD_VAR 0 16
7025: IFFALSE 7046
// enemySide := GetSide ( tmp [ 1 ] ) ;
7027: LD_ADDR_VAR 0 40
7031: PUSH
7032: LD_VAR 0 16
7036: PUSH
7037: LD_INT 1
7039: ARRAY
7040: PPUSH
7041: CALL_OW 255
7045: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( innerArea , [ f_enemy , side ] ) ;
7046: LD_ADDR_VAR 0 33
7050: PUSH
7051: LD_VAR 0 4
7055: PPUSH
7056: LD_INT 81
7058: PUSH
7059: LD_VAR 0 1
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PPUSH
7068: CALL_OW 70
7072: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
7073: LD_ADDR_VAR 0 34
7077: PUSH
7078: LD_VAR 0 5
7082: PPUSH
7083: LD_INT 81
7085: PUSH
7086: LD_VAR 0 1
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PPUSH
7095: CALL_OW 70
7099: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7100: LD_ADDR_VAR 0 39
7104: PUSH
7105: LD_VAR 0 2
7109: PPUSH
7110: LD_INT 22
7112: PUSH
7113: LD_VAR 0 1
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PUSH
7122: LD_INT 2
7124: PUSH
7125: LD_INT 30
7127: PUSH
7128: LD_INT 0
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: LD_INT 30
7137: PUSH
7138: LD_INT 1
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: LIST
7149: PUSH
7150: EMPTY
7151: LIST
7152: LIST
7153: PPUSH
7154: CALL_OW 70
7158: ST_TO_ADDR
// if depot then
7159: LD_VAR 0 39
7163: IFFALSE 7179
// depot := depot [ 1 ] ;
7165: LD_ADDR_VAR 0 39
7169: PUSH
7170: LD_VAR 0 39
7174: PUSH
7175: LD_INT 1
7177: ARRAY
7178: ST_TO_ADDR
// fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7179: LD_ADDR_VAR 0 36
7183: PUSH
7184: LD_VAR 0 2
7188: PPUSH
7189: LD_INT 22
7191: PUSH
7192: LD_VAR 0 1
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: PUSH
7201: LD_INT 30
7203: PUSH
7204: LD_INT 3
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: LD_INT 50
7213: PUSH
7214: EMPTY
7215: LIST
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: LIST
7221: PPUSH
7222: CALL_OW 70
7226: ST_TO_ADDR
// barracks := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
7227: LD_ADDR_VAR 0 32
7231: PUSH
7232: LD_VAR 0 2
7236: PPUSH
7237: LD_INT 22
7239: PUSH
7240: LD_VAR 0 1
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PUSH
7249: LD_INT 2
7251: PUSH
7252: LD_INT 30
7254: PUSH
7255: LD_INT 4
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: PUSH
7262: LD_INT 30
7264: PUSH
7265: LD_INT 5
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: LIST
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PPUSH
7281: CALL_OW 70
7285: ST_TO_ADDR
// if Count ( techs ) then
7286: LD_VAR 0 8
7290: PPUSH
7291: CALL 36029 0 1
7295: IFFALSE 7456
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7297: LD_ADDR_VAR 0 18
7301: PUSH
7302: LD_VAR 0 2
7306: PPUSH
7307: LD_INT 22
7309: PUSH
7310: LD_VAR 0 1
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: PUSH
7319: LD_INT 50
7321: PUSH
7322: EMPTY
7323: LIST
7324: PUSH
7325: LD_INT 2
7327: PUSH
7328: LD_INT 30
7330: PUSH
7331: LD_INT 6
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: PUSH
7338: LD_INT 30
7340: PUSH
7341: LD_INT 7
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: PUSH
7348: LD_INT 30
7350: PUSH
7351: LD_INT 8
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: LIST
7368: PPUSH
7369: CALL_OW 70
7373: ST_TO_ADDR
// if lab then
7374: LD_VAR 0 18
7378: IFFALSE 7454
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
7380: LD_VAR 0 18
7384: PUSH
7385: LD_INT 1
7387: ARRAY
7388: PPUSH
7389: CALL_OW 461
7393: PUSH
7394: LD_INT 2
7396: EQUAL
7397: IFFALSE 7454
// begin for i in techs do
7399: LD_ADDR_VAR 0 15
7403: PUSH
7404: LD_VAR 0 8
7408: PUSH
7409: FOR_IN
7410: IFFALSE 7452
// if CanBeResearched ( lab [ 1 ] , i ) then
7412: LD_VAR 0 18
7416: PUSH
7417: LD_INT 1
7419: ARRAY
7420: PPUSH
7421: LD_VAR 0 15
7425: PPUSH
7426: CALL_OW 430
7430: IFFALSE 7450
// begin AddComResearch ( lab [ 1 ] , i ) ;
7432: LD_VAR 0 18
7436: PUSH
7437: LD_INT 1
7439: ARRAY
7440: PPUSH
7441: LD_VAR 0 15
7445: PPUSH
7446: CALL_OW 184
// end ;
7450: GO 7409
7452: POP
7453: POP
// end ; end ; end else
7454: GO 8032
// if UnitFilter ( fac , [ f_not , [ f_full ] ] ) and Count ( UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_tag , 0 ] , [ f_class , 4 ] ] ) ) > 2 then
7456: LD_VAR 0 36
7460: PPUSH
7461: LD_INT 3
7463: PUSH
7464: LD_INT 62
7466: PUSH
7467: EMPTY
7468: LIST
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PPUSH
7474: CALL_OW 72
7478: PUSH
7479: LD_VAR 0 6
7483: PPUSH
7484: LD_INT 3
7486: PUSH
7487: LD_INT 60
7489: PUSH
7490: EMPTY
7491: LIST
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: PUSH
7497: LD_INT 120
7499: PUSH
7500: LD_INT 0
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: PUSH
7507: LD_INT 25
7509: PUSH
7510: LD_INT 4
7512: PUSH
7513: EMPTY
7514: LIST
7515: LIST
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: LIST
7521: PPUSH
7522: CALL_OW 72
7526: PPUSH
7527: CALL 36029 0 1
7531: PUSH
7532: LD_INT 2
7534: GREATER
7535: AND
7536: IFFALSE 7745
// begin tmp := UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_tag , 0 ] , [ f_class , 4 ] ] ) ;
7538: LD_ADDR_VAR 0 16
7542: PUSH
7543: LD_VAR 0 6
7547: PPUSH
7548: LD_INT 3
7550: PUSH
7551: LD_INT 60
7553: PUSH
7554: EMPTY
7555: LIST
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PUSH
7561: LD_INT 120
7563: PUSH
7564: LD_INT 0
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PUSH
7571: LD_INT 25
7573: PUSH
7574: LD_INT 4
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: LIST
7585: PPUSH
7586: CALL_OW 72
7590: ST_TO_ADDR
// for i := tmp downto 2 do
7591: LD_ADDR_VAR 0 15
7595: PUSH
7596: DOUBLE
7597: LD_VAR 0 16
7601: INC
7602: ST_TO_ADDR
7603: LD_INT 2
7605: PUSH
7606: FOR_DOWNTO
7607: IFFALSE 7741
// begin if Count ( UnitsInside ( fac [ 1 ] ) ) + Count ( UnitFilter ( forces , [ f_tag , tWannaBeMech ] ) ) = 6 then
7609: LD_VAR 0 36
7613: PUSH
7614: LD_INT 1
7616: ARRAY
7617: PPUSH
7618: CALL_OW 313
7622: PPUSH
7623: CALL 36029 0 1
7627: PUSH
7628: LD_VAR 0 6
7632: PPUSH
7633: LD_INT 120
7635: PUSH
7636: LD_INT 14
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: PPUSH
7643: CALL_OW 72
7647: PPUSH
7648: CALL 36029 0 1
7652: PLUS
7653: PUSH
7654: LD_INT 6
7656: EQUAL
7657: IFFALSE 7661
// break ;
7659: GO 7741
// sci := tmp [ i ] ;
7661: LD_ADDR_VAR 0 24
7665: PUSH
7666: LD_VAR 0 16
7670: PUSH
7671: LD_VAR 0 15
7675: ARRAY
7676: ST_TO_ADDR
// SetTag ( sci , tWannaBeMech ) ;
7677: LD_VAR 0 24
7681: PPUSH
7682: LD_INT 14
7684: PPUSH
7685: CALL_OW 109
// if IsInUnit ( sci ) then
7689: LD_VAR 0 24
7693: PPUSH
7694: CALL_OW 310
7698: IFFALSE 7709
// ComExitBuilding ( sci ) ;
7700: LD_VAR 0 24
7704: PPUSH
7705: CALL_OW 122
// AddComEnterUnit ( sci , fac [ 1 ] ) ;
7709: LD_VAR 0 24
7713: PPUSH
7714: LD_VAR 0 36
7718: PUSH
7719: LD_INT 1
7721: ARRAY
7722: PPUSH
7723: CALL_OW 180
// AddComChangeProfession ( sci , class_mechanic ) ;
7727: LD_VAR 0 24
7731: PPUSH
7732: LD_INT 3
7734: PPUSH
7735: CALL_OW 183
// end ;
7739: GO 7606
7741: POP
7742: POP
// end else
7743: GO 8032
// if UnitFilter ( barracks , [ f_not , [ f_full ] ] ) and Count ( UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_tag , 0 ] , [ f_class , 4 ] ] ) ) > 2 then
7745: LD_VAR 0 32
7749: PPUSH
7750: LD_INT 3
7752: PUSH
7753: LD_INT 62
7755: PUSH
7756: EMPTY
7757: LIST
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PPUSH
7763: CALL_OW 72
7767: PUSH
7768: LD_VAR 0 6
7772: PPUSH
7773: LD_INT 3
7775: PUSH
7776: LD_INT 60
7778: PUSH
7779: EMPTY
7780: LIST
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: LD_INT 120
7788: PUSH
7789: LD_INT 0
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: PUSH
7796: LD_INT 25
7798: PUSH
7799: LD_INT 4
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: LIST
7810: PPUSH
7811: CALL_OW 72
7815: PPUSH
7816: CALL 36029 0 1
7820: PUSH
7821: LD_INT 2
7823: GREATER
7824: AND
7825: IFFALSE 8032
// begin tmp := UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_tag , 0 ] , [ f_class , 4 ] ] ) ;
7827: LD_ADDR_VAR 0 16
7831: PUSH
7832: LD_VAR 0 6
7836: PPUSH
7837: LD_INT 3
7839: PUSH
7840: LD_INT 60
7842: PUSH
7843: EMPTY
7844: LIST
7845: PUSH
7846: EMPTY
7847: LIST
7848: LIST
7849: PUSH
7850: LD_INT 120
7852: PUSH
7853: LD_INT 0
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: PUSH
7860: LD_INT 25
7862: PUSH
7863: LD_INT 4
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: LIST
7874: PPUSH
7875: CALL_OW 72
7879: ST_TO_ADDR
// for i := tmp downto 2 do
7880: LD_ADDR_VAR 0 15
7884: PUSH
7885: DOUBLE
7886: LD_VAR 0 16
7890: INC
7891: ST_TO_ADDR
7892: LD_INT 2
7894: PUSH
7895: FOR_DOWNTO
7896: IFFALSE 8030
// begin if Count ( UnitsInside ( barracks [ 1 ] ) ) + Count ( UnitFilter ( forces , [ f_tag , tWannaBeSold ] ) ) = 6 then
7898: LD_VAR 0 32
7902: PUSH
7903: LD_INT 1
7905: ARRAY
7906: PPUSH
7907: CALL_OW 313
7911: PPUSH
7912: CALL 36029 0 1
7916: PUSH
7917: LD_VAR 0 6
7921: PPUSH
7922: LD_INT 120
7924: PUSH
7925: LD_INT 16
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PPUSH
7932: CALL_OW 72
7936: PPUSH
7937: CALL 36029 0 1
7941: PLUS
7942: PUSH
7943: LD_INT 6
7945: EQUAL
7946: IFFALSE 7950
// break ;
7948: GO 8030
// sci := tmp [ i ] ;
7950: LD_ADDR_VAR 0 24
7954: PUSH
7955: LD_VAR 0 16
7959: PUSH
7960: LD_VAR 0 15
7964: ARRAY
7965: ST_TO_ADDR
// SetTag ( sci , tWannaBeSold ) ;
7966: LD_VAR 0 24
7970: PPUSH
7971: LD_INT 16
7973: PPUSH
7974: CALL_OW 109
// if IsInUnit ( sci ) then
7978: LD_VAR 0 24
7982: PPUSH
7983: CALL_OW 310
7987: IFFALSE 7998
// ComExitBuilding ( sci ) ;
7989: LD_VAR 0 24
7993: PPUSH
7994: CALL_OW 122
// AddComEnterUnit ( sci , barracks [ 1 ] ) ;
7998: LD_VAR 0 24
8002: PPUSH
8003: LD_VAR 0 32
8007: PUSH
8008: LD_INT 1
8010: ARRAY
8011: PPUSH
8012: CALL_OW 180
// AddComChangeProfession ( sci , class_soldier ) ;
8016: LD_VAR 0 24
8020: PPUSH
8021: LD_INT 1
8023: PPUSH
8024: CALL_OW 183
// end ;
8028: GO 7895
8030: POP
8031: POP
// end ; if fac then
8032: LD_VAR 0 36
8036: IFFALSE 8351
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
8038: LD_VAR 0 36
8042: PUSH
8043: LD_INT 1
8045: ARRAY
8046: PPUSH
8047: CALL_OW 461
8051: PUSH
8052: LD_INT 2
8054: EQUAL
8055: IFFALSE 8351
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
8057: LD_ADDR_VAR 0 37
8061: PUSH
8062: LD_VAR 0 2
8066: PPUSH
8067: LD_INT 2
8069: PUSH
8070: LD_INT 30
8072: PUSH
8073: LD_INT 32
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: PUSH
8080: LD_INT 30
8082: PUSH
8083: LD_INT 33
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: LIST
8094: PUSH
8095: LD_INT 35
8097: PUSH
8098: LD_INT 0
8100: PUSH
8101: EMPTY
8102: LIST
8103: LIST
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: PPUSH
8109: CALL_OW 70
8113: ST_TO_ADDR
// if emptyTowers then
8114: LD_VAR 0 37
8118: IFFALSE 8168
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
8120: LD_ADDR_VAR 0 38
8124: PUSH
8125: LD_VAR 0 37
8129: PUSH
8130: LD_INT 1
8132: ARRAY
8133: PPUSH
8134: LD_VAR 0 2
8138: PPUSH
8139: CALL 44274 0 2
8143: ST_TO_ADDR
// if weapon then
8144: LD_VAR 0 38
8148: IFFALSE 8168
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
8150: LD_VAR 0 37
8154: PUSH
8155: LD_INT 1
8157: ARRAY
8158: PPUSH
8159: LD_VAR 0 38
8163: PPUSH
8164: CALL_OW 148
// end ; if constructList then
8168: LD_VAR 0 9
8172: IFFALSE 8351
// for i := 1 to Count ( constructList ) do
8174: LD_ADDR_VAR 0 15
8178: PUSH
8179: DOUBLE
8180: LD_INT 1
8182: DEC
8183: ST_TO_ADDR
8184: LD_VAR 0 9
8188: PPUSH
8189: CALL 36029 0 1
8193: PUSH
8194: FOR_TO
8195: IFFALSE 8349
// begin if CanBeConstructed ( fac [ 1 ] , constructList [ i ] [ 1 ] , constructList [ i ] [ 2 ] , constructList [ i ] [ 3 ] , constructList [ i ] [ 4 ] ) then
8197: LD_VAR 0 36
8201: PUSH
8202: LD_INT 1
8204: ARRAY
8205: PPUSH
8206: LD_VAR 0 9
8210: PUSH
8211: LD_VAR 0 15
8215: ARRAY
8216: PUSH
8217: LD_INT 1
8219: ARRAY
8220: PPUSH
8221: LD_VAR 0 9
8225: PUSH
8226: LD_VAR 0 15
8230: ARRAY
8231: PUSH
8232: LD_INT 2
8234: ARRAY
8235: PPUSH
8236: LD_VAR 0 9
8240: PUSH
8241: LD_VAR 0 15
8245: ARRAY
8246: PUSH
8247: LD_INT 3
8249: ARRAY
8250: PPUSH
8251: LD_VAR 0 9
8255: PUSH
8256: LD_VAR 0 15
8260: ARRAY
8261: PUSH
8262: LD_INT 4
8264: ARRAY
8265: PPUSH
8266: CALL_OW 448
8270: IFFALSE 8347
// begin ComConstruct ( fac [ 1 ] , constructList [ i ] [ 1 ] , constructList [ i ] [ 2 ] , constructList [ i ] [ 3 ] , constructList [ i ] [ 4 ] ) ;
8272: LD_VAR 0 36
8276: PUSH
8277: LD_INT 1
8279: ARRAY
8280: PPUSH
8281: LD_VAR 0 9
8285: PUSH
8286: LD_VAR 0 15
8290: ARRAY
8291: PUSH
8292: LD_INT 1
8294: ARRAY
8295: PPUSH
8296: LD_VAR 0 9
8300: PUSH
8301: LD_VAR 0 15
8305: ARRAY
8306: PUSH
8307: LD_INT 2
8309: ARRAY
8310: PPUSH
8311: LD_VAR 0 9
8315: PUSH
8316: LD_VAR 0 15
8320: ARRAY
8321: PUSH
8322: LD_INT 3
8324: ARRAY
8325: PPUSH
8326: LD_VAR 0 9
8330: PUSH
8331: LD_VAR 0 15
8335: ARRAY
8336: PUSH
8337: LD_INT 4
8339: ARRAY
8340: PPUSH
8341: CALL_OW 125
// break ;
8345: GO 8349
// end ; end ;
8347: GO 8194
8349: POP
8350: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8351: LD_ADDR_VAR 0 16
8355: PUSH
8356: LD_VAR 0 2
8360: PPUSH
8361: LD_INT 22
8363: PUSH
8364: LD_VAR 0 1
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PUSH
8373: LD_INT 21
8375: PUSH
8376: LD_INT 3
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: PUSH
8383: LD_INT 3
8385: PUSH
8386: LD_INT 57
8388: PUSH
8389: EMPTY
8390: LIST
8391: PUSH
8392: EMPTY
8393: LIST
8394: LIST
8395: PUSH
8396: LD_INT 3
8398: PUSH
8399: LD_INT 24
8401: PUSH
8402: LD_INT 1000
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: PPUSH
8419: CALL_OW 70
8423: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
8424: LD_ADDR_VAR 0 23
8428: PUSH
8429: LD_VAR 0 2
8433: PPUSH
8434: CALL_OW 435
8438: ST_TO_ADDR
// if cratesArea then
8439: LD_VAR 0 3
8443: IFFALSE 8466
// cr := cr union GetListOfCratesInArea ( cratesArea ) ;
8445: LD_ADDR_VAR 0 23
8449: PUSH
8450: LD_VAR 0 23
8454: PUSH
8455: LD_VAR 0 3
8459: PPUSH
8460: CALL_OW 435
8464: UNION
8465: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
8466: LD_ADDR_VAR 0 20
8470: PUSH
8471: LD_VAR 0 6
8475: PPUSH
8476: LD_INT 25
8478: PUSH
8479: LD_INT 3
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: PUSH
8486: LD_INT 50
8488: PUSH
8489: EMPTY
8490: LIST
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PPUSH
8496: CALL_OW 72
8500: ST_TO_ADDR
// if fac then
8501: LD_VAR 0 36
8505: IFFALSE 8660
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_tag , tControlRemoteMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
8507: LD_VAR 0 20
8511: PPUSH
8512: LD_INT 3
8514: PUSH
8515: LD_INT 120
8517: PUSH
8518: LD_INT 7
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: PUSH
8529: LD_INT 3
8531: PUSH
8532: LD_INT 120
8534: PUSH
8535: LD_INT 17
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: PUSH
8546: LD_INT 3
8548: PUSH
8549: LD_INT 54
8551: PUSH
8552: EMPTY
8553: LIST
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: LIST
8563: PPUSH
8564: CALL_OW 72
8568: PUSH
8569: LD_VAR 0 36
8573: PUSH
8574: LD_INT 1
8576: ARRAY
8577: PPUSH
8578: CALL_OW 302
8582: AND
8583: IFFALSE 8660
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_tag , tControlRemoteMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
8585: LD_VAR 0 20
8589: PPUSH
8590: LD_INT 3
8592: PUSH
8593: LD_INT 120
8595: PUSH
8596: LD_INT 7
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: PUSH
8607: LD_INT 3
8609: PUSH
8610: LD_INT 120
8612: PUSH
8613: LD_INT 17
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: LD_INT 3
8626: PUSH
8627: LD_INT 54
8629: PUSH
8630: EMPTY
8631: LIST
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: LIST
8641: PPUSH
8642: CALL_OW 72
8646: PPUSH
8647: LD_VAR 0 36
8651: PUSH
8652: LD_INT 1
8654: ARRAY
8655: PPUSH
8656: CALL_OW 120
// ct := FilterUnitsInArea ( area , [ [ f_ok ] , [ f_not , [ f_full ] ] , [ f_btype , b_control_tower ] ] ) ;
8660: LD_ADDR_VAR 0 30
8664: PUSH
8665: LD_VAR 0 2
8669: PPUSH
8670: LD_INT 50
8672: PUSH
8673: EMPTY
8674: LIST
8675: PUSH
8676: LD_INT 3
8678: PUSH
8679: LD_INT 62
8681: PUSH
8682: EMPTY
8683: LIST
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: PUSH
8689: LD_INT 30
8691: PUSH
8692: LD_INT 36
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: LIST
8703: PPUSH
8704: CALL_OW 70
8708: ST_TO_ADDR
// if ct then
8709: LD_VAR 0 30
8713: IFFALSE 8869
// if Count ( UnitFilter ( mech , [ [ f_tag , tControlRemoteMech ] , [ f_class , 3 ] ] ) ) < 3 then
8715: LD_VAR 0 20
8719: PPUSH
8720: LD_INT 120
8722: PUSH
8723: LD_INT 17
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: PUSH
8730: LD_INT 25
8732: PUSH
8733: LD_INT 3
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PPUSH
8744: CALL_OW 72
8748: PPUSH
8749: CALL 36029 0 1
8753: PUSH
8754: LD_INT 3
8756: LESS
8757: IFFALSE 8869
// begin tmp := UnitFilter ( mech , [ [ f_not , [ f_hastask ] ] , [ f_tag , 0 ] , [ f_class , 3 ] ] ) ;
8759: LD_ADDR_VAR 0 16
8763: PUSH
8764: LD_VAR 0 20
8768: PPUSH
8769: LD_INT 3
8771: PUSH
8772: LD_INT 60
8774: PUSH
8775: EMPTY
8776: LIST
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: PUSH
8782: LD_INT 120
8784: PUSH
8785: LD_INT 0
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PUSH
8792: LD_INT 25
8794: PUSH
8795: LD_INT 3
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: LIST
8806: PPUSH
8807: CALL_OW 72
8811: ST_TO_ADDR
// if tmp then
8812: LD_VAR 0 16
8816: IFFALSE 8869
// begin SetTag ( tmp [ 1 ] , tControlRemoteMech ) ;
8818: LD_VAR 0 16
8822: PUSH
8823: LD_INT 1
8825: ARRAY
8826: PPUSH
8827: LD_INT 17
8829: PPUSH
8830: CALL_OW 109
// ComExit ( tmp [ 1 ] ) ;
8834: LD_VAR 0 16
8838: PUSH
8839: LD_INT 1
8841: ARRAY
8842: PPUSH
8843: CALL 72177 0 1
// AddComEnterUnit ( tmp [ 1 ] , ct [ 1 ] ) ;
8847: LD_VAR 0 16
8851: PUSH
8852: LD_INT 1
8854: ARRAY
8855: PPUSH
8856: LD_VAR 0 30
8860: PUSH
8861: LD_INT 1
8863: ARRAY
8864: PPUSH
8865: CALL_OW 180
// end ; end ; sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_not , [ f_tag , tWannaBeSold ] ] , [ f_not , [ f_tag , tWannaBeMech ] ] , [ f_ok ] ] ) ;
8869: LD_ADDR_VAR 0 24
8873: PUSH
8874: LD_VAR 0 6
8878: PPUSH
8879: LD_INT 25
8881: PUSH
8882: LD_INT 4
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: PUSH
8889: LD_INT 3
8891: PUSH
8892: LD_INT 120
8894: PUSH
8895: LD_INT 16
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: PUSH
8906: LD_INT 3
8908: PUSH
8909: LD_INT 120
8911: PUSH
8912: LD_INT 14
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: LD_INT 50
8925: PUSH
8926: EMPTY
8927: LIST
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: PPUSH
8935: CALL_OW 72
8939: ST_TO_ADDR
// lab := FilterUnitsInarea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
8940: LD_ADDR_VAR 0 18
8944: PUSH
8945: LD_VAR 0 2
8949: PPUSH
8950: LD_INT 2
8952: PUSH
8953: LD_INT 30
8955: PUSH
8956: LD_INT 6
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: PUSH
8963: LD_INT 30
8965: PUSH
8966: LD_INT 7
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: PUSH
8973: LD_INT 30
8975: PUSH
8976: LD_INT 8
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: PPUSH
8989: CALL_OW 70
8993: ST_TO_ADDR
// if sci then
8994: LD_VAR 0 24
8998: IFFALSE 9159
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
9000: LD_ADDR_VAR 0 27
9004: PUSH
9005: LD_VAR 0 6
9009: PPUSH
9010: LD_INT 95
9012: PUSH
9013: LD_VAR 0 2
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: PUSH
9022: LD_INT 120
9024: PUSH
9025: LD_INT 1
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: PPUSH
9036: CALL_OW 72
9040: ST_TO_ADDR
// if hurtUnits then
9041: LD_VAR 0 27
9045: IFFALSE 9106
// begin for i in sci do
9047: LD_ADDR_VAR 0 15
9051: PUSH
9052: LD_VAR 0 24
9056: PUSH
9057: FOR_IN
9058: IFFALSE 9102
// if IsInUnit ( i ) then
9060: LD_VAR 0 15
9064: PPUSH
9065: CALL_OW 310
9069: IFFALSE 9082
// ComExitBuilding ( i ) else
9071: LD_VAR 0 15
9075: PPUSH
9076: CALL_OW 122
9080: GO 9100
// ComHeal ( i , hurtUnits [ 1 ] ) ;
9082: LD_VAR 0 15
9086: PPUSH
9087: LD_VAR 0 27
9091: PUSH
9092: LD_INT 1
9094: ARRAY
9095: PPUSH
9096: CALL_OW 128
9100: GO 9057
9102: POP
9103: POP
// end else
9104: GO 9159
// if lab then
9106: LD_VAR 0 18
9110: IFFALSE 9159
// begin for i in sci do
9112: LD_ADDR_VAR 0 15
9116: PUSH
9117: LD_VAR 0 24
9121: PUSH
9122: FOR_IN
9123: IFFALSE 9157
// if not IsInUnit ( i ) then
9125: LD_VAR 0 15
9129: PPUSH
9130: CALL_OW 310
9134: NOT
9135: IFFALSE 9155
// ComEnterUnit ( i , lab [ 1 ] ) ;
9137: LD_VAR 0 15
9141: PPUSH
9142: LD_VAR 0 18
9146: PUSH
9147: LD_INT 1
9149: ARRAY
9150: PPUSH
9151: CALL_OW 120
9155: GO 9122
9157: POP
9158: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
9159: LD_ADDR_VAR 0 19
9163: PUSH
9164: LD_VAR 0 6
9168: PPUSH
9169: LD_INT 25
9171: PUSH
9172: LD_INT 2
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: PPUSH
9179: CALL_OW 72
9183: ST_TO_ADDR
// if eng then
9184: LD_VAR 0 19
9188: IFFALSE 10387
// begin for i in eng do
9190: LD_ADDR_VAR 0 15
9194: PUSH
9195: LD_VAR 0 19
9199: PUSH
9200: FOR_IN
9201: IFFALSE 10385
// begin tag := GetTag ( i ) ;
9203: LD_ADDR_VAR 0 21
9207: PUSH
9208: LD_VAR 0 15
9212: PPUSH
9213: CALL_OW 110
9217: ST_TO_ADDR
// if IsInArea ( i , outerArea ) and not tCrates then
9218: LD_VAR 0 15
9222: PPUSH
9223: LD_VAR 0 5
9227: PPUSH
9228: CALL_OW 308
9232: PUSH
9233: LD_INT 2
9235: NOT
9236: AND
9237: IFFALSE 9268
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
9239: LD_VAR 0 15
9243: PPUSH
9244: LD_VAR 0 12
9248: PUSH
9249: LD_INT 1
9251: ARRAY
9252: PPUSH
9253: LD_VAR 0 12
9257: PUSH
9258: LD_INT 2
9260: ARRAY
9261: PPUSH
9262: CALL_OW 111
// continue ;
9266: GO 9200
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
9268: LD_VAR 0 15
9272: PPUSH
9273: CALL_OW 256
9277: PUSH
9278: LD_INT 800
9280: LESS
9281: PUSH
9282: LD_VAR 0 21
9286: PUSH
9287: LD_INT 1
9289: NONEQUAL
9290: AND
9291: IFFALSE 9341
// begin SetTag ( i , tHeal ) ;
9293: LD_VAR 0 15
9297: PPUSH
9298: LD_INT 1
9300: PPUSH
9301: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
9305: LD_VAR 0 15
9309: PPUSH
9310: LD_VAR 0 11
9314: PUSH
9315: LD_INT 1
9317: ARRAY
9318: PPUSH
9319: LD_VAR 0 11
9323: PUSH
9324: LD_INT 2
9326: ARRAY
9327: PPUSH
9328: CALL_OW 111
// AddComHold ( i ) ;
9332: LD_VAR 0 15
9336: PPUSH
9337: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
9341: LD_VAR 0 21
9345: PUSH
9346: LD_INT 1
9348: EQUAL
9349: PUSH
9350: LD_VAR 0 15
9354: PPUSH
9355: CALL_OW 256
9359: PUSH
9360: LD_INT 1000
9362: EQUAL
9363: AND
9364: IFFALSE 9378
// SetTag ( i , 0 ) ;
9366: LD_VAR 0 15
9370: PPUSH
9371: LD_INT 0
9373: PPUSH
9374: CALL_OW 109
// if not tag then
9378: LD_VAR 0 21
9382: NOT
9383: IFFALSE 9550
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
9385: LD_ADDR_VAR 0 17
9389: PUSH
9390: LD_VAR 0 2
9394: PPUSH
9395: LD_INT 57
9397: PUSH
9398: EMPTY
9399: LIST
9400: PPUSH
9401: CALL_OW 70
9405: ST_TO_ADDR
// if undone then
9406: LD_VAR 0 17
9410: IFFALSE 9432
// begin ComComplete ( i , undone [ 1 ] ) ;
9412: LD_VAR 0 15
9416: PPUSH
9417: LD_VAR 0 17
9421: PUSH
9422: LD_INT 1
9424: ARRAY
9425: PPUSH
9426: CALL 42127 0 2
// continue ;
9430: GO 9200
// end ; if cr or tmp or buildingsToBuild then
9432: LD_VAR 0 23
9436: PUSH
9437: LD_VAR 0 16
9441: OR
9442: PUSH
9443: LD_VAR 0 10
9447: OR
9448: IFFALSE 9524
// begin if IsInUnit ( i ) then
9450: LD_VAR 0 15
9454: PPUSH
9455: CALL_OW 310
9459: IFFALSE 9470
// ComExitBuilding ( i ) ;
9461: LD_VAR 0 15
9465: PPUSH
9466: CALL_OW 122
// if tmp then
9470: LD_VAR 0 16
9474: IFFALSE 9490
// SetTag ( i , tRepair ) else
9476: LD_VAR 0 15
9480: PPUSH
9481: LD_INT 3
9483: PPUSH
9484: CALL_OW 109
9488: GO 9522
// if cr then
9490: LD_VAR 0 23
9494: IFFALSE 9510
// SetTag ( i , tCrates ) else
9496: LD_VAR 0 15
9500: PPUSH
9501: LD_INT 2
9503: PPUSH
9504: CALL_OW 109
9508: GO 9522
// SetTag ( i , tBuild ) ;
9510: LD_VAR 0 15
9514: PPUSH
9515: LD_INT 5
9517: PPUSH
9518: CALL_OW 109
// end else
9522: GO 9550
// if not IsInUnit ( i ) then
9524: LD_VAR 0 15
9528: PPUSH
9529: CALL_OW 310
9533: NOT
9534: IFFALSE 9550
// ComEnterUnit ( i , depot ) ;
9536: LD_VAR 0 15
9540: PPUSH
9541: LD_VAR 0 39
9545: PPUSH
9546: CALL_OW 120
// end ; if tag = tRepair then
9550: LD_VAR 0 21
9554: PUSH
9555: LD_INT 3
9557: EQUAL
9558: IFFALSE 9664
// begin if IsInUnit ( i ) then
9560: LD_VAR 0 15
9564: PPUSH
9565: CALL_OW 310
9569: IFFALSE 9582
// begin ComExitBuilding ( i ) ;
9571: LD_VAR 0 15
9575: PPUSH
9576: CALL_OW 122
// continue ;
9580: GO 9200
// end ; if not tmp then
9582: LD_VAR 0 16
9586: NOT
9587: IFFALSE 9603
// begin SetTag ( i , 0 ) ;
9589: LD_VAR 0 15
9593: PPUSH
9594: LD_INT 0
9596: PPUSH
9597: CALL_OW 109
// continue ;
9601: GO 9200
// end ; if not HasTask ( i ) then
9603: LD_VAR 0 15
9607: PPUSH
9608: CALL_OW 314
9612: NOT
9613: IFFALSE 9633
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
9615: LD_VAR 0 15
9619: PPUSH
9620: LD_VAR 0 16
9624: PUSH
9625: LD_INT 1
9627: ARRAY
9628: PPUSH
9629: CALL_OW 130
// if not IsInarea ( i , area ) then
9633: LD_VAR 0 15
9637: PPUSH
9638: LD_VAR 0 2
9642: PPUSH
9643: CALL_OW 308
9647: NOT
9648: IFFALSE 9664
// ComMoveToArea ( i , area ) ;
9650: LD_VAR 0 15
9654: PPUSH
9655: LD_VAR 0 2
9659: PPUSH
9660: CALL_OW 113
// end ; if tag = tBuild then
9664: LD_VAR 0 21
9668: PUSH
9669: LD_INT 5
9671: EQUAL
9672: IFFALSE 10238
// begin if IsInUnit ( i ) then
9674: LD_VAR 0 15
9678: PPUSH
9679: CALL_OW 310
9683: IFFALSE 9696
// begin ComExitBuilding ( i ) ;
9685: LD_VAR 0 15
9689: PPUSH
9690: CALL_OW 122
// continue ;
9694: GO 9200
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
9696: LD_VAR 0 10
9700: NOT
9701: PUSH
9702: LD_VAR 0 33
9706: OR
9707: PUSH
9708: LD_VAR 0 34
9712: OR
9713: IFFALSE 9731
// begin SetTag ( i , 0 ) ;
9715: LD_VAR 0 15
9719: PPUSH
9720: LD_INT 0
9722: PPUSH
9723: CALL_OW 109
// continue ;
9727: GO 9200
// end else
9729: GO 9770
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
9731: LD_VAR 0 39
9735: PPUSH
9736: LD_VAR 0 10
9740: PUSH
9741: LD_INT 1
9743: ARRAY
9744: PUSH
9745: LD_INT 1
9747: ARRAY
9748: PPUSH
9749: CALL 75842 0 2
9753: NOT
9754: IFFALSE 9770
// begin SetTag ( i , 0 ) ;
9756: LD_VAR 0 15
9760: PPUSH
9761: LD_INT 0
9763: PPUSH
9764: CALL_OW 109
// continue ;
9768: GO 9200
// end ; undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
9770: LD_ADDR_VAR 0 17
9774: PUSH
9775: LD_VAR 0 2
9779: PPUSH
9780: LD_INT 57
9782: PUSH
9783: EMPTY
9784: LIST
9785: PPUSH
9786: CALL_OW 70
9790: ST_TO_ADDR
// if undone then
9791: LD_VAR 0 17
9795: IFFALSE 9817
// begin ComComplete ( i , undone [ 1 ] ) ;
9797: LD_VAR 0 15
9801: PPUSH
9802: LD_VAR 0 17
9806: PUSH
9807: LD_INT 1
9809: ARRAY
9810: PPUSH
9811: CALL 42127 0 2
// continue ;
9815: GO 9200
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_factory , b_barracks ] then
9817: LD_VAR 0 10
9821: PUSH
9822: LD_INT 1
9824: ARRAY
9825: PUSH
9826: LD_INT 1
9828: ARRAY
9829: PUSH
9830: LD_INT 3
9832: PUSH
9833: LD_INT 5
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: IN
9840: IFFALSE 9935
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) and CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
9842: LD_VAR 0 10
9846: PUSH
9847: LD_INT 1
9849: ARRAY
9850: PUSH
9851: LD_INT 2
9853: ARRAY
9854: PPUSH
9855: LD_VAR 0 10
9859: PUSH
9860: LD_INT 1
9862: ARRAY
9863: PUSH
9864: LD_INT 3
9866: ARRAY
9867: PPUSH
9868: CALL_OW 428
9872: PUSH
9873: LD_VAR 0 39
9877: PPUSH
9878: LD_VAR 0 10
9882: PUSH
9883: LD_INT 1
9885: ARRAY
9886: PUSH
9887: LD_INT 1
9889: ARRAY
9890: PPUSH
9891: CALL 75842 0 2
9895: AND
9896: IFFALSE 9933
// begin ComUpgrade ( HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) ) ;
9898: LD_VAR 0 10
9902: PUSH
9903: LD_INT 1
9905: ARRAY
9906: PUSH
9907: LD_INT 2
9909: ARRAY
9910: PPUSH
9911: LD_VAR 0 10
9915: PUSH
9916: LD_INT 1
9918: ARRAY
9919: PUSH
9920: LD_INT 3
9922: ARRAY
9923: PPUSH
9924: CALL_OW 428
9928: PPUSH
9929: CALL_OW 146
// end ; continue ;
9933: GO 9200
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_lab_half , b_lab_full ] then
9935: LD_VAR 0 10
9939: PUSH
9940: LD_INT 1
9942: ARRAY
9943: PUSH
9944: LD_INT 1
9946: ARRAY
9947: PUSH
9948: LD_INT 7
9950: PUSH
9951: LD_INT 8
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: IN
9958: IFFALSE 10066
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) and CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
9960: LD_VAR 0 10
9964: PUSH
9965: LD_INT 1
9967: ARRAY
9968: PUSH
9969: LD_INT 2
9971: ARRAY
9972: PPUSH
9973: LD_VAR 0 10
9977: PUSH
9978: LD_INT 1
9980: ARRAY
9981: PUSH
9982: LD_INT 3
9984: ARRAY
9985: PPUSH
9986: CALL_OW 428
9990: PUSH
9991: LD_VAR 0 39
9995: PPUSH
9996: LD_VAR 0 10
10000: PUSH
10001: LD_INT 1
10003: ARRAY
10004: PUSH
10005: LD_INT 1
10007: ARRAY
10008: PPUSH
10009: CALL 75842 0 2
10013: AND
10014: IFFALSE 10064
// begin ComUpgradeLab ( HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) , buildingsToBuild [ 1 ] [ 5 ] ) ;
10016: LD_VAR 0 10
10020: PUSH
10021: LD_INT 1
10023: ARRAY
10024: PUSH
10025: LD_INT 2
10027: ARRAY
10028: PPUSH
10029: LD_VAR 0 10
10033: PUSH
10034: LD_INT 1
10036: ARRAY
10037: PUSH
10038: LD_INT 3
10040: ARRAY
10041: PPUSH
10042: CALL_OW 428
10046: PPUSH
10047: LD_VAR 0 10
10051: PUSH
10052: LD_INT 1
10054: ARRAY
10055: PUSH
10056: LD_INT 5
10058: ARRAY
10059: PPUSH
10060: CALL_OW 147
// end ; continue ;
10064: GO 9200
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_bunker , b_turret ] then
10066: LD_VAR 0 10
10070: PUSH
10071: LD_INT 1
10073: ARRAY
10074: PUSH
10075: LD_INT 1
10077: ARRAY
10078: PUSH
10079: LD_INT 32
10081: PUSH
10082: LD_INT 33
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: IN
10089: IFFALSE 10165
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) then
10091: LD_VAR 0 10
10095: PUSH
10096: LD_INT 1
10098: ARRAY
10099: PUSH
10100: LD_INT 2
10102: ARRAY
10103: PPUSH
10104: LD_VAR 0 10
10108: PUSH
10109: LD_INT 1
10111: ARRAY
10112: PUSH
10113: LD_INT 3
10115: ARRAY
10116: PPUSH
10117: CALL_OW 428
10121: IFFALSE 10165
// begin ComDismantle ( i , HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) ) ;
10123: LD_VAR 0 15
10127: PPUSH
10128: LD_VAR 0 10
10132: PUSH
10133: LD_INT 1
10135: ARRAY
10136: PUSH
10137: LD_INT 2
10139: ARRAY
10140: PPUSH
10141: LD_VAR 0 10
10145: PUSH
10146: LD_INT 1
10148: ARRAY
10149: PUSH
10150: LD_INT 3
10152: ARRAY
10153: PPUSH
10154: CALL_OW 428
10158: PPUSH
10159: CALL_OW 167
// continue ;
10163: GO 9200
// end ; end ; if not HasTask ( i ) then
10165: LD_VAR 0 15
10169: PPUSH
10170: CALL_OW 314
10174: NOT
10175: IFFALSE 10238
// ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
10177: LD_VAR 0 15
10181: PPUSH
10182: LD_VAR 0 10
10186: PUSH
10187: LD_INT 1
10189: ARRAY
10190: PUSH
10191: LD_INT 1
10193: ARRAY
10194: PPUSH
10195: LD_VAR 0 10
10199: PUSH
10200: LD_INT 1
10202: ARRAY
10203: PUSH
10204: LD_INT 2
10206: ARRAY
10207: PPUSH
10208: LD_VAR 0 10
10212: PUSH
10213: LD_INT 1
10215: ARRAY
10216: PUSH
10217: LD_INT 3
10219: ARRAY
10220: PPUSH
10221: LD_VAR 0 10
10225: PUSH
10226: LD_INT 1
10228: ARRAY
10229: PUSH
10230: LD_INT 4
10232: ARRAY
10233: PPUSH
10234: CALL_OW 145
// end ; if tag = tCrates then
10238: LD_VAR 0 21
10242: PUSH
10243: LD_INT 2
10245: EQUAL
10246: IFFALSE 10383
// begin if IsInUnit ( i ) then
10248: LD_VAR 0 15
10252: PPUSH
10253: CALL_OW 310
10257: IFFALSE 10270
// begin ComExitBuilding ( i ) ;
10259: LD_VAR 0 15
10263: PPUSH
10264: CALL_OW 122
// continue ;
10268: GO 9200
// end ; if not cr then
10270: LD_VAR 0 23
10274: NOT
10275: IFFALSE 10291
// begin SetTag ( i , 0 ) ;
10277: LD_VAR 0 15
10281: PPUSH
10282: LD_INT 0
10284: PPUSH
10285: CALL_OW 109
// continue ;
10289: GO 9200
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
10291: LD_VAR 0 15
10295: PPUSH
10296: CALL_OW 314
10300: NOT
10301: PUSH
10302: LD_INT 81
10304: PUSH
10305: LD_VAR 0 1
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: PUSH
10314: LD_INT 92
10316: PUSH
10317: LD_VAR 0 23
10321: PUSH
10322: LD_INT 1
10324: ARRAY
10325: PUSH
10326: LD_VAR 0 23
10330: PUSH
10331: LD_INT 2
10333: ARRAY
10334: PUSH
10335: LD_INT 12
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PPUSH
10348: CALL_OW 69
10352: NOT
10353: AND
10354: IFFALSE 10383
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
10356: LD_VAR 0 15
10360: PPUSH
10361: LD_VAR 0 23
10365: PUSH
10366: LD_INT 1
10368: ARRAY
10369: PPUSH
10370: LD_VAR 0 23
10374: PUSH
10375: LD_INT 2
10377: ARRAY
10378: PPUSH
10379: CALL_OW 117
// end ; end ;
10383: GO 9200
10385: POP
10386: POP
// end ; cranes := UnitFilter ( vehicles , [ [ f_weapon , us_crane ] , [ f_ok ] ] ) ;
10387: LD_ADDR_VAR 0 31
10391: PUSH
10392: LD_VAR 0 7
10396: PPUSH
10397: LD_INT 34
10399: PUSH
10400: LD_INT 13
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 50
10409: PUSH
10410: EMPTY
10411: LIST
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PPUSH
10417: CALL_OW 72
10421: ST_TO_ADDR
// if cranes then
10422: LD_VAR 0 31
10426: IFFALSE 10491
// begin if tmp then
10428: LD_VAR 0 16
10432: IFFALSE 10477
// begin for i in cranes do
10434: LD_ADDR_VAR 0 15
10438: PUSH
10439: LD_VAR 0 31
10443: PUSH
10444: FOR_IN
10445: IFFALSE 10473
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
10447: LD_VAR 0 15
10451: PPUSH
10452: LD_VAR 0 16
10456: PPUSH
10457: LD_VAR 0 15
10461: PPUSH
10462: CALL_OW 74
10466: PPUSH
10467: CALL_OW 130
10471: GO 10444
10473: POP
10474: POP
// end else
10475: GO 10491
// ComBackOnParking ( cranes , parkingPoint ) ;
10477: LD_VAR 0 31
10481: PPUSH
10482: LD_VAR 0 12
10486: PPUSH
10487: CALL 76736 0 2
// end ; vehicles2 := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] ] ) ;
10491: LD_ADDR_VAR 0 29
10495: PUSH
10496: LD_INT 22
10498: PUSH
10499: LD_VAR 0 1
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PUSH
10508: LD_INT 33
10510: PUSH
10511: LD_INT 2
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PPUSH
10522: CALL_OW 69
10526: ST_TO_ADDR
// if vehicles2 then
10527: LD_VAR 0 29
10531: IFFALSE 10598
// for i in UnitFilter ( vehicles2 , [ [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do
10533: LD_ADDR_VAR 0 15
10537: PUSH
10538: LD_VAR 0 29
10542: PPUSH
10543: LD_INT 33
10545: PUSH
10546: LD_INT 2
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 50
10555: PUSH
10556: EMPTY
10557: LIST
10558: PUSH
10559: LD_INT 3
10561: PUSH
10562: LD_INT 61
10564: PUSH
10565: EMPTY
10566: LIST
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: LIST
10576: PPUSH
10577: CALL_OW 72
10581: PUSH
10582: FOR_IN
10583: IFFALSE 10596
// Connect ( i ) ;
10585: LD_VAR 0 15
10589: PPUSH
10590: CALL 42235 0 1
10594: GO 10582
10596: POP
10597: POP
// if vehicles then
10598: LD_VAR 0 7
10602: IFFALSE 11650
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ru_crane ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , us_cargo_bay ] ] ] , [ f_ok ] ] ) ;
10604: LD_ADDR_VAR 0 7
10608: PUSH
10609: LD_VAR 0 7
10613: PPUSH
10614: LD_INT 3
10616: PUSH
10617: LD_INT 2
10619: PUSH
10620: LD_INT 34
10622: PUSH
10623: LD_INT 52
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: PUSH
10630: LD_INT 34
10632: PUSH
10633: LD_INT 51
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: PUSH
10640: LD_INT 34
10642: PUSH
10643: LD_INT 13
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: PUSH
10650: LD_INT 34
10652: PUSH
10653: LD_INT 12
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: PUSH
10667: EMPTY
10668: LIST
10669: LIST
10670: PUSH
10671: LD_INT 50
10673: PUSH
10674: EMPTY
10675: LIST
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PPUSH
10681: CALL_OW 72
10685: ST_TO_ADDR
// if vehicles then
10686: LD_VAR 0 7
10690: IFFALSE 11650
// begin for i in vehicles do
10692: LD_ADDR_VAR 0 15
10696: PUSH
10697: LD_VAR 0 7
10701: PUSH
10702: FOR_IN
10703: IFFALSE 11648
// begin tag := GetTag ( i ) ;
10705: LD_ADDR_VAR 0 21
10709: PUSH
10710: LD_VAR 0 15
10714: PPUSH
10715: CALL_OW 110
10719: ST_TO_ADDR
// if not tag then
10720: LD_VAR 0 21
10724: NOT
10725: IFFALSE 10862
// begin if GetControl ( i ) = control_manual then
10727: LD_VAR 0 15
10731: PPUSH
10732: CALL_OW 263
10736: PUSH
10737: LD_INT 1
10739: EQUAL
10740: IFFALSE 10848
// begin drivers := UnitFilter ( mech , [ f_tag , tMech ] ) ;
10742: LD_ADDR_VAR 0 26
10746: PUSH
10747: LD_VAR 0 20
10751: PPUSH
10752: LD_INT 120
10754: PUSH
10755: LD_INT 7
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: PPUSH
10762: CALL_OW 72
10766: ST_TO_ADDR
// if not drivers then
10767: LD_VAR 0 26
10771: NOT
10772: IFFALSE 10828
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
10774: LD_ADDR_VAR 0 26
10778: PUSH
10779: LD_VAR 0 20
10783: PPUSH
10784: LD_INT 3
10786: PUSH
10787: LD_INT 120
10789: PUSH
10790: LD_INT 7
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PPUSH
10801: CALL_OW 72
10805: ST_TO_ADDR
// if drivers then
10806: LD_VAR 0 26
10810: IFFALSE 10828
// begin SetTag ( drivers [ 1 ] , tMech ) ;
10812: LD_VAR 0 26
10816: PUSH
10817: LD_INT 1
10819: ARRAY
10820: PPUSH
10821: LD_INT 7
10823: PPUSH
10824: CALL_OW 109
// end ; end ; if drivers then
10828: LD_VAR 0 26
10832: IFFALSE 10846
// SetTag ( i , tBusy ) ;
10834: LD_VAR 0 15
10838: PPUSH
10839: LD_INT 8
10841: PPUSH
10842: CALL_OW 109
// continue ;
10846: GO 10702
// end ; SetTag ( i , tBusy ) ;
10848: LD_VAR 0 15
10852: PPUSH
10853: LD_INT 8
10855: PPUSH
10856: CALL_OW 109
// end else
10860: GO 11646
// if tag = tBusy then
10862: LD_VAR 0 21
10866: PUSH
10867: LD_INT 8
10869: EQUAL
10870: IFFALSE 11117
// begin if GetLives ( i ) = 1000 then
10872: LD_VAR 0 15
10876: PPUSH
10877: CALL_OW 256
10881: PUSH
10882: LD_INT 1000
10884: EQUAL
10885: IFFALSE 11115
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
10887: LD_VAR 0 15
10891: PPUSH
10892: CALL_OW 263
10896: PUSH
10897: LD_INT 1
10899: EQUAL
10900: PUSH
10901: LD_VAR 0 15
10905: PPUSH
10906: CALL_OW 311
10910: NOT
10911: AND
10912: IFFALSE 11083
// begin drivers := UnitFilter ( mech , [ f_tag , tMech ] ) ;
10914: LD_ADDR_VAR 0 26
10918: PUSH
10919: LD_VAR 0 20
10923: PPUSH
10924: LD_INT 120
10926: PUSH
10927: LD_INT 7
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: PPUSH
10934: CALL_OW 72
10938: ST_TO_ADDR
// if not drivers then
10939: LD_VAR 0 26
10943: NOT
10944: IFFALSE 10960
// begin SetTag ( i , 0 ) ;
10946: LD_VAR 0 15
10950: PPUSH
10951: LD_INT 0
10953: PPUSH
10954: CALL_OW 109
// continue ;
10958: GO 10702
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
10960: LD_VAR 0 26
10964: PUSH
10965: LD_INT 1
10967: ARRAY
10968: PPUSH
10969: CALL_OW 310
10973: PUSH
10974: LD_VAR 0 26
10978: PUSH
10979: LD_INT 1
10981: ARRAY
10982: PPUSH
10983: CALL 69383 0 1
10987: NOT
10988: AND
10989: IFFALSE 11004
// ComExitBuilding ( drivers [ 1 ] ) ;
10991: LD_VAR 0 26
10995: PUSH
10996: LD_INT 1
10998: ARRAY
10999: PPUSH
11000: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
11004: LD_VAR 0 7
11008: PPUSH
11009: LD_INT 120
11011: PUSH
11012: LD_INT 3
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PPUSH
11019: CALL_OW 72
11023: PUSH
11024: LD_VAR 0 26
11028: PUSH
11029: LD_INT 1
11031: ARRAY
11032: PPUSH
11033: CALL_OW 314
11037: NOT
11038: AND
11039: PUSH
11040: LD_VAR 0 7
11044: PPUSH
11045: LD_INT 120
11047: PUSH
11048: LD_INT 3
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PPUSH
11055: CALL_OW 72
11059: NOT
11060: OR
11061: IFFALSE 11081
// ComEnterUnit ( drivers [ 1 ] , i ) ;
11063: LD_VAR 0 26
11067: PUSH
11068: LD_INT 1
11070: ARRAY
11071: PPUSH
11072: LD_VAR 0 15
11076: PPUSH
11077: CALL_OW 120
// continue ;
11081: GO 10702
// end ; if allowToPatrol then
11083: LD_VAR 0 13
11087: IFFALSE 11103
// SetTag ( i , tPatrol ) else
11089: LD_VAR 0 15
11093: PPUSH
11094: LD_INT 15
11096: PPUSH
11097: CALL_OW 109
11101: GO 11115
// SetTag ( i , tAttack ) ;
11103: LD_VAR 0 15
11107: PPUSH
11108: LD_INT 13
11110: PPUSH
11111: CALL_OW 109
// end ; end else
11115: GO 11646
// if tag = tPatrol then
11117: LD_VAR 0 21
11121: PUSH
11122: LD_INT 15
11124: EQUAL
11125: IFFALSE 11317
// begin if GetLives ( i ) < 650 then
11127: LD_VAR 0 15
11131: PPUSH
11132: CALL_OW 256
11136: PUSH
11137: LD_INT 650
11139: LESS
11140: IFFALSE 11183
// begin SetTag ( i , tVehRepair ) ;
11142: LD_VAR 0 15
11146: PPUSH
11147: LD_INT 9
11149: PPUSH
11150: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
11154: LD_VAR 0 15
11158: PPUSH
11159: LD_VAR 0 12
11163: PUSH
11164: LD_INT 1
11166: ARRAY
11167: PPUSH
11168: LD_VAR 0 12
11172: PUSH
11173: LD_INT 2
11175: ARRAY
11176: PPUSH
11177: CALL_OW 111
// continue ;
11181: GO 10702
// end ; if GetEngine ( i ) = engine_combustion then
11183: LD_VAR 0 15
11187: PPUSH
11188: CALL_OW 262
11192: PUSH
11193: LD_INT 1
11195: EQUAL
11196: IFFALSE 11243
// if GetFuel ( i ) < 30 then
11198: LD_VAR 0 15
11202: PPUSH
11203: CALL_OW 261
11207: PUSH
11208: LD_INT 30
11210: LESS
11211: IFFALSE 11243
// begin ComMoveUnit ( i , depot ) ;
11213: LD_VAR 0 15
11217: PPUSH
11218: LD_VAR 0 39
11222: PPUSH
11223: CALL_OW 112
// AddComRefuel ( i , depot ) ;
11227: LD_VAR 0 15
11231: PPUSH
11232: LD_VAR 0 39
11236: PPUSH
11237: CALL_OW 210
// continue ;
11241: GO 10702
// end ; if GetDistUnitXY ( i , allowToPatrol [ 1 ] , allowToPatrol [ 2 ] ) > 12 and not HasTask ( i ) then
11243: LD_VAR 0 15
11247: PPUSH
11248: LD_VAR 0 13
11252: PUSH
11253: LD_INT 1
11255: ARRAY
11256: PPUSH
11257: LD_VAR 0 13
11261: PUSH
11262: LD_INT 2
11264: ARRAY
11265: PPUSH
11266: CALL_OW 297
11270: PUSH
11271: LD_INT 12
11273: GREATER
11274: PUSH
11275: LD_VAR 0 15
11279: PPUSH
11280: CALL_OW 314
11284: NOT
11285: AND
11286: IFFALSE 11315
// ComAgressiveMove ( i , allowToPatrol [ 1 ] , allowToPatrol [ 2 ] ) ;
11288: LD_VAR 0 15
11292: PPUSH
11293: LD_VAR 0 13
11297: PUSH
11298: LD_INT 1
11300: ARRAY
11301: PPUSH
11302: LD_VAR 0 13
11306: PUSH
11307: LD_INT 2
11309: ARRAY
11310: PPUSH
11311: CALL_OW 114
// end else
11315: GO 11646
// if tag = tAttack then
11317: LD_VAR 0 21
11321: PUSH
11322: LD_INT 13
11324: EQUAL
11325: IFFALSE 11505
// begin enemy := enemyInBase ;
11327: LD_ADDR_VAR 0 28
11331: PUSH
11332: LD_VAR 0 33
11336: ST_TO_ADDR
// if not enemy then
11337: LD_VAR 0 28
11341: NOT
11342: IFFALSE 11354
// enemy := enemyOuterBase ;
11344: LD_ADDR_VAR 0 28
11348: PUSH
11349: LD_VAR 0 34
11353: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
11354: LD_VAR 0 28
11358: NOT
11359: PUSH
11360: LD_VAR 0 15
11364: PPUSH
11365: LD_VAR 0 12
11369: PUSH
11370: LD_INT 1
11372: ARRAY
11373: PPUSH
11374: LD_VAR 0 12
11378: PUSH
11379: LD_INT 2
11381: ARRAY
11382: PPUSH
11383: CALL_OW 297
11387: PUSH
11388: LD_INT 10
11390: GREATER
11391: AND
11392: IFFALSE 11423
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
11394: LD_VAR 0 15
11398: PPUSH
11399: LD_VAR 0 12
11403: PUSH
11404: LD_INT 1
11406: ARRAY
11407: PPUSH
11408: LD_VAR 0 12
11412: PUSH
11413: LD_INT 2
11415: ARRAY
11416: PPUSH
11417: CALL_OW 111
// continue ;
11421: GO 10702
// end ; if GetLives ( i ) < 650 then
11423: LD_VAR 0 15
11427: PPUSH
11428: CALL_OW 256
11432: PUSH
11433: LD_INT 650
11435: LESS
11436: IFFALSE 11479
// begin SetTag ( i , tVehRepair ) ;
11438: LD_VAR 0 15
11442: PPUSH
11443: LD_INT 9
11445: PPUSH
11446: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
11450: LD_VAR 0 15
11454: PPUSH
11455: LD_VAR 0 12
11459: PUSH
11460: LD_INT 1
11462: ARRAY
11463: PPUSH
11464: LD_VAR 0 12
11468: PUSH
11469: LD_INT 2
11471: ARRAY
11472: PPUSH
11473: CALL_OW 111
// continue ;
11477: GO 10702
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
11479: LD_VAR 0 15
11483: PPUSH
11484: LD_VAR 0 28
11488: PPUSH
11489: LD_VAR 0 15
11493: PPUSH
11494: CALL_OW 74
11498: PPUSH
11499: CALL_OW 115
// end else
11503: GO 11646
// if tag = tVehRepair then
11505: LD_VAR 0 21
11509: PUSH
11510: LD_INT 9
11512: EQUAL
11513: IFFALSE 11646
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
11515: LD_VAR 0 15
11519: PPUSH
11520: LD_VAR 0 12
11524: PUSH
11525: LD_INT 1
11527: ARRAY
11528: PPUSH
11529: LD_VAR 0 12
11533: PUSH
11534: LD_INT 2
11536: ARRAY
11537: PPUSH
11538: CALL_OW 297
11542: PUSH
11543: LD_INT 10
11545: GREATER
11546: IFFALSE 11577
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
11548: LD_VAR 0 15
11552: PPUSH
11553: LD_VAR 0 12
11557: PUSH
11558: LD_INT 1
11560: ARRAY
11561: PPUSH
11562: LD_VAR 0 12
11566: PUSH
11567: LD_INT 2
11569: ARRAY
11570: PPUSH
11571: CALL_OW 111
// continue ;
11575: GO 10702
// end ; if GetLives ( i ) = 1000 then
11577: LD_VAR 0 15
11581: PPUSH
11582: CALL_OW 256
11586: PUSH
11587: LD_INT 1000
11589: EQUAL
11590: IFFALSE 11606
// begin SetTag ( i , tBusy ) ;
11592: LD_VAR 0 15
11596: PPUSH
11597: LD_INT 8
11599: PPUSH
11600: CALL_OW 109
// continue ;
11604: GO 10702
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
11606: LD_VAR 0 15
11610: PPUSH
11611: CALL_OW 263
11615: PUSH
11616: LD_INT 1
11618: EQUAL
11619: PUSH
11620: LD_VAR 0 15
11624: PPUSH
11625: CALL_OW 311
11629: AND
11630: IFFALSE 11646
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
11632: LD_VAR 0 15
11636: PPUSH
11637: CALL_OW 311
11641: PPUSH
11642: CALL 73479 0 1
// end ; end ;
11646: GO 10702
11648: POP
11649: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
11650: LD_ADDR_VAR 0 25
11654: PUSH
11655: LD_VAR 0 6
11659: PPUSH
11660: LD_INT 2
11662: PUSH
11663: LD_INT 25
11665: PUSH
11666: LD_INT 1
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: PUSH
11673: LD_INT 25
11675: PUSH
11676: LD_INT 8
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PUSH
11683: LD_INT 25
11685: PUSH
11686: LD_INT 5
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 25
11695: PUSH
11696: LD_INT 9
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: PUSH
11710: LD_INT 50
11712: PUSH
11713: EMPTY
11714: LIST
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PPUSH
11720: CALL_OW 72
11724: ST_TO_ADDR
// if sol then
11725: LD_VAR 0 25
11729: IFFALSE 12527
// begin if enemyInBase then
11731: LD_VAR 0 33
11735: IFFALSE 11914
// begin for i in sol do
11737: LD_ADDR_VAR 0 15
11741: PUSH
11742: LD_VAR 0 25
11746: PUSH
11747: FOR_IN
11748: IFFALSE 11910
// begin tw := IsInUnit ( i ) ;
11750: LD_ADDR_VAR 0 22
11754: PUSH
11755: LD_VAR 0 15
11759: PPUSH
11760: CALL_OW 310
11764: ST_TO_ADDR
// if tw then
11765: LD_VAR 0 22
11769: IFFALSE 11852
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
11771: LD_VAR 0 22
11775: PUSH
11776: LD_INT 22
11778: PUSH
11779: LD_VAR 0 1
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: PUSH
11788: LD_INT 101
11790: PUSH
11791: LD_VAR 0 40
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: PUSH
11800: LD_INT 2
11802: PUSH
11803: LD_INT 30
11805: PUSH
11806: LD_INT 32
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: PUSH
11813: LD_INT 30
11815: PUSH
11816: LD_INT 31
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: LIST
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: LIST
11832: PPUSH
11833: CALL_OW 69
11837: IN
11838: NOT
11839: IFFALSE 11850
// ComExitBuilding ( i ) ;
11841: LD_VAR 0 15
11845: PPUSH
11846: CALL_OW 122
// end else
11850: GO 11908
// if IsInarea ( i , area ) then
11852: LD_VAR 0 15
11856: PPUSH
11857: LD_VAR 0 2
11861: PPUSH
11862: CALL_OW 308
11866: IFFALSE 11894
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
11868: LD_VAR 0 15
11872: PPUSH
11873: LD_VAR 0 33
11877: PPUSH
11878: LD_VAR 0 15
11882: PPUSH
11883: CALL_OW 74
11887: PPUSH
11888: CALL_OW 115
11892: GO 11908
// ComMoveToArea ( i , area ) ;
11894: LD_VAR 0 15
11898: PPUSH
11899: LD_VAR 0 2
11903: PPUSH
11904: CALL_OW 113
// end ;
11908: GO 11747
11910: POP
11911: POP
// end else
11912: GO 12527
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
11914: LD_ADDR_VAR 0 35
11918: PUSH
11919: LD_VAR 0 2
11923: PPUSH
11924: LD_INT 3
11926: PUSH
11927: LD_INT 62
11929: PUSH
11930: EMPTY
11931: LIST
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: PUSH
11937: LD_INT 3
11939: PUSH
11940: LD_INT 57
11942: PUSH
11943: EMPTY
11944: LIST
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: LD_INT 2
11952: PUSH
11953: LD_INT 30
11955: PUSH
11956: LD_INT 32
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 30
11965: PUSH
11966: LD_INT 4
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 30
11975: PUSH
11976: LD_INT 5
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: LD_INT 30
11985: PUSH
11986: LD_INT 31
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: LIST
12004: PPUSH
12005: CALL_OW 70
12009: ST_TO_ADDR
// emptyTowers := [ ] ;
12010: LD_ADDR_VAR 0 37
12014: PUSH
12015: EMPTY
12016: ST_TO_ADDR
// if empty then
12017: LD_VAR 0 35
12021: IFFALSE 12087
// emptyTowers := UnitFilter ( empty , [ [ f_not , [ f_tag , tTower ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
12023: LD_ADDR_VAR 0 37
12027: PUSH
12028: LD_VAR 0 35
12032: PPUSH
12033: LD_INT 3
12035: PUSH
12036: LD_INT 120
12038: PUSH
12039: LD_INT 10
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PUSH
12050: LD_INT 2
12052: PUSH
12053: LD_INT 30
12055: PUSH
12056: LD_INT 32
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: LD_INT 30
12065: PUSH
12066: LD_INT 33
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: LIST
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PPUSH
12082: CALL_OW 72
12086: ST_TO_ADDR
// for i in sol do
12087: LD_ADDR_VAR 0 15
12091: PUSH
12092: LD_VAR 0 25
12096: PUSH
12097: FOR_IN
12098: IFFALSE 12525
// begin tag := GetTag ( i ) ;
12100: LD_ADDR_VAR 0 21
12104: PUSH
12105: LD_VAR 0 15
12109: PPUSH
12110: CALL_OW 110
12114: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
12115: LD_VAR 0 15
12119: PPUSH
12120: CALL_OW 256
12124: PUSH
12125: LD_INT 1000
12127: LESS
12128: PUSH
12129: LD_VAR 0 21
12133: PUSH
12134: LD_INT 1
12136: NONEQUAL
12137: AND
12138: IFFALSE 12190
// begin SetTag ( i , tHeal ) ;
12140: LD_VAR 0 15
12144: PPUSH
12145: LD_INT 1
12147: PPUSH
12148: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
12152: LD_VAR 0 15
12156: PPUSH
12157: LD_VAR 0 11
12161: PUSH
12162: LD_INT 1
12164: ARRAY
12165: PPUSH
12166: LD_VAR 0 11
12170: PUSH
12171: LD_INT 2
12173: ARRAY
12174: PPUSH
12175: CALL_OW 111
// AddComHold ( i ) ;
12179: LD_VAR 0 15
12183: PPUSH
12184: CALL_OW 200
// continue ;
12188: GO 12097
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
12190: LD_VAR 0 15
12194: PPUSH
12195: CALL_OW 256
12199: PUSH
12200: LD_INT 1000
12202: EQUAL
12203: PUSH
12204: LD_VAR 0 21
12208: PUSH
12209: LD_INT 1
12211: EQUAL
12212: AND
12213: IFFALSE 12229
// begin SetTag ( i , 0 ) ;
12215: LD_VAR 0 15
12219: PPUSH
12220: LD_INT 0
12222: PPUSH
12223: CALL_OW 109
// continue ;
12227: GO 12097
// end ; if HasTask ( i ) then
12229: LD_VAR 0 15
12233: PPUSH
12234: CALL_OW 314
12238: IFFALSE 12242
// continue ;
12240: GO 12097
// if not IsInUnit ( i ) and not tag and empty then
12242: LD_VAR 0 15
12246: PPUSH
12247: CALL_OW 310
12251: NOT
12252: PUSH
12253: LD_VAR 0 21
12257: NOT
12258: AND
12259: PUSH
12260: LD_VAR 0 35
12264: AND
12265: IFFALSE 12305
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
12267: LD_VAR 0 15
12271: PPUSH
12272: LD_VAR 0 35
12276: PUSH
12277: LD_INT 1
12279: ARRAY
12280: PPUSH
12281: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
12285: LD_ADDR_VAR 0 35
12289: PUSH
12290: LD_VAR 0 35
12294: PPUSH
12295: LD_INT 1
12297: PPUSH
12298: CALL_OW 3
12302: ST_TO_ADDR
// continue ;
12303: GO 12097
// end ; if IsInUnit ( i ) and not tag and emptyTowers then
12305: LD_VAR 0 15
12309: PPUSH
12310: CALL_OW 310
12314: PUSH
12315: LD_VAR 0 21
12319: NOT
12320: AND
12321: PUSH
12322: LD_VAR 0 37
12326: AND
12327: IFFALSE 12523
// begin if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
12329: LD_VAR 0 15
12333: PPUSH
12334: CALL_OW 310
12338: PPUSH
12339: CALL_OW 266
12343: PUSH
12344: LD_INT 32
12346: PUSH
12347: LD_INT 31
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: IN
12354: IFFALSE 12358
// continue ;
12356: GO 12097
// SetTag ( i , tTower ) ;
12358: LD_VAR 0 15
12362: PPUSH
12363: LD_INT 10
12365: PPUSH
12366: CALL_OW 109
// SetTag ( emptyTowers [ 1 ] , tTower ) ;
12370: LD_VAR 0 37
12374: PUSH
12375: LD_INT 1
12377: ARRAY
12378: PPUSH
12379: LD_INT 10
12381: PPUSH
12382: CALL_OW 109
// ComExit ( i ) ;
12386: LD_VAR 0 15
12390: PPUSH
12391: CALL 72177 0 1
// AddComEnterUnit ( i , emptyTowers [ 1 ] ) ;
12395: LD_VAR 0 15
12399: PPUSH
12400: LD_VAR 0 37
12404: PUSH
12405: LD_INT 1
12407: ARRAY
12408: PPUSH
12409: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
12413: LD_INT 35
12415: PPUSH
12416: CALL_OW 67
// if not HasTask ( i ) then
12420: LD_VAR 0 15
12424: PPUSH
12425: CALL_OW 314
12429: NOT
12430: IFFALSE 12450
// ComEnterUnit ( i , emptyTowers [ 1 ] ) ;
12432: LD_VAR 0 15
12436: PPUSH
12437: LD_VAR 0 37
12441: PUSH
12442: LD_INT 1
12444: ARRAY
12445: PPUSH
12446: CALL_OW 120
// if not IsEmpty ( emptyTowers [ 1 ] ) then
12450: LD_VAR 0 37
12454: PUSH
12455: LD_INT 1
12457: ARRAY
12458: PPUSH
12459: CALL 36051 0 1
12463: NOT
12464: IFFALSE 12468
// break ;
12466: GO 12491
// until IsInUnit ( i ) or not IsOk ( i ) ;
12468: LD_VAR 0 15
12472: PPUSH
12473: CALL_OW 310
12477: PUSH
12478: LD_VAR 0 15
12482: PPUSH
12483: CALL_OW 302
12487: NOT
12488: OR
12489: IFFALSE 12413
// SetTag ( i , 0 ) ;
12491: LD_VAR 0 15
12495: PPUSH
12496: LD_INT 0
12498: PPUSH
12499: CALL_OW 109
// SetTag ( emptyTowers [ 1 ] , 0 ) ;
12503: LD_VAR 0 37
12507: PUSH
12508: LD_INT 1
12510: ARRAY
12511: PPUSH
12512: LD_INT 0
12514: PPUSH
12515: CALL_OW 109
// exit ;
12519: POP
12520: POP
12521: GO 12527
// end ; end ;
12523: GO 12097
12525: POP
12526: POP
// end ; end ; end ; end_of_file end_of_file
12527: LD_VAR 0 14
12531: RET
// export globalGameSaveCounter ; every 0 0$1 do
12532: GO 12534
12534: DISABLE
// begin enable ;
12535: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12536: LD_STRING updateTimer(
12538: PUSH
12539: LD_OWVAR 1
12543: STR
12544: PUSH
12545: LD_STRING );
12547: STR
12548: PPUSH
12549: CALL_OW 559
// end ;
12553: END
// every 0 0$1 do
12554: GO 12556
12556: DISABLE
// begin globalGameSaveCounter := 0 ;
12557: LD_ADDR_EXP 31
12561: PUSH
12562: LD_INT 0
12564: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
12565: LD_STRING setGameSaveCounter(0)
12567: PPUSH
12568: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
12572: LD_STRING initStreamRollete();
12574: PPUSH
12575: CALL_OW 559
// InitStreamMode ;
12579: CALL 13922 0 0
// DefineStreamItems ( false ) ;
12583: LD_INT 0
12585: PPUSH
12586: CALL 14386 0 1
// end ;
12590: END
// export function SOS_MapStart ( ) ; begin
12591: LD_INT 0
12593: PPUSH
// if streamModeActive then
12594: LD_EXP 32
12598: IFFALSE 12607
// DefineStreamItems ( true ) ;
12600: LD_INT 1
12602: PPUSH
12603: CALL 14386 0 1
// UpdateLuaVariables ( ) ;
12607: CALL 12624 0 0
// UpdateFactoryWaypoints ( ) ;
12611: CALL 27388 0 0
// UpdateWarehouseGatheringPoints ( ) ;
12615: CALL 27640 0 0
// end ;
12619: LD_VAR 0 1
12623: RET
// function UpdateLuaVariables ( ) ; begin
12624: LD_INT 0
12626: PPUSH
// if globalGameSaveCounter then
12627: LD_EXP 31
12631: IFFALSE 12665
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
12633: LD_ADDR_EXP 31
12637: PUSH
12638: LD_EXP 31
12642: PPUSH
12643: CALL 73140 0 1
12647: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12648: LD_STRING setGameSaveCounter(
12650: PUSH
12651: LD_EXP 31
12655: STR
12656: PUSH
12657: LD_STRING )
12659: STR
12660: PPUSH
12661: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
12665: LD_STRING setGameDifficulty(
12667: PUSH
12668: LD_OWVAR 67
12672: STR
12673: PUSH
12674: LD_STRING )
12676: STR
12677: PPUSH
12678: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
12682: LD_STRING displayDifficulty(
12684: PUSH
12685: LD_OWVAR 67
12689: STR
12690: PUSH
12691: LD_STRING )
12693: STR
12694: PPUSH
12695: CALL_OW 559
// end ;
12699: LD_VAR 0 1
12703: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12704: LD_INT 0
12706: PPUSH
// if p2 = stream_mode then
12707: LD_VAR 0 2
12711: PUSH
12712: LD_INT 100
12714: EQUAL
12715: IFFALSE 13718
// begin if not StreamModeActive then
12717: LD_EXP 32
12721: NOT
12722: IFFALSE 12732
// StreamModeActive := true ;
12724: LD_ADDR_EXP 32
12728: PUSH
12729: LD_INT 1
12731: ST_TO_ADDR
// if p3 = 0 then
12732: LD_VAR 0 3
12736: PUSH
12737: LD_INT 0
12739: EQUAL
12740: IFFALSE 12746
// InitStreamMode ;
12742: CALL 13922 0 0
// if p3 = 1 then
12746: LD_VAR 0 3
12750: PUSH
12751: LD_INT 1
12753: EQUAL
12754: IFFALSE 12764
// sRocket := true ;
12756: LD_ADDR_EXP 37
12760: PUSH
12761: LD_INT 1
12763: ST_TO_ADDR
// if p3 = 2 then
12764: LD_VAR 0 3
12768: PUSH
12769: LD_INT 2
12771: EQUAL
12772: IFFALSE 12782
// sSpeed := true ;
12774: LD_ADDR_EXP 36
12778: PUSH
12779: LD_INT 1
12781: ST_TO_ADDR
// if p3 = 3 then
12782: LD_VAR 0 3
12786: PUSH
12787: LD_INT 3
12789: EQUAL
12790: IFFALSE 12800
// sEngine := true ;
12792: LD_ADDR_EXP 38
12796: PUSH
12797: LD_INT 1
12799: ST_TO_ADDR
// if p3 = 4 then
12800: LD_VAR 0 3
12804: PUSH
12805: LD_INT 4
12807: EQUAL
12808: IFFALSE 12818
// sSpec := true ;
12810: LD_ADDR_EXP 35
12814: PUSH
12815: LD_INT 1
12817: ST_TO_ADDR
// if p3 = 5 then
12818: LD_VAR 0 3
12822: PUSH
12823: LD_INT 5
12825: EQUAL
12826: IFFALSE 12836
// sLevel := true ;
12828: LD_ADDR_EXP 39
12832: PUSH
12833: LD_INT 1
12835: ST_TO_ADDR
// if p3 = 6 then
12836: LD_VAR 0 3
12840: PUSH
12841: LD_INT 6
12843: EQUAL
12844: IFFALSE 12854
// sArmoury := true ;
12846: LD_ADDR_EXP 40
12850: PUSH
12851: LD_INT 1
12853: ST_TO_ADDR
// if p3 = 7 then
12854: LD_VAR 0 3
12858: PUSH
12859: LD_INT 7
12861: EQUAL
12862: IFFALSE 12872
// sRadar := true ;
12864: LD_ADDR_EXP 41
12868: PUSH
12869: LD_INT 1
12871: ST_TO_ADDR
// if p3 = 8 then
12872: LD_VAR 0 3
12876: PUSH
12877: LD_INT 8
12879: EQUAL
12880: IFFALSE 12890
// sBunker := true ;
12882: LD_ADDR_EXP 42
12886: PUSH
12887: LD_INT 1
12889: ST_TO_ADDR
// if p3 = 9 then
12890: LD_VAR 0 3
12894: PUSH
12895: LD_INT 9
12897: EQUAL
12898: IFFALSE 12908
// sHack := true ;
12900: LD_ADDR_EXP 43
12904: PUSH
12905: LD_INT 1
12907: ST_TO_ADDR
// if p3 = 10 then
12908: LD_VAR 0 3
12912: PUSH
12913: LD_INT 10
12915: EQUAL
12916: IFFALSE 12926
// sFire := true ;
12918: LD_ADDR_EXP 44
12922: PUSH
12923: LD_INT 1
12925: ST_TO_ADDR
// if p3 = 11 then
12926: LD_VAR 0 3
12930: PUSH
12931: LD_INT 11
12933: EQUAL
12934: IFFALSE 12944
// sRefresh := true ;
12936: LD_ADDR_EXP 45
12940: PUSH
12941: LD_INT 1
12943: ST_TO_ADDR
// if p3 = 12 then
12944: LD_VAR 0 3
12948: PUSH
12949: LD_INT 12
12951: EQUAL
12952: IFFALSE 12962
// sExp := true ;
12954: LD_ADDR_EXP 46
12958: PUSH
12959: LD_INT 1
12961: ST_TO_ADDR
// if p3 = 13 then
12962: LD_VAR 0 3
12966: PUSH
12967: LD_INT 13
12969: EQUAL
12970: IFFALSE 12980
// sDepot := true ;
12972: LD_ADDR_EXP 47
12976: PUSH
12977: LD_INT 1
12979: ST_TO_ADDR
// if p3 = 14 then
12980: LD_VAR 0 3
12984: PUSH
12985: LD_INT 14
12987: EQUAL
12988: IFFALSE 12998
// sFlag := true ;
12990: LD_ADDR_EXP 48
12994: PUSH
12995: LD_INT 1
12997: ST_TO_ADDR
// if p3 = 15 then
12998: LD_VAR 0 3
13002: PUSH
13003: LD_INT 15
13005: EQUAL
13006: IFFALSE 13016
// sKamikadze := true ;
13008: LD_ADDR_EXP 56
13012: PUSH
13013: LD_INT 1
13015: ST_TO_ADDR
// if p3 = 16 then
13016: LD_VAR 0 3
13020: PUSH
13021: LD_INT 16
13023: EQUAL
13024: IFFALSE 13034
// sTroll := true ;
13026: LD_ADDR_EXP 57
13030: PUSH
13031: LD_INT 1
13033: ST_TO_ADDR
// if p3 = 17 then
13034: LD_VAR 0 3
13038: PUSH
13039: LD_INT 17
13041: EQUAL
13042: IFFALSE 13052
// sSlow := true ;
13044: LD_ADDR_EXP 58
13048: PUSH
13049: LD_INT 1
13051: ST_TO_ADDR
// if p3 = 18 then
13052: LD_VAR 0 3
13056: PUSH
13057: LD_INT 18
13059: EQUAL
13060: IFFALSE 13070
// sLack := true ;
13062: LD_ADDR_EXP 59
13066: PUSH
13067: LD_INT 1
13069: ST_TO_ADDR
// if p3 = 19 then
13070: LD_VAR 0 3
13074: PUSH
13075: LD_INT 19
13077: EQUAL
13078: IFFALSE 13088
// sTank := true ;
13080: LD_ADDR_EXP 61
13084: PUSH
13085: LD_INT 1
13087: ST_TO_ADDR
// if p3 = 20 then
13088: LD_VAR 0 3
13092: PUSH
13093: LD_INT 20
13095: EQUAL
13096: IFFALSE 13106
// sRemote := true ;
13098: LD_ADDR_EXP 62
13102: PUSH
13103: LD_INT 1
13105: ST_TO_ADDR
// if p3 = 21 then
13106: LD_VAR 0 3
13110: PUSH
13111: LD_INT 21
13113: EQUAL
13114: IFFALSE 13124
// sPowell := true ;
13116: LD_ADDR_EXP 63
13120: PUSH
13121: LD_INT 1
13123: ST_TO_ADDR
// if p3 = 22 then
13124: LD_VAR 0 3
13128: PUSH
13129: LD_INT 22
13131: EQUAL
13132: IFFALSE 13142
// sTeleport := true ;
13134: LD_ADDR_EXP 66
13138: PUSH
13139: LD_INT 1
13141: ST_TO_ADDR
// if p3 = 23 then
13142: LD_VAR 0 3
13146: PUSH
13147: LD_INT 23
13149: EQUAL
13150: IFFALSE 13160
// sOilTower := true ;
13152: LD_ADDR_EXP 68
13156: PUSH
13157: LD_INT 1
13159: ST_TO_ADDR
// if p3 = 24 then
13160: LD_VAR 0 3
13164: PUSH
13165: LD_INT 24
13167: EQUAL
13168: IFFALSE 13178
// sShovel := true ;
13170: LD_ADDR_EXP 69
13174: PUSH
13175: LD_INT 1
13177: ST_TO_ADDR
// if p3 = 25 then
13178: LD_VAR 0 3
13182: PUSH
13183: LD_INT 25
13185: EQUAL
13186: IFFALSE 13196
// sSheik := true ;
13188: LD_ADDR_EXP 70
13192: PUSH
13193: LD_INT 1
13195: ST_TO_ADDR
// if p3 = 26 then
13196: LD_VAR 0 3
13200: PUSH
13201: LD_INT 26
13203: EQUAL
13204: IFFALSE 13214
// sEarthquake := true ;
13206: LD_ADDR_EXP 72
13210: PUSH
13211: LD_INT 1
13213: ST_TO_ADDR
// if p3 = 27 then
13214: LD_VAR 0 3
13218: PUSH
13219: LD_INT 27
13221: EQUAL
13222: IFFALSE 13232
// sAI := true ;
13224: LD_ADDR_EXP 73
13228: PUSH
13229: LD_INT 1
13231: ST_TO_ADDR
// if p3 = 28 then
13232: LD_VAR 0 3
13236: PUSH
13237: LD_INT 28
13239: EQUAL
13240: IFFALSE 13250
// sCargo := true ;
13242: LD_ADDR_EXP 76
13246: PUSH
13247: LD_INT 1
13249: ST_TO_ADDR
// if p3 = 29 then
13250: LD_VAR 0 3
13254: PUSH
13255: LD_INT 29
13257: EQUAL
13258: IFFALSE 13268
// sDLaser := true ;
13260: LD_ADDR_EXP 77
13264: PUSH
13265: LD_INT 1
13267: ST_TO_ADDR
// if p3 = 30 then
13268: LD_VAR 0 3
13272: PUSH
13273: LD_INT 30
13275: EQUAL
13276: IFFALSE 13286
// sExchange := true ;
13278: LD_ADDR_EXP 78
13282: PUSH
13283: LD_INT 1
13285: ST_TO_ADDR
// if p3 = 31 then
13286: LD_VAR 0 3
13290: PUSH
13291: LD_INT 31
13293: EQUAL
13294: IFFALSE 13304
// sFac := true ;
13296: LD_ADDR_EXP 79
13300: PUSH
13301: LD_INT 1
13303: ST_TO_ADDR
// if p3 = 32 then
13304: LD_VAR 0 3
13308: PUSH
13309: LD_INT 32
13311: EQUAL
13312: IFFALSE 13322
// sPower := true ;
13314: LD_ADDR_EXP 80
13318: PUSH
13319: LD_INT 1
13321: ST_TO_ADDR
// if p3 = 33 then
13322: LD_VAR 0 3
13326: PUSH
13327: LD_INT 33
13329: EQUAL
13330: IFFALSE 13340
// sRandom := true ;
13332: LD_ADDR_EXP 81
13336: PUSH
13337: LD_INT 1
13339: ST_TO_ADDR
// if p3 = 34 then
13340: LD_VAR 0 3
13344: PUSH
13345: LD_INT 34
13347: EQUAL
13348: IFFALSE 13358
// sShield := true ;
13350: LD_ADDR_EXP 82
13354: PUSH
13355: LD_INT 1
13357: ST_TO_ADDR
// if p3 = 35 then
13358: LD_VAR 0 3
13362: PUSH
13363: LD_INT 35
13365: EQUAL
13366: IFFALSE 13376
// sTime := true ;
13368: LD_ADDR_EXP 83
13372: PUSH
13373: LD_INT 1
13375: ST_TO_ADDR
// if p3 = 36 then
13376: LD_VAR 0 3
13380: PUSH
13381: LD_INT 36
13383: EQUAL
13384: IFFALSE 13394
// sTools := true ;
13386: LD_ADDR_EXP 84
13390: PUSH
13391: LD_INT 1
13393: ST_TO_ADDR
// if p3 = 101 then
13394: LD_VAR 0 3
13398: PUSH
13399: LD_INT 101
13401: EQUAL
13402: IFFALSE 13412
// sSold := true ;
13404: LD_ADDR_EXP 49
13408: PUSH
13409: LD_INT 1
13411: ST_TO_ADDR
// if p3 = 102 then
13412: LD_VAR 0 3
13416: PUSH
13417: LD_INT 102
13419: EQUAL
13420: IFFALSE 13430
// sDiff := true ;
13422: LD_ADDR_EXP 50
13426: PUSH
13427: LD_INT 1
13429: ST_TO_ADDR
// if p3 = 103 then
13430: LD_VAR 0 3
13434: PUSH
13435: LD_INT 103
13437: EQUAL
13438: IFFALSE 13448
// sFog := true ;
13440: LD_ADDR_EXP 53
13444: PUSH
13445: LD_INT 1
13447: ST_TO_ADDR
// if p3 = 104 then
13448: LD_VAR 0 3
13452: PUSH
13453: LD_INT 104
13455: EQUAL
13456: IFFALSE 13466
// sReset := true ;
13458: LD_ADDR_EXP 54
13462: PUSH
13463: LD_INT 1
13465: ST_TO_ADDR
// if p3 = 105 then
13466: LD_VAR 0 3
13470: PUSH
13471: LD_INT 105
13473: EQUAL
13474: IFFALSE 13484
// sSun := true ;
13476: LD_ADDR_EXP 55
13480: PUSH
13481: LD_INT 1
13483: ST_TO_ADDR
// if p3 = 106 then
13484: LD_VAR 0 3
13488: PUSH
13489: LD_INT 106
13491: EQUAL
13492: IFFALSE 13502
// sTiger := true ;
13494: LD_ADDR_EXP 51
13498: PUSH
13499: LD_INT 1
13501: ST_TO_ADDR
// if p3 = 107 then
13502: LD_VAR 0 3
13506: PUSH
13507: LD_INT 107
13509: EQUAL
13510: IFFALSE 13520
// sBomb := true ;
13512: LD_ADDR_EXP 52
13516: PUSH
13517: LD_INT 1
13519: ST_TO_ADDR
// if p3 = 108 then
13520: LD_VAR 0 3
13524: PUSH
13525: LD_INT 108
13527: EQUAL
13528: IFFALSE 13538
// sWound := true ;
13530: LD_ADDR_EXP 60
13534: PUSH
13535: LD_INT 1
13537: ST_TO_ADDR
// if p3 = 109 then
13538: LD_VAR 0 3
13542: PUSH
13543: LD_INT 109
13545: EQUAL
13546: IFFALSE 13556
// sBetray := true ;
13548: LD_ADDR_EXP 64
13552: PUSH
13553: LD_INT 1
13555: ST_TO_ADDR
// if p3 = 110 then
13556: LD_VAR 0 3
13560: PUSH
13561: LD_INT 110
13563: EQUAL
13564: IFFALSE 13574
// sContamin := true ;
13566: LD_ADDR_EXP 65
13570: PUSH
13571: LD_INT 1
13573: ST_TO_ADDR
// if p3 = 111 then
13574: LD_VAR 0 3
13578: PUSH
13579: LD_INT 111
13581: EQUAL
13582: IFFALSE 13592
// sOil := true ;
13584: LD_ADDR_EXP 67
13588: PUSH
13589: LD_INT 1
13591: ST_TO_ADDR
// if p3 = 112 then
13592: LD_VAR 0 3
13596: PUSH
13597: LD_INT 112
13599: EQUAL
13600: IFFALSE 13610
// sStu := true ;
13602: LD_ADDR_EXP 71
13606: PUSH
13607: LD_INT 1
13609: ST_TO_ADDR
// if p3 = 113 then
13610: LD_VAR 0 3
13614: PUSH
13615: LD_INT 113
13617: EQUAL
13618: IFFALSE 13628
// sBazooka := true ;
13620: LD_ADDR_EXP 74
13624: PUSH
13625: LD_INT 1
13627: ST_TO_ADDR
// if p3 = 114 then
13628: LD_VAR 0 3
13632: PUSH
13633: LD_INT 114
13635: EQUAL
13636: IFFALSE 13646
// sMortar := true ;
13638: LD_ADDR_EXP 75
13642: PUSH
13643: LD_INT 1
13645: ST_TO_ADDR
// if p3 = 115 then
13646: LD_VAR 0 3
13650: PUSH
13651: LD_INT 115
13653: EQUAL
13654: IFFALSE 13664
// sRanger := true ;
13656: LD_ADDR_EXP 85
13660: PUSH
13661: LD_INT 1
13663: ST_TO_ADDR
// if p3 = 116 then
13664: LD_VAR 0 3
13668: PUSH
13669: LD_INT 116
13671: EQUAL
13672: IFFALSE 13682
// sComputer := true ;
13674: LD_ADDR_EXP 86
13678: PUSH
13679: LD_INT 1
13681: ST_TO_ADDR
// if p3 = 117 then
13682: LD_VAR 0 3
13686: PUSH
13687: LD_INT 117
13689: EQUAL
13690: IFFALSE 13700
// s30 := true ;
13692: LD_ADDR_EXP 87
13696: PUSH
13697: LD_INT 1
13699: ST_TO_ADDR
// if p3 = 118 then
13700: LD_VAR 0 3
13704: PUSH
13705: LD_INT 118
13707: EQUAL
13708: IFFALSE 13718
// s60 := true ;
13710: LD_ADDR_EXP 88
13714: PUSH
13715: LD_INT 1
13717: ST_TO_ADDR
// end ; if p2 = hack_mode then
13718: LD_VAR 0 2
13722: PUSH
13723: LD_INT 101
13725: EQUAL
13726: IFFALSE 13854
// begin case p3 of 1 :
13728: LD_VAR 0 3
13732: PUSH
13733: LD_INT 1
13735: DOUBLE
13736: EQUAL
13737: IFTRUE 13741
13739: GO 13748
13741: POP
// hHackUnlimitedResources ; 2 :
13742: CALL 26001 0 0
13746: GO 13854
13748: LD_INT 2
13750: DOUBLE
13751: EQUAL
13752: IFTRUE 13756
13754: GO 13763
13756: POP
// hHackSetLevel10 ; 3 :
13757: CALL 26134 0 0
13761: GO 13854
13763: LD_INT 3
13765: DOUBLE
13766: EQUAL
13767: IFTRUE 13771
13769: GO 13778
13771: POP
// hHackSetLevel10YourUnits ; 4 :
13772: CALL 26219 0 0
13776: GO 13854
13778: LD_INT 4
13780: DOUBLE
13781: EQUAL
13782: IFTRUE 13786
13784: GO 13793
13786: POP
// hHackInvincible ; 5 :
13787: CALL 26667 0 0
13791: GO 13854
13793: LD_INT 5
13795: DOUBLE
13796: EQUAL
13797: IFTRUE 13801
13799: GO 13808
13801: POP
// hHackInvisible ; 6 :
13802: CALL 26778 0 0
13806: GO 13854
13808: LD_INT 6
13810: DOUBLE
13811: EQUAL
13812: IFTRUE 13816
13814: GO 13823
13816: POP
// hHackChangeYourSide ; 7 :
13817: CALL 26835 0 0
13821: GO 13854
13823: LD_INT 7
13825: DOUBLE
13826: EQUAL
13827: IFTRUE 13831
13829: GO 13838
13831: POP
// hHackChangeUnitSide ; 8 :
13832: CALL 26877 0 0
13836: GO 13854
13838: LD_INT 8
13840: DOUBLE
13841: EQUAL
13842: IFTRUE 13846
13844: GO 13853
13846: POP
// hHackFog ; end ;
13847: CALL 26978 0 0
13851: GO 13854
13853: POP
// end ; if p2 = game_save_mode then
13854: LD_VAR 0 2
13858: PUSH
13859: LD_INT 102
13861: EQUAL
13862: IFFALSE 13917
// begin if p3 = 1 then
13864: LD_VAR 0 3
13868: PUSH
13869: LD_INT 1
13871: EQUAL
13872: IFFALSE 13884
// globalGameSaveCounter := p4 ;
13874: LD_ADDR_EXP 31
13878: PUSH
13879: LD_VAR 0 4
13883: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
13884: LD_VAR 0 3
13888: PUSH
13889: LD_INT 2
13891: EQUAL
13892: PUSH
13893: LD_EXP 31
13897: AND
13898: IFFALSE 13917
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
13900: LD_STRING setGameSaveCounter(
13902: PUSH
13903: LD_EXP 31
13907: STR
13908: PUSH
13909: LD_STRING )
13911: STR
13912: PPUSH
13913: CALL_OW 559
// end ; end ;
13917: LD_VAR 0 7
13921: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
13922: LD_INT 0
13924: PPUSH
// streamModeActive := false ;
13925: LD_ADDR_EXP 32
13929: PUSH
13930: LD_INT 0
13932: ST_TO_ADDR
// normalCounter := 36 ;
13933: LD_ADDR_EXP 33
13937: PUSH
13938: LD_INT 36
13940: ST_TO_ADDR
// hardcoreCounter := 18 ;
13941: LD_ADDR_EXP 34
13945: PUSH
13946: LD_INT 18
13948: ST_TO_ADDR
// sRocket := false ;
13949: LD_ADDR_EXP 37
13953: PUSH
13954: LD_INT 0
13956: ST_TO_ADDR
// sSpeed := false ;
13957: LD_ADDR_EXP 36
13961: PUSH
13962: LD_INT 0
13964: ST_TO_ADDR
// sEngine := false ;
13965: LD_ADDR_EXP 38
13969: PUSH
13970: LD_INT 0
13972: ST_TO_ADDR
// sSpec := false ;
13973: LD_ADDR_EXP 35
13977: PUSH
13978: LD_INT 0
13980: ST_TO_ADDR
// sLevel := false ;
13981: LD_ADDR_EXP 39
13985: PUSH
13986: LD_INT 0
13988: ST_TO_ADDR
// sArmoury := false ;
13989: LD_ADDR_EXP 40
13993: PUSH
13994: LD_INT 0
13996: ST_TO_ADDR
// sRadar := false ;
13997: LD_ADDR_EXP 41
14001: PUSH
14002: LD_INT 0
14004: ST_TO_ADDR
// sBunker := false ;
14005: LD_ADDR_EXP 42
14009: PUSH
14010: LD_INT 0
14012: ST_TO_ADDR
// sHack := false ;
14013: LD_ADDR_EXP 43
14017: PUSH
14018: LD_INT 0
14020: ST_TO_ADDR
// sFire := false ;
14021: LD_ADDR_EXP 44
14025: PUSH
14026: LD_INT 0
14028: ST_TO_ADDR
// sRefresh := false ;
14029: LD_ADDR_EXP 45
14033: PUSH
14034: LD_INT 0
14036: ST_TO_ADDR
// sExp := false ;
14037: LD_ADDR_EXP 46
14041: PUSH
14042: LD_INT 0
14044: ST_TO_ADDR
// sDepot := false ;
14045: LD_ADDR_EXP 47
14049: PUSH
14050: LD_INT 0
14052: ST_TO_ADDR
// sFlag := false ;
14053: LD_ADDR_EXP 48
14057: PUSH
14058: LD_INT 0
14060: ST_TO_ADDR
// sKamikadze := false ;
14061: LD_ADDR_EXP 56
14065: PUSH
14066: LD_INT 0
14068: ST_TO_ADDR
// sTroll := false ;
14069: LD_ADDR_EXP 57
14073: PUSH
14074: LD_INT 0
14076: ST_TO_ADDR
// sSlow := false ;
14077: LD_ADDR_EXP 58
14081: PUSH
14082: LD_INT 0
14084: ST_TO_ADDR
// sLack := false ;
14085: LD_ADDR_EXP 59
14089: PUSH
14090: LD_INT 0
14092: ST_TO_ADDR
// sTank := false ;
14093: LD_ADDR_EXP 61
14097: PUSH
14098: LD_INT 0
14100: ST_TO_ADDR
// sRemote := false ;
14101: LD_ADDR_EXP 62
14105: PUSH
14106: LD_INT 0
14108: ST_TO_ADDR
// sPowell := false ;
14109: LD_ADDR_EXP 63
14113: PUSH
14114: LD_INT 0
14116: ST_TO_ADDR
// sTeleport := false ;
14117: LD_ADDR_EXP 66
14121: PUSH
14122: LD_INT 0
14124: ST_TO_ADDR
// sOilTower := false ;
14125: LD_ADDR_EXP 68
14129: PUSH
14130: LD_INT 0
14132: ST_TO_ADDR
// sShovel := false ;
14133: LD_ADDR_EXP 69
14137: PUSH
14138: LD_INT 0
14140: ST_TO_ADDR
// sSheik := false ;
14141: LD_ADDR_EXP 70
14145: PUSH
14146: LD_INT 0
14148: ST_TO_ADDR
// sEarthquake := false ;
14149: LD_ADDR_EXP 72
14153: PUSH
14154: LD_INT 0
14156: ST_TO_ADDR
// sAI := false ;
14157: LD_ADDR_EXP 73
14161: PUSH
14162: LD_INT 0
14164: ST_TO_ADDR
// sCargo := false ;
14165: LD_ADDR_EXP 76
14169: PUSH
14170: LD_INT 0
14172: ST_TO_ADDR
// sDLaser := false ;
14173: LD_ADDR_EXP 77
14177: PUSH
14178: LD_INT 0
14180: ST_TO_ADDR
// sExchange := false ;
14181: LD_ADDR_EXP 78
14185: PUSH
14186: LD_INT 0
14188: ST_TO_ADDR
// sFac := false ;
14189: LD_ADDR_EXP 79
14193: PUSH
14194: LD_INT 0
14196: ST_TO_ADDR
// sPower := false ;
14197: LD_ADDR_EXP 80
14201: PUSH
14202: LD_INT 0
14204: ST_TO_ADDR
// sRandom := false ;
14205: LD_ADDR_EXP 81
14209: PUSH
14210: LD_INT 0
14212: ST_TO_ADDR
// sShield := false ;
14213: LD_ADDR_EXP 82
14217: PUSH
14218: LD_INT 0
14220: ST_TO_ADDR
// sTime := false ;
14221: LD_ADDR_EXP 83
14225: PUSH
14226: LD_INT 0
14228: ST_TO_ADDR
// sTools := false ;
14229: LD_ADDR_EXP 84
14233: PUSH
14234: LD_INT 0
14236: ST_TO_ADDR
// sSold := false ;
14237: LD_ADDR_EXP 49
14241: PUSH
14242: LD_INT 0
14244: ST_TO_ADDR
// sDiff := false ;
14245: LD_ADDR_EXP 50
14249: PUSH
14250: LD_INT 0
14252: ST_TO_ADDR
// sFog := false ;
14253: LD_ADDR_EXP 53
14257: PUSH
14258: LD_INT 0
14260: ST_TO_ADDR
// sReset := false ;
14261: LD_ADDR_EXP 54
14265: PUSH
14266: LD_INT 0
14268: ST_TO_ADDR
// sSun := false ;
14269: LD_ADDR_EXP 55
14273: PUSH
14274: LD_INT 0
14276: ST_TO_ADDR
// sTiger := false ;
14277: LD_ADDR_EXP 51
14281: PUSH
14282: LD_INT 0
14284: ST_TO_ADDR
// sBomb := false ;
14285: LD_ADDR_EXP 52
14289: PUSH
14290: LD_INT 0
14292: ST_TO_ADDR
// sWound := false ;
14293: LD_ADDR_EXP 60
14297: PUSH
14298: LD_INT 0
14300: ST_TO_ADDR
// sBetray := false ;
14301: LD_ADDR_EXP 64
14305: PUSH
14306: LD_INT 0
14308: ST_TO_ADDR
// sContamin := false ;
14309: LD_ADDR_EXP 65
14313: PUSH
14314: LD_INT 0
14316: ST_TO_ADDR
// sOil := false ;
14317: LD_ADDR_EXP 67
14321: PUSH
14322: LD_INT 0
14324: ST_TO_ADDR
// sStu := false ;
14325: LD_ADDR_EXP 71
14329: PUSH
14330: LD_INT 0
14332: ST_TO_ADDR
// sBazooka := false ;
14333: LD_ADDR_EXP 74
14337: PUSH
14338: LD_INT 0
14340: ST_TO_ADDR
// sMortar := false ;
14341: LD_ADDR_EXP 75
14345: PUSH
14346: LD_INT 0
14348: ST_TO_ADDR
// sRanger := false ;
14349: LD_ADDR_EXP 85
14353: PUSH
14354: LD_INT 0
14356: ST_TO_ADDR
// sComputer := false ;
14357: LD_ADDR_EXP 86
14361: PUSH
14362: LD_INT 0
14364: ST_TO_ADDR
// s30 := false ;
14365: LD_ADDR_EXP 87
14369: PUSH
14370: LD_INT 0
14372: ST_TO_ADDR
// s60 := false ;
14373: LD_ADDR_EXP 88
14377: PUSH
14378: LD_INT 0
14380: ST_TO_ADDR
// end ;
14381: LD_VAR 0 1
14385: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14386: LD_INT 0
14388: PPUSH
14389: PPUSH
14390: PPUSH
14391: PPUSH
14392: PPUSH
14393: PPUSH
14394: PPUSH
// result := [ ] ;
14395: LD_ADDR_VAR 0 2
14399: PUSH
14400: EMPTY
14401: ST_TO_ADDR
// if campaign_id = 1 then
14402: LD_OWVAR 69
14406: PUSH
14407: LD_INT 1
14409: EQUAL
14410: IFFALSE 17576
// begin case mission_number of 1 :
14412: LD_OWVAR 70
14416: PUSH
14417: LD_INT 1
14419: DOUBLE
14420: EQUAL
14421: IFTRUE 14425
14423: GO 14501
14425: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14426: LD_ADDR_VAR 0 2
14430: PUSH
14431: LD_INT 2
14433: PUSH
14434: LD_INT 4
14436: PUSH
14437: LD_INT 11
14439: PUSH
14440: LD_INT 12
14442: PUSH
14443: LD_INT 15
14445: PUSH
14446: LD_INT 16
14448: PUSH
14449: LD_INT 22
14451: PUSH
14452: LD_INT 23
14454: PUSH
14455: LD_INT 26
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: PUSH
14469: LD_INT 101
14471: PUSH
14472: LD_INT 102
14474: PUSH
14475: LD_INT 106
14477: PUSH
14478: LD_INT 116
14480: PUSH
14481: LD_INT 117
14483: PUSH
14484: LD_INT 118
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: ST_TO_ADDR
14499: GO 17574
14501: LD_INT 2
14503: DOUBLE
14504: EQUAL
14505: IFTRUE 14509
14507: GO 14593
14509: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14510: LD_ADDR_VAR 0 2
14514: PUSH
14515: LD_INT 2
14517: PUSH
14518: LD_INT 4
14520: PUSH
14521: LD_INT 11
14523: PUSH
14524: LD_INT 12
14526: PUSH
14527: LD_INT 15
14529: PUSH
14530: LD_INT 16
14532: PUSH
14533: LD_INT 22
14535: PUSH
14536: LD_INT 23
14538: PUSH
14539: LD_INT 26
14541: PUSH
14542: EMPTY
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: PUSH
14553: LD_INT 101
14555: PUSH
14556: LD_INT 102
14558: PUSH
14559: LD_INT 105
14561: PUSH
14562: LD_INT 106
14564: PUSH
14565: LD_INT 108
14567: PUSH
14568: LD_INT 116
14570: PUSH
14571: LD_INT 117
14573: PUSH
14574: LD_INT 118
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: ST_TO_ADDR
14591: GO 17574
14593: LD_INT 3
14595: DOUBLE
14596: EQUAL
14597: IFTRUE 14601
14599: GO 14689
14601: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14602: LD_ADDR_VAR 0 2
14606: PUSH
14607: LD_INT 2
14609: PUSH
14610: LD_INT 4
14612: PUSH
14613: LD_INT 5
14615: PUSH
14616: LD_INT 11
14618: PUSH
14619: LD_INT 12
14621: PUSH
14622: LD_INT 15
14624: PUSH
14625: LD_INT 16
14627: PUSH
14628: LD_INT 22
14630: PUSH
14631: LD_INT 26
14633: PUSH
14634: LD_INT 36
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: PUSH
14649: LD_INT 101
14651: PUSH
14652: LD_INT 102
14654: PUSH
14655: LD_INT 105
14657: PUSH
14658: LD_INT 106
14660: PUSH
14661: LD_INT 108
14663: PUSH
14664: LD_INT 116
14666: PUSH
14667: LD_INT 117
14669: PUSH
14670: LD_INT 118
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: ST_TO_ADDR
14687: GO 17574
14689: LD_INT 4
14691: DOUBLE
14692: EQUAL
14693: IFTRUE 14697
14695: GO 14793
14697: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14698: LD_ADDR_VAR 0 2
14702: PUSH
14703: LD_INT 2
14705: PUSH
14706: LD_INT 4
14708: PUSH
14709: LD_INT 5
14711: PUSH
14712: LD_INT 8
14714: PUSH
14715: LD_INT 11
14717: PUSH
14718: LD_INT 12
14720: PUSH
14721: LD_INT 15
14723: PUSH
14724: LD_INT 16
14726: PUSH
14727: LD_INT 22
14729: PUSH
14730: LD_INT 23
14732: PUSH
14733: LD_INT 26
14735: PUSH
14736: LD_INT 36
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: PUSH
14753: LD_INT 101
14755: PUSH
14756: LD_INT 102
14758: PUSH
14759: LD_INT 105
14761: PUSH
14762: LD_INT 106
14764: PUSH
14765: LD_INT 108
14767: PUSH
14768: LD_INT 116
14770: PUSH
14771: LD_INT 117
14773: PUSH
14774: LD_INT 118
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: ST_TO_ADDR
14791: GO 17574
14793: LD_INT 5
14795: DOUBLE
14796: EQUAL
14797: IFTRUE 14801
14799: GO 14913
14801: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14802: LD_ADDR_VAR 0 2
14806: PUSH
14807: LD_INT 2
14809: PUSH
14810: LD_INT 4
14812: PUSH
14813: LD_INT 5
14815: PUSH
14816: LD_INT 6
14818: PUSH
14819: LD_INT 8
14821: PUSH
14822: LD_INT 11
14824: PUSH
14825: LD_INT 12
14827: PUSH
14828: LD_INT 15
14830: PUSH
14831: LD_INT 16
14833: PUSH
14834: LD_INT 22
14836: PUSH
14837: LD_INT 23
14839: PUSH
14840: LD_INT 25
14842: PUSH
14843: LD_INT 26
14845: PUSH
14846: LD_INT 36
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: PUSH
14865: LD_INT 101
14867: PUSH
14868: LD_INT 102
14870: PUSH
14871: LD_INT 105
14873: PUSH
14874: LD_INT 106
14876: PUSH
14877: LD_INT 108
14879: PUSH
14880: LD_INT 109
14882: PUSH
14883: LD_INT 112
14885: PUSH
14886: LD_INT 116
14888: PUSH
14889: LD_INT 117
14891: PUSH
14892: LD_INT 118
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: ST_TO_ADDR
14911: GO 17574
14913: LD_INT 6
14915: DOUBLE
14916: EQUAL
14917: IFTRUE 14921
14919: GO 15053
14921: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
14922: LD_ADDR_VAR 0 2
14926: PUSH
14927: LD_INT 2
14929: PUSH
14930: LD_INT 4
14932: PUSH
14933: LD_INT 5
14935: PUSH
14936: LD_INT 6
14938: PUSH
14939: LD_INT 8
14941: PUSH
14942: LD_INT 11
14944: PUSH
14945: LD_INT 12
14947: PUSH
14948: LD_INT 15
14950: PUSH
14951: LD_INT 16
14953: PUSH
14954: LD_INT 20
14956: PUSH
14957: LD_INT 21
14959: PUSH
14960: LD_INT 22
14962: PUSH
14963: LD_INT 23
14965: PUSH
14966: LD_INT 25
14968: PUSH
14969: LD_INT 26
14971: PUSH
14972: LD_INT 30
14974: PUSH
14975: LD_INT 31
14977: PUSH
14978: LD_INT 32
14980: PUSH
14981: LD_INT 36
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: PUSH
15005: LD_INT 101
15007: PUSH
15008: LD_INT 102
15010: PUSH
15011: LD_INT 105
15013: PUSH
15014: LD_INT 106
15016: PUSH
15017: LD_INT 108
15019: PUSH
15020: LD_INT 109
15022: PUSH
15023: LD_INT 112
15025: PUSH
15026: LD_INT 116
15028: PUSH
15029: LD_INT 117
15031: PUSH
15032: LD_INT 118
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: ST_TO_ADDR
15051: GO 17574
15053: LD_INT 7
15055: DOUBLE
15056: EQUAL
15057: IFTRUE 15061
15059: GO 15173
15061: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
15062: LD_ADDR_VAR 0 2
15066: PUSH
15067: LD_INT 2
15069: PUSH
15070: LD_INT 4
15072: PUSH
15073: LD_INT 5
15075: PUSH
15076: LD_INT 7
15078: PUSH
15079: LD_INT 11
15081: PUSH
15082: LD_INT 12
15084: PUSH
15085: LD_INT 15
15087: PUSH
15088: LD_INT 16
15090: PUSH
15091: LD_INT 20
15093: PUSH
15094: LD_INT 21
15096: PUSH
15097: LD_INT 22
15099: PUSH
15100: LD_INT 23
15102: PUSH
15103: LD_INT 25
15105: PUSH
15106: LD_INT 26
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: PUSH
15125: LD_INT 101
15127: PUSH
15128: LD_INT 102
15130: PUSH
15131: LD_INT 103
15133: PUSH
15134: LD_INT 105
15136: PUSH
15137: LD_INT 106
15139: PUSH
15140: LD_INT 108
15142: PUSH
15143: LD_INT 112
15145: PUSH
15146: LD_INT 116
15148: PUSH
15149: LD_INT 117
15151: PUSH
15152: LD_INT 118
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: ST_TO_ADDR
15171: GO 17574
15173: LD_INT 8
15175: DOUBLE
15176: EQUAL
15177: IFTRUE 15181
15179: GO 15321
15181: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
15182: LD_ADDR_VAR 0 2
15186: PUSH
15187: LD_INT 2
15189: PUSH
15190: LD_INT 4
15192: PUSH
15193: LD_INT 5
15195: PUSH
15196: LD_INT 6
15198: PUSH
15199: LD_INT 7
15201: PUSH
15202: LD_INT 8
15204: PUSH
15205: LD_INT 11
15207: PUSH
15208: LD_INT 12
15210: PUSH
15211: LD_INT 15
15213: PUSH
15214: LD_INT 16
15216: PUSH
15217: LD_INT 20
15219: PUSH
15220: LD_INT 21
15222: PUSH
15223: LD_INT 22
15225: PUSH
15226: LD_INT 23
15228: PUSH
15229: LD_INT 25
15231: PUSH
15232: LD_INT 26
15234: PUSH
15235: LD_INT 30
15237: PUSH
15238: LD_INT 31
15240: PUSH
15241: LD_INT 32
15243: PUSH
15244: LD_INT 36
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: PUSH
15269: LD_INT 101
15271: PUSH
15272: LD_INT 102
15274: PUSH
15275: LD_INT 103
15277: PUSH
15278: LD_INT 105
15280: PUSH
15281: LD_INT 106
15283: PUSH
15284: LD_INT 108
15286: PUSH
15287: LD_INT 109
15289: PUSH
15290: LD_INT 112
15292: PUSH
15293: LD_INT 116
15295: PUSH
15296: LD_INT 117
15298: PUSH
15299: LD_INT 118
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: ST_TO_ADDR
15319: GO 17574
15321: LD_INT 9
15323: DOUBLE
15324: EQUAL
15325: IFTRUE 15329
15327: GO 15477
15329: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15330: LD_ADDR_VAR 0 2
15334: PUSH
15335: LD_INT 2
15337: PUSH
15338: LD_INT 4
15340: PUSH
15341: LD_INT 5
15343: PUSH
15344: LD_INT 6
15346: PUSH
15347: LD_INT 7
15349: PUSH
15350: LD_INT 8
15352: PUSH
15353: LD_INT 11
15355: PUSH
15356: LD_INT 12
15358: PUSH
15359: LD_INT 15
15361: PUSH
15362: LD_INT 16
15364: PUSH
15365: LD_INT 20
15367: PUSH
15368: LD_INT 21
15370: PUSH
15371: LD_INT 22
15373: PUSH
15374: LD_INT 23
15376: PUSH
15377: LD_INT 25
15379: PUSH
15380: LD_INT 26
15382: PUSH
15383: LD_INT 28
15385: PUSH
15386: LD_INT 30
15388: PUSH
15389: LD_INT 31
15391: PUSH
15392: LD_INT 32
15394: PUSH
15395: LD_INT 36
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: PUSH
15421: LD_INT 101
15423: PUSH
15424: LD_INT 102
15426: PUSH
15427: LD_INT 103
15429: PUSH
15430: LD_INT 105
15432: PUSH
15433: LD_INT 106
15435: PUSH
15436: LD_INT 108
15438: PUSH
15439: LD_INT 109
15441: PUSH
15442: LD_INT 112
15444: PUSH
15445: LD_INT 114
15447: PUSH
15448: LD_INT 116
15450: PUSH
15451: LD_INT 117
15453: PUSH
15454: LD_INT 118
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: ST_TO_ADDR
15475: GO 17574
15477: LD_INT 10
15479: DOUBLE
15480: EQUAL
15481: IFTRUE 15485
15483: GO 15681
15485: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15486: LD_ADDR_VAR 0 2
15490: PUSH
15491: LD_INT 2
15493: PUSH
15494: LD_INT 4
15496: PUSH
15497: LD_INT 5
15499: PUSH
15500: LD_INT 6
15502: PUSH
15503: LD_INT 7
15505: PUSH
15506: LD_INT 8
15508: PUSH
15509: LD_INT 9
15511: PUSH
15512: LD_INT 10
15514: PUSH
15515: LD_INT 11
15517: PUSH
15518: LD_INT 12
15520: PUSH
15521: LD_INT 13
15523: PUSH
15524: LD_INT 14
15526: PUSH
15527: LD_INT 15
15529: PUSH
15530: LD_INT 16
15532: PUSH
15533: LD_INT 17
15535: PUSH
15536: LD_INT 18
15538: PUSH
15539: LD_INT 19
15541: PUSH
15542: LD_INT 20
15544: PUSH
15545: LD_INT 21
15547: PUSH
15548: LD_INT 22
15550: PUSH
15551: LD_INT 23
15553: PUSH
15554: LD_INT 24
15556: PUSH
15557: LD_INT 25
15559: PUSH
15560: LD_INT 26
15562: PUSH
15563: LD_INT 28
15565: PUSH
15566: LD_INT 30
15568: PUSH
15569: LD_INT 31
15571: PUSH
15572: LD_INT 32
15574: PUSH
15575: LD_INT 36
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: PUSH
15609: LD_INT 101
15611: PUSH
15612: LD_INT 102
15614: PUSH
15615: LD_INT 103
15617: PUSH
15618: LD_INT 104
15620: PUSH
15621: LD_INT 105
15623: PUSH
15624: LD_INT 106
15626: PUSH
15627: LD_INT 107
15629: PUSH
15630: LD_INT 108
15632: PUSH
15633: LD_INT 109
15635: PUSH
15636: LD_INT 110
15638: PUSH
15639: LD_INT 111
15641: PUSH
15642: LD_INT 112
15644: PUSH
15645: LD_INT 114
15647: PUSH
15648: LD_INT 116
15650: PUSH
15651: LD_INT 117
15653: PUSH
15654: LD_INT 118
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: ST_TO_ADDR
15679: GO 17574
15681: LD_INT 11
15683: DOUBLE
15684: EQUAL
15685: IFTRUE 15689
15687: GO 15893
15689: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15690: LD_ADDR_VAR 0 2
15694: PUSH
15695: LD_INT 2
15697: PUSH
15698: LD_INT 3
15700: PUSH
15701: LD_INT 4
15703: PUSH
15704: LD_INT 5
15706: PUSH
15707: LD_INT 6
15709: PUSH
15710: LD_INT 7
15712: PUSH
15713: LD_INT 8
15715: PUSH
15716: LD_INT 9
15718: PUSH
15719: LD_INT 10
15721: PUSH
15722: LD_INT 11
15724: PUSH
15725: LD_INT 12
15727: PUSH
15728: LD_INT 13
15730: PUSH
15731: LD_INT 14
15733: PUSH
15734: LD_INT 15
15736: PUSH
15737: LD_INT 16
15739: PUSH
15740: LD_INT 17
15742: PUSH
15743: LD_INT 18
15745: PUSH
15746: LD_INT 19
15748: PUSH
15749: LD_INT 20
15751: PUSH
15752: LD_INT 21
15754: PUSH
15755: LD_INT 22
15757: PUSH
15758: LD_INT 23
15760: PUSH
15761: LD_INT 24
15763: PUSH
15764: LD_INT 25
15766: PUSH
15767: LD_INT 26
15769: PUSH
15770: LD_INT 28
15772: PUSH
15773: LD_INT 30
15775: PUSH
15776: LD_INT 31
15778: PUSH
15779: LD_INT 32
15781: PUSH
15782: LD_INT 34
15784: PUSH
15785: LD_INT 36
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: PUSH
15821: LD_INT 101
15823: PUSH
15824: LD_INT 102
15826: PUSH
15827: LD_INT 103
15829: PUSH
15830: LD_INT 104
15832: PUSH
15833: LD_INT 105
15835: PUSH
15836: LD_INT 106
15838: PUSH
15839: LD_INT 107
15841: PUSH
15842: LD_INT 108
15844: PUSH
15845: LD_INT 109
15847: PUSH
15848: LD_INT 110
15850: PUSH
15851: LD_INT 111
15853: PUSH
15854: LD_INT 112
15856: PUSH
15857: LD_INT 114
15859: PUSH
15860: LD_INT 116
15862: PUSH
15863: LD_INT 117
15865: PUSH
15866: LD_INT 118
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: ST_TO_ADDR
15891: GO 17574
15893: LD_INT 12
15895: DOUBLE
15896: EQUAL
15897: IFTRUE 15901
15899: GO 16121
15901: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
15902: LD_ADDR_VAR 0 2
15906: PUSH
15907: LD_INT 1
15909: PUSH
15910: LD_INT 2
15912: PUSH
15913: LD_INT 3
15915: PUSH
15916: LD_INT 4
15918: PUSH
15919: LD_INT 5
15921: PUSH
15922: LD_INT 6
15924: PUSH
15925: LD_INT 7
15927: PUSH
15928: LD_INT 8
15930: PUSH
15931: LD_INT 9
15933: PUSH
15934: LD_INT 10
15936: PUSH
15937: LD_INT 11
15939: PUSH
15940: LD_INT 12
15942: PUSH
15943: LD_INT 13
15945: PUSH
15946: LD_INT 14
15948: PUSH
15949: LD_INT 15
15951: PUSH
15952: LD_INT 16
15954: PUSH
15955: LD_INT 17
15957: PUSH
15958: LD_INT 18
15960: PUSH
15961: LD_INT 19
15963: PUSH
15964: LD_INT 20
15966: PUSH
15967: LD_INT 21
15969: PUSH
15970: LD_INT 22
15972: PUSH
15973: LD_INT 23
15975: PUSH
15976: LD_INT 24
15978: PUSH
15979: LD_INT 25
15981: PUSH
15982: LD_INT 26
15984: PUSH
15985: LD_INT 27
15987: PUSH
15988: LD_INT 28
15990: PUSH
15991: LD_INT 30
15993: PUSH
15994: LD_INT 31
15996: PUSH
15997: LD_INT 32
15999: PUSH
16000: LD_INT 33
16002: PUSH
16003: LD_INT 34
16005: PUSH
16006: LD_INT 36
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: PUSH
16045: LD_INT 101
16047: PUSH
16048: LD_INT 102
16050: PUSH
16051: LD_INT 103
16053: PUSH
16054: LD_INT 104
16056: PUSH
16057: LD_INT 105
16059: PUSH
16060: LD_INT 106
16062: PUSH
16063: LD_INT 107
16065: PUSH
16066: LD_INT 108
16068: PUSH
16069: LD_INT 109
16071: PUSH
16072: LD_INT 110
16074: PUSH
16075: LD_INT 111
16077: PUSH
16078: LD_INT 112
16080: PUSH
16081: LD_INT 113
16083: PUSH
16084: LD_INT 114
16086: PUSH
16087: LD_INT 116
16089: PUSH
16090: LD_INT 117
16092: PUSH
16093: LD_INT 118
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: ST_TO_ADDR
16119: GO 17574
16121: LD_INT 13
16123: DOUBLE
16124: EQUAL
16125: IFTRUE 16129
16127: GO 16337
16129: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
16130: LD_ADDR_VAR 0 2
16134: PUSH
16135: LD_INT 1
16137: PUSH
16138: LD_INT 2
16140: PUSH
16141: LD_INT 3
16143: PUSH
16144: LD_INT 4
16146: PUSH
16147: LD_INT 5
16149: PUSH
16150: LD_INT 8
16152: PUSH
16153: LD_INT 9
16155: PUSH
16156: LD_INT 10
16158: PUSH
16159: LD_INT 11
16161: PUSH
16162: LD_INT 12
16164: PUSH
16165: LD_INT 14
16167: PUSH
16168: LD_INT 15
16170: PUSH
16171: LD_INT 16
16173: PUSH
16174: LD_INT 17
16176: PUSH
16177: LD_INT 18
16179: PUSH
16180: LD_INT 19
16182: PUSH
16183: LD_INT 20
16185: PUSH
16186: LD_INT 21
16188: PUSH
16189: LD_INT 22
16191: PUSH
16192: LD_INT 23
16194: PUSH
16195: LD_INT 24
16197: PUSH
16198: LD_INT 25
16200: PUSH
16201: LD_INT 26
16203: PUSH
16204: LD_INT 27
16206: PUSH
16207: LD_INT 28
16209: PUSH
16210: LD_INT 30
16212: PUSH
16213: LD_INT 31
16215: PUSH
16216: LD_INT 32
16218: PUSH
16219: LD_INT 33
16221: PUSH
16222: LD_INT 34
16224: PUSH
16225: LD_INT 36
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: PUSH
16261: LD_INT 101
16263: PUSH
16264: LD_INT 102
16266: PUSH
16267: LD_INT 103
16269: PUSH
16270: LD_INT 104
16272: PUSH
16273: LD_INT 105
16275: PUSH
16276: LD_INT 106
16278: PUSH
16279: LD_INT 107
16281: PUSH
16282: LD_INT 108
16284: PUSH
16285: LD_INT 109
16287: PUSH
16288: LD_INT 110
16290: PUSH
16291: LD_INT 111
16293: PUSH
16294: LD_INT 112
16296: PUSH
16297: LD_INT 113
16299: PUSH
16300: LD_INT 114
16302: PUSH
16303: LD_INT 116
16305: PUSH
16306: LD_INT 117
16308: PUSH
16309: LD_INT 118
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: ST_TO_ADDR
16335: GO 17574
16337: LD_INT 14
16339: DOUBLE
16340: EQUAL
16341: IFTRUE 16345
16343: GO 16569
16345: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16346: LD_ADDR_VAR 0 2
16350: PUSH
16351: LD_INT 1
16353: PUSH
16354: LD_INT 2
16356: PUSH
16357: LD_INT 3
16359: PUSH
16360: LD_INT 4
16362: PUSH
16363: LD_INT 5
16365: PUSH
16366: LD_INT 6
16368: PUSH
16369: LD_INT 7
16371: PUSH
16372: LD_INT 8
16374: PUSH
16375: LD_INT 9
16377: PUSH
16378: LD_INT 10
16380: PUSH
16381: LD_INT 11
16383: PUSH
16384: LD_INT 12
16386: PUSH
16387: LD_INT 13
16389: PUSH
16390: LD_INT 14
16392: PUSH
16393: LD_INT 15
16395: PUSH
16396: LD_INT 16
16398: PUSH
16399: LD_INT 17
16401: PUSH
16402: LD_INT 18
16404: PUSH
16405: LD_INT 19
16407: PUSH
16408: LD_INT 20
16410: PUSH
16411: LD_INT 21
16413: PUSH
16414: LD_INT 22
16416: PUSH
16417: LD_INT 23
16419: PUSH
16420: LD_INT 24
16422: PUSH
16423: LD_INT 25
16425: PUSH
16426: LD_INT 26
16428: PUSH
16429: LD_INT 27
16431: PUSH
16432: LD_INT 28
16434: PUSH
16435: LD_INT 29
16437: PUSH
16438: LD_INT 30
16440: PUSH
16441: LD_INT 31
16443: PUSH
16444: LD_INT 32
16446: PUSH
16447: LD_INT 33
16449: PUSH
16450: LD_INT 34
16452: PUSH
16453: LD_INT 36
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: PUSH
16493: LD_INT 101
16495: PUSH
16496: LD_INT 102
16498: PUSH
16499: LD_INT 103
16501: PUSH
16502: LD_INT 104
16504: PUSH
16505: LD_INT 105
16507: PUSH
16508: LD_INT 106
16510: PUSH
16511: LD_INT 107
16513: PUSH
16514: LD_INT 108
16516: PUSH
16517: LD_INT 109
16519: PUSH
16520: LD_INT 110
16522: PUSH
16523: LD_INT 111
16525: PUSH
16526: LD_INT 112
16528: PUSH
16529: LD_INT 113
16531: PUSH
16532: LD_INT 114
16534: PUSH
16535: LD_INT 116
16537: PUSH
16538: LD_INT 117
16540: PUSH
16541: LD_INT 118
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: ST_TO_ADDR
16567: GO 17574
16569: LD_INT 15
16571: DOUBLE
16572: EQUAL
16573: IFTRUE 16577
16575: GO 16801
16577: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16578: LD_ADDR_VAR 0 2
16582: PUSH
16583: LD_INT 1
16585: PUSH
16586: LD_INT 2
16588: PUSH
16589: LD_INT 3
16591: PUSH
16592: LD_INT 4
16594: PUSH
16595: LD_INT 5
16597: PUSH
16598: LD_INT 6
16600: PUSH
16601: LD_INT 7
16603: PUSH
16604: LD_INT 8
16606: PUSH
16607: LD_INT 9
16609: PUSH
16610: LD_INT 10
16612: PUSH
16613: LD_INT 11
16615: PUSH
16616: LD_INT 12
16618: PUSH
16619: LD_INT 13
16621: PUSH
16622: LD_INT 14
16624: PUSH
16625: LD_INT 15
16627: PUSH
16628: LD_INT 16
16630: PUSH
16631: LD_INT 17
16633: PUSH
16634: LD_INT 18
16636: PUSH
16637: LD_INT 19
16639: PUSH
16640: LD_INT 20
16642: PUSH
16643: LD_INT 21
16645: PUSH
16646: LD_INT 22
16648: PUSH
16649: LD_INT 23
16651: PUSH
16652: LD_INT 24
16654: PUSH
16655: LD_INT 25
16657: PUSH
16658: LD_INT 26
16660: PUSH
16661: LD_INT 27
16663: PUSH
16664: LD_INT 28
16666: PUSH
16667: LD_INT 29
16669: PUSH
16670: LD_INT 30
16672: PUSH
16673: LD_INT 31
16675: PUSH
16676: LD_INT 32
16678: PUSH
16679: LD_INT 33
16681: PUSH
16682: LD_INT 34
16684: PUSH
16685: LD_INT 36
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: PUSH
16725: LD_INT 101
16727: PUSH
16728: LD_INT 102
16730: PUSH
16731: LD_INT 103
16733: PUSH
16734: LD_INT 104
16736: PUSH
16737: LD_INT 105
16739: PUSH
16740: LD_INT 106
16742: PUSH
16743: LD_INT 107
16745: PUSH
16746: LD_INT 108
16748: PUSH
16749: LD_INT 109
16751: PUSH
16752: LD_INT 110
16754: PUSH
16755: LD_INT 111
16757: PUSH
16758: LD_INT 112
16760: PUSH
16761: LD_INT 113
16763: PUSH
16764: LD_INT 114
16766: PUSH
16767: LD_INT 116
16769: PUSH
16770: LD_INT 117
16772: PUSH
16773: LD_INT 118
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: ST_TO_ADDR
16799: GO 17574
16801: LD_INT 16
16803: DOUBLE
16804: EQUAL
16805: IFTRUE 16809
16807: GO 16945
16809: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16810: LD_ADDR_VAR 0 2
16814: PUSH
16815: LD_INT 2
16817: PUSH
16818: LD_INT 4
16820: PUSH
16821: LD_INT 5
16823: PUSH
16824: LD_INT 7
16826: PUSH
16827: LD_INT 11
16829: PUSH
16830: LD_INT 12
16832: PUSH
16833: LD_INT 15
16835: PUSH
16836: LD_INT 16
16838: PUSH
16839: LD_INT 20
16841: PUSH
16842: LD_INT 21
16844: PUSH
16845: LD_INT 22
16847: PUSH
16848: LD_INT 23
16850: PUSH
16851: LD_INT 25
16853: PUSH
16854: LD_INT 26
16856: PUSH
16857: LD_INT 30
16859: PUSH
16860: LD_INT 31
16862: PUSH
16863: LD_INT 32
16865: PUSH
16866: LD_INT 33
16868: PUSH
16869: LD_INT 34
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: PUSH
16893: LD_INT 101
16895: PUSH
16896: LD_INT 102
16898: PUSH
16899: LD_INT 103
16901: PUSH
16902: LD_INT 106
16904: PUSH
16905: LD_INT 108
16907: PUSH
16908: LD_INT 112
16910: PUSH
16911: LD_INT 113
16913: PUSH
16914: LD_INT 114
16916: PUSH
16917: LD_INT 116
16919: PUSH
16920: LD_INT 117
16922: PUSH
16923: LD_INT 118
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: ST_TO_ADDR
16943: GO 17574
16945: LD_INT 17
16947: DOUBLE
16948: EQUAL
16949: IFTRUE 16953
16951: GO 17177
16953: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
16954: LD_ADDR_VAR 0 2
16958: PUSH
16959: LD_INT 1
16961: PUSH
16962: LD_INT 2
16964: PUSH
16965: LD_INT 3
16967: PUSH
16968: LD_INT 4
16970: PUSH
16971: LD_INT 5
16973: PUSH
16974: LD_INT 6
16976: PUSH
16977: LD_INT 7
16979: PUSH
16980: LD_INT 8
16982: PUSH
16983: LD_INT 9
16985: PUSH
16986: LD_INT 10
16988: PUSH
16989: LD_INT 11
16991: PUSH
16992: LD_INT 12
16994: PUSH
16995: LD_INT 13
16997: PUSH
16998: LD_INT 14
17000: PUSH
17001: LD_INT 15
17003: PUSH
17004: LD_INT 16
17006: PUSH
17007: LD_INT 17
17009: PUSH
17010: LD_INT 18
17012: PUSH
17013: LD_INT 19
17015: PUSH
17016: LD_INT 20
17018: PUSH
17019: LD_INT 21
17021: PUSH
17022: LD_INT 22
17024: PUSH
17025: LD_INT 23
17027: PUSH
17028: LD_INT 24
17030: PUSH
17031: LD_INT 25
17033: PUSH
17034: LD_INT 26
17036: PUSH
17037: LD_INT 27
17039: PUSH
17040: LD_INT 28
17042: PUSH
17043: LD_INT 29
17045: PUSH
17046: LD_INT 30
17048: PUSH
17049: LD_INT 31
17051: PUSH
17052: LD_INT 32
17054: PUSH
17055: LD_INT 33
17057: PUSH
17058: LD_INT 34
17060: PUSH
17061: LD_INT 36
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: PUSH
17101: LD_INT 101
17103: PUSH
17104: LD_INT 102
17106: PUSH
17107: LD_INT 103
17109: PUSH
17110: LD_INT 104
17112: PUSH
17113: LD_INT 105
17115: PUSH
17116: LD_INT 106
17118: PUSH
17119: LD_INT 107
17121: PUSH
17122: LD_INT 108
17124: PUSH
17125: LD_INT 109
17127: PUSH
17128: LD_INT 110
17130: PUSH
17131: LD_INT 111
17133: PUSH
17134: LD_INT 112
17136: PUSH
17137: LD_INT 113
17139: PUSH
17140: LD_INT 114
17142: PUSH
17143: LD_INT 116
17145: PUSH
17146: LD_INT 117
17148: PUSH
17149: LD_INT 118
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: ST_TO_ADDR
17175: GO 17574
17177: LD_INT 18
17179: DOUBLE
17180: EQUAL
17181: IFTRUE 17185
17183: GO 17333
17185: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
17186: LD_ADDR_VAR 0 2
17190: PUSH
17191: LD_INT 2
17193: PUSH
17194: LD_INT 4
17196: PUSH
17197: LD_INT 5
17199: PUSH
17200: LD_INT 7
17202: PUSH
17203: LD_INT 11
17205: PUSH
17206: LD_INT 12
17208: PUSH
17209: LD_INT 15
17211: PUSH
17212: LD_INT 16
17214: PUSH
17215: LD_INT 20
17217: PUSH
17218: LD_INT 21
17220: PUSH
17221: LD_INT 22
17223: PUSH
17224: LD_INT 23
17226: PUSH
17227: LD_INT 25
17229: PUSH
17230: LD_INT 26
17232: PUSH
17233: LD_INT 30
17235: PUSH
17236: LD_INT 31
17238: PUSH
17239: LD_INT 32
17241: PUSH
17242: LD_INT 33
17244: PUSH
17245: LD_INT 34
17247: PUSH
17248: LD_INT 35
17250: PUSH
17251: LD_INT 36
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 101
17279: PUSH
17280: LD_INT 102
17282: PUSH
17283: LD_INT 103
17285: PUSH
17286: LD_INT 106
17288: PUSH
17289: LD_INT 108
17291: PUSH
17292: LD_INT 112
17294: PUSH
17295: LD_INT 113
17297: PUSH
17298: LD_INT 114
17300: PUSH
17301: LD_INT 115
17303: PUSH
17304: LD_INT 116
17306: PUSH
17307: LD_INT 117
17309: PUSH
17310: LD_INT 118
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: ST_TO_ADDR
17331: GO 17574
17333: LD_INT 19
17335: DOUBLE
17336: EQUAL
17337: IFTRUE 17341
17339: GO 17573
17341: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17342: LD_ADDR_VAR 0 2
17346: PUSH
17347: LD_INT 1
17349: PUSH
17350: LD_INT 2
17352: PUSH
17353: LD_INT 3
17355: PUSH
17356: LD_INT 4
17358: PUSH
17359: LD_INT 5
17361: PUSH
17362: LD_INT 6
17364: PUSH
17365: LD_INT 7
17367: PUSH
17368: LD_INT 8
17370: PUSH
17371: LD_INT 9
17373: PUSH
17374: LD_INT 10
17376: PUSH
17377: LD_INT 11
17379: PUSH
17380: LD_INT 12
17382: PUSH
17383: LD_INT 13
17385: PUSH
17386: LD_INT 14
17388: PUSH
17389: LD_INT 15
17391: PUSH
17392: LD_INT 16
17394: PUSH
17395: LD_INT 17
17397: PUSH
17398: LD_INT 18
17400: PUSH
17401: LD_INT 19
17403: PUSH
17404: LD_INT 20
17406: PUSH
17407: LD_INT 21
17409: PUSH
17410: LD_INT 22
17412: PUSH
17413: LD_INT 23
17415: PUSH
17416: LD_INT 24
17418: PUSH
17419: LD_INT 25
17421: PUSH
17422: LD_INT 26
17424: PUSH
17425: LD_INT 27
17427: PUSH
17428: LD_INT 28
17430: PUSH
17431: LD_INT 29
17433: PUSH
17434: LD_INT 30
17436: PUSH
17437: LD_INT 31
17439: PUSH
17440: LD_INT 32
17442: PUSH
17443: LD_INT 33
17445: PUSH
17446: LD_INT 34
17448: PUSH
17449: LD_INT 35
17451: PUSH
17452: LD_INT 36
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 101
17495: PUSH
17496: LD_INT 102
17498: PUSH
17499: LD_INT 103
17501: PUSH
17502: LD_INT 104
17504: PUSH
17505: LD_INT 105
17507: PUSH
17508: LD_INT 106
17510: PUSH
17511: LD_INT 107
17513: PUSH
17514: LD_INT 108
17516: PUSH
17517: LD_INT 109
17519: PUSH
17520: LD_INT 110
17522: PUSH
17523: LD_INT 111
17525: PUSH
17526: LD_INT 112
17528: PUSH
17529: LD_INT 113
17531: PUSH
17532: LD_INT 114
17534: PUSH
17535: LD_INT 115
17537: PUSH
17538: LD_INT 116
17540: PUSH
17541: LD_INT 117
17543: PUSH
17544: LD_INT 118
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: ST_TO_ADDR
17571: GO 17574
17573: POP
// end else
17574: GO 17805
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17576: LD_ADDR_VAR 0 2
17580: PUSH
17581: LD_INT 1
17583: PUSH
17584: LD_INT 2
17586: PUSH
17587: LD_INT 3
17589: PUSH
17590: LD_INT 4
17592: PUSH
17593: LD_INT 5
17595: PUSH
17596: LD_INT 6
17598: PUSH
17599: LD_INT 7
17601: PUSH
17602: LD_INT 8
17604: PUSH
17605: LD_INT 9
17607: PUSH
17608: LD_INT 10
17610: PUSH
17611: LD_INT 11
17613: PUSH
17614: LD_INT 12
17616: PUSH
17617: LD_INT 13
17619: PUSH
17620: LD_INT 14
17622: PUSH
17623: LD_INT 15
17625: PUSH
17626: LD_INT 16
17628: PUSH
17629: LD_INT 17
17631: PUSH
17632: LD_INT 18
17634: PUSH
17635: LD_INT 19
17637: PUSH
17638: LD_INT 20
17640: PUSH
17641: LD_INT 21
17643: PUSH
17644: LD_INT 22
17646: PUSH
17647: LD_INT 23
17649: PUSH
17650: LD_INT 24
17652: PUSH
17653: LD_INT 25
17655: PUSH
17656: LD_INT 26
17658: PUSH
17659: LD_INT 27
17661: PUSH
17662: LD_INT 28
17664: PUSH
17665: LD_INT 29
17667: PUSH
17668: LD_INT 30
17670: PUSH
17671: LD_INT 31
17673: PUSH
17674: LD_INT 32
17676: PUSH
17677: LD_INT 33
17679: PUSH
17680: LD_INT 34
17682: PUSH
17683: LD_INT 35
17685: PUSH
17686: LD_INT 36
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 101
17729: PUSH
17730: LD_INT 102
17732: PUSH
17733: LD_INT 103
17735: PUSH
17736: LD_INT 104
17738: PUSH
17739: LD_INT 105
17741: PUSH
17742: LD_INT 106
17744: PUSH
17745: LD_INT 107
17747: PUSH
17748: LD_INT 108
17750: PUSH
17751: LD_INT 109
17753: PUSH
17754: LD_INT 110
17756: PUSH
17757: LD_INT 111
17759: PUSH
17760: LD_INT 112
17762: PUSH
17763: LD_INT 113
17765: PUSH
17766: LD_INT 114
17768: PUSH
17769: LD_INT 115
17771: PUSH
17772: LD_INT 116
17774: PUSH
17775: LD_INT 117
17777: PUSH
17778: LD_INT 118
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: ST_TO_ADDR
// if result then
17805: LD_VAR 0 2
17809: IFFALSE 18595
// begin normal :=  ;
17811: LD_ADDR_VAR 0 5
17815: PUSH
17816: LD_STRING 
17818: ST_TO_ADDR
// hardcore :=  ;
17819: LD_ADDR_VAR 0 6
17823: PUSH
17824: LD_STRING 
17826: ST_TO_ADDR
// active :=  ;
17827: LD_ADDR_VAR 0 7
17831: PUSH
17832: LD_STRING 
17834: ST_TO_ADDR
// for i = 1 to normalCounter do
17835: LD_ADDR_VAR 0 8
17839: PUSH
17840: DOUBLE
17841: LD_INT 1
17843: DEC
17844: ST_TO_ADDR
17845: LD_EXP 33
17849: PUSH
17850: FOR_TO
17851: IFFALSE 17952
// begin tmp := 0 ;
17853: LD_ADDR_VAR 0 3
17857: PUSH
17858: LD_STRING 0
17860: ST_TO_ADDR
// if result [ 1 ] then
17861: LD_VAR 0 2
17865: PUSH
17866: LD_INT 1
17868: ARRAY
17869: IFFALSE 17934
// if result [ 1 ] [ 1 ] = i then
17871: LD_VAR 0 2
17875: PUSH
17876: LD_INT 1
17878: ARRAY
17879: PUSH
17880: LD_INT 1
17882: ARRAY
17883: PUSH
17884: LD_VAR 0 8
17888: EQUAL
17889: IFFALSE 17934
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17891: LD_ADDR_VAR 0 2
17895: PUSH
17896: LD_VAR 0 2
17900: PPUSH
17901: LD_INT 1
17903: PPUSH
17904: LD_VAR 0 2
17908: PUSH
17909: LD_INT 1
17911: ARRAY
17912: PPUSH
17913: LD_INT 1
17915: PPUSH
17916: CALL_OW 3
17920: PPUSH
17921: CALL_OW 1
17925: ST_TO_ADDR
// tmp := 1 ;
17926: LD_ADDR_VAR 0 3
17930: PUSH
17931: LD_STRING 1
17933: ST_TO_ADDR
// end ; normal := normal & tmp ;
17934: LD_ADDR_VAR 0 5
17938: PUSH
17939: LD_VAR 0 5
17943: PUSH
17944: LD_VAR 0 3
17948: STR
17949: ST_TO_ADDR
// end ;
17950: GO 17850
17952: POP
17953: POP
// for i = 1 to hardcoreCounter do
17954: LD_ADDR_VAR 0 8
17958: PUSH
17959: DOUBLE
17960: LD_INT 1
17962: DEC
17963: ST_TO_ADDR
17964: LD_EXP 34
17968: PUSH
17969: FOR_TO
17970: IFFALSE 18075
// begin tmp := 0 ;
17972: LD_ADDR_VAR 0 3
17976: PUSH
17977: LD_STRING 0
17979: ST_TO_ADDR
// if result [ 2 ] then
17980: LD_VAR 0 2
17984: PUSH
17985: LD_INT 2
17987: ARRAY
17988: IFFALSE 18057
// if result [ 2 ] [ 1 ] = 100 + i then
17990: LD_VAR 0 2
17994: PUSH
17995: LD_INT 2
17997: ARRAY
17998: PUSH
17999: LD_INT 1
18001: ARRAY
18002: PUSH
18003: LD_INT 100
18005: PUSH
18006: LD_VAR 0 8
18010: PLUS
18011: EQUAL
18012: IFFALSE 18057
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
18014: LD_ADDR_VAR 0 2
18018: PUSH
18019: LD_VAR 0 2
18023: PPUSH
18024: LD_INT 2
18026: PPUSH
18027: LD_VAR 0 2
18031: PUSH
18032: LD_INT 2
18034: ARRAY
18035: PPUSH
18036: LD_INT 1
18038: PPUSH
18039: CALL_OW 3
18043: PPUSH
18044: CALL_OW 1
18048: ST_TO_ADDR
// tmp := 1 ;
18049: LD_ADDR_VAR 0 3
18053: PUSH
18054: LD_STRING 1
18056: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
18057: LD_ADDR_VAR 0 6
18061: PUSH
18062: LD_VAR 0 6
18066: PUSH
18067: LD_VAR 0 3
18071: STR
18072: ST_TO_ADDR
// end ;
18073: GO 17969
18075: POP
18076: POP
// if isGameLoad then
18077: LD_VAR 0 1
18081: IFFALSE 18556
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
18083: LD_ADDR_VAR 0 4
18087: PUSH
18088: LD_EXP 37
18092: PUSH
18093: LD_EXP 36
18097: PUSH
18098: LD_EXP 38
18102: PUSH
18103: LD_EXP 35
18107: PUSH
18108: LD_EXP 39
18112: PUSH
18113: LD_EXP 40
18117: PUSH
18118: LD_EXP 41
18122: PUSH
18123: LD_EXP 42
18127: PUSH
18128: LD_EXP 43
18132: PUSH
18133: LD_EXP 44
18137: PUSH
18138: LD_EXP 45
18142: PUSH
18143: LD_EXP 46
18147: PUSH
18148: LD_EXP 47
18152: PUSH
18153: LD_EXP 48
18157: PUSH
18158: LD_EXP 56
18162: PUSH
18163: LD_EXP 57
18167: PUSH
18168: LD_EXP 58
18172: PUSH
18173: LD_EXP 59
18177: PUSH
18178: LD_EXP 61
18182: PUSH
18183: LD_EXP 62
18187: PUSH
18188: LD_EXP 63
18192: PUSH
18193: LD_EXP 66
18197: PUSH
18198: LD_EXP 68
18202: PUSH
18203: LD_EXP 69
18207: PUSH
18208: LD_EXP 70
18212: PUSH
18213: LD_EXP 72
18217: PUSH
18218: LD_EXP 73
18222: PUSH
18223: LD_EXP 76
18227: PUSH
18228: LD_EXP 77
18232: PUSH
18233: LD_EXP 78
18237: PUSH
18238: LD_EXP 79
18242: PUSH
18243: LD_EXP 80
18247: PUSH
18248: LD_EXP 81
18252: PUSH
18253: LD_EXP 82
18257: PUSH
18258: LD_EXP 83
18262: PUSH
18263: LD_EXP 84
18267: PUSH
18268: LD_EXP 49
18272: PUSH
18273: LD_EXP 50
18277: PUSH
18278: LD_EXP 53
18282: PUSH
18283: LD_EXP 54
18287: PUSH
18288: LD_EXP 55
18292: PUSH
18293: LD_EXP 51
18297: PUSH
18298: LD_EXP 52
18302: PUSH
18303: LD_EXP 60
18307: PUSH
18308: LD_EXP 64
18312: PUSH
18313: LD_EXP 65
18317: PUSH
18318: LD_EXP 67
18322: PUSH
18323: LD_EXP 71
18327: PUSH
18328: LD_EXP 74
18332: PUSH
18333: LD_EXP 75
18337: PUSH
18338: LD_EXP 85
18342: PUSH
18343: LD_EXP 86
18347: PUSH
18348: LD_EXP 87
18352: PUSH
18353: LD_EXP 88
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: ST_TO_ADDR
// tmp :=  ;
18414: LD_ADDR_VAR 0 3
18418: PUSH
18419: LD_STRING 
18421: ST_TO_ADDR
// for i = 1 to normalCounter do
18422: LD_ADDR_VAR 0 8
18426: PUSH
18427: DOUBLE
18428: LD_INT 1
18430: DEC
18431: ST_TO_ADDR
18432: LD_EXP 33
18436: PUSH
18437: FOR_TO
18438: IFFALSE 18474
// begin if flags [ i ] then
18440: LD_VAR 0 4
18444: PUSH
18445: LD_VAR 0 8
18449: ARRAY
18450: IFFALSE 18472
// tmp := tmp & i & ; ;
18452: LD_ADDR_VAR 0 3
18456: PUSH
18457: LD_VAR 0 3
18461: PUSH
18462: LD_VAR 0 8
18466: STR
18467: PUSH
18468: LD_STRING ;
18470: STR
18471: ST_TO_ADDR
// end ;
18472: GO 18437
18474: POP
18475: POP
// for i = 1 to hardcoreCounter do
18476: LD_ADDR_VAR 0 8
18480: PUSH
18481: DOUBLE
18482: LD_INT 1
18484: DEC
18485: ST_TO_ADDR
18486: LD_EXP 34
18490: PUSH
18491: FOR_TO
18492: IFFALSE 18538
// begin if flags [ normalCounter + i ] then
18494: LD_VAR 0 4
18498: PUSH
18499: LD_EXP 33
18503: PUSH
18504: LD_VAR 0 8
18508: PLUS
18509: ARRAY
18510: IFFALSE 18536
// tmp := tmp & ( 100 + i ) & ; ;
18512: LD_ADDR_VAR 0 3
18516: PUSH
18517: LD_VAR 0 3
18521: PUSH
18522: LD_INT 100
18524: PUSH
18525: LD_VAR 0 8
18529: PLUS
18530: STR
18531: PUSH
18532: LD_STRING ;
18534: STR
18535: ST_TO_ADDR
// end ;
18536: GO 18491
18538: POP
18539: POP
// if tmp then
18540: LD_VAR 0 3
18544: IFFALSE 18556
// active := tmp ;
18546: LD_ADDR_VAR 0 7
18550: PUSH
18551: LD_VAR 0 3
18555: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18556: LD_STRING getStreamItemsFromMission("
18558: PUSH
18559: LD_VAR 0 5
18563: STR
18564: PUSH
18565: LD_STRING ","
18567: STR
18568: PUSH
18569: LD_VAR 0 6
18573: STR
18574: PUSH
18575: LD_STRING ","
18577: STR
18578: PUSH
18579: LD_VAR 0 7
18583: STR
18584: PUSH
18585: LD_STRING ")
18587: STR
18588: PPUSH
18589: CALL_OW 559
// end else
18593: GO 18602
// ToLua ( getStreamItemsFromMission("","","") ) ;
18595: LD_STRING getStreamItemsFromMission("","","")
18597: PPUSH
18598: CALL_OW 559
// end ;
18602: LD_VAR 0 2
18606: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18607: LD_EXP 32
18611: PUSH
18612: LD_EXP 37
18616: AND
18617: IFFALSE 18741
18619: GO 18621
18621: DISABLE
18622: LD_INT 0
18624: PPUSH
18625: PPUSH
// begin enable ;
18626: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18627: LD_ADDR_VAR 0 2
18631: PUSH
18632: LD_INT 22
18634: PUSH
18635: LD_OWVAR 2
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_INT 2
18646: PUSH
18647: LD_INT 34
18649: PUSH
18650: LD_INT 7
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 34
18659: PUSH
18660: LD_INT 45
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 34
18669: PUSH
18670: LD_INT 28
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 34
18679: PUSH
18680: LD_INT 47
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PPUSH
18698: CALL_OW 69
18702: ST_TO_ADDR
// if not tmp then
18703: LD_VAR 0 2
18707: NOT
18708: IFFALSE 18712
// exit ;
18710: GO 18741
// for i in tmp do
18712: LD_ADDR_VAR 0 1
18716: PUSH
18717: LD_VAR 0 2
18721: PUSH
18722: FOR_IN
18723: IFFALSE 18739
// begin SetLives ( i , 0 ) ;
18725: LD_VAR 0 1
18729: PPUSH
18730: LD_INT 0
18732: PPUSH
18733: CALL_OW 234
// end ;
18737: GO 18722
18739: POP
18740: POP
// end ;
18741: PPOPN 2
18743: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18744: LD_EXP 32
18748: PUSH
18749: LD_EXP 38
18753: AND
18754: IFFALSE 18838
18756: GO 18758
18758: DISABLE
18759: LD_INT 0
18761: PPUSH
18762: PPUSH
// begin enable ;
18763: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18764: LD_ADDR_VAR 0 2
18768: PUSH
18769: LD_INT 22
18771: PUSH
18772: LD_OWVAR 2
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PUSH
18781: LD_INT 32
18783: PUSH
18784: LD_INT 3
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PPUSH
18795: CALL_OW 69
18799: ST_TO_ADDR
// if not tmp then
18800: LD_VAR 0 2
18804: NOT
18805: IFFALSE 18809
// exit ;
18807: GO 18838
// for i in tmp do
18809: LD_ADDR_VAR 0 1
18813: PUSH
18814: LD_VAR 0 2
18818: PUSH
18819: FOR_IN
18820: IFFALSE 18836
// begin SetLives ( i , 0 ) ;
18822: LD_VAR 0 1
18826: PPUSH
18827: LD_INT 0
18829: PPUSH
18830: CALL_OW 234
// end ;
18834: GO 18819
18836: POP
18837: POP
// end ;
18838: PPOPN 2
18840: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18841: LD_EXP 32
18845: PUSH
18846: LD_EXP 35
18850: AND
18851: IFFALSE 18944
18853: GO 18855
18855: DISABLE
18856: LD_INT 0
18858: PPUSH
// begin enable ;
18859: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18860: LD_ADDR_VAR 0 1
18864: PUSH
18865: LD_INT 22
18867: PUSH
18868: LD_OWVAR 2
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 2
18879: PUSH
18880: LD_INT 25
18882: PUSH
18883: LD_INT 5
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PUSH
18890: LD_INT 25
18892: PUSH
18893: LD_INT 9
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PUSH
18900: LD_INT 25
18902: PUSH
18903: LD_INT 8
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PPUSH
18920: CALL_OW 69
18924: PUSH
18925: FOR_IN
18926: IFFALSE 18942
// begin SetClass ( i , 1 ) ;
18928: LD_VAR 0 1
18932: PPUSH
18933: LD_INT 1
18935: PPUSH
18936: CALL_OW 336
// end ;
18940: GO 18925
18942: POP
18943: POP
// end ;
18944: PPOPN 1
18946: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18947: LD_EXP 32
18951: PUSH
18952: LD_EXP 36
18956: AND
18957: PUSH
18958: LD_OWVAR 65
18962: PUSH
18963: LD_INT 7
18965: LESS
18966: AND
18967: IFFALSE 18981
18969: GO 18971
18971: DISABLE
// begin enable ;
18972: ENABLE
// game_speed := 7 ;
18973: LD_ADDR_OWVAR 65
18977: PUSH
18978: LD_INT 7
18980: ST_TO_ADDR
// end ;
18981: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18982: LD_EXP 32
18986: PUSH
18987: LD_EXP 39
18991: AND
18992: IFFALSE 19194
18994: GO 18996
18996: DISABLE
18997: LD_INT 0
18999: PPUSH
19000: PPUSH
19001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19002: LD_ADDR_VAR 0 3
19006: PUSH
19007: LD_INT 81
19009: PUSH
19010: LD_OWVAR 2
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PUSH
19019: LD_INT 21
19021: PUSH
19022: LD_INT 1
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PPUSH
19033: CALL_OW 69
19037: ST_TO_ADDR
// if not tmp then
19038: LD_VAR 0 3
19042: NOT
19043: IFFALSE 19047
// exit ;
19045: GO 19194
// if tmp > 5 then
19047: LD_VAR 0 3
19051: PUSH
19052: LD_INT 5
19054: GREATER
19055: IFFALSE 19067
// k := 5 else
19057: LD_ADDR_VAR 0 2
19061: PUSH
19062: LD_INT 5
19064: ST_TO_ADDR
19065: GO 19077
// k := tmp ;
19067: LD_ADDR_VAR 0 2
19071: PUSH
19072: LD_VAR 0 3
19076: ST_TO_ADDR
// for i := 1 to k do
19077: LD_ADDR_VAR 0 1
19081: PUSH
19082: DOUBLE
19083: LD_INT 1
19085: DEC
19086: ST_TO_ADDR
19087: LD_VAR 0 2
19091: PUSH
19092: FOR_TO
19093: IFFALSE 19192
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
19095: LD_VAR 0 3
19099: PUSH
19100: LD_VAR 0 1
19104: ARRAY
19105: PPUSH
19106: LD_VAR 0 1
19110: PUSH
19111: LD_INT 4
19113: MOD
19114: PUSH
19115: LD_INT 1
19117: PLUS
19118: PPUSH
19119: CALL_OW 259
19123: PUSH
19124: LD_INT 10
19126: LESS
19127: IFFALSE 19190
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
19129: LD_VAR 0 3
19133: PUSH
19134: LD_VAR 0 1
19138: ARRAY
19139: PPUSH
19140: LD_VAR 0 1
19144: PUSH
19145: LD_INT 4
19147: MOD
19148: PUSH
19149: LD_INT 1
19151: PLUS
19152: PPUSH
19153: LD_VAR 0 3
19157: PUSH
19158: LD_VAR 0 1
19162: ARRAY
19163: PPUSH
19164: LD_VAR 0 1
19168: PUSH
19169: LD_INT 4
19171: MOD
19172: PUSH
19173: LD_INT 1
19175: PLUS
19176: PPUSH
19177: CALL_OW 259
19181: PUSH
19182: LD_INT 1
19184: PLUS
19185: PPUSH
19186: CALL_OW 237
19190: GO 19092
19192: POP
19193: POP
// end ;
19194: PPOPN 3
19196: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
19197: LD_EXP 32
19201: PUSH
19202: LD_EXP 40
19206: AND
19207: IFFALSE 19227
19209: GO 19211
19211: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
19212: LD_INT 4
19214: PPUSH
19215: LD_OWVAR 2
19219: PPUSH
19220: LD_INT 0
19222: PPUSH
19223: CALL_OW 324
19227: END
// every 0 0$1 trigger StreamModeActive and sShovel do
19228: LD_EXP 32
19232: PUSH
19233: LD_EXP 69
19237: AND
19238: IFFALSE 19258
19240: GO 19242
19242: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
19243: LD_INT 19
19245: PPUSH
19246: LD_OWVAR 2
19250: PPUSH
19251: LD_INT 0
19253: PPUSH
19254: CALL_OW 324
19258: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
19259: LD_EXP 32
19263: PUSH
19264: LD_EXP 41
19268: AND
19269: IFFALSE 19371
19271: GO 19273
19273: DISABLE
19274: LD_INT 0
19276: PPUSH
19277: PPUSH
// begin enable ;
19278: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
19279: LD_ADDR_VAR 0 2
19283: PUSH
19284: LD_INT 22
19286: PUSH
19287: LD_OWVAR 2
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 2
19298: PUSH
19299: LD_INT 34
19301: PUSH
19302: LD_INT 11
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: LD_INT 34
19311: PUSH
19312: LD_INT 30
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: LIST
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PPUSH
19328: CALL_OW 69
19332: ST_TO_ADDR
// if not tmp then
19333: LD_VAR 0 2
19337: NOT
19338: IFFALSE 19342
// exit ;
19340: GO 19371
// for i in tmp do
19342: LD_ADDR_VAR 0 1
19346: PUSH
19347: LD_VAR 0 2
19351: PUSH
19352: FOR_IN
19353: IFFALSE 19369
// begin SetLives ( i , 0 ) ;
19355: LD_VAR 0 1
19359: PPUSH
19360: LD_INT 0
19362: PPUSH
19363: CALL_OW 234
// end ;
19367: GO 19352
19369: POP
19370: POP
// end ;
19371: PPOPN 2
19373: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19374: LD_EXP 32
19378: PUSH
19379: LD_EXP 42
19383: AND
19384: IFFALSE 19404
19386: GO 19388
19388: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19389: LD_INT 32
19391: PPUSH
19392: LD_OWVAR 2
19396: PPUSH
19397: LD_INT 0
19399: PPUSH
19400: CALL_OW 324
19404: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19405: LD_EXP 32
19409: PUSH
19410: LD_EXP 43
19414: AND
19415: IFFALSE 19596
19417: GO 19419
19419: DISABLE
19420: LD_INT 0
19422: PPUSH
19423: PPUSH
19424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19425: LD_ADDR_VAR 0 2
19429: PUSH
19430: LD_INT 22
19432: PUSH
19433: LD_OWVAR 2
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PUSH
19442: LD_INT 33
19444: PUSH
19445: LD_INT 3
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: PPUSH
19456: CALL_OW 69
19460: ST_TO_ADDR
// if not tmp then
19461: LD_VAR 0 2
19465: NOT
19466: IFFALSE 19470
// exit ;
19468: GO 19596
// side := 0 ;
19470: LD_ADDR_VAR 0 3
19474: PUSH
19475: LD_INT 0
19477: ST_TO_ADDR
// for i := 1 to 8 do
19478: LD_ADDR_VAR 0 1
19482: PUSH
19483: DOUBLE
19484: LD_INT 1
19486: DEC
19487: ST_TO_ADDR
19488: LD_INT 8
19490: PUSH
19491: FOR_TO
19492: IFFALSE 19540
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19494: LD_OWVAR 2
19498: PUSH
19499: LD_VAR 0 1
19503: NONEQUAL
19504: PUSH
19505: LD_OWVAR 2
19509: PPUSH
19510: LD_VAR 0 1
19514: PPUSH
19515: CALL_OW 81
19519: PUSH
19520: LD_INT 2
19522: EQUAL
19523: AND
19524: IFFALSE 19538
// begin side := i ;
19526: LD_ADDR_VAR 0 3
19530: PUSH
19531: LD_VAR 0 1
19535: ST_TO_ADDR
// break ;
19536: GO 19540
// end ;
19538: GO 19491
19540: POP
19541: POP
// if not side then
19542: LD_VAR 0 3
19546: NOT
19547: IFFALSE 19551
// exit ;
19549: GO 19596
// for i := 1 to tmp do
19551: LD_ADDR_VAR 0 1
19555: PUSH
19556: DOUBLE
19557: LD_INT 1
19559: DEC
19560: ST_TO_ADDR
19561: LD_VAR 0 2
19565: PUSH
19566: FOR_TO
19567: IFFALSE 19594
// if Prob ( 60 ) then
19569: LD_INT 60
19571: PPUSH
19572: CALL_OW 13
19576: IFFALSE 19592
// SetSide ( i , side ) ;
19578: LD_VAR 0 1
19582: PPUSH
19583: LD_VAR 0 3
19587: PPUSH
19588: CALL_OW 235
19592: GO 19566
19594: POP
19595: POP
// end ;
19596: PPOPN 3
19598: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19599: LD_EXP 32
19603: PUSH
19604: LD_EXP 45
19608: AND
19609: IFFALSE 19728
19611: GO 19613
19613: DISABLE
19614: LD_INT 0
19616: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19617: LD_ADDR_VAR 0 1
19621: PUSH
19622: LD_INT 22
19624: PUSH
19625: LD_OWVAR 2
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: LD_INT 21
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 3
19646: PUSH
19647: LD_INT 23
19649: PUSH
19650: LD_INT 0
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: LIST
19665: PPUSH
19666: CALL_OW 69
19670: PUSH
19671: FOR_IN
19672: IFFALSE 19726
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19674: LD_VAR 0 1
19678: PPUSH
19679: CALL_OW 257
19683: PUSH
19684: LD_INT 1
19686: PUSH
19687: LD_INT 2
19689: PUSH
19690: LD_INT 3
19692: PUSH
19693: LD_INT 4
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: IN
19702: IFFALSE 19724
// SetClass ( un , rand ( 1 , 4 ) ) ;
19704: LD_VAR 0 1
19708: PPUSH
19709: LD_INT 1
19711: PPUSH
19712: LD_INT 4
19714: PPUSH
19715: CALL_OW 12
19719: PPUSH
19720: CALL_OW 336
19724: GO 19671
19726: POP
19727: POP
// end ;
19728: PPOPN 1
19730: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19731: LD_EXP 32
19735: PUSH
19736: LD_EXP 44
19740: AND
19741: IFFALSE 19820
19743: GO 19745
19745: DISABLE
19746: LD_INT 0
19748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19749: LD_ADDR_VAR 0 1
19753: PUSH
19754: LD_INT 22
19756: PUSH
19757: LD_OWVAR 2
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: LD_INT 21
19768: PUSH
19769: LD_INT 3
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PPUSH
19780: CALL_OW 69
19784: ST_TO_ADDR
// if not tmp then
19785: LD_VAR 0 1
19789: NOT
19790: IFFALSE 19794
// exit ;
19792: GO 19820
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19794: LD_VAR 0 1
19798: PUSH
19799: LD_INT 1
19801: PPUSH
19802: LD_VAR 0 1
19806: PPUSH
19807: CALL_OW 12
19811: ARRAY
19812: PPUSH
19813: LD_INT 100
19815: PPUSH
19816: CALL_OW 234
// end ;
19820: PPOPN 1
19822: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19823: LD_EXP 32
19827: PUSH
19828: LD_EXP 46
19832: AND
19833: IFFALSE 19931
19835: GO 19837
19837: DISABLE
19838: LD_INT 0
19840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19841: LD_ADDR_VAR 0 1
19845: PUSH
19846: LD_INT 22
19848: PUSH
19849: LD_OWVAR 2
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PUSH
19858: LD_INT 21
19860: PUSH
19861: LD_INT 1
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PPUSH
19872: CALL_OW 69
19876: ST_TO_ADDR
// if not tmp then
19877: LD_VAR 0 1
19881: NOT
19882: IFFALSE 19886
// exit ;
19884: GO 19931
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19886: LD_VAR 0 1
19890: PUSH
19891: LD_INT 1
19893: PPUSH
19894: LD_VAR 0 1
19898: PPUSH
19899: CALL_OW 12
19903: ARRAY
19904: PPUSH
19905: LD_INT 1
19907: PPUSH
19908: LD_INT 4
19910: PPUSH
19911: CALL_OW 12
19915: PPUSH
19916: LD_INT 3000
19918: PPUSH
19919: LD_INT 9000
19921: PPUSH
19922: CALL_OW 12
19926: PPUSH
19927: CALL_OW 492
// end ;
19931: PPOPN 1
19933: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19934: LD_EXP 32
19938: PUSH
19939: LD_EXP 47
19943: AND
19944: IFFALSE 19964
19946: GO 19948
19948: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19949: LD_INT 1
19951: PPUSH
19952: LD_OWVAR 2
19956: PPUSH
19957: LD_INT 0
19959: PPUSH
19960: CALL_OW 324
19964: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19965: LD_EXP 32
19969: PUSH
19970: LD_EXP 48
19974: AND
19975: IFFALSE 20058
19977: GO 19979
19979: DISABLE
19980: LD_INT 0
19982: PPUSH
19983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19984: LD_ADDR_VAR 0 2
19988: PUSH
19989: LD_INT 22
19991: PUSH
19992: LD_OWVAR 2
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 21
20003: PUSH
20004: LD_INT 3
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PPUSH
20015: CALL_OW 69
20019: ST_TO_ADDR
// if not tmp then
20020: LD_VAR 0 2
20024: NOT
20025: IFFALSE 20029
// exit ;
20027: GO 20058
// for i in tmp do
20029: LD_ADDR_VAR 0 1
20033: PUSH
20034: LD_VAR 0 2
20038: PUSH
20039: FOR_IN
20040: IFFALSE 20056
// SetBLevel ( i , 10 ) ;
20042: LD_VAR 0 1
20046: PPUSH
20047: LD_INT 10
20049: PPUSH
20050: CALL_OW 241
20054: GO 20039
20056: POP
20057: POP
// end ;
20058: PPOPN 2
20060: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
20061: LD_EXP 32
20065: PUSH
20066: LD_EXP 49
20070: AND
20071: IFFALSE 20182
20073: GO 20075
20075: DISABLE
20076: LD_INT 0
20078: PPUSH
20079: PPUSH
20080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20081: LD_ADDR_VAR 0 3
20085: PUSH
20086: LD_INT 22
20088: PUSH
20089: LD_OWVAR 2
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 25
20100: PUSH
20101: LD_INT 1
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PPUSH
20112: CALL_OW 69
20116: ST_TO_ADDR
// if not tmp then
20117: LD_VAR 0 3
20121: NOT
20122: IFFALSE 20126
// exit ;
20124: GO 20182
// un := tmp [ rand ( 1 , tmp ) ] ;
20126: LD_ADDR_VAR 0 2
20130: PUSH
20131: LD_VAR 0 3
20135: PUSH
20136: LD_INT 1
20138: PPUSH
20139: LD_VAR 0 3
20143: PPUSH
20144: CALL_OW 12
20148: ARRAY
20149: ST_TO_ADDR
// if Crawls ( un ) then
20150: LD_VAR 0 2
20154: PPUSH
20155: CALL_OW 318
20159: IFFALSE 20170
// ComWalk ( un ) ;
20161: LD_VAR 0 2
20165: PPUSH
20166: CALL_OW 138
// SetClass ( un , class_sniper ) ;
20170: LD_VAR 0 2
20174: PPUSH
20175: LD_INT 5
20177: PPUSH
20178: CALL_OW 336
// end ;
20182: PPOPN 3
20184: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
20185: LD_EXP 32
20189: PUSH
20190: LD_EXP 50
20194: AND
20195: PUSH
20196: LD_OWVAR 67
20200: PUSH
20201: LD_INT 4
20203: LESS
20204: AND
20205: IFFALSE 20224
20207: GO 20209
20209: DISABLE
// begin Difficulty := Difficulty + 1 ;
20210: LD_ADDR_OWVAR 67
20214: PUSH
20215: LD_OWVAR 67
20219: PUSH
20220: LD_INT 1
20222: PLUS
20223: ST_TO_ADDR
// end ;
20224: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
20225: LD_EXP 32
20229: PUSH
20230: LD_EXP 51
20234: AND
20235: IFFALSE 20338
20237: GO 20239
20239: DISABLE
20240: LD_INT 0
20242: PPUSH
// begin for i := 1 to 5 do
20243: LD_ADDR_VAR 0 1
20247: PUSH
20248: DOUBLE
20249: LD_INT 1
20251: DEC
20252: ST_TO_ADDR
20253: LD_INT 5
20255: PUSH
20256: FOR_TO
20257: IFFALSE 20336
// begin uc_nation := nation_nature ;
20259: LD_ADDR_OWVAR 21
20263: PUSH
20264: LD_INT 0
20266: ST_TO_ADDR
// uc_side := 0 ;
20267: LD_ADDR_OWVAR 20
20271: PUSH
20272: LD_INT 0
20274: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20275: LD_ADDR_OWVAR 29
20279: PUSH
20280: LD_INT 12
20282: PUSH
20283: LD_INT 12
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: ST_TO_ADDR
// hc_agressivity := 20 ;
20290: LD_ADDR_OWVAR 35
20294: PUSH
20295: LD_INT 20
20297: ST_TO_ADDR
// hc_class := class_tiger ;
20298: LD_ADDR_OWVAR 28
20302: PUSH
20303: LD_INT 14
20305: ST_TO_ADDR
// hc_gallery :=  ;
20306: LD_ADDR_OWVAR 33
20310: PUSH
20311: LD_STRING 
20313: ST_TO_ADDR
// hc_name :=  ;
20314: LD_ADDR_OWVAR 26
20318: PUSH
20319: LD_STRING 
20321: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20322: CALL_OW 44
20326: PPUSH
20327: LD_INT 0
20329: PPUSH
20330: CALL_OW 51
// end ;
20334: GO 20256
20336: POP
20337: POP
// end ;
20338: PPOPN 1
20340: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20341: LD_EXP 32
20345: PUSH
20346: LD_EXP 52
20350: AND
20351: IFFALSE 20360
20353: GO 20355
20355: DISABLE
// StreamSibBomb ;
20356: CALL 20361 0 0
20360: END
// export function StreamSibBomb ; var i , x , y ; begin
20361: LD_INT 0
20363: PPUSH
20364: PPUSH
20365: PPUSH
20366: PPUSH
// result := false ;
20367: LD_ADDR_VAR 0 1
20371: PUSH
20372: LD_INT 0
20374: ST_TO_ADDR
// for i := 1 to 16 do
20375: LD_ADDR_VAR 0 2
20379: PUSH
20380: DOUBLE
20381: LD_INT 1
20383: DEC
20384: ST_TO_ADDR
20385: LD_INT 16
20387: PUSH
20388: FOR_TO
20389: IFFALSE 20588
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20391: LD_ADDR_VAR 0 3
20395: PUSH
20396: LD_INT 10
20398: PUSH
20399: LD_INT 20
20401: PUSH
20402: LD_INT 30
20404: PUSH
20405: LD_INT 40
20407: PUSH
20408: LD_INT 50
20410: PUSH
20411: LD_INT 60
20413: PUSH
20414: LD_INT 70
20416: PUSH
20417: LD_INT 80
20419: PUSH
20420: LD_INT 90
20422: PUSH
20423: LD_INT 100
20425: PUSH
20426: LD_INT 110
20428: PUSH
20429: LD_INT 120
20431: PUSH
20432: LD_INT 130
20434: PUSH
20435: LD_INT 140
20437: PUSH
20438: LD_INT 150
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 1
20460: PPUSH
20461: LD_INT 15
20463: PPUSH
20464: CALL_OW 12
20468: ARRAY
20469: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20470: LD_ADDR_VAR 0 4
20474: PUSH
20475: LD_INT 10
20477: PUSH
20478: LD_INT 20
20480: PUSH
20481: LD_INT 30
20483: PUSH
20484: LD_INT 40
20486: PUSH
20487: LD_INT 50
20489: PUSH
20490: LD_INT 60
20492: PUSH
20493: LD_INT 70
20495: PUSH
20496: LD_INT 80
20498: PUSH
20499: LD_INT 90
20501: PUSH
20502: LD_INT 100
20504: PUSH
20505: LD_INT 110
20507: PUSH
20508: LD_INT 120
20510: PUSH
20511: LD_INT 130
20513: PUSH
20514: LD_INT 140
20516: PUSH
20517: LD_INT 150
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 1
20539: PPUSH
20540: LD_INT 15
20542: PPUSH
20543: CALL_OW 12
20547: ARRAY
20548: ST_TO_ADDR
// if ValidHex ( x , y ) then
20549: LD_VAR 0 3
20553: PPUSH
20554: LD_VAR 0 4
20558: PPUSH
20559: CALL_OW 488
20563: IFFALSE 20586
// begin result := [ x , y ] ;
20565: LD_ADDR_VAR 0 1
20569: PUSH
20570: LD_VAR 0 3
20574: PUSH
20575: LD_VAR 0 4
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: ST_TO_ADDR
// break ;
20584: GO 20588
// end ; end ;
20586: GO 20388
20588: POP
20589: POP
// if result then
20590: LD_VAR 0 1
20594: IFFALSE 20654
// begin ToLua ( playSibBomb() ) ;
20596: LD_STRING playSibBomb()
20598: PPUSH
20599: CALL_OW 559
// wait ( 0 0$14 ) ;
20603: LD_INT 490
20605: PPUSH
20606: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20610: LD_VAR 0 1
20614: PUSH
20615: LD_INT 1
20617: ARRAY
20618: PPUSH
20619: LD_VAR 0 1
20623: PUSH
20624: LD_INT 2
20626: ARRAY
20627: PPUSH
20628: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20632: LD_VAR 0 1
20636: PUSH
20637: LD_INT 1
20639: ARRAY
20640: PPUSH
20641: LD_VAR 0 1
20645: PUSH
20646: LD_INT 2
20648: ARRAY
20649: PPUSH
20650: CALL_OW 429
// end ; end ;
20654: LD_VAR 0 1
20658: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20659: LD_EXP 32
20663: PUSH
20664: LD_EXP 54
20668: AND
20669: IFFALSE 20681
20671: GO 20673
20673: DISABLE
// YouLost (  ) ;
20674: LD_STRING 
20676: PPUSH
20677: CALL_OW 104
20681: END
// every 0 0$1 trigger StreamModeActive and sFog do
20682: LD_EXP 32
20686: PUSH
20687: LD_EXP 53
20691: AND
20692: IFFALSE 20706
20694: GO 20696
20696: DISABLE
// FogOff ( your_side ) ;
20697: LD_OWVAR 2
20701: PPUSH
20702: CALL_OW 344
20706: END
// every 0 0$1 trigger StreamModeActive and sSun do
20707: LD_EXP 32
20711: PUSH
20712: LD_EXP 55
20716: AND
20717: IFFALSE 20745
20719: GO 20721
20721: DISABLE
// begin solar_recharge_percent := 0 ;
20722: LD_ADDR_OWVAR 79
20726: PUSH
20727: LD_INT 0
20729: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20730: LD_INT 10500
20732: PPUSH
20733: CALL_OW 67
// solar_recharge_percent := 100 ;
20737: LD_ADDR_OWVAR 79
20741: PUSH
20742: LD_INT 100
20744: ST_TO_ADDR
// end ;
20745: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20746: LD_EXP 32
20750: PUSH
20751: LD_EXP 56
20755: AND
20756: IFFALSE 20995
20758: GO 20760
20760: DISABLE
20761: LD_INT 0
20763: PPUSH
20764: PPUSH
20765: PPUSH
// begin tmp := [ ] ;
20766: LD_ADDR_VAR 0 3
20770: PUSH
20771: EMPTY
20772: ST_TO_ADDR
// for i := 1 to 6 do
20773: LD_ADDR_VAR 0 1
20777: PUSH
20778: DOUBLE
20779: LD_INT 1
20781: DEC
20782: ST_TO_ADDR
20783: LD_INT 6
20785: PUSH
20786: FOR_TO
20787: IFFALSE 20892
// begin uc_nation := nation_nature ;
20789: LD_ADDR_OWVAR 21
20793: PUSH
20794: LD_INT 0
20796: ST_TO_ADDR
// uc_side := 0 ;
20797: LD_ADDR_OWVAR 20
20801: PUSH
20802: LD_INT 0
20804: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20805: LD_ADDR_OWVAR 29
20809: PUSH
20810: LD_INT 12
20812: PUSH
20813: LD_INT 12
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: ST_TO_ADDR
// hc_agressivity := 20 ;
20820: LD_ADDR_OWVAR 35
20824: PUSH
20825: LD_INT 20
20827: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20828: LD_ADDR_OWVAR 28
20832: PUSH
20833: LD_INT 17
20835: ST_TO_ADDR
// hc_gallery :=  ;
20836: LD_ADDR_OWVAR 33
20840: PUSH
20841: LD_STRING 
20843: ST_TO_ADDR
// hc_name :=  ;
20844: LD_ADDR_OWVAR 26
20848: PUSH
20849: LD_STRING 
20851: ST_TO_ADDR
// un := CreateHuman ;
20852: LD_ADDR_VAR 0 2
20856: PUSH
20857: CALL_OW 44
20861: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20862: LD_VAR 0 2
20866: PPUSH
20867: LD_INT 1
20869: PPUSH
20870: CALL_OW 51
// tmp := tmp ^ un ;
20874: LD_ADDR_VAR 0 3
20878: PUSH
20879: LD_VAR 0 3
20883: PUSH
20884: LD_VAR 0 2
20888: ADD
20889: ST_TO_ADDR
// end ;
20890: GO 20786
20892: POP
20893: POP
// repeat wait ( 0 0$1 ) ;
20894: LD_INT 35
20896: PPUSH
20897: CALL_OW 67
// for un in tmp do
20901: LD_ADDR_VAR 0 2
20905: PUSH
20906: LD_VAR 0 3
20910: PUSH
20911: FOR_IN
20912: IFFALSE 20986
// begin if IsDead ( un ) then
20914: LD_VAR 0 2
20918: PPUSH
20919: CALL_OW 301
20923: IFFALSE 20943
// begin tmp := tmp diff un ;
20925: LD_ADDR_VAR 0 3
20929: PUSH
20930: LD_VAR 0 3
20934: PUSH
20935: LD_VAR 0 2
20939: DIFF
20940: ST_TO_ADDR
// continue ;
20941: GO 20911
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20943: LD_VAR 0 2
20947: PPUSH
20948: LD_INT 3
20950: PUSH
20951: LD_INT 22
20953: PUSH
20954: LD_INT 0
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PPUSH
20965: CALL_OW 69
20969: PPUSH
20970: LD_VAR 0 2
20974: PPUSH
20975: CALL_OW 74
20979: PPUSH
20980: CALL_OW 115
// end ;
20984: GO 20911
20986: POP
20987: POP
// until not tmp ;
20988: LD_VAR 0 3
20992: NOT
20993: IFFALSE 20894
// end ;
20995: PPOPN 3
20997: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20998: LD_EXP 32
21002: PUSH
21003: LD_EXP 57
21007: AND
21008: IFFALSE 21062
21010: GO 21012
21012: DISABLE
// begin ToLua ( displayTroll(); ) ;
21013: LD_STRING displayTroll();
21015: PPUSH
21016: CALL_OW 559
// wait ( 3 3$00 ) ;
21020: LD_INT 6300
21022: PPUSH
21023: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21027: LD_STRING hideTroll();
21029: PPUSH
21030: CALL_OW 559
// wait ( 1 1$00 ) ;
21034: LD_INT 2100
21036: PPUSH
21037: CALL_OW 67
// ToLua ( displayTroll(); ) ;
21041: LD_STRING displayTroll();
21043: PPUSH
21044: CALL_OW 559
// wait ( 1 1$00 ) ;
21048: LD_INT 2100
21050: PPUSH
21051: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21055: LD_STRING hideTroll();
21057: PPUSH
21058: CALL_OW 559
// end ;
21062: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
21063: LD_EXP 32
21067: PUSH
21068: LD_EXP 58
21072: AND
21073: IFFALSE 21136
21075: GO 21077
21077: DISABLE
21078: LD_INT 0
21080: PPUSH
// begin p := 0 ;
21081: LD_ADDR_VAR 0 1
21085: PUSH
21086: LD_INT 0
21088: ST_TO_ADDR
// repeat game_speed := 1 ;
21089: LD_ADDR_OWVAR 65
21093: PUSH
21094: LD_INT 1
21096: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21097: LD_INT 35
21099: PPUSH
21100: CALL_OW 67
// p := p + 1 ;
21104: LD_ADDR_VAR 0 1
21108: PUSH
21109: LD_VAR 0 1
21113: PUSH
21114: LD_INT 1
21116: PLUS
21117: ST_TO_ADDR
// until p >= 60 ;
21118: LD_VAR 0 1
21122: PUSH
21123: LD_INT 60
21125: GREATEREQUAL
21126: IFFALSE 21089
// game_speed := 4 ;
21128: LD_ADDR_OWVAR 65
21132: PUSH
21133: LD_INT 4
21135: ST_TO_ADDR
// end ;
21136: PPOPN 1
21138: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
21139: LD_EXP 32
21143: PUSH
21144: LD_EXP 59
21148: AND
21149: IFFALSE 21295
21151: GO 21153
21153: DISABLE
21154: LD_INT 0
21156: PPUSH
21157: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21158: LD_ADDR_VAR 0 1
21162: PUSH
21163: LD_INT 22
21165: PUSH
21166: LD_OWVAR 2
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 2
21177: PUSH
21178: LD_INT 30
21180: PUSH
21181: LD_INT 0
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: PUSH
21188: LD_INT 30
21190: PUSH
21191: LD_INT 1
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: LIST
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PPUSH
21207: CALL_OW 69
21211: ST_TO_ADDR
// if not depot then
21212: LD_VAR 0 1
21216: NOT
21217: IFFALSE 21221
// exit ;
21219: GO 21295
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
21221: LD_ADDR_VAR 0 2
21225: PUSH
21226: LD_VAR 0 1
21230: PUSH
21231: LD_INT 1
21233: PPUSH
21234: LD_VAR 0 1
21238: PPUSH
21239: CALL_OW 12
21243: ARRAY
21244: PPUSH
21245: CALL_OW 274
21249: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
21250: LD_VAR 0 2
21254: PPUSH
21255: LD_INT 1
21257: PPUSH
21258: LD_INT 0
21260: PPUSH
21261: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
21265: LD_VAR 0 2
21269: PPUSH
21270: LD_INT 2
21272: PPUSH
21273: LD_INT 0
21275: PPUSH
21276: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
21280: LD_VAR 0 2
21284: PPUSH
21285: LD_INT 3
21287: PPUSH
21288: LD_INT 0
21290: PPUSH
21291: CALL_OW 277
// end ;
21295: PPOPN 2
21297: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21298: LD_EXP 32
21302: PUSH
21303: LD_EXP 60
21307: AND
21308: IFFALSE 21405
21310: GO 21312
21312: DISABLE
21313: LD_INT 0
21315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21316: LD_ADDR_VAR 0 1
21320: PUSH
21321: LD_INT 22
21323: PUSH
21324: LD_OWVAR 2
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 21
21335: PUSH
21336: LD_INT 1
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 3
21345: PUSH
21346: LD_INT 23
21348: PUSH
21349: LD_INT 0
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: LIST
21364: PPUSH
21365: CALL_OW 69
21369: ST_TO_ADDR
// if not tmp then
21370: LD_VAR 0 1
21374: NOT
21375: IFFALSE 21379
// exit ;
21377: GO 21405
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21379: LD_VAR 0 1
21383: PUSH
21384: LD_INT 1
21386: PPUSH
21387: LD_VAR 0 1
21391: PPUSH
21392: CALL_OW 12
21396: ARRAY
21397: PPUSH
21398: LD_INT 200
21400: PPUSH
21401: CALL_OW 234
// end ;
21405: PPOPN 1
21407: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21408: LD_EXP 32
21412: PUSH
21413: LD_EXP 61
21417: AND
21418: IFFALSE 21497
21420: GO 21422
21422: DISABLE
21423: LD_INT 0
21425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21426: LD_ADDR_VAR 0 1
21430: PUSH
21431: LD_INT 22
21433: PUSH
21434: LD_OWVAR 2
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 21
21445: PUSH
21446: LD_INT 2
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: PPUSH
21457: CALL_OW 69
21461: ST_TO_ADDR
// if not tmp then
21462: LD_VAR 0 1
21466: NOT
21467: IFFALSE 21471
// exit ;
21469: GO 21497
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21471: LD_VAR 0 1
21475: PUSH
21476: LD_INT 1
21478: PPUSH
21479: LD_VAR 0 1
21483: PPUSH
21484: CALL_OW 12
21488: ARRAY
21489: PPUSH
21490: LD_INT 60
21492: PPUSH
21493: CALL_OW 234
// end ;
21497: PPOPN 1
21499: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21500: LD_EXP 32
21504: PUSH
21505: LD_EXP 62
21509: AND
21510: IFFALSE 21609
21512: GO 21514
21514: DISABLE
21515: LD_INT 0
21517: PPUSH
21518: PPUSH
// begin enable ;
21519: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21520: LD_ADDR_VAR 0 1
21524: PUSH
21525: LD_INT 22
21527: PUSH
21528: LD_OWVAR 2
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 61
21539: PUSH
21540: EMPTY
21541: LIST
21542: PUSH
21543: LD_INT 33
21545: PUSH
21546: LD_INT 2
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: LIST
21557: PPUSH
21558: CALL_OW 69
21562: ST_TO_ADDR
// if not tmp then
21563: LD_VAR 0 1
21567: NOT
21568: IFFALSE 21572
// exit ;
21570: GO 21609
// for i in tmp do
21572: LD_ADDR_VAR 0 2
21576: PUSH
21577: LD_VAR 0 1
21581: PUSH
21582: FOR_IN
21583: IFFALSE 21607
// if IsControledBy ( i ) then
21585: LD_VAR 0 2
21589: PPUSH
21590: CALL_OW 312
21594: IFFALSE 21605
// ComUnlink ( i ) ;
21596: LD_VAR 0 2
21600: PPUSH
21601: CALL_OW 136
21605: GO 21582
21607: POP
21608: POP
// end ;
21609: PPOPN 2
21611: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21612: LD_EXP 32
21616: PUSH
21617: LD_EXP 63
21621: AND
21622: IFFALSE 21762
21624: GO 21626
21626: DISABLE
21627: LD_INT 0
21629: PPUSH
21630: PPUSH
// begin ToLua ( displayPowell(); ) ;
21631: LD_STRING displayPowell();
21633: PPUSH
21634: CALL_OW 559
// uc_side := 0 ;
21638: LD_ADDR_OWVAR 20
21642: PUSH
21643: LD_INT 0
21645: ST_TO_ADDR
// uc_nation := 2 ;
21646: LD_ADDR_OWVAR 21
21650: PUSH
21651: LD_INT 2
21653: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21654: LD_ADDR_OWVAR 37
21658: PUSH
21659: LD_INT 14
21661: ST_TO_ADDR
// vc_engine := engine_siberite ;
21662: LD_ADDR_OWVAR 39
21666: PUSH
21667: LD_INT 3
21669: ST_TO_ADDR
// vc_control := control_apeman ;
21670: LD_ADDR_OWVAR 38
21674: PUSH
21675: LD_INT 5
21677: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21678: LD_ADDR_OWVAR 40
21682: PUSH
21683: LD_INT 29
21685: ST_TO_ADDR
// un := CreateVehicle ;
21686: LD_ADDR_VAR 0 2
21690: PUSH
21691: CALL_OW 45
21695: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21696: LD_VAR 0 2
21700: PPUSH
21701: LD_INT 1
21703: PPUSH
21704: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21708: LD_INT 35
21710: PPUSH
21711: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21715: LD_VAR 0 2
21719: PPUSH
21720: LD_INT 22
21722: PUSH
21723: LD_OWVAR 2
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PPUSH
21732: CALL_OW 69
21736: PPUSH
21737: LD_VAR 0 2
21741: PPUSH
21742: CALL_OW 74
21746: PPUSH
21747: CALL_OW 115
// until IsDead ( un ) ;
21751: LD_VAR 0 2
21755: PPUSH
21756: CALL_OW 301
21760: IFFALSE 21708
// end ;
21762: PPOPN 2
21764: END
// every 0 0$1 trigger StreamModeActive and sStu do
21765: LD_EXP 32
21769: PUSH
21770: LD_EXP 71
21774: AND
21775: IFFALSE 21791
21777: GO 21779
21779: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21780: LD_STRING displayStucuk();
21782: PPUSH
21783: CALL_OW 559
// ResetFog ;
21787: CALL_OW 335
// end ;
21791: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21792: LD_EXP 32
21796: PUSH
21797: LD_EXP 64
21801: AND
21802: IFFALSE 21943
21804: GO 21806
21806: DISABLE
21807: LD_INT 0
21809: PPUSH
21810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21811: LD_ADDR_VAR 0 2
21815: PUSH
21816: LD_INT 22
21818: PUSH
21819: LD_OWVAR 2
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PUSH
21828: LD_INT 21
21830: PUSH
21831: LD_INT 1
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PPUSH
21842: CALL_OW 69
21846: ST_TO_ADDR
// if not tmp then
21847: LD_VAR 0 2
21851: NOT
21852: IFFALSE 21856
// exit ;
21854: GO 21943
// un := tmp [ rand ( 1 , tmp ) ] ;
21856: LD_ADDR_VAR 0 1
21860: PUSH
21861: LD_VAR 0 2
21865: PUSH
21866: LD_INT 1
21868: PPUSH
21869: LD_VAR 0 2
21873: PPUSH
21874: CALL_OW 12
21878: ARRAY
21879: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21880: LD_VAR 0 1
21884: PPUSH
21885: LD_INT 0
21887: PPUSH
21888: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21892: LD_VAR 0 1
21896: PPUSH
21897: LD_OWVAR 3
21901: PUSH
21902: LD_VAR 0 1
21906: DIFF
21907: PPUSH
21908: LD_VAR 0 1
21912: PPUSH
21913: CALL_OW 74
21917: PPUSH
21918: CALL_OW 115
// wait ( 0 0$20 ) ;
21922: LD_INT 700
21924: PPUSH
21925: CALL_OW 67
// SetSide ( un , your_side ) ;
21929: LD_VAR 0 1
21933: PPUSH
21934: LD_OWVAR 2
21938: PPUSH
21939: CALL_OW 235
// end ;
21943: PPOPN 2
21945: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21946: LD_EXP 32
21950: PUSH
21951: LD_EXP 65
21955: AND
21956: IFFALSE 22062
21958: GO 21960
21960: DISABLE
21961: LD_INT 0
21963: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21964: LD_ADDR_VAR 0 1
21968: PUSH
21969: LD_INT 22
21971: PUSH
21972: LD_OWVAR 2
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 2
21983: PUSH
21984: LD_INT 30
21986: PUSH
21987: LD_INT 0
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PUSH
21994: LD_INT 30
21996: PUSH
21997: LD_INT 1
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: LIST
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PPUSH
22013: CALL_OW 69
22017: ST_TO_ADDR
// if not depot then
22018: LD_VAR 0 1
22022: NOT
22023: IFFALSE 22027
// exit ;
22025: GO 22062
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
22027: LD_VAR 0 1
22031: PUSH
22032: LD_INT 1
22034: ARRAY
22035: PPUSH
22036: CALL_OW 250
22040: PPUSH
22041: LD_VAR 0 1
22045: PUSH
22046: LD_INT 1
22048: ARRAY
22049: PPUSH
22050: CALL_OW 251
22054: PPUSH
22055: LD_INT 70
22057: PPUSH
22058: CALL_OW 495
// end ;
22062: PPOPN 1
22064: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
22065: LD_EXP 32
22069: PUSH
22070: LD_EXP 66
22074: AND
22075: IFFALSE 22286
22077: GO 22079
22079: DISABLE
22080: LD_INT 0
22082: PPUSH
22083: PPUSH
22084: PPUSH
22085: PPUSH
22086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22087: LD_ADDR_VAR 0 5
22091: PUSH
22092: LD_INT 22
22094: PUSH
22095: LD_OWVAR 2
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 21
22106: PUSH
22107: LD_INT 1
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PPUSH
22118: CALL_OW 69
22122: ST_TO_ADDR
// if not tmp then
22123: LD_VAR 0 5
22127: NOT
22128: IFFALSE 22132
// exit ;
22130: GO 22286
// for i in tmp do
22132: LD_ADDR_VAR 0 1
22136: PUSH
22137: LD_VAR 0 5
22141: PUSH
22142: FOR_IN
22143: IFFALSE 22284
// begin d := rand ( 0 , 5 ) ;
22145: LD_ADDR_VAR 0 4
22149: PUSH
22150: LD_INT 0
22152: PPUSH
22153: LD_INT 5
22155: PPUSH
22156: CALL_OW 12
22160: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
22161: LD_ADDR_VAR 0 2
22165: PUSH
22166: LD_VAR 0 1
22170: PPUSH
22171: CALL_OW 250
22175: PPUSH
22176: LD_VAR 0 4
22180: PPUSH
22181: LD_INT 3
22183: PPUSH
22184: LD_INT 12
22186: PPUSH
22187: CALL_OW 12
22191: PPUSH
22192: CALL_OW 272
22196: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
22197: LD_ADDR_VAR 0 3
22201: PUSH
22202: LD_VAR 0 1
22206: PPUSH
22207: CALL_OW 251
22211: PPUSH
22212: LD_VAR 0 4
22216: PPUSH
22217: LD_INT 3
22219: PPUSH
22220: LD_INT 12
22222: PPUSH
22223: CALL_OW 12
22227: PPUSH
22228: CALL_OW 273
22232: ST_TO_ADDR
// if ValidHex ( x , y ) then
22233: LD_VAR 0 2
22237: PPUSH
22238: LD_VAR 0 3
22242: PPUSH
22243: CALL_OW 488
22247: IFFALSE 22282
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22249: LD_VAR 0 1
22253: PPUSH
22254: LD_VAR 0 2
22258: PPUSH
22259: LD_VAR 0 3
22263: PPUSH
22264: LD_INT 3
22266: PPUSH
22267: LD_INT 6
22269: PPUSH
22270: CALL_OW 12
22274: PPUSH
22275: LD_INT 1
22277: PPUSH
22278: CALL_OW 483
// end ;
22282: GO 22142
22284: POP
22285: POP
// end ;
22286: PPOPN 5
22288: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
22289: LD_EXP 32
22293: PUSH
22294: LD_EXP 67
22298: AND
22299: IFFALSE 22393
22301: GO 22303
22303: DISABLE
22304: LD_INT 0
22306: PPUSH
22307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22308: LD_ADDR_VAR 0 2
22312: PUSH
22313: LD_INT 22
22315: PUSH
22316: LD_OWVAR 2
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 32
22327: PUSH
22328: LD_INT 1
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PUSH
22335: LD_INT 21
22337: PUSH
22338: LD_INT 2
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: LIST
22349: PPUSH
22350: CALL_OW 69
22354: ST_TO_ADDR
// if not tmp then
22355: LD_VAR 0 2
22359: NOT
22360: IFFALSE 22364
// exit ;
22362: GO 22393
// for i in tmp do
22364: LD_ADDR_VAR 0 1
22368: PUSH
22369: LD_VAR 0 2
22373: PUSH
22374: FOR_IN
22375: IFFALSE 22391
// SetFuel ( i , 0 ) ;
22377: LD_VAR 0 1
22381: PPUSH
22382: LD_INT 0
22384: PPUSH
22385: CALL_OW 240
22389: GO 22374
22391: POP
22392: POP
// end ;
22393: PPOPN 2
22395: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22396: LD_EXP 32
22400: PUSH
22401: LD_EXP 68
22405: AND
22406: IFFALSE 22472
22408: GO 22410
22410: DISABLE
22411: LD_INT 0
22413: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22414: LD_ADDR_VAR 0 1
22418: PUSH
22419: LD_INT 22
22421: PUSH
22422: LD_OWVAR 2
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PUSH
22431: LD_INT 30
22433: PUSH
22434: LD_INT 29
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PPUSH
22445: CALL_OW 69
22449: ST_TO_ADDR
// if not tmp then
22450: LD_VAR 0 1
22454: NOT
22455: IFFALSE 22459
// exit ;
22457: GO 22472
// DestroyUnit ( tmp [ 1 ] ) ;
22459: LD_VAR 0 1
22463: PUSH
22464: LD_INT 1
22466: ARRAY
22467: PPUSH
22468: CALL_OW 65
// end ;
22472: PPOPN 1
22474: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22475: LD_EXP 32
22479: PUSH
22480: LD_EXP 70
22484: AND
22485: IFFALSE 22614
22487: GO 22489
22489: DISABLE
22490: LD_INT 0
22492: PPUSH
// begin uc_side := 0 ;
22493: LD_ADDR_OWVAR 20
22497: PUSH
22498: LD_INT 0
22500: ST_TO_ADDR
// uc_nation := nation_arabian ;
22501: LD_ADDR_OWVAR 21
22505: PUSH
22506: LD_INT 2
22508: ST_TO_ADDR
// hc_gallery :=  ;
22509: LD_ADDR_OWVAR 33
22513: PUSH
22514: LD_STRING 
22516: ST_TO_ADDR
// hc_name :=  ;
22517: LD_ADDR_OWVAR 26
22521: PUSH
22522: LD_STRING 
22524: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22525: LD_INT 1
22527: PPUSH
22528: LD_INT 11
22530: PPUSH
22531: LD_INT 10
22533: PPUSH
22534: CALL_OW 380
// un := CreateHuman ;
22538: LD_ADDR_VAR 0 1
22542: PUSH
22543: CALL_OW 44
22547: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22548: LD_VAR 0 1
22552: PPUSH
22553: LD_INT 1
22555: PPUSH
22556: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22560: LD_INT 35
22562: PPUSH
22563: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22567: LD_VAR 0 1
22571: PPUSH
22572: LD_INT 22
22574: PUSH
22575: LD_OWVAR 2
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PPUSH
22584: CALL_OW 69
22588: PPUSH
22589: LD_VAR 0 1
22593: PPUSH
22594: CALL_OW 74
22598: PPUSH
22599: CALL_OW 115
// until IsDead ( un ) ;
22603: LD_VAR 0 1
22607: PPUSH
22608: CALL_OW 301
22612: IFFALSE 22560
// end ;
22614: PPOPN 1
22616: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22617: LD_EXP 32
22621: PUSH
22622: LD_EXP 72
22626: AND
22627: IFFALSE 22639
22629: GO 22631
22631: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22632: LD_STRING earthquake(getX(game), 0, 32)
22634: PPUSH
22635: CALL_OW 559
22639: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22640: LD_EXP 32
22644: PUSH
22645: LD_EXP 73
22649: AND
22650: IFFALSE 22741
22652: GO 22654
22654: DISABLE
22655: LD_INT 0
22657: PPUSH
// begin enable ;
22658: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22659: LD_ADDR_VAR 0 1
22663: PUSH
22664: LD_INT 22
22666: PUSH
22667: LD_OWVAR 2
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: LD_INT 21
22678: PUSH
22679: LD_INT 2
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PUSH
22686: LD_INT 33
22688: PUSH
22689: LD_INT 3
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: LIST
22700: PPUSH
22701: CALL_OW 69
22705: ST_TO_ADDR
// if not tmp then
22706: LD_VAR 0 1
22710: NOT
22711: IFFALSE 22715
// exit ;
22713: GO 22741
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22715: LD_VAR 0 1
22719: PUSH
22720: LD_INT 1
22722: PPUSH
22723: LD_VAR 0 1
22727: PPUSH
22728: CALL_OW 12
22732: ARRAY
22733: PPUSH
22734: LD_INT 1
22736: PPUSH
22737: CALL_OW 234
// end ;
22741: PPOPN 1
22743: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22744: LD_EXP 32
22748: PUSH
22749: LD_EXP 74
22753: AND
22754: IFFALSE 22895
22756: GO 22758
22758: DISABLE
22759: LD_INT 0
22761: PPUSH
22762: PPUSH
22763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22764: LD_ADDR_VAR 0 3
22768: PUSH
22769: LD_INT 22
22771: PUSH
22772: LD_OWVAR 2
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 25
22783: PUSH
22784: LD_INT 1
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PPUSH
22795: CALL_OW 69
22799: ST_TO_ADDR
// if not tmp then
22800: LD_VAR 0 3
22804: NOT
22805: IFFALSE 22809
// exit ;
22807: GO 22895
// un := tmp [ rand ( 1 , tmp ) ] ;
22809: LD_ADDR_VAR 0 2
22813: PUSH
22814: LD_VAR 0 3
22818: PUSH
22819: LD_INT 1
22821: PPUSH
22822: LD_VAR 0 3
22826: PPUSH
22827: CALL_OW 12
22831: ARRAY
22832: ST_TO_ADDR
// if Crawls ( un ) then
22833: LD_VAR 0 2
22837: PPUSH
22838: CALL_OW 318
22842: IFFALSE 22853
// ComWalk ( un ) ;
22844: LD_VAR 0 2
22848: PPUSH
22849: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22853: LD_VAR 0 2
22857: PPUSH
22858: LD_INT 9
22860: PPUSH
22861: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22865: LD_INT 28
22867: PPUSH
22868: LD_OWVAR 2
22872: PPUSH
22873: LD_INT 2
22875: PPUSH
22876: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22880: LD_INT 29
22882: PPUSH
22883: LD_OWVAR 2
22887: PPUSH
22888: LD_INT 2
22890: PPUSH
22891: CALL_OW 322
// end ;
22895: PPOPN 3
22897: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22898: LD_EXP 32
22902: PUSH
22903: LD_EXP 75
22907: AND
22908: IFFALSE 23019
22910: GO 22912
22912: DISABLE
22913: LD_INT 0
22915: PPUSH
22916: PPUSH
22917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22918: LD_ADDR_VAR 0 3
22922: PUSH
22923: LD_INT 22
22925: PUSH
22926: LD_OWVAR 2
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 25
22937: PUSH
22938: LD_INT 1
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PPUSH
22949: CALL_OW 69
22953: ST_TO_ADDR
// if not tmp then
22954: LD_VAR 0 3
22958: NOT
22959: IFFALSE 22963
// exit ;
22961: GO 23019
// un := tmp [ rand ( 1 , tmp ) ] ;
22963: LD_ADDR_VAR 0 2
22967: PUSH
22968: LD_VAR 0 3
22972: PUSH
22973: LD_INT 1
22975: PPUSH
22976: LD_VAR 0 3
22980: PPUSH
22981: CALL_OW 12
22985: ARRAY
22986: ST_TO_ADDR
// if Crawls ( un ) then
22987: LD_VAR 0 2
22991: PPUSH
22992: CALL_OW 318
22996: IFFALSE 23007
// ComWalk ( un ) ;
22998: LD_VAR 0 2
23002: PPUSH
23003: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23007: LD_VAR 0 2
23011: PPUSH
23012: LD_INT 8
23014: PPUSH
23015: CALL_OW 336
// end ;
23019: PPOPN 3
23021: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
23022: LD_EXP 32
23026: PUSH
23027: LD_EXP 76
23031: AND
23032: IFFALSE 23176
23034: GO 23036
23036: DISABLE
23037: LD_INT 0
23039: PPUSH
23040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
23041: LD_ADDR_VAR 0 2
23045: PUSH
23046: LD_INT 22
23048: PUSH
23049: LD_OWVAR 2
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: LD_INT 21
23060: PUSH
23061: LD_INT 2
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: LD_INT 2
23070: PUSH
23071: LD_INT 34
23073: PUSH
23074: LD_INT 12
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PUSH
23081: LD_INT 34
23083: PUSH
23084: LD_INT 51
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PUSH
23091: LD_INT 34
23093: PUSH
23094: LD_INT 32
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: LIST
23111: PPUSH
23112: CALL_OW 69
23116: ST_TO_ADDR
// if not tmp then
23117: LD_VAR 0 2
23121: NOT
23122: IFFALSE 23126
// exit ;
23124: GO 23176
// for i in tmp do
23126: LD_ADDR_VAR 0 1
23130: PUSH
23131: LD_VAR 0 2
23135: PUSH
23136: FOR_IN
23137: IFFALSE 23174
// if GetCargo ( i , mat_artifact ) = 0 then
23139: LD_VAR 0 1
23143: PPUSH
23144: LD_INT 4
23146: PPUSH
23147: CALL_OW 289
23151: PUSH
23152: LD_INT 0
23154: EQUAL
23155: IFFALSE 23172
// SetCargo ( i , mat_siberit , 100 ) ;
23157: LD_VAR 0 1
23161: PPUSH
23162: LD_INT 3
23164: PPUSH
23165: LD_INT 100
23167: PPUSH
23168: CALL_OW 290
23172: GO 23136
23174: POP
23175: POP
// end ;
23176: PPOPN 2
23178: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
23179: LD_EXP 32
23183: PUSH
23184: LD_EXP 77
23188: AND
23189: IFFALSE 23372
23191: GO 23193
23193: DISABLE
23194: LD_INT 0
23196: PPUSH
23197: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23198: LD_ADDR_VAR 0 2
23202: PUSH
23203: LD_INT 22
23205: PUSH
23206: LD_OWVAR 2
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PPUSH
23215: CALL_OW 69
23219: ST_TO_ADDR
// if not tmp then
23220: LD_VAR 0 2
23224: NOT
23225: IFFALSE 23229
// exit ;
23227: GO 23372
// for i := 1 to 2 do
23229: LD_ADDR_VAR 0 1
23233: PUSH
23234: DOUBLE
23235: LD_INT 1
23237: DEC
23238: ST_TO_ADDR
23239: LD_INT 2
23241: PUSH
23242: FOR_TO
23243: IFFALSE 23370
// begin uc_side := your_side ;
23245: LD_ADDR_OWVAR 20
23249: PUSH
23250: LD_OWVAR 2
23254: ST_TO_ADDR
// uc_nation := nation_american ;
23255: LD_ADDR_OWVAR 21
23259: PUSH
23260: LD_INT 1
23262: ST_TO_ADDR
// vc_chassis := us_morphling ;
23263: LD_ADDR_OWVAR 37
23267: PUSH
23268: LD_INT 5
23270: ST_TO_ADDR
// vc_engine := engine_siberite ;
23271: LD_ADDR_OWVAR 39
23275: PUSH
23276: LD_INT 3
23278: ST_TO_ADDR
// vc_control := control_computer ;
23279: LD_ADDR_OWVAR 38
23283: PUSH
23284: LD_INT 3
23286: ST_TO_ADDR
// vc_weapon := us_double_laser ;
23287: LD_ADDR_OWVAR 40
23291: PUSH
23292: LD_INT 10
23294: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23295: LD_VAR 0 2
23299: PUSH
23300: LD_INT 1
23302: ARRAY
23303: PPUSH
23304: CALL_OW 310
23308: NOT
23309: IFFALSE 23356
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23311: CALL_OW 45
23315: PPUSH
23316: LD_VAR 0 2
23320: PUSH
23321: LD_INT 1
23323: ARRAY
23324: PPUSH
23325: CALL_OW 250
23329: PPUSH
23330: LD_VAR 0 2
23334: PUSH
23335: LD_INT 1
23337: ARRAY
23338: PPUSH
23339: CALL_OW 251
23343: PPUSH
23344: LD_INT 12
23346: PPUSH
23347: LD_INT 1
23349: PPUSH
23350: CALL_OW 50
23354: GO 23368
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23356: CALL_OW 45
23360: PPUSH
23361: LD_INT 1
23363: PPUSH
23364: CALL_OW 51
// end ;
23368: GO 23242
23370: POP
23371: POP
// end ;
23372: PPOPN 2
23374: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23375: LD_EXP 32
23379: PUSH
23380: LD_EXP 78
23384: AND
23385: IFFALSE 23607
23387: GO 23389
23389: DISABLE
23390: LD_INT 0
23392: PPUSH
23393: PPUSH
23394: PPUSH
23395: PPUSH
23396: PPUSH
23397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23398: LD_ADDR_VAR 0 6
23402: PUSH
23403: LD_INT 22
23405: PUSH
23406: LD_OWVAR 2
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 21
23417: PUSH
23418: LD_INT 1
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 3
23427: PUSH
23428: LD_INT 23
23430: PUSH
23431: LD_INT 0
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: LIST
23446: PPUSH
23447: CALL_OW 69
23451: ST_TO_ADDR
// if not tmp then
23452: LD_VAR 0 6
23456: NOT
23457: IFFALSE 23461
// exit ;
23459: GO 23607
// s1 := rand ( 1 , 4 ) ;
23461: LD_ADDR_VAR 0 2
23465: PUSH
23466: LD_INT 1
23468: PPUSH
23469: LD_INT 4
23471: PPUSH
23472: CALL_OW 12
23476: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23477: LD_ADDR_VAR 0 4
23481: PUSH
23482: LD_VAR 0 6
23486: PUSH
23487: LD_INT 1
23489: ARRAY
23490: PPUSH
23491: LD_VAR 0 2
23495: PPUSH
23496: CALL_OW 259
23500: ST_TO_ADDR
// if s1 = 1 then
23501: LD_VAR 0 2
23505: PUSH
23506: LD_INT 1
23508: EQUAL
23509: IFFALSE 23529
// s2 := rand ( 2 , 4 ) else
23511: LD_ADDR_VAR 0 3
23515: PUSH
23516: LD_INT 2
23518: PPUSH
23519: LD_INT 4
23521: PPUSH
23522: CALL_OW 12
23526: ST_TO_ADDR
23527: GO 23537
// s2 := 1 ;
23529: LD_ADDR_VAR 0 3
23533: PUSH
23534: LD_INT 1
23536: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23537: LD_ADDR_VAR 0 5
23541: PUSH
23542: LD_VAR 0 6
23546: PUSH
23547: LD_INT 1
23549: ARRAY
23550: PPUSH
23551: LD_VAR 0 3
23555: PPUSH
23556: CALL_OW 259
23560: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23561: LD_VAR 0 6
23565: PUSH
23566: LD_INT 1
23568: ARRAY
23569: PPUSH
23570: LD_VAR 0 2
23574: PPUSH
23575: LD_VAR 0 5
23579: PPUSH
23580: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23584: LD_VAR 0 6
23588: PUSH
23589: LD_INT 1
23591: ARRAY
23592: PPUSH
23593: LD_VAR 0 3
23597: PPUSH
23598: LD_VAR 0 4
23602: PPUSH
23603: CALL_OW 237
// end ;
23607: PPOPN 6
23609: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23610: LD_EXP 32
23614: PUSH
23615: LD_EXP 79
23619: AND
23620: IFFALSE 23699
23622: GO 23624
23624: DISABLE
23625: LD_INT 0
23627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23628: LD_ADDR_VAR 0 1
23632: PUSH
23633: LD_INT 22
23635: PUSH
23636: LD_OWVAR 2
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 30
23647: PUSH
23648: LD_INT 3
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PPUSH
23659: CALL_OW 69
23663: ST_TO_ADDR
// if not tmp then
23664: LD_VAR 0 1
23668: NOT
23669: IFFALSE 23673
// exit ;
23671: GO 23699
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23673: LD_VAR 0 1
23677: PUSH
23678: LD_INT 1
23680: PPUSH
23681: LD_VAR 0 1
23685: PPUSH
23686: CALL_OW 12
23690: ARRAY
23691: PPUSH
23692: LD_INT 1
23694: PPUSH
23695: CALL_OW 234
// end ;
23699: PPOPN 1
23701: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23702: LD_EXP 32
23706: PUSH
23707: LD_EXP 80
23711: AND
23712: IFFALSE 23824
23714: GO 23716
23716: DISABLE
23717: LD_INT 0
23719: PPUSH
23720: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23721: LD_ADDR_VAR 0 2
23725: PUSH
23726: LD_INT 22
23728: PUSH
23729: LD_OWVAR 2
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 2
23740: PUSH
23741: LD_INT 30
23743: PUSH
23744: LD_INT 27
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: LD_INT 30
23753: PUSH
23754: LD_INT 26
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 30
23763: PUSH
23764: LD_INT 28
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PPUSH
23781: CALL_OW 69
23785: ST_TO_ADDR
// if not tmp then
23786: LD_VAR 0 2
23790: NOT
23791: IFFALSE 23795
// exit ;
23793: GO 23824
// for i in tmp do
23795: LD_ADDR_VAR 0 1
23799: PUSH
23800: LD_VAR 0 2
23804: PUSH
23805: FOR_IN
23806: IFFALSE 23822
// SetLives ( i , 1 ) ;
23808: LD_VAR 0 1
23812: PPUSH
23813: LD_INT 1
23815: PPUSH
23816: CALL_OW 234
23820: GO 23805
23822: POP
23823: POP
// end ;
23824: PPOPN 2
23826: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23827: LD_EXP 32
23831: PUSH
23832: LD_EXP 81
23836: AND
23837: IFFALSE 24124
23839: GO 23841
23841: DISABLE
23842: LD_INT 0
23844: PPUSH
23845: PPUSH
23846: PPUSH
// begin i := rand ( 1 , 7 ) ;
23847: LD_ADDR_VAR 0 1
23851: PUSH
23852: LD_INT 1
23854: PPUSH
23855: LD_INT 7
23857: PPUSH
23858: CALL_OW 12
23862: ST_TO_ADDR
// case i of 1 :
23863: LD_VAR 0 1
23867: PUSH
23868: LD_INT 1
23870: DOUBLE
23871: EQUAL
23872: IFTRUE 23876
23874: GO 23886
23876: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23877: LD_STRING earthquake(getX(game), 0, 32)
23879: PPUSH
23880: CALL_OW 559
23884: GO 24124
23886: LD_INT 2
23888: DOUBLE
23889: EQUAL
23890: IFTRUE 23894
23892: GO 23908
23894: POP
// begin ToLua ( displayStucuk(); ) ;
23895: LD_STRING displayStucuk();
23897: PPUSH
23898: CALL_OW 559
// ResetFog ;
23902: CALL_OW 335
// end ; 3 :
23906: GO 24124
23908: LD_INT 3
23910: DOUBLE
23911: EQUAL
23912: IFTRUE 23916
23914: GO 24020
23916: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23917: LD_ADDR_VAR 0 2
23921: PUSH
23922: LD_INT 22
23924: PUSH
23925: LD_OWVAR 2
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 25
23936: PUSH
23937: LD_INT 1
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PPUSH
23948: CALL_OW 69
23952: ST_TO_ADDR
// if not tmp then
23953: LD_VAR 0 2
23957: NOT
23958: IFFALSE 23962
// exit ;
23960: GO 24124
// un := tmp [ rand ( 1 , tmp ) ] ;
23962: LD_ADDR_VAR 0 3
23966: PUSH
23967: LD_VAR 0 2
23971: PUSH
23972: LD_INT 1
23974: PPUSH
23975: LD_VAR 0 2
23979: PPUSH
23980: CALL_OW 12
23984: ARRAY
23985: ST_TO_ADDR
// if Crawls ( un ) then
23986: LD_VAR 0 3
23990: PPUSH
23991: CALL_OW 318
23995: IFFALSE 24006
// ComWalk ( un ) ;
23997: LD_VAR 0 3
24001: PPUSH
24002: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24006: LD_VAR 0 3
24010: PPUSH
24011: LD_INT 8
24013: PPUSH
24014: CALL_OW 336
// end ; 4 :
24018: GO 24124
24020: LD_INT 4
24022: DOUBLE
24023: EQUAL
24024: IFTRUE 24028
24026: GO 24102
24028: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24029: LD_ADDR_VAR 0 2
24033: PUSH
24034: LD_INT 22
24036: PUSH
24037: LD_OWVAR 2
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 30
24048: PUSH
24049: LD_INT 29
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PPUSH
24060: CALL_OW 69
24064: ST_TO_ADDR
// if not tmp then
24065: LD_VAR 0 2
24069: NOT
24070: IFFALSE 24074
// exit ;
24072: GO 24124
// CenterNowOnUnits ( tmp [ 1 ] ) ;
24074: LD_VAR 0 2
24078: PUSH
24079: LD_INT 1
24081: ARRAY
24082: PPUSH
24083: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
24087: LD_VAR 0 2
24091: PUSH
24092: LD_INT 1
24094: ARRAY
24095: PPUSH
24096: CALL_OW 65
// end ; 5 .. 7 :
24100: GO 24124
24102: LD_INT 5
24104: DOUBLE
24105: GREATEREQUAL
24106: IFFALSE 24114
24108: LD_INT 7
24110: DOUBLE
24111: LESSEQUAL
24112: IFTRUE 24116
24114: GO 24123
24116: POP
// StreamSibBomb ; end ;
24117: CALL 20361 0 0
24121: GO 24124
24123: POP
// end ;
24124: PPOPN 3
24126: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
24127: LD_EXP 32
24131: PUSH
24132: LD_EXP 82
24136: AND
24137: IFFALSE 24293
24139: GO 24141
24141: DISABLE
24142: LD_INT 0
24144: PPUSH
24145: PPUSH
24146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
24147: LD_ADDR_VAR 0 2
24151: PUSH
24152: LD_INT 81
24154: PUSH
24155: LD_OWVAR 2
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 2
24166: PUSH
24167: LD_INT 21
24169: PUSH
24170: LD_INT 1
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: LD_INT 21
24179: PUSH
24180: LD_INT 2
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: LIST
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PPUSH
24196: CALL_OW 69
24200: ST_TO_ADDR
// if not tmp then
24201: LD_VAR 0 2
24205: NOT
24206: IFFALSE 24210
// exit ;
24208: GO 24293
// p := 0 ;
24210: LD_ADDR_VAR 0 3
24214: PUSH
24215: LD_INT 0
24217: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24218: LD_INT 35
24220: PPUSH
24221: CALL_OW 67
// p := p + 1 ;
24225: LD_ADDR_VAR 0 3
24229: PUSH
24230: LD_VAR 0 3
24234: PUSH
24235: LD_INT 1
24237: PLUS
24238: ST_TO_ADDR
// for i in tmp do
24239: LD_ADDR_VAR 0 1
24243: PUSH
24244: LD_VAR 0 2
24248: PUSH
24249: FOR_IN
24250: IFFALSE 24281
// if GetLives ( i ) < 1000 then
24252: LD_VAR 0 1
24256: PPUSH
24257: CALL_OW 256
24261: PUSH
24262: LD_INT 1000
24264: LESS
24265: IFFALSE 24279
// SetLives ( i , 1000 ) ;
24267: LD_VAR 0 1
24271: PPUSH
24272: LD_INT 1000
24274: PPUSH
24275: CALL_OW 234
24279: GO 24249
24281: POP
24282: POP
// until p > 20 ;
24283: LD_VAR 0 3
24287: PUSH
24288: LD_INT 20
24290: GREATER
24291: IFFALSE 24218
// end ;
24293: PPOPN 3
24295: END
// every 0 0$1 trigger StreamModeActive and sTime do
24296: LD_EXP 32
24300: PUSH
24301: LD_EXP 83
24305: AND
24306: IFFALSE 24341
24308: GO 24310
24310: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24311: LD_INT 28
24313: PPUSH
24314: LD_OWVAR 2
24318: PPUSH
24319: LD_INT 2
24321: PPUSH
24322: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24326: LD_INT 30
24328: PPUSH
24329: LD_OWVAR 2
24333: PPUSH
24334: LD_INT 2
24336: PPUSH
24337: CALL_OW 322
// end ;
24341: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24342: LD_EXP 32
24346: PUSH
24347: LD_EXP 84
24351: AND
24352: IFFALSE 24473
24354: GO 24356
24356: DISABLE
24357: LD_INT 0
24359: PPUSH
24360: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24361: LD_ADDR_VAR 0 2
24365: PUSH
24366: LD_INT 22
24368: PUSH
24369: LD_OWVAR 2
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: LD_INT 21
24380: PUSH
24381: LD_INT 1
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: LD_INT 3
24390: PUSH
24391: LD_INT 23
24393: PUSH
24394: LD_INT 0
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: LIST
24409: PPUSH
24410: CALL_OW 69
24414: ST_TO_ADDR
// if not tmp then
24415: LD_VAR 0 2
24419: NOT
24420: IFFALSE 24424
// exit ;
24422: GO 24473
// for i in tmp do
24424: LD_ADDR_VAR 0 1
24428: PUSH
24429: LD_VAR 0 2
24433: PUSH
24434: FOR_IN
24435: IFFALSE 24471
// begin if Crawls ( i ) then
24437: LD_VAR 0 1
24441: PPUSH
24442: CALL_OW 318
24446: IFFALSE 24457
// ComWalk ( i ) ;
24448: LD_VAR 0 1
24452: PPUSH
24453: CALL_OW 138
// SetClass ( i , 2 ) ;
24457: LD_VAR 0 1
24461: PPUSH
24462: LD_INT 2
24464: PPUSH
24465: CALL_OW 336
// end ;
24469: GO 24434
24471: POP
24472: POP
// end ;
24473: PPOPN 2
24475: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24476: LD_EXP 32
24480: PUSH
24481: LD_EXP 85
24485: AND
24486: IFFALSE 24774
24488: GO 24490
24490: DISABLE
24491: LD_INT 0
24493: PPUSH
24494: PPUSH
24495: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24496: LD_OWVAR 2
24500: PPUSH
24501: LD_INT 9
24503: PPUSH
24504: LD_INT 1
24506: PPUSH
24507: LD_INT 1
24509: PPUSH
24510: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24514: LD_INT 9
24516: PPUSH
24517: LD_OWVAR 2
24521: PPUSH
24522: CALL_OW 343
// uc_side := 9 ;
24526: LD_ADDR_OWVAR 20
24530: PUSH
24531: LD_INT 9
24533: ST_TO_ADDR
// uc_nation := 2 ;
24534: LD_ADDR_OWVAR 21
24538: PUSH
24539: LD_INT 2
24541: ST_TO_ADDR
// hc_name := Dark Warrior ;
24542: LD_ADDR_OWVAR 26
24546: PUSH
24547: LD_STRING Dark Warrior
24549: ST_TO_ADDR
// hc_gallery :=  ;
24550: LD_ADDR_OWVAR 33
24554: PUSH
24555: LD_STRING 
24557: ST_TO_ADDR
// hc_noskilllimit := true ;
24558: LD_ADDR_OWVAR 76
24562: PUSH
24563: LD_INT 1
24565: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24566: LD_ADDR_OWVAR 31
24570: PUSH
24571: LD_INT 30
24573: PUSH
24574: LD_INT 30
24576: PUSH
24577: LD_INT 30
24579: PUSH
24580: LD_INT 30
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: ST_TO_ADDR
// un := CreateHuman ;
24589: LD_ADDR_VAR 0 3
24593: PUSH
24594: CALL_OW 44
24598: ST_TO_ADDR
// hc_noskilllimit := false ;
24599: LD_ADDR_OWVAR 76
24603: PUSH
24604: LD_INT 0
24606: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24607: LD_VAR 0 3
24611: PPUSH
24612: LD_INT 1
24614: PPUSH
24615: CALL_OW 51
// ToLua ( playRanger() ) ;
24619: LD_STRING playRanger()
24621: PPUSH
24622: CALL_OW 559
// p := 0 ;
24626: LD_ADDR_VAR 0 2
24630: PUSH
24631: LD_INT 0
24633: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24634: LD_INT 35
24636: PPUSH
24637: CALL_OW 67
// p := p + 1 ;
24641: LD_ADDR_VAR 0 2
24645: PUSH
24646: LD_VAR 0 2
24650: PUSH
24651: LD_INT 1
24653: PLUS
24654: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24655: LD_VAR 0 3
24659: PPUSH
24660: CALL_OW 256
24664: PUSH
24665: LD_INT 1000
24667: LESS
24668: IFFALSE 24682
// SetLives ( un , 1000 ) ;
24670: LD_VAR 0 3
24674: PPUSH
24675: LD_INT 1000
24677: PPUSH
24678: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24682: LD_VAR 0 3
24686: PPUSH
24687: LD_INT 81
24689: PUSH
24690: LD_OWVAR 2
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: LD_INT 91
24701: PUSH
24702: LD_VAR 0 3
24706: PUSH
24707: LD_INT 30
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: LIST
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PPUSH
24719: CALL_OW 69
24723: PPUSH
24724: LD_VAR 0 3
24728: PPUSH
24729: CALL_OW 74
24733: PPUSH
24734: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24738: LD_VAR 0 2
24742: PUSH
24743: LD_INT 80
24745: GREATER
24746: PUSH
24747: LD_VAR 0 3
24751: PPUSH
24752: CALL_OW 301
24756: OR
24757: IFFALSE 24634
// if un then
24759: LD_VAR 0 3
24763: IFFALSE 24774
// RemoveUnit ( un ) ;
24765: LD_VAR 0 3
24769: PPUSH
24770: CALL_OW 64
// end ;
24774: PPOPN 3
24776: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24777: LD_EXP 86
24781: IFFALSE 24897
24783: GO 24785
24785: DISABLE
24786: LD_INT 0
24788: PPUSH
24789: PPUSH
24790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24791: LD_ADDR_VAR 0 2
24795: PUSH
24796: LD_INT 81
24798: PUSH
24799: LD_OWVAR 2
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 21
24810: PUSH
24811: LD_INT 1
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PPUSH
24822: CALL_OW 69
24826: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24827: LD_STRING playComputer()
24829: PPUSH
24830: CALL_OW 559
// if not tmp then
24834: LD_VAR 0 2
24838: NOT
24839: IFFALSE 24843
// exit ;
24841: GO 24897
// for i in tmp do
24843: LD_ADDR_VAR 0 1
24847: PUSH
24848: LD_VAR 0 2
24852: PUSH
24853: FOR_IN
24854: IFFALSE 24895
// for j := 1 to 4 do
24856: LD_ADDR_VAR 0 3
24860: PUSH
24861: DOUBLE
24862: LD_INT 1
24864: DEC
24865: ST_TO_ADDR
24866: LD_INT 4
24868: PUSH
24869: FOR_TO
24870: IFFALSE 24891
// SetSkill ( i , j , 10 ) ;
24872: LD_VAR 0 1
24876: PPUSH
24877: LD_VAR 0 3
24881: PPUSH
24882: LD_INT 10
24884: PPUSH
24885: CALL_OW 237
24889: GO 24869
24891: POP
24892: POP
24893: GO 24853
24895: POP
24896: POP
// end ;
24897: PPOPN 3
24899: END
// every 0 0$1 trigger s30 do var i , tmp ;
24900: LD_EXP 87
24904: IFFALSE 24973
24906: GO 24908
24908: DISABLE
24909: LD_INT 0
24911: PPUSH
24912: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24913: LD_ADDR_VAR 0 2
24917: PUSH
24918: LD_INT 22
24920: PUSH
24921: LD_OWVAR 2
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PPUSH
24930: CALL_OW 69
24934: ST_TO_ADDR
// if not tmp then
24935: LD_VAR 0 2
24939: NOT
24940: IFFALSE 24944
// exit ;
24942: GO 24973
// for i in tmp do
24944: LD_ADDR_VAR 0 1
24948: PUSH
24949: LD_VAR 0 2
24953: PUSH
24954: FOR_IN
24955: IFFALSE 24971
// SetLives ( i , 300 ) ;
24957: LD_VAR 0 1
24961: PPUSH
24962: LD_INT 300
24964: PPUSH
24965: CALL_OW 234
24969: GO 24954
24971: POP
24972: POP
// end ;
24973: PPOPN 2
24975: END
// every 0 0$1 trigger s60 do var i , tmp ;
24976: LD_EXP 88
24980: IFFALSE 25049
24982: GO 24984
24984: DISABLE
24985: LD_INT 0
24987: PPUSH
24988: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24989: LD_ADDR_VAR 0 2
24993: PUSH
24994: LD_INT 22
24996: PUSH
24997: LD_OWVAR 2
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PPUSH
25006: CALL_OW 69
25010: ST_TO_ADDR
// if not tmp then
25011: LD_VAR 0 2
25015: NOT
25016: IFFALSE 25020
// exit ;
25018: GO 25049
// for i in tmp do
25020: LD_ADDR_VAR 0 1
25024: PUSH
25025: LD_VAR 0 2
25029: PUSH
25030: FOR_IN
25031: IFFALSE 25047
// SetLives ( i , 600 ) ;
25033: LD_VAR 0 1
25037: PPUSH
25038: LD_INT 600
25040: PPUSH
25041: CALL_OW 234
25045: GO 25030
25047: POP
25048: POP
// end ;
25049: PPOPN 2
25051: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
25052: LD_INT 0
25054: PPUSH
// case cmd of 301 :
25055: LD_VAR 0 1
25059: PUSH
25060: LD_INT 301
25062: DOUBLE
25063: EQUAL
25064: IFTRUE 25068
25066: GO 25100
25068: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
25069: LD_VAR 0 6
25073: PPUSH
25074: LD_VAR 0 7
25078: PPUSH
25079: LD_VAR 0 8
25083: PPUSH
25084: LD_VAR 0 4
25088: PPUSH
25089: LD_VAR 0 5
25093: PPUSH
25094: CALL 26309 0 5
25098: GO 25221
25100: LD_INT 302
25102: DOUBLE
25103: EQUAL
25104: IFTRUE 25108
25106: GO 25145
25108: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
25109: LD_VAR 0 6
25113: PPUSH
25114: LD_VAR 0 7
25118: PPUSH
25119: LD_VAR 0 8
25123: PPUSH
25124: LD_VAR 0 9
25128: PPUSH
25129: LD_VAR 0 4
25133: PPUSH
25134: LD_VAR 0 5
25138: PPUSH
25139: CALL 26400 0 6
25143: GO 25221
25145: LD_INT 303
25147: DOUBLE
25148: EQUAL
25149: IFTRUE 25153
25151: GO 25190
25153: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
25154: LD_VAR 0 6
25158: PPUSH
25159: LD_VAR 0 7
25163: PPUSH
25164: LD_VAR 0 8
25168: PPUSH
25169: LD_VAR 0 9
25173: PPUSH
25174: LD_VAR 0 4
25178: PPUSH
25179: LD_VAR 0 5
25183: PPUSH
25184: CALL 25226 0 6
25188: GO 25221
25190: LD_INT 304
25192: DOUBLE
25193: EQUAL
25194: IFTRUE 25198
25196: GO 25220
25198: POP
// hHackTeleport ( unit , x , y ) ; end ;
25199: LD_VAR 0 2
25203: PPUSH
25204: LD_VAR 0 4
25208: PPUSH
25209: LD_VAR 0 5
25213: PPUSH
25214: CALL 26993 0 3
25218: GO 25221
25220: POP
// end ;
25221: LD_VAR 0 12
25225: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25226: LD_INT 0
25228: PPUSH
25229: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25230: LD_VAR 0 1
25234: PUSH
25235: LD_INT 1
25237: LESS
25238: PUSH
25239: LD_VAR 0 1
25243: PUSH
25244: LD_INT 3
25246: GREATER
25247: OR
25248: PUSH
25249: LD_VAR 0 5
25253: PPUSH
25254: LD_VAR 0 6
25258: PPUSH
25259: CALL_OW 428
25263: OR
25264: IFFALSE 25268
// exit ;
25266: GO 25996
// uc_side := your_side ;
25268: LD_ADDR_OWVAR 20
25272: PUSH
25273: LD_OWVAR 2
25277: ST_TO_ADDR
// uc_nation := nation ;
25278: LD_ADDR_OWVAR 21
25282: PUSH
25283: LD_VAR 0 1
25287: ST_TO_ADDR
// bc_level = 1 ;
25288: LD_ADDR_OWVAR 43
25292: PUSH
25293: LD_INT 1
25295: ST_TO_ADDR
// case btype of 1 :
25296: LD_VAR 0 2
25300: PUSH
25301: LD_INT 1
25303: DOUBLE
25304: EQUAL
25305: IFTRUE 25309
25307: GO 25320
25309: POP
// bc_type := b_depot ; 2 :
25310: LD_ADDR_OWVAR 42
25314: PUSH
25315: LD_INT 0
25317: ST_TO_ADDR
25318: GO 25940
25320: LD_INT 2
25322: DOUBLE
25323: EQUAL
25324: IFTRUE 25328
25326: GO 25339
25328: POP
// bc_type := b_warehouse ; 3 :
25329: LD_ADDR_OWVAR 42
25333: PUSH
25334: LD_INT 1
25336: ST_TO_ADDR
25337: GO 25940
25339: LD_INT 3
25341: DOUBLE
25342: EQUAL
25343: IFTRUE 25347
25345: GO 25358
25347: POP
// bc_type := b_lab ; 4 .. 9 :
25348: LD_ADDR_OWVAR 42
25352: PUSH
25353: LD_INT 6
25355: ST_TO_ADDR
25356: GO 25940
25358: LD_INT 4
25360: DOUBLE
25361: GREATEREQUAL
25362: IFFALSE 25370
25364: LD_INT 9
25366: DOUBLE
25367: LESSEQUAL
25368: IFTRUE 25372
25370: GO 25432
25372: POP
// begin bc_type := b_lab_half ;
25373: LD_ADDR_OWVAR 42
25377: PUSH
25378: LD_INT 7
25380: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25381: LD_ADDR_OWVAR 44
25385: PUSH
25386: LD_INT 10
25388: PUSH
25389: LD_INT 11
25391: PUSH
25392: LD_INT 12
25394: PUSH
25395: LD_INT 15
25397: PUSH
25398: LD_INT 14
25400: PUSH
25401: LD_INT 13
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: PUSH
25412: LD_VAR 0 2
25416: PUSH
25417: LD_INT 3
25419: MINUS
25420: ARRAY
25421: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
25422: LD_ADDR_OWVAR 45
25426: PUSH
25427: LD_INT 9
25429: ST_TO_ADDR
// end ; 10 .. 13 :
25430: GO 25940
25432: LD_INT 10
25434: DOUBLE
25435: GREATEREQUAL
25436: IFFALSE 25444
25438: LD_INT 13
25440: DOUBLE
25441: LESSEQUAL
25442: IFTRUE 25446
25444: GO 25523
25446: POP
// begin bc_type := b_lab_full ;
25447: LD_ADDR_OWVAR 42
25451: PUSH
25452: LD_INT 8
25454: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25455: LD_ADDR_OWVAR 44
25459: PUSH
25460: LD_INT 10
25462: PUSH
25463: LD_INT 12
25465: PUSH
25466: LD_INT 14
25468: PUSH
25469: LD_INT 13
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: PUSH
25478: LD_VAR 0 2
25482: PUSH
25483: LD_INT 9
25485: MINUS
25486: ARRAY
25487: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25488: LD_ADDR_OWVAR 45
25492: PUSH
25493: LD_INT 11
25495: PUSH
25496: LD_INT 15
25498: PUSH
25499: LD_INT 12
25501: PUSH
25502: LD_INT 15
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: PUSH
25511: LD_VAR 0 2
25515: PUSH
25516: LD_INT 9
25518: MINUS
25519: ARRAY
25520: ST_TO_ADDR
// end ; 14 :
25521: GO 25940
25523: LD_INT 14
25525: DOUBLE
25526: EQUAL
25527: IFTRUE 25531
25529: GO 25542
25531: POP
// bc_type := b_workshop ; 15 :
25532: LD_ADDR_OWVAR 42
25536: PUSH
25537: LD_INT 2
25539: ST_TO_ADDR
25540: GO 25940
25542: LD_INT 15
25544: DOUBLE
25545: EQUAL
25546: IFTRUE 25550
25548: GO 25561
25550: POP
// bc_type := b_factory ; 16 :
25551: LD_ADDR_OWVAR 42
25555: PUSH
25556: LD_INT 3
25558: ST_TO_ADDR
25559: GO 25940
25561: LD_INT 16
25563: DOUBLE
25564: EQUAL
25565: IFTRUE 25569
25567: GO 25580
25569: POP
// bc_type := b_ext_gun ; 17 :
25570: LD_ADDR_OWVAR 42
25574: PUSH
25575: LD_INT 17
25577: ST_TO_ADDR
25578: GO 25940
25580: LD_INT 17
25582: DOUBLE
25583: EQUAL
25584: IFTRUE 25588
25586: GO 25616
25588: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25589: LD_ADDR_OWVAR 42
25593: PUSH
25594: LD_INT 19
25596: PUSH
25597: LD_INT 23
25599: PUSH
25600: LD_INT 19
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: LIST
25607: PUSH
25608: LD_VAR 0 1
25612: ARRAY
25613: ST_TO_ADDR
25614: GO 25940
25616: LD_INT 18
25618: DOUBLE
25619: EQUAL
25620: IFTRUE 25624
25622: GO 25635
25624: POP
// bc_type := b_ext_radar ; 19 :
25625: LD_ADDR_OWVAR 42
25629: PUSH
25630: LD_INT 20
25632: ST_TO_ADDR
25633: GO 25940
25635: LD_INT 19
25637: DOUBLE
25638: EQUAL
25639: IFTRUE 25643
25641: GO 25654
25643: POP
// bc_type := b_ext_radio ; 20 :
25644: LD_ADDR_OWVAR 42
25648: PUSH
25649: LD_INT 22
25651: ST_TO_ADDR
25652: GO 25940
25654: LD_INT 20
25656: DOUBLE
25657: EQUAL
25658: IFTRUE 25662
25660: GO 25673
25662: POP
// bc_type := b_ext_siberium ; 21 :
25663: LD_ADDR_OWVAR 42
25667: PUSH
25668: LD_INT 21
25670: ST_TO_ADDR
25671: GO 25940
25673: LD_INT 21
25675: DOUBLE
25676: EQUAL
25677: IFTRUE 25681
25679: GO 25692
25681: POP
// bc_type := b_ext_computer ; 22 :
25682: LD_ADDR_OWVAR 42
25686: PUSH
25687: LD_INT 24
25689: ST_TO_ADDR
25690: GO 25940
25692: LD_INT 22
25694: DOUBLE
25695: EQUAL
25696: IFTRUE 25700
25698: GO 25711
25700: POP
// bc_type := b_ext_track ; 23 :
25701: LD_ADDR_OWVAR 42
25705: PUSH
25706: LD_INT 16
25708: ST_TO_ADDR
25709: GO 25940
25711: LD_INT 23
25713: DOUBLE
25714: EQUAL
25715: IFTRUE 25719
25717: GO 25730
25719: POP
// bc_type := b_ext_laser ; 24 :
25720: LD_ADDR_OWVAR 42
25724: PUSH
25725: LD_INT 25
25727: ST_TO_ADDR
25728: GO 25940
25730: LD_INT 24
25732: DOUBLE
25733: EQUAL
25734: IFTRUE 25738
25736: GO 25749
25738: POP
// bc_type := b_control_tower ; 25 :
25739: LD_ADDR_OWVAR 42
25743: PUSH
25744: LD_INT 36
25746: ST_TO_ADDR
25747: GO 25940
25749: LD_INT 25
25751: DOUBLE
25752: EQUAL
25753: IFTRUE 25757
25755: GO 25768
25757: POP
// bc_type := b_breastwork ; 26 :
25758: LD_ADDR_OWVAR 42
25762: PUSH
25763: LD_INT 31
25765: ST_TO_ADDR
25766: GO 25940
25768: LD_INT 26
25770: DOUBLE
25771: EQUAL
25772: IFTRUE 25776
25774: GO 25787
25776: POP
// bc_type := b_bunker ; 27 :
25777: LD_ADDR_OWVAR 42
25781: PUSH
25782: LD_INT 32
25784: ST_TO_ADDR
25785: GO 25940
25787: LD_INT 27
25789: DOUBLE
25790: EQUAL
25791: IFTRUE 25795
25793: GO 25806
25795: POP
// bc_type := b_turret ; 28 :
25796: LD_ADDR_OWVAR 42
25800: PUSH
25801: LD_INT 33
25803: ST_TO_ADDR
25804: GO 25940
25806: LD_INT 28
25808: DOUBLE
25809: EQUAL
25810: IFTRUE 25814
25812: GO 25825
25814: POP
// bc_type := b_armoury ; 29 :
25815: LD_ADDR_OWVAR 42
25819: PUSH
25820: LD_INT 4
25822: ST_TO_ADDR
25823: GO 25940
25825: LD_INT 29
25827: DOUBLE
25828: EQUAL
25829: IFTRUE 25833
25831: GO 25844
25833: POP
// bc_type := b_barracks ; 30 :
25834: LD_ADDR_OWVAR 42
25838: PUSH
25839: LD_INT 5
25841: ST_TO_ADDR
25842: GO 25940
25844: LD_INT 30
25846: DOUBLE
25847: EQUAL
25848: IFTRUE 25852
25850: GO 25863
25852: POP
// bc_type := b_solar_power ; 31 :
25853: LD_ADDR_OWVAR 42
25857: PUSH
25858: LD_INT 27
25860: ST_TO_ADDR
25861: GO 25940
25863: LD_INT 31
25865: DOUBLE
25866: EQUAL
25867: IFTRUE 25871
25869: GO 25882
25871: POP
// bc_type := b_oil_power ; 32 :
25872: LD_ADDR_OWVAR 42
25876: PUSH
25877: LD_INT 26
25879: ST_TO_ADDR
25880: GO 25940
25882: LD_INT 32
25884: DOUBLE
25885: EQUAL
25886: IFTRUE 25890
25888: GO 25901
25890: POP
// bc_type := b_siberite_power ; 33 :
25891: LD_ADDR_OWVAR 42
25895: PUSH
25896: LD_INT 28
25898: ST_TO_ADDR
25899: GO 25940
25901: LD_INT 33
25903: DOUBLE
25904: EQUAL
25905: IFTRUE 25909
25907: GO 25920
25909: POP
// bc_type := b_oil_mine ; 34 :
25910: LD_ADDR_OWVAR 42
25914: PUSH
25915: LD_INT 29
25917: ST_TO_ADDR
25918: GO 25940
25920: LD_INT 34
25922: DOUBLE
25923: EQUAL
25924: IFTRUE 25928
25926: GO 25939
25928: POP
// bc_type := b_siberite_mine ; end ;
25929: LD_ADDR_OWVAR 42
25933: PUSH
25934: LD_INT 30
25936: ST_TO_ADDR
25937: GO 25940
25939: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25940: LD_ADDR_VAR 0 8
25944: PUSH
25945: LD_VAR 0 5
25949: PPUSH
25950: LD_VAR 0 6
25954: PPUSH
25955: LD_VAR 0 3
25959: PPUSH
25960: CALL_OW 47
25964: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25965: LD_OWVAR 42
25969: PUSH
25970: LD_INT 32
25972: PUSH
25973: LD_INT 33
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: IN
25980: IFFALSE 25996
// PlaceWeaponTurret ( b , weapon ) ;
25982: LD_VAR 0 8
25986: PPUSH
25987: LD_VAR 0 4
25991: PPUSH
25992: CALL_OW 431
// end ;
25996: LD_VAR 0 7
26000: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26001: LD_INT 0
26003: PPUSH
26004: PPUSH
26005: PPUSH
26006: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26007: LD_ADDR_VAR 0 4
26011: PUSH
26012: LD_INT 22
26014: PUSH
26015: LD_OWVAR 2
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 2
26026: PUSH
26027: LD_INT 30
26029: PUSH
26030: LD_INT 0
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 30
26039: PUSH
26040: LD_INT 1
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: LIST
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PPUSH
26056: CALL_OW 69
26060: ST_TO_ADDR
// if not tmp then
26061: LD_VAR 0 4
26065: NOT
26066: IFFALSE 26070
// exit ;
26068: GO 26129
// for i in tmp do
26070: LD_ADDR_VAR 0 2
26074: PUSH
26075: LD_VAR 0 4
26079: PUSH
26080: FOR_IN
26081: IFFALSE 26127
// for j = 1 to 3 do
26083: LD_ADDR_VAR 0 3
26087: PUSH
26088: DOUBLE
26089: LD_INT 1
26091: DEC
26092: ST_TO_ADDR
26093: LD_INT 3
26095: PUSH
26096: FOR_TO
26097: IFFALSE 26123
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26099: LD_VAR 0 2
26103: PPUSH
26104: CALL_OW 274
26108: PPUSH
26109: LD_VAR 0 3
26113: PPUSH
26114: LD_INT 99999
26116: PPUSH
26117: CALL_OW 277
26121: GO 26096
26123: POP
26124: POP
26125: GO 26080
26127: POP
26128: POP
// end ;
26129: LD_VAR 0 1
26133: RET
// export function hHackSetLevel10 ; var i , j ; begin
26134: LD_INT 0
26136: PPUSH
26137: PPUSH
26138: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26139: LD_ADDR_VAR 0 2
26143: PUSH
26144: LD_INT 21
26146: PUSH
26147: LD_INT 1
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PPUSH
26154: CALL_OW 69
26158: PUSH
26159: FOR_IN
26160: IFFALSE 26212
// if IsSelected ( i ) then
26162: LD_VAR 0 2
26166: PPUSH
26167: CALL_OW 306
26171: IFFALSE 26210
// begin for j := 1 to 4 do
26173: LD_ADDR_VAR 0 3
26177: PUSH
26178: DOUBLE
26179: LD_INT 1
26181: DEC
26182: ST_TO_ADDR
26183: LD_INT 4
26185: PUSH
26186: FOR_TO
26187: IFFALSE 26208
// SetSkill ( i , j , 10 ) ;
26189: LD_VAR 0 2
26193: PPUSH
26194: LD_VAR 0 3
26198: PPUSH
26199: LD_INT 10
26201: PPUSH
26202: CALL_OW 237
26206: GO 26186
26208: POP
26209: POP
// end ;
26210: GO 26159
26212: POP
26213: POP
// end ;
26214: LD_VAR 0 1
26218: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26219: LD_INT 0
26221: PPUSH
26222: PPUSH
26223: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26224: LD_ADDR_VAR 0 2
26228: PUSH
26229: LD_INT 22
26231: PUSH
26232: LD_OWVAR 2
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 21
26243: PUSH
26244: LD_INT 1
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PPUSH
26255: CALL_OW 69
26259: PUSH
26260: FOR_IN
26261: IFFALSE 26302
// begin for j := 1 to 4 do
26263: LD_ADDR_VAR 0 3
26267: PUSH
26268: DOUBLE
26269: LD_INT 1
26271: DEC
26272: ST_TO_ADDR
26273: LD_INT 4
26275: PUSH
26276: FOR_TO
26277: IFFALSE 26298
// SetSkill ( i , j , 10 ) ;
26279: LD_VAR 0 2
26283: PPUSH
26284: LD_VAR 0 3
26288: PPUSH
26289: LD_INT 10
26291: PPUSH
26292: CALL_OW 237
26296: GO 26276
26298: POP
26299: POP
// end ;
26300: GO 26260
26302: POP
26303: POP
// end ;
26304: LD_VAR 0 1
26308: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26309: LD_INT 0
26311: PPUSH
// uc_side := your_side ;
26312: LD_ADDR_OWVAR 20
26316: PUSH
26317: LD_OWVAR 2
26321: ST_TO_ADDR
// uc_nation := nation ;
26322: LD_ADDR_OWVAR 21
26326: PUSH
26327: LD_VAR 0 1
26331: ST_TO_ADDR
// InitHc ;
26332: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26336: LD_INT 0
26338: PPUSH
26339: LD_VAR 0 2
26343: PPUSH
26344: LD_VAR 0 3
26348: PPUSH
26349: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26353: LD_VAR 0 4
26357: PPUSH
26358: LD_VAR 0 5
26362: PPUSH
26363: CALL_OW 428
26367: PUSH
26368: LD_INT 0
26370: EQUAL
26371: IFFALSE 26395
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26373: CALL_OW 44
26377: PPUSH
26378: LD_VAR 0 4
26382: PPUSH
26383: LD_VAR 0 5
26387: PPUSH
26388: LD_INT 1
26390: PPUSH
26391: CALL_OW 48
// end ;
26395: LD_VAR 0 6
26399: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26400: LD_INT 0
26402: PPUSH
26403: PPUSH
// uc_side := your_side ;
26404: LD_ADDR_OWVAR 20
26408: PUSH
26409: LD_OWVAR 2
26413: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26414: LD_VAR 0 1
26418: PUSH
26419: LD_INT 1
26421: PUSH
26422: LD_INT 2
26424: PUSH
26425: LD_INT 3
26427: PUSH
26428: LD_INT 4
26430: PUSH
26431: LD_INT 5
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: IN
26441: IFFALSE 26453
// uc_nation := nation_american else
26443: LD_ADDR_OWVAR 21
26447: PUSH
26448: LD_INT 1
26450: ST_TO_ADDR
26451: GO 26496
// if chassis in [ 11 , 12 , 13 , 14 ] then
26453: LD_VAR 0 1
26457: PUSH
26458: LD_INT 11
26460: PUSH
26461: LD_INT 12
26463: PUSH
26464: LD_INT 13
26466: PUSH
26467: LD_INT 14
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: IN
26476: IFFALSE 26488
// uc_nation := nation_arabian else
26478: LD_ADDR_OWVAR 21
26482: PUSH
26483: LD_INT 2
26485: ST_TO_ADDR
26486: GO 26496
// uc_nation := nation_russian ;
26488: LD_ADDR_OWVAR 21
26492: PUSH
26493: LD_INT 3
26495: ST_TO_ADDR
// vc_chassis := chassis ;
26496: LD_ADDR_OWVAR 37
26500: PUSH
26501: LD_VAR 0 1
26505: ST_TO_ADDR
// vc_engine := engine ;
26506: LD_ADDR_OWVAR 39
26510: PUSH
26511: LD_VAR 0 2
26515: ST_TO_ADDR
// vc_control := control ;
26516: LD_ADDR_OWVAR 38
26520: PUSH
26521: LD_VAR 0 3
26525: ST_TO_ADDR
// vc_weapon := weapon ;
26526: LD_ADDR_OWVAR 40
26530: PUSH
26531: LD_VAR 0 4
26535: ST_TO_ADDR
// un := CreateVehicle ;
26536: LD_ADDR_VAR 0 8
26540: PUSH
26541: CALL_OW 45
26545: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26546: LD_VAR 0 8
26550: PPUSH
26551: LD_INT 0
26553: PPUSH
26554: LD_INT 5
26556: PPUSH
26557: CALL_OW 12
26561: PPUSH
26562: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26566: LD_VAR 0 8
26570: PPUSH
26571: LD_VAR 0 5
26575: PPUSH
26576: LD_VAR 0 6
26580: PPUSH
26581: LD_INT 1
26583: PPUSH
26584: CALL_OW 48
// end ;
26588: LD_VAR 0 7
26592: RET
// export hInvincible ; every 1 do
26593: GO 26595
26595: DISABLE
// hInvincible := [ ] ;
26596: LD_ADDR_EXP 89
26600: PUSH
26601: EMPTY
26602: ST_TO_ADDR
26603: END
// every 10 do var i ;
26604: GO 26606
26606: DISABLE
26607: LD_INT 0
26609: PPUSH
// begin enable ;
26610: ENABLE
// if not hInvincible then
26611: LD_EXP 89
26615: NOT
26616: IFFALSE 26620
// exit ;
26618: GO 26664
// for i in hInvincible do
26620: LD_ADDR_VAR 0 1
26624: PUSH
26625: LD_EXP 89
26629: PUSH
26630: FOR_IN
26631: IFFALSE 26662
// if GetLives ( i ) < 1000 then
26633: LD_VAR 0 1
26637: PPUSH
26638: CALL_OW 256
26642: PUSH
26643: LD_INT 1000
26645: LESS
26646: IFFALSE 26660
// SetLives ( i , 1000 ) ;
26648: LD_VAR 0 1
26652: PPUSH
26653: LD_INT 1000
26655: PPUSH
26656: CALL_OW 234
26660: GO 26630
26662: POP
26663: POP
// end ;
26664: PPOPN 1
26666: END
// export function hHackInvincible ; var i ; begin
26667: LD_INT 0
26669: PPUSH
26670: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26671: LD_ADDR_VAR 0 2
26675: PUSH
26676: LD_INT 2
26678: PUSH
26679: LD_INT 21
26681: PUSH
26682: LD_INT 1
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 21
26691: PUSH
26692: LD_INT 2
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: LIST
26703: PPUSH
26704: CALL_OW 69
26708: PUSH
26709: FOR_IN
26710: IFFALSE 26771
// if IsSelected ( i ) then
26712: LD_VAR 0 2
26716: PPUSH
26717: CALL_OW 306
26721: IFFALSE 26769
// begin if i in hInvincible then
26723: LD_VAR 0 2
26727: PUSH
26728: LD_EXP 89
26732: IN
26733: IFFALSE 26753
// hInvincible := hInvincible diff i else
26735: LD_ADDR_EXP 89
26739: PUSH
26740: LD_EXP 89
26744: PUSH
26745: LD_VAR 0 2
26749: DIFF
26750: ST_TO_ADDR
26751: GO 26769
// hInvincible := hInvincible union i ;
26753: LD_ADDR_EXP 89
26757: PUSH
26758: LD_EXP 89
26762: PUSH
26763: LD_VAR 0 2
26767: UNION
26768: ST_TO_ADDR
// end ;
26769: GO 26709
26771: POP
26772: POP
// end ;
26773: LD_VAR 0 1
26777: RET
// export function hHackInvisible ; var i , j ; begin
26778: LD_INT 0
26780: PPUSH
26781: PPUSH
26782: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26783: LD_ADDR_VAR 0 2
26787: PUSH
26788: LD_INT 21
26790: PUSH
26791: LD_INT 1
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PPUSH
26798: CALL_OW 69
26802: PUSH
26803: FOR_IN
26804: IFFALSE 26828
// if IsSelected ( i ) then
26806: LD_VAR 0 2
26810: PPUSH
26811: CALL_OW 306
26815: IFFALSE 26826
// ComForceInvisible ( i ) ;
26817: LD_VAR 0 2
26821: PPUSH
26822: CALL_OW 496
26826: GO 26803
26828: POP
26829: POP
// end ;
26830: LD_VAR 0 1
26834: RET
// export function hHackChangeYourSide ; begin
26835: LD_INT 0
26837: PPUSH
// if your_side = 8 then
26838: LD_OWVAR 2
26842: PUSH
26843: LD_INT 8
26845: EQUAL
26846: IFFALSE 26858
// your_side := 0 else
26848: LD_ADDR_OWVAR 2
26852: PUSH
26853: LD_INT 0
26855: ST_TO_ADDR
26856: GO 26872
// your_side := your_side + 1 ;
26858: LD_ADDR_OWVAR 2
26862: PUSH
26863: LD_OWVAR 2
26867: PUSH
26868: LD_INT 1
26870: PLUS
26871: ST_TO_ADDR
// end ;
26872: LD_VAR 0 1
26876: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26877: LD_INT 0
26879: PPUSH
26880: PPUSH
26881: PPUSH
// for i in all_units do
26882: LD_ADDR_VAR 0 2
26886: PUSH
26887: LD_OWVAR 3
26891: PUSH
26892: FOR_IN
26893: IFFALSE 26971
// if IsSelected ( i ) then
26895: LD_VAR 0 2
26899: PPUSH
26900: CALL_OW 306
26904: IFFALSE 26969
// begin j := GetSide ( i ) ;
26906: LD_ADDR_VAR 0 3
26910: PUSH
26911: LD_VAR 0 2
26915: PPUSH
26916: CALL_OW 255
26920: ST_TO_ADDR
// if j = 8 then
26921: LD_VAR 0 3
26925: PUSH
26926: LD_INT 8
26928: EQUAL
26929: IFFALSE 26941
// j := 0 else
26931: LD_ADDR_VAR 0 3
26935: PUSH
26936: LD_INT 0
26938: ST_TO_ADDR
26939: GO 26955
// j := j + 1 ;
26941: LD_ADDR_VAR 0 3
26945: PUSH
26946: LD_VAR 0 3
26950: PUSH
26951: LD_INT 1
26953: PLUS
26954: ST_TO_ADDR
// SetSide ( i , j ) ;
26955: LD_VAR 0 2
26959: PPUSH
26960: LD_VAR 0 3
26964: PPUSH
26965: CALL_OW 235
// end ;
26969: GO 26892
26971: POP
26972: POP
// end ;
26973: LD_VAR 0 1
26977: RET
// export function hHackFog ; begin
26978: LD_INT 0
26980: PPUSH
// FogOff ( true ) ;
26981: LD_INT 1
26983: PPUSH
26984: CALL_OW 344
// end ;
26988: LD_VAR 0 1
26992: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26993: LD_INT 0
26995: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26996: LD_VAR 0 1
27000: PPUSH
27001: LD_VAR 0 2
27005: PPUSH
27006: LD_VAR 0 3
27010: PPUSH
27011: LD_INT 1
27013: PPUSH
27014: LD_INT 1
27016: PPUSH
27017: CALL_OW 483
// CenterOnXY ( x , y ) ;
27021: LD_VAR 0 2
27025: PPUSH
27026: LD_VAR 0 3
27030: PPUSH
27031: CALL_OW 84
// end ;
27035: LD_VAR 0 4
27039: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
27040: LD_INT 0
27042: PPUSH
27043: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
27044: LD_VAR 0 1
27048: NOT
27049: PUSH
27050: LD_VAR 0 2
27054: PPUSH
27055: LD_VAR 0 3
27059: PPUSH
27060: CALL_OW 488
27064: NOT
27065: OR
27066: PUSH
27067: LD_VAR 0 1
27071: PPUSH
27072: CALL_OW 266
27076: PUSH
27077: LD_INT 3
27079: NONEQUAL
27080: PUSH
27081: LD_VAR 0 1
27085: PPUSH
27086: CALL_OW 247
27090: PUSH
27091: LD_INT 1
27093: EQUAL
27094: NOT
27095: AND
27096: OR
27097: IFFALSE 27101
// exit ;
27099: GO 27383
// if GetType ( factory ) = unit_human then
27101: LD_VAR 0 1
27105: PPUSH
27106: CALL_OW 247
27110: PUSH
27111: LD_INT 1
27113: EQUAL
27114: IFFALSE 27131
// factory := IsInUnit ( factory ) ;
27116: LD_ADDR_VAR 0 1
27120: PUSH
27121: LD_VAR 0 1
27125: PPUSH
27126: CALL_OW 310
27130: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
27131: LD_VAR 0 1
27135: PPUSH
27136: CALL_OW 266
27140: PUSH
27141: LD_INT 3
27143: NONEQUAL
27144: IFFALSE 27148
// exit ;
27146: GO 27383
// for i := 1 to Count ( factoryWaypoints ) do
27148: LD_ADDR_VAR 0 5
27152: PUSH
27153: DOUBLE
27154: LD_INT 1
27156: DEC
27157: ST_TO_ADDR
27158: LD_EXP 90
27162: PPUSH
27163: CALL 36029 0 1
27167: PUSH
27168: FOR_TO
27169: IFFALSE 27331
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
27171: LD_VAR 0 2
27175: PPUSH
27176: LD_VAR 0 3
27180: PPUSH
27181: CALL_OW 428
27185: PUSH
27186: LD_EXP 90
27190: PUSH
27191: LD_VAR 0 5
27195: ARRAY
27196: PUSH
27197: LD_INT 2
27199: ARRAY
27200: EQUAL
27201: IFFALSE 27233
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
27203: LD_ADDR_EXP 90
27207: PUSH
27208: LD_EXP 90
27212: PPUSH
27213: LD_VAR 0 5
27217: PPUSH
27218: CALL_OW 3
27222: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27223: CALL 27388 0 0
// exit ;
27227: POP
27228: POP
27229: GO 27383
// end else
27231: GO 27329
// if factory = factoryWaypoints [ i ] [ 2 ] then
27233: LD_VAR 0 1
27237: PUSH
27238: LD_EXP 90
27242: PUSH
27243: LD_VAR 0 5
27247: ARRAY
27248: PUSH
27249: LD_INT 2
27251: ARRAY
27252: EQUAL
27253: IFFALSE 27329
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
27255: LD_ADDR_EXP 90
27259: PUSH
27260: LD_EXP 90
27264: PPUSH
27265: LD_VAR 0 5
27269: PPUSH
27270: CALL_OW 3
27274: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
27275: LD_ADDR_EXP 90
27279: PUSH
27280: LD_EXP 90
27284: PPUSH
27285: LD_VAR 0 1
27289: PPUSH
27290: CALL_OW 255
27294: PUSH
27295: LD_VAR 0 1
27299: PUSH
27300: LD_VAR 0 2
27304: PUSH
27305: LD_VAR 0 3
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: PPUSH
27316: CALL 71779 0 2
27320: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27321: CALL 27388 0 0
// exit ;
27325: POP
27326: POP
27327: GO 27383
// end ; end ;
27329: GO 27168
27331: POP
27332: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
27333: LD_ADDR_EXP 90
27337: PUSH
27338: LD_EXP 90
27342: PPUSH
27343: LD_VAR 0 1
27347: PPUSH
27348: CALL_OW 255
27352: PUSH
27353: LD_VAR 0 1
27357: PUSH
27358: LD_VAR 0 2
27362: PUSH
27363: LD_VAR 0 3
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: PPUSH
27374: CALL 71779 0 2
27378: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27379: CALL 27388 0 0
// end ;
27383: LD_VAR 0 4
27387: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
27388: LD_INT 0
27390: PPUSH
27391: PPUSH
27392: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
27393: LD_STRING resetFactoryWaypoint();
27395: PPUSH
27396: CALL_OW 559
// if factoryWaypoints then
27400: LD_EXP 90
27404: IFFALSE 27525
// begin list := factoryWaypoints ;
27406: LD_ADDR_VAR 0 3
27410: PUSH
27411: LD_EXP 90
27415: ST_TO_ADDR
// for i := 1 to list do
27416: LD_ADDR_VAR 0 2
27420: PUSH
27421: DOUBLE
27422: LD_INT 1
27424: DEC
27425: ST_TO_ADDR
27426: LD_VAR 0 3
27430: PUSH
27431: FOR_TO
27432: IFFALSE 27523
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27434: LD_STRING setFactoryWaypointXY(
27436: PUSH
27437: LD_VAR 0 3
27441: PUSH
27442: LD_VAR 0 2
27446: ARRAY
27447: PUSH
27448: LD_INT 1
27450: ARRAY
27451: STR
27452: PUSH
27453: LD_STRING ,
27455: STR
27456: PUSH
27457: LD_VAR 0 3
27461: PUSH
27462: LD_VAR 0 2
27466: ARRAY
27467: PUSH
27468: LD_INT 2
27470: ARRAY
27471: STR
27472: PUSH
27473: LD_STRING ,
27475: STR
27476: PUSH
27477: LD_VAR 0 3
27481: PUSH
27482: LD_VAR 0 2
27486: ARRAY
27487: PUSH
27488: LD_INT 3
27490: ARRAY
27491: STR
27492: PUSH
27493: LD_STRING ,
27495: STR
27496: PUSH
27497: LD_VAR 0 3
27501: PUSH
27502: LD_VAR 0 2
27506: ARRAY
27507: PUSH
27508: LD_INT 4
27510: ARRAY
27511: STR
27512: PUSH
27513: LD_STRING )
27515: STR
27516: PPUSH
27517: CALL_OW 559
27521: GO 27431
27523: POP
27524: POP
// end ; end ;
27525: LD_VAR 0 1
27529: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
27530: LD_INT 0
27532: PPUSH
// if HexInfo ( x , y ) = warehouse then
27533: LD_VAR 0 2
27537: PPUSH
27538: LD_VAR 0 3
27542: PPUSH
27543: CALL_OW 428
27547: PUSH
27548: LD_VAR 0 1
27552: EQUAL
27553: IFFALSE 27580
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
27555: LD_ADDR_EXP 92
27559: PUSH
27560: LD_EXP 92
27564: PPUSH
27565: LD_VAR 0 1
27569: PPUSH
27570: LD_INT 0
27572: PPUSH
27573: CALL_OW 1
27577: ST_TO_ADDR
27578: GO 27631
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27580: LD_ADDR_EXP 92
27584: PUSH
27585: LD_EXP 92
27589: PPUSH
27590: LD_VAR 0 1
27594: PPUSH
27595: LD_VAR 0 1
27599: PPUSH
27600: CALL_OW 255
27604: PUSH
27605: LD_VAR 0 1
27609: PUSH
27610: LD_VAR 0 2
27614: PUSH
27615: LD_VAR 0 3
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: PPUSH
27626: CALL_OW 1
27630: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27631: CALL 27640 0 0
// end ;
27635: LD_VAR 0 4
27639: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
27640: LD_INT 0
27642: PPUSH
27643: PPUSH
27644: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27645: LD_STRING resetWarehouseGatheringPoints();
27647: PPUSH
27648: CALL_OW 559
// if warehouseGatheringPoints then
27652: LD_EXP 92
27656: IFFALSE 27782
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
27658: LD_ADDR_VAR 0 3
27662: PUSH
27663: LD_EXP 92
27667: PPUSH
27668: CALL 75681 0 1
27672: ST_TO_ADDR
// for i := 1 to list do
27673: LD_ADDR_VAR 0 2
27677: PUSH
27678: DOUBLE
27679: LD_INT 1
27681: DEC
27682: ST_TO_ADDR
27683: LD_VAR 0 3
27687: PUSH
27688: FOR_TO
27689: IFFALSE 27780
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27691: LD_STRING setWarehouseGatheringPointXY(
27693: PUSH
27694: LD_VAR 0 3
27698: PUSH
27699: LD_VAR 0 2
27703: ARRAY
27704: PUSH
27705: LD_INT 1
27707: ARRAY
27708: STR
27709: PUSH
27710: LD_STRING ,
27712: STR
27713: PUSH
27714: LD_VAR 0 3
27718: PUSH
27719: LD_VAR 0 2
27723: ARRAY
27724: PUSH
27725: LD_INT 2
27727: ARRAY
27728: STR
27729: PUSH
27730: LD_STRING ,
27732: STR
27733: PUSH
27734: LD_VAR 0 3
27738: PUSH
27739: LD_VAR 0 2
27743: ARRAY
27744: PUSH
27745: LD_INT 3
27747: ARRAY
27748: STR
27749: PUSH
27750: LD_STRING ,
27752: STR
27753: PUSH
27754: LD_VAR 0 3
27758: PUSH
27759: LD_VAR 0 2
27763: ARRAY
27764: PUSH
27765: LD_INT 4
27767: ARRAY
27768: STR
27769: PUSH
27770: LD_STRING )
27772: STR
27773: PPUSH
27774: CALL_OW 559
27778: GO 27688
27780: POP
27781: POP
// end ; end ;
27782: LD_VAR 0 1
27786: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27787: LD_EXP 92
27791: IFFALSE 28476
27793: GO 27795
27795: DISABLE
27796: LD_INT 0
27798: PPUSH
27799: PPUSH
27800: PPUSH
27801: PPUSH
27802: PPUSH
27803: PPUSH
27804: PPUSH
27805: PPUSH
27806: PPUSH
// begin enable ;
27807: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
27808: LD_ADDR_VAR 0 3
27812: PUSH
27813: LD_EXP 92
27817: PPUSH
27818: CALL 75681 0 1
27822: ST_TO_ADDR
// if not list then
27823: LD_VAR 0 3
27827: NOT
27828: IFFALSE 27832
// exit ;
27830: GO 28476
// for i := 1 to list do
27832: LD_ADDR_VAR 0 1
27836: PUSH
27837: DOUBLE
27838: LD_INT 1
27840: DEC
27841: ST_TO_ADDR
27842: LD_VAR 0 3
27846: PUSH
27847: FOR_TO
27848: IFFALSE 28474
// begin depot := list [ i ] [ 2 ] ;
27850: LD_ADDR_VAR 0 8
27854: PUSH
27855: LD_VAR 0 3
27859: PUSH
27860: LD_VAR 0 1
27864: ARRAY
27865: PUSH
27866: LD_INT 2
27868: ARRAY
27869: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27870: LD_ADDR_VAR 0 5
27874: PUSH
27875: LD_VAR 0 3
27879: PUSH
27880: LD_VAR 0 1
27884: ARRAY
27885: PUSH
27886: LD_INT 1
27888: ARRAY
27889: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27890: LD_VAR 0 8
27894: PPUSH
27895: CALL_OW 301
27899: PUSH
27900: LD_VAR 0 5
27904: PUSH
27905: LD_VAR 0 8
27909: PPUSH
27910: CALL_OW 255
27914: NONEQUAL
27915: OR
27916: IFFALSE 27945
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
27918: LD_ADDR_EXP 92
27922: PUSH
27923: LD_EXP 92
27927: PPUSH
27928: LD_VAR 0 8
27932: PPUSH
27933: LD_INT 0
27935: PPUSH
27936: CALL_OW 1
27940: ST_TO_ADDR
// exit ;
27941: POP
27942: POP
27943: GO 28476
// end ; x := list [ i ] [ 3 ] ;
27945: LD_ADDR_VAR 0 6
27949: PUSH
27950: LD_VAR 0 3
27954: PUSH
27955: LD_VAR 0 1
27959: ARRAY
27960: PUSH
27961: LD_INT 3
27963: ARRAY
27964: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
27965: LD_ADDR_VAR 0 7
27969: PUSH
27970: LD_VAR 0 3
27974: PUSH
27975: LD_VAR 0 1
27979: ARRAY
27980: PUSH
27981: LD_INT 4
27983: ARRAY
27984: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
27985: LD_ADDR_VAR 0 9
27989: PUSH
27990: LD_VAR 0 6
27994: PPUSH
27995: LD_VAR 0 7
27999: PPUSH
28000: LD_INT 16
28002: PPUSH
28003: CALL 74265 0 3
28007: ST_TO_ADDR
// if not cratesNearbyPoint then
28008: LD_VAR 0 9
28012: NOT
28013: IFFALSE 28019
// exit ;
28015: POP
28016: POP
28017: GO 28476
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
28019: LD_ADDR_VAR 0 4
28023: PUSH
28024: LD_INT 22
28026: PUSH
28027: LD_VAR 0 5
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 3
28038: PUSH
28039: LD_INT 60
28041: PUSH
28042: EMPTY
28043: LIST
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 91
28051: PUSH
28052: LD_VAR 0 8
28056: PUSH
28057: LD_INT 6
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 2
28067: PUSH
28068: LD_INT 25
28070: PUSH
28071: LD_INT 2
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 25
28080: PUSH
28081: LD_INT 16
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: LIST
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: PPUSH
28099: CALL_OW 69
28103: PUSH
28104: LD_VAR 0 8
28108: PPUSH
28109: CALL_OW 313
28113: PPUSH
28114: LD_INT 3
28116: PUSH
28117: LD_INT 60
28119: PUSH
28120: EMPTY
28121: LIST
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 2
28129: PUSH
28130: LD_INT 25
28132: PUSH
28133: LD_INT 2
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 25
28142: PUSH
28143: LD_INT 16
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: LIST
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PPUSH
28159: CALL_OW 72
28163: UNION
28164: ST_TO_ADDR
// if tmp then
28165: LD_VAR 0 4
28169: IFFALSE 28249
// begin tmp := ShrinkArray ( tmp , 3 ) ;
28171: LD_ADDR_VAR 0 4
28175: PUSH
28176: LD_VAR 0 4
28180: PPUSH
28181: LD_INT 3
28183: PPUSH
28184: CALL 72094 0 2
28188: ST_TO_ADDR
// for j in tmp do
28189: LD_ADDR_VAR 0 2
28193: PUSH
28194: LD_VAR 0 4
28198: PUSH
28199: FOR_IN
28200: IFFALSE 28243
// begin if IsInUnit ( j ) then
28202: LD_VAR 0 2
28206: PPUSH
28207: CALL_OW 310
28211: IFFALSE 28222
// ComExit ( j ) ;
28213: LD_VAR 0 2
28217: PPUSH
28218: CALL 72177 0 1
// AddComCollect ( j , x , y ) ;
28222: LD_VAR 0 2
28226: PPUSH
28227: LD_VAR 0 6
28231: PPUSH
28232: LD_VAR 0 7
28236: PPUSH
28237: CALL_OW 177
// end ;
28241: GO 28199
28243: POP
28244: POP
// exit ;
28245: POP
28246: POP
28247: GO 28476
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
28249: LD_ADDR_VAR 0 4
28253: PUSH
28254: LD_INT 22
28256: PUSH
28257: LD_VAR 0 5
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 91
28268: PUSH
28269: LD_VAR 0 8
28273: PUSH
28274: LD_INT 8
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 2
28284: PUSH
28285: LD_INT 34
28287: PUSH
28288: LD_INT 12
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 34
28297: PUSH
28298: LD_INT 51
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 34
28307: PUSH
28308: LD_INT 32
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 34
28317: PUSH
28318: LD_INT 89
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: LIST
28336: PPUSH
28337: CALL_OW 69
28341: ST_TO_ADDR
// if tmp then
28342: LD_VAR 0 4
28346: IFFALSE 28472
// begin for j in tmp do
28348: LD_ADDR_VAR 0 2
28352: PUSH
28353: LD_VAR 0 4
28357: PUSH
28358: FOR_IN
28359: IFFALSE 28470
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
28361: LD_VAR 0 2
28365: PPUSH
28366: CALL_OW 262
28370: PUSH
28371: LD_INT 3
28373: EQUAL
28374: PUSH
28375: LD_VAR 0 2
28379: PPUSH
28380: CALL_OW 261
28384: PUSH
28385: LD_INT 20
28387: GREATER
28388: OR
28389: PUSH
28390: LD_VAR 0 2
28394: PPUSH
28395: CALL_OW 314
28399: NOT
28400: AND
28401: PUSH
28402: LD_VAR 0 2
28406: PPUSH
28407: CALL_OW 263
28411: PUSH
28412: LD_INT 1
28414: NONEQUAL
28415: PUSH
28416: LD_VAR 0 2
28420: PPUSH
28421: CALL_OW 311
28425: OR
28426: AND
28427: IFFALSE 28468
// begin ComCollect ( j , x , y ) ;
28429: LD_VAR 0 2
28433: PPUSH
28434: LD_VAR 0 6
28438: PPUSH
28439: LD_VAR 0 7
28443: PPUSH
28444: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
28448: LD_VAR 0 2
28452: PPUSH
28453: LD_VAR 0 8
28457: PPUSH
28458: CALL_OW 172
// exit ;
28462: POP
28463: POP
28464: POP
28465: POP
28466: GO 28476
// end ;
28468: GO 28358
28470: POP
28471: POP
// end ; end ;
28472: GO 27847
28474: POP
28475: POP
// end ; end_of_file
28476: PPOPN 9
28478: END
// export function SOS_UnitDestroyed ( un ) ; begin
28479: LD_INT 0
28481: PPUSH
// ComRadiation ( un ) ;
28482: LD_VAR 0 1
28486: PPUSH
28487: CALL 29548 0 1
// end ;
28491: LD_VAR 0 2
28495: RET
// export function SOS_UnitKamikazed ( un ) ; begin
28496: LD_INT 0
28498: PPUSH
// ComRadiation ( un ) ;
28499: LD_VAR 0 1
28503: PPUSH
28504: CALL 29548 0 1
// end ;
28508: LD_VAR 0 2
28512: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28513: LD_INT 0
28515: PPUSH
// end ;
28516: LD_VAR 0 4
28520: RET
// export function SOS_Command ( cmd ) ; begin
28521: LD_INT 0
28523: PPUSH
// end ;
28524: LD_VAR 0 2
28528: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28529: LD_INT 0
28531: PPUSH
// end ;
28532: LD_VAR 0 6
28536: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
28537: LD_INT 0
28539: PPUSH
28540: PPUSH
28541: PPUSH
28542: PPUSH
// if not vehicle or not factory then
28543: LD_VAR 0 1
28547: NOT
28548: PUSH
28549: LD_VAR 0 2
28553: NOT
28554: OR
28555: IFFALSE 28559
// exit ;
28557: GO 29139
// if not factoryWaypoints then
28559: LD_EXP 90
28563: NOT
28564: IFFALSE 28568
// exit ;
28566: GO 29139
// for i := 1 to Count ( factoryWaypoints ) do
28568: LD_ADDR_VAR 0 4
28572: PUSH
28573: DOUBLE
28574: LD_INT 1
28576: DEC
28577: ST_TO_ADDR
28578: LD_EXP 90
28582: PPUSH
28583: CALL 36029 0 1
28587: PUSH
28588: FOR_TO
28589: IFFALSE 29137
// if factoryWaypoints [ i ] [ 2 ] = factory then
28591: LD_EXP 90
28595: PUSH
28596: LD_VAR 0 4
28600: ARRAY
28601: PUSH
28602: LD_INT 2
28604: ARRAY
28605: PUSH
28606: LD_VAR 0 2
28610: EQUAL
28611: IFFALSE 29135
// begin if GetControl ( vehicle ) = control_manual then
28613: LD_VAR 0 1
28617: PPUSH
28618: CALL_OW 263
28622: PUSH
28623: LD_INT 1
28625: EQUAL
28626: IFFALSE 28988
// begin driver := IsDrivenBy ( vehicle ) ;
28628: LD_ADDR_VAR 0 5
28632: PUSH
28633: LD_VAR 0 1
28637: PPUSH
28638: CALL_OW 311
28642: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
28643: LD_VAR 0 5
28647: PUSH
28648: LD_EXP 91
28652: IN
28653: PUSH
28654: LD_VAR 0 1
28658: PUSH
28659: LD_EXP 91
28663: IN
28664: OR
28665: IFFALSE 28671
// exit ;
28667: POP
28668: POP
28669: GO 29139
// if not HasTask ( driver ) then
28671: LD_VAR 0 5
28675: PPUSH
28676: CALL_OW 314
28680: NOT
28681: IFFALSE 28986
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
28683: LD_ADDR_EXP 91
28687: PUSH
28688: LD_EXP 91
28692: PPUSH
28693: LD_VAR 0 5
28697: PPUSH
28698: CALL 71779 0 2
28702: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
28703: LD_ADDR_EXP 91
28707: PUSH
28708: LD_EXP 91
28712: PPUSH
28713: LD_VAR 0 1
28717: PPUSH
28718: CALL 71779 0 2
28722: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28723: LD_ADDR_VAR 0 6
28727: PUSH
28728: LD_EXP 90
28732: PUSH
28733: LD_VAR 0 4
28737: ARRAY
28738: PUSH
28739: LD_INT 3
28741: ARRAY
28742: PPUSH
28743: LD_EXP 90
28747: PUSH
28748: LD_VAR 0 4
28752: ARRAY
28753: PUSH
28754: LD_INT 4
28756: ARRAY
28757: PPUSH
28758: CALL_OW 428
28762: ST_TO_ADDR
// if hex then
28763: LD_VAR 0 6
28767: IFFALSE 28785
// ComMoveUnit ( driver , hex ) else
28769: LD_VAR 0 5
28773: PPUSH
28774: LD_VAR 0 6
28778: PPUSH
28779: CALL_OW 112
28783: GO 28869
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
28785: LD_VAR 0 1
28789: PPUSH
28790: LD_EXP 90
28794: PUSH
28795: LD_VAR 0 4
28799: ARRAY
28800: PUSH
28801: LD_INT 3
28803: ARRAY
28804: PPUSH
28805: LD_EXP 90
28809: PUSH
28810: LD_VAR 0 4
28814: ARRAY
28815: PUSH
28816: LD_INT 4
28818: ARRAY
28819: PPUSH
28820: CALL_OW 297
28824: PUSH
28825: LD_INT 0
28827: GREATER
28828: IFFALSE 28869
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28830: LD_VAR 0 5
28834: PPUSH
28835: LD_EXP 90
28839: PUSH
28840: LD_VAR 0 4
28844: ARRAY
28845: PUSH
28846: LD_INT 3
28848: ARRAY
28849: PPUSH
28850: LD_EXP 90
28854: PUSH
28855: LD_VAR 0 4
28859: ARRAY
28860: PUSH
28861: LD_INT 4
28863: ARRAY
28864: PPUSH
28865: CALL_OW 111
// AddComExitVehicle ( driver ) ;
28869: LD_VAR 0 5
28873: PPUSH
28874: CALL_OW 181
// if Multiplayer then
28878: LD_OWVAR 4
28882: IFFALSE 28931
// begin repeat wait ( 10 ) ;
28884: LD_INT 10
28886: PPUSH
28887: CALL_OW 67
// until not IsInUnit ( driver ) ;
28891: LD_VAR 0 5
28895: PPUSH
28896: CALL_OW 310
28900: NOT
28901: IFFALSE 28884
// if not HasTask ( driver ) then
28903: LD_VAR 0 5
28907: PPUSH
28908: CALL_OW 314
28912: NOT
28913: IFFALSE 28929
// ComEnterUnit ( driver , factory ) ;
28915: LD_VAR 0 5
28919: PPUSH
28920: LD_VAR 0 2
28924: PPUSH
28925: CALL_OW 120
// end else
28929: GO 28945
// AddComEnterUnit ( driver , factory ) ;
28931: LD_VAR 0 5
28935: PPUSH
28936: LD_VAR 0 2
28940: PPUSH
28941: CALL_OW 180
// wait ( 0 0$1 ) ;
28945: LD_INT 35
28947: PPUSH
28948: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
28952: LD_ADDR_EXP 91
28956: PUSH
28957: LD_EXP 91
28961: PUSH
28962: LD_VAR 0 5
28966: DIFF
28967: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
28968: LD_ADDR_EXP 91
28972: PUSH
28973: LD_EXP 91
28977: PUSH
28978: LD_VAR 0 1
28982: DIFF
28983: ST_TO_ADDR
// break ;
28984: GO 29137
// end ; end else
28986: GO 29135
// if GetControl ( vehicle ) = control_remote then
28988: LD_VAR 0 1
28992: PPUSH
28993: CALL_OW 263
28997: PUSH
28998: LD_INT 2
29000: EQUAL
29001: IFFALSE 29087
// begin wait ( 0 0$2 ) ;
29003: LD_INT 70
29005: PPUSH
29006: CALL_OW 67
// repeat wait ( 10 ) ;
29010: LD_INT 10
29012: PPUSH
29013: CALL_OW 67
// Connect ( vehicle ) ;
29017: LD_VAR 0 1
29021: PPUSH
29022: CALL 42235 0 1
// until IsControledBy ( vehicle ) ;
29026: LD_VAR 0 1
29030: PPUSH
29031: CALL_OW 312
29035: IFFALSE 29010
// wait ( 10 ) ;
29037: LD_INT 10
29039: PPUSH
29040: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
29044: LD_VAR 0 1
29048: PPUSH
29049: LD_EXP 90
29053: PUSH
29054: LD_VAR 0 4
29058: ARRAY
29059: PUSH
29060: LD_INT 3
29062: ARRAY
29063: PPUSH
29064: LD_EXP 90
29068: PUSH
29069: LD_VAR 0 4
29073: ARRAY
29074: PUSH
29075: LD_INT 4
29077: ARRAY
29078: PPUSH
29079: CALL_OW 111
// break ;
29083: GO 29137
// end else
29085: GO 29135
// begin wait ( 0 0$3 ) ;
29087: LD_INT 105
29089: PPUSH
29090: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
29094: LD_VAR 0 1
29098: PPUSH
29099: LD_EXP 90
29103: PUSH
29104: LD_VAR 0 4
29108: ARRAY
29109: PUSH
29110: LD_INT 3
29112: ARRAY
29113: PPUSH
29114: LD_EXP 90
29118: PUSH
29119: LD_VAR 0 4
29123: ARRAY
29124: PUSH
29125: LD_INT 4
29127: ARRAY
29128: PPUSH
29129: CALL_OW 111
// break ;
29133: GO 29137
// end ; end ;
29135: GO 28588
29137: POP
29138: POP
// end ;
29139: LD_VAR 0 3
29143: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
29144: LD_INT 0
29146: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
29147: LD_VAR 0 1
29151: PUSH
29152: LD_INT 250
29154: EQUAL
29155: PUSH
29156: LD_VAR 0 2
29160: PPUSH
29161: CALL_OW 264
29165: PUSH
29166: LD_INT 81
29168: EQUAL
29169: AND
29170: IFFALSE 29191
// MinerPlaceMine ( unit , x , y ) ;
29172: LD_VAR 0 2
29176: PPUSH
29177: LD_VAR 0 4
29181: PPUSH
29182: LD_VAR 0 5
29186: PPUSH
29187: CALL 32283 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
29191: LD_VAR 0 1
29195: PUSH
29196: LD_INT 251
29198: EQUAL
29199: PUSH
29200: LD_VAR 0 2
29204: PPUSH
29205: CALL_OW 264
29209: PUSH
29210: LD_INT 81
29212: EQUAL
29213: AND
29214: IFFALSE 29235
// MinerDetonateMine ( unit , x , y ) ;
29216: LD_VAR 0 2
29220: PPUSH
29221: LD_VAR 0 4
29225: PPUSH
29226: LD_VAR 0 5
29230: PPUSH
29231: CALL 32558 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
29235: LD_VAR 0 1
29239: PUSH
29240: LD_INT 252
29242: EQUAL
29243: PUSH
29244: LD_VAR 0 2
29248: PPUSH
29249: CALL_OW 264
29253: PUSH
29254: LD_INT 81
29256: EQUAL
29257: AND
29258: IFFALSE 29279
// MinerCreateMinefield ( unit , x , y ) ;
29260: LD_VAR 0 2
29264: PPUSH
29265: LD_VAR 0 4
29269: PPUSH
29270: LD_VAR 0 5
29274: PPUSH
29275: CALL 32975 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
29279: LD_VAR 0 1
29283: PUSH
29284: LD_INT 253
29286: EQUAL
29287: PUSH
29288: LD_VAR 0 2
29292: PPUSH
29293: CALL_OW 257
29297: PUSH
29298: LD_INT 5
29300: EQUAL
29301: AND
29302: IFFALSE 29323
// ComBinocular ( unit , x , y ) ;
29304: LD_VAR 0 2
29308: PPUSH
29309: LD_VAR 0 4
29313: PPUSH
29314: LD_VAR 0 5
29318: PPUSH
29319: CALL 33344 0 3
// if selectedUnit then
29323: LD_VAR 0 3
29327: IFFALSE 29383
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
29329: LD_VAR 0 1
29333: PUSH
29334: LD_INT 254
29336: EQUAL
29337: PUSH
29338: LD_VAR 0 2
29342: PPUSH
29343: CALL_OW 264
29347: PUSH
29348: LD_INT 99
29350: EQUAL
29351: AND
29352: PUSH
29353: LD_VAR 0 3
29357: PPUSH
29358: CALL_OW 263
29362: PUSH
29363: LD_INT 3
29365: EQUAL
29366: AND
29367: IFFALSE 29383
// HackDestroyVehicle ( unit , selectedUnit ) ;
29369: LD_VAR 0 2
29373: PPUSH
29374: LD_VAR 0 3
29378: PPUSH
29379: CALL 31647 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29383: LD_VAR 0 1
29387: PUSH
29388: LD_INT 255
29390: EQUAL
29391: PUSH
29392: LD_VAR 0 2
29396: PPUSH
29397: CALL_OW 264
29401: PUSH
29402: LD_INT 14
29404: PUSH
29405: LD_INT 53
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: IN
29412: AND
29413: PUSH
29414: LD_VAR 0 4
29418: PPUSH
29419: LD_VAR 0 5
29423: PPUSH
29424: CALL_OW 488
29428: AND
29429: IFFALSE 29453
// CutTreeXYR ( unit , x , y , 12 ) ;
29431: LD_VAR 0 2
29435: PPUSH
29436: LD_VAR 0 4
29440: PPUSH
29441: LD_VAR 0 5
29445: PPUSH
29446: LD_INT 12
29448: PPUSH
29449: CALL 29644 0 4
// if cmd = 256 then
29453: LD_VAR 0 1
29457: PUSH
29458: LD_INT 256
29460: EQUAL
29461: IFFALSE 29482
// SetFactoryWaypoint ( unit , x , y ) ;
29463: LD_VAR 0 2
29467: PPUSH
29468: LD_VAR 0 4
29472: PPUSH
29473: LD_VAR 0 5
29477: PPUSH
29478: CALL 27040 0 3
// if cmd = 257 then
29482: LD_VAR 0 1
29486: PUSH
29487: LD_INT 257
29489: EQUAL
29490: IFFALSE 29511
// SetWarehouseGatheringPoint ( unit , x , y ) ;
29492: LD_VAR 0 2
29496: PPUSH
29497: LD_VAR 0 4
29501: PPUSH
29502: LD_VAR 0 5
29506: PPUSH
29507: CALL 27530 0 3
// if cmd = 258 then
29511: LD_VAR 0 1
29515: PUSH
29516: LD_INT 258
29518: EQUAL
29519: IFFALSE 29543
// BurnTreeXYR ( unit , x , y , 8 ) ;
29521: LD_VAR 0 2
29525: PPUSH
29526: LD_VAR 0 4
29530: PPUSH
29531: LD_VAR 0 5
29535: PPUSH
29536: LD_INT 8
29538: PPUSH
29539: CALL 30038 0 4
// end ;
29543: LD_VAR 0 6
29547: RET
// export function ComRadiation ( un ) ; var eff ; begin
29548: LD_INT 0
29550: PPUSH
29551: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
29552: LD_VAR 0 1
29556: PPUSH
29557: CALL_OW 264
29561: PUSH
29562: LD_INT 91
29564: NONEQUAL
29565: IFFALSE 29569
// exit ;
29567: GO 29639
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
29569: LD_INT 68
29571: PPUSH
29572: LD_VAR 0 1
29576: PPUSH
29577: CALL_OW 255
29581: PPUSH
29582: CALL_OW 321
29586: PUSH
29587: LD_INT 2
29589: EQUAL
29590: IFFALSE 29602
// eff := 50 else
29592: LD_ADDR_VAR 0 3
29596: PUSH
29597: LD_INT 50
29599: ST_TO_ADDR
29600: GO 29610
// eff := 25 ;
29602: LD_ADDR_VAR 0 3
29606: PUSH
29607: LD_INT 25
29609: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
29610: LD_VAR 0 1
29614: PPUSH
29615: CALL_OW 250
29619: PPUSH
29620: LD_VAR 0 1
29624: PPUSH
29625: CALL_OW 251
29629: PPUSH
29630: LD_VAR 0 3
29634: PPUSH
29635: CALL_OW 495
// end ;
29639: LD_VAR 0 2
29643: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
29644: LD_INT 0
29646: PPUSH
29647: PPUSH
29648: PPUSH
29649: PPUSH
29650: PPUSH
29651: PPUSH
29652: PPUSH
29653: PPUSH
29654: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
29655: LD_VAR 0 1
29659: PPUSH
29660: CALL_OW 302
29664: NOT
29665: PUSH
29666: LD_VAR 0 2
29670: PPUSH
29671: LD_VAR 0 3
29675: PPUSH
29676: CALL_OW 488
29680: NOT
29681: OR
29682: PUSH
29683: LD_VAR 0 4
29687: NOT
29688: OR
29689: IFFALSE 29693
// exit ;
29691: GO 30033
// list := [ ] ;
29693: LD_ADDR_VAR 0 13
29697: PUSH
29698: EMPTY
29699: ST_TO_ADDR
// if x - r < 0 then
29700: LD_VAR 0 2
29704: PUSH
29705: LD_VAR 0 4
29709: MINUS
29710: PUSH
29711: LD_INT 0
29713: LESS
29714: IFFALSE 29726
// min_x := 0 else
29716: LD_ADDR_VAR 0 7
29720: PUSH
29721: LD_INT 0
29723: ST_TO_ADDR
29724: GO 29742
// min_x := x - r ;
29726: LD_ADDR_VAR 0 7
29730: PUSH
29731: LD_VAR 0 2
29735: PUSH
29736: LD_VAR 0 4
29740: MINUS
29741: ST_TO_ADDR
// if y - r < 0 then
29742: LD_VAR 0 3
29746: PUSH
29747: LD_VAR 0 4
29751: MINUS
29752: PUSH
29753: LD_INT 0
29755: LESS
29756: IFFALSE 29768
// min_y := 0 else
29758: LD_ADDR_VAR 0 8
29762: PUSH
29763: LD_INT 0
29765: ST_TO_ADDR
29766: GO 29784
// min_y := y - r ;
29768: LD_ADDR_VAR 0 8
29772: PUSH
29773: LD_VAR 0 3
29777: PUSH
29778: LD_VAR 0 4
29782: MINUS
29783: ST_TO_ADDR
// max_x := x + r ;
29784: LD_ADDR_VAR 0 9
29788: PUSH
29789: LD_VAR 0 2
29793: PUSH
29794: LD_VAR 0 4
29798: PLUS
29799: ST_TO_ADDR
// max_y := y + r ;
29800: LD_ADDR_VAR 0 10
29804: PUSH
29805: LD_VAR 0 3
29809: PUSH
29810: LD_VAR 0 4
29814: PLUS
29815: ST_TO_ADDR
// for _x = min_x to max_x do
29816: LD_ADDR_VAR 0 11
29820: PUSH
29821: DOUBLE
29822: LD_VAR 0 7
29826: DEC
29827: ST_TO_ADDR
29828: LD_VAR 0 9
29832: PUSH
29833: FOR_TO
29834: IFFALSE 29951
// for _y = min_y to max_y do
29836: LD_ADDR_VAR 0 12
29840: PUSH
29841: DOUBLE
29842: LD_VAR 0 8
29846: DEC
29847: ST_TO_ADDR
29848: LD_VAR 0 10
29852: PUSH
29853: FOR_TO
29854: IFFALSE 29947
// begin if not ValidHex ( _x , _y ) then
29856: LD_VAR 0 11
29860: PPUSH
29861: LD_VAR 0 12
29865: PPUSH
29866: CALL_OW 488
29870: NOT
29871: IFFALSE 29875
// continue ;
29873: GO 29853
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29875: LD_VAR 0 11
29879: PPUSH
29880: LD_VAR 0 12
29884: PPUSH
29885: CALL_OW 351
29889: PUSH
29890: LD_VAR 0 11
29894: PPUSH
29895: LD_VAR 0 12
29899: PPUSH
29900: CALL_OW 554
29904: AND
29905: IFFALSE 29945
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29907: LD_ADDR_VAR 0 13
29911: PUSH
29912: LD_VAR 0 13
29916: PPUSH
29917: LD_VAR 0 13
29921: PUSH
29922: LD_INT 1
29924: PLUS
29925: PPUSH
29926: LD_VAR 0 11
29930: PUSH
29931: LD_VAR 0 12
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PPUSH
29940: CALL_OW 2
29944: ST_TO_ADDR
// end ;
29945: GO 29853
29947: POP
29948: POP
29949: GO 29833
29951: POP
29952: POP
// if not list then
29953: LD_VAR 0 13
29957: NOT
29958: IFFALSE 29962
// exit ;
29960: GO 30033
// for i in list do
29962: LD_ADDR_VAR 0 6
29966: PUSH
29967: LD_VAR 0 13
29971: PUSH
29972: FOR_IN
29973: IFFALSE 30031
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29975: LD_VAR 0 1
29979: PPUSH
29980: LD_STRING M
29982: PUSH
29983: LD_VAR 0 6
29987: PUSH
29988: LD_INT 1
29990: ARRAY
29991: PUSH
29992: LD_VAR 0 6
29996: PUSH
29997: LD_INT 2
29999: ARRAY
30000: PUSH
30001: LD_INT 0
30003: PUSH
30004: LD_INT 0
30006: PUSH
30007: LD_INT 0
30009: PUSH
30010: LD_INT 0
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: PUSH
30022: EMPTY
30023: LIST
30024: PPUSH
30025: CALL_OW 447
30029: GO 29972
30031: POP
30032: POP
// end ;
30033: LD_VAR 0 5
30037: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
30038: LD_INT 0
30040: PPUSH
30041: PPUSH
30042: PPUSH
30043: PPUSH
30044: PPUSH
30045: PPUSH
30046: PPUSH
30047: PPUSH
30048: PPUSH
30049: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
30050: LD_VAR 0 1
30054: PPUSH
30055: CALL_OW 302
30059: NOT
30060: PUSH
30061: LD_VAR 0 2
30065: PPUSH
30066: LD_VAR 0 3
30070: PPUSH
30071: CALL_OW 488
30075: NOT
30076: OR
30077: PUSH
30078: LD_VAR 0 4
30082: NOT
30083: OR
30084: IFFALSE 30088
// exit ;
30086: GO 30601
// list := [ ] ;
30088: LD_ADDR_VAR 0 13
30092: PUSH
30093: EMPTY
30094: ST_TO_ADDR
// if x - r < 0 then
30095: LD_VAR 0 2
30099: PUSH
30100: LD_VAR 0 4
30104: MINUS
30105: PUSH
30106: LD_INT 0
30108: LESS
30109: IFFALSE 30121
// min_x := 0 else
30111: LD_ADDR_VAR 0 7
30115: PUSH
30116: LD_INT 0
30118: ST_TO_ADDR
30119: GO 30137
// min_x := x - r ;
30121: LD_ADDR_VAR 0 7
30125: PUSH
30126: LD_VAR 0 2
30130: PUSH
30131: LD_VAR 0 4
30135: MINUS
30136: ST_TO_ADDR
// if y - r < 0 then
30137: LD_VAR 0 3
30141: PUSH
30142: LD_VAR 0 4
30146: MINUS
30147: PUSH
30148: LD_INT 0
30150: LESS
30151: IFFALSE 30163
// min_y := 0 else
30153: LD_ADDR_VAR 0 8
30157: PUSH
30158: LD_INT 0
30160: ST_TO_ADDR
30161: GO 30179
// min_y := y - r ;
30163: LD_ADDR_VAR 0 8
30167: PUSH
30168: LD_VAR 0 3
30172: PUSH
30173: LD_VAR 0 4
30177: MINUS
30178: ST_TO_ADDR
// max_x := x + r ;
30179: LD_ADDR_VAR 0 9
30183: PUSH
30184: LD_VAR 0 2
30188: PUSH
30189: LD_VAR 0 4
30193: PLUS
30194: ST_TO_ADDR
// max_y := y + r ;
30195: LD_ADDR_VAR 0 10
30199: PUSH
30200: LD_VAR 0 3
30204: PUSH
30205: LD_VAR 0 4
30209: PLUS
30210: ST_TO_ADDR
// for _x = min_x to max_x do
30211: LD_ADDR_VAR 0 11
30215: PUSH
30216: DOUBLE
30217: LD_VAR 0 7
30221: DEC
30222: ST_TO_ADDR
30223: LD_VAR 0 9
30227: PUSH
30228: FOR_TO
30229: IFFALSE 30346
// for _y = min_y to max_y do
30231: LD_ADDR_VAR 0 12
30235: PUSH
30236: DOUBLE
30237: LD_VAR 0 8
30241: DEC
30242: ST_TO_ADDR
30243: LD_VAR 0 10
30247: PUSH
30248: FOR_TO
30249: IFFALSE 30342
// begin if not ValidHex ( _x , _y ) then
30251: LD_VAR 0 11
30255: PPUSH
30256: LD_VAR 0 12
30260: PPUSH
30261: CALL_OW 488
30265: NOT
30266: IFFALSE 30270
// continue ;
30268: GO 30248
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
30270: LD_VAR 0 11
30274: PPUSH
30275: LD_VAR 0 12
30279: PPUSH
30280: CALL_OW 351
30284: PUSH
30285: LD_VAR 0 11
30289: PPUSH
30290: LD_VAR 0 12
30294: PPUSH
30295: CALL_OW 554
30299: AND
30300: IFFALSE 30340
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
30302: LD_ADDR_VAR 0 13
30306: PUSH
30307: LD_VAR 0 13
30311: PPUSH
30312: LD_VAR 0 13
30316: PUSH
30317: LD_INT 1
30319: PLUS
30320: PPUSH
30321: LD_VAR 0 11
30325: PUSH
30326: LD_VAR 0 12
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PPUSH
30335: CALL_OW 2
30339: ST_TO_ADDR
// end ;
30340: GO 30248
30342: POP
30343: POP
30344: GO 30228
30346: POP
30347: POP
// if not list then
30348: LD_VAR 0 13
30352: NOT
30353: IFFALSE 30357
// exit ;
30355: GO 30601
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
30357: LD_ADDR_VAR 0 13
30361: PUSH
30362: LD_VAR 0 1
30366: PPUSH
30367: LD_VAR 0 13
30371: PPUSH
30372: LD_INT 1
30374: PPUSH
30375: LD_INT 1
30377: PPUSH
30378: CALL 39377 0 4
30382: ST_TO_ADDR
// ComStop ( flame ) ;
30383: LD_VAR 0 1
30387: PPUSH
30388: CALL_OW 141
// for i in list do
30392: LD_ADDR_VAR 0 6
30396: PUSH
30397: LD_VAR 0 13
30401: PUSH
30402: FOR_IN
30403: IFFALSE 30434
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
30405: LD_VAR 0 1
30409: PPUSH
30410: LD_VAR 0 6
30414: PUSH
30415: LD_INT 1
30417: ARRAY
30418: PPUSH
30419: LD_VAR 0 6
30423: PUSH
30424: LD_INT 2
30426: ARRAY
30427: PPUSH
30428: CALL_OW 176
30432: GO 30402
30434: POP
30435: POP
// repeat wait ( 0 0$1 ) ;
30436: LD_INT 35
30438: PPUSH
30439: CALL_OW 67
// task := GetTaskList ( flame ) ;
30443: LD_ADDR_VAR 0 14
30447: PUSH
30448: LD_VAR 0 1
30452: PPUSH
30453: CALL_OW 437
30457: ST_TO_ADDR
// if not task then
30458: LD_VAR 0 14
30462: NOT
30463: IFFALSE 30467
// exit ;
30465: GO 30601
// if task [ 1 ] [ 1 ] <> | then
30467: LD_VAR 0 14
30471: PUSH
30472: LD_INT 1
30474: ARRAY
30475: PUSH
30476: LD_INT 1
30478: ARRAY
30479: PUSH
30480: LD_STRING |
30482: NONEQUAL
30483: IFFALSE 30487
// exit ;
30485: GO 30601
// _x := task [ 1 ] [ 2 ] ;
30487: LD_ADDR_VAR 0 11
30491: PUSH
30492: LD_VAR 0 14
30496: PUSH
30497: LD_INT 1
30499: ARRAY
30500: PUSH
30501: LD_INT 2
30503: ARRAY
30504: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
30505: LD_ADDR_VAR 0 12
30509: PUSH
30510: LD_VAR 0 14
30514: PUSH
30515: LD_INT 1
30517: ARRAY
30518: PUSH
30519: LD_INT 3
30521: ARRAY
30522: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
30523: LD_VAR 0 11
30527: PPUSH
30528: LD_VAR 0 12
30532: PPUSH
30533: CALL_OW 351
30537: NOT
30538: PUSH
30539: LD_VAR 0 11
30543: PPUSH
30544: LD_VAR 0 12
30548: PPUSH
30549: CALL_OW 554
30553: NOT
30554: OR
30555: IFFALSE 30589
// begin task := Delete ( task , 1 ) ;
30557: LD_ADDR_VAR 0 14
30561: PUSH
30562: LD_VAR 0 14
30566: PPUSH
30567: LD_INT 1
30569: PPUSH
30570: CALL_OW 3
30574: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
30575: LD_VAR 0 1
30579: PPUSH
30580: LD_VAR 0 14
30584: PPUSH
30585: CALL_OW 446
// end ; until not HasTask ( flame ) ;
30589: LD_VAR 0 1
30593: PPUSH
30594: CALL_OW 314
30598: NOT
30599: IFFALSE 30436
// end ;
30601: LD_VAR 0 5
30605: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
30606: LD_EXP 94
30610: NOT
30611: IFFALSE 30661
30613: GO 30615
30615: DISABLE
// begin initHack := true ;
30616: LD_ADDR_EXP 94
30620: PUSH
30621: LD_INT 1
30623: ST_TO_ADDR
// hackTanks := [ ] ;
30624: LD_ADDR_EXP 95
30628: PUSH
30629: EMPTY
30630: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
30631: LD_ADDR_EXP 96
30635: PUSH
30636: EMPTY
30637: ST_TO_ADDR
// hackLimit := 3 ;
30638: LD_ADDR_EXP 97
30642: PUSH
30643: LD_INT 3
30645: ST_TO_ADDR
// hackDist := 12 ;
30646: LD_ADDR_EXP 98
30650: PUSH
30651: LD_INT 12
30653: ST_TO_ADDR
// hackCounter := [ ] ;
30654: LD_ADDR_EXP 99
30658: PUSH
30659: EMPTY
30660: ST_TO_ADDR
// end ;
30661: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
30662: LD_EXP 94
30666: PUSH
30667: LD_INT 34
30669: PUSH
30670: LD_INT 99
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PPUSH
30677: CALL_OW 69
30681: AND
30682: IFFALSE 30935
30684: GO 30686
30686: DISABLE
30687: LD_INT 0
30689: PPUSH
30690: PPUSH
// begin enable ;
30691: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
30692: LD_ADDR_VAR 0 1
30696: PUSH
30697: LD_INT 34
30699: PUSH
30700: LD_INT 99
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PPUSH
30707: CALL_OW 69
30711: PUSH
30712: FOR_IN
30713: IFFALSE 30933
// begin if not i in hackTanks then
30715: LD_VAR 0 1
30719: PUSH
30720: LD_EXP 95
30724: IN
30725: NOT
30726: IFFALSE 30809
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
30728: LD_ADDR_EXP 95
30732: PUSH
30733: LD_EXP 95
30737: PPUSH
30738: LD_EXP 95
30742: PUSH
30743: LD_INT 1
30745: PLUS
30746: PPUSH
30747: LD_VAR 0 1
30751: PPUSH
30752: CALL_OW 1
30756: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
30757: LD_ADDR_EXP 96
30761: PUSH
30762: LD_EXP 96
30766: PPUSH
30767: LD_EXP 96
30771: PUSH
30772: LD_INT 1
30774: PLUS
30775: PPUSH
30776: EMPTY
30777: PPUSH
30778: CALL_OW 1
30782: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
30783: LD_ADDR_EXP 99
30787: PUSH
30788: LD_EXP 99
30792: PPUSH
30793: LD_EXP 99
30797: PUSH
30798: LD_INT 1
30800: PLUS
30801: PPUSH
30802: EMPTY
30803: PPUSH
30804: CALL_OW 1
30808: ST_TO_ADDR
// end ; if not IsOk ( i ) then
30809: LD_VAR 0 1
30813: PPUSH
30814: CALL_OW 302
30818: NOT
30819: IFFALSE 30832
// begin HackUnlinkAll ( i ) ;
30821: LD_VAR 0 1
30825: PPUSH
30826: CALL 30938 0 1
// continue ;
30830: GO 30712
// end ; HackCheckCapturedStatus ( i ) ;
30832: LD_VAR 0 1
30836: PPUSH
30837: CALL 31381 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
30841: LD_ADDR_VAR 0 2
30845: PUSH
30846: LD_INT 81
30848: PUSH
30849: LD_VAR 0 1
30853: PPUSH
30854: CALL_OW 255
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 33
30865: PUSH
30866: LD_INT 3
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 91
30875: PUSH
30876: LD_VAR 0 1
30880: PUSH
30881: LD_EXP 98
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 50
30893: PUSH
30894: EMPTY
30895: LIST
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: PPUSH
30903: CALL_OW 69
30907: ST_TO_ADDR
// if not tmp then
30908: LD_VAR 0 2
30912: NOT
30913: IFFALSE 30917
// continue ;
30915: GO 30712
// HackLink ( i , tmp ) ;
30917: LD_VAR 0 1
30921: PPUSH
30922: LD_VAR 0 2
30926: PPUSH
30927: CALL 31074 0 2
// end ;
30931: GO 30712
30933: POP
30934: POP
// end ;
30935: PPOPN 2
30937: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30938: LD_INT 0
30940: PPUSH
30941: PPUSH
30942: PPUSH
// if not hack in hackTanks then
30943: LD_VAR 0 1
30947: PUSH
30948: LD_EXP 95
30952: IN
30953: NOT
30954: IFFALSE 30958
// exit ;
30956: GO 31069
// index := GetElementIndex ( hackTanks , hack ) ;
30958: LD_ADDR_VAR 0 4
30962: PUSH
30963: LD_EXP 95
30967: PPUSH
30968: LD_VAR 0 1
30972: PPUSH
30973: CALL 38674 0 2
30977: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30978: LD_EXP 96
30982: PUSH
30983: LD_VAR 0 4
30987: ARRAY
30988: IFFALSE 31069
// begin for i in hackTanksCaptured [ index ] do
30990: LD_ADDR_VAR 0 3
30994: PUSH
30995: LD_EXP 96
30999: PUSH
31000: LD_VAR 0 4
31004: ARRAY
31005: PUSH
31006: FOR_IN
31007: IFFALSE 31033
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
31009: LD_VAR 0 3
31013: PUSH
31014: LD_INT 1
31016: ARRAY
31017: PPUSH
31018: LD_VAR 0 3
31022: PUSH
31023: LD_INT 2
31025: ARRAY
31026: PPUSH
31027: CALL_OW 235
31031: GO 31006
31033: POP
31034: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
31035: LD_ADDR_EXP 96
31039: PUSH
31040: LD_EXP 96
31044: PPUSH
31045: LD_VAR 0 4
31049: PPUSH
31050: EMPTY
31051: PPUSH
31052: CALL_OW 1
31056: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
31057: LD_VAR 0 1
31061: PPUSH
31062: LD_INT 0
31064: PPUSH
31065: CALL_OW 505
// end ; end ;
31069: LD_VAR 0 2
31073: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
31074: LD_INT 0
31076: PPUSH
31077: PPUSH
31078: PPUSH
// if not hack in hackTanks or not vehicles then
31079: LD_VAR 0 1
31083: PUSH
31084: LD_EXP 95
31088: IN
31089: NOT
31090: PUSH
31091: LD_VAR 0 2
31095: NOT
31096: OR
31097: IFFALSE 31101
// exit ;
31099: GO 31376
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
31101: LD_ADDR_VAR 0 2
31105: PUSH
31106: LD_VAR 0 1
31110: PPUSH
31111: LD_VAR 0 2
31115: PPUSH
31116: LD_INT 1
31118: PPUSH
31119: LD_INT 1
31121: PPUSH
31122: CALL 39324 0 4
31126: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
31127: LD_ADDR_VAR 0 5
31131: PUSH
31132: LD_EXP 95
31136: PPUSH
31137: LD_VAR 0 1
31141: PPUSH
31142: CALL 38674 0 2
31146: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
31147: LD_EXP 96
31151: PUSH
31152: LD_VAR 0 5
31156: ARRAY
31157: PUSH
31158: LD_EXP 97
31162: LESS
31163: IFFALSE 31352
// begin for i := 1 to vehicles do
31165: LD_ADDR_VAR 0 4
31169: PUSH
31170: DOUBLE
31171: LD_INT 1
31173: DEC
31174: ST_TO_ADDR
31175: LD_VAR 0 2
31179: PUSH
31180: FOR_TO
31181: IFFALSE 31350
// begin if hackTanksCaptured [ index ] = hackLimit then
31183: LD_EXP 96
31187: PUSH
31188: LD_VAR 0 5
31192: ARRAY
31193: PUSH
31194: LD_EXP 97
31198: EQUAL
31199: IFFALSE 31203
// break ;
31201: GO 31350
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
31203: LD_ADDR_EXP 99
31207: PUSH
31208: LD_EXP 99
31212: PPUSH
31213: LD_VAR 0 5
31217: PPUSH
31218: LD_EXP 99
31222: PUSH
31223: LD_VAR 0 5
31227: ARRAY
31228: PUSH
31229: LD_INT 1
31231: PLUS
31232: PPUSH
31233: CALL_OW 1
31237: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
31238: LD_ADDR_EXP 96
31242: PUSH
31243: LD_EXP 96
31247: PPUSH
31248: LD_VAR 0 5
31252: PUSH
31253: LD_EXP 96
31257: PUSH
31258: LD_VAR 0 5
31262: ARRAY
31263: PUSH
31264: LD_INT 1
31266: PLUS
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PPUSH
31272: LD_VAR 0 2
31276: PUSH
31277: LD_VAR 0 4
31281: ARRAY
31282: PUSH
31283: LD_VAR 0 2
31287: PUSH
31288: LD_VAR 0 4
31292: ARRAY
31293: PPUSH
31294: CALL_OW 255
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PPUSH
31303: CALL 38889 0 3
31307: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
31308: LD_VAR 0 2
31312: PUSH
31313: LD_VAR 0 4
31317: ARRAY
31318: PPUSH
31319: LD_VAR 0 1
31323: PPUSH
31324: CALL_OW 255
31328: PPUSH
31329: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
31333: LD_VAR 0 2
31337: PUSH
31338: LD_VAR 0 4
31342: ARRAY
31343: PPUSH
31344: CALL_OW 141
// end ;
31348: GO 31180
31350: POP
31351: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31352: LD_VAR 0 1
31356: PPUSH
31357: LD_EXP 96
31361: PUSH
31362: LD_VAR 0 5
31366: ARRAY
31367: PUSH
31368: LD_INT 0
31370: PLUS
31371: PPUSH
31372: CALL_OW 505
// end ;
31376: LD_VAR 0 3
31380: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
31381: LD_INT 0
31383: PPUSH
31384: PPUSH
31385: PPUSH
31386: PPUSH
// if not hack in hackTanks then
31387: LD_VAR 0 1
31391: PUSH
31392: LD_EXP 95
31396: IN
31397: NOT
31398: IFFALSE 31402
// exit ;
31400: GO 31642
// index := GetElementIndex ( hackTanks , hack ) ;
31402: LD_ADDR_VAR 0 4
31406: PUSH
31407: LD_EXP 95
31411: PPUSH
31412: LD_VAR 0 1
31416: PPUSH
31417: CALL 38674 0 2
31421: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
31422: LD_ADDR_VAR 0 3
31426: PUSH
31427: DOUBLE
31428: LD_EXP 96
31432: PUSH
31433: LD_VAR 0 4
31437: ARRAY
31438: INC
31439: ST_TO_ADDR
31440: LD_INT 1
31442: PUSH
31443: FOR_DOWNTO
31444: IFFALSE 31616
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
31446: LD_ADDR_VAR 0 5
31450: PUSH
31451: LD_EXP 96
31455: PUSH
31456: LD_VAR 0 4
31460: ARRAY
31461: PUSH
31462: LD_VAR 0 3
31466: ARRAY
31467: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
31468: LD_VAR 0 5
31472: PUSH
31473: LD_INT 1
31475: ARRAY
31476: PPUSH
31477: CALL_OW 302
31481: NOT
31482: PUSH
31483: LD_VAR 0 5
31487: PUSH
31488: LD_INT 1
31490: ARRAY
31491: PPUSH
31492: CALL_OW 255
31496: PUSH
31497: LD_VAR 0 1
31501: PPUSH
31502: CALL_OW 255
31506: NONEQUAL
31507: OR
31508: IFFALSE 31614
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
31510: LD_VAR 0 5
31514: PUSH
31515: LD_INT 1
31517: ARRAY
31518: PPUSH
31519: CALL_OW 305
31523: PUSH
31524: LD_VAR 0 5
31528: PUSH
31529: LD_INT 1
31531: ARRAY
31532: PPUSH
31533: CALL_OW 255
31537: PUSH
31538: LD_VAR 0 1
31542: PPUSH
31543: CALL_OW 255
31547: EQUAL
31548: AND
31549: IFFALSE 31573
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
31551: LD_VAR 0 5
31555: PUSH
31556: LD_INT 1
31558: ARRAY
31559: PPUSH
31560: LD_VAR 0 5
31564: PUSH
31565: LD_INT 2
31567: ARRAY
31568: PPUSH
31569: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
31573: LD_ADDR_EXP 96
31577: PUSH
31578: LD_EXP 96
31582: PPUSH
31583: LD_VAR 0 4
31587: PPUSH
31588: LD_EXP 96
31592: PUSH
31593: LD_VAR 0 4
31597: ARRAY
31598: PPUSH
31599: LD_VAR 0 3
31603: PPUSH
31604: CALL_OW 3
31608: PPUSH
31609: CALL_OW 1
31613: ST_TO_ADDR
// end ; end ;
31614: GO 31443
31616: POP
31617: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31618: LD_VAR 0 1
31622: PPUSH
31623: LD_EXP 96
31627: PUSH
31628: LD_VAR 0 4
31632: ARRAY
31633: PUSH
31634: LD_INT 0
31636: PLUS
31637: PPUSH
31638: CALL_OW 505
// end ;
31642: LD_VAR 0 2
31646: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
31647: LD_INT 0
31649: PPUSH
31650: PPUSH
31651: PPUSH
31652: PPUSH
// if not hack in hackTanks then
31653: LD_VAR 0 1
31657: PUSH
31658: LD_EXP 95
31662: IN
31663: NOT
31664: IFFALSE 31668
// exit ;
31666: GO 31753
// index := GetElementIndex ( hackTanks , hack ) ;
31668: LD_ADDR_VAR 0 5
31672: PUSH
31673: LD_EXP 95
31677: PPUSH
31678: LD_VAR 0 1
31682: PPUSH
31683: CALL 38674 0 2
31687: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
31688: LD_ADDR_VAR 0 4
31692: PUSH
31693: DOUBLE
31694: LD_INT 1
31696: DEC
31697: ST_TO_ADDR
31698: LD_EXP 96
31702: PUSH
31703: LD_VAR 0 5
31707: ARRAY
31708: PUSH
31709: FOR_TO
31710: IFFALSE 31751
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
31712: LD_EXP 96
31716: PUSH
31717: LD_VAR 0 5
31721: ARRAY
31722: PUSH
31723: LD_VAR 0 4
31727: ARRAY
31728: PUSH
31729: LD_INT 1
31731: ARRAY
31732: PUSH
31733: LD_VAR 0 2
31737: EQUAL
31738: IFFALSE 31749
// KillUnit ( vehicle ) ;
31740: LD_VAR 0 2
31744: PPUSH
31745: CALL_OW 66
31749: GO 31709
31751: POP
31752: POP
// end ;
31753: LD_VAR 0 3
31757: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
31758: LD_EXP 100
31762: NOT
31763: IFFALSE 31798
31765: GO 31767
31767: DISABLE
// begin initMiner := true ;
31768: LD_ADDR_EXP 100
31772: PUSH
31773: LD_INT 1
31775: ST_TO_ADDR
// minersList := [ ] ;
31776: LD_ADDR_EXP 101
31780: PUSH
31781: EMPTY
31782: ST_TO_ADDR
// minerMinesList := [ ] ;
31783: LD_ADDR_EXP 102
31787: PUSH
31788: EMPTY
31789: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
31790: LD_ADDR_EXP 103
31794: PUSH
31795: LD_INT 5
31797: ST_TO_ADDR
// end ;
31798: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
31799: LD_EXP 100
31803: PUSH
31804: LD_INT 34
31806: PUSH
31807: LD_INT 81
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PPUSH
31814: CALL_OW 69
31818: AND
31819: IFFALSE 32280
31821: GO 31823
31823: DISABLE
31824: LD_INT 0
31826: PPUSH
31827: PPUSH
31828: PPUSH
31829: PPUSH
// begin enable ;
31830: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
31831: LD_ADDR_VAR 0 1
31835: PUSH
31836: LD_INT 34
31838: PUSH
31839: LD_INT 81
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PPUSH
31846: CALL_OW 69
31850: PUSH
31851: FOR_IN
31852: IFFALSE 31924
// begin if not i in minersList then
31854: LD_VAR 0 1
31858: PUSH
31859: LD_EXP 101
31863: IN
31864: NOT
31865: IFFALSE 31922
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
31867: LD_ADDR_EXP 101
31871: PUSH
31872: LD_EXP 101
31876: PPUSH
31877: LD_EXP 101
31881: PUSH
31882: LD_INT 1
31884: PLUS
31885: PPUSH
31886: LD_VAR 0 1
31890: PPUSH
31891: CALL_OW 1
31895: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31896: LD_ADDR_EXP 102
31900: PUSH
31901: LD_EXP 102
31905: PPUSH
31906: LD_EXP 102
31910: PUSH
31911: LD_INT 1
31913: PLUS
31914: PPUSH
31915: EMPTY
31916: PPUSH
31917: CALL_OW 1
31921: ST_TO_ADDR
// end end ;
31922: GO 31851
31924: POP
31925: POP
// for i := minerMinesList downto 1 do
31926: LD_ADDR_VAR 0 1
31930: PUSH
31931: DOUBLE
31932: LD_EXP 102
31936: INC
31937: ST_TO_ADDR
31938: LD_INT 1
31940: PUSH
31941: FOR_DOWNTO
31942: IFFALSE 32278
// begin if IsLive ( minersList [ i ] ) then
31944: LD_EXP 101
31948: PUSH
31949: LD_VAR 0 1
31953: ARRAY
31954: PPUSH
31955: CALL_OW 300
31959: IFFALSE 31987
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31961: LD_EXP 101
31965: PUSH
31966: LD_VAR 0 1
31970: ARRAY
31971: PPUSH
31972: LD_EXP 102
31976: PUSH
31977: LD_VAR 0 1
31981: ARRAY
31982: PPUSH
31983: CALL_OW 505
// if not minerMinesList [ i ] then
31987: LD_EXP 102
31991: PUSH
31992: LD_VAR 0 1
31996: ARRAY
31997: NOT
31998: IFFALSE 32002
// continue ;
32000: GO 31941
// for j := minerMinesList [ i ] downto 1 do
32002: LD_ADDR_VAR 0 2
32006: PUSH
32007: DOUBLE
32008: LD_EXP 102
32012: PUSH
32013: LD_VAR 0 1
32017: ARRAY
32018: INC
32019: ST_TO_ADDR
32020: LD_INT 1
32022: PUSH
32023: FOR_DOWNTO
32024: IFFALSE 32274
// begin side := GetSide ( minersList [ i ] ) ;
32026: LD_ADDR_VAR 0 3
32030: PUSH
32031: LD_EXP 101
32035: PUSH
32036: LD_VAR 0 1
32040: ARRAY
32041: PPUSH
32042: CALL_OW 255
32046: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
32047: LD_ADDR_VAR 0 4
32051: PUSH
32052: LD_EXP 102
32056: PUSH
32057: LD_VAR 0 1
32061: ARRAY
32062: PUSH
32063: LD_VAR 0 2
32067: ARRAY
32068: PUSH
32069: LD_INT 1
32071: ARRAY
32072: PPUSH
32073: LD_EXP 102
32077: PUSH
32078: LD_VAR 0 1
32082: ARRAY
32083: PUSH
32084: LD_VAR 0 2
32088: ARRAY
32089: PUSH
32090: LD_INT 2
32092: ARRAY
32093: PPUSH
32094: CALL_OW 428
32098: ST_TO_ADDR
// if not tmp then
32099: LD_VAR 0 4
32103: NOT
32104: IFFALSE 32108
// continue ;
32106: GO 32023
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
32108: LD_VAR 0 4
32112: PUSH
32113: LD_INT 81
32115: PUSH
32116: LD_VAR 0 3
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PPUSH
32125: CALL_OW 69
32129: IN
32130: PUSH
32131: LD_EXP 102
32135: PUSH
32136: LD_VAR 0 1
32140: ARRAY
32141: PUSH
32142: LD_VAR 0 2
32146: ARRAY
32147: PUSH
32148: LD_INT 1
32150: ARRAY
32151: PPUSH
32152: LD_EXP 102
32156: PUSH
32157: LD_VAR 0 1
32161: ARRAY
32162: PUSH
32163: LD_VAR 0 2
32167: ARRAY
32168: PUSH
32169: LD_INT 2
32171: ARRAY
32172: PPUSH
32173: CALL_OW 458
32177: AND
32178: IFFALSE 32272
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
32180: LD_EXP 102
32184: PUSH
32185: LD_VAR 0 1
32189: ARRAY
32190: PUSH
32191: LD_VAR 0 2
32195: ARRAY
32196: PUSH
32197: LD_INT 1
32199: ARRAY
32200: PPUSH
32201: LD_EXP 102
32205: PUSH
32206: LD_VAR 0 1
32210: ARRAY
32211: PUSH
32212: LD_VAR 0 2
32216: ARRAY
32217: PUSH
32218: LD_INT 2
32220: ARRAY
32221: PPUSH
32222: LD_VAR 0 3
32226: PPUSH
32227: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
32231: LD_ADDR_EXP 102
32235: PUSH
32236: LD_EXP 102
32240: PPUSH
32241: LD_VAR 0 1
32245: PPUSH
32246: LD_EXP 102
32250: PUSH
32251: LD_VAR 0 1
32255: ARRAY
32256: PPUSH
32257: LD_VAR 0 2
32261: PPUSH
32262: CALL_OW 3
32266: PPUSH
32267: CALL_OW 1
32271: ST_TO_ADDR
// end ; end ;
32272: GO 32023
32274: POP
32275: POP
// end ;
32276: GO 31941
32278: POP
32279: POP
// end ;
32280: PPOPN 4
32282: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
32283: LD_INT 0
32285: PPUSH
32286: PPUSH
// result := false ;
32287: LD_ADDR_VAR 0 4
32291: PUSH
32292: LD_INT 0
32294: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
32295: LD_VAR 0 1
32299: PPUSH
32300: CALL_OW 264
32304: PUSH
32305: LD_INT 81
32307: EQUAL
32308: NOT
32309: IFFALSE 32313
// exit ;
32311: GO 32553
// index := GetElementIndex ( minersList , unit ) ;
32313: LD_ADDR_VAR 0 5
32317: PUSH
32318: LD_EXP 101
32322: PPUSH
32323: LD_VAR 0 1
32327: PPUSH
32328: CALL 38674 0 2
32332: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
32333: LD_EXP 102
32337: PUSH
32338: LD_VAR 0 5
32342: ARRAY
32343: PUSH
32344: LD_EXP 103
32348: GREATEREQUAL
32349: IFFALSE 32353
// exit ;
32351: GO 32553
// ComMoveXY ( unit , x , y ) ;
32353: LD_VAR 0 1
32357: PPUSH
32358: LD_VAR 0 2
32362: PPUSH
32363: LD_VAR 0 3
32367: PPUSH
32368: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32372: LD_INT 35
32374: PPUSH
32375: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
32379: LD_VAR 0 1
32383: PPUSH
32384: LD_VAR 0 2
32388: PPUSH
32389: LD_VAR 0 3
32393: PPUSH
32394: CALL 70576 0 3
32398: NOT
32399: PUSH
32400: LD_VAR 0 1
32404: PPUSH
32405: CALL_OW 314
32409: AND
32410: IFFALSE 32414
// exit ;
32412: GO 32553
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
32414: LD_VAR 0 2
32418: PPUSH
32419: LD_VAR 0 3
32423: PPUSH
32424: CALL_OW 428
32428: PUSH
32429: LD_VAR 0 1
32433: EQUAL
32434: PUSH
32435: LD_VAR 0 1
32439: PPUSH
32440: CALL_OW 314
32444: NOT
32445: AND
32446: IFFALSE 32372
// PlaySoundXY ( x , y , PlantMine ) ;
32448: LD_VAR 0 2
32452: PPUSH
32453: LD_VAR 0 3
32457: PPUSH
32458: LD_STRING PlantMine
32460: PPUSH
32461: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
32465: LD_VAR 0 2
32469: PPUSH
32470: LD_VAR 0 3
32474: PPUSH
32475: LD_VAR 0 1
32479: PPUSH
32480: CALL_OW 255
32484: PPUSH
32485: LD_INT 0
32487: PPUSH
32488: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
32492: LD_ADDR_EXP 102
32496: PUSH
32497: LD_EXP 102
32501: PPUSH
32502: LD_VAR 0 5
32506: PUSH
32507: LD_EXP 102
32511: PUSH
32512: LD_VAR 0 5
32516: ARRAY
32517: PUSH
32518: LD_INT 1
32520: PLUS
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PPUSH
32526: LD_VAR 0 2
32530: PUSH
32531: LD_VAR 0 3
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PPUSH
32540: CALL 38889 0 3
32544: ST_TO_ADDR
// result := true ;
32545: LD_ADDR_VAR 0 4
32549: PUSH
32550: LD_INT 1
32552: ST_TO_ADDR
// end ;
32553: LD_VAR 0 4
32557: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
32558: LD_INT 0
32560: PPUSH
32561: PPUSH
32562: PPUSH
// if not unit in minersList then
32563: LD_VAR 0 1
32567: PUSH
32568: LD_EXP 101
32572: IN
32573: NOT
32574: IFFALSE 32578
// exit ;
32576: GO 32970
// index := GetElementIndex ( minersList , unit ) ;
32578: LD_ADDR_VAR 0 6
32582: PUSH
32583: LD_EXP 101
32587: PPUSH
32588: LD_VAR 0 1
32592: PPUSH
32593: CALL 38674 0 2
32597: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
32598: LD_ADDR_VAR 0 5
32602: PUSH
32603: DOUBLE
32604: LD_EXP 102
32608: PUSH
32609: LD_VAR 0 6
32613: ARRAY
32614: INC
32615: ST_TO_ADDR
32616: LD_INT 1
32618: PUSH
32619: FOR_DOWNTO
32620: IFFALSE 32781
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
32622: LD_EXP 102
32626: PUSH
32627: LD_VAR 0 6
32631: ARRAY
32632: PUSH
32633: LD_VAR 0 5
32637: ARRAY
32638: PUSH
32639: LD_INT 1
32641: ARRAY
32642: PUSH
32643: LD_VAR 0 2
32647: EQUAL
32648: PUSH
32649: LD_EXP 102
32653: PUSH
32654: LD_VAR 0 6
32658: ARRAY
32659: PUSH
32660: LD_VAR 0 5
32664: ARRAY
32665: PUSH
32666: LD_INT 2
32668: ARRAY
32669: PUSH
32670: LD_VAR 0 3
32674: EQUAL
32675: AND
32676: IFFALSE 32779
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32678: LD_EXP 102
32682: PUSH
32683: LD_VAR 0 6
32687: ARRAY
32688: PUSH
32689: LD_VAR 0 5
32693: ARRAY
32694: PUSH
32695: LD_INT 1
32697: ARRAY
32698: PPUSH
32699: LD_EXP 102
32703: PUSH
32704: LD_VAR 0 6
32708: ARRAY
32709: PUSH
32710: LD_VAR 0 5
32714: ARRAY
32715: PUSH
32716: LD_INT 2
32718: ARRAY
32719: PPUSH
32720: LD_VAR 0 1
32724: PPUSH
32725: CALL_OW 255
32729: PPUSH
32730: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32734: LD_ADDR_EXP 102
32738: PUSH
32739: LD_EXP 102
32743: PPUSH
32744: LD_VAR 0 6
32748: PPUSH
32749: LD_EXP 102
32753: PUSH
32754: LD_VAR 0 6
32758: ARRAY
32759: PPUSH
32760: LD_VAR 0 5
32764: PPUSH
32765: CALL_OW 3
32769: PPUSH
32770: CALL_OW 1
32774: ST_TO_ADDR
// exit ;
32775: POP
32776: POP
32777: GO 32970
// end ; end ;
32779: GO 32619
32781: POP
32782: POP
// for i := minerMinesList [ index ] downto 1 do
32783: LD_ADDR_VAR 0 5
32787: PUSH
32788: DOUBLE
32789: LD_EXP 102
32793: PUSH
32794: LD_VAR 0 6
32798: ARRAY
32799: INC
32800: ST_TO_ADDR
32801: LD_INT 1
32803: PUSH
32804: FOR_DOWNTO
32805: IFFALSE 32968
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
32807: LD_EXP 102
32811: PUSH
32812: LD_VAR 0 6
32816: ARRAY
32817: PUSH
32818: LD_VAR 0 5
32822: ARRAY
32823: PUSH
32824: LD_INT 1
32826: ARRAY
32827: PPUSH
32828: LD_EXP 102
32832: PUSH
32833: LD_VAR 0 6
32837: ARRAY
32838: PUSH
32839: LD_VAR 0 5
32843: ARRAY
32844: PUSH
32845: LD_INT 2
32847: ARRAY
32848: PPUSH
32849: LD_VAR 0 2
32853: PPUSH
32854: LD_VAR 0 3
32858: PPUSH
32859: CALL_OW 298
32863: PUSH
32864: LD_INT 6
32866: LESS
32867: IFFALSE 32966
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32869: LD_EXP 102
32873: PUSH
32874: LD_VAR 0 6
32878: ARRAY
32879: PUSH
32880: LD_VAR 0 5
32884: ARRAY
32885: PUSH
32886: LD_INT 1
32888: ARRAY
32889: PPUSH
32890: LD_EXP 102
32894: PUSH
32895: LD_VAR 0 6
32899: ARRAY
32900: PUSH
32901: LD_VAR 0 5
32905: ARRAY
32906: PUSH
32907: LD_INT 2
32909: ARRAY
32910: PPUSH
32911: LD_VAR 0 1
32915: PPUSH
32916: CALL_OW 255
32920: PPUSH
32921: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32925: LD_ADDR_EXP 102
32929: PUSH
32930: LD_EXP 102
32934: PPUSH
32935: LD_VAR 0 6
32939: PPUSH
32940: LD_EXP 102
32944: PUSH
32945: LD_VAR 0 6
32949: ARRAY
32950: PPUSH
32951: LD_VAR 0 5
32955: PPUSH
32956: CALL_OW 3
32960: PPUSH
32961: CALL_OW 1
32965: ST_TO_ADDR
// end ; end ;
32966: GO 32804
32968: POP
32969: POP
// end ;
32970: LD_VAR 0 4
32974: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32975: LD_INT 0
32977: PPUSH
32978: PPUSH
32979: PPUSH
32980: PPUSH
32981: PPUSH
32982: PPUSH
32983: PPUSH
32984: PPUSH
32985: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32986: LD_VAR 0 1
32990: PPUSH
32991: CALL_OW 264
32995: PUSH
32996: LD_INT 81
32998: EQUAL
32999: NOT
33000: PUSH
33001: LD_VAR 0 1
33005: PUSH
33006: LD_EXP 101
33010: IN
33011: NOT
33012: OR
33013: IFFALSE 33017
// exit ;
33015: GO 33339
// index := GetElementIndex ( minersList , unit ) ;
33017: LD_ADDR_VAR 0 6
33021: PUSH
33022: LD_EXP 101
33026: PPUSH
33027: LD_VAR 0 1
33031: PPUSH
33032: CALL 38674 0 2
33036: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
33037: LD_ADDR_VAR 0 8
33041: PUSH
33042: LD_EXP 103
33046: PUSH
33047: LD_EXP 102
33051: PUSH
33052: LD_VAR 0 6
33056: ARRAY
33057: MINUS
33058: ST_TO_ADDR
// if not minesFreeAmount then
33059: LD_VAR 0 8
33063: NOT
33064: IFFALSE 33068
// exit ;
33066: GO 33339
// tmp := [ ] ;
33068: LD_ADDR_VAR 0 7
33072: PUSH
33073: EMPTY
33074: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
33075: LD_ADDR_VAR 0 5
33079: PUSH
33080: DOUBLE
33081: LD_INT 1
33083: DEC
33084: ST_TO_ADDR
33085: LD_VAR 0 8
33089: PUSH
33090: FOR_TO
33091: IFFALSE 33286
// begin _d := rand ( 0 , 5 ) ;
33093: LD_ADDR_VAR 0 11
33097: PUSH
33098: LD_INT 0
33100: PPUSH
33101: LD_INT 5
33103: PPUSH
33104: CALL_OW 12
33108: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
33109: LD_ADDR_VAR 0 12
33113: PUSH
33114: LD_INT 2
33116: PPUSH
33117: LD_INT 6
33119: PPUSH
33120: CALL_OW 12
33124: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
33125: LD_ADDR_VAR 0 9
33129: PUSH
33130: LD_VAR 0 2
33134: PPUSH
33135: LD_VAR 0 11
33139: PPUSH
33140: LD_VAR 0 12
33144: PPUSH
33145: CALL_OW 272
33149: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
33150: LD_ADDR_VAR 0 10
33154: PUSH
33155: LD_VAR 0 3
33159: PPUSH
33160: LD_VAR 0 11
33164: PPUSH
33165: LD_VAR 0 12
33169: PPUSH
33170: CALL_OW 273
33174: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
33175: LD_VAR 0 9
33179: PPUSH
33180: LD_VAR 0 10
33184: PPUSH
33185: CALL_OW 488
33189: PUSH
33190: LD_VAR 0 9
33194: PUSH
33195: LD_VAR 0 10
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_VAR 0 7
33208: IN
33209: NOT
33210: AND
33211: PUSH
33212: LD_VAR 0 9
33216: PPUSH
33217: LD_VAR 0 10
33221: PPUSH
33222: CALL_OW 458
33226: NOT
33227: AND
33228: IFFALSE 33270
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
33230: LD_ADDR_VAR 0 7
33234: PUSH
33235: LD_VAR 0 7
33239: PPUSH
33240: LD_VAR 0 7
33244: PUSH
33245: LD_INT 1
33247: PLUS
33248: PPUSH
33249: LD_VAR 0 9
33253: PUSH
33254: LD_VAR 0 10
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PPUSH
33263: CALL_OW 1
33267: ST_TO_ADDR
33268: GO 33284
// i := i - 1 ;
33270: LD_ADDR_VAR 0 5
33274: PUSH
33275: LD_VAR 0 5
33279: PUSH
33280: LD_INT 1
33282: MINUS
33283: ST_TO_ADDR
// end ;
33284: GO 33090
33286: POP
33287: POP
// for i in tmp do
33288: LD_ADDR_VAR 0 5
33292: PUSH
33293: LD_VAR 0 7
33297: PUSH
33298: FOR_IN
33299: IFFALSE 33337
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
33301: LD_VAR 0 1
33305: PPUSH
33306: LD_VAR 0 5
33310: PUSH
33311: LD_INT 1
33313: ARRAY
33314: PPUSH
33315: LD_VAR 0 5
33319: PUSH
33320: LD_INT 2
33322: ARRAY
33323: PPUSH
33324: CALL 32283 0 3
33328: NOT
33329: IFFALSE 33335
// exit ;
33331: POP
33332: POP
33333: GO 33339
33335: GO 33298
33337: POP
33338: POP
// end ;
33339: LD_VAR 0 4
33343: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
33344: LD_INT 0
33346: PPUSH
33347: PPUSH
33348: PPUSH
33349: PPUSH
33350: PPUSH
33351: PPUSH
33352: PPUSH
33353: PPUSH
33354: PPUSH
// if GetClass ( unit ) <> class_sniper then
33355: LD_VAR 0 1
33359: PPUSH
33360: CALL_OW 257
33364: PUSH
33365: LD_INT 5
33367: NONEQUAL
33368: IFFALSE 33372
// exit ;
33370: GO 33838
// dist := 8 ;
33372: LD_ADDR_VAR 0 5
33376: PUSH
33377: LD_INT 8
33379: ST_TO_ADDR
// viewRange := 12 ;
33380: LD_ADDR_VAR 0 8
33384: PUSH
33385: LD_INT 12
33387: ST_TO_ADDR
// side := GetSide ( unit ) ;
33388: LD_ADDR_VAR 0 6
33392: PUSH
33393: LD_VAR 0 1
33397: PPUSH
33398: CALL_OW 255
33402: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
33403: LD_INT 61
33405: PPUSH
33406: LD_VAR 0 6
33410: PPUSH
33411: CALL_OW 321
33415: PUSH
33416: LD_INT 2
33418: EQUAL
33419: IFFALSE 33429
// viewRange := 16 ;
33421: LD_ADDR_VAR 0 8
33425: PUSH
33426: LD_INT 16
33428: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
33429: LD_VAR 0 1
33433: PPUSH
33434: LD_VAR 0 2
33438: PPUSH
33439: LD_VAR 0 3
33443: PPUSH
33444: CALL_OW 297
33448: PUSH
33449: LD_VAR 0 5
33453: GREATER
33454: IFFALSE 33533
// begin ComMoveXY ( unit , x , y ) ;
33456: LD_VAR 0 1
33460: PPUSH
33461: LD_VAR 0 2
33465: PPUSH
33466: LD_VAR 0 3
33470: PPUSH
33471: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33475: LD_INT 35
33477: PPUSH
33478: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
33482: LD_VAR 0 1
33486: PPUSH
33487: LD_VAR 0 2
33491: PPUSH
33492: LD_VAR 0 3
33496: PPUSH
33497: CALL 70576 0 3
33501: NOT
33502: IFFALSE 33506
// exit ;
33504: GO 33838
// until GetDistUnitXY ( unit , x , y ) < dist ;
33506: LD_VAR 0 1
33510: PPUSH
33511: LD_VAR 0 2
33515: PPUSH
33516: LD_VAR 0 3
33520: PPUSH
33521: CALL_OW 297
33525: PUSH
33526: LD_VAR 0 5
33530: LESS
33531: IFFALSE 33475
// end ; ComTurnXY ( unit , x , y ) ;
33533: LD_VAR 0 1
33537: PPUSH
33538: LD_VAR 0 2
33542: PPUSH
33543: LD_VAR 0 3
33547: PPUSH
33548: CALL_OW 118
// repeat if Multiplayer then
33552: LD_OWVAR 4
33556: IFFALSE 33567
// wait ( 35 ) else
33558: LD_INT 35
33560: PPUSH
33561: CALL_OW 67
33565: GO 33574
// wait ( 5 ) ;
33567: LD_INT 5
33569: PPUSH
33570: CALL_OW 67
// _d := GetDir ( unit ) ;
33574: LD_ADDR_VAR 0 11
33578: PUSH
33579: LD_VAR 0 1
33583: PPUSH
33584: CALL_OW 254
33588: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
33589: LD_ADDR_VAR 0 7
33593: PUSH
33594: LD_VAR 0 1
33598: PPUSH
33599: CALL_OW 250
33603: PPUSH
33604: LD_VAR 0 1
33608: PPUSH
33609: CALL_OW 251
33613: PPUSH
33614: LD_VAR 0 2
33618: PPUSH
33619: LD_VAR 0 3
33623: PPUSH
33624: CALL 73184 0 4
33628: ST_TO_ADDR
// until dir = _d ;
33629: LD_VAR 0 7
33633: PUSH
33634: LD_VAR 0 11
33638: EQUAL
33639: IFFALSE 33552
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
33641: LD_ADDR_VAR 0 9
33645: PUSH
33646: LD_VAR 0 1
33650: PPUSH
33651: CALL_OW 250
33655: PPUSH
33656: LD_VAR 0 7
33660: PPUSH
33661: LD_VAR 0 5
33665: PPUSH
33666: CALL_OW 272
33670: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
33671: LD_ADDR_VAR 0 10
33675: PUSH
33676: LD_VAR 0 1
33680: PPUSH
33681: CALL_OW 251
33685: PPUSH
33686: LD_VAR 0 7
33690: PPUSH
33691: LD_VAR 0 5
33695: PPUSH
33696: CALL_OW 273
33700: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33701: LD_VAR 0 9
33705: PPUSH
33706: LD_VAR 0 10
33710: PPUSH
33711: CALL_OW 488
33715: NOT
33716: IFFALSE 33720
// exit ;
33718: GO 33838
// ComAnimCustom ( unit , 1 ) ;
33720: LD_VAR 0 1
33724: PPUSH
33725: LD_INT 1
33727: PPUSH
33728: CALL_OW 592
// p := 0 ;
33732: LD_ADDR_VAR 0 12
33736: PUSH
33737: LD_INT 0
33739: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
33740: LD_VAR 0 9
33744: PPUSH
33745: LD_VAR 0 10
33749: PPUSH
33750: LD_VAR 0 6
33754: PPUSH
33755: LD_VAR 0 8
33759: PPUSH
33760: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
33764: LD_INT 35
33766: PPUSH
33767: CALL_OW 67
// p := Inc ( p ) ;
33771: LD_ADDR_VAR 0 12
33775: PUSH
33776: LD_VAR 0 12
33780: PPUSH
33781: CALL 73140 0 1
33785: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
33786: LD_VAR 0 12
33790: PUSH
33791: LD_INT 3
33793: EQUAL
33794: PUSH
33795: LD_VAR 0 1
33799: PPUSH
33800: CALL_OW 302
33804: NOT
33805: OR
33806: PUSH
33807: LD_VAR 0 1
33811: PPUSH
33812: CALL_OW 301
33816: OR
33817: IFFALSE 33764
// RemoveSeeing ( _x , _y , side ) ;
33819: LD_VAR 0 9
33823: PPUSH
33824: LD_VAR 0 10
33828: PPUSH
33829: LD_VAR 0 6
33833: PPUSH
33834: CALL_OW 331
// end ; end_of_file
33838: LD_VAR 0 4
33842: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33843: LD_INT 0
33845: PPUSH
33846: PPUSH
// if exist_mode then
33847: LD_VAR 0 2
33851: IFFALSE 33897
// begin unit := CreateCharacter ( prefix & ident ) ;
33853: LD_ADDR_VAR 0 5
33857: PUSH
33858: LD_VAR 0 3
33862: PUSH
33863: LD_VAR 0 1
33867: STR
33868: PPUSH
33869: CALL_OW 34
33873: ST_TO_ADDR
// if unit then
33874: LD_VAR 0 5
33878: IFFALSE 33895
// DeleteCharacters ( prefix & ident ) ;
33880: LD_VAR 0 3
33884: PUSH
33885: LD_VAR 0 1
33889: STR
33890: PPUSH
33891: CALL_OW 40
// end else
33895: GO 33912
// unit := NewCharacter ( ident ) ;
33897: LD_ADDR_VAR 0 5
33901: PUSH
33902: LD_VAR 0 1
33906: PPUSH
33907: CALL_OW 25
33911: ST_TO_ADDR
// result := unit ;
33912: LD_ADDR_VAR 0 4
33916: PUSH
33917: LD_VAR 0 5
33921: ST_TO_ADDR
// end ;
33922: LD_VAR 0 4
33926: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
33927: LD_INT 0
33929: PPUSH
33930: PPUSH
// if exist_mode then
33931: LD_VAR 0 2
33935: IFFALSE 33960
// unit := CreateCharacter ( prefix & ident ) else
33937: LD_ADDR_VAR 0 5
33941: PUSH
33942: LD_VAR 0 3
33946: PUSH
33947: LD_VAR 0 1
33951: STR
33952: PPUSH
33953: CALL_OW 34
33957: ST_TO_ADDR
33958: GO 33975
// unit := NewCharacter ( ident ) ;
33960: LD_ADDR_VAR 0 5
33964: PUSH
33965: LD_VAR 0 1
33969: PPUSH
33970: CALL_OW 25
33974: ST_TO_ADDR
// result := unit ;
33975: LD_ADDR_VAR 0 4
33979: PUSH
33980: LD_VAR 0 5
33984: ST_TO_ADDR
// end ;
33985: LD_VAR 0 4
33989: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33990: LD_INT 0
33992: PPUSH
33993: PPUSH
// if not side or not nation then
33994: LD_VAR 0 1
33998: NOT
33999: PUSH
34000: LD_VAR 0 2
34004: NOT
34005: OR
34006: IFFALSE 34010
// exit ;
34008: GO 34778
// case nation of nation_american :
34010: LD_VAR 0 2
34014: PUSH
34015: LD_INT 1
34017: DOUBLE
34018: EQUAL
34019: IFTRUE 34023
34021: GO 34237
34023: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
34024: LD_ADDR_VAR 0 4
34028: PUSH
34029: LD_INT 35
34031: PUSH
34032: LD_INT 45
34034: PUSH
34035: LD_INT 46
34037: PUSH
34038: LD_INT 47
34040: PUSH
34041: LD_INT 82
34043: PUSH
34044: LD_INT 83
34046: PUSH
34047: LD_INT 84
34049: PUSH
34050: LD_INT 85
34052: PUSH
34053: LD_INT 86
34055: PUSH
34056: LD_INT 1
34058: PUSH
34059: LD_INT 2
34061: PUSH
34062: LD_INT 6
34064: PUSH
34065: LD_INT 15
34067: PUSH
34068: LD_INT 16
34070: PUSH
34071: LD_INT 7
34073: PUSH
34074: LD_INT 12
34076: PUSH
34077: LD_INT 13
34079: PUSH
34080: LD_INT 10
34082: PUSH
34083: LD_INT 14
34085: PUSH
34086: LD_INT 20
34088: PUSH
34089: LD_INT 21
34091: PUSH
34092: LD_INT 22
34094: PUSH
34095: LD_INT 25
34097: PUSH
34098: LD_INT 32
34100: PUSH
34101: LD_INT 27
34103: PUSH
34104: LD_INT 36
34106: PUSH
34107: LD_INT 69
34109: PUSH
34110: LD_INT 39
34112: PUSH
34113: LD_INT 34
34115: PUSH
34116: LD_INT 40
34118: PUSH
34119: LD_INT 48
34121: PUSH
34122: LD_INT 49
34124: PUSH
34125: LD_INT 50
34127: PUSH
34128: LD_INT 51
34130: PUSH
34131: LD_INT 52
34133: PUSH
34134: LD_INT 53
34136: PUSH
34137: LD_INT 54
34139: PUSH
34140: LD_INT 55
34142: PUSH
34143: LD_INT 56
34145: PUSH
34146: LD_INT 57
34148: PUSH
34149: LD_INT 58
34151: PUSH
34152: LD_INT 59
34154: PUSH
34155: LD_INT 60
34157: PUSH
34158: LD_INT 61
34160: PUSH
34161: LD_INT 62
34163: PUSH
34164: LD_INT 80
34166: PUSH
34167: LD_INT 82
34169: PUSH
34170: LD_INT 83
34172: PUSH
34173: LD_INT 84
34175: PUSH
34176: LD_INT 85
34178: PUSH
34179: LD_INT 86
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: ST_TO_ADDR
34235: GO 34702
34237: LD_INT 2
34239: DOUBLE
34240: EQUAL
34241: IFTRUE 34245
34243: GO 34471
34245: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
34246: LD_ADDR_VAR 0 4
34250: PUSH
34251: LD_INT 35
34253: PUSH
34254: LD_INT 45
34256: PUSH
34257: LD_INT 46
34259: PUSH
34260: LD_INT 47
34262: PUSH
34263: LD_INT 82
34265: PUSH
34266: LD_INT 83
34268: PUSH
34269: LD_INT 84
34271: PUSH
34272: LD_INT 85
34274: PUSH
34275: LD_INT 87
34277: PUSH
34278: LD_INT 70
34280: PUSH
34281: LD_INT 1
34283: PUSH
34284: LD_INT 11
34286: PUSH
34287: LD_INT 3
34289: PUSH
34290: LD_INT 4
34292: PUSH
34293: LD_INT 5
34295: PUSH
34296: LD_INT 6
34298: PUSH
34299: LD_INT 15
34301: PUSH
34302: LD_INT 18
34304: PUSH
34305: LD_INT 7
34307: PUSH
34308: LD_INT 17
34310: PUSH
34311: LD_INT 8
34313: PUSH
34314: LD_INT 20
34316: PUSH
34317: LD_INT 21
34319: PUSH
34320: LD_INT 22
34322: PUSH
34323: LD_INT 72
34325: PUSH
34326: LD_INT 26
34328: PUSH
34329: LD_INT 69
34331: PUSH
34332: LD_INT 39
34334: PUSH
34335: LD_INT 40
34337: PUSH
34338: LD_INT 41
34340: PUSH
34341: LD_INT 42
34343: PUSH
34344: LD_INT 43
34346: PUSH
34347: LD_INT 48
34349: PUSH
34350: LD_INT 49
34352: PUSH
34353: LD_INT 50
34355: PUSH
34356: LD_INT 51
34358: PUSH
34359: LD_INT 52
34361: PUSH
34362: LD_INT 53
34364: PUSH
34365: LD_INT 54
34367: PUSH
34368: LD_INT 55
34370: PUSH
34371: LD_INT 56
34373: PUSH
34374: LD_INT 60
34376: PUSH
34377: LD_INT 61
34379: PUSH
34380: LD_INT 62
34382: PUSH
34383: LD_INT 66
34385: PUSH
34386: LD_INT 67
34388: PUSH
34389: LD_INT 68
34391: PUSH
34392: LD_INT 81
34394: PUSH
34395: LD_INT 82
34397: PUSH
34398: LD_INT 83
34400: PUSH
34401: LD_INT 84
34403: PUSH
34404: LD_INT 85
34406: PUSH
34407: LD_INT 87
34409: PUSH
34410: LD_INT 88
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: ST_TO_ADDR
34469: GO 34702
34471: LD_INT 3
34473: DOUBLE
34474: EQUAL
34475: IFTRUE 34479
34477: GO 34701
34479: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34480: LD_ADDR_VAR 0 4
34484: PUSH
34485: LD_INT 46
34487: PUSH
34488: LD_INT 47
34490: PUSH
34491: LD_INT 1
34493: PUSH
34494: LD_INT 2
34496: PUSH
34497: LD_INT 82
34499: PUSH
34500: LD_INT 83
34502: PUSH
34503: LD_INT 84
34505: PUSH
34506: LD_INT 85
34508: PUSH
34509: LD_INT 86
34511: PUSH
34512: LD_INT 11
34514: PUSH
34515: LD_INT 9
34517: PUSH
34518: LD_INT 20
34520: PUSH
34521: LD_INT 19
34523: PUSH
34524: LD_INT 21
34526: PUSH
34527: LD_INT 24
34529: PUSH
34530: LD_INT 22
34532: PUSH
34533: LD_INT 25
34535: PUSH
34536: LD_INT 28
34538: PUSH
34539: LD_INT 29
34541: PUSH
34542: LD_INT 30
34544: PUSH
34545: LD_INT 31
34547: PUSH
34548: LD_INT 37
34550: PUSH
34551: LD_INT 38
34553: PUSH
34554: LD_INT 32
34556: PUSH
34557: LD_INT 27
34559: PUSH
34560: LD_INT 33
34562: PUSH
34563: LD_INT 69
34565: PUSH
34566: LD_INT 39
34568: PUSH
34569: LD_INT 34
34571: PUSH
34572: LD_INT 40
34574: PUSH
34575: LD_INT 71
34577: PUSH
34578: LD_INT 23
34580: PUSH
34581: LD_INT 44
34583: PUSH
34584: LD_INT 48
34586: PUSH
34587: LD_INT 49
34589: PUSH
34590: LD_INT 50
34592: PUSH
34593: LD_INT 51
34595: PUSH
34596: LD_INT 52
34598: PUSH
34599: LD_INT 53
34601: PUSH
34602: LD_INT 54
34604: PUSH
34605: LD_INT 55
34607: PUSH
34608: LD_INT 56
34610: PUSH
34611: LD_INT 57
34613: PUSH
34614: LD_INT 58
34616: PUSH
34617: LD_INT 59
34619: PUSH
34620: LD_INT 63
34622: PUSH
34623: LD_INT 64
34625: PUSH
34626: LD_INT 65
34628: PUSH
34629: LD_INT 82
34631: PUSH
34632: LD_INT 83
34634: PUSH
34635: LD_INT 84
34637: PUSH
34638: LD_INT 85
34640: PUSH
34641: LD_INT 86
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: ST_TO_ADDR
34699: GO 34702
34701: POP
// if state > - 1 and state < 3 then
34702: LD_VAR 0 3
34706: PUSH
34707: LD_INT 1
34709: NEG
34710: GREATER
34711: PUSH
34712: LD_VAR 0 3
34716: PUSH
34717: LD_INT 3
34719: LESS
34720: AND
34721: IFFALSE 34778
// for i in result do
34723: LD_ADDR_VAR 0 5
34727: PUSH
34728: LD_VAR 0 4
34732: PUSH
34733: FOR_IN
34734: IFFALSE 34776
// if GetTech ( i , side ) <> state then
34736: LD_VAR 0 5
34740: PPUSH
34741: LD_VAR 0 1
34745: PPUSH
34746: CALL_OW 321
34750: PUSH
34751: LD_VAR 0 3
34755: NONEQUAL
34756: IFFALSE 34774
// result := result diff i ;
34758: LD_ADDR_VAR 0 4
34762: PUSH
34763: LD_VAR 0 4
34767: PUSH
34768: LD_VAR 0 5
34772: DIFF
34773: ST_TO_ADDR
34774: GO 34733
34776: POP
34777: POP
// end ;
34778: LD_VAR 0 4
34782: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34783: LD_INT 0
34785: PPUSH
34786: PPUSH
34787: PPUSH
// result := true ;
34788: LD_ADDR_VAR 0 3
34792: PUSH
34793: LD_INT 1
34795: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34796: LD_ADDR_VAR 0 5
34800: PUSH
34801: LD_VAR 0 2
34805: PPUSH
34806: CALL_OW 480
34810: ST_TO_ADDR
// if not tmp then
34811: LD_VAR 0 5
34815: NOT
34816: IFFALSE 34820
// exit ;
34818: GO 34869
// for i in tmp do
34820: LD_ADDR_VAR 0 4
34824: PUSH
34825: LD_VAR 0 5
34829: PUSH
34830: FOR_IN
34831: IFFALSE 34867
// if GetTech ( i , side ) <> state_researched then
34833: LD_VAR 0 4
34837: PPUSH
34838: LD_VAR 0 1
34842: PPUSH
34843: CALL_OW 321
34847: PUSH
34848: LD_INT 2
34850: NONEQUAL
34851: IFFALSE 34865
// begin result := false ;
34853: LD_ADDR_VAR 0 3
34857: PUSH
34858: LD_INT 0
34860: ST_TO_ADDR
// exit ;
34861: POP
34862: POP
34863: GO 34869
// end ;
34865: GO 34830
34867: POP
34868: POP
// end ;
34869: LD_VAR 0 3
34873: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34874: LD_INT 0
34876: PPUSH
34877: PPUSH
34878: PPUSH
34879: PPUSH
34880: PPUSH
34881: PPUSH
34882: PPUSH
34883: PPUSH
34884: PPUSH
34885: PPUSH
34886: PPUSH
34887: PPUSH
34888: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34889: LD_VAR 0 1
34893: NOT
34894: PUSH
34895: LD_VAR 0 1
34899: PPUSH
34900: CALL_OW 257
34904: PUSH
34905: LD_INT 9
34907: NONEQUAL
34908: OR
34909: IFFALSE 34913
// exit ;
34911: GO 35486
// side := GetSide ( unit ) ;
34913: LD_ADDR_VAR 0 9
34917: PUSH
34918: LD_VAR 0 1
34922: PPUSH
34923: CALL_OW 255
34927: ST_TO_ADDR
// tech_space := tech_spacanom ;
34928: LD_ADDR_VAR 0 12
34932: PUSH
34933: LD_INT 29
34935: ST_TO_ADDR
// tech_time := tech_taurad ;
34936: LD_ADDR_VAR 0 13
34940: PUSH
34941: LD_INT 28
34943: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34944: LD_ADDR_VAR 0 11
34948: PUSH
34949: LD_VAR 0 1
34953: PPUSH
34954: CALL_OW 310
34958: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34959: LD_VAR 0 11
34963: PPUSH
34964: CALL_OW 247
34968: PUSH
34969: LD_INT 2
34971: EQUAL
34972: IFFALSE 34976
// exit ;
34974: GO 35486
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34976: LD_ADDR_VAR 0 8
34980: PUSH
34981: LD_INT 81
34983: PUSH
34984: LD_VAR 0 9
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 3
34995: PUSH
34996: LD_INT 21
34998: PUSH
34999: LD_INT 3
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PPUSH
35014: CALL_OW 69
35018: ST_TO_ADDR
// if not tmp then
35019: LD_VAR 0 8
35023: NOT
35024: IFFALSE 35028
// exit ;
35026: GO 35486
// if in_unit then
35028: LD_VAR 0 11
35032: IFFALSE 35056
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35034: LD_ADDR_VAR 0 10
35038: PUSH
35039: LD_VAR 0 8
35043: PPUSH
35044: LD_VAR 0 11
35048: PPUSH
35049: CALL_OW 74
35053: ST_TO_ADDR
35054: GO 35076
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35056: LD_ADDR_VAR 0 10
35060: PUSH
35061: LD_VAR 0 8
35065: PPUSH
35066: LD_VAR 0 1
35070: PPUSH
35071: CALL_OW 74
35075: ST_TO_ADDR
// if not enemy then
35076: LD_VAR 0 10
35080: NOT
35081: IFFALSE 35085
// exit ;
35083: GO 35486
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35085: LD_VAR 0 11
35089: PUSH
35090: LD_VAR 0 11
35094: PPUSH
35095: LD_VAR 0 10
35099: PPUSH
35100: CALL_OW 296
35104: PUSH
35105: LD_INT 13
35107: GREATER
35108: AND
35109: PUSH
35110: LD_VAR 0 1
35114: PPUSH
35115: LD_VAR 0 10
35119: PPUSH
35120: CALL_OW 296
35124: PUSH
35125: LD_INT 12
35127: GREATER
35128: OR
35129: IFFALSE 35133
// exit ;
35131: GO 35486
// missile := [ 1 ] ;
35133: LD_ADDR_VAR 0 14
35137: PUSH
35138: LD_INT 1
35140: PUSH
35141: EMPTY
35142: LIST
35143: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35144: LD_VAR 0 9
35148: PPUSH
35149: LD_VAR 0 12
35153: PPUSH
35154: CALL_OW 325
35158: IFFALSE 35187
// missile := Replace ( missile , missile + 1 , 2 ) ;
35160: LD_ADDR_VAR 0 14
35164: PUSH
35165: LD_VAR 0 14
35169: PPUSH
35170: LD_VAR 0 14
35174: PUSH
35175: LD_INT 1
35177: PLUS
35178: PPUSH
35179: LD_INT 2
35181: PPUSH
35182: CALL_OW 1
35186: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
35187: LD_VAR 0 9
35191: PPUSH
35192: LD_VAR 0 13
35196: PPUSH
35197: CALL_OW 325
35201: PUSH
35202: LD_VAR 0 10
35206: PPUSH
35207: CALL_OW 255
35211: PPUSH
35212: LD_VAR 0 13
35216: PPUSH
35217: CALL_OW 325
35221: NOT
35222: AND
35223: IFFALSE 35252
// missile := Replace ( missile , missile + 1 , 3 ) ;
35225: LD_ADDR_VAR 0 14
35229: PUSH
35230: LD_VAR 0 14
35234: PPUSH
35235: LD_VAR 0 14
35239: PUSH
35240: LD_INT 1
35242: PLUS
35243: PPUSH
35244: LD_INT 3
35246: PPUSH
35247: CALL_OW 1
35251: ST_TO_ADDR
// if missile < 2 then
35252: LD_VAR 0 14
35256: PUSH
35257: LD_INT 2
35259: LESS
35260: IFFALSE 35264
// exit ;
35262: GO 35486
// x := GetX ( enemy ) ;
35264: LD_ADDR_VAR 0 4
35268: PUSH
35269: LD_VAR 0 10
35273: PPUSH
35274: CALL_OW 250
35278: ST_TO_ADDR
// y := GetY ( enemy ) ;
35279: LD_ADDR_VAR 0 5
35283: PUSH
35284: LD_VAR 0 10
35288: PPUSH
35289: CALL_OW 251
35293: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35294: LD_ADDR_VAR 0 6
35298: PUSH
35299: LD_VAR 0 4
35303: PUSH
35304: LD_INT 1
35306: NEG
35307: PPUSH
35308: LD_INT 1
35310: PPUSH
35311: CALL_OW 12
35315: PLUS
35316: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35317: LD_ADDR_VAR 0 7
35321: PUSH
35322: LD_VAR 0 5
35326: PUSH
35327: LD_INT 1
35329: NEG
35330: PPUSH
35331: LD_INT 1
35333: PPUSH
35334: CALL_OW 12
35338: PLUS
35339: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35340: LD_VAR 0 6
35344: PPUSH
35345: LD_VAR 0 7
35349: PPUSH
35350: CALL_OW 488
35354: NOT
35355: IFFALSE 35377
// begin _x := x ;
35357: LD_ADDR_VAR 0 6
35361: PUSH
35362: LD_VAR 0 4
35366: ST_TO_ADDR
// _y := y ;
35367: LD_ADDR_VAR 0 7
35371: PUSH
35372: LD_VAR 0 5
35376: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35377: LD_ADDR_VAR 0 3
35381: PUSH
35382: LD_INT 1
35384: PPUSH
35385: LD_VAR 0 14
35389: PPUSH
35390: CALL_OW 12
35394: ST_TO_ADDR
// case i of 1 :
35395: LD_VAR 0 3
35399: PUSH
35400: LD_INT 1
35402: DOUBLE
35403: EQUAL
35404: IFTRUE 35408
35406: GO 35425
35408: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35409: LD_VAR 0 1
35413: PPUSH
35414: LD_VAR 0 10
35418: PPUSH
35419: CALL_OW 115
35423: GO 35486
35425: LD_INT 2
35427: DOUBLE
35428: EQUAL
35429: IFTRUE 35433
35431: GO 35455
35433: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35434: LD_VAR 0 1
35438: PPUSH
35439: LD_VAR 0 6
35443: PPUSH
35444: LD_VAR 0 7
35448: PPUSH
35449: CALL_OW 153
35453: GO 35486
35455: LD_INT 3
35457: DOUBLE
35458: EQUAL
35459: IFTRUE 35463
35461: GO 35485
35463: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35464: LD_VAR 0 1
35468: PPUSH
35469: LD_VAR 0 6
35473: PPUSH
35474: LD_VAR 0 7
35478: PPUSH
35479: CALL_OW 154
35483: GO 35486
35485: POP
// end ;
35486: LD_VAR 0 2
35490: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35491: LD_INT 0
35493: PPUSH
35494: PPUSH
35495: PPUSH
35496: PPUSH
35497: PPUSH
35498: PPUSH
// if not unit or not building then
35499: LD_VAR 0 1
35503: NOT
35504: PUSH
35505: LD_VAR 0 2
35509: NOT
35510: OR
35511: IFFALSE 35515
// exit ;
35513: GO 35673
// x := GetX ( building ) ;
35515: LD_ADDR_VAR 0 5
35519: PUSH
35520: LD_VAR 0 2
35524: PPUSH
35525: CALL_OW 250
35529: ST_TO_ADDR
// y := GetY ( building ) ;
35530: LD_ADDR_VAR 0 6
35534: PUSH
35535: LD_VAR 0 2
35539: PPUSH
35540: CALL_OW 251
35544: ST_TO_ADDR
// for i := 0 to 5 do
35545: LD_ADDR_VAR 0 4
35549: PUSH
35550: DOUBLE
35551: LD_INT 0
35553: DEC
35554: ST_TO_ADDR
35555: LD_INT 5
35557: PUSH
35558: FOR_TO
35559: IFFALSE 35671
// begin _x := ShiftX ( x , i , 3 ) ;
35561: LD_ADDR_VAR 0 7
35565: PUSH
35566: LD_VAR 0 5
35570: PPUSH
35571: LD_VAR 0 4
35575: PPUSH
35576: LD_INT 3
35578: PPUSH
35579: CALL_OW 272
35583: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35584: LD_ADDR_VAR 0 8
35588: PUSH
35589: LD_VAR 0 6
35593: PPUSH
35594: LD_VAR 0 4
35598: PPUSH
35599: LD_INT 3
35601: PPUSH
35602: CALL_OW 273
35606: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35607: LD_VAR 0 7
35611: PPUSH
35612: LD_VAR 0 8
35616: PPUSH
35617: CALL_OW 488
35621: NOT
35622: IFFALSE 35626
// continue ;
35624: GO 35558
// if HexInfo ( _x , _y ) = 0 then
35626: LD_VAR 0 7
35630: PPUSH
35631: LD_VAR 0 8
35635: PPUSH
35636: CALL_OW 428
35640: PUSH
35641: LD_INT 0
35643: EQUAL
35644: IFFALSE 35669
// begin ComMoveXY ( unit , _x , _y ) ;
35646: LD_VAR 0 1
35650: PPUSH
35651: LD_VAR 0 7
35655: PPUSH
35656: LD_VAR 0 8
35660: PPUSH
35661: CALL_OW 111
// exit ;
35665: POP
35666: POP
35667: GO 35673
// end ; end ;
35669: GO 35558
35671: POP
35672: POP
// end ;
35673: LD_VAR 0 3
35677: RET
// export function ScanBase ( side , base_area ) ; begin
35678: LD_INT 0
35680: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35681: LD_ADDR_VAR 0 3
35685: PUSH
35686: LD_VAR 0 2
35690: PPUSH
35691: LD_INT 81
35693: PUSH
35694: LD_VAR 0 1
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PPUSH
35703: CALL_OW 70
35707: ST_TO_ADDR
// end ;
35708: LD_VAR 0 3
35712: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35713: LD_INT 0
35715: PPUSH
35716: PPUSH
35717: PPUSH
35718: PPUSH
// result := false ;
35719: LD_ADDR_VAR 0 2
35723: PUSH
35724: LD_INT 0
35726: ST_TO_ADDR
// side := GetSide ( unit ) ;
35727: LD_ADDR_VAR 0 3
35731: PUSH
35732: LD_VAR 0 1
35736: PPUSH
35737: CALL_OW 255
35741: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35742: LD_ADDR_VAR 0 4
35746: PUSH
35747: LD_VAR 0 1
35751: PPUSH
35752: CALL_OW 248
35756: ST_TO_ADDR
// case nat of 1 :
35757: LD_VAR 0 4
35761: PUSH
35762: LD_INT 1
35764: DOUBLE
35765: EQUAL
35766: IFTRUE 35770
35768: GO 35781
35770: POP
// tech := tech_lassight ; 2 :
35771: LD_ADDR_VAR 0 5
35775: PUSH
35776: LD_INT 12
35778: ST_TO_ADDR
35779: GO 35820
35781: LD_INT 2
35783: DOUBLE
35784: EQUAL
35785: IFTRUE 35789
35787: GO 35800
35789: POP
// tech := tech_mortar ; 3 :
35790: LD_ADDR_VAR 0 5
35794: PUSH
35795: LD_INT 41
35797: ST_TO_ADDR
35798: GO 35820
35800: LD_INT 3
35802: DOUBLE
35803: EQUAL
35804: IFTRUE 35808
35806: GO 35819
35808: POP
// tech := tech_bazooka ; end ;
35809: LD_ADDR_VAR 0 5
35813: PUSH
35814: LD_INT 44
35816: ST_TO_ADDR
35817: GO 35820
35819: POP
// if Researched ( side , tech ) then
35820: LD_VAR 0 3
35824: PPUSH
35825: LD_VAR 0 5
35829: PPUSH
35830: CALL_OW 325
35834: IFFALSE 35861
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35836: LD_ADDR_VAR 0 2
35840: PUSH
35841: LD_INT 5
35843: PUSH
35844: LD_INT 8
35846: PUSH
35847: LD_INT 9
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: LIST
35854: PUSH
35855: LD_VAR 0 4
35859: ARRAY
35860: ST_TO_ADDR
// end ;
35861: LD_VAR 0 2
35865: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35866: LD_INT 0
35868: PPUSH
35869: PPUSH
35870: PPUSH
// if not mines then
35871: LD_VAR 0 2
35875: NOT
35876: IFFALSE 35880
// exit ;
35878: GO 36024
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35880: LD_ADDR_VAR 0 5
35884: PUSH
35885: LD_INT 81
35887: PUSH
35888: LD_VAR 0 1
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 3
35899: PUSH
35900: LD_INT 21
35902: PUSH
35903: LD_INT 3
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PPUSH
35918: CALL_OW 69
35922: ST_TO_ADDR
// for i in mines do
35923: LD_ADDR_VAR 0 4
35927: PUSH
35928: LD_VAR 0 2
35932: PUSH
35933: FOR_IN
35934: IFFALSE 36022
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35936: LD_VAR 0 4
35940: PUSH
35941: LD_INT 1
35943: ARRAY
35944: PPUSH
35945: LD_VAR 0 4
35949: PUSH
35950: LD_INT 2
35952: ARRAY
35953: PPUSH
35954: CALL_OW 458
35958: NOT
35959: IFFALSE 35963
// continue ;
35961: GO 35933
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35963: LD_VAR 0 4
35967: PUSH
35968: LD_INT 1
35970: ARRAY
35971: PPUSH
35972: LD_VAR 0 4
35976: PUSH
35977: LD_INT 2
35979: ARRAY
35980: PPUSH
35981: CALL_OW 428
35985: PUSH
35986: LD_VAR 0 5
35990: IN
35991: IFFALSE 36020
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35993: LD_VAR 0 4
35997: PUSH
35998: LD_INT 1
36000: ARRAY
36001: PPUSH
36002: LD_VAR 0 4
36006: PUSH
36007: LD_INT 2
36009: ARRAY
36010: PPUSH
36011: LD_VAR 0 1
36015: PPUSH
36016: CALL_OW 456
// end ;
36020: GO 35933
36022: POP
36023: POP
// end ;
36024: LD_VAR 0 3
36028: RET
// export function Count ( array ) ; begin
36029: LD_INT 0
36031: PPUSH
// result := array + 0 ;
36032: LD_ADDR_VAR 0 2
36036: PUSH
36037: LD_VAR 0 1
36041: PUSH
36042: LD_INT 0
36044: PLUS
36045: ST_TO_ADDR
// end ;
36046: LD_VAR 0 2
36050: RET
// export function IsEmpty ( building ) ; begin
36051: LD_INT 0
36053: PPUSH
// if not building then
36054: LD_VAR 0 1
36058: NOT
36059: IFFALSE 36063
// exit ;
36061: GO 36106
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36063: LD_ADDR_VAR 0 2
36067: PUSH
36068: LD_VAR 0 1
36072: PUSH
36073: LD_INT 22
36075: PUSH
36076: LD_VAR 0 1
36080: PPUSH
36081: CALL_OW 255
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 58
36092: PUSH
36093: EMPTY
36094: LIST
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PPUSH
36100: CALL_OW 69
36104: IN
36105: ST_TO_ADDR
// end ;
36106: LD_VAR 0 2
36110: RET
// export function IsNotFull ( building ) ; var places ; begin
36111: LD_INT 0
36113: PPUSH
36114: PPUSH
// if not building then
36115: LD_VAR 0 1
36119: NOT
36120: IFFALSE 36124
// exit ;
36122: GO 36152
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
36124: LD_ADDR_VAR 0 2
36128: PUSH
36129: LD_VAR 0 1
36133: PPUSH
36134: LD_INT 3
36136: PUSH
36137: LD_INT 62
36139: PUSH
36140: EMPTY
36141: LIST
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PPUSH
36147: CALL_OW 72
36151: ST_TO_ADDR
// end ;
36152: LD_VAR 0 2
36156: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
36157: LD_INT 0
36159: PPUSH
36160: PPUSH
36161: PPUSH
36162: PPUSH
// tmp := [ ] ;
36163: LD_ADDR_VAR 0 3
36167: PUSH
36168: EMPTY
36169: ST_TO_ADDR
// list := [ ] ;
36170: LD_ADDR_VAR 0 5
36174: PUSH
36175: EMPTY
36176: ST_TO_ADDR
// for i = 16 to 25 do
36177: LD_ADDR_VAR 0 4
36181: PUSH
36182: DOUBLE
36183: LD_INT 16
36185: DEC
36186: ST_TO_ADDR
36187: LD_INT 25
36189: PUSH
36190: FOR_TO
36191: IFFALSE 36264
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
36193: LD_ADDR_VAR 0 3
36197: PUSH
36198: LD_VAR 0 3
36202: PUSH
36203: LD_INT 22
36205: PUSH
36206: LD_VAR 0 1
36210: PPUSH
36211: CALL_OW 255
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 91
36222: PUSH
36223: LD_VAR 0 1
36227: PUSH
36228: LD_INT 6
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 30
36238: PUSH
36239: LD_VAR 0 4
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: LIST
36252: PUSH
36253: EMPTY
36254: LIST
36255: PPUSH
36256: CALL_OW 69
36260: ADD
36261: ST_TO_ADDR
36262: GO 36190
36264: POP
36265: POP
// for i = 1 to tmp do
36266: LD_ADDR_VAR 0 4
36270: PUSH
36271: DOUBLE
36272: LD_INT 1
36274: DEC
36275: ST_TO_ADDR
36276: LD_VAR 0 3
36280: PUSH
36281: FOR_TO
36282: IFFALSE 36370
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36284: LD_ADDR_VAR 0 5
36288: PUSH
36289: LD_VAR 0 5
36293: PUSH
36294: LD_VAR 0 3
36298: PUSH
36299: LD_VAR 0 4
36303: ARRAY
36304: PPUSH
36305: CALL_OW 266
36309: PUSH
36310: LD_VAR 0 3
36314: PUSH
36315: LD_VAR 0 4
36319: ARRAY
36320: PPUSH
36321: CALL_OW 250
36325: PUSH
36326: LD_VAR 0 3
36330: PUSH
36331: LD_VAR 0 4
36335: ARRAY
36336: PPUSH
36337: CALL_OW 251
36341: PUSH
36342: LD_VAR 0 3
36346: PUSH
36347: LD_VAR 0 4
36351: ARRAY
36352: PPUSH
36353: CALL_OW 254
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: PUSH
36364: EMPTY
36365: LIST
36366: ADD
36367: ST_TO_ADDR
36368: GO 36281
36370: POP
36371: POP
// result := list ;
36372: LD_ADDR_VAR 0 2
36376: PUSH
36377: LD_VAR 0 5
36381: ST_TO_ADDR
// end ;
36382: LD_VAR 0 2
36386: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36387: LD_INT 0
36389: PPUSH
36390: PPUSH
36391: PPUSH
36392: PPUSH
36393: PPUSH
36394: PPUSH
36395: PPUSH
// if not factory then
36396: LD_VAR 0 1
36400: NOT
36401: IFFALSE 36405
// exit ;
36403: GO 36998
// if control = control_apeman then
36405: LD_VAR 0 4
36409: PUSH
36410: LD_INT 5
36412: EQUAL
36413: IFFALSE 36522
// begin tmp := UnitsInside ( factory ) ;
36415: LD_ADDR_VAR 0 8
36419: PUSH
36420: LD_VAR 0 1
36424: PPUSH
36425: CALL_OW 313
36429: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36430: LD_VAR 0 8
36434: PPUSH
36435: LD_INT 25
36437: PUSH
36438: LD_INT 12
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PPUSH
36445: CALL_OW 72
36449: NOT
36450: IFFALSE 36460
// control := control_manual ;
36452: LD_ADDR_VAR 0 4
36456: PUSH
36457: LD_INT 1
36459: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36460: LD_ADDR_VAR 0 8
36464: PUSH
36465: LD_VAR 0 1
36469: PPUSH
36470: CALL 36157 0 1
36474: ST_TO_ADDR
// if tmp then
36475: LD_VAR 0 8
36479: IFFALSE 36522
// begin for i in tmp do
36481: LD_ADDR_VAR 0 7
36485: PUSH
36486: LD_VAR 0 8
36490: PUSH
36491: FOR_IN
36492: IFFALSE 36520
// if i [ 1 ] = b_ext_radio then
36494: LD_VAR 0 7
36498: PUSH
36499: LD_INT 1
36501: ARRAY
36502: PUSH
36503: LD_INT 22
36505: EQUAL
36506: IFFALSE 36518
// begin control := control_remote ;
36508: LD_ADDR_VAR 0 4
36512: PUSH
36513: LD_INT 2
36515: ST_TO_ADDR
// break ;
36516: GO 36520
// end ;
36518: GO 36491
36520: POP
36521: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36522: LD_VAR 0 1
36526: PPUSH
36527: LD_VAR 0 2
36531: PPUSH
36532: LD_VAR 0 3
36536: PPUSH
36537: LD_VAR 0 4
36541: PPUSH
36542: LD_VAR 0 5
36546: PPUSH
36547: CALL_OW 448
36551: IFFALSE 36586
// begin result := [ chassis , engine , control , weapon ] ;
36553: LD_ADDR_VAR 0 6
36557: PUSH
36558: LD_VAR 0 2
36562: PUSH
36563: LD_VAR 0 3
36567: PUSH
36568: LD_VAR 0 4
36572: PUSH
36573: LD_VAR 0 5
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: ST_TO_ADDR
// exit ;
36584: GO 36998
// end ; _chassis := AvailableChassisList ( factory ) ;
36586: LD_ADDR_VAR 0 9
36590: PUSH
36591: LD_VAR 0 1
36595: PPUSH
36596: CALL_OW 475
36600: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36601: LD_ADDR_VAR 0 11
36605: PUSH
36606: LD_VAR 0 1
36610: PPUSH
36611: CALL_OW 476
36615: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36616: LD_ADDR_VAR 0 12
36620: PUSH
36621: LD_VAR 0 1
36625: PPUSH
36626: CALL_OW 477
36630: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36631: LD_ADDR_VAR 0 10
36635: PUSH
36636: LD_VAR 0 1
36640: PPUSH
36641: CALL_OW 478
36645: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36646: LD_VAR 0 9
36650: NOT
36651: PUSH
36652: LD_VAR 0 11
36656: NOT
36657: OR
36658: PUSH
36659: LD_VAR 0 12
36663: NOT
36664: OR
36665: PUSH
36666: LD_VAR 0 10
36670: NOT
36671: OR
36672: IFFALSE 36707
// begin result := [ chassis , engine , control , weapon ] ;
36674: LD_ADDR_VAR 0 6
36678: PUSH
36679: LD_VAR 0 2
36683: PUSH
36684: LD_VAR 0 3
36688: PUSH
36689: LD_VAR 0 4
36693: PUSH
36694: LD_VAR 0 5
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: ST_TO_ADDR
// exit ;
36705: GO 36998
// end ; if not chassis in _chassis then
36707: LD_VAR 0 2
36711: PUSH
36712: LD_VAR 0 9
36716: IN
36717: NOT
36718: IFFALSE 36744
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36720: LD_ADDR_VAR 0 2
36724: PUSH
36725: LD_VAR 0 9
36729: PUSH
36730: LD_INT 1
36732: PPUSH
36733: LD_VAR 0 9
36737: PPUSH
36738: CALL_OW 12
36742: ARRAY
36743: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36744: LD_VAR 0 2
36748: PPUSH
36749: LD_VAR 0 3
36753: PPUSH
36754: CALL 37003 0 2
36758: NOT
36759: IFFALSE 36818
// repeat engine := _engine [ 1 ] ;
36761: LD_ADDR_VAR 0 3
36765: PUSH
36766: LD_VAR 0 11
36770: PUSH
36771: LD_INT 1
36773: ARRAY
36774: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36775: LD_ADDR_VAR 0 11
36779: PUSH
36780: LD_VAR 0 11
36784: PPUSH
36785: LD_INT 1
36787: PPUSH
36788: CALL_OW 3
36792: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36793: LD_VAR 0 2
36797: PPUSH
36798: LD_VAR 0 3
36802: PPUSH
36803: CALL 37003 0 2
36807: PUSH
36808: LD_VAR 0 11
36812: PUSH
36813: EMPTY
36814: EQUAL
36815: OR
36816: IFFALSE 36761
// if not control in _control then
36818: LD_VAR 0 4
36822: PUSH
36823: LD_VAR 0 12
36827: IN
36828: NOT
36829: IFFALSE 36855
// control := _control [ rand ( 1 , _control ) ] ;
36831: LD_ADDR_VAR 0 4
36835: PUSH
36836: LD_VAR 0 12
36840: PUSH
36841: LD_INT 1
36843: PPUSH
36844: LD_VAR 0 12
36848: PPUSH
36849: CALL_OW 12
36853: ARRAY
36854: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36855: LD_VAR 0 2
36859: PPUSH
36860: LD_VAR 0 5
36864: PPUSH
36865: CALL 37223 0 2
36869: NOT
36870: IFFALSE 36929
// repeat weapon := _weapon [ 1 ] ;
36872: LD_ADDR_VAR 0 5
36876: PUSH
36877: LD_VAR 0 10
36881: PUSH
36882: LD_INT 1
36884: ARRAY
36885: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36886: LD_ADDR_VAR 0 10
36890: PUSH
36891: LD_VAR 0 10
36895: PPUSH
36896: LD_INT 1
36898: PPUSH
36899: CALL_OW 3
36903: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36904: LD_VAR 0 2
36908: PPUSH
36909: LD_VAR 0 5
36913: PPUSH
36914: CALL 37223 0 2
36918: PUSH
36919: LD_VAR 0 10
36923: PUSH
36924: EMPTY
36925: EQUAL
36926: OR
36927: IFFALSE 36872
// result := [ ] ;
36929: LD_ADDR_VAR 0 6
36933: PUSH
36934: EMPTY
36935: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36936: LD_VAR 0 1
36940: PPUSH
36941: LD_VAR 0 2
36945: PPUSH
36946: LD_VAR 0 3
36950: PPUSH
36951: LD_VAR 0 4
36955: PPUSH
36956: LD_VAR 0 5
36960: PPUSH
36961: CALL_OW 448
36965: IFFALSE 36998
// result := [ chassis , engine , control , weapon ] ;
36967: LD_ADDR_VAR 0 6
36971: PUSH
36972: LD_VAR 0 2
36976: PUSH
36977: LD_VAR 0 3
36981: PUSH
36982: LD_VAR 0 4
36986: PUSH
36987: LD_VAR 0 5
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: ST_TO_ADDR
// end ;
36998: LD_VAR 0 6
37002: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
37003: LD_INT 0
37005: PPUSH
// if not chassis or not engine then
37006: LD_VAR 0 1
37010: NOT
37011: PUSH
37012: LD_VAR 0 2
37016: NOT
37017: OR
37018: IFFALSE 37022
// exit ;
37020: GO 37218
// case engine of engine_solar :
37022: LD_VAR 0 2
37026: PUSH
37027: LD_INT 2
37029: DOUBLE
37030: EQUAL
37031: IFTRUE 37035
37033: GO 37073
37035: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
37036: LD_ADDR_VAR 0 3
37040: PUSH
37041: LD_INT 11
37043: PUSH
37044: LD_INT 12
37046: PUSH
37047: LD_INT 13
37049: PUSH
37050: LD_INT 14
37052: PUSH
37053: LD_INT 1
37055: PUSH
37056: LD_INT 2
37058: PUSH
37059: LD_INT 3
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: ST_TO_ADDR
37071: GO 37202
37073: LD_INT 1
37075: DOUBLE
37076: EQUAL
37077: IFTRUE 37081
37079: GO 37143
37081: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
37082: LD_ADDR_VAR 0 3
37086: PUSH
37087: LD_INT 11
37089: PUSH
37090: LD_INT 12
37092: PUSH
37093: LD_INT 13
37095: PUSH
37096: LD_INT 14
37098: PUSH
37099: LD_INT 1
37101: PUSH
37102: LD_INT 2
37104: PUSH
37105: LD_INT 3
37107: PUSH
37108: LD_INT 4
37110: PUSH
37111: LD_INT 5
37113: PUSH
37114: LD_INT 21
37116: PUSH
37117: LD_INT 23
37119: PUSH
37120: LD_INT 22
37122: PUSH
37123: LD_INT 24
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: ST_TO_ADDR
37141: GO 37202
37143: LD_INT 3
37145: DOUBLE
37146: EQUAL
37147: IFTRUE 37151
37149: GO 37201
37151: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37152: LD_ADDR_VAR 0 3
37156: PUSH
37157: LD_INT 13
37159: PUSH
37160: LD_INT 14
37162: PUSH
37163: LD_INT 2
37165: PUSH
37166: LD_INT 3
37168: PUSH
37169: LD_INT 4
37171: PUSH
37172: LD_INT 5
37174: PUSH
37175: LD_INT 21
37177: PUSH
37178: LD_INT 22
37180: PUSH
37181: LD_INT 23
37183: PUSH
37184: LD_INT 24
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: ST_TO_ADDR
37199: GO 37202
37201: POP
// result := ( chassis in result ) ;
37202: LD_ADDR_VAR 0 3
37206: PUSH
37207: LD_VAR 0 1
37211: PUSH
37212: LD_VAR 0 3
37216: IN
37217: ST_TO_ADDR
// end ;
37218: LD_VAR 0 3
37222: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
37223: LD_INT 0
37225: PPUSH
// if not chassis or not weapon then
37226: LD_VAR 0 1
37230: NOT
37231: PUSH
37232: LD_VAR 0 2
37236: NOT
37237: OR
37238: IFFALSE 37242
// exit ;
37240: GO 38302
// case weapon of us_machine_gun :
37242: LD_VAR 0 2
37246: PUSH
37247: LD_INT 2
37249: DOUBLE
37250: EQUAL
37251: IFTRUE 37255
37253: GO 37285
37255: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37256: LD_ADDR_VAR 0 3
37260: PUSH
37261: LD_INT 1
37263: PUSH
37264: LD_INT 2
37266: PUSH
37267: LD_INT 3
37269: PUSH
37270: LD_INT 4
37272: PUSH
37273: LD_INT 5
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: ST_TO_ADDR
37283: GO 38286
37285: LD_INT 3
37287: DOUBLE
37288: EQUAL
37289: IFTRUE 37293
37291: GO 37323
37293: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37294: LD_ADDR_VAR 0 3
37298: PUSH
37299: LD_INT 1
37301: PUSH
37302: LD_INT 2
37304: PUSH
37305: LD_INT 3
37307: PUSH
37308: LD_INT 4
37310: PUSH
37311: LD_INT 5
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: ST_TO_ADDR
37321: GO 38286
37323: LD_INT 11
37325: DOUBLE
37326: EQUAL
37327: IFTRUE 37331
37329: GO 37361
37331: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37332: LD_ADDR_VAR 0 3
37336: PUSH
37337: LD_INT 1
37339: PUSH
37340: LD_INT 2
37342: PUSH
37343: LD_INT 3
37345: PUSH
37346: LD_INT 4
37348: PUSH
37349: LD_INT 5
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: ST_TO_ADDR
37359: GO 38286
37361: LD_INT 4
37363: DOUBLE
37364: EQUAL
37365: IFTRUE 37369
37367: GO 37395
37369: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37370: LD_ADDR_VAR 0 3
37374: PUSH
37375: LD_INT 2
37377: PUSH
37378: LD_INT 3
37380: PUSH
37381: LD_INT 4
37383: PUSH
37384: LD_INT 5
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: ST_TO_ADDR
37393: GO 38286
37395: LD_INT 5
37397: DOUBLE
37398: EQUAL
37399: IFTRUE 37403
37401: GO 37429
37403: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37404: LD_ADDR_VAR 0 3
37408: PUSH
37409: LD_INT 2
37411: PUSH
37412: LD_INT 3
37414: PUSH
37415: LD_INT 4
37417: PUSH
37418: LD_INT 5
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: ST_TO_ADDR
37427: GO 38286
37429: LD_INT 9
37431: DOUBLE
37432: EQUAL
37433: IFTRUE 37437
37435: GO 37463
37437: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37438: LD_ADDR_VAR 0 3
37442: PUSH
37443: LD_INT 2
37445: PUSH
37446: LD_INT 3
37448: PUSH
37449: LD_INT 4
37451: PUSH
37452: LD_INT 5
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: ST_TO_ADDR
37461: GO 38286
37463: LD_INT 7
37465: DOUBLE
37466: EQUAL
37467: IFTRUE 37471
37469: GO 37497
37471: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37472: LD_ADDR_VAR 0 3
37476: PUSH
37477: LD_INT 2
37479: PUSH
37480: LD_INT 3
37482: PUSH
37483: LD_INT 4
37485: PUSH
37486: LD_INT 5
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: ST_TO_ADDR
37495: GO 38286
37497: LD_INT 12
37499: DOUBLE
37500: EQUAL
37501: IFTRUE 37505
37503: GO 37531
37505: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37506: LD_ADDR_VAR 0 3
37510: PUSH
37511: LD_INT 2
37513: PUSH
37514: LD_INT 3
37516: PUSH
37517: LD_INT 4
37519: PUSH
37520: LD_INT 5
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: ST_TO_ADDR
37529: GO 38286
37531: LD_INT 13
37533: DOUBLE
37534: EQUAL
37535: IFTRUE 37539
37537: GO 37565
37539: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37540: LD_ADDR_VAR 0 3
37544: PUSH
37545: LD_INT 2
37547: PUSH
37548: LD_INT 3
37550: PUSH
37551: LD_INT 4
37553: PUSH
37554: LD_INT 5
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: ST_TO_ADDR
37563: GO 38286
37565: LD_INT 14
37567: DOUBLE
37568: EQUAL
37569: IFTRUE 37573
37571: GO 37591
37573: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37574: LD_ADDR_VAR 0 3
37578: PUSH
37579: LD_INT 4
37581: PUSH
37582: LD_INT 5
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: ST_TO_ADDR
37589: GO 38286
37591: LD_INT 6
37593: DOUBLE
37594: EQUAL
37595: IFTRUE 37599
37597: GO 37617
37599: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37600: LD_ADDR_VAR 0 3
37604: PUSH
37605: LD_INT 4
37607: PUSH
37608: LD_INT 5
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: ST_TO_ADDR
37615: GO 38286
37617: LD_INT 10
37619: DOUBLE
37620: EQUAL
37621: IFTRUE 37625
37623: GO 37643
37625: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37626: LD_ADDR_VAR 0 3
37630: PUSH
37631: LD_INT 4
37633: PUSH
37634: LD_INT 5
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: ST_TO_ADDR
37641: GO 38286
37643: LD_INT 22
37645: DOUBLE
37646: EQUAL
37647: IFTRUE 37651
37649: GO 37677
37651: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37652: LD_ADDR_VAR 0 3
37656: PUSH
37657: LD_INT 11
37659: PUSH
37660: LD_INT 12
37662: PUSH
37663: LD_INT 13
37665: PUSH
37666: LD_INT 14
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: ST_TO_ADDR
37675: GO 38286
37677: LD_INT 23
37679: DOUBLE
37680: EQUAL
37681: IFTRUE 37685
37683: GO 37711
37685: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37686: LD_ADDR_VAR 0 3
37690: PUSH
37691: LD_INT 11
37693: PUSH
37694: LD_INT 12
37696: PUSH
37697: LD_INT 13
37699: PUSH
37700: LD_INT 14
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: ST_TO_ADDR
37709: GO 38286
37711: LD_INT 24
37713: DOUBLE
37714: EQUAL
37715: IFTRUE 37719
37717: GO 37745
37719: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37720: LD_ADDR_VAR 0 3
37724: PUSH
37725: LD_INT 11
37727: PUSH
37728: LD_INT 12
37730: PUSH
37731: LD_INT 13
37733: PUSH
37734: LD_INT 14
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: ST_TO_ADDR
37743: GO 38286
37745: LD_INT 30
37747: DOUBLE
37748: EQUAL
37749: IFTRUE 37753
37751: GO 37779
37753: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37754: LD_ADDR_VAR 0 3
37758: PUSH
37759: LD_INT 11
37761: PUSH
37762: LD_INT 12
37764: PUSH
37765: LD_INT 13
37767: PUSH
37768: LD_INT 14
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: ST_TO_ADDR
37777: GO 38286
37779: LD_INT 25
37781: DOUBLE
37782: EQUAL
37783: IFTRUE 37787
37785: GO 37805
37787: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37788: LD_ADDR_VAR 0 3
37792: PUSH
37793: LD_INT 13
37795: PUSH
37796: LD_INT 14
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: ST_TO_ADDR
37803: GO 38286
37805: LD_INT 27
37807: DOUBLE
37808: EQUAL
37809: IFTRUE 37813
37811: GO 37831
37813: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
37814: LD_ADDR_VAR 0 3
37818: PUSH
37819: LD_INT 13
37821: PUSH
37822: LD_INT 14
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: ST_TO_ADDR
37829: GO 38286
37831: LD_INT 92
37833: DOUBLE
37834: EQUAL
37835: IFTRUE 37839
37837: GO 37865
37839: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37840: LD_ADDR_VAR 0 3
37844: PUSH
37845: LD_INT 11
37847: PUSH
37848: LD_INT 12
37850: PUSH
37851: LD_INT 13
37853: PUSH
37854: LD_INT 14
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: ST_TO_ADDR
37863: GO 38286
37865: LD_INT 28
37867: DOUBLE
37868: EQUAL
37869: IFTRUE 37873
37871: GO 37891
37873: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37874: LD_ADDR_VAR 0 3
37878: PUSH
37879: LD_INT 13
37881: PUSH
37882: LD_INT 14
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: ST_TO_ADDR
37889: GO 38286
37891: LD_INT 29
37893: DOUBLE
37894: EQUAL
37895: IFTRUE 37899
37897: GO 37917
37899: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37900: LD_ADDR_VAR 0 3
37904: PUSH
37905: LD_INT 13
37907: PUSH
37908: LD_INT 14
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: ST_TO_ADDR
37915: GO 38286
37917: LD_INT 31
37919: DOUBLE
37920: EQUAL
37921: IFTRUE 37925
37923: GO 37943
37925: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37926: LD_ADDR_VAR 0 3
37930: PUSH
37931: LD_INT 13
37933: PUSH
37934: LD_INT 14
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: ST_TO_ADDR
37941: GO 38286
37943: LD_INT 26
37945: DOUBLE
37946: EQUAL
37947: IFTRUE 37951
37949: GO 37969
37951: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37952: LD_ADDR_VAR 0 3
37956: PUSH
37957: LD_INT 13
37959: PUSH
37960: LD_INT 14
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: ST_TO_ADDR
37967: GO 38286
37969: LD_INT 42
37971: DOUBLE
37972: EQUAL
37973: IFTRUE 37977
37975: GO 38003
37977: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37978: LD_ADDR_VAR 0 3
37982: PUSH
37983: LD_INT 21
37985: PUSH
37986: LD_INT 22
37988: PUSH
37989: LD_INT 23
37991: PUSH
37992: LD_INT 24
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: ST_TO_ADDR
38001: GO 38286
38003: LD_INT 43
38005: DOUBLE
38006: EQUAL
38007: IFTRUE 38011
38009: GO 38037
38011: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
38012: LD_ADDR_VAR 0 3
38016: PUSH
38017: LD_INT 21
38019: PUSH
38020: LD_INT 22
38022: PUSH
38023: LD_INT 23
38025: PUSH
38026: LD_INT 24
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: ST_TO_ADDR
38035: GO 38286
38037: LD_INT 44
38039: DOUBLE
38040: EQUAL
38041: IFTRUE 38045
38043: GO 38071
38045: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
38046: LD_ADDR_VAR 0 3
38050: PUSH
38051: LD_INT 21
38053: PUSH
38054: LD_INT 22
38056: PUSH
38057: LD_INT 23
38059: PUSH
38060: LD_INT 24
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: ST_TO_ADDR
38069: GO 38286
38071: LD_INT 45
38073: DOUBLE
38074: EQUAL
38075: IFTRUE 38079
38077: GO 38105
38079: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
38080: LD_ADDR_VAR 0 3
38084: PUSH
38085: LD_INT 21
38087: PUSH
38088: LD_INT 22
38090: PUSH
38091: LD_INT 23
38093: PUSH
38094: LD_INT 24
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: ST_TO_ADDR
38103: GO 38286
38105: LD_INT 49
38107: DOUBLE
38108: EQUAL
38109: IFTRUE 38113
38111: GO 38139
38113: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
38114: LD_ADDR_VAR 0 3
38118: PUSH
38119: LD_INT 21
38121: PUSH
38122: LD_INT 22
38124: PUSH
38125: LD_INT 23
38127: PUSH
38128: LD_INT 24
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: ST_TO_ADDR
38137: GO 38286
38139: LD_INT 51
38141: DOUBLE
38142: EQUAL
38143: IFTRUE 38147
38145: GO 38173
38147: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
38148: LD_ADDR_VAR 0 3
38152: PUSH
38153: LD_INT 21
38155: PUSH
38156: LD_INT 22
38158: PUSH
38159: LD_INT 23
38161: PUSH
38162: LD_INT 24
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: ST_TO_ADDR
38171: GO 38286
38173: LD_INT 52
38175: DOUBLE
38176: EQUAL
38177: IFTRUE 38181
38179: GO 38207
38181: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
38182: LD_ADDR_VAR 0 3
38186: PUSH
38187: LD_INT 21
38189: PUSH
38190: LD_INT 22
38192: PUSH
38193: LD_INT 23
38195: PUSH
38196: LD_INT 24
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: ST_TO_ADDR
38205: GO 38286
38207: LD_INT 53
38209: DOUBLE
38210: EQUAL
38211: IFTRUE 38215
38213: GO 38233
38215: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
38216: LD_ADDR_VAR 0 3
38220: PUSH
38221: LD_INT 23
38223: PUSH
38224: LD_INT 24
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: ST_TO_ADDR
38231: GO 38286
38233: LD_INT 46
38235: DOUBLE
38236: EQUAL
38237: IFTRUE 38241
38239: GO 38259
38241: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38242: LD_ADDR_VAR 0 3
38246: PUSH
38247: LD_INT 23
38249: PUSH
38250: LD_INT 24
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: ST_TO_ADDR
38257: GO 38286
38259: LD_INT 47
38261: DOUBLE
38262: EQUAL
38263: IFTRUE 38267
38265: GO 38285
38267: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38268: LD_ADDR_VAR 0 3
38272: PUSH
38273: LD_INT 23
38275: PUSH
38276: LD_INT 24
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: ST_TO_ADDR
38283: GO 38286
38285: POP
// result := ( chassis in result ) ;
38286: LD_ADDR_VAR 0 3
38290: PUSH
38291: LD_VAR 0 1
38295: PUSH
38296: LD_VAR 0 3
38300: IN
38301: ST_TO_ADDR
// end ;
38302: LD_VAR 0 3
38306: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38307: LD_INT 0
38309: PPUSH
38310: PPUSH
38311: PPUSH
38312: PPUSH
38313: PPUSH
38314: PPUSH
38315: PPUSH
// result := array ;
38316: LD_ADDR_VAR 0 5
38320: PUSH
38321: LD_VAR 0 1
38325: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38326: LD_VAR 0 1
38330: NOT
38331: PUSH
38332: LD_VAR 0 2
38336: NOT
38337: OR
38338: PUSH
38339: LD_VAR 0 3
38343: NOT
38344: OR
38345: PUSH
38346: LD_VAR 0 2
38350: PUSH
38351: LD_VAR 0 1
38355: GREATER
38356: OR
38357: PUSH
38358: LD_VAR 0 3
38362: PUSH
38363: LD_VAR 0 1
38367: GREATER
38368: OR
38369: IFFALSE 38373
// exit ;
38371: GO 38669
// if direction then
38373: LD_VAR 0 4
38377: IFFALSE 38441
// begin d := 1 ;
38379: LD_ADDR_VAR 0 9
38383: PUSH
38384: LD_INT 1
38386: ST_TO_ADDR
// if i_from > i_to then
38387: LD_VAR 0 2
38391: PUSH
38392: LD_VAR 0 3
38396: GREATER
38397: IFFALSE 38423
// length := ( array - i_from ) + i_to else
38399: LD_ADDR_VAR 0 11
38403: PUSH
38404: LD_VAR 0 1
38408: PUSH
38409: LD_VAR 0 2
38413: MINUS
38414: PUSH
38415: LD_VAR 0 3
38419: PLUS
38420: ST_TO_ADDR
38421: GO 38439
// length := i_to - i_from ;
38423: LD_ADDR_VAR 0 11
38427: PUSH
38428: LD_VAR 0 3
38432: PUSH
38433: LD_VAR 0 2
38437: MINUS
38438: ST_TO_ADDR
// end else
38439: GO 38502
// begin d := - 1 ;
38441: LD_ADDR_VAR 0 9
38445: PUSH
38446: LD_INT 1
38448: NEG
38449: ST_TO_ADDR
// if i_from > i_to then
38450: LD_VAR 0 2
38454: PUSH
38455: LD_VAR 0 3
38459: GREATER
38460: IFFALSE 38480
// length := i_from - i_to else
38462: LD_ADDR_VAR 0 11
38466: PUSH
38467: LD_VAR 0 2
38471: PUSH
38472: LD_VAR 0 3
38476: MINUS
38477: ST_TO_ADDR
38478: GO 38502
// length := ( array - i_to ) + i_from ;
38480: LD_ADDR_VAR 0 11
38484: PUSH
38485: LD_VAR 0 1
38489: PUSH
38490: LD_VAR 0 3
38494: MINUS
38495: PUSH
38496: LD_VAR 0 2
38500: PLUS
38501: ST_TO_ADDR
// end ; if not length then
38502: LD_VAR 0 11
38506: NOT
38507: IFFALSE 38511
// exit ;
38509: GO 38669
// tmp := array ;
38511: LD_ADDR_VAR 0 10
38515: PUSH
38516: LD_VAR 0 1
38520: ST_TO_ADDR
// for i = 1 to length do
38521: LD_ADDR_VAR 0 6
38525: PUSH
38526: DOUBLE
38527: LD_INT 1
38529: DEC
38530: ST_TO_ADDR
38531: LD_VAR 0 11
38535: PUSH
38536: FOR_TO
38537: IFFALSE 38657
// begin for j = 1 to array do
38539: LD_ADDR_VAR 0 7
38543: PUSH
38544: DOUBLE
38545: LD_INT 1
38547: DEC
38548: ST_TO_ADDR
38549: LD_VAR 0 1
38553: PUSH
38554: FOR_TO
38555: IFFALSE 38643
// begin k := j + d ;
38557: LD_ADDR_VAR 0 8
38561: PUSH
38562: LD_VAR 0 7
38566: PUSH
38567: LD_VAR 0 9
38571: PLUS
38572: ST_TO_ADDR
// if k > array then
38573: LD_VAR 0 8
38577: PUSH
38578: LD_VAR 0 1
38582: GREATER
38583: IFFALSE 38593
// k := 1 ;
38585: LD_ADDR_VAR 0 8
38589: PUSH
38590: LD_INT 1
38592: ST_TO_ADDR
// if not k then
38593: LD_VAR 0 8
38597: NOT
38598: IFFALSE 38610
// k := array ;
38600: LD_ADDR_VAR 0 8
38604: PUSH
38605: LD_VAR 0 1
38609: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38610: LD_ADDR_VAR 0 10
38614: PUSH
38615: LD_VAR 0 10
38619: PPUSH
38620: LD_VAR 0 8
38624: PPUSH
38625: LD_VAR 0 1
38629: PUSH
38630: LD_VAR 0 7
38634: ARRAY
38635: PPUSH
38636: CALL_OW 1
38640: ST_TO_ADDR
// end ;
38641: GO 38554
38643: POP
38644: POP
// array := tmp ;
38645: LD_ADDR_VAR 0 1
38649: PUSH
38650: LD_VAR 0 10
38654: ST_TO_ADDR
// end ;
38655: GO 38536
38657: POP
38658: POP
// result := array ;
38659: LD_ADDR_VAR 0 5
38663: PUSH
38664: LD_VAR 0 1
38668: ST_TO_ADDR
// end ;
38669: LD_VAR 0 5
38673: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38674: LD_INT 0
38676: PPUSH
38677: PPUSH
// result := 0 ;
38678: LD_ADDR_VAR 0 3
38682: PUSH
38683: LD_INT 0
38685: ST_TO_ADDR
// if not array or not value in array then
38686: LD_VAR 0 1
38690: NOT
38691: PUSH
38692: LD_VAR 0 2
38696: PUSH
38697: LD_VAR 0 1
38701: IN
38702: NOT
38703: OR
38704: IFFALSE 38708
// exit ;
38706: GO 38762
// for i = 1 to array do
38708: LD_ADDR_VAR 0 4
38712: PUSH
38713: DOUBLE
38714: LD_INT 1
38716: DEC
38717: ST_TO_ADDR
38718: LD_VAR 0 1
38722: PUSH
38723: FOR_TO
38724: IFFALSE 38760
// if value = array [ i ] then
38726: LD_VAR 0 2
38730: PUSH
38731: LD_VAR 0 1
38735: PUSH
38736: LD_VAR 0 4
38740: ARRAY
38741: EQUAL
38742: IFFALSE 38758
// begin result := i ;
38744: LD_ADDR_VAR 0 3
38748: PUSH
38749: LD_VAR 0 4
38753: ST_TO_ADDR
// exit ;
38754: POP
38755: POP
38756: GO 38762
// end ;
38758: GO 38723
38760: POP
38761: POP
// end ;
38762: LD_VAR 0 3
38766: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38767: LD_INT 0
38769: PPUSH
// vc_chassis := chassis ;
38770: LD_ADDR_OWVAR 37
38774: PUSH
38775: LD_VAR 0 1
38779: ST_TO_ADDR
// vc_engine := engine ;
38780: LD_ADDR_OWVAR 39
38784: PUSH
38785: LD_VAR 0 2
38789: ST_TO_ADDR
// vc_control := control ;
38790: LD_ADDR_OWVAR 38
38794: PUSH
38795: LD_VAR 0 3
38799: ST_TO_ADDR
// vc_weapon := weapon ;
38800: LD_ADDR_OWVAR 40
38804: PUSH
38805: LD_VAR 0 4
38809: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38810: LD_ADDR_OWVAR 41
38814: PUSH
38815: LD_VAR 0 5
38819: ST_TO_ADDR
// end ;
38820: LD_VAR 0 6
38824: RET
// export function WantPlant ( unit ) ; var task ; begin
38825: LD_INT 0
38827: PPUSH
38828: PPUSH
// result := false ;
38829: LD_ADDR_VAR 0 2
38833: PUSH
38834: LD_INT 0
38836: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38837: LD_ADDR_VAR 0 3
38841: PUSH
38842: LD_VAR 0 1
38846: PPUSH
38847: CALL_OW 437
38851: ST_TO_ADDR
// if task then
38852: LD_VAR 0 3
38856: IFFALSE 38884
// if task [ 1 ] [ 1 ] = p then
38858: LD_VAR 0 3
38862: PUSH
38863: LD_INT 1
38865: ARRAY
38866: PUSH
38867: LD_INT 1
38869: ARRAY
38870: PUSH
38871: LD_STRING p
38873: EQUAL
38874: IFFALSE 38884
// result := true ;
38876: LD_ADDR_VAR 0 2
38880: PUSH
38881: LD_INT 1
38883: ST_TO_ADDR
// end ;
38884: LD_VAR 0 2
38888: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38889: LD_INT 0
38891: PPUSH
38892: PPUSH
38893: PPUSH
38894: PPUSH
// if pos < 1 then
38895: LD_VAR 0 2
38899: PUSH
38900: LD_INT 1
38902: LESS
38903: IFFALSE 38907
// exit ;
38905: GO 39210
// if pos = 1 then
38907: LD_VAR 0 2
38911: PUSH
38912: LD_INT 1
38914: EQUAL
38915: IFFALSE 38948
// result := Replace ( arr , pos [ 1 ] , value ) else
38917: LD_ADDR_VAR 0 4
38921: PUSH
38922: LD_VAR 0 1
38926: PPUSH
38927: LD_VAR 0 2
38931: PUSH
38932: LD_INT 1
38934: ARRAY
38935: PPUSH
38936: LD_VAR 0 3
38940: PPUSH
38941: CALL_OW 1
38945: ST_TO_ADDR
38946: GO 39210
// begin tmp := arr ;
38948: LD_ADDR_VAR 0 6
38952: PUSH
38953: LD_VAR 0 1
38957: ST_TO_ADDR
// s_arr := [ tmp ] ;
38958: LD_ADDR_VAR 0 7
38962: PUSH
38963: LD_VAR 0 6
38967: PUSH
38968: EMPTY
38969: LIST
38970: ST_TO_ADDR
// for i = 1 to pos - 1 do
38971: LD_ADDR_VAR 0 5
38975: PUSH
38976: DOUBLE
38977: LD_INT 1
38979: DEC
38980: ST_TO_ADDR
38981: LD_VAR 0 2
38985: PUSH
38986: LD_INT 1
38988: MINUS
38989: PUSH
38990: FOR_TO
38991: IFFALSE 39036
// begin tmp := tmp [ pos [ i ] ] ;
38993: LD_ADDR_VAR 0 6
38997: PUSH
38998: LD_VAR 0 6
39002: PUSH
39003: LD_VAR 0 2
39007: PUSH
39008: LD_VAR 0 5
39012: ARRAY
39013: ARRAY
39014: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
39015: LD_ADDR_VAR 0 7
39019: PUSH
39020: LD_VAR 0 7
39024: PUSH
39025: LD_VAR 0 6
39029: PUSH
39030: EMPTY
39031: LIST
39032: ADD
39033: ST_TO_ADDR
// end ;
39034: GO 38990
39036: POP
39037: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
39038: LD_ADDR_VAR 0 6
39042: PUSH
39043: LD_VAR 0 6
39047: PPUSH
39048: LD_VAR 0 2
39052: PUSH
39053: LD_VAR 0 2
39057: ARRAY
39058: PPUSH
39059: LD_VAR 0 3
39063: PPUSH
39064: CALL_OW 1
39068: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
39069: LD_ADDR_VAR 0 7
39073: PUSH
39074: LD_VAR 0 7
39078: PPUSH
39079: LD_VAR 0 7
39083: PPUSH
39084: LD_VAR 0 6
39088: PPUSH
39089: CALL_OW 1
39093: ST_TO_ADDR
// for i = s_arr downto 2 do
39094: LD_ADDR_VAR 0 5
39098: PUSH
39099: DOUBLE
39100: LD_VAR 0 7
39104: INC
39105: ST_TO_ADDR
39106: LD_INT 2
39108: PUSH
39109: FOR_DOWNTO
39110: IFFALSE 39194
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
39112: LD_ADDR_VAR 0 6
39116: PUSH
39117: LD_VAR 0 7
39121: PUSH
39122: LD_VAR 0 5
39126: PUSH
39127: LD_INT 1
39129: MINUS
39130: ARRAY
39131: PPUSH
39132: LD_VAR 0 2
39136: PUSH
39137: LD_VAR 0 5
39141: PUSH
39142: LD_INT 1
39144: MINUS
39145: ARRAY
39146: PPUSH
39147: LD_VAR 0 7
39151: PUSH
39152: LD_VAR 0 5
39156: ARRAY
39157: PPUSH
39158: CALL_OW 1
39162: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
39163: LD_ADDR_VAR 0 7
39167: PUSH
39168: LD_VAR 0 7
39172: PPUSH
39173: LD_VAR 0 5
39177: PUSH
39178: LD_INT 1
39180: MINUS
39181: PPUSH
39182: LD_VAR 0 6
39186: PPUSH
39187: CALL_OW 1
39191: ST_TO_ADDR
// end ;
39192: GO 39109
39194: POP
39195: POP
// result := s_arr [ 1 ] ;
39196: LD_ADDR_VAR 0 4
39200: PUSH
39201: LD_VAR 0 7
39205: PUSH
39206: LD_INT 1
39208: ARRAY
39209: ST_TO_ADDR
// end ; end ;
39210: LD_VAR 0 4
39214: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39215: LD_INT 0
39217: PPUSH
39218: PPUSH
// if not list then
39219: LD_VAR 0 1
39223: NOT
39224: IFFALSE 39228
// exit ;
39226: GO 39319
// i := list [ pos1 ] ;
39228: LD_ADDR_VAR 0 5
39232: PUSH
39233: LD_VAR 0 1
39237: PUSH
39238: LD_VAR 0 2
39242: ARRAY
39243: ST_TO_ADDR
// if not i then
39244: LD_VAR 0 5
39248: NOT
39249: IFFALSE 39253
// exit ;
39251: GO 39319
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39253: LD_ADDR_VAR 0 1
39257: PUSH
39258: LD_VAR 0 1
39262: PPUSH
39263: LD_VAR 0 2
39267: PPUSH
39268: LD_VAR 0 1
39272: PUSH
39273: LD_VAR 0 3
39277: ARRAY
39278: PPUSH
39279: CALL_OW 1
39283: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39284: LD_ADDR_VAR 0 1
39288: PUSH
39289: LD_VAR 0 1
39293: PPUSH
39294: LD_VAR 0 3
39298: PPUSH
39299: LD_VAR 0 5
39303: PPUSH
39304: CALL_OW 1
39308: ST_TO_ADDR
// result := list ;
39309: LD_ADDR_VAR 0 4
39313: PUSH
39314: LD_VAR 0 1
39318: ST_TO_ADDR
// end ;
39319: LD_VAR 0 4
39323: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39324: LD_INT 0
39326: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39327: LD_ADDR_VAR 0 5
39331: PUSH
39332: LD_VAR 0 1
39336: PPUSH
39337: CALL_OW 250
39341: PPUSH
39342: LD_VAR 0 1
39346: PPUSH
39347: CALL_OW 251
39351: PPUSH
39352: LD_VAR 0 2
39356: PPUSH
39357: LD_VAR 0 3
39361: PPUSH
39362: LD_VAR 0 4
39366: PPUSH
39367: CALL 39745 0 5
39371: ST_TO_ADDR
// end ;
39372: LD_VAR 0 5
39376: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
39377: LD_INT 0
39379: PPUSH
39380: PPUSH
39381: PPUSH
39382: PPUSH
// if not list or not unit then
39383: LD_VAR 0 2
39387: NOT
39388: PUSH
39389: LD_VAR 0 1
39393: NOT
39394: OR
39395: IFFALSE 39399
// exit ;
39397: GO 39740
// result := [ ] ;
39399: LD_ADDR_VAR 0 5
39403: PUSH
39404: EMPTY
39405: ST_TO_ADDR
// for i in list do
39406: LD_ADDR_VAR 0 6
39410: PUSH
39411: LD_VAR 0 2
39415: PUSH
39416: FOR_IN
39417: IFFALSE 39635
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
39419: LD_ADDR_VAR 0 8
39423: PUSH
39424: LD_VAR 0 1
39428: PPUSH
39429: LD_VAR 0 6
39433: PUSH
39434: LD_INT 1
39436: ARRAY
39437: PPUSH
39438: LD_VAR 0 6
39442: PUSH
39443: LD_INT 2
39445: ARRAY
39446: PPUSH
39447: CALL_OW 297
39451: ST_TO_ADDR
// if not Count ( result ) then
39452: LD_VAR 0 5
39456: PPUSH
39457: CALL 36029 0 1
39461: NOT
39462: IFFALSE 39495
// begin result := Join ( result , [ i , tmp ] ) ;
39464: LD_ADDR_VAR 0 5
39468: PUSH
39469: LD_VAR 0 5
39473: PPUSH
39474: LD_VAR 0 6
39478: PUSH
39479: LD_VAR 0 8
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PPUSH
39488: CALL 71779 0 2
39492: ST_TO_ADDR
// continue ;
39493: GO 39416
// end ; if result [ result ] [ 2 ] <= tmp then
39495: LD_VAR 0 5
39499: PUSH
39500: LD_VAR 0 5
39504: ARRAY
39505: PUSH
39506: LD_INT 2
39508: ARRAY
39509: PUSH
39510: LD_VAR 0 8
39514: LESSEQUAL
39515: IFFALSE 39548
// result := Join ( result , [ i , tmp ] ) else
39517: LD_ADDR_VAR 0 5
39521: PUSH
39522: LD_VAR 0 5
39526: PPUSH
39527: LD_VAR 0 6
39531: PUSH
39532: LD_VAR 0 8
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PPUSH
39541: CALL 71779 0 2
39545: ST_TO_ADDR
39546: GO 39633
// begin for j := 1 to Count ( result ) do
39548: LD_ADDR_VAR 0 7
39552: PUSH
39553: DOUBLE
39554: LD_INT 1
39556: DEC
39557: ST_TO_ADDR
39558: LD_VAR 0 5
39562: PPUSH
39563: CALL 36029 0 1
39567: PUSH
39568: FOR_TO
39569: IFFALSE 39631
// begin if tmp < result [ j ] [ 2 ] then
39571: LD_VAR 0 8
39575: PUSH
39576: LD_VAR 0 5
39580: PUSH
39581: LD_VAR 0 7
39585: ARRAY
39586: PUSH
39587: LD_INT 2
39589: ARRAY
39590: LESS
39591: IFFALSE 39629
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39593: LD_ADDR_VAR 0 5
39597: PUSH
39598: LD_VAR 0 5
39602: PPUSH
39603: LD_VAR 0 7
39607: PPUSH
39608: LD_VAR 0 6
39612: PUSH
39613: LD_VAR 0 8
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PPUSH
39622: CALL_OW 2
39626: ST_TO_ADDR
// break ;
39627: GO 39631
// end ; end ;
39629: GO 39568
39631: POP
39632: POP
// end ; end ;
39633: GO 39416
39635: POP
39636: POP
// if result and not asc then
39637: LD_VAR 0 5
39641: PUSH
39642: LD_VAR 0 3
39646: NOT
39647: AND
39648: IFFALSE 39665
// result := ReverseArray ( result ) ;
39650: LD_ADDR_VAR 0 5
39654: PUSH
39655: LD_VAR 0 5
39659: PPUSH
39660: CALL 66905 0 1
39664: ST_TO_ADDR
// tmp := [ ] ;
39665: LD_ADDR_VAR 0 8
39669: PUSH
39670: EMPTY
39671: ST_TO_ADDR
// if mode then
39672: LD_VAR 0 4
39676: IFFALSE 39740
// begin for i := 1 to result do
39678: LD_ADDR_VAR 0 6
39682: PUSH
39683: DOUBLE
39684: LD_INT 1
39686: DEC
39687: ST_TO_ADDR
39688: LD_VAR 0 5
39692: PUSH
39693: FOR_TO
39694: IFFALSE 39728
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
39696: LD_ADDR_VAR 0 8
39700: PUSH
39701: LD_VAR 0 8
39705: PPUSH
39706: LD_VAR 0 5
39710: PUSH
39711: LD_VAR 0 6
39715: ARRAY
39716: PUSH
39717: LD_INT 1
39719: ARRAY
39720: PPUSH
39721: CALL 71779 0 2
39725: ST_TO_ADDR
39726: GO 39693
39728: POP
39729: POP
// result := tmp ;
39730: LD_ADDR_VAR 0 5
39734: PUSH
39735: LD_VAR 0 8
39739: ST_TO_ADDR
// end ; end ;
39740: LD_VAR 0 5
39744: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39745: LD_INT 0
39747: PPUSH
39748: PPUSH
39749: PPUSH
39750: PPUSH
// if not list then
39751: LD_VAR 0 3
39755: NOT
39756: IFFALSE 39760
// exit ;
39758: GO 40148
// result := [ ] ;
39760: LD_ADDR_VAR 0 6
39764: PUSH
39765: EMPTY
39766: ST_TO_ADDR
// for i in list do
39767: LD_ADDR_VAR 0 7
39771: PUSH
39772: LD_VAR 0 3
39776: PUSH
39777: FOR_IN
39778: IFFALSE 39980
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39780: LD_ADDR_VAR 0 9
39784: PUSH
39785: LD_VAR 0 7
39789: PPUSH
39790: LD_VAR 0 1
39794: PPUSH
39795: LD_VAR 0 2
39799: PPUSH
39800: CALL_OW 297
39804: ST_TO_ADDR
// if not result then
39805: LD_VAR 0 6
39809: NOT
39810: IFFALSE 39836
// result := [ [ i , tmp ] ] else
39812: LD_ADDR_VAR 0 6
39816: PUSH
39817: LD_VAR 0 7
39821: PUSH
39822: LD_VAR 0 9
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: EMPTY
39832: LIST
39833: ST_TO_ADDR
39834: GO 39978
// begin if result [ result ] [ 2 ] <= tmp then
39836: LD_VAR 0 6
39840: PUSH
39841: LD_VAR 0 6
39845: ARRAY
39846: PUSH
39847: LD_INT 2
39849: ARRAY
39850: PUSH
39851: LD_VAR 0 9
39855: LESSEQUAL
39856: IFFALSE 39898
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39858: LD_ADDR_VAR 0 6
39862: PUSH
39863: LD_VAR 0 6
39867: PPUSH
39868: LD_VAR 0 6
39872: PUSH
39873: LD_INT 1
39875: PLUS
39876: PPUSH
39877: LD_VAR 0 7
39881: PUSH
39882: LD_VAR 0 9
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PPUSH
39891: CALL_OW 2
39895: ST_TO_ADDR
39896: GO 39978
// for j := 1 to result do
39898: LD_ADDR_VAR 0 8
39902: PUSH
39903: DOUBLE
39904: LD_INT 1
39906: DEC
39907: ST_TO_ADDR
39908: LD_VAR 0 6
39912: PUSH
39913: FOR_TO
39914: IFFALSE 39976
// begin if tmp < result [ j ] [ 2 ] then
39916: LD_VAR 0 9
39920: PUSH
39921: LD_VAR 0 6
39925: PUSH
39926: LD_VAR 0 8
39930: ARRAY
39931: PUSH
39932: LD_INT 2
39934: ARRAY
39935: LESS
39936: IFFALSE 39974
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39938: LD_ADDR_VAR 0 6
39942: PUSH
39943: LD_VAR 0 6
39947: PPUSH
39948: LD_VAR 0 8
39952: PPUSH
39953: LD_VAR 0 7
39957: PUSH
39958: LD_VAR 0 9
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PPUSH
39967: CALL_OW 2
39971: ST_TO_ADDR
// break ;
39972: GO 39976
// end ; end ;
39974: GO 39913
39976: POP
39977: POP
// end ; end ;
39978: GO 39777
39980: POP
39981: POP
// if result and not asc then
39982: LD_VAR 0 6
39986: PUSH
39987: LD_VAR 0 4
39991: NOT
39992: AND
39993: IFFALSE 40068
// begin tmp := result ;
39995: LD_ADDR_VAR 0 9
39999: PUSH
40000: LD_VAR 0 6
40004: ST_TO_ADDR
// for i = tmp downto 1 do
40005: LD_ADDR_VAR 0 7
40009: PUSH
40010: DOUBLE
40011: LD_VAR 0 9
40015: INC
40016: ST_TO_ADDR
40017: LD_INT 1
40019: PUSH
40020: FOR_DOWNTO
40021: IFFALSE 40066
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40023: LD_ADDR_VAR 0 6
40027: PUSH
40028: LD_VAR 0 6
40032: PPUSH
40033: LD_VAR 0 9
40037: PUSH
40038: LD_VAR 0 7
40042: MINUS
40043: PUSH
40044: LD_INT 1
40046: PLUS
40047: PPUSH
40048: LD_VAR 0 9
40052: PUSH
40053: LD_VAR 0 7
40057: ARRAY
40058: PPUSH
40059: CALL_OW 1
40063: ST_TO_ADDR
40064: GO 40020
40066: POP
40067: POP
// end ; tmp := [ ] ;
40068: LD_ADDR_VAR 0 9
40072: PUSH
40073: EMPTY
40074: ST_TO_ADDR
// if mode then
40075: LD_VAR 0 5
40079: IFFALSE 40148
// begin for i = 1 to result do
40081: LD_ADDR_VAR 0 7
40085: PUSH
40086: DOUBLE
40087: LD_INT 1
40089: DEC
40090: ST_TO_ADDR
40091: LD_VAR 0 6
40095: PUSH
40096: FOR_TO
40097: IFFALSE 40136
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40099: LD_ADDR_VAR 0 9
40103: PUSH
40104: LD_VAR 0 9
40108: PPUSH
40109: LD_VAR 0 7
40113: PPUSH
40114: LD_VAR 0 6
40118: PUSH
40119: LD_VAR 0 7
40123: ARRAY
40124: PUSH
40125: LD_INT 1
40127: ARRAY
40128: PPUSH
40129: CALL_OW 1
40133: ST_TO_ADDR
40134: GO 40096
40136: POP
40137: POP
// result := tmp ;
40138: LD_ADDR_VAR 0 6
40142: PUSH
40143: LD_VAR 0 9
40147: ST_TO_ADDR
// end ; end ;
40148: LD_VAR 0 6
40152: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40153: LD_INT 0
40155: PPUSH
40156: PPUSH
40157: PPUSH
40158: PPUSH
40159: PPUSH
40160: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40161: LD_ADDR_VAR 0 5
40165: PUSH
40166: LD_INT 0
40168: PUSH
40169: LD_INT 0
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: EMPTY
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: ST_TO_ADDR
// if not x or not y then
40183: LD_VAR 0 2
40187: NOT
40188: PUSH
40189: LD_VAR 0 3
40193: NOT
40194: OR
40195: IFFALSE 40199
// exit ;
40197: GO 41849
// if not range then
40199: LD_VAR 0 4
40203: NOT
40204: IFFALSE 40214
// range := 10 ;
40206: LD_ADDR_VAR 0 4
40210: PUSH
40211: LD_INT 10
40213: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40214: LD_ADDR_VAR 0 8
40218: PUSH
40219: LD_INT 81
40221: PUSH
40222: LD_VAR 0 1
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 92
40233: PUSH
40234: LD_VAR 0 2
40238: PUSH
40239: LD_VAR 0 3
40243: PUSH
40244: LD_VAR 0 4
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 3
40257: PUSH
40258: LD_INT 21
40260: PUSH
40261: LD_INT 3
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: LIST
40276: PPUSH
40277: CALL_OW 69
40281: ST_TO_ADDR
// if not tmp then
40282: LD_VAR 0 8
40286: NOT
40287: IFFALSE 40291
// exit ;
40289: GO 41849
// for i in tmp do
40291: LD_ADDR_VAR 0 6
40295: PUSH
40296: LD_VAR 0 8
40300: PUSH
40301: FOR_IN
40302: IFFALSE 41824
// begin points := [ 0 , 0 , 0 ] ;
40304: LD_ADDR_VAR 0 9
40308: PUSH
40309: LD_INT 0
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: LD_INT 0
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: LIST
40322: ST_TO_ADDR
// bpoints := 1 ;
40323: LD_ADDR_VAR 0 10
40327: PUSH
40328: LD_INT 1
40330: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40331: LD_VAR 0 6
40335: PPUSH
40336: CALL_OW 247
40340: PUSH
40341: LD_INT 1
40343: DOUBLE
40344: EQUAL
40345: IFTRUE 40349
40347: GO 40927
40349: POP
// begin if GetClass ( i ) = 1 then
40350: LD_VAR 0 6
40354: PPUSH
40355: CALL_OW 257
40359: PUSH
40360: LD_INT 1
40362: EQUAL
40363: IFFALSE 40384
// points := [ 10 , 5 , 3 ] ;
40365: LD_ADDR_VAR 0 9
40369: PUSH
40370: LD_INT 10
40372: PUSH
40373: LD_INT 5
40375: PUSH
40376: LD_INT 3
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: LIST
40383: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40384: LD_VAR 0 6
40388: PPUSH
40389: CALL_OW 257
40393: PUSH
40394: LD_INT 2
40396: PUSH
40397: LD_INT 3
40399: PUSH
40400: LD_INT 4
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: LIST
40407: IN
40408: IFFALSE 40429
// points := [ 3 , 2 , 1 ] ;
40410: LD_ADDR_VAR 0 9
40414: PUSH
40415: LD_INT 3
40417: PUSH
40418: LD_INT 2
40420: PUSH
40421: LD_INT 1
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: LIST
40428: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40429: LD_VAR 0 6
40433: PPUSH
40434: CALL_OW 257
40438: PUSH
40439: LD_INT 5
40441: EQUAL
40442: IFFALSE 40463
// points := [ 130 , 5 , 2 ] ;
40444: LD_ADDR_VAR 0 9
40448: PUSH
40449: LD_INT 130
40451: PUSH
40452: LD_INT 5
40454: PUSH
40455: LD_INT 2
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: LIST
40462: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40463: LD_VAR 0 6
40467: PPUSH
40468: CALL_OW 257
40472: PUSH
40473: LD_INT 8
40475: EQUAL
40476: IFFALSE 40497
// points := [ 35 , 35 , 30 ] ;
40478: LD_ADDR_VAR 0 9
40482: PUSH
40483: LD_INT 35
40485: PUSH
40486: LD_INT 35
40488: PUSH
40489: LD_INT 30
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: LIST
40496: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40497: LD_VAR 0 6
40501: PPUSH
40502: CALL_OW 257
40506: PUSH
40507: LD_INT 9
40509: EQUAL
40510: IFFALSE 40531
// points := [ 20 , 55 , 40 ] ;
40512: LD_ADDR_VAR 0 9
40516: PUSH
40517: LD_INT 20
40519: PUSH
40520: LD_INT 55
40522: PUSH
40523: LD_INT 40
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: LIST
40530: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40531: LD_VAR 0 6
40535: PPUSH
40536: CALL_OW 257
40540: PUSH
40541: LD_INT 12
40543: PUSH
40544: LD_INT 16
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: IN
40551: IFFALSE 40572
// points := [ 5 , 3 , 2 ] ;
40553: LD_ADDR_VAR 0 9
40557: PUSH
40558: LD_INT 5
40560: PUSH
40561: LD_INT 3
40563: PUSH
40564: LD_INT 2
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: LIST
40571: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40572: LD_VAR 0 6
40576: PPUSH
40577: CALL_OW 257
40581: PUSH
40582: LD_INT 17
40584: EQUAL
40585: IFFALSE 40606
// points := [ 100 , 50 , 75 ] ;
40587: LD_ADDR_VAR 0 9
40591: PUSH
40592: LD_INT 100
40594: PUSH
40595: LD_INT 50
40597: PUSH
40598: LD_INT 75
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: LIST
40605: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40606: LD_VAR 0 6
40610: PPUSH
40611: CALL_OW 257
40615: PUSH
40616: LD_INT 15
40618: EQUAL
40619: IFFALSE 40640
// points := [ 10 , 5 , 3 ] ;
40621: LD_ADDR_VAR 0 9
40625: PUSH
40626: LD_INT 10
40628: PUSH
40629: LD_INT 5
40631: PUSH
40632: LD_INT 3
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: LIST
40639: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40640: LD_VAR 0 6
40644: PPUSH
40645: CALL_OW 257
40649: PUSH
40650: LD_INT 14
40652: EQUAL
40653: IFFALSE 40674
// points := [ 10 , 0 , 0 ] ;
40655: LD_ADDR_VAR 0 9
40659: PUSH
40660: LD_INT 10
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: LD_INT 0
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: LIST
40673: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40674: LD_VAR 0 6
40678: PPUSH
40679: CALL_OW 257
40683: PUSH
40684: LD_INT 11
40686: EQUAL
40687: IFFALSE 40708
// points := [ 30 , 10 , 5 ] ;
40689: LD_ADDR_VAR 0 9
40693: PUSH
40694: LD_INT 30
40696: PUSH
40697: LD_INT 10
40699: PUSH
40700: LD_INT 5
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: LIST
40707: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40708: LD_VAR 0 1
40712: PPUSH
40713: LD_INT 5
40715: PPUSH
40716: CALL_OW 321
40720: PUSH
40721: LD_INT 2
40723: EQUAL
40724: IFFALSE 40741
// bpoints := bpoints * 1.8 ;
40726: LD_ADDR_VAR 0 10
40730: PUSH
40731: LD_VAR 0 10
40735: PUSH
40736: LD_REAL  1.80000000000000E+0000
40739: MUL
40740: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40741: LD_VAR 0 6
40745: PPUSH
40746: CALL_OW 257
40750: PUSH
40751: LD_INT 1
40753: PUSH
40754: LD_INT 2
40756: PUSH
40757: LD_INT 3
40759: PUSH
40760: LD_INT 4
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: IN
40769: PUSH
40770: LD_VAR 0 1
40774: PPUSH
40775: LD_INT 51
40777: PPUSH
40778: CALL_OW 321
40782: PUSH
40783: LD_INT 2
40785: EQUAL
40786: AND
40787: IFFALSE 40804
// bpoints := bpoints * 1.2 ;
40789: LD_ADDR_VAR 0 10
40793: PUSH
40794: LD_VAR 0 10
40798: PUSH
40799: LD_REAL  1.20000000000000E+0000
40802: MUL
40803: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40804: LD_VAR 0 6
40808: PPUSH
40809: CALL_OW 257
40813: PUSH
40814: LD_INT 5
40816: PUSH
40817: LD_INT 7
40819: PUSH
40820: LD_INT 9
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: LIST
40827: IN
40828: PUSH
40829: LD_VAR 0 1
40833: PPUSH
40834: LD_INT 52
40836: PPUSH
40837: CALL_OW 321
40841: PUSH
40842: LD_INT 2
40844: EQUAL
40845: AND
40846: IFFALSE 40863
// bpoints := bpoints * 1.5 ;
40848: LD_ADDR_VAR 0 10
40852: PUSH
40853: LD_VAR 0 10
40857: PUSH
40858: LD_REAL  1.50000000000000E+0000
40861: MUL
40862: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40863: LD_VAR 0 1
40867: PPUSH
40868: LD_INT 66
40870: PPUSH
40871: CALL_OW 321
40875: PUSH
40876: LD_INT 2
40878: EQUAL
40879: IFFALSE 40896
// bpoints := bpoints * 1.1 ;
40881: LD_ADDR_VAR 0 10
40885: PUSH
40886: LD_VAR 0 10
40890: PUSH
40891: LD_REAL  1.10000000000000E+0000
40894: MUL
40895: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40896: LD_ADDR_VAR 0 10
40900: PUSH
40901: LD_VAR 0 10
40905: PUSH
40906: LD_VAR 0 6
40910: PPUSH
40911: LD_INT 1
40913: PPUSH
40914: CALL_OW 259
40918: PUSH
40919: LD_REAL  1.15000000000000E+0000
40922: MUL
40923: MUL
40924: ST_TO_ADDR
// end ; unit_vehicle :
40925: GO 41753
40927: LD_INT 2
40929: DOUBLE
40930: EQUAL
40931: IFTRUE 40935
40933: GO 41741
40935: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40936: LD_VAR 0 6
40940: PPUSH
40941: CALL_OW 264
40945: PUSH
40946: LD_INT 2
40948: PUSH
40949: LD_INT 42
40951: PUSH
40952: LD_INT 24
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: LIST
40959: IN
40960: IFFALSE 40981
// points := [ 25 , 5 , 3 ] ;
40962: LD_ADDR_VAR 0 9
40966: PUSH
40967: LD_INT 25
40969: PUSH
40970: LD_INT 5
40972: PUSH
40973: LD_INT 3
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: LIST
40980: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40981: LD_VAR 0 6
40985: PPUSH
40986: CALL_OW 264
40990: PUSH
40991: LD_INT 4
40993: PUSH
40994: LD_INT 43
40996: PUSH
40997: LD_INT 25
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: LIST
41004: IN
41005: IFFALSE 41026
// points := [ 40 , 15 , 5 ] ;
41007: LD_ADDR_VAR 0 9
41011: PUSH
41012: LD_INT 40
41014: PUSH
41015: LD_INT 15
41017: PUSH
41018: LD_INT 5
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: LIST
41025: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41026: LD_VAR 0 6
41030: PPUSH
41031: CALL_OW 264
41035: PUSH
41036: LD_INT 3
41038: PUSH
41039: LD_INT 23
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: IN
41046: IFFALSE 41067
// points := [ 7 , 25 , 8 ] ;
41048: LD_ADDR_VAR 0 9
41052: PUSH
41053: LD_INT 7
41055: PUSH
41056: LD_INT 25
41058: PUSH
41059: LD_INT 8
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: LIST
41066: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41067: LD_VAR 0 6
41071: PPUSH
41072: CALL_OW 264
41076: PUSH
41077: LD_INT 5
41079: PUSH
41080: LD_INT 27
41082: PUSH
41083: LD_INT 44
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: LIST
41090: IN
41091: IFFALSE 41112
// points := [ 14 , 50 , 16 ] ;
41093: LD_ADDR_VAR 0 9
41097: PUSH
41098: LD_INT 14
41100: PUSH
41101: LD_INT 50
41103: PUSH
41104: LD_INT 16
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: LIST
41111: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41112: LD_VAR 0 6
41116: PPUSH
41117: CALL_OW 264
41121: PUSH
41122: LD_INT 6
41124: PUSH
41125: LD_INT 46
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: IN
41132: IFFALSE 41153
// points := [ 32 , 120 , 70 ] ;
41134: LD_ADDR_VAR 0 9
41138: PUSH
41139: LD_INT 32
41141: PUSH
41142: LD_INT 120
41144: PUSH
41145: LD_INT 70
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: LIST
41152: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41153: LD_VAR 0 6
41157: PPUSH
41158: CALL_OW 264
41162: PUSH
41163: LD_INT 7
41165: PUSH
41166: LD_INT 28
41168: PUSH
41169: LD_INT 45
41171: PUSH
41172: LD_INT 92
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: IN
41181: IFFALSE 41202
// points := [ 35 , 20 , 45 ] ;
41183: LD_ADDR_VAR 0 9
41187: PUSH
41188: LD_INT 35
41190: PUSH
41191: LD_INT 20
41193: PUSH
41194: LD_INT 45
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: LIST
41201: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41202: LD_VAR 0 6
41206: PPUSH
41207: CALL_OW 264
41211: PUSH
41212: LD_INT 47
41214: PUSH
41215: EMPTY
41216: LIST
41217: IN
41218: IFFALSE 41239
// points := [ 67 , 45 , 75 ] ;
41220: LD_ADDR_VAR 0 9
41224: PUSH
41225: LD_INT 67
41227: PUSH
41228: LD_INT 45
41230: PUSH
41231: LD_INT 75
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: LIST
41238: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41239: LD_VAR 0 6
41243: PPUSH
41244: CALL_OW 264
41248: PUSH
41249: LD_INT 26
41251: PUSH
41252: EMPTY
41253: LIST
41254: IN
41255: IFFALSE 41276
// points := [ 120 , 30 , 80 ] ;
41257: LD_ADDR_VAR 0 9
41261: PUSH
41262: LD_INT 120
41264: PUSH
41265: LD_INT 30
41267: PUSH
41268: LD_INT 80
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: LIST
41275: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41276: LD_VAR 0 6
41280: PPUSH
41281: CALL_OW 264
41285: PUSH
41286: LD_INT 22
41288: PUSH
41289: EMPTY
41290: LIST
41291: IN
41292: IFFALSE 41313
// points := [ 40 , 1 , 1 ] ;
41294: LD_ADDR_VAR 0 9
41298: PUSH
41299: LD_INT 40
41301: PUSH
41302: LD_INT 1
41304: PUSH
41305: LD_INT 1
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: LIST
41312: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41313: LD_VAR 0 6
41317: PPUSH
41318: CALL_OW 264
41322: PUSH
41323: LD_INT 29
41325: PUSH
41326: EMPTY
41327: LIST
41328: IN
41329: IFFALSE 41350
// points := [ 70 , 200 , 400 ] ;
41331: LD_ADDR_VAR 0 9
41335: PUSH
41336: LD_INT 70
41338: PUSH
41339: LD_INT 200
41341: PUSH
41342: LD_INT 400
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: LIST
41349: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41350: LD_VAR 0 6
41354: PPUSH
41355: CALL_OW 264
41359: PUSH
41360: LD_INT 14
41362: PUSH
41363: LD_INT 53
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: IN
41370: IFFALSE 41391
// points := [ 40 , 10 , 20 ] ;
41372: LD_ADDR_VAR 0 9
41376: PUSH
41377: LD_INT 40
41379: PUSH
41380: LD_INT 10
41382: PUSH
41383: LD_INT 20
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: LIST
41390: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41391: LD_VAR 0 6
41395: PPUSH
41396: CALL_OW 264
41400: PUSH
41401: LD_INT 9
41403: PUSH
41404: EMPTY
41405: LIST
41406: IN
41407: IFFALSE 41428
// points := [ 5 , 70 , 20 ] ;
41409: LD_ADDR_VAR 0 9
41413: PUSH
41414: LD_INT 5
41416: PUSH
41417: LD_INT 70
41419: PUSH
41420: LD_INT 20
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: LIST
41427: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41428: LD_VAR 0 6
41432: PPUSH
41433: CALL_OW 264
41437: PUSH
41438: LD_INT 10
41440: PUSH
41441: EMPTY
41442: LIST
41443: IN
41444: IFFALSE 41465
// points := [ 35 , 110 , 70 ] ;
41446: LD_ADDR_VAR 0 9
41450: PUSH
41451: LD_INT 35
41453: PUSH
41454: LD_INT 110
41456: PUSH
41457: LD_INT 70
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: LIST
41464: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41465: LD_VAR 0 6
41469: PPUSH
41470: CALL_OW 265
41474: PUSH
41475: LD_INT 25
41477: EQUAL
41478: IFFALSE 41499
// points := [ 80 , 65 , 100 ] ;
41480: LD_ADDR_VAR 0 9
41484: PUSH
41485: LD_INT 80
41487: PUSH
41488: LD_INT 65
41490: PUSH
41491: LD_INT 100
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: LIST
41498: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41499: LD_VAR 0 6
41503: PPUSH
41504: CALL_OW 263
41508: PUSH
41509: LD_INT 1
41511: EQUAL
41512: IFFALSE 41547
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41514: LD_ADDR_VAR 0 10
41518: PUSH
41519: LD_VAR 0 10
41523: PUSH
41524: LD_VAR 0 6
41528: PPUSH
41529: CALL_OW 311
41533: PPUSH
41534: LD_INT 3
41536: PPUSH
41537: CALL_OW 259
41541: PUSH
41542: LD_INT 4
41544: MUL
41545: MUL
41546: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41547: LD_VAR 0 6
41551: PPUSH
41552: CALL_OW 263
41556: PUSH
41557: LD_INT 2
41559: EQUAL
41560: IFFALSE 41611
// begin j := IsControledBy ( i ) ;
41562: LD_ADDR_VAR 0 7
41566: PUSH
41567: LD_VAR 0 6
41571: PPUSH
41572: CALL_OW 312
41576: ST_TO_ADDR
// if j then
41577: LD_VAR 0 7
41581: IFFALSE 41611
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41583: LD_ADDR_VAR 0 10
41587: PUSH
41588: LD_VAR 0 10
41592: PUSH
41593: LD_VAR 0 7
41597: PPUSH
41598: LD_INT 3
41600: PPUSH
41601: CALL_OW 259
41605: PUSH
41606: LD_INT 3
41608: MUL
41609: MUL
41610: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41611: LD_VAR 0 6
41615: PPUSH
41616: CALL_OW 264
41620: PUSH
41621: LD_INT 5
41623: PUSH
41624: LD_INT 6
41626: PUSH
41627: LD_INT 46
41629: PUSH
41630: LD_INT 44
41632: PUSH
41633: LD_INT 47
41635: PUSH
41636: LD_INT 45
41638: PUSH
41639: LD_INT 28
41641: PUSH
41642: LD_INT 7
41644: PUSH
41645: LD_INT 27
41647: PUSH
41648: LD_INT 29
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: IN
41663: PUSH
41664: LD_VAR 0 1
41668: PPUSH
41669: LD_INT 52
41671: PPUSH
41672: CALL_OW 321
41676: PUSH
41677: LD_INT 2
41679: EQUAL
41680: AND
41681: IFFALSE 41698
// bpoints := bpoints * 1.2 ;
41683: LD_ADDR_VAR 0 10
41687: PUSH
41688: LD_VAR 0 10
41692: PUSH
41693: LD_REAL  1.20000000000000E+0000
41696: MUL
41697: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41698: LD_VAR 0 6
41702: PPUSH
41703: CALL_OW 264
41707: PUSH
41708: LD_INT 6
41710: PUSH
41711: LD_INT 46
41713: PUSH
41714: LD_INT 47
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: LIST
41721: IN
41722: IFFALSE 41739
// bpoints := bpoints * 1.2 ;
41724: LD_ADDR_VAR 0 10
41728: PUSH
41729: LD_VAR 0 10
41733: PUSH
41734: LD_REAL  1.20000000000000E+0000
41737: MUL
41738: ST_TO_ADDR
// end ; unit_building :
41739: GO 41753
41741: LD_INT 3
41743: DOUBLE
41744: EQUAL
41745: IFTRUE 41749
41747: GO 41752
41749: POP
// ; end ;
41750: GO 41753
41752: POP
// for j = 1 to 3 do
41753: LD_ADDR_VAR 0 7
41757: PUSH
41758: DOUBLE
41759: LD_INT 1
41761: DEC
41762: ST_TO_ADDR
41763: LD_INT 3
41765: PUSH
41766: FOR_TO
41767: IFFALSE 41820
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41769: LD_ADDR_VAR 0 5
41773: PUSH
41774: LD_VAR 0 5
41778: PPUSH
41779: LD_VAR 0 7
41783: PPUSH
41784: LD_VAR 0 5
41788: PUSH
41789: LD_VAR 0 7
41793: ARRAY
41794: PUSH
41795: LD_VAR 0 9
41799: PUSH
41800: LD_VAR 0 7
41804: ARRAY
41805: PUSH
41806: LD_VAR 0 10
41810: MUL
41811: PLUS
41812: PPUSH
41813: CALL_OW 1
41817: ST_TO_ADDR
41818: GO 41766
41820: POP
41821: POP
// end ;
41822: GO 40301
41824: POP
41825: POP
// result := Replace ( result , 4 , tmp ) ;
41826: LD_ADDR_VAR 0 5
41830: PUSH
41831: LD_VAR 0 5
41835: PPUSH
41836: LD_INT 4
41838: PPUSH
41839: LD_VAR 0 8
41843: PPUSH
41844: CALL_OW 1
41848: ST_TO_ADDR
// end ;
41849: LD_VAR 0 5
41853: RET
// export function DangerAtRange ( unit , range ) ; begin
41854: LD_INT 0
41856: PPUSH
// if not unit then
41857: LD_VAR 0 1
41861: NOT
41862: IFFALSE 41866
// exit ;
41864: GO 41911
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41866: LD_ADDR_VAR 0 3
41870: PUSH
41871: LD_VAR 0 1
41875: PPUSH
41876: CALL_OW 255
41880: PPUSH
41881: LD_VAR 0 1
41885: PPUSH
41886: CALL_OW 250
41890: PPUSH
41891: LD_VAR 0 1
41895: PPUSH
41896: CALL_OW 251
41900: PPUSH
41901: LD_VAR 0 2
41905: PPUSH
41906: CALL 40153 0 4
41910: ST_TO_ADDR
// end ;
41911: LD_VAR 0 3
41915: RET
// export function DangerInArea ( side , area ) ; begin
41916: LD_INT 0
41918: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41919: LD_ADDR_VAR 0 3
41923: PUSH
41924: LD_VAR 0 2
41928: PPUSH
41929: LD_INT 81
41931: PUSH
41932: LD_VAR 0 1
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PPUSH
41941: CALL_OW 70
41945: ST_TO_ADDR
// end ;
41946: LD_VAR 0 3
41950: RET
// export function IsExtension ( b ) ; begin
41951: LD_INT 0
41953: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41954: LD_ADDR_VAR 0 2
41958: PUSH
41959: LD_VAR 0 1
41963: PUSH
41964: LD_INT 23
41966: PUSH
41967: LD_INT 20
41969: PUSH
41970: LD_INT 22
41972: PUSH
41973: LD_INT 17
41975: PUSH
41976: LD_INT 24
41978: PUSH
41979: LD_INT 21
41981: PUSH
41982: LD_INT 19
41984: PUSH
41985: LD_INT 16
41987: PUSH
41988: LD_INT 25
41990: PUSH
41991: LD_INT 18
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: IN
42006: ST_TO_ADDR
// end ;
42007: LD_VAR 0 2
42011: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42012: LD_INT 0
42014: PPUSH
42015: PPUSH
42016: PPUSH
// result := [ ] ;
42017: LD_ADDR_VAR 0 4
42021: PUSH
42022: EMPTY
42023: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42024: LD_ADDR_VAR 0 5
42028: PUSH
42029: LD_VAR 0 2
42033: PPUSH
42034: LD_INT 21
42036: PUSH
42037: LD_INT 3
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PPUSH
42044: CALL_OW 70
42048: ST_TO_ADDR
// if not tmp then
42049: LD_VAR 0 5
42053: NOT
42054: IFFALSE 42058
// exit ;
42056: GO 42122
// if checkLink then
42058: LD_VAR 0 3
42062: IFFALSE 42112
// begin for i in tmp do
42064: LD_ADDR_VAR 0 6
42068: PUSH
42069: LD_VAR 0 5
42073: PUSH
42074: FOR_IN
42075: IFFALSE 42110
// if GetBase ( i ) <> base then
42077: LD_VAR 0 6
42081: PPUSH
42082: CALL_OW 274
42086: PUSH
42087: LD_VAR 0 1
42091: NONEQUAL
42092: IFFALSE 42108
// ComLinkToBase ( base , i ) ;
42094: LD_VAR 0 1
42098: PPUSH
42099: LD_VAR 0 6
42103: PPUSH
42104: CALL_OW 169
42108: GO 42074
42110: POP
42111: POP
// end ; result := tmp ;
42112: LD_ADDR_VAR 0 4
42116: PUSH
42117: LD_VAR 0 5
42121: ST_TO_ADDR
// end ;
42122: LD_VAR 0 4
42126: RET
// export function ComComplete ( units , b ) ; var i ; begin
42127: LD_INT 0
42129: PPUSH
42130: PPUSH
// if not units then
42131: LD_VAR 0 1
42135: NOT
42136: IFFALSE 42140
// exit ;
42138: GO 42230
// for i in units do
42140: LD_ADDR_VAR 0 4
42144: PUSH
42145: LD_VAR 0 1
42149: PUSH
42150: FOR_IN
42151: IFFALSE 42228
// if BuildingStatus ( b ) = bs_build then
42153: LD_VAR 0 2
42157: PPUSH
42158: CALL_OW 461
42162: PUSH
42163: LD_INT 1
42165: EQUAL
42166: IFFALSE 42226
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42168: LD_VAR 0 4
42172: PPUSH
42173: LD_STRING h
42175: PUSH
42176: LD_VAR 0 2
42180: PPUSH
42181: CALL_OW 250
42185: PUSH
42186: LD_VAR 0 2
42190: PPUSH
42191: CALL_OW 251
42195: PUSH
42196: LD_VAR 0 2
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: LD_INT 0
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: PUSH
42219: EMPTY
42220: LIST
42221: PPUSH
42222: CALL_OW 446
42226: GO 42150
42228: POP
42229: POP
// end ;
42230: LD_VAR 0 3
42234: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42235: LD_INT 0
42237: PPUSH
42238: PPUSH
42239: PPUSH
42240: PPUSH
42241: PPUSH
42242: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42243: LD_VAR 0 1
42247: NOT
42248: PUSH
42249: LD_VAR 0 1
42253: PPUSH
42254: CALL_OW 263
42258: PUSH
42259: LD_INT 2
42261: NONEQUAL
42262: OR
42263: IFFALSE 42267
// exit ;
42265: GO 42583
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42267: LD_ADDR_VAR 0 6
42271: PUSH
42272: LD_INT 22
42274: PUSH
42275: LD_VAR 0 1
42279: PPUSH
42280: CALL_OW 255
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 2
42291: PUSH
42292: LD_INT 30
42294: PUSH
42295: LD_INT 36
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 34
42304: PUSH
42305: LD_INT 31
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: LIST
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PPUSH
42321: CALL_OW 69
42325: ST_TO_ADDR
// if not tmp then
42326: LD_VAR 0 6
42330: NOT
42331: IFFALSE 42335
// exit ;
42333: GO 42583
// result := [ ] ;
42335: LD_ADDR_VAR 0 2
42339: PUSH
42340: EMPTY
42341: ST_TO_ADDR
// for i in tmp do
42342: LD_ADDR_VAR 0 3
42346: PUSH
42347: LD_VAR 0 6
42351: PUSH
42352: FOR_IN
42353: IFFALSE 42424
// begin t := UnitsInside ( i ) ;
42355: LD_ADDR_VAR 0 4
42359: PUSH
42360: LD_VAR 0 3
42364: PPUSH
42365: CALL_OW 313
42369: ST_TO_ADDR
// if t then
42370: LD_VAR 0 4
42374: IFFALSE 42422
// for j in t do
42376: LD_ADDR_VAR 0 7
42380: PUSH
42381: LD_VAR 0 4
42385: PUSH
42386: FOR_IN
42387: IFFALSE 42420
// result := Replace ( result , result + 1 , j ) ;
42389: LD_ADDR_VAR 0 2
42393: PUSH
42394: LD_VAR 0 2
42398: PPUSH
42399: LD_VAR 0 2
42403: PUSH
42404: LD_INT 1
42406: PLUS
42407: PPUSH
42408: LD_VAR 0 7
42412: PPUSH
42413: CALL_OW 1
42417: ST_TO_ADDR
42418: GO 42386
42420: POP
42421: POP
// end ;
42422: GO 42352
42424: POP
42425: POP
// if not result then
42426: LD_VAR 0 2
42430: NOT
42431: IFFALSE 42435
// exit ;
42433: GO 42583
// mech := result [ 1 ] ;
42435: LD_ADDR_VAR 0 5
42439: PUSH
42440: LD_VAR 0 2
42444: PUSH
42445: LD_INT 1
42447: ARRAY
42448: ST_TO_ADDR
// if result > 1 then
42449: LD_VAR 0 2
42453: PUSH
42454: LD_INT 1
42456: GREATER
42457: IFFALSE 42569
// begin for i = 2 to result do
42459: LD_ADDR_VAR 0 3
42463: PUSH
42464: DOUBLE
42465: LD_INT 2
42467: DEC
42468: ST_TO_ADDR
42469: LD_VAR 0 2
42473: PUSH
42474: FOR_TO
42475: IFFALSE 42567
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42477: LD_ADDR_VAR 0 4
42481: PUSH
42482: LD_VAR 0 2
42486: PUSH
42487: LD_VAR 0 3
42491: ARRAY
42492: PPUSH
42493: LD_INT 3
42495: PPUSH
42496: CALL_OW 259
42500: PUSH
42501: LD_VAR 0 2
42505: PUSH
42506: LD_VAR 0 3
42510: ARRAY
42511: PPUSH
42512: CALL_OW 432
42516: MINUS
42517: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42518: LD_VAR 0 4
42522: PUSH
42523: LD_VAR 0 5
42527: PPUSH
42528: LD_INT 3
42530: PPUSH
42531: CALL_OW 259
42535: PUSH
42536: LD_VAR 0 5
42540: PPUSH
42541: CALL_OW 432
42545: MINUS
42546: GREATEREQUAL
42547: IFFALSE 42565
// mech := result [ i ] ;
42549: LD_ADDR_VAR 0 5
42553: PUSH
42554: LD_VAR 0 2
42558: PUSH
42559: LD_VAR 0 3
42563: ARRAY
42564: ST_TO_ADDR
// end ;
42565: GO 42474
42567: POP
42568: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42569: LD_VAR 0 1
42573: PPUSH
42574: LD_VAR 0 5
42578: PPUSH
42579: CALL_OW 135
// end ;
42583: LD_VAR 0 2
42587: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42588: LD_INT 0
42590: PPUSH
42591: PPUSH
42592: PPUSH
42593: PPUSH
42594: PPUSH
42595: PPUSH
42596: PPUSH
42597: PPUSH
42598: PPUSH
42599: PPUSH
42600: PPUSH
42601: PPUSH
42602: PPUSH
// result := [ ] ;
42603: LD_ADDR_VAR 0 7
42607: PUSH
42608: EMPTY
42609: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42610: LD_VAR 0 1
42614: PPUSH
42615: CALL_OW 266
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: LD_INT 1
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: IN
42630: NOT
42631: IFFALSE 42635
// exit ;
42633: GO 44269
// if name then
42635: LD_VAR 0 3
42639: IFFALSE 42655
// SetBName ( base_dep , name ) ;
42641: LD_VAR 0 1
42645: PPUSH
42646: LD_VAR 0 3
42650: PPUSH
42651: CALL_OW 500
// base := GetBase ( base_dep ) ;
42655: LD_ADDR_VAR 0 15
42659: PUSH
42660: LD_VAR 0 1
42664: PPUSH
42665: CALL_OW 274
42669: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42670: LD_ADDR_VAR 0 16
42674: PUSH
42675: LD_VAR 0 1
42679: PPUSH
42680: CALL_OW 255
42684: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42685: LD_ADDR_VAR 0 17
42689: PUSH
42690: LD_VAR 0 1
42694: PPUSH
42695: CALL_OW 248
42699: ST_TO_ADDR
// if sources then
42700: LD_VAR 0 5
42704: IFFALSE 42751
// for i = 1 to 3 do
42706: LD_ADDR_VAR 0 8
42710: PUSH
42711: DOUBLE
42712: LD_INT 1
42714: DEC
42715: ST_TO_ADDR
42716: LD_INT 3
42718: PUSH
42719: FOR_TO
42720: IFFALSE 42749
// AddResourceType ( base , i , sources [ i ] ) ;
42722: LD_VAR 0 15
42726: PPUSH
42727: LD_VAR 0 8
42731: PPUSH
42732: LD_VAR 0 5
42736: PUSH
42737: LD_VAR 0 8
42741: ARRAY
42742: PPUSH
42743: CALL_OW 276
42747: GO 42719
42749: POP
42750: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42751: LD_ADDR_VAR 0 18
42755: PUSH
42756: LD_VAR 0 15
42760: PPUSH
42761: LD_VAR 0 2
42765: PPUSH
42766: LD_INT 1
42768: PPUSH
42769: CALL 42012 0 3
42773: ST_TO_ADDR
// InitHc ;
42774: CALL_OW 19
// InitUc ;
42778: CALL_OW 18
// uc_side := side ;
42782: LD_ADDR_OWVAR 20
42786: PUSH
42787: LD_VAR 0 16
42791: ST_TO_ADDR
// uc_nation := nation ;
42792: LD_ADDR_OWVAR 21
42796: PUSH
42797: LD_VAR 0 17
42801: ST_TO_ADDR
// if buildings then
42802: LD_VAR 0 18
42806: IFFALSE 44128
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42808: LD_ADDR_VAR 0 19
42812: PUSH
42813: LD_VAR 0 18
42817: PPUSH
42818: LD_INT 2
42820: PUSH
42821: LD_INT 30
42823: PUSH
42824: LD_INT 29
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 30
42833: PUSH
42834: LD_INT 30
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: LIST
42845: PPUSH
42846: CALL_OW 72
42850: ST_TO_ADDR
// if tmp then
42851: LD_VAR 0 19
42855: IFFALSE 42903
// for i in tmp do
42857: LD_ADDR_VAR 0 8
42861: PUSH
42862: LD_VAR 0 19
42866: PUSH
42867: FOR_IN
42868: IFFALSE 42901
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42870: LD_VAR 0 8
42874: PPUSH
42875: CALL_OW 250
42879: PPUSH
42880: LD_VAR 0 8
42884: PPUSH
42885: CALL_OW 251
42889: PPUSH
42890: LD_VAR 0 16
42894: PPUSH
42895: CALL_OW 441
42899: GO 42867
42901: POP
42902: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42903: LD_VAR 0 18
42907: PPUSH
42908: LD_INT 2
42910: PUSH
42911: LD_INT 30
42913: PUSH
42914: LD_INT 32
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 30
42923: PUSH
42924: LD_INT 33
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: LIST
42935: PPUSH
42936: CALL_OW 72
42940: IFFALSE 43028
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42942: LD_ADDR_VAR 0 8
42946: PUSH
42947: LD_VAR 0 18
42951: PPUSH
42952: LD_INT 2
42954: PUSH
42955: LD_INT 30
42957: PUSH
42958: LD_INT 32
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 30
42967: PUSH
42968: LD_INT 33
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: LIST
42979: PPUSH
42980: CALL_OW 72
42984: PUSH
42985: FOR_IN
42986: IFFALSE 43026
// begin if not GetBWeapon ( i ) then
42988: LD_VAR 0 8
42992: PPUSH
42993: CALL_OW 269
42997: NOT
42998: IFFALSE 43024
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43000: LD_VAR 0 8
43004: PPUSH
43005: LD_VAR 0 8
43009: PPUSH
43010: LD_VAR 0 2
43014: PPUSH
43015: CALL 44274 0 2
43019: PPUSH
43020: CALL_OW 431
// end ;
43024: GO 42985
43026: POP
43027: POP
// end ; for i = 1 to personel do
43028: LD_ADDR_VAR 0 8
43032: PUSH
43033: DOUBLE
43034: LD_INT 1
43036: DEC
43037: ST_TO_ADDR
43038: LD_VAR 0 6
43042: PUSH
43043: FOR_TO
43044: IFFALSE 44108
// begin if i > 4 then
43046: LD_VAR 0 8
43050: PUSH
43051: LD_INT 4
43053: GREATER
43054: IFFALSE 43058
// break ;
43056: GO 44108
// case i of 1 :
43058: LD_VAR 0 8
43062: PUSH
43063: LD_INT 1
43065: DOUBLE
43066: EQUAL
43067: IFTRUE 43071
43069: GO 43151
43071: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
43072: LD_ADDR_VAR 0 12
43076: PUSH
43077: LD_VAR 0 18
43081: PPUSH
43082: LD_INT 22
43084: PUSH
43085: LD_VAR 0 16
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 58
43096: PUSH
43097: EMPTY
43098: LIST
43099: PUSH
43100: LD_INT 2
43102: PUSH
43103: LD_INT 30
43105: PUSH
43106: LD_INT 32
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 30
43115: PUSH
43116: LD_INT 4
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 30
43125: PUSH
43126: LD_INT 5
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: LIST
43143: PPUSH
43144: CALL_OW 72
43148: ST_TO_ADDR
43149: GO 43373
43151: LD_INT 2
43153: DOUBLE
43154: EQUAL
43155: IFTRUE 43159
43157: GO 43221
43159: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43160: LD_ADDR_VAR 0 12
43164: PUSH
43165: LD_VAR 0 18
43169: PPUSH
43170: LD_INT 22
43172: PUSH
43173: LD_VAR 0 16
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 2
43184: PUSH
43185: LD_INT 30
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 30
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: LIST
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PPUSH
43214: CALL_OW 72
43218: ST_TO_ADDR
43219: GO 43373
43221: LD_INT 3
43223: DOUBLE
43224: EQUAL
43225: IFTRUE 43229
43227: GO 43291
43229: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43230: LD_ADDR_VAR 0 12
43234: PUSH
43235: LD_VAR 0 18
43239: PPUSH
43240: LD_INT 22
43242: PUSH
43243: LD_VAR 0 16
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 2
43254: PUSH
43255: LD_INT 30
43257: PUSH
43258: LD_INT 2
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 30
43267: PUSH
43268: LD_INT 3
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: LIST
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PPUSH
43284: CALL_OW 72
43288: ST_TO_ADDR
43289: GO 43373
43291: LD_INT 4
43293: DOUBLE
43294: EQUAL
43295: IFTRUE 43299
43297: GO 43372
43299: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43300: LD_ADDR_VAR 0 12
43304: PUSH
43305: LD_VAR 0 18
43309: PPUSH
43310: LD_INT 22
43312: PUSH
43313: LD_VAR 0 16
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 2
43324: PUSH
43325: LD_INT 30
43327: PUSH
43328: LD_INT 6
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 30
43337: PUSH
43338: LD_INT 7
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 30
43347: PUSH
43348: LD_INT 8
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PPUSH
43365: CALL_OW 72
43369: ST_TO_ADDR
43370: GO 43373
43372: POP
// if i = 1 then
43373: LD_VAR 0 8
43377: PUSH
43378: LD_INT 1
43380: EQUAL
43381: IFFALSE 43492
// begin tmp := [ ] ;
43383: LD_ADDR_VAR 0 19
43387: PUSH
43388: EMPTY
43389: ST_TO_ADDR
// for j in f do
43390: LD_ADDR_VAR 0 9
43394: PUSH
43395: LD_VAR 0 12
43399: PUSH
43400: FOR_IN
43401: IFFALSE 43474
// if GetBType ( j ) = b_bunker then
43403: LD_VAR 0 9
43407: PPUSH
43408: CALL_OW 266
43412: PUSH
43413: LD_INT 32
43415: EQUAL
43416: IFFALSE 43443
// tmp := Insert ( tmp , 1 , j ) else
43418: LD_ADDR_VAR 0 19
43422: PUSH
43423: LD_VAR 0 19
43427: PPUSH
43428: LD_INT 1
43430: PPUSH
43431: LD_VAR 0 9
43435: PPUSH
43436: CALL_OW 2
43440: ST_TO_ADDR
43441: GO 43472
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43443: LD_ADDR_VAR 0 19
43447: PUSH
43448: LD_VAR 0 19
43452: PPUSH
43453: LD_VAR 0 19
43457: PUSH
43458: LD_INT 1
43460: PLUS
43461: PPUSH
43462: LD_VAR 0 9
43466: PPUSH
43467: CALL_OW 2
43471: ST_TO_ADDR
43472: GO 43400
43474: POP
43475: POP
// if tmp then
43476: LD_VAR 0 19
43480: IFFALSE 43492
// f := tmp ;
43482: LD_ADDR_VAR 0 12
43486: PUSH
43487: LD_VAR 0 19
43491: ST_TO_ADDR
// end ; x := personel [ i ] ;
43492: LD_ADDR_VAR 0 13
43496: PUSH
43497: LD_VAR 0 6
43501: PUSH
43502: LD_VAR 0 8
43506: ARRAY
43507: ST_TO_ADDR
// if x = - 1 then
43508: LD_VAR 0 13
43512: PUSH
43513: LD_INT 1
43515: NEG
43516: EQUAL
43517: IFFALSE 43726
// begin for j in f do
43519: LD_ADDR_VAR 0 9
43523: PUSH
43524: LD_VAR 0 12
43528: PUSH
43529: FOR_IN
43530: IFFALSE 43722
// repeat InitHc ;
43532: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43536: LD_VAR 0 9
43540: PPUSH
43541: CALL_OW 266
43545: PUSH
43546: LD_INT 5
43548: EQUAL
43549: IFFALSE 43619
// begin if UnitsInside ( j ) < 3 then
43551: LD_VAR 0 9
43555: PPUSH
43556: CALL_OW 313
43560: PUSH
43561: LD_INT 3
43563: LESS
43564: IFFALSE 43600
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43566: LD_INT 0
43568: PPUSH
43569: LD_INT 5
43571: PUSH
43572: LD_INT 8
43574: PUSH
43575: LD_INT 9
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: LIST
43582: PUSH
43583: LD_VAR 0 17
43587: ARRAY
43588: PPUSH
43589: LD_VAR 0 4
43593: PPUSH
43594: CALL_OW 380
43598: GO 43617
// PrepareHuman ( false , i , skill ) ;
43600: LD_INT 0
43602: PPUSH
43603: LD_VAR 0 8
43607: PPUSH
43608: LD_VAR 0 4
43612: PPUSH
43613: CALL_OW 380
// end else
43617: GO 43636
// PrepareHuman ( false , i , skill ) ;
43619: LD_INT 0
43621: PPUSH
43622: LD_VAR 0 8
43626: PPUSH
43627: LD_VAR 0 4
43631: PPUSH
43632: CALL_OW 380
// un := CreateHuman ;
43636: LD_ADDR_VAR 0 14
43640: PUSH
43641: CALL_OW 44
43645: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43646: LD_ADDR_VAR 0 7
43650: PUSH
43651: LD_VAR 0 7
43655: PPUSH
43656: LD_INT 1
43658: PPUSH
43659: LD_VAR 0 14
43663: PPUSH
43664: CALL_OW 2
43668: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43669: LD_VAR 0 14
43673: PPUSH
43674: LD_VAR 0 9
43678: PPUSH
43679: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43683: LD_VAR 0 9
43687: PPUSH
43688: CALL_OW 313
43692: PUSH
43693: LD_INT 6
43695: EQUAL
43696: PUSH
43697: LD_VAR 0 9
43701: PPUSH
43702: CALL_OW 266
43706: PUSH
43707: LD_INT 32
43709: PUSH
43710: LD_INT 31
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: IN
43717: OR
43718: IFFALSE 43532
43720: GO 43529
43722: POP
43723: POP
// end else
43724: GO 44106
// for j = 1 to x do
43726: LD_ADDR_VAR 0 9
43730: PUSH
43731: DOUBLE
43732: LD_INT 1
43734: DEC
43735: ST_TO_ADDR
43736: LD_VAR 0 13
43740: PUSH
43741: FOR_TO
43742: IFFALSE 44104
// begin InitHc ;
43744: CALL_OW 19
// if not f then
43748: LD_VAR 0 12
43752: NOT
43753: IFFALSE 43842
// begin PrepareHuman ( false , i , skill ) ;
43755: LD_INT 0
43757: PPUSH
43758: LD_VAR 0 8
43762: PPUSH
43763: LD_VAR 0 4
43767: PPUSH
43768: CALL_OW 380
// un := CreateHuman ;
43772: LD_ADDR_VAR 0 14
43776: PUSH
43777: CALL_OW 44
43781: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43782: LD_ADDR_VAR 0 7
43786: PUSH
43787: LD_VAR 0 7
43791: PPUSH
43792: LD_INT 1
43794: PPUSH
43795: LD_VAR 0 14
43799: PPUSH
43800: CALL_OW 2
43804: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43805: LD_VAR 0 14
43809: PPUSH
43810: LD_VAR 0 1
43814: PPUSH
43815: CALL_OW 250
43819: PPUSH
43820: LD_VAR 0 1
43824: PPUSH
43825: CALL_OW 251
43829: PPUSH
43830: LD_INT 10
43832: PPUSH
43833: LD_INT 0
43835: PPUSH
43836: CALL_OW 50
// continue ;
43840: GO 43741
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43842: LD_VAR 0 12
43846: PUSH
43847: LD_INT 1
43849: ARRAY
43850: PPUSH
43851: CALL_OW 313
43855: PUSH
43856: LD_VAR 0 12
43860: PUSH
43861: LD_INT 1
43863: ARRAY
43864: PPUSH
43865: CALL_OW 266
43869: PUSH
43870: LD_INT 32
43872: PUSH
43873: LD_INT 31
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: IN
43880: AND
43881: PUSH
43882: LD_VAR 0 12
43886: PUSH
43887: LD_INT 1
43889: ARRAY
43890: PPUSH
43891: CALL_OW 313
43895: PUSH
43896: LD_INT 6
43898: EQUAL
43899: OR
43900: IFFALSE 43920
// f := Delete ( f , 1 ) ;
43902: LD_ADDR_VAR 0 12
43906: PUSH
43907: LD_VAR 0 12
43911: PPUSH
43912: LD_INT 1
43914: PPUSH
43915: CALL_OW 3
43919: ST_TO_ADDR
// if not f then
43920: LD_VAR 0 12
43924: NOT
43925: IFFALSE 43943
// begin x := x + 2 ;
43927: LD_ADDR_VAR 0 13
43931: PUSH
43932: LD_VAR 0 13
43936: PUSH
43937: LD_INT 2
43939: PLUS
43940: ST_TO_ADDR
// continue ;
43941: GO 43741
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43943: LD_VAR 0 12
43947: PUSH
43948: LD_INT 1
43950: ARRAY
43951: PPUSH
43952: CALL_OW 266
43956: PUSH
43957: LD_INT 5
43959: EQUAL
43960: IFFALSE 44034
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43962: LD_VAR 0 12
43966: PUSH
43967: LD_INT 1
43969: ARRAY
43970: PPUSH
43971: CALL_OW 313
43975: PUSH
43976: LD_INT 3
43978: LESS
43979: IFFALSE 44015
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43981: LD_INT 0
43983: PPUSH
43984: LD_INT 5
43986: PUSH
43987: LD_INT 8
43989: PUSH
43990: LD_INT 9
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: LIST
43997: PUSH
43998: LD_VAR 0 17
44002: ARRAY
44003: PPUSH
44004: LD_VAR 0 4
44008: PPUSH
44009: CALL_OW 380
44013: GO 44032
// PrepareHuman ( false , i , skill ) ;
44015: LD_INT 0
44017: PPUSH
44018: LD_VAR 0 8
44022: PPUSH
44023: LD_VAR 0 4
44027: PPUSH
44028: CALL_OW 380
// end else
44032: GO 44051
// PrepareHuman ( false , i , skill ) ;
44034: LD_INT 0
44036: PPUSH
44037: LD_VAR 0 8
44041: PPUSH
44042: LD_VAR 0 4
44046: PPUSH
44047: CALL_OW 380
// un := CreateHuman ;
44051: LD_ADDR_VAR 0 14
44055: PUSH
44056: CALL_OW 44
44060: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44061: LD_ADDR_VAR 0 7
44065: PUSH
44066: LD_VAR 0 7
44070: PPUSH
44071: LD_INT 1
44073: PPUSH
44074: LD_VAR 0 14
44078: PPUSH
44079: CALL_OW 2
44083: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44084: LD_VAR 0 14
44088: PPUSH
44089: LD_VAR 0 12
44093: PUSH
44094: LD_INT 1
44096: ARRAY
44097: PPUSH
44098: CALL_OW 52
// end ;
44102: GO 43741
44104: POP
44105: POP
// end ;
44106: GO 43043
44108: POP
44109: POP
// result := result ^ buildings ;
44110: LD_ADDR_VAR 0 7
44114: PUSH
44115: LD_VAR 0 7
44119: PUSH
44120: LD_VAR 0 18
44124: ADD
44125: ST_TO_ADDR
// end else
44126: GO 44269
// begin for i = 1 to personel do
44128: LD_ADDR_VAR 0 8
44132: PUSH
44133: DOUBLE
44134: LD_INT 1
44136: DEC
44137: ST_TO_ADDR
44138: LD_VAR 0 6
44142: PUSH
44143: FOR_TO
44144: IFFALSE 44267
// begin if i > 4 then
44146: LD_VAR 0 8
44150: PUSH
44151: LD_INT 4
44153: GREATER
44154: IFFALSE 44158
// break ;
44156: GO 44267
// x := personel [ i ] ;
44158: LD_ADDR_VAR 0 13
44162: PUSH
44163: LD_VAR 0 6
44167: PUSH
44168: LD_VAR 0 8
44172: ARRAY
44173: ST_TO_ADDR
// if x = - 1 then
44174: LD_VAR 0 13
44178: PUSH
44179: LD_INT 1
44181: NEG
44182: EQUAL
44183: IFFALSE 44187
// continue ;
44185: GO 44143
// PrepareHuman ( false , i , skill ) ;
44187: LD_INT 0
44189: PPUSH
44190: LD_VAR 0 8
44194: PPUSH
44195: LD_VAR 0 4
44199: PPUSH
44200: CALL_OW 380
// un := CreateHuman ;
44204: LD_ADDR_VAR 0 14
44208: PUSH
44209: CALL_OW 44
44213: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44214: LD_VAR 0 14
44218: PPUSH
44219: LD_VAR 0 1
44223: PPUSH
44224: CALL_OW 250
44228: PPUSH
44229: LD_VAR 0 1
44233: PPUSH
44234: CALL_OW 251
44238: PPUSH
44239: LD_INT 10
44241: PPUSH
44242: LD_INT 0
44244: PPUSH
44245: CALL_OW 50
// result := result ^ un ;
44249: LD_ADDR_VAR 0 7
44253: PUSH
44254: LD_VAR 0 7
44258: PUSH
44259: LD_VAR 0 14
44263: ADD
44264: ST_TO_ADDR
// end ;
44265: GO 44143
44267: POP
44268: POP
// end ; end ;
44269: LD_VAR 0 7
44273: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44274: LD_INT 0
44276: PPUSH
44277: PPUSH
44278: PPUSH
44279: PPUSH
44280: PPUSH
44281: PPUSH
44282: PPUSH
44283: PPUSH
44284: PPUSH
44285: PPUSH
44286: PPUSH
44287: PPUSH
44288: PPUSH
44289: PPUSH
44290: PPUSH
44291: PPUSH
// result := false ;
44292: LD_ADDR_VAR 0 3
44296: PUSH
44297: LD_INT 0
44299: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44300: LD_VAR 0 1
44304: NOT
44305: PUSH
44306: LD_VAR 0 1
44310: PPUSH
44311: CALL_OW 266
44315: PUSH
44316: LD_INT 32
44318: PUSH
44319: LD_INT 33
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: IN
44326: NOT
44327: OR
44328: IFFALSE 44332
// exit ;
44330: GO 45441
// nat := GetNation ( tower ) ;
44332: LD_ADDR_VAR 0 12
44336: PUSH
44337: LD_VAR 0 1
44341: PPUSH
44342: CALL_OW 248
44346: ST_TO_ADDR
// side := GetSide ( tower ) ;
44347: LD_ADDR_VAR 0 16
44351: PUSH
44352: LD_VAR 0 1
44356: PPUSH
44357: CALL_OW 255
44361: ST_TO_ADDR
// x := GetX ( tower ) ;
44362: LD_ADDR_VAR 0 10
44366: PUSH
44367: LD_VAR 0 1
44371: PPUSH
44372: CALL_OW 250
44376: ST_TO_ADDR
// y := GetY ( tower ) ;
44377: LD_ADDR_VAR 0 11
44381: PUSH
44382: LD_VAR 0 1
44386: PPUSH
44387: CALL_OW 251
44391: ST_TO_ADDR
// if not x or not y then
44392: LD_VAR 0 10
44396: NOT
44397: PUSH
44398: LD_VAR 0 11
44402: NOT
44403: OR
44404: IFFALSE 44408
// exit ;
44406: GO 45441
// weapon := 0 ;
44408: LD_ADDR_VAR 0 18
44412: PUSH
44413: LD_INT 0
44415: ST_TO_ADDR
// fac_list := [ ] ;
44416: LD_ADDR_VAR 0 17
44420: PUSH
44421: EMPTY
44422: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44423: LD_ADDR_VAR 0 6
44427: PUSH
44428: LD_VAR 0 1
44432: PPUSH
44433: CALL_OW 274
44437: PPUSH
44438: LD_VAR 0 2
44442: PPUSH
44443: LD_INT 0
44445: PPUSH
44446: CALL 42012 0 3
44450: PPUSH
44451: LD_INT 30
44453: PUSH
44454: LD_INT 3
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PPUSH
44461: CALL_OW 72
44465: ST_TO_ADDR
// if not factories then
44466: LD_VAR 0 6
44470: NOT
44471: IFFALSE 44475
// exit ;
44473: GO 45441
// for i in factories do
44475: LD_ADDR_VAR 0 8
44479: PUSH
44480: LD_VAR 0 6
44484: PUSH
44485: FOR_IN
44486: IFFALSE 44511
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44488: LD_ADDR_VAR 0 17
44492: PUSH
44493: LD_VAR 0 17
44497: PUSH
44498: LD_VAR 0 8
44502: PPUSH
44503: CALL_OW 478
44507: UNION
44508: ST_TO_ADDR
44509: GO 44485
44511: POP
44512: POP
// if not fac_list then
44513: LD_VAR 0 17
44517: NOT
44518: IFFALSE 44522
// exit ;
44520: GO 45441
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44522: LD_ADDR_VAR 0 5
44526: PUSH
44527: LD_INT 4
44529: PUSH
44530: LD_INT 5
44532: PUSH
44533: LD_INT 9
44535: PUSH
44536: LD_INT 10
44538: PUSH
44539: LD_INT 6
44541: PUSH
44542: LD_INT 7
44544: PUSH
44545: LD_INT 11
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 27
44559: PUSH
44560: LD_INT 28
44562: PUSH
44563: LD_INT 26
44565: PUSH
44566: LD_INT 30
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 43
44577: PUSH
44578: LD_INT 44
44580: PUSH
44581: LD_INT 46
44583: PUSH
44584: LD_INT 45
44586: PUSH
44587: LD_INT 47
44589: PUSH
44590: LD_INT 49
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: LIST
44605: PUSH
44606: LD_VAR 0 12
44610: ARRAY
44611: ST_TO_ADDR
// list := list isect fac_list ;
44612: LD_ADDR_VAR 0 5
44616: PUSH
44617: LD_VAR 0 5
44621: PUSH
44622: LD_VAR 0 17
44626: ISECT
44627: ST_TO_ADDR
// if not list then
44628: LD_VAR 0 5
44632: NOT
44633: IFFALSE 44637
// exit ;
44635: GO 45441
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44637: LD_VAR 0 12
44641: PUSH
44642: LD_INT 3
44644: EQUAL
44645: PUSH
44646: LD_INT 49
44648: PUSH
44649: LD_VAR 0 5
44653: IN
44654: AND
44655: PUSH
44656: LD_INT 31
44658: PPUSH
44659: LD_VAR 0 16
44663: PPUSH
44664: CALL_OW 321
44668: PUSH
44669: LD_INT 2
44671: EQUAL
44672: AND
44673: IFFALSE 44733
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44675: LD_INT 22
44677: PUSH
44678: LD_VAR 0 16
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 35
44689: PUSH
44690: LD_INT 49
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 91
44699: PUSH
44700: LD_VAR 0 1
44704: PUSH
44705: LD_INT 10
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: LIST
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: LIST
44717: PPUSH
44718: CALL_OW 69
44722: NOT
44723: IFFALSE 44733
// weapon := ru_time_lapser ;
44725: LD_ADDR_VAR 0 18
44729: PUSH
44730: LD_INT 49
44732: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44733: LD_VAR 0 12
44737: PUSH
44738: LD_INT 1
44740: PUSH
44741: LD_INT 2
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: IN
44748: PUSH
44749: LD_INT 11
44751: PUSH
44752: LD_VAR 0 5
44756: IN
44757: PUSH
44758: LD_INT 30
44760: PUSH
44761: LD_VAR 0 5
44765: IN
44766: OR
44767: AND
44768: PUSH
44769: LD_INT 6
44771: PPUSH
44772: LD_VAR 0 16
44776: PPUSH
44777: CALL_OW 321
44781: PUSH
44782: LD_INT 2
44784: EQUAL
44785: AND
44786: IFFALSE 44951
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44788: LD_INT 22
44790: PUSH
44791: LD_VAR 0 16
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 2
44802: PUSH
44803: LD_INT 35
44805: PUSH
44806: LD_INT 11
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 35
44815: PUSH
44816: LD_INT 30
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 91
44830: PUSH
44831: LD_VAR 0 1
44835: PUSH
44836: LD_INT 18
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: LIST
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: LIST
44848: PPUSH
44849: CALL_OW 69
44853: NOT
44854: PUSH
44855: LD_INT 22
44857: PUSH
44858: LD_VAR 0 16
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 2
44869: PUSH
44870: LD_INT 30
44872: PUSH
44873: LD_INT 32
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 30
44882: PUSH
44883: LD_INT 33
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 91
44897: PUSH
44898: LD_VAR 0 1
44902: PUSH
44903: LD_INT 12
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: LIST
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: LIST
44915: PUSH
44916: EMPTY
44917: LIST
44918: PPUSH
44919: CALL_OW 69
44923: PUSH
44924: LD_INT 2
44926: GREATER
44927: AND
44928: IFFALSE 44951
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44930: LD_ADDR_VAR 0 18
44934: PUSH
44935: LD_INT 11
44937: PUSH
44938: LD_INT 30
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_VAR 0 12
44949: ARRAY
44950: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44951: LD_VAR 0 18
44955: NOT
44956: PUSH
44957: LD_INT 40
44959: PPUSH
44960: LD_VAR 0 16
44964: PPUSH
44965: CALL_OW 321
44969: PUSH
44970: LD_INT 2
44972: EQUAL
44973: AND
44974: PUSH
44975: LD_INT 7
44977: PUSH
44978: LD_VAR 0 5
44982: IN
44983: PUSH
44984: LD_INT 28
44986: PUSH
44987: LD_VAR 0 5
44991: IN
44992: OR
44993: PUSH
44994: LD_INT 45
44996: PUSH
44997: LD_VAR 0 5
45001: IN
45002: OR
45003: AND
45004: IFFALSE 45258
// begin hex := GetHexInfo ( x , y ) ;
45006: LD_ADDR_VAR 0 4
45010: PUSH
45011: LD_VAR 0 10
45015: PPUSH
45016: LD_VAR 0 11
45020: PPUSH
45021: CALL_OW 546
45025: ST_TO_ADDR
// if hex [ 1 ] then
45026: LD_VAR 0 4
45030: PUSH
45031: LD_INT 1
45033: ARRAY
45034: IFFALSE 45038
// exit ;
45036: GO 45441
// height := hex [ 2 ] ;
45038: LD_ADDR_VAR 0 15
45042: PUSH
45043: LD_VAR 0 4
45047: PUSH
45048: LD_INT 2
45050: ARRAY
45051: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
45052: LD_ADDR_VAR 0 14
45056: PUSH
45057: LD_INT 0
45059: PUSH
45060: LD_INT 2
45062: PUSH
45063: LD_INT 3
45065: PUSH
45066: LD_INT 5
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: ST_TO_ADDR
// for i in tmp do
45075: LD_ADDR_VAR 0 8
45079: PUSH
45080: LD_VAR 0 14
45084: PUSH
45085: FOR_IN
45086: IFFALSE 45256
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45088: LD_ADDR_VAR 0 9
45092: PUSH
45093: LD_VAR 0 10
45097: PPUSH
45098: LD_VAR 0 8
45102: PPUSH
45103: LD_INT 5
45105: PPUSH
45106: CALL_OW 272
45110: PUSH
45111: LD_VAR 0 11
45115: PPUSH
45116: LD_VAR 0 8
45120: PPUSH
45121: LD_INT 5
45123: PPUSH
45124: CALL_OW 273
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45133: LD_VAR 0 9
45137: PUSH
45138: LD_INT 1
45140: ARRAY
45141: PPUSH
45142: LD_VAR 0 9
45146: PUSH
45147: LD_INT 2
45149: ARRAY
45150: PPUSH
45151: CALL_OW 488
45155: IFFALSE 45254
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45157: LD_ADDR_VAR 0 4
45161: PUSH
45162: LD_VAR 0 9
45166: PUSH
45167: LD_INT 1
45169: ARRAY
45170: PPUSH
45171: LD_VAR 0 9
45175: PUSH
45176: LD_INT 2
45178: ARRAY
45179: PPUSH
45180: CALL_OW 546
45184: ST_TO_ADDR
// if hex [ 1 ] then
45185: LD_VAR 0 4
45189: PUSH
45190: LD_INT 1
45192: ARRAY
45193: IFFALSE 45197
// continue ;
45195: GO 45085
// h := hex [ 2 ] ;
45197: LD_ADDR_VAR 0 13
45201: PUSH
45202: LD_VAR 0 4
45206: PUSH
45207: LD_INT 2
45209: ARRAY
45210: ST_TO_ADDR
// if h + 7 < height then
45211: LD_VAR 0 13
45215: PUSH
45216: LD_INT 7
45218: PLUS
45219: PUSH
45220: LD_VAR 0 15
45224: LESS
45225: IFFALSE 45254
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45227: LD_ADDR_VAR 0 18
45231: PUSH
45232: LD_INT 7
45234: PUSH
45235: LD_INT 28
45237: PUSH
45238: LD_INT 45
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: LIST
45245: PUSH
45246: LD_VAR 0 12
45250: ARRAY
45251: ST_TO_ADDR
// break ;
45252: GO 45256
// end ; end ; end ;
45254: GO 45085
45256: POP
45257: POP
// end ; if not weapon then
45258: LD_VAR 0 18
45262: NOT
45263: IFFALSE 45323
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45265: LD_ADDR_VAR 0 5
45269: PUSH
45270: LD_VAR 0 5
45274: PUSH
45275: LD_INT 11
45277: PUSH
45278: LD_INT 30
45280: PUSH
45281: LD_INT 49
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: LIST
45288: DIFF
45289: ST_TO_ADDR
// if not list then
45290: LD_VAR 0 5
45294: NOT
45295: IFFALSE 45299
// exit ;
45297: GO 45441
// weapon := list [ rand ( 1 , list ) ] ;
45299: LD_ADDR_VAR 0 18
45303: PUSH
45304: LD_VAR 0 5
45308: PUSH
45309: LD_INT 1
45311: PPUSH
45312: LD_VAR 0 5
45316: PPUSH
45317: CALL_OW 12
45321: ARRAY
45322: ST_TO_ADDR
// end ; if weapon then
45323: LD_VAR 0 18
45327: IFFALSE 45441
// begin tmp := CostOfWeapon ( weapon ) ;
45329: LD_ADDR_VAR 0 14
45333: PUSH
45334: LD_VAR 0 18
45338: PPUSH
45339: CALL_OW 451
45343: ST_TO_ADDR
// j := GetBase ( tower ) ;
45344: LD_ADDR_VAR 0 9
45348: PUSH
45349: LD_VAR 0 1
45353: PPUSH
45354: CALL_OW 274
45358: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45359: LD_VAR 0 9
45363: PPUSH
45364: LD_INT 1
45366: PPUSH
45367: CALL_OW 275
45371: PUSH
45372: LD_VAR 0 14
45376: PUSH
45377: LD_INT 1
45379: ARRAY
45380: GREATEREQUAL
45381: PUSH
45382: LD_VAR 0 9
45386: PPUSH
45387: LD_INT 2
45389: PPUSH
45390: CALL_OW 275
45394: PUSH
45395: LD_VAR 0 14
45399: PUSH
45400: LD_INT 2
45402: ARRAY
45403: GREATEREQUAL
45404: AND
45405: PUSH
45406: LD_VAR 0 9
45410: PPUSH
45411: LD_INT 3
45413: PPUSH
45414: CALL_OW 275
45418: PUSH
45419: LD_VAR 0 14
45423: PUSH
45424: LD_INT 3
45426: ARRAY
45427: GREATEREQUAL
45428: AND
45429: IFFALSE 45441
// result := weapon ;
45431: LD_ADDR_VAR 0 3
45435: PUSH
45436: LD_VAR 0 18
45440: ST_TO_ADDR
// end ; end ;
45441: LD_VAR 0 3
45445: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45446: LD_INT 0
45448: PPUSH
45449: PPUSH
// result := true ;
45450: LD_ADDR_VAR 0 3
45454: PUSH
45455: LD_INT 1
45457: ST_TO_ADDR
// if array1 = array2 then
45458: LD_VAR 0 1
45462: PUSH
45463: LD_VAR 0 2
45467: EQUAL
45468: IFFALSE 45528
// begin for i = 1 to array1 do
45470: LD_ADDR_VAR 0 4
45474: PUSH
45475: DOUBLE
45476: LD_INT 1
45478: DEC
45479: ST_TO_ADDR
45480: LD_VAR 0 1
45484: PUSH
45485: FOR_TO
45486: IFFALSE 45524
// if array1 [ i ] <> array2 [ i ] then
45488: LD_VAR 0 1
45492: PUSH
45493: LD_VAR 0 4
45497: ARRAY
45498: PUSH
45499: LD_VAR 0 2
45503: PUSH
45504: LD_VAR 0 4
45508: ARRAY
45509: NONEQUAL
45510: IFFALSE 45522
// begin result := false ;
45512: LD_ADDR_VAR 0 3
45516: PUSH
45517: LD_INT 0
45519: ST_TO_ADDR
// break ;
45520: GO 45524
// end ;
45522: GO 45485
45524: POP
45525: POP
// end else
45526: GO 45536
// result := false ;
45528: LD_ADDR_VAR 0 3
45532: PUSH
45533: LD_INT 0
45535: ST_TO_ADDR
// end ;
45536: LD_VAR 0 3
45540: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45541: LD_INT 0
45543: PPUSH
45544: PPUSH
// if not array1 or not array2 then
45545: LD_VAR 0 1
45549: NOT
45550: PUSH
45551: LD_VAR 0 2
45555: NOT
45556: OR
45557: IFFALSE 45561
// exit ;
45559: GO 45625
// result := true ;
45561: LD_ADDR_VAR 0 3
45565: PUSH
45566: LD_INT 1
45568: ST_TO_ADDR
// for i = 1 to array1 do
45569: LD_ADDR_VAR 0 4
45573: PUSH
45574: DOUBLE
45575: LD_INT 1
45577: DEC
45578: ST_TO_ADDR
45579: LD_VAR 0 1
45583: PUSH
45584: FOR_TO
45585: IFFALSE 45623
// if array1 [ i ] <> array2 [ i ] then
45587: LD_VAR 0 1
45591: PUSH
45592: LD_VAR 0 4
45596: ARRAY
45597: PUSH
45598: LD_VAR 0 2
45602: PUSH
45603: LD_VAR 0 4
45607: ARRAY
45608: NONEQUAL
45609: IFFALSE 45621
// begin result := false ;
45611: LD_ADDR_VAR 0 3
45615: PUSH
45616: LD_INT 0
45618: ST_TO_ADDR
// break ;
45619: GO 45623
// end ;
45621: GO 45584
45623: POP
45624: POP
// end ;
45625: LD_VAR 0 3
45629: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45630: LD_INT 0
45632: PPUSH
45633: PPUSH
45634: PPUSH
// pom := GetBase ( fac ) ;
45635: LD_ADDR_VAR 0 5
45639: PUSH
45640: LD_VAR 0 1
45644: PPUSH
45645: CALL_OW 274
45649: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45650: LD_ADDR_VAR 0 4
45654: PUSH
45655: LD_VAR 0 2
45659: PUSH
45660: LD_INT 1
45662: ARRAY
45663: PPUSH
45664: LD_VAR 0 2
45668: PUSH
45669: LD_INT 2
45671: ARRAY
45672: PPUSH
45673: LD_VAR 0 2
45677: PUSH
45678: LD_INT 3
45680: ARRAY
45681: PPUSH
45682: LD_VAR 0 2
45686: PUSH
45687: LD_INT 4
45689: ARRAY
45690: PPUSH
45691: CALL_OW 449
45695: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45696: LD_ADDR_VAR 0 3
45700: PUSH
45701: LD_VAR 0 5
45705: PPUSH
45706: LD_INT 1
45708: PPUSH
45709: CALL_OW 275
45713: PUSH
45714: LD_VAR 0 4
45718: PUSH
45719: LD_INT 1
45721: ARRAY
45722: GREATEREQUAL
45723: PUSH
45724: LD_VAR 0 5
45728: PPUSH
45729: LD_INT 2
45731: PPUSH
45732: CALL_OW 275
45736: PUSH
45737: LD_VAR 0 4
45741: PUSH
45742: LD_INT 2
45744: ARRAY
45745: GREATEREQUAL
45746: AND
45747: PUSH
45748: LD_VAR 0 5
45752: PPUSH
45753: LD_INT 3
45755: PPUSH
45756: CALL_OW 275
45760: PUSH
45761: LD_VAR 0 4
45765: PUSH
45766: LD_INT 3
45768: ARRAY
45769: GREATEREQUAL
45770: AND
45771: ST_TO_ADDR
// end ;
45772: LD_VAR 0 3
45776: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45777: LD_INT 0
45779: PPUSH
45780: PPUSH
45781: PPUSH
45782: PPUSH
// pom := GetBase ( building ) ;
45783: LD_ADDR_VAR 0 3
45787: PUSH
45788: LD_VAR 0 1
45792: PPUSH
45793: CALL_OW 274
45797: ST_TO_ADDR
// if not pom then
45798: LD_VAR 0 3
45802: NOT
45803: IFFALSE 45807
// exit ;
45805: GO 45977
// btype := GetBType ( building ) ;
45807: LD_ADDR_VAR 0 5
45811: PUSH
45812: LD_VAR 0 1
45816: PPUSH
45817: CALL_OW 266
45821: ST_TO_ADDR
// if btype = b_armoury then
45822: LD_VAR 0 5
45826: PUSH
45827: LD_INT 4
45829: EQUAL
45830: IFFALSE 45840
// btype := b_barracks ;
45832: LD_ADDR_VAR 0 5
45836: PUSH
45837: LD_INT 5
45839: ST_TO_ADDR
// if btype = b_depot then
45840: LD_VAR 0 5
45844: PUSH
45845: LD_INT 0
45847: EQUAL
45848: IFFALSE 45858
// btype := b_warehouse ;
45850: LD_ADDR_VAR 0 5
45854: PUSH
45855: LD_INT 1
45857: ST_TO_ADDR
// if btype = b_workshop then
45858: LD_VAR 0 5
45862: PUSH
45863: LD_INT 2
45865: EQUAL
45866: IFFALSE 45876
// btype := b_factory ;
45868: LD_ADDR_VAR 0 5
45872: PUSH
45873: LD_INT 3
45875: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45876: LD_ADDR_VAR 0 4
45880: PUSH
45881: LD_VAR 0 5
45885: PPUSH
45886: LD_VAR 0 1
45890: PPUSH
45891: CALL_OW 248
45895: PPUSH
45896: CALL_OW 450
45900: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45901: LD_ADDR_VAR 0 2
45905: PUSH
45906: LD_VAR 0 3
45910: PPUSH
45911: LD_INT 1
45913: PPUSH
45914: CALL_OW 275
45918: PUSH
45919: LD_VAR 0 4
45923: PUSH
45924: LD_INT 1
45926: ARRAY
45927: GREATEREQUAL
45928: PUSH
45929: LD_VAR 0 3
45933: PPUSH
45934: LD_INT 2
45936: PPUSH
45937: CALL_OW 275
45941: PUSH
45942: LD_VAR 0 4
45946: PUSH
45947: LD_INT 2
45949: ARRAY
45950: GREATEREQUAL
45951: AND
45952: PUSH
45953: LD_VAR 0 3
45957: PPUSH
45958: LD_INT 3
45960: PPUSH
45961: CALL_OW 275
45965: PUSH
45966: LD_VAR 0 4
45970: PUSH
45971: LD_INT 3
45973: ARRAY
45974: GREATEREQUAL
45975: AND
45976: ST_TO_ADDR
// end ;
45977: LD_VAR 0 2
45981: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45982: LD_INT 0
45984: PPUSH
45985: PPUSH
45986: PPUSH
// pom := GetBase ( building ) ;
45987: LD_ADDR_VAR 0 4
45991: PUSH
45992: LD_VAR 0 1
45996: PPUSH
45997: CALL_OW 274
46001: ST_TO_ADDR
// if not pom then
46002: LD_VAR 0 4
46006: NOT
46007: IFFALSE 46011
// exit ;
46009: GO 46112
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46011: LD_ADDR_VAR 0 5
46015: PUSH
46016: LD_VAR 0 2
46020: PPUSH
46021: LD_VAR 0 1
46025: PPUSH
46026: CALL_OW 248
46030: PPUSH
46031: CALL_OW 450
46035: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46036: LD_ADDR_VAR 0 3
46040: PUSH
46041: LD_VAR 0 4
46045: PPUSH
46046: LD_INT 1
46048: PPUSH
46049: CALL_OW 275
46053: PUSH
46054: LD_VAR 0 5
46058: PUSH
46059: LD_INT 1
46061: ARRAY
46062: GREATEREQUAL
46063: PUSH
46064: LD_VAR 0 4
46068: PPUSH
46069: LD_INT 2
46071: PPUSH
46072: CALL_OW 275
46076: PUSH
46077: LD_VAR 0 5
46081: PUSH
46082: LD_INT 2
46084: ARRAY
46085: GREATEREQUAL
46086: AND
46087: PUSH
46088: LD_VAR 0 4
46092: PPUSH
46093: LD_INT 3
46095: PPUSH
46096: CALL_OW 275
46100: PUSH
46101: LD_VAR 0 5
46105: PUSH
46106: LD_INT 3
46108: ARRAY
46109: GREATEREQUAL
46110: AND
46111: ST_TO_ADDR
// end ;
46112: LD_VAR 0 3
46116: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46117: LD_INT 0
46119: PPUSH
46120: PPUSH
46121: PPUSH
46122: PPUSH
46123: PPUSH
46124: PPUSH
46125: PPUSH
46126: PPUSH
46127: PPUSH
46128: PPUSH
46129: PPUSH
// result := false ;
46130: LD_ADDR_VAR 0 8
46134: PUSH
46135: LD_INT 0
46137: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46138: LD_VAR 0 5
46142: NOT
46143: PUSH
46144: LD_VAR 0 1
46148: NOT
46149: OR
46150: PUSH
46151: LD_VAR 0 2
46155: NOT
46156: OR
46157: PUSH
46158: LD_VAR 0 3
46162: NOT
46163: OR
46164: IFFALSE 46168
// exit ;
46166: GO 46982
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46168: LD_ADDR_VAR 0 14
46172: PUSH
46173: LD_VAR 0 1
46177: PPUSH
46178: LD_VAR 0 2
46182: PPUSH
46183: LD_VAR 0 3
46187: PPUSH
46188: LD_VAR 0 4
46192: PPUSH
46193: LD_VAR 0 5
46197: PUSH
46198: LD_INT 1
46200: ARRAY
46201: PPUSH
46202: CALL_OW 248
46206: PPUSH
46207: LD_INT 0
46209: PPUSH
46210: CALL 48235 0 6
46214: ST_TO_ADDR
// if not hexes then
46215: LD_VAR 0 14
46219: NOT
46220: IFFALSE 46224
// exit ;
46222: GO 46982
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46224: LD_ADDR_VAR 0 17
46228: PUSH
46229: LD_VAR 0 5
46233: PPUSH
46234: LD_INT 22
46236: PUSH
46237: LD_VAR 0 13
46241: PPUSH
46242: CALL_OW 255
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 2
46253: PUSH
46254: LD_INT 30
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 30
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: LIST
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PPUSH
46283: CALL_OW 72
46287: ST_TO_ADDR
// for i = 1 to hexes do
46288: LD_ADDR_VAR 0 9
46292: PUSH
46293: DOUBLE
46294: LD_INT 1
46296: DEC
46297: ST_TO_ADDR
46298: LD_VAR 0 14
46302: PUSH
46303: FOR_TO
46304: IFFALSE 46980
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46306: LD_ADDR_VAR 0 13
46310: PUSH
46311: LD_VAR 0 14
46315: PUSH
46316: LD_VAR 0 9
46320: ARRAY
46321: PUSH
46322: LD_INT 1
46324: ARRAY
46325: PPUSH
46326: LD_VAR 0 14
46330: PUSH
46331: LD_VAR 0 9
46335: ARRAY
46336: PUSH
46337: LD_INT 2
46339: ARRAY
46340: PPUSH
46341: CALL_OW 428
46345: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46346: LD_VAR 0 14
46350: PUSH
46351: LD_VAR 0 9
46355: ARRAY
46356: PUSH
46357: LD_INT 1
46359: ARRAY
46360: PPUSH
46361: LD_VAR 0 14
46365: PUSH
46366: LD_VAR 0 9
46370: ARRAY
46371: PUSH
46372: LD_INT 2
46374: ARRAY
46375: PPUSH
46376: CALL_OW 351
46380: PUSH
46381: LD_VAR 0 14
46385: PUSH
46386: LD_VAR 0 9
46390: ARRAY
46391: PUSH
46392: LD_INT 1
46394: ARRAY
46395: PPUSH
46396: LD_VAR 0 14
46400: PUSH
46401: LD_VAR 0 9
46405: ARRAY
46406: PUSH
46407: LD_INT 2
46409: ARRAY
46410: PPUSH
46411: CALL_OW 488
46415: NOT
46416: OR
46417: PUSH
46418: LD_VAR 0 13
46422: PPUSH
46423: CALL_OW 247
46427: PUSH
46428: LD_INT 3
46430: EQUAL
46431: OR
46432: IFFALSE 46438
// exit ;
46434: POP
46435: POP
46436: GO 46982
// if not tmp then
46438: LD_VAR 0 13
46442: NOT
46443: IFFALSE 46447
// continue ;
46445: GO 46303
// result := true ;
46447: LD_ADDR_VAR 0 8
46451: PUSH
46452: LD_INT 1
46454: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46455: LD_VAR 0 6
46459: PUSH
46460: LD_VAR 0 13
46464: PPUSH
46465: CALL_OW 247
46469: PUSH
46470: LD_INT 2
46472: EQUAL
46473: AND
46474: PUSH
46475: LD_VAR 0 13
46479: PPUSH
46480: CALL_OW 263
46484: PUSH
46485: LD_INT 1
46487: EQUAL
46488: AND
46489: IFFALSE 46653
// begin if IsDrivenBy ( tmp ) then
46491: LD_VAR 0 13
46495: PPUSH
46496: CALL_OW 311
46500: IFFALSE 46504
// continue ;
46502: GO 46303
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46504: LD_VAR 0 6
46508: PPUSH
46509: LD_INT 3
46511: PUSH
46512: LD_INT 60
46514: PUSH
46515: EMPTY
46516: LIST
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 3
46524: PUSH
46525: LD_INT 55
46527: PUSH
46528: EMPTY
46529: LIST
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PPUSH
46539: CALL_OW 72
46543: IFFALSE 46651
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46545: LD_ADDR_VAR 0 18
46549: PUSH
46550: LD_VAR 0 6
46554: PPUSH
46555: LD_INT 3
46557: PUSH
46558: LD_INT 60
46560: PUSH
46561: EMPTY
46562: LIST
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 3
46570: PUSH
46571: LD_INT 55
46573: PUSH
46574: EMPTY
46575: LIST
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PPUSH
46585: CALL_OW 72
46589: PUSH
46590: LD_INT 1
46592: ARRAY
46593: ST_TO_ADDR
// if IsInUnit ( driver ) then
46594: LD_VAR 0 18
46598: PPUSH
46599: CALL_OW 310
46603: IFFALSE 46614
// ComExit ( driver ) ;
46605: LD_VAR 0 18
46609: PPUSH
46610: CALL 72177 0 1
// AddComEnterUnit ( driver , tmp ) ;
46614: LD_VAR 0 18
46618: PPUSH
46619: LD_VAR 0 13
46623: PPUSH
46624: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46628: LD_VAR 0 18
46632: PPUSH
46633: LD_VAR 0 7
46637: PPUSH
46638: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46642: LD_VAR 0 18
46646: PPUSH
46647: CALL_OW 181
// end ; continue ;
46651: GO 46303
// end ; if not cleaners or not tmp in cleaners then
46653: LD_VAR 0 6
46657: NOT
46658: PUSH
46659: LD_VAR 0 13
46663: PUSH
46664: LD_VAR 0 6
46668: IN
46669: NOT
46670: OR
46671: IFFALSE 46978
// begin if dep then
46673: LD_VAR 0 17
46677: IFFALSE 46813
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46679: LD_ADDR_VAR 0 16
46683: PUSH
46684: LD_VAR 0 17
46688: PUSH
46689: LD_INT 1
46691: ARRAY
46692: PPUSH
46693: CALL_OW 250
46697: PPUSH
46698: LD_VAR 0 17
46702: PUSH
46703: LD_INT 1
46705: ARRAY
46706: PPUSH
46707: CALL_OW 254
46711: PPUSH
46712: LD_INT 5
46714: PPUSH
46715: CALL_OW 272
46719: PUSH
46720: LD_VAR 0 17
46724: PUSH
46725: LD_INT 1
46727: ARRAY
46728: PPUSH
46729: CALL_OW 251
46733: PPUSH
46734: LD_VAR 0 17
46738: PUSH
46739: LD_INT 1
46741: ARRAY
46742: PPUSH
46743: CALL_OW 254
46747: PPUSH
46748: LD_INT 5
46750: PPUSH
46751: CALL_OW 273
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46760: LD_VAR 0 16
46764: PUSH
46765: LD_INT 1
46767: ARRAY
46768: PPUSH
46769: LD_VAR 0 16
46773: PUSH
46774: LD_INT 2
46776: ARRAY
46777: PPUSH
46778: CALL_OW 488
46782: IFFALSE 46813
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46784: LD_VAR 0 13
46788: PPUSH
46789: LD_VAR 0 16
46793: PUSH
46794: LD_INT 1
46796: ARRAY
46797: PPUSH
46798: LD_VAR 0 16
46802: PUSH
46803: LD_INT 2
46805: ARRAY
46806: PPUSH
46807: CALL_OW 111
// continue ;
46811: GO 46303
// end ; end ; r := GetDir ( tmp ) ;
46813: LD_ADDR_VAR 0 15
46817: PUSH
46818: LD_VAR 0 13
46822: PPUSH
46823: CALL_OW 254
46827: ST_TO_ADDR
// if r = 5 then
46828: LD_VAR 0 15
46832: PUSH
46833: LD_INT 5
46835: EQUAL
46836: IFFALSE 46846
// r := 0 ;
46838: LD_ADDR_VAR 0 15
46842: PUSH
46843: LD_INT 0
46845: ST_TO_ADDR
// for j = r to 5 do
46846: LD_ADDR_VAR 0 10
46850: PUSH
46851: DOUBLE
46852: LD_VAR 0 15
46856: DEC
46857: ST_TO_ADDR
46858: LD_INT 5
46860: PUSH
46861: FOR_TO
46862: IFFALSE 46976
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46864: LD_ADDR_VAR 0 11
46868: PUSH
46869: LD_VAR 0 13
46873: PPUSH
46874: CALL_OW 250
46878: PPUSH
46879: LD_VAR 0 10
46883: PPUSH
46884: LD_INT 2
46886: PPUSH
46887: CALL_OW 272
46891: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46892: LD_ADDR_VAR 0 12
46896: PUSH
46897: LD_VAR 0 13
46901: PPUSH
46902: CALL_OW 251
46906: PPUSH
46907: LD_VAR 0 10
46911: PPUSH
46912: LD_INT 2
46914: PPUSH
46915: CALL_OW 273
46919: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46920: LD_VAR 0 11
46924: PPUSH
46925: LD_VAR 0 12
46929: PPUSH
46930: CALL_OW 488
46934: PUSH
46935: LD_VAR 0 11
46939: PPUSH
46940: LD_VAR 0 12
46944: PPUSH
46945: CALL_OW 428
46949: NOT
46950: AND
46951: IFFALSE 46974
// begin ComMoveXY ( tmp , _x , _y ) ;
46953: LD_VAR 0 13
46957: PPUSH
46958: LD_VAR 0 11
46962: PPUSH
46963: LD_VAR 0 12
46967: PPUSH
46968: CALL_OW 111
// break ;
46972: GO 46976
// end ; end ;
46974: GO 46861
46976: POP
46977: POP
// end ; end ;
46978: GO 46303
46980: POP
46981: POP
// end ;
46982: LD_VAR 0 8
46986: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46987: LD_INT 0
46989: PPUSH
// result := true ;
46990: LD_ADDR_VAR 0 3
46994: PUSH
46995: LD_INT 1
46997: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46998: LD_VAR 0 2
47002: PUSH
47003: LD_INT 24
47005: DOUBLE
47006: EQUAL
47007: IFTRUE 47017
47009: LD_INT 33
47011: DOUBLE
47012: EQUAL
47013: IFTRUE 47017
47015: GO 47042
47017: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
47018: LD_ADDR_VAR 0 3
47022: PUSH
47023: LD_INT 32
47025: PPUSH
47026: LD_VAR 0 1
47030: PPUSH
47031: CALL_OW 321
47035: PUSH
47036: LD_INT 2
47038: EQUAL
47039: ST_TO_ADDR
47040: GO 47358
47042: LD_INT 20
47044: DOUBLE
47045: EQUAL
47046: IFTRUE 47050
47048: GO 47075
47050: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
47051: LD_ADDR_VAR 0 3
47055: PUSH
47056: LD_INT 6
47058: PPUSH
47059: LD_VAR 0 1
47063: PPUSH
47064: CALL_OW 321
47068: PUSH
47069: LD_INT 2
47071: EQUAL
47072: ST_TO_ADDR
47073: GO 47358
47075: LD_INT 22
47077: DOUBLE
47078: EQUAL
47079: IFTRUE 47089
47081: LD_INT 36
47083: DOUBLE
47084: EQUAL
47085: IFTRUE 47089
47087: GO 47114
47089: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
47090: LD_ADDR_VAR 0 3
47094: PUSH
47095: LD_INT 15
47097: PPUSH
47098: LD_VAR 0 1
47102: PPUSH
47103: CALL_OW 321
47107: PUSH
47108: LD_INT 2
47110: EQUAL
47111: ST_TO_ADDR
47112: GO 47358
47114: LD_INT 30
47116: DOUBLE
47117: EQUAL
47118: IFTRUE 47122
47120: GO 47147
47122: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47123: LD_ADDR_VAR 0 3
47127: PUSH
47128: LD_INT 20
47130: PPUSH
47131: LD_VAR 0 1
47135: PPUSH
47136: CALL_OW 321
47140: PUSH
47141: LD_INT 2
47143: EQUAL
47144: ST_TO_ADDR
47145: GO 47358
47147: LD_INT 28
47149: DOUBLE
47150: EQUAL
47151: IFTRUE 47161
47153: LD_INT 21
47155: DOUBLE
47156: EQUAL
47157: IFTRUE 47161
47159: GO 47186
47161: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47162: LD_ADDR_VAR 0 3
47166: PUSH
47167: LD_INT 21
47169: PPUSH
47170: LD_VAR 0 1
47174: PPUSH
47175: CALL_OW 321
47179: PUSH
47180: LD_INT 2
47182: EQUAL
47183: ST_TO_ADDR
47184: GO 47358
47186: LD_INT 16
47188: DOUBLE
47189: EQUAL
47190: IFTRUE 47194
47192: GO 47219
47194: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47195: LD_ADDR_VAR 0 3
47199: PUSH
47200: LD_INT 84
47202: PPUSH
47203: LD_VAR 0 1
47207: PPUSH
47208: CALL_OW 321
47212: PUSH
47213: LD_INT 2
47215: EQUAL
47216: ST_TO_ADDR
47217: GO 47358
47219: LD_INT 19
47221: DOUBLE
47222: EQUAL
47223: IFTRUE 47233
47225: LD_INT 23
47227: DOUBLE
47228: EQUAL
47229: IFTRUE 47233
47231: GO 47258
47233: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47234: LD_ADDR_VAR 0 3
47238: PUSH
47239: LD_INT 83
47241: PPUSH
47242: LD_VAR 0 1
47246: PPUSH
47247: CALL_OW 321
47251: PUSH
47252: LD_INT 2
47254: EQUAL
47255: ST_TO_ADDR
47256: GO 47358
47258: LD_INT 17
47260: DOUBLE
47261: EQUAL
47262: IFTRUE 47266
47264: GO 47291
47266: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47267: LD_ADDR_VAR 0 3
47271: PUSH
47272: LD_INT 39
47274: PPUSH
47275: LD_VAR 0 1
47279: PPUSH
47280: CALL_OW 321
47284: PUSH
47285: LD_INT 2
47287: EQUAL
47288: ST_TO_ADDR
47289: GO 47358
47291: LD_INT 18
47293: DOUBLE
47294: EQUAL
47295: IFTRUE 47299
47297: GO 47324
47299: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47300: LD_ADDR_VAR 0 3
47304: PUSH
47305: LD_INT 40
47307: PPUSH
47308: LD_VAR 0 1
47312: PPUSH
47313: CALL_OW 321
47317: PUSH
47318: LD_INT 2
47320: EQUAL
47321: ST_TO_ADDR
47322: GO 47358
47324: LD_INT 27
47326: DOUBLE
47327: EQUAL
47328: IFTRUE 47332
47330: GO 47357
47332: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47333: LD_ADDR_VAR 0 3
47337: PUSH
47338: LD_INT 35
47340: PPUSH
47341: LD_VAR 0 1
47345: PPUSH
47346: CALL_OW 321
47350: PUSH
47351: LD_INT 2
47353: EQUAL
47354: ST_TO_ADDR
47355: GO 47358
47357: POP
// end ;
47358: LD_VAR 0 3
47362: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47363: LD_INT 0
47365: PPUSH
47366: PPUSH
47367: PPUSH
47368: PPUSH
47369: PPUSH
47370: PPUSH
47371: PPUSH
47372: PPUSH
47373: PPUSH
47374: PPUSH
47375: PPUSH
// result := false ;
47376: LD_ADDR_VAR 0 6
47380: PUSH
47381: LD_INT 0
47383: ST_TO_ADDR
// if btype = b_depot then
47384: LD_VAR 0 2
47388: PUSH
47389: LD_INT 0
47391: EQUAL
47392: IFFALSE 47404
// begin result := true ;
47394: LD_ADDR_VAR 0 6
47398: PUSH
47399: LD_INT 1
47401: ST_TO_ADDR
// exit ;
47402: GO 48230
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47404: LD_VAR 0 1
47408: NOT
47409: PUSH
47410: LD_VAR 0 1
47414: PPUSH
47415: CALL_OW 266
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: IN
47430: NOT
47431: OR
47432: PUSH
47433: LD_VAR 0 2
47437: NOT
47438: OR
47439: PUSH
47440: LD_VAR 0 5
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: LD_INT 1
47450: PUSH
47451: LD_INT 2
47453: PUSH
47454: LD_INT 3
47456: PUSH
47457: LD_INT 4
47459: PUSH
47460: LD_INT 5
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: IN
47471: NOT
47472: OR
47473: PUSH
47474: LD_VAR 0 3
47478: PPUSH
47479: LD_VAR 0 4
47483: PPUSH
47484: CALL_OW 488
47488: NOT
47489: OR
47490: IFFALSE 47494
// exit ;
47492: GO 48230
// side := GetSide ( depot ) ;
47494: LD_ADDR_VAR 0 9
47498: PUSH
47499: LD_VAR 0 1
47503: PPUSH
47504: CALL_OW 255
47508: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47509: LD_VAR 0 9
47513: PPUSH
47514: LD_VAR 0 2
47518: PPUSH
47519: CALL 46987 0 2
47523: NOT
47524: IFFALSE 47528
// exit ;
47526: GO 48230
// pom := GetBase ( depot ) ;
47528: LD_ADDR_VAR 0 10
47532: PUSH
47533: LD_VAR 0 1
47537: PPUSH
47538: CALL_OW 274
47542: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47543: LD_ADDR_VAR 0 11
47547: PUSH
47548: LD_VAR 0 2
47552: PPUSH
47553: LD_VAR 0 1
47557: PPUSH
47558: CALL_OW 248
47562: PPUSH
47563: CALL_OW 450
47567: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47568: LD_VAR 0 10
47572: PPUSH
47573: LD_INT 1
47575: PPUSH
47576: CALL_OW 275
47580: PUSH
47581: LD_VAR 0 11
47585: PUSH
47586: LD_INT 1
47588: ARRAY
47589: GREATEREQUAL
47590: PUSH
47591: LD_VAR 0 10
47595: PPUSH
47596: LD_INT 2
47598: PPUSH
47599: CALL_OW 275
47603: PUSH
47604: LD_VAR 0 11
47608: PUSH
47609: LD_INT 2
47611: ARRAY
47612: GREATEREQUAL
47613: AND
47614: PUSH
47615: LD_VAR 0 10
47619: PPUSH
47620: LD_INT 3
47622: PPUSH
47623: CALL_OW 275
47627: PUSH
47628: LD_VAR 0 11
47632: PUSH
47633: LD_INT 3
47635: ARRAY
47636: GREATEREQUAL
47637: AND
47638: NOT
47639: IFFALSE 47643
// exit ;
47641: GO 48230
// if GetBType ( depot ) = b_depot then
47643: LD_VAR 0 1
47647: PPUSH
47648: CALL_OW 266
47652: PUSH
47653: LD_INT 0
47655: EQUAL
47656: IFFALSE 47668
// dist := 28 else
47658: LD_ADDR_VAR 0 14
47662: PUSH
47663: LD_INT 28
47665: ST_TO_ADDR
47666: GO 47676
// dist := 36 ;
47668: LD_ADDR_VAR 0 14
47672: PUSH
47673: LD_INT 36
47675: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47676: LD_VAR 0 1
47680: PPUSH
47681: LD_VAR 0 3
47685: PPUSH
47686: LD_VAR 0 4
47690: PPUSH
47691: CALL_OW 297
47695: PUSH
47696: LD_VAR 0 14
47700: GREATER
47701: IFFALSE 47705
// exit ;
47703: GO 48230
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47705: LD_ADDR_VAR 0 12
47709: PUSH
47710: LD_VAR 0 2
47714: PPUSH
47715: LD_VAR 0 3
47719: PPUSH
47720: LD_VAR 0 4
47724: PPUSH
47725: LD_VAR 0 5
47729: PPUSH
47730: LD_VAR 0 1
47734: PPUSH
47735: CALL_OW 248
47739: PPUSH
47740: LD_INT 0
47742: PPUSH
47743: CALL 48235 0 6
47747: ST_TO_ADDR
// if not hexes then
47748: LD_VAR 0 12
47752: NOT
47753: IFFALSE 47757
// exit ;
47755: GO 48230
// hex := GetHexInfo ( x , y ) ;
47757: LD_ADDR_VAR 0 15
47761: PUSH
47762: LD_VAR 0 3
47766: PPUSH
47767: LD_VAR 0 4
47771: PPUSH
47772: CALL_OW 546
47776: ST_TO_ADDR
// if hex [ 1 ] then
47777: LD_VAR 0 15
47781: PUSH
47782: LD_INT 1
47784: ARRAY
47785: IFFALSE 47789
// exit ;
47787: GO 48230
// height := hex [ 2 ] ;
47789: LD_ADDR_VAR 0 13
47793: PUSH
47794: LD_VAR 0 15
47798: PUSH
47799: LD_INT 2
47801: ARRAY
47802: ST_TO_ADDR
// for i = 1 to hexes do
47803: LD_ADDR_VAR 0 7
47807: PUSH
47808: DOUBLE
47809: LD_INT 1
47811: DEC
47812: ST_TO_ADDR
47813: LD_VAR 0 12
47817: PUSH
47818: FOR_TO
47819: IFFALSE 48149
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47821: LD_VAR 0 12
47825: PUSH
47826: LD_VAR 0 7
47830: ARRAY
47831: PUSH
47832: LD_INT 1
47834: ARRAY
47835: PPUSH
47836: LD_VAR 0 12
47840: PUSH
47841: LD_VAR 0 7
47845: ARRAY
47846: PUSH
47847: LD_INT 2
47849: ARRAY
47850: PPUSH
47851: CALL_OW 488
47855: NOT
47856: PUSH
47857: LD_VAR 0 12
47861: PUSH
47862: LD_VAR 0 7
47866: ARRAY
47867: PUSH
47868: LD_INT 1
47870: ARRAY
47871: PPUSH
47872: LD_VAR 0 12
47876: PUSH
47877: LD_VAR 0 7
47881: ARRAY
47882: PUSH
47883: LD_INT 2
47885: ARRAY
47886: PPUSH
47887: CALL_OW 428
47891: PUSH
47892: LD_INT 0
47894: GREATER
47895: OR
47896: PUSH
47897: LD_VAR 0 12
47901: PUSH
47902: LD_VAR 0 7
47906: ARRAY
47907: PUSH
47908: LD_INT 1
47910: ARRAY
47911: PPUSH
47912: LD_VAR 0 12
47916: PUSH
47917: LD_VAR 0 7
47921: ARRAY
47922: PUSH
47923: LD_INT 2
47925: ARRAY
47926: PPUSH
47927: CALL_OW 351
47931: OR
47932: IFFALSE 47938
// exit ;
47934: POP
47935: POP
47936: GO 48230
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47938: LD_ADDR_VAR 0 8
47942: PUSH
47943: LD_VAR 0 12
47947: PUSH
47948: LD_VAR 0 7
47952: ARRAY
47953: PUSH
47954: LD_INT 1
47956: ARRAY
47957: PPUSH
47958: LD_VAR 0 12
47962: PUSH
47963: LD_VAR 0 7
47967: ARRAY
47968: PUSH
47969: LD_INT 2
47971: ARRAY
47972: PPUSH
47973: CALL_OW 546
47977: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47978: LD_VAR 0 8
47982: PUSH
47983: LD_INT 1
47985: ARRAY
47986: PUSH
47987: LD_VAR 0 8
47991: PUSH
47992: LD_INT 2
47994: ARRAY
47995: PUSH
47996: LD_VAR 0 13
48000: PUSH
48001: LD_INT 2
48003: PLUS
48004: GREATER
48005: OR
48006: PUSH
48007: LD_VAR 0 8
48011: PUSH
48012: LD_INT 2
48014: ARRAY
48015: PUSH
48016: LD_VAR 0 13
48020: PUSH
48021: LD_INT 2
48023: MINUS
48024: LESS
48025: OR
48026: PUSH
48027: LD_VAR 0 8
48031: PUSH
48032: LD_INT 3
48034: ARRAY
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: LD_INT 8
48041: PUSH
48042: LD_INT 9
48044: PUSH
48045: LD_INT 10
48047: PUSH
48048: LD_INT 11
48050: PUSH
48051: LD_INT 12
48053: PUSH
48054: LD_INT 13
48056: PUSH
48057: LD_INT 16
48059: PUSH
48060: LD_INT 17
48062: PUSH
48063: LD_INT 18
48065: PUSH
48066: LD_INT 19
48068: PUSH
48069: LD_INT 20
48071: PUSH
48072: LD_INT 21
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: IN
48090: NOT
48091: OR
48092: PUSH
48093: LD_VAR 0 8
48097: PUSH
48098: LD_INT 5
48100: ARRAY
48101: NOT
48102: OR
48103: PUSH
48104: LD_VAR 0 8
48108: PUSH
48109: LD_INT 6
48111: ARRAY
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: LD_INT 2
48118: PUSH
48119: LD_INT 7
48121: PUSH
48122: LD_INT 9
48124: PUSH
48125: LD_INT 10
48127: PUSH
48128: LD_INT 11
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: IN
48139: NOT
48140: OR
48141: IFFALSE 48147
// exit ;
48143: POP
48144: POP
48145: GO 48230
// end ;
48147: GO 47818
48149: POP
48150: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48151: LD_VAR 0 9
48155: PPUSH
48156: LD_VAR 0 3
48160: PPUSH
48161: LD_VAR 0 4
48165: PPUSH
48166: LD_INT 20
48168: PPUSH
48169: CALL 40153 0 4
48173: PUSH
48174: LD_INT 4
48176: ARRAY
48177: IFFALSE 48181
// exit ;
48179: GO 48230
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48181: LD_VAR 0 2
48185: PUSH
48186: LD_INT 29
48188: PUSH
48189: LD_INT 30
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: IN
48196: PUSH
48197: LD_VAR 0 3
48201: PPUSH
48202: LD_VAR 0 4
48206: PPUSH
48207: LD_VAR 0 9
48211: PPUSH
48212: CALL_OW 440
48216: NOT
48217: AND
48218: IFFALSE 48222
// exit ;
48220: GO 48230
// result := true ;
48222: LD_ADDR_VAR 0 6
48226: PUSH
48227: LD_INT 1
48229: ST_TO_ADDR
// end ;
48230: LD_VAR 0 6
48234: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48235: LD_INT 0
48237: PPUSH
48238: PPUSH
48239: PPUSH
48240: PPUSH
48241: PPUSH
48242: PPUSH
48243: PPUSH
48244: PPUSH
48245: PPUSH
48246: PPUSH
48247: PPUSH
48248: PPUSH
48249: PPUSH
48250: PPUSH
48251: PPUSH
48252: PPUSH
48253: PPUSH
48254: PPUSH
48255: PPUSH
48256: PPUSH
48257: PPUSH
48258: PPUSH
48259: PPUSH
48260: PPUSH
48261: PPUSH
48262: PPUSH
48263: PPUSH
48264: PPUSH
48265: PPUSH
48266: PPUSH
48267: PPUSH
48268: PPUSH
48269: PPUSH
48270: PPUSH
48271: PPUSH
48272: PPUSH
48273: PPUSH
48274: PPUSH
48275: PPUSH
48276: PPUSH
48277: PPUSH
48278: PPUSH
48279: PPUSH
48280: PPUSH
48281: PPUSH
48282: PPUSH
48283: PPUSH
48284: PPUSH
48285: PPUSH
48286: PPUSH
48287: PPUSH
48288: PPUSH
48289: PPUSH
48290: PPUSH
48291: PPUSH
48292: PPUSH
48293: PPUSH
48294: PPUSH
// result = [ ] ;
48295: LD_ADDR_VAR 0 7
48299: PUSH
48300: EMPTY
48301: ST_TO_ADDR
// temp_list = [ ] ;
48302: LD_ADDR_VAR 0 9
48306: PUSH
48307: EMPTY
48308: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48309: LD_VAR 0 4
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: LD_INT 2
48322: PUSH
48323: LD_INT 3
48325: PUSH
48326: LD_INT 4
48328: PUSH
48329: LD_INT 5
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: IN
48340: NOT
48341: PUSH
48342: LD_VAR 0 1
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: IN
48357: PUSH
48358: LD_VAR 0 5
48362: PUSH
48363: LD_INT 1
48365: PUSH
48366: LD_INT 2
48368: PUSH
48369: LD_INT 3
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: LIST
48376: IN
48377: NOT
48378: AND
48379: OR
48380: IFFALSE 48384
// exit ;
48382: GO 66775
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48384: LD_VAR 0 1
48388: PUSH
48389: LD_INT 6
48391: PUSH
48392: LD_INT 7
48394: PUSH
48395: LD_INT 8
48397: PUSH
48398: LD_INT 13
48400: PUSH
48401: LD_INT 12
48403: PUSH
48404: LD_INT 15
48406: PUSH
48407: LD_INT 11
48409: PUSH
48410: LD_INT 14
48412: PUSH
48413: LD_INT 10
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: IN
48427: IFFALSE 48437
// btype = b_lab ;
48429: LD_ADDR_VAR 0 1
48433: PUSH
48434: LD_INT 6
48436: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48437: LD_VAR 0 6
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: LD_INT 1
48447: PUSH
48448: LD_INT 2
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: LIST
48455: IN
48456: NOT
48457: PUSH
48458: LD_VAR 0 1
48462: PUSH
48463: LD_INT 0
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: LD_INT 2
48471: PUSH
48472: LD_INT 3
48474: PUSH
48475: LD_INT 6
48477: PUSH
48478: LD_INT 36
48480: PUSH
48481: LD_INT 4
48483: PUSH
48484: LD_INT 5
48486: PUSH
48487: LD_INT 31
48489: PUSH
48490: LD_INT 32
48492: PUSH
48493: LD_INT 33
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: IN
48509: NOT
48510: PUSH
48511: LD_VAR 0 6
48515: PUSH
48516: LD_INT 1
48518: EQUAL
48519: AND
48520: OR
48521: PUSH
48522: LD_VAR 0 1
48526: PUSH
48527: LD_INT 2
48529: PUSH
48530: LD_INT 3
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: IN
48537: NOT
48538: PUSH
48539: LD_VAR 0 6
48543: PUSH
48544: LD_INT 2
48546: EQUAL
48547: AND
48548: OR
48549: IFFALSE 48559
// mode = 0 ;
48551: LD_ADDR_VAR 0 6
48555: PUSH
48556: LD_INT 0
48558: ST_TO_ADDR
// case mode of 0 :
48559: LD_VAR 0 6
48563: PUSH
48564: LD_INT 0
48566: DOUBLE
48567: EQUAL
48568: IFTRUE 48572
48570: GO 60025
48572: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48573: LD_ADDR_VAR 0 11
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: NEG
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: LD_INT 2
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: LD_INT 2
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: LD_INT 1
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 1
48688: PUSH
48689: LD_INT 2
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: LD_INT 2
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: NEG
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: PUSH
48720: LD_INT 3
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: LD_INT 3
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: LD_INT 2
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48766: LD_ADDR_VAR 0 12
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: PUSH
48848: LD_INT 1
48850: NEG
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 2
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 2
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: LD_INT 1
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 2
48889: NEG
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 2
48900: NEG
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 2
48912: NEG
48913: PUSH
48914: LD_INT 1
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 3
48923: NEG
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 3
48934: NEG
48935: PUSH
48936: LD_INT 1
48938: NEG
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48962: LD_ADDR_VAR 0 13
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: LD_INT 1
48982: NEG
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: LD_INT 1
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 1
49031: NEG
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: LD_INT 2
49047: NEG
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 2
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 2
49065: PUSH
49066: LD_INT 2
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: LD_INT 2
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 2
49085: NEG
49086: PUSH
49087: LD_INT 1
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 2
49097: NEG
49098: PUSH
49099: LD_INT 2
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 2
49109: NEG
49110: PUSH
49111: LD_INT 3
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 3
49121: NEG
49122: PUSH
49123: LD_INT 2
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 3
49133: NEG
49134: PUSH
49135: LD_INT 3
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49161: LD_ADDR_VAR 0 14
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: PUSH
49244: LD_INT 2
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: LD_INT 2
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: LD_INT 1
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: LD_INT 2
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: LD_INT 2
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 1
49296: NEG
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: NEG
49308: PUSH
49309: LD_INT 3
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: LD_INT 3
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: LD_INT 2
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49357: LD_ADDR_VAR 0 15
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: LD_INT 1
49377: NEG
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 1
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 0
49405: PUSH
49406: LD_INT 1
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 1
49415: NEG
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 1
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 2
49449: PUSH
49450: LD_INT 0
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 2
49459: PUSH
49460: LD_INT 1
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: LD_INT 1
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 2
49480: NEG
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 2
49491: NEG
49492: PUSH
49493: LD_INT 1
49495: NEG
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 2
49503: PUSH
49504: LD_INT 1
49506: NEG
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 3
49514: PUSH
49515: LD_INT 0
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 3
49524: PUSH
49525: LD_INT 1
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49550: LD_ADDR_VAR 0 16
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: LD_INT 1
49570: NEG
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: LD_INT 1
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: NEG
49632: PUSH
49633: LD_INT 2
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 2
49643: PUSH
49644: LD_INT 1
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 2
49653: PUSH
49654: LD_INT 2
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 1
49663: PUSH
49664: LD_INT 2
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 2
49673: NEG
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 2
49685: NEG
49686: PUSH
49687: LD_INT 2
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 3
49697: PUSH
49698: LD_INT 2
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 3
49707: PUSH
49708: LD_INT 3
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 2
49717: PUSH
49718: LD_INT 3
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49743: LD_ADDR_VAR 0 17
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: LD_INT 2
49828: NEG
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: LD_INT 2
49839: NEG
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 1
49847: PUSH
49848: LD_INT 1
49850: NEG
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: LD_INT 0
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 2
49868: PUSH
49869: LD_INT 1
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 2
49878: PUSH
49879: LD_INT 2
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: LD_INT 2
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: LD_INT 2
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: PUSH
49910: LD_INT 1
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 2
49919: NEG
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 2
49930: NEG
49931: PUSH
49932: LD_INT 1
49934: NEG
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 2
49942: NEG
49943: PUSH
49944: LD_INT 2
49946: NEG
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49973: LD_ADDR_VAR 0 18
49977: PUSH
49978: LD_INT 0
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: NEG
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: NEG
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: LD_INT 2
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: LD_INT 2
50069: NEG
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 1
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 2
50088: PUSH
50089: LD_INT 0
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 2
50098: PUSH
50099: LD_INT 1
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 2
50108: PUSH
50109: LD_INT 2
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 1
50118: PUSH
50119: LD_INT 2
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: LD_INT 2
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 2
50149: NEG
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 2
50160: NEG
50161: PUSH
50162: LD_INT 1
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 2
50172: NEG
50173: PUSH
50174: LD_INT 2
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50203: LD_ADDR_VAR 0 19
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: LD_INT 1
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 1
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: LD_INT 1
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: NEG
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 1
50272: NEG
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: NEG
50285: PUSH
50286: LD_INT 2
50288: NEG
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: LD_INT 2
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: LD_INT 1
50310: NEG
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 2
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 2
50328: PUSH
50329: LD_INT 1
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 2
50338: PUSH
50339: LD_INT 2
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: LD_INT 2
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: LD_INT 2
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 1
50368: NEG
50369: PUSH
50370: LD_INT 1
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 2
50379: NEG
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 2
50390: NEG
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 2
50402: NEG
50403: PUSH
50404: LD_INT 2
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50433: LD_ADDR_VAR 0 20
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: LD_INT 0
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: LD_INT 1
50453: NEG
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: LD_INT 0
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: LD_INT 1
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: LD_INT 0
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: NEG
50503: PUSH
50504: LD_INT 1
50506: NEG
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 1
50514: NEG
50515: PUSH
50516: LD_INT 2
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: LD_INT 2
50529: NEG
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: LD_INT 1
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 2
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 2
50558: PUSH
50559: LD_INT 1
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 2
50568: PUSH
50569: LD_INT 2
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: LD_INT 2
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: LD_INT 2
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 2
50609: NEG
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 2
50620: NEG
50621: PUSH
50622: LD_INT 1
50624: NEG
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 2
50632: NEG
50633: PUSH
50634: LD_INT 2
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50663: LD_ADDR_VAR 0 21
50667: PUSH
50668: LD_INT 0
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 0
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 1
50701: PUSH
50702: LD_INT 1
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: LD_INT 1
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: LD_INT 0
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 1
50744: NEG
50745: PUSH
50746: LD_INT 2
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: LD_INT 2
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 2
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 2
50788: PUSH
50789: LD_INT 1
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 2
50798: PUSH
50799: LD_INT 2
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: LD_INT 2
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: LD_INT 2
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 2
50839: NEG
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 2
50850: NEG
50851: PUSH
50852: LD_INT 1
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 2
50862: NEG
50863: PUSH
50864: LD_INT 2
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50893: LD_ADDR_VAR 0 22
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: NEG
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: LD_INT 2
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: LD_INT 2
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 1
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 2
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 2
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 2
51028: PUSH
51029: LD_INT 2
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: LD_INT 2
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: LD_INT 2
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: LD_INT 1
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 2
51069: NEG
51070: PUSH
51071: LD_INT 0
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 2
51080: NEG
51081: PUSH
51082: LD_INT 1
51084: NEG
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 2
51092: NEG
51093: PUSH
51094: LD_INT 2
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51123: LD_ADDR_VAR 0 23
51127: PUSH
51128: LD_INT 0
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 1
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: LD_INT 1
51196: NEG
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 1
51204: NEG
51205: PUSH
51206: LD_INT 2
51208: NEG
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 0
51216: PUSH
51217: LD_INT 2
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 2
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 2
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 2
51258: PUSH
51259: LD_INT 2
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: LD_INT 2
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 0
51278: PUSH
51279: LD_INT 2
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 1
51288: NEG
51289: PUSH
51290: LD_INT 1
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 2
51299: NEG
51300: PUSH
51301: LD_INT 0
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 2
51310: NEG
51311: PUSH
51312: LD_INT 1
51314: NEG
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 2
51322: NEG
51323: PUSH
51324: LD_INT 2
51326: NEG
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 2
51334: NEG
51335: PUSH
51336: LD_INT 3
51338: NEG
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 1
51346: NEG
51347: PUSH
51348: LD_INT 3
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: LD_INT 2
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 2
51369: PUSH
51370: LD_INT 1
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51403: LD_ADDR_VAR 0 24
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 1
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: LD_INT 1
51476: NEG
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: LD_INT 2
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 2
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 2
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 2
51538: PUSH
51539: LD_INT 2
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: LD_INT 2
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: LD_INT 2
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: LD_INT 1
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 2
51579: NEG
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 2
51590: NEG
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 2
51602: NEG
51603: PUSH
51604: LD_INT 2
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: LD_INT 2
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 2
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 3
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 3
51646: PUSH
51647: LD_INT 2
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51679: LD_ADDR_VAR 0 25
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 0
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: LD_INT 1
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 1
51748: NEG
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: LD_INT 2
51764: NEG
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: LD_INT 2
51775: NEG
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 2
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 2
51804: PUSH
51805: LD_INT 1
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 2
51814: PUSH
51815: LD_INT 2
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: LD_INT 2
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: LD_INT 2
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 1
51844: NEG
51845: PUSH
51846: LD_INT 1
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 2
51855: NEG
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 2
51866: NEG
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 2
51878: NEG
51879: PUSH
51880: LD_INT 2
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 3
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 3
51900: PUSH
51901: LD_INT 2
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 2
51910: PUSH
51911: LD_INT 3
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 1
51920: PUSH
51921: LD_INT 3
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51953: LD_ADDR_VAR 0 26
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 1
52022: NEG
52023: PUSH
52024: LD_INT 1
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: PUSH
52036: LD_INT 2
52038: NEG
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: LD_INT 2
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 2
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 2
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 2
52088: PUSH
52089: LD_INT 2
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: PUSH
52099: LD_INT 2
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: LD_INT 2
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: NEG
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 2
52129: NEG
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 2
52140: NEG
52141: PUSH
52142: LD_INT 1
52144: NEG
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 2
52152: NEG
52153: PUSH
52154: LD_INT 2
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 2
52164: PUSH
52165: LD_INT 3
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 1
52174: PUSH
52175: LD_INT 3
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: LD_INT 2
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 2
52195: NEG
52196: PUSH
52197: LD_INT 1
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52229: LD_ADDR_VAR 0 27
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: LD_INT 0
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 0
52246: PUSH
52247: LD_INT 1
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 1
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 0
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 1
52287: NEG
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 1
52298: NEG
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 1
52310: NEG
52311: PUSH
52312: LD_INT 2
52314: NEG
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: LD_INT 2
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 1
52333: PUSH
52334: LD_INT 1
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 2
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 2
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 2
52364: PUSH
52365: LD_INT 2
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: LD_INT 2
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: LD_INT 2
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: NEG
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 2
52405: NEG
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 2
52416: NEG
52417: PUSH
52418: LD_INT 1
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 2
52428: NEG
52429: PUSH
52430: LD_INT 2
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: LD_INT 2
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 2
52451: NEG
52452: PUSH
52453: LD_INT 1
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 3
52462: NEG
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 3
52474: NEG
52475: PUSH
52476: LD_INT 2
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52509: LD_ADDR_VAR 0 28
52513: PUSH
52514: LD_INT 0
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 0
52526: PUSH
52527: LD_INT 1
52529: NEG
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 1
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 0
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 1
52567: NEG
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: LD_INT 2
52594: NEG
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: LD_INT 2
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 1
52613: PUSH
52614: LD_INT 1
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 2
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 2
52634: PUSH
52635: LD_INT 1
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 2
52644: PUSH
52645: LD_INT 2
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 1
52654: PUSH
52655: LD_INT 2
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: LD_INT 2
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 2
52685: NEG
52686: PUSH
52687: LD_INT 0
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 2
52696: NEG
52697: PUSH
52698: LD_INT 1
52700: NEG
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 2
52708: NEG
52709: PUSH
52710: LD_INT 2
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 2
52720: NEG
52721: PUSH
52722: LD_INT 3
52724: NEG
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 1
52732: NEG
52733: PUSH
52734: LD_INT 3
52736: NEG
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 3
52744: NEG
52745: PUSH
52746: LD_INT 1
52748: NEG
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 3
52756: NEG
52757: PUSH
52758: LD_INT 2
52760: NEG
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52791: LD_ADDR_VAR 0 29
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: LD_INT 1
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 1
52860: NEG
52861: PUSH
52862: LD_INT 1
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: LD_INT 2
52876: NEG
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: LD_INT 2
52887: NEG
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 1
52895: PUSH
52896: LD_INT 1
52898: NEG
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 2
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 2
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: PUSH
52927: LD_INT 2
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: LD_INT 2
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 2
52957: NEG
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 2
52969: NEG
52970: PUSH
52971: LD_INT 2
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 2
52981: NEG
52982: PUSH
52983: LD_INT 3
52985: NEG
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 2
52993: PUSH
52994: LD_INT 1
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 3
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: PUSH
53015: LD_INT 3
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: LD_INT 2
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 3
53035: NEG
53036: PUSH
53037: LD_INT 2
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53070: LD_ADDR_VAR 0 30
53074: PUSH
53075: LD_INT 0
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: LD_INT 1
53090: NEG
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 1
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 1
53108: PUSH
53109: LD_INT 1
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: LD_INT 1
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 1
53128: NEG
53129: PUSH
53130: LD_INT 0
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: LD_INT 1
53143: NEG
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: LD_INT 2
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: LD_INT 2
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: PUSH
53175: LD_INT 1
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 2
53185: PUSH
53186: LD_INT 0
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 2
53195: PUSH
53196: LD_INT 1
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 2
53205: PUSH
53206: LD_INT 2
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: LD_INT 2
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 1
53225: NEG
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 2
53236: NEG
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 2
53247: NEG
53248: PUSH
53249: LD_INT 1
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: LD_INT 3
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 1
53271: PUSH
53272: LD_INT 2
53274: NEG
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 3
53282: PUSH
53283: LD_INT 2
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 2
53292: PUSH
53293: LD_INT 3
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 2
53302: NEG
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 3
53313: NEG
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53348: LD_ADDR_VAR 0 31
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: LD_INT 1
53368: NEG
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: PUSH
53387: LD_INT 1
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 1
53406: NEG
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: NEG
53418: PUSH
53419: LD_INT 1
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 1
53429: NEG
53430: PUSH
53431: LD_INT 2
53433: NEG
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: LD_INT 1
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 2
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 2
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 2
53472: PUSH
53473: LD_INT 2
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 1
53482: PUSH
53483: LD_INT 2
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: LD_INT 2
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: NEG
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 2
53513: NEG
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 2
53525: NEG
53526: PUSH
53527: LD_INT 2
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 2
53537: NEG
53538: PUSH
53539: LD_INT 3
53541: NEG
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 2
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 3
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: LD_INT 3
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: LD_INT 2
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 3
53591: NEG
53592: PUSH
53593: LD_INT 2
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53626: LD_ADDR_VAR 0 32
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: LD_INT 1
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: LD_INT 0
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: LD_INT 1
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 1
53695: NEG
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: LD_INT 2
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: LD_INT 2
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 2
53741: PUSH
53742: LD_INT 1
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 2
53751: PUSH
53752: LD_INT 2
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: LD_INT 2
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: LD_INT 2
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 1
53781: NEG
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 2
53792: NEG
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 2
53803: NEG
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 1
53815: NEG
53816: PUSH
53817: LD_INT 3
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: LD_INT 2
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 3
53838: PUSH
53839: LD_INT 2
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 2
53848: PUSH
53849: LD_INT 3
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 2
53858: NEG
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 3
53869: NEG
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53904: LD_ADDR_VAR 0 33
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: LD_INT 0
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 0
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: LD_INT 2
53989: NEG
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: LD_INT 1
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 2
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 2
54018: PUSH
54019: LD_INT 1
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 1
54028: PUSH
54029: LD_INT 2
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: LD_INT 2
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 1
54048: NEG
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 2
54059: NEG
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 2
54070: NEG
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 2
54082: NEG
54083: PUSH
54084: LD_INT 2
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 2
54094: NEG
54095: PUSH
54096: LD_INT 3
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 2
54106: PUSH
54107: LD_INT 1
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 3
54117: PUSH
54118: LD_INT 1
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: LD_INT 3
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 1
54137: NEG
54138: PUSH
54139: LD_INT 2
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 3
54148: NEG
54149: PUSH
54150: LD_INT 2
54152: NEG
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54183: LD_ADDR_VAR 0 34
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: LD_INT 0
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 1
54252: NEG
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 1
54264: NEG
54265: PUSH
54266: LD_INT 2
54268: NEG
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: LD_INT 2
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: PUSH
54288: LD_INT 1
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 2
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 2
54308: PUSH
54309: LD_INT 2
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: LD_INT 2
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: LD_INT 1
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 2
54339: NEG
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 2
54350: NEG
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 2
54362: NEG
54363: PUSH
54364: LD_INT 2
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 1
54374: NEG
54375: PUSH
54376: LD_INT 3
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: LD_INT 2
54389: NEG
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 3
54397: PUSH
54398: LD_INT 2
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 2
54407: PUSH
54408: LD_INT 3
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 2
54417: NEG
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 3
54428: NEG
54429: PUSH
54430: LD_INT 1
54432: NEG
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54463: LD_ADDR_VAR 0 35
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: LD_INT 1
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: LD_INT 1
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: NEG
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 2
54544: PUSH
54545: LD_INT 1
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 2
54554: NEG
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54575: LD_ADDR_VAR 0 36
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: LD_INT 1
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: LD_INT 0
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: LD_INT 1
54648: NEG
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 1
54656: NEG
54657: PUSH
54658: LD_INT 2
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: LD_INT 2
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54687: LD_ADDR_VAR 0 37
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: LD_INT 1
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: LD_INT 1
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: NEG
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: LD_INT 1
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54799: LD_ADDR_VAR 0 38
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 1
54857: NEG
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 2
54880: PUSH
54881: LD_INT 1
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 2
54890: NEG
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54911: LD_ADDR_VAR 0 39
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: LD_INT 2
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: LD_INT 2
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55023: LD_ADDR_VAR 0 40
55027: PUSH
55028: LD_INT 0
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: LD_INT 1
55043: NEG
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 1
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: PUSH
55062: LD_INT 1
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: NEG
55093: PUSH
55094: LD_INT 1
55096: NEG
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 1
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55135: LD_ADDR_VAR 0 41
55139: PUSH
55140: LD_INT 0
55142: PUSH
55143: LD_INT 0
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 1
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 1
55193: NEG
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 1
55204: NEG
55205: PUSH
55206: LD_INT 1
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: LD_INT 2
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 1
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 2
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 2
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 2
55259: PUSH
55260: LD_INT 2
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: LD_INT 2
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 1
55279: NEG
55280: PUSH
55281: LD_INT 1
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 2
55290: NEG
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 2
55301: NEG
55302: PUSH
55303: LD_INT 1
55305: NEG
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 2
55313: NEG
55314: PUSH
55315: LD_INT 2
55317: NEG
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 2
55325: NEG
55326: PUSH
55327: LD_INT 3
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 2
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 3
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 3
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 3
55368: PUSH
55369: LD_INT 2
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 3
55378: PUSH
55379: LD_INT 3
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 2
55388: PUSH
55389: LD_INT 3
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 2
55398: NEG
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 3
55409: NEG
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 3
55420: NEG
55421: PUSH
55422: LD_INT 1
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 3
55432: NEG
55433: PUSH
55434: LD_INT 2
55436: NEG
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 3
55444: NEG
55445: PUSH
55446: LD_INT 3
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55485: LD_ADDR_VAR 0 42
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 1
55523: PUSH
55524: LD_INT 1
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 1
55543: NEG
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 1
55554: NEG
55555: PUSH
55556: LD_INT 1
55558: NEG
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 1
55566: NEG
55567: PUSH
55568: LD_INT 2
55570: NEG
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: LD_INT 2
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 2
55600: PUSH
55601: LD_INT 1
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 2
55610: PUSH
55611: LD_INT 2
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: LD_INT 2
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: LD_INT 2
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: LD_INT 1
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 2
55651: NEG
55652: PUSH
55653: LD_INT 1
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 2
55663: NEG
55664: PUSH
55665: LD_INT 2
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 2
55675: NEG
55676: PUSH
55677: LD_INT 3
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: LD_INT 3
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: LD_INT 3
55702: NEG
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: LD_INT 2
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 3
55721: PUSH
55722: LD_INT 2
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 3
55731: PUSH
55732: LD_INT 3
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 2
55741: PUSH
55742: LD_INT 3
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: LD_INT 3
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: LD_INT 3
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: LD_INT 2
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 3
55782: NEG
55783: PUSH
55784: LD_INT 2
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 3
55794: NEG
55795: PUSH
55796: LD_INT 3
55798: NEG
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55835: LD_ADDR_VAR 0 43
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: LD_INT 1
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 1
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: LD_INT 1
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: LD_INT 1
55908: NEG
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: LD_INT 2
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 0
55928: PUSH
55929: LD_INT 2
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 2
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 2
55960: PUSH
55961: LD_INT 1
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 1
55970: PUSH
55971: LD_INT 2
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: LD_INT 2
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 1
55990: NEG
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 2
56001: NEG
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 2
56012: NEG
56013: PUSH
56014: LD_INT 1
56016: NEG
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 1
56024: NEG
56025: PUSH
56026: LD_INT 3
56028: NEG
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: LD_INT 3
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 1
56047: PUSH
56048: LD_INT 2
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 2
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 3
56069: PUSH
56070: LD_INT 0
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 3
56079: PUSH
56080: LD_INT 1
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 1
56089: PUSH
56090: LD_INT 3
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: LD_INT 3
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 1
56109: NEG
56110: PUSH
56111: LD_INT 2
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 2
56120: NEG
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 3
56131: NEG
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 3
56142: NEG
56143: PUSH
56144: LD_INT 1
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56183: LD_ADDR_VAR 0 44
56187: PUSH
56188: LD_INT 0
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: LD_INT 1
56203: NEG
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 1
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 1
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: LD_INT 1
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 1
56241: NEG
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: LD_INT 1
56256: NEG
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 1
56264: NEG
56265: PUSH
56266: LD_INT 2
56268: NEG
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 1
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 2
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 2
56297: PUSH
56298: LD_INT 1
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 2
56307: PUSH
56308: LD_INT 2
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: LD_INT 2
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 2
56338: NEG
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 2
56349: NEG
56350: PUSH
56351: LD_INT 1
56353: NEG
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 2
56361: NEG
56362: PUSH
56363: LD_INT 2
56365: NEG
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 2
56373: NEG
56374: PUSH
56375: LD_INT 3
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 2
56385: PUSH
56386: LD_INT 1
56388: NEG
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 3
56396: PUSH
56397: LD_INT 0
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 3
56406: PUSH
56407: LD_INT 1
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 3
56416: PUSH
56417: LD_INT 2
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 3
56426: PUSH
56427: LD_INT 3
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 2
56436: PUSH
56437: LD_INT 3
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 2
56446: NEG
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 3
56457: NEG
56458: PUSH
56459: LD_INT 0
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 3
56468: NEG
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 3
56480: NEG
56481: PUSH
56482: LD_INT 2
56484: NEG
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 3
56492: NEG
56493: PUSH
56494: LD_INT 3
56496: NEG
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56533: LD_ADDR_VAR 0 45
56537: PUSH
56538: LD_INT 0
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: LD_INT 1
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: LD_INT 1
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 0
56581: PUSH
56582: LD_INT 1
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: LD_INT 1
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 1
56614: NEG
56615: PUSH
56616: LD_INT 2
56618: NEG
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 0
56626: PUSH
56627: LD_INT 2
56629: NEG
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 1
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 2
56648: PUSH
56649: LD_INT 1
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 2
56658: PUSH
56659: LD_INT 2
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 1
56668: PUSH
56669: LD_INT 2
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: LD_INT 2
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: LD_INT 1
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 2
56699: NEG
56700: PUSH
56701: LD_INT 1
56703: NEG
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 2
56711: NEG
56712: PUSH
56713: LD_INT 2
56715: NEG
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 2
56723: NEG
56724: PUSH
56725: LD_INT 3
56727: NEG
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 1
56735: NEG
56736: PUSH
56737: LD_INT 3
56739: NEG
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: LD_INT 3
56750: NEG
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 1
56758: PUSH
56759: LD_INT 2
56761: NEG
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 3
56769: PUSH
56770: LD_INT 2
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 3
56779: PUSH
56780: LD_INT 3
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 2
56789: PUSH
56790: LD_INT 3
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 1
56799: PUSH
56800: LD_INT 3
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 0
56809: PUSH
56810: LD_INT 3
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 1
56819: NEG
56820: PUSH
56821: LD_INT 2
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 3
56830: NEG
56831: PUSH
56832: LD_INT 2
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 3
56842: NEG
56843: PUSH
56844: LD_INT 3
56846: NEG
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56883: LD_ADDR_VAR 0 46
56887: PUSH
56888: LD_INT 0
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: LD_INT 1
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 1
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: LD_INT 1
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: LD_INT 1
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 1
56941: NEG
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: LD_INT 1
56956: NEG
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 1
56964: NEG
56965: PUSH
56966: LD_INT 2
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: LD_INT 2
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: LD_INT 1
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 2
56998: PUSH
56999: LD_INT 0
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 2
57008: PUSH
57009: LD_INT 1
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: LD_INT 2
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: LD_INT 2
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: LD_INT 1
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 2
57049: NEG
57050: PUSH
57051: LD_INT 0
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 2
57060: NEG
57061: PUSH
57062: LD_INT 1
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 1
57072: NEG
57073: PUSH
57074: LD_INT 3
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 0
57084: PUSH
57085: LD_INT 3
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 1
57095: PUSH
57096: LD_INT 2
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 2
57106: PUSH
57107: LD_INT 1
57109: NEG
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 3
57117: PUSH
57118: LD_INT 0
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 3
57127: PUSH
57128: LD_INT 1
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: LD_INT 3
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: LD_INT 3
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: LD_INT 2
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 2
57168: NEG
57169: PUSH
57170: LD_INT 1
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 3
57179: NEG
57180: PUSH
57181: LD_INT 0
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 3
57190: NEG
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57231: LD_ADDR_VAR 0 47
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: LD_INT 0
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 1
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 1
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 0
57279: PUSH
57280: LD_INT 1
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: LD_INT 0
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: LD_INT 1
57304: NEG
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 1
57312: NEG
57313: PUSH
57314: LD_INT 2
57316: NEG
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 0
57324: PUSH
57325: LD_INT 2
57327: NEG
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 1
57335: PUSH
57336: LD_INT 1
57338: NEG
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 2
57346: NEG
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 2
57358: NEG
57359: PUSH
57360: LD_INT 2
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57382: LD_ADDR_VAR 0 48
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 0
57399: PUSH
57400: LD_INT 1
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 1
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: LD_INT 1
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 1
57440: NEG
57441: PUSH
57442: LD_INT 0
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 1
57451: NEG
57452: PUSH
57453: LD_INT 1
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 1
57463: NEG
57464: PUSH
57465: LD_INT 2
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: LD_INT 2
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: LD_INT 1
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 2
57497: PUSH
57498: LD_INT 0
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 2
57507: PUSH
57508: LD_INT 1
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57529: LD_ADDR_VAR 0 49
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: LD_INT 1
57549: NEG
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: LD_INT 0
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: LD_INT 1
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: LD_INT 1
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: NEG
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 1
57598: NEG
57599: PUSH
57600: LD_INT 1
57602: NEG
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 1
57610: PUSH
57611: LD_INT 1
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 2
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 2
57631: PUSH
57632: LD_INT 1
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 2
57641: PUSH
57642: LD_INT 2
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 1
57651: PUSH
57652: LD_INT 2
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57673: LD_ADDR_VAR 0 50
57677: PUSH
57678: LD_INT 0
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 0
57690: PUSH
57691: LD_INT 1
57693: NEG
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: LD_INT 0
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 1
57711: PUSH
57712: LD_INT 1
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: LD_INT 1
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 1
57731: NEG
57732: PUSH
57733: LD_INT 0
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: LD_INT 1
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 2
57754: PUSH
57755: LD_INT 1
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 2
57764: PUSH
57765: LD_INT 2
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 1
57774: PUSH
57775: LD_INT 2
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 0
57784: PUSH
57785: LD_INT 2
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 1
57794: NEG
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57817: LD_ADDR_VAR 0 51
57821: PUSH
57822: LD_INT 0
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 0
57834: PUSH
57835: LD_INT 1
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 1
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 1
57855: PUSH
57856: LD_INT 1
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 1
57875: NEG
57876: PUSH
57877: LD_INT 0
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 1
57886: NEG
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 1
57898: PUSH
57899: LD_INT 2
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: LD_INT 2
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: PUSH
57920: LD_INT 1
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 2
57929: NEG
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 2
57940: NEG
57941: PUSH
57942: LD_INT 1
57944: NEG
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57964: LD_ADDR_VAR 0 52
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 0
57981: PUSH
57982: LD_INT 1
57984: NEG
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 1
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: LD_INT 1
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: LD_INT 1
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: NEG
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 1
58033: NEG
58034: PUSH
58035: LD_INT 1
58037: NEG
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 1
58045: NEG
58046: PUSH
58047: LD_INT 2
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: LD_INT 1
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 2
58068: NEG
58069: PUSH
58070: LD_INT 0
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 2
58079: NEG
58080: PUSH
58081: LD_INT 1
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: LD_INT 2
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58115: LD_ADDR_VAR 0 53
58119: PUSH
58120: LD_INT 0
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 0
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 1
58143: PUSH
58144: LD_INT 0
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 1
58153: PUSH
58154: LD_INT 1
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: LD_INT 1
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 1
58173: NEG
58174: PUSH
58175: LD_INT 0
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 1
58184: NEG
58185: PUSH
58186: LD_INT 1
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 1
58196: NEG
58197: PUSH
58198: LD_INT 2
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 0
58208: PUSH
58209: LD_INT 2
58211: NEG
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 2
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 2
58240: PUSH
58241: LD_INT 1
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 2
58250: PUSH
58251: LD_INT 2
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 1
58260: PUSH
58261: LD_INT 2
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 0
58270: PUSH
58271: LD_INT 2
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 1
58280: NEG
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 2
58291: NEG
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 2
58302: NEG
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 2
58314: NEG
58315: PUSH
58316: LD_INT 2
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58345: LD_ADDR_VAR 0 54
58349: PUSH
58350: LD_INT 0
58352: PUSH
58353: LD_INT 0
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 1
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 1
58383: PUSH
58384: LD_INT 1
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: LD_INT 1
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 1
58414: NEG
58415: PUSH
58416: LD_INT 1
58418: NEG
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: LD_INT 2
58430: NEG
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 0
58438: PUSH
58439: LD_INT 2
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: LD_INT 1
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 2
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 2
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 2
58480: PUSH
58481: LD_INT 2
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 1
58490: PUSH
58491: LD_INT 2
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 0
58500: PUSH
58501: LD_INT 2
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 1
58510: NEG
58511: PUSH
58512: LD_INT 1
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 2
58521: NEG
58522: PUSH
58523: LD_INT 0
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 2
58532: NEG
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 2
58544: NEG
58545: PUSH
58546: LD_INT 2
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58575: LD_ADDR_VAR 0 55
58579: PUSH
58580: LD_INT 0
58582: PUSH
58583: LD_INT 0
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 0
58592: PUSH
58593: LD_INT 1
58595: NEG
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 1
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 1
58613: PUSH
58614: LD_INT 1
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 0
58623: PUSH
58624: LD_INT 1
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 1
58644: NEG
58645: PUSH
58646: LD_INT 1
58648: NEG
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 1
58656: NEG
58657: PUSH
58658: LD_INT 2
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 0
58668: PUSH
58669: LD_INT 2
58671: NEG
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 1
58679: PUSH
58680: LD_INT 1
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 2
58690: PUSH
58691: LD_INT 0
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 2
58700: PUSH
58701: LD_INT 1
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 2
58710: PUSH
58711: LD_INT 2
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 1
58720: PUSH
58721: LD_INT 2
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 0
58730: PUSH
58731: LD_INT 2
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 1
58740: NEG
58741: PUSH
58742: LD_INT 1
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 2
58751: NEG
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 2
58762: NEG
58763: PUSH
58764: LD_INT 1
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 2
58774: NEG
58775: PUSH
58776: LD_INT 2
58778: NEG
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58805: LD_ADDR_VAR 0 56
58809: PUSH
58810: LD_INT 0
58812: PUSH
58813: LD_INT 0
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 1
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 1
58843: PUSH
58844: LD_INT 1
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 0
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 1
58863: NEG
58864: PUSH
58865: LD_INT 0
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 1
58874: NEG
58875: PUSH
58876: LD_INT 1
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 1
58886: NEG
58887: PUSH
58888: LD_INT 2
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: LD_INT 2
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 1
58909: PUSH
58910: LD_INT 1
58912: NEG
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 2
58920: PUSH
58921: LD_INT 0
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 2
58930: PUSH
58931: LD_INT 1
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 2
58940: PUSH
58941: LD_INT 2
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 1
58950: PUSH
58951: LD_INT 2
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: LD_INT 2
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 1
58970: NEG
58971: PUSH
58972: LD_INT 1
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 2
58981: NEG
58982: PUSH
58983: LD_INT 0
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 2
58992: NEG
58993: PUSH
58994: LD_INT 1
58996: NEG
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 2
59004: NEG
59005: PUSH
59006: LD_INT 2
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59035: LD_ADDR_VAR 0 57
59039: PUSH
59040: LD_INT 0
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 0
59052: PUSH
59053: LD_INT 1
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: PUSH
59074: LD_INT 1
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: LD_INT 1
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 1
59093: NEG
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 1
59104: NEG
59105: PUSH
59106: LD_INT 1
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: NEG
59117: PUSH
59118: LD_INT 2
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: LD_INT 2
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 1
59139: PUSH
59140: LD_INT 1
59142: NEG
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 2
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 2
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 2
59170: PUSH
59171: LD_INT 2
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: LD_INT 2
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 0
59190: PUSH
59191: LD_INT 2
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 1
59200: NEG
59201: PUSH
59202: LD_INT 1
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 2
59211: NEG
59212: PUSH
59213: LD_INT 0
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 2
59222: NEG
59223: PUSH
59224: LD_INT 1
59226: NEG
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 2
59234: NEG
59235: PUSH
59236: LD_INT 2
59238: NEG
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59265: LD_ADDR_VAR 0 58
59269: PUSH
59270: LD_INT 0
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 0
59282: PUSH
59283: LD_INT 1
59285: NEG
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 1
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: LD_INT 1
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: LD_INT 1
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 1
59334: NEG
59335: PUSH
59336: LD_INT 1
59338: NEG
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 1
59346: NEG
59347: PUSH
59348: LD_INT 2
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 0
59358: PUSH
59359: LD_INT 2
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 1
59369: PUSH
59370: LD_INT 1
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 2
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 2
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 2
59400: PUSH
59401: LD_INT 2
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 1
59410: PUSH
59411: LD_INT 2
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: LD_INT 2
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 1
59430: NEG
59431: PUSH
59432: LD_INT 1
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 2
59441: NEG
59442: PUSH
59443: LD_INT 0
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 2
59452: NEG
59453: PUSH
59454: LD_INT 1
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 2
59464: NEG
59465: PUSH
59466: LD_INT 2
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59495: LD_ADDR_VAR 0 59
59499: PUSH
59500: LD_INT 0
59502: PUSH
59503: LD_INT 0
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 0
59512: PUSH
59513: LD_INT 1
59515: NEG
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 1
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 1
59533: PUSH
59534: LD_INT 1
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 0
59543: PUSH
59544: LD_INT 1
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 1
59553: NEG
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 1
59564: NEG
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59583: LD_ADDR_VAR 0 60
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: LD_INT 0
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 0
59600: PUSH
59601: LD_INT 1
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 1
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 1
59621: PUSH
59622: LD_INT 1
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: LD_INT 1
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 1
59641: NEG
59642: PUSH
59643: LD_INT 0
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 1
59652: NEG
59653: PUSH
59654: LD_INT 1
59656: NEG
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59671: LD_ADDR_VAR 0 61
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: LD_INT 0
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: LD_INT 1
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 1
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 0
59719: PUSH
59720: LD_INT 1
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 1
59729: NEG
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 1
59740: NEG
59741: PUSH
59742: LD_INT 1
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59759: LD_ADDR_VAR 0 62
59763: PUSH
59764: LD_INT 0
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: LD_INT 1
59779: NEG
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 1
59787: PUSH
59788: LD_INT 0
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 1
59797: PUSH
59798: LD_INT 1
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: LD_INT 1
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 1
59817: NEG
59818: PUSH
59819: LD_INT 0
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 1
59828: NEG
59829: PUSH
59830: LD_INT 1
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59847: LD_ADDR_VAR 0 63
59851: PUSH
59852: LD_INT 0
59854: PUSH
59855: LD_INT 0
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 0
59864: PUSH
59865: LD_INT 1
59867: NEG
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 1
59875: PUSH
59876: LD_INT 0
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 1
59885: PUSH
59886: LD_INT 1
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: LD_INT 1
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: LD_INT 0
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 1
59916: NEG
59917: PUSH
59918: LD_INT 1
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59935: LD_ADDR_VAR 0 64
59939: PUSH
59940: LD_INT 0
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: LD_INT 1
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 1
59963: PUSH
59964: LD_INT 0
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 1
59973: PUSH
59974: LD_INT 1
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 0
59983: PUSH
59984: LD_INT 1
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 1
59993: NEG
59994: PUSH
59995: LD_INT 0
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 1
60004: NEG
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: ST_TO_ADDR
// end ; 1 :
60023: GO 65920
60025: LD_INT 1
60027: DOUBLE
60028: EQUAL
60029: IFTRUE 60033
60031: GO 62656
60033: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60034: LD_ADDR_VAR 0 11
60038: PUSH
60039: LD_INT 1
60041: NEG
60042: PUSH
60043: LD_INT 3
60045: NEG
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 0
60053: PUSH
60054: LD_INT 3
60056: NEG
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 1
60064: PUSH
60065: LD_INT 2
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: LIST
60077: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60078: LD_ADDR_VAR 0 12
60082: PUSH
60083: LD_INT 2
60085: PUSH
60086: LD_INT 1
60088: NEG
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 3
60096: PUSH
60097: LD_INT 0
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 3
60106: PUSH
60107: LD_INT 1
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: LIST
60118: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60119: LD_ADDR_VAR 0 13
60123: PUSH
60124: LD_INT 3
60126: PUSH
60127: LD_INT 2
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 3
60136: PUSH
60137: LD_INT 3
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 2
60146: PUSH
60147: LD_INT 3
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: LIST
60158: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60159: LD_ADDR_VAR 0 14
60163: PUSH
60164: LD_INT 1
60166: PUSH
60167: LD_INT 3
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 0
60176: PUSH
60177: LD_INT 3
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 1
60186: NEG
60187: PUSH
60188: LD_INT 2
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: LIST
60199: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60200: LD_ADDR_VAR 0 15
60204: PUSH
60205: LD_INT 2
60207: NEG
60208: PUSH
60209: LD_INT 1
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 3
60218: NEG
60219: PUSH
60220: LD_INT 0
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 3
60229: NEG
60230: PUSH
60231: LD_INT 1
60233: NEG
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: LIST
60243: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60244: LD_ADDR_VAR 0 16
60248: PUSH
60249: LD_INT 2
60251: NEG
60252: PUSH
60253: LD_INT 3
60255: NEG
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 3
60263: NEG
60264: PUSH
60265: LD_INT 2
60267: NEG
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 3
60275: NEG
60276: PUSH
60277: LD_INT 3
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: LIST
60289: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60290: LD_ADDR_VAR 0 17
60294: PUSH
60295: LD_INT 1
60297: NEG
60298: PUSH
60299: LD_INT 3
60301: NEG
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 0
60309: PUSH
60310: LD_INT 3
60312: NEG
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 1
60320: PUSH
60321: LD_INT 2
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: LIST
60333: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60334: LD_ADDR_VAR 0 18
60338: PUSH
60339: LD_INT 2
60341: PUSH
60342: LD_INT 1
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 3
60352: PUSH
60353: LD_INT 0
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 3
60362: PUSH
60363: LD_INT 1
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: LIST
60374: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60375: LD_ADDR_VAR 0 19
60379: PUSH
60380: LD_INT 3
60382: PUSH
60383: LD_INT 2
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 3
60392: PUSH
60393: LD_INT 3
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 2
60402: PUSH
60403: LD_INT 3
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: LIST
60414: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60415: LD_ADDR_VAR 0 20
60419: PUSH
60420: LD_INT 1
60422: PUSH
60423: LD_INT 3
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 0
60432: PUSH
60433: LD_INT 3
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 1
60442: NEG
60443: PUSH
60444: LD_INT 2
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: LIST
60455: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60456: LD_ADDR_VAR 0 21
60460: PUSH
60461: LD_INT 2
60463: NEG
60464: PUSH
60465: LD_INT 1
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 3
60474: NEG
60475: PUSH
60476: LD_INT 0
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 3
60485: NEG
60486: PUSH
60487: LD_INT 1
60489: NEG
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: LIST
60499: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60500: LD_ADDR_VAR 0 22
60504: PUSH
60505: LD_INT 2
60507: NEG
60508: PUSH
60509: LD_INT 3
60511: NEG
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 3
60519: NEG
60520: PUSH
60521: LD_INT 2
60523: NEG
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 3
60531: NEG
60532: PUSH
60533: LD_INT 3
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: LIST
60545: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60546: LD_ADDR_VAR 0 23
60550: PUSH
60551: LD_INT 0
60553: PUSH
60554: LD_INT 3
60556: NEG
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 1
60564: NEG
60565: PUSH
60566: LD_INT 4
60568: NEG
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 1
60576: PUSH
60577: LD_INT 3
60579: NEG
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: LIST
60589: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60590: LD_ADDR_VAR 0 24
60594: PUSH
60595: LD_INT 3
60597: PUSH
60598: LD_INT 0
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 3
60607: PUSH
60608: LD_INT 1
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 4
60618: PUSH
60619: LD_INT 1
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: LIST
60630: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60631: LD_ADDR_VAR 0 25
60635: PUSH
60636: LD_INT 3
60638: PUSH
60639: LD_INT 3
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 4
60648: PUSH
60649: LD_INT 3
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 3
60658: PUSH
60659: LD_INT 4
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: LIST
60670: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60671: LD_ADDR_VAR 0 26
60675: PUSH
60676: LD_INT 0
60678: PUSH
60679: LD_INT 3
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 1
60688: PUSH
60689: LD_INT 4
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 1
60698: NEG
60699: PUSH
60700: LD_INT 3
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: LIST
60711: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60712: LD_ADDR_VAR 0 27
60716: PUSH
60717: LD_INT 3
60719: NEG
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 3
60730: NEG
60731: PUSH
60732: LD_INT 1
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 4
60741: NEG
60742: PUSH
60743: LD_INT 1
60745: NEG
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: LIST
60755: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60756: LD_ADDR_VAR 0 28
60760: PUSH
60761: LD_INT 3
60763: NEG
60764: PUSH
60765: LD_INT 3
60767: NEG
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 3
60775: NEG
60776: PUSH
60777: LD_INT 4
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 4
60787: NEG
60788: PUSH
60789: LD_INT 3
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: LIST
60801: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60802: LD_ADDR_VAR 0 29
60806: PUSH
60807: LD_INT 1
60809: NEG
60810: PUSH
60811: LD_INT 3
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: LD_INT 3
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 1
60832: PUSH
60833: LD_INT 2
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 1
60843: NEG
60844: PUSH
60845: LD_INT 4
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: LD_INT 4
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: LD_INT 3
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 1
60877: NEG
60878: PUSH
60879: LD_INT 5
60881: NEG
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 0
60889: PUSH
60890: LD_INT 5
60892: NEG
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 1
60900: PUSH
60901: LD_INT 4
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: LD_INT 6
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 0
60923: PUSH
60924: LD_INT 6
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 1
60934: PUSH
60935: LD_INT 5
60937: NEG
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60957: LD_ADDR_VAR 0 30
60961: PUSH
60962: LD_INT 2
60964: PUSH
60965: LD_INT 1
60967: NEG
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 3
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 3
60985: PUSH
60986: LD_INT 1
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 3
60995: PUSH
60996: LD_INT 1
60998: NEG
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 4
61006: PUSH
61007: LD_INT 0
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 4
61016: PUSH
61017: LD_INT 1
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 4
61026: PUSH
61027: LD_INT 1
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 5
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 5
61047: PUSH
61048: LD_INT 1
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 5
61057: PUSH
61058: LD_INT 1
61060: NEG
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 6
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 6
61078: PUSH
61079: LD_INT 1
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61100: LD_ADDR_VAR 0 31
61104: PUSH
61105: LD_INT 3
61107: PUSH
61108: LD_INT 2
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 3
61117: PUSH
61118: LD_INT 3
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 2
61127: PUSH
61128: LD_INT 3
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 4
61137: PUSH
61138: LD_INT 3
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 4
61147: PUSH
61148: LD_INT 4
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 3
61157: PUSH
61158: LD_INT 4
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 5
61167: PUSH
61168: LD_INT 4
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 5
61177: PUSH
61178: LD_INT 5
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 4
61187: PUSH
61188: LD_INT 5
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 6
61197: PUSH
61198: LD_INT 5
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 6
61207: PUSH
61208: LD_INT 6
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 5
61217: PUSH
61218: LD_INT 6
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61239: LD_ADDR_VAR 0 32
61243: PUSH
61244: LD_INT 1
61246: PUSH
61247: LD_INT 3
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 0
61256: PUSH
61257: LD_INT 3
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 1
61266: NEG
61267: PUSH
61268: LD_INT 2
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 1
61277: PUSH
61278: LD_INT 4
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 0
61287: PUSH
61288: LD_INT 4
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 1
61297: NEG
61298: PUSH
61299: LD_INT 3
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 1
61308: PUSH
61309: LD_INT 5
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 0
61318: PUSH
61319: LD_INT 5
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 1
61328: NEG
61329: PUSH
61330: LD_INT 4
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 1
61339: PUSH
61340: LD_INT 6
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: LD_INT 6
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 1
61359: NEG
61360: PUSH
61361: LD_INT 5
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61382: LD_ADDR_VAR 0 33
61386: PUSH
61387: LD_INT 2
61389: NEG
61390: PUSH
61391: LD_INT 1
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 3
61400: NEG
61401: PUSH
61402: LD_INT 0
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 3
61411: NEG
61412: PUSH
61413: LD_INT 1
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 3
61423: NEG
61424: PUSH
61425: LD_INT 1
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 4
61434: NEG
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 4
61445: NEG
61446: PUSH
61447: LD_INT 1
61449: NEG
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 4
61457: NEG
61458: PUSH
61459: LD_INT 1
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 5
61468: NEG
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 5
61479: NEG
61480: PUSH
61481: LD_INT 1
61483: NEG
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 5
61491: NEG
61492: PUSH
61493: LD_INT 1
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 6
61502: NEG
61503: PUSH
61504: LD_INT 0
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 6
61513: NEG
61514: PUSH
61515: LD_INT 1
61517: NEG
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61537: LD_ADDR_VAR 0 34
61541: PUSH
61542: LD_INT 2
61544: NEG
61545: PUSH
61546: LD_INT 3
61548: NEG
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 3
61556: NEG
61557: PUSH
61558: LD_INT 2
61560: NEG
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 3
61568: NEG
61569: PUSH
61570: LD_INT 3
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 3
61580: NEG
61581: PUSH
61582: LD_INT 4
61584: NEG
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 4
61592: NEG
61593: PUSH
61594: LD_INT 3
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 4
61604: NEG
61605: PUSH
61606: LD_INT 4
61608: NEG
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 4
61616: NEG
61617: PUSH
61618: LD_INT 5
61620: NEG
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 5
61628: NEG
61629: PUSH
61630: LD_INT 4
61632: NEG
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 5
61640: NEG
61641: PUSH
61642: LD_INT 5
61644: NEG
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 5
61652: NEG
61653: PUSH
61654: LD_INT 6
61656: NEG
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 6
61664: NEG
61665: PUSH
61666: LD_INT 5
61668: NEG
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 6
61676: NEG
61677: PUSH
61678: LD_INT 6
61680: NEG
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61700: LD_ADDR_VAR 0 41
61704: PUSH
61705: LD_INT 0
61707: PUSH
61708: LD_INT 2
61710: NEG
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 1
61718: NEG
61719: PUSH
61720: LD_INT 3
61722: NEG
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 1
61730: PUSH
61731: LD_INT 2
61733: NEG
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: LIST
61743: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61744: LD_ADDR_VAR 0 42
61748: PUSH
61749: LD_INT 2
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 2
61761: PUSH
61762: LD_INT 1
61764: NEG
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 3
61772: PUSH
61773: LD_INT 1
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: LIST
61784: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61785: LD_ADDR_VAR 0 43
61789: PUSH
61790: LD_INT 2
61792: PUSH
61793: LD_INT 2
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 3
61802: PUSH
61803: LD_INT 2
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 2
61812: PUSH
61813: LD_INT 3
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: LIST
61824: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61825: LD_ADDR_VAR 0 44
61829: PUSH
61830: LD_INT 0
61832: PUSH
61833: LD_INT 2
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 1
61842: PUSH
61843: LD_INT 3
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 1
61852: NEG
61853: PUSH
61854: LD_INT 2
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: LIST
61865: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61866: LD_ADDR_VAR 0 45
61870: PUSH
61871: LD_INT 2
61873: NEG
61874: PUSH
61875: LD_INT 0
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 2
61884: NEG
61885: PUSH
61886: LD_INT 1
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 3
61895: NEG
61896: PUSH
61897: LD_INT 1
61899: NEG
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: LIST
61909: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61910: LD_ADDR_VAR 0 46
61914: PUSH
61915: LD_INT 2
61917: NEG
61918: PUSH
61919: LD_INT 2
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 2
61929: NEG
61930: PUSH
61931: LD_INT 3
61933: NEG
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 3
61941: NEG
61942: PUSH
61943: LD_INT 2
61945: NEG
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: LIST
61955: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61956: LD_ADDR_VAR 0 47
61960: PUSH
61961: LD_INT 2
61963: NEG
61964: PUSH
61965: LD_INT 3
61967: NEG
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 1
61975: NEG
61976: PUSH
61977: LD_INT 3
61979: NEG
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61989: LD_ADDR_VAR 0 48
61993: PUSH
61994: LD_INT 1
61996: PUSH
61997: LD_INT 2
61999: NEG
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 2
62007: PUSH
62008: LD_INT 1
62010: NEG
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62020: LD_ADDR_VAR 0 49
62024: PUSH
62025: LD_INT 3
62027: PUSH
62028: LD_INT 1
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 3
62037: PUSH
62038: LD_INT 2
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62049: LD_ADDR_VAR 0 50
62053: PUSH
62054: LD_INT 2
62056: PUSH
62057: LD_INT 3
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 1
62066: PUSH
62067: LD_INT 3
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62078: LD_ADDR_VAR 0 51
62082: PUSH
62083: LD_INT 1
62085: NEG
62086: PUSH
62087: LD_INT 2
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 2
62096: NEG
62097: PUSH
62098: LD_INT 1
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62109: LD_ADDR_VAR 0 52
62113: PUSH
62114: LD_INT 3
62116: NEG
62117: PUSH
62118: LD_INT 1
62120: NEG
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 3
62128: NEG
62129: PUSH
62130: LD_INT 2
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62142: LD_ADDR_VAR 0 53
62146: PUSH
62147: LD_INT 1
62149: NEG
62150: PUSH
62151: LD_INT 3
62153: NEG
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 0
62161: PUSH
62162: LD_INT 3
62164: NEG
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 1
62172: PUSH
62173: LD_INT 2
62175: NEG
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: LIST
62185: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62186: LD_ADDR_VAR 0 54
62190: PUSH
62191: LD_INT 2
62193: PUSH
62194: LD_INT 1
62196: NEG
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 3
62204: PUSH
62205: LD_INT 0
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 3
62214: PUSH
62215: LD_INT 1
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: LIST
62226: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62227: LD_ADDR_VAR 0 55
62231: PUSH
62232: LD_INT 3
62234: PUSH
62235: LD_INT 2
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 3
62244: PUSH
62245: LD_INT 3
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 2
62254: PUSH
62255: LD_INT 3
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: LIST
62266: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62267: LD_ADDR_VAR 0 56
62271: PUSH
62272: LD_INT 1
62274: PUSH
62275: LD_INT 3
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: LD_INT 3
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 1
62294: NEG
62295: PUSH
62296: LD_INT 2
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: LIST
62307: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62308: LD_ADDR_VAR 0 57
62312: PUSH
62313: LD_INT 2
62315: NEG
62316: PUSH
62317: LD_INT 1
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 3
62326: NEG
62327: PUSH
62328: LD_INT 0
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 3
62337: NEG
62338: PUSH
62339: LD_INT 1
62341: NEG
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: LIST
62351: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62352: LD_ADDR_VAR 0 58
62356: PUSH
62357: LD_INT 2
62359: NEG
62360: PUSH
62361: LD_INT 3
62363: NEG
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 3
62371: NEG
62372: PUSH
62373: LD_INT 2
62375: NEG
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 3
62383: NEG
62384: PUSH
62385: LD_INT 3
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: LIST
62397: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62398: LD_ADDR_VAR 0 59
62402: PUSH
62403: LD_INT 1
62405: NEG
62406: PUSH
62407: LD_INT 2
62409: NEG
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 0
62417: PUSH
62418: LD_INT 2
62420: NEG
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 1
62428: PUSH
62429: LD_INT 1
62431: NEG
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: LIST
62441: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62442: LD_ADDR_VAR 0 60
62446: PUSH
62447: LD_INT 1
62449: PUSH
62450: LD_INT 1
62452: NEG
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 2
62460: PUSH
62461: LD_INT 0
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 2
62470: PUSH
62471: LD_INT 1
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: LIST
62482: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62483: LD_ADDR_VAR 0 61
62487: PUSH
62488: LD_INT 2
62490: PUSH
62491: LD_INT 1
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 2
62500: PUSH
62501: LD_INT 2
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 1
62510: PUSH
62511: LD_INT 2
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: LIST
62522: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62523: LD_ADDR_VAR 0 62
62527: PUSH
62528: LD_INT 1
62530: PUSH
62531: LD_INT 2
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 0
62540: PUSH
62541: LD_INT 2
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 1
62550: NEG
62551: PUSH
62552: LD_INT 1
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: LIST
62563: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62564: LD_ADDR_VAR 0 63
62568: PUSH
62569: LD_INT 1
62571: NEG
62572: PUSH
62573: LD_INT 1
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 2
62582: NEG
62583: PUSH
62584: LD_INT 0
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 2
62593: NEG
62594: PUSH
62595: LD_INT 1
62597: NEG
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: LIST
62607: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62608: LD_ADDR_VAR 0 64
62612: PUSH
62613: LD_INT 1
62615: NEG
62616: PUSH
62617: LD_INT 2
62619: NEG
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 2
62627: NEG
62628: PUSH
62629: LD_INT 1
62631: NEG
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 2
62639: NEG
62640: PUSH
62641: LD_INT 2
62643: NEG
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: LIST
62653: ST_TO_ADDR
// end ; 2 :
62654: GO 65920
62656: LD_INT 2
62658: DOUBLE
62659: EQUAL
62660: IFTRUE 62664
62662: GO 65919
62664: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62665: LD_ADDR_VAR 0 29
62669: PUSH
62670: LD_INT 4
62672: PUSH
62673: LD_INT 0
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 4
62682: PUSH
62683: LD_INT 1
62685: NEG
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 5
62693: PUSH
62694: LD_INT 0
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 5
62703: PUSH
62704: LD_INT 1
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 4
62713: PUSH
62714: LD_INT 1
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 3
62723: PUSH
62724: LD_INT 0
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 3
62733: PUSH
62734: LD_INT 1
62736: NEG
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 3
62744: PUSH
62745: LD_INT 2
62747: NEG
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 5
62755: PUSH
62756: LD_INT 2
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 3
62765: PUSH
62766: LD_INT 3
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 3
62775: PUSH
62776: LD_INT 2
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 4
62785: PUSH
62786: LD_INT 3
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 4
62795: PUSH
62796: LD_INT 4
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 3
62805: PUSH
62806: LD_INT 4
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 2
62815: PUSH
62816: LD_INT 3
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 2
62825: PUSH
62826: LD_INT 2
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 4
62835: PUSH
62836: LD_INT 2
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 2
62845: PUSH
62846: LD_INT 4
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 0
62855: PUSH
62856: LD_INT 4
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 0
62865: PUSH
62866: LD_INT 3
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 1
62875: PUSH
62876: LD_INT 4
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 1
62885: PUSH
62886: LD_INT 5
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 0
62895: PUSH
62896: LD_INT 5
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 1
62905: NEG
62906: PUSH
62907: LD_INT 4
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 1
62916: NEG
62917: PUSH
62918: LD_INT 3
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 2
62927: PUSH
62928: LD_INT 5
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 2
62937: NEG
62938: PUSH
62939: LD_INT 3
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 3
62948: NEG
62949: PUSH
62950: LD_INT 0
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 3
62959: NEG
62960: PUSH
62961: LD_INT 1
62963: NEG
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 2
62971: NEG
62972: PUSH
62973: LD_INT 0
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 2
62982: NEG
62983: PUSH
62984: LD_INT 1
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 3
62993: NEG
62994: PUSH
62995: LD_INT 1
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 4
63004: NEG
63005: PUSH
63006: LD_INT 0
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 4
63015: NEG
63016: PUSH
63017: LD_INT 1
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 4
63027: NEG
63028: PUSH
63029: LD_INT 2
63031: NEG
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 2
63039: NEG
63040: PUSH
63041: LD_INT 2
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 4
63050: NEG
63051: PUSH
63052: LD_INT 4
63054: NEG
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 4
63062: NEG
63063: PUSH
63064: LD_INT 5
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 3
63074: NEG
63075: PUSH
63076: LD_INT 4
63078: NEG
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 3
63086: NEG
63087: PUSH
63088: LD_INT 3
63090: NEG
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 4
63098: NEG
63099: PUSH
63100: LD_INT 3
63102: NEG
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 5
63110: NEG
63111: PUSH
63112: LD_INT 4
63114: NEG
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 5
63122: NEG
63123: PUSH
63124: LD_INT 5
63126: NEG
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 3
63134: NEG
63135: PUSH
63136: LD_INT 5
63138: NEG
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 5
63146: NEG
63147: PUSH
63148: LD_INT 3
63150: NEG
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63203: LD_ADDR_VAR 0 30
63207: PUSH
63208: LD_INT 4
63210: PUSH
63211: LD_INT 4
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 4
63220: PUSH
63221: LD_INT 3
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 5
63230: PUSH
63231: LD_INT 4
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 5
63240: PUSH
63241: LD_INT 5
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 4
63250: PUSH
63251: LD_INT 5
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 3
63260: PUSH
63261: LD_INT 4
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 3
63270: PUSH
63271: LD_INT 3
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 5
63280: PUSH
63281: LD_INT 3
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 3
63290: PUSH
63291: LD_INT 5
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: LD_INT 3
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 0
63310: PUSH
63311: LD_INT 2
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 1
63320: PUSH
63321: LD_INT 3
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 1
63330: PUSH
63331: LD_INT 4
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 0
63340: PUSH
63341: LD_INT 4
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 1
63350: NEG
63351: PUSH
63352: LD_INT 3
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 1
63361: NEG
63362: PUSH
63363: LD_INT 2
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 2
63372: PUSH
63373: LD_INT 4
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 2
63382: NEG
63383: PUSH
63384: LD_INT 2
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 4
63393: NEG
63394: PUSH
63395: LD_INT 0
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 4
63404: NEG
63405: PUSH
63406: LD_INT 1
63408: NEG
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 3
63416: NEG
63417: PUSH
63418: LD_INT 0
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 3
63427: NEG
63428: PUSH
63429: LD_INT 1
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 4
63438: NEG
63439: PUSH
63440: LD_INT 1
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 5
63449: NEG
63450: PUSH
63451: LD_INT 0
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 5
63460: NEG
63461: PUSH
63462: LD_INT 1
63464: NEG
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 5
63472: NEG
63473: PUSH
63474: LD_INT 2
63476: NEG
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 3
63484: NEG
63485: PUSH
63486: LD_INT 2
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 3
63495: NEG
63496: PUSH
63497: LD_INT 3
63499: NEG
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 3
63507: NEG
63508: PUSH
63509: LD_INT 4
63511: NEG
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 2
63519: NEG
63520: PUSH
63521: LD_INT 3
63523: NEG
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 2
63531: NEG
63532: PUSH
63533: LD_INT 2
63535: NEG
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 3
63543: NEG
63544: PUSH
63545: LD_INT 2
63547: NEG
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 4
63555: NEG
63556: PUSH
63557: LD_INT 3
63559: NEG
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 4
63567: NEG
63568: PUSH
63569: LD_INT 4
63571: NEG
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 2
63579: NEG
63580: PUSH
63581: LD_INT 4
63583: NEG
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 4
63591: NEG
63592: PUSH
63593: LD_INT 2
63595: NEG
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 0
63603: PUSH
63604: LD_INT 4
63606: NEG
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 0
63614: PUSH
63615: LD_INT 5
63617: NEG
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 1
63625: PUSH
63626: LD_INT 4
63628: NEG
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 1
63636: PUSH
63637: LD_INT 3
63639: NEG
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 0
63647: PUSH
63648: LD_INT 3
63650: NEG
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 1
63658: NEG
63659: PUSH
63660: LD_INT 4
63662: NEG
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 1
63670: NEG
63671: PUSH
63672: LD_INT 5
63674: NEG
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 2
63682: PUSH
63683: LD_INT 3
63685: NEG
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 2
63693: NEG
63694: PUSH
63695: LD_INT 5
63697: NEG
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63750: LD_ADDR_VAR 0 31
63754: PUSH
63755: LD_INT 0
63757: PUSH
63758: LD_INT 4
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 0
63767: PUSH
63768: LD_INT 3
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 1
63777: PUSH
63778: LD_INT 4
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 1
63787: PUSH
63788: LD_INT 5
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 0
63797: PUSH
63798: LD_INT 5
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 1
63807: NEG
63808: PUSH
63809: LD_INT 4
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 1
63818: NEG
63819: PUSH
63820: LD_INT 3
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 2
63829: PUSH
63830: LD_INT 5
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 2
63839: NEG
63840: PUSH
63841: LD_INT 3
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 3
63850: NEG
63851: PUSH
63852: LD_INT 0
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 3
63861: NEG
63862: PUSH
63863: LD_INT 1
63865: NEG
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 2
63873: NEG
63874: PUSH
63875: LD_INT 0
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 2
63884: NEG
63885: PUSH
63886: LD_INT 1
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 3
63895: NEG
63896: PUSH
63897: LD_INT 1
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 4
63906: NEG
63907: PUSH
63908: LD_INT 0
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 4
63917: NEG
63918: PUSH
63919: LD_INT 1
63921: NEG
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 4
63929: NEG
63930: PUSH
63931: LD_INT 2
63933: NEG
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 2
63941: NEG
63942: PUSH
63943: LD_INT 2
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 4
63952: NEG
63953: PUSH
63954: LD_INT 4
63956: NEG
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 4
63964: NEG
63965: PUSH
63966: LD_INT 5
63968: NEG
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 3
63976: NEG
63977: PUSH
63978: LD_INT 4
63980: NEG
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 3
63988: NEG
63989: PUSH
63990: LD_INT 3
63992: NEG
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 4
64000: NEG
64001: PUSH
64002: LD_INT 3
64004: NEG
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 5
64012: NEG
64013: PUSH
64014: LD_INT 4
64016: NEG
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 5
64024: NEG
64025: PUSH
64026: LD_INT 5
64028: NEG
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 3
64036: NEG
64037: PUSH
64038: LD_INT 5
64040: NEG
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 5
64048: NEG
64049: PUSH
64050: LD_INT 3
64052: NEG
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 0
64060: PUSH
64061: LD_INT 3
64063: NEG
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 0
64071: PUSH
64072: LD_INT 4
64074: NEG
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 1
64082: PUSH
64083: LD_INT 3
64085: NEG
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 1
64093: PUSH
64094: LD_INT 2
64096: NEG
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 0
64104: PUSH
64105: LD_INT 2
64107: NEG
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 1
64115: NEG
64116: PUSH
64117: LD_INT 3
64119: NEG
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 1
64127: NEG
64128: PUSH
64129: LD_INT 4
64131: NEG
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 2
64139: PUSH
64140: LD_INT 2
64142: NEG
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 2
64150: NEG
64151: PUSH
64152: LD_INT 4
64154: NEG
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 4
64162: PUSH
64163: LD_INT 0
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 4
64172: PUSH
64173: LD_INT 1
64175: NEG
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: LD_INT 5
64183: PUSH
64184: LD_INT 0
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 5
64193: PUSH
64194: LD_INT 1
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 4
64203: PUSH
64204: LD_INT 1
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 3
64213: PUSH
64214: LD_INT 0
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 3
64223: PUSH
64224: LD_INT 1
64226: NEG
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 3
64234: PUSH
64235: LD_INT 2
64237: NEG
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 5
64245: PUSH
64246: LD_INT 2
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64300: LD_ADDR_VAR 0 32
64304: PUSH
64305: LD_INT 4
64307: NEG
64308: PUSH
64309: LD_INT 0
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 4
64318: NEG
64319: PUSH
64320: LD_INT 1
64322: NEG
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 3
64330: NEG
64331: PUSH
64332: LD_INT 0
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 3
64341: NEG
64342: PUSH
64343: LD_INT 1
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 4
64352: NEG
64353: PUSH
64354: LD_INT 1
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 5
64363: NEG
64364: PUSH
64365: LD_INT 0
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 5
64374: NEG
64375: PUSH
64376: LD_INT 1
64378: NEG
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 5
64386: NEG
64387: PUSH
64388: LD_INT 2
64390: NEG
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 3
64398: NEG
64399: PUSH
64400: LD_INT 2
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 3
64409: NEG
64410: PUSH
64411: LD_INT 3
64413: NEG
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 3
64421: NEG
64422: PUSH
64423: LD_INT 4
64425: NEG
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 2
64433: NEG
64434: PUSH
64435: LD_INT 3
64437: NEG
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 2
64445: NEG
64446: PUSH
64447: LD_INT 2
64449: NEG
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 3
64457: NEG
64458: PUSH
64459: LD_INT 2
64461: NEG
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 4
64469: NEG
64470: PUSH
64471: LD_INT 3
64473: NEG
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 4
64481: NEG
64482: PUSH
64483: LD_INT 4
64485: NEG
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 2
64493: NEG
64494: PUSH
64495: LD_INT 4
64497: NEG
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 4
64505: NEG
64506: PUSH
64507: LD_INT 2
64509: NEG
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 0
64517: PUSH
64518: LD_INT 4
64520: NEG
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 0
64528: PUSH
64529: LD_INT 5
64531: NEG
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 1
64539: PUSH
64540: LD_INT 4
64542: NEG
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 1
64550: PUSH
64551: LD_INT 3
64553: NEG
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 0
64561: PUSH
64562: LD_INT 3
64564: NEG
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 1
64572: NEG
64573: PUSH
64574: LD_INT 4
64576: NEG
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 1
64584: NEG
64585: PUSH
64586: LD_INT 5
64588: NEG
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 2
64596: PUSH
64597: LD_INT 3
64599: NEG
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 2
64607: NEG
64608: PUSH
64609: LD_INT 5
64611: NEG
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 3
64619: PUSH
64620: LD_INT 0
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 3
64629: PUSH
64630: LD_INT 1
64632: NEG
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 4
64640: PUSH
64641: LD_INT 0
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 4
64650: PUSH
64651: LD_INT 1
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 3
64660: PUSH
64661: LD_INT 1
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 2
64670: PUSH
64671: LD_INT 0
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 2
64680: PUSH
64681: LD_INT 1
64683: NEG
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 2
64691: PUSH
64692: LD_INT 2
64694: NEG
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 4
64702: PUSH
64703: LD_INT 2
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 4
64712: PUSH
64713: LD_INT 4
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 4
64722: PUSH
64723: LD_INT 3
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 5
64732: PUSH
64733: LD_INT 4
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 5
64742: PUSH
64743: LD_INT 5
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: LD_INT 4
64752: PUSH
64753: LD_INT 5
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 3
64762: PUSH
64763: LD_INT 4
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 3
64772: PUSH
64773: LD_INT 3
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 5
64782: PUSH
64783: LD_INT 3
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 3
64792: PUSH
64793: LD_INT 5
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64847: LD_ADDR_VAR 0 33
64851: PUSH
64852: LD_INT 4
64854: NEG
64855: PUSH
64856: LD_INT 4
64858: NEG
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 4
64866: NEG
64867: PUSH
64868: LD_INT 5
64870: NEG
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 3
64878: NEG
64879: PUSH
64880: LD_INT 4
64882: NEG
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 3
64890: NEG
64891: PUSH
64892: LD_INT 3
64894: NEG
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 4
64902: NEG
64903: PUSH
64904: LD_INT 3
64906: NEG
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 5
64914: NEG
64915: PUSH
64916: LD_INT 4
64918: NEG
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 5
64926: NEG
64927: PUSH
64928: LD_INT 5
64930: NEG
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 3
64938: NEG
64939: PUSH
64940: LD_INT 5
64942: NEG
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 5
64950: NEG
64951: PUSH
64952: LD_INT 3
64954: NEG
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 0
64962: PUSH
64963: LD_INT 3
64965: NEG
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 0
64973: PUSH
64974: LD_INT 4
64976: NEG
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 1
64984: PUSH
64985: LD_INT 3
64987: NEG
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 1
64995: PUSH
64996: LD_INT 2
64998: NEG
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 0
65006: PUSH
65007: LD_INT 2
65009: NEG
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 1
65017: NEG
65018: PUSH
65019: LD_INT 3
65021: NEG
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 1
65029: NEG
65030: PUSH
65031: LD_INT 4
65033: NEG
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 2
65041: PUSH
65042: LD_INT 2
65044: NEG
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 2
65052: NEG
65053: PUSH
65054: LD_INT 4
65056: NEG
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 4
65064: PUSH
65065: LD_INT 0
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 4
65074: PUSH
65075: LD_INT 1
65077: NEG
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 5
65085: PUSH
65086: LD_INT 0
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 5
65095: PUSH
65096: LD_INT 1
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 4
65105: PUSH
65106: LD_INT 1
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 3
65115: PUSH
65116: LD_INT 0
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 3
65125: PUSH
65126: LD_INT 1
65128: NEG
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: LD_INT 3
65136: PUSH
65137: LD_INT 2
65139: NEG
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 5
65147: PUSH
65148: LD_INT 2
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 3
65157: PUSH
65158: LD_INT 3
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 3
65167: PUSH
65168: LD_INT 2
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 4
65177: PUSH
65178: LD_INT 3
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 4
65187: PUSH
65188: LD_INT 4
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 3
65197: PUSH
65198: LD_INT 4
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 2
65207: PUSH
65208: LD_INT 3
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 2
65217: PUSH
65218: LD_INT 2
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 4
65227: PUSH
65228: LD_INT 2
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 2
65237: PUSH
65238: LD_INT 4
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 0
65247: PUSH
65248: LD_INT 4
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 0
65257: PUSH
65258: LD_INT 3
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 1
65267: PUSH
65268: LD_INT 4
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 1
65277: PUSH
65278: LD_INT 5
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 0
65287: PUSH
65288: LD_INT 5
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 1
65297: NEG
65298: PUSH
65299: LD_INT 4
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 1
65308: NEG
65309: PUSH
65310: LD_INT 3
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 2
65319: PUSH
65320: LD_INT 5
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 2
65329: NEG
65330: PUSH
65331: LD_INT 3
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: LIST
65380: LIST
65381: LIST
65382: LIST
65383: LIST
65384: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65385: LD_ADDR_VAR 0 34
65389: PUSH
65390: LD_INT 0
65392: PUSH
65393: LD_INT 4
65395: NEG
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 0
65403: PUSH
65404: LD_INT 5
65406: NEG
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 1
65414: PUSH
65415: LD_INT 4
65417: NEG
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 1
65425: PUSH
65426: LD_INT 3
65428: NEG
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 0
65436: PUSH
65437: LD_INT 3
65439: NEG
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 1
65447: NEG
65448: PUSH
65449: LD_INT 4
65451: NEG
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 1
65459: NEG
65460: PUSH
65461: LD_INT 5
65463: NEG
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 2
65471: PUSH
65472: LD_INT 3
65474: NEG
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 2
65482: NEG
65483: PUSH
65484: LD_INT 5
65486: NEG
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 3
65494: PUSH
65495: LD_INT 0
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 3
65504: PUSH
65505: LD_INT 1
65507: NEG
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 4
65515: PUSH
65516: LD_INT 0
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: LD_INT 4
65525: PUSH
65526: LD_INT 1
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: LD_INT 3
65535: PUSH
65536: LD_INT 1
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 2
65545: PUSH
65546: LD_INT 0
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 2
65555: PUSH
65556: LD_INT 1
65558: NEG
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 2
65566: PUSH
65567: LD_INT 2
65569: NEG
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 4
65577: PUSH
65578: LD_INT 2
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 4
65587: PUSH
65588: LD_INT 4
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: LD_INT 4
65597: PUSH
65598: LD_INT 3
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 5
65607: PUSH
65608: LD_INT 4
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 5
65617: PUSH
65618: LD_INT 5
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 4
65627: PUSH
65628: LD_INT 5
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 3
65637: PUSH
65638: LD_INT 4
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 3
65647: PUSH
65648: LD_INT 3
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 5
65657: PUSH
65658: LD_INT 3
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 3
65667: PUSH
65668: LD_INT 5
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 0
65677: PUSH
65678: LD_INT 3
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: PUSH
65685: LD_INT 0
65687: PUSH
65688: LD_INT 2
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: LD_INT 1
65697: PUSH
65698: LD_INT 3
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_INT 1
65707: PUSH
65708: LD_INT 4
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 0
65717: PUSH
65718: LD_INT 4
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 1
65727: NEG
65728: PUSH
65729: LD_INT 3
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 1
65738: NEG
65739: PUSH
65740: LD_INT 2
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 2
65749: PUSH
65750: LD_INT 4
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 2
65759: NEG
65760: PUSH
65761: LD_INT 2
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 4
65770: NEG
65771: PUSH
65772: LD_INT 0
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 4
65781: NEG
65782: PUSH
65783: LD_INT 1
65785: NEG
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 3
65793: NEG
65794: PUSH
65795: LD_INT 0
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 3
65804: NEG
65805: PUSH
65806: LD_INT 1
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 4
65815: NEG
65816: PUSH
65817: LD_INT 1
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 5
65826: NEG
65827: PUSH
65828: LD_INT 0
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 5
65837: NEG
65838: PUSH
65839: LD_INT 1
65841: NEG
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 5
65849: NEG
65850: PUSH
65851: LD_INT 2
65853: NEG
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 3
65861: NEG
65862: PUSH
65863: LD_INT 2
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: ST_TO_ADDR
// end ; end ;
65917: GO 65920
65919: POP
// case btype of b_depot , b_warehouse :
65920: LD_VAR 0 1
65924: PUSH
65925: LD_INT 0
65927: DOUBLE
65928: EQUAL
65929: IFTRUE 65939
65931: LD_INT 1
65933: DOUBLE
65934: EQUAL
65935: IFTRUE 65939
65937: GO 66140
65939: POP
// case nation of nation_american :
65940: LD_VAR 0 5
65944: PUSH
65945: LD_INT 1
65947: DOUBLE
65948: EQUAL
65949: IFTRUE 65953
65951: GO 66009
65953: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65954: LD_ADDR_VAR 0 9
65958: PUSH
65959: LD_VAR 0 11
65963: PUSH
65964: LD_VAR 0 12
65968: PUSH
65969: LD_VAR 0 13
65973: PUSH
65974: LD_VAR 0 14
65978: PUSH
65979: LD_VAR 0 15
65983: PUSH
65984: LD_VAR 0 16
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: PUSH
65997: LD_VAR 0 4
66001: PUSH
66002: LD_INT 1
66004: PLUS
66005: ARRAY
66006: ST_TO_ADDR
66007: GO 66138
66009: LD_INT 2
66011: DOUBLE
66012: EQUAL
66013: IFTRUE 66017
66015: GO 66073
66017: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66018: LD_ADDR_VAR 0 9
66022: PUSH
66023: LD_VAR 0 17
66027: PUSH
66028: LD_VAR 0 18
66032: PUSH
66033: LD_VAR 0 19
66037: PUSH
66038: LD_VAR 0 20
66042: PUSH
66043: LD_VAR 0 21
66047: PUSH
66048: LD_VAR 0 22
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: PUSH
66061: LD_VAR 0 4
66065: PUSH
66066: LD_INT 1
66068: PLUS
66069: ARRAY
66070: ST_TO_ADDR
66071: GO 66138
66073: LD_INT 3
66075: DOUBLE
66076: EQUAL
66077: IFTRUE 66081
66079: GO 66137
66081: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66082: LD_ADDR_VAR 0 9
66086: PUSH
66087: LD_VAR 0 23
66091: PUSH
66092: LD_VAR 0 24
66096: PUSH
66097: LD_VAR 0 25
66101: PUSH
66102: LD_VAR 0 26
66106: PUSH
66107: LD_VAR 0 27
66111: PUSH
66112: LD_VAR 0 28
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: PUSH
66125: LD_VAR 0 4
66129: PUSH
66130: LD_INT 1
66132: PLUS
66133: ARRAY
66134: ST_TO_ADDR
66135: GO 66138
66137: POP
66138: GO 66693
66140: LD_INT 2
66142: DOUBLE
66143: EQUAL
66144: IFTRUE 66154
66146: LD_INT 3
66148: DOUBLE
66149: EQUAL
66150: IFTRUE 66154
66152: GO 66210
66154: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66155: LD_ADDR_VAR 0 9
66159: PUSH
66160: LD_VAR 0 29
66164: PUSH
66165: LD_VAR 0 30
66169: PUSH
66170: LD_VAR 0 31
66174: PUSH
66175: LD_VAR 0 32
66179: PUSH
66180: LD_VAR 0 33
66184: PUSH
66185: LD_VAR 0 34
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: PUSH
66198: LD_VAR 0 4
66202: PUSH
66203: LD_INT 1
66205: PLUS
66206: ARRAY
66207: ST_TO_ADDR
66208: GO 66693
66210: LD_INT 16
66212: DOUBLE
66213: EQUAL
66214: IFTRUE 66272
66216: LD_INT 17
66218: DOUBLE
66219: EQUAL
66220: IFTRUE 66272
66222: LD_INT 18
66224: DOUBLE
66225: EQUAL
66226: IFTRUE 66272
66228: LD_INT 19
66230: DOUBLE
66231: EQUAL
66232: IFTRUE 66272
66234: LD_INT 22
66236: DOUBLE
66237: EQUAL
66238: IFTRUE 66272
66240: LD_INT 20
66242: DOUBLE
66243: EQUAL
66244: IFTRUE 66272
66246: LD_INT 21
66248: DOUBLE
66249: EQUAL
66250: IFTRUE 66272
66252: LD_INT 23
66254: DOUBLE
66255: EQUAL
66256: IFTRUE 66272
66258: LD_INT 24
66260: DOUBLE
66261: EQUAL
66262: IFTRUE 66272
66264: LD_INT 25
66266: DOUBLE
66267: EQUAL
66268: IFTRUE 66272
66270: GO 66328
66272: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66273: LD_ADDR_VAR 0 9
66277: PUSH
66278: LD_VAR 0 35
66282: PUSH
66283: LD_VAR 0 36
66287: PUSH
66288: LD_VAR 0 37
66292: PUSH
66293: LD_VAR 0 38
66297: PUSH
66298: LD_VAR 0 39
66302: PUSH
66303: LD_VAR 0 40
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: PUSH
66316: LD_VAR 0 4
66320: PUSH
66321: LD_INT 1
66323: PLUS
66324: ARRAY
66325: ST_TO_ADDR
66326: GO 66693
66328: LD_INT 6
66330: DOUBLE
66331: EQUAL
66332: IFTRUE 66384
66334: LD_INT 7
66336: DOUBLE
66337: EQUAL
66338: IFTRUE 66384
66340: LD_INT 8
66342: DOUBLE
66343: EQUAL
66344: IFTRUE 66384
66346: LD_INT 13
66348: DOUBLE
66349: EQUAL
66350: IFTRUE 66384
66352: LD_INT 12
66354: DOUBLE
66355: EQUAL
66356: IFTRUE 66384
66358: LD_INT 15
66360: DOUBLE
66361: EQUAL
66362: IFTRUE 66384
66364: LD_INT 11
66366: DOUBLE
66367: EQUAL
66368: IFTRUE 66384
66370: LD_INT 14
66372: DOUBLE
66373: EQUAL
66374: IFTRUE 66384
66376: LD_INT 10
66378: DOUBLE
66379: EQUAL
66380: IFTRUE 66384
66382: GO 66440
66384: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66385: LD_ADDR_VAR 0 9
66389: PUSH
66390: LD_VAR 0 41
66394: PUSH
66395: LD_VAR 0 42
66399: PUSH
66400: LD_VAR 0 43
66404: PUSH
66405: LD_VAR 0 44
66409: PUSH
66410: LD_VAR 0 45
66414: PUSH
66415: LD_VAR 0 46
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: PUSH
66428: LD_VAR 0 4
66432: PUSH
66433: LD_INT 1
66435: PLUS
66436: ARRAY
66437: ST_TO_ADDR
66438: GO 66693
66440: LD_INT 36
66442: DOUBLE
66443: EQUAL
66444: IFTRUE 66448
66446: GO 66504
66448: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66449: LD_ADDR_VAR 0 9
66453: PUSH
66454: LD_VAR 0 47
66458: PUSH
66459: LD_VAR 0 48
66463: PUSH
66464: LD_VAR 0 49
66468: PUSH
66469: LD_VAR 0 50
66473: PUSH
66474: LD_VAR 0 51
66478: PUSH
66479: LD_VAR 0 52
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: PUSH
66492: LD_VAR 0 4
66496: PUSH
66497: LD_INT 1
66499: PLUS
66500: ARRAY
66501: ST_TO_ADDR
66502: GO 66693
66504: LD_INT 4
66506: DOUBLE
66507: EQUAL
66508: IFTRUE 66530
66510: LD_INT 5
66512: DOUBLE
66513: EQUAL
66514: IFTRUE 66530
66516: LD_INT 34
66518: DOUBLE
66519: EQUAL
66520: IFTRUE 66530
66522: LD_INT 37
66524: DOUBLE
66525: EQUAL
66526: IFTRUE 66530
66528: GO 66586
66530: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66531: LD_ADDR_VAR 0 9
66535: PUSH
66536: LD_VAR 0 53
66540: PUSH
66541: LD_VAR 0 54
66545: PUSH
66546: LD_VAR 0 55
66550: PUSH
66551: LD_VAR 0 56
66555: PUSH
66556: LD_VAR 0 57
66560: PUSH
66561: LD_VAR 0 58
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: LIST
66572: LIST
66573: PUSH
66574: LD_VAR 0 4
66578: PUSH
66579: LD_INT 1
66581: PLUS
66582: ARRAY
66583: ST_TO_ADDR
66584: GO 66693
66586: LD_INT 31
66588: DOUBLE
66589: EQUAL
66590: IFTRUE 66636
66592: LD_INT 32
66594: DOUBLE
66595: EQUAL
66596: IFTRUE 66636
66598: LD_INT 33
66600: DOUBLE
66601: EQUAL
66602: IFTRUE 66636
66604: LD_INT 27
66606: DOUBLE
66607: EQUAL
66608: IFTRUE 66636
66610: LD_INT 26
66612: DOUBLE
66613: EQUAL
66614: IFTRUE 66636
66616: LD_INT 28
66618: DOUBLE
66619: EQUAL
66620: IFTRUE 66636
66622: LD_INT 29
66624: DOUBLE
66625: EQUAL
66626: IFTRUE 66636
66628: LD_INT 30
66630: DOUBLE
66631: EQUAL
66632: IFTRUE 66636
66634: GO 66692
66636: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66637: LD_ADDR_VAR 0 9
66641: PUSH
66642: LD_VAR 0 59
66646: PUSH
66647: LD_VAR 0 60
66651: PUSH
66652: LD_VAR 0 61
66656: PUSH
66657: LD_VAR 0 62
66661: PUSH
66662: LD_VAR 0 63
66666: PUSH
66667: LD_VAR 0 64
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: PUSH
66680: LD_VAR 0 4
66684: PUSH
66685: LD_INT 1
66687: PLUS
66688: ARRAY
66689: ST_TO_ADDR
66690: GO 66693
66692: POP
// temp_list2 = [ ] ;
66693: LD_ADDR_VAR 0 10
66697: PUSH
66698: EMPTY
66699: ST_TO_ADDR
// for i in temp_list do
66700: LD_ADDR_VAR 0 8
66704: PUSH
66705: LD_VAR 0 9
66709: PUSH
66710: FOR_IN
66711: IFFALSE 66763
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66713: LD_ADDR_VAR 0 10
66717: PUSH
66718: LD_VAR 0 10
66722: PUSH
66723: LD_VAR 0 8
66727: PUSH
66728: LD_INT 1
66730: ARRAY
66731: PUSH
66732: LD_VAR 0 2
66736: PLUS
66737: PUSH
66738: LD_VAR 0 8
66742: PUSH
66743: LD_INT 2
66745: ARRAY
66746: PUSH
66747: LD_VAR 0 3
66751: PLUS
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: EMPTY
66758: LIST
66759: ADD
66760: ST_TO_ADDR
66761: GO 66710
66763: POP
66764: POP
// result = temp_list2 ;
66765: LD_ADDR_VAR 0 7
66769: PUSH
66770: LD_VAR 0 10
66774: ST_TO_ADDR
// end ;
66775: LD_VAR 0 7
66779: RET
// export function EnemyInRange ( unit , dist ) ; begin
66780: LD_INT 0
66782: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66783: LD_ADDR_VAR 0 3
66787: PUSH
66788: LD_VAR 0 1
66792: PPUSH
66793: CALL_OW 255
66797: PPUSH
66798: LD_VAR 0 1
66802: PPUSH
66803: CALL_OW 250
66807: PPUSH
66808: LD_VAR 0 1
66812: PPUSH
66813: CALL_OW 251
66817: PPUSH
66818: LD_VAR 0 2
66822: PPUSH
66823: CALL 40153 0 4
66827: PUSH
66828: LD_INT 4
66830: ARRAY
66831: ST_TO_ADDR
// end ;
66832: LD_VAR 0 3
66836: RET
// export function PlayerSeeMe ( unit ) ; begin
66837: LD_INT 0
66839: PPUSH
// result := See ( your_side , unit ) ;
66840: LD_ADDR_VAR 0 2
66844: PUSH
66845: LD_OWVAR 2
66849: PPUSH
66850: LD_VAR 0 1
66854: PPUSH
66855: CALL_OW 292
66859: ST_TO_ADDR
// end ;
66860: LD_VAR 0 2
66864: RET
// export function ReverseDir ( unit ) ; begin
66865: LD_INT 0
66867: PPUSH
// if not unit then
66868: LD_VAR 0 1
66872: NOT
66873: IFFALSE 66877
// exit ;
66875: GO 66900
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66877: LD_ADDR_VAR 0 2
66881: PUSH
66882: LD_VAR 0 1
66886: PPUSH
66887: CALL_OW 254
66891: PUSH
66892: LD_INT 3
66894: PLUS
66895: PUSH
66896: LD_INT 6
66898: MOD
66899: ST_TO_ADDR
// end ;
66900: LD_VAR 0 2
66904: RET
// export function ReverseArray ( array ) ; var i ; begin
66905: LD_INT 0
66907: PPUSH
66908: PPUSH
// if not array then
66909: LD_VAR 0 1
66913: NOT
66914: IFFALSE 66918
// exit ;
66916: GO 66973
// result := [ ] ;
66918: LD_ADDR_VAR 0 2
66922: PUSH
66923: EMPTY
66924: ST_TO_ADDR
// for i := array downto 1 do
66925: LD_ADDR_VAR 0 3
66929: PUSH
66930: DOUBLE
66931: LD_VAR 0 1
66935: INC
66936: ST_TO_ADDR
66937: LD_INT 1
66939: PUSH
66940: FOR_DOWNTO
66941: IFFALSE 66971
// result := Join ( result , array [ i ] ) ;
66943: LD_ADDR_VAR 0 2
66947: PUSH
66948: LD_VAR 0 2
66952: PPUSH
66953: LD_VAR 0 1
66957: PUSH
66958: LD_VAR 0 3
66962: ARRAY
66963: PPUSH
66964: CALL 71779 0 2
66968: ST_TO_ADDR
66969: GO 66940
66971: POP
66972: POP
// end ;
66973: LD_VAR 0 2
66977: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
66978: LD_INT 0
66980: PPUSH
66981: PPUSH
66982: PPUSH
66983: PPUSH
66984: PPUSH
66985: PPUSH
// if not unit or not hexes then
66986: LD_VAR 0 1
66990: NOT
66991: PUSH
66992: LD_VAR 0 2
66996: NOT
66997: OR
66998: IFFALSE 67002
// exit ;
67000: GO 67125
// dist := 9999 ;
67002: LD_ADDR_VAR 0 5
67006: PUSH
67007: LD_INT 9999
67009: ST_TO_ADDR
// for i = 1 to hexes do
67010: LD_ADDR_VAR 0 4
67014: PUSH
67015: DOUBLE
67016: LD_INT 1
67018: DEC
67019: ST_TO_ADDR
67020: LD_VAR 0 2
67024: PUSH
67025: FOR_TO
67026: IFFALSE 67113
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67028: LD_ADDR_VAR 0 6
67032: PUSH
67033: LD_VAR 0 1
67037: PPUSH
67038: LD_VAR 0 2
67042: PUSH
67043: LD_VAR 0 4
67047: ARRAY
67048: PUSH
67049: LD_INT 1
67051: ARRAY
67052: PPUSH
67053: LD_VAR 0 2
67057: PUSH
67058: LD_VAR 0 4
67062: ARRAY
67063: PUSH
67064: LD_INT 2
67066: ARRAY
67067: PPUSH
67068: CALL_OW 297
67072: ST_TO_ADDR
// if tdist < dist then
67073: LD_VAR 0 6
67077: PUSH
67078: LD_VAR 0 5
67082: LESS
67083: IFFALSE 67111
// begin hex := hexes [ i ] ;
67085: LD_ADDR_VAR 0 8
67089: PUSH
67090: LD_VAR 0 2
67094: PUSH
67095: LD_VAR 0 4
67099: ARRAY
67100: ST_TO_ADDR
// dist := tdist ;
67101: LD_ADDR_VAR 0 5
67105: PUSH
67106: LD_VAR 0 6
67110: ST_TO_ADDR
// end ; end ;
67111: GO 67025
67113: POP
67114: POP
// result := hex ;
67115: LD_ADDR_VAR 0 3
67119: PUSH
67120: LD_VAR 0 8
67124: ST_TO_ADDR
// end ;
67125: LD_VAR 0 3
67129: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67130: LD_INT 0
67132: PPUSH
67133: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67134: LD_VAR 0 1
67138: NOT
67139: PUSH
67140: LD_VAR 0 1
67144: PUSH
67145: LD_INT 21
67147: PUSH
67148: LD_INT 2
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 23
67157: PUSH
67158: LD_INT 2
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PPUSH
67169: CALL_OW 69
67173: IN
67174: NOT
67175: OR
67176: IFFALSE 67180
// exit ;
67178: GO 67227
// for i = 1 to 3 do
67180: LD_ADDR_VAR 0 3
67184: PUSH
67185: DOUBLE
67186: LD_INT 1
67188: DEC
67189: ST_TO_ADDR
67190: LD_INT 3
67192: PUSH
67193: FOR_TO
67194: IFFALSE 67225
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67196: LD_VAR 0 1
67200: PPUSH
67201: CALL_OW 250
67205: PPUSH
67206: LD_VAR 0 1
67210: PPUSH
67211: CALL_OW 251
67215: PPUSH
67216: LD_INT 1
67218: PPUSH
67219: CALL_OW 453
67223: GO 67193
67225: POP
67226: POP
// end ;
67227: LD_VAR 0 2
67231: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67232: LD_INT 0
67234: PPUSH
67235: PPUSH
67236: PPUSH
67237: PPUSH
67238: PPUSH
67239: PPUSH
// if not unit or not enemy_unit then
67240: LD_VAR 0 1
67244: NOT
67245: PUSH
67246: LD_VAR 0 2
67250: NOT
67251: OR
67252: IFFALSE 67256
// exit ;
67254: GO 67723
// if GetLives ( i ) < 250 then
67256: LD_VAR 0 4
67260: PPUSH
67261: CALL_OW 256
67265: PUSH
67266: LD_INT 250
67268: LESS
67269: IFFALSE 67282
// begin ComAutodestruct ( i ) ;
67271: LD_VAR 0 4
67275: PPUSH
67276: CALL 67130 0 1
// exit ;
67280: GO 67723
// end ; x := GetX ( enemy_unit ) ;
67282: LD_ADDR_VAR 0 7
67286: PUSH
67287: LD_VAR 0 2
67291: PPUSH
67292: CALL_OW 250
67296: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67297: LD_ADDR_VAR 0 8
67301: PUSH
67302: LD_VAR 0 2
67306: PPUSH
67307: CALL_OW 251
67311: ST_TO_ADDR
// if not x or not y then
67312: LD_VAR 0 7
67316: NOT
67317: PUSH
67318: LD_VAR 0 8
67322: NOT
67323: OR
67324: IFFALSE 67328
// exit ;
67326: GO 67723
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67328: LD_ADDR_VAR 0 6
67332: PUSH
67333: LD_VAR 0 7
67337: PPUSH
67338: LD_INT 0
67340: PPUSH
67341: LD_INT 4
67343: PPUSH
67344: CALL_OW 272
67348: PUSH
67349: LD_VAR 0 8
67353: PPUSH
67354: LD_INT 0
67356: PPUSH
67357: LD_INT 4
67359: PPUSH
67360: CALL_OW 273
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_VAR 0 7
67373: PPUSH
67374: LD_INT 1
67376: PPUSH
67377: LD_INT 4
67379: PPUSH
67380: CALL_OW 272
67384: PUSH
67385: LD_VAR 0 8
67389: PPUSH
67390: LD_INT 1
67392: PPUSH
67393: LD_INT 4
67395: PPUSH
67396: CALL_OW 273
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: LD_VAR 0 7
67409: PPUSH
67410: LD_INT 2
67412: PPUSH
67413: LD_INT 4
67415: PPUSH
67416: CALL_OW 272
67420: PUSH
67421: LD_VAR 0 8
67425: PPUSH
67426: LD_INT 2
67428: PPUSH
67429: LD_INT 4
67431: PPUSH
67432: CALL_OW 273
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_VAR 0 7
67445: PPUSH
67446: LD_INT 3
67448: PPUSH
67449: LD_INT 4
67451: PPUSH
67452: CALL_OW 272
67456: PUSH
67457: LD_VAR 0 8
67461: PPUSH
67462: LD_INT 3
67464: PPUSH
67465: LD_INT 4
67467: PPUSH
67468: CALL_OW 273
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_VAR 0 7
67481: PPUSH
67482: LD_INT 4
67484: PPUSH
67485: LD_INT 4
67487: PPUSH
67488: CALL_OW 272
67492: PUSH
67493: LD_VAR 0 8
67497: PPUSH
67498: LD_INT 4
67500: PPUSH
67501: LD_INT 4
67503: PPUSH
67504: CALL_OW 273
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_VAR 0 7
67517: PPUSH
67518: LD_INT 5
67520: PPUSH
67521: LD_INT 4
67523: PPUSH
67524: CALL_OW 272
67528: PUSH
67529: LD_VAR 0 8
67533: PPUSH
67534: LD_INT 5
67536: PPUSH
67537: LD_INT 4
67539: PPUSH
67540: CALL_OW 273
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: ST_TO_ADDR
// for i = tmp downto 1 do
67557: LD_ADDR_VAR 0 4
67561: PUSH
67562: DOUBLE
67563: LD_VAR 0 6
67567: INC
67568: ST_TO_ADDR
67569: LD_INT 1
67571: PUSH
67572: FOR_DOWNTO
67573: IFFALSE 67674
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67575: LD_VAR 0 6
67579: PUSH
67580: LD_VAR 0 4
67584: ARRAY
67585: PUSH
67586: LD_INT 1
67588: ARRAY
67589: PPUSH
67590: LD_VAR 0 6
67594: PUSH
67595: LD_VAR 0 4
67599: ARRAY
67600: PUSH
67601: LD_INT 2
67603: ARRAY
67604: PPUSH
67605: CALL_OW 488
67609: NOT
67610: PUSH
67611: LD_VAR 0 6
67615: PUSH
67616: LD_VAR 0 4
67620: ARRAY
67621: PUSH
67622: LD_INT 1
67624: ARRAY
67625: PPUSH
67626: LD_VAR 0 6
67630: PUSH
67631: LD_VAR 0 4
67635: ARRAY
67636: PUSH
67637: LD_INT 2
67639: ARRAY
67640: PPUSH
67641: CALL_OW 428
67645: PUSH
67646: LD_INT 0
67648: NONEQUAL
67649: OR
67650: IFFALSE 67672
// tmp := Delete ( tmp , i ) ;
67652: LD_ADDR_VAR 0 6
67656: PUSH
67657: LD_VAR 0 6
67661: PPUSH
67662: LD_VAR 0 4
67666: PPUSH
67667: CALL_OW 3
67671: ST_TO_ADDR
67672: GO 67572
67674: POP
67675: POP
// j := GetClosestHex ( unit , tmp ) ;
67676: LD_ADDR_VAR 0 5
67680: PUSH
67681: LD_VAR 0 1
67685: PPUSH
67686: LD_VAR 0 6
67690: PPUSH
67691: CALL 66978 0 2
67695: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67696: LD_VAR 0 1
67700: PPUSH
67701: LD_VAR 0 5
67705: PUSH
67706: LD_INT 1
67708: ARRAY
67709: PPUSH
67710: LD_VAR 0 5
67714: PUSH
67715: LD_INT 2
67717: ARRAY
67718: PPUSH
67719: CALL_OW 111
// end ;
67723: LD_VAR 0 3
67727: RET
// export function PrepareApemanSoldier ( ) ; begin
67728: LD_INT 0
67730: PPUSH
// uc_nation := 0 ;
67731: LD_ADDR_OWVAR 21
67735: PUSH
67736: LD_INT 0
67738: ST_TO_ADDR
// hc_sex := sex_male ;
67739: LD_ADDR_OWVAR 27
67743: PUSH
67744: LD_INT 1
67746: ST_TO_ADDR
// hc_name :=  ;
67747: LD_ADDR_OWVAR 26
67751: PUSH
67752: LD_STRING 
67754: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
67755: LD_ADDR_OWVAR 28
67759: PUSH
67760: LD_INT 15
67762: ST_TO_ADDR
// hc_gallery :=  ;
67763: LD_ADDR_OWVAR 33
67767: PUSH
67768: LD_STRING 
67770: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67771: LD_ADDR_OWVAR 31
67775: PUSH
67776: LD_INT 0
67778: PPUSH
67779: LD_INT 3
67781: PPUSH
67782: CALL_OW 12
67786: PUSH
67787: LD_INT 0
67789: PPUSH
67790: LD_INT 3
67792: PPUSH
67793: CALL_OW 12
67797: PUSH
67798: LD_INT 0
67800: PUSH
67801: LD_INT 0
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67810: LD_ADDR_OWVAR 29
67814: PUSH
67815: LD_INT 12
67817: PUSH
67818: LD_INT 12
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: ST_TO_ADDR
// end ;
67825: LD_VAR 0 1
67829: RET
// export function PrepareApemanEngineer ( ) ; begin
67830: LD_INT 0
67832: PPUSH
// uc_nation := 0 ;
67833: LD_ADDR_OWVAR 21
67837: PUSH
67838: LD_INT 0
67840: ST_TO_ADDR
// hc_sex := sex_male ;
67841: LD_ADDR_OWVAR 27
67845: PUSH
67846: LD_INT 1
67848: ST_TO_ADDR
// hc_name :=  ;
67849: LD_ADDR_OWVAR 26
67853: PUSH
67854: LD_STRING 
67856: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
67857: LD_ADDR_OWVAR 28
67861: PUSH
67862: LD_INT 16
67864: ST_TO_ADDR
// hc_gallery :=  ;
67865: LD_ADDR_OWVAR 33
67869: PUSH
67870: LD_STRING 
67872: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67873: LD_ADDR_OWVAR 31
67877: PUSH
67878: LD_INT 0
67880: PPUSH
67881: LD_INT 3
67883: PPUSH
67884: CALL_OW 12
67888: PUSH
67889: LD_INT 0
67891: PPUSH
67892: LD_INT 3
67894: PPUSH
67895: CALL_OW 12
67899: PUSH
67900: LD_INT 0
67902: PUSH
67903: LD_INT 0
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67912: LD_ADDR_OWVAR 29
67916: PUSH
67917: LD_INT 12
67919: PUSH
67920: LD_INT 12
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: ST_TO_ADDR
// end ;
67927: LD_VAR 0 1
67931: RET
// export function PrepareApeman ( agressivity ) ; begin
67932: LD_INT 0
67934: PPUSH
// uc_side := 0 ;
67935: LD_ADDR_OWVAR 20
67939: PUSH
67940: LD_INT 0
67942: ST_TO_ADDR
// uc_nation := 0 ;
67943: LD_ADDR_OWVAR 21
67947: PUSH
67948: LD_INT 0
67950: ST_TO_ADDR
// hc_sex := sex_male ;
67951: LD_ADDR_OWVAR 27
67955: PUSH
67956: LD_INT 1
67958: ST_TO_ADDR
// hc_class := class_apeman ;
67959: LD_ADDR_OWVAR 28
67963: PUSH
67964: LD_INT 12
67966: ST_TO_ADDR
// hc_gallery :=  ;
67967: LD_ADDR_OWVAR 33
67971: PUSH
67972: LD_STRING 
67974: ST_TO_ADDR
// hc_name :=  ;
67975: LD_ADDR_OWVAR 26
67979: PUSH
67980: LD_STRING 
67982: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67983: LD_ADDR_OWVAR 29
67987: PUSH
67988: LD_INT 12
67990: PUSH
67991: LD_INT 12
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: ST_TO_ADDR
// if agressivity = 0 then
67998: LD_VAR 0 1
68002: PUSH
68003: LD_INT 0
68005: EQUAL
68006: IFFALSE 68018
// hc_agressivity := 0 else
68008: LD_ADDR_OWVAR 35
68012: PUSH
68013: LD_INT 0
68015: ST_TO_ADDR
68016: GO 68039
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68018: LD_ADDR_OWVAR 35
68022: PUSH
68023: LD_VAR 0 1
68027: NEG
68028: PPUSH
68029: LD_VAR 0 1
68033: PPUSH
68034: CALL_OW 12
68038: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68039: LD_ADDR_OWVAR 31
68043: PUSH
68044: LD_INT 0
68046: PPUSH
68047: LD_INT 3
68049: PPUSH
68050: CALL_OW 12
68054: PUSH
68055: LD_INT 0
68057: PPUSH
68058: LD_INT 3
68060: PPUSH
68061: CALL_OW 12
68065: PUSH
68066: LD_INT 0
68068: PUSH
68069: LD_INT 0
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: ST_TO_ADDR
// end ;
68078: LD_VAR 0 2
68082: RET
// export function PrepareTiger ( agressivity ) ; begin
68083: LD_INT 0
68085: PPUSH
// uc_side := 0 ;
68086: LD_ADDR_OWVAR 20
68090: PUSH
68091: LD_INT 0
68093: ST_TO_ADDR
// uc_nation := 0 ;
68094: LD_ADDR_OWVAR 21
68098: PUSH
68099: LD_INT 0
68101: ST_TO_ADDR
// InitHc ;
68102: CALL_OW 19
// hc_class := class_tiger ;
68106: LD_ADDR_OWVAR 28
68110: PUSH
68111: LD_INT 14
68113: ST_TO_ADDR
// hc_gallery :=  ;
68114: LD_ADDR_OWVAR 33
68118: PUSH
68119: LD_STRING 
68121: ST_TO_ADDR
// hc_name :=  ;
68122: LD_ADDR_OWVAR 26
68126: PUSH
68127: LD_STRING 
68129: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68130: LD_ADDR_OWVAR 35
68134: PUSH
68135: LD_VAR 0 1
68139: NEG
68140: PPUSH
68141: LD_VAR 0 1
68145: PPUSH
68146: CALL_OW 12
68150: ST_TO_ADDR
// end ;
68151: LD_VAR 0 2
68155: RET
// export function PrepareEnchidna ( ) ; begin
68156: LD_INT 0
68158: PPUSH
// uc_side := 0 ;
68159: LD_ADDR_OWVAR 20
68163: PUSH
68164: LD_INT 0
68166: ST_TO_ADDR
// uc_nation := 0 ;
68167: LD_ADDR_OWVAR 21
68171: PUSH
68172: LD_INT 0
68174: ST_TO_ADDR
// InitHc ;
68175: CALL_OW 19
// hc_class := class_baggie ;
68179: LD_ADDR_OWVAR 28
68183: PUSH
68184: LD_INT 13
68186: ST_TO_ADDR
// hc_gallery :=  ;
68187: LD_ADDR_OWVAR 33
68191: PUSH
68192: LD_STRING 
68194: ST_TO_ADDR
// hc_name :=  ;
68195: LD_ADDR_OWVAR 26
68199: PUSH
68200: LD_STRING 
68202: ST_TO_ADDR
// end ;
68203: LD_VAR 0 1
68207: RET
// export function PrepareFrog ( ) ; begin
68208: LD_INT 0
68210: PPUSH
// uc_side := 0 ;
68211: LD_ADDR_OWVAR 20
68215: PUSH
68216: LD_INT 0
68218: ST_TO_ADDR
// uc_nation := 0 ;
68219: LD_ADDR_OWVAR 21
68223: PUSH
68224: LD_INT 0
68226: ST_TO_ADDR
// InitHc ;
68227: CALL_OW 19
// hc_class := class_frog ;
68231: LD_ADDR_OWVAR 28
68235: PUSH
68236: LD_INT 19
68238: ST_TO_ADDR
// hc_gallery :=  ;
68239: LD_ADDR_OWVAR 33
68243: PUSH
68244: LD_STRING 
68246: ST_TO_ADDR
// hc_name :=  ;
68247: LD_ADDR_OWVAR 26
68251: PUSH
68252: LD_STRING 
68254: ST_TO_ADDR
// end ;
68255: LD_VAR 0 1
68259: RET
// export function PrepareFish ( ) ; begin
68260: LD_INT 0
68262: PPUSH
// uc_side := 0 ;
68263: LD_ADDR_OWVAR 20
68267: PUSH
68268: LD_INT 0
68270: ST_TO_ADDR
// uc_nation := 0 ;
68271: LD_ADDR_OWVAR 21
68275: PUSH
68276: LD_INT 0
68278: ST_TO_ADDR
// InitHc ;
68279: CALL_OW 19
// hc_class := class_fish ;
68283: LD_ADDR_OWVAR 28
68287: PUSH
68288: LD_INT 20
68290: ST_TO_ADDR
// hc_gallery :=  ;
68291: LD_ADDR_OWVAR 33
68295: PUSH
68296: LD_STRING 
68298: ST_TO_ADDR
// hc_name :=  ;
68299: LD_ADDR_OWVAR 26
68303: PUSH
68304: LD_STRING 
68306: ST_TO_ADDR
// end ;
68307: LD_VAR 0 1
68311: RET
// export function PrepareBird ( ) ; begin
68312: LD_INT 0
68314: PPUSH
// uc_side := 0 ;
68315: LD_ADDR_OWVAR 20
68319: PUSH
68320: LD_INT 0
68322: ST_TO_ADDR
// uc_nation := 0 ;
68323: LD_ADDR_OWVAR 21
68327: PUSH
68328: LD_INT 0
68330: ST_TO_ADDR
// InitHc ;
68331: CALL_OW 19
// hc_class := class_phororhacos ;
68335: LD_ADDR_OWVAR 28
68339: PUSH
68340: LD_INT 18
68342: ST_TO_ADDR
// hc_gallery :=  ;
68343: LD_ADDR_OWVAR 33
68347: PUSH
68348: LD_STRING 
68350: ST_TO_ADDR
// hc_name :=  ;
68351: LD_ADDR_OWVAR 26
68355: PUSH
68356: LD_STRING 
68358: ST_TO_ADDR
// end ;
68359: LD_VAR 0 1
68363: RET
// export function PrepareHorse ( ) ; begin
68364: LD_INT 0
68366: PPUSH
// uc_side := 0 ;
68367: LD_ADDR_OWVAR 20
68371: PUSH
68372: LD_INT 0
68374: ST_TO_ADDR
// uc_nation := 0 ;
68375: LD_ADDR_OWVAR 21
68379: PUSH
68380: LD_INT 0
68382: ST_TO_ADDR
// InitHc ;
68383: CALL_OW 19
// hc_class := class_horse ;
68387: LD_ADDR_OWVAR 28
68391: PUSH
68392: LD_INT 21
68394: ST_TO_ADDR
// hc_gallery :=  ;
68395: LD_ADDR_OWVAR 33
68399: PUSH
68400: LD_STRING 
68402: ST_TO_ADDR
// hc_name :=  ;
68403: LD_ADDR_OWVAR 26
68407: PUSH
68408: LD_STRING 
68410: ST_TO_ADDR
// end ;
68411: LD_VAR 0 1
68415: RET
// export function PrepareMastodont ( ) ; begin
68416: LD_INT 0
68418: PPUSH
// uc_side := 0 ;
68419: LD_ADDR_OWVAR 20
68423: PUSH
68424: LD_INT 0
68426: ST_TO_ADDR
// uc_nation := 0 ;
68427: LD_ADDR_OWVAR 21
68431: PUSH
68432: LD_INT 0
68434: ST_TO_ADDR
// vc_chassis := class_mastodont ;
68435: LD_ADDR_OWVAR 37
68439: PUSH
68440: LD_INT 31
68442: ST_TO_ADDR
// vc_control := control_rider ;
68443: LD_ADDR_OWVAR 38
68447: PUSH
68448: LD_INT 4
68450: ST_TO_ADDR
// end ;
68451: LD_VAR 0 1
68455: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68456: LD_INT 0
68458: PPUSH
68459: PPUSH
68460: PPUSH
// uc_side = 0 ;
68461: LD_ADDR_OWVAR 20
68465: PUSH
68466: LD_INT 0
68468: ST_TO_ADDR
// uc_nation = 0 ;
68469: LD_ADDR_OWVAR 21
68473: PUSH
68474: LD_INT 0
68476: ST_TO_ADDR
// InitHc_All ( ) ;
68477: CALL_OW 584
// InitVc ;
68481: CALL_OW 20
// if mastodonts then
68485: LD_VAR 0 6
68489: IFFALSE 68556
// for i = 1 to mastodonts do
68491: LD_ADDR_VAR 0 11
68495: PUSH
68496: DOUBLE
68497: LD_INT 1
68499: DEC
68500: ST_TO_ADDR
68501: LD_VAR 0 6
68505: PUSH
68506: FOR_TO
68507: IFFALSE 68554
// begin vc_chassis := 31 ;
68509: LD_ADDR_OWVAR 37
68513: PUSH
68514: LD_INT 31
68516: ST_TO_ADDR
// vc_control := control_rider ;
68517: LD_ADDR_OWVAR 38
68521: PUSH
68522: LD_INT 4
68524: ST_TO_ADDR
// animal := CreateVehicle ;
68525: LD_ADDR_VAR 0 12
68529: PUSH
68530: CALL_OW 45
68534: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68535: LD_VAR 0 12
68539: PPUSH
68540: LD_VAR 0 8
68544: PPUSH
68545: LD_INT 0
68547: PPUSH
68548: CALL 70684 0 3
// end ;
68552: GO 68506
68554: POP
68555: POP
// if horses then
68556: LD_VAR 0 5
68560: IFFALSE 68627
// for i = 1 to horses do
68562: LD_ADDR_VAR 0 11
68566: PUSH
68567: DOUBLE
68568: LD_INT 1
68570: DEC
68571: ST_TO_ADDR
68572: LD_VAR 0 5
68576: PUSH
68577: FOR_TO
68578: IFFALSE 68625
// begin hc_class := 21 ;
68580: LD_ADDR_OWVAR 28
68584: PUSH
68585: LD_INT 21
68587: ST_TO_ADDR
// hc_gallery :=  ;
68588: LD_ADDR_OWVAR 33
68592: PUSH
68593: LD_STRING 
68595: ST_TO_ADDR
// animal := CreateHuman ;
68596: LD_ADDR_VAR 0 12
68600: PUSH
68601: CALL_OW 44
68605: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68606: LD_VAR 0 12
68610: PPUSH
68611: LD_VAR 0 8
68615: PPUSH
68616: LD_INT 0
68618: PPUSH
68619: CALL 70684 0 3
// end ;
68623: GO 68577
68625: POP
68626: POP
// if birds then
68627: LD_VAR 0 1
68631: IFFALSE 68698
// for i = 1 to birds do
68633: LD_ADDR_VAR 0 11
68637: PUSH
68638: DOUBLE
68639: LD_INT 1
68641: DEC
68642: ST_TO_ADDR
68643: LD_VAR 0 1
68647: PUSH
68648: FOR_TO
68649: IFFALSE 68696
// begin hc_class := 18 ;
68651: LD_ADDR_OWVAR 28
68655: PUSH
68656: LD_INT 18
68658: ST_TO_ADDR
// hc_gallery =  ;
68659: LD_ADDR_OWVAR 33
68663: PUSH
68664: LD_STRING 
68666: ST_TO_ADDR
// animal := CreateHuman ;
68667: LD_ADDR_VAR 0 12
68671: PUSH
68672: CALL_OW 44
68676: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68677: LD_VAR 0 12
68681: PPUSH
68682: LD_VAR 0 8
68686: PPUSH
68687: LD_INT 0
68689: PPUSH
68690: CALL 70684 0 3
// end ;
68694: GO 68648
68696: POP
68697: POP
// if tigers then
68698: LD_VAR 0 2
68702: IFFALSE 68786
// for i = 1 to tigers do
68704: LD_ADDR_VAR 0 11
68708: PUSH
68709: DOUBLE
68710: LD_INT 1
68712: DEC
68713: ST_TO_ADDR
68714: LD_VAR 0 2
68718: PUSH
68719: FOR_TO
68720: IFFALSE 68784
// begin hc_class = class_tiger ;
68722: LD_ADDR_OWVAR 28
68726: PUSH
68727: LD_INT 14
68729: ST_TO_ADDR
// hc_gallery =  ;
68730: LD_ADDR_OWVAR 33
68734: PUSH
68735: LD_STRING 
68737: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68738: LD_ADDR_OWVAR 35
68742: PUSH
68743: LD_INT 7
68745: NEG
68746: PPUSH
68747: LD_INT 7
68749: PPUSH
68750: CALL_OW 12
68754: ST_TO_ADDR
// animal := CreateHuman ;
68755: LD_ADDR_VAR 0 12
68759: PUSH
68760: CALL_OW 44
68764: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68765: LD_VAR 0 12
68769: PPUSH
68770: LD_VAR 0 8
68774: PPUSH
68775: LD_INT 0
68777: PPUSH
68778: CALL 70684 0 3
// end ;
68782: GO 68719
68784: POP
68785: POP
// if apemans then
68786: LD_VAR 0 3
68790: IFFALSE 68913
// for i = 1 to apemans do
68792: LD_ADDR_VAR 0 11
68796: PUSH
68797: DOUBLE
68798: LD_INT 1
68800: DEC
68801: ST_TO_ADDR
68802: LD_VAR 0 3
68806: PUSH
68807: FOR_TO
68808: IFFALSE 68911
// begin hc_class = class_apeman ;
68810: LD_ADDR_OWVAR 28
68814: PUSH
68815: LD_INT 12
68817: ST_TO_ADDR
// hc_gallery =  ;
68818: LD_ADDR_OWVAR 33
68822: PUSH
68823: LD_STRING 
68825: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68826: LD_ADDR_OWVAR 35
68830: PUSH
68831: LD_INT 2
68833: NEG
68834: PPUSH
68835: LD_INT 2
68837: PPUSH
68838: CALL_OW 12
68842: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68843: LD_ADDR_OWVAR 31
68847: PUSH
68848: LD_INT 1
68850: PPUSH
68851: LD_INT 3
68853: PPUSH
68854: CALL_OW 12
68858: PUSH
68859: LD_INT 1
68861: PPUSH
68862: LD_INT 3
68864: PPUSH
68865: CALL_OW 12
68869: PUSH
68870: LD_INT 0
68872: PUSH
68873: LD_INT 0
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: LIST
68880: LIST
68881: ST_TO_ADDR
// animal := CreateHuman ;
68882: LD_ADDR_VAR 0 12
68886: PUSH
68887: CALL_OW 44
68891: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68892: LD_VAR 0 12
68896: PPUSH
68897: LD_VAR 0 8
68901: PPUSH
68902: LD_INT 0
68904: PPUSH
68905: CALL 70684 0 3
// end ;
68909: GO 68807
68911: POP
68912: POP
// if enchidnas then
68913: LD_VAR 0 4
68917: IFFALSE 68984
// for i = 1 to enchidnas do
68919: LD_ADDR_VAR 0 11
68923: PUSH
68924: DOUBLE
68925: LD_INT 1
68927: DEC
68928: ST_TO_ADDR
68929: LD_VAR 0 4
68933: PUSH
68934: FOR_TO
68935: IFFALSE 68982
// begin hc_class = 13 ;
68937: LD_ADDR_OWVAR 28
68941: PUSH
68942: LD_INT 13
68944: ST_TO_ADDR
// hc_gallery =  ;
68945: LD_ADDR_OWVAR 33
68949: PUSH
68950: LD_STRING 
68952: ST_TO_ADDR
// animal := CreateHuman ;
68953: LD_ADDR_VAR 0 12
68957: PUSH
68958: CALL_OW 44
68962: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68963: LD_VAR 0 12
68967: PPUSH
68968: LD_VAR 0 8
68972: PPUSH
68973: LD_INT 0
68975: PPUSH
68976: CALL 70684 0 3
// end ;
68980: GO 68934
68982: POP
68983: POP
// if fishes then
68984: LD_VAR 0 7
68988: IFFALSE 69055
// for i = 1 to fishes do
68990: LD_ADDR_VAR 0 11
68994: PUSH
68995: DOUBLE
68996: LD_INT 1
68998: DEC
68999: ST_TO_ADDR
69000: LD_VAR 0 7
69004: PUSH
69005: FOR_TO
69006: IFFALSE 69053
// begin hc_class = 20 ;
69008: LD_ADDR_OWVAR 28
69012: PUSH
69013: LD_INT 20
69015: ST_TO_ADDR
// hc_gallery =  ;
69016: LD_ADDR_OWVAR 33
69020: PUSH
69021: LD_STRING 
69023: ST_TO_ADDR
// animal := CreateHuman ;
69024: LD_ADDR_VAR 0 12
69028: PUSH
69029: CALL_OW 44
69033: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69034: LD_VAR 0 12
69038: PPUSH
69039: LD_VAR 0 9
69043: PPUSH
69044: LD_INT 0
69046: PPUSH
69047: CALL 70684 0 3
// end ;
69051: GO 69005
69053: POP
69054: POP
// end ;
69055: LD_VAR 0 10
69059: RET
// export function WantHeal ( sci , unit ) ; begin
69060: LD_INT 0
69062: PPUSH
// if GetTaskList ( sci ) > 0 then
69063: LD_VAR 0 1
69067: PPUSH
69068: CALL_OW 437
69072: PUSH
69073: LD_INT 0
69075: GREATER
69076: IFFALSE 69146
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69078: LD_VAR 0 1
69082: PPUSH
69083: CALL_OW 437
69087: PUSH
69088: LD_INT 1
69090: ARRAY
69091: PUSH
69092: LD_INT 1
69094: ARRAY
69095: PUSH
69096: LD_STRING l
69098: EQUAL
69099: PUSH
69100: LD_VAR 0 1
69104: PPUSH
69105: CALL_OW 437
69109: PUSH
69110: LD_INT 1
69112: ARRAY
69113: PUSH
69114: LD_INT 4
69116: ARRAY
69117: PUSH
69118: LD_VAR 0 2
69122: EQUAL
69123: AND
69124: IFFALSE 69136
// result := true else
69126: LD_ADDR_VAR 0 3
69130: PUSH
69131: LD_INT 1
69133: ST_TO_ADDR
69134: GO 69144
// result := false ;
69136: LD_ADDR_VAR 0 3
69140: PUSH
69141: LD_INT 0
69143: ST_TO_ADDR
// end else
69144: GO 69154
// result := false ;
69146: LD_ADDR_VAR 0 3
69150: PUSH
69151: LD_INT 0
69153: ST_TO_ADDR
// end ;
69154: LD_VAR 0 3
69158: RET
// export function HealTarget ( sci ) ; begin
69159: LD_INT 0
69161: PPUSH
// if not sci then
69162: LD_VAR 0 1
69166: NOT
69167: IFFALSE 69171
// exit ;
69169: GO 69236
// result := 0 ;
69171: LD_ADDR_VAR 0 2
69175: PUSH
69176: LD_INT 0
69178: ST_TO_ADDR
// if GetTaskList ( sci ) then
69179: LD_VAR 0 1
69183: PPUSH
69184: CALL_OW 437
69188: IFFALSE 69236
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69190: LD_VAR 0 1
69194: PPUSH
69195: CALL_OW 437
69199: PUSH
69200: LD_INT 1
69202: ARRAY
69203: PUSH
69204: LD_INT 1
69206: ARRAY
69207: PUSH
69208: LD_STRING l
69210: EQUAL
69211: IFFALSE 69236
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69213: LD_ADDR_VAR 0 2
69217: PUSH
69218: LD_VAR 0 1
69222: PPUSH
69223: CALL_OW 437
69227: PUSH
69228: LD_INT 1
69230: ARRAY
69231: PUSH
69232: LD_INT 4
69234: ARRAY
69235: ST_TO_ADDR
// end ;
69236: LD_VAR 0 2
69240: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69241: LD_INT 0
69243: PPUSH
69244: PPUSH
69245: PPUSH
69246: PPUSH
// if not base_units then
69247: LD_VAR 0 1
69251: NOT
69252: IFFALSE 69256
// exit ;
69254: GO 69343
// result := false ;
69256: LD_ADDR_VAR 0 2
69260: PUSH
69261: LD_INT 0
69263: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69264: LD_ADDR_VAR 0 5
69268: PUSH
69269: LD_VAR 0 1
69273: PPUSH
69274: LD_INT 21
69276: PUSH
69277: LD_INT 3
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PPUSH
69284: CALL_OW 72
69288: ST_TO_ADDR
// if not tmp then
69289: LD_VAR 0 5
69293: NOT
69294: IFFALSE 69298
// exit ;
69296: GO 69343
// for i in tmp do
69298: LD_ADDR_VAR 0 3
69302: PUSH
69303: LD_VAR 0 5
69307: PUSH
69308: FOR_IN
69309: IFFALSE 69341
// begin result := EnemyInRange ( i , 22 ) ;
69311: LD_ADDR_VAR 0 2
69315: PUSH
69316: LD_VAR 0 3
69320: PPUSH
69321: LD_INT 22
69323: PPUSH
69324: CALL 66780 0 2
69328: ST_TO_ADDR
// if result then
69329: LD_VAR 0 2
69333: IFFALSE 69339
// exit ;
69335: POP
69336: POP
69337: GO 69343
// end ;
69339: GO 69308
69341: POP
69342: POP
// end ;
69343: LD_VAR 0 2
69347: RET
// export function FilterByTag ( units , tag ) ; begin
69348: LD_INT 0
69350: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
69351: LD_ADDR_VAR 0 3
69355: PUSH
69356: LD_VAR 0 1
69360: PPUSH
69361: LD_INT 120
69363: PUSH
69364: LD_VAR 0 2
69368: PUSH
69369: EMPTY
69370: LIST
69371: LIST
69372: PPUSH
69373: CALL_OW 72
69377: ST_TO_ADDR
// end ;
69378: LD_VAR 0 3
69382: RET
// export function IsDriver ( un ) ; begin
69383: LD_INT 0
69385: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69386: LD_ADDR_VAR 0 2
69390: PUSH
69391: LD_VAR 0 1
69395: PUSH
69396: LD_INT 55
69398: PUSH
69399: EMPTY
69400: LIST
69401: PPUSH
69402: CALL_OW 69
69406: IN
69407: ST_TO_ADDR
// end ;
69408: LD_VAR 0 2
69412: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69413: LD_INT 0
69415: PPUSH
69416: PPUSH
// list := [ ] ;
69417: LD_ADDR_VAR 0 5
69421: PUSH
69422: EMPTY
69423: ST_TO_ADDR
// case d of 0 :
69424: LD_VAR 0 3
69428: PUSH
69429: LD_INT 0
69431: DOUBLE
69432: EQUAL
69433: IFTRUE 69437
69435: GO 69570
69437: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69438: LD_ADDR_VAR 0 5
69442: PUSH
69443: LD_VAR 0 1
69447: PUSH
69448: LD_INT 4
69450: MINUS
69451: PUSH
69452: LD_VAR 0 2
69456: PUSH
69457: LD_INT 4
69459: MINUS
69460: PUSH
69461: LD_INT 2
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: LIST
69468: PUSH
69469: LD_VAR 0 1
69473: PUSH
69474: LD_INT 3
69476: MINUS
69477: PUSH
69478: LD_VAR 0 2
69482: PUSH
69483: LD_INT 1
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: LIST
69490: PUSH
69491: LD_VAR 0 1
69495: PUSH
69496: LD_INT 4
69498: PLUS
69499: PUSH
69500: LD_VAR 0 2
69504: PUSH
69505: LD_INT 4
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: LIST
69512: PUSH
69513: LD_VAR 0 1
69517: PUSH
69518: LD_INT 3
69520: PLUS
69521: PUSH
69522: LD_VAR 0 2
69526: PUSH
69527: LD_INT 3
69529: PLUS
69530: PUSH
69531: LD_INT 5
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: LIST
69538: PUSH
69539: LD_VAR 0 1
69543: PUSH
69544: LD_VAR 0 2
69548: PUSH
69549: LD_INT 4
69551: PLUS
69552: PUSH
69553: LD_INT 0
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: LIST
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: ST_TO_ADDR
// end ; 1 :
69568: GO 70268
69570: LD_INT 1
69572: DOUBLE
69573: EQUAL
69574: IFTRUE 69578
69576: GO 69711
69578: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69579: LD_ADDR_VAR 0 5
69583: PUSH
69584: LD_VAR 0 1
69588: PUSH
69589: LD_VAR 0 2
69593: PUSH
69594: LD_INT 4
69596: MINUS
69597: PUSH
69598: LD_INT 3
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: LIST
69605: PUSH
69606: LD_VAR 0 1
69610: PUSH
69611: LD_INT 3
69613: MINUS
69614: PUSH
69615: LD_VAR 0 2
69619: PUSH
69620: LD_INT 3
69622: MINUS
69623: PUSH
69624: LD_INT 2
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: LIST
69631: PUSH
69632: LD_VAR 0 1
69636: PUSH
69637: LD_INT 4
69639: MINUS
69640: PUSH
69641: LD_VAR 0 2
69645: PUSH
69646: LD_INT 1
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: LIST
69653: PUSH
69654: LD_VAR 0 1
69658: PUSH
69659: LD_VAR 0 2
69663: PUSH
69664: LD_INT 3
69666: PLUS
69667: PUSH
69668: LD_INT 0
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: LIST
69675: PUSH
69676: LD_VAR 0 1
69680: PUSH
69681: LD_INT 4
69683: PLUS
69684: PUSH
69685: LD_VAR 0 2
69689: PUSH
69690: LD_INT 4
69692: PLUS
69693: PUSH
69694: LD_INT 5
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: LIST
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: LIST
69706: LIST
69707: LIST
69708: ST_TO_ADDR
// end ; 2 :
69709: GO 70268
69711: LD_INT 2
69713: DOUBLE
69714: EQUAL
69715: IFTRUE 69719
69717: GO 69848
69719: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69720: LD_ADDR_VAR 0 5
69724: PUSH
69725: LD_VAR 0 1
69729: PUSH
69730: LD_VAR 0 2
69734: PUSH
69735: LD_INT 3
69737: MINUS
69738: PUSH
69739: LD_INT 3
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: LIST
69746: PUSH
69747: LD_VAR 0 1
69751: PUSH
69752: LD_INT 4
69754: PLUS
69755: PUSH
69756: LD_VAR 0 2
69760: PUSH
69761: LD_INT 4
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: LIST
69768: PUSH
69769: LD_VAR 0 1
69773: PUSH
69774: LD_VAR 0 2
69778: PUSH
69779: LD_INT 4
69781: PLUS
69782: PUSH
69783: LD_INT 0
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: LIST
69790: PUSH
69791: LD_VAR 0 1
69795: PUSH
69796: LD_INT 3
69798: MINUS
69799: PUSH
69800: LD_VAR 0 2
69804: PUSH
69805: LD_INT 1
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: LIST
69812: PUSH
69813: LD_VAR 0 1
69817: PUSH
69818: LD_INT 4
69820: MINUS
69821: PUSH
69822: LD_VAR 0 2
69826: PUSH
69827: LD_INT 4
69829: MINUS
69830: PUSH
69831: LD_INT 2
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: LIST
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: LIST
69843: LIST
69844: LIST
69845: ST_TO_ADDR
// end ; 3 :
69846: GO 70268
69848: LD_INT 3
69850: DOUBLE
69851: EQUAL
69852: IFTRUE 69856
69854: GO 69989
69856: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69857: LD_ADDR_VAR 0 5
69861: PUSH
69862: LD_VAR 0 1
69866: PUSH
69867: LD_INT 3
69869: PLUS
69870: PUSH
69871: LD_VAR 0 2
69875: PUSH
69876: LD_INT 4
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: LIST
69883: PUSH
69884: LD_VAR 0 1
69888: PUSH
69889: LD_INT 4
69891: PLUS
69892: PUSH
69893: LD_VAR 0 2
69897: PUSH
69898: LD_INT 4
69900: PLUS
69901: PUSH
69902: LD_INT 5
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: LIST
69909: PUSH
69910: LD_VAR 0 1
69914: PUSH
69915: LD_INT 4
69917: MINUS
69918: PUSH
69919: LD_VAR 0 2
69923: PUSH
69924: LD_INT 1
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: LIST
69931: PUSH
69932: LD_VAR 0 1
69936: PUSH
69937: LD_VAR 0 2
69941: PUSH
69942: LD_INT 4
69944: MINUS
69945: PUSH
69946: LD_INT 3
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: LIST
69953: PUSH
69954: LD_VAR 0 1
69958: PUSH
69959: LD_INT 3
69961: MINUS
69962: PUSH
69963: LD_VAR 0 2
69967: PUSH
69968: LD_INT 3
69970: MINUS
69971: PUSH
69972: LD_INT 2
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: LIST
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: LIST
69986: ST_TO_ADDR
// end ; 4 :
69987: GO 70268
69989: LD_INT 4
69991: DOUBLE
69992: EQUAL
69993: IFTRUE 69997
69995: GO 70130
69997: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69998: LD_ADDR_VAR 0 5
70002: PUSH
70003: LD_VAR 0 1
70007: PUSH
70008: LD_VAR 0 2
70012: PUSH
70013: LD_INT 4
70015: PLUS
70016: PUSH
70017: LD_INT 0
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: LIST
70024: PUSH
70025: LD_VAR 0 1
70029: PUSH
70030: LD_INT 3
70032: PLUS
70033: PUSH
70034: LD_VAR 0 2
70038: PUSH
70039: LD_INT 3
70041: PLUS
70042: PUSH
70043: LD_INT 5
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: LIST
70050: PUSH
70051: LD_VAR 0 1
70055: PUSH
70056: LD_INT 4
70058: PLUS
70059: PUSH
70060: LD_VAR 0 2
70064: PUSH
70065: LD_INT 4
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: LIST
70072: PUSH
70073: LD_VAR 0 1
70077: PUSH
70078: LD_VAR 0 2
70082: PUSH
70083: LD_INT 3
70085: MINUS
70086: PUSH
70087: LD_INT 3
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: LIST
70094: PUSH
70095: LD_VAR 0 1
70099: PUSH
70100: LD_INT 4
70102: MINUS
70103: PUSH
70104: LD_VAR 0 2
70108: PUSH
70109: LD_INT 4
70111: MINUS
70112: PUSH
70113: LD_INT 2
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: LIST
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: ST_TO_ADDR
// end ; 5 :
70128: GO 70268
70130: LD_INT 5
70132: DOUBLE
70133: EQUAL
70134: IFTRUE 70138
70136: GO 70267
70138: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70139: LD_ADDR_VAR 0 5
70143: PUSH
70144: LD_VAR 0 1
70148: PUSH
70149: LD_INT 4
70151: MINUS
70152: PUSH
70153: LD_VAR 0 2
70157: PUSH
70158: LD_INT 1
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: LIST
70165: PUSH
70166: LD_VAR 0 1
70170: PUSH
70171: LD_VAR 0 2
70175: PUSH
70176: LD_INT 4
70178: MINUS
70179: PUSH
70180: LD_INT 3
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: LIST
70187: PUSH
70188: LD_VAR 0 1
70192: PUSH
70193: LD_INT 4
70195: PLUS
70196: PUSH
70197: LD_VAR 0 2
70201: PUSH
70202: LD_INT 4
70204: PLUS
70205: PUSH
70206: LD_INT 5
70208: PUSH
70209: EMPTY
70210: LIST
70211: LIST
70212: LIST
70213: PUSH
70214: LD_VAR 0 1
70218: PUSH
70219: LD_INT 3
70221: PLUS
70222: PUSH
70223: LD_VAR 0 2
70227: PUSH
70228: LD_INT 4
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: LIST
70235: PUSH
70236: LD_VAR 0 1
70240: PUSH
70241: LD_VAR 0 2
70245: PUSH
70246: LD_INT 3
70248: PLUS
70249: PUSH
70250: LD_INT 0
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: LIST
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: ST_TO_ADDR
// end ; end ;
70265: GO 70268
70267: POP
// result := list ;
70268: LD_ADDR_VAR 0 4
70272: PUSH
70273: LD_VAR 0 5
70277: ST_TO_ADDR
// end ;
70278: LD_VAR 0 4
70282: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70283: LD_INT 0
70285: PPUSH
70286: PPUSH
70287: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70288: LD_VAR 0 1
70292: NOT
70293: PUSH
70294: LD_VAR 0 2
70298: PUSH
70299: LD_INT 1
70301: PUSH
70302: LD_INT 2
70304: PUSH
70305: LD_INT 3
70307: PUSH
70308: LD_INT 4
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: IN
70317: NOT
70318: OR
70319: IFFALSE 70323
// exit ;
70321: GO 70406
// tmp := [ ] ;
70323: LD_ADDR_VAR 0 5
70327: PUSH
70328: EMPTY
70329: ST_TO_ADDR
// for i in units do
70330: LD_ADDR_VAR 0 4
70334: PUSH
70335: LD_VAR 0 1
70339: PUSH
70340: FOR_IN
70341: IFFALSE 70375
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
70343: LD_ADDR_VAR 0 5
70347: PUSH
70348: LD_VAR 0 5
70352: PPUSH
70353: LD_VAR 0 4
70357: PPUSH
70358: LD_VAR 0 2
70362: PPUSH
70363: CALL_OW 259
70367: PPUSH
70368: CALL 71779 0 2
70372: ST_TO_ADDR
70373: GO 70340
70375: POP
70376: POP
// if not tmp then
70377: LD_VAR 0 5
70381: NOT
70382: IFFALSE 70386
// exit ;
70384: GO 70406
// result := SortListByListDesc ( units , tmp ) ;
70386: LD_ADDR_VAR 0 3
70390: PUSH
70391: LD_VAR 0 1
70395: PPUSH
70396: LD_VAR 0 5
70400: PPUSH
70401: CALL_OW 77
70405: ST_TO_ADDR
// end ;
70406: LD_VAR 0 3
70410: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70411: LD_INT 0
70413: PPUSH
70414: PPUSH
70415: PPUSH
// result := false ;
70416: LD_ADDR_VAR 0 3
70420: PUSH
70421: LD_INT 0
70423: ST_TO_ADDR
// if not building then
70424: LD_VAR 0 2
70428: NOT
70429: IFFALSE 70433
// exit ;
70431: GO 70571
// x := GetX ( building ) ;
70433: LD_ADDR_VAR 0 4
70437: PUSH
70438: LD_VAR 0 2
70442: PPUSH
70443: CALL_OW 250
70447: ST_TO_ADDR
// y := GetY ( building ) ;
70448: LD_ADDR_VAR 0 5
70452: PUSH
70453: LD_VAR 0 2
70457: PPUSH
70458: CALL_OW 251
70462: ST_TO_ADDR
// if not x or not y then
70463: LD_VAR 0 4
70467: NOT
70468: PUSH
70469: LD_VAR 0 5
70473: NOT
70474: OR
70475: IFFALSE 70479
// exit ;
70477: GO 70571
// if GetTaskList ( unit ) then
70479: LD_VAR 0 1
70483: PPUSH
70484: CALL_OW 437
70488: IFFALSE 70571
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70490: LD_STRING e
70492: PUSH
70493: LD_VAR 0 1
70497: PPUSH
70498: CALL_OW 437
70502: PUSH
70503: LD_INT 1
70505: ARRAY
70506: PUSH
70507: LD_INT 1
70509: ARRAY
70510: EQUAL
70511: PUSH
70512: LD_VAR 0 4
70516: PUSH
70517: LD_VAR 0 1
70521: PPUSH
70522: CALL_OW 437
70526: PUSH
70527: LD_INT 1
70529: ARRAY
70530: PUSH
70531: LD_INT 2
70533: ARRAY
70534: EQUAL
70535: AND
70536: PUSH
70537: LD_VAR 0 5
70541: PUSH
70542: LD_VAR 0 1
70546: PPUSH
70547: CALL_OW 437
70551: PUSH
70552: LD_INT 1
70554: ARRAY
70555: PUSH
70556: LD_INT 3
70558: ARRAY
70559: EQUAL
70560: AND
70561: IFFALSE 70571
// result := true end ;
70563: LD_ADDR_VAR 0 3
70567: PUSH
70568: LD_INT 1
70570: ST_TO_ADDR
// end ;
70571: LD_VAR 0 3
70575: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70576: LD_INT 0
70578: PPUSH
// result := false ;
70579: LD_ADDR_VAR 0 4
70583: PUSH
70584: LD_INT 0
70586: ST_TO_ADDR
// if GetTaskList ( unit ) then
70587: LD_VAR 0 1
70591: PPUSH
70592: CALL_OW 437
70596: IFFALSE 70679
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70598: LD_STRING M
70600: PUSH
70601: LD_VAR 0 1
70605: PPUSH
70606: CALL_OW 437
70610: PUSH
70611: LD_INT 1
70613: ARRAY
70614: PUSH
70615: LD_INT 1
70617: ARRAY
70618: EQUAL
70619: PUSH
70620: LD_VAR 0 2
70624: PUSH
70625: LD_VAR 0 1
70629: PPUSH
70630: CALL_OW 437
70634: PUSH
70635: LD_INT 1
70637: ARRAY
70638: PUSH
70639: LD_INT 2
70641: ARRAY
70642: EQUAL
70643: AND
70644: PUSH
70645: LD_VAR 0 3
70649: PUSH
70650: LD_VAR 0 1
70654: PPUSH
70655: CALL_OW 437
70659: PUSH
70660: LD_INT 1
70662: ARRAY
70663: PUSH
70664: LD_INT 3
70666: ARRAY
70667: EQUAL
70668: AND
70669: IFFALSE 70679
// result := true ;
70671: LD_ADDR_VAR 0 4
70675: PUSH
70676: LD_INT 1
70678: ST_TO_ADDR
// end ; end ;
70679: LD_VAR 0 4
70683: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70684: LD_INT 0
70686: PPUSH
70687: PPUSH
70688: PPUSH
70689: PPUSH
// if not unit or not area then
70690: LD_VAR 0 1
70694: NOT
70695: PUSH
70696: LD_VAR 0 2
70700: NOT
70701: OR
70702: IFFALSE 70706
// exit ;
70704: GO 70882
// tmp := AreaToList ( area , i ) ;
70706: LD_ADDR_VAR 0 6
70710: PUSH
70711: LD_VAR 0 2
70715: PPUSH
70716: LD_VAR 0 5
70720: PPUSH
70721: CALL_OW 517
70725: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70726: LD_ADDR_VAR 0 5
70730: PUSH
70731: DOUBLE
70732: LD_INT 1
70734: DEC
70735: ST_TO_ADDR
70736: LD_VAR 0 6
70740: PUSH
70741: LD_INT 1
70743: ARRAY
70744: PUSH
70745: FOR_TO
70746: IFFALSE 70880
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70748: LD_ADDR_VAR 0 7
70752: PUSH
70753: LD_VAR 0 6
70757: PUSH
70758: LD_INT 1
70760: ARRAY
70761: PUSH
70762: LD_VAR 0 5
70766: ARRAY
70767: PUSH
70768: LD_VAR 0 6
70772: PUSH
70773: LD_INT 2
70775: ARRAY
70776: PUSH
70777: LD_VAR 0 5
70781: ARRAY
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
70787: LD_INT 92
70789: PUSH
70790: LD_VAR 0 7
70794: PUSH
70795: LD_INT 1
70797: ARRAY
70798: PUSH
70799: LD_VAR 0 7
70803: PUSH
70804: LD_INT 2
70806: ARRAY
70807: PUSH
70808: LD_INT 2
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: PPUSH
70817: CALL_OW 69
70821: PUSH
70822: LD_INT 0
70824: EQUAL
70825: IFFALSE 70878
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70827: LD_VAR 0 1
70831: PPUSH
70832: LD_VAR 0 7
70836: PUSH
70837: LD_INT 1
70839: ARRAY
70840: PPUSH
70841: LD_VAR 0 7
70845: PUSH
70846: LD_INT 2
70848: ARRAY
70849: PPUSH
70850: LD_VAR 0 3
70854: PPUSH
70855: CALL_OW 48
// result := IsPlaced ( unit ) ;
70859: LD_ADDR_VAR 0 4
70863: PUSH
70864: LD_VAR 0 1
70868: PPUSH
70869: CALL_OW 305
70873: ST_TO_ADDR
// exit ;
70874: POP
70875: POP
70876: GO 70882
// end ; end ;
70878: GO 70745
70880: POP
70881: POP
// end ;
70882: LD_VAR 0 4
70886: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70887: LD_INT 0
70889: PPUSH
70890: PPUSH
70891: PPUSH
// if not side or side > 8 then
70892: LD_VAR 0 1
70896: NOT
70897: PUSH
70898: LD_VAR 0 1
70902: PUSH
70903: LD_INT 8
70905: GREATER
70906: OR
70907: IFFALSE 70911
// exit ;
70909: GO 71098
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70911: LD_ADDR_VAR 0 4
70915: PUSH
70916: LD_INT 22
70918: PUSH
70919: LD_VAR 0 1
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: PUSH
70928: LD_INT 21
70930: PUSH
70931: LD_INT 3
70933: PUSH
70934: EMPTY
70935: LIST
70936: LIST
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PPUSH
70942: CALL_OW 69
70946: ST_TO_ADDR
// if not tmp then
70947: LD_VAR 0 4
70951: NOT
70952: IFFALSE 70956
// exit ;
70954: GO 71098
// enable_addtolog := true ;
70956: LD_ADDR_OWVAR 81
70960: PUSH
70961: LD_INT 1
70963: ST_TO_ADDR
// AddToLog ( [ ) ;
70964: LD_STRING [
70966: PPUSH
70967: CALL_OW 561
// for i in tmp do
70971: LD_ADDR_VAR 0 3
70975: PUSH
70976: LD_VAR 0 4
70980: PUSH
70981: FOR_IN
70982: IFFALSE 71089
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70984: LD_STRING [
70986: PUSH
70987: LD_VAR 0 3
70991: PPUSH
70992: CALL_OW 266
70996: STR
70997: PUSH
70998: LD_STRING , 
71000: STR
71001: PUSH
71002: LD_VAR 0 3
71006: PPUSH
71007: CALL_OW 250
71011: STR
71012: PUSH
71013: LD_STRING , 
71015: STR
71016: PUSH
71017: LD_VAR 0 3
71021: PPUSH
71022: CALL_OW 251
71026: STR
71027: PUSH
71028: LD_STRING , 
71030: STR
71031: PUSH
71032: LD_VAR 0 3
71036: PPUSH
71037: CALL_OW 254
71041: STR
71042: PUSH
71043: LD_STRING , 
71045: STR
71046: PUSH
71047: LD_VAR 0 3
71051: PPUSH
71052: LD_INT 1
71054: PPUSH
71055: CALL_OW 268
71059: STR
71060: PUSH
71061: LD_STRING , 
71063: STR
71064: PUSH
71065: LD_VAR 0 3
71069: PPUSH
71070: LD_INT 2
71072: PPUSH
71073: CALL_OW 268
71077: STR
71078: PUSH
71079: LD_STRING ],
71081: STR
71082: PPUSH
71083: CALL_OW 561
// end ;
71087: GO 70981
71089: POP
71090: POP
// AddToLog ( ]; ) ;
71091: LD_STRING ];
71093: PPUSH
71094: CALL_OW 561
// end ;
71098: LD_VAR 0 2
71102: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71103: LD_INT 0
71105: PPUSH
71106: PPUSH
71107: PPUSH
71108: PPUSH
71109: PPUSH
// if not area or not rate or not max then
71110: LD_VAR 0 1
71114: NOT
71115: PUSH
71116: LD_VAR 0 2
71120: NOT
71121: OR
71122: PUSH
71123: LD_VAR 0 4
71127: NOT
71128: OR
71129: IFFALSE 71133
// exit ;
71131: GO 71322
// while 1 do
71133: LD_INT 1
71135: IFFALSE 71322
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71137: LD_ADDR_VAR 0 9
71141: PUSH
71142: LD_VAR 0 1
71146: PPUSH
71147: LD_INT 1
71149: PPUSH
71150: CALL_OW 287
71154: PUSH
71155: LD_INT 10
71157: MUL
71158: ST_TO_ADDR
// r := rate / 10 ;
71159: LD_ADDR_VAR 0 7
71163: PUSH
71164: LD_VAR 0 2
71168: PUSH
71169: LD_INT 10
71171: DIVREAL
71172: ST_TO_ADDR
// time := 1 1$00 ;
71173: LD_ADDR_VAR 0 8
71177: PUSH
71178: LD_INT 2100
71180: ST_TO_ADDR
// if amount < min then
71181: LD_VAR 0 9
71185: PUSH
71186: LD_VAR 0 3
71190: LESS
71191: IFFALSE 71209
// r := r * 2 else
71193: LD_ADDR_VAR 0 7
71197: PUSH
71198: LD_VAR 0 7
71202: PUSH
71203: LD_INT 2
71205: MUL
71206: ST_TO_ADDR
71207: GO 71235
// if amount > max then
71209: LD_VAR 0 9
71213: PUSH
71214: LD_VAR 0 4
71218: GREATER
71219: IFFALSE 71235
// r := r / 2 ;
71221: LD_ADDR_VAR 0 7
71225: PUSH
71226: LD_VAR 0 7
71230: PUSH
71231: LD_INT 2
71233: DIVREAL
71234: ST_TO_ADDR
// time := time / r ;
71235: LD_ADDR_VAR 0 8
71239: PUSH
71240: LD_VAR 0 8
71244: PUSH
71245: LD_VAR 0 7
71249: DIVREAL
71250: ST_TO_ADDR
// if time < 0 then
71251: LD_VAR 0 8
71255: PUSH
71256: LD_INT 0
71258: LESS
71259: IFFALSE 71276
// time := time * - 1 ;
71261: LD_ADDR_VAR 0 8
71265: PUSH
71266: LD_VAR 0 8
71270: PUSH
71271: LD_INT 1
71273: NEG
71274: MUL
71275: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
71276: LD_VAR 0 8
71280: PUSH
71281: LD_INT 35
71283: PPUSH
71284: LD_INT 875
71286: PPUSH
71287: CALL_OW 12
71291: PLUS
71292: PPUSH
71293: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71297: LD_INT 1
71299: PPUSH
71300: LD_INT 5
71302: PPUSH
71303: CALL_OW 12
71307: PPUSH
71308: LD_VAR 0 1
71312: PPUSH
71313: LD_INT 1
71315: PPUSH
71316: CALL_OW 55
// end ;
71320: GO 71133
// end ;
71322: LD_VAR 0 5
71326: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71327: LD_INT 0
71329: PPUSH
71330: PPUSH
71331: PPUSH
71332: PPUSH
71333: PPUSH
71334: PPUSH
71335: PPUSH
71336: PPUSH
// if not turrets or not factories then
71337: LD_VAR 0 1
71341: NOT
71342: PUSH
71343: LD_VAR 0 2
71347: NOT
71348: OR
71349: IFFALSE 71353
// exit ;
71351: GO 71660
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71353: LD_ADDR_VAR 0 10
71357: PUSH
71358: LD_INT 5
71360: PUSH
71361: LD_INT 6
71363: PUSH
71364: EMPTY
71365: LIST
71366: LIST
71367: PUSH
71368: LD_INT 2
71370: PUSH
71371: LD_INT 4
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: PUSH
71378: LD_INT 3
71380: PUSH
71381: LD_INT 5
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: LIST
71392: PUSH
71393: LD_INT 24
71395: PUSH
71396: LD_INT 25
71398: PUSH
71399: EMPTY
71400: LIST
71401: LIST
71402: PUSH
71403: LD_INT 23
71405: PUSH
71406: LD_INT 27
71408: PUSH
71409: EMPTY
71410: LIST
71411: LIST
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: PUSH
71417: LD_INT 42
71419: PUSH
71420: LD_INT 43
71422: PUSH
71423: EMPTY
71424: LIST
71425: LIST
71426: PUSH
71427: LD_INT 44
71429: PUSH
71430: LD_INT 46
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: PUSH
71437: LD_INT 45
71439: PUSH
71440: LD_INT 47
71442: PUSH
71443: EMPTY
71444: LIST
71445: LIST
71446: PUSH
71447: EMPTY
71448: LIST
71449: LIST
71450: LIST
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: LIST
71456: ST_TO_ADDR
// result := [ ] ;
71457: LD_ADDR_VAR 0 3
71461: PUSH
71462: EMPTY
71463: ST_TO_ADDR
// for i in turrets do
71464: LD_ADDR_VAR 0 4
71468: PUSH
71469: LD_VAR 0 1
71473: PUSH
71474: FOR_IN
71475: IFFALSE 71658
// begin nat := GetNation ( i ) ;
71477: LD_ADDR_VAR 0 7
71481: PUSH
71482: LD_VAR 0 4
71486: PPUSH
71487: CALL_OW 248
71491: ST_TO_ADDR
// weapon := 0 ;
71492: LD_ADDR_VAR 0 8
71496: PUSH
71497: LD_INT 0
71499: ST_TO_ADDR
// if not nat then
71500: LD_VAR 0 7
71504: NOT
71505: IFFALSE 71509
// continue ;
71507: GO 71474
// for j in list [ nat ] do
71509: LD_ADDR_VAR 0 5
71513: PUSH
71514: LD_VAR 0 10
71518: PUSH
71519: LD_VAR 0 7
71523: ARRAY
71524: PUSH
71525: FOR_IN
71526: IFFALSE 71567
// if GetBWeapon ( i ) = j [ 1 ] then
71528: LD_VAR 0 4
71532: PPUSH
71533: CALL_OW 269
71537: PUSH
71538: LD_VAR 0 5
71542: PUSH
71543: LD_INT 1
71545: ARRAY
71546: EQUAL
71547: IFFALSE 71565
// begin weapon := j [ 2 ] ;
71549: LD_ADDR_VAR 0 8
71553: PUSH
71554: LD_VAR 0 5
71558: PUSH
71559: LD_INT 2
71561: ARRAY
71562: ST_TO_ADDR
// break ;
71563: GO 71567
// end ;
71565: GO 71525
71567: POP
71568: POP
// if not weapon then
71569: LD_VAR 0 8
71573: NOT
71574: IFFALSE 71578
// continue ;
71576: GO 71474
// for k in factories do
71578: LD_ADDR_VAR 0 6
71582: PUSH
71583: LD_VAR 0 2
71587: PUSH
71588: FOR_IN
71589: IFFALSE 71654
// begin weapons := AvailableWeaponList ( k ) ;
71591: LD_ADDR_VAR 0 9
71595: PUSH
71596: LD_VAR 0 6
71600: PPUSH
71601: CALL_OW 478
71605: ST_TO_ADDR
// if not weapons then
71606: LD_VAR 0 9
71610: NOT
71611: IFFALSE 71615
// continue ;
71613: GO 71588
// if weapon in weapons then
71615: LD_VAR 0 8
71619: PUSH
71620: LD_VAR 0 9
71624: IN
71625: IFFALSE 71652
// begin result := [ i , weapon ] ;
71627: LD_ADDR_VAR 0 3
71631: PUSH
71632: LD_VAR 0 4
71636: PUSH
71637: LD_VAR 0 8
71641: PUSH
71642: EMPTY
71643: LIST
71644: LIST
71645: ST_TO_ADDR
// exit ;
71646: POP
71647: POP
71648: POP
71649: POP
71650: GO 71660
// end ; end ;
71652: GO 71588
71654: POP
71655: POP
// end ;
71656: GO 71474
71658: POP
71659: POP
// end ;
71660: LD_VAR 0 3
71664: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71665: LD_INT 0
71667: PPUSH
// if not side or side > 8 then
71668: LD_VAR 0 3
71672: NOT
71673: PUSH
71674: LD_VAR 0 3
71678: PUSH
71679: LD_INT 8
71681: GREATER
71682: OR
71683: IFFALSE 71687
// exit ;
71685: GO 71746
// if not range then
71687: LD_VAR 0 4
71691: NOT
71692: IFFALSE 71703
// range := - 12 ;
71694: LD_ADDR_VAR 0 4
71698: PUSH
71699: LD_INT 12
71701: NEG
71702: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71703: LD_VAR 0 1
71707: PPUSH
71708: LD_VAR 0 2
71712: PPUSH
71713: LD_VAR 0 3
71717: PPUSH
71718: LD_VAR 0 4
71722: PPUSH
71723: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71727: LD_VAR 0 1
71731: PPUSH
71732: LD_VAR 0 2
71736: PPUSH
71737: LD_VAR 0 3
71741: PPUSH
71742: CALL_OW 331
// end ;
71746: LD_VAR 0 5
71750: RET
// export function Video ( mode ) ; begin
71751: LD_INT 0
71753: PPUSH
// ingame_video = mode ;
71754: LD_ADDR_OWVAR 52
71758: PUSH
71759: LD_VAR 0 1
71763: ST_TO_ADDR
// interface_hidden = mode ;
71764: LD_ADDR_OWVAR 54
71768: PUSH
71769: LD_VAR 0 1
71773: ST_TO_ADDR
// end ;
71774: LD_VAR 0 2
71778: RET
// export function Join ( array , element ) ; begin
71779: LD_INT 0
71781: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71782: LD_ADDR_VAR 0 3
71786: PUSH
71787: LD_VAR 0 1
71791: PPUSH
71792: LD_VAR 0 1
71796: PUSH
71797: LD_INT 1
71799: PLUS
71800: PPUSH
71801: LD_VAR 0 2
71805: PPUSH
71806: CALL_OW 1
71810: ST_TO_ADDR
// end ;
71811: LD_VAR 0 3
71815: RET
// export function JoinUnion ( array , element ) ; begin
71816: LD_INT 0
71818: PPUSH
// result := array union element ;
71819: LD_ADDR_VAR 0 3
71823: PUSH
71824: LD_VAR 0 1
71828: PUSH
71829: LD_VAR 0 2
71833: UNION
71834: ST_TO_ADDR
// end ;
71835: LD_VAR 0 3
71839: RET
// export function GetBehemoths ( side ) ; begin
71840: LD_INT 0
71842: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
71843: LD_ADDR_VAR 0 2
71847: PUSH
71848: LD_INT 22
71850: PUSH
71851: LD_VAR 0 1
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: PUSH
71860: LD_INT 31
71862: PUSH
71863: LD_INT 25
71865: PUSH
71866: EMPTY
71867: LIST
71868: LIST
71869: PUSH
71870: EMPTY
71871: LIST
71872: LIST
71873: PPUSH
71874: CALL_OW 69
71878: ST_TO_ADDR
// end ;
71879: LD_VAR 0 2
71883: RET
// export function Shuffle ( array ) ; var i , index ; begin
71884: LD_INT 0
71886: PPUSH
71887: PPUSH
71888: PPUSH
// result := [ ] ;
71889: LD_ADDR_VAR 0 2
71893: PUSH
71894: EMPTY
71895: ST_TO_ADDR
// if not array then
71896: LD_VAR 0 1
71900: NOT
71901: IFFALSE 71905
// exit ;
71903: GO 72004
// Randomize ;
71905: CALL_OW 10
// for i = array downto 1 do
71909: LD_ADDR_VAR 0 3
71913: PUSH
71914: DOUBLE
71915: LD_VAR 0 1
71919: INC
71920: ST_TO_ADDR
71921: LD_INT 1
71923: PUSH
71924: FOR_DOWNTO
71925: IFFALSE 72002
// begin index := rand ( 1 , array ) ;
71927: LD_ADDR_VAR 0 4
71931: PUSH
71932: LD_INT 1
71934: PPUSH
71935: LD_VAR 0 1
71939: PPUSH
71940: CALL_OW 12
71944: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71945: LD_ADDR_VAR 0 2
71949: PUSH
71950: LD_VAR 0 2
71954: PPUSH
71955: LD_VAR 0 2
71959: PUSH
71960: LD_INT 1
71962: PLUS
71963: PPUSH
71964: LD_VAR 0 1
71968: PUSH
71969: LD_VAR 0 4
71973: ARRAY
71974: PPUSH
71975: CALL_OW 2
71979: ST_TO_ADDR
// array := Delete ( array , index ) ;
71980: LD_ADDR_VAR 0 1
71984: PUSH
71985: LD_VAR 0 1
71989: PPUSH
71990: LD_VAR 0 4
71994: PPUSH
71995: CALL_OW 3
71999: ST_TO_ADDR
// end ;
72000: GO 71924
72002: POP
72003: POP
// end ;
72004: LD_VAR 0 2
72008: RET
// export function GetBaseMaterials ( base ) ; begin
72009: LD_INT 0
72011: PPUSH
// result := [ 0 , 0 , 0 ] ;
72012: LD_ADDR_VAR 0 2
72016: PUSH
72017: LD_INT 0
72019: PUSH
72020: LD_INT 0
72022: PUSH
72023: LD_INT 0
72025: PUSH
72026: EMPTY
72027: LIST
72028: LIST
72029: LIST
72030: ST_TO_ADDR
// if not base then
72031: LD_VAR 0 1
72035: NOT
72036: IFFALSE 72040
// exit ;
72038: GO 72089
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72040: LD_ADDR_VAR 0 2
72044: PUSH
72045: LD_VAR 0 1
72049: PPUSH
72050: LD_INT 1
72052: PPUSH
72053: CALL_OW 275
72057: PUSH
72058: LD_VAR 0 1
72062: PPUSH
72063: LD_INT 2
72065: PPUSH
72066: CALL_OW 275
72070: PUSH
72071: LD_VAR 0 1
72075: PPUSH
72076: LD_INT 3
72078: PPUSH
72079: CALL_OW 275
72083: PUSH
72084: EMPTY
72085: LIST
72086: LIST
72087: LIST
72088: ST_TO_ADDR
// end ;
72089: LD_VAR 0 2
72093: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72094: LD_INT 0
72096: PPUSH
72097: PPUSH
// result := array ;
72098: LD_ADDR_VAR 0 3
72102: PUSH
72103: LD_VAR 0 1
72107: ST_TO_ADDR
// if size >= result then
72108: LD_VAR 0 2
72112: PUSH
72113: LD_VAR 0 3
72117: GREATEREQUAL
72118: IFFALSE 72122
// exit ;
72120: GO 72172
// if size then
72122: LD_VAR 0 2
72126: IFFALSE 72172
// for i := array downto size do
72128: LD_ADDR_VAR 0 4
72132: PUSH
72133: DOUBLE
72134: LD_VAR 0 1
72138: INC
72139: ST_TO_ADDR
72140: LD_VAR 0 2
72144: PUSH
72145: FOR_DOWNTO
72146: IFFALSE 72170
// result := Delete ( result , result ) ;
72148: LD_ADDR_VAR 0 3
72152: PUSH
72153: LD_VAR 0 3
72157: PPUSH
72158: LD_VAR 0 3
72162: PPUSH
72163: CALL_OW 3
72167: ST_TO_ADDR
72168: GO 72145
72170: POP
72171: POP
// end ;
72172: LD_VAR 0 3
72176: RET
// export function ComExit ( unit ) ; var tmp ; begin
72177: LD_INT 0
72179: PPUSH
72180: PPUSH
// if not IsInUnit ( unit ) then
72181: LD_VAR 0 1
72185: PPUSH
72186: CALL_OW 310
72190: NOT
72191: IFFALSE 72195
// exit ;
72193: GO 72255
// tmp := IsInUnit ( unit ) ;
72195: LD_ADDR_VAR 0 3
72199: PUSH
72200: LD_VAR 0 1
72204: PPUSH
72205: CALL_OW 310
72209: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72210: LD_VAR 0 3
72214: PPUSH
72215: CALL_OW 247
72219: PUSH
72220: LD_INT 2
72222: EQUAL
72223: IFFALSE 72236
// ComExitVehicle ( unit ) else
72225: LD_VAR 0 1
72229: PPUSH
72230: CALL_OW 121
72234: GO 72245
// ComExitBuilding ( unit ) ;
72236: LD_VAR 0 1
72240: PPUSH
72241: CALL_OW 122
// result := tmp ;
72245: LD_ADDR_VAR 0 2
72249: PUSH
72250: LD_VAR 0 3
72254: ST_TO_ADDR
// end ;
72255: LD_VAR 0 2
72259: RET
// export function ComExitAll ( units ) ; var i ; begin
72260: LD_INT 0
72262: PPUSH
72263: PPUSH
// if not units then
72264: LD_VAR 0 1
72268: NOT
72269: IFFALSE 72273
// exit ;
72271: GO 72299
// for i in units do
72273: LD_ADDR_VAR 0 3
72277: PUSH
72278: LD_VAR 0 1
72282: PUSH
72283: FOR_IN
72284: IFFALSE 72297
// ComExit ( i ) ;
72286: LD_VAR 0 3
72290: PPUSH
72291: CALL 72177 0 1
72295: GO 72283
72297: POP
72298: POP
// end ;
72299: LD_VAR 0 2
72303: RET
// export function ResetHc ; begin
72304: LD_INT 0
72306: PPUSH
// InitHc ;
72307: CALL_OW 19
// hc_importance := 0 ;
72311: LD_ADDR_OWVAR 32
72315: PUSH
72316: LD_INT 0
72318: ST_TO_ADDR
// end ;
72319: LD_VAR 0 1
72323: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72324: LD_INT 0
72326: PPUSH
72327: PPUSH
72328: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72329: LD_ADDR_VAR 0 6
72333: PUSH
72334: LD_VAR 0 1
72338: PUSH
72339: LD_VAR 0 3
72343: PLUS
72344: PUSH
72345: LD_INT 2
72347: DIV
72348: ST_TO_ADDR
// if _x < 0 then
72349: LD_VAR 0 6
72353: PUSH
72354: LD_INT 0
72356: LESS
72357: IFFALSE 72374
// _x := _x * - 1 ;
72359: LD_ADDR_VAR 0 6
72363: PUSH
72364: LD_VAR 0 6
72368: PUSH
72369: LD_INT 1
72371: NEG
72372: MUL
72373: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72374: LD_ADDR_VAR 0 7
72378: PUSH
72379: LD_VAR 0 2
72383: PUSH
72384: LD_VAR 0 4
72388: PLUS
72389: PUSH
72390: LD_INT 2
72392: DIV
72393: ST_TO_ADDR
// if _y < 0 then
72394: LD_VAR 0 7
72398: PUSH
72399: LD_INT 0
72401: LESS
72402: IFFALSE 72419
// _y := _y * - 1 ;
72404: LD_ADDR_VAR 0 7
72408: PUSH
72409: LD_VAR 0 7
72413: PUSH
72414: LD_INT 1
72416: NEG
72417: MUL
72418: ST_TO_ADDR
// result := [ _x , _y ] ;
72419: LD_ADDR_VAR 0 5
72423: PUSH
72424: LD_VAR 0 6
72428: PUSH
72429: LD_VAR 0 7
72433: PUSH
72434: EMPTY
72435: LIST
72436: LIST
72437: ST_TO_ADDR
// end ;
72438: LD_VAR 0 5
72442: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72443: LD_INT 0
72445: PPUSH
72446: PPUSH
72447: PPUSH
72448: PPUSH
// task := GetTaskList ( unit ) ;
72449: LD_ADDR_VAR 0 7
72453: PUSH
72454: LD_VAR 0 1
72458: PPUSH
72459: CALL_OW 437
72463: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72464: LD_VAR 0 7
72468: NOT
72469: PUSH
72470: LD_VAR 0 1
72474: PPUSH
72475: LD_VAR 0 2
72479: PPUSH
72480: CALL_OW 308
72484: NOT
72485: AND
72486: IFFALSE 72490
// exit ;
72488: GO 72608
// if IsInArea ( unit , area ) then
72490: LD_VAR 0 1
72494: PPUSH
72495: LD_VAR 0 2
72499: PPUSH
72500: CALL_OW 308
72504: IFFALSE 72522
// begin ComMoveToArea ( unit , goAway ) ;
72506: LD_VAR 0 1
72510: PPUSH
72511: LD_VAR 0 3
72515: PPUSH
72516: CALL_OW 113
// exit ;
72520: GO 72608
// end ; if task [ 1 ] [ 1 ] <> M then
72522: LD_VAR 0 7
72526: PUSH
72527: LD_INT 1
72529: ARRAY
72530: PUSH
72531: LD_INT 1
72533: ARRAY
72534: PUSH
72535: LD_STRING M
72537: NONEQUAL
72538: IFFALSE 72542
// exit ;
72540: GO 72608
// x := task [ 1 ] [ 2 ] ;
72542: LD_ADDR_VAR 0 5
72546: PUSH
72547: LD_VAR 0 7
72551: PUSH
72552: LD_INT 1
72554: ARRAY
72555: PUSH
72556: LD_INT 2
72558: ARRAY
72559: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72560: LD_ADDR_VAR 0 6
72564: PUSH
72565: LD_VAR 0 7
72569: PUSH
72570: LD_INT 1
72572: ARRAY
72573: PUSH
72574: LD_INT 3
72576: ARRAY
72577: ST_TO_ADDR
// if InArea ( x , y , area ) then
72578: LD_VAR 0 5
72582: PPUSH
72583: LD_VAR 0 6
72587: PPUSH
72588: LD_VAR 0 2
72592: PPUSH
72593: CALL_OW 309
72597: IFFALSE 72608
// ComStop ( unit ) ;
72599: LD_VAR 0 1
72603: PPUSH
72604: CALL_OW 141
// end ;
72608: LD_VAR 0 4
72612: RET
// export function Abs ( value ) ; begin
72613: LD_INT 0
72615: PPUSH
// result := value ;
72616: LD_ADDR_VAR 0 2
72620: PUSH
72621: LD_VAR 0 1
72625: ST_TO_ADDR
// if value < 0 then
72626: LD_VAR 0 1
72630: PUSH
72631: LD_INT 0
72633: LESS
72634: IFFALSE 72651
// result := value * - 1 ;
72636: LD_ADDR_VAR 0 2
72640: PUSH
72641: LD_VAR 0 1
72645: PUSH
72646: LD_INT 1
72648: NEG
72649: MUL
72650: ST_TO_ADDR
// end ;
72651: LD_VAR 0 2
72655: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72656: LD_INT 0
72658: PPUSH
72659: PPUSH
72660: PPUSH
72661: PPUSH
72662: PPUSH
72663: PPUSH
72664: PPUSH
72665: PPUSH
// if not unit or not building then
72666: LD_VAR 0 1
72670: NOT
72671: PUSH
72672: LD_VAR 0 2
72676: NOT
72677: OR
72678: IFFALSE 72682
// exit ;
72680: GO 72908
// x := GetX ( building ) ;
72682: LD_ADDR_VAR 0 4
72686: PUSH
72687: LD_VAR 0 2
72691: PPUSH
72692: CALL_OW 250
72696: ST_TO_ADDR
// y := GetY ( building ) ;
72697: LD_ADDR_VAR 0 6
72701: PUSH
72702: LD_VAR 0 2
72706: PPUSH
72707: CALL_OW 251
72711: ST_TO_ADDR
// d := GetDir ( building ) ;
72712: LD_ADDR_VAR 0 8
72716: PUSH
72717: LD_VAR 0 2
72721: PPUSH
72722: CALL_OW 254
72726: ST_TO_ADDR
// r := 4 ;
72727: LD_ADDR_VAR 0 9
72731: PUSH
72732: LD_INT 4
72734: ST_TO_ADDR
// for i := 1 to 5 do
72735: LD_ADDR_VAR 0 10
72739: PUSH
72740: DOUBLE
72741: LD_INT 1
72743: DEC
72744: ST_TO_ADDR
72745: LD_INT 5
72747: PUSH
72748: FOR_TO
72749: IFFALSE 72906
// begin _x := ShiftX ( x , d , r + i ) ;
72751: LD_ADDR_VAR 0 5
72755: PUSH
72756: LD_VAR 0 4
72760: PPUSH
72761: LD_VAR 0 8
72765: PPUSH
72766: LD_VAR 0 9
72770: PUSH
72771: LD_VAR 0 10
72775: PLUS
72776: PPUSH
72777: CALL_OW 272
72781: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72782: LD_ADDR_VAR 0 7
72786: PUSH
72787: LD_VAR 0 6
72791: PPUSH
72792: LD_VAR 0 8
72796: PPUSH
72797: LD_VAR 0 9
72801: PUSH
72802: LD_VAR 0 10
72806: PLUS
72807: PPUSH
72808: CALL_OW 273
72812: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72813: LD_VAR 0 5
72817: PPUSH
72818: LD_VAR 0 7
72822: PPUSH
72823: CALL_OW 488
72827: PUSH
72828: LD_VAR 0 5
72832: PPUSH
72833: LD_VAR 0 7
72837: PPUSH
72838: CALL_OW 428
72842: PPUSH
72843: CALL_OW 247
72847: PUSH
72848: LD_INT 3
72850: PUSH
72851: LD_INT 2
72853: PUSH
72854: EMPTY
72855: LIST
72856: LIST
72857: IN
72858: NOT
72859: AND
72860: IFFALSE 72904
// begin ComMoveXY ( unit , _x , _y ) ;
72862: LD_VAR 0 1
72866: PPUSH
72867: LD_VAR 0 5
72871: PPUSH
72872: LD_VAR 0 7
72876: PPUSH
72877: CALL_OW 111
// result := [ _x , _y ] ;
72881: LD_ADDR_VAR 0 3
72885: PUSH
72886: LD_VAR 0 5
72890: PUSH
72891: LD_VAR 0 7
72895: PUSH
72896: EMPTY
72897: LIST
72898: LIST
72899: ST_TO_ADDR
// exit ;
72900: POP
72901: POP
72902: GO 72908
// end ; end ;
72904: GO 72748
72906: POP
72907: POP
// end ;
72908: LD_VAR 0 3
72912: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72913: LD_INT 0
72915: PPUSH
72916: PPUSH
72917: PPUSH
// result := 0 ;
72918: LD_ADDR_VAR 0 3
72922: PUSH
72923: LD_INT 0
72925: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72926: LD_VAR 0 1
72930: PUSH
72931: LD_INT 0
72933: LESS
72934: PUSH
72935: LD_VAR 0 1
72939: PUSH
72940: LD_INT 8
72942: GREATER
72943: OR
72944: PUSH
72945: LD_VAR 0 2
72949: PUSH
72950: LD_INT 0
72952: LESS
72953: OR
72954: PUSH
72955: LD_VAR 0 2
72959: PUSH
72960: LD_INT 8
72962: GREATER
72963: OR
72964: IFFALSE 72968
// exit ;
72966: GO 73043
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72968: LD_ADDR_VAR 0 4
72972: PUSH
72973: LD_INT 22
72975: PUSH
72976: LD_VAR 0 2
72980: PUSH
72981: EMPTY
72982: LIST
72983: LIST
72984: PPUSH
72985: CALL_OW 69
72989: PUSH
72990: FOR_IN
72991: IFFALSE 73041
// begin un := UnitShoot ( i ) ;
72993: LD_ADDR_VAR 0 5
72997: PUSH
72998: LD_VAR 0 4
73002: PPUSH
73003: CALL_OW 504
73007: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73008: LD_VAR 0 5
73012: PPUSH
73013: CALL_OW 255
73017: PUSH
73018: LD_VAR 0 1
73022: EQUAL
73023: IFFALSE 73039
// begin result := un ;
73025: LD_ADDR_VAR 0 3
73029: PUSH
73030: LD_VAR 0 5
73034: ST_TO_ADDR
// exit ;
73035: POP
73036: POP
73037: GO 73043
// end ; end ;
73039: GO 72990
73041: POP
73042: POP
// end ;
73043: LD_VAR 0 3
73047: RET
// export function GetCargoBay ( units ) ; begin
73048: LD_INT 0
73050: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73051: LD_ADDR_VAR 0 2
73055: PUSH
73056: LD_VAR 0 1
73060: PPUSH
73061: LD_INT 2
73063: PUSH
73064: LD_INT 34
73066: PUSH
73067: LD_INT 12
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: PUSH
73074: LD_INT 34
73076: PUSH
73077: LD_INT 51
73079: PUSH
73080: EMPTY
73081: LIST
73082: LIST
73083: PUSH
73084: LD_INT 34
73086: PUSH
73087: LD_INT 32
73089: PUSH
73090: EMPTY
73091: LIST
73092: LIST
73093: PUSH
73094: LD_INT 34
73096: PUSH
73097: LD_INT 89
73099: PUSH
73100: EMPTY
73101: LIST
73102: LIST
73103: PUSH
73104: EMPTY
73105: LIST
73106: LIST
73107: LIST
73108: LIST
73109: LIST
73110: PPUSH
73111: CALL_OW 72
73115: ST_TO_ADDR
// end ;
73116: LD_VAR 0 2
73120: RET
// export function Negate ( value ) ; begin
73121: LD_INT 0
73123: PPUSH
// result := not value ;
73124: LD_ADDR_VAR 0 2
73128: PUSH
73129: LD_VAR 0 1
73133: NOT
73134: ST_TO_ADDR
// end ;
73135: LD_VAR 0 2
73139: RET
// export function Inc ( value ) ; begin
73140: LD_INT 0
73142: PPUSH
// result := value + 1 ;
73143: LD_ADDR_VAR 0 2
73147: PUSH
73148: LD_VAR 0 1
73152: PUSH
73153: LD_INT 1
73155: PLUS
73156: ST_TO_ADDR
// end ;
73157: LD_VAR 0 2
73161: RET
// export function Dec ( value ) ; begin
73162: LD_INT 0
73164: PPUSH
// result := value - 1 ;
73165: LD_ADDR_VAR 0 2
73169: PUSH
73170: LD_VAR 0 1
73174: PUSH
73175: LD_INT 1
73177: MINUS
73178: ST_TO_ADDR
// end ;
73179: LD_VAR 0 2
73183: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73184: LD_INT 0
73186: PPUSH
73187: PPUSH
73188: PPUSH
73189: PPUSH
73190: PPUSH
73191: PPUSH
73192: PPUSH
73193: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73194: LD_VAR 0 1
73198: PPUSH
73199: LD_VAR 0 2
73203: PPUSH
73204: CALL_OW 488
73208: NOT
73209: PUSH
73210: LD_VAR 0 3
73214: PPUSH
73215: LD_VAR 0 4
73219: PPUSH
73220: CALL_OW 488
73224: NOT
73225: OR
73226: IFFALSE 73239
// begin result := - 1 ;
73228: LD_ADDR_VAR 0 5
73232: PUSH
73233: LD_INT 1
73235: NEG
73236: ST_TO_ADDR
// exit ;
73237: GO 73474
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73239: LD_ADDR_VAR 0 12
73243: PUSH
73244: LD_VAR 0 1
73248: PPUSH
73249: LD_VAR 0 2
73253: PPUSH
73254: LD_VAR 0 3
73258: PPUSH
73259: LD_VAR 0 4
73263: PPUSH
73264: CALL 72324 0 4
73268: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73269: LD_ADDR_VAR 0 11
73273: PUSH
73274: LD_VAR 0 1
73278: PPUSH
73279: LD_VAR 0 2
73283: PPUSH
73284: LD_VAR 0 12
73288: PUSH
73289: LD_INT 1
73291: ARRAY
73292: PPUSH
73293: LD_VAR 0 12
73297: PUSH
73298: LD_INT 2
73300: ARRAY
73301: PPUSH
73302: CALL_OW 298
73306: ST_TO_ADDR
// distance := 9999 ;
73307: LD_ADDR_VAR 0 10
73311: PUSH
73312: LD_INT 9999
73314: ST_TO_ADDR
// for i := 0 to 5 do
73315: LD_ADDR_VAR 0 6
73319: PUSH
73320: DOUBLE
73321: LD_INT 0
73323: DEC
73324: ST_TO_ADDR
73325: LD_INT 5
73327: PUSH
73328: FOR_TO
73329: IFFALSE 73472
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73331: LD_ADDR_VAR 0 7
73335: PUSH
73336: LD_VAR 0 1
73340: PPUSH
73341: LD_VAR 0 6
73345: PPUSH
73346: LD_VAR 0 11
73350: PPUSH
73351: CALL_OW 272
73355: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73356: LD_ADDR_VAR 0 8
73360: PUSH
73361: LD_VAR 0 2
73365: PPUSH
73366: LD_VAR 0 6
73370: PPUSH
73371: LD_VAR 0 11
73375: PPUSH
73376: CALL_OW 273
73380: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73381: LD_VAR 0 7
73385: PPUSH
73386: LD_VAR 0 8
73390: PPUSH
73391: CALL_OW 488
73395: NOT
73396: IFFALSE 73400
// continue ;
73398: GO 73328
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73400: LD_ADDR_VAR 0 9
73404: PUSH
73405: LD_VAR 0 12
73409: PUSH
73410: LD_INT 1
73412: ARRAY
73413: PPUSH
73414: LD_VAR 0 12
73418: PUSH
73419: LD_INT 2
73421: ARRAY
73422: PPUSH
73423: LD_VAR 0 7
73427: PPUSH
73428: LD_VAR 0 8
73432: PPUSH
73433: CALL_OW 298
73437: ST_TO_ADDR
// if tmp < distance then
73438: LD_VAR 0 9
73442: PUSH
73443: LD_VAR 0 10
73447: LESS
73448: IFFALSE 73470
// begin result := i ;
73450: LD_ADDR_VAR 0 5
73454: PUSH
73455: LD_VAR 0 6
73459: ST_TO_ADDR
// distance := tmp ;
73460: LD_ADDR_VAR 0 10
73464: PUSH
73465: LD_VAR 0 9
73469: ST_TO_ADDR
// end ; end ;
73470: GO 73328
73472: POP
73473: POP
// end ;
73474: LD_VAR 0 5
73478: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73479: LD_INT 0
73481: PPUSH
73482: PPUSH
// if not driver or not IsInUnit ( driver ) then
73483: LD_VAR 0 1
73487: NOT
73488: PUSH
73489: LD_VAR 0 1
73493: PPUSH
73494: CALL_OW 310
73498: NOT
73499: OR
73500: IFFALSE 73504
// exit ;
73502: GO 73594
// vehicle := IsInUnit ( driver ) ;
73504: LD_ADDR_VAR 0 3
73508: PUSH
73509: LD_VAR 0 1
73513: PPUSH
73514: CALL_OW 310
73518: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73519: LD_VAR 0 1
73523: PPUSH
73524: LD_STRING \
73526: PUSH
73527: LD_INT 0
73529: PUSH
73530: LD_INT 0
73532: PUSH
73533: LD_INT 0
73535: PUSH
73536: LD_INT 0
73538: PUSH
73539: LD_INT 0
73541: PUSH
73542: LD_INT 0
73544: PUSH
73545: EMPTY
73546: LIST
73547: LIST
73548: LIST
73549: LIST
73550: LIST
73551: LIST
73552: LIST
73553: PUSH
73554: LD_STRING E
73556: PUSH
73557: LD_INT 0
73559: PUSH
73560: LD_INT 0
73562: PUSH
73563: LD_VAR 0 3
73567: PUSH
73568: LD_INT 0
73570: PUSH
73571: LD_INT 0
73573: PUSH
73574: LD_INT 0
73576: PUSH
73577: EMPTY
73578: LIST
73579: LIST
73580: LIST
73581: LIST
73582: LIST
73583: LIST
73584: LIST
73585: PUSH
73586: EMPTY
73587: LIST
73588: LIST
73589: PPUSH
73590: CALL_OW 446
// end ;
73594: LD_VAR 0 2
73598: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73599: LD_INT 0
73601: PPUSH
73602: PPUSH
// if not driver or not IsInUnit ( driver ) then
73603: LD_VAR 0 1
73607: NOT
73608: PUSH
73609: LD_VAR 0 1
73613: PPUSH
73614: CALL_OW 310
73618: NOT
73619: OR
73620: IFFALSE 73624
// exit ;
73622: GO 73714
// vehicle := IsInUnit ( driver ) ;
73624: LD_ADDR_VAR 0 3
73628: PUSH
73629: LD_VAR 0 1
73633: PPUSH
73634: CALL_OW 310
73638: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73639: LD_VAR 0 1
73643: PPUSH
73644: LD_STRING \
73646: PUSH
73647: LD_INT 0
73649: PUSH
73650: LD_INT 0
73652: PUSH
73653: LD_INT 0
73655: PUSH
73656: LD_INT 0
73658: PUSH
73659: LD_INT 0
73661: PUSH
73662: LD_INT 0
73664: PUSH
73665: EMPTY
73666: LIST
73667: LIST
73668: LIST
73669: LIST
73670: LIST
73671: LIST
73672: LIST
73673: PUSH
73674: LD_STRING E
73676: PUSH
73677: LD_INT 0
73679: PUSH
73680: LD_INT 0
73682: PUSH
73683: LD_VAR 0 3
73687: PUSH
73688: LD_INT 0
73690: PUSH
73691: LD_INT 0
73693: PUSH
73694: LD_INT 0
73696: PUSH
73697: EMPTY
73698: LIST
73699: LIST
73700: LIST
73701: LIST
73702: LIST
73703: LIST
73704: LIST
73705: PUSH
73706: EMPTY
73707: LIST
73708: LIST
73709: PPUSH
73710: CALL_OW 447
// end ;
73714: LD_VAR 0 2
73718: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73719: LD_INT 0
73721: PPUSH
73722: PPUSH
73723: PPUSH
// tmp := [ ] ;
73724: LD_ADDR_VAR 0 5
73728: PUSH
73729: EMPTY
73730: ST_TO_ADDR
// for i in units do
73731: LD_ADDR_VAR 0 4
73735: PUSH
73736: LD_VAR 0 1
73740: PUSH
73741: FOR_IN
73742: IFFALSE 73780
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73744: LD_ADDR_VAR 0 5
73748: PUSH
73749: LD_VAR 0 5
73753: PPUSH
73754: LD_VAR 0 5
73758: PUSH
73759: LD_INT 1
73761: PLUS
73762: PPUSH
73763: LD_VAR 0 4
73767: PPUSH
73768: CALL_OW 256
73772: PPUSH
73773: CALL_OW 2
73777: ST_TO_ADDR
73778: GO 73741
73780: POP
73781: POP
// if not tmp then
73782: LD_VAR 0 5
73786: NOT
73787: IFFALSE 73791
// exit ;
73789: GO 73839
// if asc then
73791: LD_VAR 0 2
73795: IFFALSE 73819
// result := SortListByListAsc ( units , tmp ) else
73797: LD_ADDR_VAR 0 3
73801: PUSH
73802: LD_VAR 0 1
73806: PPUSH
73807: LD_VAR 0 5
73811: PPUSH
73812: CALL_OW 76
73816: ST_TO_ADDR
73817: GO 73839
// result := SortListByListDesc ( units , tmp ) ;
73819: LD_ADDR_VAR 0 3
73823: PUSH
73824: LD_VAR 0 1
73828: PPUSH
73829: LD_VAR 0 5
73833: PPUSH
73834: CALL_OW 77
73838: ST_TO_ADDR
// end ;
73839: LD_VAR 0 3
73843: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73844: LD_INT 0
73846: PPUSH
73847: PPUSH
// task := GetTaskList ( mech ) ;
73848: LD_ADDR_VAR 0 4
73852: PUSH
73853: LD_VAR 0 1
73857: PPUSH
73858: CALL_OW 437
73862: ST_TO_ADDR
// if not task then
73863: LD_VAR 0 4
73867: NOT
73868: IFFALSE 73872
// exit ;
73870: GO 73914
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73872: LD_ADDR_VAR 0 3
73876: PUSH
73877: LD_VAR 0 4
73881: PUSH
73882: LD_INT 1
73884: ARRAY
73885: PUSH
73886: LD_INT 1
73888: ARRAY
73889: PUSH
73890: LD_STRING r
73892: EQUAL
73893: PUSH
73894: LD_VAR 0 4
73898: PUSH
73899: LD_INT 1
73901: ARRAY
73902: PUSH
73903: LD_INT 4
73905: ARRAY
73906: PUSH
73907: LD_VAR 0 2
73911: EQUAL
73912: AND
73913: ST_TO_ADDR
// end ;
73914: LD_VAR 0 3
73918: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73919: LD_INT 0
73921: PPUSH
// SetDir ( unit , d ) ;
73922: LD_VAR 0 1
73926: PPUSH
73927: LD_VAR 0 4
73931: PPUSH
73932: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
73936: LD_ADDR_VAR 0 6
73940: PUSH
73941: LD_VAR 0 1
73945: PPUSH
73946: LD_VAR 0 2
73950: PPUSH
73951: LD_VAR 0 3
73955: PPUSH
73956: LD_VAR 0 5
73960: PPUSH
73961: CALL_OW 48
73965: ST_TO_ADDR
// end ;
73966: LD_VAR 0 6
73970: RET
// export function ToNaturalNumber ( number ) ; begin
73971: LD_INT 0
73973: PPUSH
// result := number div 1 ;
73974: LD_ADDR_VAR 0 2
73978: PUSH
73979: LD_VAR 0 1
73983: PUSH
73984: LD_INT 1
73986: DIV
73987: ST_TO_ADDR
// if number < 0 then
73988: LD_VAR 0 1
73992: PUSH
73993: LD_INT 0
73995: LESS
73996: IFFALSE 74006
// result := 0 ;
73998: LD_ADDR_VAR 0 2
74002: PUSH
74003: LD_INT 0
74005: ST_TO_ADDR
// end ;
74006: LD_VAR 0 2
74010: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
74011: LD_INT 0
74013: PPUSH
74014: PPUSH
74015: PPUSH
// if not buildings then
74016: LD_VAR 0 1
74020: NOT
74021: IFFALSE 74025
// exit ;
74023: GO 74140
// tmp := [ ] ;
74025: LD_ADDR_VAR 0 5
74029: PUSH
74030: EMPTY
74031: ST_TO_ADDR
// for b in buildings do
74032: LD_ADDR_VAR 0 4
74036: PUSH
74037: LD_VAR 0 1
74041: PUSH
74042: FOR_IN
74043: IFFALSE 74081
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
74045: LD_ADDR_VAR 0 5
74049: PUSH
74050: LD_VAR 0 5
74054: PPUSH
74055: LD_VAR 0 5
74059: PUSH
74060: LD_INT 1
74062: PLUS
74063: PPUSH
74064: LD_VAR 0 4
74068: PPUSH
74069: CALL_OW 266
74073: PPUSH
74074: CALL_OW 1
74078: ST_TO_ADDR
74079: GO 74042
74081: POP
74082: POP
// if not tmp then
74083: LD_VAR 0 5
74087: NOT
74088: IFFALSE 74092
// exit ;
74090: GO 74140
// if asc then
74092: LD_VAR 0 2
74096: IFFALSE 74120
// result := SortListByListAsc ( buildings , tmp ) else
74098: LD_ADDR_VAR 0 3
74102: PUSH
74103: LD_VAR 0 1
74107: PPUSH
74108: LD_VAR 0 5
74112: PPUSH
74113: CALL_OW 76
74117: ST_TO_ADDR
74118: GO 74140
// result := SortListByListDesc ( buildings , tmp ) ;
74120: LD_ADDR_VAR 0 3
74124: PUSH
74125: LD_VAR 0 1
74129: PPUSH
74130: LD_VAR 0 5
74134: PPUSH
74135: CALL_OW 77
74139: ST_TO_ADDR
// end ;
74140: LD_VAR 0 3
74144: RET
// export function SortByClass ( units , class ) ; var un ; begin
74145: LD_INT 0
74147: PPUSH
74148: PPUSH
// if not units or not class then
74149: LD_VAR 0 1
74153: NOT
74154: PUSH
74155: LD_VAR 0 2
74159: NOT
74160: OR
74161: IFFALSE 74165
// exit ;
74163: GO 74260
// result := [ ] ;
74165: LD_ADDR_VAR 0 3
74169: PUSH
74170: EMPTY
74171: ST_TO_ADDR
// for un in units do
74172: LD_ADDR_VAR 0 4
74176: PUSH
74177: LD_VAR 0 1
74181: PUSH
74182: FOR_IN
74183: IFFALSE 74258
// if GetClass ( un ) = class then
74185: LD_VAR 0 4
74189: PPUSH
74190: CALL_OW 257
74194: PUSH
74195: LD_VAR 0 2
74199: EQUAL
74200: IFFALSE 74227
// result := Insert ( result , 1 , un ) else
74202: LD_ADDR_VAR 0 3
74206: PUSH
74207: LD_VAR 0 3
74211: PPUSH
74212: LD_INT 1
74214: PPUSH
74215: LD_VAR 0 4
74219: PPUSH
74220: CALL_OW 2
74224: ST_TO_ADDR
74225: GO 74256
// result := Replace ( result , result + 1 , un ) ;
74227: LD_ADDR_VAR 0 3
74231: PUSH
74232: LD_VAR 0 3
74236: PPUSH
74237: LD_VAR 0 3
74241: PUSH
74242: LD_INT 1
74244: PLUS
74245: PPUSH
74246: LD_VAR 0 4
74250: PPUSH
74251: CALL_OW 1
74255: ST_TO_ADDR
74256: GO 74182
74258: POP
74259: POP
// end ;
74260: LD_VAR 0 3
74264: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74265: LD_INT 0
74267: PPUSH
74268: PPUSH
74269: PPUSH
74270: PPUSH
74271: PPUSH
74272: PPUSH
74273: PPUSH
// result := [ ] ;
74274: LD_ADDR_VAR 0 4
74278: PUSH
74279: EMPTY
74280: ST_TO_ADDR
// if x - r < 0 then
74281: LD_VAR 0 1
74285: PUSH
74286: LD_VAR 0 3
74290: MINUS
74291: PUSH
74292: LD_INT 0
74294: LESS
74295: IFFALSE 74307
// min_x := 0 else
74297: LD_ADDR_VAR 0 8
74301: PUSH
74302: LD_INT 0
74304: ST_TO_ADDR
74305: GO 74323
// min_x := x - r ;
74307: LD_ADDR_VAR 0 8
74311: PUSH
74312: LD_VAR 0 1
74316: PUSH
74317: LD_VAR 0 3
74321: MINUS
74322: ST_TO_ADDR
// if y - r < 0 then
74323: LD_VAR 0 2
74327: PUSH
74328: LD_VAR 0 3
74332: MINUS
74333: PUSH
74334: LD_INT 0
74336: LESS
74337: IFFALSE 74349
// min_y := 0 else
74339: LD_ADDR_VAR 0 7
74343: PUSH
74344: LD_INT 0
74346: ST_TO_ADDR
74347: GO 74365
// min_y := y - r ;
74349: LD_ADDR_VAR 0 7
74353: PUSH
74354: LD_VAR 0 2
74358: PUSH
74359: LD_VAR 0 3
74363: MINUS
74364: ST_TO_ADDR
// max_x := x + r ;
74365: LD_ADDR_VAR 0 9
74369: PUSH
74370: LD_VAR 0 1
74374: PUSH
74375: LD_VAR 0 3
74379: PLUS
74380: ST_TO_ADDR
// max_y := y + r ;
74381: LD_ADDR_VAR 0 10
74385: PUSH
74386: LD_VAR 0 2
74390: PUSH
74391: LD_VAR 0 3
74395: PLUS
74396: ST_TO_ADDR
// for _x = min_x to max_x do
74397: LD_ADDR_VAR 0 5
74401: PUSH
74402: DOUBLE
74403: LD_VAR 0 8
74407: DEC
74408: ST_TO_ADDR
74409: LD_VAR 0 9
74413: PUSH
74414: FOR_TO
74415: IFFALSE 74516
// for _y = min_y to max_y do
74417: LD_ADDR_VAR 0 6
74421: PUSH
74422: DOUBLE
74423: LD_VAR 0 7
74427: DEC
74428: ST_TO_ADDR
74429: LD_VAR 0 10
74433: PUSH
74434: FOR_TO
74435: IFFALSE 74512
// begin if not ValidHex ( _x , _y ) then
74437: LD_VAR 0 5
74441: PPUSH
74442: LD_VAR 0 6
74446: PPUSH
74447: CALL_OW 488
74451: NOT
74452: IFFALSE 74456
// continue ;
74454: GO 74434
// if GetResourceTypeXY ( _x , _y ) then
74456: LD_VAR 0 5
74460: PPUSH
74461: LD_VAR 0 6
74465: PPUSH
74466: CALL_OW 283
74470: IFFALSE 74510
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74472: LD_ADDR_VAR 0 4
74476: PUSH
74477: LD_VAR 0 4
74481: PPUSH
74482: LD_VAR 0 4
74486: PUSH
74487: LD_INT 1
74489: PLUS
74490: PPUSH
74491: LD_VAR 0 5
74495: PUSH
74496: LD_VAR 0 6
74500: PUSH
74501: EMPTY
74502: LIST
74503: LIST
74504: PPUSH
74505: CALL_OW 1
74509: ST_TO_ADDR
// end ;
74510: GO 74434
74512: POP
74513: POP
74514: GO 74414
74516: POP
74517: POP
// end ;
74518: LD_VAR 0 4
74522: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74523: LD_INT 0
74525: PPUSH
74526: PPUSH
74527: PPUSH
74528: PPUSH
74529: PPUSH
74530: PPUSH
74531: PPUSH
74532: PPUSH
// if not units then
74533: LD_VAR 0 1
74537: NOT
74538: IFFALSE 74542
// exit ;
74540: GO 75070
// result := UnitFilter ( units , [ f_ok ] ) ;
74542: LD_ADDR_VAR 0 3
74546: PUSH
74547: LD_VAR 0 1
74551: PPUSH
74552: LD_INT 50
74554: PUSH
74555: EMPTY
74556: LIST
74557: PPUSH
74558: CALL_OW 72
74562: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74563: LD_ADDR_VAR 0 8
74567: PUSH
74568: LD_VAR 0 1
74572: PUSH
74573: LD_INT 1
74575: ARRAY
74576: PPUSH
74577: CALL_OW 255
74581: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74582: LD_ADDR_VAR 0 10
74586: PUSH
74587: LD_INT 29
74589: PUSH
74590: LD_INT 91
74592: PUSH
74593: LD_INT 49
74595: PUSH
74596: EMPTY
74597: LIST
74598: LIST
74599: LIST
74600: ST_TO_ADDR
// if not result then
74601: LD_VAR 0 3
74605: NOT
74606: IFFALSE 74610
// exit ;
74608: GO 75070
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74610: LD_ADDR_VAR 0 5
74614: PUSH
74615: LD_INT 81
74617: PUSH
74618: LD_VAR 0 8
74622: PUSH
74623: EMPTY
74624: LIST
74625: LIST
74626: PPUSH
74627: CALL_OW 69
74631: ST_TO_ADDR
// for i in result do
74632: LD_ADDR_VAR 0 4
74636: PUSH
74637: LD_VAR 0 3
74641: PUSH
74642: FOR_IN
74643: IFFALSE 75068
// begin tag := GetTag ( i ) + 1 ;
74645: LD_ADDR_VAR 0 9
74649: PUSH
74650: LD_VAR 0 4
74654: PPUSH
74655: CALL_OW 110
74659: PUSH
74660: LD_INT 1
74662: PLUS
74663: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
74664: LD_ADDR_VAR 0 7
74668: PUSH
74669: LD_VAR 0 4
74673: PPUSH
74674: CALL_OW 250
74678: PPUSH
74679: LD_VAR 0 4
74683: PPUSH
74684: CALL_OW 251
74688: PPUSH
74689: LD_INT 4
74691: PPUSH
74692: CALL 74265 0 3
74696: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
74697: LD_VAR 0 4
74701: PPUSH
74702: CALL_OW 247
74706: PUSH
74707: LD_INT 2
74709: EQUAL
74710: PUSH
74711: LD_VAR 0 7
74715: PUSH
74716: LD_INT 2
74718: GREATER
74719: AND
74720: PUSH
74721: LD_VAR 0 4
74725: PPUSH
74726: CALL_OW 264
74730: PUSH
74731: LD_VAR 0 10
74735: IN
74736: NOT
74737: AND
74738: IFFALSE 74777
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74740: LD_VAR 0 4
74744: PPUSH
74745: LD_VAR 0 7
74749: PUSH
74750: LD_INT 1
74752: ARRAY
74753: PUSH
74754: LD_INT 1
74756: ARRAY
74757: PPUSH
74758: LD_VAR 0 7
74762: PUSH
74763: LD_INT 1
74765: ARRAY
74766: PUSH
74767: LD_INT 2
74769: ARRAY
74770: PPUSH
74771: CALL_OW 116
74775: GO 75066
// if path > tag then
74777: LD_VAR 0 2
74781: PUSH
74782: LD_VAR 0 9
74786: GREATER
74787: IFFALSE 74995
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
74789: LD_ADDR_VAR 0 6
74793: PUSH
74794: LD_VAR 0 5
74798: PPUSH
74799: LD_INT 91
74801: PUSH
74802: LD_VAR 0 4
74806: PUSH
74807: LD_INT 8
74809: PUSH
74810: EMPTY
74811: LIST
74812: LIST
74813: LIST
74814: PPUSH
74815: CALL_OW 72
74819: ST_TO_ADDR
// if nearEnemy then
74820: LD_VAR 0 6
74824: IFFALSE 74893
// begin if GetWeapon ( i ) = ru_time_lapser then
74826: LD_VAR 0 4
74830: PPUSH
74831: CALL_OW 264
74835: PUSH
74836: LD_INT 49
74838: EQUAL
74839: IFFALSE 74867
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
74841: LD_VAR 0 4
74845: PPUSH
74846: LD_VAR 0 6
74850: PPUSH
74851: LD_VAR 0 4
74855: PPUSH
74856: CALL_OW 74
74860: PPUSH
74861: CALL_OW 112
74865: GO 74891
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
74867: LD_VAR 0 4
74871: PPUSH
74872: LD_VAR 0 6
74876: PPUSH
74877: LD_VAR 0 4
74881: PPUSH
74882: CALL_OW 74
74886: PPUSH
74887: CALL 76141 0 2
// end else
74891: GO 74993
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
74893: LD_VAR 0 4
74897: PPUSH
74898: LD_VAR 0 2
74902: PUSH
74903: LD_VAR 0 9
74907: ARRAY
74908: PUSH
74909: LD_INT 1
74911: ARRAY
74912: PPUSH
74913: LD_VAR 0 2
74917: PUSH
74918: LD_VAR 0 9
74922: ARRAY
74923: PUSH
74924: LD_INT 2
74926: ARRAY
74927: PPUSH
74928: CALL_OW 297
74932: PUSH
74933: LD_INT 6
74935: GREATER
74936: IFFALSE 74979
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
74938: LD_VAR 0 4
74942: PPUSH
74943: LD_VAR 0 2
74947: PUSH
74948: LD_VAR 0 9
74952: ARRAY
74953: PUSH
74954: LD_INT 1
74956: ARRAY
74957: PPUSH
74958: LD_VAR 0 2
74962: PUSH
74963: LD_VAR 0 9
74967: ARRAY
74968: PUSH
74969: LD_INT 2
74971: ARRAY
74972: PPUSH
74973: CALL_OW 114
74977: GO 74993
// SetTag ( i , tag ) ;
74979: LD_VAR 0 4
74983: PPUSH
74984: LD_VAR 0 9
74988: PPUSH
74989: CALL_OW 109
// end else
74993: GO 75066
// if enemy then
74995: LD_VAR 0 5
74999: IFFALSE 75066
// begin if GetWeapon ( i ) = ru_time_lapser then
75001: LD_VAR 0 4
75005: PPUSH
75006: CALL_OW 264
75010: PUSH
75011: LD_INT 49
75013: EQUAL
75014: IFFALSE 75042
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
75016: LD_VAR 0 4
75020: PPUSH
75021: LD_VAR 0 5
75025: PPUSH
75026: LD_VAR 0 4
75030: PPUSH
75031: CALL_OW 74
75035: PPUSH
75036: CALL_OW 112
75040: GO 75066
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75042: LD_VAR 0 4
75046: PPUSH
75047: LD_VAR 0 5
75051: PPUSH
75052: LD_VAR 0 4
75056: PPUSH
75057: CALL_OW 74
75061: PPUSH
75062: CALL 76141 0 2
// end ; end ;
75066: GO 74642
75068: POP
75069: POP
// end ;
75070: LD_VAR 0 3
75074: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75075: LD_INT 0
75077: PPUSH
75078: PPUSH
75079: PPUSH
// if not unit or IsInUnit ( unit ) then
75080: LD_VAR 0 1
75084: NOT
75085: PUSH
75086: LD_VAR 0 1
75090: PPUSH
75091: CALL_OW 310
75095: OR
75096: IFFALSE 75100
// exit ;
75098: GO 75191
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75100: LD_ADDR_VAR 0 4
75104: PUSH
75105: LD_VAR 0 1
75109: PPUSH
75110: CALL_OW 250
75114: PPUSH
75115: LD_VAR 0 2
75119: PPUSH
75120: LD_INT 1
75122: PPUSH
75123: CALL_OW 272
75127: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75128: LD_ADDR_VAR 0 5
75132: PUSH
75133: LD_VAR 0 1
75137: PPUSH
75138: CALL_OW 251
75142: PPUSH
75143: LD_VAR 0 2
75147: PPUSH
75148: LD_INT 1
75150: PPUSH
75151: CALL_OW 273
75155: ST_TO_ADDR
// if ValidHex ( x , y ) then
75156: LD_VAR 0 4
75160: PPUSH
75161: LD_VAR 0 5
75165: PPUSH
75166: CALL_OW 488
75170: IFFALSE 75191
// ComTurnXY ( unit , x , y ) ;
75172: LD_VAR 0 1
75176: PPUSH
75177: LD_VAR 0 4
75181: PPUSH
75182: LD_VAR 0 5
75186: PPUSH
75187: CALL_OW 118
// end ;
75191: LD_VAR 0 3
75195: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75196: LD_INT 0
75198: PPUSH
75199: PPUSH
// result := false ;
75200: LD_ADDR_VAR 0 3
75204: PUSH
75205: LD_INT 0
75207: ST_TO_ADDR
// if not units then
75208: LD_VAR 0 2
75212: NOT
75213: IFFALSE 75217
// exit ;
75215: GO 75262
// for i in units do
75217: LD_ADDR_VAR 0 4
75221: PUSH
75222: LD_VAR 0 2
75226: PUSH
75227: FOR_IN
75228: IFFALSE 75260
// if See ( side , i ) then
75230: LD_VAR 0 1
75234: PPUSH
75235: LD_VAR 0 4
75239: PPUSH
75240: CALL_OW 292
75244: IFFALSE 75258
// begin result := true ;
75246: LD_ADDR_VAR 0 3
75250: PUSH
75251: LD_INT 1
75253: ST_TO_ADDR
// exit ;
75254: POP
75255: POP
75256: GO 75262
// end ;
75258: GO 75227
75260: POP
75261: POP
// end ;
75262: LD_VAR 0 3
75266: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75267: LD_INT 0
75269: PPUSH
75270: PPUSH
75271: PPUSH
75272: PPUSH
// if not unit or not points then
75273: LD_VAR 0 1
75277: NOT
75278: PUSH
75279: LD_VAR 0 2
75283: NOT
75284: OR
75285: IFFALSE 75289
// exit ;
75287: GO 75379
// dist := 99999 ;
75289: LD_ADDR_VAR 0 5
75293: PUSH
75294: LD_INT 99999
75296: ST_TO_ADDR
// for i in points do
75297: LD_ADDR_VAR 0 4
75301: PUSH
75302: LD_VAR 0 2
75306: PUSH
75307: FOR_IN
75308: IFFALSE 75377
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75310: LD_ADDR_VAR 0 6
75314: PUSH
75315: LD_VAR 0 1
75319: PPUSH
75320: LD_VAR 0 4
75324: PUSH
75325: LD_INT 1
75327: ARRAY
75328: PPUSH
75329: LD_VAR 0 4
75333: PUSH
75334: LD_INT 2
75336: ARRAY
75337: PPUSH
75338: CALL_OW 297
75342: ST_TO_ADDR
// if tmpDist < dist then
75343: LD_VAR 0 6
75347: PUSH
75348: LD_VAR 0 5
75352: LESS
75353: IFFALSE 75375
// begin result := i ;
75355: LD_ADDR_VAR 0 3
75359: PUSH
75360: LD_VAR 0 4
75364: ST_TO_ADDR
// dist := tmpDist ;
75365: LD_ADDR_VAR 0 5
75369: PUSH
75370: LD_VAR 0 6
75374: ST_TO_ADDR
// end ; end ;
75375: GO 75307
75377: POP
75378: POP
// end ;
75379: LD_VAR 0 3
75383: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75384: LD_INT 0
75386: PPUSH
// uc_side := side ;
75387: LD_ADDR_OWVAR 20
75391: PUSH
75392: LD_VAR 0 1
75396: ST_TO_ADDR
// uc_nation := 3 ;
75397: LD_ADDR_OWVAR 21
75401: PUSH
75402: LD_INT 3
75404: ST_TO_ADDR
// vc_chassis := 25 ;
75405: LD_ADDR_OWVAR 37
75409: PUSH
75410: LD_INT 25
75412: ST_TO_ADDR
// vc_engine := engine_siberite ;
75413: LD_ADDR_OWVAR 39
75417: PUSH
75418: LD_INT 3
75420: ST_TO_ADDR
// vc_control := control_computer ;
75421: LD_ADDR_OWVAR 38
75425: PUSH
75426: LD_INT 3
75428: ST_TO_ADDR
// vc_weapon := 59 ;
75429: LD_ADDR_OWVAR 40
75433: PUSH
75434: LD_INT 59
75436: ST_TO_ADDR
// result := CreateVehicle ;
75437: LD_ADDR_VAR 0 5
75441: PUSH
75442: CALL_OW 45
75446: ST_TO_ADDR
// SetDir ( result , d ) ;
75447: LD_VAR 0 5
75451: PPUSH
75452: LD_VAR 0 4
75456: PPUSH
75457: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
75461: LD_VAR 0 5
75465: PPUSH
75466: LD_VAR 0 2
75470: PPUSH
75471: LD_VAR 0 3
75475: PPUSH
75476: LD_INT 0
75478: PPUSH
75479: CALL_OW 48
// end ;
75483: LD_VAR 0 5
75487: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
75488: LD_INT 0
75490: PPUSH
75491: PPUSH
75492: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
75493: LD_ADDR_VAR 0 2
75497: PUSH
75498: LD_INT 0
75500: PUSH
75501: LD_INT 0
75503: PUSH
75504: LD_INT 0
75506: PUSH
75507: LD_INT 0
75509: PUSH
75510: EMPTY
75511: LIST
75512: LIST
75513: LIST
75514: LIST
75515: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75516: LD_VAR 0 1
75520: NOT
75521: PUSH
75522: LD_VAR 0 1
75526: PPUSH
75527: CALL_OW 264
75531: PUSH
75532: LD_INT 12
75534: PUSH
75535: LD_INT 51
75537: PUSH
75538: LD_INT 32
75540: PUSH
75541: LD_INT 89
75543: PUSH
75544: EMPTY
75545: LIST
75546: LIST
75547: LIST
75548: LIST
75549: IN
75550: NOT
75551: OR
75552: IFFALSE 75556
// exit ;
75554: GO 75654
// for i := 1 to 3 do
75556: LD_ADDR_VAR 0 3
75560: PUSH
75561: DOUBLE
75562: LD_INT 1
75564: DEC
75565: ST_TO_ADDR
75566: LD_INT 3
75568: PUSH
75569: FOR_TO
75570: IFFALSE 75652
// begin tmp := GetCargo ( cargo , i ) ;
75572: LD_ADDR_VAR 0 4
75576: PUSH
75577: LD_VAR 0 1
75581: PPUSH
75582: LD_VAR 0 3
75586: PPUSH
75587: CALL_OW 289
75591: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75592: LD_ADDR_VAR 0 2
75596: PUSH
75597: LD_VAR 0 2
75601: PPUSH
75602: LD_VAR 0 3
75606: PPUSH
75607: LD_VAR 0 4
75611: PPUSH
75612: CALL_OW 1
75616: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75617: LD_ADDR_VAR 0 2
75621: PUSH
75622: LD_VAR 0 2
75626: PPUSH
75627: LD_INT 4
75629: PPUSH
75630: LD_VAR 0 2
75634: PUSH
75635: LD_INT 4
75637: ARRAY
75638: PUSH
75639: LD_VAR 0 4
75643: PLUS
75644: PPUSH
75645: CALL_OW 1
75649: ST_TO_ADDR
// end ;
75650: GO 75569
75652: POP
75653: POP
// end ;
75654: LD_VAR 0 2
75658: RET
// export function Length ( array ) ; begin
75659: LD_INT 0
75661: PPUSH
// result := array + 0 ;
75662: LD_ADDR_VAR 0 2
75666: PUSH
75667: LD_VAR 0 1
75671: PUSH
75672: LD_INT 0
75674: PLUS
75675: ST_TO_ADDR
// end ;
75676: LD_VAR 0 2
75680: RET
// export function PrepareArray ( array ) ; begin
75681: LD_INT 0
75683: PPUSH
// result := array diff 0 ;
75684: LD_ADDR_VAR 0 2
75688: PUSH
75689: LD_VAR 0 1
75693: PUSH
75694: LD_INT 0
75696: DIFF
75697: ST_TO_ADDR
// if not result [ 1 ] then
75698: LD_VAR 0 2
75702: PUSH
75703: LD_INT 1
75705: ARRAY
75706: NOT
75707: IFFALSE 75727
// result := Delete ( result , 1 ) ;
75709: LD_ADDR_VAR 0 2
75713: PUSH
75714: LD_VAR 0 2
75718: PPUSH
75719: LD_INT 1
75721: PPUSH
75722: CALL_OW 3
75726: ST_TO_ADDR
// end ;
75727: LD_VAR 0 2
75731: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
75732: LD_INT 0
75734: PPUSH
75735: PPUSH
75736: PPUSH
75737: PPUSH
// sibRocketRange := 25 ;
75738: LD_ADDR_VAR 0 6
75742: PUSH
75743: LD_INT 25
75745: ST_TO_ADDR
// result := false ;
75746: LD_ADDR_VAR 0 4
75750: PUSH
75751: LD_INT 0
75753: ST_TO_ADDR
// for i := 0 to 5 do
75754: LD_ADDR_VAR 0 5
75758: PUSH
75759: DOUBLE
75760: LD_INT 0
75762: DEC
75763: ST_TO_ADDR
75764: LD_INT 5
75766: PUSH
75767: FOR_TO
75768: IFFALSE 75835
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
75770: LD_VAR 0 1
75774: PPUSH
75775: LD_VAR 0 5
75779: PPUSH
75780: LD_VAR 0 6
75784: PPUSH
75785: CALL_OW 272
75789: PPUSH
75790: LD_VAR 0 2
75794: PPUSH
75795: LD_VAR 0 5
75799: PPUSH
75800: LD_VAR 0 6
75804: PPUSH
75805: CALL_OW 273
75809: PPUSH
75810: LD_VAR 0 3
75814: PPUSH
75815: CALL_OW 309
75819: IFFALSE 75833
// begin result := true ;
75821: LD_ADDR_VAR 0 4
75825: PUSH
75826: LD_INT 1
75828: ST_TO_ADDR
// exit ;
75829: POP
75830: POP
75831: GO 75837
// end ;
75833: GO 75767
75835: POP
75836: POP
// end ;
75837: LD_VAR 0 4
75841: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
75842: LD_INT 0
75844: PPUSH
75845: PPUSH
75846: PPUSH
// if btype = b_depot then
75847: LD_VAR 0 2
75851: PUSH
75852: LD_INT 0
75854: EQUAL
75855: IFFALSE 75867
// begin result := true ;
75857: LD_ADDR_VAR 0 3
75861: PUSH
75862: LD_INT 1
75864: ST_TO_ADDR
// exit ;
75865: GO 75983
// end ; pom := GetBase ( depot ) ;
75867: LD_ADDR_VAR 0 4
75871: PUSH
75872: LD_VAR 0 1
75876: PPUSH
75877: CALL_OW 274
75881: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
75882: LD_ADDR_VAR 0 5
75886: PUSH
75887: LD_VAR 0 2
75891: PPUSH
75892: LD_VAR 0 1
75896: PPUSH
75897: CALL_OW 248
75901: PPUSH
75902: CALL_OW 450
75906: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
75907: LD_ADDR_VAR 0 3
75911: PUSH
75912: LD_VAR 0 4
75916: PPUSH
75917: LD_INT 1
75919: PPUSH
75920: CALL_OW 275
75924: PUSH
75925: LD_VAR 0 5
75929: PUSH
75930: LD_INT 1
75932: ARRAY
75933: GREATEREQUAL
75934: PUSH
75935: LD_VAR 0 4
75939: PPUSH
75940: LD_INT 2
75942: PPUSH
75943: CALL_OW 275
75947: PUSH
75948: LD_VAR 0 5
75952: PUSH
75953: LD_INT 2
75955: ARRAY
75956: GREATEREQUAL
75957: AND
75958: PUSH
75959: LD_VAR 0 4
75963: PPUSH
75964: LD_INT 3
75966: PPUSH
75967: CALL_OW 275
75971: PUSH
75972: LD_VAR 0 5
75976: PUSH
75977: LD_INT 3
75979: ARRAY
75980: GREATEREQUAL
75981: AND
75982: ST_TO_ADDR
// end ;
75983: LD_VAR 0 3
75987: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
75988: LD_INT 0
75990: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
75991: LD_VAR 0 1
75995: PPUSH
75996: LD_VAR 0 2
76000: PPUSH
76001: LD_INT 0
76003: PPUSH
76004: LD_INT 0
76006: PPUSH
76007: LD_INT 1
76009: PPUSH
76010: LD_INT 0
76012: PPUSH
76013: CALL_OW 587
// end ;
76017: LD_VAR 0 3
76021: RET
// export function CenterOnNow ( unit ) ; begin
76022: LD_INT 0
76024: PPUSH
// result := IsInUnit ( unit ) ;
76025: LD_ADDR_VAR 0 2
76029: PUSH
76030: LD_VAR 0 1
76034: PPUSH
76035: CALL_OW 310
76039: ST_TO_ADDR
// if not result then
76040: LD_VAR 0 2
76044: NOT
76045: IFFALSE 76057
// result := unit ;
76047: LD_ADDR_VAR 0 2
76051: PUSH
76052: LD_VAR 0 1
76056: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
76057: LD_VAR 0 1
76061: PPUSH
76062: CALL_OW 87
// end ;
76066: LD_VAR 0 2
76070: RET
// export function ComMoveHex ( unit , hex ) ; begin
76071: LD_INT 0
76073: PPUSH
// if not hex then
76074: LD_VAR 0 2
76078: NOT
76079: IFFALSE 76083
// exit ;
76081: GO 76136
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
76083: LD_VAR 0 2
76087: PUSH
76088: LD_INT 1
76090: ARRAY
76091: PPUSH
76092: LD_VAR 0 2
76096: PUSH
76097: LD_INT 2
76099: ARRAY
76100: PPUSH
76101: CALL_OW 428
76105: IFFALSE 76109
// exit ;
76107: GO 76136
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
76109: LD_VAR 0 1
76113: PPUSH
76114: LD_VAR 0 2
76118: PUSH
76119: LD_INT 1
76121: ARRAY
76122: PPUSH
76123: LD_VAR 0 2
76127: PUSH
76128: LD_INT 2
76130: ARRAY
76131: PPUSH
76132: CALL_OW 111
// end ;
76136: LD_VAR 0 3
76140: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
76141: LD_INT 0
76143: PPUSH
76144: PPUSH
76145: PPUSH
// if not unit or not enemy then
76146: LD_VAR 0 1
76150: NOT
76151: PUSH
76152: LD_VAR 0 2
76156: NOT
76157: OR
76158: IFFALSE 76162
// exit ;
76160: GO 76286
// x := GetX ( enemy ) ;
76162: LD_ADDR_VAR 0 4
76166: PUSH
76167: LD_VAR 0 2
76171: PPUSH
76172: CALL_OW 250
76176: ST_TO_ADDR
// y := GetY ( enemy ) ;
76177: LD_ADDR_VAR 0 5
76181: PUSH
76182: LD_VAR 0 2
76186: PPUSH
76187: CALL_OW 251
76191: ST_TO_ADDR
// if ValidHex ( x , y ) then
76192: LD_VAR 0 4
76196: PPUSH
76197: LD_VAR 0 5
76201: PPUSH
76202: CALL_OW 488
76206: IFFALSE 76286
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
76208: LD_VAR 0 2
76212: PPUSH
76213: CALL_OW 247
76217: PUSH
76218: LD_INT 3
76220: PUSH
76221: LD_INT 2
76223: PUSH
76224: EMPTY
76225: LIST
76226: LIST
76227: IN
76228: PUSH
76229: LD_VAR 0 1
76233: PPUSH
76234: CALL_OW 255
76238: PPUSH
76239: LD_VAR 0 2
76243: PPUSH
76244: CALL_OW 292
76248: OR
76249: IFFALSE 76267
// ComAttackUnit ( unit , enemy ) else
76251: LD_VAR 0 1
76255: PPUSH
76256: LD_VAR 0 2
76260: PPUSH
76261: CALL_OW 115
76265: GO 76286
// ComAgressiveMove ( unit , x , y ) ;
76267: LD_VAR 0 1
76271: PPUSH
76272: LD_VAR 0 4
76276: PPUSH
76277: LD_VAR 0 5
76281: PPUSH
76282: CALL_OW 114
// end ;
76286: LD_VAR 0 3
76290: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
76291: LD_INT 0
76293: PPUSH
76294: PPUSH
76295: PPUSH
// list := AreaToList ( area , 0 ) ;
76296: LD_ADDR_VAR 0 5
76300: PUSH
76301: LD_VAR 0 1
76305: PPUSH
76306: LD_INT 0
76308: PPUSH
76309: CALL_OW 517
76313: ST_TO_ADDR
// if not list then
76314: LD_VAR 0 5
76318: NOT
76319: IFFALSE 76323
// exit ;
76321: GO 76453
// if all then
76323: LD_VAR 0 2
76327: IFFALSE 76415
// begin for i := 1 to list [ 1 ] do
76329: LD_ADDR_VAR 0 4
76333: PUSH
76334: DOUBLE
76335: LD_INT 1
76337: DEC
76338: ST_TO_ADDR
76339: LD_VAR 0 5
76343: PUSH
76344: LD_INT 1
76346: ARRAY
76347: PUSH
76348: FOR_TO
76349: IFFALSE 76411
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
76351: LD_ADDR_VAR 0 3
76355: PUSH
76356: LD_VAR 0 3
76360: PPUSH
76361: LD_VAR 0 3
76365: PUSH
76366: LD_INT 1
76368: PLUS
76369: PPUSH
76370: LD_VAR 0 5
76374: PUSH
76375: LD_INT 1
76377: ARRAY
76378: PUSH
76379: LD_VAR 0 4
76383: ARRAY
76384: PUSH
76385: LD_VAR 0 5
76389: PUSH
76390: LD_INT 2
76392: ARRAY
76393: PUSH
76394: LD_VAR 0 4
76398: ARRAY
76399: PUSH
76400: EMPTY
76401: LIST
76402: LIST
76403: PPUSH
76404: CALL_OW 1
76408: ST_TO_ADDR
76409: GO 76348
76411: POP
76412: POP
// exit ;
76413: GO 76453
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
76415: LD_ADDR_VAR 0 3
76419: PUSH
76420: LD_VAR 0 5
76424: PUSH
76425: LD_INT 1
76427: ARRAY
76428: PUSH
76429: LD_INT 1
76431: ARRAY
76432: PUSH
76433: LD_VAR 0 5
76437: PUSH
76438: LD_INT 2
76440: ARRAY
76441: PUSH
76442: LD_INT 1
76444: ARRAY
76445: PUSH
76446: EMPTY
76447: LIST
76448: LIST
76449: PUSH
76450: EMPTY
76451: LIST
76452: ST_TO_ADDR
// end ;
76453: LD_VAR 0 3
76457: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
76458: LD_INT 0
76460: PPUSH
76461: PPUSH
// list := AreaToList ( area , 0 ) ;
76462: LD_ADDR_VAR 0 4
76466: PUSH
76467: LD_VAR 0 1
76471: PPUSH
76472: LD_INT 0
76474: PPUSH
76475: CALL_OW 517
76479: ST_TO_ADDR
// if not list then
76480: LD_VAR 0 4
76484: NOT
76485: IFFALSE 76489
// exit ;
76487: GO 76530
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
76489: LD_ADDR_VAR 0 3
76493: PUSH
76494: LD_VAR 0 4
76498: PUSH
76499: LD_INT 1
76501: ARRAY
76502: PUSH
76503: LD_INT 1
76505: ARRAY
76506: PUSH
76507: LD_VAR 0 4
76511: PUSH
76512: LD_INT 2
76514: ARRAY
76515: PUSH
76516: LD_INT 1
76518: ARRAY
76519: PUSH
76520: LD_VAR 0 2
76524: PUSH
76525: EMPTY
76526: LIST
76527: LIST
76528: LIST
76529: ST_TO_ADDR
// end ;
76530: LD_VAR 0 3
76534: RET
// export function First ( array ) ; begin
76535: LD_INT 0
76537: PPUSH
// if not array then
76538: LD_VAR 0 1
76542: NOT
76543: IFFALSE 76547
// exit ;
76545: GO 76561
// result := array [ 1 ] ;
76547: LD_ADDR_VAR 0 2
76551: PUSH
76552: LD_VAR 0 1
76556: PUSH
76557: LD_INT 1
76559: ARRAY
76560: ST_TO_ADDR
// end ;
76561: LD_VAR 0 2
76565: RET
// export function Last ( array ) ; begin
76566: LD_INT 0
76568: PPUSH
// if not array then
76569: LD_VAR 0 1
76573: NOT
76574: IFFALSE 76578
// exit ;
76576: GO 76594
// result := array [ array ] ;
76578: LD_ADDR_VAR 0 2
76582: PUSH
76583: LD_VAR 0 1
76587: PUSH
76588: LD_VAR 0 1
76592: ARRAY
76593: ST_TO_ADDR
// end ;
76594: LD_VAR 0 2
76598: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
76599: LD_INT 0
76601: PPUSH
76602: PPUSH
// result := [ ] ;
76603: LD_ADDR_VAR 0 5
76607: PUSH
76608: EMPTY
76609: ST_TO_ADDR
// if not array then
76610: LD_VAR 0 1
76614: NOT
76615: IFFALSE 76619
// exit ;
76617: GO 76731
// for i := 1 to array do
76619: LD_ADDR_VAR 0 6
76623: PUSH
76624: DOUBLE
76625: LD_INT 1
76627: DEC
76628: ST_TO_ADDR
76629: LD_VAR 0 1
76633: PUSH
76634: FOR_TO
76635: IFFALSE 76729
// if array [ i ] [ index ] = value then
76637: LD_VAR 0 1
76641: PUSH
76642: LD_VAR 0 6
76646: ARRAY
76647: PUSH
76648: LD_VAR 0 2
76652: ARRAY
76653: PUSH
76654: LD_VAR 0 3
76658: EQUAL
76659: IFFALSE 76727
// begin if indexColumn then
76661: LD_VAR 0 4
76665: IFFALSE 76701
// result := Join ( result , array [ i ] [ indexColumn ] ) else
76667: LD_ADDR_VAR 0 5
76671: PUSH
76672: LD_VAR 0 5
76676: PPUSH
76677: LD_VAR 0 1
76681: PUSH
76682: LD_VAR 0 6
76686: ARRAY
76687: PUSH
76688: LD_VAR 0 4
76692: ARRAY
76693: PPUSH
76694: CALL 71779 0 2
76698: ST_TO_ADDR
76699: GO 76727
// result := Join ( result , array [ i ] ) ;
76701: LD_ADDR_VAR 0 5
76705: PUSH
76706: LD_VAR 0 5
76710: PPUSH
76711: LD_VAR 0 1
76715: PUSH
76716: LD_VAR 0 6
76720: ARRAY
76721: PPUSH
76722: CALL 71779 0 2
76726: ST_TO_ADDR
// end ;
76727: GO 76634
76729: POP
76730: POP
// end ;
76731: LD_VAR 0 5
76735: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
76736: LD_INT 0
76738: PPUSH
// if not vehicles or not parkingPoint then
76739: LD_VAR 0 1
76743: NOT
76744: PUSH
76745: LD_VAR 0 2
76749: NOT
76750: OR
76751: IFFALSE 76755
// exit ;
76753: GO 76853
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
76755: LD_ADDR_VAR 0 1
76759: PUSH
76760: LD_VAR 0 1
76764: PPUSH
76765: LD_INT 50
76767: PUSH
76768: EMPTY
76769: LIST
76770: PUSH
76771: LD_INT 3
76773: PUSH
76774: LD_INT 92
76776: PUSH
76777: LD_VAR 0 2
76781: PUSH
76782: LD_INT 1
76784: ARRAY
76785: PUSH
76786: LD_VAR 0 2
76790: PUSH
76791: LD_INT 2
76793: ARRAY
76794: PUSH
76795: LD_INT 8
76797: PUSH
76798: EMPTY
76799: LIST
76800: LIST
76801: LIST
76802: LIST
76803: PUSH
76804: EMPTY
76805: LIST
76806: LIST
76807: PUSH
76808: EMPTY
76809: LIST
76810: LIST
76811: PPUSH
76812: CALL_OW 72
76816: ST_TO_ADDR
// if not vehicles then
76817: LD_VAR 0 1
76821: NOT
76822: IFFALSE 76826
// exit ;
76824: GO 76853
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
76826: LD_VAR 0 1
76830: PPUSH
76831: LD_VAR 0 2
76835: PUSH
76836: LD_INT 1
76838: ARRAY
76839: PPUSH
76840: LD_VAR 0 2
76844: PUSH
76845: LD_INT 2
76847: ARRAY
76848: PPUSH
76849: CALL_OW 111
// end ;
76853: LD_VAR 0 3
76857: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
76858: LD_INT 0
76860: PPUSH
76861: PPUSH
76862: PPUSH
// if not side or not area then
76863: LD_VAR 0 1
76867: NOT
76868: PUSH
76869: LD_VAR 0 2
76873: NOT
76874: OR
76875: IFFALSE 76879
// exit ;
76877: GO 76998
// tmp := AreaToList ( area , 0 ) ;
76879: LD_ADDR_VAR 0 5
76883: PUSH
76884: LD_VAR 0 2
76888: PPUSH
76889: LD_INT 0
76891: PPUSH
76892: CALL_OW 517
76896: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
76897: LD_ADDR_VAR 0 4
76901: PUSH
76902: DOUBLE
76903: LD_INT 1
76905: DEC
76906: ST_TO_ADDR
76907: LD_VAR 0 5
76911: PUSH
76912: LD_INT 1
76914: ARRAY
76915: PUSH
76916: FOR_TO
76917: IFFALSE 76996
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
76919: LD_VAR 0 5
76923: PUSH
76924: LD_INT 1
76926: ARRAY
76927: PUSH
76928: LD_VAR 0 4
76932: ARRAY
76933: PPUSH
76934: LD_VAR 0 5
76938: PUSH
76939: LD_INT 2
76941: ARRAY
76942: PUSH
76943: LD_VAR 0 4
76947: ARRAY
76948: PPUSH
76949: CALL_OW 351
76953: IFFALSE 76994
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
76955: LD_VAR 0 5
76959: PUSH
76960: LD_INT 1
76962: ARRAY
76963: PUSH
76964: LD_VAR 0 4
76968: ARRAY
76969: PPUSH
76970: LD_VAR 0 5
76974: PUSH
76975: LD_INT 2
76977: ARRAY
76978: PUSH
76979: LD_VAR 0 4
76983: ARRAY
76984: PPUSH
76985: LD_VAR 0 1
76989: PPUSH
76990: CALL_OW 244
// end ;
76994: GO 76916
76996: POP
76997: POP
// end ; end_of_file
76998: LD_VAR 0 3
77002: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77003: LD_VAR 0 1
77007: PUSH
77008: LD_INT 200
77010: DOUBLE
77011: GREATEREQUAL
77012: IFFALSE 77020
77014: LD_INT 299
77016: DOUBLE
77017: LESSEQUAL
77018: IFTRUE 77022
77020: GO 77054
77022: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77023: LD_VAR 0 1
77027: PPUSH
77028: LD_VAR 0 2
77032: PPUSH
77033: LD_VAR 0 3
77037: PPUSH
77038: LD_VAR 0 4
77042: PPUSH
77043: LD_VAR 0 5
77047: PPUSH
77048: CALL 29144 0 5
77052: GO 77131
77054: LD_INT 300
77056: DOUBLE
77057: GREATEREQUAL
77058: IFFALSE 77066
77060: LD_INT 399
77062: DOUBLE
77063: LESSEQUAL
77064: IFTRUE 77068
77066: GO 77130
77068: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77069: LD_VAR 0 1
77073: PPUSH
77074: LD_VAR 0 2
77078: PPUSH
77079: LD_VAR 0 3
77083: PPUSH
77084: LD_VAR 0 4
77088: PPUSH
77089: LD_VAR 0 5
77093: PPUSH
77094: LD_VAR 0 6
77098: PPUSH
77099: LD_VAR 0 7
77103: PPUSH
77104: LD_VAR 0 8
77108: PPUSH
77109: LD_VAR 0 9
77113: PPUSH
77114: LD_VAR 0 10
77118: PPUSH
77119: LD_VAR 0 11
77123: PPUSH
77124: CALL 25052 0 11
77128: GO 77131
77130: POP
// end ;
77131: PPOPN 11
77133: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77134: LD_VAR 0 1
77138: PPUSH
77139: LD_VAR 0 2
77143: PPUSH
77144: LD_VAR 0 3
77148: PPUSH
77149: LD_VAR 0 4
77153: PPUSH
77154: LD_VAR 0 5
77158: PPUSH
77159: CALL 28529 0 5
// end ; end_of_file
77163: PPOPN 5
77165: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77166: LD_VAR 0 1
77170: PPUSH
77171: LD_VAR 0 2
77175: PPUSH
77176: LD_VAR 0 3
77180: PPUSH
77181: LD_VAR 0 4
77185: PPUSH
77186: LD_VAR 0 5
77190: PPUSH
77191: LD_VAR 0 6
77195: PPUSH
77196: CALL 12704 0 6
// end ;
77200: PPOPN 6
77202: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77203: LD_INT 0
77205: PPUSH
// begin if not units then
77206: LD_VAR 0 1
77210: NOT
77211: IFFALSE 77215
// exit ;
77213: GO 77215
// end ;
77215: PPOPN 7
77217: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77218: CALL 12591 0 0
// end ;
77222: PPOPN 1
77224: END
