Export Function MCH_TrainSoldier(side, n);
var i, tmp, sk;
begin
tmp := MCF_Get(side, [f_or, [f_class, 2], [f_class, 3], [f_class, 4]]);
tmp := MCF_NoClass(tmp, 0);
sk := MCF_SortLevelDesc(side, tmp, 1);

if n > sk then
   n := sk;

for i = 1 to n do
    if (sk[i][1]) <> 0 then
       begin
       MREG_ToChangeClass := MC_RegistryUpdate(MREG_ToChangeClass, side, sk[i][1], 1);
       MREG_ToArm := Replace2(MREG_ToArm, side, MREG_ToArm[side]+1, sk[i][1]);
       end;

End;

Export Function MCH_TrainEngineer(side, n);
var i, tmp, sk;
begin
tmp := MCF_Get(side, [f_or, [f_class, 1], [f_class, 3], [f_class, 4]]);
tmp := MCF_NoClass(tmp, 0);
sk := MCF_SortLevelDesc(side, tmp, 2);

if n > sk then
   n := sk;

for i = 1 to n do
    if (sk[i][1]) <> 0 then
       begin
       MREG_ToChangeClass := MC_RegistryUpdate(MREG_ToChangeClass, side, sk[i][1], 2);
       MREG_ToDep := Replace2(MREG_ToDep, side, MREG_ToDep[side]+1, sk[i][1]);
       end;

End;

Export Function MCH_TrainMechanic(side, n);
var i, tmp, sk;
begin
tmp := MCF_Get(side, [f_or, [f_class, 1], [f_class, 2], [f_class, 4]]);
tmp := MCF_NoClass(tmp, 0);
sk := MCF_SortLevelDesc(side, tmp, 3);

if n > sk then
   n := sk;

for i = 1 to n do
    if (sk[i][1]) <> 0 then
       begin
       MREG_ToChangeClass := MC_RegistryUpdate(MREG_ToChangeClass, side, sk[i][1], 3);
       MREG_ToFac := Replace2(MREG_ToFac, side, MREG_ToFac[side]+1, sk[i][1]);
       end;

End;

Export Function MCH_TrainScientist(side, n);
var i, tmp, sk;
begin
tmp := MCF_Get(side, [f_or, [f_class, 1], [f_class, 2]{, [f_class, 3]}]);
tmp := MCF_NoClass(tmp, 0);
sk := MCF_SortLevelDesc(side, tmp, 4);

if n > sk then
   n := sk;

for i = 1 to n do
    if (sk[i][1]) <> 0 then
       begin
       MREG_ToChangeClass := MC_RegistryUpdate(MREG_ToChangeClass, side, sk[i][1], 4);
       MREG_ToLab := Replace2(MREG_ToLab, side, MREG_ToLab[side]+1, sk[i][1]);
       end;

End;

Export Function MCH_TrainSpec(side, n, spec_class);
var i, tmp, sk;
begin
tmp := MCF_Get(side, [f_or, [f_class, 1], [f_class, 2], [f_class, 3], [f_class, 4]]);
tmp := MCF_NoClass(tmp, 0);
sk := MCF_SortLevelDesc(side, tmp, 1);

if n > sk then
   n := sk;

for i = 1 to n do
    begin
    MREG_ToChangeClass := MC_RegistryUpdate(MREG_ToChangeClass, side, sk[i][1], spec_class);
    end;

End;


Export Function MCH_ChangeClass(side, unit, class);
var i, b;
begin
b := false;

     if class in [class_soldier, class_bazooker, class_sniper, class_mortar] then
        if MCF_Get(side, [f_or, [f_btype, b_armoury], [f_btype, b_barracks]]) then
           b := MCF_Get(side, [f_or, [f_btype, b_armoury], [f_btype, b_barracks]])[1];

     if class = class_engineer then
        if MCF_Get(side, [f_or, [f_btype, b_depot], [f_btype, b_warehouse]]) then
           b := MCF_Get(side, [f_or, [f_btype, b_depot], [f_btype, b_warehouse]])[1];

     if class = class_mechanic then
        if MCF_Get(side, [f_btype, b_factory]) then
           b := MCF_Get(side, [f_or, [f_btype, b_workshop], [f_btype, b_factory]])[1];

     if class = class_scientistic then
        if MCF_Get(side, [f_or, [f_btype, b_lab], [f_btype, b_lab_half], [f_btype, b_lab_full]]) then
           b := MCF_Get(side, [f_or, [f_btype, b_lab], [f_btype, b_lab_half], [f_btype, b_lab_full]])[1];
          
     if GetClass(unit) = class then
        begin
        MREG_ToChangeClass := MC_RegistryDelete(MREG_ToChangeClass, side, unit, class);
        end
         else
          if b then
             begin
             if IsInUnit(unit) and IsInUnit(unit) <> b then
                ComExitBuilding(unit);
             if not IsInUnit(unit) then
                ComEnterUnit(unit, b);
             AddComChangeProfession(unit, class);
             end
         else
          result := false;

End;

