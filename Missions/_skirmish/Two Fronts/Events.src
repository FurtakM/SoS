On ArtifactUsed(side, button_type, x, y) do
var side1, side4;
begin
if call and tick < 12$00 then
   case query('call1') of
   1: begin
      callUsed := true;

      SetArtifactUse(3, art_use_exclamation, art_gray, playerDepot);
      call := false;

      SayRadio(Popov, 'DR6');

      wait(rand(1$00, 3$00));

      PrepareConvoy([eastArr, southArr][rand(1,2)], rand(1, 2));

      wait(rand(6$00, 8$00));

      call := true;

      SetArtifactUse(3, art_use_exclamation, art_instant, playerDepot);
      end;
   2: ;
   end;

if call and tick >= 12$00 then
   case query('call2') of
   1: begin
      callUsed := true;
      // atak
      call := false;
      side1 := FilterAllUnits([[f_side, 1], [f_ok]]);
      side4 := FilterAllUnits([[f_side, 4], [f_ok]]);

      if side1 and side4 then
         PrepareAttack([eastArr, southArr][rand(1,2)], [6, 6, 5][Difficulty])
      else if not side1 then
         PrepareAttack(southArr, [7, 6, 5][Difficulty])
      else if not side4 then
         PrepareAttack(eastArr, [6, 6, 5][Difficulty]);

      wait(rand(5$00, 8$00));

      call := true;

      SetArtifactUse(3, art_use_exclamation, art_instant, playerDepot);
      end;
   2: begin
      callUsed := true;

      SetArtifactUse(3, art_use_exclamation, art_gray, playerDepot);
      call := false;

      SayRadio(Popov, 'DR6');

      wait(rand(1$00, 3$00));

      PrepareConvoy([eastArr, southArr][rand(1,2)], [3, 2, 2][Difficulty] - rand(0, 1));

      wait(rand(6$00, 8$00));

      call := true;

      SetArtifactUse(3, art_use_exclamation, art_instant, playerDepot);
      end;
   3: ;
   end;
End;

On UnitDestroyed(un) do
begin
SOS_UnitDestroyed(un);

if un in FilterAllUnits([[f_side, 1], [f_type, unit_building]]) and not alfaNorthTriggered then
   begin
   alfaNorthTriggered := true;
   SayRadio(Jakes, 'DJ3');

   wait(0$30);

   PrepareAlfaAttack(northArr, [6, 7, 8][Difficulty]);
   end;

if un in FilterAllUnits([[f_side, 4], [f_type, unit_building]]) and not alfaSouthTriggered then
   begin
   alfaSouthTriggered := true;
   SayRadio(Sylvia, 'DS4');

   wait(0$30);

   PrepareAlfaAttack(northArr, [6, 7, 8][Difficulty]);
   end;
End;

On UnitDestroyed_Extra(un, killerSide, killerUnit) do
begin
if un in FilterAllUnits([[f_side, 3], [f_type, unit_human], [f_nation, nation_russian]]) then
   begin
   if Prob(50) or lastRadioMsg + 1$00 > tick then
      exit;

   lastRadioMsg := tick;

   if killerSide = 1 then
      begin
      if IsOk(Jakes) then
         SayRadio(Jakes, 'DJ2');
      end
   else if killerSide = 4 then
      begin
      if IsOk(Sylvia) then
         SayRadio(Sylvia, 'DS1');
      end;
   end;
End;

On VehicleConstructed(vehicle, factory) do
var side;
begin
SOS_VehicleConstructed(vehicle, factory);

side := GetSide(vehicle);

if side = 1 then
   begin
   usConstructList1 := Delete(usConstructList1, 1);

   if GetWeapon(vehicle) in [us_cargo_bay] then
      begin
      usCargo1 := vehicle;
      exit;
      end;

   if GetWeapon(vehicle) = us_crane then
      begin
      usVehicles1 := Join(usVehicles1, vehicle);
      exit;
      end;

   if GetControl(vehicle) = control_manual then
      begin
      usVehicles1 := Join(usVehicles1, vehicle);
      SetTag(IsDrivenBy(vehicle), tMech);
      end
   else
      begin
      usAttackVehicles1 := Join(usAttackVehicles1, vehicle);

      if Count(usAttackVehicles1) >= [3, 5, 7][Difficulty] + attackWave1 then
         SendUsAttack1;
      end;
   end;

if side = 4 then
   begin
   usConstructList2 := Delete(usConstructList2, 1);

   if GetWeapon(vehicle) in [us_cargo_bay] then
      begin
      usCargo2 := vehicle;
      exit;
      end;

   if GetWeapon(vehicle) = us_crane then
      begin
      usVehicles2 := Join(usVehicles2, vehicle);
      exit;
      end;

   if GetControl(vehicle) = control_manual then
      begin
      usVehicles2 := Join(usVehicles2, vehicle);
      SetTag(IsDrivenBy(vehicle), tMech);
      end
   else
      begin
      usAttackVehicles2 := Join(usAttackVehicles2, vehicle);

      if Count(usAttackVehicles2) >= [3, 5, 7][Difficulty] + attackWave2 then
         SendUsAttack2;
      end;
   end;
End;

On EvacuateVehicle(driver, veh, p1, p2) do
begin
if GetTag(driver) = tMech then
   SetTag(driver, 0);
End;

On EvacuateBuilding(building, unit) do
begin
if GetTag(unit) = tControlRemoteMech then
   SetTag(unit, 0);
End;

On UpgradeComplete(b) do
var side, btype;
begin
side := GetSide(b);
btype := GetBType(b);

if side = 1 then
   begin
   usBuildingsToBuild1 := Delete(usBuildingsToBuild1, 1);
   end;

if side = 4 then
   begin
   usBuildingsToBuild2 := Delete(usBuildingsToBuild2, 1);
   end;
End;

On ResearchComplete(tech, lab) do
var side;
begin
side := GetSide(lab);

if side = 1 then
   usTechs1 := usTechs1 diff tech;

if side = 4 then
   usTechs2 := usTechs2 diff tech;
End;

On BuildingComplete(b) do
var side, btype;
begin
side := GetSide(b);
btype := GetBType(b);

if side = 1 then
   usBuildingsToBuild1 := Delete(usBuildingsToBuild1, 1);

if side = 4 then
   usBuildingsToBuild2 := Delete(usBuildingsToBuild2, 1);
End;

On VehicleCaptured(newId, oldId, oldSide, driver) do
begin
if oldSide = 1 then
   begin
   if oldId in usVehicles1 then
      begin
      usVehicles1 := usVehicles1 diff oldId;
      end
   else
      begin
      usAttackVehicles1 := usAttackVehicles1 diff oldId;
      end;
   end;

if oldSide = 4 then
   begin
   if oldId in usVehicles2 then
      begin
      usVehicles2 := usVehicles2 diff oldId;
      end
   else
      begin
      usAttackVehicles2 := usAttackVehicles2 diff oldId;
      end;
   end;
End;

On ClassChanged(un, oldClass, newClass) do
var tag;
begin
tag := GetTag(un);

if GetSide(un) in [1,4] then
   if tag in [tWannaBeMech, tWannaBeSold] then
      SetTag(un, 0);

End;
