On ArtifactUsed(side, button_type, x, y) do
var side1, side4;
begin
if call and tick < 12$00 then
   case query('call1') of
   1: begin
      callUsed := true;

      SetArtifactUse(3, art_use_exclamation, art_gray, playerDepot);
      call := false;

      SayRadio(Popov, 'DR6');

      wait(rand(3$00, 4$00));

      PrepareConvoy([eastArr, southArr][rand(1,2)], rand(1, 2));

      wait(rand(8$00, 11$00));

      call := true;

      SetArtifactUse(3, art_use_exclamation, art_instant, playerDepot);
      end;
   2: ;
   end;

if call and tick >= 12$00 then
   case query('call2') of
   1: begin
      callUsed := true;
      // atak
      call := false;
      side1 := FilterAllUnits([[f_side, 1], [f_ok]]);
      side4 := FilterAllUnits([[f_side, 4], [f_ok]]);

      if side1 and side4 then
         PrepareAttack([eastArr, southArr][rand(1,2)], [5, 4, 4][Difficulty])
      else if not side1 then
         PrepareAttack(southArr, [5, 4, 3][Difficulty])
      else if not side4 then
         PrepareAttack(eastArr, [5, 4, 4][Difficulty]);

      wait(rand(5$00, 8$00));

      call := true;

      SetArtifactUse(3, art_use_exclamation, art_instant, playerDepot);
      end;
   2: begin
      callUsed := true;

      SetArtifactUse(3, art_use_exclamation, art_gray, playerDepot);
      call := false;

      SayRadio(Popov, 'DR6');

      wait(rand(3$00, 4$00));

      PrepareConvoy([eastArr, southArr][rand(1,2)], [3, 2, 2][Difficulty] - rand(0, 1));

      wait(rand(11$00, 15$00));

      call := true;

      SetArtifactUse(3, art_use_exclamation, art_instant, playerDepot);
      end;
   3: ;
   end;
End;

On UnitDestroyed(un) do
begin
SOS_UnitDestroyed(un);

End;

On VehicleConstructed(vehicle, factory) do
var side;
begin
SOS_VehicleConstructed(vehicle, factory);

side := GetSide(vehicle);

if side = 1 then
   begin
   if GetControl(vehicle) = control_manual then
      begin
      usVehicles1 := Join(usVehicles1, vehicle);
      SetTag(IsDrivenBy(vehicle), tMech);
      end
   else
      begin
      usAttackVehicles1 := Join(usAttackVehicles1, vehicle);
      end;
   end;

if side = 4 then
   begin
   if GetControl(vehicle) = control_manual then
      begin
      usVehicles2 := Join(usVehicles2, vehicle);
      SetTag(IsDrivenBy(vehicle), tMech);
      end
   else
      begin
      usAttackVehicles2 := Join(usAttackVehicles2, vehicle);
      end;
   end;
End;

On EvacuateVehicle(driver, veh, p1, p2) do
begin
if GetTag(driver) = tMech then
   SetTag(driver, 0);
End;

On EvacuateBuilding(building, unit) do
begin
if GetTag(unit) = tControlRemoteMech then
   SetTag(unit, 0);
End;

On UpgradeComplete(b) do
var side, btype;
begin
side := GetSide(b);
btype := GetBType(b);

if side = 1 then
   begin
   usBuildingsToBuild1 := Delete(usBuildingsToBuild1, 1);
   end;

if side = 4 then
   begin
   usBuildingsToBuild2 := Delete(usBuildingsToBuild2, 1);
   end;
End;

On ResearchComplete(tech, lab) do
var side;
begin
side := GetSide(lab);

if side = 1 then
   usTechs1 := usTechs1 diff tech;

if side = 4 then
   usTechs2 := usTechs2 diff tech;
End;

On BuildingComplete(b) do
var side, btype;
begin
side := GetSide(b);
btype := GetBType(b);

if side = 1 then
   usBuildingsToBuild1 := Delete(usBuildingsToBuild1, 1);

if side = 4 then
   usBuildingsToBuild2 := Delete(usBuildingsToBuild2, 1);
End;

On VehicleCaptured(newId, oldId, oldSide, driver) do
begin
if oldSide = 1 then
   begin
   if oldId in usVehicles1 then
      begin
      usVehicles1 := usVehicles1 diff oldId;
      end
   else
      begin
      usAttackVehicles1 := usAttackVehicles1 diff oldId;
      end;
   end;

if oldSide = 4 then
   begin
   if oldId in usVehicles2 then
      begin
      usVehicles2 := usVehicles2 diff oldId;
      end
   else
      begin
      usAttackVehicles2 := usAttackVehicles2 diff oldId;
      end;
   end;
End;

On ClassChanged(un, oldClass, newClass) do
var tag;
begin
tag := GetTag(un);

if GetSide(un) in [1,4] then
   if tag in [tWannaBeMech, tWannaBeSold] then
      SetTag(un, 0);

End;
