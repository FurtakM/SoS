On SailEvent(event) do
begin
LogEvent('SAILEvent [' & event & ']');

if event = 101 and dialog_north then // atak z polnocy > Sylwek
   begin
   dialog_north := false;
   SayRadio(Brown, ['DS1', 'DS2', 'DS3', 'DS6'][Rand(1,4)]);
   Wait(4$00);
   dialog_north := true;
   end;

if event = 102 and dialog_south then // atak z poludnia > Jakes
   begin
   dialog_south := false;
   SayRadio(Houten, ['DJ1', 'DJ4', 'DJ6'][Rand(1,3)]);
   Wait(4$00);
   dialog_south := true;
   end;

if event = 104 and dialog_popov then
   begin
   dialog_popov := false;
   SayRadio(Popov, 'DR4');
   end;

End;

On BuildingStarted(b, unit) do
var side, i;
if MREG_SidesList[GetSide(b)] then
begin
LogEvent('BuildingStarted [side: ' & GetSide(b) & '; btype: ' & GetBType(b) & '; unit: ' & unit & ']');

side := GetSide(b);

// only for depot
if MCF_Get(side, [f_type, unit_building]) = 1 then
   for i in MCF_Get(side, [f_type, unit_human]) diff MCF_Class(side, 2, []) do
       if not HasTask(i) then
          ComMoveXY(i, GetX(b), GetY(b));    
End;

On BuildingComplete(b) do
if MREG_SidesList[GetSide(b)] then
begin
LogEvent('BuildingComplete [side: ' & GetSide(b) & '; btype: ' & GetBType(b) & ']');

// normal building
   MREG_ToBuild := MC_RegistryDelete(MREG_ToBuild, GetSide(b), GetBType(b), [GetX(b), GetY(b), GetDir(b)]);

// lab
if GetBType(b) = b_lab then
   MREG_LabList := MC_RegistryUpdate(MREG_LabList, GetSide(b), b, []);
// depot
if GetBType(b) = b_depot then
   begin
   MREG_ToUpdate := MC_RegistryUpdate(MREG_ToUpdate, GetSide(b), b_depot, []);
   SetResourceType(GetBase(b), 1, MREG_ResourcesBonus[1]);
   SetResourceType(GetBase(b), 2, MREG_ResourcesBonus[2]);
   SetResourceType(GetBase(b), 3, MREG_ResourcesBonus[3]);
   end;
// workshop
if GetBType(b) = b_workshop then
   MREG_ToUpdate := MC_RegistryUpdate(MREG_ToUpdate, GetSide(b), b_workshop, []);
// barracks
if GetBType(b) = b_armoury then
   MREG_ToUpdate := MC_RegistryUpdate(MREG_ToUpdate, GetSide(b), b_armoury, []);
End;

On ResearchComplete(tech, lab) do
var i;
if MREG_SidesList[GetSide(lab)] then
begin
LogEvent('ResearchComplete [side: ' & GetSide(GetSide(lab)) & '; tech:' & tech & ']');

for i = 1 to MREG_ToRes do
    if MREG_ToRes[i][1] = GetSide(lab) and MREG_ToRes[i][2] = tech then
       begin
       MREG_ToRes := MC_RegistryDelete(MREG_ToRes, GetSide(lab), tech, []);
       break;
       end;

if tech in [tech_apepsych, tech_apeagres, tech_apebrain, tech_apeneural] then
   begin
   i := MCF_Tag(GetSide(lab), 16, [f_class, 4]);

   if i then
      SetTag(i[1], 0);

   i := MCF_Tag(GetSide(lab), 171, []);
   
   if i then
      begin
      SetTag(i[1], 0);
      ComExitBuilding(i[1]);
      end;
   end;
End;

On VehicleConstructed(veh, b) do
var i, side, tmp, c1, c2, c3, c4;
if MREG_SidesList[GetSide(b)] then
begin
side := GetSide(veh);

c1 := GetChassis(veh);
c2 := GetEngine(veh);
c3 := GetControl(veh);
c4 := GetWeapon(veh);

LogEvent('VehicleConstructed [side: ' & side & '; id:' & veh & '; components: [' & c1 & ', ' & c2 & ', ' & c3 & ', ' & c4 & ']]');

if not GetWeapon(veh) in [us_crane, us_cargo_bay, us_bulldozer, ru_cargo_bay, ru_bulldozer, ru_crane, ar_cargo_bay] then
   MREG_VCombat := Replace2(MREG_VCombat, side, MREG_VCombat[side]+1, veh);

if GetWeapon(veh) = ar_control_tower then
   SetTag(GetDriver(veh), 9);

if GetWeapon(veh) in [us_bulldozer, ru_bulldozer] then
   begin
   MREG_Bulldozer := Replace2(MREG_Bulldozer, GetSide(veh), 2, veh);
   exit;
   end;

if GetChassis(veh) in MREG_DefSquad[side][1] and GetEngine(veh) in MREG_DefSquad[side][1] and
   GetControl(veh) in MREG_DefSquad[side][1] and GetWeapon(veh) in MREG_DefSquad[side][1] then
   begin
   MREG_DefVeh := Replace2(MREG_DefVeh, side, MREG_DefVeh[side]+1, veh);
   exit;
   end;

   if (c1 = MREG_ToAttack[side][1] and c2 = MREG_ToAttack[side][2] and c3 = MREG_ToAttack[side][3] and c4 = MREG_ToAttack[side][4]) then
      begin
      tmp := MREG_ToAttack[side];

      for i = 1 to 4 do
          tmp := Delete(tmp, 1);

      MREG_ToAttack := Replace(MREG_ToAttack, side, tmp);
      MREG_Attackers := Replace2(MREG_Attackers, side, MREG_Attackers[side]+1, veh);

      if tmp = 0 then
         MREG_ToAttack := Replace(MREG_ToAttack, side, 0);
      exit;
      end;

MCV_Parking(GetSide(veh), veh);
End;

On ApemanTamed(ape, unit) do
if MREG_SidesList[GetSide(unit)] then
begin
LogEvent('ApemanTamed [side: ' & GetSide(unit) & '; sci: ' & unit & '; ape: ' & ape & ']');

if (not GetTech(tech_apeagres, GetSide(unit)) = state_researched or not GetTech(tech_apepsych, GetSide(unit)) = state_researched) and MCF_Tag(GetSide(unit), 171, []) = 0 then
   begin
   SetTag(ape, 171);
   end;

if MCF_Get(GetSide(unit), [f_btype, b_warehouse]) then
   ComMoveXY(ape, GetX(MCF_Get(GetSide(unit), [f_btype, b_warehouse])[1]), GetY(MCF_Get(GetSide(unit), [f_btype, b_warehouse])[1]));
End;

On EnterBuilding(b, un) do
if MREG_SidesList[GetSide(b)] then
begin
if un in MCF_Ape(GetSide(un)) then
   begin
   if GetBType(b) in [b_depot, b_warehouse] then
      begin
      Wait(0$0.3);
      SetClass(un, class_apeman_engineer);
      ComExitBuilding(un);
      end;

   if GetBType(b) in [b_armoury, b_barracks] then
      begin
      Wait(0$0.3);

      if GetTag(un) = 0 then
         SetClass(un, class_apeman_soldier)
          else
           if GetTech(tech_apeneural, GetSide(un)) then
              SetClass(un, class_apeman_kamikaze);

      //ComExitBuilding(un);
      end;
   end;

if GetBType(b) = b_bunker then
   begin
   MREG_ToBunker := Replace2(MREG_ToBunker, GetSide(b), MREG_ToBunker[GetSide(b)]+1, b);
   MREG_ToBunker := Replace2(MREG_ToBunker, GetSide(b), MREG_ToBunker[GetSide(b)]+1, un);
   end;
End;

On UnitDestroyed(un) do
begin
SOS_UnitDestroyed(un);

if un in FilterAllUnits([[f_side, 3], [f_nation, 3], [f_type, unit_human]]) then
   player_loss := player_loss + 1;

if un in FilterAllUnits([[f_side, 1], [f_type, unit_building]]) and not alfa_north_triggered then
   begin
   alfa_north_triggered := true;
   SayRadio(Brown, 'DS4');
   Wait(1$25);

   if not isTest then
      PrepareAlfaAttack(north_arr, [5, 6, 7][Difficulty]);
   end;

if un in FilterAllUnits([[f_side, 4], [f_type, unit_building]]) and not alfa_south_triggered then
   begin
   alfa_south_triggered := true;
   SayRadio(Houten, 'DJ3');
   Wait(0$45);

   if not isTest then
      PrepareAlfaAttack(north_arr, [5, 6, 7][Difficulty]);
   end;

if GetBType(un) = b_warehouse and GetSide(un) in [1, 4] then
   RaiseSailEvent(104);

if MREG_SidesList[GetSide(un)] then
begin
LogEvent('UnitDestroyed [side ' & GetSide(un) & '; id: ' & un & '; type: ' & GetType(un) & ']');

if un in MCF_Get(GetSide(un), [f_type, unit_human]) then
   begin
   if MCF_HasClass(un) then
      case MCF_HasClass(un) of
      1: MCF_RemoveFromClass(GetSide(un), 'ToArm', un);
      2: MCF_RemoveFromClass(GetSide(un), 'ToDep', un);
      3: MCF_RemoveFromClass(GetSide(un), 'ToFac', un);
      4: MCF_RemoveFromClass(GetSide(un), 'ToLab', un);
      end;
   end;


if un in MREG_DefVeh[GetSide(un)] then
   begin
   MREG_DefVeh := Remove(MREG_DefVeh, un, false);
   MCS_AddVehicle(GetSide(un), [GetChassis(un), GetEngine(un), GetControl(un), GetWeapon(un)]);
   end;

if un in MREG_Attackers[GetSide(un)] then
   MREG_Attackers := Remove(MREG_Attackers, un, false);
end;

End;

On LeaveBuilding(b, un) do
if MREG_SidesList[GetSide(un)] then
begin
if un in MREG_ToBunker[GetSide(un)] and GetBType(b) in [b_bunker, b_breastwork] then
   begin
   MREG_ToBunker := Remove(MREG_ToBunker, b, false);
   MREG_ToBunker := Remove(MREG_ToBunker, un, false);

   if MREG_ToBunker[GetSide(un)] = '' then
      MREG_ToBunker := Replace2(MREG_ToBunker, GetSide(un), 1, 0);
   end;

if GetBType(b) in b_control_tower then
   SetTag(un, 0);
End;

On UnitGoesToRed(un) do
if MREG_SidesList[GetSide(un)] then
begin
if GetControl(un) = control_remote then
   ComUnlink(un);
End;



On EvacuateVehicle(driver, vehicle, v, c) do
if MREG_SidesList[GetSide(driver)] then
begin
if GetWeapon(vehicle) in ar_control_tower then
   SetTag(driver, 0);

{
if driver in MCF_Tag(GetSide(driver), 36, []) then
   begin
   SetTag(driver, 0);
   if MCF_Get(GetSide(driver), [f_btype, b_factory]) then
      ComEnterUnit(driver, MCF_Get(GetSide(driver), [f_btype, b_factory])[1]);
   end;
}
End;

On WeaponPlaced(building, factory) Do
var weapon, x, y;
begin
weapon := GetBWeapon(building);
x := GetX(building);
y := GetY(building);
MREG_TurretWeapon := MC_RegistryDelete(MREG_TurretWeapon, GetSide(building), weapon, [x, y]);
End;

Export unreachableList;
On DestinationUnreachable(unit) Do
begin
if not unit in unreachableList then
   begin
   unreachableList := Insert(unreachableList, unreachableList+1, unit);
   LogEvent('DestinationUnrechable. [unit: ' & unit & ']');
   end;
End;

On UnitDestroyed_Extra(un, killerSide, killerUnit) do
begin
SOS_UnitExtraDestroyed(un, killerSide, killerUnit);
End;

On Command(cmd) do
begin
SOS_Command(cmd);
End;


