// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 63 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 24
// Difficulty := 2 else
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 2
  21: ST_TO_ADDR
  22: GO 37
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_OWVAR 67
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// PrepareAlliance ;
  37: CALL 79 0 0
// PrepareRussian ;
  41: CALL 446 0 0
// Action ;
  45: CALL 2370 0 0
// if debug then
  49: LD_EXP 1
  53: IFFALSE 62
// FogOff ( 7 ) ;
  55: LD_INT 7
  57: PPUSH
  58: CALL_OW 344
// end ;
  62: END
// export debug ; export function Init ; begin
  63: LD_INT 0
  65: PPUSH
// debug := false ;
  66: LD_ADDR_EXP 1
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// end ; end_of_file
  74: LD_VAR 0 1
  78: RET
// export allianceHack , allianceMechanic ; export function PrepareAlliance ; var i , tmp ; begin
  79: LD_INT 0
  81: PPUSH
  82: PPUSH
  83: PPUSH
// tmp := [ ] ;
  84: LD_ADDR_VAR 0 3
  88: PUSH
  89: EMPTY
  90: ST_TO_ADDR
// uc_side := 7 ;
  91: LD_ADDR_OWVAR 20
  95: PUSH
  96: LD_INT 7
  98: ST_TO_ADDR
// uc_nation := 1 ;
  99: LD_ADDR_OWVAR 21
 103: PUSH
 104: LD_INT 1
 106: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_hack , 100 ) ;
 107: LD_INT 5
 109: PPUSH
 110: LD_INT 3
 112: PPUSH
 113: LD_INT 3
 115: PPUSH
 116: LD_INT 99
 118: PPUSH
 119: LD_INT 100
 121: PPUSH
 122: CALL 7796 0 5
// allianceHack := CreateVehicle ;
 126: LD_ADDR_EXP 2
 130: PUSH
 131: CALL_OW 45
 135: ST_TO_ADDR
// PlaceUnitArea ( allianceHack , startSpawnArea , false ) ;
 136: LD_EXP 2
 140: PPUSH
 141: LD_INT 7
 143: PPUSH
 144: LD_INT 0
 146: PPUSH
 147: CALL_OW 49
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_double_laser , 100 ) ;
 151: LD_INT 5
 153: PPUSH
 154: LD_INT 3
 156: PPUSH
 157: LD_INT 3
 159: PPUSH
 160: LD_INT 10
 162: PPUSH
 163: LD_INT 100
 165: PPUSH
 166: CALL 7796 0 5
// for i := 1 to 2 do
 170: LD_ADDR_VAR 0 2
 174: PUSH
 175: DOUBLE
 176: LD_INT 1
 178: DEC
 179: ST_TO_ADDR
 180: LD_INT 2
 182: PUSH
 183: FOR_TO
 184: IFFALSE 203
// PlaceUnitArea ( CreateVehicle , startSpawnArea , false ) ;
 186: CALL_OW 45
 190: PPUSH
 191: LD_INT 7
 193: PPUSH
 194: LD_INT 0
 196: PPUSH
 197: CALL_OW 49
 201: GO 183
 203: POP
 204: POP
// uc_side := 4 ;
 205: LD_ADDR_OWVAR 20
 209: PUSH
 210: LD_INT 4
 212: ST_TO_ADDR
// uc_nation := 1 ;
 213: LD_ADDR_OWVAR 21
 217: PUSH
 218: LD_INT 1
 220: ST_TO_ADDR
// PrepareMechanic ( sex_male , 9 ) ;
 221: LD_INT 1
 223: PPUSH
 224: LD_INT 9
 226: PPUSH
 227: CALL_OW 383
// allianceMechanic := CreateHuman ;
 231: LD_ADDR_EXP 3
 235: PUSH
 236: CALL_OW 44
 240: ST_TO_ADDR
// PlaceHumanInUnit ( allianceMechanic , ruDep2 ) ;
 241: LD_EXP 3
 245: PPUSH
 246: LD_INT 96
 248: PPUSH
 249: CALL_OW 52
// end ;
 253: LD_VAR 0 1
 257: RET
// export function PrepareReinforcements ( ) ; var i , un ; begin
 258: LD_INT 0
 260: PPUSH
 261: PPUSH
 262: PPUSH
// uc_side := 7 ;
 263: LD_ADDR_OWVAR 20
 267: PUSH
 268: LD_INT 7
 270: ST_TO_ADDR
// uc_nation := 1 ;
 271: LD_ADDR_OWVAR 21
 275: PUSH
 276: LD_INT 1
 278: ST_TO_ADDR
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 279: LD_ADDR_VAR 0 2
 283: PUSH
 284: DOUBLE
 285: LD_INT 1
 287: DEC
 288: ST_TO_ADDR
 289: LD_INT 3
 291: PUSH
 292: LD_INT 2
 294: PUSH
 295: LD_INT 2
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: LIST
 302: PUSH
 303: LD_OWVAR 67
 307: ARRAY
 308: PUSH
 309: FOR_TO
 310: IFFALSE 380
// begin PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_rocket_launcher , 100 ) ;
 312: LD_INT 5
 314: PPUSH
 315: LD_INT 3
 317: PPUSH
 318: LD_INT 3
 320: PPUSH
 321: LD_INT 7
 323: PPUSH
 324: LD_INT 100
 326: PPUSH
 327: CALL 7796 0 5
// un := CreateVehicle ;
 331: LD_ADDR_VAR 0 3
 335: PUSH
 336: CALL_OW 45
 340: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 341: LD_VAR 0 3
 345: PPUSH
 346: LD_INT 7
 348: PPUSH
 349: LD_INT 0
 351: PPUSH
 352: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 356: LD_VAR 0 3
 360: PPUSH
 361: LD_INT 67
 363: PPUSH
 364: LD_INT 95
 366: PPUSH
 367: CALL_OW 111
// wait ( 0 0$2 ) ;
 371: LD_INT 70
 373: PPUSH
 374: CALL_OW 67
// end ;
 378: GO 309
 380: POP
 381: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_radar , 100 ) ;
 382: LD_INT 5
 384: PPUSH
 385: LD_INT 3
 387: PPUSH
 388: LD_INT 3
 390: PPUSH
 391: LD_INT 11
 393: PPUSH
 394: LD_INT 100
 396: PPUSH
 397: CALL 7796 0 5
// un := CreateVehicle ;
 401: LD_ADDR_VAR 0 3
 405: PUSH
 406: CALL_OW 45
 410: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 411: LD_VAR 0 3
 415: PPUSH
 416: LD_INT 7
 418: PPUSH
 419: LD_INT 0
 421: PPUSH
 422: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 426: LD_VAR 0 3
 430: PPUSH
 431: LD_INT 67
 433: PPUSH
 434: LD_INT 95
 436: PPUSH
 437: CALL_OW 111
// end ; end_of_file
 441: LD_VAR 0 1
 445: RET
// export ruGuard1 , ruGuard2 , ruGuard3 , ruForces , ruEng ; export function PrepareRussian ; var i , un ; begin
 446: LD_INT 0
 448: PPUSH
 449: PPUSH
 450: PPUSH
// uc_side := 3 ;
 451: LD_ADDR_OWVAR 20
 455: PUSH
 456: LD_INT 3
 458: ST_TO_ADDR
// uc_nation := 3 ;
 459: LD_ADDR_OWVAR 21
 463: PUSH
 464: LD_INT 3
 466: ST_TO_ADDR
// SetResourceType ( GetBase ( ruDep ) , mat_cans , 50000 ) ;
 467: LD_INT 14
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_INT 1
 477: PPUSH
 478: LD_INT 50000
 480: PPUSH
 481: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , mat_siberit , 5000 ) ;
 485: LD_INT 14
 487: PPUSH
 488: CALL_OW 274
 492: PPUSH
 493: LD_INT 3
 495: PPUSH
 496: LD_INT 5000
 498: PPUSH
 499: CALL_OW 277
// TeleportExit ( ruTeleport , 132 , 89 ) ;
 503: LD_INT 45
 505: PPUSH
 506: LD_INT 132
 508: PPUSH
 509: LD_INT 89
 511: PPUSH
 512: CALL_OW 243
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
 516: LD_ADDR_VAR 0 2
 520: PUSH
 521: LD_INT 21
 523: PUSH
 524: LD_INT 3
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PPUSH
 531: CALL_OW 69
 535: PUSH
 536: FOR_IN
 537: IFFALSE 570
// SetBLevel ( i , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
 539: LD_VAR 0 2
 543: PPUSH
 544: LD_INT 6
 546: PUSH
 547: LD_INT 8
 549: PUSH
 550: LD_INT 10
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: LD_OWVAR 67
 562: ARRAY
 563: PPUSH
 564: CALL_OW 241
 568: GO 536
 570: POP
 571: POP
// for i := 1 to 4 do
 572: LD_ADDR_VAR 0 2
 576: PUSH
 577: DOUBLE
 578: LD_INT 1
 580: DEC
 581: ST_TO_ADDR
 582: LD_INT 4
 584: PUSH
 585: FOR_TO
 586: IFFALSE 612
// begin PrepareMechanic ( false , 9 ) ;
 588: LD_INT 0
 590: PPUSH
 591: LD_INT 9
 593: PPUSH
 594: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFac ) ;
 598: CALL_OW 44
 602: PPUSH
 603: LD_INT 50
 605: PPUSH
 606: CALL_OW 52
// end ;
 610: GO 585
 612: POP
 613: POP
// ruGuard1 := [ ] ;
 614: LD_ADDR_EXP 4
 618: PUSH
 619: EMPTY
 620: ST_TO_ADDR
// ruGuard2 := [ ] ;
 621: LD_ADDR_EXP 5
 625: PUSH
 626: EMPTY
 627: ST_TO_ADDR
// ruGuard3 := [ ] ;
 628: LD_ADDR_EXP 6
 632: PUSH
 633: EMPTY
 634: ST_TO_ADDR
// ruForces := [ ] ;
 635: LD_ADDR_EXP 7
 639: PUSH
 640: EMPTY
 641: ST_TO_ADDR
// ruEng := [ ] ;
 642: LD_ADDR_EXP 8
 646: PUSH
 647: EMPTY
 648: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 4
 661: PUSH
 662: LD_INT 5
 664: PUSH
 665: LD_INT 6
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: LIST
 672: PUSH
 673: LD_OWVAR 67
 677: ARRAY
 678: PUSH
 679: FOR_TO
 680: IFFALSE 736
// begin PrepareEngineer ( false , 8 ) ;
 682: LD_INT 0
 684: PPUSH
 685: LD_INT 8
 687: PPUSH
 688: CALL_OW 382
// un := CreateHuman ;
 692: LD_ADDR_VAR 0 3
 696: PUSH
 697: CALL_OW 44
 701: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruDep ) ;
 702: LD_VAR 0 3
 706: PPUSH
 707: LD_INT 14
 709: PPUSH
 710: CALL_OW 52
// ruEng := Join ( ruEng , un ) ;
 714: LD_ADDR_EXP 8
 718: PUSH
 719: LD_EXP 8
 723: PPUSH
 724: LD_VAR 0 3
 728: PPUSH
 729: CALL 40976 0 2
 733: ST_TO_ADDR
// end ;
 734: GO 679
 736: POP
 737: POP
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
 738: LD_ADDR_VAR 0 2
 742: PUSH
 743: DOUBLE
 744: LD_INT 1
 746: DEC
 747: ST_TO_ADDR
 748: LD_INT 5
 750: PUSH
 751: LD_INT 6
 753: PUSH
 754: LD_INT 7
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: LIST
 761: PUSH
 762: LD_OWVAR 67
 766: ARRAY
 767: PUSH
 768: FOR_TO
 769: IFFALSE 879
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 771: LD_INT 24
 773: PPUSH
 774: LD_INT 3
 776: PPUSH
 777: LD_INT 3
 779: PPUSH
 780: LD_INT 46
 782: PUSH
 783: LD_INT 45
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: PUSH
 790: LD_VAR 0 2
 794: PUSH
 795: LD_INT 2
 797: MOD
 798: PUSH
 799: LD_INT 1
 801: PLUS
 802: ARRAY
 803: PPUSH
 804: LD_INT 100
 806: PPUSH
 807: CALL 7796 0 5
// un := CreateVehicle ;
 811: LD_ADDR_VAR 0 3
 815: PUSH
 816: CALL_OW 45
 820: ST_TO_ADDR
// SetDir ( un , 3 ) ;
 821: LD_VAR 0 3
 825: PPUSH
 826: LD_INT 3
 828: PPUSH
 829: CALL_OW 233
// PlaceUnitArea ( un , riverGuard1 , false ) ;
 833: LD_VAR 0 3
 837: PPUSH
 838: LD_INT 4
 840: PPUSH
 841: LD_INT 0
 843: PPUSH
 844: CALL_OW 49
// ruGuard1 := Replace ( ruGuard1 , ruGuard1 + 1 , un ) ;
 848: LD_ADDR_EXP 4
 852: PUSH
 853: LD_EXP 4
 857: PPUSH
 858: LD_EXP 4
 862: PUSH
 863: LD_INT 1
 865: PLUS
 866: PPUSH
 867: LD_VAR 0 3
 871: PPUSH
 872: CALL_OW 1
 876: ST_TO_ADDR
// end ;
 877: GO 768
 879: POP
 880: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
 881: LD_ADDR_VAR 0 2
 885: PUSH
 886: DOUBLE
 887: LD_INT 1
 889: DEC
 890: ST_TO_ADDR
 891: LD_INT 4
 893: PUSH
 894: LD_INT 4
 896: PUSH
 897: LD_INT 5
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PUSH
 905: LD_OWVAR 67
 909: ARRAY
 910: PUSH
 911: FOR_TO
 912: IFFALSE 1022
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 914: LD_INT 24
 916: PPUSH
 917: LD_INT 3
 919: PPUSH
 920: LD_INT 3
 922: PPUSH
 923: LD_INT 46
 925: PUSH
 926: LD_INT 45
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: PUSH
 933: LD_VAR 0 2
 937: PUSH
 938: LD_INT 2
 940: MOD
 941: PUSH
 942: LD_INT 1
 944: PLUS
 945: ARRAY
 946: PPUSH
 947: LD_INT 100
 949: PPUSH
 950: CALL 7796 0 5
// un := CreateVehicle ;
 954: LD_ADDR_VAR 0 3
 958: PUSH
 959: CALL_OW 45
 963: ST_TO_ADDR
// SetDir ( un , 4 ) ;
 964: LD_VAR 0 3
 968: PPUSH
 969: LD_INT 4
 971: PPUSH
 972: CALL_OW 233
// PlaceUnitArea ( un , riverGuard2 , false ) ;
 976: LD_VAR 0 3
 980: PPUSH
 981: LD_INT 5
 983: PPUSH
 984: LD_INT 0
 986: PPUSH
 987: CALL_OW 49
// ruGuard2 := Replace ( ruGuard2 , ruGuard2 + 1 , un ) ;
 991: LD_ADDR_EXP 5
 995: PUSH
 996: LD_EXP 5
1000: PPUSH
1001: LD_EXP 5
1005: PUSH
1006: LD_INT 1
1008: PLUS
1009: PPUSH
1010: LD_VAR 0 3
1014: PPUSH
1015: CALL_OW 1
1019: ST_TO_ADDR
// end ;
1020: GO 911
1022: POP
1023: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
1024: LD_ADDR_VAR 0 2
1028: PUSH
1029: DOUBLE
1030: LD_INT 1
1032: DEC
1033: ST_TO_ADDR
1034: LD_INT 4
1036: PUSH
1037: LD_INT 4
1039: PUSH
1040: LD_INT 5
1042: PUSH
1043: EMPTY
1044: LIST
1045: LIST
1046: LIST
1047: PUSH
1048: LD_OWVAR 67
1052: ARRAY
1053: PUSH
1054: FOR_TO
1055: IFFALSE 1165
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
1057: LD_INT 24
1059: PPUSH
1060: LD_INT 3
1062: PPUSH
1063: LD_INT 3
1065: PPUSH
1066: LD_INT 46
1068: PUSH
1069: LD_INT 45
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: PUSH
1076: LD_VAR 0 2
1080: PUSH
1081: LD_INT 2
1083: MOD
1084: PUSH
1085: LD_INT 1
1087: PLUS
1088: ARRAY
1089: PPUSH
1090: LD_INT 100
1092: PPUSH
1093: CALL 7796 0 5
// un := CreateVehicle ;
1097: LD_ADDR_VAR 0 3
1101: PUSH
1102: CALL_OW 45
1106: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1107: LD_VAR 0 3
1111: PPUSH
1112: LD_INT 1
1114: PPUSH
1115: CALL_OW 233
// PlaceUnitArea ( un , riverGuard3 , false ) ;
1119: LD_VAR 0 3
1123: PPUSH
1124: LD_INT 6
1126: PPUSH
1127: LD_INT 0
1129: PPUSH
1130: CALL_OW 49
// ruGuard3 := Replace ( ruGuard3 , ruGuard3 + 1 , un ) ;
1134: LD_ADDR_EXP 6
1138: PUSH
1139: LD_EXP 6
1143: PPUSH
1144: LD_EXP 6
1148: PUSH
1149: LD_INT 1
1151: PLUS
1152: PPUSH
1153: LD_VAR 0 3
1157: PPUSH
1158: CALL_OW 1
1162: ST_TO_ADDR
// end ;
1163: GO 1054
1165: POP
1166: POP
// for i := 1 to 2 do
1167: LD_ADDR_VAR 0 2
1171: PUSH
1172: DOUBLE
1173: LD_INT 1
1175: DEC
1176: ST_TO_ADDR
1177: LD_INT 2
1179: PUSH
1180: FOR_TO
1181: IFFALSE 1229
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
1183: LD_INT 22
1185: PPUSH
1186: LD_INT 3
1188: PPUSH
1189: LD_INT 3
1191: PPUSH
1192: LD_INT 52
1194: PPUSH
1195: LD_INT 100
1197: PPUSH
1198: CALL 7796 0 5
// un := CreateVehicle ;
1202: LD_ADDR_VAR 0 3
1206: PUSH
1207: CALL_OW 45
1211: ST_TO_ADDR
// PlaceUnitArea ( un , ruCraneArea , false ) ;
1212: LD_VAR 0 3
1216: PPUSH
1217: LD_INT 9
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: CALL_OW 49
// end ;
1227: GO 1180
1229: POP
1230: POP
// for i := 1 to 3 do
1231: LD_ADDR_VAR 0 2
1235: PUSH
1236: DOUBLE
1237: LD_INT 1
1239: DEC
1240: ST_TO_ADDR
1241: LD_INT 3
1243: PUSH
1244: FOR_TO
1245: IFFALSE 1282
// begin PrepareHuman ( false , class_bazooker , 8 ) ;
1247: LD_INT 0
1249: PPUSH
1250: LD_INT 9
1252: PPUSH
1253: LD_INT 8
1255: PPUSH
1256: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 91 , 83 ) ) ;
1260: CALL_OW 44
1264: PPUSH
1265: LD_INT 91
1267: PPUSH
1268: LD_INT 83
1270: PPUSH
1271: CALL_OW 428
1275: PPUSH
1276: CALL_OW 52
// end ;
1280: GO 1244
1282: POP
1283: POP
// end ;
1284: LD_VAR 0 1
1288: RET
// every 0 0$1 trigger ruEng do var i , tmp ;
1289: LD_EXP 8
1293: IFFALSE 1489
1295: GO 1297
1297: DISABLE
1298: LD_INT 0
1300: PPUSH
1301: PPUSH
// begin enable ;
1302: ENABLE
// tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1303: LD_ADDR_VAR 0 2
1307: PUSH
1308: LD_INT 10
1310: PPUSH
1311: LD_INT 21
1313: PUSH
1314: LD_INT 3
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PUSH
1321: LD_INT 3
1323: PUSH
1324: LD_INT 24
1326: PUSH
1327: LD_INT 1000
1329: PUSH
1330: EMPTY
1331: LIST
1332: LIST
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: PPUSH
1342: CALL_OW 70
1346: ST_TO_ADDR
// if not tmp and UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) then
1347: LD_VAR 0 2
1351: NOT
1352: IFFALSE 1378
1354: PUSH
1355: LD_EXP 8
1359: PPUSH
1360: LD_INT 3
1362: PUSH
1363: LD_INT 54
1365: PUSH
1366: EMPTY
1367: LIST
1368: PUSH
1369: EMPTY
1370: LIST
1371: LIST
1372: PPUSH
1373: CALL_OW 72
1377: AND
1378: IFFALSE 1410
// ComEnterUnit ( UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) , ruDep ) ;
1380: LD_EXP 8
1384: PPUSH
1385: LD_INT 3
1387: PUSH
1388: LD_INT 54
1390: PUSH
1391: EMPTY
1392: LIST
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: PPUSH
1398: CALL_OW 72
1402: PPUSH
1403: LD_INT 14
1405: PPUSH
1406: CALL_OW 120
// if tmp then
1410: LD_VAR 0 2
1414: IFFALSE 1489
// begin for i in ruEng do
1416: LD_ADDR_VAR 0 1
1420: PUSH
1421: LD_EXP 8
1425: PUSH
1426: FOR_IN
1427: IFFALSE 1487
// if IsInUnit ( i ) then
1429: LD_VAR 0 1
1433: PPUSH
1434: CALL_OW 310
1438: IFFALSE 1451
// ComExitBuilding ( i ) else
1440: LD_VAR 0 1
1444: PPUSH
1445: CALL_OW 122
1449: GO 1485
// ComRepairBuilding ( i , SortByDistanceUnit ( i , tmp , true , true ) [ 1 ] ) ;
1451: LD_VAR 0 1
1455: PPUSH
1456: LD_VAR 0 1
1460: PPUSH
1461: LD_VAR 0 2
1465: PPUSH
1466: LD_INT 1
1468: PPUSH
1469: LD_INT 1
1471: PPUSH
1472: CALL 8353 0 4
1476: PUSH
1477: LD_INT 1
1479: ARRAY
1480: PPUSH
1481: CALL_OW 130
1485: GO 1426
1487: POP
1488: POP
// end ; end ;
1489: PPOPN 2
1491: END
// every 4 4$00 trigger not ruForces do var i , tmp ;
1492: LD_EXP 7
1496: NOT
1497: IFFALSE 1563
1499: GO 1501
1501: DISABLE
1502: LD_INT 0
1504: PPUSH
1505: PPUSH
// begin enable ;
1506: ENABLE
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
1507: LD_ADDR_VAR 0 1
1511: PUSH
1512: DOUBLE
1513: LD_INT 1
1515: DEC
1516: ST_TO_ADDR
1517: LD_INT 4
1519: PUSH
1520: LD_INT 5
1522: PUSH
1523: LD_INT 6
1525: PUSH
1526: EMPTY
1527: LIST
1528: LIST
1529: LIST
1530: PUSH
1531: LD_OWVAR 67
1535: ARRAY
1536: PUSH
1537: FOR_TO
1538: IFFALSE 1561
// AddComConstruct ( ruFac , ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ) ;
1540: LD_INT 50
1542: PPUSH
1543: LD_INT 24
1545: PPUSH
1546: LD_INT 3
1548: PPUSH
1549: LD_INT 3
1551: PPUSH
1552: LD_INT 46
1554: PPUSH
1555: CALL_OW 185
1559: GO 1537
1561: POP
1562: POP
// end ;
1563: PPOPN 2
1565: END
// every 0 0$30 trigger ruForces >= [ 4 , 5 , 6 ] [ Difficulty ] do var i , tmp ;
1566: LD_EXP 7
1570: PUSH
1571: LD_INT 4
1573: PUSH
1574: LD_INT 5
1576: PUSH
1577: LD_INT 6
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: LIST
1584: PUSH
1585: LD_OWVAR 67
1589: ARRAY
1590: GREATEREQUAL
1591: IFFALSE 1744
1593: GO 1595
1595: DISABLE
1596: LD_INT 0
1598: PPUSH
1599: PPUSH
// begin enable ;
1600: ENABLE
// tmp := ruForces ;
1601: LD_ADDR_VAR 0 2
1605: PUSH
1606: LD_EXP 7
1610: ST_TO_ADDR
// if rand ( 0 , 1 ) then
1611: LD_INT 0
1613: PPUSH
1614: LD_INT 1
1616: PPUSH
1617: CALL_OW 12
1621: IFFALSE 1642
// begin ComEnterUnit ( tmp , ruTeleport ) ;
1623: LD_VAR 0 2
1627: PPUSH
1628: LD_INT 45
1630: PPUSH
1631: CALL_OW 120
// wait ( 0 0$20 ) ;
1635: LD_INT 700
1637: PPUSH
1638: CALL_OW 67
// end ; ruForces := [ ] ;
1642: LD_ADDR_EXP 7
1646: PUSH
1647: EMPTY
1648: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1649: LD_INT 35
1651: PPUSH
1652: CALL_OW 67
// for i in tmp do
1656: LD_ADDR_VAR 0 1
1660: PUSH
1661: LD_VAR 0 2
1665: PUSH
1666: FOR_IN
1667: IFFALSE 1735
// if not IsOk ( i ) then
1669: LD_VAR 0 1
1673: PPUSH
1674: CALL_OW 302
1678: NOT
1679: IFFALSE 1699
// tmp := tmp diff i else
1681: LD_ADDR_VAR 0 2
1685: PUSH
1686: LD_VAR 0 2
1690: PUSH
1691: LD_VAR 0 1
1695: DIFF
1696: ST_TO_ADDR
1697: GO 1733
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
1699: LD_VAR 0 1
1703: PPUSH
1704: LD_INT 81
1706: PUSH
1707: LD_INT 3
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: PPUSH
1714: CALL_OW 69
1718: PPUSH
1719: LD_VAR 0 1
1723: PPUSH
1724: CALL_OW 74
1728: PPUSH
1729: CALL_OW 115
1733: GO 1666
1735: POP
1736: POP
// until not tmp ;
1737: LD_VAR 0 2
1741: NOT
1742: IFFALSE 1649
// end ;
1744: PPOPN 2
1746: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 62 , 83 , 8 ] ] ) do
1747: LD_INT 22
1749: PUSH
1750: LD_INT 7
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 92
1759: PUSH
1760: LD_INT 62
1762: PUSH
1763: LD_INT 83
1765: PUSH
1766: LD_INT 8
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: PPUSH
1779: CALL_OW 69
1783: IFFALSE 1803
1785: GO 1787
1787: DISABLE
// ComAgressiveMove ( ruGuard1 , 69 , 100 ) ;
1788: LD_EXP 4
1792: PPUSH
1793: LD_INT 69
1795: PPUSH
1796: LD_INT 100
1798: PPUSH
1799: CALL_OW 114
1803: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 85 , 89 , 8 ] ] ) do
1804: LD_INT 22
1806: PUSH
1807: LD_INT 7
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 92
1816: PUSH
1817: LD_INT 85
1819: PUSH
1820: LD_INT 89
1822: PUSH
1823: LD_INT 8
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PPUSH
1836: CALL_OW 69
1840: IFFALSE 1860
1842: GO 1844
1844: DISABLE
// ComAgressiveMove ( ruGuard2 , 72 , 88 ) ;
1845: LD_EXP 5
1849: PPUSH
1850: LD_INT 72
1852: PPUSH
1853: LD_INT 88
1855: PPUSH
1856: CALL_OW 114
1860: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 89 , 13 , 8 ] ] ) do
1861: LD_INT 22
1863: PUSH
1864: LD_INT 7
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: PUSH
1871: LD_INT 92
1873: PUSH
1874: LD_INT 89
1876: PUSH
1877: LD_INT 13
1879: PUSH
1880: LD_INT 8
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: PPUSH
1893: CALL_OW 69
1897: IFFALSE 1917
1899: GO 1901
1901: DISABLE
// ComAgressiveMove ( ruGuard3 , 107 , 26 ) ; end_of_file
1902: LD_EXP 6
1906: PPUSH
1907: LD_INT 107
1909: PPUSH
1910: LD_INT 26
1912: PPUSH
1913: CALL_OW 114
1917: END
// every 6 6$00 do var i , un , tmp ;
1918: GO 1920
1920: DISABLE
1921: LD_INT 0
1923: PPUSH
1924: PPUSH
1925: PPUSH
// begin enable ;
1926: ENABLE
// tmp := [ ] ;
1927: LD_ADDR_VAR 0 3
1931: PUSH
1932: EMPTY
1933: ST_TO_ADDR
// for i := 1 to 8 do
1934: LD_ADDR_VAR 0 1
1938: PUSH
1939: DOUBLE
1940: LD_INT 1
1942: DEC
1943: ST_TO_ADDR
1944: LD_INT 8
1946: PUSH
1947: FOR_TO
1948: IFFALSE 2091
// begin uc_side := 1 ;
1950: LD_ADDR_OWVAR 20
1954: PUSH
1955: LD_INT 1
1957: ST_TO_ADDR
// uc_nation := 1 ;
1958: LD_ADDR_OWVAR 21
1962: PUSH
1963: LD_INT 1
1965: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_laser , us_rocket_launcher ] [ i mod 3 + 1 ] , 100 ) ;
1966: LD_INT 5
1968: PPUSH
1969: LD_INT 3
1971: PPUSH
1972: LD_INT 3
1974: PPUSH
1975: LD_INT 6
1977: PUSH
1978: LD_INT 9
1980: PUSH
1981: LD_INT 7
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_VAR 0 1
1993: PUSH
1994: LD_INT 3
1996: MOD
1997: PUSH
1998: LD_INT 1
2000: PLUS
2001: ARRAY
2002: PPUSH
2003: LD_INT 100
2005: PPUSH
2006: CALL 7796 0 5
// un := CreateVehicle ;
2010: LD_ADDR_VAR 0 2
2014: PUSH
2015: CALL_OW 45
2019: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
2020: LD_ADDR_VAR 0 3
2024: PUSH
2025: LD_VAR 0 3
2029: PPUSH
2030: LD_VAR 0 2
2034: PPUSH
2035: CALL 40976 0 2
2039: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2040: LD_VAR 0 2
2044: PPUSH
2045: LD_INT 1
2047: PPUSH
2048: CALL_OW 233
// PlaceUnitArea ( un , americanSpawnArea , false ) ;
2052: LD_VAR 0 2
2056: PPUSH
2057: LD_INT 11
2059: PPUSH
2060: LD_INT 0
2062: PPUSH
2063: CALL_OW 49
// ComMoveXY ( un , 16 , 13 ) ;
2067: LD_VAR 0 2
2071: PPUSH
2072: LD_INT 16
2074: PPUSH
2075: LD_INT 13
2077: PPUSH
2078: CALL_OW 111
// wait ( 0 0$1 ) ;
2082: LD_INT 35
2084: PPUSH
2085: CALL_OW 67
// end ;
2089: GO 1947
2091: POP
2092: POP
// repeat wait ( 0 0$1 ) ;
2093: LD_INT 35
2095: PPUSH
2096: CALL_OW 67
// for i in tmp do
2100: LD_ADDR_VAR 0 1
2104: PUSH
2105: LD_VAR 0 3
2109: PUSH
2110: FOR_IN
2111: IFFALSE 2179
// if not IsOk ( i ) then
2113: LD_VAR 0 1
2117: PPUSH
2118: CALL_OW 302
2122: NOT
2123: IFFALSE 2143
// tmp := tmp diff i else
2125: LD_ADDR_VAR 0 3
2129: PUSH
2130: LD_VAR 0 3
2134: PUSH
2135: LD_VAR 0 1
2139: DIFF
2140: ST_TO_ADDR
2141: GO 2177
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
2143: LD_VAR 0 1
2147: PPUSH
2148: LD_INT 81
2150: PUSH
2151: LD_INT 1
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: PPUSH
2158: CALL_OW 69
2162: PPUSH
2163: LD_VAR 0 1
2167: PPUSH
2168: CALL_OW 74
2172: PPUSH
2173: CALL_OW 115
2177: GO 2110
2179: POP
2180: POP
// until not tmp ;
2181: LD_VAR 0 3
2185: NOT
2186: IFFALSE 2093
// end ;
2188: PPOPN 3
2190: END
// every 7 7$00 trigger not HexInfo ( 149 , 106 ) do var un ;
2191: LD_INT 149
2193: PPUSH
2194: LD_INT 106
2196: PPUSH
2197: CALL_OW 428
2201: NOT
2202: IFFALSE 2367
2204: GO 2206
2206: DISABLE
2207: LD_INT 0
2209: PPUSH
// begin enable ;
2210: ENABLE
// uc_side := 1 ;
2211: LD_ADDR_OWVAR 20
2215: PUSH
2216: LD_INT 1
2218: ST_TO_ADDR
// uc_nation := 1 ;
2219: LD_ADDR_OWVAR 21
2223: PUSH
2224: LD_INT 1
2226: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2227: LD_INT 5
2229: PPUSH
2230: LD_INT 3
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: LD_INT 12
2238: PPUSH
2239: LD_INT 100
2241: PPUSH
2242: CALL 7796 0 5
// un := CreateVehicle ;
2246: LD_ADDR_VAR 0 1
2250: PUSH
2251: CALL_OW 45
2255: ST_TO_ADDR
// PlaceUnitXY ( un , 149 , 106 , false ) ;
2256: LD_VAR 0 1
2260: PPUSH
2261: LD_INT 149
2263: PPUSH
2264: LD_INT 106
2266: PPUSH
2267: LD_INT 0
2269: PPUSH
2270: CALL_OW 48
// SetCargo ( un , mat_siberit , 100 ) ;
2274: LD_VAR 0 1
2278: PPUSH
2279: LD_INT 3
2281: PPUSH
2282: LD_INT 100
2284: PPUSH
2285: CALL_OW 290
// ComMoveXY ( un , 105 , 2 ) ;
2289: LD_VAR 0 1
2293: PPUSH
2294: LD_INT 105
2296: PPUSH
2297: LD_INT 2
2299: PPUSH
2300: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2304: LD_INT 35
2306: PPUSH
2307: CALL_OW 67
// if IsDead ( un ) or GetSide ( un ) <> 1 then
2311: LD_VAR 0 1
2315: PPUSH
2316: CALL_OW 301
2320: IFTRUE 2337
2322: PUSH
2323: LD_VAR 0 1
2327: PPUSH
2328: CALL_OW 255
2332: PUSH
2333: LD_INT 1
2335: NONEQUAL
2336: OR
2337: IFFALSE 2341
// exit ;
2339: GO 2367
// until IsAt ( un , 105 , 2 ) ;
2341: LD_VAR 0 1
2345: PPUSH
2346: LD_INT 105
2348: PPUSH
2349: LD_INT 2
2351: PPUSH
2352: CALL_OW 307
2356: IFFALSE 2304
// RemoveUnit ( un ) ;
2358: LD_VAR 0 1
2362: PPUSH
2363: CALL_OW 64
// end ; end_of_file
2367: PPOPN 1
2369: END
// export function Action ; begin
2370: LD_INT 0
2372: PPUSH
// CenterNowOnUnits ( allianceHack ) ;
2373: LD_EXP 2
2377: PPUSH
2378: CALL_OW 87
// ChangeMissionObjectives ( WT-Objectives-1 ) ;
2382: LD_STRING WT-Objectives-1
2384: PPUSH
2385: CALL_OW 337
// end ;
2389: LD_VAR 0 1
2393: RET
// every 0 0$2 trigger See ( 7 , allianceMechanic ) do
2394: LD_INT 7
2396: PPUSH
2397: LD_EXP 3
2401: PPUSH
2402: CALL_OW 292
2406: IFFALSE 2423
2408: GO 2410
2410: DISABLE
// SetSide ( allianceMechanic , 7 ) ;
2411: LD_EXP 3
2415: PPUSH
2416: LD_INT 7
2418: PPUSH
2419: CALL_OW 235
2423: END
// every 2 2$00 do
2424: GO 2426
2426: DISABLE
// PrepareReinforcements ( ) ;
2427: CALL 258 0 0
2431: END
// every 0 0$1 trigger not FindArtifact ( 2 ) do
2432: LD_INT 2
2434: PPUSH
2435: CALL_OW 469
2439: NOT
2440: IFFALSE 2455
2442: GO 2444
2444: DISABLE
// SetAreaMapShow ( endMissionArea , 1 ) ;
2445: LD_INT 8
2447: PPUSH
2448: LD_INT 1
2450: PPUSH
2451: CALL_OW 424
2455: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and not FindArtifact ( 2 ) do
2456: LD_INT 8
2458: PPUSH
2459: LD_INT 2
2461: PUSH
2462: LD_INT 34
2464: PUSH
2465: LD_INT 12
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PUSH
2472: LD_INT 34
2474: PUSH
2475: LD_INT 51
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: LIST
2486: PPUSH
2487: CALL_OW 70
2491: IFFALSE 2503
2493: PUSH
2494: LD_INT 2
2496: PPUSH
2497: CALL_OW 469
2501: NOT
2502: AND
2503: IFFALSE 2633
2505: GO 2507
2507: DISABLE
// begin AddMedal ( WT-med-1 , 1 ) ;
2508: LD_STRING WT-med-1
2510: PPUSH
2511: LD_INT 1
2513: PPUSH
2514: CALL_OW 101
// AddMedal ( WT-med-2 , [ - 1 , 1 ] [ ( IsOk ( allianceMechanic ) * ( GetSide ( allianceMechanic ) ) = 7 ) + 1 ] ) ;
2518: LD_STRING WT-med-2
2520: PPUSH
2521: LD_INT 1
2523: NEG
2524: PUSH
2525: LD_INT 1
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: PUSH
2532: LD_EXP 3
2536: PPUSH
2537: CALL_OW 302
2541: PUSH
2542: LD_EXP 3
2546: PPUSH
2547: CALL_OW 255
2551: MUL
2552: PUSH
2553: LD_INT 7
2555: EQUAL
2556: PUSH
2557: LD_INT 1
2559: PLUS
2560: ARRAY
2561: PPUSH
2562: CALL_OW 101
// AddMedal ( WT-med-3 , [ - 1 , 1 ] [ ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , us_double_laser ] ] ) >= 2 ) + 1 ] ) ;
2566: LD_STRING WT-med-3
2568: PPUSH
2569: LD_INT 1
2571: NEG
2572: PUSH
2573: LD_INT 1
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PUSH
2580: LD_INT 22
2582: PUSH
2583: LD_INT 7
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: PUSH
2590: LD_INT 34
2592: PUSH
2593: LD_INT 10
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PPUSH
2604: CALL_OW 69
2608: PUSH
2609: LD_INT 2
2611: GREATEREQUAL
2612: PUSH
2613: LD_INT 1
2615: PLUS
2616: ARRAY
2617: PPUSH
2618: CALL_OW 101
// GiveMedals ( WT-Main ) ;
2622: LD_STRING WT-Main
2624: PPUSH
2625: CALL_OW 102
// YouWin ;
2629: CALL_OW 103
// end ; end_of_file
2633: END
// on UnitGoesToRed ( un ) do begin if un in ruForces then
2634: LD_VAR 0 1
2638: PUSH
2639: LD_EXP 7
2643: IN
2644: IFFALSE 2662
// ruForces := ruForces diff un ;
2646: LD_ADDR_EXP 7
2650: PUSH
2651: LD_EXP 7
2655: PUSH
2656: LD_VAR 0 1
2660: DIFF
2661: ST_TO_ADDR
// end ;
2662: PPOPN 1
2664: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2665: LD_VAR 0 1
2669: PPUSH
2670: CALL 46330 0 1
// if un = allianceHack then
2674: LD_VAR 0 1
2678: PUSH
2679: LD_EXP 2
2683: EQUAL
2684: IFFALSE 2693
// YouLost ( WT-HackLost ) ;
2686: LD_STRING WT-HackLost
2688: PPUSH
2689: CALL_OW 104
// if un in ruForces then
2693: LD_VAR 0 1
2697: PUSH
2698: LD_EXP 7
2702: IN
2703: IFFALSE 2721
// ruForces := ruForces diff un ;
2705: LD_ADDR_EXP 7
2709: PUSH
2710: LD_EXP 7
2714: PUSH
2715: LD_VAR 0 1
2719: DIFF
2720: ST_TO_ADDR
// end ;
2721: PPOPN 1
2723: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
2724: LD_VAR 0 1
2728: PPUSH
2729: LD_VAR 0 2
2733: PPUSH
2734: CALL 46388 0 2
// if GetSide ( vehicle ) = 3 then
2738: LD_VAR 0 1
2742: PPUSH
2743: CALL_OW 255
2747: PUSH
2748: LD_INT 3
2750: EQUAL
2751: IFFALSE 2773
// ruForces := Join ( ruForces , vehicle ) ;
2753: LD_ADDR_EXP 7
2757: PUSH
2758: LD_EXP 7
2762: PPUSH
2763: LD_VAR 0 1
2767: PPUSH
2768: CALL 40976 0 2
2772: ST_TO_ADDR
// end ; end_of_file
2773: PPOPN 2
2775: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2776: LD_INT 0
2778: PPUSH
2779: PPUSH
// if exist_mode then
2780: LD_VAR 0 2
2784: IFFALSE 2830
// begin unit := CreateCharacter ( prefix & ident ) ;
2786: LD_ADDR_VAR 0 5
2790: PUSH
2791: LD_VAR 0 3
2795: PUSH
2796: LD_VAR 0 1
2800: STR
2801: PPUSH
2802: CALL_OW 34
2806: ST_TO_ADDR
// if unit then
2807: LD_VAR 0 5
2811: IFFALSE 2828
// DeleteCharacters ( prefix & ident ) ;
2813: LD_VAR 0 3
2817: PUSH
2818: LD_VAR 0 1
2822: STR
2823: PPUSH
2824: CALL_OW 40
// end else
2828: GO 2845
// unit := NewCharacter ( ident ) ;
2830: LD_ADDR_VAR 0 5
2834: PUSH
2835: LD_VAR 0 1
2839: PPUSH
2840: CALL_OW 25
2844: ST_TO_ADDR
// result := unit ;
2845: LD_ADDR_VAR 0 4
2849: PUSH
2850: LD_VAR 0 5
2854: ST_TO_ADDR
// end ;
2855: LD_VAR 0 4
2859: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
2860: LD_INT 0
2862: PPUSH
2863: PPUSH
// if exist_mode then
2864: LD_VAR 0 2
2868: IFFALSE 2893
// unit := CreateCharacter ( prefix & ident ) else
2870: LD_ADDR_VAR 0 5
2874: PUSH
2875: LD_VAR 0 3
2879: PUSH
2880: LD_VAR 0 1
2884: STR
2885: PPUSH
2886: CALL_OW 34
2890: ST_TO_ADDR
2891: GO 2908
// unit := NewCharacter ( ident ) ;
2893: LD_ADDR_VAR 0 5
2897: PUSH
2898: LD_VAR 0 1
2902: PPUSH
2903: CALL_OW 25
2907: ST_TO_ADDR
// result := unit ;
2908: LD_ADDR_VAR 0 4
2912: PUSH
2913: LD_VAR 0 5
2917: ST_TO_ADDR
// end ;
2918: LD_VAR 0 4
2922: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2923: LD_INT 0
2925: PPUSH
2926: PPUSH
// if not side or not nation then
2927: LD_VAR 0 1
2931: NOT
2932: IFTRUE 2941
2934: PUSH
2935: LD_VAR 0 2
2939: NOT
2940: OR
2941: IFFALSE 2945
// exit ;
2943: GO 3739
// case nation of nation_american :
2945: LD_VAR 0 2
2949: PUSH
2950: LD_INT 1
2952: DOUBLE
2953: EQUAL
2954: IFTRUE 2958
2956: GO 3180
2958: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
2959: LD_ADDR_VAR 0 4
2963: PUSH
2964: LD_INT 35
2966: PUSH
2967: LD_INT 45
2969: PUSH
2970: LD_INT 46
2972: PUSH
2973: LD_INT 47
2975: PUSH
2976: LD_INT 82
2978: PUSH
2979: LD_INT 83
2981: PUSH
2982: LD_INT 84
2984: PUSH
2985: LD_INT 85
2987: PUSH
2988: LD_INT 86
2990: PUSH
2991: LD_INT 1
2993: PUSH
2994: LD_INT 2
2996: PUSH
2997: LD_INT 6
2999: PUSH
3000: LD_INT 15
3002: PUSH
3003: LD_INT 16
3005: PUSH
3006: LD_INT 7
3008: PUSH
3009: LD_INT 12
3011: PUSH
3012: LD_INT 13
3014: PUSH
3015: LD_INT 10
3017: PUSH
3018: LD_INT 14
3020: PUSH
3021: LD_INT 20
3023: PUSH
3024: LD_INT 21
3026: PUSH
3027: LD_INT 22
3029: PUSH
3030: LD_INT 25
3032: PUSH
3033: LD_INT 32
3035: PUSH
3036: LD_INT 27
3038: PUSH
3039: LD_INT 36
3041: PUSH
3042: LD_INT 69
3044: PUSH
3045: LD_INT 39
3047: PUSH
3048: LD_INT 34
3050: PUSH
3051: LD_INT 40
3053: PUSH
3054: LD_INT 48
3056: PUSH
3057: LD_INT 49
3059: PUSH
3060: LD_INT 50
3062: PUSH
3063: LD_INT 51
3065: PUSH
3066: LD_INT 52
3068: PUSH
3069: LD_INT 53
3071: PUSH
3072: LD_INT 54
3074: PUSH
3075: LD_INT 55
3077: PUSH
3078: LD_INT 56
3080: PUSH
3081: LD_INT 57
3083: PUSH
3084: LD_INT 58
3086: PUSH
3087: LD_INT 59
3089: PUSH
3090: LD_INT 60
3092: PUSH
3093: LD_INT 61
3095: PUSH
3096: LD_INT 62
3098: PUSH
3099: LD_INT 80
3101: PUSH
3102: LD_INT 82
3104: PUSH
3105: LD_INT 83
3107: PUSH
3108: LD_INT 84
3110: PUSH
3111: LD_INT 85
3113: PUSH
3114: LD_INT 86
3116: PUSH
3117: LD_INT 90
3119: PUSH
3120: LD_INT 93
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: LIST
3152: LIST
3153: LIST
3154: LIST
3155: LIST
3156: LIST
3157: LIST
3158: LIST
3159: LIST
3160: LIST
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: ST_TO_ADDR
3178: GO 3661
3180: LD_INT 2
3182: DOUBLE
3183: EQUAL
3184: IFTRUE 3188
3186: GO 3422
3188: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
3189: LD_ADDR_VAR 0 4
3193: PUSH
3194: LD_INT 35
3196: PUSH
3197: LD_INT 45
3199: PUSH
3200: LD_INT 46
3202: PUSH
3203: LD_INT 47
3205: PUSH
3206: LD_INT 82
3208: PUSH
3209: LD_INT 83
3211: PUSH
3212: LD_INT 84
3214: PUSH
3215: LD_INT 85
3217: PUSH
3218: LD_INT 87
3220: PUSH
3221: LD_INT 70
3223: PUSH
3224: LD_INT 1
3226: PUSH
3227: LD_INT 11
3229: PUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 4
3235: PUSH
3236: LD_INT 5
3238: PUSH
3239: LD_INT 6
3241: PUSH
3242: LD_INT 15
3244: PUSH
3245: LD_INT 18
3247: PUSH
3248: LD_INT 7
3250: PUSH
3251: LD_INT 17
3253: PUSH
3254: LD_INT 8
3256: PUSH
3257: LD_INT 20
3259: PUSH
3260: LD_INT 21
3262: PUSH
3263: LD_INT 22
3265: PUSH
3266: LD_INT 72
3268: PUSH
3269: LD_INT 26
3271: PUSH
3272: LD_INT 69
3274: PUSH
3275: LD_INT 39
3277: PUSH
3278: LD_INT 40
3280: PUSH
3281: LD_INT 41
3283: PUSH
3284: LD_INT 42
3286: PUSH
3287: LD_INT 43
3289: PUSH
3290: LD_INT 48
3292: PUSH
3293: LD_INT 49
3295: PUSH
3296: LD_INT 50
3298: PUSH
3299: LD_INT 51
3301: PUSH
3302: LD_INT 52
3304: PUSH
3305: LD_INT 53
3307: PUSH
3308: LD_INT 54
3310: PUSH
3311: LD_INT 55
3313: PUSH
3314: LD_INT 56
3316: PUSH
3317: LD_INT 60
3319: PUSH
3320: LD_INT 61
3322: PUSH
3323: LD_INT 62
3325: PUSH
3326: LD_INT 66
3328: PUSH
3329: LD_INT 67
3331: PUSH
3332: LD_INT 68
3334: PUSH
3335: LD_INT 81
3337: PUSH
3338: LD_INT 82
3340: PUSH
3341: LD_INT 83
3343: PUSH
3344: LD_INT 84
3346: PUSH
3347: LD_INT 85
3349: PUSH
3350: LD_INT 87
3352: PUSH
3353: LD_INT 88
3355: PUSH
3356: LD_INT 92
3358: PUSH
3359: LD_INT 94
3361: PUSH
3362: EMPTY
3363: LIST
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: LIST
3370: LIST
3371: LIST
3372: LIST
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: ST_TO_ADDR
3420: GO 3661
3422: LD_INT 3
3424: DOUBLE
3425: EQUAL
3426: IFTRUE 3430
3428: GO 3660
3430: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
3431: LD_ADDR_VAR 0 4
3435: PUSH
3436: LD_INT 46
3438: PUSH
3439: LD_INT 47
3441: PUSH
3442: LD_INT 1
3444: PUSH
3445: LD_INT 2
3447: PUSH
3448: LD_INT 82
3450: PUSH
3451: LD_INT 83
3453: PUSH
3454: LD_INT 84
3456: PUSH
3457: LD_INT 85
3459: PUSH
3460: LD_INT 86
3462: PUSH
3463: LD_INT 11
3465: PUSH
3466: LD_INT 9
3468: PUSH
3469: LD_INT 20
3471: PUSH
3472: LD_INT 19
3474: PUSH
3475: LD_INT 21
3477: PUSH
3478: LD_INT 24
3480: PUSH
3481: LD_INT 22
3483: PUSH
3484: LD_INT 25
3486: PUSH
3487: LD_INT 28
3489: PUSH
3490: LD_INT 29
3492: PUSH
3493: LD_INT 30
3495: PUSH
3496: LD_INT 31
3498: PUSH
3499: LD_INT 37
3501: PUSH
3502: LD_INT 38
3504: PUSH
3505: LD_INT 32
3507: PUSH
3508: LD_INT 27
3510: PUSH
3511: LD_INT 33
3513: PUSH
3514: LD_INT 69
3516: PUSH
3517: LD_INT 39
3519: PUSH
3520: LD_INT 34
3522: PUSH
3523: LD_INT 40
3525: PUSH
3526: LD_INT 71
3528: PUSH
3529: LD_INT 23
3531: PUSH
3532: LD_INT 44
3534: PUSH
3535: LD_INT 48
3537: PUSH
3538: LD_INT 49
3540: PUSH
3541: LD_INT 50
3543: PUSH
3544: LD_INT 51
3546: PUSH
3547: LD_INT 52
3549: PUSH
3550: LD_INT 53
3552: PUSH
3553: LD_INT 54
3555: PUSH
3556: LD_INT 55
3558: PUSH
3559: LD_INT 56
3561: PUSH
3562: LD_INT 57
3564: PUSH
3565: LD_INT 58
3567: PUSH
3568: LD_INT 59
3570: PUSH
3571: LD_INT 63
3573: PUSH
3574: LD_INT 64
3576: PUSH
3577: LD_INT 65
3579: PUSH
3580: LD_INT 82
3582: PUSH
3583: LD_INT 83
3585: PUSH
3586: LD_INT 84
3588: PUSH
3589: LD_INT 85
3591: PUSH
3592: LD_INT 86
3594: PUSH
3595: LD_INT 89
3597: PUSH
3598: LD_INT 91
3600: PUSH
3601: EMPTY
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: ST_TO_ADDR
3658: GO 3661
3660: POP
// if state > - 1 and state < 3 then
3661: LD_VAR 0 3
3665: PUSH
3666: LD_INT 1
3668: NEG
3669: GREATER
3670: IFFALSE 3682
3672: PUSH
3673: LD_VAR 0 3
3677: PUSH
3678: LD_INT 3
3680: LESS
3681: AND
3682: IFFALSE 3739
// for i in result do
3684: LD_ADDR_VAR 0 5
3688: PUSH
3689: LD_VAR 0 4
3693: PUSH
3694: FOR_IN
3695: IFFALSE 3737
// if GetTech ( i , side ) <> state then
3697: LD_VAR 0 5
3701: PPUSH
3702: LD_VAR 0 1
3706: PPUSH
3707: CALL_OW 321
3711: PUSH
3712: LD_VAR 0 3
3716: NONEQUAL
3717: IFFALSE 3735
// result := result diff i ;
3719: LD_ADDR_VAR 0 4
3723: PUSH
3724: LD_VAR 0 4
3728: PUSH
3729: LD_VAR 0 5
3733: DIFF
3734: ST_TO_ADDR
3735: GO 3694
3737: POP
3738: POP
// end ;
3739: LD_VAR 0 4
3743: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3744: LD_INT 0
3746: PPUSH
3747: PPUSH
3748: PPUSH
// result := true ;
3749: LD_ADDR_VAR 0 3
3753: PUSH
3754: LD_INT 1
3756: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3757: LD_ADDR_VAR 0 5
3761: PUSH
3762: LD_VAR 0 2
3766: PPUSH
3767: CALL_OW 480
3771: ST_TO_ADDR
// if not tmp then
3772: LD_VAR 0 5
3776: NOT
3777: IFFALSE 3781
// exit ;
3779: GO 3830
// for i in tmp do
3781: LD_ADDR_VAR 0 4
3785: PUSH
3786: LD_VAR 0 5
3790: PUSH
3791: FOR_IN
3792: IFFALSE 3828
// if GetTech ( i , side ) <> state_researched then
3794: LD_VAR 0 4
3798: PPUSH
3799: LD_VAR 0 1
3803: PPUSH
3804: CALL_OW 321
3808: PUSH
3809: LD_INT 2
3811: NONEQUAL
3812: IFFALSE 3826
// begin result := false ;
3814: LD_ADDR_VAR 0 3
3818: PUSH
3819: LD_INT 0
3821: ST_TO_ADDR
// exit ;
3822: POP
3823: POP
3824: GO 3830
// end ;
3826: GO 3791
3828: POP
3829: POP
// end ;
3830: LD_VAR 0 3
3834: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3835: LD_INT 0
3837: PPUSH
3838: PPUSH
3839: PPUSH
3840: PPUSH
3841: PPUSH
3842: PPUSH
3843: PPUSH
3844: PPUSH
3845: PPUSH
3846: PPUSH
3847: PPUSH
3848: PPUSH
3849: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3850: LD_VAR 0 1
3854: NOT
3855: IFTRUE 3872
3857: PUSH
3858: LD_VAR 0 1
3862: PPUSH
3863: CALL_OW 257
3867: PUSH
3868: LD_INT 9
3870: NONEQUAL
3871: OR
3872: IFFALSE 3876
// exit ;
3874: GO 4455
// side := GetSide ( unit ) ;
3876: LD_ADDR_VAR 0 9
3880: PUSH
3881: LD_VAR 0 1
3885: PPUSH
3886: CALL_OW 255
3890: ST_TO_ADDR
// tech_space := tech_spacanom ;
3891: LD_ADDR_VAR 0 12
3895: PUSH
3896: LD_INT 29
3898: ST_TO_ADDR
// tech_time := tech_taurad ;
3899: LD_ADDR_VAR 0 13
3903: PUSH
3904: LD_INT 28
3906: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3907: LD_ADDR_VAR 0 11
3911: PUSH
3912: LD_VAR 0 1
3916: PPUSH
3917: CALL_OW 310
3921: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3922: LD_VAR 0 11
3926: PPUSH
3927: CALL_OW 247
3931: PUSH
3932: LD_INT 2
3934: EQUAL
3935: IFFALSE 3939
// exit ;
3937: GO 4455
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3939: LD_ADDR_VAR 0 8
3943: PUSH
3944: LD_INT 81
3946: PUSH
3947: LD_VAR 0 9
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: PUSH
3956: LD_INT 3
3958: PUSH
3959: LD_INT 21
3961: PUSH
3962: LD_INT 3
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PUSH
3969: EMPTY
3970: LIST
3971: LIST
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: PPUSH
3977: CALL_OW 69
3981: ST_TO_ADDR
// if not tmp then
3982: LD_VAR 0 8
3986: NOT
3987: IFFALSE 3991
// exit ;
3989: GO 4455
// if in_unit then
3991: LD_VAR 0 11
3995: IFFALSE 4019
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3997: LD_ADDR_VAR 0 10
4001: PUSH
4002: LD_VAR 0 8
4006: PPUSH
4007: LD_VAR 0 11
4011: PPUSH
4012: CALL_OW 74
4016: ST_TO_ADDR
4017: GO 4039
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4019: LD_ADDR_VAR 0 10
4023: PUSH
4024: LD_VAR 0 8
4028: PPUSH
4029: LD_VAR 0 1
4033: PPUSH
4034: CALL_OW 74
4038: ST_TO_ADDR
// if not enemy then
4039: LD_VAR 0 10
4043: NOT
4044: IFFALSE 4048
// exit ;
4046: GO 4455
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4048: LD_VAR 0 11
4052: IFFALSE 4074
4054: PUSH
4055: LD_VAR 0 11
4059: PPUSH
4060: LD_VAR 0 10
4064: PPUSH
4065: CALL_OW 296
4069: PUSH
4070: LD_INT 13
4072: GREATER
4073: AND
4074: IFTRUE 4096
4076: PUSH
4077: LD_VAR 0 1
4081: PPUSH
4082: LD_VAR 0 10
4086: PPUSH
4087: CALL_OW 296
4091: PUSH
4092: LD_INT 12
4094: GREATER
4095: OR
4096: IFFALSE 4100
// exit ;
4098: GO 4455
// missile := [ 1 ] ;
4100: LD_ADDR_VAR 0 14
4104: PUSH
4105: LD_INT 1
4107: PUSH
4108: EMPTY
4109: LIST
4110: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4111: LD_VAR 0 9
4115: PPUSH
4116: LD_VAR 0 12
4120: PPUSH
4121: CALL_OW 325
4125: IFFALSE 4154
// missile := Replace ( missile , missile + 1 , 2 ) ;
4127: LD_ADDR_VAR 0 14
4131: PUSH
4132: LD_VAR 0 14
4136: PPUSH
4137: LD_VAR 0 14
4141: PUSH
4142: LD_INT 1
4144: PLUS
4145: PPUSH
4146: LD_INT 2
4148: PPUSH
4149: CALL_OW 1
4153: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4154: LD_VAR 0 9
4158: PPUSH
4159: LD_VAR 0 13
4163: PPUSH
4164: CALL_OW 325
4168: IFFALSE 4192
4170: PUSH
4171: LD_VAR 0 10
4175: PPUSH
4176: CALL_OW 255
4180: PPUSH
4181: LD_VAR 0 13
4185: PPUSH
4186: CALL_OW 325
4190: NOT
4191: AND
4192: IFFALSE 4221
// missile := Replace ( missile , missile + 1 , 3 ) ;
4194: LD_ADDR_VAR 0 14
4198: PUSH
4199: LD_VAR 0 14
4203: PPUSH
4204: LD_VAR 0 14
4208: PUSH
4209: LD_INT 1
4211: PLUS
4212: PPUSH
4213: LD_INT 3
4215: PPUSH
4216: CALL_OW 1
4220: ST_TO_ADDR
// if missile < 2 then
4221: LD_VAR 0 14
4225: PUSH
4226: LD_INT 2
4228: LESS
4229: IFFALSE 4233
// exit ;
4231: GO 4455
// x := GetX ( enemy ) ;
4233: LD_ADDR_VAR 0 4
4237: PUSH
4238: LD_VAR 0 10
4242: PPUSH
4243: CALL_OW 250
4247: ST_TO_ADDR
// y := GetY ( enemy ) ;
4248: LD_ADDR_VAR 0 5
4252: PUSH
4253: LD_VAR 0 10
4257: PPUSH
4258: CALL_OW 251
4262: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4263: LD_ADDR_VAR 0 6
4267: PUSH
4268: LD_VAR 0 4
4272: PUSH
4273: LD_INT 1
4275: NEG
4276: PPUSH
4277: LD_INT 1
4279: PPUSH
4280: CALL_OW 12
4284: PLUS
4285: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4286: LD_ADDR_VAR 0 7
4290: PUSH
4291: LD_VAR 0 5
4295: PUSH
4296: LD_INT 1
4298: NEG
4299: PPUSH
4300: LD_INT 1
4302: PPUSH
4303: CALL_OW 12
4307: PLUS
4308: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4309: LD_VAR 0 6
4313: PPUSH
4314: LD_VAR 0 7
4318: PPUSH
4319: CALL_OW 488
4323: NOT
4324: IFFALSE 4346
// begin _x := x ;
4326: LD_ADDR_VAR 0 6
4330: PUSH
4331: LD_VAR 0 4
4335: ST_TO_ADDR
// _y := y ;
4336: LD_ADDR_VAR 0 7
4340: PUSH
4341: LD_VAR 0 5
4345: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4346: LD_ADDR_VAR 0 3
4350: PUSH
4351: LD_INT 1
4353: PPUSH
4354: LD_VAR 0 14
4358: PPUSH
4359: CALL_OW 12
4363: ST_TO_ADDR
// case i of 1 :
4364: LD_VAR 0 3
4368: PUSH
4369: LD_INT 1
4371: DOUBLE
4372: EQUAL
4373: IFTRUE 4377
4375: GO 4394
4377: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4378: LD_VAR 0 1
4382: PPUSH
4383: LD_VAR 0 10
4387: PPUSH
4388: CALL_OW 115
4392: GO 4455
4394: LD_INT 2
4396: DOUBLE
4397: EQUAL
4398: IFTRUE 4402
4400: GO 4424
4402: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4403: LD_VAR 0 1
4407: PPUSH
4408: LD_VAR 0 6
4412: PPUSH
4413: LD_VAR 0 7
4417: PPUSH
4418: CALL_OW 153
4422: GO 4455
4424: LD_INT 3
4426: DOUBLE
4427: EQUAL
4428: IFTRUE 4432
4430: GO 4454
4432: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4433: LD_VAR 0 1
4437: PPUSH
4438: LD_VAR 0 6
4442: PPUSH
4443: LD_VAR 0 7
4447: PPUSH
4448: CALL_OW 154
4452: GO 4455
4454: POP
// end ;
4455: LD_VAR 0 2
4459: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4460: LD_INT 0
4462: PPUSH
4463: PPUSH
4464: PPUSH
4465: PPUSH
4466: PPUSH
4467: PPUSH
// if not unit or not building then
4468: LD_VAR 0 1
4472: NOT
4473: IFTRUE 4482
4475: PUSH
4476: LD_VAR 0 2
4480: NOT
4481: OR
4482: IFFALSE 4486
// exit ;
4484: GO 4644
// x := GetX ( building ) ;
4486: LD_ADDR_VAR 0 5
4490: PUSH
4491: LD_VAR 0 2
4495: PPUSH
4496: CALL_OW 250
4500: ST_TO_ADDR
// y := GetY ( building ) ;
4501: LD_ADDR_VAR 0 6
4505: PUSH
4506: LD_VAR 0 2
4510: PPUSH
4511: CALL_OW 251
4515: ST_TO_ADDR
// for i := 0 to 5 do
4516: LD_ADDR_VAR 0 4
4520: PUSH
4521: DOUBLE
4522: LD_INT 0
4524: DEC
4525: ST_TO_ADDR
4526: LD_INT 5
4528: PUSH
4529: FOR_TO
4530: IFFALSE 4642
// begin _x := ShiftX ( x , i , 3 ) ;
4532: LD_ADDR_VAR 0 7
4536: PUSH
4537: LD_VAR 0 5
4541: PPUSH
4542: LD_VAR 0 4
4546: PPUSH
4547: LD_INT 3
4549: PPUSH
4550: CALL_OW 272
4554: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4555: LD_ADDR_VAR 0 8
4559: PUSH
4560: LD_VAR 0 6
4564: PPUSH
4565: LD_VAR 0 4
4569: PPUSH
4570: LD_INT 3
4572: PPUSH
4573: CALL_OW 273
4577: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4578: LD_VAR 0 7
4582: PPUSH
4583: LD_VAR 0 8
4587: PPUSH
4588: CALL_OW 488
4592: NOT
4593: IFFALSE 4597
// continue ;
4595: GO 4529
// if HexInfo ( _x , _y ) = 0 then
4597: LD_VAR 0 7
4601: PPUSH
4602: LD_VAR 0 8
4606: PPUSH
4607: CALL_OW 428
4611: PUSH
4612: LD_INT 0
4614: EQUAL
4615: IFFALSE 4640
// begin ComMoveXY ( unit , _x , _y ) ;
4617: LD_VAR 0 1
4621: PPUSH
4622: LD_VAR 0 7
4626: PPUSH
4627: LD_VAR 0 8
4631: PPUSH
4632: CALL_OW 111
// exit ;
4636: POP
4637: POP
4638: GO 4644
// end ; end ;
4640: GO 4529
4642: POP
4643: POP
// end ;
4644: LD_VAR 0 3
4648: RET
// export function ScanBase ( side , base_area ) ; begin
4649: LD_INT 0
4651: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4652: LD_ADDR_VAR 0 3
4656: PUSH
4657: LD_VAR 0 2
4661: PPUSH
4662: LD_INT 81
4664: PUSH
4665: LD_VAR 0 1
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: PPUSH
4674: CALL_OW 70
4678: ST_TO_ADDR
// end ;
4679: LD_VAR 0 3
4683: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4684: LD_INT 0
4686: PPUSH
4687: PPUSH
4688: PPUSH
4689: PPUSH
// result := false ;
4690: LD_ADDR_VAR 0 2
4694: PUSH
4695: LD_INT 0
4697: ST_TO_ADDR
// side := GetSide ( unit ) ;
4698: LD_ADDR_VAR 0 3
4702: PUSH
4703: LD_VAR 0 1
4707: PPUSH
4708: CALL_OW 255
4712: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4713: LD_ADDR_VAR 0 4
4717: PUSH
4718: LD_VAR 0 1
4722: PPUSH
4723: CALL_OW 248
4727: ST_TO_ADDR
// case nat of 1 :
4728: LD_VAR 0 4
4732: PUSH
4733: LD_INT 1
4735: DOUBLE
4736: EQUAL
4737: IFTRUE 4741
4739: GO 4752
4741: POP
// tech := tech_lassight ; 2 :
4742: LD_ADDR_VAR 0 5
4746: PUSH
4747: LD_INT 12
4749: ST_TO_ADDR
4750: GO 4791
4752: LD_INT 2
4754: DOUBLE
4755: EQUAL
4756: IFTRUE 4760
4758: GO 4771
4760: POP
// tech := tech_mortar ; 3 :
4761: LD_ADDR_VAR 0 5
4765: PUSH
4766: LD_INT 41
4768: ST_TO_ADDR
4769: GO 4791
4771: LD_INT 3
4773: DOUBLE
4774: EQUAL
4775: IFTRUE 4779
4777: GO 4790
4779: POP
// tech := tech_bazooka ; end ;
4780: LD_ADDR_VAR 0 5
4784: PUSH
4785: LD_INT 44
4787: ST_TO_ADDR
4788: GO 4791
4790: POP
// if Researched ( side , tech ) then
4791: LD_VAR 0 3
4795: PPUSH
4796: LD_VAR 0 5
4800: PPUSH
4801: CALL_OW 325
4805: IFFALSE 4832
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4807: LD_ADDR_VAR 0 2
4811: PUSH
4812: LD_INT 5
4814: PUSH
4815: LD_INT 8
4817: PUSH
4818: LD_INT 9
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: LIST
4825: PUSH
4826: LD_VAR 0 4
4830: ARRAY
4831: ST_TO_ADDR
// end ;
4832: LD_VAR 0 2
4836: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4837: LD_INT 0
4839: PPUSH
4840: PPUSH
4841: PPUSH
// if not mines then
4842: LD_VAR 0 2
4846: NOT
4847: IFFALSE 4851
// exit ;
4849: GO 4995
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4851: LD_ADDR_VAR 0 5
4855: PUSH
4856: LD_INT 81
4858: PUSH
4859: LD_VAR 0 1
4863: PUSH
4864: EMPTY
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 3
4870: PUSH
4871: LD_INT 21
4873: PUSH
4874: LD_INT 3
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PPUSH
4889: CALL_OW 69
4893: ST_TO_ADDR
// for i in mines do
4894: LD_ADDR_VAR 0 4
4898: PUSH
4899: LD_VAR 0 2
4903: PUSH
4904: FOR_IN
4905: IFFALSE 4993
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4907: LD_VAR 0 4
4911: PUSH
4912: LD_INT 1
4914: ARRAY
4915: PPUSH
4916: LD_VAR 0 4
4920: PUSH
4921: LD_INT 2
4923: ARRAY
4924: PPUSH
4925: CALL_OW 458
4929: NOT
4930: IFFALSE 4934
// continue ;
4932: GO 4904
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4934: LD_VAR 0 4
4938: PUSH
4939: LD_INT 1
4941: ARRAY
4942: PPUSH
4943: LD_VAR 0 4
4947: PUSH
4948: LD_INT 2
4950: ARRAY
4951: PPUSH
4952: CALL_OW 428
4956: PUSH
4957: LD_VAR 0 5
4961: IN
4962: IFFALSE 4991
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4964: LD_VAR 0 4
4968: PUSH
4969: LD_INT 1
4971: ARRAY
4972: PPUSH
4973: LD_VAR 0 4
4977: PUSH
4978: LD_INT 2
4980: ARRAY
4981: PPUSH
4982: LD_VAR 0 1
4986: PPUSH
4987: CALL_OW 456
// end ;
4991: GO 4904
4993: POP
4994: POP
// end ;
4995: LD_VAR 0 3
4999: RET
// export function Count ( array ) ; begin
5000: LD_INT 0
5002: PPUSH
// result := array + 0 ;
5003: LD_ADDR_VAR 0 2
5007: PUSH
5008: LD_VAR 0 1
5012: PUSH
5013: LD_INT 0
5015: PLUS
5016: ST_TO_ADDR
// end ;
5017: LD_VAR 0 2
5021: RET
// export function IsEmpty ( building ) ; begin
5022: LD_INT 0
5024: PPUSH
// if not building then
5025: LD_VAR 0 1
5029: NOT
5030: IFFALSE 5034
// exit ;
5032: GO 5077
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5034: LD_ADDR_VAR 0 2
5038: PUSH
5039: LD_VAR 0 1
5043: PUSH
5044: LD_INT 22
5046: PUSH
5047: LD_VAR 0 1
5051: PPUSH
5052: CALL_OW 255
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: LD_INT 58
5063: PUSH
5064: EMPTY
5065: LIST
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PPUSH
5071: CALL_OW 69
5075: IN
5076: ST_TO_ADDR
// end ;
5077: LD_VAR 0 2
5081: RET
// export function IsNotFull ( building ) ; var places ; begin
5082: LD_INT 0
5084: PPUSH
5085: PPUSH
// if not building then
5086: LD_VAR 0 1
5090: NOT
5091: IFFALSE 5095
// exit ;
5093: GO 5123
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5095: LD_ADDR_VAR 0 2
5099: PUSH
5100: LD_VAR 0 1
5104: PPUSH
5105: LD_INT 3
5107: PUSH
5108: LD_INT 62
5110: PUSH
5111: EMPTY
5112: LIST
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PPUSH
5118: CALL_OW 72
5122: ST_TO_ADDR
// end ;
5123: LD_VAR 0 2
5127: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5128: LD_INT 0
5130: PPUSH
5131: PPUSH
5132: PPUSH
5133: PPUSH
// tmp := [ ] ;
5134: LD_ADDR_VAR 0 3
5138: PUSH
5139: EMPTY
5140: ST_TO_ADDR
// list := [ ] ;
5141: LD_ADDR_VAR 0 5
5145: PUSH
5146: EMPTY
5147: ST_TO_ADDR
// for i = 16 to 25 do
5148: LD_ADDR_VAR 0 4
5152: PUSH
5153: DOUBLE
5154: LD_INT 16
5156: DEC
5157: ST_TO_ADDR
5158: LD_INT 25
5160: PUSH
5161: FOR_TO
5162: IFFALSE 5235
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5164: LD_ADDR_VAR 0 3
5168: PUSH
5169: LD_VAR 0 3
5173: PUSH
5174: LD_INT 22
5176: PUSH
5177: LD_VAR 0 1
5181: PPUSH
5182: CALL_OW 255
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: PUSH
5191: LD_INT 91
5193: PUSH
5194: LD_VAR 0 1
5198: PUSH
5199: LD_INT 6
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: LIST
5206: PUSH
5207: LD_INT 30
5209: PUSH
5210: LD_VAR 0 4
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: LIST
5223: PUSH
5224: EMPTY
5225: LIST
5226: PPUSH
5227: CALL_OW 69
5231: ADD
5232: ST_TO_ADDR
5233: GO 5161
5235: POP
5236: POP
// for i = 1 to tmp do
5237: LD_ADDR_VAR 0 4
5241: PUSH
5242: DOUBLE
5243: LD_INT 1
5245: DEC
5246: ST_TO_ADDR
5247: LD_VAR 0 3
5251: PUSH
5252: FOR_TO
5253: IFFALSE 5341
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5255: LD_ADDR_VAR 0 5
5259: PUSH
5260: LD_VAR 0 5
5264: PUSH
5265: LD_VAR 0 3
5269: PUSH
5270: LD_VAR 0 4
5274: ARRAY
5275: PPUSH
5276: CALL_OW 266
5280: PUSH
5281: LD_VAR 0 3
5285: PUSH
5286: LD_VAR 0 4
5290: ARRAY
5291: PPUSH
5292: CALL_OW 250
5296: PUSH
5297: LD_VAR 0 3
5301: PUSH
5302: LD_VAR 0 4
5306: ARRAY
5307: PPUSH
5308: CALL_OW 251
5312: PUSH
5313: LD_VAR 0 3
5317: PUSH
5318: LD_VAR 0 4
5322: ARRAY
5323: PPUSH
5324: CALL_OW 254
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: PUSH
5335: EMPTY
5336: LIST
5337: ADD
5338: ST_TO_ADDR
5339: GO 5252
5341: POP
5342: POP
// result := list ;
5343: LD_ADDR_VAR 0 2
5347: PUSH
5348: LD_VAR 0 5
5352: ST_TO_ADDR
// end ;
5353: LD_VAR 0 2
5357: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5358: LD_INT 0
5360: PPUSH
5361: PPUSH
5362: PPUSH
5363: PPUSH
5364: PPUSH
5365: PPUSH
5366: PPUSH
// if not factory then
5367: LD_VAR 0 1
5371: NOT
5372: IFFALSE 5376
// exit ;
5374: GO 5979
// if control = control_apeman then
5376: LD_VAR 0 4
5380: PUSH
5381: LD_INT 5
5383: EQUAL
5384: IFFALSE 5493
// begin tmp := UnitsInside ( factory ) ;
5386: LD_ADDR_VAR 0 8
5390: PUSH
5391: LD_VAR 0 1
5395: PPUSH
5396: CALL_OW 313
5400: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5401: LD_VAR 0 8
5405: PPUSH
5406: LD_INT 25
5408: PUSH
5409: LD_INT 12
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: PPUSH
5416: CALL_OW 72
5420: NOT
5421: IFFALSE 5431
// control := control_manual ;
5423: LD_ADDR_VAR 0 4
5427: PUSH
5428: LD_INT 1
5430: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5431: LD_ADDR_VAR 0 8
5435: PUSH
5436: LD_VAR 0 1
5440: PPUSH
5441: CALL 5128 0 1
5445: ST_TO_ADDR
// if tmp then
5446: LD_VAR 0 8
5450: IFFALSE 5493
// begin for i in tmp do
5452: LD_ADDR_VAR 0 7
5456: PUSH
5457: LD_VAR 0 8
5461: PUSH
5462: FOR_IN
5463: IFFALSE 5491
// if i [ 1 ] = b_ext_radio then
5465: LD_VAR 0 7
5469: PUSH
5470: LD_INT 1
5472: ARRAY
5473: PUSH
5474: LD_INT 22
5476: EQUAL
5477: IFFALSE 5489
// begin control := control_remote ;
5479: LD_ADDR_VAR 0 4
5483: PUSH
5484: LD_INT 2
5486: ST_TO_ADDR
// break ;
5487: GO 5491
// end ;
5489: GO 5462
5491: POP
5492: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5493: LD_VAR 0 1
5497: PPUSH
5498: LD_VAR 0 2
5502: PPUSH
5503: LD_VAR 0 3
5507: PPUSH
5508: LD_VAR 0 4
5512: PPUSH
5513: LD_VAR 0 5
5517: PPUSH
5518: CALL_OW 448
5522: IFFALSE 5557
// begin result := [ chassis , engine , control , weapon ] ;
5524: LD_ADDR_VAR 0 6
5528: PUSH
5529: LD_VAR 0 2
5533: PUSH
5534: LD_VAR 0 3
5538: PUSH
5539: LD_VAR 0 4
5543: PUSH
5544: LD_VAR 0 5
5548: PUSH
5549: EMPTY
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: ST_TO_ADDR
// exit ;
5555: GO 5979
// end ; _chassis := AvailableChassisList ( factory ) ;
5557: LD_ADDR_VAR 0 9
5561: PUSH
5562: LD_VAR 0 1
5566: PPUSH
5567: CALL_OW 475
5571: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5572: LD_ADDR_VAR 0 11
5576: PUSH
5577: LD_VAR 0 1
5581: PPUSH
5582: CALL_OW 476
5586: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5587: LD_ADDR_VAR 0 12
5591: PUSH
5592: LD_VAR 0 1
5596: PPUSH
5597: CALL_OW 477
5601: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5602: LD_ADDR_VAR 0 10
5606: PUSH
5607: LD_VAR 0 1
5611: PPUSH
5612: CALL_OW 478
5616: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5617: LD_VAR 0 9
5621: NOT
5622: IFTRUE 5631
5624: PUSH
5625: LD_VAR 0 11
5629: NOT
5630: OR
5631: IFTRUE 5640
5633: PUSH
5634: LD_VAR 0 12
5638: NOT
5639: OR
5640: IFTRUE 5649
5642: PUSH
5643: LD_VAR 0 10
5647: NOT
5648: OR
5649: IFFALSE 5684
// begin result := [ chassis , engine , control , weapon ] ;
5651: LD_ADDR_VAR 0 6
5655: PUSH
5656: LD_VAR 0 2
5660: PUSH
5661: LD_VAR 0 3
5665: PUSH
5666: LD_VAR 0 4
5670: PUSH
5671: LD_VAR 0 5
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: ST_TO_ADDR
// exit ;
5682: GO 5979
// end ; if not chassis in _chassis then
5684: LD_VAR 0 2
5688: PUSH
5689: LD_VAR 0 9
5693: IN
5694: NOT
5695: IFFALSE 5721
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5697: LD_ADDR_VAR 0 2
5701: PUSH
5702: LD_VAR 0 9
5706: PUSH
5707: LD_INT 1
5709: PPUSH
5710: LD_VAR 0 9
5714: PPUSH
5715: CALL_OW 12
5719: ARRAY
5720: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5721: LD_VAR 0 2
5725: PPUSH
5726: LD_VAR 0 3
5730: PPUSH
5731: CALL 5984 0 2
5735: NOT
5736: IFFALSE 5797
// repeat engine := _engine [ 1 ] ;
5738: LD_ADDR_VAR 0 3
5742: PUSH
5743: LD_VAR 0 11
5747: PUSH
5748: LD_INT 1
5750: ARRAY
5751: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5752: LD_ADDR_VAR 0 11
5756: PUSH
5757: LD_VAR 0 11
5761: PPUSH
5762: LD_INT 1
5764: PPUSH
5765: CALL_OW 3
5769: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5770: LD_VAR 0 2
5774: PPUSH
5775: LD_VAR 0 3
5779: PPUSH
5780: CALL 5984 0 2
5784: IFTRUE 5795
5786: PUSH
5787: LD_VAR 0 11
5791: PUSH
5792: EMPTY
5793: EQUAL
5794: OR
5795: IFFALSE 5738
// if not control in _control then
5797: LD_VAR 0 4
5801: PUSH
5802: LD_VAR 0 12
5806: IN
5807: NOT
5808: IFFALSE 5834
// control := _control [ rand ( 1 , _control ) ] ;
5810: LD_ADDR_VAR 0 4
5814: PUSH
5815: LD_VAR 0 12
5819: PUSH
5820: LD_INT 1
5822: PPUSH
5823: LD_VAR 0 12
5827: PPUSH
5828: CALL_OW 12
5832: ARRAY
5833: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5834: LD_VAR 0 2
5838: PPUSH
5839: LD_VAR 0 5
5843: PPUSH
5844: CALL 6206 0 2
5848: NOT
5849: IFFALSE 5910
// repeat weapon := _weapon [ 1 ] ;
5851: LD_ADDR_VAR 0 5
5855: PUSH
5856: LD_VAR 0 10
5860: PUSH
5861: LD_INT 1
5863: ARRAY
5864: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5865: LD_ADDR_VAR 0 10
5869: PUSH
5870: LD_VAR 0 10
5874: PPUSH
5875: LD_INT 1
5877: PPUSH
5878: CALL_OW 3
5882: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5883: LD_VAR 0 2
5887: PPUSH
5888: LD_VAR 0 5
5892: PPUSH
5893: CALL 6206 0 2
5897: IFTRUE 5908
5899: PUSH
5900: LD_VAR 0 10
5904: PUSH
5905: EMPTY
5906: EQUAL
5907: OR
5908: IFFALSE 5851
// result := [ ] ;
5910: LD_ADDR_VAR 0 6
5914: PUSH
5915: EMPTY
5916: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5917: LD_VAR 0 1
5921: PPUSH
5922: LD_VAR 0 2
5926: PPUSH
5927: LD_VAR 0 3
5931: PPUSH
5932: LD_VAR 0 4
5936: PPUSH
5937: LD_VAR 0 5
5941: PPUSH
5942: CALL_OW 448
5946: IFFALSE 5979
// result := [ chassis , engine , control , weapon ] ;
5948: LD_ADDR_VAR 0 6
5952: PUSH
5953: LD_VAR 0 2
5957: PUSH
5958: LD_VAR 0 3
5962: PUSH
5963: LD_VAR 0 4
5967: PUSH
5968: LD_VAR 0 5
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: ST_TO_ADDR
// end ;
5979: LD_VAR 0 6
5983: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5984: LD_INT 0
5986: PPUSH
// if not chassis or not engine then
5987: LD_VAR 0 1
5991: NOT
5992: IFTRUE 6001
5994: PUSH
5995: LD_VAR 0 2
5999: NOT
6000: OR
6001: IFFALSE 6005
// exit ;
6003: GO 6201
// case engine of engine_solar :
6005: LD_VAR 0 2
6009: PUSH
6010: LD_INT 2
6012: DOUBLE
6013: EQUAL
6014: IFTRUE 6018
6016: GO 6056
6018: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6019: LD_ADDR_VAR 0 3
6023: PUSH
6024: LD_INT 11
6026: PUSH
6027: LD_INT 12
6029: PUSH
6030: LD_INT 13
6032: PUSH
6033: LD_INT 14
6035: PUSH
6036: LD_INT 1
6038: PUSH
6039: LD_INT 2
6041: PUSH
6042: LD_INT 3
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: ST_TO_ADDR
6054: GO 6185
6056: LD_INT 1
6058: DOUBLE
6059: EQUAL
6060: IFTRUE 6064
6062: GO 6126
6064: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6065: LD_ADDR_VAR 0 3
6069: PUSH
6070: LD_INT 11
6072: PUSH
6073: LD_INT 12
6075: PUSH
6076: LD_INT 13
6078: PUSH
6079: LD_INT 14
6081: PUSH
6082: LD_INT 1
6084: PUSH
6085: LD_INT 2
6087: PUSH
6088: LD_INT 3
6090: PUSH
6091: LD_INT 4
6093: PUSH
6094: LD_INT 5
6096: PUSH
6097: LD_INT 21
6099: PUSH
6100: LD_INT 23
6102: PUSH
6103: LD_INT 22
6105: PUSH
6106: LD_INT 24
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: ST_TO_ADDR
6124: GO 6185
6126: LD_INT 3
6128: DOUBLE
6129: EQUAL
6130: IFTRUE 6134
6132: GO 6184
6134: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6135: LD_ADDR_VAR 0 3
6139: PUSH
6140: LD_INT 13
6142: PUSH
6143: LD_INT 14
6145: PUSH
6146: LD_INT 2
6148: PUSH
6149: LD_INT 3
6151: PUSH
6152: LD_INT 4
6154: PUSH
6155: LD_INT 5
6157: PUSH
6158: LD_INT 21
6160: PUSH
6161: LD_INT 22
6163: PUSH
6164: LD_INT 23
6166: PUSH
6167: LD_INT 24
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: ST_TO_ADDR
6182: GO 6185
6184: POP
// result := ( chassis in result ) ;
6185: LD_ADDR_VAR 0 3
6189: PUSH
6190: LD_VAR 0 1
6194: PUSH
6195: LD_VAR 0 3
6199: IN
6200: ST_TO_ADDR
// end ;
6201: LD_VAR 0 3
6205: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6206: LD_INT 0
6208: PPUSH
// if not chassis or not weapon then
6209: LD_VAR 0 1
6213: NOT
6214: IFTRUE 6223
6216: PUSH
6217: LD_VAR 0 2
6221: NOT
6222: OR
6223: IFFALSE 6227
// exit ;
6225: GO 7321
// case weapon of us_machine_gun :
6227: LD_VAR 0 2
6231: PUSH
6232: LD_INT 2
6234: DOUBLE
6235: EQUAL
6236: IFTRUE 6240
6238: GO 6270
6240: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6241: LD_ADDR_VAR 0 3
6245: PUSH
6246: LD_INT 1
6248: PUSH
6249: LD_INT 2
6251: PUSH
6252: LD_INT 3
6254: PUSH
6255: LD_INT 4
6257: PUSH
6258: LD_INT 5
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: LIST
6267: ST_TO_ADDR
6268: GO 7305
6270: LD_INT 3
6272: DOUBLE
6273: EQUAL
6274: IFTRUE 6278
6276: GO 6308
6278: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6279: LD_ADDR_VAR 0 3
6283: PUSH
6284: LD_INT 1
6286: PUSH
6287: LD_INT 2
6289: PUSH
6290: LD_INT 3
6292: PUSH
6293: LD_INT 4
6295: PUSH
6296: LD_INT 5
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: ST_TO_ADDR
6306: GO 7305
6308: LD_INT 11
6310: DOUBLE
6311: EQUAL
6312: IFTRUE 6316
6314: GO 6346
6316: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6317: LD_ADDR_VAR 0 3
6321: PUSH
6322: LD_INT 1
6324: PUSH
6325: LD_INT 2
6327: PUSH
6328: LD_INT 3
6330: PUSH
6331: LD_INT 4
6333: PUSH
6334: LD_INT 5
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: ST_TO_ADDR
6344: GO 7305
6346: LD_INT 4
6348: DOUBLE
6349: EQUAL
6350: IFTRUE 6354
6352: GO 6380
6354: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6355: LD_ADDR_VAR 0 3
6359: PUSH
6360: LD_INT 2
6362: PUSH
6363: LD_INT 3
6365: PUSH
6366: LD_INT 4
6368: PUSH
6369: LD_INT 5
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: ST_TO_ADDR
6378: GO 7305
6380: LD_INT 5
6382: DOUBLE
6383: EQUAL
6384: IFTRUE 6388
6386: GO 6414
6388: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6389: LD_ADDR_VAR 0 3
6393: PUSH
6394: LD_INT 2
6396: PUSH
6397: LD_INT 3
6399: PUSH
6400: LD_INT 4
6402: PUSH
6403: LD_INT 5
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: ST_TO_ADDR
6412: GO 7305
6414: LD_INT 9
6416: DOUBLE
6417: EQUAL
6418: IFTRUE 6422
6420: GO 6448
6422: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6423: LD_ADDR_VAR 0 3
6427: PUSH
6428: LD_INT 2
6430: PUSH
6431: LD_INT 3
6433: PUSH
6434: LD_INT 4
6436: PUSH
6437: LD_INT 5
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: ST_TO_ADDR
6446: GO 7305
6448: LD_INT 7
6450: DOUBLE
6451: EQUAL
6452: IFTRUE 6456
6454: GO 6482
6456: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6457: LD_ADDR_VAR 0 3
6461: PUSH
6462: LD_INT 2
6464: PUSH
6465: LD_INT 3
6467: PUSH
6468: LD_INT 4
6470: PUSH
6471: LD_INT 5
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: ST_TO_ADDR
6480: GO 7305
6482: LD_INT 12
6484: DOUBLE
6485: EQUAL
6486: IFTRUE 6490
6488: GO 6516
6490: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6491: LD_ADDR_VAR 0 3
6495: PUSH
6496: LD_INT 2
6498: PUSH
6499: LD_INT 3
6501: PUSH
6502: LD_INT 4
6504: PUSH
6505: LD_INT 5
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: ST_TO_ADDR
6514: GO 7305
6516: LD_INT 13
6518: DOUBLE
6519: EQUAL
6520: IFTRUE 6524
6522: GO 6550
6524: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6525: LD_ADDR_VAR 0 3
6529: PUSH
6530: LD_INT 2
6532: PUSH
6533: LD_INT 3
6535: PUSH
6536: LD_INT 4
6538: PUSH
6539: LD_INT 5
6541: PUSH
6542: EMPTY
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: ST_TO_ADDR
6548: GO 7305
6550: LD_INT 14
6552: DOUBLE
6553: EQUAL
6554: IFTRUE 6558
6556: GO 6576
6558: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6559: LD_ADDR_VAR 0 3
6563: PUSH
6564: LD_INT 4
6566: PUSH
6567: LD_INT 5
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: ST_TO_ADDR
6574: GO 7305
6576: LD_INT 6
6578: DOUBLE
6579: EQUAL
6580: IFTRUE 6584
6582: GO 6602
6584: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6585: LD_ADDR_VAR 0 3
6589: PUSH
6590: LD_INT 4
6592: PUSH
6593: LD_INT 5
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: ST_TO_ADDR
6600: GO 7305
6602: LD_INT 10
6604: DOUBLE
6605: EQUAL
6606: IFTRUE 6610
6608: GO 6628
6610: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6611: LD_ADDR_VAR 0 3
6615: PUSH
6616: LD_INT 4
6618: PUSH
6619: LD_INT 5
6621: PUSH
6622: EMPTY
6623: LIST
6624: LIST
6625: ST_TO_ADDR
6626: GO 7305
6628: LD_INT 22
6630: DOUBLE
6631: EQUAL
6632: IFTRUE 6636
6634: GO 6662
6636: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6637: LD_ADDR_VAR 0 3
6641: PUSH
6642: LD_INT 11
6644: PUSH
6645: LD_INT 12
6647: PUSH
6648: LD_INT 13
6650: PUSH
6651: LD_INT 14
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: ST_TO_ADDR
6660: GO 7305
6662: LD_INT 23
6664: DOUBLE
6665: EQUAL
6666: IFTRUE 6670
6668: GO 6696
6670: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6671: LD_ADDR_VAR 0 3
6675: PUSH
6676: LD_INT 11
6678: PUSH
6679: LD_INT 12
6681: PUSH
6682: LD_INT 13
6684: PUSH
6685: LD_INT 14
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: ST_TO_ADDR
6694: GO 7305
6696: LD_INT 24
6698: DOUBLE
6699: EQUAL
6700: IFTRUE 6704
6702: GO 6730
6704: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6705: LD_ADDR_VAR 0 3
6709: PUSH
6710: LD_INT 11
6712: PUSH
6713: LD_INT 12
6715: PUSH
6716: LD_INT 13
6718: PUSH
6719: LD_INT 14
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: ST_TO_ADDR
6728: GO 7305
6730: LD_INT 30
6732: DOUBLE
6733: EQUAL
6734: IFTRUE 6738
6736: GO 6764
6738: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6739: LD_ADDR_VAR 0 3
6743: PUSH
6744: LD_INT 11
6746: PUSH
6747: LD_INT 12
6749: PUSH
6750: LD_INT 13
6752: PUSH
6753: LD_INT 14
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: ST_TO_ADDR
6762: GO 7305
6764: LD_INT 25
6766: DOUBLE
6767: EQUAL
6768: IFTRUE 6772
6770: GO 6790
6772: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6773: LD_ADDR_VAR 0 3
6777: PUSH
6778: LD_INT 13
6780: PUSH
6781: LD_INT 14
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: ST_TO_ADDR
6788: GO 7305
6790: LD_INT 27
6792: DOUBLE
6793: EQUAL
6794: IFTRUE 6798
6796: GO 6816
6798: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6799: LD_ADDR_VAR 0 3
6803: PUSH
6804: LD_INT 13
6806: PUSH
6807: LD_INT 14
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: ST_TO_ADDR
6814: GO 7305
6816: LD_INT 92
6818: DOUBLE
6819: EQUAL
6820: IFTRUE 6824
6822: GO 6850
6824: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6825: LD_ADDR_VAR 0 3
6829: PUSH
6830: LD_INT 11
6832: PUSH
6833: LD_INT 12
6835: PUSH
6836: LD_INT 13
6838: PUSH
6839: LD_INT 14
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: ST_TO_ADDR
6848: GO 7305
6850: LD_INT 28
6852: DOUBLE
6853: EQUAL
6854: IFTRUE 6858
6856: GO 6876
6858: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6859: LD_ADDR_VAR 0 3
6863: PUSH
6864: LD_INT 13
6866: PUSH
6867: LD_INT 14
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: ST_TO_ADDR
6874: GO 7305
6876: LD_INT 29
6878: DOUBLE
6879: EQUAL
6880: IFTRUE 6884
6882: GO 6902
6884: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6885: LD_ADDR_VAR 0 3
6889: PUSH
6890: LD_INT 13
6892: PUSH
6893: LD_INT 14
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: ST_TO_ADDR
6900: GO 7305
6902: LD_INT 31
6904: DOUBLE
6905: EQUAL
6906: IFTRUE 6910
6908: GO 6928
6910: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6911: LD_ADDR_VAR 0 3
6915: PUSH
6916: LD_INT 13
6918: PUSH
6919: LD_INT 14
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: ST_TO_ADDR
6926: GO 7305
6928: LD_INT 26
6930: DOUBLE
6931: EQUAL
6932: IFTRUE 6936
6934: GO 6954
6936: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6937: LD_ADDR_VAR 0 3
6941: PUSH
6942: LD_INT 13
6944: PUSH
6945: LD_INT 14
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: ST_TO_ADDR
6952: GO 7305
6954: LD_INT 42
6956: DOUBLE
6957: EQUAL
6958: IFTRUE 6962
6960: GO 6988
6962: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6963: LD_ADDR_VAR 0 3
6967: PUSH
6968: LD_INT 21
6970: PUSH
6971: LD_INT 22
6973: PUSH
6974: LD_INT 23
6976: PUSH
6977: LD_INT 24
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: ST_TO_ADDR
6986: GO 7305
6988: LD_INT 43
6990: DOUBLE
6991: EQUAL
6992: IFTRUE 6996
6994: GO 7022
6996: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6997: LD_ADDR_VAR 0 3
7001: PUSH
7002: LD_INT 21
7004: PUSH
7005: LD_INT 22
7007: PUSH
7008: LD_INT 23
7010: PUSH
7011: LD_INT 24
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: ST_TO_ADDR
7020: GO 7305
7022: LD_INT 44
7024: DOUBLE
7025: EQUAL
7026: IFTRUE 7030
7028: GO 7056
7030: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7031: LD_ADDR_VAR 0 3
7035: PUSH
7036: LD_INT 21
7038: PUSH
7039: LD_INT 22
7041: PUSH
7042: LD_INT 23
7044: PUSH
7045: LD_INT 24
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: ST_TO_ADDR
7054: GO 7305
7056: LD_INT 45
7058: DOUBLE
7059: EQUAL
7060: IFTRUE 7064
7062: GO 7090
7064: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7065: LD_ADDR_VAR 0 3
7069: PUSH
7070: LD_INT 21
7072: PUSH
7073: LD_INT 22
7075: PUSH
7076: LD_INT 23
7078: PUSH
7079: LD_INT 24
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: LIST
7086: LIST
7087: ST_TO_ADDR
7088: GO 7305
7090: LD_INT 49
7092: DOUBLE
7093: EQUAL
7094: IFTRUE 7098
7096: GO 7124
7098: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7099: LD_ADDR_VAR 0 3
7103: PUSH
7104: LD_INT 21
7106: PUSH
7107: LD_INT 22
7109: PUSH
7110: LD_INT 23
7112: PUSH
7113: LD_INT 24
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: ST_TO_ADDR
7122: GO 7305
7124: LD_INT 51
7126: DOUBLE
7127: EQUAL
7128: IFTRUE 7132
7130: GO 7158
7132: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7133: LD_ADDR_VAR 0 3
7137: PUSH
7138: LD_INT 21
7140: PUSH
7141: LD_INT 22
7143: PUSH
7144: LD_INT 23
7146: PUSH
7147: LD_INT 24
7149: PUSH
7150: EMPTY
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: ST_TO_ADDR
7156: GO 7305
7158: LD_INT 52
7160: DOUBLE
7161: EQUAL
7162: IFTRUE 7166
7164: GO 7192
7166: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7167: LD_ADDR_VAR 0 3
7171: PUSH
7172: LD_INT 21
7174: PUSH
7175: LD_INT 22
7177: PUSH
7178: LD_INT 23
7180: PUSH
7181: LD_INT 24
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: ST_TO_ADDR
7190: GO 7305
7192: LD_INT 53
7194: DOUBLE
7195: EQUAL
7196: IFTRUE 7200
7198: GO 7218
7200: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7201: LD_ADDR_VAR 0 3
7205: PUSH
7206: LD_INT 23
7208: PUSH
7209: LD_INT 24
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: ST_TO_ADDR
7216: GO 7305
7218: LD_INT 46
7220: DOUBLE
7221: EQUAL
7222: IFTRUE 7226
7224: GO 7244
7226: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7227: LD_ADDR_VAR 0 3
7231: PUSH
7232: LD_INT 23
7234: PUSH
7235: LD_INT 24
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: ST_TO_ADDR
7242: GO 7305
7244: LD_INT 47
7246: DOUBLE
7247: EQUAL
7248: IFTRUE 7252
7250: GO 7270
7252: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
7253: LD_ADDR_VAR 0 3
7257: PUSH
7258: LD_INT 23
7260: PUSH
7261: LD_INT 24
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: ST_TO_ADDR
7268: GO 7305
7270: LD_INT 98
7272: DOUBLE
7273: EQUAL
7274: IFTRUE 7278
7276: GO 7304
7278: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7279: LD_ADDR_VAR 0 3
7283: PUSH
7284: LD_INT 21
7286: PUSH
7287: LD_INT 22
7289: PUSH
7290: LD_INT 23
7292: PUSH
7293: LD_INT 24
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: ST_TO_ADDR
7302: GO 7305
7304: POP
// result := ( chassis in result ) ;
7305: LD_ADDR_VAR 0 3
7309: PUSH
7310: LD_VAR 0 1
7314: PUSH
7315: LD_VAR 0 3
7319: IN
7320: ST_TO_ADDR
// end ;
7321: LD_VAR 0 3
7325: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7326: LD_INT 0
7328: PPUSH
7329: PPUSH
7330: PPUSH
7331: PPUSH
7332: PPUSH
7333: PPUSH
7334: PPUSH
// result := array ;
7335: LD_ADDR_VAR 0 5
7339: PUSH
7340: LD_VAR 0 1
7344: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7345: LD_VAR 0 1
7349: NOT
7350: IFTRUE 7359
7352: PUSH
7353: LD_VAR 0 2
7357: NOT
7358: OR
7359: IFTRUE 7368
7361: PUSH
7362: LD_VAR 0 3
7366: NOT
7367: OR
7368: IFTRUE 7382
7370: PUSH
7371: LD_VAR 0 2
7375: PUSH
7376: LD_VAR 0 1
7380: GREATER
7381: OR
7382: IFTRUE 7396
7384: PUSH
7385: LD_VAR 0 3
7389: PUSH
7390: LD_VAR 0 1
7394: GREATER
7395: OR
7396: IFFALSE 7400
// exit ;
7398: GO 7696
// if direction then
7400: LD_VAR 0 4
7404: IFFALSE 7468
// begin d := 1 ;
7406: LD_ADDR_VAR 0 9
7410: PUSH
7411: LD_INT 1
7413: ST_TO_ADDR
// if i_from > i_to then
7414: LD_VAR 0 2
7418: PUSH
7419: LD_VAR 0 3
7423: GREATER
7424: IFFALSE 7450
// length := ( array - i_from ) + i_to else
7426: LD_ADDR_VAR 0 11
7430: PUSH
7431: LD_VAR 0 1
7435: PUSH
7436: LD_VAR 0 2
7440: MINUS
7441: PUSH
7442: LD_VAR 0 3
7446: PLUS
7447: ST_TO_ADDR
7448: GO 7466
// length := i_to - i_from ;
7450: LD_ADDR_VAR 0 11
7454: PUSH
7455: LD_VAR 0 3
7459: PUSH
7460: LD_VAR 0 2
7464: MINUS
7465: ST_TO_ADDR
// end else
7466: GO 7529
// begin d := - 1 ;
7468: LD_ADDR_VAR 0 9
7472: PUSH
7473: LD_INT 1
7475: NEG
7476: ST_TO_ADDR
// if i_from > i_to then
7477: LD_VAR 0 2
7481: PUSH
7482: LD_VAR 0 3
7486: GREATER
7487: IFFALSE 7507
// length := i_from - i_to else
7489: LD_ADDR_VAR 0 11
7493: PUSH
7494: LD_VAR 0 2
7498: PUSH
7499: LD_VAR 0 3
7503: MINUS
7504: ST_TO_ADDR
7505: GO 7529
// length := ( array - i_to ) + i_from ;
7507: LD_ADDR_VAR 0 11
7511: PUSH
7512: LD_VAR 0 1
7516: PUSH
7517: LD_VAR 0 3
7521: MINUS
7522: PUSH
7523: LD_VAR 0 2
7527: PLUS
7528: ST_TO_ADDR
// end ; if not length then
7529: LD_VAR 0 11
7533: NOT
7534: IFFALSE 7538
// exit ;
7536: GO 7696
// tmp := array ;
7538: LD_ADDR_VAR 0 10
7542: PUSH
7543: LD_VAR 0 1
7547: ST_TO_ADDR
// for i = 1 to length do
7548: LD_ADDR_VAR 0 6
7552: PUSH
7553: DOUBLE
7554: LD_INT 1
7556: DEC
7557: ST_TO_ADDR
7558: LD_VAR 0 11
7562: PUSH
7563: FOR_TO
7564: IFFALSE 7684
// begin for j = 1 to array do
7566: LD_ADDR_VAR 0 7
7570: PUSH
7571: DOUBLE
7572: LD_INT 1
7574: DEC
7575: ST_TO_ADDR
7576: LD_VAR 0 1
7580: PUSH
7581: FOR_TO
7582: IFFALSE 7670
// begin k := j + d ;
7584: LD_ADDR_VAR 0 8
7588: PUSH
7589: LD_VAR 0 7
7593: PUSH
7594: LD_VAR 0 9
7598: PLUS
7599: ST_TO_ADDR
// if k > array then
7600: LD_VAR 0 8
7604: PUSH
7605: LD_VAR 0 1
7609: GREATER
7610: IFFALSE 7620
// k := 1 ;
7612: LD_ADDR_VAR 0 8
7616: PUSH
7617: LD_INT 1
7619: ST_TO_ADDR
// if not k then
7620: LD_VAR 0 8
7624: NOT
7625: IFFALSE 7637
// k := array ;
7627: LD_ADDR_VAR 0 8
7631: PUSH
7632: LD_VAR 0 1
7636: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7637: LD_ADDR_VAR 0 10
7641: PUSH
7642: LD_VAR 0 10
7646: PPUSH
7647: LD_VAR 0 8
7651: PPUSH
7652: LD_VAR 0 1
7656: PUSH
7657: LD_VAR 0 7
7661: ARRAY
7662: PPUSH
7663: CALL_OW 1
7667: ST_TO_ADDR
// end ;
7668: GO 7581
7670: POP
7671: POP
// array := tmp ;
7672: LD_ADDR_VAR 0 1
7676: PUSH
7677: LD_VAR 0 10
7681: ST_TO_ADDR
// end ;
7682: GO 7563
7684: POP
7685: POP
// result := array ;
7686: LD_ADDR_VAR 0 5
7690: PUSH
7691: LD_VAR 0 1
7695: ST_TO_ADDR
// end ;
7696: LD_VAR 0 5
7700: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7701: LD_INT 0
7703: PPUSH
7704: PPUSH
// result := 0 ;
7705: LD_ADDR_VAR 0 3
7709: PUSH
7710: LD_INT 0
7712: ST_TO_ADDR
// if not array or not value in array then
7713: LD_VAR 0 1
7717: NOT
7718: IFTRUE 7733
7720: PUSH
7721: LD_VAR 0 2
7725: PUSH
7726: LD_VAR 0 1
7730: IN
7731: NOT
7732: OR
7733: IFFALSE 7737
// exit ;
7735: GO 7791
// for i = 1 to array do
7737: LD_ADDR_VAR 0 4
7741: PUSH
7742: DOUBLE
7743: LD_INT 1
7745: DEC
7746: ST_TO_ADDR
7747: LD_VAR 0 1
7751: PUSH
7752: FOR_TO
7753: IFFALSE 7789
// if value = array [ i ] then
7755: LD_VAR 0 2
7759: PUSH
7760: LD_VAR 0 1
7764: PUSH
7765: LD_VAR 0 4
7769: ARRAY
7770: EQUAL
7771: IFFALSE 7787
// begin result := i ;
7773: LD_ADDR_VAR 0 3
7777: PUSH
7778: LD_VAR 0 4
7782: ST_TO_ADDR
// exit ;
7783: POP
7784: POP
7785: GO 7791
// end ;
7787: GO 7752
7789: POP
7790: POP
// end ;
7791: LD_VAR 0 3
7795: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7796: LD_INT 0
7798: PPUSH
// vc_chassis := chassis ;
7799: LD_ADDR_OWVAR 37
7803: PUSH
7804: LD_VAR 0 1
7808: ST_TO_ADDR
// vc_engine := engine ;
7809: LD_ADDR_OWVAR 39
7813: PUSH
7814: LD_VAR 0 2
7818: ST_TO_ADDR
// vc_control := control ;
7819: LD_ADDR_OWVAR 38
7823: PUSH
7824: LD_VAR 0 3
7828: ST_TO_ADDR
// vc_weapon := weapon ;
7829: LD_ADDR_OWVAR 40
7833: PUSH
7834: LD_VAR 0 4
7838: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7839: LD_ADDR_OWVAR 41
7843: PUSH
7844: LD_VAR 0 5
7848: ST_TO_ADDR
// end ;
7849: LD_VAR 0 6
7853: RET
// export function WantPlant ( unit ) ; var task ; begin
7854: LD_INT 0
7856: PPUSH
7857: PPUSH
// result := false ;
7858: LD_ADDR_VAR 0 2
7862: PUSH
7863: LD_INT 0
7865: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7866: LD_ADDR_VAR 0 3
7870: PUSH
7871: LD_VAR 0 1
7875: PPUSH
7876: CALL_OW 437
7880: ST_TO_ADDR
// if task then
7881: LD_VAR 0 3
7885: IFFALSE 7913
// if task [ 1 ] [ 1 ] = p then
7887: LD_VAR 0 3
7891: PUSH
7892: LD_INT 1
7894: ARRAY
7895: PUSH
7896: LD_INT 1
7898: ARRAY
7899: PUSH
7900: LD_STRING p
7902: EQUAL
7903: IFFALSE 7913
// result := true ;
7905: LD_ADDR_VAR 0 2
7909: PUSH
7910: LD_INT 1
7912: ST_TO_ADDR
// end ;
7913: LD_VAR 0 2
7917: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7918: LD_INT 0
7920: PPUSH
7921: PPUSH
7922: PPUSH
7923: PPUSH
// if pos < 1 then
7924: LD_VAR 0 2
7928: PUSH
7929: LD_INT 1
7931: LESS
7932: IFFALSE 7936
// exit ;
7934: GO 8239
// if pos = 1 then
7936: LD_VAR 0 2
7940: PUSH
7941: LD_INT 1
7943: EQUAL
7944: IFFALSE 7977
// result := Replace ( arr , pos [ 1 ] , value ) else
7946: LD_ADDR_VAR 0 4
7950: PUSH
7951: LD_VAR 0 1
7955: PPUSH
7956: LD_VAR 0 2
7960: PUSH
7961: LD_INT 1
7963: ARRAY
7964: PPUSH
7965: LD_VAR 0 3
7969: PPUSH
7970: CALL_OW 1
7974: ST_TO_ADDR
7975: GO 8239
// begin tmp := arr ;
7977: LD_ADDR_VAR 0 6
7981: PUSH
7982: LD_VAR 0 1
7986: ST_TO_ADDR
// s_arr := [ tmp ] ;
7987: LD_ADDR_VAR 0 7
7991: PUSH
7992: LD_VAR 0 6
7996: PUSH
7997: EMPTY
7998: LIST
7999: ST_TO_ADDR
// for i = 1 to pos - 1 do
8000: LD_ADDR_VAR 0 5
8004: PUSH
8005: DOUBLE
8006: LD_INT 1
8008: DEC
8009: ST_TO_ADDR
8010: LD_VAR 0 2
8014: PUSH
8015: LD_INT 1
8017: MINUS
8018: PUSH
8019: FOR_TO
8020: IFFALSE 8065
// begin tmp := tmp [ pos [ i ] ] ;
8022: LD_ADDR_VAR 0 6
8026: PUSH
8027: LD_VAR 0 6
8031: PUSH
8032: LD_VAR 0 2
8036: PUSH
8037: LD_VAR 0 5
8041: ARRAY
8042: ARRAY
8043: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8044: LD_ADDR_VAR 0 7
8048: PUSH
8049: LD_VAR 0 7
8053: PUSH
8054: LD_VAR 0 6
8058: PUSH
8059: EMPTY
8060: LIST
8061: ADD
8062: ST_TO_ADDR
// end ;
8063: GO 8019
8065: POP
8066: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8067: LD_ADDR_VAR 0 6
8071: PUSH
8072: LD_VAR 0 6
8076: PPUSH
8077: LD_VAR 0 2
8081: PUSH
8082: LD_VAR 0 2
8086: ARRAY
8087: PPUSH
8088: LD_VAR 0 3
8092: PPUSH
8093: CALL_OW 1
8097: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8098: LD_ADDR_VAR 0 7
8102: PUSH
8103: LD_VAR 0 7
8107: PPUSH
8108: LD_VAR 0 7
8112: PPUSH
8113: LD_VAR 0 6
8117: PPUSH
8118: CALL_OW 1
8122: ST_TO_ADDR
// for i = s_arr downto 2 do
8123: LD_ADDR_VAR 0 5
8127: PUSH
8128: DOUBLE
8129: LD_VAR 0 7
8133: INC
8134: ST_TO_ADDR
8135: LD_INT 2
8137: PUSH
8138: FOR_DOWNTO
8139: IFFALSE 8223
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8141: LD_ADDR_VAR 0 6
8145: PUSH
8146: LD_VAR 0 7
8150: PUSH
8151: LD_VAR 0 5
8155: PUSH
8156: LD_INT 1
8158: MINUS
8159: ARRAY
8160: PPUSH
8161: LD_VAR 0 2
8165: PUSH
8166: LD_VAR 0 5
8170: PUSH
8171: LD_INT 1
8173: MINUS
8174: ARRAY
8175: PPUSH
8176: LD_VAR 0 7
8180: PUSH
8181: LD_VAR 0 5
8185: ARRAY
8186: PPUSH
8187: CALL_OW 1
8191: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8192: LD_ADDR_VAR 0 7
8196: PUSH
8197: LD_VAR 0 7
8201: PPUSH
8202: LD_VAR 0 5
8206: PUSH
8207: LD_INT 1
8209: MINUS
8210: PPUSH
8211: LD_VAR 0 6
8215: PPUSH
8216: CALL_OW 1
8220: ST_TO_ADDR
// end ;
8221: GO 8138
8223: POP
8224: POP
// result := s_arr [ 1 ] ;
8225: LD_ADDR_VAR 0 4
8229: PUSH
8230: LD_VAR 0 7
8234: PUSH
8235: LD_INT 1
8237: ARRAY
8238: ST_TO_ADDR
// end ; end ;
8239: LD_VAR 0 4
8243: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8244: LD_INT 0
8246: PPUSH
8247: PPUSH
// if not list then
8248: LD_VAR 0 1
8252: NOT
8253: IFFALSE 8257
// exit ;
8255: GO 8348
// i := list [ pos1 ] ;
8257: LD_ADDR_VAR 0 5
8261: PUSH
8262: LD_VAR 0 1
8266: PUSH
8267: LD_VAR 0 2
8271: ARRAY
8272: ST_TO_ADDR
// if not i then
8273: LD_VAR 0 5
8277: NOT
8278: IFFALSE 8282
// exit ;
8280: GO 8348
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8282: LD_ADDR_VAR 0 1
8286: PUSH
8287: LD_VAR 0 1
8291: PPUSH
8292: LD_VAR 0 2
8296: PPUSH
8297: LD_VAR 0 1
8301: PUSH
8302: LD_VAR 0 3
8306: ARRAY
8307: PPUSH
8308: CALL_OW 1
8312: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8313: LD_ADDR_VAR 0 1
8317: PUSH
8318: LD_VAR 0 1
8322: PPUSH
8323: LD_VAR 0 3
8327: PPUSH
8328: LD_VAR 0 5
8332: PPUSH
8333: CALL_OW 1
8337: ST_TO_ADDR
// result := list ;
8338: LD_ADDR_VAR 0 4
8342: PUSH
8343: LD_VAR 0 1
8347: ST_TO_ADDR
// end ;
8348: LD_VAR 0 4
8352: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8353: LD_INT 0
8355: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8356: LD_ADDR_VAR 0 5
8360: PUSH
8361: LD_VAR 0 1
8365: PPUSH
8366: CALL_OW 250
8370: PPUSH
8371: LD_VAR 0 1
8375: PPUSH
8376: CALL_OW 251
8380: PPUSH
8381: LD_VAR 0 2
8385: PPUSH
8386: LD_VAR 0 3
8390: PPUSH
8391: LD_VAR 0 4
8395: PPUSH
8396: CALL 8778 0 5
8400: ST_TO_ADDR
// end ;
8401: LD_VAR 0 5
8405: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8406: LD_INT 0
8408: PPUSH
8409: PPUSH
8410: PPUSH
8411: PPUSH
// if not list or not unit then
8412: LD_VAR 0 2
8416: NOT
8417: IFTRUE 8426
8419: PUSH
8420: LD_VAR 0 1
8424: NOT
8425: OR
8426: IFFALSE 8430
// exit ;
8428: GO 8773
// result := [ ] ;
8430: LD_ADDR_VAR 0 5
8434: PUSH
8435: EMPTY
8436: ST_TO_ADDR
// for i in list do
8437: LD_ADDR_VAR 0 6
8441: PUSH
8442: LD_VAR 0 2
8446: PUSH
8447: FOR_IN
8448: IFFALSE 8666
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8450: LD_ADDR_VAR 0 8
8454: PUSH
8455: LD_VAR 0 1
8459: PPUSH
8460: LD_VAR 0 6
8464: PUSH
8465: LD_INT 1
8467: ARRAY
8468: PPUSH
8469: LD_VAR 0 6
8473: PUSH
8474: LD_INT 2
8476: ARRAY
8477: PPUSH
8478: CALL_OW 297
8482: ST_TO_ADDR
// if not Count ( result ) then
8483: LD_VAR 0 5
8487: PPUSH
8488: CALL 5000 0 1
8492: NOT
8493: IFFALSE 8526
// begin result := Join ( result , [ i , tmp ] ) ;
8495: LD_ADDR_VAR 0 5
8499: PUSH
8500: LD_VAR 0 5
8504: PPUSH
8505: LD_VAR 0 6
8509: PUSH
8510: LD_VAR 0 8
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: PPUSH
8519: CALL 40976 0 2
8523: ST_TO_ADDR
// continue ;
8524: GO 8447
// end ; if result [ result ] [ 2 ] <= tmp then
8526: LD_VAR 0 5
8530: PUSH
8531: LD_VAR 0 5
8535: ARRAY
8536: PUSH
8537: LD_INT 2
8539: ARRAY
8540: PUSH
8541: LD_VAR 0 8
8545: LESSEQUAL
8546: IFFALSE 8579
// result := Join ( result , [ i , tmp ] ) else
8548: LD_ADDR_VAR 0 5
8552: PUSH
8553: LD_VAR 0 5
8557: PPUSH
8558: LD_VAR 0 6
8562: PUSH
8563: LD_VAR 0 8
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PPUSH
8572: CALL 40976 0 2
8576: ST_TO_ADDR
8577: GO 8664
// begin for j := 1 to Count ( result ) do
8579: LD_ADDR_VAR 0 7
8583: PUSH
8584: DOUBLE
8585: LD_INT 1
8587: DEC
8588: ST_TO_ADDR
8589: LD_VAR 0 5
8593: PPUSH
8594: CALL 5000 0 1
8598: PUSH
8599: FOR_TO
8600: IFFALSE 8662
// begin if tmp < result [ j ] [ 2 ] then
8602: LD_VAR 0 8
8606: PUSH
8607: LD_VAR 0 5
8611: PUSH
8612: LD_VAR 0 7
8616: ARRAY
8617: PUSH
8618: LD_INT 2
8620: ARRAY
8621: LESS
8622: IFFALSE 8660
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8624: LD_ADDR_VAR 0 5
8628: PUSH
8629: LD_VAR 0 5
8633: PPUSH
8634: LD_VAR 0 7
8638: PPUSH
8639: LD_VAR 0 6
8643: PUSH
8644: LD_VAR 0 8
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: PPUSH
8653: CALL_OW 2
8657: ST_TO_ADDR
// break ;
8658: GO 8662
// end ; end ;
8660: GO 8599
8662: POP
8663: POP
// end ; end ;
8664: GO 8447
8666: POP
8667: POP
// if result and not asc then
8668: LD_VAR 0 5
8672: IFFALSE 8681
8674: PUSH
8675: LD_VAR 0 3
8679: NOT
8680: AND
8681: IFFALSE 8698
// result := ReverseArray ( result ) ;
8683: LD_ADDR_VAR 0 5
8687: PUSH
8688: LD_VAR 0 5
8692: PPUSH
8693: CALL 36056 0 1
8697: ST_TO_ADDR
// tmp := [ ] ;
8698: LD_ADDR_VAR 0 8
8702: PUSH
8703: EMPTY
8704: ST_TO_ADDR
// if mode then
8705: LD_VAR 0 4
8709: IFFALSE 8773
// begin for i := 1 to result do
8711: LD_ADDR_VAR 0 6
8715: PUSH
8716: DOUBLE
8717: LD_INT 1
8719: DEC
8720: ST_TO_ADDR
8721: LD_VAR 0 5
8725: PUSH
8726: FOR_TO
8727: IFFALSE 8761
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8729: LD_ADDR_VAR 0 8
8733: PUSH
8734: LD_VAR 0 8
8738: PPUSH
8739: LD_VAR 0 5
8743: PUSH
8744: LD_VAR 0 6
8748: ARRAY
8749: PUSH
8750: LD_INT 1
8752: ARRAY
8753: PPUSH
8754: CALL 40976 0 2
8758: ST_TO_ADDR
8759: GO 8726
8761: POP
8762: POP
// result := tmp ;
8763: LD_ADDR_VAR 0 5
8767: PUSH
8768: LD_VAR 0 8
8772: ST_TO_ADDR
// end ; end ;
8773: LD_VAR 0 5
8777: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8778: LD_INT 0
8780: PPUSH
8781: PPUSH
8782: PPUSH
8783: PPUSH
// if not list then
8784: LD_VAR 0 3
8788: NOT
8789: IFFALSE 8793
// exit ;
8791: GO 9183
// result := [ ] ;
8793: LD_ADDR_VAR 0 6
8797: PUSH
8798: EMPTY
8799: ST_TO_ADDR
// for i in list do
8800: LD_ADDR_VAR 0 7
8804: PUSH
8805: LD_VAR 0 3
8809: PUSH
8810: FOR_IN
8811: IFFALSE 9013
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8813: LD_ADDR_VAR 0 9
8817: PUSH
8818: LD_VAR 0 7
8822: PPUSH
8823: LD_VAR 0 1
8827: PPUSH
8828: LD_VAR 0 2
8832: PPUSH
8833: CALL_OW 297
8837: ST_TO_ADDR
// if not result then
8838: LD_VAR 0 6
8842: NOT
8843: IFFALSE 8869
// result := [ [ i , tmp ] ] else
8845: LD_ADDR_VAR 0 6
8849: PUSH
8850: LD_VAR 0 7
8854: PUSH
8855: LD_VAR 0 9
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: PUSH
8864: EMPTY
8865: LIST
8866: ST_TO_ADDR
8867: GO 9011
// begin if result [ result ] [ 2 ] <= tmp then
8869: LD_VAR 0 6
8873: PUSH
8874: LD_VAR 0 6
8878: ARRAY
8879: PUSH
8880: LD_INT 2
8882: ARRAY
8883: PUSH
8884: LD_VAR 0 9
8888: LESSEQUAL
8889: IFFALSE 8931
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8891: LD_ADDR_VAR 0 6
8895: PUSH
8896: LD_VAR 0 6
8900: PPUSH
8901: LD_VAR 0 6
8905: PUSH
8906: LD_INT 1
8908: PLUS
8909: PPUSH
8910: LD_VAR 0 7
8914: PUSH
8915: LD_VAR 0 9
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PPUSH
8924: CALL_OW 2
8928: ST_TO_ADDR
8929: GO 9011
// for j := 1 to result do
8931: LD_ADDR_VAR 0 8
8935: PUSH
8936: DOUBLE
8937: LD_INT 1
8939: DEC
8940: ST_TO_ADDR
8941: LD_VAR 0 6
8945: PUSH
8946: FOR_TO
8947: IFFALSE 9009
// begin if tmp < result [ j ] [ 2 ] then
8949: LD_VAR 0 9
8953: PUSH
8954: LD_VAR 0 6
8958: PUSH
8959: LD_VAR 0 8
8963: ARRAY
8964: PUSH
8965: LD_INT 2
8967: ARRAY
8968: LESS
8969: IFFALSE 9007
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8971: LD_ADDR_VAR 0 6
8975: PUSH
8976: LD_VAR 0 6
8980: PPUSH
8981: LD_VAR 0 8
8985: PPUSH
8986: LD_VAR 0 7
8990: PUSH
8991: LD_VAR 0 9
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: PPUSH
9000: CALL_OW 2
9004: ST_TO_ADDR
// break ;
9005: GO 9009
// end ; end ;
9007: GO 8946
9009: POP
9010: POP
// end ; end ;
9011: GO 8810
9013: POP
9014: POP
// if result and not asc then
9015: LD_VAR 0 6
9019: IFFALSE 9028
9021: PUSH
9022: LD_VAR 0 4
9026: NOT
9027: AND
9028: IFFALSE 9103
// begin tmp := result ;
9030: LD_ADDR_VAR 0 9
9034: PUSH
9035: LD_VAR 0 6
9039: ST_TO_ADDR
// for i = tmp downto 1 do
9040: LD_ADDR_VAR 0 7
9044: PUSH
9045: DOUBLE
9046: LD_VAR 0 9
9050: INC
9051: ST_TO_ADDR
9052: LD_INT 1
9054: PUSH
9055: FOR_DOWNTO
9056: IFFALSE 9101
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9058: LD_ADDR_VAR 0 6
9062: PUSH
9063: LD_VAR 0 6
9067: PPUSH
9068: LD_VAR 0 9
9072: PUSH
9073: LD_VAR 0 7
9077: MINUS
9078: PUSH
9079: LD_INT 1
9081: PLUS
9082: PPUSH
9083: LD_VAR 0 9
9087: PUSH
9088: LD_VAR 0 7
9092: ARRAY
9093: PPUSH
9094: CALL_OW 1
9098: ST_TO_ADDR
9099: GO 9055
9101: POP
9102: POP
// end ; tmp := [ ] ;
9103: LD_ADDR_VAR 0 9
9107: PUSH
9108: EMPTY
9109: ST_TO_ADDR
// if mode then
9110: LD_VAR 0 5
9114: IFFALSE 9183
// begin for i = 1 to result do
9116: LD_ADDR_VAR 0 7
9120: PUSH
9121: DOUBLE
9122: LD_INT 1
9124: DEC
9125: ST_TO_ADDR
9126: LD_VAR 0 6
9130: PUSH
9131: FOR_TO
9132: IFFALSE 9171
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9134: LD_ADDR_VAR 0 9
9138: PUSH
9139: LD_VAR 0 9
9143: PPUSH
9144: LD_VAR 0 7
9148: PPUSH
9149: LD_VAR 0 6
9153: PUSH
9154: LD_VAR 0 7
9158: ARRAY
9159: PUSH
9160: LD_INT 1
9162: ARRAY
9163: PPUSH
9164: CALL_OW 1
9168: ST_TO_ADDR
9169: GO 9131
9171: POP
9172: POP
// result := tmp ;
9173: LD_ADDR_VAR 0 6
9177: PUSH
9178: LD_VAR 0 9
9182: ST_TO_ADDR
// end ; end ;
9183: LD_VAR 0 6
9187: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9188: LD_INT 0
9190: PPUSH
9191: PPUSH
9192: PPUSH
9193: PPUSH
9194: PPUSH
9195: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9196: LD_ADDR_VAR 0 5
9200: PUSH
9201: LD_INT 0
9203: PUSH
9204: LD_INT 0
9206: PUSH
9207: LD_INT 0
9209: PUSH
9210: EMPTY
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: ST_TO_ADDR
// if not x or not y then
9218: LD_VAR 0 2
9222: NOT
9223: IFTRUE 9232
9225: PUSH
9226: LD_VAR 0 3
9230: NOT
9231: OR
9232: IFFALSE 9236
// exit ;
9234: GO 10892
// if not range then
9236: LD_VAR 0 4
9240: NOT
9241: IFFALSE 9251
// range := 10 ;
9243: LD_ADDR_VAR 0 4
9247: PUSH
9248: LD_INT 10
9250: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9251: LD_ADDR_VAR 0 8
9255: PUSH
9256: LD_INT 81
9258: PUSH
9259: LD_VAR 0 1
9263: PUSH
9264: EMPTY
9265: LIST
9266: LIST
9267: PUSH
9268: LD_INT 92
9270: PUSH
9271: LD_VAR 0 2
9275: PUSH
9276: LD_VAR 0 3
9280: PUSH
9281: LD_VAR 0 4
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: PUSH
9292: LD_INT 3
9294: PUSH
9295: LD_INT 21
9297: PUSH
9298: LD_INT 3
9300: PUSH
9301: EMPTY
9302: LIST
9303: LIST
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: LIST
9313: PPUSH
9314: CALL_OW 69
9318: ST_TO_ADDR
// if not tmp then
9319: LD_VAR 0 8
9323: NOT
9324: IFFALSE 9328
// exit ;
9326: GO 10892
// for i in tmp do
9328: LD_ADDR_VAR 0 6
9332: PUSH
9333: LD_VAR 0 8
9337: PUSH
9338: FOR_IN
9339: IFFALSE 10867
// begin points := [ 0 , 0 , 0 ] ;
9341: LD_ADDR_VAR 0 9
9345: PUSH
9346: LD_INT 0
9348: PUSH
9349: LD_INT 0
9351: PUSH
9352: LD_INT 0
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: LIST
9359: ST_TO_ADDR
// bpoints := 1 ;
9360: LD_ADDR_VAR 0 10
9364: PUSH
9365: LD_INT 1
9367: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9368: LD_VAR 0 6
9372: PPUSH
9373: CALL_OW 247
9377: PUSH
9378: LD_INT 1
9380: DOUBLE
9381: EQUAL
9382: IFTRUE 9386
9384: GO 9968
9386: POP
// begin if GetClass ( i ) = 1 then
9387: LD_VAR 0 6
9391: PPUSH
9392: CALL_OW 257
9396: PUSH
9397: LD_INT 1
9399: EQUAL
9400: IFFALSE 9421
// points := [ 10 , 5 , 3 ] ;
9402: LD_ADDR_VAR 0 9
9406: PUSH
9407: LD_INT 10
9409: PUSH
9410: LD_INT 5
9412: PUSH
9413: LD_INT 3
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: LIST
9420: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9421: LD_VAR 0 6
9425: PPUSH
9426: CALL_OW 257
9430: PUSH
9431: LD_INT 2
9433: PUSH
9434: LD_INT 3
9436: PUSH
9437: LD_INT 4
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: LIST
9444: IN
9445: IFFALSE 9466
// points := [ 3 , 2 , 1 ] ;
9447: LD_ADDR_VAR 0 9
9451: PUSH
9452: LD_INT 3
9454: PUSH
9455: LD_INT 2
9457: PUSH
9458: LD_INT 1
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: LIST
9465: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9466: LD_VAR 0 6
9470: PPUSH
9471: CALL_OW 257
9475: PUSH
9476: LD_INT 5
9478: EQUAL
9479: IFFALSE 9500
// points := [ 130 , 5 , 2 ] ;
9481: LD_ADDR_VAR 0 9
9485: PUSH
9486: LD_INT 130
9488: PUSH
9489: LD_INT 5
9491: PUSH
9492: LD_INT 2
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: LIST
9499: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9500: LD_VAR 0 6
9504: PPUSH
9505: CALL_OW 257
9509: PUSH
9510: LD_INT 8
9512: EQUAL
9513: IFFALSE 9534
// points := [ 35 , 35 , 30 ] ;
9515: LD_ADDR_VAR 0 9
9519: PUSH
9520: LD_INT 35
9522: PUSH
9523: LD_INT 35
9525: PUSH
9526: LD_INT 30
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: LIST
9533: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9534: LD_VAR 0 6
9538: PPUSH
9539: CALL_OW 257
9543: PUSH
9544: LD_INT 9
9546: EQUAL
9547: IFFALSE 9568
// points := [ 20 , 55 , 40 ] ;
9549: LD_ADDR_VAR 0 9
9553: PUSH
9554: LD_INT 20
9556: PUSH
9557: LD_INT 55
9559: PUSH
9560: LD_INT 40
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: LIST
9567: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9568: LD_VAR 0 6
9572: PPUSH
9573: CALL_OW 257
9577: PUSH
9578: LD_INT 12
9580: PUSH
9581: LD_INT 16
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: IN
9588: IFFALSE 9609
// points := [ 5 , 3 , 2 ] ;
9590: LD_ADDR_VAR 0 9
9594: PUSH
9595: LD_INT 5
9597: PUSH
9598: LD_INT 3
9600: PUSH
9601: LD_INT 2
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: LIST
9608: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9609: LD_VAR 0 6
9613: PPUSH
9614: CALL_OW 257
9618: PUSH
9619: LD_INT 17
9621: EQUAL
9622: IFFALSE 9643
// points := [ 100 , 50 , 75 ] ;
9624: LD_ADDR_VAR 0 9
9628: PUSH
9629: LD_INT 100
9631: PUSH
9632: LD_INT 50
9634: PUSH
9635: LD_INT 75
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: LIST
9642: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9643: LD_VAR 0 6
9647: PPUSH
9648: CALL_OW 257
9652: PUSH
9653: LD_INT 15
9655: EQUAL
9656: IFFALSE 9677
// points := [ 10 , 5 , 3 ] ;
9658: LD_ADDR_VAR 0 9
9662: PUSH
9663: LD_INT 10
9665: PUSH
9666: LD_INT 5
9668: PUSH
9669: LD_INT 3
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: LIST
9676: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9677: LD_VAR 0 6
9681: PPUSH
9682: CALL_OW 257
9686: PUSH
9687: LD_INT 14
9689: EQUAL
9690: IFFALSE 9711
// points := [ 10 , 0 , 0 ] ;
9692: LD_ADDR_VAR 0 9
9696: PUSH
9697: LD_INT 10
9699: PUSH
9700: LD_INT 0
9702: PUSH
9703: LD_INT 0
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: LIST
9710: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9711: LD_VAR 0 6
9715: PPUSH
9716: CALL_OW 257
9720: PUSH
9721: LD_INT 11
9723: EQUAL
9724: IFFALSE 9745
// points := [ 30 , 10 , 5 ] ;
9726: LD_ADDR_VAR 0 9
9730: PUSH
9731: LD_INT 30
9733: PUSH
9734: LD_INT 10
9736: PUSH
9737: LD_INT 5
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: LIST
9744: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9745: LD_VAR 0 1
9749: PPUSH
9750: LD_INT 5
9752: PPUSH
9753: CALL_OW 321
9757: PUSH
9758: LD_INT 2
9760: EQUAL
9761: IFFALSE 9778
// bpoints := bpoints * 1.8 ;
9763: LD_ADDR_VAR 0 10
9767: PUSH
9768: LD_VAR 0 10
9772: PUSH
9773: LD_REAL  1.80000000000000E+0000
9776: MUL
9777: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9778: LD_VAR 0 6
9782: PPUSH
9783: CALL_OW 257
9787: PUSH
9788: LD_INT 1
9790: PUSH
9791: LD_INT 2
9793: PUSH
9794: LD_INT 3
9796: PUSH
9797: LD_INT 4
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: IN
9806: IFFALSE 9826
9808: PUSH
9809: LD_VAR 0 1
9813: PPUSH
9814: LD_INT 51
9816: PPUSH
9817: CALL_OW 321
9821: PUSH
9822: LD_INT 2
9824: EQUAL
9825: AND
9826: IFFALSE 9843
// bpoints := bpoints * 1.2 ;
9828: LD_ADDR_VAR 0 10
9832: PUSH
9833: LD_VAR 0 10
9837: PUSH
9838: LD_REAL  1.20000000000000E+0000
9841: MUL
9842: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9843: LD_VAR 0 6
9847: PPUSH
9848: CALL_OW 257
9852: PUSH
9853: LD_INT 5
9855: PUSH
9856: LD_INT 7
9858: PUSH
9859: LD_INT 9
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: LIST
9866: IN
9867: IFFALSE 9887
9869: PUSH
9870: LD_VAR 0 1
9874: PPUSH
9875: LD_INT 52
9877: PPUSH
9878: CALL_OW 321
9882: PUSH
9883: LD_INT 2
9885: EQUAL
9886: AND
9887: IFFALSE 9904
// bpoints := bpoints * 1.5 ;
9889: LD_ADDR_VAR 0 10
9893: PUSH
9894: LD_VAR 0 10
9898: PUSH
9899: LD_REAL  1.50000000000000E+0000
9902: MUL
9903: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9904: LD_VAR 0 1
9908: PPUSH
9909: LD_INT 66
9911: PPUSH
9912: CALL_OW 321
9916: PUSH
9917: LD_INT 2
9919: EQUAL
9920: IFFALSE 9937
// bpoints := bpoints * 1.1 ;
9922: LD_ADDR_VAR 0 10
9926: PUSH
9927: LD_VAR 0 10
9931: PUSH
9932: LD_REAL  1.10000000000000E+0000
9935: MUL
9936: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9937: LD_ADDR_VAR 0 10
9941: PUSH
9942: LD_VAR 0 10
9946: PUSH
9947: LD_VAR 0 6
9951: PPUSH
9952: LD_INT 1
9954: PPUSH
9955: CALL_OW 259
9959: PUSH
9960: LD_REAL  1.15000000000000E+0000
9963: MUL
9964: MUL
9965: ST_TO_ADDR
// end ; unit_vehicle :
9966: GO 10796
9968: LD_INT 2
9970: DOUBLE
9971: EQUAL
9972: IFTRUE 9976
9974: GO 10784
9976: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9977: LD_VAR 0 6
9981: PPUSH
9982: CALL_OW 264
9986: PUSH
9987: LD_INT 2
9989: PUSH
9990: LD_INT 42
9992: PUSH
9993: LD_INT 24
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: LIST
10000: IN
10001: IFFALSE 10022
// points := [ 25 , 5 , 3 ] ;
10003: LD_ADDR_VAR 0 9
10007: PUSH
10008: LD_INT 25
10010: PUSH
10011: LD_INT 5
10013: PUSH
10014: LD_INT 3
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: LIST
10021: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10022: LD_VAR 0 6
10026: PPUSH
10027: CALL_OW 264
10031: PUSH
10032: LD_INT 4
10034: PUSH
10035: LD_INT 43
10037: PUSH
10038: LD_INT 25
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: LIST
10045: IN
10046: IFFALSE 10067
// points := [ 40 , 15 , 5 ] ;
10048: LD_ADDR_VAR 0 9
10052: PUSH
10053: LD_INT 40
10055: PUSH
10056: LD_INT 15
10058: PUSH
10059: LD_INT 5
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: LIST
10066: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10067: LD_VAR 0 6
10071: PPUSH
10072: CALL_OW 264
10076: PUSH
10077: LD_INT 3
10079: PUSH
10080: LD_INT 23
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: IN
10087: IFFALSE 10108
// points := [ 7 , 25 , 8 ] ;
10089: LD_ADDR_VAR 0 9
10093: PUSH
10094: LD_INT 7
10096: PUSH
10097: LD_INT 25
10099: PUSH
10100: LD_INT 8
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: LIST
10107: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10108: LD_VAR 0 6
10112: PPUSH
10113: CALL_OW 264
10117: PUSH
10118: LD_INT 5
10120: PUSH
10121: LD_INT 27
10123: PUSH
10124: LD_INT 44
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: LIST
10131: IN
10132: IFFALSE 10153
// points := [ 14 , 50 , 16 ] ;
10134: LD_ADDR_VAR 0 9
10138: PUSH
10139: LD_INT 14
10141: PUSH
10142: LD_INT 50
10144: PUSH
10145: LD_INT 16
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: LIST
10152: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10153: LD_VAR 0 6
10157: PPUSH
10158: CALL_OW 264
10162: PUSH
10163: LD_INT 6
10165: PUSH
10166: LD_INT 46
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: IN
10173: IFFALSE 10194
// points := [ 32 , 120 , 70 ] ;
10175: LD_ADDR_VAR 0 9
10179: PUSH
10180: LD_INT 32
10182: PUSH
10183: LD_INT 120
10185: PUSH
10186: LD_INT 70
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: LIST
10193: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10194: LD_VAR 0 6
10198: PPUSH
10199: CALL_OW 264
10203: PUSH
10204: LD_INT 7
10206: PUSH
10207: LD_INT 28
10209: PUSH
10210: LD_INT 45
10212: PUSH
10213: LD_INT 92
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: IN
10222: IFFALSE 10243
// points := [ 35 , 20 , 45 ] ;
10224: LD_ADDR_VAR 0 9
10228: PUSH
10229: LD_INT 35
10231: PUSH
10232: LD_INT 20
10234: PUSH
10235: LD_INT 45
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: LIST
10242: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10243: LD_VAR 0 6
10247: PPUSH
10248: CALL_OW 264
10252: PUSH
10253: LD_INT 47
10255: PUSH
10256: EMPTY
10257: LIST
10258: IN
10259: IFFALSE 10280
// points := [ 67 , 45 , 75 ] ;
10261: LD_ADDR_VAR 0 9
10265: PUSH
10266: LD_INT 67
10268: PUSH
10269: LD_INT 45
10271: PUSH
10272: LD_INT 75
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: LIST
10279: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10280: LD_VAR 0 6
10284: PPUSH
10285: CALL_OW 264
10289: PUSH
10290: LD_INT 26
10292: PUSH
10293: EMPTY
10294: LIST
10295: IN
10296: IFFALSE 10317
// points := [ 120 , 30 , 80 ] ;
10298: LD_ADDR_VAR 0 9
10302: PUSH
10303: LD_INT 120
10305: PUSH
10306: LD_INT 30
10308: PUSH
10309: LD_INT 80
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: LIST
10316: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10317: LD_VAR 0 6
10321: PPUSH
10322: CALL_OW 264
10326: PUSH
10327: LD_INT 22
10329: PUSH
10330: EMPTY
10331: LIST
10332: IN
10333: IFFALSE 10354
// points := [ 40 , 1 , 1 ] ;
10335: LD_ADDR_VAR 0 9
10339: PUSH
10340: LD_INT 40
10342: PUSH
10343: LD_INT 1
10345: PUSH
10346: LD_INT 1
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: LIST
10353: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10354: LD_VAR 0 6
10358: PPUSH
10359: CALL_OW 264
10363: PUSH
10364: LD_INT 29
10366: PUSH
10367: EMPTY
10368: LIST
10369: IN
10370: IFFALSE 10391
// points := [ 70 , 200 , 400 ] ;
10372: LD_ADDR_VAR 0 9
10376: PUSH
10377: LD_INT 70
10379: PUSH
10380: LD_INT 200
10382: PUSH
10383: LD_INT 400
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: LIST
10390: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10391: LD_VAR 0 6
10395: PPUSH
10396: CALL_OW 264
10400: PUSH
10401: LD_INT 14
10403: PUSH
10404: LD_INT 53
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: IN
10411: IFFALSE 10432
// points := [ 40 , 10 , 20 ] ;
10413: LD_ADDR_VAR 0 9
10417: PUSH
10418: LD_INT 40
10420: PUSH
10421: LD_INT 10
10423: PUSH
10424: LD_INT 20
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: LIST
10431: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10432: LD_VAR 0 6
10436: PPUSH
10437: CALL_OW 264
10441: PUSH
10442: LD_INT 9
10444: PUSH
10445: EMPTY
10446: LIST
10447: IN
10448: IFFALSE 10469
// points := [ 5 , 70 , 20 ] ;
10450: LD_ADDR_VAR 0 9
10454: PUSH
10455: LD_INT 5
10457: PUSH
10458: LD_INT 70
10460: PUSH
10461: LD_INT 20
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: LIST
10468: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10469: LD_VAR 0 6
10473: PPUSH
10474: CALL_OW 264
10478: PUSH
10479: LD_INT 10
10481: PUSH
10482: EMPTY
10483: LIST
10484: IN
10485: IFFALSE 10506
// points := [ 35 , 110 , 70 ] ;
10487: LD_ADDR_VAR 0 9
10491: PUSH
10492: LD_INT 35
10494: PUSH
10495: LD_INT 110
10497: PUSH
10498: LD_INT 70
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: LIST
10505: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10506: LD_VAR 0 6
10510: PPUSH
10511: CALL_OW 265
10515: PUSH
10516: LD_INT 25
10518: EQUAL
10519: IFFALSE 10540
// points := [ 80 , 65 , 100 ] ;
10521: LD_ADDR_VAR 0 9
10525: PUSH
10526: LD_INT 80
10528: PUSH
10529: LD_INT 65
10531: PUSH
10532: LD_INT 100
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: LIST
10539: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10540: LD_VAR 0 6
10544: PPUSH
10545: CALL_OW 263
10549: PUSH
10550: LD_INT 1
10552: EQUAL
10553: IFFALSE 10588
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10555: LD_ADDR_VAR 0 10
10559: PUSH
10560: LD_VAR 0 10
10564: PUSH
10565: LD_VAR 0 6
10569: PPUSH
10570: CALL_OW 311
10574: PPUSH
10575: LD_INT 3
10577: PPUSH
10578: CALL_OW 259
10582: PUSH
10583: LD_INT 4
10585: MUL
10586: MUL
10587: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10588: LD_VAR 0 6
10592: PPUSH
10593: CALL_OW 263
10597: PUSH
10598: LD_INT 2
10600: EQUAL
10601: IFFALSE 10652
// begin j := IsControledBy ( i ) ;
10603: LD_ADDR_VAR 0 7
10607: PUSH
10608: LD_VAR 0 6
10612: PPUSH
10613: CALL_OW 312
10617: ST_TO_ADDR
// if j then
10618: LD_VAR 0 7
10622: IFFALSE 10652
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10624: LD_ADDR_VAR 0 10
10628: PUSH
10629: LD_VAR 0 10
10633: PUSH
10634: LD_VAR 0 7
10638: PPUSH
10639: LD_INT 3
10641: PPUSH
10642: CALL_OW 259
10646: PUSH
10647: LD_INT 3
10649: MUL
10650: MUL
10651: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10652: LD_VAR 0 6
10656: PPUSH
10657: CALL_OW 264
10661: PUSH
10662: LD_INT 5
10664: PUSH
10665: LD_INT 6
10667: PUSH
10668: LD_INT 46
10670: PUSH
10671: LD_INT 44
10673: PUSH
10674: LD_INT 47
10676: PUSH
10677: LD_INT 45
10679: PUSH
10680: LD_INT 28
10682: PUSH
10683: LD_INT 7
10685: PUSH
10686: LD_INT 27
10688: PUSH
10689: LD_INT 29
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: IN
10704: IFFALSE 10724
10706: PUSH
10707: LD_VAR 0 1
10711: PPUSH
10712: LD_INT 52
10714: PPUSH
10715: CALL_OW 321
10719: PUSH
10720: LD_INT 2
10722: EQUAL
10723: AND
10724: IFFALSE 10741
// bpoints := bpoints * 1.2 ;
10726: LD_ADDR_VAR 0 10
10730: PUSH
10731: LD_VAR 0 10
10735: PUSH
10736: LD_REAL  1.20000000000000E+0000
10739: MUL
10740: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10741: LD_VAR 0 6
10745: PPUSH
10746: CALL_OW 264
10750: PUSH
10751: LD_INT 6
10753: PUSH
10754: LD_INT 46
10756: PUSH
10757: LD_INT 47
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: LIST
10764: IN
10765: IFFALSE 10782
// bpoints := bpoints * 1.2 ;
10767: LD_ADDR_VAR 0 10
10771: PUSH
10772: LD_VAR 0 10
10776: PUSH
10777: LD_REAL  1.20000000000000E+0000
10780: MUL
10781: ST_TO_ADDR
// end ; unit_building :
10782: GO 10796
10784: LD_INT 3
10786: DOUBLE
10787: EQUAL
10788: IFTRUE 10792
10790: GO 10795
10792: POP
// ; end ;
10793: GO 10796
10795: POP
// for j = 1 to 3 do
10796: LD_ADDR_VAR 0 7
10800: PUSH
10801: DOUBLE
10802: LD_INT 1
10804: DEC
10805: ST_TO_ADDR
10806: LD_INT 3
10808: PUSH
10809: FOR_TO
10810: IFFALSE 10863
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10812: LD_ADDR_VAR 0 5
10816: PUSH
10817: LD_VAR 0 5
10821: PPUSH
10822: LD_VAR 0 7
10826: PPUSH
10827: LD_VAR 0 5
10831: PUSH
10832: LD_VAR 0 7
10836: ARRAY
10837: PUSH
10838: LD_VAR 0 9
10842: PUSH
10843: LD_VAR 0 7
10847: ARRAY
10848: PUSH
10849: LD_VAR 0 10
10853: MUL
10854: PLUS
10855: PPUSH
10856: CALL_OW 1
10860: ST_TO_ADDR
10861: GO 10809
10863: POP
10864: POP
// end ;
10865: GO 9338
10867: POP
10868: POP
// result := Replace ( result , 4 , tmp ) ;
10869: LD_ADDR_VAR 0 5
10873: PUSH
10874: LD_VAR 0 5
10878: PPUSH
10879: LD_INT 4
10881: PPUSH
10882: LD_VAR 0 8
10886: PPUSH
10887: CALL_OW 1
10891: ST_TO_ADDR
// end ;
10892: LD_VAR 0 5
10896: RET
// export function DangerAtRange ( unit , range ) ; begin
10897: LD_INT 0
10899: PPUSH
// if not unit then
10900: LD_VAR 0 1
10904: NOT
10905: IFFALSE 10909
// exit ;
10907: GO 10954
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10909: LD_ADDR_VAR 0 3
10913: PUSH
10914: LD_VAR 0 1
10918: PPUSH
10919: CALL_OW 255
10923: PPUSH
10924: LD_VAR 0 1
10928: PPUSH
10929: CALL_OW 250
10933: PPUSH
10934: LD_VAR 0 1
10938: PPUSH
10939: CALL_OW 251
10943: PPUSH
10944: LD_VAR 0 2
10948: PPUSH
10949: CALL 9188 0 4
10953: ST_TO_ADDR
// end ;
10954: LD_VAR 0 3
10958: RET
// export function DangerInArea ( side , area ) ; begin
10959: LD_INT 0
10961: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10962: LD_ADDR_VAR 0 3
10966: PUSH
10967: LD_VAR 0 2
10971: PPUSH
10972: LD_INT 81
10974: PUSH
10975: LD_VAR 0 1
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PPUSH
10984: CALL_OW 70
10988: ST_TO_ADDR
// end ;
10989: LD_VAR 0 3
10993: RET
// export function IsExtension ( b ) ; begin
10994: LD_INT 0
10996: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10997: LD_ADDR_VAR 0 2
11001: PUSH
11002: LD_VAR 0 1
11006: PUSH
11007: LD_INT 23
11009: PUSH
11010: LD_INT 20
11012: PUSH
11013: LD_INT 22
11015: PUSH
11016: LD_INT 17
11018: PUSH
11019: LD_INT 24
11021: PUSH
11022: LD_INT 21
11024: PUSH
11025: LD_INT 19
11027: PUSH
11028: LD_INT 16
11030: PUSH
11031: LD_INT 25
11033: PUSH
11034: LD_INT 18
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: IN
11049: ST_TO_ADDR
// end ;
11050: LD_VAR 0 2
11054: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11055: LD_INT 0
11057: PPUSH
11058: PPUSH
11059: PPUSH
// result := [ ] ;
11060: LD_ADDR_VAR 0 4
11064: PUSH
11065: EMPTY
11066: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11067: LD_ADDR_VAR 0 5
11071: PUSH
11072: LD_VAR 0 2
11076: PPUSH
11077: LD_INT 21
11079: PUSH
11080: LD_INT 3
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PPUSH
11087: CALL_OW 70
11091: ST_TO_ADDR
// if not tmp then
11092: LD_VAR 0 5
11096: NOT
11097: IFFALSE 11101
// exit ;
11099: GO 11165
// if checkLink then
11101: LD_VAR 0 3
11105: IFFALSE 11155
// begin for i in tmp do
11107: LD_ADDR_VAR 0 6
11111: PUSH
11112: LD_VAR 0 5
11116: PUSH
11117: FOR_IN
11118: IFFALSE 11153
// if GetBase ( i ) <> base then
11120: LD_VAR 0 6
11124: PPUSH
11125: CALL_OW 274
11129: PUSH
11130: LD_VAR 0 1
11134: NONEQUAL
11135: IFFALSE 11151
// ComLinkToBase ( base , i ) ;
11137: LD_VAR 0 1
11141: PPUSH
11142: LD_VAR 0 6
11146: PPUSH
11147: CALL_OW 169
11151: GO 11117
11153: POP
11154: POP
// end ; result := tmp ;
11155: LD_ADDR_VAR 0 4
11159: PUSH
11160: LD_VAR 0 5
11164: ST_TO_ADDR
// end ;
11165: LD_VAR 0 4
11169: RET
// export function ComComplete ( units , b ) ; var i ; begin
11170: LD_INT 0
11172: PPUSH
11173: PPUSH
// if not units then
11174: LD_VAR 0 1
11178: NOT
11179: IFFALSE 11183
// exit ;
11181: GO 11273
// for i in units do
11183: LD_ADDR_VAR 0 4
11187: PUSH
11188: LD_VAR 0 1
11192: PUSH
11193: FOR_IN
11194: IFFALSE 11271
// if BuildingStatus ( b ) = bs_build then
11196: LD_VAR 0 2
11200: PPUSH
11201: CALL_OW 461
11205: PUSH
11206: LD_INT 1
11208: EQUAL
11209: IFFALSE 11269
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11211: LD_VAR 0 4
11215: PPUSH
11216: LD_STRING h
11218: PUSH
11219: LD_VAR 0 2
11223: PPUSH
11224: CALL_OW 250
11228: PUSH
11229: LD_VAR 0 2
11233: PPUSH
11234: CALL_OW 251
11238: PUSH
11239: LD_VAR 0 2
11243: PUSH
11244: LD_INT 0
11246: PUSH
11247: LD_INT 0
11249: PUSH
11250: LD_INT 0
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: PUSH
11262: EMPTY
11263: LIST
11264: PPUSH
11265: CALL_OW 446
11269: GO 11193
11271: POP
11272: POP
// end ;
11273: LD_VAR 0 3
11277: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11278: LD_INT 0
11280: PPUSH
11281: PPUSH
11282: PPUSH
11283: PPUSH
11284: PPUSH
11285: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11286: LD_VAR 0 1
11290: NOT
11291: IFTRUE 11308
11293: PUSH
11294: LD_VAR 0 1
11298: PPUSH
11299: CALL_OW 263
11303: PUSH
11304: LD_INT 2
11306: NONEQUAL
11307: OR
11308: IFFALSE 11312
// exit ;
11310: GO 11628
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11312: LD_ADDR_VAR 0 6
11316: PUSH
11317: LD_INT 22
11319: PUSH
11320: LD_VAR 0 1
11324: PPUSH
11325: CALL_OW 255
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: PUSH
11334: LD_INT 2
11336: PUSH
11337: LD_INT 30
11339: PUSH
11340: LD_INT 36
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: PUSH
11347: LD_INT 34
11349: PUSH
11350: LD_INT 31
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: PUSH
11357: EMPTY
11358: LIST
11359: LIST
11360: LIST
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PPUSH
11366: CALL_OW 69
11370: ST_TO_ADDR
// if not tmp then
11371: LD_VAR 0 6
11375: NOT
11376: IFFALSE 11380
// exit ;
11378: GO 11628
// result := [ ] ;
11380: LD_ADDR_VAR 0 2
11384: PUSH
11385: EMPTY
11386: ST_TO_ADDR
// for i in tmp do
11387: LD_ADDR_VAR 0 3
11391: PUSH
11392: LD_VAR 0 6
11396: PUSH
11397: FOR_IN
11398: IFFALSE 11469
// begin t := UnitsInside ( i ) ;
11400: LD_ADDR_VAR 0 4
11404: PUSH
11405: LD_VAR 0 3
11409: PPUSH
11410: CALL_OW 313
11414: ST_TO_ADDR
// if t then
11415: LD_VAR 0 4
11419: IFFALSE 11467
// for j in t do
11421: LD_ADDR_VAR 0 7
11425: PUSH
11426: LD_VAR 0 4
11430: PUSH
11431: FOR_IN
11432: IFFALSE 11465
// result := Replace ( result , result + 1 , j ) ;
11434: LD_ADDR_VAR 0 2
11438: PUSH
11439: LD_VAR 0 2
11443: PPUSH
11444: LD_VAR 0 2
11448: PUSH
11449: LD_INT 1
11451: PLUS
11452: PPUSH
11453: LD_VAR 0 7
11457: PPUSH
11458: CALL_OW 1
11462: ST_TO_ADDR
11463: GO 11431
11465: POP
11466: POP
// end ;
11467: GO 11397
11469: POP
11470: POP
// if not result then
11471: LD_VAR 0 2
11475: NOT
11476: IFFALSE 11480
// exit ;
11478: GO 11628
// mech := result [ 1 ] ;
11480: LD_ADDR_VAR 0 5
11484: PUSH
11485: LD_VAR 0 2
11489: PUSH
11490: LD_INT 1
11492: ARRAY
11493: ST_TO_ADDR
// if result > 1 then
11494: LD_VAR 0 2
11498: PUSH
11499: LD_INT 1
11501: GREATER
11502: IFFALSE 11614
// begin for i = 2 to result do
11504: LD_ADDR_VAR 0 3
11508: PUSH
11509: DOUBLE
11510: LD_INT 2
11512: DEC
11513: ST_TO_ADDR
11514: LD_VAR 0 2
11518: PUSH
11519: FOR_TO
11520: IFFALSE 11612
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11522: LD_ADDR_VAR 0 4
11526: PUSH
11527: LD_VAR 0 2
11531: PUSH
11532: LD_VAR 0 3
11536: ARRAY
11537: PPUSH
11538: LD_INT 3
11540: PPUSH
11541: CALL_OW 259
11545: PUSH
11546: LD_VAR 0 2
11550: PUSH
11551: LD_VAR 0 3
11555: ARRAY
11556: PPUSH
11557: CALL_OW 432
11561: MINUS
11562: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11563: LD_VAR 0 4
11567: PUSH
11568: LD_VAR 0 5
11572: PPUSH
11573: LD_INT 3
11575: PPUSH
11576: CALL_OW 259
11580: PUSH
11581: LD_VAR 0 5
11585: PPUSH
11586: CALL_OW 432
11590: MINUS
11591: GREATEREQUAL
11592: IFFALSE 11610
// mech := result [ i ] ;
11594: LD_ADDR_VAR 0 5
11598: PUSH
11599: LD_VAR 0 2
11603: PUSH
11604: LD_VAR 0 3
11608: ARRAY
11609: ST_TO_ADDR
// end ;
11610: GO 11519
11612: POP
11613: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11614: LD_VAR 0 1
11618: PPUSH
11619: LD_VAR 0 5
11623: PPUSH
11624: CALL_OW 135
// end ;
11628: LD_VAR 0 2
11632: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11633: LD_INT 0
11635: PPUSH
11636: PPUSH
11637: PPUSH
11638: PPUSH
11639: PPUSH
11640: PPUSH
11641: PPUSH
11642: PPUSH
11643: PPUSH
11644: PPUSH
11645: PPUSH
11646: PPUSH
11647: PPUSH
// result := [ ] ;
11648: LD_ADDR_VAR 0 7
11652: PUSH
11653: EMPTY
11654: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11655: LD_VAR 0 1
11659: PPUSH
11660: CALL_OW 266
11664: PUSH
11665: LD_INT 0
11667: PUSH
11668: LD_INT 1
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: IN
11675: NOT
11676: IFFALSE 11680
// exit ;
11678: GO 13320
// if name then
11680: LD_VAR 0 3
11684: IFFALSE 11700
// SetBName ( base_dep , name ) ;
11686: LD_VAR 0 1
11690: PPUSH
11691: LD_VAR 0 3
11695: PPUSH
11696: CALL_OW 500
// base := GetBase ( base_dep ) ;
11700: LD_ADDR_VAR 0 15
11704: PUSH
11705: LD_VAR 0 1
11709: PPUSH
11710: CALL_OW 274
11714: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11715: LD_ADDR_VAR 0 16
11719: PUSH
11720: LD_VAR 0 1
11724: PPUSH
11725: CALL_OW 255
11729: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11730: LD_ADDR_VAR 0 17
11734: PUSH
11735: LD_VAR 0 1
11739: PPUSH
11740: CALL_OW 248
11744: ST_TO_ADDR
// if sources then
11745: LD_VAR 0 5
11749: IFFALSE 11796
// for i = 1 to 3 do
11751: LD_ADDR_VAR 0 8
11755: PUSH
11756: DOUBLE
11757: LD_INT 1
11759: DEC
11760: ST_TO_ADDR
11761: LD_INT 3
11763: PUSH
11764: FOR_TO
11765: IFFALSE 11794
// AddResourceType ( base , i , sources [ i ] ) ;
11767: LD_VAR 0 15
11771: PPUSH
11772: LD_VAR 0 8
11776: PPUSH
11777: LD_VAR 0 5
11781: PUSH
11782: LD_VAR 0 8
11786: ARRAY
11787: PPUSH
11788: CALL_OW 276
11792: GO 11764
11794: POP
11795: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11796: LD_ADDR_VAR 0 18
11800: PUSH
11801: LD_VAR 0 15
11805: PPUSH
11806: LD_VAR 0 2
11810: PPUSH
11811: LD_INT 1
11813: PPUSH
11814: CALL 11055 0 3
11818: ST_TO_ADDR
// InitHc ;
11819: CALL_OW 19
// InitUc ;
11823: CALL_OW 18
// uc_side := side ;
11827: LD_ADDR_OWVAR 20
11831: PUSH
11832: LD_VAR 0 16
11836: ST_TO_ADDR
// uc_nation := nation ;
11837: LD_ADDR_OWVAR 21
11841: PUSH
11842: LD_VAR 0 17
11846: ST_TO_ADDR
// if buildings then
11847: LD_VAR 0 18
11851: IFFALSE 13179
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11853: LD_ADDR_VAR 0 19
11857: PUSH
11858: LD_VAR 0 18
11862: PPUSH
11863: LD_INT 2
11865: PUSH
11866: LD_INT 30
11868: PUSH
11869: LD_INT 29
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 30
11878: PUSH
11879: LD_INT 30
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: LIST
11890: PPUSH
11891: CALL_OW 72
11895: ST_TO_ADDR
// if tmp then
11896: LD_VAR 0 19
11900: IFFALSE 11948
// for i in tmp do
11902: LD_ADDR_VAR 0 8
11906: PUSH
11907: LD_VAR 0 19
11911: PUSH
11912: FOR_IN
11913: IFFALSE 11946
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11915: LD_VAR 0 8
11919: PPUSH
11920: CALL_OW 250
11924: PPUSH
11925: LD_VAR 0 8
11929: PPUSH
11930: CALL_OW 251
11934: PPUSH
11935: LD_VAR 0 16
11939: PPUSH
11940: CALL_OW 441
11944: GO 11912
11946: POP
11947: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11948: LD_VAR 0 18
11952: PPUSH
11953: LD_INT 2
11955: PUSH
11956: LD_INT 30
11958: PUSH
11959: LD_INT 32
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: PUSH
11966: LD_INT 30
11968: PUSH
11969: LD_INT 33
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: LIST
11980: PPUSH
11981: CALL_OW 72
11985: IFFALSE 12073
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11987: LD_ADDR_VAR 0 8
11991: PUSH
11992: LD_VAR 0 18
11996: PPUSH
11997: LD_INT 2
11999: PUSH
12000: LD_INT 30
12002: PUSH
12003: LD_INT 32
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 30
12012: PUSH
12013: LD_INT 33
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: LIST
12024: PPUSH
12025: CALL_OW 72
12029: PUSH
12030: FOR_IN
12031: IFFALSE 12071
// begin if not GetBWeapon ( i ) then
12033: LD_VAR 0 8
12037: PPUSH
12038: CALL_OW 269
12042: NOT
12043: IFFALSE 12069
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12045: LD_VAR 0 8
12049: PPUSH
12050: LD_VAR 0 8
12054: PPUSH
12055: LD_VAR 0 2
12059: PPUSH
12060: CALL 13325 0 2
12064: PPUSH
12065: CALL_OW 431
// end ;
12069: GO 12030
12071: POP
12072: POP
// end ; for i = 1 to personel do
12073: LD_ADDR_VAR 0 8
12077: PUSH
12078: DOUBLE
12079: LD_INT 1
12081: DEC
12082: ST_TO_ADDR
12083: LD_VAR 0 6
12087: PUSH
12088: FOR_TO
12089: IFFALSE 13159
// begin if i > 4 then
12091: LD_VAR 0 8
12095: PUSH
12096: LD_INT 4
12098: GREATER
12099: IFFALSE 12103
// break ;
12101: GO 13159
// case i of 1 :
12103: LD_VAR 0 8
12107: PUSH
12108: LD_INT 1
12110: DOUBLE
12111: EQUAL
12112: IFTRUE 12116
12114: GO 12196
12116: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12117: LD_ADDR_VAR 0 12
12121: PUSH
12122: LD_VAR 0 18
12126: PPUSH
12127: LD_INT 22
12129: PUSH
12130: LD_VAR 0 16
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PUSH
12139: LD_INT 58
12141: PUSH
12142: EMPTY
12143: LIST
12144: PUSH
12145: LD_INT 2
12147: PUSH
12148: LD_INT 30
12150: PUSH
12151: LD_INT 32
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PUSH
12158: LD_INT 30
12160: PUSH
12161: LD_INT 4
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PUSH
12168: LD_INT 30
12170: PUSH
12171: LD_INT 5
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: LIST
12188: PPUSH
12189: CALL_OW 72
12193: ST_TO_ADDR
12194: GO 12418
12196: LD_INT 2
12198: DOUBLE
12199: EQUAL
12200: IFTRUE 12204
12202: GO 12266
12204: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12205: LD_ADDR_VAR 0 12
12209: PUSH
12210: LD_VAR 0 18
12214: PPUSH
12215: LD_INT 22
12217: PUSH
12218: LD_VAR 0 16
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: PUSH
12227: LD_INT 2
12229: PUSH
12230: LD_INT 30
12232: PUSH
12233: LD_INT 0
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PUSH
12240: LD_INT 30
12242: PUSH
12243: LD_INT 1
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: LIST
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: PPUSH
12259: CALL_OW 72
12263: ST_TO_ADDR
12264: GO 12418
12266: LD_INT 3
12268: DOUBLE
12269: EQUAL
12270: IFTRUE 12274
12272: GO 12336
12274: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12275: LD_ADDR_VAR 0 12
12279: PUSH
12280: LD_VAR 0 18
12284: PPUSH
12285: LD_INT 22
12287: PUSH
12288: LD_VAR 0 16
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: PUSH
12297: LD_INT 2
12299: PUSH
12300: LD_INT 30
12302: PUSH
12303: LD_INT 2
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: LD_INT 30
12312: PUSH
12313: LD_INT 3
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: LIST
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PPUSH
12329: CALL_OW 72
12333: ST_TO_ADDR
12334: GO 12418
12336: LD_INT 4
12338: DOUBLE
12339: EQUAL
12340: IFTRUE 12344
12342: GO 12417
12344: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12345: LD_ADDR_VAR 0 12
12349: PUSH
12350: LD_VAR 0 18
12354: PPUSH
12355: LD_INT 22
12357: PUSH
12358: LD_VAR 0 16
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PUSH
12367: LD_INT 2
12369: PUSH
12370: LD_INT 30
12372: PUSH
12373: LD_INT 6
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: PUSH
12380: LD_INT 30
12382: PUSH
12383: LD_INT 7
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PUSH
12390: LD_INT 30
12392: PUSH
12393: LD_INT 8
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: PPUSH
12410: CALL_OW 72
12414: ST_TO_ADDR
12415: GO 12418
12417: POP
// if i = 1 then
12418: LD_VAR 0 8
12422: PUSH
12423: LD_INT 1
12425: EQUAL
12426: IFFALSE 12537
// begin tmp := [ ] ;
12428: LD_ADDR_VAR 0 19
12432: PUSH
12433: EMPTY
12434: ST_TO_ADDR
// for j in f do
12435: LD_ADDR_VAR 0 9
12439: PUSH
12440: LD_VAR 0 12
12444: PUSH
12445: FOR_IN
12446: IFFALSE 12519
// if GetBType ( j ) = b_bunker then
12448: LD_VAR 0 9
12452: PPUSH
12453: CALL_OW 266
12457: PUSH
12458: LD_INT 32
12460: EQUAL
12461: IFFALSE 12488
// tmp := Insert ( tmp , 1 , j ) else
12463: LD_ADDR_VAR 0 19
12467: PUSH
12468: LD_VAR 0 19
12472: PPUSH
12473: LD_INT 1
12475: PPUSH
12476: LD_VAR 0 9
12480: PPUSH
12481: CALL_OW 2
12485: ST_TO_ADDR
12486: GO 12517
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12488: LD_ADDR_VAR 0 19
12492: PUSH
12493: LD_VAR 0 19
12497: PPUSH
12498: LD_VAR 0 19
12502: PUSH
12503: LD_INT 1
12505: PLUS
12506: PPUSH
12507: LD_VAR 0 9
12511: PPUSH
12512: CALL_OW 2
12516: ST_TO_ADDR
12517: GO 12445
12519: POP
12520: POP
// if tmp then
12521: LD_VAR 0 19
12525: IFFALSE 12537
// f := tmp ;
12527: LD_ADDR_VAR 0 12
12531: PUSH
12532: LD_VAR 0 19
12536: ST_TO_ADDR
// end ; x := personel [ i ] ;
12537: LD_ADDR_VAR 0 13
12541: PUSH
12542: LD_VAR 0 6
12546: PUSH
12547: LD_VAR 0 8
12551: ARRAY
12552: ST_TO_ADDR
// if x = - 1 then
12553: LD_VAR 0 13
12557: PUSH
12558: LD_INT 1
12560: NEG
12561: EQUAL
12562: IFFALSE 12773
// begin for j in f do
12564: LD_ADDR_VAR 0 9
12568: PUSH
12569: LD_VAR 0 12
12573: PUSH
12574: FOR_IN
12575: IFFALSE 12769
// repeat InitHc ;
12577: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12581: LD_VAR 0 9
12585: PPUSH
12586: CALL_OW 266
12590: PUSH
12591: LD_INT 5
12593: EQUAL
12594: IFFALSE 12664
// begin if UnitsInside ( j ) < 3 then
12596: LD_VAR 0 9
12600: PPUSH
12601: CALL_OW 313
12605: PUSH
12606: LD_INT 3
12608: LESS
12609: IFFALSE 12645
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12611: LD_INT 0
12613: PPUSH
12614: LD_INT 5
12616: PUSH
12617: LD_INT 8
12619: PUSH
12620: LD_INT 9
12622: PUSH
12623: EMPTY
12624: LIST
12625: LIST
12626: LIST
12627: PUSH
12628: LD_VAR 0 17
12632: ARRAY
12633: PPUSH
12634: LD_VAR 0 4
12638: PPUSH
12639: CALL_OW 380
12643: GO 12662
// PrepareHuman ( false , i , skill ) ;
12645: LD_INT 0
12647: PPUSH
12648: LD_VAR 0 8
12652: PPUSH
12653: LD_VAR 0 4
12657: PPUSH
12658: CALL_OW 380
// end else
12662: GO 12681
// PrepareHuman ( false , i , skill ) ;
12664: LD_INT 0
12666: PPUSH
12667: LD_VAR 0 8
12671: PPUSH
12672: LD_VAR 0 4
12676: PPUSH
12677: CALL_OW 380
// un := CreateHuman ;
12681: LD_ADDR_VAR 0 14
12685: PUSH
12686: CALL_OW 44
12690: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12691: LD_ADDR_VAR 0 7
12695: PUSH
12696: LD_VAR 0 7
12700: PPUSH
12701: LD_INT 1
12703: PPUSH
12704: LD_VAR 0 14
12708: PPUSH
12709: CALL_OW 2
12713: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12714: LD_VAR 0 14
12718: PPUSH
12719: LD_VAR 0 9
12723: PPUSH
12724: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12728: LD_VAR 0 9
12732: PPUSH
12733: CALL_OW 313
12737: PUSH
12738: LD_INT 6
12740: EQUAL
12741: IFTRUE 12765
12743: PUSH
12744: LD_VAR 0 9
12748: PPUSH
12749: CALL_OW 266
12753: PUSH
12754: LD_INT 32
12756: PUSH
12757: LD_INT 31
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: IN
12764: OR
12765: IFFALSE 12577
12767: GO 12574
12769: POP
12770: POP
// end else
12771: GO 13157
// for j = 1 to x do
12773: LD_ADDR_VAR 0 9
12777: PUSH
12778: DOUBLE
12779: LD_INT 1
12781: DEC
12782: ST_TO_ADDR
12783: LD_VAR 0 13
12787: PUSH
12788: FOR_TO
12789: IFFALSE 13155
// begin InitHc ;
12791: CALL_OW 19
// if not f then
12795: LD_VAR 0 12
12799: NOT
12800: IFFALSE 12889
// begin PrepareHuman ( false , i , skill ) ;
12802: LD_INT 0
12804: PPUSH
12805: LD_VAR 0 8
12809: PPUSH
12810: LD_VAR 0 4
12814: PPUSH
12815: CALL_OW 380
// un := CreateHuman ;
12819: LD_ADDR_VAR 0 14
12823: PUSH
12824: CALL_OW 44
12828: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12829: LD_ADDR_VAR 0 7
12833: PUSH
12834: LD_VAR 0 7
12838: PPUSH
12839: LD_INT 1
12841: PPUSH
12842: LD_VAR 0 14
12846: PPUSH
12847: CALL_OW 2
12851: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12852: LD_VAR 0 14
12856: PPUSH
12857: LD_VAR 0 1
12861: PPUSH
12862: CALL_OW 250
12866: PPUSH
12867: LD_VAR 0 1
12871: PPUSH
12872: CALL_OW 251
12876: PPUSH
12877: LD_INT 10
12879: PPUSH
12880: LD_INT 0
12882: PPUSH
12883: CALL_OW 50
// continue ;
12887: GO 12788
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12889: LD_VAR 0 12
12893: PUSH
12894: LD_INT 1
12896: ARRAY
12897: PPUSH
12898: CALL_OW 313
12902: IFFALSE 12930
12904: PUSH
12905: LD_VAR 0 12
12909: PUSH
12910: LD_INT 1
12912: ARRAY
12913: PPUSH
12914: CALL_OW 266
12918: PUSH
12919: LD_INT 32
12921: PUSH
12922: LD_INT 31
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: IN
12929: AND
12930: IFTRUE 12951
12932: PUSH
12933: LD_VAR 0 12
12937: PUSH
12938: LD_INT 1
12940: ARRAY
12941: PPUSH
12942: CALL_OW 313
12946: PUSH
12947: LD_INT 6
12949: EQUAL
12950: OR
12951: IFFALSE 12971
// f := Delete ( f , 1 ) ;
12953: LD_ADDR_VAR 0 12
12957: PUSH
12958: LD_VAR 0 12
12962: PPUSH
12963: LD_INT 1
12965: PPUSH
12966: CALL_OW 3
12970: ST_TO_ADDR
// if not f then
12971: LD_VAR 0 12
12975: NOT
12976: IFFALSE 12994
// begin x := x + 2 ;
12978: LD_ADDR_VAR 0 13
12982: PUSH
12983: LD_VAR 0 13
12987: PUSH
12988: LD_INT 2
12990: PLUS
12991: ST_TO_ADDR
// continue ;
12992: GO 12788
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12994: LD_VAR 0 12
12998: PUSH
12999: LD_INT 1
13001: ARRAY
13002: PPUSH
13003: CALL_OW 266
13007: PUSH
13008: LD_INT 5
13010: EQUAL
13011: IFFALSE 13085
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13013: LD_VAR 0 12
13017: PUSH
13018: LD_INT 1
13020: ARRAY
13021: PPUSH
13022: CALL_OW 313
13026: PUSH
13027: LD_INT 3
13029: LESS
13030: IFFALSE 13066
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13032: LD_INT 0
13034: PPUSH
13035: LD_INT 5
13037: PUSH
13038: LD_INT 8
13040: PUSH
13041: LD_INT 9
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: LIST
13048: PUSH
13049: LD_VAR 0 17
13053: ARRAY
13054: PPUSH
13055: LD_VAR 0 4
13059: PPUSH
13060: CALL_OW 380
13064: GO 13083
// PrepareHuman ( false , i , skill ) ;
13066: LD_INT 0
13068: PPUSH
13069: LD_VAR 0 8
13073: PPUSH
13074: LD_VAR 0 4
13078: PPUSH
13079: CALL_OW 380
// end else
13083: GO 13102
// PrepareHuman ( false , i , skill ) ;
13085: LD_INT 0
13087: PPUSH
13088: LD_VAR 0 8
13092: PPUSH
13093: LD_VAR 0 4
13097: PPUSH
13098: CALL_OW 380
// un := CreateHuman ;
13102: LD_ADDR_VAR 0 14
13106: PUSH
13107: CALL_OW 44
13111: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13112: LD_ADDR_VAR 0 7
13116: PUSH
13117: LD_VAR 0 7
13121: PPUSH
13122: LD_INT 1
13124: PPUSH
13125: LD_VAR 0 14
13129: PPUSH
13130: CALL_OW 2
13134: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13135: LD_VAR 0 14
13139: PPUSH
13140: LD_VAR 0 12
13144: PUSH
13145: LD_INT 1
13147: ARRAY
13148: PPUSH
13149: CALL_OW 52
// end ;
13153: GO 12788
13155: POP
13156: POP
// end ;
13157: GO 12088
13159: POP
13160: POP
// result := result ^ buildings ;
13161: LD_ADDR_VAR 0 7
13165: PUSH
13166: LD_VAR 0 7
13170: PUSH
13171: LD_VAR 0 18
13175: ADD
13176: ST_TO_ADDR
// end else
13177: GO 13320
// begin for i = 1 to personel do
13179: LD_ADDR_VAR 0 8
13183: PUSH
13184: DOUBLE
13185: LD_INT 1
13187: DEC
13188: ST_TO_ADDR
13189: LD_VAR 0 6
13193: PUSH
13194: FOR_TO
13195: IFFALSE 13318
// begin if i > 4 then
13197: LD_VAR 0 8
13201: PUSH
13202: LD_INT 4
13204: GREATER
13205: IFFALSE 13209
// break ;
13207: GO 13318
// x := personel [ i ] ;
13209: LD_ADDR_VAR 0 13
13213: PUSH
13214: LD_VAR 0 6
13218: PUSH
13219: LD_VAR 0 8
13223: ARRAY
13224: ST_TO_ADDR
// if x = - 1 then
13225: LD_VAR 0 13
13229: PUSH
13230: LD_INT 1
13232: NEG
13233: EQUAL
13234: IFFALSE 13238
// continue ;
13236: GO 13194
// PrepareHuman ( false , i , skill ) ;
13238: LD_INT 0
13240: PPUSH
13241: LD_VAR 0 8
13245: PPUSH
13246: LD_VAR 0 4
13250: PPUSH
13251: CALL_OW 380
// un := CreateHuman ;
13255: LD_ADDR_VAR 0 14
13259: PUSH
13260: CALL_OW 44
13264: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13265: LD_VAR 0 14
13269: PPUSH
13270: LD_VAR 0 1
13274: PPUSH
13275: CALL_OW 250
13279: PPUSH
13280: LD_VAR 0 1
13284: PPUSH
13285: CALL_OW 251
13289: PPUSH
13290: LD_INT 10
13292: PPUSH
13293: LD_INT 0
13295: PPUSH
13296: CALL_OW 50
// result := result ^ un ;
13300: LD_ADDR_VAR 0 7
13304: PUSH
13305: LD_VAR 0 7
13309: PUSH
13310: LD_VAR 0 14
13314: ADD
13315: ST_TO_ADDR
// end ;
13316: GO 13194
13318: POP
13319: POP
// end ; end ;
13320: LD_VAR 0 7
13324: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13325: LD_INT 0
13327: PPUSH
13328: PPUSH
13329: PPUSH
13330: PPUSH
13331: PPUSH
13332: PPUSH
13333: PPUSH
13334: PPUSH
13335: PPUSH
13336: PPUSH
13337: PPUSH
13338: PPUSH
13339: PPUSH
13340: PPUSH
13341: PPUSH
13342: PPUSH
// result := false ;
13343: LD_ADDR_VAR 0 3
13347: PUSH
13348: LD_INT 0
13350: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13351: LD_VAR 0 1
13355: NOT
13356: IFTRUE 13381
13358: PUSH
13359: LD_VAR 0 1
13363: PPUSH
13364: CALL_OW 266
13368: PUSH
13369: LD_INT 32
13371: PUSH
13372: LD_INT 33
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: IN
13379: NOT
13380: OR
13381: IFFALSE 13385
// exit ;
13383: GO 14520
// nat := GetNation ( tower ) ;
13385: LD_ADDR_VAR 0 12
13389: PUSH
13390: LD_VAR 0 1
13394: PPUSH
13395: CALL_OW 248
13399: ST_TO_ADDR
// side := GetSide ( tower ) ;
13400: LD_ADDR_VAR 0 16
13404: PUSH
13405: LD_VAR 0 1
13409: PPUSH
13410: CALL_OW 255
13414: ST_TO_ADDR
// x := GetX ( tower ) ;
13415: LD_ADDR_VAR 0 10
13419: PUSH
13420: LD_VAR 0 1
13424: PPUSH
13425: CALL_OW 250
13429: ST_TO_ADDR
// y := GetY ( tower ) ;
13430: LD_ADDR_VAR 0 11
13434: PUSH
13435: LD_VAR 0 1
13439: PPUSH
13440: CALL_OW 251
13444: ST_TO_ADDR
// if not x or not y then
13445: LD_VAR 0 10
13449: NOT
13450: IFTRUE 13459
13452: PUSH
13453: LD_VAR 0 11
13457: NOT
13458: OR
13459: IFFALSE 13463
// exit ;
13461: GO 14520
// weapon := 0 ;
13463: LD_ADDR_VAR 0 18
13467: PUSH
13468: LD_INT 0
13470: ST_TO_ADDR
// fac_list := [ ] ;
13471: LD_ADDR_VAR 0 17
13475: PUSH
13476: EMPTY
13477: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13478: LD_ADDR_VAR 0 6
13482: PUSH
13483: LD_VAR 0 1
13487: PPUSH
13488: CALL_OW 274
13492: PPUSH
13493: LD_VAR 0 2
13497: PPUSH
13498: LD_INT 0
13500: PPUSH
13501: CALL 11055 0 3
13505: PPUSH
13506: LD_INT 30
13508: PUSH
13509: LD_INT 3
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: PPUSH
13516: CALL_OW 72
13520: ST_TO_ADDR
// if not factories then
13521: LD_VAR 0 6
13525: NOT
13526: IFFALSE 13530
// exit ;
13528: GO 14520
// for i in factories do
13530: LD_ADDR_VAR 0 8
13534: PUSH
13535: LD_VAR 0 6
13539: PUSH
13540: FOR_IN
13541: IFFALSE 13566
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13543: LD_ADDR_VAR 0 17
13547: PUSH
13548: LD_VAR 0 17
13552: PUSH
13553: LD_VAR 0 8
13557: PPUSH
13558: CALL_OW 478
13562: UNION
13563: ST_TO_ADDR
13564: GO 13540
13566: POP
13567: POP
// if not fac_list then
13568: LD_VAR 0 17
13572: NOT
13573: IFFALSE 13577
// exit ;
13575: GO 14520
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13577: LD_ADDR_VAR 0 5
13581: PUSH
13582: LD_INT 4
13584: PUSH
13585: LD_INT 5
13587: PUSH
13588: LD_INT 9
13590: PUSH
13591: LD_INT 10
13593: PUSH
13594: LD_INT 6
13596: PUSH
13597: LD_INT 7
13599: PUSH
13600: LD_INT 11
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: PUSH
13612: LD_INT 27
13614: PUSH
13615: LD_INT 28
13617: PUSH
13618: LD_INT 26
13620: PUSH
13621: LD_INT 30
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: PUSH
13630: LD_INT 43
13632: PUSH
13633: LD_INT 44
13635: PUSH
13636: LD_INT 46
13638: PUSH
13639: LD_INT 45
13641: PUSH
13642: LD_INT 47
13644: PUSH
13645: LD_INT 49
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: LIST
13660: PUSH
13661: LD_VAR 0 12
13665: ARRAY
13666: ST_TO_ADDR
// list := list isect fac_list ;
13667: LD_ADDR_VAR 0 5
13671: PUSH
13672: LD_VAR 0 5
13676: PUSH
13677: LD_VAR 0 17
13681: ISECT
13682: ST_TO_ADDR
// if not list then
13683: LD_VAR 0 5
13687: NOT
13688: IFFALSE 13692
// exit ;
13690: GO 14520
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13692: LD_VAR 0 12
13696: PUSH
13697: LD_INT 3
13699: EQUAL
13700: IFFALSE 13712
13702: PUSH
13703: LD_INT 49
13705: PUSH
13706: LD_VAR 0 5
13710: IN
13711: AND
13712: IFFALSE 13732
13714: PUSH
13715: LD_INT 31
13717: PPUSH
13718: LD_VAR 0 16
13722: PPUSH
13723: CALL_OW 321
13727: PUSH
13728: LD_INT 2
13730: EQUAL
13731: AND
13732: IFFALSE 13792
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13734: LD_INT 22
13736: PUSH
13737: LD_VAR 0 16
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PUSH
13746: LD_INT 35
13748: PUSH
13749: LD_INT 49
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: PUSH
13756: LD_INT 91
13758: PUSH
13759: LD_VAR 0 1
13763: PUSH
13764: LD_INT 10
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: LIST
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: LIST
13776: PPUSH
13777: CALL_OW 69
13781: NOT
13782: IFFALSE 13792
// weapon := ru_time_lapser ;
13784: LD_ADDR_VAR 0 18
13788: PUSH
13789: LD_INT 49
13791: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13792: LD_VAR 0 12
13796: PUSH
13797: LD_INT 1
13799: PUSH
13800: LD_INT 2
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: IN
13807: IFFALSE 13831
13809: PUSH
13810: LD_INT 11
13812: PUSH
13813: LD_VAR 0 5
13817: IN
13818: IFTRUE 13830
13820: PUSH
13821: LD_INT 30
13823: PUSH
13824: LD_VAR 0 5
13828: IN
13829: OR
13830: AND
13831: IFFALSE 13851
13833: PUSH
13834: LD_INT 6
13836: PPUSH
13837: LD_VAR 0 16
13841: PPUSH
13842: CALL_OW 321
13846: PUSH
13847: LD_INT 2
13849: EQUAL
13850: AND
13851: IFFALSE 14018
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13853: LD_INT 22
13855: PUSH
13856: LD_VAR 0 16
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PUSH
13865: LD_INT 2
13867: PUSH
13868: LD_INT 35
13870: PUSH
13871: LD_INT 11
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: PUSH
13878: LD_INT 35
13880: PUSH
13881: LD_INT 30
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: LIST
13892: PUSH
13893: LD_INT 91
13895: PUSH
13896: LD_VAR 0 1
13900: PUSH
13901: LD_INT 18
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: LIST
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: LIST
13913: PPUSH
13914: CALL_OW 69
13918: NOT
13919: IFFALSE 13995
13921: PUSH
13922: LD_INT 22
13924: PUSH
13925: LD_VAR 0 16
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PUSH
13934: LD_INT 2
13936: PUSH
13937: LD_INT 30
13939: PUSH
13940: LD_INT 32
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: PUSH
13947: LD_INT 30
13949: PUSH
13950: LD_INT 33
13952: PUSH
13953: EMPTY
13954: LIST
13955: LIST
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: LIST
13961: PUSH
13962: LD_INT 91
13964: PUSH
13965: LD_VAR 0 1
13969: PUSH
13970: LD_INT 12
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: LIST
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: LIST
13982: PUSH
13983: EMPTY
13984: LIST
13985: PPUSH
13986: CALL_OW 69
13990: PUSH
13991: LD_INT 2
13993: GREATER
13994: AND
13995: IFFALSE 14018
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13997: LD_ADDR_VAR 0 18
14001: PUSH
14002: LD_INT 11
14004: PUSH
14005: LD_INT 30
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PUSH
14012: LD_VAR 0 12
14016: ARRAY
14017: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14018: LD_VAR 0 18
14022: NOT
14023: IFFALSE 14043
14025: PUSH
14026: LD_INT 40
14028: PPUSH
14029: LD_VAR 0 16
14033: PPUSH
14034: CALL_OW 321
14038: PUSH
14039: LD_INT 2
14041: EQUAL
14042: AND
14043: IFFALSE 14079
14045: PUSH
14046: LD_INT 7
14048: PUSH
14049: LD_VAR 0 5
14053: IN
14054: IFTRUE 14066
14056: PUSH
14057: LD_INT 28
14059: PUSH
14060: LD_VAR 0 5
14064: IN
14065: OR
14066: IFTRUE 14078
14068: PUSH
14069: LD_INT 45
14071: PUSH
14072: LD_VAR 0 5
14076: IN
14077: OR
14078: AND
14079: IFFALSE 14333
// begin hex := GetHexInfo ( x , y ) ;
14081: LD_ADDR_VAR 0 4
14085: PUSH
14086: LD_VAR 0 10
14090: PPUSH
14091: LD_VAR 0 11
14095: PPUSH
14096: CALL_OW 546
14100: ST_TO_ADDR
// if hex [ 1 ] then
14101: LD_VAR 0 4
14105: PUSH
14106: LD_INT 1
14108: ARRAY
14109: IFFALSE 14113
// exit ;
14111: GO 14520
// height := hex [ 2 ] ;
14113: LD_ADDR_VAR 0 15
14117: PUSH
14118: LD_VAR 0 4
14122: PUSH
14123: LD_INT 2
14125: ARRAY
14126: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14127: LD_ADDR_VAR 0 14
14131: PUSH
14132: LD_INT 0
14134: PUSH
14135: LD_INT 2
14137: PUSH
14138: LD_INT 3
14140: PUSH
14141: LD_INT 5
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: ST_TO_ADDR
// for i in tmp do
14150: LD_ADDR_VAR 0 8
14154: PUSH
14155: LD_VAR 0 14
14159: PUSH
14160: FOR_IN
14161: IFFALSE 14331
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14163: LD_ADDR_VAR 0 9
14167: PUSH
14168: LD_VAR 0 10
14172: PPUSH
14173: LD_VAR 0 8
14177: PPUSH
14178: LD_INT 5
14180: PPUSH
14181: CALL_OW 272
14185: PUSH
14186: LD_VAR 0 11
14190: PPUSH
14191: LD_VAR 0 8
14195: PPUSH
14196: LD_INT 5
14198: PPUSH
14199: CALL_OW 273
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14208: LD_VAR 0 9
14212: PUSH
14213: LD_INT 1
14215: ARRAY
14216: PPUSH
14217: LD_VAR 0 9
14221: PUSH
14222: LD_INT 2
14224: ARRAY
14225: PPUSH
14226: CALL_OW 488
14230: IFFALSE 14329
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14232: LD_ADDR_VAR 0 4
14236: PUSH
14237: LD_VAR 0 9
14241: PUSH
14242: LD_INT 1
14244: ARRAY
14245: PPUSH
14246: LD_VAR 0 9
14250: PUSH
14251: LD_INT 2
14253: ARRAY
14254: PPUSH
14255: CALL_OW 546
14259: ST_TO_ADDR
// if hex [ 1 ] then
14260: LD_VAR 0 4
14264: PUSH
14265: LD_INT 1
14267: ARRAY
14268: IFFALSE 14272
// continue ;
14270: GO 14160
// h := hex [ 2 ] ;
14272: LD_ADDR_VAR 0 13
14276: PUSH
14277: LD_VAR 0 4
14281: PUSH
14282: LD_INT 2
14284: ARRAY
14285: ST_TO_ADDR
// if h + 7 < height then
14286: LD_VAR 0 13
14290: PUSH
14291: LD_INT 7
14293: PLUS
14294: PUSH
14295: LD_VAR 0 15
14299: LESS
14300: IFFALSE 14329
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14302: LD_ADDR_VAR 0 18
14306: PUSH
14307: LD_INT 7
14309: PUSH
14310: LD_INT 28
14312: PUSH
14313: LD_INT 45
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: LIST
14320: PUSH
14321: LD_VAR 0 12
14325: ARRAY
14326: ST_TO_ADDR
// break ;
14327: GO 14331
// end ; end ; end ;
14329: GO 14160
14331: POP
14332: POP
// end ; if not weapon then
14333: LD_VAR 0 18
14337: NOT
14338: IFFALSE 14398
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14340: LD_ADDR_VAR 0 5
14344: PUSH
14345: LD_VAR 0 5
14349: PUSH
14350: LD_INT 11
14352: PUSH
14353: LD_INT 30
14355: PUSH
14356: LD_INT 49
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: LIST
14363: DIFF
14364: ST_TO_ADDR
// if not list then
14365: LD_VAR 0 5
14369: NOT
14370: IFFALSE 14374
// exit ;
14372: GO 14520
// weapon := list [ rand ( 1 , list ) ] ;
14374: LD_ADDR_VAR 0 18
14378: PUSH
14379: LD_VAR 0 5
14383: PUSH
14384: LD_INT 1
14386: PPUSH
14387: LD_VAR 0 5
14391: PPUSH
14392: CALL_OW 12
14396: ARRAY
14397: ST_TO_ADDR
// end ; if weapon then
14398: LD_VAR 0 18
14402: IFFALSE 14520
// begin tmp := CostOfWeapon ( weapon ) ;
14404: LD_ADDR_VAR 0 14
14408: PUSH
14409: LD_VAR 0 18
14413: PPUSH
14414: CALL_OW 451
14418: ST_TO_ADDR
// j := GetBase ( tower ) ;
14419: LD_ADDR_VAR 0 9
14423: PUSH
14424: LD_VAR 0 1
14428: PPUSH
14429: CALL_OW 274
14433: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14434: LD_VAR 0 9
14438: PPUSH
14439: LD_INT 1
14441: PPUSH
14442: CALL_OW 275
14446: PUSH
14447: LD_VAR 0 14
14451: PUSH
14452: LD_INT 1
14454: ARRAY
14455: GREATEREQUAL
14456: IFFALSE 14482
14458: PUSH
14459: LD_VAR 0 9
14463: PPUSH
14464: LD_INT 2
14466: PPUSH
14467: CALL_OW 275
14471: PUSH
14472: LD_VAR 0 14
14476: PUSH
14477: LD_INT 2
14479: ARRAY
14480: GREATEREQUAL
14481: AND
14482: IFFALSE 14508
14484: PUSH
14485: LD_VAR 0 9
14489: PPUSH
14490: LD_INT 3
14492: PPUSH
14493: CALL_OW 275
14497: PUSH
14498: LD_VAR 0 14
14502: PUSH
14503: LD_INT 3
14505: ARRAY
14506: GREATEREQUAL
14507: AND
14508: IFFALSE 14520
// result := weapon ;
14510: LD_ADDR_VAR 0 3
14514: PUSH
14515: LD_VAR 0 18
14519: ST_TO_ADDR
// end ; end ;
14520: LD_VAR 0 3
14524: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14525: LD_INT 0
14527: PPUSH
14528: PPUSH
// result := true ;
14529: LD_ADDR_VAR 0 3
14533: PUSH
14534: LD_INT 1
14536: ST_TO_ADDR
// if array1 = array2 then
14537: LD_VAR 0 1
14541: PUSH
14542: LD_VAR 0 2
14546: EQUAL
14547: IFFALSE 14607
// begin for i = 1 to array1 do
14549: LD_ADDR_VAR 0 4
14553: PUSH
14554: DOUBLE
14555: LD_INT 1
14557: DEC
14558: ST_TO_ADDR
14559: LD_VAR 0 1
14563: PUSH
14564: FOR_TO
14565: IFFALSE 14603
// if array1 [ i ] <> array2 [ i ] then
14567: LD_VAR 0 1
14571: PUSH
14572: LD_VAR 0 4
14576: ARRAY
14577: PUSH
14578: LD_VAR 0 2
14582: PUSH
14583: LD_VAR 0 4
14587: ARRAY
14588: NONEQUAL
14589: IFFALSE 14601
// begin result := false ;
14591: LD_ADDR_VAR 0 3
14595: PUSH
14596: LD_INT 0
14598: ST_TO_ADDR
// break ;
14599: GO 14603
// end ;
14601: GO 14564
14603: POP
14604: POP
// end else
14605: GO 14615
// result := false ;
14607: LD_ADDR_VAR 0 3
14611: PUSH
14612: LD_INT 0
14614: ST_TO_ADDR
// end ;
14615: LD_VAR 0 3
14619: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14620: LD_INT 0
14622: PPUSH
14623: PPUSH
// if not array1 or not array2 then
14624: LD_VAR 0 1
14628: NOT
14629: IFTRUE 14638
14631: PUSH
14632: LD_VAR 0 2
14636: NOT
14637: OR
14638: IFFALSE 14642
// exit ;
14640: GO 14706
// result := true ;
14642: LD_ADDR_VAR 0 3
14646: PUSH
14647: LD_INT 1
14649: ST_TO_ADDR
// for i = 1 to array1 do
14650: LD_ADDR_VAR 0 4
14654: PUSH
14655: DOUBLE
14656: LD_INT 1
14658: DEC
14659: ST_TO_ADDR
14660: LD_VAR 0 1
14664: PUSH
14665: FOR_TO
14666: IFFALSE 14704
// if array1 [ i ] <> array2 [ i ] then
14668: LD_VAR 0 1
14672: PUSH
14673: LD_VAR 0 4
14677: ARRAY
14678: PUSH
14679: LD_VAR 0 2
14683: PUSH
14684: LD_VAR 0 4
14688: ARRAY
14689: NONEQUAL
14690: IFFALSE 14702
// begin result := false ;
14692: LD_ADDR_VAR 0 3
14696: PUSH
14697: LD_INT 0
14699: ST_TO_ADDR
// break ;
14700: GO 14704
// end ;
14702: GO 14665
14704: POP
14705: POP
// end ;
14706: LD_VAR 0 3
14710: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14711: LD_INT 0
14713: PPUSH
14714: PPUSH
14715: PPUSH
// pom := GetBase ( fac ) ;
14716: LD_ADDR_VAR 0 5
14720: PUSH
14721: LD_VAR 0 1
14725: PPUSH
14726: CALL_OW 274
14730: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14731: LD_ADDR_VAR 0 4
14735: PUSH
14736: LD_VAR 0 2
14740: PUSH
14741: LD_INT 1
14743: ARRAY
14744: PPUSH
14745: LD_VAR 0 2
14749: PUSH
14750: LD_INT 2
14752: ARRAY
14753: PPUSH
14754: LD_VAR 0 2
14758: PUSH
14759: LD_INT 3
14761: ARRAY
14762: PPUSH
14763: LD_VAR 0 2
14767: PUSH
14768: LD_INT 4
14770: ARRAY
14771: PPUSH
14772: CALL_OW 449
14776: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14777: LD_ADDR_VAR 0 3
14781: PUSH
14782: LD_VAR 0 5
14786: PPUSH
14787: LD_INT 1
14789: PPUSH
14790: CALL_OW 275
14794: PUSH
14795: LD_VAR 0 4
14799: PUSH
14800: LD_INT 1
14802: ARRAY
14803: GREATEREQUAL
14804: IFFALSE 14830
14806: PUSH
14807: LD_VAR 0 5
14811: PPUSH
14812: LD_INT 2
14814: PPUSH
14815: CALL_OW 275
14819: PUSH
14820: LD_VAR 0 4
14824: PUSH
14825: LD_INT 2
14827: ARRAY
14828: GREATEREQUAL
14829: AND
14830: IFFALSE 14856
14832: PUSH
14833: LD_VAR 0 5
14837: PPUSH
14838: LD_INT 3
14840: PPUSH
14841: CALL_OW 275
14845: PUSH
14846: LD_VAR 0 4
14850: PUSH
14851: LD_INT 3
14853: ARRAY
14854: GREATEREQUAL
14855: AND
14856: ST_TO_ADDR
// end ;
14857: LD_VAR 0 3
14861: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14862: LD_INT 0
14864: PPUSH
14865: PPUSH
14866: PPUSH
14867: PPUSH
// pom := GetBase ( building ) ;
14868: LD_ADDR_VAR 0 3
14872: PUSH
14873: LD_VAR 0 1
14877: PPUSH
14878: CALL_OW 274
14882: ST_TO_ADDR
// if not pom then
14883: LD_VAR 0 3
14887: NOT
14888: IFFALSE 14892
// exit ;
14890: GO 15066
// btype := GetBType ( building ) ;
14892: LD_ADDR_VAR 0 5
14896: PUSH
14897: LD_VAR 0 1
14901: PPUSH
14902: CALL_OW 266
14906: ST_TO_ADDR
// if btype = b_armoury then
14907: LD_VAR 0 5
14911: PUSH
14912: LD_INT 4
14914: EQUAL
14915: IFFALSE 14925
// btype := b_barracks ;
14917: LD_ADDR_VAR 0 5
14921: PUSH
14922: LD_INT 5
14924: ST_TO_ADDR
// if btype = b_depot then
14925: LD_VAR 0 5
14929: PUSH
14930: LD_INT 0
14932: EQUAL
14933: IFFALSE 14943
// btype := b_warehouse ;
14935: LD_ADDR_VAR 0 5
14939: PUSH
14940: LD_INT 1
14942: ST_TO_ADDR
// if btype = b_workshop then
14943: LD_VAR 0 5
14947: PUSH
14948: LD_INT 2
14950: EQUAL
14951: IFFALSE 14961
// btype := b_factory ;
14953: LD_ADDR_VAR 0 5
14957: PUSH
14958: LD_INT 3
14960: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14961: LD_ADDR_VAR 0 4
14965: PUSH
14966: LD_VAR 0 5
14970: PPUSH
14971: LD_VAR 0 1
14975: PPUSH
14976: CALL_OW 248
14980: PPUSH
14981: CALL_OW 450
14985: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14986: LD_ADDR_VAR 0 2
14990: PUSH
14991: LD_VAR 0 3
14995: PPUSH
14996: LD_INT 1
14998: PPUSH
14999: CALL_OW 275
15003: PUSH
15004: LD_VAR 0 4
15008: PUSH
15009: LD_INT 1
15011: ARRAY
15012: GREATEREQUAL
15013: IFFALSE 15039
15015: PUSH
15016: LD_VAR 0 3
15020: PPUSH
15021: LD_INT 2
15023: PPUSH
15024: CALL_OW 275
15028: PUSH
15029: LD_VAR 0 4
15033: PUSH
15034: LD_INT 2
15036: ARRAY
15037: GREATEREQUAL
15038: AND
15039: IFFALSE 15065
15041: PUSH
15042: LD_VAR 0 3
15046: PPUSH
15047: LD_INT 3
15049: PPUSH
15050: CALL_OW 275
15054: PUSH
15055: LD_VAR 0 4
15059: PUSH
15060: LD_INT 3
15062: ARRAY
15063: GREATEREQUAL
15064: AND
15065: ST_TO_ADDR
// end ;
15066: LD_VAR 0 2
15070: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15071: LD_INT 0
15073: PPUSH
15074: PPUSH
15075: PPUSH
// pom := GetBase ( building ) ;
15076: LD_ADDR_VAR 0 4
15080: PUSH
15081: LD_VAR 0 1
15085: PPUSH
15086: CALL_OW 274
15090: ST_TO_ADDR
// if not pom then
15091: LD_VAR 0 4
15095: NOT
15096: IFFALSE 15100
// exit ;
15098: GO 15205
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15100: LD_ADDR_VAR 0 5
15104: PUSH
15105: LD_VAR 0 2
15109: PPUSH
15110: LD_VAR 0 1
15114: PPUSH
15115: CALL_OW 248
15119: PPUSH
15120: CALL_OW 450
15124: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15125: LD_ADDR_VAR 0 3
15129: PUSH
15130: LD_VAR 0 4
15134: PPUSH
15135: LD_INT 1
15137: PPUSH
15138: CALL_OW 275
15142: PUSH
15143: LD_VAR 0 5
15147: PUSH
15148: LD_INT 1
15150: ARRAY
15151: GREATEREQUAL
15152: IFFALSE 15178
15154: PUSH
15155: LD_VAR 0 4
15159: PPUSH
15160: LD_INT 2
15162: PPUSH
15163: CALL_OW 275
15167: PUSH
15168: LD_VAR 0 5
15172: PUSH
15173: LD_INT 2
15175: ARRAY
15176: GREATEREQUAL
15177: AND
15178: IFFALSE 15204
15180: PUSH
15181: LD_VAR 0 4
15185: PPUSH
15186: LD_INT 3
15188: PPUSH
15189: CALL_OW 275
15193: PUSH
15194: LD_VAR 0 5
15198: PUSH
15199: LD_INT 3
15201: ARRAY
15202: GREATEREQUAL
15203: AND
15204: ST_TO_ADDR
// end ;
15205: LD_VAR 0 3
15209: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15210: LD_INT 0
15212: PPUSH
15213: PPUSH
15214: PPUSH
15215: PPUSH
15216: PPUSH
15217: PPUSH
15218: PPUSH
15219: PPUSH
15220: PPUSH
15221: PPUSH
15222: PPUSH
// result := false ;
15223: LD_ADDR_VAR 0 8
15227: PUSH
15228: LD_INT 0
15230: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15231: LD_VAR 0 5
15235: NOT
15236: IFTRUE 15245
15238: PUSH
15239: LD_VAR 0 1
15243: NOT
15244: OR
15245: IFTRUE 15254
15247: PUSH
15248: LD_VAR 0 2
15252: NOT
15253: OR
15254: IFTRUE 15263
15256: PUSH
15257: LD_VAR 0 3
15261: NOT
15262: OR
15263: IFFALSE 15267
// exit ;
15265: GO 16093
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15267: LD_ADDR_VAR 0 14
15271: PUSH
15272: LD_VAR 0 1
15276: PPUSH
15277: LD_VAR 0 2
15281: PPUSH
15282: LD_VAR 0 3
15286: PPUSH
15287: LD_VAR 0 4
15291: PPUSH
15292: LD_VAR 0 5
15296: PUSH
15297: LD_INT 1
15299: ARRAY
15300: PPUSH
15301: CALL_OW 248
15305: PPUSH
15306: LD_INT 0
15308: PPUSH
15309: CALL 17374 0 6
15313: ST_TO_ADDR
// if not hexes then
15314: LD_VAR 0 14
15318: NOT
15319: IFFALSE 15323
// exit ;
15321: GO 16093
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15323: LD_ADDR_VAR 0 17
15327: PUSH
15328: LD_VAR 0 5
15332: PPUSH
15333: LD_INT 22
15335: PUSH
15336: LD_VAR 0 13
15340: PPUSH
15341: CALL_OW 255
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: PUSH
15350: LD_INT 2
15352: PUSH
15353: LD_INT 30
15355: PUSH
15356: LD_INT 0
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PUSH
15363: LD_INT 30
15365: PUSH
15366: LD_INT 1
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: LIST
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PPUSH
15382: CALL_OW 72
15386: ST_TO_ADDR
// for i = 1 to hexes do
15387: LD_ADDR_VAR 0 9
15391: PUSH
15392: DOUBLE
15393: LD_INT 1
15395: DEC
15396: ST_TO_ADDR
15397: LD_VAR 0 14
15401: PUSH
15402: FOR_TO
15403: IFFALSE 16091
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15405: LD_ADDR_VAR 0 13
15409: PUSH
15410: LD_VAR 0 14
15414: PUSH
15415: LD_VAR 0 9
15419: ARRAY
15420: PUSH
15421: LD_INT 1
15423: ARRAY
15424: PPUSH
15425: LD_VAR 0 14
15429: PUSH
15430: LD_VAR 0 9
15434: ARRAY
15435: PUSH
15436: LD_INT 2
15438: ARRAY
15439: PPUSH
15440: CALL_OW 428
15444: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15445: LD_VAR 0 14
15449: PUSH
15450: LD_VAR 0 9
15454: ARRAY
15455: PUSH
15456: LD_INT 1
15458: ARRAY
15459: PPUSH
15460: LD_VAR 0 14
15464: PUSH
15465: LD_VAR 0 9
15469: ARRAY
15470: PUSH
15471: LD_INT 2
15473: ARRAY
15474: PPUSH
15475: CALL_OW 351
15479: IFTRUE 15518
15481: PUSH
15482: LD_VAR 0 14
15486: PUSH
15487: LD_VAR 0 9
15491: ARRAY
15492: PUSH
15493: LD_INT 1
15495: ARRAY
15496: PPUSH
15497: LD_VAR 0 14
15501: PUSH
15502: LD_VAR 0 9
15506: ARRAY
15507: PUSH
15508: LD_INT 2
15510: ARRAY
15511: PPUSH
15512: CALL_OW 488
15516: NOT
15517: OR
15518: IFTRUE 15535
15520: PUSH
15521: LD_VAR 0 13
15525: PPUSH
15526: CALL_OW 247
15530: PUSH
15531: LD_INT 3
15533: EQUAL
15534: OR
15535: IFFALSE 15541
// exit ;
15537: POP
15538: POP
15539: GO 16093
// if not tmp then
15541: LD_VAR 0 13
15545: NOT
15546: IFFALSE 15550
// continue ;
15548: GO 15402
// result := true ;
15550: LD_ADDR_VAR 0 8
15554: PUSH
15555: LD_INT 1
15557: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15558: LD_VAR 0 6
15562: IFFALSE 15579
15564: PUSH
15565: LD_VAR 0 13
15569: PPUSH
15570: CALL_OW 247
15574: PUSH
15575: LD_INT 2
15577: EQUAL
15578: AND
15579: IFFALSE 15596
15581: PUSH
15582: LD_VAR 0 13
15586: PPUSH
15587: CALL_OW 263
15591: PUSH
15592: LD_INT 1
15594: EQUAL
15595: AND
15596: IFFALSE 15760
// begin if IsDrivenBy ( tmp ) then
15598: LD_VAR 0 13
15602: PPUSH
15603: CALL_OW 311
15607: IFFALSE 15611
// continue ;
15609: GO 15402
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15611: LD_VAR 0 6
15615: PPUSH
15616: LD_INT 3
15618: PUSH
15619: LD_INT 60
15621: PUSH
15622: EMPTY
15623: LIST
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PUSH
15629: LD_INT 3
15631: PUSH
15632: LD_INT 55
15634: PUSH
15635: EMPTY
15636: LIST
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PPUSH
15646: CALL_OW 72
15650: IFFALSE 15758
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15652: LD_ADDR_VAR 0 18
15656: PUSH
15657: LD_VAR 0 6
15661: PPUSH
15662: LD_INT 3
15664: PUSH
15665: LD_INT 60
15667: PUSH
15668: EMPTY
15669: LIST
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PUSH
15675: LD_INT 3
15677: PUSH
15678: LD_INT 55
15680: PUSH
15681: EMPTY
15682: LIST
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PPUSH
15692: CALL_OW 72
15696: PUSH
15697: LD_INT 1
15699: ARRAY
15700: ST_TO_ADDR
// if IsInUnit ( driver ) then
15701: LD_VAR 0 18
15705: PPUSH
15706: CALL_OW 310
15710: IFFALSE 15721
// ComExit ( driver ) ;
15712: LD_VAR 0 18
15716: PPUSH
15717: CALL 41374 0 1
// AddComEnterUnit ( driver , tmp ) ;
15721: LD_VAR 0 18
15725: PPUSH
15726: LD_VAR 0 13
15730: PPUSH
15731: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15735: LD_VAR 0 18
15739: PPUSH
15740: LD_VAR 0 7
15744: PPUSH
15745: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15749: LD_VAR 0 18
15753: PPUSH
15754: CALL_OW 181
// end ; continue ;
15758: GO 15402
// end ; if not cleaners or not tmp in cleaners then
15760: LD_VAR 0 6
15764: NOT
15765: IFTRUE 15780
15767: PUSH
15768: LD_VAR 0 13
15772: PUSH
15773: LD_VAR 0 6
15777: IN
15778: NOT
15779: OR
15780: IFFALSE 16089
// begin if dep then
15782: LD_VAR 0 17
15786: IFFALSE 15922
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15788: LD_ADDR_VAR 0 16
15792: PUSH
15793: LD_VAR 0 17
15797: PUSH
15798: LD_INT 1
15800: ARRAY
15801: PPUSH
15802: CALL_OW 250
15806: PPUSH
15807: LD_VAR 0 17
15811: PUSH
15812: LD_INT 1
15814: ARRAY
15815: PPUSH
15816: CALL_OW 254
15820: PPUSH
15821: LD_INT 5
15823: PPUSH
15824: CALL_OW 272
15828: PUSH
15829: LD_VAR 0 17
15833: PUSH
15834: LD_INT 1
15836: ARRAY
15837: PPUSH
15838: CALL_OW 251
15842: PPUSH
15843: LD_VAR 0 17
15847: PUSH
15848: LD_INT 1
15850: ARRAY
15851: PPUSH
15852: CALL_OW 254
15856: PPUSH
15857: LD_INT 5
15859: PPUSH
15860: CALL_OW 273
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15869: LD_VAR 0 16
15873: PUSH
15874: LD_INT 1
15876: ARRAY
15877: PPUSH
15878: LD_VAR 0 16
15882: PUSH
15883: LD_INT 2
15885: ARRAY
15886: PPUSH
15887: CALL_OW 488
15891: IFFALSE 15922
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15893: LD_VAR 0 13
15897: PPUSH
15898: LD_VAR 0 16
15902: PUSH
15903: LD_INT 1
15905: ARRAY
15906: PPUSH
15907: LD_VAR 0 16
15911: PUSH
15912: LD_INT 2
15914: ARRAY
15915: PPUSH
15916: CALL_OW 111
// continue ;
15920: GO 15402
// end ; end ; r := GetDir ( tmp ) ;
15922: LD_ADDR_VAR 0 15
15926: PUSH
15927: LD_VAR 0 13
15931: PPUSH
15932: CALL_OW 254
15936: ST_TO_ADDR
// if r = 5 then
15937: LD_VAR 0 15
15941: PUSH
15942: LD_INT 5
15944: EQUAL
15945: IFFALSE 15955
// r := 0 ;
15947: LD_ADDR_VAR 0 15
15951: PUSH
15952: LD_INT 0
15954: ST_TO_ADDR
// for j = r to 5 do
15955: LD_ADDR_VAR 0 10
15959: PUSH
15960: DOUBLE
15961: LD_VAR 0 15
15965: DEC
15966: ST_TO_ADDR
15967: LD_INT 5
15969: PUSH
15970: FOR_TO
15971: IFFALSE 16087
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15973: LD_ADDR_VAR 0 11
15977: PUSH
15978: LD_VAR 0 13
15982: PPUSH
15983: CALL_OW 250
15987: PPUSH
15988: LD_VAR 0 10
15992: PPUSH
15993: LD_INT 2
15995: PPUSH
15996: CALL_OW 272
16000: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16001: LD_ADDR_VAR 0 12
16005: PUSH
16006: LD_VAR 0 13
16010: PPUSH
16011: CALL_OW 251
16015: PPUSH
16016: LD_VAR 0 10
16020: PPUSH
16021: LD_INT 2
16023: PPUSH
16024: CALL_OW 273
16028: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16029: LD_VAR 0 11
16033: PPUSH
16034: LD_VAR 0 12
16038: PPUSH
16039: CALL_OW 488
16043: IFFALSE 16062
16045: PUSH
16046: LD_VAR 0 11
16050: PPUSH
16051: LD_VAR 0 12
16055: PPUSH
16056: CALL_OW 428
16060: NOT
16061: AND
16062: IFFALSE 16085
// begin ComMoveXY ( tmp , _x , _y ) ;
16064: LD_VAR 0 13
16068: PPUSH
16069: LD_VAR 0 11
16073: PPUSH
16074: LD_VAR 0 12
16078: PPUSH
16079: CALL_OW 111
// break ;
16083: GO 16087
// end ; end ;
16085: GO 15970
16087: POP
16088: POP
// end ; end ;
16089: GO 15402
16091: POP
16092: POP
// end ;
16093: LD_VAR 0 8
16097: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16098: LD_INT 0
16100: PPUSH
// result := true ;
16101: LD_ADDR_VAR 0 3
16105: PUSH
16106: LD_INT 1
16108: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16109: LD_VAR 0 2
16113: PUSH
16114: LD_INT 24
16116: DOUBLE
16117: EQUAL
16118: IFTRUE 16128
16120: LD_INT 33
16122: DOUBLE
16123: EQUAL
16124: IFTRUE 16128
16126: GO 16153
16128: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16129: LD_ADDR_VAR 0 3
16133: PUSH
16134: LD_INT 32
16136: PPUSH
16137: LD_VAR 0 1
16141: PPUSH
16142: CALL_OW 321
16146: PUSH
16147: LD_INT 2
16149: EQUAL
16150: ST_TO_ADDR
16151: GO 16469
16153: LD_INT 20
16155: DOUBLE
16156: EQUAL
16157: IFTRUE 16161
16159: GO 16186
16161: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16162: LD_ADDR_VAR 0 3
16166: PUSH
16167: LD_INT 6
16169: PPUSH
16170: LD_VAR 0 1
16174: PPUSH
16175: CALL_OW 321
16179: PUSH
16180: LD_INT 2
16182: EQUAL
16183: ST_TO_ADDR
16184: GO 16469
16186: LD_INT 22
16188: DOUBLE
16189: EQUAL
16190: IFTRUE 16200
16192: LD_INT 36
16194: DOUBLE
16195: EQUAL
16196: IFTRUE 16200
16198: GO 16225
16200: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16201: LD_ADDR_VAR 0 3
16205: PUSH
16206: LD_INT 15
16208: PPUSH
16209: LD_VAR 0 1
16213: PPUSH
16214: CALL_OW 321
16218: PUSH
16219: LD_INT 2
16221: EQUAL
16222: ST_TO_ADDR
16223: GO 16469
16225: LD_INT 30
16227: DOUBLE
16228: EQUAL
16229: IFTRUE 16233
16231: GO 16258
16233: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16234: LD_ADDR_VAR 0 3
16238: PUSH
16239: LD_INT 20
16241: PPUSH
16242: LD_VAR 0 1
16246: PPUSH
16247: CALL_OW 321
16251: PUSH
16252: LD_INT 2
16254: EQUAL
16255: ST_TO_ADDR
16256: GO 16469
16258: LD_INT 28
16260: DOUBLE
16261: EQUAL
16262: IFTRUE 16272
16264: LD_INT 21
16266: DOUBLE
16267: EQUAL
16268: IFTRUE 16272
16270: GO 16297
16272: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16273: LD_ADDR_VAR 0 3
16277: PUSH
16278: LD_INT 21
16280: PPUSH
16281: LD_VAR 0 1
16285: PPUSH
16286: CALL_OW 321
16290: PUSH
16291: LD_INT 2
16293: EQUAL
16294: ST_TO_ADDR
16295: GO 16469
16297: LD_INT 16
16299: DOUBLE
16300: EQUAL
16301: IFTRUE 16305
16303: GO 16330
16305: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16306: LD_ADDR_VAR 0 3
16310: PUSH
16311: LD_INT 84
16313: PPUSH
16314: LD_VAR 0 1
16318: PPUSH
16319: CALL_OW 321
16323: PUSH
16324: LD_INT 2
16326: EQUAL
16327: ST_TO_ADDR
16328: GO 16469
16330: LD_INT 19
16332: DOUBLE
16333: EQUAL
16334: IFTRUE 16344
16336: LD_INT 23
16338: DOUBLE
16339: EQUAL
16340: IFTRUE 16344
16342: GO 16369
16344: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16345: LD_ADDR_VAR 0 3
16349: PUSH
16350: LD_INT 83
16352: PPUSH
16353: LD_VAR 0 1
16357: PPUSH
16358: CALL_OW 321
16362: PUSH
16363: LD_INT 2
16365: EQUAL
16366: ST_TO_ADDR
16367: GO 16469
16369: LD_INT 17
16371: DOUBLE
16372: EQUAL
16373: IFTRUE 16377
16375: GO 16402
16377: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16378: LD_ADDR_VAR 0 3
16382: PUSH
16383: LD_INT 39
16385: PPUSH
16386: LD_VAR 0 1
16390: PPUSH
16391: CALL_OW 321
16395: PUSH
16396: LD_INT 2
16398: EQUAL
16399: ST_TO_ADDR
16400: GO 16469
16402: LD_INT 18
16404: DOUBLE
16405: EQUAL
16406: IFTRUE 16410
16408: GO 16435
16410: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16411: LD_ADDR_VAR 0 3
16415: PUSH
16416: LD_INT 40
16418: PPUSH
16419: LD_VAR 0 1
16423: PPUSH
16424: CALL_OW 321
16428: PUSH
16429: LD_INT 2
16431: EQUAL
16432: ST_TO_ADDR
16433: GO 16469
16435: LD_INT 27
16437: DOUBLE
16438: EQUAL
16439: IFTRUE 16443
16441: GO 16468
16443: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16444: LD_ADDR_VAR 0 3
16448: PUSH
16449: LD_INT 35
16451: PPUSH
16452: LD_VAR 0 1
16456: PPUSH
16457: CALL_OW 321
16461: PUSH
16462: LD_INT 2
16464: EQUAL
16465: ST_TO_ADDR
16466: GO 16469
16468: POP
// end ;
16469: LD_VAR 0 3
16473: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16474: LD_INT 0
16476: PPUSH
16477: PPUSH
16478: PPUSH
16479: PPUSH
16480: PPUSH
16481: PPUSH
16482: PPUSH
16483: PPUSH
16484: PPUSH
16485: PPUSH
16486: PPUSH
// result := false ;
16487: LD_ADDR_VAR 0 6
16491: PUSH
16492: LD_INT 0
16494: ST_TO_ADDR
// if btype = b_depot then
16495: LD_VAR 0 2
16499: PUSH
16500: LD_INT 0
16502: EQUAL
16503: IFFALSE 16515
// begin result := true ;
16505: LD_ADDR_VAR 0 6
16509: PUSH
16510: LD_INT 1
16512: ST_TO_ADDR
// exit ;
16513: GO 17369
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16515: LD_VAR 0 1
16519: NOT
16520: IFTRUE 16545
16522: PUSH
16523: LD_VAR 0 1
16527: PPUSH
16528: CALL_OW 266
16532: PUSH
16533: LD_INT 0
16535: PUSH
16536: LD_INT 1
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: IN
16543: NOT
16544: OR
16545: IFTRUE 16554
16547: PUSH
16548: LD_VAR 0 2
16552: NOT
16553: OR
16554: IFTRUE 16590
16556: PUSH
16557: LD_VAR 0 5
16561: PUSH
16562: LD_INT 0
16564: PUSH
16565: LD_INT 1
16567: PUSH
16568: LD_INT 2
16570: PUSH
16571: LD_INT 3
16573: PUSH
16574: LD_INT 4
16576: PUSH
16577: LD_INT 5
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: IN
16588: NOT
16589: OR
16590: IFTRUE 16609
16592: PUSH
16593: LD_VAR 0 3
16597: PPUSH
16598: LD_VAR 0 4
16602: PPUSH
16603: CALL_OW 488
16607: NOT
16608: OR
16609: IFFALSE 16613
// exit ;
16611: GO 17369
// side := GetSide ( depot ) ;
16613: LD_ADDR_VAR 0 9
16617: PUSH
16618: LD_VAR 0 1
16622: PPUSH
16623: CALL_OW 255
16627: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16628: LD_VAR 0 9
16632: PPUSH
16633: LD_VAR 0 2
16637: PPUSH
16638: CALL 16098 0 2
16642: NOT
16643: IFFALSE 16647
// exit ;
16645: GO 17369
// pom := GetBase ( depot ) ;
16647: LD_ADDR_VAR 0 10
16651: PUSH
16652: LD_VAR 0 1
16656: PPUSH
16657: CALL_OW 274
16661: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16662: LD_ADDR_VAR 0 11
16666: PUSH
16667: LD_VAR 0 2
16671: PPUSH
16672: LD_VAR 0 1
16676: PPUSH
16677: CALL_OW 248
16681: PPUSH
16682: CALL_OW 450
16686: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16687: LD_VAR 0 10
16691: PPUSH
16692: LD_INT 1
16694: PPUSH
16695: CALL_OW 275
16699: PUSH
16700: LD_VAR 0 11
16704: PUSH
16705: LD_INT 1
16707: ARRAY
16708: GREATEREQUAL
16709: IFFALSE 16735
16711: PUSH
16712: LD_VAR 0 10
16716: PPUSH
16717: LD_INT 2
16719: PPUSH
16720: CALL_OW 275
16724: PUSH
16725: LD_VAR 0 11
16729: PUSH
16730: LD_INT 2
16732: ARRAY
16733: GREATEREQUAL
16734: AND
16735: IFFALSE 16761
16737: PUSH
16738: LD_VAR 0 10
16742: PPUSH
16743: LD_INT 3
16745: PPUSH
16746: CALL_OW 275
16750: PUSH
16751: LD_VAR 0 11
16755: PUSH
16756: LD_INT 3
16758: ARRAY
16759: GREATEREQUAL
16760: AND
16761: NOT
16762: IFFALSE 16766
// exit ;
16764: GO 17369
// if GetBType ( depot ) = b_depot then
16766: LD_VAR 0 1
16770: PPUSH
16771: CALL_OW 266
16775: PUSH
16776: LD_INT 0
16778: EQUAL
16779: IFFALSE 16791
// dist := 28 else
16781: LD_ADDR_VAR 0 14
16785: PUSH
16786: LD_INT 28
16788: ST_TO_ADDR
16789: GO 16799
// dist := 36 ;
16791: LD_ADDR_VAR 0 14
16795: PUSH
16796: LD_INT 36
16798: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16799: LD_VAR 0 1
16803: PPUSH
16804: LD_VAR 0 3
16808: PPUSH
16809: LD_VAR 0 4
16813: PPUSH
16814: CALL_OW 297
16818: PUSH
16819: LD_VAR 0 14
16823: GREATER
16824: IFFALSE 16828
// exit ;
16826: GO 17369
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16828: LD_ADDR_VAR 0 12
16832: PUSH
16833: LD_VAR 0 2
16837: PPUSH
16838: LD_VAR 0 3
16842: PPUSH
16843: LD_VAR 0 4
16847: PPUSH
16848: LD_VAR 0 5
16852: PPUSH
16853: LD_VAR 0 1
16857: PPUSH
16858: CALL_OW 248
16862: PPUSH
16863: LD_INT 0
16865: PPUSH
16866: CALL 17374 0 6
16870: ST_TO_ADDR
// if not hexes then
16871: LD_VAR 0 12
16875: NOT
16876: IFFALSE 16880
// exit ;
16878: GO 17369
// hex := GetHexInfo ( x , y ) ;
16880: LD_ADDR_VAR 0 15
16884: PUSH
16885: LD_VAR 0 3
16889: PPUSH
16890: LD_VAR 0 4
16894: PPUSH
16895: CALL_OW 546
16899: ST_TO_ADDR
// if hex [ 1 ] then
16900: LD_VAR 0 15
16904: PUSH
16905: LD_INT 1
16907: ARRAY
16908: IFFALSE 16912
// exit ;
16910: GO 17369
// height := hex [ 2 ] ;
16912: LD_ADDR_VAR 0 13
16916: PUSH
16917: LD_VAR 0 15
16921: PUSH
16922: LD_INT 2
16924: ARRAY
16925: ST_TO_ADDR
// for i = 1 to hexes do
16926: LD_ADDR_VAR 0 7
16930: PUSH
16931: DOUBLE
16932: LD_INT 1
16934: DEC
16935: ST_TO_ADDR
16936: LD_VAR 0 12
16940: PUSH
16941: FOR_TO
16942: IFFALSE 17286
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16944: LD_VAR 0 12
16948: PUSH
16949: LD_VAR 0 7
16953: ARRAY
16954: PUSH
16955: LD_INT 1
16957: ARRAY
16958: PPUSH
16959: LD_VAR 0 12
16963: PUSH
16964: LD_VAR 0 7
16968: ARRAY
16969: PUSH
16970: LD_INT 2
16972: ARRAY
16973: PPUSH
16974: CALL_OW 488
16978: NOT
16979: IFTRUE 17021
16981: PUSH
16982: LD_VAR 0 12
16986: PUSH
16987: LD_VAR 0 7
16991: ARRAY
16992: PUSH
16993: LD_INT 1
16995: ARRAY
16996: PPUSH
16997: LD_VAR 0 12
17001: PUSH
17002: LD_VAR 0 7
17006: ARRAY
17007: PUSH
17008: LD_INT 2
17010: ARRAY
17011: PPUSH
17012: CALL_OW 428
17016: PUSH
17017: LD_INT 0
17019: GREATER
17020: OR
17021: IFTRUE 17059
17023: PUSH
17024: LD_VAR 0 12
17028: PUSH
17029: LD_VAR 0 7
17033: ARRAY
17034: PUSH
17035: LD_INT 1
17037: ARRAY
17038: PPUSH
17039: LD_VAR 0 12
17043: PUSH
17044: LD_VAR 0 7
17048: ARRAY
17049: PUSH
17050: LD_INT 2
17052: ARRAY
17053: PPUSH
17054: CALL_OW 351
17058: OR
17059: IFFALSE 17065
// exit ;
17061: POP
17062: POP
17063: GO 17369
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17065: LD_ADDR_VAR 0 8
17069: PUSH
17070: LD_VAR 0 12
17074: PUSH
17075: LD_VAR 0 7
17079: ARRAY
17080: PUSH
17081: LD_INT 1
17083: ARRAY
17084: PPUSH
17085: LD_VAR 0 12
17089: PUSH
17090: LD_VAR 0 7
17094: ARRAY
17095: PUSH
17096: LD_INT 2
17098: ARRAY
17099: PPUSH
17100: CALL_OW 546
17104: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17105: LD_VAR 0 8
17109: PUSH
17110: LD_INT 1
17112: ARRAY
17113: IFTRUE 17135
17115: PUSH
17116: LD_VAR 0 8
17120: PUSH
17121: LD_INT 2
17123: ARRAY
17124: PUSH
17125: LD_VAR 0 13
17129: PUSH
17130: LD_INT 2
17132: PLUS
17133: GREATER
17134: OR
17135: IFTRUE 17157
17137: PUSH
17138: LD_VAR 0 8
17142: PUSH
17143: LD_INT 2
17145: ARRAY
17146: PUSH
17147: LD_VAR 0 13
17151: PUSH
17152: LD_INT 2
17154: MINUS
17155: LESS
17156: OR
17157: IFTRUE 17225
17159: PUSH
17160: LD_VAR 0 8
17164: PUSH
17165: LD_INT 3
17167: ARRAY
17168: PUSH
17169: LD_INT 0
17171: PUSH
17172: LD_INT 8
17174: PUSH
17175: LD_INT 9
17177: PUSH
17178: LD_INT 10
17180: PUSH
17181: LD_INT 11
17183: PUSH
17184: LD_INT 12
17186: PUSH
17187: LD_INT 13
17189: PUSH
17190: LD_INT 16
17192: PUSH
17193: LD_INT 17
17195: PUSH
17196: LD_INT 18
17198: PUSH
17199: LD_INT 19
17201: PUSH
17202: LD_INT 20
17204: PUSH
17205: LD_INT 21
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: IN
17223: NOT
17224: OR
17225: IFTRUE 17238
17227: PUSH
17228: LD_VAR 0 8
17232: PUSH
17233: LD_INT 5
17235: ARRAY
17236: NOT
17237: OR
17238: IFTRUE 17278
17240: PUSH
17241: LD_VAR 0 8
17245: PUSH
17246: LD_INT 6
17248: ARRAY
17249: PUSH
17250: LD_INT 1
17252: PUSH
17253: LD_INT 2
17255: PUSH
17256: LD_INT 7
17258: PUSH
17259: LD_INT 9
17261: PUSH
17262: LD_INT 10
17264: PUSH
17265: LD_INT 11
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: IN
17276: NOT
17277: OR
17278: IFFALSE 17284
// exit ;
17280: POP
17281: POP
17282: GO 17369
// end ;
17284: GO 16941
17286: POP
17287: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17288: LD_VAR 0 9
17292: PPUSH
17293: LD_VAR 0 3
17297: PPUSH
17298: LD_VAR 0 4
17302: PPUSH
17303: LD_INT 20
17305: PPUSH
17306: CALL 9188 0 4
17310: PUSH
17311: LD_INT 4
17313: ARRAY
17314: IFFALSE 17318
// exit ;
17316: GO 17369
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17318: LD_VAR 0 2
17322: PUSH
17323: LD_INT 29
17325: PUSH
17326: LD_INT 30
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: IN
17333: IFFALSE 17357
17335: PUSH
17336: LD_VAR 0 3
17340: PPUSH
17341: LD_VAR 0 4
17345: PPUSH
17346: LD_VAR 0 9
17350: PPUSH
17351: CALL_OW 440
17355: NOT
17356: AND
17357: IFFALSE 17361
// exit ;
17359: GO 17369
// result := true ;
17361: LD_ADDR_VAR 0 6
17365: PUSH
17366: LD_INT 1
17368: ST_TO_ADDR
// end ;
17369: LD_VAR 0 6
17373: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17374: LD_INT 0
17376: PPUSH
17377: PPUSH
17378: PPUSH
17379: PPUSH
17380: PPUSH
17381: PPUSH
17382: PPUSH
17383: PPUSH
17384: PPUSH
17385: PPUSH
17386: PPUSH
17387: PPUSH
17388: PPUSH
17389: PPUSH
17390: PPUSH
17391: PPUSH
17392: PPUSH
17393: PPUSH
17394: PPUSH
17395: PPUSH
17396: PPUSH
17397: PPUSH
17398: PPUSH
17399: PPUSH
17400: PPUSH
17401: PPUSH
17402: PPUSH
17403: PPUSH
17404: PPUSH
17405: PPUSH
17406: PPUSH
17407: PPUSH
17408: PPUSH
17409: PPUSH
17410: PPUSH
17411: PPUSH
17412: PPUSH
17413: PPUSH
17414: PPUSH
17415: PPUSH
17416: PPUSH
17417: PPUSH
17418: PPUSH
17419: PPUSH
17420: PPUSH
17421: PPUSH
17422: PPUSH
17423: PPUSH
17424: PPUSH
17425: PPUSH
17426: PPUSH
17427: PPUSH
17428: PPUSH
17429: PPUSH
17430: PPUSH
17431: PPUSH
17432: PPUSH
17433: PPUSH
// result = [ ] ;
17434: LD_ADDR_VAR 0 7
17438: PUSH
17439: EMPTY
17440: ST_TO_ADDR
// temp_list = [ ] ;
17441: LD_ADDR_VAR 0 9
17445: PUSH
17446: EMPTY
17447: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17448: LD_VAR 0 4
17452: PUSH
17453: LD_INT 0
17455: PUSH
17456: LD_INT 1
17458: PUSH
17459: LD_INT 2
17461: PUSH
17462: LD_INT 3
17464: PUSH
17465: LD_INT 4
17467: PUSH
17468: LD_INT 5
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: IN
17479: NOT
17480: IFTRUE 17523
17482: PUSH
17483: LD_VAR 0 1
17487: PUSH
17488: LD_INT 0
17490: PUSH
17491: LD_INT 1
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: IN
17498: IFFALSE 17522
17500: PUSH
17501: LD_VAR 0 5
17505: PUSH
17506: LD_INT 1
17508: PUSH
17509: LD_INT 2
17511: PUSH
17512: LD_INT 3
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: LIST
17519: IN
17520: NOT
17521: AND
17522: OR
17523: IFFALSE 17527
// exit ;
17525: GO 35926
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17527: LD_VAR 0 1
17531: PUSH
17532: LD_INT 6
17534: PUSH
17535: LD_INT 7
17537: PUSH
17538: LD_INT 8
17540: PUSH
17541: LD_INT 13
17543: PUSH
17544: LD_INT 12
17546: PUSH
17547: LD_INT 15
17549: PUSH
17550: LD_INT 11
17552: PUSH
17553: LD_INT 14
17555: PUSH
17556: LD_INT 10
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: IN
17570: IFFALSE 17580
// btype = b_lab ;
17572: LD_ADDR_VAR 0 1
17576: PUSH
17577: LD_INT 6
17579: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17580: LD_VAR 0 6
17584: PUSH
17585: LD_INT 0
17587: PUSH
17588: LD_INT 1
17590: PUSH
17591: LD_INT 2
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: LIST
17598: IN
17599: NOT
17600: IFTRUE 17668
17602: PUSH
17603: LD_VAR 0 1
17607: PUSH
17608: LD_INT 0
17610: PUSH
17611: LD_INT 1
17613: PUSH
17614: LD_INT 2
17616: PUSH
17617: LD_INT 3
17619: PUSH
17620: LD_INT 6
17622: PUSH
17623: LD_INT 36
17625: PUSH
17626: LD_INT 4
17628: PUSH
17629: LD_INT 5
17631: PUSH
17632: LD_INT 31
17634: PUSH
17635: LD_INT 32
17637: PUSH
17638: LD_INT 33
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: IN
17654: NOT
17655: IFFALSE 17667
17657: PUSH
17658: LD_VAR 0 6
17662: PUSH
17663: LD_INT 1
17665: EQUAL
17666: AND
17667: OR
17668: IFTRUE 17700
17670: PUSH
17671: LD_VAR 0 1
17675: PUSH
17676: LD_INT 2
17678: PUSH
17679: LD_INT 3
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: IN
17686: NOT
17687: IFFALSE 17699
17689: PUSH
17690: LD_VAR 0 6
17694: PUSH
17695: LD_INT 2
17697: EQUAL
17698: AND
17699: OR
17700: IFFALSE 17710
// mode = 0 ;
17702: LD_ADDR_VAR 0 6
17706: PUSH
17707: LD_INT 0
17709: ST_TO_ADDR
// case mode of 0 :
17710: LD_VAR 0 6
17714: PUSH
17715: LD_INT 0
17717: DOUBLE
17718: EQUAL
17719: IFTRUE 17723
17721: GO 29176
17723: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17724: LD_ADDR_VAR 0 11
17728: PUSH
17729: LD_INT 0
17731: PUSH
17732: LD_INT 0
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: LD_INT 0
17741: PUSH
17742: LD_INT 1
17744: NEG
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: PUSH
17750: LD_INT 1
17752: PUSH
17753: LD_INT 0
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: LD_INT 1
17762: PUSH
17763: LD_INT 1
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 0
17772: PUSH
17773: LD_INT 1
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: LD_INT 1
17782: NEG
17783: PUSH
17784: LD_INT 0
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: LD_INT 1
17793: NEG
17794: PUSH
17795: LD_INT 1
17797: NEG
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PUSH
17803: LD_INT 1
17805: NEG
17806: PUSH
17807: LD_INT 2
17809: NEG
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 0
17817: PUSH
17818: LD_INT 2
17820: NEG
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PUSH
17826: LD_INT 1
17828: PUSH
17829: LD_INT 1
17831: NEG
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: PUSH
17837: LD_INT 1
17839: PUSH
17840: LD_INT 2
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PUSH
17847: LD_INT 0
17849: PUSH
17850: LD_INT 2
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PUSH
17857: LD_INT 1
17859: NEG
17860: PUSH
17861: LD_INT 1
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 1
17870: PUSH
17871: LD_INT 3
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 0
17880: PUSH
17881: LD_INT 3
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 1
17890: NEG
17891: PUSH
17892: LD_INT 2
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17917: LD_ADDR_VAR 0 12
17921: PUSH
17922: LD_INT 0
17924: PUSH
17925: LD_INT 0
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: LD_INT 0
17934: PUSH
17935: LD_INT 1
17937: NEG
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 1
17945: PUSH
17946: LD_INT 0
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 1
17955: PUSH
17956: LD_INT 1
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 0
17965: PUSH
17966: LD_INT 1
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 1
17975: NEG
17976: PUSH
17977: LD_INT 0
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 1
17986: NEG
17987: PUSH
17988: LD_INT 1
17990: NEG
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 1
17998: PUSH
17999: LD_INT 1
18001: NEG
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 2
18009: PUSH
18010: LD_INT 0
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 2
18019: PUSH
18020: LD_INT 1
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 1
18029: NEG
18030: PUSH
18031: LD_INT 1
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 2
18040: NEG
18041: PUSH
18042: LD_INT 0
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 2
18051: NEG
18052: PUSH
18053: LD_INT 1
18055: NEG
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 2
18063: NEG
18064: PUSH
18065: LD_INT 1
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 3
18074: NEG
18075: PUSH
18076: LD_INT 0
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 3
18085: NEG
18086: PUSH
18087: LD_INT 1
18089: NEG
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18113: LD_ADDR_VAR 0 13
18117: PUSH
18118: LD_INT 0
18120: PUSH
18121: LD_INT 0
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 0
18130: PUSH
18131: LD_INT 1
18133: NEG
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 1
18141: PUSH
18142: LD_INT 0
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 1
18151: PUSH
18152: LD_INT 1
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 0
18161: PUSH
18162: LD_INT 1
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: LD_INT 1
18171: NEG
18172: PUSH
18173: LD_INT 0
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 1
18182: NEG
18183: PUSH
18184: LD_INT 1
18186: NEG
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: LD_INT 1
18194: NEG
18195: PUSH
18196: LD_INT 2
18198: NEG
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 2
18206: PUSH
18207: LD_INT 1
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 2
18216: PUSH
18217: LD_INT 2
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 1
18226: PUSH
18227: LD_INT 2
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: LD_INT 2
18236: NEG
18237: PUSH
18238: LD_INT 1
18240: NEG
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 2
18248: NEG
18249: PUSH
18250: LD_INT 2
18252: NEG
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 2
18260: NEG
18261: PUSH
18262: LD_INT 3
18264: NEG
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 3
18272: NEG
18273: PUSH
18274: LD_INT 2
18276: NEG
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 3
18284: NEG
18285: PUSH
18286: LD_INT 3
18288: NEG
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18312: LD_ADDR_VAR 0 14
18316: PUSH
18317: LD_INT 0
18319: PUSH
18320: LD_INT 0
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 0
18329: PUSH
18330: LD_INT 1
18332: NEG
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 1
18340: PUSH
18341: LD_INT 0
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 1
18350: PUSH
18351: LD_INT 1
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 0
18360: PUSH
18361: LD_INT 1
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 1
18370: NEG
18371: PUSH
18372: LD_INT 0
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 1
18381: NEG
18382: PUSH
18383: LD_INT 1
18385: NEG
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 1
18393: NEG
18394: PUSH
18395: LD_INT 2
18397: NEG
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: LD_INT 0
18405: PUSH
18406: LD_INT 2
18408: NEG
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 1
18416: PUSH
18417: LD_INT 1
18419: NEG
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 1
18427: PUSH
18428: LD_INT 2
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 0
18437: PUSH
18438: LD_INT 2
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 1
18447: NEG
18448: PUSH
18449: LD_INT 1
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 1
18458: NEG
18459: PUSH
18460: LD_INT 3
18462: NEG
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 0
18470: PUSH
18471: LD_INT 3
18473: NEG
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: LD_INT 1
18481: PUSH
18482: LD_INT 2
18484: NEG
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18508: LD_ADDR_VAR 0 15
18512: PUSH
18513: LD_INT 0
18515: PUSH
18516: LD_INT 0
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: LD_INT 0
18525: PUSH
18526: LD_INT 1
18528: NEG
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PUSH
18534: LD_INT 1
18536: PUSH
18537: LD_INT 0
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: LD_INT 1
18546: PUSH
18547: LD_INT 1
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: PUSH
18554: LD_INT 0
18556: PUSH
18557: LD_INT 1
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 1
18566: NEG
18567: PUSH
18568: LD_INT 0
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 1
18577: NEG
18578: PUSH
18579: LD_INT 1
18581: NEG
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: LD_INT 1
18589: PUSH
18590: LD_INT 1
18592: NEG
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: LD_INT 2
18600: PUSH
18601: LD_INT 0
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: LD_INT 2
18610: PUSH
18611: LD_INT 1
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 1
18620: NEG
18621: PUSH
18622: LD_INT 1
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 2
18631: NEG
18632: PUSH
18633: LD_INT 0
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 2
18642: NEG
18643: PUSH
18644: LD_INT 1
18646: NEG
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: LD_INT 2
18654: PUSH
18655: LD_INT 1
18657: NEG
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 3
18665: PUSH
18666: LD_INT 0
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 3
18675: PUSH
18676: LD_INT 1
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18701: LD_ADDR_VAR 0 16
18705: PUSH
18706: LD_INT 0
18708: PUSH
18709: LD_INT 0
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 0
18718: PUSH
18719: LD_INT 1
18721: NEG
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PUSH
18727: LD_INT 1
18729: PUSH
18730: LD_INT 0
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 1
18739: PUSH
18740: LD_INT 1
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: LD_INT 0
18749: PUSH
18750: LD_INT 1
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: LD_INT 1
18759: NEG
18760: PUSH
18761: LD_INT 0
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 1
18770: NEG
18771: PUSH
18772: LD_INT 1
18774: NEG
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 1
18782: NEG
18783: PUSH
18784: LD_INT 2
18786: NEG
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: LD_INT 2
18794: PUSH
18795: LD_INT 1
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: PUSH
18802: LD_INT 2
18804: PUSH
18805: LD_INT 2
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: PUSH
18812: LD_INT 1
18814: PUSH
18815: LD_INT 2
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: PUSH
18822: LD_INT 2
18824: NEG
18825: PUSH
18826: LD_INT 1
18828: NEG
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 2
18836: NEG
18837: PUSH
18838: LD_INT 2
18840: NEG
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 3
18848: PUSH
18849: LD_INT 2
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: LD_INT 3
18858: PUSH
18859: LD_INT 3
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: LD_INT 2
18868: PUSH
18869: LD_INT 3
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18894: LD_ADDR_VAR 0 17
18898: PUSH
18899: LD_INT 0
18901: PUSH
18902: LD_INT 0
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 0
18911: PUSH
18912: LD_INT 1
18914: NEG
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 1
18922: PUSH
18923: LD_INT 0
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 1
18932: PUSH
18933: LD_INT 1
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 0
18942: PUSH
18943: LD_INT 1
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 1
18952: NEG
18953: PUSH
18954: LD_INT 0
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: LD_INT 1
18963: NEG
18964: PUSH
18965: LD_INT 1
18967: NEG
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 1
18975: NEG
18976: PUSH
18977: LD_INT 2
18979: NEG
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: LD_INT 0
18987: PUSH
18988: LD_INT 2
18990: NEG
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 1
18998: PUSH
18999: LD_INT 1
19001: NEG
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 2
19009: PUSH
19010: LD_INT 0
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 2
19019: PUSH
19020: LD_INT 1
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 2
19029: PUSH
19030: LD_INT 2
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: LD_INT 1
19039: PUSH
19040: LD_INT 2
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: LD_INT 0
19049: PUSH
19050: LD_INT 2
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 1
19059: NEG
19060: PUSH
19061: LD_INT 1
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: LD_INT 2
19070: NEG
19071: PUSH
19072: LD_INT 0
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 2
19081: NEG
19082: PUSH
19083: LD_INT 1
19085: NEG
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 2
19093: NEG
19094: PUSH
19095: LD_INT 2
19097: NEG
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19124: LD_ADDR_VAR 0 18
19128: PUSH
19129: LD_INT 0
19131: PUSH
19132: LD_INT 0
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 0
19141: PUSH
19142: LD_INT 1
19144: NEG
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: LD_INT 1
19152: PUSH
19153: LD_INT 0
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 1
19162: PUSH
19163: LD_INT 1
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 0
19172: PUSH
19173: LD_INT 1
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 1
19182: NEG
19183: PUSH
19184: LD_INT 0
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 1
19193: NEG
19194: PUSH
19195: LD_INT 1
19197: NEG
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: LD_INT 1
19205: NEG
19206: PUSH
19207: LD_INT 2
19209: NEG
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 0
19217: PUSH
19218: LD_INT 2
19220: NEG
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: LD_INT 1
19228: PUSH
19229: LD_INT 1
19231: NEG
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 2
19239: PUSH
19240: LD_INT 0
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: LD_INT 2
19249: PUSH
19250: LD_INT 1
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: LD_INT 2
19259: PUSH
19260: LD_INT 2
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: LD_INT 1
19269: PUSH
19270: LD_INT 2
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PUSH
19277: LD_INT 0
19279: PUSH
19280: LD_INT 2
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: LD_INT 1
19289: NEG
19290: PUSH
19291: LD_INT 1
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: PUSH
19298: LD_INT 2
19300: NEG
19301: PUSH
19302: LD_INT 0
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: LD_INT 2
19311: NEG
19312: PUSH
19313: LD_INT 1
19315: NEG
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PUSH
19321: LD_INT 2
19323: NEG
19324: PUSH
19325: LD_INT 2
19327: NEG
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19354: LD_ADDR_VAR 0 19
19358: PUSH
19359: LD_INT 0
19361: PUSH
19362: LD_INT 0
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 0
19371: PUSH
19372: LD_INT 1
19374: NEG
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 1
19382: PUSH
19383: LD_INT 0
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 1
19392: PUSH
19393: LD_INT 1
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: LD_INT 0
19402: PUSH
19403: LD_INT 1
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 1
19412: NEG
19413: PUSH
19414: LD_INT 0
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: LD_INT 1
19423: NEG
19424: PUSH
19425: LD_INT 1
19427: NEG
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: LD_INT 1
19435: NEG
19436: PUSH
19437: LD_INT 2
19439: NEG
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 0
19447: PUSH
19448: LD_INT 2
19450: NEG
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: PUSH
19456: LD_INT 1
19458: PUSH
19459: LD_INT 1
19461: NEG
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 2
19469: PUSH
19470: LD_INT 0
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 2
19479: PUSH
19480: LD_INT 1
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 2
19489: PUSH
19490: LD_INT 2
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 1
19499: PUSH
19500: LD_INT 2
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 0
19509: PUSH
19510: LD_INT 2
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 1
19519: NEG
19520: PUSH
19521: LD_INT 1
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 2
19530: NEG
19531: PUSH
19532: LD_INT 0
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 2
19541: NEG
19542: PUSH
19543: LD_INT 1
19545: NEG
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 2
19553: NEG
19554: PUSH
19555: LD_INT 2
19557: NEG
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19584: LD_ADDR_VAR 0 20
19588: PUSH
19589: LD_INT 0
19591: PUSH
19592: LD_INT 0
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 0
19601: PUSH
19602: LD_INT 1
19604: NEG
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PUSH
19610: LD_INT 1
19612: PUSH
19613: LD_INT 0
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 1
19622: PUSH
19623: LD_INT 1
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 0
19632: PUSH
19633: LD_INT 1
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 1
19642: NEG
19643: PUSH
19644: LD_INT 0
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: LD_INT 1
19653: NEG
19654: PUSH
19655: LD_INT 1
19657: NEG
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 1
19665: NEG
19666: PUSH
19667: LD_INT 2
19669: NEG
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 0
19677: PUSH
19678: LD_INT 2
19680: NEG
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 1
19688: PUSH
19689: LD_INT 1
19691: NEG
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 2
19699: PUSH
19700: LD_INT 0
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: PUSH
19707: LD_INT 2
19709: PUSH
19710: LD_INT 1
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: LD_INT 2
19719: PUSH
19720: LD_INT 2
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: LD_INT 1
19729: PUSH
19730: LD_INT 2
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: LD_INT 0
19739: PUSH
19740: LD_INT 2
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: LD_INT 1
19749: NEG
19750: PUSH
19751: LD_INT 1
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PUSH
19758: LD_INT 2
19760: NEG
19761: PUSH
19762: LD_INT 0
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: LD_INT 2
19771: NEG
19772: PUSH
19773: LD_INT 1
19775: NEG
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 2
19783: NEG
19784: PUSH
19785: LD_INT 2
19787: NEG
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19814: LD_ADDR_VAR 0 21
19818: PUSH
19819: LD_INT 0
19821: PUSH
19822: LD_INT 0
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 0
19831: PUSH
19832: LD_INT 1
19834: NEG
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: PUSH
19840: LD_INT 1
19842: PUSH
19843: LD_INT 0
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PUSH
19850: LD_INT 1
19852: PUSH
19853: LD_INT 1
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 0
19862: PUSH
19863: LD_INT 1
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 1
19872: NEG
19873: PUSH
19874: LD_INT 0
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PUSH
19881: LD_INT 1
19883: NEG
19884: PUSH
19885: LD_INT 1
19887: NEG
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: LD_INT 1
19895: NEG
19896: PUSH
19897: LD_INT 2
19899: NEG
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 0
19907: PUSH
19908: LD_INT 2
19910: NEG
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 1
19918: PUSH
19919: LD_INT 1
19921: NEG
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 2
19929: PUSH
19930: LD_INT 0
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 2
19939: PUSH
19940: LD_INT 1
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PUSH
19947: LD_INT 2
19949: PUSH
19950: LD_INT 2
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: PUSH
19957: LD_INT 1
19959: PUSH
19960: LD_INT 2
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: PUSH
19967: LD_INT 0
19969: PUSH
19970: LD_INT 2
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PUSH
19977: LD_INT 1
19979: NEG
19980: PUSH
19981: LD_INT 1
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PUSH
19988: LD_INT 2
19990: NEG
19991: PUSH
19992: LD_INT 0
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: PUSH
19999: LD_INT 2
20001: NEG
20002: PUSH
20003: LD_INT 1
20005: NEG
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 2
20013: NEG
20014: PUSH
20015: LD_INT 2
20017: NEG
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20044: LD_ADDR_VAR 0 22
20048: PUSH
20049: LD_INT 0
20051: PUSH
20052: LD_INT 0
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 0
20061: PUSH
20062: LD_INT 1
20064: NEG
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 1
20072: PUSH
20073: LD_INT 0
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 1
20082: PUSH
20083: LD_INT 1
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: PUSH
20090: LD_INT 0
20092: PUSH
20093: LD_INT 1
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 1
20102: NEG
20103: PUSH
20104: LD_INT 0
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PUSH
20111: LD_INT 1
20113: NEG
20114: PUSH
20115: LD_INT 1
20117: NEG
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: LD_INT 1
20125: NEG
20126: PUSH
20127: LD_INT 2
20129: NEG
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 0
20137: PUSH
20138: LD_INT 2
20140: NEG
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 1
20148: PUSH
20149: LD_INT 1
20151: NEG
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 2
20159: PUSH
20160: LD_INT 0
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 2
20169: PUSH
20170: LD_INT 1
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PUSH
20177: LD_INT 2
20179: PUSH
20180: LD_INT 2
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 1
20189: PUSH
20190: LD_INT 2
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: PUSH
20197: LD_INT 0
20199: PUSH
20200: LD_INT 2
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: PUSH
20207: LD_INT 1
20209: NEG
20210: PUSH
20211: LD_INT 1
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PUSH
20218: LD_INT 2
20220: NEG
20221: PUSH
20222: LD_INT 0
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PUSH
20229: LD_INT 2
20231: NEG
20232: PUSH
20233: LD_INT 1
20235: NEG
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 2
20243: NEG
20244: PUSH
20245: LD_INT 2
20247: NEG
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20274: LD_ADDR_VAR 0 23
20278: PUSH
20279: LD_INT 0
20281: PUSH
20282: LD_INT 0
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 0
20291: PUSH
20292: LD_INT 1
20294: NEG
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: LD_INT 1
20302: PUSH
20303: LD_INT 0
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: LD_INT 1
20312: PUSH
20313: LD_INT 1
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 0
20322: PUSH
20323: LD_INT 1
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 1
20332: NEG
20333: PUSH
20334: LD_INT 0
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: LD_INT 1
20343: NEG
20344: PUSH
20345: LD_INT 1
20347: NEG
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 1
20355: NEG
20356: PUSH
20357: LD_INT 2
20359: NEG
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: LD_INT 0
20367: PUSH
20368: LD_INT 2
20370: NEG
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 1
20378: PUSH
20379: LD_INT 1
20381: NEG
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 2
20389: PUSH
20390: LD_INT 0
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: LD_INT 2
20399: PUSH
20400: LD_INT 1
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: PUSH
20407: LD_INT 2
20409: PUSH
20410: LD_INT 2
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 1
20419: PUSH
20420: LD_INT 2
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: PUSH
20427: LD_INT 0
20429: PUSH
20430: LD_INT 2
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PUSH
20437: LD_INT 1
20439: NEG
20440: PUSH
20441: LD_INT 1
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 2
20450: NEG
20451: PUSH
20452: LD_INT 0
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: LD_INT 2
20461: NEG
20462: PUSH
20463: LD_INT 1
20465: NEG
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: LD_INT 2
20473: NEG
20474: PUSH
20475: LD_INT 2
20477: NEG
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PUSH
20483: LD_INT 2
20485: NEG
20486: PUSH
20487: LD_INT 3
20489: NEG
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 1
20497: NEG
20498: PUSH
20499: LD_INT 3
20501: NEG
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 1
20509: PUSH
20510: LD_INT 2
20512: NEG
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 2
20520: PUSH
20521: LD_INT 1
20523: NEG
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20554: LD_ADDR_VAR 0 24
20558: PUSH
20559: LD_INT 0
20561: PUSH
20562: LD_INT 0
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: LD_INT 0
20571: PUSH
20572: LD_INT 1
20574: NEG
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: LD_INT 1
20582: PUSH
20583: LD_INT 0
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PUSH
20590: LD_INT 1
20592: PUSH
20593: LD_INT 1
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: PUSH
20600: LD_INT 0
20602: PUSH
20603: LD_INT 1
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PUSH
20610: LD_INT 1
20612: NEG
20613: PUSH
20614: LD_INT 0
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: LD_INT 1
20623: NEG
20624: PUSH
20625: LD_INT 1
20627: NEG
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: LD_INT 1
20635: NEG
20636: PUSH
20637: LD_INT 2
20639: NEG
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: LD_INT 0
20647: PUSH
20648: LD_INT 2
20650: NEG
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: LD_INT 1
20658: PUSH
20659: LD_INT 1
20661: NEG
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: PUSH
20667: LD_INT 2
20669: PUSH
20670: LD_INT 0
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 2
20679: PUSH
20680: LD_INT 1
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 2
20689: PUSH
20690: LD_INT 2
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: PUSH
20697: LD_INT 1
20699: PUSH
20700: LD_INT 2
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PUSH
20707: LD_INT 0
20709: PUSH
20710: LD_INT 2
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: PUSH
20717: LD_INT 1
20719: NEG
20720: PUSH
20721: LD_INT 1
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 2
20730: NEG
20731: PUSH
20732: LD_INT 0
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: LD_INT 2
20741: NEG
20742: PUSH
20743: LD_INT 1
20745: NEG
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 2
20753: NEG
20754: PUSH
20755: LD_INT 2
20757: NEG
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 1
20765: PUSH
20766: LD_INT 2
20768: NEG
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PUSH
20774: LD_INT 2
20776: PUSH
20777: LD_INT 1
20779: NEG
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 3
20787: PUSH
20788: LD_INT 1
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 3
20797: PUSH
20798: LD_INT 2
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20830: LD_ADDR_VAR 0 25
20834: PUSH
20835: LD_INT 0
20837: PUSH
20838: LD_INT 0
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: LD_INT 0
20847: PUSH
20848: LD_INT 1
20850: NEG
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: PUSH
20856: LD_INT 1
20858: PUSH
20859: LD_INT 0
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 1
20868: PUSH
20869: LD_INT 1
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 0
20878: PUSH
20879: LD_INT 1
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 1
20888: NEG
20889: PUSH
20890: LD_INT 0
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PUSH
20897: LD_INT 1
20899: NEG
20900: PUSH
20901: LD_INT 1
20903: NEG
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 1
20911: NEG
20912: PUSH
20913: LD_INT 2
20915: NEG
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 0
20923: PUSH
20924: LD_INT 2
20926: NEG
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: LD_INT 1
20934: PUSH
20935: LD_INT 1
20937: NEG
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PUSH
20943: LD_INT 2
20945: PUSH
20946: LD_INT 0
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: LD_INT 2
20955: PUSH
20956: LD_INT 1
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 2
20965: PUSH
20966: LD_INT 2
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 1
20975: PUSH
20976: LD_INT 2
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 0
20985: PUSH
20986: LD_INT 2
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 1
20995: NEG
20996: PUSH
20997: LD_INT 1
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 2
21006: NEG
21007: PUSH
21008: LD_INT 0
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 2
21017: NEG
21018: PUSH
21019: LD_INT 1
21021: NEG
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 2
21029: NEG
21030: PUSH
21031: LD_INT 2
21033: NEG
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PUSH
21039: LD_INT 3
21041: PUSH
21042: LD_INT 1
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 3
21051: PUSH
21052: LD_INT 2
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 2
21061: PUSH
21062: LD_INT 3
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PUSH
21069: LD_INT 1
21071: PUSH
21072: LD_INT 3
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21104: LD_ADDR_VAR 0 26
21108: PUSH
21109: LD_INT 0
21111: PUSH
21112: LD_INT 0
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 0
21121: PUSH
21122: LD_INT 1
21124: NEG
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 1
21132: PUSH
21133: LD_INT 0
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 1
21142: PUSH
21143: LD_INT 1
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 0
21152: PUSH
21153: LD_INT 1
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 1
21162: NEG
21163: PUSH
21164: LD_INT 0
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: LD_INT 1
21173: NEG
21174: PUSH
21175: LD_INT 1
21177: NEG
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 1
21185: NEG
21186: PUSH
21187: LD_INT 2
21189: NEG
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 0
21197: PUSH
21198: LD_INT 2
21200: NEG
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 1
21208: PUSH
21209: LD_INT 1
21211: NEG
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 2
21219: PUSH
21220: LD_INT 0
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 2
21229: PUSH
21230: LD_INT 1
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 2
21239: PUSH
21240: LD_INT 2
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: LD_INT 1
21249: PUSH
21250: LD_INT 2
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: PUSH
21257: LD_INT 0
21259: PUSH
21260: LD_INT 2
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: LD_INT 1
21269: NEG
21270: PUSH
21271: LD_INT 1
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: LD_INT 2
21280: NEG
21281: PUSH
21282: LD_INT 0
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 2
21291: NEG
21292: PUSH
21293: LD_INT 1
21295: NEG
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 2
21303: NEG
21304: PUSH
21305: LD_INT 2
21307: NEG
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PUSH
21313: LD_INT 2
21315: PUSH
21316: LD_INT 3
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: LD_INT 1
21325: PUSH
21326: LD_INT 3
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 1
21335: NEG
21336: PUSH
21337: LD_INT 2
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 2
21346: NEG
21347: PUSH
21348: LD_INT 1
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21380: LD_ADDR_VAR 0 27
21384: PUSH
21385: LD_INT 0
21387: PUSH
21388: LD_INT 0
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 0
21397: PUSH
21398: LD_INT 1
21400: NEG
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 1
21408: PUSH
21409: LD_INT 0
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PUSH
21416: LD_INT 1
21418: PUSH
21419: LD_INT 1
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 0
21428: PUSH
21429: LD_INT 1
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: PUSH
21436: LD_INT 1
21438: NEG
21439: PUSH
21440: LD_INT 0
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 1
21449: NEG
21450: PUSH
21451: LD_INT 1
21453: NEG
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 1
21461: NEG
21462: PUSH
21463: LD_INT 2
21465: NEG
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: PUSH
21471: LD_INT 0
21473: PUSH
21474: LD_INT 2
21476: NEG
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PUSH
21482: LD_INT 1
21484: PUSH
21485: LD_INT 1
21487: NEG
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 2
21495: PUSH
21496: LD_INT 0
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 2
21505: PUSH
21506: LD_INT 1
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 2
21515: PUSH
21516: LD_INT 2
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 1
21525: PUSH
21526: LD_INT 2
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 0
21535: PUSH
21536: LD_INT 2
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 1
21545: NEG
21546: PUSH
21547: LD_INT 1
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 2
21556: NEG
21557: PUSH
21558: LD_INT 0
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: LD_INT 2
21567: NEG
21568: PUSH
21569: LD_INT 1
21571: NEG
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 2
21579: NEG
21580: PUSH
21581: LD_INT 2
21583: NEG
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: PUSH
21589: LD_INT 1
21591: NEG
21592: PUSH
21593: LD_INT 2
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 2
21602: NEG
21603: PUSH
21604: LD_INT 1
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 3
21613: NEG
21614: PUSH
21615: LD_INT 1
21617: NEG
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 3
21625: NEG
21626: PUSH
21627: LD_INT 2
21629: NEG
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21660: LD_ADDR_VAR 0 28
21664: PUSH
21665: LD_INT 0
21667: PUSH
21668: LD_INT 0
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 0
21677: PUSH
21678: LD_INT 1
21680: NEG
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 1
21688: PUSH
21689: LD_INT 0
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: LD_INT 1
21698: PUSH
21699: LD_INT 1
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 0
21708: PUSH
21709: LD_INT 1
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PUSH
21716: LD_INT 1
21718: NEG
21719: PUSH
21720: LD_INT 0
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: PUSH
21727: LD_INT 1
21729: NEG
21730: PUSH
21731: LD_INT 1
21733: NEG
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 1
21741: NEG
21742: PUSH
21743: LD_INT 2
21745: NEG
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: LD_INT 0
21753: PUSH
21754: LD_INT 2
21756: NEG
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 1
21764: PUSH
21765: LD_INT 1
21767: NEG
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 2
21775: PUSH
21776: LD_INT 0
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 2
21785: PUSH
21786: LD_INT 1
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 2
21795: PUSH
21796: LD_INT 2
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 1
21805: PUSH
21806: LD_INT 2
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: LD_INT 0
21815: PUSH
21816: LD_INT 2
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 1
21825: NEG
21826: PUSH
21827: LD_INT 1
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 2
21836: NEG
21837: PUSH
21838: LD_INT 0
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: LD_INT 2
21847: NEG
21848: PUSH
21849: LD_INT 1
21851: NEG
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 2
21859: NEG
21860: PUSH
21861: LD_INT 2
21863: NEG
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 2
21871: NEG
21872: PUSH
21873: LD_INT 3
21875: NEG
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 1
21883: NEG
21884: PUSH
21885: LD_INT 3
21887: NEG
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PUSH
21893: LD_INT 3
21895: NEG
21896: PUSH
21897: LD_INT 1
21899: NEG
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PUSH
21905: LD_INT 3
21907: NEG
21908: PUSH
21909: LD_INT 2
21911: NEG
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21942: LD_ADDR_VAR 0 29
21946: PUSH
21947: LD_INT 0
21949: PUSH
21950: LD_INT 0
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: LD_INT 0
21959: PUSH
21960: LD_INT 1
21962: NEG
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: LD_INT 1
21970: PUSH
21971: LD_INT 0
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 1
21980: PUSH
21981: LD_INT 1
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 0
21990: PUSH
21991: LD_INT 1
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 1
22000: NEG
22001: PUSH
22002: LD_INT 0
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 1
22011: NEG
22012: PUSH
22013: LD_INT 1
22015: NEG
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 1
22023: NEG
22024: PUSH
22025: LD_INT 2
22027: NEG
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: PUSH
22033: LD_INT 0
22035: PUSH
22036: LD_INT 2
22038: NEG
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 1
22046: PUSH
22047: LD_INT 1
22049: NEG
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 2
22057: PUSH
22058: LD_INT 0
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 2
22067: PUSH
22068: LD_INT 1
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 1
22077: PUSH
22078: LD_INT 2
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 0
22087: PUSH
22088: LD_INT 2
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 1
22097: NEG
22098: PUSH
22099: LD_INT 1
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 2
22108: NEG
22109: PUSH
22110: LD_INT 1
22112: NEG
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 2
22120: NEG
22121: PUSH
22122: LD_INT 2
22124: NEG
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PUSH
22130: LD_INT 2
22132: NEG
22133: PUSH
22134: LD_INT 3
22136: NEG
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: LD_INT 2
22144: PUSH
22145: LD_INT 1
22147: NEG
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: PUSH
22153: LD_INT 3
22155: PUSH
22156: LD_INT 1
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 1
22165: PUSH
22166: LD_INT 3
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 1
22175: NEG
22176: PUSH
22177: LD_INT 2
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PUSH
22184: LD_INT 3
22186: NEG
22187: PUSH
22188: LD_INT 2
22190: NEG
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22221: LD_ADDR_VAR 0 30
22225: PUSH
22226: LD_INT 0
22228: PUSH
22229: LD_INT 0
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PUSH
22236: LD_INT 0
22238: PUSH
22239: LD_INT 1
22241: NEG
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 1
22249: PUSH
22250: LD_INT 0
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PUSH
22257: LD_INT 1
22259: PUSH
22260: LD_INT 1
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PUSH
22267: LD_INT 0
22269: PUSH
22270: LD_INT 1
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: LD_INT 1
22279: NEG
22280: PUSH
22281: LD_INT 0
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 1
22290: NEG
22291: PUSH
22292: LD_INT 1
22294: NEG
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 1
22302: NEG
22303: PUSH
22304: LD_INT 2
22306: NEG
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 0
22314: PUSH
22315: LD_INT 2
22317: NEG
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: LD_INT 1
22325: PUSH
22326: LD_INT 1
22328: NEG
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 2
22336: PUSH
22337: LD_INT 0
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 2
22346: PUSH
22347: LD_INT 1
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 2
22356: PUSH
22357: LD_INT 2
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 1
22366: PUSH
22367: LD_INT 2
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 1
22376: NEG
22377: PUSH
22378: LD_INT 1
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 2
22387: NEG
22388: PUSH
22389: LD_INT 0
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 2
22398: NEG
22399: PUSH
22400: LD_INT 1
22402: NEG
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: LD_INT 1
22410: NEG
22411: PUSH
22412: LD_INT 3
22414: NEG
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: LD_INT 1
22422: PUSH
22423: LD_INT 2
22425: NEG
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PUSH
22431: LD_INT 3
22433: PUSH
22434: LD_INT 2
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: PUSH
22441: LD_INT 2
22443: PUSH
22444: LD_INT 3
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 2
22453: NEG
22454: PUSH
22455: LD_INT 1
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 3
22464: NEG
22465: PUSH
22466: LD_INT 1
22468: NEG
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22499: LD_ADDR_VAR 0 31
22503: PUSH
22504: LD_INT 0
22506: PUSH
22507: LD_INT 0
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 0
22516: PUSH
22517: LD_INT 1
22519: NEG
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 1
22527: PUSH
22528: LD_INT 0
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PUSH
22535: LD_INT 1
22537: PUSH
22538: LD_INT 1
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: PUSH
22545: LD_INT 0
22547: PUSH
22548: LD_INT 1
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 1
22557: NEG
22558: PUSH
22559: LD_INT 0
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: LD_INT 1
22568: NEG
22569: PUSH
22570: LD_INT 1
22572: NEG
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 1
22580: NEG
22581: PUSH
22582: LD_INT 2
22584: NEG
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 1
22592: PUSH
22593: LD_INT 1
22595: NEG
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 2
22603: PUSH
22604: LD_INT 0
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: LD_INT 2
22613: PUSH
22614: LD_INT 1
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 2
22623: PUSH
22624: LD_INT 2
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 1
22633: PUSH
22634: LD_INT 2
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 0
22643: PUSH
22644: LD_INT 2
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 1
22653: NEG
22654: PUSH
22655: LD_INT 1
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 2
22664: NEG
22665: PUSH
22666: LD_INT 1
22668: NEG
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 2
22676: NEG
22677: PUSH
22678: LD_INT 2
22680: NEG
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PUSH
22686: LD_INT 2
22688: NEG
22689: PUSH
22690: LD_INT 3
22692: NEG
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: LD_INT 2
22700: PUSH
22701: LD_INT 1
22703: NEG
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: PUSH
22709: LD_INT 3
22711: PUSH
22712: LD_INT 1
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: LD_INT 1
22721: PUSH
22722: LD_INT 3
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 1
22731: NEG
22732: PUSH
22733: LD_INT 2
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 3
22742: NEG
22743: PUSH
22744: LD_INT 2
22746: NEG
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22777: LD_ADDR_VAR 0 32
22781: PUSH
22782: LD_INT 0
22784: PUSH
22785: LD_INT 0
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 0
22794: PUSH
22795: LD_INT 1
22797: NEG
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 1
22805: PUSH
22806: LD_INT 0
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 1
22815: PUSH
22816: LD_INT 1
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: LD_INT 0
22825: PUSH
22826: LD_INT 1
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 1
22835: NEG
22836: PUSH
22837: LD_INT 0
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 1
22846: NEG
22847: PUSH
22848: LD_INT 1
22850: NEG
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: LD_INT 1
22858: NEG
22859: PUSH
22860: LD_INT 2
22862: NEG
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 0
22870: PUSH
22871: LD_INT 2
22873: NEG
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: LD_INT 1
22881: PUSH
22882: LD_INT 1
22884: NEG
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 2
22892: PUSH
22893: LD_INT 1
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 2
22902: PUSH
22903: LD_INT 2
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 1
22912: PUSH
22913: LD_INT 2
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: LD_INT 0
22922: PUSH
22923: LD_INT 2
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: LD_INT 1
22932: NEG
22933: PUSH
22934: LD_INT 1
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 2
22943: NEG
22944: PUSH
22945: LD_INT 0
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: LD_INT 2
22954: NEG
22955: PUSH
22956: LD_INT 1
22958: NEG
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: LD_INT 1
22966: NEG
22967: PUSH
22968: LD_INT 3
22970: NEG
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 1
22978: PUSH
22979: LD_INT 2
22981: NEG
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 3
22989: PUSH
22990: LD_INT 2
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PUSH
22997: LD_INT 2
22999: PUSH
23000: LD_INT 3
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: LD_INT 2
23009: NEG
23010: PUSH
23011: LD_INT 1
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 3
23020: NEG
23021: PUSH
23022: LD_INT 1
23024: NEG
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23055: LD_ADDR_VAR 0 33
23059: PUSH
23060: LD_INT 0
23062: PUSH
23063: LD_INT 0
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 0
23072: PUSH
23073: LD_INT 1
23075: NEG
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PUSH
23081: LD_INT 1
23083: PUSH
23084: LD_INT 0
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PUSH
23091: LD_INT 1
23093: PUSH
23094: LD_INT 1
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 0
23103: PUSH
23104: LD_INT 1
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 1
23113: NEG
23114: PUSH
23115: LD_INT 0
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: LD_INT 1
23124: NEG
23125: PUSH
23126: LD_INT 1
23128: NEG
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 1
23136: NEG
23137: PUSH
23138: LD_INT 2
23140: NEG
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 1
23148: PUSH
23149: LD_INT 1
23151: NEG
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 2
23159: PUSH
23160: LD_INT 0
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 2
23169: PUSH
23170: LD_INT 1
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 1
23179: PUSH
23180: LD_INT 2
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 0
23189: PUSH
23190: LD_INT 2
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 1
23199: NEG
23200: PUSH
23201: LD_INT 1
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 2
23210: NEG
23211: PUSH
23212: LD_INT 0
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: PUSH
23219: LD_INT 2
23221: NEG
23222: PUSH
23223: LD_INT 1
23225: NEG
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 2
23233: NEG
23234: PUSH
23235: LD_INT 2
23237: NEG
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 2
23245: NEG
23246: PUSH
23247: LD_INT 3
23249: NEG
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: PUSH
23255: LD_INT 2
23257: PUSH
23258: LD_INT 1
23260: NEG
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: LD_INT 3
23268: PUSH
23269: LD_INT 1
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 1
23278: PUSH
23279: LD_INT 3
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 1
23288: NEG
23289: PUSH
23290: LD_INT 2
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 3
23299: NEG
23300: PUSH
23301: LD_INT 2
23303: NEG
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23334: LD_ADDR_VAR 0 34
23338: PUSH
23339: LD_INT 0
23341: PUSH
23342: LD_INT 0
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: LD_INT 0
23351: PUSH
23352: LD_INT 1
23354: NEG
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 1
23362: PUSH
23363: LD_INT 0
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: LD_INT 1
23372: PUSH
23373: LD_INT 1
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 0
23382: PUSH
23383: LD_INT 1
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 1
23392: NEG
23393: PUSH
23394: LD_INT 0
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 1
23403: NEG
23404: PUSH
23405: LD_INT 1
23407: NEG
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: PUSH
23413: LD_INT 1
23415: NEG
23416: PUSH
23417: LD_INT 2
23419: NEG
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 0
23427: PUSH
23428: LD_INT 2
23430: NEG
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PUSH
23436: LD_INT 1
23438: PUSH
23439: LD_INT 1
23441: NEG
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 2
23449: PUSH
23450: LD_INT 1
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 2
23459: PUSH
23460: LD_INT 2
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PUSH
23467: LD_INT 1
23469: PUSH
23470: LD_INT 2
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 1
23479: NEG
23480: PUSH
23481: LD_INT 1
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 2
23490: NEG
23491: PUSH
23492: LD_INT 0
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: LD_INT 2
23501: NEG
23502: PUSH
23503: LD_INT 1
23505: NEG
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 2
23513: NEG
23514: PUSH
23515: LD_INT 2
23517: NEG
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 1
23525: NEG
23526: PUSH
23527: LD_INT 3
23529: NEG
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 1
23537: PUSH
23538: LD_INT 2
23540: NEG
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: PUSH
23546: LD_INT 3
23548: PUSH
23549: LD_INT 2
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 2
23558: PUSH
23559: LD_INT 3
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 2
23568: NEG
23569: PUSH
23570: LD_INT 1
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 3
23579: NEG
23580: PUSH
23581: LD_INT 1
23583: NEG
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23614: LD_ADDR_VAR 0 35
23618: PUSH
23619: LD_INT 0
23621: PUSH
23622: LD_INT 0
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 0
23631: PUSH
23632: LD_INT 1
23634: NEG
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 1
23642: PUSH
23643: LD_INT 0
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: LD_INT 1
23652: PUSH
23653: LD_INT 1
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: LD_INT 0
23662: PUSH
23663: LD_INT 1
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 1
23672: NEG
23673: PUSH
23674: LD_INT 0
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: LD_INT 1
23683: NEG
23684: PUSH
23685: LD_INT 1
23687: NEG
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: LD_INT 2
23695: PUSH
23696: LD_INT 1
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PUSH
23703: LD_INT 2
23705: NEG
23706: PUSH
23707: LD_INT 1
23709: NEG
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23726: LD_ADDR_VAR 0 36
23730: PUSH
23731: LD_INT 0
23733: PUSH
23734: LD_INT 0
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 0
23743: PUSH
23744: LD_INT 1
23746: NEG
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 1
23754: PUSH
23755: LD_INT 0
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: LD_INT 1
23764: PUSH
23765: LD_INT 1
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 0
23774: PUSH
23775: LD_INT 1
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 1
23784: NEG
23785: PUSH
23786: LD_INT 0
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 1
23795: NEG
23796: PUSH
23797: LD_INT 1
23799: NEG
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: LD_INT 1
23807: NEG
23808: PUSH
23809: LD_INT 2
23811: NEG
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 1
23819: PUSH
23820: LD_INT 2
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23838: LD_ADDR_VAR 0 37
23842: PUSH
23843: LD_INT 0
23845: PUSH
23846: LD_INT 0
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 0
23855: PUSH
23856: LD_INT 1
23858: NEG
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 1
23866: PUSH
23867: LD_INT 0
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 1
23876: PUSH
23877: LD_INT 1
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 0
23886: PUSH
23887: LD_INT 1
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 1
23896: NEG
23897: PUSH
23898: LD_INT 0
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 1
23907: NEG
23908: PUSH
23909: LD_INT 1
23911: NEG
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 1
23919: PUSH
23920: LD_INT 1
23922: NEG
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 1
23930: NEG
23931: PUSH
23932: LD_INT 1
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23950: LD_ADDR_VAR 0 38
23954: PUSH
23955: LD_INT 0
23957: PUSH
23958: LD_INT 0
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 0
23967: PUSH
23968: LD_INT 1
23970: NEG
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 1
23978: PUSH
23979: LD_INT 0
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 1
23988: PUSH
23989: LD_INT 1
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 0
23998: PUSH
23999: LD_INT 1
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: PUSH
24006: LD_INT 1
24008: NEG
24009: PUSH
24010: LD_INT 0
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 1
24019: NEG
24020: PUSH
24021: LD_INT 1
24023: NEG
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: LD_INT 2
24031: PUSH
24032: LD_INT 1
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 2
24041: NEG
24042: PUSH
24043: LD_INT 1
24045: NEG
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24062: LD_ADDR_VAR 0 39
24066: PUSH
24067: LD_INT 0
24069: PUSH
24070: LD_INT 0
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 0
24079: PUSH
24080: LD_INT 1
24082: NEG
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 1
24090: PUSH
24091: LD_INT 0
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 1
24100: PUSH
24101: LD_INT 1
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: PUSH
24108: LD_INT 0
24110: PUSH
24111: LD_INT 1
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 1
24120: NEG
24121: PUSH
24122: LD_INT 0
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 1
24131: NEG
24132: PUSH
24133: LD_INT 1
24135: NEG
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 1
24143: NEG
24144: PUSH
24145: LD_INT 2
24147: NEG
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: LD_INT 1
24155: PUSH
24156: LD_INT 2
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24174: LD_ADDR_VAR 0 40
24178: PUSH
24179: LD_INT 0
24181: PUSH
24182: LD_INT 0
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 0
24191: PUSH
24192: LD_INT 1
24194: NEG
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 1
24202: PUSH
24203: LD_INT 0
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 1
24212: PUSH
24213: LD_INT 1
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 0
24222: PUSH
24223: LD_INT 1
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 1
24232: NEG
24233: PUSH
24234: LD_INT 0
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 1
24243: NEG
24244: PUSH
24245: LD_INT 1
24247: NEG
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 1
24255: PUSH
24256: LD_INT 1
24258: NEG
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: LD_INT 1
24266: NEG
24267: PUSH
24268: LD_INT 1
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24286: LD_ADDR_VAR 0 41
24290: PUSH
24291: LD_INT 0
24293: PUSH
24294: LD_INT 0
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 0
24303: PUSH
24304: LD_INT 1
24306: NEG
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 1
24314: PUSH
24315: LD_INT 0
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 1
24324: PUSH
24325: LD_INT 1
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 0
24334: PUSH
24335: LD_INT 1
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: LD_INT 1
24344: NEG
24345: PUSH
24346: LD_INT 0
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: PUSH
24353: LD_INT 1
24355: NEG
24356: PUSH
24357: LD_INT 1
24359: NEG
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 1
24367: NEG
24368: PUSH
24369: LD_INT 2
24371: NEG
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 1
24379: PUSH
24380: LD_INT 1
24382: NEG
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: LD_INT 2
24390: PUSH
24391: LD_INT 0
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 2
24400: PUSH
24401: LD_INT 1
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: LD_INT 2
24410: PUSH
24411: LD_INT 2
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 1
24420: PUSH
24421: LD_INT 2
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 1
24430: NEG
24431: PUSH
24432: LD_INT 1
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 2
24441: NEG
24442: PUSH
24443: LD_INT 0
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 2
24452: NEG
24453: PUSH
24454: LD_INT 1
24456: NEG
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 2
24464: NEG
24465: PUSH
24466: LD_INT 2
24468: NEG
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 2
24476: NEG
24477: PUSH
24478: LD_INT 3
24480: NEG
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 2
24488: PUSH
24489: LD_INT 1
24491: NEG
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 3
24499: PUSH
24500: LD_INT 0
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 3
24509: PUSH
24510: LD_INT 1
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 3
24519: PUSH
24520: LD_INT 2
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 3
24529: PUSH
24530: LD_INT 3
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: LD_INT 2
24539: PUSH
24540: LD_INT 3
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 2
24549: NEG
24550: PUSH
24551: LD_INT 1
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 3
24560: NEG
24561: PUSH
24562: LD_INT 0
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 3
24571: NEG
24572: PUSH
24573: LD_INT 1
24575: NEG
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 3
24583: NEG
24584: PUSH
24585: LD_INT 2
24587: NEG
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 3
24595: NEG
24596: PUSH
24597: LD_INT 3
24599: NEG
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24636: LD_ADDR_VAR 0 42
24640: PUSH
24641: LD_INT 0
24643: PUSH
24644: LD_INT 0
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 0
24653: PUSH
24654: LD_INT 1
24656: NEG
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 1
24664: PUSH
24665: LD_INT 0
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 1
24674: PUSH
24675: LD_INT 1
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PUSH
24682: LD_INT 0
24684: PUSH
24685: LD_INT 1
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 1
24694: NEG
24695: PUSH
24696: LD_INT 0
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 1
24705: NEG
24706: PUSH
24707: LD_INT 1
24709: NEG
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 1
24717: NEG
24718: PUSH
24719: LD_INT 2
24721: NEG
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: LD_INT 0
24729: PUSH
24730: LD_INT 2
24732: NEG
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: LD_INT 1
24740: PUSH
24741: LD_INT 1
24743: NEG
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 2
24751: PUSH
24752: LD_INT 1
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 2
24761: PUSH
24762: LD_INT 2
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: LD_INT 1
24771: PUSH
24772: LD_INT 2
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 0
24781: PUSH
24782: LD_INT 2
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: LD_INT 1
24791: NEG
24792: PUSH
24793: LD_INT 1
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 2
24802: NEG
24803: PUSH
24804: LD_INT 1
24806: NEG
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 2
24814: NEG
24815: PUSH
24816: LD_INT 2
24818: NEG
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: LD_INT 2
24826: NEG
24827: PUSH
24828: LD_INT 3
24830: NEG
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 1
24838: NEG
24839: PUSH
24840: LD_INT 3
24842: NEG
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 0
24850: PUSH
24851: LD_INT 3
24853: NEG
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 1
24861: PUSH
24862: LD_INT 2
24864: NEG
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 3
24872: PUSH
24873: LD_INT 2
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 3
24882: PUSH
24883: LD_INT 3
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 2
24892: PUSH
24893: LD_INT 3
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 1
24902: PUSH
24903: LD_INT 3
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 0
24912: PUSH
24913: LD_INT 3
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 1
24922: NEG
24923: PUSH
24924: LD_INT 2
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 3
24933: NEG
24934: PUSH
24935: LD_INT 2
24937: NEG
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 3
24945: NEG
24946: PUSH
24947: LD_INT 3
24949: NEG
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24986: LD_ADDR_VAR 0 43
24990: PUSH
24991: LD_INT 0
24993: PUSH
24994: LD_INT 0
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 0
25003: PUSH
25004: LD_INT 1
25006: NEG
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 1
25014: PUSH
25015: LD_INT 0
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 1
25024: PUSH
25025: LD_INT 1
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 0
25034: PUSH
25035: LD_INT 1
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 1
25044: NEG
25045: PUSH
25046: LD_INT 0
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 1
25055: NEG
25056: PUSH
25057: LD_INT 1
25059: NEG
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 1
25067: NEG
25068: PUSH
25069: LD_INT 2
25071: NEG
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 0
25079: PUSH
25080: LD_INT 2
25082: NEG
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: LD_INT 1
25090: PUSH
25091: LD_INT 1
25093: NEG
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 2
25101: PUSH
25102: LD_INT 0
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 2
25111: PUSH
25112: LD_INT 1
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 1
25121: PUSH
25122: LD_INT 2
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 0
25131: PUSH
25132: LD_INT 2
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 1
25141: NEG
25142: PUSH
25143: LD_INT 1
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 2
25152: NEG
25153: PUSH
25154: LD_INT 0
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 2
25163: NEG
25164: PUSH
25165: LD_INT 1
25167: NEG
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 1
25175: NEG
25176: PUSH
25177: LD_INT 3
25179: NEG
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 0
25187: PUSH
25188: LD_INT 3
25190: NEG
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 1
25198: PUSH
25199: LD_INT 2
25201: NEG
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 2
25209: PUSH
25210: LD_INT 1
25212: NEG
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 3
25220: PUSH
25221: LD_INT 0
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 3
25230: PUSH
25231: LD_INT 1
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 1
25240: PUSH
25241: LD_INT 3
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 0
25250: PUSH
25251: LD_INT 3
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 1
25260: NEG
25261: PUSH
25262: LD_INT 2
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 2
25271: NEG
25272: PUSH
25273: LD_INT 1
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 3
25282: NEG
25283: PUSH
25284: LD_INT 0
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 3
25293: NEG
25294: PUSH
25295: LD_INT 1
25297: NEG
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25334: LD_ADDR_VAR 0 44
25338: PUSH
25339: LD_INT 0
25341: PUSH
25342: LD_INT 0
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 0
25351: PUSH
25352: LD_INT 1
25354: NEG
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 1
25362: PUSH
25363: LD_INT 0
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 1
25372: PUSH
25373: LD_INT 1
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 0
25382: PUSH
25383: LD_INT 1
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: LD_INT 1
25392: NEG
25393: PUSH
25394: LD_INT 0
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 1
25403: NEG
25404: PUSH
25405: LD_INT 1
25407: NEG
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 1
25415: NEG
25416: PUSH
25417: LD_INT 2
25419: NEG
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PUSH
25425: LD_INT 1
25427: PUSH
25428: LD_INT 1
25430: NEG
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 2
25438: PUSH
25439: LD_INT 0
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 2
25448: PUSH
25449: LD_INT 1
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 2
25458: PUSH
25459: LD_INT 2
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 1
25468: PUSH
25469: LD_INT 2
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 1
25478: NEG
25479: PUSH
25480: LD_INT 1
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: LD_INT 2
25489: NEG
25490: PUSH
25491: LD_INT 0
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 2
25500: NEG
25501: PUSH
25502: LD_INT 1
25504: NEG
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 2
25512: NEG
25513: PUSH
25514: LD_INT 2
25516: NEG
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 2
25524: NEG
25525: PUSH
25526: LD_INT 3
25528: NEG
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 2
25536: PUSH
25537: LD_INT 1
25539: NEG
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 3
25547: PUSH
25548: LD_INT 0
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 3
25557: PUSH
25558: LD_INT 1
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 3
25567: PUSH
25568: LD_INT 2
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: LD_INT 3
25577: PUSH
25578: LD_INT 3
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: LD_INT 2
25587: PUSH
25588: LD_INT 3
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 2
25597: NEG
25598: PUSH
25599: LD_INT 1
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 3
25608: NEG
25609: PUSH
25610: LD_INT 0
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 3
25619: NEG
25620: PUSH
25621: LD_INT 1
25623: NEG
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 3
25631: NEG
25632: PUSH
25633: LD_INT 2
25635: NEG
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 3
25643: NEG
25644: PUSH
25645: LD_INT 3
25647: NEG
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25684: LD_ADDR_VAR 0 45
25688: PUSH
25689: LD_INT 0
25691: PUSH
25692: LD_INT 0
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 0
25701: PUSH
25702: LD_INT 1
25704: NEG
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 1
25712: PUSH
25713: LD_INT 0
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 1
25722: PUSH
25723: LD_INT 1
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 0
25732: PUSH
25733: LD_INT 1
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 1
25742: NEG
25743: PUSH
25744: LD_INT 0
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 1
25753: NEG
25754: PUSH
25755: LD_INT 1
25757: NEG
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 1
25765: NEG
25766: PUSH
25767: LD_INT 2
25769: NEG
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: LD_INT 0
25777: PUSH
25778: LD_INT 2
25780: NEG
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 1
25788: PUSH
25789: LD_INT 1
25791: NEG
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 2
25799: PUSH
25800: LD_INT 1
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 2
25809: PUSH
25810: LD_INT 2
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 1
25819: PUSH
25820: LD_INT 2
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 0
25829: PUSH
25830: LD_INT 2
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 1
25839: NEG
25840: PUSH
25841: LD_INT 1
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: LD_INT 2
25850: NEG
25851: PUSH
25852: LD_INT 1
25854: NEG
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 2
25862: NEG
25863: PUSH
25864: LD_INT 2
25866: NEG
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 2
25874: NEG
25875: PUSH
25876: LD_INT 3
25878: NEG
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 1
25886: NEG
25887: PUSH
25888: LD_INT 3
25890: NEG
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 0
25898: PUSH
25899: LD_INT 3
25901: NEG
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 1
25909: PUSH
25910: LD_INT 2
25912: NEG
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 3
25920: PUSH
25921: LD_INT 2
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 3
25930: PUSH
25931: LD_INT 3
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 2
25940: PUSH
25941: LD_INT 3
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 1
25950: PUSH
25951: LD_INT 3
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 0
25960: PUSH
25961: LD_INT 3
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 1
25970: NEG
25971: PUSH
25972: LD_INT 2
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 3
25981: NEG
25982: PUSH
25983: LD_INT 2
25985: NEG
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 3
25993: NEG
25994: PUSH
25995: LD_INT 3
25997: NEG
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26034: LD_ADDR_VAR 0 46
26038: PUSH
26039: LD_INT 0
26041: PUSH
26042: LD_INT 0
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 0
26051: PUSH
26052: LD_INT 1
26054: NEG
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 1
26062: PUSH
26063: LD_INT 0
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 1
26072: PUSH
26073: LD_INT 1
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 0
26082: PUSH
26083: LD_INT 1
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 1
26092: NEG
26093: PUSH
26094: LD_INT 0
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 1
26103: NEG
26104: PUSH
26105: LD_INT 1
26107: NEG
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: LD_INT 1
26115: NEG
26116: PUSH
26117: LD_INT 2
26119: NEG
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 0
26127: PUSH
26128: LD_INT 2
26130: NEG
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 1
26138: PUSH
26139: LD_INT 1
26141: NEG
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: LD_INT 2
26149: PUSH
26150: LD_INT 0
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 2
26159: PUSH
26160: LD_INT 1
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 1
26169: PUSH
26170: LD_INT 2
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 0
26179: PUSH
26180: LD_INT 2
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 1
26189: NEG
26190: PUSH
26191: LD_INT 1
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 2
26200: NEG
26201: PUSH
26202: LD_INT 0
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 2
26211: NEG
26212: PUSH
26213: LD_INT 1
26215: NEG
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 1
26223: NEG
26224: PUSH
26225: LD_INT 3
26227: NEG
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 0
26235: PUSH
26236: LD_INT 3
26238: NEG
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 1
26246: PUSH
26247: LD_INT 2
26249: NEG
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 2
26257: PUSH
26258: LD_INT 1
26260: NEG
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 3
26268: PUSH
26269: LD_INT 0
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 3
26278: PUSH
26279: LD_INT 1
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 1
26288: PUSH
26289: LD_INT 3
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 0
26298: PUSH
26299: LD_INT 3
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 1
26308: NEG
26309: PUSH
26310: LD_INT 2
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 2
26319: NEG
26320: PUSH
26321: LD_INT 1
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 3
26330: NEG
26331: PUSH
26332: LD_INT 0
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 3
26341: NEG
26342: PUSH
26343: LD_INT 1
26345: NEG
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26382: LD_ADDR_VAR 0 47
26386: PUSH
26387: LD_INT 0
26389: PUSH
26390: LD_INT 0
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 0
26399: PUSH
26400: LD_INT 1
26402: NEG
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 1
26410: PUSH
26411: LD_INT 0
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 1
26420: PUSH
26421: LD_INT 1
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 0
26430: PUSH
26431: LD_INT 1
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 1
26440: NEG
26441: PUSH
26442: LD_INT 0
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 1
26451: NEG
26452: PUSH
26453: LD_INT 1
26455: NEG
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 1
26463: NEG
26464: PUSH
26465: LD_INT 2
26467: NEG
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 0
26475: PUSH
26476: LD_INT 2
26478: NEG
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_INT 1
26486: PUSH
26487: LD_INT 1
26489: NEG
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 2
26497: NEG
26498: PUSH
26499: LD_INT 1
26501: NEG
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 2
26509: NEG
26510: PUSH
26511: LD_INT 2
26513: NEG
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26533: LD_ADDR_VAR 0 48
26537: PUSH
26538: LD_INT 0
26540: PUSH
26541: LD_INT 0
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 0
26550: PUSH
26551: LD_INT 1
26553: NEG
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 1
26561: PUSH
26562: LD_INT 0
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 1
26571: PUSH
26572: LD_INT 1
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 0
26581: PUSH
26582: LD_INT 1
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 1
26591: NEG
26592: PUSH
26593: LD_INT 0
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 1
26602: NEG
26603: PUSH
26604: LD_INT 1
26606: NEG
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 1
26614: NEG
26615: PUSH
26616: LD_INT 2
26618: NEG
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 0
26626: PUSH
26627: LD_INT 2
26629: NEG
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 1
26637: PUSH
26638: LD_INT 1
26640: NEG
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: LD_INT 2
26648: PUSH
26649: LD_INT 0
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 2
26658: PUSH
26659: LD_INT 1
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26680: LD_ADDR_VAR 0 49
26684: PUSH
26685: LD_INT 0
26687: PUSH
26688: LD_INT 0
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 0
26697: PUSH
26698: LD_INT 1
26700: NEG
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 1
26708: PUSH
26709: LD_INT 0
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 1
26718: PUSH
26719: LD_INT 1
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 0
26728: PUSH
26729: LD_INT 1
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 1
26738: NEG
26739: PUSH
26740: LD_INT 0
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 1
26749: NEG
26750: PUSH
26751: LD_INT 1
26753: NEG
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 1
26761: PUSH
26762: LD_INT 1
26764: NEG
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 2
26772: PUSH
26773: LD_INT 0
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 2
26782: PUSH
26783: LD_INT 1
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 2
26792: PUSH
26793: LD_INT 2
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 1
26802: PUSH
26803: LD_INT 2
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26824: LD_ADDR_VAR 0 50
26828: PUSH
26829: LD_INT 0
26831: PUSH
26832: LD_INT 0
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 0
26841: PUSH
26842: LD_INT 1
26844: NEG
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 1
26852: PUSH
26853: LD_INT 0
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 1
26862: PUSH
26863: LD_INT 1
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 0
26872: PUSH
26873: LD_INT 1
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 1
26882: NEG
26883: PUSH
26884: LD_INT 0
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 1
26893: NEG
26894: PUSH
26895: LD_INT 1
26897: NEG
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 2
26905: PUSH
26906: LD_INT 1
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 2
26915: PUSH
26916: LD_INT 2
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 1
26925: PUSH
26926: LD_INT 2
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 0
26935: PUSH
26936: LD_INT 2
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 1
26945: NEG
26946: PUSH
26947: LD_INT 1
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26968: LD_ADDR_VAR 0 51
26972: PUSH
26973: LD_INT 0
26975: PUSH
26976: LD_INT 0
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 0
26985: PUSH
26986: LD_INT 1
26988: NEG
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 1
26996: PUSH
26997: LD_INT 0
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 1
27006: PUSH
27007: LD_INT 1
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 0
27016: PUSH
27017: LD_INT 1
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 1
27026: NEG
27027: PUSH
27028: LD_INT 0
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 1
27037: NEG
27038: PUSH
27039: LD_INT 1
27041: NEG
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 1
27049: PUSH
27050: LD_INT 2
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 0
27059: PUSH
27060: LD_INT 2
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 1
27069: NEG
27070: PUSH
27071: LD_INT 1
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 2
27080: NEG
27081: PUSH
27082: LD_INT 0
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 2
27091: NEG
27092: PUSH
27093: LD_INT 1
27095: NEG
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27115: LD_ADDR_VAR 0 52
27119: PUSH
27120: LD_INT 0
27122: PUSH
27123: LD_INT 0
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 0
27132: PUSH
27133: LD_INT 1
27135: NEG
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 1
27143: PUSH
27144: LD_INT 0
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 1
27153: PUSH
27154: LD_INT 1
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 0
27163: PUSH
27164: LD_INT 1
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 1
27173: NEG
27174: PUSH
27175: LD_INT 0
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 1
27184: NEG
27185: PUSH
27186: LD_INT 1
27188: NEG
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 1
27196: NEG
27197: PUSH
27198: LD_INT 2
27200: NEG
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 1
27208: NEG
27209: PUSH
27210: LD_INT 1
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 2
27219: NEG
27220: PUSH
27221: LD_INT 0
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 2
27230: NEG
27231: PUSH
27232: LD_INT 1
27234: NEG
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 2
27242: NEG
27243: PUSH
27244: LD_INT 2
27246: NEG
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27266: LD_ADDR_VAR 0 53
27270: PUSH
27271: LD_INT 0
27273: PUSH
27274: LD_INT 0
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 0
27283: PUSH
27284: LD_INT 1
27286: NEG
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 1
27294: PUSH
27295: LD_INT 0
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 1
27304: PUSH
27305: LD_INT 1
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 0
27314: PUSH
27315: LD_INT 1
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 1
27324: NEG
27325: PUSH
27326: LD_INT 0
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 1
27335: NEG
27336: PUSH
27337: LD_INT 1
27339: NEG
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 1
27347: NEG
27348: PUSH
27349: LD_INT 2
27351: NEG
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 0
27359: PUSH
27360: LD_INT 2
27362: NEG
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 1
27370: PUSH
27371: LD_INT 1
27373: NEG
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 2
27381: PUSH
27382: LD_INT 0
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 2
27391: PUSH
27392: LD_INT 1
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 2
27401: PUSH
27402: LD_INT 2
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 1
27411: PUSH
27412: LD_INT 2
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 0
27421: PUSH
27422: LD_INT 2
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 1
27431: NEG
27432: PUSH
27433: LD_INT 1
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 2
27442: NEG
27443: PUSH
27444: LD_INT 0
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 2
27453: NEG
27454: PUSH
27455: LD_INT 1
27457: NEG
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 2
27465: NEG
27466: PUSH
27467: LD_INT 2
27469: NEG
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27496: LD_ADDR_VAR 0 54
27500: PUSH
27501: LD_INT 0
27503: PUSH
27504: LD_INT 0
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 0
27513: PUSH
27514: LD_INT 1
27516: NEG
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: PUSH
27522: LD_INT 1
27524: PUSH
27525: LD_INT 0
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 1
27534: PUSH
27535: LD_INT 1
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 0
27544: PUSH
27545: LD_INT 1
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 1
27554: NEG
27555: PUSH
27556: LD_INT 0
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: LD_INT 1
27565: NEG
27566: PUSH
27567: LD_INT 1
27569: NEG
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 1
27577: NEG
27578: PUSH
27579: LD_INT 2
27581: NEG
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 0
27589: PUSH
27590: LD_INT 2
27592: NEG
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 1
27600: PUSH
27601: LD_INT 1
27603: NEG
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 2
27611: PUSH
27612: LD_INT 0
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 2
27621: PUSH
27622: LD_INT 1
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 2
27631: PUSH
27632: LD_INT 2
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 1
27641: PUSH
27642: LD_INT 2
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 0
27651: PUSH
27652: LD_INT 2
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 1
27661: NEG
27662: PUSH
27663: LD_INT 1
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 2
27672: NEG
27673: PUSH
27674: LD_INT 0
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 2
27683: NEG
27684: PUSH
27685: LD_INT 1
27687: NEG
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 2
27695: NEG
27696: PUSH
27697: LD_INT 2
27699: NEG
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27726: LD_ADDR_VAR 0 55
27730: PUSH
27731: LD_INT 0
27733: PUSH
27734: LD_INT 0
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: LD_INT 0
27743: PUSH
27744: LD_INT 1
27746: NEG
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 1
27754: PUSH
27755: LD_INT 0
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: LD_INT 1
27764: PUSH
27765: LD_INT 1
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: LD_INT 0
27774: PUSH
27775: LD_INT 1
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: LD_INT 1
27784: NEG
27785: PUSH
27786: LD_INT 0
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: LD_INT 1
27795: NEG
27796: PUSH
27797: LD_INT 1
27799: NEG
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 1
27807: NEG
27808: PUSH
27809: LD_INT 2
27811: NEG
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 0
27819: PUSH
27820: LD_INT 2
27822: NEG
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 1
27830: PUSH
27831: LD_INT 1
27833: NEG
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 2
27841: PUSH
27842: LD_INT 0
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 2
27851: PUSH
27852: LD_INT 1
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 2
27861: PUSH
27862: LD_INT 2
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 1
27871: PUSH
27872: LD_INT 2
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: LD_INT 0
27881: PUSH
27882: LD_INT 2
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 1
27891: NEG
27892: PUSH
27893: LD_INT 1
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 2
27902: NEG
27903: PUSH
27904: LD_INT 0
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 2
27913: NEG
27914: PUSH
27915: LD_INT 1
27917: NEG
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 2
27925: NEG
27926: PUSH
27927: LD_INT 2
27929: NEG
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27956: LD_ADDR_VAR 0 56
27960: PUSH
27961: LD_INT 0
27963: PUSH
27964: LD_INT 0
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 0
27973: PUSH
27974: LD_INT 1
27976: NEG
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: LD_INT 1
27984: PUSH
27985: LD_INT 0
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 1
27994: PUSH
27995: LD_INT 1
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 0
28004: PUSH
28005: LD_INT 1
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 1
28014: NEG
28015: PUSH
28016: LD_INT 0
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 1
28025: NEG
28026: PUSH
28027: LD_INT 1
28029: NEG
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 1
28037: NEG
28038: PUSH
28039: LD_INT 2
28041: NEG
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 0
28049: PUSH
28050: LD_INT 2
28052: NEG
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: LD_INT 1
28060: PUSH
28061: LD_INT 1
28063: NEG
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 2
28071: PUSH
28072: LD_INT 0
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 2
28081: PUSH
28082: LD_INT 1
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 2
28091: PUSH
28092: LD_INT 2
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 1
28101: PUSH
28102: LD_INT 2
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: LD_INT 0
28111: PUSH
28112: LD_INT 2
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 1
28121: NEG
28122: PUSH
28123: LD_INT 1
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: LD_INT 2
28132: NEG
28133: PUSH
28134: LD_INT 0
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 2
28143: NEG
28144: PUSH
28145: LD_INT 1
28147: NEG
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 2
28155: NEG
28156: PUSH
28157: LD_INT 2
28159: NEG
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28186: LD_ADDR_VAR 0 57
28190: PUSH
28191: LD_INT 0
28193: PUSH
28194: LD_INT 0
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 0
28203: PUSH
28204: LD_INT 1
28206: NEG
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 1
28214: PUSH
28215: LD_INT 0
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 1
28224: PUSH
28225: LD_INT 1
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 0
28234: PUSH
28235: LD_INT 1
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 1
28244: NEG
28245: PUSH
28246: LD_INT 0
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 1
28255: NEG
28256: PUSH
28257: LD_INT 1
28259: NEG
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 1
28267: NEG
28268: PUSH
28269: LD_INT 2
28271: NEG
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 0
28279: PUSH
28280: LD_INT 2
28282: NEG
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 1
28290: PUSH
28291: LD_INT 1
28293: NEG
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 2
28301: PUSH
28302: LD_INT 0
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 2
28311: PUSH
28312: LD_INT 1
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 2
28321: PUSH
28322: LD_INT 2
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 1
28331: PUSH
28332: LD_INT 2
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 0
28341: PUSH
28342: LD_INT 2
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 1
28351: NEG
28352: PUSH
28353: LD_INT 1
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 2
28362: NEG
28363: PUSH
28364: LD_INT 0
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 2
28373: NEG
28374: PUSH
28375: LD_INT 1
28377: NEG
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 2
28385: NEG
28386: PUSH
28387: LD_INT 2
28389: NEG
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28416: LD_ADDR_VAR 0 58
28420: PUSH
28421: LD_INT 0
28423: PUSH
28424: LD_INT 0
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 0
28433: PUSH
28434: LD_INT 1
28436: NEG
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 1
28444: PUSH
28445: LD_INT 0
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 1
28454: PUSH
28455: LD_INT 1
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 0
28464: PUSH
28465: LD_INT 1
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 1
28474: NEG
28475: PUSH
28476: LD_INT 0
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 1
28485: NEG
28486: PUSH
28487: LD_INT 1
28489: NEG
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: LD_INT 1
28497: NEG
28498: PUSH
28499: LD_INT 2
28501: NEG
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 0
28509: PUSH
28510: LD_INT 2
28512: NEG
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 1
28520: PUSH
28521: LD_INT 1
28523: NEG
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 2
28531: PUSH
28532: LD_INT 0
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 2
28541: PUSH
28542: LD_INT 1
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 2
28551: PUSH
28552: LD_INT 2
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 1
28561: PUSH
28562: LD_INT 2
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: LD_INT 0
28571: PUSH
28572: LD_INT 2
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: LD_INT 1
28581: NEG
28582: PUSH
28583: LD_INT 1
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 2
28592: NEG
28593: PUSH
28594: LD_INT 0
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 2
28603: NEG
28604: PUSH
28605: LD_INT 1
28607: NEG
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 2
28615: NEG
28616: PUSH
28617: LD_INT 2
28619: NEG
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28646: LD_ADDR_VAR 0 59
28650: PUSH
28651: LD_INT 0
28653: PUSH
28654: LD_INT 0
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 0
28663: PUSH
28664: LD_INT 1
28666: NEG
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 1
28674: PUSH
28675: LD_INT 0
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 1
28684: PUSH
28685: LD_INT 1
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 0
28694: PUSH
28695: LD_INT 1
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 1
28704: NEG
28705: PUSH
28706: LD_INT 0
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 1
28715: NEG
28716: PUSH
28717: LD_INT 1
28719: NEG
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28734: LD_ADDR_VAR 0 60
28738: PUSH
28739: LD_INT 0
28741: PUSH
28742: LD_INT 0
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 0
28751: PUSH
28752: LD_INT 1
28754: NEG
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 1
28762: PUSH
28763: LD_INT 0
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 1
28772: PUSH
28773: LD_INT 1
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 0
28782: PUSH
28783: LD_INT 1
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 1
28792: NEG
28793: PUSH
28794: LD_INT 0
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 1
28803: NEG
28804: PUSH
28805: LD_INT 1
28807: NEG
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28822: LD_ADDR_VAR 0 61
28826: PUSH
28827: LD_INT 0
28829: PUSH
28830: LD_INT 0
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 0
28839: PUSH
28840: LD_INT 1
28842: NEG
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 1
28850: PUSH
28851: LD_INT 0
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 1
28860: PUSH
28861: LD_INT 1
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 0
28870: PUSH
28871: LD_INT 1
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 1
28880: NEG
28881: PUSH
28882: LD_INT 0
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 1
28891: NEG
28892: PUSH
28893: LD_INT 1
28895: NEG
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28910: LD_ADDR_VAR 0 62
28914: PUSH
28915: LD_INT 0
28917: PUSH
28918: LD_INT 0
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 0
28927: PUSH
28928: LD_INT 1
28930: NEG
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 1
28938: PUSH
28939: LD_INT 0
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: LD_INT 1
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 0
28958: PUSH
28959: LD_INT 1
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 1
28968: NEG
28969: PUSH
28970: LD_INT 0
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 1
28979: NEG
28980: PUSH
28981: LD_INT 1
28983: NEG
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28998: LD_ADDR_VAR 0 63
29002: PUSH
29003: LD_INT 0
29005: PUSH
29006: LD_INT 0
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 0
29015: PUSH
29016: LD_INT 1
29018: NEG
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 1
29026: PUSH
29027: LD_INT 0
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 1
29036: PUSH
29037: LD_INT 1
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 0
29046: PUSH
29047: LD_INT 1
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 1
29056: NEG
29057: PUSH
29058: LD_INT 0
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 1
29067: NEG
29068: PUSH
29069: LD_INT 1
29071: NEG
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29086: LD_ADDR_VAR 0 64
29090: PUSH
29091: LD_INT 0
29093: PUSH
29094: LD_INT 0
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 0
29103: PUSH
29104: LD_INT 1
29106: NEG
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: LD_INT 1
29114: PUSH
29115: LD_INT 0
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 1
29124: PUSH
29125: LD_INT 1
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 0
29134: PUSH
29135: LD_INT 1
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 1
29144: NEG
29145: PUSH
29146: LD_INT 0
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 1
29155: NEG
29156: PUSH
29157: LD_INT 1
29159: NEG
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: ST_TO_ADDR
// end ; 1 :
29174: GO 35071
29176: LD_INT 1
29178: DOUBLE
29179: EQUAL
29180: IFTRUE 29184
29182: GO 31807
29184: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29185: LD_ADDR_VAR 0 11
29189: PUSH
29190: LD_INT 1
29192: NEG
29193: PUSH
29194: LD_INT 3
29196: NEG
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 0
29204: PUSH
29205: LD_INT 3
29207: NEG
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 1
29215: PUSH
29216: LD_INT 2
29218: NEG
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: LIST
29228: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29229: LD_ADDR_VAR 0 12
29233: PUSH
29234: LD_INT 2
29236: PUSH
29237: LD_INT 1
29239: NEG
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 3
29247: PUSH
29248: LD_INT 0
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 3
29257: PUSH
29258: LD_INT 1
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: LIST
29269: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29270: LD_ADDR_VAR 0 13
29274: PUSH
29275: LD_INT 3
29277: PUSH
29278: LD_INT 2
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 3
29287: PUSH
29288: LD_INT 3
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 2
29297: PUSH
29298: LD_INT 3
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: LIST
29309: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29310: LD_ADDR_VAR 0 14
29314: PUSH
29315: LD_INT 1
29317: PUSH
29318: LD_INT 3
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 0
29327: PUSH
29328: LD_INT 3
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: LD_INT 1
29337: NEG
29338: PUSH
29339: LD_INT 2
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: LIST
29350: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29351: LD_ADDR_VAR 0 15
29355: PUSH
29356: LD_INT 2
29358: NEG
29359: PUSH
29360: LD_INT 1
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 3
29369: NEG
29370: PUSH
29371: LD_INT 0
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 3
29380: NEG
29381: PUSH
29382: LD_INT 1
29384: NEG
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: LIST
29394: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29395: LD_ADDR_VAR 0 16
29399: PUSH
29400: LD_INT 2
29402: NEG
29403: PUSH
29404: LD_INT 3
29406: NEG
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 3
29414: NEG
29415: PUSH
29416: LD_INT 2
29418: NEG
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 3
29426: NEG
29427: PUSH
29428: LD_INT 3
29430: NEG
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: LIST
29440: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29441: LD_ADDR_VAR 0 17
29445: PUSH
29446: LD_INT 1
29448: NEG
29449: PUSH
29450: LD_INT 3
29452: NEG
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 0
29460: PUSH
29461: LD_INT 3
29463: NEG
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 1
29471: PUSH
29472: LD_INT 2
29474: NEG
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: LIST
29484: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29485: LD_ADDR_VAR 0 18
29489: PUSH
29490: LD_INT 2
29492: PUSH
29493: LD_INT 1
29495: NEG
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 3
29503: PUSH
29504: LD_INT 0
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 3
29513: PUSH
29514: LD_INT 1
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: LIST
29525: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29526: LD_ADDR_VAR 0 19
29530: PUSH
29531: LD_INT 3
29533: PUSH
29534: LD_INT 2
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 3
29543: PUSH
29544: LD_INT 3
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 2
29553: PUSH
29554: LD_INT 3
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: LIST
29565: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29566: LD_ADDR_VAR 0 20
29570: PUSH
29571: LD_INT 1
29573: PUSH
29574: LD_INT 3
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 0
29583: PUSH
29584: LD_INT 3
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 1
29593: NEG
29594: PUSH
29595: LD_INT 2
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: LIST
29606: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29607: LD_ADDR_VAR 0 21
29611: PUSH
29612: LD_INT 2
29614: NEG
29615: PUSH
29616: LD_INT 1
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 3
29625: NEG
29626: PUSH
29627: LD_INT 0
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 3
29636: NEG
29637: PUSH
29638: LD_INT 1
29640: NEG
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: LIST
29650: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29651: LD_ADDR_VAR 0 22
29655: PUSH
29656: LD_INT 2
29658: NEG
29659: PUSH
29660: LD_INT 3
29662: NEG
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 3
29670: NEG
29671: PUSH
29672: LD_INT 2
29674: NEG
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 3
29682: NEG
29683: PUSH
29684: LD_INT 3
29686: NEG
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: LIST
29696: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29697: LD_ADDR_VAR 0 23
29701: PUSH
29702: LD_INT 0
29704: PUSH
29705: LD_INT 3
29707: NEG
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PUSH
29713: LD_INT 1
29715: NEG
29716: PUSH
29717: LD_INT 4
29719: NEG
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 1
29727: PUSH
29728: LD_INT 3
29730: NEG
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: LIST
29740: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29741: LD_ADDR_VAR 0 24
29745: PUSH
29746: LD_INT 3
29748: PUSH
29749: LD_INT 0
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 3
29758: PUSH
29759: LD_INT 1
29761: NEG
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 4
29769: PUSH
29770: LD_INT 1
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: LIST
29781: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29782: LD_ADDR_VAR 0 25
29786: PUSH
29787: LD_INT 3
29789: PUSH
29790: LD_INT 3
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 4
29799: PUSH
29800: LD_INT 3
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 3
29809: PUSH
29810: LD_INT 4
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: LIST
29821: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29822: LD_ADDR_VAR 0 26
29826: PUSH
29827: LD_INT 0
29829: PUSH
29830: LD_INT 3
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 1
29839: PUSH
29840: LD_INT 4
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 1
29849: NEG
29850: PUSH
29851: LD_INT 3
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: LIST
29862: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29863: LD_ADDR_VAR 0 27
29867: PUSH
29868: LD_INT 3
29870: NEG
29871: PUSH
29872: LD_INT 0
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 3
29881: NEG
29882: PUSH
29883: LD_INT 1
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 4
29892: NEG
29893: PUSH
29894: LD_INT 1
29896: NEG
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: LIST
29906: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29907: LD_ADDR_VAR 0 28
29911: PUSH
29912: LD_INT 3
29914: NEG
29915: PUSH
29916: LD_INT 3
29918: NEG
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 3
29926: NEG
29927: PUSH
29928: LD_INT 4
29930: NEG
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 4
29938: NEG
29939: PUSH
29940: LD_INT 3
29942: NEG
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: LIST
29952: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29953: LD_ADDR_VAR 0 29
29957: PUSH
29958: LD_INT 1
29960: NEG
29961: PUSH
29962: LD_INT 3
29964: NEG
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 0
29972: PUSH
29973: LD_INT 3
29975: NEG
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 1
29983: PUSH
29984: LD_INT 2
29986: NEG
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 1
29994: NEG
29995: PUSH
29996: LD_INT 4
29998: NEG
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: PUSH
30004: LD_INT 0
30006: PUSH
30007: LD_INT 4
30009: NEG
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 1
30017: PUSH
30018: LD_INT 3
30020: NEG
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 1
30028: NEG
30029: PUSH
30030: LD_INT 5
30032: NEG
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 0
30040: PUSH
30041: LD_INT 5
30043: NEG
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 1
30051: PUSH
30052: LD_INT 4
30054: NEG
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 1
30062: NEG
30063: PUSH
30064: LD_INT 6
30066: NEG
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 0
30074: PUSH
30075: LD_INT 6
30077: NEG
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 1
30085: PUSH
30086: LD_INT 5
30088: NEG
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30108: LD_ADDR_VAR 0 30
30112: PUSH
30113: LD_INT 2
30115: PUSH
30116: LD_INT 1
30118: NEG
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 3
30126: PUSH
30127: LD_INT 0
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 3
30136: PUSH
30137: LD_INT 1
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 3
30146: PUSH
30147: LD_INT 1
30149: NEG
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 4
30157: PUSH
30158: LD_INT 0
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 4
30167: PUSH
30168: LD_INT 1
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 4
30177: PUSH
30178: LD_INT 1
30180: NEG
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 5
30188: PUSH
30189: LD_INT 0
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 5
30198: PUSH
30199: LD_INT 1
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 5
30208: PUSH
30209: LD_INT 1
30211: NEG
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 6
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 6
30229: PUSH
30230: LD_INT 1
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30251: LD_ADDR_VAR 0 31
30255: PUSH
30256: LD_INT 3
30258: PUSH
30259: LD_INT 2
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 3
30268: PUSH
30269: LD_INT 3
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 2
30278: PUSH
30279: LD_INT 3
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 4
30288: PUSH
30289: LD_INT 3
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 4
30298: PUSH
30299: LD_INT 4
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 3
30308: PUSH
30309: LD_INT 4
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 5
30318: PUSH
30319: LD_INT 4
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 5
30328: PUSH
30329: LD_INT 5
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 4
30338: PUSH
30339: LD_INT 5
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 6
30348: PUSH
30349: LD_INT 5
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 6
30358: PUSH
30359: LD_INT 6
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 5
30368: PUSH
30369: LD_INT 6
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30390: LD_ADDR_VAR 0 32
30394: PUSH
30395: LD_INT 1
30397: PUSH
30398: LD_INT 3
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 0
30407: PUSH
30408: LD_INT 3
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 1
30417: NEG
30418: PUSH
30419: LD_INT 2
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 1
30428: PUSH
30429: LD_INT 4
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 0
30438: PUSH
30439: LD_INT 4
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 1
30448: NEG
30449: PUSH
30450: LD_INT 3
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 1
30459: PUSH
30460: LD_INT 5
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 0
30469: PUSH
30470: LD_INT 5
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 1
30479: NEG
30480: PUSH
30481: LD_INT 4
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 1
30490: PUSH
30491: LD_INT 6
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 0
30500: PUSH
30501: LD_INT 6
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 1
30510: NEG
30511: PUSH
30512: LD_INT 5
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30533: LD_ADDR_VAR 0 33
30537: PUSH
30538: LD_INT 2
30540: NEG
30541: PUSH
30542: LD_INT 1
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 3
30551: NEG
30552: PUSH
30553: LD_INT 0
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 3
30562: NEG
30563: PUSH
30564: LD_INT 1
30566: NEG
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 3
30574: NEG
30575: PUSH
30576: LD_INT 1
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 4
30585: NEG
30586: PUSH
30587: LD_INT 0
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 4
30596: NEG
30597: PUSH
30598: LD_INT 1
30600: NEG
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 4
30608: NEG
30609: PUSH
30610: LD_INT 1
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 5
30619: NEG
30620: PUSH
30621: LD_INT 0
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 5
30630: NEG
30631: PUSH
30632: LD_INT 1
30634: NEG
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 5
30642: NEG
30643: PUSH
30644: LD_INT 1
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 6
30653: NEG
30654: PUSH
30655: LD_INT 0
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 6
30664: NEG
30665: PUSH
30666: LD_INT 1
30668: NEG
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30688: LD_ADDR_VAR 0 34
30692: PUSH
30693: LD_INT 2
30695: NEG
30696: PUSH
30697: LD_INT 3
30699: NEG
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 3
30707: NEG
30708: PUSH
30709: LD_INT 2
30711: NEG
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 3
30719: NEG
30720: PUSH
30721: LD_INT 3
30723: NEG
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 3
30731: NEG
30732: PUSH
30733: LD_INT 4
30735: NEG
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: LD_INT 4
30743: NEG
30744: PUSH
30745: LD_INT 3
30747: NEG
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 4
30755: NEG
30756: PUSH
30757: LD_INT 4
30759: NEG
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 4
30767: NEG
30768: PUSH
30769: LD_INT 5
30771: NEG
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 5
30779: NEG
30780: PUSH
30781: LD_INT 4
30783: NEG
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 5
30791: NEG
30792: PUSH
30793: LD_INT 5
30795: NEG
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 5
30803: NEG
30804: PUSH
30805: LD_INT 6
30807: NEG
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 6
30815: NEG
30816: PUSH
30817: LD_INT 5
30819: NEG
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 6
30827: NEG
30828: PUSH
30829: LD_INT 6
30831: NEG
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30851: LD_ADDR_VAR 0 41
30855: PUSH
30856: LD_INT 0
30858: PUSH
30859: LD_INT 2
30861: NEG
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 1
30869: NEG
30870: PUSH
30871: LD_INT 3
30873: NEG
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 1
30881: PUSH
30882: LD_INT 2
30884: NEG
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: LIST
30894: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30895: LD_ADDR_VAR 0 42
30899: PUSH
30900: LD_INT 2
30902: PUSH
30903: LD_INT 0
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 2
30912: PUSH
30913: LD_INT 1
30915: NEG
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 3
30923: PUSH
30924: LD_INT 1
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: LIST
30935: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30936: LD_ADDR_VAR 0 43
30940: PUSH
30941: LD_INT 2
30943: PUSH
30944: LD_INT 2
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 3
30953: PUSH
30954: LD_INT 2
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 2
30963: PUSH
30964: LD_INT 3
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: LIST
30975: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30976: LD_ADDR_VAR 0 44
30980: PUSH
30981: LD_INT 0
30983: PUSH
30984: LD_INT 2
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 1
30993: PUSH
30994: LD_INT 3
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 1
31003: NEG
31004: PUSH
31005: LD_INT 2
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: LIST
31016: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31017: LD_ADDR_VAR 0 45
31021: PUSH
31022: LD_INT 2
31024: NEG
31025: PUSH
31026: LD_INT 0
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 2
31035: NEG
31036: PUSH
31037: LD_INT 1
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 3
31046: NEG
31047: PUSH
31048: LD_INT 1
31050: NEG
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: LIST
31060: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31061: LD_ADDR_VAR 0 46
31065: PUSH
31066: LD_INT 2
31068: NEG
31069: PUSH
31070: LD_INT 2
31072: NEG
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 2
31080: NEG
31081: PUSH
31082: LD_INT 3
31084: NEG
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 3
31092: NEG
31093: PUSH
31094: LD_INT 2
31096: NEG
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: LIST
31106: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31107: LD_ADDR_VAR 0 47
31111: PUSH
31112: LD_INT 2
31114: NEG
31115: PUSH
31116: LD_INT 3
31118: NEG
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 1
31126: NEG
31127: PUSH
31128: LD_INT 3
31130: NEG
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31140: LD_ADDR_VAR 0 48
31144: PUSH
31145: LD_INT 1
31147: PUSH
31148: LD_INT 2
31150: NEG
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 2
31158: PUSH
31159: LD_INT 1
31161: NEG
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31171: LD_ADDR_VAR 0 49
31175: PUSH
31176: LD_INT 3
31178: PUSH
31179: LD_INT 1
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 3
31188: PUSH
31189: LD_INT 2
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31200: LD_ADDR_VAR 0 50
31204: PUSH
31205: LD_INT 2
31207: PUSH
31208: LD_INT 3
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 1
31217: PUSH
31218: LD_INT 3
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31229: LD_ADDR_VAR 0 51
31233: PUSH
31234: LD_INT 1
31236: NEG
31237: PUSH
31238: LD_INT 2
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 2
31247: NEG
31248: PUSH
31249: LD_INT 1
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31260: LD_ADDR_VAR 0 52
31264: PUSH
31265: LD_INT 3
31267: NEG
31268: PUSH
31269: LD_INT 1
31271: NEG
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 3
31279: NEG
31280: PUSH
31281: LD_INT 2
31283: NEG
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31293: LD_ADDR_VAR 0 53
31297: PUSH
31298: LD_INT 1
31300: NEG
31301: PUSH
31302: LD_INT 3
31304: NEG
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 0
31312: PUSH
31313: LD_INT 3
31315: NEG
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 1
31323: PUSH
31324: LD_INT 2
31326: NEG
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: LIST
31336: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31337: LD_ADDR_VAR 0 54
31341: PUSH
31342: LD_INT 2
31344: PUSH
31345: LD_INT 1
31347: NEG
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 3
31355: PUSH
31356: LD_INT 0
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 3
31365: PUSH
31366: LD_INT 1
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: LIST
31377: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31378: LD_ADDR_VAR 0 55
31382: PUSH
31383: LD_INT 3
31385: PUSH
31386: LD_INT 2
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 3
31395: PUSH
31396: LD_INT 3
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 2
31405: PUSH
31406: LD_INT 3
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: LIST
31417: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31418: LD_ADDR_VAR 0 56
31422: PUSH
31423: LD_INT 1
31425: PUSH
31426: LD_INT 3
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 0
31435: PUSH
31436: LD_INT 3
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 1
31445: NEG
31446: PUSH
31447: LD_INT 2
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: LIST
31458: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31459: LD_ADDR_VAR 0 57
31463: PUSH
31464: LD_INT 2
31466: NEG
31467: PUSH
31468: LD_INT 1
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 3
31477: NEG
31478: PUSH
31479: LD_INT 0
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 3
31488: NEG
31489: PUSH
31490: LD_INT 1
31492: NEG
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: LIST
31502: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31503: LD_ADDR_VAR 0 58
31507: PUSH
31508: LD_INT 2
31510: NEG
31511: PUSH
31512: LD_INT 3
31514: NEG
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 3
31522: NEG
31523: PUSH
31524: LD_INT 2
31526: NEG
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 3
31534: NEG
31535: PUSH
31536: LD_INT 3
31538: NEG
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: LIST
31548: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31549: LD_ADDR_VAR 0 59
31553: PUSH
31554: LD_INT 1
31556: NEG
31557: PUSH
31558: LD_INT 2
31560: NEG
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 0
31568: PUSH
31569: LD_INT 2
31571: NEG
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 1
31579: PUSH
31580: LD_INT 1
31582: NEG
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: LIST
31592: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31593: LD_ADDR_VAR 0 60
31597: PUSH
31598: LD_INT 1
31600: PUSH
31601: LD_INT 1
31603: NEG
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 2
31611: PUSH
31612: LD_INT 0
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 2
31621: PUSH
31622: LD_INT 1
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: LIST
31633: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31634: LD_ADDR_VAR 0 61
31638: PUSH
31639: LD_INT 2
31641: PUSH
31642: LD_INT 1
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 2
31651: PUSH
31652: LD_INT 2
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 1
31661: PUSH
31662: LD_INT 2
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: LIST
31673: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31674: LD_ADDR_VAR 0 62
31678: PUSH
31679: LD_INT 1
31681: PUSH
31682: LD_INT 2
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 0
31691: PUSH
31692: LD_INT 2
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 1
31701: NEG
31702: PUSH
31703: LD_INT 1
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: LIST
31714: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31715: LD_ADDR_VAR 0 63
31719: PUSH
31720: LD_INT 1
31722: NEG
31723: PUSH
31724: LD_INT 1
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 2
31733: NEG
31734: PUSH
31735: LD_INT 0
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 2
31744: NEG
31745: PUSH
31746: LD_INT 1
31748: NEG
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: LIST
31758: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31759: LD_ADDR_VAR 0 64
31763: PUSH
31764: LD_INT 1
31766: NEG
31767: PUSH
31768: LD_INT 2
31770: NEG
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 2
31778: NEG
31779: PUSH
31780: LD_INT 1
31782: NEG
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 2
31790: NEG
31791: PUSH
31792: LD_INT 2
31794: NEG
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: LIST
31804: ST_TO_ADDR
// end ; 2 :
31805: GO 35071
31807: LD_INT 2
31809: DOUBLE
31810: EQUAL
31811: IFTRUE 31815
31813: GO 35070
31815: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31816: LD_ADDR_VAR 0 29
31820: PUSH
31821: LD_INT 4
31823: PUSH
31824: LD_INT 0
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 4
31833: PUSH
31834: LD_INT 1
31836: NEG
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 5
31844: PUSH
31845: LD_INT 0
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 5
31854: PUSH
31855: LD_INT 1
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 4
31864: PUSH
31865: LD_INT 1
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 3
31874: PUSH
31875: LD_INT 0
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 3
31884: PUSH
31885: LD_INT 1
31887: NEG
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 3
31895: PUSH
31896: LD_INT 2
31898: NEG
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 5
31906: PUSH
31907: LD_INT 2
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 3
31916: PUSH
31917: LD_INT 3
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 3
31926: PUSH
31927: LD_INT 2
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 4
31936: PUSH
31937: LD_INT 3
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 4
31946: PUSH
31947: LD_INT 4
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 3
31956: PUSH
31957: LD_INT 4
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 2
31966: PUSH
31967: LD_INT 3
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 2
31976: PUSH
31977: LD_INT 2
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 4
31986: PUSH
31987: LD_INT 2
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 2
31996: PUSH
31997: LD_INT 4
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 0
32006: PUSH
32007: LD_INT 4
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 0
32016: PUSH
32017: LD_INT 3
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 1
32026: PUSH
32027: LD_INT 4
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 1
32036: PUSH
32037: LD_INT 5
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 0
32046: PUSH
32047: LD_INT 5
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 1
32056: NEG
32057: PUSH
32058: LD_INT 4
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 1
32067: NEG
32068: PUSH
32069: LD_INT 3
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 2
32078: PUSH
32079: LD_INT 5
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 2
32088: NEG
32089: PUSH
32090: LD_INT 3
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 3
32099: NEG
32100: PUSH
32101: LD_INT 0
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 3
32110: NEG
32111: PUSH
32112: LD_INT 1
32114: NEG
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 2
32122: NEG
32123: PUSH
32124: LD_INT 0
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 2
32133: NEG
32134: PUSH
32135: LD_INT 1
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 3
32144: NEG
32145: PUSH
32146: LD_INT 1
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 4
32155: NEG
32156: PUSH
32157: LD_INT 0
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 4
32166: NEG
32167: PUSH
32168: LD_INT 1
32170: NEG
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 4
32178: NEG
32179: PUSH
32180: LD_INT 2
32182: NEG
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 2
32190: NEG
32191: PUSH
32192: LD_INT 2
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 4
32201: NEG
32202: PUSH
32203: LD_INT 4
32205: NEG
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 4
32213: NEG
32214: PUSH
32215: LD_INT 5
32217: NEG
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 3
32225: NEG
32226: PUSH
32227: LD_INT 4
32229: NEG
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 3
32237: NEG
32238: PUSH
32239: LD_INT 3
32241: NEG
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 4
32249: NEG
32250: PUSH
32251: LD_INT 3
32253: NEG
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 5
32261: NEG
32262: PUSH
32263: LD_INT 4
32265: NEG
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 5
32273: NEG
32274: PUSH
32275: LD_INT 5
32277: NEG
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 3
32285: NEG
32286: PUSH
32287: LD_INT 5
32289: NEG
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 5
32297: NEG
32298: PUSH
32299: LD_INT 3
32301: NEG
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32354: LD_ADDR_VAR 0 30
32358: PUSH
32359: LD_INT 4
32361: PUSH
32362: LD_INT 4
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 4
32371: PUSH
32372: LD_INT 3
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 5
32381: PUSH
32382: LD_INT 4
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 5
32391: PUSH
32392: LD_INT 5
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 4
32401: PUSH
32402: LD_INT 5
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 3
32411: PUSH
32412: LD_INT 4
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 3
32421: PUSH
32422: LD_INT 3
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 5
32431: PUSH
32432: LD_INT 3
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 3
32441: PUSH
32442: LD_INT 5
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 0
32451: PUSH
32452: LD_INT 3
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 0
32461: PUSH
32462: LD_INT 2
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 1
32471: PUSH
32472: LD_INT 3
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 1
32481: PUSH
32482: LD_INT 4
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 0
32491: PUSH
32492: LD_INT 4
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 1
32501: NEG
32502: PUSH
32503: LD_INT 3
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 1
32512: NEG
32513: PUSH
32514: LD_INT 2
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 2
32523: PUSH
32524: LD_INT 4
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 2
32533: NEG
32534: PUSH
32535: LD_INT 2
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 4
32544: NEG
32545: PUSH
32546: LD_INT 0
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 4
32555: NEG
32556: PUSH
32557: LD_INT 1
32559: NEG
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 3
32567: NEG
32568: PUSH
32569: LD_INT 0
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 3
32578: NEG
32579: PUSH
32580: LD_INT 1
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 4
32589: NEG
32590: PUSH
32591: LD_INT 1
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 5
32600: NEG
32601: PUSH
32602: LD_INT 0
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 5
32611: NEG
32612: PUSH
32613: LD_INT 1
32615: NEG
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 5
32623: NEG
32624: PUSH
32625: LD_INT 2
32627: NEG
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 3
32635: NEG
32636: PUSH
32637: LD_INT 2
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 3
32646: NEG
32647: PUSH
32648: LD_INT 3
32650: NEG
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 3
32658: NEG
32659: PUSH
32660: LD_INT 4
32662: NEG
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 2
32670: NEG
32671: PUSH
32672: LD_INT 3
32674: NEG
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 2
32682: NEG
32683: PUSH
32684: LD_INT 2
32686: NEG
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 3
32694: NEG
32695: PUSH
32696: LD_INT 2
32698: NEG
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 4
32706: NEG
32707: PUSH
32708: LD_INT 3
32710: NEG
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 4
32718: NEG
32719: PUSH
32720: LD_INT 4
32722: NEG
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 2
32730: NEG
32731: PUSH
32732: LD_INT 4
32734: NEG
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 4
32742: NEG
32743: PUSH
32744: LD_INT 2
32746: NEG
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 0
32754: PUSH
32755: LD_INT 4
32757: NEG
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: LD_INT 5
32768: NEG
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 1
32776: PUSH
32777: LD_INT 4
32779: NEG
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 1
32787: PUSH
32788: LD_INT 3
32790: NEG
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 0
32798: PUSH
32799: LD_INT 3
32801: NEG
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 1
32809: NEG
32810: PUSH
32811: LD_INT 4
32813: NEG
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 1
32821: NEG
32822: PUSH
32823: LD_INT 5
32825: NEG
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 2
32833: PUSH
32834: LD_INT 3
32836: NEG
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 2
32844: NEG
32845: PUSH
32846: LD_INT 5
32848: NEG
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32901: LD_ADDR_VAR 0 31
32905: PUSH
32906: LD_INT 0
32908: PUSH
32909: LD_INT 4
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 0
32918: PUSH
32919: LD_INT 3
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 1
32928: PUSH
32929: LD_INT 4
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 1
32938: PUSH
32939: LD_INT 5
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 0
32948: PUSH
32949: LD_INT 5
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 1
32958: NEG
32959: PUSH
32960: LD_INT 4
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 1
32969: NEG
32970: PUSH
32971: LD_INT 3
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 2
32980: PUSH
32981: LD_INT 5
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 2
32990: NEG
32991: PUSH
32992: LD_INT 3
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 3
33001: NEG
33002: PUSH
33003: LD_INT 0
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 3
33012: NEG
33013: PUSH
33014: LD_INT 1
33016: NEG
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 2
33024: NEG
33025: PUSH
33026: LD_INT 0
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 2
33035: NEG
33036: PUSH
33037: LD_INT 1
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 3
33046: NEG
33047: PUSH
33048: LD_INT 1
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 4
33057: NEG
33058: PUSH
33059: LD_INT 0
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 4
33068: NEG
33069: PUSH
33070: LD_INT 1
33072: NEG
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 4
33080: NEG
33081: PUSH
33082: LD_INT 2
33084: NEG
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 2
33092: NEG
33093: PUSH
33094: LD_INT 2
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 4
33103: NEG
33104: PUSH
33105: LD_INT 4
33107: NEG
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 4
33115: NEG
33116: PUSH
33117: LD_INT 5
33119: NEG
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 3
33127: NEG
33128: PUSH
33129: LD_INT 4
33131: NEG
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 3
33139: NEG
33140: PUSH
33141: LD_INT 3
33143: NEG
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 4
33151: NEG
33152: PUSH
33153: LD_INT 3
33155: NEG
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 5
33163: NEG
33164: PUSH
33165: LD_INT 4
33167: NEG
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 5
33175: NEG
33176: PUSH
33177: LD_INT 5
33179: NEG
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 3
33187: NEG
33188: PUSH
33189: LD_INT 5
33191: NEG
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 5
33199: NEG
33200: PUSH
33201: LD_INT 3
33203: NEG
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 0
33211: PUSH
33212: LD_INT 3
33214: NEG
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 0
33222: PUSH
33223: LD_INT 4
33225: NEG
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 1
33233: PUSH
33234: LD_INT 3
33236: NEG
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 1
33244: PUSH
33245: LD_INT 2
33247: NEG
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 0
33255: PUSH
33256: LD_INT 2
33258: NEG
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 1
33266: NEG
33267: PUSH
33268: LD_INT 3
33270: NEG
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 1
33278: NEG
33279: PUSH
33280: LD_INT 4
33282: NEG
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 2
33290: PUSH
33291: LD_INT 2
33293: NEG
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 2
33301: NEG
33302: PUSH
33303: LD_INT 4
33305: NEG
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 4
33313: PUSH
33314: LD_INT 0
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 4
33323: PUSH
33324: LD_INT 1
33326: NEG
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 5
33334: PUSH
33335: LD_INT 0
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 5
33344: PUSH
33345: LD_INT 1
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 4
33354: PUSH
33355: LD_INT 1
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 3
33364: PUSH
33365: LD_INT 0
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 3
33374: PUSH
33375: LD_INT 1
33377: NEG
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 3
33385: PUSH
33386: LD_INT 2
33388: NEG
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 5
33396: PUSH
33397: LD_INT 2
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33451: LD_ADDR_VAR 0 32
33455: PUSH
33456: LD_INT 4
33458: NEG
33459: PUSH
33460: LD_INT 0
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 4
33469: NEG
33470: PUSH
33471: LD_INT 1
33473: NEG
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 3
33481: NEG
33482: PUSH
33483: LD_INT 0
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 3
33492: NEG
33493: PUSH
33494: LD_INT 1
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 4
33503: NEG
33504: PUSH
33505: LD_INT 1
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 5
33514: NEG
33515: PUSH
33516: LD_INT 0
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 5
33525: NEG
33526: PUSH
33527: LD_INT 1
33529: NEG
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 5
33537: NEG
33538: PUSH
33539: LD_INT 2
33541: NEG
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 3
33549: NEG
33550: PUSH
33551: LD_INT 2
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 3
33560: NEG
33561: PUSH
33562: LD_INT 3
33564: NEG
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 3
33572: NEG
33573: PUSH
33574: LD_INT 4
33576: NEG
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 2
33584: NEG
33585: PUSH
33586: LD_INT 3
33588: NEG
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 2
33596: NEG
33597: PUSH
33598: LD_INT 2
33600: NEG
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 3
33608: NEG
33609: PUSH
33610: LD_INT 2
33612: NEG
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 4
33620: NEG
33621: PUSH
33622: LD_INT 3
33624: NEG
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 4
33632: NEG
33633: PUSH
33634: LD_INT 4
33636: NEG
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 2
33644: NEG
33645: PUSH
33646: LD_INT 4
33648: NEG
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 4
33656: NEG
33657: PUSH
33658: LD_INT 2
33660: NEG
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 0
33668: PUSH
33669: LD_INT 4
33671: NEG
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 0
33679: PUSH
33680: LD_INT 5
33682: NEG
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 1
33690: PUSH
33691: LD_INT 4
33693: NEG
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 1
33701: PUSH
33702: LD_INT 3
33704: NEG
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 0
33712: PUSH
33713: LD_INT 3
33715: NEG
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 1
33723: NEG
33724: PUSH
33725: LD_INT 4
33727: NEG
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 1
33735: NEG
33736: PUSH
33737: LD_INT 5
33739: NEG
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 2
33747: PUSH
33748: LD_INT 3
33750: NEG
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 2
33758: NEG
33759: PUSH
33760: LD_INT 5
33762: NEG
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 3
33770: PUSH
33771: LD_INT 0
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 3
33780: PUSH
33781: LD_INT 1
33783: NEG
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 4
33791: PUSH
33792: LD_INT 0
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 4
33801: PUSH
33802: LD_INT 1
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 3
33811: PUSH
33812: LD_INT 1
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 2
33821: PUSH
33822: LD_INT 0
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 2
33831: PUSH
33832: LD_INT 1
33834: NEG
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 2
33842: PUSH
33843: LD_INT 2
33845: NEG
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 4
33853: PUSH
33854: LD_INT 2
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 4
33863: PUSH
33864: LD_INT 4
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_INT 4
33873: PUSH
33874: LD_INT 3
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 5
33883: PUSH
33884: LD_INT 4
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 5
33893: PUSH
33894: LD_INT 5
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 4
33903: PUSH
33904: LD_INT 5
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 3
33913: PUSH
33914: LD_INT 4
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 3
33923: PUSH
33924: LD_INT 3
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 5
33933: PUSH
33934: LD_INT 3
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 3
33943: PUSH
33944: LD_INT 5
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33998: LD_ADDR_VAR 0 33
34002: PUSH
34003: LD_INT 4
34005: NEG
34006: PUSH
34007: LD_INT 4
34009: NEG
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 4
34017: NEG
34018: PUSH
34019: LD_INT 5
34021: NEG
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 3
34029: NEG
34030: PUSH
34031: LD_INT 4
34033: NEG
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 3
34041: NEG
34042: PUSH
34043: LD_INT 3
34045: NEG
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 4
34053: NEG
34054: PUSH
34055: LD_INT 3
34057: NEG
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 5
34065: NEG
34066: PUSH
34067: LD_INT 4
34069: NEG
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 5
34077: NEG
34078: PUSH
34079: LD_INT 5
34081: NEG
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 3
34089: NEG
34090: PUSH
34091: LD_INT 5
34093: NEG
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 5
34101: NEG
34102: PUSH
34103: LD_INT 3
34105: NEG
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 0
34113: PUSH
34114: LD_INT 3
34116: NEG
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 0
34124: PUSH
34125: LD_INT 4
34127: NEG
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 1
34135: PUSH
34136: LD_INT 3
34138: NEG
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 1
34146: PUSH
34147: LD_INT 2
34149: NEG
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 0
34157: PUSH
34158: LD_INT 2
34160: NEG
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 1
34168: NEG
34169: PUSH
34170: LD_INT 3
34172: NEG
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 1
34180: NEG
34181: PUSH
34182: LD_INT 4
34184: NEG
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 2
34192: PUSH
34193: LD_INT 2
34195: NEG
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 2
34203: NEG
34204: PUSH
34205: LD_INT 4
34207: NEG
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 4
34215: PUSH
34216: LD_INT 0
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 4
34225: PUSH
34226: LD_INT 1
34228: NEG
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 5
34236: PUSH
34237: LD_INT 0
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 5
34246: PUSH
34247: LD_INT 1
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 4
34256: PUSH
34257: LD_INT 1
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 3
34266: PUSH
34267: LD_INT 0
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 3
34276: PUSH
34277: LD_INT 1
34279: NEG
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PUSH
34285: LD_INT 3
34287: PUSH
34288: LD_INT 2
34290: NEG
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 5
34298: PUSH
34299: LD_INT 2
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 3
34308: PUSH
34309: LD_INT 3
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 3
34318: PUSH
34319: LD_INT 2
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 4
34328: PUSH
34329: LD_INT 3
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 4
34338: PUSH
34339: LD_INT 4
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 3
34348: PUSH
34349: LD_INT 4
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 2
34358: PUSH
34359: LD_INT 3
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 2
34368: PUSH
34369: LD_INT 2
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 4
34378: PUSH
34379: LD_INT 2
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 2
34388: PUSH
34389: LD_INT 4
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 0
34398: PUSH
34399: LD_INT 4
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 0
34408: PUSH
34409: LD_INT 3
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 1
34418: PUSH
34419: LD_INT 4
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 1
34428: PUSH
34429: LD_INT 5
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 0
34438: PUSH
34439: LD_INT 5
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 1
34448: NEG
34449: PUSH
34450: LD_INT 4
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 1
34459: NEG
34460: PUSH
34461: LD_INT 3
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 2
34470: PUSH
34471: LD_INT 5
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 2
34480: NEG
34481: PUSH
34482: LD_INT 3
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34536: LD_ADDR_VAR 0 34
34540: PUSH
34541: LD_INT 0
34543: PUSH
34544: LD_INT 4
34546: NEG
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 0
34554: PUSH
34555: LD_INT 5
34557: NEG
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 1
34565: PUSH
34566: LD_INT 4
34568: NEG
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 1
34576: PUSH
34577: LD_INT 3
34579: NEG
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 0
34587: PUSH
34588: LD_INT 3
34590: NEG
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 1
34598: NEG
34599: PUSH
34600: LD_INT 4
34602: NEG
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 1
34610: NEG
34611: PUSH
34612: LD_INT 5
34614: NEG
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 2
34622: PUSH
34623: LD_INT 3
34625: NEG
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 2
34633: NEG
34634: PUSH
34635: LD_INT 5
34637: NEG
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 3
34645: PUSH
34646: LD_INT 0
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 3
34655: PUSH
34656: LD_INT 1
34658: NEG
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 4
34666: PUSH
34667: LD_INT 0
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 4
34676: PUSH
34677: LD_INT 1
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 3
34686: PUSH
34687: LD_INT 1
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 2
34696: PUSH
34697: LD_INT 0
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 2
34706: PUSH
34707: LD_INT 1
34709: NEG
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 2
34717: PUSH
34718: LD_INT 2
34720: NEG
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 4
34728: PUSH
34729: LD_INT 2
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 4
34738: PUSH
34739: LD_INT 4
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 4
34748: PUSH
34749: LD_INT 3
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 5
34758: PUSH
34759: LD_INT 4
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 5
34768: PUSH
34769: LD_INT 5
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 4
34778: PUSH
34779: LD_INT 5
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 3
34788: PUSH
34789: LD_INT 4
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 3
34798: PUSH
34799: LD_INT 3
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 5
34808: PUSH
34809: LD_INT 3
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 3
34818: PUSH
34819: LD_INT 5
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 0
34828: PUSH
34829: LD_INT 3
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 0
34838: PUSH
34839: LD_INT 2
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 1
34848: PUSH
34849: LD_INT 3
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 1
34858: PUSH
34859: LD_INT 4
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 0
34868: PUSH
34869: LD_INT 4
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 1
34878: NEG
34879: PUSH
34880: LD_INT 3
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 1
34889: NEG
34890: PUSH
34891: LD_INT 2
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 2
34900: PUSH
34901: LD_INT 4
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 2
34910: NEG
34911: PUSH
34912: LD_INT 2
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 4
34921: NEG
34922: PUSH
34923: LD_INT 0
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 4
34932: NEG
34933: PUSH
34934: LD_INT 1
34936: NEG
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 3
34944: NEG
34945: PUSH
34946: LD_INT 0
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 3
34955: NEG
34956: PUSH
34957: LD_INT 1
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 4
34966: NEG
34967: PUSH
34968: LD_INT 1
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 5
34977: NEG
34978: PUSH
34979: LD_INT 0
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 5
34988: NEG
34989: PUSH
34990: LD_INT 1
34992: NEG
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 5
35000: NEG
35001: PUSH
35002: LD_INT 2
35004: NEG
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 3
35012: NEG
35013: PUSH
35014: LD_INT 2
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: ST_TO_ADDR
// end ; end ;
35068: GO 35071
35070: POP
// case btype of b_depot , b_warehouse :
35071: LD_VAR 0 1
35075: PUSH
35076: LD_INT 0
35078: DOUBLE
35079: EQUAL
35080: IFTRUE 35090
35082: LD_INT 1
35084: DOUBLE
35085: EQUAL
35086: IFTRUE 35090
35088: GO 35291
35090: POP
// case nation of nation_american :
35091: LD_VAR 0 5
35095: PUSH
35096: LD_INT 1
35098: DOUBLE
35099: EQUAL
35100: IFTRUE 35104
35102: GO 35160
35104: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35105: LD_ADDR_VAR 0 9
35109: PUSH
35110: LD_VAR 0 11
35114: PUSH
35115: LD_VAR 0 12
35119: PUSH
35120: LD_VAR 0 13
35124: PUSH
35125: LD_VAR 0 14
35129: PUSH
35130: LD_VAR 0 15
35134: PUSH
35135: LD_VAR 0 16
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: PUSH
35148: LD_VAR 0 4
35152: PUSH
35153: LD_INT 1
35155: PLUS
35156: ARRAY
35157: ST_TO_ADDR
35158: GO 35289
35160: LD_INT 2
35162: DOUBLE
35163: EQUAL
35164: IFTRUE 35168
35166: GO 35224
35168: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35169: LD_ADDR_VAR 0 9
35173: PUSH
35174: LD_VAR 0 17
35178: PUSH
35179: LD_VAR 0 18
35183: PUSH
35184: LD_VAR 0 19
35188: PUSH
35189: LD_VAR 0 20
35193: PUSH
35194: LD_VAR 0 21
35198: PUSH
35199: LD_VAR 0 22
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: PUSH
35212: LD_VAR 0 4
35216: PUSH
35217: LD_INT 1
35219: PLUS
35220: ARRAY
35221: ST_TO_ADDR
35222: GO 35289
35224: LD_INT 3
35226: DOUBLE
35227: EQUAL
35228: IFTRUE 35232
35230: GO 35288
35232: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35233: LD_ADDR_VAR 0 9
35237: PUSH
35238: LD_VAR 0 23
35242: PUSH
35243: LD_VAR 0 24
35247: PUSH
35248: LD_VAR 0 25
35252: PUSH
35253: LD_VAR 0 26
35257: PUSH
35258: LD_VAR 0 27
35262: PUSH
35263: LD_VAR 0 28
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: PUSH
35276: LD_VAR 0 4
35280: PUSH
35281: LD_INT 1
35283: PLUS
35284: ARRAY
35285: ST_TO_ADDR
35286: GO 35289
35288: POP
35289: GO 35844
35291: LD_INT 2
35293: DOUBLE
35294: EQUAL
35295: IFTRUE 35305
35297: LD_INT 3
35299: DOUBLE
35300: EQUAL
35301: IFTRUE 35305
35303: GO 35361
35305: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35306: LD_ADDR_VAR 0 9
35310: PUSH
35311: LD_VAR 0 29
35315: PUSH
35316: LD_VAR 0 30
35320: PUSH
35321: LD_VAR 0 31
35325: PUSH
35326: LD_VAR 0 32
35330: PUSH
35331: LD_VAR 0 33
35335: PUSH
35336: LD_VAR 0 34
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: PUSH
35349: LD_VAR 0 4
35353: PUSH
35354: LD_INT 1
35356: PLUS
35357: ARRAY
35358: ST_TO_ADDR
35359: GO 35844
35361: LD_INT 16
35363: DOUBLE
35364: EQUAL
35365: IFTRUE 35423
35367: LD_INT 17
35369: DOUBLE
35370: EQUAL
35371: IFTRUE 35423
35373: LD_INT 18
35375: DOUBLE
35376: EQUAL
35377: IFTRUE 35423
35379: LD_INT 19
35381: DOUBLE
35382: EQUAL
35383: IFTRUE 35423
35385: LD_INT 22
35387: DOUBLE
35388: EQUAL
35389: IFTRUE 35423
35391: LD_INT 20
35393: DOUBLE
35394: EQUAL
35395: IFTRUE 35423
35397: LD_INT 21
35399: DOUBLE
35400: EQUAL
35401: IFTRUE 35423
35403: LD_INT 23
35405: DOUBLE
35406: EQUAL
35407: IFTRUE 35423
35409: LD_INT 24
35411: DOUBLE
35412: EQUAL
35413: IFTRUE 35423
35415: LD_INT 25
35417: DOUBLE
35418: EQUAL
35419: IFTRUE 35423
35421: GO 35479
35423: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35424: LD_ADDR_VAR 0 9
35428: PUSH
35429: LD_VAR 0 35
35433: PUSH
35434: LD_VAR 0 36
35438: PUSH
35439: LD_VAR 0 37
35443: PUSH
35444: LD_VAR 0 38
35448: PUSH
35449: LD_VAR 0 39
35453: PUSH
35454: LD_VAR 0 40
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: PUSH
35467: LD_VAR 0 4
35471: PUSH
35472: LD_INT 1
35474: PLUS
35475: ARRAY
35476: ST_TO_ADDR
35477: GO 35844
35479: LD_INT 6
35481: DOUBLE
35482: EQUAL
35483: IFTRUE 35535
35485: LD_INT 7
35487: DOUBLE
35488: EQUAL
35489: IFTRUE 35535
35491: LD_INT 8
35493: DOUBLE
35494: EQUAL
35495: IFTRUE 35535
35497: LD_INT 13
35499: DOUBLE
35500: EQUAL
35501: IFTRUE 35535
35503: LD_INT 12
35505: DOUBLE
35506: EQUAL
35507: IFTRUE 35535
35509: LD_INT 15
35511: DOUBLE
35512: EQUAL
35513: IFTRUE 35535
35515: LD_INT 11
35517: DOUBLE
35518: EQUAL
35519: IFTRUE 35535
35521: LD_INT 14
35523: DOUBLE
35524: EQUAL
35525: IFTRUE 35535
35527: LD_INT 10
35529: DOUBLE
35530: EQUAL
35531: IFTRUE 35535
35533: GO 35591
35535: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35536: LD_ADDR_VAR 0 9
35540: PUSH
35541: LD_VAR 0 41
35545: PUSH
35546: LD_VAR 0 42
35550: PUSH
35551: LD_VAR 0 43
35555: PUSH
35556: LD_VAR 0 44
35560: PUSH
35561: LD_VAR 0 45
35565: PUSH
35566: LD_VAR 0 46
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: PUSH
35579: LD_VAR 0 4
35583: PUSH
35584: LD_INT 1
35586: PLUS
35587: ARRAY
35588: ST_TO_ADDR
35589: GO 35844
35591: LD_INT 36
35593: DOUBLE
35594: EQUAL
35595: IFTRUE 35599
35597: GO 35655
35599: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35600: LD_ADDR_VAR 0 9
35604: PUSH
35605: LD_VAR 0 47
35609: PUSH
35610: LD_VAR 0 48
35614: PUSH
35615: LD_VAR 0 49
35619: PUSH
35620: LD_VAR 0 50
35624: PUSH
35625: LD_VAR 0 51
35629: PUSH
35630: LD_VAR 0 52
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: PUSH
35643: LD_VAR 0 4
35647: PUSH
35648: LD_INT 1
35650: PLUS
35651: ARRAY
35652: ST_TO_ADDR
35653: GO 35844
35655: LD_INT 4
35657: DOUBLE
35658: EQUAL
35659: IFTRUE 35681
35661: LD_INT 5
35663: DOUBLE
35664: EQUAL
35665: IFTRUE 35681
35667: LD_INT 34
35669: DOUBLE
35670: EQUAL
35671: IFTRUE 35681
35673: LD_INT 37
35675: DOUBLE
35676: EQUAL
35677: IFTRUE 35681
35679: GO 35737
35681: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35682: LD_ADDR_VAR 0 9
35686: PUSH
35687: LD_VAR 0 53
35691: PUSH
35692: LD_VAR 0 54
35696: PUSH
35697: LD_VAR 0 55
35701: PUSH
35702: LD_VAR 0 56
35706: PUSH
35707: LD_VAR 0 57
35711: PUSH
35712: LD_VAR 0 58
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: PUSH
35725: LD_VAR 0 4
35729: PUSH
35730: LD_INT 1
35732: PLUS
35733: ARRAY
35734: ST_TO_ADDR
35735: GO 35844
35737: LD_INT 31
35739: DOUBLE
35740: EQUAL
35741: IFTRUE 35787
35743: LD_INT 32
35745: DOUBLE
35746: EQUAL
35747: IFTRUE 35787
35749: LD_INT 33
35751: DOUBLE
35752: EQUAL
35753: IFTRUE 35787
35755: LD_INT 27
35757: DOUBLE
35758: EQUAL
35759: IFTRUE 35787
35761: LD_INT 26
35763: DOUBLE
35764: EQUAL
35765: IFTRUE 35787
35767: LD_INT 28
35769: DOUBLE
35770: EQUAL
35771: IFTRUE 35787
35773: LD_INT 29
35775: DOUBLE
35776: EQUAL
35777: IFTRUE 35787
35779: LD_INT 30
35781: DOUBLE
35782: EQUAL
35783: IFTRUE 35787
35785: GO 35843
35787: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35788: LD_ADDR_VAR 0 9
35792: PUSH
35793: LD_VAR 0 59
35797: PUSH
35798: LD_VAR 0 60
35802: PUSH
35803: LD_VAR 0 61
35807: PUSH
35808: LD_VAR 0 62
35812: PUSH
35813: LD_VAR 0 63
35817: PUSH
35818: LD_VAR 0 64
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: PUSH
35831: LD_VAR 0 4
35835: PUSH
35836: LD_INT 1
35838: PLUS
35839: ARRAY
35840: ST_TO_ADDR
35841: GO 35844
35843: POP
// temp_list2 = [ ] ;
35844: LD_ADDR_VAR 0 10
35848: PUSH
35849: EMPTY
35850: ST_TO_ADDR
// for i in temp_list do
35851: LD_ADDR_VAR 0 8
35855: PUSH
35856: LD_VAR 0 9
35860: PUSH
35861: FOR_IN
35862: IFFALSE 35914
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35864: LD_ADDR_VAR 0 10
35868: PUSH
35869: LD_VAR 0 10
35873: PUSH
35874: LD_VAR 0 8
35878: PUSH
35879: LD_INT 1
35881: ARRAY
35882: PUSH
35883: LD_VAR 0 2
35887: PLUS
35888: PUSH
35889: LD_VAR 0 8
35893: PUSH
35894: LD_INT 2
35896: ARRAY
35897: PUSH
35898: LD_VAR 0 3
35902: PLUS
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: EMPTY
35909: LIST
35910: ADD
35911: ST_TO_ADDR
35912: GO 35861
35914: POP
35915: POP
// result = temp_list2 ;
35916: LD_ADDR_VAR 0 7
35920: PUSH
35921: LD_VAR 0 10
35925: ST_TO_ADDR
// end ;
35926: LD_VAR 0 7
35930: RET
// export function EnemyInRange ( unit , dist ) ; begin
35931: LD_INT 0
35933: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35934: LD_ADDR_VAR 0 3
35938: PUSH
35939: LD_VAR 0 1
35943: PPUSH
35944: CALL_OW 255
35948: PPUSH
35949: LD_VAR 0 1
35953: PPUSH
35954: CALL_OW 250
35958: PPUSH
35959: LD_VAR 0 1
35963: PPUSH
35964: CALL_OW 251
35968: PPUSH
35969: LD_VAR 0 2
35973: PPUSH
35974: CALL 9188 0 4
35978: PUSH
35979: LD_INT 4
35981: ARRAY
35982: ST_TO_ADDR
// end ;
35983: LD_VAR 0 3
35987: RET
// export function PlayerSeeMe ( unit ) ; begin
35988: LD_INT 0
35990: PPUSH
// result := See ( your_side , unit ) ;
35991: LD_ADDR_VAR 0 2
35995: PUSH
35996: LD_OWVAR 2
36000: PPUSH
36001: LD_VAR 0 1
36005: PPUSH
36006: CALL_OW 292
36010: ST_TO_ADDR
// end ;
36011: LD_VAR 0 2
36015: RET
// export function ReverseDir ( unit ) ; begin
36016: LD_INT 0
36018: PPUSH
// if not unit then
36019: LD_VAR 0 1
36023: NOT
36024: IFFALSE 36028
// exit ;
36026: GO 36051
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36028: LD_ADDR_VAR 0 2
36032: PUSH
36033: LD_VAR 0 1
36037: PPUSH
36038: CALL_OW 254
36042: PUSH
36043: LD_INT 3
36045: PLUS
36046: PUSH
36047: LD_INT 6
36049: MOD
36050: ST_TO_ADDR
// end ;
36051: LD_VAR 0 2
36055: RET
// export function ReverseArray ( array ) ; var i ; begin
36056: LD_INT 0
36058: PPUSH
36059: PPUSH
// if not array then
36060: LD_VAR 0 1
36064: NOT
36065: IFFALSE 36069
// exit ;
36067: GO 36124
// result := [ ] ;
36069: LD_ADDR_VAR 0 2
36073: PUSH
36074: EMPTY
36075: ST_TO_ADDR
// for i := array downto 1 do
36076: LD_ADDR_VAR 0 3
36080: PUSH
36081: DOUBLE
36082: LD_VAR 0 1
36086: INC
36087: ST_TO_ADDR
36088: LD_INT 1
36090: PUSH
36091: FOR_DOWNTO
36092: IFFALSE 36122
// result := Join ( result , array [ i ] ) ;
36094: LD_ADDR_VAR 0 2
36098: PUSH
36099: LD_VAR 0 2
36103: PPUSH
36104: LD_VAR 0 1
36108: PUSH
36109: LD_VAR 0 3
36113: ARRAY
36114: PPUSH
36115: CALL 40976 0 2
36119: ST_TO_ADDR
36120: GO 36091
36122: POP
36123: POP
// end ;
36124: LD_VAR 0 2
36128: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36129: LD_INT 0
36131: PPUSH
36132: PPUSH
36133: PPUSH
36134: PPUSH
36135: PPUSH
36136: PPUSH
// if not unit or not hexes then
36137: LD_VAR 0 1
36141: NOT
36142: IFTRUE 36151
36144: PUSH
36145: LD_VAR 0 2
36149: NOT
36150: OR
36151: IFFALSE 36155
// exit ;
36153: GO 36278
// dist := 9999 ;
36155: LD_ADDR_VAR 0 5
36159: PUSH
36160: LD_INT 9999
36162: ST_TO_ADDR
// for i = 1 to hexes do
36163: LD_ADDR_VAR 0 4
36167: PUSH
36168: DOUBLE
36169: LD_INT 1
36171: DEC
36172: ST_TO_ADDR
36173: LD_VAR 0 2
36177: PUSH
36178: FOR_TO
36179: IFFALSE 36266
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36181: LD_ADDR_VAR 0 6
36185: PUSH
36186: LD_VAR 0 1
36190: PPUSH
36191: LD_VAR 0 2
36195: PUSH
36196: LD_VAR 0 4
36200: ARRAY
36201: PUSH
36202: LD_INT 1
36204: ARRAY
36205: PPUSH
36206: LD_VAR 0 2
36210: PUSH
36211: LD_VAR 0 4
36215: ARRAY
36216: PUSH
36217: LD_INT 2
36219: ARRAY
36220: PPUSH
36221: CALL_OW 297
36225: ST_TO_ADDR
// if tdist < dist then
36226: LD_VAR 0 6
36230: PUSH
36231: LD_VAR 0 5
36235: LESS
36236: IFFALSE 36264
// begin hex := hexes [ i ] ;
36238: LD_ADDR_VAR 0 8
36242: PUSH
36243: LD_VAR 0 2
36247: PUSH
36248: LD_VAR 0 4
36252: ARRAY
36253: ST_TO_ADDR
// dist := tdist ;
36254: LD_ADDR_VAR 0 5
36258: PUSH
36259: LD_VAR 0 6
36263: ST_TO_ADDR
// end ; end ;
36264: GO 36178
36266: POP
36267: POP
// result := hex ;
36268: LD_ADDR_VAR 0 3
36272: PUSH
36273: LD_VAR 0 8
36277: ST_TO_ADDR
// end ;
36278: LD_VAR 0 3
36282: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36283: LD_INT 0
36285: PPUSH
36286: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36287: LD_VAR 0 1
36291: NOT
36292: IFTRUE 36331
36294: PUSH
36295: LD_VAR 0 1
36299: PUSH
36300: LD_INT 21
36302: PUSH
36303: LD_INT 2
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 23
36312: PUSH
36313: LD_INT 2
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PPUSH
36324: CALL_OW 69
36328: IN
36329: NOT
36330: OR
36331: IFFALSE 36335
// exit ;
36333: GO 36382
// for i = 1 to 3 do
36335: LD_ADDR_VAR 0 3
36339: PUSH
36340: DOUBLE
36341: LD_INT 1
36343: DEC
36344: ST_TO_ADDR
36345: LD_INT 3
36347: PUSH
36348: FOR_TO
36349: IFFALSE 36380
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36351: LD_VAR 0 1
36355: PPUSH
36356: CALL_OW 250
36360: PPUSH
36361: LD_VAR 0 1
36365: PPUSH
36366: CALL_OW 251
36370: PPUSH
36371: LD_INT 1
36373: PPUSH
36374: CALL_OW 453
36378: GO 36348
36380: POP
36381: POP
// end ;
36382: LD_VAR 0 2
36386: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36387: LD_INT 0
36389: PPUSH
36390: PPUSH
36391: PPUSH
36392: PPUSH
36393: PPUSH
36394: PPUSH
// if not unit or not enemy_unit then
36395: LD_VAR 0 1
36399: NOT
36400: IFTRUE 36409
36402: PUSH
36403: LD_VAR 0 2
36407: NOT
36408: OR
36409: IFFALSE 36413
// exit ;
36411: GO 36894
// if GetLives ( i ) < 250 then
36413: LD_VAR 0 4
36417: PPUSH
36418: CALL_OW 256
36422: PUSH
36423: LD_INT 250
36425: LESS
36426: IFFALSE 36439
// begin ComAutodestruct ( i ) ;
36428: LD_VAR 0 4
36432: PPUSH
36433: CALL 36283 0 1
// exit ;
36437: GO 36894
// end ; x := GetX ( enemy_unit ) ;
36439: LD_ADDR_VAR 0 7
36443: PUSH
36444: LD_VAR 0 2
36448: PPUSH
36449: CALL_OW 250
36453: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36454: LD_ADDR_VAR 0 8
36458: PUSH
36459: LD_VAR 0 2
36463: PPUSH
36464: CALL_OW 251
36468: ST_TO_ADDR
// if not x or not y then
36469: LD_VAR 0 7
36473: NOT
36474: IFTRUE 36483
36476: PUSH
36477: LD_VAR 0 8
36481: NOT
36482: OR
36483: IFFALSE 36487
// exit ;
36485: GO 36894
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36487: LD_ADDR_VAR 0 6
36491: PUSH
36492: LD_VAR 0 7
36496: PPUSH
36497: LD_INT 0
36499: PPUSH
36500: LD_INT 4
36502: PPUSH
36503: CALL_OW 272
36507: PUSH
36508: LD_VAR 0 8
36512: PPUSH
36513: LD_INT 0
36515: PPUSH
36516: LD_INT 4
36518: PPUSH
36519: CALL_OW 273
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_VAR 0 7
36532: PPUSH
36533: LD_INT 1
36535: PPUSH
36536: LD_INT 4
36538: PPUSH
36539: CALL_OW 272
36543: PUSH
36544: LD_VAR 0 8
36548: PPUSH
36549: LD_INT 1
36551: PPUSH
36552: LD_INT 4
36554: PPUSH
36555: CALL_OW 273
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_VAR 0 7
36568: PPUSH
36569: LD_INT 2
36571: PPUSH
36572: LD_INT 4
36574: PPUSH
36575: CALL_OW 272
36579: PUSH
36580: LD_VAR 0 8
36584: PPUSH
36585: LD_INT 2
36587: PPUSH
36588: LD_INT 4
36590: PPUSH
36591: CALL_OW 273
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_VAR 0 7
36604: PPUSH
36605: LD_INT 3
36607: PPUSH
36608: LD_INT 4
36610: PPUSH
36611: CALL_OW 272
36615: PUSH
36616: LD_VAR 0 8
36620: PPUSH
36621: LD_INT 3
36623: PPUSH
36624: LD_INT 4
36626: PPUSH
36627: CALL_OW 273
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_VAR 0 7
36640: PPUSH
36641: LD_INT 4
36643: PPUSH
36644: LD_INT 4
36646: PPUSH
36647: CALL_OW 272
36651: PUSH
36652: LD_VAR 0 8
36656: PPUSH
36657: LD_INT 4
36659: PPUSH
36660: LD_INT 4
36662: PPUSH
36663: CALL_OW 273
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_VAR 0 7
36676: PPUSH
36677: LD_INT 5
36679: PPUSH
36680: LD_INT 4
36682: PPUSH
36683: CALL_OW 272
36687: PUSH
36688: LD_VAR 0 8
36692: PPUSH
36693: LD_INT 5
36695: PPUSH
36696: LD_INT 4
36698: PPUSH
36699: CALL_OW 273
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: ST_TO_ADDR
// for i = tmp downto 1 do
36716: LD_ADDR_VAR 0 4
36720: PUSH
36721: DOUBLE
36722: LD_VAR 0 6
36726: INC
36727: ST_TO_ADDR
36728: LD_INT 1
36730: PUSH
36731: FOR_DOWNTO
36732: IFFALSE 36835
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36734: LD_VAR 0 6
36738: PUSH
36739: LD_VAR 0 4
36743: ARRAY
36744: PUSH
36745: LD_INT 1
36747: ARRAY
36748: PPUSH
36749: LD_VAR 0 6
36753: PUSH
36754: LD_VAR 0 4
36758: ARRAY
36759: PUSH
36760: LD_INT 2
36762: ARRAY
36763: PPUSH
36764: CALL_OW 488
36768: NOT
36769: IFTRUE 36811
36771: PUSH
36772: LD_VAR 0 6
36776: PUSH
36777: LD_VAR 0 4
36781: ARRAY
36782: PUSH
36783: LD_INT 1
36785: ARRAY
36786: PPUSH
36787: LD_VAR 0 6
36791: PUSH
36792: LD_VAR 0 4
36796: ARRAY
36797: PUSH
36798: LD_INT 2
36800: ARRAY
36801: PPUSH
36802: CALL_OW 428
36806: PUSH
36807: LD_INT 0
36809: NONEQUAL
36810: OR
36811: IFFALSE 36833
// tmp := Delete ( tmp , i ) ;
36813: LD_ADDR_VAR 0 6
36817: PUSH
36818: LD_VAR 0 6
36822: PPUSH
36823: LD_VAR 0 4
36827: PPUSH
36828: CALL_OW 3
36832: ST_TO_ADDR
36833: GO 36731
36835: POP
36836: POP
// j := GetClosestHex ( unit , tmp ) ;
36837: LD_ADDR_VAR 0 5
36841: PUSH
36842: LD_VAR 0 1
36846: PPUSH
36847: LD_VAR 0 6
36851: PPUSH
36852: CALL 36129 0 2
36856: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36857: LD_VAR 0 1
36861: PPUSH
36862: LD_VAR 0 5
36866: PUSH
36867: LD_INT 1
36869: ARRAY
36870: PPUSH
36871: LD_VAR 0 5
36875: PUSH
36876: LD_INT 2
36878: ARRAY
36879: PPUSH
36880: CALL_OW 111
// result := j ;
36884: LD_ADDR_VAR 0 3
36888: PUSH
36889: LD_VAR 0 5
36893: ST_TO_ADDR
// end ;
36894: LD_VAR 0 3
36898: RET
// export function PrepareApemanSoldier ( ) ; begin
36899: LD_INT 0
36901: PPUSH
// uc_nation := 0 ;
36902: LD_ADDR_OWVAR 21
36906: PUSH
36907: LD_INT 0
36909: ST_TO_ADDR
// hc_sex := sex_male ;
36910: LD_ADDR_OWVAR 27
36914: PUSH
36915: LD_INT 1
36917: ST_TO_ADDR
// hc_name :=  ;
36918: LD_ADDR_OWVAR 26
36922: PUSH
36923: LD_STRING 
36925: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36926: LD_ADDR_OWVAR 28
36930: PUSH
36931: LD_INT 15
36933: ST_TO_ADDR
// hc_gallery :=  ;
36934: LD_ADDR_OWVAR 33
36938: PUSH
36939: LD_STRING 
36941: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36942: LD_ADDR_OWVAR 31
36946: PUSH
36947: LD_INT 0
36949: PPUSH
36950: LD_INT 3
36952: PPUSH
36953: CALL_OW 12
36957: PUSH
36958: LD_INT 0
36960: PPUSH
36961: LD_INT 3
36963: PPUSH
36964: CALL_OW 12
36968: PUSH
36969: LD_INT 0
36971: PUSH
36972: LD_INT 0
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
36981: LD_ADDR_OWVAR 29
36985: PUSH
36986: LD_INT 10
36988: PUSH
36989: LD_INT 12
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: ST_TO_ADDR
// end ;
36996: LD_VAR 0 1
37000: RET
// export function PrepareApemanEngineer ( ) ; begin
37001: LD_INT 0
37003: PPUSH
// uc_nation := 0 ;
37004: LD_ADDR_OWVAR 21
37008: PUSH
37009: LD_INT 0
37011: ST_TO_ADDR
// hc_sex := sex_male ;
37012: LD_ADDR_OWVAR 27
37016: PUSH
37017: LD_INT 1
37019: ST_TO_ADDR
// hc_name :=  ;
37020: LD_ADDR_OWVAR 26
37024: PUSH
37025: LD_STRING 
37027: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37028: LD_ADDR_OWVAR 28
37032: PUSH
37033: LD_INT 16
37035: ST_TO_ADDR
// hc_gallery :=  ;
37036: LD_ADDR_OWVAR 33
37040: PUSH
37041: LD_STRING 
37043: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37044: LD_ADDR_OWVAR 31
37048: PUSH
37049: LD_INT 0
37051: PPUSH
37052: LD_INT 3
37054: PPUSH
37055: CALL_OW 12
37059: PUSH
37060: LD_INT 0
37062: PPUSH
37063: LD_INT 3
37065: PPUSH
37066: CALL_OW 12
37070: PUSH
37071: LD_INT 0
37073: PUSH
37074: LD_INT 0
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37083: LD_ADDR_OWVAR 29
37087: PUSH
37088: LD_INT 10
37090: PUSH
37091: LD_INT 12
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: ST_TO_ADDR
// end ;
37098: LD_VAR 0 1
37102: RET
// export function PrepareApeman ( agressivity ) ; begin
37103: LD_INT 0
37105: PPUSH
// uc_side := 0 ;
37106: LD_ADDR_OWVAR 20
37110: PUSH
37111: LD_INT 0
37113: ST_TO_ADDR
// uc_nation := 0 ;
37114: LD_ADDR_OWVAR 21
37118: PUSH
37119: LD_INT 0
37121: ST_TO_ADDR
// hc_sex := sex_male ;
37122: LD_ADDR_OWVAR 27
37126: PUSH
37127: LD_INT 1
37129: ST_TO_ADDR
// hc_class := class_apeman ;
37130: LD_ADDR_OWVAR 28
37134: PUSH
37135: LD_INT 12
37137: ST_TO_ADDR
// hc_gallery :=  ;
37138: LD_ADDR_OWVAR 33
37142: PUSH
37143: LD_STRING 
37145: ST_TO_ADDR
// hc_name :=  ;
37146: LD_ADDR_OWVAR 26
37150: PUSH
37151: LD_STRING 
37153: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37154: LD_ADDR_OWVAR 29
37158: PUSH
37159: LD_INT 10
37161: PUSH
37162: LD_INT 12
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: ST_TO_ADDR
// if agressivity = 0 then
37169: LD_VAR 0 1
37173: PUSH
37174: LD_INT 0
37176: EQUAL
37177: IFFALSE 37189
// hc_agressivity := 0 else
37179: LD_ADDR_OWVAR 35
37183: PUSH
37184: LD_INT 0
37186: ST_TO_ADDR
37187: GO 37210
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37189: LD_ADDR_OWVAR 35
37193: PUSH
37194: LD_VAR 0 1
37198: NEG
37199: PPUSH
37200: LD_VAR 0 1
37204: PPUSH
37205: CALL_OW 12
37209: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37210: LD_ADDR_OWVAR 31
37214: PUSH
37215: LD_INT 0
37217: PPUSH
37218: LD_INT 3
37220: PPUSH
37221: CALL_OW 12
37225: PUSH
37226: LD_INT 0
37228: PPUSH
37229: LD_INT 3
37231: PPUSH
37232: CALL_OW 12
37236: PUSH
37237: LD_INT 0
37239: PUSH
37240: LD_INT 0
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: ST_TO_ADDR
// end ;
37249: LD_VAR 0 2
37253: RET
// export function PrepareTiger ( agressivity ) ; begin
37254: LD_INT 0
37256: PPUSH
// uc_side := 0 ;
37257: LD_ADDR_OWVAR 20
37261: PUSH
37262: LD_INT 0
37264: ST_TO_ADDR
// uc_nation := 0 ;
37265: LD_ADDR_OWVAR 21
37269: PUSH
37270: LD_INT 0
37272: ST_TO_ADDR
// InitHc ;
37273: CALL_OW 19
// hc_class := class_tiger ;
37277: LD_ADDR_OWVAR 28
37281: PUSH
37282: LD_INT 14
37284: ST_TO_ADDR
// hc_gallery :=  ;
37285: LD_ADDR_OWVAR 33
37289: PUSH
37290: LD_STRING 
37292: ST_TO_ADDR
// hc_name :=  ;
37293: LD_ADDR_OWVAR 26
37297: PUSH
37298: LD_STRING 
37300: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37301: LD_ADDR_OWVAR 35
37305: PUSH
37306: LD_VAR 0 1
37310: NEG
37311: PPUSH
37312: LD_VAR 0 1
37316: PPUSH
37317: CALL_OW 12
37321: ST_TO_ADDR
// end ;
37322: LD_VAR 0 2
37326: RET
// export function PrepareEnchidna ( ) ; begin
37327: LD_INT 0
37329: PPUSH
// uc_side := 0 ;
37330: LD_ADDR_OWVAR 20
37334: PUSH
37335: LD_INT 0
37337: ST_TO_ADDR
// uc_nation := 0 ;
37338: LD_ADDR_OWVAR 21
37342: PUSH
37343: LD_INT 0
37345: ST_TO_ADDR
// InitHc ;
37346: CALL_OW 19
// hc_class := class_baggie ;
37350: LD_ADDR_OWVAR 28
37354: PUSH
37355: LD_INT 13
37357: ST_TO_ADDR
// hc_gallery :=  ;
37358: LD_ADDR_OWVAR 33
37362: PUSH
37363: LD_STRING 
37365: ST_TO_ADDR
// hc_name :=  ;
37366: LD_ADDR_OWVAR 26
37370: PUSH
37371: LD_STRING 
37373: ST_TO_ADDR
// end ;
37374: LD_VAR 0 1
37378: RET
// export function PrepareFrog ( ) ; begin
37379: LD_INT 0
37381: PPUSH
// uc_side := 0 ;
37382: LD_ADDR_OWVAR 20
37386: PUSH
37387: LD_INT 0
37389: ST_TO_ADDR
// uc_nation := 0 ;
37390: LD_ADDR_OWVAR 21
37394: PUSH
37395: LD_INT 0
37397: ST_TO_ADDR
// InitHc ;
37398: CALL_OW 19
// hc_class := class_frog ;
37402: LD_ADDR_OWVAR 28
37406: PUSH
37407: LD_INT 19
37409: ST_TO_ADDR
// hc_gallery :=  ;
37410: LD_ADDR_OWVAR 33
37414: PUSH
37415: LD_STRING 
37417: ST_TO_ADDR
// hc_name :=  ;
37418: LD_ADDR_OWVAR 26
37422: PUSH
37423: LD_STRING 
37425: ST_TO_ADDR
// end ;
37426: LD_VAR 0 1
37430: RET
// export function PrepareFish ( ) ; begin
37431: LD_INT 0
37433: PPUSH
// uc_side := 0 ;
37434: LD_ADDR_OWVAR 20
37438: PUSH
37439: LD_INT 0
37441: ST_TO_ADDR
// uc_nation := 0 ;
37442: LD_ADDR_OWVAR 21
37446: PUSH
37447: LD_INT 0
37449: ST_TO_ADDR
// InitHc ;
37450: CALL_OW 19
// hc_class := class_fish ;
37454: LD_ADDR_OWVAR 28
37458: PUSH
37459: LD_INT 20
37461: ST_TO_ADDR
// hc_gallery :=  ;
37462: LD_ADDR_OWVAR 33
37466: PUSH
37467: LD_STRING 
37469: ST_TO_ADDR
// hc_name :=  ;
37470: LD_ADDR_OWVAR 26
37474: PUSH
37475: LD_STRING 
37477: ST_TO_ADDR
// end ;
37478: LD_VAR 0 1
37482: RET
// export function PrepareBird ( ) ; begin
37483: LD_INT 0
37485: PPUSH
// uc_side := 0 ;
37486: LD_ADDR_OWVAR 20
37490: PUSH
37491: LD_INT 0
37493: ST_TO_ADDR
// uc_nation := 0 ;
37494: LD_ADDR_OWVAR 21
37498: PUSH
37499: LD_INT 0
37501: ST_TO_ADDR
// InitHc ;
37502: CALL_OW 19
// hc_class := class_phororhacos ;
37506: LD_ADDR_OWVAR 28
37510: PUSH
37511: LD_INT 18
37513: ST_TO_ADDR
// hc_gallery :=  ;
37514: LD_ADDR_OWVAR 33
37518: PUSH
37519: LD_STRING 
37521: ST_TO_ADDR
// hc_name :=  ;
37522: LD_ADDR_OWVAR 26
37526: PUSH
37527: LD_STRING 
37529: ST_TO_ADDR
// end ;
37530: LD_VAR 0 1
37534: RET
// export function PrepareHorse ( ) ; begin
37535: LD_INT 0
37537: PPUSH
// uc_side := 0 ;
37538: LD_ADDR_OWVAR 20
37542: PUSH
37543: LD_INT 0
37545: ST_TO_ADDR
// uc_nation := 0 ;
37546: LD_ADDR_OWVAR 21
37550: PUSH
37551: LD_INT 0
37553: ST_TO_ADDR
// InitHc ;
37554: CALL_OW 19
// hc_class := class_horse ;
37558: LD_ADDR_OWVAR 28
37562: PUSH
37563: LD_INT 21
37565: ST_TO_ADDR
// hc_gallery :=  ;
37566: LD_ADDR_OWVAR 33
37570: PUSH
37571: LD_STRING 
37573: ST_TO_ADDR
// hc_name :=  ;
37574: LD_ADDR_OWVAR 26
37578: PUSH
37579: LD_STRING 
37581: ST_TO_ADDR
// end ;
37582: LD_VAR 0 1
37586: RET
// export function PrepareMastodont ( ) ; begin
37587: LD_INT 0
37589: PPUSH
// uc_side := 0 ;
37590: LD_ADDR_OWVAR 20
37594: PUSH
37595: LD_INT 0
37597: ST_TO_ADDR
// uc_nation := 0 ;
37598: LD_ADDR_OWVAR 21
37602: PUSH
37603: LD_INT 0
37605: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37606: LD_ADDR_OWVAR 37
37610: PUSH
37611: LD_INT 31
37613: ST_TO_ADDR
// vc_control := control_rider ;
37614: LD_ADDR_OWVAR 38
37618: PUSH
37619: LD_INT 4
37621: ST_TO_ADDR
// end ;
37622: LD_VAR 0 1
37626: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37627: LD_INT 0
37629: PPUSH
37630: PPUSH
37631: PPUSH
// uc_side = 0 ;
37632: LD_ADDR_OWVAR 20
37636: PUSH
37637: LD_INT 0
37639: ST_TO_ADDR
// uc_nation = 0 ;
37640: LD_ADDR_OWVAR 21
37644: PUSH
37645: LD_INT 0
37647: ST_TO_ADDR
// InitHc_All ( ) ;
37648: CALL_OW 584
// InitVc ;
37652: CALL_OW 20
// if mastodonts then
37656: LD_VAR 0 6
37660: IFFALSE 37727
// for i = 1 to mastodonts do
37662: LD_ADDR_VAR 0 11
37666: PUSH
37667: DOUBLE
37668: LD_INT 1
37670: DEC
37671: ST_TO_ADDR
37672: LD_VAR 0 6
37676: PUSH
37677: FOR_TO
37678: IFFALSE 37725
// begin vc_chassis := 31 ;
37680: LD_ADDR_OWVAR 37
37684: PUSH
37685: LD_INT 31
37687: ST_TO_ADDR
// vc_control := control_rider ;
37688: LD_ADDR_OWVAR 38
37692: PUSH
37693: LD_INT 4
37695: ST_TO_ADDR
// animal := CreateVehicle ;
37696: LD_ADDR_VAR 0 12
37700: PUSH
37701: CALL_OW 45
37705: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37706: LD_VAR 0 12
37710: PPUSH
37711: LD_VAR 0 8
37715: PPUSH
37716: LD_INT 0
37718: PPUSH
37719: CALL 39869 0 3
// end ;
37723: GO 37677
37725: POP
37726: POP
// if horses then
37727: LD_VAR 0 5
37731: IFFALSE 37798
// for i = 1 to horses do
37733: LD_ADDR_VAR 0 11
37737: PUSH
37738: DOUBLE
37739: LD_INT 1
37741: DEC
37742: ST_TO_ADDR
37743: LD_VAR 0 5
37747: PUSH
37748: FOR_TO
37749: IFFALSE 37796
// begin hc_class := 21 ;
37751: LD_ADDR_OWVAR 28
37755: PUSH
37756: LD_INT 21
37758: ST_TO_ADDR
// hc_gallery :=  ;
37759: LD_ADDR_OWVAR 33
37763: PUSH
37764: LD_STRING 
37766: ST_TO_ADDR
// animal := CreateHuman ;
37767: LD_ADDR_VAR 0 12
37771: PUSH
37772: CALL_OW 44
37776: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37777: LD_VAR 0 12
37781: PPUSH
37782: LD_VAR 0 8
37786: PPUSH
37787: LD_INT 0
37789: PPUSH
37790: CALL 39869 0 3
// end ;
37794: GO 37748
37796: POP
37797: POP
// if birds then
37798: LD_VAR 0 1
37802: IFFALSE 37869
// for i = 1 to birds do
37804: LD_ADDR_VAR 0 11
37808: PUSH
37809: DOUBLE
37810: LD_INT 1
37812: DEC
37813: ST_TO_ADDR
37814: LD_VAR 0 1
37818: PUSH
37819: FOR_TO
37820: IFFALSE 37867
// begin hc_class := 18 ;
37822: LD_ADDR_OWVAR 28
37826: PUSH
37827: LD_INT 18
37829: ST_TO_ADDR
// hc_gallery =  ;
37830: LD_ADDR_OWVAR 33
37834: PUSH
37835: LD_STRING 
37837: ST_TO_ADDR
// animal := CreateHuman ;
37838: LD_ADDR_VAR 0 12
37842: PUSH
37843: CALL_OW 44
37847: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37848: LD_VAR 0 12
37852: PPUSH
37853: LD_VAR 0 8
37857: PPUSH
37858: LD_INT 0
37860: PPUSH
37861: CALL 39869 0 3
// end ;
37865: GO 37819
37867: POP
37868: POP
// if tigers then
37869: LD_VAR 0 2
37873: IFFALSE 37957
// for i = 1 to tigers do
37875: LD_ADDR_VAR 0 11
37879: PUSH
37880: DOUBLE
37881: LD_INT 1
37883: DEC
37884: ST_TO_ADDR
37885: LD_VAR 0 2
37889: PUSH
37890: FOR_TO
37891: IFFALSE 37955
// begin hc_class = class_tiger ;
37893: LD_ADDR_OWVAR 28
37897: PUSH
37898: LD_INT 14
37900: ST_TO_ADDR
// hc_gallery =  ;
37901: LD_ADDR_OWVAR 33
37905: PUSH
37906: LD_STRING 
37908: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37909: LD_ADDR_OWVAR 35
37913: PUSH
37914: LD_INT 7
37916: NEG
37917: PPUSH
37918: LD_INT 7
37920: PPUSH
37921: CALL_OW 12
37925: ST_TO_ADDR
// animal := CreateHuman ;
37926: LD_ADDR_VAR 0 12
37930: PUSH
37931: CALL_OW 44
37935: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37936: LD_VAR 0 12
37940: PPUSH
37941: LD_VAR 0 8
37945: PPUSH
37946: LD_INT 0
37948: PPUSH
37949: CALL 39869 0 3
// end ;
37953: GO 37890
37955: POP
37956: POP
// if apemans then
37957: LD_VAR 0 3
37961: IFFALSE 38084
// for i = 1 to apemans do
37963: LD_ADDR_VAR 0 11
37967: PUSH
37968: DOUBLE
37969: LD_INT 1
37971: DEC
37972: ST_TO_ADDR
37973: LD_VAR 0 3
37977: PUSH
37978: FOR_TO
37979: IFFALSE 38082
// begin hc_class = class_apeman ;
37981: LD_ADDR_OWVAR 28
37985: PUSH
37986: LD_INT 12
37988: ST_TO_ADDR
// hc_gallery =  ;
37989: LD_ADDR_OWVAR 33
37993: PUSH
37994: LD_STRING 
37996: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37997: LD_ADDR_OWVAR 35
38001: PUSH
38002: LD_INT 2
38004: NEG
38005: PPUSH
38006: LD_INT 2
38008: PPUSH
38009: CALL_OW 12
38013: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38014: LD_ADDR_OWVAR 31
38018: PUSH
38019: LD_INT 1
38021: PPUSH
38022: LD_INT 3
38024: PPUSH
38025: CALL_OW 12
38029: PUSH
38030: LD_INT 1
38032: PPUSH
38033: LD_INT 3
38035: PPUSH
38036: CALL_OW 12
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: LD_INT 0
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: ST_TO_ADDR
// animal := CreateHuman ;
38053: LD_ADDR_VAR 0 12
38057: PUSH
38058: CALL_OW 44
38062: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38063: LD_VAR 0 12
38067: PPUSH
38068: LD_VAR 0 8
38072: PPUSH
38073: LD_INT 0
38075: PPUSH
38076: CALL 39869 0 3
// end ;
38080: GO 37978
38082: POP
38083: POP
// if enchidnas then
38084: LD_VAR 0 4
38088: IFFALSE 38155
// for i = 1 to enchidnas do
38090: LD_ADDR_VAR 0 11
38094: PUSH
38095: DOUBLE
38096: LD_INT 1
38098: DEC
38099: ST_TO_ADDR
38100: LD_VAR 0 4
38104: PUSH
38105: FOR_TO
38106: IFFALSE 38153
// begin hc_class = 13 ;
38108: LD_ADDR_OWVAR 28
38112: PUSH
38113: LD_INT 13
38115: ST_TO_ADDR
// hc_gallery =  ;
38116: LD_ADDR_OWVAR 33
38120: PUSH
38121: LD_STRING 
38123: ST_TO_ADDR
// animal := CreateHuman ;
38124: LD_ADDR_VAR 0 12
38128: PUSH
38129: CALL_OW 44
38133: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38134: LD_VAR 0 12
38138: PPUSH
38139: LD_VAR 0 8
38143: PPUSH
38144: LD_INT 0
38146: PPUSH
38147: CALL 39869 0 3
// end ;
38151: GO 38105
38153: POP
38154: POP
// if fishes then
38155: LD_VAR 0 7
38159: IFFALSE 38226
// for i = 1 to fishes do
38161: LD_ADDR_VAR 0 11
38165: PUSH
38166: DOUBLE
38167: LD_INT 1
38169: DEC
38170: ST_TO_ADDR
38171: LD_VAR 0 7
38175: PUSH
38176: FOR_TO
38177: IFFALSE 38224
// begin hc_class = 20 ;
38179: LD_ADDR_OWVAR 28
38183: PUSH
38184: LD_INT 20
38186: ST_TO_ADDR
// hc_gallery =  ;
38187: LD_ADDR_OWVAR 33
38191: PUSH
38192: LD_STRING 
38194: ST_TO_ADDR
// animal := CreateHuman ;
38195: LD_ADDR_VAR 0 12
38199: PUSH
38200: CALL_OW 44
38204: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38205: LD_VAR 0 12
38209: PPUSH
38210: LD_VAR 0 9
38214: PPUSH
38215: LD_INT 0
38217: PPUSH
38218: CALL 39869 0 3
// end ;
38222: GO 38176
38224: POP
38225: POP
// end ;
38226: LD_VAR 0 10
38230: RET
// export function WantHeal ( sci , unit ) ; begin
38231: LD_INT 0
38233: PPUSH
// if GetTaskList ( sci ) > 0 then
38234: LD_VAR 0 1
38238: PPUSH
38239: CALL_OW 437
38243: PUSH
38244: LD_INT 0
38246: GREATER
38247: IFFALSE 38319
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38249: LD_VAR 0 1
38253: PPUSH
38254: CALL_OW 437
38258: PUSH
38259: LD_INT 1
38261: ARRAY
38262: PUSH
38263: LD_INT 1
38265: ARRAY
38266: PUSH
38267: LD_STRING l
38269: EQUAL
38270: IFFALSE 38297
38272: PUSH
38273: LD_VAR 0 1
38277: PPUSH
38278: CALL_OW 437
38282: PUSH
38283: LD_INT 1
38285: ARRAY
38286: PUSH
38287: LD_INT 4
38289: ARRAY
38290: PUSH
38291: LD_VAR 0 2
38295: EQUAL
38296: AND
38297: IFFALSE 38309
// result := true else
38299: LD_ADDR_VAR 0 3
38303: PUSH
38304: LD_INT 1
38306: ST_TO_ADDR
38307: GO 38317
// result := false ;
38309: LD_ADDR_VAR 0 3
38313: PUSH
38314: LD_INT 0
38316: ST_TO_ADDR
// end else
38317: GO 38327
// result := false ;
38319: LD_ADDR_VAR 0 3
38323: PUSH
38324: LD_INT 0
38326: ST_TO_ADDR
// end ;
38327: LD_VAR 0 3
38331: RET
// export function HealTarget ( sci ) ; begin
38332: LD_INT 0
38334: PPUSH
// if not sci then
38335: LD_VAR 0 1
38339: NOT
38340: IFFALSE 38344
// exit ;
38342: GO 38409
// result := 0 ;
38344: LD_ADDR_VAR 0 2
38348: PUSH
38349: LD_INT 0
38351: ST_TO_ADDR
// if GetTaskList ( sci ) then
38352: LD_VAR 0 1
38356: PPUSH
38357: CALL_OW 437
38361: IFFALSE 38409
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38363: LD_VAR 0 1
38367: PPUSH
38368: CALL_OW 437
38372: PUSH
38373: LD_INT 1
38375: ARRAY
38376: PUSH
38377: LD_INT 1
38379: ARRAY
38380: PUSH
38381: LD_STRING l
38383: EQUAL
38384: IFFALSE 38409
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38386: LD_ADDR_VAR 0 2
38390: PUSH
38391: LD_VAR 0 1
38395: PPUSH
38396: CALL_OW 437
38400: PUSH
38401: LD_INT 1
38403: ARRAY
38404: PUSH
38405: LD_INT 4
38407: ARRAY
38408: ST_TO_ADDR
// end ;
38409: LD_VAR 0 2
38413: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38414: LD_INT 0
38416: PPUSH
38417: PPUSH
38418: PPUSH
38419: PPUSH
// if not base_units then
38420: LD_VAR 0 1
38424: NOT
38425: IFFALSE 38429
// exit ;
38427: GO 38516
// result := false ;
38429: LD_ADDR_VAR 0 2
38433: PUSH
38434: LD_INT 0
38436: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38437: LD_ADDR_VAR 0 5
38441: PUSH
38442: LD_VAR 0 1
38446: PPUSH
38447: LD_INT 21
38449: PUSH
38450: LD_INT 3
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PPUSH
38457: CALL_OW 72
38461: ST_TO_ADDR
// if not tmp then
38462: LD_VAR 0 5
38466: NOT
38467: IFFALSE 38471
// exit ;
38469: GO 38516
// for i in tmp do
38471: LD_ADDR_VAR 0 3
38475: PUSH
38476: LD_VAR 0 5
38480: PUSH
38481: FOR_IN
38482: IFFALSE 38514
// begin result := EnemyInRange ( i , 22 ) ;
38484: LD_ADDR_VAR 0 2
38488: PUSH
38489: LD_VAR 0 3
38493: PPUSH
38494: LD_INT 22
38496: PPUSH
38497: CALL 35931 0 2
38501: ST_TO_ADDR
// if result then
38502: LD_VAR 0 2
38506: IFFALSE 38512
// exit ;
38508: POP
38509: POP
38510: GO 38516
// end ;
38512: GO 38481
38514: POP
38515: POP
// end ;
38516: LD_VAR 0 2
38520: RET
// export function FilterByTag ( units , tag ) ; begin
38521: LD_INT 0
38523: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38524: LD_ADDR_VAR 0 3
38528: PUSH
38529: LD_VAR 0 1
38533: PPUSH
38534: LD_INT 120
38536: PUSH
38537: LD_VAR 0 2
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PPUSH
38546: CALL_OW 72
38550: ST_TO_ADDR
// end ;
38551: LD_VAR 0 3
38555: RET
// export function IsDriver ( un ) ; begin
38556: LD_INT 0
38558: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38559: LD_ADDR_VAR 0 2
38563: PUSH
38564: LD_VAR 0 1
38568: PUSH
38569: LD_INT 55
38571: PUSH
38572: EMPTY
38573: LIST
38574: PPUSH
38575: CALL_OW 69
38579: IN
38580: ST_TO_ADDR
// end ;
38581: LD_VAR 0 2
38585: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38586: LD_INT 0
38588: PPUSH
38589: PPUSH
// list := [ ] ;
38590: LD_ADDR_VAR 0 5
38594: PUSH
38595: EMPTY
38596: ST_TO_ADDR
// case d of 0 :
38597: LD_VAR 0 3
38601: PUSH
38602: LD_INT 0
38604: DOUBLE
38605: EQUAL
38606: IFTRUE 38610
38608: GO 38743
38610: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38611: LD_ADDR_VAR 0 5
38615: PUSH
38616: LD_VAR 0 1
38620: PUSH
38621: LD_INT 4
38623: MINUS
38624: PUSH
38625: LD_VAR 0 2
38629: PUSH
38630: LD_INT 4
38632: MINUS
38633: PUSH
38634: LD_INT 2
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: LIST
38641: PUSH
38642: LD_VAR 0 1
38646: PUSH
38647: LD_INT 3
38649: MINUS
38650: PUSH
38651: LD_VAR 0 2
38655: PUSH
38656: LD_INT 1
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: LIST
38663: PUSH
38664: LD_VAR 0 1
38668: PUSH
38669: LD_INT 4
38671: PLUS
38672: PUSH
38673: LD_VAR 0 2
38677: PUSH
38678: LD_INT 4
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: LIST
38685: PUSH
38686: LD_VAR 0 1
38690: PUSH
38691: LD_INT 3
38693: PLUS
38694: PUSH
38695: LD_VAR 0 2
38699: PUSH
38700: LD_INT 3
38702: PLUS
38703: PUSH
38704: LD_INT 5
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: LIST
38711: PUSH
38712: LD_VAR 0 1
38716: PUSH
38717: LD_VAR 0 2
38721: PUSH
38722: LD_INT 4
38724: PLUS
38725: PUSH
38726: LD_INT 0
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: LIST
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: ST_TO_ADDR
// end ; 1 :
38741: GO 39441
38743: LD_INT 1
38745: DOUBLE
38746: EQUAL
38747: IFTRUE 38751
38749: GO 38884
38751: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38752: LD_ADDR_VAR 0 5
38756: PUSH
38757: LD_VAR 0 1
38761: PUSH
38762: LD_VAR 0 2
38766: PUSH
38767: LD_INT 4
38769: MINUS
38770: PUSH
38771: LD_INT 3
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: LIST
38778: PUSH
38779: LD_VAR 0 1
38783: PUSH
38784: LD_INT 3
38786: MINUS
38787: PUSH
38788: LD_VAR 0 2
38792: PUSH
38793: LD_INT 3
38795: MINUS
38796: PUSH
38797: LD_INT 2
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: LIST
38804: PUSH
38805: LD_VAR 0 1
38809: PUSH
38810: LD_INT 4
38812: MINUS
38813: PUSH
38814: LD_VAR 0 2
38818: PUSH
38819: LD_INT 1
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: LIST
38826: PUSH
38827: LD_VAR 0 1
38831: PUSH
38832: LD_VAR 0 2
38836: PUSH
38837: LD_INT 3
38839: PLUS
38840: PUSH
38841: LD_INT 0
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: LIST
38848: PUSH
38849: LD_VAR 0 1
38853: PUSH
38854: LD_INT 4
38856: PLUS
38857: PUSH
38858: LD_VAR 0 2
38862: PUSH
38863: LD_INT 4
38865: PLUS
38866: PUSH
38867: LD_INT 5
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: LIST
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: ST_TO_ADDR
// end ; 2 :
38882: GO 39441
38884: LD_INT 2
38886: DOUBLE
38887: EQUAL
38888: IFTRUE 38892
38890: GO 39021
38892: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38893: LD_ADDR_VAR 0 5
38897: PUSH
38898: LD_VAR 0 1
38902: PUSH
38903: LD_VAR 0 2
38907: PUSH
38908: LD_INT 3
38910: MINUS
38911: PUSH
38912: LD_INT 3
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: LIST
38919: PUSH
38920: LD_VAR 0 1
38924: PUSH
38925: LD_INT 4
38927: PLUS
38928: PUSH
38929: LD_VAR 0 2
38933: PUSH
38934: LD_INT 4
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: LIST
38941: PUSH
38942: LD_VAR 0 1
38946: PUSH
38947: LD_VAR 0 2
38951: PUSH
38952: LD_INT 4
38954: PLUS
38955: PUSH
38956: LD_INT 0
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: LIST
38963: PUSH
38964: LD_VAR 0 1
38968: PUSH
38969: LD_INT 3
38971: MINUS
38972: PUSH
38973: LD_VAR 0 2
38977: PUSH
38978: LD_INT 1
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: LIST
38985: PUSH
38986: LD_VAR 0 1
38990: PUSH
38991: LD_INT 4
38993: MINUS
38994: PUSH
38995: LD_VAR 0 2
38999: PUSH
39000: LD_INT 4
39002: MINUS
39003: PUSH
39004: LD_INT 2
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: LIST
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: ST_TO_ADDR
// end ; 3 :
39019: GO 39441
39021: LD_INT 3
39023: DOUBLE
39024: EQUAL
39025: IFTRUE 39029
39027: GO 39162
39029: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39030: LD_ADDR_VAR 0 5
39034: PUSH
39035: LD_VAR 0 1
39039: PUSH
39040: LD_INT 3
39042: PLUS
39043: PUSH
39044: LD_VAR 0 2
39048: PUSH
39049: LD_INT 4
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: LIST
39056: PUSH
39057: LD_VAR 0 1
39061: PUSH
39062: LD_INT 4
39064: PLUS
39065: PUSH
39066: LD_VAR 0 2
39070: PUSH
39071: LD_INT 4
39073: PLUS
39074: PUSH
39075: LD_INT 5
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: LIST
39082: PUSH
39083: LD_VAR 0 1
39087: PUSH
39088: LD_INT 4
39090: MINUS
39091: PUSH
39092: LD_VAR 0 2
39096: PUSH
39097: LD_INT 1
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: LIST
39104: PUSH
39105: LD_VAR 0 1
39109: PUSH
39110: LD_VAR 0 2
39114: PUSH
39115: LD_INT 4
39117: MINUS
39118: PUSH
39119: LD_INT 3
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: LIST
39126: PUSH
39127: LD_VAR 0 1
39131: PUSH
39132: LD_INT 3
39134: MINUS
39135: PUSH
39136: LD_VAR 0 2
39140: PUSH
39141: LD_INT 3
39143: MINUS
39144: PUSH
39145: LD_INT 2
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: LIST
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: ST_TO_ADDR
// end ; 4 :
39160: GO 39441
39162: LD_INT 4
39164: DOUBLE
39165: EQUAL
39166: IFTRUE 39170
39168: GO 39303
39170: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39171: LD_ADDR_VAR 0 5
39175: PUSH
39176: LD_VAR 0 1
39180: PUSH
39181: LD_VAR 0 2
39185: PUSH
39186: LD_INT 4
39188: PLUS
39189: PUSH
39190: LD_INT 0
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: LIST
39197: PUSH
39198: LD_VAR 0 1
39202: PUSH
39203: LD_INT 3
39205: PLUS
39206: PUSH
39207: LD_VAR 0 2
39211: PUSH
39212: LD_INT 3
39214: PLUS
39215: PUSH
39216: LD_INT 5
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: LIST
39223: PUSH
39224: LD_VAR 0 1
39228: PUSH
39229: LD_INT 4
39231: PLUS
39232: PUSH
39233: LD_VAR 0 2
39237: PUSH
39238: LD_INT 4
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: LIST
39245: PUSH
39246: LD_VAR 0 1
39250: PUSH
39251: LD_VAR 0 2
39255: PUSH
39256: LD_INT 3
39258: MINUS
39259: PUSH
39260: LD_INT 3
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: LIST
39267: PUSH
39268: LD_VAR 0 1
39272: PUSH
39273: LD_INT 4
39275: MINUS
39276: PUSH
39277: LD_VAR 0 2
39281: PUSH
39282: LD_INT 4
39284: MINUS
39285: PUSH
39286: LD_INT 2
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: LIST
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: ST_TO_ADDR
// end ; 5 :
39301: GO 39441
39303: LD_INT 5
39305: DOUBLE
39306: EQUAL
39307: IFTRUE 39311
39309: GO 39440
39311: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39312: LD_ADDR_VAR 0 5
39316: PUSH
39317: LD_VAR 0 1
39321: PUSH
39322: LD_INT 4
39324: MINUS
39325: PUSH
39326: LD_VAR 0 2
39330: PUSH
39331: LD_INT 1
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: LIST
39338: PUSH
39339: LD_VAR 0 1
39343: PUSH
39344: LD_VAR 0 2
39348: PUSH
39349: LD_INT 4
39351: MINUS
39352: PUSH
39353: LD_INT 3
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: LIST
39360: PUSH
39361: LD_VAR 0 1
39365: PUSH
39366: LD_INT 4
39368: PLUS
39369: PUSH
39370: LD_VAR 0 2
39374: PUSH
39375: LD_INT 4
39377: PLUS
39378: PUSH
39379: LD_INT 5
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: LIST
39386: PUSH
39387: LD_VAR 0 1
39391: PUSH
39392: LD_INT 3
39394: PLUS
39395: PUSH
39396: LD_VAR 0 2
39400: PUSH
39401: LD_INT 4
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: LIST
39408: PUSH
39409: LD_VAR 0 1
39413: PUSH
39414: LD_VAR 0 2
39418: PUSH
39419: LD_INT 3
39421: PLUS
39422: PUSH
39423: LD_INT 0
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: LIST
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: ST_TO_ADDR
// end ; end ;
39438: GO 39441
39440: POP
// result := list ;
39441: LD_ADDR_VAR 0 4
39445: PUSH
39446: LD_VAR 0 5
39450: ST_TO_ADDR
// end ;
39451: LD_VAR 0 4
39455: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39456: LD_INT 0
39458: PPUSH
39459: PPUSH
39460: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39461: LD_VAR 0 1
39465: NOT
39466: IFTRUE 39494
39468: PUSH
39469: LD_VAR 0 2
39473: PUSH
39474: LD_INT 1
39476: PUSH
39477: LD_INT 2
39479: PUSH
39480: LD_INT 3
39482: PUSH
39483: LD_INT 4
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: IN
39492: NOT
39493: OR
39494: IFFALSE 39498
// exit ;
39496: GO 39581
// tmp := [ ] ;
39498: LD_ADDR_VAR 0 5
39502: PUSH
39503: EMPTY
39504: ST_TO_ADDR
// for i in units do
39505: LD_ADDR_VAR 0 4
39509: PUSH
39510: LD_VAR 0 1
39514: PUSH
39515: FOR_IN
39516: IFFALSE 39550
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39518: LD_ADDR_VAR 0 5
39522: PUSH
39523: LD_VAR 0 5
39527: PPUSH
39528: LD_VAR 0 4
39532: PPUSH
39533: LD_VAR 0 2
39537: PPUSH
39538: CALL_OW 259
39542: PPUSH
39543: CALL 40976 0 2
39547: ST_TO_ADDR
39548: GO 39515
39550: POP
39551: POP
// if not tmp then
39552: LD_VAR 0 5
39556: NOT
39557: IFFALSE 39561
// exit ;
39559: GO 39581
// result := SortListByListDesc ( units , tmp ) ;
39561: LD_ADDR_VAR 0 3
39565: PUSH
39566: LD_VAR 0 1
39570: PPUSH
39571: LD_VAR 0 5
39575: PPUSH
39576: CALL_OW 77
39580: ST_TO_ADDR
// end ;
39581: LD_VAR 0 3
39585: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39586: LD_INT 0
39588: PPUSH
39589: PPUSH
39590: PPUSH
// result := false ;
39591: LD_ADDR_VAR 0 3
39595: PUSH
39596: LD_INT 0
39598: ST_TO_ADDR
// if not building then
39599: LD_VAR 0 2
39603: NOT
39604: IFFALSE 39608
// exit ;
39606: GO 39752
// x := GetX ( building ) ;
39608: LD_ADDR_VAR 0 4
39612: PUSH
39613: LD_VAR 0 2
39617: PPUSH
39618: CALL_OW 250
39622: ST_TO_ADDR
// y := GetY ( building ) ;
39623: LD_ADDR_VAR 0 5
39627: PUSH
39628: LD_VAR 0 2
39632: PPUSH
39633: CALL_OW 251
39637: ST_TO_ADDR
// if not x or not y then
39638: LD_VAR 0 4
39642: NOT
39643: IFTRUE 39652
39645: PUSH
39646: LD_VAR 0 5
39650: NOT
39651: OR
39652: IFFALSE 39656
// exit ;
39654: GO 39752
// if GetTaskList ( unit ) then
39656: LD_VAR 0 1
39660: PPUSH
39661: CALL_OW 437
39665: IFFALSE 39752
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39667: LD_STRING e
39669: PUSH
39670: LD_VAR 0 1
39674: PPUSH
39675: CALL_OW 437
39679: PUSH
39680: LD_INT 1
39682: ARRAY
39683: PUSH
39684: LD_INT 1
39686: ARRAY
39687: EQUAL
39688: IFFALSE 39715
39690: PUSH
39691: LD_VAR 0 4
39695: PUSH
39696: LD_VAR 0 1
39700: PPUSH
39701: CALL_OW 437
39705: PUSH
39706: LD_INT 1
39708: ARRAY
39709: PUSH
39710: LD_INT 2
39712: ARRAY
39713: EQUAL
39714: AND
39715: IFFALSE 39742
39717: PUSH
39718: LD_VAR 0 5
39722: PUSH
39723: LD_VAR 0 1
39727: PPUSH
39728: CALL_OW 437
39732: PUSH
39733: LD_INT 1
39735: ARRAY
39736: PUSH
39737: LD_INT 3
39739: ARRAY
39740: EQUAL
39741: AND
39742: IFFALSE 39752
// result := true end ;
39744: LD_ADDR_VAR 0 3
39748: PUSH
39749: LD_INT 1
39751: ST_TO_ADDR
// end ;
39752: LD_VAR 0 3
39756: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39757: LD_INT 0
39759: PPUSH
// result := false ;
39760: LD_ADDR_VAR 0 4
39764: PUSH
39765: LD_INT 0
39767: ST_TO_ADDR
// if GetTaskList ( unit ) then
39768: LD_VAR 0 1
39772: PPUSH
39773: CALL_OW 437
39777: IFFALSE 39864
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39779: LD_STRING M
39781: PUSH
39782: LD_VAR 0 1
39786: PPUSH
39787: CALL_OW 437
39791: PUSH
39792: LD_INT 1
39794: ARRAY
39795: PUSH
39796: LD_INT 1
39798: ARRAY
39799: EQUAL
39800: IFFALSE 39827
39802: PUSH
39803: LD_VAR 0 2
39807: PUSH
39808: LD_VAR 0 1
39812: PPUSH
39813: CALL_OW 437
39817: PUSH
39818: LD_INT 1
39820: ARRAY
39821: PUSH
39822: LD_INT 2
39824: ARRAY
39825: EQUAL
39826: AND
39827: IFFALSE 39854
39829: PUSH
39830: LD_VAR 0 3
39834: PUSH
39835: LD_VAR 0 1
39839: PPUSH
39840: CALL_OW 437
39844: PUSH
39845: LD_INT 1
39847: ARRAY
39848: PUSH
39849: LD_INT 3
39851: ARRAY
39852: EQUAL
39853: AND
39854: IFFALSE 39864
// result := true ;
39856: LD_ADDR_VAR 0 4
39860: PUSH
39861: LD_INT 1
39863: ST_TO_ADDR
// end ; end ;
39864: LD_VAR 0 4
39868: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39869: LD_INT 0
39871: PPUSH
39872: PPUSH
39873: PPUSH
39874: PPUSH
// if not unit or not area then
39875: LD_VAR 0 1
39879: NOT
39880: IFTRUE 39889
39882: PUSH
39883: LD_VAR 0 2
39887: NOT
39888: OR
39889: IFFALSE 39893
// exit ;
39891: GO 40069
// tmp := AreaToList ( area , i ) ;
39893: LD_ADDR_VAR 0 6
39897: PUSH
39898: LD_VAR 0 2
39902: PPUSH
39903: LD_VAR 0 5
39907: PPUSH
39908: CALL_OW 517
39912: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39913: LD_ADDR_VAR 0 5
39917: PUSH
39918: DOUBLE
39919: LD_INT 1
39921: DEC
39922: ST_TO_ADDR
39923: LD_VAR 0 6
39927: PUSH
39928: LD_INT 1
39930: ARRAY
39931: PUSH
39932: FOR_TO
39933: IFFALSE 40067
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39935: LD_ADDR_VAR 0 7
39939: PUSH
39940: LD_VAR 0 6
39944: PUSH
39945: LD_INT 1
39947: ARRAY
39948: PUSH
39949: LD_VAR 0 5
39953: ARRAY
39954: PUSH
39955: LD_VAR 0 6
39959: PUSH
39960: LD_INT 2
39962: ARRAY
39963: PUSH
39964: LD_VAR 0 5
39968: ARRAY
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39974: LD_INT 92
39976: PUSH
39977: LD_VAR 0 7
39981: PUSH
39982: LD_INT 1
39984: ARRAY
39985: PUSH
39986: LD_VAR 0 7
39990: PUSH
39991: LD_INT 2
39993: ARRAY
39994: PUSH
39995: LD_INT 2
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: PPUSH
40004: CALL_OW 69
40008: PUSH
40009: LD_INT 0
40011: EQUAL
40012: IFFALSE 40065
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40014: LD_VAR 0 1
40018: PPUSH
40019: LD_VAR 0 7
40023: PUSH
40024: LD_INT 1
40026: ARRAY
40027: PPUSH
40028: LD_VAR 0 7
40032: PUSH
40033: LD_INT 2
40035: ARRAY
40036: PPUSH
40037: LD_VAR 0 3
40041: PPUSH
40042: CALL_OW 48
// result := IsPlaced ( unit ) ;
40046: LD_ADDR_VAR 0 4
40050: PUSH
40051: LD_VAR 0 1
40055: PPUSH
40056: CALL_OW 305
40060: ST_TO_ADDR
// exit ;
40061: POP
40062: POP
40063: GO 40069
// end ; end ;
40065: GO 39932
40067: POP
40068: POP
// end ;
40069: LD_VAR 0 4
40073: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40074: LD_INT 0
40076: PPUSH
40077: PPUSH
40078: PPUSH
// if not side or side > 8 then
40079: LD_VAR 0 1
40083: NOT
40084: IFTRUE 40096
40086: PUSH
40087: LD_VAR 0 1
40091: PUSH
40092: LD_INT 8
40094: GREATER
40095: OR
40096: IFFALSE 40100
// exit ;
40098: GO 40287
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40100: LD_ADDR_VAR 0 4
40104: PUSH
40105: LD_INT 22
40107: PUSH
40108: LD_VAR 0 1
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 21
40119: PUSH
40120: LD_INT 3
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PPUSH
40131: CALL_OW 69
40135: ST_TO_ADDR
// if not tmp then
40136: LD_VAR 0 4
40140: NOT
40141: IFFALSE 40145
// exit ;
40143: GO 40287
// enable_addtolog := true ;
40145: LD_ADDR_OWVAR 81
40149: PUSH
40150: LD_INT 1
40152: ST_TO_ADDR
// AddToLog ( [ ) ;
40153: LD_STRING [
40155: PPUSH
40156: CALL_OW 561
// for i in tmp do
40160: LD_ADDR_VAR 0 3
40164: PUSH
40165: LD_VAR 0 4
40169: PUSH
40170: FOR_IN
40171: IFFALSE 40278
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40173: LD_STRING [
40175: PUSH
40176: LD_VAR 0 3
40180: PPUSH
40181: CALL_OW 266
40185: STR
40186: PUSH
40187: LD_STRING , 
40189: STR
40190: PUSH
40191: LD_VAR 0 3
40195: PPUSH
40196: CALL_OW 250
40200: STR
40201: PUSH
40202: LD_STRING , 
40204: STR
40205: PUSH
40206: LD_VAR 0 3
40210: PPUSH
40211: CALL_OW 251
40215: STR
40216: PUSH
40217: LD_STRING , 
40219: STR
40220: PUSH
40221: LD_VAR 0 3
40225: PPUSH
40226: CALL_OW 254
40230: STR
40231: PUSH
40232: LD_STRING , 
40234: STR
40235: PUSH
40236: LD_VAR 0 3
40240: PPUSH
40241: LD_INT 1
40243: PPUSH
40244: CALL_OW 268
40248: STR
40249: PUSH
40250: LD_STRING , 
40252: STR
40253: PUSH
40254: LD_VAR 0 3
40258: PPUSH
40259: LD_INT 2
40261: PPUSH
40262: CALL_OW 268
40266: STR
40267: PUSH
40268: LD_STRING ],
40270: STR
40271: PPUSH
40272: CALL_OW 561
// end ;
40276: GO 40170
40278: POP
40279: POP
// AddToLog ( ]; ) ;
40280: LD_STRING ];
40282: PPUSH
40283: CALL_OW 561
// end ;
40287: LD_VAR 0 2
40291: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40292: LD_INT 0
40294: PPUSH
40295: PPUSH
40296: PPUSH
40297: PPUSH
40298: PPUSH
// if not area or not rate or not max then
40299: LD_VAR 0 1
40303: NOT
40304: IFTRUE 40313
40306: PUSH
40307: LD_VAR 0 2
40311: NOT
40312: OR
40313: IFTRUE 40322
40315: PUSH
40316: LD_VAR 0 4
40320: NOT
40321: OR
40322: IFFALSE 40326
// exit ;
40324: GO 40515
// while 1 do
40326: LD_INT 1
40328: IFFALSE 40515
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40330: LD_ADDR_VAR 0 9
40334: PUSH
40335: LD_VAR 0 1
40339: PPUSH
40340: LD_INT 1
40342: PPUSH
40343: CALL_OW 287
40347: PUSH
40348: LD_INT 10
40350: MUL
40351: ST_TO_ADDR
// r := rate / 10 ;
40352: LD_ADDR_VAR 0 7
40356: PUSH
40357: LD_VAR 0 2
40361: PUSH
40362: LD_INT 10
40364: DIVREAL
40365: ST_TO_ADDR
// time := 1 1$00 ;
40366: LD_ADDR_VAR 0 8
40370: PUSH
40371: LD_INT 2100
40373: ST_TO_ADDR
// if amount < min then
40374: LD_VAR 0 9
40378: PUSH
40379: LD_VAR 0 3
40383: LESS
40384: IFFALSE 40402
// r := r * 2 else
40386: LD_ADDR_VAR 0 7
40390: PUSH
40391: LD_VAR 0 7
40395: PUSH
40396: LD_INT 2
40398: MUL
40399: ST_TO_ADDR
40400: GO 40428
// if amount > max then
40402: LD_VAR 0 9
40406: PUSH
40407: LD_VAR 0 4
40411: GREATER
40412: IFFALSE 40428
// r := r / 2 ;
40414: LD_ADDR_VAR 0 7
40418: PUSH
40419: LD_VAR 0 7
40423: PUSH
40424: LD_INT 2
40426: DIVREAL
40427: ST_TO_ADDR
// time := time / r ;
40428: LD_ADDR_VAR 0 8
40432: PUSH
40433: LD_VAR 0 8
40437: PUSH
40438: LD_VAR 0 7
40442: DIVREAL
40443: ST_TO_ADDR
// if time < 0 then
40444: LD_VAR 0 8
40448: PUSH
40449: LD_INT 0
40451: LESS
40452: IFFALSE 40469
// time := time * - 1 ;
40454: LD_ADDR_VAR 0 8
40458: PUSH
40459: LD_VAR 0 8
40463: PUSH
40464: LD_INT 1
40466: NEG
40467: MUL
40468: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40469: LD_VAR 0 8
40473: PUSH
40474: LD_INT 35
40476: PPUSH
40477: LD_INT 875
40479: PPUSH
40480: CALL_OW 12
40484: PLUS
40485: PPUSH
40486: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40490: LD_INT 1
40492: PPUSH
40493: LD_INT 5
40495: PPUSH
40496: CALL_OW 12
40500: PPUSH
40501: LD_VAR 0 1
40505: PPUSH
40506: LD_INT 1
40508: PPUSH
40509: CALL_OW 55
// end ;
40513: GO 40326
// end ;
40515: LD_VAR 0 5
40519: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40520: LD_INT 0
40522: PPUSH
40523: PPUSH
40524: PPUSH
40525: PPUSH
40526: PPUSH
40527: PPUSH
40528: PPUSH
40529: PPUSH
// if not turrets or not factories then
40530: LD_VAR 0 1
40534: NOT
40535: IFTRUE 40544
40537: PUSH
40538: LD_VAR 0 2
40542: NOT
40543: OR
40544: IFFALSE 40548
// exit ;
40546: GO 40855
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40548: LD_ADDR_VAR 0 10
40552: PUSH
40553: LD_INT 5
40555: PUSH
40556: LD_INT 6
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 2
40565: PUSH
40566: LD_INT 4
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 3
40575: PUSH
40576: LD_INT 5
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 24
40590: PUSH
40591: LD_INT 25
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 23
40600: PUSH
40601: LD_INT 27
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 42
40614: PUSH
40615: LD_INT 43
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 44
40624: PUSH
40625: LD_INT 46
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 45
40634: PUSH
40635: LD_INT 47
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: LIST
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: LIST
40651: ST_TO_ADDR
// result := [ ] ;
40652: LD_ADDR_VAR 0 3
40656: PUSH
40657: EMPTY
40658: ST_TO_ADDR
// for i in turrets do
40659: LD_ADDR_VAR 0 4
40663: PUSH
40664: LD_VAR 0 1
40668: PUSH
40669: FOR_IN
40670: IFFALSE 40853
// begin nat := GetNation ( i ) ;
40672: LD_ADDR_VAR 0 7
40676: PUSH
40677: LD_VAR 0 4
40681: PPUSH
40682: CALL_OW 248
40686: ST_TO_ADDR
// weapon := 0 ;
40687: LD_ADDR_VAR 0 8
40691: PUSH
40692: LD_INT 0
40694: ST_TO_ADDR
// if not nat then
40695: LD_VAR 0 7
40699: NOT
40700: IFFALSE 40704
// continue ;
40702: GO 40669
// for j in list [ nat ] do
40704: LD_ADDR_VAR 0 5
40708: PUSH
40709: LD_VAR 0 10
40713: PUSH
40714: LD_VAR 0 7
40718: ARRAY
40719: PUSH
40720: FOR_IN
40721: IFFALSE 40762
// if GetBWeapon ( i ) = j [ 1 ] then
40723: LD_VAR 0 4
40727: PPUSH
40728: CALL_OW 269
40732: PUSH
40733: LD_VAR 0 5
40737: PUSH
40738: LD_INT 1
40740: ARRAY
40741: EQUAL
40742: IFFALSE 40760
// begin weapon := j [ 2 ] ;
40744: LD_ADDR_VAR 0 8
40748: PUSH
40749: LD_VAR 0 5
40753: PUSH
40754: LD_INT 2
40756: ARRAY
40757: ST_TO_ADDR
// break ;
40758: GO 40762
// end ;
40760: GO 40720
40762: POP
40763: POP
// if not weapon then
40764: LD_VAR 0 8
40768: NOT
40769: IFFALSE 40773
// continue ;
40771: GO 40669
// for k in factories do
40773: LD_ADDR_VAR 0 6
40777: PUSH
40778: LD_VAR 0 2
40782: PUSH
40783: FOR_IN
40784: IFFALSE 40849
// begin weapons := AvailableWeaponList ( k ) ;
40786: LD_ADDR_VAR 0 9
40790: PUSH
40791: LD_VAR 0 6
40795: PPUSH
40796: CALL_OW 478
40800: ST_TO_ADDR
// if not weapons then
40801: LD_VAR 0 9
40805: NOT
40806: IFFALSE 40810
// continue ;
40808: GO 40783
// if weapon in weapons then
40810: LD_VAR 0 8
40814: PUSH
40815: LD_VAR 0 9
40819: IN
40820: IFFALSE 40847
// begin result := [ i , weapon ] ;
40822: LD_ADDR_VAR 0 3
40826: PUSH
40827: LD_VAR 0 4
40831: PUSH
40832: LD_VAR 0 8
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: ST_TO_ADDR
// exit ;
40841: POP
40842: POP
40843: POP
40844: POP
40845: GO 40855
// end ; end ;
40847: GO 40783
40849: POP
40850: POP
// end ;
40851: GO 40669
40853: POP
40854: POP
// end ;
40855: LD_VAR 0 3
40859: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40860: LD_INT 0
40862: PPUSH
// if not side or side > 8 then
40863: LD_VAR 0 3
40867: NOT
40868: IFTRUE 40880
40870: PUSH
40871: LD_VAR 0 3
40875: PUSH
40876: LD_INT 8
40878: GREATER
40879: OR
40880: IFFALSE 40884
// exit ;
40882: GO 40943
// if not range then
40884: LD_VAR 0 4
40888: NOT
40889: IFFALSE 40900
// range := - 12 ;
40891: LD_ADDR_VAR 0 4
40895: PUSH
40896: LD_INT 12
40898: NEG
40899: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40900: LD_VAR 0 1
40904: PPUSH
40905: LD_VAR 0 2
40909: PPUSH
40910: LD_VAR 0 3
40914: PPUSH
40915: LD_VAR 0 4
40919: PPUSH
40920: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40924: LD_VAR 0 1
40928: PPUSH
40929: LD_VAR 0 2
40933: PPUSH
40934: LD_VAR 0 3
40938: PPUSH
40939: CALL_OW 331
// end ;
40943: LD_VAR 0 5
40947: RET
// export function Video ( mode ) ; begin
40948: LD_INT 0
40950: PPUSH
// ingame_video = mode ;
40951: LD_ADDR_OWVAR 52
40955: PUSH
40956: LD_VAR 0 1
40960: ST_TO_ADDR
// interface_hidden = mode ;
40961: LD_ADDR_OWVAR 54
40965: PUSH
40966: LD_VAR 0 1
40970: ST_TO_ADDR
// end ;
40971: LD_VAR 0 2
40975: RET
// export function Join ( array , element ) ; begin
40976: LD_INT 0
40978: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40979: LD_ADDR_VAR 0 3
40983: PUSH
40984: LD_VAR 0 1
40988: PPUSH
40989: LD_VAR 0 1
40993: PUSH
40994: LD_INT 1
40996: PLUS
40997: PPUSH
40998: LD_VAR 0 2
41002: PPUSH
41003: CALL_OW 1
41007: ST_TO_ADDR
// end ;
41008: LD_VAR 0 3
41012: RET
// export function JoinUnion ( array , element ) ; begin
41013: LD_INT 0
41015: PPUSH
// result := array union element ;
41016: LD_ADDR_VAR 0 3
41020: PUSH
41021: LD_VAR 0 1
41025: PUSH
41026: LD_VAR 0 2
41030: UNION
41031: ST_TO_ADDR
// end ;
41032: LD_VAR 0 3
41036: RET
// export function GetBehemoths ( side ) ; begin
41037: LD_INT 0
41039: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41040: LD_ADDR_VAR 0 2
41044: PUSH
41045: LD_INT 22
41047: PUSH
41048: LD_VAR 0 1
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 31
41059: PUSH
41060: LD_INT 25
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PPUSH
41071: CALL_OW 69
41075: ST_TO_ADDR
// end ;
41076: LD_VAR 0 2
41080: RET
// export function Shuffle ( array ) ; var i , index ; begin
41081: LD_INT 0
41083: PPUSH
41084: PPUSH
41085: PPUSH
// result := [ ] ;
41086: LD_ADDR_VAR 0 2
41090: PUSH
41091: EMPTY
41092: ST_TO_ADDR
// if not array then
41093: LD_VAR 0 1
41097: NOT
41098: IFFALSE 41102
// exit ;
41100: GO 41201
// Randomize ;
41102: CALL_OW 10
// for i = array downto 1 do
41106: LD_ADDR_VAR 0 3
41110: PUSH
41111: DOUBLE
41112: LD_VAR 0 1
41116: INC
41117: ST_TO_ADDR
41118: LD_INT 1
41120: PUSH
41121: FOR_DOWNTO
41122: IFFALSE 41199
// begin index := rand ( 1 , array ) ;
41124: LD_ADDR_VAR 0 4
41128: PUSH
41129: LD_INT 1
41131: PPUSH
41132: LD_VAR 0 1
41136: PPUSH
41137: CALL_OW 12
41141: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41142: LD_ADDR_VAR 0 2
41146: PUSH
41147: LD_VAR 0 2
41151: PPUSH
41152: LD_VAR 0 2
41156: PUSH
41157: LD_INT 1
41159: PLUS
41160: PPUSH
41161: LD_VAR 0 1
41165: PUSH
41166: LD_VAR 0 4
41170: ARRAY
41171: PPUSH
41172: CALL_OW 2
41176: ST_TO_ADDR
// array := Delete ( array , index ) ;
41177: LD_ADDR_VAR 0 1
41181: PUSH
41182: LD_VAR 0 1
41186: PPUSH
41187: LD_VAR 0 4
41191: PPUSH
41192: CALL_OW 3
41196: ST_TO_ADDR
// end ;
41197: GO 41121
41199: POP
41200: POP
// end ;
41201: LD_VAR 0 2
41205: RET
// export function GetBaseMaterials ( base ) ; begin
41206: LD_INT 0
41208: PPUSH
// result := [ 0 , 0 , 0 ] ;
41209: LD_ADDR_VAR 0 2
41213: PUSH
41214: LD_INT 0
41216: PUSH
41217: LD_INT 0
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: LIST
41227: ST_TO_ADDR
// if not base then
41228: LD_VAR 0 1
41232: NOT
41233: IFFALSE 41237
// exit ;
41235: GO 41286
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41237: LD_ADDR_VAR 0 2
41241: PUSH
41242: LD_VAR 0 1
41246: PPUSH
41247: LD_INT 1
41249: PPUSH
41250: CALL_OW 275
41254: PUSH
41255: LD_VAR 0 1
41259: PPUSH
41260: LD_INT 2
41262: PPUSH
41263: CALL_OW 275
41267: PUSH
41268: LD_VAR 0 1
41272: PPUSH
41273: LD_INT 3
41275: PPUSH
41276: CALL_OW 275
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: LIST
41285: ST_TO_ADDR
// end ;
41286: LD_VAR 0 2
41290: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41291: LD_INT 0
41293: PPUSH
41294: PPUSH
// result := array ;
41295: LD_ADDR_VAR 0 3
41299: PUSH
41300: LD_VAR 0 1
41304: ST_TO_ADDR
// if size >= result then
41305: LD_VAR 0 2
41309: PUSH
41310: LD_VAR 0 3
41314: GREATEREQUAL
41315: IFFALSE 41319
// exit ;
41317: GO 41369
// if size then
41319: LD_VAR 0 2
41323: IFFALSE 41369
// for i := array downto size do
41325: LD_ADDR_VAR 0 4
41329: PUSH
41330: DOUBLE
41331: LD_VAR 0 1
41335: INC
41336: ST_TO_ADDR
41337: LD_VAR 0 2
41341: PUSH
41342: FOR_DOWNTO
41343: IFFALSE 41367
// result := Delete ( result , result ) ;
41345: LD_ADDR_VAR 0 3
41349: PUSH
41350: LD_VAR 0 3
41354: PPUSH
41355: LD_VAR 0 3
41359: PPUSH
41360: CALL_OW 3
41364: ST_TO_ADDR
41365: GO 41342
41367: POP
41368: POP
// end ;
41369: LD_VAR 0 3
41373: RET
// export function ComExit ( unit ) ; var tmp ; begin
41374: LD_INT 0
41376: PPUSH
41377: PPUSH
// if not IsInUnit ( unit ) then
41378: LD_VAR 0 1
41382: PPUSH
41383: CALL_OW 310
41387: NOT
41388: IFFALSE 41392
// exit ;
41390: GO 41452
// tmp := IsInUnit ( unit ) ;
41392: LD_ADDR_VAR 0 3
41396: PUSH
41397: LD_VAR 0 1
41401: PPUSH
41402: CALL_OW 310
41406: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41407: LD_VAR 0 3
41411: PPUSH
41412: CALL_OW 247
41416: PUSH
41417: LD_INT 2
41419: EQUAL
41420: IFFALSE 41433
// ComExitVehicle ( unit ) else
41422: LD_VAR 0 1
41426: PPUSH
41427: CALL_OW 121
41431: GO 41442
// ComExitBuilding ( unit ) ;
41433: LD_VAR 0 1
41437: PPUSH
41438: CALL_OW 122
// result := tmp ;
41442: LD_ADDR_VAR 0 2
41446: PUSH
41447: LD_VAR 0 3
41451: ST_TO_ADDR
// end ;
41452: LD_VAR 0 2
41456: RET
// export function ComExitAll ( units ) ; var i ; begin
41457: LD_INT 0
41459: PPUSH
41460: PPUSH
// if not units then
41461: LD_VAR 0 1
41465: NOT
41466: IFFALSE 41470
// exit ;
41468: GO 41496
// for i in units do
41470: LD_ADDR_VAR 0 3
41474: PUSH
41475: LD_VAR 0 1
41479: PUSH
41480: FOR_IN
41481: IFFALSE 41494
// ComExit ( i ) ;
41483: LD_VAR 0 3
41487: PPUSH
41488: CALL 41374 0 1
41492: GO 41480
41494: POP
41495: POP
// end ;
41496: LD_VAR 0 2
41500: RET
// export function ResetHc ; begin
41501: LD_INT 0
41503: PPUSH
// InitHc ;
41504: CALL_OW 19
// hc_importance := 0 ;
41508: LD_ADDR_OWVAR 32
41512: PUSH
41513: LD_INT 0
41515: ST_TO_ADDR
// end ;
41516: LD_VAR 0 1
41520: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41521: LD_INT 0
41523: PPUSH
41524: PPUSH
41525: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41526: LD_ADDR_VAR 0 6
41530: PUSH
41531: LD_VAR 0 1
41535: PUSH
41536: LD_VAR 0 3
41540: PLUS
41541: PUSH
41542: LD_INT 2
41544: DIV
41545: ST_TO_ADDR
// if _x < 0 then
41546: LD_VAR 0 6
41550: PUSH
41551: LD_INT 0
41553: LESS
41554: IFFALSE 41571
// _x := _x * - 1 ;
41556: LD_ADDR_VAR 0 6
41560: PUSH
41561: LD_VAR 0 6
41565: PUSH
41566: LD_INT 1
41568: NEG
41569: MUL
41570: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41571: LD_ADDR_VAR 0 7
41575: PUSH
41576: LD_VAR 0 2
41580: PUSH
41581: LD_VAR 0 4
41585: PLUS
41586: PUSH
41587: LD_INT 2
41589: DIV
41590: ST_TO_ADDR
// if _y < 0 then
41591: LD_VAR 0 7
41595: PUSH
41596: LD_INT 0
41598: LESS
41599: IFFALSE 41616
// _y := _y * - 1 ;
41601: LD_ADDR_VAR 0 7
41605: PUSH
41606: LD_VAR 0 7
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: MUL
41615: ST_TO_ADDR
// result := [ _x , _y ] ;
41616: LD_ADDR_VAR 0 5
41620: PUSH
41621: LD_VAR 0 6
41625: PUSH
41626: LD_VAR 0 7
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: ST_TO_ADDR
// end ;
41635: LD_VAR 0 5
41639: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41640: LD_INT 0
41642: PPUSH
41643: PPUSH
41644: PPUSH
41645: PPUSH
// task := GetTaskList ( unit ) ;
41646: LD_ADDR_VAR 0 7
41650: PUSH
41651: LD_VAR 0 1
41655: PPUSH
41656: CALL_OW 437
41660: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41661: LD_VAR 0 7
41665: NOT
41666: IFFALSE 41685
41668: PUSH
41669: LD_VAR 0 1
41673: PPUSH
41674: LD_VAR 0 2
41678: PPUSH
41679: CALL_OW 308
41683: NOT
41684: AND
41685: IFFALSE 41689
// exit ;
41687: GO 41807
// if IsInArea ( unit , area ) then
41689: LD_VAR 0 1
41693: PPUSH
41694: LD_VAR 0 2
41698: PPUSH
41699: CALL_OW 308
41703: IFFALSE 41721
// begin ComMoveToArea ( unit , goAway ) ;
41705: LD_VAR 0 1
41709: PPUSH
41710: LD_VAR 0 3
41714: PPUSH
41715: CALL_OW 113
// exit ;
41719: GO 41807
// end ; if task [ 1 ] [ 1 ] <> M then
41721: LD_VAR 0 7
41725: PUSH
41726: LD_INT 1
41728: ARRAY
41729: PUSH
41730: LD_INT 1
41732: ARRAY
41733: PUSH
41734: LD_STRING M
41736: NONEQUAL
41737: IFFALSE 41741
// exit ;
41739: GO 41807
// x := task [ 1 ] [ 2 ] ;
41741: LD_ADDR_VAR 0 5
41745: PUSH
41746: LD_VAR 0 7
41750: PUSH
41751: LD_INT 1
41753: ARRAY
41754: PUSH
41755: LD_INT 2
41757: ARRAY
41758: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41759: LD_ADDR_VAR 0 6
41763: PUSH
41764: LD_VAR 0 7
41768: PUSH
41769: LD_INT 1
41771: ARRAY
41772: PUSH
41773: LD_INT 3
41775: ARRAY
41776: ST_TO_ADDR
// if InArea ( x , y , area ) then
41777: LD_VAR 0 5
41781: PPUSH
41782: LD_VAR 0 6
41786: PPUSH
41787: LD_VAR 0 2
41791: PPUSH
41792: CALL_OW 309
41796: IFFALSE 41807
// ComStop ( unit ) ;
41798: LD_VAR 0 1
41802: PPUSH
41803: CALL_OW 141
// end ;
41807: LD_VAR 0 4
41811: RET
// export function Abs ( value ) ; begin
41812: LD_INT 0
41814: PPUSH
// result := value ;
41815: LD_ADDR_VAR 0 2
41819: PUSH
41820: LD_VAR 0 1
41824: ST_TO_ADDR
// if value < 0 then
41825: LD_VAR 0 1
41829: PUSH
41830: LD_INT 0
41832: LESS
41833: IFFALSE 41850
// result := value * - 1 ;
41835: LD_ADDR_VAR 0 2
41839: PUSH
41840: LD_VAR 0 1
41844: PUSH
41845: LD_INT 1
41847: NEG
41848: MUL
41849: ST_TO_ADDR
// end ;
41850: LD_VAR 0 2
41854: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41855: LD_INT 0
41857: PPUSH
41858: PPUSH
41859: PPUSH
41860: PPUSH
41861: PPUSH
41862: PPUSH
41863: PPUSH
41864: PPUSH
// if not unit or not building then
41865: LD_VAR 0 1
41869: NOT
41870: IFTRUE 41879
41872: PUSH
41873: LD_VAR 0 2
41877: NOT
41878: OR
41879: IFFALSE 41883
// exit ;
41881: GO 42111
// x := GetX ( building ) ;
41883: LD_ADDR_VAR 0 4
41887: PUSH
41888: LD_VAR 0 2
41892: PPUSH
41893: CALL_OW 250
41897: ST_TO_ADDR
// y := GetY ( building ) ;
41898: LD_ADDR_VAR 0 6
41902: PUSH
41903: LD_VAR 0 2
41907: PPUSH
41908: CALL_OW 251
41912: ST_TO_ADDR
// d := GetDir ( building ) ;
41913: LD_ADDR_VAR 0 8
41917: PUSH
41918: LD_VAR 0 2
41922: PPUSH
41923: CALL_OW 254
41927: ST_TO_ADDR
// r := 4 ;
41928: LD_ADDR_VAR 0 9
41932: PUSH
41933: LD_INT 4
41935: ST_TO_ADDR
// for i := 1 to 5 do
41936: LD_ADDR_VAR 0 10
41940: PUSH
41941: DOUBLE
41942: LD_INT 1
41944: DEC
41945: ST_TO_ADDR
41946: LD_INT 5
41948: PUSH
41949: FOR_TO
41950: IFFALSE 42109
// begin _x := ShiftX ( x , d , r + i ) ;
41952: LD_ADDR_VAR 0 5
41956: PUSH
41957: LD_VAR 0 4
41961: PPUSH
41962: LD_VAR 0 8
41966: PPUSH
41967: LD_VAR 0 9
41971: PUSH
41972: LD_VAR 0 10
41976: PLUS
41977: PPUSH
41978: CALL_OW 272
41982: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41983: LD_ADDR_VAR 0 7
41987: PUSH
41988: LD_VAR 0 6
41992: PPUSH
41993: LD_VAR 0 8
41997: PPUSH
41998: LD_VAR 0 9
42002: PUSH
42003: LD_VAR 0 10
42007: PLUS
42008: PPUSH
42009: CALL_OW 273
42013: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42014: LD_VAR 0 5
42018: PPUSH
42019: LD_VAR 0 7
42023: PPUSH
42024: CALL_OW 488
42028: IFFALSE 42063
42030: PUSH
42031: LD_VAR 0 5
42035: PPUSH
42036: LD_VAR 0 7
42040: PPUSH
42041: CALL_OW 428
42045: PPUSH
42046: CALL_OW 247
42050: PUSH
42051: LD_INT 3
42053: PUSH
42054: LD_INT 2
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: IN
42061: NOT
42062: AND
42063: IFFALSE 42107
// begin ComMoveXY ( unit , _x , _y ) ;
42065: LD_VAR 0 1
42069: PPUSH
42070: LD_VAR 0 5
42074: PPUSH
42075: LD_VAR 0 7
42079: PPUSH
42080: CALL_OW 111
// result := [ _x , _y ] ;
42084: LD_ADDR_VAR 0 3
42088: PUSH
42089: LD_VAR 0 5
42093: PUSH
42094: LD_VAR 0 7
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: ST_TO_ADDR
// exit ;
42103: POP
42104: POP
42105: GO 42111
// end ; end ;
42107: GO 41949
42109: POP
42110: POP
// end ;
42111: LD_VAR 0 3
42115: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42116: LD_INT 0
42118: PPUSH
42119: PPUSH
42120: PPUSH
// result := 0 ;
42121: LD_ADDR_VAR 0 3
42125: PUSH
42126: LD_INT 0
42128: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42129: LD_VAR 0 1
42133: PUSH
42134: LD_INT 0
42136: LESS
42137: IFTRUE 42149
42139: PUSH
42140: LD_VAR 0 1
42144: PUSH
42145: LD_INT 8
42147: GREATER
42148: OR
42149: IFTRUE 42161
42151: PUSH
42152: LD_VAR 0 2
42156: PUSH
42157: LD_INT 0
42159: LESS
42160: OR
42161: IFTRUE 42173
42163: PUSH
42164: LD_VAR 0 2
42168: PUSH
42169: LD_INT 8
42171: GREATER
42172: OR
42173: IFFALSE 42177
// exit ;
42175: GO 42252
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42177: LD_ADDR_VAR 0 4
42181: PUSH
42182: LD_INT 22
42184: PUSH
42185: LD_VAR 0 2
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PPUSH
42194: CALL_OW 69
42198: PUSH
42199: FOR_IN
42200: IFFALSE 42250
// begin un := UnitShoot ( i ) ;
42202: LD_ADDR_VAR 0 5
42206: PUSH
42207: LD_VAR 0 4
42211: PPUSH
42212: CALL_OW 504
42216: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42217: LD_VAR 0 5
42221: PPUSH
42222: CALL_OW 255
42226: PUSH
42227: LD_VAR 0 1
42231: EQUAL
42232: IFFALSE 42248
// begin result := un ;
42234: LD_ADDR_VAR 0 3
42238: PUSH
42239: LD_VAR 0 5
42243: ST_TO_ADDR
// exit ;
42244: POP
42245: POP
42246: GO 42252
// end ; end ;
42248: GO 42199
42250: POP
42251: POP
// end ;
42252: LD_VAR 0 3
42256: RET
// export function GetCargoBay ( units ) ; begin
42257: LD_INT 0
42259: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42260: LD_ADDR_VAR 0 2
42264: PUSH
42265: LD_VAR 0 1
42269: PPUSH
42270: LD_INT 2
42272: PUSH
42273: LD_INT 34
42275: PUSH
42276: LD_INT 12
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 34
42285: PUSH
42286: LD_INT 51
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 34
42295: PUSH
42296: LD_INT 32
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 34
42305: PUSH
42306: LD_INT 89
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: PPUSH
42320: CALL_OW 72
42324: ST_TO_ADDR
// end ;
42325: LD_VAR 0 2
42329: RET
// export function Negate ( value ) ; begin
42330: LD_INT 0
42332: PPUSH
// result := not value ;
42333: LD_ADDR_VAR 0 2
42337: PUSH
42338: LD_VAR 0 1
42342: NOT
42343: ST_TO_ADDR
// end ;
42344: LD_VAR 0 2
42348: RET
// export function Inc ( value ) ; begin
42349: LD_INT 0
42351: PPUSH
// result := value + 1 ;
42352: LD_ADDR_VAR 0 2
42356: PUSH
42357: LD_VAR 0 1
42361: PUSH
42362: LD_INT 1
42364: PLUS
42365: ST_TO_ADDR
// end ;
42366: LD_VAR 0 2
42370: RET
// export function Dec ( value ) ; begin
42371: LD_INT 0
42373: PPUSH
// result := value - 1 ;
42374: LD_ADDR_VAR 0 2
42378: PUSH
42379: LD_VAR 0 1
42383: PUSH
42384: LD_INT 1
42386: MINUS
42387: ST_TO_ADDR
// end ;
42388: LD_VAR 0 2
42392: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42393: LD_INT 0
42395: PPUSH
42396: PPUSH
42397: PPUSH
42398: PPUSH
42399: PPUSH
42400: PPUSH
42401: PPUSH
42402: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42403: LD_VAR 0 1
42407: PPUSH
42408: LD_VAR 0 2
42412: PPUSH
42413: CALL_OW 488
42417: NOT
42418: IFTRUE 42437
42420: PUSH
42421: LD_VAR 0 3
42425: PPUSH
42426: LD_VAR 0 4
42430: PPUSH
42431: CALL_OW 488
42435: NOT
42436: OR
42437: IFFALSE 42450
// begin result := - 1 ;
42439: LD_ADDR_VAR 0 5
42443: PUSH
42444: LD_INT 1
42446: NEG
42447: ST_TO_ADDR
// exit ;
42448: GO 42685
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42450: LD_ADDR_VAR 0 12
42454: PUSH
42455: LD_VAR 0 1
42459: PPUSH
42460: LD_VAR 0 2
42464: PPUSH
42465: LD_VAR 0 3
42469: PPUSH
42470: LD_VAR 0 4
42474: PPUSH
42475: CALL 41521 0 4
42479: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42480: LD_ADDR_VAR 0 11
42484: PUSH
42485: LD_VAR 0 1
42489: PPUSH
42490: LD_VAR 0 2
42494: PPUSH
42495: LD_VAR 0 12
42499: PUSH
42500: LD_INT 1
42502: ARRAY
42503: PPUSH
42504: LD_VAR 0 12
42508: PUSH
42509: LD_INT 2
42511: ARRAY
42512: PPUSH
42513: CALL_OW 298
42517: ST_TO_ADDR
// distance := 9999 ;
42518: LD_ADDR_VAR 0 10
42522: PUSH
42523: LD_INT 9999
42525: ST_TO_ADDR
// for i := 0 to 5 do
42526: LD_ADDR_VAR 0 6
42530: PUSH
42531: DOUBLE
42532: LD_INT 0
42534: DEC
42535: ST_TO_ADDR
42536: LD_INT 5
42538: PUSH
42539: FOR_TO
42540: IFFALSE 42683
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42542: LD_ADDR_VAR 0 7
42546: PUSH
42547: LD_VAR 0 1
42551: PPUSH
42552: LD_VAR 0 6
42556: PPUSH
42557: LD_VAR 0 11
42561: PPUSH
42562: CALL_OW 272
42566: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42567: LD_ADDR_VAR 0 8
42571: PUSH
42572: LD_VAR 0 2
42576: PPUSH
42577: LD_VAR 0 6
42581: PPUSH
42582: LD_VAR 0 11
42586: PPUSH
42587: CALL_OW 273
42591: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42592: LD_VAR 0 7
42596: PPUSH
42597: LD_VAR 0 8
42601: PPUSH
42602: CALL_OW 488
42606: NOT
42607: IFFALSE 42611
// continue ;
42609: GO 42539
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42611: LD_ADDR_VAR 0 9
42615: PUSH
42616: LD_VAR 0 12
42620: PUSH
42621: LD_INT 1
42623: ARRAY
42624: PPUSH
42625: LD_VAR 0 12
42629: PUSH
42630: LD_INT 2
42632: ARRAY
42633: PPUSH
42634: LD_VAR 0 7
42638: PPUSH
42639: LD_VAR 0 8
42643: PPUSH
42644: CALL_OW 298
42648: ST_TO_ADDR
// if tmp < distance then
42649: LD_VAR 0 9
42653: PUSH
42654: LD_VAR 0 10
42658: LESS
42659: IFFALSE 42681
// begin result := i ;
42661: LD_ADDR_VAR 0 5
42665: PUSH
42666: LD_VAR 0 6
42670: ST_TO_ADDR
// distance := tmp ;
42671: LD_ADDR_VAR 0 10
42675: PUSH
42676: LD_VAR 0 9
42680: ST_TO_ADDR
// end ; end ;
42681: GO 42539
42683: POP
42684: POP
// end ;
42685: LD_VAR 0 5
42689: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42690: LD_INT 0
42692: PPUSH
42693: PPUSH
// if not driver or not IsInUnit ( driver ) then
42694: LD_VAR 0 1
42698: NOT
42699: IFTRUE 42713
42701: PUSH
42702: LD_VAR 0 1
42706: PPUSH
42707: CALL_OW 310
42711: NOT
42712: OR
42713: IFFALSE 42717
// exit ;
42715: GO 42807
// vehicle := IsInUnit ( driver ) ;
42717: LD_ADDR_VAR 0 3
42721: PUSH
42722: LD_VAR 0 1
42726: PPUSH
42727: CALL_OW 310
42731: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42732: LD_VAR 0 1
42736: PPUSH
42737: LD_STRING \
42739: PUSH
42740: LD_INT 0
42742: PUSH
42743: LD_INT 0
42745: PUSH
42746: LD_INT 0
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: LD_INT 0
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: PUSH
42767: LD_STRING E
42769: PUSH
42770: LD_INT 0
42772: PUSH
42773: LD_INT 0
42775: PUSH
42776: LD_VAR 0 3
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: LD_INT 0
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PPUSH
42803: CALL_OW 446
// end ;
42807: LD_VAR 0 2
42811: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42812: LD_INT 0
42814: PPUSH
42815: PPUSH
// if not driver or not IsInUnit ( driver ) then
42816: LD_VAR 0 1
42820: NOT
42821: IFTRUE 42835
42823: PUSH
42824: LD_VAR 0 1
42828: PPUSH
42829: CALL_OW 310
42833: NOT
42834: OR
42835: IFFALSE 42839
// exit ;
42837: GO 42929
// vehicle := IsInUnit ( driver ) ;
42839: LD_ADDR_VAR 0 3
42843: PUSH
42844: LD_VAR 0 1
42848: PPUSH
42849: CALL_OW 310
42853: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42854: LD_VAR 0 1
42858: PPUSH
42859: LD_STRING \
42861: PUSH
42862: LD_INT 0
42864: PUSH
42865: LD_INT 0
42867: PUSH
42868: LD_INT 0
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: LD_INT 0
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: PUSH
42889: LD_STRING E
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: LD_VAR 0 3
42902: PUSH
42903: LD_INT 0
42905: PUSH
42906: LD_INT 0
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PPUSH
42925: CALL_OW 447
// end ;
42929: LD_VAR 0 2
42933: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42934: LD_INT 0
42936: PPUSH
42937: PPUSH
42938: PPUSH
// tmp := [ ] ;
42939: LD_ADDR_VAR 0 5
42943: PUSH
42944: EMPTY
42945: ST_TO_ADDR
// for i in units do
42946: LD_ADDR_VAR 0 4
42950: PUSH
42951: LD_VAR 0 1
42955: PUSH
42956: FOR_IN
42957: IFFALSE 42995
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42959: LD_ADDR_VAR 0 5
42963: PUSH
42964: LD_VAR 0 5
42968: PPUSH
42969: LD_VAR 0 5
42973: PUSH
42974: LD_INT 1
42976: PLUS
42977: PPUSH
42978: LD_VAR 0 4
42982: PPUSH
42983: CALL_OW 256
42987: PPUSH
42988: CALL_OW 2
42992: ST_TO_ADDR
42993: GO 42956
42995: POP
42996: POP
// if not tmp then
42997: LD_VAR 0 5
43001: NOT
43002: IFFALSE 43006
// exit ;
43004: GO 43054
// if asc then
43006: LD_VAR 0 2
43010: IFFALSE 43034
// result := SortListByListAsc ( units , tmp ) else
43012: LD_ADDR_VAR 0 3
43016: PUSH
43017: LD_VAR 0 1
43021: PPUSH
43022: LD_VAR 0 5
43026: PPUSH
43027: CALL_OW 76
43031: ST_TO_ADDR
43032: GO 43054
// result := SortListByListDesc ( units , tmp ) ;
43034: LD_ADDR_VAR 0 3
43038: PUSH
43039: LD_VAR 0 1
43043: PPUSH
43044: LD_VAR 0 5
43048: PPUSH
43049: CALL_OW 77
43053: ST_TO_ADDR
// end ;
43054: LD_VAR 0 3
43058: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43059: LD_INT 0
43061: PPUSH
43062: PPUSH
// task := GetTaskList ( mech ) ;
43063: LD_ADDR_VAR 0 4
43067: PUSH
43068: LD_VAR 0 1
43072: PPUSH
43073: CALL_OW 437
43077: ST_TO_ADDR
// if not task then
43078: LD_VAR 0 4
43082: NOT
43083: IFFALSE 43087
// exit ;
43085: GO 43131
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43087: LD_ADDR_VAR 0 3
43091: PUSH
43092: LD_VAR 0 4
43096: PUSH
43097: LD_INT 1
43099: ARRAY
43100: PUSH
43101: LD_INT 1
43103: ARRAY
43104: PUSH
43105: LD_STRING r
43107: EQUAL
43108: IFFALSE 43130
43110: PUSH
43111: LD_VAR 0 4
43115: PUSH
43116: LD_INT 1
43118: ARRAY
43119: PUSH
43120: LD_INT 4
43122: ARRAY
43123: PUSH
43124: LD_VAR 0 2
43128: EQUAL
43129: AND
43130: ST_TO_ADDR
// end ;
43131: LD_VAR 0 3
43135: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43136: LD_INT 0
43138: PPUSH
// SetDir ( unit , d ) ;
43139: LD_VAR 0 1
43143: PPUSH
43144: LD_VAR 0 4
43148: PPUSH
43149: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43153: LD_ADDR_VAR 0 6
43157: PUSH
43158: LD_VAR 0 1
43162: PPUSH
43163: LD_VAR 0 2
43167: PPUSH
43168: LD_VAR 0 3
43172: PPUSH
43173: LD_VAR 0 5
43177: PPUSH
43178: CALL_OW 48
43182: ST_TO_ADDR
// end ;
43183: LD_VAR 0 6
43187: RET
// export function ToNaturalNumber ( number ) ; begin
43188: LD_INT 0
43190: PPUSH
// result := number div 1 ;
43191: LD_ADDR_VAR 0 2
43195: PUSH
43196: LD_VAR 0 1
43200: PUSH
43201: LD_INT 1
43203: DIV
43204: ST_TO_ADDR
// if number < 0 then
43205: LD_VAR 0 1
43209: PUSH
43210: LD_INT 0
43212: LESS
43213: IFFALSE 43223
// result := 0 ;
43215: LD_ADDR_VAR 0 2
43219: PUSH
43220: LD_INT 0
43222: ST_TO_ADDR
// end ;
43223: LD_VAR 0 2
43227: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
43228: LD_INT 0
43230: PPUSH
43231: PPUSH
43232: PPUSH
// if not buildings then
43233: LD_VAR 0 1
43237: NOT
43238: IFFALSE 43242
// exit ;
43240: GO 43357
// tmp := [ ] ;
43242: LD_ADDR_VAR 0 5
43246: PUSH
43247: EMPTY
43248: ST_TO_ADDR
// for b in buildings do
43249: LD_ADDR_VAR 0 4
43253: PUSH
43254: LD_VAR 0 1
43258: PUSH
43259: FOR_IN
43260: IFFALSE 43298
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
43262: LD_ADDR_VAR 0 5
43266: PUSH
43267: LD_VAR 0 5
43271: PPUSH
43272: LD_VAR 0 5
43276: PUSH
43277: LD_INT 1
43279: PLUS
43280: PPUSH
43281: LD_VAR 0 4
43285: PPUSH
43286: CALL_OW 266
43290: PPUSH
43291: CALL_OW 1
43295: ST_TO_ADDR
43296: GO 43259
43298: POP
43299: POP
// if not tmp then
43300: LD_VAR 0 5
43304: NOT
43305: IFFALSE 43309
// exit ;
43307: GO 43357
// if asc then
43309: LD_VAR 0 2
43313: IFFALSE 43337
// result := SortListByListAsc ( buildings , tmp ) else
43315: LD_ADDR_VAR 0 3
43319: PUSH
43320: LD_VAR 0 1
43324: PPUSH
43325: LD_VAR 0 5
43329: PPUSH
43330: CALL_OW 76
43334: ST_TO_ADDR
43335: GO 43357
// result := SortListByListDesc ( buildings , tmp ) ;
43337: LD_ADDR_VAR 0 3
43341: PUSH
43342: LD_VAR 0 1
43346: PPUSH
43347: LD_VAR 0 5
43351: PPUSH
43352: CALL_OW 77
43356: ST_TO_ADDR
// end ;
43357: LD_VAR 0 3
43361: RET
// export function SortByClass ( units , class ) ; var un ; begin
43362: LD_INT 0
43364: PPUSH
43365: PPUSH
// if not units or not class then
43366: LD_VAR 0 1
43370: NOT
43371: IFTRUE 43380
43373: PUSH
43374: LD_VAR 0 2
43378: NOT
43379: OR
43380: IFFALSE 43384
// exit ;
43382: GO 43479
// result := [ ] ;
43384: LD_ADDR_VAR 0 3
43388: PUSH
43389: EMPTY
43390: ST_TO_ADDR
// for un in units do
43391: LD_ADDR_VAR 0 4
43395: PUSH
43396: LD_VAR 0 1
43400: PUSH
43401: FOR_IN
43402: IFFALSE 43477
// if GetClass ( un ) = class then
43404: LD_VAR 0 4
43408: PPUSH
43409: CALL_OW 257
43413: PUSH
43414: LD_VAR 0 2
43418: EQUAL
43419: IFFALSE 43446
// result := Insert ( result , 1 , un ) else
43421: LD_ADDR_VAR 0 3
43425: PUSH
43426: LD_VAR 0 3
43430: PPUSH
43431: LD_INT 1
43433: PPUSH
43434: LD_VAR 0 4
43438: PPUSH
43439: CALL_OW 2
43443: ST_TO_ADDR
43444: GO 43475
// result := Replace ( result , result + 1 , un ) ;
43446: LD_ADDR_VAR 0 3
43450: PUSH
43451: LD_VAR 0 3
43455: PPUSH
43456: LD_VAR 0 3
43460: PUSH
43461: LD_INT 1
43463: PLUS
43464: PPUSH
43465: LD_VAR 0 4
43469: PPUSH
43470: CALL_OW 1
43474: ST_TO_ADDR
43475: GO 43401
43477: POP
43478: POP
// end ;
43479: LD_VAR 0 3
43483: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43484: LD_INT 0
43486: PPUSH
43487: PPUSH
43488: PPUSH
43489: PPUSH
43490: PPUSH
43491: PPUSH
43492: PPUSH
// result := [ ] ;
43493: LD_ADDR_VAR 0 4
43497: PUSH
43498: EMPTY
43499: ST_TO_ADDR
// if x - r < 0 then
43500: LD_VAR 0 1
43504: PUSH
43505: LD_VAR 0 3
43509: MINUS
43510: PUSH
43511: LD_INT 0
43513: LESS
43514: IFFALSE 43526
// min_x := 0 else
43516: LD_ADDR_VAR 0 8
43520: PUSH
43521: LD_INT 0
43523: ST_TO_ADDR
43524: GO 43542
// min_x := x - r ;
43526: LD_ADDR_VAR 0 8
43530: PUSH
43531: LD_VAR 0 1
43535: PUSH
43536: LD_VAR 0 3
43540: MINUS
43541: ST_TO_ADDR
// if y - r < 0 then
43542: LD_VAR 0 2
43546: PUSH
43547: LD_VAR 0 3
43551: MINUS
43552: PUSH
43553: LD_INT 0
43555: LESS
43556: IFFALSE 43568
// min_y := 0 else
43558: LD_ADDR_VAR 0 7
43562: PUSH
43563: LD_INT 0
43565: ST_TO_ADDR
43566: GO 43584
// min_y := y - r ;
43568: LD_ADDR_VAR 0 7
43572: PUSH
43573: LD_VAR 0 2
43577: PUSH
43578: LD_VAR 0 3
43582: MINUS
43583: ST_TO_ADDR
// max_x := x + r ;
43584: LD_ADDR_VAR 0 9
43588: PUSH
43589: LD_VAR 0 1
43593: PUSH
43594: LD_VAR 0 3
43598: PLUS
43599: ST_TO_ADDR
// max_y := y + r ;
43600: LD_ADDR_VAR 0 10
43604: PUSH
43605: LD_VAR 0 2
43609: PUSH
43610: LD_VAR 0 3
43614: PLUS
43615: ST_TO_ADDR
// for _x = min_x to max_x do
43616: LD_ADDR_VAR 0 5
43620: PUSH
43621: DOUBLE
43622: LD_VAR 0 8
43626: DEC
43627: ST_TO_ADDR
43628: LD_VAR 0 9
43632: PUSH
43633: FOR_TO
43634: IFFALSE 43735
// for _y = min_y to max_y do
43636: LD_ADDR_VAR 0 6
43640: PUSH
43641: DOUBLE
43642: LD_VAR 0 7
43646: DEC
43647: ST_TO_ADDR
43648: LD_VAR 0 10
43652: PUSH
43653: FOR_TO
43654: IFFALSE 43731
// begin if not ValidHex ( _x , _y ) then
43656: LD_VAR 0 5
43660: PPUSH
43661: LD_VAR 0 6
43665: PPUSH
43666: CALL_OW 488
43670: NOT
43671: IFFALSE 43675
// continue ;
43673: GO 43653
// if GetResourceTypeXY ( _x , _y ) then
43675: LD_VAR 0 5
43679: PPUSH
43680: LD_VAR 0 6
43684: PPUSH
43685: CALL_OW 283
43689: IFFALSE 43729
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43691: LD_ADDR_VAR 0 4
43695: PUSH
43696: LD_VAR 0 4
43700: PPUSH
43701: LD_VAR 0 4
43705: PUSH
43706: LD_INT 1
43708: PLUS
43709: PPUSH
43710: LD_VAR 0 5
43714: PUSH
43715: LD_VAR 0 6
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PPUSH
43724: CALL_OW 1
43728: ST_TO_ADDR
// end ;
43729: GO 43653
43731: POP
43732: POP
43733: GO 43633
43735: POP
43736: POP
// end ;
43737: LD_VAR 0 4
43741: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43742: LD_INT 0
43744: PPUSH
43745: PPUSH
43746: PPUSH
43747: PPUSH
43748: PPUSH
43749: PPUSH
43750: PPUSH
43751: PPUSH
// if not units then
43752: LD_VAR 0 1
43756: NOT
43757: IFFALSE 43761
// exit ;
43759: GO 44293
// result := UnitFilter ( units , [ f_ok ] ) ;
43761: LD_ADDR_VAR 0 3
43765: PUSH
43766: LD_VAR 0 1
43770: PPUSH
43771: LD_INT 50
43773: PUSH
43774: EMPTY
43775: LIST
43776: PPUSH
43777: CALL_OW 72
43781: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43782: LD_ADDR_VAR 0 8
43786: PUSH
43787: LD_VAR 0 1
43791: PUSH
43792: LD_INT 1
43794: ARRAY
43795: PPUSH
43796: CALL_OW 255
43800: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43801: LD_ADDR_VAR 0 10
43805: PUSH
43806: LD_INT 29
43808: PUSH
43809: LD_INT 91
43811: PUSH
43812: LD_INT 49
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: LIST
43819: ST_TO_ADDR
// if not result then
43820: LD_VAR 0 3
43824: NOT
43825: IFFALSE 43829
// exit ;
43827: GO 44293
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43829: LD_ADDR_VAR 0 5
43833: PUSH
43834: LD_INT 81
43836: PUSH
43837: LD_VAR 0 8
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PPUSH
43846: CALL_OW 69
43850: ST_TO_ADDR
// for i in result do
43851: LD_ADDR_VAR 0 4
43855: PUSH
43856: LD_VAR 0 3
43860: PUSH
43861: FOR_IN
43862: IFFALSE 44291
// begin tag := GetTag ( i ) + 1 ;
43864: LD_ADDR_VAR 0 9
43868: PUSH
43869: LD_VAR 0 4
43873: PPUSH
43874: CALL_OW 110
43878: PUSH
43879: LD_INT 1
43881: PLUS
43882: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43883: LD_ADDR_VAR 0 7
43887: PUSH
43888: LD_VAR 0 4
43892: PPUSH
43893: CALL_OW 250
43897: PPUSH
43898: LD_VAR 0 4
43902: PPUSH
43903: CALL_OW 251
43907: PPUSH
43908: LD_INT 4
43910: PPUSH
43911: CALL 43484 0 3
43915: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43916: LD_VAR 0 4
43920: PPUSH
43921: CALL_OW 247
43925: PUSH
43926: LD_INT 2
43928: EQUAL
43929: IFFALSE 43941
43931: PUSH
43932: LD_VAR 0 7
43936: PUSH
43937: LD_INT 2
43939: GREATER
43940: AND
43941: IFFALSE 43961
43943: PUSH
43944: LD_VAR 0 4
43948: PPUSH
43949: CALL_OW 264
43953: PUSH
43954: LD_VAR 0 10
43958: IN
43959: NOT
43960: AND
43961: IFFALSE 44000
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43963: LD_VAR 0 4
43967: PPUSH
43968: LD_VAR 0 7
43972: PUSH
43973: LD_INT 1
43975: ARRAY
43976: PUSH
43977: LD_INT 1
43979: ARRAY
43980: PPUSH
43981: LD_VAR 0 7
43985: PUSH
43986: LD_INT 1
43988: ARRAY
43989: PUSH
43990: LD_INT 2
43992: ARRAY
43993: PPUSH
43994: CALL_OW 116
43998: GO 44289
// if path > tag then
44000: LD_VAR 0 2
44004: PUSH
44005: LD_VAR 0 9
44009: GREATER
44010: IFFALSE 44218
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44012: LD_ADDR_VAR 0 6
44016: PUSH
44017: LD_VAR 0 5
44021: PPUSH
44022: LD_INT 91
44024: PUSH
44025: LD_VAR 0 4
44029: PUSH
44030: LD_INT 8
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: LIST
44037: PPUSH
44038: CALL_OW 72
44042: ST_TO_ADDR
// if nearEnemy then
44043: LD_VAR 0 6
44047: IFFALSE 44116
// begin if GetWeapon ( i ) = ru_time_lapser then
44049: LD_VAR 0 4
44053: PPUSH
44054: CALL_OW 264
44058: PUSH
44059: LD_INT 49
44061: EQUAL
44062: IFFALSE 44090
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44064: LD_VAR 0 4
44068: PPUSH
44069: LD_VAR 0 6
44073: PPUSH
44074: LD_VAR 0 4
44078: PPUSH
44079: CALL_OW 74
44083: PPUSH
44084: CALL_OW 112
44088: GO 44114
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44090: LD_VAR 0 4
44094: PPUSH
44095: LD_VAR 0 6
44099: PPUSH
44100: LD_VAR 0 4
44104: PPUSH
44105: CALL_OW 74
44109: PPUSH
44110: CALL 45374 0 2
// end else
44114: GO 44216
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44116: LD_VAR 0 4
44120: PPUSH
44121: LD_VAR 0 2
44125: PUSH
44126: LD_VAR 0 9
44130: ARRAY
44131: PUSH
44132: LD_INT 1
44134: ARRAY
44135: PPUSH
44136: LD_VAR 0 2
44140: PUSH
44141: LD_VAR 0 9
44145: ARRAY
44146: PUSH
44147: LD_INT 2
44149: ARRAY
44150: PPUSH
44151: CALL_OW 297
44155: PUSH
44156: LD_INT 6
44158: GREATER
44159: IFFALSE 44202
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44161: LD_VAR 0 4
44165: PPUSH
44166: LD_VAR 0 2
44170: PUSH
44171: LD_VAR 0 9
44175: ARRAY
44176: PUSH
44177: LD_INT 1
44179: ARRAY
44180: PPUSH
44181: LD_VAR 0 2
44185: PUSH
44186: LD_VAR 0 9
44190: ARRAY
44191: PUSH
44192: LD_INT 2
44194: ARRAY
44195: PPUSH
44196: CALL_OW 114
44200: GO 44216
// SetTag ( i , tag ) ;
44202: LD_VAR 0 4
44206: PPUSH
44207: LD_VAR 0 9
44211: PPUSH
44212: CALL_OW 109
// end else
44216: GO 44289
// if enemy then
44218: LD_VAR 0 5
44222: IFFALSE 44289
// begin if GetWeapon ( i ) = ru_time_lapser then
44224: LD_VAR 0 4
44228: PPUSH
44229: CALL_OW 264
44233: PUSH
44234: LD_INT 49
44236: EQUAL
44237: IFFALSE 44265
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44239: LD_VAR 0 4
44243: PPUSH
44244: LD_VAR 0 5
44248: PPUSH
44249: LD_VAR 0 4
44253: PPUSH
44254: CALL_OW 74
44258: PPUSH
44259: CALL_OW 112
44263: GO 44289
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44265: LD_VAR 0 4
44269: PPUSH
44270: LD_VAR 0 5
44274: PPUSH
44275: LD_VAR 0 4
44279: PPUSH
44280: CALL_OW 74
44284: PPUSH
44285: CALL 45374 0 2
// end ; end ;
44289: GO 43861
44291: POP
44292: POP
// end ;
44293: LD_VAR 0 3
44297: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44298: LD_INT 0
44300: PPUSH
44301: PPUSH
44302: PPUSH
// if not unit or IsInUnit ( unit ) then
44303: LD_VAR 0 1
44307: NOT
44308: IFTRUE 44321
44310: PUSH
44311: LD_VAR 0 1
44315: PPUSH
44316: CALL_OW 310
44320: OR
44321: IFFALSE 44325
// exit ;
44323: GO 44416
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44325: LD_ADDR_VAR 0 4
44329: PUSH
44330: LD_VAR 0 1
44334: PPUSH
44335: CALL_OW 250
44339: PPUSH
44340: LD_VAR 0 2
44344: PPUSH
44345: LD_INT 1
44347: PPUSH
44348: CALL_OW 272
44352: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44353: LD_ADDR_VAR 0 5
44357: PUSH
44358: LD_VAR 0 1
44362: PPUSH
44363: CALL_OW 251
44367: PPUSH
44368: LD_VAR 0 2
44372: PPUSH
44373: LD_INT 1
44375: PPUSH
44376: CALL_OW 273
44380: ST_TO_ADDR
// if ValidHex ( x , y ) then
44381: LD_VAR 0 4
44385: PPUSH
44386: LD_VAR 0 5
44390: PPUSH
44391: CALL_OW 488
44395: IFFALSE 44416
// ComTurnXY ( unit , x , y ) ;
44397: LD_VAR 0 1
44401: PPUSH
44402: LD_VAR 0 4
44406: PPUSH
44407: LD_VAR 0 5
44411: PPUSH
44412: CALL_OW 118
// end ;
44416: LD_VAR 0 3
44420: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44421: LD_INT 0
44423: PPUSH
44424: PPUSH
// result := false ;
44425: LD_ADDR_VAR 0 3
44429: PUSH
44430: LD_INT 0
44432: ST_TO_ADDR
// if not units then
44433: LD_VAR 0 2
44437: NOT
44438: IFFALSE 44442
// exit ;
44440: GO 44487
// for i in units do
44442: LD_ADDR_VAR 0 4
44446: PUSH
44447: LD_VAR 0 2
44451: PUSH
44452: FOR_IN
44453: IFFALSE 44485
// if See ( side , i ) then
44455: LD_VAR 0 1
44459: PPUSH
44460: LD_VAR 0 4
44464: PPUSH
44465: CALL_OW 292
44469: IFFALSE 44483
// begin result := true ;
44471: LD_ADDR_VAR 0 3
44475: PUSH
44476: LD_INT 1
44478: ST_TO_ADDR
// exit ;
44479: POP
44480: POP
44481: GO 44487
// end ;
44483: GO 44452
44485: POP
44486: POP
// end ;
44487: LD_VAR 0 3
44491: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44492: LD_INT 0
44494: PPUSH
44495: PPUSH
44496: PPUSH
44497: PPUSH
// if not unit or not points then
44498: LD_VAR 0 1
44502: NOT
44503: IFTRUE 44512
44505: PUSH
44506: LD_VAR 0 2
44510: NOT
44511: OR
44512: IFFALSE 44516
// exit ;
44514: GO 44606
// dist := 99999 ;
44516: LD_ADDR_VAR 0 5
44520: PUSH
44521: LD_INT 99999
44523: ST_TO_ADDR
// for i in points do
44524: LD_ADDR_VAR 0 4
44528: PUSH
44529: LD_VAR 0 2
44533: PUSH
44534: FOR_IN
44535: IFFALSE 44604
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44537: LD_ADDR_VAR 0 6
44541: PUSH
44542: LD_VAR 0 1
44546: PPUSH
44547: LD_VAR 0 4
44551: PUSH
44552: LD_INT 1
44554: ARRAY
44555: PPUSH
44556: LD_VAR 0 4
44560: PUSH
44561: LD_INT 2
44563: ARRAY
44564: PPUSH
44565: CALL_OW 297
44569: ST_TO_ADDR
// if tmpDist < dist then
44570: LD_VAR 0 6
44574: PUSH
44575: LD_VAR 0 5
44579: LESS
44580: IFFALSE 44602
// begin result := i ;
44582: LD_ADDR_VAR 0 3
44586: PUSH
44587: LD_VAR 0 4
44591: ST_TO_ADDR
// dist := tmpDist ;
44592: LD_ADDR_VAR 0 5
44596: PUSH
44597: LD_VAR 0 6
44601: ST_TO_ADDR
// end ; end ;
44602: GO 44534
44604: POP
44605: POP
// end ;
44606: LD_VAR 0 3
44610: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44611: LD_INT 0
44613: PPUSH
// uc_side := side ;
44614: LD_ADDR_OWVAR 20
44618: PUSH
44619: LD_VAR 0 1
44623: ST_TO_ADDR
// uc_nation := 3 ;
44624: LD_ADDR_OWVAR 21
44628: PUSH
44629: LD_INT 3
44631: ST_TO_ADDR
// vc_chassis := 25 ;
44632: LD_ADDR_OWVAR 37
44636: PUSH
44637: LD_INT 25
44639: ST_TO_ADDR
// vc_engine := engine_siberite ;
44640: LD_ADDR_OWVAR 39
44644: PUSH
44645: LD_INT 3
44647: ST_TO_ADDR
// vc_control := control_computer ;
44648: LD_ADDR_OWVAR 38
44652: PUSH
44653: LD_INT 3
44655: ST_TO_ADDR
// vc_weapon := 59 ;
44656: LD_ADDR_OWVAR 40
44660: PUSH
44661: LD_INT 59
44663: ST_TO_ADDR
// result := CreateVehicle ;
44664: LD_ADDR_VAR 0 5
44668: PUSH
44669: CALL_OW 45
44673: ST_TO_ADDR
// SetDir ( result , d ) ;
44674: LD_VAR 0 5
44678: PPUSH
44679: LD_VAR 0 4
44683: PPUSH
44684: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44688: LD_VAR 0 5
44692: PPUSH
44693: LD_VAR 0 2
44697: PPUSH
44698: LD_VAR 0 3
44702: PPUSH
44703: LD_INT 0
44705: PPUSH
44706: CALL_OW 48
// end ;
44710: LD_VAR 0 5
44714: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44715: LD_INT 0
44717: PPUSH
44718: PPUSH
44719: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44720: LD_ADDR_VAR 0 2
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: LD_INT 0
44730: PUSH
44731: LD_INT 0
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44743: LD_VAR 0 1
44747: NOT
44748: IFTRUE 44781
44750: PUSH
44751: LD_VAR 0 1
44755: PPUSH
44756: CALL_OW 264
44760: PUSH
44761: LD_INT 12
44763: PUSH
44764: LD_INT 51
44766: PUSH
44767: LD_INT 32
44769: PUSH
44770: LD_INT 89
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: IN
44779: NOT
44780: OR
44781: IFFALSE 44785
// exit ;
44783: GO 44883
// for i := 1 to 3 do
44785: LD_ADDR_VAR 0 3
44789: PUSH
44790: DOUBLE
44791: LD_INT 1
44793: DEC
44794: ST_TO_ADDR
44795: LD_INT 3
44797: PUSH
44798: FOR_TO
44799: IFFALSE 44881
// begin tmp := GetCargo ( cargo , i ) ;
44801: LD_ADDR_VAR 0 4
44805: PUSH
44806: LD_VAR 0 1
44810: PPUSH
44811: LD_VAR 0 3
44815: PPUSH
44816: CALL_OW 289
44820: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44821: LD_ADDR_VAR 0 2
44825: PUSH
44826: LD_VAR 0 2
44830: PPUSH
44831: LD_VAR 0 3
44835: PPUSH
44836: LD_VAR 0 4
44840: PPUSH
44841: CALL_OW 1
44845: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44846: LD_ADDR_VAR 0 2
44850: PUSH
44851: LD_VAR 0 2
44855: PPUSH
44856: LD_INT 4
44858: PPUSH
44859: LD_VAR 0 2
44863: PUSH
44864: LD_INT 4
44866: ARRAY
44867: PUSH
44868: LD_VAR 0 4
44872: PLUS
44873: PPUSH
44874: CALL_OW 1
44878: ST_TO_ADDR
// end ;
44879: GO 44798
44881: POP
44882: POP
// end ;
44883: LD_VAR 0 2
44887: RET
// export function Length ( array ) ; begin
44888: LD_INT 0
44890: PPUSH
// result := array + 0 ;
44891: LD_ADDR_VAR 0 2
44895: PUSH
44896: LD_VAR 0 1
44900: PUSH
44901: LD_INT 0
44903: PLUS
44904: ST_TO_ADDR
// end ;
44905: LD_VAR 0 2
44909: RET
// export function PrepareArray ( array ) ; begin
44910: LD_INT 0
44912: PPUSH
// result := array diff 0 ;
44913: LD_ADDR_VAR 0 2
44917: PUSH
44918: LD_VAR 0 1
44922: PUSH
44923: LD_INT 0
44925: DIFF
44926: ST_TO_ADDR
// if not result [ 1 ] then
44927: LD_VAR 0 2
44931: PUSH
44932: LD_INT 1
44934: ARRAY
44935: NOT
44936: IFFALSE 44956
// result := Delete ( result , 1 ) ;
44938: LD_ADDR_VAR 0 2
44942: PUSH
44943: LD_VAR 0 2
44947: PPUSH
44948: LD_INT 1
44950: PPUSH
44951: CALL_OW 3
44955: ST_TO_ADDR
// end ;
44956: LD_VAR 0 2
44960: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44961: LD_INT 0
44963: PPUSH
44964: PPUSH
44965: PPUSH
44966: PPUSH
// sibRocketRange := 25 ;
44967: LD_ADDR_VAR 0 6
44971: PUSH
44972: LD_INT 25
44974: ST_TO_ADDR
// result := false ;
44975: LD_ADDR_VAR 0 4
44979: PUSH
44980: LD_INT 0
44982: ST_TO_ADDR
// for i := 0 to 5 do
44983: LD_ADDR_VAR 0 5
44987: PUSH
44988: DOUBLE
44989: LD_INT 0
44991: DEC
44992: ST_TO_ADDR
44993: LD_INT 5
44995: PUSH
44996: FOR_TO
44997: IFFALSE 45064
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44999: LD_VAR 0 1
45003: PPUSH
45004: LD_VAR 0 5
45008: PPUSH
45009: LD_VAR 0 6
45013: PPUSH
45014: CALL_OW 272
45018: PPUSH
45019: LD_VAR 0 2
45023: PPUSH
45024: LD_VAR 0 5
45028: PPUSH
45029: LD_VAR 0 6
45033: PPUSH
45034: CALL_OW 273
45038: PPUSH
45039: LD_VAR 0 3
45043: PPUSH
45044: CALL_OW 309
45048: IFFALSE 45062
// begin result := true ;
45050: LD_ADDR_VAR 0 4
45054: PUSH
45055: LD_INT 1
45057: ST_TO_ADDR
// exit ;
45058: POP
45059: POP
45060: GO 45066
// end ;
45062: GO 44996
45064: POP
45065: POP
// end ;
45066: LD_VAR 0 4
45070: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45071: LD_INT 0
45073: PPUSH
45074: PPUSH
45075: PPUSH
// if btype = b_depot then
45076: LD_VAR 0 2
45080: PUSH
45081: LD_INT 0
45083: EQUAL
45084: IFFALSE 45096
// begin result := true ;
45086: LD_ADDR_VAR 0 3
45090: PUSH
45091: LD_INT 1
45093: ST_TO_ADDR
// exit ;
45094: GO 45216
// end ; pom := GetBase ( depot ) ;
45096: LD_ADDR_VAR 0 4
45100: PUSH
45101: LD_VAR 0 1
45105: PPUSH
45106: CALL_OW 274
45110: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45111: LD_ADDR_VAR 0 5
45115: PUSH
45116: LD_VAR 0 2
45120: PPUSH
45121: LD_VAR 0 1
45125: PPUSH
45126: CALL_OW 248
45130: PPUSH
45131: CALL_OW 450
45135: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45136: LD_ADDR_VAR 0 3
45140: PUSH
45141: LD_VAR 0 4
45145: PPUSH
45146: LD_INT 1
45148: PPUSH
45149: CALL_OW 275
45153: PUSH
45154: LD_VAR 0 5
45158: PUSH
45159: LD_INT 1
45161: ARRAY
45162: GREATEREQUAL
45163: IFFALSE 45189
45165: PUSH
45166: LD_VAR 0 4
45170: PPUSH
45171: LD_INT 2
45173: PPUSH
45174: CALL_OW 275
45178: PUSH
45179: LD_VAR 0 5
45183: PUSH
45184: LD_INT 2
45186: ARRAY
45187: GREATEREQUAL
45188: AND
45189: IFFALSE 45215
45191: PUSH
45192: LD_VAR 0 4
45196: PPUSH
45197: LD_INT 3
45199: PPUSH
45200: CALL_OW 275
45204: PUSH
45205: LD_VAR 0 5
45209: PUSH
45210: LD_INT 3
45212: ARRAY
45213: GREATEREQUAL
45214: AND
45215: ST_TO_ADDR
// end ;
45216: LD_VAR 0 3
45220: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45221: LD_INT 0
45223: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45224: LD_VAR 0 1
45228: PPUSH
45229: LD_VAR 0 2
45233: PPUSH
45234: LD_INT 0
45236: PPUSH
45237: LD_INT 0
45239: PPUSH
45240: LD_INT 1
45242: PPUSH
45243: LD_INT 0
45245: PPUSH
45246: CALL_OW 587
// end ;
45250: LD_VAR 0 3
45254: RET
// export function CenterOnNow ( unit ) ; begin
45255: LD_INT 0
45257: PPUSH
// result := IsInUnit ( unit ) ;
45258: LD_ADDR_VAR 0 2
45262: PUSH
45263: LD_VAR 0 1
45267: PPUSH
45268: CALL_OW 310
45272: ST_TO_ADDR
// if not result then
45273: LD_VAR 0 2
45277: NOT
45278: IFFALSE 45290
// result := unit ;
45280: LD_ADDR_VAR 0 2
45284: PUSH
45285: LD_VAR 0 1
45289: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45290: LD_VAR 0 1
45294: PPUSH
45295: CALL_OW 87
// end ;
45299: LD_VAR 0 2
45303: RET
// export function ComMoveHex ( unit , hex ) ; begin
45304: LD_INT 0
45306: PPUSH
// if not hex then
45307: LD_VAR 0 2
45311: NOT
45312: IFFALSE 45316
// exit ;
45314: GO 45369
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
45316: LD_VAR 0 2
45320: PUSH
45321: LD_INT 1
45323: ARRAY
45324: PPUSH
45325: LD_VAR 0 2
45329: PUSH
45330: LD_INT 2
45332: ARRAY
45333: PPUSH
45334: CALL_OW 428
45338: IFFALSE 45342
// exit ;
45340: GO 45369
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45342: LD_VAR 0 1
45346: PPUSH
45347: LD_VAR 0 2
45351: PUSH
45352: LD_INT 1
45354: ARRAY
45355: PPUSH
45356: LD_VAR 0 2
45360: PUSH
45361: LD_INT 2
45363: ARRAY
45364: PPUSH
45365: CALL_OW 111
// end ;
45369: LD_VAR 0 3
45373: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45374: LD_INT 0
45376: PPUSH
45377: PPUSH
45378: PPUSH
// if not unit or not enemy then
45379: LD_VAR 0 1
45383: NOT
45384: IFTRUE 45393
45386: PUSH
45387: LD_VAR 0 2
45391: NOT
45392: OR
45393: IFFALSE 45397
// exit ;
45395: GO 45523
// x := GetX ( enemy ) ;
45397: LD_ADDR_VAR 0 4
45401: PUSH
45402: LD_VAR 0 2
45406: PPUSH
45407: CALL_OW 250
45411: ST_TO_ADDR
// y := GetY ( enemy ) ;
45412: LD_ADDR_VAR 0 5
45416: PUSH
45417: LD_VAR 0 2
45421: PPUSH
45422: CALL_OW 251
45426: ST_TO_ADDR
// if ValidHex ( x , y ) then
45427: LD_VAR 0 4
45431: PPUSH
45432: LD_VAR 0 5
45436: PPUSH
45437: CALL_OW 488
45441: IFFALSE 45523
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45443: LD_VAR 0 2
45447: PPUSH
45448: CALL_OW 247
45452: PUSH
45453: LD_INT 3
45455: PUSH
45456: LD_INT 2
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: IN
45463: IFTRUE 45486
45465: PUSH
45466: LD_VAR 0 1
45470: PPUSH
45471: CALL_OW 255
45475: PPUSH
45476: LD_VAR 0 2
45480: PPUSH
45481: CALL_OW 292
45485: OR
45486: IFFALSE 45504
// ComAttackUnit ( unit , enemy ) else
45488: LD_VAR 0 1
45492: PPUSH
45493: LD_VAR 0 2
45497: PPUSH
45498: CALL_OW 115
45502: GO 45523
// ComAgressiveMove ( unit , x , y ) ;
45504: LD_VAR 0 1
45508: PPUSH
45509: LD_VAR 0 4
45513: PPUSH
45514: LD_VAR 0 5
45518: PPUSH
45519: CALL_OW 114
// end ;
45523: LD_VAR 0 3
45527: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45528: LD_INT 0
45530: PPUSH
45531: PPUSH
45532: PPUSH
// list := AreaToList ( area , 0 ) ;
45533: LD_ADDR_VAR 0 5
45537: PUSH
45538: LD_VAR 0 1
45542: PPUSH
45543: LD_INT 0
45545: PPUSH
45546: CALL_OW 517
45550: ST_TO_ADDR
// if not list then
45551: LD_VAR 0 5
45555: NOT
45556: IFFALSE 45560
// exit ;
45558: GO 45690
// if all then
45560: LD_VAR 0 2
45564: IFFALSE 45652
// begin for i := 1 to list [ 1 ] do
45566: LD_ADDR_VAR 0 4
45570: PUSH
45571: DOUBLE
45572: LD_INT 1
45574: DEC
45575: ST_TO_ADDR
45576: LD_VAR 0 5
45580: PUSH
45581: LD_INT 1
45583: ARRAY
45584: PUSH
45585: FOR_TO
45586: IFFALSE 45648
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45588: LD_ADDR_VAR 0 3
45592: PUSH
45593: LD_VAR 0 3
45597: PPUSH
45598: LD_VAR 0 3
45602: PUSH
45603: LD_INT 1
45605: PLUS
45606: PPUSH
45607: LD_VAR 0 5
45611: PUSH
45612: LD_INT 1
45614: ARRAY
45615: PUSH
45616: LD_VAR 0 4
45620: ARRAY
45621: PUSH
45622: LD_VAR 0 5
45626: PUSH
45627: LD_INT 2
45629: ARRAY
45630: PUSH
45631: LD_VAR 0 4
45635: ARRAY
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PPUSH
45641: CALL_OW 1
45645: ST_TO_ADDR
45646: GO 45585
45648: POP
45649: POP
// exit ;
45650: GO 45690
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45652: LD_ADDR_VAR 0 3
45656: PUSH
45657: LD_VAR 0 5
45661: PUSH
45662: LD_INT 1
45664: ARRAY
45665: PUSH
45666: LD_INT 1
45668: ARRAY
45669: PUSH
45670: LD_VAR 0 5
45674: PUSH
45675: LD_INT 2
45677: ARRAY
45678: PUSH
45679: LD_INT 1
45681: ARRAY
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: EMPTY
45688: LIST
45689: ST_TO_ADDR
// end ;
45690: LD_VAR 0 3
45694: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45695: LD_INT 0
45697: PPUSH
45698: PPUSH
// list := AreaToList ( area , 0 ) ;
45699: LD_ADDR_VAR 0 4
45703: PUSH
45704: LD_VAR 0 1
45708: PPUSH
45709: LD_INT 0
45711: PPUSH
45712: CALL_OW 517
45716: ST_TO_ADDR
// if not list then
45717: LD_VAR 0 4
45721: NOT
45722: IFFALSE 45726
// exit ;
45724: GO 45767
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45726: LD_ADDR_VAR 0 3
45730: PUSH
45731: LD_VAR 0 4
45735: PUSH
45736: LD_INT 1
45738: ARRAY
45739: PUSH
45740: LD_INT 1
45742: ARRAY
45743: PUSH
45744: LD_VAR 0 4
45748: PUSH
45749: LD_INT 2
45751: ARRAY
45752: PUSH
45753: LD_INT 1
45755: ARRAY
45756: PUSH
45757: LD_VAR 0 2
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: LIST
45766: ST_TO_ADDR
// end ;
45767: LD_VAR 0 3
45771: RET
// export function First ( array ) ; begin
45772: LD_INT 0
45774: PPUSH
// if not array then
45775: LD_VAR 0 1
45779: NOT
45780: IFFALSE 45784
// exit ;
45782: GO 45798
// result := array [ 1 ] ;
45784: LD_ADDR_VAR 0 2
45788: PUSH
45789: LD_VAR 0 1
45793: PUSH
45794: LD_INT 1
45796: ARRAY
45797: ST_TO_ADDR
// end ;
45798: LD_VAR 0 2
45802: RET
// export function Last ( array ) ; begin
45803: LD_INT 0
45805: PPUSH
// if not array then
45806: LD_VAR 0 1
45810: NOT
45811: IFFALSE 45815
// exit ;
45813: GO 45831
// result := array [ array ] ;
45815: LD_ADDR_VAR 0 2
45819: PUSH
45820: LD_VAR 0 1
45824: PUSH
45825: LD_VAR 0 1
45829: ARRAY
45830: ST_TO_ADDR
// end ;
45831: LD_VAR 0 2
45835: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45836: LD_INT 0
45838: PPUSH
45839: PPUSH
// result := [ ] ;
45840: LD_ADDR_VAR 0 5
45844: PUSH
45845: EMPTY
45846: ST_TO_ADDR
// if not array then
45847: LD_VAR 0 1
45851: NOT
45852: IFFALSE 45856
// exit ;
45854: GO 45968
// for i := 1 to array do
45856: LD_ADDR_VAR 0 6
45860: PUSH
45861: DOUBLE
45862: LD_INT 1
45864: DEC
45865: ST_TO_ADDR
45866: LD_VAR 0 1
45870: PUSH
45871: FOR_TO
45872: IFFALSE 45966
// if array [ i ] [ index ] = value then
45874: LD_VAR 0 1
45878: PUSH
45879: LD_VAR 0 6
45883: ARRAY
45884: PUSH
45885: LD_VAR 0 2
45889: ARRAY
45890: PUSH
45891: LD_VAR 0 3
45895: EQUAL
45896: IFFALSE 45964
// begin if indexColumn then
45898: LD_VAR 0 4
45902: IFFALSE 45938
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45904: LD_ADDR_VAR 0 5
45908: PUSH
45909: LD_VAR 0 5
45913: PPUSH
45914: LD_VAR 0 1
45918: PUSH
45919: LD_VAR 0 6
45923: ARRAY
45924: PUSH
45925: LD_VAR 0 4
45929: ARRAY
45930: PPUSH
45931: CALL 40976 0 2
45935: ST_TO_ADDR
45936: GO 45964
// result := Join ( result , array [ i ] ) ;
45938: LD_ADDR_VAR 0 5
45942: PUSH
45943: LD_VAR 0 5
45947: PPUSH
45948: LD_VAR 0 1
45952: PUSH
45953: LD_VAR 0 6
45957: ARRAY
45958: PPUSH
45959: CALL 40976 0 2
45963: ST_TO_ADDR
// end ;
45964: GO 45871
45966: POP
45967: POP
// end ;
45968: LD_VAR 0 5
45972: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45973: LD_INT 0
45975: PPUSH
// if not vehicles or not parkingPoint then
45976: LD_VAR 0 1
45980: NOT
45981: IFTRUE 45990
45983: PUSH
45984: LD_VAR 0 2
45988: NOT
45989: OR
45990: IFFALSE 45994
// exit ;
45992: GO 46092
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45994: LD_ADDR_VAR 0 1
45998: PUSH
45999: LD_VAR 0 1
46003: PPUSH
46004: LD_INT 50
46006: PUSH
46007: EMPTY
46008: LIST
46009: PUSH
46010: LD_INT 3
46012: PUSH
46013: LD_INT 92
46015: PUSH
46016: LD_VAR 0 2
46020: PUSH
46021: LD_INT 1
46023: ARRAY
46024: PUSH
46025: LD_VAR 0 2
46029: PUSH
46030: LD_INT 2
46032: ARRAY
46033: PUSH
46034: LD_INT 8
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PPUSH
46051: CALL_OW 72
46055: ST_TO_ADDR
// if not vehicles then
46056: LD_VAR 0 1
46060: NOT
46061: IFFALSE 46065
// exit ;
46063: GO 46092
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46065: LD_VAR 0 1
46069: PPUSH
46070: LD_VAR 0 2
46074: PUSH
46075: LD_INT 1
46077: ARRAY
46078: PPUSH
46079: LD_VAR 0 2
46083: PUSH
46084: LD_INT 2
46086: ARRAY
46087: PPUSH
46088: CALL_OW 111
// end ;
46092: LD_VAR 0 3
46096: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46097: LD_INT 0
46099: PPUSH
46100: PPUSH
46101: PPUSH
// if not side or not area then
46102: LD_VAR 0 1
46106: NOT
46107: IFTRUE 46116
46109: PUSH
46110: LD_VAR 0 2
46114: NOT
46115: OR
46116: IFFALSE 46120
// exit ;
46118: GO 46239
// tmp := AreaToList ( area , 0 ) ;
46120: LD_ADDR_VAR 0 5
46124: PUSH
46125: LD_VAR 0 2
46129: PPUSH
46130: LD_INT 0
46132: PPUSH
46133: CALL_OW 517
46137: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46138: LD_ADDR_VAR 0 4
46142: PUSH
46143: DOUBLE
46144: LD_INT 1
46146: DEC
46147: ST_TO_ADDR
46148: LD_VAR 0 5
46152: PUSH
46153: LD_INT 1
46155: ARRAY
46156: PUSH
46157: FOR_TO
46158: IFFALSE 46237
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46160: LD_VAR 0 5
46164: PUSH
46165: LD_INT 1
46167: ARRAY
46168: PUSH
46169: LD_VAR 0 4
46173: ARRAY
46174: PPUSH
46175: LD_VAR 0 5
46179: PUSH
46180: LD_INT 2
46182: ARRAY
46183: PUSH
46184: LD_VAR 0 4
46188: ARRAY
46189: PPUSH
46190: CALL_OW 351
46194: IFFALSE 46235
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46196: LD_VAR 0 5
46200: PUSH
46201: LD_INT 1
46203: ARRAY
46204: PUSH
46205: LD_VAR 0 4
46209: ARRAY
46210: PPUSH
46211: LD_VAR 0 5
46215: PUSH
46216: LD_INT 2
46218: ARRAY
46219: PUSH
46220: LD_VAR 0 4
46224: ARRAY
46225: PPUSH
46226: LD_VAR 0 1
46230: PPUSH
46231: CALL_OW 244
// end ;
46235: GO 46157
46237: POP
46238: POP
// end ;
46239: LD_VAR 0 3
46243: RET
// export function UniqueArray ( array ) ; var i ; begin
46244: LD_INT 0
46246: PPUSH
46247: PPUSH
// result := [ ] ;
46248: LD_ADDR_VAR 0 2
46252: PUSH
46253: EMPTY
46254: ST_TO_ADDR
// if not array then
46255: LD_VAR 0 1
46259: NOT
46260: IFFALSE 46264
// exit ;
46262: GO 46325
// for i := 1 to array do
46264: LD_ADDR_VAR 0 3
46268: PUSH
46269: DOUBLE
46270: LD_INT 1
46272: DEC
46273: ST_TO_ADDR
46274: LD_VAR 0 1
46278: PUSH
46279: FOR_TO
46280: IFFALSE 46323
// if not array [ i ] in result then
46282: LD_VAR 0 1
46286: PUSH
46287: LD_VAR 0 3
46291: ARRAY
46292: PUSH
46293: LD_VAR 0 2
46297: IN
46298: NOT
46299: IFFALSE 46321
// result := Join ( result , i ) ;
46301: LD_ADDR_VAR 0 2
46305: PUSH
46306: LD_VAR 0 2
46310: PPUSH
46311: LD_VAR 0 3
46315: PPUSH
46316: CALL 40976 0 2
46320: ST_TO_ADDR
46321: GO 46279
46323: POP
46324: POP
// end ; end_of_file
46325: LD_VAR 0 2
46329: RET
// export function SOS_UnitDestroyed ( un ) ; begin
46330: LD_INT 0
46332: PPUSH
// ComRadiation ( un ) ;
46333: LD_VAR 0 1
46337: PPUSH
46338: CALL 47500 0 1
// end ;
46342: LD_VAR 0 2
46346: RET
// export function SOS_UnitKamikazed ( un ) ; begin
46347: LD_INT 0
46349: PPUSH
// ComRadiation ( un ) ;
46350: LD_VAR 0 1
46354: PPUSH
46355: CALL 47500 0 1
// end ;
46359: LD_VAR 0 2
46363: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
46364: LD_INT 0
46366: PPUSH
// end ;
46367: LD_VAR 0 4
46371: RET
// export function SOS_Command ( cmd ) ; begin
46372: LD_INT 0
46374: PPUSH
// end ;
46375: LD_VAR 0 2
46379: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
46380: LD_INT 0
46382: PPUSH
// end ;
46383: LD_VAR 0 6
46387: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
46388: LD_INT 0
46390: PPUSH
46391: PPUSH
46392: PPUSH
46393: PPUSH
46394: PPUSH
// if not vehicle or not factory then
46395: LD_VAR 0 1
46399: NOT
46400: IFTRUE 46409
46402: PUSH
46403: LD_VAR 0 2
46407: NOT
46408: OR
46409: IFFALSE 46413
// exit ;
46411: GO 47075
// weapon := GetWeapon ( vehicle ) ;
46413: LD_ADDR_VAR 0 7
46417: PUSH
46418: LD_VAR 0 1
46422: PPUSH
46423: CALL_OW 264
46427: ST_TO_ADDR
// if weapon = ar_miner then
46428: LD_VAR 0 7
46432: PUSH
46433: LD_INT 81
46435: EQUAL
46436: IFFALSE 46493
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
46438: LD_ADDR_EXP 16
46442: PUSH
46443: LD_EXP 16
46447: PPUSH
46448: LD_EXP 16
46452: PUSH
46453: LD_INT 1
46455: PLUS
46456: PPUSH
46457: LD_VAR 0 1
46461: PPUSH
46462: CALL_OW 1
46466: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
46467: LD_ADDR_EXP 17
46471: PUSH
46472: LD_EXP 17
46476: PPUSH
46477: LD_EXP 17
46481: PUSH
46482: LD_INT 1
46484: PLUS
46485: PPUSH
46486: EMPTY
46487: PPUSH
46488: CALL_OW 1
46492: ST_TO_ADDR
// end ; if not factoryWaypoints then
46493: LD_EXP 78
46497: NOT
46498: IFFALSE 46502
// exit ;
46500: GO 47075
// for i := 1 to Count ( factoryWaypoints ) do
46502: LD_ADDR_VAR 0 4
46506: PUSH
46507: DOUBLE
46508: LD_INT 1
46510: DEC
46511: ST_TO_ADDR
46512: LD_EXP 78
46516: PPUSH
46517: CALL 5000 0 1
46521: PUSH
46522: FOR_TO
46523: IFFALSE 47073
// if factoryWaypoints [ i ] [ 2 ] = factory then
46525: LD_EXP 78
46529: PUSH
46530: LD_VAR 0 4
46534: ARRAY
46535: PUSH
46536: LD_INT 2
46538: ARRAY
46539: PUSH
46540: LD_VAR 0 2
46544: EQUAL
46545: IFFALSE 47071
// begin if GetControl ( vehicle ) = control_manual then
46547: LD_VAR 0 1
46551: PPUSH
46552: CALL_OW 263
46556: PUSH
46557: LD_INT 1
46559: EQUAL
46560: IFFALSE 46924
// begin driver := IsDrivenBy ( vehicle ) ;
46562: LD_ADDR_VAR 0 5
46566: PUSH
46567: LD_VAR 0 1
46571: PPUSH
46572: CALL_OW 311
46576: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
46577: LD_VAR 0 5
46581: PUSH
46582: LD_EXP 79
46586: IN
46587: IFTRUE 46601
46589: PUSH
46590: LD_VAR 0 1
46594: PUSH
46595: LD_EXP 79
46599: IN
46600: OR
46601: IFFALSE 46607
// exit ;
46603: POP
46604: POP
46605: GO 47075
// if not HasTask ( driver ) then
46607: LD_VAR 0 5
46611: PPUSH
46612: CALL_OW 314
46616: NOT
46617: IFFALSE 46922
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
46619: LD_ADDR_EXP 79
46623: PUSH
46624: LD_EXP 79
46628: PPUSH
46629: LD_VAR 0 5
46633: PPUSH
46634: CALL 40976 0 2
46638: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
46639: LD_ADDR_EXP 79
46643: PUSH
46644: LD_EXP 79
46648: PPUSH
46649: LD_VAR 0 1
46653: PPUSH
46654: CALL 40976 0 2
46658: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
46659: LD_ADDR_VAR 0 6
46663: PUSH
46664: LD_EXP 78
46668: PUSH
46669: LD_VAR 0 4
46673: ARRAY
46674: PUSH
46675: LD_INT 3
46677: ARRAY
46678: PPUSH
46679: LD_EXP 78
46683: PUSH
46684: LD_VAR 0 4
46688: ARRAY
46689: PUSH
46690: LD_INT 4
46692: ARRAY
46693: PPUSH
46694: CALL_OW 428
46698: ST_TO_ADDR
// if hex then
46699: LD_VAR 0 6
46703: IFFALSE 46721
// ComMoveUnit ( driver , hex ) else
46705: LD_VAR 0 5
46709: PPUSH
46710: LD_VAR 0 6
46714: PPUSH
46715: CALL_OW 112
46719: GO 46805
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
46721: LD_VAR 0 1
46725: PPUSH
46726: LD_EXP 78
46730: PUSH
46731: LD_VAR 0 4
46735: ARRAY
46736: PUSH
46737: LD_INT 3
46739: ARRAY
46740: PPUSH
46741: LD_EXP 78
46745: PUSH
46746: LD_VAR 0 4
46750: ARRAY
46751: PUSH
46752: LD_INT 4
46754: ARRAY
46755: PPUSH
46756: CALL_OW 297
46760: PUSH
46761: LD_INT 0
46763: GREATER
46764: IFFALSE 46805
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
46766: LD_VAR 0 5
46770: PPUSH
46771: LD_EXP 78
46775: PUSH
46776: LD_VAR 0 4
46780: ARRAY
46781: PUSH
46782: LD_INT 3
46784: ARRAY
46785: PPUSH
46786: LD_EXP 78
46790: PUSH
46791: LD_VAR 0 4
46795: ARRAY
46796: PUSH
46797: LD_INT 4
46799: ARRAY
46800: PPUSH
46801: CALL_OW 111
// AddComExitVehicle ( driver ) ;
46805: LD_VAR 0 5
46809: PPUSH
46810: CALL_OW 181
// if Multiplayer then
46814: LD_OWVAR 4
46818: IFFALSE 46867
// begin repeat wait ( 10 ) ;
46820: LD_INT 10
46822: PPUSH
46823: CALL_OW 67
// until not IsInUnit ( driver ) ;
46827: LD_VAR 0 5
46831: PPUSH
46832: CALL_OW 310
46836: NOT
46837: IFFALSE 46820
// if not HasTask ( driver ) then
46839: LD_VAR 0 5
46843: PPUSH
46844: CALL_OW 314
46848: NOT
46849: IFFALSE 46865
// ComEnterUnit ( driver , factory ) ;
46851: LD_VAR 0 5
46855: PPUSH
46856: LD_VAR 0 2
46860: PPUSH
46861: CALL_OW 120
// end else
46865: GO 46881
// AddComEnterUnit ( driver , factory ) ;
46867: LD_VAR 0 5
46871: PPUSH
46872: LD_VAR 0 2
46876: PPUSH
46877: CALL_OW 180
// wait ( 0 0$1 ) ;
46881: LD_INT 35
46883: PPUSH
46884: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
46888: LD_ADDR_EXP 79
46892: PUSH
46893: LD_EXP 79
46897: PUSH
46898: LD_VAR 0 5
46902: DIFF
46903: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
46904: LD_ADDR_EXP 79
46908: PUSH
46909: LD_EXP 79
46913: PUSH
46914: LD_VAR 0 1
46918: DIFF
46919: ST_TO_ADDR
// break ;
46920: GO 47073
// end ; end else
46922: GO 47071
// if GetControl ( vehicle ) = control_remote then
46924: LD_VAR 0 1
46928: PPUSH
46929: CALL_OW 263
46933: PUSH
46934: LD_INT 2
46936: EQUAL
46937: IFFALSE 47023
// begin wait ( 0 0$2 ) ;
46939: LD_INT 70
46941: PPUSH
46942: CALL_OW 67
// repeat wait ( 10 ) ;
46946: LD_INT 10
46948: PPUSH
46949: CALL_OW 67
// Connect ( vehicle ) ;
46953: LD_VAR 0 1
46957: PPUSH
46958: CALL 11278 0 1
// until IsControledBy ( vehicle ) ;
46962: LD_VAR 0 1
46966: PPUSH
46967: CALL_OW 312
46971: IFFALSE 46946
// wait ( 10 ) ;
46973: LD_INT 10
46975: PPUSH
46976: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
46980: LD_VAR 0 1
46984: PPUSH
46985: LD_EXP 78
46989: PUSH
46990: LD_VAR 0 4
46994: ARRAY
46995: PUSH
46996: LD_INT 3
46998: ARRAY
46999: PPUSH
47000: LD_EXP 78
47004: PUSH
47005: LD_VAR 0 4
47009: ARRAY
47010: PUSH
47011: LD_INT 4
47013: ARRAY
47014: PPUSH
47015: CALL_OW 111
// break ;
47019: GO 47073
// end else
47021: GO 47071
// begin wait ( 0 0$3 ) ;
47023: LD_INT 105
47025: PPUSH
47026: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
47030: LD_VAR 0 1
47034: PPUSH
47035: LD_EXP 78
47039: PUSH
47040: LD_VAR 0 4
47044: ARRAY
47045: PUSH
47046: LD_INT 3
47048: ARRAY
47049: PPUSH
47050: LD_EXP 78
47054: PUSH
47055: LD_VAR 0 4
47059: ARRAY
47060: PUSH
47061: LD_INT 4
47063: ARRAY
47064: PPUSH
47065: CALL_OW 111
// break ;
47069: GO 47073
// end ; end ;
47071: GO 46522
47073: POP
47074: POP
// end ;
47075: LD_VAR 0 3
47079: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
47080: LD_INT 0
47082: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
47083: LD_VAR 0 1
47087: PUSH
47088: LD_INT 250
47090: EQUAL
47091: IFFALSE 47108
47093: PUSH
47094: LD_VAR 0 2
47098: PPUSH
47099: CALL_OW 264
47103: PUSH
47104: LD_INT 81
47106: EQUAL
47107: AND
47108: IFFALSE 47129
// MinerPlaceMine ( unit , x , y ) ;
47110: LD_VAR 0 2
47114: PPUSH
47115: LD_VAR 0 4
47119: PPUSH
47120: LD_VAR 0 5
47124: PPUSH
47125: CALL 50475 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
47129: LD_VAR 0 1
47133: PUSH
47134: LD_INT 251
47136: EQUAL
47137: IFFALSE 47154
47139: PUSH
47140: LD_VAR 0 2
47144: PPUSH
47145: CALL_OW 264
47149: PUSH
47150: LD_INT 81
47152: EQUAL
47153: AND
47154: IFFALSE 47175
// MinerDetonateMine ( unit , x , y ) ;
47156: LD_VAR 0 2
47160: PPUSH
47161: LD_VAR 0 4
47165: PPUSH
47166: LD_VAR 0 5
47170: PPUSH
47171: CALL 50882 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
47175: LD_VAR 0 1
47179: PUSH
47180: LD_INT 252
47182: EQUAL
47183: IFFALSE 47200
47185: PUSH
47186: LD_VAR 0 2
47190: PPUSH
47191: CALL_OW 264
47195: PUSH
47196: LD_INT 81
47198: EQUAL
47199: AND
47200: IFFALSE 47221
// MinerCreateMinefield ( unit , x , y ) ;
47202: LD_VAR 0 2
47206: PPUSH
47207: LD_VAR 0 4
47211: PPUSH
47212: LD_VAR 0 5
47216: PPUSH
47217: CALL 51114 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
47221: LD_VAR 0 1
47225: PUSH
47226: LD_INT 253
47228: EQUAL
47229: IFFALSE 47246
47231: PUSH
47232: LD_VAR 0 2
47236: PPUSH
47237: CALL_OW 257
47241: PUSH
47242: LD_INT 5
47244: EQUAL
47245: AND
47246: IFFALSE 47267
// ComBinocular ( unit , x , y ) ;
47248: LD_VAR 0 2
47252: PPUSH
47253: LD_VAR 0 4
47257: PPUSH
47258: LD_VAR 0 5
47262: PPUSH
47263: CALL 51489 0 3
// if selectedUnit then
47267: LD_VAR 0 3
47271: IFFALSE 47331
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
47273: LD_VAR 0 1
47277: PUSH
47278: LD_INT 254
47280: EQUAL
47281: IFFALSE 47298
47283: PUSH
47284: LD_VAR 0 2
47288: PPUSH
47289: CALL_OW 264
47293: PUSH
47294: LD_INT 99
47296: EQUAL
47297: AND
47298: IFFALSE 47315
47300: PUSH
47301: LD_VAR 0 3
47305: PPUSH
47306: CALL_OW 263
47310: PUSH
47311: LD_INT 3
47313: EQUAL
47314: AND
47315: IFFALSE 47331
// HackDestroyVehicle ( unit , selectedUnit ) ;
47317: LD_VAR 0 2
47321: PPUSH
47322: LD_VAR 0 3
47326: PPUSH
47327: CALL 49665 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
47331: LD_VAR 0 1
47335: PUSH
47336: LD_INT 255
47338: EQUAL
47339: IFFALSE 47363
47341: PUSH
47342: LD_VAR 0 2
47346: PPUSH
47347: CALL_OW 264
47351: PUSH
47352: LD_INT 14
47354: PUSH
47355: LD_INT 53
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: IN
47362: AND
47363: IFFALSE 47381
47365: PUSH
47366: LD_VAR 0 4
47370: PPUSH
47371: LD_VAR 0 5
47375: PPUSH
47376: CALL_OW 488
47380: AND
47381: IFFALSE 47405
// CutTreeXYR ( unit , x , y , 12 ) ;
47383: LD_VAR 0 2
47387: PPUSH
47388: LD_VAR 0 4
47392: PPUSH
47393: LD_VAR 0 5
47397: PPUSH
47398: LD_INT 12
47400: PPUSH
47401: CALL 47596 0 4
// if cmd = 256 then
47405: LD_VAR 0 1
47409: PUSH
47410: LD_INT 256
47412: EQUAL
47413: IFFALSE 47434
// SetFactoryWaypoint ( unit , x , y ) ;
47415: LD_VAR 0 2
47419: PPUSH
47420: LD_VAR 0 4
47424: PPUSH
47425: LD_VAR 0 5
47429: PPUSH
47430: CALL 67435 0 3
// if cmd = 257 then
47434: LD_VAR 0 1
47438: PUSH
47439: LD_INT 257
47441: EQUAL
47442: IFFALSE 47463
// SetWarehouseGatheringPoint ( unit , x , y ) ;
47444: LD_VAR 0 2
47448: PPUSH
47449: LD_VAR 0 4
47453: PPUSH
47454: LD_VAR 0 5
47458: PPUSH
47459: CALL 67931 0 3
// if cmd = 258 then
47463: LD_VAR 0 1
47467: PUSH
47468: LD_INT 258
47470: EQUAL
47471: IFFALSE 47495
// BurnTreeXYR ( unit , x , y , 8 ) ;
47473: LD_VAR 0 2
47477: PPUSH
47478: LD_VAR 0 4
47482: PPUSH
47483: LD_VAR 0 5
47487: PPUSH
47488: LD_INT 8
47490: PPUSH
47491: CALL 48018 0 4
// end ;
47495: LD_VAR 0 6
47499: RET
// export function ComRadiation ( un ) ; var eff ; begin
47500: LD_INT 0
47502: PPUSH
47503: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
47504: LD_VAR 0 1
47508: PPUSH
47509: CALL_OW 264
47513: PUSH
47514: LD_INT 91
47516: NONEQUAL
47517: IFFALSE 47521
// exit ;
47519: GO 47591
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
47521: LD_INT 68
47523: PPUSH
47524: LD_VAR 0 1
47528: PPUSH
47529: CALL_OW 255
47533: PPUSH
47534: CALL_OW 321
47538: PUSH
47539: LD_INT 2
47541: EQUAL
47542: IFFALSE 47554
// eff := 50 else
47544: LD_ADDR_VAR 0 3
47548: PUSH
47549: LD_INT 50
47551: ST_TO_ADDR
47552: GO 47562
// eff := 25 ;
47554: LD_ADDR_VAR 0 3
47558: PUSH
47559: LD_INT 25
47561: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
47562: LD_VAR 0 1
47566: PPUSH
47567: CALL_OW 250
47571: PPUSH
47572: LD_VAR 0 1
47576: PPUSH
47577: CALL_OW 251
47581: PPUSH
47582: LD_VAR 0 3
47586: PPUSH
47587: CALL_OW 495
// end ;
47591: LD_VAR 0 2
47595: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
47596: LD_INT 0
47598: PPUSH
47599: PPUSH
47600: PPUSH
47601: PPUSH
47602: PPUSH
47603: PPUSH
47604: PPUSH
47605: PPUSH
47606: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
47607: LD_VAR 0 1
47611: PPUSH
47612: CALL_OW 302
47616: NOT
47617: IFTRUE 47636
47619: PUSH
47620: LD_VAR 0 2
47624: PPUSH
47625: LD_VAR 0 3
47629: PPUSH
47630: CALL_OW 488
47634: NOT
47635: OR
47636: IFTRUE 47645
47638: PUSH
47639: LD_VAR 0 4
47643: NOT
47644: OR
47645: IFFALSE 47649
// exit ;
47647: GO 48013
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
47649: LD_VAR 0 1
47653: PPUSH
47654: CALL_OW 437
47658: PPUSH
47659: CALL 5000 0 1
47663: PUSH
47664: LD_INT 10
47666: GREATER
47667: IFFALSE 47671
// exit ;
47669: GO 48013
// list := [ ] ;
47671: LD_ADDR_VAR 0 13
47675: PUSH
47676: EMPTY
47677: ST_TO_ADDR
// if x - r < 0 then
47678: LD_VAR 0 2
47682: PUSH
47683: LD_VAR 0 4
47687: MINUS
47688: PUSH
47689: LD_INT 0
47691: LESS
47692: IFFALSE 47704
// min_x := 0 else
47694: LD_ADDR_VAR 0 7
47698: PUSH
47699: LD_INT 0
47701: ST_TO_ADDR
47702: GO 47720
// min_x := x - r ;
47704: LD_ADDR_VAR 0 7
47708: PUSH
47709: LD_VAR 0 2
47713: PUSH
47714: LD_VAR 0 4
47718: MINUS
47719: ST_TO_ADDR
// if y - r < 0 then
47720: LD_VAR 0 3
47724: PUSH
47725: LD_VAR 0 4
47729: MINUS
47730: PUSH
47731: LD_INT 0
47733: LESS
47734: IFFALSE 47746
// min_y := 0 else
47736: LD_ADDR_VAR 0 8
47740: PUSH
47741: LD_INT 0
47743: ST_TO_ADDR
47744: GO 47762
// min_y := y - r ;
47746: LD_ADDR_VAR 0 8
47750: PUSH
47751: LD_VAR 0 3
47755: PUSH
47756: LD_VAR 0 4
47760: MINUS
47761: ST_TO_ADDR
// max_x := x + r ;
47762: LD_ADDR_VAR 0 9
47766: PUSH
47767: LD_VAR 0 2
47771: PUSH
47772: LD_VAR 0 4
47776: PLUS
47777: ST_TO_ADDR
// max_y := y + r ;
47778: LD_ADDR_VAR 0 10
47782: PUSH
47783: LD_VAR 0 3
47787: PUSH
47788: LD_VAR 0 4
47792: PLUS
47793: ST_TO_ADDR
// for _x = min_x to max_x do
47794: LD_ADDR_VAR 0 11
47798: PUSH
47799: DOUBLE
47800: LD_VAR 0 7
47804: DEC
47805: ST_TO_ADDR
47806: LD_VAR 0 9
47810: PUSH
47811: FOR_TO
47812: IFFALSE 47931
// for _y = min_y to max_y do
47814: LD_ADDR_VAR 0 12
47818: PUSH
47819: DOUBLE
47820: LD_VAR 0 8
47824: DEC
47825: ST_TO_ADDR
47826: LD_VAR 0 10
47830: PUSH
47831: FOR_TO
47832: IFFALSE 47927
// begin if not ValidHex ( _x , _y ) then
47834: LD_VAR 0 11
47838: PPUSH
47839: LD_VAR 0 12
47843: PPUSH
47844: CALL_OW 488
47848: NOT
47849: IFFALSE 47853
// continue ;
47851: GO 47831
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
47853: LD_VAR 0 11
47857: PPUSH
47858: LD_VAR 0 12
47862: PPUSH
47863: CALL_OW 351
47867: IFFALSE 47885
47869: PUSH
47870: LD_VAR 0 11
47874: PPUSH
47875: LD_VAR 0 12
47879: PPUSH
47880: CALL_OW 554
47884: AND
47885: IFFALSE 47925
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
47887: LD_ADDR_VAR 0 13
47891: PUSH
47892: LD_VAR 0 13
47896: PPUSH
47897: LD_VAR 0 13
47901: PUSH
47902: LD_INT 1
47904: PLUS
47905: PPUSH
47906: LD_VAR 0 11
47910: PUSH
47911: LD_VAR 0 12
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PPUSH
47920: CALL_OW 2
47924: ST_TO_ADDR
// end ;
47925: GO 47831
47927: POP
47928: POP
47929: GO 47811
47931: POP
47932: POP
// if not list then
47933: LD_VAR 0 13
47937: NOT
47938: IFFALSE 47942
// exit ;
47940: GO 48013
// for i in list do
47942: LD_ADDR_VAR 0 6
47946: PUSH
47947: LD_VAR 0 13
47951: PUSH
47952: FOR_IN
47953: IFFALSE 48011
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
47955: LD_VAR 0 1
47959: PPUSH
47960: LD_STRING M
47962: PUSH
47963: LD_VAR 0 6
47967: PUSH
47968: LD_INT 1
47970: ARRAY
47971: PUSH
47972: LD_VAR 0 6
47976: PUSH
47977: LD_INT 2
47979: ARRAY
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: PUSH
48002: EMPTY
48003: LIST
48004: PPUSH
48005: CALL_OW 447
48009: GO 47952
48011: POP
48012: POP
// end ;
48013: LD_VAR 0 5
48017: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
48018: LD_INT 0
48020: PPUSH
48021: PPUSH
48022: PPUSH
48023: PPUSH
48024: PPUSH
48025: PPUSH
48026: PPUSH
48027: PPUSH
48028: PPUSH
48029: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
48030: LD_VAR 0 1
48034: PPUSH
48035: CALL_OW 302
48039: NOT
48040: IFTRUE 48059
48042: PUSH
48043: LD_VAR 0 2
48047: PPUSH
48048: LD_VAR 0 3
48052: PPUSH
48053: CALL_OW 488
48057: NOT
48058: OR
48059: IFTRUE 48068
48061: PUSH
48062: LD_VAR 0 4
48066: NOT
48067: OR
48068: IFFALSE 48072
// exit ;
48070: GO 48611
// if Count ( GetTaskList ( flame ) ) > 10 then
48072: LD_VAR 0 1
48076: PPUSH
48077: CALL_OW 437
48081: PPUSH
48082: CALL 5000 0 1
48086: PUSH
48087: LD_INT 10
48089: GREATER
48090: IFFALSE 48094
// exit ;
48092: GO 48611
// list := [ ] ;
48094: LD_ADDR_VAR 0 13
48098: PUSH
48099: EMPTY
48100: ST_TO_ADDR
// if x - r < 0 then
48101: LD_VAR 0 2
48105: PUSH
48106: LD_VAR 0 4
48110: MINUS
48111: PUSH
48112: LD_INT 0
48114: LESS
48115: IFFALSE 48127
// min_x := 0 else
48117: LD_ADDR_VAR 0 7
48121: PUSH
48122: LD_INT 0
48124: ST_TO_ADDR
48125: GO 48143
// min_x := x - r ;
48127: LD_ADDR_VAR 0 7
48131: PUSH
48132: LD_VAR 0 2
48136: PUSH
48137: LD_VAR 0 4
48141: MINUS
48142: ST_TO_ADDR
// if y - r < 0 then
48143: LD_VAR 0 3
48147: PUSH
48148: LD_VAR 0 4
48152: MINUS
48153: PUSH
48154: LD_INT 0
48156: LESS
48157: IFFALSE 48169
// min_y := 0 else
48159: LD_ADDR_VAR 0 8
48163: PUSH
48164: LD_INT 0
48166: ST_TO_ADDR
48167: GO 48185
// min_y := y - r ;
48169: LD_ADDR_VAR 0 8
48173: PUSH
48174: LD_VAR 0 3
48178: PUSH
48179: LD_VAR 0 4
48183: MINUS
48184: ST_TO_ADDR
// max_x := x + r ;
48185: LD_ADDR_VAR 0 9
48189: PUSH
48190: LD_VAR 0 2
48194: PUSH
48195: LD_VAR 0 4
48199: PLUS
48200: ST_TO_ADDR
// max_y := y + r ;
48201: LD_ADDR_VAR 0 10
48205: PUSH
48206: LD_VAR 0 3
48210: PUSH
48211: LD_VAR 0 4
48215: PLUS
48216: ST_TO_ADDR
// for _x = min_x to max_x do
48217: LD_ADDR_VAR 0 11
48221: PUSH
48222: DOUBLE
48223: LD_VAR 0 7
48227: DEC
48228: ST_TO_ADDR
48229: LD_VAR 0 9
48233: PUSH
48234: FOR_TO
48235: IFFALSE 48354
// for _y = min_y to max_y do
48237: LD_ADDR_VAR 0 12
48241: PUSH
48242: DOUBLE
48243: LD_VAR 0 8
48247: DEC
48248: ST_TO_ADDR
48249: LD_VAR 0 10
48253: PUSH
48254: FOR_TO
48255: IFFALSE 48350
// begin if not ValidHex ( _x , _y ) then
48257: LD_VAR 0 11
48261: PPUSH
48262: LD_VAR 0 12
48266: PPUSH
48267: CALL_OW 488
48271: NOT
48272: IFFALSE 48276
// continue ;
48274: GO 48254
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
48276: LD_VAR 0 11
48280: PPUSH
48281: LD_VAR 0 12
48285: PPUSH
48286: CALL_OW 351
48290: IFFALSE 48308
48292: PUSH
48293: LD_VAR 0 11
48297: PPUSH
48298: LD_VAR 0 12
48302: PPUSH
48303: CALL_OW 554
48307: AND
48308: IFFALSE 48348
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
48310: LD_ADDR_VAR 0 13
48314: PUSH
48315: LD_VAR 0 13
48319: PPUSH
48320: LD_VAR 0 13
48324: PUSH
48325: LD_INT 1
48327: PLUS
48328: PPUSH
48329: LD_VAR 0 11
48333: PUSH
48334: LD_VAR 0 12
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PPUSH
48343: CALL_OW 2
48347: ST_TO_ADDR
// end ;
48348: GO 48254
48350: POP
48351: POP
48352: GO 48234
48354: POP
48355: POP
// if not list then
48356: LD_VAR 0 13
48360: NOT
48361: IFFALSE 48365
// exit ;
48363: GO 48611
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
48365: LD_ADDR_VAR 0 13
48369: PUSH
48370: LD_VAR 0 1
48374: PPUSH
48375: LD_VAR 0 13
48379: PPUSH
48380: LD_INT 1
48382: PPUSH
48383: LD_INT 1
48385: PPUSH
48386: CALL 8406 0 4
48390: ST_TO_ADDR
// ComStop ( flame ) ;
48391: LD_VAR 0 1
48395: PPUSH
48396: CALL_OW 141
// for i in list do
48400: LD_ADDR_VAR 0 6
48404: PUSH
48405: LD_VAR 0 13
48409: PUSH
48410: FOR_IN
48411: IFFALSE 48442
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
48413: LD_VAR 0 1
48417: PPUSH
48418: LD_VAR 0 6
48422: PUSH
48423: LD_INT 1
48425: ARRAY
48426: PPUSH
48427: LD_VAR 0 6
48431: PUSH
48432: LD_INT 2
48434: ARRAY
48435: PPUSH
48436: CALL_OW 176
48440: GO 48410
48442: POP
48443: POP
// repeat wait ( 0 0$1 ) ;
48444: LD_INT 35
48446: PPUSH
48447: CALL_OW 67
// task := GetTaskList ( flame ) ;
48451: LD_ADDR_VAR 0 14
48455: PUSH
48456: LD_VAR 0 1
48460: PPUSH
48461: CALL_OW 437
48465: ST_TO_ADDR
// if not task then
48466: LD_VAR 0 14
48470: NOT
48471: IFFALSE 48475
// exit ;
48473: GO 48611
// if task [ 1 ] [ 1 ] <> | then
48475: LD_VAR 0 14
48479: PUSH
48480: LD_INT 1
48482: ARRAY
48483: PUSH
48484: LD_INT 1
48486: ARRAY
48487: PUSH
48488: LD_STRING |
48490: NONEQUAL
48491: IFFALSE 48495
// exit ;
48493: GO 48611
// _x := task [ 1 ] [ 2 ] ;
48495: LD_ADDR_VAR 0 11
48499: PUSH
48500: LD_VAR 0 14
48504: PUSH
48505: LD_INT 1
48507: ARRAY
48508: PUSH
48509: LD_INT 2
48511: ARRAY
48512: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
48513: LD_ADDR_VAR 0 12
48517: PUSH
48518: LD_VAR 0 14
48522: PUSH
48523: LD_INT 1
48525: ARRAY
48526: PUSH
48527: LD_INT 3
48529: ARRAY
48530: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
48531: LD_VAR 0 11
48535: PPUSH
48536: LD_VAR 0 12
48540: PPUSH
48541: CALL_OW 351
48545: NOT
48546: IFTRUE 48565
48548: PUSH
48549: LD_VAR 0 11
48553: PPUSH
48554: LD_VAR 0 12
48558: PPUSH
48559: CALL_OW 554
48563: NOT
48564: OR
48565: IFFALSE 48599
// begin task := Delete ( task , 1 ) ;
48567: LD_ADDR_VAR 0 14
48571: PUSH
48572: LD_VAR 0 14
48576: PPUSH
48577: LD_INT 1
48579: PPUSH
48580: CALL_OW 3
48584: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
48585: LD_VAR 0 1
48589: PPUSH
48590: LD_VAR 0 14
48594: PPUSH
48595: CALL_OW 446
// end ; until not HasTask ( flame ) ;
48599: LD_VAR 0 1
48603: PPUSH
48604: CALL_OW 314
48608: NOT
48609: IFFALSE 48444
// end ;
48611: LD_VAR 0 5
48615: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
48616: LD_EXP 9
48620: NOT
48621: IFFALSE 48671
48623: GO 48625
48625: DISABLE
// begin initHack := true ;
48626: LD_ADDR_EXP 9
48630: PUSH
48631: LD_INT 1
48633: ST_TO_ADDR
// hackTanks := [ ] ;
48634: LD_ADDR_EXP 10
48638: PUSH
48639: EMPTY
48640: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
48641: LD_ADDR_EXP 11
48645: PUSH
48646: EMPTY
48647: ST_TO_ADDR
// hackLimit := 3 ;
48648: LD_ADDR_EXP 12
48652: PUSH
48653: LD_INT 3
48655: ST_TO_ADDR
// hackDist := 12 ;
48656: LD_ADDR_EXP 13
48660: PUSH
48661: LD_INT 12
48663: ST_TO_ADDR
// hackCounter := [ ] ;
48664: LD_ADDR_EXP 14
48668: PUSH
48669: EMPTY
48670: ST_TO_ADDR
// end ;
48671: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
48672: LD_EXP 9
48676: IFFALSE 48694
48678: PUSH
48679: LD_INT 34
48681: PUSH
48682: LD_INT 99
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PPUSH
48689: CALL_OW 69
48693: AND
48694: IFFALSE 48947
48696: GO 48698
48698: DISABLE
48699: LD_INT 0
48701: PPUSH
48702: PPUSH
// begin enable ;
48703: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
48704: LD_ADDR_VAR 0 1
48708: PUSH
48709: LD_INT 34
48711: PUSH
48712: LD_INT 99
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PPUSH
48719: CALL_OW 69
48723: PUSH
48724: FOR_IN
48725: IFFALSE 48945
// begin if not i in hackTanks then
48727: LD_VAR 0 1
48731: PUSH
48732: LD_EXP 10
48736: IN
48737: NOT
48738: IFFALSE 48821
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
48740: LD_ADDR_EXP 10
48744: PUSH
48745: LD_EXP 10
48749: PPUSH
48750: LD_EXP 10
48754: PUSH
48755: LD_INT 1
48757: PLUS
48758: PPUSH
48759: LD_VAR 0 1
48763: PPUSH
48764: CALL_OW 1
48768: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
48769: LD_ADDR_EXP 11
48773: PUSH
48774: LD_EXP 11
48778: PPUSH
48779: LD_EXP 11
48783: PUSH
48784: LD_INT 1
48786: PLUS
48787: PPUSH
48788: EMPTY
48789: PPUSH
48790: CALL_OW 1
48794: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
48795: LD_ADDR_EXP 14
48799: PUSH
48800: LD_EXP 14
48804: PPUSH
48805: LD_EXP 14
48809: PUSH
48810: LD_INT 1
48812: PLUS
48813: PPUSH
48814: EMPTY
48815: PPUSH
48816: CALL_OW 1
48820: ST_TO_ADDR
// end ; if not IsOk ( i ) then
48821: LD_VAR 0 1
48825: PPUSH
48826: CALL_OW 302
48830: NOT
48831: IFFALSE 48844
// begin HackUnlinkAll ( i ) ;
48833: LD_VAR 0 1
48837: PPUSH
48838: CALL 48950 0 1
// continue ;
48842: GO 48724
// end ; HackCheckCapturedStatus ( i ) ;
48844: LD_VAR 0 1
48848: PPUSH
48849: CALL 49395 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
48853: LD_ADDR_VAR 0 2
48857: PUSH
48858: LD_INT 81
48860: PUSH
48861: LD_VAR 0 1
48865: PPUSH
48866: CALL_OW 255
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 33
48877: PUSH
48878: LD_INT 3
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 91
48887: PUSH
48888: LD_VAR 0 1
48892: PUSH
48893: LD_EXP 13
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 50
48905: PUSH
48906: EMPTY
48907: LIST
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: PPUSH
48915: CALL_OW 69
48919: ST_TO_ADDR
// if not tmp then
48920: LD_VAR 0 2
48924: NOT
48925: IFFALSE 48929
// continue ;
48927: GO 48724
// HackLink ( i , tmp ) ;
48929: LD_VAR 0 1
48933: PPUSH
48934: LD_VAR 0 2
48938: PPUSH
48939: CALL 49086 0 2
// end ;
48943: GO 48724
48945: POP
48946: POP
// end ;
48947: PPOPN 2
48949: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
48950: LD_INT 0
48952: PPUSH
48953: PPUSH
48954: PPUSH
// if not hack in hackTanks then
48955: LD_VAR 0 1
48959: PUSH
48960: LD_EXP 10
48964: IN
48965: NOT
48966: IFFALSE 48970
// exit ;
48968: GO 49081
// index := GetElementIndex ( hackTanks , hack ) ;
48970: LD_ADDR_VAR 0 4
48974: PUSH
48975: LD_EXP 10
48979: PPUSH
48980: LD_VAR 0 1
48984: PPUSH
48985: CALL 7701 0 2
48989: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
48990: LD_EXP 11
48994: PUSH
48995: LD_VAR 0 4
48999: ARRAY
49000: IFFALSE 49081
// begin for i in hackTanksCaptured [ index ] do
49002: LD_ADDR_VAR 0 3
49006: PUSH
49007: LD_EXP 11
49011: PUSH
49012: LD_VAR 0 4
49016: ARRAY
49017: PUSH
49018: FOR_IN
49019: IFFALSE 49045
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
49021: LD_VAR 0 3
49025: PUSH
49026: LD_INT 1
49028: ARRAY
49029: PPUSH
49030: LD_VAR 0 3
49034: PUSH
49035: LD_INT 2
49037: ARRAY
49038: PPUSH
49039: CALL_OW 235
49043: GO 49018
49045: POP
49046: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
49047: LD_ADDR_EXP 11
49051: PUSH
49052: LD_EXP 11
49056: PPUSH
49057: LD_VAR 0 4
49061: PPUSH
49062: EMPTY
49063: PPUSH
49064: CALL_OW 1
49068: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
49069: LD_VAR 0 1
49073: PPUSH
49074: LD_INT 0
49076: PPUSH
49077: CALL_OW 505
// end ; end ;
49081: LD_VAR 0 2
49085: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
49086: LD_INT 0
49088: PPUSH
49089: PPUSH
49090: PPUSH
// if not hack in hackTanks or not vehicles then
49091: LD_VAR 0 1
49095: PUSH
49096: LD_EXP 10
49100: IN
49101: NOT
49102: IFTRUE 49111
49104: PUSH
49105: LD_VAR 0 2
49109: NOT
49110: OR
49111: IFFALSE 49115
// exit ;
49113: GO 49390
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
49115: LD_ADDR_VAR 0 2
49119: PUSH
49120: LD_VAR 0 1
49124: PPUSH
49125: LD_VAR 0 2
49129: PPUSH
49130: LD_INT 1
49132: PPUSH
49133: LD_INT 1
49135: PPUSH
49136: CALL 8353 0 4
49140: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
49141: LD_ADDR_VAR 0 5
49145: PUSH
49146: LD_EXP 10
49150: PPUSH
49151: LD_VAR 0 1
49155: PPUSH
49156: CALL 7701 0 2
49160: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
49161: LD_EXP 11
49165: PUSH
49166: LD_VAR 0 5
49170: ARRAY
49171: PUSH
49172: LD_EXP 12
49176: LESS
49177: IFFALSE 49366
// begin for i := 1 to vehicles do
49179: LD_ADDR_VAR 0 4
49183: PUSH
49184: DOUBLE
49185: LD_INT 1
49187: DEC
49188: ST_TO_ADDR
49189: LD_VAR 0 2
49193: PUSH
49194: FOR_TO
49195: IFFALSE 49364
// begin if hackTanksCaptured [ index ] = hackLimit then
49197: LD_EXP 11
49201: PUSH
49202: LD_VAR 0 5
49206: ARRAY
49207: PUSH
49208: LD_EXP 12
49212: EQUAL
49213: IFFALSE 49217
// break ;
49215: GO 49364
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
49217: LD_ADDR_EXP 14
49221: PUSH
49222: LD_EXP 14
49226: PPUSH
49227: LD_VAR 0 5
49231: PPUSH
49232: LD_EXP 14
49236: PUSH
49237: LD_VAR 0 5
49241: ARRAY
49242: PUSH
49243: LD_INT 1
49245: PLUS
49246: PPUSH
49247: CALL_OW 1
49251: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
49252: LD_ADDR_EXP 11
49256: PUSH
49257: LD_EXP 11
49261: PPUSH
49262: LD_VAR 0 5
49266: PUSH
49267: LD_EXP 11
49271: PUSH
49272: LD_VAR 0 5
49276: ARRAY
49277: PUSH
49278: LD_INT 1
49280: PLUS
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PPUSH
49286: LD_VAR 0 2
49290: PUSH
49291: LD_VAR 0 4
49295: ARRAY
49296: PUSH
49297: LD_VAR 0 2
49301: PUSH
49302: LD_VAR 0 4
49306: ARRAY
49307: PPUSH
49308: CALL_OW 255
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PPUSH
49317: CALL 7918 0 3
49321: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
49322: LD_VAR 0 2
49326: PUSH
49327: LD_VAR 0 4
49331: ARRAY
49332: PPUSH
49333: LD_VAR 0 1
49337: PPUSH
49338: CALL_OW 255
49342: PPUSH
49343: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
49347: LD_VAR 0 2
49351: PUSH
49352: LD_VAR 0 4
49356: ARRAY
49357: PPUSH
49358: CALL_OW 141
// end ;
49362: GO 49194
49364: POP
49365: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
49366: LD_VAR 0 1
49370: PPUSH
49371: LD_EXP 11
49375: PUSH
49376: LD_VAR 0 5
49380: ARRAY
49381: PUSH
49382: LD_INT 0
49384: PLUS
49385: PPUSH
49386: CALL_OW 505
// end ;
49390: LD_VAR 0 3
49394: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
49395: LD_INT 0
49397: PPUSH
49398: PPUSH
49399: PPUSH
49400: PPUSH
// if not hack in hackTanks then
49401: LD_VAR 0 1
49405: PUSH
49406: LD_EXP 10
49410: IN
49411: NOT
49412: IFFALSE 49416
// exit ;
49414: GO 49660
// index := GetElementIndex ( hackTanks , hack ) ;
49416: LD_ADDR_VAR 0 4
49420: PUSH
49421: LD_EXP 10
49425: PPUSH
49426: LD_VAR 0 1
49430: PPUSH
49431: CALL 7701 0 2
49435: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
49436: LD_ADDR_VAR 0 3
49440: PUSH
49441: DOUBLE
49442: LD_EXP 11
49446: PUSH
49447: LD_VAR 0 4
49451: ARRAY
49452: INC
49453: ST_TO_ADDR
49454: LD_INT 1
49456: PUSH
49457: FOR_DOWNTO
49458: IFFALSE 49634
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
49460: LD_ADDR_VAR 0 5
49464: PUSH
49465: LD_EXP 11
49469: PUSH
49470: LD_VAR 0 4
49474: ARRAY
49475: PUSH
49476: LD_VAR 0 3
49480: ARRAY
49481: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
49482: LD_VAR 0 5
49486: PUSH
49487: LD_INT 1
49489: ARRAY
49490: PPUSH
49491: CALL_OW 302
49495: NOT
49496: IFTRUE 49524
49498: PUSH
49499: LD_VAR 0 5
49503: PUSH
49504: LD_INT 1
49506: ARRAY
49507: PPUSH
49508: CALL_OW 255
49512: PUSH
49513: LD_VAR 0 1
49517: PPUSH
49518: CALL_OW 255
49522: NONEQUAL
49523: OR
49524: IFFALSE 49632
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
49526: LD_VAR 0 5
49530: PUSH
49531: LD_INT 1
49533: ARRAY
49534: PPUSH
49535: CALL_OW 305
49539: IFFALSE 49567
49541: PUSH
49542: LD_VAR 0 5
49546: PUSH
49547: LD_INT 1
49549: ARRAY
49550: PPUSH
49551: CALL_OW 255
49555: PUSH
49556: LD_VAR 0 1
49560: PPUSH
49561: CALL_OW 255
49565: EQUAL
49566: AND
49567: IFFALSE 49591
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
49569: LD_VAR 0 5
49573: PUSH
49574: LD_INT 1
49576: ARRAY
49577: PPUSH
49578: LD_VAR 0 5
49582: PUSH
49583: LD_INT 2
49585: ARRAY
49586: PPUSH
49587: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
49591: LD_ADDR_EXP 11
49595: PUSH
49596: LD_EXP 11
49600: PPUSH
49601: LD_VAR 0 4
49605: PPUSH
49606: LD_EXP 11
49610: PUSH
49611: LD_VAR 0 4
49615: ARRAY
49616: PPUSH
49617: LD_VAR 0 3
49621: PPUSH
49622: CALL_OW 3
49626: PPUSH
49627: CALL_OW 1
49631: ST_TO_ADDR
// end ; end ;
49632: GO 49457
49634: POP
49635: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
49636: LD_VAR 0 1
49640: PPUSH
49641: LD_EXP 11
49645: PUSH
49646: LD_VAR 0 4
49650: ARRAY
49651: PUSH
49652: LD_INT 0
49654: PLUS
49655: PPUSH
49656: CALL_OW 505
// end ;
49660: LD_VAR 0 2
49664: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
49665: LD_INT 0
49667: PPUSH
49668: PPUSH
49669: PPUSH
49670: PPUSH
// if not hack in hackTanks then
49671: LD_VAR 0 1
49675: PUSH
49676: LD_EXP 10
49680: IN
49681: NOT
49682: IFFALSE 49686
// exit ;
49684: GO 49771
// index := GetElementIndex ( hackTanks , hack ) ;
49686: LD_ADDR_VAR 0 5
49690: PUSH
49691: LD_EXP 10
49695: PPUSH
49696: LD_VAR 0 1
49700: PPUSH
49701: CALL 7701 0 2
49705: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
49706: LD_ADDR_VAR 0 4
49710: PUSH
49711: DOUBLE
49712: LD_INT 1
49714: DEC
49715: ST_TO_ADDR
49716: LD_EXP 11
49720: PUSH
49721: LD_VAR 0 5
49725: ARRAY
49726: PUSH
49727: FOR_TO
49728: IFFALSE 49769
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
49730: LD_EXP 11
49734: PUSH
49735: LD_VAR 0 5
49739: ARRAY
49740: PUSH
49741: LD_VAR 0 4
49745: ARRAY
49746: PUSH
49747: LD_INT 1
49749: ARRAY
49750: PUSH
49751: LD_VAR 0 2
49755: EQUAL
49756: IFFALSE 49767
// KillUnit ( vehicle ) ;
49758: LD_VAR 0 2
49762: PPUSH
49763: CALL_OW 66
49767: GO 49727
49769: POP
49770: POP
// end ;
49771: LD_VAR 0 3
49775: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
49776: LD_EXP 15
49780: NOT
49781: IFFALSE 49914
49783: GO 49785
49785: DISABLE
49786: LD_INT 0
49788: PPUSH
// begin initMiner := true ;
49789: LD_ADDR_EXP 15
49793: PUSH
49794: LD_INT 1
49796: ST_TO_ADDR
// minersList := [ ] ;
49797: LD_ADDR_EXP 16
49801: PUSH
49802: EMPTY
49803: ST_TO_ADDR
// minerMinesList := [ ] ;
49804: LD_ADDR_EXP 17
49808: PUSH
49809: EMPTY
49810: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
49811: LD_ADDR_EXP 18
49815: PUSH
49816: LD_INT 10
49818: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
49819: LD_ADDR_VAR 0 1
49823: PUSH
49824: LD_INT 34
49826: PUSH
49827: LD_INT 81
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PPUSH
49834: CALL_OW 69
49838: PUSH
49839: FOR_IN
49840: IFFALSE 49912
// begin if not i in minersList then
49842: LD_VAR 0 1
49846: PUSH
49847: LD_EXP 16
49851: IN
49852: NOT
49853: IFFALSE 49910
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
49855: LD_ADDR_EXP 16
49859: PUSH
49860: LD_EXP 16
49864: PPUSH
49865: LD_EXP 16
49869: PUSH
49870: LD_INT 1
49872: PLUS
49873: PPUSH
49874: LD_VAR 0 1
49878: PPUSH
49879: CALL_OW 1
49883: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
49884: LD_ADDR_EXP 17
49888: PUSH
49889: LD_EXP 17
49893: PPUSH
49894: LD_EXP 17
49898: PUSH
49899: LD_INT 1
49901: PLUS
49902: PPUSH
49903: EMPTY
49904: PPUSH
49905: CALL_OW 1
49909: ST_TO_ADDR
// end end ;
49910: GO 49839
49912: POP
49913: POP
// end ;
49914: PPOPN 1
49916: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
49917: LD_EXP 15
49921: IFFALSE 49952
49923: PUSH
49924: LD_EXP 17
49928: PPUSH
49929: CALL 5000 0 1
49933: IFTRUE 49951
49935: PUSH
49936: LD_INT 34
49938: PUSH
49939: LD_INT 81
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PPUSH
49946: CALL_OW 69
49950: OR
49951: AND
49952: IFFALSE 50472
49954: GO 49956
49956: DISABLE
49957: LD_INT 0
49959: PPUSH
49960: PPUSH
49961: PPUSH
49962: PPUSH
// begin enable ;
49963: ENABLE
// for i := minerMinesList downto 1 do
49964: LD_ADDR_VAR 0 1
49968: PUSH
49969: DOUBLE
49970: LD_EXP 17
49974: INC
49975: ST_TO_ADDR
49976: LD_INT 1
49978: PUSH
49979: FOR_DOWNTO
49980: IFFALSE 50470
// begin side := GetSide ( minersList [ i ] ) ;
49982: LD_ADDR_VAR 0 3
49986: PUSH
49987: LD_EXP 16
49991: PUSH
49992: LD_VAR 0 1
49996: ARRAY
49997: PPUSH
49998: CALL_OW 255
50002: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
50003: LD_EXP 16
50007: PUSH
50008: LD_VAR 0 1
50012: ARRAY
50013: PPUSH
50014: CALL_OW 300
50018: IFFALSE 50039
50020: PUSH
50021: LD_VAR 0 3
50025: PUSH
50026: LD_OWVAR 2
50030: PUSH
50031: LD_INT 9
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: IN
50038: AND
50039: IFFALSE 50072
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
50041: LD_EXP 16
50045: PUSH
50046: LD_VAR 0 1
50050: ARRAY
50051: PPUSH
50052: LD_EXP 17
50056: PUSH
50057: LD_VAR 0 1
50061: ARRAY
50062: PPUSH
50063: CALL 5000 0 1
50067: PPUSH
50068: CALL_OW 505
// if not minerMinesList [ i ] then
50072: LD_EXP 17
50076: PUSH
50077: LD_VAR 0 1
50081: ARRAY
50082: NOT
50083: IFFALSE 50087
// continue ;
50085: GO 49979
// for j := minerMinesList [ i ] downto 1 do
50087: LD_ADDR_VAR 0 2
50091: PUSH
50092: DOUBLE
50093: LD_EXP 17
50097: PUSH
50098: LD_VAR 0 1
50102: ARRAY
50103: INC
50104: ST_TO_ADDR
50105: LD_INT 1
50107: PUSH
50108: FOR_DOWNTO
50109: IFFALSE 50466
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
50111: LD_EXP 16
50115: PUSH
50116: LD_VAR 0 1
50120: ARRAY
50121: PPUSH
50122: CALL_OW 301
50126: IFTRUE 50146
50128: PUSH
50129: LD_EXP 16
50133: PUSH
50134: LD_VAR 0 1
50138: ARRAY
50139: PPUSH
50140: CALL_OW 305
50144: NOT
50145: OR
50146: IFFALSE 50237
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
50148: LD_EXP 17
50152: PUSH
50153: LD_VAR 0 1
50157: ARRAY
50158: PUSH
50159: LD_VAR 0 2
50163: ARRAY
50164: PUSH
50165: LD_INT 1
50167: ARRAY
50168: PPUSH
50169: LD_EXP 17
50173: PUSH
50174: LD_VAR 0 1
50178: ARRAY
50179: PUSH
50180: LD_VAR 0 2
50184: ARRAY
50185: PUSH
50186: LD_INT 2
50188: ARRAY
50189: PPUSH
50190: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
50194: LD_ADDR_EXP 17
50198: PUSH
50199: LD_EXP 17
50203: PPUSH
50204: LD_VAR 0 1
50208: PPUSH
50209: LD_EXP 17
50213: PUSH
50214: LD_VAR 0 1
50218: ARRAY
50219: PPUSH
50220: LD_VAR 0 2
50224: PPUSH
50225: CALL_OW 3
50229: PPUSH
50230: CALL_OW 1
50234: ST_TO_ADDR
// continue ;
50235: GO 50108
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
50237: LD_ADDR_VAR 0 4
50241: PUSH
50242: LD_EXP 17
50246: PUSH
50247: LD_VAR 0 1
50251: ARRAY
50252: PUSH
50253: LD_VAR 0 2
50257: ARRAY
50258: PUSH
50259: LD_INT 1
50261: ARRAY
50262: PPUSH
50263: LD_EXP 17
50267: PUSH
50268: LD_VAR 0 1
50272: ARRAY
50273: PUSH
50274: LD_VAR 0 2
50278: ARRAY
50279: PUSH
50280: LD_INT 2
50282: ARRAY
50283: PPUSH
50284: CALL_OW 428
50288: ST_TO_ADDR
// if not tmp then
50289: LD_VAR 0 4
50293: NOT
50294: IFFALSE 50298
// continue ;
50296: GO 50108
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
50298: LD_VAR 0 4
50302: PUSH
50303: LD_INT 81
50305: PUSH
50306: LD_VAR 0 3
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PPUSH
50315: CALL_OW 69
50319: IN
50320: IFFALSE 50370
50322: PUSH
50323: LD_EXP 17
50327: PUSH
50328: LD_VAR 0 1
50332: ARRAY
50333: PUSH
50334: LD_VAR 0 2
50338: ARRAY
50339: PUSH
50340: LD_INT 1
50342: ARRAY
50343: PPUSH
50344: LD_EXP 17
50348: PUSH
50349: LD_VAR 0 1
50353: ARRAY
50354: PUSH
50355: LD_VAR 0 2
50359: ARRAY
50360: PUSH
50361: LD_INT 2
50363: ARRAY
50364: PPUSH
50365: CALL_OW 458
50369: AND
50370: IFFALSE 50464
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
50372: LD_EXP 17
50376: PUSH
50377: LD_VAR 0 1
50381: ARRAY
50382: PUSH
50383: LD_VAR 0 2
50387: ARRAY
50388: PUSH
50389: LD_INT 1
50391: ARRAY
50392: PPUSH
50393: LD_EXP 17
50397: PUSH
50398: LD_VAR 0 1
50402: ARRAY
50403: PUSH
50404: LD_VAR 0 2
50408: ARRAY
50409: PUSH
50410: LD_INT 2
50412: ARRAY
50413: PPUSH
50414: LD_VAR 0 3
50418: PPUSH
50419: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
50423: LD_ADDR_EXP 17
50427: PUSH
50428: LD_EXP 17
50432: PPUSH
50433: LD_VAR 0 1
50437: PPUSH
50438: LD_EXP 17
50442: PUSH
50443: LD_VAR 0 1
50447: ARRAY
50448: PPUSH
50449: LD_VAR 0 2
50453: PPUSH
50454: CALL_OW 3
50458: PPUSH
50459: CALL_OW 1
50463: ST_TO_ADDR
// end ; end ;
50464: GO 50108
50466: POP
50467: POP
// end ;
50468: GO 49979
50470: POP
50471: POP
// end ;
50472: PPOPN 4
50474: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
50475: LD_INT 0
50477: PPUSH
50478: PPUSH
50479: PPUSH
50480: PPUSH
// result := false ;
50481: LD_ADDR_VAR 0 4
50485: PUSH
50486: LD_INT 0
50488: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
50489: LD_VAR 0 1
50493: PPUSH
50494: CALL_OW 264
50498: PUSH
50499: LD_INT 81
50501: EQUAL
50502: NOT
50503: IFFALSE 50507
// exit ;
50505: GO 50877
// side := GetSide ( unit ) ;
50507: LD_ADDR_VAR 0 6
50511: PUSH
50512: LD_VAR 0 1
50516: PPUSH
50517: CALL_OW 255
50521: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
50522: LD_ADDR_VAR 0 5
50526: PUSH
50527: LD_EXP 16
50531: PPUSH
50532: LD_VAR 0 1
50536: PPUSH
50537: CALL 7701 0 2
50541: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
50542: LD_EXP 17
50546: PUSH
50547: LD_VAR 0 5
50551: ARRAY
50552: PUSH
50553: LD_EXP 18
50557: GREATEREQUAL
50558: IFFALSE 50562
// exit ;
50560: GO 50877
// ComMoveXY ( unit , x , y ) ;
50562: LD_VAR 0 1
50566: PPUSH
50567: LD_VAR 0 2
50571: PPUSH
50572: LD_VAR 0 3
50576: PPUSH
50577: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
50581: LD_INT 35
50583: PPUSH
50584: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
50588: LD_VAR 0 1
50592: PPUSH
50593: LD_VAR 0 2
50597: PPUSH
50598: LD_VAR 0 3
50602: PPUSH
50603: CALL 39757 0 3
50607: NOT
50608: IFFALSE 50621
50610: PUSH
50611: LD_VAR 0 1
50615: PPUSH
50616: CALL_OW 314
50620: AND
50621: IFFALSE 50625
// exit ;
50623: GO 50877
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
50625: LD_VAR 0 2
50629: PPUSH
50630: LD_VAR 0 3
50634: PPUSH
50635: CALL_OW 428
50639: PUSH
50640: LD_VAR 0 1
50644: EQUAL
50645: IFFALSE 50659
50647: PUSH
50648: LD_VAR 0 1
50652: PPUSH
50653: CALL_OW 314
50657: NOT
50658: AND
50659: IFFALSE 50581
// if MineAtPos ( x , y ) then
50661: LD_VAR 0 2
50665: PPUSH
50666: LD_VAR 0 3
50670: PPUSH
50671: CALL_OW 458
50675: IFFALSE 50679
// exit ;
50677: GO 50877
// if your_side = side then
50679: LD_OWVAR 2
50683: PUSH
50684: LD_VAR 0 6
50688: EQUAL
50689: IFFALSE 50708
// PlaySoundXY ( x , y , PlantMine ) ;
50691: LD_VAR 0 2
50695: PPUSH
50696: LD_VAR 0 3
50700: PPUSH
50701: LD_STRING PlantMine
50703: PPUSH
50704: CALL_OW 366
// repeat wait ( 1 ) ;
50708: LD_INT 1
50710: PPUSH
50711: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
50715: LD_VAR 0 2
50719: PPUSH
50720: LD_VAR 0 3
50724: PPUSH
50725: LD_VAR 0 6
50729: PPUSH
50730: LD_INT 0
50732: PPUSH
50733: CALL_OW 454
50737: IFFALSE 50708
// if MineAtPos ( x , y ) then
50739: LD_VAR 0 2
50743: PPUSH
50744: LD_VAR 0 3
50748: PPUSH
50749: CALL_OW 458
50753: IFFALSE 50869
// begin for i in minerMinesList [ index ] do
50755: LD_ADDR_VAR 0 7
50759: PUSH
50760: LD_EXP 17
50764: PUSH
50765: LD_VAR 0 5
50769: ARRAY
50770: PUSH
50771: FOR_IN
50772: IFFALSE 50814
// if i [ 1 ] = x and i [ 2 ] = y then
50774: LD_VAR 0 7
50778: PUSH
50779: LD_INT 1
50781: ARRAY
50782: PUSH
50783: LD_VAR 0 2
50787: EQUAL
50788: IFFALSE 50806
50790: PUSH
50791: LD_VAR 0 7
50795: PUSH
50796: LD_INT 2
50798: ARRAY
50799: PUSH
50800: LD_VAR 0 3
50804: EQUAL
50805: AND
50806: IFFALSE 50812
// exit ;
50808: POP
50809: POP
50810: GO 50877
50812: GO 50771
50814: POP
50815: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
50816: LD_ADDR_EXP 17
50820: PUSH
50821: LD_EXP 17
50825: PPUSH
50826: LD_VAR 0 5
50830: PUSH
50831: LD_EXP 17
50835: PUSH
50836: LD_VAR 0 5
50840: ARRAY
50841: PUSH
50842: LD_INT 1
50844: PLUS
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PPUSH
50850: LD_VAR 0 2
50854: PUSH
50855: LD_VAR 0 3
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PPUSH
50864: CALL 7918 0 3
50868: ST_TO_ADDR
// end ; result := true ;
50869: LD_ADDR_VAR 0 4
50873: PUSH
50874: LD_INT 1
50876: ST_TO_ADDR
// end ;
50877: LD_VAR 0 4
50881: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
50882: LD_INT 0
50884: PPUSH
50885: PPUSH
50886: PPUSH
// if not unit in minersList then
50887: LD_VAR 0 1
50891: PUSH
50892: LD_EXP 16
50896: IN
50897: NOT
50898: IFFALSE 50902
// exit ;
50900: GO 51109
// index := GetElementIndex ( minersList , unit ) ;
50902: LD_ADDR_VAR 0 6
50906: PUSH
50907: LD_EXP 16
50911: PPUSH
50912: LD_VAR 0 1
50916: PPUSH
50917: CALL 7701 0 2
50921: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
50922: LD_ADDR_VAR 0 5
50926: PUSH
50927: DOUBLE
50928: LD_EXP 17
50932: PUSH
50933: LD_VAR 0 6
50937: ARRAY
50938: INC
50939: ST_TO_ADDR
50940: LD_INT 1
50942: PUSH
50943: FOR_DOWNTO
50944: IFFALSE 51107
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
50946: LD_EXP 17
50950: PUSH
50951: LD_VAR 0 6
50955: ARRAY
50956: PUSH
50957: LD_VAR 0 5
50961: ARRAY
50962: PUSH
50963: LD_INT 1
50965: ARRAY
50966: PPUSH
50967: LD_EXP 17
50971: PUSH
50972: LD_VAR 0 6
50976: ARRAY
50977: PUSH
50978: LD_VAR 0 5
50982: ARRAY
50983: PUSH
50984: LD_INT 2
50986: ARRAY
50987: PPUSH
50988: LD_VAR 0 2
50992: PPUSH
50993: LD_VAR 0 3
50997: PPUSH
50998: CALL_OW 298
51002: PUSH
51003: LD_INT 6
51005: LESS
51006: IFFALSE 51105
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
51008: LD_EXP 17
51012: PUSH
51013: LD_VAR 0 6
51017: ARRAY
51018: PUSH
51019: LD_VAR 0 5
51023: ARRAY
51024: PUSH
51025: LD_INT 1
51027: ARRAY
51028: PPUSH
51029: LD_EXP 17
51033: PUSH
51034: LD_VAR 0 6
51038: ARRAY
51039: PUSH
51040: LD_VAR 0 5
51044: ARRAY
51045: PUSH
51046: LD_INT 2
51048: ARRAY
51049: PPUSH
51050: LD_VAR 0 1
51054: PPUSH
51055: CALL_OW 255
51059: PPUSH
51060: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
51064: LD_ADDR_EXP 17
51068: PUSH
51069: LD_EXP 17
51073: PPUSH
51074: LD_VAR 0 6
51078: PPUSH
51079: LD_EXP 17
51083: PUSH
51084: LD_VAR 0 6
51088: ARRAY
51089: PPUSH
51090: LD_VAR 0 5
51094: PPUSH
51095: CALL_OW 3
51099: PPUSH
51100: CALL_OW 1
51104: ST_TO_ADDR
// end ; end ;
51105: GO 50943
51107: POP
51108: POP
// end ;
51109: LD_VAR 0 4
51113: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
51114: LD_INT 0
51116: PPUSH
51117: PPUSH
51118: PPUSH
51119: PPUSH
51120: PPUSH
51121: PPUSH
51122: PPUSH
51123: PPUSH
51124: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
51125: LD_VAR 0 1
51129: PPUSH
51130: CALL_OW 264
51134: PUSH
51135: LD_INT 81
51137: EQUAL
51138: NOT
51139: IFTRUE 51154
51141: PUSH
51142: LD_VAR 0 1
51146: PUSH
51147: LD_EXP 16
51151: IN
51152: NOT
51153: OR
51154: IFFALSE 51158
// exit ;
51156: GO 51484
// index := GetElementIndex ( minersList , unit ) ;
51158: LD_ADDR_VAR 0 6
51162: PUSH
51163: LD_EXP 16
51167: PPUSH
51168: LD_VAR 0 1
51172: PPUSH
51173: CALL 7701 0 2
51177: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
51178: LD_ADDR_VAR 0 8
51182: PUSH
51183: LD_EXP 18
51187: PUSH
51188: LD_EXP 17
51192: PUSH
51193: LD_VAR 0 6
51197: ARRAY
51198: MINUS
51199: ST_TO_ADDR
// if not minesFreeAmount then
51200: LD_VAR 0 8
51204: NOT
51205: IFFALSE 51209
// exit ;
51207: GO 51484
// tmp := [ ] ;
51209: LD_ADDR_VAR 0 7
51213: PUSH
51214: EMPTY
51215: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
51216: LD_ADDR_VAR 0 5
51220: PUSH
51221: DOUBLE
51222: LD_INT 1
51224: DEC
51225: ST_TO_ADDR
51226: LD_VAR 0 8
51230: PUSH
51231: FOR_TO
51232: IFFALSE 51431
// begin _d := rand ( 0 , 5 ) ;
51234: LD_ADDR_VAR 0 11
51238: PUSH
51239: LD_INT 0
51241: PPUSH
51242: LD_INT 5
51244: PPUSH
51245: CALL_OW 12
51249: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
51250: LD_ADDR_VAR 0 12
51254: PUSH
51255: LD_INT 2
51257: PPUSH
51258: LD_INT 6
51260: PPUSH
51261: CALL_OW 12
51265: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
51266: LD_ADDR_VAR 0 9
51270: PUSH
51271: LD_VAR 0 2
51275: PPUSH
51276: LD_VAR 0 11
51280: PPUSH
51281: LD_VAR 0 12
51285: PPUSH
51286: CALL_OW 272
51290: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
51291: LD_ADDR_VAR 0 10
51295: PUSH
51296: LD_VAR 0 3
51300: PPUSH
51301: LD_VAR 0 11
51305: PPUSH
51306: LD_VAR 0 12
51310: PPUSH
51311: CALL_OW 273
51315: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
51316: LD_VAR 0 9
51320: PPUSH
51321: LD_VAR 0 10
51325: PPUSH
51326: CALL_OW 488
51330: IFFALSE 51354
51332: PUSH
51333: LD_VAR 0 9
51337: PUSH
51338: LD_VAR 0 10
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_VAR 0 7
51351: IN
51352: NOT
51353: AND
51354: IFFALSE 51373
51356: PUSH
51357: LD_VAR 0 9
51361: PPUSH
51362: LD_VAR 0 10
51366: PPUSH
51367: CALL_OW 458
51371: NOT
51372: AND
51373: IFFALSE 51415
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
51375: LD_ADDR_VAR 0 7
51379: PUSH
51380: LD_VAR 0 7
51384: PPUSH
51385: LD_VAR 0 7
51389: PUSH
51390: LD_INT 1
51392: PLUS
51393: PPUSH
51394: LD_VAR 0 9
51398: PUSH
51399: LD_VAR 0 10
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PPUSH
51408: CALL_OW 1
51412: ST_TO_ADDR
51413: GO 51429
// i := i - 1 ;
51415: LD_ADDR_VAR 0 5
51419: PUSH
51420: LD_VAR 0 5
51424: PUSH
51425: LD_INT 1
51427: MINUS
51428: ST_TO_ADDR
// end ;
51429: GO 51231
51431: POP
51432: POP
// for i in tmp do
51433: LD_ADDR_VAR 0 5
51437: PUSH
51438: LD_VAR 0 7
51442: PUSH
51443: FOR_IN
51444: IFFALSE 51482
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
51446: LD_VAR 0 1
51450: PPUSH
51451: LD_VAR 0 5
51455: PUSH
51456: LD_INT 1
51458: ARRAY
51459: PPUSH
51460: LD_VAR 0 5
51464: PUSH
51465: LD_INT 2
51467: ARRAY
51468: PPUSH
51469: CALL 50475 0 3
51473: NOT
51474: IFFALSE 51480
// exit ;
51476: POP
51477: POP
51478: GO 51484
51480: GO 51443
51482: POP
51483: POP
// end ;
51484: LD_VAR 0 4
51488: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
51489: LD_INT 0
51491: PPUSH
51492: PPUSH
51493: PPUSH
51494: PPUSH
51495: PPUSH
51496: PPUSH
51497: PPUSH
51498: PPUSH
51499: PPUSH
// if GetClass ( unit ) <> class_sniper then
51500: LD_VAR 0 1
51504: PPUSH
51505: CALL_OW 257
51509: PUSH
51510: LD_INT 5
51512: NONEQUAL
51513: IFFALSE 51517
// exit ;
51515: GO 51987
// dist := 8 ;
51517: LD_ADDR_VAR 0 5
51521: PUSH
51522: LD_INT 8
51524: ST_TO_ADDR
// viewRange := 12 ;
51525: LD_ADDR_VAR 0 8
51529: PUSH
51530: LD_INT 12
51532: ST_TO_ADDR
// side := GetSide ( unit ) ;
51533: LD_ADDR_VAR 0 6
51537: PUSH
51538: LD_VAR 0 1
51542: PPUSH
51543: CALL_OW 255
51547: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
51548: LD_INT 61
51550: PPUSH
51551: LD_VAR 0 6
51555: PPUSH
51556: CALL_OW 321
51560: PUSH
51561: LD_INT 2
51563: EQUAL
51564: IFFALSE 51574
// viewRange := 16 ;
51566: LD_ADDR_VAR 0 8
51570: PUSH
51571: LD_INT 16
51573: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
51574: LD_VAR 0 1
51578: PPUSH
51579: LD_VAR 0 2
51583: PPUSH
51584: LD_VAR 0 3
51588: PPUSH
51589: CALL_OW 297
51593: PUSH
51594: LD_VAR 0 5
51598: GREATER
51599: IFFALSE 51678
// begin ComMoveXY ( unit , x , y ) ;
51601: LD_VAR 0 1
51605: PPUSH
51606: LD_VAR 0 2
51610: PPUSH
51611: LD_VAR 0 3
51615: PPUSH
51616: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
51620: LD_INT 35
51622: PPUSH
51623: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
51627: LD_VAR 0 1
51631: PPUSH
51632: LD_VAR 0 2
51636: PPUSH
51637: LD_VAR 0 3
51641: PPUSH
51642: CALL 39757 0 3
51646: NOT
51647: IFFALSE 51651
// exit ;
51649: GO 51987
// until GetDistUnitXY ( unit , x , y ) < dist ;
51651: LD_VAR 0 1
51655: PPUSH
51656: LD_VAR 0 2
51660: PPUSH
51661: LD_VAR 0 3
51665: PPUSH
51666: CALL_OW 297
51670: PUSH
51671: LD_VAR 0 5
51675: LESS
51676: IFFALSE 51620
// end ; ComTurnXY ( unit , x , y ) ;
51678: LD_VAR 0 1
51682: PPUSH
51683: LD_VAR 0 2
51687: PPUSH
51688: LD_VAR 0 3
51692: PPUSH
51693: CALL_OW 118
// repeat if Multiplayer then
51697: LD_OWVAR 4
51701: IFFALSE 51712
// wait ( 35 ) else
51703: LD_INT 35
51705: PPUSH
51706: CALL_OW 67
51710: GO 51719
// wait ( 5 ) ;
51712: LD_INT 5
51714: PPUSH
51715: CALL_OW 67
// _d := GetDir ( unit ) ;
51719: LD_ADDR_VAR 0 11
51723: PUSH
51724: LD_VAR 0 1
51728: PPUSH
51729: CALL_OW 254
51733: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
51734: LD_ADDR_VAR 0 7
51738: PUSH
51739: LD_VAR 0 1
51743: PPUSH
51744: CALL_OW 250
51748: PPUSH
51749: LD_VAR 0 1
51753: PPUSH
51754: CALL_OW 251
51758: PPUSH
51759: LD_VAR 0 2
51763: PPUSH
51764: LD_VAR 0 3
51768: PPUSH
51769: CALL 42393 0 4
51773: ST_TO_ADDR
// until dir = _d ;
51774: LD_VAR 0 7
51778: PUSH
51779: LD_VAR 0 11
51783: EQUAL
51784: IFFALSE 51697
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
51786: LD_ADDR_VAR 0 9
51790: PUSH
51791: LD_VAR 0 1
51795: PPUSH
51796: CALL_OW 250
51800: PPUSH
51801: LD_VAR 0 7
51805: PPUSH
51806: LD_VAR 0 5
51810: PPUSH
51811: CALL_OW 272
51815: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
51816: LD_ADDR_VAR 0 10
51820: PUSH
51821: LD_VAR 0 1
51825: PPUSH
51826: CALL_OW 251
51830: PPUSH
51831: LD_VAR 0 7
51835: PPUSH
51836: LD_VAR 0 5
51840: PPUSH
51841: CALL_OW 273
51845: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51846: LD_VAR 0 9
51850: PPUSH
51851: LD_VAR 0 10
51855: PPUSH
51856: CALL_OW 488
51860: NOT
51861: IFFALSE 51865
// exit ;
51863: GO 51987
// ComAnimCustom ( unit , 1 ) ;
51865: LD_VAR 0 1
51869: PPUSH
51870: LD_INT 1
51872: PPUSH
51873: CALL_OW 592
// p := 0 ;
51877: LD_ADDR_VAR 0 12
51881: PUSH
51882: LD_INT 0
51884: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
51885: LD_VAR 0 9
51889: PPUSH
51890: LD_VAR 0 10
51894: PPUSH
51895: LD_VAR 0 6
51899: PPUSH
51900: LD_VAR 0 8
51904: PPUSH
51905: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
51909: LD_INT 35
51911: PPUSH
51912: CALL_OW 67
// p := Inc ( p ) ;
51916: LD_ADDR_VAR 0 12
51920: PUSH
51921: LD_VAR 0 12
51925: PPUSH
51926: CALL 42349 0 1
51930: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
51931: LD_VAR 0 12
51935: PUSH
51936: LD_INT 3
51938: EQUAL
51939: IFTRUE 51953
51941: PUSH
51942: LD_VAR 0 1
51946: PPUSH
51947: CALL_OW 302
51951: NOT
51952: OR
51953: IFTRUE 51966
51955: PUSH
51956: LD_VAR 0 1
51960: PPUSH
51961: CALL_OW 301
51965: OR
51966: IFFALSE 51909
// RemoveSeeing ( _x , _y , side ) ;
51968: LD_VAR 0 9
51972: PPUSH
51973: LD_VAR 0 10
51977: PPUSH
51978: LD_VAR 0 6
51982: PPUSH
51983: CALL_OW 331
// end ;
51987: LD_VAR 0 4
51991: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
51992: LD_INT 0
51994: PPUSH
51995: PPUSH
51996: PPUSH
51997: PPUSH
51998: PPUSH
51999: PPUSH
52000: PPUSH
52001: PPUSH
52002: PPUSH
52003: PPUSH
52004: PPUSH
// if not unit then
52005: LD_VAR 0 1
52009: NOT
52010: IFFALSE 52014
// exit ;
52012: GO 52285
// side := GetSide ( unit ) ;
52014: LD_ADDR_VAR 0 3
52018: PUSH
52019: LD_VAR 0 1
52023: PPUSH
52024: CALL_OW 255
52028: ST_TO_ADDR
// x := GetX ( unit ) ;
52029: LD_ADDR_VAR 0 5
52033: PUSH
52034: LD_VAR 0 1
52038: PPUSH
52039: CALL_OW 250
52043: ST_TO_ADDR
// y := GetY ( unit ) ;
52044: LD_ADDR_VAR 0 6
52048: PUSH
52049: LD_VAR 0 1
52053: PPUSH
52054: CALL_OW 251
52058: ST_TO_ADDR
// r := 8 ;
52059: LD_ADDR_VAR 0 4
52063: PUSH
52064: LD_INT 8
52066: ST_TO_ADDR
// if x - r < 0 then
52067: LD_VAR 0 5
52071: PUSH
52072: LD_VAR 0 4
52076: MINUS
52077: PUSH
52078: LD_INT 0
52080: LESS
52081: IFFALSE 52093
// min_x := 0 else
52083: LD_ADDR_VAR 0 7
52087: PUSH
52088: LD_INT 0
52090: ST_TO_ADDR
52091: GO 52109
// min_x := x - r ;
52093: LD_ADDR_VAR 0 7
52097: PUSH
52098: LD_VAR 0 5
52102: PUSH
52103: LD_VAR 0 4
52107: MINUS
52108: ST_TO_ADDR
// if y - r < 0 then
52109: LD_VAR 0 6
52113: PUSH
52114: LD_VAR 0 4
52118: MINUS
52119: PUSH
52120: LD_INT 0
52122: LESS
52123: IFFALSE 52135
// min_y := 0 else
52125: LD_ADDR_VAR 0 8
52129: PUSH
52130: LD_INT 0
52132: ST_TO_ADDR
52133: GO 52151
// min_y := y - r ;
52135: LD_ADDR_VAR 0 8
52139: PUSH
52140: LD_VAR 0 6
52144: PUSH
52145: LD_VAR 0 4
52149: MINUS
52150: ST_TO_ADDR
// max_x := x + r ;
52151: LD_ADDR_VAR 0 9
52155: PUSH
52156: LD_VAR 0 5
52160: PUSH
52161: LD_VAR 0 4
52165: PLUS
52166: ST_TO_ADDR
// max_y := y + r ;
52167: LD_ADDR_VAR 0 10
52171: PUSH
52172: LD_VAR 0 6
52176: PUSH
52177: LD_VAR 0 4
52181: PLUS
52182: ST_TO_ADDR
// for _x = min_x to max_x do
52183: LD_ADDR_VAR 0 11
52187: PUSH
52188: DOUBLE
52189: LD_VAR 0 7
52193: DEC
52194: ST_TO_ADDR
52195: LD_VAR 0 9
52199: PUSH
52200: FOR_TO
52201: IFFALSE 52283
// for _y = min_y to max_y do
52203: LD_ADDR_VAR 0 12
52207: PUSH
52208: DOUBLE
52209: LD_VAR 0 8
52213: DEC
52214: ST_TO_ADDR
52215: LD_VAR 0 10
52219: PUSH
52220: FOR_TO
52221: IFFALSE 52279
// begin if not ValidHex ( _x , _y ) then
52223: LD_VAR 0 11
52227: PPUSH
52228: LD_VAR 0 12
52232: PPUSH
52233: CALL_OW 488
52237: NOT
52238: IFFALSE 52242
// continue ;
52240: GO 52220
// if MineAtPos ( _x , _y ) then
52242: LD_VAR 0 11
52246: PPUSH
52247: LD_VAR 0 12
52251: PPUSH
52252: CALL_OW 458
52256: IFFALSE 52277
// ViewMineAtPos ( _x , _y , side ) ;
52258: LD_VAR 0 11
52262: PPUSH
52263: LD_VAR 0 12
52267: PPUSH
52268: LD_VAR 0 3
52272: PPUSH
52273: CALL_OW 457
// end ;
52277: GO 52220
52279: POP
52280: POP
52281: GO 52200
52283: POP
52284: POP
// end ;
52285: LD_VAR 0 2
52289: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
52290: LD_INT 0
52292: PPUSH
52293: PPUSH
52294: PPUSH
52295: PPUSH
52296: PPUSH
52297: PPUSH
52298: PPUSH
// if not units then
52299: LD_VAR 0 1
52303: NOT
52304: IFFALSE 52308
// exit ;
52306: GO 52772
// scaners := [ ] ;
52308: LD_ADDR_VAR 0 6
52312: PUSH
52313: EMPTY
52314: ST_TO_ADDR
// for i in units do
52315: LD_ADDR_VAR 0 3
52319: PUSH
52320: LD_VAR 0 1
52324: PUSH
52325: FOR_IN
52326: IFFALSE 52483
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
52328: LD_VAR 0 3
52332: PPUSH
52333: CALL_OW 264
52337: PUSH
52338: LD_INT 11
52340: NONEQUAL
52341: IFTRUE 52355
52343: PUSH
52344: LD_VAR 0 3
52348: PPUSH
52349: CALL_OW 302
52353: NOT
52354: OR
52355: IFTRUE 52372
52357: PUSH
52358: LD_VAR 0 3
52362: PPUSH
52363: CALL_OW 110
52367: PUSH
52368: LD_INT 502
52370: EQUAL
52371: OR
52372: IFFALSE 52376
// continue ;
52374: GO 52325
// ComStop ( i ) ;
52376: LD_VAR 0 3
52380: PPUSH
52381: CALL_OW 141
// x := GetX ( i ) ;
52385: LD_ADDR_VAR 0 4
52389: PUSH
52390: LD_VAR 0 3
52394: PPUSH
52395: CALL_OW 250
52399: ST_TO_ADDR
// y := GetY ( i ) ;
52400: LD_ADDR_VAR 0 5
52404: PUSH
52405: LD_VAR 0 3
52409: PPUSH
52410: CALL_OW 251
52414: ST_TO_ADDR
// if GetSide ( i ) = your_side then
52415: LD_VAR 0 3
52419: PPUSH
52420: CALL_OW 255
52424: PUSH
52425: LD_OWVAR 2
52429: EQUAL
52430: IFFALSE 52449
// PlaySoundXY ( x , y , mineDetector ) ;
52432: LD_VAR 0 4
52436: PPUSH
52437: LD_VAR 0 5
52441: PPUSH
52442: LD_STRING mineDetector
52444: PPUSH
52445: CALL_OW 366
// scaners := Join ( scaners , i ) ;
52449: LD_ADDR_VAR 0 6
52453: PUSH
52454: LD_VAR 0 6
52458: PPUSH
52459: LD_VAR 0 3
52463: PPUSH
52464: CALL 40976 0 2
52468: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
52469: LD_VAR 0 3
52473: PPUSH
52474: LD_INT 502
52476: PPUSH
52477: CALL_OW 109
// end ;
52481: GO 52325
52483: POP
52484: POP
// if not scaners then
52485: LD_VAR 0 6
52489: NOT
52490: IFFALSE 52494
// exit ;
52492: GO 52772
// wait ( 3 ) ;
52494: LD_INT 3
52496: PPUSH
52497: CALL_OW 67
// timer := 6 ;
52501: LD_ADDR_VAR 0 7
52505: PUSH
52506: LD_INT 6
52508: ST_TO_ADDR
// repeat for i in scaners do
52509: LD_ADDR_VAR 0 3
52513: PUSH
52514: LD_VAR 0 6
52518: PUSH
52519: FOR_IN
52520: IFFALSE 52670
// begin side := GetSide ( i ) ;
52522: LD_ADDR_VAR 0 8
52526: PUSH
52527: LD_VAR 0 3
52531: PPUSH
52532: CALL_OW 255
52536: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
52537: LD_VAR 0 3
52541: PPUSH
52542: CALL_OW 302
52546: NOT
52547: IFTRUE 52560
52549: PUSH
52550: LD_VAR 0 3
52554: PPUSH
52555: CALL_OW 314
52559: OR
52560: IFTRUE 52591
52562: PUSH
52563: LD_VAR 0 3
52567: PPUSH
52568: CALL_OW 263
52572: PUSH
52573: LD_INT 1
52575: EQUAL
52576: IFFALSE 52590
52578: PUSH
52579: LD_VAR 0 3
52583: PPUSH
52584: CALL_OW 311
52588: NOT
52589: AND
52590: OR
52591: IFFALSE 52635
// begin SetUnitDisplayNumber ( i , 0 ) ;
52593: LD_VAR 0 3
52597: PPUSH
52598: LD_INT 0
52600: PPUSH
52601: CALL_OW 505
// SetTag ( i , 0 ) ;
52605: LD_VAR 0 3
52609: PPUSH
52610: LD_INT 0
52612: PPUSH
52613: CALL_OW 109
// scaners := scaners diff i ;
52617: LD_ADDR_VAR 0 6
52621: PUSH
52622: LD_VAR 0 6
52626: PUSH
52627: LD_VAR 0 3
52631: DIFF
52632: ST_TO_ADDR
// continue ;
52633: GO 52519
// end ; if side in [ your_side , 9 ] then
52635: LD_VAR 0 8
52639: PUSH
52640: LD_OWVAR 2
52644: PUSH
52645: LD_INT 9
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: IN
52652: IFFALSE 52668
// SetUnitDisplayNumber ( i , timer ) ;
52654: LD_VAR 0 3
52658: PPUSH
52659: LD_VAR 0 7
52663: PPUSH
52664: CALL_OW 505
// end ;
52668: GO 52519
52670: POP
52671: POP
// if not scaners then
52672: LD_VAR 0 6
52676: NOT
52677: IFFALSE 52681
// exit ;
52679: GO 52772
// timer := Dec ( timer ) ;
52681: LD_ADDR_VAR 0 7
52685: PUSH
52686: LD_VAR 0 7
52690: PPUSH
52691: CALL 42371 0 1
52695: ST_TO_ADDR
// wait ( 0 0$1 ) ;
52696: LD_INT 35
52698: PPUSH
52699: CALL_OW 67
// until timer = 0 ;
52703: LD_VAR 0 7
52707: PUSH
52708: LD_INT 0
52710: EQUAL
52711: IFFALSE 52509
// if not scaners then
52713: LD_VAR 0 6
52717: NOT
52718: IFFALSE 52722
// exit ;
52720: GO 52772
// for i in scaners do
52722: LD_ADDR_VAR 0 3
52726: PUSH
52727: LD_VAR 0 6
52731: PUSH
52732: FOR_IN
52733: IFFALSE 52770
// begin SetUnitDisplayNumber ( i , 0 ) ;
52735: LD_VAR 0 3
52739: PPUSH
52740: LD_INT 0
52742: PPUSH
52743: CALL_OW 505
// SetTag ( i , 0 ) ;
52747: LD_VAR 0 3
52751: PPUSH
52752: LD_INT 0
52754: PPUSH
52755: CALL_OW 109
// RevealDetectorMine ( i ) ;
52759: LD_VAR 0 3
52763: PPUSH
52764: CALL 51992 0 1
// end ;
52768: GO 52732
52770: POP
52771: POP
// end ;
52772: LD_VAR 0 2
52776: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
52777: LD_INT 0
52779: PPUSH
// if p1 = mine_detector_mode then
52780: LD_VAR 0 2
52784: PUSH
52785: LD_INT 103
52787: EQUAL
52788: IFFALSE 52799
// DetectMine ( units ) ;
52790: LD_VAR 0 1
52794: PPUSH
52795: CALL 52290 0 1
// end ; end_of_file
52799: LD_VAR 0 7
52803: RET
// export globalGameSaveCounter ; every 0 0$1 do
52804: GO 52806
52806: DISABLE
// begin enable ;
52807: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
52808: LD_STRING updateTimer(
52810: PUSH
52811: LD_OWVAR 1
52815: STR
52816: PUSH
52817: LD_STRING );
52819: STR
52820: PPUSH
52821: CALL_OW 559
// end ;
52825: END
// every 0 0$1 do
52826: GO 52828
52828: DISABLE
// begin globalGameSaveCounter := 0 ;
52829: LD_ADDR_EXP 19
52833: PUSH
52834: LD_INT 0
52836: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
52837: LD_STRING setGameSaveCounter(0)
52839: PPUSH
52840: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
52844: LD_STRING initStreamRollete();
52846: PPUSH
52847: CALL_OW 559
// InitStreamMode ;
52851: CALL 54203 0 0
// DefineStreamItems ( false ) ;
52855: LD_INT 0
52857: PPUSH
52858: CALL 54667 0 1
// end ;
52862: END
// export function SOS_MapStart ( ) ; begin
52863: LD_INT 0
52865: PPUSH
// if streamModeActive then
52866: LD_EXP 20
52870: IFFALSE 52879
// DefineStreamItems ( true ) ;
52872: LD_INT 1
52874: PPUSH
52875: CALL 54667 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
52879: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
52881: PPUSH
52882: CALL_OW 559
// UpdateLuaVariables ( ) ;
52886: CALL 52903 0 0
// UpdateFactoryWaypoints ( ) ;
52890: CALL 67789 0 0
// UpdateWarehouseGatheringPoints ( ) ;
52894: CALL 68041 0 0
// end ;
52898: LD_VAR 0 1
52902: RET
// function UpdateLuaVariables ( ) ; begin
52903: LD_INT 0
52905: PPUSH
// if globalGameSaveCounter then
52906: LD_EXP 19
52910: IFFALSE 52944
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
52912: LD_ADDR_EXP 19
52916: PUSH
52917: LD_EXP 19
52921: PPUSH
52922: CALL 42349 0 1
52926: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
52927: LD_STRING setGameSaveCounter(
52929: PUSH
52930: LD_EXP 19
52934: STR
52935: PUSH
52936: LD_STRING )
52938: STR
52939: PPUSH
52940: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
52944: LD_STRING setGameDifficulty(
52946: PUSH
52947: LD_OWVAR 67
52951: STR
52952: PUSH
52953: LD_STRING )
52955: STR
52956: PPUSH
52957: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
52961: LD_STRING displayDifficulty(
52963: PUSH
52964: LD_OWVAR 67
52968: STR
52969: PUSH
52970: LD_STRING )
52972: STR
52973: PPUSH
52974: CALL_OW 559
// end ;
52978: LD_VAR 0 1
52982: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
52983: LD_INT 0
52985: PPUSH
// if p2 = stream_mode then
52986: LD_VAR 0 2
52990: PUSH
52991: LD_INT 100
52993: EQUAL
52994: IFFALSE 53997
// begin if not StreamModeActive then
52996: LD_EXP 20
53000: NOT
53001: IFFALSE 53011
// StreamModeActive := true ;
53003: LD_ADDR_EXP 20
53007: PUSH
53008: LD_INT 1
53010: ST_TO_ADDR
// if p3 = 0 then
53011: LD_VAR 0 3
53015: PUSH
53016: LD_INT 0
53018: EQUAL
53019: IFFALSE 53025
// InitStreamMode ;
53021: CALL 54203 0 0
// if p3 = 1 then
53025: LD_VAR 0 3
53029: PUSH
53030: LD_INT 1
53032: EQUAL
53033: IFFALSE 53043
// sRocket := true ;
53035: LD_ADDR_EXP 25
53039: PUSH
53040: LD_INT 1
53042: ST_TO_ADDR
// if p3 = 2 then
53043: LD_VAR 0 3
53047: PUSH
53048: LD_INT 2
53050: EQUAL
53051: IFFALSE 53061
// sSpeed := true ;
53053: LD_ADDR_EXP 24
53057: PUSH
53058: LD_INT 1
53060: ST_TO_ADDR
// if p3 = 3 then
53061: LD_VAR 0 3
53065: PUSH
53066: LD_INT 3
53068: EQUAL
53069: IFFALSE 53079
// sEngine := true ;
53071: LD_ADDR_EXP 26
53075: PUSH
53076: LD_INT 1
53078: ST_TO_ADDR
// if p3 = 4 then
53079: LD_VAR 0 3
53083: PUSH
53084: LD_INT 4
53086: EQUAL
53087: IFFALSE 53097
// sSpec := true ;
53089: LD_ADDR_EXP 23
53093: PUSH
53094: LD_INT 1
53096: ST_TO_ADDR
// if p3 = 5 then
53097: LD_VAR 0 3
53101: PUSH
53102: LD_INT 5
53104: EQUAL
53105: IFFALSE 53115
// sLevel := true ;
53107: LD_ADDR_EXP 27
53111: PUSH
53112: LD_INT 1
53114: ST_TO_ADDR
// if p3 = 6 then
53115: LD_VAR 0 3
53119: PUSH
53120: LD_INT 6
53122: EQUAL
53123: IFFALSE 53133
// sArmoury := true ;
53125: LD_ADDR_EXP 28
53129: PUSH
53130: LD_INT 1
53132: ST_TO_ADDR
// if p3 = 7 then
53133: LD_VAR 0 3
53137: PUSH
53138: LD_INT 7
53140: EQUAL
53141: IFFALSE 53151
// sRadar := true ;
53143: LD_ADDR_EXP 29
53147: PUSH
53148: LD_INT 1
53150: ST_TO_ADDR
// if p3 = 8 then
53151: LD_VAR 0 3
53155: PUSH
53156: LD_INT 8
53158: EQUAL
53159: IFFALSE 53169
// sBunker := true ;
53161: LD_ADDR_EXP 30
53165: PUSH
53166: LD_INT 1
53168: ST_TO_ADDR
// if p3 = 9 then
53169: LD_VAR 0 3
53173: PUSH
53174: LD_INT 9
53176: EQUAL
53177: IFFALSE 53187
// sHack := true ;
53179: LD_ADDR_EXP 31
53183: PUSH
53184: LD_INT 1
53186: ST_TO_ADDR
// if p3 = 10 then
53187: LD_VAR 0 3
53191: PUSH
53192: LD_INT 10
53194: EQUAL
53195: IFFALSE 53205
// sFire := true ;
53197: LD_ADDR_EXP 32
53201: PUSH
53202: LD_INT 1
53204: ST_TO_ADDR
// if p3 = 11 then
53205: LD_VAR 0 3
53209: PUSH
53210: LD_INT 11
53212: EQUAL
53213: IFFALSE 53223
// sRefresh := true ;
53215: LD_ADDR_EXP 33
53219: PUSH
53220: LD_INT 1
53222: ST_TO_ADDR
// if p3 = 12 then
53223: LD_VAR 0 3
53227: PUSH
53228: LD_INT 12
53230: EQUAL
53231: IFFALSE 53241
// sExp := true ;
53233: LD_ADDR_EXP 34
53237: PUSH
53238: LD_INT 1
53240: ST_TO_ADDR
// if p3 = 13 then
53241: LD_VAR 0 3
53245: PUSH
53246: LD_INT 13
53248: EQUAL
53249: IFFALSE 53259
// sDepot := true ;
53251: LD_ADDR_EXP 35
53255: PUSH
53256: LD_INT 1
53258: ST_TO_ADDR
// if p3 = 14 then
53259: LD_VAR 0 3
53263: PUSH
53264: LD_INT 14
53266: EQUAL
53267: IFFALSE 53277
// sFlag := true ;
53269: LD_ADDR_EXP 36
53273: PUSH
53274: LD_INT 1
53276: ST_TO_ADDR
// if p3 = 15 then
53277: LD_VAR 0 3
53281: PUSH
53282: LD_INT 15
53284: EQUAL
53285: IFFALSE 53295
// sKamikadze := true ;
53287: LD_ADDR_EXP 44
53291: PUSH
53292: LD_INT 1
53294: ST_TO_ADDR
// if p3 = 16 then
53295: LD_VAR 0 3
53299: PUSH
53300: LD_INT 16
53302: EQUAL
53303: IFFALSE 53313
// sTroll := true ;
53305: LD_ADDR_EXP 45
53309: PUSH
53310: LD_INT 1
53312: ST_TO_ADDR
// if p3 = 17 then
53313: LD_VAR 0 3
53317: PUSH
53318: LD_INT 17
53320: EQUAL
53321: IFFALSE 53331
// sSlow := true ;
53323: LD_ADDR_EXP 46
53327: PUSH
53328: LD_INT 1
53330: ST_TO_ADDR
// if p3 = 18 then
53331: LD_VAR 0 3
53335: PUSH
53336: LD_INT 18
53338: EQUAL
53339: IFFALSE 53349
// sLack := true ;
53341: LD_ADDR_EXP 47
53345: PUSH
53346: LD_INT 1
53348: ST_TO_ADDR
// if p3 = 19 then
53349: LD_VAR 0 3
53353: PUSH
53354: LD_INT 19
53356: EQUAL
53357: IFFALSE 53367
// sTank := true ;
53359: LD_ADDR_EXP 49
53363: PUSH
53364: LD_INT 1
53366: ST_TO_ADDR
// if p3 = 20 then
53367: LD_VAR 0 3
53371: PUSH
53372: LD_INT 20
53374: EQUAL
53375: IFFALSE 53385
// sRemote := true ;
53377: LD_ADDR_EXP 50
53381: PUSH
53382: LD_INT 1
53384: ST_TO_ADDR
// if p3 = 21 then
53385: LD_VAR 0 3
53389: PUSH
53390: LD_INT 21
53392: EQUAL
53393: IFFALSE 53403
// sPowell := true ;
53395: LD_ADDR_EXP 51
53399: PUSH
53400: LD_INT 1
53402: ST_TO_ADDR
// if p3 = 22 then
53403: LD_VAR 0 3
53407: PUSH
53408: LD_INT 22
53410: EQUAL
53411: IFFALSE 53421
// sTeleport := true ;
53413: LD_ADDR_EXP 54
53417: PUSH
53418: LD_INT 1
53420: ST_TO_ADDR
// if p3 = 23 then
53421: LD_VAR 0 3
53425: PUSH
53426: LD_INT 23
53428: EQUAL
53429: IFFALSE 53439
// sOilTower := true ;
53431: LD_ADDR_EXP 56
53435: PUSH
53436: LD_INT 1
53438: ST_TO_ADDR
// if p3 = 24 then
53439: LD_VAR 0 3
53443: PUSH
53444: LD_INT 24
53446: EQUAL
53447: IFFALSE 53457
// sShovel := true ;
53449: LD_ADDR_EXP 57
53453: PUSH
53454: LD_INT 1
53456: ST_TO_ADDR
// if p3 = 25 then
53457: LD_VAR 0 3
53461: PUSH
53462: LD_INT 25
53464: EQUAL
53465: IFFALSE 53475
// sSheik := true ;
53467: LD_ADDR_EXP 58
53471: PUSH
53472: LD_INT 1
53474: ST_TO_ADDR
// if p3 = 26 then
53475: LD_VAR 0 3
53479: PUSH
53480: LD_INT 26
53482: EQUAL
53483: IFFALSE 53493
// sEarthquake := true ;
53485: LD_ADDR_EXP 60
53489: PUSH
53490: LD_INT 1
53492: ST_TO_ADDR
// if p3 = 27 then
53493: LD_VAR 0 3
53497: PUSH
53498: LD_INT 27
53500: EQUAL
53501: IFFALSE 53511
// sAI := true ;
53503: LD_ADDR_EXP 61
53507: PUSH
53508: LD_INT 1
53510: ST_TO_ADDR
// if p3 = 28 then
53511: LD_VAR 0 3
53515: PUSH
53516: LD_INT 28
53518: EQUAL
53519: IFFALSE 53529
// sCargo := true ;
53521: LD_ADDR_EXP 64
53525: PUSH
53526: LD_INT 1
53528: ST_TO_ADDR
// if p3 = 29 then
53529: LD_VAR 0 3
53533: PUSH
53534: LD_INT 29
53536: EQUAL
53537: IFFALSE 53547
// sDLaser := true ;
53539: LD_ADDR_EXP 65
53543: PUSH
53544: LD_INT 1
53546: ST_TO_ADDR
// if p3 = 30 then
53547: LD_VAR 0 3
53551: PUSH
53552: LD_INT 30
53554: EQUAL
53555: IFFALSE 53565
// sExchange := true ;
53557: LD_ADDR_EXP 66
53561: PUSH
53562: LD_INT 1
53564: ST_TO_ADDR
// if p3 = 31 then
53565: LD_VAR 0 3
53569: PUSH
53570: LD_INT 31
53572: EQUAL
53573: IFFALSE 53583
// sFac := true ;
53575: LD_ADDR_EXP 67
53579: PUSH
53580: LD_INT 1
53582: ST_TO_ADDR
// if p3 = 32 then
53583: LD_VAR 0 3
53587: PUSH
53588: LD_INT 32
53590: EQUAL
53591: IFFALSE 53601
// sPower := true ;
53593: LD_ADDR_EXP 68
53597: PUSH
53598: LD_INT 1
53600: ST_TO_ADDR
// if p3 = 33 then
53601: LD_VAR 0 3
53605: PUSH
53606: LD_INT 33
53608: EQUAL
53609: IFFALSE 53619
// sRandom := true ;
53611: LD_ADDR_EXP 69
53615: PUSH
53616: LD_INT 1
53618: ST_TO_ADDR
// if p3 = 34 then
53619: LD_VAR 0 3
53623: PUSH
53624: LD_INT 34
53626: EQUAL
53627: IFFALSE 53637
// sShield := true ;
53629: LD_ADDR_EXP 70
53633: PUSH
53634: LD_INT 1
53636: ST_TO_ADDR
// if p3 = 35 then
53637: LD_VAR 0 3
53641: PUSH
53642: LD_INT 35
53644: EQUAL
53645: IFFALSE 53655
// sTime := true ;
53647: LD_ADDR_EXP 71
53651: PUSH
53652: LD_INT 1
53654: ST_TO_ADDR
// if p3 = 36 then
53655: LD_VAR 0 3
53659: PUSH
53660: LD_INT 36
53662: EQUAL
53663: IFFALSE 53673
// sTools := true ;
53665: LD_ADDR_EXP 72
53669: PUSH
53670: LD_INT 1
53672: ST_TO_ADDR
// if p3 = 101 then
53673: LD_VAR 0 3
53677: PUSH
53678: LD_INT 101
53680: EQUAL
53681: IFFALSE 53691
// sSold := true ;
53683: LD_ADDR_EXP 37
53687: PUSH
53688: LD_INT 1
53690: ST_TO_ADDR
// if p3 = 102 then
53691: LD_VAR 0 3
53695: PUSH
53696: LD_INT 102
53698: EQUAL
53699: IFFALSE 53709
// sDiff := true ;
53701: LD_ADDR_EXP 38
53705: PUSH
53706: LD_INT 1
53708: ST_TO_ADDR
// if p3 = 103 then
53709: LD_VAR 0 3
53713: PUSH
53714: LD_INT 103
53716: EQUAL
53717: IFFALSE 53727
// sFog := true ;
53719: LD_ADDR_EXP 41
53723: PUSH
53724: LD_INT 1
53726: ST_TO_ADDR
// if p3 = 104 then
53727: LD_VAR 0 3
53731: PUSH
53732: LD_INT 104
53734: EQUAL
53735: IFFALSE 53745
// sReset := true ;
53737: LD_ADDR_EXP 42
53741: PUSH
53742: LD_INT 1
53744: ST_TO_ADDR
// if p3 = 105 then
53745: LD_VAR 0 3
53749: PUSH
53750: LD_INT 105
53752: EQUAL
53753: IFFALSE 53763
// sSun := true ;
53755: LD_ADDR_EXP 43
53759: PUSH
53760: LD_INT 1
53762: ST_TO_ADDR
// if p3 = 106 then
53763: LD_VAR 0 3
53767: PUSH
53768: LD_INT 106
53770: EQUAL
53771: IFFALSE 53781
// sTiger := true ;
53773: LD_ADDR_EXP 39
53777: PUSH
53778: LD_INT 1
53780: ST_TO_ADDR
// if p3 = 107 then
53781: LD_VAR 0 3
53785: PUSH
53786: LD_INT 107
53788: EQUAL
53789: IFFALSE 53799
// sBomb := true ;
53791: LD_ADDR_EXP 40
53795: PUSH
53796: LD_INT 1
53798: ST_TO_ADDR
// if p3 = 108 then
53799: LD_VAR 0 3
53803: PUSH
53804: LD_INT 108
53806: EQUAL
53807: IFFALSE 53817
// sWound := true ;
53809: LD_ADDR_EXP 48
53813: PUSH
53814: LD_INT 1
53816: ST_TO_ADDR
// if p3 = 109 then
53817: LD_VAR 0 3
53821: PUSH
53822: LD_INT 109
53824: EQUAL
53825: IFFALSE 53835
// sBetray := true ;
53827: LD_ADDR_EXP 52
53831: PUSH
53832: LD_INT 1
53834: ST_TO_ADDR
// if p3 = 110 then
53835: LD_VAR 0 3
53839: PUSH
53840: LD_INT 110
53842: EQUAL
53843: IFFALSE 53853
// sContamin := true ;
53845: LD_ADDR_EXP 53
53849: PUSH
53850: LD_INT 1
53852: ST_TO_ADDR
// if p3 = 111 then
53853: LD_VAR 0 3
53857: PUSH
53858: LD_INT 111
53860: EQUAL
53861: IFFALSE 53871
// sOil := true ;
53863: LD_ADDR_EXP 55
53867: PUSH
53868: LD_INT 1
53870: ST_TO_ADDR
// if p3 = 112 then
53871: LD_VAR 0 3
53875: PUSH
53876: LD_INT 112
53878: EQUAL
53879: IFFALSE 53889
// sStu := true ;
53881: LD_ADDR_EXP 59
53885: PUSH
53886: LD_INT 1
53888: ST_TO_ADDR
// if p3 = 113 then
53889: LD_VAR 0 3
53893: PUSH
53894: LD_INT 113
53896: EQUAL
53897: IFFALSE 53907
// sBazooka := true ;
53899: LD_ADDR_EXP 62
53903: PUSH
53904: LD_INT 1
53906: ST_TO_ADDR
// if p3 = 114 then
53907: LD_VAR 0 3
53911: PUSH
53912: LD_INT 114
53914: EQUAL
53915: IFFALSE 53925
// sMortar := true ;
53917: LD_ADDR_EXP 63
53921: PUSH
53922: LD_INT 1
53924: ST_TO_ADDR
// if p3 = 115 then
53925: LD_VAR 0 3
53929: PUSH
53930: LD_INT 115
53932: EQUAL
53933: IFFALSE 53943
// sRanger := true ;
53935: LD_ADDR_EXP 73
53939: PUSH
53940: LD_INT 1
53942: ST_TO_ADDR
// if p3 = 116 then
53943: LD_VAR 0 3
53947: PUSH
53948: LD_INT 116
53950: EQUAL
53951: IFFALSE 53961
// sComputer := true ;
53953: LD_ADDR_EXP 74
53957: PUSH
53958: LD_INT 1
53960: ST_TO_ADDR
// if p3 = 117 then
53961: LD_VAR 0 3
53965: PUSH
53966: LD_INT 117
53968: EQUAL
53969: IFFALSE 53979
// s30 := true ;
53971: LD_ADDR_EXP 75
53975: PUSH
53976: LD_INT 1
53978: ST_TO_ADDR
// if p3 = 118 then
53979: LD_VAR 0 3
53983: PUSH
53984: LD_INT 118
53986: EQUAL
53987: IFFALSE 53997
// s60 := true ;
53989: LD_ADDR_EXP 76
53993: PUSH
53994: LD_INT 1
53996: ST_TO_ADDR
// end ; if p2 = hack_mode then
53997: LD_VAR 0 2
54001: PUSH
54002: LD_INT 101
54004: EQUAL
54005: IFFALSE 54133
// begin case p3 of 1 :
54007: LD_VAR 0 3
54011: PUSH
54012: LD_INT 1
54014: DOUBLE
54015: EQUAL
54016: IFTRUE 54020
54018: GO 54027
54020: POP
// hHackUnlimitedResources ; 2 :
54021: CALL 66396 0 0
54025: GO 54133
54027: LD_INT 2
54029: DOUBLE
54030: EQUAL
54031: IFTRUE 54035
54033: GO 54042
54035: POP
// hHackSetLevel10 ; 3 :
54036: CALL 66529 0 0
54040: GO 54133
54042: LD_INT 3
54044: DOUBLE
54045: EQUAL
54046: IFTRUE 54050
54048: GO 54057
54050: POP
// hHackSetLevel10YourUnits ; 4 :
54051: CALL 66614 0 0
54055: GO 54133
54057: LD_INT 4
54059: DOUBLE
54060: EQUAL
54061: IFTRUE 54065
54063: GO 54072
54065: POP
// hHackInvincible ; 5 :
54066: CALL 67062 0 0
54070: GO 54133
54072: LD_INT 5
54074: DOUBLE
54075: EQUAL
54076: IFTRUE 54080
54078: GO 54087
54080: POP
// hHackInvisible ; 6 :
54081: CALL 67173 0 0
54085: GO 54133
54087: LD_INT 6
54089: DOUBLE
54090: EQUAL
54091: IFTRUE 54095
54093: GO 54102
54095: POP
// hHackChangeYourSide ; 7 :
54096: CALL 67230 0 0
54100: GO 54133
54102: LD_INT 7
54104: DOUBLE
54105: EQUAL
54106: IFTRUE 54110
54108: GO 54117
54110: POP
// hHackChangeUnitSide ; 8 :
54111: CALL 67272 0 0
54115: GO 54133
54117: LD_INT 8
54119: DOUBLE
54120: EQUAL
54121: IFTRUE 54125
54123: GO 54132
54125: POP
// hHackFog ; end ;
54126: CALL 67373 0 0
54130: GO 54133
54132: POP
// end ; if p2 = game_save_mode then
54133: LD_VAR 0 2
54137: PUSH
54138: LD_INT 102
54140: EQUAL
54141: IFFALSE 54198
// begin if p3 = 1 then
54143: LD_VAR 0 3
54147: PUSH
54148: LD_INT 1
54150: EQUAL
54151: IFFALSE 54163
// globalGameSaveCounter := p4 ;
54153: LD_ADDR_EXP 19
54157: PUSH
54158: LD_VAR 0 4
54162: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
54163: LD_VAR 0 3
54167: PUSH
54168: LD_INT 2
54170: EQUAL
54171: IFFALSE 54179
54173: PUSH
54174: LD_EXP 19
54178: AND
54179: IFFALSE 54198
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
54181: LD_STRING setGameSaveCounter(
54183: PUSH
54184: LD_EXP 19
54188: STR
54189: PUSH
54190: LD_STRING )
54192: STR
54193: PPUSH
54194: CALL_OW 559
// end ; end ;
54198: LD_VAR 0 7
54202: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
54203: LD_INT 0
54205: PPUSH
// streamModeActive := false ;
54206: LD_ADDR_EXP 20
54210: PUSH
54211: LD_INT 0
54213: ST_TO_ADDR
// normalCounter := 36 ;
54214: LD_ADDR_EXP 21
54218: PUSH
54219: LD_INT 36
54221: ST_TO_ADDR
// hardcoreCounter := 18 ;
54222: LD_ADDR_EXP 22
54226: PUSH
54227: LD_INT 18
54229: ST_TO_ADDR
// sRocket := false ;
54230: LD_ADDR_EXP 25
54234: PUSH
54235: LD_INT 0
54237: ST_TO_ADDR
// sSpeed := false ;
54238: LD_ADDR_EXP 24
54242: PUSH
54243: LD_INT 0
54245: ST_TO_ADDR
// sEngine := false ;
54246: LD_ADDR_EXP 26
54250: PUSH
54251: LD_INT 0
54253: ST_TO_ADDR
// sSpec := false ;
54254: LD_ADDR_EXP 23
54258: PUSH
54259: LD_INT 0
54261: ST_TO_ADDR
// sLevel := false ;
54262: LD_ADDR_EXP 27
54266: PUSH
54267: LD_INT 0
54269: ST_TO_ADDR
// sArmoury := false ;
54270: LD_ADDR_EXP 28
54274: PUSH
54275: LD_INT 0
54277: ST_TO_ADDR
// sRadar := false ;
54278: LD_ADDR_EXP 29
54282: PUSH
54283: LD_INT 0
54285: ST_TO_ADDR
// sBunker := false ;
54286: LD_ADDR_EXP 30
54290: PUSH
54291: LD_INT 0
54293: ST_TO_ADDR
// sHack := false ;
54294: LD_ADDR_EXP 31
54298: PUSH
54299: LD_INT 0
54301: ST_TO_ADDR
// sFire := false ;
54302: LD_ADDR_EXP 32
54306: PUSH
54307: LD_INT 0
54309: ST_TO_ADDR
// sRefresh := false ;
54310: LD_ADDR_EXP 33
54314: PUSH
54315: LD_INT 0
54317: ST_TO_ADDR
// sExp := false ;
54318: LD_ADDR_EXP 34
54322: PUSH
54323: LD_INT 0
54325: ST_TO_ADDR
// sDepot := false ;
54326: LD_ADDR_EXP 35
54330: PUSH
54331: LD_INT 0
54333: ST_TO_ADDR
// sFlag := false ;
54334: LD_ADDR_EXP 36
54338: PUSH
54339: LD_INT 0
54341: ST_TO_ADDR
// sKamikadze := false ;
54342: LD_ADDR_EXP 44
54346: PUSH
54347: LD_INT 0
54349: ST_TO_ADDR
// sTroll := false ;
54350: LD_ADDR_EXP 45
54354: PUSH
54355: LD_INT 0
54357: ST_TO_ADDR
// sSlow := false ;
54358: LD_ADDR_EXP 46
54362: PUSH
54363: LD_INT 0
54365: ST_TO_ADDR
// sLack := false ;
54366: LD_ADDR_EXP 47
54370: PUSH
54371: LD_INT 0
54373: ST_TO_ADDR
// sTank := false ;
54374: LD_ADDR_EXP 49
54378: PUSH
54379: LD_INT 0
54381: ST_TO_ADDR
// sRemote := false ;
54382: LD_ADDR_EXP 50
54386: PUSH
54387: LD_INT 0
54389: ST_TO_ADDR
// sPowell := false ;
54390: LD_ADDR_EXP 51
54394: PUSH
54395: LD_INT 0
54397: ST_TO_ADDR
// sTeleport := false ;
54398: LD_ADDR_EXP 54
54402: PUSH
54403: LD_INT 0
54405: ST_TO_ADDR
// sOilTower := false ;
54406: LD_ADDR_EXP 56
54410: PUSH
54411: LD_INT 0
54413: ST_TO_ADDR
// sShovel := false ;
54414: LD_ADDR_EXP 57
54418: PUSH
54419: LD_INT 0
54421: ST_TO_ADDR
// sSheik := false ;
54422: LD_ADDR_EXP 58
54426: PUSH
54427: LD_INT 0
54429: ST_TO_ADDR
// sEarthquake := false ;
54430: LD_ADDR_EXP 60
54434: PUSH
54435: LD_INT 0
54437: ST_TO_ADDR
// sAI := false ;
54438: LD_ADDR_EXP 61
54442: PUSH
54443: LD_INT 0
54445: ST_TO_ADDR
// sCargo := false ;
54446: LD_ADDR_EXP 64
54450: PUSH
54451: LD_INT 0
54453: ST_TO_ADDR
// sDLaser := false ;
54454: LD_ADDR_EXP 65
54458: PUSH
54459: LD_INT 0
54461: ST_TO_ADDR
// sExchange := false ;
54462: LD_ADDR_EXP 66
54466: PUSH
54467: LD_INT 0
54469: ST_TO_ADDR
// sFac := false ;
54470: LD_ADDR_EXP 67
54474: PUSH
54475: LD_INT 0
54477: ST_TO_ADDR
// sPower := false ;
54478: LD_ADDR_EXP 68
54482: PUSH
54483: LD_INT 0
54485: ST_TO_ADDR
// sRandom := false ;
54486: LD_ADDR_EXP 69
54490: PUSH
54491: LD_INT 0
54493: ST_TO_ADDR
// sShield := false ;
54494: LD_ADDR_EXP 70
54498: PUSH
54499: LD_INT 0
54501: ST_TO_ADDR
// sTime := false ;
54502: LD_ADDR_EXP 71
54506: PUSH
54507: LD_INT 0
54509: ST_TO_ADDR
// sTools := false ;
54510: LD_ADDR_EXP 72
54514: PUSH
54515: LD_INT 0
54517: ST_TO_ADDR
// sSold := false ;
54518: LD_ADDR_EXP 37
54522: PUSH
54523: LD_INT 0
54525: ST_TO_ADDR
// sDiff := false ;
54526: LD_ADDR_EXP 38
54530: PUSH
54531: LD_INT 0
54533: ST_TO_ADDR
// sFog := false ;
54534: LD_ADDR_EXP 41
54538: PUSH
54539: LD_INT 0
54541: ST_TO_ADDR
// sReset := false ;
54542: LD_ADDR_EXP 42
54546: PUSH
54547: LD_INT 0
54549: ST_TO_ADDR
// sSun := false ;
54550: LD_ADDR_EXP 43
54554: PUSH
54555: LD_INT 0
54557: ST_TO_ADDR
// sTiger := false ;
54558: LD_ADDR_EXP 39
54562: PUSH
54563: LD_INT 0
54565: ST_TO_ADDR
// sBomb := false ;
54566: LD_ADDR_EXP 40
54570: PUSH
54571: LD_INT 0
54573: ST_TO_ADDR
// sWound := false ;
54574: LD_ADDR_EXP 48
54578: PUSH
54579: LD_INT 0
54581: ST_TO_ADDR
// sBetray := false ;
54582: LD_ADDR_EXP 52
54586: PUSH
54587: LD_INT 0
54589: ST_TO_ADDR
// sContamin := false ;
54590: LD_ADDR_EXP 53
54594: PUSH
54595: LD_INT 0
54597: ST_TO_ADDR
// sOil := false ;
54598: LD_ADDR_EXP 55
54602: PUSH
54603: LD_INT 0
54605: ST_TO_ADDR
// sStu := false ;
54606: LD_ADDR_EXP 59
54610: PUSH
54611: LD_INT 0
54613: ST_TO_ADDR
// sBazooka := false ;
54614: LD_ADDR_EXP 62
54618: PUSH
54619: LD_INT 0
54621: ST_TO_ADDR
// sMortar := false ;
54622: LD_ADDR_EXP 63
54626: PUSH
54627: LD_INT 0
54629: ST_TO_ADDR
// sRanger := false ;
54630: LD_ADDR_EXP 73
54634: PUSH
54635: LD_INT 0
54637: ST_TO_ADDR
// sComputer := false ;
54638: LD_ADDR_EXP 74
54642: PUSH
54643: LD_INT 0
54645: ST_TO_ADDR
// s30 := false ;
54646: LD_ADDR_EXP 75
54650: PUSH
54651: LD_INT 0
54653: ST_TO_ADDR
// s60 := false ;
54654: LD_ADDR_EXP 76
54658: PUSH
54659: LD_INT 0
54661: ST_TO_ADDR
// end ;
54662: LD_VAR 0 1
54666: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
54667: LD_INT 0
54669: PPUSH
54670: PPUSH
54671: PPUSH
54672: PPUSH
54673: PPUSH
54674: PPUSH
54675: PPUSH
// result := [ ] ;
54676: LD_ADDR_VAR 0 2
54680: PUSH
54681: EMPTY
54682: ST_TO_ADDR
// if campaign_id = 1 then
54683: LD_OWVAR 69
54687: PUSH
54688: LD_INT 1
54690: EQUAL
54691: IFFALSE 57857
// begin case mission_number of 1 :
54693: LD_OWVAR 70
54697: PUSH
54698: LD_INT 1
54700: DOUBLE
54701: EQUAL
54702: IFTRUE 54706
54704: GO 54782
54706: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
54707: LD_ADDR_VAR 0 2
54711: PUSH
54712: LD_INT 2
54714: PUSH
54715: LD_INT 4
54717: PUSH
54718: LD_INT 11
54720: PUSH
54721: LD_INT 12
54723: PUSH
54724: LD_INT 15
54726: PUSH
54727: LD_INT 16
54729: PUSH
54730: LD_INT 22
54732: PUSH
54733: LD_INT 23
54735: PUSH
54736: LD_INT 26
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 101
54752: PUSH
54753: LD_INT 102
54755: PUSH
54756: LD_INT 106
54758: PUSH
54759: LD_INT 116
54761: PUSH
54762: LD_INT 117
54764: PUSH
54765: LD_INT 118
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: ST_TO_ADDR
54780: GO 57855
54782: LD_INT 2
54784: DOUBLE
54785: EQUAL
54786: IFTRUE 54790
54788: GO 54874
54790: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
54791: LD_ADDR_VAR 0 2
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: LD_INT 4
54801: PUSH
54802: LD_INT 11
54804: PUSH
54805: LD_INT 12
54807: PUSH
54808: LD_INT 15
54810: PUSH
54811: LD_INT 16
54813: PUSH
54814: LD_INT 22
54816: PUSH
54817: LD_INT 23
54819: PUSH
54820: LD_INT 26
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 101
54836: PUSH
54837: LD_INT 102
54839: PUSH
54840: LD_INT 105
54842: PUSH
54843: LD_INT 106
54845: PUSH
54846: LD_INT 108
54848: PUSH
54849: LD_INT 116
54851: PUSH
54852: LD_INT 117
54854: PUSH
54855: LD_INT 118
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: ST_TO_ADDR
54872: GO 57855
54874: LD_INT 3
54876: DOUBLE
54877: EQUAL
54878: IFTRUE 54882
54880: GO 54970
54882: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
54883: LD_ADDR_VAR 0 2
54887: PUSH
54888: LD_INT 2
54890: PUSH
54891: LD_INT 4
54893: PUSH
54894: LD_INT 5
54896: PUSH
54897: LD_INT 11
54899: PUSH
54900: LD_INT 12
54902: PUSH
54903: LD_INT 15
54905: PUSH
54906: LD_INT 16
54908: PUSH
54909: LD_INT 22
54911: PUSH
54912: LD_INT 26
54914: PUSH
54915: LD_INT 36
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 101
54932: PUSH
54933: LD_INT 102
54935: PUSH
54936: LD_INT 105
54938: PUSH
54939: LD_INT 106
54941: PUSH
54942: LD_INT 108
54944: PUSH
54945: LD_INT 116
54947: PUSH
54948: LD_INT 117
54950: PUSH
54951: LD_INT 118
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: ST_TO_ADDR
54968: GO 57855
54970: LD_INT 4
54972: DOUBLE
54973: EQUAL
54974: IFTRUE 54978
54976: GO 55074
54978: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
54979: LD_ADDR_VAR 0 2
54983: PUSH
54984: LD_INT 2
54986: PUSH
54987: LD_INT 4
54989: PUSH
54990: LD_INT 5
54992: PUSH
54993: LD_INT 8
54995: PUSH
54996: LD_INT 11
54998: PUSH
54999: LD_INT 12
55001: PUSH
55002: LD_INT 15
55004: PUSH
55005: LD_INT 16
55007: PUSH
55008: LD_INT 22
55010: PUSH
55011: LD_INT 23
55013: PUSH
55014: LD_INT 26
55016: PUSH
55017: LD_INT 36
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 101
55036: PUSH
55037: LD_INT 102
55039: PUSH
55040: LD_INT 105
55042: PUSH
55043: LD_INT 106
55045: PUSH
55046: LD_INT 108
55048: PUSH
55049: LD_INT 116
55051: PUSH
55052: LD_INT 117
55054: PUSH
55055: LD_INT 118
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: ST_TO_ADDR
55072: GO 57855
55074: LD_INT 5
55076: DOUBLE
55077: EQUAL
55078: IFTRUE 55082
55080: GO 55194
55082: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
55083: LD_ADDR_VAR 0 2
55087: PUSH
55088: LD_INT 2
55090: PUSH
55091: LD_INT 4
55093: PUSH
55094: LD_INT 5
55096: PUSH
55097: LD_INT 6
55099: PUSH
55100: LD_INT 8
55102: PUSH
55103: LD_INT 11
55105: PUSH
55106: LD_INT 12
55108: PUSH
55109: LD_INT 15
55111: PUSH
55112: LD_INT 16
55114: PUSH
55115: LD_INT 22
55117: PUSH
55118: LD_INT 23
55120: PUSH
55121: LD_INT 25
55123: PUSH
55124: LD_INT 26
55126: PUSH
55127: LD_INT 36
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 101
55148: PUSH
55149: LD_INT 102
55151: PUSH
55152: LD_INT 105
55154: PUSH
55155: LD_INT 106
55157: PUSH
55158: LD_INT 108
55160: PUSH
55161: LD_INT 109
55163: PUSH
55164: LD_INT 112
55166: PUSH
55167: LD_INT 116
55169: PUSH
55170: LD_INT 117
55172: PUSH
55173: LD_INT 118
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: ST_TO_ADDR
55192: GO 57855
55194: LD_INT 6
55196: DOUBLE
55197: EQUAL
55198: IFTRUE 55202
55200: GO 55334
55202: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
55203: LD_ADDR_VAR 0 2
55207: PUSH
55208: LD_INT 2
55210: PUSH
55211: LD_INT 4
55213: PUSH
55214: LD_INT 5
55216: PUSH
55217: LD_INT 6
55219: PUSH
55220: LD_INT 8
55222: PUSH
55223: LD_INT 11
55225: PUSH
55226: LD_INT 12
55228: PUSH
55229: LD_INT 15
55231: PUSH
55232: LD_INT 16
55234: PUSH
55235: LD_INT 20
55237: PUSH
55238: LD_INT 21
55240: PUSH
55241: LD_INT 22
55243: PUSH
55244: LD_INT 23
55246: PUSH
55247: LD_INT 25
55249: PUSH
55250: LD_INT 26
55252: PUSH
55253: LD_INT 30
55255: PUSH
55256: LD_INT 31
55258: PUSH
55259: LD_INT 32
55261: PUSH
55262: LD_INT 36
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 101
55288: PUSH
55289: LD_INT 102
55291: PUSH
55292: LD_INT 105
55294: PUSH
55295: LD_INT 106
55297: PUSH
55298: LD_INT 108
55300: PUSH
55301: LD_INT 109
55303: PUSH
55304: LD_INT 112
55306: PUSH
55307: LD_INT 116
55309: PUSH
55310: LD_INT 117
55312: PUSH
55313: LD_INT 118
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: ST_TO_ADDR
55332: GO 57855
55334: LD_INT 7
55336: DOUBLE
55337: EQUAL
55338: IFTRUE 55342
55340: GO 55454
55342: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
55343: LD_ADDR_VAR 0 2
55347: PUSH
55348: LD_INT 2
55350: PUSH
55351: LD_INT 4
55353: PUSH
55354: LD_INT 5
55356: PUSH
55357: LD_INT 7
55359: PUSH
55360: LD_INT 11
55362: PUSH
55363: LD_INT 12
55365: PUSH
55366: LD_INT 15
55368: PUSH
55369: LD_INT 16
55371: PUSH
55372: LD_INT 20
55374: PUSH
55375: LD_INT 21
55377: PUSH
55378: LD_INT 22
55380: PUSH
55381: LD_INT 23
55383: PUSH
55384: LD_INT 25
55386: PUSH
55387: LD_INT 26
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 101
55408: PUSH
55409: LD_INT 102
55411: PUSH
55412: LD_INT 103
55414: PUSH
55415: LD_INT 105
55417: PUSH
55418: LD_INT 106
55420: PUSH
55421: LD_INT 108
55423: PUSH
55424: LD_INT 112
55426: PUSH
55427: LD_INT 116
55429: PUSH
55430: LD_INT 117
55432: PUSH
55433: LD_INT 118
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: ST_TO_ADDR
55452: GO 57855
55454: LD_INT 8
55456: DOUBLE
55457: EQUAL
55458: IFTRUE 55462
55460: GO 55602
55462: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
55463: LD_ADDR_VAR 0 2
55467: PUSH
55468: LD_INT 2
55470: PUSH
55471: LD_INT 4
55473: PUSH
55474: LD_INT 5
55476: PUSH
55477: LD_INT 6
55479: PUSH
55480: LD_INT 7
55482: PUSH
55483: LD_INT 8
55485: PUSH
55486: LD_INT 11
55488: PUSH
55489: LD_INT 12
55491: PUSH
55492: LD_INT 15
55494: PUSH
55495: LD_INT 16
55497: PUSH
55498: LD_INT 20
55500: PUSH
55501: LD_INT 21
55503: PUSH
55504: LD_INT 22
55506: PUSH
55507: LD_INT 23
55509: PUSH
55510: LD_INT 25
55512: PUSH
55513: LD_INT 26
55515: PUSH
55516: LD_INT 30
55518: PUSH
55519: LD_INT 31
55521: PUSH
55522: LD_INT 32
55524: PUSH
55525: LD_INT 36
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 101
55552: PUSH
55553: LD_INT 102
55555: PUSH
55556: LD_INT 103
55558: PUSH
55559: LD_INT 105
55561: PUSH
55562: LD_INT 106
55564: PUSH
55565: LD_INT 108
55567: PUSH
55568: LD_INT 109
55570: PUSH
55571: LD_INT 112
55573: PUSH
55574: LD_INT 116
55576: PUSH
55577: LD_INT 117
55579: PUSH
55580: LD_INT 118
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: ST_TO_ADDR
55600: GO 57855
55602: LD_INT 9
55604: DOUBLE
55605: EQUAL
55606: IFTRUE 55610
55608: GO 55758
55610: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
55611: LD_ADDR_VAR 0 2
55615: PUSH
55616: LD_INT 2
55618: PUSH
55619: LD_INT 4
55621: PUSH
55622: LD_INT 5
55624: PUSH
55625: LD_INT 6
55627: PUSH
55628: LD_INT 7
55630: PUSH
55631: LD_INT 8
55633: PUSH
55634: LD_INT 11
55636: PUSH
55637: LD_INT 12
55639: PUSH
55640: LD_INT 15
55642: PUSH
55643: LD_INT 16
55645: PUSH
55646: LD_INT 20
55648: PUSH
55649: LD_INT 21
55651: PUSH
55652: LD_INT 22
55654: PUSH
55655: LD_INT 23
55657: PUSH
55658: LD_INT 25
55660: PUSH
55661: LD_INT 26
55663: PUSH
55664: LD_INT 28
55666: PUSH
55667: LD_INT 30
55669: PUSH
55670: LD_INT 31
55672: PUSH
55673: LD_INT 32
55675: PUSH
55676: LD_INT 36
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 101
55704: PUSH
55705: LD_INT 102
55707: PUSH
55708: LD_INT 103
55710: PUSH
55711: LD_INT 105
55713: PUSH
55714: LD_INT 106
55716: PUSH
55717: LD_INT 108
55719: PUSH
55720: LD_INT 109
55722: PUSH
55723: LD_INT 112
55725: PUSH
55726: LD_INT 114
55728: PUSH
55729: LD_INT 116
55731: PUSH
55732: LD_INT 117
55734: PUSH
55735: LD_INT 118
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: ST_TO_ADDR
55756: GO 57855
55758: LD_INT 10
55760: DOUBLE
55761: EQUAL
55762: IFTRUE 55766
55764: GO 55962
55766: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
55767: LD_ADDR_VAR 0 2
55771: PUSH
55772: LD_INT 2
55774: PUSH
55775: LD_INT 4
55777: PUSH
55778: LD_INT 5
55780: PUSH
55781: LD_INT 6
55783: PUSH
55784: LD_INT 7
55786: PUSH
55787: LD_INT 8
55789: PUSH
55790: LD_INT 9
55792: PUSH
55793: LD_INT 10
55795: PUSH
55796: LD_INT 11
55798: PUSH
55799: LD_INT 12
55801: PUSH
55802: LD_INT 13
55804: PUSH
55805: LD_INT 14
55807: PUSH
55808: LD_INT 15
55810: PUSH
55811: LD_INT 16
55813: PUSH
55814: LD_INT 17
55816: PUSH
55817: LD_INT 18
55819: PUSH
55820: LD_INT 19
55822: PUSH
55823: LD_INT 20
55825: PUSH
55826: LD_INT 21
55828: PUSH
55829: LD_INT 22
55831: PUSH
55832: LD_INT 23
55834: PUSH
55835: LD_INT 24
55837: PUSH
55838: LD_INT 25
55840: PUSH
55841: LD_INT 26
55843: PUSH
55844: LD_INT 28
55846: PUSH
55847: LD_INT 30
55849: PUSH
55850: LD_INT 31
55852: PUSH
55853: LD_INT 32
55855: PUSH
55856: LD_INT 36
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 101
55892: PUSH
55893: LD_INT 102
55895: PUSH
55896: LD_INT 103
55898: PUSH
55899: LD_INT 104
55901: PUSH
55902: LD_INT 105
55904: PUSH
55905: LD_INT 106
55907: PUSH
55908: LD_INT 107
55910: PUSH
55911: LD_INT 108
55913: PUSH
55914: LD_INT 109
55916: PUSH
55917: LD_INT 110
55919: PUSH
55920: LD_INT 111
55922: PUSH
55923: LD_INT 112
55925: PUSH
55926: LD_INT 114
55928: PUSH
55929: LD_INT 116
55931: PUSH
55932: LD_INT 117
55934: PUSH
55935: LD_INT 118
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: ST_TO_ADDR
55960: GO 57855
55962: LD_INT 11
55964: DOUBLE
55965: EQUAL
55966: IFTRUE 55970
55968: GO 56174
55970: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
55971: LD_ADDR_VAR 0 2
55975: PUSH
55976: LD_INT 2
55978: PUSH
55979: LD_INT 3
55981: PUSH
55982: LD_INT 4
55984: PUSH
55985: LD_INT 5
55987: PUSH
55988: LD_INT 6
55990: PUSH
55991: LD_INT 7
55993: PUSH
55994: LD_INT 8
55996: PUSH
55997: LD_INT 9
55999: PUSH
56000: LD_INT 10
56002: PUSH
56003: LD_INT 11
56005: PUSH
56006: LD_INT 12
56008: PUSH
56009: LD_INT 13
56011: PUSH
56012: LD_INT 14
56014: PUSH
56015: LD_INT 15
56017: PUSH
56018: LD_INT 16
56020: PUSH
56021: LD_INT 17
56023: PUSH
56024: LD_INT 18
56026: PUSH
56027: LD_INT 19
56029: PUSH
56030: LD_INT 20
56032: PUSH
56033: LD_INT 21
56035: PUSH
56036: LD_INT 22
56038: PUSH
56039: LD_INT 23
56041: PUSH
56042: LD_INT 24
56044: PUSH
56045: LD_INT 25
56047: PUSH
56048: LD_INT 26
56050: PUSH
56051: LD_INT 28
56053: PUSH
56054: LD_INT 30
56056: PUSH
56057: LD_INT 31
56059: PUSH
56060: LD_INT 32
56062: PUSH
56063: LD_INT 34
56065: PUSH
56066: LD_INT 36
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 101
56104: PUSH
56105: LD_INT 102
56107: PUSH
56108: LD_INT 103
56110: PUSH
56111: LD_INT 104
56113: PUSH
56114: LD_INT 105
56116: PUSH
56117: LD_INT 106
56119: PUSH
56120: LD_INT 107
56122: PUSH
56123: LD_INT 108
56125: PUSH
56126: LD_INT 109
56128: PUSH
56129: LD_INT 110
56131: PUSH
56132: LD_INT 111
56134: PUSH
56135: LD_INT 112
56137: PUSH
56138: LD_INT 114
56140: PUSH
56141: LD_INT 116
56143: PUSH
56144: LD_INT 117
56146: PUSH
56147: LD_INT 118
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: ST_TO_ADDR
56172: GO 57855
56174: LD_INT 12
56176: DOUBLE
56177: EQUAL
56178: IFTRUE 56182
56180: GO 56402
56182: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
56183: LD_ADDR_VAR 0 2
56187: PUSH
56188: LD_INT 1
56190: PUSH
56191: LD_INT 2
56193: PUSH
56194: LD_INT 3
56196: PUSH
56197: LD_INT 4
56199: PUSH
56200: LD_INT 5
56202: PUSH
56203: LD_INT 6
56205: PUSH
56206: LD_INT 7
56208: PUSH
56209: LD_INT 8
56211: PUSH
56212: LD_INT 9
56214: PUSH
56215: LD_INT 10
56217: PUSH
56218: LD_INT 11
56220: PUSH
56221: LD_INT 12
56223: PUSH
56224: LD_INT 13
56226: PUSH
56227: LD_INT 14
56229: PUSH
56230: LD_INT 15
56232: PUSH
56233: LD_INT 16
56235: PUSH
56236: LD_INT 17
56238: PUSH
56239: LD_INT 18
56241: PUSH
56242: LD_INT 19
56244: PUSH
56245: LD_INT 20
56247: PUSH
56248: LD_INT 21
56250: PUSH
56251: LD_INT 22
56253: PUSH
56254: LD_INT 23
56256: PUSH
56257: LD_INT 24
56259: PUSH
56260: LD_INT 25
56262: PUSH
56263: LD_INT 26
56265: PUSH
56266: LD_INT 27
56268: PUSH
56269: LD_INT 28
56271: PUSH
56272: LD_INT 30
56274: PUSH
56275: LD_INT 31
56277: PUSH
56278: LD_INT 32
56280: PUSH
56281: LD_INT 33
56283: PUSH
56284: LD_INT 34
56286: PUSH
56287: LD_INT 36
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 101
56328: PUSH
56329: LD_INT 102
56331: PUSH
56332: LD_INT 103
56334: PUSH
56335: LD_INT 104
56337: PUSH
56338: LD_INT 105
56340: PUSH
56341: LD_INT 106
56343: PUSH
56344: LD_INT 107
56346: PUSH
56347: LD_INT 108
56349: PUSH
56350: LD_INT 109
56352: PUSH
56353: LD_INT 110
56355: PUSH
56356: LD_INT 111
56358: PUSH
56359: LD_INT 112
56361: PUSH
56362: LD_INT 113
56364: PUSH
56365: LD_INT 114
56367: PUSH
56368: LD_INT 116
56370: PUSH
56371: LD_INT 117
56373: PUSH
56374: LD_INT 118
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: ST_TO_ADDR
56400: GO 57855
56402: LD_INT 13
56404: DOUBLE
56405: EQUAL
56406: IFTRUE 56410
56408: GO 56618
56410: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
56411: LD_ADDR_VAR 0 2
56415: PUSH
56416: LD_INT 1
56418: PUSH
56419: LD_INT 2
56421: PUSH
56422: LD_INT 3
56424: PUSH
56425: LD_INT 4
56427: PUSH
56428: LD_INT 5
56430: PUSH
56431: LD_INT 8
56433: PUSH
56434: LD_INT 9
56436: PUSH
56437: LD_INT 10
56439: PUSH
56440: LD_INT 11
56442: PUSH
56443: LD_INT 12
56445: PUSH
56446: LD_INT 14
56448: PUSH
56449: LD_INT 15
56451: PUSH
56452: LD_INT 16
56454: PUSH
56455: LD_INT 17
56457: PUSH
56458: LD_INT 18
56460: PUSH
56461: LD_INT 19
56463: PUSH
56464: LD_INT 20
56466: PUSH
56467: LD_INT 21
56469: PUSH
56470: LD_INT 22
56472: PUSH
56473: LD_INT 23
56475: PUSH
56476: LD_INT 24
56478: PUSH
56479: LD_INT 25
56481: PUSH
56482: LD_INT 26
56484: PUSH
56485: LD_INT 27
56487: PUSH
56488: LD_INT 28
56490: PUSH
56491: LD_INT 30
56493: PUSH
56494: LD_INT 31
56496: PUSH
56497: LD_INT 32
56499: PUSH
56500: LD_INT 33
56502: PUSH
56503: LD_INT 34
56505: PUSH
56506: LD_INT 36
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 101
56544: PUSH
56545: LD_INT 102
56547: PUSH
56548: LD_INT 103
56550: PUSH
56551: LD_INT 104
56553: PUSH
56554: LD_INT 105
56556: PUSH
56557: LD_INT 106
56559: PUSH
56560: LD_INT 107
56562: PUSH
56563: LD_INT 108
56565: PUSH
56566: LD_INT 109
56568: PUSH
56569: LD_INT 110
56571: PUSH
56572: LD_INT 111
56574: PUSH
56575: LD_INT 112
56577: PUSH
56578: LD_INT 113
56580: PUSH
56581: LD_INT 114
56583: PUSH
56584: LD_INT 116
56586: PUSH
56587: LD_INT 117
56589: PUSH
56590: LD_INT 118
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: ST_TO_ADDR
56616: GO 57855
56618: LD_INT 14
56620: DOUBLE
56621: EQUAL
56622: IFTRUE 56626
56624: GO 56850
56626: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
56627: LD_ADDR_VAR 0 2
56631: PUSH
56632: LD_INT 1
56634: PUSH
56635: LD_INT 2
56637: PUSH
56638: LD_INT 3
56640: PUSH
56641: LD_INT 4
56643: PUSH
56644: LD_INT 5
56646: PUSH
56647: LD_INT 6
56649: PUSH
56650: LD_INT 7
56652: PUSH
56653: LD_INT 8
56655: PUSH
56656: LD_INT 9
56658: PUSH
56659: LD_INT 10
56661: PUSH
56662: LD_INT 11
56664: PUSH
56665: LD_INT 12
56667: PUSH
56668: LD_INT 13
56670: PUSH
56671: LD_INT 14
56673: PUSH
56674: LD_INT 15
56676: PUSH
56677: LD_INT 16
56679: PUSH
56680: LD_INT 17
56682: PUSH
56683: LD_INT 18
56685: PUSH
56686: LD_INT 19
56688: PUSH
56689: LD_INT 20
56691: PUSH
56692: LD_INT 21
56694: PUSH
56695: LD_INT 22
56697: PUSH
56698: LD_INT 23
56700: PUSH
56701: LD_INT 24
56703: PUSH
56704: LD_INT 25
56706: PUSH
56707: LD_INT 26
56709: PUSH
56710: LD_INT 27
56712: PUSH
56713: LD_INT 28
56715: PUSH
56716: LD_INT 29
56718: PUSH
56719: LD_INT 30
56721: PUSH
56722: LD_INT 31
56724: PUSH
56725: LD_INT 32
56727: PUSH
56728: LD_INT 33
56730: PUSH
56731: LD_INT 34
56733: PUSH
56734: LD_INT 36
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 101
56776: PUSH
56777: LD_INT 102
56779: PUSH
56780: LD_INT 103
56782: PUSH
56783: LD_INT 104
56785: PUSH
56786: LD_INT 105
56788: PUSH
56789: LD_INT 106
56791: PUSH
56792: LD_INT 107
56794: PUSH
56795: LD_INT 108
56797: PUSH
56798: LD_INT 109
56800: PUSH
56801: LD_INT 110
56803: PUSH
56804: LD_INT 111
56806: PUSH
56807: LD_INT 112
56809: PUSH
56810: LD_INT 113
56812: PUSH
56813: LD_INT 114
56815: PUSH
56816: LD_INT 116
56818: PUSH
56819: LD_INT 117
56821: PUSH
56822: LD_INT 118
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: ST_TO_ADDR
56848: GO 57855
56850: LD_INT 15
56852: DOUBLE
56853: EQUAL
56854: IFTRUE 56858
56856: GO 57082
56858: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
56859: LD_ADDR_VAR 0 2
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: LD_INT 2
56869: PUSH
56870: LD_INT 3
56872: PUSH
56873: LD_INT 4
56875: PUSH
56876: LD_INT 5
56878: PUSH
56879: LD_INT 6
56881: PUSH
56882: LD_INT 7
56884: PUSH
56885: LD_INT 8
56887: PUSH
56888: LD_INT 9
56890: PUSH
56891: LD_INT 10
56893: PUSH
56894: LD_INT 11
56896: PUSH
56897: LD_INT 12
56899: PUSH
56900: LD_INT 13
56902: PUSH
56903: LD_INT 14
56905: PUSH
56906: LD_INT 15
56908: PUSH
56909: LD_INT 16
56911: PUSH
56912: LD_INT 17
56914: PUSH
56915: LD_INT 18
56917: PUSH
56918: LD_INT 19
56920: PUSH
56921: LD_INT 20
56923: PUSH
56924: LD_INT 21
56926: PUSH
56927: LD_INT 22
56929: PUSH
56930: LD_INT 23
56932: PUSH
56933: LD_INT 24
56935: PUSH
56936: LD_INT 25
56938: PUSH
56939: LD_INT 26
56941: PUSH
56942: LD_INT 27
56944: PUSH
56945: LD_INT 28
56947: PUSH
56948: LD_INT 29
56950: PUSH
56951: LD_INT 30
56953: PUSH
56954: LD_INT 31
56956: PUSH
56957: LD_INT 32
56959: PUSH
56960: LD_INT 33
56962: PUSH
56963: LD_INT 34
56965: PUSH
56966: LD_INT 36
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 101
57008: PUSH
57009: LD_INT 102
57011: PUSH
57012: LD_INT 103
57014: PUSH
57015: LD_INT 104
57017: PUSH
57018: LD_INT 105
57020: PUSH
57021: LD_INT 106
57023: PUSH
57024: LD_INT 107
57026: PUSH
57027: LD_INT 108
57029: PUSH
57030: LD_INT 109
57032: PUSH
57033: LD_INT 110
57035: PUSH
57036: LD_INT 111
57038: PUSH
57039: LD_INT 112
57041: PUSH
57042: LD_INT 113
57044: PUSH
57045: LD_INT 114
57047: PUSH
57048: LD_INT 116
57050: PUSH
57051: LD_INT 117
57053: PUSH
57054: LD_INT 118
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: ST_TO_ADDR
57080: GO 57855
57082: LD_INT 16
57084: DOUBLE
57085: EQUAL
57086: IFTRUE 57090
57088: GO 57226
57090: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
57091: LD_ADDR_VAR 0 2
57095: PUSH
57096: LD_INT 2
57098: PUSH
57099: LD_INT 4
57101: PUSH
57102: LD_INT 5
57104: PUSH
57105: LD_INT 7
57107: PUSH
57108: LD_INT 11
57110: PUSH
57111: LD_INT 12
57113: PUSH
57114: LD_INT 15
57116: PUSH
57117: LD_INT 16
57119: PUSH
57120: LD_INT 20
57122: PUSH
57123: LD_INT 21
57125: PUSH
57126: LD_INT 22
57128: PUSH
57129: LD_INT 23
57131: PUSH
57132: LD_INT 25
57134: PUSH
57135: LD_INT 26
57137: PUSH
57138: LD_INT 30
57140: PUSH
57141: LD_INT 31
57143: PUSH
57144: LD_INT 32
57146: PUSH
57147: LD_INT 33
57149: PUSH
57150: LD_INT 34
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 101
57176: PUSH
57177: LD_INT 102
57179: PUSH
57180: LD_INT 103
57182: PUSH
57183: LD_INT 106
57185: PUSH
57186: LD_INT 108
57188: PUSH
57189: LD_INT 112
57191: PUSH
57192: LD_INT 113
57194: PUSH
57195: LD_INT 114
57197: PUSH
57198: LD_INT 116
57200: PUSH
57201: LD_INT 117
57203: PUSH
57204: LD_INT 118
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: ST_TO_ADDR
57224: GO 57855
57226: LD_INT 17
57228: DOUBLE
57229: EQUAL
57230: IFTRUE 57234
57232: GO 57458
57234: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
57235: LD_ADDR_VAR 0 2
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: LD_INT 2
57245: PUSH
57246: LD_INT 3
57248: PUSH
57249: LD_INT 4
57251: PUSH
57252: LD_INT 5
57254: PUSH
57255: LD_INT 6
57257: PUSH
57258: LD_INT 7
57260: PUSH
57261: LD_INT 8
57263: PUSH
57264: LD_INT 9
57266: PUSH
57267: LD_INT 10
57269: PUSH
57270: LD_INT 11
57272: PUSH
57273: LD_INT 12
57275: PUSH
57276: LD_INT 13
57278: PUSH
57279: LD_INT 14
57281: PUSH
57282: LD_INT 15
57284: PUSH
57285: LD_INT 16
57287: PUSH
57288: LD_INT 17
57290: PUSH
57291: LD_INT 18
57293: PUSH
57294: LD_INT 19
57296: PUSH
57297: LD_INT 20
57299: PUSH
57300: LD_INT 21
57302: PUSH
57303: LD_INT 22
57305: PUSH
57306: LD_INT 23
57308: PUSH
57309: LD_INT 24
57311: PUSH
57312: LD_INT 25
57314: PUSH
57315: LD_INT 26
57317: PUSH
57318: LD_INT 27
57320: PUSH
57321: LD_INT 28
57323: PUSH
57324: LD_INT 29
57326: PUSH
57327: LD_INT 30
57329: PUSH
57330: LD_INT 31
57332: PUSH
57333: LD_INT 32
57335: PUSH
57336: LD_INT 33
57338: PUSH
57339: LD_INT 34
57341: PUSH
57342: LD_INT 36
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 101
57384: PUSH
57385: LD_INT 102
57387: PUSH
57388: LD_INT 103
57390: PUSH
57391: LD_INT 104
57393: PUSH
57394: LD_INT 105
57396: PUSH
57397: LD_INT 106
57399: PUSH
57400: LD_INT 107
57402: PUSH
57403: LD_INT 108
57405: PUSH
57406: LD_INT 109
57408: PUSH
57409: LD_INT 110
57411: PUSH
57412: LD_INT 111
57414: PUSH
57415: LD_INT 112
57417: PUSH
57418: LD_INT 113
57420: PUSH
57421: LD_INT 114
57423: PUSH
57424: LD_INT 116
57426: PUSH
57427: LD_INT 117
57429: PUSH
57430: LD_INT 118
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: ST_TO_ADDR
57456: GO 57855
57458: LD_INT 18
57460: DOUBLE
57461: EQUAL
57462: IFTRUE 57466
57464: GO 57614
57466: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
57467: LD_ADDR_VAR 0 2
57471: PUSH
57472: LD_INT 2
57474: PUSH
57475: LD_INT 4
57477: PUSH
57478: LD_INT 5
57480: PUSH
57481: LD_INT 7
57483: PUSH
57484: LD_INT 11
57486: PUSH
57487: LD_INT 12
57489: PUSH
57490: LD_INT 15
57492: PUSH
57493: LD_INT 16
57495: PUSH
57496: LD_INT 20
57498: PUSH
57499: LD_INT 21
57501: PUSH
57502: LD_INT 22
57504: PUSH
57505: LD_INT 23
57507: PUSH
57508: LD_INT 25
57510: PUSH
57511: LD_INT 26
57513: PUSH
57514: LD_INT 30
57516: PUSH
57517: LD_INT 31
57519: PUSH
57520: LD_INT 32
57522: PUSH
57523: LD_INT 33
57525: PUSH
57526: LD_INT 34
57528: PUSH
57529: LD_INT 35
57531: PUSH
57532: LD_INT 36
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 101
57560: PUSH
57561: LD_INT 102
57563: PUSH
57564: LD_INT 103
57566: PUSH
57567: LD_INT 106
57569: PUSH
57570: LD_INT 108
57572: PUSH
57573: LD_INT 112
57575: PUSH
57576: LD_INT 113
57578: PUSH
57579: LD_INT 114
57581: PUSH
57582: LD_INT 115
57584: PUSH
57585: LD_INT 116
57587: PUSH
57588: LD_INT 117
57590: PUSH
57591: LD_INT 118
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: ST_TO_ADDR
57612: GO 57855
57614: LD_INT 19
57616: DOUBLE
57617: EQUAL
57618: IFTRUE 57622
57620: GO 57854
57622: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
57623: LD_ADDR_VAR 0 2
57627: PUSH
57628: LD_INT 1
57630: PUSH
57631: LD_INT 2
57633: PUSH
57634: LD_INT 3
57636: PUSH
57637: LD_INT 4
57639: PUSH
57640: LD_INT 5
57642: PUSH
57643: LD_INT 6
57645: PUSH
57646: LD_INT 7
57648: PUSH
57649: LD_INT 8
57651: PUSH
57652: LD_INT 9
57654: PUSH
57655: LD_INT 10
57657: PUSH
57658: LD_INT 11
57660: PUSH
57661: LD_INT 12
57663: PUSH
57664: LD_INT 13
57666: PUSH
57667: LD_INT 14
57669: PUSH
57670: LD_INT 15
57672: PUSH
57673: LD_INT 16
57675: PUSH
57676: LD_INT 17
57678: PUSH
57679: LD_INT 18
57681: PUSH
57682: LD_INT 19
57684: PUSH
57685: LD_INT 20
57687: PUSH
57688: LD_INT 21
57690: PUSH
57691: LD_INT 22
57693: PUSH
57694: LD_INT 23
57696: PUSH
57697: LD_INT 24
57699: PUSH
57700: LD_INT 25
57702: PUSH
57703: LD_INT 26
57705: PUSH
57706: LD_INT 27
57708: PUSH
57709: LD_INT 28
57711: PUSH
57712: LD_INT 29
57714: PUSH
57715: LD_INT 30
57717: PUSH
57718: LD_INT 31
57720: PUSH
57721: LD_INT 32
57723: PUSH
57724: LD_INT 33
57726: PUSH
57727: LD_INT 34
57729: PUSH
57730: LD_INT 35
57732: PUSH
57733: LD_INT 36
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 101
57776: PUSH
57777: LD_INT 102
57779: PUSH
57780: LD_INT 103
57782: PUSH
57783: LD_INT 104
57785: PUSH
57786: LD_INT 105
57788: PUSH
57789: LD_INT 106
57791: PUSH
57792: LD_INT 107
57794: PUSH
57795: LD_INT 108
57797: PUSH
57798: LD_INT 109
57800: PUSH
57801: LD_INT 110
57803: PUSH
57804: LD_INT 111
57806: PUSH
57807: LD_INT 112
57809: PUSH
57810: LD_INT 113
57812: PUSH
57813: LD_INT 114
57815: PUSH
57816: LD_INT 115
57818: PUSH
57819: LD_INT 116
57821: PUSH
57822: LD_INT 117
57824: PUSH
57825: LD_INT 118
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: ST_TO_ADDR
57852: GO 57855
57854: POP
// end else
57855: GO 58086
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
57857: LD_ADDR_VAR 0 2
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: LD_INT 2
57867: PUSH
57868: LD_INT 3
57870: PUSH
57871: LD_INT 4
57873: PUSH
57874: LD_INT 5
57876: PUSH
57877: LD_INT 6
57879: PUSH
57880: LD_INT 7
57882: PUSH
57883: LD_INT 8
57885: PUSH
57886: LD_INT 9
57888: PUSH
57889: LD_INT 10
57891: PUSH
57892: LD_INT 11
57894: PUSH
57895: LD_INT 12
57897: PUSH
57898: LD_INT 13
57900: PUSH
57901: LD_INT 14
57903: PUSH
57904: LD_INT 15
57906: PUSH
57907: LD_INT 16
57909: PUSH
57910: LD_INT 17
57912: PUSH
57913: LD_INT 18
57915: PUSH
57916: LD_INT 19
57918: PUSH
57919: LD_INT 20
57921: PUSH
57922: LD_INT 21
57924: PUSH
57925: LD_INT 22
57927: PUSH
57928: LD_INT 23
57930: PUSH
57931: LD_INT 24
57933: PUSH
57934: LD_INT 25
57936: PUSH
57937: LD_INT 26
57939: PUSH
57940: LD_INT 27
57942: PUSH
57943: LD_INT 28
57945: PUSH
57946: LD_INT 29
57948: PUSH
57949: LD_INT 30
57951: PUSH
57952: LD_INT 31
57954: PUSH
57955: LD_INT 32
57957: PUSH
57958: LD_INT 33
57960: PUSH
57961: LD_INT 34
57963: PUSH
57964: LD_INT 35
57966: PUSH
57967: LD_INT 36
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 101
58010: PUSH
58011: LD_INT 102
58013: PUSH
58014: LD_INT 103
58016: PUSH
58017: LD_INT 104
58019: PUSH
58020: LD_INT 105
58022: PUSH
58023: LD_INT 106
58025: PUSH
58026: LD_INT 107
58028: PUSH
58029: LD_INT 108
58031: PUSH
58032: LD_INT 109
58034: PUSH
58035: LD_INT 110
58037: PUSH
58038: LD_INT 111
58040: PUSH
58041: LD_INT 112
58043: PUSH
58044: LD_INT 113
58046: PUSH
58047: LD_INT 114
58049: PUSH
58050: LD_INT 115
58052: PUSH
58053: LD_INT 116
58055: PUSH
58056: LD_INT 117
58058: PUSH
58059: LD_INT 118
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: ST_TO_ADDR
// if result then
58086: LD_VAR 0 2
58090: IFFALSE 58876
// begin normal :=  ;
58092: LD_ADDR_VAR 0 5
58096: PUSH
58097: LD_STRING 
58099: ST_TO_ADDR
// hardcore :=  ;
58100: LD_ADDR_VAR 0 6
58104: PUSH
58105: LD_STRING 
58107: ST_TO_ADDR
// active :=  ;
58108: LD_ADDR_VAR 0 7
58112: PUSH
58113: LD_STRING 
58115: ST_TO_ADDR
// for i = 1 to normalCounter do
58116: LD_ADDR_VAR 0 8
58120: PUSH
58121: DOUBLE
58122: LD_INT 1
58124: DEC
58125: ST_TO_ADDR
58126: LD_EXP 21
58130: PUSH
58131: FOR_TO
58132: IFFALSE 58233
// begin tmp := 0 ;
58134: LD_ADDR_VAR 0 3
58138: PUSH
58139: LD_STRING 0
58141: ST_TO_ADDR
// if result [ 1 ] then
58142: LD_VAR 0 2
58146: PUSH
58147: LD_INT 1
58149: ARRAY
58150: IFFALSE 58215
// if result [ 1 ] [ 1 ] = i then
58152: LD_VAR 0 2
58156: PUSH
58157: LD_INT 1
58159: ARRAY
58160: PUSH
58161: LD_INT 1
58163: ARRAY
58164: PUSH
58165: LD_VAR 0 8
58169: EQUAL
58170: IFFALSE 58215
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
58172: LD_ADDR_VAR 0 2
58176: PUSH
58177: LD_VAR 0 2
58181: PPUSH
58182: LD_INT 1
58184: PPUSH
58185: LD_VAR 0 2
58189: PUSH
58190: LD_INT 1
58192: ARRAY
58193: PPUSH
58194: LD_INT 1
58196: PPUSH
58197: CALL_OW 3
58201: PPUSH
58202: CALL_OW 1
58206: ST_TO_ADDR
// tmp := 1 ;
58207: LD_ADDR_VAR 0 3
58211: PUSH
58212: LD_STRING 1
58214: ST_TO_ADDR
// end ; normal := normal & tmp ;
58215: LD_ADDR_VAR 0 5
58219: PUSH
58220: LD_VAR 0 5
58224: PUSH
58225: LD_VAR 0 3
58229: STR
58230: ST_TO_ADDR
// end ;
58231: GO 58131
58233: POP
58234: POP
// for i = 1 to hardcoreCounter do
58235: LD_ADDR_VAR 0 8
58239: PUSH
58240: DOUBLE
58241: LD_INT 1
58243: DEC
58244: ST_TO_ADDR
58245: LD_EXP 22
58249: PUSH
58250: FOR_TO
58251: IFFALSE 58356
// begin tmp := 0 ;
58253: LD_ADDR_VAR 0 3
58257: PUSH
58258: LD_STRING 0
58260: ST_TO_ADDR
// if result [ 2 ] then
58261: LD_VAR 0 2
58265: PUSH
58266: LD_INT 2
58268: ARRAY
58269: IFFALSE 58338
// if result [ 2 ] [ 1 ] = 100 + i then
58271: LD_VAR 0 2
58275: PUSH
58276: LD_INT 2
58278: ARRAY
58279: PUSH
58280: LD_INT 1
58282: ARRAY
58283: PUSH
58284: LD_INT 100
58286: PUSH
58287: LD_VAR 0 8
58291: PLUS
58292: EQUAL
58293: IFFALSE 58338
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
58295: LD_ADDR_VAR 0 2
58299: PUSH
58300: LD_VAR 0 2
58304: PPUSH
58305: LD_INT 2
58307: PPUSH
58308: LD_VAR 0 2
58312: PUSH
58313: LD_INT 2
58315: ARRAY
58316: PPUSH
58317: LD_INT 1
58319: PPUSH
58320: CALL_OW 3
58324: PPUSH
58325: CALL_OW 1
58329: ST_TO_ADDR
// tmp := 1 ;
58330: LD_ADDR_VAR 0 3
58334: PUSH
58335: LD_STRING 1
58337: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
58338: LD_ADDR_VAR 0 6
58342: PUSH
58343: LD_VAR 0 6
58347: PUSH
58348: LD_VAR 0 3
58352: STR
58353: ST_TO_ADDR
// end ;
58354: GO 58250
58356: POP
58357: POP
// if isGameLoad then
58358: LD_VAR 0 1
58362: IFFALSE 58837
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
58364: LD_ADDR_VAR 0 4
58368: PUSH
58369: LD_EXP 25
58373: PUSH
58374: LD_EXP 24
58378: PUSH
58379: LD_EXP 26
58383: PUSH
58384: LD_EXP 23
58388: PUSH
58389: LD_EXP 27
58393: PUSH
58394: LD_EXP 28
58398: PUSH
58399: LD_EXP 29
58403: PUSH
58404: LD_EXP 30
58408: PUSH
58409: LD_EXP 31
58413: PUSH
58414: LD_EXP 32
58418: PUSH
58419: LD_EXP 33
58423: PUSH
58424: LD_EXP 34
58428: PUSH
58429: LD_EXP 35
58433: PUSH
58434: LD_EXP 36
58438: PUSH
58439: LD_EXP 44
58443: PUSH
58444: LD_EXP 45
58448: PUSH
58449: LD_EXP 46
58453: PUSH
58454: LD_EXP 47
58458: PUSH
58459: LD_EXP 49
58463: PUSH
58464: LD_EXP 50
58468: PUSH
58469: LD_EXP 51
58473: PUSH
58474: LD_EXP 54
58478: PUSH
58479: LD_EXP 56
58483: PUSH
58484: LD_EXP 57
58488: PUSH
58489: LD_EXP 58
58493: PUSH
58494: LD_EXP 60
58498: PUSH
58499: LD_EXP 61
58503: PUSH
58504: LD_EXP 64
58508: PUSH
58509: LD_EXP 65
58513: PUSH
58514: LD_EXP 66
58518: PUSH
58519: LD_EXP 67
58523: PUSH
58524: LD_EXP 68
58528: PUSH
58529: LD_EXP 69
58533: PUSH
58534: LD_EXP 70
58538: PUSH
58539: LD_EXP 71
58543: PUSH
58544: LD_EXP 72
58548: PUSH
58549: LD_EXP 37
58553: PUSH
58554: LD_EXP 38
58558: PUSH
58559: LD_EXP 41
58563: PUSH
58564: LD_EXP 42
58568: PUSH
58569: LD_EXP 43
58573: PUSH
58574: LD_EXP 39
58578: PUSH
58579: LD_EXP 40
58583: PUSH
58584: LD_EXP 48
58588: PUSH
58589: LD_EXP 52
58593: PUSH
58594: LD_EXP 53
58598: PUSH
58599: LD_EXP 55
58603: PUSH
58604: LD_EXP 59
58608: PUSH
58609: LD_EXP 62
58613: PUSH
58614: LD_EXP 63
58618: PUSH
58619: LD_EXP 73
58623: PUSH
58624: LD_EXP 74
58628: PUSH
58629: LD_EXP 75
58633: PUSH
58634: LD_EXP 76
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: ST_TO_ADDR
// tmp :=  ;
58695: LD_ADDR_VAR 0 3
58699: PUSH
58700: LD_STRING 
58702: ST_TO_ADDR
// for i = 1 to normalCounter do
58703: LD_ADDR_VAR 0 8
58707: PUSH
58708: DOUBLE
58709: LD_INT 1
58711: DEC
58712: ST_TO_ADDR
58713: LD_EXP 21
58717: PUSH
58718: FOR_TO
58719: IFFALSE 58755
// begin if flags [ i ] then
58721: LD_VAR 0 4
58725: PUSH
58726: LD_VAR 0 8
58730: ARRAY
58731: IFFALSE 58753
// tmp := tmp & i & ; ;
58733: LD_ADDR_VAR 0 3
58737: PUSH
58738: LD_VAR 0 3
58742: PUSH
58743: LD_VAR 0 8
58747: STR
58748: PUSH
58749: LD_STRING ;
58751: STR
58752: ST_TO_ADDR
// end ;
58753: GO 58718
58755: POP
58756: POP
// for i = 1 to hardcoreCounter do
58757: LD_ADDR_VAR 0 8
58761: PUSH
58762: DOUBLE
58763: LD_INT 1
58765: DEC
58766: ST_TO_ADDR
58767: LD_EXP 22
58771: PUSH
58772: FOR_TO
58773: IFFALSE 58819
// begin if flags [ normalCounter + i ] then
58775: LD_VAR 0 4
58779: PUSH
58780: LD_EXP 21
58784: PUSH
58785: LD_VAR 0 8
58789: PLUS
58790: ARRAY
58791: IFFALSE 58817
// tmp := tmp & ( 100 + i ) & ; ;
58793: LD_ADDR_VAR 0 3
58797: PUSH
58798: LD_VAR 0 3
58802: PUSH
58803: LD_INT 100
58805: PUSH
58806: LD_VAR 0 8
58810: PLUS
58811: STR
58812: PUSH
58813: LD_STRING ;
58815: STR
58816: ST_TO_ADDR
// end ;
58817: GO 58772
58819: POP
58820: POP
// if tmp then
58821: LD_VAR 0 3
58825: IFFALSE 58837
// active := tmp ;
58827: LD_ADDR_VAR 0 7
58831: PUSH
58832: LD_VAR 0 3
58836: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
58837: LD_STRING getStreamItemsFromMission("
58839: PUSH
58840: LD_VAR 0 5
58844: STR
58845: PUSH
58846: LD_STRING ","
58848: STR
58849: PUSH
58850: LD_VAR 0 6
58854: STR
58855: PUSH
58856: LD_STRING ","
58858: STR
58859: PUSH
58860: LD_VAR 0 7
58864: STR
58865: PUSH
58866: LD_STRING ")
58868: STR
58869: PPUSH
58870: CALL_OW 559
// end else
58874: GO 58883
// ToLua ( getStreamItemsFromMission("","","") ) ;
58876: LD_STRING getStreamItemsFromMission("","","")
58878: PPUSH
58879: CALL_OW 559
// end ;
58883: LD_VAR 0 2
58887: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
58888: LD_EXP 20
58892: IFFALSE 58900
58894: PUSH
58895: LD_EXP 25
58899: AND
58900: IFFALSE 59024
58902: GO 58904
58904: DISABLE
58905: LD_INT 0
58907: PPUSH
58908: PPUSH
// begin enable ;
58909: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
58910: LD_ADDR_VAR 0 2
58914: PUSH
58915: LD_INT 22
58917: PUSH
58918: LD_OWVAR 2
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 2
58929: PUSH
58930: LD_INT 34
58932: PUSH
58933: LD_INT 7
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 34
58942: PUSH
58943: LD_INT 45
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 34
58952: PUSH
58953: LD_INT 28
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 34
58962: PUSH
58963: LD_INT 47
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PPUSH
58981: CALL_OW 69
58985: ST_TO_ADDR
// if not tmp then
58986: LD_VAR 0 2
58990: NOT
58991: IFFALSE 58995
// exit ;
58993: GO 59024
// for i in tmp do
58995: LD_ADDR_VAR 0 1
58999: PUSH
59000: LD_VAR 0 2
59004: PUSH
59005: FOR_IN
59006: IFFALSE 59022
// begin SetLives ( i , 0 ) ;
59008: LD_VAR 0 1
59012: PPUSH
59013: LD_INT 0
59015: PPUSH
59016: CALL_OW 234
// end ;
59020: GO 59005
59022: POP
59023: POP
// end ;
59024: PPOPN 2
59026: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
59027: LD_EXP 20
59031: IFFALSE 59039
59033: PUSH
59034: LD_EXP 26
59038: AND
59039: IFFALSE 59123
59041: GO 59043
59043: DISABLE
59044: LD_INT 0
59046: PPUSH
59047: PPUSH
// begin enable ;
59048: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
59049: LD_ADDR_VAR 0 2
59053: PUSH
59054: LD_INT 22
59056: PUSH
59057: LD_OWVAR 2
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 32
59068: PUSH
59069: LD_INT 3
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PPUSH
59080: CALL_OW 69
59084: ST_TO_ADDR
// if not tmp then
59085: LD_VAR 0 2
59089: NOT
59090: IFFALSE 59094
// exit ;
59092: GO 59123
// for i in tmp do
59094: LD_ADDR_VAR 0 1
59098: PUSH
59099: LD_VAR 0 2
59103: PUSH
59104: FOR_IN
59105: IFFALSE 59121
// begin SetLives ( i , 0 ) ;
59107: LD_VAR 0 1
59111: PPUSH
59112: LD_INT 0
59114: PPUSH
59115: CALL_OW 234
// end ;
59119: GO 59104
59121: POP
59122: POP
// end ;
59123: PPOPN 2
59125: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
59126: LD_EXP 20
59130: IFFALSE 59138
59132: PUSH
59133: LD_EXP 23
59137: AND
59138: IFFALSE 59231
59140: GO 59142
59142: DISABLE
59143: LD_INT 0
59145: PPUSH
// begin enable ;
59146: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
59147: LD_ADDR_VAR 0 1
59151: PUSH
59152: LD_INT 22
59154: PUSH
59155: LD_OWVAR 2
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 2
59166: PUSH
59167: LD_INT 25
59169: PUSH
59170: LD_INT 5
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 25
59179: PUSH
59180: LD_INT 9
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 25
59189: PUSH
59190: LD_INT 8
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PPUSH
59207: CALL_OW 69
59211: PUSH
59212: FOR_IN
59213: IFFALSE 59229
// begin SetClass ( i , 1 ) ;
59215: LD_VAR 0 1
59219: PPUSH
59220: LD_INT 1
59222: PPUSH
59223: CALL_OW 336
// end ;
59227: GO 59212
59229: POP
59230: POP
// end ;
59231: PPOPN 1
59233: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
59234: LD_EXP 20
59238: IFFALSE 59246
59240: PUSH
59241: LD_EXP 24
59245: AND
59246: IFFALSE 59258
59248: PUSH
59249: LD_OWVAR 65
59253: PUSH
59254: LD_INT 7
59256: LESS
59257: AND
59258: IFFALSE 59272
59260: GO 59262
59262: DISABLE
// begin enable ;
59263: ENABLE
// game_speed := 7 ;
59264: LD_ADDR_OWVAR 65
59268: PUSH
59269: LD_INT 7
59271: ST_TO_ADDR
// end ;
59272: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
59273: LD_EXP 20
59277: IFFALSE 59285
59279: PUSH
59280: LD_EXP 27
59284: AND
59285: IFFALSE 59487
59287: GO 59289
59289: DISABLE
59290: LD_INT 0
59292: PPUSH
59293: PPUSH
59294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
59295: LD_ADDR_VAR 0 3
59299: PUSH
59300: LD_INT 81
59302: PUSH
59303: LD_OWVAR 2
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 21
59314: PUSH
59315: LD_INT 1
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PPUSH
59326: CALL_OW 69
59330: ST_TO_ADDR
// if not tmp then
59331: LD_VAR 0 3
59335: NOT
59336: IFFALSE 59340
// exit ;
59338: GO 59487
// if tmp > 5 then
59340: LD_VAR 0 3
59344: PUSH
59345: LD_INT 5
59347: GREATER
59348: IFFALSE 59360
// k := 5 else
59350: LD_ADDR_VAR 0 2
59354: PUSH
59355: LD_INT 5
59357: ST_TO_ADDR
59358: GO 59370
// k := tmp ;
59360: LD_ADDR_VAR 0 2
59364: PUSH
59365: LD_VAR 0 3
59369: ST_TO_ADDR
// for i := 1 to k do
59370: LD_ADDR_VAR 0 1
59374: PUSH
59375: DOUBLE
59376: LD_INT 1
59378: DEC
59379: ST_TO_ADDR
59380: LD_VAR 0 2
59384: PUSH
59385: FOR_TO
59386: IFFALSE 59485
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
59388: LD_VAR 0 3
59392: PUSH
59393: LD_VAR 0 1
59397: ARRAY
59398: PPUSH
59399: LD_VAR 0 1
59403: PUSH
59404: LD_INT 4
59406: MOD
59407: PUSH
59408: LD_INT 1
59410: PLUS
59411: PPUSH
59412: CALL_OW 259
59416: PUSH
59417: LD_INT 10
59419: LESS
59420: IFFALSE 59483
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
59422: LD_VAR 0 3
59426: PUSH
59427: LD_VAR 0 1
59431: ARRAY
59432: PPUSH
59433: LD_VAR 0 1
59437: PUSH
59438: LD_INT 4
59440: MOD
59441: PUSH
59442: LD_INT 1
59444: PLUS
59445: PPUSH
59446: LD_VAR 0 3
59450: PUSH
59451: LD_VAR 0 1
59455: ARRAY
59456: PPUSH
59457: LD_VAR 0 1
59461: PUSH
59462: LD_INT 4
59464: MOD
59465: PUSH
59466: LD_INT 1
59468: PLUS
59469: PPUSH
59470: CALL_OW 259
59474: PUSH
59475: LD_INT 1
59477: PLUS
59478: PPUSH
59479: CALL_OW 237
59483: GO 59385
59485: POP
59486: POP
// end ;
59487: PPOPN 3
59489: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
59490: LD_EXP 20
59494: IFFALSE 59502
59496: PUSH
59497: LD_EXP 28
59501: AND
59502: IFFALSE 59522
59504: GO 59506
59506: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
59507: LD_INT 4
59509: PPUSH
59510: LD_OWVAR 2
59514: PPUSH
59515: LD_INT 0
59517: PPUSH
59518: CALL_OW 324
59522: END
// every 0 0$1 trigger StreamModeActive and sShovel do
59523: LD_EXP 20
59527: IFFALSE 59535
59529: PUSH
59530: LD_EXP 57
59534: AND
59535: IFFALSE 59555
59537: GO 59539
59539: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
59540: LD_INT 19
59542: PPUSH
59543: LD_OWVAR 2
59547: PPUSH
59548: LD_INT 0
59550: PPUSH
59551: CALL_OW 324
59555: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
59556: LD_EXP 20
59560: IFFALSE 59568
59562: PUSH
59563: LD_EXP 29
59567: AND
59568: IFFALSE 59670
59570: GO 59572
59572: DISABLE
59573: LD_INT 0
59575: PPUSH
59576: PPUSH
// begin enable ;
59577: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
59578: LD_ADDR_VAR 0 2
59582: PUSH
59583: LD_INT 22
59585: PUSH
59586: LD_OWVAR 2
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 2
59597: PUSH
59598: LD_INT 34
59600: PUSH
59601: LD_INT 11
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 34
59610: PUSH
59611: LD_INT 30
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: LIST
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PPUSH
59627: CALL_OW 69
59631: ST_TO_ADDR
// if not tmp then
59632: LD_VAR 0 2
59636: NOT
59637: IFFALSE 59641
// exit ;
59639: GO 59670
// for i in tmp do
59641: LD_ADDR_VAR 0 1
59645: PUSH
59646: LD_VAR 0 2
59650: PUSH
59651: FOR_IN
59652: IFFALSE 59668
// begin SetLives ( i , 0 ) ;
59654: LD_VAR 0 1
59658: PPUSH
59659: LD_INT 0
59661: PPUSH
59662: CALL_OW 234
// end ;
59666: GO 59651
59668: POP
59669: POP
// end ;
59670: PPOPN 2
59672: END
// every 0 0$1 trigger StreamModeActive and sBunker do
59673: LD_EXP 20
59677: IFFALSE 59685
59679: PUSH
59680: LD_EXP 30
59684: AND
59685: IFFALSE 59705
59687: GO 59689
59689: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
59690: LD_INT 32
59692: PPUSH
59693: LD_OWVAR 2
59697: PPUSH
59698: LD_INT 0
59700: PPUSH
59701: CALL_OW 324
59705: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
59706: LD_EXP 20
59710: IFFALSE 59718
59712: PUSH
59713: LD_EXP 31
59717: AND
59718: IFFALSE 59901
59720: GO 59722
59722: DISABLE
59723: LD_INT 0
59725: PPUSH
59726: PPUSH
59727: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
59728: LD_ADDR_VAR 0 2
59732: PUSH
59733: LD_INT 22
59735: PUSH
59736: LD_OWVAR 2
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 33
59747: PUSH
59748: LD_INT 3
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PPUSH
59759: CALL_OW 69
59763: ST_TO_ADDR
// if not tmp then
59764: LD_VAR 0 2
59768: NOT
59769: IFFALSE 59773
// exit ;
59771: GO 59901
// side := 0 ;
59773: LD_ADDR_VAR 0 3
59777: PUSH
59778: LD_INT 0
59780: ST_TO_ADDR
// for i := 1 to 8 do
59781: LD_ADDR_VAR 0 1
59785: PUSH
59786: DOUBLE
59787: LD_INT 1
59789: DEC
59790: ST_TO_ADDR
59791: LD_INT 8
59793: PUSH
59794: FOR_TO
59795: IFFALSE 59845
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
59797: LD_OWVAR 2
59801: PUSH
59802: LD_VAR 0 1
59806: NONEQUAL
59807: IFFALSE 59829
59809: PUSH
59810: LD_OWVAR 2
59814: PPUSH
59815: LD_VAR 0 1
59819: PPUSH
59820: CALL_OW 81
59824: PUSH
59825: LD_INT 2
59827: EQUAL
59828: AND
59829: IFFALSE 59843
// begin side := i ;
59831: LD_ADDR_VAR 0 3
59835: PUSH
59836: LD_VAR 0 1
59840: ST_TO_ADDR
// break ;
59841: GO 59845
// end ;
59843: GO 59794
59845: POP
59846: POP
// if not side then
59847: LD_VAR 0 3
59851: NOT
59852: IFFALSE 59856
// exit ;
59854: GO 59901
// for i := 1 to tmp do
59856: LD_ADDR_VAR 0 1
59860: PUSH
59861: DOUBLE
59862: LD_INT 1
59864: DEC
59865: ST_TO_ADDR
59866: LD_VAR 0 2
59870: PUSH
59871: FOR_TO
59872: IFFALSE 59899
// if Prob ( 60 ) then
59874: LD_INT 60
59876: PPUSH
59877: CALL_OW 13
59881: IFFALSE 59897
// SetSide ( i , side ) ;
59883: LD_VAR 0 1
59887: PPUSH
59888: LD_VAR 0 3
59892: PPUSH
59893: CALL_OW 235
59897: GO 59871
59899: POP
59900: POP
// end ;
59901: PPOPN 3
59903: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
59904: LD_EXP 20
59908: IFFALSE 59916
59910: PUSH
59911: LD_EXP 33
59915: AND
59916: IFFALSE 60035
59918: GO 59920
59920: DISABLE
59921: LD_INT 0
59923: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
59924: LD_ADDR_VAR 0 1
59928: PUSH
59929: LD_INT 22
59931: PUSH
59932: LD_OWVAR 2
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 21
59943: PUSH
59944: LD_INT 1
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 3
59953: PUSH
59954: LD_INT 23
59956: PUSH
59957: LD_INT 0
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: LIST
59972: PPUSH
59973: CALL_OW 69
59977: PUSH
59978: FOR_IN
59979: IFFALSE 60033
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
59981: LD_VAR 0 1
59985: PPUSH
59986: CALL_OW 257
59990: PUSH
59991: LD_INT 1
59993: PUSH
59994: LD_INT 2
59996: PUSH
59997: LD_INT 3
59999: PUSH
60000: LD_INT 4
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: IN
60009: IFFALSE 60031
// SetClass ( un , rand ( 1 , 4 ) ) ;
60011: LD_VAR 0 1
60015: PPUSH
60016: LD_INT 1
60018: PPUSH
60019: LD_INT 4
60021: PPUSH
60022: CALL_OW 12
60026: PPUSH
60027: CALL_OW 336
60031: GO 59978
60033: POP
60034: POP
// end ;
60035: PPOPN 1
60037: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
60038: LD_EXP 20
60042: IFFALSE 60050
60044: PUSH
60045: LD_EXP 32
60049: AND
60050: IFFALSE 60129
60052: GO 60054
60054: DISABLE
60055: LD_INT 0
60057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
60058: LD_ADDR_VAR 0 1
60062: PUSH
60063: LD_INT 22
60065: PUSH
60066: LD_OWVAR 2
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 21
60077: PUSH
60078: LD_INT 3
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PPUSH
60089: CALL_OW 69
60093: ST_TO_ADDR
// if not tmp then
60094: LD_VAR 0 1
60098: NOT
60099: IFFALSE 60103
// exit ;
60101: GO 60129
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
60103: LD_VAR 0 1
60107: PUSH
60108: LD_INT 1
60110: PPUSH
60111: LD_VAR 0 1
60115: PPUSH
60116: CALL_OW 12
60120: ARRAY
60121: PPUSH
60122: LD_INT 100
60124: PPUSH
60125: CALL_OW 234
// end ;
60129: PPOPN 1
60131: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
60132: LD_EXP 20
60136: IFFALSE 60144
60138: PUSH
60139: LD_EXP 34
60143: AND
60144: IFFALSE 60242
60146: GO 60148
60148: DISABLE
60149: LD_INT 0
60151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60152: LD_ADDR_VAR 0 1
60156: PUSH
60157: LD_INT 22
60159: PUSH
60160: LD_OWVAR 2
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 21
60171: PUSH
60172: LD_INT 1
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PPUSH
60183: CALL_OW 69
60187: ST_TO_ADDR
// if not tmp then
60188: LD_VAR 0 1
60192: NOT
60193: IFFALSE 60197
// exit ;
60195: GO 60242
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
60197: LD_VAR 0 1
60201: PUSH
60202: LD_INT 1
60204: PPUSH
60205: LD_VAR 0 1
60209: PPUSH
60210: CALL_OW 12
60214: ARRAY
60215: PPUSH
60216: LD_INT 1
60218: PPUSH
60219: LD_INT 4
60221: PPUSH
60222: CALL_OW 12
60226: PPUSH
60227: LD_INT 3000
60229: PPUSH
60230: LD_INT 9000
60232: PPUSH
60233: CALL_OW 12
60237: PPUSH
60238: CALL_OW 492
// end ;
60242: PPOPN 1
60244: END
// every 0 0$1 trigger StreamModeActive and sDepot do
60245: LD_EXP 20
60249: IFFALSE 60257
60251: PUSH
60252: LD_EXP 35
60256: AND
60257: IFFALSE 60277
60259: GO 60261
60261: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
60262: LD_INT 1
60264: PPUSH
60265: LD_OWVAR 2
60269: PPUSH
60270: LD_INT 0
60272: PPUSH
60273: CALL_OW 324
60277: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
60278: LD_EXP 20
60282: IFFALSE 60290
60284: PUSH
60285: LD_EXP 36
60289: AND
60290: IFFALSE 60373
60292: GO 60294
60294: DISABLE
60295: LD_INT 0
60297: PPUSH
60298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
60299: LD_ADDR_VAR 0 2
60303: PUSH
60304: LD_INT 22
60306: PUSH
60307: LD_OWVAR 2
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 21
60318: PUSH
60319: LD_INT 3
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PPUSH
60330: CALL_OW 69
60334: ST_TO_ADDR
// if not tmp then
60335: LD_VAR 0 2
60339: NOT
60340: IFFALSE 60344
// exit ;
60342: GO 60373
// for i in tmp do
60344: LD_ADDR_VAR 0 1
60348: PUSH
60349: LD_VAR 0 2
60353: PUSH
60354: FOR_IN
60355: IFFALSE 60371
// SetBLevel ( i , 10 ) ;
60357: LD_VAR 0 1
60361: PPUSH
60362: LD_INT 10
60364: PPUSH
60365: CALL_OW 241
60369: GO 60354
60371: POP
60372: POP
// end ;
60373: PPOPN 2
60375: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
60376: LD_EXP 20
60380: IFFALSE 60388
60382: PUSH
60383: LD_EXP 37
60387: AND
60388: IFFALSE 60499
60390: GO 60392
60392: DISABLE
60393: LD_INT 0
60395: PPUSH
60396: PPUSH
60397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60398: LD_ADDR_VAR 0 3
60402: PUSH
60403: LD_INT 22
60405: PUSH
60406: LD_OWVAR 2
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 25
60417: PUSH
60418: LD_INT 1
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PPUSH
60429: CALL_OW 69
60433: ST_TO_ADDR
// if not tmp then
60434: LD_VAR 0 3
60438: NOT
60439: IFFALSE 60443
// exit ;
60441: GO 60499
// un := tmp [ rand ( 1 , tmp ) ] ;
60443: LD_ADDR_VAR 0 2
60447: PUSH
60448: LD_VAR 0 3
60452: PUSH
60453: LD_INT 1
60455: PPUSH
60456: LD_VAR 0 3
60460: PPUSH
60461: CALL_OW 12
60465: ARRAY
60466: ST_TO_ADDR
// if Crawls ( un ) then
60467: LD_VAR 0 2
60471: PPUSH
60472: CALL_OW 318
60476: IFFALSE 60487
// ComWalk ( un ) ;
60478: LD_VAR 0 2
60482: PPUSH
60483: CALL_OW 138
// SetClass ( un , class_sniper ) ;
60487: LD_VAR 0 2
60491: PPUSH
60492: LD_INT 5
60494: PPUSH
60495: CALL_OW 336
// end ;
60499: PPOPN 3
60501: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
60502: LD_EXP 20
60506: IFFALSE 60514
60508: PUSH
60509: LD_EXP 38
60513: AND
60514: IFFALSE 60526
60516: PUSH
60517: LD_OWVAR 67
60521: PUSH
60522: LD_INT 4
60524: LESS
60525: AND
60526: IFFALSE 60545
60528: GO 60530
60530: DISABLE
// begin Difficulty := Difficulty + 1 ;
60531: LD_ADDR_OWVAR 67
60535: PUSH
60536: LD_OWVAR 67
60540: PUSH
60541: LD_INT 1
60543: PLUS
60544: ST_TO_ADDR
// end ;
60545: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
60546: LD_EXP 20
60550: IFFALSE 60558
60552: PUSH
60553: LD_EXP 39
60557: AND
60558: IFFALSE 60661
60560: GO 60562
60562: DISABLE
60563: LD_INT 0
60565: PPUSH
// begin for i := 1 to 5 do
60566: LD_ADDR_VAR 0 1
60570: PUSH
60571: DOUBLE
60572: LD_INT 1
60574: DEC
60575: ST_TO_ADDR
60576: LD_INT 5
60578: PUSH
60579: FOR_TO
60580: IFFALSE 60659
// begin uc_nation := nation_nature ;
60582: LD_ADDR_OWVAR 21
60586: PUSH
60587: LD_INT 0
60589: ST_TO_ADDR
// uc_side := 0 ;
60590: LD_ADDR_OWVAR 20
60594: PUSH
60595: LD_INT 0
60597: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
60598: LD_ADDR_OWVAR 29
60602: PUSH
60603: LD_INT 12
60605: PUSH
60606: LD_INT 12
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: ST_TO_ADDR
// hc_agressivity := 20 ;
60613: LD_ADDR_OWVAR 35
60617: PUSH
60618: LD_INT 20
60620: ST_TO_ADDR
// hc_class := class_tiger ;
60621: LD_ADDR_OWVAR 28
60625: PUSH
60626: LD_INT 14
60628: ST_TO_ADDR
// hc_gallery :=  ;
60629: LD_ADDR_OWVAR 33
60633: PUSH
60634: LD_STRING 
60636: ST_TO_ADDR
// hc_name :=  ;
60637: LD_ADDR_OWVAR 26
60641: PUSH
60642: LD_STRING 
60644: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
60645: CALL_OW 44
60649: PPUSH
60650: LD_INT 0
60652: PPUSH
60653: CALL_OW 51
// end ;
60657: GO 60579
60659: POP
60660: POP
// end ;
60661: PPOPN 1
60663: END
// every 0 0$1 trigger StreamModeActive and sBomb do
60664: LD_EXP 20
60668: IFFALSE 60676
60670: PUSH
60671: LD_EXP 40
60675: AND
60676: IFFALSE 60685
60678: GO 60680
60680: DISABLE
// StreamSibBomb ;
60681: CALL 60686 0 0
60685: END
// export function StreamSibBomb ; var i , x , y ; begin
60686: LD_INT 0
60688: PPUSH
60689: PPUSH
60690: PPUSH
60691: PPUSH
// result := false ;
60692: LD_ADDR_VAR 0 1
60696: PUSH
60697: LD_INT 0
60699: ST_TO_ADDR
// for i := 1 to 16 do
60700: LD_ADDR_VAR 0 2
60704: PUSH
60705: DOUBLE
60706: LD_INT 1
60708: DEC
60709: ST_TO_ADDR
60710: LD_INT 16
60712: PUSH
60713: FOR_TO
60714: IFFALSE 60913
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
60716: LD_ADDR_VAR 0 3
60720: PUSH
60721: LD_INT 10
60723: PUSH
60724: LD_INT 20
60726: PUSH
60727: LD_INT 30
60729: PUSH
60730: LD_INT 40
60732: PUSH
60733: LD_INT 50
60735: PUSH
60736: LD_INT 60
60738: PUSH
60739: LD_INT 70
60741: PUSH
60742: LD_INT 80
60744: PUSH
60745: LD_INT 90
60747: PUSH
60748: LD_INT 100
60750: PUSH
60751: LD_INT 110
60753: PUSH
60754: LD_INT 120
60756: PUSH
60757: LD_INT 130
60759: PUSH
60760: LD_INT 140
60762: PUSH
60763: LD_INT 150
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 1
60785: PPUSH
60786: LD_INT 15
60788: PPUSH
60789: CALL_OW 12
60793: ARRAY
60794: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
60795: LD_ADDR_VAR 0 4
60799: PUSH
60800: LD_INT 10
60802: PUSH
60803: LD_INT 20
60805: PUSH
60806: LD_INT 30
60808: PUSH
60809: LD_INT 40
60811: PUSH
60812: LD_INT 50
60814: PUSH
60815: LD_INT 60
60817: PUSH
60818: LD_INT 70
60820: PUSH
60821: LD_INT 80
60823: PUSH
60824: LD_INT 90
60826: PUSH
60827: LD_INT 100
60829: PUSH
60830: LD_INT 110
60832: PUSH
60833: LD_INT 120
60835: PUSH
60836: LD_INT 130
60838: PUSH
60839: LD_INT 140
60841: PUSH
60842: LD_INT 150
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 1
60864: PPUSH
60865: LD_INT 15
60867: PPUSH
60868: CALL_OW 12
60872: ARRAY
60873: ST_TO_ADDR
// if ValidHex ( x , y ) then
60874: LD_VAR 0 3
60878: PPUSH
60879: LD_VAR 0 4
60883: PPUSH
60884: CALL_OW 488
60888: IFFALSE 60911
// begin result := [ x , y ] ;
60890: LD_ADDR_VAR 0 1
60894: PUSH
60895: LD_VAR 0 3
60899: PUSH
60900: LD_VAR 0 4
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: ST_TO_ADDR
// break ;
60909: GO 60913
// end ; end ;
60911: GO 60713
60913: POP
60914: POP
// if result then
60915: LD_VAR 0 1
60919: IFFALSE 60979
// begin ToLua ( playSibBomb() ) ;
60921: LD_STRING playSibBomb()
60923: PPUSH
60924: CALL_OW 559
// wait ( 0 0$14 ) ;
60928: LD_INT 490
60930: PPUSH
60931: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
60935: LD_VAR 0 1
60939: PUSH
60940: LD_INT 1
60942: ARRAY
60943: PPUSH
60944: LD_VAR 0 1
60948: PUSH
60949: LD_INT 2
60951: ARRAY
60952: PPUSH
60953: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
60957: LD_VAR 0 1
60961: PUSH
60962: LD_INT 1
60964: ARRAY
60965: PPUSH
60966: LD_VAR 0 1
60970: PUSH
60971: LD_INT 2
60973: ARRAY
60974: PPUSH
60975: CALL_OW 429
// end ; end ;
60979: LD_VAR 0 1
60983: RET
// every 0 0$1 trigger StreamModeActive and sReset do
60984: LD_EXP 20
60988: IFFALSE 60996
60990: PUSH
60991: LD_EXP 42
60995: AND
60996: IFFALSE 61008
60998: GO 61000
61000: DISABLE
// YouLost (  ) ;
61001: LD_STRING 
61003: PPUSH
61004: CALL_OW 104
61008: END
// every 0 0$1 trigger StreamModeActive and sFog do
61009: LD_EXP 20
61013: IFFALSE 61021
61015: PUSH
61016: LD_EXP 41
61020: AND
61021: IFFALSE 61035
61023: GO 61025
61025: DISABLE
// FogOff ( your_side ) ;
61026: LD_OWVAR 2
61030: PPUSH
61031: CALL_OW 344
61035: END
// every 0 0$1 trigger StreamModeActive and sSun do
61036: LD_EXP 20
61040: IFFALSE 61048
61042: PUSH
61043: LD_EXP 43
61047: AND
61048: IFFALSE 61076
61050: GO 61052
61052: DISABLE
// begin solar_recharge_percent := 0 ;
61053: LD_ADDR_OWVAR 79
61057: PUSH
61058: LD_INT 0
61060: ST_TO_ADDR
// wait ( 5 5$00 ) ;
61061: LD_INT 10500
61063: PPUSH
61064: CALL_OW 67
// solar_recharge_percent := 100 ;
61068: LD_ADDR_OWVAR 79
61072: PUSH
61073: LD_INT 100
61075: ST_TO_ADDR
// end ;
61076: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
61077: LD_EXP 20
61081: IFFALSE 61089
61083: PUSH
61084: LD_EXP 44
61088: AND
61089: IFFALSE 61328
61091: GO 61093
61093: DISABLE
61094: LD_INT 0
61096: PPUSH
61097: PPUSH
61098: PPUSH
// begin tmp := [ ] ;
61099: LD_ADDR_VAR 0 3
61103: PUSH
61104: EMPTY
61105: ST_TO_ADDR
// for i := 1 to 6 do
61106: LD_ADDR_VAR 0 1
61110: PUSH
61111: DOUBLE
61112: LD_INT 1
61114: DEC
61115: ST_TO_ADDR
61116: LD_INT 6
61118: PUSH
61119: FOR_TO
61120: IFFALSE 61225
// begin uc_nation := nation_nature ;
61122: LD_ADDR_OWVAR 21
61126: PUSH
61127: LD_INT 0
61129: ST_TO_ADDR
// uc_side := 0 ;
61130: LD_ADDR_OWVAR 20
61134: PUSH
61135: LD_INT 0
61137: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61138: LD_ADDR_OWVAR 29
61142: PUSH
61143: LD_INT 12
61145: PUSH
61146: LD_INT 12
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: ST_TO_ADDR
// hc_agressivity := 20 ;
61153: LD_ADDR_OWVAR 35
61157: PUSH
61158: LD_INT 20
61160: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
61161: LD_ADDR_OWVAR 28
61165: PUSH
61166: LD_INT 17
61168: ST_TO_ADDR
// hc_gallery :=  ;
61169: LD_ADDR_OWVAR 33
61173: PUSH
61174: LD_STRING 
61176: ST_TO_ADDR
// hc_name :=  ;
61177: LD_ADDR_OWVAR 26
61181: PUSH
61182: LD_STRING 
61184: ST_TO_ADDR
// un := CreateHuman ;
61185: LD_ADDR_VAR 0 2
61189: PUSH
61190: CALL_OW 44
61194: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
61195: LD_VAR 0 2
61199: PPUSH
61200: LD_INT 1
61202: PPUSH
61203: CALL_OW 51
// tmp := tmp ^ un ;
61207: LD_ADDR_VAR 0 3
61211: PUSH
61212: LD_VAR 0 3
61216: PUSH
61217: LD_VAR 0 2
61221: ADD
61222: ST_TO_ADDR
// end ;
61223: GO 61119
61225: POP
61226: POP
// repeat wait ( 0 0$1 ) ;
61227: LD_INT 35
61229: PPUSH
61230: CALL_OW 67
// for un in tmp do
61234: LD_ADDR_VAR 0 2
61238: PUSH
61239: LD_VAR 0 3
61243: PUSH
61244: FOR_IN
61245: IFFALSE 61319
// begin if IsDead ( un ) then
61247: LD_VAR 0 2
61251: PPUSH
61252: CALL_OW 301
61256: IFFALSE 61276
// begin tmp := tmp diff un ;
61258: LD_ADDR_VAR 0 3
61262: PUSH
61263: LD_VAR 0 3
61267: PUSH
61268: LD_VAR 0 2
61272: DIFF
61273: ST_TO_ADDR
// continue ;
61274: GO 61244
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
61276: LD_VAR 0 2
61280: PPUSH
61281: LD_INT 3
61283: PUSH
61284: LD_INT 22
61286: PUSH
61287: LD_INT 0
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PPUSH
61298: CALL_OW 69
61302: PPUSH
61303: LD_VAR 0 2
61307: PPUSH
61308: CALL_OW 74
61312: PPUSH
61313: CALL_OW 115
// end ;
61317: GO 61244
61319: POP
61320: POP
// until not tmp ;
61321: LD_VAR 0 3
61325: NOT
61326: IFFALSE 61227
// end ;
61328: PPOPN 3
61330: END
// every 0 0$1 trigger StreamModeActive and sTroll do
61331: LD_EXP 20
61335: IFFALSE 61343
61337: PUSH
61338: LD_EXP 45
61342: AND
61343: IFFALSE 61397
61345: GO 61347
61347: DISABLE
// begin ToLua ( displayTroll(); ) ;
61348: LD_STRING displayTroll();
61350: PPUSH
61351: CALL_OW 559
// wait ( 3 3$00 ) ;
61355: LD_INT 6300
61357: PPUSH
61358: CALL_OW 67
// ToLua ( hideTroll(); ) ;
61362: LD_STRING hideTroll();
61364: PPUSH
61365: CALL_OW 559
// wait ( 1 1$00 ) ;
61369: LD_INT 2100
61371: PPUSH
61372: CALL_OW 67
// ToLua ( displayTroll(); ) ;
61376: LD_STRING displayTroll();
61378: PPUSH
61379: CALL_OW 559
// wait ( 1 1$00 ) ;
61383: LD_INT 2100
61385: PPUSH
61386: CALL_OW 67
// ToLua ( hideTroll(); ) ;
61390: LD_STRING hideTroll();
61392: PPUSH
61393: CALL_OW 559
// end ;
61397: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
61398: LD_EXP 20
61402: IFFALSE 61410
61404: PUSH
61405: LD_EXP 46
61409: AND
61410: IFFALSE 61473
61412: GO 61414
61414: DISABLE
61415: LD_INT 0
61417: PPUSH
// begin p := 0 ;
61418: LD_ADDR_VAR 0 1
61422: PUSH
61423: LD_INT 0
61425: ST_TO_ADDR
// repeat game_speed := 1 ;
61426: LD_ADDR_OWVAR 65
61430: PUSH
61431: LD_INT 1
61433: ST_TO_ADDR
// wait ( 0 0$1 ) ;
61434: LD_INT 35
61436: PPUSH
61437: CALL_OW 67
// p := p + 1 ;
61441: LD_ADDR_VAR 0 1
61445: PUSH
61446: LD_VAR 0 1
61450: PUSH
61451: LD_INT 1
61453: PLUS
61454: ST_TO_ADDR
// until p >= 60 ;
61455: LD_VAR 0 1
61459: PUSH
61460: LD_INT 60
61462: GREATEREQUAL
61463: IFFALSE 61426
// game_speed := 4 ;
61465: LD_ADDR_OWVAR 65
61469: PUSH
61470: LD_INT 4
61472: ST_TO_ADDR
// end ;
61473: PPOPN 1
61475: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
61476: LD_EXP 20
61480: IFFALSE 61488
61482: PUSH
61483: LD_EXP 47
61487: AND
61488: IFFALSE 61634
61490: GO 61492
61492: DISABLE
61493: LD_INT 0
61495: PPUSH
61496: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61497: LD_ADDR_VAR 0 1
61501: PUSH
61502: LD_INT 22
61504: PUSH
61505: LD_OWVAR 2
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 2
61516: PUSH
61517: LD_INT 30
61519: PUSH
61520: LD_INT 0
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 30
61529: PUSH
61530: LD_INT 1
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: LIST
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PPUSH
61546: CALL_OW 69
61550: ST_TO_ADDR
// if not depot then
61551: LD_VAR 0 1
61555: NOT
61556: IFFALSE 61560
// exit ;
61558: GO 61634
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
61560: LD_ADDR_VAR 0 2
61564: PUSH
61565: LD_VAR 0 1
61569: PUSH
61570: LD_INT 1
61572: PPUSH
61573: LD_VAR 0 1
61577: PPUSH
61578: CALL_OW 12
61582: ARRAY
61583: PPUSH
61584: CALL_OW 274
61588: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
61589: LD_VAR 0 2
61593: PPUSH
61594: LD_INT 1
61596: PPUSH
61597: LD_INT 0
61599: PPUSH
61600: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
61604: LD_VAR 0 2
61608: PPUSH
61609: LD_INT 2
61611: PPUSH
61612: LD_INT 0
61614: PPUSH
61615: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
61619: LD_VAR 0 2
61623: PPUSH
61624: LD_INT 3
61626: PPUSH
61627: LD_INT 0
61629: PPUSH
61630: CALL_OW 277
// end ;
61634: PPOPN 2
61636: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
61637: LD_EXP 20
61641: IFFALSE 61649
61643: PUSH
61644: LD_EXP 48
61648: AND
61649: IFFALSE 61746
61651: GO 61653
61653: DISABLE
61654: LD_INT 0
61656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61657: LD_ADDR_VAR 0 1
61661: PUSH
61662: LD_INT 22
61664: PUSH
61665: LD_OWVAR 2
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 21
61676: PUSH
61677: LD_INT 1
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 3
61686: PUSH
61687: LD_INT 23
61689: PUSH
61690: LD_INT 0
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: LIST
61705: PPUSH
61706: CALL_OW 69
61710: ST_TO_ADDR
// if not tmp then
61711: LD_VAR 0 1
61715: NOT
61716: IFFALSE 61720
// exit ;
61718: GO 61746
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
61720: LD_VAR 0 1
61724: PUSH
61725: LD_INT 1
61727: PPUSH
61728: LD_VAR 0 1
61732: PPUSH
61733: CALL_OW 12
61737: ARRAY
61738: PPUSH
61739: LD_INT 200
61741: PPUSH
61742: CALL_OW 234
// end ;
61746: PPOPN 1
61748: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
61749: LD_EXP 20
61753: IFFALSE 61761
61755: PUSH
61756: LD_EXP 49
61760: AND
61761: IFFALSE 61840
61763: GO 61765
61765: DISABLE
61766: LD_INT 0
61768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
61769: LD_ADDR_VAR 0 1
61773: PUSH
61774: LD_INT 22
61776: PUSH
61777: LD_OWVAR 2
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 21
61788: PUSH
61789: LD_INT 2
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PPUSH
61800: CALL_OW 69
61804: ST_TO_ADDR
// if not tmp then
61805: LD_VAR 0 1
61809: NOT
61810: IFFALSE 61814
// exit ;
61812: GO 61840
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
61814: LD_VAR 0 1
61818: PUSH
61819: LD_INT 1
61821: PPUSH
61822: LD_VAR 0 1
61826: PPUSH
61827: CALL_OW 12
61831: ARRAY
61832: PPUSH
61833: LD_INT 60
61835: PPUSH
61836: CALL_OW 234
// end ;
61840: PPOPN 1
61842: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
61843: LD_EXP 20
61847: IFFALSE 61855
61849: PUSH
61850: LD_EXP 50
61854: AND
61855: IFFALSE 61954
61857: GO 61859
61859: DISABLE
61860: LD_INT 0
61862: PPUSH
61863: PPUSH
// begin enable ;
61864: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
61865: LD_ADDR_VAR 0 1
61869: PUSH
61870: LD_INT 22
61872: PUSH
61873: LD_OWVAR 2
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 61
61884: PUSH
61885: EMPTY
61886: LIST
61887: PUSH
61888: LD_INT 33
61890: PUSH
61891: LD_INT 2
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: LIST
61902: PPUSH
61903: CALL_OW 69
61907: ST_TO_ADDR
// if not tmp then
61908: LD_VAR 0 1
61912: NOT
61913: IFFALSE 61917
// exit ;
61915: GO 61954
// for i in tmp do
61917: LD_ADDR_VAR 0 2
61921: PUSH
61922: LD_VAR 0 1
61926: PUSH
61927: FOR_IN
61928: IFFALSE 61952
// if IsControledBy ( i ) then
61930: LD_VAR 0 2
61934: PPUSH
61935: CALL_OW 312
61939: IFFALSE 61950
// ComUnlink ( i ) ;
61941: LD_VAR 0 2
61945: PPUSH
61946: CALL_OW 136
61950: GO 61927
61952: POP
61953: POP
// end ;
61954: PPOPN 2
61956: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
61957: LD_EXP 20
61961: IFFALSE 61969
61963: PUSH
61964: LD_EXP 51
61968: AND
61969: IFFALSE 62109
61971: GO 61973
61973: DISABLE
61974: LD_INT 0
61976: PPUSH
61977: PPUSH
// begin ToLua ( displayPowell(); ) ;
61978: LD_STRING displayPowell();
61980: PPUSH
61981: CALL_OW 559
// uc_side := 0 ;
61985: LD_ADDR_OWVAR 20
61989: PUSH
61990: LD_INT 0
61992: ST_TO_ADDR
// uc_nation := 2 ;
61993: LD_ADDR_OWVAR 21
61997: PUSH
61998: LD_INT 2
62000: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
62001: LD_ADDR_OWVAR 37
62005: PUSH
62006: LD_INT 14
62008: ST_TO_ADDR
// vc_engine := engine_siberite ;
62009: LD_ADDR_OWVAR 39
62013: PUSH
62014: LD_INT 3
62016: ST_TO_ADDR
// vc_control := control_apeman ;
62017: LD_ADDR_OWVAR 38
62021: PUSH
62022: LD_INT 5
62024: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
62025: LD_ADDR_OWVAR 40
62029: PUSH
62030: LD_INT 29
62032: ST_TO_ADDR
// un := CreateVehicle ;
62033: LD_ADDR_VAR 0 2
62037: PUSH
62038: CALL_OW 45
62042: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62043: LD_VAR 0 2
62047: PPUSH
62048: LD_INT 1
62050: PPUSH
62051: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
62055: LD_INT 35
62057: PPUSH
62058: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
62062: LD_VAR 0 2
62066: PPUSH
62067: LD_INT 22
62069: PUSH
62070: LD_OWVAR 2
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PPUSH
62079: CALL_OW 69
62083: PPUSH
62084: LD_VAR 0 2
62088: PPUSH
62089: CALL_OW 74
62093: PPUSH
62094: CALL_OW 115
// until IsDead ( un ) ;
62098: LD_VAR 0 2
62102: PPUSH
62103: CALL_OW 301
62107: IFFALSE 62055
// end ;
62109: PPOPN 2
62111: END
// every 0 0$1 trigger StreamModeActive and sStu do
62112: LD_EXP 20
62116: IFFALSE 62124
62118: PUSH
62119: LD_EXP 59
62123: AND
62124: IFFALSE 62140
62126: GO 62128
62128: DISABLE
// begin ToLua ( displayStucuk(); ) ;
62129: LD_STRING displayStucuk();
62131: PPUSH
62132: CALL_OW 559
// ResetFog ;
62136: CALL_OW 335
// end ;
62140: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
62141: LD_EXP 20
62145: IFFALSE 62153
62147: PUSH
62148: LD_EXP 52
62152: AND
62153: IFFALSE 62294
62155: GO 62157
62157: DISABLE
62158: LD_INT 0
62160: PPUSH
62161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62162: LD_ADDR_VAR 0 2
62166: PUSH
62167: LD_INT 22
62169: PUSH
62170: LD_OWVAR 2
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 21
62181: PUSH
62182: LD_INT 1
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PPUSH
62193: CALL_OW 69
62197: ST_TO_ADDR
// if not tmp then
62198: LD_VAR 0 2
62202: NOT
62203: IFFALSE 62207
// exit ;
62205: GO 62294
// un := tmp [ rand ( 1 , tmp ) ] ;
62207: LD_ADDR_VAR 0 1
62211: PUSH
62212: LD_VAR 0 2
62216: PUSH
62217: LD_INT 1
62219: PPUSH
62220: LD_VAR 0 2
62224: PPUSH
62225: CALL_OW 12
62229: ARRAY
62230: ST_TO_ADDR
// SetSide ( un , 0 ) ;
62231: LD_VAR 0 1
62235: PPUSH
62236: LD_INT 0
62238: PPUSH
62239: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
62243: LD_VAR 0 1
62247: PPUSH
62248: LD_OWVAR 3
62252: PUSH
62253: LD_VAR 0 1
62257: DIFF
62258: PPUSH
62259: LD_VAR 0 1
62263: PPUSH
62264: CALL_OW 74
62268: PPUSH
62269: CALL_OW 115
// wait ( 0 0$20 ) ;
62273: LD_INT 700
62275: PPUSH
62276: CALL_OW 67
// SetSide ( un , your_side ) ;
62280: LD_VAR 0 1
62284: PPUSH
62285: LD_OWVAR 2
62289: PPUSH
62290: CALL_OW 235
// end ;
62294: PPOPN 2
62296: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
62297: LD_EXP 20
62301: IFFALSE 62309
62303: PUSH
62304: LD_EXP 53
62308: AND
62309: IFFALSE 62415
62311: GO 62313
62313: DISABLE
62314: LD_INT 0
62316: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62317: LD_ADDR_VAR 0 1
62321: PUSH
62322: LD_INT 22
62324: PUSH
62325: LD_OWVAR 2
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 2
62336: PUSH
62337: LD_INT 30
62339: PUSH
62340: LD_INT 0
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 30
62349: PUSH
62350: LD_INT 1
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: LIST
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PPUSH
62366: CALL_OW 69
62370: ST_TO_ADDR
// if not depot then
62371: LD_VAR 0 1
62375: NOT
62376: IFFALSE 62380
// exit ;
62378: GO 62415
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
62380: LD_VAR 0 1
62384: PUSH
62385: LD_INT 1
62387: ARRAY
62388: PPUSH
62389: CALL_OW 250
62393: PPUSH
62394: LD_VAR 0 1
62398: PUSH
62399: LD_INT 1
62401: ARRAY
62402: PPUSH
62403: CALL_OW 251
62407: PPUSH
62408: LD_INT 70
62410: PPUSH
62411: CALL_OW 495
// end ;
62415: PPOPN 1
62417: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
62418: LD_EXP 20
62422: IFFALSE 62430
62424: PUSH
62425: LD_EXP 54
62429: AND
62430: IFFALSE 62641
62432: GO 62434
62434: DISABLE
62435: LD_INT 0
62437: PPUSH
62438: PPUSH
62439: PPUSH
62440: PPUSH
62441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62442: LD_ADDR_VAR 0 5
62446: PUSH
62447: LD_INT 22
62449: PUSH
62450: LD_OWVAR 2
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 21
62461: PUSH
62462: LD_INT 1
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PPUSH
62473: CALL_OW 69
62477: ST_TO_ADDR
// if not tmp then
62478: LD_VAR 0 5
62482: NOT
62483: IFFALSE 62487
// exit ;
62485: GO 62641
// for i in tmp do
62487: LD_ADDR_VAR 0 1
62491: PUSH
62492: LD_VAR 0 5
62496: PUSH
62497: FOR_IN
62498: IFFALSE 62639
// begin d := rand ( 0 , 5 ) ;
62500: LD_ADDR_VAR 0 4
62504: PUSH
62505: LD_INT 0
62507: PPUSH
62508: LD_INT 5
62510: PPUSH
62511: CALL_OW 12
62515: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
62516: LD_ADDR_VAR 0 2
62520: PUSH
62521: LD_VAR 0 1
62525: PPUSH
62526: CALL_OW 250
62530: PPUSH
62531: LD_VAR 0 4
62535: PPUSH
62536: LD_INT 3
62538: PPUSH
62539: LD_INT 12
62541: PPUSH
62542: CALL_OW 12
62546: PPUSH
62547: CALL_OW 272
62551: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
62552: LD_ADDR_VAR 0 3
62556: PUSH
62557: LD_VAR 0 1
62561: PPUSH
62562: CALL_OW 251
62566: PPUSH
62567: LD_VAR 0 4
62571: PPUSH
62572: LD_INT 3
62574: PPUSH
62575: LD_INT 12
62577: PPUSH
62578: CALL_OW 12
62582: PPUSH
62583: CALL_OW 273
62587: ST_TO_ADDR
// if ValidHex ( x , y ) then
62588: LD_VAR 0 2
62592: PPUSH
62593: LD_VAR 0 3
62597: PPUSH
62598: CALL_OW 488
62602: IFFALSE 62637
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
62604: LD_VAR 0 1
62608: PPUSH
62609: LD_VAR 0 2
62613: PPUSH
62614: LD_VAR 0 3
62618: PPUSH
62619: LD_INT 3
62621: PPUSH
62622: LD_INT 6
62624: PPUSH
62625: CALL_OW 12
62629: PPUSH
62630: LD_INT 1
62632: PPUSH
62633: CALL_OW 483
// end ;
62637: GO 62497
62639: POP
62640: POP
// end ;
62641: PPOPN 5
62643: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
62644: LD_EXP 20
62648: IFFALSE 62656
62650: PUSH
62651: LD_EXP 55
62655: AND
62656: IFFALSE 62750
62658: GO 62660
62660: DISABLE
62661: LD_INT 0
62663: PPUSH
62664: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
62665: LD_ADDR_VAR 0 2
62669: PUSH
62670: LD_INT 22
62672: PUSH
62673: LD_OWVAR 2
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 32
62684: PUSH
62685: LD_INT 1
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 21
62694: PUSH
62695: LD_INT 2
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: LIST
62706: PPUSH
62707: CALL_OW 69
62711: ST_TO_ADDR
// if not tmp then
62712: LD_VAR 0 2
62716: NOT
62717: IFFALSE 62721
// exit ;
62719: GO 62750
// for i in tmp do
62721: LD_ADDR_VAR 0 1
62725: PUSH
62726: LD_VAR 0 2
62730: PUSH
62731: FOR_IN
62732: IFFALSE 62748
// SetFuel ( i , 0 ) ;
62734: LD_VAR 0 1
62738: PPUSH
62739: LD_INT 0
62741: PPUSH
62742: CALL_OW 240
62746: GO 62731
62748: POP
62749: POP
// end ;
62750: PPOPN 2
62752: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
62753: LD_EXP 20
62757: IFFALSE 62765
62759: PUSH
62760: LD_EXP 56
62764: AND
62765: IFFALSE 62831
62767: GO 62769
62769: DISABLE
62770: LD_INT 0
62772: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
62773: LD_ADDR_VAR 0 1
62777: PUSH
62778: LD_INT 22
62780: PUSH
62781: LD_OWVAR 2
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 30
62792: PUSH
62793: LD_INT 29
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PPUSH
62804: CALL_OW 69
62808: ST_TO_ADDR
// if not tmp then
62809: LD_VAR 0 1
62813: NOT
62814: IFFALSE 62818
// exit ;
62816: GO 62831
// DestroyUnit ( tmp [ 1 ] ) ;
62818: LD_VAR 0 1
62822: PUSH
62823: LD_INT 1
62825: ARRAY
62826: PPUSH
62827: CALL_OW 65
// end ;
62831: PPOPN 1
62833: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
62834: LD_EXP 20
62838: IFFALSE 62846
62840: PUSH
62841: LD_EXP 58
62845: AND
62846: IFFALSE 62975
62848: GO 62850
62850: DISABLE
62851: LD_INT 0
62853: PPUSH
// begin uc_side := 0 ;
62854: LD_ADDR_OWVAR 20
62858: PUSH
62859: LD_INT 0
62861: ST_TO_ADDR
// uc_nation := nation_arabian ;
62862: LD_ADDR_OWVAR 21
62866: PUSH
62867: LD_INT 2
62869: ST_TO_ADDR
// hc_gallery :=  ;
62870: LD_ADDR_OWVAR 33
62874: PUSH
62875: LD_STRING 
62877: ST_TO_ADDR
// hc_name :=  ;
62878: LD_ADDR_OWVAR 26
62882: PUSH
62883: LD_STRING 
62885: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
62886: LD_INT 1
62888: PPUSH
62889: LD_INT 11
62891: PPUSH
62892: LD_INT 10
62894: PPUSH
62895: CALL_OW 380
// un := CreateHuman ;
62899: LD_ADDR_VAR 0 1
62903: PUSH
62904: CALL_OW 44
62908: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62909: LD_VAR 0 1
62913: PPUSH
62914: LD_INT 1
62916: PPUSH
62917: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
62921: LD_INT 35
62923: PPUSH
62924: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
62928: LD_VAR 0 1
62932: PPUSH
62933: LD_INT 22
62935: PUSH
62936: LD_OWVAR 2
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PPUSH
62945: CALL_OW 69
62949: PPUSH
62950: LD_VAR 0 1
62954: PPUSH
62955: CALL_OW 74
62959: PPUSH
62960: CALL_OW 115
// until IsDead ( un ) ;
62964: LD_VAR 0 1
62968: PPUSH
62969: CALL_OW 301
62973: IFFALSE 62921
// end ;
62975: PPOPN 1
62977: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
62978: LD_EXP 20
62982: IFFALSE 62990
62984: PUSH
62985: LD_EXP 60
62989: AND
62990: IFFALSE 63002
62992: GO 62994
62994: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
62995: LD_STRING earthquake(getX(game), 0, 32)
62997: PPUSH
62998: CALL_OW 559
63002: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
63003: LD_EXP 20
63007: IFFALSE 63015
63009: PUSH
63010: LD_EXP 61
63014: AND
63015: IFFALSE 63106
63017: GO 63019
63019: DISABLE
63020: LD_INT 0
63022: PPUSH
// begin enable ;
63023: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
63024: LD_ADDR_VAR 0 1
63028: PUSH
63029: LD_INT 22
63031: PUSH
63032: LD_OWVAR 2
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 21
63043: PUSH
63044: LD_INT 2
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 33
63053: PUSH
63054: LD_INT 3
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: LIST
63065: PPUSH
63066: CALL_OW 69
63070: ST_TO_ADDR
// if not tmp then
63071: LD_VAR 0 1
63075: NOT
63076: IFFALSE 63080
// exit ;
63078: GO 63106
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
63080: LD_VAR 0 1
63084: PUSH
63085: LD_INT 1
63087: PPUSH
63088: LD_VAR 0 1
63092: PPUSH
63093: CALL_OW 12
63097: ARRAY
63098: PPUSH
63099: LD_INT 1
63101: PPUSH
63102: CALL_OW 234
// end ;
63106: PPOPN 1
63108: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
63109: LD_EXP 20
63113: IFFALSE 63121
63115: PUSH
63116: LD_EXP 62
63120: AND
63121: IFFALSE 63262
63123: GO 63125
63125: DISABLE
63126: LD_INT 0
63128: PPUSH
63129: PPUSH
63130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63131: LD_ADDR_VAR 0 3
63135: PUSH
63136: LD_INT 22
63138: PUSH
63139: LD_OWVAR 2
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 25
63150: PUSH
63151: LD_INT 1
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PPUSH
63162: CALL_OW 69
63166: ST_TO_ADDR
// if not tmp then
63167: LD_VAR 0 3
63171: NOT
63172: IFFALSE 63176
// exit ;
63174: GO 63262
// un := tmp [ rand ( 1 , tmp ) ] ;
63176: LD_ADDR_VAR 0 2
63180: PUSH
63181: LD_VAR 0 3
63185: PUSH
63186: LD_INT 1
63188: PPUSH
63189: LD_VAR 0 3
63193: PPUSH
63194: CALL_OW 12
63198: ARRAY
63199: ST_TO_ADDR
// if Crawls ( un ) then
63200: LD_VAR 0 2
63204: PPUSH
63205: CALL_OW 318
63209: IFFALSE 63220
// ComWalk ( un ) ;
63211: LD_VAR 0 2
63215: PPUSH
63216: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
63220: LD_VAR 0 2
63224: PPUSH
63225: LD_INT 9
63227: PPUSH
63228: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
63232: LD_INT 28
63234: PPUSH
63235: LD_OWVAR 2
63239: PPUSH
63240: LD_INT 2
63242: PPUSH
63243: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
63247: LD_INT 29
63249: PPUSH
63250: LD_OWVAR 2
63254: PPUSH
63255: LD_INT 2
63257: PPUSH
63258: CALL_OW 322
// end ;
63262: PPOPN 3
63264: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
63265: LD_EXP 20
63269: IFFALSE 63277
63271: PUSH
63272: LD_EXP 63
63276: AND
63277: IFFALSE 63388
63279: GO 63281
63281: DISABLE
63282: LD_INT 0
63284: PPUSH
63285: PPUSH
63286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63287: LD_ADDR_VAR 0 3
63291: PUSH
63292: LD_INT 22
63294: PUSH
63295: LD_OWVAR 2
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 25
63306: PUSH
63307: LD_INT 1
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PPUSH
63318: CALL_OW 69
63322: ST_TO_ADDR
// if not tmp then
63323: LD_VAR 0 3
63327: NOT
63328: IFFALSE 63332
// exit ;
63330: GO 63388
// un := tmp [ rand ( 1 , tmp ) ] ;
63332: LD_ADDR_VAR 0 2
63336: PUSH
63337: LD_VAR 0 3
63341: PUSH
63342: LD_INT 1
63344: PPUSH
63345: LD_VAR 0 3
63349: PPUSH
63350: CALL_OW 12
63354: ARRAY
63355: ST_TO_ADDR
// if Crawls ( un ) then
63356: LD_VAR 0 2
63360: PPUSH
63361: CALL_OW 318
63365: IFFALSE 63376
// ComWalk ( un ) ;
63367: LD_VAR 0 2
63371: PPUSH
63372: CALL_OW 138
// SetClass ( un , class_mortar ) ;
63376: LD_VAR 0 2
63380: PPUSH
63381: LD_INT 8
63383: PPUSH
63384: CALL_OW 336
// end ;
63388: PPOPN 3
63390: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
63391: LD_EXP 20
63395: IFFALSE 63403
63397: PUSH
63398: LD_EXP 64
63402: AND
63403: IFFALSE 63547
63405: GO 63407
63407: DISABLE
63408: LD_INT 0
63410: PPUSH
63411: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
63412: LD_ADDR_VAR 0 2
63416: PUSH
63417: LD_INT 22
63419: PUSH
63420: LD_OWVAR 2
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: LD_INT 21
63431: PUSH
63432: LD_INT 2
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 2
63441: PUSH
63442: LD_INT 34
63444: PUSH
63445: LD_INT 12
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 34
63454: PUSH
63455: LD_INT 51
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 34
63464: PUSH
63465: LD_INT 32
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: LIST
63482: PPUSH
63483: CALL_OW 69
63487: ST_TO_ADDR
// if not tmp then
63488: LD_VAR 0 2
63492: NOT
63493: IFFALSE 63497
// exit ;
63495: GO 63547
// for i in tmp do
63497: LD_ADDR_VAR 0 1
63501: PUSH
63502: LD_VAR 0 2
63506: PUSH
63507: FOR_IN
63508: IFFALSE 63545
// if GetCargo ( i , mat_artifact ) = 0 then
63510: LD_VAR 0 1
63514: PPUSH
63515: LD_INT 4
63517: PPUSH
63518: CALL_OW 289
63522: PUSH
63523: LD_INT 0
63525: EQUAL
63526: IFFALSE 63543
// SetCargo ( i , mat_siberit , 100 ) ;
63528: LD_VAR 0 1
63532: PPUSH
63533: LD_INT 3
63535: PPUSH
63536: LD_INT 100
63538: PPUSH
63539: CALL_OW 290
63543: GO 63507
63545: POP
63546: POP
// end ;
63547: PPOPN 2
63549: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
63550: LD_EXP 20
63554: IFFALSE 63562
63556: PUSH
63557: LD_EXP 65
63561: AND
63562: IFFALSE 63745
63564: GO 63566
63566: DISABLE
63567: LD_INT 0
63569: PPUSH
63570: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63571: LD_ADDR_VAR 0 2
63575: PUSH
63576: LD_INT 22
63578: PUSH
63579: LD_OWVAR 2
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PPUSH
63588: CALL_OW 69
63592: ST_TO_ADDR
// if not tmp then
63593: LD_VAR 0 2
63597: NOT
63598: IFFALSE 63602
// exit ;
63600: GO 63745
// for i := 1 to 2 do
63602: LD_ADDR_VAR 0 1
63606: PUSH
63607: DOUBLE
63608: LD_INT 1
63610: DEC
63611: ST_TO_ADDR
63612: LD_INT 2
63614: PUSH
63615: FOR_TO
63616: IFFALSE 63743
// begin uc_side := your_side ;
63618: LD_ADDR_OWVAR 20
63622: PUSH
63623: LD_OWVAR 2
63627: ST_TO_ADDR
// uc_nation := nation_american ;
63628: LD_ADDR_OWVAR 21
63632: PUSH
63633: LD_INT 1
63635: ST_TO_ADDR
// vc_chassis := us_morphling ;
63636: LD_ADDR_OWVAR 37
63640: PUSH
63641: LD_INT 5
63643: ST_TO_ADDR
// vc_engine := engine_siberite ;
63644: LD_ADDR_OWVAR 39
63648: PUSH
63649: LD_INT 3
63651: ST_TO_ADDR
// vc_control := control_computer ;
63652: LD_ADDR_OWVAR 38
63656: PUSH
63657: LD_INT 3
63659: ST_TO_ADDR
// vc_weapon := us_double_laser ;
63660: LD_ADDR_OWVAR 40
63664: PUSH
63665: LD_INT 10
63667: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
63668: LD_VAR 0 2
63672: PUSH
63673: LD_INT 1
63675: ARRAY
63676: PPUSH
63677: CALL_OW 310
63681: NOT
63682: IFFALSE 63729
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
63684: CALL_OW 45
63688: PPUSH
63689: LD_VAR 0 2
63693: PUSH
63694: LD_INT 1
63696: ARRAY
63697: PPUSH
63698: CALL_OW 250
63702: PPUSH
63703: LD_VAR 0 2
63707: PUSH
63708: LD_INT 1
63710: ARRAY
63711: PPUSH
63712: CALL_OW 251
63716: PPUSH
63717: LD_INT 12
63719: PPUSH
63720: LD_INT 1
63722: PPUSH
63723: CALL_OW 50
63727: GO 63741
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
63729: CALL_OW 45
63733: PPUSH
63734: LD_INT 1
63736: PPUSH
63737: CALL_OW 51
// end ;
63741: GO 63615
63743: POP
63744: POP
// end ;
63745: PPOPN 2
63747: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
63748: LD_EXP 20
63752: IFFALSE 63760
63754: PUSH
63755: LD_EXP 66
63759: AND
63760: IFFALSE 63982
63762: GO 63764
63764: DISABLE
63765: LD_INT 0
63767: PPUSH
63768: PPUSH
63769: PPUSH
63770: PPUSH
63771: PPUSH
63772: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
63773: LD_ADDR_VAR 0 6
63777: PUSH
63778: LD_INT 22
63780: PUSH
63781: LD_OWVAR 2
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 21
63792: PUSH
63793: LD_INT 1
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 3
63802: PUSH
63803: LD_INT 23
63805: PUSH
63806: LD_INT 0
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: LIST
63821: PPUSH
63822: CALL_OW 69
63826: ST_TO_ADDR
// if not tmp then
63827: LD_VAR 0 6
63831: NOT
63832: IFFALSE 63836
// exit ;
63834: GO 63982
// s1 := rand ( 1 , 4 ) ;
63836: LD_ADDR_VAR 0 2
63840: PUSH
63841: LD_INT 1
63843: PPUSH
63844: LD_INT 4
63846: PPUSH
63847: CALL_OW 12
63851: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
63852: LD_ADDR_VAR 0 4
63856: PUSH
63857: LD_VAR 0 6
63861: PUSH
63862: LD_INT 1
63864: ARRAY
63865: PPUSH
63866: LD_VAR 0 2
63870: PPUSH
63871: CALL_OW 259
63875: ST_TO_ADDR
// if s1 = 1 then
63876: LD_VAR 0 2
63880: PUSH
63881: LD_INT 1
63883: EQUAL
63884: IFFALSE 63904
// s2 := rand ( 2 , 4 ) else
63886: LD_ADDR_VAR 0 3
63890: PUSH
63891: LD_INT 2
63893: PPUSH
63894: LD_INT 4
63896: PPUSH
63897: CALL_OW 12
63901: ST_TO_ADDR
63902: GO 63912
// s2 := 1 ;
63904: LD_ADDR_VAR 0 3
63908: PUSH
63909: LD_INT 1
63911: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
63912: LD_ADDR_VAR 0 5
63916: PUSH
63917: LD_VAR 0 6
63921: PUSH
63922: LD_INT 1
63924: ARRAY
63925: PPUSH
63926: LD_VAR 0 3
63930: PPUSH
63931: CALL_OW 259
63935: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
63936: LD_VAR 0 6
63940: PUSH
63941: LD_INT 1
63943: ARRAY
63944: PPUSH
63945: LD_VAR 0 2
63949: PPUSH
63950: LD_VAR 0 5
63954: PPUSH
63955: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
63959: LD_VAR 0 6
63963: PUSH
63964: LD_INT 1
63966: ARRAY
63967: PPUSH
63968: LD_VAR 0 3
63972: PPUSH
63973: LD_VAR 0 4
63977: PPUSH
63978: CALL_OW 237
// end ;
63982: PPOPN 6
63984: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
63985: LD_EXP 20
63989: IFFALSE 63997
63991: PUSH
63992: LD_EXP 67
63996: AND
63997: IFFALSE 64076
63999: GO 64001
64001: DISABLE
64002: LD_INT 0
64004: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
64005: LD_ADDR_VAR 0 1
64009: PUSH
64010: LD_INT 22
64012: PUSH
64013: LD_OWVAR 2
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 30
64024: PUSH
64025: LD_INT 3
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PPUSH
64036: CALL_OW 69
64040: ST_TO_ADDR
// if not tmp then
64041: LD_VAR 0 1
64045: NOT
64046: IFFALSE 64050
// exit ;
64048: GO 64076
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
64050: LD_VAR 0 1
64054: PUSH
64055: LD_INT 1
64057: PPUSH
64058: LD_VAR 0 1
64062: PPUSH
64063: CALL_OW 12
64067: ARRAY
64068: PPUSH
64069: LD_INT 1
64071: PPUSH
64072: CALL_OW 234
// end ;
64076: PPOPN 1
64078: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
64079: LD_EXP 20
64083: IFFALSE 64091
64085: PUSH
64086: LD_EXP 68
64090: AND
64091: IFFALSE 64203
64093: GO 64095
64095: DISABLE
64096: LD_INT 0
64098: PPUSH
64099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
64100: LD_ADDR_VAR 0 2
64104: PUSH
64105: LD_INT 22
64107: PUSH
64108: LD_OWVAR 2
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 2
64119: PUSH
64120: LD_INT 30
64122: PUSH
64123: LD_INT 27
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 30
64132: PUSH
64133: LD_INT 26
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 30
64142: PUSH
64143: LD_INT 28
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PPUSH
64160: CALL_OW 69
64164: ST_TO_ADDR
// if not tmp then
64165: LD_VAR 0 2
64169: NOT
64170: IFFALSE 64174
// exit ;
64172: GO 64203
// for i in tmp do
64174: LD_ADDR_VAR 0 1
64178: PUSH
64179: LD_VAR 0 2
64183: PUSH
64184: FOR_IN
64185: IFFALSE 64201
// SetLives ( i , 1 ) ;
64187: LD_VAR 0 1
64191: PPUSH
64192: LD_INT 1
64194: PPUSH
64195: CALL_OW 234
64199: GO 64184
64201: POP
64202: POP
// end ;
64203: PPOPN 2
64205: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
64206: LD_EXP 20
64210: IFFALSE 64218
64212: PUSH
64213: LD_EXP 69
64217: AND
64218: IFFALSE 64505
64220: GO 64222
64222: DISABLE
64223: LD_INT 0
64225: PPUSH
64226: PPUSH
64227: PPUSH
// begin i := rand ( 1 , 7 ) ;
64228: LD_ADDR_VAR 0 1
64232: PUSH
64233: LD_INT 1
64235: PPUSH
64236: LD_INT 7
64238: PPUSH
64239: CALL_OW 12
64243: ST_TO_ADDR
// case i of 1 :
64244: LD_VAR 0 1
64248: PUSH
64249: LD_INT 1
64251: DOUBLE
64252: EQUAL
64253: IFTRUE 64257
64255: GO 64267
64257: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
64258: LD_STRING earthquake(getX(game), 0, 32)
64260: PPUSH
64261: CALL_OW 559
64265: GO 64505
64267: LD_INT 2
64269: DOUBLE
64270: EQUAL
64271: IFTRUE 64275
64273: GO 64289
64275: POP
// begin ToLua ( displayStucuk(); ) ;
64276: LD_STRING displayStucuk();
64278: PPUSH
64279: CALL_OW 559
// ResetFog ;
64283: CALL_OW 335
// end ; 3 :
64287: GO 64505
64289: LD_INT 3
64291: DOUBLE
64292: EQUAL
64293: IFTRUE 64297
64295: GO 64401
64297: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64298: LD_ADDR_VAR 0 2
64302: PUSH
64303: LD_INT 22
64305: PUSH
64306: LD_OWVAR 2
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 25
64317: PUSH
64318: LD_INT 1
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PPUSH
64329: CALL_OW 69
64333: ST_TO_ADDR
// if not tmp then
64334: LD_VAR 0 2
64338: NOT
64339: IFFALSE 64343
// exit ;
64341: GO 64505
// un := tmp [ rand ( 1 , tmp ) ] ;
64343: LD_ADDR_VAR 0 3
64347: PUSH
64348: LD_VAR 0 2
64352: PUSH
64353: LD_INT 1
64355: PPUSH
64356: LD_VAR 0 2
64360: PPUSH
64361: CALL_OW 12
64365: ARRAY
64366: ST_TO_ADDR
// if Crawls ( un ) then
64367: LD_VAR 0 3
64371: PPUSH
64372: CALL_OW 318
64376: IFFALSE 64387
// ComWalk ( un ) ;
64378: LD_VAR 0 3
64382: PPUSH
64383: CALL_OW 138
// SetClass ( un , class_mortar ) ;
64387: LD_VAR 0 3
64391: PPUSH
64392: LD_INT 8
64394: PPUSH
64395: CALL_OW 336
// end ; 4 :
64399: GO 64505
64401: LD_INT 4
64403: DOUBLE
64404: EQUAL
64405: IFTRUE 64409
64407: GO 64483
64409: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
64410: LD_ADDR_VAR 0 2
64414: PUSH
64415: LD_INT 22
64417: PUSH
64418: LD_OWVAR 2
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 30
64429: PUSH
64430: LD_INT 29
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PPUSH
64441: CALL_OW 69
64445: ST_TO_ADDR
// if not tmp then
64446: LD_VAR 0 2
64450: NOT
64451: IFFALSE 64455
// exit ;
64453: GO 64505
// CenterNowOnUnits ( tmp [ 1 ] ) ;
64455: LD_VAR 0 2
64459: PUSH
64460: LD_INT 1
64462: ARRAY
64463: PPUSH
64464: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
64468: LD_VAR 0 2
64472: PUSH
64473: LD_INT 1
64475: ARRAY
64476: PPUSH
64477: CALL_OW 65
// end ; 5 .. 7 :
64481: GO 64505
64483: LD_INT 5
64485: DOUBLE
64486: GREATEREQUAL
64487: IFFALSE 64495
64489: LD_INT 7
64491: DOUBLE
64492: LESSEQUAL
64493: IFTRUE 64497
64495: GO 64504
64497: POP
// StreamSibBomb ; end ;
64498: CALL 60686 0 0
64502: GO 64505
64504: POP
// end ;
64505: PPOPN 3
64507: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
64508: LD_EXP 20
64512: IFFALSE 64520
64514: PUSH
64515: LD_EXP 70
64519: AND
64520: IFFALSE 64676
64522: GO 64524
64524: DISABLE
64525: LD_INT 0
64527: PPUSH
64528: PPUSH
64529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
64530: LD_ADDR_VAR 0 2
64534: PUSH
64535: LD_INT 81
64537: PUSH
64538: LD_OWVAR 2
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 2
64549: PUSH
64550: LD_INT 21
64552: PUSH
64553: LD_INT 1
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 21
64562: PUSH
64563: LD_INT 2
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: LIST
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PPUSH
64579: CALL_OW 69
64583: ST_TO_ADDR
// if not tmp then
64584: LD_VAR 0 2
64588: NOT
64589: IFFALSE 64593
// exit ;
64591: GO 64676
// p := 0 ;
64593: LD_ADDR_VAR 0 3
64597: PUSH
64598: LD_INT 0
64600: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
64601: LD_INT 35
64603: PPUSH
64604: CALL_OW 67
// p := p + 1 ;
64608: LD_ADDR_VAR 0 3
64612: PUSH
64613: LD_VAR 0 3
64617: PUSH
64618: LD_INT 1
64620: PLUS
64621: ST_TO_ADDR
// for i in tmp do
64622: LD_ADDR_VAR 0 1
64626: PUSH
64627: LD_VAR 0 2
64631: PUSH
64632: FOR_IN
64633: IFFALSE 64664
// if GetLives ( i ) < 1000 then
64635: LD_VAR 0 1
64639: PPUSH
64640: CALL_OW 256
64644: PUSH
64645: LD_INT 1000
64647: LESS
64648: IFFALSE 64662
// SetLives ( i , 1000 ) ;
64650: LD_VAR 0 1
64654: PPUSH
64655: LD_INT 1000
64657: PPUSH
64658: CALL_OW 234
64662: GO 64632
64664: POP
64665: POP
// until p > 20 ;
64666: LD_VAR 0 3
64670: PUSH
64671: LD_INT 20
64673: GREATER
64674: IFFALSE 64601
// end ;
64676: PPOPN 3
64678: END
// every 0 0$1 trigger StreamModeActive and sTime do
64679: LD_EXP 20
64683: IFFALSE 64691
64685: PUSH
64686: LD_EXP 71
64690: AND
64691: IFFALSE 64726
64693: GO 64695
64695: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
64696: LD_INT 28
64698: PPUSH
64699: LD_OWVAR 2
64703: PPUSH
64704: LD_INT 2
64706: PPUSH
64707: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
64711: LD_INT 30
64713: PPUSH
64714: LD_OWVAR 2
64718: PPUSH
64719: LD_INT 2
64721: PPUSH
64722: CALL_OW 322
// end ;
64726: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
64727: LD_EXP 20
64731: IFFALSE 64739
64733: PUSH
64734: LD_EXP 72
64738: AND
64739: IFFALSE 64860
64741: GO 64743
64743: DISABLE
64744: LD_INT 0
64746: PPUSH
64747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
64748: LD_ADDR_VAR 0 2
64752: PUSH
64753: LD_INT 22
64755: PUSH
64756: LD_OWVAR 2
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 21
64767: PUSH
64768: LD_INT 1
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 3
64777: PUSH
64778: LD_INT 23
64780: PUSH
64781: LD_INT 0
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: LIST
64796: PPUSH
64797: CALL_OW 69
64801: ST_TO_ADDR
// if not tmp then
64802: LD_VAR 0 2
64806: NOT
64807: IFFALSE 64811
// exit ;
64809: GO 64860
// for i in tmp do
64811: LD_ADDR_VAR 0 1
64815: PUSH
64816: LD_VAR 0 2
64820: PUSH
64821: FOR_IN
64822: IFFALSE 64858
// begin if Crawls ( i ) then
64824: LD_VAR 0 1
64828: PPUSH
64829: CALL_OW 318
64833: IFFALSE 64844
// ComWalk ( i ) ;
64835: LD_VAR 0 1
64839: PPUSH
64840: CALL_OW 138
// SetClass ( i , 2 ) ;
64844: LD_VAR 0 1
64848: PPUSH
64849: LD_INT 2
64851: PPUSH
64852: CALL_OW 336
// end ;
64856: GO 64821
64858: POP
64859: POP
// end ;
64860: PPOPN 2
64862: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
64863: LD_EXP 20
64867: IFFALSE 64875
64869: PUSH
64870: LD_EXP 73
64874: AND
64875: IFFALSE 65165
64877: GO 64879
64879: DISABLE
64880: LD_INT 0
64882: PPUSH
64883: PPUSH
64884: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
64885: LD_OWVAR 2
64889: PPUSH
64890: LD_INT 9
64892: PPUSH
64893: LD_INT 1
64895: PPUSH
64896: LD_INT 1
64898: PPUSH
64899: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
64903: LD_INT 9
64905: PPUSH
64906: LD_OWVAR 2
64910: PPUSH
64911: CALL_OW 343
// uc_side := 9 ;
64915: LD_ADDR_OWVAR 20
64919: PUSH
64920: LD_INT 9
64922: ST_TO_ADDR
// uc_nation := 2 ;
64923: LD_ADDR_OWVAR 21
64927: PUSH
64928: LD_INT 2
64930: ST_TO_ADDR
// hc_name := Dark Warrior ;
64931: LD_ADDR_OWVAR 26
64935: PUSH
64936: LD_STRING Dark Warrior
64938: ST_TO_ADDR
// hc_gallery :=  ;
64939: LD_ADDR_OWVAR 33
64943: PUSH
64944: LD_STRING 
64946: ST_TO_ADDR
// hc_noskilllimit := true ;
64947: LD_ADDR_OWVAR 76
64951: PUSH
64952: LD_INT 1
64954: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
64955: LD_ADDR_OWVAR 31
64959: PUSH
64960: LD_INT 30
64962: PUSH
64963: LD_INT 30
64965: PUSH
64966: LD_INT 30
64968: PUSH
64969: LD_INT 30
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: ST_TO_ADDR
// un := CreateHuman ;
64978: LD_ADDR_VAR 0 3
64982: PUSH
64983: CALL_OW 44
64987: ST_TO_ADDR
// hc_noskilllimit := false ;
64988: LD_ADDR_OWVAR 76
64992: PUSH
64993: LD_INT 0
64995: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
64996: LD_VAR 0 3
65000: PPUSH
65001: LD_INT 1
65003: PPUSH
65004: CALL_OW 51
// ToLua ( playRanger() ) ;
65008: LD_STRING playRanger()
65010: PPUSH
65011: CALL_OW 559
// p := 0 ;
65015: LD_ADDR_VAR 0 2
65019: PUSH
65020: LD_INT 0
65022: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
65023: LD_INT 35
65025: PPUSH
65026: CALL_OW 67
// p := p + 1 ;
65030: LD_ADDR_VAR 0 2
65034: PUSH
65035: LD_VAR 0 2
65039: PUSH
65040: LD_INT 1
65042: PLUS
65043: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
65044: LD_VAR 0 3
65048: PPUSH
65049: CALL_OW 256
65053: PUSH
65054: LD_INT 1000
65056: LESS
65057: IFFALSE 65071
// SetLives ( un , 1000 ) ;
65059: LD_VAR 0 3
65063: PPUSH
65064: LD_INT 1000
65066: PPUSH
65067: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
65071: LD_VAR 0 3
65075: PPUSH
65076: LD_INT 81
65078: PUSH
65079: LD_OWVAR 2
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 91
65090: PUSH
65091: LD_VAR 0 3
65095: PUSH
65096: LD_INT 30
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: LIST
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PPUSH
65108: CALL_OW 69
65112: PPUSH
65113: LD_VAR 0 3
65117: PPUSH
65118: CALL_OW 74
65122: PPUSH
65123: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
65127: LD_VAR 0 2
65131: PUSH
65132: LD_INT 80
65134: GREATER
65135: IFTRUE 65148
65137: PUSH
65138: LD_VAR 0 3
65142: PPUSH
65143: CALL_OW 301
65147: OR
65148: IFFALSE 65023
// if un then
65150: LD_VAR 0 3
65154: IFFALSE 65165
// RemoveUnit ( un ) ;
65156: LD_VAR 0 3
65160: PPUSH
65161: CALL_OW 64
// end ;
65165: PPOPN 3
65167: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
65168: LD_EXP 74
65172: IFFALSE 65288
65174: GO 65176
65176: DISABLE
65177: LD_INT 0
65179: PPUSH
65180: PPUSH
65181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
65182: LD_ADDR_VAR 0 2
65186: PUSH
65187: LD_INT 81
65189: PUSH
65190: LD_OWVAR 2
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 21
65201: PUSH
65202: LD_INT 1
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PPUSH
65213: CALL_OW 69
65217: ST_TO_ADDR
// ToLua ( playComputer() ) ;
65218: LD_STRING playComputer()
65220: PPUSH
65221: CALL_OW 559
// if not tmp then
65225: LD_VAR 0 2
65229: NOT
65230: IFFALSE 65234
// exit ;
65232: GO 65288
// for i in tmp do
65234: LD_ADDR_VAR 0 1
65238: PUSH
65239: LD_VAR 0 2
65243: PUSH
65244: FOR_IN
65245: IFFALSE 65286
// for j := 1 to 4 do
65247: LD_ADDR_VAR 0 3
65251: PUSH
65252: DOUBLE
65253: LD_INT 1
65255: DEC
65256: ST_TO_ADDR
65257: LD_INT 4
65259: PUSH
65260: FOR_TO
65261: IFFALSE 65282
// SetSkill ( i , j , 10 ) ;
65263: LD_VAR 0 1
65267: PPUSH
65268: LD_VAR 0 3
65272: PPUSH
65273: LD_INT 10
65275: PPUSH
65276: CALL_OW 237
65280: GO 65260
65282: POP
65283: POP
65284: GO 65244
65286: POP
65287: POP
// end ;
65288: PPOPN 3
65290: END
// every 0 0$1 trigger s30 do var i , tmp ;
65291: LD_EXP 75
65295: IFFALSE 65364
65297: GO 65299
65299: DISABLE
65300: LD_INT 0
65302: PPUSH
65303: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
65304: LD_ADDR_VAR 0 2
65308: PUSH
65309: LD_INT 22
65311: PUSH
65312: LD_OWVAR 2
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PPUSH
65321: CALL_OW 69
65325: ST_TO_ADDR
// if not tmp then
65326: LD_VAR 0 2
65330: NOT
65331: IFFALSE 65335
// exit ;
65333: GO 65364
// for i in tmp do
65335: LD_ADDR_VAR 0 1
65339: PUSH
65340: LD_VAR 0 2
65344: PUSH
65345: FOR_IN
65346: IFFALSE 65362
// SetLives ( i , 300 ) ;
65348: LD_VAR 0 1
65352: PPUSH
65353: LD_INT 300
65355: PPUSH
65356: CALL_OW 234
65360: GO 65345
65362: POP
65363: POP
// end ;
65364: PPOPN 2
65366: END
// every 0 0$1 trigger s60 do var i , tmp ;
65367: LD_EXP 76
65371: IFFALSE 65440
65373: GO 65375
65375: DISABLE
65376: LD_INT 0
65378: PPUSH
65379: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
65380: LD_ADDR_VAR 0 2
65384: PUSH
65385: LD_INT 22
65387: PUSH
65388: LD_OWVAR 2
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PPUSH
65397: CALL_OW 69
65401: ST_TO_ADDR
// if not tmp then
65402: LD_VAR 0 2
65406: NOT
65407: IFFALSE 65411
// exit ;
65409: GO 65440
// for i in tmp do
65411: LD_ADDR_VAR 0 1
65415: PUSH
65416: LD_VAR 0 2
65420: PUSH
65421: FOR_IN
65422: IFFALSE 65438
// SetLives ( i , 600 ) ;
65424: LD_VAR 0 1
65428: PPUSH
65429: LD_INT 600
65431: PPUSH
65432: CALL_OW 234
65436: GO 65421
65438: POP
65439: POP
// end ;
65440: PPOPN 2
65442: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
65443: LD_INT 0
65445: PPUSH
// case cmd of 301 :
65446: LD_VAR 0 1
65450: PUSH
65451: LD_INT 301
65453: DOUBLE
65454: EQUAL
65455: IFTRUE 65459
65457: GO 65491
65459: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
65460: LD_VAR 0 6
65464: PPUSH
65465: LD_VAR 0 7
65469: PPUSH
65470: LD_VAR 0 8
65474: PPUSH
65475: LD_VAR 0 4
65479: PPUSH
65480: LD_VAR 0 5
65484: PPUSH
65485: CALL 66704 0 5
65489: GO 65612
65491: LD_INT 302
65493: DOUBLE
65494: EQUAL
65495: IFTRUE 65499
65497: GO 65536
65499: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
65500: LD_VAR 0 6
65504: PPUSH
65505: LD_VAR 0 7
65509: PPUSH
65510: LD_VAR 0 8
65514: PPUSH
65515: LD_VAR 0 9
65519: PPUSH
65520: LD_VAR 0 4
65524: PPUSH
65525: LD_VAR 0 5
65529: PPUSH
65530: CALL 66795 0 6
65534: GO 65612
65536: LD_INT 303
65538: DOUBLE
65539: EQUAL
65540: IFTRUE 65544
65542: GO 65581
65544: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
65545: LD_VAR 0 6
65549: PPUSH
65550: LD_VAR 0 7
65554: PPUSH
65555: LD_VAR 0 8
65559: PPUSH
65560: LD_VAR 0 9
65564: PPUSH
65565: LD_VAR 0 4
65569: PPUSH
65570: LD_VAR 0 5
65574: PPUSH
65575: CALL 65617 0 6
65579: GO 65612
65581: LD_INT 304
65583: DOUBLE
65584: EQUAL
65585: IFTRUE 65589
65587: GO 65611
65589: POP
// hHackTeleport ( unit , x , y ) ; end ;
65590: LD_VAR 0 2
65594: PPUSH
65595: LD_VAR 0 4
65599: PPUSH
65600: LD_VAR 0 5
65604: PPUSH
65605: CALL 67388 0 3
65609: GO 65612
65611: POP
// end ;
65612: LD_VAR 0 12
65616: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
65617: LD_INT 0
65619: PPUSH
65620: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
65621: LD_VAR 0 1
65625: PUSH
65626: LD_INT 1
65628: LESS
65629: IFTRUE 65641
65631: PUSH
65632: LD_VAR 0 1
65636: PUSH
65637: LD_INT 3
65639: GREATER
65640: OR
65641: IFTRUE 65659
65643: PUSH
65644: LD_VAR 0 5
65648: PPUSH
65649: LD_VAR 0 6
65653: PPUSH
65654: CALL_OW 428
65658: OR
65659: IFFALSE 65663
// exit ;
65661: GO 66391
// uc_side := your_side ;
65663: LD_ADDR_OWVAR 20
65667: PUSH
65668: LD_OWVAR 2
65672: ST_TO_ADDR
// uc_nation := nation ;
65673: LD_ADDR_OWVAR 21
65677: PUSH
65678: LD_VAR 0 1
65682: ST_TO_ADDR
// bc_level = 1 ;
65683: LD_ADDR_OWVAR 43
65687: PUSH
65688: LD_INT 1
65690: ST_TO_ADDR
// case btype of 1 :
65691: LD_VAR 0 2
65695: PUSH
65696: LD_INT 1
65698: DOUBLE
65699: EQUAL
65700: IFTRUE 65704
65702: GO 65715
65704: POP
// bc_type := b_depot ; 2 :
65705: LD_ADDR_OWVAR 42
65709: PUSH
65710: LD_INT 0
65712: ST_TO_ADDR
65713: GO 66335
65715: LD_INT 2
65717: DOUBLE
65718: EQUAL
65719: IFTRUE 65723
65721: GO 65734
65723: POP
// bc_type := b_warehouse ; 3 :
65724: LD_ADDR_OWVAR 42
65728: PUSH
65729: LD_INT 1
65731: ST_TO_ADDR
65732: GO 66335
65734: LD_INT 3
65736: DOUBLE
65737: EQUAL
65738: IFTRUE 65742
65740: GO 65753
65742: POP
// bc_type := b_lab ; 4 .. 9 :
65743: LD_ADDR_OWVAR 42
65747: PUSH
65748: LD_INT 6
65750: ST_TO_ADDR
65751: GO 66335
65753: LD_INT 4
65755: DOUBLE
65756: GREATEREQUAL
65757: IFFALSE 65765
65759: LD_INT 9
65761: DOUBLE
65762: LESSEQUAL
65763: IFTRUE 65767
65765: GO 65827
65767: POP
// begin bc_type := b_lab_half ;
65768: LD_ADDR_OWVAR 42
65772: PUSH
65773: LD_INT 7
65775: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
65776: LD_ADDR_OWVAR 44
65780: PUSH
65781: LD_INT 10
65783: PUSH
65784: LD_INT 11
65786: PUSH
65787: LD_INT 12
65789: PUSH
65790: LD_INT 15
65792: PUSH
65793: LD_INT 14
65795: PUSH
65796: LD_INT 13
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: PUSH
65807: LD_VAR 0 2
65811: PUSH
65812: LD_INT 3
65814: MINUS
65815: ARRAY
65816: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
65817: LD_ADDR_OWVAR 45
65821: PUSH
65822: LD_INT 9
65824: ST_TO_ADDR
// end ; 10 .. 13 :
65825: GO 66335
65827: LD_INT 10
65829: DOUBLE
65830: GREATEREQUAL
65831: IFFALSE 65839
65833: LD_INT 13
65835: DOUBLE
65836: LESSEQUAL
65837: IFTRUE 65841
65839: GO 65918
65841: POP
// begin bc_type := b_lab_full ;
65842: LD_ADDR_OWVAR 42
65846: PUSH
65847: LD_INT 8
65849: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
65850: LD_ADDR_OWVAR 44
65854: PUSH
65855: LD_INT 10
65857: PUSH
65858: LD_INT 12
65860: PUSH
65861: LD_INT 14
65863: PUSH
65864: LD_INT 13
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: PUSH
65873: LD_VAR 0 2
65877: PUSH
65878: LD_INT 9
65880: MINUS
65881: ARRAY
65882: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
65883: LD_ADDR_OWVAR 45
65887: PUSH
65888: LD_INT 11
65890: PUSH
65891: LD_INT 15
65893: PUSH
65894: LD_INT 12
65896: PUSH
65897: LD_INT 15
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: PUSH
65906: LD_VAR 0 2
65910: PUSH
65911: LD_INT 9
65913: MINUS
65914: ARRAY
65915: ST_TO_ADDR
// end ; 14 :
65916: GO 66335
65918: LD_INT 14
65920: DOUBLE
65921: EQUAL
65922: IFTRUE 65926
65924: GO 65937
65926: POP
// bc_type := b_workshop ; 15 :
65927: LD_ADDR_OWVAR 42
65931: PUSH
65932: LD_INT 2
65934: ST_TO_ADDR
65935: GO 66335
65937: LD_INT 15
65939: DOUBLE
65940: EQUAL
65941: IFTRUE 65945
65943: GO 65956
65945: POP
// bc_type := b_factory ; 16 :
65946: LD_ADDR_OWVAR 42
65950: PUSH
65951: LD_INT 3
65953: ST_TO_ADDR
65954: GO 66335
65956: LD_INT 16
65958: DOUBLE
65959: EQUAL
65960: IFTRUE 65964
65962: GO 65975
65964: POP
// bc_type := b_ext_gun ; 17 :
65965: LD_ADDR_OWVAR 42
65969: PUSH
65970: LD_INT 17
65972: ST_TO_ADDR
65973: GO 66335
65975: LD_INT 17
65977: DOUBLE
65978: EQUAL
65979: IFTRUE 65983
65981: GO 66011
65983: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
65984: LD_ADDR_OWVAR 42
65988: PUSH
65989: LD_INT 19
65991: PUSH
65992: LD_INT 23
65994: PUSH
65995: LD_INT 19
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: LIST
66002: PUSH
66003: LD_VAR 0 1
66007: ARRAY
66008: ST_TO_ADDR
66009: GO 66335
66011: LD_INT 18
66013: DOUBLE
66014: EQUAL
66015: IFTRUE 66019
66017: GO 66030
66019: POP
// bc_type := b_ext_radar ; 19 :
66020: LD_ADDR_OWVAR 42
66024: PUSH
66025: LD_INT 20
66027: ST_TO_ADDR
66028: GO 66335
66030: LD_INT 19
66032: DOUBLE
66033: EQUAL
66034: IFTRUE 66038
66036: GO 66049
66038: POP
// bc_type := b_ext_radio ; 20 :
66039: LD_ADDR_OWVAR 42
66043: PUSH
66044: LD_INT 22
66046: ST_TO_ADDR
66047: GO 66335
66049: LD_INT 20
66051: DOUBLE
66052: EQUAL
66053: IFTRUE 66057
66055: GO 66068
66057: POP
// bc_type := b_ext_siberium ; 21 :
66058: LD_ADDR_OWVAR 42
66062: PUSH
66063: LD_INT 21
66065: ST_TO_ADDR
66066: GO 66335
66068: LD_INT 21
66070: DOUBLE
66071: EQUAL
66072: IFTRUE 66076
66074: GO 66087
66076: POP
// bc_type := b_ext_computer ; 22 :
66077: LD_ADDR_OWVAR 42
66081: PUSH
66082: LD_INT 24
66084: ST_TO_ADDR
66085: GO 66335
66087: LD_INT 22
66089: DOUBLE
66090: EQUAL
66091: IFTRUE 66095
66093: GO 66106
66095: POP
// bc_type := b_ext_track ; 23 :
66096: LD_ADDR_OWVAR 42
66100: PUSH
66101: LD_INT 16
66103: ST_TO_ADDR
66104: GO 66335
66106: LD_INT 23
66108: DOUBLE
66109: EQUAL
66110: IFTRUE 66114
66112: GO 66125
66114: POP
// bc_type := b_ext_laser ; 24 :
66115: LD_ADDR_OWVAR 42
66119: PUSH
66120: LD_INT 25
66122: ST_TO_ADDR
66123: GO 66335
66125: LD_INT 24
66127: DOUBLE
66128: EQUAL
66129: IFTRUE 66133
66131: GO 66144
66133: POP
// bc_type := b_control_tower ; 25 :
66134: LD_ADDR_OWVAR 42
66138: PUSH
66139: LD_INT 36
66141: ST_TO_ADDR
66142: GO 66335
66144: LD_INT 25
66146: DOUBLE
66147: EQUAL
66148: IFTRUE 66152
66150: GO 66163
66152: POP
// bc_type := b_breastwork ; 26 :
66153: LD_ADDR_OWVAR 42
66157: PUSH
66158: LD_INT 31
66160: ST_TO_ADDR
66161: GO 66335
66163: LD_INT 26
66165: DOUBLE
66166: EQUAL
66167: IFTRUE 66171
66169: GO 66182
66171: POP
// bc_type := b_bunker ; 27 :
66172: LD_ADDR_OWVAR 42
66176: PUSH
66177: LD_INT 32
66179: ST_TO_ADDR
66180: GO 66335
66182: LD_INT 27
66184: DOUBLE
66185: EQUAL
66186: IFTRUE 66190
66188: GO 66201
66190: POP
// bc_type := b_turret ; 28 :
66191: LD_ADDR_OWVAR 42
66195: PUSH
66196: LD_INT 33
66198: ST_TO_ADDR
66199: GO 66335
66201: LD_INT 28
66203: DOUBLE
66204: EQUAL
66205: IFTRUE 66209
66207: GO 66220
66209: POP
// bc_type := b_armoury ; 29 :
66210: LD_ADDR_OWVAR 42
66214: PUSH
66215: LD_INT 4
66217: ST_TO_ADDR
66218: GO 66335
66220: LD_INT 29
66222: DOUBLE
66223: EQUAL
66224: IFTRUE 66228
66226: GO 66239
66228: POP
// bc_type := b_barracks ; 30 :
66229: LD_ADDR_OWVAR 42
66233: PUSH
66234: LD_INT 5
66236: ST_TO_ADDR
66237: GO 66335
66239: LD_INT 30
66241: DOUBLE
66242: EQUAL
66243: IFTRUE 66247
66245: GO 66258
66247: POP
// bc_type := b_solar_power ; 31 :
66248: LD_ADDR_OWVAR 42
66252: PUSH
66253: LD_INT 27
66255: ST_TO_ADDR
66256: GO 66335
66258: LD_INT 31
66260: DOUBLE
66261: EQUAL
66262: IFTRUE 66266
66264: GO 66277
66266: POP
// bc_type := b_oil_power ; 32 :
66267: LD_ADDR_OWVAR 42
66271: PUSH
66272: LD_INT 26
66274: ST_TO_ADDR
66275: GO 66335
66277: LD_INT 32
66279: DOUBLE
66280: EQUAL
66281: IFTRUE 66285
66283: GO 66296
66285: POP
// bc_type := b_siberite_power ; 33 :
66286: LD_ADDR_OWVAR 42
66290: PUSH
66291: LD_INT 28
66293: ST_TO_ADDR
66294: GO 66335
66296: LD_INT 33
66298: DOUBLE
66299: EQUAL
66300: IFTRUE 66304
66302: GO 66315
66304: POP
// bc_type := b_oil_mine ; 34 :
66305: LD_ADDR_OWVAR 42
66309: PUSH
66310: LD_INT 29
66312: ST_TO_ADDR
66313: GO 66335
66315: LD_INT 34
66317: DOUBLE
66318: EQUAL
66319: IFTRUE 66323
66321: GO 66334
66323: POP
// bc_type := b_siberite_mine ; end ;
66324: LD_ADDR_OWVAR 42
66328: PUSH
66329: LD_INT 30
66331: ST_TO_ADDR
66332: GO 66335
66334: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
66335: LD_ADDR_VAR 0 8
66339: PUSH
66340: LD_VAR 0 5
66344: PPUSH
66345: LD_VAR 0 6
66349: PPUSH
66350: LD_VAR 0 3
66354: PPUSH
66355: CALL_OW 47
66359: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
66360: LD_OWVAR 42
66364: PUSH
66365: LD_INT 32
66367: PUSH
66368: LD_INT 33
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: IN
66375: IFFALSE 66391
// PlaceWeaponTurret ( b , weapon ) ;
66377: LD_VAR 0 8
66381: PPUSH
66382: LD_VAR 0 4
66386: PPUSH
66387: CALL_OW 431
// end ;
66391: LD_VAR 0 7
66395: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
66396: LD_INT 0
66398: PPUSH
66399: PPUSH
66400: PPUSH
66401: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66402: LD_ADDR_VAR 0 4
66406: PUSH
66407: LD_INT 22
66409: PUSH
66410: LD_OWVAR 2
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 2
66421: PUSH
66422: LD_INT 30
66424: PUSH
66425: LD_INT 0
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 30
66434: PUSH
66435: LD_INT 1
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: LIST
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PPUSH
66451: CALL_OW 69
66455: ST_TO_ADDR
// if not tmp then
66456: LD_VAR 0 4
66460: NOT
66461: IFFALSE 66465
// exit ;
66463: GO 66524
// for i in tmp do
66465: LD_ADDR_VAR 0 2
66469: PUSH
66470: LD_VAR 0 4
66474: PUSH
66475: FOR_IN
66476: IFFALSE 66522
// for j = 1 to 3 do
66478: LD_ADDR_VAR 0 3
66482: PUSH
66483: DOUBLE
66484: LD_INT 1
66486: DEC
66487: ST_TO_ADDR
66488: LD_INT 3
66490: PUSH
66491: FOR_TO
66492: IFFALSE 66518
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
66494: LD_VAR 0 2
66498: PPUSH
66499: CALL_OW 274
66503: PPUSH
66504: LD_VAR 0 3
66508: PPUSH
66509: LD_INT 99999
66511: PPUSH
66512: CALL_OW 277
66516: GO 66491
66518: POP
66519: POP
66520: GO 66475
66522: POP
66523: POP
// end ;
66524: LD_VAR 0 1
66528: RET
// export function hHackSetLevel10 ; var i , j ; begin
66529: LD_INT 0
66531: PPUSH
66532: PPUSH
66533: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
66534: LD_ADDR_VAR 0 2
66538: PUSH
66539: LD_INT 21
66541: PUSH
66542: LD_INT 1
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PPUSH
66549: CALL_OW 69
66553: PUSH
66554: FOR_IN
66555: IFFALSE 66607
// if IsSelected ( i ) then
66557: LD_VAR 0 2
66561: PPUSH
66562: CALL_OW 306
66566: IFFALSE 66605
// begin for j := 1 to 4 do
66568: LD_ADDR_VAR 0 3
66572: PUSH
66573: DOUBLE
66574: LD_INT 1
66576: DEC
66577: ST_TO_ADDR
66578: LD_INT 4
66580: PUSH
66581: FOR_TO
66582: IFFALSE 66603
// SetSkill ( i , j , 10 ) ;
66584: LD_VAR 0 2
66588: PPUSH
66589: LD_VAR 0 3
66593: PPUSH
66594: LD_INT 10
66596: PPUSH
66597: CALL_OW 237
66601: GO 66581
66603: POP
66604: POP
// end ;
66605: GO 66554
66607: POP
66608: POP
// end ;
66609: LD_VAR 0 1
66613: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
66614: LD_INT 0
66616: PPUSH
66617: PPUSH
66618: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
66619: LD_ADDR_VAR 0 2
66623: PUSH
66624: LD_INT 22
66626: PUSH
66627: LD_OWVAR 2
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 21
66638: PUSH
66639: LD_INT 1
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PPUSH
66650: CALL_OW 69
66654: PUSH
66655: FOR_IN
66656: IFFALSE 66697
// begin for j := 1 to 4 do
66658: LD_ADDR_VAR 0 3
66662: PUSH
66663: DOUBLE
66664: LD_INT 1
66666: DEC
66667: ST_TO_ADDR
66668: LD_INT 4
66670: PUSH
66671: FOR_TO
66672: IFFALSE 66693
// SetSkill ( i , j , 10 ) ;
66674: LD_VAR 0 2
66678: PPUSH
66679: LD_VAR 0 3
66683: PPUSH
66684: LD_INT 10
66686: PPUSH
66687: CALL_OW 237
66691: GO 66671
66693: POP
66694: POP
// end ;
66695: GO 66655
66697: POP
66698: POP
// end ;
66699: LD_VAR 0 1
66703: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
66704: LD_INT 0
66706: PPUSH
// uc_side := your_side ;
66707: LD_ADDR_OWVAR 20
66711: PUSH
66712: LD_OWVAR 2
66716: ST_TO_ADDR
// uc_nation := nation ;
66717: LD_ADDR_OWVAR 21
66721: PUSH
66722: LD_VAR 0 1
66726: ST_TO_ADDR
// InitHc ;
66727: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
66731: LD_INT 0
66733: PPUSH
66734: LD_VAR 0 2
66738: PPUSH
66739: LD_VAR 0 3
66743: PPUSH
66744: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
66748: LD_VAR 0 4
66752: PPUSH
66753: LD_VAR 0 5
66757: PPUSH
66758: CALL_OW 428
66762: PUSH
66763: LD_INT 0
66765: EQUAL
66766: IFFALSE 66790
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
66768: CALL_OW 44
66772: PPUSH
66773: LD_VAR 0 4
66777: PPUSH
66778: LD_VAR 0 5
66782: PPUSH
66783: LD_INT 1
66785: PPUSH
66786: CALL_OW 48
// end ;
66790: LD_VAR 0 6
66794: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
66795: LD_INT 0
66797: PPUSH
66798: PPUSH
// uc_side := your_side ;
66799: LD_ADDR_OWVAR 20
66803: PUSH
66804: LD_OWVAR 2
66808: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
66809: LD_VAR 0 1
66813: PUSH
66814: LD_INT 1
66816: PUSH
66817: LD_INT 2
66819: PUSH
66820: LD_INT 3
66822: PUSH
66823: LD_INT 4
66825: PUSH
66826: LD_INT 5
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: IN
66836: IFFALSE 66848
// uc_nation := nation_american else
66838: LD_ADDR_OWVAR 21
66842: PUSH
66843: LD_INT 1
66845: ST_TO_ADDR
66846: GO 66891
// if chassis in [ 11 , 12 , 13 , 14 ] then
66848: LD_VAR 0 1
66852: PUSH
66853: LD_INT 11
66855: PUSH
66856: LD_INT 12
66858: PUSH
66859: LD_INT 13
66861: PUSH
66862: LD_INT 14
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: IN
66871: IFFALSE 66883
// uc_nation := nation_arabian else
66873: LD_ADDR_OWVAR 21
66877: PUSH
66878: LD_INT 2
66880: ST_TO_ADDR
66881: GO 66891
// uc_nation := nation_russian ;
66883: LD_ADDR_OWVAR 21
66887: PUSH
66888: LD_INT 3
66890: ST_TO_ADDR
// vc_chassis := chassis ;
66891: LD_ADDR_OWVAR 37
66895: PUSH
66896: LD_VAR 0 1
66900: ST_TO_ADDR
// vc_engine := engine ;
66901: LD_ADDR_OWVAR 39
66905: PUSH
66906: LD_VAR 0 2
66910: ST_TO_ADDR
// vc_control := control ;
66911: LD_ADDR_OWVAR 38
66915: PUSH
66916: LD_VAR 0 3
66920: ST_TO_ADDR
// vc_weapon := weapon ;
66921: LD_ADDR_OWVAR 40
66925: PUSH
66926: LD_VAR 0 4
66930: ST_TO_ADDR
// un := CreateVehicle ;
66931: LD_ADDR_VAR 0 8
66935: PUSH
66936: CALL_OW 45
66940: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
66941: LD_VAR 0 8
66945: PPUSH
66946: LD_INT 0
66948: PPUSH
66949: LD_INT 5
66951: PPUSH
66952: CALL_OW 12
66956: PPUSH
66957: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
66961: LD_VAR 0 8
66965: PPUSH
66966: LD_VAR 0 5
66970: PPUSH
66971: LD_VAR 0 6
66975: PPUSH
66976: LD_INT 1
66978: PPUSH
66979: CALL_OW 48
// end ;
66983: LD_VAR 0 7
66987: RET
// export hInvincible ; every 1 do
66988: GO 66990
66990: DISABLE
// hInvincible := [ ] ;
66991: LD_ADDR_EXP 77
66995: PUSH
66996: EMPTY
66997: ST_TO_ADDR
66998: END
// every 10 do var i ;
66999: GO 67001
67001: DISABLE
67002: LD_INT 0
67004: PPUSH
// begin enable ;
67005: ENABLE
// if not hInvincible then
67006: LD_EXP 77
67010: NOT
67011: IFFALSE 67015
// exit ;
67013: GO 67059
// for i in hInvincible do
67015: LD_ADDR_VAR 0 1
67019: PUSH
67020: LD_EXP 77
67024: PUSH
67025: FOR_IN
67026: IFFALSE 67057
// if GetLives ( i ) < 1000 then
67028: LD_VAR 0 1
67032: PPUSH
67033: CALL_OW 256
67037: PUSH
67038: LD_INT 1000
67040: LESS
67041: IFFALSE 67055
// SetLives ( i , 1000 ) ;
67043: LD_VAR 0 1
67047: PPUSH
67048: LD_INT 1000
67050: PPUSH
67051: CALL_OW 234
67055: GO 67025
67057: POP
67058: POP
// end ;
67059: PPOPN 1
67061: END
// export function hHackInvincible ; var i ; begin
67062: LD_INT 0
67064: PPUSH
67065: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
67066: LD_ADDR_VAR 0 2
67070: PUSH
67071: LD_INT 2
67073: PUSH
67074: LD_INT 21
67076: PUSH
67077: LD_INT 1
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 21
67086: PUSH
67087: LD_INT 2
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: LIST
67098: PPUSH
67099: CALL_OW 69
67103: PUSH
67104: FOR_IN
67105: IFFALSE 67166
// if IsSelected ( i ) then
67107: LD_VAR 0 2
67111: PPUSH
67112: CALL_OW 306
67116: IFFALSE 67164
// begin if i in hInvincible then
67118: LD_VAR 0 2
67122: PUSH
67123: LD_EXP 77
67127: IN
67128: IFFALSE 67148
// hInvincible := hInvincible diff i else
67130: LD_ADDR_EXP 77
67134: PUSH
67135: LD_EXP 77
67139: PUSH
67140: LD_VAR 0 2
67144: DIFF
67145: ST_TO_ADDR
67146: GO 67164
// hInvincible := hInvincible union i ;
67148: LD_ADDR_EXP 77
67152: PUSH
67153: LD_EXP 77
67157: PUSH
67158: LD_VAR 0 2
67162: UNION
67163: ST_TO_ADDR
// end ;
67164: GO 67104
67166: POP
67167: POP
// end ;
67168: LD_VAR 0 1
67172: RET
// export function hHackInvisible ; var i , j ; begin
67173: LD_INT 0
67175: PPUSH
67176: PPUSH
67177: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
67178: LD_ADDR_VAR 0 2
67182: PUSH
67183: LD_INT 21
67185: PUSH
67186: LD_INT 1
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PPUSH
67193: CALL_OW 69
67197: PUSH
67198: FOR_IN
67199: IFFALSE 67223
// if IsSelected ( i ) then
67201: LD_VAR 0 2
67205: PPUSH
67206: CALL_OW 306
67210: IFFALSE 67221
// ComForceInvisible ( i ) ;
67212: LD_VAR 0 2
67216: PPUSH
67217: CALL_OW 496
67221: GO 67198
67223: POP
67224: POP
// end ;
67225: LD_VAR 0 1
67229: RET
// export function hHackChangeYourSide ; begin
67230: LD_INT 0
67232: PPUSH
// if your_side = 8 then
67233: LD_OWVAR 2
67237: PUSH
67238: LD_INT 8
67240: EQUAL
67241: IFFALSE 67253
// your_side := 0 else
67243: LD_ADDR_OWVAR 2
67247: PUSH
67248: LD_INT 0
67250: ST_TO_ADDR
67251: GO 67267
// your_side := your_side + 1 ;
67253: LD_ADDR_OWVAR 2
67257: PUSH
67258: LD_OWVAR 2
67262: PUSH
67263: LD_INT 1
67265: PLUS
67266: ST_TO_ADDR
// end ;
67267: LD_VAR 0 1
67271: RET
// export function hHackChangeUnitSide ; var i , j ; begin
67272: LD_INT 0
67274: PPUSH
67275: PPUSH
67276: PPUSH
// for i in all_units do
67277: LD_ADDR_VAR 0 2
67281: PUSH
67282: LD_OWVAR 3
67286: PUSH
67287: FOR_IN
67288: IFFALSE 67366
// if IsSelected ( i ) then
67290: LD_VAR 0 2
67294: PPUSH
67295: CALL_OW 306
67299: IFFALSE 67364
// begin j := GetSide ( i ) ;
67301: LD_ADDR_VAR 0 3
67305: PUSH
67306: LD_VAR 0 2
67310: PPUSH
67311: CALL_OW 255
67315: ST_TO_ADDR
// if j = 8 then
67316: LD_VAR 0 3
67320: PUSH
67321: LD_INT 8
67323: EQUAL
67324: IFFALSE 67336
// j := 0 else
67326: LD_ADDR_VAR 0 3
67330: PUSH
67331: LD_INT 0
67333: ST_TO_ADDR
67334: GO 67350
// j := j + 1 ;
67336: LD_ADDR_VAR 0 3
67340: PUSH
67341: LD_VAR 0 3
67345: PUSH
67346: LD_INT 1
67348: PLUS
67349: ST_TO_ADDR
// SetSide ( i , j ) ;
67350: LD_VAR 0 2
67354: PPUSH
67355: LD_VAR 0 3
67359: PPUSH
67360: CALL_OW 235
// end ;
67364: GO 67287
67366: POP
67367: POP
// end ;
67368: LD_VAR 0 1
67372: RET
// export function hHackFog ; begin
67373: LD_INT 0
67375: PPUSH
// FogOff ( true ) ;
67376: LD_INT 1
67378: PPUSH
67379: CALL_OW 344
// end ;
67383: LD_VAR 0 1
67387: RET
// export function hHackTeleport ( unit , x , y ) ; begin
67388: LD_INT 0
67390: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
67391: LD_VAR 0 1
67395: PPUSH
67396: LD_VAR 0 2
67400: PPUSH
67401: LD_VAR 0 3
67405: PPUSH
67406: LD_INT 1
67408: PPUSH
67409: LD_INT 1
67411: PPUSH
67412: CALL_OW 483
// CenterOnXY ( x , y ) ;
67416: LD_VAR 0 2
67420: PPUSH
67421: LD_VAR 0 3
67425: PPUSH
67426: CALL_OW 84
// end ;
67430: LD_VAR 0 4
67434: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
67435: LD_INT 0
67437: PPUSH
67438: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
67439: LD_VAR 0 1
67443: NOT
67444: IFTRUE 67463
67446: PUSH
67447: LD_VAR 0 2
67451: PPUSH
67452: LD_VAR 0 3
67456: PPUSH
67457: CALL_OW 488
67461: NOT
67462: OR
67463: IFTRUE 67498
67465: PUSH
67466: LD_VAR 0 1
67470: PPUSH
67471: CALL_OW 266
67475: PUSH
67476: LD_INT 3
67478: NONEQUAL
67479: IFFALSE 67497
67481: PUSH
67482: LD_VAR 0 1
67486: PPUSH
67487: CALL_OW 247
67491: PUSH
67492: LD_INT 1
67494: EQUAL
67495: NOT
67496: AND
67497: OR
67498: IFFALSE 67502
// exit ;
67500: GO 67784
// if GetType ( factory ) = unit_human then
67502: LD_VAR 0 1
67506: PPUSH
67507: CALL_OW 247
67511: PUSH
67512: LD_INT 1
67514: EQUAL
67515: IFFALSE 67532
// factory := IsInUnit ( factory ) ;
67517: LD_ADDR_VAR 0 1
67521: PUSH
67522: LD_VAR 0 1
67526: PPUSH
67527: CALL_OW 310
67531: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
67532: LD_VAR 0 1
67536: PPUSH
67537: CALL_OW 266
67541: PUSH
67542: LD_INT 3
67544: NONEQUAL
67545: IFFALSE 67549
// exit ;
67547: GO 67784
// for i := 1 to Count ( factoryWaypoints ) do
67549: LD_ADDR_VAR 0 5
67553: PUSH
67554: DOUBLE
67555: LD_INT 1
67557: DEC
67558: ST_TO_ADDR
67559: LD_EXP 78
67563: PPUSH
67564: CALL 5000 0 1
67568: PUSH
67569: FOR_TO
67570: IFFALSE 67732
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
67572: LD_VAR 0 2
67576: PPUSH
67577: LD_VAR 0 3
67581: PPUSH
67582: CALL_OW 428
67586: PUSH
67587: LD_EXP 78
67591: PUSH
67592: LD_VAR 0 5
67596: ARRAY
67597: PUSH
67598: LD_INT 2
67600: ARRAY
67601: EQUAL
67602: IFFALSE 67634
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
67604: LD_ADDR_EXP 78
67608: PUSH
67609: LD_EXP 78
67613: PPUSH
67614: LD_VAR 0 5
67618: PPUSH
67619: CALL_OW 3
67623: ST_TO_ADDR
// UpdateFactoryWaypoints ;
67624: CALL 67789 0 0
// exit ;
67628: POP
67629: POP
67630: GO 67784
// end else
67632: GO 67730
// if factory = factoryWaypoints [ i ] [ 2 ] then
67634: LD_VAR 0 1
67638: PUSH
67639: LD_EXP 78
67643: PUSH
67644: LD_VAR 0 5
67648: ARRAY
67649: PUSH
67650: LD_INT 2
67652: ARRAY
67653: EQUAL
67654: IFFALSE 67730
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
67656: LD_ADDR_EXP 78
67660: PUSH
67661: LD_EXP 78
67665: PPUSH
67666: LD_VAR 0 5
67670: PPUSH
67671: CALL_OW 3
67675: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
67676: LD_ADDR_EXP 78
67680: PUSH
67681: LD_EXP 78
67685: PPUSH
67686: LD_VAR 0 1
67690: PPUSH
67691: CALL_OW 255
67695: PUSH
67696: LD_VAR 0 1
67700: PUSH
67701: LD_VAR 0 2
67705: PUSH
67706: LD_VAR 0 3
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: PPUSH
67717: CALL 40976 0 2
67721: ST_TO_ADDR
// UpdateFactoryWaypoints ;
67722: CALL 67789 0 0
// exit ;
67726: POP
67727: POP
67728: GO 67784
// end ; end ;
67730: GO 67569
67732: POP
67733: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
67734: LD_ADDR_EXP 78
67738: PUSH
67739: LD_EXP 78
67743: PPUSH
67744: LD_VAR 0 1
67748: PPUSH
67749: CALL_OW 255
67753: PUSH
67754: LD_VAR 0 1
67758: PUSH
67759: LD_VAR 0 2
67763: PUSH
67764: LD_VAR 0 3
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: PPUSH
67775: CALL 40976 0 2
67779: ST_TO_ADDR
// UpdateFactoryWaypoints ;
67780: CALL 67789 0 0
// end ;
67784: LD_VAR 0 4
67788: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
67789: LD_INT 0
67791: PPUSH
67792: PPUSH
67793: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
67794: LD_STRING resetFactoryWaypoint();
67796: PPUSH
67797: CALL_OW 559
// if factoryWaypoints then
67801: LD_EXP 78
67805: IFFALSE 67926
// begin list := factoryWaypoints ;
67807: LD_ADDR_VAR 0 3
67811: PUSH
67812: LD_EXP 78
67816: ST_TO_ADDR
// for i := 1 to list do
67817: LD_ADDR_VAR 0 2
67821: PUSH
67822: DOUBLE
67823: LD_INT 1
67825: DEC
67826: ST_TO_ADDR
67827: LD_VAR 0 3
67831: PUSH
67832: FOR_TO
67833: IFFALSE 67924
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
67835: LD_STRING setFactoryWaypointXY(
67837: PUSH
67838: LD_VAR 0 3
67842: PUSH
67843: LD_VAR 0 2
67847: ARRAY
67848: PUSH
67849: LD_INT 1
67851: ARRAY
67852: STR
67853: PUSH
67854: LD_STRING ,
67856: STR
67857: PUSH
67858: LD_VAR 0 3
67862: PUSH
67863: LD_VAR 0 2
67867: ARRAY
67868: PUSH
67869: LD_INT 2
67871: ARRAY
67872: STR
67873: PUSH
67874: LD_STRING ,
67876: STR
67877: PUSH
67878: LD_VAR 0 3
67882: PUSH
67883: LD_VAR 0 2
67887: ARRAY
67888: PUSH
67889: LD_INT 3
67891: ARRAY
67892: STR
67893: PUSH
67894: LD_STRING ,
67896: STR
67897: PUSH
67898: LD_VAR 0 3
67902: PUSH
67903: LD_VAR 0 2
67907: ARRAY
67908: PUSH
67909: LD_INT 4
67911: ARRAY
67912: STR
67913: PUSH
67914: LD_STRING )
67916: STR
67917: PPUSH
67918: CALL_OW 559
67922: GO 67832
67924: POP
67925: POP
// end ; end ;
67926: LD_VAR 0 1
67930: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
67931: LD_INT 0
67933: PPUSH
// if HexInfo ( x , y ) = warehouse then
67934: LD_VAR 0 2
67938: PPUSH
67939: LD_VAR 0 3
67943: PPUSH
67944: CALL_OW 428
67948: PUSH
67949: LD_VAR 0 1
67953: EQUAL
67954: IFFALSE 67981
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
67956: LD_ADDR_EXP 80
67960: PUSH
67961: LD_EXP 80
67965: PPUSH
67966: LD_VAR 0 1
67970: PPUSH
67971: LD_INT 0
67973: PPUSH
67974: CALL_OW 1
67978: ST_TO_ADDR
67979: GO 68032
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
67981: LD_ADDR_EXP 80
67985: PUSH
67986: LD_EXP 80
67990: PPUSH
67991: LD_VAR 0 1
67995: PPUSH
67996: LD_VAR 0 1
68000: PPUSH
68001: CALL_OW 255
68005: PUSH
68006: LD_VAR 0 1
68010: PUSH
68011: LD_VAR 0 2
68015: PUSH
68016: LD_VAR 0 3
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: PPUSH
68027: CALL_OW 1
68031: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
68032: CALL 68041 0 0
// end ;
68036: LD_VAR 0 4
68040: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
68041: LD_INT 0
68043: PPUSH
68044: PPUSH
68045: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
68046: LD_STRING resetWarehouseGatheringPoints();
68048: PPUSH
68049: CALL_OW 559
// if warehouseGatheringPoints then
68053: LD_EXP 80
68057: IFFALSE 68183
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
68059: LD_ADDR_VAR 0 3
68063: PUSH
68064: LD_EXP 80
68068: PPUSH
68069: CALL 44910 0 1
68073: ST_TO_ADDR
// for i := 1 to list do
68074: LD_ADDR_VAR 0 2
68078: PUSH
68079: DOUBLE
68080: LD_INT 1
68082: DEC
68083: ST_TO_ADDR
68084: LD_VAR 0 3
68088: PUSH
68089: FOR_TO
68090: IFFALSE 68181
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
68092: LD_STRING setWarehouseGatheringPointXY(
68094: PUSH
68095: LD_VAR 0 3
68099: PUSH
68100: LD_VAR 0 2
68104: ARRAY
68105: PUSH
68106: LD_INT 1
68108: ARRAY
68109: STR
68110: PUSH
68111: LD_STRING ,
68113: STR
68114: PUSH
68115: LD_VAR 0 3
68119: PUSH
68120: LD_VAR 0 2
68124: ARRAY
68125: PUSH
68126: LD_INT 2
68128: ARRAY
68129: STR
68130: PUSH
68131: LD_STRING ,
68133: STR
68134: PUSH
68135: LD_VAR 0 3
68139: PUSH
68140: LD_VAR 0 2
68144: ARRAY
68145: PUSH
68146: LD_INT 3
68148: ARRAY
68149: STR
68150: PUSH
68151: LD_STRING ,
68153: STR
68154: PUSH
68155: LD_VAR 0 3
68159: PUSH
68160: LD_VAR 0 2
68164: ARRAY
68165: PUSH
68166: LD_INT 4
68168: ARRAY
68169: STR
68170: PUSH
68171: LD_STRING )
68173: STR
68174: PPUSH
68175: CALL_OW 559
68179: GO 68089
68181: POP
68182: POP
// end ; end ;
68183: LD_VAR 0 1
68187: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
68188: LD_EXP 80
68192: IFFALSE 68887
68194: GO 68196
68196: DISABLE
68197: LD_INT 0
68199: PPUSH
68200: PPUSH
68201: PPUSH
68202: PPUSH
68203: PPUSH
68204: PPUSH
68205: PPUSH
68206: PPUSH
68207: PPUSH
// begin enable ;
68208: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
68209: LD_ADDR_VAR 0 3
68213: PUSH
68214: LD_EXP 80
68218: PPUSH
68219: CALL 44910 0 1
68223: ST_TO_ADDR
// if not list then
68224: LD_VAR 0 3
68228: NOT
68229: IFFALSE 68233
// exit ;
68231: GO 68887
// for i := 1 to list do
68233: LD_ADDR_VAR 0 1
68237: PUSH
68238: DOUBLE
68239: LD_INT 1
68241: DEC
68242: ST_TO_ADDR
68243: LD_VAR 0 3
68247: PUSH
68248: FOR_TO
68249: IFFALSE 68885
// begin depot := list [ i ] [ 2 ] ;
68251: LD_ADDR_VAR 0 8
68255: PUSH
68256: LD_VAR 0 3
68260: PUSH
68261: LD_VAR 0 1
68265: ARRAY
68266: PUSH
68267: LD_INT 2
68269: ARRAY
68270: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
68271: LD_ADDR_VAR 0 5
68275: PUSH
68276: LD_VAR 0 3
68280: PUSH
68281: LD_VAR 0 1
68285: ARRAY
68286: PUSH
68287: LD_INT 1
68289: ARRAY
68290: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
68291: LD_VAR 0 8
68295: PPUSH
68296: CALL_OW 301
68300: IFTRUE 68319
68302: PUSH
68303: LD_VAR 0 5
68307: PUSH
68308: LD_VAR 0 8
68312: PPUSH
68313: CALL_OW 255
68317: NONEQUAL
68318: OR
68319: IFFALSE 68348
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
68321: LD_ADDR_EXP 80
68325: PUSH
68326: LD_EXP 80
68330: PPUSH
68331: LD_VAR 0 8
68335: PPUSH
68336: LD_INT 0
68338: PPUSH
68339: CALL_OW 1
68343: ST_TO_ADDR
// exit ;
68344: POP
68345: POP
68346: GO 68887
// end ; x := list [ i ] [ 3 ] ;
68348: LD_ADDR_VAR 0 6
68352: PUSH
68353: LD_VAR 0 3
68357: PUSH
68358: LD_VAR 0 1
68362: ARRAY
68363: PUSH
68364: LD_INT 3
68366: ARRAY
68367: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
68368: LD_ADDR_VAR 0 7
68372: PUSH
68373: LD_VAR 0 3
68377: PUSH
68378: LD_VAR 0 1
68382: ARRAY
68383: PUSH
68384: LD_INT 4
68386: ARRAY
68387: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
68388: LD_ADDR_VAR 0 9
68392: PUSH
68393: LD_VAR 0 6
68397: PPUSH
68398: LD_VAR 0 7
68402: PPUSH
68403: LD_INT 16
68405: PPUSH
68406: CALL 43484 0 3
68410: ST_TO_ADDR
// if not cratesNearbyPoint then
68411: LD_VAR 0 9
68415: NOT
68416: IFFALSE 68422
// exit ;
68418: POP
68419: POP
68420: GO 68887
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
68422: LD_ADDR_VAR 0 4
68426: PUSH
68427: LD_INT 22
68429: PUSH
68430: LD_VAR 0 5
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: PUSH
68439: LD_INT 3
68441: PUSH
68442: LD_INT 60
68444: PUSH
68445: EMPTY
68446: LIST
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: LD_INT 91
68454: PUSH
68455: LD_VAR 0 8
68459: PUSH
68460: LD_INT 6
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 2
68470: PUSH
68471: LD_INT 25
68473: PUSH
68474: LD_INT 2
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: LD_INT 25
68483: PUSH
68484: LD_INT 16
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: LIST
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: PPUSH
68502: CALL_OW 69
68506: PUSH
68507: LD_VAR 0 8
68511: PPUSH
68512: CALL_OW 313
68516: PPUSH
68517: LD_INT 3
68519: PUSH
68520: LD_INT 60
68522: PUSH
68523: EMPTY
68524: LIST
68525: PUSH
68526: EMPTY
68527: LIST
68528: LIST
68529: PUSH
68530: LD_INT 2
68532: PUSH
68533: LD_INT 25
68535: PUSH
68536: LD_INT 2
68538: PUSH
68539: EMPTY
68540: LIST
68541: LIST
68542: PUSH
68543: LD_INT 25
68545: PUSH
68546: LD_INT 16
68548: PUSH
68549: EMPTY
68550: LIST
68551: LIST
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: LIST
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PPUSH
68562: CALL_OW 72
68566: UNION
68567: ST_TO_ADDR
// if tmp then
68568: LD_VAR 0 4
68572: IFFALSE 68652
// begin tmp := ShrinkArray ( tmp , 3 ) ;
68574: LD_ADDR_VAR 0 4
68578: PUSH
68579: LD_VAR 0 4
68583: PPUSH
68584: LD_INT 3
68586: PPUSH
68587: CALL 41291 0 2
68591: ST_TO_ADDR
// for j in tmp do
68592: LD_ADDR_VAR 0 2
68596: PUSH
68597: LD_VAR 0 4
68601: PUSH
68602: FOR_IN
68603: IFFALSE 68646
// begin if IsInUnit ( j ) then
68605: LD_VAR 0 2
68609: PPUSH
68610: CALL_OW 310
68614: IFFALSE 68625
// ComExit ( j ) ;
68616: LD_VAR 0 2
68620: PPUSH
68621: CALL 41374 0 1
// AddComCollect ( j , x , y ) ;
68625: LD_VAR 0 2
68629: PPUSH
68630: LD_VAR 0 6
68634: PPUSH
68635: LD_VAR 0 7
68639: PPUSH
68640: CALL_OW 177
// end ;
68644: GO 68602
68646: POP
68647: POP
// exit ;
68648: POP
68649: POP
68650: GO 68887
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
68652: LD_ADDR_VAR 0 4
68656: PUSH
68657: LD_INT 22
68659: PUSH
68660: LD_VAR 0 5
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: LD_INT 91
68671: PUSH
68672: LD_VAR 0 8
68676: PUSH
68677: LD_INT 8
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: LIST
68684: PUSH
68685: LD_INT 2
68687: PUSH
68688: LD_INT 34
68690: PUSH
68691: LD_INT 12
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: LD_INT 34
68700: PUSH
68701: LD_INT 51
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: LD_INT 34
68710: PUSH
68711: LD_INT 32
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 34
68720: PUSH
68721: LD_INT 89
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: LIST
68739: PPUSH
68740: CALL_OW 69
68744: ST_TO_ADDR
// if tmp then
68745: LD_VAR 0 4
68749: IFFALSE 68883
// begin for j in tmp do
68751: LD_ADDR_VAR 0 2
68755: PUSH
68756: LD_VAR 0 4
68760: PUSH
68761: FOR_IN
68762: IFFALSE 68881
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
68764: LD_VAR 0 2
68768: PPUSH
68769: CALL_OW 262
68773: PUSH
68774: LD_INT 3
68776: EQUAL
68777: IFTRUE 68794
68779: PUSH
68780: LD_VAR 0 2
68784: PPUSH
68785: CALL_OW 261
68789: PUSH
68790: LD_INT 20
68792: GREATER
68793: OR
68794: IFFALSE 68808
68796: PUSH
68797: LD_VAR 0 2
68801: PPUSH
68802: CALL_OW 314
68806: NOT
68807: AND
68808: IFFALSE 68838
68810: PUSH
68811: LD_VAR 0 2
68815: PPUSH
68816: CALL_OW 263
68820: PUSH
68821: LD_INT 1
68823: NONEQUAL
68824: IFTRUE 68837
68826: PUSH
68827: LD_VAR 0 2
68831: PPUSH
68832: CALL_OW 311
68836: OR
68837: AND
68838: IFFALSE 68879
// begin ComCollect ( j , x , y ) ;
68840: LD_VAR 0 2
68844: PPUSH
68845: LD_VAR 0 6
68849: PPUSH
68850: LD_VAR 0 7
68854: PPUSH
68855: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
68859: LD_VAR 0 2
68863: PPUSH
68864: LD_VAR 0 8
68868: PPUSH
68869: CALL_OW 172
// exit ;
68873: POP
68874: POP
68875: POP
68876: POP
68877: GO 68887
// end ;
68879: GO 68761
68881: POP
68882: POP
// end ; end ;
68883: GO 68248
68885: POP
68886: POP
// end ; end_of_file end_of_file
68887: PPOPN 9
68889: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68890: LD_VAR 0 1
68894: PUSH
68895: LD_INT 200
68897: DOUBLE
68898: GREATEREQUAL
68899: IFFALSE 68907
68901: LD_INT 299
68903: DOUBLE
68904: LESSEQUAL
68905: IFTRUE 68909
68907: GO 68941
68909: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68910: LD_VAR 0 1
68914: PPUSH
68915: LD_VAR 0 2
68919: PPUSH
68920: LD_VAR 0 3
68924: PPUSH
68925: LD_VAR 0 4
68929: PPUSH
68930: LD_VAR 0 5
68934: PPUSH
68935: CALL 47080 0 5
68939: GO 69018
68941: LD_INT 300
68943: DOUBLE
68944: GREATEREQUAL
68945: IFFALSE 68953
68947: LD_INT 399
68949: DOUBLE
68950: LESSEQUAL
68951: IFTRUE 68955
68953: GO 69017
68955: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68956: LD_VAR 0 1
68960: PPUSH
68961: LD_VAR 0 2
68965: PPUSH
68966: LD_VAR 0 3
68970: PPUSH
68971: LD_VAR 0 4
68975: PPUSH
68976: LD_VAR 0 5
68980: PPUSH
68981: LD_VAR 0 6
68985: PPUSH
68986: LD_VAR 0 7
68990: PPUSH
68991: LD_VAR 0 8
68995: PPUSH
68996: LD_VAR 0 9
69000: PPUSH
69001: LD_VAR 0 10
69005: PPUSH
69006: LD_VAR 0 11
69010: PPUSH
69011: CALL 65443 0 11
69015: GO 69018
69017: POP
// end ;
69018: PPOPN 11
69020: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69021: LD_VAR 0 1
69025: PPUSH
69026: LD_VAR 0 2
69030: PPUSH
69031: LD_VAR 0 3
69035: PPUSH
69036: LD_VAR 0 4
69040: PPUSH
69041: LD_VAR 0 5
69045: PPUSH
69046: CALL 46380 0 5
// end ; end_of_file
69050: PPOPN 5
69052: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69053: LD_VAR 0 1
69057: PPUSH
69058: LD_VAR 0 2
69062: PPUSH
69063: LD_VAR 0 3
69067: PPUSH
69068: LD_VAR 0 4
69072: PPUSH
69073: LD_VAR 0 5
69077: PPUSH
69078: LD_VAR 0 6
69082: PPUSH
69083: CALL 52983 0 6
// end ;
69087: PPOPN 6
69089: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
69090: LD_INT 0
69092: PPUSH
// begin if not units then
69093: LD_VAR 0 1
69097: NOT
69098: IFFALSE 69102
// exit ;
69100: GO 69136
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
69102: LD_VAR 0 1
69106: PPUSH
69107: LD_VAR 0 2
69111: PPUSH
69112: LD_VAR 0 3
69116: PPUSH
69117: LD_VAR 0 4
69121: PPUSH
69122: LD_VAR 0 5
69126: PPUSH
69127: LD_VAR 0 6
69131: PPUSH
69132: CALL 52777 0 6
// end ;
69136: PPOPN 7
69138: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69139: CALL 52863 0 0
// end ;
69143: PPOPN 1
69145: END
