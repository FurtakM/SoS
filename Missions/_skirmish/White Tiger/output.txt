// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 2776 0 0
// Init ;
   8: CALL 67 0 0
// if debug then
  12: LD_EXP 1
  16: IFFALSE 28
// Difficulty := 2 else
  18: LD_ADDR_OWVAR 67
  22: PUSH
  23: LD_INT 2
  25: ST_TO_ADDR
  26: GO 41
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  28: LD_ADDR_OWVAR 67
  32: PUSH
  33: LD_INT 0
  35: PPUSH
  36: CALL_OW 426
  40: ST_TO_ADDR
// PrepareAlliance ;
  41: CALL 83 0 0
// PrepareRussian ;
  45: CALL 452 0 0
// Action ;
  49: CALL 2372 0 0
// if debug then
  53: LD_EXP 1
  57: IFFALSE 66
// FogOff ( 7 ) ;
  59: LD_INT 7
  61: PPUSH
  62: CALL_OW 344
// end ;
  66: END
// export debug ; export function Init ; begin
  67: LD_INT 0
  69: PPUSH
// debug := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// end ; end_of_file
  78: LD_VAR 0 1
  82: RET
// export allianceHack , allianceMechanic ; export function PrepareAlliance ; var i , tmp ; begin
  83: LD_INT 0
  85: PPUSH
  86: PPUSH
  87: PPUSH
// tmp := [ ] ;
  88: LD_ADDR_VAR 0 3
  92: PUSH
  93: EMPTY
  94: ST_TO_ADDR
// uc_side := 7 ;
  95: LD_ADDR_OWVAR 20
  99: PUSH
 100: LD_INT 7
 102: ST_TO_ADDR
// uc_nation := 1 ;
 103: LD_ADDR_OWVAR 21
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_hack , 100 ) ;
 111: LD_INT 5
 113: PPUSH
 114: LD_INT 3
 116: PPUSH
 117: LD_INT 3
 119: PPUSH
 120: LD_EXP 11
 124: PPUSH
 125: LD_INT 100
 127: PPUSH
 128: CALL 7953 0 5
// allianceHack := CreateVehicle ;
 132: LD_ADDR_EXP 2
 136: PUSH
 137: CALL_OW 45
 141: ST_TO_ADDR
// PlaceUnitArea ( allianceHack , startSpawnArea , false ) ;
 142: LD_EXP 2
 146: PPUSH
 147: LD_INT 7
 149: PPUSH
 150: LD_INT 0
 152: PPUSH
 153: CALL_OW 49
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_double_laser , 100 ) ;
 157: LD_INT 5
 159: PPUSH
 160: LD_INT 3
 162: PPUSH
 163: LD_INT 3
 165: PPUSH
 166: LD_INT 10
 168: PPUSH
 169: LD_INT 100
 171: PPUSH
 172: CALL 7953 0 5
// for i := 1 to 2 do
 176: LD_ADDR_VAR 0 2
 180: PUSH
 181: DOUBLE
 182: LD_INT 1
 184: DEC
 185: ST_TO_ADDR
 186: LD_INT 2
 188: PUSH
 189: FOR_TO
 190: IFFALSE 209
// PlaceUnitArea ( CreateVehicle , startSpawnArea , false ) ;
 192: CALL_OW 45
 196: PPUSH
 197: LD_INT 7
 199: PPUSH
 200: LD_INT 0
 202: PPUSH
 203: CALL_OW 49
 207: GO 189
 209: POP
 210: POP
// uc_side := 4 ;
 211: LD_ADDR_OWVAR 20
 215: PUSH
 216: LD_INT 4
 218: ST_TO_ADDR
// uc_nation := 1 ;
 219: LD_ADDR_OWVAR 21
 223: PUSH
 224: LD_INT 1
 226: ST_TO_ADDR
// PrepareMechanic ( sex_male , 9 ) ;
 227: LD_INT 1
 229: PPUSH
 230: LD_INT 9
 232: PPUSH
 233: CALL_OW 383
// allianceMechanic := CreateHuman ;
 237: LD_ADDR_EXP 3
 241: PUSH
 242: CALL_OW 44
 246: ST_TO_ADDR
// PlaceHumanInUnit ( allianceMechanic , ruDep2 ) ;
 247: LD_EXP 3
 251: PPUSH
 252: LD_INT 96
 254: PPUSH
 255: CALL_OW 52
// end ;
 259: LD_VAR 0 1
 263: RET
// export function PrepareReinforcements ( ) ; var i , un ; begin
 264: LD_INT 0
 266: PPUSH
 267: PPUSH
 268: PPUSH
// uc_side := 7 ;
 269: LD_ADDR_OWVAR 20
 273: PUSH
 274: LD_INT 7
 276: ST_TO_ADDR
// uc_nation := 1 ;
 277: LD_ADDR_OWVAR 21
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 285: LD_ADDR_VAR 0 2
 289: PUSH
 290: DOUBLE
 291: LD_INT 1
 293: DEC
 294: ST_TO_ADDR
 295: LD_INT 3
 297: PUSH
 298: LD_INT 2
 300: PUSH
 301: LD_INT 2
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: LIST
 308: PUSH
 309: LD_OWVAR 67
 313: ARRAY
 314: PUSH
 315: FOR_TO
 316: IFFALSE 386
// begin PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_rocket_launcher , 100 ) ;
 318: LD_INT 5
 320: PPUSH
 321: LD_INT 3
 323: PPUSH
 324: LD_INT 3
 326: PPUSH
 327: LD_INT 7
 329: PPUSH
 330: LD_INT 100
 332: PPUSH
 333: CALL 7953 0 5
// un := CreateVehicle ;
 337: LD_ADDR_VAR 0 3
 341: PUSH
 342: CALL_OW 45
 346: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 347: LD_VAR 0 3
 351: PPUSH
 352: LD_INT 7
 354: PPUSH
 355: LD_INT 0
 357: PPUSH
 358: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 362: LD_VAR 0 3
 366: PPUSH
 367: LD_INT 67
 369: PPUSH
 370: LD_INT 95
 372: PPUSH
 373: CALL_OW 111
// wait ( 0 0$2 ) ;
 377: LD_INT 70
 379: PPUSH
 380: CALL_OW 67
// end ;
 384: GO 315
 386: POP
 387: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_radar , 100 ) ;
 388: LD_INT 5
 390: PPUSH
 391: LD_INT 3
 393: PPUSH
 394: LD_INT 3
 396: PPUSH
 397: LD_INT 11
 399: PPUSH
 400: LD_INT 100
 402: PPUSH
 403: CALL 7953 0 5
// un := CreateVehicle ;
 407: LD_ADDR_VAR 0 3
 411: PUSH
 412: CALL_OW 45
 416: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 417: LD_VAR 0 3
 421: PPUSH
 422: LD_INT 7
 424: PPUSH
 425: LD_INT 0
 427: PPUSH
 428: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 432: LD_VAR 0 3
 436: PPUSH
 437: LD_INT 67
 439: PPUSH
 440: LD_INT 95
 442: PPUSH
 443: CALL_OW 111
// end ; end_of_file
 447: LD_VAR 0 1
 451: RET
// export ruGuard1 , ruGuard2 , ruGuard3 , ruForces , ruEng ; export function PrepareRussian ; var i , un ; begin
 452: LD_INT 0
 454: PPUSH
 455: PPUSH
 456: PPUSH
// uc_side := 3 ;
 457: LD_ADDR_OWVAR 20
 461: PUSH
 462: LD_INT 3
 464: ST_TO_ADDR
// uc_nation := 3 ;
 465: LD_ADDR_OWVAR 21
 469: PUSH
 470: LD_INT 3
 472: ST_TO_ADDR
// SetResourceType ( GetBase ( ruDep ) , mat_cans , 50000 ) ;
 473: LD_INT 14
 475: PPUSH
 476: CALL_OW 274
 480: PPUSH
 481: LD_INT 1
 483: PPUSH
 484: LD_INT 50000
 486: PPUSH
 487: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , mat_siberit , 5000 ) ;
 491: LD_INT 14
 493: PPUSH
 494: CALL_OW 274
 498: PPUSH
 499: LD_INT 3
 501: PPUSH
 502: LD_INT 5000
 504: PPUSH
 505: CALL_OW 277
// TeleportExit ( ruTeleport , 132 , 89 ) ;
 509: LD_INT 45
 511: PPUSH
 512: LD_INT 132
 514: PPUSH
 515: LD_INT 89
 517: PPUSH
 518: CALL_OW 243
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
 522: LD_ADDR_VAR 0 2
 526: PUSH
 527: LD_INT 21
 529: PUSH
 530: LD_INT 3
 532: PUSH
 533: EMPTY
 534: LIST
 535: LIST
 536: PPUSH
 537: CALL_OW 69
 541: PUSH
 542: FOR_IN
 543: IFFALSE 576
// SetBLevel ( i , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
 545: LD_VAR 0 2
 549: PPUSH
 550: LD_INT 6
 552: PUSH
 553: LD_INT 8
 555: PUSH
 556: LD_INT 10
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: LIST
 563: PUSH
 564: LD_OWVAR 67
 568: ARRAY
 569: PPUSH
 570: CALL_OW 241
 574: GO 542
 576: POP
 577: POP
// for i := 1 to 4 do
 578: LD_ADDR_VAR 0 2
 582: PUSH
 583: DOUBLE
 584: LD_INT 1
 586: DEC
 587: ST_TO_ADDR
 588: LD_INT 4
 590: PUSH
 591: FOR_TO
 592: IFFALSE 618
// begin PrepareMechanic ( false , 9 ) ;
 594: LD_INT 0
 596: PPUSH
 597: LD_INT 9
 599: PPUSH
 600: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFac ) ;
 604: CALL_OW 44
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: CALL_OW 52
// end ;
 616: GO 591
 618: POP
 619: POP
// ruGuard1 := [ ] ;
 620: LD_ADDR_EXP 4
 624: PUSH
 625: EMPTY
 626: ST_TO_ADDR
// ruGuard2 := [ ] ;
 627: LD_ADDR_EXP 5
 631: PUSH
 632: EMPTY
 633: ST_TO_ADDR
// ruGuard3 := [ ] ;
 634: LD_ADDR_EXP 6
 638: PUSH
 639: EMPTY
 640: ST_TO_ADDR
// ruForces := [ ] ;
 641: LD_ADDR_EXP 7
 645: PUSH
 646: EMPTY
 647: ST_TO_ADDR
// ruEng := [ ] ;
 648: LD_ADDR_EXP 8
 652: PUSH
 653: EMPTY
 654: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: DOUBLE
 661: LD_INT 1
 663: DEC
 664: ST_TO_ADDR
 665: LD_INT 4
 667: PUSH
 668: LD_INT 5
 670: PUSH
 671: LD_INT 6
 673: PUSH
 674: EMPTY
 675: LIST
 676: LIST
 677: LIST
 678: PUSH
 679: LD_OWVAR 67
 683: ARRAY
 684: PUSH
 685: FOR_TO
 686: IFFALSE 742
// begin PrepareEngineer ( false , 8 ) ;
 688: LD_INT 0
 690: PPUSH
 691: LD_INT 8
 693: PPUSH
 694: CALL_OW 382
// un := CreateHuman ;
 698: LD_ADDR_VAR 0 3
 702: PUSH
 703: CALL_OW 44
 707: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruDep ) ;
 708: LD_VAR 0 3
 712: PPUSH
 713: LD_INT 14
 715: PPUSH
 716: CALL_OW 52
// ruEng := Join ( ruEng , un ) ;
 720: LD_ADDR_EXP 8
 724: PUSH
 725: LD_EXP 8
 729: PPUSH
 730: LD_VAR 0 3
 734: PPUSH
 735: CALL 40337 0 2
 739: ST_TO_ADDR
// end ;
 740: GO 685
 742: POP
 743: POP
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
 744: LD_ADDR_VAR 0 2
 748: PUSH
 749: DOUBLE
 750: LD_INT 1
 752: DEC
 753: ST_TO_ADDR
 754: LD_INT 5
 756: PUSH
 757: LD_INT 6
 759: PUSH
 760: LD_INT 7
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: LIST
 767: PUSH
 768: LD_OWVAR 67
 772: ARRAY
 773: PUSH
 774: FOR_TO
 775: IFFALSE 885
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 777: LD_INT 24
 779: PPUSH
 780: LD_INT 3
 782: PPUSH
 783: LD_INT 3
 785: PPUSH
 786: LD_INT 46
 788: PUSH
 789: LD_INT 45
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: PUSH
 796: LD_VAR 0 2
 800: PUSH
 801: LD_INT 2
 803: MOD
 804: PUSH
 805: LD_INT 1
 807: PLUS
 808: ARRAY
 809: PPUSH
 810: LD_INT 100
 812: PPUSH
 813: CALL 7953 0 5
// un := CreateVehicle ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: CALL_OW 45
 826: ST_TO_ADDR
// SetDir ( un , 3 ) ;
 827: LD_VAR 0 3
 831: PPUSH
 832: LD_INT 3
 834: PPUSH
 835: CALL_OW 233
// PlaceUnitArea ( un , riverGuard1 , false ) ;
 839: LD_VAR 0 3
 843: PPUSH
 844: LD_INT 4
 846: PPUSH
 847: LD_INT 0
 849: PPUSH
 850: CALL_OW 49
// ruGuard1 := Replace ( ruGuard1 , ruGuard1 + 1 , un ) ;
 854: LD_ADDR_EXP 4
 858: PUSH
 859: LD_EXP 4
 863: PPUSH
 864: LD_EXP 4
 868: PUSH
 869: LD_INT 1
 871: PLUS
 872: PPUSH
 873: LD_VAR 0 3
 877: PPUSH
 878: CALL_OW 1
 882: ST_TO_ADDR
// end ;
 883: GO 774
 885: POP
 886: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
 887: LD_ADDR_VAR 0 2
 891: PUSH
 892: DOUBLE
 893: LD_INT 1
 895: DEC
 896: ST_TO_ADDR
 897: LD_INT 4
 899: PUSH
 900: LD_INT 4
 902: PUSH
 903: LD_INT 5
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: LD_OWVAR 67
 915: ARRAY
 916: PUSH
 917: FOR_TO
 918: IFFALSE 1028
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 920: LD_INT 24
 922: PPUSH
 923: LD_INT 3
 925: PPUSH
 926: LD_INT 3
 928: PPUSH
 929: LD_INT 46
 931: PUSH
 932: LD_INT 45
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_VAR 0 2
 943: PUSH
 944: LD_INT 2
 946: MOD
 947: PUSH
 948: LD_INT 1
 950: PLUS
 951: ARRAY
 952: PPUSH
 953: LD_INT 100
 955: PPUSH
 956: CALL 7953 0 5
// un := CreateVehicle ;
 960: LD_ADDR_VAR 0 3
 964: PUSH
 965: CALL_OW 45
 969: ST_TO_ADDR
// SetDir ( un , 4 ) ;
 970: LD_VAR 0 3
 974: PPUSH
 975: LD_INT 4
 977: PPUSH
 978: CALL_OW 233
// PlaceUnitArea ( un , riverGuard2 , false ) ;
 982: LD_VAR 0 3
 986: PPUSH
 987: LD_INT 5
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 49
// ruGuard2 := Replace ( ruGuard2 , ruGuard2 + 1 , un ) ;
 997: LD_ADDR_EXP 5
1001: PUSH
1002: LD_EXP 5
1006: PPUSH
1007: LD_EXP 5
1011: PUSH
1012: LD_INT 1
1014: PLUS
1015: PPUSH
1016: LD_VAR 0 3
1020: PPUSH
1021: CALL_OW 1
1025: ST_TO_ADDR
// end ;
1026: GO 917
1028: POP
1029: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
1030: LD_ADDR_VAR 0 2
1034: PUSH
1035: DOUBLE
1036: LD_INT 1
1038: DEC
1039: ST_TO_ADDR
1040: LD_INT 4
1042: PUSH
1043: LD_INT 4
1045: PUSH
1046: LD_INT 5
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: PUSH
1054: LD_OWVAR 67
1058: ARRAY
1059: PUSH
1060: FOR_TO
1061: IFFALSE 1171
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
1063: LD_INT 24
1065: PPUSH
1066: LD_INT 3
1068: PPUSH
1069: LD_INT 3
1071: PPUSH
1072: LD_INT 46
1074: PUSH
1075: LD_INT 45
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PUSH
1082: LD_VAR 0 2
1086: PUSH
1087: LD_INT 2
1089: MOD
1090: PUSH
1091: LD_INT 1
1093: PLUS
1094: ARRAY
1095: PPUSH
1096: LD_INT 100
1098: PPUSH
1099: CALL 7953 0 5
// un := CreateVehicle ;
1103: LD_ADDR_VAR 0 3
1107: PUSH
1108: CALL_OW 45
1112: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1113: LD_VAR 0 3
1117: PPUSH
1118: LD_INT 1
1120: PPUSH
1121: CALL_OW 233
// PlaceUnitArea ( un , riverGuard3 , false ) ;
1125: LD_VAR 0 3
1129: PPUSH
1130: LD_INT 6
1132: PPUSH
1133: LD_INT 0
1135: PPUSH
1136: CALL_OW 49
// ruGuard3 := Replace ( ruGuard3 , ruGuard3 + 1 , un ) ;
1140: LD_ADDR_EXP 6
1144: PUSH
1145: LD_EXP 6
1149: PPUSH
1150: LD_EXP 6
1154: PUSH
1155: LD_INT 1
1157: PLUS
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: CALL_OW 1
1168: ST_TO_ADDR
// end ;
1169: GO 1060
1171: POP
1172: POP
// for i := 1 to 2 do
1173: LD_ADDR_VAR 0 2
1177: PUSH
1178: DOUBLE
1179: LD_INT 1
1181: DEC
1182: ST_TO_ADDR
1183: LD_INT 2
1185: PUSH
1186: FOR_TO
1187: IFFALSE 1235
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
1189: LD_INT 22
1191: PPUSH
1192: LD_INT 3
1194: PPUSH
1195: LD_INT 3
1197: PPUSH
1198: LD_INT 52
1200: PPUSH
1201: LD_INT 100
1203: PPUSH
1204: CALL 7953 0 5
// un := CreateVehicle ;
1208: LD_ADDR_VAR 0 3
1212: PUSH
1213: CALL_OW 45
1217: ST_TO_ADDR
// PlaceUnitArea ( un , ruCraneArea , false ) ;
1218: LD_VAR 0 3
1222: PPUSH
1223: LD_INT 9
1225: PPUSH
1226: LD_INT 0
1228: PPUSH
1229: CALL_OW 49
// end ;
1233: GO 1186
1235: POP
1236: POP
// for i := 1 to 3 do
1237: LD_ADDR_VAR 0 2
1241: PUSH
1242: DOUBLE
1243: LD_INT 1
1245: DEC
1246: ST_TO_ADDR
1247: LD_INT 3
1249: PUSH
1250: FOR_TO
1251: IFFALSE 1288
// begin PrepareHuman ( false , class_bazooker , 8 ) ;
1253: LD_INT 0
1255: PPUSH
1256: LD_INT 9
1258: PPUSH
1259: LD_INT 8
1261: PPUSH
1262: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 91 , 83 ) ) ;
1266: CALL_OW 44
1270: PPUSH
1271: LD_INT 91
1273: PPUSH
1274: LD_INT 83
1276: PPUSH
1277: CALL_OW 428
1281: PPUSH
1282: CALL_OW 52
// end ;
1286: GO 1250
1288: POP
1289: POP
// end ;
1290: LD_VAR 0 1
1294: RET
// every 0 0$1 trigger ruEng do var i , tmp ;
1295: LD_EXP 8
1299: IFFALSE 1493
1301: GO 1303
1303: DISABLE
1304: LD_INT 0
1306: PPUSH
1307: PPUSH
// begin enable ;
1308: ENABLE
// tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1309: LD_ADDR_VAR 0 2
1313: PUSH
1314: LD_INT 10
1316: PPUSH
1317: LD_INT 21
1319: PUSH
1320: LD_INT 3
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PUSH
1327: LD_INT 3
1329: PUSH
1330: LD_INT 24
1332: PUSH
1333: LD_INT 1000
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PPUSH
1348: CALL_OW 70
1352: ST_TO_ADDR
// if not tmp and UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) then
1353: LD_VAR 0 2
1357: NOT
1358: PUSH
1359: LD_EXP 8
1363: PPUSH
1364: LD_INT 3
1366: PUSH
1367: LD_INT 54
1369: PUSH
1370: EMPTY
1371: LIST
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 72
1381: AND
1382: IFFALSE 1414
// ComEnterUnit ( UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) , ruDep ) ;
1384: LD_EXP 8
1388: PPUSH
1389: LD_INT 3
1391: PUSH
1392: LD_INT 54
1394: PUSH
1395: EMPTY
1396: LIST
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PPUSH
1402: CALL_OW 72
1406: PPUSH
1407: LD_INT 14
1409: PPUSH
1410: CALL_OW 120
// if tmp then
1414: LD_VAR 0 2
1418: IFFALSE 1493
// begin for i in ruEng do
1420: LD_ADDR_VAR 0 1
1424: PUSH
1425: LD_EXP 8
1429: PUSH
1430: FOR_IN
1431: IFFALSE 1491
// if IsInUnit ( i ) then
1433: LD_VAR 0 1
1437: PPUSH
1438: CALL_OW 310
1442: IFFALSE 1455
// ComExitBuilding ( i ) else
1444: LD_VAR 0 1
1448: PPUSH
1449: CALL_OW 122
1453: GO 1489
// ComRepairBuilding ( i , SortByDistanceUnit ( i , tmp , true , true ) [ 1 ] ) ;
1455: LD_VAR 0 1
1459: PPUSH
1460: LD_VAR 0 1
1464: PPUSH
1465: LD_VAR 0 2
1469: PPUSH
1470: LD_INT 1
1472: PPUSH
1473: LD_INT 1
1475: PPUSH
1476: CALL 8510 0 4
1480: PUSH
1481: LD_INT 1
1483: ARRAY
1484: PPUSH
1485: CALL_OW 130
1489: GO 1430
1491: POP
1492: POP
// end ; end ;
1493: PPOPN 2
1495: END
// every 4 4$00 trigger not ruForces do var i , tmp ;
1496: LD_EXP 7
1500: NOT
1501: IFFALSE 1567
1503: GO 1505
1505: DISABLE
1506: LD_INT 0
1508: PPUSH
1509: PPUSH
// begin enable ;
1510: ENABLE
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
1511: LD_ADDR_VAR 0 1
1515: PUSH
1516: DOUBLE
1517: LD_INT 1
1519: DEC
1520: ST_TO_ADDR
1521: LD_INT 4
1523: PUSH
1524: LD_INT 5
1526: PUSH
1527: LD_INT 6
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: PUSH
1535: LD_OWVAR 67
1539: ARRAY
1540: PUSH
1541: FOR_TO
1542: IFFALSE 1565
// AddComConstruct ( ruFac , ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ) ;
1544: LD_INT 50
1546: PPUSH
1547: LD_INT 24
1549: PPUSH
1550: LD_INT 3
1552: PPUSH
1553: LD_INT 3
1555: PPUSH
1556: LD_INT 46
1558: PPUSH
1559: CALL_OW 185
1563: GO 1541
1565: POP
1566: POP
// end ;
1567: PPOPN 2
1569: END
// every 0 0$30 trigger ruForces >= [ 4 , 5 , 6 ] [ Difficulty ] do var i , tmp ;
1570: LD_EXP 7
1574: PUSH
1575: LD_INT 4
1577: PUSH
1578: LD_INT 5
1580: PUSH
1581: LD_INT 6
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: PUSH
1589: LD_OWVAR 67
1593: ARRAY
1594: GREATEREQUAL
1595: IFFALSE 1748
1597: GO 1599
1599: DISABLE
1600: LD_INT 0
1602: PPUSH
1603: PPUSH
// begin enable ;
1604: ENABLE
// tmp := ruForces ;
1605: LD_ADDR_VAR 0 2
1609: PUSH
1610: LD_EXP 7
1614: ST_TO_ADDR
// if rand ( 0 , 1 ) then
1615: LD_INT 0
1617: PPUSH
1618: LD_INT 1
1620: PPUSH
1621: CALL_OW 12
1625: IFFALSE 1646
// begin ComEnterUnit ( tmp , ruTeleport ) ;
1627: LD_VAR 0 2
1631: PPUSH
1632: LD_INT 45
1634: PPUSH
1635: CALL_OW 120
// wait ( 0 0$20 ) ;
1639: LD_INT 700
1641: PPUSH
1642: CALL_OW 67
// end ; ruForces := [ ] ;
1646: LD_ADDR_EXP 7
1650: PUSH
1651: EMPTY
1652: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1653: LD_INT 35
1655: PPUSH
1656: CALL_OW 67
// for i in tmp do
1660: LD_ADDR_VAR 0 1
1664: PUSH
1665: LD_VAR 0 2
1669: PUSH
1670: FOR_IN
1671: IFFALSE 1739
// if not IsOk ( i ) then
1673: LD_VAR 0 1
1677: PPUSH
1678: CALL_OW 302
1682: NOT
1683: IFFALSE 1703
// tmp := tmp diff i else
1685: LD_ADDR_VAR 0 2
1689: PUSH
1690: LD_VAR 0 2
1694: PUSH
1695: LD_VAR 0 1
1699: DIFF
1700: ST_TO_ADDR
1701: GO 1737
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
1703: LD_VAR 0 1
1707: PPUSH
1708: LD_INT 81
1710: PUSH
1711: LD_INT 3
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PPUSH
1718: CALL_OW 69
1722: PPUSH
1723: LD_VAR 0 1
1727: PPUSH
1728: CALL_OW 74
1732: PPUSH
1733: CALL_OW 115
1737: GO 1670
1739: POP
1740: POP
// until not tmp ;
1741: LD_VAR 0 2
1745: NOT
1746: IFFALSE 1653
// end ;
1748: PPOPN 2
1750: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 62 , 83 , 8 ] ] ) do
1751: LD_INT 22
1753: PUSH
1754: LD_INT 7
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: LD_INT 92
1763: PUSH
1764: LD_INT 62
1766: PUSH
1767: LD_INT 83
1769: PUSH
1770: LD_INT 8
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: PPUSH
1783: CALL_OW 69
1787: IFFALSE 1807
1789: GO 1791
1791: DISABLE
// ComAgressiveMove ( ruGuard1 , 69 , 100 ) ;
1792: LD_EXP 4
1796: PPUSH
1797: LD_INT 69
1799: PPUSH
1800: LD_INT 100
1802: PPUSH
1803: CALL_OW 114
1807: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 85 , 89 , 8 ] ] ) do
1808: LD_INT 22
1810: PUSH
1811: LD_INT 7
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PUSH
1818: LD_INT 92
1820: PUSH
1821: LD_INT 85
1823: PUSH
1824: LD_INT 89
1826: PUSH
1827: LD_INT 8
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PPUSH
1840: CALL_OW 69
1844: IFFALSE 1864
1846: GO 1848
1848: DISABLE
// ComAgressiveMove ( ruGuard2 , 72 , 88 ) ;
1849: LD_EXP 5
1853: PPUSH
1854: LD_INT 72
1856: PPUSH
1857: LD_INT 88
1859: PPUSH
1860: CALL_OW 114
1864: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 89 , 13 , 8 ] ] ) do
1865: LD_INT 22
1867: PUSH
1868: LD_INT 7
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: LD_INT 92
1877: PUSH
1878: LD_INT 89
1880: PUSH
1881: LD_INT 13
1883: PUSH
1884: LD_INT 8
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PPUSH
1897: CALL_OW 69
1901: IFFALSE 1921
1903: GO 1905
1905: DISABLE
// ComAgressiveMove ( ruGuard3 , 107 , 26 ) ; end_of_file
1906: LD_EXP 6
1910: PPUSH
1911: LD_INT 107
1913: PPUSH
1914: LD_INT 26
1916: PPUSH
1917: CALL_OW 114
1921: END
// every 6 6$00 do var i , un , tmp ;
1922: GO 1924
1924: DISABLE
1925: LD_INT 0
1927: PPUSH
1928: PPUSH
1929: PPUSH
// begin enable ;
1930: ENABLE
// tmp := [ ] ;
1931: LD_ADDR_VAR 0 3
1935: PUSH
1936: EMPTY
1937: ST_TO_ADDR
// for i := 1 to 8 do
1938: LD_ADDR_VAR 0 1
1942: PUSH
1943: DOUBLE
1944: LD_INT 1
1946: DEC
1947: ST_TO_ADDR
1948: LD_INT 8
1950: PUSH
1951: FOR_TO
1952: IFFALSE 2095
// begin uc_side := 1 ;
1954: LD_ADDR_OWVAR 20
1958: PUSH
1959: LD_INT 1
1961: ST_TO_ADDR
// uc_nation := 1 ;
1962: LD_ADDR_OWVAR 21
1966: PUSH
1967: LD_INT 1
1969: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_laser , us_rocket_launcher ] [ i mod 3 + 1 ] , 100 ) ;
1970: LD_INT 5
1972: PPUSH
1973: LD_INT 3
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: LD_INT 6
1981: PUSH
1982: LD_INT 9
1984: PUSH
1985: LD_INT 7
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_VAR 0 1
1997: PUSH
1998: LD_INT 3
2000: MOD
2001: PUSH
2002: LD_INT 1
2004: PLUS
2005: ARRAY
2006: PPUSH
2007: LD_INT 100
2009: PPUSH
2010: CALL 7953 0 5
// un := CreateVehicle ;
2014: LD_ADDR_VAR 0 2
2018: PUSH
2019: CALL_OW 45
2023: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
2024: LD_ADDR_VAR 0 3
2028: PUSH
2029: LD_VAR 0 3
2033: PPUSH
2034: LD_VAR 0 2
2038: PPUSH
2039: CALL 40337 0 2
2043: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_INT 1
2051: PPUSH
2052: CALL_OW 233
// PlaceUnitArea ( un , americanSpawnArea , false ) ;
2056: LD_VAR 0 2
2060: PPUSH
2061: LD_INT 11
2063: PPUSH
2064: LD_INT 0
2066: PPUSH
2067: CALL_OW 49
// ComMoveXY ( un , 16 , 13 ) ;
2071: LD_VAR 0 2
2075: PPUSH
2076: LD_INT 16
2078: PPUSH
2079: LD_INT 13
2081: PPUSH
2082: CALL_OW 111
// wait ( 0 0$1 ) ;
2086: LD_INT 35
2088: PPUSH
2089: CALL_OW 67
// end ;
2093: GO 1951
2095: POP
2096: POP
// repeat wait ( 0 0$1 ) ;
2097: LD_INT 35
2099: PPUSH
2100: CALL_OW 67
// for i in tmp do
2104: LD_ADDR_VAR 0 1
2108: PUSH
2109: LD_VAR 0 3
2113: PUSH
2114: FOR_IN
2115: IFFALSE 2183
// if not IsOk ( i ) then
2117: LD_VAR 0 1
2121: PPUSH
2122: CALL_OW 302
2126: NOT
2127: IFFALSE 2147
// tmp := tmp diff i else
2129: LD_ADDR_VAR 0 3
2133: PUSH
2134: LD_VAR 0 3
2138: PUSH
2139: LD_VAR 0 1
2143: DIFF
2144: ST_TO_ADDR
2145: GO 2181
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
2147: LD_VAR 0 1
2151: PPUSH
2152: LD_INT 81
2154: PUSH
2155: LD_INT 1
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: PPUSH
2162: CALL_OW 69
2166: PPUSH
2167: LD_VAR 0 1
2171: PPUSH
2172: CALL_OW 74
2176: PPUSH
2177: CALL_OW 115
2181: GO 2114
2183: POP
2184: POP
// until not tmp ;
2185: LD_VAR 0 3
2189: NOT
2190: IFFALSE 2097
// end ;
2192: PPOPN 3
2194: END
// every 7 7$00 trigger not HexInfo ( 149 , 106 ) do var un ;
2195: LD_INT 149
2197: PPUSH
2198: LD_INT 106
2200: PPUSH
2201: CALL_OW 428
2205: NOT
2206: IFFALSE 2369
2208: GO 2210
2210: DISABLE
2211: LD_INT 0
2213: PPUSH
// begin enable ;
2214: ENABLE
// uc_side := 1 ;
2215: LD_ADDR_OWVAR 20
2219: PUSH
2220: LD_INT 1
2222: ST_TO_ADDR
// uc_nation := 1 ;
2223: LD_ADDR_OWVAR 21
2227: PUSH
2228: LD_INT 1
2230: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2231: LD_INT 5
2233: PPUSH
2234: LD_INT 3
2236: PPUSH
2237: LD_INT 3
2239: PPUSH
2240: LD_INT 12
2242: PPUSH
2243: LD_INT 100
2245: PPUSH
2246: CALL 7953 0 5
// un := CreateVehicle ;
2250: LD_ADDR_VAR 0 1
2254: PUSH
2255: CALL_OW 45
2259: ST_TO_ADDR
// PlaceUnitXY ( un , 149 , 106 , false ) ;
2260: LD_VAR 0 1
2264: PPUSH
2265: LD_INT 149
2267: PPUSH
2268: LD_INT 106
2270: PPUSH
2271: LD_INT 0
2273: PPUSH
2274: CALL_OW 48
// SetCargo ( un , mat_siberit , 100 ) ;
2278: LD_VAR 0 1
2282: PPUSH
2283: LD_INT 3
2285: PPUSH
2286: LD_INT 100
2288: PPUSH
2289: CALL_OW 290
// ComMoveXY ( un , 105 , 2 ) ;
2293: LD_VAR 0 1
2297: PPUSH
2298: LD_INT 105
2300: PPUSH
2301: LD_INT 2
2303: PPUSH
2304: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2308: LD_INT 35
2310: PPUSH
2311: CALL_OW 67
// if IsDead ( un ) or GetSide ( un ) <> 1 then
2315: LD_VAR 0 1
2319: PPUSH
2320: CALL_OW 301
2324: PUSH
2325: LD_VAR 0 1
2329: PPUSH
2330: CALL_OW 255
2334: PUSH
2335: LD_INT 1
2337: NONEQUAL
2338: OR
2339: IFFALSE 2343
// exit ;
2341: GO 2369
// until IsAt ( un , 105 , 2 ) ;
2343: LD_VAR 0 1
2347: PPUSH
2348: LD_INT 105
2350: PPUSH
2351: LD_INT 2
2353: PPUSH
2354: CALL_OW 307
2358: IFFALSE 2308
// RemoveUnit ( un ) ;
2360: LD_VAR 0 1
2364: PPUSH
2365: CALL_OW 64
// end ; end_of_file
2369: PPOPN 1
2371: END
// export function Action ; begin
2372: LD_INT 0
2374: PPUSH
// CenterNowOnUnits ( allianceHack ) ;
2375: LD_EXP 2
2379: PPUSH
2380: CALL_OW 87
// ChangeMissionObjectives ( WT-Objectives-1 ) ;
2384: LD_STRING WT-Objectives-1
2386: PPUSH
2387: CALL_OW 337
// end ;
2391: LD_VAR 0 1
2395: RET
// every 0 0$2 trigger See ( 7 , allianceMechanic ) do
2396: LD_INT 7
2398: PPUSH
2399: LD_EXP 3
2403: PPUSH
2404: CALL_OW 292
2408: IFFALSE 2425
2410: GO 2412
2412: DISABLE
// SetSide ( allianceMechanic , 7 ) ;
2413: LD_EXP 3
2417: PPUSH
2418: LD_INT 7
2420: PPUSH
2421: CALL_OW 235
2425: END
// every 2 2$00 do
2426: GO 2428
2428: DISABLE
// PrepareReinforcements ( ) ;
2429: CALL 264 0 0
2433: END
// every 0 0$1 trigger not FindArtifact ( 2 ) do
2434: LD_INT 2
2436: PPUSH
2437: CALL_OW 469
2441: NOT
2442: IFFALSE 2457
2444: GO 2446
2446: DISABLE
// SetAreaMapShow ( endMissionArea , 1 ) ;
2447: LD_INT 8
2449: PPUSH
2450: LD_INT 1
2452: PPUSH
2453: CALL_OW 424
2457: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and not FindArtifact ( 2 ) do
2458: LD_INT 8
2460: PPUSH
2461: LD_INT 2
2463: PUSH
2464: LD_INT 34
2466: PUSH
2467: LD_INT 12
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: PUSH
2474: LD_INT 34
2476: PUSH
2477: LD_INT 51
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: LIST
2488: PPUSH
2489: CALL_OW 70
2493: PUSH
2494: LD_INT 2
2496: PPUSH
2497: CALL_OW 469
2501: NOT
2502: AND
2503: IFFALSE 2633
2505: GO 2507
2507: DISABLE
// begin AddMedal ( WT-med-1 , 1 ) ;
2508: LD_STRING WT-med-1
2510: PPUSH
2511: LD_INT 1
2513: PPUSH
2514: CALL_OW 101
// AddMedal ( WT-med-2 , [ - 1 , 1 ] [ ( IsOk ( allianceMechanic ) * ( GetSide ( allianceMechanic ) ) = 7 ) + 1 ] ) ;
2518: LD_STRING WT-med-2
2520: PPUSH
2521: LD_INT 1
2523: NEG
2524: PUSH
2525: LD_INT 1
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: PUSH
2532: LD_EXP 3
2536: PPUSH
2537: CALL_OW 302
2541: PUSH
2542: LD_EXP 3
2546: PPUSH
2547: CALL_OW 255
2551: MUL
2552: PUSH
2553: LD_INT 7
2555: EQUAL
2556: PUSH
2557: LD_INT 1
2559: PLUS
2560: ARRAY
2561: PPUSH
2562: CALL_OW 101
// AddMedal ( WT-med-3 , [ - 1 , 1 ] [ ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , us_double_laser ] ] ) >= 2 ) + 1 ] ) ;
2566: LD_STRING WT-med-3
2568: PPUSH
2569: LD_INT 1
2571: NEG
2572: PUSH
2573: LD_INT 1
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PUSH
2580: LD_INT 22
2582: PUSH
2583: LD_INT 7
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: PUSH
2590: LD_INT 34
2592: PUSH
2593: LD_INT 10
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PPUSH
2604: CALL_OW 69
2608: PUSH
2609: LD_INT 2
2611: GREATEREQUAL
2612: PUSH
2613: LD_INT 1
2615: PLUS
2616: ARRAY
2617: PPUSH
2618: CALL_OW 101
// GiveMedals ( WT-Main ) ;
2622: LD_STRING WT-Main
2624: PPUSH
2625: CALL_OW 102
// YouWin ;
2629: CALL_OW 103
// end ; end_of_file
2633: END
// on UnitGoesToRed ( un ) do begin if un in ruForces then
2634: LD_VAR 0 1
2638: PUSH
2639: LD_EXP 7
2643: IN
2644: IFFALSE 2662
// ruForces := ruForces diff un ;
2646: LD_ADDR_EXP 7
2650: PUSH
2651: LD_EXP 7
2655: PUSH
2656: LD_VAR 0 1
2660: DIFF
2661: ST_TO_ADDR
// end ;
2662: PPOPN 1
2664: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2665: LD_VAR 0 1
2669: PPUSH
2670: CALL 44152 0 1
// if un = allianceHack then
2674: LD_VAR 0 1
2678: PUSH
2679: LD_EXP 2
2683: EQUAL
2684: IFFALSE 2693
// YouLost ( WT-HackLost ) ;
2686: LD_STRING WT-HackLost
2688: PPUSH
2689: CALL_OW 104
// if un in ruForces then
2693: LD_VAR 0 1
2697: PUSH
2698: LD_EXP 7
2702: IN
2703: IFFALSE 2721
// ruForces := ruForces diff un ;
2705: LD_ADDR_EXP 7
2709: PUSH
2710: LD_EXP 7
2714: PUSH
2715: LD_VAR 0 1
2719: DIFF
2720: ST_TO_ADDR
// end ;
2721: PPOPN 1
2723: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
2724: LD_VAR 0 1
2728: PPUSH
2729: LD_VAR 0 2
2733: PPUSH
2734: CALL 44274 0 2
// if GetSide ( vehicle ) = 3 then
2738: LD_VAR 0 1
2742: PPUSH
2743: CALL_OW 255
2747: PUSH
2748: LD_INT 3
2750: EQUAL
2751: IFFALSE 2773
// ruForces := Join ( ruForces , vehicle ) ;
2753: LD_ADDR_EXP 7
2757: PUSH
2758: LD_EXP 7
2762: PPUSH
2763: LD_VAR 0 1
2767: PPUSH
2768: CALL 40337 0 2
2772: ST_TO_ADDR
// end ; end_of_file
2773: PPOPN 2
2775: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
2776: LD_INT 0
2778: PPUSH
// ar_miner := 81 ;
2779: LD_ADDR_EXP 16
2783: PUSH
2784: LD_INT 81
2786: ST_TO_ADDR
// ar_crane := 88 ;
2787: LD_ADDR_EXP 15
2791: PUSH
2792: LD_INT 88
2794: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
2795: LD_ADDR_EXP 10
2799: PUSH
2800: LD_INT 89
2802: ST_TO_ADDR
// us_hack := 99 ;
2803: LD_ADDR_EXP 11
2807: PUSH
2808: LD_INT 99
2810: ST_TO_ADDR
// us_artillery := 97 ;
2811: LD_ADDR_EXP 12
2815: PUSH
2816: LD_INT 97
2818: ST_TO_ADDR
// ar_bio_bomb := 91 ;
2819: LD_ADDR_EXP 13
2823: PUSH
2824: LD_INT 91
2826: ST_TO_ADDR
// ar_mortar := 92 ;
2827: LD_ADDR_EXP 14
2831: PUSH
2832: LD_INT 92
2834: ST_TO_ADDR
// ru_flamethrower := 93 ;
2835: LD_ADDR_EXP 17
2839: PUSH
2840: LD_INT 93
2842: ST_TO_ADDR
// ru_radar := 98 ;
2843: LD_ADDR_EXP 9
2847: PUSH
2848: LD_INT 98
2850: ST_TO_ADDR
// tech_Artillery := 80 ;
2851: LD_ADDR_EXP 18
2855: PUSH
2856: LD_INT 80
2858: ST_TO_ADDR
// tech_RadMat := 81 ;
2859: LD_ADDR_EXP 19
2863: PUSH
2864: LD_INT 81
2866: ST_TO_ADDR
// tech_BasicTools := 82 ;
2867: LD_ADDR_EXP 20
2871: PUSH
2872: LD_INT 82
2874: ST_TO_ADDR
// tech_Cargo := 83 ;
2875: LD_ADDR_EXP 21
2879: PUSH
2880: LD_INT 83
2882: ST_TO_ADDR
// tech_Track := 84 ;
2883: LD_ADDR_EXP 22
2887: PUSH
2888: LD_INT 84
2890: ST_TO_ADDR
// tech_Crane := 85 ;
2891: LD_ADDR_EXP 23
2895: PUSH
2896: LD_INT 85
2898: ST_TO_ADDR
// tech_Bulldozer := 86 ;
2899: LD_ADDR_EXP 24
2903: PUSH
2904: LD_INT 86
2906: ST_TO_ADDR
// tech_Hovercraft := 87 ;
2907: LD_ADDR_EXP 25
2911: PUSH
2912: LD_INT 87
2914: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
2915: LD_ADDR_EXP 26
2919: PUSH
2920: LD_INT 88
2922: ST_TO_ADDR
// end ;
2923: LD_VAR 0 1
2927: RET
// every 1 do
2928: GO 2930
2930: DISABLE
// InitGlobalVariables ; end_of_file
2931: CALL 2776 0 0
2935: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2936: LD_INT 0
2938: PPUSH
2939: PPUSH
// if exist_mode then
2940: LD_VAR 0 2
2944: IFFALSE 2969
// unit := CreateCharacter ( prefix & ident ) else
2946: LD_ADDR_VAR 0 5
2950: PUSH
2951: LD_VAR 0 3
2955: PUSH
2956: LD_VAR 0 1
2960: STR
2961: PPUSH
2962: CALL_OW 34
2966: ST_TO_ADDR
2967: GO 2984
// unit := NewCharacter ( ident ) ;
2969: LD_ADDR_VAR 0 5
2973: PUSH
2974: LD_VAR 0 1
2978: PPUSH
2979: CALL_OW 25
2983: ST_TO_ADDR
// result := unit ;
2984: LD_ADDR_VAR 0 4
2988: PUSH
2989: LD_VAR 0 5
2993: ST_TO_ADDR
// end ;
2994: LD_VAR 0 4
2998: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2999: LD_INT 0
3001: PPUSH
3002: PPUSH
// if not side or not nation then
3003: LD_VAR 0 1
3007: NOT
3008: PUSH
3009: LD_VAR 0 2
3013: NOT
3014: OR
3015: IFFALSE 3019
// exit ;
3017: GO 3787
// case nation of nation_american :
3019: LD_VAR 0 2
3023: PUSH
3024: LD_INT 1
3026: DOUBLE
3027: EQUAL
3028: IFTRUE 3032
3030: GO 3246
3032: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3033: LD_ADDR_VAR 0 4
3037: PUSH
3038: LD_INT 35
3040: PUSH
3041: LD_INT 45
3043: PUSH
3044: LD_INT 46
3046: PUSH
3047: LD_INT 47
3049: PUSH
3050: LD_INT 82
3052: PUSH
3053: LD_INT 83
3055: PUSH
3056: LD_INT 84
3058: PUSH
3059: LD_INT 85
3061: PUSH
3062: LD_INT 86
3064: PUSH
3065: LD_INT 1
3067: PUSH
3068: LD_INT 2
3070: PUSH
3071: LD_INT 6
3073: PUSH
3074: LD_INT 15
3076: PUSH
3077: LD_INT 16
3079: PUSH
3080: LD_INT 7
3082: PUSH
3083: LD_INT 12
3085: PUSH
3086: LD_INT 13
3088: PUSH
3089: LD_INT 10
3091: PUSH
3092: LD_INT 14
3094: PUSH
3095: LD_INT 20
3097: PUSH
3098: LD_INT 21
3100: PUSH
3101: LD_INT 22
3103: PUSH
3104: LD_INT 25
3106: PUSH
3107: LD_INT 32
3109: PUSH
3110: LD_INT 27
3112: PUSH
3113: LD_INT 36
3115: PUSH
3116: LD_INT 69
3118: PUSH
3119: LD_INT 39
3121: PUSH
3122: LD_INT 34
3124: PUSH
3125: LD_INT 40
3127: PUSH
3128: LD_INT 48
3130: PUSH
3131: LD_INT 49
3133: PUSH
3134: LD_INT 50
3136: PUSH
3137: LD_INT 51
3139: PUSH
3140: LD_INT 52
3142: PUSH
3143: LD_INT 53
3145: PUSH
3146: LD_INT 54
3148: PUSH
3149: LD_INT 55
3151: PUSH
3152: LD_INT 56
3154: PUSH
3155: LD_INT 57
3157: PUSH
3158: LD_INT 58
3160: PUSH
3161: LD_INT 59
3163: PUSH
3164: LD_INT 60
3166: PUSH
3167: LD_INT 61
3169: PUSH
3170: LD_INT 62
3172: PUSH
3173: LD_INT 80
3175: PUSH
3176: LD_INT 82
3178: PUSH
3179: LD_INT 83
3181: PUSH
3182: LD_INT 84
3184: PUSH
3185: LD_INT 85
3187: PUSH
3188: LD_INT 86
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: LIST
3230: LIST
3231: LIST
3232: LIST
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: ST_TO_ADDR
3244: GO 3711
3246: LD_INT 2
3248: DOUBLE
3249: EQUAL
3250: IFTRUE 3254
3252: GO 3480
3254: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3255: LD_ADDR_VAR 0 4
3259: PUSH
3260: LD_INT 35
3262: PUSH
3263: LD_INT 45
3265: PUSH
3266: LD_INT 46
3268: PUSH
3269: LD_INT 47
3271: PUSH
3272: LD_INT 82
3274: PUSH
3275: LD_INT 83
3277: PUSH
3278: LD_INT 84
3280: PUSH
3281: LD_INT 85
3283: PUSH
3284: LD_INT 87
3286: PUSH
3287: LD_INT 70
3289: PUSH
3290: LD_INT 1
3292: PUSH
3293: LD_INT 11
3295: PUSH
3296: LD_INT 3
3298: PUSH
3299: LD_INT 4
3301: PUSH
3302: LD_INT 5
3304: PUSH
3305: LD_INT 6
3307: PUSH
3308: LD_INT 15
3310: PUSH
3311: LD_INT 18
3313: PUSH
3314: LD_INT 7
3316: PUSH
3317: LD_INT 17
3319: PUSH
3320: LD_INT 8
3322: PUSH
3323: LD_INT 20
3325: PUSH
3326: LD_INT 21
3328: PUSH
3329: LD_INT 22
3331: PUSH
3332: LD_INT 72
3334: PUSH
3335: LD_INT 26
3337: PUSH
3338: LD_INT 69
3340: PUSH
3341: LD_INT 39
3343: PUSH
3344: LD_INT 40
3346: PUSH
3347: LD_INT 41
3349: PUSH
3350: LD_INT 42
3352: PUSH
3353: LD_INT 43
3355: PUSH
3356: LD_INT 48
3358: PUSH
3359: LD_INT 49
3361: PUSH
3362: LD_INT 50
3364: PUSH
3365: LD_INT 51
3367: PUSH
3368: LD_INT 52
3370: PUSH
3371: LD_INT 53
3373: PUSH
3374: LD_INT 54
3376: PUSH
3377: LD_INT 55
3379: PUSH
3380: LD_INT 56
3382: PUSH
3383: LD_INT 60
3385: PUSH
3386: LD_INT 61
3388: PUSH
3389: LD_INT 62
3391: PUSH
3392: LD_INT 66
3394: PUSH
3395: LD_INT 67
3397: PUSH
3398: LD_INT 68
3400: PUSH
3401: LD_INT 81
3403: PUSH
3404: LD_INT 82
3406: PUSH
3407: LD_INT 83
3409: PUSH
3410: LD_INT 84
3412: PUSH
3413: LD_INT 85
3415: PUSH
3416: LD_INT 87
3418: PUSH
3419: LD_INT 88
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: LIST
3443: LIST
3444: LIST
3445: LIST
3446: LIST
3447: LIST
3448: LIST
3449: LIST
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: ST_TO_ADDR
3478: GO 3711
3480: LD_INT 3
3482: DOUBLE
3483: EQUAL
3484: IFTRUE 3488
3486: GO 3710
3488: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3489: LD_ADDR_VAR 0 4
3493: PUSH
3494: LD_INT 46
3496: PUSH
3497: LD_INT 47
3499: PUSH
3500: LD_INT 1
3502: PUSH
3503: LD_INT 2
3505: PUSH
3506: LD_INT 82
3508: PUSH
3509: LD_INT 83
3511: PUSH
3512: LD_INT 84
3514: PUSH
3515: LD_INT 85
3517: PUSH
3518: LD_INT 86
3520: PUSH
3521: LD_INT 11
3523: PUSH
3524: LD_INT 9
3526: PUSH
3527: LD_INT 20
3529: PUSH
3530: LD_INT 19
3532: PUSH
3533: LD_INT 21
3535: PUSH
3536: LD_INT 24
3538: PUSH
3539: LD_INT 22
3541: PUSH
3542: LD_INT 25
3544: PUSH
3545: LD_INT 28
3547: PUSH
3548: LD_INT 29
3550: PUSH
3551: LD_INT 30
3553: PUSH
3554: LD_INT 31
3556: PUSH
3557: LD_INT 37
3559: PUSH
3560: LD_INT 38
3562: PUSH
3563: LD_INT 32
3565: PUSH
3566: LD_INT 27
3568: PUSH
3569: LD_INT 33
3571: PUSH
3572: LD_INT 69
3574: PUSH
3575: LD_INT 39
3577: PUSH
3578: LD_INT 34
3580: PUSH
3581: LD_INT 40
3583: PUSH
3584: LD_INT 71
3586: PUSH
3587: LD_INT 23
3589: PUSH
3590: LD_INT 44
3592: PUSH
3593: LD_INT 48
3595: PUSH
3596: LD_INT 49
3598: PUSH
3599: LD_INT 50
3601: PUSH
3602: LD_INT 51
3604: PUSH
3605: LD_INT 52
3607: PUSH
3608: LD_INT 53
3610: PUSH
3611: LD_INT 54
3613: PUSH
3614: LD_INT 55
3616: PUSH
3617: LD_INT 56
3619: PUSH
3620: LD_INT 57
3622: PUSH
3623: LD_INT 58
3625: PUSH
3626: LD_INT 59
3628: PUSH
3629: LD_INT 63
3631: PUSH
3632: LD_INT 64
3634: PUSH
3635: LD_INT 65
3637: PUSH
3638: LD_INT 82
3640: PUSH
3641: LD_INT 83
3643: PUSH
3644: LD_INT 84
3646: PUSH
3647: LD_INT 85
3649: PUSH
3650: LD_INT 86
3652: PUSH
3653: EMPTY
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: LIST
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: ST_TO_ADDR
3708: GO 3711
3710: POP
// if state > - 1 and state < 3 then
3711: LD_VAR 0 3
3715: PUSH
3716: LD_INT 1
3718: NEG
3719: GREATER
3720: PUSH
3721: LD_VAR 0 3
3725: PUSH
3726: LD_INT 3
3728: LESS
3729: AND
3730: IFFALSE 3787
// for i in result do
3732: LD_ADDR_VAR 0 5
3736: PUSH
3737: LD_VAR 0 4
3741: PUSH
3742: FOR_IN
3743: IFFALSE 3785
// if GetTech ( i , side ) <> state then
3745: LD_VAR 0 5
3749: PPUSH
3750: LD_VAR 0 1
3754: PPUSH
3755: CALL_OW 321
3759: PUSH
3760: LD_VAR 0 3
3764: NONEQUAL
3765: IFFALSE 3783
// result := result diff i ;
3767: LD_ADDR_VAR 0 4
3771: PUSH
3772: LD_VAR 0 4
3776: PUSH
3777: LD_VAR 0 5
3781: DIFF
3782: ST_TO_ADDR
3783: GO 3742
3785: POP
3786: POP
// end ;
3787: LD_VAR 0 4
3791: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3792: LD_INT 0
3794: PPUSH
3795: PPUSH
3796: PPUSH
// result := true ;
3797: LD_ADDR_VAR 0 3
3801: PUSH
3802: LD_INT 1
3804: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3805: LD_ADDR_VAR 0 5
3809: PUSH
3810: LD_VAR 0 2
3814: PPUSH
3815: CALL_OW 480
3819: ST_TO_ADDR
// if not tmp then
3820: LD_VAR 0 5
3824: NOT
3825: IFFALSE 3829
// exit ;
3827: GO 3878
// for i in tmp do
3829: LD_ADDR_VAR 0 4
3833: PUSH
3834: LD_VAR 0 5
3838: PUSH
3839: FOR_IN
3840: IFFALSE 3876
// if GetTech ( i , side ) <> state_researched then
3842: LD_VAR 0 4
3846: PPUSH
3847: LD_VAR 0 1
3851: PPUSH
3852: CALL_OW 321
3856: PUSH
3857: LD_INT 2
3859: NONEQUAL
3860: IFFALSE 3874
// begin result := false ;
3862: LD_ADDR_VAR 0 3
3866: PUSH
3867: LD_INT 0
3869: ST_TO_ADDR
// exit ;
3870: POP
3871: POP
3872: GO 3878
// end ;
3874: GO 3839
3876: POP
3877: POP
// end ;
3878: LD_VAR 0 3
3882: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3883: LD_INT 0
3885: PPUSH
3886: PPUSH
3887: PPUSH
3888: PPUSH
3889: PPUSH
3890: PPUSH
3891: PPUSH
3892: PPUSH
3893: PPUSH
3894: PPUSH
3895: PPUSH
3896: PPUSH
3897: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3898: LD_VAR 0 1
3902: NOT
3903: PUSH
3904: LD_VAR 0 1
3908: PPUSH
3909: CALL_OW 257
3913: PUSH
3914: LD_INT 9
3916: NONEQUAL
3917: OR
3918: IFFALSE 3922
// exit ;
3920: GO 4495
// side := GetSide ( unit ) ;
3922: LD_ADDR_VAR 0 9
3926: PUSH
3927: LD_VAR 0 1
3931: PPUSH
3932: CALL_OW 255
3936: ST_TO_ADDR
// tech_space := tech_spacanom ;
3937: LD_ADDR_VAR 0 12
3941: PUSH
3942: LD_INT 29
3944: ST_TO_ADDR
// tech_time := tech_taurad ;
3945: LD_ADDR_VAR 0 13
3949: PUSH
3950: LD_INT 28
3952: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3953: LD_ADDR_VAR 0 11
3957: PUSH
3958: LD_VAR 0 1
3962: PPUSH
3963: CALL_OW 310
3967: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3968: LD_VAR 0 11
3972: PPUSH
3973: CALL_OW 247
3977: PUSH
3978: LD_INT 2
3980: EQUAL
3981: IFFALSE 3985
// exit ;
3983: GO 4495
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3985: LD_ADDR_VAR 0 8
3989: PUSH
3990: LD_INT 81
3992: PUSH
3993: LD_VAR 0 9
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: PUSH
4002: LD_INT 3
4004: PUSH
4005: LD_INT 21
4007: PUSH
4008: LD_INT 3
4010: PUSH
4011: EMPTY
4012: LIST
4013: LIST
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: PPUSH
4023: CALL_OW 69
4027: ST_TO_ADDR
// if not tmp then
4028: LD_VAR 0 8
4032: NOT
4033: IFFALSE 4037
// exit ;
4035: GO 4495
// if in_unit then
4037: LD_VAR 0 11
4041: IFFALSE 4065
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4043: LD_ADDR_VAR 0 10
4047: PUSH
4048: LD_VAR 0 8
4052: PPUSH
4053: LD_VAR 0 11
4057: PPUSH
4058: CALL_OW 74
4062: ST_TO_ADDR
4063: GO 4085
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4065: LD_ADDR_VAR 0 10
4069: PUSH
4070: LD_VAR 0 8
4074: PPUSH
4075: LD_VAR 0 1
4079: PPUSH
4080: CALL_OW 74
4084: ST_TO_ADDR
// if not enemy then
4085: LD_VAR 0 10
4089: NOT
4090: IFFALSE 4094
// exit ;
4092: GO 4495
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4094: LD_VAR 0 11
4098: PUSH
4099: LD_VAR 0 11
4103: PPUSH
4104: LD_VAR 0 10
4108: PPUSH
4109: CALL_OW 296
4113: PUSH
4114: LD_INT 13
4116: GREATER
4117: AND
4118: PUSH
4119: LD_VAR 0 1
4123: PPUSH
4124: LD_VAR 0 10
4128: PPUSH
4129: CALL_OW 296
4133: PUSH
4134: LD_INT 12
4136: GREATER
4137: OR
4138: IFFALSE 4142
// exit ;
4140: GO 4495
// missile := [ 1 ] ;
4142: LD_ADDR_VAR 0 14
4146: PUSH
4147: LD_INT 1
4149: PUSH
4150: EMPTY
4151: LIST
4152: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4153: LD_VAR 0 9
4157: PPUSH
4158: LD_VAR 0 12
4162: PPUSH
4163: CALL_OW 325
4167: IFFALSE 4196
// missile := Replace ( missile , missile + 1 , 2 ) ;
4169: LD_ADDR_VAR 0 14
4173: PUSH
4174: LD_VAR 0 14
4178: PPUSH
4179: LD_VAR 0 14
4183: PUSH
4184: LD_INT 1
4186: PLUS
4187: PPUSH
4188: LD_INT 2
4190: PPUSH
4191: CALL_OW 1
4195: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4196: LD_VAR 0 9
4200: PPUSH
4201: LD_VAR 0 13
4205: PPUSH
4206: CALL_OW 325
4210: PUSH
4211: LD_VAR 0 10
4215: PPUSH
4216: CALL_OW 255
4220: PPUSH
4221: LD_VAR 0 13
4225: PPUSH
4226: CALL_OW 325
4230: NOT
4231: AND
4232: IFFALSE 4261
// missile := Replace ( missile , missile + 1 , 3 ) ;
4234: LD_ADDR_VAR 0 14
4238: PUSH
4239: LD_VAR 0 14
4243: PPUSH
4244: LD_VAR 0 14
4248: PUSH
4249: LD_INT 1
4251: PLUS
4252: PPUSH
4253: LD_INT 3
4255: PPUSH
4256: CALL_OW 1
4260: ST_TO_ADDR
// if missile < 2 then
4261: LD_VAR 0 14
4265: PUSH
4266: LD_INT 2
4268: LESS
4269: IFFALSE 4273
// exit ;
4271: GO 4495
// x := GetX ( enemy ) ;
4273: LD_ADDR_VAR 0 4
4277: PUSH
4278: LD_VAR 0 10
4282: PPUSH
4283: CALL_OW 250
4287: ST_TO_ADDR
// y := GetY ( enemy ) ;
4288: LD_ADDR_VAR 0 5
4292: PUSH
4293: LD_VAR 0 10
4297: PPUSH
4298: CALL_OW 251
4302: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4303: LD_ADDR_VAR 0 6
4307: PUSH
4308: LD_VAR 0 4
4312: PUSH
4313: LD_INT 1
4315: NEG
4316: PPUSH
4317: LD_INT 1
4319: PPUSH
4320: CALL_OW 12
4324: PLUS
4325: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4326: LD_ADDR_VAR 0 7
4330: PUSH
4331: LD_VAR 0 5
4335: PUSH
4336: LD_INT 1
4338: NEG
4339: PPUSH
4340: LD_INT 1
4342: PPUSH
4343: CALL_OW 12
4347: PLUS
4348: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4349: LD_VAR 0 6
4353: PPUSH
4354: LD_VAR 0 7
4358: PPUSH
4359: CALL_OW 488
4363: NOT
4364: IFFALSE 4386
// begin _x := x ;
4366: LD_ADDR_VAR 0 6
4370: PUSH
4371: LD_VAR 0 4
4375: ST_TO_ADDR
// _y := y ;
4376: LD_ADDR_VAR 0 7
4380: PUSH
4381: LD_VAR 0 5
4385: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4386: LD_ADDR_VAR 0 3
4390: PUSH
4391: LD_INT 1
4393: PPUSH
4394: LD_VAR 0 14
4398: PPUSH
4399: CALL_OW 12
4403: ST_TO_ADDR
// case i of 1 :
4404: LD_VAR 0 3
4408: PUSH
4409: LD_INT 1
4411: DOUBLE
4412: EQUAL
4413: IFTRUE 4417
4415: GO 4434
4417: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4418: LD_VAR 0 1
4422: PPUSH
4423: LD_VAR 0 10
4427: PPUSH
4428: CALL_OW 115
4432: GO 4495
4434: LD_INT 2
4436: DOUBLE
4437: EQUAL
4438: IFTRUE 4442
4440: GO 4464
4442: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4443: LD_VAR 0 1
4447: PPUSH
4448: LD_VAR 0 6
4452: PPUSH
4453: LD_VAR 0 7
4457: PPUSH
4458: CALL_OW 153
4462: GO 4495
4464: LD_INT 3
4466: DOUBLE
4467: EQUAL
4468: IFTRUE 4472
4470: GO 4494
4472: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4473: LD_VAR 0 1
4477: PPUSH
4478: LD_VAR 0 6
4482: PPUSH
4483: LD_VAR 0 7
4487: PPUSH
4488: CALL_OW 154
4492: GO 4495
4494: POP
// end ;
4495: LD_VAR 0 2
4499: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4500: LD_INT 0
4502: PPUSH
4503: PPUSH
4504: PPUSH
4505: PPUSH
4506: PPUSH
4507: PPUSH
// if not unit or not building then
4508: LD_VAR 0 1
4512: NOT
4513: PUSH
4514: LD_VAR 0 2
4518: NOT
4519: OR
4520: IFFALSE 4524
// exit ;
4522: GO 4682
// x := GetX ( building ) ;
4524: LD_ADDR_VAR 0 5
4528: PUSH
4529: LD_VAR 0 2
4533: PPUSH
4534: CALL_OW 250
4538: ST_TO_ADDR
// y := GetY ( building ) ;
4539: LD_ADDR_VAR 0 6
4543: PUSH
4544: LD_VAR 0 2
4548: PPUSH
4549: CALL_OW 251
4553: ST_TO_ADDR
// for i = 0 to 5 do
4554: LD_ADDR_VAR 0 4
4558: PUSH
4559: DOUBLE
4560: LD_INT 0
4562: DEC
4563: ST_TO_ADDR
4564: LD_INT 5
4566: PUSH
4567: FOR_TO
4568: IFFALSE 4680
// begin _x := ShiftX ( x , i , 3 ) ;
4570: LD_ADDR_VAR 0 7
4574: PUSH
4575: LD_VAR 0 5
4579: PPUSH
4580: LD_VAR 0 4
4584: PPUSH
4585: LD_INT 3
4587: PPUSH
4588: CALL_OW 272
4592: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4593: LD_ADDR_VAR 0 8
4597: PUSH
4598: LD_VAR 0 6
4602: PPUSH
4603: LD_VAR 0 4
4607: PPUSH
4608: LD_INT 3
4610: PPUSH
4611: CALL_OW 273
4615: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4616: LD_VAR 0 7
4620: PPUSH
4621: LD_VAR 0 8
4625: PPUSH
4626: CALL_OW 488
4630: NOT
4631: IFFALSE 4635
// continue ;
4633: GO 4567
// if HexInfo ( _x , _y ) = 0 then
4635: LD_VAR 0 7
4639: PPUSH
4640: LD_VAR 0 8
4644: PPUSH
4645: CALL_OW 428
4649: PUSH
4650: LD_INT 0
4652: EQUAL
4653: IFFALSE 4678
// begin ComMoveXY ( unit , _x , _y ) ;
4655: LD_VAR 0 1
4659: PPUSH
4660: LD_VAR 0 7
4664: PPUSH
4665: LD_VAR 0 8
4669: PPUSH
4670: CALL_OW 111
// exit ;
4674: POP
4675: POP
4676: GO 4682
// end ; end ;
4678: GO 4567
4680: POP
4681: POP
// end ;
4682: LD_VAR 0 3
4686: RET
// export function ScanBase ( side , base_area ) ; begin
4687: LD_INT 0
4689: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4690: LD_ADDR_VAR 0 3
4694: PUSH
4695: LD_VAR 0 2
4699: PPUSH
4700: LD_INT 81
4702: PUSH
4703: LD_VAR 0 1
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: PPUSH
4712: CALL_OW 70
4716: ST_TO_ADDR
// end ;
4717: LD_VAR 0 3
4721: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4722: LD_INT 0
4724: PPUSH
4725: PPUSH
4726: PPUSH
4727: PPUSH
// result := false ;
4728: LD_ADDR_VAR 0 2
4732: PUSH
4733: LD_INT 0
4735: ST_TO_ADDR
// side := GetSide ( unit ) ;
4736: LD_ADDR_VAR 0 3
4740: PUSH
4741: LD_VAR 0 1
4745: PPUSH
4746: CALL_OW 255
4750: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4751: LD_ADDR_VAR 0 4
4755: PUSH
4756: LD_VAR 0 1
4760: PPUSH
4761: CALL_OW 248
4765: ST_TO_ADDR
// case nat of 1 :
4766: LD_VAR 0 4
4770: PUSH
4771: LD_INT 1
4773: DOUBLE
4774: EQUAL
4775: IFTRUE 4779
4777: GO 4790
4779: POP
// tech := tech_lassight ; 2 :
4780: LD_ADDR_VAR 0 5
4784: PUSH
4785: LD_INT 12
4787: ST_TO_ADDR
4788: GO 4829
4790: LD_INT 2
4792: DOUBLE
4793: EQUAL
4794: IFTRUE 4798
4796: GO 4809
4798: POP
// tech := tech_mortar ; 3 :
4799: LD_ADDR_VAR 0 5
4803: PUSH
4804: LD_INT 41
4806: ST_TO_ADDR
4807: GO 4829
4809: LD_INT 3
4811: DOUBLE
4812: EQUAL
4813: IFTRUE 4817
4815: GO 4828
4817: POP
// tech := tech_bazooka ; end ;
4818: LD_ADDR_VAR 0 5
4822: PUSH
4823: LD_INT 44
4825: ST_TO_ADDR
4826: GO 4829
4828: POP
// if Researched ( side , tech ) then
4829: LD_VAR 0 3
4833: PPUSH
4834: LD_VAR 0 5
4838: PPUSH
4839: CALL_OW 325
4843: IFFALSE 4870
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4845: LD_ADDR_VAR 0 2
4849: PUSH
4850: LD_INT 5
4852: PUSH
4853: LD_INT 8
4855: PUSH
4856: LD_INT 9
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: LIST
4863: PUSH
4864: LD_VAR 0 4
4868: ARRAY
4869: ST_TO_ADDR
// end ;
4870: LD_VAR 0 2
4874: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4875: LD_INT 0
4877: PPUSH
4878: PPUSH
4879: PPUSH
// if not mines then
4880: LD_VAR 0 2
4884: NOT
4885: IFFALSE 4889
// exit ;
4887: GO 5033
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4889: LD_ADDR_VAR 0 5
4893: PUSH
4894: LD_INT 81
4896: PUSH
4897: LD_VAR 0 1
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: PUSH
4906: LD_INT 3
4908: PUSH
4909: LD_INT 21
4911: PUSH
4912: LD_INT 3
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PPUSH
4927: CALL_OW 69
4931: ST_TO_ADDR
// for i in mines do
4932: LD_ADDR_VAR 0 4
4936: PUSH
4937: LD_VAR 0 2
4941: PUSH
4942: FOR_IN
4943: IFFALSE 5031
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4945: LD_VAR 0 4
4949: PUSH
4950: LD_INT 1
4952: ARRAY
4953: PPUSH
4954: LD_VAR 0 4
4958: PUSH
4959: LD_INT 2
4961: ARRAY
4962: PPUSH
4963: CALL_OW 458
4967: NOT
4968: IFFALSE 4972
// continue ;
4970: GO 4942
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4972: LD_VAR 0 4
4976: PUSH
4977: LD_INT 1
4979: ARRAY
4980: PPUSH
4981: LD_VAR 0 4
4985: PUSH
4986: LD_INT 2
4988: ARRAY
4989: PPUSH
4990: CALL_OW 428
4994: PUSH
4995: LD_VAR 0 5
4999: IN
5000: IFFALSE 5029
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5002: LD_VAR 0 4
5006: PUSH
5007: LD_INT 1
5009: ARRAY
5010: PPUSH
5011: LD_VAR 0 4
5015: PUSH
5016: LD_INT 2
5018: ARRAY
5019: PPUSH
5020: LD_VAR 0 1
5024: PPUSH
5025: CALL_OW 456
// end ;
5029: GO 4942
5031: POP
5032: POP
// end ;
5033: LD_VAR 0 3
5037: RET
// export function Count ( array ) ; var i ; begin
5038: LD_INT 0
5040: PPUSH
5041: PPUSH
// result := 0 ;
5042: LD_ADDR_VAR 0 2
5046: PUSH
5047: LD_INT 0
5049: ST_TO_ADDR
// for i in array do
5050: LD_ADDR_VAR 0 3
5054: PUSH
5055: LD_VAR 0 1
5059: PUSH
5060: FOR_IN
5061: IFFALSE 5085
// if i then
5063: LD_VAR 0 3
5067: IFFALSE 5083
// result := result + 1 ;
5069: LD_ADDR_VAR 0 2
5073: PUSH
5074: LD_VAR 0 2
5078: PUSH
5079: LD_INT 1
5081: PLUS
5082: ST_TO_ADDR
5083: GO 5060
5085: POP
5086: POP
// end ;
5087: LD_VAR 0 2
5091: RET
// export function IsEmpty ( building ) ; begin
5092: LD_INT 0
5094: PPUSH
// if not building then
5095: LD_VAR 0 1
5099: NOT
5100: IFFALSE 5104
// exit ;
5102: GO 5147
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5104: LD_ADDR_VAR 0 2
5108: PUSH
5109: LD_VAR 0 1
5113: PUSH
5114: LD_INT 22
5116: PUSH
5117: LD_VAR 0 1
5121: PPUSH
5122: CALL_OW 255
5126: PUSH
5127: EMPTY
5128: LIST
5129: LIST
5130: PUSH
5131: LD_INT 58
5133: PUSH
5134: EMPTY
5135: LIST
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: PPUSH
5141: CALL_OW 69
5145: IN
5146: ST_TO_ADDR
// end ;
5147: LD_VAR 0 2
5151: RET
// export function IsNotFull ( building ) ; var places ; begin
5152: LD_INT 0
5154: PPUSH
5155: PPUSH
// if not building then
5156: LD_VAR 0 1
5160: NOT
5161: IFFALSE 5165
// exit ;
5163: GO 5336
// result := false ;
5165: LD_ADDR_VAR 0 2
5169: PUSH
5170: LD_INT 0
5172: ST_TO_ADDR
// places := 0 ;
5173: LD_ADDR_VAR 0 3
5177: PUSH
5178: LD_INT 0
5180: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
5181: LD_VAR 0 1
5185: PPUSH
5186: CALL_OW 266
5190: PUSH
5191: LD_INT 0
5193: DOUBLE
5194: EQUAL
5195: IFTRUE 5253
5197: LD_INT 1
5199: DOUBLE
5200: EQUAL
5201: IFTRUE 5253
5203: LD_INT 6
5205: DOUBLE
5206: EQUAL
5207: IFTRUE 5253
5209: LD_INT 7
5211: DOUBLE
5212: EQUAL
5213: IFTRUE 5253
5215: LD_INT 8
5217: DOUBLE
5218: EQUAL
5219: IFTRUE 5253
5221: LD_INT 4
5223: DOUBLE
5224: EQUAL
5225: IFTRUE 5253
5227: LD_INT 5
5229: DOUBLE
5230: EQUAL
5231: IFTRUE 5253
5233: LD_INT 2
5235: DOUBLE
5236: EQUAL
5237: IFTRUE 5253
5239: LD_INT 3
5241: DOUBLE
5242: EQUAL
5243: IFTRUE 5253
5245: LD_INT 35
5247: DOUBLE
5248: EQUAL
5249: IFTRUE 5253
5251: GO 5264
5253: POP
// places := 6 ; b_bunker , b_breastwork :
5254: LD_ADDR_VAR 0 3
5258: PUSH
5259: LD_INT 6
5261: ST_TO_ADDR
5262: GO 5309
5264: LD_INT 32
5266: DOUBLE
5267: EQUAL
5268: IFTRUE 5278
5270: LD_INT 31
5272: DOUBLE
5273: EQUAL
5274: IFTRUE 5278
5276: GO 5289
5278: POP
// places := 1 ; b_control_tower :
5279: LD_ADDR_VAR 0 3
5283: PUSH
5284: LD_INT 1
5286: ST_TO_ADDR
5287: GO 5309
5289: LD_INT 36
5291: DOUBLE
5292: EQUAL
5293: IFTRUE 5297
5295: GO 5308
5297: POP
// places := 3 ; end ;
5298: LD_ADDR_VAR 0 3
5302: PUSH
5303: LD_INT 3
5305: ST_TO_ADDR
5306: GO 5309
5308: POP
// if places then
5309: LD_VAR 0 3
5313: IFFALSE 5336
// result := UnitsInside ( building ) < places ;
5315: LD_ADDR_VAR 0 2
5319: PUSH
5320: LD_VAR 0 1
5324: PPUSH
5325: CALL_OW 313
5329: PUSH
5330: LD_VAR 0 3
5334: LESS
5335: ST_TO_ADDR
// end ;
5336: LD_VAR 0 2
5340: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5341: LD_INT 0
5343: PPUSH
5344: PPUSH
5345: PPUSH
5346: PPUSH
// tmp := [ ] ;
5347: LD_ADDR_VAR 0 3
5351: PUSH
5352: EMPTY
5353: ST_TO_ADDR
// list := [ ] ;
5354: LD_ADDR_VAR 0 5
5358: PUSH
5359: EMPTY
5360: ST_TO_ADDR
// for i = 16 to 25 do
5361: LD_ADDR_VAR 0 4
5365: PUSH
5366: DOUBLE
5367: LD_INT 16
5369: DEC
5370: ST_TO_ADDR
5371: LD_INT 25
5373: PUSH
5374: FOR_TO
5375: IFFALSE 5448
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5377: LD_ADDR_VAR 0 3
5381: PUSH
5382: LD_VAR 0 3
5386: PUSH
5387: LD_INT 22
5389: PUSH
5390: LD_VAR 0 1
5394: PPUSH
5395: CALL_OW 255
5399: PUSH
5400: EMPTY
5401: LIST
5402: LIST
5403: PUSH
5404: LD_INT 91
5406: PUSH
5407: LD_VAR 0 1
5411: PUSH
5412: LD_INT 6
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: LIST
5419: PUSH
5420: LD_INT 30
5422: PUSH
5423: LD_VAR 0 4
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: LIST
5436: PUSH
5437: EMPTY
5438: LIST
5439: PPUSH
5440: CALL_OW 69
5444: ADD
5445: ST_TO_ADDR
5446: GO 5374
5448: POP
5449: POP
// for i = 1 to tmp do
5450: LD_ADDR_VAR 0 4
5454: PUSH
5455: DOUBLE
5456: LD_INT 1
5458: DEC
5459: ST_TO_ADDR
5460: LD_VAR 0 3
5464: PUSH
5465: FOR_TO
5466: IFFALSE 5554
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5468: LD_ADDR_VAR 0 5
5472: PUSH
5473: LD_VAR 0 5
5477: PUSH
5478: LD_VAR 0 3
5482: PUSH
5483: LD_VAR 0 4
5487: ARRAY
5488: PPUSH
5489: CALL_OW 266
5493: PUSH
5494: LD_VAR 0 3
5498: PUSH
5499: LD_VAR 0 4
5503: ARRAY
5504: PPUSH
5505: CALL_OW 250
5509: PUSH
5510: LD_VAR 0 3
5514: PUSH
5515: LD_VAR 0 4
5519: ARRAY
5520: PPUSH
5521: CALL_OW 251
5525: PUSH
5526: LD_VAR 0 3
5530: PUSH
5531: LD_VAR 0 4
5535: ARRAY
5536: PPUSH
5537: CALL_OW 254
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: PUSH
5548: EMPTY
5549: LIST
5550: ADD
5551: ST_TO_ADDR
5552: GO 5465
5554: POP
5555: POP
// result := list ;
5556: LD_ADDR_VAR 0 2
5560: PUSH
5561: LD_VAR 0 5
5565: ST_TO_ADDR
// end ;
5566: LD_VAR 0 2
5570: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5571: LD_INT 0
5573: PPUSH
5574: PPUSH
5575: PPUSH
5576: PPUSH
5577: PPUSH
5578: PPUSH
5579: PPUSH
// if not factory then
5580: LD_VAR 0 1
5584: NOT
5585: IFFALSE 5589
// exit ;
5587: GO 6182
// if control = control_apeman then
5589: LD_VAR 0 4
5593: PUSH
5594: LD_INT 5
5596: EQUAL
5597: IFFALSE 5706
// begin tmp := UnitsInside ( factory ) ;
5599: LD_ADDR_VAR 0 8
5603: PUSH
5604: LD_VAR 0 1
5608: PPUSH
5609: CALL_OW 313
5613: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5614: LD_VAR 0 8
5618: PPUSH
5619: LD_INT 25
5621: PUSH
5622: LD_INT 12
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: PPUSH
5629: CALL_OW 72
5633: NOT
5634: IFFALSE 5644
// control := control_manual ;
5636: LD_ADDR_VAR 0 4
5640: PUSH
5641: LD_INT 1
5643: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5644: LD_ADDR_VAR 0 8
5648: PUSH
5649: LD_VAR 0 1
5653: PPUSH
5654: CALL 5341 0 1
5658: ST_TO_ADDR
// if tmp then
5659: LD_VAR 0 8
5663: IFFALSE 5706
// begin for i in tmp do
5665: LD_ADDR_VAR 0 7
5669: PUSH
5670: LD_VAR 0 8
5674: PUSH
5675: FOR_IN
5676: IFFALSE 5704
// if i [ 1 ] = b_ext_radio then
5678: LD_VAR 0 7
5682: PUSH
5683: LD_INT 1
5685: ARRAY
5686: PUSH
5687: LD_INT 22
5689: EQUAL
5690: IFFALSE 5702
// begin control := control_remote ;
5692: LD_ADDR_VAR 0 4
5696: PUSH
5697: LD_INT 2
5699: ST_TO_ADDR
// break ;
5700: GO 5704
// end ;
5702: GO 5675
5704: POP
5705: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5706: LD_VAR 0 1
5710: PPUSH
5711: LD_VAR 0 2
5715: PPUSH
5716: LD_VAR 0 3
5720: PPUSH
5721: LD_VAR 0 4
5725: PPUSH
5726: LD_VAR 0 5
5730: PPUSH
5731: CALL_OW 448
5735: IFFALSE 5770
// begin result := [ chassis , engine , control , weapon ] ;
5737: LD_ADDR_VAR 0 6
5741: PUSH
5742: LD_VAR 0 2
5746: PUSH
5747: LD_VAR 0 3
5751: PUSH
5752: LD_VAR 0 4
5756: PUSH
5757: LD_VAR 0 5
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: LIST
5766: LIST
5767: ST_TO_ADDR
// exit ;
5768: GO 6182
// end ; _chassis := AvailableChassisList ( factory ) ;
5770: LD_ADDR_VAR 0 9
5774: PUSH
5775: LD_VAR 0 1
5779: PPUSH
5780: CALL_OW 475
5784: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5785: LD_ADDR_VAR 0 11
5789: PUSH
5790: LD_VAR 0 1
5794: PPUSH
5795: CALL_OW 476
5799: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5800: LD_ADDR_VAR 0 12
5804: PUSH
5805: LD_VAR 0 1
5809: PPUSH
5810: CALL_OW 477
5814: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5815: LD_ADDR_VAR 0 10
5819: PUSH
5820: LD_VAR 0 1
5824: PPUSH
5825: CALL_OW 478
5829: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5830: LD_VAR 0 9
5834: NOT
5835: PUSH
5836: LD_VAR 0 11
5840: NOT
5841: OR
5842: PUSH
5843: LD_VAR 0 12
5847: NOT
5848: OR
5849: PUSH
5850: LD_VAR 0 10
5854: NOT
5855: OR
5856: IFFALSE 5891
// begin result := [ chassis , engine , control , weapon ] ;
5858: LD_ADDR_VAR 0 6
5862: PUSH
5863: LD_VAR 0 2
5867: PUSH
5868: LD_VAR 0 3
5872: PUSH
5873: LD_VAR 0 4
5877: PUSH
5878: LD_VAR 0 5
5882: PUSH
5883: EMPTY
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: ST_TO_ADDR
// exit ;
5889: GO 6182
// end ; if not chassis in _chassis then
5891: LD_VAR 0 2
5895: PUSH
5896: LD_VAR 0 9
5900: IN
5901: NOT
5902: IFFALSE 5928
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5904: LD_ADDR_VAR 0 2
5908: PUSH
5909: LD_VAR 0 9
5913: PUSH
5914: LD_INT 1
5916: PPUSH
5917: LD_VAR 0 9
5921: PPUSH
5922: CALL_OW 12
5926: ARRAY
5927: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5928: LD_VAR 0 2
5932: PPUSH
5933: LD_VAR 0 3
5937: PPUSH
5938: CALL 6187 0 2
5942: NOT
5943: IFFALSE 6002
// repeat engine := _engine [ 1 ] ;
5945: LD_ADDR_VAR 0 3
5949: PUSH
5950: LD_VAR 0 11
5954: PUSH
5955: LD_INT 1
5957: ARRAY
5958: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5959: LD_ADDR_VAR 0 11
5963: PUSH
5964: LD_VAR 0 11
5968: PPUSH
5969: LD_INT 1
5971: PPUSH
5972: CALL_OW 3
5976: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5977: LD_VAR 0 2
5981: PPUSH
5982: LD_VAR 0 3
5986: PPUSH
5987: CALL 6187 0 2
5991: PUSH
5992: LD_VAR 0 11
5996: PUSH
5997: EMPTY
5998: EQUAL
5999: OR
6000: IFFALSE 5945
// if not control in _control then
6002: LD_VAR 0 4
6006: PUSH
6007: LD_VAR 0 12
6011: IN
6012: NOT
6013: IFFALSE 6039
// control := _control [ rand ( 1 , _control ) ] ;
6015: LD_ADDR_VAR 0 4
6019: PUSH
6020: LD_VAR 0 12
6024: PUSH
6025: LD_INT 1
6027: PPUSH
6028: LD_VAR 0 12
6032: PPUSH
6033: CALL_OW 12
6037: ARRAY
6038: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6039: LD_VAR 0 2
6043: PPUSH
6044: LD_VAR 0 5
6048: PPUSH
6049: CALL 6407 0 2
6053: NOT
6054: IFFALSE 6113
// repeat weapon := _weapon [ 1 ] ;
6056: LD_ADDR_VAR 0 5
6060: PUSH
6061: LD_VAR 0 10
6065: PUSH
6066: LD_INT 1
6068: ARRAY
6069: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6070: LD_ADDR_VAR 0 10
6074: PUSH
6075: LD_VAR 0 10
6079: PPUSH
6080: LD_INT 1
6082: PPUSH
6083: CALL_OW 3
6087: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6088: LD_VAR 0 2
6092: PPUSH
6093: LD_VAR 0 5
6097: PPUSH
6098: CALL 6407 0 2
6102: PUSH
6103: LD_VAR 0 10
6107: PUSH
6108: EMPTY
6109: EQUAL
6110: OR
6111: IFFALSE 6056
// result := [ ] ;
6113: LD_ADDR_VAR 0 6
6117: PUSH
6118: EMPTY
6119: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6120: LD_VAR 0 1
6124: PPUSH
6125: LD_VAR 0 2
6129: PPUSH
6130: LD_VAR 0 3
6134: PPUSH
6135: LD_VAR 0 4
6139: PPUSH
6140: LD_VAR 0 5
6144: PPUSH
6145: CALL_OW 448
6149: IFFALSE 6182
// result := [ chassis , engine , control , weapon ] ;
6151: LD_ADDR_VAR 0 6
6155: PUSH
6156: LD_VAR 0 2
6160: PUSH
6161: LD_VAR 0 3
6165: PUSH
6166: LD_VAR 0 4
6170: PUSH
6171: LD_VAR 0 5
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: ST_TO_ADDR
// end ;
6182: LD_VAR 0 6
6186: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6187: LD_INT 0
6189: PPUSH
// if not chassis or not engine then
6190: LD_VAR 0 1
6194: NOT
6195: PUSH
6196: LD_VAR 0 2
6200: NOT
6201: OR
6202: IFFALSE 6206
// exit ;
6204: GO 6402
// case engine of engine_solar :
6206: LD_VAR 0 2
6210: PUSH
6211: LD_INT 2
6213: DOUBLE
6214: EQUAL
6215: IFTRUE 6219
6217: GO 6257
6219: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6220: LD_ADDR_VAR 0 3
6224: PUSH
6225: LD_INT 11
6227: PUSH
6228: LD_INT 12
6230: PUSH
6231: LD_INT 13
6233: PUSH
6234: LD_INT 14
6236: PUSH
6237: LD_INT 1
6239: PUSH
6240: LD_INT 2
6242: PUSH
6243: LD_INT 3
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: ST_TO_ADDR
6255: GO 6386
6257: LD_INT 1
6259: DOUBLE
6260: EQUAL
6261: IFTRUE 6265
6263: GO 6327
6265: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6266: LD_ADDR_VAR 0 3
6270: PUSH
6271: LD_INT 11
6273: PUSH
6274: LD_INT 12
6276: PUSH
6277: LD_INT 13
6279: PUSH
6280: LD_INT 14
6282: PUSH
6283: LD_INT 1
6285: PUSH
6286: LD_INT 2
6288: PUSH
6289: LD_INT 3
6291: PUSH
6292: LD_INT 4
6294: PUSH
6295: LD_INT 5
6297: PUSH
6298: LD_INT 21
6300: PUSH
6301: LD_INT 23
6303: PUSH
6304: LD_INT 22
6306: PUSH
6307: LD_INT 24
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: ST_TO_ADDR
6325: GO 6386
6327: LD_INT 3
6329: DOUBLE
6330: EQUAL
6331: IFTRUE 6335
6333: GO 6385
6335: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6336: LD_ADDR_VAR 0 3
6340: PUSH
6341: LD_INT 13
6343: PUSH
6344: LD_INT 14
6346: PUSH
6347: LD_INT 2
6349: PUSH
6350: LD_INT 3
6352: PUSH
6353: LD_INT 4
6355: PUSH
6356: LD_INT 5
6358: PUSH
6359: LD_INT 21
6361: PUSH
6362: LD_INT 22
6364: PUSH
6365: LD_INT 23
6367: PUSH
6368: LD_INT 24
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: ST_TO_ADDR
6383: GO 6386
6385: POP
// result := ( chassis in result ) ;
6386: LD_ADDR_VAR 0 3
6390: PUSH
6391: LD_VAR 0 1
6395: PUSH
6396: LD_VAR 0 3
6400: IN
6401: ST_TO_ADDR
// end ;
6402: LD_VAR 0 3
6406: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6407: LD_INT 0
6409: PPUSH
// if not chassis or not weapon then
6410: LD_VAR 0 1
6414: NOT
6415: PUSH
6416: LD_VAR 0 2
6420: NOT
6421: OR
6422: IFFALSE 6426
// exit ;
6424: GO 7488
// case weapon of us_machine_gun :
6426: LD_VAR 0 2
6430: PUSH
6431: LD_INT 2
6433: DOUBLE
6434: EQUAL
6435: IFTRUE 6439
6437: GO 6469
6439: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6440: LD_ADDR_VAR 0 3
6444: PUSH
6445: LD_INT 1
6447: PUSH
6448: LD_INT 2
6450: PUSH
6451: LD_INT 3
6453: PUSH
6454: LD_INT 4
6456: PUSH
6457: LD_INT 5
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: ST_TO_ADDR
6467: GO 7472
6469: LD_INT 3
6471: DOUBLE
6472: EQUAL
6473: IFTRUE 6477
6475: GO 6507
6477: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6478: LD_ADDR_VAR 0 3
6482: PUSH
6483: LD_INT 1
6485: PUSH
6486: LD_INT 2
6488: PUSH
6489: LD_INT 3
6491: PUSH
6492: LD_INT 4
6494: PUSH
6495: LD_INT 5
6497: PUSH
6498: EMPTY
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: ST_TO_ADDR
6505: GO 7472
6507: LD_INT 11
6509: DOUBLE
6510: EQUAL
6511: IFTRUE 6515
6513: GO 6545
6515: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6516: LD_ADDR_VAR 0 3
6520: PUSH
6521: LD_INT 1
6523: PUSH
6524: LD_INT 2
6526: PUSH
6527: LD_INT 3
6529: PUSH
6530: LD_INT 4
6532: PUSH
6533: LD_INT 5
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: ST_TO_ADDR
6543: GO 7472
6545: LD_INT 4
6547: DOUBLE
6548: EQUAL
6549: IFTRUE 6553
6551: GO 6579
6553: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6554: LD_ADDR_VAR 0 3
6558: PUSH
6559: LD_INT 2
6561: PUSH
6562: LD_INT 3
6564: PUSH
6565: LD_INT 4
6567: PUSH
6568: LD_INT 5
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: ST_TO_ADDR
6577: GO 7472
6579: LD_INT 5
6581: DOUBLE
6582: EQUAL
6583: IFTRUE 6587
6585: GO 6613
6587: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6588: LD_ADDR_VAR 0 3
6592: PUSH
6593: LD_INT 2
6595: PUSH
6596: LD_INT 3
6598: PUSH
6599: LD_INT 4
6601: PUSH
6602: LD_INT 5
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: ST_TO_ADDR
6611: GO 7472
6613: LD_INT 9
6615: DOUBLE
6616: EQUAL
6617: IFTRUE 6621
6619: GO 6647
6621: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6622: LD_ADDR_VAR 0 3
6626: PUSH
6627: LD_INT 2
6629: PUSH
6630: LD_INT 3
6632: PUSH
6633: LD_INT 4
6635: PUSH
6636: LD_INT 5
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: ST_TO_ADDR
6645: GO 7472
6647: LD_INT 7
6649: DOUBLE
6650: EQUAL
6651: IFTRUE 6655
6653: GO 6681
6655: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6656: LD_ADDR_VAR 0 3
6660: PUSH
6661: LD_INT 2
6663: PUSH
6664: LD_INT 3
6666: PUSH
6667: LD_INT 4
6669: PUSH
6670: LD_INT 5
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: ST_TO_ADDR
6679: GO 7472
6681: LD_INT 12
6683: DOUBLE
6684: EQUAL
6685: IFTRUE 6689
6687: GO 6715
6689: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6690: LD_ADDR_VAR 0 3
6694: PUSH
6695: LD_INT 2
6697: PUSH
6698: LD_INT 3
6700: PUSH
6701: LD_INT 4
6703: PUSH
6704: LD_INT 5
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: ST_TO_ADDR
6713: GO 7472
6715: LD_INT 13
6717: DOUBLE
6718: EQUAL
6719: IFTRUE 6723
6721: GO 6749
6723: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6724: LD_ADDR_VAR 0 3
6728: PUSH
6729: LD_INT 2
6731: PUSH
6732: LD_INT 3
6734: PUSH
6735: LD_INT 4
6737: PUSH
6738: LD_INT 5
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: ST_TO_ADDR
6747: GO 7472
6749: LD_INT 14
6751: DOUBLE
6752: EQUAL
6753: IFTRUE 6757
6755: GO 6775
6757: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6758: LD_ADDR_VAR 0 3
6762: PUSH
6763: LD_INT 4
6765: PUSH
6766: LD_INT 5
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: ST_TO_ADDR
6773: GO 7472
6775: LD_INT 6
6777: DOUBLE
6778: EQUAL
6779: IFTRUE 6783
6781: GO 6801
6783: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6784: LD_ADDR_VAR 0 3
6788: PUSH
6789: LD_INT 4
6791: PUSH
6792: LD_INT 5
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: ST_TO_ADDR
6799: GO 7472
6801: LD_INT 10
6803: DOUBLE
6804: EQUAL
6805: IFTRUE 6809
6807: GO 6827
6809: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6810: LD_ADDR_VAR 0 3
6814: PUSH
6815: LD_INT 4
6817: PUSH
6818: LD_INT 5
6820: PUSH
6821: EMPTY
6822: LIST
6823: LIST
6824: ST_TO_ADDR
6825: GO 7472
6827: LD_INT 22
6829: DOUBLE
6830: EQUAL
6831: IFTRUE 6835
6833: GO 6861
6835: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6836: LD_ADDR_VAR 0 3
6840: PUSH
6841: LD_INT 11
6843: PUSH
6844: LD_INT 12
6846: PUSH
6847: LD_INT 13
6849: PUSH
6850: LD_INT 14
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: ST_TO_ADDR
6859: GO 7472
6861: LD_INT 23
6863: DOUBLE
6864: EQUAL
6865: IFTRUE 6869
6867: GO 6895
6869: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6870: LD_ADDR_VAR 0 3
6874: PUSH
6875: LD_INT 11
6877: PUSH
6878: LD_INT 12
6880: PUSH
6881: LD_INT 13
6883: PUSH
6884: LD_INT 14
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: ST_TO_ADDR
6893: GO 7472
6895: LD_INT 24
6897: DOUBLE
6898: EQUAL
6899: IFTRUE 6903
6901: GO 6929
6903: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6904: LD_ADDR_VAR 0 3
6908: PUSH
6909: LD_INT 11
6911: PUSH
6912: LD_INT 12
6914: PUSH
6915: LD_INT 13
6917: PUSH
6918: LD_INT 14
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: ST_TO_ADDR
6927: GO 7472
6929: LD_INT 30
6931: DOUBLE
6932: EQUAL
6933: IFTRUE 6937
6935: GO 6963
6937: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6938: LD_ADDR_VAR 0 3
6942: PUSH
6943: LD_INT 11
6945: PUSH
6946: LD_INT 12
6948: PUSH
6949: LD_INT 13
6951: PUSH
6952: LD_INT 14
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: ST_TO_ADDR
6961: GO 7472
6963: LD_INT 25
6965: DOUBLE
6966: EQUAL
6967: IFTRUE 6971
6969: GO 6989
6971: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6972: LD_ADDR_VAR 0 3
6976: PUSH
6977: LD_INT 13
6979: PUSH
6980: LD_INT 14
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: ST_TO_ADDR
6987: GO 7472
6989: LD_INT 27
6991: DOUBLE
6992: EQUAL
6993: IFTRUE 6997
6995: GO 7015
6997: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6998: LD_ADDR_VAR 0 3
7002: PUSH
7003: LD_INT 13
7005: PUSH
7006: LD_INT 14
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: ST_TO_ADDR
7013: GO 7472
7015: LD_EXP 14
7019: DOUBLE
7020: EQUAL
7021: IFTRUE 7025
7023: GO 7051
7025: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7026: LD_ADDR_VAR 0 3
7030: PUSH
7031: LD_INT 11
7033: PUSH
7034: LD_INT 12
7036: PUSH
7037: LD_INT 13
7039: PUSH
7040: LD_INT 14
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: ST_TO_ADDR
7049: GO 7472
7051: LD_INT 28
7053: DOUBLE
7054: EQUAL
7055: IFTRUE 7059
7057: GO 7077
7059: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7060: LD_ADDR_VAR 0 3
7064: PUSH
7065: LD_INT 13
7067: PUSH
7068: LD_INT 14
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: ST_TO_ADDR
7075: GO 7472
7077: LD_INT 29
7079: DOUBLE
7080: EQUAL
7081: IFTRUE 7085
7083: GO 7103
7085: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7086: LD_ADDR_VAR 0 3
7090: PUSH
7091: LD_INT 13
7093: PUSH
7094: LD_INT 14
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: ST_TO_ADDR
7101: GO 7472
7103: LD_INT 31
7105: DOUBLE
7106: EQUAL
7107: IFTRUE 7111
7109: GO 7129
7111: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7112: LD_ADDR_VAR 0 3
7116: PUSH
7117: LD_INT 13
7119: PUSH
7120: LD_INT 14
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: ST_TO_ADDR
7127: GO 7472
7129: LD_INT 26
7131: DOUBLE
7132: EQUAL
7133: IFTRUE 7137
7135: GO 7155
7137: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7138: LD_ADDR_VAR 0 3
7142: PUSH
7143: LD_INT 13
7145: PUSH
7146: LD_INT 14
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: ST_TO_ADDR
7153: GO 7472
7155: LD_INT 42
7157: DOUBLE
7158: EQUAL
7159: IFTRUE 7163
7161: GO 7189
7163: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7164: LD_ADDR_VAR 0 3
7168: PUSH
7169: LD_INT 21
7171: PUSH
7172: LD_INT 22
7174: PUSH
7175: LD_INT 23
7177: PUSH
7178: LD_INT 24
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: ST_TO_ADDR
7187: GO 7472
7189: LD_INT 43
7191: DOUBLE
7192: EQUAL
7193: IFTRUE 7197
7195: GO 7223
7197: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7198: LD_ADDR_VAR 0 3
7202: PUSH
7203: LD_INT 21
7205: PUSH
7206: LD_INT 22
7208: PUSH
7209: LD_INT 23
7211: PUSH
7212: LD_INT 24
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: ST_TO_ADDR
7221: GO 7472
7223: LD_INT 44
7225: DOUBLE
7226: EQUAL
7227: IFTRUE 7231
7229: GO 7257
7231: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7232: LD_ADDR_VAR 0 3
7236: PUSH
7237: LD_INT 21
7239: PUSH
7240: LD_INT 22
7242: PUSH
7243: LD_INT 23
7245: PUSH
7246: LD_INT 24
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: ST_TO_ADDR
7255: GO 7472
7257: LD_INT 45
7259: DOUBLE
7260: EQUAL
7261: IFTRUE 7265
7263: GO 7291
7265: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7266: LD_ADDR_VAR 0 3
7270: PUSH
7271: LD_INT 21
7273: PUSH
7274: LD_INT 22
7276: PUSH
7277: LD_INT 23
7279: PUSH
7280: LD_INT 24
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: ST_TO_ADDR
7289: GO 7472
7291: LD_INT 49
7293: DOUBLE
7294: EQUAL
7295: IFTRUE 7299
7297: GO 7325
7299: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7300: LD_ADDR_VAR 0 3
7304: PUSH
7305: LD_INT 21
7307: PUSH
7308: LD_INT 22
7310: PUSH
7311: LD_INT 23
7313: PUSH
7314: LD_INT 24
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: ST_TO_ADDR
7323: GO 7472
7325: LD_INT 51
7327: DOUBLE
7328: EQUAL
7329: IFTRUE 7333
7331: GO 7359
7333: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7334: LD_ADDR_VAR 0 3
7338: PUSH
7339: LD_INT 21
7341: PUSH
7342: LD_INT 22
7344: PUSH
7345: LD_INT 23
7347: PUSH
7348: LD_INT 24
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: ST_TO_ADDR
7357: GO 7472
7359: LD_INT 52
7361: DOUBLE
7362: EQUAL
7363: IFTRUE 7367
7365: GO 7393
7367: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7368: LD_ADDR_VAR 0 3
7372: PUSH
7373: LD_INT 21
7375: PUSH
7376: LD_INT 22
7378: PUSH
7379: LD_INT 23
7381: PUSH
7382: LD_INT 24
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: ST_TO_ADDR
7391: GO 7472
7393: LD_INT 53
7395: DOUBLE
7396: EQUAL
7397: IFTRUE 7401
7399: GO 7419
7401: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7402: LD_ADDR_VAR 0 3
7406: PUSH
7407: LD_INT 23
7409: PUSH
7410: LD_INT 24
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: ST_TO_ADDR
7417: GO 7472
7419: LD_INT 46
7421: DOUBLE
7422: EQUAL
7423: IFTRUE 7427
7425: GO 7445
7427: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7428: LD_ADDR_VAR 0 3
7432: PUSH
7433: LD_INT 23
7435: PUSH
7436: LD_INT 24
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: ST_TO_ADDR
7443: GO 7472
7445: LD_INT 47
7447: DOUBLE
7448: EQUAL
7449: IFTRUE 7453
7451: GO 7471
7453: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7454: LD_ADDR_VAR 0 3
7458: PUSH
7459: LD_INT 23
7461: PUSH
7462: LD_INT 24
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: ST_TO_ADDR
7469: GO 7472
7471: POP
// result := ( chassis in result ) ;
7472: LD_ADDR_VAR 0 3
7476: PUSH
7477: LD_VAR 0 1
7481: PUSH
7482: LD_VAR 0 3
7486: IN
7487: ST_TO_ADDR
// end ;
7488: LD_VAR 0 3
7492: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7493: LD_INT 0
7495: PPUSH
7496: PPUSH
7497: PPUSH
7498: PPUSH
7499: PPUSH
7500: PPUSH
7501: PPUSH
// result := array ;
7502: LD_ADDR_VAR 0 5
7506: PUSH
7507: LD_VAR 0 1
7511: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7512: LD_VAR 0 1
7516: NOT
7517: PUSH
7518: LD_VAR 0 2
7522: NOT
7523: OR
7524: PUSH
7525: LD_VAR 0 3
7529: NOT
7530: OR
7531: PUSH
7532: LD_VAR 0 2
7536: PUSH
7537: LD_VAR 0 1
7541: GREATER
7542: OR
7543: PUSH
7544: LD_VAR 0 3
7548: PUSH
7549: LD_VAR 0 1
7553: GREATER
7554: OR
7555: IFFALSE 7559
// exit ;
7557: GO 7855
// if direction then
7559: LD_VAR 0 4
7563: IFFALSE 7627
// begin d := 1 ;
7565: LD_ADDR_VAR 0 9
7569: PUSH
7570: LD_INT 1
7572: ST_TO_ADDR
// if i_from > i_to then
7573: LD_VAR 0 2
7577: PUSH
7578: LD_VAR 0 3
7582: GREATER
7583: IFFALSE 7609
// length := ( array - i_from ) + i_to else
7585: LD_ADDR_VAR 0 11
7589: PUSH
7590: LD_VAR 0 1
7594: PUSH
7595: LD_VAR 0 2
7599: MINUS
7600: PUSH
7601: LD_VAR 0 3
7605: PLUS
7606: ST_TO_ADDR
7607: GO 7625
// length := i_to - i_from ;
7609: LD_ADDR_VAR 0 11
7613: PUSH
7614: LD_VAR 0 3
7618: PUSH
7619: LD_VAR 0 2
7623: MINUS
7624: ST_TO_ADDR
// end else
7625: GO 7688
// begin d := - 1 ;
7627: LD_ADDR_VAR 0 9
7631: PUSH
7632: LD_INT 1
7634: NEG
7635: ST_TO_ADDR
// if i_from > i_to then
7636: LD_VAR 0 2
7640: PUSH
7641: LD_VAR 0 3
7645: GREATER
7646: IFFALSE 7666
// length := i_from - i_to else
7648: LD_ADDR_VAR 0 11
7652: PUSH
7653: LD_VAR 0 2
7657: PUSH
7658: LD_VAR 0 3
7662: MINUS
7663: ST_TO_ADDR
7664: GO 7688
// length := ( array - i_to ) + i_from ;
7666: LD_ADDR_VAR 0 11
7670: PUSH
7671: LD_VAR 0 1
7675: PUSH
7676: LD_VAR 0 3
7680: MINUS
7681: PUSH
7682: LD_VAR 0 2
7686: PLUS
7687: ST_TO_ADDR
// end ; if not length then
7688: LD_VAR 0 11
7692: NOT
7693: IFFALSE 7697
// exit ;
7695: GO 7855
// tmp := array ;
7697: LD_ADDR_VAR 0 10
7701: PUSH
7702: LD_VAR 0 1
7706: ST_TO_ADDR
// for i = 1 to length do
7707: LD_ADDR_VAR 0 6
7711: PUSH
7712: DOUBLE
7713: LD_INT 1
7715: DEC
7716: ST_TO_ADDR
7717: LD_VAR 0 11
7721: PUSH
7722: FOR_TO
7723: IFFALSE 7843
// begin for j = 1 to array do
7725: LD_ADDR_VAR 0 7
7729: PUSH
7730: DOUBLE
7731: LD_INT 1
7733: DEC
7734: ST_TO_ADDR
7735: LD_VAR 0 1
7739: PUSH
7740: FOR_TO
7741: IFFALSE 7829
// begin k := j + d ;
7743: LD_ADDR_VAR 0 8
7747: PUSH
7748: LD_VAR 0 7
7752: PUSH
7753: LD_VAR 0 9
7757: PLUS
7758: ST_TO_ADDR
// if k > array then
7759: LD_VAR 0 8
7763: PUSH
7764: LD_VAR 0 1
7768: GREATER
7769: IFFALSE 7779
// k := 1 ;
7771: LD_ADDR_VAR 0 8
7775: PUSH
7776: LD_INT 1
7778: ST_TO_ADDR
// if not k then
7779: LD_VAR 0 8
7783: NOT
7784: IFFALSE 7796
// k := array ;
7786: LD_ADDR_VAR 0 8
7790: PUSH
7791: LD_VAR 0 1
7795: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7796: LD_ADDR_VAR 0 10
7800: PUSH
7801: LD_VAR 0 10
7805: PPUSH
7806: LD_VAR 0 8
7810: PPUSH
7811: LD_VAR 0 1
7815: PUSH
7816: LD_VAR 0 7
7820: ARRAY
7821: PPUSH
7822: CALL_OW 1
7826: ST_TO_ADDR
// end ;
7827: GO 7740
7829: POP
7830: POP
// array := tmp ;
7831: LD_ADDR_VAR 0 1
7835: PUSH
7836: LD_VAR 0 10
7840: ST_TO_ADDR
// end ;
7841: GO 7722
7843: POP
7844: POP
// result := array ;
7845: LD_ADDR_VAR 0 5
7849: PUSH
7850: LD_VAR 0 1
7854: ST_TO_ADDR
// end ;
7855: LD_VAR 0 5
7859: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7860: LD_INT 0
7862: PPUSH
7863: PPUSH
// result := 0 ;
7864: LD_ADDR_VAR 0 3
7868: PUSH
7869: LD_INT 0
7871: ST_TO_ADDR
// if not array or not value in array then
7872: LD_VAR 0 1
7876: NOT
7877: PUSH
7878: LD_VAR 0 2
7882: PUSH
7883: LD_VAR 0 1
7887: IN
7888: NOT
7889: OR
7890: IFFALSE 7894
// exit ;
7892: GO 7948
// for i = 1 to array do
7894: LD_ADDR_VAR 0 4
7898: PUSH
7899: DOUBLE
7900: LD_INT 1
7902: DEC
7903: ST_TO_ADDR
7904: LD_VAR 0 1
7908: PUSH
7909: FOR_TO
7910: IFFALSE 7946
// if value = array [ i ] then
7912: LD_VAR 0 2
7916: PUSH
7917: LD_VAR 0 1
7921: PUSH
7922: LD_VAR 0 4
7926: ARRAY
7927: EQUAL
7928: IFFALSE 7944
// begin result := i ;
7930: LD_ADDR_VAR 0 3
7934: PUSH
7935: LD_VAR 0 4
7939: ST_TO_ADDR
// exit ;
7940: POP
7941: POP
7942: GO 7948
// end ;
7944: GO 7909
7946: POP
7947: POP
// end ;
7948: LD_VAR 0 3
7952: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7953: LD_INT 0
7955: PPUSH
// vc_chassis := chassis ;
7956: LD_ADDR_OWVAR 37
7960: PUSH
7961: LD_VAR 0 1
7965: ST_TO_ADDR
// vc_engine := engine ;
7966: LD_ADDR_OWVAR 39
7970: PUSH
7971: LD_VAR 0 2
7975: ST_TO_ADDR
// vc_control := control ;
7976: LD_ADDR_OWVAR 38
7980: PUSH
7981: LD_VAR 0 3
7985: ST_TO_ADDR
// vc_weapon := weapon ;
7986: LD_ADDR_OWVAR 40
7990: PUSH
7991: LD_VAR 0 4
7995: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7996: LD_ADDR_OWVAR 41
8000: PUSH
8001: LD_VAR 0 5
8005: ST_TO_ADDR
// end ;
8006: LD_VAR 0 6
8010: RET
// export function WantPlant ( unit ) ; var task ; begin
8011: LD_INT 0
8013: PPUSH
8014: PPUSH
// result := false ;
8015: LD_ADDR_VAR 0 2
8019: PUSH
8020: LD_INT 0
8022: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8023: LD_ADDR_VAR 0 3
8027: PUSH
8028: LD_VAR 0 1
8032: PPUSH
8033: CALL_OW 437
8037: ST_TO_ADDR
// if task then
8038: LD_VAR 0 3
8042: IFFALSE 8070
// if task [ 1 ] [ 1 ] = p then
8044: LD_VAR 0 3
8048: PUSH
8049: LD_INT 1
8051: ARRAY
8052: PUSH
8053: LD_INT 1
8055: ARRAY
8056: PUSH
8057: LD_STRING p
8059: EQUAL
8060: IFFALSE 8070
// result := true ;
8062: LD_ADDR_VAR 0 2
8066: PUSH
8067: LD_INT 1
8069: ST_TO_ADDR
// end ;
8070: LD_VAR 0 2
8074: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8075: LD_INT 0
8077: PPUSH
8078: PPUSH
8079: PPUSH
8080: PPUSH
// if pos < 1 then
8081: LD_VAR 0 2
8085: PUSH
8086: LD_INT 1
8088: LESS
8089: IFFALSE 8093
// exit ;
8091: GO 8396
// if pos = 1 then
8093: LD_VAR 0 2
8097: PUSH
8098: LD_INT 1
8100: EQUAL
8101: IFFALSE 8134
// result := Replace ( arr , pos [ 1 ] , value ) else
8103: LD_ADDR_VAR 0 4
8107: PUSH
8108: LD_VAR 0 1
8112: PPUSH
8113: LD_VAR 0 2
8117: PUSH
8118: LD_INT 1
8120: ARRAY
8121: PPUSH
8122: LD_VAR 0 3
8126: PPUSH
8127: CALL_OW 1
8131: ST_TO_ADDR
8132: GO 8396
// begin tmp := arr ;
8134: LD_ADDR_VAR 0 6
8138: PUSH
8139: LD_VAR 0 1
8143: ST_TO_ADDR
// s_arr := [ tmp ] ;
8144: LD_ADDR_VAR 0 7
8148: PUSH
8149: LD_VAR 0 6
8153: PUSH
8154: EMPTY
8155: LIST
8156: ST_TO_ADDR
// for i = 1 to pos - 1 do
8157: LD_ADDR_VAR 0 5
8161: PUSH
8162: DOUBLE
8163: LD_INT 1
8165: DEC
8166: ST_TO_ADDR
8167: LD_VAR 0 2
8171: PUSH
8172: LD_INT 1
8174: MINUS
8175: PUSH
8176: FOR_TO
8177: IFFALSE 8222
// begin tmp := tmp [ pos [ i ] ] ;
8179: LD_ADDR_VAR 0 6
8183: PUSH
8184: LD_VAR 0 6
8188: PUSH
8189: LD_VAR 0 2
8193: PUSH
8194: LD_VAR 0 5
8198: ARRAY
8199: ARRAY
8200: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8201: LD_ADDR_VAR 0 7
8205: PUSH
8206: LD_VAR 0 7
8210: PUSH
8211: LD_VAR 0 6
8215: PUSH
8216: EMPTY
8217: LIST
8218: ADD
8219: ST_TO_ADDR
// end ;
8220: GO 8176
8222: POP
8223: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8224: LD_ADDR_VAR 0 6
8228: PUSH
8229: LD_VAR 0 6
8233: PPUSH
8234: LD_VAR 0 2
8238: PUSH
8239: LD_VAR 0 2
8243: ARRAY
8244: PPUSH
8245: LD_VAR 0 3
8249: PPUSH
8250: CALL_OW 1
8254: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8255: LD_ADDR_VAR 0 7
8259: PUSH
8260: LD_VAR 0 7
8264: PPUSH
8265: LD_VAR 0 7
8269: PPUSH
8270: LD_VAR 0 6
8274: PPUSH
8275: CALL_OW 1
8279: ST_TO_ADDR
// for i = s_arr downto 2 do
8280: LD_ADDR_VAR 0 5
8284: PUSH
8285: DOUBLE
8286: LD_VAR 0 7
8290: INC
8291: ST_TO_ADDR
8292: LD_INT 2
8294: PUSH
8295: FOR_DOWNTO
8296: IFFALSE 8380
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8298: LD_ADDR_VAR 0 6
8302: PUSH
8303: LD_VAR 0 7
8307: PUSH
8308: LD_VAR 0 5
8312: PUSH
8313: LD_INT 1
8315: MINUS
8316: ARRAY
8317: PPUSH
8318: LD_VAR 0 2
8322: PUSH
8323: LD_VAR 0 5
8327: PUSH
8328: LD_INT 1
8330: MINUS
8331: ARRAY
8332: PPUSH
8333: LD_VAR 0 7
8337: PUSH
8338: LD_VAR 0 5
8342: ARRAY
8343: PPUSH
8344: CALL_OW 1
8348: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8349: LD_ADDR_VAR 0 7
8353: PUSH
8354: LD_VAR 0 7
8358: PPUSH
8359: LD_VAR 0 5
8363: PUSH
8364: LD_INT 1
8366: MINUS
8367: PPUSH
8368: LD_VAR 0 6
8372: PPUSH
8373: CALL_OW 1
8377: ST_TO_ADDR
// end ;
8378: GO 8295
8380: POP
8381: POP
// result := s_arr [ 1 ] ;
8382: LD_ADDR_VAR 0 4
8386: PUSH
8387: LD_VAR 0 7
8391: PUSH
8392: LD_INT 1
8394: ARRAY
8395: ST_TO_ADDR
// end ; end ;
8396: LD_VAR 0 4
8400: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8401: LD_INT 0
8403: PPUSH
8404: PPUSH
// if not list then
8405: LD_VAR 0 1
8409: NOT
8410: IFFALSE 8414
// exit ;
8412: GO 8505
// i := list [ pos1 ] ;
8414: LD_ADDR_VAR 0 5
8418: PUSH
8419: LD_VAR 0 1
8423: PUSH
8424: LD_VAR 0 2
8428: ARRAY
8429: ST_TO_ADDR
// if not i then
8430: LD_VAR 0 5
8434: NOT
8435: IFFALSE 8439
// exit ;
8437: GO 8505
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8439: LD_ADDR_VAR 0 1
8443: PUSH
8444: LD_VAR 0 1
8448: PPUSH
8449: LD_VAR 0 2
8453: PPUSH
8454: LD_VAR 0 1
8458: PUSH
8459: LD_VAR 0 3
8463: ARRAY
8464: PPUSH
8465: CALL_OW 1
8469: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8470: LD_ADDR_VAR 0 1
8474: PUSH
8475: LD_VAR 0 1
8479: PPUSH
8480: LD_VAR 0 3
8484: PPUSH
8485: LD_VAR 0 5
8489: PPUSH
8490: CALL_OW 1
8494: ST_TO_ADDR
// result := list ;
8495: LD_ADDR_VAR 0 4
8499: PUSH
8500: LD_VAR 0 1
8504: ST_TO_ADDR
// end ;
8505: LD_VAR 0 4
8509: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8510: LD_INT 0
8512: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8513: LD_ADDR_VAR 0 5
8517: PUSH
8518: LD_VAR 0 1
8522: PPUSH
8523: CALL_OW 250
8527: PPUSH
8528: LD_VAR 0 1
8532: PPUSH
8533: CALL_OW 251
8537: PPUSH
8538: LD_VAR 0 2
8542: PPUSH
8543: LD_VAR 0 3
8547: PPUSH
8548: LD_VAR 0 4
8552: PPUSH
8553: CALL 8563 0 5
8557: ST_TO_ADDR
// end ;
8558: LD_VAR 0 5
8562: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8563: LD_INT 0
8565: PPUSH
8566: PPUSH
8567: PPUSH
8568: PPUSH
// if not list then
8569: LD_VAR 0 3
8573: NOT
8574: IFFALSE 8578
// exit ;
8576: GO 8966
// result := [ ] ;
8578: LD_ADDR_VAR 0 6
8582: PUSH
8583: EMPTY
8584: ST_TO_ADDR
// for i in list do
8585: LD_ADDR_VAR 0 7
8589: PUSH
8590: LD_VAR 0 3
8594: PUSH
8595: FOR_IN
8596: IFFALSE 8798
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8598: LD_ADDR_VAR 0 9
8602: PUSH
8603: LD_VAR 0 7
8607: PPUSH
8608: LD_VAR 0 1
8612: PPUSH
8613: LD_VAR 0 2
8617: PPUSH
8618: CALL_OW 297
8622: ST_TO_ADDR
// if not result then
8623: LD_VAR 0 6
8627: NOT
8628: IFFALSE 8654
// result := [ [ i , tmp ] ] else
8630: LD_ADDR_VAR 0 6
8634: PUSH
8635: LD_VAR 0 7
8639: PUSH
8640: LD_VAR 0 9
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: PUSH
8649: EMPTY
8650: LIST
8651: ST_TO_ADDR
8652: GO 8796
// begin if result [ result ] [ 2 ] < tmp then
8654: LD_VAR 0 6
8658: PUSH
8659: LD_VAR 0 6
8663: ARRAY
8664: PUSH
8665: LD_INT 2
8667: ARRAY
8668: PUSH
8669: LD_VAR 0 9
8673: LESS
8674: IFFALSE 8716
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8676: LD_ADDR_VAR 0 6
8680: PUSH
8681: LD_VAR 0 6
8685: PPUSH
8686: LD_VAR 0 6
8690: PUSH
8691: LD_INT 1
8693: PLUS
8694: PPUSH
8695: LD_VAR 0 7
8699: PUSH
8700: LD_VAR 0 9
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: PPUSH
8709: CALL_OW 2
8713: ST_TO_ADDR
8714: GO 8796
// for j = 1 to result do
8716: LD_ADDR_VAR 0 8
8720: PUSH
8721: DOUBLE
8722: LD_INT 1
8724: DEC
8725: ST_TO_ADDR
8726: LD_VAR 0 6
8730: PUSH
8731: FOR_TO
8732: IFFALSE 8794
// begin if tmp < result [ j ] [ 2 ] then
8734: LD_VAR 0 9
8738: PUSH
8739: LD_VAR 0 6
8743: PUSH
8744: LD_VAR 0 8
8748: ARRAY
8749: PUSH
8750: LD_INT 2
8752: ARRAY
8753: LESS
8754: IFFALSE 8792
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8756: LD_ADDR_VAR 0 6
8760: PUSH
8761: LD_VAR 0 6
8765: PPUSH
8766: LD_VAR 0 8
8770: PPUSH
8771: LD_VAR 0 7
8775: PUSH
8776: LD_VAR 0 9
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: PPUSH
8785: CALL_OW 2
8789: ST_TO_ADDR
// break ;
8790: GO 8794
// end ; end ;
8792: GO 8731
8794: POP
8795: POP
// end ; end ;
8796: GO 8595
8798: POP
8799: POP
// if result and not asc then
8800: LD_VAR 0 6
8804: PUSH
8805: LD_VAR 0 4
8809: NOT
8810: AND
8811: IFFALSE 8886
// begin tmp := result ;
8813: LD_ADDR_VAR 0 9
8817: PUSH
8818: LD_VAR 0 6
8822: ST_TO_ADDR
// for i = tmp downto 1 do
8823: LD_ADDR_VAR 0 7
8827: PUSH
8828: DOUBLE
8829: LD_VAR 0 9
8833: INC
8834: ST_TO_ADDR
8835: LD_INT 1
8837: PUSH
8838: FOR_DOWNTO
8839: IFFALSE 8884
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8841: LD_ADDR_VAR 0 6
8845: PUSH
8846: LD_VAR 0 6
8850: PPUSH
8851: LD_VAR 0 9
8855: PUSH
8856: LD_VAR 0 7
8860: MINUS
8861: PUSH
8862: LD_INT 1
8864: PLUS
8865: PPUSH
8866: LD_VAR 0 9
8870: PUSH
8871: LD_VAR 0 7
8875: ARRAY
8876: PPUSH
8877: CALL_OW 1
8881: ST_TO_ADDR
8882: GO 8838
8884: POP
8885: POP
// end ; tmp := [ ] ;
8886: LD_ADDR_VAR 0 9
8890: PUSH
8891: EMPTY
8892: ST_TO_ADDR
// if mode then
8893: LD_VAR 0 5
8897: IFFALSE 8966
// begin for i = 1 to result do
8899: LD_ADDR_VAR 0 7
8903: PUSH
8904: DOUBLE
8905: LD_INT 1
8907: DEC
8908: ST_TO_ADDR
8909: LD_VAR 0 6
8913: PUSH
8914: FOR_TO
8915: IFFALSE 8954
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8917: LD_ADDR_VAR 0 9
8921: PUSH
8922: LD_VAR 0 9
8926: PPUSH
8927: LD_VAR 0 7
8931: PPUSH
8932: LD_VAR 0 6
8936: PUSH
8937: LD_VAR 0 7
8941: ARRAY
8942: PUSH
8943: LD_INT 1
8945: ARRAY
8946: PPUSH
8947: CALL_OW 1
8951: ST_TO_ADDR
8952: GO 8914
8954: POP
8955: POP
// result := tmp ;
8956: LD_ADDR_VAR 0 6
8960: PUSH
8961: LD_VAR 0 9
8965: ST_TO_ADDR
// end ; end ;
8966: LD_VAR 0 6
8970: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8971: LD_INT 0
8973: PPUSH
8974: PPUSH
8975: PPUSH
8976: PPUSH
8977: PPUSH
8978: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8979: LD_ADDR_VAR 0 5
8983: PUSH
8984: LD_INT 0
8986: PUSH
8987: LD_INT 0
8989: PUSH
8990: LD_INT 0
8992: PUSH
8993: EMPTY
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: ST_TO_ADDR
// if not x or not y then
9001: LD_VAR 0 2
9005: NOT
9006: PUSH
9007: LD_VAR 0 3
9011: NOT
9012: OR
9013: IFFALSE 9017
// exit ;
9015: GO 10669
// if not range then
9017: LD_VAR 0 4
9021: NOT
9022: IFFALSE 9032
// range := 10 ;
9024: LD_ADDR_VAR 0 4
9028: PUSH
9029: LD_INT 10
9031: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9032: LD_ADDR_VAR 0 8
9036: PUSH
9037: LD_INT 81
9039: PUSH
9040: LD_VAR 0 1
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 92
9051: PUSH
9052: LD_VAR 0 2
9056: PUSH
9057: LD_VAR 0 3
9061: PUSH
9062: LD_VAR 0 4
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: PUSH
9073: LD_INT 3
9075: PUSH
9076: LD_INT 21
9078: PUSH
9079: LD_INT 3
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: LIST
9094: PPUSH
9095: CALL_OW 69
9099: ST_TO_ADDR
// if not tmp then
9100: LD_VAR 0 8
9104: NOT
9105: IFFALSE 9109
// exit ;
9107: GO 10669
// for i in tmp do
9109: LD_ADDR_VAR 0 6
9113: PUSH
9114: LD_VAR 0 8
9118: PUSH
9119: FOR_IN
9120: IFFALSE 10644
// begin points := [ 0 , 0 , 0 ] ;
9122: LD_ADDR_VAR 0 9
9126: PUSH
9127: LD_INT 0
9129: PUSH
9130: LD_INT 0
9132: PUSH
9133: LD_INT 0
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: LIST
9140: ST_TO_ADDR
// bpoints := 1 ;
9141: LD_ADDR_VAR 0 10
9145: PUSH
9146: LD_INT 1
9148: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9149: LD_VAR 0 6
9153: PPUSH
9154: CALL_OW 247
9158: PUSH
9159: LD_INT 1
9161: DOUBLE
9162: EQUAL
9163: IFTRUE 9167
9165: GO 9745
9167: POP
// begin if GetClass ( i ) = 1 then
9168: LD_VAR 0 6
9172: PPUSH
9173: CALL_OW 257
9177: PUSH
9178: LD_INT 1
9180: EQUAL
9181: IFFALSE 9202
// points := [ 10 , 5 , 3 ] ;
9183: LD_ADDR_VAR 0 9
9187: PUSH
9188: LD_INT 10
9190: PUSH
9191: LD_INT 5
9193: PUSH
9194: LD_INT 3
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: LIST
9201: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9202: LD_VAR 0 6
9206: PPUSH
9207: CALL_OW 257
9211: PUSH
9212: LD_INT 2
9214: PUSH
9215: LD_INT 3
9217: PUSH
9218: LD_INT 4
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: LIST
9225: IN
9226: IFFALSE 9247
// points := [ 3 , 2 , 1 ] ;
9228: LD_ADDR_VAR 0 9
9232: PUSH
9233: LD_INT 3
9235: PUSH
9236: LD_INT 2
9238: PUSH
9239: LD_INT 1
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: LIST
9246: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9247: LD_VAR 0 6
9251: PPUSH
9252: CALL_OW 257
9256: PUSH
9257: LD_INT 5
9259: EQUAL
9260: IFFALSE 9281
// points := [ 130 , 5 , 2 ] ;
9262: LD_ADDR_VAR 0 9
9266: PUSH
9267: LD_INT 130
9269: PUSH
9270: LD_INT 5
9272: PUSH
9273: LD_INT 2
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: LIST
9280: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9281: LD_VAR 0 6
9285: PPUSH
9286: CALL_OW 257
9290: PUSH
9291: LD_INT 8
9293: EQUAL
9294: IFFALSE 9315
// points := [ 35 , 35 , 30 ] ;
9296: LD_ADDR_VAR 0 9
9300: PUSH
9301: LD_INT 35
9303: PUSH
9304: LD_INT 35
9306: PUSH
9307: LD_INT 30
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: LIST
9314: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9315: LD_VAR 0 6
9319: PPUSH
9320: CALL_OW 257
9324: PUSH
9325: LD_INT 9
9327: EQUAL
9328: IFFALSE 9349
// points := [ 20 , 55 , 40 ] ;
9330: LD_ADDR_VAR 0 9
9334: PUSH
9335: LD_INT 20
9337: PUSH
9338: LD_INT 55
9340: PUSH
9341: LD_INT 40
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: LIST
9348: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9349: LD_VAR 0 6
9353: PPUSH
9354: CALL_OW 257
9358: PUSH
9359: LD_INT 12
9361: PUSH
9362: LD_INT 16
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: IN
9369: IFFALSE 9390
// points := [ 5 , 3 , 2 ] ;
9371: LD_ADDR_VAR 0 9
9375: PUSH
9376: LD_INT 5
9378: PUSH
9379: LD_INT 3
9381: PUSH
9382: LD_INT 2
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: LIST
9389: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9390: LD_VAR 0 6
9394: PPUSH
9395: CALL_OW 257
9399: PUSH
9400: LD_INT 17
9402: EQUAL
9403: IFFALSE 9424
// points := [ 100 , 50 , 75 ] ;
9405: LD_ADDR_VAR 0 9
9409: PUSH
9410: LD_INT 100
9412: PUSH
9413: LD_INT 50
9415: PUSH
9416: LD_INT 75
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: LIST
9423: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9424: LD_VAR 0 6
9428: PPUSH
9429: CALL_OW 257
9433: PUSH
9434: LD_INT 15
9436: EQUAL
9437: IFFALSE 9458
// points := [ 10 , 5 , 3 ] ;
9439: LD_ADDR_VAR 0 9
9443: PUSH
9444: LD_INT 10
9446: PUSH
9447: LD_INT 5
9449: PUSH
9450: LD_INT 3
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: LIST
9457: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9458: LD_VAR 0 6
9462: PPUSH
9463: CALL_OW 257
9467: PUSH
9468: LD_INT 14
9470: EQUAL
9471: IFFALSE 9492
// points := [ 10 , 0 , 0 ] ;
9473: LD_ADDR_VAR 0 9
9477: PUSH
9478: LD_INT 10
9480: PUSH
9481: LD_INT 0
9483: PUSH
9484: LD_INT 0
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: LIST
9491: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9492: LD_VAR 0 6
9496: PPUSH
9497: CALL_OW 257
9501: PUSH
9502: LD_INT 11
9504: EQUAL
9505: IFFALSE 9526
// points := [ 30 , 10 , 5 ] ;
9507: LD_ADDR_VAR 0 9
9511: PUSH
9512: LD_INT 30
9514: PUSH
9515: LD_INT 10
9517: PUSH
9518: LD_INT 5
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: LIST
9525: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9526: LD_VAR 0 1
9530: PPUSH
9531: LD_INT 5
9533: PPUSH
9534: CALL_OW 321
9538: PUSH
9539: LD_INT 2
9541: EQUAL
9542: IFFALSE 9559
// bpoints := bpoints * 1.8 ;
9544: LD_ADDR_VAR 0 10
9548: PUSH
9549: LD_VAR 0 10
9553: PUSH
9554: LD_REAL  1.80000000000000E+0000
9557: MUL
9558: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9559: LD_VAR 0 6
9563: PPUSH
9564: CALL_OW 257
9568: PUSH
9569: LD_INT 1
9571: PUSH
9572: LD_INT 2
9574: PUSH
9575: LD_INT 3
9577: PUSH
9578: LD_INT 4
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: IN
9587: PUSH
9588: LD_VAR 0 1
9592: PPUSH
9593: LD_INT 51
9595: PPUSH
9596: CALL_OW 321
9600: PUSH
9601: LD_INT 2
9603: EQUAL
9604: AND
9605: IFFALSE 9622
// bpoints := bpoints * 1.2 ;
9607: LD_ADDR_VAR 0 10
9611: PUSH
9612: LD_VAR 0 10
9616: PUSH
9617: LD_REAL  1.20000000000000E+0000
9620: MUL
9621: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9622: LD_VAR 0 6
9626: PPUSH
9627: CALL_OW 257
9631: PUSH
9632: LD_INT 5
9634: PUSH
9635: LD_INT 7
9637: PUSH
9638: LD_INT 9
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: LIST
9645: IN
9646: PUSH
9647: LD_VAR 0 1
9651: PPUSH
9652: LD_INT 52
9654: PPUSH
9655: CALL_OW 321
9659: PUSH
9660: LD_INT 2
9662: EQUAL
9663: AND
9664: IFFALSE 9681
// bpoints := bpoints * 1.5 ;
9666: LD_ADDR_VAR 0 10
9670: PUSH
9671: LD_VAR 0 10
9675: PUSH
9676: LD_REAL  1.50000000000000E+0000
9679: MUL
9680: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9681: LD_VAR 0 1
9685: PPUSH
9686: LD_INT 66
9688: PPUSH
9689: CALL_OW 321
9693: PUSH
9694: LD_INT 2
9696: EQUAL
9697: IFFALSE 9714
// bpoints := bpoints * 1.1 ;
9699: LD_ADDR_VAR 0 10
9703: PUSH
9704: LD_VAR 0 10
9708: PUSH
9709: LD_REAL  1.10000000000000E+0000
9712: MUL
9713: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9714: LD_ADDR_VAR 0 10
9718: PUSH
9719: LD_VAR 0 10
9723: PUSH
9724: LD_VAR 0 6
9728: PPUSH
9729: LD_INT 1
9731: PPUSH
9732: CALL_OW 259
9736: PUSH
9737: LD_REAL  1.15000000000000E+0000
9740: MUL
9741: MUL
9742: ST_TO_ADDR
// end ; unit_vehicle :
9743: GO 10573
9745: LD_INT 2
9747: DOUBLE
9748: EQUAL
9749: IFTRUE 9753
9751: GO 10561
9753: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9754: LD_VAR 0 6
9758: PPUSH
9759: CALL_OW 264
9763: PUSH
9764: LD_INT 2
9766: PUSH
9767: LD_INT 42
9769: PUSH
9770: LD_INT 24
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: LIST
9777: IN
9778: IFFALSE 9799
// points := [ 25 , 5 , 3 ] ;
9780: LD_ADDR_VAR 0 9
9784: PUSH
9785: LD_INT 25
9787: PUSH
9788: LD_INT 5
9790: PUSH
9791: LD_INT 3
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: LIST
9798: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9799: LD_VAR 0 6
9803: PPUSH
9804: CALL_OW 264
9808: PUSH
9809: LD_INT 4
9811: PUSH
9812: LD_INT 43
9814: PUSH
9815: LD_INT 25
9817: PUSH
9818: EMPTY
9819: LIST
9820: LIST
9821: LIST
9822: IN
9823: IFFALSE 9844
// points := [ 40 , 15 , 5 ] ;
9825: LD_ADDR_VAR 0 9
9829: PUSH
9830: LD_INT 40
9832: PUSH
9833: LD_INT 15
9835: PUSH
9836: LD_INT 5
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: LIST
9843: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9844: LD_VAR 0 6
9848: PPUSH
9849: CALL_OW 264
9853: PUSH
9854: LD_INT 3
9856: PUSH
9857: LD_INT 23
9859: PUSH
9860: EMPTY
9861: LIST
9862: LIST
9863: IN
9864: IFFALSE 9885
// points := [ 7 , 25 , 8 ] ;
9866: LD_ADDR_VAR 0 9
9870: PUSH
9871: LD_INT 7
9873: PUSH
9874: LD_INT 25
9876: PUSH
9877: LD_INT 8
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: LIST
9884: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9885: LD_VAR 0 6
9889: PPUSH
9890: CALL_OW 264
9894: PUSH
9895: LD_INT 5
9897: PUSH
9898: LD_INT 27
9900: PUSH
9901: LD_INT 44
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: LIST
9908: IN
9909: IFFALSE 9930
// points := [ 14 , 50 , 16 ] ;
9911: LD_ADDR_VAR 0 9
9915: PUSH
9916: LD_INT 14
9918: PUSH
9919: LD_INT 50
9921: PUSH
9922: LD_INT 16
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: LIST
9929: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9930: LD_VAR 0 6
9934: PPUSH
9935: CALL_OW 264
9939: PUSH
9940: LD_INT 6
9942: PUSH
9943: LD_INT 46
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: IN
9950: IFFALSE 9971
// points := [ 32 , 120 , 70 ] ;
9952: LD_ADDR_VAR 0 9
9956: PUSH
9957: LD_INT 32
9959: PUSH
9960: LD_INT 120
9962: PUSH
9963: LD_INT 70
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: LIST
9970: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
9971: LD_VAR 0 6
9975: PPUSH
9976: CALL_OW 264
9980: PUSH
9981: LD_INT 7
9983: PUSH
9984: LD_INT 28
9986: PUSH
9987: LD_INT 45
9989: PUSH
9990: LD_EXP 14
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: IN
10001: IFFALSE 10022
// points := [ 35 , 20 , 45 ] ;
10003: LD_ADDR_VAR 0 9
10007: PUSH
10008: LD_INT 35
10010: PUSH
10011: LD_INT 20
10013: PUSH
10014: LD_INT 45
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: LIST
10021: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10022: LD_VAR 0 6
10026: PPUSH
10027: CALL_OW 264
10031: PUSH
10032: LD_INT 47
10034: PUSH
10035: EMPTY
10036: LIST
10037: IN
10038: IFFALSE 10059
// points := [ 67 , 45 , 75 ] ;
10040: LD_ADDR_VAR 0 9
10044: PUSH
10045: LD_INT 67
10047: PUSH
10048: LD_INT 45
10050: PUSH
10051: LD_INT 75
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: LIST
10058: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10059: LD_VAR 0 6
10063: PPUSH
10064: CALL_OW 264
10068: PUSH
10069: LD_INT 26
10071: PUSH
10072: EMPTY
10073: LIST
10074: IN
10075: IFFALSE 10096
// points := [ 120 , 30 , 80 ] ;
10077: LD_ADDR_VAR 0 9
10081: PUSH
10082: LD_INT 120
10084: PUSH
10085: LD_INT 30
10087: PUSH
10088: LD_INT 80
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: LIST
10095: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10096: LD_VAR 0 6
10100: PPUSH
10101: CALL_OW 264
10105: PUSH
10106: LD_INT 22
10108: PUSH
10109: EMPTY
10110: LIST
10111: IN
10112: IFFALSE 10133
// points := [ 40 , 1 , 1 ] ;
10114: LD_ADDR_VAR 0 9
10118: PUSH
10119: LD_INT 40
10121: PUSH
10122: LD_INT 1
10124: PUSH
10125: LD_INT 1
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: LIST
10132: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10133: LD_VAR 0 6
10137: PPUSH
10138: CALL_OW 264
10142: PUSH
10143: LD_INT 29
10145: PUSH
10146: EMPTY
10147: LIST
10148: IN
10149: IFFALSE 10170
// points := [ 70 , 200 , 400 ] ;
10151: LD_ADDR_VAR 0 9
10155: PUSH
10156: LD_INT 70
10158: PUSH
10159: LD_INT 200
10161: PUSH
10162: LD_INT 400
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: LIST
10169: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10170: LD_VAR 0 6
10174: PPUSH
10175: CALL_OW 264
10179: PUSH
10180: LD_INT 14
10182: PUSH
10183: LD_INT 53
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: IN
10190: IFFALSE 10211
// points := [ 40 , 10 , 20 ] ;
10192: LD_ADDR_VAR 0 9
10196: PUSH
10197: LD_INT 40
10199: PUSH
10200: LD_INT 10
10202: PUSH
10203: LD_INT 20
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: LIST
10210: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10211: LD_VAR 0 6
10215: PPUSH
10216: CALL_OW 264
10220: PUSH
10221: LD_INT 9
10223: PUSH
10224: EMPTY
10225: LIST
10226: IN
10227: IFFALSE 10248
// points := [ 5 , 70 , 20 ] ;
10229: LD_ADDR_VAR 0 9
10233: PUSH
10234: LD_INT 5
10236: PUSH
10237: LD_INT 70
10239: PUSH
10240: LD_INT 20
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: LIST
10247: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10248: LD_VAR 0 6
10252: PPUSH
10253: CALL_OW 264
10257: PUSH
10258: LD_INT 10
10260: PUSH
10261: EMPTY
10262: LIST
10263: IN
10264: IFFALSE 10285
// points := [ 35 , 110 , 70 ] ;
10266: LD_ADDR_VAR 0 9
10270: PUSH
10271: LD_INT 35
10273: PUSH
10274: LD_INT 110
10276: PUSH
10277: LD_INT 70
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10285: LD_VAR 0 6
10289: PPUSH
10290: CALL_OW 265
10294: PUSH
10295: LD_INT 25
10297: EQUAL
10298: IFFALSE 10319
// points := [ 80 , 65 , 100 ] ;
10300: LD_ADDR_VAR 0 9
10304: PUSH
10305: LD_INT 80
10307: PUSH
10308: LD_INT 65
10310: PUSH
10311: LD_INT 100
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: LIST
10318: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10319: LD_VAR 0 6
10323: PPUSH
10324: CALL_OW 263
10328: PUSH
10329: LD_INT 1
10331: EQUAL
10332: IFFALSE 10367
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10334: LD_ADDR_VAR 0 10
10338: PUSH
10339: LD_VAR 0 10
10343: PUSH
10344: LD_VAR 0 6
10348: PPUSH
10349: CALL_OW 311
10353: PPUSH
10354: LD_INT 3
10356: PPUSH
10357: CALL_OW 259
10361: PUSH
10362: LD_INT 4
10364: MUL
10365: MUL
10366: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10367: LD_VAR 0 6
10371: PPUSH
10372: CALL_OW 263
10376: PUSH
10377: LD_INT 2
10379: EQUAL
10380: IFFALSE 10431
// begin j := IsControledBy ( i ) ;
10382: LD_ADDR_VAR 0 7
10386: PUSH
10387: LD_VAR 0 6
10391: PPUSH
10392: CALL_OW 312
10396: ST_TO_ADDR
// if j then
10397: LD_VAR 0 7
10401: IFFALSE 10431
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10403: LD_ADDR_VAR 0 10
10407: PUSH
10408: LD_VAR 0 10
10412: PUSH
10413: LD_VAR 0 7
10417: PPUSH
10418: LD_INT 3
10420: PPUSH
10421: CALL_OW 259
10425: PUSH
10426: LD_INT 3
10428: MUL
10429: MUL
10430: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10431: LD_VAR 0 6
10435: PPUSH
10436: CALL_OW 264
10440: PUSH
10441: LD_INT 5
10443: PUSH
10444: LD_INT 6
10446: PUSH
10447: LD_INT 46
10449: PUSH
10450: LD_INT 44
10452: PUSH
10453: LD_INT 47
10455: PUSH
10456: LD_INT 45
10458: PUSH
10459: LD_INT 28
10461: PUSH
10462: LD_INT 7
10464: PUSH
10465: LD_INT 27
10467: PUSH
10468: LD_INT 29
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: IN
10483: PUSH
10484: LD_VAR 0 1
10488: PPUSH
10489: LD_INT 52
10491: PPUSH
10492: CALL_OW 321
10496: PUSH
10497: LD_INT 2
10499: EQUAL
10500: AND
10501: IFFALSE 10518
// bpoints := bpoints * 1.2 ;
10503: LD_ADDR_VAR 0 10
10507: PUSH
10508: LD_VAR 0 10
10512: PUSH
10513: LD_REAL  1.20000000000000E+0000
10516: MUL
10517: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10518: LD_VAR 0 6
10522: PPUSH
10523: CALL_OW 264
10527: PUSH
10528: LD_INT 6
10530: PUSH
10531: LD_INT 46
10533: PUSH
10534: LD_INT 47
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: LIST
10541: IN
10542: IFFALSE 10559
// bpoints := bpoints * 1.2 ;
10544: LD_ADDR_VAR 0 10
10548: PUSH
10549: LD_VAR 0 10
10553: PUSH
10554: LD_REAL  1.20000000000000E+0000
10557: MUL
10558: ST_TO_ADDR
// end ; unit_building :
10559: GO 10573
10561: LD_INT 3
10563: DOUBLE
10564: EQUAL
10565: IFTRUE 10569
10567: GO 10572
10569: POP
// ; end ;
10570: GO 10573
10572: POP
// for j = 1 to 3 do
10573: LD_ADDR_VAR 0 7
10577: PUSH
10578: DOUBLE
10579: LD_INT 1
10581: DEC
10582: ST_TO_ADDR
10583: LD_INT 3
10585: PUSH
10586: FOR_TO
10587: IFFALSE 10640
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10589: LD_ADDR_VAR 0 5
10593: PUSH
10594: LD_VAR 0 5
10598: PPUSH
10599: LD_VAR 0 7
10603: PPUSH
10604: LD_VAR 0 5
10608: PUSH
10609: LD_VAR 0 7
10613: ARRAY
10614: PUSH
10615: LD_VAR 0 9
10619: PUSH
10620: LD_VAR 0 7
10624: ARRAY
10625: PUSH
10626: LD_VAR 0 10
10630: MUL
10631: PLUS
10632: PPUSH
10633: CALL_OW 1
10637: ST_TO_ADDR
10638: GO 10586
10640: POP
10641: POP
// end ;
10642: GO 9119
10644: POP
10645: POP
// result := Replace ( result , 4 , tmp ) ;
10646: LD_ADDR_VAR 0 5
10650: PUSH
10651: LD_VAR 0 5
10655: PPUSH
10656: LD_INT 4
10658: PPUSH
10659: LD_VAR 0 8
10663: PPUSH
10664: CALL_OW 1
10668: ST_TO_ADDR
// end ;
10669: LD_VAR 0 5
10673: RET
// export function DangerAtRange ( unit , range ) ; begin
10674: LD_INT 0
10676: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10677: LD_ADDR_VAR 0 3
10681: PUSH
10682: LD_VAR 0 1
10686: PPUSH
10687: CALL_OW 255
10691: PPUSH
10692: LD_VAR 0 1
10696: PPUSH
10697: CALL_OW 250
10701: PPUSH
10702: LD_VAR 0 1
10706: PPUSH
10707: CALL_OW 251
10711: PPUSH
10712: LD_VAR 0 2
10716: PPUSH
10717: CALL 8971 0 4
10721: ST_TO_ADDR
// end ;
10722: LD_VAR 0 3
10726: RET
// export function DangerInArea ( side , area ) ; begin
10727: LD_INT 0
10729: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10730: LD_ADDR_VAR 0 3
10734: PUSH
10735: LD_VAR 0 2
10739: PPUSH
10740: LD_INT 81
10742: PUSH
10743: LD_VAR 0 1
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PPUSH
10752: CALL_OW 70
10756: ST_TO_ADDR
// end ;
10757: LD_VAR 0 3
10761: RET
// export function IsExtension ( b ) ; begin
10762: LD_INT 0
10764: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10765: LD_ADDR_VAR 0 2
10769: PUSH
10770: LD_VAR 0 1
10774: PUSH
10775: LD_INT 23
10777: PUSH
10778: LD_INT 20
10780: PUSH
10781: LD_INT 22
10783: PUSH
10784: LD_INT 17
10786: PUSH
10787: LD_INT 24
10789: PUSH
10790: LD_INT 21
10792: PUSH
10793: LD_INT 19
10795: PUSH
10796: LD_INT 16
10798: PUSH
10799: LD_INT 25
10801: PUSH
10802: LD_INT 18
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: IN
10817: ST_TO_ADDR
// end ;
10818: LD_VAR 0 2
10822: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10823: LD_INT 0
10825: PPUSH
10826: PPUSH
10827: PPUSH
// result := [ ] ;
10828: LD_ADDR_VAR 0 4
10832: PUSH
10833: EMPTY
10834: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10835: LD_ADDR_VAR 0 5
10839: PUSH
10840: LD_VAR 0 2
10844: PPUSH
10845: LD_INT 21
10847: PUSH
10848: LD_INT 3
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PPUSH
10855: CALL_OW 70
10859: ST_TO_ADDR
// if not tmp then
10860: LD_VAR 0 5
10864: NOT
10865: IFFALSE 10869
// exit ;
10867: GO 10933
// if checkLink then
10869: LD_VAR 0 3
10873: IFFALSE 10923
// begin for i in tmp do
10875: LD_ADDR_VAR 0 6
10879: PUSH
10880: LD_VAR 0 5
10884: PUSH
10885: FOR_IN
10886: IFFALSE 10921
// if GetBase ( i ) <> base then
10888: LD_VAR 0 6
10892: PPUSH
10893: CALL_OW 274
10897: PUSH
10898: LD_VAR 0 1
10902: NONEQUAL
10903: IFFALSE 10919
// ComLinkToBase ( base , i ) ;
10905: LD_VAR 0 1
10909: PPUSH
10910: LD_VAR 0 6
10914: PPUSH
10915: CALL_OW 169
10919: GO 10885
10921: POP
10922: POP
// end ; result := tmp ;
10923: LD_ADDR_VAR 0 4
10927: PUSH
10928: LD_VAR 0 5
10932: ST_TO_ADDR
// end ;
10933: LD_VAR 0 4
10937: RET
// export function ComComplete ( units , b ) ; var i ; begin
10938: LD_INT 0
10940: PPUSH
10941: PPUSH
// if not units then
10942: LD_VAR 0 1
10946: NOT
10947: IFFALSE 10951
// exit ;
10949: GO 11041
// for i in units do
10951: LD_ADDR_VAR 0 4
10955: PUSH
10956: LD_VAR 0 1
10960: PUSH
10961: FOR_IN
10962: IFFALSE 11039
// if BuildingStatus ( b ) = bs_build then
10964: LD_VAR 0 2
10968: PPUSH
10969: CALL_OW 461
10973: PUSH
10974: LD_INT 1
10976: EQUAL
10977: IFFALSE 11037
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10979: LD_VAR 0 4
10983: PPUSH
10984: LD_STRING h
10986: PUSH
10987: LD_VAR 0 2
10991: PPUSH
10992: CALL_OW 250
10996: PUSH
10997: LD_VAR 0 2
11001: PPUSH
11002: CALL_OW 251
11006: PUSH
11007: LD_VAR 0 2
11011: PUSH
11012: LD_INT 0
11014: PUSH
11015: LD_INT 0
11017: PUSH
11018: LD_INT 0
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: PUSH
11030: EMPTY
11031: LIST
11032: PPUSH
11033: CALL_OW 446
11037: GO 10961
11039: POP
11040: POP
// end ;
11041: LD_VAR 0 3
11045: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11046: LD_INT 0
11048: PPUSH
11049: PPUSH
11050: PPUSH
11051: PPUSH
11052: PPUSH
11053: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11054: LD_VAR 0 1
11058: NOT
11059: PUSH
11060: LD_VAR 0 1
11064: PPUSH
11065: CALL_OW 263
11069: PUSH
11070: LD_INT 2
11072: NONEQUAL
11073: OR
11074: IFFALSE 11078
// exit ;
11076: GO 11394
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11078: LD_ADDR_VAR 0 6
11082: PUSH
11083: LD_INT 22
11085: PUSH
11086: LD_VAR 0 1
11090: PPUSH
11091: CALL_OW 255
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: PUSH
11100: LD_INT 2
11102: PUSH
11103: LD_INT 30
11105: PUSH
11106: LD_INT 36
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: PUSH
11113: LD_INT 34
11115: PUSH
11116: LD_INT 31
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: LIST
11127: PUSH
11128: EMPTY
11129: LIST
11130: LIST
11131: PPUSH
11132: CALL_OW 69
11136: ST_TO_ADDR
// if not tmp then
11137: LD_VAR 0 6
11141: NOT
11142: IFFALSE 11146
// exit ;
11144: GO 11394
// result := [ ] ;
11146: LD_ADDR_VAR 0 2
11150: PUSH
11151: EMPTY
11152: ST_TO_ADDR
// for i in tmp do
11153: LD_ADDR_VAR 0 3
11157: PUSH
11158: LD_VAR 0 6
11162: PUSH
11163: FOR_IN
11164: IFFALSE 11235
// begin t := UnitsInside ( i ) ;
11166: LD_ADDR_VAR 0 4
11170: PUSH
11171: LD_VAR 0 3
11175: PPUSH
11176: CALL_OW 313
11180: ST_TO_ADDR
// if t then
11181: LD_VAR 0 4
11185: IFFALSE 11233
// for j in t do
11187: LD_ADDR_VAR 0 7
11191: PUSH
11192: LD_VAR 0 4
11196: PUSH
11197: FOR_IN
11198: IFFALSE 11231
// result := Replace ( result , result + 1 , j ) ;
11200: LD_ADDR_VAR 0 2
11204: PUSH
11205: LD_VAR 0 2
11209: PPUSH
11210: LD_VAR 0 2
11214: PUSH
11215: LD_INT 1
11217: PLUS
11218: PPUSH
11219: LD_VAR 0 7
11223: PPUSH
11224: CALL_OW 1
11228: ST_TO_ADDR
11229: GO 11197
11231: POP
11232: POP
// end ;
11233: GO 11163
11235: POP
11236: POP
// if not result then
11237: LD_VAR 0 2
11241: NOT
11242: IFFALSE 11246
// exit ;
11244: GO 11394
// mech := result [ 1 ] ;
11246: LD_ADDR_VAR 0 5
11250: PUSH
11251: LD_VAR 0 2
11255: PUSH
11256: LD_INT 1
11258: ARRAY
11259: ST_TO_ADDR
// if result > 1 then
11260: LD_VAR 0 2
11264: PUSH
11265: LD_INT 1
11267: GREATER
11268: IFFALSE 11380
// begin for i = 2 to result do
11270: LD_ADDR_VAR 0 3
11274: PUSH
11275: DOUBLE
11276: LD_INT 2
11278: DEC
11279: ST_TO_ADDR
11280: LD_VAR 0 2
11284: PUSH
11285: FOR_TO
11286: IFFALSE 11378
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11288: LD_ADDR_VAR 0 4
11292: PUSH
11293: LD_VAR 0 2
11297: PUSH
11298: LD_VAR 0 3
11302: ARRAY
11303: PPUSH
11304: LD_INT 3
11306: PPUSH
11307: CALL_OW 259
11311: PUSH
11312: LD_VAR 0 2
11316: PUSH
11317: LD_VAR 0 3
11321: ARRAY
11322: PPUSH
11323: CALL_OW 432
11327: MINUS
11328: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11329: LD_VAR 0 4
11333: PUSH
11334: LD_VAR 0 5
11338: PPUSH
11339: LD_INT 3
11341: PPUSH
11342: CALL_OW 259
11346: PUSH
11347: LD_VAR 0 5
11351: PPUSH
11352: CALL_OW 432
11356: MINUS
11357: GREATEREQUAL
11358: IFFALSE 11376
// mech := result [ i ] ;
11360: LD_ADDR_VAR 0 5
11364: PUSH
11365: LD_VAR 0 2
11369: PUSH
11370: LD_VAR 0 3
11374: ARRAY
11375: ST_TO_ADDR
// end ;
11376: GO 11285
11378: POP
11379: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11380: LD_VAR 0 1
11384: PPUSH
11385: LD_VAR 0 5
11389: PPUSH
11390: CALL_OW 135
// end ;
11394: LD_VAR 0 2
11398: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11399: LD_INT 0
11401: PPUSH
11402: PPUSH
11403: PPUSH
11404: PPUSH
11405: PPUSH
11406: PPUSH
11407: PPUSH
11408: PPUSH
11409: PPUSH
11410: PPUSH
11411: PPUSH
11412: PPUSH
11413: PPUSH
// result := [ ] ;
11414: LD_ADDR_VAR 0 7
11418: PUSH
11419: EMPTY
11420: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11421: LD_VAR 0 1
11425: PPUSH
11426: CALL_OW 266
11430: PUSH
11431: LD_INT 0
11433: PUSH
11434: LD_INT 1
11436: PUSH
11437: EMPTY
11438: LIST
11439: LIST
11440: IN
11441: NOT
11442: IFFALSE 11446
// exit ;
11444: GO 13080
// if name then
11446: LD_VAR 0 3
11450: IFFALSE 11466
// SetBName ( base_dep , name ) ;
11452: LD_VAR 0 1
11456: PPUSH
11457: LD_VAR 0 3
11461: PPUSH
11462: CALL_OW 500
// base := GetBase ( base_dep ) ;
11466: LD_ADDR_VAR 0 15
11470: PUSH
11471: LD_VAR 0 1
11475: PPUSH
11476: CALL_OW 274
11480: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11481: LD_ADDR_VAR 0 16
11485: PUSH
11486: LD_VAR 0 1
11490: PPUSH
11491: CALL_OW 255
11495: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11496: LD_ADDR_VAR 0 17
11500: PUSH
11501: LD_VAR 0 1
11505: PPUSH
11506: CALL_OW 248
11510: ST_TO_ADDR
// if sources then
11511: LD_VAR 0 5
11515: IFFALSE 11562
// for i = 1 to 3 do
11517: LD_ADDR_VAR 0 8
11521: PUSH
11522: DOUBLE
11523: LD_INT 1
11525: DEC
11526: ST_TO_ADDR
11527: LD_INT 3
11529: PUSH
11530: FOR_TO
11531: IFFALSE 11560
// AddResourceType ( base , i , sources [ i ] ) ;
11533: LD_VAR 0 15
11537: PPUSH
11538: LD_VAR 0 8
11542: PPUSH
11543: LD_VAR 0 5
11547: PUSH
11548: LD_VAR 0 8
11552: ARRAY
11553: PPUSH
11554: CALL_OW 276
11558: GO 11530
11560: POP
11561: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11562: LD_ADDR_VAR 0 18
11566: PUSH
11567: LD_VAR 0 15
11571: PPUSH
11572: LD_VAR 0 2
11576: PPUSH
11577: LD_INT 1
11579: PPUSH
11580: CALL 10823 0 3
11584: ST_TO_ADDR
// InitHc ;
11585: CALL_OW 19
// InitUc ;
11589: CALL_OW 18
// uc_side := side ;
11593: LD_ADDR_OWVAR 20
11597: PUSH
11598: LD_VAR 0 16
11602: ST_TO_ADDR
// uc_nation := nation ;
11603: LD_ADDR_OWVAR 21
11607: PUSH
11608: LD_VAR 0 17
11612: ST_TO_ADDR
// if buildings then
11613: LD_VAR 0 18
11617: IFFALSE 12939
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11619: LD_ADDR_VAR 0 19
11623: PUSH
11624: LD_VAR 0 18
11628: PPUSH
11629: LD_INT 2
11631: PUSH
11632: LD_INT 30
11634: PUSH
11635: LD_INT 29
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: PUSH
11642: LD_INT 30
11644: PUSH
11645: LD_INT 30
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: LIST
11656: PPUSH
11657: CALL_OW 72
11661: ST_TO_ADDR
// if tmp then
11662: LD_VAR 0 19
11666: IFFALSE 11714
// for i in tmp do
11668: LD_ADDR_VAR 0 8
11672: PUSH
11673: LD_VAR 0 19
11677: PUSH
11678: FOR_IN
11679: IFFALSE 11712
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11681: LD_VAR 0 8
11685: PPUSH
11686: CALL_OW 250
11690: PPUSH
11691: LD_VAR 0 8
11695: PPUSH
11696: CALL_OW 251
11700: PPUSH
11701: LD_VAR 0 16
11705: PPUSH
11706: CALL_OW 441
11710: GO 11678
11712: POP
11713: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11714: LD_VAR 0 18
11718: PPUSH
11719: LD_INT 2
11721: PUSH
11722: LD_INT 30
11724: PUSH
11725: LD_INT 32
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: PUSH
11732: LD_INT 30
11734: PUSH
11735: LD_INT 33
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: LIST
11746: PPUSH
11747: CALL_OW 72
11751: IFFALSE 11839
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11753: LD_ADDR_VAR 0 8
11757: PUSH
11758: LD_VAR 0 18
11762: PPUSH
11763: LD_INT 2
11765: PUSH
11766: LD_INT 30
11768: PUSH
11769: LD_INT 32
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: PUSH
11776: LD_INT 30
11778: PUSH
11779: LD_INT 33
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: LIST
11790: PPUSH
11791: CALL_OW 72
11795: PUSH
11796: FOR_IN
11797: IFFALSE 11837
// begin if not GetBWeapon ( i ) then
11799: LD_VAR 0 8
11803: PPUSH
11804: CALL_OW 269
11808: NOT
11809: IFFALSE 11835
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11811: LD_VAR 0 8
11815: PPUSH
11816: LD_VAR 0 8
11820: PPUSH
11821: LD_VAR 0 2
11825: PPUSH
11826: CALL 13085 0 2
11830: PPUSH
11831: CALL_OW 431
// end ;
11835: GO 11796
11837: POP
11838: POP
// end ; for i = 1 to personel do
11839: LD_ADDR_VAR 0 8
11843: PUSH
11844: DOUBLE
11845: LD_INT 1
11847: DEC
11848: ST_TO_ADDR
11849: LD_VAR 0 6
11853: PUSH
11854: FOR_TO
11855: IFFALSE 12919
// begin if i > 4 then
11857: LD_VAR 0 8
11861: PUSH
11862: LD_INT 4
11864: GREATER
11865: IFFALSE 11869
// break ;
11867: GO 12919
// case i of 1 :
11869: LD_VAR 0 8
11873: PUSH
11874: LD_INT 1
11876: DOUBLE
11877: EQUAL
11878: IFTRUE 11882
11880: GO 11962
11882: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11883: LD_ADDR_VAR 0 12
11887: PUSH
11888: LD_VAR 0 18
11892: PPUSH
11893: LD_INT 22
11895: PUSH
11896: LD_VAR 0 16
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: PUSH
11905: LD_INT 58
11907: PUSH
11908: EMPTY
11909: LIST
11910: PUSH
11911: LD_INT 2
11913: PUSH
11914: LD_INT 30
11916: PUSH
11917: LD_INT 32
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: PUSH
11924: LD_INT 30
11926: PUSH
11927: LD_INT 4
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: PUSH
11934: LD_INT 30
11936: PUSH
11937: LD_INT 5
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: LIST
11954: PPUSH
11955: CALL_OW 72
11959: ST_TO_ADDR
11960: GO 12184
11962: LD_INT 2
11964: DOUBLE
11965: EQUAL
11966: IFTRUE 11970
11968: GO 12032
11970: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11971: LD_ADDR_VAR 0 12
11975: PUSH
11976: LD_VAR 0 18
11980: PPUSH
11981: LD_INT 22
11983: PUSH
11984: LD_VAR 0 16
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: PUSH
11993: LD_INT 2
11995: PUSH
11996: LD_INT 30
11998: PUSH
11999: LD_INT 0
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PUSH
12006: LD_INT 30
12008: PUSH
12009: LD_INT 1
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: LIST
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PPUSH
12025: CALL_OW 72
12029: ST_TO_ADDR
12030: GO 12184
12032: LD_INT 3
12034: DOUBLE
12035: EQUAL
12036: IFTRUE 12040
12038: GO 12102
12040: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12041: LD_ADDR_VAR 0 12
12045: PUSH
12046: LD_VAR 0 18
12050: PPUSH
12051: LD_INT 22
12053: PUSH
12054: LD_VAR 0 16
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: LD_INT 2
12065: PUSH
12066: LD_INT 30
12068: PUSH
12069: LD_INT 2
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PUSH
12076: LD_INT 30
12078: PUSH
12079: LD_INT 3
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: LIST
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PPUSH
12095: CALL_OW 72
12099: ST_TO_ADDR
12100: GO 12184
12102: LD_INT 4
12104: DOUBLE
12105: EQUAL
12106: IFTRUE 12110
12108: GO 12183
12110: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12111: LD_ADDR_VAR 0 12
12115: PUSH
12116: LD_VAR 0 18
12120: PPUSH
12121: LD_INT 22
12123: PUSH
12124: LD_VAR 0 16
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: PUSH
12133: LD_INT 2
12135: PUSH
12136: LD_INT 30
12138: PUSH
12139: LD_INT 6
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: LD_INT 30
12148: PUSH
12149: LD_INT 7
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: PUSH
12156: LD_INT 30
12158: PUSH
12159: LD_INT 8
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PPUSH
12176: CALL_OW 72
12180: ST_TO_ADDR
12181: GO 12184
12183: POP
// if i = 1 then
12184: LD_VAR 0 8
12188: PUSH
12189: LD_INT 1
12191: EQUAL
12192: IFFALSE 12303
// begin tmp := [ ] ;
12194: LD_ADDR_VAR 0 19
12198: PUSH
12199: EMPTY
12200: ST_TO_ADDR
// for j in f do
12201: LD_ADDR_VAR 0 9
12205: PUSH
12206: LD_VAR 0 12
12210: PUSH
12211: FOR_IN
12212: IFFALSE 12285
// if GetBType ( j ) = b_bunker then
12214: LD_VAR 0 9
12218: PPUSH
12219: CALL_OW 266
12223: PUSH
12224: LD_INT 32
12226: EQUAL
12227: IFFALSE 12254
// tmp := Insert ( tmp , 1 , j ) else
12229: LD_ADDR_VAR 0 19
12233: PUSH
12234: LD_VAR 0 19
12238: PPUSH
12239: LD_INT 1
12241: PPUSH
12242: LD_VAR 0 9
12246: PPUSH
12247: CALL_OW 2
12251: ST_TO_ADDR
12252: GO 12283
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12254: LD_ADDR_VAR 0 19
12258: PUSH
12259: LD_VAR 0 19
12263: PPUSH
12264: LD_VAR 0 19
12268: PUSH
12269: LD_INT 1
12271: PLUS
12272: PPUSH
12273: LD_VAR 0 9
12277: PPUSH
12278: CALL_OW 2
12282: ST_TO_ADDR
12283: GO 12211
12285: POP
12286: POP
// if tmp then
12287: LD_VAR 0 19
12291: IFFALSE 12303
// f := tmp ;
12293: LD_ADDR_VAR 0 12
12297: PUSH
12298: LD_VAR 0 19
12302: ST_TO_ADDR
// end ; x := personel [ i ] ;
12303: LD_ADDR_VAR 0 13
12307: PUSH
12308: LD_VAR 0 6
12312: PUSH
12313: LD_VAR 0 8
12317: ARRAY
12318: ST_TO_ADDR
// if x = - 1 then
12319: LD_VAR 0 13
12323: PUSH
12324: LD_INT 1
12326: NEG
12327: EQUAL
12328: IFFALSE 12537
// begin for j in f do
12330: LD_ADDR_VAR 0 9
12334: PUSH
12335: LD_VAR 0 12
12339: PUSH
12340: FOR_IN
12341: IFFALSE 12533
// repeat InitHc ;
12343: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12347: LD_VAR 0 9
12351: PPUSH
12352: CALL_OW 266
12356: PUSH
12357: LD_INT 5
12359: EQUAL
12360: IFFALSE 12430
// begin if UnitsInside ( j ) < 3 then
12362: LD_VAR 0 9
12366: PPUSH
12367: CALL_OW 313
12371: PUSH
12372: LD_INT 3
12374: LESS
12375: IFFALSE 12411
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12377: LD_INT 0
12379: PPUSH
12380: LD_INT 5
12382: PUSH
12383: LD_INT 8
12385: PUSH
12386: LD_INT 9
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: LIST
12393: PUSH
12394: LD_VAR 0 17
12398: ARRAY
12399: PPUSH
12400: LD_VAR 0 4
12404: PPUSH
12405: CALL_OW 380
12409: GO 12428
// PrepareHuman ( false , i , skill ) ;
12411: LD_INT 0
12413: PPUSH
12414: LD_VAR 0 8
12418: PPUSH
12419: LD_VAR 0 4
12423: PPUSH
12424: CALL_OW 380
// end else
12428: GO 12447
// PrepareHuman ( false , i , skill ) ;
12430: LD_INT 0
12432: PPUSH
12433: LD_VAR 0 8
12437: PPUSH
12438: LD_VAR 0 4
12442: PPUSH
12443: CALL_OW 380
// un := CreateHuman ;
12447: LD_ADDR_VAR 0 14
12451: PUSH
12452: CALL_OW 44
12456: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12457: LD_ADDR_VAR 0 7
12461: PUSH
12462: LD_VAR 0 7
12466: PPUSH
12467: LD_INT 1
12469: PPUSH
12470: LD_VAR 0 14
12474: PPUSH
12475: CALL_OW 2
12479: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12480: LD_VAR 0 14
12484: PPUSH
12485: LD_VAR 0 9
12489: PPUSH
12490: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12494: LD_VAR 0 9
12498: PPUSH
12499: CALL_OW 313
12503: PUSH
12504: LD_INT 6
12506: EQUAL
12507: PUSH
12508: LD_VAR 0 9
12512: PPUSH
12513: CALL_OW 266
12517: PUSH
12518: LD_INT 32
12520: PUSH
12521: LD_INT 31
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: IN
12528: OR
12529: IFFALSE 12343
12531: GO 12340
12533: POP
12534: POP
// end else
12535: GO 12917
// for j = 1 to x do
12537: LD_ADDR_VAR 0 9
12541: PUSH
12542: DOUBLE
12543: LD_INT 1
12545: DEC
12546: ST_TO_ADDR
12547: LD_VAR 0 13
12551: PUSH
12552: FOR_TO
12553: IFFALSE 12915
// begin InitHc ;
12555: CALL_OW 19
// if not f then
12559: LD_VAR 0 12
12563: NOT
12564: IFFALSE 12653
// begin PrepareHuman ( false , i , skill ) ;
12566: LD_INT 0
12568: PPUSH
12569: LD_VAR 0 8
12573: PPUSH
12574: LD_VAR 0 4
12578: PPUSH
12579: CALL_OW 380
// un := CreateHuman ;
12583: LD_ADDR_VAR 0 14
12587: PUSH
12588: CALL_OW 44
12592: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12593: LD_ADDR_VAR 0 7
12597: PUSH
12598: LD_VAR 0 7
12602: PPUSH
12603: LD_INT 1
12605: PPUSH
12606: LD_VAR 0 14
12610: PPUSH
12611: CALL_OW 2
12615: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12616: LD_VAR 0 14
12620: PPUSH
12621: LD_VAR 0 1
12625: PPUSH
12626: CALL_OW 250
12630: PPUSH
12631: LD_VAR 0 1
12635: PPUSH
12636: CALL_OW 251
12640: PPUSH
12641: LD_INT 10
12643: PPUSH
12644: LD_INT 0
12646: PPUSH
12647: CALL_OW 50
// continue ;
12651: GO 12552
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12653: LD_VAR 0 12
12657: PUSH
12658: LD_INT 1
12660: ARRAY
12661: PPUSH
12662: CALL_OW 313
12666: PUSH
12667: LD_VAR 0 12
12671: PUSH
12672: LD_INT 1
12674: ARRAY
12675: PPUSH
12676: CALL_OW 266
12680: PUSH
12681: LD_INT 32
12683: PUSH
12684: LD_INT 31
12686: PUSH
12687: EMPTY
12688: LIST
12689: LIST
12690: IN
12691: AND
12692: PUSH
12693: LD_VAR 0 12
12697: PUSH
12698: LD_INT 1
12700: ARRAY
12701: PPUSH
12702: CALL_OW 313
12706: PUSH
12707: LD_INT 6
12709: EQUAL
12710: OR
12711: IFFALSE 12731
// f := Delete ( f , 1 ) ;
12713: LD_ADDR_VAR 0 12
12717: PUSH
12718: LD_VAR 0 12
12722: PPUSH
12723: LD_INT 1
12725: PPUSH
12726: CALL_OW 3
12730: ST_TO_ADDR
// if not f then
12731: LD_VAR 0 12
12735: NOT
12736: IFFALSE 12754
// begin x := x + 2 ;
12738: LD_ADDR_VAR 0 13
12742: PUSH
12743: LD_VAR 0 13
12747: PUSH
12748: LD_INT 2
12750: PLUS
12751: ST_TO_ADDR
// continue ;
12752: GO 12552
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12754: LD_VAR 0 12
12758: PUSH
12759: LD_INT 1
12761: ARRAY
12762: PPUSH
12763: CALL_OW 266
12767: PUSH
12768: LD_INT 5
12770: EQUAL
12771: IFFALSE 12845
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12773: LD_VAR 0 12
12777: PUSH
12778: LD_INT 1
12780: ARRAY
12781: PPUSH
12782: CALL_OW 313
12786: PUSH
12787: LD_INT 3
12789: LESS
12790: IFFALSE 12826
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12792: LD_INT 0
12794: PPUSH
12795: LD_INT 5
12797: PUSH
12798: LD_INT 8
12800: PUSH
12801: LD_INT 9
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: LIST
12808: PUSH
12809: LD_VAR 0 17
12813: ARRAY
12814: PPUSH
12815: LD_VAR 0 4
12819: PPUSH
12820: CALL_OW 380
12824: GO 12843
// PrepareHuman ( false , i , skill ) ;
12826: LD_INT 0
12828: PPUSH
12829: LD_VAR 0 8
12833: PPUSH
12834: LD_VAR 0 4
12838: PPUSH
12839: CALL_OW 380
// end else
12843: GO 12862
// PrepareHuman ( false , i , skill ) ;
12845: LD_INT 0
12847: PPUSH
12848: LD_VAR 0 8
12852: PPUSH
12853: LD_VAR 0 4
12857: PPUSH
12858: CALL_OW 380
// un := CreateHuman ;
12862: LD_ADDR_VAR 0 14
12866: PUSH
12867: CALL_OW 44
12871: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12872: LD_ADDR_VAR 0 7
12876: PUSH
12877: LD_VAR 0 7
12881: PPUSH
12882: LD_INT 1
12884: PPUSH
12885: LD_VAR 0 14
12889: PPUSH
12890: CALL_OW 2
12894: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12895: LD_VAR 0 14
12899: PPUSH
12900: LD_VAR 0 12
12904: PUSH
12905: LD_INT 1
12907: ARRAY
12908: PPUSH
12909: CALL_OW 52
// end ;
12913: GO 12552
12915: POP
12916: POP
// end ;
12917: GO 11854
12919: POP
12920: POP
// result := result ^ buildings ;
12921: LD_ADDR_VAR 0 7
12925: PUSH
12926: LD_VAR 0 7
12930: PUSH
12931: LD_VAR 0 18
12935: ADD
12936: ST_TO_ADDR
// end else
12937: GO 13080
// begin for i = 1 to personel do
12939: LD_ADDR_VAR 0 8
12943: PUSH
12944: DOUBLE
12945: LD_INT 1
12947: DEC
12948: ST_TO_ADDR
12949: LD_VAR 0 6
12953: PUSH
12954: FOR_TO
12955: IFFALSE 13078
// begin if i > 4 then
12957: LD_VAR 0 8
12961: PUSH
12962: LD_INT 4
12964: GREATER
12965: IFFALSE 12969
// break ;
12967: GO 13078
// x := personel [ i ] ;
12969: LD_ADDR_VAR 0 13
12973: PUSH
12974: LD_VAR 0 6
12978: PUSH
12979: LD_VAR 0 8
12983: ARRAY
12984: ST_TO_ADDR
// if x = - 1 then
12985: LD_VAR 0 13
12989: PUSH
12990: LD_INT 1
12992: NEG
12993: EQUAL
12994: IFFALSE 12998
// continue ;
12996: GO 12954
// PrepareHuman ( false , i , skill ) ;
12998: LD_INT 0
13000: PPUSH
13001: LD_VAR 0 8
13005: PPUSH
13006: LD_VAR 0 4
13010: PPUSH
13011: CALL_OW 380
// un := CreateHuman ;
13015: LD_ADDR_VAR 0 14
13019: PUSH
13020: CALL_OW 44
13024: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13025: LD_VAR 0 14
13029: PPUSH
13030: LD_VAR 0 1
13034: PPUSH
13035: CALL_OW 250
13039: PPUSH
13040: LD_VAR 0 1
13044: PPUSH
13045: CALL_OW 251
13049: PPUSH
13050: LD_INT 10
13052: PPUSH
13053: LD_INT 0
13055: PPUSH
13056: CALL_OW 50
// result := result ^ un ;
13060: LD_ADDR_VAR 0 7
13064: PUSH
13065: LD_VAR 0 7
13069: PUSH
13070: LD_VAR 0 14
13074: ADD
13075: ST_TO_ADDR
// end ;
13076: GO 12954
13078: POP
13079: POP
// end ; end ;
13080: LD_VAR 0 7
13084: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13085: LD_INT 0
13087: PPUSH
13088: PPUSH
13089: PPUSH
13090: PPUSH
13091: PPUSH
13092: PPUSH
13093: PPUSH
13094: PPUSH
13095: PPUSH
13096: PPUSH
13097: PPUSH
13098: PPUSH
13099: PPUSH
13100: PPUSH
13101: PPUSH
13102: PPUSH
// result := false ;
13103: LD_ADDR_VAR 0 3
13107: PUSH
13108: LD_INT 0
13110: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13111: LD_VAR 0 1
13115: NOT
13116: PUSH
13117: LD_VAR 0 1
13121: PPUSH
13122: CALL_OW 266
13126: PUSH
13127: LD_INT 32
13129: PUSH
13130: LD_INT 33
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: IN
13137: NOT
13138: OR
13139: IFFALSE 13143
// exit ;
13141: GO 14252
// nat := GetNation ( tower ) ;
13143: LD_ADDR_VAR 0 12
13147: PUSH
13148: LD_VAR 0 1
13152: PPUSH
13153: CALL_OW 248
13157: ST_TO_ADDR
// side := GetSide ( tower ) ;
13158: LD_ADDR_VAR 0 16
13162: PUSH
13163: LD_VAR 0 1
13167: PPUSH
13168: CALL_OW 255
13172: ST_TO_ADDR
// x := GetX ( tower ) ;
13173: LD_ADDR_VAR 0 10
13177: PUSH
13178: LD_VAR 0 1
13182: PPUSH
13183: CALL_OW 250
13187: ST_TO_ADDR
// y := GetY ( tower ) ;
13188: LD_ADDR_VAR 0 11
13192: PUSH
13193: LD_VAR 0 1
13197: PPUSH
13198: CALL_OW 251
13202: ST_TO_ADDR
// if not x or not y then
13203: LD_VAR 0 10
13207: NOT
13208: PUSH
13209: LD_VAR 0 11
13213: NOT
13214: OR
13215: IFFALSE 13219
// exit ;
13217: GO 14252
// weapon := 0 ;
13219: LD_ADDR_VAR 0 18
13223: PUSH
13224: LD_INT 0
13226: ST_TO_ADDR
// fac_list := [ ] ;
13227: LD_ADDR_VAR 0 17
13231: PUSH
13232: EMPTY
13233: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13234: LD_ADDR_VAR 0 6
13238: PUSH
13239: LD_VAR 0 1
13243: PPUSH
13244: CALL_OW 274
13248: PPUSH
13249: LD_VAR 0 2
13253: PPUSH
13254: LD_INT 0
13256: PPUSH
13257: CALL 10823 0 3
13261: PPUSH
13262: LD_INT 30
13264: PUSH
13265: LD_INT 3
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: PPUSH
13272: CALL_OW 72
13276: ST_TO_ADDR
// if not factories then
13277: LD_VAR 0 6
13281: NOT
13282: IFFALSE 13286
// exit ;
13284: GO 14252
// for i in factories do
13286: LD_ADDR_VAR 0 8
13290: PUSH
13291: LD_VAR 0 6
13295: PUSH
13296: FOR_IN
13297: IFFALSE 13322
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13299: LD_ADDR_VAR 0 17
13303: PUSH
13304: LD_VAR 0 17
13308: PUSH
13309: LD_VAR 0 8
13313: PPUSH
13314: CALL_OW 478
13318: UNION
13319: ST_TO_ADDR
13320: GO 13296
13322: POP
13323: POP
// if not fac_list then
13324: LD_VAR 0 17
13328: NOT
13329: IFFALSE 13333
// exit ;
13331: GO 14252
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13333: LD_ADDR_VAR 0 5
13337: PUSH
13338: LD_INT 4
13340: PUSH
13341: LD_INT 5
13343: PUSH
13344: LD_INT 9
13346: PUSH
13347: LD_INT 10
13349: PUSH
13350: LD_INT 6
13352: PUSH
13353: LD_INT 7
13355: PUSH
13356: LD_INT 11
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: PUSH
13368: LD_INT 27
13370: PUSH
13371: LD_INT 28
13373: PUSH
13374: LD_INT 26
13376: PUSH
13377: LD_INT 30
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: PUSH
13386: LD_INT 43
13388: PUSH
13389: LD_INT 44
13391: PUSH
13392: LD_INT 46
13394: PUSH
13395: LD_INT 45
13397: PUSH
13398: LD_INT 47
13400: PUSH
13401: LD_INT 49
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: LIST
13416: PUSH
13417: LD_VAR 0 12
13421: ARRAY
13422: ST_TO_ADDR
// list := list isect fac_list ;
13423: LD_ADDR_VAR 0 5
13427: PUSH
13428: LD_VAR 0 5
13432: PUSH
13433: LD_VAR 0 17
13437: ISECT
13438: ST_TO_ADDR
// if not list then
13439: LD_VAR 0 5
13443: NOT
13444: IFFALSE 13448
// exit ;
13446: GO 14252
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13448: LD_VAR 0 12
13452: PUSH
13453: LD_INT 3
13455: EQUAL
13456: PUSH
13457: LD_INT 49
13459: PUSH
13460: LD_VAR 0 5
13464: IN
13465: AND
13466: PUSH
13467: LD_INT 31
13469: PPUSH
13470: LD_VAR 0 16
13474: PPUSH
13475: CALL_OW 321
13479: PUSH
13480: LD_INT 2
13482: EQUAL
13483: AND
13484: IFFALSE 13544
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13486: LD_INT 22
13488: PUSH
13489: LD_VAR 0 16
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: LD_INT 35
13500: PUSH
13501: LD_INT 49
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PUSH
13508: LD_INT 91
13510: PUSH
13511: LD_VAR 0 1
13515: PUSH
13516: LD_INT 10
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: LIST
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: LIST
13528: PPUSH
13529: CALL_OW 69
13533: NOT
13534: IFFALSE 13544
// weapon := ru_time_lapser ;
13536: LD_ADDR_VAR 0 18
13540: PUSH
13541: LD_INT 49
13543: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13544: LD_VAR 0 12
13548: PUSH
13549: LD_INT 1
13551: PUSH
13552: LD_INT 2
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: IN
13559: PUSH
13560: LD_INT 11
13562: PUSH
13563: LD_VAR 0 5
13567: IN
13568: PUSH
13569: LD_INT 30
13571: PUSH
13572: LD_VAR 0 5
13576: IN
13577: OR
13578: AND
13579: PUSH
13580: LD_INT 6
13582: PPUSH
13583: LD_VAR 0 16
13587: PPUSH
13588: CALL_OW 321
13592: PUSH
13593: LD_INT 2
13595: EQUAL
13596: AND
13597: IFFALSE 13762
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13599: LD_INT 22
13601: PUSH
13602: LD_VAR 0 16
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: PUSH
13611: LD_INT 2
13613: PUSH
13614: LD_INT 35
13616: PUSH
13617: LD_INT 11
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: LD_INT 35
13626: PUSH
13627: LD_INT 30
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: LIST
13638: PUSH
13639: LD_INT 91
13641: PUSH
13642: LD_VAR 0 1
13646: PUSH
13647: LD_INT 18
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: LIST
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: LIST
13659: PPUSH
13660: CALL_OW 69
13664: NOT
13665: PUSH
13666: LD_INT 22
13668: PUSH
13669: LD_VAR 0 16
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PUSH
13678: LD_INT 2
13680: PUSH
13681: LD_INT 30
13683: PUSH
13684: LD_INT 32
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: PUSH
13691: LD_INT 30
13693: PUSH
13694: LD_INT 33
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: LIST
13705: PUSH
13706: LD_INT 91
13708: PUSH
13709: LD_VAR 0 1
13713: PUSH
13714: LD_INT 12
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: LIST
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: LIST
13726: PUSH
13727: EMPTY
13728: LIST
13729: PPUSH
13730: CALL_OW 69
13734: PUSH
13735: LD_INT 2
13737: GREATER
13738: AND
13739: IFFALSE 13762
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13741: LD_ADDR_VAR 0 18
13745: PUSH
13746: LD_INT 11
13748: PUSH
13749: LD_INT 30
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: PUSH
13756: LD_VAR 0 12
13760: ARRAY
13761: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13762: LD_VAR 0 18
13766: NOT
13767: PUSH
13768: LD_INT 40
13770: PPUSH
13771: LD_VAR 0 16
13775: PPUSH
13776: CALL_OW 321
13780: PUSH
13781: LD_INT 2
13783: EQUAL
13784: AND
13785: PUSH
13786: LD_INT 7
13788: PUSH
13789: LD_VAR 0 5
13793: IN
13794: PUSH
13795: LD_INT 28
13797: PUSH
13798: LD_VAR 0 5
13802: IN
13803: OR
13804: PUSH
13805: LD_INT 45
13807: PUSH
13808: LD_VAR 0 5
13812: IN
13813: OR
13814: AND
13815: IFFALSE 14069
// begin hex := GetHexInfo ( x , y ) ;
13817: LD_ADDR_VAR 0 4
13821: PUSH
13822: LD_VAR 0 10
13826: PPUSH
13827: LD_VAR 0 11
13831: PPUSH
13832: CALL_OW 546
13836: ST_TO_ADDR
// if hex [ 1 ] then
13837: LD_VAR 0 4
13841: PUSH
13842: LD_INT 1
13844: ARRAY
13845: IFFALSE 13849
// exit ;
13847: GO 14252
// height := hex [ 2 ] ;
13849: LD_ADDR_VAR 0 15
13853: PUSH
13854: LD_VAR 0 4
13858: PUSH
13859: LD_INT 2
13861: ARRAY
13862: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13863: LD_ADDR_VAR 0 14
13867: PUSH
13868: LD_INT 0
13870: PUSH
13871: LD_INT 2
13873: PUSH
13874: LD_INT 3
13876: PUSH
13877: LD_INT 5
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: ST_TO_ADDR
// for i in tmp do
13886: LD_ADDR_VAR 0 8
13890: PUSH
13891: LD_VAR 0 14
13895: PUSH
13896: FOR_IN
13897: IFFALSE 14067
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13899: LD_ADDR_VAR 0 9
13903: PUSH
13904: LD_VAR 0 10
13908: PPUSH
13909: LD_VAR 0 8
13913: PPUSH
13914: LD_INT 5
13916: PPUSH
13917: CALL_OW 272
13921: PUSH
13922: LD_VAR 0 11
13926: PPUSH
13927: LD_VAR 0 8
13931: PPUSH
13932: LD_INT 5
13934: PPUSH
13935: CALL_OW 273
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13944: LD_VAR 0 9
13948: PUSH
13949: LD_INT 1
13951: ARRAY
13952: PPUSH
13953: LD_VAR 0 9
13957: PUSH
13958: LD_INT 2
13960: ARRAY
13961: PPUSH
13962: CALL_OW 488
13966: IFFALSE 14065
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13968: LD_ADDR_VAR 0 4
13972: PUSH
13973: LD_VAR 0 9
13977: PUSH
13978: LD_INT 1
13980: ARRAY
13981: PPUSH
13982: LD_VAR 0 9
13986: PUSH
13987: LD_INT 2
13989: ARRAY
13990: PPUSH
13991: CALL_OW 546
13995: ST_TO_ADDR
// if hex [ 1 ] then
13996: LD_VAR 0 4
14000: PUSH
14001: LD_INT 1
14003: ARRAY
14004: IFFALSE 14008
// continue ;
14006: GO 13896
// h := hex [ 2 ] ;
14008: LD_ADDR_VAR 0 13
14012: PUSH
14013: LD_VAR 0 4
14017: PUSH
14018: LD_INT 2
14020: ARRAY
14021: ST_TO_ADDR
// if h + 7 < height then
14022: LD_VAR 0 13
14026: PUSH
14027: LD_INT 7
14029: PLUS
14030: PUSH
14031: LD_VAR 0 15
14035: LESS
14036: IFFALSE 14065
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14038: LD_ADDR_VAR 0 18
14042: PUSH
14043: LD_INT 7
14045: PUSH
14046: LD_INT 28
14048: PUSH
14049: LD_INT 45
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: LIST
14056: PUSH
14057: LD_VAR 0 12
14061: ARRAY
14062: ST_TO_ADDR
// break ;
14063: GO 14067
// end ; end ; end ;
14065: GO 13896
14067: POP
14068: POP
// end ; if not weapon then
14069: LD_VAR 0 18
14073: NOT
14074: IFFALSE 14134
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14076: LD_ADDR_VAR 0 5
14080: PUSH
14081: LD_VAR 0 5
14085: PUSH
14086: LD_INT 11
14088: PUSH
14089: LD_INT 30
14091: PUSH
14092: LD_INT 49
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: LIST
14099: DIFF
14100: ST_TO_ADDR
// if not list then
14101: LD_VAR 0 5
14105: NOT
14106: IFFALSE 14110
// exit ;
14108: GO 14252
// weapon := list [ rand ( 1 , list ) ] ;
14110: LD_ADDR_VAR 0 18
14114: PUSH
14115: LD_VAR 0 5
14119: PUSH
14120: LD_INT 1
14122: PPUSH
14123: LD_VAR 0 5
14127: PPUSH
14128: CALL_OW 12
14132: ARRAY
14133: ST_TO_ADDR
// end ; if weapon then
14134: LD_VAR 0 18
14138: IFFALSE 14252
// begin tmp := CostOfWeapon ( weapon ) ;
14140: LD_ADDR_VAR 0 14
14144: PUSH
14145: LD_VAR 0 18
14149: PPUSH
14150: CALL_OW 451
14154: ST_TO_ADDR
// j := GetBase ( tower ) ;
14155: LD_ADDR_VAR 0 9
14159: PUSH
14160: LD_VAR 0 1
14164: PPUSH
14165: CALL_OW 274
14169: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14170: LD_VAR 0 9
14174: PPUSH
14175: LD_INT 1
14177: PPUSH
14178: CALL_OW 275
14182: PUSH
14183: LD_VAR 0 14
14187: PUSH
14188: LD_INT 1
14190: ARRAY
14191: GREATEREQUAL
14192: PUSH
14193: LD_VAR 0 9
14197: PPUSH
14198: LD_INT 2
14200: PPUSH
14201: CALL_OW 275
14205: PUSH
14206: LD_VAR 0 14
14210: PUSH
14211: LD_INT 2
14213: ARRAY
14214: GREATEREQUAL
14215: AND
14216: PUSH
14217: LD_VAR 0 9
14221: PPUSH
14222: LD_INT 3
14224: PPUSH
14225: CALL_OW 275
14229: PUSH
14230: LD_VAR 0 14
14234: PUSH
14235: LD_INT 3
14237: ARRAY
14238: GREATEREQUAL
14239: AND
14240: IFFALSE 14252
// result := weapon ;
14242: LD_ADDR_VAR 0 3
14246: PUSH
14247: LD_VAR 0 18
14251: ST_TO_ADDR
// end ; end ;
14252: LD_VAR 0 3
14256: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14257: LD_INT 0
14259: PPUSH
14260: PPUSH
// result := true ;
14261: LD_ADDR_VAR 0 3
14265: PUSH
14266: LD_INT 1
14268: ST_TO_ADDR
// if array1 = array2 then
14269: LD_VAR 0 1
14273: PUSH
14274: LD_VAR 0 2
14278: EQUAL
14279: IFFALSE 14339
// begin for i = 1 to array1 do
14281: LD_ADDR_VAR 0 4
14285: PUSH
14286: DOUBLE
14287: LD_INT 1
14289: DEC
14290: ST_TO_ADDR
14291: LD_VAR 0 1
14295: PUSH
14296: FOR_TO
14297: IFFALSE 14335
// if array1 [ i ] <> array2 [ i ] then
14299: LD_VAR 0 1
14303: PUSH
14304: LD_VAR 0 4
14308: ARRAY
14309: PUSH
14310: LD_VAR 0 2
14314: PUSH
14315: LD_VAR 0 4
14319: ARRAY
14320: NONEQUAL
14321: IFFALSE 14333
// begin result := false ;
14323: LD_ADDR_VAR 0 3
14327: PUSH
14328: LD_INT 0
14330: ST_TO_ADDR
// break ;
14331: GO 14335
// end ;
14333: GO 14296
14335: POP
14336: POP
// end else
14337: GO 14347
// result := false ;
14339: LD_ADDR_VAR 0 3
14343: PUSH
14344: LD_INT 0
14346: ST_TO_ADDR
// end ;
14347: LD_VAR 0 3
14351: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14352: LD_INT 0
14354: PPUSH
14355: PPUSH
// if not array1 or not array2 then
14356: LD_VAR 0 1
14360: NOT
14361: PUSH
14362: LD_VAR 0 2
14366: NOT
14367: OR
14368: IFFALSE 14372
// exit ;
14370: GO 14436
// result := true ;
14372: LD_ADDR_VAR 0 3
14376: PUSH
14377: LD_INT 1
14379: ST_TO_ADDR
// for i = 1 to array1 do
14380: LD_ADDR_VAR 0 4
14384: PUSH
14385: DOUBLE
14386: LD_INT 1
14388: DEC
14389: ST_TO_ADDR
14390: LD_VAR 0 1
14394: PUSH
14395: FOR_TO
14396: IFFALSE 14434
// if array1 [ i ] <> array2 [ i ] then
14398: LD_VAR 0 1
14402: PUSH
14403: LD_VAR 0 4
14407: ARRAY
14408: PUSH
14409: LD_VAR 0 2
14413: PUSH
14414: LD_VAR 0 4
14418: ARRAY
14419: NONEQUAL
14420: IFFALSE 14432
// begin result := false ;
14422: LD_ADDR_VAR 0 3
14426: PUSH
14427: LD_INT 0
14429: ST_TO_ADDR
// break ;
14430: GO 14434
// end ;
14432: GO 14395
14434: POP
14435: POP
// end ;
14436: LD_VAR 0 3
14440: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14441: LD_INT 0
14443: PPUSH
14444: PPUSH
14445: PPUSH
// pom := GetBase ( fac ) ;
14446: LD_ADDR_VAR 0 5
14450: PUSH
14451: LD_VAR 0 1
14455: PPUSH
14456: CALL_OW 274
14460: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14461: LD_ADDR_VAR 0 4
14465: PUSH
14466: LD_VAR 0 2
14470: PUSH
14471: LD_INT 1
14473: ARRAY
14474: PPUSH
14475: LD_VAR 0 2
14479: PUSH
14480: LD_INT 2
14482: ARRAY
14483: PPUSH
14484: LD_VAR 0 2
14488: PUSH
14489: LD_INT 3
14491: ARRAY
14492: PPUSH
14493: LD_VAR 0 2
14497: PUSH
14498: LD_INT 4
14500: ARRAY
14501: PPUSH
14502: CALL_OW 449
14506: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14507: LD_ADDR_VAR 0 3
14511: PUSH
14512: LD_VAR 0 5
14516: PPUSH
14517: LD_INT 1
14519: PPUSH
14520: CALL_OW 275
14524: PUSH
14525: LD_VAR 0 4
14529: PUSH
14530: LD_INT 1
14532: ARRAY
14533: GREATEREQUAL
14534: PUSH
14535: LD_VAR 0 5
14539: PPUSH
14540: LD_INT 2
14542: PPUSH
14543: CALL_OW 275
14547: PUSH
14548: LD_VAR 0 4
14552: PUSH
14553: LD_INT 2
14555: ARRAY
14556: GREATEREQUAL
14557: AND
14558: PUSH
14559: LD_VAR 0 5
14563: PPUSH
14564: LD_INT 3
14566: PPUSH
14567: CALL_OW 275
14571: PUSH
14572: LD_VAR 0 4
14576: PUSH
14577: LD_INT 3
14579: ARRAY
14580: GREATEREQUAL
14581: AND
14582: ST_TO_ADDR
// end ;
14583: LD_VAR 0 3
14587: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14588: LD_INT 0
14590: PPUSH
14591: PPUSH
14592: PPUSH
14593: PPUSH
// pom := GetBase ( building ) ;
14594: LD_ADDR_VAR 0 3
14598: PUSH
14599: LD_VAR 0 1
14603: PPUSH
14604: CALL_OW 274
14608: ST_TO_ADDR
// if not pom then
14609: LD_VAR 0 3
14613: NOT
14614: IFFALSE 14618
// exit ;
14616: GO 14788
// btype := GetBType ( building ) ;
14618: LD_ADDR_VAR 0 5
14622: PUSH
14623: LD_VAR 0 1
14627: PPUSH
14628: CALL_OW 266
14632: ST_TO_ADDR
// if btype = b_armoury then
14633: LD_VAR 0 5
14637: PUSH
14638: LD_INT 4
14640: EQUAL
14641: IFFALSE 14651
// btype := b_barracks ;
14643: LD_ADDR_VAR 0 5
14647: PUSH
14648: LD_INT 5
14650: ST_TO_ADDR
// if btype = b_depot then
14651: LD_VAR 0 5
14655: PUSH
14656: LD_INT 0
14658: EQUAL
14659: IFFALSE 14669
// btype := b_warehouse ;
14661: LD_ADDR_VAR 0 5
14665: PUSH
14666: LD_INT 1
14668: ST_TO_ADDR
// if btype = b_workshop then
14669: LD_VAR 0 5
14673: PUSH
14674: LD_INT 2
14676: EQUAL
14677: IFFALSE 14687
// btype := b_factory ;
14679: LD_ADDR_VAR 0 5
14683: PUSH
14684: LD_INT 3
14686: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14687: LD_ADDR_VAR 0 4
14691: PUSH
14692: LD_VAR 0 5
14696: PPUSH
14697: LD_VAR 0 1
14701: PPUSH
14702: CALL_OW 248
14706: PPUSH
14707: CALL_OW 450
14711: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14712: LD_ADDR_VAR 0 2
14716: PUSH
14717: LD_VAR 0 3
14721: PPUSH
14722: LD_INT 1
14724: PPUSH
14725: CALL_OW 275
14729: PUSH
14730: LD_VAR 0 4
14734: PUSH
14735: LD_INT 1
14737: ARRAY
14738: GREATEREQUAL
14739: PUSH
14740: LD_VAR 0 3
14744: PPUSH
14745: LD_INT 2
14747: PPUSH
14748: CALL_OW 275
14752: PUSH
14753: LD_VAR 0 4
14757: PUSH
14758: LD_INT 2
14760: ARRAY
14761: GREATEREQUAL
14762: AND
14763: PUSH
14764: LD_VAR 0 3
14768: PPUSH
14769: LD_INT 3
14771: PPUSH
14772: CALL_OW 275
14776: PUSH
14777: LD_VAR 0 4
14781: PUSH
14782: LD_INT 3
14784: ARRAY
14785: GREATEREQUAL
14786: AND
14787: ST_TO_ADDR
// end ;
14788: LD_VAR 0 2
14792: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14793: LD_INT 0
14795: PPUSH
14796: PPUSH
14797: PPUSH
// pom := GetBase ( building ) ;
14798: LD_ADDR_VAR 0 4
14802: PUSH
14803: LD_VAR 0 1
14807: PPUSH
14808: CALL_OW 274
14812: ST_TO_ADDR
// if not pom then
14813: LD_VAR 0 4
14817: NOT
14818: IFFALSE 14822
// exit ;
14820: GO 14923
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14822: LD_ADDR_VAR 0 5
14826: PUSH
14827: LD_VAR 0 2
14831: PPUSH
14832: LD_VAR 0 1
14836: PPUSH
14837: CALL_OW 248
14841: PPUSH
14842: CALL_OW 450
14846: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14847: LD_ADDR_VAR 0 3
14851: PUSH
14852: LD_VAR 0 4
14856: PPUSH
14857: LD_INT 1
14859: PPUSH
14860: CALL_OW 275
14864: PUSH
14865: LD_VAR 0 5
14869: PUSH
14870: LD_INT 1
14872: ARRAY
14873: GREATEREQUAL
14874: PUSH
14875: LD_VAR 0 4
14879: PPUSH
14880: LD_INT 2
14882: PPUSH
14883: CALL_OW 275
14887: PUSH
14888: LD_VAR 0 5
14892: PUSH
14893: LD_INT 2
14895: ARRAY
14896: GREATEREQUAL
14897: AND
14898: PUSH
14899: LD_VAR 0 4
14903: PPUSH
14904: LD_INT 3
14906: PPUSH
14907: CALL_OW 275
14911: PUSH
14912: LD_VAR 0 5
14916: PUSH
14917: LD_INT 3
14919: ARRAY
14920: GREATEREQUAL
14921: AND
14922: ST_TO_ADDR
// end ;
14923: LD_VAR 0 3
14927: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14928: LD_INT 0
14930: PPUSH
14931: PPUSH
14932: PPUSH
14933: PPUSH
14934: PPUSH
14935: PPUSH
14936: PPUSH
14937: PPUSH
14938: PPUSH
14939: PPUSH
14940: PPUSH
// result := false ;
14941: LD_ADDR_VAR 0 8
14945: PUSH
14946: LD_INT 0
14948: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14949: LD_VAR 0 5
14953: NOT
14954: PUSH
14955: LD_VAR 0 1
14959: NOT
14960: OR
14961: PUSH
14962: LD_VAR 0 2
14966: NOT
14967: OR
14968: PUSH
14969: LD_VAR 0 3
14973: NOT
14974: OR
14975: IFFALSE 14979
// exit ;
14977: GO 15793
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
14979: LD_ADDR_VAR 0 14
14983: PUSH
14984: LD_VAR 0 1
14988: PPUSH
14989: LD_VAR 0 2
14993: PPUSH
14994: LD_VAR 0 3
14998: PPUSH
14999: LD_VAR 0 4
15003: PPUSH
15004: LD_VAR 0 5
15008: PUSH
15009: LD_INT 1
15011: ARRAY
15012: PPUSH
15013: CALL_OW 248
15017: PPUSH
15018: LD_INT 0
15020: PPUSH
15021: CALL 17030 0 6
15025: ST_TO_ADDR
// if not hexes then
15026: LD_VAR 0 14
15030: NOT
15031: IFFALSE 15035
// exit ;
15033: GO 15793
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15035: LD_ADDR_VAR 0 17
15039: PUSH
15040: LD_VAR 0 5
15044: PPUSH
15045: LD_INT 22
15047: PUSH
15048: LD_VAR 0 13
15052: PPUSH
15053: CALL_OW 255
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: PUSH
15062: LD_INT 2
15064: PUSH
15065: LD_INT 30
15067: PUSH
15068: LD_INT 0
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: PUSH
15075: LD_INT 30
15077: PUSH
15078: LD_INT 1
15080: PUSH
15081: EMPTY
15082: LIST
15083: LIST
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: LIST
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: PPUSH
15094: CALL_OW 72
15098: ST_TO_ADDR
// for i = 1 to hexes do
15099: LD_ADDR_VAR 0 9
15103: PUSH
15104: DOUBLE
15105: LD_INT 1
15107: DEC
15108: ST_TO_ADDR
15109: LD_VAR 0 14
15113: PUSH
15114: FOR_TO
15115: IFFALSE 15791
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15117: LD_ADDR_VAR 0 13
15121: PUSH
15122: LD_VAR 0 14
15126: PUSH
15127: LD_VAR 0 9
15131: ARRAY
15132: PUSH
15133: LD_INT 1
15135: ARRAY
15136: PPUSH
15137: LD_VAR 0 14
15141: PUSH
15142: LD_VAR 0 9
15146: ARRAY
15147: PUSH
15148: LD_INT 2
15150: ARRAY
15151: PPUSH
15152: CALL_OW 428
15156: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15157: LD_VAR 0 14
15161: PUSH
15162: LD_VAR 0 9
15166: ARRAY
15167: PUSH
15168: LD_INT 1
15170: ARRAY
15171: PPUSH
15172: LD_VAR 0 14
15176: PUSH
15177: LD_VAR 0 9
15181: ARRAY
15182: PUSH
15183: LD_INT 2
15185: ARRAY
15186: PPUSH
15187: CALL_OW 351
15191: PUSH
15192: LD_VAR 0 14
15196: PUSH
15197: LD_VAR 0 9
15201: ARRAY
15202: PUSH
15203: LD_INT 1
15205: ARRAY
15206: PPUSH
15207: LD_VAR 0 14
15211: PUSH
15212: LD_VAR 0 9
15216: ARRAY
15217: PUSH
15218: LD_INT 2
15220: ARRAY
15221: PPUSH
15222: CALL_OW 488
15226: NOT
15227: OR
15228: PUSH
15229: LD_VAR 0 13
15233: PPUSH
15234: CALL_OW 247
15238: PUSH
15239: LD_INT 3
15241: EQUAL
15242: OR
15243: IFFALSE 15249
// exit ;
15245: POP
15246: POP
15247: GO 15793
// if not tmp then
15249: LD_VAR 0 13
15253: NOT
15254: IFFALSE 15258
// continue ;
15256: GO 15114
// result := true ;
15258: LD_ADDR_VAR 0 8
15262: PUSH
15263: LD_INT 1
15265: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15266: LD_VAR 0 6
15270: PUSH
15271: LD_VAR 0 13
15275: PPUSH
15276: CALL_OW 247
15280: PUSH
15281: LD_INT 2
15283: EQUAL
15284: AND
15285: PUSH
15286: LD_VAR 0 13
15290: PPUSH
15291: CALL_OW 263
15295: PUSH
15296: LD_INT 1
15298: EQUAL
15299: AND
15300: IFFALSE 15464
// begin if IsDrivenBy ( tmp ) then
15302: LD_VAR 0 13
15306: PPUSH
15307: CALL_OW 311
15311: IFFALSE 15315
// continue ;
15313: GO 15114
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15315: LD_VAR 0 6
15319: PPUSH
15320: LD_INT 3
15322: PUSH
15323: LD_INT 60
15325: PUSH
15326: EMPTY
15327: LIST
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: PUSH
15333: LD_INT 3
15335: PUSH
15336: LD_INT 55
15338: PUSH
15339: EMPTY
15340: LIST
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: PPUSH
15350: CALL_OW 72
15354: IFFALSE 15462
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15356: LD_ADDR_VAR 0 18
15360: PUSH
15361: LD_VAR 0 6
15365: PPUSH
15366: LD_INT 3
15368: PUSH
15369: LD_INT 60
15371: PUSH
15372: EMPTY
15373: LIST
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: PUSH
15379: LD_INT 3
15381: PUSH
15382: LD_INT 55
15384: PUSH
15385: EMPTY
15386: LIST
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: PPUSH
15396: CALL_OW 72
15400: PUSH
15401: LD_INT 1
15403: ARRAY
15404: ST_TO_ADDR
// if IsInUnit ( driver ) then
15405: LD_VAR 0 18
15409: PPUSH
15410: CALL_OW 310
15414: IFFALSE 15425
// ComExit ( driver ) ;
15416: LD_VAR 0 18
15420: PPUSH
15421: CALL 40735 0 1
// AddComEnterUnit ( driver , tmp ) ;
15425: LD_VAR 0 18
15429: PPUSH
15430: LD_VAR 0 13
15434: PPUSH
15435: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15439: LD_VAR 0 18
15443: PPUSH
15444: LD_VAR 0 7
15448: PPUSH
15449: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15453: LD_VAR 0 18
15457: PPUSH
15458: CALL_OW 181
// end ; continue ;
15462: GO 15114
// end ; if not cleaners or not tmp in cleaners then
15464: LD_VAR 0 6
15468: NOT
15469: PUSH
15470: LD_VAR 0 13
15474: PUSH
15475: LD_VAR 0 6
15479: IN
15480: NOT
15481: OR
15482: IFFALSE 15789
// begin if dep then
15484: LD_VAR 0 17
15488: IFFALSE 15624
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15490: LD_ADDR_VAR 0 16
15494: PUSH
15495: LD_VAR 0 17
15499: PUSH
15500: LD_INT 1
15502: ARRAY
15503: PPUSH
15504: CALL_OW 250
15508: PPUSH
15509: LD_VAR 0 17
15513: PUSH
15514: LD_INT 1
15516: ARRAY
15517: PPUSH
15518: CALL_OW 254
15522: PPUSH
15523: LD_INT 5
15525: PPUSH
15526: CALL_OW 272
15530: PUSH
15531: LD_VAR 0 17
15535: PUSH
15536: LD_INT 1
15538: ARRAY
15539: PPUSH
15540: CALL_OW 251
15544: PPUSH
15545: LD_VAR 0 17
15549: PUSH
15550: LD_INT 1
15552: ARRAY
15553: PPUSH
15554: CALL_OW 254
15558: PPUSH
15559: LD_INT 5
15561: PPUSH
15562: CALL_OW 273
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15571: LD_VAR 0 16
15575: PUSH
15576: LD_INT 1
15578: ARRAY
15579: PPUSH
15580: LD_VAR 0 16
15584: PUSH
15585: LD_INT 2
15587: ARRAY
15588: PPUSH
15589: CALL_OW 488
15593: IFFALSE 15624
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15595: LD_VAR 0 13
15599: PPUSH
15600: LD_VAR 0 16
15604: PUSH
15605: LD_INT 1
15607: ARRAY
15608: PPUSH
15609: LD_VAR 0 16
15613: PUSH
15614: LD_INT 2
15616: ARRAY
15617: PPUSH
15618: CALL_OW 111
// continue ;
15622: GO 15114
// end ; end ; r := GetDir ( tmp ) ;
15624: LD_ADDR_VAR 0 15
15628: PUSH
15629: LD_VAR 0 13
15633: PPUSH
15634: CALL_OW 254
15638: ST_TO_ADDR
// if r = 5 then
15639: LD_VAR 0 15
15643: PUSH
15644: LD_INT 5
15646: EQUAL
15647: IFFALSE 15657
// r := 0 ;
15649: LD_ADDR_VAR 0 15
15653: PUSH
15654: LD_INT 0
15656: ST_TO_ADDR
// for j = r to 5 do
15657: LD_ADDR_VAR 0 10
15661: PUSH
15662: DOUBLE
15663: LD_VAR 0 15
15667: DEC
15668: ST_TO_ADDR
15669: LD_INT 5
15671: PUSH
15672: FOR_TO
15673: IFFALSE 15787
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15675: LD_ADDR_VAR 0 11
15679: PUSH
15680: LD_VAR 0 13
15684: PPUSH
15685: CALL_OW 250
15689: PPUSH
15690: LD_VAR 0 10
15694: PPUSH
15695: LD_INT 2
15697: PPUSH
15698: CALL_OW 272
15702: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15703: LD_ADDR_VAR 0 12
15707: PUSH
15708: LD_VAR 0 13
15712: PPUSH
15713: CALL_OW 251
15717: PPUSH
15718: LD_VAR 0 10
15722: PPUSH
15723: LD_INT 2
15725: PPUSH
15726: CALL_OW 273
15730: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15731: LD_VAR 0 11
15735: PPUSH
15736: LD_VAR 0 12
15740: PPUSH
15741: CALL_OW 488
15745: PUSH
15746: LD_VAR 0 11
15750: PPUSH
15751: LD_VAR 0 12
15755: PPUSH
15756: CALL_OW 428
15760: NOT
15761: AND
15762: IFFALSE 15785
// begin ComMoveXY ( tmp , _x , _y ) ;
15764: LD_VAR 0 13
15768: PPUSH
15769: LD_VAR 0 11
15773: PPUSH
15774: LD_VAR 0 12
15778: PPUSH
15779: CALL_OW 111
// break ;
15783: GO 15787
// end ; end ;
15785: GO 15672
15787: POP
15788: POP
// end ; end ;
15789: GO 15114
15791: POP
15792: POP
// end ;
15793: LD_VAR 0 8
15797: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15798: LD_INT 0
15800: PPUSH
// result := true ;
15801: LD_ADDR_VAR 0 3
15805: PUSH
15806: LD_INT 1
15808: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15809: LD_VAR 0 2
15813: PUSH
15814: LD_INT 24
15816: DOUBLE
15817: EQUAL
15818: IFTRUE 15828
15820: LD_INT 33
15822: DOUBLE
15823: EQUAL
15824: IFTRUE 15828
15826: GO 15853
15828: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15829: LD_ADDR_VAR 0 3
15833: PUSH
15834: LD_INT 32
15836: PPUSH
15837: LD_VAR 0 1
15841: PPUSH
15842: CALL_OW 321
15846: PUSH
15847: LD_INT 2
15849: EQUAL
15850: ST_TO_ADDR
15851: GO 16173
15853: LD_INT 20
15855: DOUBLE
15856: EQUAL
15857: IFTRUE 15861
15859: GO 15886
15861: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15862: LD_ADDR_VAR 0 3
15866: PUSH
15867: LD_INT 6
15869: PPUSH
15870: LD_VAR 0 1
15874: PPUSH
15875: CALL_OW 321
15879: PUSH
15880: LD_INT 2
15882: EQUAL
15883: ST_TO_ADDR
15884: GO 16173
15886: LD_INT 22
15888: DOUBLE
15889: EQUAL
15890: IFTRUE 15900
15892: LD_INT 36
15894: DOUBLE
15895: EQUAL
15896: IFTRUE 15900
15898: GO 15925
15900: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15901: LD_ADDR_VAR 0 3
15905: PUSH
15906: LD_INT 15
15908: PPUSH
15909: LD_VAR 0 1
15913: PPUSH
15914: CALL_OW 321
15918: PUSH
15919: LD_INT 2
15921: EQUAL
15922: ST_TO_ADDR
15923: GO 16173
15925: LD_INT 30
15927: DOUBLE
15928: EQUAL
15929: IFTRUE 15933
15931: GO 15958
15933: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
15934: LD_ADDR_VAR 0 3
15938: PUSH
15939: LD_INT 20
15941: PPUSH
15942: LD_VAR 0 1
15946: PPUSH
15947: CALL_OW 321
15951: PUSH
15952: LD_INT 2
15954: EQUAL
15955: ST_TO_ADDR
15956: GO 16173
15958: LD_INT 28
15960: DOUBLE
15961: EQUAL
15962: IFTRUE 15972
15964: LD_INT 21
15966: DOUBLE
15967: EQUAL
15968: IFTRUE 15972
15970: GO 15997
15972: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
15973: LD_ADDR_VAR 0 3
15977: PUSH
15978: LD_INT 21
15980: PPUSH
15981: LD_VAR 0 1
15985: PPUSH
15986: CALL_OW 321
15990: PUSH
15991: LD_INT 2
15993: EQUAL
15994: ST_TO_ADDR
15995: GO 16173
15997: LD_INT 16
15999: DOUBLE
16000: EQUAL
16001: IFTRUE 16005
16003: GO 16032
16005: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16006: LD_ADDR_VAR 0 3
16010: PUSH
16011: LD_EXP 22
16015: PPUSH
16016: LD_VAR 0 1
16020: PPUSH
16021: CALL_OW 321
16025: PUSH
16026: LD_INT 2
16028: EQUAL
16029: ST_TO_ADDR
16030: GO 16173
16032: LD_INT 19
16034: DOUBLE
16035: EQUAL
16036: IFTRUE 16046
16038: LD_INT 23
16040: DOUBLE
16041: EQUAL
16042: IFTRUE 16046
16044: GO 16073
16046: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16047: LD_ADDR_VAR 0 3
16051: PUSH
16052: LD_EXP 21
16056: PPUSH
16057: LD_VAR 0 1
16061: PPUSH
16062: CALL_OW 321
16066: PUSH
16067: LD_INT 2
16069: EQUAL
16070: ST_TO_ADDR
16071: GO 16173
16073: LD_INT 17
16075: DOUBLE
16076: EQUAL
16077: IFTRUE 16081
16079: GO 16106
16081: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16082: LD_ADDR_VAR 0 3
16086: PUSH
16087: LD_INT 39
16089: PPUSH
16090: LD_VAR 0 1
16094: PPUSH
16095: CALL_OW 321
16099: PUSH
16100: LD_INT 2
16102: EQUAL
16103: ST_TO_ADDR
16104: GO 16173
16106: LD_INT 18
16108: DOUBLE
16109: EQUAL
16110: IFTRUE 16114
16112: GO 16139
16114: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16115: LD_ADDR_VAR 0 3
16119: PUSH
16120: LD_INT 40
16122: PPUSH
16123: LD_VAR 0 1
16127: PPUSH
16128: CALL_OW 321
16132: PUSH
16133: LD_INT 2
16135: EQUAL
16136: ST_TO_ADDR
16137: GO 16173
16139: LD_INT 27
16141: DOUBLE
16142: EQUAL
16143: IFTRUE 16147
16145: GO 16172
16147: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16148: LD_ADDR_VAR 0 3
16152: PUSH
16153: LD_INT 35
16155: PPUSH
16156: LD_VAR 0 1
16160: PPUSH
16161: CALL_OW 321
16165: PUSH
16166: LD_INT 2
16168: EQUAL
16169: ST_TO_ADDR
16170: GO 16173
16172: POP
// end ;
16173: LD_VAR 0 3
16177: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16178: LD_INT 0
16180: PPUSH
16181: PPUSH
16182: PPUSH
16183: PPUSH
16184: PPUSH
16185: PPUSH
16186: PPUSH
16187: PPUSH
16188: PPUSH
16189: PPUSH
16190: PPUSH
// result := false ;
16191: LD_ADDR_VAR 0 6
16195: PUSH
16196: LD_INT 0
16198: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16199: LD_VAR 0 1
16203: NOT
16204: PUSH
16205: LD_VAR 0 1
16209: PPUSH
16210: CALL_OW 266
16214: PUSH
16215: LD_INT 0
16217: PUSH
16218: LD_INT 1
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: IN
16225: NOT
16226: OR
16227: PUSH
16228: LD_VAR 0 2
16232: NOT
16233: OR
16234: PUSH
16235: LD_VAR 0 5
16239: PUSH
16240: LD_INT 0
16242: PUSH
16243: LD_INT 1
16245: PUSH
16246: LD_INT 2
16248: PUSH
16249: LD_INT 3
16251: PUSH
16252: LD_INT 4
16254: PUSH
16255: LD_INT 5
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: IN
16266: NOT
16267: OR
16268: PUSH
16269: LD_VAR 0 3
16273: PPUSH
16274: LD_VAR 0 4
16278: PPUSH
16279: CALL_OW 488
16283: NOT
16284: OR
16285: IFFALSE 16289
// exit ;
16287: GO 17025
// side := GetSide ( depot ) ;
16289: LD_ADDR_VAR 0 9
16293: PUSH
16294: LD_VAR 0 1
16298: PPUSH
16299: CALL_OW 255
16303: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16304: LD_VAR 0 9
16308: PPUSH
16309: LD_VAR 0 2
16313: PPUSH
16314: CALL 15798 0 2
16318: NOT
16319: IFFALSE 16323
// exit ;
16321: GO 17025
// pom := GetBase ( depot ) ;
16323: LD_ADDR_VAR 0 10
16327: PUSH
16328: LD_VAR 0 1
16332: PPUSH
16333: CALL_OW 274
16337: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16338: LD_ADDR_VAR 0 11
16342: PUSH
16343: LD_VAR 0 2
16347: PPUSH
16348: LD_VAR 0 1
16352: PPUSH
16353: CALL_OW 248
16357: PPUSH
16358: CALL_OW 450
16362: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16363: LD_VAR 0 10
16367: PPUSH
16368: LD_INT 1
16370: PPUSH
16371: CALL_OW 275
16375: PUSH
16376: LD_VAR 0 11
16380: PUSH
16381: LD_INT 1
16383: ARRAY
16384: GREATEREQUAL
16385: PUSH
16386: LD_VAR 0 10
16390: PPUSH
16391: LD_INT 2
16393: PPUSH
16394: CALL_OW 275
16398: PUSH
16399: LD_VAR 0 11
16403: PUSH
16404: LD_INT 2
16406: ARRAY
16407: GREATEREQUAL
16408: AND
16409: PUSH
16410: LD_VAR 0 10
16414: PPUSH
16415: LD_INT 3
16417: PPUSH
16418: CALL_OW 275
16422: PUSH
16423: LD_VAR 0 11
16427: PUSH
16428: LD_INT 3
16430: ARRAY
16431: GREATEREQUAL
16432: AND
16433: NOT
16434: IFFALSE 16438
// exit ;
16436: GO 17025
// if GetBType ( depot ) = b_depot then
16438: LD_VAR 0 1
16442: PPUSH
16443: CALL_OW 266
16447: PUSH
16448: LD_INT 0
16450: EQUAL
16451: IFFALSE 16463
// dist := 28 else
16453: LD_ADDR_VAR 0 14
16457: PUSH
16458: LD_INT 28
16460: ST_TO_ADDR
16461: GO 16471
// dist := 36 ;
16463: LD_ADDR_VAR 0 14
16467: PUSH
16468: LD_INT 36
16470: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16471: LD_VAR 0 1
16475: PPUSH
16476: LD_VAR 0 3
16480: PPUSH
16481: LD_VAR 0 4
16485: PPUSH
16486: CALL_OW 297
16490: PUSH
16491: LD_VAR 0 14
16495: GREATER
16496: IFFALSE 16500
// exit ;
16498: GO 17025
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16500: LD_ADDR_VAR 0 12
16504: PUSH
16505: LD_VAR 0 2
16509: PPUSH
16510: LD_VAR 0 3
16514: PPUSH
16515: LD_VAR 0 4
16519: PPUSH
16520: LD_VAR 0 5
16524: PPUSH
16525: LD_VAR 0 1
16529: PPUSH
16530: CALL_OW 248
16534: PPUSH
16535: LD_INT 0
16537: PPUSH
16538: CALL 17030 0 6
16542: ST_TO_ADDR
// if not hexes then
16543: LD_VAR 0 12
16547: NOT
16548: IFFALSE 16552
// exit ;
16550: GO 17025
// hex := GetHexInfo ( x , y ) ;
16552: LD_ADDR_VAR 0 15
16556: PUSH
16557: LD_VAR 0 3
16561: PPUSH
16562: LD_VAR 0 4
16566: PPUSH
16567: CALL_OW 546
16571: ST_TO_ADDR
// if hex [ 1 ] then
16572: LD_VAR 0 15
16576: PUSH
16577: LD_INT 1
16579: ARRAY
16580: IFFALSE 16584
// exit ;
16582: GO 17025
// height := hex [ 2 ] ;
16584: LD_ADDR_VAR 0 13
16588: PUSH
16589: LD_VAR 0 15
16593: PUSH
16594: LD_INT 2
16596: ARRAY
16597: ST_TO_ADDR
// for i = 1 to hexes do
16598: LD_ADDR_VAR 0 7
16602: PUSH
16603: DOUBLE
16604: LD_INT 1
16606: DEC
16607: ST_TO_ADDR
16608: LD_VAR 0 12
16612: PUSH
16613: FOR_TO
16614: IFFALSE 16944
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16616: LD_VAR 0 12
16620: PUSH
16621: LD_VAR 0 7
16625: ARRAY
16626: PUSH
16627: LD_INT 1
16629: ARRAY
16630: PPUSH
16631: LD_VAR 0 12
16635: PUSH
16636: LD_VAR 0 7
16640: ARRAY
16641: PUSH
16642: LD_INT 2
16644: ARRAY
16645: PPUSH
16646: CALL_OW 488
16650: NOT
16651: PUSH
16652: LD_VAR 0 12
16656: PUSH
16657: LD_VAR 0 7
16661: ARRAY
16662: PUSH
16663: LD_INT 1
16665: ARRAY
16666: PPUSH
16667: LD_VAR 0 12
16671: PUSH
16672: LD_VAR 0 7
16676: ARRAY
16677: PUSH
16678: LD_INT 2
16680: ARRAY
16681: PPUSH
16682: CALL_OW 428
16686: PUSH
16687: LD_INT 0
16689: GREATER
16690: OR
16691: PUSH
16692: LD_VAR 0 12
16696: PUSH
16697: LD_VAR 0 7
16701: ARRAY
16702: PUSH
16703: LD_INT 1
16705: ARRAY
16706: PPUSH
16707: LD_VAR 0 12
16711: PUSH
16712: LD_VAR 0 7
16716: ARRAY
16717: PUSH
16718: LD_INT 2
16720: ARRAY
16721: PPUSH
16722: CALL_OW 351
16726: OR
16727: IFFALSE 16733
// exit ;
16729: POP
16730: POP
16731: GO 17025
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16733: LD_ADDR_VAR 0 8
16737: PUSH
16738: LD_VAR 0 12
16742: PUSH
16743: LD_VAR 0 7
16747: ARRAY
16748: PUSH
16749: LD_INT 1
16751: ARRAY
16752: PPUSH
16753: LD_VAR 0 12
16757: PUSH
16758: LD_VAR 0 7
16762: ARRAY
16763: PUSH
16764: LD_INT 2
16766: ARRAY
16767: PPUSH
16768: CALL_OW 546
16772: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16773: LD_VAR 0 8
16777: PUSH
16778: LD_INT 1
16780: ARRAY
16781: PUSH
16782: LD_VAR 0 8
16786: PUSH
16787: LD_INT 2
16789: ARRAY
16790: PUSH
16791: LD_VAR 0 13
16795: PUSH
16796: LD_INT 2
16798: PLUS
16799: GREATER
16800: OR
16801: PUSH
16802: LD_VAR 0 8
16806: PUSH
16807: LD_INT 2
16809: ARRAY
16810: PUSH
16811: LD_VAR 0 13
16815: PUSH
16816: LD_INT 2
16818: MINUS
16819: LESS
16820: OR
16821: PUSH
16822: LD_VAR 0 8
16826: PUSH
16827: LD_INT 3
16829: ARRAY
16830: PUSH
16831: LD_INT 0
16833: PUSH
16834: LD_INT 8
16836: PUSH
16837: LD_INT 9
16839: PUSH
16840: LD_INT 10
16842: PUSH
16843: LD_INT 11
16845: PUSH
16846: LD_INT 12
16848: PUSH
16849: LD_INT 13
16851: PUSH
16852: LD_INT 16
16854: PUSH
16855: LD_INT 17
16857: PUSH
16858: LD_INT 18
16860: PUSH
16861: LD_INT 19
16863: PUSH
16864: LD_INT 20
16866: PUSH
16867: LD_INT 21
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: IN
16885: NOT
16886: OR
16887: PUSH
16888: LD_VAR 0 8
16892: PUSH
16893: LD_INT 5
16895: ARRAY
16896: NOT
16897: OR
16898: PUSH
16899: LD_VAR 0 8
16903: PUSH
16904: LD_INT 6
16906: ARRAY
16907: PUSH
16908: LD_INT 1
16910: PUSH
16911: LD_INT 2
16913: PUSH
16914: LD_INT 7
16916: PUSH
16917: LD_INT 9
16919: PUSH
16920: LD_INT 10
16922: PUSH
16923: LD_INT 11
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: IN
16934: NOT
16935: OR
16936: IFFALSE 16942
// exit ;
16938: POP
16939: POP
16940: GO 17025
// end ;
16942: GO 16613
16944: POP
16945: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16946: LD_VAR 0 9
16950: PPUSH
16951: LD_VAR 0 3
16955: PPUSH
16956: LD_VAR 0 4
16960: PPUSH
16961: LD_INT 20
16963: PPUSH
16964: CALL 8971 0 4
16968: PUSH
16969: LD_INT 4
16971: ARRAY
16972: IFFALSE 16976
// exit ;
16974: GO 17025
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16976: LD_VAR 0 2
16980: PUSH
16981: LD_INT 29
16983: PUSH
16984: LD_INT 30
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: IN
16991: PUSH
16992: LD_VAR 0 3
16996: PPUSH
16997: LD_VAR 0 4
17001: PPUSH
17002: LD_VAR 0 9
17006: PPUSH
17007: CALL_OW 440
17011: NOT
17012: AND
17013: IFFALSE 17017
// exit ;
17015: GO 17025
// result := true ;
17017: LD_ADDR_VAR 0 6
17021: PUSH
17022: LD_INT 1
17024: ST_TO_ADDR
// end ;
17025: LD_VAR 0 6
17029: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17030: LD_INT 0
17032: PPUSH
17033: PPUSH
17034: PPUSH
17035: PPUSH
17036: PPUSH
17037: PPUSH
17038: PPUSH
17039: PPUSH
17040: PPUSH
17041: PPUSH
17042: PPUSH
17043: PPUSH
17044: PPUSH
17045: PPUSH
17046: PPUSH
17047: PPUSH
17048: PPUSH
17049: PPUSH
17050: PPUSH
17051: PPUSH
17052: PPUSH
17053: PPUSH
17054: PPUSH
17055: PPUSH
17056: PPUSH
17057: PPUSH
17058: PPUSH
17059: PPUSH
17060: PPUSH
17061: PPUSH
17062: PPUSH
17063: PPUSH
17064: PPUSH
17065: PPUSH
17066: PPUSH
17067: PPUSH
17068: PPUSH
17069: PPUSH
17070: PPUSH
17071: PPUSH
17072: PPUSH
17073: PPUSH
17074: PPUSH
17075: PPUSH
17076: PPUSH
17077: PPUSH
17078: PPUSH
17079: PPUSH
17080: PPUSH
17081: PPUSH
17082: PPUSH
17083: PPUSH
17084: PPUSH
17085: PPUSH
17086: PPUSH
17087: PPUSH
17088: PPUSH
17089: PPUSH
// result = [ ] ;
17090: LD_ADDR_VAR 0 7
17094: PUSH
17095: EMPTY
17096: ST_TO_ADDR
// temp_list = [ ] ;
17097: LD_ADDR_VAR 0 9
17101: PUSH
17102: EMPTY
17103: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17104: LD_VAR 0 4
17108: PUSH
17109: LD_INT 0
17111: PUSH
17112: LD_INT 1
17114: PUSH
17115: LD_INT 2
17117: PUSH
17118: LD_INT 3
17120: PUSH
17121: LD_INT 4
17123: PUSH
17124: LD_INT 5
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: IN
17135: NOT
17136: PUSH
17137: LD_VAR 0 1
17141: PUSH
17142: LD_INT 0
17144: PUSH
17145: LD_INT 1
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: IN
17152: PUSH
17153: LD_VAR 0 5
17157: PUSH
17158: LD_INT 1
17160: PUSH
17161: LD_INT 2
17163: PUSH
17164: LD_INT 3
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: LIST
17171: IN
17172: NOT
17173: AND
17174: OR
17175: IFFALSE 17179
// exit ;
17177: GO 35570
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17179: LD_VAR 0 1
17183: PUSH
17184: LD_INT 6
17186: PUSH
17187: LD_INT 7
17189: PUSH
17190: LD_INT 8
17192: PUSH
17193: LD_INT 13
17195: PUSH
17196: LD_INT 12
17198: PUSH
17199: LD_INT 15
17201: PUSH
17202: LD_INT 11
17204: PUSH
17205: LD_INT 14
17207: PUSH
17208: LD_INT 10
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: IN
17222: IFFALSE 17232
// btype = b_lab ;
17224: LD_ADDR_VAR 0 1
17228: PUSH
17229: LD_INT 6
17231: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17232: LD_VAR 0 6
17236: PUSH
17237: LD_INT 0
17239: PUSH
17240: LD_INT 1
17242: PUSH
17243: LD_INT 2
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: LIST
17250: IN
17251: NOT
17252: PUSH
17253: LD_VAR 0 1
17257: PUSH
17258: LD_INT 0
17260: PUSH
17261: LD_INT 1
17263: PUSH
17264: LD_INT 2
17266: PUSH
17267: LD_INT 3
17269: PUSH
17270: LD_INT 6
17272: PUSH
17273: LD_INT 36
17275: PUSH
17276: LD_INT 4
17278: PUSH
17279: LD_INT 5
17281: PUSH
17282: LD_INT 31
17284: PUSH
17285: LD_INT 32
17287: PUSH
17288: LD_INT 33
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: IN
17304: NOT
17305: PUSH
17306: LD_VAR 0 6
17310: PUSH
17311: LD_INT 1
17313: EQUAL
17314: AND
17315: OR
17316: PUSH
17317: LD_VAR 0 1
17321: PUSH
17322: LD_INT 2
17324: PUSH
17325: LD_INT 3
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: IN
17332: NOT
17333: PUSH
17334: LD_VAR 0 6
17338: PUSH
17339: LD_INT 2
17341: EQUAL
17342: AND
17343: OR
17344: IFFALSE 17354
// mode = 0 ;
17346: LD_ADDR_VAR 0 6
17350: PUSH
17351: LD_INT 0
17353: ST_TO_ADDR
// case mode of 0 :
17354: LD_VAR 0 6
17358: PUSH
17359: LD_INT 0
17361: DOUBLE
17362: EQUAL
17363: IFTRUE 17367
17365: GO 28820
17367: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17368: LD_ADDR_VAR 0 11
17372: PUSH
17373: LD_INT 0
17375: PUSH
17376: LD_INT 0
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 0
17385: PUSH
17386: LD_INT 1
17388: NEG
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: PUSH
17394: LD_INT 1
17396: PUSH
17397: LD_INT 0
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: PUSH
17404: LD_INT 1
17406: PUSH
17407: LD_INT 1
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: PUSH
17414: LD_INT 0
17416: PUSH
17417: LD_INT 1
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: PUSH
17424: LD_INT 1
17426: NEG
17427: PUSH
17428: LD_INT 0
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PUSH
17435: LD_INT 1
17437: NEG
17438: PUSH
17439: LD_INT 1
17441: NEG
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: LD_INT 1
17449: NEG
17450: PUSH
17451: LD_INT 2
17453: NEG
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: LD_INT 0
17461: PUSH
17462: LD_INT 2
17464: NEG
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PUSH
17470: LD_INT 1
17472: PUSH
17473: LD_INT 1
17475: NEG
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: PUSH
17481: LD_INT 1
17483: PUSH
17484: LD_INT 2
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PUSH
17491: LD_INT 0
17493: PUSH
17494: LD_INT 2
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PUSH
17501: LD_INT 1
17503: NEG
17504: PUSH
17505: LD_INT 1
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 1
17514: PUSH
17515: LD_INT 3
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: PUSH
17522: LD_INT 0
17524: PUSH
17525: LD_INT 3
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 1
17534: NEG
17535: PUSH
17536: LD_INT 2
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17561: LD_ADDR_VAR 0 12
17565: PUSH
17566: LD_INT 0
17568: PUSH
17569: LD_INT 0
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PUSH
17576: LD_INT 0
17578: PUSH
17579: LD_INT 1
17581: NEG
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 1
17589: PUSH
17590: LD_INT 0
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 1
17599: PUSH
17600: LD_INT 1
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PUSH
17607: LD_INT 0
17609: PUSH
17610: LD_INT 1
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: PUSH
17617: LD_INT 1
17619: NEG
17620: PUSH
17621: LD_INT 0
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 1
17630: NEG
17631: PUSH
17632: LD_INT 1
17634: NEG
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PUSH
17640: LD_INT 1
17642: PUSH
17643: LD_INT 1
17645: NEG
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 2
17653: PUSH
17654: LD_INT 0
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: LD_INT 2
17663: PUSH
17664: LD_INT 1
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 1
17673: NEG
17674: PUSH
17675: LD_INT 1
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: LD_INT 2
17684: NEG
17685: PUSH
17686: LD_INT 0
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 2
17695: NEG
17696: PUSH
17697: LD_INT 1
17699: NEG
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: LD_INT 2
17707: NEG
17708: PUSH
17709: LD_INT 1
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: LD_INT 3
17718: NEG
17719: PUSH
17720: LD_INT 0
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 3
17729: NEG
17730: PUSH
17731: LD_INT 1
17733: NEG
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17757: LD_ADDR_VAR 0 13
17761: PUSH
17762: LD_INT 0
17764: PUSH
17765: LD_INT 0
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: LD_INT 0
17774: PUSH
17775: LD_INT 1
17777: NEG
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: PUSH
17783: LD_INT 1
17785: PUSH
17786: LD_INT 0
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: PUSH
17793: LD_INT 1
17795: PUSH
17796: LD_INT 1
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PUSH
17803: LD_INT 0
17805: PUSH
17806: LD_INT 1
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: PUSH
17813: LD_INT 1
17815: NEG
17816: PUSH
17817: LD_INT 0
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: LD_INT 1
17826: NEG
17827: PUSH
17828: LD_INT 1
17830: NEG
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: PUSH
17836: LD_INT 1
17838: NEG
17839: PUSH
17840: LD_INT 2
17842: NEG
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PUSH
17848: LD_INT 2
17850: PUSH
17851: LD_INT 1
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 2
17860: PUSH
17861: LD_INT 2
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 1
17870: PUSH
17871: LD_INT 2
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 2
17880: NEG
17881: PUSH
17882: LD_INT 1
17884: NEG
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 2
17892: NEG
17893: PUSH
17894: LD_INT 2
17896: NEG
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PUSH
17902: LD_INT 2
17904: NEG
17905: PUSH
17906: LD_INT 3
17908: NEG
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 3
17916: NEG
17917: PUSH
17918: LD_INT 2
17920: NEG
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PUSH
17926: LD_INT 3
17928: NEG
17929: PUSH
17930: LD_INT 3
17932: NEG
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17956: LD_ADDR_VAR 0 14
17960: PUSH
17961: LD_INT 0
17963: PUSH
17964: LD_INT 0
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 0
17973: PUSH
17974: LD_INT 1
17976: NEG
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: PUSH
17982: LD_INT 1
17984: PUSH
17985: LD_INT 0
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PUSH
17992: LD_INT 1
17994: PUSH
17995: LD_INT 1
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 0
18004: PUSH
18005: LD_INT 1
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: LD_INT 1
18014: NEG
18015: PUSH
18016: LD_INT 0
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: LD_INT 1
18025: NEG
18026: PUSH
18027: LD_INT 1
18029: NEG
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PUSH
18035: LD_INT 1
18037: NEG
18038: PUSH
18039: LD_INT 2
18041: NEG
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 0
18049: PUSH
18050: LD_INT 2
18052: NEG
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: PUSH
18058: LD_INT 1
18060: PUSH
18061: LD_INT 1
18063: NEG
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: LD_INT 1
18071: PUSH
18072: LD_INT 2
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: PUSH
18079: LD_INT 0
18081: PUSH
18082: LD_INT 2
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PUSH
18089: LD_INT 1
18091: NEG
18092: PUSH
18093: LD_INT 1
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: PUSH
18100: LD_INT 1
18102: NEG
18103: PUSH
18104: LD_INT 3
18106: NEG
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 0
18114: PUSH
18115: LD_INT 3
18117: NEG
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: LD_INT 1
18125: PUSH
18126: LD_INT 2
18128: NEG
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18152: LD_ADDR_VAR 0 15
18156: PUSH
18157: LD_INT 0
18159: PUSH
18160: LD_INT 0
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 0
18169: PUSH
18170: LD_INT 1
18172: NEG
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: LD_INT 1
18180: PUSH
18181: LD_INT 0
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 1
18190: PUSH
18191: LD_INT 1
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 0
18200: PUSH
18201: LD_INT 1
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 1
18210: NEG
18211: PUSH
18212: LD_INT 0
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 1
18221: NEG
18222: PUSH
18223: LD_INT 1
18225: NEG
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: LD_INT 1
18233: PUSH
18234: LD_INT 1
18236: NEG
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: LD_INT 2
18244: PUSH
18245: LD_INT 0
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PUSH
18252: LD_INT 2
18254: PUSH
18255: LD_INT 1
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: LD_INT 1
18264: NEG
18265: PUSH
18266: LD_INT 1
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: LD_INT 2
18275: NEG
18276: PUSH
18277: LD_INT 0
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: LD_INT 2
18286: NEG
18287: PUSH
18288: LD_INT 1
18290: NEG
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: LD_INT 2
18298: PUSH
18299: LD_INT 1
18301: NEG
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: PUSH
18307: LD_INT 3
18309: PUSH
18310: LD_INT 0
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PUSH
18317: LD_INT 3
18319: PUSH
18320: LD_INT 1
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18345: LD_ADDR_VAR 0 16
18349: PUSH
18350: LD_INT 0
18352: PUSH
18353: LD_INT 0
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: PUSH
18360: LD_INT 0
18362: PUSH
18363: LD_INT 1
18365: NEG
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PUSH
18371: LD_INT 1
18373: PUSH
18374: LD_INT 0
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PUSH
18381: LD_INT 1
18383: PUSH
18384: LD_INT 1
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 0
18393: PUSH
18394: LD_INT 1
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 1
18403: NEG
18404: PUSH
18405: LD_INT 0
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 1
18414: NEG
18415: PUSH
18416: LD_INT 1
18418: NEG
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 1
18426: NEG
18427: PUSH
18428: LD_INT 2
18430: NEG
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PUSH
18436: LD_INT 2
18438: PUSH
18439: LD_INT 1
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 2
18448: PUSH
18449: LD_INT 2
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 1
18458: PUSH
18459: LD_INT 2
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 2
18468: NEG
18469: PUSH
18470: LD_INT 1
18472: NEG
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 2
18480: NEG
18481: PUSH
18482: LD_INT 2
18484: NEG
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PUSH
18490: LD_INT 3
18492: PUSH
18493: LD_INT 2
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 3
18502: PUSH
18503: LD_INT 3
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 2
18512: PUSH
18513: LD_INT 3
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18538: LD_ADDR_VAR 0 17
18542: PUSH
18543: LD_INT 0
18545: PUSH
18546: LD_INT 0
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 0
18555: PUSH
18556: LD_INT 1
18558: NEG
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 1
18566: PUSH
18567: LD_INT 0
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: PUSH
18574: LD_INT 1
18576: PUSH
18577: LD_INT 1
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 0
18586: PUSH
18587: LD_INT 1
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 1
18596: NEG
18597: PUSH
18598: LD_INT 0
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 1
18607: NEG
18608: PUSH
18609: LD_INT 1
18611: NEG
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: LD_INT 1
18619: NEG
18620: PUSH
18621: LD_INT 2
18623: NEG
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 0
18631: PUSH
18632: LD_INT 2
18634: NEG
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 1
18642: PUSH
18643: LD_INT 1
18645: NEG
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 2
18653: PUSH
18654: LD_INT 0
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 2
18663: PUSH
18664: LD_INT 1
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: LD_INT 2
18673: PUSH
18674: LD_INT 2
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: LD_INT 1
18683: PUSH
18684: LD_INT 2
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 0
18693: PUSH
18694: LD_INT 2
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 1
18703: NEG
18704: PUSH
18705: LD_INT 1
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 2
18714: NEG
18715: PUSH
18716: LD_INT 0
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: LD_INT 2
18725: NEG
18726: PUSH
18727: LD_INT 1
18729: NEG
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PUSH
18735: LD_INT 2
18737: NEG
18738: PUSH
18739: LD_INT 2
18741: NEG
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18768: LD_ADDR_VAR 0 18
18772: PUSH
18773: LD_INT 0
18775: PUSH
18776: LD_INT 0
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 0
18785: PUSH
18786: LD_INT 1
18788: NEG
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 1
18796: PUSH
18797: LD_INT 0
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 1
18806: PUSH
18807: LD_INT 1
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: LD_INT 0
18816: PUSH
18817: LD_INT 1
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: LD_INT 1
18826: NEG
18827: PUSH
18828: LD_INT 0
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 1
18837: NEG
18838: PUSH
18839: LD_INT 1
18841: NEG
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 1
18849: NEG
18850: PUSH
18851: LD_INT 2
18853: NEG
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 0
18861: PUSH
18862: LD_INT 2
18864: NEG
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: LD_INT 1
18872: PUSH
18873: LD_INT 1
18875: NEG
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: LD_INT 2
18883: PUSH
18884: LD_INT 0
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 2
18893: PUSH
18894: LD_INT 1
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 2
18903: PUSH
18904: LD_INT 2
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 1
18913: PUSH
18914: LD_INT 2
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 0
18923: PUSH
18924: LD_INT 2
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 1
18933: NEG
18934: PUSH
18935: LD_INT 1
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: LD_INT 2
18944: NEG
18945: PUSH
18946: LD_INT 0
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 2
18955: NEG
18956: PUSH
18957: LD_INT 1
18959: NEG
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: LD_INT 2
18967: NEG
18968: PUSH
18969: LD_INT 2
18971: NEG
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18998: LD_ADDR_VAR 0 19
19002: PUSH
19003: LD_INT 0
19005: PUSH
19006: LD_INT 0
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 0
19015: PUSH
19016: LD_INT 1
19018: NEG
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 1
19026: PUSH
19027: LD_INT 0
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: LD_INT 1
19036: PUSH
19037: LD_INT 1
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: PUSH
19044: LD_INT 0
19046: PUSH
19047: LD_INT 1
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: LD_INT 1
19056: NEG
19057: PUSH
19058: LD_INT 0
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 1
19067: NEG
19068: PUSH
19069: LD_INT 1
19071: NEG
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 1
19079: NEG
19080: PUSH
19081: LD_INT 2
19083: NEG
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: LD_INT 0
19091: PUSH
19092: LD_INT 2
19094: NEG
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 1
19102: PUSH
19103: LD_INT 1
19105: NEG
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 2
19113: PUSH
19114: LD_INT 0
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: LD_INT 2
19123: PUSH
19124: LD_INT 1
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: LD_INT 2
19133: PUSH
19134: LD_INT 2
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 1
19143: PUSH
19144: LD_INT 2
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 0
19153: PUSH
19154: LD_INT 2
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 1
19163: NEG
19164: PUSH
19165: LD_INT 1
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 2
19174: NEG
19175: PUSH
19176: LD_INT 0
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: PUSH
19183: LD_INT 2
19185: NEG
19186: PUSH
19187: LD_INT 1
19189: NEG
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: LD_INT 2
19197: NEG
19198: PUSH
19199: LD_INT 2
19201: NEG
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19228: LD_ADDR_VAR 0 20
19232: PUSH
19233: LD_INT 0
19235: PUSH
19236: LD_INT 0
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 0
19245: PUSH
19246: LD_INT 1
19248: NEG
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 1
19256: PUSH
19257: LD_INT 0
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 1
19266: PUSH
19267: LD_INT 1
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 0
19276: PUSH
19277: LD_INT 1
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 1
19286: NEG
19287: PUSH
19288: LD_INT 0
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: LD_INT 1
19297: NEG
19298: PUSH
19299: LD_INT 1
19301: NEG
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 1
19309: NEG
19310: PUSH
19311: LD_INT 2
19313: NEG
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 0
19321: PUSH
19322: LD_INT 2
19324: NEG
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 1
19332: PUSH
19333: LD_INT 1
19335: NEG
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: LD_INT 2
19343: PUSH
19344: LD_INT 0
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 2
19353: PUSH
19354: LD_INT 1
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 2
19363: PUSH
19364: LD_INT 2
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 1
19373: PUSH
19374: LD_INT 2
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 0
19383: PUSH
19384: LD_INT 2
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 1
19393: NEG
19394: PUSH
19395: LD_INT 1
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: LD_INT 2
19404: NEG
19405: PUSH
19406: LD_INT 0
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 2
19415: NEG
19416: PUSH
19417: LD_INT 1
19419: NEG
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 2
19427: NEG
19428: PUSH
19429: LD_INT 2
19431: NEG
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19458: LD_ADDR_VAR 0 21
19462: PUSH
19463: LD_INT 0
19465: PUSH
19466: LD_INT 0
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PUSH
19473: LD_INT 0
19475: PUSH
19476: LD_INT 1
19478: NEG
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PUSH
19484: LD_INT 1
19486: PUSH
19487: LD_INT 0
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 1
19496: PUSH
19497: LD_INT 1
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 0
19506: PUSH
19507: LD_INT 1
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PUSH
19514: LD_INT 1
19516: NEG
19517: PUSH
19518: LD_INT 0
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 1
19527: NEG
19528: PUSH
19529: LD_INT 1
19531: NEG
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: LD_INT 1
19539: NEG
19540: PUSH
19541: LD_INT 2
19543: NEG
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: LD_INT 0
19551: PUSH
19552: LD_INT 2
19554: NEG
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 1
19562: PUSH
19563: LD_INT 1
19565: NEG
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 2
19573: PUSH
19574: LD_INT 0
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 2
19583: PUSH
19584: LD_INT 1
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 2
19593: PUSH
19594: LD_INT 2
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 1
19603: PUSH
19604: LD_INT 2
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 0
19613: PUSH
19614: LD_INT 2
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: LD_INT 1
19623: NEG
19624: PUSH
19625: LD_INT 1
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 2
19634: NEG
19635: PUSH
19636: LD_INT 0
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 2
19645: NEG
19646: PUSH
19647: LD_INT 1
19649: NEG
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: LD_INT 2
19657: NEG
19658: PUSH
19659: LD_INT 2
19661: NEG
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19688: LD_ADDR_VAR 0 22
19692: PUSH
19693: LD_INT 0
19695: PUSH
19696: LD_INT 0
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 0
19705: PUSH
19706: LD_INT 1
19708: NEG
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 1
19716: PUSH
19717: LD_INT 0
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 1
19726: PUSH
19727: LD_INT 1
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 0
19736: PUSH
19737: LD_INT 1
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 1
19746: NEG
19747: PUSH
19748: LD_INT 0
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 1
19757: NEG
19758: PUSH
19759: LD_INT 1
19761: NEG
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: LD_INT 1
19769: NEG
19770: PUSH
19771: LD_INT 2
19773: NEG
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 0
19781: PUSH
19782: LD_INT 2
19784: NEG
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 1
19792: PUSH
19793: LD_INT 1
19795: NEG
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: PUSH
19801: LD_INT 2
19803: PUSH
19804: LD_INT 0
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: PUSH
19811: LD_INT 2
19813: PUSH
19814: LD_INT 1
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: PUSH
19821: LD_INT 2
19823: PUSH
19824: LD_INT 2
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 1
19833: PUSH
19834: LD_INT 2
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 0
19843: PUSH
19844: LD_INT 2
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: PUSH
19851: LD_INT 1
19853: NEG
19854: PUSH
19855: LD_INT 1
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: PUSH
19862: LD_INT 2
19864: NEG
19865: PUSH
19866: LD_INT 0
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 2
19875: NEG
19876: PUSH
19877: LD_INT 1
19879: NEG
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 2
19887: NEG
19888: PUSH
19889: LD_INT 2
19891: NEG
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19918: LD_ADDR_VAR 0 23
19922: PUSH
19923: LD_INT 0
19925: PUSH
19926: LD_INT 0
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 0
19935: PUSH
19936: LD_INT 1
19938: NEG
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 1
19946: PUSH
19947: LD_INT 0
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 1
19956: PUSH
19957: LD_INT 1
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 0
19966: PUSH
19967: LD_INT 1
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 1
19976: NEG
19977: PUSH
19978: LD_INT 0
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 1
19987: NEG
19988: PUSH
19989: LD_INT 1
19991: NEG
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: LD_INT 1
19999: NEG
20000: PUSH
20001: LD_INT 2
20003: NEG
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PUSH
20009: LD_INT 0
20011: PUSH
20012: LD_INT 2
20014: NEG
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 1
20022: PUSH
20023: LD_INT 1
20025: NEG
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: LD_INT 2
20033: PUSH
20034: LD_INT 0
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: PUSH
20041: LD_INT 2
20043: PUSH
20044: LD_INT 1
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 2
20053: PUSH
20054: LD_INT 2
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 1
20063: PUSH
20064: LD_INT 2
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 0
20073: PUSH
20074: LD_INT 2
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: LD_INT 1
20083: NEG
20084: PUSH
20085: LD_INT 1
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: LD_INT 2
20094: NEG
20095: PUSH
20096: LD_INT 0
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 2
20105: NEG
20106: PUSH
20107: LD_INT 1
20109: NEG
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: LD_INT 2
20117: NEG
20118: PUSH
20119: LD_INT 2
20121: NEG
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 2
20129: NEG
20130: PUSH
20131: LD_INT 3
20133: NEG
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PUSH
20139: LD_INT 1
20141: NEG
20142: PUSH
20143: LD_INT 3
20145: NEG
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 1
20153: PUSH
20154: LD_INT 2
20156: NEG
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PUSH
20162: LD_INT 2
20164: PUSH
20165: LD_INT 1
20167: NEG
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20198: LD_ADDR_VAR 0 24
20202: PUSH
20203: LD_INT 0
20205: PUSH
20206: LD_INT 0
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 0
20215: PUSH
20216: LD_INT 1
20218: NEG
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 1
20226: PUSH
20227: LD_INT 0
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PUSH
20234: LD_INT 1
20236: PUSH
20237: LD_INT 1
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 0
20246: PUSH
20247: LD_INT 1
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: LD_INT 1
20256: NEG
20257: PUSH
20258: LD_INT 0
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 1
20267: NEG
20268: PUSH
20269: LD_INT 1
20271: NEG
20272: PUSH
20273: EMPTY
20274: LIST
20275: LIST
20276: PUSH
20277: LD_INT 1
20279: NEG
20280: PUSH
20281: LD_INT 2
20283: NEG
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 0
20291: PUSH
20292: LD_INT 2
20294: NEG
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: LD_INT 1
20302: PUSH
20303: LD_INT 1
20305: NEG
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PUSH
20311: LD_INT 2
20313: PUSH
20314: LD_INT 0
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: PUSH
20321: LD_INT 2
20323: PUSH
20324: LD_INT 1
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 2
20333: PUSH
20334: LD_INT 2
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: LD_INT 1
20343: PUSH
20344: LD_INT 2
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 0
20353: PUSH
20354: LD_INT 2
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: LD_INT 1
20363: NEG
20364: PUSH
20365: LD_INT 1
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: LD_INT 2
20374: NEG
20375: PUSH
20376: LD_INT 0
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: LD_INT 2
20385: NEG
20386: PUSH
20387: LD_INT 1
20389: NEG
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: LD_INT 2
20397: NEG
20398: PUSH
20399: LD_INT 2
20401: NEG
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: PUSH
20407: LD_INT 1
20409: PUSH
20410: LD_INT 2
20412: NEG
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 2
20420: PUSH
20421: LD_INT 1
20423: NEG
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 3
20431: PUSH
20432: LD_INT 1
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 3
20441: PUSH
20442: LD_INT 2
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20474: LD_ADDR_VAR 0 25
20478: PUSH
20479: LD_INT 0
20481: PUSH
20482: LD_INT 0
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: LD_INT 0
20491: PUSH
20492: LD_INT 1
20494: NEG
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PUSH
20500: LD_INT 1
20502: PUSH
20503: LD_INT 0
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PUSH
20510: LD_INT 1
20512: PUSH
20513: LD_INT 1
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 0
20522: PUSH
20523: LD_INT 1
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 1
20532: NEG
20533: PUSH
20534: LD_INT 0
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: PUSH
20541: LD_INT 1
20543: NEG
20544: PUSH
20545: LD_INT 1
20547: NEG
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 1
20555: NEG
20556: PUSH
20557: LD_INT 2
20559: NEG
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 0
20567: PUSH
20568: LD_INT 2
20570: NEG
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 1
20578: PUSH
20579: LD_INT 1
20581: NEG
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 2
20589: PUSH
20590: LD_INT 0
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: LD_INT 2
20599: PUSH
20600: LD_INT 1
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PUSH
20607: LD_INT 2
20609: PUSH
20610: LD_INT 2
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 1
20619: PUSH
20620: LD_INT 2
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PUSH
20627: LD_INT 0
20629: PUSH
20630: LD_INT 2
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 1
20639: NEG
20640: PUSH
20641: LD_INT 1
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 2
20650: NEG
20651: PUSH
20652: LD_INT 0
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 2
20661: NEG
20662: PUSH
20663: LD_INT 1
20665: NEG
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 2
20673: NEG
20674: PUSH
20675: LD_INT 2
20677: NEG
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 3
20685: PUSH
20686: LD_INT 1
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 3
20695: PUSH
20696: LD_INT 2
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 2
20705: PUSH
20706: LD_INT 3
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 1
20715: PUSH
20716: LD_INT 3
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20748: LD_ADDR_VAR 0 26
20752: PUSH
20753: LD_INT 0
20755: PUSH
20756: LD_INT 0
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 0
20765: PUSH
20766: LD_INT 1
20768: NEG
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PUSH
20774: LD_INT 1
20776: PUSH
20777: LD_INT 0
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: PUSH
20784: LD_INT 1
20786: PUSH
20787: LD_INT 1
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 0
20796: PUSH
20797: LD_INT 1
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 1
20806: NEG
20807: PUSH
20808: LD_INT 0
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: LD_INT 1
20817: NEG
20818: PUSH
20819: LD_INT 1
20821: NEG
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 1
20829: NEG
20830: PUSH
20831: LD_INT 2
20833: NEG
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 0
20841: PUSH
20842: LD_INT 2
20844: NEG
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 1
20852: PUSH
20853: LD_INT 1
20855: NEG
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 2
20863: PUSH
20864: LD_INT 0
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 2
20873: PUSH
20874: LD_INT 1
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 2
20883: PUSH
20884: LD_INT 2
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 1
20893: PUSH
20894: LD_INT 2
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 0
20903: PUSH
20904: LD_INT 2
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 1
20913: NEG
20914: PUSH
20915: LD_INT 1
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: PUSH
20922: LD_INT 2
20924: NEG
20925: PUSH
20926: LD_INT 0
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 2
20935: NEG
20936: PUSH
20937: LD_INT 1
20939: NEG
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: LD_INT 2
20947: NEG
20948: PUSH
20949: LD_INT 2
20951: NEG
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 2
20959: PUSH
20960: LD_INT 3
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 1
20969: PUSH
20970: LD_INT 3
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 1
20979: NEG
20980: PUSH
20981: LD_INT 2
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 2
20990: NEG
20991: PUSH
20992: LD_INT 1
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21024: LD_ADDR_VAR 0 27
21028: PUSH
21029: LD_INT 0
21031: PUSH
21032: LD_INT 0
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PUSH
21039: LD_INT 0
21041: PUSH
21042: LD_INT 1
21044: NEG
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: LD_INT 1
21052: PUSH
21053: LD_INT 0
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PUSH
21060: LD_INT 1
21062: PUSH
21063: LD_INT 1
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: LD_INT 0
21072: PUSH
21073: LD_INT 1
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: LD_INT 1
21082: NEG
21083: PUSH
21084: LD_INT 0
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 1
21093: NEG
21094: PUSH
21095: LD_INT 1
21097: NEG
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 1
21105: NEG
21106: PUSH
21107: LD_INT 2
21109: NEG
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 0
21117: PUSH
21118: LD_INT 2
21120: NEG
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 1
21128: PUSH
21129: LD_INT 1
21131: NEG
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 2
21139: PUSH
21140: LD_INT 0
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 2
21149: PUSH
21150: LD_INT 1
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 2
21159: PUSH
21160: LD_INT 2
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 1
21169: PUSH
21170: LD_INT 2
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 0
21179: PUSH
21180: LD_INT 2
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 1
21189: NEG
21190: PUSH
21191: LD_INT 1
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 2
21200: NEG
21201: PUSH
21202: LD_INT 0
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: LD_INT 2
21211: NEG
21212: PUSH
21213: LD_INT 1
21215: NEG
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 2
21223: NEG
21224: PUSH
21225: LD_INT 2
21227: NEG
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 1
21235: NEG
21236: PUSH
21237: LD_INT 2
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 2
21246: NEG
21247: PUSH
21248: LD_INT 1
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 3
21257: NEG
21258: PUSH
21259: LD_INT 1
21261: NEG
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: LD_INT 3
21269: NEG
21270: PUSH
21271: LD_INT 2
21273: NEG
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21304: LD_ADDR_VAR 0 28
21308: PUSH
21309: LD_INT 0
21311: PUSH
21312: LD_INT 0
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 0
21321: PUSH
21322: LD_INT 1
21324: NEG
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 1
21332: PUSH
21333: LD_INT 0
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: LD_INT 1
21342: PUSH
21343: LD_INT 1
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PUSH
21350: LD_INT 0
21352: PUSH
21353: LD_INT 1
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: LD_INT 1
21362: NEG
21363: PUSH
21364: LD_INT 0
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PUSH
21371: LD_INT 1
21373: NEG
21374: PUSH
21375: LD_INT 1
21377: NEG
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PUSH
21383: LD_INT 1
21385: NEG
21386: PUSH
21387: LD_INT 2
21389: NEG
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 0
21397: PUSH
21398: LD_INT 2
21400: NEG
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 1
21408: PUSH
21409: LD_INT 1
21411: NEG
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: LD_INT 2
21419: PUSH
21420: LD_INT 0
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 2
21429: PUSH
21430: LD_INT 1
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 2
21439: PUSH
21440: LD_INT 2
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 1
21449: PUSH
21450: LD_INT 2
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: PUSH
21457: LD_INT 0
21459: PUSH
21460: LD_INT 2
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: LD_INT 1
21469: NEG
21470: PUSH
21471: LD_INT 1
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: LD_INT 2
21480: NEG
21481: PUSH
21482: LD_INT 0
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 2
21491: NEG
21492: PUSH
21493: LD_INT 1
21495: NEG
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 2
21503: NEG
21504: PUSH
21505: LD_INT 2
21507: NEG
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 2
21515: NEG
21516: PUSH
21517: LD_INT 3
21519: NEG
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: LD_INT 1
21527: NEG
21528: PUSH
21529: LD_INT 3
21531: NEG
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 3
21539: NEG
21540: PUSH
21541: LD_INT 1
21543: NEG
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PUSH
21549: LD_INT 3
21551: NEG
21552: PUSH
21553: LD_INT 2
21555: NEG
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21586: LD_ADDR_VAR 0 29
21590: PUSH
21591: LD_INT 0
21593: PUSH
21594: LD_INT 0
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: LD_INT 0
21603: PUSH
21604: LD_INT 1
21606: NEG
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 1
21614: PUSH
21615: LD_INT 0
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 1
21624: PUSH
21625: LD_INT 1
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 0
21634: PUSH
21635: LD_INT 1
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 1
21644: NEG
21645: PUSH
21646: LD_INT 0
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PUSH
21653: LD_INT 1
21655: NEG
21656: PUSH
21657: LD_INT 1
21659: NEG
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 1
21667: NEG
21668: PUSH
21669: LD_INT 2
21671: NEG
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PUSH
21677: LD_INT 0
21679: PUSH
21680: LD_INT 2
21682: NEG
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 1
21690: PUSH
21691: LD_INT 1
21693: NEG
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 2
21701: PUSH
21702: LD_INT 0
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 2
21711: PUSH
21712: LD_INT 1
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 1
21721: PUSH
21722: LD_INT 2
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 0
21731: PUSH
21732: LD_INT 2
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 1
21741: NEG
21742: PUSH
21743: LD_INT 1
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 2
21752: NEG
21753: PUSH
21754: LD_INT 1
21756: NEG
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 2
21764: NEG
21765: PUSH
21766: LD_INT 2
21768: NEG
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 2
21776: NEG
21777: PUSH
21778: LD_INT 3
21780: NEG
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: LD_INT 2
21788: PUSH
21789: LD_INT 1
21791: NEG
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: LD_INT 3
21799: PUSH
21800: LD_INT 1
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 1
21809: PUSH
21810: LD_INT 3
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PUSH
21817: LD_INT 1
21819: NEG
21820: PUSH
21821: LD_INT 2
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PUSH
21828: LD_INT 3
21830: NEG
21831: PUSH
21832: LD_INT 2
21834: NEG
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21865: LD_ADDR_VAR 0 30
21869: PUSH
21870: LD_INT 0
21872: PUSH
21873: LD_INT 0
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 0
21882: PUSH
21883: LD_INT 1
21885: NEG
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 1
21893: PUSH
21894: LD_INT 0
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 1
21903: PUSH
21904: LD_INT 1
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 0
21913: PUSH
21914: LD_INT 1
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 1
21923: NEG
21924: PUSH
21925: LD_INT 0
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 1
21934: NEG
21935: PUSH
21936: LD_INT 1
21938: NEG
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 1
21946: NEG
21947: PUSH
21948: LD_INT 2
21950: NEG
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 0
21958: PUSH
21959: LD_INT 2
21961: NEG
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 1
21969: PUSH
21970: LD_INT 1
21972: NEG
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 2
21980: PUSH
21981: LD_INT 0
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 2
21990: PUSH
21991: LD_INT 1
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 2
22000: PUSH
22001: LD_INT 2
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 1
22010: PUSH
22011: LD_INT 2
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 1
22020: NEG
22021: PUSH
22022: LD_INT 1
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 2
22031: NEG
22032: PUSH
22033: LD_INT 0
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 2
22042: NEG
22043: PUSH
22044: LD_INT 1
22046: NEG
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: PUSH
22052: LD_INT 1
22054: NEG
22055: PUSH
22056: LD_INT 3
22058: NEG
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 1
22066: PUSH
22067: LD_INT 2
22069: NEG
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 3
22077: PUSH
22078: LD_INT 2
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 2
22087: PUSH
22088: LD_INT 3
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 2
22097: NEG
22098: PUSH
22099: LD_INT 1
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 3
22108: NEG
22109: PUSH
22110: LD_INT 1
22112: NEG
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22143: LD_ADDR_VAR 0 31
22147: PUSH
22148: LD_INT 0
22150: PUSH
22151: LD_INT 0
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 0
22160: PUSH
22161: LD_INT 1
22163: NEG
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 1
22171: PUSH
22172: LD_INT 0
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 1
22181: PUSH
22182: LD_INT 1
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 0
22191: PUSH
22192: LD_INT 1
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 1
22201: NEG
22202: PUSH
22203: LD_INT 0
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 1
22212: NEG
22213: PUSH
22214: LD_INT 1
22216: NEG
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 1
22224: NEG
22225: PUSH
22226: LD_INT 2
22228: NEG
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 1
22236: PUSH
22237: LD_INT 1
22239: NEG
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 2
22247: PUSH
22248: LD_INT 0
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 2
22257: PUSH
22258: LD_INT 1
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 2
22267: PUSH
22268: LD_INT 2
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 1
22277: PUSH
22278: LD_INT 2
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 0
22287: PUSH
22288: LD_INT 2
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PUSH
22295: LD_INT 1
22297: NEG
22298: PUSH
22299: LD_INT 1
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 2
22308: NEG
22309: PUSH
22310: LD_INT 1
22312: NEG
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 2
22320: NEG
22321: PUSH
22322: LD_INT 2
22324: NEG
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 2
22332: NEG
22333: PUSH
22334: LD_INT 3
22336: NEG
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: LD_INT 2
22344: PUSH
22345: LD_INT 1
22347: NEG
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 3
22355: PUSH
22356: LD_INT 1
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 1
22365: PUSH
22366: LD_INT 3
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 1
22375: NEG
22376: PUSH
22377: LD_INT 2
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 3
22386: NEG
22387: PUSH
22388: LD_INT 2
22390: NEG
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22421: LD_ADDR_VAR 0 32
22425: PUSH
22426: LD_INT 0
22428: PUSH
22429: LD_INT 0
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 0
22438: PUSH
22439: LD_INT 1
22441: NEG
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: PUSH
22447: LD_INT 1
22449: PUSH
22450: LD_INT 0
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 1
22459: PUSH
22460: LD_INT 1
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 0
22469: PUSH
22470: LD_INT 1
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: LD_INT 1
22479: NEG
22480: PUSH
22481: LD_INT 0
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 1
22490: NEG
22491: PUSH
22492: LD_INT 1
22494: NEG
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PUSH
22500: LD_INT 1
22502: NEG
22503: PUSH
22504: LD_INT 2
22506: NEG
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 0
22514: PUSH
22515: LD_INT 2
22517: NEG
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PUSH
22523: LD_INT 1
22525: PUSH
22526: LD_INT 1
22528: NEG
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: PUSH
22534: LD_INT 2
22536: PUSH
22537: LD_INT 1
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PUSH
22544: LD_INT 2
22546: PUSH
22547: LD_INT 2
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: PUSH
22554: LD_INT 1
22556: PUSH
22557: LD_INT 2
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PUSH
22564: LD_INT 0
22566: PUSH
22567: LD_INT 2
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 1
22576: NEG
22577: PUSH
22578: LD_INT 1
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 2
22587: NEG
22588: PUSH
22589: LD_INT 0
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PUSH
22596: LD_INT 2
22598: NEG
22599: PUSH
22600: LD_INT 1
22602: NEG
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 1
22610: NEG
22611: PUSH
22612: LD_INT 3
22614: NEG
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 1
22622: PUSH
22623: LD_INT 2
22625: NEG
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 3
22633: PUSH
22634: LD_INT 2
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 2
22643: PUSH
22644: LD_INT 3
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 2
22653: NEG
22654: PUSH
22655: LD_INT 1
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 3
22664: NEG
22665: PUSH
22666: LD_INT 1
22668: NEG
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22699: LD_ADDR_VAR 0 33
22703: PUSH
22704: LD_INT 0
22706: PUSH
22707: LD_INT 0
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: PUSH
22714: LD_INT 0
22716: PUSH
22717: LD_INT 1
22719: NEG
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 1
22727: PUSH
22728: LD_INT 0
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 1
22737: PUSH
22738: LD_INT 1
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 0
22747: PUSH
22748: LD_INT 1
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: LD_INT 1
22757: NEG
22758: PUSH
22759: LD_INT 0
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: LD_INT 1
22768: NEG
22769: PUSH
22770: LD_INT 1
22772: NEG
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PUSH
22778: LD_INT 1
22780: NEG
22781: PUSH
22782: LD_INT 2
22784: NEG
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: LD_INT 1
22792: PUSH
22793: LD_INT 1
22795: NEG
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 2
22803: PUSH
22804: LD_INT 0
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 2
22813: PUSH
22814: LD_INT 1
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 1
22823: PUSH
22824: LD_INT 2
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 0
22833: PUSH
22834: LD_INT 2
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 1
22843: NEG
22844: PUSH
22845: LD_INT 1
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 2
22854: NEG
22855: PUSH
22856: LD_INT 0
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 2
22865: NEG
22866: PUSH
22867: LD_INT 1
22869: NEG
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: LD_INT 2
22877: NEG
22878: PUSH
22879: LD_INT 2
22881: NEG
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 2
22889: NEG
22890: PUSH
22891: LD_INT 3
22893: NEG
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: PUSH
22899: LD_INT 2
22901: PUSH
22902: LD_INT 1
22904: NEG
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 3
22912: PUSH
22913: LD_INT 1
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: LD_INT 1
22922: PUSH
22923: LD_INT 3
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: LD_INT 1
22932: NEG
22933: PUSH
22934: LD_INT 2
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 3
22943: NEG
22944: PUSH
22945: LD_INT 2
22947: NEG
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22978: LD_ADDR_VAR 0 34
22982: PUSH
22983: LD_INT 0
22985: PUSH
22986: LD_INT 0
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 0
22995: PUSH
22996: LD_INT 1
22998: NEG
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: PUSH
23004: LD_INT 1
23006: PUSH
23007: LD_INT 0
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: LD_INT 1
23016: PUSH
23017: LD_INT 1
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 0
23026: PUSH
23027: LD_INT 1
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 1
23036: NEG
23037: PUSH
23038: LD_INT 0
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 1
23047: NEG
23048: PUSH
23049: LD_INT 1
23051: NEG
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 1
23059: NEG
23060: PUSH
23061: LD_INT 2
23063: NEG
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: LD_INT 0
23071: PUSH
23072: LD_INT 2
23074: NEG
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 1
23082: PUSH
23083: LD_INT 1
23085: NEG
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PUSH
23091: LD_INT 2
23093: PUSH
23094: LD_INT 1
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 2
23103: PUSH
23104: LD_INT 2
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 1
23113: PUSH
23114: LD_INT 2
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 1
23123: NEG
23124: PUSH
23125: LD_INT 1
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PUSH
23132: LD_INT 2
23134: NEG
23135: PUSH
23136: LD_INT 0
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 2
23145: NEG
23146: PUSH
23147: LD_INT 1
23149: NEG
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PUSH
23155: LD_INT 2
23157: NEG
23158: PUSH
23159: LD_INT 2
23161: NEG
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 1
23169: NEG
23170: PUSH
23171: LD_INT 3
23173: NEG
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 1
23181: PUSH
23182: LD_INT 2
23184: NEG
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PUSH
23190: LD_INT 3
23192: PUSH
23193: LD_INT 2
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 2
23202: PUSH
23203: LD_INT 3
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 2
23212: NEG
23213: PUSH
23214: LD_INT 1
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: LD_INT 3
23223: NEG
23224: PUSH
23225: LD_INT 1
23227: NEG
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23258: LD_ADDR_VAR 0 35
23262: PUSH
23263: LD_INT 0
23265: PUSH
23266: LD_INT 0
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: LD_INT 0
23275: PUSH
23276: LD_INT 1
23278: NEG
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 1
23286: PUSH
23287: LD_INT 0
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 1
23296: PUSH
23297: LD_INT 1
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 0
23306: PUSH
23307: LD_INT 1
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 1
23316: NEG
23317: PUSH
23318: LD_INT 0
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 1
23327: NEG
23328: PUSH
23329: LD_INT 1
23331: NEG
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 2
23339: PUSH
23340: LD_INT 1
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: LD_INT 2
23349: NEG
23350: PUSH
23351: LD_INT 1
23353: NEG
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23370: LD_ADDR_VAR 0 36
23374: PUSH
23375: LD_INT 0
23377: PUSH
23378: LD_INT 0
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 0
23387: PUSH
23388: LD_INT 1
23390: NEG
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 1
23398: PUSH
23399: LD_INT 0
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 1
23408: PUSH
23409: LD_INT 1
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PUSH
23416: LD_INT 0
23418: PUSH
23419: LD_INT 1
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: PUSH
23426: LD_INT 1
23428: NEG
23429: PUSH
23430: LD_INT 0
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: LD_INT 1
23439: NEG
23440: PUSH
23441: LD_INT 1
23443: NEG
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: PUSH
23449: LD_INT 1
23451: NEG
23452: PUSH
23453: LD_INT 2
23455: NEG
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 1
23463: PUSH
23464: LD_INT 2
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23482: LD_ADDR_VAR 0 37
23486: PUSH
23487: LD_INT 0
23489: PUSH
23490: LD_INT 0
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 0
23499: PUSH
23500: LD_INT 1
23502: NEG
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 1
23510: PUSH
23511: LD_INT 0
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 1
23520: PUSH
23521: LD_INT 1
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 0
23530: PUSH
23531: LD_INT 1
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 1
23540: NEG
23541: PUSH
23542: LD_INT 0
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: LD_INT 1
23551: NEG
23552: PUSH
23553: LD_INT 1
23555: NEG
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: LD_INT 1
23563: PUSH
23564: LD_INT 1
23566: NEG
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PUSH
23572: LD_INT 1
23574: NEG
23575: PUSH
23576: LD_INT 1
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23594: LD_ADDR_VAR 0 38
23598: PUSH
23599: LD_INT 0
23601: PUSH
23602: LD_INT 0
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 0
23611: PUSH
23612: LD_INT 1
23614: NEG
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 1
23622: PUSH
23623: LD_INT 0
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 1
23632: PUSH
23633: LD_INT 1
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 0
23642: PUSH
23643: LD_INT 1
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: LD_INT 1
23652: NEG
23653: PUSH
23654: LD_INT 0
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PUSH
23661: LD_INT 1
23663: NEG
23664: PUSH
23665: LD_INT 1
23667: NEG
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 2
23675: PUSH
23676: LD_INT 1
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: LD_INT 2
23685: NEG
23686: PUSH
23687: LD_INT 1
23689: NEG
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23706: LD_ADDR_VAR 0 39
23710: PUSH
23711: LD_INT 0
23713: PUSH
23714: LD_INT 0
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 0
23723: PUSH
23724: LD_INT 1
23726: NEG
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 1
23734: PUSH
23735: LD_INT 0
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 1
23744: PUSH
23745: LD_INT 1
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 0
23754: PUSH
23755: LD_INT 1
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: LD_INT 1
23764: NEG
23765: PUSH
23766: LD_INT 0
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PUSH
23773: LD_INT 1
23775: NEG
23776: PUSH
23777: LD_INT 1
23779: NEG
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PUSH
23785: LD_INT 1
23787: NEG
23788: PUSH
23789: LD_INT 2
23791: NEG
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 1
23799: PUSH
23800: LD_INT 2
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23818: LD_ADDR_VAR 0 40
23822: PUSH
23823: LD_INT 0
23825: PUSH
23826: LD_INT 0
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 0
23835: PUSH
23836: LD_INT 1
23838: NEG
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 1
23846: PUSH
23847: LD_INT 0
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 1
23856: PUSH
23857: LD_INT 1
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 0
23866: PUSH
23867: LD_INT 1
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 1
23876: NEG
23877: PUSH
23878: LD_INT 0
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PUSH
23885: LD_INT 1
23887: NEG
23888: PUSH
23889: LD_INT 1
23891: NEG
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 1
23899: PUSH
23900: LD_INT 1
23902: NEG
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 1
23910: NEG
23911: PUSH
23912: LD_INT 1
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23930: LD_ADDR_VAR 0 41
23934: PUSH
23935: LD_INT 0
23937: PUSH
23938: LD_INT 0
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 0
23947: PUSH
23948: LD_INT 1
23950: NEG
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 1
23958: PUSH
23959: LD_INT 0
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: LD_INT 1
23968: PUSH
23969: LD_INT 1
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 0
23978: PUSH
23979: LD_INT 1
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 1
23988: NEG
23989: PUSH
23990: LD_INT 0
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 1
23999: NEG
24000: PUSH
24001: LD_INT 1
24003: NEG
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: LD_INT 1
24011: NEG
24012: PUSH
24013: LD_INT 2
24015: NEG
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 1
24023: PUSH
24024: LD_INT 1
24026: NEG
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: LD_INT 2
24034: PUSH
24035: LD_INT 0
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 2
24044: PUSH
24045: LD_INT 1
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 2
24054: PUSH
24055: LD_INT 2
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: LD_INT 1
24064: PUSH
24065: LD_INT 2
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PUSH
24072: LD_INT 1
24074: NEG
24075: PUSH
24076: LD_INT 1
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 2
24085: NEG
24086: PUSH
24087: LD_INT 0
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 2
24096: NEG
24097: PUSH
24098: LD_INT 1
24100: NEG
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: LD_INT 2
24108: NEG
24109: PUSH
24110: LD_INT 2
24112: NEG
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 2
24120: NEG
24121: PUSH
24122: LD_INT 3
24124: NEG
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 2
24132: PUSH
24133: LD_INT 1
24135: NEG
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 3
24143: PUSH
24144: LD_INT 0
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 3
24153: PUSH
24154: LD_INT 1
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 3
24163: PUSH
24164: LD_INT 2
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 3
24173: PUSH
24174: LD_INT 3
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 2
24183: PUSH
24184: LD_INT 3
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 2
24193: NEG
24194: PUSH
24195: LD_INT 1
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 3
24204: NEG
24205: PUSH
24206: LD_INT 0
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 3
24215: NEG
24216: PUSH
24217: LD_INT 1
24219: NEG
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 3
24227: NEG
24228: PUSH
24229: LD_INT 2
24231: NEG
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 3
24239: NEG
24240: PUSH
24241: LD_INT 3
24243: NEG
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24280: LD_ADDR_VAR 0 42
24284: PUSH
24285: LD_INT 0
24287: PUSH
24288: LD_INT 0
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 0
24297: PUSH
24298: LD_INT 1
24300: NEG
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 1
24308: PUSH
24309: LD_INT 0
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 1
24318: PUSH
24319: LD_INT 1
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 0
24328: PUSH
24329: LD_INT 1
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 1
24338: NEG
24339: PUSH
24340: LD_INT 0
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 1
24349: NEG
24350: PUSH
24351: LD_INT 1
24353: NEG
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 1
24361: NEG
24362: PUSH
24363: LD_INT 2
24365: NEG
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 0
24373: PUSH
24374: LD_INT 2
24376: NEG
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 1
24384: PUSH
24385: LD_INT 1
24387: NEG
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 2
24395: PUSH
24396: LD_INT 1
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 2
24405: PUSH
24406: LD_INT 2
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 1
24415: PUSH
24416: LD_INT 2
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 0
24425: PUSH
24426: LD_INT 2
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 1
24435: NEG
24436: PUSH
24437: LD_INT 1
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 2
24446: NEG
24447: PUSH
24448: LD_INT 1
24450: NEG
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 2
24458: NEG
24459: PUSH
24460: LD_INT 2
24462: NEG
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 2
24470: NEG
24471: PUSH
24472: LD_INT 3
24474: NEG
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 1
24482: NEG
24483: PUSH
24484: LD_INT 3
24486: NEG
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 0
24494: PUSH
24495: LD_INT 3
24497: NEG
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 1
24505: PUSH
24506: LD_INT 2
24508: NEG
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 3
24516: PUSH
24517: LD_INT 2
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 3
24526: PUSH
24527: LD_INT 3
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 2
24536: PUSH
24537: LD_INT 3
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: LD_INT 3
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 0
24556: PUSH
24557: LD_INT 3
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 1
24566: NEG
24567: PUSH
24568: LD_INT 2
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 3
24577: NEG
24578: PUSH
24579: LD_INT 2
24581: NEG
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 3
24589: NEG
24590: PUSH
24591: LD_INT 3
24593: NEG
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24630: LD_ADDR_VAR 0 43
24634: PUSH
24635: LD_INT 0
24637: PUSH
24638: LD_INT 0
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 0
24647: PUSH
24648: LD_INT 1
24650: NEG
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 1
24658: PUSH
24659: LD_INT 0
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 1
24668: PUSH
24669: LD_INT 1
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 0
24678: PUSH
24679: LD_INT 1
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 1
24688: NEG
24689: PUSH
24690: LD_INT 0
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 1
24699: NEG
24700: PUSH
24701: LD_INT 1
24703: NEG
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 1
24711: NEG
24712: PUSH
24713: LD_INT 2
24715: NEG
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 0
24723: PUSH
24724: LD_INT 2
24726: NEG
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 1
24734: PUSH
24735: LD_INT 1
24737: NEG
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 2
24745: PUSH
24746: LD_INT 0
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 2
24755: PUSH
24756: LD_INT 1
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 1
24765: PUSH
24766: LD_INT 2
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 0
24775: PUSH
24776: LD_INT 2
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 1
24785: NEG
24786: PUSH
24787: LD_INT 1
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 2
24796: NEG
24797: PUSH
24798: LD_INT 0
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 2
24807: NEG
24808: PUSH
24809: LD_INT 1
24811: NEG
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 1
24819: NEG
24820: PUSH
24821: LD_INT 3
24823: NEG
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 0
24831: PUSH
24832: LD_INT 3
24834: NEG
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 1
24842: PUSH
24843: LD_INT 2
24845: NEG
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PUSH
24851: LD_INT 2
24853: PUSH
24854: LD_INT 1
24856: NEG
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: LD_INT 3
24864: PUSH
24865: LD_INT 0
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: LD_INT 3
24874: PUSH
24875: LD_INT 1
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: LD_INT 1
24884: PUSH
24885: LD_INT 3
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 0
24894: PUSH
24895: LD_INT 3
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 1
24904: NEG
24905: PUSH
24906: LD_INT 2
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 2
24915: NEG
24916: PUSH
24917: LD_INT 1
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 3
24926: NEG
24927: PUSH
24928: LD_INT 0
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: LD_INT 3
24937: NEG
24938: PUSH
24939: LD_INT 1
24941: NEG
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24978: LD_ADDR_VAR 0 44
24982: PUSH
24983: LD_INT 0
24985: PUSH
24986: LD_INT 0
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 0
24995: PUSH
24996: LD_INT 1
24998: NEG
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 1
25006: PUSH
25007: LD_INT 0
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 1
25016: PUSH
25017: LD_INT 1
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 0
25026: PUSH
25027: LD_INT 1
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 1
25036: NEG
25037: PUSH
25038: LD_INT 0
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 1
25047: NEG
25048: PUSH
25049: LD_INT 1
25051: NEG
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 1
25059: NEG
25060: PUSH
25061: LD_INT 2
25063: NEG
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 1
25071: PUSH
25072: LD_INT 1
25074: NEG
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 2
25082: PUSH
25083: LD_INT 0
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 2
25092: PUSH
25093: LD_INT 1
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 2
25102: PUSH
25103: LD_INT 2
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 1
25112: PUSH
25113: LD_INT 2
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 1
25122: NEG
25123: PUSH
25124: LD_INT 1
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 2
25133: NEG
25134: PUSH
25135: LD_INT 0
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 2
25144: NEG
25145: PUSH
25146: LD_INT 1
25148: NEG
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PUSH
25154: LD_INT 2
25156: NEG
25157: PUSH
25158: LD_INT 2
25160: NEG
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 2
25168: NEG
25169: PUSH
25170: LD_INT 3
25172: NEG
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: LD_INT 2
25180: PUSH
25181: LD_INT 1
25183: NEG
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: LD_INT 3
25191: PUSH
25192: LD_INT 0
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 3
25201: PUSH
25202: LD_INT 1
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: PUSH
25209: LD_INT 3
25211: PUSH
25212: LD_INT 2
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 3
25221: PUSH
25222: LD_INT 3
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PUSH
25229: LD_INT 2
25231: PUSH
25232: LD_INT 3
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 2
25241: NEG
25242: PUSH
25243: LD_INT 1
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 3
25252: NEG
25253: PUSH
25254: LD_INT 0
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 3
25263: NEG
25264: PUSH
25265: LD_INT 1
25267: NEG
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 3
25275: NEG
25276: PUSH
25277: LD_INT 2
25279: NEG
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 3
25287: NEG
25288: PUSH
25289: LD_INT 3
25291: NEG
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25328: LD_ADDR_VAR 0 45
25332: PUSH
25333: LD_INT 0
25335: PUSH
25336: LD_INT 0
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 0
25345: PUSH
25346: LD_INT 1
25348: NEG
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 1
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 1
25366: PUSH
25367: LD_INT 1
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 0
25376: PUSH
25377: LD_INT 1
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 1
25386: NEG
25387: PUSH
25388: LD_INT 0
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 1
25397: NEG
25398: PUSH
25399: LD_INT 1
25401: NEG
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 1
25409: NEG
25410: PUSH
25411: LD_INT 2
25413: NEG
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 0
25421: PUSH
25422: LD_INT 2
25424: NEG
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 1
25432: PUSH
25433: LD_INT 1
25435: NEG
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PUSH
25441: LD_INT 2
25443: PUSH
25444: LD_INT 1
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 2
25453: PUSH
25454: LD_INT 2
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 1
25463: PUSH
25464: LD_INT 2
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: LD_INT 0
25473: PUSH
25474: LD_INT 2
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 1
25483: NEG
25484: PUSH
25485: LD_INT 1
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 2
25494: NEG
25495: PUSH
25496: LD_INT 1
25498: NEG
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 2
25506: NEG
25507: PUSH
25508: LD_INT 2
25510: NEG
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 2
25518: NEG
25519: PUSH
25520: LD_INT 3
25522: NEG
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 1
25530: NEG
25531: PUSH
25532: LD_INT 3
25534: NEG
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 0
25542: PUSH
25543: LD_INT 3
25545: NEG
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 1
25553: PUSH
25554: LD_INT 2
25556: NEG
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 3
25564: PUSH
25565: LD_INT 2
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 3
25574: PUSH
25575: LD_INT 3
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 2
25584: PUSH
25585: LD_INT 3
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 1
25594: PUSH
25595: LD_INT 3
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 0
25604: PUSH
25605: LD_INT 3
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 1
25614: NEG
25615: PUSH
25616: LD_INT 2
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 3
25625: NEG
25626: PUSH
25627: LD_INT 2
25629: NEG
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 3
25637: NEG
25638: PUSH
25639: LD_INT 3
25641: NEG
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25678: LD_ADDR_VAR 0 46
25682: PUSH
25683: LD_INT 0
25685: PUSH
25686: LD_INT 0
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 0
25695: PUSH
25696: LD_INT 1
25698: NEG
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 1
25706: PUSH
25707: LD_INT 0
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 1
25716: PUSH
25717: LD_INT 1
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 0
25726: PUSH
25727: LD_INT 1
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 1
25736: NEG
25737: PUSH
25738: LD_INT 0
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 1
25747: NEG
25748: PUSH
25749: LD_INT 1
25751: NEG
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 1
25759: NEG
25760: PUSH
25761: LD_INT 2
25763: NEG
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 0
25771: PUSH
25772: LD_INT 2
25774: NEG
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 1
25782: PUSH
25783: LD_INT 1
25785: NEG
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 2
25793: PUSH
25794: LD_INT 0
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 2
25803: PUSH
25804: LD_INT 1
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 1
25813: PUSH
25814: LD_INT 2
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 0
25823: PUSH
25824: LD_INT 2
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 1
25833: NEG
25834: PUSH
25835: LD_INT 1
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 2
25844: NEG
25845: PUSH
25846: LD_INT 0
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 2
25855: NEG
25856: PUSH
25857: LD_INT 1
25859: NEG
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 1
25867: NEG
25868: PUSH
25869: LD_INT 3
25871: NEG
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 0
25879: PUSH
25880: LD_INT 3
25882: NEG
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 1
25890: PUSH
25891: LD_INT 2
25893: NEG
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 2
25901: PUSH
25902: LD_INT 1
25904: NEG
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 3
25912: PUSH
25913: LD_INT 0
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 3
25922: PUSH
25923: LD_INT 1
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 1
25932: PUSH
25933: LD_INT 3
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 0
25942: PUSH
25943: LD_INT 3
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 1
25952: NEG
25953: PUSH
25954: LD_INT 2
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 2
25963: NEG
25964: PUSH
25965: LD_INT 1
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 3
25974: NEG
25975: PUSH
25976: LD_INT 0
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 3
25985: NEG
25986: PUSH
25987: LD_INT 1
25989: NEG
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26026: LD_ADDR_VAR 0 47
26030: PUSH
26031: LD_INT 0
26033: PUSH
26034: LD_INT 0
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 0
26043: PUSH
26044: LD_INT 1
26046: NEG
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 1
26054: PUSH
26055: LD_INT 0
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 1
26064: PUSH
26065: LD_INT 1
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 0
26074: PUSH
26075: LD_INT 1
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 1
26084: NEG
26085: PUSH
26086: LD_INT 0
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 1
26095: NEG
26096: PUSH
26097: LD_INT 1
26099: NEG
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 1
26107: NEG
26108: PUSH
26109: LD_INT 2
26111: NEG
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 0
26119: PUSH
26120: LD_INT 2
26122: NEG
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 1
26130: PUSH
26131: LD_INT 1
26133: NEG
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 2
26141: NEG
26142: PUSH
26143: LD_INT 1
26145: NEG
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 2
26153: NEG
26154: PUSH
26155: LD_INT 2
26157: NEG
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26177: LD_ADDR_VAR 0 48
26181: PUSH
26182: LD_INT 0
26184: PUSH
26185: LD_INT 0
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 0
26194: PUSH
26195: LD_INT 1
26197: NEG
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 1
26205: PUSH
26206: LD_INT 0
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 1
26215: PUSH
26216: LD_INT 1
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 0
26225: PUSH
26226: LD_INT 1
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 1
26235: NEG
26236: PUSH
26237: LD_INT 0
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 1
26246: NEG
26247: PUSH
26248: LD_INT 1
26250: NEG
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 1
26258: NEG
26259: PUSH
26260: LD_INT 2
26262: NEG
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 0
26270: PUSH
26271: LD_INT 2
26273: NEG
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 1
26281: PUSH
26282: LD_INT 1
26284: NEG
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: LD_INT 2
26292: PUSH
26293: LD_INT 0
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 2
26302: PUSH
26303: LD_INT 1
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26324: LD_ADDR_VAR 0 49
26328: PUSH
26329: LD_INT 0
26331: PUSH
26332: LD_INT 0
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 0
26341: PUSH
26342: LD_INT 1
26344: NEG
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 1
26352: PUSH
26353: LD_INT 0
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 1
26362: PUSH
26363: LD_INT 1
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 0
26372: PUSH
26373: LD_INT 1
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 1
26382: NEG
26383: PUSH
26384: LD_INT 0
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 1
26393: NEG
26394: PUSH
26395: LD_INT 1
26397: NEG
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 1
26405: PUSH
26406: LD_INT 1
26408: NEG
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 2
26416: PUSH
26417: LD_INT 0
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 2
26426: PUSH
26427: LD_INT 1
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 2
26436: PUSH
26437: LD_INT 2
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 1
26446: PUSH
26447: LD_INT 2
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26468: LD_ADDR_VAR 0 50
26472: PUSH
26473: LD_INT 0
26475: PUSH
26476: LD_INT 0
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 0
26485: PUSH
26486: LD_INT 1
26488: NEG
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: LD_INT 1
26496: PUSH
26497: LD_INT 0
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 1
26506: PUSH
26507: LD_INT 1
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 0
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 1
26526: NEG
26527: PUSH
26528: LD_INT 0
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 1
26537: NEG
26538: PUSH
26539: LD_INT 1
26541: NEG
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: LD_INT 2
26549: PUSH
26550: LD_INT 1
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: LD_INT 2
26559: PUSH
26560: LD_INT 2
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 1
26569: PUSH
26570: LD_INT 2
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: LD_INT 0
26579: PUSH
26580: LD_INT 2
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 1
26589: NEG
26590: PUSH
26591: LD_INT 1
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26612: LD_ADDR_VAR 0 51
26616: PUSH
26617: LD_INT 0
26619: PUSH
26620: LD_INT 0
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: LD_INT 0
26629: PUSH
26630: LD_INT 1
26632: NEG
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: LD_INT 1
26640: PUSH
26641: LD_INT 0
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 1
26650: PUSH
26651: LD_INT 1
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 0
26660: PUSH
26661: LD_INT 1
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 1
26670: NEG
26671: PUSH
26672: LD_INT 0
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 1
26681: NEG
26682: PUSH
26683: LD_INT 1
26685: NEG
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 1
26693: PUSH
26694: LD_INT 2
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: LD_INT 0
26703: PUSH
26704: LD_INT 2
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 1
26713: NEG
26714: PUSH
26715: LD_INT 1
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 2
26724: NEG
26725: PUSH
26726: LD_INT 0
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 2
26735: NEG
26736: PUSH
26737: LD_INT 1
26739: NEG
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26759: LD_ADDR_VAR 0 52
26763: PUSH
26764: LD_INT 0
26766: PUSH
26767: LD_INT 0
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 0
26776: PUSH
26777: LD_INT 1
26779: NEG
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 1
26787: PUSH
26788: LD_INT 0
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 1
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: LD_INT 1
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 1
26817: NEG
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 1
26828: NEG
26829: PUSH
26830: LD_INT 1
26832: NEG
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 1
26840: NEG
26841: PUSH
26842: LD_INT 2
26844: NEG
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 1
26852: NEG
26853: PUSH
26854: LD_INT 1
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: LD_INT 2
26863: NEG
26864: PUSH
26865: LD_INT 0
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_INT 2
26874: NEG
26875: PUSH
26876: LD_INT 1
26878: NEG
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 2
26886: NEG
26887: PUSH
26888: LD_INT 2
26890: NEG
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26910: LD_ADDR_VAR 0 53
26914: PUSH
26915: LD_INT 0
26917: PUSH
26918: LD_INT 0
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 0
26927: PUSH
26928: LD_INT 1
26930: NEG
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 1
26938: PUSH
26939: LD_INT 0
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 1
26948: PUSH
26949: LD_INT 1
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 0
26958: PUSH
26959: LD_INT 1
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 1
26968: NEG
26969: PUSH
26970: LD_INT 0
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 1
26979: NEG
26980: PUSH
26981: LD_INT 1
26983: NEG
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 1
26991: NEG
26992: PUSH
26993: LD_INT 2
26995: NEG
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: LD_INT 2
27006: NEG
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 1
27014: PUSH
27015: LD_INT 1
27017: NEG
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 2
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 2
27035: PUSH
27036: LD_INT 1
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 2
27045: PUSH
27046: LD_INT 2
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 1
27055: PUSH
27056: LD_INT 2
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 0
27065: PUSH
27066: LD_INT 2
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 1
27075: NEG
27076: PUSH
27077: LD_INT 1
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 2
27086: NEG
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 2
27097: NEG
27098: PUSH
27099: LD_INT 1
27101: NEG
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 2
27109: NEG
27110: PUSH
27111: LD_INT 2
27113: NEG
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27140: LD_ADDR_VAR 0 54
27144: PUSH
27145: LD_INT 0
27147: PUSH
27148: LD_INT 0
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 0
27157: PUSH
27158: LD_INT 1
27160: NEG
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 1
27168: PUSH
27169: LD_INT 0
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 1
27178: PUSH
27179: LD_INT 1
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 0
27188: PUSH
27189: LD_INT 1
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 1
27198: NEG
27199: PUSH
27200: LD_INT 0
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 1
27209: NEG
27210: PUSH
27211: LD_INT 1
27213: NEG
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 1
27221: NEG
27222: PUSH
27223: LD_INT 2
27225: NEG
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 0
27233: PUSH
27234: LD_INT 2
27236: NEG
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 1
27244: PUSH
27245: LD_INT 1
27247: NEG
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 2
27255: PUSH
27256: LD_INT 0
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 2
27265: PUSH
27266: LD_INT 1
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 2
27275: PUSH
27276: LD_INT 2
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 1
27285: PUSH
27286: LD_INT 2
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 0
27295: PUSH
27296: LD_INT 2
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 1
27305: NEG
27306: PUSH
27307: LD_INT 1
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 2
27316: NEG
27317: PUSH
27318: LD_INT 0
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 2
27327: NEG
27328: PUSH
27329: LD_INT 1
27331: NEG
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 2
27339: NEG
27340: PUSH
27341: LD_INT 2
27343: NEG
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27370: LD_ADDR_VAR 0 55
27374: PUSH
27375: LD_INT 0
27377: PUSH
27378: LD_INT 0
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 0
27387: PUSH
27388: LD_INT 1
27390: NEG
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 1
27398: PUSH
27399: LD_INT 0
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 1
27408: PUSH
27409: LD_INT 1
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 0
27418: PUSH
27419: LD_INT 1
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 1
27428: NEG
27429: PUSH
27430: LD_INT 0
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 1
27439: NEG
27440: PUSH
27441: LD_INT 1
27443: NEG
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 1
27451: NEG
27452: PUSH
27453: LD_INT 2
27455: NEG
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 0
27463: PUSH
27464: LD_INT 2
27466: NEG
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PUSH
27472: LD_INT 1
27474: PUSH
27475: LD_INT 1
27477: NEG
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 2
27485: PUSH
27486: LD_INT 0
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 2
27495: PUSH
27496: LD_INT 1
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: PUSH
27503: LD_INT 2
27505: PUSH
27506: LD_INT 2
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: LD_INT 1
27515: PUSH
27516: LD_INT 2
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 0
27525: PUSH
27526: LD_INT 2
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: LD_INT 1
27535: NEG
27536: PUSH
27537: LD_INT 1
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 2
27546: NEG
27547: PUSH
27548: LD_INT 0
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 2
27557: NEG
27558: PUSH
27559: LD_INT 1
27561: NEG
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 2
27569: NEG
27570: PUSH
27571: LD_INT 2
27573: NEG
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27600: LD_ADDR_VAR 0 56
27604: PUSH
27605: LD_INT 0
27607: PUSH
27608: LD_INT 0
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 0
27617: PUSH
27618: LD_INT 1
27620: NEG
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 1
27628: PUSH
27629: LD_INT 0
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 1
27638: PUSH
27639: LD_INT 1
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 0
27648: PUSH
27649: LD_INT 1
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 1
27658: NEG
27659: PUSH
27660: LD_INT 0
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 1
27669: NEG
27670: PUSH
27671: LD_INT 1
27673: NEG
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 1
27681: NEG
27682: PUSH
27683: LD_INT 2
27685: NEG
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 0
27693: PUSH
27694: LD_INT 2
27696: NEG
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: LD_INT 1
27704: PUSH
27705: LD_INT 1
27707: NEG
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 2
27715: PUSH
27716: LD_INT 0
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 2
27725: PUSH
27726: LD_INT 1
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 2
27735: PUSH
27736: LD_INT 2
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 1
27745: PUSH
27746: LD_INT 2
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 0
27755: PUSH
27756: LD_INT 2
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 1
27765: NEG
27766: PUSH
27767: LD_INT 1
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 2
27776: NEG
27777: PUSH
27778: LD_INT 0
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 2
27787: NEG
27788: PUSH
27789: LD_INT 1
27791: NEG
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 2
27799: NEG
27800: PUSH
27801: LD_INT 2
27803: NEG
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27830: LD_ADDR_VAR 0 57
27834: PUSH
27835: LD_INT 0
27837: PUSH
27838: LD_INT 0
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 0
27847: PUSH
27848: LD_INT 1
27850: NEG
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 1
27858: PUSH
27859: LD_INT 0
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 1
27868: PUSH
27869: LD_INT 1
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PUSH
27876: LD_INT 0
27878: PUSH
27879: LD_INT 1
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 1
27888: NEG
27889: PUSH
27890: LD_INT 0
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 1
27899: NEG
27900: PUSH
27901: LD_INT 1
27903: NEG
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 1
27911: NEG
27912: PUSH
27913: LD_INT 2
27915: NEG
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 0
27923: PUSH
27924: LD_INT 2
27926: NEG
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 1
27934: PUSH
27935: LD_INT 1
27937: NEG
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 2
27945: PUSH
27946: LD_INT 0
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 2
27955: PUSH
27956: LD_INT 1
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 2
27965: PUSH
27966: LD_INT 2
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 1
27975: PUSH
27976: LD_INT 2
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 0
27985: PUSH
27986: LD_INT 2
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 1
27995: NEG
27996: PUSH
27997: LD_INT 1
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 2
28006: NEG
28007: PUSH
28008: LD_INT 0
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 2
28017: NEG
28018: PUSH
28019: LD_INT 1
28021: NEG
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 2
28029: NEG
28030: PUSH
28031: LD_INT 2
28033: NEG
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28060: LD_ADDR_VAR 0 58
28064: PUSH
28065: LD_INT 0
28067: PUSH
28068: LD_INT 0
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 0
28077: PUSH
28078: LD_INT 1
28080: NEG
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 1
28088: PUSH
28089: LD_INT 0
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 1
28098: PUSH
28099: LD_INT 1
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 0
28108: PUSH
28109: LD_INT 1
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 1
28118: NEG
28119: PUSH
28120: LD_INT 0
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 1
28129: NEG
28130: PUSH
28131: LD_INT 1
28133: NEG
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 1
28141: NEG
28142: PUSH
28143: LD_INT 2
28145: NEG
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 0
28153: PUSH
28154: LD_INT 2
28156: NEG
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 1
28164: PUSH
28165: LD_INT 1
28167: NEG
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 2
28175: PUSH
28176: LD_INT 0
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 2
28185: PUSH
28186: LD_INT 1
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 2
28195: PUSH
28196: LD_INT 2
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 1
28205: PUSH
28206: LD_INT 2
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 0
28215: PUSH
28216: LD_INT 2
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 1
28225: NEG
28226: PUSH
28227: LD_INT 1
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 2
28236: NEG
28237: PUSH
28238: LD_INT 0
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 2
28247: NEG
28248: PUSH
28249: LD_INT 1
28251: NEG
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 2
28259: NEG
28260: PUSH
28261: LD_INT 2
28263: NEG
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28290: LD_ADDR_VAR 0 59
28294: PUSH
28295: LD_INT 0
28297: PUSH
28298: LD_INT 0
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 0
28307: PUSH
28308: LD_INT 1
28310: NEG
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 1
28318: PUSH
28319: LD_INT 0
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 1
28328: PUSH
28329: LD_INT 1
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 0
28338: PUSH
28339: LD_INT 1
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 1
28348: NEG
28349: PUSH
28350: LD_INT 0
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 1
28359: NEG
28360: PUSH
28361: LD_INT 1
28363: NEG
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28378: LD_ADDR_VAR 0 60
28382: PUSH
28383: LD_INT 0
28385: PUSH
28386: LD_INT 0
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 0
28395: PUSH
28396: LD_INT 1
28398: NEG
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 1
28406: PUSH
28407: LD_INT 0
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 1
28416: PUSH
28417: LD_INT 1
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 0
28426: PUSH
28427: LD_INT 1
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 1
28436: NEG
28437: PUSH
28438: LD_INT 0
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: LD_INT 1
28447: NEG
28448: PUSH
28449: LD_INT 1
28451: NEG
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28466: LD_ADDR_VAR 0 61
28470: PUSH
28471: LD_INT 0
28473: PUSH
28474: LD_INT 0
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 0
28483: PUSH
28484: LD_INT 1
28486: NEG
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 1
28494: PUSH
28495: LD_INT 0
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 1
28504: PUSH
28505: LD_INT 1
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 0
28514: PUSH
28515: LD_INT 1
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 1
28524: NEG
28525: PUSH
28526: LD_INT 0
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 1
28535: NEG
28536: PUSH
28537: LD_INT 1
28539: NEG
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28554: LD_ADDR_VAR 0 62
28558: PUSH
28559: LD_INT 0
28561: PUSH
28562: LD_INT 0
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: LD_INT 0
28571: PUSH
28572: LD_INT 1
28574: NEG
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 1
28582: PUSH
28583: LD_INT 0
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 1
28592: PUSH
28593: LD_INT 1
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 0
28602: PUSH
28603: LD_INT 1
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PUSH
28610: LD_INT 1
28612: NEG
28613: PUSH
28614: LD_INT 0
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 1
28623: NEG
28624: PUSH
28625: LD_INT 1
28627: NEG
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28642: LD_ADDR_VAR 0 63
28646: PUSH
28647: LD_INT 0
28649: PUSH
28650: LD_INT 0
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 0
28659: PUSH
28660: LD_INT 1
28662: NEG
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 1
28670: PUSH
28671: LD_INT 0
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 1
28680: PUSH
28681: LD_INT 1
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 0
28690: PUSH
28691: LD_INT 1
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 1
28700: NEG
28701: PUSH
28702: LD_INT 0
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 1
28711: NEG
28712: PUSH
28713: LD_INT 1
28715: NEG
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28730: LD_ADDR_VAR 0 64
28734: PUSH
28735: LD_INT 0
28737: PUSH
28738: LD_INT 0
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 0
28747: PUSH
28748: LD_INT 1
28750: NEG
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 1
28758: PUSH
28759: LD_INT 0
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 1
28768: PUSH
28769: LD_INT 1
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 0
28778: PUSH
28779: LD_INT 1
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 1
28788: NEG
28789: PUSH
28790: LD_INT 0
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 1
28799: NEG
28800: PUSH
28801: LD_INT 1
28803: NEG
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: ST_TO_ADDR
// end ; 1 :
28818: GO 34715
28820: LD_INT 1
28822: DOUBLE
28823: EQUAL
28824: IFTRUE 28828
28826: GO 31451
28828: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28829: LD_ADDR_VAR 0 11
28833: PUSH
28834: LD_INT 1
28836: NEG
28837: PUSH
28838: LD_INT 3
28840: NEG
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 0
28848: PUSH
28849: LD_INT 3
28851: NEG
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 1
28859: PUSH
28860: LD_INT 2
28862: NEG
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: LIST
28872: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28873: LD_ADDR_VAR 0 12
28877: PUSH
28878: LD_INT 2
28880: PUSH
28881: LD_INT 1
28883: NEG
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 3
28891: PUSH
28892: LD_INT 0
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 3
28901: PUSH
28902: LD_INT 1
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: LIST
28913: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28914: LD_ADDR_VAR 0 13
28918: PUSH
28919: LD_INT 3
28921: PUSH
28922: LD_INT 2
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 3
28931: PUSH
28932: LD_INT 3
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 2
28941: PUSH
28942: LD_INT 3
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: LIST
28953: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28954: LD_ADDR_VAR 0 14
28958: PUSH
28959: LD_INT 1
28961: PUSH
28962: LD_INT 3
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 0
28971: PUSH
28972: LD_INT 3
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 1
28981: NEG
28982: PUSH
28983: LD_INT 2
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: LIST
28994: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28995: LD_ADDR_VAR 0 15
28999: PUSH
29000: LD_INT 2
29002: NEG
29003: PUSH
29004: LD_INT 1
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 3
29013: NEG
29014: PUSH
29015: LD_INT 0
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 3
29024: NEG
29025: PUSH
29026: LD_INT 1
29028: NEG
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: LIST
29038: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29039: LD_ADDR_VAR 0 16
29043: PUSH
29044: LD_INT 2
29046: NEG
29047: PUSH
29048: LD_INT 3
29050: NEG
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 3
29058: NEG
29059: PUSH
29060: LD_INT 2
29062: NEG
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 3
29070: NEG
29071: PUSH
29072: LD_INT 3
29074: NEG
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: LIST
29084: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29085: LD_ADDR_VAR 0 17
29089: PUSH
29090: LD_INT 1
29092: NEG
29093: PUSH
29094: LD_INT 3
29096: NEG
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 0
29104: PUSH
29105: LD_INT 3
29107: NEG
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 1
29115: PUSH
29116: LD_INT 2
29118: NEG
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: LIST
29128: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29129: LD_ADDR_VAR 0 18
29133: PUSH
29134: LD_INT 2
29136: PUSH
29137: LD_INT 1
29139: NEG
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 3
29147: PUSH
29148: LD_INT 0
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 3
29157: PUSH
29158: LD_INT 1
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: LIST
29169: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29170: LD_ADDR_VAR 0 19
29174: PUSH
29175: LD_INT 3
29177: PUSH
29178: LD_INT 2
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 3
29187: PUSH
29188: LD_INT 3
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 2
29197: PUSH
29198: LD_INT 3
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: LIST
29209: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29210: LD_ADDR_VAR 0 20
29214: PUSH
29215: LD_INT 1
29217: PUSH
29218: LD_INT 3
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: LD_INT 0
29227: PUSH
29228: LD_INT 3
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 1
29237: NEG
29238: PUSH
29239: LD_INT 2
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: LIST
29250: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29251: LD_ADDR_VAR 0 21
29255: PUSH
29256: LD_INT 2
29258: NEG
29259: PUSH
29260: LD_INT 1
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 3
29269: NEG
29270: PUSH
29271: LD_INT 0
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 3
29280: NEG
29281: PUSH
29282: LD_INT 1
29284: NEG
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: LIST
29294: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29295: LD_ADDR_VAR 0 22
29299: PUSH
29300: LD_INT 2
29302: NEG
29303: PUSH
29304: LD_INT 3
29306: NEG
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: LD_INT 3
29314: NEG
29315: PUSH
29316: LD_INT 2
29318: NEG
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 3
29326: NEG
29327: PUSH
29328: LD_INT 3
29330: NEG
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: LIST
29340: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29341: LD_ADDR_VAR 0 23
29345: PUSH
29346: LD_INT 0
29348: PUSH
29349: LD_INT 3
29351: NEG
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: LD_INT 1
29359: NEG
29360: PUSH
29361: LD_INT 4
29363: NEG
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 1
29371: PUSH
29372: LD_INT 3
29374: NEG
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: LIST
29384: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29385: LD_ADDR_VAR 0 24
29389: PUSH
29390: LD_INT 3
29392: PUSH
29393: LD_INT 0
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 3
29402: PUSH
29403: LD_INT 1
29405: NEG
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 4
29413: PUSH
29414: LD_INT 1
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: LIST
29425: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29426: LD_ADDR_VAR 0 25
29430: PUSH
29431: LD_INT 3
29433: PUSH
29434: LD_INT 3
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 4
29443: PUSH
29444: LD_INT 3
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 3
29453: PUSH
29454: LD_INT 4
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: LIST
29465: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29466: LD_ADDR_VAR 0 26
29470: PUSH
29471: LD_INT 0
29473: PUSH
29474: LD_INT 3
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 1
29483: PUSH
29484: LD_INT 4
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 1
29493: NEG
29494: PUSH
29495: LD_INT 3
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: LIST
29506: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29507: LD_ADDR_VAR 0 27
29511: PUSH
29512: LD_INT 3
29514: NEG
29515: PUSH
29516: LD_INT 0
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: LD_INT 3
29525: NEG
29526: PUSH
29527: LD_INT 1
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 4
29536: NEG
29537: PUSH
29538: LD_INT 1
29540: NEG
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: LIST
29550: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29551: LD_ADDR_VAR 0 28
29555: PUSH
29556: LD_INT 3
29558: NEG
29559: PUSH
29560: LD_INT 3
29562: NEG
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 3
29570: NEG
29571: PUSH
29572: LD_INT 4
29574: NEG
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 4
29582: NEG
29583: PUSH
29584: LD_INT 3
29586: NEG
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: LIST
29596: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29597: LD_ADDR_VAR 0 29
29601: PUSH
29602: LD_INT 1
29604: NEG
29605: PUSH
29606: LD_INT 3
29608: NEG
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 0
29616: PUSH
29617: LD_INT 3
29619: NEG
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 1
29627: PUSH
29628: LD_INT 2
29630: NEG
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: LD_INT 1
29638: NEG
29639: PUSH
29640: LD_INT 4
29642: NEG
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: LD_INT 0
29650: PUSH
29651: LD_INT 4
29653: NEG
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: LD_INT 1
29661: PUSH
29662: LD_INT 3
29664: NEG
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 1
29672: NEG
29673: PUSH
29674: LD_INT 5
29676: NEG
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 0
29684: PUSH
29685: LD_INT 5
29687: NEG
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 1
29695: PUSH
29696: LD_INT 4
29698: NEG
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 1
29706: NEG
29707: PUSH
29708: LD_INT 6
29710: NEG
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: LD_INT 0
29718: PUSH
29719: LD_INT 6
29721: NEG
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 1
29729: PUSH
29730: LD_INT 5
29732: NEG
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29752: LD_ADDR_VAR 0 30
29756: PUSH
29757: LD_INT 2
29759: PUSH
29760: LD_INT 1
29762: NEG
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 3
29770: PUSH
29771: LD_INT 0
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 3
29780: PUSH
29781: LD_INT 1
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 3
29790: PUSH
29791: LD_INT 1
29793: NEG
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 4
29801: PUSH
29802: LD_INT 0
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 4
29811: PUSH
29812: LD_INT 1
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 4
29821: PUSH
29822: LD_INT 1
29824: NEG
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 5
29832: PUSH
29833: LD_INT 0
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 5
29842: PUSH
29843: LD_INT 1
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 5
29852: PUSH
29853: LD_INT 1
29855: NEG
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: LD_INT 6
29863: PUSH
29864: LD_INT 0
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 6
29873: PUSH
29874: LD_INT 1
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29895: LD_ADDR_VAR 0 31
29899: PUSH
29900: LD_INT 3
29902: PUSH
29903: LD_INT 2
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 3
29912: PUSH
29913: LD_INT 3
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 2
29922: PUSH
29923: LD_INT 3
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 4
29932: PUSH
29933: LD_INT 3
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 4
29942: PUSH
29943: LD_INT 4
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 3
29952: PUSH
29953: LD_INT 4
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 5
29962: PUSH
29963: LD_INT 4
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 5
29972: PUSH
29973: LD_INT 5
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 4
29982: PUSH
29983: LD_INT 5
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 6
29992: PUSH
29993: LD_INT 5
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 6
30002: PUSH
30003: LD_INT 6
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: LD_INT 5
30012: PUSH
30013: LD_INT 6
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30034: LD_ADDR_VAR 0 32
30038: PUSH
30039: LD_INT 1
30041: PUSH
30042: LD_INT 3
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 0
30051: PUSH
30052: LD_INT 3
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 1
30061: NEG
30062: PUSH
30063: LD_INT 2
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 1
30072: PUSH
30073: LD_INT 4
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 0
30082: PUSH
30083: LD_INT 4
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 1
30092: NEG
30093: PUSH
30094: LD_INT 3
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 1
30103: PUSH
30104: LD_INT 5
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 0
30113: PUSH
30114: LD_INT 5
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 1
30123: NEG
30124: PUSH
30125: LD_INT 4
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 1
30134: PUSH
30135: LD_INT 6
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 0
30144: PUSH
30145: LD_INT 6
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 1
30154: NEG
30155: PUSH
30156: LD_INT 5
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30177: LD_ADDR_VAR 0 33
30181: PUSH
30182: LD_INT 2
30184: NEG
30185: PUSH
30186: LD_INT 1
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 3
30195: NEG
30196: PUSH
30197: LD_INT 0
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 3
30206: NEG
30207: PUSH
30208: LD_INT 1
30210: NEG
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 3
30218: NEG
30219: PUSH
30220: LD_INT 1
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 4
30229: NEG
30230: PUSH
30231: LD_INT 0
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 4
30240: NEG
30241: PUSH
30242: LD_INT 1
30244: NEG
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 4
30252: NEG
30253: PUSH
30254: LD_INT 1
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 5
30263: NEG
30264: PUSH
30265: LD_INT 0
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 5
30274: NEG
30275: PUSH
30276: LD_INT 1
30278: NEG
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 5
30286: NEG
30287: PUSH
30288: LD_INT 1
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 6
30297: NEG
30298: PUSH
30299: LD_INT 0
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 6
30308: NEG
30309: PUSH
30310: LD_INT 1
30312: NEG
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30332: LD_ADDR_VAR 0 34
30336: PUSH
30337: LD_INT 2
30339: NEG
30340: PUSH
30341: LD_INT 3
30343: NEG
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 3
30351: NEG
30352: PUSH
30353: LD_INT 2
30355: NEG
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 3
30363: NEG
30364: PUSH
30365: LD_INT 3
30367: NEG
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 3
30375: NEG
30376: PUSH
30377: LD_INT 4
30379: NEG
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 4
30387: NEG
30388: PUSH
30389: LD_INT 3
30391: NEG
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 4
30399: NEG
30400: PUSH
30401: LD_INT 4
30403: NEG
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 4
30411: NEG
30412: PUSH
30413: LD_INT 5
30415: NEG
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 5
30423: NEG
30424: PUSH
30425: LD_INT 4
30427: NEG
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 5
30435: NEG
30436: PUSH
30437: LD_INT 5
30439: NEG
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 5
30447: NEG
30448: PUSH
30449: LD_INT 6
30451: NEG
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 6
30459: NEG
30460: PUSH
30461: LD_INT 5
30463: NEG
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 6
30471: NEG
30472: PUSH
30473: LD_INT 6
30475: NEG
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30495: LD_ADDR_VAR 0 41
30499: PUSH
30500: LD_INT 0
30502: PUSH
30503: LD_INT 2
30505: NEG
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 1
30513: NEG
30514: PUSH
30515: LD_INT 3
30517: NEG
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 1
30525: PUSH
30526: LD_INT 2
30528: NEG
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: LIST
30538: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30539: LD_ADDR_VAR 0 42
30543: PUSH
30544: LD_INT 2
30546: PUSH
30547: LD_INT 0
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 2
30556: PUSH
30557: LD_INT 1
30559: NEG
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 3
30567: PUSH
30568: LD_INT 1
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: LIST
30579: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30580: LD_ADDR_VAR 0 43
30584: PUSH
30585: LD_INT 2
30587: PUSH
30588: LD_INT 2
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 3
30597: PUSH
30598: LD_INT 2
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 2
30607: PUSH
30608: LD_INT 3
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: LIST
30619: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30620: LD_ADDR_VAR 0 44
30624: PUSH
30625: LD_INT 0
30627: PUSH
30628: LD_INT 2
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 1
30637: PUSH
30638: LD_INT 3
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 1
30647: NEG
30648: PUSH
30649: LD_INT 2
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: LIST
30660: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30661: LD_ADDR_VAR 0 45
30665: PUSH
30666: LD_INT 2
30668: NEG
30669: PUSH
30670: LD_INT 0
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 2
30679: NEG
30680: PUSH
30681: LD_INT 1
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 3
30690: NEG
30691: PUSH
30692: LD_INT 1
30694: NEG
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: LIST
30704: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30705: LD_ADDR_VAR 0 46
30709: PUSH
30710: LD_INT 2
30712: NEG
30713: PUSH
30714: LD_INT 2
30716: NEG
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 2
30724: NEG
30725: PUSH
30726: LD_INT 3
30728: NEG
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 3
30736: NEG
30737: PUSH
30738: LD_INT 2
30740: NEG
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: LIST
30750: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30751: LD_ADDR_VAR 0 47
30755: PUSH
30756: LD_INT 2
30758: NEG
30759: PUSH
30760: LD_INT 3
30762: NEG
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 1
30770: NEG
30771: PUSH
30772: LD_INT 3
30774: NEG
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30784: LD_ADDR_VAR 0 48
30788: PUSH
30789: LD_INT 1
30791: PUSH
30792: LD_INT 2
30794: NEG
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 2
30802: PUSH
30803: LD_INT 1
30805: NEG
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30815: LD_ADDR_VAR 0 49
30819: PUSH
30820: LD_INT 3
30822: PUSH
30823: LD_INT 1
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 3
30832: PUSH
30833: LD_INT 2
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30844: LD_ADDR_VAR 0 50
30848: PUSH
30849: LD_INT 2
30851: PUSH
30852: LD_INT 3
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 1
30861: PUSH
30862: LD_INT 3
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30873: LD_ADDR_VAR 0 51
30877: PUSH
30878: LD_INT 1
30880: NEG
30881: PUSH
30882: LD_INT 2
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 2
30891: NEG
30892: PUSH
30893: LD_INT 1
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30904: LD_ADDR_VAR 0 52
30908: PUSH
30909: LD_INT 3
30911: NEG
30912: PUSH
30913: LD_INT 1
30915: NEG
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 3
30923: NEG
30924: PUSH
30925: LD_INT 2
30927: NEG
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30937: LD_ADDR_VAR 0 53
30941: PUSH
30942: LD_INT 1
30944: NEG
30945: PUSH
30946: LD_INT 3
30948: NEG
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 0
30956: PUSH
30957: LD_INT 3
30959: NEG
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 1
30967: PUSH
30968: LD_INT 2
30970: NEG
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: LIST
30980: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30981: LD_ADDR_VAR 0 54
30985: PUSH
30986: LD_INT 2
30988: PUSH
30989: LD_INT 1
30991: NEG
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 3
30999: PUSH
31000: LD_INT 0
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 3
31009: PUSH
31010: LD_INT 1
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: LIST
31021: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31022: LD_ADDR_VAR 0 55
31026: PUSH
31027: LD_INT 3
31029: PUSH
31030: LD_INT 2
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 3
31039: PUSH
31040: LD_INT 3
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 2
31049: PUSH
31050: LD_INT 3
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: LIST
31061: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31062: LD_ADDR_VAR 0 56
31066: PUSH
31067: LD_INT 1
31069: PUSH
31070: LD_INT 3
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 0
31079: PUSH
31080: LD_INT 3
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 1
31089: NEG
31090: PUSH
31091: LD_INT 2
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: LIST
31102: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31103: LD_ADDR_VAR 0 57
31107: PUSH
31108: LD_INT 2
31110: NEG
31111: PUSH
31112: LD_INT 1
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 3
31121: NEG
31122: PUSH
31123: LD_INT 0
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 3
31132: NEG
31133: PUSH
31134: LD_INT 1
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: LIST
31146: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31147: LD_ADDR_VAR 0 58
31151: PUSH
31152: LD_INT 2
31154: NEG
31155: PUSH
31156: LD_INT 3
31158: NEG
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 3
31166: NEG
31167: PUSH
31168: LD_INT 2
31170: NEG
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 3
31178: NEG
31179: PUSH
31180: LD_INT 3
31182: NEG
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: LIST
31192: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31193: LD_ADDR_VAR 0 59
31197: PUSH
31198: LD_INT 1
31200: NEG
31201: PUSH
31202: LD_INT 2
31204: NEG
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 0
31212: PUSH
31213: LD_INT 2
31215: NEG
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 1
31223: PUSH
31224: LD_INT 1
31226: NEG
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: LIST
31236: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31237: LD_ADDR_VAR 0 60
31241: PUSH
31242: LD_INT 1
31244: PUSH
31245: LD_INT 1
31247: NEG
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 2
31255: PUSH
31256: LD_INT 0
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 2
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: LIST
31277: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31278: LD_ADDR_VAR 0 61
31282: PUSH
31283: LD_INT 2
31285: PUSH
31286: LD_INT 1
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 2
31295: PUSH
31296: LD_INT 2
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 1
31305: PUSH
31306: LD_INT 2
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: LIST
31317: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31318: LD_ADDR_VAR 0 62
31322: PUSH
31323: LD_INT 1
31325: PUSH
31326: LD_INT 2
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 0
31335: PUSH
31336: LD_INT 2
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 1
31345: NEG
31346: PUSH
31347: LD_INT 1
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: LIST
31358: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31359: LD_ADDR_VAR 0 63
31363: PUSH
31364: LD_INT 1
31366: NEG
31367: PUSH
31368: LD_INT 1
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 2
31377: NEG
31378: PUSH
31379: LD_INT 0
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 2
31388: NEG
31389: PUSH
31390: LD_INT 1
31392: NEG
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: LIST
31402: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31403: LD_ADDR_VAR 0 64
31407: PUSH
31408: LD_INT 1
31410: NEG
31411: PUSH
31412: LD_INT 2
31414: NEG
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 2
31422: NEG
31423: PUSH
31424: LD_INT 1
31426: NEG
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 2
31434: NEG
31435: PUSH
31436: LD_INT 2
31438: NEG
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: LIST
31448: ST_TO_ADDR
// end ; 2 :
31449: GO 34715
31451: LD_INT 2
31453: DOUBLE
31454: EQUAL
31455: IFTRUE 31459
31457: GO 34714
31459: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31460: LD_ADDR_VAR 0 29
31464: PUSH
31465: LD_INT 4
31467: PUSH
31468: LD_INT 0
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 4
31477: PUSH
31478: LD_INT 1
31480: NEG
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 5
31488: PUSH
31489: LD_INT 0
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 5
31498: PUSH
31499: LD_INT 1
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 4
31508: PUSH
31509: LD_INT 1
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 3
31518: PUSH
31519: LD_INT 0
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 3
31528: PUSH
31529: LD_INT 1
31531: NEG
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 3
31539: PUSH
31540: LD_INT 2
31542: NEG
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 5
31550: PUSH
31551: LD_INT 2
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 3
31560: PUSH
31561: LD_INT 3
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 3
31570: PUSH
31571: LD_INT 2
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 4
31580: PUSH
31581: LD_INT 3
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 4
31590: PUSH
31591: LD_INT 4
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 3
31600: PUSH
31601: LD_INT 4
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 2
31610: PUSH
31611: LD_INT 3
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 2
31620: PUSH
31621: LD_INT 2
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 4
31630: PUSH
31631: LD_INT 2
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 2
31640: PUSH
31641: LD_INT 4
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 0
31650: PUSH
31651: LD_INT 4
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 0
31660: PUSH
31661: LD_INT 3
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 1
31670: PUSH
31671: LD_INT 4
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 1
31680: PUSH
31681: LD_INT 5
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 0
31690: PUSH
31691: LD_INT 5
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 1
31700: NEG
31701: PUSH
31702: LD_INT 4
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 1
31711: NEG
31712: PUSH
31713: LD_INT 3
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 2
31722: PUSH
31723: LD_INT 5
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 2
31732: NEG
31733: PUSH
31734: LD_INT 3
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 3
31743: NEG
31744: PUSH
31745: LD_INT 0
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 3
31754: NEG
31755: PUSH
31756: LD_INT 1
31758: NEG
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 2
31766: NEG
31767: PUSH
31768: LD_INT 0
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 2
31777: NEG
31778: PUSH
31779: LD_INT 1
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 3
31788: NEG
31789: PUSH
31790: LD_INT 1
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 4
31799: NEG
31800: PUSH
31801: LD_INT 0
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 4
31810: NEG
31811: PUSH
31812: LD_INT 1
31814: NEG
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 4
31822: NEG
31823: PUSH
31824: LD_INT 2
31826: NEG
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: PUSH
31832: LD_INT 2
31834: NEG
31835: PUSH
31836: LD_INT 2
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 4
31845: NEG
31846: PUSH
31847: LD_INT 4
31849: NEG
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 4
31857: NEG
31858: PUSH
31859: LD_INT 5
31861: NEG
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 3
31869: NEG
31870: PUSH
31871: LD_INT 4
31873: NEG
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 3
31881: NEG
31882: PUSH
31883: LD_INT 3
31885: NEG
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 4
31893: NEG
31894: PUSH
31895: LD_INT 3
31897: NEG
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 5
31905: NEG
31906: PUSH
31907: LD_INT 4
31909: NEG
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 5
31917: NEG
31918: PUSH
31919: LD_INT 5
31921: NEG
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 3
31929: NEG
31930: PUSH
31931: LD_INT 5
31933: NEG
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 5
31941: NEG
31942: PUSH
31943: LD_INT 3
31945: NEG
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31998: LD_ADDR_VAR 0 30
32002: PUSH
32003: LD_INT 4
32005: PUSH
32006: LD_INT 4
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 4
32015: PUSH
32016: LD_INT 3
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 5
32025: PUSH
32026: LD_INT 4
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 5
32035: PUSH
32036: LD_INT 5
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 4
32045: PUSH
32046: LD_INT 5
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 3
32055: PUSH
32056: LD_INT 4
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 3
32065: PUSH
32066: LD_INT 3
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 5
32075: PUSH
32076: LD_INT 3
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 3
32085: PUSH
32086: LD_INT 5
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 0
32095: PUSH
32096: LD_INT 3
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 0
32105: PUSH
32106: LD_INT 2
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 1
32115: PUSH
32116: LD_INT 3
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 1
32125: PUSH
32126: LD_INT 4
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: LD_INT 0
32135: PUSH
32136: LD_INT 4
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 1
32145: NEG
32146: PUSH
32147: LD_INT 3
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 1
32156: NEG
32157: PUSH
32158: LD_INT 2
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 2
32167: PUSH
32168: LD_INT 4
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 2
32177: NEG
32178: PUSH
32179: LD_INT 2
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 4
32188: NEG
32189: PUSH
32190: LD_INT 0
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 4
32199: NEG
32200: PUSH
32201: LD_INT 1
32203: NEG
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 3
32211: NEG
32212: PUSH
32213: LD_INT 0
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 3
32222: NEG
32223: PUSH
32224: LD_INT 1
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 4
32233: NEG
32234: PUSH
32235: LD_INT 1
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 5
32244: NEG
32245: PUSH
32246: LD_INT 0
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 5
32255: NEG
32256: PUSH
32257: LD_INT 1
32259: NEG
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 5
32267: NEG
32268: PUSH
32269: LD_INT 2
32271: NEG
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 3
32279: NEG
32280: PUSH
32281: LD_INT 2
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 3
32290: NEG
32291: PUSH
32292: LD_INT 3
32294: NEG
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 3
32302: NEG
32303: PUSH
32304: LD_INT 4
32306: NEG
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 2
32314: NEG
32315: PUSH
32316: LD_INT 3
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 2
32326: NEG
32327: PUSH
32328: LD_INT 2
32330: NEG
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 3
32338: NEG
32339: PUSH
32340: LD_INT 2
32342: NEG
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 4
32350: NEG
32351: PUSH
32352: LD_INT 3
32354: NEG
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 4
32362: NEG
32363: PUSH
32364: LD_INT 4
32366: NEG
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 2
32374: NEG
32375: PUSH
32376: LD_INT 4
32378: NEG
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 4
32386: NEG
32387: PUSH
32388: LD_INT 2
32390: NEG
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 0
32398: PUSH
32399: LD_INT 4
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 0
32409: PUSH
32410: LD_INT 5
32412: NEG
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 1
32420: PUSH
32421: LD_INT 4
32423: NEG
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 1
32431: PUSH
32432: LD_INT 3
32434: NEG
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 0
32442: PUSH
32443: LD_INT 3
32445: NEG
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 1
32453: NEG
32454: PUSH
32455: LD_INT 4
32457: NEG
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 1
32465: NEG
32466: PUSH
32467: LD_INT 5
32469: NEG
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 2
32477: PUSH
32478: LD_INT 3
32480: NEG
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 2
32488: NEG
32489: PUSH
32490: LD_INT 5
32492: NEG
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32545: LD_ADDR_VAR 0 31
32549: PUSH
32550: LD_INT 0
32552: PUSH
32553: LD_INT 4
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 0
32562: PUSH
32563: LD_INT 3
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 1
32572: PUSH
32573: LD_INT 4
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 1
32582: PUSH
32583: LD_INT 5
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 0
32592: PUSH
32593: LD_INT 5
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 1
32602: NEG
32603: PUSH
32604: LD_INT 4
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 1
32613: NEG
32614: PUSH
32615: LD_INT 3
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 2
32624: PUSH
32625: LD_INT 5
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 2
32634: NEG
32635: PUSH
32636: LD_INT 3
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 3
32645: NEG
32646: PUSH
32647: LD_INT 0
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 3
32656: NEG
32657: PUSH
32658: LD_INT 1
32660: NEG
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 2
32668: NEG
32669: PUSH
32670: LD_INT 0
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 2
32679: NEG
32680: PUSH
32681: LD_INT 1
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 3
32690: NEG
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 4
32701: NEG
32702: PUSH
32703: LD_INT 0
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 4
32712: NEG
32713: PUSH
32714: LD_INT 1
32716: NEG
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 4
32724: NEG
32725: PUSH
32726: LD_INT 2
32728: NEG
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 2
32736: NEG
32737: PUSH
32738: LD_INT 2
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 4
32747: NEG
32748: PUSH
32749: LD_INT 4
32751: NEG
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 4
32759: NEG
32760: PUSH
32761: LD_INT 5
32763: NEG
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 3
32771: NEG
32772: PUSH
32773: LD_INT 4
32775: NEG
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 3
32783: NEG
32784: PUSH
32785: LD_INT 3
32787: NEG
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 4
32795: NEG
32796: PUSH
32797: LD_INT 3
32799: NEG
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 5
32807: NEG
32808: PUSH
32809: LD_INT 4
32811: NEG
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 5
32819: NEG
32820: PUSH
32821: LD_INT 5
32823: NEG
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 3
32831: NEG
32832: PUSH
32833: LD_INT 5
32835: NEG
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 5
32843: NEG
32844: PUSH
32845: LD_INT 3
32847: NEG
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 0
32855: PUSH
32856: LD_INT 3
32858: NEG
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 0
32866: PUSH
32867: LD_INT 4
32869: NEG
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 1
32877: PUSH
32878: LD_INT 3
32880: NEG
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 1
32888: PUSH
32889: LD_INT 2
32891: NEG
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 0
32899: PUSH
32900: LD_INT 2
32902: NEG
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 1
32910: NEG
32911: PUSH
32912: LD_INT 3
32914: NEG
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 1
32922: NEG
32923: PUSH
32924: LD_INT 4
32926: NEG
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 2
32934: PUSH
32935: LD_INT 2
32937: NEG
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 2
32945: NEG
32946: PUSH
32947: LD_INT 4
32949: NEG
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 4
32957: PUSH
32958: LD_INT 0
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 4
32967: PUSH
32968: LD_INT 1
32970: NEG
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 5
32978: PUSH
32979: LD_INT 0
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 5
32988: PUSH
32989: LD_INT 1
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 4
32998: PUSH
32999: LD_INT 1
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 3
33008: PUSH
33009: LD_INT 0
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 3
33018: PUSH
33019: LD_INT 1
33021: NEG
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 3
33029: PUSH
33030: LD_INT 2
33032: NEG
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 5
33040: PUSH
33041: LD_INT 2
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33095: LD_ADDR_VAR 0 32
33099: PUSH
33100: LD_INT 4
33102: NEG
33103: PUSH
33104: LD_INT 0
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 4
33113: NEG
33114: PUSH
33115: LD_INT 1
33117: NEG
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 3
33125: NEG
33126: PUSH
33127: LD_INT 0
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 3
33136: NEG
33137: PUSH
33138: LD_INT 1
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 4
33147: NEG
33148: PUSH
33149: LD_INT 1
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 5
33158: NEG
33159: PUSH
33160: LD_INT 0
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 5
33169: NEG
33170: PUSH
33171: LD_INT 1
33173: NEG
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 5
33181: NEG
33182: PUSH
33183: LD_INT 2
33185: NEG
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 3
33193: NEG
33194: PUSH
33195: LD_INT 2
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 3
33204: NEG
33205: PUSH
33206: LD_INT 3
33208: NEG
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 3
33216: NEG
33217: PUSH
33218: LD_INT 4
33220: NEG
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 2
33228: NEG
33229: PUSH
33230: LD_INT 3
33232: NEG
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 2
33240: NEG
33241: PUSH
33242: LD_INT 2
33244: NEG
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 3
33252: NEG
33253: PUSH
33254: LD_INT 2
33256: NEG
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 4
33264: NEG
33265: PUSH
33266: LD_INT 3
33268: NEG
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 4
33276: NEG
33277: PUSH
33278: LD_INT 4
33280: NEG
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 2
33288: NEG
33289: PUSH
33290: LD_INT 4
33292: NEG
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 4
33300: NEG
33301: PUSH
33302: LD_INT 2
33304: NEG
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 0
33312: PUSH
33313: LD_INT 4
33315: NEG
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 0
33323: PUSH
33324: LD_INT 5
33326: NEG
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 1
33334: PUSH
33335: LD_INT 4
33337: NEG
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 1
33345: PUSH
33346: LD_INT 3
33348: NEG
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 0
33356: PUSH
33357: LD_INT 3
33359: NEG
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 1
33367: NEG
33368: PUSH
33369: LD_INT 4
33371: NEG
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 1
33379: NEG
33380: PUSH
33381: LD_INT 5
33383: NEG
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 2
33391: PUSH
33392: LD_INT 3
33394: NEG
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 2
33402: NEG
33403: PUSH
33404: LD_INT 5
33406: NEG
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 3
33414: PUSH
33415: LD_INT 0
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 3
33424: PUSH
33425: LD_INT 1
33427: NEG
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 4
33435: PUSH
33436: LD_INT 0
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 4
33445: PUSH
33446: LD_INT 1
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 3
33455: PUSH
33456: LD_INT 1
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 2
33465: PUSH
33466: LD_INT 0
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 2
33475: PUSH
33476: LD_INT 1
33478: NEG
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 2
33486: PUSH
33487: LD_INT 2
33489: NEG
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 4
33497: PUSH
33498: LD_INT 2
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 4
33507: PUSH
33508: LD_INT 4
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 4
33517: PUSH
33518: LD_INT 3
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 5
33527: PUSH
33528: LD_INT 4
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 5
33537: PUSH
33538: LD_INT 5
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 4
33547: PUSH
33548: LD_INT 5
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 3
33557: PUSH
33558: LD_INT 4
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 3
33567: PUSH
33568: LD_INT 3
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 5
33577: PUSH
33578: LD_INT 3
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 3
33587: PUSH
33588: LD_INT 5
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33642: LD_ADDR_VAR 0 33
33646: PUSH
33647: LD_INT 4
33649: NEG
33650: PUSH
33651: LD_INT 4
33653: NEG
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 4
33661: NEG
33662: PUSH
33663: LD_INT 5
33665: NEG
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 3
33673: NEG
33674: PUSH
33675: LD_INT 4
33677: NEG
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 3
33685: NEG
33686: PUSH
33687: LD_INT 3
33689: NEG
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 4
33697: NEG
33698: PUSH
33699: LD_INT 3
33701: NEG
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 5
33709: NEG
33710: PUSH
33711: LD_INT 4
33713: NEG
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 5
33721: NEG
33722: PUSH
33723: LD_INT 5
33725: NEG
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 3
33733: NEG
33734: PUSH
33735: LD_INT 5
33737: NEG
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 5
33745: NEG
33746: PUSH
33747: LD_INT 3
33749: NEG
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 0
33757: PUSH
33758: LD_INT 3
33760: NEG
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 0
33768: PUSH
33769: LD_INT 4
33771: NEG
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 1
33779: PUSH
33780: LD_INT 3
33782: NEG
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 1
33790: PUSH
33791: LD_INT 2
33793: NEG
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 0
33801: PUSH
33802: LD_INT 2
33804: NEG
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 1
33812: NEG
33813: PUSH
33814: LD_INT 3
33816: NEG
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 1
33824: NEG
33825: PUSH
33826: LD_INT 4
33828: NEG
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 2
33836: PUSH
33837: LD_INT 2
33839: NEG
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 2
33847: NEG
33848: PUSH
33849: LD_INT 4
33851: NEG
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 4
33859: PUSH
33860: LD_INT 0
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 4
33869: PUSH
33870: LD_INT 1
33872: NEG
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 5
33880: PUSH
33881: LD_INT 0
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 5
33890: PUSH
33891: LD_INT 1
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 4
33900: PUSH
33901: LD_INT 1
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 3
33910: PUSH
33911: LD_INT 0
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 3
33920: PUSH
33921: LD_INT 1
33923: NEG
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 3
33931: PUSH
33932: LD_INT 2
33934: NEG
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 5
33942: PUSH
33943: LD_INT 2
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 3
33952: PUSH
33953: LD_INT 3
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 3
33962: PUSH
33963: LD_INT 2
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 4
33972: PUSH
33973: LD_INT 3
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 4
33982: PUSH
33983: LD_INT 4
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 3
33992: PUSH
33993: LD_INT 4
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 2
34002: PUSH
34003: LD_INT 3
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 2
34012: PUSH
34013: LD_INT 2
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 4
34022: PUSH
34023: LD_INT 2
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 2
34032: PUSH
34033: LD_INT 4
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 0
34042: PUSH
34043: LD_INT 4
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 0
34052: PUSH
34053: LD_INT 3
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 1
34062: PUSH
34063: LD_INT 4
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 1
34072: PUSH
34073: LD_INT 5
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 0
34082: PUSH
34083: LD_INT 5
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 1
34092: NEG
34093: PUSH
34094: LD_INT 4
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 1
34103: NEG
34104: PUSH
34105: LD_INT 3
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 2
34114: PUSH
34115: LD_INT 5
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 2
34124: NEG
34125: PUSH
34126: LD_INT 3
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34180: LD_ADDR_VAR 0 34
34184: PUSH
34185: LD_INT 0
34187: PUSH
34188: LD_INT 4
34190: NEG
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 0
34198: PUSH
34199: LD_INT 5
34201: NEG
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 1
34209: PUSH
34210: LD_INT 4
34212: NEG
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: LD_INT 1
34220: PUSH
34221: LD_INT 3
34223: NEG
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 0
34231: PUSH
34232: LD_INT 3
34234: NEG
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 1
34242: NEG
34243: PUSH
34244: LD_INT 4
34246: NEG
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 1
34254: NEG
34255: PUSH
34256: LD_INT 5
34258: NEG
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 2
34266: PUSH
34267: LD_INT 3
34269: NEG
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 2
34277: NEG
34278: PUSH
34279: LD_INT 5
34281: NEG
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 3
34289: PUSH
34290: LD_INT 0
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: LD_INT 3
34299: PUSH
34300: LD_INT 1
34302: NEG
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 4
34310: PUSH
34311: LD_INT 0
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 4
34320: PUSH
34321: LD_INT 1
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 3
34330: PUSH
34331: LD_INT 1
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 2
34340: PUSH
34341: LD_INT 0
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 2
34350: PUSH
34351: LD_INT 1
34353: NEG
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 2
34361: PUSH
34362: LD_INT 2
34364: NEG
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 4
34372: PUSH
34373: LD_INT 2
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 4
34382: PUSH
34383: LD_INT 4
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 4
34392: PUSH
34393: LD_INT 3
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 5
34402: PUSH
34403: LD_INT 4
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 5
34412: PUSH
34413: LD_INT 5
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 4
34422: PUSH
34423: LD_INT 5
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 3
34432: PUSH
34433: LD_INT 4
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 3
34442: PUSH
34443: LD_INT 3
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: LD_INT 5
34452: PUSH
34453: LD_INT 3
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 3
34462: PUSH
34463: LD_INT 5
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 0
34472: PUSH
34473: LD_INT 3
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 0
34482: PUSH
34483: LD_INT 2
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 1
34492: PUSH
34493: LD_INT 3
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 1
34502: PUSH
34503: LD_INT 4
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 0
34512: PUSH
34513: LD_INT 4
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 1
34522: NEG
34523: PUSH
34524: LD_INT 3
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 1
34533: NEG
34534: PUSH
34535: LD_INT 2
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 2
34544: PUSH
34545: LD_INT 4
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 2
34554: NEG
34555: PUSH
34556: LD_INT 2
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 4
34565: NEG
34566: PUSH
34567: LD_INT 0
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 4
34576: NEG
34577: PUSH
34578: LD_INT 1
34580: NEG
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 3
34588: NEG
34589: PUSH
34590: LD_INT 0
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 3
34599: NEG
34600: PUSH
34601: LD_INT 1
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 4
34610: NEG
34611: PUSH
34612: LD_INT 1
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 5
34621: NEG
34622: PUSH
34623: LD_INT 0
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 5
34632: NEG
34633: PUSH
34634: LD_INT 1
34636: NEG
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 5
34644: NEG
34645: PUSH
34646: LD_INT 2
34648: NEG
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 3
34656: NEG
34657: PUSH
34658: LD_INT 2
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: ST_TO_ADDR
// end ; end ;
34712: GO 34715
34714: POP
// case btype of b_depot , b_warehouse :
34715: LD_VAR 0 1
34719: PUSH
34720: LD_INT 0
34722: DOUBLE
34723: EQUAL
34724: IFTRUE 34734
34726: LD_INT 1
34728: DOUBLE
34729: EQUAL
34730: IFTRUE 34734
34732: GO 34935
34734: POP
// case nation of nation_american :
34735: LD_VAR 0 5
34739: PUSH
34740: LD_INT 1
34742: DOUBLE
34743: EQUAL
34744: IFTRUE 34748
34746: GO 34804
34748: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34749: LD_ADDR_VAR 0 9
34753: PUSH
34754: LD_VAR 0 11
34758: PUSH
34759: LD_VAR 0 12
34763: PUSH
34764: LD_VAR 0 13
34768: PUSH
34769: LD_VAR 0 14
34773: PUSH
34774: LD_VAR 0 15
34778: PUSH
34779: LD_VAR 0 16
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: PUSH
34792: LD_VAR 0 4
34796: PUSH
34797: LD_INT 1
34799: PLUS
34800: ARRAY
34801: ST_TO_ADDR
34802: GO 34933
34804: LD_INT 2
34806: DOUBLE
34807: EQUAL
34808: IFTRUE 34812
34810: GO 34868
34812: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34813: LD_ADDR_VAR 0 9
34817: PUSH
34818: LD_VAR 0 17
34822: PUSH
34823: LD_VAR 0 18
34827: PUSH
34828: LD_VAR 0 19
34832: PUSH
34833: LD_VAR 0 20
34837: PUSH
34838: LD_VAR 0 21
34842: PUSH
34843: LD_VAR 0 22
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: PUSH
34856: LD_VAR 0 4
34860: PUSH
34861: LD_INT 1
34863: PLUS
34864: ARRAY
34865: ST_TO_ADDR
34866: GO 34933
34868: LD_INT 3
34870: DOUBLE
34871: EQUAL
34872: IFTRUE 34876
34874: GO 34932
34876: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34877: LD_ADDR_VAR 0 9
34881: PUSH
34882: LD_VAR 0 23
34886: PUSH
34887: LD_VAR 0 24
34891: PUSH
34892: LD_VAR 0 25
34896: PUSH
34897: LD_VAR 0 26
34901: PUSH
34902: LD_VAR 0 27
34906: PUSH
34907: LD_VAR 0 28
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: PUSH
34920: LD_VAR 0 4
34924: PUSH
34925: LD_INT 1
34927: PLUS
34928: ARRAY
34929: ST_TO_ADDR
34930: GO 34933
34932: POP
34933: GO 35488
34935: LD_INT 2
34937: DOUBLE
34938: EQUAL
34939: IFTRUE 34949
34941: LD_INT 3
34943: DOUBLE
34944: EQUAL
34945: IFTRUE 34949
34947: GO 35005
34949: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34950: LD_ADDR_VAR 0 9
34954: PUSH
34955: LD_VAR 0 29
34959: PUSH
34960: LD_VAR 0 30
34964: PUSH
34965: LD_VAR 0 31
34969: PUSH
34970: LD_VAR 0 32
34974: PUSH
34975: LD_VAR 0 33
34979: PUSH
34980: LD_VAR 0 34
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: PUSH
34993: LD_VAR 0 4
34997: PUSH
34998: LD_INT 1
35000: PLUS
35001: ARRAY
35002: ST_TO_ADDR
35003: GO 35488
35005: LD_INT 16
35007: DOUBLE
35008: EQUAL
35009: IFTRUE 35067
35011: LD_INT 17
35013: DOUBLE
35014: EQUAL
35015: IFTRUE 35067
35017: LD_INT 18
35019: DOUBLE
35020: EQUAL
35021: IFTRUE 35067
35023: LD_INT 19
35025: DOUBLE
35026: EQUAL
35027: IFTRUE 35067
35029: LD_INT 22
35031: DOUBLE
35032: EQUAL
35033: IFTRUE 35067
35035: LD_INT 20
35037: DOUBLE
35038: EQUAL
35039: IFTRUE 35067
35041: LD_INT 21
35043: DOUBLE
35044: EQUAL
35045: IFTRUE 35067
35047: LD_INT 23
35049: DOUBLE
35050: EQUAL
35051: IFTRUE 35067
35053: LD_INT 24
35055: DOUBLE
35056: EQUAL
35057: IFTRUE 35067
35059: LD_INT 25
35061: DOUBLE
35062: EQUAL
35063: IFTRUE 35067
35065: GO 35123
35067: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35068: LD_ADDR_VAR 0 9
35072: PUSH
35073: LD_VAR 0 35
35077: PUSH
35078: LD_VAR 0 36
35082: PUSH
35083: LD_VAR 0 37
35087: PUSH
35088: LD_VAR 0 38
35092: PUSH
35093: LD_VAR 0 39
35097: PUSH
35098: LD_VAR 0 40
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: PUSH
35111: LD_VAR 0 4
35115: PUSH
35116: LD_INT 1
35118: PLUS
35119: ARRAY
35120: ST_TO_ADDR
35121: GO 35488
35123: LD_INT 6
35125: DOUBLE
35126: EQUAL
35127: IFTRUE 35179
35129: LD_INT 7
35131: DOUBLE
35132: EQUAL
35133: IFTRUE 35179
35135: LD_INT 8
35137: DOUBLE
35138: EQUAL
35139: IFTRUE 35179
35141: LD_INT 13
35143: DOUBLE
35144: EQUAL
35145: IFTRUE 35179
35147: LD_INT 12
35149: DOUBLE
35150: EQUAL
35151: IFTRUE 35179
35153: LD_INT 15
35155: DOUBLE
35156: EQUAL
35157: IFTRUE 35179
35159: LD_INT 11
35161: DOUBLE
35162: EQUAL
35163: IFTRUE 35179
35165: LD_INT 14
35167: DOUBLE
35168: EQUAL
35169: IFTRUE 35179
35171: LD_INT 10
35173: DOUBLE
35174: EQUAL
35175: IFTRUE 35179
35177: GO 35235
35179: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35180: LD_ADDR_VAR 0 9
35184: PUSH
35185: LD_VAR 0 41
35189: PUSH
35190: LD_VAR 0 42
35194: PUSH
35195: LD_VAR 0 43
35199: PUSH
35200: LD_VAR 0 44
35204: PUSH
35205: LD_VAR 0 45
35209: PUSH
35210: LD_VAR 0 46
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: PUSH
35223: LD_VAR 0 4
35227: PUSH
35228: LD_INT 1
35230: PLUS
35231: ARRAY
35232: ST_TO_ADDR
35233: GO 35488
35235: LD_INT 36
35237: DOUBLE
35238: EQUAL
35239: IFTRUE 35243
35241: GO 35299
35243: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35244: LD_ADDR_VAR 0 9
35248: PUSH
35249: LD_VAR 0 47
35253: PUSH
35254: LD_VAR 0 48
35258: PUSH
35259: LD_VAR 0 49
35263: PUSH
35264: LD_VAR 0 50
35268: PUSH
35269: LD_VAR 0 51
35273: PUSH
35274: LD_VAR 0 52
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: PUSH
35287: LD_VAR 0 4
35291: PUSH
35292: LD_INT 1
35294: PLUS
35295: ARRAY
35296: ST_TO_ADDR
35297: GO 35488
35299: LD_INT 4
35301: DOUBLE
35302: EQUAL
35303: IFTRUE 35325
35305: LD_INT 5
35307: DOUBLE
35308: EQUAL
35309: IFTRUE 35325
35311: LD_INT 34
35313: DOUBLE
35314: EQUAL
35315: IFTRUE 35325
35317: LD_INT 37
35319: DOUBLE
35320: EQUAL
35321: IFTRUE 35325
35323: GO 35381
35325: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35326: LD_ADDR_VAR 0 9
35330: PUSH
35331: LD_VAR 0 53
35335: PUSH
35336: LD_VAR 0 54
35340: PUSH
35341: LD_VAR 0 55
35345: PUSH
35346: LD_VAR 0 56
35350: PUSH
35351: LD_VAR 0 57
35355: PUSH
35356: LD_VAR 0 58
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: PUSH
35369: LD_VAR 0 4
35373: PUSH
35374: LD_INT 1
35376: PLUS
35377: ARRAY
35378: ST_TO_ADDR
35379: GO 35488
35381: LD_INT 31
35383: DOUBLE
35384: EQUAL
35385: IFTRUE 35431
35387: LD_INT 32
35389: DOUBLE
35390: EQUAL
35391: IFTRUE 35431
35393: LD_INT 33
35395: DOUBLE
35396: EQUAL
35397: IFTRUE 35431
35399: LD_INT 27
35401: DOUBLE
35402: EQUAL
35403: IFTRUE 35431
35405: LD_INT 26
35407: DOUBLE
35408: EQUAL
35409: IFTRUE 35431
35411: LD_INT 28
35413: DOUBLE
35414: EQUAL
35415: IFTRUE 35431
35417: LD_INT 29
35419: DOUBLE
35420: EQUAL
35421: IFTRUE 35431
35423: LD_INT 30
35425: DOUBLE
35426: EQUAL
35427: IFTRUE 35431
35429: GO 35487
35431: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35432: LD_ADDR_VAR 0 9
35436: PUSH
35437: LD_VAR 0 59
35441: PUSH
35442: LD_VAR 0 60
35446: PUSH
35447: LD_VAR 0 61
35451: PUSH
35452: LD_VAR 0 62
35456: PUSH
35457: LD_VAR 0 63
35461: PUSH
35462: LD_VAR 0 64
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: PUSH
35475: LD_VAR 0 4
35479: PUSH
35480: LD_INT 1
35482: PLUS
35483: ARRAY
35484: ST_TO_ADDR
35485: GO 35488
35487: POP
// temp_list2 = [ ] ;
35488: LD_ADDR_VAR 0 10
35492: PUSH
35493: EMPTY
35494: ST_TO_ADDR
// for i in temp_list do
35495: LD_ADDR_VAR 0 8
35499: PUSH
35500: LD_VAR 0 9
35504: PUSH
35505: FOR_IN
35506: IFFALSE 35558
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35508: LD_ADDR_VAR 0 10
35512: PUSH
35513: LD_VAR 0 10
35517: PUSH
35518: LD_VAR 0 8
35522: PUSH
35523: LD_INT 1
35525: ARRAY
35526: PUSH
35527: LD_VAR 0 2
35531: PLUS
35532: PUSH
35533: LD_VAR 0 8
35537: PUSH
35538: LD_INT 2
35540: ARRAY
35541: PUSH
35542: LD_VAR 0 3
35546: PLUS
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: EMPTY
35553: LIST
35554: ADD
35555: ST_TO_ADDR
35556: GO 35505
35558: POP
35559: POP
// result = temp_list2 ;
35560: LD_ADDR_VAR 0 7
35564: PUSH
35565: LD_VAR 0 10
35569: ST_TO_ADDR
// end ;
35570: LD_VAR 0 7
35574: RET
// export function EnemyInRange ( unit , dist ) ; begin
35575: LD_INT 0
35577: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35578: LD_ADDR_VAR 0 3
35582: PUSH
35583: LD_VAR 0 1
35587: PPUSH
35588: CALL_OW 255
35592: PPUSH
35593: LD_VAR 0 1
35597: PPUSH
35598: CALL_OW 250
35602: PPUSH
35603: LD_VAR 0 1
35607: PPUSH
35608: CALL_OW 251
35612: PPUSH
35613: LD_VAR 0 2
35617: PPUSH
35618: CALL 8971 0 4
35622: PUSH
35623: LD_INT 4
35625: ARRAY
35626: ST_TO_ADDR
// end ;
35627: LD_VAR 0 3
35631: RET
// export function PlayerSeeMe ( unit ) ; begin
35632: LD_INT 0
35634: PPUSH
// result := See ( your_side , unit ) ;
35635: LD_ADDR_VAR 0 2
35639: PUSH
35640: LD_OWVAR 2
35644: PPUSH
35645: LD_VAR 0 1
35649: PPUSH
35650: CALL_OW 292
35654: ST_TO_ADDR
// end ;
35655: LD_VAR 0 2
35659: RET
// export function ReverseDir ( unit ) ; begin
35660: LD_INT 0
35662: PPUSH
// if not unit then
35663: LD_VAR 0 1
35667: NOT
35668: IFFALSE 35672
// exit ;
35670: GO 35695
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35672: LD_ADDR_VAR 0 2
35676: PUSH
35677: LD_VAR 0 1
35681: PPUSH
35682: CALL_OW 254
35686: PUSH
35687: LD_INT 3
35689: PLUS
35690: PUSH
35691: LD_INT 6
35693: MOD
35694: ST_TO_ADDR
// end ;
35695: LD_VAR 0 2
35699: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
35700: LD_INT 0
35702: PPUSH
35703: PPUSH
35704: PPUSH
35705: PPUSH
35706: PPUSH
// if not hexes then
35707: LD_VAR 0 2
35711: NOT
35712: IFFALSE 35716
// exit ;
35714: GO 35864
// dist := 9999 ;
35716: LD_ADDR_VAR 0 5
35720: PUSH
35721: LD_INT 9999
35723: ST_TO_ADDR
// for i = 1 to hexes do
35724: LD_ADDR_VAR 0 4
35728: PUSH
35729: DOUBLE
35730: LD_INT 1
35732: DEC
35733: ST_TO_ADDR
35734: LD_VAR 0 2
35738: PUSH
35739: FOR_TO
35740: IFFALSE 35852
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
35742: LD_VAR 0 1
35746: PPUSH
35747: LD_VAR 0 2
35751: PUSH
35752: LD_VAR 0 4
35756: ARRAY
35757: PUSH
35758: LD_INT 1
35760: ARRAY
35761: PPUSH
35762: LD_VAR 0 2
35766: PUSH
35767: LD_VAR 0 4
35771: ARRAY
35772: PUSH
35773: LD_INT 2
35775: ARRAY
35776: PPUSH
35777: CALL_OW 297
35781: PUSH
35782: LD_VAR 0 5
35786: LESS
35787: IFFALSE 35850
// begin hex := hexes [ i ] ;
35789: LD_ADDR_VAR 0 7
35793: PUSH
35794: LD_VAR 0 2
35798: PUSH
35799: LD_VAR 0 4
35803: ARRAY
35804: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35805: LD_ADDR_VAR 0 5
35809: PUSH
35810: LD_VAR 0 1
35814: PPUSH
35815: LD_VAR 0 2
35819: PUSH
35820: LD_VAR 0 4
35824: ARRAY
35825: PUSH
35826: LD_INT 1
35828: ARRAY
35829: PPUSH
35830: LD_VAR 0 2
35834: PUSH
35835: LD_VAR 0 4
35839: ARRAY
35840: PUSH
35841: LD_INT 2
35843: ARRAY
35844: PPUSH
35845: CALL_OW 297
35849: ST_TO_ADDR
// end ; end ;
35850: GO 35739
35852: POP
35853: POP
// result := hex ;
35854: LD_ADDR_VAR 0 3
35858: PUSH
35859: LD_VAR 0 7
35863: ST_TO_ADDR
// end ;
35864: LD_VAR 0 3
35868: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35869: LD_INT 0
35871: PPUSH
35872: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35873: LD_VAR 0 1
35877: NOT
35878: PUSH
35879: LD_VAR 0 1
35883: PUSH
35884: LD_INT 21
35886: PUSH
35887: LD_INT 2
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 23
35896: PUSH
35897: LD_INT 2
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PPUSH
35908: CALL_OW 69
35912: IN
35913: NOT
35914: OR
35915: IFFALSE 35919
// exit ;
35917: GO 35966
// for i = 1 to 3 do
35919: LD_ADDR_VAR 0 3
35923: PUSH
35924: DOUBLE
35925: LD_INT 1
35927: DEC
35928: ST_TO_ADDR
35929: LD_INT 3
35931: PUSH
35932: FOR_TO
35933: IFFALSE 35964
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35935: LD_VAR 0 1
35939: PPUSH
35940: CALL_OW 250
35944: PPUSH
35945: LD_VAR 0 1
35949: PPUSH
35950: CALL_OW 251
35954: PPUSH
35955: LD_INT 1
35957: PPUSH
35958: CALL_OW 453
35962: GO 35932
35964: POP
35965: POP
// end ;
35966: LD_VAR 0 2
35970: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35971: LD_INT 0
35973: PPUSH
35974: PPUSH
35975: PPUSH
35976: PPUSH
35977: PPUSH
35978: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
35979: LD_VAR 0 1
35983: NOT
35984: PUSH
35985: LD_VAR 0 2
35989: NOT
35990: OR
35991: PUSH
35992: LD_VAR 0 1
35996: PPUSH
35997: CALL_OW 314
36001: OR
36002: IFFALSE 36006
// exit ;
36004: GO 36447
// x := GetX ( enemy_unit ) ;
36006: LD_ADDR_VAR 0 7
36010: PUSH
36011: LD_VAR 0 2
36015: PPUSH
36016: CALL_OW 250
36020: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36021: LD_ADDR_VAR 0 8
36025: PUSH
36026: LD_VAR 0 2
36030: PPUSH
36031: CALL_OW 251
36035: ST_TO_ADDR
// if not x or not y then
36036: LD_VAR 0 7
36040: NOT
36041: PUSH
36042: LD_VAR 0 8
36046: NOT
36047: OR
36048: IFFALSE 36052
// exit ;
36050: GO 36447
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36052: LD_ADDR_VAR 0 6
36056: PUSH
36057: LD_VAR 0 7
36061: PPUSH
36062: LD_INT 0
36064: PPUSH
36065: LD_INT 4
36067: PPUSH
36068: CALL_OW 272
36072: PUSH
36073: LD_VAR 0 8
36077: PPUSH
36078: LD_INT 0
36080: PPUSH
36081: LD_INT 4
36083: PPUSH
36084: CALL_OW 273
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_VAR 0 7
36097: PPUSH
36098: LD_INT 1
36100: PPUSH
36101: LD_INT 4
36103: PPUSH
36104: CALL_OW 272
36108: PUSH
36109: LD_VAR 0 8
36113: PPUSH
36114: LD_INT 1
36116: PPUSH
36117: LD_INT 4
36119: PPUSH
36120: CALL_OW 273
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_VAR 0 7
36133: PPUSH
36134: LD_INT 2
36136: PPUSH
36137: LD_INT 4
36139: PPUSH
36140: CALL_OW 272
36144: PUSH
36145: LD_VAR 0 8
36149: PPUSH
36150: LD_INT 2
36152: PPUSH
36153: LD_INT 4
36155: PPUSH
36156: CALL_OW 273
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_VAR 0 7
36169: PPUSH
36170: LD_INT 3
36172: PPUSH
36173: LD_INT 4
36175: PPUSH
36176: CALL_OW 272
36180: PUSH
36181: LD_VAR 0 8
36185: PPUSH
36186: LD_INT 3
36188: PPUSH
36189: LD_INT 4
36191: PPUSH
36192: CALL_OW 273
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_VAR 0 7
36205: PPUSH
36206: LD_INT 4
36208: PPUSH
36209: LD_INT 4
36211: PPUSH
36212: CALL_OW 272
36216: PUSH
36217: LD_VAR 0 8
36221: PPUSH
36222: LD_INT 4
36224: PPUSH
36225: LD_INT 4
36227: PPUSH
36228: CALL_OW 273
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_VAR 0 7
36241: PPUSH
36242: LD_INT 5
36244: PPUSH
36245: LD_INT 4
36247: PPUSH
36248: CALL_OW 272
36252: PUSH
36253: LD_VAR 0 8
36257: PPUSH
36258: LD_INT 5
36260: PPUSH
36261: LD_INT 4
36263: PPUSH
36264: CALL_OW 273
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: ST_TO_ADDR
// for i = tmp downto 1 do
36281: LD_ADDR_VAR 0 4
36285: PUSH
36286: DOUBLE
36287: LD_VAR 0 6
36291: INC
36292: ST_TO_ADDR
36293: LD_INT 1
36295: PUSH
36296: FOR_DOWNTO
36297: IFFALSE 36398
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36299: LD_VAR 0 6
36303: PUSH
36304: LD_VAR 0 4
36308: ARRAY
36309: PUSH
36310: LD_INT 1
36312: ARRAY
36313: PPUSH
36314: LD_VAR 0 6
36318: PUSH
36319: LD_VAR 0 4
36323: ARRAY
36324: PUSH
36325: LD_INT 2
36327: ARRAY
36328: PPUSH
36329: CALL_OW 488
36333: NOT
36334: PUSH
36335: LD_VAR 0 6
36339: PUSH
36340: LD_VAR 0 4
36344: ARRAY
36345: PUSH
36346: LD_INT 1
36348: ARRAY
36349: PPUSH
36350: LD_VAR 0 6
36354: PUSH
36355: LD_VAR 0 4
36359: ARRAY
36360: PUSH
36361: LD_INT 2
36363: ARRAY
36364: PPUSH
36365: CALL_OW 428
36369: PUSH
36370: LD_INT 0
36372: NONEQUAL
36373: OR
36374: IFFALSE 36396
// tmp := Delete ( tmp , i ) ;
36376: LD_ADDR_VAR 0 6
36380: PUSH
36381: LD_VAR 0 6
36385: PPUSH
36386: LD_VAR 0 4
36390: PPUSH
36391: CALL_OW 3
36395: ST_TO_ADDR
36396: GO 36296
36398: POP
36399: POP
// j := GetClosestHex ( unit , tmp ) ;
36400: LD_ADDR_VAR 0 5
36404: PUSH
36405: LD_VAR 0 1
36409: PPUSH
36410: LD_VAR 0 6
36414: PPUSH
36415: CALL 35700 0 2
36419: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36420: LD_VAR 0 1
36424: PPUSH
36425: LD_VAR 0 5
36429: PUSH
36430: LD_INT 1
36432: ARRAY
36433: PPUSH
36434: LD_VAR 0 5
36438: PUSH
36439: LD_INT 2
36441: ARRAY
36442: PPUSH
36443: CALL_OW 111
// end ;
36447: LD_VAR 0 3
36451: RET
// export function PrepareApemanSoldier ( ) ; begin
36452: LD_INT 0
36454: PPUSH
// uc_nation := 0 ;
36455: LD_ADDR_OWVAR 21
36459: PUSH
36460: LD_INT 0
36462: ST_TO_ADDR
// hc_sex := sex_male ;
36463: LD_ADDR_OWVAR 27
36467: PUSH
36468: LD_INT 1
36470: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36471: LD_ADDR_OWVAR 28
36475: PUSH
36476: LD_INT 15
36478: ST_TO_ADDR
// hc_gallery :=  ;
36479: LD_ADDR_OWVAR 33
36483: PUSH
36484: LD_STRING 
36486: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36487: LD_ADDR_OWVAR 31
36491: PUSH
36492: LD_INT 0
36494: PPUSH
36495: LD_INT 3
36497: PPUSH
36498: CALL_OW 12
36502: PUSH
36503: LD_INT 0
36505: PPUSH
36506: LD_INT 3
36508: PPUSH
36509: CALL_OW 12
36513: PUSH
36514: LD_INT 0
36516: PUSH
36517: LD_INT 0
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: ST_TO_ADDR
// end ;
36526: LD_VAR 0 1
36530: RET
// export function PrepareApemanEngineer ( ) ; begin
36531: LD_INT 0
36533: PPUSH
// uc_nation := 0 ;
36534: LD_ADDR_OWVAR 21
36538: PUSH
36539: LD_INT 0
36541: ST_TO_ADDR
// hc_sex := sex_male ;
36542: LD_ADDR_OWVAR 27
36546: PUSH
36547: LD_INT 1
36549: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36550: LD_ADDR_OWVAR 28
36554: PUSH
36555: LD_INT 16
36557: ST_TO_ADDR
// hc_gallery :=  ;
36558: LD_ADDR_OWVAR 33
36562: PUSH
36563: LD_STRING 
36565: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36566: LD_ADDR_OWVAR 31
36570: PUSH
36571: LD_INT 0
36573: PPUSH
36574: LD_INT 3
36576: PPUSH
36577: CALL_OW 12
36581: PUSH
36582: LD_INT 0
36584: PPUSH
36585: LD_INT 3
36587: PPUSH
36588: CALL_OW 12
36592: PUSH
36593: LD_INT 0
36595: PUSH
36596: LD_INT 0
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: ST_TO_ADDR
// end ;
36605: LD_VAR 0 1
36609: RET
// export function PrepareApeman ( agressivity ) ; begin
36610: LD_INT 0
36612: PPUSH
// uc_side := 0 ;
36613: LD_ADDR_OWVAR 20
36617: PUSH
36618: LD_INT 0
36620: ST_TO_ADDR
// uc_nation := 0 ;
36621: LD_ADDR_OWVAR 21
36625: PUSH
36626: LD_INT 0
36628: ST_TO_ADDR
// hc_sex := sex_male ;
36629: LD_ADDR_OWVAR 27
36633: PUSH
36634: LD_INT 1
36636: ST_TO_ADDR
// hc_class := class_apeman ;
36637: LD_ADDR_OWVAR 28
36641: PUSH
36642: LD_INT 12
36644: ST_TO_ADDR
// hc_gallery :=  ;
36645: LD_ADDR_OWVAR 33
36649: PUSH
36650: LD_STRING 
36652: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36653: LD_ADDR_OWVAR 35
36657: PUSH
36658: LD_VAR 0 1
36662: NEG
36663: PPUSH
36664: LD_VAR 0 1
36668: PPUSH
36669: CALL_OW 12
36673: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36674: LD_ADDR_OWVAR 31
36678: PUSH
36679: LD_INT 0
36681: PPUSH
36682: LD_INT 3
36684: PPUSH
36685: CALL_OW 12
36689: PUSH
36690: LD_INT 0
36692: PPUSH
36693: LD_INT 3
36695: PPUSH
36696: CALL_OW 12
36700: PUSH
36701: LD_INT 0
36703: PUSH
36704: LD_INT 0
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: ST_TO_ADDR
// end ;
36713: LD_VAR 0 2
36717: RET
// export function PrepareTiger ( agressivity ) ; begin
36718: LD_INT 0
36720: PPUSH
// uc_side := 0 ;
36721: LD_ADDR_OWVAR 20
36725: PUSH
36726: LD_INT 0
36728: ST_TO_ADDR
// uc_nation := 0 ;
36729: LD_ADDR_OWVAR 21
36733: PUSH
36734: LD_INT 0
36736: ST_TO_ADDR
// hc_class := class_tiger ;
36737: LD_ADDR_OWVAR 28
36741: PUSH
36742: LD_INT 14
36744: ST_TO_ADDR
// hc_gallery :=  ;
36745: LD_ADDR_OWVAR 33
36749: PUSH
36750: LD_STRING 
36752: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36753: LD_ADDR_OWVAR 35
36757: PUSH
36758: LD_VAR 0 1
36762: NEG
36763: PPUSH
36764: LD_VAR 0 1
36768: PPUSH
36769: CALL_OW 12
36773: ST_TO_ADDR
// end ;
36774: LD_VAR 0 2
36778: RET
// export function PrepareEnchidna ( ) ; begin
36779: LD_INT 0
36781: PPUSH
// uc_side := 0 ;
36782: LD_ADDR_OWVAR 20
36786: PUSH
36787: LD_INT 0
36789: ST_TO_ADDR
// uc_nation := 0 ;
36790: LD_ADDR_OWVAR 21
36794: PUSH
36795: LD_INT 0
36797: ST_TO_ADDR
// hc_class := class_baggie ;
36798: LD_ADDR_OWVAR 28
36802: PUSH
36803: LD_INT 13
36805: ST_TO_ADDR
// hc_gallery :=  ;
36806: LD_ADDR_OWVAR 33
36810: PUSH
36811: LD_STRING 
36813: ST_TO_ADDR
// end ;
36814: LD_VAR 0 1
36818: RET
// export function PrepareFrog ( ) ; begin
36819: LD_INT 0
36821: PPUSH
// uc_side := 0 ;
36822: LD_ADDR_OWVAR 20
36826: PUSH
36827: LD_INT 0
36829: ST_TO_ADDR
// uc_nation := 0 ;
36830: LD_ADDR_OWVAR 21
36834: PUSH
36835: LD_INT 0
36837: ST_TO_ADDR
// hc_class := class_frog ;
36838: LD_ADDR_OWVAR 28
36842: PUSH
36843: LD_INT 19
36845: ST_TO_ADDR
// hc_gallery :=  ;
36846: LD_ADDR_OWVAR 33
36850: PUSH
36851: LD_STRING 
36853: ST_TO_ADDR
// end ;
36854: LD_VAR 0 1
36858: RET
// export function PrepareFish ( ) ; begin
36859: LD_INT 0
36861: PPUSH
// uc_side := 0 ;
36862: LD_ADDR_OWVAR 20
36866: PUSH
36867: LD_INT 0
36869: ST_TO_ADDR
// uc_nation := 0 ;
36870: LD_ADDR_OWVAR 21
36874: PUSH
36875: LD_INT 0
36877: ST_TO_ADDR
// hc_class := class_fish ;
36878: LD_ADDR_OWVAR 28
36882: PUSH
36883: LD_INT 20
36885: ST_TO_ADDR
// hc_gallery :=  ;
36886: LD_ADDR_OWVAR 33
36890: PUSH
36891: LD_STRING 
36893: ST_TO_ADDR
// end ;
36894: LD_VAR 0 1
36898: RET
// export function PrepareBird ( ) ; begin
36899: LD_INT 0
36901: PPUSH
// uc_side := 0 ;
36902: LD_ADDR_OWVAR 20
36906: PUSH
36907: LD_INT 0
36909: ST_TO_ADDR
// uc_nation := 0 ;
36910: LD_ADDR_OWVAR 21
36914: PUSH
36915: LD_INT 0
36917: ST_TO_ADDR
// hc_class := class_phororhacos ;
36918: LD_ADDR_OWVAR 28
36922: PUSH
36923: LD_INT 18
36925: ST_TO_ADDR
// hc_gallery :=  ;
36926: LD_ADDR_OWVAR 33
36930: PUSH
36931: LD_STRING 
36933: ST_TO_ADDR
// end ;
36934: LD_VAR 0 1
36938: RET
// export function PrepareHorse ( ) ; begin
36939: LD_INT 0
36941: PPUSH
// uc_side := 0 ;
36942: LD_ADDR_OWVAR 20
36946: PUSH
36947: LD_INT 0
36949: ST_TO_ADDR
// uc_nation := 0 ;
36950: LD_ADDR_OWVAR 21
36954: PUSH
36955: LD_INT 0
36957: ST_TO_ADDR
// hc_class := class_horse ;
36958: LD_ADDR_OWVAR 28
36962: PUSH
36963: LD_INT 21
36965: ST_TO_ADDR
// hc_gallery :=  ;
36966: LD_ADDR_OWVAR 33
36970: PUSH
36971: LD_STRING 
36973: ST_TO_ADDR
// end ;
36974: LD_VAR 0 1
36978: RET
// export function PrepareMastodont ( ) ; begin
36979: LD_INT 0
36981: PPUSH
// uc_side := 0 ;
36982: LD_ADDR_OWVAR 20
36986: PUSH
36987: LD_INT 0
36989: ST_TO_ADDR
// uc_nation := 0 ;
36990: LD_ADDR_OWVAR 21
36994: PUSH
36995: LD_INT 0
36997: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36998: LD_ADDR_OWVAR 37
37002: PUSH
37003: LD_INT 31
37005: ST_TO_ADDR
// vc_control := control_rider ;
37006: LD_ADDR_OWVAR 38
37010: PUSH
37011: LD_INT 4
37013: ST_TO_ADDR
// end ;
37014: LD_VAR 0 1
37018: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37019: LD_INT 0
37021: PPUSH
37022: PPUSH
37023: PPUSH
// uc_side = 0 ;
37024: LD_ADDR_OWVAR 20
37028: PUSH
37029: LD_INT 0
37031: ST_TO_ADDR
// uc_nation = 0 ;
37032: LD_ADDR_OWVAR 21
37036: PUSH
37037: LD_INT 0
37039: ST_TO_ADDR
// InitHc_All ( ) ;
37040: CALL_OW 584
// InitVc ;
37044: CALL_OW 20
// if mastodonts then
37048: LD_VAR 0 6
37052: IFFALSE 37119
// for i = 1 to mastodonts do
37054: LD_ADDR_VAR 0 11
37058: PUSH
37059: DOUBLE
37060: LD_INT 1
37062: DEC
37063: ST_TO_ADDR
37064: LD_VAR 0 6
37068: PUSH
37069: FOR_TO
37070: IFFALSE 37117
// begin vc_chassis := 31 ;
37072: LD_ADDR_OWVAR 37
37076: PUSH
37077: LD_INT 31
37079: ST_TO_ADDR
// vc_control := control_rider ;
37080: LD_ADDR_OWVAR 38
37084: PUSH
37085: LD_INT 4
37087: ST_TO_ADDR
// animal := CreateVehicle ;
37088: LD_ADDR_VAR 0 12
37092: PUSH
37093: CALL_OW 45
37097: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37098: LD_VAR 0 12
37102: PPUSH
37103: LD_VAR 0 8
37107: PPUSH
37108: LD_INT 0
37110: PPUSH
37111: CALL 39254 0 3
// end ;
37115: GO 37069
37117: POP
37118: POP
// if horses then
37119: LD_VAR 0 5
37123: IFFALSE 37190
// for i = 1 to horses do
37125: LD_ADDR_VAR 0 11
37129: PUSH
37130: DOUBLE
37131: LD_INT 1
37133: DEC
37134: ST_TO_ADDR
37135: LD_VAR 0 5
37139: PUSH
37140: FOR_TO
37141: IFFALSE 37188
// begin hc_class := 21 ;
37143: LD_ADDR_OWVAR 28
37147: PUSH
37148: LD_INT 21
37150: ST_TO_ADDR
// hc_gallery :=  ;
37151: LD_ADDR_OWVAR 33
37155: PUSH
37156: LD_STRING 
37158: ST_TO_ADDR
// animal := CreateHuman ;
37159: LD_ADDR_VAR 0 12
37163: PUSH
37164: CALL_OW 44
37168: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37169: LD_VAR 0 12
37173: PPUSH
37174: LD_VAR 0 8
37178: PPUSH
37179: LD_INT 0
37181: PPUSH
37182: CALL 39254 0 3
// end ;
37186: GO 37140
37188: POP
37189: POP
// if birds then
37190: LD_VAR 0 1
37194: IFFALSE 37261
// for i = 1 to birds do
37196: LD_ADDR_VAR 0 11
37200: PUSH
37201: DOUBLE
37202: LD_INT 1
37204: DEC
37205: ST_TO_ADDR
37206: LD_VAR 0 1
37210: PUSH
37211: FOR_TO
37212: IFFALSE 37259
// begin hc_class = 18 ;
37214: LD_ADDR_OWVAR 28
37218: PUSH
37219: LD_INT 18
37221: ST_TO_ADDR
// hc_gallery =  ;
37222: LD_ADDR_OWVAR 33
37226: PUSH
37227: LD_STRING 
37229: ST_TO_ADDR
// animal := CreateHuman ;
37230: LD_ADDR_VAR 0 12
37234: PUSH
37235: CALL_OW 44
37239: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37240: LD_VAR 0 12
37244: PPUSH
37245: LD_VAR 0 8
37249: PPUSH
37250: LD_INT 0
37252: PPUSH
37253: CALL 39254 0 3
// end ;
37257: GO 37211
37259: POP
37260: POP
// if tigers then
37261: LD_VAR 0 2
37265: IFFALSE 37349
// for i = 1 to tigers do
37267: LD_ADDR_VAR 0 11
37271: PUSH
37272: DOUBLE
37273: LD_INT 1
37275: DEC
37276: ST_TO_ADDR
37277: LD_VAR 0 2
37281: PUSH
37282: FOR_TO
37283: IFFALSE 37347
// begin hc_class = class_tiger ;
37285: LD_ADDR_OWVAR 28
37289: PUSH
37290: LD_INT 14
37292: ST_TO_ADDR
// hc_gallery =  ;
37293: LD_ADDR_OWVAR 33
37297: PUSH
37298: LD_STRING 
37300: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37301: LD_ADDR_OWVAR 35
37305: PUSH
37306: LD_INT 7
37308: NEG
37309: PPUSH
37310: LD_INT 7
37312: PPUSH
37313: CALL_OW 12
37317: ST_TO_ADDR
// animal := CreateHuman ;
37318: LD_ADDR_VAR 0 12
37322: PUSH
37323: CALL_OW 44
37327: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37328: LD_VAR 0 12
37332: PPUSH
37333: LD_VAR 0 8
37337: PPUSH
37338: LD_INT 0
37340: PPUSH
37341: CALL 39254 0 3
// end ;
37345: GO 37282
37347: POP
37348: POP
// if apemans then
37349: LD_VAR 0 3
37353: IFFALSE 37476
// for i = 1 to apemans do
37355: LD_ADDR_VAR 0 11
37359: PUSH
37360: DOUBLE
37361: LD_INT 1
37363: DEC
37364: ST_TO_ADDR
37365: LD_VAR 0 3
37369: PUSH
37370: FOR_TO
37371: IFFALSE 37474
// begin hc_class = class_apeman ;
37373: LD_ADDR_OWVAR 28
37377: PUSH
37378: LD_INT 12
37380: ST_TO_ADDR
// hc_gallery =  ;
37381: LD_ADDR_OWVAR 33
37385: PUSH
37386: LD_STRING 
37388: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37389: LD_ADDR_OWVAR 35
37393: PUSH
37394: LD_INT 2
37396: NEG
37397: PPUSH
37398: LD_INT 2
37400: PPUSH
37401: CALL_OW 12
37405: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37406: LD_ADDR_OWVAR 31
37410: PUSH
37411: LD_INT 1
37413: PPUSH
37414: LD_INT 3
37416: PPUSH
37417: CALL_OW 12
37421: PUSH
37422: LD_INT 1
37424: PPUSH
37425: LD_INT 3
37427: PPUSH
37428: CALL_OW 12
37432: PUSH
37433: LD_INT 0
37435: PUSH
37436: LD_INT 0
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: ST_TO_ADDR
// animal := CreateHuman ;
37445: LD_ADDR_VAR 0 12
37449: PUSH
37450: CALL_OW 44
37454: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37455: LD_VAR 0 12
37459: PPUSH
37460: LD_VAR 0 8
37464: PPUSH
37465: LD_INT 0
37467: PPUSH
37468: CALL 39254 0 3
// end ;
37472: GO 37370
37474: POP
37475: POP
// if enchidnas then
37476: LD_VAR 0 4
37480: IFFALSE 37547
// for i = 1 to enchidnas do
37482: LD_ADDR_VAR 0 11
37486: PUSH
37487: DOUBLE
37488: LD_INT 1
37490: DEC
37491: ST_TO_ADDR
37492: LD_VAR 0 4
37496: PUSH
37497: FOR_TO
37498: IFFALSE 37545
// begin hc_class = 13 ;
37500: LD_ADDR_OWVAR 28
37504: PUSH
37505: LD_INT 13
37507: ST_TO_ADDR
// hc_gallery =  ;
37508: LD_ADDR_OWVAR 33
37512: PUSH
37513: LD_STRING 
37515: ST_TO_ADDR
// animal := CreateHuman ;
37516: LD_ADDR_VAR 0 12
37520: PUSH
37521: CALL_OW 44
37525: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37526: LD_VAR 0 12
37530: PPUSH
37531: LD_VAR 0 8
37535: PPUSH
37536: LD_INT 0
37538: PPUSH
37539: CALL 39254 0 3
// end ;
37543: GO 37497
37545: POP
37546: POP
// if fishes then
37547: LD_VAR 0 7
37551: IFFALSE 37618
// for i = 1 to fishes do
37553: LD_ADDR_VAR 0 11
37557: PUSH
37558: DOUBLE
37559: LD_INT 1
37561: DEC
37562: ST_TO_ADDR
37563: LD_VAR 0 7
37567: PUSH
37568: FOR_TO
37569: IFFALSE 37616
// begin hc_class = 20 ;
37571: LD_ADDR_OWVAR 28
37575: PUSH
37576: LD_INT 20
37578: ST_TO_ADDR
// hc_gallery =  ;
37579: LD_ADDR_OWVAR 33
37583: PUSH
37584: LD_STRING 
37586: ST_TO_ADDR
// animal := CreateHuman ;
37587: LD_ADDR_VAR 0 12
37591: PUSH
37592: CALL_OW 44
37596: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37597: LD_VAR 0 12
37601: PPUSH
37602: LD_VAR 0 9
37606: PPUSH
37607: LD_INT 0
37609: PPUSH
37610: CALL 39254 0 3
// end ;
37614: GO 37568
37616: POP
37617: POP
// end ;
37618: LD_VAR 0 10
37622: RET
// export function WantHeal ( sci , unit ) ; begin
37623: LD_INT 0
37625: PPUSH
// if GetTaskList ( sci ) > 0 then
37626: LD_VAR 0 1
37630: PPUSH
37631: CALL_OW 437
37635: PUSH
37636: LD_INT 0
37638: GREATER
37639: IFFALSE 37709
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37641: LD_VAR 0 1
37645: PPUSH
37646: CALL_OW 437
37650: PUSH
37651: LD_INT 1
37653: ARRAY
37654: PUSH
37655: LD_INT 1
37657: ARRAY
37658: PUSH
37659: LD_STRING l
37661: EQUAL
37662: PUSH
37663: LD_VAR 0 1
37667: PPUSH
37668: CALL_OW 437
37672: PUSH
37673: LD_INT 1
37675: ARRAY
37676: PUSH
37677: LD_INT 4
37679: ARRAY
37680: PUSH
37681: LD_VAR 0 2
37685: EQUAL
37686: AND
37687: IFFALSE 37699
// result := true else
37689: LD_ADDR_VAR 0 3
37693: PUSH
37694: LD_INT 1
37696: ST_TO_ADDR
37697: GO 37707
// result := false ;
37699: LD_ADDR_VAR 0 3
37703: PUSH
37704: LD_INT 0
37706: ST_TO_ADDR
// end else
37707: GO 37717
// result := false ;
37709: LD_ADDR_VAR 0 3
37713: PUSH
37714: LD_INT 0
37716: ST_TO_ADDR
// end ;
37717: LD_VAR 0 3
37721: RET
// export function HealTarget ( sci ) ; begin
37722: LD_INT 0
37724: PPUSH
// if not sci then
37725: LD_VAR 0 1
37729: NOT
37730: IFFALSE 37734
// exit ;
37732: GO 37799
// result := 0 ;
37734: LD_ADDR_VAR 0 2
37738: PUSH
37739: LD_INT 0
37741: ST_TO_ADDR
// if GetTaskList ( sci ) then
37742: LD_VAR 0 1
37746: PPUSH
37747: CALL_OW 437
37751: IFFALSE 37799
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37753: LD_VAR 0 1
37757: PPUSH
37758: CALL_OW 437
37762: PUSH
37763: LD_INT 1
37765: ARRAY
37766: PUSH
37767: LD_INT 1
37769: ARRAY
37770: PUSH
37771: LD_STRING l
37773: EQUAL
37774: IFFALSE 37799
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37776: LD_ADDR_VAR 0 2
37780: PUSH
37781: LD_VAR 0 1
37785: PPUSH
37786: CALL_OW 437
37790: PUSH
37791: LD_INT 1
37793: ARRAY
37794: PUSH
37795: LD_INT 4
37797: ARRAY
37798: ST_TO_ADDR
// end ;
37799: LD_VAR 0 2
37803: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37804: LD_INT 0
37806: PPUSH
37807: PPUSH
37808: PPUSH
37809: PPUSH
// if not base_units then
37810: LD_VAR 0 1
37814: NOT
37815: IFFALSE 37819
// exit ;
37817: GO 37906
// result := false ;
37819: LD_ADDR_VAR 0 2
37823: PUSH
37824: LD_INT 0
37826: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37827: LD_ADDR_VAR 0 5
37831: PUSH
37832: LD_VAR 0 1
37836: PPUSH
37837: LD_INT 21
37839: PUSH
37840: LD_INT 3
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PPUSH
37847: CALL_OW 72
37851: ST_TO_ADDR
// if not tmp then
37852: LD_VAR 0 5
37856: NOT
37857: IFFALSE 37861
// exit ;
37859: GO 37906
// for i in tmp do
37861: LD_ADDR_VAR 0 3
37865: PUSH
37866: LD_VAR 0 5
37870: PUSH
37871: FOR_IN
37872: IFFALSE 37904
// begin result := EnemyInRange ( i , 22 ) ;
37874: LD_ADDR_VAR 0 2
37878: PUSH
37879: LD_VAR 0 3
37883: PPUSH
37884: LD_INT 22
37886: PPUSH
37887: CALL 35575 0 2
37891: ST_TO_ADDR
// if result then
37892: LD_VAR 0 2
37896: IFFALSE 37902
// exit ;
37898: POP
37899: POP
37900: GO 37906
// end ;
37902: GO 37871
37904: POP
37905: POP
// end ;
37906: LD_VAR 0 2
37910: RET
// export function FilterByTag ( units , tag ) ; begin
37911: LD_INT 0
37913: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
37914: LD_ADDR_VAR 0 3
37918: PUSH
37919: LD_VAR 0 1
37923: PPUSH
37924: LD_INT 120
37926: PUSH
37927: LD_VAR 0 2
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PPUSH
37936: CALL_OW 72
37940: ST_TO_ADDR
// end ;
37941: LD_VAR 0 3
37945: RET
// export function IsDriver ( un ) ; begin
37946: LD_INT 0
37948: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37949: LD_ADDR_VAR 0 2
37953: PUSH
37954: LD_VAR 0 1
37958: PUSH
37959: LD_INT 55
37961: PUSH
37962: EMPTY
37963: LIST
37964: PPUSH
37965: CALL_OW 69
37969: IN
37970: ST_TO_ADDR
// end ;
37971: LD_VAR 0 2
37975: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37976: LD_INT 0
37978: PPUSH
37979: PPUSH
// list := [ ] ;
37980: LD_ADDR_VAR 0 5
37984: PUSH
37985: EMPTY
37986: ST_TO_ADDR
// case d of 0 :
37987: LD_VAR 0 3
37991: PUSH
37992: LD_INT 0
37994: DOUBLE
37995: EQUAL
37996: IFTRUE 38000
37998: GO 38133
38000: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38001: LD_ADDR_VAR 0 5
38005: PUSH
38006: LD_VAR 0 1
38010: PUSH
38011: LD_INT 4
38013: MINUS
38014: PUSH
38015: LD_VAR 0 2
38019: PUSH
38020: LD_INT 4
38022: MINUS
38023: PUSH
38024: LD_INT 2
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: LIST
38031: PUSH
38032: LD_VAR 0 1
38036: PUSH
38037: LD_INT 3
38039: MINUS
38040: PUSH
38041: LD_VAR 0 2
38045: PUSH
38046: LD_INT 1
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: LIST
38053: PUSH
38054: LD_VAR 0 1
38058: PUSH
38059: LD_INT 4
38061: PLUS
38062: PUSH
38063: LD_VAR 0 2
38067: PUSH
38068: LD_INT 4
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: LIST
38075: PUSH
38076: LD_VAR 0 1
38080: PUSH
38081: LD_INT 3
38083: PLUS
38084: PUSH
38085: LD_VAR 0 2
38089: PUSH
38090: LD_INT 3
38092: PLUS
38093: PUSH
38094: LD_INT 5
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: LIST
38101: PUSH
38102: LD_VAR 0 1
38106: PUSH
38107: LD_VAR 0 2
38111: PUSH
38112: LD_INT 4
38114: PLUS
38115: PUSH
38116: LD_INT 0
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: LIST
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: ST_TO_ADDR
// end ; 1 :
38131: GO 38831
38133: LD_INT 1
38135: DOUBLE
38136: EQUAL
38137: IFTRUE 38141
38139: GO 38274
38141: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38142: LD_ADDR_VAR 0 5
38146: PUSH
38147: LD_VAR 0 1
38151: PUSH
38152: LD_VAR 0 2
38156: PUSH
38157: LD_INT 4
38159: MINUS
38160: PUSH
38161: LD_INT 3
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: LIST
38168: PUSH
38169: LD_VAR 0 1
38173: PUSH
38174: LD_INT 3
38176: MINUS
38177: PUSH
38178: LD_VAR 0 2
38182: PUSH
38183: LD_INT 3
38185: MINUS
38186: PUSH
38187: LD_INT 2
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: LIST
38194: PUSH
38195: LD_VAR 0 1
38199: PUSH
38200: LD_INT 4
38202: MINUS
38203: PUSH
38204: LD_VAR 0 2
38208: PUSH
38209: LD_INT 1
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: LIST
38216: PUSH
38217: LD_VAR 0 1
38221: PUSH
38222: LD_VAR 0 2
38226: PUSH
38227: LD_INT 3
38229: PLUS
38230: PUSH
38231: LD_INT 0
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: LIST
38238: PUSH
38239: LD_VAR 0 1
38243: PUSH
38244: LD_INT 4
38246: PLUS
38247: PUSH
38248: LD_VAR 0 2
38252: PUSH
38253: LD_INT 4
38255: PLUS
38256: PUSH
38257: LD_INT 5
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: LIST
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: ST_TO_ADDR
// end ; 2 :
38272: GO 38831
38274: LD_INT 2
38276: DOUBLE
38277: EQUAL
38278: IFTRUE 38282
38280: GO 38411
38282: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38283: LD_ADDR_VAR 0 5
38287: PUSH
38288: LD_VAR 0 1
38292: PUSH
38293: LD_VAR 0 2
38297: PUSH
38298: LD_INT 3
38300: MINUS
38301: PUSH
38302: LD_INT 3
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: LIST
38309: PUSH
38310: LD_VAR 0 1
38314: PUSH
38315: LD_INT 4
38317: PLUS
38318: PUSH
38319: LD_VAR 0 2
38323: PUSH
38324: LD_INT 4
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: LIST
38331: PUSH
38332: LD_VAR 0 1
38336: PUSH
38337: LD_VAR 0 2
38341: PUSH
38342: LD_INT 4
38344: PLUS
38345: PUSH
38346: LD_INT 0
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: LIST
38353: PUSH
38354: LD_VAR 0 1
38358: PUSH
38359: LD_INT 3
38361: MINUS
38362: PUSH
38363: LD_VAR 0 2
38367: PUSH
38368: LD_INT 1
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: LIST
38375: PUSH
38376: LD_VAR 0 1
38380: PUSH
38381: LD_INT 4
38383: MINUS
38384: PUSH
38385: LD_VAR 0 2
38389: PUSH
38390: LD_INT 4
38392: MINUS
38393: PUSH
38394: LD_INT 2
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: LIST
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: ST_TO_ADDR
// end ; 3 :
38409: GO 38831
38411: LD_INT 3
38413: DOUBLE
38414: EQUAL
38415: IFTRUE 38419
38417: GO 38552
38419: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38420: LD_ADDR_VAR 0 5
38424: PUSH
38425: LD_VAR 0 1
38429: PUSH
38430: LD_INT 3
38432: PLUS
38433: PUSH
38434: LD_VAR 0 2
38438: PUSH
38439: LD_INT 4
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: LIST
38446: PUSH
38447: LD_VAR 0 1
38451: PUSH
38452: LD_INT 4
38454: PLUS
38455: PUSH
38456: LD_VAR 0 2
38460: PUSH
38461: LD_INT 4
38463: PLUS
38464: PUSH
38465: LD_INT 5
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: LIST
38472: PUSH
38473: LD_VAR 0 1
38477: PUSH
38478: LD_INT 4
38480: MINUS
38481: PUSH
38482: LD_VAR 0 2
38486: PUSH
38487: LD_INT 1
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: LIST
38494: PUSH
38495: LD_VAR 0 1
38499: PUSH
38500: LD_VAR 0 2
38504: PUSH
38505: LD_INT 4
38507: MINUS
38508: PUSH
38509: LD_INT 3
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: LIST
38516: PUSH
38517: LD_VAR 0 1
38521: PUSH
38522: LD_INT 3
38524: MINUS
38525: PUSH
38526: LD_VAR 0 2
38530: PUSH
38531: LD_INT 3
38533: MINUS
38534: PUSH
38535: LD_INT 2
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: LIST
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: ST_TO_ADDR
// end ; 4 :
38550: GO 38831
38552: LD_INT 4
38554: DOUBLE
38555: EQUAL
38556: IFTRUE 38560
38558: GO 38693
38560: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38561: LD_ADDR_VAR 0 5
38565: PUSH
38566: LD_VAR 0 1
38570: PUSH
38571: LD_VAR 0 2
38575: PUSH
38576: LD_INT 4
38578: PLUS
38579: PUSH
38580: LD_INT 0
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: LIST
38587: PUSH
38588: LD_VAR 0 1
38592: PUSH
38593: LD_INT 3
38595: PLUS
38596: PUSH
38597: LD_VAR 0 2
38601: PUSH
38602: LD_INT 3
38604: PLUS
38605: PUSH
38606: LD_INT 5
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: LIST
38613: PUSH
38614: LD_VAR 0 1
38618: PUSH
38619: LD_INT 4
38621: PLUS
38622: PUSH
38623: LD_VAR 0 2
38627: PUSH
38628: LD_INT 4
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: LIST
38635: PUSH
38636: LD_VAR 0 1
38640: PUSH
38641: LD_VAR 0 2
38645: PUSH
38646: LD_INT 3
38648: MINUS
38649: PUSH
38650: LD_INT 3
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: LIST
38657: PUSH
38658: LD_VAR 0 1
38662: PUSH
38663: LD_INT 4
38665: MINUS
38666: PUSH
38667: LD_VAR 0 2
38671: PUSH
38672: LD_INT 4
38674: MINUS
38675: PUSH
38676: LD_INT 2
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: LIST
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: ST_TO_ADDR
// end ; 5 :
38691: GO 38831
38693: LD_INT 5
38695: DOUBLE
38696: EQUAL
38697: IFTRUE 38701
38699: GO 38830
38701: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38702: LD_ADDR_VAR 0 5
38706: PUSH
38707: LD_VAR 0 1
38711: PUSH
38712: LD_INT 4
38714: MINUS
38715: PUSH
38716: LD_VAR 0 2
38720: PUSH
38721: LD_INT 1
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: LIST
38728: PUSH
38729: LD_VAR 0 1
38733: PUSH
38734: LD_VAR 0 2
38738: PUSH
38739: LD_INT 4
38741: MINUS
38742: PUSH
38743: LD_INT 3
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: LIST
38750: PUSH
38751: LD_VAR 0 1
38755: PUSH
38756: LD_INT 4
38758: PLUS
38759: PUSH
38760: LD_VAR 0 2
38764: PUSH
38765: LD_INT 4
38767: PLUS
38768: PUSH
38769: LD_INT 5
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: LIST
38776: PUSH
38777: LD_VAR 0 1
38781: PUSH
38782: LD_INT 3
38784: PLUS
38785: PUSH
38786: LD_VAR 0 2
38790: PUSH
38791: LD_INT 4
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: LIST
38798: PUSH
38799: LD_VAR 0 1
38803: PUSH
38804: LD_VAR 0 2
38808: PUSH
38809: LD_INT 3
38811: PLUS
38812: PUSH
38813: LD_INT 0
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: LIST
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: ST_TO_ADDR
// end ; end ;
38828: GO 38831
38830: POP
// result := list ;
38831: LD_ADDR_VAR 0 4
38835: PUSH
38836: LD_VAR 0 5
38840: ST_TO_ADDR
// end ;
38841: LD_VAR 0 4
38845: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38846: LD_INT 0
38848: PPUSH
38849: PPUSH
38850: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38851: LD_VAR 0 1
38855: NOT
38856: PUSH
38857: LD_VAR 0 2
38861: PUSH
38862: LD_INT 1
38864: PUSH
38865: LD_INT 2
38867: PUSH
38868: LD_INT 3
38870: PUSH
38871: LD_INT 4
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: IN
38880: NOT
38881: OR
38882: IFFALSE 38886
// exit ;
38884: GO 38978
// tmp := [ ] ;
38886: LD_ADDR_VAR 0 5
38890: PUSH
38891: EMPTY
38892: ST_TO_ADDR
// for i in units do
38893: LD_ADDR_VAR 0 4
38897: PUSH
38898: LD_VAR 0 1
38902: PUSH
38903: FOR_IN
38904: IFFALSE 38947
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
38906: LD_ADDR_VAR 0 5
38910: PUSH
38911: LD_VAR 0 5
38915: PPUSH
38916: LD_VAR 0 5
38920: PUSH
38921: LD_INT 1
38923: PLUS
38924: PPUSH
38925: LD_VAR 0 4
38929: PPUSH
38930: LD_VAR 0 2
38934: PPUSH
38935: CALL_OW 259
38939: PPUSH
38940: CALL_OW 2
38944: ST_TO_ADDR
38945: GO 38903
38947: POP
38948: POP
// if not tmp then
38949: LD_VAR 0 5
38953: NOT
38954: IFFALSE 38958
// exit ;
38956: GO 38978
// result := SortListByListDesc ( units , tmp ) ;
38958: LD_ADDR_VAR 0 3
38962: PUSH
38963: LD_VAR 0 1
38967: PPUSH
38968: LD_VAR 0 5
38972: PPUSH
38973: CALL_OW 77
38977: ST_TO_ADDR
// end ;
38978: LD_VAR 0 3
38982: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38983: LD_INT 0
38985: PPUSH
38986: PPUSH
38987: PPUSH
// result := false ;
38988: LD_ADDR_VAR 0 3
38992: PUSH
38993: LD_INT 0
38995: ST_TO_ADDR
// x := GetX ( building ) ;
38996: LD_ADDR_VAR 0 4
39000: PUSH
39001: LD_VAR 0 2
39005: PPUSH
39006: CALL_OW 250
39010: ST_TO_ADDR
// y := GetY ( building ) ;
39011: LD_ADDR_VAR 0 5
39015: PUSH
39016: LD_VAR 0 2
39020: PPUSH
39021: CALL_OW 251
39025: ST_TO_ADDR
// if not building or not x or not y then
39026: LD_VAR 0 2
39030: NOT
39031: PUSH
39032: LD_VAR 0 4
39036: NOT
39037: OR
39038: PUSH
39039: LD_VAR 0 5
39043: NOT
39044: OR
39045: IFFALSE 39049
// exit ;
39047: GO 39141
// if GetTaskList ( unit ) then
39049: LD_VAR 0 1
39053: PPUSH
39054: CALL_OW 437
39058: IFFALSE 39141
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39060: LD_STRING e
39062: PUSH
39063: LD_VAR 0 1
39067: PPUSH
39068: CALL_OW 437
39072: PUSH
39073: LD_INT 1
39075: ARRAY
39076: PUSH
39077: LD_INT 1
39079: ARRAY
39080: EQUAL
39081: PUSH
39082: LD_VAR 0 4
39086: PUSH
39087: LD_VAR 0 1
39091: PPUSH
39092: CALL_OW 437
39096: PUSH
39097: LD_INT 1
39099: ARRAY
39100: PUSH
39101: LD_INT 2
39103: ARRAY
39104: EQUAL
39105: AND
39106: PUSH
39107: LD_VAR 0 5
39111: PUSH
39112: LD_VAR 0 1
39116: PPUSH
39117: CALL_OW 437
39121: PUSH
39122: LD_INT 1
39124: ARRAY
39125: PUSH
39126: LD_INT 3
39128: ARRAY
39129: EQUAL
39130: AND
39131: IFFALSE 39141
// result := true end ;
39133: LD_ADDR_VAR 0 3
39137: PUSH
39138: LD_INT 1
39140: ST_TO_ADDR
// end ;
39141: LD_VAR 0 3
39145: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39146: LD_INT 0
39148: PPUSH
// result := false ;
39149: LD_ADDR_VAR 0 4
39153: PUSH
39154: LD_INT 0
39156: ST_TO_ADDR
// if GetTaskList ( unit ) then
39157: LD_VAR 0 1
39161: PPUSH
39162: CALL_OW 437
39166: IFFALSE 39249
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39168: LD_STRING M
39170: PUSH
39171: LD_VAR 0 1
39175: PPUSH
39176: CALL_OW 437
39180: PUSH
39181: LD_INT 1
39183: ARRAY
39184: PUSH
39185: LD_INT 1
39187: ARRAY
39188: EQUAL
39189: PUSH
39190: LD_VAR 0 2
39194: PUSH
39195: LD_VAR 0 1
39199: PPUSH
39200: CALL_OW 437
39204: PUSH
39205: LD_INT 1
39207: ARRAY
39208: PUSH
39209: LD_INT 2
39211: ARRAY
39212: EQUAL
39213: AND
39214: PUSH
39215: LD_VAR 0 3
39219: PUSH
39220: LD_VAR 0 1
39224: PPUSH
39225: CALL_OW 437
39229: PUSH
39230: LD_INT 1
39232: ARRAY
39233: PUSH
39234: LD_INT 3
39236: ARRAY
39237: EQUAL
39238: AND
39239: IFFALSE 39249
// result := true ;
39241: LD_ADDR_VAR 0 4
39245: PUSH
39246: LD_INT 1
39248: ST_TO_ADDR
// end ; end ;
39249: LD_VAR 0 4
39253: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39254: LD_INT 0
39256: PPUSH
39257: PPUSH
39258: PPUSH
39259: PPUSH
// if not unit or not area then
39260: LD_VAR 0 1
39264: NOT
39265: PUSH
39266: LD_VAR 0 2
39270: NOT
39271: OR
39272: IFFALSE 39276
// exit ;
39274: GO 39440
// tmp := AreaToList ( area , i ) ;
39276: LD_ADDR_VAR 0 6
39280: PUSH
39281: LD_VAR 0 2
39285: PPUSH
39286: LD_VAR 0 5
39290: PPUSH
39291: CALL_OW 517
39295: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39296: LD_ADDR_VAR 0 5
39300: PUSH
39301: DOUBLE
39302: LD_INT 1
39304: DEC
39305: ST_TO_ADDR
39306: LD_VAR 0 6
39310: PUSH
39311: LD_INT 1
39313: ARRAY
39314: PUSH
39315: FOR_TO
39316: IFFALSE 39438
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39318: LD_ADDR_VAR 0 7
39322: PUSH
39323: LD_VAR 0 6
39327: PUSH
39328: LD_INT 1
39330: ARRAY
39331: PUSH
39332: LD_VAR 0 5
39336: ARRAY
39337: PUSH
39338: LD_VAR 0 6
39342: PUSH
39343: LD_INT 2
39345: ARRAY
39346: PUSH
39347: LD_VAR 0 5
39351: ARRAY
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
39357: LD_VAR 0 7
39361: PUSH
39362: LD_INT 1
39364: ARRAY
39365: PPUSH
39366: LD_VAR 0 7
39370: PUSH
39371: LD_INT 2
39373: ARRAY
39374: PPUSH
39375: CALL_OW 428
39379: PUSH
39380: LD_INT 0
39382: EQUAL
39383: IFFALSE 39436
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39385: LD_VAR 0 1
39389: PPUSH
39390: LD_VAR 0 7
39394: PUSH
39395: LD_INT 1
39397: ARRAY
39398: PPUSH
39399: LD_VAR 0 7
39403: PUSH
39404: LD_INT 2
39406: ARRAY
39407: PPUSH
39408: LD_VAR 0 3
39412: PPUSH
39413: CALL_OW 48
// result := IsPlaced ( unit ) ;
39417: LD_ADDR_VAR 0 4
39421: PUSH
39422: LD_VAR 0 1
39426: PPUSH
39427: CALL_OW 305
39431: ST_TO_ADDR
// exit ;
39432: POP
39433: POP
39434: GO 39440
// end ; end ;
39436: GO 39315
39438: POP
39439: POP
// end ;
39440: LD_VAR 0 4
39444: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39445: LD_INT 0
39447: PPUSH
39448: PPUSH
39449: PPUSH
// if not side or side > 8 then
39450: LD_VAR 0 1
39454: NOT
39455: PUSH
39456: LD_VAR 0 1
39460: PUSH
39461: LD_INT 8
39463: GREATER
39464: OR
39465: IFFALSE 39469
// exit ;
39467: GO 39656
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39469: LD_ADDR_VAR 0 4
39473: PUSH
39474: LD_INT 22
39476: PUSH
39477: LD_VAR 0 1
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 21
39488: PUSH
39489: LD_INT 3
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PPUSH
39500: CALL_OW 69
39504: ST_TO_ADDR
// if not tmp then
39505: LD_VAR 0 4
39509: NOT
39510: IFFALSE 39514
// exit ;
39512: GO 39656
// enable_addtolog := true ;
39514: LD_ADDR_OWVAR 81
39518: PUSH
39519: LD_INT 1
39521: ST_TO_ADDR
// AddToLog ( [ ) ;
39522: LD_STRING [
39524: PPUSH
39525: CALL_OW 561
// for i in tmp do
39529: LD_ADDR_VAR 0 3
39533: PUSH
39534: LD_VAR 0 4
39538: PUSH
39539: FOR_IN
39540: IFFALSE 39647
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39542: LD_STRING [
39544: PUSH
39545: LD_VAR 0 3
39549: PPUSH
39550: CALL_OW 266
39554: STR
39555: PUSH
39556: LD_STRING , 
39558: STR
39559: PUSH
39560: LD_VAR 0 3
39564: PPUSH
39565: CALL_OW 250
39569: STR
39570: PUSH
39571: LD_STRING , 
39573: STR
39574: PUSH
39575: LD_VAR 0 3
39579: PPUSH
39580: CALL_OW 251
39584: STR
39585: PUSH
39586: LD_STRING , 
39588: STR
39589: PUSH
39590: LD_VAR 0 3
39594: PPUSH
39595: CALL_OW 254
39599: STR
39600: PUSH
39601: LD_STRING , 
39603: STR
39604: PUSH
39605: LD_VAR 0 3
39609: PPUSH
39610: LD_INT 1
39612: PPUSH
39613: CALL_OW 268
39617: STR
39618: PUSH
39619: LD_STRING , 
39621: STR
39622: PUSH
39623: LD_VAR 0 3
39627: PPUSH
39628: LD_INT 2
39630: PPUSH
39631: CALL_OW 268
39635: STR
39636: PUSH
39637: LD_STRING ],
39639: STR
39640: PPUSH
39641: CALL_OW 561
// end ;
39645: GO 39539
39647: POP
39648: POP
// AddToLog ( ]; ) ;
39649: LD_STRING ];
39651: PPUSH
39652: CALL_OW 561
// end ;
39656: LD_VAR 0 2
39660: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39661: LD_INT 0
39663: PPUSH
39664: PPUSH
39665: PPUSH
39666: PPUSH
39667: PPUSH
// if not area or not rate or not max then
39668: LD_VAR 0 1
39672: NOT
39673: PUSH
39674: LD_VAR 0 2
39678: NOT
39679: OR
39680: PUSH
39681: LD_VAR 0 4
39685: NOT
39686: OR
39687: IFFALSE 39691
// exit ;
39689: GO 39880
// while 1 do
39691: LD_INT 1
39693: IFFALSE 39880
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39695: LD_ADDR_VAR 0 9
39699: PUSH
39700: LD_VAR 0 1
39704: PPUSH
39705: LD_INT 1
39707: PPUSH
39708: CALL_OW 287
39712: PUSH
39713: LD_INT 10
39715: MUL
39716: ST_TO_ADDR
// r := rate / 10 ;
39717: LD_ADDR_VAR 0 7
39721: PUSH
39722: LD_VAR 0 2
39726: PUSH
39727: LD_INT 10
39729: DIVREAL
39730: ST_TO_ADDR
// time := 1 1$00 ;
39731: LD_ADDR_VAR 0 8
39735: PUSH
39736: LD_INT 2100
39738: ST_TO_ADDR
// if amount < min then
39739: LD_VAR 0 9
39743: PUSH
39744: LD_VAR 0 3
39748: LESS
39749: IFFALSE 39767
// r := r * 2 else
39751: LD_ADDR_VAR 0 7
39755: PUSH
39756: LD_VAR 0 7
39760: PUSH
39761: LD_INT 2
39763: MUL
39764: ST_TO_ADDR
39765: GO 39793
// if amount > max then
39767: LD_VAR 0 9
39771: PUSH
39772: LD_VAR 0 4
39776: GREATER
39777: IFFALSE 39793
// r := r / 2 ;
39779: LD_ADDR_VAR 0 7
39783: PUSH
39784: LD_VAR 0 7
39788: PUSH
39789: LD_INT 2
39791: DIVREAL
39792: ST_TO_ADDR
// time := time / r ;
39793: LD_ADDR_VAR 0 8
39797: PUSH
39798: LD_VAR 0 8
39802: PUSH
39803: LD_VAR 0 7
39807: DIVREAL
39808: ST_TO_ADDR
// if time < 0 then
39809: LD_VAR 0 8
39813: PUSH
39814: LD_INT 0
39816: LESS
39817: IFFALSE 39834
// time := time * - 1 ;
39819: LD_ADDR_VAR 0 8
39823: PUSH
39824: LD_VAR 0 8
39828: PUSH
39829: LD_INT 1
39831: NEG
39832: MUL
39833: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39834: LD_VAR 0 8
39838: PUSH
39839: LD_INT 35
39841: PPUSH
39842: LD_INT 875
39844: PPUSH
39845: CALL_OW 12
39849: PLUS
39850: PPUSH
39851: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39855: LD_INT 1
39857: PPUSH
39858: LD_INT 5
39860: PPUSH
39861: CALL_OW 12
39865: PPUSH
39866: LD_VAR 0 1
39870: PPUSH
39871: LD_INT 1
39873: PPUSH
39874: CALL_OW 55
// end ;
39878: GO 39691
// end ;
39880: LD_VAR 0 5
39884: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39885: LD_INT 0
39887: PPUSH
39888: PPUSH
39889: PPUSH
39890: PPUSH
39891: PPUSH
39892: PPUSH
39893: PPUSH
39894: PPUSH
// if not turrets or not factories then
39895: LD_VAR 0 1
39899: NOT
39900: PUSH
39901: LD_VAR 0 2
39905: NOT
39906: OR
39907: IFFALSE 39911
// exit ;
39909: GO 40218
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39911: LD_ADDR_VAR 0 10
39915: PUSH
39916: LD_INT 5
39918: PUSH
39919: LD_INT 6
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 2
39928: PUSH
39929: LD_INT 4
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 3
39938: PUSH
39939: LD_INT 5
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 24
39953: PUSH
39954: LD_INT 25
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 23
39963: PUSH
39964: LD_INT 27
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 42
39977: PUSH
39978: LD_INT 43
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 44
39987: PUSH
39988: LD_INT 46
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 45
39997: PUSH
39998: LD_INT 47
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: LIST
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: LIST
40014: ST_TO_ADDR
// result := [ ] ;
40015: LD_ADDR_VAR 0 3
40019: PUSH
40020: EMPTY
40021: ST_TO_ADDR
// for i in turrets do
40022: LD_ADDR_VAR 0 4
40026: PUSH
40027: LD_VAR 0 1
40031: PUSH
40032: FOR_IN
40033: IFFALSE 40216
// begin nat := GetNation ( i ) ;
40035: LD_ADDR_VAR 0 7
40039: PUSH
40040: LD_VAR 0 4
40044: PPUSH
40045: CALL_OW 248
40049: ST_TO_ADDR
// weapon := 0 ;
40050: LD_ADDR_VAR 0 8
40054: PUSH
40055: LD_INT 0
40057: ST_TO_ADDR
// if not nat then
40058: LD_VAR 0 7
40062: NOT
40063: IFFALSE 40067
// continue ;
40065: GO 40032
// for j in list [ nat ] do
40067: LD_ADDR_VAR 0 5
40071: PUSH
40072: LD_VAR 0 10
40076: PUSH
40077: LD_VAR 0 7
40081: ARRAY
40082: PUSH
40083: FOR_IN
40084: IFFALSE 40125
// if GetBWeapon ( i ) = j [ 1 ] then
40086: LD_VAR 0 4
40090: PPUSH
40091: CALL_OW 269
40095: PUSH
40096: LD_VAR 0 5
40100: PUSH
40101: LD_INT 1
40103: ARRAY
40104: EQUAL
40105: IFFALSE 40123
// begin weapon := j [ 2 ] ;
40107: LD_ADDR_VAR 0 8
40111: PUSH
40112: LD_VAR 0 5
40116: PUSH
40117: LD_INT 2
40119: ARRAY
40120: ST_TO_ADDR
// break ;
40121: GO 40125
// end ;
40123: GO 40083
40125: POP
40126: POP
// if not weapon then
40127: LD_VAR 0 8
40131: NOT
40132: IFFALSE 40136
// continue ;
40134: GO 40032
// for k in factories do
40136: LD_ADDR_VAR 0 6
40140: PUSH
40141: LD_VAR 0 2
40145: PUSH
40146: FOR_IN
40147: IFFALSE 40212
// begin weapons := AvailableWeaponList ( k ) ;
40149: LD_ADDR_VAR 0 9
40153: PUSH
40154: LD_VAR 0 6
40158: PPUSH
40159: CALL_OW 478
40163: ST_TO_ADDR
// if not weapons then
40164: LD_VAR 0 9
40168: NOT
40169: IFFALSE 40173
// continue ;
40171: GO 40146
// if weapon in weapons then
40173: LD_VAR 0 8
40177: PUSH
40178: LD_VAR 0 9
40182: IN
40183: IFFALSE 40210
// begin result := [ i , weapon ] ;
40185: LD_ADDR_VAR 0 3
40189: PUSH
40190: LD_VAR 0 4
40194: PUSH
40195: LD_VAR 0 8
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: ST_TO_ADDR
// exit ;
40204: POP
40205: POP
40206: POP
40207: POP
40208: GO 40218
// end ; end ;
40210: GO 40146
40212: POP
40213: POP
// end ;
40214: GO 40032
40216: POP
40217: POP
// end ;
40218: LD_VAR 0 3
40222: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40223: LD_INT 0
40225: PPUSH
// if not side or side > 8 then
40226: LD_VAR 0 3
40230: NOT
40231: PUSH
40232: LD_VAR 0 3
40236: PUSH
40237: LD_INT 8
40239: GREATER
40240: OR
40241: IFFALSE 40245
// exit ;
40243: GO 40304
// if not range then
40245: LD_VAR 0 4
40249: NOT
40250: IFFALSE 40261
// range := - 12 ;
40252: LD_ADDR_VAR 0 4
40256: PUSH
40257: LD_INT 12
40259: NEG
40260: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40261: LD_VAR 0 1
40265: PPUSH
40266: LD_VAR 0 2
40270: PPUSH
40271: LD_VAR 0 3
40275: PPUSH
40276: LD_VAR 0 4
40280: PPUSH
40281: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40285: LD_VAR 0 1
40289: PPUSH
40290: LD_VAR 0 2
40294: PPUSH
40295: LD_VAR 0 3
40299: PPUSH
40300: CALL_OW 331
// end ;
40304: LD_VAR 0 5
40308: RET
// export function Video ( mode ) ; begin
40309: LD_INT 0
40311: PPUSH
// ingame_video = mode ;
40312: LD_ADDR_OWVAR 52
40316: PUSH
40317: LD_VAR 0 1
40321: ST_TO_ADDR
// interface_hidden = mode ;
40322: LD_ADDR_OWVAR 54
40326: PUSH
40327: LD_VAR 0 1
40331: ST_TO_ADDR
// end ;
40332: LD_VAR 0 2
40336: RET
// export function Join ( array , element ) ; begin
40337: LD_INT 0
40339: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40340: LD_ADDR_VAR 0 3
40344: PUSH
40345: LD_VAR 0 1
40349: PPUSH
40350: LD_VAR 0 1
40354: PUSH
40355: LD_INT 1
40357: PLUS
40358: PPUSH
40359: LD_VAR 0 2
40363: PPUSH
40364: CALL_OW 1
40368: ST_TO_ADDR
// end ;
40369: LD_VAR 0 3
40373: RET
// export function JoinUnion ( array , element ) ; begin
40374: LD_INT 0
40376: PPUSH
// result := array union element ;
40377: LD_ADDR_VAR 0 3
40381: PUSH
40382: LD_VAR 0 1
40386: PUSH
40387: LD_VAR 0 2
40391: UNION
40392: ST_TO_ADDR
// end ;
40393: LD_VAR 0 3
40397: RET
// export function GetBehemoths ( side ) ; begin
40398: LD_INT 0
40400: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40401: LD_ADDR_VAR 0 2
40405: PUSH
40406: LD_INT 22
40408: PUSH
40409: LD_VAR 0 1
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 31
40420: PUSH
40421: LD_INT 25
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PPUSH
40432: CALL_OW 69
40436: ST_TO_ADDR
// end ;
40437: LD_VAR 0 2
40441: RET
// export function Shuffle ( array ) ; var i , index ; begin
40442: LD_INT 0
40444: PPUSH
40445: PPUSH
40446: PPUSH
// result := [ ] ;
40447: LD_ADDR_VAR 0 2
40451: PUSH
40452: EMPTY
40453: ST_TO_ADDR
// if not array then
40454: LD_VAR 0 1
40458: NOT
40459: IFFALSE 40463
// exit ;
40461: GO 40562
// Randomize ;
40463: CALL_OW 10
// for i = array downto 1 do
40467: LD_ADDR_VAR 0 3
40471: PUSH
40472: DOUBLE
40473: LD_VAR 0 1
40477: INC
40478: ST_TO_ADDR
40479: LD_INT 1
40481: PUSH
40482: FOR_DOWNTO
40483: IFFALSE 40560
// begin index := rand ( 1 , array ) ;
40485: LD_ADDR_VAR 0 4
40489: PUSH
40490: LD_INT 1
40492: PPUSH
40493: LD_VAR 0 1
40497: PPUSH
40498: CALL_OW 12
40502: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40503: LD_ADDR_VAR 0 2
40507: PUSH
40508: LD_VAR 0 2
40512: PPUSH
40513: LD_VAR 0 2
40517: PUSH
40518: LD_INT 1
40520: PLUS
40521: PPUSH
40522: LD_VAR 0 1
40526: PUSH
40527: LD_VAR 0 4
40531: ARRAY
40532: PPUSH
40533: CALL_OW 2
40537: ST_TO_ADDR
// array := Delete ( array , index ) ;
40538: LD_ADDR_VAR 0 1
40542: PUSH
40543: LD_VAR 0 1
40547: PPUSH
40548: LD_VAR 0 4
40552: PPUSH
40553: CALL_OW 3
40557: ST_TO_ADDR
// end ;
40558: GO 40482
40560: POP
40561: POP
// end ;
40562: LD_VAR 0 2
40566: RET
// export function GetBaseMaterials ( base ) ; begin
40567: LD_INT 0
40569: PPUSH
// result := [ 0 , 0 , 0 ] ;
40570: LD_ADDR_VAR 0 2
40574: PUSH
40575: LD_INT 0
40577: PUSH
40578: LD_INT 0
40580: PUSH
40581: LD_INT 0
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: LIST
40588: ST_TO_ADDR
// if not base then
40589: LD_VAR 0 1
40593: NOT
40594: IFFALSE 40598
// exit ;
40596: GO 40647
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40598: LD_ADDR_VAR 0 2
40602: PUSH
40603: LD_VAR 0 1
40607: PPUSH
40608: LD_INT 1
40610: PPUSH
40611: CALL_OW 275
40615: PUSH
40616: LD_VAR 0 1
40620: PPUSH
40621: LD_INT 2
40623: PPUSH
40624: CALL_OW 275
40628: PUSH
40629: LD_VAR 0 1
40633: PPUSH
40634: LD_INT 3
40636: PPUSH
40637: CALL_OW 275
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: LIST
40646: ST_TO_ADDR
// end ;
40647: LD_VAR 0 2
40651: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40652: LD_INT 0
40654: PPUSH
40655: PPUSH
// result := array ;
40656: LD_ADDR_VAR 0 3
40660: PUSH
40661: LD_VAR 0 1
40665: ST_TO_ADDR
// if size >= result then
40666: LD_VAR 0 2
40670: PUSH
40671: LD_VAR 0 3
40675: GREATEREQUAL
40676: IFFALSE 40680
// exit ;
40678: GO 40730
// if size then
40680: LD_VAR 0 2
40684: IFFALSE 40730
// for i := array downto size do
40686: LD_ADDR_VAR 0 4
40690: PUSH
40691: DOUBLE
40692: LD_VAR 0 1
40696: INC
40697: ST_TO_ADDR
40698: LD_VAR 0 2
40702: PUSH
40703: FOR_DOWNTO
40704: IFFALSE 40728
// result := Delete ( result , result ) ;
40706: LD_ADDR_VAR 0 3
40710: PUSH
40711: LD_VAR 0 3
40715: PPUSH
40716: LD_VAR 0 3
40720: PPUSH
40721: CALL_OW 3
40725: ST_TO_ADDR
40726: GO 40703
40728: POP
40729: POP
// end ;
40730: LD_VAR 0 3
40734: RET
// export function ComExit ( unit ) ; var tmp ; begin
40735: LD_INT 0
40737: PPUSH
40738: PPUSH
// if not IsInUnit ( unit ) then
40739: LD_VAR 0 1
40743: PPUSH
40744: CALL_OW 310
40748: NOT
40749: IFFALSE 40753
// exit ;
40751: GO 40813
// tmp := IsInUnit ( unit ) ;
40753: LD_ADDR_VAR 0 3
40757: PUSH
40758: LD_VAR 0 1
40762: PPUSH
40763: CALL_OW 310
40767: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40768: LD_VAR 0 3
40772: PPUSH
40773: CALL_OW 247
40777: PUSH
40778: LD_INT 2
40780: EQUAL
40781: IFFALSE 40794
// ComExitVehicle ( unit ) else
40783: LD_VAR 0 1
40787: PPUSH
40788: CALL_OW 121
40792: GO 40803
// ComExitBuilding ( unit ) ;
40794: LD_VAR 0 1
40798: PPUSH
40799: CALL_OW 122
// result := tmp ;
40803: LD_ADDR_VAR 0 2
40807: PUSH
40808: LD_VAR 0 3
40812: ST_TO_ADDR
// end ;
40813: LD_VAR 0 2
40817: RET
// export function ComExitAll ( units ) ; var i ; begin
40818: LD_INT 0
40820: PPUSH
40821: PPUSH
// if not units then
40822: LD_VAR 0 1
40826: NOT
40827: IFFALSE 40831
// exit ;
40829: GO 40857
// for i in units do
40831: LD_ADDR_VAR 0 3
40835: PUSH
40836: LD_VAR 0 1
40840: PUSH
40841: FOR_IN
40842: IFFALSE 40855
// ComExit ( i ) ;
40844: LD_VAR 0 3
40848: PPUSH
40849: CALL 40735 0 1
40853: GO 40841
40855: POP
40856: POP
// end ;
40857: LD_VAR 0 2
40861: RET
// export function ResetHc ; begin
40862: LD_INT 0
40864: PPUSH
// InitHc ;
40865: CALL_OW 19
// hc_importance := 0 ;
40869: LD_ADDR_OWVAR 32
40873: PUSH
40874: LD_INT 0
40876: ST_TO_ADDR
// end ;
40877: LD_VAR 0 1
40881: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40882: LD_INT 0
40884: PPUSH
40885: PPUSH
40886: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40887: LD_ADDR_VAR 0 6
40891: PUSH
40892: LD_VAR 0 1
40896: PUSH
40897: LD_VAR 0 3
40901: PLUS
40902: PUSH
40903: LD_INT 2
40905: DIV
40906: ST_TO_ADDR
// if _x < 0 then
40907: LD_VAR 0 6
40911: PUSH
40912: LD_INT 0
40914: LESS
40915: IFFALSE 40932
// _x := _x * - 1 ;
40917: LD_ADDR_VAR 0 6
40921: PUSH
40922: LD_VAR 0 6
40926: PUSH
40927: LD_INT 1
40929: NEG
40930: MUL
40931: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40932: LD_ADDR_VAR 0 7
40936: PUSH
40937: LD_VAR 0 2
40941: PUSH
40942: LD_VAR 0 4
40946: PLUS
40947: PUSH
40948: LD_INT 2
40950: DIV
40951: ST_TO_ADDR
// if _y < 0 then
40952: LD_VAR 0 7
40956: PUSH
40957: LD_INT 0
40959: LESS
40960: IFFALSE 40977
// _y := _y * - 1 ;
40962: LD_ADDR_VAR 0 7
40966: PUSH
40967: LD_VAR 0 7
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: MUL
40976: ST_TO_ADDR
// result := [ _x , _y ] ;
40977: LD_ADDR_VAR 0 5
40981: PUSH
40982: LD_VAR 0 6
40986: PUSH
40987: LD_VAR 0 7
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: ST_TO_ADDR
// end ;
40996: LD_VAR 0 5
41000: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41001: LD_INT 0
41003: PPUSH
41004: PPUSH
41005: PPUSH
41006: PPUSH
// task := GetTaskList ( unit ) ;
41007: LD_ADDR_VAR 0 7
41011: PUSH
41012: LD_VAR 0 1
41016: PPUSH
41017: CALL_OW 437
41021: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41022: LD_VAR 0 7
41026: NOT
41027: PUSH
41028: LD_VAR 0 1
41032: PPUSH
41033: LD_VAR 0 2
41037: PPUSH
41038: CALL_OW 308
41042: NOT
41043: AND
41044: IFFALSE 41048
// exit ;
41046: GO 41166
// if IsInArea ( unit , area ) then
41048: LD_VAR 0 1
41052: PPUSH
41053: LD_VAR 0 2
41057: PPUSH
41058: CALL_OW 308
41062: IFFALSE 41080
// begin ComMoveToArea ( unit , goAway ) ;
41064: LD_VAR 0 1
41068: PPUSH
41069: LD_VAR 0 3
41073: PPUSH
41074: CALL_OW 113
// exit ;
41078: GO 41166
// end ; if task [ 1 ] [ 1 ] <> M then
41080: LD_VAR 0 7
41084: PUSH
41085: LD_INT 1
41087: ARRAY
41088: PUSH
41089: LD_INT 1
41091: ARRAY
41092: PUSH
41093: LD_STRING M
41095: NONEQUAL
41096: IFFALSE 41100
// exit ;
41098: GO 41166
// x := task [ 1 ] [ 2 ] ;
41100: LD_ADDR_VAR 0 5
41104: PUSH
41105: LD_VAR 0 7
41109: PUSH
41110: LD_INT 1
41112: ARRAY
41113: PUSH
41114: LD_INT 2
41116: ARRAY
41117: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41118: LD_ADDR_VAR 0 6
41122: PUSH
41123: LD_VAR 0 7
41127: PUSH
41128: LD_INT 1
41130: ARRAY
41131: PUSH
41132: LD_INT 3
41134: ARRAY
41135: ST_TO_ADDR
// if InArea ( x , y , area ) then
41136: LD_VAR 0 5
41140: PPUSH
41141: LD_VAR 0 6
41145: PPUSH
41146: LD_VAR 0 2
41150: PPUSH
41151: CALL_OW 309
41155: IFFALSE 41166
// ComStop ( unit ) ;
41157: LD_VAR 0 1
41161: PPUSH
41162: CALL_OW 141
// end ;
41166: LD_VAR 0 4
41170: RET
// export function Abs ( value ) ; begin
41171: LD_INT 0
41173: PPUSH
// result := value ;
41174: LD_ADDR_VAR 0 2
41178: PUSH
41179: LD_VAR 0 1
41183: ST_TO_ADDR
// if value < 0 then
41184: LD_VAR 0 1
41188: PUSH
41189: LD_INT 0
41191: LESS
41192: IFFALSE 41209
// result := value * - 1 ;
41194: LD_ADDR_VAR 0 2
41198: PUSH
41199: LD_VAR 0 1
41203: PUSH
41204: LD_INT 1
41206: NEG
41207: MUL
41208: ST_TO_ADDR
// end ;
41209: LD_VAR 0 2
41213: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41214: LD_INT 0
41216: PPUSH
41217: PPUSH
41218: PPUSH
41219: PPUSH
41220: PPUSH
41221: PPUSH
41222: PPUSH
41223: PPUSH
// if not unit or not building then
41224: LD_VAR 0 1
41228: NOT
41229: PUSH
41230: LD_VAR 0 2
41234: NOT
41235: OR
41236: IFFALSE 41240
// exit ;
41238: GO 41466
// x := GetX ( building ) ;
41240: LD_ADDR_VAR 0 4
41244: PUSH
41245: LD_VAR 0 2
41249: PPUSH
41250: CALL_OW 250
41254: ST_TO_ADDR
// y := GetY ( building ) ;
41255: LD_ADDR_VAR 0 6
41259: PUSH
41260: LD_VAR 0 2
41264: PPUSH
41265: CALL_OW 251
41269: ST_TO_ADDR
// d := GetDir ( building ) ;
41270: LD_ADDR_VAR 0 8
41274: PUSH
41275: LD_VAR 0 2
41279: PPUSH
41280: CALL_OW 254
41284: ST_TO_ADDR
// r := 4 ;
41285: LD_ADDR_VAR 0 9
41289: PUSH
41290: LD_INT 4
41292: ST_TO_ADDR
// for i := 1 to 5 do
41293: LD_ADDR_VAR 0 10
41297: PUSH
41298: DOUBLE
41299: LD_INT 1
41301: DEC
41302: ST_TO_ADDR
41303: LD_INT 5
41305: PUSH
41306: FOR_TO
41307: IFFALSE 41464
// begin _x := ShiftX ( x , d , r + i ) ;
41309: LD_ADDR_VAR 0 5
41313: PUSH
41314: LD_VAR 0 4
41318: PPUSH
41319: LD_VAR 0 8
41323: PPUSH
41324: LD_VAR 0 9
41328: PUSH
41329: LD_VAR 0 10
41333: PLUS
41334: PPUSH
41335: CALL_OW 272
41339: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41340: LD_ADDR_VAR 0 7
41344: PUSH
41345: LD_VAR 0 6
41349: PPUSH
41350: LD_VAR 0 8
41354: PPUSH
41355: LD_VAR 0 9
41359: PUSH
41360: LD_VAR 0 10
41364: PLUS
41365: PPUSH
41366: CALL_OW 273
41370: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41371: LD_VAR 0 5
41375: PPUSH
41376: LD_VAR 0 7
41380: PPUSH
41381: CALL_OW 488
41385: PUSH
41386: LD_VAR 0 5
41390: PPUSH
41391: LD_VAR 0 7
41395: PPUSH
41396: CALL_OW 428
41400: PPUSH
41401: CALL_OW 247
41405: PUSH
41406: LD_INT 3
41408: PUSH
41409: LD_INT 2
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: IN
41416: NOT
41417: AND
41418: IFFALSE 41462
// begin ComMoveXY ( unit , _x , _y ) ;
41420: LD_VAR 0 1
41424: PPUSH
41425: LD_VAR 0 5
41429: PPUSH
41430: LD_VAR 0 7
41434: PPUSH
41435: CALL_OW 111
// result := [ _x , _y ] ;
41439: LD_ADDR_VAR 0 3
41443: PUSH
41444: LD_VAR 0 5
41448: PUSH
41449: LD_VAR 0 7
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: ST_TO_ADDR
// exit ;
41458: POP
41459: POP
41460: GO 41466
// end ; end ;
41462: GO 41306
41464: POP
41465: POP
// end ;
41466: LD_VAR 0 3
41470: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41471: LD_INT 0
41473: PPUSH
41474: PPUSH
41475: PPUSH
// result := 0 ;
41476: LD_ADDR_VAR 0 3
41480: PUSH
41481: LD_INT 0
41483: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41484: LD_VAR 0 1
41488: PUSH
41489: LD_INT 0
41491: LESS
41492: PUSH
41493: LD_VAR 0 1
41497: PUSH
41498: LD_INT 8
41500: GREATER
41501: OR
41502: PUSH
41503: LD_VAR 0 2
41507: PUSH
41508: LD_INT 0
41510: LESS
41511: OR
41512: PUSH
41513: LD_VAR 0 2
41517: PUSH
41518: LD_INT 8
41520: GREATER
41521: OR
41522: IFFALSE 41526
// exit ;
41524: GO 41601
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41526: LD_ADDR_VAR 0 4
41530: PUSH
41531: LD_INT 22
41533: PUSH
41534: LD_VAR 0 2
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PPUSH
41543: CALL_OW 69
41547: PUSH
41548: FOR_IN
41549: IFFALSE 41599
// begin un := UnitShoot ( i ) ;
41551: LD_ADDR_VAR 0 5
41555: PUSH
41556: LD_VAR 0 4
41560: PPUSH
41561: CALL_OW 504
41565: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41566: LD_VAR 0 5
41570: PPUSH
41571: CALL_OW 255
41575: PUSH
41576: LD_VAR 0 1
41580: EQUAL
41581: IFFALSE 41597
// begin result := un ;
41583: LD_ADDR_VAR 0 3
41587: PUSH
41588: LD_VAR 0 5
41592: ST_TO_ADDR
// exit ;
41593: POP
41594: POP
41595: GO 41601
// end ; end ;
41597: GO 41548
41599: POP
41600: POP
// end ;
41601: LD_VAR 0 3
41605: RET
// export function GetCargoBay ( units ) ; begin
41606: LD_INT 0
41608: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41609: LD_ADDR_VAR 0 2
41613: PUSH
41614: LD_VAR 0 1
41618: PPUSH
41619: LD_INT 2
41621: PUSH
41622: LD_INT 34
41624: PUSH
41625: LD_INT 12
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 34
41634: PUSH
41635: LD_INT 51
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 34
41644: PUSH
41645: LD_INT 32
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 34
41654: PUSH
41655: LD_EXP 10
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: PPUSH
41671: CALL_OW 72
41675: ST_TO_ADDR
// end ;
41676: LD_VAR 0 2
41680: RET
// export function Negate ( value ) ; begin
41681: LD_INT 0
41683: PPUSH
// result := not value ;
41684: LD_ADDR_VAR 0 2
41688: PUSH
41689: LD_VAR 0 1
41693: NOT
41694: ST_TO_ADDR
// end ;
41695: LD_VAR 0 2
41699: RET
// export function Inc ( value ) ; begin
41700: LD_INT 0
41702: PPUSH
// result := value + 1 ;
41703: LD_ADDR_VAR 0 2
41707: PUSH
41708: LD_VAR 0 1
41712: PUSH
41713: LD_INT 1
41715: PLUS
41716: ST_TO_ADDR
// end ;
41717: LD_VAR 0 2
41721: RET
// export function Dec ( value ) ; begin
41722: LD_INT 0
41724: PPUSH
// result := value - 1 ;
41725: LD_ADDR_VAR 0 2
41729: PUSH
41730: LD_VAR 0 1
41734: PUSH
41735: LD_INT 1
41737: MINUS
41738: ST_TO_ADDR
// end ;
41739: LD_VAR 0 2
41743: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41744: LD_INT 0
41746: PPUSH
41747: PPUSH
41748: PPUSH
41749: PPUSH
41750: PPUSH
41751: PPUSH
41752: PPUSH
41753: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41754: LD_VAR 0 1
41758: PPUSH
41759: LD_VAR 0 2
41763: PPUSH
41764: CALL_OW 488
41768: NOT
41769: PUSH
41770: LD_VAR 0 3
41774: PPUSH
41775: LD_VAR 0 4
41779: PPUSH
41780: CALL_OW 488
41784: NOT
41785: OR
41786: IFFALSE 41799
// begin result := - 1 ;
41788: LD_ADDR_VAR 0 5
41792: PUSH
41793: LD_INT 1
41795: NEG
41796: ST_TO_ADDR
// exit ;
41797: GO 42034
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41799: LD_ADDR_VAR 0 12
41803: PUSH
41804: LD_VAR 0 1
41808: PPUSH
41809: LD_VAR 0 2
41813: PPUSH
41814: LD_VAR 0 3
41818: PPUSH
41819: LD_VAR 0 4
41823: PPUSH
41824: CALL 40882 0 4
41828: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41829: LD_ADDR_VAR 0 11
41833: PUSH
41834: LD_VAR 0 1
41838: PPUSH
41839: LD_VAR 0 2
41843: PPUSH
41844: LD_VAR 0 12
41848: PUSH
41849: LD_INT 1
41851: ARRAY
41852: PPUSH
41853: LD_VAR 0 12
41857: PUSH
41858: LD_INT 2
41860: ARRAY
41861: PPUSH
41862: CALL_OW 298
41866: ST_TO_ADDR
// distance := 9999 ;
41867: LD_ADDR_VAR 0 10
41871: PUSH
41872: LD_INT 9999
41874: ST_TO_ADDR
// for i := 0 to 5 do
41875: LD_ADDR_VAR 0 6
41879: PUSH
41880: DOUBLE
41881: LD_INT 0
41883: DEC
41884: ST_TO_ADDR
41885: LD_INT 5
41887: PUSH
41888: FOR_TO
41889: IFFALSE 42032
// begin _x := ShiftX ( x1 , i , centerDist ) ;
41891: LD_ADDR_VAR 0 7
41895: PUSH
41896: LD_VAR 0 1
41900: PPUSH
41901: LD_VAR 0 6
41905: PPUSH
41906: LD_VAR 0 11
41910: PPUSH
41911: CALL_OW 272
41915: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41916: LD_ADDR_VAR 0 8
41920: PUSH
41921: LD_VAR 0 2
41925: PPUSH
41926: LD_VAR 0 6
41930: PPUSH
41931: LD_VAR 0 11
41935: PPUSH
41936: CALL_OW 273
41940: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41941: LD_VAR 0 7
41945: PPUSH
41946: LD_VAR 0 8
41950: PPUSH
41951: CALL_OW 488
41955: NOT
41956: IFFALSE 41960
// continue ;
41958: GO 41888
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41960: LD_ADDR_VAR 0 9
41964: PUSH
41965: LD_VAR 0 12
41969: PUSH
41970: LD_INT 1
41972: ARRAY
41973: PPUSH
41974: LD_VAR 0 12
41978: PUSH
41979: LD_INT 2
41981: ARRAY
41982: PPUSH
41983: LD_VAR 0 7
41987: PPUSH
41988: LD_VAR 0 8
41992: PPUSH
41993: CALL_OW 298
41997: ST_TO_ADDR
// if tmp < distance then
41998: LD_VAR 0 9
42002: PUSH
42003: LD_VAR 0 10
42007: LESS
42008: IFFALSE 42030
// begin result := i ;
42010: LD_ADDR_VAR 0 5
42014: PUSH
42015: LD_VAR 0 6
42019: ST_TO_ADDR
// distance := tmp ;
42020: LD_ADDR_VAR 0 10
42024: PUSH
42025: LD_VAR 0 9
42029: ST_TO_ADDR
// end ; end ;
42030: GO 41888
42032: POP
42033: POP
// end ;
42034: LD_VAR 0 5
42038: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42039: LD_INT 0
42041: PPUSH
42042: PPUSH
// if not driver or not IsInUnit ( driver ) then
42043: LD_VAR 0 1
42047: NOT
42048: PUSH
42049: LD_VAR 0 1
42053: PPUSH
42054: CALL_OW 310
42058: NOT
42059: OR
42060: IFFALSE 42064
// exit ;
42062: GO 42154
// vehicle := IsInUnit ( driver ) ;
42064: LD_ADDR_VAR 0 3
42068: PUSH
42069: LD_VAR 0 1
42073: PPUSH
42074: CALL_OW 310
42078: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42079: LD_VAR 0 1
42083: PPUSH
42084: LD_STRING \
42086: PUSH
42087: LD_INT 0
42089: PUSH
42090: LD_INT 0
42092: PUSH
42093: LD_INT 0
42095: PUSH
42096: LD_INT 0
42098: PUSH
42099: LD_INT 0
42101: PUSH
42102: LD_INT 0
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: PUSH
42114: LD_STRING E
42116: PUSH
42117: LD_INT 0
42119: PUSH
42120: LD_INT 0
42122: PUSH
42123: LD_VAR 0 3
42127: PUSH
42128: LD_INT 0
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: LD_INT 0
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PPUSH
42150: CALL_OW 446
// end ;
42154: LD_VAR 0 2
42158: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42159: LD_INT 0
42161: PPUSH
42162: PPUSH
// if not driver or not IsInUnit ( driver ) then
42163: LD_VAR 0 1
42167: NOT
42168: PUSH
42169: LD_VAR 0 1
42173: PPUSH
42174: CALL_OW 310
42178: NOT
42179: OR
42180: IFFALSE 42184
// exit ;
42182: GO 42274
// vehicle := IsInUnit ( driver ) ;
42184: LD_ADDR_VAR 0 3
42188: PUSH
42189: LD_VAR 0 1
42193: PPUSH
42194: CALL_OW 310
42198: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42199: LD_VAR 0 1
42203: PPUSH
42204: LD_STRING \
42206: PUSH
42207: LD_INT 0
42209: PUSH
42210: LD_INT 0
42212: PUSH
42213: LD_INT 0
42215: PUSH
42216: LD_INT 0
42218: PUSH
42219: LD_INT 0
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: PUSH
42234: LD_STRING E
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: LD_INT 0
42242: PUSH
42243: LD_VAR 0 3
42247: PUSH
42248: LD_INT 0
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: LD_INT 0
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PPUSH
42270: CALL_OW 447
// end ;
42274: LD_VAR 0 2
42278: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42279: LD_INT 0
42281: PPUSH
42282: PPUSH
42283: PPUSH
// tmp := [ ] ;
42284: LD_ADDR_VAR 0 5
42288: PUSH
42289: EMPTY
42290: ST_TO_ADDR
// for i in units do
42291: LD_ADDR_VAR 0 4
42295: PUSH
42296: LD_VAR 0 1
42300: PUSH
42301: FOR_IN
42302: IFFALSE 42340
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42304: LD_ADDR_VAR 0 5
42308: PUSH
42309: LD_VAR 0 5
42313: PPUSH
42314: LD_VAR 0 5
42318: PUSH
42319: LD_INT 1
42321: PLUS
42322: PPUSH
42323: LD_VAR 0 4
42327: PPUSH
42328: CALL_OW 256
42332: PPUSH
42333: CALL_OW 2
42337: ST_TO_ADDR
42338: GO 42301
42340: POP
42341: POP
// if not tmp then
42342: LD_VAR 0 5
42346: NOT
42347: IFFALSE 42351
// exit ;
42349: GO 42399
// if asc then
42351: LD_VAR 0 2
42355: IFFALSE 42379
// result := SortListByListAsc ( units , tmp ) else
42357: LD_ADDR_VAR 0 3
42361: PUSH
42362: LD_VAR 0 1
42366: PPUSH
42367: LD_VAR 0 5
42371: PPUSH
42372: CALL_OW 76
42376: ST_TO_ADDR
42377: GO 42399
// result := SortListByListDesc ( units , tmp ) ;
42379: LD_ADDR_VAR 0 3
42383: PUSH
42384: LD_VAR 0 1
42388: PPUSH
42389: LD_VAR 0 5
42393: PPUSH
42394: CALL_OW 77
42398: ST_TO_ADDR
// end ;
42399: LD_VAR 0 3
42403: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42404: LD_INT 0
42406: PPUSH
42407: PPUSH
// task := GetTaskList ( mech ) ;
42408: LD_ADDR_VAR 0 4
42412: PUSH
42413: LD_VAR 0 1
42417: PPUSH
42418: CALL_OW 437
42422: ST_TO_ADDR
// if not task then
42423: LD_VAR 0 4
42427: NOT
42428: IFFALSE 42432
// exit ;
42430: GO 42474
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42432: LD_ADDR_VAR 0 3
42436: PUSH
42437: LD_VAR 0 4
42441: PUSH
42442: LD_INT 1
42444: ARRAY
42445: PUSH
42446: LD_INT 1
42448: ARRAY
42449: PUSH
42450: LD_STRING r
42452: EQUAL
42453: PUSH
42454: LD_VAR 0 4
42458: PUSH
42459: LD_INT 1
42461: ARRAY
42462: PUSH
42463: LD_INT 4
42465: ARRAY
42466: PUSH
42467: LD_VAR 0 2
42471: EQUAL
42472: AND
42473: ST_TO_ADDR
// end ;
42474: LD_VAR 0 3
42478: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42479: LD_INT 0
42481: PPUSH
// SetDir ( unit , d ) ;
42482: LD_VAR 0 1
42486: PPUSH
42487: LD_VAR 0 4
42491: PPUSH
42492: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42496: LD_VAR 0 1
42500: PPUSH
42501: LD_VAR 0 2
42505: PPUSH
42506: LD_VAR 0 3
42510: PPUSH
42511: LD_VAR 0 5
42515: PPUSH
42516: CALL_OW 48
// end ;
42520: LD_VAR 0 6
42524: RET
// export function ToNaturalNumber ( number ) ; begin
42525: LD_INT 0
42527: PPUSH
// result := number div 1 ;
42528: LD_ADDR_VAR 0 2
42532: PUSH
42533: LD_VAR 0 1
42537: PUSH
42538: LD_INT 1
42540: DIV
42541: ST_TO_ADDR
// if number < 0 then
42542: LD_VAR 0 1
42546: PUSH
42547: LD_INT 0
42549: LESS
42550: IFFALSE 42560
// result := 0 ;
42552: LD_ADDR_VAR 0 2
42556: PUSH
42557: LD_INT 0
42559: ST_TO_ADDR
// end ;
42560: LD_VAR 0 2
42564: RET
// export function SortByClass ( units , class ) ; var un ; begin
42565: LD_INT 0
42567: PPUSH
42568: PPUSH
// if not units or not class then
42569: LD_VAR 0 1
42573: NOT
42574: PUSH
42575: LD_VAR 0 2
42579: NOT
42580: OR
42581: IFFALSE 42585
// exit ;
42583: GO 42680
// result := [ ] ;
42585: LD_ADDR_VAR 0 3
42589: PUSH
42590: EMPTY
42591: ST_TO_ADDR
// for un in units do
42592: LD_ADDR_VAR 0 4
42596: PUSH
42597: LD_VAR 0 1
42601: PUSH
42602: FOR_IN
42603: IFFALSE 42678
// if GetClass ( un ) = class then
42605: LD_VAR 0 4
42609: PPUSH
42610: CALL_OW 257
42614: PUSH
42615: LD_VAR 0 2
42619: EQUAL
42620: IFFALSE 42647
// result := Insert ( result , 1 , un ) else
42622: LD_ADDR_VAR 0 3
42626: PUSH
42627: LD_VAR 0 3
42631: PPUSH
42632: LD_INT 1
42634: PPUSH
42635: LD_VAR 0 4
42639: PPUSH
42640: CALL_OW 2
42644: ST_TO_ADDR
42645: GO 42676
// result := Replace ( result , result + 1 , un ) ;
42647: LD_ADDR_VAR 0 3
42651: PUSH
42652: LD_VAR 0 3
42656: PPUSH
42657: LD_VAR 0 3
42661: PUSH
42662: LD_INT 1
42664: PLUS
42665: PPUSH
42666: LD_VAR 0 4
42670: PPUSH
42671: CALL_OW 1
42675: ST_TO_ADDR
42676: GO 42602
42678: POP
42679: POP
// end ;
42680: LD_VAR 0 3
42684: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42685: LD_INT 0
42687: PPUSH
42688: PPUSH
42689: PPUSH
42690: PPUSH
42691: PPUSH
42692: PPUSH
42693: PPUSH
// result := [ ] ;
42694: LD_ADDR_VAR 0 4
42698: PUSH
42699: EMPTY
42700: ST_TO_ADDR
// if x - r < 0 then
42701: LD_VAR 0 1
42705: PUSH
42706: LD_VAR 0 3
42710: MINUS
42711: PUSH
42712: LD_INT 0
42714: LESS
42715: IFFALSE 42727
// min_x := 0 else
42717: LD_ADDR_VAR 0 8
42721: PUSH
42722: LD_INT 0
42724: ST_TO_ADDR
42725: GO 42743
// min_x := x - r ;
42727: LD_ADDR_VAR 0 8
42731: PUSH
42732: LD_VAR 0 1
42736: PUSH
42737: LD_VAR 0 3
42741: MINUS
42742: ST_TO_ADDR
// if y - r < 0 then
42743: LD_VAR 0 2
42747: PUSH
42748: LD_VAR 0 3
42752: MINUS
42753: PUSH
42754: LD_INT 0
42756: LESS
42757: IFFALSE 42769
// min_y := 0 else
42759: LD_ADDR_VAR 0 7
42763: PUSH
42764: LD_INT 0
42766: ST_TO_ADDR
42767: GO 42785
// min_y := y - r ;
42769: LD_ADDR_VAR 0 7
42773: PUSH
42774: LD_VAR 0 2
42778: PUSH
42779: LD_VAR 0 3
42783: MINUS
42784: ST_TO_ADDR
// max_x := x + r ;
42785: LD_ADDR_VAR 0 9
42789: PUSH
42790: LD_VAR 0 1
42794: PUSH
42795: LD_VAR 0 3
42799: PLUS
42800: ST_TO_ADDR
// max_y := y + r ;
42801: LD_ADDR_VAR 0 10
42805: PUSH
42806: LD_VAR 0 2
42810: PUSH
42811: LD_VAR 0 3
42815: PLUS
42816: ST_TO_ADDR
// for _x = min_x to max_x do
42817: LD_ADDR_VAR 0 5
42821: PUSH
42822: DOUBLE
42823: LD_VAR 0 8
42827: DEC
42828: ST_TO_ADDR
42829: LD_VAR 0 9
42833: PUSH
42834: FOR_TO
42835: IFFALSE 42936
// for _y = min_y to max_y do
42837: LD_ADDR_VAR 0 6
42841: PUSH
42842: DOUBLE
42843: LD_VAR 0 7
42847: DEC
42848: ST_TO_ADDR
42849: LD_VAR 0 10
42853: PUSH
42854: FOR_TO
42855: IFFALSE 42932
// begin if not ValidHex ( _x , _y ) then
42857: LD_VAR 0 5
42861: PPUSH
42862: LD_VAR 0 6
42866: PPUSH
42867: CALL_OW 488
42871: NOT
42872: IFFALSE 42876
// continue ;
42874: GO 42854
// if GetResourceTypeXY ( _x , _y ) then
42876: LD_VAR 0 5
42880: PPUSH
42881: LD_VAR 0 6
42885: PPUSH
42886: CALL_OW 283
42890: IFFALSE 42930
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42892: LD_ADDR_VAR 0 4
42896: PUSH
42897: LD_VAR 0 4
42901: PPUSH
42902: LD_VAR 0 4
42906: PUSH
42907: LD_INT 1
42909: PLUS
42910: PPUSH
42911: LD_VAR 0 5
42915: PUSH
42916: LD_VAR 0 6
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PPUSH
42925: CALL_OW 1
42929: ST_TO_ADDR
// end ;
42930: GO 42854
42932: POP
42933: POP
42934: GO 42834
42936: POP
42937: POP
// end ;
42938: LD_VAR 0 4
42942: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42943: LD_INT 0
42945: PPUSH
42946: PPUSH
42947: PPUSH
42948: PPUSH
42949: PPUSH
42950: PPUSH
42951: PPUSH
42952: PPUSH
// if not units then
42953: LD_VAR 0 1
42957: NOT
42958: IFFALSE 42962
// exit ;
42960: GO 43488
// result := UnitFilter ( units , [ f_ok ] ) ;
42962: LD_ADDR_VAR 0 3
42966: PUSH
42967: LD_VAR 0 1
42971: PPUSH
42972: LD_INT 50
42974: PUSH
42975: EMPTY
42976: LIST
42977: PPUSH
42978: CALL_OW 72
42982: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42983: LD_ADDR_VAR 0 8
42987: PUSH
42988: LD_VAR 0 1
42992: PUSH
42993: LD_INT 1
42995: ARRAY
42996: PPUSH
42997: CALL_OW 255
43001: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43002: LD_ADDR_VAR 0 10
43006: PUSH
43007: LD_INT 29
43009: PUSH
43010: LD_EXP 13
43014: PUSH
43015: LD_INT 49
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: LIST
43022: ST_TO_ADDR
// if not result then
43023: LD_VAR 0 3
43027: NOT
43028: IFFALSE 43032
// exit ;
43030: GO 43488
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43032: LD_ADDR_VAR 0 5
43036: PUSH
43037: LD_INT 81
43039: PUSH
43040: LD_VAR 0 8
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PPUSH
43049: CALL_OW 69
43053: ST_TO_ADDR
// for i in result do
43054: LD_ADDR_VAR 0 4
43058: PUSH
43059: LD_VAR 0 3
43063: PUSH
43064: FOR_IN
43065: IFFALSE 43486
// begin tag := GetTag ( i ) + 1 ;
43067: LD_ADDR_VAR 0 9
43071: PUSH
43072: LD_VAR 0 4
43076: PPUSH
43077: CALL_OW 110
43081: PUSH
43082: LD_INT 1
43084: PLUS
43085: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
43086: LD_ADDR_VAR 0 7
43090: PUSH
43091: LD_VAR 0 4
43095: PPUSH
43096: CALL_OW 250
43100: PPUSH
43101: LD_VAR 0 4
43105: PPUSH
43106: CALL_OW 251
43110: PPUSH
43111: LD_INT 6
43113: PPUSH
43114: CALL 42685 0 3
43118: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
43119: LD_VAR 0 4
43123: PPUSH
43124: CALL_OW 247
43128: PUSH
43129: LD_INT 2
43131: EQUAL
43132: PUSH
43133: LD_VAR 0 7
43137: AND
43138: PUSH
43139: LD_VAR 0 4
43143: PPUSH
43144: CALL_OW 264
43148: PUSH
43149: LD_VAR 0 10
43153: IN
43154: NOT
43155: AND
43156: IFFALSE 43195
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43158: LD_VAR 0 4
43162: PPUSH
43163: LD_VAR 0 7
43167: PUSH
43168: LD_INT 1
43170: ARRAY
43171: PUSH
43172: LD_INT 1
43174: ARRAY
43175: PPUSH
43176: LD_VAR 0 7
43180: PUSH
43181: LD_INT 1
43183: ARRAY
43184: PUSH
43185: LD_INT 2
43187: ARRAY
43188: PPUSH
43189: CALL_OW 116
43193: GO 43484
// if path > tag then
43195: LD_VAR 0 2
43199: PUSH
43200: LD_VAR 0 9
43204: GREATER
43205: IFFALSE 43413
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43207: LD_ADDR_VAR 0 6
43211: PUSH
43212: LD_VAR 0 5
43216: PPUSH
43217: LD_INT 91
43219: PUSH
43220: LD_VAR 0 4
43224: PUSH
43225: LD_INT 8
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: LIST
43232: PPUSH
43233: CALL_OW 72
43237: ST_TO_ADDR
// if nearEnemy then
43238: LD_VAR 0 6
43242: IFFALSE 43311
// begin if GetWeapon ( i ) = ru_time_lapser then
43244: LD_VAR 0 4
43248: PPUSH
43249: CALL_OW 264
43253: PUSH
43254: LD_INT 49
43256: EQUAL
43257: IFFALSE 43285
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43259: LD_VAR 0 4
43263: PPUSH
43264: LD_VAR 0 6
43268: PPUSH
43269: LD_VAR 0 4
43273: PPUSH
43274: CALL_OW 74
43278: PPUSH
43279: CALL_OW 112
43283: GO 43309
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43285: LD_VAR 0 4
43289: PPUSH
43290: LD_VAR 0 6
43294: PPUSH
43295: LD_VAR 0 4
43299: PPUSH
43300: CALL_OW 74
43304: PPUSH
43305: CALL_OW 115
// end else
43309: GO 43411
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43311: LD_VAR 0 4
43315: PPUSH
43316: LD_VAR 0 2
43320: PUSH
43321: LD_VAR 0 9
43325: ARRAY
43326: PUSH
43327: LD_INT 1
43329: ARRAY
43330: PPUSH
43331: LD_VAR 0 2
43335: PUSH
43336: LD_VAR 0 9
43340: ARRAY
43341: PUSH
43342: LD_INT 2
43344: ARRAY
43345: PPUSH
43346: CALL_OW 297
43350: PUSH
43351: LD_INT 6
43353: GREATER
43354: IFFALSE 43397
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43356: LD_VAR 0 4
43360: PPUSH
43361: LD_VAR 0 2
43365: PUSH
43366: LD_VAR 0 9
43370: ARRAY
43371: PUSH
43372: LD_INT 1
43374: ARRAY
43375: PPUSH
43376: LD_VAR 0 2
43380: PUSH
43381: LD_VAR 0 9
43385: ARRAY
43386: PUSH
43387: LD_INT 2
43389: ARRAY
43390: PPUSH
43391: CALL_OW 114
43395: GO 43411
// SetTag ( i , tag ) ;
43397: LD_VAR 0 4
43401: PPUSH
43402: LD_VAR 0 9
43406: PPUSH
43407: CALL_OW 109
// end else
43411: GO 43484
// if enemy then
43413: LD_VAR 0 5
43417: IFFALSE 43484
// begin if GetWeapon ( i ) = ru_time_lapser then
43419: LD_VAR 0 4
43423: PPUSH
43424: CALL_OW 264
43428: PUSH
43429: LD_INT 49
43431: EQUAL
43432: IFFALSE 43460
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43434: LD_VAR 0 4
43438: PPUSH
43439: LD_VAR 0 5
43443: PPUSH
43444: LD_VAR 0 4
43448: PPUSH
43449: CALL_OW 74
43453: PPUSH
43454: CALL_OW 112
43458: GO 43484
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43460: LD_VAR 0 4
43464: PPUSH
43465: LD_VAR 0 5
43469: PPUSH
43470: LD_VAR 0 4
43474: PPUSH
43475: CALL_OW 74
43479: PPUSH
43480: CALL_OW 115
// end ; end ;
43484: GO 43064
43486: POP
43487: POP
// end ;
43488: LD_VAR 0 3
43492: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43493: LD_INT 0
43495: PPUSH
43496: PPUSH
43497: PPUSH
// if not unit or IsInUnit ( unit ) then
43498: LD_VAR 0 1
43502: NOT
43503: PUSH
43504: LD_VAR 0 1
43508: PPUSH
43509: CALL_OW 310
43513: OR
43514: IFFALSE 43518
// exit ;
43516: GO 43609
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43518: LD_ADDR_VAR 0 4
43522: PUSH
43523: LD_VAR 0 1
43527: PPUSH
43528: CALL_OW 250
43532: PPUSH
43533: LD_VAR 0 2
43537: PPUSH
43538: LD_INT 1
43540: PPUSH
43541: CALL_OW 272
43545: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43546: LD_ADDR_VAR 0 5
43550: PUSH
43551: LD_VAR 0 1
43555: PPUSH
43556: CALL_OW 251
43560: PPUSH
43561: LD_VAR 0 2
43565: PPUSH
43566: LD_INT 1
43568: PPUSH
43569: CALL_OW 273
43573: ST_TO_ADDR
// if ValidHex ( x , y ) then
43574: LD_VAR 0 4
43578: PPUSH
43579: LD_VAR 0 5
43583: PPUSH
43584: CALL_OW 488
43588: IFFALSE 43609
// ComTurnXY ( unit , x , y ) ;
43590: LD_VAR 0 1
43594: PPUSH
43595: LD_VAR 0 4
43599: PPUSH
43600: LD_VAR 0 5
43604: PPUSH
43605: CALL_OW 118
// end ;
43609: LD_VAR 0 3
43613: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43614: LD_INT 0
43616: PPUSH
43617: PPUSH
// result := false ;
43618: LD_ADDR_VAR 0 3
43622: PUSH
43623: LD_INT 0
43625: ST_TO_ADDR
// if not units then
43626: LD_VAR 0 2
43630: NOT
43631: IFFALSE 43635
// exit ;
43633: GO 43680
// for i in units do
43635: LD_ADDR_VAR 0 4
43639: PUSH
43640: LD_VAR 0 2
43644: PUSH
43645: FOR_IN
43646: IFFALSE 43678
// if See ( side , i ) then
43648: LD_VAR 0 1
43652: PPUSH
43653: LD_VAR 0 4
43657: PPUSH
43658: CALL_OW 292
43662: IFFALSE 43676
// begin result := true ;
43664: LD_ADDR_VAR 0 3
43668: PUSH
43669: LD_INT 1
43671: ST_TO_ADDR
// exit ;
43672: POP
43673: POP
43674: GO 43680
// end ;
43676: GO 43645
43678: POP
43679: POP
// end ;
43680: LD_VAR 0 3
43684: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43685: LD_INT 0
43687: PPUSH
43688: PPUSH
43689: PPUSH
43690: PPUSH
// if not unit or not points then
43691: LD_VAR 0 1
43695: NOT
43696: PUSH
43697: LD_VAR 0 2
43701: NOT
43702: OR
43703: IFFALSE 43707
// exit ;
43705: GO 43797
// dist := 99999 ;
43707: LD_ADDR_VAR 0 5
43711: PUSH
43712: LD_INT 99999
43714: ST_TO_ADDR
// for i in points do
43715: LD_ADDR_VAR 0 4
43719: PUSH
43720: LD_VAR 0 2
43724: PUSH
43725: FOR_IN
43726: IFFALSE 43795
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43728: LD_ADDR_VAR 0 6
43732: PUSH
43733: LD_VAR 0 1
43737: PPUSH
43738: LD_VAR 0 4
43742: PUSH
43743: LD_INT 1
43745: ARRAY
43746: PPUSH
43747: LD_VAR 0 4
43751: PUSH
43752: LD_INT 2
43754: ARRAY
43755: PPUSH
43756: CALL_OW 297
43760: ST_TO_ADDR
// if tmpDist < dist then
43761: LD_VAR 0 6
43765: PUSH
43766: LD_VAR 0 5
43770: LESS
43771: IFFALSE 43793
// begin result := i ;
43773: LD_ADDR_VAR 0 3
43777: PUSH
43778: LD_VAR 0 4
43782: ST_TO_ADDR
// dist := tmpDist ;
43783: LD_ADDR_VAR 0 5
43787: PUSH
43788: LD_VAR 0 6
43792: ST_TO_ADDR
// end ; end ;
43793: GO 43725
43795: POP
43796: POP
// end ;
43797: LD_VAR 0 3
43801: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43802: LD_INT 0
43804: PPUSH
// uc_side := side ;
43805: LD_ADDR_OWVAR 20
43809: PUSH
43810: LD_VAR 0 1
43814: ST_TO_ADDR
// uc_nation := 3 ;
43815: LD_ADDR_OWVAR 21
43819: PUSH
43820: LD_INT 3
43822: ST_TO_ADDR
// vc_chassis := 25 ;
43823: LD_ADDR_OWVAR 37
43827: PUSH
43828: LD_INT 25
43830: ST_TO_ADDR
// vc_engine := engine_siberite ;
43831: LD_ADDR_OWVAR 39
43835: PUSH
43836: LD_INT 3
43838: ST_TO_ADDR
// vc_control := control_computer ;
43839: LD_ADDR_OWVAR 38
43843: PUSH
43844: LD_INT 3
43846: ST_TO_ADDR
// vc_weapon := 59 ;
43847: LD_ADDR_OWVAR 40
43851: PUSH
43852: LD_INT 59
43854: ST_TO_ADDR
// result := CreateVehicle ;
43855: LD_ADDR_VAR 0 5
43859: PUSH
43860: CALL_OW 45
43864: ST_TO_ADDR
// SetDir ( result , d ) ;
43865: LD_VAR 0 5
43869: PPUSH
43870: LD_VAR 0 4
43874: PPUSH
43875: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43879: LD_VAR 0 5
43883: PPUSH
43884: LD_VAR 0 2
43888: PPUSH
43889: LD_VAR 0 3
43893: PPUSH
43894: LD_INT 0
43896: PPUSH
43897: CALL_OW 48
// end ;
43901: LD_VAR 0 5
43905: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
43906: LD_INT 0
43908: PPUSH
43909: PPUSH
43910: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43911: LD_ADDR_VAR 0 2
43915: PUSH
43916: LD_INT 0
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43934: LD_VAR 0 1
43938: NOT
43939: PUSH
43940: LD_VAR 0 1
43944: PPUSH
43945: CALL_OW 264
43949: PUSH
43950: LD_INT 12
43952: PUSH
43953: LD_INT 51
43955: PUSH
43956: LD_INT 32
43958: PUSH
43959: LD_EXP 10
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: IN
43970: NOT
43971: OR
43972: IFFALSE 43976
// exit ;
43974: GO 44074
// for i := 1 to 3 do
43976: LD_ADDR_VAR 0 3
43980: PUSH
43981: DOUBLE
43982: LD_INT 1
43984: DEC
43985: ST_TO_ADDR
43986: LD_INT 3
43988: PUSH
43989: FOR_TO
43990: IFFALSE 44072
// begin tmp := GetCargo ( cargo , i ) ;
43992: LD_ADDR_VAR 0 4
43996: PUSH
43997: LD_VAR 0 1
44001: PPUSH
44002: LD_VAR 0 3
44006: PPUSH
44007: CALL_OW 289
44011: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44012: LD_ADDR_VAR 0 2
44016: PUSH
44017: LD_VAR 0 2
44021: PPUSH
44022: LD_VAR 0 3
44026: PPUSH
44027: LD_VAR 0 4
44031: PPUSH
44032: CALL_OW 1
44036: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44037: LD_ADDR_VAR 0 2
44041: PUSH
44042: LD_VAR 0 2
44046: PPUSH
44047: LD_INT 4
44049: PPUSH
44050: LD_VAR 0 2
44054: PUSH
44055: LD_INT 4
44057: ARRAY
44058: PUSH
44059: LD_VAR 0 4
44063: PLUS
44064: PPUSH
44065: CALL_OW 1
44069: ST_TO_ADDR
// end ;
44070: GO 43989
44072: POP
44073: POP
// end ;
44074: LD_VAR 0 2
44078: RET
// export function Length ( array ) ; begin
44079: LD_INT 0
44081: PPUSH
// result := array + 0 ;
44082: LD_ADDR_VAR 0 2
44086: PUSH
44087: LD_VAR 0 1
44091: PUSH
44092: LD_INT 0
44094: PLUS
44095: ST_TO_ADDR
// end ;
44096: LD_VAR 0 2
44100: RET
// export function PrepareArray ( array ) ; begin
44101: LD_INT 0
44103: PPUSH
// result := array diff 0 ;
44104: LD_ADDR_VAR 0 2
44108: PUSH
44109: LD_VAR 0 1
44113: PUSH
44114: LD_INT 0
44116: DIFF
44117: ST_TO_ADDR
// if not result [ 1 ] then
44118: LD_VAR 0 2
44122: PUSH
44123: LD_INT 1
44125: ARRAY
44126: NOT
44127: IFFALSE 44147
// result := Delete ( result , 1 ) ;
44129: LD_ADDR_VAR 0 2
44133: PUSH
44134: LD_VAR 0 2
44138: PPUSH
44139: LD_INT 1
44141: PPUSH
44142: CALL_OW 3
44146: ST_TO_ADDR
// end ; end_of_file
44147: LD_VAR 0 2
44151: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
44152: LD_INT 0
44154: PPUSH
44155: PPUSH
44156: PPUSH
44157: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
44158: LD_VAR 0 1
44162: PPUSH
44163: CALL_OW 264
44167: PUSH
44168: LD_EXP 13
44172: EQUAL
44173: IFFALSE 44245
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
44175: LD_INT 68
44177: PPUSH
44178: LD_VAR 0 1
44182: PPUSH
44183: CALL_OW 255
44187: PPUSH
44188: CALL_OW 321
44192: PUSH
44193: LD_INT 2
44195: EQUAL
44196: IFFALSE 44208
// eff := 70 else
44198: LD_ADDR_VAR 0 4
44202: PUSH
44203: LD_INT 70
44205: ST_TO_ADDR
44206: GO 44216
// eff := 30 ;
44208: LD_ADDR_VAR 0 4
44212: PUSH
44213: LD_INT 30
44215: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
44216: LD_VAR 0 1
44220: PPUSH
44221: CALL_OW 250
44225: PPUSH
44226: LD_VAR 0 1
44230: PPUSH
44231: CALL_OW 251
44235: PPUSH
44236: LD_VAR 0 4
44240: PPUSH
44241: CALL_OW 495
// end ; end ;
44245: LD_VAR 0 2
44249: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
44250: LD_INT 0
44252: PPUSH
// end ;
44253: LD_VAR 0 4
44257: RET
// export function SOS_Command ( cmd ) ; begin
44258: LD_INT 0
44260: PPUSH
// end ;
44261: LD_VAR 0 2
44265: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
44266: LD_INT 0
44268: PPUSH
// end ;
44269: LD_VAR 0 6
44273: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
44274: LD_INT 0
44276: PPUSH
44277: PPUSH
// if not vehicle or not factory then
44278: LD_VAR 0 1
44282: NOT
44283: PUSH
44284: LD_VAR 0 2
44288: NOT
44289: OR
44290: IFFALSE 44294
// exit ;
44292: GO 44525
// if factoryWaypoints >= factory then
44294: LD_EXP 95
44298: PUSH
44299: LD_VAR 0 2
44303: GREATEREQUAL
44304: IFFALSE 44525
// if factoryWaypoints [ factory ] then
44306: LD_EXP 95
44310: PUSH
44311: LD_VAR 0 2
44315: ARRAY
44316: IFFALSE 44525
// begin if GetControl ( vehicle ) = control_manual then
44318: LD_VAR 0 1
44322: PPUSH
44323: CALL_OW 263
44327: PUSH
44328: LD_INT 1
44330: EQUAL
44331: IFFALSE 44412
// begin driver := IsDrivenBy ( vehicle ) ;
44333: LD_ADDR_VAR 0 4
44337: PUSH
44338: LD_VAR 0 1
44342: PPUSH
44343: CALL_OW 311
44347: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
44348: LD_VAR 0 4
44352: PPUSH
44353: LD_EXP 95
44357: PUSH
44358: LD_VAR 0 2
44362: ARRAY
44363: PUSH
44364: LD_INT 3
44366: ARRAY
44367: PPUSH
44368: LD_EXP 95
44372: PUSH
44373: LD_VAR 0 2
44377: ARRAY
44378: PUSH
44379: LD_INT 4
44381: ARRAY
44382: PPUSH
44383: CALL_OW 171
// AddComExitVehicle ( driver ) ;
44387: LD_VAR 0 4
44391: PPUSH
44392: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
44396: LD_VAR 0 4
44400: PPUSH
44401: LD_VAR 0 2
44405: PPUSH
44406: CALL_OW 180
// end else
44410: GO 44525
// if GetControl ( vehicle ) = control_remote then
44412: LD_VAR 0 1
44416: PPUSH
44417: CALL_OW 263
44421: PUSH
44422: LD_INT 2
44424: EQUAL
44425: IFFALSE 44486
// begin wait ( 0 0$2 ) ;
44427: LD_INT 70
44429: PPUSH
44430: CALL_OW 67
// if Connect ( vehicle ) then
44434: LD_VAR 0 1
44438: PPUSH
44439: CALL 11046 0 1
44443: IFFALSE 44484
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
44445: LD_VAR 0 1
44449: PPUSH
44450: LD_EXP 95
44454: PUSH
44455: LD_VAR 0 2
44459: ARRAY
44460: PUSH
44461: LD_INT 3
44463: ARRAY
44464: PPUSH
44465: LD_EXP 95
44469: PUSH
44470: LD_VAR 0 2
44474: ARRAY
44475: PUSH
44476: LD_INT 4
44478: ARRAY
44479: PPUSH
44480: CALL_OW 171
// end else
44484: GO 44525
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
44486: LD_VAR 0 1
44490: PPUSH
44491: LD_EXP 95
44495: PUSH
44496: LD_VAR 0 2
44500: ARRAY
44501: PUSH
44502: LD_INT 3
44504: ARRAY
44505: PPUSH
44506: LD_EXP 95
44510: PUSH
44511: LD_VAR 0 2
44515: ARRAY
44516: PUSH
44517: LD_INT 4
44519: ARRAY
44520: PPUSH
44521: CALL_OW 171
// end ; end ;
44525: LD_VAR 0 3
44529: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
44530: LD_INT 0
44532: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
44533: LD_VAR 0 1
44537: PUSH
44538: LD_INT 250
44540: EQUAL
44541: PUSH
44542: LD_VAR 0 2
44546: PPUSH
44547: CALL_OW 264
44551: PUSH
44552: LD_EXP 16
44556: EQUAL
44557: AND
44558: IFFALSE 44579
// MinerPlaceMine ( unit , x , y ) ;
44560: LD_VAR 0 2
44564: PPUSH
44565: LD_VAR 0 4
44569: PPUSH
44570: LD_VAR 0 5
44574: PPUSH
44575: CALL 46978 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
44579: LD_VAR 0 1
44583: PUSH
44584: LD_INT 251
44586: EQUAL
44587: PUSH
44588: LD_VAR 0 2
44592: PPUSH
44593: CALL_OW 264
44597: PUSH
44598: LD_EXP 16
44602: EQUAL
44603: AND
44604: IFFALSE 44625
// MinerDetonateMine ( unit , x , y ) ;
44606: LD_VAR 0 2
44610: PPUSH
44611: LD_VAR 0 4
44615: PPUSH
44616: LD_VAR 0 5
44620: PPUSH
44621: CALL 47255 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
44625: LD_VAR 0 1
44629: PUSH
44630: LD_INT 252
44632: EQUAL
44633: PUSH
44634: LD_VAR 0 2
44638: PPUSH
44639: CALL_OW 264
44643: PUSH
44644: LD_EXP 16
44648: EQUAL
44649: AND
44650: IFFALSE 44671
// MinerCreateMinefield ( unit , x , y ) ;
44652: LD_VAR 0 2
44656: PPUSH
44657: LD_VAR 0 4
44661: PPUSH
44662: LD_VAR 0 5
44666: PPUSH
44667: CALL 47672 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
44671: LD_VAR 0 1
44675: PUSH
44676: LD_INT 253
44678: EQUAL
44679: PUSH
44680: LD_VAR 0 2
44684: PPUSH
44685: CALL_OW 257
44689: PUSH
44690: LD_INT 5
44692: EQUAL
44693: AND
44694: IFFALSE 44715
// ComBinocular ( unit , x , y ) ;
44696: LD_VAR 0 2
44700: PPUSH
44701: LD_VAR 0 4
44705: PPUSH
44706: LD_VAR 0 5
44710: PPUSH
44711: CALL 48043 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
44715: LD_VAR 0 1
44719: PUSH
44720: LD_INT 254
44722: EQUAL
44723: PUSH
44724: LD_VAR 0 2
44728: PPUSH
44729: CALL_OW 264
44733: PUSH
44734: LD_EXP 11
44738: EQUAL
44739: AND
44740: PUSH
44741: LD_VAR 0 3
44745: PPUSH
44746: CALL_OW 263
44750: PUSH
44751: LD_INT 3
44753: EQUAL
44754: AND
44755: IFFALSE 44771
// HackDestroyVehicle ( unit , selectedUnit ) ;
44757: LD_VAR 0 2
44761: PPUSH
44762: LD_VAR 0 3
44766: PPUSH
44767: CALL 46338 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
44771: LD_VAR 0 1
44775: PUSH
44776: LD_INT 255
44778: EQUAL
44779: PUSH
44780: LD_VAR 0 2
44784: PPUSH
44785: CALL_OW 264
44789: PUSH
44790: LD_INT 14
44792: PUSH
44793: LD_INT 53
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: IN
44800: AND
44801: PUSH
44802: LD_VAR 0 4
44806: PPUSH
44807: LD_VAR 0 5
44811: PPUSH
44812: CALL_OW 488
44816: AND
44817: IFFALSE 44841
// CutTreeXYR ( unit , x , y , 12 ) ;
44819: LD_VAR 0 2
44823: PPUSH
44824: LD_VAR 0 4
44828: PPUSH
44829: LD_VAR 0 5
44833: PPUSH
44834: LD_INT 12
44836: PPUSH
44837: CALL 44904 0 4
// if cmd = 256 then
44841: LD_VAR 0 1
44845: PUSH
44846: LD_INT 256
44848: EQUAL
44849: IFFALSE 44870
// SetFactoryWaypoint ( unit , x , y ) ;
44851: LD_VAR 0 2
44855: PPUSH
44856: LD_VAR 0 4
44860: PPUSH
44861: LD_VAR 0 5
44865: PPUSH
44866: CALL 62801 0 3
// if cmd = 257 then
44870: LD_VAR 0 1
44874: PUSH
44875: LD_INT 257
44877: EQUAL
44878: IFFALSE 44899
// SetWarehouseGatheringPoint ( unit , x , y ) ;
44880: LD_VAR 0 2
44884: PPUSH
44885: LD_VAR 0 4
44889: PPUSH
44890: LD_VAR 0 5
44894: PPUSH
44895: CALL 63163 0 3
// end ;
44899: LD_VAR 0 6
44903: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
44904: LD_INT 0
44906: PPUSH
44907: PPUSH
44908: PPUSH
44909: PPUSH
44910: PPUSH
44911: PPUSH
44912: PPUSH
44913: PPUSH
44914: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
44915: LD_VAR 0 1
44919: NOT
44920: PUSH
44921: LD_VAR 0 2
44925: PPUSH
44926: LD_VAR 0 3
44930: PPUSH
44931: CALL_OW 488
44935: NOT
44936: OR
44937: PUSH
44938: LD_VAR 0 4
44942: NOT
44943: OR
44944: IFFALSE 44948
// exit ;
44946: GO 45288
// list := [ ] ;
44948: LD_ADDR_VAR 0 13
44952: PUSH
44953: EMPTY
44954: ST_TO_ADDR
// if x - r < 0 then
44955: LD_VAR 0 2
44959: PUSH
44960: LD_VAR 0 4
44964: MINUS
44965: PUSH
44966: LD_INT 0
44968: LESS
44969: IFFALSE 44981
// min_x := 0 else
44971: LD_ADDR_VAR 0 7
44975: PUSH
44976: LD_INT 0
44978: ST_TO_ADDR
44979: GO 44997
// min_x := x - r ;
44981: LD_ADDR_VAR 0 7
44985: PUSH
44986: LD_VAR 0 2
44990: PUSH
44991: LD_VAR 0 4
44995: MINUS
44996: ST_TO_ADDR
// if y - r < 0 then
44997: LD_VAR 0 3
45001: PUSH
45002: LD_VAR 0 4
45006: MINUS
45007: PUSH
45008: LD_INT 0
45010: LESS
45011: IFFALSE 45023
// min_y := 0 else
45013: LD_ADDR_VAR 0 8
45017: PUSH
45018: LD_INT 0
45020: ST_TO_ADDR
45021: GO 45039
// min_y := y - r ;
45023: LD_ADDR_VAR 0 8
45027: PUSH
45028: LD_VAR 0 3
45032: PUSH
45033: LD_VAR 0 4
45037: MINUS
45038: ST_TO_ADDR
// max_x := x + r ;
45039: LD_ADDR_VAR 0 9
45043: PUSH
45044: LD_VAR 0 2
45048: PUSH
45049: LD_VAR 0 4
45053: PLUS
45054: ST_TO_ADDR
// max_y := y + r ;
45055: LD_ADDR_VAR 0 10
45059: PUSH
45060: LD_VAR 0 3
45064: PUSH
45065: LD_VAR 0 4
45069: PLUS
45070: ST_TO_ADDR
// for _x = min_x to max_x do
45071: LD_ADDR_VAR 0 11
45075: PUSH
45076: DOUBLE
45077: LD_VAR 0 7
45081: DEC
45082: ST_TO_ADDR
45083: LD_VAR 0 9
45087: PUSH
45088: FOR_TO
45089: IFFALSE 45206
// for _y = min_y to max_y do
45091: LD_ADDR_VAR 0 12
45095: PUSH
45096: DOUBLE
45097: LD_VAR 0 8
45101: DEC
45102: ST_TO_ADDR
45103: LD_VAR 0 10
45107: PUSH
45108: FOR_TO
45109: IFFALSE 45202
// begin if not ValidHex ( _x , _y ) then
45111: LD_VAR 0 11
45115: PPUSH
45116: LD_VAR 0 12
45120: PPUSH
45121: CALL_OW 488
45125: NOT
45126: IFFALSE 45130
// continue ;
45128: GO 45108
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
45130: LD_VAR 0 11
45134: PPUSH
45135: LD_VAR 0 12
45139: PPUSH
45140: CALL_OW 351
45144: PUSH
45145: LD_VAR 0 11
45149: PPUSH
45150: LD_VAR 0 12
45154: PPUSH
45155: CALL_OW 554
45159: AND
45160: IFFALSE 45200
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
45162: LD_ADDR_VAR 0 13
45166: PUSH
45167: LD_VAR 0 13
45171: PPUSH
45172: LD_VAR 0 13
45176: PUSH
45177: LD_INT 1
45179: PLUS
45180: PPUSH
45181: LD_VAR 0 11
45185: PUSH
45186: LD_VAR 0 12
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PPUSH
45195: CALL_OW 2
45199: ST_TO_ADDR
// end ;
45200: GO 45108
45202: POP
45203: POP
45204: GO 45088
45206: POP
45207: POP
// if not list then
45208: LD_VAR 0 13
45212: NOT
45213: IFFALSE 45217
// exit ;
45215: GO 45288
// for i in list do
45217: LD_ADDR_VAR 0 6
45221: PUSH
45222: LD_VAR 0 13
45226: PUSH
45227: FOR_IN
45228: IFFALSE 45286
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
45230: LD_VAR 0 1
45234: PPUSH
45235: LD_STRING M
45237: PUSH
45238: LD_VAR 0 6
45242: PUSH
45243: LD_INT 1
45245: ARRAY
45246: PUSH
45247: LD_VAR 0 6
45251: PUSH
45252: LD_INT 2
45254: ARRAY
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: LD_INT 0
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: LD_INT 0
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: PUSH
45277: EMPTY
45278: LIST
45279: PPUSH
45280: CALL_OW 447
45284: GO 45227
45286: POP
45287: POP
// end ;
45288: LD_VAR 0 5
45292: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
45293: LD_EXP 27
45297: NOT
45298: IFFALSE 45348
45300: GO 45302
45302: DISABLE
// begin initHack := true ;
45303: LD_ADDR_EXP 27
45307: PUSH
45308: LD_INT 1
45310: ST_TO_ADDR
// hackTanks := [ ] ;
45311: LD_ADDR_EXP 28
45315: PUSH
45316: EMPTY
45317: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
45318: LD_ADDR_EXP 29
45322: PUSH
45323: EMPTY
45324: ST_TO_ADDR
// hackLimit := 3 ;
45325: LD_ADDR_EXP 30
45329: PUSH
45330: LD_INT 3
45332: ST_TO_ADDR
// hackDist := 12 ;
45333: LD_ADDR_EXP 31
45337: PUSH
45338: LD_INT 12
45340: ST_TO_ADDR
// hackCounter := [ ] ;
45341: LD_ADDR_EXP 32
45345: PUSH
45346: EMPTY
45347: ST_TO_ADDR
// end ;
45348: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
45349: LD_EXP 27
45353: PUSH
45354: LD_INT 34
45356: PUSH
45357: LD_EXP 11
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PPUSH
45366: CALL_OW 69
45370: AND
45371: IFFALSE 45626
45373: GO 45375
45375: DISABLE
45376: LD_INT 0
45378: PPUSH
45379: PPUSH
// begin enable ;
45380: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
45381: LD_ADDR_VAR 0 1
45385: PUSH
45386: LD_INT 34
45388: PUSH
45389: LD_EXP 11
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PPUSH
45398: CALL_OW 69
45402: PUSH
45403: FOR_IN
45404: IFFALSE 45624
// begin if not i in hackTanks then
45406: LD_VAR 0 1
45410: PUSH
45411: LD_EXP 28
45415: IN
45416: NOT
45417: IFFALSE 45500
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
45419: LD_ADDR_EXP 28
45423: PUSH
45424: LD_EXP 28
45428: PPUSH
45429: LD_EXP 28
45433: PUSH
45434: LD_INT 1
45436: PLUS
45437: PPUSH
45438: LD_VAR 0 1
45442: PPUSH
45443: CALL_OW 1
45447: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
45448: LD_ADDR_EXP 29
45452: PUSH
45453: LD_EXP 29
45457: PPUSH
45458: LD_EXP 29
45462: PUSH
45463: LD_INT 1
45465: PLUS
45466: PPUSH
45467: EMPTY
45468: PPUSH
45469: CALL_OW 1
45473: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
45474: LD_ADDR_EXP 32
45478: PUSH
45479: LD_EXP 32
45483: PPUSH
45484: LD_EXP 32
45488: PUSH
45489: LD_INT 1
45491: PLUS
45492: PPUSH
45493: EMPTY
45494: PPUSH
45495: CALL_OW 1
45499: ST_TO_ADDR
// end ; if not IsOk ( i ) then
45500: LD_VAR 0 1
45504: PPUSH
45505: CALL_OW 302
45509: NOT
45510: IFFALSE 45523
// begin HackUnlinkAll ( i ) ;
45512: LD_VAR 0 1
45516: PPUSH
45517: CALL 45629 0 1
// continue ;
45521: GO 45403
// end ; HackCheckCapturedStatus ( i ) ;
45523: LD_VAR 0 1
45527: PPUSH
45528: CALL 46072 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
45532: LD_ADDR_VAR 0 2
45536: PUSH
45537: LD_INT 81
45539: PUSH
45540: LD_VAR 0 1
45544: PPUSH
45545: CALL_OW 255
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 33
45556: PUSH
45557: LD_INT 3
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 91
45566: PUSH
45567: LD_VAR 0 1
45571: PUSH
45572: LD_EXP 31
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 50
45584: PUSH
45585: EMPTY
45586: LIST
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: PPUSH
45594: CALL_OW 69
45598: ST_TO_ADDR
// if not tmp then
45599: LD_VAR 0 2
45603: NOT
45604: IFFALSE 45608
// continue ;
45606: GO 45403
// HackLink ( i , tmp ) ;
45608: LD_VAR 0 1
45612: PPUSH
45613: LD_VAR 0 2
45617: PPUSH
45618: CALL 45765 0 2
// end ;
45622: GO 45403
45624: POP
45625: POP
// end ;
45626: PPOPN 2
45628: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
45629: LD_INT 0
45631: PPUSH
45632: PPUSH
45633: PPUSH
// if not hack in hackTanks then
45634: LD_VAR 0 1
45638: PUSH
45639: LD_EXP 28
45643: IN
45644: NOT
45645: IFFALSE 45649
// exit ;
45647: GO 45760
// index := GetElementIndex ( hackTanks , hack ) ;
45649: LD_ADDR_VAR 0 4
45653: PUSH
45654: LD_EXP 28
45658: PPUSH
45659: LD_VAR 0 1
45663: PPUSH
45664: CALL 7860 0 2
45668: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
45669: LD_EXP 29
45673: PUSH
45674: LD_VAR 0 4
45678: ARRAY
45679: IFFALSE 45760
// begin for i in hackTanksCaptured [ index ] do
45681: LD_ADDR_VAR 0 3
45685: PUSH
45686: LD_EXP 29
45690: PUSH
45691: LD_VAR 0 4
45695: ARRAY
45696: PUSH
45697: FOR_IN
45698: IFFALSE 45724
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
45700: LD_VAR 0 3
45704: PUSH
45705: LD_INT 1
45707: ARRAY
45708: PPUSH
45709: LD_VAR 0 3
45713: PUSH
45714: LD_INT 2
45716: ARRAY
45717: PPUSH
45718: CALL_OW 235
45722: GO 45697
45724: POP
45725: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
45726: LD_ADDR_EXP 29
45730: PUSH
45731: LD_EXP 29
45735: PPUSH
45736: LD_VAR 0 4
45740: PPUSH
45741: EMPTY
45742: PPUSH
45743: CALL_OW 1
45747: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
45748: LD_VAR 0 1
45752: PPUSH
45753: LD_INT 0
45755: PPUSH
45756: CALL_OW 505
// end ; end ;
45760: LD_VAR 0 2
45764: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
45765: LD_INT 0
45767: PPUSH
45768: PPUSH
45769: PPUSH
// if not hack in hackTanks or not vehicles then
45770: LD_VAR 0 1
45774: PUSH
45775: LD_EXP 28
45779: IN
45780: NOT
45781: PUSH
45782: LD_VAR 0 2
45786: NOT
45787: OR
45788: IFFALSE 45792
// exit ;
45790: GO 46067
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
45792: LD_ADDR_VAR 0 2
45796: PUSH
45797: LD_VAR 0 1
45801: PPUSH
45802: LD_VAR 0 2
45806: PPUSH
45807: LD_INT 1
45809: PPUSH
45810: LD_INT 1
45812: PPUSH
45813: CALL 8510 0 4
45817: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
45818: LD_ADDR_VAR 0 5
45822: PUSH
45823: LD_EXP 28
45827: PPUSH
45828: LD_VAR 0 1
45832: PPUSH
45833: CALL 7860 0 2
45837: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
45838: LD_EXP 29
45842: PUSH
45843: LD_VAR 0 5
45847: ARRAY
45848: PUSH
45849: LD_EXP 30
45853: LESS
45854: IFFALSE 46043
// begin for i := 1 to vehicles do
45856: LD_ADDR_VAR 0 4
45860: PUSH
45861: DOUBLE
45862: LD_INT 1
45864: DEC
45865: ST_TO_ADDR
45866: LD_VAR 0 2
45870: PUSH
45871: FOR_TO
45872: IFFALSE 46041
// begin if hackTanksCaptured [ index ] = hackLimit then
45874: LD_EXP 29
45878: PUSH
45879: LD_VAR 0 5
45883: ARRAY
45884: PUSH
45885: LD_EXP 30
45889: EQUAL
45890: IFFALSE 45894
// break ;
45892: GO 46041
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
45894: LD_ADDR_EXP 32
45898: PUSH
45899: LD_EXP 32
45903: PPUSH
45904: LD_VAR 0 5
45908: PPUSH
45909: LD_EXP 32
45913: PUSH
45914: LD_VAR 0 5
45918: ARRAY
45919: PUSH
45920: LD_INT 1
45922: PLUS
45923: PPUSH
45924: CALL_OW 1
45928: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
45929: LD_ADDR_EXP 29
45933: PUSH
45934: LD_EXP 29
45938: PPUSH
45939: LD_VAR 0 5
45943: PUSH
45944: LD_EXP 29
45948: PUSH
45949: LD_VAR 0 5
45953: ARRAY
45954: PUSH
45955: LD_INT 1
45957: PLUS
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PPUSH
45963: LD_VAR 0 2
45967: PUSH
45968: LD_VAR 0 4
45972: ARRAY
45973: PUSH
45974: LD_VAR 0 2
45978: PUSH
45979: LD_VAR 0 4
45983: ARRAY
45984: PPUSH
45985: CALL_OW 255
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PPUSH
45994: CALL 8075 0 3
45998: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
45999: LD_VAR 0 2
46003: PUSH
46004: LD_VAR 0 4
46008: ARRAY
46009: PPUSH
46010: LD_VAR 0 1
46014: PPUSH
46015: CALL_OW 255
46019: PPUSH
46020: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
46024: LD_VAR 0 2
46028: PUSH
46029: LD_VAR 0 4
46033: ARRAY
46034: PPUSH
46035: CALL_OW 141
// end ;
46039: GO 45871
46041: POP
46042: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
46043: LD_VAR 0 1
46047: PPUSH
46048: LD_EXP 29
46052: PUSH
46053: LD_VAR 0 5
46057: ARRAY
46058: PUSH
46059: LD_INT 0
46061: PLUS
46062: PPUSH
46063: CALL_OW 505
// end ;
46067: LD_VAR 0 3
46071: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
46072: LD_INT 0
46074: PPUSH
46075: PPUSH
46076: PPUSH
46077: PPUSH
// if not hack in hackTanks then
46078: LD_VAR 0 1
46082: PUSH
46083: LD_EXP 28
46087: IN
46088: NOT
46089: IFFALSE 46093
// exit ;
46091: GO 46333
// index := GetElementIndex ( hackTanks , hack ) ;
46093: LD_ADDR_VAR 0 4
46097: PUSH
46098: LD_EXP 28
46102: PPUSH
46103: LD_VAR 0 1
46107: PPUSH
46108: CALL 7860 0 2
46112: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
46113: LD_ADDR_VAR 0 3
46117: PUSH
46118: DOUBLE
46119: LD_EXP 29
46123: PUSH
46124: LD_VAR 0 4
46128: ARRAY
46129: INC
46130: ST_TO_ADDR
46131: LD_INT 1
46133: PUSH
46134: FOR_DOWNTO
46135: IFFALSE 46307
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
46137: LD_ADDR_VAR 0 5
46141: PUSH
46142: LD_EXP 29
46146: PUSH
46147: LD_VAR 0 4
46151: ARRAY
46152: PUSH
46153: LD_VAR 0 3
46157: ARRAY
46158: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
46159: LD_VAR 0 5
46163: PUSH
46164: LD_INT 1
46166: ARRAY
46167: PPUSH
46168: CALL_OW 302
46172: NOT
46173: PUSH
46174: LD_VAR 0 5
46178: PUSH
46179: LD_INT 1
46181: ARRAY
46182: PPUSH
46183: CALL_OW 255
46187: PUSH
46188: LD_VAR 0 1
46192: PPUSH
46193: CALL_OW 255
46197: NONEQUAL
46198: OR
46199: IFFALSE 46305
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
46201: LD_VAR 0 5
46205: PUSH
46206: LD_INT 1
46208: ARRAY
46209: PPUSH
46210: CALL_OW 305
46214: PUSH
46215: LD_VAR 0 5
46219: PUSH
46220: LD_INT 1
46222: ARRAY
46223: PPUSH
46224: CALL_OW 255
46228: PUSH
46229: LD_VAR 0 1
46233: PPUSH
46234: CALL_OW 255
46238: EQUAL
46239: AND
46240: IFFALSE 46264
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
46242: LD_VAR 0 5
46246: PUSH
46247: LD_INT 1
46249: ARRAY
46250: PPUSH
46251: LD_VAR 0 5
46255: PUSH
46256: LD_INT 2
46258: ARRAY
46259: PPUSH
46260: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
46264: LD_ADDR_EXP 29
46268: PUSH
46269: LD_EXP 29
46273: PPUSH
46274: LD_VAR 0 4
46278: PPUSH
46279: LD_EXP 29
46283: PUSH
46284: LD_VAR 0 4
46288: ARRAY
46289: PPUSH
46290: LD_VAR 0 3
46294: PPUSH
46295: CALL_OW 3
46299: PPUSH
46300: CALL_OW 1
46304: ST_TO_ADDR
// end ; end ;
46305: GO 46134
46307: POP
46308: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
46309: LD_VAR 0 1
46313: PPUSH
46314: LD_EXP 29
46318: PUSH
46319: LD_VAR 0 4
46323: ARRAY
46324: PUSH
46325: LD_INT 0
46327: PLUS
46328: PPUSH
46329: CALL_OW 505
// end ;
46333: LD_VAR 0 2
46337: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
46338: LD_INT 0
46340: PPUSH
46341: PPUSH
46342: PPUSH
46343: PPUSH
// if not hack in hackTanks then
46344: LD_VAR 0 1
46348: PUSH
46349: LD_EXP 28
46353: IN
46354: NOT
46355: IFFALSE 46359
// exit ;
46357: GO 46444
// index := GetElementIndex ( hackTanks , hack ) ;
46359: LD_ADDR_VAR 0 5
46363: PUSH
46364: LD_EXP 28
46368: PPUSH
46369: LD_VAR 0 1
46373: PPUSH
46374: CALL 7860 0 2
46378: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
46379: LD_ADDR_VAR 0 4
46383: PUSH
46384: DOUBLE
46385: LD_INT 1
46387: DEC
46388: ST_TO_ADDR
46389: LD_EXP 29
46393: PUSH
46394: LD_VAR 0 5
46398: ARRAY
46399: PUSH
46400: FOR_TO
46401: IFFALSE 46442
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
46403: LD_EXP 29
46407: PUSH
46408: LD_VAR 0 5
46412: ARRAY
46413: PUSH
46414: LD_VAR 0 4
46418: ARRAY
46419: PUSH
46420: LD_INT 1
46422: ARRAY
46423: PUSH
46424: LD_VAR 0 2
46428: EQUAL
46429: IFFALSE 46440
// KillUnit ( vehicle ) ;
46431: LD_VAR 0 2
46435: PPUSH
46436: CALL_OW 66
46440: GO 46400
46442: POP
46443: POP
// end ;
46444: LD_VAR 0 3
46448: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
46449: LD_EXP 33
46453: NOT
46454: IFFALSE 46489
46456: GO 46458
46458: DISABLE
// begin initMiner := true ;
46459: LD_ADDR_EXP 33
46463: PUSH
46464: LD_INT 1
46466: ST_TO_ADDR
// minersList := [ ] ;
46467: LD_ADDR_EXP 34
46471: PUSH
46472: EMPTY
46473: ST_TO_ADDR
// minerMinesList := [ ] ;
46474: LD_ADDR_EXP 35
46478: PUSH
46479: EMPTY
46480: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
46481: LD_ADDR_EXP 36
46485: PUSH
46486: LD_INT 5
46488: ST_TO_ADDR
// end ;
46489: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
46490: LD_EXP 33
46494: PUSH
46495: LD_INT 34
46497: PUSH
46498: LD_EXP 16
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PPUSH
46507: CALL_OW 69
46511: AND
46512: IFFALSE 46975
46514: GO 46516
46516: DISABLE
46517: LD_INT 0
46519: PPUSH
46520: PPUSH
46521: PPUSH
46522: PPUSH
// begin enable ;
46523: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
46524: LD_ADDR_VAR 0 1
46528: PUSH
46529: LD_INT 34
46531: PUSH
46532: LD_EXP 16
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PPUSH
46541: CALL_OW 69
46545: PUSH
46546: FOR_IN
46547: IFFALSE 46619
// begin if not i in minersList then
46549: LD_VAR 0 1
46553: PUSH
46554: LD_EXP 34
46558: IN
46559: NOT
46560: IFFALSE 46617
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
46562: LD_ADDR_EXP 34
46566: PUSH
46567: LD_EXP 34
46571: PPUSH
46572: LD_EXP 34
46576: PUSH
46577: LD_INT 1
46579: PLUS
46580: PPUSH
46581: LD_VAR 0 1
46585: PPUSH
46586: CALL_OW 1
46590: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
46591: LD_ADDR_EXP 35
46595: PUSH
46596: LD_EXP 35
46600: PPUSH
46601: LD_EXP 35
46605: PUSH
46606: LD_INT 1
46608: PLUS
46609: PPUSH
46610: EMPTY
46611: PPUSH
46612: CALL_OW 1
46616: ST_TO_ADDR
// end end ;
46617: GO 46546
46619: POP
46620: POP
// for i := minerMinesList downto 1 do
46621: LD_ADDR_VAR 0 1
46625: PUSH
46626: DOUBLE
46627: LD_EXP 35
46631: INC
46632: ST_TO_ADDR
46633: LD_INT 1
46635: PUSH
46636: FOR_DOWNTO
46637: IFFALSE 46973
// begin if IsLive ( minersList [ i ] ) then
46639: LD_EXP 34
46643: PUSH
46644: LD_VAR 0 1
46648: ARRAY
46649: PPUSH
46650: CALL_OW 300
46654: IFFALSE 46682
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
46656: LD_EXP 34
46660: PUSH
46661: LD_VAR 0 1
46665: ARRAY
46666: PPUSH
46667: LD_EXP 35
46671: PUSH
46672: LD_VAR 0 1
46676: ARRAY
46677: PPUSH
46678: CALL_OW 505
// if not minerMinesList [ i ] then
46682: LD_EXP 35
46686: PUSH
46687: LD_VAR 0 1
46691: ARRAY
46692: NOT
46693: IFFALSE 46697
// continue ;
46695: GO 46636
// for j := minerMinesList [ i ] downto 1 do
46697: LD_ADDR_VAR 0 2
46701: PUSH
46702: DOUBLE
46703: LD_EXP 35
46707: PUSH
46708: LD_VAR 0 1
46712: ARRAY
46713: INC
46714: ST_TO_ADDR
46715: LD_INT 1
46717: PUSH
46718: FOR_DOWNTO
46719: IFFALSE 46969
// begin side := GetSide ( minersList [ i ] ) ;
46721: LD_ADDR_VAR 0 3
46725: PUSH
46726: LD_EXP 34
46730: PUSH
46731: LD_VAR 0 1
46735: ARRAY
46736: PPUSH
46737: CALL_OW 255
46741: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
46742: LD_ADDR_VAR 0 4
46746: PUSH
46747: LD_EXP 35
46751: PUSH
46752: LD_VAR 0 1
46756: ARRAY
46757: PUSH
46758: LD_VAR 0 2
46762: ARRAY
46763: PUSH
46764: LD_INT 1
46766: ARRAY
46767: PPUSH
46768: LD_EXP 35
46772: PUSH
46773: LD_VAR 0 1
46777: ARRAY
46778: PUSH
46779: LD_VAR 0 2
46783: ARRAY
46784: PUSH
46785: LD_INT 2
46787: ARRAY
46788: PPUSH
46789: CALL_OW 428
46793: ST_TO_ADDR
// if not tmp then
46794: LD_VAR 0 4
46798: NOT
46799: IFFALSE 46803
// continue ;
46801: GO 46718
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
46803: LD_VAR 0 4
46807: PUSH
46808: LD_INT 81
46810: PUSH
46811: LD_VAR 0 3
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PPUSH
46820: CALL_OW 69
46824: IN
46825: PUSH
46826: LD_EXP 35
46830: PUSH
46831: LD_VAR 0 1
46835: ARRAY
46836: PUSH
46837: LD_VAR 0 2
46841: ARRAY
46842: PUSH
46843: LD_INT 1
46845: ARRAY
46846: PPUSH
46847: LD_EXP 35
46851: PUSH
46852: LD_VAR 0 1
46856: ARRAY
46857: PUSH
46858: LD_VAR 0 2
46862: ARRAY
46863: PUSH
46864: LD_INT 2
46866: ARRAY
46867: PPUSH
46868: CALL_OW 458
46872: AND
46873: IFFALSE 46967
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
46875: LD_EXP 35
46879: PUSH
46880: LD_VAR 0 1
46884: ARRAY
46885: PUSH
46886: LD_VAR 0 2
46890: ARRAY
46891: PUSH
46892: LD_INT 1
46894: ARRAY
46895: PPUSH
46896: LD_EXP 35
46900: PUSH
46901: LD_VAR 0 1
46905: ARRAY
46906: PUSH
46907: LD_VAR 0 2
46911: ARRAY
46912: PUSH
46913: LD_INT 2
46915: ARRAY
46916: PPUSH
46917: LD_VAR 0 3
46921: PPUSH
46922: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
46926: LD_ADDR_EXP 35
46930: PUSH
46931: LD_EXP 35
46935: PPUSH
46936: LD_VAR 0 1
46940: PPUSH
46941: LD_EXP 35
46945: PUSH
46946: LD_VAR 0 1
46950: ARRAY
46951: PPUSH
46952: LD_VAR 0 2
46956: PPUSH
46957: CALL_OW 3
46961: PPUSH
46962: CALL_OW 1
46966: ST_TO_ADDR
// end ; end ;
46967: GO 46718
46969: POP
46970: POP
// end ;
46971: GO 46636
46973: POP
46974: POP
// end ;
46975: PPOPN 4
46977: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
46978: LD_INT 0
46980: PPUSH
46981: PPUSH
// result := false ;
46982: LD_ADDR_VAR 0 4
46986: PUSH
46987: LD_INT 0
46989: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
46990: LD_VAR 0 1
46994: PPUSH
46995: CALL_OW 264
46999: PUSH
47000: LD_EXP 16
47004: EQUAL
47005: NOT
47006: IFFALSE 47010
// exit ;
47008: GO 47250
// index := GetElementIndex ( minersList , unit ) ;
47010: LD_ADDR_VAR 0 5
47014: PUSH
47015: LD_EXP 34
47019: PPUSH
47020: LD_VAR 0 1
47024: PPUSH
47025: CALL 7860 0 2
47029: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
47030: LD_EXP 35
47034: PUSH
47035: LD_VAR 0 5
47039: ARRAY
47040: PUSH
47041: LD_EXP 36
47045: GREATEREQUAL
47046: IFFALSE 47050
// exit ;
47048: GO 47250
// ComMoveXY ( unit , x , y ) ;
47050: LD_VAR 0 1
47054: PPUSH
47055: LD_VAR 0 2
47059: PPUSH
47060: LD_VAR 0 3
47064: PPUSH
47065: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
47069: LD_INT 35
47071: PPUSH
47072: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
47076: LD_VAR 0 1
47080: PPUSH
47081: LD_VAR 0 2
47085: PPUSH
47086: LD_VAR 0 3
47090: PPUSH
47091: CALL 39146 0 3
47095: NOT
47096: PUSH
47097: LD_VAR 0 1
47101: PPUSH
47102: CALL_OW 314
47106: AND
47107: IFFALSE 47111
// exit ;
47109: GO 47250
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
47111: LD_VAR 0 2
47115: PPUSH
47116: LD_VAR 0 3
47120: PPUSH
47121: CALL_OW 428
47125: PUSH
47126: LD_VAR 0 1
47130: EQUAL
47131: PUSH
47132: LD_VAR 0 1
47136: PPUSH
47137: CALL_OW 314
47141: NOT
47142: AND
47143: IFFALSE 47069
// PlaySoundXY ( x , y , PlantMine ) ;
47145: LD_VAR 0 2
47149: PPUSH
47150: LD_VAR 0 3
47154: PPUSH
47155: LD_STRING PlantMine
47157: PPUSH
47158: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
47162: LD_VAR 0 2
47166: PPUSH
47167: LD_VAR 0 3
47171: PPUSH
47172: LD_VAR 0 1
47176: PPUSH
47177: CALL_OW 255
47181: PPUSH
47182: LD_INT 0
47184: PPUSH
47185: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
47189: LD_ADDR_EXP 35
47193: PUSH
47194: LD_EXP 35
47198: PPUSH
47199: LD_VAR 0 5
47203: PUSH
47204: LD_EXP 35
47208: PUSH
47209: LD_VAR 0 5
47213: ARRAY
47214: PUSH
47215: LD_INT 1
47217: PLUS
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PPUSH
47223: LD_VAR 0 2
47227: PUSH
47228: LD_VAR 0 3
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PPUSH
47237: CALL 8075 0 3
47241: ST_TO_ADDR
// result := true ;
47242: LD_ADDR_VAR 0 4
47246: PUSH
47247: LD_INT 1
47249: ST_TO_ADDR
// end ;
47250: LD_VAR 0 4
47254: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
47255: LD_INT 0
47257: PPUSH
47258: PPUSH
47259: PPUSH
// if not unit in minersList then
47260: LD_VAR 0 1
47264: PUSH
47265: LD_EXP 34
47269: IN
47270: NOT
47271: IFFALSE 47275
// exit ;
47273: GO 47667
// index := GetElementIndex ( minersList , unit ) ;
47275: LD_ADDR_VAR 0 6
47279: PUSH
47280: LD_EXP 34
47284: PPUSH
47285: LD_VAR 0 1
47289: PPUSH
47290: CALL 7860 0 2
47294: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
47295: LD_ADDR_VAR 0 5
47299: PUSH
47300: DOUBLE
47301: LD_EXP 35
47305: PUSH
47306: LD_VAR 0 6
47310: ARRAY
47311: INC
47312: ST_TO_ADDR
47313: LD_INT 1
47315: PUSH
47316: FOR_DOWNTO
47317: IFFALSE 47478
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
47319: LD_EXP 35
47323: PUSH
47324: LD_VAR 0 6
47328: ARRAY
47329: PUSH
47330: LD_VAR 0 5
47334: ARRAY
47335: PUSH
47336: LD_INT 1
47338: ARRAY
47339: PUSH
47340: LD_VAR 0 2
47344: EQUAL
47345: PUSH
47346: LD_EXP 35
47350: PUSH
47351: LD_VAR 0 6
47355: ARRAY
47356: PUSH
47357: LD_VAR 0 5
47361: ARRAY
47362: PUSH
47363: LD_INT 2
47365: ARRAY
47366: PUSH
47367: LD_VAR 0 3
47371: EQUAL
47372: AND
47373: IFFALSE 47476
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
47375: LD_EXP 35
47379: PUSH
47380: LD_VAR 0 6
47384: ARRAY
47385: PUSH
47386: LD_VAR 0 5
47390: ARRAY
47391: PUSH
47392: LD_INT 1
47394: ARRAY
47395: PPUSH
47396: LD_EXP 35
47400: PUSH
47401: LD_VAR 0 6
47405: ARRAY
47406: PUSH
47407: LD_VAR 0 5
47411: ARRAY
47412: PUSH
47413: LD_INT 2
47415: ARRAY
47416: PPUSH
47417: LD_VAR 0 1
47421: PPUSH
47422: CALL_OW 255
47426: PPUSH
47427: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
47431: LD_ADDR_EXP 35
47435: PUSH
47436: LD_EXP 35
47440: PPUSH
47441: LD_VAR 0 6
47445: PPUSH
47446: LD_EXP 35
47450: PUSH
47451: LD_VAR 0 6
47455: ARRAY
47456: PPUSH
47457: LD_VAR 0 5
47461: PPUSH
47462: CALL_OW 3
47466: PPUSH
47467: CALL_OW 1
47471: ST_TO_ADDR
// exit ;
47472: POP
47473: POP
47474: GO 47667
// end ; end ;
47476: GO 47316
47478: POP
47479: POP
// for i := minerMinesList [ index ] downto 1 do
47480: LD_ADDR_VAR 0 5
47484: PUSH
47485: DOUBLE
47486: LD_EXP 35
47490: PUSH
47491: LD_VAR 0 6
47495: ARRAY
47496: INC
47497: ST_TO_ADDR
47498: LD_INT 1
47500: PUSH
47501: FOR_DOWNTO
47502: IFFALSE 47665
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
47504: LD_EXP 35
47508: PUSH
47509: LD_VAR 0 6
47513: ARRAY
47514: PUSH
47515: LD_VAR 0 5
47519: ARRAY
47520: PUSH
47521: LD_INT 1
47523: ARRAY
47524: PPUSH
47525: LD_EXP 35
47529: PUSH
47530: LD_VAR 0 6
47534: ARRAY
47535: PUSH
47536: LD_VAR 0 5
47540: ARRAY
47541: PUSH
47542: LD_INT 2
47544: ARRAY
47545: PPUSH
47546: LD_VAR 0 2
47550: PPUSH
47551: LD_VAR 0 3
47555: PPUSH
47556: CALL_OW 298
47560: PUSH
47561: LD_INT 6
47563: LESS
47564: IFFALSE 47663
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
47566: LD_EXP 35
47570: PUSH
47571: LD_VAR 0 6
47575: ARRAY
47576: PUSH
47577: LD_VAR 0 5
47581: ARRAY
47582: PUSH
47583: LD_INT 1
47585: ARRAY
47586: PPUSH
47587: LD_EXP 35
47591: PUSH
47592: LD_VAR 0 6
47596: ARRAY
47597: PUSH
47598: LD_VAR 0 5
47602: ARRAY
47603: PUSH
47604: LD_INT 2
47606: ARRAY
47607: PPUSH
47608: LD_VAR 0 1
47612: PPUSH
47613: CALL_OW 255
47617: PPUSH
47618: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
47622: LD_ADDR_EXP 35
47626: PUSH
47627: LD_EXP 35
47631: PPUSH
47632: LD_VAR 0 6
47636: PPUSH
47637: LD_EXP 35
47641: PUSH
47642: LD_VAR 0 6
47646: ARRAY
47647: PPUSH
47648: LD_VAR 0 5
47652: PPUSH
47653: CALL_OW 3
47657: PPUSH
47658: CALL_OW 1
47662: ST_TO_ADDR
// end ; end ;
47663: GO 47501
47665: POP
47666: POP
// end ;
47667: LD_VAR 0 4
47671: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
47672: LD_INT 0
47674: PPUSH
47675: PPUSH
47676: PPUSH
47677: PPUSH
47678: PPUSH
47679: PPUSH
47680: PPUSH
47681: PPUSH
47682: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
47683: LD_VAR 0 1
47687: PPUSH
47688: CALL_OW 264
47692: PUSH
47693: LD_EXP 16
47697: EQUAL
47698: NOT
47699: PUSH
47700: LD_VAR 0 1
47704: PUSH
47705: LD_EXP 34
47709: IN
47710: NOT
47711: OR
47712: IFFALSE 47716
// exit ;
47714: GO 48038
// index := GetElementIndex ( minersList , unit ) ;
47716: LD_ADDR_VAR 0 6
47720: PUSH
47721: LD_EXP 34
47725: PPUSH
47726: LD_VAR 0 1
47730: PPUSH
47731: CALL 7860 0 2
47735: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
47736: LD_ADDR_VAR 0 8
47740: PUSH
47741: LD_EXP 36
47745: PUSH
47746: LD_EXP 35
47750: PUSH
47751: LD_VAR 0 6
47755: ARRAY
47756: MINUS
47757: ST_TO_ADDR
// if not minesFreeAmount then
47758: LD_VAR 0 8
47762: NOT
47763: IFFALSE 47767
// exit ;
47765: GO 48038
// tmp := [ ] ;
47767: LD_ADDR_VAR 0 7
47771: PUSH
47772: EMPTY
47773: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
47774: LD_ADDR_VAR 0 5
47778: PUSH
47779: DOUBLE
47780: LD_INT 1
47782: DEC
47783: ST_TO_ADDR
47784: LD_VAR 0 8
47788: PUSH
47789: FOR_TO
47790: IFFALSE 47985
// begin _d := rand ( 0 , 5 ) ;
47792: LD_ADDR_VAR 0 11
47796: PUSH
47797: LD_INT 0
47799: PPUSH
47800: LD_INT 5
47802: PPUSH
47803: CALL_OW 12
47807: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
47808: LD_ADDR_VAR 0 12
47812: PUSH
47813: LD_INT 2
47815: PPUSH
47816: LD_INT 6
47818: PPUSH
47819: CALL_OW 12
47823: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
47824: LD_ADDR_VAR 0 9
47828: PUSH
47829: LD_VAR 0 2
47833: PPUSH
47834: LD_VAR 0 11
47838: PPUSH
47839: LD_VAR 0 12
47843: PPUSH
47844: CALL_OW 272
47848: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
47849: LD_ADDR_VAR 0 10
47853: PUSH
47854: LD_VAR 0 3
47858: PPUSH
47859: LD_VAR 0 11
47863: PPUSH
47864: LD_VAR 0 12
47868: PPUSH
47869: CALL_OW 273
47873: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
47874: LD_VAR 0 9
47878: PPUSH
47879: LD_VAR 0 10
47883: PPUSH
47884: CALL_OW 488
47888: PUSH
47889: LD_VAR 0 9
47893: PUSH
47894: LD_VAR 0 10
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_VAR 0 7
47907: IN
47908: NOT
47909: AND
47910: PUSH
47911: LD_VAR 0 9
47915: PPUSH
47916: LD_VAR 0 10
47920: PPUSH
47921: CALL_OW 458
47925: NOT
47926: AND
47927: IFFALSE 47969
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
47929: LD_ADDR_VAR 0 7
47933: PUSH
47934: LD_VAR 0 7
47938: PPUSH
47939: LD_VAR 0 7
47943: PUSH
47944: LD_INT 1
47946: PLUS
47947: PPUSH
47948: LD_VAR 0 9
47952: PUSH
47953: LD_VAR 0 10
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PPUSH
47962: CALL_OW 1
47966: ST_TO_ADDR
47967: GO 47983
// i := i - 1 ;
47969: LD_ADDR_VAR 0 5
47973: PUSH
47974: LD_VAR 0 5
47978: PUSH
47979: LD_INT 1
47981: MINUS
47982: ST_TO_ADDR
// end ;
47983: GO 47789
47985: POP
47986: POP
// for i in tmp do
47987: LD_ADDR_VAR 0 5
47991: PUSH
47992: LD_VAR 0 7
47996: PUSH
47997: FOR_IN
47998: IFFALSE 48036
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
48000: LD_VAR 0 1
48004: PPUSH
48005: LD_VAR 0 5
48009: PUSH
48010: LD_INT 1
48012: ARRAY
48013: PPUSH
48014: LD_VAR 0 5
48018: PUSH
48019: LD_INT 2
48021: ARRAY
48022: PPUSH
48023: CALL 46978 0 3
48027: NOT
48028: IFFALSE 48034
// exit ;
48030: POP
48031: POP
48032: GO 48038
48034: GO 47997
48036: POP
48037: POP
// end ;
48038: LD_VAR 0 4
48042: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
48043: LD_INT 0
48045: PPUSH
48046: PPUSH
48047: PPUSH
48048: PPUSH
48049: PPUSH
48050: PPUSH
48051: PPUSH
// if not GetClass ( unit ) = class_sniper then
48052: LD_VAR 0 1
48056: PPUSH
48057: CALL_OW 257
48061: PUSH
48062: LD_INT 5
48064: EQUAL
48065: NOT
48066: IFFALSE 48070
// exit ;
48068: GO 48458
// dist := 8 ;
48070: LD_ADDR_VAR 0 5
48074: PUSH
48075: LD_INT 8
48077: ST_TO_ADDR
// viewRange := 12 ;
48078: LD_ADDR_VAR 0 7
48082: PUSH
48083: LD_INT 12
48085: ST_TO_ADDR
// side := GetSide ( unit ) ;
48086: LD_ADDR_VAR 0 6
48090: PUSH
48091: LD_VAR 0 1
48095: PPUSH
48096: CALL_OW 255
48100: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
48101: LD_INT 61
48103: PPUSH
48104: LD_VAR 0 6
48108: PPUSH
48109: CALL_OW 321
48113: PUSH
48114: LD_INT 2
48116: EQUAL
48117: IFFALSE 48127
// viewRange := 16 ;
48119: LD_ADDR_VAR 0 7
48123: PUSH
48124: LD_INT 16
48126: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
48127: LD_VAR 0 1
48131: PPUSH
48132: LD_VAR 0 2
48136: PPUSH
48137: LD_VAR 0 3
48141: PPUSH
48142: CALL_OW 297
48146: PUSH
48147: LD_VAR 0 5
48151: GREATER
48152: IFFALSE 48231
// begin ComMoveXY ( unit , x , y ) ;
48154: LD_VAR 0 1
48158: PPUSH
48159: LD_VAR 0 2
48163: PPUSH
48164: LD_VAR 0 3
48168: PPUSH
48169: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
48173: LD_INT 35
48175: PPUSH
48176: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
48180: LD_VAR 0 1
48184: PPUSH
48185: LD_VAR 0 2
48189: PPUSH
48190: LD_VAR 0 3
48194: PPUSH
48195: CALL 39146 0 3
48199: NOT
48200: IFFALSE 48204
// exit ;
48202: GO 48458
// until GetDistUnitXY ( unit , x , y ) < dist ;
48204: LD_VAR 0 1
48208: PPUSH
48209: LD_VAR 0 2
48213: PPUSH
48214: LD_VAR 0 3
48218: PPUSH
48219: CALL_OW 297
48223: PUSH
48224: LD_VAR 0 5
48228: LESS
48229: IFFALSE 48173
// end ; ComTurnXY ( unit , x , y ) ;
48231: LD_VAR 0 1
48235: PPUSH
48236: LD_VAR 0 2
48240: PPUSH
48241: LD_VAR 0 3
48245: PPUSH
48246: CALL_OW 118
// wait ( 5 ) ;
48250: LD_INT 5
48252: PPUSH
48253: CALL_OW 67
// _d := GetDir ( unit ) ;
48257: LD_ADDR_VAR 0 10
48261: PUSH
48262: LD_VAR 0 1
48266: PPUSH
48267: CALL_OW 254
48271: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
48272: LD_ADDR_VAR 0 8
48276: PUSH
48277: LD_VAR 0 1
48281: PPUSH
48282: CALL_OW 250
48286: PPUSH
48287: LD_VAR 0 10
48291: PPUSH
48292: LD_VAR 0 5
48296: PPUSH
48297: CALL_OW 272
48301: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
48302: LD_ADDR_VAR 0 9
48306: PUSH
48307: LD_VAR 0 1
48311: PPUSH
48312: CALL_OW 251
48316: PPUSH
48317: LD_VAR 0 10
48321: PPUSH
48322: LD_VAR 0 5
48326: PPUSH
48327: CALL_OW 273
48331: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48332: LD_VAR 0 8
48336: PPUSH
48337: LD_VAR 0 9
48341: PPUSH
48342: CALL_OW 488
48346: NOT
48347: IFFALSE 48351
// exit ;
48349: GO 48458
// ComAnimCustom ( unit , 1 ) ;
48351: LD_VAR 0 1
48355: PPUSH
48356: LD_INT 1
48358: PPUSH
48359: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
48363: LD_VAR 0 8
48367: PPUSH
48368: LD_VAR 0 9
48372: PPUSH
48373: LD_VAR 0 6
48377: PPUSH
48378: LD_VAR 0 7
48382: PPUSH
48383: CALL_OW 330
// repeat wait ( 1 ) ;
48387: LD_INT 1
48389: PPUSH
48390: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
48394: LD_VAR 0 1
48398: PPUSH
48399: CALL_OW 316
48403: PUSH
48404: LD_VAR 0 1
48408: PPUSH
48409: CALL_OW 314
48413: OR
48414: PUSH
48415: LD_VAR 0 1
48419: PPUSH
48420: CALL_OW 302
48424: NOT
48425: OR
48426: PUSH
48427: LD_VAR 0 1
48431: PPUSH
48432: CALL_OW 301
48436: OR
48437: IFFALSE 48387
// RemoveSeeing ( _x , _y , side ) ;
48439: LD_VAR 0 8
48443: PPUSH
48444: LD_VAR 0 9
48448: PPUSH
48449: LD_VAR 0 6
48453: PPUSH
48454: CALL_OW 331
// end ; end_of_file
48458: LD_VAR 0 4
48462: RET
// every 0 0$1 do
48463: GO 48465
48465: DISABLE
// begin enable ;
48466: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
48467: LD_STRING updateTimer(
48469: PUSH
48470: LD_OWVAR 1
48474: STR
48475: PUSH
48476: LD_STRING );
48478: STR
48479: PPUSH
48480: CALL_OW 559
// end ;
48484: END
// export function SOS_MapStart ( ) ; begin
48485: LD_INT 0
48487: PPUSH
// if streamModeActive then
48488: LD_EXP 37
48492: IFFALSE 48501
// DefineStreamItems ( true ) ;
48494: LD_INT 1
48496: PPUSH
48497: CALL 50155 0 1
// UpdateFactoryWaypoints ( ) ;
48501: CALL 63016 0 0
// UpdateWarehouseGatheringPoints ( ) ;
48505: CALL 63273 0 0
// end ;
48509: LD_VAR 0 1
48513: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
48514: LD_INT 0
48516: PPUSH
// if p2 = 100 then
48517: LD_VAR 0 2
48521: PUSH
48522: LD_INT 100
48524: EQUAL
48525: IFFALSE 49528
// begin if not StreamModeActive then
48527: LD_EXP 37
48531: NOT
48532: IFFALSE 48542
// StreamModeActive := true ;
48534: LD_ADDR_EXP 37
48538: PUSH
48539: LD_INT 1
48541: ST_TO_ADDR
// if p3 = 0 then
48542: LD_VAR 0 3
48546: PUSH
48547: LD_INT 0
48549: EQUAL
48550: IFFALSE 48556
// InitStreamMode ;
48552: CALL 49691 0 0
// if p3 = 1 then
48556: LD_VAR 0 3
48560: PUSH
48561: LD_INT 1
48563: EQUAL
48564: IFFALSE 48574
// sRocket := true ;
48566: LD_ADDR_EXP 42
48570: PUSH
48571: LD_INT 1
48573: ST_TO_ADDR
// if p3 = 2 then
48574: LD_VAR 0 3
48578: PUSH
48579: LD_INT 2
48581: EQUAL
48582: IFFALSE 48592
// sSpeed := true ;
48584: LD_ADDR_EXP 41
48588: PUSH
48589: LD_INT 1
48591: ST_TO_ADDR
// if p3 = 3 then
48592: LD_VAR 0 3
48596: PUSH
48597: LD_INT 3
48599: EQUAL
48600: IFFALSE 48610
// sEngine := true ;
48602: LD_ADDR_EXP 43
48606: PUSH
48607: LD_INT 1
48609: ST_TO_ADDR
// if p3 = 4 then
48610: LD_VAR 0 3
48614: PUSH
48615: LD_INT 4
48617: EQUAL
48618: IFFALSE 48628
// sSpec := true ;
48620: LD_ADDR_EXP 40
48624: PUSH
48625: LD_INT 1
48627: ST_TO_ADDR
// if p3 = 5 then
48628: LD_VAR 0 3
48632: PUSH
48633: LD_INT 5
48635: EQUAL
48636: IFFALSE 48646
// sLevel := true ;
48638: LD_ADDR_EXP 44
48642: PUSH
48643: LD_INT 1
48645: ST_TO_ADDR
// if p3 = 6 then
48646: LD_VAR 0 3
48650: PUSH
48651: LD_INT 6
48653: EQUAL
48654: IFFALSE 48664
// sArmoury := true ;
48656: LD_ADDR_EXP 45
48660: PUSH
48661: LD_INT 1
48663: ST_TO_ADDR
// if p3 = 7 then
48664: LD_VAR 0 3
48668: PUSH
48669: LD_INT 7
48671: EQUAL
48672: IFFALSE 48682
// sRadar := true ;
48674: LD_ADDR_EXP 46
48678: PUSH
48679: LD_INT 1
48681: ST_TO_ADDR
// if p3 = 8 then
48682: LD_VAR 0 3
48686: PUSH
48687: LD_INT 8
48689: EQUAL
48690: IFFALSE 48700
// sBunker := true ;
48692: LD_ADDR_EXP 47
48696: PUSH
48697: LD_INT 1
48699: ST_TO_ADDR
// if p3 = 9 then
48700: LD_VAR 0 3
48704: PUSH
48705: LD_INT 9
48707: EQUAL
48708: IFFALSE 48718
// sHack := true ;
48710: LD_ADDR_EXP 48
48714: PUSH
48715: LD_INT 1
48717: ST_TO_ADDR
// if p3 = 10 then
48718: LD_VAR 0 3
48722: PUSH
48723: LD_INT 10
48725: EQUAL
48726: IFFALSE 48736
// sFire := true ;
48728: LD_ADDR_EXP 49
48732: PUSH
48733: LD_INT 1
48735: ST_TO_ADDR
// if p3 = 11 then
48736: LD_VAR 0 3
48740: PUSH
48741: LD_INT 11
48743: EQUAL
48744: IFFALSE 48754
// sRefresh := true ;
48746: LD_ADDR_EXP 50
48750: PUSH
48751: LD_INT 1
48753: ST_TO_ADDR
// if p3 = 12 then
48754: LD_VAR 0 3
48758: PUSH
48759: LD_INT 12
48761: EQUAL
48762: IFFALSE 48772
// sExp := true ;
48764: LD_ADDR_EXP 51
48768: PUSH
48769: LD_INT 1
48771: ST_TO_ADDR
// if p3 = 13 then
48772: LD_VAR 0 3
48776: PUSH
48777: LD_INT 13
48779: EQUAL
48780: IFFALSE 48790
// sDepot := true ;
48782: LD_ADDR_EXP 52
48786: PUSH
48787: LD_INT 1
48789: ST_TO_ADDR
// if p3 = 14 then
48790: LD_VAR 0 3
48794: PUSH
48795: LD_INT 14
48797: EQUAL
48798: IFFALSE 48808
// sFlag := true ;
48800: LD_ADDR_EXP 53
48804: PUSH
48805: LD_INT 1
48807: ST_TO_ADDR
// if p3 = 15 then
48808: LD_VAR 0 3
48812: PUSH
48813: LD_INT 15
48815: EQUAL
48816: IFFALSE 48826
// sKamikadze := true ;
48818: LD_ADDR_EXP 61
48822: PUSH
48823: LD_INT 1
48825: ST_TO_ADDR
// if p3 = 16 then
48826: LD_VAR 0 3
48830: PUSH
48831: LD_INT 16
48833: EQUAL
48834: IFFALSE 48844
// sTroll := true ;
48836: LD_ADDR_EXP 62
48840: PUSH
48841: LD_INT 1
48843: ST_TO_ADDR
// if p3 = 17 then
48844: LD_VAR 0 3
48848: PUSH
48849: LD_INT 17
48851: EQUAL
48852: IFFALSE 48862
// sSlow := true ;
48854: LD_ADDR_EXP 63
48858: PUSH
48859: LD_INT 1
48861: ST_TO_ADDR
// if p3 = 18 then
48862: LD_VAR 0 3
48866: PUSH
48867: LD_INT 18
48869: EQUAL
48870: IFFALSE 48880
// sLack := true ;
48872: LD_ADDR_EXP 64
48876: PUSH
48877: LD_INT 1
48879: ST_TO_ADDR
// if p3 = 19 then
48880: LD_VAR 0 3
48884: PUSH
48885: LD_INT 19
48887: EQUAL
48888: IFFALSE 48898
// sTank := true ;
48890: LD_ADDR_EXP 66
48894: PUSH
48895: LD_INT 1
48897: ST_TO_ADDR
// if p3 = 20 then
48898: LD_VAR 0 3
48902: PUSH
48903: LD_INT 20
48905: EQUAL
48906: IFFALSE 48916
// sRemote := true ;
48908: LD_ADDR_EXP 67
48912: PUSH
48913: LD_INT 1
48915: ST_TO_ADDR
// if p3 = 21 then
48916: LD_VAR 0 3
48920: PUSH
48921: LD_INT 21
48923: EQUAL
48924: IFFALSE 48934
// sPowell := true ;
48926: LD_ADDR_EXP 68
48930: PUSH
48931: LD_INT 1
48933: ST_TO_ADDR
// if p3 = 22 then
48934: LD_VAR 0 3
48938: PUSH
48939: LD_INT 22
48941: EQUAL
48942: IFFALSE 48952
// sTeleport := true ;
48944: LD_ADDR_EXP 71
48948: PUSH
48949: LD_INT 1
48951: ST_TO_ADDR
// if p3 = 23 then
48952: LD_VAR 0 3
48956: PUSH
48957: LD_INT 23
48959: EQUAL
48960: IFFALSE 48970
// sOilTower := true ;
48962: LD_ADDR_EXP 73
48966: PUSH
48967: LD_INT 1
48969: ST_TO_ADDR
// if p3 = 24 then
48970: LD_VAR 0 3
48974: PUSH
48975: LD_INT 24
48977: EQUAL
48978: IFFALSE 48988
// sShovel := true ;
48980: LD_ADDR_EXP 74
48984: PUSH
48985: LD_INT 1
48987: ST_TO_ADDR
// if p3 = 25 then
48988: LD_VAR 0 3
48992: PUSH
48993: LD_INT 25
48995: EQUAL
48996: IFFALSE 49006
// sSheik := true ;
48998: LD_ADDR_EXP 75
49002: PUSH
49003: LD_INT 1
49005: ST_TO_ADDR
// if p3 = 26 then
49006: LD_VAR 0 3
49010: PUSH
49011: LD_INT 26
49013: EQUAL
49014: IFFALSE 49024
// sEarthquake := true ;
49016: LD_ADDR_EXP 77
49020: PUSH
49021: LD_INT 1
49023: ST_TO_ADDR
// if p3 = 27 then
49024: LD_VAR 0 3
49028: PUSH
49029: LD_INT 27
49031: EQUAL
49032: IFFALSE 49042
// sAI := true ;
49034: LD_ADDR_EXP 78
49038: PUSH
49039: LD_INT 1
49041: ST_TO_ADDR
// if p3 = 28 then
49042: LD_VAR 0 3
49046: PUSH
49047: LD_INT 28
49049: EQUAL
49050: IFFALSE 49060
// sCargo := true ;
49052: LD_ADDR_EXP 81
49056: PUSH
49057: LD_INT 1
49059: ST_TO_ADDR
// if p3 = 29 then
49060: LD_VAR 0 3
49064: PUSH
49065: LD_INT 29
49067: EQUAL
49068: IFFALSE 49078
// sDLaser := true ;
49070: LD_ADDR_EXP 82
49074: PUSH
49075: LD_INT 1
49077: ST_TO_ADDR
// if p3 = 30 then
49078: LD_VAR 0 3
49082: PUSH
49083: LD_INT 30
49085: EQUAL
49086: IFFALSE 49096
// sExchange := true ;
49088: LD_ADDR_EXP 83
49092: PUSH
49093: LD_INT 1
49095: ST_TO_ADDR
// if p3 = 31 then
49096: LD_VAR 0 3
49100: PUSH
49101: LD_INT 31
49103: EQUAL
49104: IFFALSE 49114
// sFac := true ;
49106: LD_ADDR_EXP 84
49110: PUSH
49111: LD_INT 1
49113: ST_TO_ADDR
// if p3 = 32 then
49114: LD_VAR 0 3
49118: PUSH
49119: LD_INT 32
49121: EQUAL
49122: IFFALSE 49132
// sPower := true ;
49124: LD_ADDR_EXP 85
49128: PUSH
49129: LD_INT 1
49131: ST_TO_ADDR
// if p3 = 33 then
49132: LD_VAR 0 3
49136: PUSH
49137: LD_INT 33
49139: EQUAL
49140: IFFALSE 49150
// sRandom := true ;
49142: LD_ADDR_EXP 86
49146: PUSH
49147: LD_INT 1
49149: ST_TO_ADDR
// if p3 = 34 then
49150: LD_VAR 0 3
49154: PUSH
49155: LD_INT 34
49157: EQUAL
49158: IFFALSE 49168
// sShield := true ;
49160: LD_ADDR_EXP 87
49164: PUSH
49165: LD_INT 1
49167: ST_TO_ADDR
// if p3 = 35 then
49168: LD_VAR 0 3
49172: PUSH
49173: LD_INT 35
49175: EQUAL
49176: IFFALSE 49186
// sTime := true ;
49178: LD_ADDR_EXP 88
49182: PUSH
49183: LD_INT 1
49185: ST_TO_ADDR
// if p3 = 36 then
49186: LD_VAR 0 3
49190: PUSH
49191: LD_INT 36
49193: EQUAL
49194: IFFALSE 49204
// sTools := true ;
49196: LD_ADDR_EXP 89
49200: PUSH
49201: LD_INT 1
49203: ST_TO_ADDR
// if p3 = 101 then
49204: LD_VAR 0 3
49208: PUSH
49209: LD_INT 101
49211: EQUAL
49212: IFFALSE 49222
// sSold := true ;
49214: LD_ADDR_EXP 54
49218: PUSH
49219: LD_INT 1
49221: ST_TO_ADDR
// if p3 = 102 then
49222: LD_VAR 0 3
49226: PUSH
49227: LD_INT 102
49229: EQUAL
49230: IFFALSE 49240
// sDiff := true ;
49232: LD_ADDR_EXP 55
49236: PUSH
49237: LD_INT 1
49239: ST_TO_ADDR
// if p3 = 103 then
49240: LD_VAR 0 3
49244: PUSH
49245: LD_INT 103
49247: EQUAL
49248: IFFALSE 49258
// sFog := true ;
49250: LD_ADDR_EXP 58
49254: PUSH
49255: LD_INT 1
49257: ST_TO_ADDR
// if p3 = 104 then
49258: LD_VAR 0 3
49262: PUSH
49263: LD_INT 104
49265: EQUAL
49266: IFFALSE 49276
// sReset := true ;
49268: LD_ADDR_EXP 59
49272: PUSH
49273: LD_INT 1
49275: ST_TO_ADDR
// if p3 = 105 then
49276: LD_VAR 0 3
49280: PUSH
49281: LD_INT 105
49283: EQUAL
49284: IFFALSE 49294
// sSun := true ;
49286: LD_ADDR_EXP 60
49290: PUSH
49291: LD_INT 1
49293: ST_TO_ADDR
// if p3 = 106 then
49294: LD_VAR 0 3
49298: PUSH
49299: LD_INT 106
49301: EQUAL
49302: IFFALSE 49312
// sTiger := true ;
49304: LD_ADDR_EXP 56
49308: PUSH
49309: LD_INT 1
49311: ST_TO_ADDR
// if p3 = 107 then
49312: LD_VAR 0 3
49316: PUSH
49317: LD_INT 107
49319: EQUAL
49320: IFFALSE 49330
// sBomb := true ;
49322: LD_ADDR_EXP 57
49326: PUSH
49327: LD_INT 1
49329: ST_TO_ADDR
// if p3 = 108 then
49330: LD_VAR 0 3
49334: PUSH
49335: LD_INT 108
49337: EQUAL
49338: IFFALSE 49348
// sWound := true ;
49340: LD_ADDR_EXP 65
49344: PUSH
49345: LD_INT 1
49347: ST_TO_ADDR
// if p3 = 109 then
49348: LD_VAR 0 3
49352: PUSH
49353: LD_INT 109
49355: EQUAL
49356: IFFALSE 49366
// sBetray := true ;
49358: LD_ADDR_EXP 69
49362: PUSH
49363: LD_INT 1
49365: ST_TO_ADDR
// if p3 = 110 then
49366: LD_VAR 0 3
49370: PUSH
49371: LD_INT 110
49373: EQUAL
49374: IFFALSE 49384
// sContamin := true ;
49376: LD_ADDR_EXP 70
49380: PUSH
49381: LD_INT 1
49383: ST_TO_ADDR
// if p3 = 111 then
49384: LD_VAR 0 3
49388: PUSH
49389: LD_INT 111
49391: EQUAL
49392: IFFALSE 49402
// sOil := true ;
49394: LD_ADDR_EXP 72
49398: PUSH
49399: LD_INT 1
49401: ST_TO_ADDR
// if p3 = 112 then
49402: LD_VAR 0 3
49406: PUSH
49407: LD_INT 112
49409: EQUAL
49410: IFFALSE 49420
// sStu := true ;
49412: LD_ADDR_EXP 76
49416: PUSH
49417: LD_INT 1
49419: ST_TO_ADDR
// if p3 = 113 then
49420: LD_VAR 0 3
49424: PUSH
49425: LD_INT 113
49427: EQUAL
49428: IFFALSE 49438
// sBazooka := true ;
49430: LD_ADDR_EXP 79
49434: PUSH
49435: LD_INT 1
49437: ST_TO_ADDR
// if p3 = 114 then
49438: LD_VAR 0 3
49442: PUSH
49443: LD_INT 114
49445: EQUAL
49446: IFFALSE 49456
// sMortar := true ;
49448: LD_ADDR_EXP 80
49452: PUSH
49453: LD_INT 1
49455: ST_TO_ADDR
// if p3 = 115 then
49456: LD_VAR 0 3
49460: PUSH
49461: LD_INT 115
49463: EQUAL
49464: IFFALSE 49474
// sRanger := true ;
49466: LD_ADDR_EXP 90
49470: PUSH
49471: LD_INT 1
49473: ST_TO_ADDR
// if p3 = 116 then
49474: LD_VAR 0 3
49478: PUSH
49479: LD_INT 116
49481: EQUAL
49482: IFFALSE 49492
// sComputer := true ;
49484: LD_ADDR_EXP 91
49488: PUSH
49489: LD_INT 1
49491: ST_TO_ADDR
// if p3 = 117 then
49492: LD_VAR 0 3
49496: PUSH
49497: LD_INT 117
49499: EQUAL
49500: IFFALSE 49510
// s30 := true ;
49502: LD_ADDR_EXP 92
49506: PUSH
49507: LD_INT 1
49509: ST_TO_ADDR
// if p3 = 118 then
49510: LD_VAR 0 3
49514: PUSH
49515: LD_INT 118
49517: EQUAL
49518: IFFALSE 49528
// s60 := true ;
49520: LD_ADDR_EXP 93
49524: PUSH
49525: LD_INT 1
49527: ST_TO_ADDR
// end ; if p2 = 101 then
49528: LD_VAR 0 2
49532: PUSH
49533: LD_INT 101
49535: EQUAL
49536: IFFALSE 49664
// begin case p3 of 1 :
49538: LD_VAR 0 3
49542: PUSH
49543: LD_INT 1
49545: DOUBLE
49546: EQUAL
49547: IFTRUE 49551
49549: GO 49558
49551: POP
// hHackUnlimitedResources ; 2 :
49552: CALL 61762 0 0
49556: GO 49664
49558: LD_INT 2
49560: DOUBLE
49561: EQUAL
49562: IFTRUE 49566
49564: GO 49573
49566: POP
// hHackSetLevel10 ; 3 :
49567: CALL 61895 0 0
49571: GO 49664
49573: LD_INT 3
49575: DOUBLE
49576: EQUAL
49577: IFTRUE 49581
49579: GO 49588
49581: POP
// hHackSetLevel10YourUnits ; 4 :
49582: CALL 61980 0 0
49586: GO 49664
49588: LD_INT 4
49590: DOUBLE
49591: EQUAL
49592: IFTRUE 49596
49594: GO 49603
49596: POP
// hHackInvincible ; 5 :
49597: CALL 62428 0 0
49601: GO 49664
49603: LD_INT 5
49605: DOUBLE
49606: EQUAL
49607: IFTRUE 49611
49609: GO 49618
49611: POP
// hHackInvisible ; 6 :
49612: CALL 62539 0 0
49616: GO 49664
49618: LD_INT 6
49620: DOUBLE
49621: EQUAL
49622: IFTRUE 49626
49624: GO 49633
49626: POP
// hHackChangeYourSide ; 7 :
49627: CALL 62596 0 0
49631: GO 49664
49633: LD_INT 7
49635: DOUBLE
49636: EQUAL
49637: IFTRUE 49641
49639: GO 49648
49641: POP
// hHackChangeUnitSide ; 8 :
49642: CALL 62638 0 0
49646: GO 49664
49648: LD_INT 8
49650: DOUBLE
49651: EQUAL
49652: IFTRUE 49656
49654: GO 49663
49656: POP
// hHackFog ; end ;
49657: CALL 62739 0 0
49661: GO 49664
49663: POP
// end ; end ;
49664: LD_VAR 0 7
49668: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
49669: GO 49671
49671: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
49672: LD_STRING initStreamRollete();
49674: PPUSH
49675: CALL_OW 559
// InitStreamMode ;
49679: CALL 49691 0 0
// DefineStreamItems ( false ) ;
49683: LD_INT 0
49685: PPUSH
49686: CALL 50155 0 1
// end ;
49690: END
// function InitStreamMode ; begin
49691: LD_INT 0
49693: PPUSH
// streamModeActive := false ;
49694: LD_ADDR_EXP 37
49698: PUSH
49699: LD_INT 0
49701: ST_TO_ADDR
// normalCounter := 36 ;
49702: LD_ADDR_EXP 38
49706: PUSH
49707: LD_INT 36
49709: ST_TO_ADDR
// hardcoreCounter := 18 ;
49710: LD_ADDR_EXP 39
49714: PUSH
49715: LD_INT 18
49717: ST_TO_ADDR
// sRocket := false ;
49718: LD_ADDR_EXP 42
49722: PUSH
49723: LD_INT 0
49725: ST_TO_ADDR
// sSpeed := false ;
49726: LD_ADDR_EXP 41
49730: PUSH
49731: LD_INT 0
49733: ST_TO_ADDR
// sEngine := false ;
49734: LD_ADDR_EXP 43
49738: PUSH
49739: LD_INT 0
49741: ST_TO_ADDR
// sSpec := false ;
49742: LD_ADDR_EXP 40
49746: PUSH
49747: LD_INT 0
49749: ST_TO_ADDR
// sLevel := false ;
49750: LD_ADDR_EXP 44
49754: PUSH
49755: LD_INT 0
49757: ST_TO_ADDR
// sArmoury := false ;
49758: LD_ADDR_EXP 45
49762: PUSH
49763: LD_INT 0
49765: ST_TO_ADDR
// sRadar := false ;
49766: LD_ADDR_EXP 46
49770: PUSH
49771: LD_INT 0
49773: ST_TO_ADDR
// sBunker := false ;
49774: LD_ADDR_EXP 47
49778: PUSH
49779: LD_INT 0
49781: ST_TO_ADDR
// sHack := false ;
49782: LD_ADDR_EXP 48
49786: PUSH
49787: LD_INT 0
49789: ST_TO_ADDR
// sFire := false ;
49790: LD_ADDR_EXP 49
49794: PUSH
49795: LD_INT 0
49797: ST_TO_ADDR
// sRefresh := false ;
49798: LD_ADDR_EXP 50
49802: PUSH
49803: LD_INT 0
49805: ST_TO_ADDR
// sExp := false ;
49806: LD_ADDR_EXP 51
49810: PUSH
49811: LD_INT 0
49813: ST_TO_ADDR
// sDepot := false ;
49814: LD_ADDR_EXP 52
49818: PUSH
49819: LD_INT 0
49821: ST_TO_ADDR
// sFlag := false ;
49822: LD_ADDR_EXP 53
49826: PUSH
49827: LD_INT 0
49829: ST_TO_ADDR
// sKamikadze := false ;
49830: LD_ADDR_EXP 61
49834: PUSH
49835: LD_INT 0
49837: ST_TO_ADDR
// sTroll := false ;
49838: LD_ADDR_EXP 62
49842: PUSH
49843: LD_INT 0
49845: ST_TO_ADDR
// sSlow := false ;
49846: LD_ADDR_EXP 63
49850: PUSH
49851: LD_INT 0
49853: ST_TO_ADDR
// sLack := false ;
49854: LD_ADDR_EXP 64
49858: PUSH
49859: LD_INT 0
49861: ST_TO_ADDR
// sTank := false ;
49862: LD_ADDR_EXP 66
49866: PUSH
49867: LD_INT 0
49869: ST_TO_ADDR
// sRemote := false ;
49870: LD_ADDR_EXP 67
49874: PUSH
49875: LD_INT 0
49877: ST_TO_ADDR
// sPowell := false ;
49878: LD_ADDR_EXP 68
49882: PUSH
49883: LD_INT 0
49885: ST_TO_ADDR
// sTeleport := false ;
49886: LD_ADDR_EXP 71
49890: PUSH
49891: LD_INT 0
49893: ST_TO_ADDR
// sOilTower := false ;
49894: LD_ADDR_EXP 73
49898: PUSH
49899: LD_INT 0
49901: ST_TO_ADDR
// sShovel := false ;
49902: LD_ADDR_EXP 74
49906: PUSH
49907: LD_INT 0
49909: ST_TO_ADDR
// sSheik := false ;
49910: LD_ADDR_EXP 75
49914: PUSH
49915: LD_INT 0
49917: ST_TO_ADDR
// sEarthquake := false ;
49918: LD_ADDR_EXP 77
49922: PUSH
49923: LD_INT 0
49925: ST_TO_ADDR
// sAI := false ;
49926: LD_ADDR_EXP 78
49930: PUSH
49931: LD_INT 0
49933: ST_TO_ADDR
// sCargo := false ;
49934: LD_ADDR_EXP 81
49938: PUSH
49939: LD_INT 0
49941: ST_TO_ADDR
// sDLaser := false ;
49942: LD_ADDR_EXP 82
49946: PUSH
49947: LD_INT 0
49949: ST_TO_ADDR
// sExchange := false ;
49950: LD_ADDR_EXP 83
49954: PUSH
49955: LD_INT 0
49957: ST_TO_ADDR
// sFac := false ;
49958: LD_ADDR_EXP 84
49962: PUSH
49963: LD_INT 0
49965: ST_TO_ADDR
// sPower := false ;
49966: LD_ADDR_EXP 85
49970: PUSH
49971: LD_INT 0
49973: ST_TO_ADDR
// sRandom := false ;
49974: LD_ADDR_EXP 86
49978: PUSH
49979: LD_INT 0
49981: ST_TO_ADDR
// sShield := false ;
49982: LD_ADDR_EXP 87
49986: PUSH
49987: LD_INT 0
49989: ST_TO_ADDR
// sTime := false ;
49990: LD_ADDR_EXP 88
49994: PUSH
49995: LD_INT 0
49997: ST_TO_ADDR
// sTools := false ;
49998: LD_ADDR_EXP 89
50002: PUSH
50003: LD_INT 0
50005: ST_TO_ADDR
// sSold := false ;
50006: LD_ADDR_EXP 54
50010: PUSH
50011: LD_INT 0
50013: ST_TO_ADDR
// sDiff := false ;
50014: LD_ADDR_EXP 55
50018: PUSH
50019: LD_INT 0
50021: ST_TO_ADDR
// sFog := false ;
50022: LD_ADDR_EXP 58
50026: PUSH
50027: LD_INT 0
50029: ST_TO_ADDR
// sReset := false ;
50030: LD_ADDR_EXP 59
50034: PUSH
50035: LD_INT 0
50037: ST_TO_ADDR
// sSun := false ;
50038: LD_ADDR_EXP 60
50042: PUSH
50043: LD_INT 0
50045: ST_TO_ADDR
// sTiger := false ;
50046: LD_ADDR_EXP 56
50050: PUSH
50051: LD_INT 0
50053: ST_TO_ADDR
// sBomb := false ;
50054: LD_ADDR_EXP 57
50058: PUSH
50059: LD_INT 0
50061: ST_TO_ADDR
// sWound := false ;
50062: LD_ADDR_EXP 65
50066: PUSH
50067: LD_INT 0
50069: ST_TO_ADDR
// sBetray := false ;
50070: LD_ADDR_EXP 69
50074: PUSH
50075: LD_INT 0
50077: ST_TO_ADDR
// sContamin := false ;
50078: LD_ADDR_EXP 70
50082: PUSH
50083: LD_INT 0
50085: ST_TO_ADDR
// sOil := false ;
50086: LD_ADDR_EXP 72
50090: PUSH
50091: LD_INT 0
50093: ST_TO_ADDR
// sStu := false ;
50094: LD_ADDR_EXP 76
50098: PUSH
50099: LD_INT 0
50101: ST_TO_ADDR
// sBazooka := false ;
50102: LD_ADDR_EXP 79
50106: PUSH
50107: LD_INT 0
50109: ST_TO_ADDR
// sMortar := false ;
50110: LD_ADDR_EXP 80
50114: PUSH
50115: LD_INT 0
50117: ST_TO_ADDR
// sRanger := false ;
50118: LD_ADDR_EXP 90
50122: PUSH
50123: LD_INT 0
50125: ST_TO_ADDR
// sComputer := false ;
50126: LD_ADDR_EXP 91
50130: PUSH
50131: LD_INT 0
50133: ST_TO_ADDR
// s30 := false ;
50134: LD_ADDR_EXP 92
50138: PUSH
50139: LD_INT 0
50141: ST_TO_ADDR
// s60 := false ;
50142: LD_ADDR_EXP 93
50146: PUSH
50147: LD_INT 0
50149: ST_TO_ADDR
// end ;
50150: LD_VAR 0 1
50154: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
50155: LD_INT 0
50157: PPUSH
50158: PPUSH
50159: PPUSH
50160: PPUSH
50161: PPUSH
50162: PPUSH
50163: PPUSH
// result := [ ] ;
50164: LD_ADDR_VAR 0 2
50168: PUSH
50169: EMPTY
50170: ST_TO_ADDR
// if campaign_id = 1 then
50171: LD_OWVAR 69
50175: PUSH
50176: LD_INT 1
50178: EQUAL
50179: IFFALSE 53345
// begin case mission_number of 1 :
50181: LD_OWVAR 70
50185: PUSH
50186: LD_INT 1
50188: DOUBLE
50189: EQUAL
50190: IFTRUE 50194
50192: GO 50270
50194: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
50195: LD_ADDR_VAR 0 2
50199: PUSH
50200: LD_INT 2
50202: PUSH
50203: LD_INT 4
50205: PUSH
50206: LD_INT 11
50208: PUSH
50209: LD_INT 12
50211: PUSH
50212: LD_INT 15
50214: PUSH
50215: LD_INT 16
50217: PUSH
50218: LD_INT 22
50220: PUSH
50221: LD_INT 23
50223: PUSH
50224: LD_INT 26
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 101
50240: PUSH
50241: LD_INT 102
50243: PUSH
50244: LD_INT 106
50246: PUSH
50247: LD_INT 116
50249: PUSH
50250: LD_INT 117
50252: PUSH
50253: LD_INT 118
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: ST_TO_ADDR
50268: GO 53343
50270: LD_INT 2
50272: DOUBLE
50273: EQUAL
50274: IFTRUE 50278
50276: GO 50362
50278: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
50279: LD_ADDR_VAR 0 2
50283: PUSH
50284: LD_INT 2
50286: PUSH
50287: LD_INT 4
50289: PUSH
50290: LD_INT 11
50292: PUSH
50293: LD_INT 12
50295: PUSH
50296: LD_INT 15
50298: PUSH
50299: LD_INT 16
50301: PUSH
50302: LD_INT 22
50304: PUSH
50305: LD_INT 23
50307: PUSH
50308: LD_INT 26
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 101
50324: PUSH
50325: LD_INT 102
50327: PUSH
50328: LD_INT 105
50330: PUSH
50331: LD_INT 106
50333: PUSH
50334: LD_INT 108
50336: PUSH
50337: LD_INT 116
50339: PUSH
50340: LD_INT 117
50342: PUSH
50343: LD_INT 118
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: ST_TO_ADDR
50360: GO 53343
50362: LD_INT 3
50364: DOUBLE
50365: EQUAL
50366: IFTRUE 50370
50368: GO 50458
50370: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
50371: LD_ADDR_VAR 0 2
50375: PUSH
50376: LD_INT 2
50378: PUSH
50379: LD_INT 4
50381: PUSH
50382: LD_INT 5
50384: PUSH
50385: LD_INT 11
50387: PUSH
50388: LD_INT 12
50390: PUSH
50391: LD_INT 15
50393: PUSH
50394: LD_INT 16
50396: PUSH
50397: LD_INT 22
50399: PUSH
50400: LD_INT 26
50402: PUSH
50403: LD_INT 36
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 101
50420: PUSH
50421: LD_INT 102
50423: PUSH
50424: LD_INT 105
50426: PUSH
50427: LD_INT 106
50429: PUSH
50430: LD_INT 108
50432: PUSH
50433: LD_INT 116
50435: PUSH
50436: LD_INT 117
50438: PUSH
50439: LD_INT 118
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: ST_TO_ADDR
50456: GO 53343
50458: LD_INT 4
50460: DOUBLE
50461: EQUAL
50462: IFTRUE 50466
50464: GO 50562
50466: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
50467: LD_ADDR_VAR 0 2
50471: PUSH
50472: LD_INT 2
50474: PUSH
50475: LD_INT 4
50477: PUSH
50478: LD_INT 5
50480: PUSH
50481: LD_INT 8
50483: PUSH
50484: LD_INT 11
50486: PUSH
50487: LD_INT 12
50489: PUSH
50490: LD_INT 15
50492: PUSH
50493: LD_INT 16
50495: PUSH
50496: LD_INT 22
50498: PUSH
50499: LD_INT 23
50501: PUSH
50502: LD_INT 26
50504: PUSH
50505: LD_INT 36
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 101
50524: PUSH
50525: LD_INT 102
50527: PUSH
50528: LD_INT 105
50530: PUSH
50531: LD_INT 106
50533: PUSH
50534: LD_INT 108
50536: PUSH
50537: LD_INT 116
50539: PUSH
50540: LD_INT 117
50542: PUSH
50543: LD_INT 118
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: ST_TO_ADDR
50560: GO 53343
50562: LD_INT 5
50564: DOUBLE
50565: EQUAL
50566: IFTRUE 50570
50568: GO 50682
50570: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
50571: LD_ADDR_VAR 0 2
50575: PUSH
50576: LD_INT 2
50578: PUSH
50579: LD_INT 4
50581: PUSH
50582: LD_INT 5
50584: PUSH
50585: LD_INT 6
50587: PUSH
50588: LD_INT 8
50590: PUSH
50591: LD_INT 11
50593: PUSH
50594: LD_INT 12
50596: PUSH
50597: LD_INT 15
50599: PUSH
50600: LD_INT 16
50602: PUSH
50603: LD_INT 22
50605: PUSH
50606: LD_INT 23
50608: PUSH
50609: LD_INT 25
50611: PUSH
50612: LD_INT 26
50614: PUSH
50615: LD_INT 36
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 101
50636: PUSH
50637: LD_INT 102
50639: PUSH
50640: LD_INT 105
50642: PUSH
50643: LD_INT 106
50645: PUSH
50646: LD_INT 108
50648: PUSH
50649: LD_INT 109
50651: PUSH
50652: LD_INT 112
50654: PUSH
50655: LD_INT 116
50657: PUSH
50658: LD_INT 117
50660: PUSH
50661: LD_INT 118
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: ST_TO_ADDR
50680: GO 53343
50682: LD_INT 6
50684: DOUBLE
50685: EQUAL
50686: IFTRUE 50690
50688: GO 50822
50690: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
50691: LD_ADDR_VAR 0 2
50695: PUSH
50696: LD_INT 2
50698: PUSH
50699: LD_INT 4
50701: PUSH
50702: LD_INT 5
50704: PUSH
50705: LD_INT 6
50707: PUSH
50708: LD_INT 8
50710: PUSH
50711: LD_INT 11
50713: PUSH
50714: LD_INT 12
50716: PUSH
50717: LD_INT 15
50719: PUSH
50720: LD_INT 16
50722: PUSH
50723: LD_INT 20
50725: PUSH
50726: LD_INT 21
50728: PUSH
50729: LD_INT 22
50731: PUSH
50732: LD_INT 23
50734: PUSH
50735: LD_INT 25
50737: PUSH
50738: LD_INT 26
50740: PUSH
50741: LD_INT 30
50743: PUSH
50744: LD_INT 31
50746: PUSH
50747: LD_INT 32
50749: PUSH
50750: LD_INT 36
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 101
50776: PUSH
50777: LD_INT 102
50779: PUSH
50780: LD_INT 105
50782: PUSH
50783: LD_INT 106
50785: PUSH
50786: LD_INT 108
50788: PUSH
50789: LD_INT 109
50791: PUSH
50792: LD_INT 112
50794: PUSH
50795: LD_INT 116
50797: PUSH
50798: LD_INT 117
50800: PUSH
50801: LD_INT 118
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: ST_TO_ADDR
50820: GO 53343
50822: LD_INT 7
50824: DOUBLE
50825: EQUAL
50826: IFTRUE 50830
50828: GO 50942
50830: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
50831: LD_ADDR_VAR 0 2
50835: PUSH
50836: LD_INT 2
50838: PUSH
50839: LD_INT 4
50841: PUSH
50842: LD_INT 5
50844: PUSH
50845: LD_INT 7
50847: PUSH
50848: LD_INT 11
50850: PUSH
50851: LD_INT 12
50853: PUSH
50854: LD_INT 15
50856: PUSH
50857: LD_INT 16
50859: PUSH
50860: LD_INT 20
50862: PUSH
50863: LD_INT 21
50865: PUSH
50866: LD_INT 22
50868: PUSH
50869: LD_INT 23
50871: PUSH
50872: LD_INT 25
50874: PUSH
50875: LD_INT 26
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 101
50896: PUSH
50897: LD_INT 102
50899: PUSH
50900: LD_INT 103
50902: PUSH
50903: LD_INT 105
50905: PUSH
50906: LD_INT 106
50908: PUSH
50909: LD_INT 108
50911: PUSH
50912: LD_INT 112
50914: PUSH
50915: LD_INT 116
50917: PUSH
50918: LD_INT 117
50920: PUSH
50921: LD_INT 118
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: ST_TO_ADDR
50940: GO 53343
50942: LD_INT 8
50944: DOUBLE
50945: EQUAL
50946: IFTRUE 50950
50948: GO 51090
50950: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
50951: LD_ADDR_VAR 0 2
50955: PUSH
50956: LD_INT 2
50958: PUSH
50959: LD_INT 4
50961: PUSH
50962: LD_INT 5
50964: PUSH
50965: LD_INT 6
50967: PUSH
50968: LD_INT 7
50970: PUSH
50971: LD_INT 8
50973: PUSH
50974: LD_INT 11
50976: PUSH
50977: LD_INT 12
50979: PUSH
50980: LD_INT 15
50982: PUSH
50983: LD_INT 16
50985: PUSH
50986: LD_INT 20
50988: PUSH
50989: LD_INT 21
50991: PUSH
50992: LD_INT 22
50994: PUSH
50995: LD_INT 23
50997: PUSH
50998: LD_INT 25
51000: PUSH
51001: LD_INT 26
51003: PUSH
51004: LD_INT 30
51006: PUSH
51007: LD_INT 31
51009: PUSH
51010: LD_INT 32
51012: PUSH
51013: LD_INT 36
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 101
51040: PUSH
51041: LD_INT 102
51043: PUSH
51044: LD_INT 103
51046: PUSH
51047: LD_INT 105
51049: PUSH
51050: LD_INT 106
51052: PUSH
51053: LD_INT 108
51055: PUSH
51056: LD_INT 109
51058: PUSH
51059: LD_INT 112
51061: PUSH
51062: LD_INT 116
51064: PUSH
51065: LD_INT 117
51067: PUSH
51068: LD_INT 118
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: ST_TO_ADDR
51088: GO 53343
51090: LD_INT 9
51092: DOUBLE
51093: EQUAL
51094: IFTRUE 51098
51096: GO 51246
51098: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
51099: LD_ADDR_VAR 0 2
51103: PUSH
51104: LD_INT 2
51106: PUSH
51107: LD_INT 4
51109: PUSH
51110: LD_INT 5
51112: PUSH
51113: LD_INT 6
51115: PUSH
51116: LD_INT 7
51118: PUSH
51119: LD_INT 8
51121: PUSH
51122: LD_INT 11
51124: PUSH
51125: LD_INT 12
51127: PUSH
51128: LD_INT 15
51130: PUSH
51131: LD_INT 16
51133: PUSH
51134: LD_INT 20
51136: PUSH
51137: LD_INT 21
51139: PUSH
51140: LD_INT 22
51142: PUSH
51143: LD_INT 23
51145: PUSH
51146: LD_INT 25
51148: PUSH
51149: LD_INT 26
51151: PUSH
51152: LD_INT 28
51154: PUSH
51155: LD_INT 30
51157: PUSH
51158: LD_INT 31
51160: PUSH
51161: LD_INT 32
51163: PUSH
51164: LD_INT 36
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 101
51192: PUSH
51193: LD_INT 102
51195: PUSH
51196: LD_INT 103
51198: PUSH
51199: LD_INT 105
51201: PUSH
51202: LD_INT 106
51204: PUSH
51205: LD_INT 108
51207: PUSH
51208: LD_INT 109
51210: PUSH
51211: LD_INT 112
51213: PUSH
51214: LD_INT 114
51216: PUSH
51217: LD_INT 116
51219: PUSH
51220: LD_INT 117
51222: PUSH
51223: LD_INT 118
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: ST_TO_ADDR
51244: GO 53343
51246: LD_INT 10
51248: DOUBLE
51249: EQUAL
51250: IFTRUE 51254
51252: GO 51450
51254: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
51255: LD_ADDR_VAR 0 2
51259: PUSH
51260: LD_INT 2
51262: PUSH
51263: LD_INT 4
51265: PUSH
51266: LD_INT 5
51268: PUSH
51269: LD_INT 6
51271: PUSH
51272: LD_INT 7
51274: PUSH
51275: LD_INT 8
51277: PUSH
51278: LD_INT 9
51280: PUSH
51281: LD_INT 10
51283: PUSH
51284: LD_INT 11
51286: PUSH
51287: LD_INT 12
51289: PUSH
51290: LD_INT 13
51292: PUSH
51293: LD_INT 14
51295: PUSH
51296: LD_INT 15
51298: PUSH
51299: LD_INT 16
51301: PUSH
51302: LD_INT 17
51304: PUSH
51305: LD_INT 18
51307: PUSH
51308: LD_INT 19
51310: PUSH
51311: LD_INT 20
51313: PUSH
51314: LD_INT 21
51316: PUSH
51317: LD_INT 22
51319: PUSH
51320: LD_INT 23
51322: PUSH
51323: LD_INT 24
51325: PUSH
51326: LD_INT 25
51328: PUSH
51329: LD_INT 26
51331: PUSH
51332: LD_INT 28
51334: PUSH
51335: LD_INT 30
51337: PUSH
51338: LD_INT 31
51340: PUSH
51341: LD_INT 32
51343: PUSH
51344: LD_INT 36
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 101
51380: PUSH
51381: LD_INT 102
51383: PUSH
51384: LD_INT 103
51386: PUSH
51387: LD_INT 104
51389: PUSH
51390: LD_INT 105
51392: PUSH
51393: LD_INT 106
51395: PUSH
51396: LD_INT 107
51398: PUSH
51399: LD_INT 108
51401: PUSH
51402: LD_INT 109
51404: PUSH
51405: LD_INT 110
51407: PUSH
51408: LD_INT 111
51410: PUSH
51411: LD_INT 112
51413: PUSH
51414: LD_INT 114
51416: PUSH
51417: LD_INT 116
51419: PUSH
51420: LD_INT 117
51422: PUSH
51423: LD_INT 118
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: ST_TO_ADDR
51448: GO 53343
51450: LD_INT 11
51452: DOUBLE
51453: EQUAL
51454: IFTRUE 51458
51456: GO 51662
51458: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
51459: LD_ADDR_VAR 0 2
51463: PUSH
51464: LD_INT 2
51466: PUSH
51467: LD_INT 3
51469: PUSH
51470: LD_INT 4
51472: PUSH
51473: LD_INT 5
51475: PUSH
51476: LD_INT 6
51478: PUSH
51479: LD_INT 7
51481: PUSH
51482: LD_INT 8
51484: PUSH
51485: LD_INT 9
51487: PUSH
51488: LD_INT 10
51490: PUSH
51491: LD_INT 11
51493: PUSH
51494: LD_INT 12
51496: PUSH
51497: LD_INT 13
51499: PUSH
51500: LD_INT 14
51502: PUSH
51503: LD_INT 15
51505: PUSH
51506: LD_INT 16
51508: PUSH
51509: LD_INT 17
51511: PUSH
51512: LD_INT 18
51514: PUSH
51515: LD_INT 19
51517: PUSH
51518: LD_INT 20
51520: PUSH
51521: LD_INT 21
51523: PUSH
51524: LD_INT 22
51526: PUSH
51527: LD_INT 23
51529: PUSH
51530: LD_INT 24
51532: PUSH
51533: LD_INT 25
51535: PUSH
51536: LD_INT 26
51538: PUSH
51539: LD_INT 28
51541: PUSH
51542: LD_INT 30
51544: PUSH
51545: LD_INT 31
51547: PUSH
51548: LD_INT 32
51550: PUSH
51551: LD_INT 34
51553: PUSH
51554: LD_INT 36
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 101
51592: PUSH
51593: LD_INT 102
51595: PUSH
51596: LD_INT 103
51598: PUSH
51599: LD_INT 104
51601: PUSH
51602: LD_INT 105
51604: PUSH
51605: LD_INT 106
51607: PUSH
51608: LD_INT 107
51610: PUSH
51611: LD_INT 108
51613: PUSH
51614: LD_INT 109
51616: PUSH
51617: LD_INT 110
51619: PUSH
51620: LD_INT 111
51622: PUSH
51623: LD_INT 112
51625: PUSH
51626: LD_INT 114
51628: PUSH
51629: LD_INT 116
51631: PUSH
51632: LD_INT 117
51634: PUSH
51635: LD_INT 118
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: ST_TO_ADDR
51660: GO 53343
51662: LD_INT 12
51664: DOUBLE
51665: EQUAL
51666: IFTRUE 51670
51668: GO 51890
51670: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
51671: LD_ADDR_VAR 0 2
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: LD_INT 2
51681: PUSH
51682: LD_INT 3
51684: PUSH
51685: LD_INT 4
51687: PUSH
51688: LD_INT 5
51690: PUSH
51691: LD_INT 6
51693: PUSH
51694: LD_INT 7
51696: PUSH
51697: LD_INT 8
51699: PUSH
51700: LD_INT 9
51702: PUSH
51703: LD_INT 10
51705: PUSH
51706: LD_INT 11
51708: PUSH
51709: LD_INT 12
51711: PUSH
51712: LD_INT 13
51714: PUSH
51715: LD_INT 14
51717: PUSH
51718: LD_INT 15
51720: PUSH
51721: LD_INT 16
51723: PUSH
51724: LD_INT 17
51726: PUSH
51727: LD_INT 18
51729: PUSH
51730: LD_INT 19
51732: PUSH
51733: LD_INT 20
51735: PUSH
51736: LD_INT 21
51738: PUSH
51739: LD_INT 22
51741: PUSH
51742: LD_INT 23
51744: PUSH
51745: LD_INT 24
51747: PUSH
51748: LD_INT 25
51750: PUSH
51751: LD_INT 26
51753: PUSH
51754: LD_INT 27
51756: PUSH
51757: LD_INT 28
51759: PUSH
51760: LD_INT 30
51762: PUSH
51763: LD_INT 31
51765: PUSH
51766: LD_INT 32
51768: PUSH
51769: LD_INT 33
51771: PUSH
51772: LD_INT 34
51774: PUSH
51775: LD_INT 36
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 101
51816: PUSH
51817: LD_INT 102
51819: PUSH
51820: LD_INT 103
51822: PUSH
51823: LD_INT 104
51825: PUSH
51826: LD_INT 105
51828: PUSH
51829: LD_INT 106
51831: PUSH
51832: LD_INT 107
51834: PUSH
51835: LD_INT 108
51837: PUSH
51838: LD_INT 109
51840: PUSH
51841: LD_INT 110
51843: PUSH
51844: LD_INT 111
51846: PUSH
51847: LD_INT 112
51849: PUSH
51850: LD_INT 113
51852: PUSH
51853: LD_INT 114
51855: PUSH
51856: LD_INT 116
51858: PUSH
51859: LD_INT 117
51861: PUSH
51862: LD_INT 118
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: ST_TO_ADDR
51888: GO 53343
51890: LD_INT 13
51892: DOUBLE
51893: EQUAL
51894: IFTRUE 51898
51896: GO 52106
51898: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
51899: LD_ADDR_VAR 0 2
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: LD_INT 2
51909: PUSH
51910: LD_INT 3
51912: PUSH
51913: LD_INT 4
51915: PUSH
51916: LD_INT 5
51918: PUSH
51919: LD_INT 8
51921: PUSH
51922: LD_INT 9
51924: PUSH
51925: LD_INT 10
51927: PUSH
51928: LD_INT 11
51930: PUSH
51931: LD_INT 12
51933: PUSH
51934: LD_INT 14
51936: PUSH
51937: LD_INT 15
51939: PUSH
51940: LD_INT 16
51942: PUSH
51943: LD_INT 17
51945: PUSH
51946: LD_INT 18
51948: PUSH
51949: LD_INT 19
51951: PUSH
51952: LD_INT 20
51954: PUSH
51955: LD_INT 21
51957: PUSH
51958: LD_INT 22
51960: PUSH
51961: LD_INT 23
51963: PUSH
51964: LD_INT 24
51966: PUSH
51967: LD_INT 25
51969: PUSH
51970: LD_INT 26
51972: PUSH
51973: LD_INT 27
51975: PUSH
51976: LD_INT 28
51978: PUSH
51979: LD_INT 30
51981: PUSH
51982: LD_INT 31
51984: PUSH
51985: LD_INT 32
51987: PUSH
51988: LD_INT 33
51990: PUSH
51991: LD_INT 34
51993: PUSH
51994: LD_INT 36
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 101
52032: PUSH
52033: LD_INT 102
52035: PUSH
52036: LD_INT 103
52038: PUSH
52039: LD_INT 104
52041: PUSH
52042: LD_INT 105
52044: PUSH
52045: LD_INT 106
52047: PUSH
52048: LD_INT 107
52050: PUSH
52051: LD_INT 108
52053: PUSH
52054: LD_INT 109
52056: PUSH
52057: LD_INT 110
52059: PUSH
52060: LD_INT 111
52062: PUSH
52063: LD_INT 112
52065: PUSH
52066: LD_INT 113
52068: PUSH
52069: LD_INT 114
52071: PUSH
52072: LD_INT 116
52074: PUSH
52075: LD_INT 117
52077: PUSH
52078: LD_INT 118
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: ST_TO_ADDR
52104: GO 53343
52106: LD_INT 14
52108: DOUBLE
52109: EQUAL
52110: IFTRUE 52114
52112: GO 52338
52114: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
52115: LD_ADDR_VAR 0 2
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: LD_INT 2
52125: PUSH
52126: LD_INT 3
52128: PUSH
52129: LD_INT 4
52131: PUSH
52132: LD_INT 5
52134: PUSH
52135: LD_INT 6
52137: PUSH
52138: LD_INT 7
52140: PUSH
52141: LD_INT 8
52143: PUSH
52144: LD_INT 9
52146: PUSH
52147: LD_INT 10
52149: PUSH
52150: LD_INT 11
52152: PUSH
52153: LD_INT 12
52155: PUSH
52156: LD_INT 13
52158: PUSH
52159: LD_INT 14
52161: PUSH
52162: LD_INT 15
52164: PUSH
52165: LD_INT 16
52167: PUSH
52168: LD_INT 17
52170: PUSH
52171: LD_INT 18
52173: PUSH
52174: LD_INT 19
52176: PUSH
52177: LD_INT 20
52179: PUSH
52180: LD_INT 21
52182: PUSH
52183: LD_INT 22
52185: PUSH
52186: LD_INT 23
52188: PUSH
52189: LD_INT 24
52191: PUSH
52192: LD_INT 25
52194: PUSH
52195: LD_INT 26
52197: PUSH
52198: LD_INT 27
52200: PUSH
52201: LD_INT 28
52203: PUSH
52204: LD_INT 29
52206: PUSH
52207: LD_INT 30
52209: PUSH
52210: LD_INT 31
52212: PUSH
52213: LD_INT 32
52215: PUSH
52216: LD_INT 33
52218: PUSH
52219: LD_INT 34
52221: PUSH
52222: LD_INT 36
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 101
52264: PUSH
52265: LD_INT 102
52267: PUSH
52268: LD_INT 103
52270: PUSH
52271: LD_INT 104
52273: PUSH
52274: LD_INT 105
52276: PUSH
52277: LD_INT 106
52279: PUSH
52280: LD_INT 107
52282: PUSH
52283: LD_INT 108
52285: PUSH
52286: LD_INT 109
52288: PUSH
52289: LD_INT 110
52291: PUSH
52292: LD_INT 111
52294: PUSH
52295: LD_INT 112
52297: PUSH
52298: LD_INT 113
52300: PUSH
52301: LD_INT 114
52303: PUSH
52304: LD_INT 116
52306: PUSH
52307: LD_INT 117
52309: PUSH
52310: LD_INT 118
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: ST_TO_ADDR
52336: GO 53343
52338: LD_INT 15
52340: DOUBLE
52341: EQUAL
52342: IFTRUE 52346
52344: GO 52570
52346: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
52347: LD_ADDR_VAR 0 2
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: LD_INT 2
52357: PUSH
52358: LD_INT 3
52360: PUSH
52361: LD_INT 4
52363: PUSH
52364: LD_INT 5
52366: PUSH
52367: LD_INT 6
52369: PUSH
52370: LD_INT 7
52372: PUSH
52373: LD_INT 8
52375: PUSH
52376: LD_INT 9
52378: PUSH
52379: LD_INT 10
52381: PUSH
52382: LD_INT 11
52384: PUSH
52385: LD_INT 12
52387: PUSH
52388: LD_INT 13
52390: PUSH
52391: LD_INT 14
52393: PUSH
52394: LD_INT 15
52396: PUSH
52397: LD_INT 16
52399: PUSH
52400: LD_INT 17
52402: PUSH
52403: LD_INT 18
52405: PUSH
52406: LD_INT 19
52408: PUSH
52409: LD_INT 20
52411: PUSH
52412: LD_INT 21
52414: PUSH
52415: LD_INT 22
52417: PUSH
52418: LD_INT 23
52420: PUSH
52421: LD_INT 24
52423: PUSH
52424: LD_INT 25
52426: PUSH
52427: LD_INT 26
52429: PUSH
52430: LD_INT 27
52432: PUSH
52433: LD_INT 28
52435: PUSH
52436: LD_INT 29
52438: PUSH
52439: LD_INT 30
52441: PUSH
52442: LD_INT 31
52444: PUSH
52445: LD_INT 32
52447: PUSH
52448: LD_INT 33
52450: PUSH
52451: LD_INT 34
52453: PUSH
52454: LD_INT 36
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 101
52496: PUSH
52497: LD_INT 102
52499: PUSH
52500: LD_INT 103
52502: PUSH
52503: LD_INT 104
52505: PUSH
52506: LD_INT 105
52508: PUSH
52509: LD_INT 106
52511: PUSH
52512: LD_INT 107
52514: PUSH
52515: LD_INT 108
52517: PUSH
52518: LD_INT 109
52520: PUSH
52521: LD_INT 110
52523: PUSH
52524: LD_INT 111
52526: PUSH
52527: LD_INT 112
52529: PUSH
52530: LD_INT 113
52532: PUSH
52533: LD_INT 114
52535: PUSH
52536: LD_INT 116
52538: PUSH
52539: LD_INT 117
52541: PUSH
52542: LD_INT 118
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: ST_TO_ADDR
52568: GO 53343
52570: LD_INT 16
52572: DOUBLE
52573: EQUAL
52574: IFTRUE 52578
52576: GO 52714
52578: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
52579: LD_ADDR_VAR 0 2
52583: PUSH
52584: LD_INT 2
52586: PUSH
52587: LD_INT 4
52589: PUSH
52590: LD_INT 5
52592: PUSH
52593: LD_INT 7
52595: PUSH
52596: LD_INT 11
52598: PUSH
52599: LD_INT 12
52601: PUSH
52602: LD_INT 15
52604: PUSH
52605: LD_INT 16
52607: PUSH
52608: LD_INT 20
52610: PUSH
52611: LD_INT 21
52613: PUSH
52614: LD_INT 22
52616: PUSH
52617: LD_INT 23
52619: PUSH
52620: LD_INT 25
52622: PUSH
52623: LD_INT 26
52625: PUSH
52626: LD_INT 30
52628: PUSH
52629: LD_INT 31
52631: PUSH
52632: LD_INT 32
52634: PUSH
52635: LD_INT 33
52637: PUSH
52638: LD_INT 34
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 101
52664: PUSH
52665: LD_INT 102
52667: PUSH
52668: LD_INT 103
52670: PUSH
52671: LD_INT 106
52673: PUSH
52674: LD_INT 108
52676: PUSH
52677: LD_INT 112
52679: PUSH
52680: LD_INT 113
52682: PUSH
52683: LD_INT 114
52685: PUSH
52686: LD_INT 116
52688: PUSH
52689: LD_INT 117
52691: PUSH
52692: LD_INT 118
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: ST_TO_ADDR
52712: GO 53343
52714: LD_INT 17
52716: DOUBLE
52717: EQUAL
52718: IFTRUE 52722
52720: GO 52946
52722: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
52723: LD_ADDR_VAR 0 2
52727: PUSH
52728: LD_INT 1
52730: PUSH
52731: LD_INT 2
52733: PUSH
52734: LD_INT 3
52736: PUSH
52737: LD_INT 4
52739: PUSH
52740: LD_INT 5
52742: PUSH
52743: LD_INT 6
52745: PUSH
52746: LD_INT 7
52748: PUSH
52749: LD_INT 8
52751: PUSH
52752: LD_INT 9
52754: PUSH
52755: LD_INT 10
52757: PUSH
52758: LD_INT 11
52760: PUSH
52761: LD_INT 12
52763: PUSH
52764: LD_INT 13
52766: PUSH
52767: LD_INT 14
52769: PUSH
52770: LD_INT 15
52772: PUSH
52773: LD_INT 16
52775: PUSH
52776: LD_INT 17
52778: PUSH
52779: LD_INT 18
52781: PUSH
52782: LD_INT 19
52784: PUSH
52785: LD_INT 20
52787: PUSH
52788: LD_INT 21
52790: PUSH
52791: LD_INT 22
52793: PUSH
52794: LD_INT 23
52796: PUSH
52797: LD_INT 24
52799: PUSH
52800: LD_INT 25
52802: PUSH
52803: LD_INT 26
52805: PUSH
52806: LD_INT 27
52808: PUSH
52809: LD_INT 28
52811: PUSH
52812: LD_INT 29
52814: PUSH
52815: LD_INT 30
52817: PUSH
52818: LD_INT 31
52820: PUSH
52821: LD_INT 32
52823: PUSH
52824: LD_INT 33
52826: PUSH
52827: LD_INT 34
52829: PUSH
52830: LD_INT 36
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 101
52872: PUSH
52873: LD_INT 102
52875: PUSH
52876: LD_INT 103
52878: PUSH
52879: LD_INT 104
52881: PUSH
52882: LD_INT 105
52884: PUSH
52885: LD_INT 106
52887: PUSH
52888: LD_INT 107
52890: PUSH
52891: LD_INT 108
52893: PUSH
52894: LD_INT 109
52896: PUSH
52897: LD_INT 110
52899: PUSH
52900: LD_INT 111
52902: PUSH
52903: LD_INT 112
52905: PUSH
52906: LD_INT 113
52908: PUSH
52909: LD_INT 114
52911: PUSH
52912: LD_INT 116
52914: PUSH
52915: LD_INT 117
52917: PUSH
52918: LD_INT 118
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: ST_TO_ADDR
52944: GO 53343
52946: LD_INT 18
52948: DOUBLE
52949: EQUAL
52950: IFTRUE 52954
52952: GO 53102
52954: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
52955: LD_ADDR_VAR 0 2
52959: PUSH
52960: LD_INT 2
52962: PUSH
52963: LD_INT 4
52965: PUSH
52966: LD_INT 5
52968: PUSH
52969: LD_INT 7
52971: PUSH
52972: LD_INT 11
52974: PUSH
52975: LD_INT 12
52977: PUSH
52978: LD_INT 15
52980: PUSH
52981: LD_INT 16
52983: PUSH
52984: LD_INT 20
52986: PUSH
52987: LD_INT 21
52989: PUSH
52990: LD_INT 22
52992: PUSH
52993: LD_INT 23
52995: PUSH
52996: LD_INT 25
52998: PUSH
52999: LD_INT 26
53001: PUSH
53002: LD_INT 30
53004: PUSH
53005: LD_INT 31
53007: PUSH
53008: LD_INT 32
53010: PUSH
53011: LD_INT 33
53013: PUSH
53014: LD_INT 34
53016: PUSH
53017: LD_INT 35
53019: PUSH
53020: LD_INT 36
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 101
53048: PUSH
53049: LD_INT 102
53051: PUSH
53052: LD_INT 103
53054: PUSH
53055: LD_INT 106
53057: PUSH
53058: LD_INT 108
53060: PUSH
53061: LD_INT 112
53063: PUSH
53064: LD_INT 113
53066: PUSH
53067: LD_INT 114
53069: PUSH
53070: LD_INT 115
53072: PUSH
53073: LD_INT 116
53075: PUSH
53076: LD_INT 117
53078: PUSH
53079: LD_INT 118
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: ST_TO_ADDR
53100: GO 53343
53102: LD_INT 19
53104: DOUBLE
53105: EQUAL
53106: IFTRUE 53110
53108: GO 53342
53110: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
53111: LD_ADDR_VAR 0 2
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: LD_INT 2
53121: PUSH
53122: LD_INT 3
53124: PUSH
53125: LD_INT 4
53127: PUSH
53128: LD_INT 5
53130: PUSH
53131: LD_INT 6
53133: PUSH
53134: LD_INT 7
53136: PUSH
53137: LD_INT 8
53139: PUSH
53140: LD_INT 9
53142: PUSH
53143: LD_INT 10
53145: PUSH
53146: LD_INT 11
53148: PUSH
53149: LD_INT 12
53151: PUSH
53152: LD_INT 13
53154: PUSH
53155: LD_INT 14
53157: PUSH
53158: LD_INT 15
53160: PUSH
53161: LD_INT 16
53163: PUSH
53164: LD_INT 17
53166: PUSH
53167: LD_INT 18
53169: PUSH
53170: LD_INT 19
53172: PUSH
53173: LD_INT 20
53175: PUSH
53176: LD_INT 21
53178: PUSH
53179: LD_INT 22
53181: PUSH
53182: LD_INT 23
53184: PUSH
53185: LD_INT 24
53187: PUSH
53188: LD_INT 25
53190: PUSH
53191: LD_INT 26
53193: PUSH
53194: LD_INT 27
53196: PUSH
53197: LD_INT 28
53199: PUSH
53200: LD_INT 29
53202: PUSH
53203: LD_INT 30
53205: PUSH
53206: LD_INT 31
53208: PUSH
53209: LD_INT 32
53211: PUSH
53212: LD_INT 33
53214: PUSH
53215: LD_INT 34
53217: PUSH
53218: LD_INT 35
53220: PUSH
53221: LD_INT 36
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 101
53264: PUSH
53265: LD_INT 102
53267: PUSH
53268: LD_INT 103
53270: PUSH
53271: LD_INT 104
53273: PUSH
53274: LD_INT 105
53276: PUSH
53277: LD_INT 106
53279: PUSH
53280: LD_INT 107
53282: PUSH
53283: LD_INT 108
53285: PUSH
53286: LD_INT 109
53288: PUSH
53289: LD_INT 110
53291: PUSH
53292: LD_INT 111
53294: PUSH
53295: LD_INT 112
53297: PUSH
53298: LD_INT 113
53300: PUSH
53301: LD_INT 114
53303: PUSH
53304: LD_INT 115
53306: PUSH
53307: LD_INT 116
53309: PUSH
53310: LD_INT 117
53312: PUSH
53313: LD_INT 118
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: ST_TO_ADDR
53340: GO 53343
53342: POP
// end else
53343: GO 53574
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
53345: LD_ADDR_VAR 0 2
53349: PUSH
53350: LD_INT 1
53352: PUSH
53353: LD_INT 2
53355: PUSH
53356: LD_INT 3
53358: PUSH
53359: LD_INT 4
53361: PUSH
53362: LD_INT 5
53364: PUSH
53365: LD_INT 6
53367: PUSH
53368: LD_INT 7
53370: PUSH
53371: LD_INT 8
53373: PUSH
53374: LD_INT 9
53376: PUSH
53377: LD_INT 10
53379: PUSH
53380: LD_INT 11
53382: PUSH
53383: LD_INT 12
53385: PUSH
53386: LD_INT 13
53388: PUSH
53389: LD_INT 14
53391: PUSH
53392: LD_INT 15
53394: PUSH
53395: LD_INT 16
53397: PUSH
53398: LD_INT 17
53400: PUSH
53401: LD_INT 18
53403: PUSH
53404: LD_INT 19
53406: PUSH
53407: LD_INT 20
53409: PUSH
53410: LD_INT 21
53412: PUSH
53413: LD_INT 22
53415: PUSH
53416: LD_INT 23
53418: PUSH
53419: LD_INT 24
53421: PUSH
53422: LD_INT 25
53424: PUSH
53425: LD_INT 26
53427: PUSH
53428: LD_INT 27
53430: PUSH
53431: LD_INT 28
53433: PUSH
53434: LD_INT 29
53436: PUSH
53437: LD_INT 30
53439: PUSH
53440: LD_INT 31
53442: PUSH
53443: LD_INT 32
53445: PUSH
53446: LD_INT 33
53448: PUSH
53449: LD_INT 34
53451: PUSH
53452: LD_INT 35
53454: PUSH
53455: LD_INT 36
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 101
53498: PUSH
53499: LD_INT 102
53501: PUSH
53502: LD_INT 103
53504: PUSH
53505: LD_INT 104
53507: PUSH
53508: LD_INT 105
53510: PUSH
53511: LD_INT 106
53513: PUSH
53514: LD_INT 107
53516: PUSH
53517: LD_INT 108
53519: PUSH
53520: LD_INT 109
53522: PUSH
53523: LD_INT 110
53525: PUSH
53526: LD_INT 111
53528: PUSH
53529: LD_INT 112
53531: PUSH
53532: LD_INT 113
53534: PUSH
53535: LD_INT 114
53537: PUSH
53538: LD_INT 115
53540: PUSH
53541: LD_INT 116
53543: PUSH
53544: LD_INT 117
53546: PUSH
53547: LD_INT 118
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: ST_TO_ADDR
// if result then
53574: LD_VAR 0 2
53578: IFFALSE 54364
// begin normal :=  ;
53580: LD_ADDR_VAR 0 5
53584: PUSH
53585: LD_STRING 
53587: ST_TO_ADDR
// hardcore :=  ;
53588: LD_ADDR_VAR 0 6
53592: PUSH
53593: LD_STRING 
53595: ST_TO_ADDR
// active :=  ;
53596: LD_ADDR_VAR 0 7
53600: PUSH
53601: LD_STRING 
53603: ST_TO_ADDR
// for i = 1 to normalCounter do
53604: LD_ADDR_VAR 0 8
53608: PUSH
53609: DOUBLE
53610: LD_INT 1
53612: DEC
53613: ST_TO_ADDR
53614: LD_EXP 38
53618: PUSH
53619: FOR_TO
53620: IFFALSE 53721
// begin tmp := 0 ;
53622: LD_ADDR_VAR 0 3
53626: PUSH
53627: LD_STRING 0
53629: ST_TO_ADDR
// if result [ 1 ] then
53630: LD_VAR 0 2
53634: PUSH
53635: LD_INT 1
53637: ARRAY
53638: IFFALSE 53703
// if result [ 1 ] [ 1 ] = i then
53640: LD_VAR 0 2
53644: PUSH
53645: LD_INT 1
53647: ARRAY
53648: PUSH
53649: LD_INT 1
53651: ARRAY
53652: PUSH
53653: LD_VAR 0 8
53657: EQUAL
53658: IFFALSE 53703
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
53660: LD_ADDR_VAR 0 2
53664: PUSH
53665: LD_VAR 0 2
53669: PPUSH
53670: LD_INT 1
53672: PPUSH
53673: LD_VAR 0 2
53677: PUSH
53678: LD_INT 1
53680: ARRAY
53681: PPUSH
53682: LD_INT 1
53684: PPUSH
53685: CALL_OW 3
53689: PPUSH
53690: CALL_OW 1
53694: ST_TO_ADDR
// tmp := 1 ;
53695: LD_ADDR_VAR 0 3
53699: PUSH
53700: LD_STRING 1
53702: ST_TO_ADDR
// end ; normal := normal & tmp ;
53703: LD_ADDR_VAR 0 5
53707: PUSH
53708: LD_VAR 0 5
53712: PUSH
53713: LD_VAR 0 3
53717: STR
53718: ST_TO_ADDR
// end ;
53719: GO 53619
53721: POP
53722: POP
// for i = 1 to hardcoreCounter do
53723: LD_ADDR_VAR 0 8
53727: PUSH
53728: DOUBLE
53729: LD_INT 1
53731: DEC
53732: ST_TO_ADDR
53733: LD_EXP 39
53737: PUSH
53738: FOR_TO
53739: IFFALSE 53844
// begin tmp := 0 ;
53741: LD_ADDR_VAR 0 3
53745: PUSH
53746: LD_STRING 0
53748: ST_TO_ADDR
// if result [ 2 ] then
53749: LD_VAR 0 2
53753: PUSH
53754: LD_INT 2
53756: ARRAY
53757: IFFALSE 53826
// if result [ 2 ] [ 1 ] = 100 + i then
53759: LD_VAR 0 2
53763: PUSH
53764: LD_INT 2
53766: ARRAY
53767: PUSH
53768: LD_INT 1
53770: ARRAY
53771: PUSH
53772: LD_INT 100
53774: PUSH
53775: LD_VAR 0 8
53779: PLUS
53780: EQUAL
53781: IFFALSE 53826
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
53783: LD_ADDR_VAR 0 2
53787: PUSH
53788: LD_VAR 0 2
53792: PPUSH
53793: LD_INT 2
53795: PPUSH
53796: LD_VAR 0 2
53800: PUSH
53801: LD_INT 2
53803: ARRAY
53804: PPUSH
53805: LD_INT 1
53807: PPUSH
53808: CALL_OW 3
53812: PPUSH
53813: CALL_OW 1
53817: ST_TO_ADDR
// tmp := 1 ;
53818: LD_ADDR_VAR 0 3
53822: PUSH
53823: LD_STRING 1
53825: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
53826: LD_ADDR_VAR 0 6
53830: PUSH
53831: LD_VAR 0 6
53835: PUSH
53836: LD_VAR 0 3
53840: STR
53841: ST_TO_ADDR
// end ;
53842: GO 53738
53844: POP
53845: POP
// if isGameLoad then
53846: LD_VAR 0 1
53850: IFFALSE 54325
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
53852: LD_ADDR_VAR 0 4
53856: PUSH
53857: LD_EXP 42
53861: PUSH
53862: LD_EXP 41
53866: PUSH
53867: LD_EXP 43
53871: PUSH
53872: LD_EXP 40
53876: PUSH
53877: LD_EXP 44
53881: PUSH
53882: LD_EXP 45
53886: PUSH
53887: LD_EXP 46
53891: PUSH
53892: LD_EXP 47
53896: PUSH
53897: LD_EXP 48
53901: PUSH
53902: LD_EXP 49
53906: PUSH
53907: LD_EXP 50
53911: PUSH
53912: LD_EXP 51
53916: PUSH
53917: LD_EXP 52
53921: PUSH
53922: LD_EXP 53
53926: PUSH
53927: LD_EXP 61
53931: PUSH
53932: LD_EXP 62
53936: PUSH
53937: LD_EXP 63
53941: PUSH
53942: LD_EXP 64
53946: PUSH
53947: LD_EXP 66
53951: PUSH
53952: LD_EXP 67
53956: PUSH
53957: LD_EXP 68
53961: PUSH
53962: LD_EXP 71
53966: PUSH
53967: LD_EXP 73
53971: PUSH
53972: LD_EXP 74
53976: PUSH
53977: LD_EXP 75
53981: PUSH
53982: LD_EXP 77
53986: PUSH
53987: LD_EXP 78
53991: PUSH
53992: LD_EXP 81
53996: PUSH
53997: LD_EXP 82
54001: PUSH
54002: LD_EXP 83
54006: PUSH
54007: LD_EXP 84
54011: PUSH
54012: LD_EXP 85
54016: PUSH
54017: LD_EXP 86
54021: PUSH
54022: LD_EXP 87
54026: PUSH
54027: LD_EXP 88
54031: PUSH
54032: LD_EXP 89
54036: PUSH
54037: LD_EXP 54
54041: PUSH
54042: LD_EXP 55
54046: PUSH
54047: LD_EXP 58
54051: PUSH
54052: LD_EXP 59
54056: PUSH
54057: LD_EXP 60
54061: PUSH
54062: LD_EXP 56
54066: PUSH
54067: LD_EXP 57
54071: PUSH
54072: LD_EXP 65
54076: PUSH
54077: LD_EXP 69
54081: PUSH
54082: LD_EXP 70
54086: PUSH
54087: LD_EXP 72
54091: PUSH
54092: LD_EXP 76
54096: PUSH
54097: LD_EXP 79
54101: PUSH
54102: LD_EXP 80
54106: PUSH
54107: LD_EXP 90
54111: PUSH
54112: LD_EXP 91
54116: PUSH
54117: LD_EXP 92
54121: PUSH
54122: LD_EXP 93
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: ST_TO_ADDR
// tmp :=  ;
54183: LD_ADDR_VAR 0 3
54187: PUSH
54188: LD_STRING 
54190: ST_TO_ADDR
// for i = 1 to normalCounter do
54191: LD_ADDR_VAR 0 8
54195: PUSH
54196: DOUBLE
54197: LD_INT 1
54199: DEC
54200: ST_TO_ADDR
54201: LD_EXP 38
54205: PUSH
54206: FOR_TO
54207: IFFALSE 54243
// begin if flags [ i ] then
54209: LD_VAR 0 4
54213: PUSH
54214: LD_VAR 0 8
54218: ARRAY
54219: IFFALSE 54241
// tmp := tmp & i & ; ;
54221: LD_ADDR_VAR 0 3
54225: PUSH
54226: LD_VAR 0 3
54230: PUSH
54231: LD_VAR 0 8
54235: STR
54236: PUSH
54237: LD_STRING ;
54239: STR
54240: ST_TO_ADDR
// end ;
54241: GO 54206
54243: POP
54244: POP
// for i = 1 to hardcoreCounter do
54245: LD_ADDR_VAR 0 8
54249: PUSH
54250: DOUBLE
54251: LD_INT 1
54253: DEC
54254: ST_TO_ADDR
54255: LD_EXP 39
54259: PUSH
54260: FOR_TO
54261: IFFALSE 54307
// begin if flags [ normalCounter + i ] then
54263: LD_VAR 0 4
54267: PUSH
54268: LD_EXP 38
54272: PUSH
54273: LD_VAR 0 8
54277: PLUS
54278: ARRAY
54279: IFFALSE 54305
// tmp := tmp & ( 100 + i ) & ; ;
54281: LD_ADDR_VAR 0 3
54285: PUSH
54286: LD_VAR 0 3
54290: PUSH
54291: LD_INT 100
54293: PUSH
54294: LD_VAR 0 8
54298: PLUS
54299: STR
54300: PUSH
54301: LD_STRING ;
54303: STR
54304: ST_TO_ADDR
// end ;
54305: GO 54260
54307: POP
54308: POP
// if tmp then
54309: LD_VAR 0 3
54313: IFFALSE 54325
// active := tmp ;
54315: LD_ADDR_VAR 0 7
54319: PUSH
54320: LD_VAR 0 3
54324: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
54325: LD_STRING getStreamItemsFromMission("
54327: PUSH
54328: LD_VAR 0 5
54332: STR
54333: PUSH
54334: LD_STRING ","
54336: STR
54337: PUSH
54338: LD_VAR 0 6
54342: STR
54343: PUSH
54344: LD_STRING ","
54346: STR
54347: PUSH
54348: LD_VAR 0 7
54352: STR
54353: PUSH
54354: LD_STRING ")
54356: STR
54357: PPUSH
54358: CALL_OW 559
// end else
54362: GO 54371
// ToLua ( getStreamItemsFromMission("","","") ) ;
54364: LD_STRING getStreamItemsFromMission("","","")
54366: PPUSH
54367: CALL_OW 559
// end ;
54371: LD_VAR 0 2
54375: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
54376: LD_EXP 37
54380: PUSH
54381: LD_EXP 42
54385: AND
54386: IFFALSE 54510
54388: GO 54390
54390: DISABLE
54391: LD_INT 0
54393: PPUSH
54394: PPUSH
// begin enable ;
54395: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
54396: LD_ADDR_VAR 0 2
54400: PUSH
54401: LD_INT 22
54403: PUSH
54404: LD_OWVAR 2
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 2
54415: PUSH
54416: LD_INT 34
54418: PUSH
54419: LD_INT 7
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 34
54428: PUSH
54429: LD_INT 45
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 34
54438: PUSH
54439: LD_INT 28
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 34
54448: PUSH
54449: LD_INT 47
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PPUSH
54467: CALL_OW 69
54471: ST_TO_ADDR
// if not tmp then
54472: LD_VAR 0 2
54476: NOT
54477: IFFALSE 54481
// exit ;
54479: GO 54510
// for i in tmp do
54481: LD_ADDR_VAR 0 1
54485: PUSH
54486: LD_VAR 0 2
54490: PUSH
54491: FOR_IN
54492: IFFALSE 54508
// begin SetLives ( i , 0 ) ;
54494: LD_VAR 0 1
54498: PPUSH
54499: LD_INT 0
54501: PPUSH
54502: CALL_OW 234
// end ;
54506: GO 54491
54508: POP
54509: POP
// end ;
54510: PPOPN 2
54512: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
54513: LD_EXP 37
54517: PUSH
54518: LD_EXP 43
54522: AND
54523: IFFALSE 54607
54525: GO 54527
54527: DISABLE
54528: LD_INT 0
54530: PPUSH
54531: PPUSH
// begin enable ;
54532: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
54533: LD_ADDR_VAR 0 2
54537: PUSH
54538: LD_INT 22
54540: PUSH
54541: LD_OWVAR 2
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 32
54552: PUSH
54553: LD_INT 3
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PPUSH
54564: CALL_OW 69
54568: ST_TO_ADDR
// if not tmp then
54569: LD_VAR 0 2
54573: NOT
54574: IFFALSE 54578
// exit ;
54576: GO 54607
// for i in tmp do
54578: LD_ADDR_VAR 0 1
54582: PUSH
54583: LD_VAR 0 2
54587: PUSH
54588: FOR_IN
54589: IFFALSE 54605
// begin SetLives ( i , 0 ) ;
54591: LD_VAR 0 1
54595: PPUSH
54596: LD_INT 0
54598: PPUSH
54599: CALL_OW 234
// end ;
54603: GO 54588
54605: POP
54606: POP
// end ;
54607: PPOPN 2
54609: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
54610: LD_EXP 37
54614: PUSH
54615: LD_EXP 40
54619: AND
54620: IFFALSE 54713
54622: GO 54624
54624: DISABLE
54625: LD_INT 0
54627: PPUSH
// begin enable ;
54628: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
54629: LD_ADDR_VAR 0 1
54633: PUSH
54634: LD_INT 22
54636: PUSH
54637: LD_OWVAR 2
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 2
54648: PUSH
54649: LD_INT 25
54651: PUSH
54652: LD_INT 5
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 25
54661: PUSH
54662: LD_INT 9
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 25
54671: PUSH
54672: LD_INT 8
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PPUSH
54689: CALL_OW 69
54693: PUSH
54694: FOR_IN
54695: IFFALSE 54711
// begin SetClass ( i , 1 ) ;
54697: LD_VAR 0 1
54701: PPUSH
54702: LD_INT 1
54704: PPUSH
54705: CALL_OW 336
// end ;
54709: GO 54694
54711: POP
54712: POP
// end ;
54713: PPOPN 1
54715: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
54716: LD_EXP 37
54720: PUSH
54721: LD_EXP 41
54725: AND
54726: PUSH
54727: LD_OWVAR 65
54731: PUSH
54732: LD_INT 7
54734: LESS
54735: AND
54736: IFFALSE 54750
54738: GO 54740
54740: DISABLE
// begin enable ;
54741: ENABLE
// game_speed := 7 ;
54742: LD_ADDR_OWVAR 65
54746: PUSH
54747: LD_INT 7
54749: ST_TO_ADDR
// end ;
54750: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
54751: LD_EXP 37
54755: PUSH
54756: LD_EXP 44
54760: AND
54761: IFFALSE 54963
54763: GO 54765
54765: DISABLE
54766: LD_INT 0
54768: PPUSH
54769: PPUSH
54770: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
54771: LD_ADDR_VAR 0 3
54775: PUSH
54776: LD_INT 81
54778: PUSH
54779: LD_OWVAR 2
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 21
54790: PUSH
54791: LD_INT 1
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PPUSH
54802: CALL_OW 69
54806: ST_TO_ADDR
// if not tmp then
54807: LD_VAR 0 3
54811: NOT
54812: IFFALSE 54816
// exit ;
54814: GO 54963
// if tmp > 5 then
54816: LD_VAR 0 3
54820: PUSH
54821: LD_INT 5
54823: GREATER
54824: IFFALSE 54836
// k := 5 else
54826: LD_ADDR_VAR 0 2
54830: PUSH
54831: LD_INT 5
54833: ST_TO_ADDR
54834: GO 54846
// k := tmp ;
54836: LD_ADDR_VAR 0 2
54840: PUSH
54841: LD_VAR 0 3
54845: ST_TO_ADDR
// for i := 1 to k do
54846: LD_ADDR_VAR 0 1
54850: PUSH
54851: DOUBLE
54852: LD_INT 1
54854: DEC
54855: ST_TO_ADDR
54856: LD_VAR 0 2
54860: PUSH
54861: FOR_TO
54862: IFFALSE 54961
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
54864: LD_VAR 0 3
54868: PUSH
54869: LD_VAR 0 1
54873: ARRAY
54874: PPUSH
54875: LD_VAR 0 1
54879: PUSH
54880: LD_INT 4
54882: MOD
54883: PUSH
54884: LD_INT 1
54886: PLUS
54887: PPUSH
54888: CALL_OW 259
54892: PUSH
54893: LD_INT 10
54895: LESS
54896: IFFALSE 54959
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
54898: LD_VAR 0 3
54902: PUSH
54903: LD_VAR 0 1
54907: ARRAY
54908: PPUSH
54909: LD_VAR 0 1
54913: PUSH
54914: LD_INT 4
54916: MOD
54917: PUSH
54918: LD_INT 1
54920: PLUS
54921: PPUSH
54922: LD_VAR 0 3
54926: PUSH
54927: LD_VAR 0 1
54931: ARRAY
54932: PPUSH
54933: LD_VAR 0 1
54937: PUSH
54938: LD_INT 4
54940: MOD
54941: PUSH
54942: LD_INT 1
54944: PLUS
54945: PPUSH
54946: CALL_OW 259
54950: PUSH
54951: LD_INT 1
54953: PLUS
54954: PPUSH
54955: CALL_OW 237
54959: GO 54861
54961: POP
54962: POP
// end ;
54963: PPOPN 3
54965: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
54966: LD_EXP 37
54970: PUSH
54971: LD_EXP 45
54975: AND
54976: IFFALSE 54996
54978: GO 54980
54980: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
54981: LD_INT 4
54983: PPUSH
54984: LD_OWVAR 2
54988: PPUSH
54989: LD_INT 0
54991: PPUSH
54992: CALL_OW 324
54996: END
// every 0 0$1 trigger StreamModeActive and sShovel do
54997: LD_EXP 37
55001: PUSH
55002: LD_EXP 74
55006: AND
55007: IFFALSE 55027
55009: GO 55011
55011: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
55012: LD_INT 19
55014: PPUSH
55015: LD_OWVAR 2
55019: PPUSH
55020: LD_INT 0
55022: PPUSH
55023: CALL_OW 324
55027: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
55028: LD_EXP 37
55032: PUSH
55033: LD_EXP 46
55037: AND
55038: IFFALSE 55140
55040: GO 55042
55042: DISABLE
55043: LD_INT 0
55045: PPUSH
55046: PPUSH
// begin enable ;
55047: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
55048: LD_ADDR_VAR 0 2
55052: PUSH
55053: LD_INT 22
55055: PUSH
55056: LD_OWVAR 2
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 2
55067: PUSH
55068: LD_INT 34
55070: PUSH
55071: LD_INT 11
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 34
55080: PUSH
55081: LD_INT 30
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: LIST
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PPUSH
55097: CALL_OW 69
55101: ST_TO_ADDR
// if not tmp then
55102: LD_VAR 0 2
55106: NOT
55107: IFFALSE 55111
// exit ;
55109: GO 55140
// for i in tmp do
55111: LD_ADDR_VAR 0 1
55115: PUSH
55116: LD_VAR 0 2
55120: PUSH
55121: FOR_IN
55122: IFFALSE 55138
// begin SetLives ( i , 0 ) ;
55124: LD_VAR 0 1
55128: PPUSH
55129: LD_INT 0
55131: PPUSH
55132: CALL_OW 234
// end ;
55136: GO 55121
55138: POP
55139: POP
// end ;
55140: PPOPN 2
55142: END
// every 0 0$1 trigger StreamModeActive and sBunker do
55143: LD_EXP 37
55147: PUSH
55148: LD_EXP 47
55152: AND
55153: IFFALSE 55173
55155: GO 55157
55157: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
55158: LD_INT 32
55160: PPUSH
55161: LD_OWVAR 2
55165: PPUSH
55166: LD_INT 0
55168: PPUSH
55169: CALL_OW 324
55173: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
55174: LD_EXP 37
55178: PUSH
55179: LD_EXP 48
55183: AND
55184: IFFALSE 55365
55186: GO 55188
55188: DISABLE
55189: LD_INT 0
55191: PPUSH
55192: PPUSH
55193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
55194: LD_ADDR_VAR 0 2
55198: PUSH
55199: LD_INT 22
55201: PUSH
55202: LD_OWVAR 2
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 33
55213: PUSH
55214: LD_INT 3
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PPUSH
55225: CALL_OW 69
55229: ST_TO_ADDR
// if not tmp then
55230: LD_VAR 0 2
55234: NOT
55235: IFFALSE 55239
// exit ;
55237: GO 55365
// side := 0 ;
55239: LD_ADDR_VAR 0 3
55243: PUSH
55244: LD_INT 0
55246: ST_TO_ADDR
// for i := 1 to 8 do
55247: LD_ADDR_VAR 0 1
55251: PUSH
55252: DOUBLE
55253: LD_INT 1
55255: DEC
55256: ST_TO_ADDR
55257: LD_INT 8
55259: PUSH
55260: FOR_TO
55261: IFFALSE 55309
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
55263: LD_OWVAR 2
55267: PUSH
55268: LD_VAR 0 1
55272: NONEQUAL
55273: PUSH
55274: LD_OWVAR 2
55278: PPUSH
55279: LD_VAR 0 1
55283: PPUSH
55284: CALL_OW 81
55288: PUSH
55289: LD_INT 2
55291: EQUAL
55292: AND
55293: IFFALSE 55307
// begin side := i ;
55295: LD_ADDR_VAR 0 3
55299: PUSH
55300: LD_VAR 0 1
55304: ST_TO_ADDR
// break ;
55305: GO 55309
// end ;
55307: GO 55260
55309: POP
55310: POP
// if not side then
55311: LD_VAR 0 3
55315: NOT
55316: IFFALSE 55320
// exit ;
55318: GO 55365
// for i := 1 to tmp do
55320: LD_ADDR_VAR 0 1
55324: PUSH
55325: DOUBLE
55326: LD_INT 1
55328: DEC
55329: ST_TO_ADDR
55330: LD_VAR 0 2
55334: PUSH
55335: FOR_TO
55336: IFFALSE 55363
// if Prob ( 60 ) then
55338: LD_INT 60
55340: PPUSH
55341: CALL_OW 13
55345: IFFALSE 55361
// SetSide ( i , side ) ;
55347: LD_VAR 0 1
55351: PPUSH
55352: LD_VAR 0 3
55356: PPUSH
55357: CALL_OW 235
55361: GO 55335
55363: POP
55364: POP
// end ;
55365: PPOPN 3
55367: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
55368: LD_EXP 37
55372: PUSH
55373: LD_EXP 50
55377: AND
55378: IFFALSE 55497
55380: GO 55382
55382: DISABLE
55383: LD_INT 0
55385: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
55386: LD_ADDR_VAR 0 1
55390: PUSH
55391: LD_INT 22
55393: PUSH
55394: LD_OWVAR 2
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 21
55405: PUSH
55406: LD_INT 1
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 3
55415: PUSH
55416: LD_INT 23
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: LIST
55434: PPUSH
55435: CALL_OW 69
55439: PUSH
55440: FOR_IN
55441: IFFALSE 55495
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
55443: LD_VAR 0 1
55447: PPUSH
55448: CALL_OW 257
55452: PUSH
55453: LD_INT 1
55455: PUSH
55456: LD_INT 2
55458: PUSH
55459: LD_INT 3
55461: PUSH
55462: LD_INT 4
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: IN
55471: IFFALSE 55493
// SetClass ( un , rand ( 1 , 4 ) ) ;
55473: LD_VAR 0 1
55477: PPUSH
55478: LD_INT 1
55480: PPUSH
55481: LD_INT 4
55483: PPUSH
55484: CALL_OW 12
55488: PPUSH
55489: CALL_OW 336
55493: GO 55440
55495: POP
55496: POP
// end ;
55497: PPOPN 1
55499: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
55500: LD_EXP 37
55504: PUSH
55505: LD_EXP 49
55509: AND
55510: IFFALSE 55589
55512: GO 55514
55514: DISABLE
55515: LD_INT 0
55517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55518: LD_ADDR_VAR 0 1
55522: PUSH
55523: LD_INT 22
55525: PUSH
55526: LD_OWVAR 2
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 21
55537: PUSH
55538: LD_INT 3
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PPUSH
55549: CALL_OW 69
55553: ST_TO_ADDR
// if not tmp then
55554: LD_VAR 0 1
55558: NOT
55559: IFFALSE 55563
// exit ;
55561: GO 55589
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
55563: LD_VAR 0 1
55567: PUSH
55568: LD_INT 1
55570: PPUSH
55571: LD_VAR 0 1
55575: PPUSH
55576: CALL_OW 12
55580: ARRAY
55581: PPUSH
55582: LD_INT 100
55584: PPUSH
55585: CALL_OW 234
// end ;
55589: PPOPN 1
55591: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
55592: LD_EXP 37
55596: PUSH
55597: LD_EXP 51
55601: AND
55602: IFFALSE 55700
55604: GO 55606
55606: DISABLE
55607: LD_INT 0
55609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55610: LD_ADDR_VAR 0 1
55614: PUSH
55615: LD_INT 22
55617: PUSH
55618: LD_OWVAR 2
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 21
55629: PUSH
55630: LD_INT 1
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PPUSH
55641: CALL_OW 69
55645: ST_TO_ADDR
// if not tmp then
55646: LD_VAR 0 1
55650: NOT
55651: IFFALSE 55655
// exit ;
55653: GO 55700
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
55655: LD_VAR 0 1
55659: PUSH
55660: LD_INT 1
55662: PPUSH
55663: LD_VAR 0 1
55667: PPUSH
55668: CALL_OW 12
55672: ARRAY
55673: PPUSH
55674: LD_INT 1
55676: PPUSH
55677: LD_INT 4
55679: PPUSH
55680: CALL_OW 12
55684: PPUSH
55685: LD_INT 3000
55687: PPUSH
55688: LD_INT 9000
55690: PPUSH
55691: CALL_OW 12
55695: PPUSH
55696: CALL_OW 492
// end ;
55700: PPOPN 1
55702: END
// every 0 0$1 trigger StreamModeActive and sDepot do
55703: LD_EXP 37
55707: PUSH
55708: LD_EXP 52
55712: AND
55713: IFFALSE 55733
55715: GO 55717
55717: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
55718: LD_INT 1
55720: PPUSH
55721: LD_OWVAR 2
55725: PPUSH
55726: LD_INT 0
55728: PPUSH
55729: CALL_OW 324
55733: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
55734: LD_EXP 37
55738: PUSH
55739: LD_EXP 53
55743: AND
55744: IFFALSE 55827
55746: GO 55748
55748: DISABLE
55749: LD_INT 0
55751: PPUSH
55752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55753: LD_ADDR_VAR 0 2
55757: PUSH
55758: LD_INT 22
55760: PUSH
55761: LD_OWVAR 2
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 21
55772: PUSH
55773: LD_INT 3
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PPUSH
55784: CALL_OW 69
55788: ST_TO_ADDR
// if not tmp then
55789: LD_VAR 0 2
55793: NOT
55794: IFFALSE 55798
// exit ;
55796: GO 55827
// for i in tmp do
55798: LD_ADDR_VAR 0 1
55802: PUSH
55803: LD_VAR 0 2
55807: PUSH
55808: FOR_IN
55809: IFFALSE 55825
// SetBLevel ( i , 10 ) ;
55811: LD_VAR 0 1
55815: PPUSH
55816: LD_INT 10
55818: PPUSH
55819: CALL_OW 241
55823: GO 55808
55825: POP
55826: POP
// end ;
55827: PPOPN 2
55829: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
55830: LD_EXP 37
55834: PUSH
55835: LD_EXP 54
55839: AND
55840: IFFALSE 55951
55842: GO 55844
55844: DISABLE
55845: LD_INT 0
55847: PPUSH
55848: PPUSH
55849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55850: LD_ADDR_VAR 0 3
55854: PUSH
55855: LD_INT 22
55857: PUSH
55858: LD_OWVAR 2
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 25
55869: PUSH
55870: LD_INT 1
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PPUSH
55881: CALL_OW 69
55885: ST_TO_ADDR
// if not tmp then
55886: LD_VAR 0 3
55890: NOT
55891: IFFALSE 55895
// exit ;
55893: GO 55951
// un := tmp [ rand ( 1 , tmp ) ] ;
55895: LD_ADDR_VAR 0 2
55899: PUSH
55900: LD_VAR 0 3
55904: PUSH
55905: LD_INT 1
55907: PPUSH
55908: LD_VAR 0 3
55912: PPUSH
55913: CALL_OW 12
55917: ARRAY
55918: ST_TO_ADDR
// if Crawls ( un ) then
55919: LD_VAR 0 2
55923: PPUSH
55924: CALL_OW 318
55928: IFFALSE 55939
// ComWalk ( un ) ;
55930: LD_VAR 0 2
55934: PPUSH
55935: CALL_OW 138
// SetClass ( un , class_sniper ) ;
55939: LD_VAR 0 2
55943: PPUSH
55944: LD_INT 5
55946: PPUSH
55947: CALL_OW 336
// end ;
55951: PPOPN 3
55953: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
55954: LD_EXP 37
55958: PUSH
55959: LD_EXP 55
55963: AND
55964: PUSH
55965: LD_OWVAR 67
55969: PUSH
55970: LD_INT 4
55972: LESS
55973: AND
55974: IFFALSE 55993
55976: GO 55978
55978: DISABLE
// begin Difficulty := Difficulty + 1 ;
55979: LD_ADDR_OWVAR 67
55983: PUSH
55984: LD_OWVAR 67
55988: PUSH
55989: LD_INT 1
55991: PLUS
55992: ST_TO_ADDR
// end ;
55993: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
55994: LD_EXP 37
55998: PUSH
55999: LD_EXP 56
56003: AND
56004: IFFALSE 56107
56006: GO 56008
56008: DISABLE
56009: LD_INT 0
56011: PPUSH
// begin for i := 1 to 5 do
56012: LD_ADDR_VAR 0 1
56016: PUSH
56017: DOUBLE
56018: LD_INT 1
56020: DEC
56021: ST_TO_ADDR
56022: LD_INT 5
56024: PUSH
56025: FOR_TO
56026: IFFALSE 56105
// begin uc_nation := nation_nature ;
56028: LD_ADDR_OWVAR 21
56032: PUSH
56033: LD_INT 0
56035: ST_TO_ADDR
// uc_side := 0 ;
56036: LD_ADDR_OWVAR 20
56040: PUSH
56041: LD_INT 0
56043: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56044: LD_ADDR_OWVAR 29
56048: PUSH
56049: LD_INT 12
56051: PUSH
56052: LD_INT 12
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: ST_TO_ADDR
// hc_agressivity := 20 ;
56059: LD_ADDR_OWVAR 35
56063: PUSH
56064: LD_INT 20
56066: ST_TO_ADDR
// hc_class := class_tiger ;
56067: LD_ADDR_OWVAR 28
56071: PUSH
56072: LD_INT 14
56074: ST_TO_ADDR
// hc_gallery :=  ;
56075: LD_ADDR_OWVAR 33
56079: PUSH
56080: LD_STRING 
56082: ST_TO_ADDR
// hc_name :=  ;
56083: LD_ADDR_OWVAR 26
56087: PUSH
56088: LD_STRING 
56090: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
56091: CALL_OW 44
56095: PPUSH
56096: LD_INT 0
56098: PPUSH
56099: CALL_OW 51
// end ;
56103: GO 56025
56105: POP
56106: POP
// end ;
56107: PPOPN 1
56109: END
// every 0 0$1 trigger StreamModeActive and sBomb do
56110: LD_EXP 37
56114: PUSH
56115: LD_EXP 57
56119: AND
56120: IFFALSE 56129
56122: GO 56124
56124: DISABLE
// StreamSibBomb ;
56125: CALL 56130 0 0
56129: END
// export function StreamSibBomb ; var i , x , y ; begin
56130: LD_INT 0
56132: PPUSH
56133: PPUSH
56134: PPUSH
56135: PPUSH
// result := false ;
56136: LD_ADDR_VAR 0 1
56140: PUSH
56141: LD_INT 0
56143: ST_TO_ADDR
// for i := 1 to 16 do
56144: LD_ADDR_VAR 0 2
56148: PUSH
56149: DOUBLE
56150: LD_INT 1
56152: DEC
56153: ST_TO_ADDR
56154: LD_INT 16
56156: PUSH
56157: FOR_TO
56158: IFFALSE 56357
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
56160: LD_ADDR_VAR 0 3
56164: PUSH
56165: LD_INT 10
56167: PUSH
56168: LD_INT 20
56170: PUSH
56171: LD_INT 30
56173: PUSH
56174: LD_INT 40
56176: PUSH
56177: LD_INT 50
56179: PUSH
56180: LD_INT 60
56182: PUSH
56183: LD_INT 70
56185: PUSH
56186: LD_INT 80
56188: PUSH
56189: LD_INT 90
56191: PUSH
56192: LD_INT 100
56194: PUSH
56195: LD_INT 110
56197: PUSH
56198: LD_INT 120
56200: PUSH
56201: LD_INT 130
56203: PUSH
56204: LD_INT 140
56206: PUSH
56207: LD_INT 150
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 1
56229: PPUSH
56230: LD_INT 15
56232: PPUSH
56233: CALL_OW 12
56237: ARRAY
56238: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
56239: LD_ADDR_VAR 0 4
56243: PUSH
56244: LD_INT 10
56246: PUSH
56247: LD_INT 20
56249: PUSH
56250: LD_INT 30
56252: PUSH
56253: LD_INT 40
56255: PUSH
56256: LD_INT 50
56258: PUSH
56259: LD_INT 60
56261: PUSH
56262: LD_INT 70
56264: PUSH
56265: LD_INT 80
56267: PUSH
56268: LD_INT 90
56270: PUSH
56271: LD_INT 100
56273: PUSH
56274: LD_INT 110
56276: PUSH
56277: LD_INT 120
56279: PUSH
56280: LD_INT 130
56282: PUSH
56283: LD_INT 140
56285: PUSH
56286: LD_INT 150
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 1
56308: PPUSH
56309: LD_INT 15
56311: PPUSH
56312: CALL_OW 12
56316: ARRAY
56317: ST_TO_ADDR
// if ValidHex ( x , y ) then
56318: LD_VAR 0 3
56322: PPUSH
56323: LD_VAR 0 4
56327: PPUSH
56328: CALL_OW 488
56332: IFFALSE 56355
// begin result := [ x , y ] ;
56334: LD_ADDR_VAR 0 1
56338: PUSH
56339: LD_VAR 0 3
56343: PUSH
56344: LD_VAR 0 4
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: ST_TO_ADDR
// break ;
56353: GO 56357
// end ; end ;
56355: GO 56157
56357: POP
56358: POP
// if result then
56359: LD_VAR 0 1
56363: IFFALSE 56423
// begin ToLua ( playSibBomb() ) ;
56365: LD_STRING playSibBomb()
56367: PPUSH
56368: CALL_OW 559
// wait ( 0 0$14 ) ;
56372: LD_INT 490
56374: PPUSH
56375: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
56379: LD_VAR 0 1
56383: PUSH
56384: LD_INT 1
56386: ARRAY
56387: PPUSH
56388: LD_VAR 0 1
56392: PUSH
56393: LD_INT 2
56395: ARRAY
56396: PPUSH
56397: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
56401: LD_VAR 0 1
56405: PUSH
56406: LD_INT 1
56408: ARRAY
56409: PPUSH
56410: LD_VAR 0 1
56414: PUSH
56415: LD_INT 2
56417: ARRAY
56418: PPUSH
56419: CALL_OW 429
// end ; end ;
56423: LD_VAR 0 1
56427: RET
// every 0 0$1 trigger StreamModeActive and sReset do
56428: LD_EXP 37
56432: PUSH
56433: LD_EXP 59
56437: AND
56438: IFFALSE 56450
56440: GO 56442
56442: DISABLE
// YouLost (  ) ;
56443: LD_STRING 
56445: PPUSH
56446: CALL_OW 104
56450: END
// every 0 0$1 trigger StreamModeActive and sFog do
56451: LD_EXP 37
56455: PUSH
56456: LD_EXP 58
56460: AND
56461: IFFALSE 56475
56463: GO 56465
56465: DISABLE
// FogOff ( your_side ) ;
56466: LD_OWVAR 2
56470: PPUSH
56471: CALL_OW 344
56475: END
// every 0 0$1 trigger StreamModeActive and sSun do
56476: LD_EXP 37
56480: PUSH
56481: LD_EXP 60
56485: AND
56486: IFFALSE 56514
56488: GO 56490
56490: DISABLE
// begin solar_recharge_percent := 0 ;
56491: LD_ADDR_OWVAR 79
56495: PUSH
56496: LD_INT 0
56498: ST_TO_ADDR
// wait ( 5 5$00 ) ;
56499: LD_INT 10500
56501: PPUSH
56502: CALL_OW 67
// solar_recharge_percent := 100 ;
56506: LD_ADDR_OWVAR 79
56510: PUSH
56511: LD_INT 100
56513: ST_TO_ADDR
// end ;
56514: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
56515: LD_EXP 37
56519: PUSH
56520: LD_EXP 61
56524: AND
56525: IFFALSE 56764
56527: GO 56529
56529: DISABLE
56530: LD_INT 0
56532: PPUSH
56533: PPUSH
56534: PPUSH
// begin tmp := [ ] ;
56535: LD_ADDR_VAR 0 3
56539: PUSH
56540: EMPTY
56541: ST_TO_ADDR
// for i := 1 to 6 do
56542: LD_ADDR_VAR 0 1
56546: PUSH
56547: DOUBLE
56548: LD_INT 1
56550: DEC
56551: ST_TO_ADDR
56552: LD_INT 6
56554: PUSH
56555: FOR_TO
56556: IFFALSE 56661
// begin uc_nation := nation_nature ;
56558: LD_ADDR_OWVAR 21
56562: PUSH
56563: LD_INT 0
56565: ST_TO_ADDR
// uc_side := 0 ;
56566: LD_ADDR_OWVAR 20
56570: PUSH
56571: LD_INT 0
56573: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56574: LD_ADDR_OWVAR 29
56578: PUSH
56579: LD_INT 12
56581: PUSH
56582: LD_INT 12
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: ST_TO_ADDR
// hc_agressivity := 20 ;
56589: LD_ADDR_OWVAR 35
56593: PUSH
56594: LD_INT 20
56596: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
56597: LD_ADDR_OWVAR 28
56601: PUSH
56602: LD_INT 17
56604: ST_TO_ADDR
// hc_gallery :=  ;
56605: LD_ADDR_OWVAR 33
56609: PUSH
56610: LD_STRING 
56612: ST_TO_ADDR
// hc_name :=  ;
56613: LD_ADDR_OWVAR 26
56617: PUSH
56618: LD_STRING 
56620: ST_TO_ADDR
// un := CreateHuman ;
56621: LD_ADDR_VAR 0 2
56625: PUSH
56626: CALL_OW 44
56630: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
56631: LD_VAR 0 2
56635: PPUSH
56636: LD_INT 1
56638: PPUSH
56639: CALL_OW 51
// tmp := tmp ^ un ;
56643: LD_ADDR_VAR 0 3
56647: PUSH
56648: LD_VAR 0 3
56652: PUSH
56653: LD_VAR 0 2
56657: ADD
56658: ST_TO_ADDR
// end ;
56659: GO 56555
56661: POP
56662: POP
// repeat wait ( 0 0$1 ) ;
56663: LD_INT 35
56665: PPUSH
56666: CALL_OW 67
// for un in tmp do
56670: LD_ADDR_VAR 0 2
56674: PUSH
56675: LD_VAR 0 3
56679: PUSH
56680: FOR_IN
56681: IFFALSE 56755
// begin if IsDead ( un ) then
56683: LD_VAR 0 2
56687: PPUSH
56688: CALL_OW 301
56692: IFFALSE 56712
// begin tmp := tmp diff un ;
56694: LD_ADDR_VAR 0 3
56698: PUSH
56699: LD_VAR 0 3
56703: PUSH
56704: LD_VAR 0 2
56708: DIFF
56709: ST_TO_ADDR
// continue ;
56710: GO 56680
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
56712: LD_VAR 0 2
56716: PPUSH
56717: LD_INT 3
56719: PUSH
56720: LD_INT 22
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PPUSH
56734: CALL_OW 69
56738: PPUSH
56739: LD_VAR 0 2
56743: PPUSH
56744: CALL_OW 74
56748: PPUSH
56749: CALL_OW 115
// end ;
56753: GO 56680
56755: POP
56756: POP
// until not tmp ;
56757: LD_VAR 0 3
56761: NOT
56762: IFFALSE 56663
// end ;
56764: PPOPN 3
56766: END
// every 0 0$1 trigger StreamModeActive and sTroll do
56767: LD_EXP 37
56771: PUSH
56772: LD_EXP 62
56776: AND
56777: IFFALSE 56831
56779: GO 56781
56781: DISABLE
// begin ToLua ( displayTroll(); ) ;
56782: LD_STRING displayTroll();
56784: PPUSH
56785: CALL_OW 559
// wait ( 3 3$00 ) ;
56789: LD_INT 6300
56791: PPUSH
56792: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56796: LD_STRING hideTroll();
56798: PPUSH
56799: CALL_OW 559
// wait ( 1 1$00 ) ;
56803: LD_INT 2100
56805: PPUSH
56806: CALL_OW 67
// ToLua ( displayTroll(); ) ;
56810: LD_STRING displayTroll();
56812: PPUSH
56813: CALL_OW 559
// wait ( 1 1$00 ) ;
56817: LD_INT 2100
56819: PPUSH
56820: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56824: LD_STRING hideTroll();
56826: PPUSH
56827: CALL_OW 559
// end ;
56831: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
56832: LD_EXP 37
56836: PUSH
56837: LD_EXP 63
56841: AND
56842: IFFALSE 56905
56844: GO 56846
56846: DISABLE
56847: LD_INT 0
56849: PPUSH
// begin p := 0 ;
56850: LD_ADDR_VAR 0 1
56854: PUSH
56855: LD_INT 0
56857: ST_TO_ADDR
// repeat game_speed := 1 ;
56858: LD_ADDR_OWVAR 65
56862: PUSH
56863: LD_INT 1
56865: ST_TO_ADDR
// wait ( 0 0$1 ) ;
56866: LD_INT 35
56868: PPUSH
56869: CALL_OW 67
// p := p + 1 ;
56873: LD_ADDR_VAR 0 1
56877: PUSH
56878: LD_VAR 0 1
56882: PUSH
56883: LD_INT 1
56885: PLUS
56886: ST_TO_ADDR
// until p >= 60 ;
56887: LD_VAR 0 1
56891: PUSH
56892: LD_INT 60
56894: GREATEREQUAL
56895: IFFALSE 56858
// game_speed := 4 ;
56897: LD_ADDR_OWVAR 65
56901: PUSH
56902: LD_INT 4
56904: ST_TO_ADDR
// end ;
56905: PPOPN 1
56907: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
56908: LD_EXP 37
56912: PUSH
56913: LD_EXP 64
56917: AND
56918: IFFALSE 57064
56920: GO 56922
56922: DISABLE
56923: LD_INT 0
56925: PPUSH
56926: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56927: LD_ADDR_VAR 0 1
56931: PUSH
56932: LD_INT 22
56934: PUSH
56935: LD_OWVAR 2
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 2
56946: PUSH
56947: LD_INT 30
56949: PUSH
56950: LD_INT 0
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 30
56959: PUSH
56960: LD_INT 1
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: LIST
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PPUSH
56976: CALL_OW 69
56980: ST_TO_ADDR
// if not depot then
56981: LD_VAR 0 1
56985: NOT
56986: IFFALSE 56990
// exit ;
56988: GO 57064
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
56990: LD_ADDR_VAR 0 2
56994: PUSH
56995: LD_VAR 0 1
56999: PUSH
57000: LD_INT 1
57002: PPUSH
57003: LD_VAR 0 1
57007: PPUSH
57008: CALL_OW 12
57012: ARRAY
57013: PPUSH
57014: CALL_OW 274
57018: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
57019: LD_VAR 0 2
57023: PPUSH
57024: LD_INT 1
57026: PPUSH
57027: LD_INT 0
57029: PPUSH
57030: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
57034: LD_VAR 0 2
57038: PPUSH
57039: LD_INT 2
57041: PPUSH
57042: LD_INT 0
57044: PPUSH
57045: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
57049: LD_VAR 0 2
57053: PPUSH
57054: LD_INT 3
57056: PPUSH
57057: LD_INT 0
57059: PPUSH
57060: CALL_OW 277
// end ;
57064: PPOPN 2
57066: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
57067: LD_EXP 37
57071: PUSH
57072: LD_EXP 65
57076: AND
57077: IFFALSE 57174
57079: GO 57081
57081: DISABLE
57082: LD_INT 0
57084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57085: LD_ADDR_VAR 0 1
57089: PUSH
57090: LD_INT 22
57092: PUSH
57093: LD_OWVAR 2
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 21
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 3
57114: PUSH
57115: LD_INT 23
57117: PUSH
57118: LD_INT 0
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: LIST
57133: PPUSH
57134: CALL_OW 69
57138: ST_TO_ADDR
// if not tmp then
57139: LD_VAR 0 1
57143: NOT
57144: IFFALSE 57148
// exit ;
57146: GO 57174
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
57148: LD_VAR 0 1
57152: PUSH
57153: LD_INT 1
57155: PPUSH
57156: LD_VAR 0 1
57160: PPUSH
57161: CALL_OW 12
57165: ARRAY
57166: PPUSH
57167: LD_INT 200
57169: PPUSH
57170: CALL_OW 234
// end ;
57174: PPOPN 1
57176: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
57177: LD_EXP 37
57181: PUSH
57182: LD_EXP 66
57186: AND
57187: IFFALSE 57266
57189: GO 57191
57191: DISABLE
57192: LD_INT 0
57194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
57195: LD_ADDR_VAR 0 1
57199: PUSH
57200: LD_INT 22
57202: PUSH
57203: LD_OWVAR 2
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 21
57214: PUSH
57215: LD_INT 2
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PPUSH
57226: CALL_OW 69
57230: ST_TO_ADDR
// if not tmp then
57231: LD_VAR 0 1
57235: NOT
57236: IFFALSE 57240
// exit ;
57238: GO 57266
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
57240: LD_VAR 0 1
57244: PUSH
57245: LD_INT 1
57247: PPUSH
57248: LD_VAR 0 1
57252: PPUSH
57253: CALL_OW 12
57257: ARRAY
57258: PPUSH
57259: LD_INT 60
57261: PPUSH
57262: CALL_OW 234
// end ;
57266: PPOPN 1
57268: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
57269: LD_EXP 37
57273: PUSH
57274: LD_EXP 67
57278: AND
57279: IFFALSE 57378
57281: GO 57283
57283: DISABLE
57284: LD_INT 0
57286: PPUSH
57287: PPUSH
// begin enable ;
57288: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
57289: LD_ADDR_VAR 0 1
57293: PUSH
57294: LD_INT 22
57296: PUSH
57297: LD_OWVAR 2
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 61
57308: PUSH
57309: EMPTY
57310: LIST
57311: PUSH
57312: LD_INT 33
57314: PUSH
57315: LD_INT 2
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: LIST
57326: PPUSH
57327: CALL_OW 69
57331: ST_TO_ADDR
// if not tmp then
57332: LD_VAR 0 1
57336: NOT
57337: IFFALSE 57341
// exit ;
57339: GO 57378
// for i in tmp do
57341: LD_ADDR_VAR 0 2
57345: PUSH
57346: LD_VAR 0 1
57350: PUSH
57351: FOR_IN
57352: IFFALSE 57376
// if IsControledBy ( i ) then
57354: LD_VAR 0 2
57358: PPUSH
57359: CALL_OW 312
57363: IFFALSE 57374
// ComUnlink ( i ) ;
57365: LD_VAR 0 2
57369: PPUSH
57370: CALL_OW 136
57374: GO 57351
57376: POP
57377: POP
// end ;
57378: PPOPN 2
57380: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
57381: LD_EXP 37
57385: PUSH
57386: LD_EXP 68
57390: AND
57391: IFFALSE 57531
57393: GO 57395
57395: DISABLE
57396: LD_INT 0
57398: PPUSH
57399: PPUSH
// begin ToLua ( displayPowell(); ) ;
57400: LD_STRING displayPowell();
57402: PPUSH
57403: CALL_OW 559
// uc_side := 0 ;
57407: LD_ADDR_OWVAR 20
57411: PUSH
57412: LD_INT 0
57414: ST_TO_ADDR
// uc_nation := 2 ;
57415: LD_ADDR_OWVAR 21
57419: PUSH
57420: LD_INT 2
57422: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
57423: LD_ADDR_OWVAR 37
57427: PUSH
57428: LD_INT 14
57430: ST_TO_ADDR
// vc_engine := engine_siberite ;
57431: LD_ADDR_OWVAR 39
57435: PUSH
57436: LD_INT 3
57438: ST_TO_ADDR
// vc_control := control_apeman ;
57439: LD_ADDR_OWVAR 38
57443: PUSH
57444: LD_INT 5
57446: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
57447: LD_ADDR_OWVAR 40
57451: PUSH
57452: LD_INT 29
57454: ST_TO_ADDR
// un := CreateVehicle ;
57455: LD_ADDR_VAR 0 2
57459: PUSH
57460: CALL_OW 45
57464: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57465: LD_VAR 0 2
57469: PPUSH
57470: LD_INT 1
57472: PPUSH
57473: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
57477: LD_INT 35
57479: PPUSH
57480: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
57484: LD_VAR 0 2
57488: PPUSH
57489: LD_INT 22
57491: PUSH
57492: LD_OWVAR 2
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PPUSH
57501: CALL_OW 69
57505: PPUSH
57506: LD_VAR 0 2
57510: PPUSH
57511: CALL_OW 74
57515: PPUSH
57516: CALL_OW 115
// until IsDead ( un ) ;
57520: LD_VAR 0 2
57524: PPUSH
57525: CALL_OW 301
57529: IFFALSE 57477
// end ;
57531: PPOPN 2
57533: END
// every 0 0$1 trigger StreamModeActive and sStu do
57534: LD_EXP 37
57538: PUSH
57539: LD_EXP 76
57543: AND
57544: IFFALSE 57560
57546: GO 57548
57548: DISABLE
// begin ToLua ( displayStucuk(); ) ;
57549: LD_STRING displayStucuk();
57551: PPUSH
57552: CALL_OW 559
// ResetFog ;
57556: CALL_OW 335
// end ;
57560: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
57561: LD_EXP 37
57565: PUSH
57566: LD_EXP 69
57570: AND
57571: IFFALSE 57712
57573: GO 57575
57575: DISABLE
57576: LD_INT 0
57578: PPUSH
57579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57580: LD_ADDR_VAR 0 2
57584: PUSH
57585: LD_INT 22
57587: PUSH
57588: LD_OWVAR 2
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 21
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PPUSH
57611: CALL_OW 69
57615: ST_TO_ADDR
// if not tmp then
57616: LD_VAR 0 2
57620: NOT
57621: IFFALSE 57625
// exit ;
57623: GO 57712
// un := tmp [ rand ( 1 , tmp ) ] ;
57625: LD_ADDR_VAR 0 1
57629: PUSH
57630: LD_VAR 0 2
57634: PUSH
57635: LD_INT 1
57637: PPUSH
57638: LD_VAR 0 2
57642: PPUSH
57643: CALL_OW 12
57647: ARRAY
57648: ST_TO_ADDR
// SetSide ( un , 0 ) ;
57649: LD_VAR 0 1
57653: PPUSH
57654: LD_INT 0
57656: PPUSH
57657: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
57661: LD_VAR 0 1
57665: PPUSH
57666: LD_OWVAR 3
57670: PUSH
57671: LD_VAR 0 1
57675: DIFF
57676: PPUSH
57677: LD_VAR 0 1
57681: PPUSH
57682: CALL_OW 74
57686: PPUSH
57687: CALL_OW 115
// wait ( 0 0$20 ) ;
57691: LD_INT 700
57693: PPUSH
57694: CALL_OW 67
// SetSide ( un , your_side ) ;
57698: LD_VAR 0 1
57702: PPUSH
57703: LD_OWVAR 2
57707: PPUSH
57708: CALL_OW 235
// end ;
57712: PPOPN 2
57714: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
57715: LD_EXP 37
57719: PUSH
57720: LD_EXP 70
57724: AND
57725: IFFALSE 57831
57727: GO 57729
57729: DISABLE
57730: LD_INT 0
57732: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57733: LD_ADDR_VAR 0 1
57737: PUSH
57738: LD_INT 22
57740: PUSH
57741: LD_OWVAR 2
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 2
57752: PUSH
57753: LD_INT 30
57755: PUSH
57756: LD_INT 0
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 30
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: LIST
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PPUSH
57782: CALL_OW 69
57786: ST_TO_ADDR
// if not depot then
57787: LD_VAR 0 1
57791: NOT
57792: IFFALSE 57796
// exit ;
57794: GO 57831
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
57796: LD_VAR 0 1
57800: PUSH
57801: LD_INT 1
57803: ARRAY
57804: PPUSH
57805: CALL_OW 250
57809: PPUSH
57810: LD_VAR 0 1
57814: PUSH
57815: LD_INT 1
57817: ARRAY
57818: PPUSH
57819: CALL_OW 251
57823: PPUSH
57824: LD_INT 70
57826: PPUSH
57827: CALL_OW 495
// end ;
57831: PPOPN 1
57833: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
57834: LD_EXP 37
57838: PUSH
57839: LD_EXP 71
57843: AND
57844: IFFALSE 58055
57846: GO 57848
57848: DISABLE
57849: LD_INT 0
57851: PPUSH
57852: PPUSH
57853: PPUSH
57854: PPUSH
57855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57856: LD_ADDR_VAR 0 5
57860: PUSH
57861: LD_INT 22
57863: PUSH
57864: LD_OWVAR 2
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 21
57875: PUSH
57876: LD_INT 1
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PPUSH
57887: CALL_OW 69
57891: ST_TO_ADDR
// if not tmp then
57892: LD_VAR 0 5
57896: NOT
57897: IFFALSE 57901
// exit ;
57899: GO 58055
// for i in tmp do
57901: LD_ADDR_VAR 0 1
57905: PUSH
57906: LD_VAR 0 5
57910: PUSH
57911: FOR_IN
57912: IFFALSE 58053
// begin d := rand ( 0 , 5 ) ;
57914: LD_ADDR_VAR 0 4
57918: PUSH
57919: LD_INT 0
57921: PPUSH
57922: LD_INT 5
57924: PPUSH
57925: CALL_OW 12
57929: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
57930: LD_ADDR_VAR 0 2
57934: PUSH
57935: LD_VAR 0 1
57939: PPUSH
57940: CALL_OW 250
57944: PPUSH
57945: LD_VAR 0 4
57949: PPUSH
57950: LD_INT 3
57952: PPUSH
57953: LD_INT 12
57955: PPUSH
57956: CALL_OW 12
57960: PPUSH
57961: CALL_OW 272
57965: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
57966: LD_ADDR_VAR 0 3
57970: PUSH
57971: LD_VAR 0 1
57975: PPUSH
57976: CALL_OW 251
57980: PPUSH
57981: LD_VAR 0 4
57985: PPUSH
57986: LD_INT 3
57988: PPUSH
57989: LD_INT 12
57991: PPUSH
57992: CALL_OW 12
57996: PPUSH
57997: CALL_OW 273
58001: ST_TO_ADDR
// if ValidHex ( x , y ) then
58002: LD_VAR 0 2
58006: PPUSH
58007: LD_VAR 0 3
58011: PPUSH
58012: CALL_OW 488
58016: IFFALSE 58051
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
58018: LD_VAR 0 1
58022: PPUSH
58023: LD_VAR 0 2
58027: PPUSH
58028: LD_VAR 0 3
58032: PPUSH
58033: LD_INT 3
58035: PPUSH
58036: LD_INT 6
58038: PPUSH
58039: CALL_OW 12
58043: PPUSH
58044: LD_INT 1
58046: PPUSH
58047: CALL_OW 483
// end ;
58051: GO 57911
58053: POP
58054: POP
// end ;
58055: PPOPN 5
58057: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
58058: LD_EXP 37
58062: PUSH
58063: LD_EXP 72
58067: AND
58068: IFFALSE 58162
58070: GO 58072
58072: DISABLE
58073: LD_INT 0
58075: PPUSH
58076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
58077: LD_ADDR_VAR 0 2
58081: PUSH
58082: LD_INT 22
58084: PUSH
58085: LD_OWVAR 2
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 32
58096: PUSH
58097: LD_INT 1
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 21
58106: PUSH
58107: LD_INT 2
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: LIST
58118: PPUSH
58119: CALL_OW 69
58123: ST_TO_ADDR
// if not tmp then
58124: LD_VAR 0 2
58128: NOT
58129: IFFALSE 58133
// exit ;
58131: GO 58162
// for i in tmp do
58133: LD_ADDR_VAR 0 1
58137: PUSH
58138: LD_VAR 0 2
58142: PUSH
58143: FOR_IN
58144: IFFALSE 58160
// SetFuel ( i , 0 ) ;
58146: LD_VAR 0 1
58150: PPUSH
58151: LD_INT 0
58153: PPUSH
58154: CALL_OW 240
58158: GO 58143
58160: POP
58161: POP
// end ;
58162: PPOPN 2
58164: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
58165: LD_EXP 37
58169: PUSH
58170: LD_EXP 73
58174: AND
58175: IFFALSE 58241
58177: GO 58179
58179: DISABLE
58180: LD_INT 0
58182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
58183: LD_ADDR_VAR 0 1
58187: PUSH
58188: LD_INT 22
58190: PUSH
58191: LD_OWVAR 2
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 30
58202: PUSH
58203: LD_INT 29
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PPUSH
58214: CALL_OW 69
58218: ST_TO_ADDR
// if not tmp then
58219: LD_VAR 0 1
58223: NOT
58224: IFFALSE 58228
// exit ;
58226: GO 58241
// DestroyUnit ( tmp [ 1 ] ) ;
58228: LD_VAR 0 1
58232: PUSH
58233: LD_INT 1
58235: ARRAY
58236: PPUSH
58237: CALL_OW 65
// end ;
58241: PPOPN 1
58243: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
58244: LD_EXP 37
58248: PUSH
58249: LD_EXP 75
58253: AND
58254: IFFALSE 58383
58256: GO 58258
58258: DISABLE
58259: LD_INT 0
58261: PPUSH
// begin uc_side := 0 ;
58262: LD_ADDR_OWVAR 20
58266: PUSH
58267: LD_INT 0
58269: ST_TO_ADDR
// uc_nation := nation_arabian ;
58270: LD_ADDR_OWVAR 21
58274: PUSH
58275: LD_INT 2
58277: ST_TO_ADDR
// hc_gallery :=  ;
58278: LD_ADDR_OWVAR 33
58282: PUSH
58283: LD_STRING 
58285: ST_TO_ADDR
// hc_name :=  ;
58286: LD_ADDR_OWVAR 26
58290: PUSH
58291: LD_STRING 
58293: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
58294: LD_INT 1
58296: PPUSH
58297: LD_INT 11
58299: PPUSH
58300: LD_INT 10
58302: PPUSH
58303: CALL_OW 380
// un := CreateHuman ;
58307: LD_ADDR_VAR 0 1
58311: PUSH
58312: CALL_OW 44
58316: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58317: LD_VAR 0 1
58321: PPUSH
58322: LD_INT 1
58324: PPUSH
58325: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
58329: LD_INT 35
58331: PPUSH
58332: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
58336: LD_VAR 0 1
58340: PPUSH
58341: LD_INT 22
58343: PUSH
58344: LD_OWVAR 2
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PPUSH
58353: CALL_OW 69
58357: PPUSH
58358: LD_VAR 0 1
58362: PPUSH
58363: CALL_OW 74
58367: PPUSH
58368: CALL_OW 115
// until IsDead ( un ) ;
58372: LD_VAR 0 1
58376: PPUSH
58377: CALL_OW 301
58381: IFFALSE 58329
// end ;
58383: PPOPN 1
58385: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
58386: LD_EXP 37
58390: PUSH
58391: LD_EXP 77
58395: AND
58396: IFFALSE 58408
58398: GO 58400
58400: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
58401: LD_STRING earthquake(getX(game), 0, 32)
58403: PPUSH
58404: CALL_OW 559
58408: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
58409: LD_EXP 37
58413: PUSH
58414: LD_EXP 78
58418: AND
58419: IFFALSE 58510
58421: GO 58423
58423: DISABLE
58424: LD_INT 0
58426: PPUSH
// begin enable ;
58427: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
58428: LD_ADDR_VAR 0 1
58432: PUSH
58433: LD_INT 22
58435: PUSH
58436: LD_OWVAR 2
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 21
58447: PUSH
58448: LD_INT 2
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 33
58457: PUSH
58458: LD_INT 3
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: LIST
58469: PPUSH
58470: CALL_OW 69
58474: ST_TO_ADDR
// if not tmp then
58475: LD_VAR 0 1
58479: NOT
58480: IFFALSE 58484
// exit ;
58482: GO 58510
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
58484: LD_VAR 0 1
58488: PUSH
58489: LD_INT 1
58491: PPUSH
58492: LD_VAR 0 1
58496: PPUSH
58497: CALL_OW 12
58501: ARRAY
58502: PPUSH
58503: LD_INT 1
58505: PPUSH
58506: CALL_OW 234
// end ;
58510: PPOPN 1
58512: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
58513: LD_EXP 37
58517: PUSH
58518: LD_EXP 79
58522: AND
58523: IFFALSE 58664
58525: GO 58527
58527: DISABLE
58528: LD_INT 0
58530: PPUSH
58531: PPUSH
58532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58533: LD_ADDR_VAR 0 3
58537: PUSH
58538: LD_INT 22
58540: PUSH
58541: LD_OWVAR 2
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 25
58552: PUSH
58553: LD_INT 1
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PPUSH
58564: CALL_OW 69
58568: ST_TO_ADDR
// if not tmp then
58569: LD_VAR 0 3
58573: NOT
58574: IFFALSE 58578
// exit ;
58576: GO 58664
// un := tmp [ rand ( 1 , tmp ) ] ;
58578: LD_ADDR_VAR 0 2
58582: PUSH
58583: LD_VAR 0 3
58587: PUSH
58588: LD_INT 1
58590: PPUSH
58591: LD_VAR 0 3
58595: PPUSH
58596: CALL_OW 12
58600: ARRAY
58601: ST_TO_ADDR
// if Crawls ( un ) then
58602: LD_VAR 0 2
58606: PPUSH
58607: CALL_OW 318
58611: IFFALSE 58622
// ComWalk ( un ) ;
58613: LD_VAR 0 2
58617: PPUSH
58618: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
58622: LD_VAR 0 2
58626: PPUSH
58627: LD_INT 9
58629: PPUSH
58630: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
58634: LD_INT 28
58636: PPUSH
58637: LD_OWVAR 2
58641: PPUSH
58642: LD_INT 2
58644: PPUSH
58645: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
58649: LD_INT 29
58651: PPUSH
58652: LD_OWVAR 2
58656: PPUSH
58657: LD_INT 2
58659: PPUSH
58660: CALL_OW 322
// end ;
58664: PPOPN 3
58666: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
58667: LD_EXP 37
58671: PUSH
58672: LD_EXP 80
58676: AND
58677: IFFALSE 58788
58679: GO 58681
58681: DISABLE
58682: LD_INT 0
58684: PPUSH
58685: PPUSH
58686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58687: LD_ADDR_VAR 0 3
58691: PUSH
58692: LD_INT 22
58694: PUSH
58695: LD_OWVAR 2
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 25
58706: PUSH
58707: LD_INT 1
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PPUSH
58718: CALL_OW 69
58722: ST_TO_ADDR
// if not tmp then
58723: LD_VAR 0 3
58727: NOT
58728: IFFALSE 58732
// exit ;
58730: GO 58788
// un := tmp [ rand ( 1 , tmp ) ] ;
58732: LD_ADDR_VAR 0 2
58736: PUSH
58737: LD_VAR 0 3
58741: PUSH
58742: LD_INT 1
58744: PPUSH
58745: LD_VAR 0 3
58749: PPUSH
58750: CALL_OW 12
58754: ARRAY
58755: ST_TO_ADDR
// if Crawls ( un ) then
58756: LD_VAR 0 2
58760: PPUSH
58761: CALL_OW 318
58765: IFFALSE 58776
// ComWalk ( un ) ;
58767: LD_VAR 0 2
58771: PPUSH
58772: CALL_OW 138
// SetClass ( un , class_mortar ) ;
58776: LD_VAR 0 2
58780: PPUSH
58781: LD_INT 8
58783: PPUSH
58784: CALL_OW 336
// end ;
58788: PPOPN 3
58790: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
58791: LD_EXP 37
58795: PUSH
58796: LD_EXP 81
58800: AND
58801: IFFALSE 58945
58803: GO 58805
58805: DISABLE
58806: LD_INT 0
58808: PPUSH
58809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
58810: LD_ADDR_VAR 0 2
58814: PUSH
58815: LD_INT 22
58817: PUSH
58818: LD_OWVAR 2
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 21
58829: PUSH
58830: LD_INT 2
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 2
58839: PUSH
58840: LD_INT 34
58842: PUSH
58843: LD_INT 12
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 34
58852: PUSH
58853: LD_INT 51
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 34
58862: PUSH
58863: LD_INT 32
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: LIST
58880: PPUSH
58881: CALL_OW 69
58885: ST_TO_ADDR
// if not tmp then
58886: LD_VAR 0 2
58890: NOT
58891: IFFALSE 58895
// exit ;
58893: GO 58945
// for i in tmp do
58895: LD_ADDR_VAR 0 1
58899: PUSH
58900: LD_VAR 0 2
58904: PUSH
58905: FOR_IN
58906: IFFALSE 58943
// if GetCargo ( i , mat_artifact ) = 0 then
58908: LD_VAR 0 1
58912: PPUSH
58913: LD_INT 4
58915: PPUSH
58916: CALL_OW 289
58920: PUSH
58921: LD_INT 0
58923: EQUAL
58924: IFFALSE 58941
// SetCargo ( i , mat_siberit , 100 ) ;
58926: LD_VAR 0 1
58930: PPUSH
58931: LD_INT 3
58933: PPUSH
58934: LD_INT 100
58936: PPUSH
58937: CALL_OW 290
58941: GO 58905
58943: POP
58944: POP
// end ;
58945: PPOPN 2
58947: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
58948: LD_EXP 37
58952: PUSH
58953: LD_EXP 82
58957: AND
58958: IFFALSE 59141
58960: GO 58962
58962: DISABLE
58963: LD_INT 0
58965: PPUSH
58966: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58967: LD_ADDR_VAR 0 2
58971: PUSH
58972: LD_INT 22
58974: PUSH
58975: LD_OWVAR 2
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PPUSH
58984: CALL_OW 69
58988: ST_TO_ADDR
// if not tmp then
58989: LD_VAR 0 2
58993: NOT
58994: IFFALSE 58998
// exit ;
58996: GO 59141
// for i := 1 to 2 do
58998: LD_ADDR_VAR 0 1
59002: PUSH
59003: DOUBLE
59004: LD_INT 1
59006: DEC
59007: ST_TO_ADDR
59008: LD_INT 2
59010: PUSH
59011: FOR_TO
59012: IFFALSE 59139
// begin uc_side := your_side ;
59014: LD_ADDR_OWVAR 20
59018: PUSH
59019: LD_OWVAR 2
59023: ST_TO_ADDR
// uc_nation := nation_american ;
59024: LD_ADDR_OWVAR 21
59028: PUSH
59029: LD_INT 1
59031: ST_TO_ADDR
// vc_chassis := us_morphling ;
59032: LD_ADDR_OWVAR 37
59036: PUSH
59037: LD_INT 5
59039: ST_TO_ADDR
// vc_engine := engine_siberite ;
59040: LD_ADDR_OWVAR 39
59044: PUSH
59045: LD_INT 3
59047: ST_TO_ADDR
// vc_control := control_computer ;
59048: LD_ADDR_OWVAR 38
59052: PUSH
59053: LD_INT 3
59055: ST_TO_ADDR
// vc_weapon := us_double_laser ;
59056: LD_ADDR_OWVAR 40
59060: PUSH
59061: LD_INT 10
59063: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
59064: LD_VAR 0 2
59068: PUSH
59069: LD_INT 1
59071: ARRAY
59072: PPUSH
59073: CALL_OW 310
59077: NOT
59078: IFFALSE 59125
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
59080: CALL_OW 45
59084: PPUSH
59085: LD_VAR 0 2
59089: PUSH
59090: LD_INT 1
59092: ARRAY
59093: PPUSH
59094: CALL_OW 250
59098: PPUSH
59099: LD_VAR 0 2
59103: PUSH
59104: LD_INT 1
59106: ARRAY
59107: PPUSH
59108: CALL_OW 251
59112: PPUSH
59113: LD_INT 12
59115: PPUSH
59116: LD_INT 1
59118: PPUSH
59119: CALL_OW 50
59123: GO 59137
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
59125: CALL_OW 45
59129: PPUSH
59130: LD_INT 1
59132: PPUSH
59133: CALL_OW 51
// end ;
59137: GO 59011
59139: POP
59140: POP
// end ;
59141: PPOPN 2
59143: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
59144: LD_EXP 37
59148: PUSH
59149: LD_EXP 83
59153: AND
59154: IFFALSE 59376
59156: GO 59158
59158: DISABLE
59159: LD_INT 0
59161: PPUSH
59162: PPUSH
59163: PPUSH
59164: PPUSH
59165: PPUSH
59166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59167: LD_ADDR_VAR 0 6
59171: PUSH
59172: LD_INT 22
59174: PUSH
59175: LD_OWVAR 2
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 21
59186: PUSH
59187: LD_INT 1
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 3
59196: PUSH
59197: LD_INT 23
59199: PUSH
59200: LD_INT 0
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: LIST
59215: PPUSH
59216: CALL_OW 69
59220: ST_TO_ADDR
// if not tmp then
59221: LD_VAR 0 6
59225: NOT
59226: IFFALSE 59230
// exit ;
59228: GO 59376
// s1 := rand ( 1 , 4 ) ;
59230: LD_ADDR_VAR 0 2
59234: PUSH
59235: LD_INT 1
59237: PPUSH
59238: LD_INT 4
59240: PPUSH
59241: CALL_OW 12
59245: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
59246: LD_ADDR_VAR 0 4
59250: PUSH
59251: LD_VAR 0 6
59255: PUSH
59256: LD_INT 1
59258: ARRAY
59259: PPUSH
59260: LD_VAR 0 2
59264: PPUSH
59265: CALL_OW 259
59269: ST_TO_ADDR
// if s1 = 1 then
59270: LD_VAR 0 2
59274: PUSH
59275: LD_INT 1
59277: EQUAL
59278: IFFALSE 59298
// s2 := rand ( 2 , 4 ) else
59280: LD_ADDR_VAR 0 3
59284: PUSH
59285: LD_INT 2
59287: PPUSH
59288: LD_INT 4
59290: PPUSH
59291: CALL_OW 12
59295: ST_TO_ADDR
59296: GO 59306
// s2 := 1 ;
59298: LD_ADDR_VAR 0 3
59302: PUSH
59303: LD_INT 1
59305: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
59306: LD_ADDR_VAR 0 5
59310: PUSH
59311: LD_VAR 0 6
59315: PUSH
59316: LD_INT 1
59318: ARRAY
59319: PPUSH
59320: LD_VAR 0 3
59324: PPUSH
59325: CALL_OW 259
59329: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
59330: LD_VAR 0 6
59334: PUSH
59335: LD_INT 1
59337: ARRAY
59338: PPUSH
59339: LD_VAR 0 2
59343: PPUSH
59344: LD_VAR 0 5
59348: PPUSH
59349: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
59353: LD_VAR 0 6
59357: PUSH
59358: LD_INT 1
59360: ARRAY
59361: PPUSH
59362: LD_VAR 0 3
59366: PPUSH
59367: LD_VAR 0 4
59371: PPUSH
59372: CALL_OW 237
// end ;
59376: PPOPN 6
59378: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
59379: LD_EXP 37
59383: PUSH
59384: LD_EXP 84
59388: AND
59389: IFFALSE 59468
59391: GO 59393
59393: DISABLE
59394: LD_INT 0
59396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
59397: LD_ADDR_VAR 0 1
59401: PUSH
59402: LD_INT 22
59404: PUSH
59405: LD_OWVAR 2
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 30
59416: PUSH
59417: LD_INT 3
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PPUSH
59428: CALL_OW 69
59432: ST_TO_ADDR
// if not tmp then
59433: LD_VAR 0 1
59437: NOT
59438: IFFALSE 59442
// exit ;
59440: GO 59468
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
59442: LD_VAR 0 1
59446: PUSH
59447: LD_INT 1
59449: PPUSH
59450: LD_VAR 0 1
59454: PPUSH
59455: CALL_OW 12
59459: ARRAY
59460: PPUSH
59461: LD_INT 1
59463: PPUSH
59464: CALL_OW 234
// end ;
59468: PPOPN 1
59470: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
59471: LD_EXP 37
59475: PUSH
59476: LD_EXP 85
59480: AND
59481: IFFALSE 59593
59483: GO 59485
59485: DISABLE
59486: LD_INT 0
59488: PPUSH
59489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
59490: LD_ADDR_VAR 0 2
59494: PUSH
59495: LD_INT 22
59497: PUSH
59498: LD_OWVAR 2
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 2
59509: PUSH
59510: LD_INT 30
59512: PUSH
59513: LD_INT 27
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 30
59522: PUSH
59523: LD_INT 26
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 30
59532: PUSH
59533: LD_INT 28
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PPUSH
59550: CALL_OW 69
59554: ST_TO_ADDR
// if not tmp then
59555: LD_VAR 0 2
59559: NOT
59560: IFFALSE 59564
// exit ;
59562: GO 59593
// for i in tmp do
59564: LD_ADDR_VAR 0 1
59568: PUSH
59569: LD_VAR 0 2
59573: PUSH
59574: FOR_IN
59575: IFFALSE 59591
// SetLives ( i , 1 ) ;
59577: LD_VAR 0 1
59581: PPUSH
59582: LD_INT 1
59584: PPUSH
59585: CALL_OW 234
59589: GO 59574
59591: POP
59592: POP
// end ;
59593: PPOPN 2
59595: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
59596: LD_EXP 37
59600: PUSH
59601: LD_EXP 86
59605: AND
59606: IFFALSE 59893
59608: GO 59610
59610: DISABLE
59611: LD_INT 0
59613: PPUSH
59614: PPUSH
59615: PPUSH
// begin i := rand ( 1 , 7 ) ;
59616: LD_ADDR_VAR 0 1
59620: PUSH
59621: LD_INT 1
59623: PPUSH
59624: LD_INT 7
59626: PPUSH
59627: CALL_OW 12
59631: ST_TO_ADDR
// case i of 1 :
59632: LD_VAR 0 1
59636: PUSH
59637: LD_INT 1
59639: DOUBLE
59640: EQUAL
59641: IFTRUE 59645
59643: GO 59655
59645: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
59646: LD_STRING earthquake(getX(game), 0, 32)
59648: PPUSH
59649: CALL_OW 559
59653: GO 59893
59655: LD_INT 2
59657: DOUBLE
59658: EQUAL
59659: IFTRUE 59663
59661: GO 59677
59663: POP
// begin ToLua ( displayStucuk(); ) ;
59664: LD_STRING displayStucuk();
59666: PPUSH
59667: CALL_OW 559
// ResetFog ;
59671: CALL_OW 335
// end ; 3 :
59675: GO 59893
59677: LD_INT 3
59679: DOUBLE
59680: EQUAL
59681: IFTRUE 59685
59683: GO 59789
59685: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59686: LD_ADDR_VAR 0 2
59690: PUSH
59691: LD_INT 22
59693: PUSH
59694: LD_OWVAR 2
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 25
59705: PUSH
59706: LD_INT 1
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PPUSH
59717: CALL_OW 69
59721: ST_TO_ADDR
// if not tmp then
59722: LD_VAR 0 2
59726: NOT
59727: IFFALSE 59731
// exit ;
59729: GO 59893
// un := tmp [ rand ( 1 , tmp ) ] ;
59731: LD_ADDR_VAR 0 3
59735: PUSH
59736: LD_VAR 0 2
59740: PUSH
59741: LD_INT 1
59743: PPUSH
59744: LD_VAR 0 2
59748: PPUSH
59749: CALL_OW 12
59753: ARRAY
59754: ST_TO_ADDR
// if Crawls ( un ) then
59755: LD_VAR 0 3
59759: PPUSH
59760: CALL_OW 318
59764: IFFALSE 59775
// ComWalk ( un ) ;
59766: LD_VAR 0 3
59770: PPUSH
59771: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59775: LD_VAR 0 3
59779: PPUSH
59780: LD_INT 8
59782: PPUSH
59783: CALL_OW 336
// end ; 4 :
59787: GO 59893
59789: LD_INT 4
59791: DOUBLE
59792: EQUAL
59793: IFTRUE 59797
59795: GO 59871
59797: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59798: LD_ADDR_VAR 0 2
59802: PUSH
59803: LD_INT 22
59805: PUSH
59806: LD_OWVAR 2
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 30
59817: PUSH
59818: LD_INT 29
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PPUSH
59829: CALL_OW 69
59833: ST_TO_ADDR
// if not tmp then
59834: LD_VAR 0 2
59838: NOT
59839: IFFALSE 59843
// exit ;
59841: GO 59893
// CenterNowOnUnits ( tmp [ 1 ] ) ;
59843: LD_VAR 0 2
59847: PUSH
59848: LD_INT 1
59850: ARRAY
59851: PPUSH
59852: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
59856: LD_VAR 0 2
59860: PUSH
59861: LD_INT 1
59863: ARRAY
59864: PPUSH
59865: CALL_OW 65
// end ; 5 .. 7 :
59869: GO 59893
59871: LD_INT 5
59873: DOUBLE
59874: GREATEREQUAL
59875: IFFALSE 59883
59877: LD_INT 7
59879: DOUBLE
59880: LESSEQUAL
59881: IFTRUE 59885
59883: GO 59892
59885: POP
// StreamSibBomb ; end ;
59886: CALL 56130 0 0
59890: GO 59893
59892: POP
// end ;
59893: PPOPN 3
59895: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
59896: LD_EXP 37
59900: PUSH
59901: LD_EXP 87
59905: AND
59906: IFFALSE 60062
59908: GO 59910
59910: DISABLE
59911: LD_INT 0
59913: PPUSH
59914: PPUSH
59915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
59916: LD_ADDR_VAR 0 2
59920: PUSH
59921: LD_INT 81
59923: PUSH
59924: LD_OWVAR 2
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 2
59935: PUSH
59936: LD_INT 21
59938: PUSH
59939: LD_INT 1
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 21
59948: PUSH
59949: LD_INT 2
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: LIST
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PPUSH
59965: CALL_OW 69
59969: ST_TO_ADDR
// if not tmp then
59970: LD_VAR 0 2
59974: NOT
59975: IFFALSE 59979
// exit ;
59977: GO 60062
// p := 0 ;
59979: LD_ADDR_VAR 0 3
59983: PUSH
59984: LD_INT 0
59986: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59987: LD_INT 35
59989: PPUSH
59990: CALL_OW 67
// p := p + 1 ;
59994: LD_ADDR_VAR 0 3
59998: PUSH
59999: LD_VAR 0 3
60003: PUSH
60004: LD_INT 1
60006: PLUS
60007: ST_TO_ADDR
// for i in tmp do
60008: LD_ADDR_VAR 0 1
60012: PUSH
60013: LD_VAR 0 2
60017: PUSH
60018: FOR_IN
60019: IFFALSE 60050
// if GetLives ( i ) < 1000 then
60021: LD_VAR 0 1
60025: PPUSH
60026: CALL_OW 256
60030: PUSH
60031: LD_INT 1000
60033: LESS
60034: IFFALSE 60048
// SetLives ( i , 1000 ) ;
60036: LD_VAR 0 1
60040: PPUSH
60041: LD_INT 1000
60043: PPUSH
60044: CALL_OW 234
60048: GO 60018
60050: POP
60051: POP
// until p > 20 ;
60052: LD_VAR 0 3
60056: PUSH
60057: LD_INT 20
60059: GREATER
60060: IFFALSE 59987
// end ;
60062: PPOPN 3
60064: END
// every 0 0$1 trigger StreamModeActive and sTime do
60065: LD_EXP 37
60069: PUSH
60070: LD_EXP 88
60074: AND
60075: IFFALSE 60110
60077: GO 60079
60079: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
60080: LD_INT 28
60082: PPUSH
60083: LD_OWVAR 2
60087: PPUSH
60088: LD_INT 2
60090: PPUSH
60091: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
60095: LD_INT 30
60097: PPUSH
60098: LD_OWVAR 2
60102: PPUSH
60103: LD_INT 2
60105: PPUSH
60106: CALL_OW 322
// end ;
60110: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
60111: LD_EXP 37
60115: PUSH
60116: LD_EXP 89
60120: AND
60121: IFFALSE 60242
60123: GO 60125
60125: DISABLE
60126: LD_INT 0
60128: PPUSH
60129: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60130: LD_ADDR_VAR 0 2
60134: PUSH
60135: LD_INT 22
60137: PUSH
60138: LD_OWVAR 2
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 21
60149: PUSH
60150: LD_INT 1
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 3
60159: PUSH
60160: LD_INT 23
60162: PUSH
60163: LD_INT 0
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: LIST
60178: PPUSH
60179: CALL_OW 69
60183: ST_TO_ADDR
// if not tmp then
60184: LD_VAR 0 2
60188: NOT
60189: IFFALSE 60193
// exit ;
60191: GO 60242
// for i in tmp do
60193: LD_ADDR_VAR 0 1
60197: PUSH
60198: LD_VAR 0 2
60202: PUSH
60203: FOR_IN
60204: IFFALSE 60240
// begin if Crawls ( i ) then
60206: LD_VAR 0 1
60210: PPUSH
60211: CALL_OW 318
60215: IFFALSE 60226
// ComWalk ( i ) ;
60217: LD_VAR 0 1
60221: PPUSH
60222: CALL_OW 138
// SetClass ( i , 2 ) ;
60226: LD_VAR 0 1
60230: PPUSH
60231: LD_INT 2
60233: PPUSH
60234: CALL_OW 336
// end ;
60238: GO 60203
60240: POP
60241: POP
// end ;
60242: PPOPN 2
60244: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
60245: LD_EXP 37
60249: PUSH
60250: LD_EXP 90
60254: AND
60255: IFFALSE 60543
60257: GO 60259
60259: DISABLE
60260: LD_INT 0
60262: PPUSH
60263: PPUSH
60264: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
60265: LD_OWVAR 2
60269: PPUSH
60270: LD_INT 9
60272: PPUSH
60273: LD_INT 1
60275: PPUSH
60276: LD_INT 1
60278: PPUSH
60279: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
60283: LD_INT 9
60285: PPUSH
60286: LD_OWVAR 2
60290: PPUSH
60291: CALL_OW 343
// uc_side := 9 ;
60295: LD_ADDR_OWVAR 20
60299: PUSH
60300: LD_INT 9
60302: ST_TO_ADDR
// uc_nation := 2 ;
60303: LD_ADDR_OWVAR 21
60307: PUSH
60308: LD_INT 2
60310: ST_TO_ADDR
// hc_name := Dark Warrior ;
60311: LD_ADDR_OWVAR 26
60315: PUSH
60316: LD_STRING Dark Warrior
60318: ST_TO_ADDR
// hc_gallery :=  ;
60319: LD_ADDR_OWVAR 33
60323: PUSH
60324: LD_STRING 
60326: ST_TO_ADDR
// hc_noskilllimit := true ;
60327: LD_ADDR_OWVAR 76
60331: PUSH
60332: LD_INT 1
60334: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
60335: LD_ADDR_OWVAR 31
60339: PUSH
60340: LD_INT 30
60342: PUSH
60343: LD_INT 30
60345: PUSH
60346: LD_INT 30
60348: PUSH
60349: LD_INT 30
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: ST_TO_ADDR
// un := CreateHuman ;
60358: LD_ADDR_VAR 0 3
60362: PUSH
60363: CALL_OW 44
60367: ST_TO_ADDR
// hc_noskilllimit := false ;
60368: LD_ADDR_OWVAR 76
60372: PUSH
60373: LD_INT 0
60375: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60376: LD_VAR 0 3
60380: PPUSH
60381: LD_INT 1
60383: PPUSH
60384: CALL_OW 51
// ToLua ( playRanger() ) ;
60388: LD_STRING playRanger()
60390: PPUSH
60391: CALL_OW 559
// p := 0 ;
60395: LD_ADDR_VAR 0 2
60399: PUSH
60400: LD_INT 0
60402: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60403: LD_INT 35
60405: PPUSH
60406: CALL_OW 67
// p := p + 1 ;
60410: LD_ADDR_VAR 0 2
60414: PUSH
60415: LD_VAR 0 2
60419: PUSH
60420: LD_INT 1
60422: PLUS
60423: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
60424: LD_VAR 0 3
60428: PPUSH
60429: CALL_OW 256
60433: PUSH
60434: LD_INT 1000
60436: LESS
60437: IFFALSE 60451
// SetLives ( un , 1000 ) ;
60439: LD_VAR 0 3
60443: PPUSH
60444: LD_INT 1000
60446: PPUSH
60447: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
60451: LD_VAR 0 3
60455: PPUSH
60456: LD_INT 81
60458: PUSH
60459: LD_OWVAR 2
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 91
60470: PUSH
60471: LD_VAR 0 3
60475: PUSH
60476: LD_INT 30
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: LIST
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PPUSH
60488: CALL_OW 69
60492: PPUSH
60493: LD_VAR 0 3
60497: PPUSH
60498: CALL_OW 74
60502: PPUSH
60503: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
60507: LD_VAR 0 2
60511: PUSH
60512: LD_INT 80
60514: GREATER
60515: PUSH
60516: LD_VAR 0 3
60520: PPUSH
60521: CALL_OW 301
60525: OR
60526: IFFALSE 60403
// if un then
60528: LD_VAR 0 3
60532: IFFALSE 60543
// RemoveUnit ( un ) ;
60534: LD_VAR 0 3
60538: PPUSH
60539: CALL_OW 64
// end ;
60543: PPOPN 3
60545: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
60546: LD_EXP 91
60550: IFFALSE 60666
60552: GO 60554
60554: DISABLE
60555: LD_INT 0
60557: PPUSH
60558: PPUSH
60559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
60560: LD_ADDR_VAR 0 2
60564: PUSH
60565: LD_INT 81
60567: PUSH
60568: LD_OWVAR 2
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 21
60579: PUSH
60580: LD_INT 1
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PPUSH
60591: CALL_OW 69
60595: ST_TO_ADDR
// ToLua ( playComputer() ) ;
60596: LD_STRING playComputer()
60598: PPUSH
60599: CALL_OW 559
// if not tmp then
60603: LD_VAR 0 2
60607: NOT
60608: IFFALSE 60612
// exit ;
60610: GO 60666
// for i in tmp do
60612: LD_ADDR_VAR 0 1
60616: PUSH
60617: LD_VAR 0 2
60621: PUSH
60622: FOR_IN
60623: IFFALSE 60664
// for j := 1 to 4 do
60625: LD_ADDR_VAR 0 3
60629: PUSH
60630: DOUBLE
60631: LD_INT 1
60633: DEC
60634: ST_TO_ADDR
60635: LD_INT 4
60637: PUSH
60638: FOR_TO
60639: IFFALSE 60660
// SetSkill ( i , j , 10 ) ;
60641: LD_VAR 0 1
60645: PPUSH
60646: LD_VAR 0 3
60650: PPUSH
60651: LD_INT 10
60653: PPUSH
60654: CALL_OW 237
60658: GO 60638
60660: POP
60661: POP
60662: GO 60622
60664: POP
60665: POP
// end ;
60666: PPOPN 3
60668: END
// every 0 0$1 trigger s30 do var i , tmp ;
60669: LD_EXP 92
60673: IFFALSE 60742
60675: GO 60677
60677: DISABLE
60678: LD_INT 0
60680: PPUSH
60681: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60682: LD_ADDR_VAR 0 2
60686: PUSH
60687: LD_INT 22
60689: PUSH
60690: LD_OWVAR 2
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PPUSH
60699: CALL_OW 69
60703: ST_TO_ADDR
// if not tmp then
60704: LD_VAR 0 2
60708: NOT
60709: IFFALSE 60713
// exit ;
60711: GO 60742
// for i in tmp do
60713: LD_ADDR_VAR 0 1
60717: PUSH
60718: LD_VAR 0 2
60722: PUSH
60723: FOR_IN
60724: IFFALSE 60740
// SetLives ( i , 300 ) ;
60726: LD_VAR 0 1
60730: PPUSH
60731: LD_INT 300
60733: PPUSH
60734: CALL_OW 234
60738: GO 60723
60740: POP
60741: POP
// end ;
60742: PPOPN 2
60744: END
// every 0 0$1 trigger s60 do var i , tmp ;
60745: LD_EXP 93
60749: IFFALSE 60818
60751: GO 60753
60753: DISABLE
60754: LD_INT 0
60756: PPUSH
60757: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60758: LD_ADDR_VAR 0 2
60762: PUSH
60763: LD_INT 22
60765: PUSH
60766: LD_OWVAR 2
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PPUSH
60775: CALL_OW 69
60779: ST_TO_ADDR
// if not tmp then
60780: LD_VAR 0 2
60784: NOT
60785: IFFALSE 60789
// exit ;
60787: GO 60818
// for i in tmp do
60789: LD_ADDR_VAR 0 1
60793: PUSH
60794: LD_VAR 0 2
60798: PUSH
60799: FOR_IN
60800: IFFALSE 60816
// SetLives ( i , 600 ) ;
60802: LD_VAR 0 1
60806: PPUSH
60807: LD_INT 600
60809: PPUSH
60810: CALL_OW 234
60814: GO 60799
60816: POP
60817: POP
// end ;
60818: PPOPN 2
60820: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60821: LD_INT 0
60823: PPUSH
// case cmd of 301 :
60824: LD_VAR 0 1
60828: PUSH
60829: LD_INT 301
60831: DOUBLE
60832: EQUAL
60833: IFTRUE 60837
60835: GO 60869
60837: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
60838: LD_VAR 0 6
60842: PPUSH
60843: LD_VAR 0 7
60847: PPUSH
60848: LD_VAR 0 8
60852: PPUSH
60853: LD_VAR 0 4
60857: PPUSH
60858: LD_VAR 0 5
60862: PPUSH
60863: CALL 62070 0 5
60867: GO 60990
60869: LD_INT 302
60871: DOUBLE
60872: EQUAL
60873: IFTRUE 60877
60875: GO 60914
60877: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
60878: LD_VAR 0 6
60882: PPUSH
60883: LD_VAR 0 7
60887: PPUSH
60888: LD_VAR 0 8
60892: PPUSH
60893: LD_VAR 0 9
60897: PPUSH
60898: LD_VAR 0 4
60902: PPUSH
60903: LD_VAR 0 5
60907: PPUSH
60908: CALL 62161 0 6
60912: GO 60990
60914: LD_INT 303
60916: DOUBLE
60917: EQUAL
60918: IFTRUE 60922
60920: GO 60959
60922: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
60923: LD_VAR 0 6
60927: PPUSH
60928: LD_VAR 0 7
60932: PPUSH
60933: LD_VAR 0 8
60937: PPUSH
60938: LD_VAR 0 9
60942: PPUSH
60943: LD_VAR 0 4
60947: PPUSH
60948: LD_VAR 0 5
60952: PPUSH
60953: CALL 60995 0 6
60957: GO 60990
60959: LD_INT 304
60961: DOUBLE
60962: EQUAL
60963: IFTRUE 60967
60965: GO 60989
60967: POP
// hHackTeleport ( unit , x , y ) ; end ;
60968: LD_VAR 0 2
60972: PPUSH
60973: LD_VAR 0 4
60977: PPUSH
60978: LD_VAR 0 5
60982: PPUSH
60983: CALL 62754 0 3
60987: GO 60990
60989: POP
// end ;
60990: LD_VAR 0 12
60994: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
60995: LD_INT 0
60997: PPUSH
60998: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
60999: LD_VAR 0 1
61003: PUSH
61004: LD_INT 1
61006: LESS
61007: PUSH
61008: LD_VAR 0 1
61012: PUSH
61013: LD_INT 3
61015: GREATER
61016: OR
61017: PUSH
61018: LD_VAR 0 5
61022: PPUSH
61023: LD_VAR 0 6
61027: PPUSH
61028: CALL_OW 428
61032: OR
61033: IFFALSE 61037
// exit ;
61035: GO 61757
// uc_side := your_side ;
61037: LD_ADDR_OWVAR 20
61041: PUSH
61042: LD_OWVAR 2
61046: ST_TO_ADDR
// uc_nation := nation ;
61047: LD_ADDR_OWVAR 21
61051: PUSH
61052: LD_VAR 0 1
61056: ST_TO_ADDR
// bc_level = 1 ;
61057: LD_ADDR_OWVAR 43
61061: PUSH
61062: LD_INT 1
61064: ST_TO_ADDR
// case btype of 1 :
61065: LD_VAR 0 2
61069: PUSH
61070: LD_INT 1
61072: DOUBLE
61073: EQUAL
61074: IFTRUE 61078
61076: GO 61089
61078: POP
// bc_type := b_depot ; 2 :
61079: LD_ADDR_OWVAR 42
61083: PUSH
61084: LD_INT 0
61086: ST_TO_ADDR
61087: GO 61701
61089: LD_INT 2
61091: DOUBLE
61092: EQUAL
61093: IFTRUE 61097
61095: GO 61108
61097: POP
// bc_type := b_warehouse ; 3 :
61098: LD_ADDR_OWVAR 42
61102: PUSH
61103: LD_INT 1
61105: ST_TO_ADDR
61106: GO 61701
61108: LD_INT 3
61110: DOUBLE
61111: EQUAL
61112: IFTRUE 61116
61114: GO 61127
61116: POP
// bc_type := b_lab ; 4 .. 9 :
61117: LD_ADDR_OWVAR 42
61121: PUSH
61122: LD_INT 6
61124: ST_TO_ADDR
61125: GO 61701
61127: LD_INT 4
61129: DOUBLE
61130: GREATEREQUAL
61131: IFFALSE 61139
61133: LD_INT 9
61135: DOUBLE
61136: LESSEQUAL
61137: IFTRUE 61141
61139: GO 61193
61141: POP
// begin bc_type := b_lab_half ;
61142: LD_ADDR_OWVAR 42
61146: PUSH
61147: LD_INT 7
61149: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
61150: LD_ADDR_OWVAR 44
61154: PUSH
61155: LD_INT 10
61157: PUSH
61158: LD_INT 11
61160: PUSH
61161: LD_INT 12
61163: PUSH
61164: LD_INT 15
61166: PUSH
61167: LD_INT 14
61169: PUSH
61170: LD_INT 13
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: PUSH
61181: LD_VAR 0 2
61185: PUSH
61186: LD_INT 3
61188: MINUS
61189: ARRAY
61190: ST_TO_ADDR
// end ; 10 .. 13 :
61191: GO 61701
61193: LD_INT 10
61195: DOUBLE
61196: GREATEREQUAL
61197: IFFALSE 61205
61199: LD_INT 13
61201: DOUBLE
61202: LESSEQUAL
61203: IFTRUE 61207
61205: GO 61284
61207: POP
// begin bc_type := b_lab_full ;
61208: LD_ADDR_OWVAR 42
61212: PUSH
61213: LD_INT 8
61215: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
61216: LD_ADDR_OWVAR 44
61220: PUSH
61221: LD_INT 10
61223: PUSH
61224: LD_INT 12
61226: PUSH
61227: LD_INT 14
61229: PUSH
61230: LD_INT 13
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: PUSH
61239: LD_VAR 0 2
61243: PUSH
61244: LD_INT 9
61246: MINUS
61247: ARRAY
61248: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
61249: LD_ADDR_OWVAR 45
61253: PUSH
61254: LD_INT 11
61256: PUSH
61257: LD_INT 15
61259: PUSH
61260: LD_INT 12
61262: PUSH
61263: LD_INT 15
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: PUSH
61272: LD_VAR 0 2
61276: PUSH
61277: LD_INT 9
61279: MINUS
61280: ARRAY
61281: ST_TO_ADDR
// end ; 14 :
61282: GO 61701
61284: LD_INT 14
61286: DOUBLE
61287: EQUAL
61288: IFTRUE 61292
61290: GO 61303
61292: POP
// bc_type := b_workshop ; 15 :
61293: LD_ADDR_OWVAR 42
61297: PUSH
61298: LD_INT 2
61300: ST_TO_ADDR
61301: GO 61701
61303: LD_INT 15
61305: DOUBLE
61306: EQUAL
61307: IFTRUE 61311
61309: GO 61322
61311: POP
// bc_type := b_factory ; 16 :
61312: LD_ADDR_OWVAR 42
61316: PUSH
61317: LD_INT 3
61319: ST_TO_ADDR
61320: GO 61701
61322: LD_INT 16
61324: DOUBLE
61325: EQUAL
61326: IFTRUE 61330
61328: GO 61341
61330: POP
// bc_type := b_ext_gun ; 17 :
61331: LD_ADDR_OWVAR 42
61335: PUSH
61336: LD_INT 17
61338: ST_TO_ADDR
61339: GO 61701
61341: LD_INT 17
61343: DOUBLE
61344: EQUAL
61345: IFTRUE 61349
61347: GO 61377
61349: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
61350: LD_ADDR_OWVAR 42
61354: PUSH
61355: LD_INT 19
61357: PUSH
61358: LD_INT 23
61360: PUSH
61361: LD_INT 19
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: LIST
61368: PUSH
61369: LD_VAR 0 1
61373: ARRAY
61374: ST_TO_ADDR
61375: GO 61701
61377: LD_INT 18
61379: DOUBLE
61380: EQUAL
61381: IFTRUE 61385
61383: GO 61396
61385: POP
// bc_type := b_ext_radar ; 19 :
61386: LD_ADDR_OWVAR 42
61390: PUSH
61391: LD_INT 20
61393: ST_TO_ADDR
61394: GO 61701
61396: LD_INT 19
61398: DOUBLE
61399: EQUAL
61400: IFTRUE 61404
61402: GO 61415
61404: POP
// bc_type := b_ext_radio ; 20 :
61405: LD_ADDR_OWVAR 42
61409: PUSH
61410: LD_INT 22
61412: ST_TO_ADDR
61413: GO 61701
61415: LD_INT 20
61417: DOUBLE
61418: EQUAL
61419: IFTRUE 61423
61421: GO 61434
61423: POP
// bc_type := b_ext_siberium ; 21 :
61424: LD_ADDR_OWVAR 42
61428: PUSH
61429: LD_INT 21
61431: ST_TO_ADDR
61432: GO 61701
61434: LD_INT 21
61436: DOUBLE
61437: EQUAL
61438: IFTRUE 61442
61440: GO 61453
61442: POP
// bc_type := b_ext_computer ; 22 :
61443: LD_ADDR_OWVAR 42
61447: PUSH
61448: LD_INT 24
61450: ST_TO_ADDR
61451: GO 61701
61453: LD_INT 22
61455: DOUBLE
61456: EQUAL
61457: IFTRUE 61461
61459: GO 61472
61461: POP
// bc_type := b_ext_track ; 23 :
61462: LD_ADDR_OWVAR 42
61466: PUSH
61467: LD_INT 16
61469: ST_TO_ADDR
61470: GO 61701
61472: LD_INT 23
61474: DOUBLE
61475: EQUAL
61476: IFTRUE 61480
61478: GO 61491
61480: POP
// bc_type := b_ext_laser ; 24 :
61481: LD_ADDR_OWVAR 42
61485: PUSH
61486: LD_INT 25
61488: ST_TO_ADDR
61489: GO 61701
61491: LD_INT 24
61493: DOUBLE
61494: EQUAL
61495: IFTRUE 61499
61497: GO 61510
61499: POP
// bc_type := b_control_tower ; 25 :
61500: LD_ADDR_OWVAR 42
61504: PUSH
61505: LD_INT 36
61507: ST_TO_ADDR
61508: GO 61701
61510: LD_INT 25
61512: DOUBLE
61513: EQUAL
61514: IFTRUE 61518
61516: GO 61529
61518: POP
// bc_type := b_breastwork ; 26 :
61519: LD_ADDR_OWVAR 42
61523: PUSH
61524: LD_INT 31
61526: ST_TO_ADDR
61527: GO 61701
61529: LD_INT 26
61531: DOUBLE
61532: EQUAL
61533: IFTRUE 61537
61535: GO 61548
61537: POP
// bc_type := b_bunker ; 27 :
61538: LD_ADDR_OWVAR 42
61542: PUSH
61543: LD_INT 32
61545: ST_TO_ADDR
61546: GO 61701
61548: LD_INT 27
61550: DOUBLE
61551: EQUAL
61552: IFTRUE 61556
61554: GO 61567
61556: POP
// bc_type := b_turret ; 28 :
61557: LD_ADDR_OWVAR 42
61561: PUSH
61562: LD_INT 33
61564: ST_TO_ADDR
61565: GO 61701
61567: LD_INT 28
61569: DOUBLE
61570: EQUAL
61571: IFTRUE 61575
61573: GO 61586
61575: POP
// bc_type := b_armoury ; 29 :
61576: LD_ADDR_OWVAR 42
61580: PUSH
61581: LD_INT 4
61583: ST_TO_ADDR
61584: GO 61701
61586: LD_INT 29
61588: DOUBLE
61589: EQUAL
61590: IFTRUE 61594
61592: GO 61605
61594: POP
// bc_type := b_barracks ; 30 :
61595: LD_ADDR_OWVAR 42
61599: PUSH
61600: LD_INT 5
61602: ST_TO_ADDR
61603: GO 61701
61605: LD_INT 30
61607: DOUBLE
61608: EQUAL
61609: IFTRUE 61613
61611: GO 61624
61613: POP
// bc_type := b_solar_power ; 31 :
61614: LD_ADDR_OWVAR 42
61618: PUSH
61619: LD_INT 27
61621: ST_TO_ADDR
61622: GO 61701
61624: LD_INT 31
61626: DOUBLE
61627: EQUAL
61628: IFTRUE 61632
61630: GO 61643
61632: POP
// bc_type := b_oil_power ; 32 :
61633: LD_ADDR_OWVAR 42
61637: PUSH
61638: LD_INT 26
61640: ST_TO_ADDR
61641: GO 61701
61643: LD_INT 32
61645: DOUBLE
61646: EQUAL
61647: IFTRUE 61651
61649: GO 61662
61651: POP
// bc_type := b_siberite_power ; 33 :
61652: LD_ADDR_OWVAR 42
61656: PUSH
61657: LD_INT 28
61659: ST_TO_ADDR
61660: GO 61701
61662: LD_INT 33
61664: DOUBLE
61665: EQUAL
61666: IFTRUE 61670
61668: GO 61681
61670: POP
// bc_type := b_oil_mine ; 34 :
61671: LD_ADDR_OWVAR 42
61675: PUSH
61676: LD_INT 29
61678: ST_TO_ADDR
61679: GO 61701
61681: LD_INT 34
61683: DOUBLE
61684: EQUAL
61685: IFTRUE 61689
61687: GO 61700
61689: POP
// bc_type := b_siberite_mine ; end ;
61690: LD_ADDR_OWVAR 42
61694: PUSH
61695: LD_INT 30
61697: ST_TO_ADDR
61698: GO 61701
61700: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
61701: LD_ADDR_VAR 0 8
61705: PUSH
61706: LD_VAR 0 5
61710: PPUSH
61711: LD_VAR 0 6
61715: PPUSH
61716: LD_VAR 0 3
61720: PPUSH
61721: CALL_OW 47
61725: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
61726: LD_OWVAR 42
61730: PUSH
61731: LD_INT 32
61733: PUSH
61734: LD_INT 33
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: IN
61741: IFFALSE 61757
// PlaceWeaponTurret ( b , weapon ) ;
61743: LD_VAR 0 8
61747: PPUSH
61748: LD_VAR 0 4
61752: PPUSH
61753: CALL_OW 431
// end ;
61757: LD_VAR 0 7
61761: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
61762: LD_INT 0
61764: PPUSH
61765: PPUSH
61766: PPUSH
61767: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61768: LD_ADDR_VAR 0 4
61772: PUSH
61773: LD_INT 22
61775: PUSH
61776: LD_OWVAR 2
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 2
61787: PUSH
61788: LD_INT 30
61790: PUSH
61791: LD_INT 0
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 30
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: LIST
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PPUSH
61817: CALL_OW 69
61821: ST_TO_ADDR
// if not tmp then
61822: LD_VAR 0 4
61826: NOT
61827: IFFALSE 61831
// exit ;
61829: GO 61890
// for i in tmp do
61831: LD_ADDR_VAR 0 2
61835: PUSH
61836: LD_VAR 0 4
61840: PUSH
61841: FOR_IN
61842: IFFALSE 61888
// for j = 1 to 3 do
61844: LD_ADDR_VAR 0 3
61848: PUSH
61849: DOUBLE
61850: LD_INT 1
61852: DEC
61853: ST_TO_ADDR
61854: LD_INT 3
61856: PUSH
61857: FOR_TO
61858: IFFALSE 61884
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
61860: LD_VAR 0 2
61864: PPUSH
61865: CALL_OW 274
61869: PPUSH
61870: LD_VAR 0 3
61874: PPUSH
61875: LD_INT 99999
61877: PPUSH
61878: CALL_OW 277
61882: GO 61857
61884: POP
61885: POP
61886: GO 61841
61888: POP
61889: POP
// end ;
61890: LD_VAR 0 1
61894: RET
// export function hHackSetLevel10 ; var i , j ; begin
61895: LD_INT 0
61897: PPUSH
61898: PPUSH
61899: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
61900: LD_ADDR_VAR 0 2
61904: PUSH
61905: LD_INT 21
61907: PUSH
61908: LD_INT 1
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PPUSH
61915: CALL_OW 69
61919: PUSH
61920: FOR_IN
61921: IFFALSE 61973
// if IsSelected ( i ) then
61923: LD_VAR 0 2
61927: PPUSH
61928: CALL_OW 306
61932: IFFALSE 61971
// begin for j := 1 to 4 do
61934: LD_ADDR_VAR 0 3
61938: PUSH
61939: DOUBLE
61940: LD_INT 1
61942: DEC
61943: ST_TO_ADDR
61944: LD_INT 4
61946: PUSH
61947: FOR_TO
61948: IFFALSE 61969
// SetSkill ( i , j , 10 ) ;
61950: LD_VAR 0 2
61954: PPUSH
61955: LD_VAR 0 3
61959: PPUSH
61960: LD_INT 10
61962: PPUSH
61963: CALL_OW 237
61967: GO 61947
61969: POP
61970: POP
// end ;
61971: GO 61920
61973: POP
61974: POP
// end ;
61975: LD_VAR 0 1
61979: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
61980: LD_INT 0
61982: PPUSH
61983: PPUSH
61984: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
61985: LD_ADDR_VAR 0 2
61989: PUSH
61990: LD_INT 22
61992: PUSH
61993: LD_OWVAR 2
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 21
62004: PUSH
62005: LD_INT 1
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PPUSH
62016: CALL_OW 69
62020: PUSH
62021: FOR_IN
62022: IFFALSE 62063
// begin for j := 1 to 4 do
62024: LD_ADDR_VAR 0 3
62028: PUSH
62029: DOUBLE
62030: LD_INT 1
62032: DEC
62033: ST_TO_ADDR
62034: LD_INT 4
62036: PUSH
62037: FOR_TO
62038: IFFALSE 62059
// SetSkill ( i , j , 10 ) ;
62040: LD_VAR 0 2
62044: PPUSH
62045: LD_VAR 0 3
62049: PPUSH
62050: LD_INT 10
62052: PPUSH
62053: CALL_OW 237
62057: GO 62037
62059: POP
62060: POP
// end ;
62061: GO 62021
62063: POP
62064: POP
// end ;
62065: LD_VAR 0 1
62069: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
62070: LD_INT 0
62072: PPUSH
// uc_side := your_side ;
62073: LD_ADDR_OWVAR 20
62077: PUSH
62078: LD_OWVAR 2
62082: ST_TO_ADDR
// uc_nation := nation ;
62083: LD_ADDR_OWVAR 21
62087: PUSH
62088: LD_VAR 0 1
62092: ST_TO_ADDR
// InitHc ;
62093: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
62097: LD_INT 0
62099: PPUSH
62100: LD_VAR 0 2
62104: PPUSH
62105: LD_VAR 0 3
62109: PPUSH
62110: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
62114: LD_VAR 0 4
62118: PPUSH
62119: LD_VAR 0 5
62123: PPUSH
62124: CALL_OW 428
62128: PUSH
62129: LD_INT 0
62131: EQUAL
62132: IFFALSE 62156
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
62134: CALL_OW 44
62138: PPUSH
62139: LD_VAR 0 4
62143: PPUSH
62144: LD_VAR 0 5
62148: PPUSH
62149: LD_INT 1
62151: PPUSH
62152: CALL_OW 48
// end ;
62156: LD_VAR 0 6
62160: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
62161: LD_INT 0
62163: PPUSH
62164: PPUSH
// uc_side := your_side ;
62165: LD_ADDR_OWVAR 20
62169: PUSH
62170: LD_OWVAR 2
62174: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
62175: LD_VAR 0 1
62179: PUSH
62180: LD_INT 1
62182: PUSH
62183: LD_INT 2
62185: PUSH
62186: LD_INT 3
62188: PUSH
62189: LD_INT 4
62191: PUSH
62192: LD_INT 5
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: IN
62202: IFFALSE 62214
// uc_nation := nation_american else
62204: LD_ADDR_OWVAR 21
62208: PUSH
62209: LD_INT 1
62211: ST_TO_ADDR
62212: GO 62257
// if chassis in [ 11 , 12 , 13 , 14 ] then
62214: LD_VAR 0 1
62218: PUSH
62219: LD_INT 11
62221: PUSH
62222: LD_INT 12
62224: PUSH
62225: LD_INT 13
62227: PUSH
62228: LD_INT 14
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: IN
62237: IFFALSE 62249
// uc_nation := nation_arabian else
62239: LD_ADDR_OWVAR 21
62243: PUSH
62244: LD_INT 2
62246: ST_TO_ADDR
62247: GO 62257
// uc_nation := nation_russian ;
62249: LD_ADDR_OWVAR 21
62253: PUSH
62254: LD_INT 3
62256: ST_TO_ADDR
// vc_chassis := chassis ;
62257: LD_ADDR_OWVAR 37
62261: PUSH
62262: LD_VAR 0 1
62266: ST_TO_ADDR
// vc_engine := engine ;
62267: LD_ADDR_OWVAR 39
62271: PUSH
62272: LD_VAR 0 2
62276: ST_TO_ADDR
// vc_control := control ;
62277: LD_ADDR_OWVAR 38
62281: PUSH
62282: LD_VAR 0 3
62286: ST_TO_ADDR
// vc_weapon := weapon ;
62287: LD_ADDR_OWVAR 40
62291: PUSH
62292: LD_VAR 0 4
62296: ST_TO_ADDR
// un := CreateVehicle ;
62297: LD_ADDR_VAR 0 8
62301: PUSH
62302: CALL_OW 45
62306: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
62307: LD_VAR 0 8
62311: PPUSH
62312: LD_INT 0
62314: PPUSH
62315: LD_INT 5
62317: PPUSH
62318: CALL_OW 12
62322: PPUSH
62323: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
62327: LD_VAR 0 8
62331: PPUSH
62332: LD_VAR 0 5
62336: PPUSH
62337: LD_VAR 0 6
62341: PPUSH
62342: LD_INT 1
62344: PPUSH
62345: CALL_OW 48
// end ;
62349: LD_VAR 0 7
62353: RET
// export hInvincible ; every 1 do
62354: GO 62356
62356: DISABLE
// hInvincible := [ ] ;
62357: LD_ADDR_EXP 94
62361: PUSH
62362: EMPTY
62363: ST_TO_ADDR
62364: END
// every 10 do var i ;
62365: GO 62367
62367: DISABLE
62368: LD_INT 0
62370: PPUSH
// begin enable ;
62371: ENABLE
// if not hInvincible then
62372: LD_EXP 94
62376: NOT
62377: IFFALSE 62381
// exit ;
62379: GO 62425
// for i in hInvincible do
62381: LD_ADDR_VAR 0 1
62385: PUSH
62386: LD_EXP 94
62390: PUSH
62391: FOR_IN
62392: IFFALSE 62423
// if GetLives ( i ) < 1000 then
62394: LD_VAR 0 1
62398: PPUSH
62399: CALL_OW 256
62403: PUSH
62404: LD_INT 1000
62406: LESS
62407: IFFALSE 62421
// SetLives ( i , 1000 ) ;
62409: LD_VAR 0 1
62413: PPUSH
62414: LD_INT 1000
62416: PPUSH
62417: CALL_OW 234
62421: GO 62391
62423: POP
62424: POP
// end ;
62425: PPOPN 1
62427: END
// export function hHackInvincible ; var i ; begin
62428: LD_INT 0
62430: PPUSH
62431: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
62432: LD_ADDR_VAR 0 2
62436: PUSH
62437: LD_INT 2
62439: PUSH
62440: LD_INT 21
62442: PUSH
62443: LD_INT 1
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 21
62452: PUSH
62453: LD_INT 2
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: LIST
62464: PPUSH
62465: CALL_OW 69
62469: PUSH
62470: FOR_IN
62471: IFFALSE 62532
// if IsSelected ( i ) then
62473: LD_VAR 0 2
62477: PPUSH
62478: CALL_OW 306
62482: IFFALSE 62530
// begin if i in hInvincible then
62484: LD_VAR 0 2
62488: PUSH
62489: LD_EXP 94
62493: IN
62494: IFFALSE 62514
// hInvincible := hInvincible diff i else
62496: LD_ADDR_EXP 94
62500: PUSH
62501: LD_EXP 94
62505: PUSH
62506: LD_VAR 0 2
62510: DIFF
62511: ST_TO_ADDR
62512: GO 62530
// hInvincible := hInvincible union i ;
62514: LD_ADDR_EXP 94
62518: PUSH
62519: LD_EXP 94
62523: PUSH
62524: LD_VAR 0 2
62528: UNION
62529: ST_TO_ADDR
// end ;
62530: GO 62470
62532: POP
62533: POP
// end ;
62534: LD_VAR 0 1
62538: RET
// export function hHackInvisible ; var i , j ; begin
62539: LD_INT 0
62541: PPUSH
62542: PPUSH
62543: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
62544: LD_ADDR_VAR 0 2
62548: PUSH
62549: LD_INT 21
62551: PUSH
62552: LD_INT 1
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PPUSH
62559: CALL_OW 69
62563: PUSH
62564: FOR_IN
62565: IFFALSE 62589
// if IsSelected ( i ) then
62567: LD_VAR 0 2
62571: PPUSH
62572: CALL_OW 306
62576: IFFALSE 62587
// ComForceInvisible ( i ) ;
62578: LD_VAR 0 2
62582: PPUSH
62583: CALL_OW 496
62587: GO 62564
62589: POP
62590: POP
// end ;
62591: LD_VAR 0 1
62595: RET
// export function hHackChangeYourSide ; begin
62596: LD_INT 0
62598: PPUSH
// if your_side = 8 then
62599: LD_OWVAR 2
62603: PUSH
62604: LD_INT 8
62606: EQUAL
62607: IFFALSE 62619
// your_side := 0 else
62609: LD_ADDR_OWVAR 2
62613: PUSH
62614: LD_INT 0
62616: ST_TO_ADDR
62617: GO 62633
// your_side := your_side + 1 ;
62619: LD_ADDR_OWVAR 2
62623: PUSH
62624: LD_OWVAR 2
62628: PUSH
62629: LD_INT 1
62631: PLUS
62632: ST_TO_ADDR
// end ;
62633: LD_VAR 0 1
62637: RET
// export function hHackChangeUnitSide ; var i , j ; begin
62638: LD_INT 0
62640: PPUSH
62641: PPUSH
62642: PPUSH
// for i in all_units do
62643: LD_ADDR_VAR 0 2
62647: PUSH
62648: LD_OWVAR 3
62652: PUSH
62653: FOR_IN
62654: IFFALSE 62732
// if IsSelected ( i ) then
62656: LD_VAR 0 2
62660: PPUSH
62661: CALL_OW 306
62665: IFFALSE 62730
// begin j := GetSide ( i ) ;
62667: LD_ADDR_VAR 0 3
62671: PUSH
62672: LD_VAR 0 2
62676: PPUSH
62677: CALL_OW 255
62681: ST_TO_ADDR
// if j = 8 then
62682: LD_VAR 0 3
62686: PUSH
62687: LD_INT 8
62689: EQUAL
62690: IFFALSE 62702
// j := 0 else
62692: LD_ADDR_VAR 0 3
62696: PUSH
62697: LD_INT 0
62699: ST_TO_ADDR
62700: GO 62716
// j := j + 1 ;
62702: LD_ADDR_VAR 0 3
62706: PUSH
62707: LD_VAR 0 3
62711: PUSH
62712: LD_INT 1
62714: PLUS
62715: ST_TO_ADDR
// SetSide ( i , j ) ;
62716: LD_VAR 0 2
62720: PPUSH
62721: LD_VAR 0 3
62725: PPUSH
62726: CALL_OW 235
// end ;
62730: GO 62653
62732: POP
62733: POP
// end ;
62734: LD_VAR 0 1
62738: RET
// export function hHackFog ; begin
62739: LD_INT 0
62741: PPUSH
// FogOff ( true ) ;
62742: LD_INT 1
62744: PPUSH
62745: CALL_OW 344
// end ;
62749: LD_VAR 0 1
62753: RET
// export function hHackTeleport ( unit , x , y ) ; begin
62754: LD_INT 0
62756: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
62757: LD_VAR 0 1
62761: PPUSH
62762: LD_VAR 0 2
62766: PPUSH
62767: LD_VAR 0 3
62771: PPUSH
62772: LD_INT 1
62774: PPUSH
62775: LD_INT 1
62777: PPUSH
62778: CALL_OW 483
// CenterOnXY ( x , y ) ;
62782: LD_VAR 0 2
62786: PPUSH
62787: LD_VAR 0 3
62791: PPUSH
62792: CALL_OW 84
// end ;
62796: LD_VAR 0 4
62800: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
62801: LD_INT 0
62803: PPUSH
62804: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
62805: LD_VAR 0 1
62809: NOT
62810: PUSH
62811: LD_VAR 0 2
62815: PPUSH
62816: LD_VAR 0 3
62820: PPUSH
62821: CALL_OW 488
62825: NOT
62826: OR
62827: PUSH
62828: LD_VAR 0 1
62832: PPUSH
62833: CALL_OW 266
62837: PUSH
62838: LD_INT 3
62840: NONEQUAL
62841: PUSH
62842: LD_VAR 0 1
62846: PPUSH
62847: CALL_OW 247
62851: PUSH
62852: LD_INT 1
62854: EQUAL
62855: NOT
62856: AND
62857: OR
62858: IFFALSE 62862
// exit ;
62860: GO 63011
// if GetType ( factory ) = unit_human then
62862: LD_VAR 0 1
62866: PPUSH
62867: CALL_OW 247
62871: PUSH
62872: LD_INT 1
62874: EQUAL
62875: IFFALSE 62892
// factory := IsInUnit ( factory ) ;
62877: LD_ADDR_VAR 0 1
62881: PUSH
62882: LD_VAR 0 1
62886: PPUSH
62887: CALL_OW 310
62891: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
62892: LD_VAR 0 1
62896: PPUSH
62897: CALL_OW 266
62901: PUSH
62902: LD_INT 3
62904: NONEQUAL
62905: IFFALSE 62909
// exit ;
62907: GO 63011
// if HexInfo ( x , y ) = factory then
62909: LD_VAR 0 2
62913: PPUSH
62914: LD_VAR 0 3
62918: PPUSH
62919: CALL_OW 428
62923: PUSH
62924: LD_VAR 0 1
62928: EQUAL
62929: IFFALSE 62956
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
62931: LD_ADDR_EXP 95
62935: PUSH
62936: LD_EXP 95
62940: PPUSH
62941: LD_VAR 0 1
62945: PPUSH
62946: LD_INT 0
62948: PPUSH
62949: CALL_OW 1
62953: ST_TO_ADDR
62954: GO 63007
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
62956: LD_ADDR_EXP 95
62960: PUSH
62961: LD_EXP 95
62965: PPUSH
62966: LD_VAR 0 1
62970: PPUSH
62971: LD_VAR 0 1
62975: PPUSH
62976: CALL_OW 255
62980: PUSH
62981: LD_VAR 0 1
62985: PUSH
62986: LD_VAR 0 2
62990: PUSH
62991: LD_VAR 0 3
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: PPUSH
63002: CALL_OW 1
63006: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63007: CALL 63016 0 0
// end ;
63011: LD_VAR 0 4
63015: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63016: LD_INT 0
63018: PPUSH
63019: PPUSH
63020: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63021: LD_STRING resetFactoryWaypoint();
63023: PPUSH
63024: CALL_OW 559
// if factoryWaypoints then
63028: LD_EXP 95
63032: IFFALSE 63158
// begin list := PrepareArray ( factoryWaypoints ) ;
63034: LD_ADDR_VAR 0 3
63038: PUSH
63039: LD_EXP 95
63043: PPUSH
63044: CALL 44101 0 1
63048: ST_TO_ADDR
// for i := 1 to list do
63049: LD_ADDR_VAR 0 2
63053: PUSH
63054: DOUBLE
63055: LD_INT 1
63057: DEC
63058: ST_TO_ADDR
63059: LD_VAR 0 3
63063: PUSH
63064: FOR_TO
63065: IFFALSE 63156
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63067: LD_STRING setFactoryWaypointXY(
63069: PUSH
63070: LD_VAR 0 3
63074: PUSH
63075: LD_VAR 0 2
63079: ARRAY
63080: PUSH
63081: LD_INT 1
63083: ARRAY
63084: STR
63085: PUSH
63086: LD_STRING ,
63088: STR
63089: PUSH
63090: LD_VAR 0 3
63094: PUSH
63095: LD_VAR 0 2
63099: ARRAY
63100: PUSH
63101: LD_INT 2
63103: ARRAY
63104: STR
63105: PUSH
63106: LD_STRING ,
63108: STR
63109: PUSH
63110: LD_VAR 0 3
63114: PUSH
63115: LD_VAR 0 2
63119: ARRAY
63120: PUSH
63121: LD_INT 3
63123: ARRAY
63124: STR
63125: PUSH
63126: LD_STRING ,
63128: STR
63129: PUSH
63130: LD_VAR 0 3
63134: PUSH
63135: LD_VAR 0 2
63139: ARRAY
63140: PUSH
63141: LD_INT 4
63143: ARRAY
63144: STR
63145: PUSH
63146: LD_STRING )
63148: STR
63149: PPUSH
63150: CALL_OW 559
63154: GO 63064
63156: POP
63157: POP
// end ; end ;
63158: LD_VAR 0 1
63162: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
63163: LD_INT 0
63165: PPUSH
// if HexInfo ( x , y ) = warehouse then
63166: LD_VAR 0 2
63170: PPUSH
63171: LD_VAR 0 3
63175: PPUSH
63176: CALL_OW 428
63180: PUSH
63181: LD_VAR 0 1
63185: EQUAL
63186: IFFALSE 63213
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
63188: LD_ADDR_EXP 96
63192: PUSH
63193: LD_EXP 96
63197: PPUSH
63198: LD_VAR 0 1
63202: PPUSH
63203: LD_INT 0
63205: PPUSH
63206: CALL_OW 1
63210: ST_TO_ADDR
63211: GO 63264
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
63213: LD_ADDR_EXP 96
63217: PUSH
63218: LD_EXP 96
63222: PPUSH
63223: LD_VAR 0 1
63227: PPUSH
63228: LD_VAR 0 1
63232: PPUSH
63233: CALL_OW 255
63237: PUSH
63238: LD_VAR 0 1
63242: PUSH
63243: LD_VAR 0 2
63247: PUSH
63248: LD_VAR 0 3
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: PPUSH
63259: CALL_OW 1
63263: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
63264: CALL 63273 0 0
// end ;
63268: LD_VAR 0 4
63272: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
63273: LD_INT 0
63275: PPUSH
63276: PPUSH
63277: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
63278: LD_STRING resetWarehouseGatheringPoints();
63280: PPUSH
63281: CALL_OW 559
// if warehouseGatheringPoints then
63285: LD_EXP 96
63289: IFFALSE 63415
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
63291: LD_ADDR_VAR 0 3
63295: PUSH
63296: LD_EXP 96
63300: PPUSH
63301: CALL 44101 0 1
63305: ST_TO_ADDR
// for i := 1 to list do
63306: LD_ADDR_VAR 0 2
63310: PUSH
63311: DOUBLE
63312: LD_INT 1
63314: DEC
63315: ST_TO_ADDR
63316: LD_VAR 0 3
63320: PUSH
63321: FOR_TO
63322: IFFALSE 63413
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63324: LD_STRING setWarehouseGatheringPointXY(
63326: PUSH
63327: LD_VAR 0 3
63331: PUSH
63332: LD_VAR 0 2
63336: ARRAY
63337: PUSH
63338: LD_INT 1
63340: ARRAY
63341: STR
63342: PUSH
63343: LD_STRING ,
63345: STR
63346: PUSH
63347: LD_VAR 0 3
63351: PUSH
63352: LD_VAR 0 2
63356: ARRAY
63357: PUSH
63358: LD_INT 2
63360: ARRAY
63361: STR
63362: PUSH
63363: LD_STRING ,
63365: STR
63366: PUSH
63367: LD_VAR 0 3
63371: PUSH
63372: LD_VAR 0 2
63376: ARRAY
63377: PUSH
63378: LD_INT 3
63380: ARRAY
63381: STR
63382: PUSH
63383: LD_STRING ,
63385: STR
63386: PUSH
63387: LD_VAR 0 3
63391: PUSH
63392: LD_VAR 0 2
63396: ARRAY
63397: PUSH
63398: LD_INT 4
63400: ARRAY
63401: STR
63402: PUSH
63403: LD_STRING )
63405: STR
63406: PPUSH
63407: CALL_OW 559
63411: GO 63321
63413: POP
63414: POP
// end ; end ;
63415: LD_VAR 0 1
63419: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
63420: LD_EXP 96
63424: IFFALSE 64111
63426: GO 63428
63428: DISABLE
63429: LD_INT 0
63431: PPUSH
63432: PPUSH
63433: PPUSH
63434: PPUSH
63435: PPUSH
63436: PPUSH
63437: PPUSH
63438: PPUSH
63439: PPUSH
// begin enable ;
63440: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
63441: LD_ADDR_VAR 0 3
63445: PUSH
63446: LD_EXP 96
63450: PPUSH
63451: CALL 44101 0 1
63455: ST_TO_ADDR
// if not list then
63456: LD_VAR 0 3
63460: NOT
63461: IFFALSE 63465
// exit ;
63463: GO 64111
// for i := 1 to list do
63465: LD_ADDR_VAR 0 1
63469: PUSH
63470: DOUBLE
63471: LD_INT 1
63473: DEC
63474: ST_TO_ADDR
63475: LD_VAR 0 3
63479: PUSH
63480: FOR_TO
63481: IFFALSE 64109
// begin depot := list [ i ] [ 2 ] ;
63483: LD_ADDR_VAR 0 8
63487: PUSH
63488: LD_VAR 0 3
63492: PUSH
63493: LD_VAR 0 1
63497: ARRAY
63498: PUSH
63499: LD_INT 2
63501: ARRAY
63502: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
63503: LD_ADDR_VAR 0 5
63507: PUSH
63508: LD_VAR 0 3
63512: PUSH
63513: LD_VAR 0 1
63517: ARRAY
63518: PUSH
63519: LD_INT 1
63521: ARRAY
63522: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
63523: LD_VAR 0 8
63527: PPUSH
63528: CALL_OW 301
63532: PUSH
63533: LD_VAR 0 5
63537: PUSH
63538: LD_VAR 0 8
63542: PPUSH
63543: CALL_OW 255
63547: NONEQUAL
63548: OR
63549: IFFALSE 63578
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
63551: LD_ADDR_EXP 96
63555: PUSH
63556: LD_EXP 96
63560: PPUSH
63561: LD_VAR 0 8
63565: PPUSH
63566: LD_INT 0
63568: PPUSH
63569: CALL_OW 1
63573: ST_TO_ADDR
// exit ;
63574: POP
63575: POP
63576: GO 64111
// end ; x := list [ i ] [ 3 ] ;
63578: LD_ADDR_VAR 0 6
63582: PUSH
63583: LD_VAR 0 3
63587: PUSH
63588: LD_VAR 0 1
63592: ARRAY
63593: PUSH
63594: LD_INT 3
63596: ARRAY
63597: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
63598: LD_ADDR_VAR 0 7
63602: PUSH
63603: LD_VAR 0 3
63607: PUSH
63608: LD_VAR 0 1
63612: ARRAY
63613: PUSH
63614: LD_INT 4
63616: ARRAY
63617: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
63618: LD_ADDR_VAR 0 9
63622: PUSH
63623: LD_VAR 0 6
63627: PPUSH
63628: LD_VAR 0 7
63632: PPUSH
63633: LD_INT 16
63635: PPUSH
63636: CALL 42685 0 3
63640: ST_TO_ADDR
// if not cratesNearbyPoint then
63641: LD_VAR 0 9
63645: NOT
63646: IFFALSE 63652
// exit ;
63648: POP
63649: POP
63650: GO 64111
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
63652: LD_ADDR_VAR 0 4
63656: PUSH
63657: LD_INT 22
63659: PUSH
63660: LD_VAR 0 5
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 3
63671: PUSH
63672: LD_INT 60
63674: PUSH
63675: EMPTY
63676: LIST
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 91
63684: PUSH
63685: LD_VAR 0 8
63689: PUSH
63690: LD_INT 6
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 2
63700: PUSH
63701: LD_INT 25
63703: PUSH
63704: LD_INT 2
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 25
63713: PUSH
63714: LD_INT 16
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: LIST
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: PPUSH
63732: CALL_OW 69
63736: PUSH
63737: LD_VAR 0 8
63741: PPUSH
63742: CALL_OW 313
63746: PPUSH
63747: LD_INT 3
63749: PUSH
63750: LD_INT 60
63752: PUSH
63753: EMPTY
63754: LIST
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 2
63762: PUSH
63763: LD_INT 25
63765: PUSH
63766: LD_INT 2
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 25
63775: PUSH
63776: LD_INT 16
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: LIST
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PPUSH
63792: CALL_OW 72
63796: UNION
63797: ST_TO_ADDR
// if tmp then
63798: LD_VAR 0 4
63802: IFFALSE 63882
// begin tmp := ShrinkArray ( tmp , 3 ) ;
63804: LD_ADDR_VAR 0 4
63808: PUSH
63809: LD_VAR 0 4
63813: PPUSH
63814: LD_INT 3
63816: PPUSH
63817: CALL 40652 0 2
63821: ST_TO_ADDR
// for j in tmp do
63822: LD_ADDR_VAR 0 2
63826: PUSH
63827: LD_VAR 0 4
63831: PUSH
63832: FOR_IN
63833: IFFALSE 63876
// begin if IsInUnit ( j ) then
63835: LD_VAR 0 2
63839: PPUSH
63840: CALL_OW 310
63844: IFFALSE 63855
// ComExit ( j ) ;
63846: LD_VAR 0 2
63850: PPUSH
63851: CALL 40735 0 1
// AddComCollect ( j , x , y ) ;
63855: LD_VAR 0 2
63859: PPUSH
63860: LD_VAR 0 6
63864: PPUSH
63865: LD_VAR 0 7
63869: PPUSH
63870: CALL_OW 177
// end ;
63874: GO 63832
63876: POP
63877: POP
// exit ;
63878: POP
63879: POP
63880: GO 64111
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
63882: LD_ADDR_VAR 0 4
63886: PUSH
63887: LD_INT 22
63889: PUSH
63890: LD_VAR 0 5
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 91
63901: PUSH
63902: LD_VAR 0 8
63906: PUSH
63907: LD_INT 8
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 2
63917: PUSH
63918: LD_INT 34
63920: PUSH
63921: LD_INT 12
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 34
63930: PUSH
63931: LD_INT 51
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 34
63940: PUSH
63941: LD_INT 32
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 34
63950: PUSH
63951: LD_EXP 10
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: LIST
63971: PPUSH
63972: CALL_OW 69
63976: ST_TO_ADDR
// if tmp then
63977: LD_VAR 0 4
63981: IFFALSE 64107
// begin for j in tmp do
63983: LD_ADDR_VAR 0 2
63987: PUSH
63988: LD_VAR 0 4
63992: PUSH
63993: FOR_IN
63994: IFFALSE 64105
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
63996: LD_VAR 0 2
64000: PPUSH
64001: CALL_OW 262
64005: PUSH
64006: LD_INT 3
64008: EQUAL
64009: PUSH
64010: LD_VAR 0 2
64014: PPUSH
64015: CALL_OW 261
64019: PUSH
64020: LD_INT 20
64022: GREATER
64023: OR
64024: PUSH
64025: LD_VAR 0 2
64029: PPUSH
64030: CALL_OW 314
64034: NOT
64035: AND
64036: PUSH
64037: LD_VAR 0 2
64041: PPUSH
64042: CALL_OW 263
64046: PUSH
64047: LD_INT 1
64049: NONEQUAL
64050: PUSH
64051: LD_VAR 0 2
64055: PPUSH
64056: CALL_OW 311
64060: OR
64061: AND
64062: IFFALSE 64103
// begin ComCollect ( j , x , y ) ;
64064: LD_VAR 0 2
64068: PPUSH
64069: LD_VAR 0 6
64073: PPUSH
64074: LD_VAR 0 7
64078: PPUSH
64079: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
64083: LD_VAR 0 2
64087: PPUSH
64088: LD_VAR 0 8
64092: PPUSH
64093: CALL_OW 172
// exit ;
64097: POP
64098: POP
64099: POP
64100: POP
64101: GO 64111
// end ;
64103: GO 63993
64105: POP
64106: POP
// end ; end ;
64107: GO 63480
64109: POP
64110: POP
// end ; end_of_file end_of_file
64111: PPOPN 9
64113: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64114: LD_VAR 0 1
64118: PUSH
64119: LD_INT 200
64121: DOUBLE
64122: GREATEREQUAL
64123: IFFALSE 64131
64125: LD_INT 299
64127: DOUBLE
64128: LESSEQUAL
64129: IFTRUE 64133
64131: GO 64165
64133: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64134: LD_VAR 0 1
64138: PPUSH
64139: LD_VAR 0 2
64143: PPUSH
64144: LD_VAR 0 3
64148: PPUSH
64149: LD_VAR 0 4
64153: PPUSH
64154: LD_VAR 0 5
64158: PPUSH
64159: CALL 44530 0 5
64163: GO 64242
64165: LD_INT 300
64167: DOUBLE
64168: GREATEREQUAL
64169: IFFALSE 64177
64171: LD_INT 399
64173: DOUBLE
64174: LESSEQUAL
64175: IFTRUE 64179
64177: GO 64241
64179: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64180: LD_VAR 0 1
64184: PPUSH
64185: LD_VAR 0 2
64189: PPUSH
64190: LD_VAR 0 3
64194: PPUSH
64195: LD_VAR 0 4
64199: PPUSH
64200: LD_VAR 0 5
64204: PPUSH
64205: LD_VAR 0 6
64209: PPUSH
64210: LD_VAR 0 7
64214: PPUSH
64215: LD_VAR 0 8
64219: PPUSH
64220: LD_VAR 0 9
64224: PPUSH
64225: LD_VAR 0 10
64229: PPUSH
64230: LD_VAR 0 11
64234: PPUSH
64235: CALL 60821 0 11
64239: GO 64242
64241: POP
// end ;
64242: PPOPN 11
64244: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
64245: LD_VAR 0 1
64249: PPUSH
64250: LD_VAR 0 2
64254: PPUSH
64255: LD_VAR 0 3
64259: PPUSH
64260: LD_VAR 0 4
64264: PPUSH
64265: LD_VAR 0 5
64269: PPUSH
64270: CALL 44266 0 5
// end ; end_of_file
64274: PPOPN 5
64276: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
64277: LD_VAR 0 1
64281: PPUSH
64282: LD_VAR 0 2
64286: PPUSH
64287: LD_VAR 0 3
64291: PPUSH
64292: LD_VAR 0 4
64296: PPUSH
64297: LD_VAR 0 5
64301: PPUSH
64302: LD_VAR 0 6
64306: PPUSH
64307: CALL 48514 0 6
// end ;
64311: PPOPN 6
64313: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
64314: LD_INT 0
64316: PPUSH
// begin if not units then
64317: LD_VAR 0 1
64321: NOT
64322: IFFALSE 64326
// exit ;
64324: GO 64326
// end ;
64326: PPOPN 7
64328: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
64329: CALL 48485 0 0
// end ;
64333: PPOPN 1
64335: END
