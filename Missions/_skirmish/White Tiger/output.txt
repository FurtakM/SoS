// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 2753 0 0
// Init ;
   8: CALL 67 0 0
// if debug then
  12: LD_EXP 1
  16: IFFALSE 28
// Difficulty := 2 else
  18: LD_ADDR_OWVAR 67
  22: PUSH
  23: LD_INT 2
  25: ST_TO_ADDR
  26: GO 41
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  28: LD_ADDR_OWVAR 67
  32: PUSH
  33: LD_INT 0
  35: PPUSH
  36: CALL_OW 426
  40: ST_TO_ADDR
// PrepareAlliance ;
  41: CALL 83 0 0
// PrepareRussian ;
  45: CALL 452 0 0
// Action ;
  49: CALL 2372 0 0
// if debug then
  53: LD_EXP 1
  57: IFFALSE 66
// FogOff ( 7 ) ;
  59: LD_INT 7
  61: PPUSH
  62: CALL_OW 344
// end ;
  66: END
// export debug ; export function Init ; begin
  67: LD_INT 0
  69: PPUSH
// debug := false ;
  70: LD_ADDR_EXP 1
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// end ; end_of_file
  78: LD_VAR 0 1
  82: RET
// export allianceHack , allianceMechanic ; export function PrepareAlliance ; var i , tmp ; begin
  83: LD_INT 0
  85: PPUSH
  86: PPUSH
  87: PPUSH
// tmp := [ ] ;
  88: LD_ADDR_VAR 0 3
  92: PUSH
  93: EMPTY
  94: ST_TO_ADDR
// uc_side := 7 ;
  95: LD_ADDR_OWVAR 20
  99: PUSH
 100: LD_INT 7
 102: ST_TO_ADDR
// uc_nation := 1 ;
 103: LD_ADDR_OWVAR 21
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_hack , 100 ) ;
 111: LD_INT 5
 113: PPUSH
 114: LD_INT 3
 116: PPUSH
 117: LD_INT 3
 119: PPUSH
 120: LD_EXP 11
 124: PPUSH
 125: LD_INT 100
 127: PPUSH
 128: CALL 7785 0 5
// allianceHack := CreateVehicle ;
 132: LD_ADDR_EXP 2
 136: PUSH
 137: CALL_OW 45
 141: ST_TO_ADDR
// PlaceUnitArea ( allianceHack , startSpawnArea , false ) ;
 142: LD_EXP 2
 146: PPUSH
 147: LD_INT 7
 149: PPUSH
 150: LD_INT 0
 152: PPUSH
 153: CALL_OW 49
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_double_laser , 100 ) ;
 157: LD_INT 5
 159: PPUSH
 160: LD_INT 3
 162: PPUSH
 163: LD_INT 3
 165: PPUSH
 166: LD_INT 10
 168: PPUSH
 169: LD_INT 100
 171: PPUSH
 172: CALL 7785 0 5
// for i := 1 to 2 do
 176: LD_ADDR_VAR 0 2
 180: PUSH
 181: DOUBLE
 182: LD_INT 1
 184: DEC
 185: ST_TO_ADDR
 186: LD_INT 2
 188: PUSH
 189: FOR_TO
 190: IFFALSE 209
// PlaceUnitArea ( CreateVehicle , startSpawnArea , false ) ;
 192: CALL_OW 45
 196: PPUSH
 197: LD_INT 7
 199: PPUSH
 200: LD_INT 0
 202: PPUSH
 203: CALL_OW 49
 207: GO 189
 209: POP
 210: POP
// uc_side := 4 ;
 211: LD_ADDR_OWVAR 20
 215: PUSH
 216: LD_INT 4
 218: ST_TO_ADDR
// uc_nation := 1 ;
 219: LD_ADDR_OWVAR 21
 223: PUSH
 224: LD_INT 1
 226: ST_TO_ADDR
// PrepareMechanic ( sex_male , 9 ) ;
 227: LD_INT 1
 229: PPUSH
 230: LD_INT 9
 232: PPUSH
 233: CALL_OW 383
// allianceMechanic := CreateHuman ;
 237: LD_ADDR_EXP 3
 241: PUSH
 242: CALL_OW 44
 246: ST_TO_ADDR
// PlaceHumanInUnit ( allianceMechanic , ruDep2 ) ;
 247: LD_EXP 3
 251: PPUSH
 252: LD_INT 96
 254: PPUSH
 255: CALL_OW 52
// end ;
 259: LD_VAR 0 1
 263: RET
// export function PrepareReinforcements ( ) ; var i , un ; begin
 264: LD_INT 0
 266: PPUSH
 267: PPUSH
 268: PPUSH
// uc_side := 7 ;
 269: LD_ADDR_OWVAR 20
 273: PUSH
 274: LD_INT 7
 276: ST_TO_ADDR
// uc_nation := 1 ;
 277: LD_ADDR_OWVAR 21
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 285: LD_ADDR_VAR 0 2
 289: PUSH
 290: DOUBLE
 291: LD_INT 1
 293: DEC
 294: ST_TO_ADDR
 295: LD_INT 3
 297: PUSH
 298: LD_INT 2
 300: PUSH
 301: LD_INT 2
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: LIST
 308: PUSH
 309: LD_OWVAR 67
 313: ARRAY
 314: PUSH
 315: FOR_TO
 316: IFFALSE 386
// begin PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_rocket_launcher , 100 ) ;
 318: LD_INT 5
 320: PPUSH
 321: LD_INT 3
 323: PPUSH
 324: LD_INT 3
 326: PPUSH
 327: LD_INT 7
 329: PPUSH
 330: LD_INT 100
 332: PPUSH
 333: CALL 7785 0 5
// un := CreateVehicle ;
 337: LD_ADDR_VAR 0 3
 341: PUSH
 342: CALL_OW 45
 346: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 347: LD_VAR 0 3
 351: PPUSH
 352: LD_INT 7
 354: PPUSH
 355: LD_INT 0
 357: PPUSH
 358: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 362: LD_VAR 0 3
 366: PPUSH
 367: LD_INT 67
 369: PPUSH
 370: LD_INT 95
 372: PPUSH
 373: CALL_OW 111
// wait ( 0 0$2 ) ;
 377: LD_INT 70
 379: PPUSH
 380: CALL_OW 67
// end ;
 384: GO 315
 386: POP
 387: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_radar , 100 ) ;
 388: LD_INT 5
 390: PPUSH
 391: LD_INT 3
 393: PPUSH
 394: LD_INT 3
 396: PPUSH
 397: LD_INT 11
 399: PPUSH
 400: LD_INT 100
 402: PPUSH
 403: CALL 7785 0 5
// un := CreateVehicle ;
 407: LD_ADDR_VAR 0 3
 411: PUSH
 412: CALL_OW 45
 416: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 417: LD_VAR 0 3
 421: PPUSH
 422: LD_INT 7
 424: PPUSH
 425: LD_INT 0
 427: PPUSH
 428: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 432: LD_VAR 0 3
 436: PPUSH
 437: LD_INT 67
 439: PPUSH
 440: LD_INT 95
 442: PPUSH
 443: CALL_OW 111
// end ; end_of_file
 447: LD_VAR 0 1
 451: RET
// export ruGuard1 , ruGuard2 , ruGuard3 , ruForces , ruEng ; export function PrepareRussian ; var i , un ; begin
 452: LD_INT 0
 454: PPUSH
 455: PPUSH
 456: PPUSH
// uc_side := 3 ;
 457: LD_ADDR_OWVAR 20
 461: PUSH
 462: LD_INT 3
 464: ST_TO_ADDR
// uc_nation := 3 ;
 465: LD_ADDR_OWVAR 21
 469: PUSH
 470: LD_INT 3
 472: ST_TO_ADDR
// SetResourceType ( GetBase ( ruDep ) , mat_cans , 50000 ) ;
 473: LD_INT 14
 475: PPUSH
 476: CALL_OW 274
 480: PPUSH
 481: LD_INT 1
 483: PPUSH
 484: LD_INT 50000
 486: PPUSH
 487: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , mat_siberit , 5000 ) ;
 491: LD_INT 14
 493: PPUSH
 494: CALL_OW 274
 498: PPUSH
 499: LD_INT 3
 501: PPUSH
 502: LD_INT 5000
 504: PPUSH
 505: CALL_OW 277
// TeleportExit ( ruTeleport , 132 , 89 ) ;
 509: LD_INT 45
 511: PPUSH
 512: LD_INT 132
 514: PPUSH
 515: LD_INT 89
 517: PPUSH
 518: CALL_OW 243
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
 522: LD_ADDR_VAR 0 2
 526: PUSH
 527: LD_INT 21
 529: PUSH
 530: LD_INT 3
 532: PUSH
 533: EMPTY
 534: LIST
 535: LIST
 536: PPUSH
 537: CALL_OW 69
 541: PUSH
 542: FOR_IN
 543: IFFALSE 576
// SetBLevel ( i , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
 545: LD_VAR 0 2
 549: PPUSH
 550: LD_INT 6
 552: PUSH
 553: LD_INT 8
 555: PUSH
 556: LD_INT 10
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: LIST
 563: PUSH
 564: LD_OWVAR 67
 568: ARRAY
 569: PPUSH
 570: CALL_OW 241
 574: GO 542
 576: POP
 577: POP
// for i := 1 to 4 do
 578: LD_ADDR_VAR 0 2
 582: PUSH
 583: DOUBLE
 584: LD_INT 1
 586: DEC
 587: ST_TO_ADDR
 588: LD_INT 4
 590: PUSH
 591: FOR_TO
 592: IFFALSE 618
// begin PrepareMechanic ( false , 9 ) ;
 594: LD_INT 0
 596: PPUSH
 597: LD_INT 9
 599: PPUSH
 600: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFac ) ;
 604: CALL_OW 44
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: CALL_OW 52
// end ;
 616: GO 591
 618: POP
 619: POP
// ruGuard1 := [ ] ;
 620: LD_ADDR_EXP 4
 624: PUSH
 625: EMPTY
 626: ST_TO_ADDR
// ruGuard2 := [ ] ;
 627: LD_ADDR_EXP 5
 631: PUSH
 632: EMPTY
 633: ST_TO_ADDR
// ruGuard3 := [ ] ;
 634: LD_ADDR_EXP 6
 638: PUSH
 639: EMPTY
 640: ST_TO_ADDR
// ruForces := [ ] ;
 641: LD_ADDR_EXP 7
 645: PUSH
 646: EMPTY
 647: ST_TO_ADDR
// ruEng := [ ] ;
 648: LD_ADDR_EXP 8
 652: PUSH
 653: EMPTY
 654: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: DOUBLE
 661: LD_INT 1
 663: DEC
 664: ST_TO_ADDR
 665: LD_INT 4
 667: PUSH
 668: LD_INT 5
 670: PUSH
 671: LD_INT 6
 673: PUSH
 674: EMPTY
 675: LIST
 676: LIST
 677: LIST
 678: PUSH
 679: LD_OWVAR 67
 683: ARRAY
 684: PUSH
 685: FOR_TO
 686: IFFALSE 742
// begin PrepareEngineer ( false , 8 ) ;
 688: LD_INT 0
 690: PPUSH
 691: LD_INT 8
 693: PPUSH
 694: CALL_OW 382
// un := CreateHuman ;
 698: LD_ADDR_VAR 0 3
 702: PUSH
 703: CALL_OW 44
 707: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruDep ) ;
 708: LD_VAR 0 3
 712: PPUSH
 713: LD_INT 14
 715: PPUSH
 716: CALL_OW 52
// ruEng := Join ( ruEng , un ) ;
 720: LD_ADDR_EXP 8
 724: PUSH
 725: LD_EXP 8
 729: PPUSH
 730: LD_VAR 0 3
 734: PPUSH
 735: CALL 39658 0 2
 739: ST_TO_ADDR
// end ;
 740: GO 685
 742: POP
 743: POP
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
 744: LD_ADDR_VAR 0 2
 748: PUSH
 749: DOUBLE
 750: LD_INT 1
 752: DEC
 753: ST_TO_ADDR
 754: LD_INT 5
 756: PUSH
 757: LD_INT 6
 759: PUSH
 760: LD_INT 7
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: LIST
 767: PUSH
 768: LD_OWVAR 67
 772: ARRAY
 773: PUSH
 774: FOR_TO
 775: IFFALSE 885
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 777: LD_INT 24
 779: PPUSH
 780: LD_INT 3
 782: PPUSH
 783: LD_INT 3
 785: PPUSH
 786: LD_INT 46
 788: PUSH
 789: LD_INT 45
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: PUSH
 796: LD_VAR 0 2
 800: PUSH
 801: LD_INT 2
 803: MOD
 804: PUSH
 805: LD_INT 1
 807: PLUS
 808: ARRAY
 809: PPUSH
 810: LD_INT 100
 812: PPUSH
 813: CALL 7785 0 5
// un := CreateVehicle ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: CALL_OW 45
 826: ST_TO_ADDR
// SetDir ( un , 3 ) ;
 827: LD_VAR 0 3
 831: PPUSH
 832: LD_INT 3
 834: PPUSH
 835: CALL_OW 233
// PlaceUnitArea ( un , riverGuard1 , false ) ;
 839: LD_VAR 0 3
 843: PPUSH
 844: LD_INT 4
 846: PPUSH
 847: LD_INT 0
 849: PPUSH
 850: CALL_OW 49
// ruGuard1 := Replace ( ruGuard1 , ruGuard1 + 1 , un ) ;
 854: LD_ADDR_EXP 4
 858: PUSH
 859: LD_EXP 4
 863: PPUSH
 864: LD_EXP 4
 868: PUSH
 869: LD_INT 1
 871: PLUS
 872: PPUSH
 873: LD_VAR 0 3
 877: PPUSH
 878: CALL_OW 1
 882: ST_TO_ADDR
// end ;
 883: GO 774
 885: POP
 886: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
 887: LD_ADDR_VAR 0 2
 891: PUSH
 892: DOUBLE
 893: LD_INT 1
 895: DEC
 896: ST_TO_ADDR
 897: LD_INT 4
 899: PUSH
 900: LD_INT 4
 902: PUSH
 903: LD_INT 5
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: LD_OWVAR 67
 915: ARRAY
 916: PUSH
 917: FOR_TO
 918: IFFALSE 1028
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 920: LD_INT 24
 922: PPUSH
 923: LD_INT 3
 925: PPUSH
 926: LD_INT 3
 928: PPUSH
 929: LD_INT 46
 931: PUSH
 932: LD_INT 45
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_VAR 0 2
 943: PUSH
 944: LD_INT 2
 946: MOD
 947: PUSH
 948: LD_INT 1
 950: PLUS
 951: ARRAY
 952: PPUSH
 953: LD_INT 100
 955: PPUSH
 956: CALL 7785 0 5
// un := CreateVehicle ;
 960: LD_ADDR_VAR 0 3
 964: PUSH
 965: CALL_OW 45
 969: ST_TO_ADDR
// SetDir ( un , 4 ) ;
 970: LD_VAR 0 3
 974: PPUSH
 975: LD_INT 4
 977: PPUSH
 978: CALL_OW 233
// PlaceUnitArea ( un , riverGuard2 , false ) ;
 982: LD_VAR 0 3
 986: PPUSH
 987: LD_INT 5
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 49
// ruGuard2 := Replace ( ruGuard2 , ruGuard2 + 1 , un ) ;
 997: LD_ADDR_EXP 5
1001: PUSH
1002: LD_EXP 5
1006: PPUSH
1007: LD_EXP 5
1011: PUSH
1012: LD_INT 1
1014: PLUS
1015: PPUSH
1016: LD_VAR 0 3
1020: PPUSH
1021: CALL_OW 1
1025: ST_TO_ADDR
// end ;
1026: GO 917
1028: POP
1029: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
1030: LD_ADDR_VAR 0 2
1034: PUSH
1035: DOUBLE
1036: LD_INT 1
1038: DEC
1039: ST_TO_ADDR
1040: LD_INT 4
1042: PUSH
1043: LD_INT 4
1045: PUSH
1046: LD_INT 5
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: PUSH
1054: LD_OWVAR 67
1058: ARRAY
1059: PUSH
1060: FOR_TO
1061: IFFALSE 1171
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
1063: LD_INT 24
1065: PPUSH
1066: LD_INT 3
1068: PPUSH
1069: LD_INT 3
1071: PPUSH
1072: LD_INT 46
1074: PUSH
1075: LD_INT 45
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PUSH
1082: LD_VAR 0 2
1086: PUSH
1087: LD_INT 2
1089: MOD
1090: PUSH
1091: LD_INT 1
1093: PLUS
1094: ARRAY
1095: PPUSH
1096: LD_INT 100
1098: PPUSH
1099: CALL 7785 0 5
// un := CreateVehicle ;
1103: LD_ADDR_VAR 0 3
1107: PUSH
1108: CALL_OW 45
1112: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1113: LD_VAR 0 3
1117: PPUSH
1118: LD_INT 1
1120: PPUSH
1121: CALL_OW 233
// PlaceUnitArea ( un , riverGuard3 , false ) ;
1125: LD_VAR 0 3
1129: PPUSH
1130: LD_INT 6
1132: PPUSH
1133: LD_INT 0
1135: PPUSH
1136: CALL_OW 49
// ruGuard3 := Replace ( ruGuard3 , ruGuard3 + 1 , un ) ;
1140: LD_ADDR_EXP 6
1144: PUSH
1145: LD_EXP 6
1149: PPUSH
1150: LD_EXP 6
1154: PUSH
1155: LD_INT 1
1157: PLUS
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: CALL_OW 1
1168: ST_TO_ADDR
// end ;
1169: GO 1060
1171: POP
1172: POP
// for i := 1 to 2 do
1173: LD_ADDR_VAR 0 2
1177: PUSH
1178: DOUBLE
1179: LD_INT 1
1181: DEC
1182: ST_TO_ADDR
1183: LD_INT 2
1185: PUSH
1186: FOR_TO
1187: IFFALSE 1235
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
1189: LD_INT 22
1191: PPUSH
1192: LD_INT 3
1194: PPUSH
1195: LD_INT 3
1197: PPUSH
1198: LD_INT 52
1200: PPUSH
1201: LD_INT 100
1203: PPUSH
1204: CALL 7785 0 5
// un := CreateVehicle ;
1208: LD_ADDR_VAR 0 3
1212: PUSH
1213: CALL_OW 45
1217: ST_TO_ADDR
// PlaceUnitArea ( un , ruCraneArea , false ) ;
1218: LD_VAR 0 3
1222: PPUSH
1223: LD_INT 9
1225: PPUSH
1226: LD_INT 0
1228: PPUSH
1229: CALL_OW 49
// end ;
1233: GO 1186
1235: POP
1236: POP
// for i := 1 to 3 do
1237: LD_ADDR_VAR 0 2
1241: PUSH
1242: DOUBLE
1243: LD_INT 1
1245: DEC
1246: ST_TO_ADDR
1247: LD_INT 3
1249: PUSH
1250: FOR_TO
1251: IFFALSE 1288
// begin PrepareHuman ( false , class_bazooker , 8 ) ;
1253: LD_INT 0
1255: PPUSH
1256: LD_INT 9
1258: PPUSH
1259: LD_INT 8
1261: PPUSH
1262: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 91 , 83 ) ) ;
1266: CALL_OW 44
1270: PPUSH
1271: LD_INT 91
1273: PPUSH
1274: LD_INT 83
1276: PPUSH
1277: CALL_OW 428
1281: PPUSH
1282: CALL_OW 52
// end ;
1286: GO 1250
1288: POP
1289: POP
// end ;
1290: LD_VAR 0 1
1294: RET
// every 0 0$1 trigger ruEng do var i , tmp ;
1295: LD_EXP 8
1299: IFFALSE 1493
1301: GO 1303
1303: DISABLE
1304: LD_INT 0
1306: PPUSH
1307: PPUSH
// begin enable ;
1308: ENABLE
// tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1309: LD_ADDR_VAR 0 2
1313: PUSH
1314: LD_INT 10
1316: PPUSH
1317: LD_INT 21
1319: PUSH
1320: LD_INT 3
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PUSH
1327: LD_INT 3
1329: PUSH
1330: LD_INT 24
1332: PUSH
1333: LD_INT 1000
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PPUSH
1348: CALL_OW 70
1352: ST_TO_ADDR
// if not tmp and UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) then
1353: LD_VAR 0 2
1357: NOT
1358: PUSH
1359: LD_EXP 8
1363: PPUSH
1364: LD_INT 3
1366: PUSH
1367: LD_INT 54
1369: PUSH
1370: EMPTY
1371: LIST
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 72
1381: AND
1382: IFFALSE 1414
// ComEnterUnit ( UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) , ruDep ) ;
1384: LD_EXP 8
1388: PPUSH
1389: LD_INT 3
1391: PUSH
1392: LD_INT 54
1394: PUSH
1395: EMPTY
1396: LIST
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PPUSH
1402: CALL_OW 72
1406: PPUSH
1407: LD_INT 14
1409: PPUSH
1410: CALL_OW 120
// if tmp then
1414: LD_VAR 0 2
1418: IFFALSE 1493
// begin for i in ruEng do
1420: LD_ADDR_VAR 0 1
1424: PUSH
1425: LD_EXP 8
1429: PUSH
1430: FOR_IN
1431: IFFALSE 1491
// if IsInUnit ( i ) then
1433: LD_VAR 0 1
1437: PPUSH
1438: CALL_OW 310
1442: IFFALSE 1455
// ComExitBuilding ( i ) else
1444: LD_VAR 0 1
1448: PPUSH
1449: CALL_OW 122
1453: GO 1489
// ComRepairBuilding ( i , SortByDistanceUnit ( i , tmp , true , true ) [ 1 ] ) ;
1455: LD_VAR 0 1
1459: PPUSH
1460: LD_VAR 0 1
1464: PPUSH
1465: LD_VAR 0 2
1469: PPUSH
1470: LD_INT 1
1472: PPUSH
1473: LD_INT 1
1475: PPUSH
1476: CALL 8342 0 4
1480: PUSH
1481: LD_INT 1
1483: ARRAY
1484: PPUSH
1485: CALL_OW 130
1489: GO 1430
1491: POP
1492: POP
// end ; end ;
1493: PPOPN 2
1495: END
// every 4 4$00 trigger not ruForces do var i , tmp ;
1496: LD_EXP 7
1500: NOT
1501: IFFALSE 1567
1503: GO 1505
1505: DISABLE
1506: LD_INT 0
1508: PPUSH
1509: PPUSH
// begin enable ;
1510: ENABLE
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
1511: LD_ADDR_VAR 0 1
1515: PUSH
1516: DOUBLE
1517: LD_INT 1
1519: DEC
1520: ST_TO_ADDR
1521: LD_INT 4
1523: PUSH
1524: LD_INT 5
1526: PUSH
1527: LD_INT 6
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: PUSH
1535: LD_OWVAR 67
1539: ARRAY
1540: PUSH
1541: FOR_TO
1542: IFFALSE 1565
// AddComConstruct ( ruFac , ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ) ;
1544: LD_INT 50
1546: PPUSH
1547: LD_INT 24
1549: PPUSH
1550: LD_INT 3
1552: PPUSH
1553: LD_INT 3
1555: PPUSH
1556: LD_INT 46
1558: PPUSH
1559: CALL_OW 185
1563: GO 1541
1565: POP
1566: POP
// end ;
1567: PPOPN 2
1569: END
// every 0 0$30 trigger ruForces >= [ 4 , 5 , 6 ] [ Difficulty ] do var i , tmp ;
1570: LD_EXP 7
1574: PUSH
1575: LD_INT 4
1577: PUSH
1578: LD_INT 5
1580: PUSH
1581: LD_INT 6
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: PUSH
1589: LD_OWVAR 67
1593: ARRAY
1594: GREATEREQUAL
1595: IFFALSE 1748
1597: GO 1599
1599: DISABLE
1600: LD_INT 0
1602: PPUSH
1603: PPUSH
// begin enable ;
1604: ENABLE
// tmp := ruForces ;
1605: LD_ADDR_VAR 0 2
1609: PUSH
1610: LD_EXP 7
1614: ST_TO_ADDR
// if rand ( 0 , 1 ) then
1615: LD_INT 0
1617: PPUSH
1618: LD_INT 1
1620: PPUSH
1621: CALL_OW 12
1625: IFFALSE 1646
// begin ComEnterUnit ( tmp , ruTeleport ) ;
1627: LD_VAR 0 2
1631: PPUSH
1632: LD_INT 45
1634: PPUSH
1635: CALL_OW 120
// wait ( 0 0$20 ) ;
1639: LD_INT 700
1641: PPUSH
1642: CALL_OW 67
// end ; ruForces := [ ] ;
1646: LD_ADDR_EXP 7
1650: PUSH
1651: EMPTY
1652: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1653: LD_INT 35
1655: PPUSH
1656: CALL_OW 67
// for i in tmp do
1660: LD_ADDR_VAR 0 1
1664: PUSH
1665: LD_VAR 0 2
1669: PUSH
1670: FOR_IN
1671: IFFALSE 1739
// if not IsOk ( i ) then
1673: LD_VAR 0 1
1677: PPUSH
1678: CALL_OW 302
1682: NOT
1683: IFFALSE 1703
// tmp := tmp diff i else
1685: LD_ADDR_VAR 0 2
1689: PUSH
1690: LD_VAR 0 2
1694: PUSH
1695: LD_VAR 0 1
1699: DIFF
1700: ST_TO_ADDR
1701: GO 1737
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
1703: LD_VAR 0 1
1707: PPUSH
1708: LD_INT 81
1710: PUSH
1711: LD_INT 3
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PPUSH
1718: CALL_OW 69
1722: PPUSH
1723: LD_VAR 0 1
1727: PPUSH
1728: CALL_OW 74
1732: PPUSH
1733: CALL_OW 115
1737: GO 1670
1739: POP
1740: POP
// until not tmp ;
1741: LD_VAR 0 2
1745: NOT
1746: IFFALSE 1653
// end ;
1748: PPOPN 2
1750: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 62 , 83 , 8 ] ] ) do
1751: LD_INT 22
1753: PUSH
1754: LD_INT 7
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: LD_INT 92
1763: PUSH
1764: LD_INT 62
1766: PUSH
1767: LD_INT 83
1769: PUSH
1770: LD_INT 8
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: PPUSH
1783: CALL_OW 69
1787: IFFALSE 1807
1789: GO 1791
1791: DISABLE
// ComAgressiveMove ( ruGuard1 , 69 , 100 ) ;
1792: LD_EXP 4
1796: PPUSH
1797: LD_INT 69
1799: PPUSH
1800: LD_INT 100
1802: PPUSH
1803: CALL_OW 114
1807: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 85 , 89 , 8 ] ] ) do
1808: LD_INT 22
1810: PUSH
1811: LD_INT 7
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PUSH
1818: LD_INT 92
1820: PUSH
1821: LD_INT 85
1823: PUSH
1824: LD_INT 89
1826: PUSH
1827: LD_INT 8
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PPUSH
1840: CALL_OW 69
1844: IFFALSE 1864
1846: GO 1848
1848: DISABLE
// ComAgressiveMove ( ruGuard2 , 72 , 88 ) ;
1849: LD_EXP 5
1853: PPUSH
1854: LD_INT 72
1856: PPUSH
1857: LD_INT 88
1859: PPUSH
1860: CALL_OW 114
1864: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 89 , 13 , 8 ] ] ) do
1865: LD_INT 22
1867: PUSH
1868: LD_INT 7
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: LD_INT 92
1877: PUSH
1878: LD_INT 89
1880: PUSH
1881: LD_INT 13
1883: PUSH
1884: LD_INT 8
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PPUSH
1897: CALL_OW 69
1901: IFFALSE 1921
1903: GO 1905
1905: DISABLE
// ComAgressiveMove ( ruGuard3 , 107 , 26 ) ; end_of_file
1906: LD_EXP 6
1910: PPUSH
1911: LD_INT 107
1913: PPUSH
1914: LD_INT 26
1916: PPUSH
1917: CALL_OW 114
1921: END
// every 6 6$00 do var i , un , tmp ;
1922: GO 1924
1924: DISABLE
1925: LD_INT 0
1927: PPUSH
1928: PPUSH
1929: PPUSH
// begin enable ;
1930: ENABLE
// tmp := [ ] ;
1931: LD_ADDR_VAR 0 3
1935: PUSH
1936: EMPTY
1937: ST_TO_ADDR
// for i := 1 to 8 do
1938: LD_ADDR_VAR 0 1
1942: PUSH
1943: DOUBLE
1944: LD_INT 1
1946: DEC
1947: ST_TO_ADDR
1948: LD_INT 8
1950: PUSH
1951: FOR_TO
1952: IFFALSE 2095
// begin uc_side := 1 ;
1954: LD_ADDR_OWVAR 20
1958: PUSH
1959: LD_INT 1
1961: ST_TO_ADDR
// uc_nation := 1 ;
1962: LD_ADDR_OWVAR 21
1966: PUSH
1967: LD_INT 1
1969: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_laser , us_rocket_launcher ] [ i mod 3 + 1 ] , 100 ) ;
1970: LD_INT 5
1972: PPUSH
1973: LD_INT 3
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: LD_INT 6
1981: PUSH
1982: LD_INT 9
1984: PUSH
1985: LD_INT 7
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_VAR 0 1
1997: PUSH
1998: LD_INT 3
2000: MOD
2001: PUSH
2002: LD_INT 1
2004: PLUS
2005: ARRAY
2006: PPUSH
2007: LD_INT 100
2009: PPUSH
2010: CALL 7785 0 5
// un := CreateVehicle ;
2014: LD_ADDR_VAR 0 2
2018: PUSH
2019: CALL_OW 45
2023: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
2024: LD_ADDR_VAR 0 3
2028: PUSH
2029: LD_VAR 0 3
2033: PPUSH
2034: LD_VAR 0 2
2038: PPUSH
2039: CALL 39658 0 2
2043: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_INT 1
2051: PPUSH
2052: CALL_OW 233
// PlaceUnitArea ( un , americanSpawnArea , false ) ;
2056: LD_VAR 0 2
2060: PPUSH
2061: LD_INT 11
2063: PPUSH
2064: LD_INT 0
2066: PPUSH
2067: CALL_OW 49
// ComMoveXY ( un , 16 , 13 ) ;
2071: LD_VAR 0 2
2075: PPUSH
2076: LD_INT 16
2078: PPUSH
2079: LD_INT 13
2081: PPUSH
2082: CALL_OW 111
// wait ( 0 0$1 ) ;
2086: LD_INT 35
2088: PPUSH
2089: CALL_OW 67
// end ;
2093: GO 1951
2095: POP
2096: POP
// repeat wait ( 0 0$1 ) ;
2097: LD_INT 35
2099: PPUSH
2100: CALL_OW 67
// for i in tmp do
2104: LD_ADDR_VAR 0 1
2108: PUSH
2109: LD_VAR 0 3
2113: PUSH
2114: FOR_IN
2115: IFFALSE 2183
// if not IsOk ( i ) then
2117: LD_VAR 0 1
2121: PPUSH
2122: CALL_OW 302
2126: NOT
2127: IFFALSE 2147
// tmp := tmp diff i else
2129: LD_ADDR_VAR 0 3
2133: PUSH
2134: LD_VAR 0 3
2138: PUSH
2139: LD_VAR 0 1
2143: DIFF
2144: ST_TO_ADDR
2145: GO 2181
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
2147: LD_VAR 0 1
2151: PPUSH
2152: LD_INT 81
2154: PUSH
2155: LD_INT 1
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: PPUSH
2162: CALL_OW 69
2166: PPUSH
2167: LD_VAR 0 1
2171: PPUSH
2172: CALL_OW 74
2176: PPUSH
2177: CALL_OW 115
2181: GO 2114
2183: POP
2184: POP
// until not tmp ;
2185: LD_VAR 0 3
2189: NOT
2190: IFFALSE 2097
// end ;
2192: PPOPN 3
2194: END
// every 7 7$00 trigger not HexInfo ( 149 , 106 ) do var un ;
2195: LD_INT 149
2197: PPUSH
2198: LD_INT 106
2200: PPUSH
2201: CALL_OW 428
2205: NOT
2206: IFFALSE 2369
2208: GO 2210
2210: DISABLE
2211: LD_INT 0
2213: PPUSH
// begin enable ;
2214: ENABLE
// uc_side := 1 ;
2215: LD_ADDR_OWVAR 20
2219: PUSH
2220: LD_INT 1
2222: ST_TO_ADDR
// uc_nation := 1 ;
2223: LD_ADDR_OWVAR 21
2227: PUSH
2228: LD_INT 1
2230: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2231: LD_INT 5
2233: PPUSH
2234: LD_INT 3
2236: PPUSH
2237: LD_INT 3
2239: PPUSH
2240: LD_INT 12
2242: PPUSH
2243: LD_INT 100
2245: PPUSH
2246: CALL 7785 0 5
// un := CreateVehicle ;
2250: LD_ADDR_VAR 0 1
2254: PUSH
2255: CALL_OW 45
2259: ST_TO_ADDR
// PlaceUnitXY ( un , 149 , 106 , false ) ;
2260: LD_VAR 0 1
2264: PPUSH
2265: LD_INT 149
2267: PPUSH
2268: LD_INT 106
2270: PPUSH
2271: LD_INT 0
2273: PPUSH
2274: CALL_OW 48
// SetCargo ( un , mat_siberit , 100 ) ;
2278: LD_VAR 0 1
2282: PPUSH
2283: LD_INT 3
2285: PPUSH
2286: LD_INT 100
2288: PPUSH
2289: CALL_OW 290
// ComMoveXY ( un , 105 , 2 ) ;
2293: LD_VAR 0 1
2297: PPUSH
2298: LD_INT 105
2300: PPUSH
2301: LD_INT 2
2303: PPUSH
2304: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2308: LD_INT 35
2310: PPUSH
2311: CALL_OW 67
// if IsDead ( un ) or GetSide ( un ) <> 1 then
2315: LD_VAR 0 1
2319: PPUSH
2320: CALL_OW 301
2324: PUSH
2325: LD_VAR 0 1
2329: PPUSH
2330: CALL_OW 255
2334: PUSH
2335: LD_INT 1
2337: NONEQUAL
2338: OR
2339: IFFALSE 2343
// exit ;
2341: GO 2369
// until IsAt ( un , 105 , 2 ) ;
2343: LD_VAR 0 1
2347: PPUSH
2348: LD_INT 105
2350: PPUSH
2351: LD_INT 2
2353: PPUSH
2354: CALL_OW 307
2358: IFFALSE 2308
// RemoveUnit ( un ) ;
2360: LD_VAR 0 1
2364: PPUSH
2365: CALL_OW 64
// end ; end_of_file
2369: PPOPN 1
2371: END
// export function Action ; begin
2372: LD_INT 0
2374: PPUSH
// CenterNowOnUnits ( allianceHack ) ;
2375: LD_EXP 2
2379: PPUSH
2380: CALL_OW 87
// ChangeMissionObjectives ( WT-Objectives-1 ) ;
2384: LD_STRING WT-Objectives-1
2386: PPUSH
2387: CALL_OW 337
// end ;
2391: LD_VAR 0 1
2395: RET
// every 0 0$2 trigger See ( 7 , allianceMechanic ) do
2396: LD_INT 7
2398: PPUSH
2399: LD_EXP 3
2403: PPUSH
2404: CALL_OW 292
2408: IFFALSE 2425
2410: GO 2412
2412: DISABLE
// SetSide ( allianceMechanic , 7 ) ;
2413: LD_EXP 3
2417: PPUSH
2418: LD_INT 7
2420: PPUSH
2421: CALL_OW 235
2425: END
// every 2 2$00 do
2426: GO 2428
2428: DISABLE
// PrepareReinforcements ( ) ;
2429: CALL 264 0 0
2433: END
// every 0 0$1 trigger not FindArtifact ( 2 ) do
2434: LD_INT 2
2436: PPUSH
2437: CALL_OW 469
2441: NOT
2442: IFFALSE 2457
2444: GO 2446
2446: DISABLE
// SetAreaMapShow ( endMissionArea , 1 ) ;
2447: LD_INT 8
2449: PPUSH
2450: LD_INT 1
2452: PPUSH
2453: CALL_OW 424
2457: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and not FindArtifact ( 2 ) do
2458: LD_INT 8
2460: PPUSH
2461: LD_INT 2
2463: PUSH
2464: LD_INT 34
2466: PUSH
2467: LD_INT 12
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: PUSH
2474: LD_INT 34
2476: PUSH
2477: LD_INT 51
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: LIST
2488: PPUSH
2489: CALL_OW 70
2493: PUSH
2494: LD_INT 2
2496: PPUSH
2497: CALL_OW 469
2501: NOT
2502: AND
2503: IFFALSE 2633
2505: GO 2507
2507: DISABLE
// begin AddMedal ( WT-med-1 , 1 ) ;
2508: LD_STRING WT-med-1
2510: PPUSH
2511: LD_INT 1
2513: PPUSH
2514: CALL_OW 101
// AddMedal ( WT-med-2 , [ - 1 , 1 ] [ ( IsOk ( allianceMechanic ) * ( GetSide ( allianceMechanic ) ) = 7 ) + 1 ] ) ;
2518: LD_STRING WT-med-2
2520: PPUSH
2521: LD_INT 1
2523: NEG
2524: PUSH
2525: LD_INT 1
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: PUSH
2532: LD_EXP 3
2536: PPUSH
2537: CALL_OW 302
2541: PUSH
2542: LD_EXP 3
2546: PPUSH
2547: CALL_OW 255
2551: MUL
2552: PUSH
2553: LD_INT 7
2555: EQUAL
2556: PUSH
2557: LD_INT 1
2559: PLUS
2560: ARRAY
2561: PPUSH
2562: CALL_OW 101
// AddMedal ( WT-med-3 , [ - 1 , 1 ] [ ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , us_double_laser ] ] ) >= 2 ) + 1 ] ) ;
2566: LD_STRING WT-med-3
2568: PPUSH
2569: LD_INT 1
2571: NEG
2572: PUSH
2573: LD_INT 1
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PUSH
2580: LD_INT 22
2582: PUSH
2583: LD_INT 7
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: PUSH
2590: LD_INT 34
2592: PUSH
2593: LD_INT 10
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PPUSH
2604: CALL_OW 69
2608: PUSH
2609: LD_INT 2
2611: GREATEREQUAL
2612: PUSH
2613: LD_INT 1
2615: PLUS
2616: ARRAY
2617: PPUSH
2618: CALL_OW 101
// GiveMedals ( WT-Main ) ;
2622: LD_STRING WT-Main
2624: PPUSH
2625: CALL_OW 102
// YouWin ;
2629: CALL_OW 103
// end ; end_of_file
2633: END
// on UnitGoesToRed ( un ) do begin if un in ruForces then
2634: LD_VAR 0 1
2638: PUSH
2639: LD_EXP 7
2643: IN
2644: IFFALSE 2662
// ruForces := ruForces diff un ;
2646: LD_ADDR_EXP 7
2650: PUSH
2651: LD_EXP 7
2655: PUSH
2656: LD_VAR 0 1
2660: DIFF
2661: ST_TO_ADDR
// end ;
2662: PPOPN 1
2664: END
// on UnitDestroyed ( un ) do begin if un = allianceHack then
2665: LD_VAR 0 1
2669: PUSH
2670: LD_EXP 2
2674: EQUAL
2675: IFFALSE 2684
// YouLost ( WT-HackLost ) ;
2677: LD_STRING WT-HackLost
2679: PPUSH
2680: CALL_OW 104
// if un in ruForces then
2684: LD_VAR 0 1
2688: PUSH
2689: LD_EXP 7
2693: IN
2694: IFFALSE 2712
// ruForces := ruForces diff un ;
2696: LD_ADDR_EXP 7
2700: PUSH
2701: LD_EXP 7
2705: PUSH
2706: LD_VAR 0 1
2710: DIFF
2711: ST_TO_ADDR
// end ;
2712: PPOPN 1
2714: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 3 then
2715: LD_VAR 0 1
2719: PPUSH
2720: CALL_OW 255
2724: PUSH
2725: LD_INT 3
2727: EQUAL
2728: IFFALSE 2750
// ruForces := Join ( ruForces , vehicle ) ;
2730: LD_ADDR_EXP 7
2734: PUSH
2735: LD_EXP 7
2739: PPUSH
2740: LD_VAR 0 1
2744: PPUSH
2745: CALL 39658 0 2
2749: ST_TO_ADDR
// end ; end_of_file
2750: PPOPN 2
2752: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
2753: LD_INT 0
2755: PPUSH
// ar_miner := 81 ;
2756: LD_ADDR_EXP 16
2760: PUSH
2761: LD_INT 81
2763: ST_TO_ADDR
// ar_crane := 88 ;
2764: LD_ADDR_EXP 15
2768: PUSH
2769: LD_INT 88
2771: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
2772: LD_ADDR_EXP 10
2776: PUSH
2777: LD_INT 89
2779: ST_TO_ADDR
// us_hack := 99 ;
2780: LD_ADDR_EXP 11
2784: PUSH
2785: LD_INT 99
2787: ST_TO_ADDR
// us_artillery := 97 ;
2788: LD_ADDR_EXP 12
2792: PUSH
2793: LD_INT 97
2795: ST_TO_ADDR
// ar_bio_bomb := 91 ;
2796: LD_ADDR_EXP 13
2800: PUSH
2801: LD_INT 91
2803: ST_TO_ADDR
// ar_mortar := 92 ;
2804: LD_ADDR_EXP 14
2808: PUSH
2809: LD_INT 92
2811: ST_TO_ADDR
// ru_radar := 98 ;
2812: LD_ADDR_EXP 9
2816: PUSH
2817: LD_INT 98
2819: ST_TO_ADDR
// tech_Artillery := 80 ;
2820: LD_ADDR_EXP 17
2824: PUSH
2825: LD_INT 80
2827: ST_TO_ADDR
// tech_RadMat := 81 ;
2828: LD_ADDR_EXP 18
2832: PUSH
2833: LD_INT 81
2835: ST_TO_ADDR
// tech_BasicTools := 82 ;
2836: LD_ADDR_EXP 19
2840: PUSH
2841: LD_INT 82
2843: ST_TO_ADDR
// tech_Cargo := 83 ;
2844: LD_ADDR_EXP 20
2848: PUSH
2849: LD_INT 83
2851: ST_TO_ADDR
// tech_Track := 84 ;
2852: LD_ADDR_EXP 21
2856: PUSH
2857: LD_INT 84
2859: ST_TO_ADDR
// tech_Crane := 85 ;
2860: LD_ADDR_EXP 22
2864: PUSH
2865: LD_INT 85
2867: ST_TO_ADDR
// tech_Bulldozer := 86 ;
2868: LD_ADDR_EXP 23
2872: PUSH
2873: LD_INT 86
2875: ST_TO_ADDR
// tech_Hovercraft := 87 ;
2876: LD_ADDR_EXP 24
2880: PUSH
2881: LD_INT 87
2883: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
2884: LD_ADDR_EXP 25
2888: PUSH
2889: LD_INT 88
2891: ST_TO_ADDR
// class_mastodont := 31 ;
2892: LD_ADDR_EXP 26
2896: PUSH
2897: LD_INT 31
2899: ST_TO_ADDR
// class_horse := 21 ;
2900: LD_ADDR_EXP 27
2904: PUSH
2905: LD_INT 21
2907: ST_TO_ADDR
// end ;
2908: LD_VAR 0 1
2912: RET
// every 1 do
2913: GO 2915
2915: DISABLE
// InitGlobalVariables ; end_of_file
2916: CALL 2753 0 0
2920: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2921: LD_INT 0
2923: PPUSH
2924: PPUSH
// if exist_mode then
2925: LD_VAR 0 2
2929: IFFALSE 2954
// unit := CreateCharacter ( prefix & ident ) else
2931: LD_ADDR_VAR 0 5
2935: PUSH
2936: LD_VAR 0 3
2940: PUSH
2941: LD_VAR 0 1
2945: STR
2946: PPUSH
2947: CALL_OW 34
2951: ST_TO_ADDR
2952: GO 2969
// unit := NewCharacter ( ident ) ;
2954: LD_ADDR_VAR 0 5
2958: PUSH
2959: LD_VAR 0 1
2963: PPUSH
2964: CALL_OW 25
2968: ST_TO_ADDR
// result := unit ;
2969: LD_ADDR_VAR 0 4
2973: PUSH
2974: LD_VAR 0 5
2978: ST_TO_ADDR
// end ;
2979: LD_VAR 0 4
2983: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2984: LD_INT 0
2986: PPUSH
2987: PPUSH
// if not side or not nation then
2988: LD_VAR 0 1
2992: NOT
2993: PUSH
2994: LD_VAR 0 2
2998: NOT
2999: OR
3000: IFFALSE 3004
// exit ;
3002: GO 3772
// case nation of nation_american :
3004: LD_VAR 0 2
3008: PUSH
3009: LD_INT 1
3011: DOUBLE
3012: EQUAL
3013: IFTRUE 3017
3015: GO 3231
3017: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3018: LD_ADDR_VAR 0 4
3022: PUSH
3023: LD_INT 35
3025: PUSH
3026: LD_INT 45
3028: PUSH
3029: LD_INT 46
3031: PUSH
3032: LD_INT 47
3034: PUSH
3035: LD_INT 82
3037: PUSH
3038: LD_INT 83
3040: PUSH
3041: LD_INT 84
3043: PUSH
3044: LD_INT 85
3046: PUSH
3047: LD_INT 86
3049: PUSH
3050: LD_INT 1
3052: PUSH
3053: LD_INT 2
3055: PUSH
3056: LD_INT 6
3058: PUSH
3059: LD_INT 15
3061: PUSH
3062: LD_INT 16
3064: PUSH
3065: LD_INT 7
3067: PUSH
3068: LD_INT 12
3070: PUSH
3071: LD_INT 13
3073: PUSH
3074: LD_INT 10
3076: PUSH
3077: LD_INT 14
3079: PUSH
3080: LD_INT 20
3082: PUSH
3083: LD_INT 21
3085: PUSH
3086: LD_INT 22
3088: PUSH
3089: LD_INT 25
3091: PUSH
3092: LD_INT 32
3094: PUSH
3095: LD_INT 27
3097: PUSH
3098: LD_INT 36
3100: PUSH
3101: LD_INT 69
3103: PUSH
3104: LD_INT 39
3106: PUSH
3107: LD_INT 34
3109: PUSH
3110: LD_INT 40
3112: PUSH
3113: LD_INT 48
3115: PUSH
3116: LD_INT 49
3118: PUSH
3119: LD_INT 50
3121: PUSH
3122: LD_INT 51
3124: PUSH
3125: LD_INT 52
3127: PUSH
3128: LD_INT 53
3130: PUSH
3131: LD_INT 54
3133: PUSH
3134: LD_INT 55
3136: PUSH
3137: LD_INT 56
3139: PUSH
3140: LD_INT 57
3142: PUSH
3143: LD_INT 58
3145: PUSH
3146: LD_INT 59
3148: PUSH
3149: LD_INT 60
3151: PUSH
3152: LD_INT 61
3154: PUSH
3155: LD_INT 62
3157: PUSH
3158: LD_INT 80
3160: PUSH
3161: LD_INT 82
3163: PUSH
3164: LD_INT 83
3166: PUSH
3167: LD_INT 84
3169: PUSH
3170: LD_INT 85
3172: PUSH
3173: LD_INT 86
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: LIST
3180: LIST
3181: LIST
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: ST_TO_ADDR
3229: GO 3696
3231: LD_INT 2
3233: DOUBLE
3234: EQUAL
3235: IFTRUE 3239
3237: GO 3465
3239: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3240: LD_ADDR_VAR 0 4
3244: PUSH
3245: LD_INT 35
3247: PUSH
3248: LD_INT 45
3250: PUSH
3251: LD_INT 46
3253: PUSH
3254: LD_INT 47
3256: PUSH
3257: LD_INT 82
3259: PUSH
3260: LD_INT 83
3262: PUSH
3263: LD_INT 84
3265: PUSH
3266: LD_INT 85
3268: PUSH
3269: LD_INT 87
3271: PUSH
3272: LD_INT 70
3274: PUSH
3275: LD_INT 1
3277: PUSH
3278: LD_INT 11
3280: PUSH
3281: LD_INT 3
3283: PUSH
3284: LD_INT 4
3286: PUSH
3287: LD_INT 5
3289: PUSH
3290: LD_INT 6
3292: PUSH
3293: LD_INT 15
3295: PUSH
3296: LD_INT 18
3298: PUSH
3299: LD_INT 7
3301: PUSH
3302: LD_INT 17
3304: PUSH
3305: LD_INT 8
3307: PUSH
3308: LD_INT 20
3310: PUSH
3311: LD_INT 21
3313: PUSH
3314: LD_INT 22
3316: PUSH
3317: LD_INT 72
3319: PUSH
3320: LD_INT 26
3322: PUSH
3323: LD_INT 69
3325: PUSH
3326: LD_INT 39
3328: PUSH
3329: LD_INT 40
3331: PUSH
3332: LD_INT 41
3334: PUSH
3335: LD_INT 42
3337: PUSH
3338: LD_INT 43
3340: PUSH
3341: LD_INT 48
3343: PUSH
3344: LD_INT 49
3346: PUSH
3347: LD_INT 50
3349: PUSH
3350: LD_INT 51
3352: PUSH
3353: LD_INT 52
3355: PUSH
3356: LD_INT 53
3358: PUSH
3359: LD_INT 54
3361: PUSH
3362: LD_INT 55
3364: PUSH
3365: LD_INT 56
3367: PUSH
3368: LD_INT 60
3370: PUSH
3371: LD_INT 61
3373: PUSH
3374: LD_INT 62
3376: PUSH
3377: LD_INT 66
3379: PUSH
3380: LD_INT 67
3382: PUSH
3383: LD_INT 68
3385: PUSH
3386: LD_INT 81
3388: PUSH
3389: LD_INT 82
3391: PUSH
3392: LD_INT 83
3394: PUSH
3395: LD_INT 84
3397: PUSH
3398: LD_INT 85
3400: PUSH
3401: LD_INT 87
3403: PUSH
3404: LD_INT 88
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: LIST
3443: LIST
3444: LIST
3445: LIST
3446: LIST
3447: LIST
3448: LIST
3449: LIST
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: ST_TO_ADDR
3463: GO 3696
3465: LD_INT 3
3467: DOUBLE
3468: EQUAL
3469: IFTRUE 3473
3471: GO 3695
3473: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3474: LD_ADDR_VAR 0 4
3478: PUSH
3479: LD_INT 46
3481: PUSH
3482: LD_INT 47
3484: PUSH
3485: LD_INT 1
3487: PUSH
3488: LD_INT 2
3490: PUSH
3491: LD_INT 82
3493: PUSH
3494: LD_INT 83
3496: PUSH
3497: LD_INT 84
3499: PUSH
3500: LD_INT 85
3502: PUSH
3503: LD_INT 86
3505: PUSH
3506: LD_INT 11
3508: PUSH
3509: LD_INT 9
3511: PUSH
3512: LD_INT 20
3514: PUSH
3515: LD_INT 19
3517: PUSH
3518: LD_INT 21
3520: PUSH
3521: LD_INT 24
3523: PUSH
3524: LD_INT 22
3526: PUSH
3527: LD_INT 25
3529: PUSH
3530: LD_INT 28
3532: PUSH
3533: LD_INT 29
3535: PUSH
3536: LD_INT 30
3538: PUSH
3539: LD_INT 31
3541: PUSH
3542: LD_INT 37
3544: PUSH
3545: LD_INT 38
3547: PUSH
3548: LD_INT 32
3550: PUSH
3551: LD_INT 27
3553: PUSH
3554: LD_INT 33
3556: PUSH
3557: LD_INT 69
3559: PUSH
3560: LD_INT 39
3562: PUSH
3563: LD_INT 34
3565: PUSH
3566: LD_INT 40
3568: PUSH
3569: LD_INT 71
3571: PUSH
3572: LD_INT 23
3574: PUSH
3575: LD_INT 44
3577: PUSH
3578: LD_INT 48
3580: PUSH
3581: LD_INT 49
3583: PUSH
3584: LD_INT 50
3586: PUSH
3587: LD_INT 51
3589: PUSH
3590: LD_INT 52
3592: PUSH
3593: LD_INT 53
3595: PUSH
3596: LD_INT 54
3598: PUSH
3599: LD_INT 55
3601: PUSH
3602: LD_INT 56
3604: PUSH
3605: LD_INT 57
3607: PUSH
3608: LD_INT 58
3610: PUSH
3611: LD_INT 59
3613: PUSH
3614: LD_INT 63
3616: PUSH
3617: LD_INT 64
3619: PUSH
3620: LD_INT 65
3622: PUSH
3623: LD_INT 82
3625: PUSH
3626: LD_INT 83
3628: PUSH
3629: LD_INT 84
3631: PUSH
3632: LD_INT 85
3634: PUSH
3635: LD_INT 86
3637: PUSH
3638: EMPTY
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: ST_TO_ADDR
3693: GO 3696
3695: POP
// if state > - 1 and state < 3 then
3696: LD_VAR 0 3
3700: PUSH
3701: LD_INT 1
3703: NEG
3704: GREATER
3705: PUSH
3706: LD_VAR 0 3
3710: PUSH
3711: LD_INT 3
3713: LESS
3714: AND
3715: IFFALSE 3772
// for i in result do
3717: LD_ADDR_VAR 0 5
3721: PUSH
3722: LD_VAR 0 4
3726: PUSH
3727: FOR_IN
3728: IFFALSE 3770
// if GetTech ( i , side ) <> state then
3730: LD_VAR 0 5
3734: PPUSH
3735: LD_VAR 0 1
3739: PPUSH
3740: CALL_OW 321
3744: PUSH
3745: LD_VAR 0 3
3749: NONEQUAL
3750: IFFALSE 3768
// result := result diff i ;
3752: LD_ADDR_VAR 0 4
3756: PUSH
3757: LD_VAR 0 4
3761: PUSH
3762: LD_VAR 0 5
3766: DIFF
3767: ST_TO_ADDR
3768: GO 3727
3770: POP
3771: POP
// end ;
3772: LD_VAR 0 4
3776: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3777: LD_INT 0
3779: PPUSH
3780: PPUSH
3781: PPUSH
// result := true ;
3782: LD_ADDR_VAR 0 3
3786: PUSH
3787: LD_INT 1
3789: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3790: LD_ADDR_VAR 0 5
3794: PUSH
3795: LD_VAR 0 2
3799: PPUSH
3800: CALL_OW 480
3804: ST_TO_ADDR
// if not tmp then
3805: LD_VAR 0 5
3809: NOT
3810: IFFALSE 3814
// exit ;
3812: GO 3863
// for i in tmp do
3814: LD_ADDR_VAR 0 4
3818: PUSH
3819: LD_VAR 0 5
3823: PUSH
3824: FOR_IN
3825: IFFALSE 3861
// if GetTech ( i , side ) <> state_researched then
3827: LD_VAR 0 4
3831: PPUSH
3832: LD_VAR 0 1
3836: PPUSH
3837: CALL_OW 321
3841: PUSH
3842: LD_INT 2
3844: NONEQUAL
3845: IFFALSE 3859
// begin result := false ;
3847: LD_ADDR_VAR 0 3
3851: PUSH
3852: LD_INT 0
3854: ST_TO_ADDR
// exit ;
3855: POP
3856: POP
3857: GO 3863
// end ;
3859: GO 3824
3861: POP
3862: POP
// end ;
3863: LD_VAR 0 3
3867: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3868: LD_INT 0
3870: PPUSH
3871: PPUSH
3872: PPUSH
3873: PPUSH
3874: PPUSH
3875: PPUSH
3876: PPUSH
3877: PPUSH
3878: PPUSH
3879: PPUSH
3880: PPUSH
3881: PPUSH
3882: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3883: LD_VAR 0 1
3887: NOT
3888: PUSH
3889: LD_VAR 0 1
3893: PPUSH
3894: CALL_OW 257
3898: PUSH
3899: LD_INT 9
3901: NONEQUAL
3902: OR
3903: IFFALSE 3907
// exit ;
3905: GO 4480
// side := GetSide ( unit ) ;
3907: LD_ADDR_VAR 0 9
3911: PUSH
3912: LD_VAR 0 1
3916: PPUSH
3917: CALL_OW 255
3921: ST_TO_ADDR
// tech_space := tech_spacanom ;
3922: LD_ADDR_VAR 0 12
3926: PUSH
3927: LD_INT 29
3929: ST_TO_ADDR
// tech_time := tech_taurad ;
3930: LD_ADDR_VAR 0 13
3934: PUSH
3935: LD_INT 28
3937: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3938: LD_ADDR_VAR 0 11
3942: PUSH
3943: LD_VAR 0 1
3947: PPUSH
3948: CALL_OW 310
3952: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3953: LD_VAR 0 11
3957: PPUSH
3958: CALL_OW 247
3962: PUSH
3963: LD_INT 2
3965: EQUAL
3966: IFFALSE 3970
// exit ;
3968: GO 4480
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3970: LD_ADDR_VAR 0 8
3974: PUSH
3975: LD_INT 81
3977: PUSH
3978: LD_VAR 0 9
3982: PUSH
3983: EMPTY
3984: LIST
3985: LIST
3986: PUSH
3987: LD_INT 3
3989: PUSH
3990: LD_INT 21
3992: PUSH
3993: LD_INT 3
3995: PUSH
3996: EMPTY
3997: LIST
3998: LIST
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: PPUSH
4008: CALL_OW 69
4012: ST_TO_ADDR
// if not tmp then
4013: LD_VAR 0 8
4017: NOT
4018: IFFALSE 4022
// exit ;
4020: GO 4480
// if in_unit then
4022: LD_VAR 0 11
4026: IFFALSE 4050
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4028: LD_ADDR_VAR 0 10
4032: PUSH
4033: LD_VAR 0 8
4037: PPUSH
4038: LD_VAR 0 11
4042: PPUSH
4043: CALL_OW 74
4047: ST_TO_ADDR
4048: GO 4070
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4050: LD_ADDR_VAR 0 10
4054: PUSH
4055: LD_VAR 0 8
4059: PPUSH
4060: LD_VAR 0 1
4064: PPUSH
4065: CALL_OW 74
4069: ST_TO_ADDR
// if not enemy then
4070: LD_VAR 0 10
4074: NOT
4075: IFFALSE 4079
// exit ;
4077: GO 4480
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4079: LD_VAR 0 11
4083: PUSH
4084: LD_VAR 0 11
4088: PPUSH
4089: LD_VAR 0 10
4093: PPUSH
4094: CALL_OW 296
4098: PUSH
4099: LD_INT 13
4101: GREATER
4102: AND
4103: PUSH
4104: LD_VAR 0 1
4108: PPUSH
4109: LD_VAR 0 10
4113: PPUSH
4114: CALL_OW 296
4118: PUSH
4119: LD_INT 12
4121: GREATER
4122: OR
4123: IFFALSE 4127
// exit ;
4125: GO 4480
// missile := [ 1 ] ;
4127: LD_ADDR_VAR 0 14
4131: PUSH
4132: LD_INT 1
4134: PUSH
4135: EMPTY
4136: LIST
4137: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4138: LD_VAR 0 9
4142: PPUSH
4143: LD_VAR 0 12
4147: PPUSH
4148: CALL_OW 325
4152: IFFALSE 4181
// missile := Insert ( missile , missile + 1 , 2 ) ;
4154: LD_ADDR_VAR 0 14
4158: PUSH
4159: LD_VAR 0 14
4163: PPUSH
4164: LD_VAR 0 14
4168: PUSH
4169: LD_INT 1
4171: PLUS
4172: PPUSH
4173: LD_INT 2
4175: PPUSH
4176: CALL_OW 2
4180: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4181: LD_VAR 0 9
4185: PPUSH
4186: LD_VAR 0 13
4190: PPUSH
4191: CALL_OW 325
4195: PUSH
4196: LD_VAR 0 10
4200: PPUSH
4201: CALL_OW 255
4205: PPUSH
4206: LD_VAR 0 13
4210: PPUSH
4211: CALL_OW 325
4215: NOT
4216: AND
4217: IFFALSE 4246
// missile := Insert ( missile , missile + 1 , 3 ) ;
4219: LD_ADDR_VAR 0 14
4223: PUSH
4224: LD_VAR 0 14
4228: PPUSH
4229: LD_VAR 0 14
4233: PUSH
4234: LD_INT 1
4236: PLUS
4237: PPUSH
4238: LD_INT 3
4240: PPUSH
4241: CALL_OW 2
4245: ST_TO_ADDR
// if missile < 2 then
4246: LD_VAR 0 14
4250: PUSH
4251: LD_INT 2
4253: LESS
4254: IFFALSE 4258
// exit ;
4256: GO 4480
// x := GetX ( enemy ) ;
4258: LD_ADDR_VAR 0 4
4262: PUSH
4263: LD_VAR 0 10
4267: PPUSH
4268: CALL_OW 250
4272: ST_TO_ADDR
// y := GetY ( enemy ) ;
4273: LD_ADDR_VAR 0 5
4277: PUSH
4278: LD_VAR 0 10
4282: PPUSH
4283: CALL_OW 251
4287: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4288: LD_ADDR_VAR 0 6
4292: PUSH
4293: LD_VAR 0 4
4297: PUSH
4298: LD_INT 1
4300: NEG
4301: PPUSH
4302: LD_INT 1
4304: PPUSH
4305: CALL_OW 12
4309: PLUS
4310: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4311: LD_ADDR_VAR 0 7
4315: PUSH
4316: LD_VAR 0 5
4320: PUSH
4321: LD_INT 1
4323: NEG
4324: PPUSH
4325: LD_INT 1
4327: PPUSH
4328: CALL_OW 12
4332: PLUS
4333: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4334: LD_VAR 0 6
4338: PPUSH
4339: LD_VAR 0 7
4343: PPUSH
4344: CALL_OW 488
4348: NOT
4349: IFFALSE 4371
// begin _x := x ;
4351: LD_ADDR_VAR 0 6
4355: PUSH
4356: LD_VAR 0 4
4360: ST_TO_ADDR
// _y := y ;
4361: LD_ADDR_VAR 0 7
4365: PUSH
4366: LD_VAR 0 5
4370: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4371: LD_ADDR_VAR 0 3
4375: PUSH
4376: LD_INT 1
4378: PPUSH
4379: LD_VAR 0 14
4383: PPUSH
4384: CALL_OW 12
4388: ST_TO_ADDR
// case i of 1 :
4389: LD_VAR 0 3
4393: PUSH
4394: LD_INT 1
4396: DOUBLE
4397: EQUAL
4398: IFTRUE 4402
4400: GO 4419
4402: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4403: LD_VAR 0 1
4407: PPUSH
4408: LD_VAR 0 10
4412: PPUSH
4413: CALL_OW 115
4417: GO 4480
4419: LD_INT 2
4421: DOUBLE
4422: EQUAL
4423: IFTRUE 4427
4425: GO 4449
4427: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4428: LD_VAR 0 1
4432: PPUSH
4433: LD_VAR 0 6
4437: PPUSH
4438: LD_VAR 0 7
4442: PPUSH
4443: CALL_OW 153
4447: GO 4480
4449: LD_INT 3
4451: DOUBLE
4452: EQUAL
4453: IFTRUE 4457
4455: GO 4479
4457: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4458: LD_VAR 0 1
4462: PPUSH
4463: LD_VAR 0 6
4467: PPUSH
4468: LD_VAR 0 7
4472: PPUSH
4473: CALL_OW 154
4477: GO 4480
4479: POP
// end ;
4480: LD_VAR 0 2
4484: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4485: LD_INT 0
4487: PPUSH
4488: PPUSH
4489: PPUSH
4490: PPUSH
4491: PPUSH
4492: PPUSH
// if not unit or not building then
4493: LD_VAR 0 1
4497: NOT
4498: PUSH
4499: LD_VAR 0 2
4503: NOT
4504: OR
4505: IFFALSE 4509
// exit ;
4507: GO 4667
// x := GetX ( building ) ;
4509: LD_ADDR_VAR 0 5
4513: PUSH
4514: LD_VAR 0 2
4518: PPUSH
4519: CALL_OW 250
4523: ST_TO_ADDR
// y := GetY ( building ) ;
4524: LD_ADDR_VAR 0 6
4528: PUSH
4529: LD_VAR 0 2
4533: PPUSH
4534: CALL_OW 251
4538: ST_TO_ADDR
// for i = 0 to 5 do
4539: LD_ADDR_VAR 0 4
4543: PUSH
4544: DOUBLE
4545: LD_INT 0
4547: DEC
4548: ST_TO_ADDR
4549: LD_INT 5
4551: PUSH
4552: FOR_TO
4553: IFFALSE 4665
// begin _x := ShiftX ( x , i , 3 ) ;
4555: LD_ADDR_VAR 0 7
4559: PUSH
4560: LD_VAR 0 5
4564: PPUSH
4565: LD_VAR 0 4
4569: PPUSH
4570: LD_INT 3
4572: PPUSH
4573: CALL_OW 272
4577: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4578: LD_ADDR_VAR 0 8
4582: PUSH
4583: LD_VAR 0 6
4587: PPUSH
4588: LD_VAR 0 4
4592: PPUSH
4593: LD_INT 3
4595: PPUSH
4596: CALL_OW 273
4600: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4601: LD_VAR 0 7
4605: PPUSH
4606: LD_VAR 0 8
4610: PPUSH
4611: CALL_OW 488
4615: NOT
4616: IFFALSE 4620
// continue ;
4618: GO 4552
// if HexInfo ( _x , _y ) = 0 then
4620: LD_VAR 0 7
4624: PPUSH
4625: LD_VAR 0 8
4629: PPUSH
4630: CALL_OW 428
4634: PUSH
4635: LD_INT 0
4637: EQUAL
4638: IFFALSE 4663
// begin ComMoveXY ( unit , _x , _y ) ;
4640: LD_VAR 0 1
4644: PPUSH
4645: LD_VAR 0 7
4649: PPUSH
4650: LD_VAR 0 8
4654: PPUSH
4655: CALL_OW 111
// exit ;
4659: POP
4660: POP
4661: GO 4667
// end ; end ;
4663: GO 4552
4665: POP
4666: POP
// end ;
4667: LD_VAR 0 3
4671: RET
// export function ScanBase ( side , base_area ) ; begin
4672: LD_INT 0
4674: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4675: LD_ADDR_VAR 0 3
4679: PUSH
4680: LD_VAR 0 2
4684: PPUSH
4685: LD_INT 81
4687: PUSH
4688: LD_VAR 0 1
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: PPUSH
4697: CALL_OW 70
4701: ST_TO_ADDR
// end ;
4702: LD_VAR 0 3
4706: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4707: LD_INT 0
4709: PPUSH
4710: PPUSH
4711: PPUSH
4712: PPUSH
// result := false ;
4713: LD_ADDR_VAR 0 2
4717: PUSH
4718: LD_INT 0
4720: ST_TO_ADDR
// side := GetSide ( unit ) ;
4721: LD_ADDR_VAR 0 3
4725: PUSH
4726: LD_VAR 0 1
4730: PPUSH
4731: CALL_OW 255
4735: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4736: LD_ADDR_VAR 0 4
4740: PUSH
4741: LD_VAR 0 1
4745: PPUSH
4746: CALL_OW 248
4750: ST_TO_ADDR
// case nat of 1 :
4751: LD_VAR 0 4
4755: PUSH
4756: LD_INT 1
4758: DOUBLE
4759: EQUAL
4760: IFTRUE 4764
4762: GO 4775
4764: POP
// tech := tech_lassight ; 2 :
4765: LD_ADDR_VAR 0 5
4769: PUSH
4770: LD_INT 12
4772: ST_TO_ADDR
4773: GO 4814
4775: LD_INT 2
4777: DOUBLE
4778: EQUAL
4779: IFTRUE 4783
4781: GO 4794
4783: POP
// tech := tech_mortar ; 3 :
4784: LD_ADDR_VAR 0 5
4788: PUSH
4789: LD_INT 41
4791: ST_TO_ADDR
4792: GO 4814
4794: LD_INT 3
4796: DOUBLE
4797: EQUAL
4798: IFTRUE 4802
4800: GO 4813
4802: POP
// tech := tech_bazooka ; end ;
4803: LD_ADDR_VAR 0 5
4807: PUSH
4808: LD_INT 44
4810: ST_TO_ADDR
4811: GO 4814
4813: POP
// if Researched ( side , tech ) then
4814: LD_VAR 0 3
4818: PPUSH
4819: LD_VAR 0 5
4823: PPUSH
4824: CALL_OW 325
4828: IFFALSE 4855
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4830: LD_ADDR_VAR 0 2
4834: PUSH
4835: LD_INT 5
4837: PUSH
4838: LD_INT 8
4840: PUSH
4841: LD_INT 9
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: LIST
4848: PUSH
4849: LD_VAR 0 4
4853: ARRAY
4854: ST_TO_ADDR
// end ;
4855: LD_VAR 0 2
4859: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4860: LD_INT 0
4862: PPUSH
4863: PPUSH
4864: PPUSH
// if not mines then
4865: LD_VAR 0 2
4869: NOT
4870: IFFALSE 4874
// exit ;
4872: GO 5018
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4874: LD_ADDR_VAR 0 5
4878: PUSH
4879: LD_INT 81
4881: PUSH
4882: LD_VAR 0 1
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: LD_INT 3
4893: PUSH
4894: LD_INT 21
4896: PUSH
4897: LD_INT 3
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: PPUSH
4912: CALL_OW 69
4916: ST_TO_ADDR
// for i in mines do
4917: LD_ADDR_VAR 0 4
4921: PUSH
4922: LD_VAR 0 2
4926: PUSH
4927: FOR_IN
4928: IFFALSE 5016
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4930: LD_VAR 0 4
4934: PUSH
4935: LD_INT 1
4937: ARRAY
4938: PPUSH
4939: LD_VAR 0 4
4943: PUSH
4944: LD_INT 2
4946: ARRAY
4947: PPUSH
4948: CALL_OW 458
4952: NOT
4953: IFFALSE 4957
// continue ;
4955: GO 4927
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4957: LD_VAR 0 4
4961: PUSH
4962: LD_INT 1
4964: ARRAY
4965: PPUSH
4966: LD_VAR 0 4
4970: PUSH
4971: LD_INT 2
4973: ARRAY
4974: PPUSH
4975: CALL_OW 428
4979: PUSH
4980: LD_VAR 0 5
4984: IN
4985: IFFALSE 5014
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4987: LD_VAR 0 4
4991: PUSH
4992: LD_INT 1
4994: ARRAY
4995: PPUSH
4996: LD_VAR 0 4
5000: PUSH
5001: LD_INT 2
5003: ARRAY
5004: PPUSH
5005: LD_VAR 0 1
5009: PPUSH
5010: CALL_OW 456
// end ;
5014: GO 4927
5016: POP
5017: POP
// end ;
5018: LD_VAR 0 3
5022: RET
// export function Count ( array ) ; var i ; begin
5023: LD_INT 0
5025: PPUSH
5026: PPUSH
// result := 0 ;
5027: LD_ADDR_VAR 0 2
5031: PUSH
5032: LD_INT 0
5034: ST_TO_ADDR
// for i in array do
5035: LD_ADDR_VAR 0 3
5039: PUSH
5040: LD_VAR 0 1
5044: PUSH
5045: FOR_IN
5046: IFFALSE 5070
// if i then
5048: LD_VAR 0 3
5052: IFFALSE 5068
// result := result + 1 ;
5054: LD_ADDR_VAR 0 2
5058: PUSH
5059: LD_VAR 0 2
5063: PUSH
5064: LD_INT 1
5066: PLUS
5067: ST_TO_ADDR
5068: GO 5045
5070: POP
5071: POP
// end ;
5072: LD_VAR 0 2
5076: RET
// export function IsEmpty ( building ) ; begin
5077: LD_INT 0
5079: PPUSH
// if not building then
5080: LD_VAR 0 1
5084: NOT
5085: IFFALSE 5089
// exit ;
5087: GO 5132
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5089: LD_ADDR_VAR 0 2
5093: PUSH
5094: LD_VAR 0 1
5098: PUSH
5099: LD_INT 22
5101: PUSH
5102: LD_VAR 0 1
5106: PPUSH
5107: CALL_OW 255
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: PUSH
5116: LD_INT 58
5118: PUSH
5119: EMPTY
5120: LIST
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: PPUSH
5126: CALL_OW 69
5130: IN
5131: ST_TO_ADDR
// end ;
5132: LD_VAR 0 2
5136: RET
// export function IsNotFull ( building ) ; begin
5137: LD_INT 0
5139: PPUSH
// if not building then
5140: LD_VAR 0 1
5144: NOT
5145: IFFALSE 5149
// exit ;
5147: GO 5168
// result := UnitsInside ( building ) < 6 ;
5149: LD_ADDR_VAR 0 2
5153: PUSH
5154: LD_VAR 0 1
5158: PPUSH
5159: CALL_OW 313
5163: PUSH
5164: LD_INT 6
5166: LESS
5167: ST_TO_ADDR
// end ;
5168: LD_VAR 0 2
5172: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5173: LD_INT 0
5175: PPUSH
5176: PPUSH
5177: PPUSH
5178: PPUSH
// tmp := [ ] ;
5179: LD_ADDR_VAR 0 3
5183: PUSH
5184: EMPTY
5185: ST_TO_ADDR
// list := [ ] ;
5186: LD_ADDR_VAR 0 5
5190: PUSH
5191: EMPTY
5192: ST_TO_ADDR
// for i = 16 to 25 do
5193: LD_ADDR_VAR 0 4
5197: PUSH
5198: DOUBLE
5199: LD_INT 16
5201: DEC
5202: ST_TO_ADDR
5203: LD_INT 25
5205: PUSH
5206: FOR_TO
5207: IFFALSE 5280
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5209: LD_ADDR_VAR 0 3
5213: PUSH
5214: LD_VAR 0 3
5218: PUSH
5219: LD_INT 22
5221: PUSH
5222: LD_VAR 0 1
5226: PPUSH
5227: CALL_OW 255
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PUSH
5236: LD_INT 91
5238: PUSH
5239: LD_VAR 0 1
5243: PUSH
5244: LD_INT 6
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: LIST
5251: PUSH
5252: LD_INT 30
5254: PUSH
5255: LD_VAR 0 4
5259: PUSH
5260: EMPTY
5261: LIST
5262: LIST
5263: PUSH
5264: EMPTY
5265: LIST
5266: LIST
5267: LIST
5268: PUSH
5269: EMPTY
5270: LIST
5271: PPUSH
5272: CALL_OW 69
5276: ADD
5277: ST_TO_ADDR
5278: GO 5206
5280: POP
5281: POP
// for i = 1 to tmp do
5282: LD_ADDR_VAR 0 4
5286: PUSH
5287: DOUBLE
5288: LD_INT 1
5290: DEC
5291: ST_TO_ADDR
5292: LD_VAR 0 3
5296: PUSH
5297: FOR_TO
5298: IFFALSE 5386
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5300: LD_ADDR_VAR 0 5
5304: PUSH
5305: LD_VAR 0 5
5309: PUSH
5310: LD_VAR 0 3
5314: PUSH
5315: LD_VAR 0 4
5319: ARRAY
5320: PPUSH
5321: CALL_OW 266
5325: PUSH
5326: LD_VAR 0 3
5330: PUSH
5331: LD_VAR 0 4
5335: ARRAY
5336: PPUSH
5337: CALL_OW 250
5341: PUSH
5342: LD_VAR 0 3
5346: PUSH
5347: LD_VAR 0 4
5351: ARRAY
5352: PPUSH
5353: CALL_OW 251
5357: PUSH
5358: LD_VAR 0 3
5362: PUSH
5363: LD_VAR 0 4
5367: ARRAY
5368: PPUSH
5369: CALL_OW 254
5373: PUSH
5374: EMPTY
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: PUSH
5380: EMPTY
5381: LIST
5382: ADD
5383: ST_TO_ADDR
5384: GO 5297
5386: POP
5387: POP
// result := list ;
5388: LD_ADDR_VAR 0 2
5392: PUSH
5393: LD_VAR 0 5
5397: ST_TO_ADDR
// end ;
5398: LD_VAR 0 2
5402: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5403: LD_INT 0
5405: PPUSH
5406: PPUSH
5407: PPUSH
5408: PPUSH
5409: PPUSH
5410: PPUSH
5411: PPUSH
// if not factory then
5412: LD_VAR 0 1
5416: NOT
5417: IFFALSE 5421
// exit ;
5419: GO 6014
// if control = control_apeman then
5421: LD_VAR 0 4
5425: PUSH
5426: LD_INT 5
5428: EQUAL
5429: IFFALSE 5538
// begin tmp := UnitsInside ( factory ) ;
5431: LD_ADDR_VAR 0 8
5435: PUSH
5436: LD_VAR 0 1
5440: PPUSH
5441: CALL_OW 313
5445: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5446: LD_VAR 0 8
5450: PPUSH
5451: LD_INT 25
5453: PUSH
5454: LD_INT 12
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PPUSH
5461: CALL_OW 72
5465: NOT
5466: IFFALSE 5476
// control := control_manual ;
5468: LD_ADDR_VAR 0 4
5472: PUSH
5473: LD_INT 1
5475: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5476: LD_ADDR_VAR 0 8
5480: PUSH
5481: LD_VAR 0 1
5485: PPUSH
5486: CALL 5173 0 1
5490: ST_TO_ADDR
// if tmp then
5491: LD_VAR 0 8
5495: IFFALSE 5538
// begin for i in tmp do
5497: LD_ADDR_VAR 0 7
5501: PUSH
5502: LD_VAR 0 8
5506: PUSH
5507: FOR_IN
5508: IFFALSE 5536
// if i [ 1 ] = b_ext_radio then
5510: LD_VAR 0 7
5514: PUSH
5515: LD_INT 1
5517: ARRAY
5518: PUSH
5519: LD_INT 22
5521: EQUAL
5522: IFFALSE 5534
// begin control := control_remote ;
5524: LD_ADDR_VAR 0 4
5528: PUSH
5529: LD_INT 2
5531: ST_TO_ADDR
// break ;
5532: GO 5536
// end ;
5534: GO 5507
5536: POP
5537: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5538: LD_VAR 0 1
5542: PPUSH
5543: LD_VAR 0 2
5547: PPUSH
5548: LD_VAR 0 3
5552: PPUSH
5553: LD_VAR 0 4
5557: PPUSH
5558: LD_VAR 0 5
5562: PPUSH
5563: CALL_OW 448
5567: IFFALSE 5602
// begin result := [ chassis , engine , control , weapon ] ;
5569: LD_ADDR_VAR 0 6
5573: PUSH
5574: LD_VAR 0 2
5578: PUSH
5579: LD_VAR 0 3
5583: PUSH
5584: LD_VAR 0 4
5588: PUSH
5589: LD_VAR 0 5
5593: PUSH
5594: EMPTY
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: ST_TO_ADDR
// exit ;
5600: GO 6014
// end ; _chassis := AvailableChassisList ( factory ) ;
5602: LD_ADDR_VAR 0 9
5606: PUSH
5607: LD_VAR 0 1
5611: PPUSH
5612: CALL_OW 475
5616: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5617: LD_ADDR_VAR 0 11
5621: PUSH
5622: LD_VAR 0 1
5626: PPUSH
5627: CALL_OW 476
5631: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5632: LD_ADDR_VAR 0 12
5636: PUSH
5637: LD_VAR 0 1
5641: PPUSH
5642: CALL_OW 477
5646: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5647: LD_ADDR_VAR 0 10
5651: PUSH
5652: LD_VAR 0 1
5656: PPUSH
5657: CALL_OW 478
5661: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5662: LD_VAR 0 9
5666: NOT
5667: PUSH
5668: LD_VAR 0 11
5672: NOT
5673: OR
5674: PUSH
5675: LD_VAR 0 12
5679: NOT
5680: OR
5681: PUSH
5682: LD_VAR 0 10
5686: NOT
5687: OR
5688: IFFALSE 5723
// begin result := [ chassis , engine , control , weapon ] ;
5690: LD_ADDR_VAR 0 6
5694: PUSH
5695: LD_VAR 0 2
5699: PUSH
5700: LD_VAR 0 3
5704: PUSH
5705: LD_VAR 0 4
5709: PUSH
5710: LD_VAR 0 5
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: ST_TO_ADDR
// exit ;
5721: GO 6014
// end ; if not chassis in _chassis then
5723: LD_VAR 0 2
5727: PUSH
5728: LD_VAR 0 9
5732: IN
5733: NOT
5734: IFFALSE 5760
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5736: LD_ADDR_VAR 0 2
5740: PUSH
5741: LD_VAR 0 9
5745: PUSH
5746: LD_INT 1
5748: PPUSH
5749: LD_VAR 0 9
5753: PPUSH
5754: CALL_OW 12
5758: ARRAY
5759: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5760: LD_VAR 0 2
5764: PPUSH
5765: LD_VAR 0 3
5769: PPUSH
5770: CALL 6019 0 2
5774: NOT
5775: IFFALSE 5834
// repeat engine := _engine [ 1 ] ;
5777: LD_ADDR_VAR 0 3
5781: PUSH
5782: LD_VAR 0 11
5786: PUSH
5787: LD_INT 1
5789: ARRAY
5790: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5791: LD_ADDR_VAR 0 11
5795: PUSH
5796: LD_VAR 0 11
5800: PPUSH
5801: LD_INT 1
5803: PPUSH
5804: CALL_OW 3
5808: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5809: LD_VAR 0 2
5813: PPUSH
5814: LD_VAR 0 3
5818: PPUSH
5819: CALL 6019 0 2
5823: PUSH
5824: LD_VAR 0 11
5828: PUSH
5829: EMPTY
5830: EQUAL
5831: OR
5832: IFFALSE 5777
// if not control in _control then
5834: LD_VAR 0 4
5838: PUSH
5839: LD_VAR 0 12
5843: IN
5844: NOT
5845: IFFALSE 5871
// control := _control [ rand ( 1 , _control ) ] ;
5847: LD_ADDR_VAR 0 4
5851: PUSH
5852: LD_VAR 0 12
5856: PUSH
5857: LD_INT 1
5859: PPUSH
5860: LD_VAR 0 12
5864: PPUSH
5865: CALL_OW 12
5869: ARRAY
5870: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5871: LD_VAR 0 2
5875: PPUSH
5876: LD_VAR 0 5
5880: PPUSH
5881: CALL 6239 0 2
5885: NOT
5886: IFFALSE 5945
// repeat weapon := _weapon [ 1 ] ;
5888: LD_ADDR_VAR 0 5
5892: PUSH
5893: LD_VAR 0 10
5897: PUSH
5898: LD_INT 1
5900: ARRAY
5901: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5902: LD_ADDR_VAR 0 10
5906: PUSH
5907: LD_VAR 0 10
5911: PPUSH
5912: LD_INT 1
5914: PPUSH
5915: CALL_OW 3
5919: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5920: LD_VAR 0 2
5924: PPUSH
5925: LD_VAR 0 5
5929: PPUSH
5930: CALL 6239 0 2
5934: PUSH
5935: LD_VAR 0 10
5939: PUSH
5940: EMPTY
5941: EQUAL
5942: OR
5943: IFFALSE 5888
// result := [ ] ;
5945: LD_ADDR_VAR 0 6
5949: PUSH
5950: EMPTY
5951: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5952: LD_VAR 0 1
5956: PPUSH
5957: LD_VAR 0 2
5961: PPUSH
5962: LD_VAR 0 3
5966: PPUSH
5967: LD_VAR 0 4
5971: PPUSH
5972: LD_VAR 0 5
5976: PPUSH
5977: CALL_OW 448
5981: IFFALSE 6014
// result := [ chassis , engine , control , weapon ] ;
5983: LD_ADDR_VAR 0 6
5987: PUSH
5988: LD_VAR 0 2
5992: PUSH
5993: LD_VAR 0 3
5997: PUSH
5998: LD_VAR 0 4
6002: PUSH
6003: LD_VAR 0 5
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: ST_TO_ADDR
// end ;
6014: LD_VAR 0 6
6018: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6019: LD_INT 0
6021: PPUSH
// if not chassis or not engine then
6022: LD_VAR 0 1
6026: NOT
6027: PUSH
6028: LD_VAR 0 2
6032: NOT
6033: OR
6034: IFFALSE 6038
// exit ;
6036: GO 6234
// case engine of engine_solar :
6038: LD_VAR 0 2
6042: PUSH
6043: LD_INT 2
6045: DOUBLE
6046: EQUAL
6047: IFTRUE 6051
6049: GO 6089
6051: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6052: LD_ADDR_VAR 0 3
6056: PUSH
6057: LD_INT 11
6059: PUSH
6060: LD_INT 12
6062: PUSH
6063: LD_INT 13
6065: PUSH
6066: LD_INT 14
6068: PUSH
6069: LD_INT 1
6071: PUSH
6072: LD_INT 2
6074: PUSH
6075: LD_INT 3
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: ST_TO_ADDR
6087: GO 6218
6089: LD_INT 1
6091: DOUBLE
6092: EQUAL
6093: IFTRUE 6097
6095: GO 6159
6097: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6098: LD_ADDR_VAR 0 3
6102: PUSH
6103: LD_INT 11
6105: PUSH
6106: LD_INT 12
6108: PUSH
6109: LD_INT 13
6111: PUSH
6112: LD_INT 14
6114: PUSH
6115: LD_INT 1
6117: PUSH
6118: LD_INT 2
6120: PUSH
6121: LD_INT 3
6123: PUSH
6124: LD_INT 4
6126: PUSH
6127: LD_INT 5
6129: PUSH
6130: LD_INT 21
6132: PUSH
6133: LD_INT 23
6135: PUSH
6136: LD_INT 22
6138: PUSH
6139: LD_INT 24
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: ST_TO_ADDR
6157: GO 6218
6159: LD_INT 3
6161: DOUBLE
6162: EQUAL
6163: IFTRUE 6167
6165: GO 6217
6167: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6168: LD_ADDR_VAR 0 3
6172: PUSH
6173: LD_INT 13
6175: PUSH
6176: LD_INT 14
6178: PUSH
6179: LD_INT 2
6181: PUSH
6182: LD_INT 3
6184: PUSH
6185: LD_INT 4
6187: PUSH
6188: LD_INT 5
6190: PUSH
6191: LD_INT 21
6193: PUSH
6194: LD_INT 22
6196: PUSH
6197: LD_INT 23
6199: PUSH
6200: LD_INT 24
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: ST_TO_ADDR
6215: GO 6218
6217: POP
// result := ( chassis in result ) ;
6218: LD_ADDR_VAR 0 3
6222: PUSH
6223: LD_VAR 0 1
6227: PUSH
6228: LD_VAR 0 3
6232: IN
6233: ST_TO_ADDR
// end ;
6234: LD_VAR 0 3
6238: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6239: LD_INT 0
6241: PPUSH
// if not chassis or not weapon then
6242: LD_VAR 0 1
6246: NOT
6247: PUSH
6248: LD_VAR 0 2
6252: NOT
6253: OR
6254: IFFALSE 6258
// exit ;
6256: GO 7320
// case weapon of us_machine_gun :
6258: LD_VAR 0 2
6262: PUSH
6263: LD_INT 2
6265: DOUBLE
6266: EQUAL
6267: IFTRUE 6271
6269: GO 6301
6271: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6272: LD_ADDR_VAR 0 3
6276: PUSH
6277: LD_INT 1
6279: PUSH
6280: LD_INT 2
6282: PUSH
6283: LD_INT 3
6285: PUSH
6286: LD_INT 4
6288: PUSH
6289: LD_INT 5
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: ST_TO_ADDR
6299: GO 7304
6301: LD_INT 3
6303: DOUBLE
6304: EQUAL
6305: IFTRUE 6309
6307: GO 6339
6309: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6310: LD_ADDR_VAR 0 3
6314: PUSH
6315: LD_INT 1
6317: PUSH
6318: LD_INT 2
6320: PUSH
6321: LD_INT 3
6323: PUSH
6324: LD_INT 4
6326: PUSH
6327: LD_INT 5
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: ST_TO_ADDR
6337: GO 7304
6339: LD_INT 11
6341: DOUBLE
6342: EQUAL
6343: IFTRUE 6347
6345: GO 6377
6347: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6348: LD_ADDR_VAR 0 3
6352: PUSH
6353: LD_INT 1
6355: PUSH
6356: LD_INT 2
6358: PUSH
6359: LD_INT 3
6361: PUSH
6362: LD_INT 4
6364: PUSH
6365: LD_INT 5
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: ST_TO_ADDR
6375: GO 7304
6377: LD_INT 4
6379: DOUBLE
6380: EQUAL
6381: IFTRUE 6385
6383: GO 6411
6385: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6386: LD_ADDR_VAR 0 3
6390: PUSH
6391: LD_INT 2
6393: PUSH
6394: LD_INT 3
6396: PUSH
6397: LD_INT 4
6399: PUSH
6400: LD_INT 5
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: ST_TO_ADDR
6409: GO 7304
6411: LD_INT 5
6413: DOUBLE
6414: EQUAL
6415: IFTRUE 6419
6417: GO 6445
6419: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6420: LD_ADDR_VAR 0 3
6424: PUSH
6425: LD_INT 2
6427: PUSH
6428: LD_INT 3
6430: PUSH
6431: LD_INT 4
6433: PUSH
6434: LD_INT 5
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: ST_TO_ADDR
6443: GO 7304
6445: LD_INT 9
6447: DOUBLE
6448: EQUAL
6449: IFTRUE 6453
6451: GO 6479
6453: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6454: LD_ADDR_VAR 0 3
6458: PUSH
6459: LD_INT 2
6461: PUSH
6462: LD_INT 3
6464: PUSH
6465: LD_INT 4
6467: PUSH
6468: LD_INT 5
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: ST_TO_ADDR
6477: GO 7304
6479: LD_INT 7
6481: DOUBLE
6482: EQUAL
6483: IFTRUE 6487
6485: GO 6513
6487: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6488: LD_ADDR_VAR 0 3
6492: PUSH
6493: LD_INT 2
6495: PUSH
6496: LD_INT 3
6498: PUSH
6499: LD_INT 4
6501: PUSH
6502: LD_INT 5
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: ST_TO_ADDR
6511: GO 7304
6513: LD_INT 12
6515: DOUBLE
6516: EQUAL
6517: IFTRUE 6521
6519: GO 6547
6521: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6522: LD_ADDR_VAR 0 3
6526: PUSH
6527: LD_INT 2
6529: PUSH
6530: LD_INT 3
6532: PUSH
6533: LD_INT 4
6535: PUSH
6536: LD_INT 5
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: ST_TO_ADDR
6545: GO 7304
6547: LD_INT 13
6549: DOUBLE
6550: EQUAL
6551: IFTRUE 6555
6553: GO 6581
6555: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6556: LD_ADDR_VAR 0 3
6560: PUSH
6561: LD_INT 2
6563: PUSH
6564: LD_INT 3
6566: PUSH
6567: LD_INT 4
6569: PUSH
6570: LD_INT 5
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: ST_TO_ADDR
6579: GO 7304
6581: LD_INT 14
6583: DOUBLE
6584: EQUAL
6585: IFTRUE 6589
6587: GO 6607
6589: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6590: LD_ADDR_VAR 0 3
6594: PUSH
6595: LD_INT 4
6597: PUSH
6598: LD_INT 5
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: ST_TO_ADDR
6605: GO 7304
6607: LD_INT 6
6609: DOUBLE
6610: EQUAL
6611: IFTRUE 6615
6613: GO 6633
6615: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6616: LD_ADDR_VAR 0 3
6620: PUSH
6621: LD_INT 4
6623: PUSH
6624: LD_INT 5
6626: PUSH
6627: EMPTY
6628: LIST
6629: LIST
6630: ST_TO_ADDR
6631: GO 7304
6633: LD_INT 10
6635: DOUBLE
6636: EQUAL
6637: IFTRUE 6641
6639: GO 6659
6641: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6642: LD_ADDR_VAR 0 3
6646: PUSH
6647: LD_INT 4
6649: PUSH
6650: LD_INT 5
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: ST_TO_ADDR
6657: GO 7304
6659: LD_INT 22
6661: DOUBLE
6662: EQUAL
6663: IFTRUE 6667
6665: GO 6693
6667: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6668: LD_ADDR_VAR 0 3
6672: PUSH
6673: LD_INT 11
6675: PUSH
6676: LD_INT 12
6678: PUSH
6679: LD_INT 13
6681: PUSH
6682: LD_INT 14
6684: PUSH
6685: EMPTY
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: ST_TO_ADDR
6691: GO 7304
6693: LD_INT 23
6695: DOUBLE
6696: EQUAL
6697: IFTRUE 6701
6699: GO 6727
6701: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6702: LD_ADDR_VAR 0 3
6706: PUSH
6707: LD_INT 11
6709: PUSH
6710: LD_INT 12
6712: PUSH
6713: LD_INT 13
6715: PUSH
6716: LD_INT 14
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: ST_TO_ADDR
6725: GO 7304
6727: LD_INT 24
6729: DOUBLE
6730: EQUAL
6731: IFTRUE 6735
6733: GO 6761
6735: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6736: LD_ADDR_VAR 0 3
6740: PUSH
6741: LD_INT 11
6743: PUSH
6744: LD_INT 12
6746: PUSH
6747: LD_INT 13
6749: PUSH
6750: LD_INT 14
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: ST_TO_ADDR
6759: GO 7304
6761: LD_INT 30
6763: DOUBLE
6764: EQUAL
6765: IFTRUE 6769
6767: GO 6795
6769: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6770: LD_ADDR_VAR 0 3
6774: PUSH
6775: LD_INT 11
6777: PUSH
6778: LD_INT 12
6780: PUSH
6781: LD_INT 13
6783: PUSH
6784: LD_INT 14
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: ST_TO_ADDR
6793: GO 7304
6795: LD_INT 25
6797: DOUBLE
6798: EQUAL
6799: IFTRUE 6803
6801: GO 6821
6803: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6804: LD_ADDR_VAR 0 3
6808: PUSH
6809: LD_INT 13
6811: PUSH
6812: LD_INT 14
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: ST_TO_ADDR
6819: GO 7304
6821: LD_INT 27
6823: DOUBLE
6824: EQUAL
6825: IFTRUE 6829
6827: GO 6847
6829: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6830: LD_ADDR_VAR 0 3
6834: PUSH
6835: LD_INT 13
6837: PUSH
6838: LD_INT 14
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: ST_TO_ADDR
6845: GO 7304
6847: LD_EXP 14
6851: DOUBLE
6852: EQUAL
6853: IFTRUE 6857
6855: GO 6883
6857: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6858: LD_ADDR_VAR 0 3
6862: PUSH
6863: LD_INT 11
6865: PUSH
6866: LD_INT 12
6868: PUSH
6869: LD_INT 13
6871: PUSH
6872: LD_INT 14
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: ST_TO_ADDR
6881: GO 7304
6883: LD_INT 28
6885: DOUBLE
6886: EQUAL
6887: IFTRUE 6891
6889: GO 6909
6891: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6892: LD_ADDR_VAR 0 3
6896: PUSH
6897: LD_INT 13
6899: PUSH
6900: LD_INT 14
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: ST_TO_ADDR
6907: GO 7304
6909: LD_INT 29
6911: DOUBLE
6912: EQUAL
6913: IFTRUE 6917
6915: GO 6935
6917: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6918: LD_ADDR_VAR 0 3
6922: PUSH
6923: LD_INT 13
6925: PUSH
6926: LD_INT 14
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: ST_TO_ADDR
6933: GO 7304
6935: LD_INT 31
6937: DOUBLE
6938: EQUAL
6939: IFTRUE 6943
6941: GO 6961
6943: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6944: LD_ADDR_VAR 0 3
6948: PUSH
6949: LD_INT 13
6951: PUSH
6952: LD_INT 14
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: ST_TO_ADDR
6959: GO 7304
6961: LD_INT 26
6963: DOUBLE
6964: EQUAL
6965: IFTRUE 6969
6967: GO 6987
6969: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6970: LD_ADDR_VAR 0 3
6974: PUSH
6975: LD_INT 13
6977: PUSH
6978: LD_INT 14
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: ST_TO_ADDR
6985: GO 7304
6987: LD_INT 42
6989: DOUBLE
6990: EQUAL
6991: IFTRUE 6995
6993: GO 7021
6995: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6996: LD_ADDR_VAR 0 3
7000: PUSH
7001: LD_INT 21
7003: PUSH
7004: LD_INT 22
7006: PUSH
7007: LD_INT 23
7009: PUSH
7010: LD_INT 24
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: ST_TO_ADDR
7019: GO 7304
7021: LD_INT 43
7023: DOUBLE
7024: EQUAL
7025: IFTRUE 7029
7027: GO 7055
7029: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7030: LD_ADDR_VAR 0 3
7034: PUSH
7035: LD_INT 21
7037: PUSH
7038: LD_INT 22
7040: PUSH
7041: LD_INT 23
7043: PUSH
7044: LD_INT 24
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: ST_TO_ADDR
7053: GO 7304
7055: LD_INT 44
7057: DOUBLE
7058: EQUAL
7059: IFTRUE 7063
7061: GO 7089
7063: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7064: LD_ADDR_VAR 0 3
7068: PUSH
7069: LD_INT 21
7071: PUSH
7072: LD_INT 22
7074: PUSH
7075: LD_INT 23
7077: PUSH
7078: LD_INT 24
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: LIST
7085: LIST
7086: ST_TO_ADDR
7087: GO 7304
7089: LD_INT 45
7091: DOUBLE
7092: EQUAL
7093: IFTRUE 7097
7095: GO 7123
7097: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7098: LD_ADDR_VAR 0 3
7102: PUSH
7103: LD_INT 21
7105: PUSH
7106: LD_INT 22
7108: PUSH
7109: LD_INT 23
7111: PUSH
7112: LD_INT 24
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: ST_TO_ADDR
7121: GO 7304
7123: LD_INT 49
7125: DOUBLE
7126: EQUAL
7127: IFTRUE 7131
7129: GO 7157
7131: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7132: LD_ADDR_VAR 0 3
7136: PUSH
7137: LD_INT 21
7139: PUSH
7140: LD_INT 22
7142: PUSH
7143: LD_INT 23
7145: PUSH
7146: LD_INT 24
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: ST_TO_ADDR
7155: GO 7304
7157: LD_INT 51
7159: DOUBLE
7160: EQUAL
7161: IFTRUE 7165
7163: GO 7191
7165: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7166: LD_ADDR_VAR 0 3
7170: PUSH
7171: LD_INT 21
7173: PUSH
7174: LD_INT 22
7176: PUSH
7177: LD_INT 23
7179: PUSH
7180: LD_INT 24
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: ST_TO_ADDR
7189: GO 7304
7191: LD_INT 52
7193: DOUBLE
7194: EQUAL
7195: IFTRUE 7199
7197: GO 7225
7199: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7200: LD_ADDR_VAR 0 3
7204: PUSH
7205: LD_INT 21
7207: PUSH
7208: LD_INT 22
7210: PUSH
7211: LD_INT 23
7213: PUSH
7214: LD_INT 24
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: ST_TO_ADDR
7223: GO 7304
7225: LD_INT 53
7227: DOUBLE
7228: EQUAL
7229: IFTRUE 7233
7231: GO 7251
7233: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7234: LD_ADDR_VAR 0 3
7238: PUSH
7239: LD_INT 23
7241: PUSH
7242: LD_INT 24
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: ST_TO_ADDR
7249: GO 7304
7251: LD_INT 46
7253: DOUBLE
7254: EQUAL
7255: IFTRUE 7259
7257: GO 7277
7259: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7260: LD_ADDR_VAR 0 3
7264: PUSH
7265: LD_INT 23
7267: PUSH
7268: LD_INT 24
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: ST_TO_ADDR
7275: GO 7304
7277: LD_INT 47
7279: DOUBLE
7280: EQUAL
7281: IFTRUE 7285
7283: GO 7303
7285: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7286: LD_ADDR_VAR 0 3
7290: PUSH
7291: LD_INT 23
7293: PUSH
7294: LD_INT 24
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: ST_TO_ADDR
7301: GO 7304
7303: POP
// result := ( chassis in result ) ;
7304: LD_ADDR_VAR 0 3
7308: PUSH
7309: LD_VAR 0 1
7313: PUSH
7314: LD_VAR 0 3
7318: IN
7319: ST_TO_ADDR
// end ;
7320: LD_VAR 0 3
7324: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7325: LD_INT 0
7327: PPUSH
7328: PPUSH
7329: PPUSH
7330: PPUSH
7331: PPUSH
7332: PPUSH
7333: PPUSH
// result := array ;
7334: LD_ADDR_VAR 0 5
7338: PUSH
7339: LD_VAR 0 1
7343: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7344: LD_VAR 0 1
7348: NOT
7349: PUSH
7350: LD_VAR 0 2
7354: NOT
7355: OR
7356: PUSH
7357: LD_VAR 0 3
7361: NOT
7362: OR
7363: PUSH
7364: LD_VAR 0 2
7368: PUSH
7369: LD_VAR 0 1
7373: GREATER
7374: OR
7375: PUSH
7376: LD_VAR 0 3
7380: PUSH
7381: LD_VAR 0 1
7385: GREATER
7386: OR
7387: IFFALSE 7391
// exit ;
7389: GO 7687
// if direction then
7391: LD_VAR 0 4
7395: IFFALSE 7459
// begin d := 1 ;
7397: LD_ADDR_VAR 0 9
7401: PUSH
7402: LD_INT 1
7404: ST_TO_ADDR
// if i_from > i_to then
7405: LD_VAR 0 2
7409: PUSH
7410: LD_VAR 0 3
7414: GREATER
7415: IFFALSE 7441
// length := ( array - i_from ) + i_to else
7417: LD_ADDR_VAR 0 11
7421: PUSH
7422: LD_VAR 0 1
7426: PUSH
7427: LD_VAR 0 2
7431: MINUS
7432: PUSH
7433: LD_VAR 0 3
7437: PLUS
7438: ST_TO_ADDR
7439: GO 7457
// length := i_to - i_from ;
7441: LD_ADDR_VAR 0 11
7445: PUSH
7446: LD_VAR 0 3
7450: PUSH
7451: LD_VAR 0 2
7455: MINUS
7456: ST_TO_ADDR
// end else
7457: GO 7520
// begin d := - 1 ;
7459: LD_ADDR_VAR 0 9
7463: PUSH
7464: LD_INT 1
7466: NEG
7467: ST_TO_ADDR
// if i_from > i_to then
7468: LD_VAR 0 2
7472: PUSH
7473: LD_VAR 0 3
7477: GREATER
7478: IFFALSE 7498
// length := i_from - i_to else
7480: LD_ADDR_VAR 0 11
7484: PUSH
7485: LD_VAR 0 2
7489: PUSH
7490: LD_VAR 0 3
7494: MINUS
7495: ST_TO_ADDR
7496: GO 7520
// length := ( array - i_to ) + i_from ;
7498: LD_ADDR_VAR 0 11
7502: PUSH
7503: LD_VAR 0 1
7507: PUSH
7508: LD_VAR 0 3
7512: MINUS
7513: PUSH
7514: LD_VAR 0 2
7518: PLUS
7519: ST_TO_ADDR
// end ; if not length then
7520: LD_VAR 0 11
7524: NOT
7525: IFFALSE 7529
// exit ;
7527: GO 7687
// tmp := array ;
7529: LD_ADDR_VAR 0 10
7533: PUSH
7534: LD_VAR 0 1
7538: ST_TO_ADDR
// for i = 1 to length do
7539: LD_ADDR_VAR 0 6
7543: PUSH
7544: DOUBLE
7545: LD_INT 1
7547: DEC
7548: ST_TO_ADDR
7549: LD_VAR 0 11
7553: PUSH
7554: FOR_TO
7555: IFFALSE 7675
// begin for j = 1 to array do
7557: LD_ADDR_VAR 0 7
7561: PUSH
7562: DOUBLE
7563: LD_INT 1
7565: DEC
7566: ST_TO_ADDR
7567: LD_VAR 0 1
7571: PUSH
7572: FOR_TO
7573: IFFALSE 7661
// begin k := j + d ;
7575: LD_ADDR_VAR 0 8
7579: PUSH
7580: LD_VAR 0 7
7584: PUSH
7585: LD_VAR 0 9
7589: PLUS
7590: ST_TO_ADDR
// if k > array then
7591: LD_VAR 0 8
7595: PUSH
7596: LD_VAR 0 1
7600: GREATER
7601: IFFALSE 7611
// k := 1 ;
7603: LD_ADDR_VAR 0 8
7607: PUSH
7608: LD_INT 1
7610: ST_TO_ADDR
// if not k then
7611: LD_VAR 0 8
7615: NOT
7616: IFFALSE 7628
// k := array ;
7618: LD_ADDR_VAR 0 8
7622: PUSH
7623: LD_VAR 0 1
7627: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7628: LD_ADDR_VAR 0 10
7632: PUSH
7633: LD_VAR 0 10
7637: PPUSH
7638: LD_VAR 0 8
7642: PPUSH
7643: LD_VAR 0 1
7647: PUSH
7648: LD_VAR 0 7
7652: ARRAY
7653: PPUSH
7654: CALL_OW 1
7658: ST_TO_ADDR
// end ;
7659: GO 7572
7661: POP
7662: POP
// array := tmp ;
7663: LD_ADDR_VAR 0 1
7667: PUSH
7668: LD_VAR 0 10
7672: ST_TO_ADDR
// end ;
7673: GO 7554
7675: POP
7676: POP
// result := array ;
7677: LD_ADDR_VAR 0 5
7681: PUSH
7682: LD_VAR 0 1
7686: ST_TO_ADDR
// end ;
7687: LD_VAR 0 5
7691: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7692: LD_INT 0
7694: PPUSH
7695: PPUSH
// result := 0 ;
7696: LD_ADDR_VAR 0 3
7700: PUSH
7701: LD_INT 0
7703: ST_TO_ADDR
// if not array or not value in array then
7704: LD_VAR 0 1
7708: NOT
7709: PUSH
7710: LD_VAR 0 2
7714: PUSH
7715: LD_VAR 0 1
7719: IN
7720: NOT
7721: OR
7722: IFFALSE 7726
// exit ;
7724: GO 7780
// for i = 1 to array do
7726: LD_ADDR_VAR 0 4
7730: PUSH
7731: DOUBLE
7732: LD_INT 1
7734: DEC
7735: ST_TO_ADDR
7736: LD_VAR 0 1
7740: PUSH
7741: FOR_TO
7742: IFFALSE 7778
// if value = array [ i ] then
7744: LD_VAR 0 2
7748: PUSH
7749: LD_VAR 0 1
7753: PUSH
7754: LD_VAR 0 4
7758: ARRAY
7759: EQUAL
7760: IFFALSE 7776
// begin result := i ;
7762: LD_ADDR_VAR 0 3
7766: PUSH
7767: LD_VAR 0 4
7771: ST_TO_ADDR
// exit ;
7772: POP
7773: POP
7774: GO 7780
// end ;
7776: GO 7741
7778: POP
7779: POP
// end ;
7780: LD_VAR 0 3
7784: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7785: LD_INT 0
7787: PPUSH
// vc_chassis := chassis ;
7788: LD_ADDR_OWVAR 37
7792: PUSH
7793: LD_VAR 0 1
7797: ST_TO_ADDR
// vc_engine := engine ;
7798: LD_ADDR_OWVAR 39
7802: PUSH
7803: LD_VAR 0 2
7807: ST_TO_ADDR
// vc_control := control ;
7808: LD_ADDR_OWVAR 38
7812: PUSH
7813: LD_VAR 0 3
7817: ST_TO_ADDR
// vc_weapon := weapon ;
7818: LD_ADDR_OWVAR 40
7822: PUSH
7823: LD_VAR 0 4
7827: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7828: LD_ADDR_OWVAR 41
7832: PUSH
7833: LD_VAR 0 5
7837: ST_TO_ADDR
// end ;
7838: LD_VAR 0 6
7842: RET
// export function WantPlant ( unit ) ; var task ; begin
7843: LD_INT 0
7845: PPUSH
7846: PPUSH
// result := false ;
7847: LD_ADDR_VAR 0 2
7851: PUSH
7852: LD_INT 0
7854: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7855: LD_ADDR_VAR 0 3
7859: PUSH
7860: LD_VAR 0 1
7864: PPUSH
7865: CALL_OW 437
7869: ST_TO_ADDR
// if task then
7870: LD_VAR 0 3
7874: IFFALSE 7902
// if task [ 1 ] [ 1 ] = p then
7876: LD_VAR 0 3
7880: PUSH
7881: LD_INT 1
7883: ARRAY
7884: PUSH
7885: LD_INT 1
7887: ARRAY
7888: PUSH
7889: LD_STRING p
7891: EQUAL
7892: IFFALSE 7902
// result := true ;
7894: LD_ADDR_VAR 0 2
7898: PUSH
7899: LD_INT 1
7901: ST_TO_ADDR
// end ;
7902: LD_VAR 0 2
7906: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7907: LD_INT 0
7909: PPUSH
7910: PPUSH
7911: PPUSH
7912: PPUSH
// if pos < 1 then
7913: LD_VAR 0 2
7917: PUSH
7918: LD_INT 1
7920: LESS
7921: IFFALSE 7925
// exit ;
7923: GO 8228
// if pos = 1 then
7925: LD_VAR 0 2
7929: PUSH
7930: LD_INT 1
7932: EQUAL
7933: IFFALSE 7966
// result := Replace ( arr , pos [ 1 ] , value ) else
7935: LD_ADDR_VAR 0 4
7939: PUSH
7940: LD_VAR 0 1
7944: PPUSH
7945: LD_VAR 0 2
7949: PUSH
7950: LD_INT 1
7952: ARRAY
7953: PPUSH
7954: LD_VAR 0 3
7958: PPUSH
7959: CALL_OW 1
7963: ST_TO_ADDR
7964: GO 8228
// begin tmp := arr ;
7966: LD_ADDR_VAR 0 6
7970: PUSH
7971: LD_VAR 0 1
7975: ST_TO_ADDR
// s_arr := [ tmp ] ;
7976: LD_ADDR_VAR 0 7
7980: PUSH
7981: LD_VAR 0 6
7985: PUSH
7986: EMPTY
7987: LIST
7988: ST_TO_ADDR
// for i = 1 to pos - 1 do
7989: LD_ADDR_VAR 0 5
7993: PUSH
7994: DOUBLE
7995: LD_INT 1
7997: DEC
7998: ST_TO_ADDR
7999: LD_VAR 0 2
8003: PUSH
8004: LD_INT 1
8006: MINUS
8007: PUSH
8008: FOR_TO
8009: IFFALSE 8054
// begin tmp := tmp [ pos [ i ] ] ;
8011: LD_ADDR_VAR 0 6
8015: PUSH
8016: LD_VAR 0 6
8020: PUSH
8021: LD_VAR 0 2
8025: PUSH
8026: LD_VAR 0 5
8030: ARRAY
8031: ARRAY
8032: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8033: LD_ADDR_VAR 0 7
8037: PUSH
8038: LD_VAR 0 7
8042: PUSH
8043: LD_VAR 0 6
8047: PUSH
8048: EMPTY
8049: LIST
8050: ADD
8051: ST_TO_ADDR
// end ;
8052: GO 8008
8054: POP
8055: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8056: LD_ADDR_VAR 0 6
8060: PUSH
8061: LD_VAR 0 6
8065: PPUSH
8066: LD_VAR 0 2
8070: PUSH
8071: LD_VAR 0 2
8075: ARRAY
8076: PPUSH
8077: LD_VAR 0 3
8081: PPUSH
8082: CALL_OW 1
8086: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8087: LD_ADDR_VAR 0 7
8091: PUSH
8092: LD_VAR 0 7
8096: PPUSH
8097: LD_VAR 0 7
8101: PPUSH
8102: LD_VAR 0 6
8106: PPUSH
8107: CALL_OW 1
8111: ST_TO_ADDR
// for i = s_arr downto 2 do
8112: LD_ADDR_VAR 0 5
8116: PUSH
8117: DOUBLE
8118: LD_VAR 0 7
8122: INC
8123: ST_TO_ADDR
8124: LD_INT 2
8126: PUSH
8127: FOR_DOWNTO
8128: IFFALSE 8212
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8130: LD_ADDR_VAR 0 6
8134: PUSH
8135: LD_VAR 0 7
8139: PUSH
8140: LD_VAR 0 5
8144: PUSH
8145: LD_INT 1
8147: MINUS
8148: ARRAY
8149: PPUSH
8150: LD_VAR 0 2
8154: PUSH
8155: LD_VAR 0 5
8159: PUSH
8160: LD_INT 1
8162: MINUS
8163: ARRAY
8164: PPUSH
8165: LD_VAR 0 7
8169: PUSH
8170: LD_VAR 0 5
8174: ARRAY
8175: PPUSH
8176: CALL_OW 1
8180: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8181: LD_ADDR_VAR 0 7
8185: PUSH
8186: LD_VAR 0 7
8190: PPUSH
8191: LD_VAR 0 5
8195: PUSH
8196: LD_INT 1
8198: MINUS
8199: PPUSH
8200: LD_VAR 0 6
8204: PPUSH
8205: CALL_OW 1
8209: ST_TO_ADDR
// end ;
8210: GO 8127
8212: POP
8213: POP
// result := s_arr [ 1 ] ;
8214: LD_ADDR_VAR 0 4
8218: PUSH
8219: LD_VAR 0 7
8223: PUSH
8224: LD_INT 1
8226: ARRAY
8227: ST_TO_ADDR
// end ; end ;
8228: LD_VAR 0 4
8232: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8233: LD_INT 0
8235: PPUSH
8236: PPUSH
// if not list then
8237: LD_VAR 0 1
8241: NOT
8242: IFFALSE 8246
// exit ;
8244: GO 8337
// i := list [ pos1 ] ;
8246: LD_ADDR_VAR 0 5
8250: PUSH
8251: LD_VAR 0 1
8255: PUSH
8256: LD_VAR 0 2
8260: ARRAY
8261: ST_TO_ADDR
// if not i then
8262: LD_VAR 0 5
8266: NOT
8267: IFFALSE 8271
// exit ;
8269: GO 8337
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8271: LD_ADDR_VAR 0 1
8275: PUSH
8276: LD_VAR 0 1
8280: PPUSH
8281: LD_VAR 0 2
8285: PPUSH
8286: LD_VAR 0 1
8290: PUSH
8291: LD_VAR 0 3
8295: ARRAY
8296: PPUSH
8297: CALL_OW 1
8301: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8302: LD_ADDR_VAR 0 1
8306: PUSH
8307: LD_VAR 0 1
8311: PPUSH
8312: LD_VAR 0 3
8316: PPUSH
8317: LD_VAR 0 5
8321: PPUSH
8322: CALL_OW 1
8326: ST_TO_ADDR
// result := list ;
8327: LD_ADDR_VAR 0 4
8331: PUSH
8332: LD_VAR 0 1
8336: ST_TO_ADDR
// end ;
8337: LD_VAR 0 4
8341: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8342: LD_INT 0
8344: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8345: LD_ADDR_VAR 0 5
8349: PUSH
8350: LD_VAR 0 1
8354: PPUSH
8355: CALL_OW 250
8359: PPUSH
8360: LD_VAR 0 1
8364: PPUSH
8365: CALL_OW 251
8369: PPUSH
8370: LD_VAR 0 2
8374: PPUSH
8375: LD_VAR 0 3
8379: PPUSH
8380: LD_VAR 0 4
8384: PPUSH
8385: CALL 8395 0 5
8389: ST_TO_ADDR
// end ;
8390: LD_VAR 0 5
8394: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8395: LD_INT 0
8397: PPUSH
8398: PPUSH
8399: PPUSH
8400: PPUSH
// if not list then
8401: LD_VAR 0 3
8405: NOT
8406: IFFALSE 8410
// exit ;
8408: GO 8798
// result := [ ] ;
8410: LD_ADDR_VAR 0 6
8414: PUSH
8415: EMPTY
8416: ST_TO_ADDR
// for i in list do
8417: LD_ADDR_VAR 0 7
8421: PUSH
8422: LD_VAR 0 3
8426: PUSH
8427: FOR_IN
8428: IFFALSE 8630
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8430: LD_ADDR_VAR 0 9
8434: PUSH
8435: LD_VAR 0 7
8439: PPUSH
8440: LD_VAR 0 1
8444: PPUSH
8445: LD_VAR 0 2
8449: PPUSH
8450: CALL_OW 297
8454: ST_TO_ADDR
// if not result then
8455: LD_VAR 0 6
8459: NOT
8460: IFFALSE 8486
// result := [ [ i , tmp ] ] else
8462: LD_ADDR_VAR 0 6
8466: PUSH
8467: LD_VAR 0 7
8471: PUSH
8472: LD_VAR 0 9
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: PUSH
8481: EMPTY
8482: LIST
8483: ST_TO_ADDR
8484: GO 8628
// begin if result [ result ] [ 2 ] < tmp then
8486: LD_VAR 0 6
8490: PUSH
8491: LD_VAR 0 6
8495: ARRAY
8496: PUSH
8497: LD_INT 2
8499: ARRAY
8500: PUSH
8501: LD_VAR 0 9
8505: LESS
8506: IFFALSE 8548
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8508: LD_ADDR_VAR 0 6
8512: PUSH
8513: LD_VAR 0 6
8517: PPUSH
8518: LD_VAR 0 6
8522: PUSH
8523: LD_INT 1
8525: PLUS
8526: PPUSH
8527: LD_VAR 0 7
8531: PUSH
8532: LD_VAR 0 9
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: PPUSH
8541: CALL_OW 2
8545: ST_TO_ADDR
8546: GO 8628
// for j = 1 to result do
8548: LD_ADDR_VAR 0 8
8552: PUSH
8553: DOUBLE
8554: LD_INT 1
8556: DEC
8557: ST_TO_ADDR
8558: LD_VAR 0 6
8562: PUSH
8563: FOR_TO
8564: IFFALSE 8626
// begin if tmp < result [ j ] [ 2 ] then
8566: LD_VAR 0 9
8570: PUSH
8571: LD_VAR 0 6
8575: PUSH
8576: LD_VAR 0 8
8580: ARRAY
8581: PUSH
8582: LD_INT 2
8584: ARRAY
8585: LESS
8586: IFFALSE 8624
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8588: LD_ADDR_VAR 0 6
8592: PUSH
8593: LD_VAR 0 6
8597: PPUSH
8598: LD_VAR 0 8
8602: PPUSH
8603: LD_VAR 0 7
8607: PUSH
8608: LD_VAR 0 9
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: PPUSH
8617: CALL_OW 2
8621: ST_TO_ADDR
// break ;
8622: GO 8626
// end ; end ;
8624: GO 8563
8626: POP
8627: POP
// end ; end ;
8628: GO 8427
8630: POP
8631: POP
// if result and not asc then
8632: LD_VAR 0 6
8636: PUSH
8637: LD_VAR 0 4
8641: NOT
8642: AND
8643: IFFALSE 8718
// begin tmp := result ;
8645: LD_ADDR_VAR 0 9
8649: PUSH
8650: LD_VAR 0 6
8654: ST_TO_ADDR
// for i = tmp downto 1 do
8655: LD_ADDR_VAR 0 7
8659: PUSH
8660: DOUBLE
8661: LD_VAR 0 9
8665: INC
8666: ST_TO_ADDR
8667: LD_INT 1
8669: PUSH
8670: FOR_DOWNTO
8671: IFFALSE 8716
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8673: LD_ADDR_VAR 0 6
8677: PUSH
8678: LD_VAR 0 6
8682: PPUSH
8683: LD_VAR 0 9
8687: PUSH
8688: LD_VAR 0 7
8692: MINUS
8693: PUSH
8694: LD_INT 1
8696: PLUS
8697: PPUSH
8698: LD_VAR 0 9
8702: PUSH
8703: LD_VAR 0 7
8707: ARRAY
8708: PPUSH
8709: CALL_OW 1
8713: ST_TO_ADDR
8714: GO 8670
8716: POP
8717: POP
// end ; tmp := [ ] ;
8718: LD_ADDR_VAR 0 9
8722: PUSH
8723: EMPTY
8724: ST_TO_ADDR
// if mode then
8725: LD_VAR 0 5
8729: IFFALSE 8798
// begin for i = 1 to result do
8731: LD_ADDR_VAR 0 7
8735: PUSH
8736: DOUBLE
8737: LD_INT 1
8739: DEC
8740: ST_TO_ADDR
8741: LD_VAR 0 6
8745: PUSH
8746: FOR_TO
8747: IFFALSE 8786
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8749: LD_ADDR_VAR 0 9
8753: PUSH
8754: LD_VAR 0 9
8758: PPUSH
8759: LD_VAR 0 7
8763: PPUSH
8764: LD_VAR 0 6
8768: PUSH
8769: LD_VAR 0 7
8773: ARRAY
8774: PUSH
8775: LD_INT 1
8777: ARRAY
8778: PPUSH
8779: CALL_OW 1
8783: ST_TO_ADDR
8784: GO 8746
8786: POP
8787: POP
// result := tmp ;
8788: LD_ADDR_VAR 0 6
8792: PUSH
8793: LD_VAR 0 9
8797: ST_TO_ADDR
// end ; end ;
8798: LD_VAR 0 6
8802: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8803: LD_INT 0
8805: PPUSH
8806: PPUSH
8807: PPUSH
8808: PPUSH
8809: PPUSH
8810: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8811: LD_ADDR_VAR 0 5
8815: PUSH
8816: LD_INT 0
8818: PUSH
8819: LD_INT 0
8821: PUSH
8822: LD_INT 0
8824: PUSH
8825: EMPTY
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: ST_TO_ADDR
// if not x or not y then
8833: LD_VAR 0 2
8837: NOT
8838: PUSH
8839: LD_VAR 0 3
8843: NOT
8844: OR
8845: IFFALSE 8849
// exit ;
8847: GO 10501
// if not range then
8849: LD_VAR 0 4
8853: NOT
8854: IFFALSE 8864
// range := 10 ;
8856: LD_ADDR_VAR 0 4
8860: PUSH
8861: LD_INT 10
8863: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8864: LD_ADDR_VAR 0 8
8868: PUSH
8869: LD_INT 81
8871: PUSH
8872: LD_VAR 0 1
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: PUSH
8881: LD_INT 92
8883: PUSH
8884: LD_VAR 0 2
8888: PUSH
8889: LD_VAR 0 3
8893: PUSH
8894: LD_VAR 0 4
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: PUSH
8905: LD_INT 3
8907: PUSH
8908: LD_INT 21
8910: PUSH
8911: LD_INT 3
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: LIST
8926: PPUSH
8927: CALL_OW 69
8931: ST_TO_ADDR
// if not tmp then
8932: LD_VAR 0 8
8936: NOT
8937: IFFALSE 8941
// exit ;
8939: GO 10501
// for i in tmp do
8941: LD_ADDR_VAR 0 6
8945: PUSH
8946: LD_VAR 0 8
8950: PUSH
8951: FOR_IN
8952: IFFALSE 10476
// begin points := [ 0 , 0 , 0 ] ;
8954: LD_ADDR_VAR 0 9
8958: PUSH
8959: LD_INT 0
8961: PUSH
8962: LD_INT 0
8964: PUSH
8965: LD_INT 0
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: LIST
8972: ST_TO_ADDR
// bpoints := 1 ;
8973: LD_ADDR_VAR 0 10
8977: PUSH
8978: LD_INT 1
8980: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8981: LD_VAR 0 6
8985: PPUSH
8986: CALL_OW 247
8990: PUSH
8991: LD_INT 1
8993: DOUBLE
8994: EQUAL
8995: IFTRUE 8999
8997: GO 9577
8999: POP
// begin if GetClass ( i ) = 1 then
9000: LD_VAR 0 6
9004: PPUSH
9005: CALL_OW 257
9009: PUSH
9010: LD_INT 1
9012: EQUAL
9013: IFFALSE 9034
// points := [ 10 , 5 , 3 ] ;
9015: LD_ADDR_VAR 0 9
9019: PUSH
9020: LD_INT 10
9022: PUSH
9023: LD_INT 5
9025: PUSH
9026: LD_INT 3
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: LIST
9033: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9034: LD_VAR 0 6
9038: PPUSH
9039: CALL_OW 257
9043: PUSH
9044: LD_INT 2
9046: PUSH
9047: LD_INT 3
9049: PUSH
9050: LD_INT 4
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: LIST
9057: IN
9058: IFFALSE 9079
// points := [ 3 , 2 , 1 ] ;
9060: LD_ADDR_VAR 0 9
9064: PUSH
9065: LD_INT 3
9067: PUSH
9068: LD_INT 2
9070: PUSH
9071: LD_INT 1
9073: PUSH
9074: EMPTY
9075: LIST
9076: LIST
9077: LIST
9078: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9079: LD_VAR 0 6
9083: PPUSH
9084: CALL_OW 257
9088: PUSH
9089: LD_INT 5
9091: EQUAL
9092: IFFALSE 9113
// points := [ 130 , 5 , 2 ] ;
9094: LD_ADDR_VAR 0 9
9098: PUSH
9099: LD_INT 130
9101: PUSH
9102: LD_INT 5
9104: PUSH
9105: LD_INT 2
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: LIST
9112: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9113: LD_VAR 0 6
9117: PPUSH
9118: CALL_OW 257
9122: PUSH
9123: LD_INT 8
9125: EQUAL
9126: IFFALSE 9147
// points := [ 35 , 35 , 30 ] ;
9128: LD_ADDR_VAR 0 9
9132: PUSH
9133: LD_INT 35
9135: PUSH
9136: LD_INT 35
9138: PUSH
9139: LD_INT 30
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: LIST
9146: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9147: LD_VAR 0 6
9151: PPUSH
9152: CALL_OW 257
9156: PUSH
9157: LD_INT 9
9159: EQUAL
9160: IFFALSE 9181
// points := [ 20 , 55 , 40 ] ;
9162: LD_ADDR_VAR 0 9
9166: PUSH
9167: LD_INT 20
9169: PUSH
9170: LD_INT 55
9172: PUSH
9173: LD_INT 40
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: LIST
9180: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9181: LD_VAR 0 6
9185: PPUSH
9186: CALL_OW 257
9190: PUSH
9191: LD_INT 12
9193: PUSH
9194: LD_INT 16
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: IN
9201: IFFALSE 9222
// points := [ 5 , 3 , 2 ] ;
9203: LD_ADDR_VAR 0 9
9207: PUSH
9208: LD_INT 5
9210: PUSH
9211: LD_INT 3
9213: PUSH
9214: LD_INT 2
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: LIST
9221: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9222: LD_VAR 0 6
9226: PPUSH
9227: CALL_OW 257
9231: PUSH
9232: LD_INT 17
9234: EQUAL
9235: IFFALSE 9256
// points := [ 100 , 50 , 75 ] ;
9237: LD_ADDR_VAR 0 9
9241: PUSH
9242: LD_INT 100
9244: PUSH
9245: LD_INT 50
9247: PUSH
9248: LD_INT 75
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: LIST
9255: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9256: LD_VAR 0 6
9260: PPUSH
9261: CALL_OW 257
9265: PUSH
9266: LD_INT 15
9268: EQUAL
9269: IFFALSE 9290
// points := [ 10 , 5 , 3 ] ;
9271: LD_ADDR_VAR 0 9
9275: PUSH
9276: LD_INT 10
9278: PUSH
9279: LD_INT 5
9281: PUSH
9282: LD_INT 3
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: LIST
9289: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9290: LD_VAR 0 6
9294: PPUSH
9295: CALL_OW 257
9299: PUSH
9300: LD_INT 14
9302: EQUAL
9303: IFFALSE 9324
// points := [ 10 , 0 , 0 ] ;
9305: LD_ADDR_VAR 0 9
9309: PUSH
9310: LD_INT 10
9312: PUSH
9313: LD_INT 0
9315: PUSH
9316: LD_INT 0
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: LIST
9323: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9324: LD_VAR 0 6
9328: PPUSH
9329: CALL_OW 257
9333: PUSH
9334: LD_INT 11
9336: EQUAL
9337: IFFALSE 9358
// points := [ 30 , 10 , 5 ] ;
9339: LD_ADDR_VAR 0 9
9343: PUSH
9344: LD_INT 30
9346: PUSH
9347: LD_INT 10
9349: PUSH
9350: LD_INT 5
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: LIST
9357: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9358: LD_VAR 0 1
9362: PPUSH
9363: LD_INT 5
9365: PPUSH
9366: CALL_OW 321
9370: PUSH
9371: LD_INT 2
9373: EQUAL
9374: IFFALSE 9391
// bpoints := bpoints * 1.8 ;
9376: LD_ADDR_VAR 0 10
9380: PUSH
9381: LD_VAR 0 10
9385: PUSH
9386: LD_REAL  1.80000000000000E+0000
9389: MUL
9390: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9391: LD_VAR 0 6
9395: PPUSH
9396: CALL_OW 257
9400: PUSH
9401: LD_INT 1
9403: PUSH
9404: LD_INT 2
9406: PUSH
9407: LD_INT 3
9409: PUSH
9410: LD_INT 4
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: IN
9419: PUSH
9420: LD_VAR 0 1
9424: PPUSH
9425: LD_INT 51
9427: PPUSH
9428: CALL_OW 321
9432: PUSH
9433: LD_INT 2
9435: EQUAL
9436: AND
9437: IFFALSE 9454
// bpoints := bpoints * 1.2 ;
9439: LD_ADDR_VAR 0 10
9443: PUSH
9444: LD_VAR 0 10
9448: PUSH
9449: LD_REAL  1.20000000000000E+0000
9452: MUL
9453: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9454: LD_VAR 0 6
9458: PPUSH
9459: CALL_OW 257
9463: PUSH
9464: LD_INT 5
9466: PUSH
9467: LD_INT 7
9469: PUSH
9470: LD_INT 9
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: LIST
9477: IN
9478: PUSH
9479: LD_VAR 0 1
9483: PPUSH
9484: LD_INT 52
9486: PPUSH
9487: CALL_OW 321
9491: PUSH
9492: LD_INT 2
9494: EQUAL
9495: AND
9496: IFFALSE 9513
// bpoints := bpoints * 1.5 ;
9498: LD_ADDR_VAR 0 10
9502: PUSH
9503: LD_VAR 0 10
9507: PUSH
9508: LD_REAL  1.50000000000000E+0000
9511: MUL
9512: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9513: LD_VAR 0 1
9517: PPUSH
9518: LD_INT 66
9520: PPUSH
9521: CALL_OW 321
9525: PUSH
9526: LD_INT 2
9528: EQUAL
9529: IFFALSE 9546
// bpoints := bpoints * 1.1 ;
9531: LD_ADDR_VAR 0 10
9535: PUSH
9536: LD_VAR 0 10
9540: PUSH
9541: LD_REAL  1.10000000000000E+0000
9544: MUL
9545: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9546: LD_ADDR_VAR 0 10
9550: PUSH
9551: LD_VAR 0 10
9555: PUSH
9556: LD_VAR 0 6
9560: PPUSH
9561: LD_INT 1
9563: PPUSH
9564: CALL_OW 259
9568: PUSH
9569: LD_REAL  1.15000000000000E+0000
9572: MUL
9573: MUL
9574: ST_TO_ADDR
// end ; unit_vehicle :
9575: GO 10405
9577: LD_INT 2
9579: DOUBLE
9580: EQUAL
9581: IFTRUE 9585
9583: GO 10393
9585: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9586: LD_VAR 0 6
9590: PPUSH
9591: CALL_OW 264
9595: PUSH
9596: LD_INT 2
9598: PUSH
9599: LD_INT 42
9601: PUSH
9602: LD_INT 24
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: IN
9610: IFFALSE 9631
// points := [ 25 , 5 , 3 ] ;
9612: LD_ADDR_VAR 0 9
9616: PUSH
9617: LD_INT 25
9619: PUSH
9620: LD_INT 5
9622: PUSH
9623: LD_INT 3
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: LIST
9630: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9631: LD_VAR 0 6
9635: PPUSH
9636: CALL_OW 264
9640: PUSH
9641: LD_INT 4
9643: PUSH
9644: LD_INT 43
9646: PUSH
9647: LD_INT 25
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: IN
9655: IFFALSE 9676
// points := [ 40 , 15 , 5 ] ;
9657: LD_ADDR_VAR 0 9
9661: PUSH
9662: LD_INT 40
9664: PUSH
9665: LD_INT 15
9667: PUSH
9668: LD_INT 5
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: LIST
9675: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9676: LD_VAR 0 6
9680: PPUSH
9681: CALL_OW 264
9685: PUSH
9686: LD_INT 3
9688: PUSH
9689: LD_INT 23
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: IN
9696: IFFALSE 9717
// points := [ 7 , 25 , 8 ] ;
9698: LD_ADDR_VAR 0 9
9702: PUSH
9703: LD_INT 7
9705: PUSH
9706: LD_INT 25
9708: PUSH
9709: LD_INT 8
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: LIST
9716: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9717: LD_VAR 0 6
9721: PPUSH
9722: CALL_OW 264
9726: PUSH
9727: LD_INT 5
9729: PUSH
9730: LD_INT 27
9732: PUSH
9733: LD_INT 44
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: LIST
9740: IN
9741: IFFALSE 9762
// points := [ 14 , 50 , 16 ] ;
9743: LD_ADDR_VAR 0 9
9747: PUSH
9748: LD_INT 14
9750: PUSH
9751: LD_INT 50
9753: PUSH
9754: LD_INT 16
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: LIST
9761: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9762: LD_VAR 0 6
9766: PPUSH
9767: CALL_OW 264
9771: PUSH
9772: LD_INT 6
9774: PUSH
9775: LD_INT 46
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: IN
9782: IFFALSE 9803
// points := [ 32 , 120 , 70 ] ;
9784: LD_ADDR_VAR 0 9
9788: PUSH
9789: LD_INT 32
9791: PUSH
9792: LD_INT 120
9794: PUSH
9795: LD_INT 70
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: LIST
9802: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
9803: LD_VAR 0 6
9807: PPUSH
9808: CALL_OW 264
9812: PUSH
9813: LD_INT 7
9815: PUSH
9816: LD_INT 28
9818: PUSH
9819: LD_INT 45
9821: PUSH
9822: LD_EXP 14
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: IN
9833: IFFALSE 9854
// points := [ 35 , 20 , 45 ] ;
9835: LD_ADDR_VAR 0 9
9839: PUSH
9840: LD_INT 35
9842: PUSH
9843: LD_INT 20
9845: PUSH
9846: LD_INT 45
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: LIST
9853: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9854: LD_VAR 0 6
9858: PPUSH
9859: CALL_OW 264
9863: PUSH
9864: LD_INT 47
9866: PUSH
9867: EMPTY
9868: LIST
9869: IN
9870: IFFALSE 9891
// points := [ 67 , 45 , 75 ] ;
9872: LD_ADDR_VAR 0 9
9876: PUSH
9877: LD_INT 67
9879: PUSH
9880: LD_INT 45
9882: PUSH
9883: LD_INT 75
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: LIST
9890: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9891: LD_VAR 0 6
9895: PPUSH
9896: CALL_OW 264
9900: PUSH
9901: LD_INT 26
9903: PUSH
9904: EMPTY
9905: LIST
9906: IN
9907: IFFALSE 9928
// points := [ 120 , 30 , 80 ] ;
9909: LD_ADDR_VAR 0 9
9913: PUSH
9914: LD_INT 120
9916: PUSH
9917: LD_INT 30
9919: PUSH
9920: LD_INT 80
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: LIST
9927: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9928: LD_VAR 0 6
9932: PPUSH
9933: CALL_OW 264
9937: PUSH
9938: LD_INT 22
9940: PUSH
9941: EMPTY
9942: LIST
9943: IN
9944: IFFALSE 9965
// points := [ 40 , 1 , 1 ] ;
9946: LD_ADDR_VAR 0 9
9950: PUSH
9951: LD_INT 40
9953: PUSH
9954: LD_INT 1
9956: PUSH
9957: LD_INT 1
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: LIST
9964: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9965: LD_VAR 0 6
9969: PPUSH
9970: CALL_OW 264
9974: PUSH
9975: LD_INT 29
9977: PUSH
9978: EMPTY
9979: LIST
9980: IN
9981: IFFALSE 10002
// points := [ 70 , 200 , 400 ] ;
9983: LD_ADDR_VAR 0 9
9987: PUSH
9988: LD_INT 70
9990: PUSH
9991: LD_INT 200
9993: PUSH
9994: LD_INT 400
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: LIST
10001: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10002: LD_VAR 0 6
10006: PPUSH
10007: CALL_OW 264
10011: PUSH
10012: LD_INT 14
10014: PUSH
10015: LD_INT 53
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: IN
10022: IFFALSE 10043
// points := [ 40 , 10 , 20 ] ;
10024: LD_ADDR_VAR 0 9
10028: PUSH
10029: LD_INT 40
10031: PUSH
10032: LD_INT 10
10034: PUSH
10035: LD_INT 20
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: LIST
10042: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10043: LD_VAR 0 6
10047: PPUSH
10048: CALL_OW 264
10052: PUSH
10053: LD_INT 9
10055: PUSH
10056: EMPTY
10057: LIST
10058: IN
10059: IFFALSE 10080
// points := [ 5 , 70 , 20 ] ;
10061: LD_ADDR_VAR 0 9
10065: PUSH
10066: LD_INT 5
10068: PUSH
10069: LD_INT 70
10071: PUSH
10072: LD_INT 20
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: LIST
10079: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10080: LD_VAR 0 6
10084: PPUSH
10085: CALL_OW 264
10089: PUSH
10090: LD_INT 10
10092: PUSH
10093: EMPTY
10094: LIST
10095: IN
10096: IFFALSE 10117
// points := [ 35 , 110 , 70 ] ;
10098: LD_ADDR_VAR 0 9
10102: PUSH
10103: LD_INT 35
10105: PUSH
10106: LD_INT 110
10108: PUSH
10109: LD_INT 70
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: LIST
10116: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10117: LD_VAR 0 6
10121: PPUSH
10122: CALL_OW 265
10126: PUSH
10127: LD_INT 25
10129: EQUAL
10130: IFFALSE 10151
// points := [ 80 , 65 , 100 ] ;
10132: LD_ADDR_VAR 0 9
10136: PUSH
10137: LD_INT 80
10139: PUSH
10140: LD_INT 65
10142: PUSH
10143: LD_INT 100
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: LIST
10150: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10151: LD_VAR 0 6
10155: PPUSH
10156: CALL_OW 263
10160: PUSH
10161: LD_INT 1
10163: EQUAL
10164: IFFALSE 10199
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10166: LD_ADDR_VAR 0 10
10170: PUSH
10171: LD_VAR 0 10
10175: PUSH
10176: LD_VAR 0 6
10180: PPUSH
10181: CALL_OW 311
10185: PPUSH
10186: LD_INT 3
10188: PPUSH
10189: CALL_OW 259
10193: PUSH
10194: LD_INT 4
10196: MUL
10197: MUL
10198: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10199: LD_VAR 0 6
10203: PPUSH
10204: CALL_OW 263
10208: PUSH
10209: LD_INT 2
10211: EQUAL
10212: IFFALSE 10263
// begin j := IsControledBy ( i ) ;
10214: LD_ADDR_VAR 0 7
10218: PUSH
10219: LD_VAR 0 6
10223: PPUSH
10224: CALL_OW 312
10228: ST_TO_ADDR
// if j then
10229: LD_VAR 0 7
10233: IFFALSE 10263
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10235: LD_ADDR_VAR 0 10
10239: PUSH
10240: LD_VAR 0 10
10244: PUSH
10245: LD_VAR 0 7
10249: PPUSH
10250: LD_INT 3
10252: PPUSH
10253: CALL_OW 259
10257: PUSH
10258: LD_INT 3
10260: MUL
10261: MUL
10262: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10263: LD_VAR 0 6
10267: PPUSH
10268: CALL_OW 264
10272: PUSH
10273: LD_INT 5
10275: PUSH
10276: LD_INT 6
10278: PUSH
10279: LD_INT 46
10281: PUSH
10282: LD_INT 44
10284: PUSH
10285: LD_INT 47
10287: PUSH
10288: LD_INT 45
10290: PUSH
10291: LD_INT 28
10293: PUSH
10294: LD_INT 7
10296: PUSH
10297: LD_INT 27
10299: PUSH
10300: LD_INT 29
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: IN
10315: PUSH
10316: LD_VAR 0 1
10320: PPUSH
10321: LD_INT 52
10323: PPUSH
10324: CALL_OW 321
10328: PUSH
10329: LD_INT 2
10331: EQUAL
10332: AND
10333: IFFALSE 10350
// bpoints := bpoints * 1.2 ;
10335: LD_ADDR_VAR 0 10
10339: PUSH
10340: LD_VAR 0 10
10344: PUSH
10345: LD_REAL  1.20000000000000E+0000
10348: MUL
10349: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10350: LD_VAR 0 6
10354: PPUSH
10355: CALL_OW 264
10359: PUSH
10360: LD_INT 6
10362: PUSH
10363: LD_INT 46
10365: PUSH
10366: LD_INT 47
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: LIST
10373: IN
10374: IFFALSE 10391
// bpoints := bpoints * 1.2 ;
10376: LD_ADDR_VAR 0 10
10380: PUSH
10381: LD_VAR 0 10
10385: PUSH
10386: LD_REAL  1.20000000000000E+0000
10389: MUL
10390: ST_TO_ADDR
// end ; unit_building :
10391: GO 10405
10393: LD_INT 3
10395: DOUBLE
10396: EQUAL
10397: IFTRUE 10401
10399: GO 10404
10401: POP
// ; end ;
10402: GO 10405
10404: POP
// for j = 1 to 3 do
10405: LD_ADDR_VAR 0 7
10409: PUSH
10410: DOUBLE
10411: LD_INT 1
10413: DEC
10414: ST_TO_ADDR
10415: LD_INT 3
10417: PUSH
10418: FOR_TO
10419: IFFALSE 10472
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10421: LD_ADDR_VAR 0 5
10425: PUSH
10426: LD_VAR 0 5
10430: PPUSH
10431: LD_VAR 0 7
10435: PPUSH
10436: LD_VAR 0 5
10440: PUSH
10441: LD_VAR 0 7
10445: ARRAY
10446: PUSH
10447: LD_VAR 0 9
10451: PUSH
10452: LD_VAR 0 7
10456: ARRAY
10457: PUSH
10458: LD_VAR 0 10
10462: MUL
10463: PLUS
10464: PPUSH
10465: CALL_OW 1
10469: ST_TO_ADDR
10470: GO 10418
10472: POP
10473: POP
// end ;
10474: GO 8951
10476: POP
10477: POP
// result := Replace ( result , 4 , tmp ) ;
10478: LD_ADDR_VAR 0 5
10482: PUSH
10483: LD_VAR 0 5
10487: PPUSH
10488: LD_INT 4
10490: PPUSH
10491: LD_VAR 0 8
10495: PPUSH
10496: CALL_OW 1
10500: ST_TO_ADDR
// end ;
10501: LD_VAR 0 5
10505: RET
// export function DangerAtRange ( unit , range ) ; begin
10506: LD_INT 0
10508: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10509: LD_ADDR_VAR 0 3
10513: PUSH
10514: LD_VAR 0 1
10518: PPUSH
10519: CALL_OW 255
10523: PPUSH
10524: LD_VAR 0 1
10528: PPUSH
10529: CALL_OW 250
10533: PPUSH
10534: LD_VAR 0 1
10538: PPUSH
10539: CALL_OW 251
10543: PPUSH
10544: LD_VAR 0 2
10548: PPUSH
10549: CALL 8803 0 4
10553: ST_TO_ADDR
// end ;
10554: LD_VAR 0 3
10558: RET
// export function DangerInArea ( side , area ) ; begin
10559: LD_INT 0
10561: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10562: LD_ADDR_VAR 0 3
10566: PUSH
10567: LD_VAR 0 2
10571: PPUSH
10572: LD_INT 81
10574: PUSH
10575: LD_VAR 0 1
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: PPUSH
10584: CALL_OW 70
10588: ST_TO_ADDR
// end ;
10589: LD_VAR 0 3
10593: RET
// export function IsExtension ( b ) ; begin
10594: LD_INT 0
10596: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10597: LD_ADDR_VAR 0 2
10601: PUSH
10602: LD_VAR 0 1
10606: PUSH
10607: LD_INT 23
10609: PUSH
10610: LD_INT 20
10612: PUSH
10613: LD_INT 22
10615: PUSH
10616: LD_INT 17
10618: PUSH
10619: LD_INT 24
10621: PUSH
10622: LD_INT 21
10624: PUSH
10625: LD_INT 19
10627: PUSH
10628: LD_INT 16
10630: PUSH
10631: LD_INT 25
10633: PUSH
10634: LD_INT 18
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: IN
10649: ST_TO_ADDR
// end ;
10650: LD_VAR 0 2
10654: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10655: LD_INT 0
10657: PPUSH
10658: PPUSH
10659: PPUSH
// result := [ ] ;
10660: LD_ADDR_VAR 0 4
10664: PUSH
10665: EMPTY
10666: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10667: LD_ADDR_VAR 0 5
10671: PUSH
10672: LD_VAR 0 2
10676: PPUSH
10677: LD_INT 21
10679: PUSH
10680: LD_INT 3
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: PPUSH
10687: CALL_OW 70
10691: ST_TO_ADDR
// if not tmp then
10692: LD_VAR 0 5
10696: NOT
10697: IFFALSE 10701
// exit ;
10699: GO 10765
// if checkLink then
10701: LD_VAR 0 3
10705: IFFALSE 10755
// begin for i in tmp do
10707: LD_ADDR_VAR 0 6
10711: PUSH
10712: LD_VAR 0 5
10716: PUSH
10717: FOR_IN
10718: IFFALSE 10753
// if GetBase ( i ) <> base then
10720: LD_VAR 0 6
10724: PPUSH
10725: CALL_OW 274
10729: PUSH
10730: LD_VAR 0 1
10734: NONEQUAL
10735: IFFALSE 10751
// ComLinkToBase ( base , i ) ;
10737: LD_VAR 0 1
10741: PPUSH
10742: LD_VAR 0 6
10746: PPUSH
10747: CALL_OW 169
10751: GO 10717
10753: POP
10754: POP
// end ; result := tmp ;
10755: LD_ADDR_VAR 0 4
10759: PUSH
10760: LD_VAR 0 5
10764: ST_TO_ADDR
// end ;
10765: LD_VAR 0 4
10769: RET
// export function ComComplete ( units , b ) ; var i ; begin
10770: LD_INT 0
10772: PPUSH
10773: PPUSH
// if not units then
10774: LD_VAR 0 1
10778: NOT
10779: IFFALSE 10783
// exit ;
10781: GO 10873
// for i in units do
10783: LD_ADDR_VAR 0 4
10787: PUSH
10788: LD_VAR 0 1
10792: PUSH
10793: FOR_IN
10794: IFFALSE 10871
// if BuildingStatus ( b ) = bs_build then
10796: LD_VAR 0 2
10800: PPUSH
10801: CALL_OW 461
10805: PUSH
10806: LD_INT 1
10808: EQUAL
10809: IFFALSE 10869
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10811: LD_VAR 0 4
10815: PPUSH
10816: LD_STRING h
10818: PUSH
10819: LD_VAR 0 2
10823: PPUSH
10824: CALL_OW 250
10828: PUSH
10829: LD_VAR 0 2
10833: PPUSH
10834: CALL_OW 251
10838: PUSH
10839: LD_VAR 0 2
10843: PUSH
10844: LD_INT 0
10846: PUSH
10847: LD_INT 0
10849: PUSH
10850: LD_INT 0
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: PUSH
10862: EMPTY
10863: LIST
10864: PPUSH
10865: CALL_OW 446
10869: GO 10793
10871: POP
10872: POP
// end ;
10873: LD_VAR 0 3
10877: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10878: LD_INT 0
10880: PPUSH
10881: PPUSH
10882: PPUSH
10883: PPUSH
10884: PPUSH
10885: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
10886: LD_VAR 0 1
10890: NOT
10891: PUSH
10892: LD_VAR 0 1
10896: PPUSH
10897: CALL_OW 263
10901: PUSH
10902: LD_INT 2
10904: NONEQUAL
10905: OR
10906: IFFALSE 10910
// exit ;
10908: GO 11226
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10910: LD_ADDR_VAR 0 6
10914: PUSH
10915: LD_INT 22
10917: PUSH
10918: LD_VAR 0 1
10922: PPUSH
10923: CALL_OW 255
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PUSH
10932: LD_INT 2
10934: PUSH
10935: LD_INT 30
10937: PUSH
10938: LD_INT 36
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: PUSH
10945: LD_INT 34
10947: PUSH
10948: LD_INT 31
10950: PUSH
10951: EMPTY
10952: LIST
10953: LIST
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: LIST
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PPUSH
10964: CALL_OW 69
10968: ST_TO_ADDR
// if not tmp then
10969: LD_VAR 0 6
10973: NOT
10974: IFFALSE 10978
// exit ;
10976: GO 11226
// result := [ ] ;
10978: LD_ADDR_VAR 0 2
10982: PUSH
10983: EMPTY
10984: ST_TO_ADDR
// for i in tmp do
10985: LD_ADDR_VAR 0 3
10989: PUSH
10990: LD_VAR 0 6
10994: PUSH
10995: FOR_IN
10996: IFFALSE 11067
// begin t := UnitsInside ( i ) ;
10998: LD_ADDR_VAR 0 4
11002: PUSH
11003: LD_VAR 0 3
11007: PPUSH
11008: CALL_OW 313
11012: ST_TO_ADDR
// if t then
11013: LD_VAR 0 4
11017: IFFALSE 11065
// for j in t do
11019: LD_ADDR_VAR 0 7
11023: PUSH
11024: LD_VAR 0 4
11028: PUSH
11029: FOR_IN
11030: IFFALSE 11063
// result := Replace ( result , result + 1 , j ) ;
11032: LD_ADDR_VAR 0 2
11036: PUSH
11037: LD_VAR 0 2
11041: PPUSH
11042: LD_VAR 0 2
11046: PUSH
11047: LD_INT 1
11049: PLUS
11050: PPUSH
11051: LD_VAR 0 7
11055: PPUSH
11056: CALL_OW 1
11060: ST_TO_ADDR
11061: GO 11029
11063: POP
11064: POP
// end ;
11065: GO 10995
11067: POP
11068: POP
// if not result then
11069: LD_VAR 0 2
11073: NOT
11074: IFFALSE 11078
// exit ;
11076: GO 11226
// mech := result [ 1 ] ;
11078: LD_ADDR_VAR 0 5
11082: PUSH
11083: LD_VAR 0 2
11087: PUSH
11088: LD_INT 1
11090: ARRAY
11091: ST_TO_ADDR
// if result > 1 then
11092: LD_VAR 0 2
11096: PUSH
11097: LD_INT 1
11099: GREATER
11100: IFFALSE 11212
// begin for i = 2 to result do
11102: LD_ADDR_VAR 0 3
11106: PUSH
11107: DOUBLE
11108: LD_INT 2
11110: DEC
11111: ST_TO_ADDR
11112: LD_VAR 0 2
11116: PUSH
11117: FOR_TO
11118: IFFALSE 11210
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11120: LD_ADDR_VAR 0 4
11124: PUSH
11125: LD_VAR 0 2
11129: PUSH
11130: LD_VAR 0 3
11134: ARRAY
11135: PPUSH
11136: LD_INT 3
11138: PPUSH
11139: CALL_OW 259
11143: PUSH
11144: LD_VAR 0 2
11148: PUSH
11149: LD_VAR 0 3
11153: ARRAY
11154: PPUSH
11155: CALL_OW 432
11159: MINUS
11160: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11161: LD_VAR 0 4
11165: PUSH
11166: LD_VAR 0 5
11170: PPUSH
11171: LD_INT 3
11173: PPUSH
11174: CALL_OW 259
11178: PUSH
11179: LD_VAR 0 5
11183: PPUSH
11184: CALL_OW 432
11188: MINUS
11189: GREATEREQUAL
11190: IFFALSE 11208
// mech := result [ i ] ;
11192: LD_ADDR_VAR 0 5
11196: PUSH
11197: LD_VAR 0 2
11201: PUSH
11202: LD_VAR 0 3
11206: ARRAY
11207: ST_TO_ADDR
// end ;
11208: GO 11117
11210: POP
11211: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11212: LD_VAR 0 1
11216: PPUSH
11217: LD_VAR 0 5
11221: PPUSH
11222: CALL_OW 135
// end ;
11226: LD_VAR 0 2
11230: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11231: LD_INT 0
11233: PPUSH
11234: PPUSH
11235: PPUSH
11236: PPUSH
11237: PPUSH
11238: PPUSH
11239: PPUSH
11240: PPUSH
11241: PPUSH
11242: PPUSH
11243: PPUSH
11244: PPUSH
11245: PPUSH
// result := [ ] ;
11246: LD_ADDR_VAR 0 7
11250: PUSH
11251: EMPTY
11252: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11253: LD_VAR 0 1
11257: PPUSH
11258: CALL_OW 266
11262: PUSH
11263: LD_INT 0
11265: PUSH
11266: LD_INT 1
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: IN
11273: NOT
11274: IFFALSE 11278
// exit ;
11276: GO 12912
// if name then
11278: LD_VAR 0 3
11282: IFFALSE 11298
// SetBName ( base_dep , name ) ;
11284: LD_VAR 0 1
11288: PPUSH
11289: LD_VAR 0 3
11293: PPUSH
11294: CALL_OW 500
// base := GetBase ( base_dep ) ;
11298: LD_ADDR_VAR 0 15
11302: PUSH
11303: LD_VAR 0 1
11307: PPUSH
11308: CALL_OW 274
11312: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11313: LD_ADDR_VAR 0 16
11317: PUSH
11318: LD_VAR 0 1
11322: PPUSH
11323: CALL_OW 255
11327: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11328: LD_ADDR_VAR 0 17
11332: PUSH
11333: LD_VAR 0 1
11337: PPUSH
11338: CALL_OW 248
11342: ST_TO_ADDR
// if sources then
11343: LD_VAR 0 5
11347: IFFALSE 11394
// for i = 1 to 3 do
11349: LD_ADDR_VAR 0 8
11353: PUSH
11354: DOUBLE
11355: LD_INT 1
11357: DEC
11358: ST_TO_ADDR
11359: LD_INT 3
11361: PUSH
11362: FOR_TO
11363: IFFALSE 11392
// AddResourceType ( base , i , sources [ i ] ) ;
11365: LD_VAR 0 15
11369: PPUSH
11370: LD_VAR 0 8
11374: PPUSH
11375: LD_VAR 0 5
11379: PUSH
11380: LD_VAR 0 8
11384: ARRAY
11385: PPUSH
11386: CALL_OW 276
11390: GO 11362
11392: POP
11393: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11394: LD_ADDR_VAR 0 18
11398: PUSH
11399: LD_VAR 0 15
11403: PPUSH
11404: LD_VAR 0 2
11408: PPUSH
11409: LD_INT 1
11411: PPUSH
11412: CALL 10655 0 3
11416: ST_TO_ADDR
// InitHc ;
11417: CALL_OW 19
// InitUc ;
11421: CALL_OW 18
// uc_side := side ;
11425: LD_ADDR_OWVAR 20
11429: PUSH
11430: LD_VAR 0 16
11434: ST_TO_ADDR
// uc_nation := nation ;
11435: LD_ADDR_OWVAR 21
11439: PUSH
11440: LD_VAR 0 17
11444: ST_TO_ADDR
// if buildings then
11445: LD_VAR 0 18
11449: IFFALSE 12771
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11451: LD_ADDR_VAR 0 19
11455: PUSH
11456: LD_VAR 0 18
11460: PPUSH
11461: LD_INT 2
11463: PUSH
11464: LD_INT 30
11466: PUSH
11467: LD_INT 29
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: LD_INT 30
11476: PUSH
11477: LD_INT 30
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: LIST
11488: PPUSH
11489: CALL_OW 72
11493: ST_TO_ADDR
// if tmp then
11494: LD_VAR 0 19
11498: IFFALSE 11546
// for i in tmp do
11500: LD_ADDR_VAR 0 8
11504: PUSH
11505: LD_VAR 0 19
11509: PUSH
11510: FOR_IN
11511: IFFALSE 11544
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11513: LD_VAR 0 8
11517: PPUSH
11518: CALL_OW 250
11522: PPUSH
11523: LD_VAR 0 8
11527: PPUSH
11528: CALL_OW 251
11532: PPUSH
11533: LD_VAR 0 16
11537: PPUSH
11538: CALL_OW 441
11542: GO 11510
11544: POP
11545: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11546: LD_VAR 0 18
11550: PPUSH
11551: LD_INT 2
11553: PUSH
11554: LD_INT 30
11556: PUSH
11557: LD_INT 32
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: PUSH
11564: LD_INT 30
11566: PUSH
11567: LD_INT 33
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: LIST
11578: PPUSH
11579: CALL_OW 72
11583: IFFALSE 11671
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11585: LD_ADDR_VAR 0 8
11589: PUSH
11590: LD_VAR 0 18
11594: PPUSH
11595: LD_INT 2
11597: PUSH
11598: LD_INT 30
11600: PUSH
11601: LD_INT 32
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: LD_INT 30
11610: PUSH
11611: LD_INT 33
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: LIST
11622: PPUSH
11623: CALL_OW 72
11627: PUSH
11628: FOR_IN
11629: IFFALSE 11669
// begin if not GetBWeapon ( i ) then
11631: LD_VAR 0 8
11635: PPUSH
11636: CALL_OW 269
11640: NOT
11641: IFFALSE 11667
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11643: LD_VAR 0 8
11647: PPUSH
11648: LD_VAR 0 8
11652: PPUSH
11653: LD_VAR 0 2
11657: PPUSH
11658: CALL 12917 0 2
11662: PPUSH
11663: CALL_OW 431
// end ;
11667: GO 11628
11669: POP
11670: POP
// end ; for i = 1 to personel do
11671: LD_ADDR_VAR 0 8
11675: PUSH
11676: DOUBLE
11677: LD_INT 1
11679: DEC
11680: ST_TO_ADDR
11681: LD_VAR 0 6
11685: PUSH
11686: FOR_TO
11687: IFFALSE 12751
// begin if i > 4 then
11689: LD_VAR 0 8
11693: PUSH
11694: LD_INT 4
11696: GREATER
11697: IFFALSE 11701
// break ;
11699: GO 12751
// case i of 1 :
11701: LD_VAR 0 8
11705: PUSH
11706: LD_INT 1
11708: DOUBLE
11709: EQUAL
11710: IFTRUE 11714
11712: GO 11794
11714: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11715: LD_ADDR_VAR 0 12
11719: PUSH
11720: LD_VAR 0 18
11724: PPUSH
11725: LD_INT 22
11727: PUSH
11728: LD_VAR 0 16
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: PUSH
11737: LD_INT 58
11739: PUSH
11740: EMPTY
11741: LIST
11742: PUSH
11743: LD_INT 2
11745: PUSH
11746: LD_INT 30
11748: PUSH
11749: LD_INT 32
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: PUSH
11756: LD_INT 30
11758: PUSH
11759: LD_INT 4
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: PUSH
11766: LD_INT 30
11768: PUSH
11769: LD_INT 5
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: LIST
11786: PPUSH
11787: CALL_OW 72
11791: ST_TO_ADDR
11792: GO 12016
11794: LD_INT 2
11796: DOUBLE
11797: EQUAL
11798: IFTRUE 11802
11800: GO 11864
11802: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11803: LD_ADDR_VAR 0 12
11807: PUSH
11808: LD_VAR 0 18
11812: PPUSH
11813: LD_INT 22
11815: PUSH
11816: LD_VAR 0 16
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: LD_INT 2
11827: PUSH
11828: LD_INT 30
11830: PUSH
11831: LD_INT 0
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PUSH
11838: LD_INT 30
11840: PUSH
11841: LD_INT 1
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: LIST
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: PPUSH
11857: CALL_OW 72
11861: ST_TO_ADDR
11862: GO 12016
11864: LD_INT 3
11866: DOUBLE
11867: EQUAL
11868: IFTRUE 11872
11870: GO 11934
11872: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11873: LD_ADDR_VAR 0 12
11877: PUSH
11878: LD_VAR 0 18
11882: PPUSH
11883: LD_INT 22
11885: PUSH
11886: LD_VAR 0 16
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: LD_INT 2
11897: PUSH
11898: LD_INT 30
11900: PUSH
11901: LD_INT 2
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: PUSH
11908: LD_INT 30
11910: PUSH
11911: LD_INT 3
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: LIST
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PPUSH
11927: CALL_OW 72
11931: ST_TO_ADDR
11932: GO 12016
11934: LD_INT 4
11936: DOUBLE
11937: EQUAL
11938: IFTRUE 11942
11940: GO 12015
11942: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11943: LD_ADDR_VAR 0 12
11947: PUSH
11948: LD_VAR 0 18
11952: PPUSH
11953: LD_INT 22
11955: PUSH
11956: LD_VAR 0 16
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PUSH
11965: LD_INT 2
11967: PUSH
11968: LD_INT 30
11970: PUSH
11971: LD_INT 6
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: PUSH
11978: LD_INT 30
11980: PUSH
11981: LD_INT 7
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PUSH
11988: LD_INT 30
11990: PUSH
11991: LD_INT 8
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PPUSH
12008: CALL_OW 72
12012: ST_TO_ADDR
12013: GO 12016
12015: POP
// if i = 1 then
12016: LD_VAR 0 8
12020: PUSH
12021: LD_INT 1
12023: EQUAL
12024: IFFALSE 12135
// begin tmp := [ ] ;
12026: LD_ADDR_VAR 0 19
12030: PUSH
12031: EMPTY
12032: ST_TO_ADDR
// for j in f do
12033: LD_ADDR_VAR 0 9
12037: PUSH
12038: LD_VAR 0 12
12042: PUSH
12043: FOR_IN
12044: IFFALSE 12117
// if GetBType ( j ) = b_bunker then
12046: LD_VAR 0 9
12050: PPUSH
12051: CALL_OW 266
12055: PUSH
12056: LD_INT 32
12058: EQUAL
12059: IFFALSE 12086
// tmp := Insert ( tmp , 1 , j ) else
12061: LD_ADDR_VAR 0 19
12065: PUSH
12066: LD_VAR 0 19
12070: PPUSH
12071: LD_INT 1
12073: PPUSH
12074: LD_VAR 0 9
12078: PPUSH
12079: CALL_OW 2
12083: ST_TO_ADDR
12084: GO 12115
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12086: LD_ADDR_VAR 0 19
12090: PUSH
12091: LD_VAR 0 19
12095: PPUSH
12096: LD_VAR 0 19
12100: PUSH
12101: LD_INT 1
12103: PLUS
12104: PPUSH
12105: LD_VAR 0 9
12109: PPUSH
12110: CALL_OW 2
12114: ST_TO_ADDR
12115: GO 12043
12117: POP
12118: POP
// if tmp then
12119: LD_VAR 0 19
12123: IFFALSE 12135
// f := tmp ;
12125: LD_ADDR_VAR 0 12
12129: PUSH
12130: LD_VAR 0 19
12134: ST_TO_ADDR
// end ; x := personel [ i ] ;
12135: LD_ADDR_VAR 0 13
12139: PUSH
12140: LD_VAR 0 6
12144: PUSH
12145: LD_VAR 0 8
12149: ARRAY
12150: ST_TO_ADDR
// if x = - 1 then
12151: LD_VAR 0 13
12155: PUSH
12156: LD_INT 1
12158: NEG
12159: EQUAL
12160: IFFALSE 12369
// begin for j in f do
12162: LD_ADDR_VAR 0 9
12166: PUSH
12167: LD_VAR 0 12
12171: PUSH
12172: FOR_IN
12173: IFFALSE 12365
// repeat InitHc ;
12175: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12179: LD_VAR 0 9
12183: PPUSH
12184: CALL_OW 266
12188: PUSH
12189: LD_INT 5
12191: EQUAL
12192: IFFALSE 12262
// begin if UnitsInside ( j ) < 3 then
12194: LD_VAR 0 9
12198: PPUSH
12199: CALL_OW 313
12203: PUSH
12204: LD_INT 3
12206: LESS
12207: IFFALSE 12243
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12209: LD_INT 0
12211: PPUSH
12212: LD_INT 5
12214: PUSH
12215: LD_INT 8
12217: PUSH
12218: LD_INT 9
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: LIST
12225: PUSH
12226: LD_VAR 0 17
12230: ARRAY
12231: PPUSH
12232: LD_VAR 0 4
12236: PPUSH
12237: CALL_OW 380
12241: GO 12260
// PrepareHuman ( false , i , skill ) ;
12243: LD_INT 0
12245: PPUSH
12246: LD_VAR 0 8
12250: PPUSH
12251: LD_VAR 0 4
12255: PPUSH
12256: CALL_OW 380
// end else
12260: GO 12279
// PrepareHuman ( false , i , skill ) ;
12262: LD_INT 0
12264: PPUSH
12265: LD_VAR 0 8
12269: PPUSH
12270: LD_VAR 0 4
12274: PPUSH
12275: CALL_OW 380
// un := CreateHuman ;
12279: LD_ADDR_VAR 0 14
12283: PUSH
12284: CALL_OW 44
12288: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12289: LD_ADDR_VAR 0 7
12293: PUSH
12294: LD_VAR 0 7
12298: PPUSH
12299: LD_INT 1
12301: PPUSH
12302: LD_VAR 0 14
12306: PPUSH
12307: CALL_OW 2
12311: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12312: LD_VAR 0 14
12316: PPUSH
12317: LD_VAR 0 9
12321: PPUSH
12322: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12326: LD_VAR 0 9
12330: PPUSH
12331: CALL_OW 313
12335: PUSH
12336: LD_INT 6
12338: EQUAL
12339: PUSH
12340: LD_VAR 0 9
12344: PPUSH
12345: CALL_OW 266
12349: PUSH
12350: LD_INT 32
12352: PUSH
12353: LD_INT 31
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: IN
12360: OR
12361: IFFALSE 12175
12363: GO 12172
12365: POP
12366: POP
// end else
12367: GO 12749
// for j = 1 to x do
12369: LD_ADDR_VAR 0 9
12373: PUSH
12374: DOUBLE
12375: LD_INT 1
12377: DEC
12378: ST_TO_ADDR
12379: LD_VAR 0 13
12383: PUSH
12384: FOR_TO
12385: IFFALSE 12747
// begin InitHc ;
12387: CALL_OW 19
// if not f then
12391: LD_VAR 0 12
12395: NOT
12396: IFFALSE 12485
// begin PrepareHuman ( false , i , skill ) ;
12398: LD_INT 0
12400: PPUSH
12401: LD_VAR 0 8
12405: PPUSH
12406: LD_VAR 0 4
12410: PPUSH
12411: CALL_OW 380
// un := CreateHuman ;
12415: LD_ADDR_VAR 0 14
12419: PUSH
12420: CALL_OW 44
12424: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12425: LD_ADDR_VAR 0 7
12429: PUSH
12430: LD_VAR 0 7
12434: PPUSH
12435: LD_INT 1
12437: PPUSH
12438: LD_VAR 0 14
12442: PPUSH
12443: CALL_OW 2
12447: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12448: LD_VAR 0 14
12452: PPUSH
12453: LD_VAR 0 1
12457: PPUSH
12458: CALL_OW 250
12462: PPUSH
12463: LD_VAR 0 1
12467: PPUSH
12468: CALL_OW 251
12472: PPUSH
12473: LD_INT 10
12475: PPUSH
12476: LD_INT 0
12478: PPUSH
12479: CALL_OW 50
// continue ;
12483: GO 12384
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12485: LD_VAR 0 12
12489: PUSH
12490: LD_INT 1
12492: ARRAY
12493: PPUSH
12494: CALL_OW 313
12498: PUSH
12499: LD_VAR 0 12
12503: PUSH
12504: LD_INT 1
12506: ARRAY
12507: PPUSH
12508: CALL_OW 266
12512: PUSH
12513: LD_INT 32
12515: PUSH
12516: LD_INT 31
12518: PUSH
12519: EMPTY
12520: LIST
12521: LIST
12522: IN
12523: AND
12524: PUSH
12525: LD_VAR 0 12
12529: PUSH
12530: LD_INT 1
12532: ARRAY
12533: PPUSH
12534: CALL_OW 313
12538: PUSH
12539: LD_INT 6
12541: EQUAL
12542: OR
12543: IFFALSE 12563
// f := Delete ( f , 1 ) ;
12545: LD_ADDR_VAR 0 12
12549: PUSH
12550: LD_VAR 0 12
12554: PPUSH
12555: LD_INT 1
12557: PPUSH
12558: CALL_OW 3
12562: ST_TO_ADDR
// if not f then
12563: LD_VAR 0 12
12567: NOT
12568: IFFALSE 12586
// begin x := x + 2 ;
12570: LD_ADDR_VAR 0 13
12574: PUSH
12575: LD_VAR 0 13
12579: PUSH
12580: LD_INT 2
12582: PLUS
12583: ST_TO_ADDR
// continue ;
12584: GO 12384
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12586: LD_VAR 0 12
12590: PUSH
12591: LD_INT 1
12593: ARRAY
12594: PPUSH
12595: CALL_OW 266
12599: PUSH
12600: LD_INT 5
12602: EQUAL
12603: IFFALSE 12677
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12605: LD_VAR 0 12
12609: PUSH
12610: LD_INT 1
12612: ARRAY
12613: PPUSH
12614: CALL_OW 313
12618: PUSH
12619: LD_INT 3
12621: LESS
12622: IFFALSE 12658
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12624: LD_INT 0
12626: PPUSH
12627: LD_INT 5
12629: PUSH
12630: LD_INT 8
12632: PUSH
12633: LD_INT 9
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: LIST
12640: PUSH
12641: LD_VAR 0 17
12645: ARRAY
12646: PPUSH
12647: LD_VAR 0 4
12651: PPUSH
12652: CALL_OW 380
12656: GO 12675
// PrepareHuman ( false , i , skill ) ;
12658: LD_INT 0
12660: PPUSH
12661: LD_VAR 0 8
12665: PPUSH
12666: LD_VAR 0 4
12670: PPUSH
12671: CALL_OW 380
// end else
12675: GO 12694
// PrepareHuman ( false , i , skill ) ;
12677: LD_INT 0
12679: PPUSH
12680: LD_VAR 0 8
12684: PPUSH
12685: LD_VAR 0 4
12689: PPUSH
12690: CALL_OW 380
// un := CreateHuman ;
12694: LD_ADDR_VAR 0 14
12698: PUSH
12699: CALL_OW 44
12703: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12704: LD_ADDR_VAR 0 7
12708: PUSH
12709: LD_VAR 0 7
12713: PPUSH
12714: LD_INT 1
12716: PPUSH
12717: LD_VAR 0 14
12721: PPUSH
12722: CALL_OW 2
12726: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12727: LD_VAR 0 14
12731: PPUSH
12732: LD_VAR 0 12
12736: PUSH
12737: LD_INT 1
12739: ARRAY
12740: PPUSH
12741: CALL_OW 52
// end ;
12745: GO 12384
12747: POP
12748: POP
// end ;
12749: GO 11686
12751: POP
12752: POP
// result := result ^ buildings ;
12753: LD_ADDR_VAR 0 7
12757: PUSH
12758: LD_VAR 0 7
12762: PUSH
12763: LD_VAR 0 18
12767: ADD
12768: ST_TO_ADDR
// end else
12769: GO 12912
// begin for i = 1 to personel do
12771: LD_ADDR_VAR 0 8
12775: PUSH
12776: DOUBLE
12777: LD_INT 1
12779: DEC
12780: ST_TO_ADDR
12781: LD_VAR 0 6
12785: PUSH
12786: FOR_TO
12787: IFFALSE 12910
// begin if i > 4 then
12789: LD_VAR 0 8
12793: PUSH
12794: LD_INT 4
12796: GREATER
12797: IFFALSE 12801
// break ;
12799: GO 12910
// x := personel [ i ] ;
12801: LD_ADDR_VAR 0 13
12805: PUSH
12806: LD_VAR 0 6
12810: PUSH
12811: LD_VAR 0 8
12815: ARRAY
12816: ST_TO_ADDR
// if x = - 1 then
12817: LD_VAR 0 13
12821: PUSH
12822: LD_INT 1
12824: NEG
12825: EQUAL
12826: IFFALSE 12830
// continue ;
12828: GO 12786
// PrepareHuman ( false , i , skill ) ;
12830: LD_INT 0
12832: PPUSH
12833: LD_VAR 0 8
12837: PPUSH
12838: LD_VAR 0 4
12842: PPUSH
12843: CALL_OW 380
// un := CreateHuman ;
12847: LD_ADDR_VAR 0 14
12851: PUSH
12852: CALL_OW 44
12856: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12857: LD_VAR 0 14
12861: PPUSH
12862: LD_VAR 0 1
12866: PPUSH
12867: CALL_OW 250
12871: PPUSH
12872: LD_VAR 0 1
12876: PPUSH
12877: CALL_OW 251
12881: PPUSH
12882: LD_INT 10
12884: PPUSH
12885: LD_INT 0
12887: PPUSH
12888: CALL_OW 50
// result := result ^ un ;
12892: LD_ADDR_VAR 0 7
12896: PUSH
12897: LD_VAR 0 7
12901: PUSH
12902: LD_VAR 0 14
12906: ADD
12907: ST_TO_ADDR
// end ;
12908: GO 12786
12910: POP
12911: POP
// end ; end ;
12912: LD_VAR 0 7
12916: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12917: LD_INT 0
12919: PPUSH
12920: PPUSH
12921: PPUSH
12922: PPUSH
12923: PPUSH
12924: PPUSH
12925: PPUSH
12926: PPUSH
12927: PPUSH
12928: PPUSH
12929: PPUSH
12930: PPUSH
12931: PPUSH
12932: PPUSH
12933: PPUSH
12934: PPUSH
// result := false ;
12935: LD_ADDR_VAR 0 3
12939: PUSH
12940: LD_INT 0
12942: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12943: LD_VAR 0 1
12947: NOT
12948: PUSH
12949: LD_VAR 0 1
12953: PPUSH
12954: CALL_OW 266
12958: PUSH
12959: LD_INT 32
12961: PUSH
12962: LD_INT 33
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: IN
12969: NOT
12970: OR
12971: IFFALSE 12975
// exit ;
12973: GO 14084
// nat := GetNation ( tower ) ;
12975: LD_ADDR_VAR 0 12
12979: PUSH
12980: LD_VAR 0 1
12984: PPUSH
12985: CALL_OW 248
12989: ST_TO_ADDR
// side := GetSide ( tower ) ;
12990: LD_ADDR_VAR 0 16
12994: PUSH
12995: LD_VAR 0 1
12999: PPUSH
13000: CALL_OW 255
13004: ST_TO_ADDR
// x := GetX ( tower ) ;
13005: LD_ADDR_VAR 0 10
13009: PUSH
13010: LD_VAR 0 1
13014: PPUSH
13015: CALL_OW 250
13019: ST_TO_ADDR
// y := GetY ( tower ) ;
13020: LD_ADDR_VAR 0 11
13024: PUSH
13025: LD_VAR 0 1
13029: PPUSH
13030: CALL_OW 251
13034: ST_TO_ADDR
// if not x or not y then
13035: LD_VAR 0 10
13039: NOT
13040: PUSH
13041: LD_VAR 0 11
13045: NOT
13046: OR
13047: IFFALSE 13051
// exit ;
13049: GO 14084
// weapon := 0 ;
13051: LD_ADDR_VAR 0 18
13055: PUSH
13056: LD_INT 0
13058: ST_TO_ADDR
// fac_list := [ ] ;
13059: LD_ADDR_VAR 0 17
13063: PUSH
13064: EMPTY
13065: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13066: LD_ADDR_VAR 0 6
13070: PUSH
13071: LD_VAR 0 1
13075: PPUSH
13076: CALL_OW 274
13080: PPUSH
13081: LD_VAR 0 2
13085: PPUSH
13086: LD_INT 0
13088: PPUSH
13089: CALL 10655 0 3
13093: PPUSH
13094: LD_INT 30
13096: PUSH
13097: LD_INT 3
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PPUSH
13104: CALL_OW 72
13108: ST_TO_ADDR
// if not factories then
13109: LD_VAR 0 6
13113: NOT
13114: IFFALSE 13118
// exit ;
13116: GO 14084
// for i in factories do
13118: LD_ADDR_VAR 0 8
13122: PUSH
13123: LD_VAR 0 6
13127: PUSH
13128: FOR_IN
13129: IFFALSE 13154
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13131: LD_ADDR_VAR 0 17
13135: PUSH
13136: LD_VAR 0 17
13140: PUSH
13141: LD_VAR 0 8
13145: PPUSH
13146: CALL_OW 478
13150: UNION
13151: ST_TO_ADDR
13152: GO 13128
13154: POP
13155: POP
// if not fac_list then
13156: LD_VAR 0 17
13160: NOT
13161: IFFALSE 13165
// exit ;
13163: GO 14084
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13165: LD_ADDR_VAR 0 5
13169: PUSH
13170: LD_INT 4
13172: PUSH
13173: LD_INT 5
13175: PUSH
13176: LD_INT 9
13178: PUSH
13179: LD_INT 10
13181: PUSH
13182: LD_INT 6
13184: PUSH
13185: LD_INT 7
13187: PUSH
13188: LD_INT 11
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: PUSH
13200: LD_INT 27
13202: PUSH
13203: LD_INT 28
13205: PUSH
13206: LD_INT 26
13208: PUSH
13209: LD_INT 30
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: PUSH
13218: LD_INT 43
13220: PUSH
13221: LD_INT 44
13223: PUSH
13224: LD_INT 46
13226: PUSH
13227: LD_INT 45
13229: PUSH
13230: LD_INT 47
13232: PUSH
13233: LD_INT 49
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: LIST
13248: PUSH
13249: LD_VAR 0 12
13253: ARRAY
13254: ST_TO_ADDR
// list := list isect fac_list ;
13255: LD_ADDR_VAR 0 5
13259: PUSH
13260: LD_VAR 0 5
13264: PUSH
13265: LD_VAR 0 17
13269: ISECT
13270: ST_TO_ADDR
// if not list then
13271: LD_VAR 0 5
13275: NOT
13276: IFFALSE 13280
// exit ;
13278: GO 14084
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13280: LD_VAR 0 12
13284: PUSH
13285: LD_INT 3
13287: EQUAL
13288: PUSH
13289: LD_INT 49
13291: PUSH
13292: LD_VAR 0 5
13296: IN
13297: AND
13298: PUSH
13299: LD_INT 31
13301: PPUSH
13302: LD_VAR 0 16
13306: PPUSH
13307: CALL_OW 321
13311: PUSH
13312: LD_INT 2
13314: EQUAL
13315: AND
13316: IFFALSE 13376
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13318: LD_INT 22
13320: PUSH
13321: LD_VAR 0 16
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: PUSH
13330: LD_INT 35
13332: PUSH
13333: LD_INT 49
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: PUSH
13340: LD_INT 91
13342: PUSH
13343: LD_VAR 0 1
13347: PUSH
13348: LD_INT 10
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: LIST
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: LIST
13360: PPUSH
13361: CALL_OW 69
13365: NOT
13366: IFFALSE 13376
// weapon := ru_time_lapser ;
13368: LD_ADDR_VAR 0 18
13372: PUSH
13373: LD_INT 49
13375: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13376: LD_VAR 0 12
13380: PUSH
13381: LD_INT 1
13383: PUSH
13384: LD_INT 2
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: IN
13391: PUSH
13392: LD_INT 11
13394: PUSH
13395: LD_VAR 0 5
13399: IN
13400: PUSH
13401: LD_INT 30
13403: PUSH
13404: LD_VAR 0 5
13408: IN
13409: OR
13410: AND
13411: PUSH
13412: LD_INT 6
13414: PPUSH
13415: LD_VAR 0 16
13419: PPUSH
13420: CALL_OW 321
13424: PUSH
13425: LD_INT 2
13427: EQUAL
13428: AND
13429: IFFALSE 13594
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13431: LD_INT 22
13433: PUSH
13434: LD_VAR 0 16
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PUSH
13443: LD_INT 2
13445: PUSH
13446: LD_INT 35
13448: PUSH
13449: LD_INT 11
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: LD_INT 35
13458: PUSH
13459: LD_INT 30
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: LIST
13470: PUSH
13471: LD_INT 91
13473: PUSH
13474: LD_VAR 0 1
13478: PUSH
13479: LD_INT 18
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: LIST
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: LIST
13491: PPUSH
13492: CALL_OW 69
13496: NOT
13497: PUSH
13498: LD_INT 22
13500: PUSH
13501: LD_VAR 0 16
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PUSH
13510: LD_INT 2
13512: PUSH
13513: LD_INT 30
13515: PUSH
13516: LD_INT 32
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: PUSH
13523: LD_INT 30
13525: PUSH
13526: LD_INT 33
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 91
13540: PUSH
13541: LD_VAR 0 1
13545: PUSH
13546: LD_INT 12
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: LIST
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: LIST
13558: PUSH
13559: EMPTY
13560: LIST
13561: PPUSH
13562: CALL_OW 69
13566: PUSH
13567: LD_INT 2
13569: GREATER
13570: AND
13571: IFFALSE 13594
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13573: LD_ADDR_VAR 0 18
13577: PUSH
13578: LD_INT 11
13580: PUSH
13581: LD_INT 30
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: LD_VAR 0 12
13592: ARRAY
13593: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13594: LD_VAR 0 18
13598: NOT
13599: PUSH
13600: LD_INT 40
13602: PPUSH
13603: LD_VAR 0 16
13607: PPUSH
13608: CALL_OW 321
13612: PUSH
13613: LD_INT 2
13615: EQUAL
13616: AND
13617: PUSH
13618: LD_INT 7
13620: PUSH
13621: LD_VAR 0 5
13625: IN
13626: PUSH
13627: LD_INT 28
13629: PUSH
13630: LD_VAR 0 5
13634: IN
13635: OR
13636: PUSH
13637: LD_INT 45
13639: PUSH
13640: LD_VAR 0 5
13644: IN
13645: OR
13646: AND
13647: IFFALSE 13901
// begin hex := GetHexInfo ( x , y ) ;
13649: LD_ADDR_VAR 0 4
13653: PUSH
13654: LD_VAR 0 10
13658: PPUSH
13659: LD_VAR 0 11
13663: PPUSH
13664: CALL_OW 546
13668: ST_TO_ADDR
// if hex [ 1 ] then
13669: LD_VAR 0 4
13673: PUSH
13674: LD_INT 1
13676: ARRAY
13677: IFFALSE 13681
// exit ;
13679: GO 14084
// height := hex [ 2 ] ;
13681: LD_ADDR_VAR 0 15
13685: PUSH
13686: LD_VAR 0 4
13690: PUSH
13691: LD_INT 2
13693: ARRAY
13694: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13695: LD_ADDR_VAR 0 14
13699: PUSH
13700: LD_INT 0
13702: PUSH
13703: LD_INT 2
13705: PUSH
13706: LD_INT 3
13708: PUSH
13709: LD_INT 5
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: ST_TO_ADDR
// for i in tmp do
13718: LD_ADDR_VAR 0 8
13722: PUSH
13723: LD_VAR 0 14
13727: PUSH
13728: FOR_IN
13729: IFFALSE 13899
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13731: LD_ADDR_VAR 0 9
13735: PUSH
13736: LD_VAR 0 10
13740: PPUSH
13741: LD_VAR 0 8
13745: PPUSH
13746: LD_INT 5
13748: PPUSH
13749: CALL_OW 272
13753: PUSH
13754: LD_VAR 0 11
13758: PPUSH
13759: LD_VAR 0 8
13763: PPUSH
13764: LD_INT 5
13766: PPUSH
13767: CALL_OW 273
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13776: LD_VAR 0 9
13780: PUSH
13781: LD_INT 1
13783: ARRAY
13784: PPUSH
13785: LD_VAR 0 9
13789: PUSH
13790: LD_INT 2
13792: ARRAY
13793: PPUSH
13794: CALL_OW 488
13798: IFFALSE 13897
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13800: LD_ADDR_VAR 0 4
13804: PUSH
13805: LD_VAR 0 9
13809: PUSH
13810: LD_INT 1
13812: ARRAY
13813: PPUSH
13814: LD_VAR 0 9
13818: PUSH
13819: LD_INT 2
13821: ARRAY
13822: PPUSH
13823: CALL_OW 546
13827: ST_TO_ADDR
// if hex [ 1 ] then
13828: LD_VAR 0 4
13832: PUSH
13833: LD_INT 1
13835: ARRAY
13836: IFFALSE 13840
// continue ;
13838: GO 13728
// h := hex [ 2 ] ;
13840: LD_ADDR_VAR 0 13
13844: PUSH
13845: LD_VAR 0 4
13849: PUSH
13850: LD_INT 2
13852: ARRAY
13853: ST_TO_ADDR
// if h + 7 < height then
13854: LD_VAR 0 13
13858: PUSH
13859: LD_INT 7
13861: PLUS
13862: PUSH
13863: LD_VAR 0 15
13867: LESS
13868: IFFALSE 13897
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13870: LD_ADDR_VAR 0 18
13874: PUSH
13875: LD_INT 7
13877: PUSH
13878: LD_INT 28
13880: PUSH
13881: LD_INT 45
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: LIST
13888: PUSH
13889: LD_VAR 0 12
13893: ARRAY
13894: ST_TO_ADDR
// break ;
13895: GO 13899
// end ; end ; end ;
13897: GO 13728
13899: POP
13900: POP
// end ; if not weapon then
13901: LD_VAR 0 18
13905: NOT
13906: IFFALSE 13966
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13908: LD_ADDR_VAR 0 5
13912: PUSH
13913: LD_VAR 0 5
13917: PUSH
13918: LD_INT 11
13920: PUSH
13921: LD_INT 30
13923: PUSH
13924: LD_INT 49
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: LIST
13931: DIFF
13932: ST_TO_ADDR
// if not list then
13933: LD_VAR 0 5
13937: NOT
13938: IFFALSE 13942
// exit ;
13940: GO 14084
// weapon := list [ rand ( 1 , list ) ] ;
13942: LD_ADDR_VAR 0 18
13946: PUSH
13947: LD_VAR 0 5
13951: PUSH
13952: LD_INT 1
13954: PPUSH
13955: LD_VAR 0 5
13959: PPUSH
13960: CALL_OW 12
13964: ARRAY
13965: ST_TO_ADDR
// end ; if weapon then
13966: LD_VAR 0 18
13970: IFFALSE 14084
// begin tmp := CostOfWeapon ( weapon ) ;
13972: LD_ADDR_VAR 0 14
13976: PUSH
13977: LD_VAR 0 18
13981: PPUSH
13982: CALL_OW 451
13986: ST_TO_ADDR
// j := GetBase ( tower ) ;
13987: LD_ADDR_VAR 0 9
13991: PUSH
13992: LD_VAR 0 1
13996: PPUSH
13997: CALL_OW 274
14001: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14002: LD_VAR 0 9
14006: PPUSH
14007: LD_INT 1
14009: PPUSH
14010: CALL_OW 275
14014: PUSH
14015: LD_VAR 0 14
14019: PUSH
14020: LD_INT 1
14022: ARRAY
14023: GREATEREQUAL
14024: PUSH
14025: LD_VAR 0 9
14029: PPUSH
14030: LD_INT 2
14032: PPUSH
14033: CALL_OW 275
14037: PUSH
14038: LD_VAR 0 14
14042: PUSH
14043: LD_INT 2
14045: ARRAY
14046: GREATEREQUAL
14047: AND
14048: PUSH
14049: LD_VAR 0 9
14053: PPUSH
14054: LD_INT 3
14056: PPUSH
14057: CALL_OW 275
14061: PUSH
14062: LD_VAR 0 14
14066: PUSH
14067: LD_INT 3
14069: ARRAY
14070: GREATEREQUAL
14071: AND
14072: IFFALSE 14084
// result := weapon ;
14074: LD_ADDR_VAR 0 3
14078: PUSH
14079: LD_VAR 0 18
14083: ST_TO_ADDR
// end ; end ;
14084: LD_VAR 0 3
14088: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14089: LD_INT 0
14091: PPUSH
14092: PPUSH
// result := true ;
14093: LD_ADDR_VAR 0 3
14097: PUSH
14098: LD_INT 1
14100: ST_TO_ADDR
// if array1 = array2 then
14101: LD_VAR 0 1
14105: PUSH
14106: LD_VAR 0 2
14110: EQUAL
14111: IFFALSE 14171
// begin for i = 1 to array1 do
14113: LD_ADDR_VAR 0 4
14117: PUSH
14118: DOUBLE
14119: LD_INT 1
14121: DEC
14122: ST_TO_ADDR
14123: LD_VAR 0 1
14127: PUSH
14128: FOR_TO
14129: IFFALSE 14167
// if array1 [ i ] <> array2 [ i ] then
14131: LD_VAR 0 1
14135: PUSH
14136: LD_VAR 0 4
14140: ARRAY
14141: PUSH
14142: LD_VAR 0 2
14146: PUSH
14147: LD_VAR 0 4
14151: ARRAY
14152: NONEQUAL
14153: IFFALSE 14165
// begin result := false ;
14155: LD_ADDR_VAR 0 3
14159: PUSH
14160: LD_INT 0
14162: ST_TO_ADDR
// break ;
14163: GO 14167
// end ;
14165: GO 14128
14167: POP
14168: POP
// end else
14169: GO 14179
// result := false ;
14171: LD_ADDR_VAR 0 3
14175: PUSH
14176: LD_INT 0
14178: ST_TO_ADDR
// end ;
14179: LD_VAR 0 3
14183: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14184: LD_INT 0
14186: PPUSH
14187: PPUSH
// if not array1 or not array2 then
14188: LD_VAR 0 1
14192: NOT
14193: PUSH
14194: LD_VAR 0 2
14198: NOT
14199: OR
14200: IFFALSE 14204
// exit ;
14202: GO 14268
// result := true ;
14204: LD_ADDR_VAR 0 3
14208: PUSH
14209: LD_INT 1
14211: ST_TO_ADDR
// for i = 1 to array1 do
14212: LD_ADDR_VAR 0 4
14216: PUSH
14217: DOUBLE
14218: LD_INT 1
14220: DEC
14221: ST_TO_ADDR
14222: LD_VAR 0 1
14226: PUSH
14227: FOR_TO
14228: IFFALSE 14266
// if array1 [ i ] <> array2 [ i ] then
14230: LD_VAR 0 1
14234: PUSH
14235: LD_VAR 0 4
14239: ARRAY
14240: PUSH
14241: LD_VAR 0 2
14245: PUSH
14246: LD_VAR 0 4
14250: ARRAY
14251: NONEQUAL
14252: IFFALSE 14264
// begin result := false ;
14254: LD_ADDR_VAR 0 3
14258: PUSH
14259: LD_INT 0
14261: ST_TO_ADDR
// break ;
14262: GO 14266
// end ;
14264: GO 14227
14266: POP
14267: POP
// end ;
14268: LD_VAR 0 3
14272: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14273: LD_INT 0
14275: PPUSH
14276: PPUSH
14277: PPUSH
// pom := GetBase ( fac ) ;
14278: LD_ADDR_VAR 0 5
14282: PUSH
14283: LD_VAR 0 1
14287: PPUSH
14288: CALL_OW 274
14292: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14293: LD_ADDR_VAR 0 4
14297: PUSH
14298: LD_VAR 0 2
14302: PUSH
14303: LD_INT 1
14305: ARRAY
14306: PPUSH
14307: LD_VAR 0 2
14311: PUSH
14312: LD_INT 2
14314: ARRAY
14315: PPUSH
14316: LD_VAR 0 2
14320: PUSH
14321: LD_INT 3
14323: ARRAY
14324: PPUSH
14325: LD_VAR 0 2
14329: PUSH
14330: LD_INT 4
14332: ARRAY
14333: PPUSH
14334: CALL_OW 449
14338: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14339: LD_ADDR_VAR 0 3
14343: PUSH
14344: LD_VAR 0 5
14348: PPUSH
14349: LD_INT 1
14351: PPUSH
14352: CALL_OW 275
14356: PUSH
14357: LD_VAR 0 4
14361: PUSH
14362: LD_INT 1
14364: ARRAY
14365: GREATEREQUAL
14366: PUSH
14367: LD_VAR 0 5
14371: PPUSH
14372: LD_INT 2
14374: PPUSH
14375: CALL_OW 275
14379: PUSH
14380: LD_VAR 0 4
14384: PUSH
14385: LD_INT 2
14387: ARRAY
14388: GREATEREQUAL
14389: AND
14390: PUSH
14391: LD_VAR 0 5
14395: PPUSH
14396: LD_INT 3
14398: PPUSH
14399: CALL_OW 275
14403: PUSH
14404: LD_VAR 0 4
14408: PUSH
14409: LD_INT 3
14411: ARRAY
14412: GREATEREQUAL
14413: AND
14414: ST_TO_ADDR
// end ;
14415: LD_VAR 0 3
14419: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14420: LD_INT 0
14422: PPUSH
14423: PPUSH
14424: PPUSH
14425: PPUSH
// pom := GetBase ( building ) ;
14426: LD_ADDR_VAR 0 3
14430: PUSH
14431: LD_VAR 0 1
14435: PPUSH
14436: CALL_OW 274
14440: ST_TO_ADDR
// if not pom then
14441: LD_VAR 0 3
14445: NOT
14446: IFFALSE 14450
// exit ;
14448: GO 14620
// btype := GetBType ( building ) ;
14450: LD_ADDR_VAR 0 5
14454: PUSH
14455: LD_VAR 0 1
14459: PPUSH
14460: CALL_OW 266
14464: ST_TO_ADDR
// if btype = b_armoury then
14465: LD_VAR 0 5
14469: PUSH
14470: LD_INT 4
14472: EQUAL
14473: IFFALSE 14483
// btype := b_barracks ;
14475: LD_ADDR_VAR 0 5
14479: PUSH
14480: LD_INT 5
14482: ST_TO_ADDR
// if btype = b_depot then
14483: LD_VAR 0 5
14487: PUSH
14488: LD_INT 0
14490: EQUAL
14491: IFFALSE 14501
// btype := b_warehouse ;
14493: LD_ADDR_VAR 0 5
14497: PUSH
14498: LD_INT 1
14500: ST_TO_ADDR
// if btype = b_workshop then
14501: LD_VAR 0 5
14505: PUSH
14506: LD_INT 2
14508: EQUAL
14509: IFFALSE 14519
// btype := b_factory ;
14511: LD_ADDR_VAR 0 5
14515: PUSH
14516: LD_INT 3
14518: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14519: LD_ADDR_VAR 0 4
14523: PUSH
14524: LD_VAR 0 5
14528: PPUSH
14529: LD_VAR 0 1
14533: PPUSH
14534: CALL_OW 248
14538: PPUSH
14539: CALL_OW 450
14543: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14544: LD_ADDR_VAR 0 2
14548: PUSH
14549: LD_VAR 0 3
14553: PPUSH
14554: LD_INT 1
14556: PPUSH
14557: CALL_OW 275
14561: PUSH
14562: LD_VAR 0 4
14566: PUSH
14567: LD_INT 1
14569: ARRAY
14570: GREATEREQUAL
14571: PUSH
14572: LD_VAR 0 3
14576: PPUSH
14577: LD_INT 2
14579: PPUSH
14580: CALL_OW 275
14584: PUSH
14585: LD_VAR 0 4
14589: PUSH
14590: LD_INT 2
14592: ARRAY
14593: GREATEREQUAL
14594: AND
14595: PUSH
14596: LD_VAR 0 3
14600: PPUSH
14601: LD_INT 3
14603: PPUSH
14604: CALL_OW 275
14608: PUSH
14609: LD_VAR 0 4
14613: PUSH
14614: LD_INT 3
14616: ARRAY
14617: GREATEREQUAL
14618: AND
14619: ST_TO_ADDR
// end ;
14620: LD_VAR 0 2
14624: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14625: LD_INT 0
14627: PPUSH
14628: PPUSH
14629: PPUSH
// pom := GetBase ( building ) ;
14630: LD_ADDR_VAR 0 4
14634: PUSH
14635: LD_VAR 0 1
14639: PPUSH
14640: CALL_OW 274
14644: ST_TO_ADDR
// if not pom then
14645: LD_VAR 0 4
14649: NOT
14650: IFFALSE 14654
// exit ;
14652: GO 14755
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14654: LD_ADDR_VAR 0 5
14658: PUSH
14659: LD_VAR 0 2
14663: PPUSH
14664: LD_VAR 0 1
14668: PPUSH
14669: CALL_OW 248
14673: PPUSH
14674: CALL_OW 450
14678: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14679: LD_ADDR_VAR 0 3
14683: PUSH
14684: LD_VAR 0 4
14688: PPUSH
14689: LD_INT 1
14691: PPUSH
14692: CALL_OW 275
14696: PUSH
14697: LD_VAR 0 5
14701: PUSH
14702: LD_INT 1
14704: ARRAY
14705: GREATEREQUAL
14706: PUSH
14707: LD_VAR 0 4
14711: PPUSH
14712: LD_INT 2
14714: PPUSH
14715: CALL_OW 275
14719: PUSH
14720: LD_VAR 0 5
14724: PUSH
14725: LD_INT 2
14727: ARRAY
14728: GREATEREQUAL
14729: AND
14730: PUSH
14731: LD_VAR 0 4
14735: PPUSH
14736: LD_INT 3
14738: PPUSH
14739: CALL_OW 275
14743: PUSH
14744: LD_VAR 0 5
14748: PUSH
14749: LD_INT 3
14751: ARRAY
14752: GREATEREQUAL
14753: AND
14754: ST_TO_ADDR
// end ;
14755: LD_VAR 0 3
14759: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14760: LD_INT 0
14762: PPUSH
14763: PPUSH
14764: PPUSH
14765: PPUSH
14766: PPUSH
14767: PPUSH
14768: PPUSH
14769: PPUSH
14770: PPUSH
14771: PPUSH
14772: PPUSH
// result := false ;
14773: LD_ADDR_VAR 0 8
14777: PUSH
14778: LD_INT 0
14780: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14781: LD_VAR 0 5
14785: NOT
14786: PUSH
14787: LD_VAR 0 1
14791: NOT
14792: OR
14793: PUSH
14794: LD_VAR 0 2
14798: NOT
14799: OR
14800: PUSH
14801: LD_VAR 0 3
14805: NOT
14806: OR
14807: IFFALSE 14811
// exit ;
14809: GO 15625
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
14811: LD_ADDR_VAR 0 14
14815: PUSH
14816: LD_VAR 0 1
14820: PPUSH
14821: LD_VAR 0 2
14825: PPUSH
14826: LD_VAR 0 3
14830: PPUSH
14831: LD_VAR 0 4
14835: PPUSH
14836: LD_VAR 0 5
14840: PUSH
14841: LD_INT 1
14843: ARRAY
14844: PPUSH
14845: CALL_OW 248
14849: PPUSH
14850: LD_INT 0
14852: PPUSH
14853: CALL 16862 0 6
14857: ST_TO_ADDR
// if not hexes then
14858: LD_VAR 0 14
14862: NOT
14863: IFFALSE 14867
// exit ;
14865: GO 15625
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14867: LD_ADDR_VAR 0 17
14871: PUSH
14872: LD_VAR 0 5
14876: PPUSH
14877: LD_INT 22
14879: PUSH
14880: LD_VAR 0 13
14884: PPUSH
14885: CALL_OW 255
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PUSH
14894: LD_INT 2
14896: PUSH
14897: LD_INT 30
14899: PUSH
14900: LD_INT 0
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: PUSH
14907: LD_INT 30
14909: PUSH
14910: LD_INT 1
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: LIST
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: PPUSH
14926: CALL_OW 72
14930: ST_TO_ADDR
// for i = 1 to hexes do
14931: LD_ADDR_VAR 0 9
14935: PUSH
14936: DOUBLE
14937: LD_INT 1
14939: DEC
14940: ST_TO_ADDR
14941: LD_VAR 0 14
14945: PUSH
14946: FOR_TO
14947: IFFALSE 15623
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14949: LD_ADDR_VAR 0 13
14953: PUSH
14954: LD_VAR 0 14
14958: PUSH
14959: LD_VAR 0 9
14963: ARRAY
14964: PUSH
14965: LD_INT 1
14967: ARRAY
14968: PPUSH
14969: LD_VAR 0 14
14973: PUSH
14974: LD_VAR 0 9
14978: ARRAY
14979: PUSH
14980: LD_INT 2
14982: ARRAY
14983: PPUSH
14984: CALL_OW 428
14988: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14989: LD_VAR 0 14
14993: PUSH
14994: LD_VAR 0 9
14998: ARRAY
14999: PUSH
15000: LD_INT 1
15002: ARRAY
15003: PPUSH
15004: LD_VAR 0 14
15008: PUSH
15009: LD_VAR 0 9
15013: ARRAY
15014: PUSH
15015: LD_INT 2
15017: ARRAY
15018: PPUSH
15019: CALL_OW 351
15023: PUSH
15024: LD_VAR 0 14
15028: PUSH
15029: LD_VAR 0 9
15033: ARRAY
15034: PUSH
15035: LD_INT 1
15037: ARRAY
15038: PPUSH
15039: LD_VAR 0 14
15043: PUSH
15044: LD_VAR 0 9
15048: ARRAY
15049: PUSH
15050: LD_INT 2
15052: ARRAY
15053: PPUSH
15054: CALL_OW 488
15058: NOT
15059: OR
15060: PUSH
15061: LD_VAR 0 13
15065: PPUSH
15066: CALL_OW 247
15070: PUSH
15071: LD_INT 3
15073: EQUAL
15074: OR
15075: IFFALSE 15081
// exit ;
15077: POP
15078: POP
15079: GO 15625
// if not tmp then
15081: LD_VAR 0 13
15085: NOT
15086: IFFALSE 15090
// continue ;
15088: GO 14946
// result := true ;
15090: LD_ADDR_VAR 0 8
15094: PUSH
15095: LD_INT 1
15097: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15098: LD_VAR 0 6
15102: PUSH
15103: LD_VAR 0 13
15107: PPUSH
15108: CALL_OW 247
15112: PUSH
15113: LD_INT 2
15115: EQUAL
15116: AND
15117: PUSH
15118: LD_VAR 0 13
15122: PPUSH
15123: CALL_OW 263
15127: PUSH
15128: LD_INT 1
15130: EQUAL
15131: AND
15132: IFFALSE 15296
// begin if IsDrivenBy ( tmp ) then
15134: LD_VAR 0 13
15138: PPUSH
15139: CALL_OW 311
15143: IFFALSE 15147
// continue ;
15145: GO 14946
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15147: LD_VAR 0 6
15151: PPUSH
15152: LD_INT 3
15154: PUSH
15155: LD_INT 60
15157: PUSH
15158: EMPTY
15159: LIST
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: PUSH
15165: LD_INT 3
15167: PUSH
15168: LD_INT 55
15170: PUSH
15171: EMPTY
15172: LIST
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: PPUSH
15182: CALL_OW 72
15186: IFFALSE 15294
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15188: LD_ADDR_VAR 0 18
15192: PUSH
15193: LD_VAR 0 6
15197: PPUSH
15198: LD_INT 3
15200: PUSH
15201: LD_INT 60
15203: PUSH
15204: EMPTY
15205: LIST
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: LD_INT 3
15213: PUSH
15214: LD_INT 55
15216: PUSH
15217: EMPTY
15218: LIST
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PPUSH
15228: CALL_OW 72
15232: PUSH
15233: LD_INT 1
15235: ARRAY
15236: ST_TO_ADDR
// if IsInUnit ( driver ) then
15237: LD_VAR 0 18
15241: PPUSH
15242: CALL_OW 310
15246: IFFALSE 15257
// ComExit ( driver ) ;
15248: LD_VAR 0 18
15252: PPUSH
15253: CALL 40046 0 1
// AddComEnterUnit ( driver , tmp ) ;
15257: LD_VAR 0 18
15261: PPUSH
15262: LD_VAR 0 13
15266: PPUSH
15267: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15271: LD_VAR 0 18
15275: PPUSH
15276: LD_VAR 0 7
15280: PPUSH
15281: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15285: LD_VAR 0 18
15289: PPUSH
15290: CALL_OW 181
// end ; continue ;
15294: GO 14946
// end ; if not cleaners or not tmp in cleaners then
15296: LD_VAR 0 6
15300: NOT
15301: PUSH
15302: LD_VAR 0 13
15306: PUSH
15307: LD_VAR 0 6
15311: IN
15312: NOT
15313: OR
15314: IFFALSE 15621
// begin if dep then
15316: LD_VAR 0 17
15320: IFFALSE 15456
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15322: LD_ADDR_VAR 0 16
15326: PUSH
15327: LD_VAR 0 17
15331: PUSH
15332: LD_INT 1
15334: ARRAY
15335: PPUSH
15336: CALL_OW 250
15340: PPUSH
15341: LD_VAR 0 17
15345: PUSH
15346: LD_INT 1
15348: ARRAY
15349: PPUSH
15350: CALL_OW 254
15354: PPUSH
15355: LD_INT 5
15357: PPUSH
15358: CALL_OW 272
15362: PUSH
15363: LD_VAR 0 17
15367: PUSH
15368: LD_INT 1
15370: ARRAY
15371: PPUSH
15372: CALL_OW 251
15376: PPUSH
15377: LD_VAR 0 17
15381: PUSH
15382: LD_INT 1
15384: ARRAY
15385: PPUSH
15386: CALL_OW 254
15390: PPUSH
15391: LD_INT 5
15393: PPUSH
15394: CALL_OW 273
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15403: LD_VAR 0 16
15407: PUSH
15408: LD_INT 1
15410: ARRAY
15411: PPUSH
15412: LD_VAR 0 16
15416: PUSH
15417: LD_INT 2
15419: ARRAY
15420: PPUSH
15421: CALL_OW 488
15425: IFFALSE 15456
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15427: LD_VAR 0 13
15431: PPUSH
15432: LD_VAR 0 16
15436: PUSH
15437: LD_INT 1
15439: ARRAY
15440: PPUSH
15441: LD_VAR 0 16
15445: PUSH
15446: LD_INT 2
15448: ARRAY
15449: PPUSH
15450: CALL_OW 111
// continue ;
15454: GO 14946
// end ; end ; r := GetDir ( tmp ) ;
15456: LD_ADDR_VAR 0 15
15460: PUSH
15461: LD_VAR 0 13
15465: PPUSH
15466: CALL_OW 254
15470: ST_TO_ADDR
// if r = 5 then
15471: LD_VAR 0 15
15475: PUSH
15476: LD_INT 5
15478: EQUAL
15479: IFFALSE 15489
// r := 0 ;
15481: LD_ADDR_VAR 0 15
15485: PUSH
15486: LD_INT 0
15488: ST_TO_ADDR
// for j = r to 5 do
15489: LD_ADDR_VAR 0 10
15493: PUSH
15494: DOUBLE
15495: LD_VAR 0 15
15499: DEC
15500: ST_TO_ADDR
15501: LD_INT 5
15503: PUSH
15504: FOR_TO
15505: IFFALSE 15619
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15507: LD_ADDR_VAR 0 11
15511: PUSH
15512: LD_VAR 0 13
15516: PPUSH
15517: CALL_OW 250
15521: PPUSH
15522: LD_VAR 0 10
15526: PPUSH
15527: LD_INT 2
15529: PPUSH
15530: CALL_OW 272
15534: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15535: LD_ADDR_VAR 0 12
15539: PUSH
15540: LD_VAR 0 13
15544: PPUSH
15545: CALL_OW 251
15549: PPUSH
15550: LD_VAR 0 10
15554: PPUSH
15555: LD_INT 2
15557: PPUSH
15558: CALL_OW 273
15562: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15563: LD_VAR 0 11
15567: PPUSH
15568: LD_VAR 0 12
15572: PPUSH
15573: CALL_OW 488
15577: PUSH
15578: LD_VAR 0 11
15582: PPUSH
15583: LD_VAR 0 12
15587: PPUSH
15588: CALL_OW 428
15592: NOT
15593: AND
15594: IFFALSE 15617
// begin ComMoveXY ( tmp , _x , _y ) ;
15596: LD_VAR 0 13
15600: PPUSH
15601: LD_VAR 0 11
15605: PPUSH
15606: LD_VAR 0 12
15610: PPUSH
15611: CALL_OW 111
// break ;
15615: GO 15619
// end ; end ;
15617: GO 15504
15619: POP
15620: POP
// end ; end ;
15621: GO 14946
15623: POP
15624: POP
// end ;
15625: LD_VAR 0 8
15629: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15630: LD_INT 0
15632: PPUSH
// result := true ;
15633: LD_ADDR_VAR 0 3
15637: PUSH
15638: LD_INT 1
15640: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15641: LD_VAR 0 2
15645: PUSH
15646: LD_INT 24
15648: DOUBLE
15649: EQUAL
15650: IFTRUE 15660
15652: LD_INT 33
15654: DOUBLE
15655: EQUAL
15656: IFTRUE 15660
15658: GO 15685
15660: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15661: LD_ADDR_VAR 0 3
15665: PUSH
15666: LD_INT 32
15668: PPUSH
15669: LD_VAR 0 1
15673: PPUSH
15674: CALL_OW 321
15678: PUSH
15679: LD_INT 2
15681: EQUAL
15682: ST_TO_ADDR
15683: GO 16005
15685: LD_INT 20
15687: DOUBLE
15688: EQUAL
15689: IFTRUE 15693
15691: GO 15718
15693: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15694: LD_ADDR_VAR 0 3
15698: PUSH
15699: LD_INT 6
15701: PPUSH
15702: LD_VAR 0 1
15706: PPUSH
15707: CALL_OW 321
15711: PUSH
15712: LD_INT 2
15714: EQUAL
15715: ST_TO_ADDR
15716: GO 16005
15718: LD_INT 22
15720: DOUBLE
15721: EQUAL
15722: IFTRUE 15732
15724: LD_INT 36
15726: DOUBLE
15727: EQUAL
15728: IFTRUE 15732
15730: GO 15757
15732: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15733: LD_ADDR_VAR 0 3
15737: PUSH
15738: LD_INT 15
15740: PPUSH
15741: LD_VAR 0 1
15745: PPUSH
15746: CALL_OW 321
15750: PUSH
15751: LD_INT 2
15753: EQUAL
15754: ST_TO_ADDR
15755: GO 16005
15757: LD_INT 30
15759: DOUBLE
15760: EQUAL
15761: IFTRUE 15765
15763: GO 15790
15765: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
15766: LD_ADDR_VAR 0 3
15770: PUSH
15771: LD_INT 20
15773: PPUSH
15774: LD_VAR 0 1
15778: PPUSH
15779: CALL_OW 321
15783: PUSH
15784: LD_INT 2
15786: EQUAL
15787: ST_TO_ADDR
15788: GO 16005
15790: LD_INT 28
15792: DOUBLE
15793: EQUAL
15794: IFTRUE 15804
15796: LD_INT 21
15798: DOUBLE
15799: EQUAL
15800: IFTRUE 15804
15802: GO 15829
15804: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
15805: LD_ADDR_VAR 0 3
15809: PUSH
15810: LD_INT 21
15812: PPUSH
15813: LD_VAR 0 1
15817: PPUSH
15818: CALL_OW 321
15822: PUSH
15823: LD_INT 2
15825: EQUAL
15826: ST_TO_ADDR
15827: GO 16005
15829: LD_INT 16
15831: DOUBLE
15832: EQUAL
15833: IFTRUE 15837
15835: GO 15864
15837: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
15838: LD_ADDR_VAR 0 3
15842: PUSH
15843: LD_EXP 21
15847: PPUSH
15848: LD_VAR 0 1
15852: PPUSH
15853: CALL_OW 321
15857: PUSH
15858: LD_INT 2
15860: EQUAL
15861: ST_TO_ADDR
15862: GO 16005
15864: LD_INT 19
15866: DOUBLE
15867: EQUAL
15868: IFTRUE 15878
15870: LD_INT 23
15872: DOUBLE
15873: EQUAL
15874: IFTRUE 15878
15876: GO 15905
15878: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
15879: LD_ADDR_VAR 0 3
15883: PUSH
15884: LD_EXP 20
15888: PPUSH
15889: LD_VAR 0 1
15893: PPUSH
15894: CALL_OW 321
15898: PUSH
15899: LD_INT 2
15901: EQUAL
15902: ST_TO_ADDR
15903: GO 16005
15905: LD_INT 17
15907: DOUBLE
15908: EQUAL
15909: IFTRUE 15913
15911: GO 15938
15913: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15914: LD_ADDR_VAR 0 3
15918: PUSH
15919: LD_INT 39
15921: PPUSH
15922: LD_VAR 0 1
15926: PPUSH
15927: CALL_OW 321
15931: PUSH
15932: LD_INT 2
15934: EQUAL
15935: ST_TO_ADDR
15936: GO 16005
15938: LD_INT 18
15940: DOUBLE
15941: EQUAL
15942: IFTRUE 15946
15944: GO 15971
15946: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15947: LD_ADDR_VAR 0 3
15951: PUSH
15952: LD_INT 40
15954: PPUSH
15955: LD_VAR 0 1
15959: PPUSH
15960: CALL_OW 321
15964: PUSH
15965: LD_INT 2
15967: EQUAL
15968: ST_TO_ADDR
15969: GO 16005
15971: LD_INT 27
15973: DOUBLE
15974: EQUAL
15975: IFTRUE 15979
15977: GO 16004
15979: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15980: LD_ADDR_VAR 0 3
15984: PUSH
15985: LD_INT 35
15987: PPUSH
15988: LD_VAR 0 1
15992: PPUSH
15993: CALL_OW 321
15997: PUSH
15998: LD_INT 2
16000: EQUAL
16001: ST_TO_ADDR
16002: GO 16005
16004: POP
// end ;
16005: LD_VAR 0 3
16009: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16010: LD_INT 0
16012: PPUSH
16013: PPUSH
16014: PPUSH
16015: PPUSH
16016: PPUSH
16017: PPUSH
16018: PPUSH
16019: PPUSH
16020: PPUSH
16021: PPUSH
16022: PPUSH
// result := false ;
16023: LD_ADDR_VAR 0 6
16027: PUSH
16028: LD_INT 0
16030: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16031: LD_VAR 0 1
16035: NOT
16036: PUSH
16037: LD_VAR 0 1
16041: PPUSH
16042: CALL_OW 266
16046: PUSH
16047: LD_INT 0
16049: PUSH
16050: LD_INT 1
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: IN
16057: NOT
16058: OR
16059: PUSH
16060: LD_VAR 0 2
16064: NOT
16065: OR
16066: PUSH
16067: LD_VAR 0 5
16071: PUSH
16072: LD_INT 0
16074: PUSH
16075: LD_INT 1
16077: PUSH
16078: LD_INT 2
16080: PUSH
16081: LD_INT 3
16083: PUSH
16084: LD_INT 4
16086: PUSH
16087: LD_INT 5
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: IN
16098: NOT
16099: OR
16100: PUSH
16101: LD_VAR 0 3
16105: PPUSH
16106: LD_VAR 0 4
16110: PPUSH
16111: CALL_OW 488
16115: NOT
16116: OR
16117: IFFALSE 16121
// exit ;
16119: GO 16857
// side := GetSide ( depot ) ;
16121: LD_ADDR_VAR 0 9
16125: PUSH
16126: LD_VAR 0 1
16130: PPUSH
16131: CALL_OW 255
16135: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16136: LD_VAR 0 9
16140: PPUSH
16141: LD_VAR 0 2
16145: PPUSH
16146: CALL 15630 0 2
16150: NOT
16151: IFFALSE 16155
// exit ;
16153: GO 16857
// pom := GetBase ( depot ) ;
16155: LD_ADDR_VAR 0 10
16159: PUSH
16160: LD_VAR 0 1
16164: PPUSH
16165: CALL_OW 274
16169: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16170: LD_ADDR_VAR 0 11
16174: PUSH
16175: LD_VAR 0 2
16179: PPUSH
16180: LD_VAR 0 1
16184: PPUSH
16185: CALL_OW 248
16189: PPUSH
16190: CALL_OW 450
16194: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16195: LD_VAR 0 10
16199: PPUSH
16200: LD_INT 1
16202: PPUSH
16203: CALL_OW 275
16207: PUSH
16208: LD_VAR 0 11
16212: PUSH
16213: LD_INT 1
16215: ARRAY
16216: GREATEREQUAL
16217: PUSH
16218: LD_VAR 0 10
16222: PPUSH
16223: LD_INT 2
16225: PPUSH
16226: CALL_OW 275
16230: PUSH
16231: LD_VAR 0 11
16235: PUSH
16236: LD_INT 2
16238: ARRAY
16239: GREATEREQUAL
16240: AND
16241: PUSH
16242: LD_VAR 0 10
16246: PPUSH
16247: LD_INT 3
16249: PPUSH
16250: CALL_OW 275
16254: PUSH
16255: LD_VAR 0 11
16259: PUSH
16260: LD_INT 3
16262: ARRAY
16263: GREATEREQUAL
16264: AND
16265: NOT
16266: IFFALSE 16270
// exit ;
16268: GO 16857
// if GetBType ( depot ) = b_depot then
16270: LD_VAR 0 1
16274: PPUSH
16275: CALL_OW 266
16279: PUSH
16280: LD_INT 0
16282: EQUAL
16283: IFFALSE 16295
// dist := 28 else
16285: LD_ADDR_VAR 0 14
16289: PUSH
16290: LD_INT 28
16292: ST_TO_ADDR
16293: GO 16303
// dist := 36 ;
16295: LD_ADDR_VAR 0 14
16299: PUSH
16300: LD_INT 36
16302: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16303: LD_VAR 0 1
16307: PPUSH
16308: LD_VAR 0 3
16312: PPUSH
16313: LD_VAR 0 4
16317: PPUSH
16318: CALL_OW 297
16322: PUSH
16323: LD_VAR 0 14
16327: GREATER
16328: IFFALSE 16332
// exit ;
16330: GO 16857
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16332: LD_ADDR_VAR 0 12
16336: PUSH
16337: LD_VAR 0 2
16341: PPUSH
16342: LD_VAR 0 3
16346: PPUSH
16347: LD_VAR 0 4
16351: PPUSH
16352: LD_VAR 0 5
16356: PPUSH
16357: LD_VAR 0 1
16361: PPUSH
16362: CALL_OW 248
16366: PPUSH
16367: LD_INT 0
16369: PPUSH
16370: CALL 16862 0 6
16374: ST_TO_ADDR
// if not hexes then
16375: LD_VAR 0 12
16379: NOT
16380: IFFALSE 16384
// exit ;
16382: GO 16857
// hex := GetHexInfo ( x , y ) ;
16384: LD_ADDR_VAR 0 15
16388: PUSH
16389: LD_VAR 0 3
16393: PPUSH
16394: LD_VAR 0 4
16398: PPUSH
16399: CALL_OW 546
16403: ST_TO_ADDR
// if hex [ 1 ] then
16404: LD_VAR 0 15
16408: PUSH
16409: LD_INT 1
16411: ARRAY
16412: IFFALSE 16416
// exit ;
16414: GO 16857
// height := hex [ 2 ] ;
16416: LD_ADDR_VAR 0 13
16420: PUSH
16421: LD_VAR 0 15
16425: PUSH
16426: LD_INT 2
16428: ARRAY
16429: ST_TO_ADDR
// for i = 1 to hexes do
16430: LD_ADDR_VAR 0 7
16434: PUSH
16435: DOUBLE
16436: LD_INT 1
16438: DEC
16439: ST_TO_ADDR
16440: LD_VAR 0 12
16444: PUSH
16445: FOR_TO
16446: IFFALSE 16776
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16448: LD_VAR 0 12
16452: PUSH
16453: LD_VAR 0 7
16457: ARRAY
16458: PUSH
16459: LD_INT 1
16461: ARRAY
16462: PPUSH
16463: LD_VAR 0 12
16467: PUSH
16468: LD_VAR 0 7
16472: ARRAY
16473: PUSH
16474: LD_INT 2
16476: ARRAY
16477: PPUSH
16478: CALL_OW 488
16482: NOT
16483: PUSH
16484: LD_VAR 0 12
16488: PUSH
16489: LD_VAR 0 7
16493: ARRAY
16494: PUSH
16495: LD_INT 1
16497: ARRAY
16498: PPUSH
16499: LD_VAR 0 12
16503: PUSH
16504: LD_VAR 0 7
16508: ARRAY
16509: PUSH
16510: LD_INT 2
16512: ARRAY
16513: PPUSH
16514: CALL_OW 428
16518: PUSH
16519: LD_INT 0
16521: GREATER
16522: OR
16523: PUSH
16524: LD_VAR 0 12
16528: PUSH
16529: LD_VAR 0 7
16533: ARRAY
16534: PUSH
16535: LD_INT 1
16537: ARRAY
16538: PPUSH
16539: LD_VAR 0 12
16543: PUSH
16544: LD_VAR 0 7
16548: ARRAY
16549: PUSH
16550: LD_INT 2
16552: ARRAY
16553: PPUSH
16554: CALL_OW 351
16558: OR
16559: IFFALSE 16565
// exit ;
16561: POP
16562: POP
16563: GO 16857
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16565: LD_ADDR_VAR 0 8
16569: PUSH
16570: LD_VAR 0 12
16574: PUSH
16575: LD_VAR 0 7
16579: ARRAY
16580: PUSH
16581: LD_INT 1
16583: ARRAY
16584: PPUSH
16585: LD_VAR 0 12
16589: PUSH
16590: LD_VAR 0 7
16594: ARRAY
16595: PUSH
16596: LD_INT 2
16598: ARRAY
16599: PPUSH
16600: CALL_OW 546
16604: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16605: LD_VAR 0 8
16609: PUSH
16610: LD_INT 1
16612: ARRAY
16613: PUSH
16614: LD_VAR 0 8
16618: PUSH
16619: LD_INT 2
16621: ARRAY
16622: PUSH
16623: LD_VAR 0 13
16627: PUSH
16628: LD_INT 2
16630: PLUS
16631: GREATER
16632: OR
16633: PUSH
16634: LD_VAR 0 8
16638: PUSH
16639: LD_INT 2
16641: ARRAY
16642: PUSH
16643: LD_VAR 0 13
16647: PUSH
16648: LD_INT 2
16650: MINUS
16651: LESS
16652: OR
16653: PUSH
16654: LD_VAR 0 8
16658: PUSH
16659: LD_INT 3
16661: ARRAY
16662: PUSH
16663: LD_INT 0
16665: PUSH
16666: LD_INT 8
16668: PUSH
16669: LD_INT 9
16671: PUSH
16672: LD_INT 10
16674: PUSH
16675: LD_INT 11
16677: PUSH
16678: LD_INT 12
16680: PUSH
16681: LD_INT 13
16683: PUSH
16684: LD_INT 16
16686: PUSH
16687: LD_INT 17
16689: PUSH
16690: LD_INT 18
16692: PUSH
16693: LD_INT 19
16695: PUSH
16696: LD_INT 20
16698: PUSH
16699: LD_INT 21
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: IN
16717: NOT
16718: OR
16719: PUSH
16720: LD_VAR 0 8
16724: PUSH
16725: LD_INT 5
16727: ARRAY
16728: NOT
16729: OR
16730: PUSH
16731: LD_VAR 0 8
16735: PUSH
16736: LD_INT 6
16738: ARRAY
16739: PUSH
16740: LD_INT 1
16742: PUSH
16743: LD_INT 2
16745: PUSH
16746: LD_INT 7
16748: PUSH
16749: LD_INT 9
16751: PUSH
16752: LD_INT 10
16754: PUSH
16755: LD_INT 11
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: IN
16766: NOT
16767: OR
16768: IFFALSE 16774
// exit ;
16770: POP
16771: POP
16772: GO 16857
// end ;
16774: GO 16445
16776: POP
16777: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16778: LD_VAR 0 9
16782: PPUSH
16783: LD_VAR 0 3
16787: PPUSH
16788: LD_VAR 0 4
16792: PPUSH
16793: LD_INT 20
16795: PPUSH
16796: CALL 8803 0 4
16800: PUSH
16801: LD_INT 4
16803: ARRAY
16804: IFFALSE 16808
// exit ;
16806: GO 16857
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16808: LD_VAR 0 2
16812: PUSH
16813: LD_INT 29
16815: PUSH
16816: LD_INT 30
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: IN
16823: PUSH
16824: LD_VAR 0 3
16828: PPUSH
16829: LD_VAR 0 4
16833: PPUSH
16834: LD_VAR 0 9
16838: PPUSH
16839: CALL_OW 440
16843: NOT
16844: AND
16845: IFFALSE 16849
// exit ;
16847: GO 16857
// result := true ;
16849: LD_ADDR_VAR 0 6
16853: PUSH
16854: LD_INT 1
16856: ST_TO_ADDR
// end ;
16857: LD_VAR 0 6
16861: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16862: LD_INT 0
16864: PPUSH
16865: PPUSH
16866: PPUSH
16867: PPUSH
16868: PPUSH
16869: PPUSH
16870: PPUSH
16871: PPUSH
16872: PPUSH
16873: PPUSH
16874: PPUSH
16875: PPUSH
16876: PPUSH
16877: PPUSH
16878: PPUSH
16879: PPUSH
16880: PPUSH
16881: PPUSH
16882: PPUSH
16883: PPUSH
16884: PPUSH
16885: PPUSH
16886: PPUSH
16887: PPUSH
16888: PPUSH
16889: PPUSH
16890: PPUSH
16891: PPUSH
16892: PPUSH
16893: PPUSH
16894: PPUSH
16895: PPUSH
16896: PPUSH
16897: PPUSH
16898: PPUSH
16899: PPUSH
16900: PPUSH
16901: PPUSH
16902: PPUSH
16903: PPUSH
16904: PPUSH
16905: PPUSH
16906: PPUSH
16907: PPUSH
16908: PPUSH
16909: PPUSH
16910: PPUSH
16911: PPUSH
16912: PPUSH
16913: PPUSH
16914: PPUSH
16915: PPUSH
16916: PPUSH
16917: PPUSH
16918: PPUSH
16919: PPUSH
16920: PPUSH
16921: PPUSH
// result = [ ] ;
16922: LD_ADDR_VAR 0 7
16926: PUSH
16927: EMPTY
16928: ST_TO_ADDR
// temp_list = [ ] ;
16929: LD_ADDR_VAR 0 9
16933: PUSH
16934: EMPTY
16935: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16936: LD_VAR 0 4
16940: PUSH
16941: LD_INT 0
16943: PUSH
16944: LD_INT 1
16946: PUSH
16947: LD_INT 2
16949: PUSH
16950: LD_INT 3
16952: PUSH
16953: LD_INT 4
16955: PUSH
16956: LD_INT 5
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: IN
16967: NOT
16968: PUSH
16969: LD_VAR 0 1
16973: PUSH
16974: LD_INT 0
16976: PUSH
16977: LD_INT 1
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: IN
16984: PUSH
16985: LD_VAR 0 5
16989: PUSH
16990: LD_INT 1
16992: PUSH
16993: LD_INT 2
16995: PUSH
16996: LD_INT 3
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: LIST
17003: IN
17004: NOT
17005: AND
17006: OR
17007: IFFALSE 17011
// exit ;
17009: GO 35402
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17011: LD_VAR 0 1
17015: PUSH
17016: LD_INT 6
17018: PUSH
17019: LD_INT 7
17021: PUSH
17022: LD_INT 8
17024: PUSH
17025: LD_INT 13
17027: PUSH
17028: LD_INT 12
17030: PUSH
17031: LD_INT 15
17033: PUSH
17034: LD_INT 11
17036: PUSH
17037: LD_INT 14
17039: PUSH
17040: LD_INT 10
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: IN
17054: IFFALSE 17064
// btype = b_lab ;
17056: LD_ADDR_VAR 0 1
17060: PUSH
17061: LD_INT 6
17063: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17064: LD_VAR 0 6
17068: PUSH
17069: LD_INT 0
17071: PUSH
17072: LD_INT 1
17074: PUSH
17075: LD_INT 2
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: LIST
17082: IN
17083: NOT
17084: PUSH
17085: LD_VAR 0 1
17089: PUSH
17090: LD_INT 0
17092: PUSH
17093: LD_INT 1
17095: PUSH
17096: LD_INT 2
17098: PUSH
17099: LD_INT 3
17101: PUSH
17102: LD_INT 6
17104: PUSH
17105: LD_INT 36
17107: PUSH
17108: LD_INT 4
17110: PUSH
17111: LD_INT 5
17113: PUSH
17114: LD_INT 31
17116: PUSH
17117: LD_INT 32
17119: PUSH
17120: LD_INT 33
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: IN
17136: NOT
17137: PUSH
17138: LD_VAR 0 6
17142: PUSH
17143: LD_INT 1
17145: EQUAL
17146: AND
17147: OR
17148: PUSH
17149: LD_VAR 0 1
17153: PUSH
17154: LD_INT 2
17156: PUSH
17157: LD_INT 3
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: IN
17164: NOT
17165: PUSH
17166: LD_VAR 0 6
17170: PUSH
17171: LD_INT 2
17173: EQUAL
17174: AND
17175: OR
17176: IFFALSE 17186
// mode = 0 ;
17178: LD_ADDR_VAR 0 6
17182: PUSH
17183: LD_INT 0
17185: ST_TO_ADDR
// case mode of 0 :
17186: LD_VAR 0 6
17190: PUSH
17191: LD_INT 0
17193: DOUBLE
17194: EQUAL
17195: IFTRUE 17199
17197: GO 28652
17199: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17200: LD_ADDR_VAR 0 11
17204: PUSH
17205: LD_INT 0
17207: PUSH
17208: LD_INT 0
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PUSH
17215: LD_INT 0
17217: PUSH
17218: LD_INT 1
17220: NEG
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PUSH
17226: LD_INT 1
17228: PUSH
17229: LD_INT 0
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PUSH
17236: LD_INT 1
17238: PUSH
17239: LD_INT 1
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: PUSH
17246: LD_INT 0
17248: PUSH
17249: LD_INT 1
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: LD_INT 1
17258: NEG
17259: PUSH
17260: LD_INT 0
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 1
17269: NEG
17270: PUSH
17271: LD_INT 1
17273: NEG
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: PUSH
17279: LD_INT 1
17281: NEG
17282: PUSH
17283: LD_INT 2
17285: NEG
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PUSH
17291: LD_INT 0
17293: PUSH
17294: LD_INT 2
17296: NEG
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: LD_INT 1
17304: PUSH
17305: LD_INT 1
17307: NEG
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: PUSH
17313: LD_INT 1
17315: PUSH
17316: LD_INT 2
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PUSH
17323: LD_INT 0
17325: PUSH
17326: LD_INT 2
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PUSH
17333: LD_INT 1
17335: NEG
17336: PUSH
17337: LD_INT 1
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 1
17346: PUSH
17347: LD_INT 3
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: LD_INT 0
17356: PUSH
17357: LD_INT 3
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PUSH
17364: LD_INT 1
17366: NEG
17367: PUSH
17368: LD_INT 2
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17393: LD_ADDR_VAR 0 12
17397: PUSH
17398: LD_INT 0
17400: PUSH
17401: LD_INT 0
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: PUSH
17408: LD_INT 0
17410: PUSH
17411: LD_INT 1
17413: NEG
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: LD_INT 1
17421: PUSH
17422: LD_INT 0
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: LD_INT 1
17431: PUSH
17432: LD_INT 1
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: LD_INT 0
17441: PUSH
17442: LD_INT 1
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: PUSH
17449: LD_INT 1
17451: NEG
17452: PUSH
17453: LD_INT 0
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: PUSH
17460: LD_INT 1
17462: NEG
17463: PUSH
17464: LD_INT 1
17466: NEG
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 1
17474: PUSH
17475: LD_INT 1
17477: NEG
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 2
17485: PUSH
17486: LD_INT 0
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 2
17495: PUSH
17496: LD_INT 1
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 1
17505: NEG
17506: PUSH
17507: LD_INT 1
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 2
17516: NEG
17517: PUSH
17518: LD_INT 0
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 2
17527: NEG
17528: PUSH
17529: LD_INT 1
17531: NEG
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: LD_INT 2
17539: NEG
17540: PUSH
17541: LD_INT 1
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 3
17550: NEG
17551: PUSH
17552: LD_INT 0
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PUSH
17559: LD_INT 3
17561: NEG
17562: PUSH
17563: LD_INT 1
17565: NEG
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17589: LD_ADDR_VAR 0 13
17593: PUSH
17594: LD_INT 0
17596: PUSH
17597: LD_INT 0
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: LD_INT 0
17606: PUSH
17607: LD_INT 1
17609: NEG
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: LD_INT 1
17617: PUSH
17618: LD_INT 0
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: LD_INT 1
17627: PUSH
17628: LD_INT 1
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 0
17637: PUSH
17638: LD_INT 1
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: LD_INT 1
17647: NEG
17648: PUSH
17649: LD_INT 0
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: LD_INT 1
17658: NEG
17659: PUSH
17660: LD_INT 1
17662: NEG
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: PUSH
17668: LD_INT 1
17670: NEG
17671: PUSH
17672: LD_INT 2
17674: NEG
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PUSH
17680: LD_INT 2
17682: PUSH
17683: LD_INT 1
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PUSH
17690: LD_INT 2
17692: PUSH
17693: LD_INT 2
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 1
17702: PUSH
17703: LD_INT 2
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PUSH
17710: LD_INT 2
17712: NEG
17713: PUSH
17714: LD_INT 1
17716: NEG
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: PUSH
17722: LD_INT 2
17724: NEG
17725: PUSH
17726: LD_INT 2
17728: NEG
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: PUSH
17734: LD_INT 2
17736: NEG
17737: PUSH
17738: LD_INT 3
17740: NEG
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PUSH
17746: LD_INT 3
17748: NEG
17749: PUSH
17750: LD_INT 2
17752: NEG
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 3
17760: NEG
17761: PUSH
17762: LD_INT 3
17764: NEG
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17788: LD_ADDR_VAR 0 14
17792: PUSH
17793: LD_INT 0
17795: PUSH
17796: LD_INT 0
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PUSH
17803: LD_INT 0
17805: PUSH
17806: LD_INT 1
17808: NEG
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PUSH
17814: LD_INT 1
17816: PUSH
17817: LD_INT 0
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: LD_INT 1
17826: PUSH
17827: LD_INT 1
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: LD_INT 0
17836: PUSH
17837: LD_INT 1
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 1
17846: NEG
17847: PUSH
17848: LD_INT 0
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 1
17857: NEG
17858: PUSH
17859: LD_INT 1
17861: NEG
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: PUSH
17867: LD_INT 1
17869: NEG
17870: PUSH
17871: LD_INT 2
17873: NEG
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PUSH
17879: LD_INT 0
17881: PUSH
17882: LD_INT 2
17884: NEG
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 1
17892: PUSH
17893: LD_INT 1
17895: NEG
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: PUSH
17901: LD_INT 1
17903: PUSH
17904: LD_INT 2
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: PUSH
17911: LD_INT 0
17913: PUSH
17914: LD_INT 2
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: LD_INT 1
17923: NEG
17924: PUSH
17925: LD_INT 1
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: LD_INT 1
17934: NEG
17935: PUSH
17936: LD_INT 3
17938: NEG
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 0
17946: PUSH
17947: LD_INT 3
17949: NEG
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 1
17957: PUSH
17958: LD_INT 2
17960: NEG
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17984: LD_ADDR_VAR 0 15
17988: PUSH
17989: LD_INT 0
17991: PUSH
17992: LD_INT 0
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: LD_INT 0
18001: PUSH
18002: LD_INT 1
18004: NEG
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PUSH
18010: LD_INT 1
18012: PUSH
18013: LD_INT 0
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PUSH
18020: LD_INT 1
18022: PUSH
18023: LD_INT 1
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: LD_INT 0
18032: PUSH
18033: LD_INT 1
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 1
18042: NEG
18043: PUSH
18044: LD_INT 0
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: LD_INT 1
18053: NEG
18054: PUSH
18055: LD_INT 1
18057: NEG
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: LD_INT 1
18065: PUSH
18066: LD_INT 1
18068: NEG
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: LD_INT 2
18076: PUSH
18077: LD_INT 0
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 2
18086: PUSH
18087: LD_INT 1
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 1
18096: NEG
18097: PUSH
18098: LD_INT 1
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: LD_INT 2
18107: NEG
18108: PUSH
18109: LD_INT 0
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 2
18118: NEG
18119: PUSH
18120: LD_INT 1
18122: NEG
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 2
18130: PUSH
18131: LD_INT 1
18133: NEG
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 3
18141: PUSH
18142: LD_INT 0
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 3
18151: PUSH
18152: LD_INT 1
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18177: LD_ADDR_VAR 0 16
18181: PUSH
18182: LD_INT 0
18184: PUSH
18185: LD_INT 0
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: LD_INT 0
18194: PUSH
18195: LD_INT 1
18197: NEG
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: LD_INT 1
18205: PUSH
18206: LD_INT 0
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: PUSH
18213: LD_INT 1
18215: PUSH
18216: LD_INT 1
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 0
18225: PUSH
18226: LD_INT 1
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 1
18235: NEG
18236: PUSH
18237: LD_INT 0
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: LD_INT 1
18246: NEG
18247: PUSH
18248: LD_INT 1
18250: NEG
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 1
18258: NEG
18259: PUSH
18260: LD_INT 2
18262: NEG
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: LD_INT 2
18270: PUSH
18271: LD_INT 1
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: LD_INT 2
18280: PUSH
18281: LD_INT 2
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 1
18290: PUSH
18291: LD_INT 2
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: LD_INT 2
18300: NEG
18301: PUSH
18302: LD_INT 1
18304: NEG
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 2
18312: NEG
18313: PUSH
18314: LD_INT 2
18316: NEG
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: LD_INT 3
18324: PUSH
18325: LD_INT 2
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 3
18334: PUSH
18335: LD_INT 3
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 2
18344: PUSH
18345: LD_INT 3
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18370: LD_ADDR_VAR 0 17
18374: PUSH
18375: LD_INT 0
18377: PUSH
18378: LD_INT 0
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PUSH
18385: LD_INT 0
18387: PUSH
18388: LD_INT 1
18390: NEG
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: LD_INT 1
18398: PUSH
18399: LD_INT 0
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 1
18408: PUSH
18409: LD_INT 1
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: LD_INT 0
18418: PUSH
18419: LD_INT 1
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: LD_INT 1
18428: NEG
18429: PUSH
18430: LD_INT 0
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: LD_INT 1
18439: NEG
18440: PUSH
18441: LD_INT 1
18443: NEG
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 1
18451: NEG
18452: PUSH
18453: LD_INT 2
18455: NEG
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 0
18463: PUSH
18464: LD_INT 2
18466: NEG
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 1
18474: PUSH
18475: LD_INT 1
18477: NEG
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PUSH
18483: LD_INT 2
18485: PUSH
18486: LD_INT 0
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 2
18495: PUSH
18496: LD_INT 1
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 2
18505: PUSH
18506: LD_INT 2
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: LD_INT 1
18515: PUSH
18516: LD_INT 2
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: LD_INT 0
18525: PUSH
18526: LD_INT 2
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 1
18535: NEG
18536: PUSH
18537: LD_INT 1
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: LD_INT 2
18546: NEG
18547: PUSH
18548: LD_INT 0
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: LD_INT 2
18557: NEG
18558: PUSH
18559: LD_INT 1
18561: NEG
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 2
18569: NEG
18570: PUSH
18571: LD_INT 2
18573: NEG
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18600: LD_ADDR_VAR 0 18
18604: PUSH
18605: LD_INT 0
18607: PUSH
18608: LD_INT 0
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: LD_INT 0
18617: PUSH
18618: LD_INT 1
18620: NEG
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PUSH
18626: LD_INT 1
18628: PUSH
18629: LD_INT 0
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 1
18638: PUSH
18639: LD_INT 1
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: LD_INT 0
18648: PUSH
18649: LD_INT 1
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 1
18658: NEG
18659: PUSH
18660: LD_INT 0
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 1
18669: NEG
18670: PUSH
18671: LD_INT 1
18673: NEG
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: LD_INT 1
18681: NEG
18682: PUSH
18683: LD_INT 2
18685: NEG
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 0
18693: PUSH
18694: LD_INT 2
18696: NEG
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 1
18704: PUSH
18705: LD_INT 1
18707: NEG
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PUSH
18713: LD_INT 2
18715: PUSH
18716: LD_INT 0
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: LD_INT 2
18725: PUSH
18726: LD_INT 1
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: PUSH
18733: LD_INT 2
18735: PUSH
18736: LD_INT 2
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 1
18745: PUSH
18746: LD_INT 2
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 0
18755: PUSH
18756: LD_INT 2
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: LD_INT 1
18765: NEG
18766: PUSH
18767: LD_INT 1
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: LD_INT 2
18776: NEG
18777: PUSH
18778: LD_INT 0
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 2
18787: NEG
18788: PUSH
18789: LD_INT 1
18791: NEG
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: LD_INT 2
18799: NEG
18800: PUSH
18801: LD_INT 2
18803: NEG
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18830: LD_ADDR_VAR 0 19
18834: PUSH
18835: LD_INT 0
18837: PUSH
18838: LD_INT 0
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PUSH
18845: LD_INT 0
18847: PUSH
18848: LD_INT 1
18850: NEG
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: LD_INT 1
18858: PUSH
18859: LD_INT 0
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: LD_INT 1
18868: PUSH
18869: LD_INT 1
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PUSH
18876: LD_INT 0
18878: PUSH
18879: LD_INT 1
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PUSH
18886: LD_INT 1
18888: NEG
18889: PUSH
18890: LD_INT 0
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 1
18899: NEG
18900: PUSH
18901: LD_INT 1
18903: NEG
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 1
18911: NEG
18912: PUSH
18913: LD_INT 2
18915: NEG
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 0
18923: PUSH
18924: LD_INT 2
18926: NEG
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 1
18934: PUSH
18935: LD_INT 1
18937: NEG
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 2
18945: PUSH
18946: LD_INT 0
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 2
18955: PUSH
18956: LD_INT 1
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 2
18965: PUSH
18966: LD_INT 2
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 1
18975: PUSH
18976: LD_INT 2
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: LD_INT 0
18985: PUSH
18986: LD_INT 2
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 1
18995: NEG
18996: PUSH
18997: LD_INT 1
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 2
19006: NEG
19007: PUSH
19008: LD_INT 0
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 2
19017: NEG
19018: PUSH
19019: LD_INT 1
19021: NEG
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 2
19029: NEG
19030: PUSH
19031: LD_INT 2
19033: NEG
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19060: LD_ADDR_VAR 0 20
19064: PUSH
19065: LD_INT 0
19067: PUSH
19068: LD_INT 0
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 0
19077: PUSH
19078: LD_INT 1
19080: NEG
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 1
19088: PUSH
19089: LD_INT 0
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: PUSH
19096: LD_INT 1
19098: PUSH
19099: LD_INT 1
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: LD_INT 0
19108: PUSH
19109: LD_INT 1
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 1
19118: NEG
19119: PUSH
19120: LD_INT 0
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 1
19129: NEG
19130: PUSH
19131: LD_INT 1
19133: NEG
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 1
19141: NEG
19142: PUSH
19143: LD_INT 2
19145: NEG
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 0
19153: PUSH
19154: LD_INT 2
19156: NEG
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 1
19164: PUSH
19165: LD_INT 1
19167: NEG
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 2
19175: PUSH
19176: LD_INT 0
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: PUSH
19183: LD_INT 2
19185: PUSH
19186: LD_INT 1
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PUSH
19193: LD_INT 2
19195: PUSH
19196: LD_INT 2
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: LD_INT 1
19205: PUSH
19206: LD_INT 2
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: LD_INT 0
19215: PUSH
19216: LD_INT 2
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: LD_INT 1
19225: NEG
19226: PUSH
19227: LD_INT 1
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PUSH
19234: LD_INT 2
19236: NEG
19237: PUSH
19238: LD_INT 0
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 2
19247: NEG
19248: PUSH
19249: LD_INT 1
19251: NEG
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: LD_INT 2
19259: NEG
19260: PUSH
19261: LD_INT 2
19263: NEG
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19290: LD_ADDR_VAR 0 21
19294: PUSH
19295: LD_INT 0
19297: PUSH
19298: LD_INT 0
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PUSH
19305: LD_INT 0
19307: PUSH
19308: LD_INT 1
19310: NEG
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 1
19318: PUSH
19319: LD_INT 0
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 1
19328: PUSH
19329: LD_INT 1
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: LD_INT 0
19338: PUSH
19339: LD_INT 1
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 1
19348: NEG
19349: PUSH
19350: LD_INT 0
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: LD_INT 1
19359: NEG
19360: PUSH
19361: LD_INT 1
19363: NEG
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 1
19371: NEG
19372: PUSH
19373: LD_INT 2
19375: NEG
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 0
19383: PUSH
19384: LD_INT 2
19386: NEG
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: LD_INT 1
19394: PUSH
19395: LD_INT 1
19397: NEG
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 2
19405: PUSH
19406: LD_INT 0
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 2
19415: PUSH
19416: LD_INT 1
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 2
19425: PUSH
19426: LD_INT 2
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: LD_INT 1
19435: PUSH
19436: LD_INT 2
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PUSH
19443: LD_INT 0
19445: PUSH
19446: LD_INT 2
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PUSH
19453: LD_INT 1
19455: NEG
19456: PUSH
19457: LD_INT 1
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 2
19466: NEG
19467: PUSH
19468: LD_INT 0
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 2
19477: NEG
19478: PUSH
19479: LD_INT 1
19481: NEG
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 2
19489: NEG
19490: PUSH
19491: LD_INT 2
19493: NEG
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19520: LD_ADDR_VAR 0 22
19524: PUSH
19525: LD_INT 0
19527: PUSH
19528: LD_INT 0
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: LD_INT 0
19537: PUSH
19538: LD_INT 1
19540: NEG
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: LD_INT 1
19548: PUSH
19549: LD_INT 0
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 1
19558: PUSH
19559: LD_INT 1
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: LD_INT 0
19568: PUSH
19569: LD_INT 1
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 1
19578: NEG
19579: PUSH
19580: LD_INT 0
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 1
19589: NEG
19590: PUSH
19591: LD_INT 1
19593: NEG
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 1
19601: NEG
19602: PUSH
19603: LD_INT 2
19605: NEG
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 0
19613: PUSH
19614: LD_INT 2
19616: NEG
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: LD_INT 1
19624: PUSH
19625: LD_INT 1
19627: NEG
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 2
19635: PUSH
19636: LD_INT 0
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 2
19645: PUSH
19646: LD_INT 1
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 2
19655: PUSH
19656: LD_INT 2
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 1
19665: PUSH
19666: LD_INT 2
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: LD_INT 0
19675: PUSH
19676: LD_INT 2
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: LD_INT 1
19685: NEG
19686: PUSH
19687: LD_INT 1
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 2
19696: NEG
19697: PUSH
19698: LD_INT 0
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: LD_INT 2
19707: NEG
19708: PUSH
19709: LD_INT 1
19711: NEG
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: LD_INT 2
19719: NEG
19720: PUSH
19721: LD_INT 2
19723: NEG
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19750: LD_ADDR_VAR 0 23
19754: PUSH
19755: LD_INT 0
19757: PUSH
19758: LD_INT 0
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 0
19767: PUSH
19768: LD_INT 1
19770: NEG
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: LD_INT 1
19778: PUSH
19779: LD_INT 0
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: PUSH
19786: LD_INT 1
19788: PUSH
19789: LD_INT 1
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 0
19798: PUSH
19799: LD_INT 1
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PUSH
19806: LD_INT 1
19808: NEG
19809: PUSH
19810: LD_INT 0
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PUSH
19817: LD_INT 1
19819: NEG
19820: PUSH
19821: LD_INT 1
19823: NEG
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 1
19831: NEG
19832: PUSH
19833: LD_INT 2
19835: NEG
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 0
19843: PUSH
19844: LD_INT 2
19846: NEG
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: LD_INT 1
19854: PUSH
19855: LD_INT 1
19857: NEG
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 2
19865: PUSH
19866: LD_INT 0
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 2
19875: PUSH
19876: LD_INT 1
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: LD_INT 2
19885: PUSH
19886: LD_INT 2
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: LD_INT 1
19895: PUSH
19896: LD_INT 2
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: LD_INT 0
19905: PUSH
19906: LD_INT 2
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 1
19915: NEG
19916: PUSH
19917: LD_INT 1
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 2
19926: NEG
19927: PUSH
19928: LD_INT 0
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 2
19937: NEG
19938: PUSH
19939: LD_INT 1
19941: NEG
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PUSH
19947: LD_INT 2
19949: NEG
19950: PUSH
19951: LD_INT 2
19953: NEG
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 2
19961: NEG
19962: PUSH
19963: LD_INT 3
19965: NEG
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 1
19973: NEG
19974: PUSH
19975: LD_INT 3
19977: NEG
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 1
19985: PUSH
19986: LD_INT 2
19988: NEG
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 2
19996: PUSH
19997: LD_INT 1
19999: NEG
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20030: LD_ADDR_VAR 0 24
20034: PUSH
20035: LD_INT 0
20037: PUSH
20038: LD_INT 0
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 0
20047: PUSH
20048: LD_INT 1
20050: NEG
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PUSH
20056: LD_INT 1
20058: PUSH
20059: LD_INT 0
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PUSH
20066: LD_INT 1
20068: PUSH
20069: LD_INT 1
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 0
20078: PUSH
20079: LD_INT 1
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 1
20088: NEG
20089: PUSH
20090: LD_INT 0
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 1
20099: NEG
20100: PUSH
20101: LD_INT 1
20103: NEG
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 1
20111: NEG
20112: PUSH
20113: LD_INT 2
20115: NEG
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 0
20123: PUSH
20124: LD_INT 2
20126: NEG
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 1
20134: PUSH
20135: LD_INT 1
20137: NEG
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 2
20145: PUSH
20146: LD_INT 0
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 2
20155: PUSH
20156: LD_INT 1
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 2
20165: PUSH
20166: LD_INT 2
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 1
20175: PUSH
20176: LD_INT 2
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 0
20185: PUSH
20186: LD_INT 2
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 1
20195: NEG
20196: PUSH
20197: LD_INT 1
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 2
20206: NEG
20207: PUSH
20208: LD_INT 0
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 2
20217: NEG
20218: PUSH
20219: LD_INT 1
20221: NEG
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: LD_INT 2
20229: NEG
20230: PUSH
20231: LD_INT 2
20233: NEG
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: LD_INT 1
20241: PUSH
20242: LD_INT 2
20244: NEG
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: LD_INT 2
20252: PUSH
20253: LD_INT 1
20255: NEG
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 3
20263: PUSH
20264: LD_INT 1
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 3
20273: PUSH
20274: LD_INT 2
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20306: LD_ADDR_VAR 0 25
20310: PUSH
20311: LD_INT 0
20313: PUSH
20314: LD_INT 0
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: PUSH
20321: LD_INT 0
20323: PUSH
20324: LD_INT 1
20326: NEG
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 1
20334: PUSH
20335: LD_INT 0
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 1
20344: PUSH
20345: LD_INT 1
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: LD_INT 0
20354: PUSH
20355: LD_INT 1
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_INT 1
20364: NEG
20365: PUSH
20366: LD_INT 0
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PUSH
20373: LD_INT 1
20375: NEG
20376: PUSH
20377: LD_INT 1
20379: NEG
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 1
20387: NEG
20388: PUSH
20389: LD_INT 2
20391: NEG
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: LD_INT 0
20399: PUSH
20400: LD_INT 2
20402: NEG
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 1
20410: PUSH
20411: LD_INT 1
20413: NEG
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 2
20421: PUSH
20422: LD_INT 0
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 2
20431: PUSH
20432: LD_INT 1
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 2
20441: PUSH
20442: LD_INT 2
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 1
20451: PUSH
20452: LD_INT 2
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: LD_INT 0
20461: PUSH
20462: LD_INT 2
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: LD_INT 1
20471: NEG
20472: PUSH
20473: LD_INT 1
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PUSH
20480: LD_INT 2
20482: NEG
20483: PUSH
20484: LD_INT 0
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: PUSH
20491: LD_INT 2
20493: NEG
20494: PUSH
20495: LD_INT 1
20497: NEG
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 2
20505: NEG
20506: PUSH
20507: LD_INT 2
20509: NEG
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 3
20517: PUSH
20518: LD_INT 1
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 3
20527: PUSH
20528: LD_INT 2
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 2
20537: PUSH
20538: LD_INT 3
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PUSH
20545: LD_INT 1
20547: PUSH
20548: LD_INT 3
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20580: LD_ADDR_VAR 0 26
20584: PUSH
20585: LD_INT 0
20587: PUSH
20588: LD_INT 0
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 0
20597: PUSH
20598: LD_INT 1
20600: NEG
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PUSH
20606: LD_INT 1
20608: PUSH
20609: LD_INT 0
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 1
20618: PUSH
20619: LD_INT 1
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 0
20628: PUSH
20629: LD_INT 1
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 1
20638: NEG
20639: PUSH
20640: LD_INT 0
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 1
20649: NEG
20650: PUSH
20651: LD_INT 1
20653: NEG
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 1
20661: NEG
20662: PUSH
20663: LD_INT 2
20665: NEG
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 0
20673: PUSH
20674: LD_INT 2
20676: NEG
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 1
20684: PUSH
20685: LD_INT 1
20687: NEG
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 2
20695: PUSH
20696: LD_INT 0
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 2
20705: PUSH
20706: LD_INT 1
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 2
20715: PUSH
20716: LD_INT 2
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 1
20725: PUSH
20726: LD_INT 2
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 0
20735: PUSH
20736: LD_INT 2
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 1
20745: NEG
20746: PUSH
20747: LD_INT 1
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: LD_INT 2
20756: NEG
20757: PUSH
20758: LD_INT 0
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: PUSH
20765: LD_INT 2
20767: NEG
20768: PUSH
20769: LD_INT 1
20771: NEG
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 2
20779: NEG
20780: PUSH
20781: LD_INT 2
20783: NEG
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 2
20791: PUSH
20792: LD_INT 3
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: LD_INT 1
20801: PUSH
20802: LD_INT 3
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: LD_INT 1
20811: NEG
20812: PUSH
20813: LD_INT 2
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 2
20822: NEG
20823: PUSH
20824: LD_INT 1
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20856: LD_ADDR_VAR 0 27
20860: PUSH
20861: LD_INT 0
20863: PUSH
20864: LD_INT 0
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 0
20873: PUSH
20874: LD_INT 1
20876: NEG
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 1
20884: PUSH
20885: LD_INT 0
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 1
20894: PUSH
20895: LD_INT 1
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: LD_INT 0
20904: PUSH
20905: LD_INT 1
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PUSH
20912: LD_INT 1
20914: NEG
20915: PUSH
20916: LD_INT 0
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 1
20925: NEG
20926: PUSH
20927: LD_INT 1
20929: NEG
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: LD_INT 1
20937: NEG
20938: PUSH
20939: LD_INT 2
20941: NEG
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 0
20949: PUSH
20950: LD_INT 2
20952: NEG
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 1
20960: PUSH
20961: LD_INT 1
20963: NEG
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 2
20971: PUSH
20972: LD_INT 0
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: PUSH
20979: LD_INT 2
20981: PUSH
20982: LD_INT 1
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: LD_INT 2
20991: PUSH
20992: LD_INT 2
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 1
21001: PUSH
21002: LD_INT 2
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: LD_INT 0
21011: PUSH
21012: LD_INT 2
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: LD_INT 1
21021: NEG
21022: PUSH
21023: LD_INT 1
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 2
21032: NEG
21033: PUSH
21034: LD_INT 0
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 2
21043: NEG
21044: PUSH
21045: LD_INT 1
21047: NEG
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: LD_INT 2
21055: NEG
21056: PUSH
21057: LD_INT 2
21059: NEG
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PUSH
21065: LD_INT 1
21067: NEG
21068: PUSH
21069: LD_INT 2
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 2
21078: NEG
21079: PUSH
21080: LD_INT 1
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 3
21089: NEG
21090: PUSH
21091: LD_INT 1
21093: NEG
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 3
21101: NEG
21102: PUSH
21103: LD_INT 2
21105: NEG
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21136: LD_ADDR_VAR 0 28
21140: PUSH
21141: LD_INT 0
21143: PUSH
21144: LD_INT 0
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 0
21153: PUSH
21154: LD_INT 1
21156: NEG
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 1
21164: PUSH
21165: LD_INT 0
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: LD_INT 1
21174: PUSH
21175: LD_INT 1
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 0
21184: PUSH
21185: LD_INT 1
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 1
21194: NEG
21195: PUSH
21196: LD_INT 0
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 1
21205: NEG
21206: PUSH
21207: LD_INT 1
21209: NEG
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 1
21217: NEG
21218: PUSH
21219: LD_INT 2
21221: NEG
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 0
21229: PUSH
21230: LD_INT 2
21232: NEG
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 1
21240: PUSH
21241: LD_INT 1
21243: NEG
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 2
21251: PUSH
21252: LD_INT 0
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 2
21261: PUSH
21262: LD_INT 1
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 2
21271: PUSH
21272: LD_INT 2
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 1
21281: PUSH
21282: LD_INT 2
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 0
21291: PUSH
21292: LD_INT 2
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 1
21301: NEG
21302: PUSH
21303: LD_INT 1
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 2
21312: NEG
21313: PUSH
21314: LD_INT 0
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 2
21323: NEG
21324: PUSH
21325: LD_INT 1
21327: NEG
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 2
21335: NEG
21336: PUSH
21337: LD_INT 2
21339: NEG
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 2
21347: NEG
21348: PUSH
21349: LD_INT 3
21351: NEG
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 1
21359: NEG
21360: PUSH
21361: LD_INT 3
21363: NEG
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 3
21371: NEG
21372: PUSH
21373: LD_INT 1
21375: NEG
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: LD_INT 3
21383: NEG
21384: PUSH
21385: LD_INT 2
21387: NEG
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21418: LD_ADDR_VAR 0 29
21422: PUSH
21423: LD_INT 0
21425: PUSH
21426: LD_INT 0
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 0
21435: PUSH
21436: LD_INT 1
21438: NEG
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 1
21446: PUSH
21447: LD_INT 0
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 1
21456: PUSH
21457: LD_INT 1
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 0
21466: PUSH
21467: LD_INT 1
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 1
21476: NEG
21477: PUSH
21478: LD_INT 0
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 1
21487: NEG
21488: PUSH
21489: LD_INT 1
21491: NEG
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 1
21499: NEG
21500: PUSH
21501: LD_INT 2
21503: NEG
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 0
21511: PUSH
21512: LD_INT 2
21514: NEG
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 1
21522: PUSH
21523: LD_INT 1
21525: NEG
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 2
21533: PUSH
21534: LD_INT 0
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 2
21543: PUSH
21544: LD_INT 1
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 1
21553: PUSH
21554: LD_INT 2
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 0
21563: PUSH
21564: LD_INT 2
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: LD_INT 1
21573: NEG
21574: PUSH
21575: LD_INT 1
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: LD_INT 2
21584: NEG
21585: PUSH
21586: LD_INT 1
21588: NEG
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: LD_INT 2
21596: NEG
21597: PUSH
21598: LD_INT 2
21600: NEG
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 2
21608: NEG
21609: PUSH
21610: LD_INT 3
21612: NEG
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 2
21620: PUSH
21621: LD_INT 1
21623: NEG
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 3
21631: PUSH
21632: LD_INT 1
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 1
21641: PUSH
21642: LD_INT 3
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 1
21651: NEG
21652: PUSH
21653: LD_INT 2
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 3
21662: NEG
21663: PUSH
21664: LD_INT 2
21666: NEG
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21697: LD_ADDR_VAR 0 30
21701: PUSH
21702: LD_INT 0
21704: PUSH
21705: LD_INT 0
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 0
21714: PUSH
21715: LD_INT 1
21717: NEG
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 1
21725: PUSH
21726: LD_INT 0
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 1
21735: PUSH
21736: LD_INT 1
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 0
21745: PUSH
21746: LD_INT 1
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 1
21755: NEG
21756: PUSH
21757: LD_INT 0
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: LD_INT 1
21766: NEG
21767: PUSH
21768: LD_INT 1
21770: NEG
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PUSH
21776: LD_INT 1
21778: NEG
21779: PUSH
21780: LD_INT 2
21782: NEG
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: PUSH
21788: LD_INT 0
21790: PUSH
21791: LD_INT 2
21793: NEG
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 1
21801: PUSH
21802: LD_INT 1
21804: NEG
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 2
21812: PUSH
21813: LD_INT 0
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 2
21822: PUSH
21823: LD_INT 1
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 2
21832: PUSH
21833: LD_INT 2
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 1
21842: PUSH
21843: LD_INT 2
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 1
21852: NEG
21853: PUSH
21854: LD_INT 1
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 2
21863: NEG
21864: PUSH
21865: LD_INT 0
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PUSH
21872: LD_INT 2
21874: NEG
21875: PUSH
21876: LD_INT 1
21878: NEG
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: LD_INT 1
21886: NEG
21887: PUSH
21888: LD_INT 3
21890: NEG
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: LD_INT 1
21898: PUSH
21899: LD_INT 2
21901: NEG
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PUSH
21907: LD_INT 3
21909: PUSH
21910: LD_INT 2
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 2
21919: PUSH
21920: LD_INT 3
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: LD_INT 2
21929: NEG
21930: PUSH
21931: LD_INT 1
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 3
21940: NEG
21941: PUSH
21942: LD_INT 1
21944: NEG
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21975: LD_ADDR_VAR 0 31
21979: PUSH
21980: LD_INT 0
21982: PUSH
21983: LD_INT 0
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 0
21992: PUSH
21993: LD_INT 1
21995: NEG
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 1
22003: PUSH
22004: LD_INT 0
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 1
22013: PUSH
22014: LD_INT 1
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 0
22023: PUSH
22024: LD_INT 1
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 1
22033: NEG
22034: PUSH
22035: LD_INT 0
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: PUSH
22042: LD_INT 1
22044: NEG
22045: PUSH
22046: LD_INT 1
22048: NEG
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 1
22056: NEG
22057: PUSH
22058: LD_INT 2
22060: NEG
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 1
22068: PUSH
22069: LD_INT 1
22071: NEG
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PUSH
22077: LD_INT 2
22079: PUSH
22080: LD_INT 0
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 2
22089: PUSH
22090: LD_INT 1
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 2
22099: PUSH
22100: LD_INT 2
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: LD_INT 1
22109: PUSH
22110: LD_INT 2
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: PUSH
22117: LD_INT 0
22119: PUSH
22120: LD_INT 2
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PUSH
22127: LD_INT 1
22129: NEG
22130: PUSH
22131: LD_INT 1
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 2
22140: NEG
22141: PUSH
22142: LD_INT 1
22144: NEG
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 2
22152: NEG
22153: PUSH
22154: LD_INT 2
22156: NEG
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 2
22164: NEG
22165: PUSH
22166: LD_INT 3
22168: NEG
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 2
22176: PUSH
22177: LD_INT 1
22179: NEG
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: LD_INT 3
22187: PUSH
22188: LD_INT 1
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: LD_INT 1
22197: PUSH
22198: LD_INT 3
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 1
22207: NEG
22208: PUSH
22209: LD_INT 2
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 3
22218: NEG
22219: PUSH
22220: LD_INT 2
22222: NEG
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22253: LD_ADDR_VAR 0 32
22257: PUSH
22258: LD_INT 0
22260: PUSH
22261: LD_INT 0
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 0
22270: PUSH
22271: LD_INT 1
22273: NEG
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 1
22281: PUSH
22282: LD_INT 0
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 1
22291: PUSH
22292: LD_INT 1
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 0
22301: PUSH
22302: LD_INT 1
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 1
22311: NEG
22312: PUSH
22313: LD_INT 0
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 1
22322: NEG
22323: PUSH
22324: LD_INT 1
22326: NEG
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 1
22334: NEG
22335: PUSH
22336: LD_INT 2
22338: NEG
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 0
22346: PUSH
22347: LD_INT 2
22349: NEG
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 1
22357: PUSH
22358: LD_INT 1
22360: NEG
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 2
22368: PUSH
22369: LD_INT 1
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 2
22378: PUSH
22379: LD_INT 2
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 1
22388: PUSH
22389: LD_INT 2
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 0
22398: PUSH
22399: LD_INT 2
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 1
22408: NEG
22409: PUSH
22410: LD_INT 1
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 2
22419: NEG
22420: PUSH
22421: LD_INT 0
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 2
22430: NEG
22431: PUSH
22432: LD_INT 1
22434: NEG
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 1
22442: NEG
22443: PUSH
22444: LD_INT 3
22446: NEG
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 1
22454: PUSH
22455: LD_INT 2
22457: NEG
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 3
22465: PUSH
22466: LD_INT 2
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: LD_INT 2
22475: PUSH
22476: LD_INT 3
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PUSH
22483: LD_INT 2
22485: NEG
22486: PUSH
22487: LD_INT 1
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: PUSH
22494: LD_INT 3
22496: NEG
22497: PUSH
22498: LD_INT 1
22500: NEG
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22531: LD_ADDR_VAR 0 33
22535: PUSH
22536: LD_INT 0
22538: PUSH
22539: LD_INT 0
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: LD_INT 0
22548: PUSH
22549: LD_INT 1
22551: NEG
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 1
22559: PUSH
22560: LD_INT 0
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 1
22569: PUSH
22570: LD_INT 1
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 0
22579: PUSH
22580: LD_INT 1
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 1
22589: NEG
22590: PUSH
22591: LD_INT 0
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 1
22600: NEG
22601: PUSH
22602: LD_INT 1
22604: NEG
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: LD_INT 1
22612: NEG
22613: PUSH
22614: LD_INT 2
22616: NEG
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 1
22624: PUSH
22625: LD_INT 1
22627: NEG
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 2
22635: PUSH
22636: LD_INT 0
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 2
22645: PUSH
22646: LD_INT 1
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 1
22655: PUSH
22656: LD_INT 2
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: LD_INT 0
22665: PUSH
22666: LD_INT 2
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PUSH
22673: LD_INT 1
22675: NEG
22676: PUSH
22677: LD_INT 1
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: PUSH
22684: LD_INT 2
22686: NEG
22687: PUSH
22688: LD_INT 0
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 2
22697: NEG
22698: PUSH
22699: LD_INT 1
22701: NEG
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 2
22709: NEG
22710: PUSH
22711: LD_INT 2
22713: NEG
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: LD_INT 2
22721: NEG
22722: PUSH
22723: LD_INT 3
22725: NEG
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 2
22733: PUSH
22734: LD_INT 1
22736: NEG
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 3
22744: PUSH
22745: LD_INT 1
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: LD_INT 1
22754: PUSH
22755: LD_INT 3
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 1
22764: NEG
22765: PUSH
22766: LD_INT 2
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 3
22775: NEG
22776: PUSH
22777: LD_INT 2
22779: NEG
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22810: LD_ADDR_VAR 0 34
22814: PUSH
22815: LD_INT 0
22817: PUSH
22818: LD_INT 0
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: LD_INT 0
22827: PUSH
22828: LD_INT 1
22830: NEG
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PUSH
22836: LD_INT 1
22838: PUSH
22839: LD_INT 0
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PUSH
22846: LD_INT 1
22848: PUSH
22849: LD_INT 1
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: LD_INT 0
22858: PUSH
22859: LD_INT 1
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 1
22868: NEG
22869: PUSH
22870: LD_INT 0
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: LD_INT 1
22879: NEG
22880: PUSH
22881: LD_INT 1
22883: NEG
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: LD_INT 1
22891: NEG
22892: PUSH
22893: LD_INT 2
22895: NEG
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 0
22903: PUSH
22904: LD_INT 2
22906: NEG
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 1
22914: PUSH
22915: LD_INT 1
22917: NEG
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: LD_INT 2
22925: PUSH
22926: LD_INT 1
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 2
22935: PUSH
22936: LD_INT 2
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 1
22945: PUSH
22946: LD_INT 2
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 1
22955: NEG
22956: PUSH
22957: LD_INT 1
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: LD_INT 2
22966: NEG
22967: PUSH
22968: LD_INT 0
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 2
22977: NEG
22978: PUSH
22979: LD_INT 1
22981: NEG
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 2
22989: NEG
22990: PUSH
22991: LD_INT 2
22993: NEG
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PUSH
22999: LD_INT 1
23001: NEG
23002: PUSH
23003: LD_INT 3
23005: NEG
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 1
23013: PUSH
23014: LD_INT 2
23016: NEG
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 3
23024: PUSH
23025: LD_INT 2
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 2
23034: PUSH
23035: LD_INT 3
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 2
23044: NEG
23045: PUSH
23046: LD_INT 1
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 3
23055: NEG
23056: PUSH
23057: LD_INT 1
23059: NEG
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23090: LD_ADDR_VAR 0 35
23094: PUSH
23095: LD_INT 0
23097: PUSH
23098: LD_INT 0
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 0
23107: PUSH
23108: LD_INT 1
23110: NEG
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: LD_INT 1
23118: PUSH
23119: LD_INT 0
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 1
23128: PUSH
23129: LD_INT 1
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 0
23138: PUSH
23139: LD_INT 1
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 1
23148: NEG
23149: PUSH
23150: LD_INT 0
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 1
23159: NEG
23160: PUSH
23161: LD_INT 1
23163: NEG
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 2
23171: PUSH
23172: LD_INT 1
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 2
23181: NEG
23182: PUSH
23183: LD_INT 1
23185: NEG
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23202: LD_ADDR_VAR 0 36
23206: PUSH
23207: LD_INT 0
23209: PUSH
23210: LD_INT 0
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 0
23219: PUSH
23220: LD_INT 1
23222: NEG
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 1
23230: PUSH
23231: LD_INT 0
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 1
23240: PUSH
23241: LD_INT 1
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 0
23250: PUSH
23251: LD_INT 1
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 1
23260: NEG
23261: PUSH
23262: LD_INT 0
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 1
23271: NEG
23272: PUSH
23273: LD_INT 1
23275: NEG
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 1
23283: NEG
23284: PUSH
23285: LD_INT 2
23287: NEG
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: LD_INT 1
23295: PUSH
23296: LD_INT 2
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23314: LD_ADDR_VAR 0 37
23318: PUSH
23319: LD_INT 0
23321: PUSH
23322: LD_INT 0
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: LD_INT 0
23331: PUSH
23332: LD_INT 1
23334: NEG
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PUSH
23340: LD_INT 1
23342: PUSH
23343: LD_INT 0
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 1
23352: PUSH
23353: LD_INT 1
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 0
23362: PUSH
23363: LD_INT 1
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: LD_INT 1
23372: NEG
23373: PUSH
23374: LD_INT 0
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 1
23383: NEG
23384: PUSH
23385: LD_INT 1
23387: NEG
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: LD_INT 1
23395: PUSH
23396: LD_INT 1
23398: NEG
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: LD_INT 1
23406: NEG
23407: PUSH
23408: LD_INT 1
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23426: LD_ADDR_VAR 0 38
23430: PUSH
23431: LD_INT 0
23433: PUSH
23434: LD_INT 0
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 0
23443: PUSH
23444: LD_INT 1
23446: NEG
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 1
23454: PUSH
23455: LD_INT 0
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 1
23464: PUSH
23465: LD_INT 1
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 0
23474: PUSH
23475: LD_INT 1
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: LD_INT 1
23484: NEG
23485: PUSH
23486: LD_INT 0
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 1
23495: NEG
23496: PUSH
23497: LD_INT 1
23499: NEG
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PUSH
23505: LD_INT 2
23507: PUSH
23508: LD_INT 1
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 2
23517: NEG
23518: PUSH
23519: LD_INT 1
23521: NEG
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23538: LD_ADDR_VAR 0 39
23542: PUSH
23543: LD_INT 0
23545: PUSH
23546: LD_INT 0
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: LD_INT 0
23555: PUSH
23556: LD_INT 1
23558: NEG
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 1
23566: PUSH
23567: LD_INT 0
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 1
23576: PUSH
23577: LD_INT 1
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 0
23586: PUSH
23587: LD_INT 1
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: LD_INT 1
23596: NEG
23597: PUSH
23598: LD_INT 0
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 1
23607: NEG
23608: PUSH
23609: LD_INT 1
23611: NEG
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PUSH
23617: LD_INT 1
23619: NEG
23620: PUSH
23621: LD_INT 2
23623: NEG
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 1
23631: PUSH
23632: LD_INT 2
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23650: LD_ADDR_VAR 0 40
23654: PUSH
23655: LD_INT 0
23657: PUSH
23658: LD_INT 0
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 0
23667: PUSH
23668: LD_INT 1
23670: NEG
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 1
23678: PUSH
23679: LD_INT 0
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: LD_INT 1
23688: PUSH
23689: LD_INT 1
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 0
23698: PUSH
23699: LD_INT 1
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 1
23708: NEG
23709: PUSH
23710: LD_INT 0
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: LD_INT 1
23719: NEG
23720: PUSH
23721: LD_INT 1
23723: NEG
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 1
23731: PUSH
23732: LD_INT 1
23734: NEG
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 1
23742: NEG
23743: PUSH
23744: LD_INT 1
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23762: LD_ADDR_VAR 0 41
23766: PUSH
23767: LD_INT 0
23769: PUSH
23770: LD_INT 0
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: PUSH
23777: LD_INT 0
23779: PUSH
23780: LD_INT 1
23782: NEG
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 1
23790: PUSH
23791: LD_INT 0
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 1
23800: PUSH
23801: LD_INT 1
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: LD_INT 0
23810: PUSH
23811: LD_INT 1
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: LD_INT 1
23820: NEG
23821: PUSH
23822: LD_INT 0
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 1
23831: NEG
23832: PUSH
23833: LD_INT 1
23835: NEG
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 1
23843: NEG
23844: PUSH
23845: LD_INT 2
23847: NEG
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 1
23855: PUSH
23856: LD_INT 1
23858: NEG
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 2
23866: PUSH
23867: LD_INT 0
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 2
23876: PUSH
23877: LD_INT 1
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 2
23886: PUSH
23887: LD_INT 2
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 1
23896: PUSH
23897: LD_INT 2
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 1
23906: NEG
23907: PUSH
23908: LD_INT 1
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 2
23917: NEG
23918: PUSH
23919: LD_INT 0
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: LD_INT 2
23928: NEG
23929: PUSH
23930: LD_INT 1
23932: NEG
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 2
23940: NEG
23941: PUSH
23942: LD_INT 2
23944: NEG
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: LD_INT 2
23952: NEG
23953: PUSH
23954: LD_INT 3
23956: NEG
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: LD_INT 2
23964: PUSH
23965: LD_INT 1
23967: NEG
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 3
23975: PUSH
23976: LD_INT 0
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 3
23985: PUSH
23986: LD_INT 1
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 3
23995: PUSH
23996: LD_INT 2
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: LD_INT 3
24005: PUSH
24006: LD_INT 3
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 2
24015: PUSH
24016: LD_INT 3
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 2
24025: NEG
24026: PUSH
24027: LD_INT 1
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 3
24036: NEG
24037: PUSH
24038: LD_INT 0
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 3
24047: NEG
24048: PUSH
24049: LD_INT 1
24051: NEG
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 3
24059: NEG
24060: PUSH
24061: LD_INT 2
24063: NEG
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 3
24071: NEG
24072: PUSH
24073: LD_INT 3
24075: NEG
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24112: LD_ADDR_VAR 0 42
24116: PUSH
24117: LD_INT 0
24119: PUSH
24120: LD_INT 0
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PUSH
24127: LD_INT 0
24129: PUSH
24130: LD_INT 1
24132: NEG
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 1
24140: PUSH
24141: LD_INT 0
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: LD_INT 1
24150: PUSH
24151: LD_INT 1
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 0
24160: PUSH
24161: LD_INT 1
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 1
24170: NEG
24171: PUSH
24172: LD_INT 0
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 1
24181: NEG
24182: PUSH
24183: LD_INT 1
24185: NEG
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 1
24193: NEG
24194: PUSH
24195: LD_INT 2
24197: NEG
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 0
24205: PUSH
24206: LD_INT 2
24208: NEG
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 1
24216: PUSH
24217: LD_INT 1
24219: NEG
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 2
24227: PUSH
24228: LD_INT 1
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: LD_INT 2
24237: PUSH
24238: LD_INT 2
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 1
24247: PUSH
24248: LD_INT 2
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 0
24257: PUSH
24258: LD_INT 2
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 1
24267: NEG
24268: PUSH
24269: LD_INT 1
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 2
24278: NEG
24279: PUSH
24280: LD_INT 1
24282: NEG
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 2
24290: NEG
24291: PUSH
24292: LD_INT 2
24294: NEG
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: PUSH
24300: LD_INT 2
24302: NEG
24303: PUSH
24304: LD_INT 3
24306: NEG
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 1
24314: NEG
24315: PUSH
24316: LD_INT 3
24318: NEG
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 0
24326: PUSH
24327: LD_INT 3
24329: NEG
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 1
24337: PUSH
24338: LD_INT 2
24340: NEG
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 3
24348: PUSH
24349: LD_INT 2
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: LD_INT 3
24358: PUSH
24359: LD_INT 3
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 2
24368: PUSH
24369: LD_INT 3
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 1
24378: PUSH
24379: LD_INT 3
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 0
24388: PUSH
24389: LD_INT 3
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 1
24398: NEG
24399: PUSH
24400: LD_INT 2
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 3
24409: NEG
24410: PUSH
24411: LD_INT 2
24413: NEG
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 3
24421: NEG
24422: PUSH
24423: LD_INT 3
24425: NEG
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24462: LD_ADDR_VAR 0 43
24466: PUSH
24467: LD_INT 0
24469: PUSH
24470: LD_INT 0
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 0
24479: PUSH
24480: LD_INT 1
24482: NEG
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: LD_INT 1
24490: PUSH
24491: LD_INT 0
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: LD_INT 1
24500: PUSH
24501: LD_INT 1
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 0
24510: PUSH
24511: LD_INT 1
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: LD_INT 1
24520: NEG
24521: PUSH
24522: LD_INT 0
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 1
24531: NEG
24532: PUSH
24533: LD_INT 1
24535: NEG
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 1
24543: NEG
24544: PUSH
24545: LD_INT 2
24547: NEG
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: LD_INT 0
24555: PUSH
24556: LD_INT 2
24558: NEG
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 1
24566: PUSH
24567: LD_INT 1
24569: NEG
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 2
24577: PUSH
24578: LD_INT 0
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 2
24587: PUSH
24588: LD_INT 1
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 1
24597: PUSH
24598: LD_INT 2
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 0
24607: PUSH
24608: LD_INT 2
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 1
24617: NEG
24618: PUSH
24619: LD_INT 1
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 2
24628: NEG
24629: PUSH
24630: LD_INT 0
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 2
24639: NEG
24640: PUSH
24641: LD_INT 1
24643: NEG
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 1
24651: NEG
24652: PUSH
24653: LD_INT 3
24655: NEG
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 0
24663: PUSH
24664: LD_INT 3
24666: NEG
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 1
24674: PUSH
24675: LD_INT 2
24677: NEG
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 2
24685: PUSH
24686: LD_INT 1
24688: NEG
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 3
24696: PUSH
24697: LD_INT 0
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 3
24706: PUSH
24707: LD_INT 1
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 1
24716: PUSH
24717: LD_INT 3
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 0
24726: PUSH
24727: LD_INT 3
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 1
24736: NEG
24737: PUSH
24738: LD_INT 2
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PUSH
24745: LD_INT 2
24747: NEG
24748: PUSH
24749: LD_INT 1
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 3
24758: NEG
24759: PUSH
24760: LD_INT 0
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 3
24769: NEG
24770: PUSH
24771: LD_INT 1
24773: NEG
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24810: LD_ADDR_VAR 0 44
24814: PUSH
24815: LD_INT 0
24817: PUSH
24818: LD_INT 0
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 0
24827: PUSH
24828: LD_INT 1
24830: NEG
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 1
24838: PUSH
24839: LD_INT 0
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 1
24848: PUSH
24849: LD_INT 1
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: PUSH
24856: LD_INT 0
24858: PUSH
24859: LD_INT 1
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 1
24868: NEG
24869: PUSH
24870: LD_INT 0
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 1
24879: NEG
24880: PUSH
24881: LD_INT 1
24883: NEG
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 1
24891: NEG
24892: PUSH
24893: LD_INT 2
24895: NEG
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 1
24903: PUSH
24904: LD_INT 1
24906: NEG
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 2
24914: PUSH
24915: LD_INT 0
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 2
24924: PUSH
24925: LD_INT 1
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 2
24934: PUSH
24935: LD_INT 2
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 1
24944: PUSH
24945: LD_INT 2
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 1
24954: NEG
24955: PUSH
24956: LD_INT 1
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PUSH
24963: LD_INT 2
24965: NEG
24966: PUSH
24967: LD_INT 0
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PUSH
24974: LD_INT 2
24976: NEG
24977: PUSH
24978: LD_INT 1
24980: NEG
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 2
24988: NEG
24989: PUSH
24990: LD_INT 2
24992: NEG
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 2
25000: NEG
25001: PUSH
25002: LD_INT 3
25004: NEG
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 2
25012: PUSH
25013: LD_INT 1
25015: NEG
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 3
25023: PUSH
25024: LD_INT 0
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 3
25033: PUSH
25034: LD_INT 1
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 3
25043: PUSH
25044: LD_INT 2
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 3
25053: PUSH
25054: LD_INT 3
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 2
25063: PUSH
25064: LD_INT 3
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 2
25073: NEG
25074: PUSH
25075: LD_INT 1
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: LD_INT 3
25084: NEG
25085: PUSH
25086: LD_INT 0
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 3
25095: NEG
25096: PUSH
25097: LD_INT 1
25099: NEG
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 3
25107: NEG
25108: PUSH
25109: LD_INT 2
25111: NEG
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 3
25119: NEG
25120: PUSH
25121: LD_INT 3
25123: NEG
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25160: LD_ADDR_VAR 0 45
25164: PUSH
25165: LD_INT 0
25167: PUSH
25168: LD_INT 0
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 0
25177: PUSH
25178: LD_INT 1
25180: NEG
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 1
25188: PUSH
25189: LD_INT 0
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 1
25198: PUSH
25199: LD_INT 1
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 0
25208: PUSH
25209: LD_INT 1
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 1
25218: NEG
25219: PUSH
25220: LD_INT 0
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 1
25229: NEG
25230: PUSH
25231: LD_INT 1
25233: NEG
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 1
25241: NEG
25242: PUSH
25243: LD_INT 2
25245: NEG
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 0
25253: PUSH
25254: LD_INT 2
25256: NEG
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 1
25264: PUSH
25265: LD_INT 1
25267: NEG
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 2
25275: PUSH
25276: LD_INT 1
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 2
25285: PUSH
25286: LD_INT 2
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 1
25295: PUSH
25296: LD_INT 2
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 0
25305: PUSH
25306: LD_INT 2
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 1
25315: NEG
25316: PUSH
25317: LD_INT 1
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 2
25326: NEG
25327: PUSH
25328: LD_INT 1
25330: NEG
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 2
25338: NEG
25339: PUSH
25340: LD_INT 2
25342: NEG
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 2
25350: NEG
25351: PUSH
25352: LD_INT 3
25354: NEG
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 1
25362: NEG
25363: PUSH
25364: LD_INT 3
25366: NEG
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 0
25374: PUSH
25375: LD_INT 3
25377: NEG
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 1
25385: PUSH
25386: LD_INT 2
25388: NEG
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 3
25396: PUSH
25397: LD_INT 2
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: PUSH
25404: LD_INT 3
25406: PUSH
25407: LD_INT 3
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 2
25416: PUSH
25417: LD_INT 3
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 1
25426: PUSH
25427: LD_INT 3
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 0
25436: PUSH
25437: LD_INT 3
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 1
25446: NEG
25447: PUSH
25448: LD_INT 2
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 3
25457: NEG
25458: PUSH
25459: LD_INT 2
25461: NEG
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 3
25469: NEG
25470: PUSH
25471: LD_INT 3
25473: NEG
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25510: LD_ADDR_VAR 0 46
25514: PUSH
25515: LD_INT 0
25517: PUSH
25518: LD_INT 0
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 0
25527: PUSH
25528: LD_INT 1
25530: NEG
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 1
25538: PUSH
25539: LD_INT 0
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 1
25548: PUSH
25549: LD_INT 1
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 0
25558: PUSH
25559: LD_INT 1
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 1
25568: NEG
25569: PUSH
25570: LD_INT 0
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 1
25579: NEG
25580: PUSH
25581: LD_INT 1
25583: NEG
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 1
25591: NEG
25592: PUSH
25593: LD_INT 2
25595: NEG
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 0
25603: PUSH
25604: LD_INT 2
25606: NEG
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 1
25614: PUSH
25615: LD_INT 1
25617: NEG
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 2
25625: PUSH
25626: LD_INT 0
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 2
25635: PUSH
25636: LD_INT 1
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 1
25645: PUSH
25646: LD_INT 2
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 0
25655: PUSH
25656: LD_INT 2
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 1
25665: NEG
25666: PUSH
25667: LD_INT 1
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 2
25676: NEG
25677: PUSH
25678: LD_INT 0
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 2
25687: NEG
25688: PUSH
25689: LD_INT 1
25691: NEG
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 1
25699: NEG
25700: PUSH
25701: LD_INT 3
25703: NEG
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 0
25711: PUSH
25712: LD_INT 3
25714: NEG
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 1
25722: PUSH
25723: LD_INT 2
25725: NEG
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 2
25733: PUSH
25734: LD_INT 1
25736: NEG
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 3
25744: PUSH
25745: LD_INT 0
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 3
25754: PUSH
25755: LD_INT 1
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 1
25764: PUSH
25765: LD_INT 3
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 0
25774: PUSH
25775: LD_INT 3
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 1
25784: NEG
25785: PUSH
25786: LD_INT 2
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 2
25795: NEG
25796: PUSH
25797: LD_INT 1
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 3
25806: NEG
25807: PUSH
25808: LD_INT 0
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 3
25817: NEG
25818: PUSH
25819: LD_INT 1
25821: NEG
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25858: LD_ADDR_VAR 0 47
25862: PUSH
25863: LD_INT 0
25865: PUSH
25866: LD_INT 0
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 0
25875: PUSH
25876: LD_INT 1
25878: NEG
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 1
25886: PUSH
25887: LD_INT 0
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 1
25896: PUSH
25897: LD_INT 1
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 0
25906: PUSH
25907: LD_INT 1
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 1
25916: NEG
25917: PUSH
25918: LD_INT 0
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 1
25927: NEG
25928: PUSH
25929: LD_INT 1
25931: NEG
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 1
25939: NEG
25940: PUSH
25941: LD_INT 2
25943: NEG
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 0
25951: PUSH
25952: LD_INT 2
25954: NEG
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 1
25962: PUSH
25963: LD_INT 1
25965: NEG
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 2
25973: NEG
25974: PUSH
25975: LD_INT 1
25977: NEG
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 2
25985: NEG
25986: PUSH
25987: LD_INT 2
25989: NEG
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26009: LD_ADDR_VAR 0 48
26013: PUSH
26014: LD_INT 0
26016: PUSH
26017: LD_INT 0
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 0
26026: PUSH
26027: LD_INT 1
26029: NEG
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 1
26037: PUSH
26038: LD_INT 0
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 1
26047: PUSH
26048: LD_INT 1
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: LD_INT 0
26057: PUSH
26058: LD_INT 1
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 1
26067: NEG
26068: PUSH
26069: LD_INT 0
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 1
26078: NEG
26079: PUSH
26080: LD_INT 1
26082: NEG
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 1
26090: NEG
26091: PUSH
26092: LD_INT 2
26094: NEG
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 0
26102: PUSH
26103: LD_INT 2
26105: NEG
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 1
26113: PUSH
26114: LD_INT 1
26116: NEG
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 2
26124: PUSH
26125: LD_INT 0
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 2
26134: PUSH
26135: LD_INT 1
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26156: LD_ADDR_VAR 0 49
26160: PUSH
26161: LD_INT 0
26163: PUSH
26164: LD_INT 0
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 0
26173: PUSH
26174: LD_INT 1
26176: NEG
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 1
26184: PUSH
26185: LD_INT 0
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 1
26194: PUSH
26195: LD_INT 1
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 0
26204: PUSH
26205: LD_INT 1
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 1
26214: NEG
26215: PUSH
26216: LD_INT 0
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 1
26225: NEG
26226: PUSH
26227: LD_INT 1
26229: NEG
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 1
26237: PUSH
26238: LD_INT 1
26240: NEG
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 2
26248: PUSH
26249: LD_INT 0
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 2
26258: PUSH
26259: LD_INT 1
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 2
26268: PUSH
26269: LD_INT 2
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 1
26278: PUSH
26279: LD_INT 2
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26300: LD_ADDR_VAR 0 50
26304: PUSH
26305: LD_INT 0
26307: PUSH
26308: LD_INT 0
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 0
26317: PUSH
26318: LD_INT 1
26320: NEG
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 1
26328: PUSH
26329: LD_INT 0
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 1
26338: PUSH
26339: LD_INT 1
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 0
26348: PUSH
26349: LD_INT 1
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: LD_INT 1
26358: NEG
26359: PUSH
26360: LD_INT 0
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: LD_INT 1
26369: NEG
26370: PUSH
26371: LD_INT 1
26373: NEG
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 2
26381: PUSH
26382: LD_INT 1
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 2
26391: PUSH
26392: LD_INT 2
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 1
26401: PUSH
26402: LD_INT 2
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 0
26411: PUSH
26412: LD_INT 2
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 1
26421: NEG
26422: PUSH
26423: LD_INT 1
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26444: LD_ADDR_VAR 0 51
26448: PUSH
26449: LD_INT 0
26451: PUSH
26452: LD_INT 0
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 0
26461: PUSH
26462: LD_INT 1
26464: NEG
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 1
26472: PUSH
26473: LD_INT 0
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 1
26482: PUSH
26483: LD_INT 1
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 0
26492: PUSH
26493: LD_INT 1
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 1
26502: NEG
26503: PUSH
26504: LD_INT 0
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 1
26513: NEG
26514: PUSH
26515: LD_INT 1
26517: NEG
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 1
26525: PUSH
26526: LD_INT 2
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 0
26535: PUSH
26536: LD_INT 2
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 1
26545: NEG
26546: PUSH
26547: LD_INT 1
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 2
26556: NEG
26557: PUSH
26558: LD_INT 0
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 2
26567: NEG
26568: PUSH
26569: LD_INT 1
26571: NEG
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26591: LD_ADDR_VAR 0 52
26595: PUSH
26596: LD_INT 0
26598: PUSH
26599: LD_INT 0
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 0
26608: PUSH
26609: LD_INT 1
26611: NEG
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PUSH
26617: LD_INT 1
26619: PUSH
26620: LD_INT 0
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: LD_INT 1
26629: PUSH
26630: LD_INT 1
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 0
26639: PUSH
26640: LD_INT 1
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 1
26649: NEG
26650: PUSH
26651: LD_INT 0
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 1
26660: NEG
26661: PUSH
26662: LD_INT 1
26664: NEG
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 1
26672: NEG
26673: PUSH
26674: LD_INT 2
26676: NEG
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 1
26684: NEG
26685: PUSH
26686: LD_INT 1
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 2
26695: NEG
26696: PUSH
26697: LD_INT 0
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 2
26706: NEG
26707: PUSH
26708: LD_INT 1
26710: NEG
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 2
26718: NEG
26719: PUSH
26720: LD_INT 2
26722: NEG
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26742: LD_ADDR_VAR 0 53
26746: PUSH
26747: LD_INT 0
26749: PUSH
26750: LD_INT 0
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 0
26759: PUSH
26760: LD_INT 1
26762: NEG
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 1
26770: PUSH
26771: LD_INT 0
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: LD_INT 1
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 0
26790: PUSH
26791: LD_INT 1
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 1
26800: NEG
26801: PUSH
26802: LD_INT 0
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 1
26811: NEG
26812: PUSH
26813: LD_INT 1
26815: NEG
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 1
26823: NEG
26824: PUSH
26825: LD_INT 2
26827: NEG
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: LD_INT 2
26838: NEG
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 1
26846: PUSH
26847: LD_INT 1
26849: NEG
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 2
26857: PUSH
26858: LD_INT 0
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 2
26867: PUSH
26868: LD_INT 1
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 2
26877: PUSH
26878: LD_INT 2
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 1
26887: PUSH
26888: LD_INT 2
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 0
26897: PUSH
26898: LD_INT 2
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 1
26907: NEG
26908: PUSH
26909: LD_INT 1
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 2
26918: NEG
26919: PUSH
26920: LD_INT 0
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 2
26929: NEG
26930: PUSH
26931: LD_INT 1
26933: NEG
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 2
26941: NEG
26942: PUSH
26943: LD_INT 2
26945: NEG
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26972: LD_ADDR_VAR 0 54
26976: PUSH
26977: LD_INT 0
26979: PUSH
26980: LD_INT 0
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 0
26989: PUSH
26990: LD_INT 1
26992: NEG
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 1
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 1
27010: PUSH
27011: LD_INT 1
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 0
27020: PUSH
27021: LD_INT 1
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 1
27030: NEG
27031: PUSH
27032: LD_INT 0
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 1
27041: NEG
27042: PUSH
27043: LD_INT 1
27045: NEG
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 1
27053: NEG
27054: PUSH
27055: LD_INT 2
27057: NEG
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 0
27065: PUSH
27066: LD_INT 2
27068: NEG
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 1
27076: PUSH
27077: LD_INT 1
27079: NEG
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 2
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 2
27097: PUSH
27098: LD_INT 1
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 2
27107: PUSH
27108: LD_INT 2
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 1
27117: PUSH
27118: LD_INT 2
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 0
27127: PUSH
27128: LD_INT 2
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 1
27137: NEG
27138: PUSH
27139: LD_INT 1
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 2
27148: NEG
27149: PUSH
27150: LD_INT 0
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 2
27159: NEG
27160: PUSH
27161: LD_INT 1
27163: NEG
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 2
27171: NEG
27172: PUSH
27173: LD_INT 2
27175: NEG
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27202: LD_ADDR_VAR 0 55
27206: PUSH
27207: LD_INT 0
27209: PUSH
27210: LD_INT 0
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 0
27219: PUSH
27220: LD_INT 1
27222: NEG
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 1
27230: PUSH
27231: LD_INT 0
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 1
27240: PUSH
27241: LD_INT 1
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 0
27250: PUSH
27251: LD_INT 1
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: LD_INT 1
27260: NEG
27261: PUSH
27262: LD_INT 0
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 1
27271: NEG
27272: PUSH
27273: LD_INT 1
27275: NEG
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 1
27283: NEG
27284: PUSH
27285: LD_INT 2
27287: NEG
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 0
27295: PUSH
27296: LD_INT 2
27298: NEG
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 1
27306: PUSH
27307: LD_INT 1
27309: NEG
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 2
27317: PUSH
27318: LD_INT 0
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 2
27327: PUSH
27328: LD_INT 1
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 2
27337: PUSH
27338: LD_INT 2
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 1
27347: PUSH
27348: LD_INT 2
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 0
27357: PUSH
27358: LD_INT 2
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 1
27367: NEG
27368: PUSH
27369: LD_INT 1
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 2
27378: NEG
27379: PUSH
27380: LD_INT 0
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 2
27389: NEG
27390: PUSH
27391: LD_INT 1
27393: NEG
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 2
27401: NEG
27402: PUSH
27403: LD_INT 2
27405: NEG
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27432: LD_ADDR_VAR 0 56
27436: PUSH
27437: LD_INT 0
27439: PUSH
27440: LD_INT 0
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 0
27449: PUSH
27450: LD_INT 1
27452: NEG
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 1
27460: PUSH
27461: LD_INT 0
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 1
27470: PUSH
27471: LD_INT 1
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: LD_INT 1
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 1
27490: NEG
27491: PUSH
27492: LD_INT 0
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 1
27501: NEG
27502: PUSH
27503: LD_INT 1
27505: NEG
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 1
27513: NEG
27514: PUSH
27515: LD_INT 2
27517: NEG
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 0
27525: PUSH
27526: LD_INT 2
27528: NEG
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 1
27536: PUSH
27537: LD_INT 1
27539: NEG
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 2
27547: PUSH
27548: LD_INT 0
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 2
27557: PUSH
27558: LD_INT 1
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 2
27567: PUSH
27568: LD_INT 2
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 1
27577: PUSH
27578: LD_INT 2
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: LD_INT 0
27587: PUSH
27588: LD_INT 2
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 1
27597: NEG
27598: PUSH
27599: LD_INT 1
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 2
27608: NEG
27609: PUSH
27610: LD_INT 0
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 2
27619: NEG
27620: PUSH
27621: LD_INT 1
27623: NEG
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 2
27631: NEG
27632: PUSH
27633: LD_INT 2
27635: NEG
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27662: LD_ADDR_VAR 0 57
27666: PUSH
27667: LD_INT 0
27669: PUSH
27670: LD_INT 0
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 0
27679: PUSH
27680: LD_INT 1
27682: NEG
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 1
27690: PUSH
27691: LD_INT 0
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 1
27700: PUSH
27701: LD_INT 1
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 0
27710: PUSH
27711: LD_INT 1
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 1
27720: NEG
27721: PUSH
27722: LD_INT 0
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 1
27731: NEG
27732: PUSH
27733: LD_INT 1
27735: NEG
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: LD_INT 1
27743: NEG
27744: PUSH
27745: LD_INT 2
27747: NEG
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 0
27755: PUSH
27756: LD_INT 2
27758: NEG
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 1
27766: PUSH
27767: LD_INT 1
27769: NEG
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 2
27777: PUSH
27778: LD_INT 0
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 2
27787: PUSH
27788: LD_INT 1
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 2
27797: PUSH
27798: LD_INT 2
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 1
27807: PUSH
27808: LD_INT 2
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 0
27817: PUSH
27818: LD_INT 2
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 1
27827: NEG
27828: PUSH
27829: LD_INT 1
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 2
27838: NEG
27839: PUSH
27840: LD_INT 0
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: LD_INT 2
27849: NEG
27850: PUSH
27851: LD_INT 1
27853: NEG
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 2
27861: NEG
27862: PUSH
27863: LD_INT 2
27865: NEG
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27892: LD_ADDR_VAR 0 58
27896: PUSH
27897: LD_INT 0
27899: PUSH
27900: LD_INT 0
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 0
27909: PUSH
27910: LD_INT 1
27912: NEG
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 1
27920: PUSH
27921: LD_INT 0
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: LD_INT 1
27930: PUSH
27931: LD_INT 1
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 0
27940: PUSH
27941: LD_INT 1
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 1
27950: NEG
27951: PUSH
27952: LD_INT 0
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 1
27961: NEG
27962: PUSH
27963: LD_INT 1
27965: NEG
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 1
27973: NEG
27974: PUSH
27975: LD_INT 2
27977: NEG
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 0
27985: PUSH
27986: LD_INT 2
27988: NEG
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_INT 1
27996: PUSH
27997: LD_INT 1
27999: NEG
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 2
28007: PUSH
28008: LD_INT 0
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 2
28017: PUSH
28018: LD_INT 1
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 2
28027: PUSH
28028: LD_INT 2
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 1
28037: PUSH
28038: LD_INT 2
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 0
28047: PUSH
28048: LD_INT 2
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 1
28057: NEG
28058: PUSH
28059: LD_INT 1
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 2
28068: NEG
28069: PUSH
28070: LD_INT 0
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 2
28079: NEG
28080: PUSH
28081: LD_INT 1
28083: NEG
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 2
28091: NEG
28092: PUSH
28093: LD_INT 2
28095: NEG
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28122: LD_ADDR_VAR 0 59
28126: PUSH
28127: LD_INT 0
28129: PUSH
28130: LD_INT 0
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 0
28139: PUSH
28140: LD_INT 1
28142: NEG
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 1
28150: PUSH
28151: LD_INT 0
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: LD_INT 1
28160: PUSH
28161: LD_INT 1
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 0
28170: PUSH
28171: LD_INT 1
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 1
28180: NEG
28181: PUSH
28182: LD_INT 0
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 1
28191: NEG
28192: PUSH
28193: LD_INT 1
28195: NEG
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28210: LD_ADDR_VAR 0 60
28214: PUSH
28215: LD_INT 0
28217: PUSH
28218: LD_INT 0
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 0
28227: PUSH
28228: LD_INT 1
28230: NEG
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: LD_INT 1
28238: PUSH
28239: LD_INT 0
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 1
28248: PUSH
28249: LD_INT 1
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 0
28258: PUSH
28259: LD_INT 1
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 1
28268: NEG
28269: PUSH
28270: LD_INT 0
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 1
28279: NEG
28280: PUSH
28281: LD_INT 1
28283: NEG
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28298: LD_ADDR_VAR 0 61
28302: PUSH
28303: LD_INT 0
28305: PUSH
28306: LD_INT 0
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 0
28315: PUSH
28316: LD_INT 1
28318: NEG
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 1
28326: PUSH
28327: LD_INT 0
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 1
28336: PUSH
28337: LD_INT 1
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 0
28346: PUSH
28347: LD_INT 1
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 1
28356: NEG
28357: PUSH
28358: LD_INT 0
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 1
28367: NEG
28368: PUSH
28369: LD_INT 1
28371: NEG
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28386: LD_ADDR_VAR 0 62
28390: PUSH
28391: LD_INT 0
28393: PUSH
28394: LD_INT 0
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 0
28403: PUSH
28404: LD_INT 1
28406: NEG
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 1
28414: PUSH
28415: LD_INT 0
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 1
28424: PUSH
28425: LD_INT 1
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 0
28434: PUSH
28435: LD_INT 1
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 1
28444: NEG
28445: PUSH
28446: LD_INT 0
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 1
28455: NEG
28456: PUSH
28457: LD_INT 1
28459: NEG
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28474: LD_ADDR_VAR 0 63
28478: PUSH
28479: LD_INT 0
28481: PUSH
28482: LD_INT 0
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 0
28491: PUSH
28492: LD_INT 1
28494: NEG
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 1
28502: PUSH
28503: LD_INT 0
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 1
28512: PUSH
28513: LD_INT 1
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 0
28522: PUSH
28523: LD_INT 1
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 1
28532: NEG
28533: PUSH
28534: LD_INT 0
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 1
28543: NEG
28544: PUSH
28545: LD_INT 1
28547: NEG
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28562: LD_ADDR_VAR 0 64
28566: PUSH
28567: LD_INT 0
28569: PUSH
28570: LD_INT 0
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 0
28579: PUSH
28580: LD_INT 1
28582: NEG
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 1
28590: PUSH
28591: LD_INT 0
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 1
28600: PUSH
28601: LD_INT 1
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 0
28610: PUSH
28611: LD_INT 1
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 1
28620: NEG
28621: PUSH
28622: LD_INT 0
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 1
28631: NEG
28632: PUSH
28633: LD_INT 1
28635: NEG
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: ST_TO_ADDR
// end ; 1 :
28650: GO 34547
28652: LD_INT 1
28654: DOUBLE
28655: EQUAL
28656: IFTRUE 28660
28658: GO 31283
28660: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28661: LD_ADDR_VAR 0 11
28665: PUSH
28666: LD_INT 1
28668: NEG
28669: PUSH
28670: LD_INT 3
28672: NEG
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 0
28680: PUSH
28681: LD_INT 3
28683: NEG
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 1
28691: PUSH
28692: LD_INT 2
28694: NEG
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: LIST
28704: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28705: LD_ADDR_VAR 0 12
28709: PUSH
28710: LD_INT 2
28712: PUSH
28713: LD_INT 1
28715: NEG
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 3
28723: PUSH
28724: LD_INT 0
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 3
28733: PUSH
28734: LD_INT 1
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: LIST
28745: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28746: LD_ADDR_VAR 0 13
28750: PUSH
28751: LD_INT 3
28753: PUSH
28754: LD_INT 2
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 3
28763: PUSH
28764: LD_INT 3
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 2
28773: PUSH
28774: LD_INT 3
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: LIST
28785: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28786: LD_ADDR_VAR 0 14
28790: PUSH
28791: LD_INT 1
28793: PUSH
28794: LD_INT 3
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 0
28803: PUSH
28804: LD_INT 3
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 1
28813: NEG
28814: PUSH
28815: LD_INT 2
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: LIST
28826: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28827: LD_ADDR_VAR 0 15
28831: PUSH
28832: LD_INT 2
28834: NEG
28835: PUSH
28836: LD_INT 1
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: LD_INT 3
28845: NEG
28846: PUSH
28847: LD_INT 0
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 3
28856: NEG
28857: PUSH
28858: LD_INT 1
28860: NEG
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: LIST
28870: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28871: LD_ADDR_VAR 0 16
28875: PUSH
28876: LD_INT 2
28878: NEG
28879: PUSH
28880: LD_INT 3
28882: NEG
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 3
28890: NEG
28891: PUSH
28892: LD_INT 2
28894: NEG
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 3
28902: NEG
28903: PUSH
28904: LD_INT 3
28906: NEG
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: LIST
28916: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28917: LD_ADDR_VAR 0 17
28921: PUSH
28922: LD_INT 1
28924: NEG
28925: PUSH
28926: LD_INT 3
28928: NEG
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 0
28936: PUSH
28937: LD_INT 3
28939: NEG
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 1
28947: PUSH
28948: LD_INT 2
28950: NEG
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: LIST
28960: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28961: LD_ADDR_VAR 0 18
28965: PUSH
28966: LD_INT 2
28968: PUSH
28969: LD_INT 1
28971: NEG
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 3
28979: PUSH
28980: LD_INT 0
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 3
28989: PUSH
28990: LD_INT 1
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: LIST
29001: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29002: LD_ADDR_VAR 0 19
29006: PUSH
29007: LD_INT 3
29009: PUSH
29010: LD_INT 2
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 3
29019: PUSH
29020: LD_INT 3
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 2
29029: PUSH
29030: LD_INT 3
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: LIST
29041: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29042: LD_ADDR_VAR 0 20
29046: PUSH
29047: LD_INT 1
29049: PUSH
29050: LD_INT 3
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 0
29059: PUSH
29060: LD_INT 3
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 1
29069: NEG
29070: PUSH
29071: LD_INT 2
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: LIST
29082: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29083: LD_ADDR_VAR 0 21
29087: PUSH
29088: LD_INT 2
29090: NEG
29091: PUSH
29092: LD_INT 1
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: PUSH
29099: LD_INT 3
29101: NEG
29102: PUSH
29103: LD_INT 0
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 3
29112: NEG
29113: PUSH
29114: LD_INT 1
29116: NEG
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: LIST
29126: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29127: LD_ADDR_VAR 0 22
29131: PUSH
29132: LD_INT 2
29134: NEG
29135: PUSH
29136: LD_INT 3
29138: NEG
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 3
29146: NEG
29147: PUSH
29148: LD_INT 2
29150: NEG
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 3
29158: NEG
29159: PUSH
29160: LD_INT 3
29162: NEG
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: LIST
29172: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29173: LD_ADDR_VAR 0 23
29177: PUSH
29178: LD_INT 0
29180: PUSH
29181: LD_INT 3
29183: NEG
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 1
29191: NEG
29192: PUSH
29193: LD_INT 4
29195: NEG
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 1
29203: PUSH
29204: LD_INT 3
29206: NEG
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: LIST
29216: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29217: LD_ADDR_VAR 0 24
29221: PUSH
29222: LD_INT 3
29224: PUSH
29225: LD_INT 0
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 3
29234: PUSH
29235: LD_INT 1
29237: NEG
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 4
29245: PUSH
29246: LD_INT 1
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: LIST
29257: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29258: LD_ADDR_VAR 0 25
29262: PUSH
29263: LD_INT 3
29265: PUSH
29266: LD_INT 3
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 4
29275: PUSH
29276: LD_INT 3
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 3
29285: PUSH
29286: LD_INT 4
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: LIST
29297: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29298: LD_ADDR_VAR 0 26
29302: PUSH
29303: LD_INT 0
29305: PUSH
29306: LD_INT 3
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: LD_INT 1
29315: PUSH
29316: LD_INT 4
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 1
29325: NEG
29326: PUSH
29327: LD_INT 3
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: LIST
29338: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29339: LD_ADDR_VAR 0 27
29343: PUSH
29344: LD_INT 3
29346: NEG
29347: PUSH
29348: LD_INT 0
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 3
29357: NEG
29358: PUSH
29359: LD_INT 1
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: LD_INT 4
29368: NEG
29369: PUSH
29370: LD_INT 1
29372: NEG
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: LIST
29382: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29383: LD_ADDR_VAR 0 28
29387: PUSH
29388: LD_INT 3
29390: NEG
29391: PUSH
29392: LD_INT 3
29394: NEG
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 3
29402: NEG
29403: PUSH
29404: LD_INT 4
29406: NEG
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 4
29414: NEG
29415: PUSH
29416: LD_INT 3
29418: NEG
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: LIST
29428: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29429: LD_ADDR_VAR 0 29
29433: PUSH
29434: LD_INT 1
29436: NEG
29437: PUSH
29438: LD_INT 3
29440: NEG
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 0
29448: PUSH
29449: LD_INT 3
29451: NEG
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 1
29459: PUSH
29460: LD_INT 2
29462: NEG
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 1
29470: NEG
29471: PUSH
29472: LD_INT 4
29474: NEG
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 0
29482: PUSH
29483: LD_INT 4
29485: NEG
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 1
29493: PUSH
29494: LD_INT 3
29496: NEG
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 1
29504: NEG
29505: PUSH
29506: LD_INT 5
29508: NEG
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 0
29516: PUSH
29517: LD_INT 5
29519: NEG
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 1
29527: PUSH
29528: LD_INT 4
29530: NEG
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: LD_INT 1
29538: NEG
29539: PUSH
29540: LD_INT 6
29542: NEG
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 0
29550: PUSH
29551: LD_INT 6
29553: NEG
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: LD_INT 1
29561: PUSH
29562: LD_INT 5
29564: NEG
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29584: LD_ADDR_VAR 0 30
29588: PUSH
29589: LD_INT 2
29591: PUSH
29592: LD_INT 1
29594: NEG
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 3
29602: PUSH
29603: LD_INT 0
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 3
29612: PUSH
29613: LD_INT 1
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 3
29622: PUSH
29623: LD_INT 1
29625: NEG
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 4
29633: PUSH
29634: LD_INT 0
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 4
29643: PUSH
29644: LD_INT 1
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 4
29653: PUSH
29654: LD_INT 1
29656: NEG
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 5
29664: PUSH
29665: LD_INT 0
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: LD_INT 5
29674: PUSH
29675: LD_INT 1
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 5
29684: PUSH
29685: LD_INT 1
29687: NEG
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 6
29695: PUSH
29696: LD_INT 0
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: LD_INT 6
29705: PUSH
29706: LD_INT 1
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29727: LD_ADDR_VAR 0 31
29731: PUSH
29732: LD_INT 3
29734: PUSH
29735: LD_INT 2
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 3
29744: PUSH
29745: LD_INT 3
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 2
29754: PUSH
29755: LD_INT 3
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: LD_INT 4
29764: PUSH
29765: LD_INT 3
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 4
29774: PUSH
29775: LD_INT 4
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 3
29784: PUSH
29785: LD_INT 4
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 5
29794: PUSH
29795: LD_INT 4
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 5
29804: PUSH
29805: LD_INT 5
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 4
29814: PUSH
29815: LD_INT 5
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 6
29824: PUSH
29825: LD_INT 5
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 6
29834: PUSH
29835: LD_INT 6
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 5
29844: PUSH
29845: LD_INT 6
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29866: LD_ADDR_VAR 0 32
29870: PUSH
29871: LD_INT 1
29873: PUSH
29874: LD_INT 3
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 0
29883: PUSH
29884: LD_INT 3
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 1
29893: NEG
29894: PUSH
29895: LD_INT 2
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 1
29904: PUSH
29905: LD_INT 4
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 0
29914: PUSH
29915: LD_INT 4
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 1
29924: NEG
29925: PUSH
29926: LD_INT 3
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 1
29935: PUSH
29936: LD_INT 5
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 0
29945: PUSH
29946: LD_INT 5
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 1
29955: NEG
29956: PUSH
29957: LD_INT 4
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 1
29966: PUSH
29967: LD_INT 6
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 0
29976: PUSH
29977: LD_INT 6
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: LD_INT 1
29986: NEG
29987: PUSH
29988: LD_INT 5
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30009: LD_ADDR_VAR 0 33
30013: PUSH
30014: LD_INT 2
30016: NEG
30017: PUSH
30018: LD_INT 1
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 3
30027: NEG
30028: PUSH
30029: LD_INT 0
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 3
30038: NEG
30039: PUSH
30040: LD_INT 1
30042: NEG
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 3
30050: NEG
30051: PUSH
30052: LD_INT 1
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 4
30061: NEG
30062: PUSH
30063: LD_INT 0
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 4
30072: NEG
30073: PUSH
30074: LD_INT 1
30076: NEG
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 4
30084: NEG
30085: PUSH
30086: LD_INT 1
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 5
30095: NEG
30096: PUSH
30097: LD_INT 0
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 5
30106: NEG
30107: PUSH
30108: LD_INT 1
30110: NEG
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 5
30118: NEG
30119: PUSH
30120: LD_INT 1
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 6
30129: NEG
30130: PUSH
30131: LD_INT 0
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 6
30140: NEG
30141: PUSH
30142: LD_INT 1
30144: NEG
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30164: LD_ADDR_VAR 0 34
30168: PUSH
30169: LD_INT 2
30171: NEG
30172: PUSH
30173: LD_INT 3
30175: NEG
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 3
30183: NEG
30184: PUSH
30185: LD_INT 2
30187: NEG
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 3
30195: NEG
30196: PUSH
30197: LD_INT 3
30199: NEG
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 3
30207: NEG
30208: PUSH
30209: LD_INT 4
30211: NEG
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 4
30219: NEG
30220: PUSH
30221: LD_INT 3
30223: NEG
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 4
30231: NEG
30232: PUSH
30233: LD_INT 4
30235: NEG
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 4
30243: NEG
30244: PUSH
30245: LD_INT 5
30247: NEG
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 5
30255: NEG
30256: PUSH
30257: LD_INT 4
30259: NEG
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 5
30267: NEG
30268: PUSH
30269: LD_INT 5
30271: NEG
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 5
30279: NEG
30280: PUSH
30281: LD_INT 6
30283: NEG
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 6
30291: NEG
30292: PUSH
30293: LD_INT 5
30295: NEG
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 6
30303: NEG
30304: PUSH
30305: LD_INT 6
30307: NEG
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30327: LD_ADDR_VAR 0 41
30331: PUSH
30332: LD_INT 0
30334: PUSH
30335: LD_INT 2
30337: NEG
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 1
30345: NEG
30346: PUSH
30347: LD_INT 3
30349: NEG
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 1
30357: PUSH
30358: LD_INT 2
30360: NEG
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: LIST
30370: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30371: LD_ADDR_VAR 0 42
30375: PUSH
30376: LD_INT 2
30378: PUSH
30379: LD_INT 0
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: LD_INT 2
30388: PUSH
30389: LD_INT 1
30391: NEG
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 3
30399: PUSH
30400: LD_INT 1
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: LIST
30411: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30412: LD_ADDR_VAR 0 43
30416: PUSH
30417: LD_INT 2
30419: PUSH
30420: LD_INT 2
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 3
30429: PUSH
30430: LD_INT 2
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 2
30439: PUSH
30440: LD_INT 3
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: LIST
30451: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30452: LD_ADDR_VAR 0 44
30456: PUSH
30457: LD_INT 0
30459: PUSH
30460: LD_INT 2
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 1
30469: PUSH
30470: LD_INT 3
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 1
30479: NEG
30480: PUSH
30481: LD_INT 2
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: LIST
30492: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30493: LD_ADDR_VAR 0 45
30497: PUSH
30498: LD_INT 2
30500: NEG
30501: PUSH
30502: LD_INT 0
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 2
30511: NEG
30512: PUSH
30513: LD_INT 1
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 3
30522: NEG
30523: PUSH
30524: LD_INT 1
30526: NEG
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: LIST
30536: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30537: LD_ADDR_VAR 0 46
30541: PUSH
30542: LD_INT 2
30544: NEG
30545: PUSH
30546: LD_INT 2
30548: NEG
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 2
30556: NEG
30557: PUSH
30558: LD_INT 3
30560: NEG
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 3
30568: NEG
30569: PUSH
30570: LD_INT 2
30572: NEG
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: LIST
30582: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30583: LD_ADDR_VAR 0 47
30587: PUSH
30588: LD_INT 2
30590: NEG
30591: PUSH
30592: LD_INT 3
30594: NEG
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 1
30602: NEG
30603: PUSH
30604: LD_INT 3
30606: NEG
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30616: LD_ADDR_VAR 0 48
30620: PUSH
30621: LD_INT 1
30623: PUSH
30624: LD_INT 2
30626: NEG
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 2
30634: PUSH
30635: LD_INT 1
30637: NEG
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30647: LD_ADDR_VAR 0 49
30651: PUSH
30652: LD_INT 3
30654: PUSH
30655: LD_INT 1
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 3
30664: PUSH
30665: LD_INT 2
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30676: LD_ADDR_VAR 0 50
30680: PUSH
30681: LD_INT 2
30683: PUSH
30684: LD_INT 3
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 1
30693: PUSH
30694: LD_INT 3
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30705: LD_ADDR_VAR 0 51
30709: PUSH
30710: LD_INT 1
30712: NEG
30713: PUSH
30714: LD_INT 2
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 2
30723: NEG
30724: PUSH
30725: LD_INT 1
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30736: LD_ADDR_VAR 0 52
30740: PUSH
30741: LD_INT 3
30743: NEG
30744: PUSH
30745: LD_INT 1
30747: NEG
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 3
30755: NEG
30756: PUSH
30757: LD_INT 2
30759: NEG
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30769: LD_ADDR_VAR 0 53
30773: PUSH
30774: LD_INT 1
30776: NEG
30777: PUSH
30778: LD_INT 3
30780: NEG
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 0
30788: PUSH
30789: LD_INT 3
30791: NEG
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 1
30799: PUSH
30800: LD_INT 2
30802: NEG
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: LIST
30812: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30813: LD_ADDR_VAR 0 54
30817: PUSH
30818: LD_INT 2
30820: PUSH
30821: LD_INT 1
30823: NEG
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 3
30831: PUSH
30832: LD_INT 0
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 3
30841: PUSH
30842: LD_INT 1
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: LIST
30853: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30854: LD_ADDR_VAR 0 55
30858: PUSH
30859: LD_INT 3
30861: PUSH
30862: LD_INT 2
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 3
30871: PUSH
30872: LD_INT 3
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 2
30881: PUSH
30882: LD_INT 3
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: LIST
30893: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30894: LD_ADDR_VAR 0 56
30898: PUSH
30899: LD_INT 1
30901: PUSH
30902: LD_INT 3
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: LD_INT 0
30911: PUSH
30912: LD_INT 3
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 1
30921: NEG
30922: PUSH
30923: LD_INT 2
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: LIST
30934: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30935: LD_ADDR_VAR 0 57
30939: PUSH
30940: LD_INT 2
30942: NEG
30943: PUSH
30944: LD_INT 1
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 3
30953: NEG
30954: PUSH
30955: LD_INT 0
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 3
30964: NEG
30965: PUSH
30966: LD_INT 1
30968: NEG
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: LIST
30978: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30979: LD_ADDR_VAR 0 58
30983: PUSH
30984: LD_INT 2
30986: NEG
30987: PUSH
30988: LD_INT 3
30990: NEG
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 3
30998: NEG
30999: PUSH
31000: LD_INT 2
31002: NEG
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 3
31010: NEG
31011: PUSH
31012: LD_INT 3
31014: NEG
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: LIST
31024: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31025: LD_ADDR_VAR 0 59
31029: PUSH
31030: LD_INT 1
31032: NEG
31033: PUSH
31034: LD_INT 2
31036: NEG
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 0
31044: PUSH
31045: LD_INT 2
31047: NEG
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 1
31055: PUSH
31056: LD_INT 1
31058: NEG
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: LIST
31068: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31069: LD_ADDR_VAR 0 60
31073: PUSH
31074: LD_INT 1
31076: PUSH
31077: LD_INT 1
31079: NEG
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 2
31087: PUSH
31088: LD_INT 0
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 2
31097: PUSH
31098: LD_INT 1
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: LIST
31109: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31110: LD_ADDR_VAR 0 61
31114: PUSH
31115: LD_INT 2
31117: PUSH
31118: LD_INT 1
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 2
31127: PUSH
31128: LD_INT 2
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 1
31137: PUSH
31138: LD_INT 2
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: LIST
31149: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31150: LD_ADDR_VAR 0 62
31154: PUSH
31155: LD_INT 1
31157: PUSH
31158: LD_INT 2
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 0
31167: PUSH
31168: LD_INT 2
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 1
31177: NEG
31178: PUSH
31179: LD_INT 1
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: LIST
31190: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31191: LD_ADDR_VAR 0 63
31195: PUSH
31196: LD_INT 1
31198: NEG
31199: PUSH
31200: LD_INT 1
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 2
31209: NEG
31210: PUSH
31211: LD_INT 0
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 2
31220: NEG
31221: PUSH
31222: LD_INT 1
31224: NEG
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: LIST
31234: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31235: LD_ADDR_VAR 0 64
31239: PUSH
31240: LD_INT 1
31242: NEG
31243: PUSH
31244: LD_INT 2
31246: NEG
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 2
31254: NEG
31255: PUSH
31256: LD_INT 1
31258: NEG
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 2
31266: NEG
31267: PUSH
31268: LD_INT 2
31270: NEG
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: LIST
31280: ST_TO_ADDR
// end ; 2 :
31281: GO 34547
31283: LD_INT 2
31285: DOUBLE
31286: EQUAL
31287: IFTRUE 31291
31289: GO 34546
31291: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31292: LD_ADDR_VAR 0 29
31296: PUSH
31297: LD_INT 4
31299: PUSH
31300: LD_INT 0
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 4
31309: PUSH
31310: LD_INT 1
31312: NEG
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 5
31320: PUSH
31321: LD_INT 0
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 5
31330: PUSH
31331: LD_INT 1
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 4
31340: PUSH
31341: LD_INT 1
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 3
31350: PUSH
31351: LD_INT 0
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 3
31360: PUSH
31361: LD_INT 1
31363: NEG
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 3
31371: PUSH
31372: LD_INT 2
31374: NEG
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 5
31382: PUSH
31383: LD_INT 2
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 3
31392: PUSH
31393: LD_INT 3
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 3
31402: PUSH
31403: LD_INT 2
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 4
31412: PUSH
31413: LD_INT 3
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 4
31422: PUSH
31423: LD_INT 4
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 3
31432: PUSH
31433: LD_INT 4
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 2
31442: PUSH
31443: LD_INT 3
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 2
31452: PUSH
31453: LD_INT 2
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 4
31462: PUSH
31463: LD_INT 2
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 2
31472: PUSH
31473: LD_INT 4
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 0
31482: PUSH
31483: LD_INT 4
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 0
31492: PUSH
31493: LD_INT 3
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 1
31502: PUSH
31503: LD_INT 4
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 1
31512: PUSH
31513: LD_INT 5
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 0
31522: PUSH
31523: LD_INT 5
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 1
31532: NEG
31533: PUSH
31534: LD_INT 4
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 1
31543: NEG
31544: PUSH
31545: LD_INT 3
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 2
31554: PUSH
31555: LD_INT 5
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 2
31564: NEG
31565: PUSH
31566: LD_INT 3
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 3
31575: NEG
31576: PUSH
31577: LD_INT 0
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 3
31586: NEG
31587: PUSH
31588: LD_INT 1
31590: NEG
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 2
31598: NEG
31599: PUSH
31600: LD_INT 0
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 2
31609: NEG
31610: PUSH
31611: LD_INT 1
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 3
31620: NEG
31621: PUSH
31622: LD_INT 1
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 4
31631: NEG
31632: PUSH
31633: LD_INT 0
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 4
31642: NEG
31643: PUSH
31644: LD_INT 1
31646: NEG
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 4
31654: NEG
31655: PUSH
31656: LD_INT 2
31658: NEG
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 2
31666: NEG
31667: PUSH
31668: LD_INT 2
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 4
31677: NEG
31678: PUSH
31679: LD_INT 4
31681: NEG
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 4
31689: NEG
31690: PUSH
31691: LD_INT 5
31693: NEG
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 3
31701: NEG
31702: PUSH
31703: LD_INT 4
31705: NEG
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 3
31713: NEG
31714: PUSH
31715: LD_INT 3
31717: NEG
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 4
31725: NEG
31726: PUSH
31727: LD_INT 3
31729: NEG
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 5
31737: NEG
31738: PUSH
31739: LD_INT 4
31741: NEG
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 5
31749: NEG
31750: PUSH
31751: LD_INT 5
31753: NEG
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 3
31761: NEG
31762: PUSH
31763: LD_INT 5
31765: NEG
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 5
31773: NEG
31774: PUSH
31775: LD_INT 3
31777: NEG
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31830: LD_ADDR_VAR 0 30
31834: PUSH
31835: LD_INT 4
31837: PUSH
31838: LD_INT 4
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 4
31847: PUSH
31848: LD_INT 3
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 5
31857: PUSH
31858: LD_INT 4
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 5
31867: PUSH
31868: LD_INT 5
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 4
31877: PUSH
31878: LD_INT 5
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 3
31887: PUSH
31888: LD_INT 4
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 3
31897: PUSH
31898: LD_INT 3
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 5
31907: PUSH
31908: LD_INT 3
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 3
31917: PUSH
31918: LD_INT 5
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 0
31927: PUSH
31928: LD_INT 3
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 0
31937: PUSH
31938: LD_INT 2
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 1
31947: PUSH
31948: LD_INT 3
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 1
31957: PUSH
31958: LD_INT 4
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 0
31967: PUSH
31968: LD_INT 4
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 1
31977: NEG
31978: PUSH
31979: LD_INT 3
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 1
31988: NEG
31989: PUSH
31990: LD_INT 2
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 2
31999: PUSH
32000: LD_INT 4
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 2
32009: NEG
32010: PUSH
32011: LD_INT 2
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 4
32020: NEG
32021: PUSH
32022: LD_INT 0
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 4
32031: NEG
32032: PUSH
32033: LD_INT 1
32035: NEG
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 3
32043: NEG
32044: PUSH
32045: LD_INT 0
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 3
32054: NEG
32055: PUSH
32056: LD_INT 1
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 4
32065: NEG
32066: PUSH
32067: LD_INT 1
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 5
32076: NEG
32077: PUSH
32078: LD_INT 0
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 5
32087: NEG
32088: PUSH
32089: LD_INT 1
32091: NEG
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 5
32099: NEG
32100: PUSH
32101: LD_INT 2
32103: NEG
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 3
32111: NEG
32112: PUSH
32113: LD_INT 2
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 3
32122: NEG
32123: PUSH
32124: LD_INT 3
32126: NEG
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 3
32134: NEG
32135: PUSH
32136: LD_INT 4
32138: NEG
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 2
32146: NEG
32147: PUSH
32148: LD_INT 3
32150: NEG
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 2
32158: NEG
32159: PUSH
32160: LD_INT 2
32162: NEG
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 3
32170: NEG
32171: PUSH
32172: LD_INT 2
32174: NEG
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 4
32182: NEG
32183: PUSH
32184: LD_INT 3
32186: NEG
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 4
32194: NEG
32195: PUSH
32196: LD_INT 4
32198: NEG
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 2
32206: NEG
32207: PUSH
32208: LD_INT 4
32210: NEG
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 4
32218: NEG
32219: PUSH
32220: LD_INT 2
32222: NEG
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 0
32230: PUSH
32231: LD_INT 4
32233: NEG
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 0
32241: PUSH
32242: LD_INT 5
32244: NEG
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 1
32252: PUSH
32253: LD_INT 4
32255: NEG
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 1
32263: PUSH
32264: LD_INT 3
32266: NEG
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 0
32274: PUSH
32275: LD_INT 3
32277: NEG
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 1
32285: NEG
32286: PUSH
32287: LD_INT 4
32289: NEG
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 1
32297: NEG
32298: PUSH
32299: LD_INT 5
32301: NEG
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 2
32309: PUSH
32310: LD_INT 3
32312: NEG
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 2
32320: NEG
32321: PUSH
32322: LD_INT 5
32324: NEG
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32377: LD_ADDR_VAR 0 31
32381: PUSH
32382: LD_INT 0
32384: PUSH
32385: LD_INT 4
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 0
32394: PUSH
32395: LD_INT 3
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 1
32404: PUSH
32405: LD_INT 4
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 1
32414: PUSH
32415: LD_INT 5
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 0
32424: PUSH
32425: LD_INT 5
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 1
32434: NEG
32435: PUSH
32436: LD_INT 4
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 1
32445: NEG
32446: PUSH
32447: LD_INT 3
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 2
32456: PUSH
32457: LD_INT 5
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 2
32466: NEG
32467: PUSH
32468: LD_INT 3
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 3
32477: NEG
32478: PUSH
32479: LD_INT 0
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 3
32488: NEG
32489: PUSH
32490: LD_INT 1
32492: NEG
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 2
32500: NEG
32501: PUSH
32502: LD_INT 0
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 2
32511: NEG
32512: PUSH
32513: LD_INT 1
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 3
32522: NEG
32523: PUSH
32524: LD_INT 1
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 4
32533: NEG
32534: PUSH
32535: LD_INT 0
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 4
32544: NEG
32545: PUSH
32546: LD_INT 1
32548: NEG
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 4
32556: NEG
32557: PUSH
32558: LD_INT 2
32560: NEG
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 2
32568: NEG
32569: PUSH
32570: LD_INT 2
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 4
32579: NEG
32580: PUSH
32581: LD_INT 4
32583: NEG
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 4
32591: NEG
32592: PUSH
32593: LD_INT 5
32595: NEG
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 3
32603: NEG
32604: PUSH
32605: LD_INT 4
32607: NEG
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 3
32615: NEG
32616: PUSH
32617: LD_INT 3
32619: NEG
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 4
32627: NEG
32628: PUSH
32629: LD_INT 3
32631: NEG
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 5
32639: NEG
32640: PUSH
32641: LD_INT 4
32643: NEG
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 5
32651: NEG
32652: PUSH
32653: LD_INT 5
32655: NEG
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 3
32663: NEG
32664: PUSH
32665: LD_INT 5
32667: NEG
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 5
32675: NEG
32676: PUSH
32677: LD_INT 3
32679: NEG
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 0
32687: PUSH
32688: LD_INT 3
32690: NEG
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 0
32698: PUSH
32699: LD_INT 4
32701: NEG
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 1
32709: PUSH
32710: LD_INT 3
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: LD_INT 2
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 0
32731: PUSH
32732: LD_INT 2
32734: NEG
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 1
32742: NEG
32743: PUSH
32744: LD_INT 3
32746: NEG
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 1
32754: NEG
32755: PUSH
32756: LD_INT 4
32758: NEG
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 2
32766: PUSH
32767: LD_INT 2
32769: NEG
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 2
32777: NEG
32778: PUSH
32779: LD_INT 4
32781: NEG
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 4
32789: PUSH
32790: LD_INT 0
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 4
32799: PUSH
32800: LD_INT 1
32802: NEG
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 5
32810: PUSH
32811: LD_INT 0
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 5
32820: PUSH
32821: LD_INT 1
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 4
32830: PUSH
32831: LD_INT 1
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 3
32840: PUSH
32841: LD_INT 0
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 3
32850: PUSH
32851: LD_INT 1
32853: NEG
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 3
32861: PUSH
32862: LD_INT 2
32864: NEG
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 5
32872: PUSH
32873: LD_INT 2
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32927: LD_ADDR_VAR 0 32
32931: PUSH
32932: LD_INT 4
32934: NEG
32935: PUSH
32936: LD_INT 0
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 4
32945: NEG
32946: PUSH
32947: LD_INT 1
32949: NEG
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 3
32957: NEG
32958: PUSH
32959: LD_INT 0
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 3
32968: NEG
32969: PUSH
32970: LD_INT 1
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 4
32979: NEG
32980: PUSH
32981: LD_INT 1
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 5
32990: NEG
32991: PUSH
32992: LD_INT 0
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 5
33001: NEG
33002: PUSH
33003: LD_INT 1
33005: NEG
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 5
33013: NEG
33014: PUSH
33015: LD_INT 2
33017: NEG
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 3
33025: NEG
33026: PUSH
33027: LD_INT 2
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 3
33036: NEG
33037: PUSH
33038: LD_INT 3
33040: NEG
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 3
33048: NEG
33049: PUSH
33050: LD_INT 4
33052: NEG
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 2
33060: NEG
33061: PUSH
33062: LD_INT 3
33064: NEG
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 2
33072: NEG
33073: PUSH
33074: LD_INT 2
33076: NEG
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 3
33084: NEG
33085: PUSH
33086: LD_INT 2
33088: NEG
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 4
33096: NEG
33097: PUSH
33098: LD_INT 3
33100: NEG
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 4
33108: NEG
33109: PUSH
33110: LD_INT 4
33112: NEG
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 2
33120: NEG
33121: PUSH
33122: LD_INT 4
33124: NEG
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 4
33132: NEG
33133: PUSH
33134: LD_INT 2
33136: NEG
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 0
33144: PUSH
33145: LD_INT 4
33147: NEG
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 0
33155: PUSH
33156: LD_INT 5
33158: NEG
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 1
33166: PUSH
33167: LD_INT 4
33169: NEG
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 1
33177: PUSH
33178: LD_INT 3
33180: NEG
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 0
33188: PUSH
33189: LD_INT 3
33191: NEG
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 1
33199: NEG
33200: PUSH
33201: LD_INT 4
33203: NEG
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 1
33211: NEG
33212: PUSH
33213: LD_INT 5
33215: NEG
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 2
33223: PUSH
33224: LD_INT 3
33226: NEG
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 2
33234: NEG
33235: PUSH
33236: LD_INT 5
33238: NEG
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 3
33246: PUSH
33247: LD_INT 0
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 3
33256: PUSH
33257: LD_INT 1
33259: NEG
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 4
33267: PUSH
33268: LD_INT 0
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 4
33277: PUSH
33278: LD_INT 1
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 3
33287: PUSH
33288: LD_INT 1
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 2
33297: PUSH
33298: LD_INT 0
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 2
33307: PUSH
33308: LD_INT 1
33310: NEG
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 2
33318: PUSH
33319: LD_INT 2
33321: NEG
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 4
33329: PUSH
33330: LD_INT 2
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 4
33339: PUSH
33340: LD_INT 4
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 4
33349: PUSH
33350: LD_INT 3
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 5
33359: PUSH
33360: LD_INT 4
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 5
33369: PUSH
33370: LD_INT 5
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 4
33379: PUSH
33380: LD_INT 5
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 3
33389: PUSH
33390: LD_INT 4
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 3
33399: PUSH
33400: LD_INT 3
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 5
33409: PUSH
33410: LD_INT 3
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 3
33419: PUSH
33420: LD_INT 5
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33474: LD_ADDR_VAR 0 33
33478: PUSH
33479: LD_INT 4
33481: NEG
33482: PUSH
33483: LD_INT 4
33485: NEG
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 4
33493: NEG
33494: PUSH
33495: LD_INT 5
33497: NEG
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 3
33505: NEG
33506: PUSH
33507: LD_INT 4
33509: NEG
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 3
33517: NEG
33518: PUSH
33519: LD_INT 3
33521: NEG
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 4
33529: NEG
33530: PUSH
33531: LD_INT 3
33533: NEG
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 5
33541: NEG
33542: PUSH
33543: LD_INT 4
33545: NEG
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 5
33553: NEG
33554: PUSH
33555: LD_INT 5
33557: NEG
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 3
33565: NEG
33566: PUSH
33567: LD_INT 5
33569: NEG
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 5
33577: NEG
33578: PUSH
33579: LD_INT 3
33581: NEG
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 0
33589: PUSH
33590: LD_INT 3
33592: NEG
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 0
33600: PUSH
33601: LD_INT 4
33603: NEG
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 1
33611: PUSH
33612: LD_INT 3
33614: NEG
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 1
33622: PUSH
33623: LD_INT 2
33625: NEG
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 0
33633: PUSH
33634: LD_INT 2
33636: NEG
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 1
33644: NEG
33645: PUSH
33646: LD_INT 3
33648: NEG
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 1
33656: NEG
33657: PUSH
33658: LD_INT 4
33660: NEG
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 2
33668: PUSH
33669: LD_INT 2
33671: NEG
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 2
33679: NEG
33680: PUSH
33681: LD_INT 4
33683: NEG
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 4
33691: PUSH
33692: LD_INT 0
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 4
33701: PUSH
33702: LD_INT 1
33704: NEG
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 5
33712: PUSH
33713: LD_INT 0
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 5
33722: PUSH
33723: LD_INT 1
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 4
33732: PUSH
33733: LD_INT 1
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 3
33742: PUSH
33743: LD_INT 0
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 3
33752: PUSH
33753: LD_INT 1
33755: NEG
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 3
33763: PUSH
33764: LD_INT 2
33766: NEG
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 5
33774: PUSH
33775: LD_INT 2
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: LD_INT 3
33784: PUSH
33785: LD_INT 3
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 3
33794: PUSH
33795: LD_INT 2
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 4
33804: PUSH
33805: LD_INT 3
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 4
33814: PUSH
33815: LD_INT 4
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 3
33824: PUSH
33825: LD_INT 4
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 2
33834: PUSH
33835: LD_INT 3
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 2
33844: PUSH
33845: LD_INT 2
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 4
33854: PUSH
33855: LD_INT 2
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 2
33864: PUSH
33865: LD_INT 4
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 0
33874: PUSH
33875: LD_INT 4
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 0
33884: PUSH
33885: LD_INT 3
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 1
33894: PUSH
33895: LD_INT 4
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 1
33904: PUSH
33905: LD_INT 5
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: LD_INT 0
33914: PUSH
33915: LD_INT 5
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 1
33924: NEG
33925: PUSH
33926: LD_INT 4
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 1
33935: NEG
33936: PUSH
33937: LD_INT 3
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 2
33946: PUSH
33947: LD_INT 5
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 2
33956: NEG
33957: PUSH
33958: LD_INT 3
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34012: LD_ADDR_VAR 0 34
34016: PUSH
34017: LD_INT 0
34019: PUSH
34020: LD_INT 4
34022: NEG
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 0
34030: PUSH
34031: LD_INT 5
34033: NEG
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 1
34041: PUSH
34042: LD_INT 4
34044: NEG
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 1
34052: PUSH
34053: LD_INT 3
34055: NEG
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 0
34063: PUSH
34064: LD_INT 3
34066: NEG
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 1
34074: NEG
34075: PUSH
34076: LD_INT 4
34078: NEG
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 1
34086: NEG
34087: PUSH
34088: LD_INT 5
34090: NEG
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 2
34098: PUSH
34099: LD_INT 3
34101: NEG
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 2
34109: NEG
34110: PUSH
34111: LD_INT 5
34113: NEG
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 3
34121: PUSH
34122: LD_INT 0
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 3
34131: PUSH
34132: LD_INT 1
34134: NEG
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 4
34142: PUSH
34143: LD_INT 0
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 4
34152: PUSH
34153: LD_INT 1
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 3
34162: PUSH
34163: LD_INT 1
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 2
34172: PUSH
34173: LD_INT 0
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 2
34182: PUSH
34183: LD_INT 1
34185: NEG
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 2
34193: PUSH
34194: LD_INT 2
34196: NEG
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 4
34204: PUSH
34205: LD_INT 2
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 4
34214: PUSH
34215: LD_INT 4
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 4
34224: PUSH
34225: LD_INT 3
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 5
34234: PUSH
34235: LD_INT 4
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 5
34244: PUSH
34245: LD_INT 5
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 4
34254: PUSH
34255: LD_INT 5
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 3
34264: PUSH
34265: LD_INT 4
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 3
34274: PUSH
34275: LD_INT 3
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 5
34284: PUSH
34285: LD_INT 3
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 3
34294: PUSH
34295: LD_INT 5
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 0
34304: PUSH
34305: LD_INT 3
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 0
34314: PUSH
34315: LD_INT 2
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 1
34324: PUSH
34325: LD_INT 3
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 1
34334: PUSH
34335: LD_INT 4
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 0
34344: PUSH
34345: LD_INT 4
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 1
34354: NEG
34355: PUSH
34356: LD_INT 3
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 1
34365: NEG
34366: PUSH
34367: LD_INT 2
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 2
34376: PUSH
34377: LD_INT 4
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 2
34386: NEG
34387: PUSH
34388: LD_INT 2
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 4
34397: NEG
34398: PUSH
34399: LD_INT 0
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 4
34408: NEG
34409: PUSH
34410: LD_INT 1
34412: NEG
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 3
34420: NEG
34421: PUSH
34422: LD_INT 0
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 3
34431: NEG
34432: PUSH
34433: LD_INT 1
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 4
34442: NEG
34443: PUSH
34444: LD_INT 1
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 5
34453: NEG
34454: PUSH
34455: LD_INT 0
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 5
34464: NEG
34465: PUSH
34466: LD_INT 1
34468: NEG
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 5
34476: NEG
34477: PUSH
34478: LD_INT 2
34480: NEG
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 3
34488: NEG
34489: PUSH
34490: LD_INT 2
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: ST_TO_ADDR
// end ; end ;
34544: GO 34547
34546: POP
// case btype of b_depot , b_warehouse :
34547: LD_VAR 0 1
34551: PUSH
34552: LD_INT 0
34554: DOUBLE
34555: EQUAL
34556: IFTRUE 34566
34558: LD_INT 1
34560: DOUBLE
34561: EQUAL
34562: IFTRUE 34566
34564: GO 34767
34566: POP
// case nation of nation_american :
34567: LD_VAR 0 5
34571: PUSH
34572: LD_INT 1
34574: DOUBLE
34575: EQUAL
34576: IFTRUE 34580
34578: GO 34636
34580: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34581: LD_ADDR_VAR 0 9
34585: PUSH
34586: LD_VAR 0 11
34590: PUSH
34591: LD_VAR 0 12
34595: PUSH
34596: LD_VAR 0 13
34600: PUSH
34601: LD_VAR 0 14
34605: PUSH
34606: LD_VAR 0 15
34610: PUSH
34611: LD_VAR 0 16
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: PUSH
34624: LD_VAR 0 4
34628: PUSH
34629: LD_INT 1
34631: PLUS
34632: ARRAY
34633: ST_TO_ADDR
34634: GO 34765
34636: LD_INT 2
34638: DOUBLE
34639: EQUAL
34640: IFTRUE 34644
34642: GO 34700
34644: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34645: LD_ADDR_VAR 0 9
34649: PUSH
34650: LD_VAR 0 17
34654: PUSH
34655: LD_VAR 0 18
34659: PUSH
34660: LD_VAR 0 19
34664: PUSH
34665: LD_VAR 0 20
34669: PUSH
34670: LD_VAR 0 21
34674: PUSH
34675: LD_VAR 0 22
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: PUSH
34688: LD_VAR 0 4
34692: PUSH
34693: LD_INT 1
34695: PLUS
34696: ARRAY
34697: ST_TO_ADDR
34698: GO 34765
34700: LD_INT 3
34702: DOUBLE
34703: EQUAL
34704: IFTRUE 34708
34706: GO 34764
34708: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34709: LD_ADDR_VAR 0 9
34713: PUSH
34714: LD_VAR 0 23
34718: PUSH
34719: LD_VAR 0 24
34723: PUSH
34724: LD_VAR 0 25
34728: PUSH
34729: LD_VAR 0 26
34733: PUSH
34734: LD_VAR 0 27
34738: PUSH
34739: LD_VAR 0 28
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: PUSH
34752: LD_VAR 0 4
34756: PUSH
34757: LD_INT 1
34759: PLUS
34760: ARRAY
34761: ST_TO_ADDR
34762: GO 34765
34764: POP
34765: GO 35320
34767: LD_INT 2
34769: DOUBLE
34770: EQUAL
34771: IFTRUE 34781
34773: LD_INT 3
34775: DOUBLE
34776: EQUAL
34777: IFTRUE 34781
34779: GO 34837
34781: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34782: LD_ADDR_VAR 0 9
34786: PUSH
34787: LD_VAR 0 29
34791: PUSH
34792: LD_VAR 0 30
34796: PUSH
34797: LD_VAR 0 31
34801: PUSH
34802: LD_VAR 0 32
34806: PUSH
34807: LD_VAR 0 33
34811: PUSH
34812: LD_VAR 0 34
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: PUSH
34825: LD_VAR 0 4
34829: PUSH
34830: LD_INT 1
34832: PLUS
34833: ARRAY
34834: ST_TO_ADDR
34835: GO 35320
34837: LD_INT 16
34839: DOUBLE
34840: EQUAL
34841: IFTRUE 34899
34843: LD_INT 17
34845: DOUBLE
34846: EQUAL
34847: IFTRUE 34899
34849: LD_INT 18
34851: DOUBLE
34852: EQUAL
34853: IFTRUE 34899
34855: LD_INT 19
34857: DOUBLE
34858: EQUAL
34859: IFTRUE 34899
34861: LD_INT 22
34863: DOUBLE
34864: EQUAL
34865: IFTRUE 34899
34867: LD_INT 20
34869: DOUBLE
34870: EQUAL
34871: IFTRUE 34899
34873: LD_INT 21
34875: DOUBLE
34876: EQUAL
34877: IFTRUE 34899
34879: LD_INT 23
34881: DOUBLE
34882: EQUAL
34883: IFTRUE 34899
34885: LD_INT 24
34887: DOUBLE
34888: EQUAL
34889: IFTRUE 34899
34891: LD_INT 25
34893: DOUBLE
34894: EQUAL
34895: IFTRUE 34899
34897: GO 34955
34899: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34900: LD_ADDR_VAR 0 9
34904: PUSH
34905: LD_VAR 0 35
34909: PUSH
34910: LD_VAR 0 36
34914: PUSH
34915: LD_VAR 0 37
34919: PUSH
34920: LD_VAR 0 38
34924: PUSH
34925: LD_VAR 0 39
34929: PUSH
34930: LD_VAR 0 40
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: PUSH
34943: LD_VAR 0 4
34947: PUSH
34948: LD_INT 1
34950: PLUS
34951: ARRAY
34952: ST_TO_ADDR
34953: GO 35320
34955: LD_INT 6
34957: DOUBLE
34958: EQUAL
34959: IFTRUE 35011
34961: LD_INT 7
34963: DOUBLE
34964: EQUAL
34965: IFTRUE 35011
34967: LD_INT 8
34969: DOUBLE
34970: EQUAL
34971: IFTRUE 35011
34973: LD_INT 13
34975: DOUBLE
34976: EQUAL
34977: IFTRUE 35011
34979: LD_INT 12
34981: DOUBLE
34982: EQUAL
34983: IFTRUE 35011
34985: LD_INT 15
34987: DOUBLE
34988: EQUAL
34989: IFTRUE 35011
34991: LD_INT 11
34993: DOUBLE
34994: EQUAL
34995: IFTRUE 35011
34997: LD_INT 14
34999: DOUBLE
35000: EQUAL
35001: IFTRUE 35011
35003: LD_INT 10
35005: DOUBLE
35006: EQUAL
35007: IFTRUE 35011
35009: GO 35067
35011: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35012: LD_ADDR_VAR 0 9
35016: PUSH
35017: LD_VAR 0 41
35021: PUSH
35022: LD_VAR 0 42
35026: PUSH
35027: LD_VAR 0 43
35031: PUSH
35032: LD_VAR 0 44
35036: PUSH
35037: LD_VAR 0 45
35041: PUSH
35042: LD_VAR 0 46
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: PUSH
35055: LD_VAR 0 4
35059: PUSH
35060: LD_INT 1
35062: PLUS
35063: ARRAY
35064: ST_TO_ADDR
35065: GO 35320
35067: LD_INT 36
35069: DOUBLE
35070: EQUAL
35071: IFTRUE 35075
35073: GO 35131
35075: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35076: LD_ADDR_VAR 0 9
35080: PUSH
35081: LD_VAR 0 47
35085: PUSH
35086: LD_VAR 0 48
35090: PUSH
35091: LD_VAR 0 49
35095: PUSH
35096: LD_VAR 0 50
35100: PUSH
35101: LD_VAR 0 51
35105: PUSH
35106: LD_VAR 0 52
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: PUSH
35119: LD_VAR 0 4
35123: PUSH
35124: LD_INT 1
35126: PLUS
35127: ARRAY
35128: ST_TO_ADDR
35129: GO 35320
35131: LD_INT 4
35133: DOUBLE
35134: EQUAL
35135: IFTRUE 35157
35137: LD_INT 5
35139: DOUBLE
35140: EQUAL
35141: IFTRUE 35157
35143: LD_INT 34
35145: DOUBLE
35146: EQUAL
35147: IFTRUE 35157
35149: LD_INT 37
35151: DOUBLE
35152: EQUAL
35153: IFTRUE 35157
35155: GO 35213
35157: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35158: LD_ADDR_VAR 0 9
35162: PUSH
35163: LD_VAR 0 53
35167: PUSH
35168: LD_VAR 0 54
35172: PUSH
35173: LD_VAR 0 55
35177: PUSH
35178: LD_VAR 0 56
35182: PUSH
35183: LD_VAR 0 57
35187: PUSH
35188: LD_VAR 0 58
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: PUSH
35201: LD_VAR 0 4
35205: PUSH
35206: LD_INT 1
35208: PLUS
35209: ARRAY
35210: ST_TO_ADDR
35211: GO 35320
35213: LD_INT 31
35215: DOUBLE
35216: EQUAL
35217: IFTRUE 35263
35219: LD_INT 32
35221: DOUBLE
35222: EQUAL
35223: IFTRUE 35263
35225: LD_INT 33
35227: DOUBLE
35228: EQUAL
35229: IFTRUE 35263
35231: LD_INT 27
35233: DOUBLE
35234: EQUAL
35235: IFTRUE 35263
35237: LD_INT 26
35239: DOUBLE
35240: EQUAL
35241: IFTRUE 35263
35243: LD_INT 28
35245: DOUBLE
35246: EQUAL
35247: IFTRUE 35263
35249: LD_INT 29
35251: DOUBLE
35252: EQUAL
35253: IFTRUE 35263
35255: LD_INT 30
35257: DOUBLE
35258: EQUAL
35259: IFTRUE 35263
35261: GO 35319
35263: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35264: LD_ADDR_VAR 0 9
35268: PUSH
35269: LD_VAR 0 59
35273: PUSH
35274: LD_VAR 0 60
35278: PUSH
35279: LD_VAR 0 61
35283: PUSH
35284: LD_VAR 0 62
35288: PUSH
35289: LD_VAR 0 63
35293: PUSH
35294: LD_VAR 0 64
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: PUSH
35307: LD_VAR 0 4
35311: PUSH
35312: LD_INT 1
35314: PLUS
35315: ARRAY
35316: ST_TO_ADDR
35317: GO 35320
35319: POP
// temp_list2 = [ ] ;
35320: LD_ADDR_VAR 0 10
35324: PUSH
35325: EMPTY
35326: ST_TO_ADDR
// for i in temp_list do
35327: LD_ADDR_VAR 0 8
35331: PUSH
35332: LD_VAR 0 9
35336: PUSH
35337: FOR_IN
35338: IFFALSE 35390
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35340: LD_ADDR_VAR 0 10
35344: PUSH
35345: LD_VAR 0 10
35349: PUSH
35350: LD_VAR 0 8
35354: PUSH
35355: LD_INT 1
35357: ARRAY
35358: PUSH
35359: LD_VAR 0 2
35363: PLUS
35364: PUSH
35365: LD_VAR 0 8
35369: PUSH
35370: LD_INT 2
35372: ARRAY
35373: PUSH
35374: LD_VAR 0 3
35378: PLUS
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: EMPTY
35385: LIST
35386: ADD
35387: ST_TO_ADDR
35388: GO 35337
35390: POP
35391: POP
// result = temp_list2 ;
35392: LD_ADDR_VAR 0 7
35396: PUSH
35397: LD_VAR 0 10
35401: ST_TO_ADDR
// end ;
35402: LD_VAR 0 7
35406: RET
// export function EnemyInRange ( unit , dist ) ; begin
35407: LD_INT 0
35409: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35410: LD_ADDR_VAR 0 3
35414: PUSH
35415: LD_VAR 0 1
35419: PPUSH
35420: CALL_OW 255
35424: PPUSH
35425: LD_VAR 0 1
35429: PPUSH
35430: CALL_OW 250
35434: PPUSH
35435: LD_VAR 0 1
35439: PPUSH
35440: CALL_OW 251
35444: PPUSH
35445: LD_VAR 0 2
35449: PPUSH
35450: CALL 8803 0 4
35454: PUSH
35455: LD_INT 4
35457: ARRAY
35458: ST_TO_ADDR
// end ;
35459: LD_VAR 0 3
35463: RET
// export function PlayerSeeMe ( unit ) ; begin
35464: LD_INT 0
35466: PPUSH
// result := See ( your_side , unit ) ;
35467: LD_ADDR_VAR 0 2
35471: PUSH
35472: LD_OWVAR 2
35476: PPUSH
35477: LD_VAR 0 1
35481: PPUSH
35482: CALL_OW 292
35486: ST_TO_ADDR
// end ;
35487: LD_VAR 0 2
35491: RET
// export function ReverseDir ( unit ) ; begin
35492: LD_INT 0
35494: PPUSH
// if not unit then
35495: LD_VAR 0 1
35499: NOT
35500: IFFALSE 35504
// exit ;
35502: GO 35527
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35504: LD_ADDR_VAR 0 2
35508: PUSH
35509: LD_VAR 0 1
35513: PPUSH
35514: CALL_OW 254
35518: PUSH
35519: LD_INT 3
35521: PLUS
35522: PUSH
35523: LD_INT 6
35525: MOD
35526: ST_TO_ADDR
// end ;
35527: LD_VAR 0 2
35531: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
35532: LD_INT 0
35534: PPUSH
35535: PPUSH
35536: PPUSH
35537: PPUSH
35538: PPUSH
// if not hexes then
35539: LD_VAR 0 2
35543: NOT
35544: IFFALSE 35548
// exit ;
35546: GO 35696
// dist := 9999 ;
35548: LD_ADDR_VAR 0 5
35552: PUSH
35553: LD_INT 9999
35555: ST_TO_ADDR
// for i = 1 to hexes do
35556: LD_ADDR_VAR 0 4
35560: PUSH
35561: DOUBLE
35562: LD_INT 1
35564: DEC
35565: ST_TO_ADDR
35566: LD_VAR 0 2
35570: PUSH
35571: FOR_TO
35572: IFFALSE 35684
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
35574: LD_VAR 0 1
35578: PPUSH
35579: LD_VAR 0 2
35583: PUSH
35584: LD_VAR 0 4
35588: ARRAY
35589: PUSH
35590: LD_INT 1
35592: ARRAY
35593: PPUSH
35594: LD_VAR 0 2
35598: PUSH
35599: LD_VAR 0 4
35603: ARRAY
35604: PUSH
35605: LD_INT 2
35607: ARRAY
35608: PPUSH
35609: CALL_OW 297
35613: PUSH
35614: LD_VAR 0 5
35618: LESS
35619: IFFALSE 35682
// begin hex := hexes [ i ] ;
35621: LD_ADDR_VAR 0 7
35625: PUSH
35626: LD_VAR 0 2
35630: PUSH
35631: LD_VAR 0 4
35635: ARRAY
35636: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35637: LD_ADDR_VAR 0 5
35641: PUSH
35642: LD_VAR 0 1
35646: PPUSH
35647: LD_VAR 0 2
35651: PUSH
35652: LD_VAR 0 4
35656: ARRAY
35657: PUSH
35658: LD_INT 1
35660: ARRAY
35661: PPUSH
35662: LD_VAR 0 2
35666: PUSH
35667: LD_VAR 0 4
35671: ARRAY
35672: PUSH
35673: LD_INT 2
35675: ARRAY
35676: PPUSH
35677: CALL_OW 297
35681: ST_TO_ADDR
// end ; end ;
35682: GO 35571
35684: POP
35685: POP
// result := hex ;
35686: LD_ADDR_VAR 0 3
35690: PUSH
35691: LD_VAR 0 7
35695: ST_TO_ADDR
// end ;
35696: LD_VAR 0 3
35700: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35701: LD_INT 0
35703: PPUSH
35704: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35705: LD_VAR 0 1
35709: NOT
35710: PUSH
35711: LD_VAR 0 1
35715: PUSH
35716: LD_INT 21
35718: PUSH
35719: LD_INT 2
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 23
35728: PUSH
35729: LD_INT 2
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PPUSH
35740: CALL_OW 69
35744: IN
35745: NOT
35746: OR
35747: IFFALSE 35751
// exit ;
35749: GO 35798
// for i = 1 to 3 do
35751: LD_ADDR_VAR 0 3
35755: PUSH
35756: DOUBLE
35757: LD_INT 1
35759: DEC
35760: ST_TO_ADDR
35761: LD_INT 3
35763: PUSH
35764: FOR_TO
35765: IFFALSE 35796
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35767: LD_VAR 0 1
35771: PPUSH
35772: CALL_OW 250
35776: PPUSH
35777: LD_VAR 0 1
35781: PPUSH
35782: CALL_OW 251
35786: PPUSH
35787: LD_INT 1
35789: PPUSH
35790: CALL_OW 453
35794: GO 35764
35796: POP
35797: POP
// end ;
35798: LD_VAR 0 2
35802: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35803: LD_INT 0
35805: PPUSH
35806: PPUSH
35807: PPUSH
35808: PPUSH
35809: PPUSH
35810: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
35811: LD_VAR 0 1
35815: NOT
35816: PUSH
35817: LD_VAR 0 2
35821: NOT
35822: OR
35823: PUSH
35824: LD_VAR 0 1
35828: PPUSH
35829: CALL_OW 314
35833: OR
35834: IFFALSE 35838
// exit ;
35836: GO 36279
// x := GetX ( enemy_unit ) ;
35838: LD_ADDR_VAR 0 7
35842: PUSH
35843: LD_VAR 0 2
35847: PPUSH
35848: CALL_OW 250
35852: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35853: LD_ADDR_VAR 0 8
35857: PUSH
35858: LD_VAR 0 2
35862: PPUSH
35863: CALL_OW 251
35867: ST_TO_ADDR
// if not x or not y then
35868: LD_VAR 0 7
35872: NOT
35873: PUSH
35874: LD_VAR 0 8
35878: NOT
35879: OR
35880: IFFALSE 35884
// exit ;
35882: GO 36279
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35884: LD_ADDR_VAR 0 6
35888: PUSH
35889: LD_VAR 0 7
35893: PPUSH
35894: LD_INT 0
35896: PPUSH
35897: LD_INT 4
35899: PPUSH
35900: CALL_OW 272
35904: PUSH
35905: LD_VAR 0 8
35909: PPUSH
35910: LD_INT 0
35912: PPUSH
35913: LD_INT 4
35915: PPUSH
35916: CALL_OW 273
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_VAR 0 7
35929: PPUSH
35930: LD_INT 1
35932: PPUSH
35933: LD_INT 4
35935: PPUSH
35936: CALL_OW 272
35940: PUSH
35941: LD_VAR 0 8
35945: PPUSH
35946: LD_INT 1
35948: PPUSH
35949: LD_INT 4
35951: PPUSH
35952: CALL_OW 273
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_VAR 0 7
35965: PPUSH
35966: LD_INT 2
35968: PPUSH
35969: LD_INT 4
35971: PPUSH
35972: CALL_OW 272
35976: PUSH
35977: LD_VAR 0 8
35981: PPUSH
35982: LD_INT 2
35984: PPUSH
35985: LD_INT 4
35987: PPUSH
35988: CALL_OW 273
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_VAR 0 7
36001: PPUSH
36002: LD_INT 3
36004: PPUSH
36005: LD_INT 4
36007: PPUSH
36008: CALL_OW 272
36012: PUSH
36013: LD_VAR 0 8
36017: PPUSH
36018: LD_INT 3
36020: PPUSH
36021: LD_INT 4
36023: PPUSH
36024: CALL_OW 273
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_VAR 0 7
36037: PPUSH
36038: LD_INT 4
36040: PPUSH
36041: LD_INT 4
36043: PPUSH
36044: CALL_OW 272
36048: PUSH
36049: LD_VAR 0 8
36053: PPUSH
36054: LD_INT 4
36056: PPUSH
36057: LD_INT 4
36059: PPUSH
36060: CALL_OW 273
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_VAR 0 7
36073: PPUSH
36074: LD_INT 5
36076: PPUSH
36077: LD_INT 4
36079: PPUSH
36080: CALL_OW 272
36084: PUSH
36085: LD_VAR 0 8
36089: PPUSH
36090: LD_INT 5
36092: PPUSH
36093: LD_INT 4
36095: PPUSH
36096: CALL_OW 273
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: ST_TO_ADDR
// for i = tmp downto 1 do
36113: LD_ADDR_VAR 0 4
36117: PUSH
36118: DOUBLE
36119: LD_VAR 0 6
36123: INC
36124: ST_TO_ADDR
36125: LD_INT 1
36127: PUSH
36128: FOR_DOWNTO
36129: IFFALSE 36230
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36131: LD_VAR 0 6
36135: PUSH
36136: LD_VAR 0 4
36140: ARRAY
36141: PUSH
36142: LD_INT 1
36144: ARRAY
36145: PPUSH
36146: LD_VAR 0 6
36150: PUSH
36151: LD_VAR 0 4
36155: ARRAY
36156: PUSH
36157: LD_INT 2
36159: ARRAY
36160: PPUSH
36161: CALL_OW 488
36165: NOT
36166: PUSH
36167: LD_VAR 0 6
36171: PUSH
36172: LD_VAR 0 4
36176: ARRAY
36177: PUSH
36178: LD_INT 1
36180: ARRAY
36181: PPUSH
36182: LD_VAR 0 6
36186: PUSH
36187: LD_VAR 0 4
36191: ARRAY
36192: PUSH
36193: LD_INT 2
36195: ARRAY
36196: PPUSH
36197: CALL_OW 428
36201: PUSH
36202: LD_INT 0
36204: NONEQUAL
36205: OR
36206: IFFALSE 36228
// tmp := Delete ( tmp , i ) ;
36208: LD_ADDR_VAR 0 6
36212: PUSH
36213: LD_VAR 0 6
36217: PPUSH
36218: LD_VAR 0 4
36222: PPUSH
36223: CALL_OW 3
36227: ST_TO_ADDR
36228: GO 36128
36230: POP
36231: POP
// j := GetClosestHex ( unit , tmp ) ;
36232: LD_ADDR_VAR 0 5
36236: PUSH
36237: LD_VAR 0 1
36241: PPUSH
36242: LD_VAR 0 6
36246: PPUSH
36247: CALL 35532 0 2
36251: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36252: LD_VAR 0 1
36256: PPUSH
36257: LD_VAR 0 5
36261: PUSH
36262: LD_INT 1
36264: ARRAY
36265: PPUSH
36266: LD_VAR 0 5
36270: PUSH
36271: LD_INT 2
36273: ARRAY
36274: PPUSH
36275: CALL_OW 111
// end ;
36279: LD_VAR 0 3
36283: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36284: LD_INT 0
36286: PPUSH
36287: PPUSH
36288: PPUSH
// uc_side = 0 ;
36289: LD_ADDR_OWVAR 20
36293: PUSH
36294: LD_INT 0
36296: ST_TO_ADDR
// uc_nation = 0 ;
36297: LD_ADDR_OWVAR 21
36301: PUSH
36302: LD_INT 0
36304: ST_TO_ADDR
// InitHc_All ( ) ;
36305: CALL_OW 584
// InitVc ;
36309: CALL_OW 20
// if mastodonts then
36313: LD_VAR 0 6
36317: IFFALSE 36384
// for i = 1 to mastodonts do
36319: LD_ADDR_VAR 0 11
36323: PUSH
36324: DOUBLE
36325: LD_INT 1
36327: DEC
36328: ST_TO_ADDR
36329: LD_VAR 0 6
36333: PUSH
36334: FOR_TO
36335: IFFALSE 36382
// begin vc_chassis := 31 ;
36337: LD_ADDR_OWVAR 37
36341: PUSH
36342: LD_INT 31
36344: ST_TO_ADDR
// vc_control := control_rider ;
36345: LD_ADDR_OWVAR 38
36349: PUSH
36350: LD_INT 4
36352: ST_TO_ADDR
// animal := CreateVehicle ;
36353: LD_ADDR_VAR 0 12
36357: PUSH
36358: CALL_OW 45
36362: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36363: LD_VAR 0 12
36367: PPUSH
36368: LD_VAR 0 8
36372: PPUSH
36373: LD_INT 0
36375: PPUSH
36376: CALL 38572 0 3
// end ;
36380: GO 36334
36382: POP
36383: POP
// if horses then
36384: LD_VAR 0 5
36388: IFFALSE 36455
// for i = 1 to horses do
36390: LD_ADDR_VAR 0 11
36394: PUSH
36395: DOUBLE
36396: LD_INT 1
36398: DEC
36399: ST_TO_ADDR
36400: LD_VAR 0 5
36404: PUSH
36405: FOR_TO
36406: IFFALSE 36453
// begin hc_class := 21 ;
36408: LD_ADDR_OWVAR 28
36412: PUSH
36413: LD_INT 21
36415: ST_TO_ADDR
// hc_gallery :=  ;
36416: LD_ADDR_OWVAR 33
36420: PUSH
36421: LD_STRING 
36423: ST_TO_ADDR
// animal := CreateHuman ;
36424: LD_ADDR_VAR 0 12
36428: PUSH
36429: CALL_OW 44
36433: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36434: LD_VAR 0 12
36438: PPUSH
36439: LD_VAR 0 8
36443: PPUSH
36444: LD_INT 0
36446: PPUSH
36447: CALL 38572 0 3
// end ;
36451: GO 36405
36453: POP
36454: POP
// if birds then
36455: LD_VAR 0 1
36459: IFFALSE 36526
// for i = 1 to birds do
36461: LD_ADDR_VAR 0 11
36465: PUSH
36466: DOUBLE
36467: LD_INT 1
36469: DEC
36470: ST_TO_ADDR
36471: LD_VAR 0 1
36475: PUSH
36476: FOR_TO
36477: IFFALSE 36524
// begin hc_class = 18 ;
36479: LD_ADDR_OWVAR 28
36483: PUSH
36484: LD_INT 18
36486: ST_TO_ADDR
// hc_gallery =  ;
36487: LD_ADDR_OWVAR 33
36491: PUSH
36492: LD_STRING 
36494: ST_TO_ADDR
// animal := CreateHuman ;
36495: LD_ADDR_VAR 0 12
36499: PUSH
36500: CALL_OW 44
36504: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36505: LD_VAR 0 12
36509: PPUSH
36510: LD_VAR 0 8
36514: PPUSH
36515: LD_INT 0
36517: PPUSH
36518: CALL 38572 0 3
// end ;
36522: GO 36476
36524: POP
36525: POP
// if tigers then
36526: LD_VAR 0 2
36530: IFFALSE 36614
// for i = 1 to tigers do
36532: LD_ADDR_VAR 0 11
36536: PUSH
36537: DOUBLE
36538: LD_INT 1
36540: DEC
36541: ST_TO_ADDR
36542: LD_VAR 0 2
36546: PUSH
36547: FOR_TO
36548: IFFALSE 36612
// begin hc_class = class_tiger ;
36550: LD_ADDR_OWVAR 28
36554: PUSH
36555: LD_INT 14
36557: ST_TO_ADDR
// hc_gallery =  ;
36558: LD_ADDR_OWVAR 33
36562: PUSH
36563: LD_STRING 
36565: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36566: LD_ADDR_OWVAR 35
36570: PUSH
36571: LD_INT 7
36573: NEG
36574: PPUSH
36575: LD_INT 7
36577: PPUSH
36578: CALL_OW 12
36582: ST_TO_ADDR
// animal := CreateHuman ;
36583: LD_ADDR_VAR 0 12
36587: PUSH
36588: CALL_OW 44
36592: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36593: LD_VAR 0 12
36597: PPUSH
36598: LD_VAR 0 8
36602: PPUSH
36603: LD_INT 0
36605: PPUSH
36606: CALL 38572 0 3
// end ;
36610: GO 36547
36612: POP
36613: POP
// if apemans then
36614: LD_VAR 0 3
36618: IFFALSE 36741
// for i = 1 to apemans do
36620: LD_ADDR_VAR 0 11
36624: PUSH
36625: DOUBLE
36626: LD_INT 1
36628: DEC
36629: ST_TO_ADDR
36630: LD_VAR 0 3
36634: PUSH
36635: FOR_TO
36636: IFFALSE 36739
// begin hc_class = class_apeman ;
36638: LD_ADDR_OWVAR 28
36642: PUSH
36643: LD_INT 12
36645: ST_TO_ADDR
// hc_gallery =  ;
36646: LD_ADDR_OWVAR 33
36650: PUSH
36651: LD_STRING 
36653: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36654: LD_ADDR_OWVAR 35
36658: PUSH
36659: LD_INT 2
36661: NEG
36662: PPUSH
36663: LD_INT 2
36665: PPUSH
36666: CALL_OW 12
36670: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36671: LD_ADDR_OWVAR 31
36675: PUSH
36676: LD_INT 1
36678: PPUSH
36679: LD_INT 3
36681: PPUSH
36682: CALL_OW 12
36686: PUSH
36687: LD_INT 1
36689: PPUSH
36690: LD_INT 3
36692: PPUSH
36693: CALL_OW 12
36697: PUSH
36698: LD_INT 0
36700: PUSH
36701: LD_INT 0
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: ST_TO_ADDR
// animal := CreateHuman ;
36710: LD_ADDR_VAR 0 12
36714: PUSH
36715: CALL_OW 44
36719: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36720: LD_VAR 0 12
36724: PPUSH
36725: LD_VAR 0 8
36729: PPUSH
36730: LD_INT 0
36732: PPUSH
36733: CALL 38572 0 3
// end ;
36737: GO 36635
36739: POP
36740: POP
// if enchidnas then
36741: LD_VAR 0 4
36745: IFFALSE 36812
// for i = 1 to enchidnas do
36747: LD_ADDR_VAR 0 11
36751: PUSH
36752: DOUBLE
36753: LD_INT 1
36755: DEC
36756: ST_TO_ADDR
36757: LD_VAR 0 4
36761: PUSH
36762: FOR_TO
36763: IFFALSE 36810
// begin hc_class = 13 ;
36765: LD_ADDR_OWVAR 28
36769: PUSH
36770: LD_INT 13
36772: ST_TO_ADDR
// hc_gallery =  ;
36773: LD_ADDR_OWVAR 33
36777: PUSH
36778: LD_STRING 
36780: ST_TO_ADDR
// animal := CreateHuman ;
36781: LD_ADDR_VAR 0 12
36785: PUSH
36786: CALL_OW 44
36790: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36791: LD_VAR 0 12
36795: PPUSH
36796: LD_VAR 0 8
36800: PPUSH
36801: LD_INT 0
36803: PPUSH
36804: CALL 38572 0 3
// end ;
36808: GO 36762
36810: POP
36811: POP
// if fishes then
36812: LD_VAR 0 7
36816: IFFALSE 36883
// for i = 1 to fishes do
36818: LD_ADDR_VAR 0 11
36822: PUSH
36823: DOUBLE
36824: LD_INT 1
36826: DEC
36827: ST_TO_ADDR
36828: LD_VAR 0 7
36832: PUSH
36833: FOR_TO
36834: IFFALSE 36881
// begin hc_class = 20 ;
36836: LD_ADDR_OWVAR 28
36840: PUSH
36841: LD_INT 20
36843: ST_TO_ADDR
// hc_gallery =  ;
36844: LD_ADDR_OWVAR 33
36848: PUSH
36849: LD_STRING 
36851: ST_TO_ADDR
// animal := CreateHuman ;
36852: LD_ADDR_VAR 0 12
36856: PUSH
36857: CALL_OW 44
36861: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36862: LD_VAR 0 12
36866: PPUSH
36867: LD_VAR 0 9
36871: PPUSH
36872: LD_INT 0
36874: PPUSH
36875: CALL 38572 0 3
// end ;
36879: GO 36833
36881: POP
36882: POP
// end ;
36883: LD_VAR 0 10
36887: RET
// export function WantHeal ( sci , unit ) ; begin
36888: LD_INT 0
36890: PPUSH
// if GetTaskList ( sci ) > 0 then
36891: LD_VAR 0 1
36895: PPUSH
36896: CALL_OW 437
36900: PUSH
36901: LD_INT 0
36903: GREATER
36904: IFFALSE 36974
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36906: LD_VAR 0 1
36910: PPUSH
36911: CALL_OW 437
36915: PUSH
36916: LD_INT 1
36918: ARRAY
36919: PUSH
36920: LD_INT 1
36922: ARRAY
36923: PUSH
36924: LD_STRING l
36926: EQUAL
36927: PUSH
36928: LD_VAR 0 1
36932: PPUSH
36933: CALL_OW 437
36937: PUSH
36938: LD_INT 1
36940: ARRAY
36941: PUSH
36942: LD_INT 4
36944: ARRAY
36945: PUSH
36946: LD_VAR 0 2
36950: EQUAL
36951: AND
36952: IFFALSE 36964
// result := true else
36954: LD_ADDR_VAR 0 3
36958: PUSH
36959: LD_INT 1
36961: ST_TO_ADDR
36962: GO 36972
// result := false ;
36964: LD_ADDR_VAR 0 3
36968: PUSH
36969: LD_INT 0
36971: ST_TO_ADDR
// end else
36972: GO 36982
// result := false ;
36974: LD_ADDR_VAR 0 3
36978: PUSH
36979: LD_INT 0
36981: ST_TO_ADDR
// end ;
36982: LD_VAR 0 3
36986: RET
// export function HealTarget ( sci ) ; begin
36987: LD_INT 0
36989: PPUSH
// if not sci then
36990: LD_VAR 0 1
36994: NOT
36995: IFFALSE 36999
// exit ;
36997: GO 37064
// result := 0 ;
36999: LD_ADDR_VAR 0 2
37003: PUSH
37004: LD_INT 0
37006: ST_TO_ADDR
// if GetTaskList ( sci ) then
37007: LD_VAR 0 1
37011: PPUSH
37012: CALL_OW 437
37016: IFFALSE 37064
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37018: LD_VAR 0 1
37022: PPUSH
37023: CALL_OW 437
37027: PUSH
37028: LD_INT 1
37030: ARRAY
37031: PUSH
37032: LD_INT 1
37034: ARRAY
37035: PUSH
37036: LD_STRING l
37038: EQUAL
37039: IFFALSE 37064
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37041: LD_ADDR_VAR 0 2
37045: PUSH
37046: LD_VAR 0 1
37050: PPUSH
37051: CALL_OW 437
37055: PUSH
37056: LD_INT 1
37058: ARRAY
37059: PUSH
37060: LD_INT 4
37062: ARRAY
37063: ST_TO_ADDR
// end ;
37064: LD_VAR 0 2
37068: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37069: LD_INT 0
37071: PPUSH
37072: PPUSH
37073: PPUSH
37074: PPUSH
// if not base_units then
37075: LD_VAR 0 1
37079: NOT
37080: IFFALSE 37084
// exit ;
37082: GO 37171
// result := false ;
37084: LD_ADDR_VAR 0 2
37088: PUSH
37089: LD_INT 0
37091: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37092: LD_ADDR_VAR 0 5
37096: PUSH
37097: LD_VAR 0 1
37101: PPUSH
37102: LD_INT 21
37104: PUSH
37105: LD_INT 3
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PPUSH
37112: CALL_OW 72
37116: ST_TO_ADDR
// if not tmp then
37117: LD_VAR 0 5
37121: NOT
37122: IFFALSE 37126
// exit ;
37124: GO 37171
// for i in tmp do
37126: LD_ADDR_VAR 0 3
37130: PUSH
37131: LD_VAR 0 5
37135: PUSH
37136: FOR_IN
37137: IFFALSE 37169
// begin result := EnemyInRange ( i , 22 ) ;
37139: LD_ADDR_VAR 0 2
37143: PUSH
37144: LD_VAR 0 3
37148: PPUSH
37149: LD_INT 22
37151: PPUSH
37152: CALL 35407 0 2
37156: ST_TO_ADDR
// if result then
37157: LD_VAR 0 2
37161: IFFALSE 37167
// exit ;
37163: POP
37164: POP
37165: GO 37171
// end ;
37167: GO 37136
37169: POP
37170: POP
// end ;
37171: LD_VAR 0 2
37175: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
37176: LD_INT 0
37178: PPUSH
37179: PPUSH
// if not units then
37180: LD_VAR 0 1
37184: NOT
37185: IFFALSE 37189
// exit ;
37187: GO 37259
// result := [ ] ;
37189: LD_ADDR_VAR 0 3
37193: PUSH
37194: EMPTY
37195: ST_TO_ADDR
// for i in units do
37196: LD_ADDR_VAR 0 4
37200: PUSH
37201: LD_VAR 0 1
37205: PUSH
37206: FOR_IN
37207: IFFALSE 37257
// if GetTag ( i ) = tag then
37209: LD_VAR 0 4
37213: PPUSH
37214: CALL_OW 110
37218: PUSH
37219: LD_VAR 0 2
37223: EQUAL
37224: IFFALSE 37255
// result := Replace ( result , result + 1 , i ) ;
37226: LD_ADDR_VAR 0 3
37230: PUSH
37231: LD_VAR 0 3
37235: PPUSH
37236: LD_VAR 0 3
37240: PUSH
37241: LD_INT 1
37243: PLUS
37244: PPUSH
37245: LD_VAR 0 4
37249: PPUSH
37250: CALL_OW 1
37254: ST_TO_ADDR
37255: GO 37206
37257: POP
37258: POP
// end ;
37259: LD_VAR 0 3
37263: RET
// export function IsDriver ( un ) ; begin
37264: LD_INT 0
37266: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37267: LD_ADDR_VAR 0 2
37271: PUSH
37272: LD_VAR 0 1
37276: PUSH
37277: LD_INT 55
37279: PUSH
37280: EMPTY
37281: LIST
37282: PPUSH
37283: CALL_OW 69
37287: IN
37288: ST_TO_ADDR
// end ;
37289: LD_VAR 0 2
37293: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37294: LD_INT 0
37296: PPUSH
37297: PPUSH
// list := [ ] ;
37298: LD_ADDR_VAR 0 5
37302: PUSH
37303: EMPTY
37304: ST_TO_ADDR
// case d of 0 :
37305: LD_VAR 0 3
37309: PUSH
37310: LD_INT 0
37312: DOUBLE
37313: EQUAL
37314: IFTRUE 37318
37316: GO 37451
37318: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37319: LD_ADDR_VAR 0 5
37323: PUSH
37324: LD_VAR 0 1
37328: PUSH
37329: LD_INT 4
37331: MINUS
37332: PUSH
37333: LD_VAR 0 2
37337: PUSH
37338: LD_INT 4
37340: MINUS
37341: PUSH
37342: LD_INT 2
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: LIST
37349: PUSH
37350: LD_VAR 0 1
37354: PUSH
37355: LD_INT 3
37357: MINUS
37358: PUSH
37359: LD_VAR 0 2
37363: PUSH
37364: LD_INT 1
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: LIST
37371: PUSH
37372: LD_VAR 0 1
37376: PUSH
37377: LD_INT 4
37379: PLUS
37380: PUSH
37381: LD_VAR 0 2
37385: PUSH
37386: LD_INT 4
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: LIST
37393: PUSH
37394: LD_VAR 0 1
37398: PUSH
37399: LD_INT 3
37401: PLUS
37402: PUSH
37403: LD_VAR 0 2
37407: PUSH
37408: LD_INT 3
37410: PLUS
37411: PUSH
37412: LD_INT 5
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: LIST
37419: PUSH
37420: LD_VAR 0 1
37424: PUSH
37425: LD_VAR 0 2
37429: PUSH
37430: LD_INT 4
37432: PLUS
37433: PUSH
37434: LD_INT 0
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: LIST
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: ST_TO_ADDR
// end ; 1 :
37449: GO 38149
37451: LD_INT 1
37453: DOUBLE
37454: EQUAL
37455: IFTRUE 37459
37457: GO 37592
37459: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37460: LD_ADDR_VAR 0 5
37464: PUSH
37465: LD_VAR 0 1
37469: PUSH
37470: LD_VAR 0 2
37474: PUSH
37475: LD_INT 4
37477: MINUS
37478: PUSH
37479: LD_INT 3
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: LIST
37486: PUSH
37487: LD_VAR 0 1
37491: PUSH
37492: LD_INT 3
37494: MINUS
37495: PUSH
37496: LD_VAR 0 2
37500: PUSH
37501: LD_INT 3
37503: MINUS
37504: PUSH
37505: LD_INT 2
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: LIST
37512: PUSH
37513: LD_VAR 0 1
37517: PUSH
37518: LD_INT 4
37520: MINUS
37521: PUSH
37522: LD_VAR 0 2
37526: PUSH
37527: LD_INT 1
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: LIST
37534: PUSH
37535: LD_VAR 0 1
37539: PUSH
37540: LD_VAR 0 2
37544: PUSH
37545: LD_INT 3
37547: PLUS
37548: PUSH
37549: LD_INT 0
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: LIST
37556: PUSH
37557: LD_VAR 0 1
37561: PUSH
37562: LD_INT 4
37564: PLUS
37565: PUSH
37566: LD_VAR 0 2
37570: PUSH
37571: LD_INT 4
37573: PLUS
37574: PUSH
37575: LD_INT 5
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: LIST
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: ST_TO_ADDR
// end ; 2 :
37590: GO 38149
37592: LD_INT 2
37594: DOUBLE
37595: EQUAL
37596: IFTRUE 37600
37598: GO 37729
37600: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37601: LD_ADDR_VAR 0 5
37605: PUSH
37606: LD_VAR 0 1
37610: PUSH
37611: LD_VAR 0 2
37615: PUSH
37616: LD_INT 3
37618: MINUS
37619: PUSH
37620: LD_INT 3
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: LIST
37627: PUSH
37628: LD_VAR 0 1
37632: PUSH
37633: LD_INT 4
37635: PLUS
37636: PUSH
37637: LD_VAR 0 2
37641: PUSH
37642: LD_INT 4
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: LIST
37649: PUSH
37650: LD_VAR 0 1
37654: PUSH
37655: LD_VAR 0 2
37659: PUSH
37660: LD_INT 4
37662: PLUS
37663: PUSH
37664: LD_INT 0
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: LIST
37671: PUSH
37672: LD_VAR 0 1
37676: PUSH
37677: LD_INT 3
37679: MINUS
37680: PUSH
37681: LD_VAR 0 2
37685: PUSH
37686: LD_INT 1
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: LIST
37693: PUSH
37694: LD_VAR 0 1
37698: PUSH
37699: LD_INT 4
37701: MINUS
37702: PUSH
37703: LD_VAR 0 2
37707: PUSH
37708: LD_INT 4
37710: MINUS
37711: PUSH
37712: LD_INT 2
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: LIST
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: ST_TO_ADDR
// end ; 3 :
37727: GO 38149
37729: LD_INT 3
37731: DOUBLE
37732: EQUAL
37733: IFTRUE 37737
37735: GO 37870
37737: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37738: LD_ADDR_VAR 0 5
37742: PUSH
37743: LD_VAR 0 1
37747: PUSH
37748: LD_INT 3
37750: PLUS
37751: PUSH
37752: LD_VAR 0 2
37756: PUSH
37757: LD_INT 4
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: LIST
37764: PUSH
37765: LD_VAR 0 1
37769: PUSH
37770: LD_INT 4
37772: PLUS
37773: PUSH
37774: LD_VAR 0 2
37778: PUSH
37779: LD_INT 4
37781: PLUS
37782: PUSH
37783: LD_INT 5
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: LIST
37790: PUSH
37791: LD_VAR 0 1
37795: PUSH
37796: LD_INT 4
37798: MINUS
37799: PUSH
37800: LD_VAR 0 2
37804: PUSH
37805: LD_INT 1
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: LIST
37812: PUSH
37813: LD_VAR 0 1
37817: PUSH
37818: LD_VAR 0 2
37822: PUSH
37823: LD_INT 4
37825: MINUS
37826: PUSH
37827: LD_INT 3
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: LIST
37834: PUSH
37835: LD_VAR 0 1
37839: PUSH
37840: LD_INT 3
37842: MINUS
37843: PUSH
37844: LD_VAR 0 2
37848: PUSH
37849: LD_INT 3
37851: MINUS
37852: PUSH
37853: LD_INT 2
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: LIST
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: ST_TO_ADDR
// end ; 4 :
37868: GO 38149
37870: LD_INT 4
37872: DOUBLE
37873: EQUAL
37874: IFTRUE 37878
37876: GO 38011
37878: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37879: LD_ADDR_VAR 0 5
37883: PUSH
37884: LD_VAR 0 1
37888: PUSH
37889: LD_VAR 0 2
37893: PUSH
37894: LD_INT 4
37896: PLUS
37897: PUSH
37898: LD_INT 0
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: LIST
37905: PUSH
37906: LD_VAR 0 1
37910: PUSH
37911: LD_INT 3
37913: PLUS
37914: PUSH
37915: LD_VAR 0 2
37919: PUSH
37920: LD_INT 3
37922: PLUS
37923: PUSH
37924: LD_INT 5
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: LIST
37931: PUSH
37932: LD_VAR 0 1
37936: PUSH
37937: LD_INT 4
37939: PLUS
37940: PUSH
37941: LD_VAR 0 2
37945: PUSH
37946: LD_INT 4
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: LIST
37953: PUSH
37954: LD_VAR 0 1
37958: PUSH
37959: LD_VAR 0 2
37963: PUSH
37964: LD_INT 3
37966: MINUS
37967: PUSH
37968: LD_INT 3
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: LIST
37975: PUSH
37976: LD_VAR 0 1
37980: PUSH
37981: LD_INT 4
37983: MINUS
37984: PUSH
37985: LD_VAR 0 2
37989: PUSH
37990: LD_INT 4
37992: MINUS
37993: PUSH
37994: LD_INT 2
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: LIST
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: ST_TO_ADDR
// end ; 5 :
38009: GO 38149
38011: LD_INT 5
38013: DOUBLE
38014: EQUAL
38015: IFTRUE 38019
38017: GO 38148
38019: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38020: LD_ADDR_VAR 0 5
38024: PUSH
38025: LD_VAR 0 1
38029: PUSH
38030: LD_INT 4
38032: MINUS
38033: PUSH
38034: LD_VAR 0 2
38038: PUSH
38039: LD_INT 1
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: LIST
38046: PUSH
38047: LD_VAR 0 1
38051: PUSH
38052: LD_VAR 0 2
38056: PUSH
38057: LD_INT 4
38059: MINUS
38060: PUSH
38061: LD_INT 3
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: LIST
38068: PUSH
38069: LD_VAR 0 1
38073: PUSH
38074: LD_INT 4
38076: PLUS
38077: PUSH
38078: LD_VAR 0 2
38082: PUSH
38083: LD_INT 4
38085: PLUS
38086: PUSH
38087: LD_INT 5
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: LIST
38094: PUSH
38095: LD_VAR 0 1
38099: PUSH
38100: LD_INT 3
38102: PLUS
38103: PUSH
38104: LD_VAR 0 2
38108: PUSH
38109: LD_INT 4
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: LIST
38116: PUSH
38117: LD_VAR 0 1
38121: PUSH
38122: LD_VAR 0 2
38126: PUSH
38127: LD_INT 3
38129: PLUS
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: LIST
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: ST_TO_ADDR
// end ; end ;
38146: GO 38149
38148: POP
// result := list ;
38149: LD_ADDR_VAR 0 4
38153: PUSH
38154: LD_VAR 0 5
38158: ST_TO_ADDR
// end ;
38159: LD_VAR 0 4
38163: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38164: LD_INT 0
38166: PPUSH
38167: PPUSH
38168: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38169: LD_VAR 0 1
38173: NOT
38174: PUSH
38175: LD_VAR 0 2
38179: PUSH
38180: LD_INT 1
38182: PUSH
38183: LD_INT 2
38185: PUSH
38186: LD_INT 3
38188: PUSH
38189: LD_INT 4
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: IN
38198: NOT
38199: OR
38200: IFFALSE 38204
// exit ;
38202: GO 38296
// tmp := [ ] ;
38204: LD_ADDR_VAR 0 5
38208: PUSH
38209: EMPTY
38210: ST_TO_ADDR
// for i in units do
38211: LD_ADDR_VAR 0 4
38215: PUSH
38216: LD_VAR 0 1
38220: PUSH
38221: FOR_IN
38222: IFFALSE 38265
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
38224: LD_ADDR_VAR 0 5
38228: PUSH
38229: LD_VAR 0 5
38233: PPUSH
38234: LD_VAR 0 5
38238: PUSH
38239: LD_INT 1
38241: PLUS
38242: PPUSH
38243: LD_VAR 0 4
38247: PPUSH
38248: LD_VAR 0 2
38252: PPUSH
38253: CALL_OW 259
38257: PPUSH
38258: CALL_OW 2
38262: ST_TO_ADDR
38263: GO 38221
38265: POP
38266: POP
// if not tmp then
38267: LD_VAR 0 5
38271: NOT
38272: IFFALSE 38276
// exit ;
38274: GO 38296
// result := SortListByListDesc ( units , tmp ) ;
38276: LD_ADDR_VAR 0 3
38280: PUSH
38281: LD_VAR 0 1
38285: PPUSH
38286: LD_VAR 0 5
38290: PPUSH
38291: CALL_OW 77
38295: ST_TO_ADDR
// end ;
38296: LD_VAR 0 3
38300: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38301: LD_INT 0
38303: PPUSH
38304: PPUSH
38305: PPUSH
// result := false ;
38306: LD_ADDR_VAR 0 3
38310: PUSH
38311: LD_INT 0
38313: ST_TO_ADDR
// x := GetX ( building ) ;
38314: LD_ADDR_VAR 0 4
38318: PUSH
38319: LD_VAR 0 2
38323: PPUSH
38324: CALL_OW 250
38328: ST_TO_ADDR
// y := GetY ( building ) ;
38329: LD_ADDR_VAR 0 5
38333: PUSH
38334: LD_VAR 0 2
38338: PPUSH
38339: CALL_OW 251
38343: ST_TO_ADDR
// if not building or not x or not y then
38344: LD_VAR 0 2
38348: NOT
38349: PUSH
38350: LD_VAR 0 4
38354: NOT
38355: OR
38356: PUSH
38357: LD_VAR 0 5
38361: NOT
38362: OR
38363: IFFALSE 38367
// exit ;
38365: GO 38459
// if GetTaskList ( unit ) then
38367: LD_VAR 0 1
38371: PPUSH
38372: CALL_OW 437
38376: IFFALSE 38459
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38378: LD_STRING e
38380: PUSH
38381: LD_VAR 0 1
38385: PPUSH
38386: CALL_OW 437
38390: PUSH
38391: LD_INT 1
38393: ARRAY
38394: PUSH
38395: LD_INT 1
38397: ARRAY
38398: EQUAL
38399: PUSH
38400: LD_VAR 0 4
38404: PUSH
38405: LD_VAR 0 1
38409: PPUSH
38410: CALL_OW 437
38414: PUSH
38415: LD_INT 1
38417: ARRAY
38418: PUSH
38419: LD_INT 2
38421: ARRAY
38422: EQUAL
38423: AND
38424: PUSH
38425: LD_VAR 0 5
38429: PUSH
38430: LD_VAR 0 1
38434: PPUSH
38435: CALL_OW 437
38439: PUSH
38440: LD_INT 1
38442: ARRAY
38443: PUSH
38444: LD_INT 3
38446: ARRAY
38447: EQUAL
38448: AND
38449: IFFALSE 38459
// result := true end ;
38451: LD_ADDR_VAR 0 3
38455: PUSH
38456: LD_INT 1
38458: ST_TO_ADDR
// end ;
38459: LD_VAR 0 3
38463: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38464: LD_INT 0
38466: PPUSH
// result := false ;
38467: LD_ADDR_VAR 0 4
38471: PUSH
38472: LD_INT 0
38474: ST_TO_ADDR
// if GetTaskList ( unit ) then
38475: LD_VAR 0 1
38479: PPUSH
38480: CALL_OW 437
38484: IFFALSE 38567
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38486: LD_STRING M
38488: PUSH
38489: LD_VAR 0 1
38493: PPUSH
38494: CALL_OW 437
38498: PUSH
38499: LD_INT 1
38501: ARRAY
38502: PUSH
38503: LD_INT 1
38505: ARRAY
38506: EQUAL
38507: PUSH
38508: LD_VAR 0 2
38512: PUSH
38513: LD_VAR 0 1
38517: PPUSH
38518: CALL_OW 437
38522: PUSH
38523: LD_INT 1
38525: ARRAY
38526: PUSH
38527: LD_INT 2
38529: ARRAY
38530: EQUAL
38531: AND
38532: PUSH
38533: LD_VAR 0 3
38537: PUSH
38538: LD_VAR 0 1
38542: PPUSH
38543: CALL_OW 437
38547: PUSH
38548: LD_INT 1
38550: ARRAY
38551: PUSH
38552: LD_INT 3
38554: ARRAY
38555: EQUAL
38556: AND
38557: IFFALSE 38567
// result := true ;
38559: LD_ADDR_VAR 0 4
38563: PUSH
38564: LD_INT 1
38566: ST_TO_ADDR
// end ; end ;
38567: LD_VAR 0 4
38571: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38572: LD_INT 0
38574: PPUSH
38575: PPUSH
38576: PPUSH
38577: PPUSH
// if not unit or not area then
38578: LD_VAR 0 1
38582: NOT
38583: PUSH
38584: LD_VAR 0 2
38588: NOT
38589: OR
38590: IFFALSE 38594
// exit ;
38592: GO 38758
// tmp := AreaToList ( area , i ) ;
38594: LD_ADDR_VAR 0 6
38598: PUSH
38599: LD_VAR 0 2
38603: PPUSH
38604: LD_VAR 0 5
38608: PPUSH
38609: CALL_OW 517
38613: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38614: LD_ADDR_VAR 0 5
38618: PUSH
38619: DOUBLE
38620: LD_INT 1
38622: DEC
38623: ST_TO_ADDR
38624: LD_VAR 0 6
38628: PUSH
38629: LD_INT 1
38631: ARRAY
38632: PUSH
38633: FOR_TO
38634: IFFALSE 38756
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38636: LD_ADDR_VAR 0 7
38640: PUSH
38641: LD_VAR 0 6
38645: PUSH
38646: LD_INT 1
38648: ARRAY
38649: PUSH
38650: LD_VAR 0 5
38654: ARRAY
38655: PUSH
38656: LD_VAR 0 6
38660: PUSH
38661: LD_INT 2
38663: ARRAY
38664: PUSH
38665: LD_VAR 0 5
38669: ARRAY
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
38675: LD_VAR 0 7
38679: PUSH
38680: LD_INT 1
38682: ARRAY
38683: PPUSH
38684: LD_VAR 0 7
38688: PUSH
38689: LD_INT 2
38691: ARRAY
38692: PPUSH
38693: CALL_OW 428
38697: PUSH
38698: LD_INT 0
38700: EQUAL
38701: IFFALSE 38754
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38703: LD_VAR 0 1
38707: PPUSH
38708: LD_VAR 0 7
38712: PUSH
38713: LD_INT 1
38715: ARRAY
38716: PPUSH
38717: LD_VAR 0 7
38721: PUSH
38722: LD_INT 2
38724: ARRAY
38725: PPUSH
38726: LD_VAR 0 3
38730: PPUSH
38731: CALL_OW 48
// result := IsPlaced ( unit ) ;
38735: LD_ADDR_VAR 0 4
38739: PUSH
38740: LD_VAR 0 1
38744: PPUSH
38745: CALL_OW 305
38749: ST_TO_ADDR
// exit ;
38750: POP
38751: POP
38752: GO 38758
// end ; end ;
38754: GO 38633
38756: POP
38757: POP
// end ;
38758: LD_VAR 0 4
38762: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38763: LD_INT 0
38765: PPUSH
38766: PPUSH
38767: PPUSH
// if not side or side > 8 then
38768: LD_VAR 0 1
38772: NOT
38773: PUSH
38774: LD_VAR 0 1
38778: PUSH
38779: LD_INT 8
38781: GREATER
38782: OR
38783: IFFALSE 38787
// exit ;
38785: GO 38974
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38787: LD_ADDR_VAR 0 4
38791: PUSH
38792: LD_INT 22
38794: PUSH
38795: LD_VAR 0 1
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 21
38806: PUSH
38807: LD_INT 3
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PPUSH
38818: CALL_OW 69
38822: ST_TO_ADDR
// if not tmp then
38823: LD_VAR 0 4
38827: NOT
38828: IFFALSE 38832
// exit ;
38830: GO 38974
// enable_addtolog := true ;
38832: LD_ADDR_OWVAR 81
38836: PUSH
38837: LD_INT 1
38839: ST_TO_ADDR
// AddToLog ( [ ) ;
38840: LD_STRING [
38842: PPUSH
38843: CALL_OW 561
// for i in tmp do
38847: LD_ADDR_VAR 0 3
38851: PUSH
38852: LD_VAR 0 4
38856: PUSH
38857: FOR_IN
38858: IFFALSE 38965
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38860: LD_STRING [
38862: PUSH
38863: LD_VAR 0 3
38867: PPUSH
38868: CALL_OW 266
38872: STR
38873: PUSH
38874: LD_STRING , 
38876: STR
38877: PUSH
38878: LD_VAR 0 3
38882: PPUSH
38883: CALL_OW 250
38887: STR
38888: PUSH
38889: LD_STRING , 
38891: STR
38892: PUSH
38893: LD_VAR 0 3
38897: PPUSH
38898: CALL_OW 251
38902: STR
38903: PUSH
38904: LD_STRING , 
38906: STR
38907: PUSH
38908: LD_VAR 0 3
38912: PPUSH
38913: CALL_OW 254
38917: STR
38918: PUSH
38919: LD_STRING , 
38921: STR
38922: PUSH
38923: LD_VAR 0 3
38927: PPUSH
38928: LD_INT 1
38930: PPUSH
38931: CALL_OW 268
38935: STR
38936: PUSH
38937: LD_STRING , 
38939: STR
38940: PUSH
38941: LD_VAR 0 3
38945: PPUSH
38946: LD_INT 2
38948: PPUSH
38949: CALL_OW 268
38953: STR
38954: PUSH
38955: LD_STRING ],
38957: STR
38958: PPUSH
38959: CALL_OW 561
// end ;
38963: GO 38857
38965: POP
38966: POP
// AddToLog ( ]; ) ;
38967: LD_STRING ];
38969: PPUSH
38970: CALL_OW 561
// end ;
38974: LD_VAR 0 2
38978: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38979: LD_INT 0
38981: PPUSH
38982: PPUSH
38983: PPUSH
38984: PPUSH
38985: PPUSH
// if not area or not rate or not max then
38986: LD_VAR 0 1
38990: NOT
38991: PUSH
38992: LD_VAR 0 2
38996: NOT
38997: OR
38998: PUSH
38999: LD_VAR 0 4
39003: NOT
39004: OR
39005: IFFALSE 39009
// exit ;
39007: GO 39201
// while 1 do
39009: LD_INT 1
39011: IFFALSE 39201
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39013: LD_ADDR_VAR 0 9
39017: PUSH
39018: LD_VAR 0 1
39022: PPUSH
39023: LD_INT 1
39025: PPUSH
39026: CALL_OW 287
39030: PUSH
39031: LD_INT 10
39033: MUL
39034: ST_TO_ADDR
// r := rate / 10 ;
39035: LD_ADDR_VAR 0 7
39039: PUSH
39040: LD_VAR 0 2
39044: PUSH
39045: LD_INT 10
39047: DIVREAL
39048: ST_TO_ADDR
// time := 1 1$00 ;
39049: LD_ADDR_VAR 0 8
39053: PUSH
39054: LD_INT 2100
39056: ST_TO_ADDR
// if amount < min then
39057: LD_VAR 0 9
39061: PUSH
39062: LD_VAR 0 3
39066: LESS
39067: IFFALSE 39085
// r := r * 2 else
39069: LD_ADDR_VAR 0 7
39073: PUSH
39074: LD_VAR 0 7
39078: PUSH
39079: LD_INT 2
39081: MUL
39082: ST_TO_ADDR
39083: GO 39111
// if amount > max then
39085: LD_VAR 0 9
39089: PUSH
39090: LD_VAR 0 4
39094: GREATER
39095: IFFALSE 39111
// r := r / 2 ;
39097: LD_ADDR_VAR 0 7
39101: PUSH
39102: LD_VAR 0 7
39106: PUSH
39107: LD_INT 2
39109: DIVREAL
39110: ST_TO_ADDR
// time := time / r ;
39111: LD_ADDR_VAR 0 8
39115: PUSH
39116: LD_VAR 0 8
39120: PUSH
39121: LD_VAR 0 7
39125: DIVREAL
39126: ST_TO_ADDR
// if time < 0 then
39127: LD_VAR 0 8
39131: PUSH
39132: LD_INT 0
39134: LESS
39135: IFFALSE 39152
// time := time * - 1 ;
39137: LD_ADDR_VAR 0 8
39141: PUSH
39142: LD_VAR 0 8
39146: PUSH
39147: LD_INT 1
39149: NEG
39150: MUL
39151: ST_TO_ADDR
// wait ( time ) ;
39152: LD_VAR 0 8
39156: PPUSH
39157: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
39161: LD_INT 35
39163: PPUSH
39164: LD_INT 875
39166: PPUSH
39167: CALL_OW 12
39171: PPUSH
39172: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39176: LD_INT 1
39178: PPUSH
39179: LD_INT 5
39181: PPUSH
39182: CALL_OW 12
39186: PPUSH
39187: LD_VAR 0 1
39191: PPUSH
39192: LD_INT 1
39194: PPUSH
39195: CALL_OW 55
// end ;
39199: GO 39009
// end ;
39201: LD_VAR 0 5
39205: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39206: LD_INT 0
39208: PPUSH
39209: PPUSH
39210: PPUSH
39211: PPUSH
39212: PPUSH
39213: PPUSH
39214: PPUSH
39215: PPUSH
// if not turrets or not factories then
39216: LD_VAR 0 1
39220: NOT
39221: PUSH
39222: LD_VAR 0 2
39226: NOT
39227: OR
39228: IFFALSE 39232
// exit ;
39230: GO 39539
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39232: LD_ADDR_VAR 0 10
39236: PUSH
39237: LD_INT 5
39239: PUSH
39240: LD_INT 6
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 2
39249: PUSH
39250: LD_INT 4
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 3
39259: PUSH
39260: LD_INT 5
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 24
39274: PUSH
39275: LD_INT 25
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 23
39284: PUSH
39285: LD_INT 27
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 42
39298: PUSH
39299: LD_INT 43
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 44
39308: PUSH
39309: LD_INT 46
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 45
39318: PUSH
39319: LD_INT 47
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: LIST
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: LIST
39335: ST_TO_ADDR
// result := [ ] ;
39336: LD_ADDR_VAR 0 3
39340: PUSH
39341: EMPTY
39342: ST_TO_ADDR
// for i in turrets do
39343: LD_ADDR_VAR 0 4
39347: PUSH
39348: LD_VAR 0 1
39352: PUSH
39353: FOR_IN
39354: IFFALSE 39537
// begin nat := GetNation ( i ) ;
39356: LD_ADDR_VAR 0 7
39360: PUSH
39361: LD_VAR 0 4
39365: PPUSH
39366: CALL_OW 248
39370: ST_TO_ADDR
// weapon := 0 ;
39371: LD_ADDR_VAR 0 8
39375: PUSH
39376: LD_INT 0
39378: ST_TO_ADDR
// if not nat then
39379: LD_VAR 0 7
39383: NOT
39384: IFFALSE 39388
// continue ;
39386: GO 39353
// for j in list [ nat ] do
39388: LD_ADDR_VAR 0 5
39392: PUSH
39393: LD_VAR 0 10
39397: PUSH
39398: LD_VAR 0 7
39402: ARRAY
39403: PUSH
39404: FOR_IN
39405: IFFALSE 39446
// if GetBWeapon ( i ) = j [ 1 ] then
39407: LD_VAR 0 4
39411: PPUSH
39412: CALL_OW 269
39416: PUSH
39417: LD_VAR 0 5
39421: PUSH
39422: LD_INT 1
39424: ARRAY
39425: EQUAL
39426: IFFALSE 39444
// begin weapon := j [ 2 ] ;
39428: LD_ADDR_VAR 0 8
39432: PUSH
39433: LD_VAR 0 5
39437: PUSH
39438: LD_INT 2
39440: ARRAY
39441: ST_TO_ADDR
// break ;
39442: GO 39446
// end ;
39444: GO 39404
39446: POP
39447: POP
// if not weapon then
39448: LD_VAR 0 8
39452: NOT
39453: IFFALSE 39457
// continue ;
39455: GO 39353
// for k in factories do
39457: LD_ADDR_VAR 0 6
39461: PUSH
39462: LD_VAR 0 2
39466: PUSH
39467: FOR_IN
39468: IFFALSE 39533
// begin weapons := AvailableWeaponList ( k ) ;
39470: LD_ADDR_VAR 0 9
39474: PUSH
39475: LD_VAR 0 6
39479: PPUSH
39480: CALL_OW 478
39484: ST_TO_ADDR
// if not weapons then
39485: LD_VAR 0 9
39489: NOT
39490: IFFALSE 39494
// continue ;
39492: GO 39467
// if weapon in weapons then
39494: LD_VAR 0 8
39498: PUSH
39499: LD_VAR 0 9
39503: IN
39504: IFFALSE 39531
// begin result := [ i , weapon ] ;
39506: LD_ADDR_VAR 0 3
39510: PUSH
39511: LD_VAR 0 4
39515: PUSH
39516: LD_VAR 0 8
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: ST_TO_ADDR
// exit ;
39525: POP
39526: POP
39527: POP
39528: POP
39529: GO 39539
// end ; end ;
39531: GO 39467
39533: POP
39534: POP
// end ;
39535: GO 39353
39537: POP
39538: POP
// end ;
39539: LD_VAR 0 3
39543: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39544: LD_INT 0
39546: PPUSH
// if not side or side > 8 then
39547: LD_VAR 0 3
39551: NOT
39552: PUSH
39553: LD_VAR 0 3
39557: PUSH
39558: LD_INT 8
39560: GREATER
39561: OR
39562: IFFALSE 39566
// exit ;
39564: GO 39625
// if not range then
39566: LD_VAR 0 4
39570: NOT
39571: IFFALSE 39582
// range := - 12 ;
39573: LD_ADDR_VAR 0 4
39577: PUSH
39578: LD_INT 12
39580: NEG
39581: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39582: LD_VAR 0 1
39586: PPUSH
39587: LD_VAR 0 2
39591: PPUSH
39592: LD_VAR 0 3
39596: PPUSH
39597: LD_VAR 0 4
39601: PPUSH
39602: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39606: LD_VAR 0 1
39610: PPUSH
39611: LD_VAR 0 2
39615: PPUSH
39616: LD_VAR 0 3
39620: PPUSH
39621: CALL_OW 331
// end ;
39625: LD_VAR 0 5
39629: RET
// export function Video ( mode ) ; begin
39630: LD_INT 0
39632: PPUSH
// ingame_video = mode ;
39633: LD_ADDR_OWVAR 52
39637: PUSH
39638: LD_VAR 0 1
39642: ST_TO_ADDR
// interface_hidden = mode ;
39643: LD_ADDR_OWVAR 54
39647: PUSH
39648: LD_VAR 0 1
39652: ST_TO_ADDR
// end ;
39653: LD_VAR 0 2
39657: RET
// export function Join ( array , element ) ; begin
39658: LD_INT 0
39660: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39661: LD_ADDR_VAR 0 3
39665: PUSH
39666: LD_VAR 0 1
39670: PPUSH
39671: LD_VAR 0 1
39675: PUSH
39676: LD_INT 1
39678: PLUS
39679: PPUSH
39680: LD_VAR 0 2
39684: PPUSH
39685: CALL_OW 1
39689: ST_TO_ADDR
// end ;
39690: LD_VAR 0 3
39694: RET
// export function JoinUnion ( array , element ) ; begin
39695: LD_INT 0
39697: PPUSH
// result := array union element ;
39698: LD_ADDR_VAR 0 3
39702: PUSH
39703: LD_VAR 0 1
39707: PUSH
39708: LD_VAR 0 2
39712: UNION
39713: ST_TO_ADDR
// end ;
39714: LD_VAR 0 3
39718: RET
// export function GetBehemoths ( side ) ; begin
39719: LD_INT 0
39721: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
39722: LD_ADDR_VAR 0 2
39726: PUSH
39727: LD_INT 22
39729: PUSH
39730: LD_VAR 0 1
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 31
39741: PUSH
39742: LD_INT 25
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PPUSH
39753: CALL_OW 69
39757: ST_TO_ADDR
// end ;
39758: LD_VAR 0 2
39762: RET
// export function Shuffle ( array ) ; var i , index ; begin
39763: LD_INT 0
39765: PPUSH
39766: PPUSH
39767: PPUSH
// result := [ ] ;
39768: LD_ADDR_VAR 0 2
39772: PUSH
39773: EMPTY
39774: ST_TO_ADDR
// if not array then
39775: LD_VAR 0 1
39779: NOT
39780: IFFALSE 39784
// exit ;
39782: GO 39883
// Randomize ;
39784: CALL_OW 10
// for i = array downto 1 do
39788: LD_ADDR_VAR 0 3
39792: PUSH
39793: DOUBLE
39794: LD_VAR 0 1
39798: INC
39799: ST_TO_ADDR
39800: LD_INT 1
39802: PUSH
39803: FOR_DOWNTO
39804: IFFALSE 39881
// begin index := rand ( 1 , array ) ;
39806: LD_ADDR_VAR 0 4
39810: PUSH
39811: LD_INT 1
39813: PPUSH
39814: LD_VAR 0 1
39818: PPUSH
39819: CALL_OW 12
39823: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39824: LD_ADDR_VAR 0 2
39828: PUSH
39829: LD_VAR 0 2
39833: PPUSH
39834: LD_VAR 0 2
39838: PUSH
39839: LD_INT 1
39841: PLUS
39842: PPUSH
39843: LD_VAR 0 1
39847: PUSH
39848: LD_VAR 0 4
39852: ARRAY
39853: PPUSH
39854: CALL_OW 2
39858: ST_TO_ADDR
// array := Delete ( array , index ) ;
39859: LD_ADDR_VAR 0 1
39863: PUSH
39864: LD_VAR 0 1
39868: PPUSH
39869: LD_VAR 0 4
39873: PPUSH
39874: CALL_OW 3
39878: ST_TO_ADDR
// end ;
39879: GO 39803
39881: POP
39882: POP
// end ;
39883: LD_VAR 0 2
39887: RET
// export function GetBaseMaterials ( base ) ; begin
39888: LD_INT 0
39890: PPUSH
// result := [ 0 , 0 , 0 ] ;
39891: LD_ADDR_VAR 0 2
39895: PUSH
39896: LD_INT 0
39898: PUSH
39899: LD_INT 0
39901: PUSH
39902: LD_INT 0
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: LIST
39909: ST_TO_ADDR
// if not base then
39910: LD_VAR 0 1
39914: NOT
39915: IFFALSE 39919
// exit ;
39917: GO 39968
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39919: LD_ADDR_VAR 0 2
39923: PUSH
39924: LD_VAR 0 1
39928: PPUSH
39929: LD_INT 1
39931: PPUSH
39932: CALL_OW 275
39936: PUSH
39937: LD_VAR 0 1
39941: PPUSH
39942: LD_INT 2
39944: PPUSH
39945: CALL_OW 275
39949: PUSH
39950: LD_VAR 0 1
39954: PPUSH
39955: LD_INT 3
39957: PPUSH
39958: CALL_OW 275
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: LIST
39967: ST_TO_ADDR
// end ;
39968: LD_VAR 0 2
39972: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39973: LD_INT 0
39975: PPUSH
39976: PPUSH
// result := array ;
39977: LD_ADDR_VAR 0 3
39981: PUSH
39982: LD_VAR 0 1
39986: ST_TO_ADDR
// if size > 0 then
39987: LD_VAR 0 2
39991: PUSH
39992: LD_INT 0
39994: GREATER
39995: IFFALSE 40041
// for i := array downto size do
39997: LD_ADDR_VAR 0 4
40001: PUSH
40002: DOUBLE
40003: LD_VAR 0 1
40007: INC
40008: ST_TO_ADDR
40009: LD_VAR 0 2
40013: PUSH
40014: FOR_DOWNTO
40015: IFFALSE 40039
// result := Delete ( result , result ) ;
40017: LD_ADDR_VAR 0 3
40021: PUSH
40022: LD_VAR 0 3
40026: PPUSH
40027: LD_VAR 0 3
40031: PPUSH
40032: CALL_OW 3
40036: ST_TO_ADDR
40037: GO 40014
40039: POP
40040: POP
// end ;
40041: LD_VAR 0 3
40045: RET
// export function ComExit ( unit ) ; var tmp ; begin
40046: LD_INT 0
40048: PPUSH
40049: PPUSH
// if not IsInUnit ( unit ) then
40050: LD_VAR 0 1
40054: PPUSH
40055: CALL_OW 310
40059: NOT
40060: IFFALSE 40064
// exit ;
40062: GO 40124
// tmp := IsInUnit ( unit ) ;
40064: LD_ADDR_VAR 0 3
40068: PUSH
40069: LD_VAR 0 1
40073: PPUSH
40074: CALL_OW 310
40078: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40079: LD_VAR 0 3
40083: PPUSH
40084: CALL_OW 247
40088: PUSH
40089: LD_INT 2
40091: EQUAL
40092: IFFALSE 40105
// ComExitVehicle ( unit ) else
40094: LD_VAR 0 1
40098: PPUSH
40099: CALL_OW 121
40103: GO 40114
// ComExitBuilding ( unit ) ;
40105: LD_VAR 0 1
40109: PPUSH
40110: CALL_OW 122
// result := tmp ;
40114: LD_ADDR_VAR 0 2
40118: PUSH
40119: LD_VAR 0 3
40123: ST_TO_ADDR
// end ;
40124: LD_VAR 0 2
40128: RET
// export function ComExitAll ( units ) ; var i ; begin
40129: LD_INT 0
40131: PPUSH
40132: PPUSH
// if not units then
40133: LD_VAR 0 1
40137: NOT
40138: IFFALSE 40142
// exit ;
40140: GO 40168
// for i in units do
40142: LD_ADDR_VAR 0 3
40146: PUSH
40147: LD_VAR 0 1
40151: PUSH
40152: FOR_IN
40153: IFFALSE 40166
// ComExit ( i ) ;
40155: LD_VAR 0 3
40159: PPUSH
40160: CALL 40046 0 1
40164: GO 40152
40166: POP
40167: POP
// end ;
40168: LD_VAR 0 2
40172: RET
// export function ResetHc ; begin
40173: LD_INT 0
40175: PPUSH
// InitHc ;
40176: CALL_OW 19
// hc_importance := 0 ;
40180: LD_ADDR_OWVAR 32
40184: PUSH
40185: LD_INT 0
40187: ST_TO_ADDR
// end ;
40188: LD_VAR 0 1
40192: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40193: LD_INT 0
40195: PPUSH
40196: PPUSH
40197: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40198: LD_ADDR_VAR 0 6
40202: PUSH
40203: LD_VAR 0 1
40207: PUSH
40208: LD_VAR 0 3
40212: PLUS
40213: PUSH
40214: LD_INT 2
40216: DIV
40217: ST_TO_ADDR
// if _x < 0 then
40218: LD_VAR 0 6
40222: PUSH
40223: LD_INT 0
40225: LESS
40226: IFFALSE 40243
// _x := _x * - 1 ;
40228: LD_ADDR_VAR 0 6
40232: PUSH
40233: LD_VAR 0 6
40237: PUSH
40238: LD_INT 1
40240: NEG
40241: MUL
40242: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40243: LD_ADDR_VAR 0 7
40247: PUSH
40248: LD_VAR 0 2
40252: PUSH
40253: LD_VAR 0 4
40257: PLUS
40258: PUSH
40259: LD_INT 2
40261: DIV
40262: ST_TO_ADDR
// if _y < 0 then
40263: LD_VAR 0 7
40267: PUSH
40268: LD_INT 0
40270: LESS
40271: IFFALSE 40288
// _y := _y * - 1 ;
40273: LD_ADDR_VAR 0 7
40277: PUSH
40278: LD_VAR 0 7
40282: PUSH
40283: LD_INT 1
40285: NEG
40286: MUL
40287: ST_TO_ADDR
// result := [ _x , _y ] ;
40288: LD_ADDR_VAR 0 5
40292: PUSH
40293: LD_VAR 0 6
40297: PUSH
40298: LD_VAR 0 7
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: ST_TO_ADDR
// end ;
40307: LD_VAR 0 5
40311: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40312: LD_INT 0
40314: PPUSH
40315: PPUSH
40316: PPUSH
40317: PPUSH
// task := GetTaskList ( unit ) ;
40318: LD_ADDR_VAR 0 7
40322: PUSH
40323: LD_VAR 0 1
40327: PPUSH
40328: CALL_OW 437
40332: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40333: LD_VAR 0 7
40337: NOT
40338: PUSH
40339: LD_VAR 0 1
40343: PPUSH
40344: LD_VAR 0 2
40348: PPUSH
40349: CALL_OW 308
40353: NOT
40354: AND
40355: IFFALSE 40359
// exit ;
40357: GO 40477
// if IsInArea ( unit , area ) then
40359: LD_VAR 0 1
40363: PPUSH
40364: LD_VAR 0 2
40368: PPUSH
40369: CALL_OW 308
40373: IFFALSE 40391
// begin ComMoveToArea ( unit , goAway ) ;
40375: LD_VAR 0 1
40379: PPUSH
40380: LD_VAR 0 3
40384: PPUSH
40385: CALL_OW 113
// exit ;
40389: GO 40477
// end ; if task [ 1 ] [ 1 ] <> M then
40391: LD_VAR 0 7
40395: PUSH
40396: LD_INT 1
40398: ARRAY
40399: PUSH
40400: LD_INT 1
40402: ARRAY
40403: PUSH
40404: LD_STRING M
40406: NONEQUAL
40407: IFFALSE 40411
// exit ;
40409: GO 40477
// x := task [ 1 ] [ 2 ] ;
40411: LD_ADDR_VAR 0 5
40415: PUSH
40416: LD_VAR 0 7
40420: PUSH
40421: LD_INT 1
40423: ARRAY
40424: PUSH
40425: LD_INT 2
40427: ARRAY
40428: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40429: LD_ADDR_VAR 0 6
40433: PUSH
40434: LD_VAR 0 7
40438: PUSH
40439: LD_INT 1
40441: ARRAY
40442: PUSH
40443: LD_INT 3
40445: ARRAY
40446: ST_TO_ADDR
// if InArea ( x , y , area ) then
40447: LD_VAR 0 5
40451: PPUSH
40452: LD_VAR 0 6
40456: PPUSH
40457: LD_VAR 0 2
40461: PPUSH
40462: CALL_OW 309
40466: IFFALSE 40477
// ComStop ( unit ) ;
40468: LD_VAR 0 1
40472: PPUSH
40473: CALL_OW 141
// end ;
40477: LD_VAR 0 4
40481: RET
// export function Abs ( value ) ; begin
40482: LD_INT 0
40484: PPUSH
// result := value ;
40485: LD_ADDR_VAR 0 2
40489: PUSH
40490: LD_VAR 0 1
40494: ST_TO_ADDR
// if value < 0 then
40495: LD_VAR 0 1
40499: PUSH
40500: LD_INT 0
40502: LESS
40503: IFFALSE 40520
// result := value * - 1 ;
40505: LD_ADDR_VAR 0 2
40509: PUSH
40510: LD_VAR 0 1
40514: PUSH
40515: LD_INT 1
40517: NEG
40518: MUL
40519: ST_TO_ADDR
// end ;
40520: LD_VAR 0 2
40524: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40525: LD_INT 0
40527: PPUSH
40528: PPUSH
40529: PPUSH
40530: PPUSH
40531: PPUSH
40532: PPUSH
40533: PPUSH
40534: PPUSH
// if not unit or not building then
40535: LD_VAR 0 1
40539: NOT
40540: PUSH
40541: LD_VAR 0 2
40545: NOT
40546: OR
40547: IFFALSE 40551
// exit ;
40549: GO 40777
// x := GetX ( building ) ;
40551: LD_ADDR_VAR 0 4
40555: PUSH
40556: LD_VAR 0 2
40560: PPUSH
40561: CALL_OW 250
40565: ST_TO_ADDR
// y := GetY ( building ) ;
40566: LD_ADDR_VAR 0 6
40570: PUSH
40571: LD_VAR 0 2
40575: PPUSH
40576: CALL_OW 251
40580: ST_TO_ADDR
// d := GetDir ( building ) ;
40581: LD_ADDR_VAR 0 8
40585: PUSH
40586: LD_VAR 0 2
40590: PPUSH
40591: CALL_OW 254
40595: ST_TO_ADDR
// r := 4 ;
40596: LD_ADDR_VAR 0 9
40600: PUSH
40601: LD_INT 4
40603: ST_TO_ADDR
// for i := 1 to 5 do
40604: LD_ADDR_VAR 0 10
40608: PUSH
40609: DOUBLE
40610: LD_INT 1
40612: DEC
40613: ST_TO_ADDR
40614: LD_INT 5
40616: PUSH
40617: FOR_TO
40618: IFFALSE 40775
// begin _x := ShiftX ( x , d , r + i ) ;
40620: LD_ADDR_VAR 0 5
40624: PUSH
40625: LD_VAR 0 4
40629: PPUSH
40630: LD_VAR 0 8
40634: PPUSH
40635: LD_VAR 0 9
40639: PUSH
40640: LD_VAR 0 10
40644: PLUS
40645: PPUSH
40646: CALL_OW 272
40650: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40651: LD_ADDR_VAR 0 7
40655: PUSH
40656: LD_VAR 0 6
40660: PPUSH
40661: LD_VAR 0 8
40665: PPUSH
40666: LD_VAR 0 9
40670: PUSH
40671: LD_VAR 0 10
40675: PLUS
40676: PPUSH
40677: CALL_OW 273
40681: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40682: LD_VAR 0 5
40686: PPUSH
40687: LD_VAR 0 7
40691: PPUSH
40692: CALL_OW 488
40696: PUSH
40697: LD_VAR 0 5
40701: PPUSH
40702: LD_VAR 0 7
40706: PPUSH
40707: CALL_OW 428
40711: PPUSH
40712: CALL_OW 247
40716: PUSH
40717: LD_INT 3
40719: PUSH
40720: LD_INT 2
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: IN
40727: NOT
40728: AND
40729: IFFALSE 40773
// begin ComMoveXY ( unit , _x , _y ) ;
40731: LD_VAR 0 1
40735: PPUSH
40736: LD_VAR 0 5
40740: PPUSH
40741: LD_VAR 0 7
40745: PPUSH
40746: CALL_OW 111
// result := [ _x , _y ] ;
40750: LD_ADDR_VAR 0 3
40754: PUSH
40755: LD_VAR 0 5
40759: PUSH
40760: LD_VAR 0 7
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: ST_TO_ADDR
// exit ;
40769: POP
40770: POP
40771: GO 40777
// end ; end ;
40773: GO 40617
40775: POP
40776: POP
// end ;
40777: LD_VAR 0 3
40781: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40782: LD_INT 0
40784: PPUSH
40785: PPUSH
40786: PPUSH
// result := 0 ;
40787: LD_ADDR_VAR 0 3
40791: PUSH
40792: LD_INT 0
40794: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40795: LD_VAR 0 1
40799: PUSH
40800: LD_INT 0
40802: LESS
40803: PUSH
40804: LD_VAR 0 1
40808: PUSH
40809: LD_INT 8
40811: GREATER
40812: OR
40813: PUSH
40814: LD_VAR 0 2
40818: PUSH
40819: LD_INT 0
40821: LESS
40822: OR
40823: PUSH
40824: LD_VAR 0 2
40828: PUSH
40829: LD_INT 8
40831: GREATER
40832: OR
40833: IFFALSE 40837
// exit ;
40835: GO 40912
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40837: LD_ADDR_VAR 0 4
40841: PUSH
40842: LD_INT 22
40844: PUSH
40845: LD_VAR 0 2
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PPUSH
40854: CALL_OW 69
40858: PUSH
40859: FOR_IN
40860: IFFALSE 40910
// begin un := UnitShoot ( i ) ;
40862: LD_ADDR_VAR 0 5
40866: PUSH
40867: LD_VAR 0 4
40871: PPUSH
40872: CALL_OW 504
40876: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40877: LD_VAR 0 5
40881: PPUSH
40882: CALL_OW 255
40886: PUSH
40887: LD_VAR 0 1
40891: EQUAL
40892: IFFALSE 40908
// begin result := un ;
40894: LD_ADDR_VAR 0 3
40898: PUSH
40899: LD_VAR 0 5
40903: ST_TO_ADDR
// exit ;
40904: POP
40905: POP
40906: GO 40912
// end ; end ;
40908: GO 40859
40910: POP
40911: POP
// end ;
40912: LD_VAR 0 3
40916: RET
// export function GetCargoBay ( units ) ; begin
40917: LD_INT 0
40919: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40920: LD_ADDR_VAR 0 2
40924: PUSH
40925: LD_VAR 0 1
40929: PPUSH
40930: LD_INT 2
40932: PUSH
40933: LD_INT 34
40935: PUSH
40936: LD_INT 12
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 34
40945: PUSH
40946: LD_INT 51
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 34
40955: PUSH
40956: LD_INT 32
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 34
40965: PUSH
40966: LD_EXP 10
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: PPUSH
40982: CALL_OW 72
40986: ST_TO_ADDR
// end ;
40987: LD_VAR 0 2
40991: RET
// export function Negate ( value ) ; begin
40992: LD_INT 0
40994: PPUSH
// result := not value ;
40995: LD_ADDR_VAR 0 2
40999: PUSH
41000: LD_VAR 0 1
41004: NOT
41005: ST_TO_ADDR
// end ;
41006: LD_VAR 0 2
41010: RET
// export function Inc ( value ) ; begin
41011: LD_INT 0
41013: PPUSH
// result := value + 1 ;
41014: LD_ADDR_VAR 0 2
41018: PUSH
41019: LD_VAR 0 1
41023: PUSH
41024: LD_INT 1
41026: PLUS
41027: ST_TO_ADDR
// end ;
41028: LD_VAR 0 2
41032: RET
// export function Dec ( value ) ; begin
41033: LD_INT 0
41035: PPUSH
// result := value - 1 ;
41036: LD_ADDR_VAR 0 2
41040: PUSH
41041: LD_VAR 0 1
41045: PUSH
41046: LD_INT 1
41048: MINUS
41049: ST_TO_ADDR
// end ;
41050: LD_VAR 0 2
41054: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41055: LD_INT 0
41057: PPUSH
41058: PPUSH
41059: PPUSH
41060: PPUSH
41061: PPUSH
41062: PPUSH
41063: PPUSH
41064: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41065: LD_VAR 0 1
41069: PPUSH
41070: LD_VAR 0 2
41074: PPUSH
41075: CALL_OW 488
41079: NOT
41080: PUSH
41081: LD_VAR 0 3
41085: PPUSH
41086: LD_VAR 0 4
41090: PPUSH
41091: CALL_OW 488
41095: NOT
41096: OR
41097: IFFALSE 41110
// begin result := - 1 ;
41099: LD_ADDR_VAR 0 5
41103: PUSH
41104: LD_INT 1
41106: NEG
41107: ST_TO_ADDR
// exit ;
41108: GO 41345
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41110: LD_ADDR_VAR 0 12
41114: PUSH
41115: LD_VAR 0 1
41119: PPUSH
41120: LD_VAR 0 2
41124: PPUSH
41125: LD_VAR 0 3
41129: PPUSH
41130: LD_VAR 0 4
41134: PPUSH
41135: CALL 40193 0 4
41139: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41140: LD_ADDR_VAR 0 11
41144: PUSH
41145: LD_VAR 0 1
41149: PPUSH
41150: LD_VAR 0 2
41154: PPUSH
41155: LD_VAR 0 12
41159: PUSH
41160: LD_INT 1
41162: ARRAY
41163: PPUSH
41164: LD_VAR 0 12
41168: PUSH
41169: LD_INT 2
41171: ARRAY
41172: PPUSH
41173: CALL_OW 298
41177: ST_TO_ADDR
// distance := 9999 ;
41178: LD_ADDR_VAR 0 10
41182: PUSH
41183: LD_INT 9999
41185: ST_TO_ADDR
// for i := 0 to 5 do
41186: LD_ADDR_VAR 0 6
41190: PUSH
41191: DOUBLE
41192: LD_INT 0
41194: DEC
41195: ST_TO_ADDR
41196: LD_INT 5
41198: PUSH
41199: FOR_TO
41200: IFFALSE 41343
// begin _x := ShiftX ( x1 , i , centerDist ) ;
41202: LD_ADDR_VAR 0 7
41206: PUSH
41207: LD_VAR 0 1
41211: PPUSH
41212: LD_VAR 0 6
41216: PPUSH
41217: LD_VAR 0 11
41221: PPUSH
41222: CALL_OW 272
41226: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41227: LD_ADDR_VAR 0 8
41231: PUSH
41232: LD_VAR 0 2
41236: PPUSH
41237: LD_VAR 0 6
41241: PPUSH
41242: LD_VAR 0 11
41246: PPUSH
41247: CALL_OW 273
41251: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41252: LD_VAR 0 7
41256: PPUSH
41257: LD_VAR 0 8
41261: PPUSH
41262: CALL_OW 488
41266: NOT
41267: IFFALSE 41271
// continue ;
41269: GO 41199
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41271: LD_ADDR_VAR 0 9
41275: PUSH
41276: LD_VAR 0 12
41280: PUSH
41281: LD_INT 1
41283: ARRAY
41284: PPUSH
41285: LD_VAR 0 12
41289: PUSH
41290: LD_INT 2
41292: ARRAY
41293: PPUSH
41294: LD_VAR 0 7
41298: PPUSH
41299: LD_VAR 0 8
41303: PPUSH
41304: CALL_OW 298
41308: ST_TO_ADDR
// if tmp < distance then
41309: LD_VAR 0 9
41313: PUSH
41314: LD_VAR 0 10
41318: LESS
41319: IFFALSE 41341
// begin result := i ;
41321: LD_ADDR_VAR 0 5
41325: PUSH
41326: LD_VAR 0 6
41330: ST_TO_ADDR
// distance := tmp ;
41331: LD_ADDR_VAR 0 10
41335: PUSH
41336: LD_VAR 0 9
41340: ST_TO_ADDR
// end ; end ;
41341: GO 41199
41343: POP
41344: POP
// end ;
41345: LD_VAR 0 5
41349: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41350: LD_INT 0
41352: PPUSH
41353: PPUSH
// if not driver or not IsInUnit ( driver ) then
41354: LD_VAR 0 1
41358: NOT
41359: PUSH
41360: LD_VAR 0 1
41364: PPUSH
41365: CALL_OW 310
41369: NOT
41370: OR
41371: IFFALSE 41375
// exit ;
41373: GO 41465
// vehicle := IsInUnit ( driver ) ;
41375: LD_ADDR_VAR 0 3
41379: PUSH
41380: LD_VAR 0 1
41384: PPUSH
41385: CALL_OW 310
41389: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41390: LD_VAR 0 1
41394: PPUSH
41395: LD_STRING \
41397: PUSH
41398: LD_INT 0
41400: PUSH
41401: LD_INT 0
41403: PUSH
41404: LD_INT 0
41406: PUSH
41407: LD_INT 0
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: PUSH
41425: LD_STRING E
41427: PUSH
41428: LD_INT 0
41430: PUSH
41431: LD_INT 0
41433: PUSH
41434: LD_VAR 0 3
41438: PUSH
41439: LD_INT 0
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: LD_INT 0
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PPUSH
41461: CALL_OW 446
// end ;
41465: LD_VAR 0 2
41469: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41470: LD_INT 0
41472: PPUSH
41473: PPUSH
// if not driver or not IsInUnit ( driver ) then
41474: LD_VAR 0 1
41478: NOT
41479: PUSH
41480: LD_VAR 0 1
41484: PPUSH
41485: CALL_OW 310
41489: NOT
41490: OR
41491: IFFALSE 41495
// exit ;
41493: GO 41585
// vehicle := IsInUnit ( driver ) ;
41495: LD_ADDR_VAR 0 3
41499: PUSH
41500: LD_VAR 0 1
41504: PPUSH
41505: CALL_OW 310
41509: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41510: LD_VAR 0 1
41514: PPUSH
41515: LD_STRING \
41517: PUSH
41518: LD_INT 0
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: LD_INT 0
41529: PUSH
41530: LD_INT 0
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: PUSH
41545: LD_STRING E
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: LD_INT 0
41553: PUSH
41554: LD_VAR 0 3
41558: PUSH
41559: LD_INT 0
41561: PUSH
41562: LD_INT 0
41564: PUSH
41565: LD_INT 0
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PPUSH
41581: CALL_OW 447
// end ;
41585: LD_VAR 0 2
41589: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41590: LD_INT 0
41592: PPUSH
41593: PPUSH
41594: PPUSH
// tmp := [ ] ;
41595: LD_ADDR_VAR 0 5
41599: PUSH
41600: EMPTY
41601: ST_TO_ADDR
// for i in units do
41602: LD_ADDR_VAR 0 4
41606: PUSH
41607: LD_VAR 0 1
41611: PUSH
41612: FOR_IN
41613: IFFALSE 41651
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41615: LD_ADDR_VAR 0 5
41619: PUSH
41620: LD_VAR 0 5
41624: PPUSH
41625: LD_VAR 0 5
41629: PUSH
41630: LD_INT 1
41632: PLUS
41633: PPUSH
41634: LD_VAR 0 4
41638: PPUSH
41639: CALL_OW 256
41643: PPUSH
41644: CALL_OW 2
41648: ST_TO_ADDR
41649: GO 41612
41651: POP
41652: POP
// if not tmp then
41653: LD_VAR 0 5
41657: NOT
41658: IFFALSE 41662
// exit ;
41660: GO 41710
// if asc then
41662: LD_VAR 0 2
41666: IFFALSE 41690
// result := SortListByListAsc ( units , tmp ) else
41668: LD_ADDR_VAR 0 3
41672: PUSH
41673: LD_VAR 0 1
41677: PPUSH
41678: LD_VAR 0 5
41682: PPUSH
41683: CALL_OW 76
41687: ST_TO_ADDR
41688: GO 41710
// result := SortListByListDesc ( units , tmp ) ;
41690: LD_ADDR_VAR 0 3
41694: PUSH
41695: LD_VAR 0 1
41699: PPUSH
41700: LD_VAR 0 5
41704: PPUSH
41705: CALL_OW 77
41709: ST_TO_ADDR
// end ;
41710: LD_VAR 0 3
41714: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41715: LD_INT 0
41717: PPUSH
41718: PPUSH
// task := GetTaskList ( mech ) ;
41719: LD_ADDR_VAR 0 4
41723: PUSH
41724: LD_VAR 0 1
41728: PPUSH
41729: CALL_OW 437
41733: ST_TO_ADDR
// if not task then
41734: LD_VAR 0 4
41738: NOT
41739: IFFALSE 41743
// exit ;
41741: GO 41785
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41743: LD_ADDR_VAR 0 3
41747: PUSH
41748: LD_VAR 0 4
41752: PUSH
41753: LD_INT 1
41755: ARRAY
41756: PUSH
41757: LD_INT 1
41759: ARRAY
41760: PUSH
41761: LD_STRING r
41763: EQUAL
41764: PUSH
41765: LD_VAR 0 4
41769: PUSH
41770: LD_INT 1
41772: ARRAY
41773: PUSH
41774: LD_INT 4
41776: ARRAY
41777: PUSH
41778: LD_VAR 0 2
41782: EQUAL
41783: AND
41784: ST_TO_ADDR
// end ;
41785: LD_VAR 0 3
41789: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41790: LD_INT 0
41792: PPUSH
// SetDir ( unit , d ) ;
41793: LD_VAR 0 1
41797: PPUSH
41798: LD_VAR 0 4
41802: PPUSH
41803: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
41807: LD_VAR 0 1
41811: PPUSH
41812: LD_VAR 0 2
41816: PPUSH
41817: LD_VAR 0 3
41821: PPUSH
41822: LD_VAR 0 5
41826: PPUSH
41827: CALL_OW 48
// end ;
41831: LD_VAR 0 6
41835: RET
// export function ToNaturalNumber ( number ) ; begin
41836: LD_INT 0
41838: PPUSH
// result := number div 1 ;
41839: LD_ADDR_VAR 0 2
41843: PUSH
41844: LD_VAR 0 1
41848: PUSH
41849: LD_INT 1
41851: DIV
41852: ST_TO_ADDR
// if number < 0 then
41853: LD_VAR 0 1
41857: PUSH
41858: LD_INT 0
41860: LESS
41861: IFFALSE 41871
// result := 0 ;
41863: LD_ADDR_VAR 0 2
41867: PUSH
41868: LD_INT 0
41870: ST_TO_ADDR
// end ;
41871: LD_VAR 0 2
41875: RET
// export function SortByClass ( units , class ) ; var un ; begin
41876: LD_INT 0
41878: PPUSH
41879: PPUSH
// if not units or not class then
41880: LD_VAR 0 1
41884: NOT
41885: PUSH
41886: LD_VAR 0 2
41890: NOT
41891: OR
41892: IFFALSE 41896
// exit ;
41894: GO 41991
// result := [ ] ;
41896: LD_ADDR_VAR 0 3
41900: PUSH
41901: EMPTY
41902: ST_TO_ADDR
// for un in units do
41903: LD_ADDR_VAR 0 4
41907: PUSH
41908: LD_VAR 0 1
41912: PUSH
41913: FOR_IN
41914: IFFALSE 41989
// if GetClass ( un ) = class then
41916: LD_VAR 0 4
41920: PPUSH
41921: CALL_OW 257
41925: PUSH
41926: LD_VAR 0 2
41930: EQUAL
41931: IFFALSE 41958
// result := Insert ( result , 1 , un ) else
41933: LD_ADDR_VAR 0 3
41937: PUSH
41938: LD_VAR 0 3
41942: PPUSH
41943: LD_INT 1
41945: PPUSH
41946: LD_VAR 0 4
41950: PPUSH
41951: CALL_OW 2
41955: ST_TO_ADDR
41956: GO 41987
// result := Replace ( result , result + 1 , un ) ;
41958: LD_ADDR_VAR 0 3
41962: PUSH
41963: LD_VAR 0 3
41967: PPUSH
41968: LD_VAR 0 3
41972: PUSH
41973: LD_INT 1
41975: PLUS
41976: PPUSH
41977: LD_VAR 0 4
41981: PPUSH
41982: CALL_OW 1
41986: ST_TO_ADDR
41987: GO 41913
41989: POP
41990: POP
// end ;
41991: LD_VAR 0 3
41995: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41996: LD_INT 0
41998: PPUSH
41999: PPUSH
42000: PPUSH
42001: PPUSH
42002: PPUSH
42003: PPUSH
42004: PPUSH
// result := [ ] ;
42005: LD_ADDR_VAR 0 4
42009: PUSH
42010: EMPTY
42011: ST_TO_ADDR
// if x - r < 0 then
42012: LD_VAR 0 1
42016: PUSH
42017: LD_VAR 0 3
42021: MINUS
42022: PUSH
42023: LD_INT 0
42025: LESS
42026: IFFALSE 42038
// min_x := 0 else
42028: LD_ADDR_VAR 0 8
42032: PUSH
42033: LD_INT 0
42035: ST_TO_ADDR
42036: GO 42054
// min_x := x - r ;
42038: LD_ADDR_VAR 0 8
42042: PUSH
42043: LD_VAR 0 1
42047: PUSH
42048: LD_VAR 0 3
42052: MINUS
42053: ST_TO_ADDR
// if y - r < 0 then
42054: LD_VAR 0 2
42058: PUSH
42059: LD_VAR 0 3
42063: MINUS
42064: PUSH
42065: LD_INT 0
42067: LESS
42068: IFFALSE 42080
// min_y := 0 else
42070: LD_ADDR_VAR 0 7
42074: PUSH
42075: LD_INT 0
42077: ST_TO_ADDR
42078: GO 42096
// min_y := y - r ;
42080: LD_ADDR_VAR 0 7
42084: PUSH
42085: LD_VAR 0 2
42089: PUSH
42090: LD_VAR 0 3
42094: MINUS
42095: ST_TO_ADDR
// max_x := x + r ;
42096: LD_ADDR_VAR 0 9
42100: PUSH
42101: LD_VAR 0 1
42105: PUSH
42106: LD_VAR 0 3
42110: PLUS
42111: ST_TO_ADDR
// max_y := y + r ;
42112: LD_ADDR_VAR 0 10
42116: PUSH
42117: LD_VAR 0 2
42121: PUSH
42122: LD_VAR 0 3
42126: PLUS
42127: ST_TO_ADDR
// for _x = min_x to max_x do
42128: LD_ADDR_VAR 0 5
42132: PUSH
42133: DOUBLE
42134: LD_VAR 0 8
42138: DEC
42139: ST_TO_ADDR
42140: LD_VAR 0 9
42144: PUSH
42145: FOR_TO
42146: IFFALSE 42247
// for _y = min_y to max_y do
42148: LD_ADDR_VAR 0 6
42152: PUSH
42153: DOUBLE
42154: LD_VAR 0 7
42158: DEC
42159: ST_TO_ADDR
42160: LD_VAR 0 10
42164: PUSH
42165: FOR_TO
42166: IFFALSE 42243
// begin if not ValidHex ( _x , _y ) then
42168: LD_VAR 0 5
42172: PPUSH
42173: LD_VAR 0 6
42177: PPUSH
42178: CALL_OW 488
42182: NOT
42183: IFFALSE 42187
// continue ;
42185: GO 42165
// if GetResourceTypeXY ( _x , _y ) then
42187: LD_VAR 0 5
42191: PPUSH
42192: LD_VAR 0 6
42196: PPUSH
42197: CALL_OW 283
42201: IFFALSE 42241
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42203: LD_ADDR_VAR 0 4
42207: PUSH
42208: LD_VAR 0 4
42212: PPUSH
42213: LD_VAR 0 4
42217: PUSH
42218: LD_INT 1
42220: PLUS
42221: PPUSH
42222: LD_VAR 0 5
42226: PUSH
42227: LD_VAR 0 6
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PPUSH
42236: CALL_OW 1
42240: ST_TO_ADDR
// end ;
42241: GO 42165
42243: POP
42244: POP
42245: GO 42145
42247: POP
42248: POP
// end ;
42249: LD_VAR 0 4
42253: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42254: LD_INT 0
42256: PPUSH
42257: PPUSH
42258: PPUSH
42259: PPUSH
42260: PPUSH
42261: PPUSH
42262: PPUSH
42263: PPUSH
// if not units then
42264: LD_VAR 0 1
42268: NOT
42269: IFFALSE 42273
// exit ;
42271: GO 42698
// result := UnitFilter ( units , [ f_ok ] ) ;
42273: LD_ADDR_VAR 0 3
42277: PUSH
42278: LD_VAR 0 1
42282: PPUSH
42283: LD_INT 50
42285: PUSH
42286: EMPTY
42287: LIST
42288: PPUSH
42289: CALL_OW 72
42293: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42294: LD_ADDR_VAR 0 8
42298: PUSH
42299: LD_VAR 0 1
42303: PUSH
42304: LD_INT 1
42306: ARRAY
42307: PPUSH
42308: CALL_OW 255
42312: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
42313: LD_ADDR_VAR 0 10
42317: PUSH
42318: LD_INT 29
42320: PUSH
42321: LD_EXP 13
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: ST_TO_ADDR
// if not result then
42330: LD_VAR 0 3
42334: NOT
42335: IFFALSE 42339
// exit ;
42337: GO 42698
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42339: LD_ADDR_VAR 0 5
42343: PUSH
42344: LD_INT 81
42346: PUSH
42347: LD_VAR 0 8
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PPUSH
42356: CALL_OW 69
42360: ST_TO_ADDR
// for i in result do
42361: LD_ADDR_VAR 0 4
42365: PUSH
42366: LD_VAR 0 3
42370: PUSH
42371: FOR_IN
42372: IFFALSE 42696
// begin tag := GetTag ( i ) + 1 ;
42374: LD_ADDR_VAR 0 9
42378: PUSH
42379: LD_VAR 0 4
42383: PPUSH
42384: CALL_OW 110
42388: PUSH
42389: LD_INT 1
42391: PLUS
42392: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
42393: LD_ADDR_VAR 0 7
42397: PUSH
42398: LD_VAR 0 4
42402: PPUSH
42403: CALL_OW 250
42407: PPUSH
42408: LD_VAR 0 4
42412: PPUSH
42413: CALL_OW 251
42417: PPUSH
42418: LD_INT 6
42420: PPUSH
42421: CALL 41996 0 3
42425: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
42426: LD_VAR 0 7
42430: PUSH
42431: LD_VAR 0 4
42435: PPUSH
42436: CALL_OW 264
42440: PUSH
42441: LD_VAR 0 10
42445: IN
42446: NOT
42447: AND
42448: IFFALSE 42487
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42450: LD_VAR 0 4
42454: PPUSH
42455: LD_VAR 0 7
42459: PUSH
42460: LD_INT 1
42462: ARRAY
42463: PUSH
42464: LD_INT 1
42466: ARRAY
42467: PPUSH
42468: LD_VAR 0 7
42472: PUSH
42473: LD_INT 1
42475: ARRAY
42476: PUSH
42477: LD_INT 2
42479: ARRAY
42480: PPUSH
42481: CALL_OW 116
42485: GO 42694
// if path > tag then
42487: LD_VAR 0 2
42491: PUSH
42492: LD_VAR 0 9
42496: GREATER
42497: IFFALSE 42664
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
42499: LD_ADDR_VAR 0 6
42503: PUSH
42504: LD_VAR 0 5
42508: PPUSH
42509: LD_INT 91
42511: PUSH
42512: LD_VAR 0 4
42516: PUSH
42517: LD_INT 12
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: LIST
42524: PPUSH
42525: CALL_OW 72
42529: ST_TO_ADDR
// if nearEnemy then
42530: LD_VAR 0 6
42534: IFFALSE 42562
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42536: LD_VAR 0 4
42540: PPUSH
42541: LD_VAR 0 6
42545: PPUSH
42546: LD_VAR 0 4
42550: PPUSH
42551: CALL_OW 74
42555: PPUSH
42556: CALL_OW 115
42560: GO 42662
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42562: LD_VAR 0 4
42566: PPUSH
42567: LD_VAR 0 2
42571: PUSH
42572: LD_VAR 0 9
42576: ARRAY
42577: PUSH
42578: LD_INT 1
42580: ARRAY
42581: PPUSH
42582: LD_VAR 0 2
42586: PUSH
42587: LD_VAR 0 9
42591: ARRAY
42592: PUSH
42593: LD_INT 2
42595: ARRAY
42596: PPUSH
42597: CALL_OW 297
42601: PUSH
42602: LD_INT 6
42604: GREATER
42605: IFFALSE 42648
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42607: LD_VAR 0 4
42611: PPUSH
42612: LD_VAR 0 2
42616: PUSH
42617: LD_VAR 0 9
42621: ARRAY
42622: PUSH
42623: LD_INT 1
42625: ARRAY
42626: PPUSH
42627: LD_VAR 0 2
42631: PUSH
42632: LD_VAR 0 9
42636: ARRAY
42637: PUSH
42638: LD_INT 2
42640: ARRAY
42641: PPUSH
42642: CALL_OW 114
42646: GO 42662
// SetTag ( i , tag ) ;
42648: LD_VAR 0 4
42652: PPUSH
42653: LD_VAR 0 9
42657: PPUSH
42658: CALL_OW 109
// end else
42662: GO 42694
// if enemy then
42664: LD_VAR 0 5
42668: IFFALSE 42694
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42670: LD_VAR 0 4
42674: PPUSH
42675: LD_VAR 0 5
42679: PPUSH
42680: LD_VAR 0 4
42684: PPUSH
42685: CALL_OW 74
42689: PPUSH
42690: CALL_OW 115
// end ;
42694: GO 42371
42696: POP
42697: POP
// end ;
42698: LD_VAR 0 3
42702: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42703: LD_INT 0
42705: PPUSH
42706: PPUSH
42707: PPUSH
// if not unit or IsInUnit ( unit ) then
42708: LD_VAR 0 1
42712: NOT
42713: PUSH
42714: LD_VAR 0 1
42718: PPUSH
42719: CALL_OW 310
42723: OR
42724: IFFALSE 42728
// exit ;
42726: GO 42819
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42728: LD_ADDR_VAR 0 4
42732: PUSH
42733: LD_VAR 0 1
42737: PPUSH
42738: CALL_OW 250
42742: PPUSH
42743: LD_VAR 0 2
42747: PPUSH
42748: LD_INT 1
42750: PPUSH
42751: CALL_OW 272
42755: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42756: LD_ADDR_VAR 0 5
42760: PUSH
42761: LD_VAR 0 1
42765: PPUSH
42766: CALL_OW 251
42770: PPUSH
42771: LD_VAR 0 2
42775: PPUSH
42776: LD_INT 1
42778: PPUSH
42779: CALL_OW 273
42783: ST_TO_ADDR
// if ValidHex ( x , y ) then
42784: LD_VAR 0 4
42788: PPUSH
42789: LD_VAR 0 5
42793: PPUSH
42794: CALL_OW 488
42798: IFFALSE 42819
// ComTurnXY ( unit , x , y ) ;
42800: LD_VAR 0 1
42804: PPUSH
42805: LD_VAR 0 4
42809: PPUSH
42810: LD_VAR 0 5
42814: PPUSH
42815: CALL_OW 118
// end ;
42819: LD_VAR 0 3
42823: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42824: LD_INT 0
42826: PPUSH
42827: PPUSH
// result := false ;
42828: LD_ADDR_VAR 0 3
42832: PUSH
42833: LD_INT 0
42835: ST_TO_ADDR
// if not units then
42836: LD_VAR 0 2
42840: NOT
42841: IFFALSE 42845
// exit ;
42843: GO 42890
// for i in units do
42845: LD_ADDR_VAR 0 4
42849: PUSH
42850: LD_VAR 0 2
42854: PUSH
42855: FOR_IN
42856: IFFALSE 42888
// if See ( side , i ) then
42858: LD_VAR 0 1
42862: PPUSH
42863: LD_VAR 0 4
42867: PPUSH
42868: CALL_OW 292
42872: IFFALSE 42886
// begin result := true ;
42874: LD_ADDR_VAR 0 3
42878: PUSH
42879: LD_INT 1
42881: ST_TO_ADDR
// exit ;
42882: POP
42883: POP
42884: GO 42890
// end ;
42886: GO 42855
42888: POP
42889: POP
// end ;
42890: LD_VAR 0 3
42894: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42895: LD_INT 0
42897: PPUSH
42898: PPUSH
42899: PPUSH
42900: PPUSH
// if not unit or not points then
42901: LD_VAR 0 1
42905: NOT
42906: PUSH
42907: LD_VAR 0 2
42911: NOT
42912: OR
42913: IFFALSE 42917
// exit ;
42915: GO 43007
// dist := 99999 ;
42917: LD_ADDR_VAR 0 5
42921: PUSH
42922: LD_INT 99999
42924: ST_TO_ADDR
// for i in points do
42925: LD_ADDR_VAR 0 4
42929: PUSH
42930: LD_VAR 0 2
42934: PUSH
42935: FOR_IN
42936: IFFALSE 43005
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42938: LD_ADDR_VAR 0 6
42942: PUSH
42943: LD_VAR 0 1
42947: PPUSH
42948: LD_VAR 0 4
42952: PUSH
42953: LD_INT 1
42955: ARRAY
42956: PPUSH
42957: LD_VAR 0 4
42961: PUSH
42962: LD_INT 2
42964: ARRAY
42965: PPUSH
42966: CALL_OW 297
42970: ST_TO_ADDR
// if tmpDist < dist then
42971: LD_VAR 0 6
42975: PUSH
42976: LD_VAR 0 5
42980: LESS
42981: IFFALSE 43003
// begin result := i ;
42983: LD_ADDR_VAR 0 3
42987: PUSH
42988: LD_VAR 0 4
42992: ST_TO_ADDR
// dist := tmpDist ;
42993: LD_ADDR_VAR 0 5
42997: PUSH
42998: LD_VAR 0 6
43002: ST_TO_ADDR
// end ; end ;
43003: GO 42935
43005: POP
43006: POP
// end ; end_of_file
43007: LD_VAR 0 3
43011: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
43012: LD_INT 0
43014: PPUSH
43015: PPUSH
43016: PPUSH
43017: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
43018: LD_VAR 0 1
43022: PPUSH
43023: CALL_OW 264
43027: PUSH
43028: LD_EXP 13
43032: EQUAL
43033: IFFALSE 43105
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
43035: LD_INT 68
43037: PPUSH
43038: LD_VAR 0 1
43042: PPUSH
43043: CALL_OW 255
43047: PPUSH
43048: CALL_OW 321
43052: PUSH
43053: LD_INT 2
43055: EQUAL
43056: IFFALSE 43068
// eff := 70 else
43058: LD_ADDR_VAR 0 4
43062: PUSH
43063: LD_INT 70
43065: ST_TO_ADDR
43066: GO 43076
// eff := 30 ;
43068: LD_ADDR_VAR 0 4
43072: PUSH
43073: LD_INT 30
43075: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
43076: LD_VAR 0 1
43080: PPUSH
43081: CALL_OW 250
43085: PPUSH
43086: LD_VAR 0 1
43090: PPUSH
43091: CALL_OW 251
43095: PPUSH
43096: LD_VAR 0 4
43100: PPUSH
43101: CALL_OW 495
// end ; end ;
43105: LD_VAR 0 2
43109: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
43110: LD_INT 0
43112: PPUSH
// end ;
43113: LD_VAR 0 4
43117: RET
// export function SOS_Command ( cmd ) ; begin
43118: LD_INT 0
43120: PPUSH
// end ;
43121: LD_VAR 0 2
43125: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
43126: LD_INT 0
43128: PPUSH
// end ;
43129: LD_VAR 0 6
43133: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
43134: LD_INT 0
43136: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
43137: LD_VAR 0 1
43141: PUSH
43142: LD_INT 250
43144: EQUAL
43145: PUSH
43146: LD_VAR 0 2
43150: PPUSH
43151: CALL_OW 264
43155: PUSH
43156: LD_EXP 16
43160: EQUAL
43161: AND
43162: IFFALSE 43183
// MinerPlaceMine ( unit , x , y ) ;
43164: LD_VAR 0 2
43168: PPUSH
43169: LD_VAR 0 4
43173: PPUSH
43174: LD_VAR 0 5
43178: PPUSH
43179: CALL 45532 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
43183: LD_VAR 0 1
43187: PUSH
43188: LD_INT 251
43190: EQUAL
43191: PUSH
43192: LD_VAR 0 2
43196: PPUSH
43197: CALL_OW 264
43201: PUSH
43202: LD_EXP 16
43206: EQUAL
43207: AND
43208: IFFALSE 43229
// MinerDetonateMine ( unit , x , y ) ;
43210: LD_VAR 0 2
43214: PPUSH
43215: LD_VAR 0 4
43219: PPUSH
43220: LD_VAR 0 5
43224: PPUSH
43225: CALL 45809 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
43229: LD_VAR 0 1
43233: PUSH
43234: LD_INT 252
43236: EQUAL
43237: PUSH
43238: LD_VAR 0 2
43242: PPUSH
43243: CALL_OW 264
43247: PUSH
43248: LD_EXP 16
43252: EQUAL
43253: AND
43254: IFFALSE 43275
// MinerCreateMinefield ( unit , x , y ) ;
43256: LD_VAR 0 2
43260: PPUSH
43261: LD_VAR 0 4
43265: PPUSH
43266: LD_VAR 0 5
43270: PPUSH
43271: CALL 46226 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
43275: LD_VAR 0 1
43279: PUSH
43280: LD_INT 253
43282: EQUAL
43283: PUSH
43284: LD_VAR 0 2
43288: PPUSH
43289: CALL_OW 257
43293: PUSH
43294: LD_INT 5
43296: EQUAL
43297: AND
43298: IFFALSE 43319
// ComBinocular ( unit , x , y ) ;
43300: LD_VAR 0 2
43304: PPUSH
43305: LD_VAR 0 4
43309: PPUSH
43310: LD_VAR 0 5
43314: PPUSH
43315: CALL 46597 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
43319: LD_VAR 0 1
43323: PUSH
43324: LD_INT 254
43326: EQUAL
43327: PUSH
43328: LD_VAR 0 2
43332: PPUSH
43333: CALL_OW 264
43337: PUSH
43338: LD_EXP 11
43342: EQUAL
43343: AND
43344: PUSH
43345: LD_VAR 0 3
43349: PPUSH
43350: CALL_OW 263
43354: PUSH
43355: LD_INT 3
43357: EQUAL
43358: AND
43359: IFFALSE 43375
// HackDestroyVehicle ( unit , selectedUnit ) ;
43361: LD_VAR 0 2
43365: PPUSH
43366: LD_VAR 0 3
43370: PPUSH
43371: CALL 44892 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
43375: LD_VAR 0 1
43379: PUSH
43380: LD_INT 255
43382: EQUAL
43383: PUSH
43384: LD_VAR 0 2
43388: PPUSH
43389: CALL_OW 264
43393: PUSH
43394: LD_INT 14
43396: PUSH
43397: LD_INT 53
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: IN
43404: AND
43405: PUSH
43406: LD_VAR 0 4
43410: PPUSH
43411: LD_VAR 0 5
43415: PPUSH
43416: CALL_OW 488
43420: AND
43421: IFFALSE 43445
// CutTreeXYR ( unit , x , y , 12 ) ;
43423: LD_VAR 0 2
43427: PPUSH
43428: LD_VAR 0 4
43432: PPUSH
43433: LD_VAR 0 5
43437: PPUSH
43438: LD_INT 12
43440: PPUSH
43441: CALL 43458 0 4
// end ;
43445: LD_VAR 0 6
43449: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
43450: LD_INT 0
43452: PPUSH
// end ;
43453: LD_VAR 0 4
43457: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
43458: LD_INT 0
43460: PPUSH
43461: PPUSH
43462: PPUSH
43463: PPUSH
43464: PPUSH
43465: PPUSH
43466: PPUSH
43467: PPUSH
43468: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
43469: LD_VAR 0 1
43473: NOT
43474: PUSH
43475: LD_VAR 0 2
43479: PPUSH
43480: LD_VAR 0 3
43484: PPUSH
43485: CALL_OW 488
43489: NOT
43490: OR
43491: PUSH
43492: LD_VAR 0 4
43496: NOT
43497: OR
43498: IFFALSE 43502
// exit ;
43500: GO 43842
// list := [ ] ;
43502: LD_ADDR_VAR 0 13
43506: PUSH
43507: EMPTY
43508: ST_TO_ADDR
// if x - r < 0 then
43509: LD_VAR 0 2
43513: PUSH
43514: LD_VAR 0 4
43518: MINUS
43519: PUSH
43520: LD_INT 0
43522: LESS
43523: IFFALSE 43535
// min_x := 0 else
43525: LD_ADDR_VAR 0 7
43529: PUSH
43530: LD_INT 0
43532: ST_TO_ADDR
43533: GO 43551
// min_x := x - r ;
43535: LD_ADDR_VAR 0 7
43539: PUSH
43540: LD_VAR 0 2
43544: PUSH
43545: LD_VAR 0 4
43549: MINUS
43550: ST_TO_ADDR
// if y - r < 0 then
43551: LD_VAR 0 3
43555: PUSH
43556: LD_VAR 0 4
43560: MINUS
43561: PUSH
43562: LD_INT 0
43564: LESS
43565: IFFALSE 43577
// min_y := 0 else
43567: LD_ADDR_VAR 0 8
43571: PUSH
43572: LD_INT 0
43574: ST_TO_ADDR
43575: GO 43593
// min_y := y - r ;
43577: LD_ADDR_VAR 0 8
43581: PUSH
43582: LD_VAR 0 3
43586: PUSH
43587: LD_VAR 0 4
43591: MINUS
43592: ST_TO_ADDR
// max_x := x + r ;
43593: LD_ADDR_VAR 0 9
43597: PUSH
43598: LD_VAR 0 2
43602: PUSH
43603: LD_VAR 0 4
43607: PLUS
43608: ST_TO_ADDR
// max_y := y + r ;
43609: LD_ADDR_VAR 0 10
43613: PUSH
43614: LD_VAR 0 3
43618: PUSH
43619: LD_VAR 0 4
43623: PLUS
43624: ST_TO_ADDR
// for _x = min_x to max_x do
43625: LD_ADDR_VAR 0 11
43629: PUSH
43630: DOUBLE
43631: LD_VAR 0 7
43635: DEC
43636: ST_TO_ADDR
43637: LD_VAR 0 9
43641: PUSH
43642: FOR_TO
43643: IFFALSE 43760
// for _y = min_y to max_y do
43645: LD_ADDR_VAR 0 12
43649: PUSH
43650: DOUBLE
43651: LD_VAR 0 8
43655: DEC
43656: ST_TO_ADDR
43657: LD_VAR 0 10
43661: PUSH
43662: FOR_TO
43663: IFFALSE 43756
// begin if not ValidHex ( _x , _y ) then
43665: LD_VAR 0 11
43669: PPUSH
43670: LD_VAR 0 12
43674: PPUSH
43675: CALL_OW 488
43679: NOT
43680: IFFALSE 43684
// continue ;
43682: GO 43662
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
43684: LD_VAR 0 11
43688: PPUSH
43689: LD_VAR 0 12
43693: PPUSH
43694: CALL_OW 351
43698: PUSH
43699: LD_VAR 0 11
43703: PPUSH
43704: LD_VAR 0 12
43708: PPUSH
43709: CALL_OW 554
43713: AND
43714: IFFALSE 43754
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
43716: LD_ADDR_VAR 0 13
43720: PUSH
43721: LD_VAR 0 13
43725: PPUSH
43726: LD_VAR 0 13
43730: PUSH
43731: LD_INT 1
43733: PLUS
43734: PPUSH
43735: LD_VAR 0 11
43739: PUSH
43740: LD_VAR 0 12
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PPUSH
43749: CALL_OW 2
43753: ST_TO_ADDR
// end ;
43754: GO 43662
43756: POP
43757: POP
43758: GO 43642
43760: POP
43761: POP
// if not list then
43762: LD_VAR 0 13
43766: NOT
43767: IFFALSE 43771
// exit ;
43769: GO 43842
// for i in list do
43771: LD_ADDR_VAR 0 6
43775: PUSH
43776: LD_VAR 0 13
43780: PUSH
43781: FOR_IN
43782: IFFALSE 43840
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
43784: LD_VAR 0 1
43788: PPUSH
43789: LD_STRING M
43791: PUSH
43792: LD_VAR 0 6
43796: PUSH
43797: LD_INT 1
43799: ARRAY
43800: PUSH
43801: LD_VAR 0 6
43805: PUSH
43806: LD_INT 2
43808: ARRAY
43809: PUSH
43810: LD_INT 0
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: LD_INT 0
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: PUSH
43831: EMPTY
43832: LIST
43833: PPUSH
43834: CALL_OW 447
43838: GO 43781
43840: POP
43841: POP
// end ;
43842: LD_VAR 0 5
43846: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
43847: LD_EXP 30
43851: NOT
43852: IFFALSE 43902
43854: GO 43856
43856: DISABLE
// begin initHack := true ;
43857: LD_ADDR_EXP 30
43861: PUSH
43862: LD_INT 1
43864: ST_TO_ADDR
// hackTanks := [ ] ;
43865: LD_ADDR_EXP 31
43869: PUSH
43870: EMPTY
43871: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
43872: LD_ADDR_EXP 32
43876: PUSH
43877: EMPTY
43878: ST_TO_ADDR
// hackLimit := 3 ;
43879: LD_ADDR_EXP 33
43883: PUSH
43884: LD_INT 3
43886: ST_TO_ADDR
// hackDist := 12 ;
43887: LD_ADDR_EXP 34
43891: PUSH
43892: LD_INT 12
43894: ST_TO_ADDR
// hackCounter := [ ] ;
43895: LD_ADDR_EXP 35
43899: PUSH
43900: EMPTY
43901: ST_TO_ADDR
// end ;
43902: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
43903: LD_EXP 30
43907: PUSH
43908: LD_INT 34
43910: PUSH
43911: LD_EXP 11
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PPUSH
43920: CALL_OW 69
43924: AND
43925: IFFALSE 44180
43927: GO 43929
43929: DISABLE
43930: LD_INT 0
43932: PPUSH
43933: PPUSH
// begin enable ;
43934: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
43935: LD_ADDR_VAR 0 1
43939: PUSH
43940: LD_INT 34
43942: PUSH
43943: LD_EXP 11
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PPUSH
43952: CALL_OW 69
43956: PUSH
43957: FOR_IN
43958: IFFALSE 44178
// begin if not i in hackTanks then
43960: LD_VAR 0 1
43964: PUSH
43965: LD_EXP 31
43969: IN
43970: NOT
43971: IFFALSE 44054
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
43973: LD_ADDR_EXP 31
43977: PUSH
43978: LD_EXP 31
43982: PPUSH
43983: LD_EXP 31
43987: PUSH
43988: LD_INT 1
43990: PLUS
43991: PPUSH
43992: LD_VAR 0 1
43996: PPUSH
43997: CALL_OW 1
44001: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
44002: LD_ADDR_EXP 32
44006: PUSH
44007: LD_EXP 32
44011: PPUSH
44012: LD_EXP 32
44016: PUSH
44017: LD_INT 1
44019: PLUS
44020: PPUSH
44021: EMPTY
44022: PPUSH
44023: CALL_OW 1
44027: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
44028: LD_ADDR_EXP 35
44032: PUSH
44033: LD_EXP 35
44037: PPUSH
44038: LD_EXP 35
44042: PUSH
44043: LD_INT 1
44045: PLUS
44046: PPUSH
44047: EMPTY
44048: PPUSH
44049: CALL_OW 1
44053: ST_TO_ADDR
// end ; if not IsOk ( i ) then
44054: LD_VAR 0 1
44058: PPUSH
44059: CALL_OW 302
44063: NOT
44064: IFFALSE 44077
// begin HackUnlinkAll ( i ) ;
44066: LD_VAR 0 1
44070: PPUSH
44071: CALL 44183 0 1
// continue ;
44075: GO 43957
// end ; HackCheckCapturedStatus ( i ) ;
44077: LD_VAR 0 1
44081: PPUSH
44082: CALL 44626 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
44086: LD_ADDR_VAR 0 2
44090: PUSH
44091: LD_INT 81
44093: PUSH
44094: LD_VAR 0 1
44098: PPUSH
44099: CALL_OW 255
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 33
44110: PUSH
44111: LD_INT 3
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 91
44120: PUSH
44121: LD_VAR 0 1
44125: PUSH
44126: LD_EXP 34
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 50
44138: PUSH
44139: EMPTY
44140: LIST
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: PPUSH
44148: CALL_OW 69
44152: ST_TO_ADDR
// if not tmp then
44153: LD_VAR 0 2
44157: NOT
44158: IFFALSE 44162
// continue ;
44160: GO 43957
// HackLink ( i , tmp ) ;
44162: LD_VAR 0 1
44166: PPUSH
44167: LD_VAR 0 2
44171: PPUSH
44172: CALL 44319 0 2
// end ;
44176: GO 43957
44178: POP
44179: POP
// end ;
44180: PPOPN 2
44182: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
44183: LD_INT 0
44185: PPUSH
44186: PPUSH
44187: PPUSH
// if not hack in hackTanks then
44188: LD_VAR 0 1
44192: PUSH
44193: LD_EXP 31
44197: IN
44198: NOT
44199: IFFALSE 44203
// exit ;
44201: GO 44314
// index := GetElementIndex ( hackTanks , hack ) ;
44203: LD_ADDR_VAR 0 4
44207: PUSH
44208: LD_EXP 31
44212: PPUSH
44213: LD_VAR 0 1
44217: PPUSH
44218: CALL 7692 0 2
44222: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
44223: LD_EXP 32
44227: PUSH
44228: LD_VAR 0 4
44232: ARRAY
44233: IFFALSE 44314
// begin for i in hackTanksCaptured [ index ] do
44235: LD_ADDR_VAR 0 3
44239: PUSH
44240: LD_EXP 32
44244: PUSH
44245: LD_VAR 0 4
44249: ARRAY
44250: PUSH
44251: FOR_IN
44252: IFFALSE 44278
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
44254: LD_VAR 0 3
44258: PUSH
44259: LD_INT 1
44261: ARRAY
44262: PPUSH
44263: LD_VAR 0 3
44267: PUSH
44268: LD_INT 2
44270: ARRAY
44271: PPUSH
44272: CALL_OW 235
44276: GO 44251
44278: POP
44279: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
44280: LD_ADDR_EXP 32
44284: PUSH
44285: LD_EXP 32
44289: PPUSH
44290: LD_VAR 0 4
44294: PPUSH
44295: EMPTY
44296: PPUSH
44297: CALL_OW 1
44301: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
44302: LD_VAR 0 1
44306: PPUSH
44307: LD_INT 0
44309: PPUSH
44310: CALL_OW 505
// end ; end ;
44314: LD_VAR 0 2
44318: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
44319: LD_INT 0
44321: PPUSH
44322: PPUSH
44323: PPUSH
// if not hack in hackTanks or not vehicles then
44324: LD_VAR 0 1
44328: PUSH
44329: LD_EXP 31
44333: IN
44334: NOT
44335: PUSH
44336: LD_VAR 0 2
44340: NOT
44341: OR
44342: IFFALSE 44346
// exit ;
44344: GO 44621
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
44346: LD_ADDR_VAR 0 2
44350: PUSH
44351: LD_VAR 0 1
44355: PPUSH
44356: LD_VAR 0 2
44360: PPUSH
44361: LD_INT 1
44363: PPUSH
44364: LD_INT 1
44366: PPUSH
44367: CALL 8342 0 4
44371: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
44372: LD_ADDR_VAR 0 5
44376: PUSH
44377: LD_EXP 31
44381: PPUSH
44382: LD_VAR 0 1
44386: PPUSH
44387: CALL 7692 0 2
44391: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
44392: LD_EXP 32
44396: PUSH
44397: LD_VAR 0 5
44401: ARRAY
44402: PUSH
44403: LD_EXP 33
44407: LESS
44408: IFFALSE 44597
// begin for i := 1 to vehicles do
44410: LD_ADDR_VAR 0 4
44414: PUSH
44415: DOUBLE
44416: LD_INT 1
44418: DEC
44419: ST_TO_ADDR
44420: LD_VAR 0 2
44424: PUSH
44425: FOR_TO
44426: IFFALSE 44595
// begin if hackTanksCaptured [ index ] = hackLimit then
44428: LD_EXP 32
44432: PUSH
44433: LD_VAR 0 5
44437: ARRAY
44438: PUSH
44439: LD_EXP 33
44443: EQUAL
44444: IFFALSE 44448
// break ;
44446: GO 44595
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
44448: LD_ADDR_EXP 35
44452: PUSH
44453: LD_EXP 35
44457: PPUSH
44458: LD_VAR 0 5
44462: PPUSH
44463: LD_EXP 35
44467: PUSH
44468: LD_VAR 0 5
44472: ARRAY
44473: PUSH
44474: LD_INT 1
44476: PLUS
44477: PPUSH
44478: CALL_OW 1
44482: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
44483: LD_ADDR_EXP 32
44487: PUSH
44488: LD_EXP 32
44492: PPUSH
44493: LD_VAR 0 5
44497: PUSH
44498: LD_EXP 32
44502: PUSH
44503: LD_VAR 0 5
44507: ARRAY
44508: PUSH
44509: LD_INT 1
44511: PLUS
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PPUSH
44517: LD_VAR 0 2
44521: PUSH
44522: LD_VAR 0 4
44526: ARRAY
44527: PUSH
44528: LD_VAR 0 2
44532: PUSH
44533: LD_VAR 0 4
44537: ARRAY
44538: PPUSH
44539: CALL_OW 255
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PPUSH
44548: CALL 7907 0 3
44552: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
44553: LD_VAR 0 2
44557: PUSH
44558: LD_VAR 0 4
44562: ARRAY
44563: PPUSH
44564: LD_VAR 0 1
44568: PPUSH
44569: CALL_OW 255
44573: PPUSH
44574: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
44578: LD_VAR 0 2
44582: PUSH
44583: LD_VAR 0 4
44587: ARRAY
44588: PPUSH
44589: CALL_OW 141
// end ;
44593: GO 44425
44595: POP
44596: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
44597: LD_VAR 0 1
44601: PPUSH
44602: LD_EXP 32
44606: PUSH
44607: LD_VAR 0 5
44611: ARRAY
44612: PUSH
44613: LD_INT 0
44615: PLUS
44616: PPUSH
44617: CALL_OW 505
// end ;
44621: LD_VAR 0 3
44625: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
44626: LD_INT 0
44628: PPUSH
44629: PPUSH
44630: PPUSH
44631: PPUSH
// if not hack in hackTanks then
44632: LD_VAR 0 1
44636: PUSH
44637: LD_EXP 31
44641: IN
44642: NOT
44643: IFFALSE 44647
// exit ;
44645: GO 44887
// index := GetElementIndex ( hackTanks , hack ) ;
44647: LD_ADDR_VAR 0 4
44651: PUSH
44652: LD_EXP 31
44656: PPUSH
44657: LD_VAR 0 1
44661: PPUSH
44662: CALL 7692 0 2
44666: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
44667: LD_ADDR_VAR 0 3
44671: PUSH
44672: DOUBLE
44673: LD_EXP 32
44677: PUSH
44678: LD_VAR 0 4
44682: ARRAY
44683: INC
44684: ST_TO_ADDR
44685: LD_INT 1
44687: PUSH
44688: FOR_DOWNTO
44689: IFFALSE 44861
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
44691: LD_ADDR_VAR 0 5
44695: PUSH
44696: LD_EXP 32
44700: PUSH
44701: LD_VAR 0 4
44705: ARRAY
44706: PUSH
44707: LD_VAR 0 3
44711: ARRAY
44712: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
44713: LD_VAR 0 5
44717: PUSH
44718: LD_INT 1
44720: ARRAY
44721: PPUSH
44722: CALL_OW 302
44726: NOT
44727: PUSH
44728: LD_VAR 0 5
44732: PUSH
44733: LD_INT 1
44735: ARRAY
44736: PPUSH
44737: CALL_OW 255
44741: PUSH
44742: LD_VAR 0 1
44746: PPUSH
44747: CALL_OW 255
44751: NONEQUAL
44752: OR
44753: IFFALSE 44859
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
44755: LD_VAR 0 5
44759: PUSH
44760: LD_INT 1
44762: ARRAY
44763: PPUSH
44764: CALL_OW 305
44768: PUSH
44769: LD_VAR 0 5
44773: PUSH
44774: LD_INT 1
44776: ARRAY
44777: PPUSH
44778: CALL_OW 255
44782: PUSH
44783: LD_VAR 0 1
44787: PPUSH
44788: CALL_OW 255
44792: EQUAL
44793: AND
44794: IFFALSE 44818
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
44796: LD_VAR 0 5
44800: PUSH
44801: LD_INT 1
44803: ARRAY
44804: PPUSH
44805: LD_VAR 0 5
44809: PUSH
44810: LD_INT 2
44812: ARRAY
44813: PPUSH
44814: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
44818: LD_ADDR_EXP 32
44822: PUSH
44823: LD_EXP 32
44827: PPUSH
44828: LD_VAR 0 4
44832: PPUSH
44833: LD_EXP 32
44837: PUSH
44838: LD_VAR 0 4
44842: ARRAY
44843: PPUSH
44844: LD_VAR 0 3
44848: PPUSH
44849: CALL_OW 3
44853: PPUSH
44854: CALL_OW 1
44858: ST_TO_ADDR
// end ; end ;
44859: GO 44688
44861: POP
44862: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
44863: LD_VAR 0 1
44867: PPUSH
44868: LD_EXP 32
44872: PUSH
44873: LD_VAR 0 4
44877: ARRAY
44878: PUSH
44879: LD_INT 0
44881: PLUS
44882: PPUSH
44883: CALL_OW 505
// end ;
44887: LD_VAR 0 2
44891: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
44892: LD_INT 0
44894: PPUSH
44895: PPUSH
44896: PPUSH
44897: PPUSH
// if not hack in hackTanks then
44898: LD_VAR 0 1
44902: PUSH
44903: LD_EXP 31
44907: IN
44908: NOT
44909: IFFALSE 44913
// exit ;
44911: GO 44998
// index := GetElementIndex ( hackTanks , hack ) ;
44913: LD_ADDR_VAR 0 5
44917: PUSH
44918: LD_EXP 31
44922: PPUSH
44923: LD_VAR 0 1
44927: PPUSH
44928: CALL 7692 0 2
44932: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
44933: LD_ADDR_VAR 0 4
44937: PUSH
44938: DOUBLE
44939: LD_INT 1
44941: DEC
44942: ST_TO_ADDR
44943: LD_EXP 32
44947: PUSH
44948: LD_VAR 0 5
44952: ARRAY
44953: PUSH
44954: FOR_TO
44955: IFFALSE 44996
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
44957: LD_EXP 32
44961: PUSH
44962: LD_VAR 0 5
44966: ARRAY
44967: PUSH
44968: LD_VAR 0 4
44972: ARRAY
44973: PUSH
44974: LD_INT 1
44976: ARRAY
44977: PUSH
44978: LD_VAR 0 2
44982: EQUAL
44983: IFFALSE 44994
// KillUnit ( vehicle ) ;
44985: LD_VAR 0 2
44989: PPUSH
44990: CALL_OW 66
44994: GO 44954
44996: POP
44997: POP
// end ;
44998: LD_VAR 0 3
45002: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
45003: LD_EXP 36
45007: NOT
45008: IFFALSE 45043
45010: GO 45012
45012: DISABLE
// begin initMiner := true ;
45013: LD_ADDR_EXP 36
45017: PUSH
45018: LD_INT 1
45020: ST_TO_ADDR
// minersList := [ ] ;
45021: LD_ADDR_EXP 37
45025: PUSH
45026: EMPTY
45027: ST_TO_ADDR
// minerMinesList := [ ] ;
45028: LD_ADDR_EXP 38
45032: PUSH
45033: EMPTY
45034: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
45035: LD_ADDR_EXP 39
45039: PUSH
45040: LD_INT 5
45042: ST_TO_ADDR
// end ;
45043: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
45044: LD_EXP 36
45048: PUSH
45049: LD_INT 34
45051: PUSH
45052: LD_EXP 16
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PPUSH
45061: CALL_OW 69
45065: AND
45066: IFFALSE 45529
45068: GO 45070
45070: DISABLE
45071: LD_INT 0
45073: PPUSH
45074: PPUSH
45075: PPUSH
45076: PPUSH
// begin enable ;
45077: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
45078: LD_ADDR_VAR 0 1
45082: PUSH
45083: LD_INT 34
45085: PUSH
45086: LD_EXP 16
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PPUSH
45095: CALL_OW 69
45099: PUSH
45100: FOR_IN
45101: IFFALSE 45173
// begin if not i in minersList then
45103: LD_VAR 0 1
45107: PUSH
45108: LD_EXP 37
45112: IN
45113: NOT
45114: IFFALSE 45171
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
45116: LD_ADDR_EXP 37
45120: PUSH
45121: LD_EXP 37
45125: PPUSH
45126: LD_EXP 37
45130: PUSH
45131: LD_INT 1
45133: PLUS
45134: PPUSH
45135: LD_VAR 0 1
45139: PPUSH
45140: CALL_OW 1
45144: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
45145: LD_ADDR_EXP 38
45149: PUSH
45150: LD_EXP 38
45154: PPUSH
45155: LD_EXP 38
45159: PUSH
45160: LD_INT 1
45162: PLUS
45163: PPUSH
45164: EMPTY
45165: PPUSH
45166: CALL_OW 1
45170: ST_TO_ADDR
// end end ;
45171: GO 45100
45173: POP
45174: POP
// for i := minerMinesList downto 1 do
45175: LD_ADDR_VAR 0 1
45179: PUSH
45180: DOUBLE
45181: LD_EXP 38
45185: INC
45186: ST_TO_ADDR
45187: LD_INT 1
45189: PUSH
45190: FOR_DOWNTO
45191: IFFALSE 45527
// begin if IsLive ( minersList [ i ] ) then
45193: LD_EXP 37
45197: PUSH
45198: LD_VAR 0 1
45202: ARRAY
45203: PPUSH
45204: CALL_OW 300
45208: IFFALSE 45236
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
45210: LD_EXP 37
45214: PUSH
45215: LD_VAR 0 1
45219: ARRAY
45220: PPUSH
45221: LD_EXP 38
45225: PUSH
45226: LD_VAR 0 1
45230: ARRAY
45231: PPUSH
45232: CALL_OW 505
// if not minerMinesList [ i ] then
45236: LD_EXP 38
45240: PUSH
45241: LD_VAR 0 1
45245: ARRAY
45246: NOT
45247: IFFALSE 45251
// continue ;
45249: GO 45190
// for j := minerMinesList [ i ] downto 1 do
45251: LD_ADDR_VAR 0 2
45255: PUSH
45256: DOUBLE
45257: LD_EXP 38
45261: PUSH
45262: LD_VAR 0 1
45266: ARRAY
45267: INC
45268: ST_TO_ADDR
45269: LD_INT 1
45271: PUSH
45272: FOR_DOWNTO
45273: IFFALSE 45523
// begin side := GetSide ( minersList [ i ] ) ;
45275: LD_ADDR_VAR 0 3
45279: PUSH
45280: LD_EXP 37
45284: PUSH
45285: LD_VAR 0 1
45289: ARRAY
45290: PPUSH
45291: CALL_OW 255
45295: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
45296: LD_ADDR_VAR 0 4
45300: PUSH
45301: LD_EXP 38
45305: PUSH
45306: LD_VAR 0 1
45310: ARRAY
45311: PUSH
45312: LD_VAR 0 2
45316: ARRAY
45317: PUSH
45318: LD_INT 1
45320: ARRAY
45321: PPUSH
45322: LD_EXP 38
45326: PUSH
45327: LD_VAR 0 1
45331: ARRAY
45332: PUSH
45333: LD_VAR 0 2
45337: ARRAY
45338: PUSH
45339: LD_INT 2
45341: ARRAY
45342: PPUSH
45343: CALL_OW 428
45347: ST_TO_ADDR
// if not tmp then
45348: LD_VAR 0 4
45352: NOT
45353: IFFALSE 45357
// continue ;
45355: GO 45272
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
45357: LD_VAR 0 4
45361: PUSH
45362: LD_INT 81
45364: PUSH
45365: LD_VAR 0 3
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PPUSH
45374: CALL_OW 69
45378: IN
45379: PUSH
45380: LD_EXP 38
45384: PUSH
45385: LD_VAR 0 1
45389: ARRAY
45390: PUSH
45391: LD_VAR 0 2
45395: ARRAY
45396: PUSH
45397: LD_INT 1
45399: ARRAY
45400: PPUSH
45401: LD_EXP 38
45405: PUSH
45406: LD_VAR 0 1
45410: ARRAY
45411: PUSH
45412: LD_VAR 0 2
45416: ARRAY
45417: PUSH
45418: LD_INT 2
45420: ARRAY
45421: PPUSH
45422: CALL_OW 458
45426: AND
45427: IFFALSE 45521
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
45429: LD_EXP 38
45433: PUSH
45434: LD_VAR 0 1
45438: ARRAY
45439: PUSH
45440: LD_VAR 0 2
45444: ARRAY
45445: PUSH
45446: LD_INT 1
45448: ARRAY
45449: PPUSH
45450: LD_EXP 38
45454: PUSH
45455: LD_VAR 0 1
45459: ARRAY
45460: PUSH
45461: LD_VAR 0 2
45465: ARRAY
45466: PUSH
45467: LD_INT 2
45469: ARRAY
45470: PPUSH
45471: LD_VAR 0 3
45475: PPUSH
45476: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
45480: LD_ADDR_EXP 38
45484: PUSH
45485: LD_EXP 38
45489: PPUSH
45490: LD_VAR 0 1
45494: PPUSH
45495: LD_EXP 38
45499: PUSH
45500: LD_VAR 0 1
45504: ARRAY
45505: PPUSH
45506: LD_VAR 0 2
45510: PPUSH
45511: CALL_OW 3
45515: PPUSH
45516: CALL_OW 1
45520: ST_TO_ADDR
// end ; end ;
45521: GO 45272
45523: POP
45524: POP
// end ;
45525: GO 45190
45527: POP
45528: POP
// end ;
45529: PPOPN 4
45531: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
45532: LD_INT 0
45534: PPUSH
45535: PPUSH
// result := false ;
45536: LD_ADDR_VAR 0 4
45540: PUSH
45541: LD_INT 0
45543: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
45544: LD_VAR 0 1
45548: PPUSH
45549: CALL_OW 264
45553: PUSH
45554: LD_EXP 16
45558: EQUAL
45559: NOT
45560: IFFALSE 45564
// exit ;
45562: GO 45804
// index := GetElementIndex ( minersList , unit ) ;
45564: LD_ADDR_VAR 0 5
45568: PUSH
45569: LD_EXP 37
45573: PPUSH
45574: LD_VAR 0 1
45578: PPUSH
45579: CALL 7692 0 2
45583: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
45584: LD_EXP 38
45588: PUSH
45589: LD_VAR 0 5
45593: ARRAY
45594: PUSH
45595: LD_EXP 39
45599: GREATEREQUAL
45600: IFFALSE 45604
// exit ;
45602: GO 45804
// ComMoveXY ( unit , x , y ) ;
45604: LD_VAR 0 1
45608: PPUSH
45609: LD_VAR 0 2
45613: PPUSH
45614: LD_VAR 0 3
45618: PPUSH
45619: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
45623: LD_INT 35
45625: PPUSH
45626: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
45630: LD_VAR 0 1
45634: PPUSH
45635: LD_VAR 0 2
45639: PPUSH
45640: LD_VAR 0 3
45644: PPUSH
45645: CALL 38464 0 3
45649: NOT
45650: PUSH
45651: LD_VAR 0 1
45655: PPUSH
45656: CALL_OW 314
45660: AND
45661: IFFALSE 45665
// exit ;
45663: GO 45804
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
45665: LD_VAR 0 2
45669: PPUSH
45670: LD_VAR 0 3
45674: PPUSH
45675: CALL_OW 428
45679: PUSH
45680: LD_VAR 0 1
45684: EQUAL
45685: PUSH
45686: LD_VAR 0 1
45690: PPUSH
45691: CALL_OW 314
45695: NOT
45696: AND
45697: IFFALSE 45623
// PlaySoundXY ( x , y , PlantMine ) ;
45699: LD_VAR 0 2
45703: PPUSH
45704: LD_VAR 0 3
45708: PPUSH
45709: LD_STRING PlantMine
45711: PPUSH
45712: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
45716: LD_VAR 0 2
45720: PPUSH
45721: LD_VAR 0 3
45725: PPUSH
45726: LD_VAR 0 1
45730: PPUSH
45731: CALL_OW 255
45735: PPUSH
45736: LD_INT 0
45738: PPUSH
45739: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
45743: LD_ADDR_EXP 38
45747: PUSH
45748: LD_EXP 38
45752: PPUSH
45753: LD_VAR 0 5
45757: PUSH
45758: LD_EXP 38
45762: PUSH
45763: LD_VAR 0 5
45767: ARRAY
45768: PUSH
45769: LD_INT 1
45771: PLUS
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PPUSH
45777: LD_VAR 0 2
45781: PUSH
45782: LD_VAR 0 3
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PPUSH
45791: CALL 7907 0 3
45795: ST_TO_ADDR
// result := true ;
45796: LD_ADDR_VAR 0 4
45800: PUSH
45801: LD_INT 1
45803: ST_TO_ADDR
// end ;
45804: LD_VAR 0 4
45808: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
45809: LD_INT 0
45811: PPUSH
45812: PPUSH
45813: PPUSH
// if not unit in minersList then
45814: LD_VAR 0 1
45818: PUSH
45819: LD_EXP 37
45823: IN
45824: NOT
45825: IFFALSE 45829
// exit ;
45827: GO 46221
// index := GetElementIndex ( minersList , unit ) ;
45829: LD_ADDR_VAR 0 6
45833: PUSH
45834: LD_EXP 37
45838: PPUSH
45839: LD_VAR 0 1
45843: PPUSH
45844: CALL 7692 0 2
45848: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
45849: LD_ADDR_VAR 0 5
45853: PUSH
45854: DOUBLE
45855: LD_EXP 38
45859: PUSH
45860: LD_VAR 0 6
45864: ARRAY
45865: INC
45866: ST_TO_ADDR
45867: LD_INT 1
45869: PUSH
45870: FOR_DOWNTO
45871: IFFALSE 46032
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
45873: LD_EXP 38
45877: PUSH
45878: LD_VAR 0 6
45882: ARRAY
45883: PUSH
45884: LD_VAR 0 5
45888: ARRAY
45889: PUSH
45890: LD_INT 1
45892: ARRAY
45893: PUSH
45894: LD_VAR 0 2
45898: EQUAL
45899: PUSH
45900: LD_EXP 38
45904: PUSH
45905: LD_VAR 0 6
45909: ARRAY
45910: PUSH
45911: LD_VAR 0 5
45915: ARRAY
45916: PUSH
45917: LD_INT 2
45919: ARRAY
45920: PUSH
45921: LD_VAR 0 3
45925: EQUAL
45926: AND
45927: IFFALSE 46030
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
45929: LD_EXP 38
45933: PUSH
45934: LD_VAR 0 6
45938: ARRAY
45939: PUSH
45940: LD_VAR 0 5
45944: ARRAY
45945: PUSH
45946: LD_INT 1
45948: ARRAY
45949: PPUSH
45950: LD_EXP 38
45954: PUSH
45955: LD_VAR 0 6
45959: ARRAY
45960: PUSH
45961: LD_VAR 0 5
45965: ARRAY
45966: PUSH
45967: LD_INT 2
45969: ARRAY
45970: PPUSH
45971: LD_VAR 0 1
45975: PPUSH
45976: CALL_OW 255
45980: PPUSH
45981: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
45985: LD_ADDR_EXP 38
45989: PUSH
45990: LD_EXP 38
45994: PPUSH
45995: LD_VAR 0 6
45999: PPUSH
46000: LD_EXP 38
46004: PUSH
46005: LD_VAR 0 6
46009: ARRAY
46010: PPUSH
46011: LD_VAR 0 5
46015: PPUSH
46016: CALL_OW 3
46020: PPUSH
46021: CALL_OW 1
46025: ST_TO_ADDR
// exit ;
46026: POP
46027: POP
46028: GO 46221
// end ; end ;
46030: GO 45870
46032: POP
46033: POP
// for i := minerMinesList [ index ] downto 1 do
46034: LD_ADDR_VAR 0 5
46038: PUSH
46039: DOUBLE
46040: LD_EXP 38
46044: PUSH
46045: LD_VAR 0 6
46049: ARRAY
46050: INC
46051: ST_TO_ADDR
46052: LD_INT 1
46054: PUSH
46055: FOR_DOWNTO
46056: IFFALSE 46219
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
46058: LD_EXP 38
46062: PUSH
46063: LD_VAR 0 6
46067: ARRAY
46068: PUSH
46069: LD_VAR 0 5
46073: ARRAY
46074: PUSH
46075: LD_INT 1
46077: ARRAY
46078: PPUSH
46079: LD_EXP 38
46083: PUSH
46084: LD_VAR 0 6
46088: ARRAY
46089: PUSH
46090: LD_VAR 0 5
46094: ARRAY
46095: PUSH
46096: LD_INT 2
46098: ARRAY
46099: PPUSH
46100: LD_VAR 0 2
46104: PPUSH
46105: LD_VAR 0 3
46109: PPUSH
46110: CALL_OW 298
46114: PUSH
46115: LD_INT 6
46117: LESS
46118: IFFALSE 46217
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
46120: LD_EXP 38
46124: PUSH
46125: LD_VAR 0 6
46129: ARRAY
46130: PUSH
46131: LD_VAR 0 5
46135: ARRAY
46136: PUSH
46137: LD_INT 1
46139: ARRAY
46140: PPUSH
46141: LD_EXP 38
46145: PUSH
46146: LD_VAR 0 6
46150: ARRAY
46151: PUSH
46152: LD_VAR 0 5
46156: ARRAY
46157: PUSH
46158: LD_INT 2
46160: ARRAY
46161: PPUSH
46162: LD_VAR 0 1
46166: PPUSH
46167: CALL_OW 255
46171: PPUSH
46172: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
46176: LD_ADDR_EXP 38
46180: PUSH
46181: LD_EXP 38
46185: PPUSH
46186: LD_VAR 0 6
46190: PPUSH
46191: LD_EXP 38
46195: PUSH
46196: LD_VAR 0 6
46200: ARRAY
46201: PPUSH
46202: LD_VAR 0 5
46206: PPUSH
46207: CALL_OW 3
46211: PPUSH
46212: CALL_OW 1
46216: ST_TO_ADDR
// end ; end ;
46217: GO 46055
46219: POP
46220: POP
// end ;
46221: LD_VAR 0 4
46225: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
46226: LD_INT 0
46228: PPUSH
46229: PPUSH
46230: PPUSH
46231: PPUSH
46232: PPUSH
46233: PPUSH
46234: PPUSH
46235: PPUSH
46236: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
46237: LD_VAR 0 1
46241: PPUSH
46242: CALL_OW 264
46246: PUSH
46247: LD_EXP 16
46251: EQUAL
46252: NOT
46253: PUSH
46254: LD_VAR 0 1
46258: PUSH
46259: LD_EXP 37
46263: IN
46264: NOT
46265: OR
46266: IFFALSE 46270
// exit ;
46268: GO 46592
// index := GetElementIndex ( minersList , unit ) ;
46270: LD_ADDR_VAR 0 6
46274: PUSH
46275: LD_EXP 37
46279: PPUSH
46280: LD_VAR 0 1
46284: PPUSH
46285: CALL 7692 0 2
46289: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
46290: LD_ADDR_VAR 0 8
46294: PUSH
46295: LD_EXP 39
46299: PUSH
46300: LD_EXP 38
46304: PUSH
46305: LD_VAR 0 6
46309: ARRAY
46310: MINUS
46311: ST_TO_ADDR
// if not minesFreeAmount then
46312: LD_VAR 0 8
46316: NOT
46317: IFFALSE 46321
// exit ;
46319: GO 46592
// tmp := [ ] ;
46321: LD_ADDR_VAR 0 7
46325: PUSH
46326: EMPTY
46327: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
46328: LD_ADDR_VAR 0 5
46332: PUSH
46333: DOUBLE
46334: LD_INT 1
46336: DEC
46337: ST_TO_ADDR
46338: LD_VAR 0 8
46342: PUSH
46343: FOR_TO
46344: IFFALSE 46539
// begin _d := rand ( 0 , 5 ) ;
46346: LD_ADDR_VAR 0 11
46350: PUSH
46351: LD_INT 0
46353: PPUSH
46354: LD_INT 5
46356: PPUSH
46357: CALL_OW 12
46361: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
46362: LD_ADDR_VAR 0 12
46366: PUSH
46367: LD_INT 2
46369: PPUSH
46370: LD_INT 6
46372: PPUSH
46373: CALL_OW 12
46377: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
46378: LD_ADDR_VAR 0 9
46382: PUSH
46383: LD_VAR 0 2
46387: PPUSH
46388: LD_VAR 0 11
46392: PPUSH
46393: LD_VAR 0 12
46397: PPUSH
46398: CALL_OW 272
46402: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
46403: LD_ADDR_VAR 0 10
46407: PUSH
46408: LD_VAR 0 3
46412: PPUSH
46413: LD_VAR 0 11
46417: PPUSH
46418: LD_VAR 0 12
46422: PPUSH
46423: CALL_OW 273
46427: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
46428: LD_VAR 0 9
46432: PPUSH
46433: LD_VAR 0 10
46437: PPUSH
46438: CALL_OW 488
46442: PUSH
46443: LD_VAR 0 9
46447: PUSH
46448: LD_VAR 0 10
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_VAR 0 7
46461: IN
46462: NOT
46463: AND
46464: PUSH
46465: LD_VAR 0 9
46469: PPUSH
46470: LD_VAR 0 10
46474: PPUSH
46475: CALL_OW 458
46479: NOT
46480: AND
46481: IFFALSE 46523
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
46483: LD_ADDR_VAR 0 7
46487: PUSH
46488: LD_VAR 0 7
46492: PPUSH
46493: LD_VAR 0 7
46497: PUSH
46498: LD_INT 1
46500: PLUS
46501: PPUSH
46502: LD_VAR 0 9
46506: PUSH
46507: LD_VAR 0 10
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PPUSH
46516: CALL_OW 1
46520: ST_TO_ADDR
46521: GO 46537
// i := i - 1 ;
46523: LD_ADDR_VAR 0 5
46527: PUSH
46528: LD_VAR 0 5
46532: PUSH
46533: LD_INT 1
46535: MINUS
46536: ST_TO_ADDR
// end ;
46537: GO 46343
46539: POP
46540: POP
// for i in tmp do
46541: LD_ADDR_VAR 0 5
46545: PUSH
46546: LD_VAR 0 7
46550: PUSH
46551: FOR_IN
46552: IFFALSE 46590
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
46554: LD_VAR 0 1
46558: PPUSH
46559: LD_VAR 0 5
46563: PUSH
46564: LD_INT 1
46566: ARRAY
46567: PPUSH
46568: LD_VAR 0 5
46572: PUSH
46573: LD_INT 2
46575: ARRAY
46576: PPUSH
46577: CALL 45532 0 3
46581: NOT
46582: IFFALSE 46588
// exit ;
46584: POP
46585: POP
46586: GO 46592
46588: GO 46551
46590: POP
46591: POP
// end ;
46592: LD_VAR 0 4
46596: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
46597: LD_INT 0
46599: PPUSH
46600: PPUSH
46601: PPUSH
46602: PPUSH
46603: PPUSH
46604: PPUSH
46605: PPUSH
// if not GetClass ( unit ) = class_sniper then
46606: LD_VAR 0 1
46610: PPUSH
46611: CALL_OW 257
46615: PUSH
46616: LD_INT 5
46618: EQUAL
46619: NOT
46620: IFFALSE 46624
// exit ;
46622: GO 47012
// dist := 8 ;
46624: LD_ADDR_VAR 0 5
46628: PUSH
46629: LD_INT 8
46631: ST_TO_ADDR
// viewRange := 12 ;
46632: LD_ADDR_VAR 0 7
46636: PUSH
46637: LD_INT 12
46639: ST_TO_ADDR
// side := GetSide ( unit ) ;
46640: LD_ADDR_VAR 0 6
46644: PUSH
46645: LD_VAR 0 1
46649: PPUSH
46650: CALL_OW 255
46654: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
46655: LD_INT 61
46657: PPUSH
46658: LD_VAR 0 6
46662: PPUSH
46663: CALL_OW 321
46667: PUSH
46668: LD_INT 2
46670: EQUAL
46671: IFFALSE 46681
// viewRange := 16 ;
46673: LD_ADDR_VAR 0 7
46677: PUSH
46678: LD_INT 16
46680: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
46681: LD_VAR 0 1
46685: PPUSH
46686: LD_VAR 0 2
46690: PPUSH
46691: LD_VAR 0 3
46695: PPUSH
46696: CALL_OW 297
46700: PUSH
46701: LD_VAR 0 5
46705: GREATER
46706: IFFALSE 46785
// begin ComMoveXY ( unit , x , y ) ;
46708: LD_VAR 0 1
46712: PPUSH
46713: LD_VAR 0 2
46717: PPUSH
46718: LD_VAR 0 3
46722: PPUSH
46723: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
46727: LD_INT 35
46729: PPUSH
46730: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
46734: LD_VAR 0 1
46738: PPUSH
46739: LD_VAR 0 2
46743: PPUSH
46744: LD_VAR 0 3
46748: PPUSH
46749: CALL 38464 0 3
46753: NOT
46754: IFFALSE 46758
// exit ;
46756: GO 47012
// until GetDistUnitXY ( unit , x , y ) < dist ;
46758: LD_VAR 0 1
46762: PPUSH
46763: LD_VAR 0 2
46767: PPUSH
46768: LD_VAR 0 3
46772: PPUSH
46773: CALL_OW 297
46777: PUSH
46778: LD_VAR 0 5
46782: LESS
46783: IFFALSE 46727
// end ; ComTurnXY ( unit , x , y ) ;
46785: LD_VAR 0 1
46789: PPUSH
46790: LD_VAR 0 2
46794: PPUSH
46795: LD_VAR 0 3
46799: PPUSH
46800: CALL_OW 118
// wait ( 5 ) ;
46804: LD_INT 5
46806: PPUSH
46807: CALL_OW 67
// _d := GetDir ( unit ) ;
46811: LD_ADDR_VAR 0 10
46815: PUSH
46816: LD_VAR 0 1
46820: PPUSH
46821: CALL_OW 254
46825: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
46826: LD_ADDR_VAR 0 8
46830: PUSH
46831: LD_VAR 0 1
46835: PPUSH
46836: CALL_OW 250
46840: PPUSH
46841: LD_VAR 0 10
46845: PPUSH
46846: LD_VAR 0 5
46850: PPUSH
46851: CALL_OW 272
46855: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
46856: LD_ADDR_VAR 0 9
46860: PUSH
46861: LD_VAR 0 1
46865: PPUSH
46866: CALL_OW 251
46870: PPUSH
46871: LD_VAR 0 10
46875: PPUSH
46876: LD_VAR 0 5
46880: PPUSH
46881: CALL_OW 273
46885: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46886: LD_VAR 0 8
46890: PPUSH
46891: LD_VAR 0 9
46895: PPUSH
46896: CALL_OW 488
46900: NOT
46901: IFFALSE 46905
// exit ;
46903: GO 47012
// ComAnimCustom ( unit , 1 ) ;
46905: LD_VAR 0 1
46909: PPUSH
46910: LD_INT 1
46912: PPUSH
46913: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
46917: LD_VAR 0 8
46921: PPUSH
46922: LD_VAR 0 9
46926: PPUSH
46927: LD_VAR 0 6
46931: PPUSH
46932: LD_VAR 0 7
46936: PPUSH
46937: CALL_OW 330
// repeat wait ( 1 ) ;
46941: LD_INT 1
46943: PPUSH
46944: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
46948: LD_VAR 0 1
46952: PPUSH
46953: CALL_OW 316
46957: PUSH
46958: LD_VAR 0 1
46962: PPUSH
46963: CALL_OW 314
46967: OR
46968: PUSH
46969: LD_VAR 0 1
46973: PPUSH
46974: CALL_OW 302
46978: NOT
46979: OR
46980: PUSH
46981: LD_VAR 0 1
46985: PPUSH
46986: CALL_OW 301
46990: OR
46991: IFFALSE 46941
// RemoveSeeing ( _x , _y , side ) ;
46993: LD_VAR 0 8
46997: PPUSH
46998: LD_VAR 0 9
47002: PPUSH
47003: LD_VAR 0 6
47007: PPUSH
47008: CALL_OW 331
// end ; end_of_file
47012: LD_VAR 0 4
47016: RET
// every 0 0$1 do
47017: GO 47019
47019: DISABLE
// begin enable ;
47020: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
47021: LD_STRING updateTimer(
47023: PUSH
47024: LD_OWVAR 1
47028: STR
47029: PUSH
47030: LD_STRING );
47032: STR
47033: PPUSH
47034: CALL_OW 559
// end ;
47038: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
47039: LD_INT 0
47041: PPUSH
// if p2 = 100 then
47042: LD_VAR 0 2
47046: PUSH
47047: LD_INT 100
47049: EQUAL
47050: IFFALSE 48053
// begin if not StreamModeActive then
47052: LD_EXP 40
47056: NOT
47057: IFFALSE 47067
// StreamModeActive := true ;
47059: LD_ADDR_EXP 40
47063: PUSH
47064: LD_INT 1
47066: ST_TO_ADDR
// if p3 = 0 then
47067: LD_VAR 0 3
47071: PUSH
47072: LD_INT 0
47074: EQUAL
47075: IFFALSE 47081
// InitStreamMode ;
47077: CALL 48213 0 0
// if p3 = 1 then
47081: LD_VAR 0 3
47085: PUSH
47086: LD_INT 1
47088: EQUAL
47089: IFFALSE 47099
// sRocket := true ;
47091: LD_ADDR_EXP 45
47095: PUSH
47096: LD_INT 1
47098: ST_TO_ADDR
// if p3 = 2 then
47099: LD_VAR 0 3
47103: PUSH
47104: LD_INT 2
47106: EQUAL
47107: IFFALSE 47117
// sSpeed := true ;
47109: LD_ADDR_EXP 44
47113: PUSH
47114: LD_INT 1
47116: ST_TO_ADDR
// if p3 = 3 then
47117: LD_VAR 0 3
47121: PUSH
47122: LD_INT 3
47124: EQUAL
47125: IFFALSE 47135
// sEngine := true ;
47127: LD_ADDR_EXP 46
47131: PUSH
47132: LD_INT 1
47134: ST_TO_ADDR
// if p3 = 4 then
47135: LD_VAR 0 3
47139: PUSH
47140: LD_INT 4
47142: EQUAL
47143: IFFALSE 47153
// sSpec := true ;
47145: LD_ADDR_EXP 43
47149: PUSH
47150: LD_INT 1
47152: ST_TO_ADDR
// if p3 = 5 then
47153: LD_VAR 0 3
47157: PUSH
47158: LD_INT 5
47160: EQUAL
47161: IFFALSE 47171
// sLevel := true ;
47163: LD_ADDR_EXP 47
47167: PUSH
47168: LD_INT 1
47170: ST_TO_ADDR
// if p3 = 6 then
47171: LD_VAR 0 3
47175: PUSH
47176: LD_INT 6
47178: EQUAL
47179: IFFALSE 47189
// sArmoury := true ;
47181: LD_ADDR_EXP 48
47185: PUSH
47186: LD_INT 1
47188: ST_TO_ADDR
// if p3 = 7 then
47189: LD_VAR 0 3
47193: PUSH
47194: LD_INT 7
47196: EQUAL
47197: IFFALSE 47207
// sRadar := true ;
47199: LD_ADDR_EXP 49
47203: PUSH
47204: LD_INT 1
47206: ST_TO_ADDR
// if p3 = 8 then
47207: LD_VAR 0 3
47211: PUSH
47212: LD_INT 8
47214: EQUAL
47215: IFFALSE 47225
// sBunker := true ;
47217: LD_ADDR_EXP 50
47221: PUSH
47222: LD_INT 1
47224: ST_TO_ADDR
// if p3 = 9 then
47225: LD_VAR 0 3
47229: PUSH
47230: LD_INT 9
47232: EQUAL
47233: IFFALSE 47243
// sHack := true ;
47235: LD_ADDR_EXP 51
47239: PUSH
47240: LD_INT 1
47242: ST_TO_ADDR
// if p3 = 10 then
47243: LD_VAR 0 3
47247: PUSH
47248: LD_INT 10
47250: EQUAL
47251: IFFALSE 47261
// sFire := true ;
47253: LD_ADDR_EXP 52
47257: PUSH
47258: LD_INT 1
47260: ST_TO_ADDR
// if p3 = 11 then
47261: LD_VAR 0 3
47265: PUSH
47266: LD_INT 11
47268: EQUAL
47269: IFFALSE 47279
// sRefresh := true ;
47271: LD_ADDR_EXP 53
47275: PUSH
47276: LD_INT 1
47278: ST_TO_ADDR
// if p3 = 12 then
47279: LD_VAR 0 3
47283: PUSH
47284: LD_INT 12
47286: EQUAL
47287: IFFALSE 47297
// sExp := true ;
47289: LD_ADDR_EXP 54
47293: PUSH
47294: LD_INT 1
47296: ST_TO_ADDR
// if p3 = 13 then
47297: LD_VAR 0 3
47301: PUSH
47302: LD_INT 13
47304: EQUAL
47305: IFFALSE 47315
// sDepot := true ;
47307: LD_ADDR_EXP 55
47311: PUSH
47312: LD_INT 1
47314: ST_TO_ADDR
// if p3 = 14 then
47315: LD_VAR 0 3
47319: PUSH
47320: LD_INT 14
47322: EQUAL
47323: IFFALSE 47333
// sFlag := true ;
47325: LD_ADDR_EXP 56
47329: PUSH
47330: LD_INT 1
47332: ST_TO_ADDR
// if p3 = 15 then
47333: LD_VAR 0 3
47337: PUSH
47338: LD_INT 15
47340: EQUAL
47341: IFFALSE 47351
// sKamikadze := true ;
47343: LD_ADDR_EXP 64
47347: PUSH
47348: LD_INT 1
47350: ST_TO_ADDR
// if p3 = 16 then
47351: LD_VAR 0 3
47355: PUSH
47356: LD_INT 16
47358: EQUAL
47359: IFFALSE 47369
// sTroll := true ;
47361: LD_ADDR_EXP 65
47365: PUSH
47366: LD_INT 1
47368: ST_TO_ADDR
// if p3 = 17 then
47369: LD_VAR 0 3
47373: PUSH
47374: LD_INT 17
47376: EQUAL
47377: IFFALSE 47387
// sSlow := true ;
47379: LD_ADDR_EXP 66
47383: PUSH
47384: LD_INT 1
47386: ST_TO_ADDR
// if p3 = 18 then
47387: LD_VAR 0 3
47391: PUSH
47392: LD_INT 18
47394: EQUAL
47395: IFFALSE 47405
// sLack := true ;
47397: LD_ADDR_EXP 67
47401: PUSH
47402: LD_INT 1
47404: ST_TO_ADDR
// if p3 = 19 then
47405: LD_VAR 0 3
47409: PUSH
47410: LD_INT 19
47412: EQUAL
47413: IFFALSE 47423
// sTank := true ;
47415: LD_ADDR_EXP 69
47419: PUSH
47420: LD_INT 1
47422: ST_TO_ADDR
// if p3 = 20 then
47423: LD_VAR 0 3
47427: PUSH
47428: LD_INT 20
47430: EQUAL
47431: IFFALSE 47441
// sRemote := true ;
47433: LD_ADDR_EXP 70
47437: PUSH
47438: LD_INT 1
47440: ST_TO_ADDR
// if p3 = 21 then
47441: LD_VAR 0 3
47445: PUSH
47446: LD_INT 21
47448: EQUAL
47449: IFFALSE 47459
// sPowell := true ;
47451: LD_ADDR_EXP 71
47455: PUSH
47456: LD_INT 1
47458: ST_TO_ADDR
// if p3 = 22 then
47459: LD_VAR 0 3
47463: PUSH
47464: LD_INT 22
47466: EQUAL
47467: IFFALSE 47477
// sTeleport := true ;
47469: LD_ADDR_EXP 74
47473: PUSH
47474: LD_INT 1
47476: ST_TO_ADDR
// if p3 = 23 then
47477: LD_VAR 0 3
47481: PUSH
47482: LD_INT 23
47484: EQUAL
47485: IFFALSE 47495
// sOilTower := true ;
47487: LD_ADDR_EXP 76
47491: PUSH
47492: LD_INT 1
47494: ST_TO_ADDR
// if p3 = 24 then
47495: LD_VAR 0 3
47499: PUSH
47500: LD_INT 24
47502: EQUAL
47503: IFFALSE 47513
// sShovel := true ;
47505: LD_ADDR_EXP 77
47509: PUSH
47510: LD_INT 1
47512: ST_TO_ADDR
// if p3 = 25 then
47513: LD_VAR 0 3
47517: PUSH
47518: LD_INT 25
47520: EQUAL
47521: IFFALSE 47531
// sSheik := true ;
47523: LD_ADDR_EXP 78
47527: PUSH
47528: LD_INT 1
47530: ST_TO_ADDR
// if p3 = 26 then
47531: LD_VAR 0 3
47535: PUSH
47536: LD_INT 26
47538: EQUAL
47539: IFFALSE 47549
// sEarthquake := true ;
47541: LD_ADDR_EXP 80
47545: PUSH
47546: LD_INT 1
47548: ST_TO_ADDR
// if p3 = 27 then
47549: LD_VAR 0 3
47553: PUSH
47554: LD_INT 27
47556: EQUAL
47557: IFFALSE 47567
// sAI := true ;
47559: LD_ADDR_EXP 81
47563: PUSH
47564: LD_INT 1
47566: ST_TO_ADDR
// if p3 = 28 then
47567: LD_VAR 0 3
47571: PUSH
47572: LD_INT 28
47574: EQUAL
47575: IFFALSE 47585
// sCargo := true ;
47577: LD_ADDR_EXP 84
47581: PUSH
47582: LD_INT 1
47584: ST_TO_ADDR
// if p3 = 29 then
47585: LD_VAR 0 3
47589: PUSH
47590: LD_INT 29
47592: EQUAL
47593: IFFALSE 47603
// sDLaser := true ;
47595: LD_ADDR_EXP 85
47599: PUSH
47600: LD_INT 1
47602: ST_TO_ADDR
// if p3 = 30 then
47603: LD_VAR 0 3
47607: PUSH
47608: LD_INT 30
47610: EQUAL
47611: IFFALSE 47621
// sExchange := true ;
47613: LD_ADDR_EXP 86
47617: PUSH
47618: LD_INT 1
47620: ST_TO_ADDR
// if p3 = 31 then
47621: LD_VAR 0 3
47625: PUSH
47626: LD_INT 31
47628: EQUAL
47629: IFFALSE 47639
// sFac := true ;
47631: LD_ADDR_EXP 87
47635: PUSH
47636: LD_INT 1
47638: ST_TO_ADDR
// if p3 = 32 then
47639: LD_VAR 0 3
47643: PUSH
47644: LD_INT 32
47646: EQUAL
47647: IFFALSE 47657
// sPower := true ;
47649: LD_ADDR_EXP 88
47653: PUSH
47654: LD_INT 1
47656: ST_TO_ADDR
// if p3 = 33 then
47657: LD_VAR 0 3
47661: PUSH
47662: LD_INT 33
47664: EQUAL
47665: IFFALSE 47675
// sRandom := true ;
47667: LD_ADDR_EXP 89
47671: PUSH
47672: LD_INT 1
47674: ST_TO_ADDR
// if p3 = 34 then
47675: LD_VAR 0 3
47679: PUSH
47680: LD_INT 34
47682: EQUAL
47683: IFFALSE 47693
// sShield := true ;
47685: LD_ADDR_EXP 90
47689: PUSH
47690: LD_INT 1
47692: ST_TO_ADDR
// if p3 = 35 then
47693: LD_VAR 0 3
47697: PUSH
47698: LD_INT 35
47700: EQUAL
47701: IFFALSE 47711
// sTime := true ;
47703: LD_ADDR_EXP 91
47707: PUSH
47708: LD_INT 1
47710: ST_TO_ADDR
// if p3 = 36 then
47711: LD_VAR 0 3
47715: PUSH
47716: LD_INT 36
47718: EQUAL
47719: IFFALSE 47729
// sTools := true ;
47721: LD_ADDR_EXP 92
47725: PUSH
47726: LD_INT 1
47728: ST_TO_ADDR
// if p3 = 101 then
47729: LD_VAR 0 3
47733: PUSH
47734: LD_INT 101
47736: EQUAL
47737: IFFALSE 47747
// sSold := true ;
47739: LD_ADDR_EXP 57
47743: PUSH
47744: LD_INT 1
47746: ST_TO_ADDR
// if p3 = 102 then
47747: LD_VAR 0 3
47751: PUSH
47752: LD_INT 102
47754: EQUAL
47755: IFFALSE 47765
// sDiff := true ;
47757: LD_ADDR_EXP 58
47761: PUSH
47762: LD_INT 1
47764: ST_TO_ADDR
// if p3 = 103 then
47765: LD_VAR 0 3
47769: PUSH
47770: LD_INT 103
47772: EQUAL
47773: IFFALSE 47783
// sFog := true ;
47775: LD_ADDR_EXP 61
47779: PUSH
47780: LD_INT 1
47782: ST_TO_ADDR
// if p3 = 104 then
47783: LD_VAR 0 3
47787: PUSH
47788: LD_INT 104
47790: EQUAL
47791: IFFALSE 47801
// sReset := true ;
47793: LD_ADDR_EXP 62
47797: PUSH
47798: LD_INT 1
47800: ST_TO_ADDR
// if p3 = 105 then
47801: LD_VAR 0 3
47805: PUSH
47806: LD_INT 105
47808: EQUAL
47809: IFFALSE 47819
// sSun := true ;
47811: LD_ADDR_EXP 63
47815: PUSH
47816: LD_INT 1
47818: ST_TO_ADDR
// if p3 = 106 then
47819: LD_VAR 0 3
47823: PUSH
47824: LD_INT 106
47826: EQUAL
47827: IFFALSE 47837
// sTiger := true ;
47829: LD_ADDR_EXP 59
47833: PUSH
47834: LD_INT 1
47836: ST_TO_ADDR
// if p3 = 107 then
47837: LD_VAR 0 3
47841: PUSH
47842: LD_INT 107
47844: EQUAL
47845: IFFALSE 47855
// sBomb := true ;
47847: LD_ADDR_EXP 60
47851: PUSH
47852: LD_INT 1
47854: ST_TO_ADDR
// if p3 = 108 then
47855: LD_VAR 0 3
47859: PUSH
47860: LD_INT 108
47862: EQUAL
47863: IFFALSE 47873
// sWound := true ;
47865: LD_ADDR_EXP 68
47869: PUSH
47870: LD_INT 1
47872: ST_TO_ADDR
// if p3 = 109 then
47873: LD_VAR 0 3
47877: PUSH
47878: LD_INT 109
47880: EQUAL
47881: IFFALSE 47891
// sBetray := true ;
47883: LD_ADDR_EXP 72
47887: PUSH
47888: LD_INT 1
47890: ST_TO_ADDR
// if p3 = 110 then
47891: LD_VAR 0 3
47895: PUSH
47896: LD_INT 110
47898: EQUAL
47899: IFFALSE 47909
// sContamin := true ;
47901: LD_ADDR_EXP 73
47905: PUSH
47906: LD_INT 1
47908: ST_TO_ADDR
// if p3 = 111 then
47909: LD_VAR 0 3
47913: PUSH
47914: LD_INT 111
47916: EQUAL
47917: IFFALSE 47927
// sOil := true ;
47919: LD_ADDR_EXP 75
47923: PUSH
47924: LD_INT 1
47926: ST_TO_ADDR
// if p3 = 112 then
47927: LD_VAR 0 3
47931: PUSH
47932: LD_INT 112
47934: EQUAL
47935: IFFALSE 47945
// sStu := true ;
47937: LD_ADDR_EXP 79
47941: PUSH
47942: LD_INT 1
47944: ST_TO_ADDR
// if p3 = 113 then
47945: LD_VAR 0 3
47949: PUSH
47950: LD_INT 113
47952: EQUAL
47953: IFFALSE 47963
// sBazooka := true ;
47955: LD_ADDR_EXP 82
47959: PUSH
47960: LD_INT 1
47962: ST_TO_ADDR
// if p3 = 114 then
47963: LD_VAR 0 3
47967: PUSH
47968: LD_INT 114
47970: EQUAL
47971: IFFALSE 47981
// sMortar := true ;
47973: LD_ADDR_EXP 83
47977: PUSH
47978: LD_INT 1
47980: ST_TO_ADDR
// if p3 = 115 then
47981: LD_VAR 0 3
47985: PUSH
47986: LD_INT 115
47988: EQUAL
47989: IFFALSE 47999
// sRanger := true ;
47991: LD_ADDR_EXP 93
47995: PUSH
47996: LD_INT 1
47998: ST_TO_ADDR
// if p3 = 116 then
47999: LD_VAR 0 3
48003: PUSH
48004: LD_INT 116
48006: EQUAL
48007: IFFALSE 48017
// sComputer := true ;
48009: LD_ADDR_EXP 94
48013: PUSH
48014: LD_INT 1
48016: ST_TO_ADDR
// if p3 = 117 then
48017: LD_VAR 0 3
48021: PUSH
48022: LD_INT 117
48024: EQUAL
48025: IFFALSE 48035
// s30 := true ;
48027: LD_ADDR_EXP 95
48031: PUSH
48032: LD_INT 1
48034: ST_TO_ADDR
// if p3 = 118 then
48035: LD_VAR 0 3
48039: PUSH
48040: LD_INT 118
48042: EQUAL
48043: IFFALSE 48053
// s60 := true ;
48045: LD_ADDR_EXP 96
48049: PUSH
48050: LD_INT 1
48052: ST_TO_ADDR
// end ; if p2 = 101 then
48053: LD_VAR 0 2
48057: PUSH
48058: LD_INT 101
48060: EQUAL
48061: IFFALSE 48189
// begin case p3 of 1 :
48063: LD_VAR 0 3
48067: PUSH
48068: LD_INT 1
48070: DOUBLE
48071: EQUAL
48072: IFTRUE 48076
48074: GO 48083
48076: POP
// hHackUnlimitedResources ; 2 :
48077: CALL 59785 0 0
48081: GO 48189
48083: LD_INT 2
48085: DOUBLE
48086: EQUAL
48087: IFTRUE 48091
48089: GO 48098
48091: POP
// hHackSetLevel10 ; 3 :
48092: CALL 59918 0 0
48096: GO 48189
48098: LD_INT 3
48100: DOUBLE
48101: EQUAL
48102: IFTRUE 48106
48104: GO 48113
48106: POP
// hHackSetLevel10YourUnits ; 4 :
48107: CALL 60003 0 0
48111: GO 48189
48113: LD_INT 4
48115: DOUBLE
48116: EQUAL
48117: IFTRUE 48121
48119: GO 48128
48121: POP
// hHackInvincible ; 5 :
48122: CALL 60451 0 0
48126: GO 48189
48128: LD_INT 5
48130: DOUBLE
48131: EQUAL
48132: IFTRUE 48136
48134: GO 48143
48136: POP
// hHackInvisible ; 6 :
48137: CALL 60562 0 0
48141: GO 48189
48143: LD_INT 6
48145: DOUBLE
48146: EQUAL
48147: IFTRUE 48151
48149: GO 48158
48151: POP
// hHackChangeYourSide ; 7 :
48152: CALL 60619 0 0
48156: GO 48189
48158: LD_INT 7
48160: DOUBLE
48161: EQUAL
48162: IFTRUE 48166
48164: GO 48173
48166: POP
// hHackChangeUnitSide ; 8 :
48167: CALL 60661 0 0
48171: GO 48189
48173: LD_INT 8
48175: DOUBLE
48176: EQUAL
48177: IFTRUE 48181
48179: GO 48188
48181: POP
// hHackFog ; end ;
48182: CALL 60762 0 0
48186: GO 48189
48188: POP
// end ; end ;
48189: LD_VAR 0 7
48193: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
48194: GO 48196
48196: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
48197: LD_STRING initStreamRollete();
48199: PPUSH
48200: CALL_OW 559
// InitStreamMode ;
48204: CALL 48213 0 0
// DefineStreamItems ( ) ;
48208: CALL 48677 0 0
// end ;
48212: END
// function InitStreamMode ; begin
48213: LD_INT 0
48215: PPUSH
// streamModeActive := false ;
48216: LD_ADDR_EXP 40
48220: PUSH
48221: LD_INT 0
48223: ST_TO_ADDR
// normalCounter := 36 ;
48224: LD_ADDR_EXP 41
48228: PUSH
48229: LD_INT 36
48231: ST_TO_ADDR
// hardcoreCounter := 16 ;
48232: LD_ADDR_EXP 42
48236: PUSH
48237: LD_INT 16
48239: ST_TO_ADDR
// sRocket := false ;
48240: LD_ADDR_EXP 45
48244: PUSH
48245: LD_INT 0
48247: ST_TO_ADDR
// sSpeed := false ;
48248: LD_ADDR_EXP 44
48252: PUSH
48253: LD_INT 0
48255: ST_TO_ADDR
// sEngine := false ;
48256: LD_ADDR_EXP 46
48260: PUSH
48261: LD_INT 0
48263: ST_TO_ADDR
// sSpec := false ;
48264: LD_ADDR_EXP 43
48268: PUSH
48269: LD_INT 0
48271: ST_TO_ADDR
// sLevel := false ;
48272: LD_ADDR_EXP 47
48276: PUSH
48277: LD_INT 0
48279: ST_TO_ADDR
// sArmoury := false ;
48280: LD_ADDR_EXP 48
48284: PUSH
48285: LD_INT 0
48287: ST_TO_ADDR
// sRadar := false ;
48288: LD_ADDR_EXP 49
48292: PUSH
48293: LD_INT 0
48295: ST_TO_ADDR
// sBunker := false ;
48296: LD_ADDR_EXP 50
48300: PUSH
48301: LD_INT 0
48303: ST_TO_ADDR
// sHack := false ;
48304: LD_ADDR_EXP 51
48308: PUSH
48309: LD_INT 0
48311: ST_TO_ADDR
// sFire := false ;
48312: LD_ADDR_EXP 52
48316: PUSH
48317: LD_INT 0
48319: ST_TO_ADDR
// sRefresh := false ;
48320: LD_ADDR_EXP 53
48324: PUSH
48325: LD_INT 0
48327: ST_TO_ADDR
// sExp := false ;
48328: LD_ADDR_EXP 54
48332: PUSH
48333: LD_INT 0
48335: ST_TO_ADDR
// sDepot := false ;
48336: LD_ADDR_EXP 55
48340: PUSH
48341: LD_INT 0
48343: ST_TO_ADDR
// sFlag := false ;
48344: LD_ADDR_EXP 56
48348: PUSH
48349: LD_INT 0
48351: ST_TO_ADDR
// sKamikadze := false ;
48352: LD_ADDR_EXP 64
48356: PUSH
48357: LD_INT 0
48359: ST_TO_ADDR
// sTroll := false ;
48360: LD_ADDR_EXP 65
48364: PUSH
48365: LD_INT 0
48367: ST_TO_ADDR
// sSlow := false ;
48368: LD_ADDR_EXP 66
48372: PUSH
48373: LD_INT 0
48375: ST_TO_ADDR
// sLack := false ;
48376: LD_ADDR_EXP 67
48380: PUSH
48381: LD_INT 0
48383: ST_TO_ADDR
// sTank := false ;
48384: LD_ADDR_EXP 69
48388: PUSH
48389: LD_INT 0
48391: ST_TO_ADDR
// sRemote := false ;
48392: LD_ADDR_EXP 70
48396: PUSH
48397: LD_INT 0
48399: ST_TO_ADDR
// sPowell := false ;
48400: LD_ADDR_EXP 71
48404: PUSH
48405: LD_INT 0
48407: ST_TO_ADDR
// sTeleport := false ;
48408: LD_ADDR_EXP 74
48412: PUSH
48413: LD_INT 0
48415: ST_TO_ADDR
// sOilTower := false ;
48416: LD_ADDR_EXP 76
48420: PUSH
48421: LD_INT 0
48423: ST_TO_ADDR
// sShovel := false ;
48424: LD_ADDR_EXP 77
48428: PUSH
48429: LD_INT 0
48431: ST_TO_ADDR
// sSheik := false ;
48432: LD_ADDR_EXP 78
48436: PUSH
48437: LD_INT 0
48439: ST_TO_ADDR
// sEarthquake := false ;
48440: LD_ADDR_EXP 80
48444: PUSH
48445: LD_INT 0
48447: ST_TO_ADDR
// sAI := false ;
48448: LD_ADDR_EXP 81
48452: PUSH
48453: LD_INT 0
48455: ST_TO_ADDR
// sCargo := false ;
48456: LD_ADDR_EXP 84
48460: PUSH
48461: LD_INT 0
48463: ST_TO_ADDR
// sDLaser := false ;
48464: LD_ADDR_EXP 85
48468: PUSH
48469: LD_INT 0
48471: ST_TO_ADDR
// sExchange := false ;
48472: LD_ADDR_EXP 86
48476: PUSH
48477: LD_INT 0
48479: ST_TO_ADDR
// sFac := false ;
48480: LD_ADDR_EXP 87
48484: PUSH
48485: LD_INT 0
48487: ST_TO_ADDR
// sPower := false ;
48488: LD_ADDR_EXP 88
48492: PUSH
48493: LD_INT 0
48495: ST_TO_ADDR
// sRandom := false ;
48496: LD_ADDR_EXP 89
48500: PUSH
48501: LD_INT 0
48503: ST_TO_ADDR
// sShield := false ;
48504: LD_ADDR_EXP 90
48508: PUSH
48509: LD_INT 0
48511: ST_TO_ADDR
// sTime := false ;
48512: LD_ADDR_EXP 91
48516: PUSH
48517: LD_INT 0
48519: ST_TO_ADDR
// sTools := false ;
48520: LD_ADDR_EXP 92
48524: PUSH
48525: LD_INT 0
48527: ST_TO_ADDR
// sSold := false ;
48528: LD_ADDR_EXP 57
48532: PUSH
48533: LD_INT 0
48535: ST_TO_ADDR
// sDiff := false ;
48536: LD_ADDR_EXP 58
48540: PUSH
48541: LD_INT 0
48543: ST_TO_ADDR
// sFog := false ;
48544: LD_ADDR_EXP 61
48548: PUSH
48549: LD_INT 0
48551: ST_TO_ADDR
// sReset := false ;
48552: LD_ADDR_EXP 62
48556: PUSH
48557: LD_INT 0
48559: ST_TO_ADDR
// sSun := false ;
48560: LD_ADDR_EXP 63
48564: PUSH
48565: LD_INT 0
48567: ST_TO_ADDR
// sTiger := false ;
48568: LD_ADDR_EXP 59
48572: PUSH
48573: LD_INT 0
48575: ST_TO_ADDR
// sBomb := false ;
48576: LD_ADDR_EXP 60
48580: PUSH
48581: LD_INT 0
48583: ST_TO_ADDR
// sWound := false ;
48584: LD_ADDR_EXP 68
48588: PUSH
48589: LD_INT 0
48591: ST_TO_ADDR
// sBetray := false ;
48592: LD_ADDR_EXP 72
48596: PUSH
48597: LD_INT 0
48599: ST_TO_ADDR
// sContamin := false ;
48600: LD_ADDR_EXP 73
48604: PUSH
48605: LD_INT 0
48607: ST_TO_ADDR
// sOil := false ;
48608: LD_ADDR_EXP 75
48612: PUSH
48613: LD_INT 0
48615: ST_TO_ADDR
// sStu := false ;
48616: LD_ADDR_EXP 79
48620: PUSH
48621: LD_INT 0
48623: ST_TO_ADDR
// sBazooka := false ;
48624: LD_ADDR_EXP 82
48628: PUSH
48629: LD_INT 0
48631: ST_TO_ADDR
// sMortar := false ;
48632: LD_ADDR_EXP 83
48636: PUSH
48637: LD_INT 0
48639: ST_TO_ADDR
// sRanger := false ;
48640: LD_ADDR_EXP 93
48644: PUSH
48645: LD_INT 0
48647: ST_TO_ADDR
// sComputer := false ;
48648: LD_ADDR_EXP 94
48652: PUSH
48653: LD_INT 0
48655: ST_TO_ADDR
// s30 := false ;
48656: LD_ADDR_EXP 95
48660: PUSH
48661: LD_INT 0
48663: ST_TO_ADDR
// s60 := false ;
48664: LD_ADDR_EXP 96
48668: PUSH
48669: LD_INT 0
48671: ST_TO_ADDR
// end ;
48672: LD_VAR 0 1
48676: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
48677: LD_INT 0
48679: PPUSH
48680: PPUSH
48681: PPUSH
48682: PPUSH
48683: PPUSH
// result := [ ] ;
48684: LD_ADDR_VAR 0 1
48688: PUSH
48689: EMPTY
48690: ST_TO_ADDR
// if campaign_id = 1 then
48691: LD_OWVAR 69
48695: PUSH
48696: LD_INT 1
48698: EQUAL
48699: IFFALSE 51865
// begin case mission_number of 1 :
48701: LD_OWVAR 70
48705: PUSH
48706: LD_INT 1
48708: DOUBLE
48709: EQUAL
48710: IFTRUE 48714
48712: GO 48790
48714: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
48715: LD_ADDR_VAR 0 1
48719: PUSH
48720: LD_INT 2
48722: PUSH
48723: LD_INT 4
48725: PUSH
48726: LD_INT 11
48728: PUSH
48729: LD_INT 12
48731: PUSH
48732: LD_INT 15
48734: PUSH
48735: LD_INT 16
48737: PUSH
48738: LD_INT 22
48740: PUSH
48741: LD_INT 23
48743: PUSH
48744: LD_INT 26
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 101
48760: PUSH
48761: LD_INT 102
48763: PUSH
48764: LD_INT 106
48766: PUSH
48767: LD_INT 116
48769: PUSH
48770: LD_INT 117
48772: PUSH
48773: LD_INT 118
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: ST_TO_ADDR
48788: GO 51863
48790: LD_INT 2
48792: DOUBLE
48793: EQUAL
48794: IFTRUE 48798
48796: GO 48882
48798: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
48799: LD_ADDR_VAR 0 1
48803: PUSH
48804: LD_INT 2
48806: PUSH
48807: LD_INT 4
48809: PUSH
48810: LD_INT 11
48812: PUSH
48813: LD_INT 12
48815: PUSH
48816: LD_INT 15
48818: PUSH
48819: LD_INT 16
48821: PUSH
48822: LD_INT 22
48824: PUSH
48825: LD_INT 23
48827: PUSH
48828: LD_INT 26
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 101
48844: PUSH
48845: LD_INT 102
48847: PUSH
48848: LD_INT 105
48850: PUSH
48851: LD_INT 106
48853: PUSH
48854: LD_INT 108
48856: PUSH
48857: LD_INT 116
48859: PUSH
48860: LD_INT 117
48862: PUSH
48863: LD_INT 118
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: ST_TO_ADDR
48880: GO 51863
48882: LD_INT 3
48884: DOUBLE
48885: EQUAL
48886: IFTRUE 48890
48888: GO 48978
48890: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
48891: LD_ADDR_VAR 0 1
48895: PUSH
48896: LD_INT 2
48898: PUSH
48899: LD_INT 4
48901: PUSH
48902: LD_INT 5
48904: PUSH
48905: LD_INT 11
48907: PUSH
48908: LD_INT 12
48910: PUSH
48911: LD_INT 15
48913: PUSH
48914: LD_INT 16
48916: PUSH
48917: LD_INT 22
48919: PUSH
48920: LD_INT 26
48922: PUSH
48923: LD_INT 36
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 101
48940: PUSH
48941: LD_INT 102
48943: PUSH
48944: LD_INT 105
48946: PUSH
48947: LD_INT 106
48949: PUSH
48950: LD_INT 108
48952: PUSH
48953: LD_INT 116
48955: PUSH
48956: LD_INT 117
48958: PUSH
48959: LD_INT 118
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: ST_TO_ADDR
48976: GO 51863
48978: LD_INT 4
48980: DOUBLE
48981: EQUAL
48982: IFTRUE 48986
48984: GO 49082
48986: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
48987: LD_ADDR_VAR 0 1
48991: PUSH
48992: LD_INT 2
48994: PUSH
48995: LD_INT 4
48997: PUSH
48998: LD_INT 5
49000: PUSH
49001: LD_INT 8
49003: PUSH
49004: LD_INT 11
49006: PUSH
49007: LD_INT 12
49009: PUSH
49010: LD_INT 15
49012: PUSH
49013: LD_INT 16
49015: PUSH
49016: LD_INT 22
49018: PUSH
49019: LD_INT 23
49021: PUSH
49022: LD_INT 26
49024: PUSH
49025: LD_INT 36
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 101
49044: PUSH
49045: LD_INT 102
49047: PUSH
49048: LD_INT 105
49050: PUSH
49051: LD_INT 106
49053: PUSH
49054: LD_INT 108
49056: PUSH
49057: LD_INT 116
49059: PUSH
49060: LD_INT 117
49062: PUSH
49063: LD_INT 118
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: ST_TO_ADDR
49080: GO 51863
49082: LD_INT 5
49084: DOUBLE
49085: EQUAL
49086: IFTRUE 49090
49088: GO 49202
49090: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
49091: LD_ADDR_VAR 0 1
49095: PUSH
49096: LD_INT 2
49098: PUSH
49099: LD_INT 4
49101: PUSH
49102: LD_INT 5
49104: PUSH
49105: LD_INT 6
49107: PUSH
49108: LD_INT 8
49110: PUSH
49111: LD_INT 11
49113: PUSH
49114: LD_INT 12
49116: PUSH
49117: LD_INT 15
49119: PUSH
49120: LD_INT 16
49122: PUSH
49123: LD_INT 22
49125: PUSH
49126: LD_INT 23
49128: PUSH
49129: LD_INT 25
49131: PUSH
49132: LD_INT 26
49134: PUSH
49135: LD_INT 36
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 101
49156: PUSH
49157: LD_INT 102
49159: PUSH
49160: LD_INT 105
49162: PUSH
49163: LD_INT 106
49165: PUSH
49166: LD_INT 108
49168: PUSH
49169: LD_INT 109
49171: PUSH
49172: LD_INT 112
49174: PUSH
49175: LD_INT 116
49177: PUSH
49178: LD_INT 117
49180: PUSH
49181: LD_INT 118
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: ST_TO_ADDR
49200: GO 51863
49202: LD_INT 6
49204: DOUBLE
49205: EQUAL
49206: IFTRUE 49210
49208: GO 49342
49210: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
49211: LD_ADDR_VAR 0 1
49215: PUSH
49216: LD_INT 2
49218: PUSH
49219: LD_INT 4
49221: PUSH
49222: LD_INT 5
49224: PUSH
49225: LD_INT 6
49227: PUSH
49228: LD_INT 8
49230: PUSH
49231: LD_INT 11
49233: PUSH
49234: LD_INT 12
49236: PUSH
49237: LD_INT 15
49239: PUSH
49240: LD_INT 16
49242: PUSH
49243: LD_INT 20
49245: PUSH
49246: LD_INT 21
49248: PUSH
49249: LD_INT 22
49251: PUSH
49252: LD_INT 23
49254: PUSH
49255: LD_INT 25
49257: PUSH
49258: LD_INT 26
49260: PUSH
49261: LD_INT 30
49263: PUSH
49264: LD_INT 31
49266: PUSH
49267: LD_INT 32
49269: PUSH
49270: LD_INT 36
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 101
49296: PUSH
49297: LD_INT 102
49299: PUSH
49300: LD_INT 105
49302: PUSH
49303: LD_INT 106
49305: PUSH
49306: LD_INT 108
49308: PUSH
49309: LD_INT 109
49311: PUSH
49312: LD_INT 112
49314: PUSH
49315: LD_INT 116
49317: PUSH
49318: LD_INT 117
49320: PUSH
49321: LD_INT 118
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: ST_TO_ADDR
49340: GO 51863
49342: LD_INT 7
49344: DOUBLE
49345: EQUAL
49346: IFTRUE 49350
49348: GO 49462
49350: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
49351: LD_ADDR_VAR 0 1
49355: PUSH
49356: LD_INT 2
49358: PUSH
49359: LD_INT 4
49361: PUSH
49362: LD_INT 5
49364: PUSH
49365: LD_INT 7
49367: PUSH
49368: LD_INT 11
49370: PUSH
49371: LD_INT 12
49373: PUSH
49374: LD_INT 15
49376: PUSH
49377: LD_INT 16
49379: PUSH
49380: LD_INT 20
49382: PUSH
49383: LD_INT 21
49385: PUSH
49386: LD_INT 22
49388: PUSH
49389: LD_INT 23
49391: PUSH
49392: LD_INT 25
49394: PUSH
49395: LD_INT 26
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 101
49416: PUSH
49417: LD_INT 102
49419: PUSH
49420: LD_INT 103
49422: PUSH
49423: LD_INT 105
49425: PUSH
49426: LD_INT 106
49428: PUSH
49429: LD_INT 108
49431: PUSH
49432: LD_INT 112
49434: PUSH
49435: LD_INT 116
49437: PUSH
49438: LD_INT 117
49440: PUSH
49441: LD_INT 118
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: ST_TO_ADDR
49460: GO 51863
49462: LD_INT 8
49464: DOUBLE
49465: EQUAL
49466: IFTRUE 49470
49468: GO 49610
49470: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
49471: LD_ADDR_VAR 0 1
49475: PUSH
49476: LD_INT 2
49478: PUSH
49479: LD_INT 4
49481: PUSH
49482: LD_INT 5
49484: PUSH
49485: LD_INT 6
49487: PUSH
49488: LD_INT 7
49490: PUSH
49491: LD_INT 8
49493: PUSH
49494: LD_INT 11
49496: PUSH
49497: LD_INT 12
49499: PUSH
49500: LD_INT 15
49502: PUSH
49503: LD_INT 16
49505: PUSH
49506: LD_INT 20
49508: PUSH
49509: LD_INT 21
49511: PUSH
49512: LD_INT 22
49514: PUSH
49515: LD_INT 23
49517: PUSH
49518: LD_INT 25
49520: PUSH
49521: LD_INT 26
49523: PUSH
49524: LD_INT 30
49526: PUSH
49527: LD_INT 31
49529: PUSH
49530: LD_INT 32
49532: PUSH
49533: LD_INT 36
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 101
49560: PUSH
49561: LD_INT 102
49563: PUSH
49564: LD_INT 103
49566: PUSH
49567: LD_INT 105
49569: PUSH
49570: LD_INT 106
49572: PUSH
49573: LD_INT 108
49575: PUSH
49576: LD_INT 109
49578: PUSH
49579: LD_INT 112
49581: PUSH
49582: LD_INT 116
49584: PUSH
49585: LD_INT 117
49587: PUSH
49588: LD_INT 118
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: ST_TO_ADDR
49608: GO 51863
49610: LD_INT 9
49612: DOUBLE
49613: EQUAL
49614: IFTRUE 49618
49616: GO 49766
49618: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
49619: LD_ADDR_VAR 0 1
49623: PUSH
49624: LD_INT 2
49626: PUSH
49627: LD_INT 4
49629: PUSH
49630: LD_INT 5
49632: PUSH
49633: LD_INT 6
49635: PUSH
49636: LD_INT 7
49638: PUSH
49639: LD_INT 8
49641: PUSH
49642: LD_INT 11
49644: PUSH
49645: LD_INT 12
49647: PUSH
49648: LD_INT 15
49650: PUSH
49651: LD_INT 16
49653: PUSH
49654: LD_INT 20
49656: PUSH
49657: LD_INT 21
49659: PUSH
49660: LD_INT 22
49662: PUSH
49663: LD_INT 23
49665: PUSH
49666: LD_INT 25
49668: PUSH
49669: LD_INT 26
49671: PUSH
49672: LD_INT 28
49674: PUSH
49675: LD_INT 30
49677: PUSH
49678: LD_INT 31
49680: PUSH
49681: LD_INT 32
49683: PUSH
49684: LD_INT 36
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 101
49712: PUSH
49713: LD_INT 102
49715: PUSH
49716: LD_INT 103
49718: PUSH
49719: LD_INT 105
49721: PUSH
49722: LD_INT 106
49724: PUSH
49725: LD_INT 108
49727: PUSH
49728: LD_INT 109
49730: PUSH
49731: LD_INT 112
49733: PUSH
49734: LD_INT 114
49736: PUSH
49737: LD_INT 116
49739: PUSH
49740: LD_INT 117
49742: PUSH
49743: LD_INT 118
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: ST_TO_ADDR
49764: GO 51863
49766: LD_INT 10
49768: DOUBLE
49769: EQUAL
49770: IFTRUE 49774
49772: GO 49970
49774: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
49775: LD_ADDR_VAR 0 1
49779: PUSH
49780: LD_INT 2
49782: PUSH
49783: LD_INT 4
49785: PUSH
49786: LD_INT 5
49788: PUSH
49789: LD_INT 6
49791: PUSH
49792: LD_INT 7
49794: PUSH
49795: LD_INT 8
49797: PUSH
49798: LD_INT 9
49800: PUSH
49801: LD_INT 10
49803: PUSH
49804: LD_INT 11
49806: PUSH
49807: LD_INT 12
49809: PUSH
49810: LD_INT 13
49812: PUSH
49813: LD_INT 14
49815: PUSH
49816: LD_INT 15
49818: PUSH
49819: LD_INT 16
49821: PUSH
49822: LD_INT 17
49824: PUSH
49825: LD_INT 18
49827: PUSH
49828: LD_INT 19
49830: PUSH
49831: LD_INT 20
49833: PUSH
49834: LD_INT 21
49836: PUSH
49837: LD_INT 22
49839: PUSH
49840: LD_INT 23
49842: PUSH
49843: LD_INT 24
49845: PUSH
49846: LD_INT 25
49848: PUSH
49849: LD_INT 26
49851: PUSH
49852: LD_INT 28
49854: PUSH
49855: LD_INT 30
49857: PUSH
49858: LD_INT 31
49860: PUSH
49861: LD_INT 32
49863: PUSH
49864: LD_INT 36
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 101
49900: PUSH
49901: LD_INT 102
49903: PUSH
49904: LD_INT 103
49906: PUSH
49907: LD_INT 104
49909: PUSH
49910: LD_INT 105
49912: PUSH
49913: LD_INT 106
49915: PUSH
49916: LD_INT 107
49918: PUSH
49919: LD_INT 108
49921: PUSH
49922: LD_INT 109
49924: PUSH
49925: LD_INT 110
49927: PUSH
49928: LD_INT 111
49930: PUSH
49931: LD_INT 112
49933: PUSH
49934: LD_INT 114
49936: PUSH
49937: LD_INT 116
49939: PUSH
49940: LD_INT 117
49942: PUSH
49943: LD_INT 118
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: ST_TO_ADDR
49968: GO 51863
49970: LD_INT 11
49972: DOUBLE
49973: EQUAL
49974: IFTRUE 49978
49976: GO 50182
49978: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
49979: LD_ADDR_VAR 0 1
49983: PUSH
49984: LD_INT 2
49986: PUSH
49987: LD_INT 3
49989: PUSH
49990: LD_INT 4
49992: PUSH
49993: LD_INT 5
49995: PUSH
49996: LD_INT 6
49998: PUSH
49999: LD_INT 7
50001: PUSH
50002: LD_INT 8
50004: PUSH
50005: LD_INT 9
50007: PUSH
50008: LD_INT 10
50010: PUSH
50011: LD_INT 11
50013: PUSH
50014: LD_INT 12
50016: PUSH
50017: LD_INT 13
50019: PUSH
50020: LD_INT 14
50022: PUSH
50023: LD_INT 15
50025: PUSH
50026: LD_INT 16
50028: PUSH
50029: LD_INT 17
50031: PUSH
50032: LD_INT 18
50034: PUSH
50035: LD_INT 19
50037: PUSH
50038: LD_INT 20
50040: PUSH
50041: LD_INT 21
50043: PUSH
50044: LD_INT 22
50046: PUSH
50047: LD_INT 23
50049: PUSH
50050: LD_INT 24
50052: PUSH
50053: LD_INT 25
50055: PUSH
50056: LD_INT 26
50058: PUSH
50059: LD_INT 28
50061: PUSH
50062: LD_INT 30
50064: PUSH
50065: LD_INT 31
50067: PUSH
50068: LD_INT 32
50070: PUSH
50071: LD_INT 34
50073: PUSH
50074: LD_INT 36
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 101
50112: PUSH
50113: LD_INT 102
50115: PUSH
50116: LD_INT 103
50118: PUSH
50119: LD_INT 104
50121: PUSH
50122: LD_INT 105
50124: PUSH
50125: LD_INT 106
50127: PUSH
50128: LD_INT 107
50130: PUSH
50131: LD_INT 108
50133: PUSH
50134: LD_INT 109
50136: PUSH
50137: LD_INT 110
50139: PUSH
50140: LD_INT 111
50142: PUSH
50143: LD_INT 112
50145: PUSH
50146: LD_INT 114
50148: PUSH
50149: LD_INT 116
50151: PUSH
50152: LD_INT 117
50154: PUSH
50155: LD_INT 118
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: ST_TO_ADDR
50180: GO 51863
50182: LD_INT 12
50184: DOUBLE
50185: EQUAL
50186: IFTRUE 50190
50188: GO 50410
50190: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
50191: LD_ADDR_VAR 0 1
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: LD_INT 2
50201: PUSH
50202: LD_INT 3
50204: PUSH
50205: LD_INT 4
50207: PUSH
50208: LD_INT 5
50210: PUSH
50211: LD_INT 6
50213: PUSH
50214: LD_INT 7
50216: PUSH
50217: LD_INT 8
50219: PUSH
50220: LD_INT 9
50222: PUSH
50223: LD_INT 10
50225: PUSH
50226: LD_INT 11
50228: PUSH
50229: LD_INT 12
50231: PUSH
50232: LD_INT 13
50234: PUSH
50235: LD_INT 14
50237: PUSH
50238: LD_INT 15
50240: PUSH
50241: LD_INT 16
50243: PUSH
50244: LD_INT 17
50246: PUSH
50247: LD_INT 18
50249: PUSH
50250: LD_INT 19
50252: PUSH
50253: LD_INT 20
50255: PUSH
50256: LD_INT 21
50258: PUSH
50259: LD_INT 22
50261: PUSH
50262: LD_INT 23
50264: PUSH
50265: LD_INT 24
50267: PUSH
50268: LD_INT 25
50270: PUSH
50271: LD_INT 26
50273: PUSH
50274: LD_INT 27
50276: PUSH
50277: LD_INT 28
50279: PUSH
50280: LD_INT 30
50282: PUSH
50283: LD_INT 31
50285: PUSH
50286: LD_INT 32
50288: PUSH
50289: LD_INT 33
50291: PUSH
50292: LD_INT 34
50294: PUSH
50295: LD_INT 36
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 101
50336: PUSH
50337: LD_INT 102
50339: PUSH
50340: LD_INT 103
50342: PUSH
50343: LD_INT 104
50345: PUSH
50346: LD_INT 105
50348: PUSH
50349: LD_INT 106
50351: PUSH
50352: LD_INT 107
50354: PUSH
50355: LD_INT 108
50357: PUSH
50358: LD_INT 109
50360: PUSH
50361: LD_INT 110
50363: PUSH
50364: LD_INT 111
50366: PUSH
50367: LD_INT 112
50369: PUSH
50370: LD_INT 113
50372: PUSH
50373: LD_INT 114
50375: PUSH
50376: LD_INT 116
50378: PUSH
50379: LD_INT 117
50381: PUSH
50382: LD_INT 118
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: ST_TO_ADDR
50408: GO 51863
50410: LD_INT 13
50412: DOUBLE
50413: EQUAL
50414: IFTRUE 50418
50416: GO 50626
50418: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
50419: LD_ADDR_VAR 0 1
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: LD_INT 2
50429: PUSH
50430: LD_INT 3
50432: PUSH
50433: LD_INT 4
50435: PUSH
50436: LD_INT 5
50438: PUSH
50439: LD_INT 8
50441: PUSH
50442: LD_INT 9
50444: PUSH
50445: LD_INT 10
50447: PUSH
50448: LD_INT 11
50450: PUSH
50451: LD_INT 12
50453: PUSH
50454: LD_INT 14
50456: PUSH
50457: LD_INT 15
50459: PUSH
50460: LD_INT 16
50462: PUSH
50463: LD_INT 17
50465: PUSH
50466: LD_INT 18
50468: PUSH
50469: LD_INT 19
50471: PUSH
50472: LD_INT 20
50474: PUSH
50475: LD_INT 21
50477: PUSH
50478: LD_INT 22
50480: PUSH
50481: LD_INT 23
50483: PUSH
50484: LD_INT 24
50486: PUSH
50487: LD_INT 25
50489: PUSH
50490: LD_INT 26
50492: PUSH
50493: LD_INT 27
50495: PUSH
50496: LD_INT 28
50498: PUSH
50499: LD_INT 30
50501: PUSH
50502: LD_INT 31
50504: PUSH
50505: LD_INT 32
50507: PUSH
50508: LD_INT 33
50510: PUSH
50511: LD_INT 34
50513: PUSH
50514: LD_INT 36
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 101
50552: PUSH
50553: LD_INT 102
50555: PUSH
50556: LD_INT 103
50558: PUSH
50559: LD_INT 104
50561: PUSH
50562: LD_INT 105
50564: PUSH
50565: LD_INT 106
50567: PUSH
50568: LD_INT 107
50570: PUSH
50571: LD_INT 108
50573: PUSH
50574: LD_INT 109
50576: PUSH
50577: LD_INT 110
50579: PUSH
50580: LD_INT 111
50582: PUSH
50583: LD_INT 112
50585: PUSH
50586: LD_INT 113
50588: PUSH
50589: LD_INT 114
50591: PUSH
50592: LD_INT 116
50594: PUSH
50595: LD_INT 117
50597: PUSH
50598: LD_INT 118
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: ST_TO_ADDR
50624: GO 51863
50626: LD_INT 14
50628: DOUBLE
50629: EQUAL
50630: IFTRUE 50634
50632: GO 50858
50634: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
50635: LD_ADDR_VAR 0 1
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: LD_INT 2
50645: PUSH
50646: LD_INT 3
50648: PUSH
50649: LD_INT 4
50651: PUSH
50652: LD_INT 5
50654: PUSH
50655: LD_INT 6
50657: PUSH
50658: LD_INT 7
50660: PUSH
50661: LD_INT 8
50663: PUSH
50664: LD_INT 9
50666: PUSH
50667: LD_INT 10
50669: PUSH
50670: LD_INT 11
50672: PUSH
50673: LD_INT 12
50675: PUSH
50676: LD_INT 13
50678: PUSH
50679: LD_INT 14
50681: PUSH
50682: LD_INT 15
50684: PUSH
50685: LD_INT 16
50687: PUSH
50688: LD_INT 17
50690: PUSH
50691: LD_INT 18
50693: PUSH
50694: LD_INT 19
50696: PUSH
50697: LD_INT 20
50699: PUSH
50700: LD_INT 21
50702: PUSH
50703: LD_INT 22
50705: PUSH
50706: LD_INT 23
50708: PUSH
50709: LD_INT 24
50711: PUSH
50712: LD_INT 25
50714: PUSH
50715: LD_INT 26
50717: PUSH
50718: LD_INT 27
50720: PUSH
50721: LD_INT 28
50723: PUSH
50724: LD_INT 29
50726: PUSH
50727: LD_INT 30
50729: PUSH
50730: LD_INT 31
50732: PUSH
50733: LD_INT 32
50735: PUSH
50736: LD_INT 33
50738: PUSH
50739: LD_INT 34
50741: PUSH
50742: LD_INT 36
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 101
50784: PUSH
50785: LD_INT 102
50787: PUSH
50788: LD_INT 103
50790: PUSH
50791: LD_INT 104
50793: PUSH
50794: LD_INT 105
50796: PUSH
50797: LD_INT 106
50799: PUSH
50800: LD_INT 107
50802: PUSH
50803: LD_INT 108
50805: PUSH
50806: LD_INT 109
50808: PUSH
50809: LD_INT 110
50811: PUSH
50812: LD_INT 111
50814: PUSH
50815: LD_INT 112
50817: PUSH
50818: LD_INT 113
50820: PUSH
50821: LD_INT 114
50823: PUSH
50824: LD_INT 116
50826: PUSH
50827: LD_INT 117
50829: PUSH
50830: LD_INT 118
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: ST_TO_ADDR
50856: GO 51863
50858: LD_INT 15
50860: DOUBLE
50861: EQUAL
50862: IFTRUE 50866
50864: GO 51090
50866: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
50867: LD_ADDR_VAR 0 1
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: LD_INT 2
50877: PUSH
50878: LD_INT 3
50880: PUSH
50881: LD_INT 4
50883: PUSH
50884: LD_INT 5
50886: PUSH
50887: LD_INT 6
50889: PUSH
50890: LD_INT 7
50892: PUSH
50893: LD_INT 8
50895: PUSH
50896: LD_INT 9
50898: PUSH
50899: LD_INT 10
50901: PUSH
50902: LD_INT 11
50904: PUSH
50905: LD_INT 12
50907: PUSH
50908: LD_INT 13
50910: PUSH
50911: LD_INT 14
50913: PUSH
50914: LD_INT 15
50916: PUSH
50917: LD_INT 16
50919: PUSH
50920: LD_INT 17
50922: PUSH
50923: LD_INT 18
50925: PUSH
50926: LD_INT 19
50928: PUSH
50929: LD_INT 20
50931: PUSH
50932: LD_INT 21
50934: PUSH
50935: LD_INT 22
50937: PUSH
50938: LD_INT 23
50940: PUSH
50941: LD_INT 24
50943: PUSH
50944: LD_INT 25
50946: PUSH
50947: LD_INT 26
50949: PUSH
50950: LD_INT 27
50952: PUSH
50953: LD_INT 28
50955: PUSH
50956: LD_INT 29
50958: PUSH
50959: LD_INT 30
50961: PUSH
50962: LD_INT 31
50964: PUSH
50965: LD_INT 32
50967: PUSH
50968: LD_INT 33
50970: PUSH
50971: LD_INT 34
50973: PUSH
50974: LD_INT 36
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 101
51016: PUSH
51017: LD_INT 102
51019: PUSH
51020: LD_INT 103
51022: PUSH
51023: LD_INT 104
51025: PUSH
51026: LD_INT 105
51028: PUSH
51029: LD_INT 106
51031: PUSH
51032: LD_INT 107
51034: PUSH
51035: LD_INT 108
51037: PUSH
51038: LD_INT 109
51040: PUSH
51041: LD_INT 110
51043: PUSH
51044: LD_INT 111
51046: PUSH
51047: LD_INT 112
51049: PUSH
51050: LD_INT 113
51052: PUSH
51053: LD_INT 114
51055: PUSH
51056: LD_INT 116
51058: PUSH
51059: LD_INT 117
51061: PUSH
51062: LD_INT 118
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: ST_TO_ADDR
51088: GO 51863
51090: LD_INT 16
51092: DOUBLE
51093: EQUAL
51094: IFTRUE 51098
51096: GO 51234
51098: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
51099: LD_ADDR_VAR 0 1
51103: PUSH
51104: LD_INT 2
51106: PUSH
51107: LD_INT 4
51109: PUSH
51110: LD_INT 5
51112: PUSH
51113: LD_INT 7
51115: PUSH
51116: LD_INT 11
51118: PUSH
51119: LD_INT 12
51121: PUSH
51122: LD_INT 15
51124: PUSH
51125: LD_INT 16
51127: PUSH
51128: LD_INT 20
51130: PUSH
51131: LD_INT 21
51133: PUSH
51134: LD_INT 22
51136: PUSH
51137: LD_INT 23
51139: PUSH
51140: LD_INT 25
51142: PUSH
51143: LD_INT 26
51145: PUSH
51146: LD_INT 30
51148: PUSH
51149: LD_INT 31
51151: PUSH
51152: LD_INT 32
51154: PUSH
51155: LD_INT 33
51157: PUSH
51158: LD_INT 34
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 101
51184: PUSH
51185: LD_INT 102
51187: PUSH
51188: LD_INT 103
51190: PUSH
51191: LD_INT 106
51193: PUSH
51194: LD_INT 108
51196: PUSH
51197: LD_INT 112
51199: PUSH
51200: LD_INT 113
51202: PUSH
51203: LD_INT 114
51205: PUSH
51206: LD_INT 116
51208: PUSH
51209: LD_INT 117
51211: PUSH
51212: LD_INT 118
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: ST_TO_ADDR
51232: GO 51863
51234: LD_INT 17
51236: DOUBLE
51237: EQUAL
51238: IFTRUE 51242
51240: GO 51466
51242: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
51243: LD_ADDR_VAR 0 1
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: LD_INT 2
51253: PUSH
51254: LD_INT 3
51256: PUSH
51257: LD_INT 4
51259: PUSH
51260: LD_INT 5
51262: PUSH
51263: LD_INT 6
51265: PUSH
51266: LD_INT 7
51268: PUSH
51269: LD_INT 8
51271: PUSH
51272: LD_INT 9
51274: PUSH
51275: LD_INT 10
51277: PUSH
51278: LD_INT 11
51280: PUSH
51281: LD_INT 12
51283: PUSH
51284: LD_INT 13
51286: PUSH
51287: LD_INT 14
51289: PUSH
51290: LD_INT 15
51292: PUSH
51293: LD_INT 16
51295: PUSH
51296: LD_INT 17
51298: PUSH
51299: LD_INT 18
51301: PUSH
51302: LD_INT 19
51304: PUSH
51305: LD_INT 20
51307: PUSH
51308: LD_INT 21
51310: PUSH
51311: LD_INT 22
51313: PUSH
51314: LD_INT 23
51316: PUSH
51317: LD_INT 24
51319: PUSH
51320: LD_INT 25
51322: PUSH
51323: LD_INT 26
51325: PUSH
51326: LD_INT 27
51328: PUSH
51329: LD_INT 28
51331: PUSH
51332: LD_INT 29
51334: PUSH
51335: LD_INT 30
51337: PUSH
51338: LD_INT 31
51340: PUSH
51341: LD_INT 32
51343: PUSH
51344: LD_INT 33
51346: PUSH
51347: LD_INT 34
51349: PUSH
51350: LD_INT 36
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 101
51392: PUSH
51393: LD_INT 102
51395: PUSH
51396: LD_INT 103
51398: PUSH
51399: LD_INT 104
51401: PUSH
51402: LD_INT 105
51404: PUSH
51405: LD_INT 106
51407: PUSH
51408: LD_INT 107
51410: PUSH
51411: LD_INT 108
51413: PUSH
51414: LD_INT 109
51416: PUSH
51417: LD_INT 110
51419: PUSH
51420: LD_INT 111
51422: PUSH
51423: LD_INT 112
51425: PUSH
51426: LD_INT 113
51428: PUSH
51429: LD_INT 114
51431: PUSH
51432: LD_INT 116
51434: PUSH
51435: LD_INT 117
51437: PUSH
51438: LD_INT 118
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: ST_TO_ADDR
51464: GO 51863
51466: LD_INT 18
51468: DOUBLE
51469: EQUAL
51470: IFTRUE 51474
51472: GO 51622
51474: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
51475: LD_ADDR_VAR 0 1
51479: PUSH
51480: LD_INT 2
51482: PUSH
51483: LD_INT 4
51485: PUSH
51486: LD_INT 5
51488: PUSH
51489: LD_INT 7
51491: PUSH
51492: LD_INT 11
51494: PUSH
51495: LD_INT 12
51497: PUSH
51498: LD_INT 15
51500: PUSH
51501: LD_INT 16
51503: PUSH
51504: LD_INT 20
51506: PUSH
51507: LD_INT 21
51509: PUSH
51510: LD_INT 22
51512: PUSH
51513: LD_INT 23
51515: PUSH
51516: LD_INT 25
51518: PUSH
51519: LD_INT 26
51521: PUSH
51522: LD_INT 30
51524: PUSH
51525: LD_INT 31
51527: PUSH
51528: LD_INT 32
51530: PUSH
51531: LD_INT 33
51533: PUSH
51534: LD_INT 34
51536: PUSH
51537: LD_INT 35
51539: PUSH
51540: LD_INT 36
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 101
51568: PUSH
51569: LD_INT 102
51571: PUSH
51572: LD_INT 103
51574: PUSH
51575: LD_INT 106
51577: PUSH
51578: LD_INT 108
51580: PUSH
51581: LD_INT 112
51583: PUSH
51584: LD_INT 113
51586: PUSH
51587: LD_INT 114
51589: PUSH
51590: LD_INT 115
51592: PUSH
51593: LD_INT 116
51595: PUSH
51596: LD_INT 117
51598: PUSH
51599: LD_INT 118
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: ST_TO_ADDR
51620: GO 51863
51622: LD_INT 19
51624: DOUBLE
51625: EQUAL
51626: IFTRUE 51630
51628: GO 51862
51630: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
51631: LD_ADDR_VAR 0 1
51635: PUSH
51636: LD_INT 1
51638: PUSH
51639: LD_INT 2
51641: PUSH
51642: LD_INT 3
51644: PUSH
51645: LD_INT 4
51647: PUSH
51648: LD_INT 5
51650: PUSH
51651: LD_INT 6
51653: PUSH
51654: LD_INT 7
51656: PUSH
51657: LD_INT 8
51659: PUSH
51660: LD_INT 9
51662: PUSH
51663: LD_INT 10
51665: PUSH
51666: LD_INT 11
51668: PUSH
51669: LD_INT 12
51671: PUSH
51672: LD_INT 13
51674: PUSH
51675: LD_INT 14
51677: PUSH
51678: LD_INT 15
51680: PUSH
51681: LD_INT 16
51683: PUSH
51684: LD_INT 17
51686: PUSH
51687: LD_INT 18
51689: PUSH
51690: LD_INT 19
51692: PUSH
51693: LD_INT 20
51695: PUSH
51696: LD_INT 21
51698: PUSH
51699: LD_INT 22
51701: PUSH
51702: LD_INT 23
51704: PUSH
51705: LD_INT 24
51707: PUSH
51708: LD_INT 25
51710: PUSH
51711: LD_INT 26
51713: PUSH
51714: LD_INT 27
51716: PUSH
51717: LD_INT 28
51719: PUSH
51720: LD_INT 29
51722: PUSH
51723: LD_INT 30
51725: PUSH
51726: LD_INT 31
51728: PUSH
51729: LD_INT 32
51731: PUSH
51732: LD_INT 33
51734: PUSH
51735: LD_INT 34
51737: PUSH
51738: LD_INT 35
51740: PUSH
51741: LD_INT 36
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 101
51784: PUSH
51785: LD_INT 102
51787: PUSH
51788: LD_INT 103
51790: PUSH
51791: LD_INT 104
51793: PUSH
51794: LD_INT 105
51796: PUSH
51797: LD_INT 106
51799: PUSH
51800: LD_INT 107
51802: PUSH
51803: LD_INT 108
51805: PUSH
51806: LD_INT 109
51808: PUSH
51809: LD_INT 110
51811: PUSH
51812: LD_INT 111
51814: PUSH
51815: LD_INT 112
51817: PUSH
51818: LD_INT 113
51820: PUSH
51821: LD_INT 114
51823: PUSH
51824: LD_INT 115
51826: PUSH
51827: LD_INT 116
51829: PUSH
51830: LD_INT 117
51832: PUSH
51833: LD_INT 118
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: ST_TO_ADDR
51860: GO 51863
51862: POP
// end else
51863: GO 52094
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
51865: LD_ADDR_VAR 0 1
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: LD_INT 2
51875: PUSH
51876: LD_INT 3
51878: PUSH
51879: LD_INT 4
51881: PUSH
51882: LD_INT 5
51884: PUSH
51885: LD_INT 6
51887: PUSH
51888: LD_INT 7
51890: PUSH
51891: LD_INT 8
51893: PUSH
51894: LD_INT 9
51896: PUSH
51897: LD_INT 10
51899: PUSH
51900: LD_INT 11
51902: PUSH
51903: LD_INT 12
51905: PUSH
51906: LD_INT 13
51908: PUSH
51909: LD_INT 14
51911: PUSH
51912: LD_INT 15
51914: PUSH
51915: LD_INT 16
51917: PUSH
51918: LD_INT 17
51920: PUSH
51921: LD_INT 18
51923: PUSH
51924: LD_INT 19
51926: PUSH
51927: LD_INT 20
51929: PUSH
51930: LD_INT 21
51932: PUSH
51933: LD_INT 22
51935: PUSH
51936: LD_INT 23
51938: PUSH
51939: LD_INT 24
51941: PUSH
51942: LD_INT 25
51944: PUSH
51945: LD_INT 26
51947: PUSH
51948: LD_INT 27
51950: PUSH
51951: LD_INT 28
51953: PUSH
51954: LD_INT 29
51956: PUSH
51957: LD_INT 30
51959: PUSH
51960: LD_INT 31
51962: PUSH
51963: LD_INT 32
51965: PUSH
51966: LD_INT 33
51968: PUSH
51969: LD_INT 34
51971: PUSH
51972: LD_INT 35
51974: PUSH
51975: LD_INT 36
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 101
52018: PUSH
52019: LD_INT 102
52021: PUSH
52022: LD_INT 103
52024: PUSH
52025: LD_INT 104
52027: PUSH
52028: LD_INT 105
52030: PUSH
52031: LD_INT 106
52033: PUSH
52034: LD_INT 107
52036: PUSH
52037: LD_INT 108
52039: PUSH
52040: LD_INT 109
52042: PUSH
52043: LD_INT 110
52045: PUSH
52046: LD_INT 111
52048: PUSH
52049: LD_INT 112
52051: PUSH
52052: LD_INT 113
52054: PUSH
52055: LD_INT 114
52057: PUSH
52058: LD_INT 115
52060: PUSH
52061: LD_INT 116
52063: PUSH
52064: LD_INT 117
52066: PUSH
52067: LD_INT 118
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: ST_TO_ADDR
// if result then
52094: LD_VAR 0 1
52098: IFFALSE 52387
// begin normal :=  ;
52100: LD_ADDR_VAR 0 3
52104: PUSH
52105: LD_STRING 
52107: ST_TO_ADDR
// hardcore :=  ;
52108: LD_ADDR_VAR 0 4
52112: PUSH
52113: LD_STRING 
52115: ST_TO_ADDR
// for i = 1 to normalCounter do
52116: LD_ADDR_VAR 0 5
52120: PUSH
52121: DOUBLE
52122: LD_INT 1
52124: DEC
52125: ST_TO_ADDR
52126: LD_EXP 41
52130: PUSH
52131: FOR_TO
52132: IFFALSE 52233
// begin tmp := 0 ;
52134: LD_ADDR_VAR 0 2
52138: PUSH
52139: LD_STRING 0
52141: ST_TO_ADDR
// if result [ 1 ] then
52142: LD_VAR 0 1
52146: PUSH
52147: LD_INT 1
52149: ARRAY
52150: IFFALSE 52215
// if result [ 1 ] [ 1 ] = i then
52152: LD_VAR 0 1
52156: PUSH
52157: LD_INT 1
52159: ARRAY
52160: PUSH
52161: LD_INT 1
52163: ARRAY
52164: PUSH
52165: LD_VAR 0 5
52169: EQUAL
52170: IFFALSE 52215
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
52172: LD_ADDR_VAR 0 1
52176: PUSH
52177: LD_VAR 0 1
52181: PPUSH
52182: LD_INT 1
52184: PPUSH
52185: LD_VAR 0 1
52189: PUSH
52190: LD_INT 1
52192: ARRAY
52193: PPUSH
52194: LD_INT 1
52196: PPUSH
52197: CALL_OW 3
52201: PPUSH
52202: CALL_OW 1
52206: ST_TO_ADDR
// tmp := 1 ;
52207: LD_ADDR_VAR 0 2
52211: PUSH
52212: LD_STRING 1
52214: ST_TO_ADDR
// end ; normal := normal & tmp ;
52215: LD_ADDR_VAR 0 3
52219: PUSH
52220: LD_VAR 0 3
52224: PUSH
52225: LD_VAR 0 2
52229: STR
52230: ST_TO_ADDR
// end ;
52231: GO 52131
52233: POP
52234: POP
// for i = 1 to hardcoreCounter do
52235: LD_ADDR_VAR 0 5
52239: PUSH
52240: DOUBLE
52241: LD_INT 1
52243: DEC
52244: ST_TO_ADDR
52245: LD_EXP 42
52249: PUSH
52250: FOR_TO
52251: IFFALSE 52356
// begin tmp := 0 ;
52253: LD_ADDR_VAR 0 2
52257: PUSH
52258: LD_STRING 0
52260: ST_TO_ADDR
// if result [ 2 ] then
52261: LD_VAR 0 1
52265: PUSH
52266: LD_INT 2
52268: ARRAY
52269: IFFALSE 52338
// if result [ 2 ] [ 1 ] = 100 + i then
52271: LD_VAR 0 1
52275: PUSH
52276: LD_INT 2
52278: ARRAY
52279: PUSH
52280: LD_INT 1
52282: ARRAY
52283: PUSH
52284: LD_INT 100
52286: PUSH
52287: LD_VAR 0 5
52291: PLUS
52292: EQUAL
52293: IFFALSE 52338
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
52295: LD_ADDR_VAR 0 1
52299: PUSH
52300: LD_VAR 0 1
52304: PPUSH
52305: LD_INT 2
52307: PPUSH
52308: LD_VAR 0 1
52312: PUSH
52313: LD_INT 2
52315: ARRAY
52316: PPUSH
52317: LD_INT 1
52319: PPUSH
52320: CALL_OW 3
52324: PPUSH
52325: CALL_OW 1
52329: ST_TO_ADDR
// tmp := 1 ;
52330: LD_ADDR_VAR 0 2
52334: PUSH
52335: LD_STRING 1
52337: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
52338: LD_ADDR_VAR 0 4
52342: PUSH
52343: LD_VAR 0 4
52347: PUSH
52348: LD_VAR 0 2
52352: STR
52353: ST_TO_ADDR
// end ;
52354: GO 52250
52356: POP
52357: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
52358: LD_STRING getStreamItemsFromMission("
52360: PUSH
52361: LD_VAR 0 3
52365: STR
52366: PUSH
52367: LD_STRING ","
52369: STR
52370: PUSH
52371: LD_VAR 0 4
52375: STR
52376: PUSH
52377: LD_STRING ")
52379: STR
52380: PPUSH
52381: CALL_OW 559
// end else
52385: GO 52394
// ToLua ( getStreamItemsFromMission("","") ) ;
52387: LD_STRING getStreamItemsFromMission("","")
52389: PPUSH
52390: CALL_OW 559
// end ;
52394: LD_VAR 0 1
52398: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
52399: LD_EXP 40
52403: PUSH
52404: LD_EXP 45
52408: AND
52409: IFFALSE 52533
52411: GO 52413
52413: DISABLE
52414: LD_INT 0
52416: PPUSH
52417: PPUSH
// begin enable ;
52418: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
52419: LD_ADDR_VAR 0 2
52423: PUSH
52424: LD_INT 22
52426: PUSH
52427: LD_OWVAR 2
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 2
52438: PUSH
52439: LD_INT 34
52441: PUSH
52442: LD_INT 7
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 34
52451: PUSH
52452: LD_INT 45
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 34
52461: PUSH
52462: LD_INT 28
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 34
52471: PUSH
52472: LD_INT 47
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PPUSH
52490: CALL_OW 69
52494: ST_TO_ADDR
// if not tmp then
52495: LD_VAR 0 2
52499: NOT
52500: IFFALSE 52504
// exit ;
52502: GO 52533
// for i in tmp do
52504: LD_ADDR_VAR 0 1
52508: PUSH
52509: LD_VAR 0 2
52513: PUSH
52514: FOR_IN
52515: IFFALSE 52531
// begin SetLives ( i , 0 ) ;
52517: LD_VAR 0 1
52521: PPUSH
52522: LD_INT 0
52524: PPUSH
52525: CALL_OW 234
// end ;
52529: GO 52514
52531: POP
52532: POP
// end ;
52533: PPOPN 2
52535: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
52536: LD_EXP 40
52540: PUSH
52541: LD_EXP 46
52545: AND
52546: IFFALSE 52630
52548: GO 52550
52550: DISABLE
52551: LD_INT 0
52553: PPUSH
52554: PPUSH
// begin enable ;
52555: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
52556: LD_ADDR_VAR 0 2
52560: PUSH
52561: LD_INT 22
52563: PUSH
52564: LD_OWVAR 2
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 32
52575: PUSH
52576: LD_INT 3
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PPUSH
52587: CALL_OW 69
52591: ST_TO_ADDR
// if not tmp then
52592: LD_VAR 0 2
52596: NOT
52597: IFFALSE 52601
// exit ;
52599: GO 52630
// for i in tmp do
52601: LD_ADDR_VAR 0 1
52605: PUSH
52606: LD_VAR 0 2
52610: PUSH
52611: FOR_IN
52612: IFFALSE 52628
// begin SetLives ( i , 0 ) ;
52614: LD_VAR 0 1
52618: PPUSH
52619: LD_INT 0
52621: PPUSH
52622: CALL_OW 234
// end ;
52626: GO 52611
52628: POP
52629: POP
// end ;
52630: PPOPN 2
52632: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
52633: LD_EXP 40
52637: PUSH
52638: LD_EXP 43
52642: AND
52643: IFFALSE 52736
52645: GO 52647
52647: DISABLE
52648: LD_INT 0
52650: PPUSH
// begin enable ;
52651: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
52652: LD_ADDR_VAR 0 1
52656: PUSH
52657: LD_INT 22
52659: PUSH
52660: LD_OWVAR 2
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: PUSH
52672: LD_INT 25
52674: PUSH
52675: LD_INT 5
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 25
52684: PUSH
52685: LD_INT 9
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 25
52694: PUSH
52695: LD_INT 8
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PPUSH
52712: CALL_OW 69
52716: PUSH
52717: FOR_IN
52718: IFFALSE 52734
// begin SetClass ( i , 1 ) ;
52720: LD_VAR 0 1
52724: PPUSH
52725: LD_INT 1
52727: PPUSH
52728: CALL_OW 336
// end ;
52732: GO 52717
52734: POP
52735: POP
// end ;
52736: PPOPN 1
52738: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
52739: LD_EXP 40
52743: PUSH
52744: LD_EXP 44
52748: AND
52749: PUSH
52750: LD_OWVAR 65
52754: PUSH
52755: LD_INT 7
52757: LESS
52758: AND
52759: IFFALSE 52773
52761: GO 52763
52763: DISABLE
// begin enable ;
52764: ENABLE
// game_speed := 7 ;
52765: LD_ADDR_OWVAR 65
52769: PUSH
52770: LD_INT 7
52772: ST_TO_ADDR
// end ;
52773: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
52774: LD_EXP 40
52778: PUSH
52779: LD_EXP 47
52783: AND
52784: IFFALSE 52986
52786: GO 52788
52788: DISABLE
52789: LD_INT 0
52791: PPUSH
52792: PPUSH
52793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
52794: LD_ADDR_VAR 0 3
52798: PUSH
52799: LD_INT 81
52801: PUSH
52802: LD_OWVAR 2
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 21
52813: PUSH
52814: LD_INT 1
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PPUSH
52825: CALL_OW 69
52829: ST_TO_ADDR
// if not tmp then
52830: LD_VAR 0 3
52834: NOT
52835: IFFALSE 52839
// exit ;
52837: GO 52986
// if tmp > 5 then
52839: LD_VAR 0 3
52843: PUSH
52844: LD_INT 5
52846: GREATER
52847: IFFALSE 52859
// k := 5 else
52849: LD_ADDR_VAR 0 2
52853: PUSH
52854: LD_INT 5
52856: ST_TO_ADDR
52857: GO 52869
// k := tmp ;
52859: LD_ADDR_VAR 0 2
52863: PUSH
52864: LD_VAR 0 3
52868: ST_TO_ADDR
// for i := 1 to k do
52869: LD_ADDR_VAR 0 1
52873: PUSH
52874: DOUBLE
52875: LD_INT 1
52877: DEC
52878: ST_TO_ADDR
52879: LD_VAR 0 2
52883: PUSH
52884: FOR_TO
52885: IFFALSE 52984
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
52887: LD_VAR 0 3
52891: PUSH
52892: LD_VAR 0 1
52896: ARRAY
52897: PPUSH
52898: LD_VAR 0 1
52902: PUSH
52903: LD_INT 4
52905: MOD
52906: PUSH
52907: LD_INT 1
52909: PLUS
52910: PPUSH
52911: CALL_OW 259
52915: PUSH
52916: LD_INT 10
52918: LESS
52919: IFFALSE 52982
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
52921: LD_VAR 0 3
52925: PUSH
52926: LD_VAR 0 1
52930: ARRAY
52931: PPUSH
52932: LD_VAR 0 1
52936: PUSH
52937: LD_INT 4
52939: MOD
52940: PUSH
52941: LD_INT 1
52943: PLUS
52944: PPUSH
52945: LD_VAR 0 3
52949: PUSH
52950: LD_VAR 0 1
52954: ARRAY
52955: PPUSH
52956: LD_VAR 0 1
52960: PUSH
52961: LD_INT 4
52963: MOD
52964: PUSH
52965: LD_INT 1
52967: PLUS
52968: PPUSH
52969: CALL_OW 259
52973: PUSH
52974: LD_INT 1
52976: PLUS
52977: PPUSH
52978: CALL_OW 237
52982: GO 52884
52984: POP
52985: POP
// end ;
52986: PPOPN 3
52988: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
52989: LD_EXP 40
52993: PUSH
52994: LD_EXP 48
52998: AND
52999: IFFALSE 53019
53001: GO 53003
53003: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
53004: LD_INT 4
53006: PPUSH
53007: LD_OWVAR 2
53011: PPUSH
53012: LD_INT 0
53014: PPUSH
53015: CALL_OW 324
53019: END
// every 0 0$1 trigger StreamModeActive and sShovel do
53020: LD_EXP 40
53024: PUSH
53025: LD_EXP 77
53029: AND
53030: IFFALSE 53050
53032: GO 53034
53034: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
53035: LD_INT 19
53037: PPUSH
53038: LD_OWVAR 2
53042: PPUSH
53043: LD_INT 0
53045: PPUSH
53046: CALL_OW 324
53050: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
53051: LD_EXP 40
53055: PUSH
53056: LD_EXP 49
53060: AND
53061: IFFALSE 53163
53063: GO 53065
53065: DISABLE
53066: LD_INT 0
53068: PPUSH
53069: PPUSH
// begin enable ;
53070: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
53071: LD_ADDR_VAR 0 2
53075: PUSH
53076: LD_INT 22
53078: PUSH
53079: LD_OWVAR 2
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 2
53090: PUSH
53091: LD_INT 34
53093: PUSH
53094: LD_INT 11
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 34
53103: PUSH
53104: LD_INT 30
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: LIST
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PPUSH
53120: CALL_OW 69
53124: ST_TO_ADDR
// if not tmp then
53125: LD_VAR 0 2
53129: NOT
53130: IFFALSE 53134
// exit ;
53132: GO 53163
// for i in tmp do
53134: LD_ADDR_VAR 0 1
53138: PUSH
53139: LD_VAR 0 2
53143: PUSH
53144: FOR_IN
53145: IFFALSE 53161
// begin SetLives ( i , 0 ) ;
53147: LD_VAR 0 1
53151: PPUSH
53152: LD_INT 0
53154: PPUSH
53155: CALL_OW 234
// end ;
53159: GO 53144
53161: POP
53162: POP
// end ;
53163: PPOPN 2
53165: END
// every 0 0$1 trigger StreamModeActive and sBunker do
53166: LD_EXP 40
53170: PUSH
53171: LD_EXP 50
53175: AND
53176: IFFALSE 53196
53178: GO 53180
53180: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
53181: LD_INT 32
53183: PPUSH
53184: LD_OWVAR 2
53188: PPUSH
53189: LD_INT 0
53191: PPUSH
53192: CALL_OW 324
53196: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
53197: LD_EXP 40
53201: PUSH
53202: LD_EXP 51
53206: AND
53207: IFFALSE 53388
53209: GO 53211
53211: DISABLE
53212: LD_INT 0
53214: PPUSH
53215: PPUSH
53216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
53217: LD_ADDR_VAR 0 2
53221: PUSH
53222: LD_INT 22
53224: PUSH
53225: LD_OWVAR 2
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 33
53236: PUSH
53237: LD_INT 3
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PPUSH
53248: CALL_OW 69
53252: ST_TO_ADDR
// if not tmp then
53253: LD_VAR 0 2
53257: NOT
53258: IFFALSE 53262
// exit ;
53260: GO 53388
// side := 0 ;
53262: LD_ADDR_VAR 0 3
53266: PUSH
53267: LD_INT 0
53269: ST_TO_ADDR
// for i := 1 to 8 do
53270: LD_ADDR_VAR 0 1
53274: PUSH
53275: DOUBLE
53276: LD_INT 1
53278: DEC
53279: ST_TO_ADDR
53280: LD_INT 8
53282: PUSH
53283: FOR_TO
53284: IFFALSE 53332
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
53286: LD_OWVAR 2
53290: PUSH
53291: LD_VAR 0 1
53295: NONEQUAL
53296: PUSH
53297: LD_OWVAR 2
53301: PPUSH
53302: LD_VAR 0 1
53306: PPUSH
53307: CALL_OW 81
53311: PUSH
53312: LD_INT 2
53314: EQUAL
53315: AND
53316: IFFALSE 53330
// begin side := i ;
53318: LD_ADDR_VAR 0 3
53322: PUSH
53323: LD_VAR 0 1
53327: ST_TO_ADDR
// break ;
53328: GO 53332
// end ;
53330: GO 53283
53332: POP
53333: POP
// if not side then
53334: LD_VAR 0 3
53338: NOT
53339: IFFALSE 53343
// exit ;
53341: GO 53388
// for i := 1 to tmp do
53343: LD_ADDR_VAR 0 1
53347: PUSH
53348: DOUBLE
53349: LD_INT 1
53351: DEC
53352: ST_TO_ADDR
53353: LD_VAR 0 2
53357: PUSH
53358: FOR_TO
53359: IFFALSE 53386
// if Prob ( 60 ) then
53361: LD_INT 60
53363: PPUSH
53364: CALL_OW 13
53368: IFFALSE 53384
// SetSide ( i , side ) ;
53370: LD_VAR 0 1
53374: PPUSH
53375: LD_VAR 0 3
53379: PPUSH
53380: CALL_OW 235
53384: GO 53358
53386: POP
53387: POP
// end ;
53388: PPOPN 3
53390: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
53391: LD_EXP 40
53395: PUSH
53396: LD_EXP 53
53400: AND
53401: IFFALSE 53520
53403: GO 53405
53405: DISABLE
53406: LD_INT 0
53408: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
53409: LD_ADDR_VAR 0 1
53413: PUSH
53414: LD_INT 22
53416: PUSH
53417: LD_OWVAR 2
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 21
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 3
53438: PUSH
53439: LD_INT 23
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: LIST
53457: PPUSH
53458: CALL_OW 69
53462: PUSH
53463: FOR_IN
53464: IFFALSE 53518
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
53466: LD_VAR 0 1
53470: PPUSH
53471: CALL_OW 257
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: LD_INT 2
53481: PUSH
53482: LD_INT 3
53484: PUSH
53485: LD_INT 4
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: IN
53494: IFFALSE 53516
// SetClass ( un , rand ( 1 , 4 ) ) ;
53496: LD_VAR 0 1
53500: PPUSH
53501: LD_INT 1
53503: PPUSH
53504: LD_INT 4
53506: PPUSH
53507: CALL_OW 12
53511: PPUSH
53512: CALL_OW 336
53516: GO 53463
53518: POP
53519: POP
// end ;
53520: PPOPN 1
53522: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
53523: LD_EXP 40
53527: PUSH
53528: LD_EXP 52
53532: AND
53533: IFFALSE 53612
53535: GO 53537
53537: DISABLE
53538: LD_INT 0
53540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
53541: LD_ADDR_VAR 0 1
53545: PUSH
53546: LD_INT 22
53548: PUSH
53549: LD_OWVAR 2
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 21
53560: PUSH
53561: LD_INT 3
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PPUSH
53572: CALL_OW 69
53576: ST_TO_ADDR
// if not tmp then
53577: LD_VAR 0 1
53581: NOT
53582: IFFALSE 53586
// exit ;
53584: GO 53612
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
53586: LD_VAR 0 1
53590: PUSH
53591: LD_INT 1
53593: PPUSH
53594: LD_VAR 0 1
53598: PPUSH
53599: CALL_OW 12
53603: ARRAY
53604: PPUSH
53605: LD_INT 100
53607: PPUSH
53608: CALL_OW 234
// end ;
53612: PPOPN 1
53614: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
53615: LD_EXP 40
53619: PUSH
53620: LD_EXP 54
53624: AND
53625: IFFALSE 53723
53627: GO 53629
53629: DISABLE
53630: LD_INT 0
53632: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
53633: LD_ADDR_VAR 0 1
53637: PUSH
53638: LD_INT 22
53640: PUSH
53641: LD_OWVAR 2
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 21
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PPUSH
53664: CALL_OW 69
53668: ST_TO_ADDR
// if not tmp then
53669: LD_VAR 0 1
53673: NOT
53674: IFFALSE 53678
// exit ;
53676: GO 53723
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
53678: LD_VAR 0 1
53682: PUSH
53683: LD_INT 1
53685: PPUSH
53686: LD_VAR 0 1
53690: PPUSH
53691: CALL_OW 12
53695: ARRAY
53696: PPUSH
53697: LD_INT 1
53699: PPUSH
53700: LD_INT 4
53702: PPUSH
53703: CALL_OW 12
53707: PPUSH
53708: LD_INT 3000
53710: PPUSH
53711: LD_INT 9000
53713: PPUSH
53714: CALL_OW 12
53718: PPUSH
53719: CALL_OW 492
// end ;
53723: PPOPN 1
53725: END
// every 0 0$1 trigger StreamModeActive and sDepot do
53726: LD_EXP 40
53730: PUSH
53731: LD_EXP 55
53735: AND
53736: IFFALSE 53756
53738: GO 53740
53740: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
53741: LD_INT 1
53743: PPUSH
53744: LD_OWVAR 2
53748: PPUSH
53749: LD_INT 0
53751: PPUSH
53752: CALL_OW 324
53756: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
53757: LD_EXP 40
53761: PUSH
53762: LD_EXP 56
53766: AND
53767: IFFALSE 53850
53769: GO 53771
53771: DISABLE
53772: LD_INT 0
53774: PPUSH
53775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
53776: LD_ADDR_VAR 0 2
53780: PUSH
53781: LD_INT 22
53783: PUSH
53784: LD_OWVAR 2
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 21
53795: PUSH
53796: LD_INT 3
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PPUSH
53807: CALL_OW 69
53811: ST_TO_ADDR
// if not tmp then
53812: LD_VAR 0 2
53816: NOT
53817: IFFALSE 53821
// exit ;
53819: GO 53850
// for i in tmp do
53821: LD_ADDR_VAR 0 1
53825: PUSH
53826: LD_VAR 0 2
53830: PUSH
53831: FOR_IN
53832: IFFALSE 53848
// SetBLevel ( i , 10 ) ;
53834: LD_VAR 0 1
53838: PPUSH
53839: LD_INT 10
53841: PPUSH
53842: CALL_OW 241
53846: GO 53831
53848: POP
53849: POP
// end ;
53850: PPOPN 2
53852: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
53853: LD_EXP 40
53857: PUSH
53858: LD_EXP 57
53862: AND
53863: IFFALSE 53974
53865: GO 53867
53867: DISABLE
53868: LD_INT 0
53870: PPUSH
53871: PPUSH
53872: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
53873: LD_ADDR_VAR 0 3
53877: PUSH
53878: LD_INT 22
53880: PUSH
53881: LD_OWVAR 2
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 25
53892: PUSH
53893: LD_INT 1
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PPUSH
53904: CALL_OW 69
53908: ST_TO_ADDR
// if not tmp then
53909: LD_VAR 0 3
53913: NOT
53914: IFFALSE 53918
// exit ;
53916: GO 53974
// un := tmp [ rand ( 1 , tmp ) ] ;
53918: LD_ADDR_VAR 0 2
53922: PUSH
53923: LD_VAR 0 3
53927: PUSH
53928: LD_INT 1
53930: PPUSH
53931: LD_VAR 0 3
53935: PPUSH
53936: CALL_OW 12
53940: ARRAY
53941: ST_TO_ADDR
// if Crawls ( un ) then
53942: LD_VAR 0 2
53946: PPUSH
53947: CALL_OW 318
53951: IFFALSE 53962
// ComWalk ( un ) ;
53953: LD_VAR 0 2
53957: PPUSH
53958: CALL_OW 138
// SetClass ( un , class_sniper ) ;
53962: LD_VAR 0 2
53966: PPUSH
53967: LD_INT 5
53969: PPUSH
53970: CALL_OW 336
// end ;
53974: PPOPN 3
53976: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
53977: LD_EXP 40
53981: PUSH
53982: LD_EXP 58
53986: AND
53987: PUSH
53988: LD_OWVAR 67
53992: PUSH
53993: LD_INT 4
53995: LESS
53996: AND
53997: IFFALSE 54016
53999: GO 54001
54001: DISABLE
// begin Difficulty := Difficulty + 1 ;
54002: LD_ADDR_OWVAR 67
54006: PUSH
54007: LD_OWVAR 67
54011: PUSH
54012: LD_INT 1
54014: PLUS
54015: ST_TO_ADDR
// end ;
54016: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
54017: LD_EXP 40
54021: PUSH
54022: LD_EXP 59
54026: AND
54027: IFFALSE 54130
54029: GO 54031
54031: DISABLE
54032: LD_INT 0
54034: PPUSH
// begin for i := 1 to 5 do
54035: LD_ADDR_VAR 0 1
54039: PUSH
54040: DOUBLE
54041: LD_INT 1
54043: DEC
54044: ST_TO_ADDR
54045: LD_INT 5
54047: PUSH
54048: FOR_TO
54049: IFFALSE 54128
// begin uc_nation := nation_nature ;
54051: LD_ADDR_OWVAR 21
54055: PUSH
54056: LD_INT 0
54058: ST_TO_ADDR
// uc_side := 0 ;
54059: LD_ADDR_OWVAR 20
54063: PUSH
54064: LD_INT 0
54066: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
54067: LD_ADDR_OWVAR 29
54071: PUSH
54072: LD_INT 12
54074: PUSH
54075: LD_INT 12
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: ST_TO_ADDR
// hc_agressivity := 20 ;
54082: LD_ADDR_OWVAR 35
54086: PUSH
54087: LD_INT 20
54089: ST_TO_ADDR
// hc_class := class_tiger ;
54090: LD_ADDR_OWVAR 28
54094: PUSH
54095: LD_INT 14
54097: ST_TO_ADDR
// hc_gallery :=  ;
54098: LD_ADDR_OWVAR 33
54102: PUSH
54103: LD_STRING 
54105: ST_TO_ADDR
// hc_name :=  ;
54106: LD_ADDR_OWVAR 26
54110: PUSH
54111: LD_STRING 
54113: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
54114: CALL_OW 44
54118: PPUSH
54119: LD_INT 0
54121: PPUSH
54122: CALL_OW 51
// end ;
54126: GO 54048
54128: POP
54129: POP
// end ;
54130: PPOPN 1
54132: END
// every 0 0$1 trigger StreamModeActive and sBomb do
54133: LD_EXP 40
54137: PUSH
54138: LD_EXP 60
54142: AND
54143: IFFALSE 54152
54145: GO 54147
54147: DISABLE
// StreamSibBomb ;
54148: CALL 54153 0 0
54152: END
// export function StreamSibBomb ; var i , x , y ; begin
54153: LD_INT 0
54155: PPUSH
54156: PPUSH
54157: PPUSH
54158: PPUSH
// result := false ;
54159: LD_ADDR_VAR 0 1
54163: PUSH
54164: LD_INT 0
54166: ST_TO_ADDR
// for i := 1 to 16 do
54167: LD_ADDR_VAR 0 2
54171: PUSH
54172: DOUBLE
54173: LD_INT 1
54175: DEC
54176: ST_TO_ADDR
54177: LD_INT 16
54179: PUSH
54180: FOR_TO
54181: IFFALSE 54380
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
54183: LD_ADDR_VAR 0 3
54187: PUSH
54188: LD_INT 10
54190: PUSH
54191: LD_INT 20
54193: PUSH
54194: LD_INT 30
54196: PUSH
54197: LD_INT 40
54199: PUSH
54200: LD_INT 50
54202: PUSH
54203: LD_INT 60
54205: PUSH
54206: LD_INT 70
54208: PUSH
54209: LD_INT 80
54211: PUSH
54212: LD_INT 90
54214: PUSH
54215: LD_INT 100
54217: PUSH
54218: LD_INT 110
54220: PUSH
54221: LD_INT 120
54223: PUSH
54224: LD_INT 130
54226: PUSH
54227: LD_INT 140
54229: PUSH
54230: LD_INT 150
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 1
54252: PPUSH
54253: LD_INT 15
54255: PPUSH
54256: CALL_OW 12
54260: ARRAY
54261: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
54262: LD_ADDR_VAR 0 4
54266: PUSH
54267: LD_INT 10
54269: PUSH
54270: LD_INT 20
54272: PUSH
54273: LD_INT 30
54275: PUSH
54276: LD_INT 40
54278: PUSH
54279: LD_INT 50
54281: PUSH
54282: LD_INT 60
54284: PUSH
54285: LD_INT 70
54287: PUSH
54288: LD_INT 80
54290: PUSH
54291: LD_INT 90
54293: PUSH
54294: LD_INT 100
54296: PUSH
54297: LD_INT 110
54299: PUSH
54300: LD_INT 120
54302: PUSH
54303: LD_INT 130
54305: PUSH
54306: LD_INT 140
54308: PUSH
54309: LD_INT 150
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 1
54331: PPUSH
54332: LD_INT 15
54334: PPUSH
54335: CALL_OW 12
54339: ARRAY
54340: ST_TO_ADDR
// if ValidHex ( x , y ) then
54341: LD_VAR 0 3
54345: PPUSH
54346: LD_VAR 0 4
54350: PPUSH
54351: CALL_OW 488
54355: IFFALSE 54378
// begin result := [ x , y ] ;
54357: LD_ADDR_VAR 0 1
54361: PUSH
54362: LD_VAR 0 3
54366: PUSH
54367: LD_VAR 0 4
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: ST_TO_ADDR
// break ;
54376: GO 54380
// end ; end ;
54378: GO 54180
54380: POP
54381: POP
// if result then
54382: LD_VAR 0 1
54386: IFFALSE 54446
// begin ToLua ( playSibBomb() ) ;
54388: LD_STRING playSibBomb()
54390: PPUSH
54391: CALL_OW 559
// wait ( 0 0$14 ) ;
54395: LD_INT 490
54397: PPUSH
54398: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
54402: LD_VAR 0 1
54406: PUSH
54407: LD_INT 1
54409: ARRAY
54410: PPUSH
54411: LD_VAR 0 1
54415: PUSH
54416: LD_INT 2
54418: ARRAY
54419: PPUSH
54420: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
54424: LD_VAR 0 1
54428: PUSH
54429: LD_INT 1
54431: ARRAY
54432: PPUSH
54433: LD_VAR 0 1
54437: PUSH
54438: LD_INT 2
54440: ARRAY
54441: PPUSH
54442: CALL_OW 429
// end ; end ;
54446: LD_VAR 0 1
54450: RET
// every 0 0$1 trigger StreamModeActive and sReset do
54451: LD_EXP 40
54455: PUSH
54456: LD_EXP 62
54460: AND
54461: IFFALSE 54473
54463: GO 54465
54465: DISABLE
// YouLost (  ) ;
54466: LD_STRING 
54468: PPUSH
54469: CALL_OW 104
54473: END
// every 0 0$1 trigger StreamModeActive and sFog do
54474: LD_EXP 40
54478: PUSH
54479: LD_EXP 61
54483: AND
54484: IFFALSE 54498
54486: GO 54488
54488: DISABLE
// FogOff ( your_side ) ;
54489: LD_OWVAR 2
54493: PPUSH
54494: CALL_OW 344
54498: END
// every 0 0$1 trigger StreamModeActive and sSun do
54499: LD_EXP 40
54503: PUSH
54504: LD_EXP 63
54508: AND
54509: IFFALSE 54537
54511: GO 54513
54513: DISABLE
// begin solar_recharge_percent := 0 ;
54514: LD_ADDR_OWVAR 79
54518: PUSH
54519: LD_INT 0
54521: ST_TO_ADDR
// wait ( 5 5$00 ) ;
54522: LD_INT 10500
54524: PPUSH
54525: CALL_OW 67
// solar_recharge_percent := 100 ;
54529: LD_ADDR_OWVAR 79
54533: PUSH
54534: LD_INT 100
54536: ST_TO_ADDR
// end ;
54537: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
54538: LD_EXP 40
54542: PUSH
54543: LD_EXP 64
54547: AND
54548: IFFALSE 54787
54550: GO 54552
54552: DISABLE
54553: LD_INT 0
54555: PPUSH
54556: PPUSH
54557: PPUSH
// begin tmp := [ ] ;
54558: LD_ADDR_VAR 0 3
54562: PUSH
54563: EMPTY
54564: ST_TO_ADDR
// for i := 1 to 6 do
54565: LD_ADDR_VAR 0 1
54569: PUSH
54570: DOUBLE
54571: LD_INT 1
54573: DEC
54574: ST_TO_ADDR
54575: LD_INT 6
54577: PUSH
54578: FOR_TO
54579: IFFALSE 54684
// begin uc_nation := nation_nature ;
54581: LD_ADDR_OWVAR 21
54585: PUSH
54586: LD_INT 0
54588: ST_TO_ADDR
// uc_side := 0 ;
54589: LD_ADDR_OWVAR 20
54593: PUSH
54594: LD_INT 0
54596: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
54597: LD_ADDR_OWVAR 29
54601: PUSH
54602: LD_INT 12
54604: PUSH
54605: LD_INT 12
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: ST_TO_ADDR
// hc_agressivity := 20 ;
54612: LD_ADDR_OWVAR 35
54616: PUSH
54617: LD_INT 20
54619: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
54620: LD_ADDR_OWVAR 28
54624: PUSH
54625: LD_INT 17
54627: ST_TO_ADDR
// hc_gallery :=  ;
54628: LD_ADDR_OWVAR 33
54632: PUSH
54633: LD_STRING 
54635: ST_TO_ADDR
// hc_name :=  ;
54636: LD_ADDR_OWVAR 26
54640: PUSH
54641: LD_STRING 
54643: ST_TO_ADDR
// un := CreateHuman ;
54644: LD_ADDR_VAR 0 2
54648: PUSH
54649: CALL_OW 44
54653: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
54654: LD_VAR 0 2
54658: PPUSH
54659: LD_INT 1
54661: PPUSH
54662: CALL_OW 51
// tmp := tmp ^ un ;
54666: LD_ADDR_VAR 0 3
54670: PUSH
54671: LD_VAR 0 3
54675: PUSH
54676: LD_VAR 0 2
54680: ADD
54681: ST_TO_ADDR
// end ;
54682: GO 54578
54684: POP
54685: POP
// repeat wait ( 0 0$1 ) ;
54686: LD_INT 35
54688: PPUSH
54689: CALL_OW 67
// for un in tmp do
54693: LD_ADDR_VAR 0 2
54697: PUSH
54698: LD_VAR 0 3
54702: PUSH
54703: FOR_IN
54704: IFFALSE 54778
// begin if IsDead ( un ) then
54706: LD_VAR 0 2
54710: PPUSH
54711: CALL_OW 301
54715: IFFALSE 54735
// begin tmp := tmp diff un ;
54717: LD_ADDR_VAR 0 3
54721: PUSH
54722: LD_VAR 0 3
54726: PUSH
54727: LD_VAR 0 2
54731: DIFF
54732: ST_TO_ADDR
// continue ;
54733: GO 54703
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
54735: LD_VAR 0 2
54739: PPUSH
54740: LD_INT 3
54742: PUSH
54743: LD_INT 22
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PPUSH
54757: CALL_OW 69
54761: PPUSH
54762: LD_VAR 0 2
54766: PPUSH
54767: CALL_OW 74
54771: PPUSH
54772: CALL_OW 115
// end ;
54776: GO 54703
54778: POP
54779: POP
// until not tmp ;
54780: LD_VAR 0 3
54784: NOT
54785: IFFALSE 54686
// end ;
54787: PPOPN 3
54789: END
// every 0 0$1 trigger StreamModeActive and sTroll do
54790: LD_EXP 40
54794: PUSH
54795: LD_EXP 65
54799: AND
54800: IFFALSE 54854
54802: GO 54804
54804: DISABLE
// begin ToLua ( displayTroll(); ) ;
54805: LD_STRING displayTroll();
54807: PPUSH
54808: CALL_OW 559
// wait ( 3 3$00 ) ;
54812: LD_INT 6300
54814: PPUSH
54815: CALL_OW 67
// ToLua ( hideTroll(); ) ;
54819: LD_STRING hideTroll();
54821: PPUSH
54822: CALL_OW 559
// wait ( 1 1$00 ) ;
54826: LD_INT 2100
54828: PPUSH
54829: CALL_OW 67
// ToLua ( displayTroll(); ) ;
54833: LD_STRING displayTroll();
54835: PPUSH
54836: CALL_OW 559
// wait ( 1 1$00 ) ;
54840: LD_INT 2100
54842: PPUSH
54843: CALL_OW 67
// ToLua ( hideTroll(); ) ;
54847: LD_STRING hideTroll();
54849: PPUSH
54850: CALL_OW 559
// end ;
54854: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
54855: LD_EXP 40
54859: PUSH
54860: LD_EXP 66
54864: AND
54865: IFFALSE 54928
54867: GO 54869
54869: DISABLE
54870: LD_INT 0
54872: PPUSH
// begin p := 0 ;
54873: LD_ADDR_VAR 0 1
54877: PUSH
54878: LD_INT 0
54880: ST_TO_ADDR
// repeat game_speed := 1 ;
54881: LD_ADDR_OWVAR 65
54885: PUSH
54886: LD_INT 1
54888: ST_TO_ADDR
// wait ( 0 0$1 ) ;
54889: LD_INT 35
54891: PPUSH
54892: CALL_OW 67
// p := p + 1 ;
54896: LD_ADDR_VAR 0 1
54900: PUSH
54901: LD_VAR 0 1
54905: PUSH
54906: LD_INT 1
54908: PLUS
54909: ST_TO_ADDR
// until p >= 60 ;
54910: LD_VAR 0 1
54914: PUSH
54915: LD_INT 60
54917: GREATEREQUAL
54918: IFFALSE 54881
// game_speed := 4 ;
54920: LD_ADDR_OWVAR 65
54924: PUSH
54925: LD_INT 4
54927: ST_TO_ADDR
// end ;
54928: PPOPN 1
54930: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
54931: LD_EXP 40
54935: PUSH
54936: LD_EXP 67
54940: AND
54941: IFFALSE 55087
54943: GO 54945
54945: DISABLE
54946: LD_INT 0
54948: PPUSH
54949: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54950: LD_ADDR_VAR 0 1
54954: PUSH
54955: LD_INT 22
54957: PUSH
54958: LD_OWVAR 2
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 2
54969: PUSH
54970: LD_INT 30
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 30
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: LIST
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PPUSH
54999: CALL_OW 69
55003: ST_TO_ADDR
// if not depot then
55004: LD_VAR 0 1
55008: NOT
55009: IFFALSE 55013
// exit ;
55011: GO 55087
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
55013: LD_ADDR_VAR 0 2
55017: PUSH
55018: LD_VAR 0 1
55022: PUSH
55023: LD_INT 1
55025: PPUSH
55026: LD_VAR 0 1
55030: PPUSH
55031: CALL_OW 12
55035: ARRAY
55036: PPUSH
55037: CALL_OW 274
55041: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
55042: LD_VAR 0 2
55046: PPUSH
55047: LD_INT 1
55049: PPUSH
55050: LD_INT 0
55052: PPUSH
55053: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
55057: LD_VAR 0 2
55061: PPUSH
55062: LD_INT 2
55064: PPUSH
55065: LD_INT 0
55067: PPUSH
55068: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
55072: LD_VAR 0 2
55076: PPUSH
55077: LD_INT 3
55079: PPUSH
55080: LD_INT 0
55082: PPUSH
55083: CALL_OW 277
// end ;
55087: PPOPN 2
55089: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
55090: LD_EXP 40
55094: PUSH
55095: LD_EXP 68
55099: AND
55100: IFFALSE 55197
55102: GO 55104
55104: DISABLE
55105: LD_INT 0
55107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
55108: LD_ADDR_VAR 0 1
55112: PUSH
55113: LD_INT 22
55115: PUSH
55116: LD_OWVAR 2
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 21
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 3
55137: PUSH
55138: LD_INT 23
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: LIST
55156: PPUSH
55157: CALL_OW 69
55161: ST_TO_ADDR
// if not tmp then
55162: LD_VAR 0 1
55166: NOT
55167: IFFALSE 55171
// exit ;
55169: GO 55197
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
55171: LD_VAR 0 1
55175: PUSH
55176: LD_INT 1
55178: PPUSH
55179: LD_VAR 0 1
55183: PPUSH
55184: CALL_OW 12
55188: ARRAY
55189: PPUSH
55190: LD_INT 200
55192: PPUSH
55193: CALL_OW 234
// end ;
55197: PPOPN 1
55199: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
55200: LD_EXP 40
55204: PUSH
55205: LD_EXP 69
55209: AND
55210: IFFALSE 55289
55212: GO 55214
55214: DISABLE
55215: LD_INT 0
55217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
55218: LD_ADDR_VAR 0 1
55222: PUSH
55223: LD_INT 22
55225: PUSH
55226: LD_OWVAR 2
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 21
55237: PUSH
55238: LD_INT 2
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PPUSH
55249: CALL_OW 69
55253: ST_TO_ADDR
// if not tmp then
55254: LD_VAR 0 1
55258: NOT
55259: IFFALSE 55263
// exit ;
55261: GO 55289
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
55263: LD_VAR 0 1
55267: PUSH
55268: LD_INT 1
55270: PPUSH
55271: LD_VAR 0 1
55275: PPUSH
55276: CALL_OW 12
55280: ARRAY
55281: PPUSH
55282: LD_INT 60
55284: PPUSH
55285: CALL_OW 234
// end ;
55289: PPOPN 1
55291: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
55292: LD_EXP 40
55296: PUSH
55297: LD_EXP 70
55301: AND
55302: IFFALSE 55401
55304: GO 55306
55306: DISABLE
55307: LD_INT 0
55309: PPUSH
55310: PPUSH
// begin enable ;
55311: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
55312: LD_ADDR_VAR 0 1
55316: PUSH
55317: LD_INT 22
55319: PUSH
55320: LD_OWVAR 2
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 61
55331: PUSH
55332: EMPTY
55333: LIST
55334: PUSH
55335: LD_INT 33
55337: PUSH
55338: LD_INT 2
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: LIST
55349: PPUSH
55350: CALL_OW 69
55354: ST_TO_ADDR
// if not tmp then
55355: LD_VAR 0 1
55359: NOT
55360: IFFALSE 55364
// exit ;
55362: GO 55401
// for i in tmp do
55364: LD_ADDR_VAR 0 2
55368: PUSH
55369: LD_VAR 0 1
55373: PUSH
55374: FOR_IN
55375: IFFALSE 55399
// if IsControledBy ( i ) then
55377: LD_VAR 0 2
55381: PPUSH
55382: CALL_OW 312
55386: IFFALSE 55397
// ComUnlink ( i ) ;
55388: LD_VAR 0 2
55392: PPUSH
55393: CALL_OW 136
55397: GO 55374
55399: POP
55400: POP
// end ;
55401: PPOPN 2
55403: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
55404: LD_EXP 40
55408: PUSH
55409: LD_EXP 71
55413: AND
55414: IFFALSE 55554
55416: GO 55418
55418: DISABLE
55419: LD_INT 0
55421: PPUSH
55422: PPUSH
// begin ToLua ( displayPowell(); ) ;
55423: LD_STRING displayPowell();
55425: PPUSH
55426: CALL_OW 559
// uc_side := 0 ;
55430: LD_ADDR_OWVAR 20
55434: PUSH
55435: LD_INT 0
55437: ST_TO_ADDR
// uc_nation := 2 ;
55438: LD_ADDR_OWVAR 21
55442: PUSH
55443: LD_INT 2
55445: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
55446: LD_ADDR_OWVAR 37
55450: PUSH
55451: LD_INT 14
55453: ST_TO_ADDR
// vc_engine := engine_siberite ;
55454: LD_ADDR_OWVAR 39
55458: PUSH
55459: LD_INT 3
55461: ST_TO_ADDR
// vc_control := control_apeman ;
55462: LD_ADDR_OWVAR 38
55466: PUSH
55467: LD_INT 5
55469: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
55470: LD_ADDR_OWVAR 40
55474: PUSH
55475: LD_INT 29
55477: ST_TO_ADDR
// un := CreateVehicle ;
55478: LD_ADDR_VAR 0 2
55482: PUSH
55483: CALL_OW 45
55487: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55488: LD_VAR 0 2
55492: PPUSH
55493: LD_INT 1
55495: PPUSH
55496: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
55500: LD_INT 35
55502: PPUSH
55503: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
55507: LD_VAR 0 2
55511: PPUSH
55512: LD_INT 22
55514: PUSH
55515: LD_OWVAR 2
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PPUSH
55524: CALL_OW 69
55528: PPUSH
55529: LD_VAR 0 2
55533: PPUSH
55534: CALL_OW 74
55538: PPUSH
55539: CALL_OW 115
// until IsDead ( un ) ;
55543: LD_VAR 0 2
55547: PPUSH
55548: CALL_OW 301
55552: IFFALSE 55500
// end ;
55554: PPOPN 2
55556: END
// every 0 0$1 trigger StreamModeActive and sStu do
55557: LD_EXP 40
55561: PUSH
55562: LD_EXP 79
55566: AND
55567: IFFALSE 55583
55569: GO 55571
55571: DISABLE
// begin ToLua ( displayStucuk(); ) ;
55572: LD_STRING displayStucuk();
55574: PPUSH
55575: CALL_OW 559
// ResetFog ;
55579: CALL_OW 335
// end ;
55583: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
55584: LD_EXP 40
55588: PUSH
55589: LD_EXP 72
55593: AND
55594: IFFALSE 55735
55596: GO 55598
55598: DISABLE
55599: LD_INT 0
55601: PPUSH
55602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55603: LD_ADDR_VAR 0 2
55607: PUSH
55608: LD_INT 22
55610: PUSH
55611: LD_OWVAR 2
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 21
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PPUSH
55634: CALL_OW 69
55638: ST_TO_ADDR
// if not tmp then
55639: LD_VAR 0 2
55643: NOT
55644: IFFALSE 55648
// exit ;
55646: GO 55735
// un := tmp [ rand ( 1 , tmp ) ] ;
55648: LD_ADDR_VAR 0 1
55652: PUSH
55653: LD_VAR 0 2
55657: PUSH
55658: LD_INT 1
55660: PPUSH
55661: LD_VAR 0 2
55665: PPUSH
55666: CALL_OW 12
55670: ARRAY
55671: ST_TO_ADDR
// SetSide ( un , 0 ) ;
55672: LD_VAR 0 1
55676: PPUSH
55677: LD_INT 0
55679: PPUSH
55680: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
55684: LD_VAR 0 1
55688: PPUSH
55689: LD_OWVAR 3
55693: PUSH
55694: LD_VAR 0 1
55698: DIFF
55699: PPUSH
55700: LD_VAR 0 1
55704: PPUSH
55705: CALL_OW 74
55709: PPUSH
55710: CALL_OW 115
// wait ( 0 0$20 ) ;
55714: LD_INT 700
55716: PPUSH
55717: CALL_OW 67
// SetSide ( un , your_side ) ;
55721: LD_VAR 0 1
55725: PPUSH
55726: LD_OWVAR 2
55730: PPUSH
55731: CALL_OW 235
// end ;
55735: PPOPN 2
55737: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
55738: LD_EXP 40
55742: PUSH
55743: LD_EXP 73
55747: AND
55748: IFFALSE 55854
55750: GO 55752
55752: DISABLE
55753: LD_INT 0
55755: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55756: LD_ADDR_VAR 0 1
55760: PUSH
55761: LD_INT 22
55763: PUSH
55764: LD_OWVAR 2
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 2
55775: PUSH
55776: LD_INT 30
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 30
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: LIST
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PPUSH
55805: CALL_OW 69
55809: ST_TO_ADDR
// if not depot then
55810: LD_VAR 0 1
55814: NOT
55815: IFFALSE 55819
// exit ;
55817: GO 55854
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
55819: LD_VAR 0 1
55823: PUSH
55824: LD_INT 1
55826: ARRAY
55827: PPUSH
55828: CALL_OW 250
55832: PPUSH
55833: LD_VAR 0 1
55837: PUSH
55838: LD_INT 1
55840: ARRAY
55841: PPUSH
55842: CALL_OW 251
55846: PPUSH
55847: LD_INT 70
55849: PPUSH
55850: CALL_OW 495
// end ;
55854: PPOPN 1
55856: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
55857: LD_EXP 40
55861: PUSH
55862: LD_EXP 74
55866: AND
55867: IFFALSE 56078
55869: GO 55871
55871: DISABLE
55872: LD_INT 0
55874: PPUSH
55875: PPUSH
55876: PPUSH
55877: PPUSH
55878: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55879: LD_ADDR_VAR 0 5
55883: PUSH
55884: LD_INT 22
55886: PUSH
55887: LD_OWVAR 2
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 21
55898: PUSH
55899: LD_INT 1
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PPUSH
55910: CALL_OW 69
55914: ST_TO_ADDR
// if not tmp then
55915: LD_VAR 0 5
55919: NOT
55920: IFFALSE 55924
// exit ;
55922: GO 56078
// for i in tmp do
55924: LD_ADDR_VAR 0 1
55928: PUSH
55929: LD_VAR 0 5
55933: PUSH
55934: FOR_IN
55935: IFFALSE 56076
// begin d := rand ( 0 , 5 ) ;
55937: LD_ADDR_VAR 0 4
55941: PUSH
55942: LD_INT 0
55944: PPUSH
55945: LD_INT 5
55947: PPUSH
55948: CALL_OW 12
55952: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
55953: LD_ADDR_VAR 0 2
55957: PUSH
55958: LD_VAR 0 1
55962: PPUSH
55963: CALL_OW 250
55967: PPUSH
55968: LD_VAR 0 4
55972: PPUSH
55973: LD_INT 3
55975: PPUSH
55976: LD_INT 12
55978: PPUSH
55979: CALL_OW 12
55983: PPUSH
55984: CALL_OW 272
55988: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
55989: LD_ADDR_VAR 0 3
55993: PUSH
55994: LD_VAR 0 1
55998: PPUSH
55999: CALL_OW 251
56003: PPUSH
56004: LD_VAR 0 4
56008: PPUSH
56009: LD_INT 3
56011: PPUSH
56012: LD_INT 12
56014: PPUSH
56015: CALL_OW 12
56019: PPUSH
56020: CALL_OW 273
56024: ST_TO_ADDR
// if ValidHex ( x , y ) then
56025: LD_VAR 0 2
56029: PPUSH
56030: LD_VAR 0 3
56034: PPUSH
56035: CALL_OW 488
56039: IFFALSE 56074
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
56041: LD_VAR 0 1
56045: PPUSH
56046: LD_VAR 0 2
56050: PPUSH
56051: LD_VAR 0 3
56055: PPUSH
56056: LD_INT 3
56058: PPUSH
56059: LD_INT 6
56061: PPUSH
56062: CALL_OW 12
56066: PPUSH
56067: LD_INT 1
56069: PPUSH
56070: CALL_OW 483
// end ;
56074: GO 55934
56076: POP
56077: POP
// end ;
56078: PPOPN 5
56080: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
56081: LD_EXP 40
56085: PUSH
56086: LD_EXP 75
56090: AND
56091: IFFALSE 56185
56093: GO 56095
56095: DISABLE
56096: LD_INT 0
56098: PPUSH
56099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
56100: LD_ADDR_VAR 0 2
56104: PUSH
56105: LD_INT 22
56107: PUSH
56108: LD_OWVAR 2
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 32
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 21
56129: PUSH
56130: LD_INT 2
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: LIST
56141: PPUSH
56142: CALL_OW 69
56146: ST_TO_ADDR
// if not tmp then
56147: LD_VAR 0 2
56151: NOT
56152: IFFALSE 56156
// exit ;
56154: GO 56185
// for i in tmp do
56156: LD_ADDR_VAR 0 1
56160: PUSH
56161: LD_VAR 0 2
56165: PUSH
56166: FOR_IN
56167: IFFALSE 56183
// SetFuel ( i , 0 ) ;
56169: LD_VAR 0 1
56173: PPUSH
56174: LD_INT 0
56176: PPUSH
56177: CALL_OW 240
56181: GO 56166
56183: POP
56184: POP
// end ;
56185: PPOPN 2
56187: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
56188: LD_EXP 40
56192: PUSH
56193: LD_EXP 76
56197: AND
56198: IFFALSE 56264
56200: GO 56202
56202: DISABLE
56203: LD_INT 0
56205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
56206: LD_ADDR_VAR 0 1
56210: PUSH
56211: LD_INT 22
56213: PUSH
56214: LD_OWVAR 2
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 30
56225: PUSH
56226: LD_INT 29
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PPUSH
56237: CALL_OW 69
56241: ST_TO_ADDR
// if not tmp then
56242: LD_VAR 0 1
56246: NOT
56247: IFFALSE 56251
// exit ;
56249: GO 56264
// DestroyUnit ( tmp [ 1 ] ) ;
56251: LD_VAR 0 1
56255: PUSH
56256: LD_INT 1
56258: ARRAY
56259: PPUSH
56260: CALL_OW 65
// end ;
56264: PPOPN 1
56266: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
56267: LD_EXP 40
56271: PUSH
56272: LD_EXP 78
56276: AND
56277: IFFALSE 56406
56279: GO 56281
56281: DISABLE
56282: LD_INT 0
56284: PPUSH
// begin uc_side := 0 ;
56285: LD_ADDR_OWVAR 20
56289: PUSH
56290: LD_INT 0
56292: ST_TO_ADDR
// uc_nation := nation_arabian ;
56293: LD_ADDR_OWVAR 21
56297: PUSH
56298: LD_INT 2
56300: ST_TO_ADDR
// hc_gallery :=  ;
56301: LD_ADDR_OWVAR 33
56305: PUSH
56306: LD_STRING 
56308: ST_TO_ADDR
// hc_name :=  ;
56309: LD_ADDR_OWVAR 26
56313: PUSH
56314: LD_STRING 
56316: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
56317: LD_INT 1
56319: PPUSH
56320: LD_INT 11
56322: PPUSH
56323: LD_INT 10
56325: PPUSH
56326: CALL_OW 380
// un := CreateHuman ;
56330: LD_ADDR_VAR 0 1
56334: PUSH
56335: CALL_OW 44
56339: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56340: LD_VAR 0 1
56344: PPUSH
56345: LD_INT 1
56347: PPUSH
56348: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
56352: LD_INT 35
56354: PPUSH
56355: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
56359: LD_VAR 0 1
56363: PPUSH
56364: LD_INT 22
56366: PUSH
56367: LD_OWVAR 2
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PPUSH
56376: CALL_OW 69
56380: PPUSH
56381: LD_VAR 0 1
56385: PPUSH
56386: CALL_OW 74
56390: PPUSH
56391: CALL_OW 115
// until IsDead ( un ) ;
56395: LD_VAR 0 1
56399: PPUSH
56400: CALL_OW 301
56404: IFFALSE 56352
// end ;
56406: PPOPN 1
56408: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
56409: LD_EXP 40
56413: PUSH
56414: LD_EXP 80
56418: AND
56419: IFFALSE 56431
56421: GO 56423
56423: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
56424: LD_STRING earthquake(getX(game), 0, 32)
56426: PPUSH
56427: CALL_OW 559
56431: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
56432: LD_EXP 40
56436: PUSH
56437: LD_EXP 81
56441: AND
56442: IFFALSE 56533
56444: GO 56446
56446: DISABLE
56447: LD_INT 0
56449: PPUSH
// begin enable ;
56450: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
56451: LD_ADDR_VAR 0 1
56455: PUSH
56456: LD_INT 22
56458: PUSH
56459: LD_OWVAR 2
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 21
56470: PUSH
56471: LD_INT 2
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 33
56480: PUSH
56481: LD_INT 3
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: LIST
56492: PPUSH
56493: CALL_OW 69
56497: ST_TO_ADDR
// if not tmp then
56498: LD_VAR 0 1
56502: NOT
56503: IFFALSE 56507
// exit ;
56505: GO 56533
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
56507: LD_VAR 0 1
56511: PUSH
56512: LD_INT 1
56514: PPUSH
56515: LD_VAR 0 1
56519: PPUSH
56520: CALL_OW 12
56524: ARRAY
56525: PPUSH
56526: LD_INT 1
56528: PPUSH
56529: CALL_OW 234
// end ;
56533: PPOPN 1
56535: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
56536: LD_EXP 40
56540: PUSH
56541: LD_EXP 82
56545: AND
56546: IFFALSE 56687
56548: GO 56550
56550: DISABLE
56551: LD_INT 0
56553: PPUSH
56554: PPUSH
56555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56556: LD_ADDR_VAR 0 3
56560: PUSH
56561: LD_INT 22
56563: PUSH
56564: LD_OWVAR 2
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 25
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PPUSH
56587: CALL_OW 69
56591: ST_TO_ADDR
// if not tmp then
56592: LD_VAR 0 3
56596: NOT
56597: IFFALSE 56601
// exit ;
56599: GO 56687
// un := tmp [ rand ( 1 , tmp ) ] ;
56601: LD_ADDR_VAR 0 2
56605: PUSH
56606: LD_VAR 0 3
56610: PUSH
56611: LD_INT 1
56613: PPUSH
56614: LD_VAR 0 3
56618: PPUSH
56619: CALL_OW 12
56623: ARRAY
56624: ST_TO_ADDR
// if Crawls ( un ) then
56625: LD_VAR 0 2
56629: PPUSH
56630: CALL_OW 318
56634: IFFALSE 56645
// ComWalk ( un ) ;
56636: LD_VAR 0 2
56640: PPUSH
56641: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
56645: LD_VAR 0 2
56649: PPUSH
56650: LD_INT 9
56652: PPUSH
56653: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
56657: LD_INT 28
56659: PPUSH
56660: LD_OWVAR 2
56664: PPUSH
56665: LD_INT 2
56667: PPUSH
56668: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
56672: LD_INT 29
56674: PPUSH
56675: LD_OWVAR 2
56679: PPUSH
56680: LD_INT 2
56682: PPUSH
56683: CALL_OW 322
// end ;
56687: PPOPN 3
56689: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
56690: LD_EXP 40
56694: PUSH
56695: LD_EXP 83
56699: AND
56700: IFFALSE 56811
56702: GO 56704
56704: DISABLE
56705: LD_INT 0
56707: PPUSH
56708: PPUSH
56709: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56710: LD_ADDR_VAR 0 3
56714: PUSH
56715: LD_INT 22
56717: PUSH
56718: LD_OWVAR 2
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 25
56729: PUSH
56730: LD_INT 1
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PPUSH
56741: CALL_OW 69
56745: ST_TO_ADDR
// if not tmp then
56746: LD_VAR 0 3
56750: NOT
56751: IFFALSE 56755
// exit ;
56753: GO 56811
// un := tmp [ rand ( 1 , tmp ) ] ;
56755: LD_ADDR_VAR 0 2
56759: PUSH
56760: LD_VAR 0 3
56764: PUSH
56765: LD_INT 1
56767: PPUSH
56768: LD_VAR 0 3
56772: PPUSH
56773: CALL_OW 12
56777: ARRAY
56778: ST_TO_ADDR
// if Crawls ( un ) then
56779: LD_VAR 0 2
56783: PPUSH
56784: CALL_OW 318
56788: IFFALSE 56799
// ComWalk ( un ) ;
56790: LD_VAR 0 2
56794: PPUSH
56795: CALL_OW 138
// SetClass ( un , class_mortar ) ;
56799: LD_VAR 0 2
56803: PPUSH
56804: LD_INT 8
56806: PPUSH
56807: CALL_OW 336
// end ;
56811: PPOPN 3
56813: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
56814: LD_EXP 40
56818: PUSH
56819: LD_EXP 84
56823: AND
56824: IFFALSE 56968
56826: GO 56828
56828: DISABLE
56829: LD_INT 0
56831: PPUSH
56832: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
56833: LD_ADDR_VAR 0 2
56837: PUSH
56838: LD_INT 22
56840: PUSH
56841: LD_OWVAR 2
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 21
56852: PUSH
56853: LD_INT 2
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 2
56862: PUSH
56863: LD_INT 34
56865: PUSH
56866: LD_INT 12
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 34
56875: PUSH
56876: LD_INT 51
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 34
56885: PUSH
56886: LD_INT 32
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: LIST
56903: PPUSH
56904: CALL_OW 69
56908: ST_TO_ADDR
// if not tmp then
56909: LD_VAR 0 2
56913: NOT
56914: IFFALSE 56918
// exit ;
56916: GO 56968
// for i in tmp do
56918: LD_ADDR_VAR 0 1
56922: PUSH
56923: LD_VAR 0 2
56927: PUSH
56928: FOR_IN
56929: IFFALSE 56966
// if GetCargo ( i , mat_artifact ) = 0 then
56931: LD_VAR 0 1
56935: PPUSH
56936: LD_INT 4
56938: PPUSH
56939: CALL_OW 289
56943: PUSH
56944: LD_INT 0
56946: EQUAL
56947: IFFALSE 56964
// SetCargo ( i , mat_siberit , 100 ) ;
56949: LD_VAR 0 1
56953: PPUSH
56954: LD_INT 3
56956: PPUSH
56957: LD_INT 100
56959: PPUSH
56960: CALL_OW 290
56964: GO 56928
56966: POP
56967: POP
// end ;
56968: PPOPN 2
56970: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
56971: LD_EXP 40
56975: PUSH
56976: LD_EXP 85
56980: AND
56981: IFFALSE 57164
56983: GO 56985
56985: DISABLE
56986: LD_INT 0
56988: PPUSH
56989: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
56990: LD_ADDR_VAR 0 2
56994: PUSH
56995: LD_INT 22
56997: PUSH
56998: LD_OWVAR 2
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PPUSH
57007: CALL_OW 69
57011: ST_TO_ADDR
// if not tmp then
57012: LD_VAR 0 2
57016: NOT
57017: IFFALSE 57021
// exit ;
57019: GO 57164
// for i := 1 to 2 do
57021: LD_ADDR_VAR 0 1
57025: PUSH
57026: DOUBLE
57027: LD_INT 1
57029: DEC
57030: ST_TO_ADDR
57031: LD_INT 2
57033: PUSH
57034: FOR_TO
57035: IFFALSE 57162
// begin uc_side := your_side ;
57037: LD_ADDR_OWVAR 20
57041: PUSH
57042: LD_OWVAR 2
57046: ST_TO_ADDR
// uc_nation := nation_american ;
57047: LD_ADDR_OWVAR 21
57051: PUSH
57052: LD_INT 1
57054: ST_TO_ADDR
// vc_chassis := us_morphling ;
57055: LD_ADDR_OWVAR 37
57059: PUSH
57060: LD_INT 5
57062: ST_TO_ADDR
// vc_engine := engine_siberite ;
57063: LD_ADDR_OWVAR 39
57067: PUSH
57068: LD_INT 3
57070: ST_TO_ADDR
// vc_control := control_computer ;
57071: LD_ADDR_OWVAR 38
57075: PUSH
57076: LD_INT 3
57078: ST_TO_ADDR
// vc_weapon := us_double_laser ;
57079: LD_ADDR_OWVAR 40
57083: PUSH
57084: LD_INT 10
57086: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
57087: LD_VAR 0 2
57091: PUSH
57092: LD_INT 1
57094: ARRAY
57095: PPUSH
57096: CALL_OW 310
57100: NOT
57101: IFFALSE 57148
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
57103: CALL_OW 45
57107: PPUSH
57108: LD_VAR 0 2
57112: PUSH
57113: LD_INT 1
57115: ARRAY
57116: PPUSH
57117: CALL_OW 250
57121: PPUSH
57122: LD_VAR 0 2
57126: PUSH
57127: LD_INT 1
57129: ARRAY
57130: PPUSH
57131: CALL_OW 251
57135: PPUSH
57136: LD_INT 12
57138: PPUSH
57139: LD_INT 1
57141: PPUSH
57142: CALL_OW 50
57146: GO 57160
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
57148: CALL_OW 45
57152: PPUSH
57153: LD_INT 1
57155: PPUSH
57156: CALL_OW 51
// end ;
57160: GO 57034
57162: POP
57163: POP
// end ;
57164: PPOPN 2
57166: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
57167: LD_EXP 40
57171: PUSH
57172: LD_EXP 86
57176: AND
57177: IFFALSE 57399
57179: GO 57181
57181: DISABLE
57182: LD_INT 0
57184: PPUSH
57185: PPUSH
57186: PPUSH
57187: PPUSH
57188: PPUSH
57189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57190: LD_ADDR_VAR 0 6
57194: PUSH
57195: LD_INT 22
57197: PUSH
57198: LD_OWVAR 2
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 21
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 3
57219: PUSH
57220: LD_INT 23
57222: PUSH
57223: LD_INT 0
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: LIST
57238: PPUSH
57239: CALL_OW 69
57243: ST_TO_ADDR
// if not tmp then
57244: LD_VAR 0 6
57248: NOT
57249: IFFALSE 57253
// exit ;
57251: GO 57399
// s1 := rand ( 1 , 4 ) ;
57253: LD_ADDR_VAR 0 2
57257: PUSH
57258: LD_INT 1
57260: PPUSH
57261: LD_INT 4
57263: PPUSH
57264: CALL_OW 12
57268: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
57269: LD_ADDR_VAR 0 4
57273: PUSH
57274: LD_VAR 0 6
57278: PUSH
57279: LD_INT 1
57281: ARRAY
57282: PPUSH
57283: LD_VAR 0 2
57287: PPUSH
57288: CALL_OW 259
57292: ST_TO_ADDR
// if s1 = 1 then
57293: LD_VAR 0 2
57297: PUSH
57298: LD_INT 1
57300: EQUAL
57301: IFFALSE 57321
// s2 := rand ( 2 , 4 ) else
57303: LD_ADDR_VAR 0 3
57307: PUSH
57308: LD_INT 2
57310: PPUSH
57311: LD_INT 4
57313: PPUSH
57314: CALL_OW 12
57318: ST_TO_ADDR
57319: GO 57329
// s2 := 1 ;
57321: LD_ADDR_VAR 0 3
57325: PUSH
57326: LD_INT 1
57328: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
57329: LD_ADDR_VAR 0 5
57333: PUSH
57334: LD_VAR 0 6
57338: PUSH
57339: LD_INT 1
57341: ARRAY
57342: PPUSH
57343: LD_VAR 0 3
57347: PPUSH
57348: CALL_OW 259
57352: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
57353: LD_VAR 0 6
57357: PUSH
57358: LD_INT 1
57360: ARRAY
57361: PPUSH
57362: LD_VAR 0 2
57366: PPUSH
57367: LD_VAR 0 5
57371: PPUSH
57372: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
57376: LD_VAR 0 6
57380: PUSH
57381: LD_INT 1
57383: ARRAY
57384: PPUSH
57385: LD_VAR 0 3
57389: PPUSH
57390: LD_VAR 0 4
57394: PPUSH
57395: CALL_OW 237
// end ;
57399: PPOPN 6
57401: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
57402: LD_EXP 40
57406: PUSH
57407: LD_EXP 87
57411: AND
57412: IFFALSE 57491
57414: GO 57416
57416: DISABLE
57417: LD_INT 0
57419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
57420: LD_ADDR_VAR 0 1
57424: PUSH
57425: LD_INT 22
57427: PUSH
57428: LD_OWVAR 2
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 30
57439: PUSH
57440: LD_INT 3
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PPUSH
57451: CALL_OW 69
57455: ST_TO_ADDR
// if not tmp then
57456: LD_VAR 0 1
57460: NOT
57461: IFFALSE 57465
// exit ;
57463: GO 57491
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
57465: LD_VAR 0 1
57469: PUSH
57470: LD_INT 1
57472: PPUSH
57473: LD_VAR 0 1
57477: PPUSH
57478: CALL_OW 12
57482: ARRAY
57483: PPUSH
57484: LD_INT 1
57486: PPUSH
57487: CALL_OW 234
// end ;
57491: PPOPN 1
57493: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
57494: LD_EXP 40
57498: PUSH
57499: LD_EXP 88
57503: AND
57504: IFFALSE 57616
57506: GO 57508
57508: DISABLE
57509: LD_INT 0
57511: PPUSH
57512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
57513: LD_ADDR_VAR 0 2
57517: PUSH
57518: LD_INT 22
57520: PUSH
57521: LD_OWVAR 2
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 2
57532: PUSH
57533: LD_INT 30
57535: PUSH
57536: LD_INT 27
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 30
57545: PUSH
57546: LD_INT 26
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 30
57555: PUSH
57556: LD_INT 28
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PPUSH
57573: CALL_OW 69
57577: ST_TO_ADDR
// if not tmp then
57578: LD_VAR 0 2
57582: NOT
57583: IFFALSE 57587
// exit ;
57585: GO 57616
// for i in tmp do
57587: LD_ADDR_VAR 0 1
57591: PUSH
57592: LD_VAR 0 2
57596: PUSH
57597: FOR_IN
57598: IFFALSE 57614
// SetLives ( i , 1 ) ;
57600: LD_VAR 0 1
57604: PPUSH
57605: LD_INT 1
57607: PPUSH
57608: CALL_OW 234
57612: GO 57597
57614: POP
57615: POP
// end ;
57616: PPOPN 2
57618: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
57619: LD_EXP 40
57623: PUSH
57624: LD_EXP 89
57628: AND
57629: IFFALSE 57916
57631: GO 57633
57633: DISABLE
57634: LD_INT 0
57636: PPUSH
57637: PPUSH
57638: PPUSH
// begin i := rand ( 1 , 7 ) ;
57639: LD_ADDR_VAR 0 1
57643: PUSH
57644: LD_INT 1
57646: PPUSH
57647: LD_INT 7
57649: PPUSH
57650: CALL_OW 12
57654: ST_TO_ADDR
// case i of 1 :
57655: LD_VAR 0 1
57659: PUSH
57660: LD_INT 1
57662: DOUBLE
57663: EQUAL
57664: IFTRUE 57668
57666: GO 57678
57668: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
57669: LD_STRING earthquake(getX(game), 0, 32)
57671: PPUSH
57672: CALL_OW 559
57676: GO 57916
57678: LD_INT 2
57680: DOUBLE
57681: EQUAL
57682: IFTRUE 57686
57684: GO 57700
57686: POP
// begin ToLua ( displayStucuk(); ) ;
57687: LD_STRING displayStucuk();
57689: PPUSH
57690: CALL_OW 559
// ResetFog ;
57694: CALL_OW 335
// end ; 3 :
57698: GO 57916
57700: LD_INT 3
57702: DOUBLE
57703: EQUAL
57704: IFTRUE 57708
57706: GO 57812
57708: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57709: LD_ADDR_VAR 0 2
57713: PUSH
57714: LD_INT 22
57716: PUSH
57717: LD_OWVAR 2
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 25
57728: PUSH
57729: LD_INT 1
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PPUSH
57740: CALL_OW 69
57744: ST_TO_ADDR
// if not tmp then
57745: LD_VAR 0 2
57749: NOT
57750: IFFALSE 57754
// exit ;
57752: GO 57916
// un := tmp [ rand ( 1 , tmp ) ] ;
57754: LD_ADDR_VAR 0 3
57758: PUSH
57759: LD_VAR 0 2
57763: PUSH
57764: LD_INT 1
57766: PPUSH
57767: LD_VAR 0 2
57771: PPUSH
57772: CALL_OW 12
57776: ARRAY
57777: ST_TO_ADDR
// if Crawls ( un ) then
57778: LD_VAR 0 3
57782: PPUSH
57783: CALL_OW 318
57787: IFFALSE 57798
// ComWalk ( un ) ;
57789: LD_VAR 0 3
57793: PPUSH
57794: CALL_OW 138
// SetClass ( un , class_mortar ) ;
57798: LD_VAR 0 3
57802: PPUSH
57803: LD_INT 8
57805: PPUSH
57806: CALL_OW 336
// end ; 4 :
57810: GO 57916
57812: LD_INT 4
57814: DOUBLE
57815: EQUAL
57816: IFTRUE 57820
57818: GO 57894
57820: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
57821: LD_ADDR_VAR 0 2
57825: PUSH
57826: LD_INT 22
57828: PUSH
57829: LD_OWVAR 2
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 30
57840: PUSH
57841: LD_INT 29
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PPUSH
57852: CALL_OW 69
57856: ST_TO_ADDR
// if not tmp then
57857: LD_VAR 0 2
57861: NOT
57862: IFFALSE 57866
// exit ;
57864: GO 57916
// CenterNowOnUnits ( tmp [ 1 ] ) ;
57866: LD_VAR 0 2
57870: PUSH
57871: LD_INT 1
57873: ARRAY
57874: PPUSH
57875: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
57879: LD_VAR 0 2
57883: PUSH
57884: LD_INT 1
57886: ARRAY
57887: PPUSH
57888: CALL_OW 65
// end ; 5 .. 7 :
57892: GO 57916
57894: LD_INT 5
57896: DOUBLE
57897: GREATEREQUAL
57898: IFFALSE 57906
57900: LD_INT 7
57902: DOUBLE
57903: LESSEQUAL
57904: IFTRUE 57908
57906: GO 57915
57908: POP
// StreamSibBomb ; end ;
57909: CALL 54153 0 0
57913: GO 57916
57915: POP
// end ;
57916: PPOPN 3
57918: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
57919: LD_EXP 40
57923: PUSH
57924: LD_EXP 90
57928: AND
57929: IFFALSE 58085
57931: GO 57933
57933: DISABLE
57934: LD_INT 0
57936: PPUSH
57937: PPUSH
57938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
57939: LD_ADDR_VAR 0 2
57943: PUSH
57944: LD_INT 81
57946: PUSH
57947: LD_OWVAR 2
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 2
57958: PUSH
57959: LD_INT 21
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 21
57971: PUSH
57972: LD_INT 2
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: LIST
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PPUSH
57988: CALL_OW 69
57992: ST_TO_ADDR
// if not tmp then
57993: LD_VAR 0 2
57997: NOT
57998: IFFALSE 58002
// exit ;
58000: GO 58085
// p := 0 ;
58002: LD_ADDR_VAR 0 3
58006: PUSH
58007: LD_INT 0
58009: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
58010: LD_INT 35
58012: PPUSH
58013: CALL_OW 67
// p := p + 1 ;
58017: LD_ADDR_VAR 0 3
58021: PUSH
58022: LD_VAR 0 3
58026: PUSH
58027: LD_INT 1
58029: PLUS
58030: ST_TO_ADDR
// for i in tmp do
58031: LD_ADDR_VAR 0 1
58035: PUSH
58036: LD_VAR 0 2
58040: PUSH
58041: FOR_IN
58042: IFFALSE 58073
// if GetLives ( i ) < 1000 then
58044: LD_VAR 0 1
58048: PPUSH
58049: CALL_OW 256
58053: PUSH
58054: LD_INT 1000
58056: LESS
58057: IFFALSE 58071
// SetLives ( i , 1000 ) ;
58059: LD_VAR 0 1
58063: PPUSH
58064: LD_INT 1000
58066: PPUSH
58067: CALL_OW 234
58071: GO 58041
58073: POP
58074: POP
// until p > 20 ;
58075: LD_VAR 0 3
58079: PUSH
58080: LD_INT 20
58082: GREATER
58083: IFFALSE 58010
// end ;
58085: PPOPN 3
58087: END
// every 0 0$1 trigger StreamModeActive and sTime do
58088: LD_EXP 40
58092: PUSH
58093: LD_EXP 91
58097: AND
58098: IFFALSE 58133
58100: GO 58102
58102: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
58103: LD_INT 28
58105: PPUSH
58106: LD_OWVAR 2
58110: PPUSH
58111: LD_INT 2
58113: PPUSH
58114: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
58118: LD_INT 30
58120: PPUSH
58121: LD_OWVAR 2
58125: PPUSH
58126: LD_INT 2
58128: PPUSH
58129: CALL_OW 322
// end ;
58133: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
58134: LD_EXP 40
58138: PUSH
58139: LD_EXP 92
58143: AND
58144: IFFALSE 58265
58146: GO 58148
58148: DISABLE
58149: LD_INT 0
58151: PPUSH
58152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58153: LD_ADDR_VAR 0 2
58157: PUSH
58158: LD_INT 22
58160: PUSH
58161: LD_OWVAR 2
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 21
58172: PUSH
58173: LD_INT 1
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 3
58182: PUSH
58183: LD_INT 23
58185: PUSH
58186: LD_INT 0
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: LIST
58201: PPUSH
58202: CALL_OW 69
58206: ST_TO_ADDR
// if not tmp then
58207: LD_VAR 0 2
58211: NOT
58212: IFFALSE 58216
// exit ;
58214: GO 58265
// for i in tmp do
58216: LD_ADDR_VAR 0 1
58220: PUSH
58221: LD_VAR 0 2
58225: PUSH
58226: FOR_IN
58227: IFFALSE 58263
// begin if Crawls ( i ) then
58229: LD_VAR 0 1
58233: PPUSH
58234: CALL_OW 318
58238: IFFALSE 58249
// ComWalk ( i ) ;
58240: LD_VAR 0 1
58244: PPUSH
58245: CALL_OW 138
// SetClass ( i , 2 ) ;
58249: LD_VAR 0 1
58253: PPUSH
58254: LD_INT 2
58256: PPUSH
58257: CALL_OW 336
// end ;
58261: GO 58226
58263: POP
58264: POP
// end ;
58265: PPOPN 2
58267: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
58268: LD_EXP 40
58272: PUSH
58273: LD_EXP 93
58277: AND
58278: IFFALSE 58566
58280: GO 58282
58282: DISABLE
58283: LD_INT 0
58285: PPUSH
58286: PPUSH
58287: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
58288: LD_OWVAR 2
58292: PPUSH
58293: LD_INT 9
58295: PPUSH
58296: LD_INT 1
58298: PPUSH
58299: LD_INT 1
58301: PPUSH
58302: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
58306: LD_INT 9
58308: PPUSH
58309: LD_OWVAR 2
58313: PPUSH
58314: CALL_OW 343
// uc_side := 9 ;
58318: LD_ADDR_OWVAR 20
58322: PUSH
58323: LD_INT 9
58325: ST_TO_ADDR
// uc_nation := 2 ;
58326: LD_ADDR_OWVAR 21
58330: PUSH
58331: LD_INT 2
58333: ST_TO_ADDR
// hc_name := Dark Warrior ;
58334: LD_ADDR_OWVAR 26
58338: PUSH
58339: LD_STRING Dark Warrior
58341: ST_TO_ADDR
// hc_gallery :=  ;
58342: LD_ADDR_OWVAR 33
58346: PUSH
58347: LD_STRING 
58349: ST_TO_ADDR
// hc_noskilllimit := true ;
58350: LD_ADDR_OWVAR 76
58354: PUSH
58355: LD_INT 1
58357: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
58358: LD_ADDR_OWVAR 31
58362: PUSH
58363: LD_INT 30
58365: PUSH
58366: LD_INT 30
58368: PUSH
58369: LD_INT 30
58371: PUSH
58372: LD_INT 30
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: ST_TO_ADDR
// un := CreateHuman ;
58381: LD_ADDR_VAR 0 3
58385: PUSH
58386: CALL_OW 44
58390: ST_TO_ADDR
// hc_noskilllimit := false ;
58391: LD_ADDR_OWVAR 76
58395: PUSH
58396: LD_INT 0
58398: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58399: LD_VAR 0 3
58403: PPUSH
58404: LD_INT 1
58406: PPUSH
58407: CALL_OW 51
// ToLua ( playRanger() ) ;
58411: LD_STRING playRanger()
58413: PPUSH
58414: CALL_OW 559
// p := 0 ;
58418: LD_ADDR_VAR 0 2
58422: PUSH
58423: LD_INT 0
58425: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
58426: LD_INT 35
58428: PPUSH
58429: CALL_OW 67
// p := p + 1 ;
58433: LD_ADDR_VAR 0 2
58437: PUSH
58438: LD_VAR 0 2
58442: PUSH
58443: LD_INT 1
58445: PLUS
58446: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
58447: LD_VAR 0 3
58451: PPUSH
58452: CALL_OW 256
58456: PUSH
58457: LD_INT 1000
58459: LESS
58460: IFFALSE 58474
// SetLives ( un , 1000 ) ;
58462: LD_VAR 0 3
58466: PPUSH
58467: LD_INT 1000
58469: PPUSH
58470: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
58474: LD_VAR 0 3
58478: PPUSH
58479: LD_INT 81
58481: PUSH
58482: LD_OWVAR 2
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 91
58493: PUSH
58494: LD_VAR 0 3
58498: PUSH
58499: LD_INT 30
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: LIST
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PPUSH
58511: CALL_OW 69
58515: PPUSH
58516: LD_VAR 0 3
58520: PPUSH
58521: CALL_OW 74
58525: PPUSH
58526: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
58530: LD_VAR 0 2
58534: PUSH
58535: LD_INT 80
58537: GREATER
58538: PUSH
58539: LD_VAR 0 3
58543: PPUSH
58544: CALL_OW 301
58548: OR
58549: IFFALSE 58426
// if un then
58551: LD_VAR 0 3
58555: IFFALSE 58566
// RemoveUnit ( un ) ;
58557: LD_VAR 0 3
58561: PPUSH
58562: CALL_OW 64
// end ;
58566: PPOPN 3
58568: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
58569: LD_EXP 94
58573: IFFALSE 58689
58575: GO 58577
58577: DISABLE
58578: LD_INT 0
58580: PPUSH
58581: PPUSH
58582: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
58583: LD_ADDR_VAR 0 2
58587: PUSH
58588: LD_INT 81
58590: PUSH
58591: LD_OWVAR 2
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 21
58602: PUSH
58603: LD_INT 1
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PPUSH
58614: CALL_OW 69
58618: ST_TO_ADDR
// ToLua ( playComputer() ) ;
58619: LD_STRING playComputer()
58621: PPUSH
58622: CALL_OW 559
// if not tmp then
58626: LD_VAR 0 2
58630: NOT
58631: IFFALSE 58635
// exit ;
58633: GO 58689
// for i in tmp do
58635: LD_ADDR_VAR 0 1
58639: PUSH
58640: LD_VAR 0 2
58644: PUSH
58645: FOR_IN
58646: IFFALSE 58687
// for j := 1 to 4 do
58648: LD_ADDR_VAR 0 3
58652: PUSH
58653: DOUBLE
58654: LD_INT 1
58656: DEC
58657: ST_TO_ADDR
58658: LD_INT 4
58660: PUSH
58661: FOR_TO
58662: IFFALSE 58683
// SetSkill ( i , j , 10 ) ;
58664: LD_VAR 0 1
58668: PPUSH
58669: LD_VAR 0 3
58673: PPUSH
58674: LD_INT 10
58676: PPUSH
58677: CALL_OW 237
58681: GO 58661
58683: POP
58684: POP
58685: GO 58645
58687: POP
58688: POP
// end ;
58689: PPOPN 3
58691: END
// every 0 0$1 trigger s30 do var i , tmp ;
58692: LD_EXP 95
58696: IFFALSE 58765
58698: GO 58700
58700: DISABLE
58701: LD_INT 0
58703: PPUSH
58704: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58705: LD_ADDR_VAR 0 2
58709: PUSH
58710: LD_INT 22
58712: PUSH
58713: LD_OWVAR 2
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PPUSH
58722: CALL_OW 69
58726: ST_TO_ADDR
// if not tmp then
58727: LD_VAR 0 2
58731: NOT
58732: IFFALSE 58736
// exit ;
58734: GO 58765
// for i in tmp do
58736: LD_ADDR_VAR 0 1
58740: PUSH
58741: LD_VAR 0 2
58745: PUSH
58746: FOR_IN
58747: IFFALSE 58763
// SetLives ( i , 300 ) ;
58749: LD_VAR 0 1
58753: PPUSH
58754: LD_INT 300
58756: PPUSH
58757: CALL_OW 234
58761: GO 58746
58763: POP
58764: POP
// end ;
58765: PPOPN 2
58767: END
// every 0 0$1 trigger s60 do var i , tmp ;
58768: LD_EXP 96
58772: IFFALSE 58841
58774: GO 58776
58776: DISABLE
58777: LD_INT 0
58779: PPUSH
58780: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58781: LD_ADDR_VAR 0 2
58785: PUSH
58786: LD_INT 22
58788: PUSH
58789: LD_OWVAR 2
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PPUSH
58798: CALL_OW 69
58802: ST_TO_ADDR
// if not tmp then
58803: LD_VAR 0 2
58807: NOT
58808: IFFALSE 58812
// exit ;
58810: GO 58841
// for i in tmp do
58812: LD_ADDR_VAR 0 1
58816: PUSH
58817: LD_VAR 0 2
58821: PUSH
58822: FOR_IN
58823: IFFALSE 58839
// SetLives ( i , 600 ) ;
58825: LD_VAR 0 1
58829: PPUSH
58830: LD_INT 600
58832: PPUSH
58833: CALL_OW 234
58837: GO 58822
58839: POP
58840: POP
// end ;
58841: PPOPN 2
58843: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58844: LD_INT 0
58846: PPUSH
// case cmd of 301 :
58847: LD_VAR 0 1
58851: PUSH
58852: LD_INT 301
58854: DOUBLE
58855: EQUAL
58856: IFTRUE 58860
58858: GO 58892
58860: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
58861: LD_VAR 0 6
58865: PPUSH
58866: LD_VAR 0 7
58870: PPUSH
58871: LD_VAR 0 8
58875: PPUSH
58876: LD_VAR 0 4
58880: PPUSH
58881: LD_VAR 0 5
58885: PPUSH
58886: CALL 60093 0 5
58890: GO 59013
58892: LD_INT 302
58894: DOUBLE
58895: EQUAL
58896: IFTRUE 58900
58898: GO 58937
58900: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
58901: LD_VAR 0 6
58905: PPUSH
58906: LD_VAR 0 7
58910: PPUSH
58911: LD_VAR 0 8
58915: PPUSH
58916: LD_VAR 0 9
58920: PPUSH
58921: LD_VAR 0 4
58925: PPUSH
58926: LD_VAR 0 5
58930: PPUSH
58931: CALL 60184 0 6
58935: GO 59013
58937: LD_INT 303
58939: DOUBLE
58940: EQUAL
58941: IFTRUE 58945
58943: GO 58982
58945: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
58946: LD_VAR 0 6
58950: PPUSH
58951: LD_VAR 0 7
58955: PPUSH
58956: LD_VAR 0 8
58960: PPUSH
58961: LD_VAR 0 9
58965: PPUSH
58966: LD_VAR 0 4
58970: PPUSH
58971: LD_VAR 0 5
58975: PPUSH
58976: CALL 59018 0 6
58980: GO 59013
58982: LD_INT 304
58984: DOUBLE
58985: EQUAL
58986: IFTRUE 58990
58988: GO 59012
58990: POP
// hHackTeleport ( unit , x , y ) ; end ;
58991: LD_VAR 0 2
58995: PPUSH
58996: LD_VAR 0 4
59000: PPUSH
59001: LD_VAR 0 5
59005: PPUSH
59006: CALL 60777 0 3
59010: GO 59013
59012: POP
// end ;
59013: LD_VAR 0 12
59017: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
59018: LD_INT 0
59020: PPUSH
59021: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
59022: LD_VAR 0 1
59026: PUSH
59027: LD_INT 1
59029: LESS
59030: PUSH
59031: LD_VAR 0 1
59035: PUSH
59036: LD_INT 3
59038: GREATER
59039: OR
59040: PUSH
59041: LD_VAR 0 5
59045: PPUSH
59046: LD_VAR 0 6
59050: PPUSH
59051: CALL_OW 428
59055: OR
59056: IFFALSE 59060
// exit ;
59058: GO 59780
// uc_side := your_side ;
59060: LD_ADDR_OWVAR 20
59064: PUSH
59065: LD_OWVAR 2
59069: ST_TO_ADDR
// uc_nation := nation ;
59070: LD_ADDR_OWVAR 21
59074: PUSH
59075: LD_VAR 0 1
59079: ST_TO_ADDR
// bc_level = 1 ;
59080: LD_ADDR_OWVAR 43
59084: PUSH
59085: LD_INT 1
59087: ST_TO_ADDR
// case btype of 1 :
59088: LD_VAR 0 2
59092: PUSH
59093: LD_INT 1
59095: DOUBLE
59096: EQUAL
59097: IFTRUE 59101
59099: GO 59112
59101: POP
// bc_type := b_depot ; 2 :
59102: LD_ADDR_OWVAR 42
59106: PUSH
59107: LD_INT 0
59109: ST_TO_ADDR
59110: GO 59724
59112: LD_INT 2
59114: DOUBLE
59115: EQUAL
59116: IFTRUE 59120
59118: GO 59131
59120: POP
// bc_type := b_warehouse ; 3 :
59121: LD_ADDR_OWVAR 42
59125: PUSH
59126: LD_INT 1
59128: ST_TO_ADDR
59129: GO 59724
59131: LD_INT 3
59133: DOUBLE
59134: EQUAL
59135: IFTRUE 59139
59137: GO 59150
59139: POP
// bc_type := b_lab ; 4 .. 9 :
59140: LD_ADDR_OWVAR 42
59144: PUSH
59145: LD_INT 6
59147: ST_TO_ADDR
59148: GO 59724
59150: LD_INT 4
59152: DOUBLE
59153: GREATEREQUAL
59154: IFFALSE 59162
59156: LD_INT 9
59158: DOUBLE
59159: LESSEQUAL
59160: IFTRUE 59164
59162: GO 59216
59164: POP
// begin bc_type := b_lab_half ;
59165: LD_ADDR_OWVAR 42
59169: PUSH
59170: LD_INT 7
59172: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
59173: LD_ADDR_OWVAR 44
59177: PUSH
59178: LD_INT 10
59180: PUSH
59181: LD_INT 11
59183: PUSH
59184: LD_INT 12
59186: PUSH
59187: LD_INT 15
59189: PUSH
59190: LD_INT 14
59192: PUSH
59193: LD_INT 13
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: PUSH
59204: LD_VAR 0 2
59208: PUSH
59209: LD_INT 3
59211: MINUS
59212: ARRAY
59213: ST_TO_ADDR
// end ; 10 .. 13 :
59214: GO 59724
59216: LD_INT 10
59218: DOUBLE
59219: GREATEREQUAL
59220: IFFALSE 59228
59222: LD_INT 13
59224: DOUBLE
59225: LESSEQUAL
59226: IFTRUE 59230
59228: GO 59307
59230: POP
// begin bc_type := b_lab_full ;
59231: LD_ADDR_OWVAR 42
59235: PUSH
59236: LD_INT 8
59238: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
59239: LD_ADDR_OWVAR 44
59243: PUSH
59244: LD_INT 10
59246: PUSH
59247: LD_INT 12
59249: PUSH
59250: LD_INT 14
59252: PUSH
59253: LD_INT 13
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: PUSH
59262: LD_VAR 0 2
59266: PUSH
59267: LD_INT 9
59269: MINUS
59270: ARRAY
59271: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
59272: LD_ADDR_OWVAR 45
59276: PUSH
59277: LD_INT 11
59279: PUSH
59280: LD_INT 15
59282: PUSH
59283: LD_INT 12
59285: PUSH
59286: LD_INT 15
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: PUSH
59295: LD_VAR 0 2
59299: PUSH
59300: LD_INT 9
59302: MINUS
59303: ARRAY
59304: ST_TO_ADDR
// end ; 14 :
59305: GO 59724
59307: LD_INT 14
59309: DOUBLE
59310: EQUAL
59311: IFTRUE 59315
59313: GO 59326
59315: POP
// bc_type := b_workshop ; 15 :
59316: LD_ADDR_OWVAR 42
59320: PUSH
59321: LD_INT 2
59323: ST_TO_ADDR
59324: GO 59724
59326: LD_INT 15
59328: DOUBLE
59329: EQUAL
59330: IFTRUE 59334
59332: GO 59345
59334: POP
// bc_type := b_factory ; 16 :
59335: LD_ADDR_OWVAR 42
59339: PUSH
59340: LD_INT 3
59342: ST_TO_ADDR
59343: GO 59724
59345: LD_INT 16
59347: DOUBLE
59348: EQUAL
59349: IFTRUE 59353
59351: GO 59364
59353: POP
// bc_type := b_ext_gun ; 17 :
59354: LD_ADDR_OWVAR 42
59358: PUSH
59359: LD_INT 17
59361: ST_TO_ADDR
59362: GO 59724
59364: LD_INT 17
59366: DOUBLE
59367: EQUAL
59368: IFTRUE 59372
59370: GO 59400
59372: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
59373: LD_ADDR_OWVAR 42
59377: PUSH
59378: LD_INT 19
59380: PUSH
59381: LD_INT 23
59383: PUSH
59384: LD_INT 19
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: LIST
59391: PUSH
59392: LD_VAR 0 1
59396: ARRAY
59397: ST_TO_ADDR
59398: GO 59724
59400: LD_INT 18
59402: DOUBLE
59403: EQUAL
59404: IFTRUE 59408
59406: GO 59419
59408: POP
// bc_type := b_ext_radar ; 19 :
59409: LD_ADDR_OWVAR 42
59413: PUSH
59414: LD_INT 20
59416: ST_TO_ADDR
59417: GO 59724
59419: LD_INT 19
59421: DOUBLE
59422: EQUAL
59423: IFTRUE 59427
59425: GO 59438
59427: POP
// bc_type := b_ext_radio ; 20 :
59428: LD_ADDR_OWVAR 42
59432: PUSH
59433: LD_INT 22
59435: ST_TO_ADDR
59436: GO 59724
59438: LD_INT 20
59440: DOUBLE
59441: EQUAL
59442: IFTRUE 59446
59444: GO 59457
59446: POP
// bc_type := b_ext_siberium ; 21 :
59447: LD_ADDR_OWVAR 42
59451: PUSH
59452: LD_INT 21
59454: ST_TO_ADDR
59455: GO 59724
59457: LD_INT 21
59459: DOUBLE
59460: EQUAL
59461: IFTRUE 59465
59463: GO 59476
59465: POP
// bc_type := b_ext_computer ; 22 :
59466: LD_ADDR_OWVAR 42
59470: PUSH
59471: LD_INT 24
59473: ST_TO_ADDR
59474: GO 59724
59476: LD_INT 22
59478: DOUBLE
59479: EQUAL
59480: IFTRUE 59484
59482: GO 59495
59484: POP
// bc_type := b_ext_track ; 23 :
59485: LD_ADDR_OWVAR 42
59489: PUSH
59490: LD_INT 16
59492: ST_TO_ADDR
59493: GO 59724
59495: LD_INT 23
59497: DOUBLE
59498: EQUAL
59499: IFTRUE 59503
59501: GO 59514
59503: POP
// bc_type := b_ext_laser ; 24 :
59504: LD_ADDR_OWVAR 42
59508: PUSH
59509: LD_INT 25
59511: ST_TO_ADDR
59512: GO 59724
59514: LD_INT 24
59516: DOUBLE
59517: EQUAL
59518: IFTRUE 59522
59520: GO 59533
59522: POP
// bc_type := b_control_tower ; 25 :
59523: LD_ADDR_OWVAR 42
59527: PUSH
59528: LD_INT 36
59530: ST_TO_ADDR
59531: GO 59724
59533: LD_INT 25
59535: DOUBLE
59536: EQUAL
59537: IFTRUE 59541
59539: GO 59552
59541: POP
// bc_type := b_breastwork ; 26 :
59542: LD_ADDR_OWVAR 42
59546: PUSH
59547: LD_INT 31
59549: ST_TO_ADDR
59550: GO 59724
59552: LD_INT 26
59554: DOUBLE
59555: EQUAL
59556: IFTRUE 59560
59558: GO 59571
59560: POP
// bc_type := b_bunker ; 27 :
59561: LD_ADDR_OWVAR 42
59565: PUSH
59566: LD_INT 32
59568: ST_TO_ADDR
59569: GO 59724
59571: LD_INT 27
59573: DOUBLE
59574: EQUAL
59575: IFTRUE 59579
59577: GO 59590
59579: POP
// bc_type := b_turret ; 28 :
59580: LD_ADDR_OWVAR 42
59584: PUSH
59585: LD_INT 33
59587: ST_TO_ADDR
59588: GO 59724
59590: LD_INT 28
59592: DOUBLE
59593: EQUAL
59594: IFTRUE 59598
59596: GO 59609
59598: POP
// bc_type := b_armoury ; 29 :
59599: LD_ADDR_OWVAR 42
59603: PUSH
59604: LD_INT 4
59606: ST_TO_ADDR
59607: GO 59724
59609: LD_INT 29
59611: DOUBLE
59612: EQUAL
59613: IFTRUE 59617
59615: GO 59628
59617: POP
// bc_type := b_barracks ; 30 :
59618: LD_ADDR_OWVAR 42
59622: PUSH
59623: LD_INT 5
59625: ST_TO_ADDR
59626: GO 59724
59628: LD_INT 30
59630: DOUBLE
59631: EQUAL
59632: IFTRUE 59636
59634: GO 59647
59636: POP
// bc_type := b_solar_power ; 31 :
59637: LD_ADDR_OWVAR 42
59641: PUSH
59642: LD_INT 27
59644: ST_TO_ADDR
59645: GO 59724
59647: LD_INT 31
59649: DOUBLE
59650: EQUAL
59651: IFTRUE 59655
59653: GO 59666
59655: POP
// bc_type := b_oil_power ; 32 :
59656: LD_ADDR_OWVAR 42
59660: PUSH
59661: LD_INT 26
59663: ST_TO_ADDR
59664: GO 59724
59666: LD_INT 32
59668: DOUBLE
59669: EQUAL
59670: IFTRUE 59674
59672: GO 59685
59674: POP
// bc_type := b_siberite_power ; 33 :
59675: LD_ADDR_OWVAR 42
59679: PUSH
59680: LD_INT 28
59682: ST_TO_ADDR
59683: GO 59724
59685: LD_INT 33
59687: DOUBLE
59688: EQUAL
59689: IFTRUE 59693
59691: GO 59704
59693: POP
// bc_type := b_oil_mine ; 34 :
59694: LD_ADDR_OWVAR 42
59698: PUSH
59699: LD_INT 29
59701: ST_TO_ADDR
59702: GO 59724
59704: LD_INT 34
59706: DOUBLE
59707: EQUAL
59708: IFTRUE 59712
59710: GO 59723
59712: POP
// bc_type := b_siberite_mine ; end ;
59713: LD_ADDR_OWVAR 42
59717: PUSH
59718: LD_INT 30
59720: ST_TO_ADDR
59721: GO 59724
59723: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
59724: LD_ADDR_VAR 0 8
59728: PUSH
59729: LD_VAR 0 5
59733: PPUSH
59734: LD_VAR 0 6
59738: PPUSH
59739: LD_VAR 0 3
59743: PPUSH
59744: CALL_OW 47
59748: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
59749: LD_OWVAR 42
59753: PUSH
59754: LD_INT 32
59756: PUSH
59757: LD_INT 33
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: IN
59764: IFFALSE 59780
// PlaceWeaponTurret ( b , weapon ) ;
59766: LD_VAR 0 8
59770: PPUSH
59771: LD_VAR 0 4
59775: PPUSH
59776: CALL_OW 431
// end ;
59780: LD_VAR 0 7
59784: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
59785: LD_INT 0
59787: PPUSH
59788: PPUSH
59789: PPUSH
59790: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59791: LD_ADDR_VAR 0 4
59795: PUSH
59796: LD_INT 22
59798: PUSH
59799: LD_OWVAR 2
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 2
59810: PUSH
59811: LD_INT 30
59813: PUSH
59814: LD_INT 0
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 30
59823: PUSH
59824: LD_INT 1
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: LIST
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PPUSH
59840: CALL_OW 69
59844: ST_TO_ADDR
// if not tmp then
59845: LD_VAR 0 4
59849: NOT
59850: IFFALSE 59854
// exit ;
59852: GO 59913
// for i in tmp do
59854: LD_ADDR_VAR 0 2
59858: PUSH
59859: LD_VAR 0 4
59863: PUSH
59864: FOR_IN
59865: IFFALSE 59911
// for j = 1 to 3 do
59867: LD_ADDR_VAR 0 3
59871: PUSH
59872: DOUBLE
59873: LD_INT 1
59875: DEC
59876: ST_TO_ADDR
59877: LD_INT 3
59879: PUSH
59880: FOR_TO
59881: IFFALSE 59907
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
59883: LD_VAR 0 2
59887: PPUSH
59888: CALL_OW 274
59892: PPUSH
59893: LD_VAR 0 3
59897: PPUSH
59898: LD_INT 99999
59900: PPUSH
59901: CALL_OW 277
59905: GO 59880
59907: POP
59908: POP
59909: GO 59864
59911: POP
59912: POP
// end ;
59913: LD_VAR 0 1
59917: RET
// export function hHackSetLevel10 ; var i , j ; begin
59918: LD_INT 0
59920: PPUSH
59921: PPUSH
59922: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
59923: LD_ADDR_VAR 0 2
59927: PUSH
59928: LD_INT 21
59930: PUSH
59931: LD_INT 1
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PPUSH
59938: CALL_OW 69
59942: PUSH
59943: FOR_IN
59944: IFFALSE 59996
// if IsSelected ( i ) then
59946: LD_VAR 0 2
59950: PPUSH
59951: CALL_OW 306
59955: IFFALSE 59994
// begin for j := 1 to 4 do
59957: LD_ADDR_VAR 0 3
59961: PUSH
59962: DOUBLE
59963: LD_INT 1
59965: DEC
59966: ST_TO_ADDR
59967: LD_INT 4
59969: PUSH
59970: FOR_TO
59971: IFFALSE 59992
// SetSkill ( i , j , 10 ) ;
59973: LD_VAR 0 2
59977: PPUSH
59978: LD_VAR 0 3
59982: PPUSH
59983: LD_INT 10
59985: PPUSH
59986: CALL_OW 237
59990: GO 59970
59992: POP
59993: POP
// end ;
59994: GO 59943
59996: POP
59997: POP
// end ;
59998: LD_VAR 0 1
60002: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
60003: LD_INT 0
60005: PPUSH
60006: PPUSH
60007: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
60008: LD_ADDR_VAR 0 2
60012: PUSH
60013: LD_INT 22
60015: PUSH
60016: LD_OWVAR 2
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 21
60027: PUSH
60028: LD_INT 1
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PPUSH
60039: CALL_OW 69
60043: PUSH
60044: FOR_IN
60045: IFFALSE 60086
// begin for j := 1 to 4 do
60047: LD_ADDR_VAR 0 3
60051: PUSH
60052: DOUBLE
60053: LD_INT 1
60055: DEC
60056: ST_TO_ADDR
60057: LD_INT 4
60059: PUSH
60060: FOR_TO
60061: IFFALSE 60082
// SetSkill ( i , j , 10 ) ;
60063: LD_VAR 0 2
60067: PPUSH
60068: LD_VAR 0 3
60072: PPUSH
60073: LD_INT 10
60075: PPUSH
60076: CALL_OW 237
60080: GO 60060
60082: POP
60083: POP
// end ;
60084: GO 60044
60086: POP
60087: POP
// end ;
60088: LD_VAR 0 1
60092: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
60093: LD_INT 0
60095: PPUSH
// uc_side := your_side ;
60096: LD_ADDR_OWVAR 20
60100: PUSH
60101: LD_OWVAR 2
60105: ST_TO_ADDR
// uc_nation := nation ;
60106: LD_ADDR_OWVAR 21
60110: PUSH
60111: LD_VAR 0 1
60115: ST_TO_ADDR
// InitHc ;
60116: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
60120: LD_INT 0
60122: PPUSH
60123: LD_VAR 0 2
60127: PPUSH
60128: LD_VAR 0 3
60132: PPUSH
60133: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
60137: LD_VAR 0 4
60141: PPUSH
60142: LD_VAR 0 5
60146: PPUSH
60147: CALL_OW 428
60151: PUSH
60152: LD_INT 0
60154: EQUAL
60155: IFFALSE 60179
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
60157: CALL_OW 44
60161: PPUSH
60162: LD_VAR 0 4
60166: PPUSH
60167: LD_VAR 0 5
60171: PPUSH
60172: LD_INT 1
60174: PPUSH
60175: CALL_OW 48
// end ;
60179: LD_VAR 0 6
60183: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
60184: LD_INT 0
60186: PPUSH
60187: PPUSH
// uc_side := your_side ;
60188: LD_ADDR_OWVAR 20
60192: PUSH
60193: LD_OWVAR 2
60197: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
60198: LD_VAR 0 1
60202: PUSH
60203: LD_INT 1
60205: PUSH
60206: LD_INT 2
60208: PUSH
60209: LD_INT 3
60211: PUSH
60212: LD_INT 4
60214: PUSH
60215: LD_INT 5
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: IN
60225: IFFALSE 60237
// uc_nation := nation_american else
60227: LD_ADDR_OWVAR 21
60231: PUSH
60232: LD_INT 1
60234: ST_TO_ADDR
60235: GO 60280
// if chassis in [ 11 , 12 , 13 , 14 ] then
60237: LD_VAR 0 1
60241: PUSH
60242: LD_INT 11
60244: PUSH
60245: LD_INT 12
60247: PUSH
60248: LD_INT 13
60250: PUSH
60251: LD_INT 14
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: IN
60260: IFFALSE 60272
// uc_nation := nation_arabian else
60262: LD_ADDR_OWVAR 21
60266: PUSH
60267: LD_INT 2
60269: ST_TO_ADDR
60270: GO 60280
// uc_nation := nation_russian ;
60272: LD_ADDR_OWVAR 21
60276: PUSH
60277: LD_INT 3
60279: ST_TO_ADDR
// vc_chassis := chassis ;
60280: LD_ADDR_OWVAR 37
60284: PUSH
60285: LD_VAR 0 1
60289: ST_TO_ADDR
// vc_engine := engine ;
60290: LD_ADDR_OWVAR 39
60294: PUSH
60295: LD_VAR 0 2
60299: ST_TO_ADDR
// vc_control := control ;
60300: LD_ADDR_OWVAR 38
60304: PUSH
60305: LD_VAR 0 3
60309: ST_TO_ADDR
// vc_weapon := weapon ;
60310: LD_ADDR_OWVAR 40
60314: PUSH
60315: LD_VAR 0 4
60319: ST_TO_ADDR
// un := CreateVehicle ;
60320: LD_ADDR_VAR 0 8
60324: PUSH
60325: CALL_OW 45
60329: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
60330: LD_VAR 0 8
60334: PPUSH
60335: LD_INT 0
60337: PPUSH
60338: LD_INT 5
60340: PPUSH
60341: CALL_OW 12
60345: PPUSH
60346: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
60350: LD_VAR 0 8
60354: PPUSH
60355: LD_VAR 0 5
60359: PPUSH
60360: LD_VAR 0 6
60364: PPUSH
60365: LD_INT 1
60367: PPUSH
60368: CALL_OW 48
// end ;
60372: LD_VAR 0 7
60376: RET
// export hInvincible ; every 1 do
60377: GO 60379
60379: DISABLE
// hInvincible := [ ] ;
60380: LD_ADDR_EXP 97
60384: PUSH
60385: EMPTY
60386: ST_TO_ADDR
60387: END
// every 10 do var i ;
60388: GO 60390
60390: DISABLE
60391: LD_INT 0
60393: PPUSH
// begin enable ;
60394: ENABLE
// if not hInvincible then
60395: LD_EXP 97
60399: NOT
60400: IFFALSE 60404
// exit ;
60402: GO 60448
// for i in hInvincible do
60404: LD_ADDR_VAR 0 1
60408: PUSH
60409: LD_EXP 97
60413: PUSH
60414: FOR_IN
60415: IFFALSE 60446
// if GetLives ( i ) < 1000 then
60417: LD_VAR 0 1
60421: PPUSH
60422: CALL_OW 256
60426: PUSH
60427: LD_INT 1000
60429: LESS
60430: IFFALSE 60444
// SetLives ( i , 1000 ) ;
60432: LD_VAR 0 1
60436: PPUSH
60437: LD_INT 1000
60439: PPUSH
60440: CALL_OW 234
60444: GO 60414
60446: POP
60447: POP
// end ;
60448: PPOPN 1
60450: END
// export function hHackInvincible ; var i ; begin
60451: LD_INT 0
60453: PPUSH
60454: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
60455: LD_ADDR_VAR 0 2
60459: PUSH
60460: LD_INT 2
60462: PUSH
60463: LD_INT 21
60465: PUSH
60466: LD_INT 1
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 21
60475: PUSH
60476: LD_INT 2
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: LIST
60487: PPUSH
60488: CALL_OW 69
60492: PUSH
60493: FOR_IN
60494: IFFALSE 60555
// if IsSelected ( i ) then
60496: LD_VAR 0 2
60500: PPUSH
60501: CALL_OW 306
60505: IFFALSE 60553
// begin if i in hInvincible then
60507: LD_VAR 0 2
60511: PUSH
60512: LD_EXP 97
60516: IN
60517: IFFALSE 60537
// hInvincible := hInvincible diff i else
60519: LD_ADDR_EXP 97
60523: PUSH
60524: LD_EXP 97
60528: PUSH
60529: LD_VAR 0 2
60533: DIFF
60534: ST_TO_ADDR
60535: GO 60553
// hInvincible := hInvincible union i ;
60537: LD_ADDR_EXP 97
60541: PUSH
60542: LD_EXP 97
60546: PUSH
60547: LD_VAR 0 2
60551: UNION
60552: ST_TO_ADDR
// end ;
60553: GO 60493
60555: POP
60556: POP
// end ;
60557: LD_VAR 0 1
60561: RET
// export function hHackInvisible ; var i , j ; begin
60562: LD_INT 0
60564: PPUSH
60565: PPUSH
60566: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
60567: LD_ADDR_VAR 0 2
60571: PUSH
60572: LD_INT 21
60574: PUSH
60575: LD_INT 1
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PPUSH
60582: CALL_OW 69
60586: PUSH
60587: FOR_IN
60588: IFFALSE 60612
// if IsSelected ( i ) then
60590: LD_VAR 0 2
60594: PPUSH
60595: CALL_OW 306
60599: IFFALSE 60610
// ComForceInvisible ( i ) ;
60601: LD_VAR 0 2
60605: PPUSH
60606: CALL_OW 496
60610: GO 60587
60612: POP
60613: POP
// end ;
60614: LD_VAR 0 1
60618: RET
// export function hHackChangeYourSide ; begin
60619: LD_INT 0
60621: PPUSH
// if your_side = 8 then
60622: LD_OWVAR 2
60626: PUSH
60627: LD_INT 8
60629: EQUAL
60630: IFFALSE 60642
// your_side := 0 else
60632: LD_ADDR_OWVAR 2
60636: PUSH
60637: LD_INT 0
60639: ST_TO_ADDR
60640: GO 60656
// your_side := your_side + 1 ;
60642: LD_ADDR_OWVAR 2
60646: PUSH
60647: LD_OWVAR 2
60651: PUSH
60652: LD_INT 1
60654: PLUS
60655: ST_TO_ADDR
// end ;
60656: LD_VAR 0 1
60660: RET
// export function hHackChangeUnitSide ; var i , j ; begin
60661: LD_INT 0
60663: PPUSH
60664: PPUSH
60665: PPUSH
// for i in all_units do
60666: LD_ADDR_VAR 0 2
60670: PUSH
60671: LD_OWVAR 3
60675: PUSH
60676: FOR_IN
60677: IFFALSE 60755
// if IsSelected ( i ) then
60679: LD_VAR 0 2
60683: PPUSH
60684: CALL_OW 306
60688: IFFALSE 60753
// begin j := GetSide ( i ) ;
60690: LD_ADDR_VAR 0 3
60694: PUSH
60695: LD_VAR 0 2
60699: PPUSH
60700: CALL_OW 255
60704: ST_TO_ADDR
// if j = 8 then
60705: LD_VAR 0 3
60709: PUSH
60710: LD_INT 8
60712: EQUAL
60713: IFFALSE 60725
// j := 0 else
60715: LD_ADDR_VAR 0 3
60719: PUSH
60720: LD_INT 0
60722: ST_TO_ADDR
60723: GO 60739
// j := j + 1 ;
60725: LD_ADDR_VAR 0 3
60729: PUSH
60730: LD_VAR 0 3
60734: PUSH
60735: LD_INT 1
60737: PLUS
60738: ST_TO_ADDR
// SetSide ( i , j ) ;
60739: LD_VAR 0 2
60743: PPUSH
60744: LD_VAR 0 3
60748: PPUSH
60749: CALL_OW 235
// end ;
60753: GO 60676
60755: POP
60756: POP
// end ;
60757: LD_VAR 0 1
60761: RET
// export function hHackFog ; begin
60762: LD_INT 0
60764: PPUSH
// FogOff ( true ) ;
60765: LD_INT 1
60767: PPUSH
60768: CALL_OW 344
// end ;
60772: LD_VAR 0 1
60776: RET
// export function hHackTeleport ( unit , x , y ) ; begin
60777: LD_INT 0
60779: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
60780: LD_VAR 0 1
60784: PPUSH
60785: LD_VAR 0 2
60789: PPUSH
60790: LD_VAR 0 3
60794: PPUSH
60795: LD_INT 1
60797: PPUSH
60798: LD_INT 1
60800: PPUSH
60801: CALL_OW 483
// CenterOnXY ( x , y ) ;
60805: LD_VAR 0 2
60809: PPUSH
60810: LD_VAR 0 3
60814: PPUSH
60815: CALL_OW 84
// end ; end_of_file end_of_file
60819: LD_VAR 0 4
60823: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
60824: LD_VAR 0 1
60828: PUSH
60829: LD_INT 200
60831: DOUBLE
60832: GREATEREQUAL
60833: IFFALSE 60841
60835: LD_INT 299
60837: DOUBLE
60838: LESSEQUAL
60839: IFTRUE 60843
60841: GO 60875
60843: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
60844: LD_VAR 0 1
60848: PPUSH
60849: LD_VAR 0 2
60853: PPUSH
60854: LD_VAR 0 3
60858: PPUSH
60859: LD_VAR 0 4
60863: PPUSH
60864: LD_VAR 0 5
60868: PPUSH
60869: CALL 43134 0 5
60873: GO 60952
60875: LD_INT 300
60877: DOUBLE
60878: GREATEREQUAL
60879: IFFALSE 60887
60881: LD_INT 399
60883: DOUBLE
60884: LESSEQUAL
60885: IFTRUE 60889
60887: GO 60951
60889: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
60890: LD_VAR 0 1
60894: PPUSH
60895: LD_VAR 0 2
60899: PPUSH
60900: LD_VAR 0 3
60904: PPUSH
60905: LD_VAR 0 4
60909: PPUSH
60910: LD_VAR 0 5
60914: PPUSH
60915: LD_VAR 0 6
60919: PPUSH
60920: LD_VAR 0 7
60924: PPUSH
60925: LD_VAR 0 8
60929: PPUSH
60930: LD_VAR 0 9
60934: PPUSH
60935: LD_VAR 0 10
60939: PPUSH
60940: LD_VAR 0 11
60944: PPUSH
60945: CALL 58844 0 11
60949: GO 60952
60951: POP
// end ;
60952: PPOPN 11
60954: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
60955: LD_VAR 0 1
60959: PPUSH
60960: LD_VAR 0 2
60964: PPUSH
60965: LD_VAR 0 3
60969: PPUSH
60970: LD_VAR 0 4
60974: PPUSH
60975: LD_VAR 0 5
60979: PPUSH
60980: CALL 43126 0 5
// end ; end_of_file
60984: PPOPN 5
60986: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
60987: LD_VAR 0 1
60991: PPUSH
60992: LD_VAR 0 2
60996: PPUSH
60997: LD_VAR 0 3
61001: PPUSH
61002: LD_VAR 0 4
61006: PPUSH
61007: LD_VAR 0 5
61011: PPUSH
61012: LD_VAR 0 6
61016: PPUSH
61017: CALL 47039 0 6
// end ;
61021: PPOPN 6
61023: END
