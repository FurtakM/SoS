// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 63 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 24
// Difficulty := 2 else
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 2
  21: ST_TO_ADDR
  22: GO 37
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_OWVAR 67
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// PrepareAlliance ;
  37: CALL 79 0 0
// PrepareRussian ;
  41: CALL 446 0 0
// Action ;
  45: CALL 2366 0 0
// if debug then
  49: LD_EXP 1
  53: IFFALSE 62
// FogOff ( 7 ) ;
  55: LD_INT 7
  57: PPUSH
  58: CALL_OW 344
// end ;
  62: END
// export debug ; export function Init ; begin
  63: LD_INT 0
  65: PPUSH
// debug := false ;
  66: LD_ADDR_EXP 1
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// end ; end_of_file
  74: LD_VAR 0 1
  78: RET
// export allianceHack , allianceMechanic ; export function PrepareAlliance ; var i , tmp ; begin
  79: LD_INT 0
  81: PPUSH
  82: PPUSH
  83: PPUSH
// tmp := [ ] ;
  84: LD_ADDR_VAR 0 3
  88: PUSH
  89: EMPTY
  90: ST_TO_ADDR
// uc_side := 7 ;
  91: LD_ADDR_OWVAR 20
  95: PUSH
  96: LD_INT 7
  98: ST_TO_ADDR
// uc_nation := 1 ;
  99: LD_ADDR_OWVAR 21
 103: PUSH
 104: LD_INT 1
 106: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_hack , 100 ) ;
 107: LD_INT 5
 109: PPUSH
 110: LD_INT 3
 112: PPUSH
 113: LD_INT 3
 115: PPUSH
 116: LD_INT 99
 118: PPUSH
 119: LD_INT 100
 121: PPUSH
 122: CALL 7610 0 5
// allianceHack := CreateVehicle ;
 126: LD_ADDR_EXP 2
 130: PUSH
 131: CALL_OW 45
 135: ST_TO_ADDR
// PlaceUnitArea ( allianceHack , startSpawnArea , false ) ;
 136: LD_EXP 2
 140: PPUSH
 141: LD_INT 7
 143: PPUSH
 144: LD_INT 0
 146: PPUSH
 147: CALL_OW 49
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_double_laser , 100 ) ;
 151: LD_INT 5
 153: PPUSH
 154: LD_INT 3
 156: PPUSH
 157: LD_INT 3
 159: PPUSH
 160: LD_INT 10
 162: PPUSH
 163: LD_INT 100
 165: PPUSH
 166: CALL 7610 0 5
// for i := 1 to 2 do
 170: LD_ADDR_VAR 0 2
 174: PUSH
 175: DOUBLE
 176: LD_INT 1
 178: DEC
 179: ST_TO_ADDR
 180: LD_INT 2
 182: PUSH
 183: FOR_TO
 184: IFFALSE 203
// PlaceUnitArea ( CreateVehicle , startSpawnArea , false ) ;
 186: CALL_OW 45
 190: PPUSH
 191: LD_INT 7
 193: PPUSH
 194: LD_INT 0
 196: PPUSH
 197: CALL_OW 49
 201: GO 183
 203: POP
 204: POP
// uc_side := 4 ;
 205: LD_ADDR_OWVAR 20
 209: PUSH
 210: LD_INT 4
 212: ST_TO_ADDR
// uc_nation := 1 ;
 213: LD_ADDR_OWVAR 21
 217: PUSH
 218: LD_INT 1
 220: ST_TO_ADDR
// PrepareMechanic ( sex_male , 9 ) ;
 221: LD_INT 1
 223: PPUSH
 224: LD_INT 9
 226: PPUSH
 227: CALL_OW 383
// allianceMechanic := CreateHuman ;
 231: LD_ADDR_EXP 3
 235: PUSH
 236: CALL_OW 44
 240: ST_TO_ADDR
// PlaceHumanInUnit ( allianceMechanic , ruDep2 ) ;
 241: LD_EXP 3
 245: PPUSH
 246: LD_INT 96
 248: PPUSH
 249: CALL_OW 52
// end ;
 253: LD_VAR 0 1
 257: RET
// export function PrepareReinforcements ( ) ; var i , un ; begin
 258: LD_INT 0
 260: PPUSH
 261: PPUSH
 262: PPUSH
// uc_side := 7 ;
 263: LD_ADDR_OWVAR 20
 267: PUSH
 268: LD_INT 7
 270: ST_TO_ADDR
// uc_nation := 1 ;
 271: LD_ADDR_OWVAR 21
 275: PUSH
 276: LD_INT 1
 278: ST_TO_ADDR
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 279: LD_ADDR_VAR 0 2
 283: PUSH
 284: DOUBLE
 285: LD_INT 1
 287: DEC
 288: ST_TO_ADDR
 289: LD_INT 3
 291: PUSH
 292: LD_INT 2
 294: PUSH
 295: LD_INT 2
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: LIST
 302: PUSH
 303: LD_OWVAR 67
 307: ARRAY
 308: PUSH
 309: FOR_TO
 310: IFFALSE 380
// begin PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_rocket_launcher , 100 ) ;
 312: LD_INT 5
 314: PPUSH
 315: LD_INT 3
 317: PPUSH
 318: LD_INT 3
 320: PPUSH
 321: LD_INT 7
 323: PPUSH
 324: LD_INT 100
 326: PPUSH
 327: CALL 7610 0 5
// un := CreateVehicle ;
 331: LD_ADDR_VAR 0 3
 335: PUSH
 336: CALL_OW 45
 340: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 341: LD_VAR 0 3
 345: PPUSH
 346: LD_INT 7
 348: PPUSH
 349: LD_INT 0
 351: PPUSH
 352: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 356: LD_VAR 0 3
 360: PPUSH
 361: LD_INT 67
 363: PPUSH
 364: LD_INT 95
 366: PPUSH
 367: CALL_OW 111
// wait ( 0 0$2 ) ;
 371: LD_INT 70
 373: PPUSH
 374: CALL_OW 67
// end ;
 378: GO 309
 380: POP
 381: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_radar , 100 ) ;
 382: LD_INT 5
 384: PPUSH
 385: LD_INT 3
 387: PPUSH
 388: LD_INT 3
 390: PPUSH
 391: LD_INT 11
 393: PPUSH
 394: LD_INT 100
 396: PPUSH
 397: CALL 7610 0 5
// un := CreateVehicle ;
 401: LD_ADDR_VAR 0 3
 405: PUSH
 406: CALL_OW 45
 410: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 411: LD_VAR 0 3
 415: PPUSH
 416: LD_INT 7
 418: PPUSH
 419: LD_INT 0
 421: PPUSH
 422: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 426: LD_VAR 0 3
 430: PPUSH
 431: LD_INT 67
 433: PPUSH
 434: LD_INT 95
 436: PPUSH
 437: CALL_OW 111
// end ; end_of_file
 441: LD_VAR 0 1
 445: RET
// export ruGuard1 , ruGuard2 , ruGuard3 , ruForces , ruEng ; export function PrepareRussian ; var i , un ; begin
 446: LD_INT 0
 448: PPUSH
 449: PPUSH
 450: PPUSH
// uc_side := 3 ;
 451: LD_ADDR_OWVAR 20
 455: PUSH
 456: LD_INT 3
 458: ST_TO_ADDR
// uc_nation := 3 ;
 459: LD_ADDR_OWVAR 21
 463: PUSH
 464: LD_INT 3
 466: ST_TO_ADDR
// SetResourceType ( GetBase ( ruDep ) , mat_cans , 50000 ) ;
 467: LD_INT 14
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_INT 1
 477: PPUSH
 478: LD_INT 50000
 480: PPUSH
 481: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , mat_siberit , 5000 ) ;
 485: LD_INT 14
 487: PPUSH
 488: CALL_OW 274
 492: PPUSH
 493: LD_INT 3
 495: PPUSH
 496: LD_INT 5000
 498: PPUSH
 499: CALL_OW 277
// TeleportExit ( ruTeleport , 132 , 89 ) ;
 503: LD_INT 45
 505: PPUSH
 506: LD_INT 132
 508: PPUSH
 509: LD_INT 89
 511: PPUSH
 512: CALL_OW 243
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
 516: LD_ADDR_VAR 0 2
 520: PUSH
 521: LD_INT 21
 523: PUSH
 524: LD_INT 3
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PPUSH
 531: CALL_OW 69
 535: PUSH
 536: FOR_IN
 537: IFFALSE 570
// SetBLevel ( i , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
 539: LD_VAR 0 2
 543: PPUSH
 544: LD_INT 6
 546: PUSH
 547: LD_INT 8
 549: PUSH
 550: LD_INT 10
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: LD_OWVAR 67
 562: ARRAY
 563: PPUSH
 564: CALL_OW 241
 568: GO 536
 570: POP
 571: POP
// for i := 1 to 4 do
 572: LD_ADDR_VAR 0 2
 576: PUSH
 577: DOUBLE
 578: LD_INT 1
 580: DEC
 581: ST_TO_ADDR
 582: LD_INT 4
 584: PUSH
 585: FOR_TO
 586: IFFALSE 612
// begin PrepareMechanic ( false , 9 ) ;
 588: LD_INT 0
 590: PPUSH
 591: LD_INT 9
 593: PPUSH
 594: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFac ) ;
 598: CALL_OW 44
 602: PPUSH
 603: LD_INT 50
 605: PPUSH
 606: CALL_OW 52
// end ;
 610: GO 585
 612: POP
 613: POP
// ruGuard1 := [ ] ;
 614: LD_ADDR_EXP 4
 618: PUSH
 619: EMPTY
 620: ST_TO_ADDR
// ruGuard2 := [ ] ;
 621: LD_ADDR_EXP 5
 625: PUSH
 626: EMPTY
 627: ST_TO_ADDR
// ruGuard3 := [ ] ;
 628: LD_ADDR_EXP 6
 632: PUSH
 633: EMPTY
 634: ST_TO_ADDR
// ruForces := [ ] ;
 635: LD_ADDR_EXP 7
 639: PUSH
 640: EMPTY
 641: ST_TO_ADDR
// ruEng := [ ] ;
 642: LD_ADDR_EXP 8
 646: PUSH
 647: EMPTY
 648: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 4
 661: PUSH
 662: LD_INT 5
 664: PUSH
 665: LD_INT 6
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: LIST
 672: PUSH
 673: LD_OWVAR 67
 677: ARRAY
 678: PUSH
 679: FOR_TO
 680: IFFALSE 736
// begin PrepareEngineer ( false , 8 ) ;
 682: LD_INT 0
 684: PPUSH
 685: LD_INT 8
 687: PPUSH
 688: CALL_OW 382
// un := CreateHuman ;
 692: LD_ADDR_VAR 0 3
 696: PUSH
 697: CALL_OW 44
 701: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruDep ) ;
 702: LD_VAR 0 3
 706: PPUSH
 707: LD_INT 14
 709: PPUSH
 710: CALL_OW 52
// ruEng := Join ( ruEng , un ) ;
 714: LD_ADDR_EXP 8
 718: PUSH
 719: LD_EXP 8
 723: PPUSH
 724: LD_VAR 0 3
 728: PPUSH
 729: CALL 40472 0 2
 733: ST_TO_ADDR
// end ;
 734: GO 679
 736: POP
 737: POP
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
 738: LD_ADDR_VAR 0 2
 742: PUSH
 743: DOUBLE
 744: LD_INT 1
 746: DEC
 747: ST_TO_ADDR
 748: LD_INT 5
 750: PUSH
 751: LD_INT 6
 753: PUSH
 754: LD_INT 7
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: LIST
 761: PUSH
 762: LD_OWVAR 67
 766: ARRAY
 767: PUSH
 768: FOR_TO
 769: IFFALSE 879
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 771: LD_INT 24
 773: PPUSH
 774: LD_INT 3
 776: PPUSH
 777: LD_INT 3
 779: PPUSH
 780: LD_INT 46
 782: PUSH
 783: LD_INT 45
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: PUSH
 790: LD_VAR 0 2
 794: PUSH
 795: LD_INT 2
 797: MOD
 798: PUSH
 799: LD_INT 1
 801: PLUS
 802: ARRAY
 803: PPUSH
 804: LD_INT 100
 806: PPUSH
 807: CALL 7610 0 5
// un := CreateVehicle ;
 811: LD_ADDR_VAR 0 3
 815: PUSH
 816: CALL_OW 45
 820: ST_TO_ADDR
// SetDir ( un , 3 ) ;
 821: LD_VAR 0 3
 825: PPUSH
 826: LD_INT 3
 828: PPUSH
 829: CALL_OW 233
// PlaceUnitArea ( un , riverGuard1 , false ) ;
 833: LD_VAR 0 3
 837: PPUSH
 838: LD_INT 4
 840: PPUSH
 841: LD_INT 0
 843: PPUSH
 844: CALL_OW 49
// ruGuard1 := Replace ( ruGuard1 , ruGuard1 + 1 , un ) ;
 848: LD_ADDR_EXP 4
 852: PUSH
 853: LD_EXP 4
 857: PPUSH
 858: LD_EXP 4
 862: PUSH
 863: LD_INT 1
 865: PLUS
 866: PPUSH
 867: LD_VAR 0 3
 871: PPUSH
 872: CALL_OW 1
 876: ST_TO_ADDR
// end ;
 877: GO 768
 879: POP
 880: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
 881: LD_ADDR_VAR 0 2
 885: PUSH
 886: DOUBLE
 887: LD_INT 1
 889: DEC
 890: ST_TO_ADDR
 891: LD_INT 4
 893: PUSH
 894: LD_INT 4
 896: PUSH
 897: LD_INT 5
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PUSH
 905: LD_OWVAR 67
 909: ARRAY
 910: PUSH
 911: FOR_TO
 912: IFFALSE 1022
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 914: LD_INT 24
 916: PPUSH
 917: LD_INT 3
 919: PPUSH
 920: LD_INT 3
 922: PPUSH
 923: LD_INT 46
 925: PUSH
 926: LD_INT 45
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: PUSH
 933: LD_VAR 0 2
 937: PUSH
 938: LD_INT 2
 940: MOD
 941: PUSH
 942: LD_INT 1
 944: PLUS
 945: ARRAY
 946: PPUSH
 947: LD_INT 100
 949: PPUSH
 950: CALL 7610 0 5
// un := CreateVehicle ;
 954: LD_ADDR_VAR 0 3
 958: PUSH
 959: CALL_OW 45
 963: ST_TO_ADDR
// SetDir ( un , 4 ) ;
 964: LD_VAR 0 3
 968: PPUSH
 969: LD_INT 4
 971: PPUSH
 972: CALL_OW 233
// PlaceUnitArea ( un , riverGuard2 , false ) ;
 976: LD_VAR 0 3
 980: PPUSH
 981: LD_INT 5
 983: PPUSH
 984: LD_INT 0
 986: PPUSH
 987: CALL_OW 49
// ruGuard2 := Replace ( ruGuard2 , ruGuard2 + 1 , un ) ;
 991: LD_ADDR_EXP 5
 995: PUSH
 996: LD_EXP 5
1000: PPUSH
1001: LD_EXP 5
1005: PUSH
1006: LD_INT 1
1008: PLUS
1009: PPUSH
1010: LD_VAR 0 3
1014: PPUSH
1015: CALL_OW 1
1019: ST_TO_ADDR
// end ;
1020: GO 911
1022: POP
1023: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
1024: LD_ADDR_VAR 0 2
1028: PUSH
1029: DOUBLE
1030: LD_INT 1
1032: DEC
1033: ST_TO_ADDR
1034: LD_INT 4
1036: PUSH
1037: LD_INT 4
1039: PUSH
1040: LD_INT 5
1042: PUSH
1043: EMPTY
1044: LIST
1045: LIST
1046: LIST
1047: PUSH
1048: LD_OWVAR 67
1052: ARRAY
1053: PUSH
1054: FOR_TO
1055: IFFALSE 1165
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
1057: LD_INT 24
1059: PPUSH
1060: LD_INT 3
1062: PPUSH
1063: LD_INT 3
1065: PPUSH
1066: LD_INT 46
1068: PUSH
1069: LD_INT 45
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: PUSH
1076: LD_VAR 0 2
1080: PUSH
1081: LD_INT 2
1083: MOD
1084: PUSH
1085: LD_INT 1
1087: PLUS
1088: ARRAY
1089: PPUSH
1090: LD_INT 100
1092: PPUSH
1093: CALL 7610 0 5
// un := CreateVehicle ;
1097: LD_ADDR_VAR 0 3
1101: PUSH
1102: CALL_OW 45
1106: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1107: LD_VAR 0 3
1111: PPUSH
1112: LD_INT 1
1114: PPUSH
1115: CALL_OW 233
// PlaceUnitArea ( un , riverGuard3 , false ) ;
1119: LD_VAR 0 3
1123: PPUSH
1124: LD_INT 6
1126: PPUSH
1127: LD_INT 0
1129: PPUSH
1130: CALL_OW 49
// ruGuard3 := Replace ( ruGuard3 , ruGuard3 + 1 , un ) ;
1134: LD_ADDR_EXP 6
1138: PUSH
1139: LD_EXP 6
1143: PPUSH
1144: LD_EXP 6
1148: PUSH
1149: LD_INT 1
1151: PLUS
1152: PPUSH
1153: LD_VAR 0 3
1157: PPUSH
1158: CALL_OW 1
1162: ST_TO_ADDR
// end ;
1163: GO 1054
1165: POP
1166: POP
// for i := 1 to 2 do
1167: LD_ADDR_VAR 0 2
1171: PUSH
1172: DOUBLE
1173: LD_INT 1
1175: DEC
1176: ST_TO_ADDR
1177: LD_INT 2
1179: PUSH
1180: FOR_TO
1181: IFFALSE 1229
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
1183: LD_INT 22
1185: PPUSH
1186: LD_INT 3
1188: PPUSH
1189: LD_INT 3
1191: PPUSH
1192: LD_INT 52
1194: PPUSH
1195: LD_INT 100
1197: PPUSH
1198: CALL 7610 0 5
// un := CreateVehicle ;
1202: LD_ADDR_VAR 0 3
1206: PUSH
1207: CALL_OW 45
1211: ST_TO_ADDR
// PlaceUnitArea ( un , ruCraneArea , false ) ;
1212: LD_VAR 0 3
1216: PPUSH
1217: LD_INT 9
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: CALL_OW 49
// end ;
1227: GO 1180
1229: POP
1230: POP
// for i := 1 to 3 do
1231: LD_ADDR_VAR 0 2
1235: PUSH
1236: DOUBLE
1237: LD_INT 1
1239: DEC
1240: ST_TO_ADDR
1241: LD_INT 3
1243: PUSH
1244: FOR_TO
1245: IFFALSE 1282
// begin PrepareHuman ( false , class_bazooker , 8 ) ;
1247: LD_INT 0
1249: PPUSH
1250: LD_INT 9
1252: PPUSH
1253: LD_INT 8
1255: PPUSH
1256: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 91 , 83 ) ) ;
1260: CALL_OW 44
1264: PPUSH
1265: LD_INT 91
1267: PPUSH
1268: LD_INT 83
1270: PPUSH
1271: CALL_OW 428
1275: PPUSH
1276: CALL_OW 52
// end ;
1280: GO 1244
1282: POP
1283: POP
// end ;
1284: LD_VAR 0 1
1288: RET
// every 0 0$1 trigger ruEng do var i , tmp ;
1289: LD_EXP 8
1293: IFFALSE 1487
1295: GO 1297
1297: DISABLE
1298: LD_INT 0
1300: PPUSH
1301: PPUSH
// begin enable ;
1302: ENABLE
// tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1303: LD_ADDR_VAR 0 2
1307: PUSH
1308: LD_INT 10
1310: PPUSH
1311: LD_INT 21
1313: PUSH
1314: LD_INT 3
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PUSH
1321: LD_INT 3
1323: PUSH
1324: LD_INT 24
1326: PUSH
1327: LD_INT 1000
1329: PUSH
1330: EMPTY
1331: LIST
1332: LIST
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: PPUSH
1342: CALL_OW 70
1346: ST_TO_ADDR
// if not tmp and UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) then
1347: LD_VAR 0 2
1351: NOT
1352: PUSH
1353: LD_EXP 8
1357: PPUSH
1358: LD_INT 3
1360: PUSH
1361: LD_INT 54
1363: PUSH
1364: EMPTY
1365: LIST
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: PPUSH
1371: CALL_OW 72
1375: AND
1376: IFFALSE 1408
// ComEnterUnit ( UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) , ruDep ) ;
1378: LD_EXP 8
1382: PPUSH
1383: LD_INT 3
1385: PUSH
1386: LD_INT 54
1388: PUSH
1389: EMPTY
1390: LIST
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PPUSH
1396: CALL_OW 72
1400: PPUSH
1401: LD_INT 14
1403: PPUSH
1404: CALL_OW 120
// if tmp then
1408: LD_VAR 0 2
1412: IFFALSE 1487
// begin for i in ruEng do
1414: LD_ADDR_VAR 0 1
1418: PUSH
1419: LD_EXP 8
1423: PUSH
1424: FOR_IN
1425: IFFALSE 1485
// if IsInUnit ( i ) then
1427: LD_VAR 0 1
1431: PPUSH
1432: CALL_OW 310
1436: IFFALSE 1449
// ComExitBuilding ( i ) else
1438: LD_VAR 0 1
1442: PPUSH
1443: CALL_OW 122
1447: GO 1483
// ComRepairBuilding ( i , SortByDistanceUnit ( i , tmp , true , true ) [ 1 ] ) ;
1449: LD_VAR 0 1
1453: PPUSH
1454: LD_VAR 0 1
1458: PPUSH
1459: LD_VAR 0 2
1463: PPUSH
1464: LD_INT 1
1466: PPUSH
1467: LD_INT 1
1469: PPUSH
1470: CALL 8167 0 4
1474: PUSH
1475: LD_INT 1
1477: ARRAY
1478: PPUSH
1479: CALL_OW 130
1483: GO 1424
1485: POP
1486: POP
// end ; end ;
1487: PPOPN 2
1489: END
// every 4 4$00 trigger not ruForces do var i , tmp ;
1490: LD_EXP 7
1494: NOT
1495: IFFALSE 1561
1497: GO 1499
1499: DISABLE
1500: LD_INT 0
1502: PPUSH
1503: PPUSH
// begin enable ;
1504: ENABLE
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
1505: LD_ADDR_VAR 0 1
1509: PUSH
1510: DOUBLE
1511: LD_INT 1
1513: DEC
1514: ST_TO_ADDR
1515: LD_INT 4
1517: PUSH
1518: LD_INT 5
1520: PUSH
1521: LD_INT 6
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: PUSH
1529: LD_OWVAR 67
1533: ARRAY
1534: PUSH
1535: FOR_TO
1536: IFFALSE 1559
// AddComConstruct ( ruFac , ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ) ;
1538: LD_INT 50
1540: PPUSH
1541: LD_INT 24
1543: PPUSH
1544: LD_INT 3
1546: PPUSH
1547: LD_INT 3
1549: PPUSH
1550: LD_INT 46
1552: PPUSH
1553: CALL_OW 185
1557: GO 1535
1559: POP
1560: POP
// end ;
1561: PPOPN 2
1563: END
// every 0 0$30 trigger ruForces >= [ 4 , 5 , 6 ] [ Difficulty ] do var i , tmp ;
1564: LD_EXP 7
1568: PUSH
1569: LD_INT 4
1571: PUSH
1572: LD_INT 5
1574: PUSH
1575: LD_INT 6
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: LIST
1582: PUSH
1583: LD_OWVAR 67
1587: ARRAY
1588: GREATEREQUAL
1589: IFFALSE 1742
1591: GO 1593
1593: DISABLE
1594: LD_INT 0
1596: PPUSH
1597: PPUSH
// begin enable ;
1598: ENABLE
// tmp := ruForces ;
1599: LD_ADDR_VAR 0 2
1603: PUSH
1604: LD_EXP 7
1608: ST_TO_ADDR
// if rand ( 0 , 1 ) then
1609: LD_INT 0
1611: PPUSH
1612: LD_INT 1
1614: PPUSH
1615: CALL_OW 12
1619: IFFALSE 1640
// begin ComEnterUnit ( tmp , ruTeleport ) ;
1621: LD_VAR 0 2
1625: PPUSH
1626: LD_INT 45
1628: PPUSH
1629: CALL_OW 120
// wait ( 0 0$20 ) ;
1633: LD_INT 700
1635: PPUSH
1636: CALL_OW 67
// end ; ruForces := [ ] ;
1640: LD_ADDR_EXP 7
1644: PUSH
1645: EMPTY
1646: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1647: LD_INT 35
1649: PPUSH
1650: CALL_OW 67
// for i in tmp do
1654: LD_ADDR_VAR 0 1
1658: PUSH
1659: LD_VAR 0 2
1663: PUSH
1664: FOR_IN
1665: IFFALSE 1733
// if not IsOk ( i ) then
1667: LD_VAR 0 1
1671: PPUSH
1672: CALL_OW 302
1676: NOT
1677: IFFALSE 1697
// tmp := tmp diff i else
1679: LD_ADDR_VAR 0 2
1683: PUSH
1684: LD_VAR 0 2
1688: PUSH
1689: LD_VAR 0 1
1693: DIFF
1694: ST_TO_ADDR
1695: GO 1731
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
1697: LD_VAR 0 1
1701: PPUSH
1702: LD_INT 81
1704: PUSH
1705: LD_INT 3
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: PPUSH
1712: CALL_OW 69
1716: PPUSH
1717: LD_VAR 0 1
1721: PPUSH
1722: CALL_OW 74
1726: PPUSH
1727: CALL_OW 115
1731: GO 1664
1733: POP
1734: POP
// until not tmp ;
1735: LD_VAR 0 2
1739: NOT
1740: IFFALSE 1647
// end ;
1742: PPOPN 2
1744: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 62 , 83 , 8 ] ] ) do
1745: LD_INT 22
1747: PUSH
1748: LD_INT 7
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: PUSH
1755: LD_INT 92
1757: PUSH
1758: LD_INT 62
1760: PUSH
1761: LD_INT 83
1763: PUSH
1764: LD_INT 8
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: PPUSH
1777: CALL_OW 69
1781: IFFALSE 1801
1783: GO 1785
1785: DISABLE
// ComAgressiveMove ( ruGuard1 , 69 , 100 ) ;
1786: LD_EXP 4
1790: PPUSH
1791: LD_INT 69
1793: PPUSH
1794: LD_INT 100
1796: PPUSH
1797: CALL_OW 114
1801: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 85 , 89 , 8 ] ] ) do
1802: LD_INT 22
1804: PUSH
1805: LD_INT 7
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PUSH
1812: LD_INT 92
1814: PUSH
1815: LD_INT 85
1817: PUSH
1818: LD_INT 89
1820: PUSH
1821: LD_INT 8
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PPUSH
1834: CALL_OW 69
1838: IFFALSE 1858
1840: GO 1842
1842: DISABLE
// ComAgressiveMove ( ruGuard2 , 72 , 88 ) ;
1843: LD_EXP 5
1847: PPUSH
1848: LD_INT 72
1850: PPUSH
1851: LD_INT 88
1853: PPUSH
1854: CALL_OW 114
1858: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 89 , 13 , 8 ] ] ) do
1859: LD_INT 22
1861: PUSH
1862: LD_INT 7
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 92
1871: PUSH
1872: LD_INT 89
1874: PUSH
1875: LD_INT 13
1877: PUSH
1878: LD_INT 8
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 69
1895: IFFALSE 1915
1897: GO 1899
1899: DISABLE
// ComAgressiveMove ( ruGuard3 , 107 , 26 ) ; end_of_file
1900: LD_EXP 6
1904: PPUSH
1905: LD_INT 107
1907: PPUSH
1908: LD_INT 26
1910: PPUSH
1911: CALL_OW 114
1915: END
// every 6 6$00 do var i , un , tmp ;
1916: GO 1918
1918: DISABLE
1919: LD_INT 0
1921: PPUSH
1922: PPUSH
1923: PPUSH
// begin enable ;
1924: ENABLE
// tmp := [ ] ;
1925: LD_ADDR_VAR 0 3
1929: PUSH
1930: EMPTY
1931: ST_TO_ADDR
// for i := 1 to 8 do
1932: LD_ADDR_VAR 0 1
1936: PUSH
1937: DOUBLE
1938: LD_INT 1
1940: DEC
1941: ST_TO_ADDR
1942: LD_INT 8
1944: PUSH
1945: FOR_TO
1946: IFFALSE 2089
// begin uc_side := 1 ;
1948: LD_ADDR_OWVAR 20
1952: PUSH
1953: LD_INT 1
1955: ST_TO_ADDR
// uc_nation := 1 ;
1956: LD_ADDR_OWVAR 21
1960: PUSH
1961: LD_INT 1
1963: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_laser , us_rocket_launcher ] [ i mod 3 + 1 ] , 100 ) ;
1964: LD_INT 5
1966: PPUSH
1967: LD_INT 3
1969: PPUSH
1970: LD_INT 3
1972: PPUSH
1973: LD_INT 6
1975: PUSH
1976: LD_INT 9
1978: PUSH
1979: LD_INT 7
1981: PUSH
1982: EMPTY
1983: LIST
1984: LIST
1985: LIST
1986: PUSH
1987: LD_VAR 0 1
1991: PUSH
1992: LD_INT 3
1994: MOD
1995: PUSH
1996: LD_INT 1
1998: PLUS
1999: ARRAY
2000: PPUSH
2001: LD_INT 100
2003: PPUSH
2004: CALL 7610 0 5
// un := CreateVehicle ;
2008: LD_ADDR_VAR 0 2
2012: PUSH
2013: CALL_OW 45
2017: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
2018: LD_ADDR_VAR 0 3
2022: PUSH
2023: LD_VAR 0 3
2027: PPUSH
2028: LD_VAR 0 2
2032: PPUSH
2033: CALL 40472 0 2
2037: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2038: LD_VAR 0 2
2042: PPUSH
2043: LD_INT 1
2045: PPUSH
2046: CALL_OW 233
// PlaceUnitArea ( un , americanSpawnArea , false ) ;
2050: LD_VAR 0 2
2054: PPUSH
2055: LD_INT 11
2057: PPUSH
2058: LD_INT 0
2060: PPUSH
2061: CALL_OW 49
// ComMoveXY ( un , 16 , 13 ) ;
2065: LD_VAR 0 2
2069: PPUSH
2070: LD_INT 16
2072: PPUSH
2073: LD_INT 13
2075: PPUSH
2076: CALL_OW 111
// wait ( 0 0$1 ) ;
2080: LD_INT 35
2082: PPUSH
2083: CALL_OW 67
// end ;
2087: GO 1945
2089: POP
2090: POP
// repeat wait ( 0 0$1 ) ;
2091: LD_INT 35
2093: PPUSH
2094: CALL_OW 67
// for i in tmp do
2098: LD_ADDR_VAR 0 1
2102: PUSH
2103: LD_VAR 0 3
2107: PUSH
2108: FOR_IN
2109: IFFALSE 2177
// if not IsOk ( i ) then
2111: LD_VAR 0 1
2115: PPUSH
2116: CALL_OW 302
2120: NOT
2121: IFFALSE 2141
// tmp := tmp diff i else
2123: LD_ADDR_VAR 0 3
2127: PUSH
2128: LD_VAR 0 3
2132: PUSH
2133: LD_VAR 0 1
2137: DIFF
2138: ST_TO_ADDR
2139: GO 2175
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
2141: LD_VAR 0 1
2145: PPUSH
2146: LD_INT 81
2148: PUSH
2149: LD_INT 1
2151: PUSH
2152: EMPTY
2153: LIST
2154: LIST
2155: PPUSH
2156: CALL_OW 69
2160: PPUSH
2161: LD_VAR 0 1
2165: PPUSH
2166: CALL_OW 74
2170: PPUSH
2171: CALL_OW 115
2175: GO 2108
2177: POP
2178: POP
// until not tmp ;
2179: LD_VAR 0 3
2183: NOT
2184: IFFALSE 2091
// end ;
2186: PPOPN 3
2188: END
// every 7 7$00 trigger not HexInfo ( 149 , 106 ) do var un ;
2189: LD_INT 149
2191: PPUSH
2192: LD_INT 106
2194: PPUSH
2195: CALL_OW 428
2199: NOT
2200: IFFALSE 2363
2202: GO 2204
2204: DISABLE
2205: LD_INT 0
2207: PPUSH
// begin enable ;
2208: ENABLE
// uc_side := 1 ;
2209: LD_ADDR_OWVAR 20
2213: PUSH
2214: LD_INT 1
2216: ST_TO_ADDR
// uc_nation := 1 ;
2217: LD_ADDR_OWVAR 21
2221: PUSH
2222: LD_INT 1
2224: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2225: LD_INT 5
2227: PPUSH
2228: LD_INT 3
2230: PPUSH
2231: LD_INT 3
2233: PPUSH
2234: LD_INT 12
2236: PPUSH
2237: LD_INT 100
2239: PPUSH
2240: CALL 7610 0 5
// un := CreateVehicle ;
2244: LD_ADDR_VAR 0 1
2248: PUSH
2249: CALL_OW 45
2253: ST_TO_ADDR
// PlaceUnitXY ( un , 149 , 106 , false ) ;
2254: LD_VAR 0 1
2258: PPUSH
2259: LD_INT 149
2261: PPUSH
2262: LD_INT 106
2264: PPUSH
2265: LD_INT 0
2267: PPUSH
2268: CALL_OW 48
// SetCargo ( un , mat_siberit , 100 ) ;
2272: LD_VAR 0 1
2276: PPUSH
2277: LD_INT 3
2279: PPUSH
2280: LD_INT 100
2282: PPUSH
2283: CALL_OW 290
// ComMoveXY ( un , 105 , 2 ) ;
2287: LD_VAR 0 1
2291: PPUSH
2292: LD_INT 105
2294: PPUSH
2295: LD_INT 2
2297: PPUSH
2298: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2302: LD_INT 35
2304: PPUSH
2305: CALL_OW 67
// if IsDead ( un ) or GetSide ( un ) <> 1 then
2309: LD_VAR 0 1
2313: PPUSH
2314: CALL_OW 301
2318: PUSH
2319: LD_VAR 0 1
2323: PPUSH
2324: CALL_OW 255
2328: PUSH
2329: LD_INT 1
2331: NONEQUAL
2332: OR
2333: IFFALSE 2337
// exit ;
2335: GO 2363
// until IsAt ( un , 105 , 2 ) ;
2337: LD_VAR 0 1
2341: PPUSH
2342: LD_INT 105
2344: PPUSH
2345: LD_INT 2
2347: PPUSH
2348: CALL_OW 307
2352: IFFALSE 2302
// RemoveUnit ( un ) ;
2354: LD_VAR 0 1
2358: PPUSH
2359: CALL_OW 64
// end ; end_of_file
2363: PPOPN 1
2365: END
// export function Action ; begin
2366: LD_INT 0
2368: PPUSH
// CenterNowOnUnits ( allianceHack ) ;
2369: LD_EXP 2
2373: PPUSH
2374: CALL_OW 87
// ChangeMissionObjectives ( WT-Objectives-1 ) ;
2378: LD_STRING WT-Objectives-1
2380: PPUSH
2381: CALL_OW 337
// end ;
2385: LD_VAR 0 1
2389: RET
// every 0 0$2 trigger See ( 7 , allianceMechanic ) do
2390: LD_INT 7
2392: PPUSH
2393: LD_EXP 3
2397: PPUSH
2398: CALL_OW 292
2402: IFFALSE 2419
2404: GO 2406
2406: DISABLE
// SetSide ( allianceMechanic , 7 ) ;
2407: LD_EXP 3
2411: PPUSH
2412: LD_INT 7
2414: PPUSH
2415: CALL_OW 235
2419: END
// every 2 2$00 do
2420: GO 2422
2422: DISABLE
// PrepareReinforcements ( ) ;
2423: CALL 258 0 0
2427: END
// every 0 0$1 trigger not FindArtifact ( 2 ) do
2428: LD_INT 2
2430: PPUSH
2431: CALL_OW 469
2435: NOT
2436: IFFALSE 2451
2438: GO 2440
2440: DISABLE
// SetAreaMapShow ( endMissionArea , 1 ) ;
2441: LD_INT 8
2443: PPUSH
2444: LD_INT 1
2446: PPUSH
2447: CALL_OW 424
2451: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and not FindArtifact ( 2 ) do
2452: LD_INT 8
2454: PPUSH
2455: LD_INT 2
2457: PUSH
2458: LD_INT 34
2460: PUSH
2461: LD_INT 12
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: PUSH
2468: LD_INT 34
2470: PUSH
2471: LD_INT 51
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: PPUSH
2483: CALL_OW 70
2487: PUSH
2488: LD_INT 2
2490: PPUSH
2491: CALL_OW 469
2495: NOT
2496: AND
2497: IFFALSE 2627
2499: GO 2501
2501: DISABLE
// begin AddMedal ( WT-med-1 , 1 ) ;
2502: LD_STRING WT-med-1
2504: PPUSH
2505: LD_INT 1
2507: PPUSH
2508: CALL_OW 101
// AddMedal ( WT-med-2 , [ - 1 , 1 ] [ ( IsOk ( allianceMechanic ) * ( GetSide ( allianceMechanic ) ) = 7 ) + 1 ] ) ;
2512: LD_STRING WT-med-2
2514: PPUSH
2515: LD_INT 1
2517: NEG
2518: PUSH
2519: LD_INT 1
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: PUSH
2526: LD_EXP 3
2530: PPUSH
2531: CALL_OW 302
2535: PUSH
2536: LD_EXP 3
2540: PPUSH
2541: CALL_OW 255
2545: MUL
2546: PUSH
2547: LD_INT 7
2549: EQUAL
2550: PUSH
2551: LD_INT 1
2553: PLUS
2554: ARRAY
2555: PPUSH
2556: CALL_OW 101
// AddMedal ( WT-med-3 , [ - 1 , 1 ] [ ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , us_double_laser ] ] ) >= 2 ) + 1 ] ) ;
2560: LD_STRING WT-med-3
2562: PPUSH
2563: LD_INT 1
2565: NEG
2566: PUSH
2567: LD_INT 1
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 22
2576: PUSH
2577: LD_INT 7
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: PUSH
2584: LD_INT 34
2586: PUSH
2587: LD_INT 10
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: EMPTY
2595: LIST
2596: LIST
2597: PPUSH
2598: CALL_OW 69
2602: PUSH
2603: LD_INT 2
2605: GREATEREQUAL
2606: PUSH
2607: LD_INT 1
2609: PLUS
2610: ARRAY
2611: PPUSH
2612: CALL_OW 101
// GiveMedals ( WT-Main ) ;
2616: LD_STRING WT-Main
2618: PPUSH
2619: CALL_OW 102
// YouWin ;
2623: CALL_OW 103
// end ; end_of_file
2627: END
// on UnitGoesToRed ( un ) do begin if un in ruForces then
2628: LD_VAR 0 1
2632: PUSH
2633: LD_EXP 7
2637: IN
2638: IFFALSE 2656
// ruForces := ruForces diff un ;
2640: LD_ADDR_EXP 7
2644: PUSH
2645: LD_EXP 7
2649: PUSH
2650: LD_VAR 0 1
2654: DIFF
2655: ST_TO_ADDR
// end ;
2656: PPOPN 1
2658: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2659: LD_VAR 0 1
2663: PPUSH
2664: CALL 44694 0 1
// if un = allianceHack then
2668: LD_VAR 0 1
2672: PUSH
2673: LD_EXP 2
2677: EQUAL
2678: IFFALSE 2687
// YouLost ( WT-HackLost ) ;
2680: LD_STRING WT-HackLost
2682: PPUSH
2683: CALL_OW 104
// if un in ruForces then
2687: LD_VAR 0 1
2691: PUSH
2692: LD_EXP 7
2696: IN
2697: IFFALSE 2715
// ruForces := ruForces diff un ;
2699: LD_ADDR_EXP 7
2703: PUSH
2704: LD_EXP 7
2708: PUSH
2709: LD_VAR 0 1
2713: DIFF
2714: ST_TO_ADDR
// end ;
2715: PPOPN 1
2717: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
2718: LD_VAR 0 1
2722: PPUSH
2723: LD_VAR 0 2
2727: PPUSH
2728: CALL 44814 0 2
// if GetSide ( vehicle ) = 3 then
2732: LD_VAR 0 1
2736: PPUSH
2737: CALL_OW 255
2741: PUSH
2742: LD_INT 3
2744: EQUAL
2745: IFFALSE 2767
// ruForces := Join ( ruForces , vehicle ) ;
2747: LD_ADDR_EXP 7
2751: PUSH
2752: LD_EXP 7
2756: PPUSH
2757: LD_VAR 0 1
2761: PPUSH
2762: CALL 40472 0 2
2766: ST_TO_ADDR
// end ; end_of_file
2767: PPOPN 2
2769: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2770: LD_INT 0
2772: PPUSH
2773: PPUSH
// if exist_mode then
2774: LD_VAR 0 2
2778: IFFALSE 2803
// unit := CreateCharacter ( prefix & ident ) else
2780: LD_ADDR_VAR 0 5
2784: PUSH
2785: LD_VAR 0 3
2789: PUSH
2790: LD_VAR 0 1
2794: STR
2795: PPUSH
2796: CALL_OW 34
2800: ST_TO_ADDR
2801: GO 2818
// unit := NewCharacter ( ident ) ;
2803: LD_ADDR_VAR 0 5
2807: PUSH
2808: LD_VAR 0 1
2812: PPUSH
2813: CALL_OW 25
2817: ST_TO_ADDR
// result := unit ;
2818: LD_ADDR_VAR 0 4
2822: PUSH
2823: LD_VAR 0 5
2827: ST_TO_ADDR
// end ;
2828: LD_VAR 0 4
2832: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2833: LD_INT 0
2835: PPUSH
2836: PPUSH
// if not side or not nation then
2837: LD_VAR 0 1
2841: NOT
2842: PUSH
2843: LD_VAR 0 2
2847: NOT
2848: OR
2849: IFFALSE 2853
// exit ;
2851: GO 3621
// case nation of nation_american :
2853: LD_VAR 0 2
2857: PUSH
2858: LD_INT 1
2860: DOUBLE
2861: EQUAL
2862: IFTRUE 2866
2864: GO 3080
2866: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2867: LD_ADDR_VAR 0 4
2871: PUSH
2872: LD_INT 35
2874: PUSH
2875: LD_INT 45
2877: PUSH
2878: LD_INT 46
2880: PUSH
2881: LD_INT 47
2883: PUSH
2884: LD_INT 82
2886: PUSH
2887: LD_INT 83
2889: PUSH
2890: LD_INT 84
2892: PUSH
2893: LD_INT 85
2895: PUSH
2896: LD_INT 86
2898: PUSH
2899: LD_INT 1
2901: PUSH
2902: LD_INT 2
2904: PUSH
2905: LD_INT 6
2907: PUSH
2908: LD_INT 15
2910: PUSH
2911: LD_INT 16
2913: PUSH
2914: LD_INT 7
2916: PUSH
2917: LD_INT 12
2919: PUSH
2920: LD_INT 13
2922: PUSH
2923: LD_INT 10
2925: PUSH
2926: LD_INT 14
2928: PUSH
2929: LD_INT 20
2931: PUSH
2932: LD_INT 21
2934: PUSH
2935: LD_INT 22
2937: PUSH
2938: LD_INT 25
2940: PUSH
2941: LD_INT 32
2943: PUSH
2944: LD_INT 27
2946: PUSH
2947: LD_INT 36
2949: PUSH
2950: LD_INT 69
2952: PUSH
2953: LD_INT 39
2955: PUSH
2956: LD_INT 34
2958: PUSH
2959: LD_INT 40
2961: PUSH
2962: LD_INT 48
2964: PUSH
2965: LD_INT 49
2967: PUSH
2968: LD_INT 50
2970: PUSH
2971: LD_INT 51
2973: PUSH
2974: LD_INT 52
2976: PUSH
2977: LD_INT 53
2979: PUSH
2980: LD_INT 54
2982: PUSH
2983: LD_INT 55
2985: PUSH
2986: LD_INT 56
2988: PUSH
2989: LD_INT 57
2991: PUSH
2992: LD_INT 58
2994: PUSH
2995: LD_INT 59
2997: PUSH
2998: LD_INT 60
3000: PUSH
3001: LD_INT 61
3003: PUSH
3004: LD_INT 62
3006: PUSH
3007: LD_INT 80
3009: PUSH
3010: LD_INT 82
3012: PUSH
3013: LD_INT 83
3015: PUSH
3016: LD_INT 84
3018: PUSH
3019: LD_INT 85
3021: PUSH
3022: LD_INT 86
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: LIST
3033: LIST
3034: LIST
3035: LIST
3036: LIST
3037: LIST
3038: LIST
3039: LIST
3040: LIST
3041: LIST
3042: LIST
3043: LIST
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: LIST
3049: LIST
3050: LIST
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: LIST
3056: LIST
3057: LIST
3058: LIST
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: ST_TO_ADDR
3078: GO 3545
3080: LD_INT 2
3082: DOUBLE
3083: EQUAL
3084: IFTRUE 3088
3086: GO 3314
3088: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3089: LD_ADDR_VAR 0 4
3093: PUSH
3094: LD_INT 35
3096: PUSH
3097: LD_INT 45
3099: PUSH
3100: LD_INT 46
3102: PUSH
3103: LD_INT 47
3105: PUSH
3106: LD_INT 82
3108: PUSH
3109: LD_INT 83
3111: PUSH
3112: LD_INT 84
3114: PUSH
3115: LD_INT 85
3117: PUSH
3118: LD_INT 87
3120: PUSH
3121: LD_INT 70
3123: PUSH
3124: LD_INT 1
3126: PUSH
3127: LD_INT 11
3129: PUSH
3130: LD_INT 3
3132: PUSH
3133: LD_INT 4
3135: PUSH
3136: LD_INT 5
3138: PUSH
3139: LD_INT 6
3141: PUSH
3142: LD_INT 15
3144: PUSH
3145: LD_INT 18
3147: PUSH
3148: LD_INT 7
3150: PUSH
3151: LD_INT 17
3153: PUSH
3154: LD_INT 8
3156: PUSH
3157: LD_INT 20
3159: PUSH
3160: LD_INT 21
3162: PUSH
3163: LD_INT 22
3165: PUSH
3166: LD_INT 72
3168: PUSH
3169: LD_INT 26
3171: PUSH
3172: LD_INT 69
3174: PUSH
3175: LD_INT 39
3177: PUSH
3178: LD_INT 40
3180: PUSH
3181: LD_INT 41
3183: PUSH
3184: LD_INT 42
3186: PUSH
3187: LD_INT 43
3189: PUSH
3190: LD_INT 48
3192: PUSH
3193: LD_INT 49
3195: PUSH
3196: LD_INT 50
3198: PUSH
3199: LD_INT 51
3201: PUSH
3202: LD_INT 52
3204: PUSH
3205: LD_INT 53
3207: PUSH
3208: LD_INT 54
3210: PUSH
3211: LD_INT 55
3213: PUSH
3214: LD_INT 56
3216: PUSH
3217: LD_INT 60
3219: PUSH
3220: LD_INT 61
3222: PUSH
3223: LD_INT 62
3225: PUSH
3226: LD_INT 66
3228: PUSH
3229: LD_INT 67
3231: PUSH
3232: LD_INT 68
3234: PUSH
3235: LD_INT 81
3237: PUSH
3238: LD_INT 82
3240: PUSH
3241: LD_INT 83
3243: PUSH
3244: LD_INT 84
3246: PUSH
3247: LD_INT 85
3249: PUSH
3250: LD_INT 87
3252: PUSH
3253: LD_INT 88
3255: PUSH
3256: EMPTY
3257: LIST
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: ST_TO_ADDR
3312: GO 3545
3314: LD_INT 3
3316: DOUBLE
3317: EQUAL
3318: IFTRUE 3322
3320: GO 3544
3322: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3323: LD_ADDR_VAR 0 4
3327: PUSH
3328: LD_INT 46
3330: PUSH
3331: LD_INT 47
3333: PUSH
3334: LD_INT 1
3336: PUSH
3337: LD_INT 2
3339: PUSH
3340: LD_INT 82
3342: PUSH
3343: LD_INT 83
3345: PUSH
3346: LD_INT 84
3348: PUSH
3349: LD_INT 85
3351: PUSH
3352: LD_INT 86
3354: PUSH
3355: LD_INT 11
3357: PUSH
3358: LD_INT 9
3360: PUSH
3361: LD_INT 20
3363: PUSH
3364: LD_INT 19
3366: PUSH
3367: LD_INT 21
3369: PUSH
3370: LD_INT 24
3372: PUSH
3373: LD_INT 22
3375: PUSH
3376: LD_INT 25
3378: PUSH
3379: LD_INT 28
3381: PUSH
3382: LD_INT 29
3384: PUSH
3385: LD_INT 30
3387: PUSH
3388: LD_INT 31
3390: PUSH
3391: LD_INT 37
3393: PUSH
3394: LD_INT 38
3396: PUSH
3397: LD_INT 32
3399: PUSH
3400: LD_INT 27
3402: PUSH
3403: LD_INT 33
3405: PUSH
3406: LD_INT 69
3408: PUSH
3409: LD_INT 39
3411: PUSH
3412: LD_INT 34
3414: PUSH
3415: LD_INT 40
3417: PUSH
3418: LD_INT 71
3420: PUSH
3421: LD_INT 23
3423: PUSH
3424: LD_INT 44
3426: PUSH
3427: LD_INT 48
3429: PUSH
3430: LD_INT 49
3432: PUSH
3433: LD_INT 50
3435: PUSH
3436: LD_INT 51
3438: PUSH
3439: LD_INT 52
3441: PUSH
3442: LD_INT 53
3444: PUSH
3445: LD_INT 54
3447: PUSH
3448: LD_INT 55
3450: PUSH
3451: LD_INT 56
3453: PUSH
3454: LD_INT 57
3456: PUSH
3457: LD_INT 58
3459: PUSH
3460: LD_INT 59
3462: PUSH
3463: LD_INT 63
3465: PUSH
3466: LD_INT 64
3468: PUSH
3469: LD_INT 65
3471: PUSH
3472: LD_INT 82
3474: PUSH
3475: LD_INT 83
3477: PUSH
3478: LD_INT 84
3480: PUSH
3481: LD_INT 85
3483: PUSH
3484: LD_INT 86
3486: PUSH
3487: EMPTY
3488: LIST
3489: LIST
3490: LIST
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: LIST
3520: LIST
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: ST_TO_ADDR
3542: GO 3545
3544: POP
// if state > - 1 and state < 3 then
3545: LD_VAR 0 3
3549: PUSH
3550: LD_INT 1
3552: NEG
3553: GREATER
3554: PUSH
3555: LD_VAR 0 3
3559: PUSH
3560: LD_INT 3
3562: LESS
3563: AND
3564: IFFALSE 3621
// for i in result do
3566: LD_ADDR_VAR 0 5
3570: PUSH
3571: LD_VAR 0 4
3575: PUSH
3576: FOR_IN
3577: IFFALSE 3619
// if GetTech ( i , side ) <> state then
3579: LD_VAR 0 5
3583: PPUSH
3584: LD_VAR 0 1
3588: PPUSH
3589: CALL_OW 321
3593: PUSH
3594: LD_VAR 0 3
3598: NONEQUAL
3599: IFFALSE 3617
// result := result diff i ;
3601: LD_ADDR_VAR 0 4
3605: PUSH
3606: LD_VAR 0 4
3610: PUSH
3611: LD_VAR 0 5
3615: DIFF
3616: ST_TO_ADDR
3617: GO 3576
3619: POP
3620: POP
// end ;
3621: LD_VAR 0 4
3625: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3626: LD_INT 0
3628: PPUSH
3629: PPUSH
3630: PPUSH
// result := true ;
3631: LD_ADDR_VAR 0 3
3635: PUSH
3636: LD_INT 1
3638: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3639: LD_ADDR_VAR 0 5
3643: PUSH
3644: LD_VAR 0 2
3648: PPUSH
3649: CALL_OW 480
3653: ST_TO_ADDR
// if not tmp then
3654: LD_VAR 0 5
3658: NOT
3659: IFFALSE 3663
// exit ;
3661: GO 3712
// for i in tmp do
3663: LD_ADDR_VAR 0 4
3667: PUSH
3668: LD_VAR 0 5
3672: PUSH
3673: FOR_IN
3674: IFFALSE 3710
// if GetTech ( i , side ) <> state_researched then
3676: LD_VAR 0 4
3680: PPUSH
3681: LD_VAR 0 1
3685: PPUSH
3686: CALL_OW 321
3690: PUSH
3691: LD_INT 2
3693: NONEQUAL
3694: IFFALSE 3708
// begin result := false ;
3696: LD_ADDR_VAR 0 3
3700: PUSH
3701: LD_INT 0
3703: ST_TO_ADDR
// exit ;
3704: POP
3705: POP
3706: GO 3712
// end ;
3708: GO 3673
3710: POP
3711: POP
// end ;
3712: LD_VAR 0 3
3716: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3717: LD_INT 0
3719: PPUSH
3720: PPUSH
3721: PPUSH
3722: PPUSH
3723: PPUSH
3724: PPUSH
3725: PPUSH
3726: PPUSH
3727: PPUSH
3728: PPUSH
3729: PPUSH
3730: PPUSH
3731: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3732: LD_VAR 0 1
3736: NOT
3737: PUSH
3738: LD_VAR 0 1
3742: PPUSH
3743: CALL_OW 257
3747: PUSH
3748: LD_INT 9
3750: NONEQUAL
3751: OR
3752: IFFALSE 3756
// exit ;
3754: GO 4329
// side := GetSide ( unit ) ;
3756: LD_ADDR_VAR 0 9
3760: PUSH
3761: LD_VAR 0 1
3765: PPUSH
3766: CALL_OW 255
3770: ST_TO_ADDR
// tech_space := tech_spacanom ;
3771: LD_ADDR_VAR 0 12
3775: PUSH
3776: LD_INT 29
3778: ST_TO_ADDR
// tech_time := tech_taurad ;
3779: LD_ADDR_VAR 0 13
3783: PUSH
3784: LD_INT 28
3786: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3787: LD_ADDR_VAR 0 11
3791: PUSH
3792: LD_VAR 0 1
3796: PPUSH
3797: CALL_OW 310
3801: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3802: LD_VAR 0 11
3806: PPUSH
3807: CALL_OW 247
3811: PUSH
3812: LD_INT 2
3814: EQUAL
3815: IFFALSE 3819
// exit ;
3817: GO 4329
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3819: LD_ADDR_VAR 0 8
3823: PUSH
3824: LD_INT 81
3826: PUSH
3827: LD_VAR 0 9
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PUSH
3836: LD_INT 3
3838: PUSH
3839: LD_INT 21
3841: PUSH
3842: LD_INT 3
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: PPUSH
3857: CALL_OW 69
3861: ST_TO_ADDR
// if not tmp then
3862: LD_VAR 0 8
3866: NOT
3867: IFFALSE 3871
// exit ;
3869: GO 4329
// if in_unit then
3871: LD_VAR 0 11
3875: IFFALSE 3899
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3877: LD_ADDR_VAR 0 10
3881: PUSH
3882: LD_VAR 0 8
3886: PPUSH
3887: LD_VAR 0 11
3891: PPUSH
3892: CALL_OW 74
3896: ST_TO_ADDR
3897: GO 3919
// enemy := NearestUnitToUnit ( tmp , unit ) ;
3899: LD_ADDR_VAR 0 10
3903: PUSH
3904: LD_VAR 0 8
3908: PPUSH
3909: LD_VAR 0 1
3913: PPUSH
3914: CALL_OW 74
3918: ST_TO_ADDR
// if not enemy then
3919: LD_VAR 0 10
3923: NOT
3924: IFFALSE 3928
// exit ;
3926: GO 4329
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
3928: LD_VAR 0 11
3932: PUSH
3933: LD_VAR 0 11
3937: PPUSH
3938: LD_VAR 0 10
3942: PPUSH
3943: CALL_OW 296
3947: PUSH
3948: LD_INT 13
3950: GREATER
3951: AND
3952: PUSH
3953: LD_VAR 0 1
3957: PPUSH
3958: LD_VAR 0 10
3962: PPUSH
3963: CALL_OW 296
3967: PUSH
3968: LD_INT 12
3970: GREATER
3971: OR
3972: IFFALSE 3976
// exit ;
3974: GO 4329
// missile := [ 1 ] ;
3976: LD_ADDR_VAR 0 14
3980: PUSH
3981: LD_INT 1
3983: PUSH
3984: EMPTY
3985: LIST
3986: ST_TO_ADDR
// if Researched ( side , tech_space ) then
3987: LD_VAR 0 9
3991: PPUSH
3992: LD_VAR 0 12
3996: PPUSH
3997: CALL_OW 325
4001: IFFALSE 4030
// missile := Replace ( missile , missile + 1 , 2 ) ;
4003: LD_ADDR_VAR 0 14
4007: PUSH
4008: LD_VAR 0 14
4012: PPUSH
4013: LD_VAR 0 14
4017: PUSH
4018: LD_INT 1
4020: PLUS
4021: PPUSH
4022: LD_INT 2
4024: PPUSH
4025: CALL_OW 1
4029: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4030: LD_VAR 0 9
4034: PPUSH
4035: LD_VAR 0 13
4039: PPUSH
4040: CALL_OW 325
4044: PUSH
4045: LD_VAR 0 10
4049: PPUSH
4050: CALL_OW 255
4054: PPUSH
4055: LD_VAR 0 13
4059: PPUSH
4060: CALL_OW 325
4064: NOT
4065: AND
4066: IFFALSE 4095
// missile := Replace ( missile , missile + 1 , 3 ) ;
4068: LD_ADDR_VAR 0 14
4072: PUSH
4073: LD_VAR 0 14
4077: PPUSH
4078: LD_VAR 0 14
4082: PUSH
4083: LD_INT 1
4085: PLUS
4086: PPUSH
4087: LD_INT 3
4089: PPUSH
4090: CALL_OW 1
4094: ST_TO_ADDR
// if missile < 2 then
4095: LD_VAR 0 14
4099: PUSH
4100: LD_INT 2
4102: LESS
4103: IFFALSE 4107
// exit ;
4105: GO 4329
// x := GetX ( enemy ) ;
4107: LD_ADDR_VAR 0 4
4111: PUSH
4112: LD_VAR 0 10
4116: PPUSH
4117: CALL_OW 250
4121: ST_TO_ADDR
// y := GetY ( enemy ) ;
4122: LD_ADDR_VAR 0 5
4126: PUSH
4127: LD_VAR 0 10
4131: PPUSH
4132: CALL_OW 251
4136: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4137: LD_ADDR_VAR 0 6
4141: PUSH
4142: LD_VAR 0 4
4146: PUSH
4147: LD_INT 1
4149: NEG
4150: PPUSH
4151: LD_INT 1
4153: PPUSH
4154: CALL_OW 12
4158: PLUS
4159: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4160: LD_ADDR_VAR 0 7
4164: PUSH
4165: LD_VAR 0 5
4169: PUSH
4170: LD_INT 1
4172: NEG
4173: PPUSH
4174: LD_INT 1
4176: PPUSH
4177: CALL_OW 12
4181: PLUS
4182: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4183: LD_VAR 0 6
4187: PPUSH
4188: LD_VAR 0 7
4192: PPUSH
4193: CALL_OW 488
4197: NOT
4198: IFFALSE 4220
// begin _x := x ;
4200: LD_ADDR_VAR 0 6
4204: PUSH
4205: LD_VAR 0 4
4209: ST_TO_ADDR
// _y := y ;
4210: LD_ADDR_VAR 0 7
4214: PUSH
4215: LD_VAR 0 5
4219: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4220: LD_ADDR_VAR 0 3
4224: PUSH
4225: LD_INT 1
4227: PPUSH
4228: LD_VAR 0 14
4232: PPUSH
4233: CALL_OW 12
4237: ST_TO_ADDR
// case i of 1 :
4238: LD_VAR 0 3
4242: PUSH
4243: LD_INT 1
4245: DOUBLE
4246: EQUAL
4247: IFTRUE 4251
4249: GO 4268
4251: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4252: LD_VAR 0 1
4256: PPUSH
4257: LD_VAR 0 10
4261: PPUSH
4262: CALL_OW 115
4266: GO 4329
4268: LD_INT 2
4270: DOUBLE
4271: EQUAL
4272: IFTRUE 4276
4274: GO 4298
4276: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4277: LD_VAR 0 1
4281: PPUSH
4282: LD_VAR 0 6
4286: PPUSH
4287: LD_VAR 0 7
4291: PPUSH
4292: CALL_OW 153
4296: GO 4329
4298: LD_INT 3
4300: DOUBLE
4301: EQUAL
4302: IFTRUE 4306
4304: GO 4328
4306: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4307: LD_VAR 0 1
4311: PPUSH
4312: LD_VAR 0 6
4316: PPUSH
4317: LD_VAR 0 7
4321: PPUSH
4322: CALL_OW 154
4326: GO 4329
4328: POP
// end ;
4329: LD_VAR 0 2
4333: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4334: LD_INT 0
4336: PPUSH
4337: PPUSH
4338: PPUSH
4339: PPUSH
4340: PPUSH
4341: PPUSH
// if not unit or not building then
4342: LD_VAR 0 1
4346: NOT
4347: PUSH
4348: LD_VAR 0 2
4352: NOT
4353: OR
4354: IFFALSE 4358
// exit ;
4356: GO 4516
// x := GetX ( building ) ;
4358: LD_ADDR_VAR 0 5
4362: PUSH
4363: LD_VAR 0 2
4367: PPUSH
4368: CALL_OW 250
4372: ST_TO_ADDR
// y := GetY ( building ) ;
4373: LD_ADDR_VAR 0 6
4377: PUSH
4378: LD_VAR 0 2
4382: PPUSH
4383: CALL_OW 251
4387: ST_TO_ADDR
// for i = 0 to 5 do
4388: LD_ADDR_VAR 0 4
4392: PUSH
4393: DOUBLE
4394: LD_INT 0
4396: DEC
4397: ST_TO_ADDR
4398: LD_INT 5
4400: PUSH
4401: FOR_TO
4402: IFFALSE 4514
// begin _x := ShiftX ( x , i , 3 ) ;
4404: LD_ADDR_VAR 0 7
4408: PUSH
4409: LD_VAR 0 5
4413: PPUSH
4414: LD_VAR 0 4
4418: PPUSH
4419: LD_INT 3
4421: PPUSH
4422: CALL_OW 272
4426: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4427: LD_ADDR_VAR 0 8
4431: PUSH
4432: LD_VAR 0 6
4436: PPUSH
4437: LD_VAR 0 4
4441: PPUSH
4442: LD_INT 3
4444: PPUSH
4445: CALL_OW 273
4449: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4450: LD_VAR 0 7
4454: PPUSH
4455: LD_VAR 0 8
4459: PPUSH
4460: CALL_OW 488
4464: NOT
4465: IFFALSE 4469
// continue ;
4467: GO 4401
// if HexInfo ( _x , _y ) = 0 then
4469: LD_VAR 0 7
4473: PPUSH
4474: LD_VAR 0 8
4478: PPUSH
4479: CALL_OW 428
4483: PUSH
4484: LD_INT 0
4486: EQUAL
4487: IFFALSE 4512
// begin ComMoveXY ( unit , _x , _y ) ;
4489: LD_VAR 0 1
4493: PPUSH
4494: LD_VAR 0 7
4498: PPUSH
4499: LD_VAR 0 8
4503: PPUSH
4504: CALL_OW 111
// exit ;
4508: POP
4509: POP
4510: GO 4516
// end ; end ;
4512: GO 4401
4514: POP
4515: POP
// end ;
4516: LD_VAR 0 3
4520: RET
// export function ScanBase ( side , base_area ) ; begin
4521: LD_INT 0
4523: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4524: LD_ADDR_VAR 0 3
4528: PUSH
4529: LD_VAR 0 2
4533: PPUSH
4534: LD_INT 81
4536: PUSH
4537: LD_VAR 0 1
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: PPUSH
4546: CALL_OW 70
4550: ST_TO_ADDR
// end ;
4551: LD_VAR 0 3
4555: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4556: LD_INT 0
4558: PPUSH
4559: PPUSH
4560: PPUSH
4561: PPUSH
// result := false ;
4562: LD_ADDR_VAR 0 2
4566: PUSH
4567: LD_INT 0
4569: ST_TO_ADDR
// side := GetSide ( unit ) ;
4570: LD_ADDR_VAR 0 3
4574: PUSH
4575: LD_VAR 0 1
4579: PPUSH
4580: CALL_OW 255
4584: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4585: LD_ADDR_VAR 0 4
4589: PUSH
4590: LD_VAR 0 1
4594: PPUSH
4595: CALL_OW 248
4599: ST_TO_ADDR
// case nat of 1 :
4600: LD_VAR 0 4
4604: PUSH
4605: LD_INT 1
4607: DOUBLE
4608: EQUAL
4609: IFTRUE 4613
4611: GO 4624
4613: POP
// tech := tech_lassight ; 2 :
4614: LD_ADDR_VAR 0 5
4618: PUSH
4619: LD_INT 12
4621: ST_TO_ADDR
4622: GO 4663
4624: LD_INT 2
4626: DOUBLE
4627: EQUAL
4628: IFTRUE 4632
4630: GO 4643
4632: POP
// tech := tech_mortar ; 3 :
4633: LD_ADDR_VAR 0 5
4637: PUSH
4638: LD_INT 41
4640: ST_TO_ADDR
4641: GO 4663
4643: LD_INT 3
4645: DOUBLE
4646: EQUAL
4647: IFTRUE 4651
4649: GO 4662
4651: POP
// tech := tech_bazooka ; end ;
4652: LD_ADDR_VAR 0 5
4656: PUSH
4657: LD_INT 44
4659: ST_TO_ADDR
4660: GO 4663
4662: POP
// if Researched ( side , tech ) then
4663: LD_VAR 0 3
4667: PPUSH
4668: LD_VAR 0 5
4672: PPUSH
4673: CALL_OW 325
4677: IFFALSE 4704
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4679: LD_ADDR_VAR 0 2
4683: PUSH
4684: LD_INT 5
4686: PUSH
4687: LD_INT 8
4689: PUSH
4690: LD_INT 9
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: LIST
4697: PUSH
4698: LD_VAR 0 4
4702: ARRAY
4703: ST_TO_ADDR
// end ;
4704: LD_VAR 0 2
4708: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4709: LD_INT 0
4711: PPUSH
4712: PPUSH
4713: PPUSH
// if not mines then
4714: LD_VAR 0 2
4718: NOT
4719: IFFALSE 4723
// exit ;
4721: GO 4867
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4723: LD_ADDR_VAR 0 5
4727: PUSH
4728: LD_INT 81
4730: PUSH
4731: LD_VAR 0 1
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: LD_INT 3
4742: PUSH
4743: LD_INT 21
4745: PUSH
4746: LD_INT 3
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: PPUSH
4761: CALL_OW 69
4765: ST_TO_ADDR
// for i in mines do
4766: LD_ADDR_VAR 0 4
4770: PUSH
4771: LD_VAR 0 2
4775: PUSH
4776: FOR_IN
4777: IFFALSE 4865
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4779: LD_VAR 0 4
4783: PUSH
4784: LD_INT 1
4786: ARRAY
4787: PPUSH
4788: LD_VAR 0 4
4792: PUSH
4793: LD_INT 2
4795: ARRAY
4796: PPUSH
4797: CALL_OW 458
4801: NOT
4802: IFFALSE 4806
// continue ;
4804: GO 4776
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4806: LD_VAR 0 4
4810: PUSH
4811: LD_INT 1
4813: ARRAY
4814: PPUSH
4815: LD_VAR 0 4
4819: PUSH
4820: LD_INT 2
4822: ARRAY
4823: PPUSH
4824: CALL_OW 428
4828: PUSH
4829: LD_VAR 0 5
4833: IN
4834: IFFALSE 4863
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4836: LD_VAR 0 4
4840: PUSH
4841: LD_INT 1
4843: ARRAY
4844: PPUSH
4845: LD_VAR 0 4
4849: PUSH
4850: LD_INT 2
4852: ARRAY
4853: PPUSH
4854: LD_VAR 0 1
4858: PPUSH
4859: CALL_OW 456
// end ;
4863: GO 4776
4865: POP
4866: POP
// end ;
4867: LD_VAR 0 3
4871: RET
// export function Count ( array ) ; begin
4872: LD_INT 0
4874: PPUSH
// result := array + 0 ;
4875: LD_ADDR_VAR 0 2
4879: PUSH
4880: LD_VAR 0 1
4884: PUSH
4885: LD_INT 0
4887: PLUS
4888: ST_TO_ADDR
// end ;
4889: LD_VAR 0 2
4893: RET
// export function IsEmpty ( building ) ; begin
4894: LD_INT 0
4896: PPUSH
// if not building then
4897: LD_VAR 0 1
4901: NOT
4902: IFFALSE 4906
// exit ;
4904: GO 4949
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4906: LD_ADDR_VAR 0 2
4910: PUSH
4911: LD_VAR 0 1
4915: PUSH
4916: LD_INT 22
4918: PUSH
4919: LD_VAR 0 1
4923: PPUSH
4924: CALL_OW 255
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: PUSH
4933: LD_INT 58
4935: PUSH
4936: EMPTY
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PPUSH
4943: CALL_OW 69
4947: IN
4948: ST_TO_ADDR
// end ;
4949: LD_VAR 0 2
4953: RET
// export function IsNotFull ( building ) ; var places ; begin
4954: LD_INT 0
4956: PPUSH
4957: PPUSH
// if not building then
4958: LD_VAR 0 1
4962: NOT
4963: IFFALSE 4967
// exit ;
4965: GO 4995
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
4967: LD_ADDR_VAR 0 2
4971: PUSH
4972: LD_VAR 0 1
4976: PPUSH
4977: LD_INT 3
4979: PUSH
4980: LD_INT 62
4982: PUSH
4983: EMPTY
4984: LIST
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: PPUSH
4990: CALL_OW 72
4994: ST_TO_ADDR
// end ;
4995: LD_VAR 0 2
4999: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5000: LD_INT 0
5002: PPUSH
5003: PPUSH
5004: PPUSH
5005: PPUSH
// tmp := [ ] ;
5006: LD_ADDR_VAR 0 3
5010: PUSH
5011: EMPTY
5012: ST_TO_ADDR
// list := [ ] ;
5013: LD_ADDR_VAR 0 5
5017: PUSH
5018: EMPTY
5019: ST_TO_ADDR
// for i = 16 to 25 do
5020: LD_ADDR_VAR 0 4
5024: PUSH
5025: DOUBLE
5026: LD_INT 16
5028: DEC
5029: ST_TO_ADDR
5030: LD_INT 25
5032: PUSH
5033: FOR_TO
5034: IFFALSE 5107
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5036: LD_ADDR_VAR 0 3
5040: PUSH
5041: LD_VAR 0 3
5045: PUSH
5046: LD_INT 22
5048: PUSH
5049: LD_VAR 0 1
5053: PPUSH
5054: CALL_OW 255
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: LD_INT 91
5065: PUSH
5066: LD_VAR 0 1
5070: PUSH
5071: LD_INT 6
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: LIST
5078: PUSH
5079: LD_INT 30
5081: PUSH
5082: LD_VAR 0 4
5086: PUSH
5087: EMPTY
5088: LIST
5089: LIST
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: LIST
5095: PUSH
5096: EMPTY
5097: LIST
5098: PPUSH
5099: CALL_OW 69
5103: ADD
5104: ST_TO_ADDR
5105: GO 5033
5107: POP
5108: POP
// for i = 1 to tmp do
5109: LD_ADDR_VAR 0 4
5113: PUSH
5114: DOUBLE
5115: LD_INT 1
5117: DEC
5118: ST_TO_ADDR
5119: LD_VAR 0 3
5123: PUSH
5124: FOR_TO
5125: IFFALSE 5213
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5127: LD_ADDR_VAR 0 5
5131: PUSH
5132: LD_VAR 0 5
5136: PUSH
5137: LD_VAR 0 3
5141: PUSH
5142: LD_VAR 0 4
5146: ARRAY
5147: PPUSH
5148: CALL_OW 266
5152: PUSH
5153: LD_VAR 0 3
5157: PUSH
5158: LD_VAR 0 4
5162: ARRAY
5163: PPUSH
5164: CALL_OW 250
5168: PUSH
5169: LD_VAR 0 3
5173: PUSH
5174: LD_VAR 0 4
5178: ARRAY
5179: PPUSH
5180: CALL_OW 251
5184: PUSH
5185: LD_VAR 0 3
5189: PUSH
5190: LD_VAR 0 4
5194: ARRAY
5195: PPUSH
5196: CALL_OW 254
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: PUSH
5207: EMPTY
5208: LIST
5209: ADD
5210: ST_TO_ADDR
5211: GO 5124
5213: POP
5214: POP
// result := list ;
5215: LD_ADDR_VAR 0 2
5219: PUSH
5220: LD_VAR 0 5
5224: ST_TO_ADDR
// end ;
5225: LD_VAR 0 2
5229: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5230: LD_INT 0
5232: PPUSH
5233: PPUSH
5234: PPUSH
5235: PPUSH
5236: PPUSH
5237: PPUSH
5238: PPUSH
// if not factory then
5239: LD_VAR 0 1
5243: NOT
5244: IFFALSE 5248
// exit ;
5246: GO 5841
// if control = control_apeman then
5248: LD_VAR 0 4
5252: PUSH
5253: LD_INT 5
5255: EQUAL
5256: IFFALSE 5365
// begin tmp := UnitsInside ( factory ) ;
5258: LD_ADDR_VAR 0 8
5262: PUSH
5263: LD_VAR 0 1
5267: PPUSH
5268: CALL_OW 313
5272: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5273: LD_VAR 0 8
5277: PPUSH
5278: LD_INT 25
5280: PUSH
5281: LD_INT 12
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PPUSH
5288: CALL_OW 72
5292: NOT
5293: IFFALSE 5303
// control := control_manual ;
5295: LD_ADDR_VAR 0 4
5299: PUSH
5300: LD_INT 1
5302: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5303: LD_ADDR_VAR 0 8
5307: PUSH
5308: LD_VAR 0 1
5312: PPUSH
5313: CALL 5000 0 1
5317: ST_TO_ADDR
// if tmp then
5318: LD_VAR 0 8
5322: IFFALSE 5365
// begin for i in tmp do
5324: LD_ADDR_VAR 0 7
5328: PUSH
5329: LD_VAR 0 8
5333: PUSH
5334: FOR_IN
5335: IFFALSE 5363
// if i [ 1 ] = b_ext_radio then
5337: LD_VAR 0 7
5341: PUSH
5342: LD_INT 1
5344: ARRAY
5345: PUSH
5346: LD_INT 22
5348: EQUAL
5349: IFFALSE 5361
// begin control := control_remote ;
5351: LD_ADDR_VAR 0 4
5355: PUSH
5356: LD_INT 2
5358: ST_TO_ADDR
// break ;
5359: GO 5363
// end ;
5361: GO 5334
5363: POP
5364: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5365: LD_VAR 0 1
5369: PPUSH
5370: LD_VAR 0 2
5374: PPUSH
5375: LD_VAR 0 3
5379: PPUSH
5380: LD_VAR 0 4
5384: PPUSH
5385: LD_VAR 0 5
5389: PPUSH
5390: CALL_OW 448
5394: IFFALSE 5429
// begin result := [ chassis , engine , control , weapon ] ;
5396: LD_ADDR_VAR 0 6
5400: PUSH
5401: LD_VAR 0 2
5405: PUSH
5406: LD_VAR 0 3
5410: PUSH
5411: LD_VAR 0 4
5415: PUSH
5416: LD_VAR 0 5
5420: PUSH
5421: EMPTY
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: ST_TO_ADDR
// exit ;
5427: GO 5841
// end ; _chassis := AvailableChassisList ( factory ) ;
5429: LD_ADDR_VAR 0 9
5433: PUSH
5434: LD_VAR 0 1
5438: PPUSH
5439: CALL_OW 475
5443: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5444: LD_ADDR_VAR 0 11
5448: PUSH
5449: LD_VAR 0 1
5453: PPUSH
5454: CALL_OW 476
5458: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5459: LD_ADDR_VAR 0 12
5463: PUSH
5464: LD_VAR 0 1
5468: PPUSH
5469: CALL_OW 477
5473: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5474: LD_ADDR_VAR 0 10
5478: PUSH
5479: LD_VAR 0 1
5483: PPUSH
5484: CALL_OW 478
5488: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5489: LD_VAR 0 9
5493: NOT
5494: PUSH
5495: LD_VAR 0 11
5499: NOT
5500: OR
5501: PUSH
5502: LD_VAR 0 12
5506: NOT
5507: OR
5508: PUSH
5509: LD_VAR 0 10
5513: NOT
5514: OR
5515: IFFALSE 5550
// begin result := [ chassis , engine , control , weapon ] ;
5517: LD_ADDR_VAR 0 6
5521: PUSH
5522: LD_VAR 0 2
5526: PUSH
5527: LD_VAR 0 3
5531: PUSH
5532: LD_VAR 0 4
5536: PUSH
5537: LD_VAR 0 5
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: ST_TO_ADDR
// exit ;
5548: GO 5841
// end ; if not chassis in _chassis then
5550: LD_VAR 0 2
5554: PUSH
5555: LD_VAR 0 9
5559: IN
5560: NOT
5561: IFFALSE 5587
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5563: LD_ADDR_VAR 0 2
5567: PUSH
5568: LD_VAR 0 9
5572: PUSH
5573: LD_INT 1
5575: PPUSH
5576: LD_VAR 0 9
5580: PPUSH
5581: CALL_OW 12
5585: ARRAY
5586: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5587: LD_VAR 0 2
5591: PPUSH
5592: LD_VAR 0 3
5596: PPUSH
5597: CALL 5846 0 2
5601: NOT
5602: IFFALSE 5661
// repeat engine := _engine [ 1 ] ;
5604: LD_ADDR_VAR 0 3
5608: PUSH
5609: LD_VAR 0 11
5613: PUSH
5614: LD_INT 1
5616: ARRAY
5617: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5618: LD_ADDR_VAR 0 11
5622: PUSH
5623: LD_VAR 0 11
5627: PPUSH
5628: LD_INT 1
5630: PPUSH
5631: CALL_OW 3
5635: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5636: LD_VAR 0 2
5640: PPUSH
5641: LD_VAR 0 3
5645: PPUSH
5646: CALL 5846 0 2
5650: PUSH
5651: LD_VAR 0 11
5655: PUSH
5656: EMPTY
5657: EQUAL
5658: OR
5659: IFFALSE 5604
// if not control in _control then
5661: LD_VAR 0 4
5665: PUSH
5666: LD_VAR 0 12
5670: IN
5671: NOT
5672: IFFALSE 5698
// control := _control [ rand ( 1 , _control ) ] ;
5674: LD_ADDR_VAR 0 4
5678: PUSH
5679: LD_VAR 0 12
5683: PUSH
5684: LD_INT 1
5686: PPUSH
5687: LD_VAR 0 12
5691: PPUSH
5692: CALL_OW 12
5696: ARRAY
5697: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5698: LD_VAR 0 2
5702: PPUSH
5703: LD_VAR 0 5
5707: PPUSH
5708: CALL 6066 0 2
5712: NOT
5713: IFFALSE 5772
// repeat weapon := _weapon [ 1 ] ;
5715: LD_ADDR_VAR 0 5
5719: PUSH
5720: LD_VAR 0 10
5724: PUSH
5725: LD_INT 1
5727: ARRAY
5728: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5729: LD_ADDR_VAR 0 10
5733: PUSH
5734: LD_VAR 0 10
5738: PPUSH
5739: LD_INT 1
5741: PPUSH
5742: CALL_OW 3
5746: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5747: LD_VAR 0 2
5751: PPUSH
5752: LD_VAR 0 5
5756: PPUSH
5757: CALL 6066 0 2
5761: PUSH
5762: LD_VAR 0 10
5766: PUSH
5767: EMPTY
5768: EQUAL
5769: OR
5770: IFFALSE 5715
// result := [ ] ;
5772: LD_ADDR_VAR 0 6
5776: PUSH
5777: EMPTY
5778: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5779: LD_VAR 0 1
5783: PPUSH
5784: LD_VAR 0 2
5788: PPUSH
5789: LD_VAR 0 3
5793: PPUSH
5794: LD_VAR 0 4
5798: PPUSH
5799: LD_VAR 0 5
5803: PPUSH
5804: CALL_OW 448
5808: IFFALSE 5841
// result := [ chassis , engine , control , weapon ] ;
5810: LD_ADDR_VAR 0 6
5814: PUSH
5815: LD_VAR 0 2
5819: PUSH
5820: LD_VAR 0 3
5824: PUSH
5825: LD_VAR 0 4
5829: PUSH
5830: LD_VAR 0 5
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: LIST
5839: LIST
5840: ST_TO_ADDR
// end ;
5841: LD_VAR 0 6
5845: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5846: LD_INT 0
5848: PPUSH
// if not chassis or not engine then
5849: LD_VAR 0 1
5853: NOT
5854: PUSH
5855: LD_VAR 0 2
5859: NOT
5860: OR
5861: IFFALSE 5865
// exit ;
5863: GO 6061
// case engine of engine_solar :
5865: LD_VAR 0 2
5869: PUSH
5870: LD_INT 2
5872: DOUBLE
5873: EQUAL
5874: IFTRUE 5878
5876: GO 5916
5878: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5879: LD_ADDR_VAR 0 3
5883: PUSH
5884: LD_INT 11
5886: PUSH
5887: LD_INT 12
5889: PUSH
5890: LD_INT 13
5892: PUSH
5893: LD_INT 14
5895: PUSH
5896: LD_INT 1
5898: PUSH
5899: LD_INT 2
5901: PUSH
5902: LD_INT 3
5904: PUSH
5905: EMPTY
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: ST_TO_ADDR
5914: GO 6045
5916: LD_INT 1
5918: DOUBLE
5919: EQUAL
5920: IFTRUE 5924
5922: GO 5986
5924: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
5925: LD_ADDR_VAR 0 3
5929: PUSH
5930: LD_INT 11
5932: PUSH
5933: LD_INT 12
5935: PUSH
5936: LD_INT 13
5938: PUSH
5939: LD_INT 14
5941: PUSH
5942: LD_INT 1
5944: PUSH
5945: LD_INT 2
5947: PUSH
5948: LD_INT 3
5950: PUSH
5951: LD_INT 4
5953: PUSH
5954: LD_INT 5
5956: PUSH
5957: LD_INT 21
5959: PUSH
5960: LD_INT 23
5962: PUSH
5963: LD_INT 22
5965: PUSH
5966: LD_INT 24
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: ST_TO_ADDR
5984: GO 6045
5986: LD_INT 3
5988: DOUBLE
5989: EQUAL
5990: IFTRUE 5994
5992: GO 6044
5994: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5995: LD_ADDR_VAR 0 3
5999: PUSH
6000: LD_INT 13
6002: PUSH
6003: LD_INT 14
6005: PUSH
6006: LD_INT 2
6008: PUSH
6009: LD_INT 3
6011: PUSH
6012: LD_INT 4
6014: PUSH
6015: LD_INT 5
6017: PUSH
6018: LD_INT 21
6020: PUSH
6021: LD_INT 22
6023: PUSH
6024: LD_INT 23
6026: PUSH
6027: LD_INT 24
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: ST_TO_ADDR
6042: GO 6045
6044: POP
// result := ( chassis in result ) ;
6045: LD_ADDR_VAR 0 3
6049: PUSH
6050: LD_VAR 0 1
6054: PUSH
6055: LD_VAR 0 3
6059: IN
6060: ST_TO_ADDR
// end ;
6061: LD_VAR 0 3
6065: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6066: LD_INT 0
6068: PPUSH
// if not chassis or not weapon then
6069: LD_VAR 0 1
6073: NOT
6074: PUSH
6075: LD_VAR 0 2
6079: NOT
6080: OR
6081: IFFALSE 6085
// exit ;
6083: GO 7145
// case weapon of us_machine_gun :
6085: LD_VAR 0 2
6089: PUSH
6090: LD_INT 2
6092: DOUBLE
6093: EQUAL
6094: IFTRUE 6098
6096: GO 6128
6098: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6099: LD_ADDR_VAR 0 3
6103: PUSH
6104: LD_INT 1
6106: PUSH
6107: LD_INT 2
6109: PUSH
6110: LD_INT 3
6112: PUSH
6113: LD_INT 4
6115: PUSH
6116: LD_INT 5
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: ST_TO_ADDR
6126: GO 7129
6128: LD_INT 3
6130: DOUBLE
6131: EQUAL
6132: IFTRUE 6136
6134: GO 6166
6136: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6137: LD_ADDR_VAR 0 3
6141: PUSH
6142: LD_INT 1
6144: PUSH
6145: LD_INT 2
6147: PUSH
6148: LD_INT 3
6150: PUSH
6151: LD_INT 4
6153: PUSH
6154: LD_INT 5
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: ST_TO_ADDR
6164: GO 7129
6166: LD_INT 11
6168: DOUBLE
6169: EQUAL
6170: IFTRUE 6174
6172: GO 6204
6174: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6175: LD_ADDR_VAR 0 3
6179: PUSH
6180: LD_INT 1
6182: PUSH
6183: LD_INT 2
6185: PUSH
6186: LD_INT 3
6188: PUSH
6189: LD_INT 4
6191: PUSH
6192: LD_INT 5
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: ST_TO_ADDR
6202: GO 7129
6204: LD_INT 4
6206: DOUBLE
6207: EQUAL
6208: IFTRUE 6212
6210: GO 6238
6212: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6213: LD_ADDR_VAR 0 3
6217: PUSH
6218: LD_INT 2
6220: PUSH
6221: LD_INT 3
6223: PUSH
6224: LD_INT 4
6226: PUSH
6227: LD_INT 5
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: ST_TO_ADDR
6236: GO 7129
6238: LD_INT 5
6240: DOUBLE
6241: EQUAL
6242: IFTRUE 6246
6244: GO 6272
6246: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6247: LD_ADDR_VAR 0 3
6251: PUSH
6252: LD_INT 2
6254: PUSH
6255: LD_INT 3
6257: PUSH
6258: LD_INT 4
6260: PUSH
6261: LD_INT 5
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: ST_TO_ADDR
6270: GO 7129
6272: LD_INT 9
6274: DOUBLE
6275: EQUAL
6276: IFTRUE 6280
6278: GO 6306
6280: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6281: LD_ADDR_VAR 0 3
6285: PUSH
6286: LD_INT 2
6288: PUSH
6289: LD_INT 3
6291: PUSH
6292: LD_INT 4
6294: PUSH
6295: LD_INT 5
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: ST_TO_ADDR
6304: GO 7129
6306: LD_INT 7
6308: DOUBLE
6309: EQUAL
6310: IFTRUE 6314
6312: GO 6340
6314: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6315: LD_ADDR_VAR 0 3
6319: PUSH
6320: LD_INT 2
6322: PUSH
6323: LD_INT 3
6325: PUSH
6326: LD_INT 4
6328: PUSH
6329: LD_INT 5
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: ST_TO_ADDR
6338: GO 7129
6340: LD_INT 12
6342: DOUBLE
6343: EQUAL
6344: IFTRUE 6348
6346: GO 6374
6348: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6349: LD_ADDR_VAR 0 3
6353: PUSH
6354: LD_INT 2
6356: PUSH
6357: LD_INT 3
6359: PUSH
6360: LD_INT 4
6362: PUSH
6363: LD_INT 5
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: ST_TO_ADDR
6372: GO 7129
6374: LD_INT 13
6376: DOUBLE
6377: EQUAL
6378: IFTRUE 6382
6380: GO 6408
6382: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6383: LD_ADDR_VAR 0 3
6387: PUSH
6388: LD_INT 2
6390: PUSH
6391: LD_INT 3
6393: PUSH
6394: LD_INT 4
6396: PUSH
6397: LD_INT 5
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: ST_TO_ADDR
6406: GO 7129
6408: LD_INT 14
6410: DOUBLE
6411: EQUAL
6412: IFTRUE 6416
6414: GO 6434
6416: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6417: LD_ADDR_VAR 0 3
6421: PUSH
6422: LD_INT 4
6424: PUSH
6425: LD_INT 5
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: ST_TO_ADDR
6432: GO 7129
6434: LD_INT 6
6436: DOUBLE
6437: EQUAL
6438: IFTRUE 6442
6440: GO 6460
6442: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6443: LD_ADDR_VAR 0 3
6447: PUSH
6448: LD_INT 4
6450: PUSH
6451: LD_INT 5
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: ST_TO_ADDR
6458: GO 7129
6460: LD_INT 10
6462: DOUBLE
6463: EQUAL
6464: IFTRUE 6468
6466: GO 6486
6468: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6469: LD_ADDR_VAR 0 3
6473: PUSH
6474: LD_INT 4
6476: PUSH
6477: LD_INT 5
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: ST_TO_ADDR
6484: GO 7129
6486: LD_INT 22
6488: DOUBLE
6489: EQUAL
6490: IFTRUE 6494
6492: GO 6520
6494: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6495: LD_ADDR_VAR 0 3
6499: PUSH
6500: LD_INT 11
6502: PUSH
6503: LD_INT 12
6505: PUSH
6506: LD_INT 13
6508: PUSH
6509: LD_INT 14
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: ST_TO_ADDR
6518: GO 7129
6520: LD_INT 23
6522: DOUBLE
6523: EQUAL
6524: IFTRUE 6528
6526: GO 6554
6528: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6529: LD_ADDR_VAR 0 3
6533: PUSH
6534: LD_INT 11
6536: PUSH
6537: LD_INT 12
6539: PUSH
6540: LD_INT 13
6542: PUSH
6543: LD_INT 14
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: ST_TO_ADDR
6552: GO 7129
6554: LD_INT 24
6556: DOUBLE
6557: EQUAL
6558: IFTRUE 6562
6560: GO 6588
6562: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6563: LD_ADDR_VAR 0 3
6567: PUSH
6568: LD_INT 11
6570: PUSH
6571: LD_INT 12
6573: PUSH
6574: LD_INT 13
6576: PUSH
6577: LD_INT 14
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: ST_TO_ADDR
6586: GO 7129
6588: LD_INT 30
6590: DOUBLE
6591: EQUAL
6592: IFTRUE 6596
6594: GO 6622
6596: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6597: LD_ADDR_VAR 0 3
6601: PUSH
6602: LD_INT 11
6604: PUSH
6605: LD_INT 12
6607: PUSH
6608: LD_INT 13
6610: PUSH
6611: LD_INT 14
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: ST_TO_ADDR
6620: GO 7129
6622: LD_INT 25
6624: DOUBLE
6625: EQUAL
6626: IFTRUE 6630
6628: GO 6648
6630: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6631: LD_ADDR_VAR 0 3
6635: PUSH
6636: LD_INT 13
6638: PUSH
6639: LD_INT 14
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: ST_TO_ADDR
6646: GO 7129
6648: LD_INT 27
6650: DOUBLE
6651: EQUAL
6652: IFTRUE 6656
6654: GO 6674
6656: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6657: LD_ADDR_VAR 0 3
6661: PUSH
6662: LD_INT 13
6664: PUSH
6665: LD_INT 14
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: ST_TO_ADDR
6672: GO 7129
6674: LD_INT 92
6676: DOUBLE
6677: EQUAL
6678: IFTRUE 6682
6680: GO 6708
6682: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6683: LD_ADDR_VAR 0 3
6687: PUSH
6688: LD_INT 11
6690: PUSH
6691: LD_INT 12
6693: PUSH
6694: LD_INT 13
6696: PUSH
6697: LD_INT 14
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: ST_TO_ADDR
6706: GO 7129
6708: LD_INT 28
6710: DOUBLE
6711: EQUAL
6712: IFTRUE 6716
6714: GO 6734
6716: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6717: LD_ADDR_VAR 0 3
6721: PUSH
6722: LD_INT 13
6724: PUSH
6725: LD_INT 14
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: ST_TO_ADDR
6732: GO 7129
6734: LD_INT 29
6736: DOUBLE
6737: EQUAL
6738: IFTRUE 6742
6740: GO 6760
6742: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6743: LD_ADDR_VAR 0 3
6747: PUSH
6748: LD_INT 13
6750: PUSH
6751: LD_INT 14
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: ST_TO_ADDR
6758: GO 7129
6760: LD_INT 31
6762: DOUBLE
6763: EQUAL
6764: IFTRUE 6768
6766: GO 6786
6768: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6769: LD_ADDR_VAR 0 3
6773: PUSH
6774: LD_INT 13
6776: PUSH
6777: LD_INT 14
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: ST_TO_ADDR
6784: GO 7129
6786: LD_INT 26
6788: DOUBLE
6789: EQUAL
6790: IFTRUE 6794
6792: GO 6812
6794: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6795: LD_ADDR_VAR 0 3
6799: PUSH
6800: LD_INT 13
6802: PUSH
6803: LD_INT 14
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: ST_TO_ADDR
6810: GO 7129
6812: LD_INT 42
6814: DOUBLE
6815: EQUAL
6816: IFTRUE 6820
6818: GO 6846
6820: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6821: LD_ADDR_VAR 0 3
6825: PUSH
6826: LD_INT 21
6828: PUSH
6829: LD_INT 22
6831: PUSH
6832: LD_INT 23
6834: PUSH
6835: LD_INT 24
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: ST_TO_ADDR
6844: GO 7129
6846: LD_INT 43
6848: DOUBLE
6849: EQUAL
6850: IFTRUE 6854
6852: GO 6880
6854: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6855: LD_ADDR_VAR 0 3
6859: PUSH
6860: LD_INT 21
6862: PUSH
6863: LD_INT 22
6865: PUSH
6866: LD_INT 23
6868: PUSH
6869: LD_INT 24
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: ST_TO_ADDR
6878: GO 7129
6880: LD_INT 44
6882: DOUBLE
6883: EQUAL
6884: IFTRUE 6888
6886: GO 6914
6888: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
6889: LD_ADDR_VAR 0 3
6893: PUSH
6894: LD_INT 21
6896: PUSH
6897: LD_INT 22
6899: PUSH
6900: LD_INT 23
6902: PUSH
6903: LD_INT 24
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: ST_TO_ADDR
6912: GO 7129
6914: LD_INT 45
6916: DOUBLE
6917: EQUAL
6918: IFTRUE 6922
6920: GO 6948
6922: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
6923: LD_ADDR_VAR 0 3
6927: PUSH
6928: LD_INT 21
6930: PUSH
6931: LD_INT 22
6933: PUSH
6934: LD_INT 23
6936: PUSH
6937: LD_INT 24
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: ST_TO_ADDR
6946: GO 7129
6948: LD_INT 49
6950: DOUBLE
6951: EQUAL
6952: IFTRUE 6956
6954: GO 6982
6956: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
6957: LD_ADDR_VAR 0 3
6961: PUSH
6962: LD_INT 21
6964: PUSH
6965: LD_INT 22
6967: PUSH
6968: LD_INT 23
6970: PUSH
6971: LD_INT 24
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: ST_TO_ADDR
6980: GO 7129
6982: LD_INT 51
6984: DOUBLE
6985: EQUAL
6986: IFTRUE 6990
6988: GO 7016
6990: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
6991: LD_ADDR_VAR 0 3
6995: PUSH
6996: LD_INT 21
6998: PUSH
6999: LD_INT 22
7001: PUSH
7002: LD_INT 23
7004: PUSH
7005: LD_INT 24
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: ST_TO_ADDR
7014: GO 7129
7016: LD_INT 52
7018: DOUBLE
7019: EQUAL
7020: IFTRUE 7024
7022: GO 7050
7024: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7025: LD_ADDR_VAR 0 3
7029: PUSH
7030: LD_INT 21
7032: PUSH
7033: LD_INT 22
7035: PUSH
7036: LD_INT 23
7038: PUSH
7039: LD_INT 24
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: ST_TO_ADDR
7048: GO 7129
7050: LD_INT 53
7052: DOUBLE
7053: EQUAL
7054: IFTRUE 7058
7056: GO 7076
7058: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7059: LD_ADDR_VAR 0 3
7063: PUSH
7064: LD_INT 23
7066: PUSH
7067: LD_INT 24
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: ST_TO_ADDR
7074: GO 7129
7076: LD_INT 46
7078: DOUBLE
7079: EQUAL
7080: IFTRUE 7084
7082: GO 7102
7084: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7085: LD_ADDR_VAR 0 3
7089: PUSH
7090: LD_INT 23
7092: PUSH
7093: LD_INT 24
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: ST_TO_ADDR
7100: GO 7129
7102: LD_INT 47
7104: DOUBLE
7105: EQUAL
7106: IFTRUE 7110
7108: GO 7128
7110: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7111: LD_ADDR_VAR 0 3
7115: PUSH
7116: LD_INT 23
7118: PUSH
7119: LD_INT 24
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: ST_TO_ADDR
7126: GO 7129
7128: POP
// result := ( chassis in result ) ;
7129: LD_ADDR_VAR 0 3
7133: PUSH
7134: LD_VAR 0 1
7138: PUSH
7139: LD_VAR 0 3
7143: IN
7144: ST_TO_ADDR
// end ;
7145: LD_VAR 0 3
7149: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7150: LD_INT 0
7152: PPUSH
7153: PPUSH
7154: PPUSH
7155: PPUSH
7156: PPUSH
7157: PPUSH
7158: PPUSH
// result := array ;
7159: LD_ADDR_VAR 0 5
7163: PUSH
7164: LD_VAR 0 1
7168: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7169: LD_VAR 0 1
7173: NOT
7174: PUSH
7175: LD_VAR 0 2
7179: NOT
7180: OR
7181: PUSH
7182: LD_VAR 0 3
7186: NOT
7187: OR
7188: PUSH
7189: LD_VAR 0 2
7193: PUSH
7194: LD_VAR 0 1
7198: GREATER
7199: OR
7200: PUSH
7201: LD_VAR 0 3
7205: PUSH
7206: LD_VAR 0 1
7210: GREATER
7211: OR
7212: IFFALSE 7216
// exit ;
7214: GO 7512
// if direction then
7216: LD_VAR 0 4
7220: IFFALSE 7284
// begin d := 1 ;
7222: LD_ADDR_VAR 0 9
7226: PUSH
7227: LD_INT 1
7229: ST_TO_ADDR
// if i_from > i_to then
7230: LD_VAR 0 2
7234: PUSH
7235: LD_VAR 0 3
7239: GREATER
7240: IFFALSE 7266
// length := ( array - i_from ) + i_to else
7242: LD_ADDR_VAR 0 11
7246: PUSH
7247: LD_VAR 0 1
7251: PUSH
7252: LD_VAR 0 2
7256: MINUS
7257: PUSH
7258: LD_VAR 0 3
7262: PLUS
7263: ST_TO_ADDR
7264: GO 7282
// length := i_to - i_from ;
7266: LD_ADDR_VAR 0 11
7270: PUSH
7271: LD_VAR 0 3
7275: PUSH
7276: LD_VAR 0 2
7280: MINUS
7281: ST_TO_ADDR
// end else
7282: GO 7345
// begin d := - 1 ;
7284: LD_ADDR_VAR 0 9
7288: PUSH
7289: LD_INT 1
7291: NEG
7292: ST_TO_ADDR
// if i_from > i_to then
7293: LD_VAR 0 2
7297: PUSH
7298: LD_VAR 0 3
7302: GREATER
7303: IFFALSE 7323
// length := i_from - i_to else
7305: LD_ADDR_VAR 0 11
7309: PUSH
7310: LD_VAR 0 2
7314: PUSH
7315: LD_VAR 0 3
7319: MINUS
7320: ST_TO_ADDR
7321: GO 7345
// length := ( array - i_to ) + i_from ;
7323: LD_ADDR_VAR 0 11
7327: PUSH
7328: LD_VAR 0 1
7332: PUSH
7333: LD_VAR 0 3
7337: MINUS
7338: PUSH
7339: LD_VAR 0 2
7343: PLUS
7344: ST_TO_ADDR
// end ; if not length then
7345: LD_VAR 0 11
7349: NOT
7350: IFFALSE 7354
// exit ;
7352: GO 7512
// tmp := array ;
7354: LD_ADDR_VAR 0 10
7358: PUSH
7359: LD_VAR 0 1
7363: ST_TO_ADDR
// for i = 1 to length do
7364: LD_ADDR_VAR 0 6
7368: PUSH
7369: DOUBLE
7370: LD_INT 1
7372: DEC
7373: ST_TO_ADDR
7374: LD_VAR 0 11
7378: PUSH
7379: FOR_TO
7380: IFFALSE 7500
// begin for j = 1 to array do
7382: LD_ADDR_VAR 0 7
7386: PUSH
7387: DOUBLE
7388: LD_INT 1
7390: DEC
7391: ST_TO_ADDR
7392: LD_VAR 0 1
7396: PUSH
7397: FOR_TO
7398: IFFALSE 7486
// begin k := j + d ;
7400: LD_ADDR_VAR 0 8
7404: PUSH
7405: LD_VAR 0 7
7409: PUSH
7410: LD_VAR 0 9
7414: PLUS
7415: ST_TO_ADDR
// if k > array then
7416: LD_VAR 0 8
7420: PUSH
7421: LD_VAR 0 1
7425: GREATER
7426: IFFALSE 7436
// k := 1 ;
7428: LD_ADDR_VAR 0 8
7432: PUSH
7433: LD_INT 1
7435: ST_TO_ADDR
// if not k then
7436: LD_VAR 0 8
7440: NOT
7441: IFFALSE 7453
// k := array ;
7443: LD_ADDR_VAR 0 8
7447: PUSH
7448: LD_VAR 0 1
7452: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7453: LD_ADDR_VAR 0 10
7457: PUSH
7458: LD_VAR 0 10
7462: PPUSH
7463: LD_VAR 0 8
7467: PPUSH
7468: LD_VAR 0 1
7472: PUSH
7473: LD_VAR 0 7
7477: ARRAY
7478: PPUSH
7479: CALL_OW 1
7483: ST_TO_ADDR
// end ;
7484: GO 7397
7486: POP
7487: POP
// array := tmp ;
7488: LD_ADDR_VAR 0 1
7492: PUSH
7493: LD_VAR 0 10
7497: ST_TO_ADDR
// end ;
7498: GO 7379
7500: POP
7501: POP
// result := array ;
7502: LD_ADDR_VAR 0 5
7506: PUSH
7507: LD_VAR 0 1
7511: ST_TO_ADDR
// end ;
7512: LD_VAR 0 5
7516: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7517: LD_INT 0
7519: PPUSH
7520: PPUSH
// result := 0 ;
7521: LD_ADDR_VAR 0 3
7525: PUSH
7526: LD_INT 0
7528: ST_TO_ADDR
// if not array or not value in array then
7529: LD_VAR 0 1
7533: NOT
7534: PUSH
7535: LD_VAR 0 2
7539: PUSH
7540: LD_VAR 0 1
7544: IN
7545: NOT
7546: OR
7547: IFFALSE 7551
// exit ;
7549: GO 7605
// for i = 1 to array do
7551: LD_ADDR_VAR 0 4
7555: PUSH
7556: DOUBLE
7557: LD_INT 1
7559: DEC
7560: ST_TO_ADDR
7561: LD_VAR 0 1
7565: PUSH
7566: FOR_TO
7567: IFFALSE 7603
// if value = array [ i ] then
7569: LD_VAR 0 2
7573: PUSH
7574: LD_VAR 0 1
7578: PUSH
7579: LD_VAR 0 4
7583: ARRAY
7584: EQUAL
7585: IFFALSE 7601
// begin result := i ;
7587: LD_ADDR_VAR 0 3
7591: PUSH
7592: LD_VAR 0 4
7596: ST_TO_ADDR
// exit ;
7597: POP
7598: POP
7599: GO 7605
// end ;
7601: GO 7566
7603: POP
7604: POP
// end ;
7605: LD_VAR 0 3
7609: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7610: LD_INT 0
7612: PPUSH
// vc_chassis := chassis ;
7613: LD_ADDR_OWVAR 37
7617: PUSH
7618: LD_VAR 0 1
7622: ST_TO_ADDR
// vc_engine := engine ;
7623: LD_ADDR_OWVAR 39
7627: PUSH
7628: LD_VAR 0 2
7632: ST_TO_ADDR
// vc_control := control ;
7633: LD_ADDR_OWVAR 38
7637: PUSH
7638: LD_VAR 0 3
7642: ST_TO_ADDR
// vc_weapon := weapon ;
7643: LD_ADDR_OWVAR 40
7647: PUSH
7648: LD_VAR 0 4
7652: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7653: LD_ADDR_OWVAR 41
7657: PUSH
7658: LD_VAR 0 5
7662: ST_TO_ADDR
// end ;
7663: LD_VAR 0 6
7667: RET
// export function WantPlant ( unit ) ; var task ; begin
7668: LD_INT 0
7670: PPUSH
7671: PPUSH
// result := false ;
7672: LD_ADDR_VAR 0 2
7676: PUSH
7677: LD_INT 0
7679: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7680: LD_ADDR_VAR 0 3
7684: PUSH
7685: LD_VAR 0 1
7689: PPUSH
7690: CALL_OW 437
7694: ST_TO_ADDR
// if task then
7695: LD_VAR 0 3
7699: IFFALSE 7727
// if task [ 1 ] [ 1 ] = p then
7701: LD_VAR 0 3
7705: PUSH
7706: LD_INT 1
7708: ARRAY
7709: PUSH
7710: LD_INT 1
7712: ARRAY
7713: PUSH
7714: LD_STRING p
7716: EQUAL
7717: IFFALSE 7727
// result := true ;
7719: LD_ADDR_VAR 0 2
7723: PUSH
7724: LD_INT 1
7726: ST_TO_ADDR
// end ;
7727: LD_VAR 0 2
7731: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7732: LD_INT 0
7734: PPUSH
7735: PPUSH
7736: PPUSH
7737: PPUSH
// if pos < 1 then
7738: LD_VAR 0 2
7742: PUSH
7743: LD_INT 1
7745: LESS
7746: IFFALSE 7750
// exit ;
7748: GO 8053
// if pos = 1 then
7750: LD_VAR 0 2
7754: PUSH
7755: LD_INT 1
7757: EQUAL
7758: IFFALSE 7791
// result := Replace ( arr , pos [ 1 ] , value ) else
7760: LD_ADDR_VAR 0 4
7764: PUSH
7765: LD_VAR 0 1
7769: PPUSH
7770: LD_VAR 0 2
7774: PUSH
7775: LD_INT 1
7777: ARRAY
7778: PPUSH
7779: LD_VAR 0 3
7783: PPUSH
7784: CALL_OW 1
7788: ST_TO_ADDR
7789: GO 8053
// begin tmp := arr ;
7791: LD_ADDR_VAR 0 6
7795: PUSH
7796: LD_VAR 0 1
7800: ST_TO_ADDR
// s_arr := [ tmp ] ;
7801: LD_ADDR_VAR 0 7
7805: PUSH
7806: LD_VAR 0 6
7810: PUSH
7811: EMPTY
7812: LIST
7813: ST_TO_ADDR
// for i = 1 to pos - 1 do
7814: LD_ADDR_VAR 0 5
7818: PUSH
7819: DOUBLE
7820: LD_INT 1
7822: DEC
7823: ST_TO_ADDR
7824: LD_VAR 0 2
7828: PUSH
7829: LD_INT 1
7831: MINUS
7832: PUSH
7833: FOR_TO
7834: IFFALSE 7879
// begin tmp := tmp [ pos [ i ] ] ;
7836: LD_ADDR_VAR 0 6
7840: PUSH
7841: LD_VAR 0 6
7845: PUSH
7846: LD_VAR 0 2
7850: PUSH
7851: LD_VAR 0 5
7855: ARRAY
7856: ARRAY
7857: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7858: LD_ADDR_VAR 0 7
7862: PUSH
7863: LD_VAR 0 7
7867: PUSH
7868: LD_VAR 0 6
7872: PUSH
7873: EMPTY
7874: LIST
7875: ADD
7876: ST_TO_ADDR
// end ;
7877: GO 7833
7879: POP
7880: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7881: LD_ADDR_VAR 0 6
7885: PUSH
7886: LD_VAR 0 6
7890: PPUSH
7891: LD_VAR 0 2
7895: PUSH
7896: LD_VAR 0 2
7900: ARRAY
7901: PPUSH
7902: LD_VAR 0 3
7906: PPUSH
7907: CALL_OW 1
7911: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
7912: LD_ADDR_VAR 0 7
7916: PUSH
7917: LD_VAR 0 7
7921: PPUSH
7922: LD_VAR 0 7
7926: PPUSH
7927: LD_VAR 0 6
7931: PPUSH
7932: CALL_OW 1
7936: ST_TO_ADDR
// for i = s_arr downto 2 do
7937: LD_ADDR_VAR 0 5
7941: PUSH
7942: DOUBLE
7943: LD_VAR 0 7
7947: INC
7948: ST_TO_ADDR
7949: LD_INT 2
7951: PUSH
7952: FOR_DOWNTO
7953: IFFALSE 8037
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
7955: LD_ADDR_VAR 0 6
7959: PUSH
7960: LD_VAR 0 7
7964: PUSH
7965: LD_VAR 0 5
7969: PUSH
7970: LD_INT 1
7972: MINUS
7973: ARRAY
7974: PPUSH
7975: LD_VAR 0 2
7979: PUSH
7980: LD_VAR 0 5
7984: PUSH
7985: LD_INT 1
7987: MINUS
7988: ARRAY
7989: PPUSH
7990: LD_VAR 0 7
7994: PUSH
7995: LD_VAR 0 5
7999: ARRAY
8000: PPUSH
8001: CALL_OW 1
8005: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8006: LD_ADDR_VAR 0 7
8010: PUSH
8011: LD_VAR 0 7
8015: PPUSH
8016: LD_VAR 0 5
8020: PUSH
8021: LD_INT 1
8023: MINUS
8024: PPUSH
8025: LD_VAR 0 6
8029: PPUSH
8030: CALL_OW 1
8034: ST_TO_ADDR
// end ;
8035: GO 7952
8037: POP
8038: POP
// result := s_arr [ 1 ] ;
8039: LD_ADDR_VAR 0 4
8043: PUSH
8044: LD_VAR 0 7
8048: PUSH
8049: LD_INT 1
8051: ARRAY
8052: ST_TO_ADDR
// end ; end ;
8053: LD_VAR 0 4
8057: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8058: LD_INT 0
8060: PPUSH
8061: PPUSH
// if not list then
8062: LD_VAR 0 1
8066: NOT
8067: IFFALSE 8071
// exit ;
8069: GO 8162
// i := list [ pos1 ] ;
8071: LD_ADDR_VAR 0 5
8075: PUSH
8076: LD_VAR 0 1
8080: PUSH
8081: LD_VAR 0 2
8085: ARRAY
8086: ST_TO_ADDR
// if not i then
8087: LD_VAR 0 5
8091: NOT
8092: IFFALSE 8096
// exit ;
8094: GO 8162
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8096: LD_ADDR_VAR 0 1
8100: PUSH
8101: LD_VAR 0 1
8105: PPUSH
8106: LD_VAR 0 2
8110: PPUSH
8111: LD_VAR 0 1
8115: PUSH
8116: LD_VAR 0 3
8120: ARRAY
8121: PPUSH
8122: CALL_OW 1
8126: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8127: LD_ADDR_VAR 0 1
8131: PUSH
8132: LD_VAR 0 1
8136: PPUSH
8137: LD_VAR 0 3
8141: PPUSH
8142: LD_VAR 0 5
8146: PPUSH
8147: CALL_OW 1
8151: ST_TO_ADDR
// result := list ;
8152: LD_ADDR_VAR 0 4
8156: PUSH
8157: LD_VAR 0 1
8161: ST_TO_ADDR
// end ;
8162: LD_VAR 0 4
8166: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8167: LD_INT 0
8169: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8170: LD_ADDR_VAR 0 5
8174: PUSH
8175: LD_VAR 0 1
8179: PPUSH
8180: CALL_OW 250
8184: PPUSH
8185: LD_VAR 0 1
8189: PPUSH
8190: CALL_OW 251
8194: PPUSH
8195: LD_VAR 0 2
8199: PPUSH
8200: LD_VAR 0 3
8204: PPUSH
8205: LD_VAR 0 4
8209: PPUSH
8210: CALL 8588 0 5
8214: ST_TO_ADDR
// end ;
8215: LD_VAR 0 5
8219: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8220: LD_INT 0
8222: PPUSH
8223: PPUSH
8224: PPUSH
8225: PPUSH
// if not list or not unit then
8226: LD_VAR 0 2
8230: NOT
8231: PUSH
8232: LD_VAR 0 1
8236: NOT
8237: OR
8238: IFFALSE 8242
// exit ;
8240: GO 8583
// result := [ ] ;
8242: LD_ADDR_VAR 0 5
8246: PUSH
8247: EMPTY
8248: ST_TO_ADDR
// for i in list do
8249: LD_ADDR_VAR 0 6
8253: PUSH
8254: LD_VAR 0 2
8258: PUSH
8259: FOR_IN
8260: IFFALSE 8478
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8262: LD_ADDR_VAR 0 8
8266: PUSH
8267: LD_VAR 0 1
8271: PPUSH
8272: LD_VAR 0 6
8276: PUSH
8277: LD_INT 1
8279: ARRAY
8280: PPUSH
8281: LD_VAR 0 6
8285: PUSH
8286: LD_INT 2
8288: ARRAY
8289: PPUSH
8290: CALL_OW 297
8294: ST_TO_ADDR
// if not Count ( result ) then
8295: LD_VAR 0 5
8299: PPUSH
8300: CALL 4872 0 1
8304: NOT
8305: IFFALSE 8338
// begin result := Join ( result , [ i , tmp ] ) ;
8307: LD_ADDR_VAR 0 5
8311: PUSH
8312: LD_VAR 0 5
8316: PPUSH
8317: LD_VAR 0 6
8321: PUSH
8322: LD_VAR 0 8
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: PPUSH
8331: CALL 40472 0 2
8335: ST_TO_ADDR
// continue ;
8336: GO 8259
// end ; if result [ result ] [ 2 ] <= tmp then
8338: LD_VAR 0 5
8342: PUSH
8343: LD_VAR 0 5
8347: ARRAY
8348: PUSH
8349: LD_INT 2
8351: ARRAY
8352: PUSH
8353: LD_VAR 0 8
8357: LESSEQUAL
8358: IFFALSE 8391
// result := Join ( result , [ i , tmp ] ) else
8360: LD_ADDR_VAR 0 5
8364: PUSH
8365: LD_VAR 0 5
8369: PPUSH
8370: LD_VAR 0 6
8374: PUSH
8375: LD_VAR 0 8
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: PPUSH
8384: CALL 40472 0 2
8388: ST_TO_ADDR
8389: GO 8476
// begin for j := 1 to Count ( result ) do
8391: LD_ADDR_VAR 0 7
8395: PUSH
8396: DOUBLE
8397: LD_INT 1
8399: DEC
8400: ST_TO_ADDR
8401: LD_VAR 0 5
8405: PPUSH
8406: CALL 4872 0 1
8410: PUSH
8411: FOR_TO
8412: IFFALSE 8474
// begin if tmp < result [ j ] [ 2 ] then
8414: LD_VAR 0 8
8418: PUSH
8419: LD_VAR 0 5
8423: PUSH
8424: LD_VAR 0 7
8428: ARRAY
8429: PUSH
8430: LD_INT 2
8432: ARRAY
8433: LESS
8434: IFFALSE 8472
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8436: LD_ADDR_VAR 0 5
8440: PUSH
8441: LD_VAR 0 5
8445: PPUSH
8446: LD_VAR 0 7
8450: PPUSH
8451: LD_VAR 0 6
8455: PUSH
8456: LD_VAR 0 8
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: PPUSH
8465: CALL_OW 2
8469: ST_TO_ADDR
// break ;
8470: GO 8474
// end ; end ;
8472: GO 8411
8474: POP
8475: POP
// end ; end ;
8476: GO 8259
8478: POP
8479: POP
// if result and not asc then
8480: LD_VAR 0 5
8484: PUSH
8485: LD_VAR 0 3
8489: NOT
8490: AND
8491: IFFALSE 8508
// result := ReverseArray ( result ) ;
8493: LD_ADDR_VAR 0 5
8497: PUSH
8498: LD_VAR 0 5
8502: PPUSH
8503: CALL 35748 0 1
8507: ST_TO_ADDR
// tmp := [ ] ;
8508: LD_ADDR_VAR 0 8
8512: PUSH
8513: EMPTY
8514: ST_TO_ADDR
// if mode then
8515: LD_VAR 0 4
8519: IFFALSE 8583
// begin for i := 1 to result do
8521: LD_ADDR_VAR 0 6
8525: PUSH
8526: DOUBLE
8527: LD_INT 1
8529: DEC
8530: ST_TO_ADDR
8531: LD_VAR 0 5
8535: PUSH
8536: FOR_TO
8537: IFFALSE 8571
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8539: LD_ADDR_VAR 0 8
8543: PUSH
8544: LD_VAR 0 8
8548: PPUSH
8549: LD_VAR 0 5
8553: PUSH
8554: LD_VAR 0 6
8558: ARRAY
8559: PUSH
8560: LD_INT 1
8562: ARRAY
8563: PPUSH
8564: CALL 40472 0 2
8568: ST_TO_ADDR
8569: GO 8536
8571: POP
8572: POP
// result := tmp ;
8573: LD_ADDR_VAR 0 5
8577: PUSH
8578: LD_VAR 0 8
8582: ST_TO_ADDR
// end ; end ;
8583: LD_VAR 0 5
8587: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8588: LD_INT 0
8590: PPUSH
8591: PPUSH
8592: PPUSH
8593: PPUSH
// if not list then
8594: LD_VAR 0 3
8598: NOT
8599: IFFALSE 8603
// exit ;
8601: GO 8991
// result := [ ] ;
8603: LD_ADDR_VAR 0 6
8607: PUSH
8608: EMPTY
8609: ST_TO_ADDR
// for i in list do
8610: LD_ADDR_VAR 0 7
8614: PUSH
8615: LD_VAR 0 3
8619: PUSH
8620: FOR_IN
8621: IFFALSE 8823
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8623: LD_ADDR_VAR 0 9
8627: PUSH
8628: LD_VAR 0 7
8632: PPUSH
8633: LD_VAR 0 1
8637: PPUSH
8638: LD_VAR 0 2
8642: PPUSH
8643: CALL_OW 297
8647: ST_TO_ADDR
// if not result then
8648: LD_VAR 0 6
8652: NOT
8653: IFFALSE 8679
// result := [ [ i , tmp ] ] else
8655: LD_ADDR_VAR 0 6
8659: PUSH
8660: LD_VAR 0 7
8664: PUSH
8665: LD_VAR 0 9
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: EMPTY
8675: LIST
8676: ST_TO_ADDR
8677: GO 8821
// begin if result [ result ] [ 2 ] < tmp then
8679: LD_VAR 0 6
8683: PUSH
8684: LD_VAR 0 6
8688: ARRAY
8689: PUSH
8690: LD_INT 2
8692: ARRAY
8693: PUSH
8694: LD_VAR 0 9
8698: LESS
8699: IFFALSE 8741
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8701: LD_ADDR_VAR 0 6
8705: PUSH
8706: LD_VAR 0 6
8710: PPUSH
8711: LD_VAR 0 6
8715: PUSH
8716: LD_INT 1
8718: PLUS
8719: PPUSH
8720: LD_VAR 0 7
8724: PUSH
8725: LD_VAR 0 9
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PPUSH
8734: CALL_OW 2
8738: ST_TO_ADDR
8739: GO 8821
// for j = 1 to result do
8741: LD_ADDR_VAR 0 8
8745: PUSH
8746: DOUBLE
8747: LD_INT 1
8749: DEC
8750: ST_TO_ADDR
8751: LD_VAR 0 6
8755: PUSH
8756: FOR_TO
8757: IFFALSE 8819
// begin if tmp < result [ j ] [ 2 ] then
8759: LD_VAR 0 9
8763: PUSH
8764: LD_VAR 0 6
8768: PUSH
8769: LD_VAR 0 8
8773: ARRAY
8774: PUSH
8775: LD_INT 2
8777: ARRAY
8778: LESS
8779: IFFALSE 8817
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8781: LD_ADDR_VAR 0 6
8785: PUSH
8786: LD_VAR 0 6
8790: PPUSH
8791: LD_VAR 0 8
8795: PPUSH
8796: LD_VAR 0 7
8800: PUSH
8801: LD_VAR 0 9
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: PPUSH
8810: CALL_OW 2
8814: ST_TO_ADDR
// break ;
8815: GO 8819
// end ; end ;
8817: GO 8756
8819: POP
8820: POP
// end ; end ;
8821: GO 8620
8823: POP
8824: POP
// if result and not asc then
8825: LD_VAR 0 6
8829: PUSH
8830: LD_VAR 0 4
8834: NOT
8835: AND
8836: IFFALSE 8911
// begin tmp := result ;
8838: LD_ADDR_VAR 0 9
8842: PUSH
8843: LD_VAR 0 6
8847: ST_TO_ADDR
// for i = tmp downto 1 do
8848: LD_ADDR_VAR 0 7
8852: PUSH
8853: DOUBLE
8854: LD_VAR 0 9
8858: INC
8859: ST_TO_ADDR
8860: LD_INT 1
8862: PUSH
8863: FOR_DOWNTO
8864: IFFALSE 8909
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8866: LD_ADDR_VAR 0 6
8870: PUSH
8871: LD_VAR 0 6
8875: PPUSH
8876: LD_VAR 0 9
8880: PUSH
8881: LD_VAR 0 7
8885: MINUS
8886: PUSH
8887: LD_INT 1
8889: PLUS
8890: PPUSH
8891: LD_VAR 0 9
8895: PUSH
8896: LD_VAR 0 7
8900: ARRAY
8901: PPUSH
8902: CALL_OW 1
8906: ST_TO_ADDR
8907: GO 8863
8909: POP
8910: POP
// end ; tmp := [ ] ;
8911: LD_ADDR_VAR 0 9
8915: PUSH
8916: EMPTY
8917: ST_TO_ADDR
// if mode then
8918: LD_VAR 0 5
8922: IFFALSE 8991
// begin for i = 1 to result do
8924: LD_ADDR_VAR 0 7
8928: PUSH
8929: DOUBLE
8930: LD_INT 1
8932: DEC
8933: ST_TO_ADDR
8934: LD_VAR 0 6
8938: PUSH
8939: FOR_TO
8940: IFFALSE 8979
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8942: LD_ADDR_VAR 0 9
8946: PUSH
8947: LD_VAR 0 9
8951: PPUSH
8952: LD_VAR 0 7
8956: PPUSH
8957: LD_VAR 0 6
8961: PUSH
8962: LD_VAR 0 7
8966: ARRAY
8967: PUSH
8968: LD_INT 1
8970: ARRAY
8971: PPUSH
8972: CALL_OW 1
8976: ST_TO_ADDR
8977: GO 8939
8979: POP
8980: POP
// result := tmp ;
8981: LD_ADDR_VAR 0 6
8985: PUSH
8986: LD_VAR 0 9
8990: ST_TO_ADDR
// end ; end ;
8991: LD_VAR 0 6
8995: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8996: LD_INT 0
8998: PPUSH
8999: PPUSH
9000: PPUSH
9001: PPUSH
9002: PPUSH
9003: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9004: LD_ADDR_VAR 0 5
9008: PUSH
9009: LD_INT 0
9011: PUSH
9012: LD_INT 0
9014: PUSH
9015: LD_INT 0
9017: PUSH
9018: EMPTY
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: ST_TO_ADDR
// if not x or not y then
9026: LD_VAR 0 2
9030: NOT
9031: PUSH
9032: LD_VAR 0 3
9036: NOT
9037: OR
9038: IFFALSE 9042
// exit ;
9040: GO 10692
// if not range then
9042: LD_VAR 0 4
9046: NOT
9047: IFFALSE 9057
// range := 10 ;
9049: LD_ADDR_VAR 0 4
9053: PUSH
9054: LD_INT 10
9056: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9057: LD_ADDR_VAR 0 8
9061: PUSH
9062: LD_INT 81
9064: PUSH
9065: LD_VAR 0 1
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: PUSH
9074: LD_INT 92
9076: PUSH
9077: LD_VAR 0 2
9081: PUSH
9082: LD_VAR 0 3
9086: PUSH
9087: LD_VAR 0 4
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: PUSH
9098: LD_INT 3
9100: PUSH
9101: LD_INT 21
9103: PUSH
9104: LD_INT 3
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: LIST
9119: PPUSH
9120: CALL_OW 69
9124: ST_TO_ADDR
// if not tmp then
9125: LD_VAR 0 8
9129: NOT
9130: IFFALSE 9134
// exit ;
9132: GO 10692
// for i in tmp do
9134: LD_ADDR_VAR 0 6
9138: PUSH
9139: LD_VAR 0 8
9143: PUSH
9144: FOR_IN
9145: IFFALSE 10667
// begin points := [ 0 , 0 , 0 ] ;
9147: LD_ADDR_VAR 0 9
9151: PUSH
9152: LD_INT 0
9154: PUSH
9155: LD_INT 0
9157: PUSH
9158: LD_INT 0
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: LIST
9165: ST_TO_ADDR
// bpoints := 1 ;
9166: LD_ADDR_VAR 0 10
9170: PUSH
9171: LD_INT 1
9173: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9174: LD_VAR 0 6
9178: PPUSH
9179: CALL_OW 247
9183: PUSH
9184: LD_INT 1
9186: DOUBLE
9187: EQUAL
9188: IFTRUE 9192
9190: GO 9770
9192: POP
// begin if GetClass ( i ) = 1 then
9193: LD_VAR 0 6
9197: PPUSH
9198: CALL_OW 257
9202: PUSH
9203: LD_INT 1
9205: EQUAL
9206: IFFALSE 9227
// points := [ 10 , 5 , 3 ] ;
9208: LD_ADDR_VAR 0 9
9212: PUSH
9213: LD_INT 10
9215: PUSH
9216: LD_INT 5
9218: PUSH
9219: LD_INT 3
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: LIST
9226: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9227: LD_VAR 0 6
9231: PPUSH
9232: CALL_OW 257
9236: PUSH
9237: LD_INT 2
9239: PUSH
9240: LD_INT 3
9242: PUSH
9243: LD_INT 4
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: LIST
9250: IN
9251: IFFALSE 9272
// points := [ 3 , 2 , 1 ] ;
9253: LD_ADDR_VAR 0 9
9257: PUSH
9258: LD_INT 3
9260: PUSH
9261: LD_INT 2
9263: PUSH
9264: LD_INT 1
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: LIST
9271: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9272: LD_VAR 0 6
9276: PPUSH
9277: CALL_OW 257
9281: PUSH
9282: LD_INT 5
9284: EQUAL
9285: IFFALSE 9306
// points := [ 130 , 5 , 2 ] ;
9287: LD_ADDR_VAR 0 9
9291: PUSH
9292: LD_INT 130
9294: PUSH
9295: LD_INT 5
9297: PUSH
9298: LD_INT 2
9300: PUSH
9301: EMPTY
9302: LIST
9303: LIST
9304: LIST
9305: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9306: LD_VAR 0 6
9310: PPUSH
9311: CALL_OW 257
9315: PUSH
9316: LD_INT 8
9318: EQUAL
9319: IFFALSE 9340
// points := [ 35 , 35 , 30 ] ;
9321: LD_ADDR_VAR 0 9
9325: PUSH
9326: LD_INT 35
9328: PUSH
9329: LD_INT 35
9331: PUSH
9332: LD_INT 30
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: LIST
9339: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9340: LD_VAR 0 6
9344: PPUSH
9345: CALL_OW 257
9349: PUSH
9350: LD_INT 9
9352: EQUAL
9353: IFFALSE 9374
// points := [ 20 , 55 , 40 ] ;
9355: LD_ADDR_VAR 0 9
9359: PUSH
9360: LD_INT 20
9362: PUSH
9363: LD_INT 55
9365: PUSH
9366: LD_INT 40
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: LIST
9373: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9374: LD_VAR 0 6
9378: PPUSH
9379: CALL_OW 257
9383: PUSH
9384: LD_INT 12
9386: PUSH
9387: LD_INT 16
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: IN
9394: IFFALSE 9415
// points := [ 5 , 3 , 2 ] ;
9396: LD_ADDR_VAR 0 9
9400: PUSH
9401: LD_INT 5
9403: PUSH
9404: LD_INT 3
9406: PUSH
9407: LD_INT 2
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: LIST
9414: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9415: LD_VAR 0 6
9419: PPUSH
9420: CALL_OW 257
9424: PUSH
9425: LD_INT 17
9427: EQUAL
9428: IFFALSE 9449
// points := [ 100 , 50 , 75 ] ;
9430: LD_ADDR_VAR 0 9
9434: PUSH
9435: LD_INT 100
9437: PUSH
9438: LD_INT 50
9440: PUSH
9441: LD_INT 75
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: LIST
9448: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9449: LD_VAR 0 6
9453: PPUSH
9454: CALL_OW 257
9458: PUSH
9459: LD_INT 15
9461: EQUAL
9462: IFFALSE 9483
// points := [ 10 , 5 , 3 ] ;
9464: LD_ADDR_VAR 0 9
9468: PUSH
9469: LD_INT 10
9471: PUSH
9472: LD_INT 5
9474: PUSH
9475: LD_INT 3
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: LIST
9482: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9483: LD_VAR 0 6
9487: PPUSH
9488: CALL_OW 257
9492: PUSH
9493: LD_INT 14
9495: EQUAL
9496: IFFALSE 9517
// points := [ 10 , 0 , 0 ] ;
9498: LD_ADDR_VAR 0 9
9502: PUSH
9503: LD_INT 10
9505: PUSH
9506: LD_INT 0
9508: PUSH
9509: LD_INT 0
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: LIST
9516: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9517: LD_VAR 0 6
9521: PPUSH
9522: CALL_OW 257
9526: PUSH
9527: LD_INT 11
9529: EQUAL
9530: IFFALSE 9551
// points := [ 30 , 10 , 5 ] ;
9532: LD_ADDR_VAR 0 9
9536: PUSH
9537: LD_INT 30
9539: PUSH
9540: LD_INT 10
9542: PUSH
9543: LD_INT 5
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: LIST
9550: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9551: LD_VAR 0 1
9555: PPUSH
9556: LD_INT 5
9558: PPUSH
9559: CALL_OW 321
9563: PUSH
9564: LD_INT 2
9566: EQUAL
9567: IFFALSE 9584
// bpoints := bpoints * 1.8 ;
9569: LD_ADDR_VAR 0 10
9573: PUSH
9574: LD_VAR 0 10
9578: PUSH
9579: LD_REAL  1.80000000000000E+0000
9582: MUL
9583: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9584: LD_VAR 0 6
9588: PPUSH
9589: CALL_OW 257
9593: PUSH
9594: LD_INT 1
9596: PUSH
9597: LD_INT 2
9599: PUSH
9600: LD_INT 3
9602: PUSH
9603: LD_INT 4
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: IN
9612: PUSH
9613: LD_VAR 0 1
9617: PPUSH
9618: LD_INT 51
9620: PPUSH
9621: CALL_OW 321
9625: PUSH
9626: LD_INT 2
9628: EQUAL
9629: AND
9630: IFFALSE 9647
// bpoints := bpoints * 1.2 ;
9632: LD_ADDR_VAR 0 10
9636: PUSH
9637: LD_VAR 0 10
9641: PUSH
9642: LD_REAL  1.20000000000000E+0000
9645: MUL
9646: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9647: LD_VAR 0 6
9651: PPUSH
9652: CALL_OW 257
9656: PUSH
9657: LD_INT 5
9659: PUSH
9660: LD_INT 7
9662: PUSH
9663: LD_INT 9
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: LIST
9670: IN
9671: PUSH
9672: LD_VAR 0 1
9676: PPUSH
9677: LD_INT 52
9679: PPUSH
9680: CALL_OW 321
9684: PUSH
9685: LD_INT 2
9687: EQUAL
9688: AND
9689: IFFALSE 9706
// bpoints := bpoints * 1.5 ;
9691: LD_ADDR_VAR 0 10
9695: PUSH
9696: LD_VAR 0 10
9700: PUSH
9701: LD_REAL  1.50000000000000E+0000
9704: MUL
9705: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9706: LD_VAR 0 1
9710: PPUSH
9711: LD_INT 66
9713: PPUSH
9714: CALL_OW 321
9718: PUSH
9719: LD_INT 2
9721: EQUAL
9722: IFFALSE 9739
// bpoints := bpoints * 1.1 ;
9724: LD_ADDR_VAR 0 10
9728: PUSH
9729: LD_VAR 0 10
9733: PUSH
9734: LD_REAL  1.10000000000000E+0000
9737: MUL
9738: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9739: LD_ADDR_VAR 0 10
9743: PUSH
9744: LD_VAR 0 10
9748: PUSH
9749: LD_VAR 0 6
9753: PPUSH
9754: LD_INT 1
9756: PPUSH
9757: CALL_OW 259
9761: PUSH
9762: LD_REAL  1.15000000000000E+0000
9765: MUL
9766: MUL
9767: ST_TO_ADDR
// end ; unit_vehicle :
9768: GO 10596
9770: LD_INT 2
9772: DOUBLE
9773: EQUAL
9774: IFTRUE 9778
9776: GO 10584
9778: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9779: LD_VAR 0 6
9783: PPUSH
9784: CALL_OW 264
9788: PUSH
9789: LD_INT 2
9791: PUSH
9792: LD_INT 42
9794: PUSH
9795: LD_INT 24
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: LIST
9802: IN
9803: IFFALSE 9824
// points := [ 25 , 5 , 3 ] ;
9805: LD_ADDR_VAR 0 9
9809: PUSH
9810: LD_INT 25
9812: PUSH
9813: LD_INT 5
9815: PUSH
9816: LD_INT 3
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: LIST
9823: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9824: LD_VAR 0 6
9828: PPUSH
9829: CALL_OW 264
9833: PUSH
9834: LD_INT 4
9836: PUSH
9837: LD_INT 43
9839: PUSH
9840: LD_INT 25
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: LIST
9847: IN
9848: IFFALSE 9869
// points := [ 40 , 15 , 5 ] ;
9850: LD_ADDR_VAR 0 9
9854: PUSH
9855: LD_INT 40
9857: PUSH
9858: LD_INT 15
9860: PUSH
9861: LD_INT 5
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: LIST
9868: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9869: LD_VAR 0 6
9873: PPUSH
9874: CALL_OW 264
9878: PUSH
9879: LD_INT 3
9881: PUSH
9882: LD_INT 23
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: IN
9889: IFFALSE 9910
// points := [ 7 , 25 , 8 ] ;
9891: LD_ADDR_VAR 0 9
9895: PUSH
9896: LD_INT 7
9898: PUSH
9899: LD_INT 25
9901: PUSH
9902: LD_INT 8
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: LIST
9909: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9910: LD_VAR 0 6
9914: PPUSH
9915: CALL_OW 264
9919: PUSH
9920: LD_INT 5
9922: PUSH
9923: LD_INT 27
9925: PUSH
9926: LD_INT 44
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: LIST
9933: IN
9934: IFFALSE 9955
// points := [ 14 , 50 , 16 ] ;
9936: LD_ADDR_VAR 0 9
9940: PUSH
9941: LD_INT 14
9943: PUSH
9944: LD_INT 50
9946: PUSH
9947: LD_INT 16
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: LIST
9954: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9955: LD_VAR 0 6
9959: PPUSH
9960: CALL_OW 264
9964: PUSH
9965: LD_INT 6
9967: PUSH
9968: LD_INT 46
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: IN
9975: IFFALSE 9996
// points := [ 32 , 120 , 70 ] ;
9977: LD_ADDR_VAR 0 9
9981: PUSH
9982: LD_INT 32
9984: PUSH
9985: LD_INT 120
9987: PUSH
9988: LD_INT 70
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: LIST
9995: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
9996: LD_VAR 0 6
10000: PPUSH
10001: CALL_OW 264
10005: PUSH
10006: LD_INT 7
10008: PUSH
10009: LD_INT 28
10011: PUSH
10012: LD_INT 45
10014: PUSH
10015: LD_INT 92
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: IN
10024: IFFALSE 10045
// points := [ 35 , 20 , 45 ] ;
10026: LD_ADDR_VAR 0 9
10030: PUSH
10031: LD_INT 35
10033: PUSH
10034: LD_INT 20
10036: PUSH
10037: LD_INT 45
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: LIST
10044: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10045: LD_VAR 0 6
10049: PPUSH
10050: CALL_OW 264
10054: PUSH
10055: LD_INT 47
10057: PUSH
10058: EMPTY
10059: LIST
10060: IN
10061: IFFALSE 10082
// points := [ 67 , 45 , 75 ] ;
10063: LD_ADDR_VAR 0 9
10067: PUSH
10068: LD_INT 67
10070: PUSH
10071: LD_INT 45
10073: PUSH
10074: LD_INT 75
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: LIST
10081: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10082: LD_VAR 0 6
10086: PPUSH
10087: CALL_OW 264
10091: PUSH
10092: LD_INT 26
10094: PUSH
10095: EMPTY
10096: LIST
10097: IN
10098: IFFALSE 10119
// points := [ 120 , 30 , 80 ] ;
10100: LD_ADDR_VAR 0 9
10104: PUSH
10105: LD_INT 120
10107: PUSH
10108: LD_INT 30
10110: PUSH
10111: LD_INT 80
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: LIST
10118: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10119: LD_VAR 0 6
10123: PPUSH
10124: CALL_OW 264
10128: PUSH
10129: LD_INT 22
10131: PUSH
10132: EMPTY
10133: LIST
10134: IN
10135: IFFALSE 10156
// points := [ 40 , 1 , 1 ] ;
10137: LD_ADDR_VAR 0 9
10141: PUSH
10142: LD_INT 40
10144: PUSH
10145: LD_INT 1
10147: PUSH
10148: LD_INT 1
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: LIST
10155: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10156: LD_VAR 0 6
10160: PPUSH
10161: CALL_OW 264
10165: PUSH
10166: LD_INT 29
10168: PUSH
10169: EMPTY
10170: LIST
10171: IN
10172: IFFALSE 10193
// points := [ 70 , 200 , 400 ] ;
10174: LD_ADDR_VAR 0 9
10178: PUSH
10179: LD_INT 70
10181: PUSH
10182: LD_INT 200
10184: PUSH
10185: LD_INT 400
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: LIST
10192: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10193: LD_VAR 0 6
10197: PPUSH
10198: CALL_OW 264
10202: PUSH
10203: LD_INT 14
10205: PUSH
10206: LD_INT 53
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: IN
10213: IFFALSE 10234
// points := [ 40 , 10 , 20 ] ;
10215: LD_ADDR_VAR 0 9
10219: PUSH
10220: LD_INT 40
10222: PUSH
10223: LD_INT 10
10225: PUSH
10226: LD_INT 20
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10234: LD_VAR 0 6
10238: PPUSH
10239: CALL_OW 264
10243: PUSH
10244: LD_INT 9
10246: PUSH
10247: EMPTY
10248: LIST
10249: IN
10250: IFFALSE 10271
// points := [ 5 , 70 , 20 ] ;
10252: LD_ADDR_VAR 0 9
10256: PUSH
10257: LD_INT 5
10259: PUSH
10260: LD_INT 70
10262: PUSH
10263: LD_INT 20
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: LIST
10270: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10271: LD_VAR 0 6
10275: PPUSH
10276: CALL_OW 264
10280: PUSH
10281: LD_INT 10
10283: PUSH
10284: EMPTY
10285: LIST
10286: IN
10287: IFFALSE 10308
// points := [ 35 , 110 , 70 ] ;
10289: LD_ADDR_VAR 0 9
10293: PUSH
10294: LD_INT 35
10296: PUSH
10297: LD_INT 110
10299: PUSH
10300: LD_INT 70
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: LIST
10307: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10308: LD_VAR 0 6
10312: PPUSH
10313: CALL_OW 265
10317: PUSH
10318: LD_INT 25
10320: EQUAL
10321: IFFALSE 10342
// points := [ 80 , 65 , 100 ] ;
10323: LD_ADDR_VAR 0 9
10327: PUSH
10328: LD_INT 80
10330: PUSH
10331: LD_INT 65
10333: PUSH
10334: LD_INT 100
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: LIST
10341: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10342: LD_VAR 0 6
10346: PPUSH
10347: CALL_OW 263
10351: PUSH
10352: LD_INT 1
10354: EQUAL
10355: IFFALSE 10390
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10357: LD_ADDR_VAR 0 10
10361: PUSH
10362: LD_VAR 0 10
10366: PUSH
10367: LD_VAR 0 6
10371: PPUSH
10372: CALL_OW 311
10376: PPUSH
10377: LD_INT 3
10379: PPUSH
10380: CALL_OW 259
10384: PUSH
10385: LD_INT 4
10387: MUL
10388: MUL
10389: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10390: LD_VAR 0 6
10394: PPUSH
10395: CALL_OW 263
10399: PUSH
10400: LD_INT 2
10402: EQUAL
10403: IFFALSE 10454
// begin j := IsControledBy ( i ) ;
10405: LD_ADDR_VAR 0 7
10409: PUSH
10410: LD_VAR 0 6
10414: PPUSH
10415: CALL_OW 312
10419: ST_TO_ADDR
// if j then
10420: LD_VAR 0 7
10424: IFFALSE 10454
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10426: LD_ADDR_VAR 0 10
10430: PUSH
10431: LD_VAR 0 10
10435: PUSH
10436: LD_VAR 0 7
10440: PPUSH
10441: LD_INT 3
10443: PPUSH
10444: CALL_OW 259
10448: PUSH
10449: LD_INT 3
10451: MUL
10452: MUL
10453: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10454: LD_VAR 0 6
10458: PPUSH
10459: CALL_OW 264
10463: PUSH
10464: LD_INT 5
10466: PUSH
10467: LD_INT 6
10469: PUSH
10470: LD_INT 46
10472: PUSH
10473: LD_INT 44
10475: PUSH
10476: LD_INT 47
10478: PUSH
10479: LD_INT 45
10481: PUSH
10482: LD_INT 28
10484: PUSH
10485: LD_INT 7
10487: PUSH
10488: LD_INT 27
10490: PUSH
10491: LD_INT 29
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: IN
10506: PUSH
10507: LD_VAR 0 1
10511: PPUSH
10512: LD_INT 52
10514: PPUSH
10515: CALL_OW 321
10519: PUSH
10520: LD_INT 2
10522: EQUAL
10523: AND
10524: IFFALSE 10541
// bpoints := bpoints * 1.2 ;
10526: LD_ADDR_VAR 0 10
10530: PUSH
10531: LD_VAR 0 10
10535: PUSH
10536: LD_REAL  1.20000000000000E+0000
10539: MUL
10540: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10541: LD_VAR 0 6
10545: PPUSH
10546: CALL_OW 264
10550: PUSH
10551: LD_INT 6
10553: PUSH
10554: LD_INT 46
10556: PUSH
10557: LD_INT 47
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: LIST
10564: IN
10565: IFFALSE 10582
// bpoints := bpoints * 1.2 ;
10567: LD_ADDR_VAR 0 10
10571: PUSH
10572: LD_VAR 0 10
10576: PUSH
10577: LD_REAL  1.20000000000000E+0000
10580: MUL
10581: ST_TO_ADDR
// end ; unit_building :
10582: GO 10596
10584: LD_INT 3
10586: DOUBLE
10587: EQUAL
10588: IFTRUE 10592
10590: GO 10595
10592: POP
// ; end ;
10593: GO 10596
10595: POP
// for j = 1 to 3 do
10596: LD_ADDR_VAR 0 7
10600: PUSH
10601: DOUBLE
10602: LD_INT 1
10604: DEC
10605: ST_TO_ADDR
10606: LD_INT 3
10608: PUSH
10609: FOR_TO
10610: IFFALSE 10663
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10612: LD_ADDR_VAR 0 5
10616: PUSH
10617: LD_VAR 0 5
10621: PPUSH
10622: LD_VAR 0 7
10626: PPUSH
10627: LD_VAR 0 5
10631: PUSH
10632: LD_VAR 0 7
10636: ARRAY
10637: PUSH
10638: LD_VAR 0 9
10642: PUSH
10643: LD_VAR 0 7
10647: ARRAY
10648: PUSH
10649: LD_VAR 0 10
10653: MUL
10654: PLUS
10655: PPUSH
10656: CALL_OW 1
10660: ST_TO_ADDR
10661: GO 10609
10663: POP
10664: POP
// end ;
10665: GO 9144
10667: POP
10668: POP
// result := Replace ( result , 4 , tmp ) ;
10669: LD_ADDR_VAR 0 5
10673: PUSH
10674: LD_VAR 0 5
10678: PPUSH
10679: LD_INT 4
10681: PPUSH
10682: LD_VAR 0 8
10686: PPUSH
10687: CALL_OW 1
10691: ST_TO_ADDR
// end ;
10692: LD_VAR 0 5
10696: RET
// export function DangerAtRange ( unit , range ) ; begin
10697: LD_INT 0
10699: PPUSH
// if not unit then
10700: LD_VAR 0 1
10704: NOT
10705: IFFALSE 10709
// exit ;
10707: GO 10754
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10709: LD_ADDR_VAR 0 3
10713: PUSH
10714: LD_VAR 0 1
10718: PPUSH
10719: CALL_OW 255
10723: PPUSH
10724: LD_VAR 0 1
10728: PPUSH
10729: CALL_OW 250
10733: PPUSH
10734: LD_VAR 0 1
10738: PPUSH
10739: CALL_OW 251
10743: PPUSH
10744: LD_VAR 0 2
10748: PPUSH
10749: CALL 8996 0 4
10753: ST_TO_ADDR
// end ;
10754: LD_VAR 0 3
10758: RET
// export function DangerInArea ( side , area ) ; begin
10759: LD_INT 0
10761: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10762: LD_ADDR_VAR 0 3
10766: PUSH
10767: LD_VAR 0 2
10771: PPUSH
10772: LD_INT 81
10774: PUSH
10775: LD_VAR 0 1
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: PPUSH
10784: CALL_OW 70
10788: ST_TO_ADDR
// end ;
10789: LD_VAR 0 3
10793: RET
// export function IsExtension ( b ) ; begin
10794: LD_INT 0
10796: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10797: LD_ADDR_VAR 0 2
10801: PUSH
10802: LD_VAR 0 1
10806: PUSH
10807: LD_INT 23
10809: PUSH
10810: LD_INT 20
10812: PUSH
10813: LD_INT 22
10815: PUSH
10816: LD_INT 17
10818: PUSH
10819: LD_INT 24
10821: PUSH
10822: LD_INT 21
10824: PUSH
10825: LD_INT 19
10827: PUSH
10828: LD_INT 16
10830: PUSH
10831: LD_INT 25
10833: PUSH
10834: LD_INT 18
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: IN
10849: ST_TO_ADDR
// end ;
10850: LD_VAR 0 2
10854: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10855: LD_INT 0
10857: PPUSH
10858: PPUSH
10859: PPUSH
// result := [ ] ;
10860: LD_ADDR_VAR 0 4
10864: PUSH
10865: EMPTY
10866: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10867: LD_ADDR_VAR 0 5
10871: PUSH
10872: LD_VAR 0 2
10876: PPUSH
10877: LD_INT 21
10879: PUSH
10880: LD_INT 3
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PPUSH
10887: CALL_OW 70
10891: ST_TO_ADDR
// if not tmp then
10892: LD_VAR 0 5
10896: NOT
10897: IFFALSE 10901
// exit ;
10899: GO 10965
// if checkLink then
10901: LD_VAR 0 3
10905: IFFALSE 10955
// begin for i in tmp do
10907: LD_ADDR_VAR 0 6
10911: PUSH
10912: LD_VAR 0 5
10916: PUSH
10917: FOR_IN
10918: IFFALSE 10953
// if GetBase ( i ) <> base then
10920: LD_VAR 0 6
10924: PPUSH
10925: CALL_OW 274
10929: PUSH
10930: LD_VAR 0 1
10934: NONEQUAL
10935: IFFALSE 10951
// ComLinkToBase ( base , i ) ;
10937: LD_VAR 0 1
10941: PPUSH
10942: LD_VAR 0 6
10946: PPUSH
10947: CALL_OW 169
10951: GO 10917
10953: POP
10954: POP
// end ; result := tmp ;
10955: LD_ADDR_VAR 0 4
10959: PUSH
10960: LD_VAR 0 5
10964: ST_TO_ADDR
// end ;
10965: LD_VAR 0 4
10969: RET
// export function ComComplete ( units , b ) ; var i ; begin
10970: LD_INT 0
10972: PPUSH
10973: PPUSH
// if not units then
10974: LD_VAR 0 1
10978: NOT
10979: IFFALSE 10983
// exit ;
10981: GO 11073
// for i in units do
10983: LD_ADDR_VAR 0 4
10987: PUSH
10988: LD_VAR 0 1
10992: PUSH
10993: FOR_IN
10994: IFFALSE 11071
// if BuildingStatus ( b ) = bs_build then
10996: LD_VAR 0 2
11000: PPUSH
11001: CALL_OW 461
11005: PUSH
11006: LD_INT 1
11008: EQUAL
11009: IFFALSE 11069
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11011: LD_VAR 0 4
11015: PPUSH
11016: LD_STRING h
11018: PUSH
11019: LD_VAR 0 2
11023: PPUSH
11024: CALL_OW 250
11028: PUSH
11029: LD_VAR 0 2
11033: PPUSH
11034: CALL_OW 251
11038: PUSH
11039: LD_VAR 0 2
11043: PUSH
11044: LD_INT 0
11046: PUSH
11047: LD_INT 0
11049: PUSH
11050: LD_INT 0
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: PUSH
11062: EMPTY
11063: LIST
11064: PPUSH
11065: CALL_OW 446
11069: GO 10993
11071: POP
11072: POP
// end ;
11073: LD_VAR 0 3
11077: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11078: LD_INT 0
11080: PPUSH
11081: PPUSH
11082: PPUSH
11083: PPUSH
11084: PPUSH
11085: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11086: LD_VAR 0 1
11090: NOT
11091: PUSH
11092: LD_VAR 0 1
11096: PPUSH
11097: CALL_OW 263
11101: PUSH
11102: LD_INT 2
11104: NONEQUAL
11105: OR
11106: IFFALSE 11110
// exit ;
11108: GO 11426
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11110: LD_ADDR_VAR 0 6
11114: PUSH
11115: LD_INT 22
11117: PUSH
11118: LD_VAR 0 1
11122: PPUSH
11123: CALL_OW 255
11127: PUSH
11128: EMPTY
11129: LIST
11130: LIST
11131: PUSH
11132: LD_INT 2
11134: PUSH
11135: LD_INT 30
11137: PUSH
11138: LD_INT 36
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: PUSH
11145: LD_INT 34
11147: PUSH
11148: LD_INT 31
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: LIST
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PPUSH
11164: CALL_OW 69
11168: ST_TO_ADDR
// if not tmp then
11169: LD_VAR 0 6
11173: NOT
11174: IFFALSE 11178
// exit ;
11176: GO 11426
// result := [ ] ;
11178: LD_ADDR_VAR 0 2
11182: PUSH
11183: EMPTY
11184: ST_TO_ADDR
// for i in tmp do
11185: LD_ADDR_VAR 0 3
11189: PUSH
11190: LD_VAR 0 6
11194: PUSH
11195: FOR_IN
11196: IFFALSE 11267
// begin t := UnitsInside ( i ) ;
11198: LD_ADDR_VAR 0 4
11202: PUSH
11203: LD_VAR 0 3
11207: PPUSH
11208: CALL_OW 313
11212: ST_TO_ADDR
// if t then
11213: LD_VAR 0 4
11217: IFFALSE 11265
// for j in t do
11219: LD_ADDR_VAR 0 7
11223: PUSH
11224: LD_VAR 0 4
11228: PUSH
11229: FOR_IN
11230: IFFALSE 11263
// result := Replace ( result , result + 1 , j ) ;
11232: LD_ADDR_VAR 0 2
11236: PUSH
11237: LD_VAR 0 2
11241: PPUSH
11242: LD_VAR 0 2
11246: PUSH
11247: LD_INT 1
11249: PLUS
11250: PPUSH
11251: LD_VAR 0 7
11255: PPUSH
11256: CALL_OW 1
11260: ST_TO_ADDR
11261: GO 11229
11263: POP
11264: POP
// end ;
11265: GO 11195
11267: POP
11268: POP
// if not result then
11269: LD_VAR 0 2
11273: NOT
11274: IFFALSE 11278
// exit ;
11276: GO 11426
// mech := result [ 1 ] ;
11278: LD_ADDR_VAR 0 5
11282: PUSH
11283: LD_VAR 0 2
11287: PUSH
11288: LD_INT 1
11290: ARRAY
11291: ST_TO_ADDR
// if result > 1 then
11292: LD_VAR 0 2
11296: PUSH
11297: LD_INT 1
11299: GREATER
11300: IFFALSE 11412
// begin for i = 2 to result do
11302: LD_ADDR_VAR 0 3
11306: PUSH
11307: DOUBLE
11308: LD_INT 2
11310: DEC
11311: ST_TO_ADDR
11312: LD_VAR 0 2
11316: PUSH
11317: FOR_TO
11318: IFFALSE 11410
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11320: LD_ADDR_VAR 0 4
11324: PUSH
11325: LD_VAR 0 2
11329: PUSH
11330: LD_VAR 0 3
11334: ARRAY
11335: PPUSH
11336: LD_INT 3
11338: PPUSH
11339: CALL_OW 259
11343: PUSH
11344: LD_VAR 0 2
11348: PUSH
11349: LD_VAR 0 3
11353: ARRAY
11354: PPUSH
11355: CALL_OW 432
11359: MINUS
11360: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11361: LD_VAR 0 4
11365: PUSH
11366: LD_VAR 0 5
11370: PPUSH
11371: LD_INT 3
11373: PPUSH
11374: CALL_OW 259
11378: PUSH
11379: LD_VAR 0 5
11383: PPUSH
11384: CALL_OW 432
11388: MINUS
11389: GREATEREQUAL
11390: IFFALSE 11408
// mech := result [ i ] ;
11392: LD_ADDR_VAR 0 5
11396: PUSH
11397: LD_VAR 0 2
11401: PUSH
11402: LD_VAR 0 3
11406: ARRAY
11407: ST_TO_ADDR
// end ;
11408: GO 11317
11410: POP
11411: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11412: LD_VAR 0 1
11416: PPUSH
11417: LD_VAR 0 5
11421: PPUSH
11422: CALL_OW 135
// end ;
11426: LD_VAR 0 2
11430: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11431: LD_INT 0
11433: PPUSH
11434: PPUSH
11435: PPUSH
11436: PPUSH
11437: PPUSH
11438: PPUSH
11439: PPUSH
11440: PPUSH
11441: PPUSH
11442: PPUSH
11443: PPUSH
11444: PPUSH
11445: PPUSH
// result := [ ] ;
11446: LD_ADDR_VAR 0 7
11450: PUSH
11451: EMPTY
11452: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11453: LD_VAR 0 1
11457: PPUSH
11458: CALL_OW 266
11462: PUSH
11463: LD_INT 0
11465: PUSH
11466: LD_INT 1
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: IN
11473: NOT
11474: IFFALSE 11478
// exit ;
11476: GO 13112
// if name then
11478: LD_VAR 0 3
11482: IFFALSE 11498
// SetBName ( base_dep , name ) ;
11484: LD_VAR 0 1
11488: PPUSH
11489: LD_VAR 0 3
11493: PPUSH
11494: CALL_OW 500
// base := GetBase ( base_dep ) ;
11498: LD_ADDR_VAR 0 15
11502: PUSH
11503: LD_VAR 0 1
11507: PPUSH
11508: CALL_OW 274
11512: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11513: LD_ADDR_VAR 0 16
11517: PUSH
11518: LD_VAR 0 1
11522: PPUSH
11523: CALL_OW 255
11527: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11528: LD_ADDR_VAR 0 17
11532: PUSH
11533: LD_VAR 0 1
11537: PPUSH
11538: CALL_OW 248
11542: ST_TO_ADDR
// if sources then
11543: LD_VAR 0 5
11547: IFFALSE 11594
// for i = 1 to 3 do
11549: LD_ADDR_VAR 0 8
11553: PUSH
11554: DOUBLE
11555: LD_INT 1
11557: DEC
11558: ST_TO_ADDR
11559: LD_INT 3
11561: PUSH
11562: FOR_TO
11563: IFFALSE 11592
// AddResourceType ( base , i , sources [ i ] ) ;
11565: LD_VAR 0 15
11569: PPUSH
11570: LD_VAR 0 8
11574: PPUSH
11575: LD_VAR 0 5
11579: PUSH
11580: LD_VAR 0 8
11584: ARRAY
11585: PPUSH
11586: CALL_OW 276
11590: GO 11562
11592: POP
11593: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11594: LD_ADDR_VAR 0 18
11598: PUSH
11599: LD_VAR 0 15
11603: PPUSH
11604: LD_VAR 0 2
11608: PPUSH
11609: LD_INT 1
11611: PPUSH
11612: CALL 10855 0 3
11616: ST_TO_ADDR
// InitHc ;
11617: CALL_OW 19
// InitUc ;
11621: CALL_OW 18
// uc_side := side ;
11625: LD_ADDR_OWVAR 20
11629: PUSH
11630: LD_VAR 0 16
11634: ST_TO_ADDR
// uc_nation := nation ;
11635: LD_ADDR_OWVAR 21
11639: PUSH
11640: LD_VAR 0 17
11644: ST_TO_ADDR
// if buildings then
11645: LD_VAR 0 18
11649: IFFALSE 12971
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11651: LD_ADDR_VAR 0 19
11655: PUSH
11656: LD_VAR 0 18
11660: PPUSH
11661: LD_INT 2
11663: PUSH
11664: LD_INT 30
11666: PUSH
11667: LD_INT 29
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: PUSH
11674: LD_INT 30
11676: PUSH
11677: LD_INT 30
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: LIST
11688: PPUSH
11689: CALL_OW 72
11693: ST_TO_ADDR
// if tmp then
11694: LD_VAR 0 19
11698: IFFALSE 11746
// for i in tmp do
11700: LD_ADDR_VAR 0 8
11704: PUSH
11705: LD_VAR 0 19
11709: PUSH
11710: FOR_IN
11711: IFFALSE 11744
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11713: LD_VAR 0 8
11717: PPUSH
11718: CALL_OW 250
11722: PPUSH
11723: LD_VAR 0 8
11727: PPUSH
11728: CALL_OW 251
11732: PPUSH
11733: LD_VAR 0 16
11737: PPUSH
11738: CALL_OW 441
11742: GO 11710
11744: POP
11745: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11746: LD_VAR 0 18
11750: PPUSH
11751: LD_INT 2
11753: PUSH
11754: LD_INT 30
11756: PUSH
11757: LD_INT 32
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 30
11766: PUSH
11767: LD_INT 33
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: LIST
11778: PPUSH
11779: CALL_OW 72
11783: IFFALSE 11871
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11785: LD_ADDR_VAR 0 8
11789: PUSH
11790: LD_VAR 0 18
11794: PPUSH
11795: LD_INT 2
11797: PUSH
11798: LD_INT 30
11800: PUSH
11801: LD_INT 32
11803: PUSH
11804: EMPTY
11805: LIST
11806: LIST
11807: PUSH
11808: LD_INT 30
11810: PUSH
11811: LD_INT 33
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: LIST
11822: PPUSH
11823: CALL_OW 72
11827: PUSH
11828: FOR_IN
11829: IFFALSE 11869
// begin if not GetBWeapon ( i ) then
11831: LD_VAR 0 8
11835: PPUSH
11836: CALL_OW 269
11840: NOT
11841: IFFALSE 11867
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11843: LD_VAR 0 8
11847: PPUSH
11848: LD_VAR 0 8
11852: PPUSH
11853: LD_VAR 0 2
11857: PPUSH
11858: CALL 13117 0 2
11862: PPUSH
11863: CALL_OW 431
// end ;
11867: GO 11828
11869: POP
11870: POP
// end ; for i = 1 to personel do
11871: LD_ADDR_VAR 0 8
11875: PUSH
11876: DOUBLE
11877: LD_INT 1
11879: DEC
11880: ST_TO_ADDR
11881: LD_VAR 0 6
11885: PUSH
11886: FOR_TO
11887: IFFALSE 12951
// begin if i > 4 then
11889: LD_VAR 0 8
11893: PUSH
11894: LD_INT 4
11896: GREATER
11897: IFFALSE 11901
// break ;
11899: GO 12951
// case i of 1 :
11901: LD_VAR 0 8
11905: PUSH
11906: LD_INT 1
11908: DOUBLE
11909: EQUAL
11910: IFTRUE 11914
11912: GO 11994
11914: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11915: LD_ADDR_VAR 0 12
11919: PUSH
11920: LD_VAR 0 18
11924: PPUSH
11925: LD_INT 22
11927: PUSH
11928: LD_VAR 0 16
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: PUSH
11937: LD_INT 58
11939: PUSH
11940: EMPTY
11941: LIST
11942: PUSH
11943: LD_INT 2
11945: PUSH
11946: LD_INT 30
11948: PUSH
11949: LD_INT 32
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PUSH
11956: LD_INT 30
11958: PUSH
11959: LD_INT 4
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: PUSH
11966: LD_INT 30
11968: PUSH
11969: LD_INT 5
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: LIST
11986: PPUSH
11987: CALL_OW 72
11991: ST_TO_ADDR
11992: GO 12216
11994: LD_INT 2
11996: DOUBLE
11997: EQUAL
11998: IFTRUE 12002
12000: GO 12064
12002: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12003: LD_ADDR_VAR 0 12
12007: PUSH
12008: LD_VAR 0 18
12012: PPUSH
12013: LD_INT 22
12015: PUSH
12016: LD_VAR 0 16
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PUSH
12025: LD_INT 2
12027: PUSH
12028: LD_INT 30
12030: PUSH
12031: LD_INT 0
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PUSH
12038: LD_INT 30
12040: PUSH
12041: LD_INT 1
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: LIST
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: PPUSH
12057: CALL_OW 72
12061: ST_TO_ADDR
12062: GO 12216
12064: LD_INT 3
12066: DOUBLE
12067: EQUAL
12068: IFTRUE 12072
12070: GO 12134
12072: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12073: LD_ADDR_VAR 0 12
12077: PUSH
12078: LD_VAR 0 18
12082: PPUSH
12083: LD_INT 22
12085: PUSH
12086: LD_VAR 0 16
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PUSH
12095: LD_INT 2
12097: PUSH
12098: LD_INT 30
12100: PUSH
12101: LD_INT 2
12103: PUSH
12104: EMPTY
12105: LIST
12106: LIST
12107: PUSH
12108: LD_INT 30
12110: PUSH
12111: LD_INT 3
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: LIST
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PPUSH
12127: CALL_OW 72
12131: ST_TO_ADDR
12132: GO 12216
12134: LD_INT 4
12136: DOUBLE
12137: EQUAL
12138: IFTRUE 12142
12140: GO 12215
12142: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12143: LD_ADDR_VAR 0 12
12147: PUSH
12148: LD_VAR 0 18
12152: PPUSH
12153: LD_INT 22
12155: PUSH
12156: LD_VAR 0 16
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: PUSH
12165: LD_INT 2
12167: PUSH
12168: LD_INT 30
12170: PUSH
12171: LD_INT 6
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: PUSH
12178: LD_INT 30
12180: PUSH
12181: LD_INT 7
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: PUSH
12188: LD_INT 30
12190: PUSH
12191: LD_INT 8
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PPUSH
12208: CALL_OW 72
12212: ST_TO_ADDR
12213: GO 12216
12215: POP
// if i = 1 then
12216: LD_VAR 0 8
12220: PUSH
12221: LD_INT 1
12223: EQUAL
12224: IFFALSE 12335
// begin tmp := [ ] ;
12226: LD_ADDR_VAR 0 19
12230: PUSH
12231: EMPTY
12232: ST_TO_ADDR
// for j in f do
12233: LD_ADDR_VAR 0 9
12237: PUSH
12238: LD_VAR 0 12
12242: PUSH
12243: FOR_IN
12244: IFFALSE 12317
// if GetBType ( j ) = b_bunker then
12246: LD_VAR 0 9
12250: PPUSH
12251: CALL_OW 266
12255: PUSH
12256: LD_INT 32
12258: EQUAL
12259: IFFALSE 12286
// tmp := Insert ( tmp , 1 , j ) else
12261: LD_ADDR_VAR 0 19
12265: PUSH
12266: LD_VAR 0 19
12270: PPUSH
12271: LD_INT 1
12273: PPUSH
12274: LD_VAR 0 9
12278: PPUSH
12279: CALL_OW 2
12283: ST_TO_ADDR
12284: GO 12315
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12286: LD_ADDR_VAR 0 19
12290: PUSH
12291: LD_VAR 0 19
12295: PPUSH
12296: LD_VAR 0 19
12300: PUSH
12301: LD_INT 1
12303: PLUS
12304: PPUSH
12305: LD_VAR 0 9
12309: PPUSH
12310: CALL_OW 2
12314: ST_TO_ADDR
12315: GO 12243
12317: POP
12318: POP
// if tmp then
12319: LD_VAR 0 19
12323: IFFALSE 12335
// f := tmp ;
12325: LD_ADDR_VAR 0 12
12329: PUSH
12330: LD_VAR 0 19
12334: ST_TO_ADDR
// end ; x := personel [ i ] ;
12335: LD_ADDR_VAR 0 13
12339: PUSH
12340: LD_VAR 0 6
12344: PUSH
12345: LD_VAR 0 8
12349: ARRAY
12350: ST_TO_ADDR
// if x = - 1 then
12351: LD_VAR 0 13
12355: PUSH
12356: LD_INT 1
12358: NEG
12359: EQUAL
12360: IFFALSE 12569
// begin for j in f do
12362: LD_ADDR_VAR 0 9
12366: PUSH
12367: LD_VAR 0 12
12371: PUSH
12372: FOR_IN
12373: IFFALSE 12565
// repeat InitHc ;
12375: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12379: LD_VAR 0 9
12383: PPUSH
12384: CALL_OW 266
12388: PUSH
12389: LD_INT 5
12391: EQUAL
12392: IFFALSE 12462
// begin if UnitsInside ( j ) < 3 then
12394: LD_VAR 0 9
12398: PPUSH
12399: CALL_OW 313
12403: PUSH
12404: LD_INT 3
12406: LESS
12407: IFFALSE 12443
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12409: LD_INT 0
12411: PPUSH
12412: LD_INT 5
12414: PUSH
12415: LD_INT 8
12417: PUSH
12418: LD_INT 9
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: LIST
12425: PUSH
12426: LD_VAR 0 17
12430: ARRAY
12431: PPUSH
12432: LD_VAR 0 4
12436: PPUSH
12437: CALL_OW 380
12441: GO 12460
// PrepareHuman ( false , i , skill ) ;
12443: LD_INT 0
12445: PPUSH
12446: LD_VAR 0 8
12450: PPUSH
12451: LD_VAR 0 4
12455: PPUSH
12456: CALL_OW 380
// end else
12460: GO 12479
// PrepareHuman ( false , i , skill ) ;
12462: LD_INT 0
12464: PPUSH
12465: LD_VAR 0 8
12469: PPUSH
12470: LD_VAR 0 4
12474: PPUSH
12475: CALL_OW 380
// un := CreateHuman ;
12479: LD_ADDR_VAR 0 14
12483: PUSH
12484: CALL_OW 44
12488: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12489: LD_ADDR_VAR 0 7
12493: PUSH
12494: LD_VAR 0 7
12498: PPUSH
12499: LD_INT 1
12501: PPUSH
12502: LD_VAR 0 14
12506: PPUSH
12507: CALL_OW 2
12511: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12512: LD_VAR 0 14
12516: PPUSH
12517: LD_VAR 0 9
12521: PPUSH
12522: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12526: LD_VAR 0 9
12530: PPUSH
12531: CALL_OW 313
12535: PUSH
12536: LD_INT 6
12538: EQUAL
12539: PUSH
12540: LD_VAR 0 9
12544: PPUSH
12545: CALL_OW 266
12549: PUSH
12550: LD_INT 32
12552: PUSH
12553: LD_INT 31
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: IN
12560: OR
12561: IFFALSE 12375
12563: GO 12372
12565: POP
12566: POP
// end else
12567: GO 12949
// for j = 1 to x do
12569: LD_ADDR_VAR 0 9
12573: PUSH
12574: DOUBLE
12575: LD_INT 1
12577: DEC
12578: ST_TO_ADDR
12579: LD_VAR 0 13
12583: PUSH
12584: FOR_TO
12585: IFFALSE 12947
// begin InitHc ;
12587: CALL_OW 19
// if not f then
12591: LD_VAR 0 12
12595: NOT
12596: IFFALSE 12685
// begin PrepareHuman ( false , i , skill ) ;
12598: LD_INT 0
12600: PPUSH
12601: LD_VAR 0 8
12605: PPUSH
12606: LD_VAR 0 4
12610: PPUSH
12611: CALL_OW 380
// un := CreateHuman ;
12615: LD_ADDR_VAR 0 14
12619: PUSH
12620: CALL_OW 44
12624: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12625: LD_ADDR_VAR 0 7
12629: PUSH
12630: LD_VAR 0 7
12634: PPUSH
12635: LD_INT 1
12637: PPUSH
12638: LD_VAR 0 14
12642: PPUSH
12643: CALL_OW 2
12647: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12648: LD_VAR 0 14
12652: PPUSH
12653: LD_VAR 0 1
12657: PPUSH
12658: CALL_OW 250
12662: PPUSH
12663: LD_VAR 0 1
12667: PPUSH
12668: CALL_OW 251
12672: PPUSH
12673: LD_INT 10
12675: PPUSH
12676: LD_INT 0
12678: PPUSH
12679: CALL_OW 50
// continue ;
12683: GO 12584
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12685: LD_VAR 0 12
12689: PUSH
12690: LD_INT 1
12692: ARRAY
12693: PPUSH
12694: CALL_OW 313
12698: PUSH
12699: LD_VAR 0 12
12703: PUSH
12704: LD_INT 1
12706: ARRAY
12707: PPUSH
12708: CALL_OW 266
12712: PUSH
12713: LD_INT 32
12715: PUSH
12716: LD_INT 31
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: IN
12723: AND
12724: PUSH
12725: LD_VAR 0 12
12729: PUSH
12730: LD_INT 1
12732: ARRAY
12733: PPUSH
12734: CALL_OW 313
12738: PUSH
12739: LD_INT 6
12741: EQUAL
12742: OR
12743: IFFALSE 12763
// f := Delete ( f , 1 ) ;
12745: LD_ADDR_VAR 0 12
12749: PUSH
12750: LD_VAR 0 12
12754: PPUSH
12755: LD_INT 1
12757: PPUSH
12758: CALL_OW 3
12762: ST_TO_ADDR
// if not f then
12763: LD_VAR 0 12
12767: NOT
12768: IFFALSE 12786
// begin x := x + 2 ;
12770: LD_ADDR_VAR 0 13
12774: PUSH
12775: LD_VAR 0 13
12779: PUSH
12780: LD_INT 2
12782: PLUS
12783: ST_TO_ADDR
// continue ;
12784: GO 12584
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12786: LD_VAR 0 12
12790: PUSH
12791: LD_INT 1
12793: ARRAY
12794: PPUSH
12795: CALL_OW 266
12799: PUSH
12800: LD_INT 5
12802: EQUAL
12803: IFFALSE 12877
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12805: LD_VAR 0 12
12809: PUSH
12810: LD_INT 1
12812: ARRAY
12813: PPUSH
12814: CALL_OW 313
12818: PUSH
12819: LD_INT 3
12821: LESS
12822: IFFALSE 12858
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12824: LD_INT 0
12826: PPUSH
12827: LD_INT 5
12829: PUSH
12830: LD_INT 8
12832: PUSH
12833: LD_INT 9
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: LIST
12840: PUSH
12841: LD_VAR 0 17
12845: ARRAY
12846: PPUSH
12847: LD_VAR 0 4
12851: PPUSH
12852: CALL_OW 380
12856: GO 12875
// PrepareHuman ( false , i , skill ) ;
12858: LD_INT 0
12860: PPUSH
12861: LD_VAR 0 8
12865: PPUSH
12866: LD_VAR 0 4
12870: PPUSH
12871: CALL_OW 380
// end else
12875: GO 12894
// PrepareHuman ( false , i , skill ) ;
12877: LD_INT 0
12879: PPUSH
12880: LD_VAR 0 8
12884: PPUSH
12885: LD_VAR 0 4
12889: PPUSH
12890: CALL_OW 380
// un := CreateHuman ;
12894: LD_ADDR_VAR 0 14
12898: PUSH
12899: CALL_OW 44
12903: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12904: LD_ADDR_VAR 0 7
12908: PUSH
12909: LD_VAR 0 7
12913: PPUSH
12914: LD_INT 1
12916: PPUSH
12917: LD_VAR 0 14
12921: PPUSH
12922: CALL_OW 2
12926: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12927: LD_VAR 0 14
12931: PPUSH
12932: LD_VAR 0 12
12936: PUSH
12937: LD_INT 1
12939: ARRAY
12940: PPUSH
12941: CALL_OW 52
// end ;
12945: GO 12584
12947: POP
12948: POP
// end ;
12949: GO 11886
12951: POP
12952: POP
// result := result ^ buildings ;
12953: LD_ADDR_VAR 0 7
12957: PUSH
12958: LD_VAR 0 7
12962: PUSH
12963: LD_VAR 0 18
12967: ADD
12968: ST_TO_ADDR
// end else
12969: GO 13112
// begin for i = 1 to personel do
12971: LD_ADDR_VAR 0 8
12975: PUSH
12976: DOUBLE
12977: LD_INT 1
12979: DEC
12980: ST_TO_ADDR
12981: LD_VAR 0 6
12985: PUSH
12986: FOR_TO
12987: IFFALSE 13110
// begin if i > 4 then
12989: LD_VAR 0 8
12993: PUSH
12994: LD_INT 4
12996: GREATER
12997: IFFALSE 13001
// break ;
12999: GO 13110
// x := personel [ i ] ;
13001: LD_ADDR_VAR 0 13
13005: PUSH
13006: LD_VAR 0 6
13010: PUSH
13011: LD_VAR 0 8
13015: ARRAY
13016: ST_TO_ADDR
// if x = - 1 then
13017: LD_VAR 0 13
13021: PUSH
13022: LD_INT 1
13024: NEG
13025: EQUAL
13026: IFFALSE 13030
// continue ;
13028: GO 12986
// PrepareHuman ( false , i , skill ) ;
13030: LD_INT 0
13032: PPUSH
13033: LD_VAR 0 8
13037: PPUSH
13038: LD_VAR 0 4
13042: PPUSH
13043: CALL_OW 380
// un := CreateHuman ;
13047: LD_ADDR_VAR 0 14
13051: PUSH
13052: CALL_OW 44
13056: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13057: LD_VAR 0 14
13061: PPUSH
13062: LD_VAR 0 1
13066: PPUSH
13067: CALL_OW 250
13071: PPUSH
13072: LD_VAR 0 1
13076: PPUSH
13077: CALL_OW 251
13081: PPUSH
13082: LD_INT 10
13084: PPUSH
13085: LD_INT 0
13087: PPUSH
13088: CALL_OW 50
// result := result ^ un ;
13092: LD_ADDR_VAR 0 7
13096: PUSH
13097: LD_VAR 0 7
13101: PUSH
13102: LD_VAR 0 14
13106: ADD
13107: ST_TO_ADDR
// end ;
13108: GO 12986
13110: POP
13111: POP
// end ; end ;
13112: LD_VAR 0 7
13116: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13117: LD_INT 0
13119: PPUSH
13120: PPUSH
13121: PPUSH
13122: PPUSH
13123: PPUSH
13124: PPUSH
13125: PPUSH
13126: PPUSH
13127: PPUSH
13128: PPUSH
13129: PPUSH
13130: PPUSH
13131: PPUSH
13132: PPUSH
13133: PPUSH
13134: PPUSH
// result := false ;
13135: LD_ADDR_VAR 0 3
13139: PUSH
13140: LD_INT 0
13142: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13143: LD_VAR 0 1
13147: NOT
13148: PUSH
13149: LD_VAR 0 1
13153: PPUSH
13154: CALL_OW 266
13158: PUSH
13159: LD_INT 32
13161: PUSH
13162: LD_INT 33
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: IN
13169: NOT
13170: OR
13171: IFFALSE 13175
// exit ;
13173: GO 14284
// nat := GetNation ( tower ) ;
13175: LD_ADDR_VAR 0 12
13179: PUSH
13180: LD_VAR 0 1
13184: PPUSH
13185: CALL_OW 248
13189: ST_TO_ADDR
// side := GetSide ( tower ) ;
13190: LD_ADDR_VAR 0 16
13194: PUSH
13195: LD_VAR 0 1
13199: PPUSH
13200: CALL_OW 255
13204: ST_TO_ADDR
// x := GetX ( tower ) ;
13205: LD_ADDR_VAR 0 10
13209: PUSH
13210: LD_VAR 0 1
13214: PPUSH
13215: CALL_OW 250
13219: ST_TO_ADDR
// y := GetY ( tower ) ;
13220: LD_ADDR_VAR 0 11
13224: PUSH
13225: LD_VAR 0 1
13229: PPUSH
13230: CALL_OW 251
13234: ST_TO_ADDR
// if not x or not y then
13235: LD_VAR 0 10
13239: NOT
13240: PUSH
13241: LD_VAR 0 11
13245: NOT
13246: OR
13247: IFFALSE 13251
// exit ;
13249: GO 14284
// weapon := 0 ;
13251: LD_ADDR_VAR 0 18
13255: PUSH
13256: LD_INT 0
13258: ST_TO_ADDR
// fac_list := [ ] ;
13259: LD_ADDR_VAR 0 17
13263: PUSH
13264: EMPTY
13265: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13266: LD_ADDR_VAR 0 6
13270: PUSH
13271: LD_VAR 0 1
13275: PPUSH
13276: CALL_OW 274
13280: PPUSH
13281: LD_VAR 0 2
13285: PPUSH
13286: LD_INT 0
13288: PPUSH
13289: CALL 10855 0 3
13293: PPUSH
13294: LD_INT 30
13296: PUSH
13297: LD_INT 3
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PPUSH
13304: CALL_OW 72
13308: ST_TO_ADDR
// if not factories then
13309: LD_VAR 0 6
13313: NOT
13314: IFFALSE 13318
// exit ;
13316: GO 14284
// for i in factories do
13318: LD_ADDR_VAR 0 8
13322: PUSH
13323: LD_VAR 0 6
13327: PUSH
13328: FOR_IN
13329: IFFALSE 13354
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13331: LD_ADDR_VAR 0 17
13335: PUSH
13336: LD_VAR 0 17
13340: PUSH
13341: LD_VAR 0 8
13345: PPUSH
13346: CALL_OW 478
13350: UNION
13351: ST_TO_ADDR
13352: GO 13328
13354: POP
13355: POP
// if not fac_list then
13356: LD_VAR 0 17
13360: NOT
13361: IFFALSE 13365
// exit ;
13363: GO 14284
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13365: LD_ADDR_VAR 0 5
13369: PUSH
13370: LD_INT 4
13372: PUSH
13373: LD_INT 5
13375: PUSH
13376: LD_INT 9
13378: PUSH
13379: LD_INT 10
13381: PUSH
13382: LD_INT 6
13384: PUSH
13385: LD_INT 7
13387: PUSH
13388: LD_INT 11
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: PUSH
13400: LD_INT 27
13402: PUSH
13403: LD_INT 28
13405: PUSH
13406: LD_INT 26
13408: PUSH
13409: LD_INT 30
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: PUSH
13418: LD_INT 43
13420: PUSH
13421: LD_INT 44
13423: PUSH
13424: LD_INT 46
13426: PUSH
13427: LD_INT 45
13429: PUSH
13430: LD_INT 47
13432: PUSH
13433: LD_INT 49
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: LIST
13448: PUSH
13449: LD_VAR 0 12
13453: ARRAY
13454: ST_TO_ADDR
// list := list isect fac_list ;
13455: LD_ADDR_VAR 0 5
13459: PUSH
13460: LD_VAR 0 5
13464: PUSH
13465: LD_VAR 0 17
13469: ISECT
13470: ST_TO_ADDR
// if not list then
13471: LD_VAR 0 5
13475: NOT
13476: IFFALSE 13480
// exit ;
13478: GO 14284
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13480: LD_VAR 0 12
13484: PUSH
13485: LD_INT 3
13487: EQUAL
13488: PUSH
13489: LD_INT 49
13491: PUSH
13492: LD_VAR 0 5
13496: IN
13497: AND
13498: PUSH
13499: LD_INT 31
13501: PPUSH
13502: LD_VAR 0 16
13506: PPUSH
13507: CALL_OW 321
13511: PUSH
13512: LD_INT 2
13514: EQUAL
13515: AND
13516: IFFALSE 13576
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13518: LD_INT 22
13520: PUSH
13521: LD_VAR 0 16
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 35
13532: PUSH
13533: LD_INT 49
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: LD_INT 91
13542: PUSH
13543: LD_VAR 0 1
13547: PUSH
13548: LD_INT 10
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: LIST
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: LIST
13560: PPUSH
13561: CALL_OW 69
13565: NOT
13566: IFFALSE 13576
// weapon := ru_time_lapser ;
13568: LD_ADDR_VAR 0 18
13572: PUSH
13573: LD_INT 49
13575: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13576: LD_VAR 0 12
13580: PUSH
13581: LD_INT 1
13583: PUSH
13584: LD_INT 2
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: IN
13591: PUSH
13592: LD_INT 11
13594: PUSH
13595: LD_VAR 0 5
13599: IN
13600: PUSH
13601: LD_INT 30
13603: PUSH
13604: LD_VAR 0 5
13608: IN
13609: OR
13610: AND
13611: PUSH
13612: LD_INT 6
13614: PPUSH
13615: LD_VAR 0 16
13619: PPUSH
13620: CALL_OW 321
13624: PUSH
13625: LD_INT 2
13627: EQUAL
13628: AND
13629: IFFALSE 13794
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13631: LD_INT 22
13633: PUSH
13634: LD_VAR 0 16
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 2
13645: PUSH
13646: LD_INT 35
13648: PUSH
13649: LD_INT 11
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: PUSH
13656: LD_INT 35
13658: PUSH
13659: LD_INT 30
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 91
13673: PUSH
13674: LD_VAR 0 1
13678: PUSH
13679: LD_INT 18
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: LIST
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: LIST
13691: PPUSH
13692: CALL_OW 69
13696: NOT
13697: PUSH
13698: LD_INT 22
13700: PUSH
13701: LD_VAR 0 16
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: LD_INT 2
13712: PUSH
13713: LD_INT 30
13715: PUSH
13716: LD_INT 32
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: LD_INT 30
13725: PUSH
13726: LD_INT 33
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: LIST
13737: PUSH
13738: LD_INT 91
13740: PUSH
13741: LD_VAR 0 1
13745: PUSH
13746: LD_INT 12
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: LIST
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: LIST
13758: PUSH
13759: EMPTY
13760: LIST
13761: PPUSH
13762: CALL_OW 69
13766: PUSH
13767: LD_INT 2
13769: GREATER
13770: AND
13771: IFFALSE 13794
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13773: LD_ADDR_VAR 0 18
13777: PUSH
13778: LD_INT 11
13780: PUSH
13781: LD_INT 30
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: PUSH
13788: LD_VAR 0 12
13792: ARRAY
13793: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13794: LD_VAR 0 18
13798: NOT
13799: PUSH
13800: LD_INT 40
13802: PPUSH
13803: LD_VAR 0 16
13807: PPUSH
13808: CALL_OW 321
13812: PUSH
13813: LD_INT 2
13815: EQUAL
13816: AND
13817: PUSH
13818: LD_INT 7
13820: PUSH
13821: LD_VAR 0 5
13825: IN
13826: PUSH
13827: LD_INT 28
13829: PUSH
13830: LD_VAR 0 5
13834: IN
13835: OR
13836: PUSH
13837: LD_INT 45
13839: PUSH
13840: LD_VAR 0 5
13844: IN
13845: OR
13846: AND
13847: IFFALSE 14101
// begin hex := GetHexInfo ( x , y ) ;
13849: LD_ADDR_VAR 0 4
13853: PUSH
13854: LD_VAR 0 10
13858: PPUSH
13859: LD_VAR 0 11
13863: PPUSH
13864: CALL_OW 546
13868: ST_TO_ADDR
// if hex [ 1 ] then
13869: LD_VAR 0 4
13873: PUSH
13874: LD_INT 1
13876: ARRAY
13877: IFFALSE 13881
// exit ;
13879: GO 14284
// height := hex [ 2 ] ;
13881: LD_ADDR_VAR 0 15
13885: PUSH
13886: LD_VAR 0 4
13890: PUSH
13891: LD_INT 2
13893: ARRAY
13894: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13895: LD_ADDR_VAR 0 14
13899: PUSH
13900: LD_INT 0
13902: PUSH
13903: LD_INT 2
13905: PUSH
13906: LD_INT 3
13908: PUSH
13909: LD_INT 5
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: ST_TO_ADDR
// for i in tmp do
13918: LD_ADDR_VAR 0 8
13922: PUSH
13923: LD_VAR 0 14
13927: PUSH
13928: FOR_IN
13929: IFFALSE 14099
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13931: LD_ADDR_VAR 0 9
13935: PUSH
13936: LD_VAR 0 10
13940: PPUSH
13941: LD_VAR 0 8
13945: PPUSH
13946: LD_INT 5
13948: PPUSH
13949: CALL_OW 272
13953: PUSH
13954: LD_VAR 0 11
13958: PPUSH
13959: LD_VAR 0 8
13963: PPUSH
13964: LD_INT 5
13966: PPUSH
13967: CALL_OW 273
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13976: LD_VAR 0 9
13980: PUSH
13981: LD_INT 1
13983: ARRAY
13984: PPUSH
13985: LD_VAR 0 9
13989: PUSH
13990: LD_INT 2
13992: ARRAY
13993: PPUSH
13994: CALL_OW 488
13998: IFFALSE 14097
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14000: LD_ADDR_VAR 0 4
14004: PUSH
14005: LD_VAR 0 9
14009: PUSH
14010: LD_INT 1
14012: ARRAY
14013: PPUSH
14014: LD_VAR 0 9
14018: PUSH
14019: LD_INT 2
14021: ARRAY
14022: PPUSH
14023: CALL_OW 546
14027: ST_TO_ADDR
// if hex [ 1 ] then
14028: LD_VAR 0 4
14032: PUSH
14033: LD_INT 1
14035: ARRAY
14036: IFFALSE 14040
// continue ;
14038: GO 13928
// h := hex [ 2 ] ;
14040: LD_ADDR_VAR 0 13
14044: PUSH
14045: LD_VAR 0 4
14049: PUSH
14050: LD_INT 2
14052: ARRAY
14053: ST_TO_ADDR
// if h + 7 < height then
14054: LD_VAR 0 13
14058: PUSH
14059: LD_INT 7
14061: PLUS
14062: PUSH
14063: LD_VAR 0 15
14067: LESS
14068: IFFALSE 14097
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14070: LD_ADDR_VAR 0 18
14074: PUSH
14075: LD_INT 7
14077: PUSH
14078: LD_INT 28
14080: PUSH
14081: LD_INT 45
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: LIST
14088: PUSH
14089: LD_VAR 0 12
14093: ARRAY
14094: ST_TO_ADDR
// break ;
14095: GO 14099
// end ; end ; end ;
14097: GO 13928
14099: POP
14100: POP
// end ; if not weapon then
14101: LD_VAR 0 18
14105: NOT
14106: IFFALSE 14166
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14108: LD_ADDR_VAR 0 5
14112: PUSH
14113: LD_VAR 0 5
14117: PUSH
14118: LD_INT 11
14120: PUSH
14121: LD_INT 30
14123: PUSH
14124: LD_INT 49
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: LIST
14131: DIFF
14132: ST_TO_ADDR
// if not list then
14133: LD_VAR 0 5
14137: NOT
14138: IFFALSE 14142
// exit ;
14140: GO 14284
// weapon := list [ rand ( 1 , list ) ] ;
14142: LD_ADDR_VAR 0 18
14146: PUSH
14147: LD_VAR 0 5
14151: PUSH
14152: LD_INT 1
14154: PPUSH
14155: LD_VAR 0 5
14159: PPUSH
14160: CALL_OW 12
14164: ARRAY
14165: ST_TO_ADDR
// end ; if weapon then
14166: LD_VAR 0 18
14170: IFFALSE 14284
// begin tmp := CostOfWeapon ( weapon ) ;
14172: LD_ADDR_VAR 0 14
14176: PUSH
14177: LD_VAR 0 18
14181: PPUSH
14182: CALL_OW 451
14186: ST_TO_ADDR
// j := GetBase ( tower ) ;
14187: LD_ADDR_VAR 0 9
14191: PUSH
14192: LD_VAR 0 1
14196: PPUSH
14197: CALL_OW 274
14201: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14202: LD_VAR 0 9
14206: PPUSH
14207: LD_INT 1
14209: PPUSH
14210: CALL_OW 275
14214: PUSH
14215: LD_VAR 0 14
14219: PUSH
14220: LD_INT 1
14222: ARRAY
14223: GREATEREQUAL
14224: PUSH
14225: LD_VAR 0 9
14229: PPUSH
14230: LD_INT 2
14232: PPUSH
14233: CALL_OW 275
14237: PUSH
14238: LD_VAR 0 14
14242: PUSH
14243: LD_INT 2
14245: ARRAY
14246: GREATEREQUAL
14247: AND
14248: PUSH
14249: LD_VAR 0 9
14253: PPUSH
14254: LD_INT 3
14256: PPUSH
14257: CALL_OW 275
14261: PUSH
14262: LD_VAR 0 14
14266: PUSH
14267: LD_INT 3
14269: ARRAY
14270: GREATEREQUAL
14271: AND
14272: IFFALSE 14284
// result := weapon ;
14274: LD_ADDR_VAR 0 3
14278: PUSH
14279: LD_VAR 0 18
14283: ST_TO_ADDR
// end ; end ;
14284: LD_VAR 0 3
14288: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14289: LD_INT 0
14291: PPUSH
14292: PPUSH
// result := true ;
14293: LD_ADDR_VAR 0 3
14297: PUSH
14298: LD_INT 1
14300: ST_TO_ADDR
// if array1 = array2 then
14301: LD_VAR 0 1
14305: PUSH
14306: LD_VAR 0 2
14310: EQUAL
14311: IFFALSE 14371
// begin for i = 1 to array1 do
14313: LD_ADDR_VAR 0 4
14317: PUSH
14318: DOUBLE
14319: LD_INT 1
14321: DEC
14322: ST_TO_ADDR
14323: LD_VAR 0 1
14327: PUSH
14328: FOR_TO
14329: IFFALSE 14367
// if array1 [ i ] <> array2 [ i ] then
14331: LD_VAR 0 1
14335: PUSH
14336: LD_VAR 0 4
14340: ARRAY
14341: PUSH
14342: LD_VAR 0 2
14346: PUSH
14347: LD_VAR 0 4
14351: ARRAY
14352: NONEQUAL
14353: IFFALSE 14365
// begin result := false ;
14355: LD_ADDR_VAR 0 3
14359: PUSH
14360: LD_INT 0
14362: ST_TO_ADDR
// break ;
14363: GO 14367
// end ;
14365: GO 14328
14367: POP
14368: POP
// end else
14369: GO 14379
// result := false ;
14371: LD_ADDR_VAR 0 3
14375: PUSH
14376: LD_INT 0
14378: ST_TO_ADDR
// end ;
14379: LD_VAR 0 3
14383: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14384: LD_INT 0
14386: PPUSH
14387: PPUSH
// if not array1 or not array2 then
14388: LD_VAR 0 1
14392: NOT
14393: PUSH
14394: LD_VAR 0 2
14398: NOT
14399: OR
14400: IFFALSE 14404
// exit ;
14402: GO 14468
// result := true ;
14404: LD_ADDR_VAR 0 3
14408: PUSH
14409: LD_INT 1
14411: ST_TO_ADDR
// for i = 1 to array1 do
14412: LD_ADDR_VAR 0 4
14416: PUSH
14417: DOUBLE
14418: LD_INT 1
14420: DEC
14421: ST_TO_ADDR
14422: LD_VAR 0 1
14426: PUSH
14427: FOR_TO
14428: IFFALSE 14466
// if array1 [ i ] <> array2 [ i ] then
14430: LD_VAR 0 1
14434: PUSH
14435: LD_VAR 0 4
14439: ARRAY
14440: PUSH
14441: LD_VAR 0 2
14445: PUSH
14446: LD_VAR 0 4
14450: ARRAY
14451: NONEQUAL
14452: IFFALSE 14464
// begin result := false ;
14454: LD_ADDR_VAR 0 3
14458: PUSH
14459: LD_INT 0
14461: ST_TO_ADDR
// break ;
14462: GO 14466
// end ;
14464: GO 14427
14466: POP
14467: POP
// end ;
14468: LD_VAR 0 3
14472: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14473: LD_INT 0
14475: PPUSH
14476: PPUSH
14477: PPUSH
// pom := GetBase ( fac ) ;
14478: LD_ADDR_VAR 0 5
14482: PUSH
14483: LD_VAR 0 1
14487: PPUSH
14488: CALL_OW 274
14492: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14493: LD_ADDR_VAR 0 4
14497: PUSH
14498: LD_VAR 0 2
14502: PUSH
14503: LD_INT 1
14505: ARRAY
14506: PPUSH
14507: LD_VAR 0 2
14511: PUSH
14512: LD_INT 2
14514: ARRAY
14515: PPUSH
14516: LD_VAR 0 2
14520: PUSH
14521: LD_INT 3
14523: ARRAY
14524: PPUSH
14525: LD_VAR 0 2
14529: PUSH
14530: LD_INT 4
14532: ARRAY
14533: PPUSH
14534: CALL_OW 449
14538: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14539: LD_ADDR_VAR 0 3
14543: PUSH
14544: LD_VAR 0 5
14548: PPUSH
14549: LD_INT 1
14551: PPUSH
14552: CALL_OW 275
14556: PUSH
14557: LD_VAR 0 4
14561: PUSH
14562: LD_INT 1
14564: ARRAY
14565: GREATEREQUAL
14566: PUSH
14567: LD_VAR 0 5
14571: PPUSH
14572: LD_INT 2
14574: PPUSH
14575: CALL_OW 275
14579: PUSH
14580: LD_VAR 0 4
14584: PUSH
14585: LD_INT 2
14587: ARRAY
14588: GREATEREQUAL
14589: AND
14590: PUSH
14591: LD_VAR 0 5
14595: PPUSH
14596: LD_INT 3
14598: PPUSH
14599: CALL_OW 275
14603: PUSH
14604: LD_VAR 0 4
14608: PUSH
14609: LD_INT 3
14611: ARRAY
14612: GREATEREQUAL
14613: AND
14614: ST_TO_ADDR
// end ;
14615: LD_VAR 0 3
14619: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14620: LD_INT 0
14622: PPUSH
14623: PPUSH
14624: PPUSH
14625: PPUSH
// pom := GetBase ( building ) ;
14626: LD_ADDR_VAR 0 3
14630: PUSH
14631: LD_VAR 0 1
14635: PPUSH
14636: CALL_OW 274
14640: ST_TO_ADDR
// if not pom then
14641: LD_VAR 0 3
14645: NOT
14646: IFFALSE 14650
// exit ;
14648: GO 14820
// btype := GetBType ( building ) ;
14650: LD_ADDR_VAR 0 5
14654: PUSH
14655: LD_VAR 0 1
14659: PPUSH
14660: CALL_OW 266
14664: ST_TO_ADDR
// if btype = b_armoury then
14665: LD_VAR 0 5
14669: PUSH
14670: LD_INT 4
14672: EQUAL
14673: IFFALSE 14683
// btype := b_barracks ;
14675: LD_ADDR_VAR 0 5
14679: PUSH
14680: LD_INT 5
14682: ST_TO_ADDR
// if btype = b_depot then
14683: LD_VAR 0 5
14687: PUSH
14688: LD_INT 0
14690: EQUAL
14691: IFFALSE 14701
// btype := b_warehouse ;
14693: LD_ADDR_VAR 0 5
14697: PUSH
14698: LD_INT 1
14700: ST_TO_ADDR
// if btype = b_workshop then
14701: LD_VAR 0 5
14705: PUSH
14706: LD_INT 2
14708: EQUAL
14709: IFFALSE 14719
// btype := b_factory ;
14711: LD_ADDR_VAR 0 5
14715: PUSH
14716: LD_INT 3
14718: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14719: LD_ADDR_VAR 0 4
14723: PUSH
14724: LD_VAR 0 5
14728: PPUSH
14729: LD_VAR 0 1
14733: PPUSH
14734: CALL_OW 248
14738: PPUSH
14739: CALL_OW 450
14743: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14744: LD_ADDR_VAR 0 2
14748: PUSH
14749: LD_VAR 0 3
14753: PPUSH
14754: LD_INT 1
14756: PPUSH
14757: CALL_OW 275
14761: PUSH
14762: LD_VAR 0 4
14766: PUSH
14767: LD_INT 1
14769: ARRAY
14770: GREATEREQUAL
14771: PUSH
14772: LD_VAR 0 3
14776: PPUSH
14777: LD_INT 2
14779: PPUSH
14780: CALL_OW 275
14784: PUSH
14785: LD_VAR 0 4
14789: PUSH
14790: LD_INT 2
14792: ARRAY
14793: GREATEREQUAL
14794: AND
14795: PUSH
14796: LD_VAR 0 3
14800: PPUSH
14801: LD_INT 3
14803: PPUSH
14804: CALL_OW 275
14808: PUSH
14809: LD_VAR 0 4
14813: PUSH
14814: LD_INT 3
14816: ARRAY
14817: GREATEREQUAL
14818: AND
14819: ST_TO_ADDR
// end ;
14820: LD_VAR 0 2
14824: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14825: LD_INT 0
14827: PPUSH
14828: PPUSH
14829: PPUSH
// pom := GetBase ( building ) ;
14830: LD_ADDR_VAR 0 4
14834: PUSH
14835: LD_VAR 0 1
14839: PPUSH
14840: CALL_OW 274
14844: ST_TO_ADDR
// if not pom then
14845: LD_VAR 0 4
14849: NOT
14850: IFFALSE 14854
// exit ;
14852: GO 14955
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14854: LD_ADDR_VAR 0 5
14858: PUSH
14859: LD_VAR 0 2
14863: PPUSH
14864: LD_VAR 0 1
14868: PPUSH
14869: CALL_OW 248
14873: PPUSH
14874: CALL_OW 450
14878: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14879: LD_ADDR_VAR 0 3
14883: PUSH
14884: LD_VAR 0 4
14888: PPUSH
14889: LD_INT 1
14891: PPUSH
14892: CALL_OW 275
14896: PUSH
14897: LD_VAR 0 5
14901: PUSH
14902: LD_INT 1
14904: ARRAY
14905: GREATEREQUAL
14906: PUSH
14907: LD_VAR 0 4
14911: PPUSH
14912: LD_INT 2
14914: PPUSH
14915: CALL_OW 275
14919: PUSH
14920: LD_VAR 0 5
14924: PUSH
14925: LD_INT 2
14927: ARRAY
14928: GREATEREQUAL
14929: AND
14930: PUSH
14931: LD_VAR 0 4
14935: PPUSH
14936: LD_INT 3
14938: PPUSH
14939: CALL_OW 275
14943: PUSH
14944: LD_VAR 0 5
14948: PUSH
14949: LD_INT 3
14951: ARRAY
14952: GREATEREQUAL
14953: AND
14954: ST_TO_ADDR
// end ;
14955: LD_VAR 0 3
14959: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14960: LD_INT 0
14962: PPUSH
14963: PPUSH
14964: PPUSH
14965: PPUSH
14966: PPUSH
14967: PPUSH
14968: PPUSH
14969: PPUSH
14970: PPUSH
14971: PPUSH
14972: PPUSH
// result := false ;
14973: LD_ADDR_VAR 0 8
14977: PUSH
14978: LD_INT 0
14980: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14981: LD_VAR 0 5
14985: NOT
14986: PUSH
14987: LD_VAR 0 1
14991: NOT
14992: OR
14993: PUSH
14994: LD_VAR 0 2
14998: NOT
14999: OR
15000: PUSH
15001: LD_VAR 0 3
15005: NOT
15006: OR
15007: IFFALSE 15011
// exit ;
15009: GO 15825
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15011: LD_ADDR_VAR 0 14
15015: PUSH
15016: LD_VAR 0 1
15020: PPUSH
15021: LD_VAR 0 2
15025: PPUSH
15026: LD_VAR 0 3
15030: PPUSH
15031: LD_VAR 0 4
15035: PPUSH
15036: LD_VAR 0 5
15040: PUSH
15041: LD_INT 1
15043: ARRAY
15044: PPUSH
15045: CALL_OW 248
15049: PPUSH
15050: LD_INT 0
15052: PPUSH
15053: CALL 17078 0 6
15057: ST_TO_ADDR
// if not hexes then
15058: LD_VAR 0 14
15062: NOT
15063: IFFALSE 15067
// exit ;
15065: GO 15825
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15067: LD_ADDR_VAR 0 17
15071: PUSH
15072: LD_VAR 0 5
15076: PPUSH
15077: LD_INT 22
15079: PUSH
15080: LD_VAR 0 13
15084: PPUSH
15085: CALL_OW 255
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: PUSH
15094: LD_INT 2
15096: PUSH
15097: LD_INT 30
15099: PUSH
15100: LD_INT 0
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PUSH
15107: LD_INT 30
15109: PUSH
15110: LD_INT 1
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: LIST
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: PPUSH
15126: CALL_OW 72
15130: ST_TO_ADDR
// for i = 1 to hexes do
15131: LD_ADDR_VAR 0 9
15135: PUSH
15136: DOUBLE
15137: LD_INT 1
15139: DEC
15140: ST_TO_ADDR
15141: LD_VAR 0 14
15145: PUSH
15146: FOR_TO
15147: IFFALSE 15823
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15149: LD_ADDR_VAR 0 13
15153: PUSH
15154: LD_VAR 0 14
15158: PUSH
15159: LD_VAR 0 9
15163: ARRAY
15164: PUSH
15165: LD_INT 1
15167: ARRAY
15168: PPUSH
15169: LD_VAR 0 14
15173: PUSH
15174: LD_VAR 0 9
15178: ARRAY
15179: PUSH
15180: LD_INT 2
15182: ARRAY
15183: PPUSH
15184: CALL_OW 428
15188: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15189: LD_VAR 0 14
15193: PUSH
15194: LD_VAR 0 9
15198: ARRAY
15199: PUSH
15200: LD_INT 1
15202: ARRAY
15203: PPUSH
15204: LD_VAR 0 14
15208: PUSH
15209: LD_VAR 0 9
15213: ARRAY
15214: PUSH
15215: LD_INT 2
15217: ARRAY
15218: PPUSH
15219: CALL_OW 351
15223: PUSH
15224: LD_VAR 0 14
15228: PUSH
15229: LD_VAR 0 9
15233: ARRAY
15234: PUSH
15235: LD_INT 1
15237: ARRAY
15238: PPUSH
15239: LD_VAR 0 14
15243: PUSH
15244: LD_VAR 0 9
15248: ARRAY
15249: PUSH
15250: LD_INT 2
15252: ARRAY
15253: PPUSH
15254: CALL_OW 488
15258: NOT
15259: OR
15260: PUSH
15261: LD_VAR 0 13
15265: PPUSH
15266: CALL_OW 247
15270: PUSH
15271: LD_INT 3
15273: EQUAL
15274: OR
15275: IFFALSE 15281
// exit ;
15277: POP
15278: POP
15279: GO 15825
// if not tmp then
15281: LD_VAR 0 13
15285: NOT
15286: IFFALSE 15290
// continue ;
15288: GO 15146
// result := true ;
15290: LD_ADDR_VAR 0 8
15294: PUSH
15295: LD_INT 1
15297: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15298: LD_VAR 0 6
15302: PUSH
15303: LD_VAR 0 13
15307: PPUSH
15308: CALL_OW 247
15312: PUSH
15313: LD_INT 2
15315: EQUAL
15316: AND
15317: PUSH
15318: LD_VAR 0 13
15322: PPUSH
15323: CALL_OW 263
15327: PUSH
15328: LD_INT 1
15330: EQUAL
15331: AND
15332: IFFALSE 15496
// begin if IsDrivenBy ( tmp ) then
15334: LD_VAR 0 13
15338: PPUSH
15339: CALL_OW 311
15343: IFFALSE 15347
// continue ;
15345: GO 15146
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15347: LD_VAR 0 6
15351: PPUSH
15352: LD_INT 3
15354: PUSH
15355: LD_INT 60
15357: PUSH
15358: EMPTY
15359: LIST
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: PUSH
15365: LD_INT 3
15367: PUSH
15368: LD_INT 55
15370: PUSH
15371: EMPTY
15372: LIST
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PPUSH
15382: CALL_OW 72
15386: IFFALSE 15494
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15388: LD_ADDR_VAR 0 18
15392: PUSH
15393: LD_VAR 0 6
15397: PPUSH
15398: LD_INT 3
15400: PUSH
15401: LD_INT 60
15403: PUSH
15404: EMPTY
15405: LIST
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 3
15413: PUSH
15414: LD_INT 55
15416: PUSH
15417: EMPTY
15418: LIST
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PPUSH
15428: CALL_OW 72
15432: PUSH
15433: LD_INT 1
15435: ARRAY
15436: ST_TO_ADDR
// if IsInUnit ( driver ) then
15437: LD_VAR 0 18
15441: PPUSH
15442: CALL_OW 310
15446: IFFALSE 15457
// ComExit ( driver ) ;
15448: LD_VAR 0 18
15452: PPUSH
15453: CALL 40870 0 1
// AddComEnterUnit ( driver , tmp ) ;
15457: LD_VAR 0 18
15461: PPUSH
15462: LD_VAR 0 13
15466: PPUSH
15467: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15471: LD_VAR 0 18
15475: PPUSH
15476: LD_VAR 0 7
15480: PPUSH
15481: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15485: LD_VAR 0 18
15489: PPUSH
15490: CALL_OW 181
// end ; continue ;
15494: GO 15146
// end ; if not cleaners or not tmp in cleaners then
15496: LD_VAR 0 6
15500: NOT
15501: PUSH
15502: LD_VAR 0 13
15506: PUSH
15507: LD_VAR 0 6
15511: IN
15512: NOT
15513: OR
15514: IFFALSE 15821
// begin if dep then
15516: LD_VAR 0 17
15520: IFFALSE 15656
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15522: LD_ADDR_VAR 0 16
15526: PUSH
15527: LD_VAR 0 17
15531: PUSH
15532: LD_INT 1
15534: ARRAY
15535: PPUSH
15536: CALL_OW 250
15540: PPUSH
15541: LD_VAR 0 17
15545: PUSH
15546: LD_INT 1
15548: ARRAY
15549: PPUSH
15550: CALL_OW 254
15554: PPUSH
15555: LD_INT 5
15557: PPUSH
15558: CALL_OW 272
15562: PUSH
15563: LD_VAR 0 17
15567: PUSH
15568: LD_INT 1
15570: ARRAY
15571: PPUSH
15572: CALL_OW 251
15576: PPUSH
15577: LD_VAR 0 17
15581: PUSH
15582: LD_INT 1
15584: ARRAY
15585: PPUSH
15586: CALL_OW 254
15590: PPUSH
15591: LD_INT 5
15593: PPUSH
15594: CALL_OW 273
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15603: LD_VAR 0 16
15607: PUSH
15608: LD_INT 1
15610: ARRAY
15611: PPUSH
15612: LD_VAR 0 16
15616: PUSH
15617: LD_INT 2
15619: ARRAY
15620: PPUSH
15621: CALL_OW 488
15625: IFFALSE 15656
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15627: LD_VAR 0 13
15631: PPUSH
15632: LD_VAR 0 16
15636: PUSH
15637: LD_INT 1
15639: ARRAY
15640: PPUSH
15641: LD_VAR 0 16
15645: PUSH
15646: LD_INT 2
15648: ARRAY
15649: PPUSH
15650: CALL_OW 111
// continue ;
15654: GO 15146
// end ; end ; r := GetDir ( tmp ) ;
15656: LD_ADDR_VAR 0 15
15660: PUSH
15661: LD_VAR 0 13
15665: PPUSH
15666: CALL_OW 254
15670: ST_TO_ADDR
// if r = 5 then
15671: LD_VAR 0 15
15675: PUSH
15676: LD_INT 5
15678: EQUAL
15679: IFFALSE 15689
// r := 0 ;
15681: LD_ADDR_VAR 0 15
15685: PUSH
15686: LD_INT 0
15688: ST_TO_ADDR
// for j = r to 5 do
15689: LD_ADDR_VAR 0 10
15693: PUSH
15694: DOUBLE
15695: LD_VAR 0 15
15699: DEC
15700: ST_TO_ADDR
15701: LD_INT 5
15703: PUSH
15704: FOR_TO
15705: IFFALSE 15819
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15707: LD_ADDR_VAR 0 11
15711: PUSH
15712: LD_VAR 0 13
15716: PPUSH
15717: CALL_OW 250
15721: PPUSH
15722: LD_VAR 0 10
15726: PPUSH
15727: LD_INT 2
15729: PPUSH
15730: CALL_OW 272
15734: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15735: LD_ADDR_VAR 0 12
15739: PUSH
15740: LD_VAR 0 13
15744: PPUSH
15745: CALL_OW 251
15749: PPUSH
15750: LD_VAR 0 10
15754: PPUSH
15755: LD_INT 2
15757: PPUSH
15758: CALL_OW 273
15762: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15763: LD_VAR 0 11
15767: PPUSH
15768: LD_VAR 0 12
15772: PPUSH
15773: CALL_OW 488
15777: PUSH
15778: LD_VAR 0 11
15782: PPUSH
15783: LD_VAR 0 12
15787: PPUSH
15788: CALL_OW 428
15792: NOT
15793: AND
15794: IFFALSE 15817
// begin ComMoveXY ( tmp , _x , _y ) ;
15796: LD_VAR 0 13
15800: PPUSH
15801: LD_VAR 0 11
15805: PPUSH
15806: LD_VAR 0 12
15810: PPUSH
15811: CALL_OW 111
// break ;
15815: GO 15819
// end ; end ;
15817: GO 15704
15819: POP
15820: POP
// end ; end ;
15821: GO 15146
15823: POP
15824: POP
// end ;
15825: LD_VAR 0 8
15829: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15830: LD_INT 0
15832: PPUSH
// result := true ;
15833: LD_ADDR_VAR 0 3
15837: PUSH
15838: LD_INT 1
15840: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15841: LD_VAR 0 2
15845: PUSH
15846: LD_INT 24
15848: DOUBLE
15849: EQUAL
15850: IFTRUE 15860
15852: LD_INT 33
15854: DOUBLE
15855: EQUAL
15856: IFTRUE 15860
15858: GO 15885
15860: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15861: LD_ADDR_VAR 0 3
15865: PUSH
15866: LD_INT 32
15868: PPUSH
15869: LD_VAR 0 1
15873: PPUSH
15874: CALL_OW 321
15878: PUSH
15879: LD_INT 2
15881: EQUAL
15882: ST_TO_ADDR
15883: GO 16201
15885: LD_INT 20
15887: DOUBLE
15888: EQUAL
15889: IFTRUE 15893
15891: GO 15918
15893: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15894: LD_ADDR_VAR 0 3
15898: PUSH
15899: LD_INT 6
15901: PPUSH
15902: LD_VAR 0 1
15906: PPUSH
15907: CALL_OW 321
15911: PUSH
15912: LD_INT 2
15914: EQUAL
15915: ST_TO_ADDR
15916: GO 16201
15918: LD_INT 22
15920: DOUBLE
15921: EQUAL
15922: IFTRUE 15932
15924: LD_INT 36
15926: DOUBLE
15927: EQUAL
15928: IFTRUE 15932
15930: GO 15957
15932: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15933: LD_ADDR_VAR 0 3
15937: PUSH
15938: LD_INT 15
15940: PPUSH
15941: LD_VAR 0 1
15945: PPUSH
15946: CALL_OW 321
15950: PUSH
15951: LD_INT 2
15953: EQUAL
15954: ST_TO_ADDR
15955: GO 16201
15957: LD_INT 30
15959: DOUBLE
15960: EQUAL
15961: IFTRUE 15965
15963: GO 15990
15965: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
15966: LD_ADDR_VAR 0 3
15970: PUSH
15971: LD_INT 20
15973: PPUSH
15974: LD_VAR 0 1
15978: PPUSH
15979: CALL_OW 321
15983: PUSH
15984: LD_INT 2
15986: EQUAL
15987: ST_TO_ADDR
15988: GO 16201
15990: LD_INT 28
15992: DOUBLE
15993: EQUAL
15994: IFTRUE 16004
15996: LD_INT 21
15998: DOUBLE
15999: EQUAL
16000: IFTRUE 16004
16002: GO 16029
16004: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16005: LD_ADDR_VAR 0 3
16009: PUSH
16010: LD_INT 21
16012: PPUSH
16013: LD_VAR 0 1
16017: PPUSH
16018: CALL_OW 321
16022: PUSH
16023: LD_INT 2
16025: EQUAL
16026: ST_TO_ADDR
16027: GO 16201
16029: LD_INT 16
16031: DOUBLE
16032: EQUAL
16033: IFTRUE 16037
16035: GO 16062
16037: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16038: LD_ADDR_VAR 0 3
16042: PUSH
16043: LD_INT 84
16045: PPUSH
16046: LD_VAR 0 1
16050: PPUSH
16051: CALL_OW 321
16055: PUSH
16056: LD_INT 2
16058: EQUAL
16059: ST_TO_ADDR
16060: GO 16201
16062: LD_INT 19
16064: DOUBLE
16065: EQUAL
16066: IFTRUE 16076
16068: LD_INT 23
16070: DOUBLE
16071: EQUAL
16072: IFTRUE 16076
16074: GO 16101
16076: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16077: LD_ADDR_VAR 0 3
16081: PUSH
16082: LD_INT 83
16084: PPUSH
16085: LD_VAR 0 1
16089: PPUSH
16090: CALL_OW 321
16094: PUSH
16095: LD_INT 2
16097: EQUAL
16098: ST_TO_ADDR
16099: GO 16201
16101: LD_INT 17
16103: DOUBLE
16104: EQUAL
16105: IFTRUE 16109
16107: GO 16134
16109: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16110: LD_ADDR_VAR 0 3
16114: PUSH
16115: LD_INT 39
16117: PPUSH
16118: LD_VAR 0 1
16122: PPUSH
16123: CALL_OW 321
16127: PUSH
16128: LD_INT 2
16130: EQUAL
16131: ST_TO_ADDR
16132: GO 16201
16134: LD_INT 18
16136: DOUBLE
16137: EQUAL
16138: IFTRUE 16142
16140: GO 16167
16142: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16143: LD_ADDR_VAR 0 3
16147: PUSH
16148: LD_INT 40
16150: PPUSH
16151: LD_VAR 0 1
16155: PPUSH
16156: CALL_OW 321
16160: PUSH
16161: LD_INT 2
16163: EQUAL
16164: ST_TO_ADDR
16165: GO 16201
16167: LD_INT 27
16169: DOUBLE
16170: EQUAL
16171: IFTRUE 16175
16173: GO 16200
16175: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16176: LD_ADDR_VAR 0 3
16180: PUSH
16181: LD_INT 35
16183: PPUSH
16184: LD_VAR 0 1
16188: PPUSH
16189: CALL_OW 321
16193: PUSH
16194: LD_INT 2
16196: EQUAL
16197: ST_TO_ADDR
16198: GO 16201
16200: POP
// end ;
16201: LD_VAR 0 3
16205: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16206: LD_INT 0
16208: PPUSH
16209: PPUSH
16210: PPUSH
16211: PPUSH
16212: PPUSH
16213: PPUSH
16214: PPUSH
16215: PPUSH
16216: PPUSH
16217: PPUSH
16218: PPUSH
// result := false ;
16219: LD_ADDR_VAR 0 6
16223: PUSH
16224: LD_INT 0
16226: ST_TO_ADDR
// if btype = b_depot then
16227: LD_VAR 0 2
16231: PUSH
16232: LD_INT 0
16234: EQUAL
16235: IFFALSE 16247
// begin result := true ;
16237: LD_ADDR_VAR 0 6
16241: PUSH
16242: LD_INT 1
16244: ST_TO_ADDR
// exit ;
16245: GO 17073
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16247: LD_VAR 0 1
16251: NOT
16252: PUSH
16253: LD_VAR 0 1
16257: PPUSH
16258: CALL_OW 266
16262: PUSH
16263: LD_INT 0
16265: PUSH
16266: LD_INT 1
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: IN
16273: NOT
16274: OR
16275: PUSH
16276: LD_VAR 0 2
16280: NOT
16281: OR
16282: PUSH
16283: LD_VAR 0 5
16287: PUSH
16288: LD_INT 0
16290: PUSH
16291: LD_INT 1
16293: PUSH
16294: LD_INT 2
16296: PUSH
16297: LD_INT 3
16299: PUSH
16300: LD_INT 4
16302: PUSH
16303: LD_INT 5
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: IN
16314: NOT
16315: OR
16316: PUSH
16317: LD_VAR 0 3
16321: PPUSH
16322: LD_VAR 0 4
16326: PPUSH
16327: CALL_OW 488
16331: NOT
16332: OR
16333: IFFALSE 16337
// exit ;
16335: GO 17073
// side := GetSide ( depot ) ;
16337: LD_ADDR_VAR 0 9
16341: PUSH
16342: LD_VAR 0 1
16346: PPUSH
16347: CALL_OW 255
16351: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16352: LD_VAR 0 9
16356: PPUSH
16357: LD_VAR 0 2
16361: PPUSH
16362: CALL 15830 0 2
16366: NOT
16367: IFFALSE 16371
// exit ;
16369: GO 17073
// pom := GetBase ( depot ) ;
16371: LD_ADDR_VAR 0 10
16375: PUSH
16376: LD_VAR 0 1
16380: PPUSH
16381: CALL_OW 274
16385: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16386: LD_ADDR_VAR 0 11
16390: PUSH
16391: LD_VAR 0 2
16395: PPUSH
16396: LD_VAR 0 1
16400: PPUSH
16401: CALL_OW 248
16405: PPUSH
16406: CALL_OW 450
16410: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16411: LD_VAR 0 10
16415: PPUSH
16416: LD_INT 1
16418: PPUSH
16419: CALL_OW 275
16423: PUSH
16424: LD_VAR 0 11
16428: PUSH
16429: LD_INT 1
16431: ARRAY
16432: GREATEREQUAL
16433: PUSH
16434: LD_VAR 0 10
16438: PPUSH
16439: LD_INT 2
16441: PPUSH
16442: CALL_OW 275
16446: PUSH
16447: LD_VAR 0 11
16451: PUSH
16452: LD_INT 2
16454: ARRAY
16455: GREATEREQUAL
16456: AND
16457: PUSH
16458: LD_VAR 0 10
16462: PPUSH
16463: LD_INT 3
16465: PPUSH
16466: CALL_OW 275
16470: PUSH
16471: LD_VAR 0 11
16475: PUSH
16476: LD_INT 3
16478: ARRAY
16479: GREATEREQUAL
16480: AND
16481: NOT
16482: IFFALSE 16486
// exit ;
16484: GO 17073
// if GetBType ( depot ) = b_depot then
16486: LD_VAR 0 1
16490: PPUSH
16491: CALL_OW 266
16495: PUSH
16496: LD_INT 0
16498: EQUAL
16499: IFFALSE 16511
// dist := 28 else
16501: LD_ADDR_VAR 0 14
16505: PUSH
16506: LD_INT 28
16508: ST_TO_ADDR
16509: GO 16519
// dist := 36 ;
16511: LD_ADDR_VAR 0 14
16515: PUSH
16516: LD_INT 36
16518: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16519: LD_VAR 0 1
16523: PPUSH
16524: LD_VAR 0 3
16528: PPUSH
16529: LD_VAR 0 4
16533: PPUSH
16534: CALL_OW 297
16538: PUSH
16539: LD_VAR 0 14
16543: GREATER
16544: IFFALSE 16548
// exit ;
16546: GO 17073
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16548: LD_ADDR_VAR 0 12
16552: PUSH
16553: LD_VAR 0 2
16557: PPUSH
16558: LD_VAR 0 3
16562: PPUSH
16563: LD_VAR 0 4
16567: PPUSH
16568: LD_VAR 0 5
16572: PPUSH
16573: LD_VAR 0 1
16577: PPUSH
16578: CALL_OW 248
16582: PPUSH
16583: LD_INT 0
16585: PPUSH
16586: CALL 17078 0 6
16590: ST_TO_ADDR
// if not hexes then
16591: LD_VAR 0 12
16595: NOT
16596: IFFALSE 16600
// exit ;
16598: GO 17073
// hex := GetHexInfo ( x , y ) ;
16600: LD_ADDR_VAR 0 15
16604: PUSH
16605: LD_VAR 0 3
16609: PPUSH
16610: LD_VAR 0 4
16614: PPUSH
16615: CALL_OW 546
16619: ST_TO_ADDR
// if hex [ 1 ] then
16620: LD_VAR 0 15
16624: PUSH
16625: LD_INT 1
16627: ARRAY
16628: IFFALSE 16632
// exit ;
16630: GO 17073
// height := hex [ 2 ] ;
16632: LD_ADDR_VAR 0 13
16636: PUSH
16637: LD_VAR 0 15
16641: PUSH
16642: LD_INT 2
16644: ARRAY
16645: ST_TO_ADDR
// for i = 1 to hexes do
16646: LD_ADDR_VAR 0 7
16650: PUSH
16651: DOUBLE
16652: LD_INT 1
16654: DEC
16655: ST_TO_ADDR
16656: LD_VAR 0 12
16660: PUSH
16661: FOR_TO
16662: IFFALSE 16992
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16664: LD_VAR 0 12
16668: PUSH
16669: LD_VAR 0 7
16673: ARRAY
16674: PUSH
16675: LD_INT 1
16677: ARRAY
16678: PPUSH
16679: LD_VAR 0 12
16683: PUSH
16684: LD_VAR 0 7
16688: ARRAY
16689: PUSH
16690: LD_INT 2
16692: ARRAY
16693: PPUSH
16694: CALL_OW 488
16698: NOT
16699: PUSH
16700: LD_VAR 0 12
16704: PUSH
16705: LD_VAR 0 7
16709: ARRAY
16710: PUSH
16711: LD_INT 1
16713: ARRAY
16714: PPUSH
16715: LD_VAR 0 12
16719: PUSH
16720: LD_VAR 0 7
16724: ARRAY
16725: PUSH
16726: LD_INT 2
16728: ARRAY
16729: PPUSH
16730: CALL_OW 428
16734: PUSH
16735: LD_INT 0
16737: GREATER
16738: OR
16739: PUSH
16740: LD_VAR 0 12
16744: PUSH
16745: LD_VAR 0 7
16749: ARRAY
16750: PUSH
16751: LD_INT 1
16753: ARRAY
16754: PPUSH
16755: LD_VAR 0 12
16759: PUSH
16760: LD_VAR 0 7
16764: ARRAY
16765: PUSH
16766: LD_INT 2
16768: ARRAY
16769: PPUSH
16770: CALL_OW 351
16774: OR
16775: IFFALSE 16781
// exit ;
16777: POP
16778: POP
16779: GO 17073
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16781: LD_ADDR_VAR 0 8
16785: PUSH
16786: LD_VAR 0 12
16790: PUSH
16791: LD_VAR 0 7
16795: ARRAY
16796: PUSH
16797: LD_INT 1
16799: ARRAY
16800: PPUSH
16801: LD_VAR 0 12
16805: PUSH
16806: LD_VAR 0 7
16810: ARRAY
16811: PUSH
16812: LD_INT 2
16814: ARRAY
16815: PPUSH
16816: CALL_OW 546
16820: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16821: LD_VAR 0 8
16825: PUSH
16826: LD_INT 1
16828: ARRAY
16829: PUSH
16830: LD_VAR 0 8
16834: PUSH
16835: LD_INT 2
16837: ARRAY
16838: PUSH
16839: LD_VAR 0 13
16843: PUSH
16844: LD_INT 2
16846: PLUS
16847: GREATER
16848: OR
16849: PUSH
16850: LD_VAR 0 8
16854: PUSH
16855: LD_INT 2
16857: ARRAY
16858: PUSH
16859: LD_VAR 0 13
16863: PUSH
16864: LD_INT 2
16866: MINUS
16867: LESS
16868: OR
16869: PUSH
16870: LD_VAR 0 8
16874: PUSH
16875: LD_INT 3
16877: ARRAY
16878: PUSH
16879: LD_INT 0
16881: PUSH
16882: LD_INT 8
16884: PUSH
16885: LD_INT 9
16887: PUSH
16888: LD_INT 10
16890: PUSH
16891: LD_INT 11
16893: PUSH
16894: LD_INT 12
16896: PUSH
16897: LD_INT 13
16899: PUSH
16900: LD_INT 16
16902: PUSH
16903: LD_INT 17
16905: PUSH
16906: LD_INT 18
16908: PUSH
16909: LD_INT 19
16911: PUSH
16912: LD_INT 20
16914: PUSH
16915: LD_INT 21
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: IN
16933: NOT
16934: OR
16935: PUSH
16936: LD_VAR 0 8
16940: PUSH
16941: LD_INT 5
16943: ARRAY
16944: NOT
16945: OR
16946: PUSH
16947: LD_VAR 0 8
16951: PUSH
16952: LD_INT 6
16954: ARRAY
16955: PUSH
16956: LD_INT 1
16958: PUSH
16959: LD_INT 2
16961: PUSH
16962: LD_INT 7
16964: PUSH
16965: LD_INT 9
16967: PUSH
16968: LD_INT 10
16970: PUSH
16971: LD_INT 11
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: IN
16982: NOT
16983: OR
16984: IFFALSE 16990
// exit ;
16986: POP
16987: POP
16988: GO 17073
// end ;
16990: GO 16661
16992: POP
16993: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16994: LD_VAR 0 9
16998: PPUSH
16999: LD_VAR 0 3
17003: PPUSH
17004: LD_VAR 0 4
17008: PPUSH
17009: LD_INT 20
17011: PPUSH
17012: CALL 8996 0 4
17016: PUSH
17017: LD_INT 4
17019: ARRAY
17020: IFFALSE 17024
// exit ;
17022: GO 17073
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17024: LD_VAR 0 2
17028: PUSH
17029: LD_INT 29
17031: PUSH
17032: LD_INT 30
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: IN
17039: PUSH
17040: LD_VAR 0 3
17044: PPUSH
17045: LD_VAR 0 4
17049: PPUSH
17050: LD_VAR 0 9
17054: PPUSH
17055: CALL_OW 440
17059: NOT
17060: AND
17061: IFFALSE 17065
// exit ;
17063: GO 17073
// result := true ;
17065: LD_ADDR_VAR 0 6
17069: PUSH
17070: LD_INT 1
17072: ST_TO_ADDR
// end ;
17073: LD_VAR 0 6
17077: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17078: LD_INT 0
17080: PPUSH
17081: PPUSH
17082: PPUSH
17083: PPUSH
17084: PPUSH
17085: PPUSH
17086: PPUSH
17087: PPUSH
17088: PPUSH
17089: PPUSH
17090: PPUSH
17091: PPUSH
17092: PPUSH
17093: PPUSH
17094: PPUSH
17095: PPUSH
17096: PPUSH
17097: PPUSH
17098: PPUSH
17099: PPUSH
17100: PPUSH
17101: PPUSH
17102: PPUSH
17103: PPUSH
17104: PPUSH
17105: PPUSH
17106: PPUSH
17107: PPUSH
17108: PPUSH
17109: PPUSH
17110: PPUSH
17111: PPUSH
17112: PPUSH
17113: PPUSH
17114: PPUSH
17115: PPUSH
17116: PPUSH
17117: PPUSH
17118: PPUSH
17119: PPUSH
17120: PPUSH
17121: PPUSH
17122: PPUSH
17123: PPUSH
17124: PPUSH
17125: PPUSH
17126: PPUSH
17127: PPUSH
17128: PPUSH
17129: PPUSH
17130: PPUSH
17131: PPUSH
17132: PPUSH
17133: PPUSH
17134: PPUSH
17135: PPUSH
17136: PPUSH
17137: PPUSH
// result = [ ] ;
17138: LD_ADDR_VAR 0 7
17142: PUSH
17143: EMPTY
17144: ST_TO_ADDR
// temp_list = [ ] ;
17145: LD_ADDR_VAR 0 9
17149: PUSH
17150: EMPTY
17151: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17152: LD_VAR 0 4
17156: PUSH
17157: LD_INT 0
17159: PUSH
17160: LD_INT 1
17162: PUSH
17163: LD_INT 2
17165: PUSH
17166: LD_INT 3
17168: PUSH
17169: LD_INT 4
17171: PUSH
17172: LD_INT 5
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: IN
17183: NOT
17184: PUSH
17185: LD_VAR 0 1
17189: PUSH
17190: LD_INT 0
17192: PUSH
17193: LD_INT 1
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: IN
17200: PUSH
17201: LD_VAR 0 5
17205: PUSH
17206: LD_INT 1
17208: PUSH
17209: LD_INT 2
17211: PUSH
17212: LD_INT 3
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: LIST
17219: IN
17220: NOT
17221: AND
17222: OR
17223: IFFALSE 17227
// exit ;
17225: GO 35618
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17227: LD_VAR 0 1
17231: PUSH
17232: LD_INT 6
17234: PUSH
17235: LD_INT 7
17237: PUSH
17238: LD_INT 8
17240: PUSH
17241: LD_INT 13
17243: PUSH
17244: LD_INT 12
17246: PUSH
17247: LD_INT 15
17249: PUSH
17250: LD_INT 11
17252: PUSH
17253: LD_INT 14
17255: PUSH
17256: LD_INT 10
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: IN
17270: IFFALSE 17280
// btype = b_lab ;
17272: LD_ADDR_VAR 0 1
17276: PUSH
17277: LD_INT 6
17279: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17280: LD_VAR 0 6
17284: PUSH
17285: LD_INT 0
17287: PUSH
17288: LD_INT 1
17290: PUSH
17291: LD_INT 2
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: LIST
17298: IN
17299: NOT
17300: PUSH
17301: LD_VAR 0 1
17305: PUSH
17306: LD_INT 0
17308: PUSH
17309: LD_INT 1
17311: PUSH
17312: LD_INT 2
17314: PUSH
17315: LD_INT 3
17317: PUSH
17318: LD_INT 6
17320: PUSH
17321: LD_INT 36
17323: PUSH
17324: LD_INT 4
17326: PUSH
17327: LD_INT 5
17329: PUSH
17330: LD_INT 31
17332: PUSH
17333: LD_INT 32
17335: PUSH
17336: LD_INT 33
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: IN
17352: NOT
17353: PUSH
17354: LD_VAR 0 6
17358: PUSH
17359: LD_INT 1
17361: EQUAL
17362: AND
17363: OR
17364: PUSH
17365: LD_VAR 0 1
17369: PUSH
17370: LD_INT 2
17372: PUSH
17373: LD_INT 3
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: IN
17380: NOT
17381: PUSH
17382: LD_VAR 0 6
17386: PUSH
17387: LD_INT 2
17389: EQUAL
17390: AND
17391: OR
17392: IFFALSE 17402
// mode = 0 ;
17394: LD_ADDR_VAR 0 6
17398: PUSH
17399: LD_INT 0
17401: ST_TO_ADDR
// case mode of 0 :
17402: LD_VAR 0 6
17406: PUSH
17407: LD_INT 0
17409: DOUBLE
17410: EQUAL
17411: IFTRUE 17415
17413: GO 28868
17415: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17416: LD_ADDR_VAR 0 11
17420: PUSH
17421: LD_INT 0
17423: PUSH
17424: LD_INT 0
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: PUSH
17431: LD_INT 0
17433: PUSH
17434: LD_INT 1
17436: NEG
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: LD_INT 1
17444: PUSH
17445: LD_INT 0
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 1
17454: PUSH
17455: LD_INT 1
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: LD_INT 0
17464: PUSH
17465: LD_INT 1
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 1
17474: NEG
17475: PUSH
17476: LD_INT 0
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 1
17485: NEG
17486: PUSH
17487: LD_INT 1
17489: NEG
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: PUSH
17495: LD_INT 1
17497: NEG
17498: PUSH
17499: LD_INT 2
17501: NEG
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 0
17509: PUSH
17510: LD_INT 2
17512: NEG
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 1
17520: PUSH
17521: LD_INT 1
17523: NEG
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PUSH
17529: LD_INT 1
17531: PUSH
17532: LD_INT 2
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 0
17541: PUSH
17542: LD_INT 2
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 1
17551: NEG
17552: PUSH
17553: LD_INT 1
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 1
17562: PUSH
17563: LD_INT 3
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 0
17572: PUSH
17573: LD_INT 3
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 1
17582: NEG
17583: PUSH
17584: LD_INT 2
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17609: LD_ADDR_VAR 0 12
17613: PUSH
17614: LD_INT 0
17616: PUSH
17617: LD_INT 0
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 0
17626: PUSH
17627: LD_INT 1
17629: NEG
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 1
17637: PUSH
17638: LD_INT 0
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: LD_INT 1
17647: PUSH
17648: LD_INT 1
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: LD_INT 0
17657: PUSH
17658: LD_INT 1
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PUSH
17665: LD_INT 1
17667: NEG
17668: PUSH
17669: LD_INT 0
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: LD_INT 1
17678: NEG
17679: PUSH
17680: LD_INT 1
17682: NEG
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: LD_INT 1
17690: PUSH
17691: LD_INT 1
17693: NEG
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: LD_INT 2
17701: PUSH
17702: LD_INT 0
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 2
17711: PUSH
17712: LD_INT 1
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: LD_INT 1
17721: NEG
17722: PUSH
17723: LD_INT 1
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: PUSH
17730: LD_INT 2
17732: NEG
17733: PUSH
17734: LD_INT 0
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: LD_INT 2
17743: NEG
17744: PUSH
17745: LD_INT 1
17747: NEG
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PUSH
17753: LD_INT 2
17755: NEG
17756: PUSH
17757: LD_INT 1
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PUSH
17764: LD_INT 3
17766: NEG
17767: PUSH
17768: LD_INT 0
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PUSH
17775: LD_INT 3
17777: NEG
17778: PUSH
17779: LD_INT 1
17781: NEG
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17805: LD_ADDR_VAR 0 13
17809: PUSH
17810: LD_INT 0
17812: PUSH
17813: LD_INT 0
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 0
17822: PUSH
17823: LD_INT 1
17825: NEG
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 1
17833: PUSH
17834: LD_INT 0
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 1
17843: PUSH
17844: LD_INT 1
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 0
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 1
17863: NEG
17864: PUSH
17865: LD_INT 0
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PUSH
17872: LD_INT 1
17874: NEG
17875: PUSH
17876: LD_INT 1
17878: NEG
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 1
17886: NEG
17887: PUSH
17888: LD_INT 2
17890: NEG
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: LD_INT 2
17898: PUSH
17899: LD_INT 1
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: PUSH
17906: LD_INT 2
17908: PUSH
17909: LD_INT 2
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PUSH
17916: LD_INT 1
17918: PUSH
17919: LD_INT 2
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PUSH
17926: LD_INT 2
17928: NEG
17929: PUSH
17930: LD_INT 1
17932: NEG
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 2
17940: NEG
17941: PUSH
17942: LD_INT 2
17944: NEG
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 2
17952: NEG
17953: PUSH
17954: LD_INT 3
17956: NEG
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: PUSH
17962: LD_INT 3
17964: NEG
17965: PUSH
17966: LD_INT 2
17968: NEG
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 3
17976: NEG
17977: PUSH
17978: LD_INT 3
17980: NEG
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18004: LD_ADDR_VAR 0 14
18008: PUSH
18009: LD_INT 0
18011: PUSH
18012: LD_INT 0
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: LD_INT 0
18021: PUSH
18022: LD_INT 1
18024: NEG
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: LD_INT 1
18032: PUSH
18033: LD_INT 0
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 1
18042: PUSH
18043: LD_INT 1
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 0
18052: PUSH
18053: LD_INT 1
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 1
18062: NEG
18063: PUSH
18064: LD_INT 0
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 1
18073: NEG
18074: PUSH
18075: LD_INT 1
18077: NEG
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 1
18085: NEG
18086: PUSH
18087: LD_INT 2
18089: NEG
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 0
18097: PUSH
18098: LD_INT 2
18100: NEG
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 1
18108: PUSH
18109: LD_INT 1
18111: NEG
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 1
18119: PUSH
18120: LD_INT 2
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 0
18129: PUSH
18130: LD_INT 2
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 1
18139: NEG
18140: PUSH
18141: LD_INT 1
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 1
18150: NEG
18151: PUSH
18152: LD_INT 3
18154: NEG
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: LD_INT 0
18162: PUSH
18163: LD_INT 3
18165: NEG
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 1
18173: PUSH
18174: LD_INT 2
18176: NEG
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18200: LD_ADDR_VAR 0 15
18204: PUSH
18205: LD_INT 0
18207: PUSH
18208: LD_INT 0
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PUSH
18215: LD_INT 0
18217: PUSH
18218: LD_INT 1
18220: NEG
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PUSH
18226: LD_INT 1
18228: PUSH
18229: LD_INT 0
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 1
18238: PUSH
18239: LD_INT 1
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 0
18248: PUSH
18249: LD_INT 1
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 1
18258: NEG
18259: PUSH
18260: LD_INT 0
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 1
18269: NEG
18270: PUSH
18271: LD_INT 1
18273: NEG
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 1
18281: PUSH
18282: LD_INT 1
18284: NEG
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 2
18292: PUSH
18293: LD_INT 0
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 2
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 1
18312: NEG
18313: PUSH
18314: LD_INT 1
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: PUSH
18321: LD_INT 2
18323: NEG
18324: PUSH
18325: LD_INT 0
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 2
18334: NEG
18335: PUSH
18336: LD_INT 1
18338: NEG
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: LD_INT 2
18346: PUSH
18347: LD_INT 1
18349: NEG
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 3
18357: PUSH
18358: LD_INT 0
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: LD_INT 3
18367: PUSH
18368: LD_INT 1
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18393: LD_ADDR_VAR 0 16
18397: PUSH
18398: LD_INT 0
18400: PUSH
18401: LD_INT 0
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 0
18410: PUSH
18411: LD_INT 1
18413: NEG
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 1
18421: PUSH
18422: LD_INT 0
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: LD_INT 1
18431: PUSH
18432: LD_INT 1
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: LD_INT 0
18441: PUSH
18442: LD_INT 1
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 1
18451: NEG
18452: PUSH
18453: LD_INT 0
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: LD_INT 1
18462: NEG
18463: PUSH
18464: LD_INT 1
18466: NEG
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 1
18474: NEG
18475: PUSH
18476: LD_INT 2
18478: NEG
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: LD_INT 2
18486: PUSH
18487: LD_INT 1
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PUSH
18494: LD_INT 2
18496: PUSH
18497: LD_INT 2
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 1
18506: PUSH
18507: LD_INT 2
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 2
18516: NEG
18517: PUSH
18518: LD_INT 1
18520: NEG
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: LD_INT 2
18528: NEG
18529: PUSH
18530: LD_INT 2
18532: NEG
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: LD_INT 3
18540: PUSH
18541: LD_INT 2
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 3
18550: PUSH
18551: LD_INT 3
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 2
18560: PUSH
18561: LD_INT 3
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18586: LD_ADDR_VAR 0 17
18590: PUSH
18591: LD_INT 0
18593: PUSH
18594: LD_INT 0
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: LD_INT 0
18603: PUSH
18604: LD_INT 1
18606: NEG
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 1
18614: PUSH
18615: LD_INT 0
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 1
18624: PUSH
18625: LD_INT 1
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: LD_INT 0
18634: PUSH
18635: LD_INT 1
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: LD_INT 1
18644: NEG
18645: PUSH
18646: LD_INT 0
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 1
18655: NEG
18656: PUSH
18657: LD_INT 1
18659: NEG
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 1
18667: NEG
18668: PUSH
18669: LD_INT 2
18671: NEG
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 0
18679: PUSH
18680: LD_INT 2
18682: NEG
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 1
18690: PUSH
18691: LD_INT 1
18693: NEG
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 2
18701: PUSH
18702: LD_INT 0
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: LD_INT 2
18711: PUSH
18712: LD_INT 1
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PUSH
18719: LD_INT 2
18721: PUSH
18722: LD_INT 2
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 1
18731: PUSH
18732: LD_INT 2
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 0
18741: PUSH
18742: LD_INT 2
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 1
18751: NEG
18752: PUSH
18753: LD_INT 1
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 2
18762: NEG
18763: PUSH
18764: LD_INT 0
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 2
18773: NEG
18774: PUSH
18775: LD_INT 1
18777: NEG
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 2
18785: NEG
18786: PUSH
18787: LD_INT 2
18789: NEG
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18816: LD_ADDR_VAR 0 18
18820: PUSH
18821: LD_INT 0
18823: PUSH
18824: LD_INT 0
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PUSH
18831: LD_INT 0
18833: PUSH
18834: LD_INT 1
18836: NEG
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 1
18844: PUSH
18845: LD_INT 0
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: LD_INT 1
18854: PUSH
18855: LD_INT 1
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 0
18864: PUSH
18865: LD_INT 1
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 1
18874: NEG
18875: PUSH
18876: LD_INT 0
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 1
18885: NEG
18886: PUSH
18887: LD_INT 1
18889: NEG
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 1
18897: NEG
18898: PUSH
18899: LD_INT 2
18901: NEG
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 0
18909: PUSH
18910: LD_INT 2
18912: NEG
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 1
18920: PUSH
18921: LD_INT 1
18923: NEG
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 2
18931: PUSH
18932: LD_INT 0
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 2
18941: PUSH
18942: LD_INT 1
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 2
18951: PUSH
18952: LD_INT 2
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: LD_INT 1
18961: PUSH
18962: LD_INT 2
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 0
18971: PUSH
18972: LD_INT 2
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 1
18981: NEG
18982: PUSH
18983: LD_INT 1
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 2
18992: NEG
18993: PUSH
18994: LD_INT 0
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 2
19003: NEG
19004: PUSH
19005: LD_INT 1
19007: NEG
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 2
19015: NEG
19016: PUSH
19017: LD_INT 2
19019: NEG
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19046: LD_ADDR_VAR 0 19
19050: PUSH
19051: LD_INT 0
19053: PUSH
19054: LD_INT 0
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 0
19063: PUSH
19064: LD_INT 1
19066: NEG
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 1
19074: PUSH
19075: LD_INT 0
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 1
19084: PUSH
19085: LD_INT 1
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 0
19094: PUSH
19095: LD_INT 1
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 1
19104: NEG
19105: PUSH
19106: LD_INT 0
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 1
19115: NEG
19116: PUSH
19117: LD_INT 1
19119: NEG
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 1
19127: NEG
19128: PUSH
19129: LD_INT 2
19131: NEG
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: LD_INT 0
19139: PUSH
19140: LD_INT 2
19142: NEG
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 1
19150: PUSH
19151: LD_INT 1
19153: NEG
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 2
19161: PUSH
19162: LD_INT 0
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 2
19171: PUSH
19172: LD_INT 1
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 2
19181: PUSH
19182: LD_INT 2
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 1
19191: PUSH
19192: LD_INT 2
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 0
19201: PUSH
19202: LD_INT 2
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 1
19211: NEG
19212: PUSH
19213: LD_INT 1
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 2
19222: NEG
19223: PUSH
19224: LD_INT 0
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 2
19233: NEG
19234: PUSH
19235: LD_INT 1
19237: NEG
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 2
19245: NEG
19246: PUSH
19247: LD_INT 2
19249: NEG
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19276: LD_ADDR_VAR 0 20
19280: PUSH
19281: LD_INT 0
19283: PUSH
19284: LD_INT 0
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: LD_INT 0
19293: PUSH
19294: LD_INT 1
19296: NEG
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 1
19304: PUSH
19305: LD_INT 0
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 1
19314: PUSH
19315: LD_INT 1
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 0
19324: PUSH
19325: LD_INT 1
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 1
19334: NEG
19335: PUSH
19336: LD_INT 0
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 1
19345: NEG
19346: PUSH
19347: LD_INT 1
19349: NEG
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: LD_INT 1
19357: NEG
19358: PUSH
19359: LD_INT 2
19361: NEG
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: LD_INT 0
19369: PUSH
19370: LD_INT 2
19372: NEG
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 1
19380: PUSH
19381: LD_INT 1
19383: NEG
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 2
19391: PUSH
19392: LD_INT 0
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 2
19401: PUSH
19402: LD_INT 1
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: LD_INT 2
19411: PUSH
19412: LD_INT 2
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PUSH
19419: LD_INT 1
19421: PUSH
19422: LD_INT 2
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 0
19431: PUSH
19432: LD_INT 2
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: LD_INT 1
19441: NEG
19442: PUSH
19443: LD_INT 1
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: PUSH
19450: LD_INT 2
19452: NEG
19453: PUSH
19454: LD_INT 0
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 2
19463: NEG
19464: PUSH
19465: LD_INT 1
19467: NEG
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PUSH
19473: LD_INT 2
19475: NEG
19476: PUSH
19477: LD_INT 2
19479: NEG
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19506: LD_ADDR_VAR 0 21
19510: PUSH
19511: LD_INT 0
19513: PUSH
19514: LD_INT 0
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: LD_INT 0
19523: PUSH
19524: LD_INT 1
19526: NEG
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 1
19534: PUSH
19535: LD_INT 0
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 1
19544: PUSH
19545: LD_INT 1
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 0
19554: PUSH
19555: LD_INT 1
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 1
19564: NEG
19565: PUSH
19566: LD_INT 0
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 1
19575: NEG
19576: PUSH
19577: LD_INT 1
19579: NEG
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 1
19587: NEG
19588: PUSH
19589: LD_INT 2
19591: NEG
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: LD_INT 0
19599: PUSH
19600: LD_INT 2
19602: NEG
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 1
19610: PUSH
19611: LD_INT 1
19613: NEG
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 2
19621: PUSH
19622: LD_INT 0
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 2
19631: PUSH
19632: LD_INT 1
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PUSH
19639: LD_INT 2
19641: PUSH
19642: LD_INT 2
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: LD_INT 1
19651: PUSH
19652: LD_INT 2
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PUSH
19659: LD_INT 0
19661: PUSH
19662: LD_INT 2
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 1
19671: NEG
19672: PUSH
19673: LD_INT 1
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 2
19682: NEG
19683: PUSH
19684: LD_INT 0
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 2
19693: NEG
19694: PUSH
19695: LD_INT 1
19697: NEG
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 2
19705: NEG
19706: PUSH
19707: LD_INT 2
19709: NEG
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19736: LD_ADDR_VAR 0 22
19740: PUSH
19741: LD_INT 0
19743: PUSH
19744: LD_INT 0
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 0
19753: PUSH
19754: LD_INT 1
19756: NEG
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 1
19764: PUSH
19765: LD_INT 0
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 1
19774: PUSH
19775: LD_INT 1
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 0
19784: PUSH
19785: LD_INT 1
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 1
19794: NEG
19795: PUSH
19796: LD_INT 0
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 1
19805: NEG
19806: PUSH
19807: LD_INT 1
19809: NEG
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 1
19817: NEG
19818: PUSH
19819: LD_INT 2
19821: NEG
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 0
19829: PUSH
19830: LD_INT 2
19832: NEG
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 1
19840: PUSH
19841: LD_INT 1
19843: NEG
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 2
19851: PUSH
19852: LD_INT 0
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: LD_INT 2
19861: PUSH
19862: LD_INT 1
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: LD_INT 2
19871: PUSH
19872: LD_INT 2
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 1
19881: PUSH
19882: LD_INT 2
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 0
19891: PUSH
19892: LD_INT 2
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 1
19901: NEG
19902: PUSH
19903: LD_INT 1
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 2
19912: NEG
19913: PUSH
19914: LD_INT 0
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 2
19923: NEG
19924: PUSH
19925: LD_INT 1
19927: NEG
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 2
19935: NEG
19936: PUSH
19937: LD_INT 2
19939: NEG
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19966: LD_ADDR_VAR 0 23
19970: PUSH
19971: LD_INT 0
19973: PUSH
19974: LD_INT 0
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 0
19983: PUSH
19984: LD_INT 1
19986: NEG
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: LD_INT 1
19994: PUSH
19995: LD_INT 0
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 1
20004: PUSH
20005: LD_INT 1
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PUSH
20012: LD_INT 0
20014: PUSH
20015: LD_INT 1
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 1
20024: NEG
20025: PUSH
20026: LD_INT 0
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 1
20035: NEG
20036: PUSH
20037: LD_INT 1
20039: NEG
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 1
20047: NEG
20048: PUSH
20049: LD_INT 2
20051: NEG
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: LD_INT 0
20059: PUSH
20060: LD_INT 2
20062: NEG
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 1
20070: PUSH
20071: LD_INT 1
20073: NEG
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 2
20081: PUSH
20082: LD_INT 0
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 2
20091: PUSH
20092: LD_INT 1
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 2
20101: PUSH
20102: LD_INT 2
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 1
20111: PUSH
20112: LD_INT 2
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 0
20121: PUSH
20122: LD_INT 2
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 1
20131: NEG
20132: PUSH
20133: LD_INT 1
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 2
20142: NEG
20143: PUSH
20144: LD_INT 0
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 2
20153: NEG
20154: PUSH
20155: LD_INT 1
20157: NEG
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 2
20165: NEG
20166: PUSH
20167: LD_INT 2
20169: NEG
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 2
20177: NEG
20178: PUSH
20179: LD_INT 3
20181: NEG
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 1
20189: NEG
20190: PUSH
20191: LD_INT 3
20193: NEG
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 1
20201: PUSH
20202: LD_INT 2
20204: NEG
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 2
20212: PUSH
20213: LD_INT 1
20215: NEG
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20246: LD_ADDR_VAR 0 24
20250: PUSH
20251: LD_INT 0
20253: PUSH
20254: LD_INT 0
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 0
20263: PUSH
20264: LD_INT 1
20266: NEG
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PUSH
20272: LD_INT 1
20274: PUSH
20275: LD_INT 0
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_INT 1
20284: PUSH
20285: LD_INT 1
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 0
20294: PUSH
20295: LD_INT 1
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 1
20304: NEG
20305: PUSH
20306: LD_INT 0
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 1
20315: NEG
20316: PUSH
20317: LD_INT 1
20319: NEG
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: LD_INT 1
20327: NEG
20328: PUSH
20329: LD_INT 2
20331: NEG
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 0
20339: PUSH
20340: LD_INT 2
20342: NEG
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 1
20350: PUSH
20351: LD_INT 1
20353: NEG
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 2
20361: PUSH
20362: LD_INT 0
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PUSH
20369: LD_INT 2
20371: PUSH
20372: LD_INT 1
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 2
20381: PUSH
20382: LD_INT 2
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 1
20391: PUSH
20392: LD_INT 2
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 0
20401: PUSH
20402: LD_INT 2
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: LD_INT 1
20411: NEG
20412: PUSH
20413: LD_INT 1
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 2
20422: NEG
20423: PUSH
20424: LD_INT 0
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 2
20433: NEG
20434: PUSH
20435: LD_INT 1
20437: NEG
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 2
20445: NEG
20446: PUSH
20447: LD_INT 2
20449: NEG
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 1
20457: PUSH
20458: LD_INT 2
20460: NEG
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 2
20468: PUSH
20469: LD_INT 1
20471: NEG
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: LD_INT 3
20479: PUSH
20480: LD_INT 1
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 3
20489: PUSH
20490: LD_INT 2
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20522: LD_ADDR_VAR 0 25
20526: PUSH
20527: LD_INT 0
20529: PUSH
20530: LD_INT 0
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 0
20539: PUSH
20540: LD_INT 1
20542: NEG
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 1
20550: PUSH
20551: LD_INT 0
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: LD_INT 1
20560: PUSH
20561: LD_INT 1
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 0
20570: PUSH
20571: LD_INT 1
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 1
20580: NEG
20581: PUSH
20582: LD_INT 0
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 1
20591: NEG
20592: PUSH
20593: LD_INT 1
20595: NEG
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 1
20603: NEG
20604: PUSH
20605: LD_INT 2
20607: NEG
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: LD_INT 0
20615: PUSH
20616: LD_INT 2
20618: NEG
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: PUSH
20624: LD_INT 1
20626: PUSH
20627: LD_INT 1
20629: NEG
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 2
20637: PUSH
20638: LD_INT 0
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: LD_INT 2
20647: PUSH
20648: LD_INT 1
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 2
20657: PUSH
20658: LD_INT 2
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 1
20667: PUSH
20668: LD_INT 2
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PUSH
20675: LD_INT 0
20677: PUSH
20678: LD_INT 2
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: LD_INT 1
20687: NEG
20688: PUSH
20689: LD_INT 1
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 2
20698: NEG
20699: PUSH
20700: LD_INT 0
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PUSH
20707: LD_INT 2
20709: NEG
20710: PUSH
20711: LD_INT 1
20713: NEG
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 2
20721: NEG
20722: PUSH
20723: LD_INT 2
20725: NEG
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 3
20733: PUSH
20734: LD_INT 1
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PUSH
20741: LD_INT 3
20743: PUSH
20744: LD_INT 2
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 2
20753: PUSH
20754: LD_INT 3
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: LD_INT 1
20763: PUSH
20764: LD_INT 3
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20796: LD_ADDR_VAR 0 26
20800: PUSH
20801: LD_INT 0
20803: PUSH
20804: LD_INT 0
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 0
20813: PUSH
20814: LD_INT 1
20816: NEG
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 1
20824: PUSH
20825: LD_INT 0
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 1
20834: PUSH
20835: LD_INT 1
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 0
20844: PUSH
20845: LD_INT 1
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 1
20854: NEG
20855: PUSH
20856: LD_INT 0
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 1
20865: NEG
20866: PUSH
20867: LD_INT 1
20869: NEG
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 1
20877: NEG
20878: PUSH
20879: LD_INT 2
20881: NEG
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 0
20889: PUSH
20890: LD_INT 2
20892: NEG
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 1
20900: PUSH
20901: LD_INT 1
20903: NEG
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 2
20911: PUSH
20912: LD_INT 0
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PUSH
20919: LD_INT 2
20921: PUSH
20922: LD_INT 1
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PUSH
20929: LD_INT 2
20931: PUSH
20932: LD_INT 2
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 1
20941: PUSH
20942: LD_INT 2
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 0
20951: PUSH
20952: LD_INT 2
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 1
20961: NEG
20962: PUSH
20963: LD_INT 1
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 2
20972: NEG
20973: PUSH
20974: LD_INT 0
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 2
20983: NEG
20984: PUSH
20985: LD_INT 1
20987: NEG
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 2
20995: NEG
20996: PUSH
20997: LD_INT 2
20999: NEG
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 2
21007: PUSH
21008: LD_INT 3
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 1
21017: PUSH
21018: LD_INT 3
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PUSH
21025: LD_INT 1
21027: NEG
21028: PUSH
21029: LD_INT 2
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: LD_INT 2
21038: NEG
21039: PUSH
21040: LD_INT 1
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21072: LD_ADDR_VAR 0 27
21076: PUSH
21077: LD_INT 0
21079: PUSH
21080: LD_INT 0
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 0
21089: PUSH
21090: LD_INT 1
21092: NEG
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 1
21100: PUSH
21101: LD_INT 0
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 1
21110: PUSH
21111: LD_INT 1
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 0
21120: PUSH
21121: LD_INT 1
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 1
21130: NEG
21131: PUSH
21132: LD_INT 0
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 1
21141: NEG
21142: PUSH
21143: LD_INT 1
21145: NEG
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 1
21153: NEG
21154: PUSH
21155: LD_INT 2
21157: NEG
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 0
21165: PUSH
21166: LD_INT 2
21168: NEG
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 1
21176: PUSH
21177: LD_INT 1
21179: NEG
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 2
21187: PUSH
21188: LD_INT 0
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 2
21197: PUSH
21198: LD_INT 1
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 2
21207: PUSH
21208: LD_INT 2
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 1
21217: PUSH
21218: LD_INT 2
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: LD_INT 0
21227: PUSH
21228: LD_INT 2
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: LD_INT 1
21237: NEG
21238: PUSH
21239: LD_INT 1
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 2
21248: NEG
21249: PUSH
21250: LD_INT 0
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: PUSH
21257: LD_INT 2
21259: NEG
21260: PUSH
21261: LD_INT 1
21263: NEG
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 2
21271: NEG
21272: PUSH
21273: LD_INT 2
21275: NEG
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 1
21283: NEG
21284: PUSH
21285: LD_INT 2
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PUSH
21292: LD_INT 2
21294: NEG
21295: PUSH
21296: LD_INT 1
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PUSH
21303: LD_INT 3
21305: NEG
21306: PUSH
21307: LD_INT 1
21309: NEG
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: LD_INT 3
21317: NEG
21318: PUSH
21319: LD_INT 2
21321: NEG
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21352: LD_ADDR_VAR 0 28
21356: PUSH
21357: LD_INT 0
21359: PUSH
21360: LD_INT 0
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 0
21369: PUSH
21370: LD_INT 1
21372: NEG
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 1
21380: PUSH
21381: LD_INT 0
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 1
21390: PUSH
21391: LD_INT 1
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 0
21400: PUSH
21401: LD_INT 1
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 1
21410: NEG
21411: PUSH
21412: LD_INT 0
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 1
21421: NEG
21422: PUSH
21423: LD_INT 1
21425: NEG
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 1
21433: NEG
21434: PUSH
21435: LD_INT 2
21437: NEG
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 0
21445: PUSH
21446: LD_INT 2
21448: NEG
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 1
21456: PUSH
21457: LD_INT 1
21459: NEG
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 2
21467: PUSH
21468: LD_INT 0
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 2
21477: PUSH
21478: LD_INT 1
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 2
21487: PUSH
21488: LD_INT 2
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 1
21497: PUSH
21498: LD_INT 2
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 0
21507: PUSH
21508: LD_INT 2
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 1
21517: NEG
21518: PUSH
21519: LD_INT 1
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 2
21528: NEG
21529: PUSH
21530: LD_INT 0
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 2
21539: NEG
21540: PUSH
21541: LD_INT 1
21543: NEG
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PUSH
21549: LD_INT 2
21551: NEG
21552: PUSH
21553: LD_INT 2
21555: NEG
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 2
21563: NEG
21564: PUSH
21565: LD_INT 3
21567: NEG
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 1
21575: NEG
21576: PUSH
21577: LD_INT 3
21579: NEG
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PUSH
21585: LD_INT 3
21587: NEG
21588: PUSH
21589: LD_INT 1
21591: NEG
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 3
21599: NEG
21600: PUSH
21601: LD_INT 2
21603: NEG
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21634: LD_ADDR_VAR 0 29
21638: PUSH
21639: LD_INT 0
21641: PUSH
21642: LD_INT 0
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 0
21651: PUSH
21652: LD_INT 1
21654: NEG
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 1
21662: PUSH
21663: LD_INT 0
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 1
21672: PUSH
21673: LD_INT 1
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 0
21682: PUSH
21683: LD_INT 1
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 1
21692: NEG
21693: PUSH
21694: LD_INT 0
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 1
21703: NEG
21704: PUSH
21705: LD_INT 1
21707: NEG
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: LD_INT 1
21715: NEG
21716: PUSH
21717: LD_INT 2
21719: NEG
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: LD_INT 0
21727: PUSH
21728: LD_INT 2
21730: NEG
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PUSH
21736: LD_INT 1
21738: PUSH
21739: LD_INT 1
21741: NEG
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 2
21749: PUSH
21750: LD_INT 0
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 2
21759: PUSH
21760: LD_INT 1
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 1
21769: PUSH
21770: LD_INT 2
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 0
21779: PUSH
21780: LD_INT 2
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 1
21789: NEG
21790: PUSH
21791: LD_INT 1
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: LD_INT 2
21800: NEG
21801: PUSH
21802: LD_INT 1
21804: NEG
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 2
21812: NEG
21813: PUSH
21814: LD_INT 2
21816: NEG
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 2
21824: NEG
21825: PUSH
21826: LD_INT 3
21828: NEG
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 2
21836: PUSH
21837: LD_INT 1
21839: NEG
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: LD_INT 3
21847: PUSH
21848: LD_INT 1
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 1
21857: PUSH
21858: LD_INT 3
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 1
21867: NEG
21868: PUSH
21869: LD_INT 2
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PUSH
21876: LD_INT 3
21878: NEG
21879: PUSH
21880: LD_INT 2
21882: NEG
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21913: LD_ADDR_VAR 0 30
21917: PUSH
21918: LD_INT 0
21920: PUSH
21921: LD_INT 0
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 0
21930: PUSH
21931: LD_INT 1
21933: NEG
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 1
21941: PUSH
21942: LD_INT 0
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 1
21951: PUSH
21952: LD_INT 1
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 0
21961: PUSH
21962: LD_INT 1
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 1
21971: NEG
21972: PUSH
21973: LD_INT 0
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: LD_INT 1
21982: NEG
21983: PUSH
21984: LD_INT 1
21986: NEG
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: PUSH
21992: LD_INT 1
21994: NEG
21995: PUSH
21996: LD_INT 2
21998: NEG
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 0
22006: PUSH
22007: LD_INT 2
22009: NEG
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 1
22017: PUSH
22018: LD_INT 1
22020: NEG
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PUSH
22026: LD_INT 2
22028: PUSH
22029: LD_INT 0
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: LD_INT 2
22038: PUSH
22039: LD_INT 1
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: LD_INT 2
22048: PUSH
22049: LD_INT 2
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 1
22058: PUSH
22059: LD_INT 2
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 1
22068: NEG
22069: PUSH
22070: LD_INT 1
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PUSH
22077: LD_INT 2
22079: NEG
22080: PUSH
22081: LD_INT 0
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 2
22090: NEG
22091: PUSH
22092: LD_INT 1
22094: NEG
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 1
22102: NEG
22103: PUSH
22104: LD_INT 3
22106: NEG
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 1
22114: PUSH
22115: LD_INT 2
22117: NEG
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: PUSH
22123: LD_INT 3
22125: PUSH
22126: LD_INT 2
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: LD_INT 2
22135: PUSH
22136: LD_INT 3
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: LD_INT 2
22145: NEG
22146: PUSH
22147: LD_INT 1
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: LD_INT 3
22156: NEG
22157: PUSH
22158: LD_INT 1
22160: NEG
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22191: LD_ADDR_VAR 0 31
22195: PUSH
22196: LD_INT 0
22198: PUSH
22199: LD_INT 0
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: PUSH
22206: LD_INT 0
22208: PUSH
22209: LD_INT 1
22211: NEG
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: LD_INT 1
22219: PUSH
22220: LD_INT 0
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PUSH
22227: LD_INT 1
22229: PUSH
22230: LD_INT 1
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PUSH
22237: LD_INT 0
22239: PUSH
22240: LD_INT 1
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 1
22249: NEG
22250: PUSH
22251: LD_INT 0
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 1
22260: NEG
22261: PUSH
22262: LD_INT 1
22264: NEG
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 1
22272: NEG
22273: PUSH
22274: LD_INT 2
22276: NEG
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: PUSH
22282: LD_INT 1
22284: PUSH
22285: LD_INT 1
22287: NEG
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 2
22295: PUSH
22296: LD_INT 0
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 2
22305: PUSH
22306: LD_INT 1
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: LD_INT 2
22315: PUSH
22316: LD_INT 2
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: LD_INT 1
22325: PUSH
22326: LD_INT 2
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: LD_INT 0
22335: PUSH
22336: LD_INT 2
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 1
22345: NEG
22346: PUSH
22347: LD_INT 1
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 2
22356: NEG
22357: PUSH
22358: LD_INT 1
22360: NEG
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 2
22368: NEG
22369: PUSH
22370: LD_INT 2
22372: NEG
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PUSH
22378: LD_INT 2
22380: NEG
22381: PUSH
22382: LD_INT 3
22384: NEG
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 2
22392: PUSH
22393: LD_INT 1
22395: NEG
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 3
22403: PUSH
22404: LD_INT 1
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: LD_INT 1
22413: PUSH
22414: LD_INT 3
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: LD_INT 1
22423: NEG
22424: PUSH
22425: LD_INT 2
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 3
22434: NEG
22435: PUSH
22436: LD_INT 2
22438: NEG
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22469: LD_ADDR_VAR 0 32
22473: PUSH
22474: LD_INT 0
22476: PUSH
22477: LD_INT 0
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: PUSH
22484: LD_INT 0
22486: PUSH
22487: LD_INT 1
22489: NEG
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 1
22497: PUSH
22498: LD_INT 0
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 1
22507: PUSH
22508: LD_INT 1
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 0
22517: PUSH
22518: LD_INT 1
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 1
22527: NEG
22528: PUSH
22529: LD_INT 0
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 1
22538: NEG
22539: PUSH
22540: LD_INT 1
22542: NEG
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 1
22550: NEG
22551: PUSH
22552: LD_INT 2
22554: NEG
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 0
22562: PUSH
22563: LD_INT 2
22565: NEG
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 1
22573: PUSH
22574: LD_INT 1
22576: NEG
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 2
22584: PUSH
22585: LD_INT 1
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: LD_INT 2
22594: PUSH
22595: LD_INT 2
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 1
22604: PUSH
22605: LD_INT 2
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 0
22614: PUSH
22615: LD_INT 2
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 1
22624: NEG
22625: PUSH
22626: LD_INT 1
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 2
22635: NEG
22636: PUSH
22637: LD_INT 0
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 2
22646: NEG
22647: PUSH
22648: LD_INT 1
22650: NEG
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 1
22658: NEG
22659: PUSH
22660: LD_INT 3
22662: NEG
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 1
22670: PUSH
22671: LD_INT 2
22673: NEG
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 3
22681: PUSH
22682: LD_INT 2
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 2
22691: PUSH
22692: LD_INT 3
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 2
22701: NEG
22702: PUSH
22703: LD_INT 1
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 3
22712: NEG
22713: PUSH
22714: LD_INT 1
22716: NEG
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22747: LD_ADDR_VAR 0 33
22751: PUSH
22752: LD_INT 0
22754: PUSH
22755: LD_INT 0
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 0
22764: PUSH
22765: LD_INT 1
22767: NEG
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 1
22775: PUSH
22776: LD_INT 0
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 1
22785: PUSH
22786: LD_INT 1
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 0
22795: PUSH
22796: LD_INT 1
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 1
22805: NEG
22806: PUSH
22807: LD_INT 0
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: LD_INT 1
22816: NEG
22817: PUSH
22818: LD_INT 1
22820: NEG
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: LD_INT 1
22828: NEG
22829: PUSH
22830: LD_INT 2
22832: NEG
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 1
22840: PUSH
22841: LD_INT 1
22843: NEG
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 2
22851: PUSH
22852: LD_INT 0
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 2
22861: PUSH
22862: LD_INT 1
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: LD_INT 1
22871: PUSH
22872: LD_INT 2
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: LD_INT 0
22881: PUSH
22882: LD_INT 2
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: LD_INT 1
22891: NEG
22892: PUSH
22893: LD_INT 1
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 2
22902: NEG
22903: PUSH
22904: LD_INT 0
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 2
22913: NEG
22914: PUSH
22915: LD_INT 1
22917: NEG
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: LD_INT 2
22925: NEG
22926: PUSH
22927: LD_INT 2
22929: NEG
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 2
22937: NEG
22938: PUSH
22939: LD_INT 3
22941: NEG
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 2
22949: PUSH
22950: LD_INT 1
22952: NEG
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 3
22960: PUSH
22961: LD_INT 1
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 1
22970: PUSH
22971: LD_INT 3
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 1
22980: NEG
22981: PUSH
22982: LD_INT 2
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 3
22991: NEG
22992: PUSH
22993: LD_INT 2
22995: NEG
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23026: LD_ADDR_VAR 0 34
23030: PUSH
23031: LD_INT 0
23033: PUSH
23034: LD_INT 0
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 0
23043: PUSH
23044: LD_INT 1
23046: NEG
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 1
23054: PUSH
23055: LD_INT 0
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: LD_INT 1
23064: PUSH
23065: LD_INT 1
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 0
23074: PUSH
23075: LD_INT 1
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 1
23084: NEG
23085: PUSH
23086: LD_INT 0
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PUSH
23093: LD_INT 1
23095: NEG
23096: PUSH
23097: LD_INT 1
23099: NEG
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 1
23107: NEG
23108: PUSH
23109: LD_INT 2
23111: NEG
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 0
23119: PUSH
23120: LD_INT 2
23122: NEG
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 1
23130: PUSH
23131: LD_INT 1
23133: NEG
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: LD_INT 2
23141: PUSH
23142: LD_INT 1
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: PUSH
23149: LD_INT 2
23151: PUSH
23152: LD_INT 2
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: LD_INT 1
23161: PUSH
23162: LD_INT 2
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 1
23171: NEG
23172: PUSH
23173: LD_INT 1
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 2
23182: NEG
23183: PUSH
23184: LD_INT 0
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 2
23193: NEG
23194: PUSH
23195: LD_INT 1
23197: NEG
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 2
23205: NEG
23206: PUSH
23207: LD_INT 2
23209: NEG
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 1
23217: NEG
23218: PUSH
23219: LD_INT 3
23221: NEG
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: LD_INT 1
23229: PUSH
23230: LD_INT 2
23232: NEG
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 3
23240: PUSH
23241: LD_INT 2
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 2
23250: PUSH
23251: LD_INT 3
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 2
23260: NEG
23261: PUSH
23262: LD_INT 1
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 3
23271: NEG
23272: PUSH
23273: LD_INT 1
23275: NEG
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23306: LD_ADDR_VAR 0 35
23310: PUSH
23311: LD_INT 0
23313: PUSH
23314: LD_INT 0
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: LD_INT 0
23323: PUSH
23324: LD_INT 1
23326: NEG
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 1
23334: PUSH
23335: LD_INT 0
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 1
23344: PUSH
23345: LD_INT 1
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 0
23354: PUSH
23355: LD_INT 1
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 1
23364: NEG
23365: PUSH
23366: LD_INT 0
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: PUSH
23373: LD_INT 1
23375: NEG
23376: PUSH
23377: LD_INT 1
23379: NEG
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 2
23387: PUSH
23388: LD_INT 1
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 2
23397: NEG
23398: PUSH
23399: LD_INT 1
23401: NEG
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23418: LD_ADDR_VAR 0 36
23422: PUSH
23423: LD_INT 0
23425: PUSH
23426: LD_INT 0
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: LD_INT 0
23435: PUSH
23436: LD_INT 1
23438: NEG
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 1
23446: PUSH
23447: LD_INT 0
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 1
23456: PUSH
23457: LD_INT 1
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 0
23466: PUSH
23467: LD_INT 1
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 1
23476: NEG
23477: PUSH
23478: LD_INT 0
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 1
23487: NEG
23488: PUSH
23489: LD_INT 1
23491: NEG
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 1
23499: NEG
23500: PUSH
23501: LD_INT 2
23503: NEG
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: PUSH
23509: LD_INT 1
23511: PUSH
23512: LD_INT 2
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23530: LD_ADDR_VAR 0 37
23534: PUSH
23535: LD_INT 0
23537: PUSH
23538: LD_INT 0
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 0
23547: PUSH
23548: LD_INT 1
23550: NEG
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 1
23558: PUSH
23559: LD_INT 0
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 1
23568: PUSH
23569: LD_INT 1
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 0
23578: PUSH
23579: LD_INT 1
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 1
23588: NEG
23589: PUSH
23590: LD_INT 0
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 1
23599: NEG
23600: PUSH
23601: LD_INT 1
23603: NEG
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 1
23611: PUSH
23612: LD_INT 1
23614: NEG
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 1
23622: NEG
23623: PUSH
23624: LD_INT 1
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23642: LD_ADDR_VAR 0 38
23646: PUSH
23647: LD_INT 0
23649: PUSH
23650: LD_INT 0
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 0
23659: PUSH
23660: LD_INT 1
23662: NEG
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 1
23670: PUSH
23671: LD_INT 0
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 1
23680: PUSH
23681: LD_INT 1
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 0
23690: PUSH
23691: LD_INT 1
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 1
23700: NEG
23701: PUSH
23702: LD_INT 0
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 1
23711: NEG
23712: PUSH
23713: LD_INT 1
23715: NEG
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 2
23723: PUSH
23724: LD_INT 1
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 2
23733: NEG
23734: PUSH
23735: LD_INT 1
23737: NEG
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23754: LD_ADDR_VAR 0 39
23758: PUSH
23759: LD_INT 0
23761: PUSH
23762: LD_INT 0
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 0
23771: PUSH
23772: LD_INT 1
23774: NEG
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 1
23782: PUSH
23783: LD_INT 0
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 1
23792: PUSH
23793: LD_INT 1
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PUSH
23800: LD_INT 0
23802: PUSH
23803: LD_INT 1
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 1
23812: NEG
23813: PUSH
23814: LD_INT 0
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 1
23823: NEG
23824: PUSH
23825: LD_INT 1
23827: NEG
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 1
23835: NEG
23836: PUSH
23837: LD_INT 2
23839: NEG
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 1
23847: PUSH
23848: LD_INT 2
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23866: LD_ADDR_VAR 0 40
23870: PUSH
23871: LD_INT 0
23873: PUSH
23874: LD_INT 0
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 0
23883: PUSH
23884: LD_INT 1
23886: NEG
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 1
23894: PUSH
23895: LD_INT 0
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 1
23904: PUSH
23905: LD_INT 1
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 0
23914: PUSH
23915: LD_INT 1
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 1
23924: NEG
23925: PUSH
23926: LD_INT 0
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 1
23935: NEG
23936: PUSH
23937: LD_INT 1
23939: NEG
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 1
23947: PUSH
23948: LD_INT 1
23950: NEG
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 1
23958: NEG
23959: PUSH
23960: LD_INT 1
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23978: LD_ADDR_VAR 0 41
23982: PUSH
23983: LD_INT 0
23985: PUSH
23986: LD_INT 0
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 0
23995: PUSH
23996: LD_INT 1
23998: NEG
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 1
24006: PUSH
24007: LD_INT 0
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 1
24016: PUSH
24017: LD_INT 1
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 0
24026: PUSH
24027: LD_INT 1
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 1
24036: NEG
24037: PUSH
24038: LD_INT 0
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 1
24047: NEG
24048: PUSH
24049: LD_INT 1
24051: NEG
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 1
24059: NEG
24060: PUSH
24061: LD_INT 2
24063: NEG
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 1
24071: PUSH
24072: LD_INT 1
24074: NEG
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 2
24082: PUSH
24083: LD_INT 0
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PUSH
24090: LD_INT 2
24092: PUSH
24093: LD_INT 1
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 2
24102: PUSH
24103: LD_INT 2
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 1
24112: PUSH
24113: LD_INT 2
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 1
24122: NEG
24123: PUSH
24124: LD_INT 1
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 2
24133: NEG
24134: PUSH
24135: LD_INT 0
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 2
24144: NEG
24145: PUSH
24146: LD_INT 1
24148: NEG
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 2
24156: NEG
24157: PUSH
24158: LD_INT 2
24160: NEG
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 2
24168: NEG
24169: PUSH
24170: LD_INT 3
24172: NEG
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: LD_INT 2
24180: PUSH
24181: LD_INT 1
24183: NEG
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 3
24191: PUSH
24192: LD_INT 0
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 3
24201: PUSH
24202: LD_INT 1
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 3
24211: PUSH
24212: LD_INT 2
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 3
24221: PUSH
24222: LD_INT 3
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 2
24231: PUSH
24232: LD_INT 3
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 2
24241: NEG
24242: PUSH
24243: LD_INT 1
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: LD_INT 3
24252: NEG
24253: PUSH
24254: LD_INT 0
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 3
24263: NEG
24264: PUSH
24265: LD_INT 1
24267: NEG
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 3
24275: NEG
24276: PUSH
24277: LD_INT 2
24279: NEG
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 3
24287: NEG
24288: PUSH
24289: LD_INT 3
24291: NEG
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24328: LD_ADDR_VAR 0 42
24332: PUSH
24333: LD_INT 0
24335: PUSH
24336: LD_INT 0
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 0
24345: PUSH
24346: LD_INT 1
24348: NEG
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 1
24356: PUSH
24357: LD_INT 0
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 1
24366: PUSH
24367: LD_INT 1
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 0
24376: PUSH
24377: LD_INT 1
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PUSH
24384: LD_INT 1
24386: NEG
24387: PUSH
24388: LD_INT 0
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 1
24397: NEG
24398: PUSH
24399: LD_INT 1
24401: NEG
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 1
24409: NEG
24410: PUSH
24411: LD_INT 2
24413: NEG
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 0
24421: PUSH
24422: LD_INT 2
24424: NEG
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: LD_INT 1
24432: PUSH
24433: LD_INT 1
24435: NEG
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 2
24443: PUSH
24444: LD_INT 1
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PUSH
24451: LD_INT 2
24453: PUSH
24454: LD_INT 2
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: PUSH
24461: LD_INT 1
24463: PUSH
24464: LD_INT 2
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 0
24473: PUSH
24474: LD_INT 2
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 1
24483: NEG
24484: PUSH
24485: LD_INT 1
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 2
24494: NEG
24495: PUSH
24496: LD_INT 1
24498: NEG
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 2
24506: NEG
24507: PUSH
24508: LD_INT 2
24510: NEG
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 2
24518: NEG
24519: PUSH
24520: LD_INT 3
24522: NEG
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 1
24530: NEG
24531: PUSH
24532: LD_INT 3
24534: NEG
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 0
24542: PUSH
24543: LD_INT 3
24545: NEG
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 1
24553: PUSH
24554: LD_INT 2
24556: NEG
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: LD_INT 3
24564: PUSH
24565: LD_INT 2
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PUSH
24572: LD_INT 3
24574: PUSH
24575: LD_INT 3
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 2
24584: PUSH
24585: LD_INT 3
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 1
24594: PUSH
24595: LD_INT 3
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 0
24604: PUSH
24605: LD_INT 3
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 1
24614: NEG
24615: PUSH
24616: LD_INT 2
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 3
24625: NEG
24626: PUSH
24627: LD_INT 2
24629: NEG
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 3
24637: NEG
24638: PUSH
24639: LD_INT 3
24641: NEG
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24678: LD_ADDR_VAR 0 43
24682: PUSH
24683: LD_INT 0
24685: PUSH
24686: LD_INT 0
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 0
24695: PUSH
24696: LD_INT 1
24698: NEG
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 1
24706: PUSH
24707: LD_INT 0
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 1
24716: PUSH
24717: LD_INT 1
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 0
24726: PUSH
24727: LD_INT 1
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 1
24736: NEG
24737: PUSH
24738: LD_INT 0
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PUSH
24745: LD_INT 1
24747: NEG
24748: PUSH
24749: LD_INT 1
24751: NEG
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 1
24759: NEG
24760: PUSH
24761: LD_INT 2
24763: NEG
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: LD_INT 0
24771: PUSH
24772: LD_INT 2
24774: NEG
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 1
24782: PUSH
24783: LD_INT 1
24785: NEG
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 2
24793: PUSH
24794: LD_INT 0
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 2
24803: PUSH
24804: LD_INT 1
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 1
24813: PUSH
24814: LD_INT 2
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 0
24823: PUSH
24824: LD_INT 2
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 1
24833: NEG
24834: PUSH
24835: LD_INT 1
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 2
24844: NEG
24845: PUSH
24846: LD_INT 0
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 2
24855: NEG
24856: PUSH
24857: LD_INT 1
24859: NEG
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 1
24867: NEG
24868: PUSH
24869: LD_INT 3
24871: NEG
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 0
24879: PUSH
24880: LD_INT 3
24882: NEG
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 1
24890: PUSH
24891: LD_INT 2
24893: NEG
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 2
24901: PUSH
24902: LD_INT 1
24904: NEG
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 3
24912: PUSH
24913: LD_INT 0
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 3
24922: PUSH
24923: LD_INT 1
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PUSH
24930: LD_INT 1
24932: PUSH
24933: LD_INT 3
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 0
24942: PUSH
24943: LD_INT 3
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 1
24952: NEG
24953: PUSH
24954: LD_INT 2
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 2
24963: NEG
24964: PUSH
24965: LD_INT 1
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 3
24974: NEG
24975: PUSH
24976: LD_INT 0
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 3
24985: NEG
24986: PUSH
24987: LD_INT 1
24989: NEG
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25026: LD_ADDR_VAR 0 44
25030: PUSH
25031: LD_INT 0
25033: PUSH
25034: LD_INT 0
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 0
25043: PUSH
25044: LD_INT 1
25046: NEG
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 1
25054: PUSH
25055: LD_INT 0
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 1
25064: PUSH
25065: LD_INT 1
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: LD_INT 0
25074: PUSH
25075: LD_INT 1
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: LD_INT 1
25084: NEG
25085: PUSH
25086: LD_INT 0
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 1
25095: NEG
25096: PUSH
25097: LD_INT 1
25099: NEG
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 1
25107: NEG
25108: PUSH
25109: LD_INT 2
25111: NEG
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 1
25119: PUSH
25120: LD_INT 1
25122: NEG
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 2
25130: PUSH
25131: LD_INT 0
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 2
25140: PUSH
25141: LD_INT 1
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 2
25150: PUSH
25151: LD_INT 2
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 1
25160: PUSH
25161: LD_INT 2
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 1
25170: NEG
25171: PUSH
25172: LD_INT 1
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 2
25181: NEG
25182: PUSH
25183: LD_INT 0
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 2
25192: NEG
25193: PUSH
25194: LD_INT 1
25196: NEG
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 2
25204: NEG
25205: PUSH
25206: LD_INT 2
25208: NEG
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 2
25216: NEG
25217: PUSH
25218: LD_INT 3
25220: NEG
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 2
25228: PUSH
25229: LD_INT 1
25231: NEG
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 3
25239: PUSH
25240: LD_INT 0
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 3
25249: PUSH
25250: LD_INT 1
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PUSH
25257: LD_INT 3
25259: PUSH
25260: LD_INT 2
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 3
25269: PUSH
25270: LD_INT 3
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 2
25279: PUSH
25280: LD_INT 3
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 2
25289: NEG
25290: PUSH
25291: LD_INT 1
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 3
25300: NEG
25301: PUSH
25302: LD_INT 0
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 3
25311: NEG
25312: PUSH
25313: LD_INT 1
25315: NEG
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 3
25323: NEG
25324: PUSH
25325: LD_INT 2
25327: NEG
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 3
25335: NEG
25336: PUSH
25337: LD_INT 3
25339: NEG
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25376: LD_ADDR_VAR 0 45
25380: PUSH
25381: LD_INT 0
25383: PUSH
25384: LD_INT 0
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 0
25393: PUSH
25394: LD_INT 1
25396: NEG
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 1
25404: PUSH
25405: LD_INT 0
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 1
25414: PUSH
25415: LD_INT 1
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 0
25424: PUSH
25425: LD_INT 1
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 1
25434: NEG
25435: PUSH
25436: LD_INT 0
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 1
25445: NEG
25446: PUSH
25447: LD_INT 1
25449: NEG
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 1
25457: NEG
25458: PUSH
25459: LD_INT 2
25461: NEG
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 0
25469: PUSH
25470: LD_INT 2
25472: NEG
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 1
25480: PUSH
25481: LD_INT 1
25483: NEG
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 2
25491: PUSH
25492: LD_INT 1
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 2
25501: PUSH
25502: LD_INT 2
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 1
25511: PUSH
25512: LD_INT 2
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 0
25521: PUSH
25522: LD_INT 2
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 1
25531: NEG
25532: PUSH
25533: LD_INT 1
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 2
25542: NEG
25543: PUSH
25544: LD_INT 1
25546: NEG
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 2
25554: NEG
25555: PUSH
25556: LD_INT 2
25558: NEG
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 2
25566: NEG
25567: PUSH
25568: LD_INT 3
25570: NEG
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 1
25578: NEG
25579: PUSH
25580: LD_INT 3
25582: NEG
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 0
25590: PUSH
25591: LD_INT 3
25593: NEG
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 1
25601: PUSH
25602: LD_INT 2
25604: NEG
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 3
25612: PUSH
25613: LD_INT 2
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 3
25622: PUSH
25623: LD_INT 3
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: LD_INT 2
25632: PUSH
25633: LD_INT 3
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 1
25642: PUSH
25643: LD_INT 3
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 0
25652: PUSH
25653: LD_INT 3
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 1
25662: NEG
25663: PUSH
25664: LD_INT 2
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 3
25673: NEG
25674: PUSH
25675: LD_INT 2
25677: NEG
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 3
25685: NEG
25686: PUSH
25687: LD_INT 3
25689: NEG
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25726: LD_ADDR_VAR 0 46
25730: PUSH
25731: LD_INT 0
25733: PUSH
25734: LD_INT 0
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 0
25743: PUSH
25744: LD_INT 1
25746: NEG
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 1
25754: PUSH
25755: LD_INT 0
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 1
25764: PUSH
25765: LD_INT 1
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 0
25774: PUSH
25775: LD_INT 1
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 1
25784: NEG
25785: PUSH
25786: LD_INT 0
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 1
25795: NEG
25796: PUSH
25797: LD_INT 1
25799: NEG
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: LD_INT 1
25807: NEG
25808: PUSH
25809: LD_INT 2
25811: NEG
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 0
25819: PUSH
25820: LD_INT 2
25822: NEG
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 1
25830: PUSH
25831: LD_INT 1
25833: NEG
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 2
25841: PUSH
25842: LD_INT 0
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 2
25851: PUSH
25852: LD_INT 1
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: LD_INT 1
25861: PUSH
25862: LD_INT 2
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 0
25871: PUSH
25872: LD_INT 2
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 1
25881: NEG
25882: PUSH
25883: LD_INT 1
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 2
25892: NEG
25893: PUSH
25894: LD_INT 0
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 2
25903: NEG
25904: PUSH
25905: LD_INT 1
25907: NEG
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 1
25915: NEG
25916: PUSH
25917: LD_INT 3
25919: NEG
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 0
25927: PUSH
25928: LD_INT 3
25930: NEG
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 1
25938: PUSH
25939: LD_INT 2
25941: NEG
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 2
25949: PUSH
25950: LD_INT 1
25952: NEG
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 3
25960: PUSH
25961: LD_INT 0
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 3
25970: PUSH
25971: LD_INT 1
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 1
25980: PUSH
25981: LD_INT 3
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 0
25990: PUSH
25991: LD_INT 3
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 1
26000: NEG
26001: PUSH
26002: LD_INT 2
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 2
26011: NEG
26012: PUSH
26013: LD_INT 1
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 3
26022: NEG
26023: PUSH
26024: LD_INT 0
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 3
26033: NEG
26034: PUSH
26035: LD_INT 1
26037: NEG
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26074: LD_ADDR_VAR 0 47
26078: PUSH
26079: LD_INT 0
26081: PUSH
26082: LD_INT 0
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 0
26091: PUSH
26092: LD_INT 1
26094: NEG
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 1
26102: PUSH
26103: LD_INT 0
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 1
26112: PUSH
26113: LD_INT 1
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 0
26122: PUSH
26123: LD_INT 1
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 1
26132: NEG
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 1
26143: NEG
26144: PUSH
26145: LD_INT 1
26147: NEG
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 1
26155: NEG
26156: PUSH
26157: LD_INT 2
26159: NEG
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 0
26167: PUSH
26168: LD_INT 2
26170: NEG
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 1
26178: PUSH
26179: LD_INT 1
26181: NEG
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 2
26189: NEG
26190: PUSH
26191: LD_INT 1
26193: NEG
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 2
26201: NEG
26202: PUSH
26203: LD_INT 2
26205: NEG
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26225: LD_ADDR_VAR 0 48
26229: PUSH
26230: LD_INT 0
26232: PUSH
26233: LD_INT 0
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 0
26242: PUSH
26243: LD_INT 1
26245: NEG
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: LD_INT 1
26253: PUSH
26254: LD_INT 0
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 1
26263: PUSH
26264: LD_INT 1
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 0
26273: PUSH
26274: LD_INT 1
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 1
26283: NEG
26284: PUSH
26285: LD_INT 0
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 1
26294: NEG
26295: PUSH
26296: LD_INT 1
26298: NEG
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 1
26306: NEG
26307: PUSH
26308: LD_INT 2
26310: NEG
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 0
26318: PUSH
26319: LD_INT 2
26321: NEG
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 1
26329: PUSH
26330: LD_INT 1
26332: NEG
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 2
26340: PUSH
26341: LD_INT 0
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 2
26350: PUSH
26351: LD_INT 1
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26372: LD_ADDR_VAR 0 49
26376: PUSH
26377: LD_INT 0
26379: PUSH
26380: LD_INT 0
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 0
26389: PUSH
26390: LD_INT 1
26392: NEG
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 1
26400: PUSH
26401: LD_INT 0
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 1
26410: PUSH
26411: LD_INT 1
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 0
26420: PUSH
26421: LD_INT 1
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 1
26430: NEG
26431: PUSH
26432: LD_INT 0
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 1
26441: NEG
26442: PUSH
26443: LD_INT 1
26445: NEG
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 1
26453: PUSH
26454: LD_INT 1
26456: NEG
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 2
26464: PUSH
26465: LD_INT 0
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 2
26474: PUSH
26475: LD_INT 1
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 2
26484: PUSH
26485: LD_INT 2
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 1
26494: PUSH
26495: LD_INT 2
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26516: LD_ADDR_VAR 0 50
26520: PUSH
26521: LD_INT 0
26523: PUSH
26524: LD_INT 0
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 0
26533: PUSH
26534: LD_INT 1
26536: NEG
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 1
26544: PUSH
26545: LD_INT 0
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 1
26554: PUSH
26555: LD_INT 1
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 0
26564: PUSH
26565: LD_INT 1
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 1
26574: NEG
26575: PUSH
26576: LD_INT 0
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 1
26585: NEG
26586: PUSH
26587: LD_INT 1
26589: NEG
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 2
26597: PUSH
26598: LD_INT 1
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 2
26607: PUSH
26608: LD_INT 2
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 1
26617: PUSH
26618: LD_INT 2
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 0
26627: PUSH
26628: LD_INT 2
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 1
26637: NEG
26638: PUSH
26639: LD_INT 1
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26660: LD_ADDR_VAR 0 51
26664: PUSH
26665: LD_INT 0
26667: PUSH
26668: LD_INT 0
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 0
26677: PUSH
26678: LD_INT 1
26680: NEG
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 1
26688: PUSH
26689: LD_INT 0
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 1
26698: PUSH
26699: LD_INT 1
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 0
26708: PUSH
26709: LD_INT 1
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 1
26718: NEG
26719: PUSH
26720: LD_INT 0
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 1
26729: NEG
26730: PUSH
26731: LD_INT 1
26733: NEG
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 1
26741: PUSH
26742: LD_INT 2
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 0
26751: PUSH
26752: LD_INT 2
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 1
26761: NEG
26762: PUSH
26763: LD_INT 1
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 2
26772: NEG
26773: PUSH
26774: LD_INT 0
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 2
26783: NEG
26784: PUSH
26785: LD_INT 1
26787: NEG
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26807: LD_ADDR_VAR 0 52
26811: PUSH
26812: LD_INT 0
26814: PUSH
26815: LD_INT 0
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 0
26824: PUSH
26825: LD_INT 1
26827: NEG
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 1
26835: PUSH
26836: LD_INT 0
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: LD_INT 1
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 0
26855: PUSH
26856: LD_INT 1
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 1
26865: NEG
26866: PUSH
26867: LD_INT 0
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 1
26876: NEG
26877: PUSH
26878: LD_INT 1
26880: NEG
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 1
26888: NEG
26889: PUSH
26890: LD_INT 2
26892: NEG
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 1
26900: NEG
26901: PUSH
26902: LD_INT 1
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 2
26911: NEG
26912: PUSH
26913: LD_INT 0
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 2
26922: NEG
26923: PUSH
26924: LD_INT 1
26926: NEG
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 2
26934: NEG
26935: PUSH
26936: LD_INT 2
26938: NEG
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26958: LD_ADDR_VAR 0 53
26962: PUSH
26963: LD_INT 0
26965: PUSH
26966: LD_INT 0
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 0
26975: PUSH
26976: LD_INT 1
26978: NEG
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 1
26986: PUSH
26987: LD_INT 0
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 1
26996: PUSH
26997: LD_INT 1
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 0
27006: PUSH
27007: LD_INT 1
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 1
27016: NEG
27017: PUSH
27018: LD_INT 0
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 1
27027: NEG
27028: PUSH
27029: LD_INT 1
27031: NEG
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 1
27039: NEG
27040: PUSH
27041: LD_INT 2
27043: NEG
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 0
27051: PUSH
27052: LD_INT 2
27054: NEG
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 1
27062: PUSH
27063: LD_INT 1
27065: NEG
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 2
27073: PUSH
27074: LD_INT 0
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: LD_INT 2
27083: PUSH
27084: LD_INT 1
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 2
27093: PUSH
27094: LD_INT 2
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 1
27103: PUSH
27104: LD_INT 2
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 0
27113: PUSH
27114: LD_INT 2
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 1
27123: NEG
27124: PUSH
27125: LD_INT 1
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 2
27134: NEG
27135: PUSH
27136: LD_INT 0
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 2
27145: NEG
27146: PUSH
27147: LD_INT 1
27149: NEG
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 2
27157: NEG
27158: PUSH
27159: LD_INT 2
27161: NEG
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27188: LD_ADDR_VAR 0 54
27192: PUSH
27193: LD_INT 0
27195: PUSH
27196: LD_INT 0
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 0
27205: PUSH
27206: LD_INT 1
27208: NEG
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 1
27216: PUSH
27217: LD_INT 0
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 1
27226: PUSH
27227: LD_INT 1
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 0
27236: PUSH
27237: LD_INT 1
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 1
27246: NEG
27247: PUSH
27248: LD_INT 0
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 1
27257: NEG
27258: PUSH
27259: LD_INT 1
27261: NEG
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 1
27269: NEG
27270: PUSH
27271: LD_INT 2
27273: NEG
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 0
27281: PUSH
27282: LD_INT 2
27284: NEG
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 1
27292: PUSH
27293: LD_INT 1
27295: NEG
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 2
27303: PUSH
27304: LD_INT 0
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 2
27313: PUSH
27314: LD_INT 1
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 2
27323: PUSH
27324: LD_INT 2
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 1
27333: PUSH
27334: LD_INT 2
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 0
27343: PUSH
27344: LD_INT 2
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 1
27353: NEG
27354: PUSH
27355: LD_INT 1
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 2
27364: NEG
27365: PUSH
27366: LD_INT 0
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 2
27375: NEG
27376: PUSH
27377: LD_INT 1
27379: NEG
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 2
27387: NEG
27388: PUSH
27389: LD_INT 2
27391: NEG
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27418: LD_ADDR_VAR 0 55
27422: PUSH
27423: LD_INT 0
27425: PUSH
27426: LD_INT 0
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 0
27435: PUSH
27436: LD_INT 1
27438: NEG
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 1
27446: PUSH
27447: LD_INT 0
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 1
27456: PUSH
27457: LD_INT 1
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 0
27466: PUSH
27467: LD_INT 1
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 1
27476: NEG
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 1
27487: NEG
27488: PUSH
27489: LD_INT 1
27491: NEG
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 1
27499: NEG
27500: PUSH
27501: LD_INT 2
27503: NEG
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 0
27511: PUSH
27512: LD_INT 2
27514: NEG
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 1
27522: PUSH
27523: LD_INT 1
27525: NEG
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 2
27533: PUSH
27534: LD_INT 0
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 2
27543: PUSH
27544: LD_INT 1
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 2
27553: PUSH
27554: LD_INT 2
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 1
27563: PUSH
27564: LD_INT 2
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 0
27573: PUSH
27574: LD_INT 2
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 1
27583: NEG
27584: PUSH
27585: LD_INT 1
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 2
27594: NEG
27595: PUSH
27596: LD_INT 0
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 2
27605: NEG
27606: PUSH
27607: LD_INT 1
27609: NEG
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 2
27617: NEG
27618: PUSH
27619: LD_INT 2
27621: NEG
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27648: LD_ADDR_VAR 0 56
27652: PUSH
27653: LD_INT 0
27655: PUSH
27656: LD_INT 0
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 0
27665: PUSH
27666: LD_INT 1
27668: NEG
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 1
27676: PUSH
27677: LD_INT 0
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 1
27686: PUSH
27687: LD_INT 1
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: LD_INT 0
27696: PUSH
27697: LD_INT 1
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 1
27706: NEG
27707: PUSH
27708: LD_INT 0
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 1
27717: NEG
27718: PUSH
27719: LD_INT 1
27721: NEG
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 1
27729: NEG
27730: PUSH
27731: LD_INT 2
27733: NEG
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: LD_INT 0
27741: PUSH
27742: LD_INT 2
27744: NEG
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 1
27752: PUSH
27753: LD_INT 1
27755: NEG
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 2
27763: PUSH
27764: LD_INT 0
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 2
27773: PUSH
27774: LD_INT 1
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: LD_INT 2
27783: PUSH
27784: LD_INT 2
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 1
27793: PUSH
27794: LD_INT 2
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 0
27803: PUSH
27804: LD_INT 2
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 1
27813: NEG
27814: PUSH
27815: LD_INT 1
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: LD_INT 2
27824: NEG
27825: PUSH
27826: LD_INT 0
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 2
27835: NEG
27836: PUSH
27837: LD_INT 1
27839: NEG
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 2
27847: NEG
27848: PUSH
27849: LD_INT 2
27851: NEG
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27878: LD_ADDR_VAR 0 57
27882: PUSH
27883: LD_INT 0
27885: PUSH
27886: LD_INT 0
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 0
27895: PUSH
27896: LD_INT 1
27898: NEG
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 1
27906: PUSH
27907: LD_INT 0
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 1
27916: PUSH
27917: LD_INT 1
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: LD_INT 0
27926: PUSH
27927: LD_INT 1
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: PUSH
27934: LD_INT 1
27936: NEG
27937: PUSH
27938: LD_INT 0
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: LD_INT 1
27947: NEG
27948: PUSH
27949: LD_INT 1
27951: NEG
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 1
27959: NEG
27960: PUSH
27961: LD_INT 2
27963: NEG
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 0
27971: PUSH
27972: LD_INT 2
27974: NEG
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 1
27982: PUSH
27983: LD_INT 1
27985: NEG
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 2
27993: PUSH
27994: LD_INT 0
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 2
28003: PUSH
28004: LD_INT 1
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 2
28013: PUSH
28014: LD_INT 2
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 1
28023: PUSH
28024: LD_INT 2
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 0
28033: PUSH
28034: LD_INT 2
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: LD_INT 1
28043: NEG
28044: PUSH
28045: LD_INT 1
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 2
28054: NEG
28055: PUSH
28056: LD_INT 0
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 2
28065: NEG
28066: PUSH
28067: LD_INT 1
28069: NEG
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 2
28077: NEG
28078: PUSH
28079: LD_INT 2
28081: NEG
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28108: LD_ADDR_VAR 0 58
28112: PUSH
28113: LD_INT 0
28115: PUSH
28116: LD_INT 0
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 0
28125: PUSH
28126: LD_INT 1
28128: NEG
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 1
28136: PUSH
28137: LD_INT 0
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 1
28146: PUSH
28147: LD_INT 1
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 0
28156: PUSH
28157: LD_INT 1
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 1
28166: NEG
28167: PUSH
28168: LD_INT 0
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 1
28177: NEG
28178: PUSH
28179: LD_INT 1
28181: NEG
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 1
28189: NEG
28190: PUSH
28191: LD_INT 2
28193: NEG
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 0
28201: PUSH
28202: LD_INT 2
28204: NEG
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 1
28212: PUSH
28213: LD_INT 1
28215: NEG
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 2
28223: PUSH
28224: LD_INT 0
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 2
28233: PUSH
28234: LD_INT 1
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 2
28243: PUSH
28244: LD_INT 2
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 1
28253: PUSH
28254: LD_INT 2
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 0
28263: PUSH
28264: LD_INT 2
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 1
28273: NEG
28274: PUSH
28275: LD_INT 1
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 2
28284: NEG
28285: PUSH
28286: LD_INT 0
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 2
28295: NEG
28296: PUSH
28297: LD_INT 1
28299: NEG
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 2
28307: NEG
28308: PUSH
28309: LD_INT 2
28311: NEG
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28338: LD_ADDR_VAR 0 59
28342: PUSH
28343: LD_INT 0
28345: PUSH
28346: LD_INT 0
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 0
28355: PUSH
28356: LD_INT 1
28358: NEG
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 1
28366: PUSH
28367: LD_INT 0
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 1
28376: PUSH
28377: LD_INT 1
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 0
28386: PUSH
28387: LD_INT 1
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 1
28396: NEG
28397: PUSH
28398: LD_INT 0
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 1
28407: NEG
28408: PUSH
28409: LD_INT 1
28411: NEG
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28426: LD_ADDR_VAR 0 60
28430: PUSH
28431: LD_INT 0
28433: PUSH
28434: LD_INT 0
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 0
28443: PUSH
28444: LD_INT 1
28446: NEG
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 1
28454: PUSH
28455: LD_INT 0
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 1
28464: PUSH
28465: LD_INT 1
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: LD_INT 1
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 1
28484: NEG
28485: PUSH
28486: LD_INT 0
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 1
28495: NEG
28496: PUSH
28497: LD_INT 1
28499: NEG
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28514: LD_ADDR_VAR 0 61
28518: PUSH
28519: LD_INT 0
28521: PUSH
28522: LD_INT 0
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 0
28531: PUSH
28532: LD_INT 1
28534: NEG
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 1
28542: PUSH
28543: LD_INT 0
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 1
28552: PUSH
28553: LD_INT 1
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 0
28562: PUSH
28563: LD_INT 1
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 1
28572: NEG
28573: PUSH
28574: LD_INT 0
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 1
28583: NEG
28584: PUSH
28585: LD_INT 1
28587: NEG
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28602: LD_ADDR_VAR 0 62
28606: PUSH
28607: LD_INT 0
28609: PUSH
28610: LD_INT 0
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 0
28619: PUSH
28620: LD_INT 1
28622: NEG
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 1
28630: PUSH
28631: LD_INT 0
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 1
28640: PUSH
28641: LD_INT 1
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 0
28650: PUSH
28651: LD_INT 1
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 1
28660: NEG
28661: PUSH
28662: LD_INT 0
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 1
28671: NEG
28672: PUSH
28673: LD_INT 1
28675: NEG
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28690: LD_ADDR_VAR 0 63
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: LD_INT 0
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 0
28707: PUSH
28708: LD_INT 1
28710: NEG
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 1
28718: PUSH
28719: LD_INT 0
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: LD_INT 1
28728: PUSH
28729: LD_INT 1
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 0
28738: PUSH
28739: LD_INT 1
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: LD_INT 1
28748: NEG
28749: PUSH
28750: LD_INT 0
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 1
28759: NEG
28760: PUSH
28761: LD_INT 1
28763: NEG
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28778: LD_ADDR_VAR 0 64
28782: PUSH
28783: LD_INT 0
28785: PUSH
28786: LD_INT 0
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 0
28795: PUSH
28796: LD_INT 1
28798: NEG
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 1
28806: PUSH
28807: LD_INT 0
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 1
28816: PUSH
28817: LD_INT 1
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 0
28826: PUSH
28827: LD_INT 1
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 1
28836: NEG
28837: PUSH
28838: LD_INT 0
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 1
28847: NEG
28848: PUSH
28849: LD_INT 1
28851: NEG
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: ST_TO_ADDR
// end ; 1 :
28866: GO 34763
28868: LD_INT 1
28870: DOUBLE
28871: EQUAL
28872: IFTRUE 28876
28874: GO 31499
28876: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28877: LD_ADDR_VAR 0 11
28881: PUSH
28882: LD_INT 1
28884: NEG
28885: PUSH
28886: LD_INT 3
28888: NEG
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 0
28896: PUSH
28897: LD_INT 3
28899: NEG
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 1
28907: PUSH
28908: LD_INT 2
28910: NEG
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: LIST
28920: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28921: LD_ADDR_VAR 0 12
28925: PUSH
28926: LD_INT 2
28928: PUSH
28929: LD_INT 1
28931: NEG
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 3
28939: PUSH
28940: LD_INT 0
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 3
28949: PUSH
28950: LD_INT 1
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: LIST
28961: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28962: LD_ADDR_VAR 0 13
28966: PUSH
28967: LD_INT 3
28969: PUSH
28970: LD_INT 2
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 3
28979: PUSH
28980: LD_INT 3
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 2
28989: PUSH
28990: LD_INT 3
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: LIST
29001: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29002: LD_ADDR_VAR 0 14
29006: PUSH
29007: LD_INT 1
29009: PUSH
29010: LD_INT 3
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 0
29019: PUSH
29020: LD_INT 3
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 1
29029: NEG
29030: PUSH
29031: LD_INT 2
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: LIST
29042: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29043: LD_ADDR_VAR 0 15
29047: PUSH
29048: LD_INT 2
29050: NEG
29051: PUSH
29052: LD_INT 1
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 3
29061: NEG
29062: PUSH
29063: LD_INT 0
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 3
29072: NEG
29073: PUSH
29074: LD_INT 1
29076: NEG
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: LIST
29086: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29087: LD_ADDR_VAR 0 16
29091: PUSH
29092: LD_INT 2
29094: NEG
29095: PUSH
29096: LD_INT 3
29098: NEG
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 3
29106: NEG
29107: PUSH
29108: LD_INT 2
29110: NEG
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 3
29118: NEG
29119: PUSH
29120: LD_INT 3
29122: NEG
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: LIST
29132: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29133: LD_ADDR_VAR 0 17
29137: PUSH
29138: LD_INT 1
29140: NEG
29141: PUSH
29142: LD_INT 3
29144: NEG
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 0
29152: PUSH
29153: LD_INT 3
29155: NEG
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 1
29163: PUSH
29164: LD_INT 2
29166: NEG
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: LIST
29176: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29177: LD_ADDR_VAR 0 18
29181: PUSH
29182: LD_INT 2
29184: PUSH
29185: LD_INT 1
29187: NEG
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 3
29195: PUSH
29196: LD_INT 0
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 3
29205: PUSH
29206: LD_INT 1
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: LIST
29217: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29218: LD_ADDR_VAR 0 19
29222: PUSH
29223: LD_INT 3
29225: PUSH
29226: LD_INT 2
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 3
29235: PUSH
29236: LD_INT 3
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 2
29245: PUSH
29246: LD_INT 3
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: LIST
29257: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29258: LD_ADDR_VAR 0 20
29262: PUSH
29263: LD_INT 1
29265: PUSH
29266: LD_INT 3
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 0
29275: PUSH
29276: LD_INT 3
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 1
29285: NEG
29286: PUSH
29287: LD_INT 2
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: LIST
29298: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29299: LD_ADDR_VAR 0 21
29303: PUSH
29304: LD_INT 2
29306: NEG
29307: PUSH
29308: LD_INT 1
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 3
29317: NEG
29318: PUSH
29319: LD_INT 0
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 3
29328: NEG
29329: PUSH
29330: LD_INT 1
29332: NEG
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: LIST
29342: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29343: LD_ADDR_VAR 0 22
29347: PUSH
29348: LD_INT 2
29350: NEG
29351: PUSH
29352: LD_INT 3
29354: NEG
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 3
29362: NEG
29363: PUSH
29364: LD_INT 2
29366: NEG
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 3
29374: NEG
29375: PUSH
29376: LD_INT 3
29378: NEG
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: LIST
29388: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29389: LD_ADDR_VAR 0 23
29393: PUSH
29394: LD_INT 0
29396: PUSH
29397: LD_INT 3
29399: NEG
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 1
29407: NEG
29408: PUSH
29409: LD_INT 4
29411: NEG
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 1
29419: PUSH
29420: LD_INT 3
29422: NEG
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: LIST
29432: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29433: LD_ADDR_VAR 0 24
29437: PUSH
29438: LD_INT 3
29440: PUSH
29441: LD_INT 0
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 3
29450: PUSH
29451: LD_INT 1
29453: NEG
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 4
29461: PUSH
29462: LD_INT 1
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: LIST
29473: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29474: LD_ADDR_VAR 0 25
29478: PUSH
29479: LD_INT 3
29481: PUSH
29482: LD_INT 3
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 4
29491: PUSH
29492: LD_INT 3
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 3
29501: PUSH
29502: LD_INT 4
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: LIST
29513: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29514: LD_ADDR_VAR 0 26
29518: PUSH
29519: LD_INT 0
29521: PUSH
29522: LD_INT 3
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 1
29531: PUSH
29532: LD_INT 4
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 1
29541: NEG
29542: PUSH
29543: LD_INT 3
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: LIST
29554: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29555: LD_ADDR_VAR 0 27
29559: PUSH
29560: LD_INT 3
29562: NEG
29563: PUSH
29564: LD_INT 0
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 3
29573: NEG
29574: PUSH
29575: LD_INT 1
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 4
29584: NEG
29585: PUSH
29586: LD_INT 1
29588: NEG
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: LIST
29598: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29599: LD_ADDR_VAR 0 28
29603: PUSH
29604: LD_INT 3
29606: NEG
29607: PUSH
29608: LD_INT 3
29610: NEG
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 3
29618: NEG
29619: PUSH
29620: LD_INT 4
29622: NEG
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 4
29630: NEG
29631: PUSH
29632: LD_INT 3
29634: NEG
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: LIST
29644: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29645: LD_ADDR_VAR 0 29
29649: PUSH
29650: LD_INT 1
29652: NEG
29653: PUSH
29654: LD_INT 3
29656: NEG
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 0
29664: PUSH
29665: LD_INT 3
29667: NEG
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 1
29675: PUSH
29676: LD_INT 2
29678: NEG
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 1
29686: NEG
29687: PUSH
29688: LD_INT 4
29690: NEG
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 0
29698: PUSH
29699: LD_INT 4
29701: NEG
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 1
29709: PUSH
29710: LD_INT 3
29712: NEG
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 1
29720: NEG
29721: PUSH
29722: LD_INT 5
29724: NEG
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 0
29732: PUSH
29733: LD_INT 5
29735: NEG
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 1
29743: PUSH
29744: LD_INT 4
29746: NEG
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 1
29754: NEG
29755: PUSH
29756: LD_INT 6
29758: NEG
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 0
29766: PUSH
29767: LD_INT 6
29769: NEG
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 1
29777: PUSH
29778: LD_INT 5
29780: NEG
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29800: LD_ADDR_VAR 0 30
29804: PUSH
29805: LD_INT 2
29807: PUSH
29808: LD_INT 1
29810: NEG
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 3
29818: PUSH
29819: LD_INT 0
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 3
29828: PUSH
29829: LD_INT 1
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: LD_INT 3
29838: PUSH
29839: LD_INT 1
29841: NEG
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 4
29849: PUSH
29850: LD_INT 0
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 4
29859: PUSH
29860: LD_INT 1
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 4
29869: PUSH
29870: LD_INT 1
29872: NEG
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 5
29880: PUSH
29881: LD_INT 0
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 5
29890: PUSH
29891: LD_INT 1
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: LD_INT 5
29900: PUSH
29901: LD_INT 1
29903: NEG
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 6
29911: PUSH
29912: LD_INT 0
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 6
29921: PUSH
29922: LD_INT 1
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29943: LD_ADDR_VAR 0 31
29947: PUSH
29948: LD_INT 3
29950: PUSH
29951: LD_INT 2
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 3
29960: PUSH
29961: LD_INT 3
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 2
29970: PUSH
29971: LD_INT 3
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 4
29980: PUSH
29981: LD_INT 3
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 4
29990: PUSH
29991: LD_INT 4
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 3
30000: PUSH
30001: LD_INT 4
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 5
30010: PUSH
30011: LD_INT 4
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 5
30020: PUSH
30021: LD_INT 5
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 4
30030: PUSH
30031: LD_INT 5
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 6
30040: PUSH
30041: LD_INT 5
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 6
30050: PUSH
30051: LD_INT 6
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 5
30060: PUSH
30061: LD_INT 6
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30082: LD_ADDR_VAR 0 32
30086: PUSH
30087: LD_INT 1
30089: PUSH
30090: LD_INT 3
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 0
30099: PUSH
30100: LD_INT 3
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 1
30109: NEG
30110: PUSH
30111: LD_INT 2
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 1
30120: PUSH
30121: LD_INT 4
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 0
30130: PUSH
30131: LD_INT 4
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 1
30140: NEG
30141: PUSH
30142: LD_INT 3
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 1
30151: PUSH
30152: LD_INT 5
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 0
30161: PUSH
30162: LD_INT 5
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 1
30171: NEG
30172: PUSH
30173: LD_INT 4
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 1
30182: PUSH
30183: LD_INT 6
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 0
30192: PUSH
30193: LD_INT 6
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 1
30202: NEG
30203: PUSH
30204: LD_INT 5
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30225: LD_ADDR_VAR 0 33
30229: PUSH
30230: LD_INT 2
30232: NEG
30233: PUSH
30234: LD_INT 1
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 3
30243: NEG
30244: PUSH
30245: LD_INT 0
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 3
30254: NEG
30255: PUSH
30256: LD_INT 1
30258: NEG
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 3
30266: NEG
30267: PUSH
30268: LD_INT 1
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 4
30277: NEG
30278: PUSH
30279: LD_INT 0
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 4
30288: NEG
30289: PUSH
30290: LD_INT 1
30292: NEG
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 4
30300: NEG
30301: PUSH
30302: LD_INT 1
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 5
30311: NEG
30312: PUSH
30313: LD_INT 0
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 5
30322: NEG
30323: PUSH
30324: LD_INT 1
30326: NEG
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 5
30334: NEG
30335: PUSH
30336: LD_INT 1
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 6
30345: NEG
30346: PUSH
30347: LD_INT 0
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 6
30356: NEG
30357: PUSH
30358: LD_INT 1
30360: NEG
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30380: LD_ADDR_VAR 0 34
30384: PUSH
30385: LD_INT 2
30387: NEG
30388: PUSH
30389: LD_INT 3
30391: NEG
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 3
30399: NEG
30400: PUSH
30401: LD_INT 2
30403: NEG
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 3
30411: NEG
30412: PUSH
30413: LD_INT 3
30415: NEG
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 3
30423: NEG
30424: PUSH
30425: LD_INT 4
30427: NEG
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 4
30435: NEG
30436: PUSH
30437: LD_INT 3
30439: NEG
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 4
30447: NEG
30448: PUSH
30449: LD_INT 4
30451: NEG
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 4
30459: NEG
30460: PUSH
30461: LD_INT 5
30463: NEG
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 5
30471: NEG
30472: PUSH
30473: LD_INT 4
30475: NEG
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 5
30483: NEG
30484: PUSH
30485: LD_INT 5
30487: NEG
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 5
30495: NEG
30496: PUSH
30497: LD_INT 6
30499: NEG
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 6
30507: NEG
30508: PUSH
30509: LD_INT 5
30511: NEG
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 6
30519: NEG
30520: PUSH
30521: LD_INT 6
30523: NEG
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30543: LD_ADDR_VAR 0 41
30547: PUSH
30548: LD_INT 0
30550: PUSH
30551: LD_INT 2
30553: NEG
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 1
30561: NEG
30562: PUSH
30563: LD_INT 3
30565: NEG
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 1
30573: PUSH
30574: LD_INT 2
30576: NEG
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: LIST
30586: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30587: LD_ADDR_VAR 0 42
30591: PUSH
30592: LD_INT 2
30594: PUSH
30595: LD_INT 0
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 2
30604: PUSH
30605: LD_INT 1
30607: NEG
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 3
30615: PUSH
30616: LD_INT 1
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: LIST
30627: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30628: LD_ADDR_VAR 0 43
30632: PUSH
30633: LD_INT 2
30635: PUSH
30636: LD_INT 2
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 3
30645: PUSH
30646: LD_INT 2
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 2
30655: PUSH
30656: LD_INT 3
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: LIST
30667: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30668: LD_ADDR_VAR 0 44
30672: PUSH
30673: LD_INT 0
30675: PUSH
30676: LD_INT 2
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 1
30685: PUSH
30686: LD_INT 3
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 1
30695: NEG
30696: PUSH
30697: LD_INT 2
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: LIST
30708: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30709: LD_ADDR_VAR 0 45
30713: PUSH
30714: LD_INT 2
30716: NEG
30717: PUSH
30718: LD_INT 0
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 2
30727: NEG
30728: PUSH
30729: LD_INT 1
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 3
30738: NEG
30739: PUSH
30740: LD_INT 1
30742: NEG
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: LIST
30752: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30753: LD_ADDR_VAR 0 46
30757: PUSH
30758: LD_INT 2
30760: NEG
30761: PUSH
30762: LD_INT 2
30764: NEG
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 2
30772: NEG
30773: PUSH
30774: LD_INT 3
30776: NEG
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 3
30784: NEG
30785: PUSH
30786: LD_INT 2
30788: NEG
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: LIST
30798: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30799: LD_ADDR_VAR 0 47
30803: PUSH
30804: LD_INT 2
30806: NEG
30807: PUSH
30808: LD_INT 3
30810: NEG
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 1
30818: NEG
30819: PUSH
30820: LD_INT 3
30822: NEG
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30832: LD_ADDR_VAR 0 48
30836: PUSH
30837: LD_INT 1
30839: PUSH
30840: LD_INT 2
30842: NEG
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 2
30850: PUSH
30851: LD_INT 1
30853: NEG
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30863: LD_ADDR_VAR 0 49
30867: PUSH
30868: LD_INT 3
30870: PUSH
30871: LD_INT 1
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 3
30880: PUSH
30881: LD_INT 2
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30892: LD_ADDR_VAR 0 50
30896: PUSH
30897: LD_INT 2
30899: PUSH
30900: LD_INT 3
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 1
30909: PUSH
30910: LD_INT 3
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30921: LD_ADDR_VAR 0 51
30925: PUSH
30926: LD_INT 1
30928: NEG
30929: PUSH
30930: LD_INT 2
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 2
30939: NEG
30940: PUSH
30941: LD_INT 1
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30952: LD_ADDR_VAR 0 52
30956: PUSH
30957: LD_INT 3
30959: NEG
30960: PUSH
30961: LD_INT 1
30963: NEG
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 3
30971: NEG
30972: PUSH
30973: LD_INT 2
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30985: LD_ADDR_VAR 0 53
30989: PUSH
30990: LD_INT 1
30992: NEG
30993: PUSH
30994: LD_INT 3
30996: NEG
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 0
31004: PUSH
31005: LD_INT 3
31007: NEG
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 1
31015: PUSH
31016: LD_INT 2
31018: NEG
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: LIST
31028: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31029: LD_ADDR_VAR 0 54
31033: PUSH
31034: LD_INT 2
31036: PUSH
31037: LD_INT 1
31039: NEG
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: LD_INT 3
31047: PUSH
31048: LD_INT 0
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 3
31057: PUSH
31058: LD_INT 1
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: LIST
31069: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31070: LD_ADDR_VAR 0 55
31074: PUSH
31075: LD_INT 3
31077: PUSH
31078: LD_INT 2
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 3
31087: PUSH
31088: LD_INT 3
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 2
31097: PUSH
31098: LD_INT 3
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: LIST
31109: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31110: LD_ADDR_VAR 0 56
31114: PUSH
31115: LD_INT 1
31117: PUSH
31118: LD_INT 3
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 0
31127: PUSH
31128: LD_INT 3
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 1
31137: NEG
31138: PUSH
31139: LD_INT 2
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: LIST
31150: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31151: LD_ADDR_VAR 0 57
31155: PUSH
31156: LD_INT 2
31158: NEG
31159: PUSH
31160: LD_INT 1
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 3
31169: NEG
31170: PUSH
31171: LD_INT 0
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 3
31180: NEG
31181: PUSH
31182: LD_INT 1
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: LIST
31194: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31195: LD_ADDR_VAR 0 58
31199: PUSH
31200: LD_INT 2
31202: NEG
31203: PUSH
31204: LD_INT 3
31206: NEG
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 3
31214: NEG
31215: PUSH
31216: LD_INT 2
31218: NEG
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 3
31226: NEG
31227: PUSH
31228: LD_INT 3
31230: NEG
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: LIST
31240: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31241: LD_ADDR_VAR 0 59
31245: PUSH
31246: LD_INT 1
31248: NEG
31249: PUSH
31250: LD_INT 2
31252: NEG
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 0
31260: PUSH
31261: LD_INT 2
31263: NEG
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 1
31271: PUSH
31272: LD_INT 1
31274: NEG
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: LIST
31284: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31285: LD_ADDR_VAR 0 60
31289: PUSH
31290: LD_INT 1
31292: PUSH
31293: LD_INT 1
31295: NEG
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 2
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 2
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: LIST
31325: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31326: LD_ADDR_VAR 0 61
31330: PUSH
31331: LD_INT 2
31333: PUSH
31334: LD_INT 1
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 2
31343: PUSH
31344: LD_INT 2
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 1
31353: PUSH
31354: LD_INT 2
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: LIST
31365: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31366: LD_ADDR_VAR 0 62
31370: PUSH
31371: LD_INT 1
31373: PUSH
31374: LD_INT 2
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 0
31383: PUSH
31384: LD_INT 2
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 1
31393: NEG
31394: PUSH
31395: LD_INT 1
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: LIST
31406: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31407: LD_ADDR_VAR 0 63
31411: PUSH
31412: LD_INT 1
31414: NEG
31415: PUSH
31416: LD_INT 1
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 2
31425: NEG
31426: PUSH
31427: LD_INT 0
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 2
31436: NEG
31437: PUSH
31438: LD_INT 1
31440: NEG
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: LIST
31450: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31451: LD_ADDR_VAR 0 64
31455: PUSH
31456: LD_INT 1
31458: NEG
31459: PUSH
31460: LD_INT 2
31462: NEG
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 2
31470: NEG
31471: PUSH
31472: LD_INT 1
31474: NEG
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 2
31482: NEG
31483: PUSH
31484: LD_INT 2
31486: NEG
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: LIST
31496: ST_TO_ADDR
// end ; 2 :
31497: GO 34763
31499: LD_INT 2
31501: DOUBLE
31502: EQUAL
31503: IFTRUE 31507
31505: GO 34762
31507: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31508: LD_ADDR_VAR 0 29
31512: PUSH
31513: LD_INT 4
31515: PUSH
31516: LD_INT 0
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 4
31525: PUSH
31526: LD_INT 1
31528: NEG
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 5
31536: PUSH
31537: LD_INT 0
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 5
31546: PUSH
31547: LD_INT 1
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 4
31556: PUSH
31557: LD_INT 1
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 3
31566: PUSH
31567: LD_INT 0
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 3
31576: PUSH
31577: LD_INT 1
31579: NEG
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 3
31587: PUSH
31588: LD_INT 2
31590: NEG
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 5
31598: PUSH
31599: LD_INT 2
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 3
31608: PUSH
31609: LD_INT 3
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 3
31618: PUSH
31619: LD_INT 2
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 4
31628: PUSH
31629: LD_INT 3
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 4
31638: PUSH
31639: LD_INT 4
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 3
31648: PUSH
31649: LD_INT 4
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 2
31658: PUSH
31659: LD_INT 3
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 2
31668: PUSH
31669: LD_INT 2
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 4
31678: PUSH
31679: LD_INT 2
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 2
31688: PUSH
31689: LD_INT 4
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 0
31698: PUSH
31699: LD_INT 4
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 0
31708: PUSH
31709: LD_INT 3
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 1
31718: PUSH
31719: LD_INT 4
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 1
31728: PUSH
31729: LD_INT 5
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 0
31738: PUSH
31739: LD_INT 5
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 1
31748: NEG
31749: PUSH
31750: LD_INT 4
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 1
31759: NEG
31760: PUSH
31761: LD_INT 3
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 2
31770: PUSH
31771: LD_INT 5
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 2
31780: NEG
31781: PUSH
31782: LD_INT 3
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 3
31791: NEG
31792: PUSH
31793: LD_INT 0
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 3
31802: NEG
31803: PUSH
31804: LD_INT 1
31806: NEG
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 2
31814: NEG
31815: PUSH
31816: LD_INT 0
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 2
31825: NEG
31826: PUSH
31827: LD_INT 1
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 3
31836: NEG
31837: PUSH
31838: LD_INT 1
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 4
31847: NEG
31848: PUSH
31849: LD_INT 0
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 4
31858: NEG
31859: PUSH
31860: LD_INT 1
31862: NEG
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 4
31870: NEG
31871: PUSH
31872: LD_INT 2
31874: NEG
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 2
31882: NEG
31883: PUSH
31884: LD_INT 2
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 4
31893: NEG
31894: PUSH
31895: LD_INT 4
31897: NEG
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 4
31905: NEG
31906: PUSH
31907: LD_INT 5
31909: NEG
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 3
31917: NEG
31918: PUSH
31919: LD_INT 4
31921: NEG
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 3
31929: NEG
31930: PUSH
31931: LD_INT 3
31933: NEG
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 4
31941: NEG
31942: PUSH
31943: LD_INT 3
31945: NEG
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 5
31953: NEG
31954: PUSH
31955: LD_INT 4
31957: NEG
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 5
31965: NEG
31966: PUSH
31967: LD_INT 5
31969: NEG
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 3
31977: NEG
31978: PUSH
31979: LD_INT 5
31981: NEG
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 5
31989: NEG
31990: PUSH
31991: LD_INT 3
31993: NEG
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32046: LD_ADDR_VAR 0 30
32050: PUSH
32051: LD_INT 4
32053: PUSH
32054: LD_INT 4
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 4
32063: PUSH
32064: LD_INT 3
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 5
32073: PUSH
32074: LD_INT 4
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 5
32083: PUSH
32084: LD_INT 5
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 4
32093: PUSH
32094: LD_INT 5
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 3
32103: PUSH
32104: LD_INT 4
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 3
32113: PUSH
32114: LD_INT 3
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 5
32123: PUSH
32124: LD_INT 3
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 3
32133: PUSH
32134: LD_INT 5
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 0
32143: PUSH
32144: LD_INT 3
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 0
32153: PUSH
32154: LD_INT 2
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 1
32163: PUSH
32164: LD_INT 3
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 1
32173: PUSH
32174: LD_INT 4
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 0
32183: PUSH
32184: LD_INT 4
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 1
32193: NEG
32194: PUSH
32195: LD_INT 3
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 1
32204: NEG
32205: PUSH
32206: LD_INT 2
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 2
32215: PUSH
32216: LD_INT 4
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 2
32225: NEG
32226: PUSH
32227: LD_INT 2
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 4
32236: NEG
32237: PUSH
32238: LD_INT 0
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 4
32247: NEG
32248: PUSH
32249: LD_INT 1
32251: NEG
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 3
32259: NEG
32260: PUSH
32261: LD_INT 0
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 3
32270: NEG
32271: PUSH
32272: LD_INT 1
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 4
32281: NEG
32282: PUSH
32283: LD_INT 1
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 5
32292: NEG
32293: PUSH
32294: LD_INT 0
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 5
32303: NEG
32304: PUSH
32305: LD_INT 1
32307: NEG
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 5
32315: NEG
32316: PUSH
32317: LD_INT 2
32319: NEG
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 3
32327: NEG
32328: PUSH
32329: LD_INT 2
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 3
32338: NEG
32339: PUSH
32340: LD_INT 3
32342: NEG
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 3
32350: NEG
32351: PUSH
32352: LD_INT 4
32354: NEG
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 2
32362: NEG
32363: PUSH
32364: LD_INT 3
32366: NEG
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 2
32374: NEG
32375: PUSH
32376: LD_INT 2
32378: NEG
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 3
32386: NEG
32387: PUSH
32388: LD_INT 2
32390: NEG
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 4
32398: NEG
32399: PUSH
32400: LD_INT 3
32402: NEG
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 4
32410: NEG
32411: PUSH
32412: LD_INT 4
32414: NEG
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 2
32422: NEG
32423: PUSH
32424: LD_INT 4
32426: NEG
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 4
32434: NEG
32435: PUSH
32436: LD_INT 2
32438: NEG
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 0
32446: PUSH
32447: LD_INT 4
32449: NEG
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 0
32457: PUSH
32458: LD_INT 5
32460: NEG
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 1
32468: PUSH
32469: LD_INT 4
32471: NEG
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 1
32479: PUSH
32480: LD_INT 3
32482: NEG
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 0
32490: PUSH
32491: LD_INT 3
32493: NEG
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 1
32501: NEG
32502: PUSH
32503: LD_INT 4
32505: NEG
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 1
32513: NEG
32514: PUSH
32515: LD_INT 5
32517: NEG
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 2
32525: PUSH
32526: LD_INT 3
32528: NEG
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 2
32536: NEG
32537: PUSH
32538: LD_INT 5
32540: NEG
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32593: LD_ADDR_VAR 0 31
32597: PUSH
32598: LD_INT 0
32600: PUSH
32601: LD_INT 4
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 0
32610: PUSH
32611: LD_INT 3
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 1
32620: PUSH
32621: LD_INT 4
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 1
32630: PUSH
32631: LD_INT 5
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 0
32640: PUSH
32641: LD_INT 5
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 1
32650: NEG
32651: PUSH
32652: LD_INT 4
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 1
32661: NEG
32662: PUSH
32663: LD_INT 3
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 2
32672: PUSH
32673: LD_INT 5
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 2
32682: NEG
32683: PUSH
32684: LD_INT 3
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 3
32693: NEG
32694: PUSH
32695: LD_INT 0
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 3
32704: NEG
32705: PUSH
32706: LD_INT 1
32708: NEG
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 2
32716: NEG
32717: PUSH
32718: LD_INT 0
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 2
32727: NEG
32728: PUSH
32729: LD_INT 1
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 3
32738: NEG
32739: PUSH
32740: LD_INT 1
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 4
32749: NEG
32750: PUSH
32751: LD_INT 0
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 4
32760: NEG
32761: PUSH
32762: LD_INT 1
32764: NEG
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 4
32772: NEG
32773: PUSH
32774: LD_INT 2
32776: NEG
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 2
32784: NEG
32785: PUSH
32786: LD_INT 2
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 4
32795: NEG
32796: PUSH
32797: LD_INT 4
32799: NEG
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 4
32807: NEG
32808: PUSH
32809: LD_INT 5
32811: NEG
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 3
32819: NEG
32820: PUSH
32821: LD_INT 4
32823: NEG
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 3
32831: NEG
32832: PUSH
32833: LD_INT 3
32835: NEG
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 4
32843: NEG
32844: PUSH
32845: LD_INT 3
32847: NEG
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 5
32855: NEG
32856: PUSH
32857: LD_INT 4
32859: NEG
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 5
32867: NEG
32868: PUSH
32869: LD_INT 5
32871: NEG
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 3
32879: NEG
32880: PUSH
32881: LD_INT 5
32883: NEG
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 5
32891: NEG
32892: PUSH
32893: LD_INT 3
32895: NEG
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 0
32903: PUSH
32904: LD_INT 3
32906: NEG
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 0
32914: PUSH
32915: LD_INT 4
32917: NEG
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 1
32925: PUSH
32926: LD_INT 3
32928: NEG
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 1
32936: PUSH
32937: LD_INT 2
32939: NEG
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 0
32947: PUSH
32948: LD_INT 2
32950: NEG
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 1
32958: NEG
32959: PUSH
32960: LD_INT 3
32962: NEG
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 1
32970: NEG
32971: PUSH
32972: LD_INT 4
32974: NEG
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 2
32982: PUSH
32983: LD_INT 2
32985: NEG
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 2
32993: NEG
32994: PUSH
32995: LD_INT 4
32997: NEG
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 4
33005: PUSH
33006: LD_INT 0
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 4
33015: PUSH
33016: LD_INT 1
33018: NEG
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 5
33026: PUSH
33027: LD_INT 0
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 5
33036: PUSH
33037: LD_INT 1
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 4
33046: PUSH
33047: LD_INT 1
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 3
33056: PUSH
33057: LD_INT 0
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 3
33066: PUSH
33067: LD_INT 1
33069: NEG
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 3
33077: PUSH
33078: LD_INT 2
33080: NEG
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 5
33088: PUSH
33089: LD_INT 2
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33143: LD_ADDR_VAR 0 32
33147: PUSH
33148: LD_INT 4
33150: NEG
33151: PUSH
33152: LD_INT 0
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 4
33161: NEG
33162: PUSH
33163: LD_INT 1
33165: NEG
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 3
33173: NEG
33174: PUSH
33175: LD_INT 0
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 3
33184: NEG
33185: PUSH
33186: LD_INT 1
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 4
33195: NEG
33196: PUSH
33197: LD_INT 1
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 5
33206: NEG
33207: PUSH
33208: LD_INT 0
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 5
33217: NEG
33218: PUSH
33219: LD_INT 1
33221: NEG
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 5
33229: NEG
33230: PUSH
33231: LD_INT 2
33233: NEG
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 3
33241: NEG
33242: PUSH
33243: LD_INT 2
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 3
33252: NEG
33253: PUSH
33254: LD_INT 3
33256: NEG
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 3
33264: NEG
33265: PUSH
33266: LD_INT 4
33268: NEG
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 2
33276: NEG
33277: PUSH
33278: LD_INT 3
33280: NEG
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 2
33288: NEG
33289: PUSH
33290: LD_INT 2
33292: NEG
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 3
33300: NEG
33301: PUSH
33302: LD_INT 2
33304: NEG
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 4
33312: NEG
33313: PUSH
33314: LD_INT 3
33316: NEG
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 4
33324: NEG
33325: PUSH
33326: LD_INT 4
33328: NEG
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 2
33336: NEG
33337: PUSH
33338: LD_INT 4
33340: NEG
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 4
33348: NEG
33349: PUSH
33350: LD_INT 2
33352: NEG
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 0
33360: PUSH
33361: LD_INT 4
33363: NEG
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 0
33371: PUSH
33372: LD_INT 5
33374: NEG
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 1
33382: PUSH
33383: LD_INT 4
33385: NEG
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 1
33393: PUSH
33394: LD_INT 3
33396: NEG
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 0
33404: PUSH
33405: LD_INT 3
33407: NEG
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 1
33415: NEG
33416: PUSH
33417: LD_INT 4
33419: NEG
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 1
33427: NEG
33428: PUSH
33429: LD_INT 5
33431: NEG
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 2
33439: PUSH
33440: LD_INT 3
33442: NEG
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 2
33450: NEG
33451: PUSH
33452: LD_INT 5
33454: NEG
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 3
33462: PUSH
33463: LD_INT 0
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 3
33472: PUSH
33473: LD_INT 1
33475: NEG
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 4
33483: PUSH
33484: LD_INT 0
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 4
33493: PUSH
33494: LD_INT 1
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 3
33503: PUSH
33504: LD_INT 1
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 2
33513: PUSH
33514: LD_INT 0
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 2
33523: PUSH
33524: LD_INT 1
33526: NEG
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 2
33534: PUSH
33535: LD_INT 2
33537: NEG
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 4
33545: PUSH
33546: LD_INT 2
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 4
33555: PUSH
33556: LD_INT 4
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 4
33565: PUSH
33566: LD_INT 3
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 5
33575: PUSH
33576: LD_INT 4
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 5
33585: PUSH
33586: LD_INT 5
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 4
33595: PUSH
33596: LD_INT 5
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 3
33605: PUSH
33606: LD_INT 4
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 3
33615: PUSH
33616: LD_INT 3
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 5
33625: PUSH
33626: LD_INT 3
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 3
33635: PUSH
33636: LD_INT 5
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33690: LD_ADDR_VAR 0 33
33694: PUSH
33695: LD_INT 4
33697: NEG
33698: PUSH
33699: LD_INT 4
33701: NEG
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 4
33709: NEG
33710: PUSH
33711: LD_INT 5
33713: NEG
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 3
33721: NEG
33722: PUSH
33723: LD_INT 4
33725: NEG
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 3
33733: NEG
33734: PUSH
33735: LD_INT 3
33737: NEG
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 4
33745: NEG
33746: PUSH
33747: LD_INT 3
33749: NEG
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 5
33757: NEG
33758: PUSH
33759: LD_INT 4
33761: NEG
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 5
33769: NEG
33770: PUSH
33771: LD_INT 5
33773: NEG
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 3
33781: NEG
33782: PUSH
33783: LD_INT 5
33785: NEG
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 5
33793: NEG
33794: PUSH
33795: LD_INT 3
33797: NEG
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 0
33805: PUSH
33806: LD_INT 3
33808: NEG
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 0
33816: PUSH
33817: LD_INT 4
33819: NEG
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 1
33827: PUSH
33828: LD_INT 3
33830: NEG
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 1
33838: PUSH
33839: LD_INT 2
33841: NEG
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 0
33849: PUSH
33850: LD_INT 2
33852: NEG
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 1
33860: NEG
33861: PUSH
33862: LD_INT 3
33864: NEG
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 1
33872: NEG
33873: PUSH
33874: LD_INT 4
33876: NEG
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 2
33884: PUSH
33885: LD_INT 2
33887: NEG
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 2
33895: NEG
33896: PUSH
33897: LD_INT 4
33899: NEG
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 4
33907: PUSH
33908: LD_INT 0
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 4
33917: PUSH
33918: LD_INT 1
33920: NEG
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 5
33928: PUSH
33929: LD_INT 0
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 5
33938: PUSH
33939: LD_INT 1
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 4
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 3
33958: PUSH
33959: LD_INT 0
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 3
33968: PUSH
33969: LD_INT 1
33971: NEG
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 3
33979: PUSH
33980: LD_INT 2
33982: NEG
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 5
33990: PUSH
33991: LD_INT 2
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: LD_INT 3
34000: PUSH
34001: LD_INT 3
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 3
34010: PUSH
34011: LD_INT 2
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 4
34020: PUSH
34021: LD_INT 3
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 4
34030: PUSH
34031: LD_INT 4
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 3
34040: PUSH
34041: LD_INT 4
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 2
34050: PUSH
34051: LD_INT 3
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 2
34060: PUSH
34061: LD_INT 2
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 4
34070: PUSH
34071: LD_INT 2
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 2
34080: PUSH
34081: LD_INT 4
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 0
34090: PUSH
34091: LD_INT 4
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 0
34100: PUSH
34101: LD_INT 3
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 1
34110: PUSH
34111: LD_INT 4
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 1
34120: PUSH
34121: LD_INT 5
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 0
34130: PUSH
34131: LD_INT 5
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 1
34140: NEG
34141: PUSH
34142: LD_INT 4
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 1
34151: NEG
34152: PUSH
34153: LD_INT 3
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 2
34162: PUSH
34163: LD_INT 5
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 2
34172: NEG
34173: PUSH
34174: LD_INT 3
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34228: LD_ADDR_VAR 0 34
34232: PUSH
34233: LD_INT 0
34235: PUSH
34236: LD_INT 4
34238: NEG
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: LD_INT 5
34249: NEG
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 1
34257: PUSH
34258: LD_INT 4
34260: NEG
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 1
34268: PUSH
34269: LD_INT 3
34271: NEG
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 0
34279: PUSH
34280: LD_INT 3
34282: NEG
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 1
34290: NEG
34291: PUSH
34292: LD_INT 4
34294: NEG
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 1
34302: NEG
34303: PUSH
34304: LD_INT 5
34306: NEG
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 2
34314: PUSH
34315: LD_INT 3
34317: NEG
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 2
34325: NEG
34326: PUSH
34327: LD_INT 5
34329: NEG
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 3
34337: PUSH
34338: LD_INT 0
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 3
34347: PUSH
34348: LD_INT 1
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 4
34358: PUSH
34359: LD_INT 0
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 4
34368: PUSH
34369: LD_INT 1
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 3
34378: PUSH
34379: LD_INT 1
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 2
34388: PUSH
34389: LD_INT 0
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 2
34398: PUSH
34399: LD_INT 1
34401: NEG
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 2
34409: PUSH
34410: LD_INT 2
34412: NEG
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 4
34420: PUSH
34421: LD_INT 2
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 4
34430: PUSH
34431: LD_INT 4
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: LD_INT 4
34440: PUSH
34441: LD_INT 3
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 5
34450: PUSH
34451: LD_INT 4
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 5
34460: PUSH
34461: LD_INT 5
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 4
34470: PUSH
34471: LD_INT 5
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 3
34480: PUSH
34481: LD_INT 4
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 3
34490: PUSH
34491: LD_INT 3
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 5
34500: PUSH
34501: LD_INT 3
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 3
34510: PUSH
34511: LD_INT 5
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 0
34520: PUSH
34521: LD_INT 3
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 0
34530: PUSH
34531: LD_INT 2
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 1
34540: PUSH
34541: LD_INT 3
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: PUSH
34551: LD_INT 4
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 0
34560: PUSH
34561: LD_INT 4
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 1
34570: NEG
34571: PUSH
34572: LD_INT 3
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 1
34581: NEG
34582: PUSH
34583: LD_INT 2
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 2
34592: PUSH
34593: LD_INT 4
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 2
34602: NEG
34603: PUSH
34604: LD_INT 2
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 4
34613: NEG
34614: PUSH
34615: LD_INT 0
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 4
34624: NEG
34625: PUSH
34626: LD_INT 1
34628: NEG
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 3
34636: NEG
34637: PUSH
34638: LD_INT 0
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 3
34647: NEG
34648: PUSH
34649: LD_INT 1
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 4
34658: NEG
34659: PUSH
34660: LD_INT 1
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 5
34669: NEG
34670: PUSH
34671: LD_INT 0
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 5
34680: NEG
34681: PUSH
34682: LD_INT 1
34684: NEG
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 5
34692: NEG
34693: PUSH
34694: LD_INT 2
34696: NEG
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 3
34704: NEG
34705: PUSH
34706: LD_INT 2
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: ST_TO_ADDR
// end ; end ;
34760: GO 34763
34762: POP
// case btype of b_depot , b_warehouse :
34763: LD_VAR 0 1
34767: PUSH
34768: LD_INT 0
34770: DOUBLE
34771: EQUAL
34772: IFTRUE 34782
34774: LD_INT 1
34776: DOUBLE
34777: EQUAL
34778: IFTRUE 34782
34780: GO 34983
34782: POP
// case nation of nation_american :
34783: LD_VAR 0 5
34787: PUSH
34788: LD_INT 1
34790: DOUBLE
34791: EQUAL
34792: IFTRUE 34796
34794: GO 34852
34796: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34797: LD_ADDR_VAR 0 9
34801: PUSH
34802: LD_VAR 0 11
34806: PUSH
34807: LD_VAR 0 12
34811: PUSH
34812: LD_VAR 0 13
34816: PUSH
34817: LD_VAR 0 14
34821: PUSH
34822: LD_VAR 0 15
34826: PUSH
34827: LD_VAR 0 16
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: PUSH
34840: LD_VAR 0 4
34844: PUSH
34845: LD_INT 1
34847: PLUS
34848: ARRAY
34849: ST_TO_ADDR
34850: GO 34981
34852: LD_INT 2
34854: DOUBLE
34855: EQUAL
34856: IFTRUE 34860
34858: GO 34916
34860: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34861: LD_ADDR_VAR 0 9
34865: PUSH
34866: LD_VAR 0 17
34870: PUSH
34871: LD_VAR 0 18
34875: PUSH
34876: LD_VAR 0 19
34880: PUSH
34881: LD_VAR 0 20
34885: PUSH
34886: LD_VAR 0 21
34890: PUSH
34891: LD_VAR 0 22
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: PUSH
34904: LD_VAR 0 4
34908: PUSH
34909: LD_INT 1
34911: PLUS
34912: ARRAY
34913: ST_TO_ADDR
34914: GO 34981
34916: LD_INT 3
34918: DOUBLE
34919: EQUAL
34920: IFTRUE 34924
34922: GO 34980
34924: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34925: LD_ADDR_VAR 0 9
34929: PUSH
34930: LD_VAR 0 23
34934: PUSH
34935: LD_VAR 0 24
34939: PUSH
34940: LD_VAR 0 25
34944: PUSH
34945: LD_VAR 0 26
34949: PUSH
34950: LD_VAR 0 27
34954: PUSH
34955: LD_VAR 0 28
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: PUSH
34968: LD_VAR 0 4
34972: PUSH
34973: LD_INT 1
34975: PLUS
34976: ARRAY
34977: ST_TO_ADDR
34978: GO 34981
34980: POP
34981: GO 35536
34983: LD_INT 2
34985: DOUBLE
34986: EQUAL
34987: IFTRUE 34997
34989: LD_INT 3
34991: DOUBLE
34992: EQUAL
34993: IFTRUE 34997
34995: GO 35053
34997: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34998: LD_ADDR_VAR 0 9
35002: PUSH
35003: LD_VAR 0 29
35007: PUSH
35008: LD_VAR 0 30
35012: PUSH
35013: LD_VAR 0 31
35017: PUSH
35018: LD_VAR 0 32
35022: PUSH
35023: LD_VAR 0 33
35027: PUSH
35028: LD_VAR 0 34
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: PUSH
35041: LD_VAR 0 4
35045: PUSH
35046: LD_INT 1
35048: PLUS
35049: ARRAY
35050: ST_TO_ADDR
35051: GO 35536
35053: LD_INT 16
35055: DOUBLE
35056: EQUAL
35057: IFTRUE 35115
35059: LD_INT 17
35061: DOUBLE
35062: EQUAL
35063: IFTRUE 35115
35065: LD_INT 18
35067: DOUBLE
35068: EQUAL
35069: IFTRUE 35115
35071: LD_INT 19
35073: DOUBLE
35074: EQUAL
35075: IFTRUE 35115
35077: LD_INT 22
35079: DOUBLE
35080: EQUAL
35081: IFTRUE 35115
35083: LD_INT 20
35085: DOUBLE
35086: EQUAL
35087: IFTRUE 35115
35089: LD_INT 21
35091: DOUBLE
35092: EQUAL
35093: IFTRUE 35115
35095: LD_INT 23
35097: DOUBLE
35098: EQUAL
35099: IFTRUE 35115
35101: LD_INT 24
35103: DOUBLE
35104: EQUAL
35105: IFTRUE 35115
35107: LD_INT 25
35109: DOUBLE
35110: EQUAL
35111: IFTRUE 35115
35113: GO 35171
35115: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35116: LD_ADDR_VAR 0 9
35120: PUSH
35121: LD_VAR 0 35
35125: PUSH
35126: LD_VAR 0 36
35130: PUSH
35131: LD_VAR 0 37
35135: PUSH
35136: LD_VAR 0 38
35140: PUSH
35141: LD_VAR 0 39
35145: PUSH
35146: LD_VAR 0 40
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: PUSH
35159: LD_VAR 0 4
35163: PUSH
35164: LD_INT 1
35166: PLUS
35167: ARRAY
35168: ST_TO_ADDR
35169: GO 35536
35171: LD_INT 6
35173: DOUBLE
35174: EQUAL
35175: IFTRUE 35227
35177: LD_INT 7
35179: DOUBLE
35180: EQUAL
35181: IFTRUE 35227
35183: LD_INT 8
35185: DOUBLE
35186: EQUAL
35187: IFTRUE 35227
35189: LD_INT 13
35191: DOUBLE
35192: EQUAL
35193: IFTRUE 35227
35195: LD_INT 12
35197: DOUBLE
35198: EQUAL
35199: IFTRUE 35227
35201: LD_INT 15
35203: DOUBLE
35204: EQUAL
35205: IFTRUE 35227
35207: LD_INT 11
35209: DOUBLE
35210: EQUAL
35211: IFTRUE 35227
35213: LD_INT 14
35215: DOUBLE
35216: EQUAL
35217: IFTRUE 35227
35219: LD_INT 10
35221: DOUBLE
35222: EQUAL
35223: IFTRUE 35227
35225: GO 35283
35227: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35228: LD_ADDR_VAR 0 9
35232: PUSH
35233: LD_VAR 0 41
35237: PUSH
35238: LD_VAR 0 42
35242: PUSH
35243: LD_VAR 0 43
35247: PUSH
35248: LD_VAR 0 44
35252: PUSH
35253: LD_VAR 0 45
35257: PUSH
35258: LD_VAR 0 46
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: PUSH
35271: LD_VAR 0 4
35275: PUSH
35276: LD_INT 1
35278: PLUS
35279: ARRAY
35280: ST_TO_ADDR
35281: GO 35536
35283: LD_INT 36
35285: DOUBLE
35286: EQUAL
35287: IFTRUE 35291
35289: GO 35347
35291: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35292: LD_ADDR_VAR 0 9
35296: PUSH
35297: LD_VAR 0 47
35301: PUSH
35302: LD_VAR 0 48
35306: PUSH
35307: LD_VAR 0 49
35311: PUSH
35312: LD_VAR 0 50
35316: PUSH
35317: LD_VAR 0 51
35321: PUSH
35322: LD_VAR 0 52
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: PUSH
35335: LD_VAR 0 4
35339: PUSH
35340: LD_INT 1
35342: PLUS
35343: ARRAY
35344: ST_TO_ADDR
35345: GO 35536
35347: LD_INT 4
35349: DOUBLE
35350: EQUAL
35351: IFTRUE 35373
35353: LD_INT 5
35355: DOUBLE
35356: EQUAL
35357: IFTRUE 35373
35359: LD_INT 34
35361: DOUBLE
35362: EQUAL
35363: IFTRUE 35373
35365: LD_INT 37
35367: DOUBLE
35368: EQUAL
35369: IFTRUE 35373
35371: GO 35429
35373: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35374: LD_ADDR_VAR 0 9
35378: PUSH
35379: LD_VAR 0 53
35383: PUSH
35384: LD_VAR 0 54
35388: PUSH
35389: LD_VAR 0 55
35393: PUSH
35394: LD_VAR 0 56
35398: PUSH
35399: LD_VAR 0 57
35403: PUSH
35404: LD_VAR 0 58
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: PUSH
35417: LD_VAR 0 4
35421: PUSH
35422: LD_INT 1
35424: PLUS
35425: ARRAY
35426: ST_TO_ADDR
35427: GO 35536
35429: LD_INT 31
35431: DOUBLE
35432: EQUAL
35433: IFTRUE 35479
35435: LD_INT 32
35437: DOUBLE
35438: EQUAL
35439: IFTRUE 35479
35441: LD_INT 33
35443: DOUBLE
35444: EQUAL
35445: IFTRUE 35479
35447: LD_INT 27
35449: DOUBLE
35450: EQUAL
35451: IFTRUE 35479
35453: LD_INT 26
35455: DOUBLE
35456: EQUAL
35457: IFTRUE 35479
35459: LD_INT 28
35461: DOUBLE
35462: EQUAL
35463: IFTRUE 35479
35465: LD_INT 29
35467: DOUBLE
35468: EQUAL
35469: IFTRUE 35479
35471: LD_INT 30
35473: DOUBLE
35474: EQUAL
35475: IFTRUE 35479
35477: GO 35535
35479: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35480: LD_ADDR_VAR 0 9
35484: PUSH
35485: LD_VAR 0 59
35489: PUSH
35490: LD_VAR 0 60
35494: PUSH
35495: LD_VAR 0 61
35499: PUSH
35500: LD_VAR 0 62
35504: PUSH
35505: LD_VAR 0 63
35509: PUSH
35510: LD_VAR 0 64
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: PUSH
35523: LD_VAR 0 4
35527: PUSH
35528: LD_INT 1
35530: PLUS
35531: ARRAY
35532: ST_TO_ADDR
35533: GO 35536
35535: POP
// temp_list2 = [ ] ;
35536: LD_ADDR_VAR 0 10
35540: PUSH
35541: EMPTY
35542: ST_TO_ADDR
// for i in temp_list do
35543: LD_ADDR_VAR 0 8
35547: PUSH
35548: LD_VAR 0 9
35552: PUSH
35553: FOR_IN
35554: IFFALSE 35606
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35556: LD_ADDR_VAR 0 10
35560: PUSH
35561: LD_VAR 0 10
35565: PUSH
35566: LD_VAR 0 8
35570: PUSH
35571: LD_INT 1
35573: ARRAY
35574: PUSH
35575: LD_VAR 0 2
35579: PLUS
35580: PUSH
35581: LD_VAR 0 8
35585: PUSH
35586: LD_INT 2
35588: ARRAY
35589: PUSH
35590: LD_VAR 0 3
35594: PLUS
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: EMPTY
35601: LIST
35602: ADD
35603: ST_TO_ADDR
35604: GO 35553
35606: POP
35607: POP
// result = temp_list2 ;
35608: LD_ADDR_VAR 0 7
35612: PUSH
35613: LD_VAR 0 10
35617: ST_TO_ADDR
// end ;
35618: LD_VAR 0 7
35622: RET
// export function EnemyInRange ( unit , dist ) ; begin
35623: LD_INT 0
35625: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35626: LD_ADDR_VAR 0 3
35630: PUSH
35631: LD_VAR 0 1
35635: PPUSH
35636: CALL_OW 255
35640: PPUSH
35641: LD_VAR 0 1
35645: PPUSH
35646: CALL_OW 250
35650: PPUSH
35651: LD_VAR 0 1
35655: PPUSH
35656: CALL_OW 251
35660: PPUSH
35661: LD_VAR 0 2
35665: PPUSH
35666: CALL 8996 0 4
35670: PUSH
35671: LD_INT 4
35673: ARRAY
35674: ST_TO_ADDR
// end ;
35675: LD_VAR 0 3
35679: RET
// export function PlayerSeeMe ( unit ) ; begin
35680: LD_INT 0
35682: PPUSH
// result := See ( your_side , unit ) ;
35683: LD_ADDR_VAR 0 2
35687: PUSH
35688: LD_OWVAR 2
35692: PPUSH
35693: LD_VAR 0 1
35697: PPUSH
35698: CALL_OW 292
35702: ST_TO_ADDR
// end ;
35703: LD_VAR 0 2
35707: RET
// export function ReverseDir ( unit ) ; begin
35708: LD_INT 0
35710: PPUSH
// if not unit then
35711: LD_VAR 0 1
35715: NOT
35716: IFFALSE 35720
// exit ;
35718: GO 35743
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35720: LD_ADDR_VAR 0 2
35724: PUSH
35725: LD_VAR 0 1
35729: PPUSH
35730: CALL_OW 254
35734: PUSH
35735: LD_INT 3
35737: PLUS
35738: PUSH
35739: LD_INT 6
35741: MOD
35742: ST_TO_ADDR
// end ;
35743: LD_VAR 0 2
35747: RET
// export function ReverseArray ( array ) ; var i ; begin
35748: LD_INT 0
35750: PPUSH
35751: PPUSH
// if not array then
35752: LD_VAR 0 1
35756: NOT
35757: IFFALSE 35761
// exit ;
35759: GO 35816
// result := [ ] ;
35761: LD_ADDR_VAR 0 2
35765: PUSH
35766: EMPTY
35767: ST_TO_ADDR
// for i := array downto 1 do
35768: LD_ADDR_VAR 0 3
35772: PUSH
35773: DOUBLE
35774: LD_VAR 0 1
35778: INC
35779: ST_TO_ADDR
35780: LD_INT 1
35782: PUSH
35783: FOR_DOWNTO
35784: IFFALSE 35814
// result := Join ( result , array [ i ] ) ;
35786: LD_ADDR_VAR 0 2
35790: PUSH
35791: LD_VAR 0 2
35795: PPUSH
35796: LD_VAR 0 1
35800: PUSH
35801: LD_VAR 0 3
35805: ARRAY
35806: PPUSH
35807: CALL 40472 0 2
35811: ST_TO_ADDR
35812: GO 35783
35814: POP
35815: POP
// end ;
35816: LD_VAR 0 2
35820: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35821: LD_INT 0
35823: PPUSH
35824: PPUSH
35825: PPUSH
35826: PPUSH
35827: PPUSH
35828: PPUSH
// if not unit or not hexes then
35829: LD_VAR 0 1
35833: NOT
35834: PUSH
35835: LD_VAR 0 2
35839: NOT
35840: OR
35841: IFFALSE 35845
// exit ;
35843: GO 35968
// dist := 9999 ;
35845: LD_ADDR_VAR 0 5
35849: PUSH
35850: LD_INT 9999
35852: ST_TO_ADDR
// for i = 1 to hexes do
35853: LD_ADDR_VAR 0 4
35857: PUSH
35858: DOUBLE
35859: LD_INT 1
35861: DEC
35862: ST_TO_ADDR
35863: LD_VAR 0 2
35867: PUSH
35868: FOR_TO
35869: IFFALSE 35956
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35871: LD_ADDR_VAR 0 6
35875: PUSH
35876: LD_VAR 0 1
35880: PPUSH
35881: LD_VAR 0 2
35885: PUSH
35886: LD_VAR 0 4
35890: ARRAY
35891: PUSH
35892: LD_INT 1
35894: ARRAY
35895: PPUSH
35896: LD_VAR 0 2
35900: PUSH
35901: LD_VAR 0 4
35905: ARRAY
35906: PUSH
35907: LD_INT 2
35909: ARRAY
35910: PPUSH
35911: CALL_OW 297
35915: ST_TO_ADDR
// if tdist < dist then
35916: LD_VAR 0 6
35920: PUSH
35921: LD_VAR 0 5
35925: LESS
35926: IFFALSE 35954
// begin hex := hexes [ i ] ;
35928: LD_ADDR_VAR 0 8
35932: PUSH
35933: LD_VAR 0 2
35937: PUSH
35938: LD_VAR 0 4
35942: ARRAY
35943: ST_TO_ADDR
// dist := tdist ;
35944: LD_ADDR_VAR 0 5
35948: PUSH
35949: LD_VAR 0 6
35953: ST_TO_ADDR
// end ; end ;
35954: GO 35868
35956: POP
35957: POP
// result := hex ;
35958: LD_ADDR_VAR 0 3
35962: PUSH
35963: LD_VAR 0 8
35967: ST_TO_ADDR
// end ;
35968: LD_VAR 0 3
35972: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35973: LD_INT 0
35975: PPUSH
35976: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35977: LD_VAR 0 1
35981: NOT
35982: PUSH
35983: LD_VAR 0 1
35987: PUSH
35988: LD_INT 21
35990: PUSH
35991: LD_INT 2
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 23
36000: PUSH
36001: LD_INT 2
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PPUSH
36012: CALL_OW 69
36016: IN
36017: NOT
36018: OR
36019: IFFALSE 36023
// exit ;
36021: GO 36070
// for i = 1 to 3 do
36023: LD_ADDR_VAR 0 3
36027: PUSH
36028: DOUBLE
36029: LD_INT 1
36031: DEC
36032: ST_TO_ADDR
36033: LD_INT 3
36035: PUSH
36036: FOR_TO
36037: IFFALSE 36068
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36039: LD_VAR 0 1
36043: PPUSH
36044: CALL_OW 250
36048: PPUSH
36049: LD_VAR 0 1
36053: PPUSH
36054: CALL_OW 251
36058: PPUSH
36059: LD_INT 1
36061: PPUSH
36062: CALL_OW 453
36066: GO 36036
36068: POP
36069: POP
// end ;
36070: LD_VAR 0 2
36074: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36075: LD_INT 0
36077: PPUSH
36078: PPUSH
36079: PPUSH
36080: PPUSH
36081: PPUSH
36082: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
36083: LD_VAR 0 1
36087: NOT
36088: PUSH
36089: LD_VAR 0 2
36093: NOT
36094: OR
36095: PUSH
36096: LD_VAR 0 1
36100: PPUSH
36101: CALL_OW 314
36105: OR
36106: IFFALSE 36110
// exit ;
36108: GO 36577
// if GetLives ( i ) < 250 then
36110: LD_VAR 0 4
36114: PPUSH
36115: CALL_OW 256
36119: PUSH
36120: LD_INT 250
36122: LESS
36123: IFFALSE 36136
// begin ComAutodestruct ( i ) ;
36125: LD_VAR 0 4
36129: PPUSH
36130: CALL 35973 0 1
// exit ;
36134: GO 36577
// end ; x := GetX ( enemy_unit ) ;
36136: LD_ADDR_VAR 0 7
36140: PUSH
36141: LD_VAR 0 2
36145: PPUSH
36146: CALL_OW 250
36150: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36151: LD_ADDR_VAR 0 8
36155: PUSH
36156: LD_VAR 0 2
36160: PPUSH
36161: CALL_OW 251
36165: ST_TO_ADDR
// if not x or not y then
36166: LD_VAR 0 7
36170: NOT
36171: PUSH
36172: LD_VAR 0 8
36176: NOT
36177: OR
36178: IFFALSE 36182
// exit ;
36180: GO 36577
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36182: LD_ADDR_VAR 0 6
36186: PUSH
36187: LD_VAR 0 7
36191: PPUSH
36192: LD_INT 0
36194: PPUSH
36195: LD_INT 4
36197: PPUSH
36198: CALL_OW 272
36202: PUSH
36203: LD_VAR 0 8
36207: PPUSH
36208: LD_INT 0
36210: PPUSH
36211: LD_INT 4
36213: PPUSH
36214: CALL_OW 273
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_VAR 0 7
36227: PPUSH
36228: LD_INT 1
36230: PPUSH
36231: LD_INT 4
36233: PPUSH
36234: CALL_OW 272
36238: PUSH
36239: LD_VAR 0 8
36243: PPUSH
36244: LD_INT 1
36246: PPUSH
36247: LD_INT 4
36249: PPUSH
36250: CALL_OW 273
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_VAR 0 7
36263: PPUSH
36264: LD_INT 2
36266: PPUSH
36267: LD_INT 4
36269: PPUSH
36270: CALL_OW 272
36274: PUSH
36275: LD_VAR 0 8
36279: PPUSH
36280: LD_INT 2
36282: PPUSH
36283: LD_INT 4
36285: PPUSH
36286: CALL_OW 273
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_VAR 0 7
36299: PPUSH
36300: LD_INT 3
36302: PPUSH
36303: LD_INT 4
36305: PPUSH
36306: CALL_OW 272
36310: PUSH
36311: LD_VAR 0 8
36315: PPUSH
36316: LD_INT 3
36318: PPUSH
36319: LD_INT 4
36321: PPUSH
36322: CALL_OW 273
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_VAR 0 7
36335: PPUSH
36336: LD_INT 4
36338: PPUSH
36339: LD_INT 4
36341: PPUSH
36342: CALL_OW 272
36346: PUSH
36347: LD_VAR 0 8
36351: PPUSH
36352: LD_INT 4
36354: PPUSH
36355: LD_INT 4
36357: PPUSH
36358: CALL_OW 273
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_VAR 0 7
36371: PPUSH
36372: LD_INT 5
36374: PPUSH
36375: LD_INT 4
36377: PPUSH
36378: CALL_OW 272
36382: PUSH
36383: LD_VAR 0 8
36387: PPUSH
36388: LD_INT 5
36390: PPUSH
36391: LD_INT 4
36393: PPUSH
36394: CALL_OW 273
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: ST_TO_ADDR
// for i = tmp downto 1 do
36411: LD_ADDR_VAR 0 4
36415: PUSH
36416: DOUBLE
36417: LD_VAR 0 6
36421: INC
36422: ST_TO_ADDR
36423: LD_INT 1
36425: PUSH
36426: FOR_DOWNTO
36427: IFFALSE 36528
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36429: LD_VAR 0 6
36433: PUSH
36434: LD_VAR 0 4
36438: ARRAY
36439: PUSH
36440: LD_INT 1
36442: ARRAY
36443: PPUSH
36444: LD_VAR 0 6
36448: PUSH
36449: LD_VAR 0 4
36453: ARRAY
36454: PUSH
36455: LD_INT 2
36457: ARRAY
36458: PPUSH
36459: CALL_OW 488
36463: NOT
36464: PUSH
36465: LD_VAR 0 6
36469: PUSH
36470: LD_VAR 0 4
36474: ARRAY
36475: PUSH
36476: LD_INT 1
36478: ARRAY
36479: PPUSH
36480: LD_VAR 0 6
36484: PUSH
36485: LD_VAR 0 4
36489: ARRAY
36490: PUSH
36491: LD_INT 2
36493: ARRAY
36494: PPUSH
36495: CALL_OW 428
36499: PUSH
36500: LD_INT 0
36502: NONEQUAL
36503: OR
36504: IFFALSE 36526
// tmp := Delete ( tmp , i ) ;
36506: LD_ADDR_VAR 0 6
36510: PUSH
36511: LD_VAR 0 6
36515: PPUSH
36516: LD_VAR 0 4
36520: PPUSH
36521: CALL_OW 3
36525: ST_TO_ADDR
36526: GO 36426
36528: POP
36529: POP
// j := GetClosestHex ( unit , tmp ) ;
36530: LD_ADDR_VAR 0 5
36534: PUSH
36535: LD_VAR 0 1
36539: PPUSH
36540: LD_VAR 0 6
36544: PPUSH
36545: CALL 35821 0 2
36549: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36550: LD_VAR 0 1
36554: PPUSH
36555: LD_VAR 0 5
36559: PUSH
36560: LD_INT 1
36562: ARRAY
36563: PPUSH
36564: LD_VAR 0 5
36568: PUSH
36569: LD_INT 2
36571: ARRAY
36572: PPUSH
36573: CALL_OW 111
// end ;
36577: LD_VAR 0 3
36581: RET
// export function PrepareApemanSoldier ( ) ; begin
36582: LD_INT 0
36584: PPUSH
// uc_nation := 0 ;
36585: LD_ADDR_OWVAR 21
36589: PUSH
36590: LD_INT 0
36592: ST_TO_ADDR
// hc_sex := sex_male ;
36593: LD_ADDR_OWVAR 27
36597: PUSH
36598: LD_INT 1
36600: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36601: LD_ADDR_OWVAR 28
36605: PUSH
36606: LD_INT 15
36608: ST_TO_ADDR
// hc_gallery :=  ;
36609: LD_ADDR_OWVAR 33
36613: PUSH
36614: LD_STRING 
36616: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36617: LD_ADDR_OWVAR 31
36621: PUSH
36622: LD_INT 0
36624: PPUSH
36625: LD_INT 3
36627: PPUSH
36628: CALL_OW 12
36632: PUSH
36633: LD_INT 0
36635: PPUSH
36636: LD_INT 3
36638: PPUSH
36639: CALL_OW 12
36643: PUSH
36644: LD_INT 0
36646: PUSH
36647: LD_INT 0
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: ST_TO_ADDR
// end ;
36656: LD_VAR 0 1
36660: RET
// export function PrepareApemanEngineer ( ) ; begin
36661: LD_INT 0
36663: PPUSH
// uc_nation := 0 ;
36664: LD_ADDR_OWVAR 21
36668: PUSH
36669: LD_INT 0
36671: ST_TO_ADDR
// hc_sex := sex_male ;
36672: LD_ADDR_OWVAR 27
36676: PUSH
36677: LD_INT 1
36679: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36680: LD_ADDR_OWVAR 28
36684: PUSH
36685: LD_INT 16
36687: ST_TO_ADDR
// hc_gallery :=  ;
36688: LD_ADDR_OWVAR 33
36692: PUSH
36693: LD_STRING 
36695: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36696: LD_ADDR_OWVAR 31
36700: PUSH
36701: LD_INT 0
36703: PPUSH
36704: LD_INT 3
36706: PPUSH
36707: CALL_OW 12
36711: PUSH
36712: LD_INT 0
36714: PPUSH
36715: LD_INT 3
36717: PPUSH
36718: CALL_OW 12
36722: PUSH
36723: LD_INT 0
36725: PUSH
36726: LD_INT 0
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: ST_TO_ADDR
// end ;
36735: LD_VAR 0 1
36739: RET
// export function PrepareApeman ( agressivity ) ; begin
36740: LD_INT 0
36742: PPUSH
// uc_side := 0 ;
36743: LD_ADDR_OWVAR 20
36747: PUSH
36748: LD_INT 0
36750: ST_TO_ADDR
// uc_nation := 0 ;
36751: LD_ADDR_OWVAR 21
36755: PUSH
36756: LD_INT 0
36758: ST_TO_ADDR
// hc_sex := sex_male ;
36759: LD_ADDR_OWVAR 27
36763: PUSH
36764: LD_INT 1
36766: ST_TO_ADDR
// hc_class := class_apeman ;
36767: LD_ADDR_OWVAR 28
36771: PUSH
36772: LD_INT 12
36774: ST_TO_ADDR
// hc_gallery :=  ;
36775: LD_ADDR_OWVAR 33
36779: PUSH
36780: LD_STRING 
36782: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36783: LD_ADDR_OWVAR 35
36787: PUSH
36788: LD_VAR 0 1
36792: NEG
36793: PPUSH
36794: LD_VAR 0 1
36798: PPUSH
36799: CALL_OW 12
36803: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36804: LD_ADDR_OWVAR 31
36808: PUSH
36809: LD_INT 0
36811: PPUSH
36812: LD_INT 3
36814: PPUSH
36815: CALL_OW 12
36819: PUSH
36820: LD_INT 0
36822: PPUSH
36823: LD_INT 3
36825: PPUSH
36826: CALL_OW 12
36830: PUSH
36831: LD_INT 0
36833: PUSH
36834: LD_INT 0
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: ST_TO_ADDR
// end ;
36843: LD_VAR 0 2
36847: RET
// export function PrepareTiger ( agressivity ) ; begin
36848: LD_INT 0
36850: PPUSH
// uc_side := 0 ;
36851: LD_ADDR_OWVAR 20
36855: PUSH
36856: LD_INT 0
36858: ST_TO_ADDR
// uc_nation := 0 ;
36859: LD_ADDR_OWVAR 21
36863: PUSH
36864: LD_INT 0
36866: ST_TO_ADDR
// hc_class := class_tiger ;
36867: LD_ADDR_OWVAR 28
36871: PUSH
36872: LD_INT 14
36874: ST_TO_ADDR
// hc_gallery :=  ;
36875: LD_ADDR_OWVAR 33
36879: PUSH
36880: LD_STRING 
36882: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36883: LD_ADDR_OWVAR 35
36887: PUSH
36888: LD_VAR 0 1
36892: NEG
36893: PPUSH
36894: LD_VAR 0 1
36898: PPUSH
36899: CALL_OW 12
36903: ST_TO_ADDR
// end ;
36904: LD_VAR 0 2
36908: RET
// export function PrepareEnchidna ( ) ; begin
36909: LD_INT 0
36911: PPUSH
// uc_side := 0 ;
36912: LD_ADDR_OWVAR 20
36916: PUSH
36917: LD_INT 0
36919: ST_TO_ADDR
// uc_nation := 0 ;
36920: LD_ADDR_OWVAR 21
36924: PUSH
36925: LD_INT 0
36927: ST_TO_ADDR
// hc_class := class_baggie ;
36928: LD_ADDR_OWVAR 28
36932: PUSH
36933: LD_INT 13
36935: ST_TO_ADDR
// hc_gallery :=  ;
36936: LD_ADDR_OWVAR 33
36940: PUSH
36941: LD_STRING 
36943: ST_TO_ADDR
// end ;
36944: LD_VAR 0 1
36948: RET
// export function PrepareFrog ( ) ; begin
36949: LD_INT 0
36951: PPUSH
// uc_side := 0 ;
36952: LD_ADDR_OWVAR 20
36956: PUSH
36957: LD_INT 0
36959: ST_TO_ADDR
// uc_nation := 0 ;
36960: LD_ADDR_OWVAR 21
36964: PUSH
36965: LD_INT 0
36967: ST_TO_ADDR
// hc_class := class_frog ;
36968: LD_ADDR_OWVAR 28
36972: PUSH
36973: LD_INT 19
36975: ST_TO_ADDR
// hc_gallery :=  ;
36976: LD_ADDR_OWVAR 33
36980: PUSH
36981: LD_STRING 
36983: ST_TO_ADDR
// end ;
36984: LD_VAR 0 1
36988: RET
// export function PrepareFish ( ) ; begin
36989: LD_INT 0
36991: PPUSH
// uc_side := 0 ;
36992: LD_ADDR_OWVAR 20
36996: PUSH
36997: LD_INT 0
36999: ST_TO_ADDR
// uc_nation := 0 ;
37000: LD_ADDR_OWVAR 21
37004: PUSH
37005: LD_INT 0
37007: ST_TO_ADDR
// hc_class := class_fish ;
37008: LD_ADDR_OWVAR 28
37012: PUSH
37013: LD_INT 20
37015: ST_TO_ADDR
// hc_gallery :=  ;
37016: LD_ADDR_OWVAR 33
37020: PUSH
37021: LD_STRING 
37023: ST_TO_ADDR
// end ;
37024: LD_VAR 0 1
37028: RET
// export function PrepareBird ( ) ; begin
37029: LD_INT 0
37031: PPUSH
// uc_side := 0 ;
37032: LD_ADDR_OWVAR 20
37036: PUSH
37037: LD_INT 0
37039: ST_TO_ADDR
// uc_nation := 0 ;
37040: LD_ADDR_OWVAR 21
37044: PUSH
37045: LD_INT 0
37047: ST_TO_ADDR
// hc_class := class_phororhacos ;
37048: LD_ADDR_OWVAR 28
37052: PUSH
37053: LD_INT 18
37055: ST_TO_ADDR
// hc_gallery :=  ;
37056: LD_ADDR_OWVAR 33
37060: PUSH
37061: LD_STRING 
37063: ST_TO_ADDR
// end ;
37064: LD_VAR 0 1
37068: RET
// export function PrepareHorse ( ) ; begin
37069: LD_INT 0
37071: PPUSH
// uc_side := 0 ;
37072: LD_ADDR_OWVAR 20
37076: PUSH
37077: LD_INT 0
37079: ST_TO_ADDR
// uc_nation := 0 ;
37080: LD_ADDR_OWVAR 21
37084: PUSH
37085: LD_INT 0
37087: ST_TO_ADDR
// hc_class := class_horse ;
37088: LD_ADDR_OWVAR 28
37092: PUSH
37093: LD_INT 21
37095: ST_TO_ADDR
// hc_gallery :=  ;
37096: LD_ADDR_OWVAR 33
37100: PUSH
37101: LD_STRING 
37103: ST_TO_ADDR
// end ;
37104: LD_VAR 0 1
37108: RET
// export function PrepareMastodont ( ) ; begin
37109: LD_INT 0
37111: PPUSH
// uc_side := 0 ;
37112: LD_ADDR_OWVAR 20
37116: PUSH
37117: LD_INT 0
37119: ST_TO_ADDR
// uc_nation := 0 ;
37120: LD_ADDR_OWVAR 21
37124: PUSH
37125: LD_INT 0
37127: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37128: LD_ADDR_OWVAR 37
37132: PUSH
37133: LD_INT 31
37135: ST_TO_ADDR
// vc_control := control_rider ;
37136: LD_ADDR_OWVAR 38
37140: PUSH
37141: LD_INT 4
37143: ST_TO_ADDR
// end ;
37144: LD_VAR 0 1
37148: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37149: LD_INT 0
37151: PPUSH
37152: PPUSH
37153: PPUSH
// uc_side = 0 ;
37154: LD_ADDR_OWVAR 20
37158: PUSH
37159: LD_INT 0
37161: ST_TO_ADDR
// uc_nation = 0 ;
37162: LD_ADDR_OWVAR 21
37166: PUSH
37167: LD_INT 0
37169: ST_TO_ADDR
// InitHc_All ( ) ;
37170: CALL_OW 584
// InitVc ;
37174: CALL_OW 20
// if mastodonts then
37178: LD_VAR 0 6
37182: IFFALSE 37249
// for i = 1 to mastodonts do
37184: LD_ADDR_VAR 0 11
37188: PUSH
37189: DOUBLE
37190: LD_INT 1
37192: DEC
37193: ST_TO_ADDR
37194: LD_VAR 0 6
37198: PUSH
37199: FOR_TO
37200: IFFALSE 37247
// begin vc_chassis := 31 ;
37202: LD_ADDR_OWVAR 37
37206: PUSH
37207: LD_INT 31
37209: ST_TO_ADDR
// vc_control := control_rider ;
37210: LD_ADDR_OWVAR 38
37214: PUSH
37215: LD_INT 4
37217: ST_TO_ADDR
// animal := CreateVehicle ;
37218: LD_ADDR_VAR 0 12
37222: PUSH
37223: CALL_OW 45
37227: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37228: LD_VAR 0 12
37232: PPUSH
37233: LD_VAR 0 8
37237: PPUSH
37238: LD_INT 0
37240: PPUSH
37241: CALL 39377 0 3
// end ;
37245: GO 37199
37247: POP
37248: POP
// if horses then
37249: LD_VAR 0 5
37253: IFFALSE 37320
// for i = 1 to horses do
37255: LD_ADDR_VAR 0 11
37259: PUSH
37260: DOUBLE
37261: LD_INT 1
37263: DEC
37264: ST_TO_ADDR
37265: LD_VAR 0 5
37269: PUSH
37270: FOR_TO
37271: IFFALSE 37318
// begin hc_class := 21 ;
37273: LD_ADDR_OWVAR 28
37277: PUSH
37278: LD_INT 21
37280: ST_TO_ADDR
// hc_gallery :=  ;
37281: LD_ADDR_OWVAR 33
37285: PUSH
37286: LD_STRING 
37288: ST_TO_ADDR
// animal := CreateHuman ;
37289: LD_ADDR_VAR 0 12
37293: PUSH
37294: CALL_OW 44
37298: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37299: LD_VAR 0 12
37303: PPUSH
37304: LD_VAR 0 8
37308: PPUSH
37309: LD_INT 0
37311: PPUSH
37312: CALL 39377 0 3
// end ;
37316: GO 37270
37318: POP
37319: POP
// if birds then
37320: LD_VAR 0 1
37324: IFFALSE 37391
// for i = 1 to birds do
37326: LD_ADDR_VAR 0 11
37330: PUSH
37331: DOUBLE
37332: LD_INT 1
37334: DEC
37335: ST_TO_ADDR
37336: LD_VAR 0 1
37340: PUSH
37341: FOR_TO
37342: IFFALSE 37389
// begin hc_class := 18 ;
37344: LD_ADDR_OWVAR 28
37348: PUSH
37349: LD_INT 18
37351: ST_TO_ADDR
// hc_gallery =  ;
37352: LD_ADDR_OWVAR 33
37356: PUSH
37357: LD_STRING 
37359: ST_TO_ADDR
// animal := CreateHuman ;
37360: LD_ADDR_VAR 0 12
37364: PUSH
37365: CALL_OW 44
37369: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37370: LD_VAR 0 12
37374: PPUSH
37375: LD_VAR 0 8
37379: PPUSH
37380: LD_INT 0
37382: PPUSH
37383: CALL 39377 0 3
// end ;
37387: GO 37341
37389: POP
37390: POP
// if tigers then
37391: LD_VAR 0 2
37395: IFFALSE 37479
// for i = 1 to tigers do
37397: LD_ADDR_VAR 0 11
37401: PUSH
37402: DOUBLE
37403: LD_INT 1
37405: DEC
37406: ST_TO_ADDR
37407: LD_VAR 0 2
37411: PUSH
37412: FOR_TO
37413: IFFALSE 37477
// begin hc_class = class_tiger ;
37415: LD_ADDR_OWVAR 28
37419: PUSH
37420: LD_INT 14
37422: ST_TO_ADDR
// hc_gallery =  ;
37423: LD_ADDR_OWVAR 33
37427: PUSH
37428: LD_STRING 
37430: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37431: LD_ADDR_OWVAR 35
37435: PUSH
37436: LD_INT 7
37438: NEG
37439: PPUSH
37440: LD_INT 7
37442: PPUSH
37443: CALL_OW 12
37447: ST_TO_ADDR
// animal := CreateHuman ;
37448: LD_ADDR_VAR 0 12
37452: PUSH
37453: CALL_OW 44
37457: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37458: LD_VAR 0 12
37462: PPUSH
37463: LD_VAR 0 8
37467: PPUSH
37468: LD_INT 0
37470: PPUSH
37471: CALL 39377 0 3
// end ;
37475: GO 37412
37477: POP
37478: POP
// if apemans then
37479: LD_VAR 0 3
37483: IFFALSE 37606
// for i = 1 to apemans do
37485: LD_ADDR_VAR 0 11
37489: PUSH
37490: DOUBLE
37491: LD_INT 1
37493: DEC
37494: ST_TO_ADDR
37495: LD_VAR 0 3
37499: PUSH
37500: FOR_TO
37501: IFFALSE 37604
// begin hc_class = class_apeman ;
37503: LD_ADDR_OWVAR 28
37507: PUSH
37508: LD_INT 12
37510: ST_TO_ADDR
// hc_gallery =  ;
37511: LD_ADDR_OWVAR 33
37515: PUSH
37516: LD_STRING 
37518: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37519: LD_ADDR_OWVAR 35
37523: PUSH
37524: LD_INT 2
37526: NEG
37527: PPUSH
37528: LD_INT 2
37530: PPUSH
37531: CALL_OW 12
37535: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37536: LD_ADDR_OWVAR 31
37540: PUSH
37541: LD_INT 1
37543: PPUSH
37544: LD_INT 3
37546: PPUSH
37547: CALL_OW 12
37551: PUSH
37552: LD_INT 1
37554: PPUSH
37555: LD_INT 3
37557: PPUSH
37558: CALL_OW 12
37562: PUSH
37563: LD_INT 0
37565: PUSH
37566: LD_INT 0
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: ST_TO_ADDR
// animal := CreateHuman ;
37575: LD_ADDR_VAR 0 12
37579: PUSH
37580: CALL_OW 44
37584: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37585: LD_VAR 0 12
37589: PPUSH
37590: LD_VAR 0 8
37594: PPUSH
37595: LD_INT 0
37597: PPUSH
37598: CALL 39377 0 3
// end ;
37602: GO 37500
37604: POP
37605: POP
// if enchidnas then
37606: LD_VAR 0 4
37610: IFFALSE 37677
// for i = 1 to enchidnas do
37612: LD_ADDR_VAR 0 11
37616: PUSH
37617: DOUBLE
37618: LD_INT 1
37620: DEC
37621: ST_TO_ADDR
37622: LD_VAR 0 4
37626: PUSH
37627: FOR_TO
37628: IFFALSE 37675
// begin hc_class = 13 ;
37630: LD_ADDR_OWVAR 28
37634: PUSH
37635: LD_INT 13
37637: ST_TO_ADDR
// hc_gallery =  ;
37638: LD_ADDR_OWVAR 33
37642: PUSH
37643: LD_STRING 
37645: ST_TO_ADDR
// animal := CreateHuman ;
37646: LD_ADDR_VAR 0 12
37650: PUSH
37651: CALL_OW 44
37655: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37656: LD_VAR 0 12
37660: PPUSH
37661: LD_VAR 0 8
37665: PPUSH
37666: LD_INT 0
37668: PPUSH
37669: CALL 39377 0 3
// end ;
37673: GO 37627
37675: POP
37676: POP
// if fishes then
37677: LD_VAR 0 7
37681: IFFALSE 37748
// for i = 1 to fishes do
37683: LD_ADDR_VAR 0 11
37687: PUSH
37688: DOUBLE
37689: LD_INT 1
37691: DEC
37692: ST_TO_ADDR
37693: LD_VAR 0 7
37697: PUSH
37698: FOR_TO
37699: IFFALSE 37746
// begin hc_class = 20 ;
37701: LD_ADDR_OWVAR 28
37705: PUSH
37706: LD_INT 20
37708: ST_TO_ADDR
// hc_gallery =  ;
37709: LD_ADDR_OWVAR 33
37713: PUSH
37714: LD_STRING 
37716: ST_TO_ADDR
// animal := CreateHuman ;
37717: LD_ADDR_VAR 0 12
37721: PUSH
37722: CALL_OW 44
37726: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37727: LD_VAR 0 12
37731: PPUSH
37732: LD_VAR 0 9
37736: PPUSH
37737: LD_INT 0
37739: PPUSH
37740: CALL 39377 0 3
// end ;
37744: GO 37698
37746: POP
37747: POP
// end ;
37748: LD_VAR 0 10
37752: RET
// export function WantHeal ( sci , unit ) ; begin
37753: LD_INT 0
37755: PPUSH
// if GetTaskList ( sci ) > 0 then
37756: LD_VAR 0 1
37760: PPUSH
37761: CALL_OW 437
37765: PUSH
37766: LD_INT 0
37768: GREATER
37769: IFFALSE 37839
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37771: LD_VAR 0 1
37775: PPUSH
37776: CALL_OW 437
37780: PUSH
37781: LD_INT 1
37783: ARRAY
37784: PUSH
37785: LD_INT 1
37787: ARRAY
37788: PUSH
37789: LD_STRING l
37791: EQUAL
37792: PUSH
37793: LD_VAR 0 1
37797: PPUSH
37798: CALL_OW 437
37802: PUSH
37803: LD_INT 1
37805: ARRAY
37806: PUSH
37807: LD_INT 4
37809: ARRAY
37810: PUSH
37811: LD_VAR 0 2
37815: EQUAL
37816: AND
37817: IFFALSE 37829
// result := true else
37819: LD_ADDR_VAR 0 3
37823: PUSH
37824: LD_INT 1
37826: ST_TO_ADDR
37827: GO 37837
// result := false ;
37829: LD_ADDR_VAR 0 3
37833: PUSH
37834: LD_INT 0
37836: ST_TO_ADDR
// end else
37837: GO 37847
// result := false ;
37839: LD_ADDR_VAR 0 3
37843: PUSH
37844: LD_INT 0
37846: ST_TO_ADDR
// end ;
37847: LD_VAR 0 3
37851: RET
// export function HealTarget ( sci ) ; begin
37852: LD_INT 0
37854: PPUSH
// if not sci then
37855: LD_VAR 0 1
37859: NOT
37860: IFFALSE 37864
// exit ;
37862: GO 37929
// result := 0 ;
37864: LD_ADDR_VAR 0 2
37868: PUSH
37869: LD_INT 0
37871: ST_TO_ADDR
// if GetTaskList ( sci ) then
37872: LD_VAR 0 1
37876: PPUSH
37877: CALL_OW 437
37881: IFFALSE 37929
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37883: LD_VAR 0 1
37887: PPUSH
37888: CALL_OW 437
37892: PUSH
37893: LD_INT 1
37895: ARRAY
37896: PUSH
37897: LD_INT 1
37899: ARRAY
37900: PUSH
37901: LD_STRING l
37903: EQUAL
37904: IFFALSE 37929
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37906: LD_ADDR_VAR 0 2
37910: PUSH
37911: LD_VAR 0 1
37915: PPUSH
37916: CALL_OW 437
37920: PUSH
37921: LD_INT 1
37923: ARRAY
37924: PUSH
37925: LD_INT 4
37927: ARRAY
37928: ST_TO_ADDR
// end ;
37929: LD_VAR 0 2
37933: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37934: LD_INT 0
37936: PPUSH
37937: PPUSH
37938: PPUSH
37939: PPUSH
// if not base_units then
37940: LD_VAR 0 1
37944: NOT
37945: IFFALSE 37949
// exit ;
37947: GO 38036
// result := false ;
37949: LD_ADDR_VAR 0 2
37953: PUSH
37954: LD_INT 0
37956: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37957: LD_ADDR_VAR 0 5
37961: PUSH
37962: LD_VAR 0 1
37966: PPUSH
37967: LD_INT 21
37969: PUSH
37970: LD_INT 3
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PPUSH
37977: CALL_OW 72
37981: ST_TO_ADDR
// if not tmp then
37982: LD_VAR 0 5
37986: NOT
37987: IFFALSE 37991
// exit ;
37989: GO 38036
// for i in tmp do
37991: LD_ADDR_VAR 0 3
37995: PUSH
37996: LD_VAR 0 5
38000: PUSH
38001: FOR_IN
38002: IFFALSE 38034
// begin result := EnemyInRange ( i , 22 ) ;
38004: LD_ADDR_VAR 0 2
38008: PUSH
38009: LD_VAR 0 3
38013: PPUSH
38014: LD_INT 22
38016: PPUSH
38017: CALL 35623 0 2
38021: ST_TO_ADDR
// if result then
38022: LD_VAR 0 2
38026: IFFALSE 38032
// exit ;
38028: POP
38029: POP
38030: GO 38036
// end ;
38032: GO 38001
38034: POP
38035: POP
// end ;
38036: LD_VAR 0 2
38040: RET
// export function FilterByTag ( units , tag ) ; begin
38041: LD_INT 0
38043: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38044: LD_ADDR_VAR 0 3
38048: PUSH
38049: LD_VAR 0 1
38053: PPUSH
38054: LD_INT 120
38056: PUSH
38057: LD_VAR 0 2
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PPUSH
38066: CALL_OW 72
38070: ST_TO_ADDR
// end ;
38071: LD_VAR 0 3
38075: RET
// export function IsDriver ( un ) ; begin
38076: LD_INT 0
38078: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38079: LD_ADDR_VAR 0 2
38083: PUSH
38084: LD_VAR 0 1
38088: PUSH
38089: LD_INT 55
38091: PUSH
38092: EMPTY
38093: LIST
38094: PPUSH
38095: CALL_OW 69
38099: IN
38100: ST_TO_ADDR
// end ;
38101: LD_VAR 0 2
38105: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38106: LD_INT 0
38108: PPUSH
38109: PPUSH
// list := [ ] ;
38110: LD_ADDR_VAR 0 5
38114: PUSH
38115: EMPTY
38116: ST_TO_ADDR
// case d of 0 :
38117: LD_VAR 0 3
38121: PUSH
38122: LD_INT 0
38124: DOUBLE
38125: EQUAL
38126: IFTRUE 38130
38128: GO 38263
38130: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38131: LD_ADDR_VAR 0 5
38135: PUSH
38136: LD_VAR 0 1
38140: PUSH
38141: LD_INT 4
38143: MINUS
38144: PUSH
38145: LD_VAR 0 2
38149: PUSH
38150: LD_INT 4
38152: MINUS
38153: PUSH
38154: LD_INT 2
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: LIST
38161: PUSH
38162: LD_VAR 0 1
38166: PUSH
38167: LD_INT 3
38169: MINUS
38170: PUSH
38171: LD_VAR 0 2
38175: PUSH
38176: LD_INT 1
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: LIST
38183: PUSH
38184: LD_VAR 0 1
38188: PUSH
38189: LD_INT 4
38191: PLUS
38192: PUSH
38193: LD_VAR 0 2
38197: PUSH
38198: LD_INT 4
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: LIST
38205: PUSH
38206: LD_VAR 0 1
38210: PUSH
38211: LD_INT 3
38213: PLUS
38214: PUSH
38215: LD_VAR 0 2
38219: PUSH
38220: LD_INT 3
38222: PLUS
38223: PUSH
38224: LD_INT 5
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: LIST
38231: PUSH
38232: LD_VAR 0 1
38236: PUSH
38237: LD_VAR 0 2
38241: PUSH
38242: LD_INT 4
38244: PLUS
38245: PUSH
38246: LD_INT 0
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: LIST
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: ST_TO_ADDR
// end ; 1 :
38261: GO 38961
38263: LD_INT 1
38265: DOUBLE
38266: EQUAL
38267: IFTRUE 38271
38269: GO 38404
38271: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38272: LD_ADDR_VAR 0 5
38276: PUSH
38277: LD_VAR 0 1
38281: PUSH
38282: LD_VAR 0 2
38286: PUSH
38287: LD_INT 4
38289: MINUS
38290: PUSH
38291: LD_INT 3
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: LIST
38298: PUSH
38299: LD_VAR 0 1
38303: PUSH
38304: LD_INT 3
38306: MINUS
38307: PUSH
38308: LD_VAR 0 2
38312: PUSH
38313: LD_INT 3
38315: MINUS
38316: PUSH
38317: LD_INT 2
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: LIST
38324: PUSH
38325: LD_VAR 0 1
38329: PUSH
38330: LD_INT 4
38332: MINUS
38333: PUSH
38334: LD_VAR 0 2
38338: PUSH
38339: LD_INT 1
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: LIST
38346: PUSH
38347: LD_VAR 0 1
38351: PUSH
38352: LD_VAR 0 2
38356: PUSH
38357: LD_INT 3
38359: PLUS
38360: PUSH
38361: LD_INT 0
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: LIST
38368: PUSH
38369: LD_VAR 0 1
38373: PUSH
38374: LD_INT 4
38376: PLUS
38377: PUSH
38378: LD_VAR 0 2
38382: PUSH
38383: LD_INT 4
38385: PLUS
38386: PUSH
38387: LD_INT 5
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: LIST
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: ST_TO_ADDR
// end ; 2 :
38402: GO 38961
38404: LD_INT 2
38406: DOUBLE
38407: EQUAL
38408: IFTRUE 38412
38410: GO 38541
38412: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38413: LD_ADDR_VAR 0 5
38417: PUSH
38418: LD_VAR 0 1
38422: PUSH
38423: LD_VAR 0 2
38427: PUSH
38428: LD_INT 3
38430: MINUS
38431: PUSH
38432: LD_INT 3
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: LIST
38439: PUSH
38440: LD_VAR 0 1
38444: PUSH
38445: LD_INT 4
38447: PLUS
38448: PUSH
38449: LD_VAR 0 2
38453: PUSH
38454: LD_INT 4
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: LIST
38461: PUSH
38462: LD_VAR 0 1
38466: PUSH
38467: LD_VAR 0 2
38471: PUSH
38472: LD_INT 4
38474: PLUS
38475: PUSH
38476: LD_INT 0
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: LIST
38483: PUSH
38484: LD_VAR 0 1
38488: PUSH
38489: LD_INT 3
38491: MINUS
38492: PUSH
38493: LD_VAR 0 2
38497: PUSH
38498: LD_INT 1
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: LIST
38505: PUSH
38506: LD_VAR 0 1
38510: PUSH
38511: LD_INT 4
38513: MINUS
38514: PUSH
38515: LD_VAR 0 2
38519: PUSH
38520: LD_INT 4
38522: MINUS
38523: PUSH
38524: LD_INT 2
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: LIST
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: ST_TO_ADDR
// end ; 3 :
38539: GO 38961
38541: LD_INT 3
38543: DOUBLE
38544: EQUAL
38545: IFTRUE 38549
38547: GO 38682
38549: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38550: LD_ADDR_VAR 0 5
38554: PUSH
38555: LD_VAR 0 1
38559: PUSH
38560: LD_INT 3
38562: PLUS
38563: PUSH
38564: LD_VAR 0 2
38568: PUSH
38569: LD_INT 4
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: LIST
38576: PUSH
38577: LD_VAR 0 1
38581: PUSH
38582: LD_INT 4
38584: PLUS
38585: PUSH
38586: LD_VAR 0 2
38590: PUSH
38591: LD_INT 4
38593: PLUS
38594: PUSH
38595: LD_INT 5
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: LIST
38602: PUSH
38603: LD_VAR 0 1
38607: PUSH
38608: LD_INT 4
38610: MINUS
38611: PUSH
38612: LD_VAR 0 2
38616: PUSH
38617: LD_INT 1
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: LIST
38624: PUSH
38625: LD_VAR 0 1
38629: PUSH
38630: LD_VAR 0 2
38634: PUSH
38635: LD_INT 4
38637: MINUS
38638: PUSH
38639: LD_INT 3
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: LIST
38646: PUSH
38647: LD_VAR 0 1
38651: PUSH
38652: LD_INT 3
38654: MINUS
38655: PUSH
38656: LD_VAR 0 2
38660: PUSH
38661: LD_INT 3
38663: MINUS
38664: PUSH
38665: LD_INT 2
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: LIST
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: ST_TO_ADDR
// end ; 4 :
38680: GO 38961
38682: LD_INT 4
38684: DOUBLE
38685: EQUAL
38686: IFTRUE 38690
38688: GO 38823
38690: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38691: LD_ADDR_VAR 0 5
38695: PUSH
38696: LD_VAR 0 1
38700: PUSH
38701: LD_VAR 0 2
38705: PUSH
38706: LD_INT 4
38708: PLUS
38709: PUSH
38710: LD_INT 0
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: LIST
38717: PUSH
38718: LD_VAR 0 1
38722: PUSH
38723: LD_INT 3
38725: PLUS
38726: PUSH
38727: LD_VAR 0 2
38731: PUSH
38732: LD_INT 3
38734: PLUS
38735: PUSH
38736: LD_INT 5
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: LIST
38743: PUSH
38744: LD_VAR 0 1
38748: PUSH
38749: LD_INT 4
38751: PLUS
38752: PUSH
38753: LD_VAR 0 2
38757: PUSH
38758: LD_INT 4
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: LIST
38765: PUSH
38766: LD_VAR 0 1
38770: PUSH
38771: LD_VAR 0 2
38775: PUSH
38776: LD_INT 3
38778: MINUS
38779: PUSH
38780: LD_INT 3
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: LIST
38787: PUSH
38788: LD_VAR 0 1
38792: PUSH
38793: LD_INT 4
38795: MINUS
38796: PUSH
38797: LD_VAR 0 2
38801: PUSH
38802: LD_INT 4
38804: MINUS
38805: PUSH
38806: LD_INT 2
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: LIST
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: ST_TO_ADDR
// end ; 5 :
38821: GO 38961
38823: LD_INT 5
38825: DOUBLE
38826: EQUAL
38827: IFTRUE 38831
38829: GO 38960
38831: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38832: LD_ADDR_VAR 0 5
38836: PUSH
38837: LD_VAR 0 1
38841: PUSH
38842: LD_INT 4
38844: MINUS
38845: PUSH
38846: LD_VAR 0 2
38850: PUSH
38851: LD_INT 1
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: LIST
38858: PUSH
38859: LD_VAR 0 1
38863: PUSH
38864: LD_VAR 0 2
38868: PUSH
38869: LD_INT 4
38871: MINUS
38872: PUSH
38873: LD_INT 3
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: LIST
38880: PUSH
38881: LD_VAR 0 1
38885: PUSH
38886: LD_INT 4
38888: PLUS
38889: PUSH
38890: LD_VAR 0 2
38894: PUSH
38895: LD_INT 4
38897: PLUS
38898: PUSH
38899: LD_INT 5
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: LIST
38906: PUSH
38907: LD_VAR 0 1
38911: PUSH
38912: LD_INT 3
38914: PLUS
38915: PUSH
38916: LD_VAR 0 2
38920: PUSH
38921: LD_INT 4
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: LIST
38928: PUSH
38929: LD_VAR 0 1
38933: PUSH
38934: LD_VAR 0 2
38938: PUSH
38939: LD_INT 3
38941: PLUS
38942: PUSH
38943: LD_INT 0
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: LIST
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: ST_TO_ADDR
// end ; end ;
38958: GO 38961
38960: POP
// result := list ;
38961: LD_ADDR_VAR 0 4
38965: PUSH
38966: LD_VAR 0 5
38970: ST_TO_ADDR
// end ;
38971: LD_VAR 0 4
38975: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38976: LD_INT 0
38978: PPUSH
38979: PPUSH
38980: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38981: LD_VAR 0 1
38985: NOT
38986: PUSH
38987: LD_VAR 0 2
38991: PUSH
38992: LD_INT 1
38994: PUSH
38995: LD_INT 2
38997: PUSH
38998: LD_INT 3
39000: PUSH
39001: LD_INT 4
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: IN
39010: NOT
39011: OR
39012: IFFALSE 39016
// exit ;
39014: GO 39099
// tmp := [ ] ;
39016: LD_ADDR_VAR 0 5
39020: PUSH
39021: EMPTY
39022: ST_TO_ADDR
// for i in units do
39023: LD_ADDR_VAR 0 4
39027: PUSH
39028: LD_VAR 0 1
39032: PUSH
39033: FOR_IN
39034: IFFALSE 39068
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39036: LD_ADDR_VAR 0 5
39040: PUSH
39041: LD_VAR 0 5
39045: PPUSH
39046: LD_VAR 0 4
39050: PPUSH
39051: LD_VAR 0 2
39055: PPUSH
39056: CALL_OW 259
39060: PPUSH
39061: CALL 40472 0 2
39065: ST_TO_ADDR
39066: GO 39033
39068: POP
39069: POP
// if not tmp then
39070: LD_VAR 0 5
39074: NOT
39075: IFFALSE 39079
// exit ;
39077: GO 39099
// result := SortListByListDesc ( units , tmp ) ;
39079: LD_ADDR_VAR 0 3
39083: PUSH
39084: LD_VAR 0 1
39088: PPUSH
39089: LD_VAR 0 5
39093: PPUSH
39094: CALL_OW 77
39098: ST_TO_ADDR
// end ;
39099: LD_VAR 0 3
39103: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39104: LD_INT 0
39106: PPUSH
39107: PPUSH
39108: PPUSH
// result := false ;
39109: LD_ADDR_VAR 0 3
39113: PUSH
39114: LD_INT 0
39116: ST_TO_ADDR
// if not building then
39117: LD_VAR 0 2
39121: NOT
39122: IFFALSE 39126
// exit ;
39124: GO 39264
// x := GetX ( building ) ;
39126: LD_ADDR_VAR 0 4
39130: PUSH
39131: LD_VAR 0 2
39135: PPUSH
39136: CALL_OW 250
39140: ST_TO_ADDR
// y := GetY ( building ) ;
39141: LD_ADDR_VAR 0 5
39145: PUSH
39146: LD_VAR 0 2
39150: PPUSH
39151: CALL_OW 251
39155: ST_TO_ADDR
// if not x or not y then
39156: LD_VAR 0 4
39160: NOT
39161: PUSH
39162: LD_VAR 0 5
39166: NOT
39167: OR
39168: IFFALSE 39172
// exit ;
39170: GO 39264
// if GetTaskList ( unit ) then
39172: LD_VAR 0 1
39176: PPUSH
39177: CALL_OW 437
39181: IFFALSE 39264
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39183: LD_STRING e
39185: PUSH
39186: LD_VAR 0 1
39190: PPUSH
39191: CALL_OW 437
39195: PUSH
39196: LD_INT 1
39198: ARRAY
39199: PUSH
39200: LD_INT 1
39202: ARRAY
39203: EQUAL
39204: PUSH
39205: LD_VAR 0 4
39209: PUSH
39210: LD_VAR 0 1
39214: PPUSH
39215: CALL_OW 437
39219: PUSH
39220: LD_INT 1
39222: ARRAY
39223: PUSH
39224: LD_INT 2
39226: ARRAY
39227: EQUAL
39228: AND
39229: PUSH
39230: LD_VAR 0 5
39234: PUSH
39235: LD_VAR 0 1
39239: PPUSH
39240: CALL_OW 437
39244: PUSH
39245: LD_INT 1
39247: ARRAY
39248: PUSH
39249: LD_INT 3
39251: ARRAY
39252: EQUAL
39253: AND
39254: IFFALSE 39264
// result := true end ;
39256: LD_ADDR_VAR 0 3
39260: PUSH
39261: LD_INT 1
39263: ST_TO_ADDR
// end ;
39264: LD_VAR 0 3
39268: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39269: LD_INT 0
39271: PPUSH
// result := false ;
39272: LD_ADDR_VAR 0 4
39276: PUSH
39277: LD_INT 0
39279: ST_TO_ADDR
// if GetTaskList ( unit ) then
39280: LD_VAR 0 1
39284: PPUSH
39285: CALL_OW 437
39289: IFFALSE 39372
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39291: LD_STRING M
39293: PUSH
39294: LD_VAR 0 1
39298: PPUSH
39299: CALL_OW 437
39303: PUSH
39304: LD_INT 1
39306: ARRAY
39307: PUSH
39308: LD_INT 1
39310: ARRAY
39311: EQUAL
39312: PUSH
39313: LD_VAR 0 2
39317: PUSH
39318: LD_VAR 0 1
39322: PPUSH
39323: CALL_OW 437
39327: PUSH
39328: LD_INT 1
39330: ARRAY
39331: PUSH
39332: LD_INT 2
39334: ARRAY
39335: EQUAL
39336: AND
39337: PUSH
39338: LD_VAR 0 3
39342: PUSH
39343: LD_VAR 0 1
39347: PPUSH
39348: CALL_OW 437
39352: PUSH
39353: LD_INT 1
39355: ARRAY
39356: PUSH
39357: LD_INT 3
39359: ARRAY
39360: EQUAL
39361: AND
39362: IFFALSE 39372
// result := true ;
39364: LD_ADDR_VAR 0 4
39368: PUSH
39369: LD_INT 1
39371: ST_TO_ADDR
// end ; end ;
39372: LD_VAR 0 4
39376: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39377: LD_INT 0
39379: PPUSH
39380: PPUSH
39381: PPUSH
39382: PPUSH
// if not unit or not area then
39383: LD_VAR 0 1
39387: NOT
39388: PUSH
39389: LD_VAR 0 2
39393: NOT
39394: OR
39395: IFFALSE 39399
// exit ;
39397: GO 39575
// tmp := AreaToList ( area , i ) ;
39399: LD_ADDR_VAR 0 6
39403: PUSH
39404: LD_VAR 0 2
39408: PPUSH
39409: LD_VAR 0 5
39413: PPUSH
39414: CALL_OW 517
39418: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39419: LD_ADDR_VAR 0 5
39423: PUSH
39424: DOUBLE
39425: LD_INT 1
39427: DEC
39428: ST_TO_ADDR
39429: LD_VAR 0 6
39433: PUSH
39434: LD_INT 1
39436: ARRAY
39437: PUSH
39438: FOR_TO
39439: IFFALSE 39573
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39441: LD_ADDR_VAR 0 7
39445: PUSH
39446: LD_VAR 0 6
39450: PUSH
39451: LD_INT 1
39453: ARRAY
39454: PUSH
39455: LD_VAR 0 5
39459: ARRAY
39460: PUSH
39461: LD_VAR 0 6
39465: PUSH
39466: LD_INT 2
39468: ARRAY
39469: PUSH
39470: LD_VAR 0 5
39474: ARRAY
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39480: LD_INT 92
39482: PUSH
39483: LD_VAR 0 7
39487: PUSH
39488: LD_INT 1
39490: ARRAY
39491: PUSH
39492: LD_VAR 0 7
39496: PUSH
39497: LD_INT 2
39499: ARRAY
39500: PUSH
39501: LD_INT 2
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: PPUSH
39510: CALL_OW 69
39514: PUSH
39515: LD_INT 0
39517: EQUAL
39518: IFFALSE 39571
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39520: LD_VAR 0 1
39524: PPUSH
39525: LD_VAR 0 7
39529: PUSH
39530: LD_INT 1
39532: ARRAY
39533: PPUSH
39534: LD_VAR 0 7
39538: PUSH
39539: LD_INT 2
39541: ARRAY
39542: PPUSH
39543: LD_VAR 0 3
39547: PPUSH
39548: CALL_OW 48
// result := IsPlaced ( unit ) ;
39552: LD_ADDR_VAR 0 4
39556: PUSH
39557: LD_VAR 0 1
39561: PPUSH
39562: CALL_OW 305
39566: ST_TO_ADDR
// exit ;
39567: POP
39568: POP
39569: GO 39575
// end ; end ;
39571: GO 39438
39573: POP
39574: POP
// end ;
39575: LD_VAR 0 4
39579: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39580: LD_INT 0
39582: PPUSH
39583: PPUSH
39584: PPUSH
// if not side or side > 8 then
39585: LD_VAR 0 1
39589: NOT
39590: PUSH
39591: LD_VAR 0 1
39595: PUSH
39596: LD_INT 8
39598: GREATER
39599: OR
39600: IFFALSE 39604
// exit ;
39602: GO 39791
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39604: LD_ADDR_VAR 0 4
39608: PUSH
39609: LD_INT 22
39611: PUSH
39612: LD_VAR 0 1
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 21
39623: PUSH
39624: LD_INT 3
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PPUSH
39635: CALL_OW 69
39639: ST_TO_ADDR
// if not tmp then
39640: LD_VAR 0 4
39644: NOT
39645: IFFALSE 39649
// exit ;
39647: GO 39791
// enable_addtolog := true ;
39649: LD_ADDR_OWVAR 81
39653: PUSH
39654: LD_INT 1
39656: ST_TO_ADDR
// AddToLog ( [ ) ;
39657: LD_STRING [
39659: PPUSH
39660: CALL_OW 561
// for i in tmp do
39664: LD_ADDR_VAR 0 3
39668: PUSH
39669: LD_VAR 0 4
39673: PUSH
39674: FOR_IN
39675: IFFALSE 39782
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39677: LD_STRING [
39679: PUSH
39680: LD_VAR 0 3
39684: PPUSH
39685: CALL_OW 266
39689: STR
39690: PUSH
39691: LD_STRING , 
39693: STR
39694: PUSH
39695: LD_VAR 0 3
39699: PPUSH
39700: CALL_OW 250
39704: STR
39705: PUSH
39706: LD_STRING , 
39708: STR
39709: PUSH
39710: LD_VAR 0 3
39714: PPUSH
39715: CALL_OW 251
39719: STR
39720: PUSH
39721: LD_STRING , 
39723: STR
39724: PUSH
39725: LD_VAR 0 3
39729: PPUSH
39730: CALL_OW 254
39734: STR
39735: PUSH
39736: LD_STRING , 
39738: STR
39739: PUSH
39740: LD_VAR 0 3
39744: PPUSH
39745: LD_INT 1
39747: PPUSH
39748: CALL_OW 268
39752: STR
39753: PUSH
39754: LD_STRING , 
39756: STR
39757: PUSH
39758: LD_VAR 0 3
39762: PPUSH
39763: LD_INT 2
39765: PPUSH
39766: CALL_OW 268
39770: STR
39771: PUSH
39772: LD_STRING ],
39774: STR
39775: PPUSH
39776: CALL_OW 561
// end ;
39780: GO 39674
39782: POP
39783: POP
// AddToLog ( ]; ) ;
39784: LD_STRING ];
39786: PPUSH
39787: CALL_OW 561
// end ;
39791: LD_VAR 0 2
39795: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39796: LD_INT 0
39798: PPUSH
39799: PPUSH
39800: PPUSH
39801: PPUSH
39802: PPUSH
// if not area or not rate or not max then
39803: LD_VAR 0 1
39807: NOT
39808: PUSH
39809: LD_VAR 0 2
39813: NOT
39814: OR
39815: PUSH
39816: LD_VAR 0 4
39820: NOT
39821: OR
39822: IFFALSE 39826
// exit ;
39824: GO 40015
// while 1 do
39826: LD_INT 1
39828: IFFALSE 40015
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39830: LD_ADDR_VAR 0 9
39834: PUSH
39835: LD_VAR 0 1
39839: PPUSH
39840: LD_INT 1
39842: PPUSH
39843: CALL_OW 287
39847: PUSH
39848: LD_INT 10
39850: MUL
39851: ST_TO_ADDR
// r := rate / 10 ;
39852: LD_ADDR_VAR 0 7
39856: PUSH
39857: LD_VAR 0 2
39861: PUSH
39862: LD_INT 10
39864: DIVREAL
39865: ST_TO_ADDR
// time := 1 1$00 ;
39866: LD_ADDR_VAR 0 8
39870: PUSH
39871: LD_INT 2100
39873: ST_TO_ADDR
// if amount < min then
39874: LD_VAR 0 9
39878: PUSH
39879: LD_VAR 0 3
39883: LESS
39884: IFFALSE 39902
// r := r * 2 else
39886: LD_ADDR_VAR 0 7
39890: PUSH
39891: LD_VAR 0 7
39895: PUSH
39896: LD_INT 2
39898: MUL
39899: ST_TO_ADDR
39900: GO 39928
// if amount > max then
39902: LD_VAR 0 9
39906: PUSH
39907: LD_VAR 0 4
39911: GREATER
39912: IFFALSE 39928
// r := r / 2 ;
39914: LD_ADDR_VAR 0 7
39918: PUSH
39919: LD_VAR 0 7
39923: PUSH
39924: LD_INT 2
39926: DIVREAL
39927: ST_TO_ADDR
// time := time / r ;
39928: LD_ADDR_VAR 0 8
39932: PUSH
39933: LD_VAR 0 8
39937: PUSH
39938: LD_VAR 0 7
39942: DIVREAL
39943: ST_TO_ADDR
// if time < 0 then
39944: LD_VAR 0 8
39948: PUSH
39949: LD_INT 0
39951: LESS
39952: IFFALSE 39969
// time := time * - 1 ;
39954: LD_ADDR_VAR 0 8
39958: PUSH
39959: LD_VAR 0 8
39963: PUSH
39964: LD_INT 1
39966: NEG
39967: MUL
39968: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39969: LD_VAR 0 8
39973: PUSH
39974: LD_INT 35
39976: PPUSH
39977: LD_INT 875
39979: PPUSH
39980: CALL_OW 12
39984: PLUS
39985: PPUSH
39986: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39990: LD_INT 1
39992: PPUSH
39993: LD_INT 5
39995: PPUSH
39996: CALL_OW 12
40000: PPUSH
40001: LD_VAR 0 1
40005: PPUSH
40006: LD_INT 1
40008: PPUSH
40009: CALL_OW 55
// end ;
40013: GO 39826
// end ;
40015: LD_VAR 0 5
40019: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40020: LD_INT 0
40022: PPUSH
40023: PPUSH
40024: PPUSH
40025: PPUSH
40026: PPUSH
40027: PPUSH
40028: PPUSH
40029: PPUSH
// if not turrets or not factories then
40030: LD_VAR 0 1
40034: NOT
40035: PUSH
40036: LD_VAR 0 2
40040: NOT
40041: OR
40042: IFFALSE 40046
// exit ;
40044: GO 40353
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40046: LD_ADDR_VAR 0 10
40050: PUSH
40051: LD_INT 5
40053: PUSH
40054: LD_INT 6
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 2
40063: PUSH
40064: LD_INT 4
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 3
40073: PUSH
40074: LD_INT 5
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 24
40088: PUSH
40089: LD_INT 25
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 23
40098: PUSH
40099: LD_INT 27
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 42
40112: PUSH
40113: LD_INT 43
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 44
40122: PUSH
40123: LD_INT 46
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 45
40132: PUSH
40133: LD_INT 47
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: LIST
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: LIST
40149: ST_TO_ADDR
// result := [ ] ;
40150: LD_ADDR_VAR 0 3
40154: PUSH
40155: EMPTY
40156: ST_TO_ADDR
// for i in turrets do
40157: LD_ADDR_VAR 0 4
40161: PUSH
40162: LD_VAR 0 1
40166: PUSH
40167: FOR_IN
40168: IFFALSE 40351
// begin nat := GetNation ( i ) ;
40170: LD_ADDR_VAR 0 7
40174: PUSH
40175: LD_VAR 0 4
40179: PPUSH
40180: CALL_OW 248
40184: ST_TO_ADDR
// weapon := 0 ;
40185: LD_ADDR_VAR 0 8
40189: PUSH
40190: LD_INT 0
40192: ST_TO_ADDR
// if not nat then
40193: LD_VAR 0 7
40197: NOT
40198: IFFALSE 40202
// continue ;
40200: GO 40167
// for j in list [ nat ] do
40202: LD_ADDR_VAR 0 5
40206: PUSH
40207: LD_VAR 0 10
40211: PUSH
40212: LD_VAR 0 7
40216: ARRAY
40217: PUSH
40218: FOR_IN
40219: IFFALSE 40260
// if GetBWeapon ( i ) = j [ 1 ] then
40221: LD_VAR 0 4
40225: PPUSH
40226: CALL_OW 269
40230: PUSH
40231: LD_VAR 0 5
40235: PUSH
40236: LD_INT 1
40238: ARRAY
40239: EQUAL
40240: IFFALSE 40258
// begin weapon := j [ 2 ] ;
40242: LD_ADDR_VAR 0 8
40246: PUSH
40247: LD_VAR 0 5
40251: PUSH
40252: LD_INT 2
40254: ARRAY
40255: ST_TO_ADDR
// break ;
40256: GO 40260
// end ;
40258: GO 40218
40260: POP
40261: POP
// if not weapon then
40262: LD_VAR 0 8
40266: NOT
40267: IFFALSE 40271
// continue ;
40269: GO 40167
// for k in factories do
40271: LD_ADDR_VAR 0 6
40275: PUSH
40276: LD_VAR 0 2
40280: PUSH
40281: FOR_IN
40282: IFFALSE 40347
// begin weapons := AvailableWeaponList ( k ) ;
40284: LD_ADDR_VAR 0 9
40288: PUSH
40289: LD_VAR 0 6
40293: PPUSH
40294: CALL_OW 478
40298: ST_TO_ADDR
// if not weapons then
40299: LD_VAR 0 9
40303: NOT
40304: IFFALSE 40308
// continue ;
40306: GO 40281
// if weapon in weapons then
40308: LD_VAR 0 8
40312: PUSH
40313: LD_VAR 0 9
40317: IN
40318: IFFALSE 40345
// begin result := [ i , weapon ] ;
40320: LD_ADDR_VAR 0 3
40324: PUSH
40325: LD_VAR 0 4
40329: PUSH
40330: LD_VAR 0 8
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: ST_TO_ADDR
// exit ;
40339: POP
40340: POP
40341: POP
40342: POP
40343: GO 40353
// end ; end ;
40345: GO 40281
40347: POP
40348: POP
// end ;
40349: GO 40167
40351: POP
40352: POP
// end ;
40353: LD_VAR 0 3
40357: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40358: LD_INT 0
40360: PPUSH
// if not side or side > 8 then
40361: LD_VAR 0 3
40365: NOT
40366: PUSH
40367: LD_VAR 0 3
40371: PUSH
40372: LD_INT 8
40374: GREATER
40375: OR
40376: IFFALSE 40380
// exit ;
40378: GO 40439
// if not range then
40380: LD_VAR 0 4
40384: NOT
40385: IFFALSE 40396
// range := - 12 ;
40387: LD_ADDR_VAR 0 4
40391: PUSH
40392: LD_INT 12
40394: NEG
40395: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40396: LD_VAR 0 1
40400: PPUSH
40401: LD_VAR 0 2
40405: PPUSH
40406: LD_VAR 0 3
40410: PPUSH
40411: LD_VAR 0 4
40415: PPUSH
40416: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40420: LD_VAR 0 1
40424: PPUSH
40425: LD_VAR 0 2
40429: PPUSH
40430: LD_VAR 0 3
40434: PPUSH
40435: CALL_OW 331
// end ;
40439: LD_VAR 0 5
40443: RET
// export function Video ( mode ) ; begin
40444: LD_INT 0
40446: PPUSH
// ingame_video = mode ;
40447: LD_ADDR_OWVAR 52
40451: PUSH
40452: LD_VAR 0 1
40456: ST_TO_ADDR
// interface_hidden = mode ;
40457: LD_ADDR_OWVAR 54
40461: PUSH
40462: LD_VAR 0 1
40466: ST_TO_ADDR
// end ;
40467: LD_VAR 0 2
40471: RET
// export function Join ( array , element ) ; begin
40472: LD_INT 0
40474: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40475: LD_ADDR_VAR 0 3
40479: PUSH
40480: LD_VAR 0 1
40484: PPUSH
40485: LD_VAR 0 1
40489: PUSH
40490: LD_INT 1
40492: PLUS
40493: PPUSH
40494: LD_VAR 0 2
40498: PPUSH
40499: CALL_OW 1
40503: ST_TO_ADDR
// end ;
40504: LD_VAR 0 3
40508: RET
// export function JoinUnion ( array , element ) ; begin
40509: LD_INT 0
40511: PPUSH
// result := array union element ;
40512: LD_ADDR_VAR 0 3
40516: PUSH
40517: LD_VAR 0 1
40521: PUSH
40522: LD_VAR 0 2
40526: UNION
40527: ST_TO_ADDR
// end ;
40528: LD_VAR 0 3
40532: RET
// export function GetBehemoths ( side ) ; begin
40533: LD_INT 0
40535: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40536: LD_ADDR_VAR 0 2
40540: PUSH
40541: LD_INT 22
40543: PUSH
40544: LD_VAR 0 1
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 31
40555: PUSH
40556: LD_INT 25
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PPUSH
40567: CALL_OW 69
40571: ST_TO_ADDR
// end ;
40572: LD_VAR 0 2
40576: RET
// export function Shuffle ( array ) ; var i , index ; begin
40577: LD_INT 0
40579: PPUSH
40580: PPUSH
40581: PPUSH
// result := [ ] ;
40582: LD_ADDR_VAR 0 2
40586: PUSH
40587: EMPTY
40588: ST_TO_ADDR
// if not array then
40589: LD_VAR 0 1
40593: NOT
40594: IFFALSE 40598
// exit ;
40596: GO 40697
// Randomize ;
40598: CALL_OW 10
// for i = array downto 1 do
40602: LD_ADDR_VAR 0 3
40606: PUSH
40607: DOUBLE
40608: LD_VAR 0 1
40612: INC
40613: ST_TO_ADDR
40614: LD_INT 1
40616: PUSH
40617: FOR_DOWNTO
40618: IFFALSE 40695
// begin index := rand ( 1 , array ) ;
40620: LD_ADDR_VAR 0 4
40624: PUSH
40625: LD_INT 1
40627: PPUSH
40628: LD_VAR 0 1
40632: PPUSH
40633: CALL_OW 12
40637: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40638: LD_ADDR_VAR 0 2
40642: PUSH
40643: LD_VAR 0 2
40647: PPUSH
40648: LD_VAR 0 2
40652: PUSH
40653: LD_INT 1
40655: PLUS
40656: PPUSH
40657: LD_VAR 0 1
40661: PUSH
40662: LD_VAR 0 4
40666: ARRAY
40667: PPUSH
40668: CALL_OW 2
40672: ST_TO_ADDR
// array := Delete ( array , index ) ;
40673: LD_ADDR_VAR 0 1
40677: PUSH
40678: LD_VAR 0 1
40682: PPUSH
40683: LD_VAR 0 4
40687: PPUSH
40688: CALL_OW 3
40692: ST_TO_ADDR
// end ;
40693: GO 40617
40695: POP
40696: POP
// end ;
40697: LD_VAR 0 2
40701: RET
// export function GetBaseMaterials ( base ) ; begin
40702: LD_INT 0
40704: PPUSH
// result := [ 0 , 0 , 0 ] ;
40705: LD_ADDR_VAR 0 2
40709: PUSH
40710: LD_INT 0
40712: PUSH
40713: LD_INT 0
40715: PUSH
40716: LD_INT 0
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: LIST
40723: ST_TO_ADDR
// if not base then
40724: LD_VAR 0 1
40728: NOT
40729: IFFALSE 40733
// exit ;
40731: GO 40782
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40733: LD_ADDR_VAR 0 2
40737: PUSH
40738: LD_VAR 0 1
40742: PPUSH
40743: LD_INT 1
40745: PPUSH
40746: CALL_OW 275
40750: PUSH
40751: LD_VAR 0 1
40755: PPUSH
40756: LD_INT 2
40758: PPUSH
40759: CALL_OW 275
40763: PUSH
40764: LD_VAR 0 1
40768: PPUSH
40769: LD_INT 3
40771: PPUSH
40772: CALL_OW 275
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: LIST
40781: ST_TO_ADDR
// end ;
40782: LD_VAR 0 2
40786: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40787: LD_INT 0
40789: PPUSH
40790: PPUSH
// result := array ;
40791: LD_ADDR_VAR 0 3
40795: PUSH
40796: LD_VAR 0 1
40800: ST_TO_ADDR
// if size >= result then
40801: LD_VAR 0 2
40805: PUSH
40806: LD_VAR 0 3
40810: GREATEREQUAL
40811: IFFALSE 40815
// exit ;
40813: GO 40865
// if size then
40815: LD_VAR 0 2
40819: IFFALSE 40865
// for i := array downto size do
40821: LD_ADDR_VAR 0 4
40825: PUSH
40826: DOUBLE
40827: LD_VAR 0 1
40831: INC
40832: ST_TO_ADDR
40833: LD_VAR 0 2
40837: PUSH
40838: FOR_DOWNTO
40839: IFFALSE 40863
// result := Delete ( result , result ) ;
40841: LD_ADDR_VAR 0 3
40845: PUSH
40846: LD_VAR 0 3
40850: PPUSH
40851: LD_VAR 0 3
40855: PPUSH
40856: CALL_OW 3
40860: ST_TO_ADDR
40861: GO 40838
40863: POP
40864: POP
// end ;
40865: LD_VAR 0 3
40869: RET
// export function ComExit ( unit ) ; var tmp ; begin
40870: LD_INT 0
40872: PPUSH
40873: PPUSH
// if not IsInUnit ( unit ) then
40874: LD_VAR 0 1
40878: PPUSH
40879: CALL_OW 310
40883: NOT
40884: IFFALSE 40888
// exit ;
40886: GO 40948
// tmp := IsInUnit ( unit ) ;
40888: LD_ADDR_VAR 0 3
40892: PUSH
40893: LD_VAR 0 1
40897: PPUSH
40898: CALL_OW 310
40902: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40903: LD_VAR 0 3
40907: PPUSH
40908: CALL_OW 247
40912: PUSH
40913: LD_INT 2
40915: EQUAL
40916: IFFALSE 40929
// ComExitVehicle ( unit ) else
40918: LD_VAR 0 1
40922: PPUSH
40923: CALL_OW 121
40927: GO 40938
// ComExitBuilding ( unit ) ;
40929: LD_VAR 0 1
40933: PPUSH
40934: CALL_OW 122
// result := tmp ;
40938: LD_ADDR_VAR 0 2
40942: PUSH
40943: LD_VAR 0 3
40947: ST_TO_ADDR
// end ;
40948: LD_VAR 0 2
40952: RET
// export function ComExitAll ( units ) ; var i ; begin
40953: LD_INT 0
40955: PPUSH
40956: PPUSH
// if not units then
40957: LD_VAR 0 1
40961: NOT
40962: IFFALSE 40966
// exit ;
40964: GO 40992
// for i in units do
40966: LD_ADDR_VAR 0 3
40970: PUSH
40971: LD_VAR 0 1
40975: PUSH
40976: FOR_IN
40977: IFFALSE 40990
// ComExit ( i ) ;
40979: LD_VAR 0 3
40983: PPUSH
40984: CALL 40870 0 1
40988: GO 40976
40990: POP
40991: POP
// end ;
40992: LD_VAR 0 2
40996: RET
// export function ResetHc ; begin
40997: LD_INT 0
40999: PPUSH
// InitHc ;
41000: CALL_OW 19
// hc_importance := 0 ;
41004: LD_ADDR_OWVAR 32
41008: PUSH
41009: LD_INT 0
41011: ST_TO_ADDR
// end ;
41012: LD_VAR 0 1
41016: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41017: LD_INT 0
41019: PPUSH
41020: PPUSH
41021: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41022: LD_ADDR_VAR 0 6
41026: PUSH
41027: LD_VAR 0 1
41031: PUSH
41032: LD_VAR 0 3
41036: PLUS
41037: PUSH
41038: LD_INT 2
41040: DIV
41041: ST_TO_ADDR
// if _x < 0 then
41042: LD_VAR 0 6
41046: PUSH
41047: LD_INT 0
41049: LESS
41050: IFFALSE 41067
// _x := _x * - 1 ;
41052: LD_ADDR_VAR 0 6
41056: PUSH
41057: LD_VAR 0 6
41061: PUSH
41062: LD_INT 1
41064: NEG
41065: MUL
41066: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41067: LD_ADDR_VAR 0 7
41071: PUSH
41072: LD_VAR 0 2
41076: PUSH
41077: LD_VAR 0 4
41081: PLUS
41082: PUSH
41083: LD_INT 2
41085: DIV
41086: ST_TO_ADDR
// if _y < 0 then
41087: LD_VAR 0 7
41091: PUSH
41092: LD_INT 0
41094: LESS
41095: IFFALSE 41112
// _y := _y * - 1 ;
41097: LD_ADDR_VAR 0 7
41101: PUSH
41102: LD_VAR 0 7
41106: PUSH
41107: LD_INT 1
41109: NEG
41110: MUL
41111: ST_TO_ADDR
// result := [ _x , _y ] ;
41112: LD_ADDR_VAR 0 5
41116: PUSH
41117: LD_VAR 0 6
41121: PUSH
41122: LD_VAR 0 7
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: ST_TO_ADDR
// end ;
41131: LD_VAR 0 5
41135: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41136: LD_INT 0
41138: PPUSH
41139: PPUSH
41140: PPUSH
41141: PPUSH
// task := GetTaskList ( unit ) ;
41142: LD_ADDR_VAR 0 7
41146: PUSH
41147: LD_VAR 0 1
41151: PPUSH
41152: CALL_OW 437
41156: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41157: LD_VAR 0 7
41161: NOT
41162: PUSH
41163: LD_VAR 0 1
41167: PPUSH
41168: LD_VAR 0 2
41172: PPUSH
41173: CALL_OW 308
41177: NOT
41178: AND
41179: IFFALSE 41183
// exit ;
41181: GO 41301
// if IsInArea ( unit , area ) then
41183: LD_VAR 0 1
41187: PPUSH
41188: LD_VAR 0 2
41192: PPUSH
41193: CALL_OW 308
41197: IFFALSE 41215
// begin ComMoveToArea ( unit , goAway ) ;
41199: LD_VAR 0 1
41203: PPUSH
41204: LD_VAR 0 3
41208: PPUSH
41209: CALL_OW 113
// exit ;
41213: GO 41301
// end ; if task [ 1 ] [ 1 ] <> M then
41215: LD_VAR 0 7
41219: PUSH
41220: LD_INT 1
41222: ARRAY
41223: PUSH
41224: LD_INT 1
41226: ARRAY
41227: PUSH
41228: LD_STRING M
41230: NONEQUAL
41231: IFFALSE 41235
// exit ;
41233: GO 41301
// x := task [ 1 ] [ 2 ] ;
41235: LD_ADDR_VAR 0 5
41239: PUSH
41240: LD_VAR 0 7
41244: PUSH
41245: LD_INT 1
41247: ARRAY
41248: PUSH
41249: LD_INT 2
41251: ARRAY
41252: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41253: LD_ADDR_VAR 0 6
41257: PUSH
41258: LD_VAR 0 7
41262: PUSH
41263: LD_INT 1
41265: ARRAY
41266: PUSH
41267: LD_INT 3
41269: ARRAY
41270: ST_TO_ADDR
// if InArea ( x , y , area ) then
41271: LD_VAR 0 5
41275: PPUSH
41276: LD_VAR 0 6
41280: PPUSH
41281: LD_VAR 0 2
41285: PPUSH
41286: CALL_OW 309
41290: IFFALSE 41301
// ComStop ( unit ) ;
41292: LD_VAR 0 1
41296: PPUSH
41297: CALL_OW 141
// end ;
41301: LD_VAR 0 4
41305: RET
// export function Abs ( value ) ; begin
41306: LD_INT 0
41308: PPUSH
// result := value ;
41309: LD_ADDR_VAR 0 2
41313: PUSH
41314: LD_VAR 0 1
41318: ST_TO_ADDR
// if value < 0 then
41319: LD_VAR 0 1
41323: PUSH
41324: LD_INT 0
41326: LESS
41327: IFFALSE 41344
// result := value * - 1 ;
41329: LD_ADDR_VAR 0 2
41333: PUSH
41334: LD_VAR 0 1
41338: PUSH
41339: LD_INT 1
41341: NEG
41342: MUL
41343: ST_TO_ADDR
// end ;
41344: LD_VAR 0 2
41348: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41349: LD_INT 0
41351: PPUSH
41352: PPUSH
41353: PPUSH
41354: PPUSH
41355: PPUSH
41356: PPUSH
41357: PPUSH
41358: PPUSH
// if not unit or not building then
41359: LD_VAR 0 1
41363: NOT
41364: PUSH
41365: LD_VAR 0 2
41369: NOT
41370: OR
41371: IFFALSE 41375
// exit ;
41373: GO 41601
// x := GetX ( building ) ;
41375: LD_ADDR_VAR 0 4
41379: PUSH
41380: LD_VAR 0 2
41384: PPUSH
41385: CALL_OW 250
41389: ST_TO_ADDR
// y := GetY ( building ) ;
41390: LD_ADDR_VAR 0 6
41394: PUSH
41395: LD_VAR 0 2
41399: PPUSH
41400: CALL_OW 251
41404: ST_TO_ADDR
// d := GetDir ( building ) ;
41405: LD_ADDR_VAR 0 8
41409: PUSH
41410: LD_VAR 0 2
41414: PPUSH
41415: CALL_OW 254
41419: ST_TO_ADDR
// r := 4 ;
41420: LD_ADDR_VAR 0 9
41424: PUSH
41425: LD_INT 4
41427: ST_TO_ADDR
// for i := 1 to 5 do
41428: LD_ADDR_VAR 0 10
41432: PUSH
41433: DOUBLE
41434: LD_INT 1
41436: DEC
41437: ST_TO_ADDR
41438: LD_INT 5
41440: PUSH
41441: FOR_TO
41442: IFFALSE 41599
// begin _x := ShiftX ( x , d , r + i ) ;
41444: LD_ADDR_VAR 0 5
41448: PUSH
41449: LD_VAR 0 4
41453: PPUSH
41454: LD_VAR 0 8
41458: PPUSH
41459: LD_VAR 0 9
41463: PUSH
41464: LD_VAR 0 10
41468: PLUS
41469: PPUSH
41470: CALL_OW 272
41474: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41475: LD_ADDR_VAR 0 7
41479: PUSH
41480: LD_VAR 0 6
41484: PPUSH
41485: LD_VAR 0 8
41489: PPUSH
41490: LD_VAR 0 9
41494: PUSH
41495: LD_VAR 0 10
41499: PLUS
41500: PPUSH
41501: CALL_OW 273
41505: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41506: LD_VAR 0 5
41510: PPUSH
41511: LD_VAR 0 7
41515: PPUSH
41516: CALL_OW 488
41520: PUSH
41521: LD_VAR 0 5
41525: PPUSH
41526: LD_VAR 0 7
41530: PPUSH
41531: CALL_OW 428
41535: PPUSH
41536: CALL_OW 247
41540: PUSH
41541: LD_INT 3
41543: PUSH
41544: LD_INT 2
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: IN
41551: NOT
41552: AND
41553: IFFALSE 41597
// begin ComMoveXY ( unit , _x , _y ) ;
41555: LD_VAR 0 1
41559: PPUSH
41560: LD_VAR 0 5
41564: PPUSH
41565: LD_VAR 0 7
41569: PPUSH
41570: CALL_OW 111
// result := [ _x , _y ] ;
41574: LD_ADDR_VAR 0 3
41578: PUSH
41579: LD_VAR 0 5
41583: PUSH
41584: LD_VAR 0 7
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: ST_TO_ADDR
// exit ;
41593: POP
41594: POP
41595: GO 41601
// end ; end ;
41597: GO 41441
41599: POP
41600: POP
// end ;
41601: LD_VAR 0 3
41605: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41606: LD_INT 0
41608: PPUSH
41609: PPUSH
41610: PPUSH
// result := 0 ;
41611: LD_ADDR_VAR 0 3
41615: PUSH
41616: LD_INT 0
41618: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41619: LD_VAR 0 1
41623: PUSH
41624: LD_INT 0
41626: LESS
41627: PUSH
41628: LD_VAR 0 1
41632: PUSH
41633: LD_INT 8
41635: GREATER
41636: OR
41637: PUSH
41638: LD_VAR 0 2
41642: PUSH
41643: LD_INT 0
41645: LESS
41646: OR
41647: PUSH
41648: LD_VAR 0 2
41652: PUSH
41653: LD_INT 8
41655: GREATER
41656: OR
41657: IFFALSE 41661
// exit ;
41659: GO 41736
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41661: LD_ADDR_VAR 0 4
41665: PUSH
41666: LD_INT 22
41668: PUSH
41669: LD_VAR 0 2
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PPUSH
41678: CALL_OW 69
41682: PUSH
41683: FOR_IN
41684: IFFALSE 41734
// begin un := UnitShoot ( i ) ;
41686: LD_ADDR_VAR 0 5
41690: PUSH
41691: LD_VAR 0 4
41695: PPUSH
41696: CALL_OW 504
41700: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41701: LD_VAR 0 5
41705: PPUSH
41706: CALL_OW 255
41710: PUSH
41711: LD_VAR 0 1
41715: EQUAL
41716: IFFALSE 41732
// begin result := un ;
41718: LD_ADDR_VAR 0 3
41722: PUSH
41723: LD_VAR 0 5
41727: ST_TO_ADDR
// exit ;
41728: POP
41729: POP
41730: GO 41736
// end ; end ;
41732: GO 41683
41734: POP
41735: POP
// end ;
41736: LD_VAR 0 3
41740: RET
// export function GetCargoBay ( units ) ; begin
41741: LD_INT 0
41743: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41744: LD_ADDR_VAR 0 2
41748: PUSH
41749: LD_VAR 0 1
41753: PPUSH
41754: LD_INT 2
41756: PUSH
41757: LD_INT 34
41759: PUSH
41760: LD_INT 12
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 34
41769: PUSH
41770: LD_INT 51
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 34
41779: PUSH
41780: LD_INT 32
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 34
41789: PUSH
41790: LD_INT 89
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: PPUSH
41804: CALL_OW 72
41808: ST_TO_ADDR
// end ;
41809: LD_VAR 0 2
41813: RET
// export function Negate ( value ) ; begin
41814: LD_INT 0
41816: PPUSH
// result := not value ;
41817: LD_ADDR_VAR 0 2
41821: PUSH
41822: LD_VAR 0 1
41826: NOT
41827: ST_TO_ADDR
// end ;
41828: LD_VAR 0 2
41832: RET
// export function Inc ( value ) ; begin
41833: LD_INT 0
41835: PPUSH
// result := value + 1 ;
41836: LD_ADDR_VAR 0 2
41840: PUSH
41841: LD_VAR 0 1
41845: PUSH
41846: LD_INT 1
41848: PLUS
41849: ST_TO_ADDR
// end ;
41850: LD_VAR 0 2
41854: RET
// export function Dec ( value ) ; begin
41855: LD_INT 0
41857: PPUSH
// result := value - 1 ;
41858: LD_ADDR_VAR 0 2
41862: PUSH
41863: LD_VAR 0 1
41867: PUSH
41868: LD_INT 1
41870: MINUS
41871: ST_TO_ADDR
// end ;
41872: LD_VAR 0 2
41876: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41877: LD_INT 0
41879: PPUSH
41880: PPUSH
41881: PPUSH
41882: PPUSH
41883: PPUSH
41884: PPUSH
41885: PPUSH
41886: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41887: LD_VAR 0 1
41891: PPUSH
41892: LD_VAR 0 2
41896: PPUSH
41897: CALL_OW 488
41901: NOT
41902: PUSH
41903: LD_VAR 0 3
41907: PPUSH
41908: LD_VAR 0 4
41912: PPUSH
41913: CALL_OW 488
41917: NOT
41918: OR
41919: IFFALSE 41932
// begin result := - 1 ;
41921: LD_ADDR_VAR 0 5
41925: PUSH
41926: LD_INT 1
41928: NEG
41929: ST_TO_ADDR
// exit ;
41930: GO 42167
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41932: LD_ADDR_VAR 0 12
41936: PUSH
41937: LD_VAR 0 1
41941: PPUSH
41942: LD_VAR 0 2
41946: PPUSH
41947: LD_VAR 0 3
41951: PPUSH
41952: LD_VAR 0 4
41956: PPUSH
41957: CALL 41017 0 4
41961: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41962: LD_ADDR_VAR 0 11
41966: PUSH
41967: LD_VAR 0 1
41971: PPUSH
41972: LD_VAR 0 2
41976: PPUSH
41977: LD_VAR 0 12
41981: PUSH
41982: LD_INT 1
41984: ARRAY
41985: PPUSH
41986: LD_VAR 0 12
41990: PUSH
41991: LD_INT 2
41993: ARRAY
41994: PPUSH
41995: CALL_OW 298
41999: ST_TO_ADDR
// distance := 9999 ;
42000: LD_ADDR_VAR 0 10
42004: PUSH
42005: LD_INT 9999
42007: ST_TO_ADDR
// for i := 0 to 5 do
42008: LD_ADDR_VAR 0 6
42012: PUSH
42013: DOUBLE
42014: LD_INT 0
42016: DEC
42017: ST_TO_ADDR
42018: LD_INT 5
42020: PUSH
42021: FOR_TO
42022: IFFALSE 42165
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42024: LD_ADDR_VAR 0 7
42028: PUSH
42029: LD_VAR 0 1
42033: PPUSH
42034: LD_VAR 0 6
42038: PPUSH
42039: LD_VAR 0 11
42043: PPUSH
42044: CALL_OW 272
42048: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42049: LD_ADDR_VAR 0 8
42053: PUSH
42054: LD_VAR 0 2
42058: PPUSH
42059: LD_VAR 0 6
42063: PPUSH
42064: LD_VAR 0 11
42068: PPUSH
42069: CALL_OW 273
42073: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42074: LD_VAR 0 7
42078: PPUSH
42079: LD_VAR 0 8
42083: PPUSH
42084: CALL_OW 488
42088: NOT
42089: IFFALSE 42093
// continue ;
42091: GO 42021
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42093: LD_ADDR_VAR 0 9
42097: PUSH
42098: LD_VAR 0 12
42102: PUSH
42103: LD_INT 1
42105: ARRAY
42106: PPUSH
42107: LD_VAR 0 12
42111: PUSH
42112: LD_INT 2
42114: ARRAY
42115: PPUSH
42116: LD_VAR 0 7
42120: PPUSH
42121: LD_VAR 0 8
42125: PPUSH
42126: CALL_OW 298
42130: ST_TO_ADDR
// if tmp < distance then
42131: LD_VAR 0 9
42135: PUSH
42136: LD_VAR 0 10
42140: LESS
42141: IFFALSE 42163
// begin result := i ;
42143: LD_ADDR_VAR 0 5
42147: PUSH
42148: LD_VAR 0 6
42152: ST_TO_ADDR
// distance := tmp ;
42153: LD_ADDR_VAR 0 10
42157: PUSH
42158: LD_VAR 0 9
42162: ST_TO_ADDR
// end ; end ;
42163: GO 42021
42165: POP
42166: POP
// end ;
42167: LD_VAR 0 5
42171: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42172: LD_INT 0
42174: PPUSH
42175: PPUSH
// if not driver or not IsInUnit ( driver ) then
42176: LD_VAR 0 1
42180: NOT
42181: PUSH
42182: LD_VAR 0 1
42186: PPUSH
42187: CALL_OW 310
42191: NOT
42192: OR
42193: IFFALSE 42197
// exit ;
42195: GO 42287
// vehicle := IsInUnit ( driver ) ;
42197: LD_ADDR_VAR 0 3
42201: PUSH
42202: LD_VAR 0 1
42206: PPUSH
42207: CALL_OW 310
42211: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42212: LD_VAR 0 1
42216: PPUSH
42217: LD_STRING \
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: LD_INT 0
42228: PUSH
42229: LD_INT 0
42231: PUSH
42232: LD_INT 0
42234: PUSH
42235: LD_INT 0
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: PUSH
42247: LD_STRING E
42249: PUSH
42250: LD_INT 0
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: LD_VAR 0 3
42260: PUSH
42261: LD_INT 0
42263: PUSH
42264: LD_INT 0
42266: PUSH
42267: LD_INT 0
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PPUSH
42283: CALL_OW 446
// end ;
42287: LD_VAR 0 2
42291: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42292: LD_INT 0
42294: PPUSH
42295: PPUSH
// if not driver or not IsInUnit ( driver ) then
42296: LD_VAR 0 1
42300: NOT
42301: PUSH
42302: LD_VAR 0 1
42306: PPUSH
42307: CALL_OW 310
42311: NOT
42312: OR
42313: IFFALSE 42317
// exit ;
42315: GO 42407
// vehicle := IsInUnit ( driver ) ;
42317: LD_ADDR_VAR 0 3
42321: PUSH
42322: LD_VAR 0 1
42326: PPUSH
42327: CALL_OW 310
42331: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42332: LD_VAR 0 1
42336: PPUSH
42337: LD_STRING \
42339: PUSH
42340: LD_INT 0
42342: PUSH
42343: LD_INT 0
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: PUSH
42367: LD_STRING E
42369: PUSH
42370: LD_INT 0
42372: PUSH
42373: LD_INT 0
42375: PUSH
42376: LD_VAR 0 3
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PPUSH
42403: CALL_OW 447
// end ;
42407: LD_VAR 0 2
42411: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42412: LD_INT 0
42414: PPUSH
42415: PPUSH
42416: PPUSH
// tmp := [ ] ;
42417: LD_ADDR_VAR 0 5
42421: PUSH
42422: EMPTY
42423: ST_TO_ADDR
// for i in units do
42424: LD_ADDR_VAR 0 4
42428: PUSH
42429: LD_VAR 0 1
42433: PUSH
42434: FOR_IN
42435: IFFALSE 42473
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42437: LD_ADDR_VAR 0 5
42441: PUSH
42442: LD_VAR 0 5
42446: PPUSH
42447: LD_VAR 0 5
42451: PUSH
42452: LD_INT 1
42454: PLUS
42455: PPUSH
42456: LD_VAR 0 4
42460: PPUSH
42461: CALL_OW 256
42465: PPUSH
42466: CALL_OW 2
42470: ST_TO_ADDR
42471: GO 42434
42473: POP
42474: POP
// if not tmp then
42475: LD_VAR 0 5
42479: NOT
42480: IFFALSE 42484
// exit ;
42482: GO 42532
// if asc then
42484: LD_VAR 0 2
42488: IFFALSE 42512
// result := SortListByListAsc ( units , tmp ) else
42490: LD_ADDR_VAR 0 3
42494: PUSH
42495: LD_VAR 0 1
42499: PPUSH
42500: LD_VAR 0 5
42504: PPUSH
42505: CALL_OW 76
42509: ST_TO_ADDR
42510: GO 42532
// result := SortListByListDesc ( units , tmp ) ;
42512: LD_ADDR_VAR 0 3
42516: PUSH
42517: LD_VAR 0 1
42521: PPUSH
42522: LD_VAR 0 5
42526: PPUSH
42527: CALL_OW 77
42531: ST_TO_ADDR
// end ;
42532: LD_VAR 0 3
42536: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42537: LD_INT 0
42539: PPUSH
42540: PPUSH
// task := GetTaskList ( mech ) ;
42541: LD_ADDR_VAR 0 4
42545: PUSH
42546: LD_VAR 0 1
42550: PPUSH
42551: CALL_OW 437
42555: ST_TO_ADDR
// if not task then
42556: LD_VAR 0 4
42560: NOT
42561: IFFALSE 42565
// exit ;
42563: GO 42607
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42565: LD_ADDR_VAR 0 3
42569: PUSH
42570: LD_VAR 0 4
42574: PUSH
42575: LD_INT 1
42577: ARRAY
42578: PUSH
42579: LD_INT 1
42581: ARRAY
42582: PUSH
42583: LD_STRING r
42585: EQUAL
42586: PUSH
42587: LD_VAR 0 4
42591: PUSH
42592: LD_INT 1
42594: ARRAY
42595: PUSH
42596: LD_INT 4
42598: ARRAY
42599: PUSH
42600: LD_VAR 0 2
42604: EQUAL
42605: AND
42606: ST_TO_ADDR
// end ;
42607: LD_VAR 0 3
42611: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42612: LD_INT 0
42614: PPUSH
// SetDir ( unit , d ) ;
42615: LD_VAR 0 1
42619: PPUSH
42620: LD_VAR 0 4
42624: PPUSH
42625: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42629: LD_VAR 0 1
42633: PPUSH
42634: LD_VAR 0 2
42638: PPUSH
42639: LD_VAR 0 3
42643: PPUSH
42644: LD_VAR 0 5
42648: PPUSH
42649: CALL_OW 48
// end ;
42653: LD_VAR 0 6
42657: RET
// export function ToNaturalNumber ( number ) ; begin
42658: LD_INT 0
42660: PPUSH
// result := number div 1 ;
42661: LD_ADDR_VAR 0 2
42665: PUSH
42666: LD_VAR 0 1
42670: PUSH
42671: LD_INT 1
42673: DIV
42674: ST_TO_ADDR
// if number < 0 then
42675: LD_VAR 0 1
42679: PUSH
42680: LD_INT 0
42682: LESS
42683: IFFALSE 42693
// result := 0 ;
42685: LD_ADDR_VAR 0 2
42689: PUSH
42690: LD_INT 0
42692: ST_TO_ADDR
// end ;
42693: LD_VAR 0 2
42697: RET
// export function SortByClass ( units , class ) ; var un ; begin
42698: LD_INT 0
42700: PPUSH
42701: PPUSH
// if not units or not class then
42702: LD_VAR 0 1
42706: NOT
42707: PUSH
42708: LD_VAR 0 2
42712: NOT
42713: OR
42714: IFFALSE 42718
// exit ;
42716: GO 42813
// result := [ ] ;
42718: LD_ADDR_VAR 0 3
42722: PUSH
42723: EMPTY
42724: ST_TO_ADDR
// for un in units do
42725: LD_ADDR_VAR 0 4
42729: PUSH
42730: LD_VAR 0 1
42734: PUSH
42735: FOR_IN
42736: IFFALSE 42811
// if GetClass ( un ) = class then
42738: LD_VAR 0 4
42742: PPUSH
42743: CALL_OW 257
42747: PUSH
42748: LD_VAR 0 2
42752: EQUAL
42753: IFFALSE 42780
// result := Insert ( result , 1 , un ) else
42755: LD_ADDR_VAR 0 3
42759: PUSH
42760: LD_VAR 0 3
42764: PPUSH
42765: LD_INT 1
42767: PPUSH
42768: LD_VAR 0 4
42772: PPUSH
42773: CALL_OW 2
42777: ST_TO_ADDR
42778: GO 42809
// result := Replace ( result , result + 1 , un ) ;
42780: LD_ADDR_VAR 0 3
42784: PUSH
42785: LD_VAR 0 3
42789: PPUSH
42790: LD_VAR 0 3
42794: PUSH
42795: LD_INT 1
42797: PLUS
42798: PPUSH
42799: LD_VAR 0 4
42803: PPUSH
42804: CALL_OW 1
42808: ST_TO_ADDR
42809: GO 42735
42811: POP
42812: POP
// end ;
42813: LD_VAR 0 3
42817: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42818: LD_INT 0
42820: PPUSH
42821: PPUSH
42822: PPUSH
42823: PPUSH
42824: PPUSH
42825: PPUSH
42826: PPUSH
// result := [ ] ;
42827: LD_ADDR_VAR 0 4
42831: PUSH
42832: EMPTY
42833: ST_TO_ADDR
// if x - r < 0 then
42834: LD_VAR 0 1
42838: PUSH
42839: LD_VAR 0 3
42843: MINUS
42844: PUSH
42845: LD_INT 0
42847: LESS
42848: IFFALSE 42860
// min_x := 0 else
42850: LD_ADDR_VAR 0 8
42854: PUSH
42855: LD_INT 0
42857: ST_TO_ADDR
42858: GO 42876
// min_x := x - r ;
42860: LD_ADDR_VAR 0 8
42864: PUSH
42865: LD_VAR 0 1
42869: PUSH
42870: LD_VAR 0 3
42874: MINUS
42875: ST_TO_ADDR
// if y - r < 0 then
42876: LD_VAR 0 2
42880: PUSH
42881: LD_VAR 0 3
42885: MINUS
42886: PUSH
42887: LD_INT 0
42889: LESS
42890: IFFALSE 42902
// min_y := 0 else
42892: LD_ADDR_VAR 0 7
42896: PUSH
42897: LD_INT 0
42899: ST_TO_ADDR
42900: GO 42918
// min_y := y - r ;
42902: LD_ADDR_VAR 0 7
42906: PUSH
42907: LD_VAR 0 2
42911: PUSH
42912: LD_VAR 0 3
42916: MINUS
42917: ST_TO_ADDR
// max_x := x + r ;
42918: LD_ADDR_VAR 0 9
42922: PUSH
42923: LD_VAR 0 1
42927: PUSH
42928: LD_VAR 0 3
42932: PLUS
42933: ST_TO_ADDR
// max_y := y + r ;
42934: LD_ADDR_VAR 0 10
42938: PUSH
42939: LD_VAR 0 2
42943: PUSH
42944: LD_VAR 0 3
42948: PLUS
42949: ST_TO_ADDR
// for _x = min_x to max_x do
42950: LD_ADDR_VAR 0 5
42954: PUSH
42955: DOUBLE
42956: LD_VAR 0 8
42960: DEC
42961: ST_TO_ADDR
42962: LD_VAR 0 9
42966: PUSH
42967: FOR_TO
42968: IFFALSE 43069
// for _y = min_y to max_y do
42970: LD_ADDR_VAR 0 6
42974: PUSH
42975: DOUBLE
42976: LD_VAR 0 7
42980: DEC
42981: ST_TO_ADDR
42982: LD_VAR 0 10
42986: PUSH
42987: FOR_TO
42988: IFFALSE 43065
// begin if not ValidHex ( _x , _y ) then
42990: LD_VAR 0 5
42994: PPUSH
42995: LD_VAR 0 6
42999: PPUSH
43000: CALL_OW 488
43004: NOT
43005: IFFALSE 43009
// continue ;
43007: GO 42987
// if GetResourceTypeXY ( _x , _y ) then
43009: LD_VAR 0 5
43013: PPUSH
43014: LD_VAR 0 6
43018: PPUSH
43019: CALL_OW 283
43023: IFFALSE 43063
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43025: LD_ADDR_VAR 0 4
43029: PUSH
43030: LD_VAR 0 4
43034: PPUSH
43035: LD_VAR 0 4
43039: PUSH
43040: LD_INT 1
43042: PLUS
43043: PPUSH
43044: LD_VAR 0 5
43048: PUSH
43049: LD_VAR 0 6
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PPUSH
43058: CALL_OW 1
43062: ST_TO_ADDR
// end ;
43063: GO 42987
43065: POP
43066: POP
43067: GO 42967
43069: POP
43070: POP
// end ;
43071: LD_VAR 0 4
43075: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43076: LD_INT 0
43078: PPUSH
43079: PPUSH
43080: PPUSH
43081: PPUSH
43082: PPUSH
43083: PPUSH
43084: PPUSH
43085: PPUSH
// if not units then
43086: LD_VAR 0 1
43090: NOT
43091: IFFALSE 43095
// exit ;
43093: GO 43619
// result := UnitFilter ( units , [ f_ok ] ) ;
43095: LD_ADDR_VAR 0 3
43099: PUSH
43100: LD_VAR 0 1
43104: PPUSH
43105: LD_INT 50
43107: PUSH
43108: EMPTY
43109: LIST
43110: PPUSH
43111: CALL_OW 72
43115: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43116: LD_ADDR_VAR 0 8
43120: PUSH
43121: LD_VAR 0 1
43125: PUSH
43126: LD_INT 1
43128: ARRAY
43129: PPUSH
43130: CALL_OW 255
43134: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43135: LD_ADDR_VAR 0 10
43139: PUSH
43140: LD_INT 29
43142: PUSH
43143: LD_INT 91
43145: PUSH
43146: LD_INT 49
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: LIST
43153: ST_TO_ADDR
// if not result then
43154: LD_VAR 0 3
43158: NOT
43159: IFFALSE 43163
// exit ;
43161: GO 43619
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43163: LD_ADDR_VAR 0 5
43167: PUSH
43168: LD_INT 81
43170: PUSH
43171: LD_VAR 0 8
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PPUSH
43180: CALL_OW 69
43184: ST_TO_ADDR
// for i in result do
43185: LD_ADDR_VAR 0 4
43189: PUSH
43190: LD_VAR 0 3
43194: PUSH
43195: FOR_IN
43196: IFFALSE 43617
// begin tag := GetTag ( i ) + 1 ;
43198: LD_ADDR_VAR 0 9
43202: PUSH
43203: LD_VAR 0 4
43207: PPUSH
43208: CALL_OW 110
43212: PUSH
43213: LD_INT 1
43215: PLUS
43216: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
43217: LD_ADDR_VAR 0 7
43221: PUSH
43222: LD_VAR 0 4
43226: PPUSH
43227: CALL_OW 250
43231: PPUSH
43232: LD_VAR 0 4
43236: PPUSH
43237: CALL_OW 251
43241: PPUSH
43242: LD_INT 6
43244: PPUSH
43245: CALL 42818 0 3
43249: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
43250: LD_VAR 0 4
43254: PPUSH
43255: CALL_OW 247
43259: PUSH
43260: LD_INT 2
43262: EQUAL
43263: PUSH
43264: LD_VAR 0 7
43268: AND
43269: PUSH
43270: LD_VAR 0 4
43274: PPUSH
43275: CALL_OW 264
43279: PUSH
43280: LD_VAR 0 10
43284: IN
43285: NOT
43286: AND
43287: IFFALSE 43326
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43289: LD_VAR 0 4
43293: PPUSH
43294: LD_VAR 0 7
43298: PUSH
43299: LD_INT 1
43301: ARRAY
43302: PUSH
43303: LD_INT 1
43305: ARRAY
43306: PPUSH
43307: LD_VAR 0 7
43311: PUSH
43312: LD_INT 1
43314: ARRAY
43315: PUSH
43316: LD_INT 2
43318: ARRAY
43319: PPUSH
43320: CALL_OW 116
43324: GO 43615
// if path > tag then
43326: LD_VAR 0 2
43330: PUSH
43331: LD_VAR 0 9
43335: GREATER
43336: IFFALSE 43544
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43338: LD_ADDR_VAR 0 6
43342: PUSH
43343: LD_VAR 0 5
43347: PPUSH
43348: LD_INT 91
43350: PUSH
43351: LD_VAR 0 4
43355: PUSH
43356: LD_INT 8
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: LIST
43363: PPUSH
43364: CALL_OW 72
43368: ST_TO_ADDR
// if nearEnemy then
43369: LD_VAR 0 6
43373: IFFALSE 43442
// begin if GetWeapon ( i ) = ru_time_lapser then
43375: LD_VAR 0 4
43379: PPUSH
43380: CALL_OW 264
43384: PUSH
43385: LD_INT 49
43387: EQUAL
43388: IFFALSE 43416
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43390: LD_VAR 0 4
43394: PPUSH
43395: LD_VAR 0 6
43399: PPUSH
43400: LD_VAR 0 4
43404: PPUSH
43405: CALL_OW 74
43409: PPUSH
43410: CALL_OW 112
43414: GO 43440
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43416: LD_VAR 0 4
43420: PPUSH
43421: LD_VAR 0 6
43425: PPUSH
43426: LD_VAR 0 4
43430: PPUSH
43431: CALL_OW 74
43435: PPUSH
43436: CALL 44544 0 2
// end else
43440: GO 43542
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43442: LD_VAR 0 4
43446: PPUSH
43447: LD_VAR 0 2
43451: PUSH
43452: LD_VAR 0 9
43456: ARRAY
43457: PUSH
43458: LD_INT 1
43460: ARRAY
43461: PPUSH
43462: LD_VAR 0 2
43466: PUSH
43467: LD_VAR 0 9
43471: ARRAY
43472: PUSH
43473: LD_INT 2
43475: ARRAY
43476: PPUSH
43477: CALL_OW 297
43481: PUSH
43482: LD_INT 6
43484: GREATER
43485: IFFALSE 43528
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43487: LD_VAR 0 4
43491: PPUSH
43492: LD_VAR 0 2
43496: PUSH
43497: LD_VAR 0 9
43501: ARRAY
43502: PUSH
43503: LD_INT 1
43505: ARRAY
43506: PPUSH
43507: LD_VAR 0 2
43511: PUSH
43512: LD_VAR 0 9
43516: ARRAY
43517: PUSH
43518: LD_INT 2
43520: ARRAY
43521: PPUSH
43522: CALL_OW 114
43526: GO 43542
// SetTag ( i , tag ) ;
43528: LD_VAR 0 4
43532: PPUSH
43533: LD_VAR 0 9
43537: PPUSH
43538: CALL_OW 109
// end else
43542: GO 43615
// if enemy then
43544: LD_VAR 0 5
43548: IFFALSE 43615
// begin if GetWeapon ( i ) = ru_time_lapser then
43550: LD_VAR 0 4
43554: PPUSH
43555: CALL_OW 264
43559: PUSH
43560: LD_INT 49
43562: EQUAL
43563: IFFALSE 43591
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43565: LD_VAR 0 4
43569: PPUSH
43570: LD_VAR 0 5
43574: PPUSH
43575: LD_VAR 0 4
43579: PPUSH
43580: CALL_OW 74
43584: PPUSH
43585: CALL_OW 112
43589: GO 43615
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43591: LD_VAR 0 4
43595: PPUSH
43596: LD_VAR 0 5
43600: PPUSH
43601: LD_VAR 0 4
43605: PPUSH
43606: CALL_OW 74
43610: PPUSH
43611: CALL 44544 0 2
// end ; end ;
43615: GO 43195
43617: POP
43618: POP
// end ;
43619: LD_VAR 0 3
43623: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43624: LD_INT 0
43626: PPUSH
43627: PPUSH
43628: PPUSH
// if not unit or IsInUnit ( unit ) then
43629: LD_VAR 0 1
43633: NOT
43634: PUSH
43635: LD_VAR 0 1
43639: PPUSH
43640: CALL_OW 310
43644: OR
43645: IFFALSE 43649
// exit ;
43647: GO 43740
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43649: LD_ADDR_VAR 0 4
43653: PUSH
43654: LD_VAR 0 1
43658: PPUSH
43659: CALL_OW 250
43663: PPUSH
43664: LD_VAR 0 2
43668: PPUSH
43669: LD_INT 1
43671: PPUSH
43672: CALL_OW 272
43676: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43677: LD_ADDR_VAR 0 5
43681: PUSH
43682: LD_VAR 0 1
43686: PPUSH
43687: CALL_OW 251
43691: PPUSH
43692: LD_VAR 0 2
43696: PPUSH
43697: LD_INT 1
43699: PPUSH
43700: CALL_OW 273
43704: ST_TO_ADDR
// if ValidHex ( x , y ) then
43705: LD_VAR 0 4
43709: PPUSH
43710: LD_VAR 0 5
43714: PPUSH
43715: CALL_OW 488
43719: IFFALSE 43740
// ComTurnXY ( unit , x , y ) ;
43721: LD_VAR 0 1
43725: PPUSH
43726: LD_VAR 0 4
43730: PPUSH
43731: LD_VAR 0 5
43735: PPUSH
43736: CALL_OW 118
// end ;
43740: LD_VAR 0 3
43744: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43745: LD_INT 0
43747: PPUSH
43748: PPUSH
// result := false ;
43749: LD_ADDR_VAR 0 3
43753: PUSH
43754: LD_INT 0
43756: ST_TO_ADDR
// if not units then
43757: LD_VAR 0 2
43761: NOT
43762: IFFALSE 43766
// exit ;
43764: GO 43811
// for i in units do
43766: LD_ADDR_VAR 0 4
43770: PUSH
43771: LD_VAR 0 2
43775: PUSH
43776: FOR_IN
43777: IFFALSE 43809
// if See ( side , i ) then
43779: LD_VAR 0 1
43783: PPUSH
43784: LD_VAR 0 4
43788: PPUSH
43789: CALL_OW 292
43793: IFFALSE 43807
// begin result := true ;
43795: LD_ADDR_VAR 0 3
43799: PUSH
43800: LD_INT 1
43802: ST_TO_ADDR
// exit ;
43803: POP
43804: POP
43805: GO 43811
// end ;
43807: GO 43776
43809: POP
43810: POP
// end ;
43811: LD_VAR 0 3
43815: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43816: LD_INT 0
43818: PPUSH
43819: PPUSH
43820: PPUSH
43821: PPUSH
// if not unit or not points then
43822: LD_VAR 0 1
43826: NOT
43827: PUSH
43828: LD_VAR 0 2
43832: NOT
43833: OR
43834: IFFALSE 43838
// exit ;
43836: GO 43928
// dist := 99999 ;
43838: LD_ADDR_VAR 0 5
43842: PUSH
43843: LD_INT 99999
43845: ST_TO_ADDR
// for i in points do
43846: LD_ADDR_VAR 0 4
43850: PUSH
43851: LD_VAR 0 2
43855: PUSH
43856: FOR_IN
43857: IFFALSE 43926
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43859: LD_ADDR_VAR 0 6
43863: PUSH
43864: LD_VAR 0 1
43868: PPUSH
43869: LD_VAR 0 4
43873: PUSH
43874: LD_INT 1
43876: ARRAY
43877: PPUSH
43878: LD_VAR 0 4
43882: PUSH
43883: LD_INT 2
43885: ARRAY
43886: PPUSH
43887: CALL_OW 297
43891: ST_TO_ADDR
// if tmpDist < dist then
43892: LD_VAR 0 6
43896: PUSH
43897: LD_VAR 0 5
43901: LESS
43902: IFFALSE 43924
// begin result := i ;
43904: LD_ADDR_VAR 0 3
43908: PUSH
43909: LD_VAR 0 4
43913: ST_TO_ADDR
// dist := tmpDist ;
43914: LD_ADDR_VAR 0 5
43918: PUSH
43919: LD_VAR 0 6
43923: ST_TO_ADDR
// end ; end ;
43924: GO 43856
43926: POP
43927: POP
// end ;
43928: LD_VAR 0 3
43932: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43933: LD_INT 0
43935: PPUSH
// uc_side := side ;
43936: LD_ADDR_OWVAR 20
43940: PUSH
43941: LD_VAR 0 1
43945: ST_TO_ADDR
// uc_nation := 3 ;
43946: LD_ADDR_OWVAR 21
43950: PUSH
43951: LD_INT 3
43953: ST_TO_ADDR
// vc_chassis := 25 ;
43954: LD_ADDR_OWVAR 37
43958: PUSH
43959: LD_INT 25
43961: ST_TO_ADDR
// vc_engine := engine_siberite ;
43962: LD_ADDR_OWVAR 39
43966: PUSH
43967: LD_INT 3
43969: ST_TO_ADDR
// vc_control := control_computer ;
43970: LD_ADDR_OWVAR 38
43974: PUSH
43975: LD_INT 3
43977: ST_TO_ADDR
// vc_weapon := 59 ;
43978: LD_ADDR_OWVAR 40
43982: PUSH
43983: LD_INT 59
43985: ST_TO_ADDR
// result := CreateVehicle ;
43986: LD_ADDR_VAR 0 5
43990: PUSH
43991: CALL_OW 45
43995: ST_TO_ADDR
// SetDir ( result , d ) ;
43996: LD_VAR 0 5
44000: PPUSH
44001: LD_VAR 0 4
44005: PPUSH
44006: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44010: LD_VAR 0 5
44014: PPUSH
44015: LD_VAR 0 2
44019: PPUSH
44020: LD_VAR 0 3
44024: PPUSH
44025: LD_INT 0
44027: PPUSH
44028: CALL_OW 48
// end ;
44032: LD_VAR 0 5
44036: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44037: LD_INT 0
44039: PPUSH
44040: PPUSH
44041: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44042: LD_ADDR_VAR 0 2
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: LD_INT 0
44052: PUSH
44053: LD_INT 0
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44065: LD_VAR 0 1
44069: NOT
44070: PUSH
44071: LD_VAR 0 1
44075: PPUSH
44076: CALL_OW 264
44080: PUSH
44081: LD_INT 12
44083: PUSH
44084: LD_INT 51
44086: PUSH
44087: LD_INT 32
44089: PUSH
44090: LD_INT 89
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: IN
44099: NOT
44100: OR
44101: IFFALSE 44105
// exit ;
44103: GO 44203
// for i := 1 to 3 do
44105: LD_ADDR_VAR 0 3
44109: PUSH
44110: DOUBLE
44111: LD_INT 1
44113: DEC
44114: ST_TO_ADDR
44115: LD_INT 3
44117: PUSH
44118: FOR_TO
44119: IFFALSE 44201
// begin tmp := GetCargo ( cargo , i ) ;
44121: LD_ADDR_VAR 0 4
44125: PUSH
44126: LD_VAR 0 1
44130: PPUSH
44131: LD_VAR 0 3
44135: PPUSH
44136: CALL_OW 289
44140: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44141: LD_ADDR_VAR 0 2
44145: PUSH
44146: LD_VAR 0 2
44150: PPUSH
44151: LD_VAR 0 3
44155: PPUSH
44156: LD_VAR 0 4
44160: PPUSH
44161: CALL_OW 1
44165: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44166: LD_ADDR_VAR 0 2
44170: PUSH
44171: LD_VAR 0 2
44175: PPUSH
44176: LD_INT 4
44178: PPUSH
44179: LD_VAR 0 2
44183: PUSH
44184: LD_INT 4
44186: ARRAY
44187: PUSH
44188: LD_VAR 0 4
44192: PLUS
44193: PPUSH
44194: CALL_OW 1
44198: ST_TO_ADDR
// end ;
44199: GO 44118
44201: POP
44202: POP
// end ;
44203: LD_VAR 0 2
44207: RET
// export function Length ( array ) ; begin
44208: LD_INT 0
44210: PPUSH
// result := array + 0 ;
44211: LD_ADDR_VAR 0 2
44215: PUSH
44216: LD_VAR 0 1
44220: PUSH
44221: LD_INT 0
44223: PLUS
44224: ST_TO_ADDR
// end ;
44225: LD_VAR 0 2
44229: RET
// export function PrepareArray ( array ) ; begin
44230: LD_INT 0
44232: PPUSH
// result := array diff 0 ;
44233: LD_ADDR_VAR 0 2
44237: PUSH
44238: LD_VAR 0 1
44242: PUSH
44243: LD_INT 0
44245: DIFF
44246: ST_TO_ADDR
// if not result [ 1 ] then
44247: LD_VAR 0 2
44251: PUSH
44252: LD_INT 1
44254: ARRAY
44255: NOT
44256: IFFALSE 44276
// result := Delete ( result , 1 ) ;
44258: LD_ADDR_VAR 0 2
44262: PUSH
44263: LD_VAR 0 2
44267: PPUSH
44268: LD_INT 1
44270: PPUSH
44271: CALL_OW 3
44275: ST_TO_ADDR
// end ;
44276: LD_VAR 0 2
44280: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44281: LD_INT 0
44283: PPUSH
44284: PPUSH
44285: PPUSH
44286: PPUSH
// sibRocketRange := 25 ;
44287: LD_ADDR_VAR 0 6
44291: PUSH
44292: LD_INT 25
44294: ST_TO_ADDR
// result := false ;
44295: LD_ADDR_VAR 0 4
44299: PUSH
44300: LD_INT 0
44302: ST_TO_ADDR
// for i := 0 to 5 do
44303: LD_ADDR_VAR 0 5
44307: PUSH
44308: DOUBLE
44309: LD_INT 0
44311: DEC
44312: ST_TO_ADDR
44313: LD_INT 5
44315: PUSH
44316: FOR_TO
44317: IFFALSE 44384
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44319: LD_VAR 0 1
44323: PPUSH
44324: LD_VAR 0 5
44328: PPUSH
44329: LD_VAR 0 6
44333: PPUSH
44334: CALL_OW 272
44338: PPUSH
44339: LD_VAR 0 2
44343: PPUSH
44344: LD_VAR 0 5
44348: PPUSH
44349: LD_VAR 0 6
44353: PPUSH
44354: CALL_OW 273
44358: PPUSH
44359: LD_VAR 0 3
44363: PPUSH
44364: CALL_OW 309
44368: IFFALSE 44382
// begin result := true ;
44370: LD_ADDR_VAR 0 4
44374: PUSH
44375: LD_INT 1
44377: ST_TO_ADDR
// exit ;
44378: POP
44379: POP
44380: GO 44386
// end ;
44382: GO 44316
44384: POP
44385: POP
// end ;
44386: LD_VAR 0 4
44390: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44391: LD_INT 0
44393: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44394: LD_VAR 0 1
44398: PPUSH
44399: LD_VAR 0 2
44403: PPUSH
44404: LD_INT 0
44406: PPUSH
44407: LD_INT 0
44409: PPUSH
44410: LD_INT 1
44412: PPUSH
44413: LD_INT 0
44415: PPUSH
44416: CALL_OW 587
// end ;
44420: LD_VAR 0 3
44424: RET
// export function CenterOnNow ( unit ) ; begin
44425: LD_INT 0
44427: PPUSH
// result := IsInUnit ( unit ) ;
44428: LD_ADDR_VAR 0 2
44432: PUSH
44433: LD_VAR 0 1
44437: PPUSH
44438: CALL_OW 310
44442: ST_TO_ADDR
// if not result then
44443: LD_VAR 0 2
44447: NOT
44448: IFFALSE 44460
// result := unit ;
44450: LD_ADDR_VAR 0 2
44454: PUSH
44455: LD_VAR 0 1
44459: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44460: LD_VAR 0 1
44464: PPUSH
44465: CALL_OW 87
// end ;
44469: LD_VAR 0 2
44473: RET
// export function ComMoveHex ( unit , hex ) ; begin
44474: LD_INT 0
44476: PPUSH
// if not hex then
44477: LD_VAR 0 2
44481: NOT
44482: IFFALSE 44486
// exit ;
44484: GO 44539
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44486: LD_VAR 0 2
44490: PUSH
44491: LD_INT 1
44493: ARRAY
44494: PPUSH
44495: LD_VAR 0 2
44499: PUSH
44500: LD_INT 2
44502: ARRAY
44503: PPUSH
44504: CALL_OW 428
44508: IFFALSE 44512
// exit ;
44510: GO 44539
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44512: LD_VAR 0 1
44516: PPUSH
44517: LD_VAR 0 2
44521: PUSH
44522: LD_INT 1
44524: ARRAY
44525: PPUSH
44526: LD_VAR 0 2
44530: PUSH
44531: LD_INT 2
44533: ARRAY
44534: PPUSH
44535: CALL_OW 111
// end ;
44539: LD_VAR 0 3
44543: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44544: LD_INT 0
44546: PPUSH
44547: PPUSH
44548: PPUSH
// if not unit or not enemy then
44549: LD_VAR 0 1
44553: NOT
44554: PUSH
44555: LD_VAR 0 2
44559: NOT
44560: OR
44561: IFFALSE 44565
// exit ;
44563: GO 44689
// x := GetX ( enemy ) ;
44565: LD_ADDR_VAR 0 4
44569: PUSH
44570: LD_VAR 0 2
44574: PPUSH
44575: CALL_OW 250
44579: ST_TO_ADDR
// y := GetY ( enemy ) ;
44580: LD_ADDR_VAR 0 5
44584: PUSH
44585: LD_VAR 0 2
44589: PPUSH
44590: CALL_OW 251
44594: ST_TO_ADDR
// if ValidHex ( x , y ) then
44595: LD_VAR 0 4
44599: PPUSH
44600: LD_VAR 0 5
44604: PPUSH
44605: CALL_OW 488
44609: IFFALSE 44689
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
44611: LD_VAR 0 2
44615: PPUSH
44616: CALL_OW 247
44620: PUSH
44621: LD_INT 3
44623: PUSH
44624: LD_INT 2
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: IN
44631: PUSH
44632: LD_VAR 0 1
44636: PPUSH
44637: CALL_OW 255
44641: PPUSH
44642: LD_VAR 0 2
44646: PPUSH
44647: CALL_OW 292
44651: AND
44652: IFFALSE 44670
// ComAttackUnit ( unit , enemy ) else
44654: LD_VAR 0 1
44658: PPUSH
44659: LD_VAR 0 2
44663: PPUSH
44664: CALL_OW 115
44668: GO 44689
// ComAgressiveMove ( unit , x , y ) ;
44670: LD_VAR 0 1
44674: PPUSH
44675: LD_VAR 0 4
44679: PPUSH
44680: LD_VAR 0 5
44684: PPUSH
44685: CALL_OW 114
// end ; end_of_file
44689: LD_VAR 0 3
44693: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
44694: LD_INT 0
44696: PPUSH
44697: PPUSH
44698: PPUSH
44699: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
44700: LD_VAR 0 1
44704: PPUSH
44705: CALL_OW 264
44709: PUSH
44710: LD_INT 91
44712: EQUAL
44713: IFFALSE 44785
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
44715: LD_INT 68
44717: PPUSH
44718: LD_VAR 0 1
44722: PPUSH
44723: CALL_OW 255
44727: PPUSH
44728: CALL_OW 321
44732: PUSH
44733: LD_INT 2
44735: EQUAL
44736: IFFALSE 44748
// eff := 70 else
44738: LD_ADDR_VAR 0 4
44742: PUSH
44743: LD_INT 70
44745: ST_TO_ADDR
44746: GO 44756
// eff := 30 ;
44748: LD_ADDR_VAR 0 4
44752: PUSH
44753: LD_INT 30
44755: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
44756: LD_VAR 0 1
44760: PPUSH
44761: CALL_OW 250
44765: PPUSH
44766: LD_VAR 0 1
44770: PPUSH
44771: CALL_OW 251
44775: PPUSH
44776: LD_VAR 0 4
44780: PPUSH
44781: CALL_OW 495
// end ; end ;
44785: LD_VAR 0 2
44789: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
44790: LD_INT 0
44792: PPUSH
// end ;
44793: LD_VAR 0 4
44797: RET
// export function SOS_Command ( cmd ) ; begin
44798: LD_INT 0
44800: PPUSH
// end ;
44801: LD_VAR 0 2
44805: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
44806: LD_INT 0
44808: PPUSH
// end ;
44809: LD_VAR 0 6
44813: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
44814: LD_INT 0
44816: PPUSH
44817: PPUSH
// if not vehicle or not factory then
44818: LD_VAR 0 1
44822: NOT
44823: PUSH
44824: LD_VAR 0 2
44828: NOT
44829: OR
44830: IFFALSE 44834
// exit ;
44832: GO 45065
// if factoryWaypoints >= factory then
44834: LD_EXP 78
44838: PUSH
44839: LD_VAR 0 2
44843: GREATEREQUAL
44844: IFFALSE 45065
// if factoryWaypoints [ factory ] then
44846: LD_EXP 78
44850: PUSH
44851: LD_VAR 0 2
44855: ARRAY
44856: IFFALSE 45065
// begin if GetControl ( vehicle ) = control_manual then
44858: LD_VAR 0 1
44862: PPUSH
44863: CALL_OW 263
44867: PUSH
44868: LD_INT 1
44870: EQUAL
44871: IFFALSE 44952
// begin driver := IsDrivenBy ( vehicle ) ;
44873: LD_ADDR_VAR 0 4
44877: PUSH
44878: LD_VAR 0 1
44882: PPUSH
44883: CALL_OW 311
44887: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
44888: LD_VAR 0 4
44892: PPUSH
44893: LD_EXP 78
44897: PUSH
44898: LD_VAR 0 2
44902: ARRAY
44903: PUSH
44904: LD_INT 3
44906: ARRAY
44907: PPUSH
44908: LD_EXP 78
44912: PUSH
44913: LD_VAR 0 2
44917: ARRAY
44918: PUSH
44919: LD_INT 4
44921: ARRAY
44922: PPUSH
44923: CALL_OW 171
// AddComExitVehicle ( driver ) ;
44927: LD_VAR 0 4
44931: PPUSH
44932: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
44936: LD_VAR 0 4
44940: PPUSH
44941: LD_VAR 0 2
44945: PPUSH
44946: CALL_OW 180
// end else
44950: GO 45065
// if GetControl ( vehicle ) = control_remote then
44952: LD_VAR 0 1
44956: PPUSH
44957: CALL_OW 263
44961: PUSH
44962: LD_INT 2
44964: EQUAL
44965: IFFALSE 45026
// begin wait ( 0 0$2 ) ;
44967: LD_INT 70
44969: PPUSH
44970: CALL_OW 67
// if Connect ( vehicle ) then
44974: LD_VAR 0 1
44978: PPUSH
44979: CALL 11078 0 1
44983: IFFALSE 45024
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
44985: LD_VAR 0 1
44989: PPUSH
44990: LD_EXP 78
44994: PUSH
44995: LD_VAR 0 2
44999: ARRAY
45000: PUSH
45001: LD_INT 3
45003: ARRAY
45004: PPUSH
45005: LD_EXP 78
45009: PUSH
45010: LD_VAR 0 2
45014: ARRAY
45015: PUSH
45016: LD_INT 4
45018: ARRAY
45019: PPUSH
45020: CALL_OW 171
// end else
45024: GO 45065
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
45026: LD_VAR 0 1
45030: PPUSH
45031: LD_EXP 78
45035: PUSH
45036: LD_VAR 0 2
45040: ARRAY
45041: PUSH
45042: LD_INT 3
45044: ARRAY
45045: PPUSH
45046: LD_EXP 78
45050: PUSH
45051: LD_VAR 0 2
45055: ARRAY
45056: PUSH
45057: LD_INT 4
45059: ARRAY
45060: PPUSH
45061: CALL_OW 171
// end ; end ;
45065: LD_VAR 0 3
45069: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
45070: LD_INT 0
45072: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
45073: LD_VAR 0 1
45077: PUSH
45078: LD_INT 250
45080: EQUAL
45081: PUSH
45082: LD_VAR 0 2
45086: PPUSH
45087: CALL_OW 264
45091: PUSH
45092: LD_INT 81
45094: EQUAL
45095: AND
45096: IFFALSE 45117
// MinerPlaceMine ( unit , x , y ) ;
45098: LD_VAR 0 2
45102: PPUSH
45103: LD_VAR 0 4
45107: PPUSH
45108: LD_VAR 0 5
45112: PPUSH
45113: CALL 47941 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
45117: LD_VAR 0 1
45121: PUSH
45122: LD_INT 251
45124: EQUAL
45125: PUSH
45126: LD_VAR 0 2
45130: PPUSH
45131: CALL_OW 264
45135: PUSH
45136: LD_INT 81
45138: EQUAL
45139: AND
45140: IFFALSE 45161
// MinerDetonateMine ( unit , x , y ) ;
45142: LD_VAR 0 2
45146: PPUSH
45147: LD_VAR 0 4
45151: PPUSH
45152: LD_VAR 0 5
45156: PPUSH
45157: CALL 48216 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
45161: LD_VAR 0 1
45165: PUSH
45166: LD_INT 252
45168: EQUAL
45169: PUSH
45170: LD_VAR 0 2
45174: PPUSH
45175: CALL_OW 264
45179: PUSH
45180: LD_INT 81
45182: EQUAL
45183: AND
45184: IFFALSE 45205
// MinerCreateMinefield ( unit , x , y ) ;
45186: LD_VAR 0 2
45190: PPUSH
45191: LD_VAR 0 4
45195: PPUSH
45196: LD_VAR 0 5
45200: PPUSH
45201: CALL 48633 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
45205: LD_VAR 0 1
45209: PUSH
45210: LD_INT 253
45212: EQUAL
45213: PUSH
45214: LD_VAR 0 2
45218: PPUSH
45219: CALL_OW 257
45223: PUSH
45224: LD_INT 5
45226: EQUAL
45227: AND
45228: IFFALSE 45249
// ComBinocular ( unit , x , y ) ;
45230: LD_VAR 0 2
45234: PPUSH
45235: LD_VAR 0 4
45239: PPUSH
45240: LD_VAR 0 5
45244: PPUSH
45245: CALL 49002 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
45249: LD_VAR 0 1
45253: PUSH
45254: LD_INT 254
45256: EQUAL
45257: PUSH
45258: LD_VAR 0 2
45262: PPUSH
45263: CALL_OW 264
45267: PUSH
45268: LD_INT 99
45270: EQUAL
45271: AND
45272: PUSH
45273: LD_VAR 0 3
45277: PPUSH
45278: CALL_OW 263
45282: PUSH
45283: LD_INT 3
45285: EQUAL
45286: AND
45287: IFFALSE 45303
// HackDestroyVehicle ( unit , selectedUnit ) ;
45289: LD_VAR 0 2
45293: PPUSH
45294: LD_VAR 0 3
45298: PPUSH
45299: CALL 47305 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
45303: LD_VAR 0 1
45307: PUSH
45308: LD_INT 255
45310: EQUAL
45311: PUSH
45312: LD_VAR 0 2
45316: PPUSH
45317: CALL_OW 264
45321: PUSH
45322: LD_INT 14
45324: PUSH
45325: LD_INT 53
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: IN
45332: AND
45333: PUSH
45334: LD_VAR 0 4
45338: PPUSH
45339: LD_VAR 0 5
45343: PPUSH
45344: CALL_OW 488
45348: AND
45349: IFFALSE 45373
// CutTreeXYR ( unit , x , y , 12 ) ;
45351: LD_VAR 0 2
45355: PPUSH
45356: LD_VAR 0 4
45360: PPUSH
45361: LD_VAR 0 5
45365: PPUSH
45366: LD_INT 12
45368: PPUSH
45369: CALL 45468 0 4
// if cmd = 256 then
45373: LD_VAR 0 1
45377: PUSH
45378: LD_INT 256
45380: EQUAL
45381: IFFALSE 45402
// SetFactoryWaypoint ( unit , x , y ) ;
45383: LD_VAR 0 2
45387: PPUSH
45388: LD_VAR 0 4
45392: PPUSH
45393: LD_VAR 0 5
45397: PPUSH
45398: CALL 63913 0 3
// if cmd = 257 then
45402: LD_VAR 0 1
45406: PUSH
45407: LD_INT 257
45409: EQUAL
45410: IFFALSE 45431
// SetWarehouseGatheringPoint ( unit , x , y ) ;
45412: LD_VAR 0 2
45416: PPUSH
45417: LD_VAR 0 4
45421: PPUSH
45422: LD_VAR 0 5
45426: PPUSH
45427: CALL 64275 0 3
// if cmd = 258 then
45431: LD_VAR 0 1
45435: PUSH
45436: LD_INT 258
45438: EQUAL
45439: IFFALSE 45463
// BurnTreeXYR ( unit , x , y , 8 ) ;
45441: LD_VAR 0 2
45445: PPUSH
45446: LD_VAR 0 4
45450: PPUSH
45451: LD_VAR 0 5
45455: PPUSH
45456: LD_INT 8
45458: PPUSH
45459: CALL 45862 0 4
// end ;
45463: LD_VAR 0 6
45467: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
45468: LD_INT 0
45470: PPUSH
45471: PPUSH
45472: PPUSH
45473: PPUSH
45474: PPUSH
45475: PPUSH
45476: PPUSH
45477: PPUSH
45478: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
45479: LD_VAR 0 1
45483: PPUSH
45484: CALL_OW 302
45488: NOT
45489: PUSH
45490: LD_VAR 0 2
45494: PPUSH
45495: LD_VAR 0 3
45499: PPUSH
45500: CALL_OW 488
45504: NOT
45505: OR
45506: PUSH
45507: LD_VAR 0 4
45511: NOT
45512: OR
45513: IFFALSE 45517
// exit ;
45515: GO 45857
// list := [ ] ;
45517: LD_ADDR_VAR 0 13
45521: PUSH
45522: EMPTY
45523: ST_TO_ADDR
// if x - r < 0 then
45524: LD_VAR 0 2
45528: PUSH
45529: LD_VAR 0 4
45533: MINUS
45534: PUSH
45535: LD_INT 0
45537: LESS
45538: IFFALSE 45550
// min_x := 0 else
45540: LD_ADDR_VAR 0 7
45544: PUSH
45545: LD_INT 0
45547: ST_TO_ADDR
45548: GO 45566
// min_x := x - r ;
45550: LD_ADDR_VAR 0 7
45554: PUSH
45555: LD_VAR 0 2
45559: PUSH
45560: LD_VAR 0 4
45564: MINUS
45565: ST_TO_ADDR
// if y - r < 0 then
45566: LD_VAR 0 3
45570: PUSH
45571: LD_VAR 0 4
45575: MINUS
45576: PUSH
45577: LD_INT 0
45579: LESS
45580: IFFALSE 45592
// min_y := 0 else
45582: LD_ADDR_VAR 0 8
45586: PUSH
45587: LD_INT 0
45589: ST_TO_ADDR
45590: GO 45608
// min_y := y - r ;
45592: LD_ADDR_VAR 0 8
45596: PUSH
45597: LD_VAR 0 3
45601: PUSH
45602: LD_VAR 0 4
45606: MINUS
45607: ST_TO_ADDR
// max_x := x + r ;
45608: LD_ADDR_VAR 0 9
45612: PUSH
45613: LD_VAR 0 2
45617: PUSH
45618: LD_VAR 0 4
45622: PLUS
45623: ST_TO_ADDR
// max_y := y + r ;
45624: LD_ADDR_VAR 0 10
45628: PUSH
45629: LD_VAR 0 3
45633: PUSH
45634: LD_VAR 0 4
45638: PLUS
45639: ST_TO_ADDR
// for _x = min_x to max_x do
45640: LD_ADDR_VAR 0 11
45644: PUSH
45645: DOUBLE
45646: LD_VAR 0 7
45650: DEC
45651: ST_TO_ADDR
45652: LD_VAR 0 9
45656: PUSH
45657: FOR_TO
45658: IFFALSE 45775
// for _y = min_y to max_y do
45660: LD_ADDR_VAR 0 12
45664: PUSH
45665: DOUBLE
45666: LD_VAR 0 8
45670: DEC
45671: ST_TO_ADDR
45672: LD_VAR 0 10
45676: PUSH
45677: FOR_TO
45678: IFFALSE 45771
// begin if not ValidHex ( _x , _y ) then
45680: LD_VAR 0 11
45684: PPUSH
45685: LD_VAR 0 12
45689: PPUSH
45690: CALL_OW 488
45694: NOT
45695: IFFALSE 45699
// continue ;
45697: GO 45677
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
45699: LD_VAR 0 11
45703: PPUSH
45704: LD_VAR 0 12
45708: PPUSH
45709: CALL_OW 351
45713: PUSH
45714: LD_VAR 0 11
45718: PPUSH
45719: LD_VAR 0 12
45723: PPUSH
45724: CALL_OW 554
45728: AND
45729: IFFALSE 45769
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
45731: LD_ADDR_VAR 0 13
45735: PUSH
45736: LD_VAR 0 13
45740: PPUSH
45741: LD_VAR 0 13
45745: PUSH
45746: LD_INT 1
45748: PLUS
45749: PPUSH
45750: LD_VAR 0 11
45754: PUSH
45755: LD_VAR 0 12
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PPUSH
45764: CALL_OW 2
45768: ST_TO_ADDR
// end ;
45769: GO 45677
45771: POP
45772: POP
45773: GO 45657
45775: POP
45776: POP
// if not list then
45777: LD_VAR 0 13
45781: NOT
45782: IFFALSE 45786
// exit ;
45784: GO 45857
// for i in list do
45786: LD_ADDR_VAR 0 6
45790: PUSH
45791: LD_VAR 0 13
45795: PUSH
45796: FOR_IN
45797: IFFALSE 45855
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
45799: LD_VAR 0 1
45803: PPUSH
45804: LD_STRING M
45806: PUSH
45807: LD_VAR 0 6
45811: PUSH
45812: LD_INT 1
45814: ARRAY
45815: PUSH
45816: LD_VAR 0 6
45820: PUSH
45821: LD_INT 2
45823: ARRAY
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: PUSH
45846: EMPTY
45847: LIST
45848: PPUSH
45849: CALL_OW 447
45853: GO 45796
45855: POP
45856: POP
// end ;
45857: LD_VAR 0 5
45861: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
45862: LD_INT 0
45864: PPUSH
45865: PPUSH
45866: PPUSH
45867: PPUSH
45868: PPUSH
45869: PPUSH
45870: PPUSH
45871: PPUSH
45872: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
45873: LD_VAR 0 1
45877: PPUSH
45878: CALL_OW 302
45882: NOT
45883: PUSH
45884: LD_VAR 0 2
45888: PPUSH
45889: LD_VAR 0 3
45893: PPUSH
45894: CALL_OW 488
45898: NOT
45899: OR
45900: PUSH
45901: LD_VAR 0 4
45905: NOT
45906: OR
45907: IFFALSE 45911
// exit ;
45909: GO 46259
// list := [ ] ;
45911: LD_ADDR_VAR 0 13
45915: PUSH
45916: EMPTY
45917: ST_TO_ADDR
// if x - r < 0 then
45918: LD_VAR 0 2
45922: PUSH
45923: LD_VAR 0 4
45927: MINUS
45928: PUSH
45929: LD_INT 0
45931: LESS
45932: IFFALSE 45944
// min_x := 0 else
45934: LD_ADDR_VAR 0 7
45938: PUSH
45939: LD_INT 0
45941: ST_TO_ADDR
45942: GO 45960
// min_x := x - r ;
45944: LD_ADDR_VAR 0 7
45948: PUSH
45949: LD_VAR 0 2
45953: PUSH
45954: LD_VAR 0 4
45958: MINUS
45959: ST_TO_ADDR
// if y - r < 0 then
45960: LD_VAR 0 3
45964: PUSH
45965: LD_VAR 0 4
45969: MINUS
45970: PUSH
45971: LD_INT 0
45973: LESS
45974: IFFALSE 45986
// min_y := 0 else
45976: LD_ADDR_VAR 0 8
45980: PUSH
45981: LD_INT 0
45983: ST_TO_ADDR
45984: GO 46002
// min_y := y - r ;
45986: LD_ADDR_VAR 0 8
45990: PUSH
45991: LD_VAR 0 3
45995: PUSH
45996: LD_VAR 0 4
46000: MINUS
46001: ST_TO_ADDR
// max_x := x + r ;
46002: LD_ADDR_VAR 0 9
46006: PUSH
46007: LD_VAR 0 2
46011: PUSH
46012: LD_VAR 0 4
46016: PLUS
46017: ST_TO_ADDR
// max_y := y + r ;
46018: LD_ADDR_VAR 0 10
46022: PUSH
46023: LD_VAR 0 3
46027: PUSH
46028: LD_VAR 0 4
46032: PLUS
46033: ST_TO_ADDR
// for _x = min_x to max_x do
46034: LD_ADDR_VAR 0 11
46038: PUSH
46039: DOUBLE
46040: LD_VAR 0 7
46044: DEC
46045: ST_TO_ADDR
46046: LD_VAR 0 9
46050: PUSH
46051: FOR_TO
46052: IFFALSE 46169
// for _y = min_y to max_y do
46054: LD_ADDR_VAR 0 12
46058: PUSH
46059: DOUBLE
46060: LD_VAR 0 8
46064: DEC
46065: ST_TO_ADDR
46066: LD_VAR 0 10
46070: PUSH
46071: FOR_TO
46072: IFFALSE 46165
// begin if not ValidHex ( _x , _y ) then
46074: LD_VAR 0 11
46078: PPUSH
46079: LD_VAR 0 12
46083: PPUSH
46084: CALL_OW 488
46088: NOT
46089: IFFALSE 46093
// continue ;
46091: GO 46071
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
46093: LD_VAR 0 11
46097: PPUSH
46098: LD_VAR 0 12
46102: PPUSH
46103: CALL_OW 351
46107: PUSH
46108: LD_VAR 0 11
46112: PPUSH
46113: LD_VAR 0 12
46117: PPUSH
46118: CALL_OW 554
46122: AND
46123: IFFALSE 46163
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
46125: LD_ADDR_VAR 0 13
46129: PUSH
46130: LD_VAR 0 13
46134: PPUSH
46135: LD_VAR 0 13
46139: PUSH
46140: LD_INT 1
46142: PLUS
46143: PPUSH
46144: LD_VAR 0 11
46148: PUSH
46149: LD_VAR 0 12
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PPUSH
46158: CALL_OW 2
46162: ST_TO_ADDR
// end ;
46163: GO 46071
46165: POP
46166: POP
46167: GO 46051
46169: POP
46170: POP
// if not list then
46171: LD_VAR 0 13
46175: NOT
46176: IFFALSE 46180
// exit ;
46178: GO 46259
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
46180: LD_ADDR_VAR 0 13
46184: PUSH
46185: LD_VAR 0 1
46189: PPUSH
46190: LD_VAR 0 13
46194: PPUSH
46195: LD_INT 1
46197: PPUSH
46198: LD_INT 1
46200: PPUSH
46201: CALL 8220 0 4
46205: ST_TO_ADDR
// ComStop ( flame ) ;
46206: LD_VAR 0 1
46210: PPUSH
46211: CALL_OW 141
// for i in list do
46215: LD_ADDR_VAR 0 6
46219: PUSH
46220: LD_VAR 0 13
46224: PUSH
46225: FOR_IN
46226: IFFALSE 46257
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
46228: LD_VAR 0 1
46232: PPUSH
46233: LD_VAR 0 6
46237: PUSH
46238: LD_INT 1
46240: ARRAY
46241: PPUSH
46242: LD_VAR 0 6
46246: PUSH
46247: LD_INT 2
46249: ARRAY
46250: PPUSH
46251: CALL_OW 176
46255: GO 46225
46257: POP
46258: POP
// end ;
46259: LD_VAR 0 5
46263: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
46264: LD_EXP 9
46268: NOT
46269: IFFALSE 46319
46271: GO 46273
46273: DISABLE
// begin initHack := true ;
46274: LD_ADDR_EXP 9
46278: PUSH
46279: LD_INT 1
46281: ST_TO_ADDR
// hackTanks := [ ] ;
46282: LD_ADDR_EXP 10
46286: PUSH
46287: EMPTY
46288: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
46289: LD_ADDR_EXP 11
46293: PUSH
46294: EMPTY
46295: ST_TO_ADDR
// hackLimit := 3 ;
46296: LD_ADDR_EXP 12
46300: PUSH
46301: LD_INT 3
46303: ST_TO_ADDR
// hackDist := 12 ;
46304: LD_ADDR_EXP 13
46308: PUSH
46309: LD_INT 12
46311: ST_TO_ADDR
// hackCounter := [ ] ;
46312: LD_ADDR_EXP 14
46316: PUSH
46317: EMPTY
46318: ST_TO_ADDR
// end ;
46319: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
46320: LD_EXP 9
46324: PUSH
46325: LD_INT 34
46327: PUSH
46328: LD_INT 99
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PPUSH
46335: CALL_OW 69
46339: AND
46340: IFFALSE 46593
46342: GO 46344
46344: DISABLE
46345: LD_INT 0
46347: PPUSH
46348: PPUSH
// begin enable ;
46349: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
46350: LD_ADDR_VAR 0 1
46354: PUSH
46355: LD_INT 34
46357: PUSH
46358: LD_INT 99
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PPUSH
46365: CALL_OW 69
46369: PUSH
46370: FOR_IN
46371: IFFALSE 46591
// begin if not i in hackTanks then
46373: LD_VAR 0 1
46377: PUSH
46378: LD_EXP 10
46382: IN
46383: NOT
46384: IFFALSE 46467
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
46386: LD_ADDR_EXP 10
46390: PUSH
46391: LD_EXP 10
46395: PPUSH
46396: LD_EXP 10
46400: PUSH
46401: LD_INT 1
46403: PLUS
46404: PPUSH
46405: LD_VAR 0 1
46409: PPUSH
46410: CALL_OW 1
46414: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
46415: LD_ADDR_EXP 11
46419: PUSH
46420: LD_EXP 11
46424: PPUSH
46425: LD_EXP 11
46429: PUSH
46430: LD_INT 1
46432: PLUS
46433: PPUSH
46434: EMPTY
46435: PPUSH
46436: CALL_OW 1
46440: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
46441: LD_ADDR_EXP 14
46445: PUSH
46446: LD_EXP 14
46450: PPUSH
46451: LD_EXP 14
46455: PUSH
46456: LD_INT 1
46458: PLUS
46459: PPUSH
46460: EMPTY
46461: PPUSH
46462: CALL_OW 1
46466: ST_TO_ADDR
// end ; if not IsOk ( i ) then
46467: LD_VAR 0 1
46471: PPUSH
46472: CALL_OW 302
46476: NOT
46477: IFFALSE 46490
// begin HackUnlinkAll ( i ) ;
46479: LD_VAR 0 1
46483: PPUSH
46484: CALL 46596 0 1
// continue ;
46488: GO 46370
// end ; HackCheckCapturedStatus ( i ) ;
46490: LD_VAR 0 1
46494: PPUSH
46495: CALL 47039 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
46499: LD_ADDR_VAR 0 2
46503: PUSH
46504: LD_INT 81
46506: PUSH
46507: LD_VAR 0 1
46511: PPUSH
46512: CALL_OW 255
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 33
46523: PUSH
46524: LD_INT 3
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 91
46533: PUSH
46534: LD_VAR 0 1
46538: PUSH
46539: LD_EXP 13
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 50
46551: PUSH
46552: EMPTY
46553: LIST
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: PPUSH
46561: CALL_OW 69
46565: ST_TO_ADDR
// if not tmp then
46566: LD_VAR 0 2
46570: NOT
46571: IFFALSE 46575
// continue ;
46573: GO 46370
// HackLink ( i , tmp ) ;
46575: LD_VAR 0 1
46579: PPUSH
46580: LD_VAR 0 2
46584: PPUSH
46585: CALL 46732 0 2
// end ;
46589: GO 46370
46591: POP
46592: POP
// end ;
46593: PPOPN 2
46595: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
46596: LD_INT 0
46598: PPUSH
46599: PPUSH
46600: PPUSH
// if not hack in hackTanks then
46601: LD_VAR 0 1
46605: PUSH
46606: LD_EXP 10
46610: IN
46611: NOT
46612: IFFALSE 46616
// exit ;
46614: GO 46727
// index := GetElementIndex ( hackTanks , hack ) ;
46616: LD_ADDR_VAR 0 4
46620: PUSH
46621: LD_EXP 10
46625: PPUSH
46626: LD_VAR 0 1
46630: PPUSH
46631: CALL 7517 0 2
46635: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
46636: LD_EXP 11
46640: PUSH
46641: LD_VAR 0 4
46645: ARRAY
46646: IFFALSE 46727
// begin for i in hackTanksCaptured [ index ] do
46648: LD_ADDR_VAR 0 3
46652: PUSH
46653: LD_EXP 11
46657: PUSH
46658: LD_VAR 0 4
46662: ARRAY
46663: PUSH
46664: FOR_IN
46665: IFFALSE 46691
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
46667: LD_VAR 0 3
46671: PUSH
46672: LD_INT 1
46674: ARRAY
46675: PPUSH
46676: LD_VAR 0 3
46680: PUSH
46681: LD_INT 2
46683: ARRAY
46684: PPUSH
46685: CALL_OW 235
46689: GO 46664
46691: POP
46692: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
46693: LD_ADDR_EXP 11
46697: PUSH
46698: LD_EXP 11
46702: PPUSH
46703: LD_VAR 0 4
46707: PPUSH
46708: EMPTY
46709: PPUSH
46710: CALL_OW 1
46714: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
46715: LD_VAR 0 1
46719: PPUSH
46720: LD_INT 0
46722: PPUSH
46723: CALL_OW 505
// end ; end ;
46727: LD_VAR 0 2
46731: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
46732: LD_INT 0
46734: PPUSH
46735: PPUSH
46736: PPUSH
// if not hack in hackTanks or not vehicles then
46737: LD_VAR 0 1
46741: PUSH
46742: LD_EXP 10
46746: IN
46747: NOT
46748: PUSH
46749: LD_VAR 0 2
46753: NOT
46754: OR
46755: IFFALSE 46759
// exit ;
46757: GO 47034
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
46759: LD_ADDR_VAR 0 2
46763: PUSH
46764: LD_VAR 0 1
46768: PPUSH
46769: LD_VAR 0 2
46773: PPUSH
46774: LD_INT 1
46776: PPUSH
46777: LD_INT 1
46779: PPUSH
46780: CALL 8167 0 4
46784: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
46785: LD_ADDR_VAR 0 5
46789: PUSH
46790: LD_EXP 10
46794: PPUSH
46795: LD_VAR 0 1
46799: PPUSH
46800: CALL 7517 0 2
46804: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
46805: LD_EXP 11
46809: PUSH
46810: LD_VAR 0 5
46814: ARRAY
46815: PUSH
46816: LD_EXP 12
46820: LESS
46821: IFFALSE 47010
// begin for i := 1 to vehicles do
46823: LD_ADDR_VAR 0 4
46827: PUSH
46828: DOUBLE
46829: LD_INT 1
46831: DEC
46832: ST_TO_ADDR
46833: LD_VAR 0 2
46837: PUSH
46838: FOR_TO
46839: IFFALSE 47008
// begin if hackTanksCaptured [ index ] = hackLimit then
46841: LD_EXP 11
46845: PUSH
46846: LD_VAR 0 5
46850: ARRAY
46851: PUSH
46852: LD_EXP 12
46856: EQUAL
46857: IFFALSE 46861
// break ;
46859: GO 47008
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
46861: LD_ADDR_EXP 14
46865: PUSH
46866: LD_EXP 14
46870: PPUSH
46871: LD_VAR 0 5
46875: PPUSH
46876: LD_EXP 14
46880: PUSH
46881: LD_VAR 0 5
46885: ARRAY
46886: PUSH
46887: LD_INT 1
46889: PLUS
46890: PPUSH
46891: CALL_OW 1
46895: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
46896: LD_ADDR_EXP 11
46900: PUSH
46901: LD_EXP 11
46905: PPUSH
46906: LD_VAR 0 5
46910: PUSH
46911: LD_EXP 11
46915: PUSH
46916: LD_VAR 0 5
46920: ARRAY
46921: PUSH
46922: LD_INT 1
46924: PLUS
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PPUSH
46930: LD_VAR 0 2
46934: PUSH
46935: LD_VAR 0 4
46939: ARRAY
46940: PUSH
46941: LD_VAR 0 2
46945: PUSH
46946: LD_VAR 0 4
46950: ARRAY
46951: PPUSH
46952: CALL_OW 255
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PPUSH
46961: CALL 7732 0 3
46965: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
46966: LD_VAR 0 2
46970: PUSH
46971: LD_VAR 0 4
46975: ARRAY
46976: PPUSH
46977: LD_VAR 0 1
46981: PPUSH
46982: CALL_OW 255
46986: PPUSH
46987: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
46991: LD_VAR 0 2
46995: PUSH
46996: LD_VAR 0 4
47000: ARRAY
47001: PPUSH
47002: CALL_OW 141
// end ;
47006: GO 46838
47008: POP
47009: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
47010: LD_VAR 0 1
47014: PPUSH
47015: LD_EXP 11
47019: PUSH
47020: LD_VAR 0 5
47024: ARRAY
47025: PUSH
47026: LD_INT 0
47028: PLUS
47029: PPUSH
47030: CALL_OW 505
// end ;
47034: LD_VAR 0 3
47038: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
47039: LD_INT 0
47041: PPUSH
47042: PPUSH
47043: PPUSH
47044: PPUSH
// if not hack in hackTanks then
47045: LD_VAR 0 1
47049: PUSH
47050: LD_EXP 10
47054: IN
47055: NOT
47056: IFFALSE 47060
// exit ;
47058: GO 47300
// index := GetElementIndex ( hackTanks , hack ) ;
47060: LD_ADDR_VAR 0 4
47064: PUSH
47065: LD_EXP 10
47069: PPUSH
47070: LD_VAR 0 1
47074: PPUSH
47075: CALL 7517 0 2
47079: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
47080: LD_ADDR_VAR 0 3
47084: PUSH
47085: DOUBLE
47086: LD_EXP 11
47090: PUSH
47091: LD_VAR 0 4
47095: ARRAY
47096: INC
47097: ST_TO_ADDR
47098: LD_INT 1
47100: PUSH
47101: FOR_DOWNTO
47102: IFFALSE 47274
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
47104: LD_ADDR_VAR 0 5
47108: PUSH
47109: LD_EXP 11
47113: PUSH
47114: LD_VAR 0 4
47118: ARRAY
47119: PUSH
47120: LD_VAR 0 3
47124: ARRAY
47125: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
47126: LD_VAR 0 5
47130: PUSH
47131: LD_INT 1
47133: ARRAY
47134: PPUSH
47135: CALL_OW 302
47139: NOT
47140: PUSH
47141: LD_VAR 0 5
47145: PUSH
47146: LD_INT 1
47148: ARRAY
47149: PPUSH
47150: CALL_OW 255
47154: PUSH
47155: LD_VAR 0 1
47159: PPUSH
47160: CALL_OW 255
47164: NONEQUAL
47165: OR
47166: IFFALSE 47272
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
47168: LD_VAR 0 5
47172: PUSH
47173: LD_INT 1
47175: ARRAY
47176: PPUSH
47177: CALL_OW 305
47181: PUSH
47182: LD_VAR 0 5
47186: PUSH
47187: LD_INT 1
47189: ARRAY
47190: PPUSH
47191: CALL_OW 255
47195: PUSH
47196: LD_VAR 0 1
47200: PPUSH
47201: CALL_OW 255
47205: EQUAL
47206: AND
47207: IFFALSE 47231
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
47209: LD_VAR 0 5
47213: PUSH
47214: LD_INT 1
47216: ARRAY
47217: PPUSH
47218: LD_VAR 0 5
47222: PUSH
47223: LD_INT 2
47225: ARRAY
47226: PPUSH
47227: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
47231: LD_ADDR_EXP 11
47235: PUSH
47236: LD_EXP 11
47240: PPUSH
47241: LD_VAR 0 4
47245: PPUSH
47246: LD_EXP 11
47250: PUSH
47251: LD_VAR 0 4
47255: ARRAY
47256: PPUSH
47257: LD_VAR 0 3
47261: PPUSH
47262: CALL_OW 3
47266: PPUSH
47267: CALL_OW 1
47271: ST_TO_ADDR
// end ; end ;
47272: GO 47101
47274: POP
47275: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
47276: LD_VAR 0 1
47280: PPUSH
47281: LD_EXP 11
47285: PUSH
47286: LD_VAR 0 4
47290: ARRAY
47291: PUSH
47292: LD_INT 0
47294: PLUS
47295: PPUSH
47296: CALL_OW 505
// end ;
47300: LD_VAR 0 2
47304: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
47305: LD_INT 0
47307: PPUSH
47308: PPUSH
47309: PPUSH
47310: PPUSH
// if not hack in hackTanks then
47311: LD_VAR 0 1
47315: PUSH
47316: LD_EXP 10
47320: IN
47321: NOT
47322: IFFALSE 47326
// exit ;
47324: GO 47411
// index := GetElementIndex ( hackTanks , hack ) ;
47326: LD_ADDR_VAR 0 5
47330: PUSH
47331: LD_EXP 10
47335: PPUSH
47336: LD_VAR 0 1
47340: PPUSH
47341: CALL 7517 0 2
47345: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
47346: LD_ADDR_VAR 0 4
47350: PUSH
47351: DOUBLE
47352: LD_INT 1
47354: DEC
47355: ST_TO_ADDR
47356: LD_EXP 11
47360: PUSH
47361: LD_VAR 0 5
47365: ARRAY
47366: PUSH
47367: FOR_TO
47368: IFFALSE 47409
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
47370: LD_EXP 11
47374: PUSH
47375: LD_VAR 0 5
47379: ARRAY
47380: PUSH
47381: LD_VAR 0 4
47385: ARRAY
47386: PUSH
47387: LD_INT 1
47389: ARRAY
47390: PUSH
47391: LD_VAR 0 2
47395: EQUAL
47396: IFFALSE 47407
// KillUnit ( vehicle ) ;
47398: LD_VAR 0 2
47402: PPUSH
47403: CALL_OW 66
47407: GO 47367
47409: POP
47410: POP
// end ;
47411: LD_VAR 0 3
47415: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
47416: LD_EXP 15
47420: NOT
47421: IFFALSE 47456
47423: GO 47425
47425: DISABLE
// begin initMiner := true ;
47426: LD_ADDR_EXP 15
47430: PUSH
47431: LD_INT 1
47433: ST_TO_ADDR
// minersList := [ ] ;
47434: LD_ADDR_EXP 16
47438: PUSH
47439: EMPTY
47440: ST_TO_ADDR
// minerMinesList := [ ] ;
47441: LD_ADDR_EXP 17
47445: PUSH
47446: EMPTY
47447: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
47448: LD_ADDR_EXP 18
47452: PUSH
47453: LD_INT 5
47455: ST_TO_ADDR
// end ;
47456: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
47457: LD_EXP 15
47461: PUSH
47462: LD_INT 34
47464: PUSH
47465: LD_INT 81
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PPUSH
47472: CALL_OW 69
47476: AND
47477: IFFALSE 47938
47479: GO 47481
47481: DISABLE
47482: LD_INT 0
47484: PPUSH
47485: PPUSH
47486: PPUSH
47487: PPUSH
// begin enable ;
47488: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
47489: LD_ADDR_VAR 0 1
47493: PUSH
47494: LD_INT 34
47496: PUSH
47497: LD_INT 81
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PPUSH
47504: CALL_OW 69
47508: PUSH
47509: FOR_IN
47510: IFFALSE 47582
// begin if not i in minersList then
47512: LD_VAR 0 1
47516: PUSH
47517: LD_EXP 16
47521: IN
47522: NOT
47523: IFFALSE 47580
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
47525: LD_ADDR_EXP 16
47529: PUSH
47530: LD_EXP 16
47534: PPUSH
47535: LD_EXP 16
47539: PUSH
47540: LD_INT 1
47542: PLUS
47543: PPUSH
47544: LD_VAR 0 1
47548: PPUSH
47549: CALL_OW 1
47553: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
47554: LD_ADDR_EXP 17
47558: PUSH
47559: LD_EXP 17
47563: PPUSH
47564: LD_EXP 17
47568: PUSH
47569: LD_INT 1
47571: PLUS
47572: PPUSH
47573: EMPTY
47574: PPUSH
47575: CALL_OW 1
47579: ST_TO_ADDR
// end end ;
47580: GO 47509
47582: POP
47583: POP
// for i := minerMinesList downto 1 do
47584: LD_ADDR_VAR 0 1
47588: PUSH
47589: DOUBLE
47590: LD_EXP 17
47594: INC
47595: ST_TO_ADDR
47596: LD_INT 1
47598: PUSH
47599: FOR_DOWNTO
47600: IFFALSE 47936
// begin if IsLive ( minersList [ i ] ) then
47602: LD_EXP 16
47606: PUSH
47607: LD_VAR 0 1
47611: ARRAY
47612: PPUSH
47613: CALL_OW 300
47617: IFFALSE 47645
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
47619: LD_EXP 16
47623: PUSH
47624: LD_VAR 0 1
47628: ARRAY
47629: PPUSH
47630: LD_EXP 17
47634: PUSH
47635: LD_VAR 0 1
47639: ARRAY
47640: PPUSH
47641: CALL_OW 505
// if not minerMinesList [ i ] then
47645: LD_EXP 17
47649: PUSH
47650: LD_VAR 0 1
47654: ARRAY
47655: NOT
47656: IFFALSE 47660
// continue ;
47658: GO 47599
// for j := minerMinesList [ i ] downto 1 do
47660: LD_ADDR_VAR 0 2
47664: PUSH
47665: DOUBLE
47666: LD_EXP 17
47670: PUSH
47671: LD_VAR 0 1
47675: ARRAY
47676: INC
47677: ST_TO_ADDR
47678: LD_INT 1
47680: PUSH
47681: FOR_DOWNTO
47682: IFFALSE 47932
// begin side := GetSide ( minersList [ i ] ) ;
47684: LD_ADDR_VAR 0 3
47688: PUSH
47689: LD_EXP 16
47693: PUSH
47694: LD_VAR 0 1
47698: ARRAY
47699: PPUSH
47700: CALL_OW 255
47704: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
47705: LD_ADDR_VAR 0 4
47709: PUSH
47710: LD_EXP 17
47714: PUSH
47715: LD_VAR 0 1
47719: ARRAY
47720: PUSH
47721: LD_VAR 0 2
47725: ARRAY
47726: PUSH
47727: LD_INT 1
47729: ARRAY
47730: PPUSH
47731: LD_EXP 17
47735: PUSH
47736: LD_VAR 0 1
47740: ARRAY
47741: PUSH
47742: LD_VAR 0 2
47746: ARRAY
47747: PUSH
47748: LD_INT 2
47750: ARRAY
47751: PPUSH
47752: CALL_OW 428
47756: ST_TO_ADDR
// if not tmp then
47757: LD_VAR 0 4
47761: NOT
47762: IFFALSE 47766
// continue ;
47764: GO 47681
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
47766: LD_VAR 0 4
47770: PUSH
47771: LD_INT 81
47773: PUSH
47774: LD_VAR 0 3
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PPUSH
47783: CALL_OW 69
47787: IN
47788: PUSH
47789: LD_EXP 17
47793: PUSH
47794: LD_VAR 0 1
47798: ARRAY
47799: PUSH
47800: LD_VAR 0 2
47804: ARRAY
47805: PUSH
47806: LD_INT 1
47808: ARRAY
47809: PPUSH
47810: LD_EXP 17
47814: PUSH
47815: LD_VAR 0 1
47819: ARRAY
47820: PUSH
47821: LD_VAR 0 2
47825: ARRAY
47826: PUSH
47827: LD_INT 2
47829: ARRAY
47830: PPUSH
47831: CALL_OW 458
47835: AND
47836: IFFALSE 47930
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
47838: LD_EXP 17
47842: PUSH
47843: LD_VAR 0 1
47847: ARRAY
47848: PUSH
47849: LD_VAR 0 2
47853: ARRAY
47854: PUSH
47855: LD_INT 1
47857: ARRAY
47858: PPUSH
47859: LD_EXP 17
47863: PUSH
47864: LD_VAR 0 1
47868: ARRAY
47869: PUSH
47870: LD_VAR 0 2
47874: ARRAY
47875: PUSH
47876: LD_INT 2
47878: ARRAY
47879: PPUSH
47880: LD_VAR 0 3
47884: PPUSH
47885: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
47889: LD_ADDR_EXP 17
47893: PUSH
47894: LD_EXP 17
47898: PPUSH
47899: LD_VAR 0 1
47903: PPUSH
47904: LD_EXP 17
47908: PUSH
47909: LD_VAR 0 1
47913: ARRAY
47914: PPUSH
47915: LD_VAR 0 2
47919: PPUSH
47920: CALL_OW 3
47924: PPUSH
47925: CALL_OW 1
47929: ST_TO_ADDR
// end ; end ;
47930: GO 47681
47932: POP
47933: POP
// end ;
47934: GO 47599
47936: POP
47937: POP
// end ;
47938: PPOPN 4
47940: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
47941: LD_INT 0
47943: PPUSH
47944: PPUSH
// result := false ;
47945: LD_ADDR_VAR 0 4
47949: PUSH
47950: LD_INT 0
47952: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
47953: LD_VAR 0 1
47957: PPUSH
47958: CALL_OW 264
47962: PUSH
47963: LD_INT 81
47965: EQUAL
47966: NOT
47967: IFFALSE 47971
// exit ;
47969: GO 48211
// index := GetElementIndex ( minersList , unit ) ;
47971: LD_ADDR_VAR 0 5
47975: PUSH
47976: LD_EXP 16
47980: PPUSH
47981: LD_VAR 0 1
47985: PPUSH
47986: CALL 7517 0 2
47990: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
47991: LD_EXP 17
47995: PUSH
47996: LD_VAR 0 5
48000: ARRAY
48001: PUSH
48002: LD_EXP 18
48006: GREATEREQUAL
48007: IFFALSE 48011
// exit ;
48009: GO 48211
// ComMoveXY ( unit , x , y ) ;
48011: LD_VAR 0 1
48015: PPUSH
48016: LD_VAR 0 2
48020: PPUSH
48021: LD_VAR 0 3
48025: PPUSH
48026: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
48030: LD_INT 35
48032: PPUSH
48033: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
48037: LD_VAR 0 1
48041: PPUSH
48042: LD_VAR 0 2
48046: PPUSH
48047: LD_VAR 0 3
48051: PPUSH
48052: CALL 39269 0 3
48056: NOT
48057: PUSH
48058: LD_VAR 0 1
48062: PPUSH
48063: CALL_OW 314
48067: AND
48068: IFFALSE 48072
// exit ;
48070: GO 48211
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
48072: LD_VAR 0 2
48076: PPUSH
48077: LD_VAR 0 3
48081: PPUSH
48082: CALL_OW 428
48086: PUSH
48087: LD_VAR 0 1
48091: EQUAL
48092: PUSH
48093: LD_VAR 0 1
48097: PPUSH
48098: CALL_OW 314
48102: NOT
48103: AND
48104: IFFALSE 48030
// PlaySoundXY ( x , y , PlantMine ) ;
48106: LD_VAR 0 2
48110: PPUSH
48111: LD_VAR 0 3
48115: PPUSH
48116: LD_STRING PlantMine
48118: PPUSH
48119: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
48123: LD_VAR 0 2
48127: PPUSH
48128: LD_VAR 0 3
48132: PPUSH
48133: LD_VAR 0 1
48137: PPUSH
48138: CALL_OW 255
48142: PPUSH
48143: LD_INT 0
48145: PPUSH
48146: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
48150: LD_ADDR_EXP 17
48154: PUSH
48155: LD_EXP 17
48159: PPUSH
48160: LD_VAR 0 5
48164: PUSH
48165: LD_EXP 17
48169: PUSH
48170: LD_VAR 0 5
48174: ARRAY
48175: PUSH
48176: LD_INT 1
48178: PLUS
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PPUSH
48184: LD_VAR 0 2
48188: PUSH
48189: LD_VAR 0 3
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PPUSH
48198: CALL 7732 0 3
48202: ST_TO_ADDR
// result := true ;
48203: LD_ADDR_VAR 0 4
48207: PUSH
48208: LD_INT 1
48210: ST_TO_ADDR
// end ;
48211: LD_VAR 0 4
48215: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
48216: LD_INT 0
48218: PPUSH
48219: PPUSH
48220: PPUSH
// if not unit in minersList then
48221: LD_VAR 0 1
48225: PUSH
48226: LD_EXP 16
48230: IN
48231: NOT
48232: IFFALSE 48236
// exit ;
48234: GO 48628
// index := GetElementIndex ( minersList , unit ) ;
48236: LD_ADDR_VAR 0 6
48240: PUSH
48241: LD_EXP 16
48245: PPUSH
48246: LD_VAR 0 1
48250: PPUSH
48251: CALL 7517 0 2
48255: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
48256: LD_ADDR_VAR 0 5
48260: PUSH
48261: DOUBLE
48262: LD_EXP 17
48266: PUSH
48267: LD_VAR 0 6
48271: ARRAY
48272: INC
48273: ST_TO_ADDR
48274: LD_INT 1
48276: PUSH
48277: FOR_DOWNTO
48278: IFFALSE 48439
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
48280: LD_EXP 17
48284: PUSH
48285: LD_VAR 0 6
48289: ARRAY
48290: PUSH
48291: LD_VAR 0 5
48295: ARRAY
48296: PUSH
48297: LD_INT 1
48299: ARRAY
48300: PUSH
48301: LD_VAR 0 2
48305: EQUAL
48306: PUSH
48307: LD_EXP 17
48311: PUSH
48312: LD_VAR 0 6
48316: ARRAY
48317: PUSH
48318: LD_VAR 0 5
48322: ARRAY
48323: PUSH
48324: LD_INT 2
48326: ARRAY
48327: PUSH
48328: LD_VAR 0 3
48332: EQUAL
48333: AND
48334: IFFALSE 48437
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
48336: LD_EXP 17
48340: PUSH
48341: LD_VAR 0 6
48345: ARRAY
48346: PUSH
48347: LD_VAR 0 5
48351: ARRAY
48352: PUSH
48353: LD_INT 1
48355: ARRAY
48356: PPUSH
48357: LD_EXP 17
48361: PUSH
48362: LD_VAR 0 6
48366: ARRAY
48367: PUSH
48368: LD_VAR 0 5
48372: ARRAY
48373: PUSH
48374: LD_INT 2
48376: ARRAY
48377: PPUSH
48378: LD_VAR 0 1
48382: PPUSH
48383: CALL_OW 255
48387: PPUSH
48388: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
48392: LD_ADDR_EXP 17
48396: PUSH
48397: LD_EXP 17
48401: PPUSH
48402: LD_VAR 0 6
48406: PPUSH
48407: LD_EXP 17
48411: PUSH
48412: LD_VAR 0 6
48416: ARRAY
48417: PPUSH
48418: LD_VAR 0 5
48422: PPUSH
48423: CALL_OW 3
48427: PPUSH
48428: CALL_OW 1
48432: ST_TO_ADDR
// exit ;
48433: POP
48434: POP
48435: GO 48628
// end ; end ;
48437: GO 48277
48439: POP
48440: POP
// for i := minerMinesList [ index ] downto 1 do
48441: LD_ADDR_VAR 0 5
48445: PUSH
48446: DOUBLE
48447: LD_EXP 17
48451: PUSH
48452: LD_VAR 0 6
48456: ARRAY
48457: INC
48458: ST_TO_ADDR
48459: LD_INT 1
48461: PUSH
48462: FOR_DOWNTO
48463: IFFALSE 48626
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
48465: LD_EXP 17
48469: PUSH
48470: LD_VAR 0 6
48474: ARRAY
48475: PUSH
48476: LD_VAR 0 5
48480: ARRAY
48481: PUSH
48482: LD_INT 1
48484: ARRAY
48485: PPUSH
48486: LD_EXP 17
48490: PUSH
48491: LD_VAR 0 6
48495: ARRAY
48496: PUSH
48497: LD_VAR 0 5
48501: ARRAY
48502: PUSH
48503: LD_INT 2
48505: ARRAY
48506: PPUSH
48507: LD_VAR 0 2
48511: PPUSH
48512: LD_VAR 0 3
48516: PPUSH
48517: CALL_OW 298
48521: PUSH
48522: LD_INT 6
48524: LESS
48525: IFFALSE 48624
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
48527: LD_EXP 17
48531: PUSH
48532: LD_VAR 0 6
48536: ARRAY
48537: PUSH
48538: LD_VAR 0 5
48542: ARRAY
48543: PUSH
48544: LD_INT 1
48546: ARRAY
48547: PPUSH
48548: LD_EXP 17
48552: PUSH
48553: LD_VAR 0 6
48557: ARRAY
48558: PUSH
48559: LD_VAR 0 5
48563: ARRAY
48564: PUSH
48565: LD_INT 2
48567: ARRAY
48568: PPUSH
48569: LD_VAR 0 1
48573: PPUSH
48574: CALL_OW 255
48578: PPUSH
48579: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
48583: LD_ADDR_EXP 17
48587: PUSH
48588: LD_EXP 17
48592: PPUSH
48593: LD_VAR 0 6
48597: PPUSH
48598: LD_EXP 17
48602: PUSH
48603: LD_VAR 0 6
48607: ARRAY
48608: PPUSH
48609: LD_VAR 0 5
48613: PPUSH
48614: CALL_OW 3
48618: PPUSH
48619: CALL_OW 1
48623: ST_TO_ADDR
// end ; end ;
48624: GO 48462
48626: POP
48627: POP
// end ;
48628: LD_VAR 0 4
48632: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
48633: LD_INT 0
48635: PPUSH
48636: PPUSH
48637: PPUSH
48638: PPUSH
48639: PPUSH
48640: PPUSH
48641: PPUSH
48642: PPUSH
48643: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
48644: LD_VAR 0 1
48648: PPUSH
48649: CALL_OW 264
48653: PUSH
48654: LD_INT 81
48656: EQUAL
48657: NOT
48658: PUSH
48659: LD_VAR 0 1
48663: PUSH
48664: LD_EXP 16
48668: IN
48669: NOT
48670: OR
48671: IFFALSE 48675
// exit ;
48673: GO 48997
// index := GetElementIndex ( minersList , unit ) ;
48675: LD_ADDR_VAR 0 6
48679: PUSH
48680: LD_EXP 16
48684: PPUSH
48685: LD_VAR 0 1
48689: PPUSH
48690: CALL 7517 0 2
48694: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
48695: LD_ADDR_VAR 0 8
48699: PUSH
48700: LD_EXP 18
48704: PUSH
48705: LD_EXP 17
48709: PUSH
48710: LD_VAR 0 6
48714: ARRAY
48715: MINUS
48716: ST_TO_ADDR
// if not minesFreeAmount then
48717: LD_VAR 0 8
48721: NOT
48722: IFFALSE 48726
// exit ;
48724: GO 48997
// tmp := [ ] ;
48726: LD_ADDR_VAR 0 7
48730: PUSH
48731: EMPTY
48732: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
48733: LD_ADDR_VAR 0 5
48737: PUSH
48738: DOUBLE
48739: LD_INT 1
48741: DEC
48742: ST_TO_ADDR
48743: LD_VAR 0 8
48747: PUSH
48748: FOR_TO
48749: IFFALSE 48944
// begin _d := rand ( 0 , 5 ) ;
48751: LD_ADDR_VAR 0 11
48755: PUSH
48756: LD_INT 0
48758: PPUSH
48759: LD_INT 5
48761: PPUSH
48762: CALL_OW 12
48766: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
48767: LD_ADDR_VAR 0 12
48771: PUSH
48772: LD_INT 2
48774: PPUSH
48775: LD_INT 6
48777: PPUSH
48778: CALL_OW 12
48782: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
48783: LD_ADDR_VAR 0 9
48787: PUSH
48788: LD_VAR 0 2
48792: PPUSH
48793: LD_VAR 0 11
48797: PPUSH
48798: LD_VAR 0 12
48802: PPUSH
48803: CALL_OW 272
48807: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
48808: LD_ADDR_VAR 0 10
48812: PUSH
48813: LD_VAR 0 3
48817: PPUSH
48818: LD_VAR 0 11
48822: PPUSH
48823: LD_VAR 0 12
48827: PPUSH
48828: CALL_OW 273
48832: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
48833: LD_VAR 0 9
48837: PPUSH
48838: LD_VAR 0 10
48842: PPUSH
48843: CALL_OW 488
48847: PUSH
48848: LD_VAR 0 9
48852: PUSH
48853: LD_VAR 0 10
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_VAR 0 7
48866: IN
48867: NOT
48868: AND
48869: PUSH
48870: LD_VAR 0 9
48874: PPUSH
48875: LD_VAR 0 10
48879: PPUSH
48880: CALL_OW 458
48884: NOT
48885: AND
48886: IFFALSE 48928
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
48888: LD_ADDR_VAR 0 7
48892: PUSH
48893: LD_VAR 0 7
48897: PPUSH
48898: LD_VAR 0 7
48902: PUSH
48903: LD_INT 1
48905: PLUS
48906: PPUSH
48907: LD_VAR 0 9
48911: PUSH
48912: LD_VAR 0 10
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PPUSH
48921: CALL_OW 1
48925: ST_TO_ADDR
48926: GO 48942
// i := i - 1 ;
48928: LD_ADDR_VAR 0 5
48932: PUSH
48933: LD_VAR 0 5
48937: PUSH
48938: LD_INT 1
48940: MINUS
48941: ST_TO_ADDR
// end ;
48942: GO 48748
48944: POP
48945: POP
// for i in tmp do
48946: LD_ADDR_VAR 0 5
48950: PUSH
48951: LD_VAR 0 7
48955: PUSH
48956: FOR_IN
48957: IFFALSE 48995
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
48959: LD_VAR 0 1
48963: PPUSH
48964: LD_VAR 0 5
48968: PUSH
48969: LD_INT 1
48971: ARRAY
48972: PPUSH
48973: LD_VAR 0 5
48977: PUSH
48978: LD_INT 2
48980: ARRAY
48981: PPUSH
48982: CALL 47941 0 3
48986: NOT
48987: IFFALSE 48993
// exit ;
48989: POP
48990: POP
48991: GO 48997
48993: GO 48956
48995: POP
48996: POP
// end ;
48997: LD_VAR 0 4
49001: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
49002: LD_INT 0
49004: PPUSH
49005: PPUSH
49006: PPUSH
49007: PPUSH
49008: PPUSH
49009: PPUSH
49010: PPUSH
// if not GetClass ( unit ) = class_sniper then
49011: LD_VAR 0 1
49015: PPUSH
49016: CALL_OW 257
49020: PUSH
49021: LD_INT 5
49023: EQUAL
49024: NOT
49025: IFFALSE 49029
// exit ;
49027: GO 49417
// dist := 8 ;
49029: LD_ADDR_VAR 0 5
49033: PUSH
49034: LD_INT 8
49036: ST_TO_ADDR
// viewRange := 12 ;
49037: LD_ADDR_VAR 0 7
49041: PUSH
49042: LD_INT 12
49044: ST_TO_ADDR
// side := GetSide ( unit ) ;
49045: LD_ADDR_VAR 0 6
49049: PUSH
49050: LD_VAR 0 1
49054: PPUSH
49055: CALL_OW 255
49059: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
49060: LD_INT 61
49062: PPUSH
49063: LD_VAR 0 6
49067: PPUSH
49068: CALL_OW 321
49072: PUSH
49073: LD_INT 2
49075: EQUAL
49076: IFFALSE 49086
// viewRange := 16 ;
49078: LD_ADDR_VAR 0 7
49082: PUSH
49083: LD_INT 16
49085: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
49086: LD_VAR 0 1
49090: PPUSH
49091: LD_VAR 0 2
49095: PPUSH
49096: LD_VAR 0 3
49100: PPUSH
49101: CALL_OW 297
49105: PUSH
49106: LD_VAR 0 5
49110: GREATER
49111: IFFALSE 49190
// begin ComMoveXY ( unit , x , y ) ;
49113: LD_VAR 0 1
49117: PPUSH
49118: LD_VAR 0 2
49122: PPUSH
49123: LD_VAR 0 3
49127: PPUSH
49128: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
49132: LD_INT 35
49134: PPUSH
49135: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
49139: LD_VAR 0 1
49143: PPUSH
49144: LD_VAR 0 2
49148: PPUSH
49149: LD_VAR 0 3
49153: PPUSH
49154: CALL 39269 0 3
49158: NOT
49159: IFFALSE 49163
// exit ;
49161: GO 49417
// until GetDistUnitXY ( unit , x , y ) < dist ;
49163: LD_VAR 0 1
49167: PPUSH
49168: LD_VAR 0 2
49172: PPUSH
49173: LD_VAR 0 3
49177: PPUSH
49178: CALL_OW 297
49182: PUSH
49183: LD_VAR 0 5
49187: LESS
49188: IFFALSE 49132
// end ; ComTurnXY ( unit , x , y ) ;
49190: LD_VAR 0 1
49194: PPUSH
49195: LD_VAR 0 2
49199: PPUSH
49200: LD_VAR 0 3
49204: PPUSH
49205: CALL_OW 118
// wait ( 5 ) ;
49209: LD_INT 5
49211: PPUSH
49212: CALL_OW 67
// _d := GetDir ( unit ) ;
49216: LD_ADDR_VAR 0 10
49220: PUSH
49221: LD_VAR 0 1
49225: PPUSH
49226: CALL_OW 254
49230: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
49231: LD_ADDR_VAR 0 8
49235: PUSH
49236: LD_VAR 0 1
49240: PPUSH
49241: CALL_OW 250
49245: PPUSH
49246: LD_VAR 0 10
49250: PPUSH
49251: LD_VAR 0 5
49255: PPUSH
49256: CALL_OW 272
49260: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
49261: LD_ADDR_VAR 0 9
49265: PUSH
49266: LD_VAR 0 1
49270: PPUSH
49271: CALL_OW 251
49275: PPUSH
49276: LD_VAR 0 10
49280: PPUSH
49281: LD_VAR 0 5
49285: PPUSH
49286: CALL_OW 273
49290: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49291: LD_VAR 0 8
49295: PPUSH
49296: LD_VAR 0 9
49300: PPUSH
49301: CALL_OW 488
49305: NOT
49306: IFFALSE 49310
// exit ;
49308: GO 49417
// ComAnimCustom ( unit , 1 ) ;
49310: LD_VAR 0 1
49314: PPUSH
49315: LD_INT 1
49317: PPUSH
49318: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
49322: LD_VAR 0 8
49326: PPUSH
49327: LD_VAR 0 9
49331: PPUSH
49332: LD_VAR 0 6
49336: PPUSH
49337: LD_VAR 0 7
49341: PPUSH
49342: CALL_OW 330
// repeat wait ( 1 ) ;
49346: LD_INT 1
49348: PPUSH
49349: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
49353: LD_VAR 0 1
49357: PPUSH
49358: CALL_OW 316
49362: PUSH
49363: LD_VAR 0 1
49367: PPUSH
49368: CALL_OW 314
49372: OR
49373: PUSH
49374: LD_VAR 0 1
49378: PPUSH
49379: CALL_OW 302
49383: NOT
49384: OR
49385: PUSH
49386: LD_VAR 0 1
49390: PPUSH
49391: CALL_OW 301
49395: OR
49396: IFFALSE 49346
// RemoveSeeing ( _x , _y , side ) ;
49398: LD_VAR 0 8
49402: PPUSH
49403: LD_VAR 0 9
49407: PPUSH
49408: LD_VAR 0 6
49412: PPUSH
49413: CALL_OW 331
// end ; end_of_file
49417: LD_VAR 0 4
49421: RET
// export globalGameSaveCounter ; every 0 0$1 do
49422: GO 49424
49424: DISABLE
// begin enable ;
49425: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
49426: LD_STRING updateTimer(
49428: PUSH
49429: LD_OWVAR 1
49433: STR
49434: PUSH
49435: LD_STRING );
49437: STR
49438: PPUSH
49439: CALL_OW 559
// end ;
49443: END
// every 0 0$1 do
49444: GO 49446
49446: DISABLE
// begin globalGameSaveCounter := 0 ;
49447: LD_ADDR_EXP 19
49451: PUSH
49452: LD_INT 0
49454: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
49455: LD_STRING setGameSaveCounter(0)
49457: PPUSH
49458: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
49462: LD_STRING initStreamRollete();
49464: PPUSH
49465: CALL_OW 559
// InitStreamMode ;
49469: CALL 50795 0 0
// DefineStreamItems ( false ) ;
49473: LD_INT 0
49475: PPUSH
49476: CALL 51259 0 1
// end ;
49480: END
// export function SOS_MapStart ( ) ; begin
49481: LD_INT 0
49483: PPUSH
// if streamModeActive then
49484: LD_EXP 20
49488: IFFALSE 49497
// DefineStreamItems ( true ) ;
49490: LD_INT 1
49492: PPUSH
49493: CALL 51259 0 1
// UpdateLuaVariables ( ) ;
49497: CALL 49514 0 0
// UpdateFactoryWaypoints ( ) ;
49501: CALL 64128 0 0
// UpdateWarehouseGatheringPoints ( ) ;
49505: CALL 64385 0 0
// end ;
49509: LD_VAR 0 1
49513: RET
// function UpdateLuaVariables ( ) ; begin
49514: LD_INT 0
49516: PPUSH
// if globalGameSaveCounter then
49517: LD_EXP 19
49521: IFFALSE 49555
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
49523: LD_ADDR_EXP 19
49527: PUSH
49528: LD_EXP 19
49532: PPUSH
49533: CALL 41833 0 1
49537: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
49538: LD_STRING setGameSaveCounter(
49540: PUSH
49541: LD_EXP 19
49545: STR
49546: PUSH
49547: LD_STRING )
49549: STR
49550: PPUSH
49551: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
49555: LD_STRING setGameDifficulty(
49557: PUSH
49558: LD_OWVAR 67
49562: STR
49563: PUSH
49564: LD_STRING )
49566: STR
49567: PPUSH
49568: CALL_OW 559
// end ;
49572: LD_VAR 0 1
49576: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
49577: LD_INT 0
49579: PPUSH
// if p2 = stream_mode then
49580: LD_VAR 0 2
49584: PUSH
49585: LD_INT 100
49587: EQUAL
49588: IFFALSE 50591
// begin if not StreamModeActive then
49590: LD_EXP 20
49594: NOT
49595: IFFALSE 49605
// StreamModeActive := true ;
49597: LD_ADDR_EXP 20
49601: PUSH
49602: LD_INT 1
49604: ST_TO_ADDR
// if p3 = 0 then
49605: LD_VAR 0 3
49609: PUSH
49610: LD_INT 0
49612: EQUAL
49613: IFFALSE 49619
// InitStreamMode ;
49615: CALL 50795 0 0
// if p3 = 1 then
49619: LD_VAR 0 3
49623: PUSH
49624: LD_INT 1
49626: EQUAL
49627: IFFALSE 49637
// sRocket := true ;
49629: LD_ADDR_EXP 25
49633: PUSH
49634: LD_INT 1
49636: ST_TO_ADDR
// if p3 = 2 then
49637: LD_VAR 0 3
49641: PUSH
49642: LD_INT 2
49644: EQUAL
49645: IFFALSE 49655
// sSpeed := true ;
49647: LD_ADDR_EXP 24
49651: PUSH
49652: LD_INT 1
49654: ST_TO_ADDR
// if p3 = 3 then
49655: LD_VAR 0 3
49659: PUSH
49660: LD_INT 3
49662: EQUAL
49663: IFFALSE 49673
// sEngine := true ;
49665: LD_ADDR_EXP 26
49669: PUSH
49670: LD_INT 1
49672: ST_TO_ADDR
// if p3 = 4 then
49673: LD_VAR 0 3
49677: PUSH
49678: LD_INT 4
49680: EQUAL
49681: IFFALSE 49691
// sSpec := true ;
49683: LD_ADDR_EXP 23
49687: PUSH
49688: LD_INT 1
49690: ST_TO_ADDR
// if p3 = 5 then
49691: LD_VAR 0 3
49695: PUSH
49696: LD_INT 5
49698: EQUAL
49699: IFFALSE 49709
// sLevel := true ;
49701: LD_ADDR_EXP 27
49705: PUSH
49706: LD_INT 1
49708: ST_TO_ADDR
// if p3 = 6 then
49709: LD_VAR 0 3
49713: PUSH
49714: LD_INT 6
49716: EQUAL
49717: IFFALSE 49727
// sArmoury := true ;
49719: LD_ADDR_EXP 28
49723: PUSH
49724: LD_INT 1
49726: ST_TO_ADDR
// if p3 = 7 then
49727: LD_VAR 0 3
49731: PUSH
49732: LD_INT 7
49734: EQUAL
49735: IFFALSE 49745
// sRadar := true ;
49737: LD_ADDR_EXP 29
49741: PUSH
49742: LD_INT 1
49744: ST_TO_ADDR
// if p3 = 8 then
49745: LD_VAR 0 3
49749: PUSH
49750: LD_INT 8
49752: EQUAL
49753: IFFALSE 49763
// sBunker := true ;
49755: LD_ADDR_EXP 30
49759: PUSH
49760: LD_INT 1
49762: ST_TO_ADDR
// if p3 = 9 then
49763: LD_VAR 0 3
49767: PUSH
49768: LD_INT 9
49770: EQUAL
49771: IFFALSE 49781
// sHack := true ;
49773: LD_ADDR_EXP 31
49777: PUSH
49778: LD_INT 1
49780: ST_TO_ADDR
// if p3 = 10 then
49781: LD_VAR 0 3
49785: PUSH
49786: LD_INT 10
49788: EQUAL
49789: IFFALSE 49799
// sFire := true ;
49791: LD_ADDR_EXP 32
49795: PUSH
49796: LD_INT 1
49798: ST_TO_ADDR
// if p3 = 11 then
49799: LD_VAR 0 3
49803: PUSH
49804: LD_INT 11
49806: EQUAL
49807: IFFALSE 49817
// sRefresh := true ;
49809: LD_ADDR_EXP 33
49813: PUSH
49814: LD_INT 1
49816: ST_TO_ADDR
// if p3 = 12 then
49817: LD_VAR 0 3
49821: PUSH
49822: LD_INT 12
49824: EQUAL
49825: IFFALSE 49835
// sExp := true ;
49827: LD_ADDR_EXP 34
49831: PUSH
49832: LD_INT 1
49834: ST_TO_ADDR
// if p3 = 13 then
49835: LD_VAR 0 3
49839: PUSH
49840: LD_INT 13
49842: EQUAL
49843: IFFALSE 49853
// sDepot := true ;
49845: LD_ADDR_EXP 35
49849: PUSH
49850: LD_INT 1
49852: ST_TO_ADDR
// if p3 = 14 then
49853: LD_VAR 0 3
49857: PUSH
49858: LD_INT 14
49860: EQUAL
49861: IFFALSE 49871
// sFlag := true ;
49863: LD_ADDR_EXP 36
49867: PUSH
49868: LD_INT 1
49870: ST_TO_ADDR
// if p3 = 15 then
49871: LD_VAR 0 3
49875: PUSH
49876: LD_INT 15
49878: EQUAL
49879: IFFALSE 49889
// sKamikadze := true ;
49881: LD_ADDR_EXP 44
49885: PUSH
49886: LD_INT 1
49888: ST_TO_ADDR
// if p3 = 16 then
49889: LD_VAR 0 3
49893: PUSH
49894: LD_INT 16
49896: EQUAL
49897: IFFALSE 49907
// sTroll := true ;
49899: LD_ADDR_EXP 45
49903: PUSH
49904: LD_INT 1
49906: ST_TO_ADDR
// if p3 = 17 then
49907: LD_VAR 0 3
49911: PUSH
49912: LD_INT 17
49914: EQUAL
49915: IFFALSE 49925
// sSlow := true ;
49917: LD_ADDR_EXP 46
49921: PUSH
49922: LD_INT 1
49924: ST_TO_ADDR
// if p3 = 18 then
49925: LD_VAR 0 3
49929: PUSH
49930: LD_INT 18
49932: EQUAL
49933: IFFALSE 49943
// sLack := true ;
49935: LD_ADDR_EXP 47
49939: PUSH
49940: LD_INT 1
49942: ST_TO_ADDR
// if p3 = 19 then
49943: LD_VAR 0 3
49947: PUSH
49948: LD_INT 19
49950: EQUAL
49951: IFFALSE 49961
// sTank := true ;
49953: LD_ADDR_EXP 49
49957: PUSH
49958: LD_INT 1
49960: ST_TO_ADDR
// if p3 = 20 then
49961: LD_VAR 0 3
49965: PUSH
49966: LD_INT 20
49968: EQUAL
49969: IFFALSE 49979
// sRemote := true ;
49971: LD_ADDR_EXP 50
49975: PUSH
49976: LD_INT 1
49978: ST_TO_ADDR
// if p3 = 21 then
49979: LD_VAR 0 3
49983: PUSH
49984: LD_INT 21
49986: EQUAL
49987: IFFALSE 49997
// sPowell := true ;
49989: LD_ADDR_EXP 51
49993: PUSH
49994: LD_INT 1
49996: ST_TO_ADDR
// if p3 = 22 then
49997: LD_VAR 0 3
50001: PUSH
50002: LD_INT 22
50004: EQUAL
50005: IFFALSE 50015
// sTeleport := true ;
50007: LD_ADDR_EXP 54
50011: PUSH
50012: LD_INT 1
50014: ST_TO_ADDR
// if p3 = 23 then
50015: LD_VAR 0 3
50019: PUSH
50020: LD_INT 23
50022: EQUAL
50023: IFFALSE 50033
// sOilTower := true ;
50025: LD_ADDR_EXP 56
50029: PUSH
50030: LD_INT 1
50032: ST_TO_ADDR
// if p3 = 24 then
50033: LD_VAR 0 3
50037: PUSH
50038: LD_INT 24
50040: EQUAL
50041: IFFALSE 50051
// sShovel := true ;
50043: LD_ADDR_EXP 57
50047: PUSH
50048: LD_INT 1
50050: ST_TO_ADDR
// if p3 = 25 then
50051: LD_VAR 0 3
50055: PUSH
50056: LD_INT 25
50058: EQUAL
50059: IFFALSE 50069
// sSheik := true ;
50061: LD_ADDR_EXP 58
50065: PUSH
50066: LD_INT 1
50068: ST_TO_ADDR
// if p3 = 26 then
50069: LD_VAR 0 3
50073: PUSH
50074: LD_INT 26
50076: EQUAL
50077: IFFALSE 50087
// sEarthquake := true ;
50079: LD_ADDR_EXP 60
50083: PUSH
50084: LD_INT 1
50086: ST_TO_ADDR
// if p3 = 27 then
50087: LD_VAR 0 3
50091: PUSH
50092: LD_INT 27
50094: EQUAL
50095: IFFALSE 50105
// sAI := true ;
50097: LD_ADDR_EXP 61
50101: PUSH
50102: LD_INT 1
50104: ST_TO_ADDR
// if p3 = 28 then
50105: LD_VAR 0 3
50109: PUSH
50110: LD_INT 28
50112: EQUAL
50113: IFFALSE 50123
// sCargo := true ;
50115: LD_ADDR_EXP 64
50119: PUSH
50120: LD_INT 1
50122: ST_TO_ADDR
// if p3 = 29 then
50123: LD_VAR 0 3
50127: PUSH
50128: LD_INT 29
50130: EQUAL
50131: IFFALSE 50141
// sDLaser := true ;
50133: LD_ADDR_EXP 65
50137: PUSH
50138: LD_INT 1
50140: ST_TO_ADDR
// if p3 = 30 then
50141: LD_VAR 0 3
50145: PUSH
50146: LD_INT 30
50148: EQUAL
50149: IFFALSE 50159
// sExchange := true ;
50151: LD_ADDR_EXP 66
50155: PUSH
50156: LD_INT 1
50158: ST_TO_ADDR
// if p3 = 31 then
50159: LD_VAR 0 3
50163: PUSH
50164: LD_INT 31
50166: EQUAL
50167: IFFALSE 50177
// sFac := true ;
50169: LD_ADDR_EXP 67
50173: PUSH
50174: LD_INT 1
50176: ST_TO_ADDR
// if p3 = 32 then
50177: LD_VAR 0 3
50181: PUSH
50182: LD_INT 32
50184: EQUAL
50185: IFFALSE 50195
// sPower := true ;
50187: LD_ADDR_EXP 68
50191: PUSH
50192: LD_INT 1
50194: ST_TO_ADDR
// if p3 = 33 then
50195: LD_VAR 0 3
50199: PUSH
50200: LD_INT 33
50202: EQUAL
50203: IFFALSE 50213
// sRandom := true ;
50205: LD_ADDR_EXP 69
50209: PUSH
50210: LD_INT 1
50212: ST_TO_ADDR
// if p3 = 34 then
50213: LD_VAR 0 3
50217: PUSH
50218: LD_INT 34
50220: EQUAL
50221: IFFALSE 50231
// sShield := true ;
50223: LD_ADDR_EXP 70
50227: PUSH
50228: LD_INT 1
50230: ST_TO_ADDR
// if p3 = 35 then
50231: LD_VAR 0 3
50235: PUSH
50236: LD_INT 35
50238: EQUAL
50239: IFFALSE 50249
// sTime := true ;
50241: LD_ADDR_EXP 71
50245: PUSH
50246: LD_INT 1
50248: ST_TO_ADDR
// if p3 = 36 then
50249: LD_VAR 0 3
50253: PUSH
50254: LD_INT 36
50256: EQUAL
50257: IFFALSE 50267
// sTools := true ;
50259: LD_ADDR_EXP 72
50263: PUSH
50264: LD_INT 1
50266: ST_TO_ADDR
// if p3 = 101 then
50267: LD_VAR 0 3
50271: PUSH
50272: LD_INT 101
50274: EQUAL
50275: IFFALSE 50285
// sSold := true ;
50277: LD_ADDR_EXP 37
50281: PUSH
50282: LD_INT 1
50284: ST_TO_ADDR
// if p3 = 102 then
50285: LD_VAR 0 3
50289: PUSH
50290: LD_INT 102
50292: EQUAL
50293: IFFALSE 50303
// sDiff := true ;
50295: LD_ADDR_EXP 38
50299: PUSH
50300: LD_INT 1
50302: ST_TO_ADDR
// if p3 = 103 then
50303: LD_VAR 0 3
50307: PUSH
50308: LD_INT 103
50310: EQUAL
50311: IFFALSE 50321
// sFog := true ;
50313: LD_ADDR_EXP 41
50317: PUSH
50318: LD_INT 1
50320: ST_TO_ADDR
// if p3 = 104 then
50321: LD_VAR 0 3
50325: PUSH
50326: LD_INT 104
50328: EQUAL
50329: IFFALSE 50339
// sReset := true ;
50331: LD_ADDR_EXP 42
50335: PUSH
50336: LD_INT 1
50338: ST_TO_ADDR
// if p3 = 105 then
50339: LD_VAR 0 3
50343: PUSH
50344: LD_INT 105
50346: EQUAL
50347: IFFALSE 50357
// sSun := true ;
50349: LD_ADDR_EXP 43
50353: PUSH
50354: LD_INT 1
50356: ST_TO_ADDR
// if p3 = 106 then
50357: LD_VAR 0 3
50361: PUSH
50362: LD_INT 106
50364: EQUAL
50365: IFFALSE 50375
// sTiger := true ;
50367: LD_ADDR_EXP 39
50371: PUSH
50372: LD_INT 1
50374: ST_TO_ADDR
// if p3 = 107 then
50375: LD_VAR 0 3
50379: PUSH
50380: LD_INT 107
50382: EQUAL
50383: IFFALSE 50393
// sBomb := true ;
50385: LD_ADDR_EXP 40
50389: PUSH
50390: LD_INT 1
50392: ST_TO_ADDR
// if p3 = 108 then
50393: LD_VAR 0 3
50397: PUSH
50398: LD_INT 108
50400: EQUAL
50401: IFFALSE 50411
// sWound := true ;
50403: LD_ADDR_EXP 48
50407: PUSH
50408: LD_INT 1
50410: ST_TO_ADDR
// if p3 = 109 then
50411: LD_VAR 0 3
50415: PUSH
50416: LD_INT 109
50418: EQUAL
50419: IFFALSE 50429
// sBetray := true ;
50421: LD_ADDR_EXP 52
50425: PUSH
50426: LD_INT 1
50428: ST_TO_ADDR
// if p3 = 110 then
50429: LD_VAR 0 3
50433: PUSH
50434: LD_INT 110
50436: EQUAL
50437: IFFALSE 50447
// sContamin := true ;
50439: LD_ADDR_EXP 53
50443: PUSH
50444: LD_INT 1
50446: ST_TO_ADDR
// if p3 = 111 then
50447: LD_VAR 0 3
50451: PUSH
50452: LD_INT 111
50454: EQUAL
50455: IFFALSE 50465
// sOil := true ;
50457: LD_ADDR_EXP 55
50461: PUSH
50462: LD_INT 1
50464: ST_TO_ADDR
// if p3 = 112 then
50465: LD_VAR 0 3
50469: PUSH
50470: LD_INT 112
50472: EQUAL
50473: IFFALSE 50483
// sStu := true ;
50475: LD_ADDR_EXP 59
50479: PUSH
50480: LD_INT 1
50482: ST_TO_ADDR
// if p3 = 113 then
50483: LD_VAR 0 3
50487: PUSH
50488: LD_INT 113
50490: EQUAL
50491: IFFALSE 50501
// sBazooka := true ;
50493: LD_ADDR_EXP 62
50497: PUSH
50498: LD_INT 1
50500: ST_TO_ADDR
// if p3 = 114 then
50501: LD_VAR 0 3
50505: PUSH
50506: LD_INT 114
50508: EQUAL
50509: IFFALSE 50519
// sMortar := true ;
50511: LD_ADDR_EXP 63
50515: PUSH
50516: LD_INT 1
50518: ST_TO_ADDR
// if p3 = 115 then
50519: LD_VAR 0 3
50523: PUSH
50524: LD_INT 115
50526: EQUAL
50527: IFFALSE 50537
// sRanger := true ;
50529: LD_ADDR_EXP 73
50533: PUSH
50534: LD_INT 1
50536: ST_TO_ADDR
// if p3 = 116 then
50537: LD_VAR 0 3
50541: PUSH
50542: LD_INT 116
50544: EQUAL
50545: IFFALSE 50555
// sComputer := true ;
50547: LD_ADDR_EXP 74
50551: PUSH
50552: LD_INT 1
50554: ST_TO_ADDR
// if p3 = 117 then
50555: LD_VAR 0 3
50559: PUSH
50560: LD_INT 117
50562: EQUAL
50563: IFFALSE 50573
// s30 := true ;
50565: LD_ADDR_EXP 75
50569: PUSH
50570: LD_INT 1
50572: ST_TO_ADDR
// if p3 = 118 then
50573: LD_VAR 0 3
50577: PUSH
50578: LD_INT 118
50580: EQUAL
50581: IFFALSE 50591
// s60 := true ;
50583: LD_ADDR_EXP 76
50587: PUSH
50588: LD_INT 1
50590: ST_TO_ADDR
// end ; if p2 = hack_mode then
50591: LD_VAR 0 2
50595: PUSH
50596: LD_INT 101
50598: EQUAL
50599: IFFALSE 50727
// begin case p3 of 1 :
50601: LD_VAR 0 3
50605: PUSH
50606: LD_INT 1
50608: DOUBLE
50609: EQUAL
50610: IFTRUE 50614
50612: GO 50621
50614: POP
// hHackUnlimitedResources ; 2 :
50615: CALL 62874 0 0
50619: GO 50727
50621: LD_INT 2
50623: DOUBLE
50624: EQUAL
50625: IFTRUE 50629
50627: GO 50636
50629: POP
// hHackSetLevel10 ; 3 :
50630: CALL 63007 0 0
50634: GO 50727
50636: LD_INT 3
50638: DOUBLE
50639: EQUAL
50640: IFTRUE 50644
50642: GO 50651
50644: POP
// hHackSetLevel10YourUnits ; 4 :
50645: CALL 63092 0 0
50649: GO 50727
50651: LD_INT 4
50653: DOUBLE
50654: EQUAL
50655: IFTRUE 50659
50657: GO 50666
50659: POP
// hHackInvincible ; 5 :
50660: CALL 63540 0 0
50664: GO 50727
50666: LD_INT 5
50668: DOUBLE
50669: EQUAL
50670: IFTRUE 50674
50672: GO 50681
50674: POP
// hHackInvisible ; 6 :
50675: CALL 63651 0 0
50679: GO 50727
50681: LD_INT 6
50683: DOUBLE
50684: EQUAL
50685: IFTRUE 50689
50687: GO 50696
50689: POP
// hHackChangeYourSide ; 7 :
50690: CALL 63708 0 0
50694: GO 50727
50696: LD_INT 7
50698: DOUBLE
50699: EQUAL
50700: IFTRUE 50704
50702: GO 50711
50704: POP
// hHackChangeUnitSide ; 8 :
50705: CALL 63750 0 0
50709: GO 50727
50711: LD_INT 8
50713: DOUBLE
50714: EQUAL
50715: IFTRUE 50719
50717: GO 50726
50719: POP
// hHackFog ; end ;
50720: CALL 63851 0 0
50724: GO 50727
50726: POP
// end ; if p2 = game_save_mode then
50727: LD_VAR 0 2
50731: PUSH
50732: LD_INT 102
50734: EQUAL
50735: IFFALSE 50790
// begin if p3 = 1 then
50737: LD_VAR 0 3
50741: PUSH
50742: LD_INT 1
50744: EQUAL
50745: IFFALSE 50757
// globalGameSaveCounter := p4 ;
50747: LD_ADDR_EXP 19
50751: PUSH
50752: LD_VAR 0 4
50756: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
50757: LD_VAR 0 3
50761: PUSH
50762: LD_INT 2
50764: EQUAL
50765: PUSH
50766: LD_EXP 19
50770: AND
50771: IFFALSE 50790
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
50773: LD_STRING setGameSaveCounter(
50775: PUSH
50776: LD_EXP 19
50780: STR
50781: PUSH
50782: LD_STRING )
50784: STR
50785: PPUSH
50786: CALL_OW 559
// end ; end ;
50790: LD_VAR 0 7
50794: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
50795: LD_INT 0
50797: PPUSH
// streamModeActive := false ;
50798: LD_ADDR_EXP 20
50802: PUSH
50803: LD_INT 0
50805: ST_TO_ADDR
// normalCounter := 36 ;
50806: LD_ADDR_EXP 21
50810: PUSH
50811: LD_INT 36
50813: ST_TO_ADDR
// hardcoreCounter := 18 ;
50814: LD_ADDR_EXP 22
50818: PUSH
50819: LD_INT 18
50821: ST_TO_ADDR
// sRocket := false ;
50822: LD_ADDR_EXP 25
50826: PUSH
50827: LD_INT 0
50829: ST_TO_ADDR
// sSpeed := false ;
50830: LD_ADDR_EXP 24
50834: PUSH
50835: LD_INT 0
50837: ST_TO_ADDR
// sEngine := false ;
50838: LD_ADDR_EXP 26
50842: PUSH
50843: LD_INT 0
50845: ST_TO_ADDR
// sSpec := false ;
50846: LD_ADDR_EXP 23
50850: PUSH
50851: LD_INT 0
50853: ST_TO_ADDR
// sLevel := false ;
50854: LD_ADDR_EXP 27
50858: PUSH
50859: LD_INT 0
50861: ST_TO_ADDR
// sArmoury := false ;
50862: LD_ADDR_EXP 28
50866: PUSH
50867: LD_INT 0
50869: ST_TO_ADDR
// sRadar := false ;
50870: LD_ADDR_EXP 29
50874: PUSH
50875: LD_INT 0
50877: ST_TO_ADDR
// sBunker := false ;
50878: LD_ADDR_EXP 30
50882: PUSH
50883: LD_INT 0
50885: ST_TO_ADDR
// sHack := false ;
50886: LD_ADDR_EXP 31
50890: PUSH
50891: LD_INT 0
50893: ST_TO_ADDR
// sFire := false ;
50894: LD_ADDR_EXP 32
50898: PUSH
50899: LD_INT 0
50901: ST_TO_ADDR
// sRefresh := false ;
50902: LD_ADDR_EXP 33
50906: PUSH
50907: LD_INT 0
50909: ST_TO_ADDR
// sExp := false ;
50910: LD_ADDR_EXP 34
50914: PUSH
50915: LD_INT 0
50917: ST_TO_ADDR
// sDepot := false ;
50918: LD_ADDR_EXP 35
50922: PUSH
50923: LD_INT 0
50925: ST_TO_ADDR
// sFlag := false ;
50926: LD_ADDR_EXP 36
50930: PUSH
50931: LD_INT 0
50933: ST_TO_ADDR
// sKamikadze := false ;
50934: LD_ADDR_EXP 44
50938: PUSH
50939: LD_INT 0
50941: ST_TO_ADDR
// sTroll := false ;
50942: LD_ADDR_EXP 45
50946: PUSH
50947: LD_INT 0
50949: ST_TO_ADDR
// sSlow := false ;
50950: LD_ADDR_EXP 46
50954: PUSH
50955: LD_INT 0
50957: ST_TO_ADDR
// sLack := false ;
50958: LD_ADDR_EXP 47
50962: PUSH
50963: LD_INT 0
50965: ST_TO_ADDR
// sTank := false ;
50966: LD_ADDR_EXP 49
50970: PUSH
50971: LD_INT 0
50973: ST_TO_ADDR
// sRemote := false ;
50974: LD_ADDR_EXP 50
50978: PUSH
50979: LD_INT 0
50981: ST_TO_ADDR
// sPowell := false ;
50982: LD_ADDR_EXP 51
50986: PUSH
50987: LD_INT 0
50989: ST_TO_ADDR
// sTeleport := false ;
50990: LD_ADDR_EXP 54
50994: PUSH
50995: LD_INT 0
50997: ST_TO_ADDR
// sOilTower := false ;
50998: LD_ADDR_EXP 56
51002: PUSH
51003: LD_INT 0
51005: ST_TO_ADDR
// sShovel := false ;
51006: LD_ADDR_EXP 57
51010: PUSH
51011: LD_INT 0
51013: ST_TO_ADDR
// sSheik := false ;
51014: LD_ADDR_EXP 58
51018: PUSH
51019: LD_INT 0
51021: ST_TO_ADDR
// sEarthquake := false ;
51022: LD_ADDR_EXP 60
51026: PUSH
51027: LD_INT 0
51029: ST_TO_ADDR
// sAI := false ;
51030: LD_ADDR_EXP 61
51034: PUSH
51035: LD_INT 0
51037: ST_TO_ADDR
// sCargo := false ;
51038: LD_ADDR_EXP 64
51042: PUSH
51043: LD_INT 0
51045: ST_TO_ADDR
// sDLaser := false ;
51046: LD_ADDR_EXP 65
51050: PUSH
51051: LD_INT 0
51053: ST_TO_ADDR
// sExchange := false ;
51054: LD_ADDR_EXP 66
51058: PUSH
51059: LD_INT 0
51061: ST_TO_ADDR
// sFac := false ;
51062: LD_ADDR_EXP 67
51066: PUSH
51067: LD_INT 0
51069: ST_TO_ADDR
// sPower := false ;
51070: LD_ADDR_EXP 68
51074: PUSH
51075: LD_INT 0
51077: ST_TO_ADDR
// sRandom := false ;
51078: LD_ADDR_EXP 69
51082: PUSH
51083: LD_INT 0
51085: ST_TO_ADDR
// sShield := false ;
51086: LD_ADDR_EXP 70
51090: PUSH
51091: LD_INT 0
51093: ST_TO_ADDR
// sTime := false ;
51094: LD_ADDR_EXP 71
51098: PUSH
51099: LD_INT 0
51101: ST_TO_ADDR
// sTools := false ;
51102: LD_ADDR_EXP 72
51106: PUSH
51107: LD_INT 0
51109: ST_TO_ADDR
// sSold := false ;
51110: LD_ADDR_EXP 37
51114: PUSH
51115: LD_INT 0
51117: ST_TO_ADDR
// sDiff := false ;
51118: LD_ADDR_EXP 38
51122: PUSH
51123: LD_INT 0
51125: ST_TO_ADDR
// sFog := false ;
51126: LD_ADDR_EXP 41
51130: PUSH
51131: LD_INT 0
51133: ST_TO_ADDR
// sReset := false ;
51134: LD_ADDR_EXP 42
51138: PUSH
51139: LD_INT 0
51141: ST_TO_ADDR
// sSun := false ;
51142: LD_ADDR_EXP 43
51146: PUSH
51147: LD_INT 0
51149: ST_TO_ADDR
// sTiger := false ;
51150: LD_ADDR_EXP 39
51154: PUSH
51155: LD_INT 0
51157: ST_TO_ADDR
// sBomb := false ;
51158: LD_ADDR_EXP 40
51162: PUSH
51163: LD_INT 0
51165: ST_TO_ADDR
// sWound := false ;
51166: LD_ADDR_EXP 48
51170: PUSH
51171: LD_INT 0
51173: ST_TO_ADDR
// sBetray := false ;
51174: LD_ADDR_EXP 52
51178: PUSH
51179: LD_INT 0
51181: ST_TO_ADDR
// sContamin := false ;
51182: LD_ADDR_EXP 53
51186: PUSH
51187: LD_INT 0
51189: ST_TO_ADDR
// sOil := false ;
51190: LD_ADDR_EXP 55
51194: PUSH
51195: LD_INT 0
51197: ST_TO_ADDR
// sStu := false ;
51198: LD_ADDR_EXP 59
51202: PUSH
51203: LD_INT 0
51205: ST_TO_ADDR
// sBazooka := false ;
51206: LD_ADDR_EXP 62
51210: PUSH
51211: LD_INT 0
51213: ST_TO_ADDR
// sMortar := false ;
51214: LD_ADDR_EXP 63
51218: PUSH
51219: LD_INT 0
51221: ST_TO_ADDR
// sRanger := false ;
51222: LD_ADDR_EXP 73
51226: PUSH
51227: LD_INT 0
51229: ST_TO_ADDR
// sComputer := false ;
51230: LD_ADDR_EXP 74
51234: PUSH
51235: LD_INT 0
51237: ST_TO_ADDR
// s30 := false ;
51238: LD_ADDR_EXP 75
51242: PUSH
51243: LD_INT 0
51245: ST_TO_ADDR
// s60 := false ;
51246: LD_ADDR_EXP 76
51250: PUSH
51251: LD_INT 0
51253: ST_TO_ADDR
// end ;
51254: LD_VAR 0 1
51258: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
51259: LD_INT 0
51261: PPUSH
51262: PPUSH
51263: PPUSH
51264: PPUSH
51265: PPUSH
51266: PPUSH
51267: PPUSH
// result := [ ] ;
51268: LD_ADDR_VAR 0 2
51272: PUSH
51273: EMPTY
51274: ST_TO_ADDR
// if campaign_id = 1 then
51275: LD_OWVAR 69
51279: PUSH
51280: LD_INT 1
51282: EQUAL
51283: IFFALSE 54449
// begin case mission_number of 1 :
51285: LD_OWVAR 70
51289: PUSH
51290: LD_INT 1
51292: DOUBLE
51293: EQUAL
51294: IFTRUE 51298
51296: GO 51374
51298: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
51299: LD_ADDR_VAR 0 2
51303: PUSH
51304: LD_INT 2
51306: PUSH
51307: LD_INT 4
51309: PUSH
51310: LD_INT 11
51312: PUSH
51313: LD_INT 12
51315: PUSH
51316: LD_INT 15
51318: PUSH
51319: LD_INT 16
51321: PUSH
51322: LD_INT 22
51324: PUSH
51325: LD_INT 23
51327: PUSH
51328: LD_INT 26
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 101
51344: PUSH
51345: LD_INT 102
51347: PUSH
51348: LD_INT 106
51350: PUSH
51351: LD_INT 116
51353: PUSH
51354: LD_INT 117
51356: PUSH
51357: LD_INT 118
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: ST_TO_ADDR
51372: GO 54447
51374: LD_INT 2
51376: DOUBLE
51377: EQUAL
51378: IFTRUE 51382
51380: GO 51466
51382: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
51383: LD_ADDR_VAR 0 2
51387: PUSH
51388: LD_INT 2
51390: PUSH
51391: LD_INT 4
51393: PUSH
51394: LD_INT 11
51396: PUSH
51397: LD_INT 12
51399: PUSH
51400: LD_INT 15
51402: PUSH
51403: LD_INT 16
51405: PUSH
51406: LD_INT 22
51408: PUSH
51409: LD_INT 23
51411: PUSH
51412: LD_INT 26
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 101
51428: PUSH
51429: LD_INT 102
51431: PUSH
51432: LD_INT 105
51434: PUSH
51435: LD_INT 106
51437: PUSH
51438: LD_INT 108
51440: PUSH
51441: LD_INT 116
51443: PUSH
51444: LD_INT 117
51446: PUSH
51447: LD_INT 118
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: ST_TO_ADDR
51464: GO 54447
51466: LD_INT 3
51468: DOUBLE
51469: EQUAL
51470: IFTRUE 51474
51472: GO 51562
51474: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
51475: LD_ADDR_VAR 0 2
51479: PUSH
51480: LD_INT 2
51482: PUSH
51483: LD_INT 4
51485: PUSH
51486: LD_INT 5
51488: PUSH
51489: LD_INT 11
51491: PUSH
51492: LD_INT 12
51494: PUSH
51495: LD_INT 15
51497: PUSH
51498: LD_INT 16
51500: PUSH
51501: LD_INT 22
51503: PUSH
51504: LD_INT 26
51506: PUSH
51507: LD_INT 36
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 101
51524: PUSH
51525: LD_INT 102
51527: PUSH
51528: LD_INT 105
51530: PUSH
51531: LD_INT 106
51533: PUSH
51534: LD_INT 108
51536: PUSH
51537: LD_INT 116
51539: PUSH
51540: LD_INT 117
51542: PUSH
51543: LD_INT 118
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: ST_TO_ADDR
51560: GO 54447
51562: LD_INT 4
51564: DOUBLE
51565: EQUAL
51566: IFTRUE 51570
51568: GO 51666
51570: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
51571: LD_ADDR_VAR 0 2
51575: PUSH
51576: LD_INT 2
51578: PUSH
51579: LD_INT 4
51581: PUSH
51582: LD_INT 5
51584: PUSH
51585: LD_INT 8
51587: PUSH
51588: LD_INT 11
51590: PUSH
51591: LD_INT 12
51593: PUSH
51594: LD_INT 15
51596: PUSH
51597: LD_INT 16
51599: PUSH
51600: LD_INT 22
51602: PUSH
51603: LD_INT 23
51605: PUSH
51606: LD_INT 26
51608: PUSH
51609: LD_INT 36
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 101
51628: PUSH
51629: LD_INT 102
51631: PUSH
51632: LD_INT 105
51634: PUSH
51635: LD_INT 106
51637: PUSH
51638: LD_INT 108
51640: PUSH
51641: LD_INT 116
51643: PUSH
51644: LD_INT 117
51646: PUSH
51647: LD_INT 118
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: ST_TO_ADDR
51664: GO 54447
51666: LD_INT 5
51668: DOUBLE
51669: EQUAL
51670: IFTRUE 51674
51672: GO 51786
51674: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
51675: LD_ADDR_VAR 0 2
51679: PUSH
51680: LD_INT 2
51682: PUSH
51683: LD_INT 4
51685: PUSH
51686: LD_INT 5
51688: PUSH
51689: LD_INT 6
51691: PUSH
51692: LD_INT 8
51694: PUSH
51695: LD_INT 11
51697: PUSH
51698: LD_INT 12
51700: PUSH
51701: LD_INT 15
51703: PUSH
51704: LD_INT 16
51706: PUSH
51707: LD_INT 22
51709: PUSH
51710: LD_INT 23
51712: PUSH
51713: LD_INT 25
51715: PUSH
51716: LD_INT 26
51718: PUSH
51719: LD_INT 36
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 101
51740: PUSH
51741: LD_INT 102
51743: PUSH
51744: LD_INT 105
51746: PUSH
51747: LD_INT 106
51749: PUSH
51750: LD_INT 108
51752: PUSH
51753: LD_INT 109
51755: PUSH
51756: LD_INT 112
51758: PUSH
51759: LD_INT 116
51761: PUSH
51762: LD_INT 117
51764: PUSH
51765: LD_INT 118
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: ST_TO_ADDR
51784: GO 54447
51786: LD_INT 6
51788: DOUBLE
51789: EQUAL
51790: IFTRUE 51794
51792: GO 51926
51794: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
51795: LD_ADDR_VAR 0 2
51799: PUSH
51800: LD_INT 2
51802: PUSH
51803: LD_INT 4
51805: PUSH
51806: LD_INT 5
51808: PUSH
51809: LD_INT 6
51811: PUSH
51812: LD_INT 8
51814: PUSH
51815: LD_INT 11
51817: PUSH
51818: LD_INT 12
51820: PUSH
51821: LD_INT 15
51823: PUSH
51824: LD_INT 16
51826: PUSH
51827: LD_INT 20
51829: PUSH
51830: LD_INT 21
51832: PUSH
51833: LD_INT 22
51835: PUSH
51836: LD_INT 23
51838: PUSH
51839: LD_INT 25
51841: PUSH
51842: LD_INT 26
51844: PUSH
51845: LD_INT 30
51847: PUSH
51848: LD_INT 31
51850: PUSH
51851: LD_INT 32
51853: PUSH
51854: LD_INT 36
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 101
51880: PUSH
51881: LD_INT 102
51883: PUSH
51884: LD_INT 105
51886: PUSH
51887: LD_INT 106
51889: PUSH
51890: LD_INT 108
51892: PUSH
51893: LD_INT 109
51895: PUSH
51896: LD_INT 112
51898: PUSH
51899: LD_INT 116
51901: PUSH
51902: LD_INT 117
51904: PUSH
51905: LD_INT 118
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: ST_TO_ADDR
51924: GO 54447
51926: LD_INT 7
51928: DOUBLE
51929: EQUAL
51930: IFTRUE 51934
51932: GO 52046
51934: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
51935: LD_ADDR_VAR 0 2
51939: PUSH
51940: LD_INT 2
51942: PUSH
51943: LD_INT 4
51945: PUSH
51946: LD_INT 5
51948: PUSH
51949: LD_INT 7
51951: PUSH
51952: LD_INT 11
51954: PUSH
51955: LD_INT 12
51957: PUSH
51958: LD_INT 15
51960: PUSH
51961: LD_INT 16
51963: PUSH
51964: LD_INT 20
51966: PUSH
51967: LD_INT 21
51969: PUSH
51970: LD_INT 22
51972: PUSH
51973: LD_INT 23
51975: PUSH
51976: LD_INT 25
51978: PUSH
51979: LD_INT 26
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 101
52000: PUSH
52001: LD_INT 102
52003: PUSH
52004: LD_INT 103
52006: PUSH
52007: LD_INT 105
52009: PUSH
52010: LD_INT 106
52012: PUSH
52013: LD_INT 108
52015: PUSH
52016: LD_INT 112
52018: PUSH
52019: LD_INT 116
52021: PUSH
52022: LD_INT 117
52024: PUSH
52025: LD_INT 118
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: ST_TO_ADDR
52044: GO 54447
52046: LD_INT 8
52048: DOUBLE
52049: EQUAL
52050: IFTRUE 52054
52052: GO 52194
52054: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
52055: LD_ADDR_VAR 0 2
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: LD_INT 4
52065: PUSH
52066: LD_INT 5
52068: PUSH
52069: LD_INT 6
52071: PUSH
52072: LD_INT 7
52074: PUSH
52075: LD_INT 8
52077: PUSH
52078: LD_INT 11
52080: PUSH
52081: LD_INT 12
52083: PUSH
52084: LD_INT 15
52086: PUSH
52087: LD_INT 16
52089: PUSH
52090: LD_INT 20
52092: PUSH
52093: LD_INT 21
52095: PUSH
52096: LD_INT 22
52098: PUSH
52099: LD_INT 23
52101: PUSH
52102: LD_INT 25
52104: PUSH
52105: LD_INT 26
52107: PUSH
52108: LD_INT 30
52110: PUSH
52111: LD_INT 31
52113: PUSH
52114: LD_INT 32
52116: PUSH
52117: LD_INT 36
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 101
52144: PUSH
52145: LD_INT 102
52147: PUSH
52148: LD_INT 103
52150: PUSH
52151: LD_INT 105
52153: PUSH
52154: LD_INT 106
52156: PUSH
52157: LD_INT 108
52159: PUSH
52160: LD_INT 109
52162: PUSH
52163: LD_INT 112
52165: PUSH
52166: LD_INT 116
52168: PUSH
52169: LD_INT 117
52171: PUSH
52172: LD_INT 118
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: ST_TO_ADDR
52192: GO 54447
52194: LD_INT 9
52196: DOUBLE
52197: EQUAL
52198: IFTRUE 52202
52200: GO 52350
52202: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
52203: LD_ADDR_VAR 0 2
52207: PUSH
52208: LD_INT 2
52210: PUSH
52211: LD_INT 4
52213: PUSH
52214: LD_INT 5
52216: PUSH
52217: LD_INT 6
52219: PUSH
52220: LD_INT 7
52222: PUSH
52223: LD_INT 8
52225: PUSH
52226: LD_INT 11
52228: PUSH
52229: LD_INT 12
52231: PUSH
52232: LD_INT 15
52234: PUSH
52235: LD_INT 16
52237: PUSH
52238: LD_INT 20
52240: PUSH
52241: LD_INT 21
52243: PUSH
52244: LD_INT 22
52246: PUSH
52247: LD_INT 23
52249: PUSH
52250: LD_INT 25
52252: PUSH
52253: LD_INT 26
52255: PUSH
52256: LD_INT 28
52258: PUSH
52259: LD_INT 30
52261: PUSH
52262: LD_INT 31
52264: PUSH
52265: LD_INT 32
52267: PUSH
52268: LD_INT 36
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 101
52296: PUSH
52297: LD_INT 102
52299: PUSH
52300: LD_INT 103
52302: PUSH
52303: LD_INT 105
52305: PUSH
52306: LD_INT 106
52308: PUSH
52309: LD_INT 108
52311: PUSH
52312: LD_INT 109
52314: PUSH
52315: LD_INT 112
52317: PUSH
52318: LD_INT 114
52320: PUSH
52321: LD_INT 116
52323: PUSH
52324: LD_INT 117
52326: PUSH
52327: LD_INT 118
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: ST_TO_ADDR
52348: GO 54447
52350: LD_INT 10
52352: DOUBLE
52353: EQUAL
52354: IFTRUE 52358
52356: GO 52554
52358: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
52359: LD_ADDR_VAR 0 2
52363: PUSH
52364: LD_INT 2
52366: PUSH
52367: LD_INT 4
52369: PUSH
52370: LD_INT 5
52372: PUSH
52373: LD_INT 6
52375: PUSH
52376: LD_INT 7
52378: PUSH
52379: LD_INT 8
52381: PUSH
52382: LD_INT 9
52384: PUSH
52385: LD_INT 10
52387: PUSH
52388: LD_INT 11
52390: PUSH
52391: LD_INT 12
52393: PUSH
52394: LD_INT 13
52396: PUSH
52397: LD_INT 14
52399: PUSH
52400: LD_INT 15
52402: PUSH
52403: LD_INT 16
52405: PUSH
52406: LD_INT 17
52408: PUSH
52409: LD_INT 18
52411: PUSH
52412: LD_INT 19
52414: PUSH
52415: LD_INT 20
52417: PUSH
52418: LD_INT 21
52420: PUSH
52421: LD_INT 22
52423: PUSH
52424: LD_INT 23
52426: PUSH
52427: LD_INT 24
52429: PUSH
52430: LD_INT 25
52432: PUSH
52433: LD_INT 26
52435: PUSH
52436: LD_INT 28
52438: PUSH
52439: LD_INT 30
52441: PUSH
52442: LD_INT 31
52444: PUSH
52445: LD_INT 32
52447: PUSH
52448: LD_INT 36
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 101
52484: PUSH
52485: LD_INT 102
52487: PUSH
52488: LD_INT 103
52490: PUSH
52491: LD_INT 104
52493: PUSH
52494: LD_INT 105
52496: PUSH
52497: LD_INT 106
52499: PUSH
52500: LD_INT 107
52502: PUSH
52503: LD_INT 108
52505: PUSH
52506: LD_INT 109
52508: PUSH
52509: LD_INT 110
52511: PUSH
52512: LD_INT 111
52514: PUSH
52515: LD_INT 112
52517: PUSH
52518: LD_INT 114
52520: PUSH
52521: LD_INT 116
52523: PUSH
52524: LD_INT 117
52526: PUSH
52527: LD_INT 118
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: ST_TO_ADDR
52552: GO 54447
52554: LD_INT 11
52556: DOUBLE
52557: EQUAL
52558: IFTRUE 52562
52560: GO 52766
52562: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
52563: LD_ADDR_VAR 0 2
52567: PUSH
52568: LD_INT 2
52570: PUSH
52571: LD_INT 3
52573: PUSH
52574: LD_INT 4
52576: PUSH
52577: LD_INT 5
52579: PUSH
52580: LD_INT 6
52582: PUSH
52583: LD_INT 7
52585: PUSH
52586: LD_INT 8
52588: PUSH
52589: LD_INT 9
52591: PUSH
52592: LD_INT 10
52594: PUSH
52595: LD_INT 11
52597: PUSH
52598: LD_INT 12
52600: PUSH
52601: LD_INT 13
52603: PUSH
52604: LD_INT 14
52606: PUSH
52607: LD_INT 15
52609: PUSH
52610: LD_INT 16
52612: PUSH
52613: LD_INT 17
52615: PUSH
52616: LD_INT 18
52618: PUSH
52619: LD_INT 19
52621: PUSH
52622: LD_INT 20
52624: PUSH
52625: LD_INT 21
52627: PUSH
52628: LD_INT 22
52630: PUSH
52631: LD_INT 23
52633: PUSH
52634: LD_INT 24
52636: PUSH
52637: LD_INT 25
52639: PUSH
52640: LD_INT 26
52642: PUSH
52643: LD_INT 28
52645: PUSH
52646: LD_INT 30
52648: PUSH
52649: LD_INT 31
52651: PUSH
52652: LD_INT 32
52654: PUSH
52655: LD_INT 34
52657: PUSH
52658: LD_INT 36
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 101
52696: PUSH
52697: LD_INT 102
52699: PUSH
52700: LD_INT 103
52702: PUSH
52703: LD_INT 104
52705: PUSH
52706: LD_INT 105
52708: PUSH
52709: LD_INT 106
52711: PUSH
52712: LD_INT 107
52714: PUSH
52715: LD_INT 108
52717: PUSH
52718: LD_INT 109
52720: PUSH
52721: LD_INT 110
52723: PUSH
52724: LD_INT 111
52726: PUSH
52727: LD_INT 112
52729: PUSH
52730: LD_INT 114
52732: PUSH
52733: LD_INT 116
52735: PUSH
52736: LD_INT 117
52738: PUSH
52739: LD_INT 118
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: ST_TO_ADDR
52764: GO 54447
52766: LD_INT 12
52768: DOUBLE
52769: EQUAL
52770: IFTRUE 52774
52772: GO 52994
52774: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
52775: LD_ADDR_VAR 0 2
52779: PUSH
52780: LD_INT 1
52782: PUSH
52783: LD_INT 2
52785: PUSH
52786: LD_INT 3
52788: PUSH
52789: LD_INT 4
52791: PUSH
52792: LD_INT 5
52794: PUSH
52795: LD_INT 6
52797: PUSH
52798: LD_INT 7
52800: PUSH
52801: LD_INT 8
52803: PUSH
52804: LD_INT 9
52806: PUSH
52807: LD_INT 10
52809: PUSH
52810: LD_INT 11
52812: PUSH
52813: LD_INT 12
52815: PUSH
52816: LD_INT 13
52818: PUSH
52819: LD_INT 14
52821: PUSH
52822: LD_INT 15
52824: PUSH
52825: LD_INT 16
52827: PUSH
52828: LD_INT 17
52830: PUSH
52831: LD_INT 18
52833: PUSH
52834: LD_INT 19
52836: PUSH
52837: LD_INT 20
52839: PUSH
52840: LD_INT 21
52842: PUSH
52843: LD_INT 22
52845: PUSH
52846: LD_INT 23
52848: PUSH
52849: LD_INT 24
52851: PUSH
52852: LD_INT 25
52854: PUSH
52855: LD_INT 26
52857: PUSH
52858: LD_INT 27
52860: PUSH
52861: LD_INT 28
52863: PUSH
52864: LD_INT 30
52866: PUSH
52867: LD_INT 31
52869: PUSH
52870: LD_INT 32
52872: PUSH
52873: LD_INT 33
52875: PUSH
52876: LD_INT 34
52878: PUSH
52879: LD_INT 36
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 101
52920: PUSH
52921: LD_INT 102
52923: PUSH
52924: LD_INT 103
52926: PUSH
52927: LD_INT 104
52929: PUSH
52930: LD_INT 105
52932: PUSH
52933: LD_INT 106
52935: PUSH
52936: LD_INT 107
52938: PUSH
52939: LD_INT 108
52941: PUSH
52942: LD_INT 109
52944: PUSH
52945: LD_INT 110
52947: PUSH
52948: LD_INT 111
52950: PUSH
52951: LD_INT 112
52953: PUSH
52954: LD_INT 113
52956: PUSH
52957: LD_INT 114
52959: PUSH
52960: LD_INT 116
52962: PUSH
52963: LD_INT 117
52965: PUSH
52966: LD_INT 118
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: ST_TO_ADDR
52992: GO 54447
52994: LD_INT 13
52996: DOUBLE
52997: EQUAL
52998: IFTRUE 53002
53000: GO 53210
53002: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
53003: LD_ADDR_VAR 0 2
53007: PUSH
53008: LD_INT 1
53010: PUSH
53011: LD_INT 2
53013: PUSH
53014: LD_INT 3
53016: PUSH
53017: LD_INT 4
53019: PUSH
53020: LD_INT 5
53022: PUSH
53023: LD_INT 8
53025: PUSH
53026: LD_INT 9
53028: PUSH
53029: LD_INT 10
53031: PUSH
53032: LD_INT 11
53034: PUSH
53035: LD_INT 12
53037: PUSH
53038: LD_INT 14
53040: PUSH
53041: LD_INT 15
53043: PUSH
53044: LD_INT 16
53046: PUSH
53047: LD_INT 17
53049: PUSH
53050: LD_INT 18
53052: PUSH
53053: LD_INT 19
53055: PUSH
53056: LD_INT 20
53058: PUSH
53059: LD_INT 21
53061: PUSH
53062: LD_INT 22
53064: PUSH
53065: LD_INT 23
53067: PUSH
53068: LD_INT 24
53070: PUSH
53071: LD_INT 25
53073: PUSH
53074: LD_INT 26
53076: PUSH
53077: LD_INT 27
53079: PUSH
53080: LD_INT 28
53082: PUSH
53083: LD_INT 30
53085: PUSH
53086: LD_INT 31
53088: PUSH
53089: LD_INT 32
53091: PUSH
53092: LD_INT 33
53094: PUSH
53095: LD_INT 34
53097: PUSH
53098: LD_INT 36
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 101
53136: PUSH
53137: LD_INT 102
53139: PUSH
53140: LD_INT 103
53142: PUSH
53143: LD_INT 104
53145: PUSH
53146: LD_INT 105
53148: PUSH
53149: LD_INT 106
53151: PUSH
53152: LD_INT 107
53154: PUSH
53155: LD_INT 108
53157: PUSH
53158: LD_INT 109
53160: PUSH
53161: LD_INT 110
53163: PUSH
53164: LD_INT 111
53166: PUSH
53167: LD_INT 112
53169: PUSH
53170: LD_INT 113
53172: PUSH
53173: LD_INT 114
53175: PUSH
53176: LD_INT 116
53178: PUSH
53179: LD_INT 117
53181: PUSH
53182: LD_INT 118
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: ST_TO_ADDR
53208: GO 54447
53210: LD_INT 14
53212: DOUBLE
53213: EQUAL
53214: IFTRUE 53218
53216: GO 53442
53218: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
53219: LD_ADDR_VAR 0 2
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: LD_INT 2
53229: PUSH
53230: LD_INT 3
53232: PUSH
53233: LD_INT 4
53235: PUSH
53236: LD_INT 5
53238: PUSH
53239: LD_INT 6
53241: PUSH
53242: LD_INT 7
53244: PUSH
53245: LD_INT 8
53247: PUSH
53248: LD_INT 9
53250: PUSH
53251: LD_INT 10
53253: PUSH
53254: LD_INT 11
53256: PUSH
53257: LD_INT 12
53259: PUSH
53260: LD_INT 13
53262: PUSH
53263: LD_INT 14
53265: PUSH
53266: LD_INT 15
53268: PUSH
53269: LD_INT 16
53271: PUSH
53272: LD_INT 17
53274: PUSH
53275: LD_INT 18
53277: PUSH
53278: LD_INT 19
53280: PUSH
53281: LD_INT 20
53283: PUSH
53284: LD_INT 21
53286: PUSH
53287: LD_INT 22
53289: PUSH
53290: LD_INT 23
53292: PUSH
53293: LD_INT 24
53295: PUSH
53296: LD_INT 25
53298: PUSH
53299: LD_INT 26
53301: PUSH
53302: LD_INT 27
53304: PUSH
53305: LD_INT 28
53307: PUSH
53308: LD_INT 29
53310: PUSH
53311: LD_INT 30
53313: PUSH
53314: LD_INT 31
53316: PUSH
53317: LD_INT 32
53319: PUSH
53320: LD_INT 33
53322: PUSH
53323: LD_INT 34
53325: PUSH
53326: LD_INT 36
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 101
53368: PUSH
53369: LD_INT 102
53371: PUSH
53372: LD_INT 103
53374: PUSH
53375: LD_INT 104
53377: PUSH
53378: LD_INT 105
53380: PUSH
53381: LD_INT 106
53383: PUSH
53384: LD_INT 107
53386: PUSH
53387: LD_INT 108
53389: PUSH
53390: LD_INT 109
53392: PUSH
53393: LD_INT 110
53395: PUSH
53396: LD_INT 111
53398: PUSH
53399: LD_INT 112
53401: PUSH
53402: LD_INT 113
53404: PUSH
53405: LD_INT 114
53407: PUSH
53408: LD_INT 116
53410: PUSH
53411: LD_INT 117
53413: PUSH
53414: LD_INT 118
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: ST_TO_ADDR
53440: GO 54447
53442: LD_INT 15
53444: DOUBLE
53445: EQUAL
53446: IFTRUE 53450
53448: GO 53674
53450: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
53451: LD_ADDR_VAR 0 2
53455: PUSH
53456: LD_INT 1
53458: PUSH
53459: LD_INT 2
53461: PUSH
53462: LD_INT 3
53464: PUSH
53465: LD_INT 4
53467: PUSH
53468: LD_INT 5
53470: PUSH
53471: LD_INT 6
53473: PUSH
53474: LD_INT 7
53476: PUSH
53477: LD_INT 8
53479: PUSH
53480: LD_INT 9
53482: PUSH
53483: LD_INT 10
53485: PUSH
53486: LD_INT 11
53488: PUSH
53489: LD_INT 12
53491: PUSH
53492: LD_INT 13
53494: PUSH
53495: LD_INT 14
53497: PUSH
53498: LD_INT 15
53500: PUSH
53501: LD_INT 16
53503: PUSH
53504: LD_INT 17
53506: PUSH
53507: LD_INT 18
53509: PUSH
53510: LD_INT 19
53512: PUSH
53513: LD_INT 20
53515: PUSH
53516: LD_INT 21
53518: PUSH
53519: LD_INT 22
53521: PUSH
53522: LD_INT 23
53524: PUSH
53525: LD_INT 24
53527: PUSH
53528: LD_INT 25
53530: PUSH
53531: LD_INT 26
53533: PUSH
53534: LD_INT 27
53536: PUSH
53537: LD_INT 28
53539: PUSH
53540: LD_INT 29
53542: PUSH
53543: LD_INT 30
53545: PUSH
53546: LD_INT 31
53548: PUSH
53549: LD_INT 32
53551: PUSH
53552: LD_INT 33
53554: PUSH
53555: LD_INT 34
53557: PUSH
53558: LD_INT 36
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 101
53600: PUSH
53601: LD_INT 102
53603: PUSH
53604: LD_INT 103
53606: PUSH
53607: LD_INT 104
53609: PUSH
53610: LD_INT 105
53612: PUSH
53613: LD_INT 106
53615: PUSH
53616: LD_INT 107
53618: PUSH
53619: LD_INT 108
53621: PUSH
53622: LD_INT 109
53624: PUSH
53625: LD_INT 110
53627: PUSH
53628: LD_INT 111
53630: PUSH
53631: LD_INT 112
53633: PUSH
53634: LD_INT 113
53636: PUSH
53637: LD_INT 114
53639: PUSH
53640: LD_INT 116
53642: PUSH
53643: LD_INT 117
53645: PUSH
53646: LD_INT 118
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: ST_TO_ADDR
53672: GO 54447
53674: LD_INT 16
53676: DOUBLE
53677: EQUAL
53678: IFTRUE 53682
53680: GO 53818
53682: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
53683: LD_ADDR_VAR 0 2
53687: PUSH
53688: LD_INT 2
53690: PUSH
53691: LD_INT 4
53693: PUSH
53694: LD_INT 5
53696: PUSH
53697: LD_INT 7
53699: PUSH
53700: LD_INT 11
53702: PUSH
53703: LD_INT 12
53705: PUSH
53706: LD_INT 15
53708: PUSH
53709: LD_INT 16
53711: PUSH
53712: LD_INT 20
53714: PUSH
53715: LD_INT 21
53717: PUSH
53718: LD_INT 22
53720: PUSH
53721: LD_INT 23
53723: PUSH
53724: LD_INT 25
53726: PUSH
53727: LD_INT 26
53729: PUSH
53730: LD_INT 30
53732: PUSH
53733: LD_INT 31
53735: PUSH
53736: LD_INT 32
53738: PUSH
53739: LD_INT 33
53741: PUSH
53742: LD_INT 34
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 101
53768: PUSH
53769: LD_INT 102
53771: PUSH
53772: LD_INT 103
53774: PUSH
53775: LD_INT 106
53777: PUSH
53778: LD_INT 108
53780: PUSH
53781: LD_INT 112
53783: PUSH
53784: LD_INT 113
53786: PUSH
53787: LD_INT 114
53789: PUSH
53790: LD_INT 116
53792: PUSH
53793: LD_INT 117
53795: PUSH
53796: LD_INT 118
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: ST_TO_ADDR
53816: GO 54447
53818: LD_INT 17
53820: DOUBLE
53821: EQUAL
53822: IFTRUE 53826
53824: GO 54050
53826: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
53827: LD_ADDR_VAR 0 2
53831: PUSH
53832: LD_INT 1
53834: PUSH
53835: LD_INT 2
53837: PUSH
53838: LD_INT 3
53840: PUSH
53841: LD_INT 4
53843: PUSH
53844: LD_INT 5
53846: PUSH
53847: LD_INT 6
53849: PUSH
53850: LD_INT 7
53852: PUSH
53853: LD_INT 8
53855: PUSH
53856: LD_INT 9
53858: PUSH
53859: LD_INT 10
53861: PUSH
53862: LD_INT 11
53864: PUSH
53865: LD_INT 12
53867: PUSH
53868: LD_INT 13
53870: PUSH
53871: LD_INT 14
53873: PUSH
53874: LD_INT 15
53876: PUSH
53877: LD_INT 16
53879: PUSH
53880: LD_INT 17
53882: PUSH
53883: LD_INT 18
53885: PUSH
53886: LD_INT 19
53888: PUSH
53889: LD_INT 20
53891: PUSH
53892: LD_INT 21
53894: PUSH
53895: LD_INT 22
53897: PUSH
53898: LD_INT 23
53900: PUSH
53901: LD_INT 24
53903: PUSH
53904: LD_INT 25
53906: PUSH
53907: LD_INT 26
53909: PUSH
53910: LD_INT 27
53912: PUSH
53913: LD_INT 28
53915: PUSH
53916: LD_INT 29
53918: PUSH
53919: LD_INT 30
53921: PUSH
53922: LD_INT 31
53924: PUSH
53925: LD_INT 32
53927: PUSH
53928: LD_INT 33
53930: PUSH
53931: LD_INT 34
53933: PUSH
53934: LD_INT 36
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 101
53976: PUSH
53977: LD_INT 102
53979: PUSH
53980: LD_INT 103
53982: PUSH
53983: LD_INT 104
53985: PUSH
53986: LD_INT 105
53988: PUSH
53989: LD_INT 106
53991: PUSH
53992: LD_INT 107
53994: PUSH
53995: LD_INT 108
53997: PUSH
53998: LD_INT 109
54000: PUSH
54001: LD_INT 110
54003: PUSH
54004: LD_INT 111
54006: PUSH
54007: LD_INT 112
54009: PUSH
54010: LD_INT 113
54012: PUSH
54013: LD_INT 114
54015: PUSH
54016: LD_INT 116
54018: PUSH
54019: LD_INT 117
54021: PUSH
54022: LD_INT 118
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: ST_TO_ADDR
54048: GO 54447
54050: LD_INT 18
54052: DOUBLE
54053: EQUAL
54054: IFTRUE 54058
54056: GO 54206
54058: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
54059: LD_ADDR_VAR 0 2
54063: PUSH
54064: LD_INT 2
54066: PUSH
54067: LD_INT 4
54069: PUSH
54070: LD_INT 5
54072: PUSH
54073: LD_INT 7
54075: PUSH
54076: LD_INT 11
54078: PUSH
54079: LD_INT 12
54081: PUSH
54082: LD_INT 15
54084: PUSH
54085: LD_INT 16
54087: PUSH
54088: LD_INT 20
54090: PUSH
54091: LD_INT 21
54093: PUSH
54094: LD_INT 22
54096: PUSH
54097: LD_INT 23
54099: PUSH
54100: LD_INT 25
54102: PUSH
54103: LD_INT 26
54105: PUSH
54106: LD_INT 30
54108: PUSH
54109: LD_INT 31
54111: PUSH
54112: LD_INT 32
54114: PUSH
54115: LD_INT 33
54117: PUSH
54118: LD_INT 34
54120: PUSH
54121: LD_INT 35
54123: PUSH
54124: LD_INT 36
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 101
54152: PUSH
54153: LD_INT 102
54155: PUSH
54156: LD_INT 103
54158: PUSH
54159: LD_INT 106
54161: PUSH
54162: LD_INT 108
54164: PUSH
54165: LD_INT 112
54167: PUSH
54168: LD_INT 113
54170: PUSH
54171: LD_INT 114
54173: PUSH
54174: LD_INT 115
54176: PUSH
54177: LD_INT 116
54179: PUSH
54180: LD_INT 117
54182: PUSH
54183: LD_INT 118
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: ST_TO_ADDR
54204: GO 54447
54206: LD_INT 19
54208: DOUBLE
54209: EQUAL
54210: IFTRUE 54214
54212: GO 54446
54214: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
54215: LD_ADDR_VAR 0 2
54219: PUSH
54220: LD_INT 1
54222: PUSH
54223: LD_INT 2
54225: PUSH
54226: LD_INT 3
54228: PUSH
54229: LD_INT 4
54231: PUSH
54232: LD_INT 5
54234: PUSH
54235: LD_INT 6
54237: PUSH
54238: LD_INT 7
54240: PUSH
54241: LD_INT 8
54243: PUSH
54244: LD_INT 9
54246: PUSH
54247: LD_INT 10
54249: PUSH
54250: LD_INT 11
54252: PUSH
54253: LD_INT 12
54255: PUSH
54256: LD_INT 13
54258: PUSH
54259: LD_INT 14
54261: PUSH
54262: LD_INT 15
54264: PUSH
54265: LD_INT 16
54267: PUSH
54268: LD_INT 17
54270: PUSH
54271: LD_INT 18
54273: PUSH
54274: LD_INT 19
54276: PUSH
54277: LD_INT 20
54279: PUSH
54280: LD_INT 21
54282: PUSH
54283: LD_INT 22
54285: PUSH
54286: LD_INT 23
54288: PUSH
54289: LD_INT 24
54291: PUSH
54292: LD_INT 25
54294: PUSH
54295: LD_INT 26
54297: PUSH
54298: LD_INT 27
54300: PUSH
54301: LD_INT 28
54303: PUSH
54304: LD_INT 29
54306: PUSH
54307: LD_INT 30
54309: PUSH
54310: LD_INT 31
54312: PUSH
54313: LD_INT 32
54315: PUSH
54316: LD_INT 33
54318: PUSH
54319: LD_INT 34
54321: PUSH
54322: LD_INT 35
54324: PUSH
54325: LD_INT 36
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 101
54368: PUSH
54369: LD_INT 102
54371: PUSH
54372: LD_INT 103
54374: PUSH
54375: LD_INT 104
54377: PUSH
54378: LD_INT 105
54380: PUSH
54381: LD_INT 106
54383: PUSH
54384: LD_INT 107
54386: PUSH
54387: LD_INT 108
54389: PUSH
54390: LD_INT 109
54392: PUSH
54393: LD_INT 110
54395: PUSH
54396: LD_INT 111
54398: PUSH
54399: LD_INT 112
54401: PUSH
54402: LD_INT 113
54404: PUSH
54405: LD_INT 114
54407: PUSH
54408: LD_INT 115
54410: PUSH
54411: LD_INT 116
54413: PUSH
54414: LD_INT 117
54416: PUSH
54417: LD_INT 118
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: ST_TO_ADDR
54444: GO 54447
54446: POP
// end else
54447: GO 54678
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
54449: LD_ADDR_VAR 0 2
54453: PUSH
54454: LD_INT 1
54456: PUSH
54457: LD_INT 2
54459: PUSH
54460: LD_INT 3
54462: PUSH
54463: LD_INT 4
54465: PUSH
54466: LD_INT 5
54468: PUSH
54469: LD_INT 6
54471: PUSH
54472: LD_INT 7
54474: PUSH
54475: LD_INT 8
54477: PUSH
54478: LD_INT 9
54480: PUSH
54481: LD_INT 10
54483: PUSH
54484: LD_INT 11
54486: PUSH
54487: LD_INT 12
54489: PUSH
54490: LD_INT 13
54492: PUSH
54493: LD_INT 14
54495: PUSH
54496: LD_INT 15
54498: PUSH
54499: LD_INT 16
54501: PUSH
54502: LD_INT 17
54504: PUSH
54505: LD_INT 18
54507: PUSH
54508: LD_INT 19
54510: PUSH
54511: LD_INT 20
54513: PUSH
54514: LD_INT 21
54516: PUSH
54517: LD_INT 22
54519: PUSH
54520: LD_INT 23
54522: PUSH
54523: LD_INT 24
54525: PUSH
54526: LD_INT 25
54528: PUSH
54529: LD_INT 26
54531: PUSH
54532: LD_INT 27
54534: PUSH
54535: LD_INT 28
54537: PUSH
54538: LD_INT 29
54540: PUSH
54541: LD_INT 30
54543: PUSH
54544: LD_INT 31
54546: PUSH
54547: LD_INT 32
54549: PUSH
54550: LD_INT 33
54552: PUSH
54553: LD_INT 34
54555: PUSH
54556: LD_INT 35
54558: PUSH
54559: LD_INT 36
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 101
54602: PUSH
54603: LD_INT 102
54605: PUSH
54606: LD_INT 103
54608: PUSH
54609: LD_INT 104
54611: PUSH
54612: LD_INT 105
54614: PUSH
54615: LD_INT 106
54617: PUSH
54618: LD_INT 107
54620: PUSH
54621: LD_INT 108
54623: PUSH
54624: LD_INT 109
54626: PUSH
54627: LD_INT 110
54629: PUSH
54630: LD_INT 111
54632: PUSH
54633: LD_INT 112
54635: PUSH
54636: LD_INT 113
54638: PUSH
54639: LD_INT 114
54641: PUSH
54642: LD_INT 115
54644: PUSH
54645: LD_INT 116
54647: PUSH
54648: LD_INT 117
54650: PUSH
54651: LD_INT 118
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: ST_TO_ADDR
// if result then
54678: LD_VAR 0 2
54682: IFFALSE 55468
// begin normal :=  ;
54684: LD_ADDR_VAR 0 5
54688: PUSH
54689: LD_STRING 
54691: ST_TO_ADDR
// hardcore :=  ;
54692: LD_ADDR_VAR 0 6
54696: PUSH
54697: LD_STRING 
54699: ST_TO_ADDR
// active :=  ;
54700: LD_ADDR_VAR 0 7
54704: PUSH
54705: LD_STRING 
54707: ST_TO_ADDR
// for i = 1 to normalCounter do
54708: LD_ADDR_VAR 0 8
54712: PUSH
54713: DOUBLE
54714: LD_INT 1
54716: DEC
54717: ST_TO_ADDR
54718: LD_EXP 21
54722: PUSH
54723: FOR_TO
54724: IFFALSE 54825
// begin tmp := 0 ;
54726: LD_ADDR_VAR 0 3
54730: PUSH
54731: LD_STRING 0
54733: ST_TO_ADDR
// if result [ 1 ] then
54734: LD_VAR 0 2
54738: PUSH
54739: LD_INT 1
54741: ARRAY
54742: IFFALSE 54807
// if result [ 1 ] [ 1 ] = i then
54744: LD_VAR 0 2
54748: PUSH
54749: LD_INT 1
54751: ARRAY
54752: PUSH
54753: LD_INT 1
54755: ARRAY
54756: PUSH
54757: LD_VAR 0 8
54761: EQUAL
54762: IFFALSE 54807
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
54764: LD_ADDR_VAR 0 2
54768: PUSH
54769: LD_VAR 0 2
54773: PPUSH
54774: LD_INT 1
54776: PPUSH
54777: LD_VAR 0 2
54781: PUSH
54782: LD_INT 1
54784: ARRAY
54785: PPUSH
54786: LD_INT 1
54788: PPUSH
54789: CALL_OW 3
54793: PPUSH
54794: CALL_OW 1
54798: ST_TO_ADDR
// tmp := 1 ;
54799: LD_ADDR_VAR 0 3
54803: PUSH
54804: LD_STRING 1
54806: ST_TO_ADDR
// end ; normal := normal & tmp ;
54807: LD_ADDR_VAR 0 5
54811: PUSH
54812: LD_VAR 0 5
54816: PUSH
54817: LD_VAR 0 3
54821: STR
54822: ST_TO_ADDR
// end ;
54823: GO 54723
54825: POP
54826: POP
// for i = 1 to hardcoreCounter do
54827: LD_ADDR_VAR 0 8
54831: PUSH
54832: DOUBLE
54833: LD_INT 1
54835: DEC
54836: ST_TO_ADDR
54837: LD_EXP 22
54841: PUSH
54842: FOR_TO
54843: IFFALSE 54948
// begin tmp := 0 ;
54845: LD_ADDR_VAR 0 3
54849: PUSH
54850: LD_STRING 0
54852: ST_TO_ADDR
// if result [ 2 ] then
54853: LD_VAR 0 2
54857: PUSH
54858: LD_INT 2
54860: ARRAY
54861: IFFALSE 54930
// if result [ 2 ] [ 1 ] = 100 + i then
54863: LD_VAR 0 2
54867: PUSH
54868: LD_INT 2
54870: ARRAY
54871: PUSH
54872: LD_INT 1
54874: ARRAY
54875: PUSH
54876: LD_INT 100
54878: PUSH
54879: LD_VAR 0 8
54883: PLUS
54884: EQUAL
54885: IFFALSE 54930
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
54887: LD_ADDR_VAR 0 2
54891: PUSH
54892: LD_VAR 0 2
54896: PPUSH
54897: LD_INT 2
54899: PPUSH
54900: LD_VAR 0 2
54904: PUSH
54905: LD_INT 2
54907: ARRAY
54908: PPUSH
54909: LD_INT 1
54911: PPUSH
54912: CALL_OW 3
54916: PPUSH
54917: CALL_OW 1
54921: ST_TO_ADDR
// tmp := 1 ;
54922: LD_ADDR_VAR 0 3
54926: PUSH
54927: LD_STRING 1
54929: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
54930: LD_ADDR_VAR 0 6
54934: PUSH
54935: LD_VAR 0 6
54939: PUSH
54940: LD_VAR 0 3
54944: STR
54945: ST_TO_ADDR
// end ;
54946: GO 54842
54948: POP
54949: POP
// if isGameLoad then
54950: LD_VAR 0 1
54954: IFFALSE 55429
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
54956: LD_ADDR_VAR 0 4
54960: PUSH
54961: LD_EXP 25
54965: PUSH
54966: LD_EXP 24
54970: PUSH
54971: LD_EXP 26
54975: PUSH
54976: LD_EXP 23
54980: PUSH
54981: LD_EXP 27
54985: PUSH
54986: LD_EXP 28
54990: PUSH
54991: LD_EXP 29
54995: PUSH
54996: LD_EXP 30
55000: PUSH
55001: LD_EXP 31
55005: PUSH
55006: LD_EXP 32
55010: PUSH
55011: LD_EXP 33
55015: PUSH
55016: LD_EXP 34
55020: PUSH
55021: LD_EXP 35
55025: PUSH
55026: LD_EXP 36
55030: PUSH
55031: LD_EXP 44
55035: PUSH
55036: LD_EXP 45
55040: PUSH
55041: LD_EXP 46
55045: PUSH
55046: LD_EXP 47
55050: PUSH
55051: LD_EXP 49
55055: PUSH
55056: LD_EXP 50
55060: PUSH
55061: LD_EXP 51
55065: PUSH
55066: LD_EXP 54
55070: PUSH
55071: LD_EXP 56
55075: PUSH
55076: LD_EXP 57
55080: PUSH
55081: LD_EXP 58
55085: PUSH
55086: LD_EXP 60
55090: PUSH
55091: LD_EXP 61
55095: PUSH
55096: LD_EXP 64
55100: PUSH
55101: LD_EXP 65
55105: PUSH
55106: LD_EXP 66
55110: PUSH
55111: LD_EXP 67
55115: PUSH
55116: LD_EXP 68
55120: PUSH
55121: LD_EXP 69
55125: PUSH
55126: LD_EXP 70
55130: PUSH
55131: LD_EXP 71
55135: PUSH
55136: LD_EXP 72
55140: PUSH
55141: LD_EXP 37
55145: PUSH
55146: LD_EXP 38
55150: PUSH
55151: LD_EXP 41
55155: PUSH
55156: LD_EXP 42
55160: PUSH
55161: LD_EXP 43
55165: PUSH
55166: LD_EXP 39
55170: PUSH
55171: LD_EXP 40
55175: PUSH
55176: LD_EXP 48
55180: PUSH
55181: LD_EXP 52
55185: PUSH
55186: LD_EXP 53
55190: PUSH
55191: LD_EXP 55
55195: PUSH
55196: LD_EXP 59
55200: PUSH
55201: LD_EXP 62
55205: PUSH
55206: LD_EXP 63
55210: PUSH
55211: LD_EXP 73
55215: PUSH
55216: LD_EXP 74
55220: PUSH
55221: LD_EXP 75
55225: PUSH
55226: LD_EXP 76
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: ST_TO_ADDR
// tmp :=  ;
55287: LD_ADDR_VAR 0 3
55291: PUSH
55292: LD_STRING 
55294: ST_TO_ADDR
// for i = 1 to normalCounter do
55295: LD_ADDR_VAR 0 8
55299: PUSH
55300: DOUBLE
55301: LD_INT 1
55303: DEC
55304: ST_TO_ADDR
55305: LD_EXP 21
55309: PUSH
55310: FOR_TO
55311: IFFALSE 55347
// begin if flags [ i ] then
55313: LD_VAR 0 4
55317: PUSH
55318: LD_VAR 0 8
55322: ARRAY
55323: IFFALSE 55345
// tmp := tmp & i & ; ;
55325: LD_ADDR_VAR 0 3
55329: PUSH
55330: LD_VAR 0 3
55334: PUSH
55335: LD_VAR 0 8
55339: STR
55340: PUSH
55341: LD_STRING ;
55343: STR
55344: ST_TO_ADDR
// end ;
55345: GO 55310
55347: POP
55348: POP
// for i = 1 to hardcoreCounter do
55349: LD_ADDR_VAR 0 8
55353: PUSH
55354: DOUBLE
55355: LD_INT 1
55357: DEC
55358: ST_TO_ADDR
55359: LD_EXP 22
55363: PUSH
55364: FOR_TO
55365: IFFALSE 55411
// begin if flags [ normalCounter + i ] then
55367: LD_VAR 0 4
55371: PUSH
55372: LD_EXP 21
55376: PUSH
55377: LD_VAR 0 8
55381: PLUS
55382: ARRAY
55383: IFFALSE 55409
// tmp := tmp & ( 100 + i ) & ; ;
55385: LD_ADDR_VAR 0 3
55389: PUSH
55390: LD_VAR 0 3
55394: PUSH
55395: LD_INT 100
55397: PUSH
55398: LD_VAR 0 8
55402: PLUS
55403: STR
55404: PUSH
55405: LD_STRING ;
55407: STR
55408: ST_TO_ADDR
// end ;
55409: GO 55364
55411: POP
55412: POP
// if tmp then
55413: LD_VAR 0 3
55417: IFFALSE 55429
// active := tmp ;
55419: LD_ADDR_VAR 0 7
55423: PUSH
55424: LD_VAR 0 3
55428: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
55429: LD_STRING getStreamItemsFromMission("
55431: PUSH
55432: LD_VAR 0 5
55436: STR
55437: PUSH
55438: LD_STRING ","
55440: STR
55441: PUSH
55442: LD_VAR 0 6
55446: STR
55447: PUSH
55448: LD_STRING ","
55450: STR
55451: PUSH
55452: LD_VAR 0 7
55456: STR
55457: PUSH
55458: LD_STRING ")
55460: STR
55461: PPUSH
55462: CALL_OW 559
// end else
55466: GO 55475
// ToLua ( getStreamItemsFromMission("","","") ) ;
55468: LD_STRING getStreamItemsFromMission("","","")
55470: PPUSH
55471: CALL_OW 559
// end ;
55475: LD_VAR 0 2
55479: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
55480: LD_EXP 20
55484: PUSH
55485: LD_EXP 25
55489: AND
55490: IFFALSE 55614
55492: GO 55494
55494: DISABLE
55495: LD_INT 0
55497: PPUSH
55498: PPUSH
// begin enable ;
55499: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
55500: LD_ADDR_VAR 0 2
55504: PUSH
55505: LD_INT 22
55507: PUSH
55508: LD_OWVAR 2
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 2
55519: PUSH
55520: LD_INT 34
55522: PUSH
55523: LD_INT 7
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 34
55532: PUSH
55533: LD_INT 45
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 34
55542: PUSH
55543: LD_INT 28
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 34
55552: PUSH
55553: LD_INT 47
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PPUSH
55571: CALL_OW 69
55575: ST_TO_ADDR
// if not tmp then
55576: LD_VAR 0 2
55580: NOT
55581: IFFALSE 55585
// exit ;
55583: GO 55614
// for i in tmp do
55585: LD_ADDR_VAR 0 1
55589: PUSH
55590: LD_VAR 0 2
55594: PUSH
55595: FOR_IN
55596: IFFALSE 55612
// begin SetLives ( i , 0 ) ;
55598: LD_VAR 0 1
55602: PPUSH
55603: LD_INT 0
55605: PPUSH
55606: CALL_OW 234
// end ;
55610: GO 55595
55612: POP
55613: POP
// end ;
55614: PPOPN 2
55616: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
55617: LD_EXP 20
55621: PUSH
55622: LD_EXP 26
55626: AND
55627: IFFALSE 55711
55629: GO 55631
55631: DISABLE
55632: LD_INT 0
55634: PPUSH
55635: PPUSH
// begin enable ;
55636: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
55637: LD_ADDR_VAR 0 2
55641: PUSH
55642: LD_INT 22
55644: PUSH
55645: LD_OWVAR 2
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 32
55656: PUSH
55657: LD_INT 3
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PPUSH
55668: CALL_OW 69
55672: ST_TO_ADDR
// if not tmp then
55673: LD_VAR 0 2
55677: NOT
55678: IFFALSE 55682
// exit ;
55680: GO 55711
// for i in tmp do
55682: LD_ADDR_VAR 0 1
55686: PUSH
55687: LD_VAR 0 2
55691: PUSH
55692: FOR_IN
55693: IFFALSE 55709
// begin SetLives ( i , 0 ) ;
55695: LD_VAR 0 1
55699: PPUSH
55700: LD_INT 0
55702: PPUSH
55703: CALL_OW 234
// end ;
55707: GO 55692
55709: POP
55710: POP
// end ;
55711: PPOPN 2
55713: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
55714: LD_EXP 20
55718: PUSH
55719: LD_EXP 23
55723: AND
55724: IFFALSE 55817
55726: GO 55728
55728: DISABLE
55729: LD_INT 0
55731: PPUSH
// begin enable ;
55732: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
55733: LD_ADDR_VAR 0 1
55737: PUSH
55738: LD_INT 22
55740: PUSH
55741: LD_OWVAR 2
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 2
55752: PUSH
55753: LD_INT 25
55755: PUSH
55756: LD_INT 5
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 25
55765: PUSH
55766: LD_INT 9
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 25
55775: PUSH
55776: LD_INT 8
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PPUSH
55793: CALL_OW 69
55797: PUSH
55798: FOR_IN
55799: IFFALSE 55815
// begin SetClass ( i , 1 ) ;
55801: LD_VAR 0 1
55805: PPUSH
55806: LD_INT 1
55808: PPUSH
55809: CALL_OW 336
// end ;
55813: GO 55798
55815: POP
55816: POP
// end ;
55817: PPOPN 1
55819: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
55820: LD_EXP 20
55824: PUSH
55825: LD_EXP 24
55829: AND
55830: PUSH
55831: LD_OWVAR 65
55835: PUSH
55836: LD_INT 7
55838: LESS
55839: AND
55840: IFFALSE 55854
55842: GO 55844
55844: DISABLE
// begin enable ;
55845: ENABLE
// game_speed := 7 ;
55846: LD_ADDR_OWVAR 65
55850: PUSH
55851: LD_INT 7
55853: ST_TO_ADDR
// end ;
55854: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
55855: LD_EXP 20
55859: PUSH
55860: LD_EXP 27
55864: AND
55865: IFFALSE 56067
55867: GO 55869
55869: DISABLE
55870: LD_INT 0
55872: PPUSH
55873: PPUSH
55874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
55875: LD_ADDR_VAR 0 3
55879: PUSH
55880: LD_INT 81
55882: PUSH
55883: LD_OWVAR 2
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 21
55894: PUSH
55895: LD_INT 1
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PPUSH
55906: CALL_OW 69
55910: ST_TO_ADDR
// if not tmp then
55911: LD_VAR 0 3
55915: NOT
55916: IFFALSE 55920
// exit ;
55918: GO 56067
// if tmp > 5 then
55920: LD_VAR 0 3
55924: PUSH
55925: LD_INT 5
55927: GREATER
55928: IFFALSE 55940
// k := 5 else
55930: LD_ADDR_VAR 0 2
55934: PUSH
55935: LD_INT 5
55937: ST_TO_ADDR
55938: GO 55950
// k := tmp ;
55940: LD_ADDR_VAR 0 2
55944: PUSH
55945: LD_VAR 0 3
55949: ST_TO_ADDR
// for i := 1 to k do
55950: LD_ADDR_VAR 0 1
55954: PUSH
55955: DOUBLE
55956: LD_INT 1
55958: DEC
55959: ST_TO_ADDR
55960: LD_VAR 0 2
55964: PUSH
55965: FOR_TO
55966: IFFALSE 56065
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
55968: LD_VAR 0 3
55972: PUSH
55973: LD_VAR 0 1
55977: ARRAY
55978: PPUSH
55979: LD_VAR 0 1
55983: PUSH
55984: LD_INT 4
55986: MOD
55987: PUSH
55988: LD_INT 1
55990: PLUS
55991: PPUSH
55992: CALL_OW 259
55996: PUSH
55997: LD_INT 10
55999: LESS
56000: IFFALSE 56063
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
56002: LD_VAR 0 3
56006: PUSH
56007: LD_VAR 0 1
56011: ARRAY
56012: PPUSH
56013: LD_VAR 0 1
56017: PUSH
56018: LD_INT 4
56020: MOD
56021: PUSH
56022: LD_INT 1
56024: PLUS
56025: PPUSH
56026: LD_VAR 0 3
56030: PUSH
56031: LD_VAR 0 1
56035: ARRAY
56036: PPUSH
56037: LD_VAR 0 1
56041: PUSH
56042: LD_INT 4
56044: MOD
56045: PUSH
56046: LD_INT 1
56048: PLUS
56049: PPUSH
56050: CALL_OW 259
56054: PUSH
56055: LD_INT 1
56057: PLUS
56058: PPUSH
56059: CALL_OW 237
56063: GO 55965
56065: POP
56066: POP
// end ;
56067: PPOPN 3
56069: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
56070: LD_EXP 20
56074: PUSH
56075: LD_EXP 28
56079: AND
56080: IFFALSE 56100
56082: GO 56084
56084: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
56085: LD_INT 4
56087: PPUSH
56088: LD_OWVAR 2
56092: PPUSH
56093: LD_INT 0
56095: PPUSH
56096: CALL_OW 324
56100: END
// every 0 0$1 trigger StreamModeActive and sShovel do
56101: LD_EXP 20
56105: PUSH
56106: LD_EXP 57
56110: AND
56111: IFFALSE 56131
56113: GO 56115
56115: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
56116: LD_INT 19
56118: PPUSH
56119: LD_OWVAR 2
56123: PPUSH
56124: LD_INT 0
56126: PPUSH
56127: CALL_OW 324
56131: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
56132: LD_EXP 20
56136: PUSH
56137: LD_EXP 29
56141: AND
56142: IFFALSE 56244
56144: GO 56146
56146: DISABLE
56147: LD_INT 0
56149: PPUSH
56150: PPUSH
// begin enable ;
56151: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
56152: LD_ADDR_VAR 0 2
56156: PUSH
56157: LD_INT 22
56159: PUSH
56160: LD_OWVAR 2
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 2
56171: PUSH
56172: LD_INT 34
56174: PUSH
56175: LD_INT 11
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 34
56184: PUSH
56185: LD_INT 30
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: LIST
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PPUSH
56201: CALL_OW 69
56205: ST_TO_ADDR
// if not tmp then
56206: LD_VAR 0 2
56210: NOT
56211: IFFALSE 56215
// exit ;
56213: GO 56244
// for i in tmp do
56215: LD_ADDR_VAR 0 1
56219: PUSH
56220: LD_VAR 0 2
56224: PUSH
56225: FOR_IN
56226: IFFALSE 56242
// begin SetLives ( i , 0 ) ;
56228: LD_VAR 0 1
56232: PPUSH
56233: LD_INT 0
56235: PPUSH
56236: CALL_OW 234
// end ;
56240: GO 56225
56242: POP
56243: POP
// end ;
56244: PPOPN 2
56246: END
// every 0 0$1 trigger StreamModeActive and sBunker do
56247: LD_EXP 20
56251: PUSH
56252: LD_EXP 30
56256: AND
56257: IFFALSE 56277
56259: GO 56261
56261: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
56262: LD_INT 32
56264: PPUSH
56265: LD_OWVAR 2
56269: PPUSH
56270: LD_INT 0
56272: PPUSH
56273: CALL_OW 324
56277: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
56278: LD_EXP 20
56282: PUSH
56283: LD_EXP 31
56287: AND
56288: IFFALSE 56469
56290: GO 56292
56292: DISABLE
56293: LD_INT 0
56295: PPUSH
56296: PPUSH
56297: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
56298: LD_ADDR_VAR 0 2
56302: PUSH
56303: LD_INT 22
56305: PUSH
56306: LD_OWVAR 2
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 33
56317: PUSH
56318: LD_INT 3
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PPUSH
56329: CALL_OW 69
56333: ST_TO_ADDR
// if not tmp then
56334: LD_VAR 0 2
56338: NOT
56339: IFFALSE 56343
// exit ;
56341: GO 56469
// side := 0 ;
56343: LD_ADDR_VAR 0 3
56347: PUSH
56348: LD_INT 0
56350: ST_TO_ADDR
// for i := 1 to 8 do
56351: LD_ADDR_VAR 0 1
56355: PUSH
56356: DOUBLE
56357: LD_INT 1
56359: DEC
56360: ST_TO_ADDR
56361: LD_INT 8
56363: PUSH
56364: FOR_TO
56365: IFFALSE 56413
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
56367: LD_OWVAR 2
56371: PUSH
56372: LD_VAR 0 1
56376: NONEQUAL
56377: PUSH
56378: LD_OWVAR 2
56382: PPUSH
56383: LD_VAR 0 1
56387: PPUSH
56388: CALL_OW 81
56392: PUSH
56393: LD_INT 2
56395: EQUAL
56396: AND
56397: IFFALSE 56411
// begin side := i ;
56399: LD_ADDR_VAR 0 3
56403: PUSH
56404: LD_VAR 0 1
56408: ST_TO_ADDR
// break ;
56409: GO 56413
// end ;
56411: GO 56364
56413: POP
56414: POP
// if not side then
56415: LD_VAR 0 3
56419: NOT
56420: IFFALSE 56424
// exit ;
56422: GO 56469
// for i := 1 to tmp do
56424: LD_ADDR_VAR 0 1
56428: PUSH
56429: DOUBLE
56430: LD_INT 1
56432: DEC
56433: ST_TO_ADDR
56434: LD_VAR 0 2
56438: PUSH
56439: FOR_TO
56440: IFFALSE 56467
// if Prob ( 60 ) then
56442: LD_INT 60
56444: PPUSH
56445: CALL_OW 13
56449: IFFALSE 56465
// SetSide ( i , side ) ;
56451: LD_VAR 0 1
56455: PPUSH
56456: LD_VAR 0 3
56460: PPUSH
56461: CALL_OW 235
56465: GO 56439
56467: POP
56468: POP
// end ;
56469: PPOPN 3
56471: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
56472: LD_EXP 20
56476: PUSH
56477: LD_EXP 33
56481: AND
56482: IFFALSE 56601
56484: GO 56486
56486: DISABLE
56487: LD_INT 0
56489: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
56490: LD_ADDR_VAR 0 1
56494: PUSH
56495: LD_INT 22
56497: PUSH
56498: LD_OWVAR 2
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 21
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 3
56519: PUSH
56520: LD_INT 23
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: LIST
56538: PPUSH
56539: CALL_OW 69
56543: PUSH
56544: FOR_IN
56545: IFFALSE 56599
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
56547: LD_VAR 0 1
56551: PPUSH
56552: CALL_OW 257
56556: PUSH
56557: LD_INT 1
56559: PUSH
56560: LD_INT 2
56562: PUSH
56563: LD_INT 3
56565: PUSH
56566: LD_INT 4
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: IN
56575: IFFALSE 56597
// SetClass ( un , rand ( 1 , 4 ) ) ;
56577: LD_VAR 0 1
56581: PPUSH
56582: LD_INT 1
56584: PPUSH
56585: LD_INT 4
56587: PPUSH
56588: CALL_OW 12
56592: PPUSH
56593: CALL_OW 336
56597: GO 56544
56599: POP
56600: POP
// end ;
56601: PPOPN 1
56603: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
56604: LD_EXP 20
56608: PUSH
56609: LD_EXP 32
56613: AND
56614: IFFALSE 56693
56616: GO 56618
56618: DISABLE
56619: LD_INT 0
56621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
56622: LD_ADDR_VAR 0 1
56626: PUSH
56627: LD_INT 22
56629: PUSH
56630: LD_OWVAR 2
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 21
56641: PUSH
56642: LD_INT 3
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PPUSH
56653: CALL_OW 69
56657: ST_TO_ADDR
// if not tmp then
56658: LD_VAR 0 1
56662: NOT
56663: IFFALSE 56667
// exit ;
56665: GO 56693
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
56667: LD_VAR 0 1
56671: PUSH
56672: LD_INT 1
56674: PPUSH
56675: LD_VAR 0 1
56679: PPUSH
56680: CALL_OW 12
56684: ARRAY
56685: PPUSH
56686: LD_INT 100
56688: PPUSH
56689: CALL_OW 234
// end ;
56693: PPOPN 1
56695: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
56696: LD_EXP 20
56700: PUSH
56701: LD_EXP 34
56705: AND
56706: IFFALSE 56804
56708: GO 56710
56710: DISABLE
56711: LD_INT 0
56713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
56714: LD_ADDR_VAR 0 1
56718: PUSH
56719: LD_INT 22
56721: PUSH
56722: LD_OWVAR 2
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 21
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PPUSH
56745: CALL_OW 69
56749: ST_TO_ADDR
// if not tmp then
56750: LD_VAR 0 1
56754: NOT
56755: IFFALSE 56759
// exit ;
56757: GO 56804
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
56759: LD_VAR 0 1
56763: PUSH
56764: LD_INT 1
56766: PPUSH
56767: LD_VAR 0 1
56771: PPUSH
56772: CALL_OW 12
56776: ARRAY
56777: PPUSH
56778: LD_INT 1
56780: PPUSH
56781: LD_INT 4
56783: PPUSH
56784: CALL_OW 12
56788: PPUSH
56789: LD_INT 3000
56791: PPUSH
56792: LD_INT 9000
56794: PPUSH
56795: CALL_OW 12
56799: PPUSH
56800: CALL_OW 492
// end ;
56804: PPOPN 1
56806: END
// every 0 0$1 trigger StreamModeActive and sDepot do
56807: LD_EXP 20
56811: PUSH
56812: LD_EXP 35
56816: AND
56817: IFFALSE 56837
56819: GO 56821
56821: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
56822: LD_INT 1
56824: PPUSH
56825: LD_OWVAR 2
56829: PPUSH
56830: LD_INT 0
56832: PPUSH
56833: CALL_OW 324
56837: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
56838: LD_EXP 20
56842: PUSH
56843: LD_EXP 36
56847: AND
56848: IFFALSE 56931
56850: GO 56852
56852: DISABLE
56853: LD_INT 0
56855: PPUSH
56856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
56857: LD_ADDR_VAR 0 2
56861: PUSH
56862: LD_INT 22
56864: PUSH
56865: LD_OWVAR 2
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 21
56876: PUSH
56877: LD_INT 3
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PPUSH
56888: CALL_OW 69
56892: ST_TO_ADDR
// if not tmp then
56893: LD_VAR 0 2
56897: NOT
56898: IFFALSE 56902
// exit ;
56900: GO 56931
// for i in tmp do
56902: LD_ADDR_VAR 0 1
56906: PUSH
56907: LD_VAR 0 2
56911: PUSH
56912: FOR_IN
56913: IFFALSE 56929
// SetBLevel ( i , 10 ) ;
56915: LD_VAR 0 1
56919: PPUSH
56920: LD_INT 10
56922: PPUSH
56923: CALL_OW 241
56927: GO 56912
56929: POP
56930: POP
// end ;
56931: PPOPN 2
56933: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
56934: LD_EXP 20
56938: PUSH
56939: LD_EXP 37
56943: AND
56944: IFFALSE 57055
56946: GO 56948
56948: DISABLE
56949: LD_INT 0
56951: PPUSH
56952: PPUSH
56953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56954: LD_ADDR_VAR 0 3
56958: PUSH
56959: LD_INT 22
56961: PUSH
56962: LD_OWVAR 2
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 25
56973: PUSH
56974: LD_INT 1
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PPUSH
56985: CALL_OW 69
56989: ST_TO_ADDR
// if not tmp then
56990: LD_VAR 0 3
56994: NOT
56995: IFFALSE 56999
// exit ;
56997: GO 57055
// un := tmp [ rand ( 1 , tmp ) ] ;
56999: LD_ADDR_VAR 0 2
57003: PUSH
57004: LD_VAR 0 3
57008: PUSH
57009: LD_INT 1
57011: PPUSH
57012: LD_VAR 0 3
57016: PPUSH
57017: CALL_OW 12
57021: ARRAY
57022: ST_TO_ADDR
// if Crawls ( un ) then
57023: LD_VAR 0 2
57027: PPUSH
57028: CALL_OW 318
57032: IFFALSE 57043
// ComWalk ( un ) ;
57034: LD_VAR 0 2
57038: PPUSH
57039: CALL_OW 138
// SetClass ( un , class_sniper ) ;
57043: LD_VAR 0 2
57047: PPUSH
57048: LD_INT 5
57050: PPUSH
57051: CALL_OW 336
// end ;
57055: PPOPN 3
57057: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
57058: LD_EXP 20
57062: PUSH
57063: LD_EXP 38
57067: AND
57068: PUSH
57069: LD_OWVAR 67
57073: PUSH
57074: LD_INT 4
57076: LESS
57077: AND
57078: IFFALSE 57097
57080: GO 57082
57082: DISABLE
// begin Difficulty := Difficulty + 1 ;
57083: LD_ADDR_OWVAR 67
57087: PUSH
57088: LD_OWVAR 67
57092: PUSH
57093: LD_INT 1
57095: PLUS
57096: ST_TO_ADDR
// end ;
57097: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
57098: LD_EXP 20
57102: PUSH
57103: LD_EXP 39
57107: AND
57108: IFFALSE 57211
57110: GO 57112
57112: DISABLE
57113: LD_INT 0
57115: PPUSH
// begin for i := 1 to 5 do
57116: LD_ADDR_VAR 0 1
57120: PUSH
57121: DOUBLE
57122: LD_INT 1
57124: DEC
57125: ST_TO_ADDR
57126: LD_INT 5
57128: PUSH
57129: FOR_TO
57130: IFFALSE 57209
// begin uc_nation := nation_nature ;
57132: LD_ADDR_OWVAR 21
57136: PUSH
57137: LD_INT 0
57139: ST_TO_ADDR
// uc_side := 0 ;
57140: LD_ADDR_OWVAR 20
57144: PUSH
57145: LD_INT 0
57147: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
57148: LD_ADDR_OWVAR 29
57152: PUSH
57153: LD_INT 12
57155: PUSH
57156: LD_INT 12
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: ST_TO_ADDR
// hc_agressivity := 20 ;
57163: LD_ADDR_OWVAR 35
57167: PUSH
57168: LD_INT 20
57170: ST_TO_ADDR
// hc_class := class_tiger ;
57171: LD_ADDR_OWVAR 28
57175: PUSH
57176: LD_INT 14
57178: ST_TO_ADDR
// hc_gallery :=  ;
57179: LD_ADDR_OWVAR 33
57183: PUSH
57184: LD_STRING 
57186: ST_TO_ADDR
// hc_name :=  ;
57187: LD_ADDR_OWVAR 26
57191: PUSH
57192: LD_STRING 
57194: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
57195: CALL_OW 44
57199: PPUSH
57200: LD_INT 0
57202: PPUSH
57203: CALL_OW 51
// end ;
57207: GO 57129
57209: POP
57210: POP
// end ;
57211: PPOPN 1
57213: END
// every 0 0$1 trigger StreamModeActive and sBomb do
57214: LD_EXP 20
57218: PUSH
57219: LD_EXP 40
57223: AND
57224: IFFALSE 57233
57226: GO 57228
57228: DISABLE
// StreamSibBomb ;
57229: CALL 57234 0 0
57233: END
// export function StreamSibBomb ; var i , x , y ; begin
57234: LD_INT 0
57236: PPUSH
57237: PPUSH
57238: PPUSH
57239: PPUSH
// result := false ;
57240: LD_ADDR_VAR 0 1
57244: PUSH
57245: LD_INT 0
57247: ST_TO_ADDR
// for i := 1 to 16 do
57248: LD_ADDR_VAR 0 2
57252: PUSH
57253: DOUBLE
57254: LD_INT 1
57256: DEC
57257: ST_TO_ADDR
57258: LD_INT 16
57260: PUSH
57261: FOR_TO
57262: IFFALSE 57461
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
57264: LD_ADDR_VAR 0 3
57268: PUSH
57269: LD_INT 10
57271: PUSH
57272: LD_INT 20
57274: PUSH
57275: LD_INT 30
57277: PUSH
57278: LD_INT 40
57280: PUSH
57281: LD_INT 50
57283: PUSH
57284: LD_INT 60
57286: PUSH
57287: LD_INT 70
57289: PUSH
57290: LD_INT 80
57292: PUSH
57293: LD_INT 90
57295: PUSH
57296: LD_INT 100
57298: PUSH
57299: LD_INT 110
57301: PUSH
57302: LD_INT 120
57304: PUSH
57305: LD_INT 130
57307: PUSH
57308: LD_INT 140
57310: PUSH
57311: LD_INT 150
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: PPUSH
57334: LD_INT 15
57336: PPUSH
57337: CALL_OW 12
57341: ARRAY
57342: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
57343: LD_ADDR_VAR 0 4
57347: PUSH
57348: LD_INT 10
57350: PUSH
57351: LD_INT 20
57353: PUSH
57354: LD_INT 30
57356: PUSH
57357: LD_INT 40
57359: PUSH
57360: LD_INT 50
57362: PUSH
57363: LD_INT 60
57365: PUSH
57366: LD_INT 70
57368: PUSH
57369: LD_INT 80
57371: PUSH
57372: LD_INT 90
57374: PUSH
57375: LD_INT 100
57377: PUSH
57378: LD_INT 110
57380: PUSH
57381: LD_INT 120
57383: PUSH
57384: LD_INT 130
57386: PUSH
57387: LD_INT 140
57389: PUSH
57390: LD_INT 150
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 1
57412: PPUSH
57413: LD_INT 15
57415: PPUSH
57416: CALL_OW 12
57420: ARRAY
57421: ST_TO_ADDR
// if ValidHex ( x , y ) then
57422: LD_VAR 0 3
57426: PPUSH
57427: LD_VAR 0 4
57431: PPUSH
57432: CALL_OW 488
57436: IFFALSE 57459
// begin result := [ x , y ] ;
57438: LD_ADDR_VAR 0 1
57442: PUSH
57443: LD_VAR 0 3
57447: PUSH
57448: LD_VAR 0 4
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: ST_TO_ADDR
// break ;
57457: GO 57461
// end ; end ;
57459: GO 57261
57461: POP
57462: POP
// if result then
57463: LD_VAR 0 1
57467: IFFALSE 57527
// begin ToLua ( playSibBomb() ) ;
57469: LD_STRING playSibBomb()
57471: PPUSH
57472: CALL_OW 559
// wait ( 0 0$14 ) ;
57476: LD_INT 490
57478: PPUSH
57479: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
57483: LD_VAR 0 1
57487: PUSH
57488: LD_INT 1
57490: ARRAY
57491: PPUSH
57492: LD_VAR 0 1
57496: PUSH
57497: LD_INT 2
57499: ARRAY
57500: PPUSH
57501: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
57505: LD_VAR 0 1
57509: PUSH
57510: LD_INT 1
57512: ARRAY
57513: PPUSH
57514: LD_VAR 0 1
57518: PUSH
57519: LD_INT 2
57521: ARRAY
57522: PPUSH
57523: CALL_OW 429
// end ; end ;
57527: LD_VAR 0 1
57531: RET
// every 0 0$1 trigger StreamModeActive and sReset do
57532: LD_EXP 20
57536: PUSH
57537: LD_EXP 42
57541: AND
57542: IFFALSE 57554
57544: GO 57546
57546: DISABLE
// YouLost (  ) ;
57547: LD_STRING 
57549: PPUSH
57550: CALL_OW 104
57554: END
// every 0 0$1 trigger StreamModeActive and sFog do
57555: LD_EXP 20
57559: PUSH
57560: LD_EXP 41
57564: AND
57565: IFFALSE 57579
57567: GO 57569
57569: DISABLE
// FogOff ( your_side ) ;
57570: LD_OWVAR 2
57574: PPUSH
57575: CALL_OW 344
57579: END
// every 0 0$1 trigger StreamModeActive and sSun do
57580: LD_EXP 20
57584: PUSH
57585: LD_EXP 43
57589: AND
57590: IFFALSE 57618
57592: GO 57594
57594: DISABLE
// begin solar_recharge_percent := 0 ;
57595: LD_ADDR_OWVAR 79
57599: PUSH
57600: LD_INT 0
57602: ST_TO_ADDR
// wait ( 5 5$00 ) ;
57603: LD_INT 10500
57605: PPUSH
57606: CALL_OW 67
// solar_recharge_percent := 100 ;
57610: LD_ADDR_OWVAR 79
57614: PUSH
57615: LD_INT 100
57617: ST_TO_ADDR
// end ;
57618: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
57619: LD_EXP 20
57623: PUSH
57624: LD_EXP 44
57628: AND
57629: IFFALSE 57868
57631: GO 57633
57633: DISABLE
57634: LD_INT 0
57636: PPUSH
57637: PPUSH
57638: PPUSH
// begin tmp := [ ] ;
57639: LD_ADDR_VAR 0 3
57643: PUSH
57644: EMPTY
57645: ST_TO_ADDR
// for i := 1 to 6 do
57646: LD_ADDR_VAR 0 1
57650: PUSH
57651: DOUBLE
57652: LD_INT 1
57654: DEC
57655: ST_TO_ADDR
57656: LD_INT 6
57658: PUSH
57659: FOR_TO
57660: IFFALSE 57765
// begin uc_nation := nation_nature ;
57662: LD_ADDR_OWVAR 21
57666: PUSH
57667: LD_INT 0
57669: ST_TO_ADDR
// uc_side := 0 ;
57670: LD_ADDR_OWVAR 20
57674: PUSH
57675: LD_INT 0
57677: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
57678: LD_ADDR_OWVAR 29
57682: PUSH
57683: LD_INT 12
57685: PUSH
57686: LD_INT 12
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: ST_TO_ADDR
// hc_agressivity := 20 ;
57693: LD_ADDR_OWVAR 35
57697: PUSH
57698: LD_INT 20
57700: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
57701: LD_ADDR_OWVAR 28
57705: PUSH
57706: LD_INT 17
57708: ST_TO_ADDR
// hc_gallery :=  ;
57709: LD_ADDR_OWVAR 33
57713: PUSH
57714: LD_STRING 
57716: ST_TO_ADDR
// hc_name :=  ;
57717: LD_ADDR_OWVAR 26
57721: PUSH
57722: LD_STRING 
57724: ST_TO_ADDR
// un := CreateHuman ;
57725: LD_ADDR_VAR 0 2
57729: PUSH
57730: CALL_OW 44
57734: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
57735: LD_VAR 0 2
57739: PPUSH
57740: LD_INT 1
57742: PPUSH
57743: CALL_OW 51
// tmp := tmp ^ un ;
57747: LD_ADDR_VAR 0 3
57751: PUSH
57752: LD_VAR 0 3
57756: PUSH
57757: LD_VAR 0 2
57761: ADD
57762: ST_TO_ADDR
// end ;
57763: GO 57659
57765: POP
57766: POP
// repeat wait ( 0 0$1 ) ;
57767: LD_INT 35
57769: PPUSH
57770: CALL_OW 67
// for un in tmp do
57774: LD_ADDR_VAR 0 2
57778: PUSH
57779: LD_VAR 0 3
57783: PUSH
57784: FOR_IN
57785: IFFALSE 57859
// begin if IsDead ( un ) then
57787: LD_VAR 0 2
57791: PPUSH
57792: CALL_OW 301
57796: IFFALSE 57816
// begin tmp := tmp diff un ;
57798: LD_ADDR_VAR 0 3
57802: PUSH
57803: LD_VAR 0 3
57807: PUSH
57808: LD_VAR 0 2
57812: DIFF
57813: ST_TO_ADDR
// continue ;
57814: GO 57784
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
57816: LD_VAR 0 2
57820: PPUSH
57821: LD_INT 3
57823: PUSH
57824: LD_INT 22
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PPUSH
57838: CALL_OW 69
57842: PPUSH
57843: LD_VAR 0 2
57847: PPUSH
57848: CALL_OW 74
57852: PPUSH
57853: CALL_OW 115
// end ;
57857: GO 57784
57859: POP
57860: POP
// until not tmp ;
57861: LD_VAR 0 3
57865: NOT
57866: IFFALSE 57767
// end ;
57868: PPOPN 3
57870: END
// every 0 0$1 trigger StreamModeActive and sTroll do
57871: LD_EXP 20
57875: PUSH
57876: LD_EXP 45
57880: AND
57881: IFFALSE 57935
57883: GO 57885
57885: DISABLE
// begin ToLua ( displayTroll(); ) ;
57886: LD_STRING displayTroll();
57888: PPUSH
57889: CALL_OW 559
// wait ( 3 3$00 ) ;
57893: LD_INT 6300
57895: PPUSH
57896: CALL_OW 67
// ToLua ( hideTroll(); ) ;
57900: LD_STRING hideTroll();
57902: PPUSH
57903: CALL_OW 559
// wait ( 1 1$00 ) ;
57907: LD_INT 2100
57909: PPUSH
57910: CALL_OW 67
// ToLua ( displayTroll(); ) ;
57914: LD_STRING displayTroll();
57916: PPUSH
57917: CALL_OW 559
// wait ( 1 1$00 ) ;
57921: LD_INT 2100
57923: PPUSH
57924: CALL_OW 67
// ToLua ( hideTroll(); ) ;
57928: LD_STRING hideTroll();
57930: PPUSH
57931: CALL_OW 559
// end ;
57935: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
57936: LD_EXP 20
57940: PUSH
57941: LD_EXP 46
57945: AND
57946: IFFALSE 58009
57948: GO 57950
57950: DISABLE
57951: LD_INT 0
57953: PPUSH
// begin p := 0 ;
57954: LD_ADDR_VAR 0 1
57958: PUSH
57959: LD_INT 0
57961: ST_TO_ADDR
// repeat game_speed := 1 ;
57962: LD_ADDR_OWVAR 65
57966: PUSH
57967: LD_INT 1
57969: ST_TO_ADDR
// wait ( 0 0$1 ) ;
57970: LD_INT 35
57972: PPUSH
57973: CALL_OW 67
// p := p + 1 ;
57977: LD_ADDR_VAR 0 1
57981: PUSH
57982: LD_VAR 0 1
57986: PUSH
57987: LD_INT 1
57989: PLUS
57990: ST_TO_ADDR
// until p >= 60 ;
57991: LD_VAR 0 1
57995: PUSH
57996: LD_INT 60
57998: GREATEREQUAL
57999: IFFALSE 57962
// game_speed := 4 ;
58001: LD_ADDR_OWVAR 65
58005: PUSH
58006: LD_INT 4
58008: ST_TO_ADDR
// end ;
58009: PPOPN 1
58011: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
58012: LD_EXP 20
58016: PUSH
58017: LD_EXP 47
58021: AND
58022: IFFALSE 58168
58024: GO 58026
58026: DISABLE
58027: LD_INT 0
58029: PPUSH
58030: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58031: LD_ADDR_VAR 0 1
58035: PUSH
58036: LD_INT 22
58038: PUSH
58039: LD_OWVAR 2
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 2
58050: PUSH
58051: LD_INT 30
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 30
58063: PUSH
58064: LD_INT 1
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: LIST
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PPUSH
58080: CALL_OW 69
58084: ST_TO_ADDR
// if not depot then
58085: LD_VAR 0 1
58089: NOT
58090: IFFALSE 58094
// exit ;
58092: GO 58168
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
58094: LD_ADDR_VAR 0 2
58098: PUSH
58099: LD_VAR 0 1
58103: PUSH
58104: LD_INT 1
58106: PPUSH
58107: LD_VAR 0 1
58111: PPUSH
58112: CALL_OW 12
58116: ARRAY
58117: PPUSH
58118: CALL_OW 274
58122: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
58123: LD_VAR 0 2
58127: PPUSH
58128: LD_INT 1
58130: PPUSH
58131: LD_INT 0
58133: PPUSH
58134: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
58138: LD_VAR 0 2
58142: PPUSH
58143: LD_INT 2
58145: PPUSH
58146: LD_INT 0
58148: PPUSH
58149: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
58153: LD_VAR 0 2
58157: PPUSH
58158: LD_INT 3
58160: PPUSH
58161: LD_INT 0
58163: PPUSH
58164: CALL_OW 277
// end ;
58168: PPOPN 2
58170: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
58171: LD_EXP 20
58175: PUSH
58176: LD_EXP 48
58180: AND
58181: IFFALSE 58278
58183: GO 58185
58185: DISABLE
58186: LD_INT 0
58188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58189: LD_ADDR_VAR 0 1
58193: PUSH
58194: LD_INT 22
58196: PUSH
58197: LD_OWVAR 2
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 21
58208: PUSH
58209: LD_INT 1
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 3
58218: PUSH
58219: LD_INT 23
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: LIST
58237: PPUSH
58238: CALL_OW 69
58242: ST_TO_ADDR
// if not tmp then
58243: LD_VAR 0 1
58247: NOT
58248: IFFALSE 58252
// exit ;
58250: GO 58278
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
58252: LD_VAR 0 1
58256: PUSH
58257: LD_INT 1
58259: PPUSH
58260: LD_VAR 0 1
58264: PPUSH
58265: CALL_OW 12
58269: ARRAY
58270: PPUSH
58271: LD_INT 200
58273: PPUSH
58274: CALL_OW 234
// end ;
58278: PPOPN 1
58280: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
58281: LD_EXP 20
58285: PUSH
58286: LD_EXP 49
58290: AND
58291: IFFALSE 58370
58293: GO 58295
58295: DISABLE
58296: LD_INT 0
58298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
58299: LD_ADDR_VAR 0 1
58303: PUSH
58304: LD_INT 22
58306: PUSH
58307: LD_OWVAR 2
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 21
58318: PUSH
58319: LD_INT 2
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PPUSH
58330: CALL_OW 69
58334: ST_TO_ADDR
// if not tmp then
58335: LD_VAR 0 1
58339: NOT
58340: IFFALSE 58344
// exit ;
58342: GO 58370
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
58344: LD_VAR 0 1
58348: PUSH
58349: LD_INT 1
58351: PPUSH
58352: LD_VAR 0 1
58356: PPUSH
58357: CALL_OW 12
58361: ARRAY
58362: PPUSH
58363: LD_INT 60
58365: PPUSH
58366: CALL_OW 234
// end ;
58370: PPOPN 1
58372: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
58373: LD_EXP 20
58377: PUSH
58378: LD_EXP 50
58382: AND
58383: IFFALSE 58482
58385: GO 58387
58387: DISABLE
58388: LD_INT 0
58390: PPUSH
58391: PPUSH
// begin enable ;
58392: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
58393: LD_ADDR_VAR 0 1
58397: PUSH
58398: LD_INT 22
58400: PUSH
58401: LD_OWVAR 2
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 61
58412: PUSH
58413: EMPTY
58414: LIST
58415: PUSH
58416: LD_INT 33
58418: PUSH
58419: LD_INT 2
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: LIST
58430: PPUSH
58431: CALL_OW 69
58435: ST_TO_ADDR
// if not tmp then
58436: LD_VAR 0 1
58440: NOT
58441: IFFALSE 58445
// exit ;
58443: GO 58482
// for i in tmp do
58445: LD_ADDR_VAR 0 2
58449: PUSH
58450: LD_VAR 0 1
58454: PUSH
58455: FOR_IN
58456: IFFALSE 58480
// if IsControledBy ( i ) then
58458: LD_VAR 0 2
58462: PPUSH
58463: CALL_OW 312
58467: IFFALSE 58478
// ComUnlink ( i ) ;
58469: LD_VAR 0 2
58473: PPUSH
58474: CALL_OW 136
58478: GO 58455
58480: POP
58481: POP
// end ;
58482: PPOPN 2
58484: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
58485: LD_EXP 20
58489: PUSH
58490: LD_EXP 51
58494: AND
58495: IFFALSE 58635
58497: GO 58499
58499: DISABLE
58500: LD_INT 0
58502: PPUSH
58503: PPUSH
// begin ToLua ( displayPowell(); ) ;
58504: LD_STRING displayPowell();
58506: PPUSH
58507: CALL_OW 559
// uc_side := 0 ;
58511: LD_ADDR_OWVAR 20
58515: PUSH
58516: LD_INT 0
58518: ST_TO_ADDR
// uc_nation := 2 ;
58519: LD_ADDR_OWVAR 21
58523: PUSH
58524: LD_INT 2
58526: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
58527: LD_ADDR_OWVAR 37
58531: PUSH
58532: LD_INT 14
58534: ST_TO_ADDR
// vc_engine := engine_siberite ;
58535: LD_ADDR_OWVAR 39
58539: PUSH
58540: LD_INT 3
58542: ST_TO_ADDR
// vc_control := control_apeman ;
58543: LD_ADDR_OWVAR 38
58547: PUSH
58548: LD_INT 5
58550: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
58551: LD_ADDR_OWVAR 40
58555: PUSH
58556: LD_INT 29
58558: ST_TO_ADDR
// un := CreateVehicle ;
58559: LD_ADDR_VAR 0 2
58563: PUSH
58564: CALL_OW 45
58568: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58569: LD_VAR 0 2
58573: PPUSH
58574: LD_INT 1
58576: PPUSH
58577: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
58581: LD_INT 35
58583: PPUSH
58584: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
58588: LD_VAR 0 2
58592: PPUSH
58593: LD_INT 22
58595: PUSH
58596: LD_OWVAR 2
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PPUSH
58605: CALL_OW 69
58609: PPUSH
58610: LD_VAR 0 2
58614: PPUSH
58615: CALL_OW 74
58619: PPUSH
58620: CALL_OW 115
// until IsDead ( un ) ;
58624: LD_VAR 0 2
58628: PPUSH
58629: CALL_OW 301
58633: IFFALSE 58581
// end ;
58635: PPOPN 2
58637: END
// every 0 0$1 trigger StreamModeActive and sStu do
58638: LD_EXP 20
58642: PUSH
58643: LD_EXP 59
58647: AND
58648: IFFALSE 58664
58650: GO 58652
58652: DISABLE
// begin ToLua ( displayStucuk(); ) ;
58653: LD_STRING displayStucuk();
58655: PPUSH
58656: CALL_OW 559
// ResetFog ;
58660: CALL_OW 335
// end ;
58664: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
58665: LD_EXP 20
58669: PUSH
58670: LD_EXP 52
58674: AND
58675: IFFALSE 58816
58677: GO 58679
58679: DISABLE
58680: LD_INT 0
58682: PPUSH
58683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58684: LD_ADDR_VAR 0 2
58688: PUSH
58689: LD_INT 22
58691: PUSH
58692: LD_OWVAR 2
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 21
58703: PUSH
58704: LD_INT 1
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PPUSH
58715: CALL_OW 69
58719: ST_TO_ADDR
// if not tmp then
58720: LD_VAR 0 2
58724: NOT
58725: IFFALSE 58729
// exit ;
58727: GO 58816
// un := tmp [ rand ( 1 , tmp ) ] ;
58729: LD_ADDR_VAR 0 1
58733: PUSH
58734: LD_VAR 0 2
58738: PUSH
58739: LD_INT 1
58741: PPUSH
58742: LD_VAR 0 2
58746: PPUSH
58747: CALL_OW 12
58751: ARRAY
58752: ST_TO_ADDR
// SetSide ( un , 0 ) ;
58753: LD_VAR 0 1
58757: PPUSH
58758: LD_INT 0
58760: PPUSH
58761: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
58765: LD_VAR 0 1
58769: PPUSH
58770: LD_OWVAR 3
58774: PUSH
58775: LD_VAR 0 1
58779: DIFF
58780: PPUSH
58781: LD_VAR 0 1
58785: PPUSH
58786: CALL_OW 74
58790: PPUSH
58791: CALL_OW 115
// wait ( 0 0$20 ) ;
58795: LD_INT 700
58797: PPUSH
58798: CALL_OW 67
// SetSide ( un , your_side ) ;
58802: LD_VAR 0 1
58806: PPUSH
58807: LD_OWVAR 2
58811: PPUSH
58812: CALL_OW 235
// end ;
58816: PPOPN 2
58818: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
58819: LD_EXP 20
58823: PUSH
58824: LD_EXP 53
58828: AND
58829: IFFALSE 58935
58831: GO 58833
58833: DISABLE
58834: LD_INT 0
58836: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58837: LD_ADDR_VAR 0 1
58841: PUSH
58842: LD_INT 22
58844: PUSH
58845: LD_OWVAR 2
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 2
58856: PUSH
58857: LD_INT 30
58859: PUSH
58860: LD_INT 0
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 30
58869: PUSH
58870: LD_INT 1
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: LIST
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PPUSH
58886: CALL_OW 69
58890: ST_TO_ADDR
// if not depot then
58891: LD_VAR 0 1
58895: NOT
58896: IFFALSE 58900
// exit ;
58898: GO 58935
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
58900: LD_VAR 0 1
58904: PUSH
58905: LD_INT 1
58907: ARRAY
58908: PPUSH
58909: CALL_OW 250
58913: PPUSH
58914: LD_VAR 0 1
58918: PUSH
58919: LD_INT 1
58921: ARRAY
58922: PPUSH
58923: CALL_OW 251
58927: PPUSH
58928: LD_INT 70
58930: PPUSH
58931: CALL_OW 495
// end ;
58935: PPOPN 1
58937: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
58938: LD_EXP 20
58942: PUSH
58943: LD_EXP 54
58947: AND
58948: IFFALSE 59159
58950: GO 58952
58952: DISABLE
58953: LD_INT 0
58955: PPUSH
58956: PPUSH
58957: PPUSH
58958: PPUSH
58959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58960: LD_ADDR_VAR 0 5
58964: PUSH
58965: LD_INT 22
58967: PUSH
58968: LD_OWVAR 2
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 21
58979: PUSH
58980: LD_INT 1
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PPUSH
58991: CALL_OW 69
58995: ST_TO_ADDR
// if not tmp then
58996: LD_VAR 0 5
59000: NOT
59001: IFFALSE 59005
// exit ;
59003: GO 59159
// for i in tmp do
59005: LD_ADDR_VAR 0 1
59009: PUSH
59010: LD_VAR 0 5
59014: PUSH
59015: FOR_IN
59016: IFFALSE 59157
// begin d := rand ( 0 , 5 ) ;
59018: LD_ADDR_VAR 0 4
59022: PUSH
59023: LD_INT 0
59025: PPUSH
59026: LD_INT 5
59028: PPUSH
59029: CALL_OW 12
59033: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
59034: LD_ADDR_VAR 0 2
59038: PUSH
59039: LD_VAR 0 1
59043: PPUSH
59044: CALL_OW 250
59048: PPUSH
59049: LD_VAR 0 4
59053: PPUSH
59054: LD_INT 3
59056: PPUSH
59057: LD_INT 12
59059: PPUSH
59060: CALL_OW 12
59064: PPUSH
59065: CALL_OW 272
59069: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
59070: LD_ADDR_VAR 0 3
59074: PUSH
59075: LD_VAR 0 1
59079: PPUSH
59080: CALL_OW 251
59084: PPUSH
59085: LD_VAR 0 4
59089: PPUSH
59090: LD_INT 3
59092: PPUSH
59093: LD_INT 12
59095: PPUSH
59096: CALL_OW 12
59100: PPUSH
59101: CALL_OW 273
59105: ST_TO_ADDR
// if ValidHex ( x , y ) then
59106: LD_VAR 0 2
59110: PPUSH
59111: LD_VAR 0 3
59115: PPUSH
59116: CALL_OW 488
59120: IFFALSE 59155
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
59122: LD_VAR 0 1
59126: PPUSH
59127: LD_VAR 0 2
59131: PPUSH
59132: LD_VAR 0 3
59136: PPUSH
59137: LD_INT 3
59139: PPUSH
59140: LD_INT 6
59142: PPUSH
59143: CALL_OW 12
59147: PPUSH
59148: LD_INT 1
59150: PPUSH
59151: CALL_OW 483
// end ;
59155: GO 59015
59157: POP
59158: POP
// end ;
59159: PPOPN 5
59161: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
59162: LD_EXP 20
59166: PUSH
59167: LD_EXP 55
59171: AND
59172: IFFALSE 59266
59174: GO 59176
59176: DISABLE
59177: LD_INT 0
59179: PPUSH
59180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
59181: LD_ADDR_VAR 0 2
59185: PUSH
59186: LD_INT 22
59188: PUSH
59189: LD_OWVAR 2
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 32
59200: PUSH
59201: LD_INT 1
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 21
59210: PUSH
59211: LD_INT 2
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: LIST
59222: PPUSH
59223: CALL_OW 69
59227: ST_TO_ADDR
// if not tmp then
59228: LD_VAR 0 2
59232: NOT
59233: IFFALSE 59237
// exit ;
59235: GO 59266
// for i in tmp do
59237: LD_ADDR_VAR 0 1
59241: PUSH
59242: LD_VAR 0 2
59246: PUSH
59247: FOR_IN
59248: IFFALSE 59264
// SetFuel ( i , 0 ) ;
59250: LD_VAR 0 1
59254: PPUSH
59255: LD_INT 0
59257: PPUSH
59258: CALL_OW 240
59262: GO 59247
59264: POP
59265: POP
// end ;
59266: PPOPN 2
59268: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
59269: LD_EXP 20
59273: PUSH
59274: LD_EXP 56
59278: AND
59279: IFFALSE 59345
59281: GO 59283
59283: DISABLE
59284: LD_INT 0
59286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59287: LD_ADDR_VAR 0 1
59291: PUSH
59292: LD_INT 22
59294: PUSH
59295: LD_OWVAR 2
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 30
59306: PUSH
59307: LD_INT 29
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PPUSH
59318: CALL_OW 69
59322: ST_TO_ADDR
// if not tmp then
59323: LD_VAR 0 1
59327: NOT
59328: IFFALSE 59332
// exit ;
59330: GO 59345
// DestroyUnit ( tmp [ 1 ] ) ;
59332: LD_VAR 0 1
59336: PUSH
59337: LD_INT 1
59339: ARRAY
59340: PPUSH
59341: CALL_OW 65
// end ;
59345: PPOPN 1
59347: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
59348: LD_EXP 20
59352: PUSH
59353: LD_EXP 58
59357: AND
59358: IFFALSE 59487
59360: GO 59362
59362: DISABLE
59363: LD_INT 0
59365: PPUSH
// begin uc_side := 0 ;
59366: LD_ADDR_OWVAR 20
59370: PUSH
59371: LD_INT 0
59373: ST_TO_ADDR
// uc_nation := nation_arabian ;
59374: LD_ADDR_OWVAR 21
59378: PUSH
59379: LD_INT 2
59381: ST_TO_ADDR
// hc_gallery :=  ;
59382: LD_ADDR_OWVAR 33
59386: PUSH
59387: LD_STRING 
59389: ST_TO_ADDR
// hc_name :=  ;
59390: LD_ADDR_OWVAR 26
59394: PUSH
59395: LD_STRING 
59397: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
59398: LD_INT 1
59400: PPUSH
59401: LD_INT 11
59403: PPUSH
59404: LD_INT 10
59406: PPUSH
59407: CALL_OW 380
// un := CreateHuman ;
59411: LD_ADDR_VAR 0 1
59415: PUSH
59416: CALL_OW 44
59420: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59421: LD_VAR 0 1
59425: PPUSH
59426: LD_INT 1
59428: PPUSH
59429: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
59433: LD_INT 35
59435: PPUSH
59436: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
59440: LD_VAR 0 1
59444: PPUSH
59445: LD_INT 22
59447: PUSH
59448: LD_OWVAR 2
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PPUSH
59457: CALL_OW 69
59461: PPUSH
59462: LD_VAR 0 1
59466: PPUSH
59467: CALL_OW 74
59471: PPUSH
59472: CALL_OW 115
// until IsDead ( un ) ;
59476: LD_VAR 0 1
59480: PPUSH
59481: CALL_OW 301
59485: IFFALSE 59433
// end ;
59487: PPOPN 1
59489: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
59490: LD_EXP 20
59494: PUSH
59495: LD_EXP 60
59499: AND
59500: IFFALSE 59512
59502: GO 59504
59504: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
59505: LD_STRING earthquake(getX(game), 0, 32)
59507: PPUSH
59508: CALL_OW 559
59512: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
59513: LD_EXP 20
59517: PUSH
59518: LD_EXP 61
59522: AND
59523: IFFALSE 59614
59525: GO 59527
59527: DISABLE
59528: LD_INT 0
59530: PPUSH
// begin enable ;
59531: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
59532: LD_ADDR_VAR 0 1
59536: PUSH
59537: LD_INT 22
59539: PUSH
59540: LD_OWVAR 2
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 21
59551: PUSH
59552: LD_INT 2
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 33
59561: PUSH
59562: LD_INT 3
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: LIST
59573: PPUSH
59574: CALL_OW 69
59578: ST_TO_ADDR
// if not tmp then
59579: LD_VAR 0 1
59583: NOT
59584: IFFALSE 59588
// exit ;
59586: GO 59614
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
59588: LD_VAR 0 1
59592: PUSH
59593: LD_INT 1
59595: PPUSH
59596: LD_VAR 0 1
59600: PPUSH
59601: CALL_OW 12
59605: ARRAY
59606: PPUSH
59607: LD_INT 1
59609: PPUSH
59610: CALL_OW 234
// end ;
59614: PPOPN 1
59616: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
59617: LD_EXP 20
59621: PUSH
59622: LD_EXP 62
59626: AND
59627: IFFALSE 59768
59629: GO 59631
59631: DISABLE
59632: LD_INT 0
59634: PPUSH
59635: PPUSH
59636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59637: LD_ADDR_VAR 0 3
59641: PUSH
59642: LD_INT 22
59644: PUSH
59645: LD_OWVAR 2
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 25
59656: PUSH
59657: LD_INT 1
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PPUSH
59668: CALL_OW 69
59672: ST_TO_ADDR
// if not tmp then
59673: LD_VAR 0 3
59677: NOT
59678: IFFALSE 59682
// exit ;
59680: GO 59768
// un := tmp [ rand ( 1 , tmp ) ] ;
59682: LD_ADDR_VAR 0 2
59686: PUSH
59687: LD_VAR 0 3
59691: PUSH
59692: LD_INT 1
59694: PPUSH
59695: LD_VAR 0 3
59699: PPUSH
59700: CALL_OW 12
59704: ARRAY
59705: ST_TO_ADDR
// if Crawls ( un ) then
59706: LD_VAR 0 2
59710: PPUSH
59711: CALL_OW 318
59715: IFFALSE 59726
// ComWalk ( un ) ;
59717: LD_VAR 0 2
59721: PPUSH
59722: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
59726: LD_VAR 0 2
59730: PPUSH
59731: LD_INT 9
59733: PPUSH
59734: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
59738: LD_INT 28
59740: PPUSH
59741: LD_OWVAR 2
59745: PPUSH
59746: LD_INT 2
59748: PPUSH
59749: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
59753: LD_INT 29
59755: PPUSH
59756: LD_OWVAR 2
59760: PPUSH
59761: LD_INT 2
59763: PPUSH
59764: CALL_OW 322
// end ;
59768: PPOPN 3
59770: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
59771: LD_EXP 20
59775: PUSH
59776: LD_EXP 63
59780: AND
59781: IFFALSE 59892
59783: GO 59785
59785: DISABLE
59786: LD_INT 0
59788: PPUSH
59789: PPUSH
59790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59791: LD_ADDR_VAR 0 3
59795: PUSH
59796: LD_INT 22
59798: PUSH
59799: LD_OWVAR 2
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 25
59810: PUSH
59811: LD_INT 1
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PPUSH
59822: CALL_OW 69
59826: ST_TO_ADDR
// if not tmp then
59827: LD_VAR 0 3
59831: NOT
59832: IFFALSE 59836
// exit ;
59834: GO 59892
// un := tmp [ rand ( 1 , tmp ) ] ;
59836: LD_ADDR_VAR 0 2
59840: PUSH
59841: LD_VAR 0 3
59845: PUSH
59846: LD_INT 1
59848: PPUSH
59849: LD_VAR 0 3
59853: PPUSH
59854: CALL_OW 12
59858: ARRAY
59859: ST_TO_ADDR
// if Crawls ( un ) then
59860: LD_VAR 0 2
59864: PPUSH
59865: CALL_OW 318
59869: IFFALSE 59880
// ComWalk ( un ) ;
59871: LD_VAR 0 2
59875: PPUSH
59876: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59880: LD_VAR 0 2
59884: PPUSH
59885: LD_INT 8
59887: PPUSH
59888: CALL_OW 336
// end ;
59892: PPOPN 3
59894: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
59895: LD_EXP 20
59899: PUSH
59900: LD_EXP 64
59904: AND
59905: IFFALSE 60049
59907: GO 59909
59909: DISABLE
59910: LD_INT 0
59912: PPUSH
59913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
59914: LD_ADDR_VAR 0 2
59918: PUSH
59919: LD_INT 22
59921: PUSH
59922: LD_OWVAR 2
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 21
59933: PUSH
59934: LD_INT 2
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 2
59943: PUSH
59944: LD_INT 34
59946: PUSH
59947: LD_INT 12
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 34
59956: PUSH
59957: LD_INT 51
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 34
59966: PUSH
59967: LD_INT 32
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: LIST
59984: PPUSH
59985: CALL_OW 69
59989: ST_TO_ADDR
// if not tmp then
59990: LD_VAR 0 2
59994: NOT
59995: IFFALSE 59999
// exit ;
59997: GO 60049
// for i in tmp do
59999: LD_ADDR_VAR 0 1
60003: PUSH
60004: LD_VAR 0 2
60008: PUSH
60009: FOR_IN
60010: IFFALSE 60047
// if GetCargo ( i , mat_artifact ) = 0 then
60012: LD_VAR 0 1
60016: PPUSH
60017: LD_INT 4
60019: PPUSH
60020: CALL_OW 289
60024: PUSH
60025: LD_INT 0
60027: EQUAL
60028: IFFALSE 60045
// SetCargo ( i , mat_siberit , 100 ) ;
60030: LD_VAR 0 1
60034: PPUSH
60035: LD_INT 3
60037: PPUSH
60038: LD_INT 100
60040: PPUSH
60041: CALL_OW 290
60045: GO 60009
60047: POP
60048: POP
// end ;
60049: PPOPN 2
60051: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
60052: LD_EXP 20
60056: PUSH
60057: LD_EXP 65
60061: AND
60062: IFFALSE 60245
60064: GO 60066
60066: DISABLE
60067: LD_INT 0
60069: PPUSH
60070: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60071: LD_ADDR_VAR 0 2
60075: PUSH
60076: LD_INT 22
60078: PUSH
60079: LD_OWVAR 2
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PPUSH
60088: CALL_OW 69
60092: ST_TO_ADDR
// if not tmp then
60093: LD_VAR 0 2
60097: NOT
60098: IFFALSE 60102
// exit ;
60100: GO 60245
// for i := 1 to 2 do
60102: LD_ADDR_VAR 0 1
60106: PUSH
60107: DOUBLE
60108: LD_INT 1
60110: DEC
60111: ST_TO_ADDR
60112: LD_INT 2
60114: PUSH
60115: FOR_TO
60116: IFFALSE 60243
// begin uc_side := your_side ;
60118: LD_ADDR_OWVAR 20
60122: PUSH
60123: LD_OWVAR 2
60127: ST_TO_ADDR
// uc_nation := nation_american ;
60128: LD_ADDR_OWVAR 21
60132: PUSH
60133: LD_INT 1
60135: ST_TO_ADDR
// vc_chassis := us_morphling ;
60136: LD_ADDR_OWVAR 37
60140: PUSH
60141: LD_INT 5
60143: ST_TO_ADDR
// vc_engine := engine_siberite ;
60144: LD_ADDR_OWVAR 39
60148: PUSH
60149: LD_INT 3
60151: ST_TO_ADDR
// vc_control := control_computer ;
60152: LD_ADDR_OWVAR 38
60156: PUSH
60157: LD_INT 3
60159: ST_TO_ADDR
// vc_weapon := us_double_laser ;
60160: LD_ADDR_OWVAR 40
60164: PUSH
60165: LD_INT 10
60167: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
60168: LD_VAR 0 2
60172: PUSH
60173: LD_INT 1
60175: ARRAY
60176: PPUSH
60177: CALL_OW 310
60181: NOT
60182: IFFALSE 60229
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
60184: CALL_OW 45
60188: PPUSH
60189: LD_VAR 0 2
60193: PUSH
60194: LD_INT 1
60196: ARRAY
60197: PPUSH
60198: CALL_OW 250
60202: PPUSH
60203: LD_VAR 0 2
60207: PUSH
60208: LD_INT 1
60210: ARRAY
60211: PPUSH
60212: CALL_OW 251
60216: PPUSH
60217: LD_INT 12
60219: PPUSH
60220: LD_INT 1
60222: PPUSH
60223: CALL_OW 50
60227: GO 60241
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
60229: CALL_OW 45
60233: PPUSH
60234: LD_INT 1
60236: PPUSH
60237: CALL_OW 51
// end ;
60241: GO 60115
60243: POP
60244: POP
// end ;
60245: PPOPN 2
60247: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
60248: LD_EXP 20
60252: PUSH
60253: LD_EXP 66
60257: AND
60258: IFFALSE 60480
60260: GO 60262
60262: DISABLE
60263: LD_INT 0
60265: PPUSH
60266: PPUSH
60267: PPUSH
60268: PPUSH
60269: PPUSH
60270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60271: LD_ADDR_VAR 0 6
60275: PUSH
60276: LD_INT 22
60278: PUSH
60279: LD_OWVAR 2
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 21
60290: PUSH
60291: LD_INT 1
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 3
60300: PUSH
60301: LD_INT 23
60303: PUSH
60304: LD_INT 0
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: LIST
60319: PPUSH
60320: CALL_OW 69
60324: ST_TO_ADDR
// if not tmp then
60325: LD_VAR 0 6
60329: NOT
60330: IFFALSE 60334
// exit ;
60332: GO 60480
// s1 := rand ( 1 , 4 ) ;
60334: LD_ADDR_VAR 0 2
60338: PUSH
60339: LD_INT 1
60341: PPUSH
60342: LD_INT 4
60344: PPUSH
60345: CALL_OW 12
60349: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
60350: LD_ADDR_VAR 0 4
60354: PUSH
60355: LD_VAR 0 6
60359: PUSH
60360: LD_INT 1
60362: ARRAY
60363: PPUSH
60364: LD_VAR 0 2
60368: PPUSH
60369: CALL_OW 259
60373: ST_TO_ADDR
// if s1 = 1 then
60374: LD_VAR 0 2
60378: PUSH
60379: LD_INT 1
60381: EQUAL
60382: IFFALSE 60402
// s2 := rand ( 2 , 4 ) else
60384: LD_ADDR_VAR 0 3
60388: PUSH
60389: LD_INT 2
60391: PPUSH
60392: LD_INT 4
60394: PPUSH
60395: CALL_OW 12
60399: ST_TO_ADDR
60400: GO 60410
// s2 := 1 ;
60402: LD_ADDR_VAR 0 3
60406: PUSH
60407: LD_INT 1
60409: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
60410: LD_ADDR_VAR 0 5
60414: PUSH
60415: LD_VAR 0 6
60419: PUSH
60420: LD_INT 1
60422: ARRAY
60423: PPUSH
60424: LD_VAR 0 3
60428: PPUSH
60429: CALL_OW 259
60433: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
60434: LD_VAR 0 6
60438: PUSH
60439: LD_INT 1
60441: ARRAY
60442: PPUSH
60443: LD_VAR 0 2
60447: PPUSH
60448: LD_VAR 0 5
60452: PPUSH
60453: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
60457: LD_VAR 0 6
60461: PUSH
60462: LD_INT 1
60464: ARRAY
60465: PPUSH
60466: LD_VAR 0 3
60470: PPUSH
60471: LD_VAR 0 4
60475: PPUSH
60476: CALL_OW 237
// end ;
60480: PPOPN 6
60482: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
60483: LD_EXP 20
60487: PUSH
60488: LD_EXP 67
60492: AND
60493: IFFALSE 60572
60495: GO 60497
60497: DISABLE
60498: LD_INT 0
60500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
60501: LD_ADDR_VAR 0 1
60505: PUSH
60506: LD_INT 22
60508: PUSH
60509: LD_OWVAR 2
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 30
60520: PUSH
60521: LD_INT 3
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PPUSH
60532: CALL_OW 69
60536: ST_TO_ADDR
// if not tmp then
60537: LD_VAR 0 1
60541: NOT
60542: IFFALSE 60546
// exit ;
60544: GO 60572
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
60546: LD_VAR 0 1
60550: PUSH
60551: LD_INT 1
60553: PPUSH
60554: LD_VAR 0 1
60558: PPUSH
60559: CALL_OW 12
60563: ARRAY
60564: PPUSH
60565: LD_INT 1
60567: PPUSH
60568: CALL_OW 234
// end ;
60572: PPOPN 1
60574: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
60575: LD_EXP 20
60579: PUSH
60580: LD_EXP 68
60584: AND
60585: IFFALSE 60697
60587: GO 60589
60589: DISABLE
60590: LD_INT 0
60592: PPUSH
60593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
60594: LD_ADDR_VAR 0 2
60598: PUSH
60599: LD_INT 22
60601: PUSH
60602: LD_OWVAR 2
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 2
60613: PUSH
60614: LD_INT 30
60616: PUSH
60617: LD_INT 27
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 30
60626: PUSH
60627: LD_INT 26
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 30
60636: PUSH
60637: LD_INT 28
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PPUSH
60654: CALL_OW 69
60658: ST_TO_ADDR
// if not tmp then
60659: LD_VAR 0 2
60663: NOT
60664: IFFALSE 60668
// exit ;
60666: GO 60697
// for i in tmp do
60668: LD_ADDR_VAR 0 1
60672: PUSH
60673: LD_VAR 0 2
60677: PUSH
60678: FOR_IN
60679: IFFALSE 60695
// SetLives ( i , 1 ) ;
60681: LD_VAR 0 1
60685: PPUSH
60686: LD_INT 1
60688: PPUSH
60689: CALL_OW 234
60693: GO 60678
60695: POP
60696: POP
// end ;
60697: PPOPN 2
60699: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
60700: LD_EXP 20
60704: PUSH
60705: LD_EXP 69
60709: AND
60710: IFFALSE 60997
60712: GO 60714
60714: DISABLE
60715: LD_INT 0
60717: PPUSH
60718: PPUSH
60719: PPUSH
// begin i := rand ( 1 , 7 ) ;
60720: LD_ADDR_VAR 0 1
60724: PUSH
60725: LD_INT 1
60727: PPUSH
60728: LD_INT 7
60730: PPUSH
60731: CALL_OW 12
60735: ST_TO_ADDR
// case i of 1 :
60736: LD_VAR 0 1
60740: PUSH
60741: LD_INT 1
60743: DOUBLE
60744: EQUAL
60745: IFTRUE 60749
60747: GO 60759
60749: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
60750: LD_STRING earthquake(getX(game), 0, 32)
60752: PPUSH
60753: CALL_OW 559
60757: GO 60997
60759: LD_INT 2
60761: DOUBLE
60762: EQUAL
60763: IFTRUE 60767
60765: GO 60781
60767: POP
// begin ToLua ( displayStucuk(); ) ;
60768: LD_STRING displayStucuk();
60770: PPUSH
60771: CALL_OW 559
// ResetFog ;
60775: CALL_OW 335
// end ; 3 :
60779: GO 60997
60781: LD_INT 3
60783: DOUBLE
60784: EQUAL
60785: IFTRUE 60789
60787: GO 60893
60789: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60790: LD_ADDR_VAR 0 2
60794: PUSH
60795: LD_INT 22
60797: PUSH
60798: LD_OWVAR 2
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 25
60809: PUSH
60810: LD_INT 1
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PPUSH
60821: CALL_OW 69
60825: ST_TO_ADDR
// if not tmp then
60826: LD_VAR 0 2
60830: NOT
60831: IFFALSE 60835
// exit ;
60833: GO 60997
// un := tmp [ rand ( 1 , tmp ) ] ;
60835: LD_ADDR_VAR 0 3
60839: PUSH
60840: LD_VAR 0 2
60844: PUSH
60845: LD_INT 1
60847: PPUSH
60848: LD_VAR 0 2
60852: PPUSH
60853: CALL_OW 12
60857: ARRAY
60858: ST_TO_ADDR
// if Crawls ( un ) then
60859: LD_VAR 0 3
60863: PPUSH
60864: CALL_OW 318
60868: IFFALSE 60879
// ComWalk ( un ) ;
60870: LD_VAR 0 3
60874: PPUSH
60875: CALL_OW 138
// SetClass ( un , class_mortar ) ;
60879: LD_VAR 0 3
60883: PPUSH
60884: LD_INT 8
60886: PPUSH
60887: CALL_OW 336
// end ; 4 :
60891: GO 60997
60893: LD_INT 4
60895: DOUBLE
60896: EQUAL
60897: IFTRUE 60901
60899: GO 60975
60901: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
60902: LD_ADDR_VAR 0 2
60906: PUSH
60907: LD_INT 22
60909: PUSH
60910: LD_OWVAR 2
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 30
60921: PUSH
60922: LD_INT 29
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PPUSH
60933: CALL_OW 69
60937: ST_TO_ADDR
// if not tmp then
60938: LD_VAR 0 2
60942: NOT
60943: IFFALSE 60947
// exit ;
60945: GO 60997
// CenterNowOnUnits ( tmp [ 1 ] ) ;
60947: LD_VAR 0 2
60951: PUSH
60952: LD_INT 1
60954: ARRAY
60955: PPUSH
60956: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
60960: LD_VAR 0 2
60964: PUSH
60965: LD_INT 1
60967: ARRAY
60968: PPUSH
60969: CALL_OW 65
// end ; 5 .. 7 :
60973: GO 60997
60975: LD_INT 5
60977: DOUBLE
60978: GREATEREQUAL
60979: IFFALSE 60987
60981: LD_INT 7
60983: DOUBLE
60984: LESSEQUAL
60985: IFTRUE 60989
60987: GO 60996
60989: POP
// StreamSibBomb ; end ;
60990: CALL 57234 0 0
60994: GO 60997
60996: POP
// end ;
60997: PPOPN 3
60999: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
61000: LD_EXP 20
61004: PUSH
61005: LD_EXP 70
61009: AND
61010: IFFALSE 61166
61012: GO 61014
61014: DISABLE
61015: LD_INT 0
61017: PPUSH
61018: PPUSH
61019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
61020: LD_ADDR_VAR 0 2
61024: PUSH
61025: LD_INT 81
61027: PUSH
61028: LD_OWVAR 2
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 2
61039: PUSH
61040: LD_INT 21
61042: PUSH
61043: LD_INT 1
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 21
61052: PUSH
61053: LD_INT 2
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: LIST
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PPUSH
61069: CALL_OW 69
61073: ST_TO_ADDR
// if not tmp then
61074: LD_VAR 0 2
61078: NOT
61079: IFFALSE 61083
// exit ;
61081: GO 61166
// p := 0 ;
61083: LD_ADDR_VAR 0 3
61087: PUSH
61088: LD_INT 0
61090: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
61091: LD_INT 35
61093: PPUSH
61094: CALL_OW 67
// p := p + 1 ;
61098: LD_ADDR_VAR 0 3
61102: PUSH
61103: LD_VAR 0 3
61107: PUSH
61108: LD_INT 1
61110: PLUS
61111: ST_TO_ADDR
// for i in tmp do
61112: LD_ADDR_VAR 0 1
61116: PUSH
61117: LD_VAR 0 2
61121: PUSH
61122: FOR_IN
61123: IFFALSE 61154
// if GetLives ( i ) < 1000 then
61125: LD_VAR 0 1
61129: PPUSH
61130: CALL_OW 256
61134: PUSH
61135: LD_INT 1000
61137: LESS
61138: IFFALSE 61152
// SetLives ( i , 1000 ) ;
61140: LD_VAR 0 1
61144: PPUSH
61145: LD_INT 1000
61147: PPUSH
61148: CALL_OW 234
61152: GO 61122
61154: POP
61155: POP
// until p > 20 ;
61156: LD_VAR 0 3
61160: PUSH
61161: LD_INT 20
61163: GREATER
61164: IFFALSE 61091
// end ;
61166: PPOPN 3
61168: END
// every 0 0$1 trigger StreamModeActive and sTime do
61169: LD_EXP 20
61173: PUSH
61174: LD_EXP 71
61178: AND
61179: IFFALSE 61214
61181: GO 61183
61183: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
61184: LD_INT 28
61186: PPUSH
61187: LD_OWVAR 2
61191: PPUSH
61192: LD_INT 2
61194: PPUSH
61195: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
61199: LD_INT 30
61201: PPUSH
61202: LD_OWVAR 2
61206: PPUSH
61207: LD_INT 2
61209: PPUSH
61210: CALL_OW 322
// end ;
61214: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
61215: LD_EXP 20
61219: PUSH
61220: LD_EXP 72
61224: AND
61225: IFFALSE 61346
61227: GO 61229
61229: DISABLE
61230: LD_INT 0
61232: PPUSH
61233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61234: LD_ADDR_VAR 0 2
61238: PUSH
61239: LD_INT 22
61241: PUSH
61242: LD_OWVAR 2
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 21
61253: PUSH
61254: LD_INT 1
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 3
61263: PUSH
61264: LD_INT 23
61266: PUSH
61267: LD_INT 0
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: LIST
61282: PPUSH
61283: CALL_OW 69
61287: ST_TO_ADDR
// if not tmp then
61288: LD_VAR 0 2
61292: NOT
61293: IFFALSE 61297
// exit ;
61295: GO 61346
// for i in tmp do
61297: LD_ADDR_VAR 0 1
61301: PUSH
61302: LD_VAR 0 2
61306: PUSH
61307: FOR_IN
61308: IFFALSE 61344
// begin if Crawls ( i ) then
61310: LD_VAR 0 1
61314: PPUSH
61315: CALL_OW 318
61319: IFFALSE 61330
// ComWalk ( i ) ;
61321: LD_VAR 0 1
61325: PPUSH
61326: CALL_OW 138
// SetClass ( i , 2 ) ;
61330: LD_VAR 0 1
61334: PPUSH
61335: LD_INT 2
61337: PPUSH
61338: CALL_OW 336
// end ;
61342: GO 61307
61344: POP
61345: POP
// end ;
61346: PPOPN 2
61348: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
61349: LD_EXP 20
61353: PUSH
61354: LD_EXP 73
61358: AND
61359: IFFALSE 61647
61361: GO 61363
61363: DISABLE
61364: LD_INT 0
61366: PPUSH
61367: PPUSH
61368: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
61369: LD_OWVAR 2
61373: PPUSH
61374: LD_INT 9
61376: PPUSH
61377: LD_INT 1
61379: PPUSH
61380: LD_INT 1
61382: PPUSH
61383: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
61387: LD_INT 9
61389: PPUSH
61390: LD_OWVAR 2
61394: PPUSH
61395: CALL_OW 343
// uc_side := 9 ;
61399: LD_ADDR_OWVAR 20
61403: PUSH
61404: LD_INT 9
61406: ST_TO_ADDR
// uc_nation := 2 ;
61407: LD_ADDR_OWVAR 21
61411: PUSH
61412: LD_INT 2
61414: ST_TO_ADDR
// hc_name := Dark Warrior ;
61415: LD_ADDR_OWVAR 26
61419: PUSH
61420: LD_STRING Dark Warrior
61422: ST_TO_ADDR
// hc_gallery :=  ;
61423: LD_ADDR_OWVAR 33
61427: PUSH
61428: LD_STRING 
61430: ST_TO_ADDR
// hc_noskilllimit := true ;
61431: LD_ADDR_OWVAR 76
61435: PUSH
61436: LD_INT 1
61438: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
61439: LD_ADDR_OWVAR 31
61443: PUSH
61444: LD_INT 30
61446: PUSH
61447: LD_INT 30
61449: PUSH
61450: LD_INT 30
61452: PUSH
61453: LD_INT 30
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: ST_TO_ADDR
// un := CreateHuman ;
61462: LD_ADDR_VAR 0 3
61466: PUSH
61467: CALL_OW 44
61471: ST_TO_ADDR
// hc_noskilllimit := false ;
61472: LD_ADDR_OWVAR 76
61476: PUSH
61477: LD_INT 0
61479: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
61480: LD_VAR 0 3
61484: PPUSH
61485: LD_INT 1
61487: PPUSH
61488: CALL_OW 51
// ToLua ( playRanger() ) ;
61492: LD_STRING playRanger()
61494: PPUSH
61495: CALL_OW 559
// p := 0 ;
61499: LD_ADDR_VAR 0 2
61503: PUSH
61504: LD_INT 0
61506: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
61507: LD_INT 35
61509: PPUSH
61510: CALL_OW 67
// p := p + 1 ;
61514: LD_ADDR_VAR 0 2
61518: PUSH
61519: LD_VAR 0 2
61523: PUSH
61524: LD_INT 1
61526: PLUS
61527: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
61528: LD_VAR 0 3
61532: PPUSH
61533: CALL_OW 256
61537: PUSH
61538: LD_INT 1000
61540: LESS
61541: IFFALSE 61555
// SetLives ( un , 1000 ) ;
61543: LD_VAR 0 3
61547: PPUSH
61548: LD_INT 1000
61550: PPUSH
61551: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
61555: LD_VAR 0 3
61559: PPUSH
61560: LD_INT 81
61562: PUSH
61563: LD_OWVAR 2
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 91
61574: PUSH
61575: LD_VAR 0 3
61579: PUSH
61580: LD_INT 30
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: LIST
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PPUSH
61592: CALL_OW 69
61596: PPUSH
61597: LD_VAR 0 3
61601: PPUSH
61602: CALL_OW 74
61606: PPUSH
61607: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
61611: LD_VAR 0 2
61615: PUSH
61616: LD_INT 80
61618: GREATER
61619: PUSH
61620: LD_VAR 0 3
61624: PPUSH
61625: CALL_OW 301
61629: OR
61630: IFFALSE 61507
// if un then
61632: LD_VAR 0 3
61636: IFFALSE 61647
// RemoveUnit ( un ) ;
61638: LD_VAR 0 3
61642: PPUSH
61643: CALL_OW 64
// end ;
61647: PPOPN 3
61649: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
61650: LD_EXP 74
61654: IFFALSE 61770
61656: GO 61658
61658: DISABLE
61659: LD_INT 0
61661: PPUSH
61662: PPUSH
61663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
61664: LD_ADDR_VAR 0 2
61668: PUSH
61669: LD_INT 81
61671: PUSH
61672: LD_OWVAR 2
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 21
61683: PUSH
61684: LD_INT 1
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PPUSH
61695: CALL_OW 69
61699: ST_TO_ADDR
// ToLua ( playComputer() ) ;
61700: LD_STRING playComputer()
61702: PPUSH
61703: CALL_OW 559
// if not tmp then
61707: LD_VAR 0 2
61711: NOT
61712: IFFALSE 61716
// exit ;
61714: GO 61770
// for i in tmp do
61716: LD_ADDR_VAR 0 1
61720: PUSH
61721: LD_VAR 0 2
61725: PUSH
61726: FOR_IN
61727: IFFALSE 61768
// for j := 1 to 4 do
61729: LD_ADDR_VAR 0 3
61733: PUSH
61734: DOUBLE
61735: LD_INT 1
61737: DEC
61738: ST_TO_ADDR
61739: LD_INT 4
61741: PUSH
61742: FOR_TO
61743: IFFALSE 61764
// SetSkill ( i , j , 10 ) ;
61745: LD_VAR 0 1
61749: PPUSH
61750: LD_VAR 0 3
61754: PPUSH
61755: LD_INT 10
61757: PPUSH
61758: CALL_OW 237
61762: GO 61742
61764: POP
61765: POP
61766: GO 61726
61768: POP
61769: POP
// end ;
61770: PPOPN 3
61772: END
// every 0 0$1 trigger s30 do var i , tmp ;
61773: LD_EXP 75
61777: IFFALSE 61846
61779: GO 61781
61781: DISABLE
61782: LD_INT 0
61784: PPUSH
61785: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
61786: LD_ADDR_VAR 0 2
61790: PUSH
61791: LD_INT 22
61793: PUSH
61794: LD_OWVAR 2
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PPUSH
61803: CALL_OW 69
61807: ST_TO_ADDR
// if not tmp then
61808: LD_VAR 0 2
61812: NOT
61813: IFFALSE 61817
// exit ;
61815: GO 61846
// for i in tmp do
61817: LD_ADDR_VAR 0 1
61821: PUSH
61822: LD_VAR 0 2
61826: PUSH
61827: FOR_IN
61828: IFFALSE 61844
// SetLives ( i , 300 ) ;
61830: LD_VAR 0 1
61834: PPUSH
61835: LD_INT 300
61837: PPUSH
61838: CALL_OW 234
61842: GO 61827
61844: POP
61845: POP
// end ;
61846: PPOPN 2
61848: END
// every 0 0$1 trigger s60 do var i , tmp ;
61849: LD_EXP 76
61853: IFFALSE 61922
61855: GO 61857
61857: DISABLE
61858: LD_INT 0
61860: PPUSH
61861: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
61862: LD_ADDR_VAR 0 2
61866: PUSH
61867: LD_INT 22
61869: PUSH
61870: LD_OWVAR 2
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PPUSH
61879: CALL_OW 69
61883: ST_TO_ADDR
// if not tmp then
61884: LD_VAR 0 2
61888: NOT
61889: IFFALSE 61893
// exit ;
61891: GO 61922
// for i in tmp do
61893: LD_ADDR_VAR 0 1
61897: PUSH
61898: LD_VAR 0 2
61902: PUSH
61903: FOR_IN
61904: IFFALSE 61920
// SetLives ( i , 600 ) ;
61906: LD_VAR 0 1
61910: PPUSH
61911: LD_INT 600
61913: PPUSH
61914: CALL_OW 234
61918: GO 61903
61920: POP
61921: POP
// end ;
61922: PPOPN 2
61924: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61925: LD_INT 0
61927: PPUSH
// case cmd of 301 :
61928: LD_VAR 0 1
61932: PUSH
61933: LD_INT 301
61935: DOUBLE
61936: EQUAL
61937: IFTRUE 61941
61939: GO 61973
61941: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
61942: LD_VAR 0 6
61946: PPUSH
61947: LD_VAR 0 7
61951: PPUSH
61952: LD_VAR 0 8
61956: PPUSH
61957: LD_VAR 0 4
61961: PPUSH
61962: LD_VAR 0 5
61966: PPUSH
61967: CALL 63182 0 5
61971: GO 62094
61973: LD_INT 302
61975: DOUBLE
61976: EQUAL
61977: IFTRUE 61981
61979: GO 62018
61981: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
61982: LD_VAR 0 6
61986: PPUSH
61987: LD_VAR 0 7
61991: PPUSH
61992: LD_VAR 0 8
61996: PPUSH
61997: LD_VAR 0 9
62001: PPUSH
62002: LD_VAR 0 4
62006: PPUSH
62007: LD_VAR 0 5
62011: PPUSH
62012: CALL 63273 0 6
62016: GO 62094
62018: LD_INT 303
62020: DOUBLE
62021: EQUAL
62022: IFTRUE 62026
62024: GO 62063
62026: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
62027: LD_VAR 0 6
62031: PPUSH
62032: LD_VAR 0 7
62036: PPUSH
62037: LD_VAR 0 8
62041: PPUSH
62042: LD_VAR 0 9
62046: PPUSH
62047: LD_VAR 0 4
62051: PPUSH
62052: LD_VAR 0 5
62056: PPUSH
62057: CALL 62099 0 6
62061: GO 62094
62063: LD_INT 304
62065: DOUBLE
62066: EQUAL
62067: IFTRUE 62071
62069: GO 62093
62071: POP
// hHackTeleport ( unit , x , y ) ; end ;
62072: LD_VAR 0 2
62076: PPUSH
62077: LD_VAR 0 4
62081: PPUSH
62082: LD_VAR 0 5
62086: PPUSH
62087: CALL 63866 0 3
62091: GO 62094
62093: POP
// end ;
62094: LD_VAR 0 12
62098: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
62099: LD_INT 0
62101: PPUSH
62102: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
62103: LD_VAR 0 1
62107: PUSH
62108: LD_INT 1
62110: LESS
62111: PUSH
62112: LD_VAR 0 1
62116: PUSH
62117: LD_INT 3
62119: GREATER
62120: OR
62121: PUSH
62122: LD_VAR 0 5
62126: PPUSH
62127: LD_VAR 0 6
62131: PPUSH
62132: CALL_OW 428
62136: OR
62137: IFFALSE 62141
// exit ;
62139: GO 62869
// uc_side := your_side ;
62141: LD_ADDR_OWVAR 20
62145: PUSH
62146: LD_OWVAR 2
62150: ST_TO_ADDR
// uc_nation := nation ;
62151: LD_ADDR_OWVAR 21
62155: PUSH
62156: LD_VAR 0 1
62160: ST_TO_ADDR
// bc_level = 1 ;
62161: LD_ADDR_OWVAR 43
62165: PUSH
62166: LD_INT 1
62168: ST_TO_ADDR
// case btype of 1 :
62169: LD_VAR 0 2
62173: PUSH
62174: LD_INT 1
62176: DOUBLE
62177: EQUAL
62178: IFTRUE 62182
62180: GO 62193
62182: POP
// bc_type := b_depot ; 2 :
62183: LD_ADDR_OWVAR 42
62187: PUSH
62188: LD_INT 0
62190: ST_TO_ADDR
62191: GO 62813
62193: LD_INT 2
62195: DOUBLE
62196: EQUAL
62197: IFTRUE 62201
62199: GO 62212
62201: POP
// bc_type := b_warehouse ; 3 :
62202: LD_ADDR_OWVAR 42
62206: PUSH
62207: LD_INT 1
62209: ST_TO_ADDR
62210: GO 62813
62212: LD_INT 3
62214: DOUBLE
62215: EQUAL
62216: IFTRUE 62220
62218: GO 62231
62220: POP
// bc_type := b_lab ; 4 .. 9 :
62221: LD_ADDR_OWVAR 42
62225: PUSH
62226: LD_INT 6
62228: ST_TO_ADDR
62229: GO 62813
62231: LD_INT 4
62233: DOUBLE
62234: GREATEREQUAL
62235: IFFALSE 62243
62237: LD_INT 9
62239: DOUBLE
62240: LESSEQUAL
62241: IFTRUE 62245
62243: GO 62305
62245: POP
// begin bc_type := b_lab_half ;
62246: LD_ADDR_OWVAR 42
62250: PUSH
62251: LD_INT 7
62253: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
62254: LD_ADDR_OWVAR 44
62258: PUSH
62259: LD_INT 10
62261: PUSH
62262: LD_INT 11
62264: PUSH
62265: LD_INT 12
62267: PUSH
62268: LD_INT 15
62270: PUSH
62271: LD_INT 14
62273: PUSH
62274: LD_INT 13
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: PUSH
62285: LD_VAR 0 2
62289: PUSH
62290: LD_INT 3
62292: MINUS
62293: ARRAY
62294: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
62295: LD_ADDR_OWVAR 45
62299: PUSH
62300: LD_INT 9
62302: ST_TO_ADDR
// end ; 10 .. 13 :
62303: GO 62813
62305: LD_INT 10
62307: DOUBLE
62308: GREATEREQUAL
62309: IFFALSE 62317
62311: LD_INT 13
62313: DOUBLE
62314: LESSEQUAL
62315: IFTRUE 62319
62317: GO 62396
62319: POP
// begin bc_type := b_lab_full ;
62320: LD_ADDR_OWVAR 42
62324: PUSH
62325: LD_INT 8
62327: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
62328: LD_ADDR_OWVAR 44
62332: PUSH
62333: LD_INT 10
62335: PUSH
62336: LD_INT 12
62338: PUSH
62339: LD_INT 14
62341: PUSH
62342: LD_INT 13
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: PUSH
62351: LD_VAR 0 2
62355: PUSH
62356: LD_INT 9
62358: MINUS
62359: ARRAY
62360: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
62361: LD_ADDR_OWVAR 45
62365: PUSH
62366: LD_INT 11
62368: PUSH
62369: LD_INT 15
62371: PUSH
62372: LD_INT 12
62374: PUSH
62375: LD_INT 15
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: PUSH
62384: LD_VAR 0 2
62388: PUSH
62389: LD_INT 9
62391: MINUS
62392: ARRAY
62393: ST_TO_ADDR
// end ; 14 :
62394: GO 62813
62396: LD_INT 14
62398: DOUBLE
62399: EQUAL
62400: IFTRUE 62404
62402: GO 62415
62404: POP
// bc_type := b_workshop ; 15 :
62405: LD_ADDR_OWVAR 42
62409: PUSH
62410: LD_INT 2
62412: ST_TO_ADDR
62413: GO 62813
62415: LD_INT 15
62417: DOUBLE
62418: EQUAL
62419: IFTRUE 62423
62421: GO 62434
62423: POP
// bc_type := b_factory ; 16 :
62424: LD_ADDR_OWVAR 42
62428: PUSH
62429: LD_INT 3
62431: ST_TO_ADDR
62432: GO 62813
62434: LD_INT 16
62436: DOUBLE
62437: EQUAL
62438: IFTRUE 62442
62440: GO 62453
62442: POP
// bc_type := b_ext_gun ; 17 :
62443: LD_ADDR_OWVAR 42
62447: PUSH
62448: LD_INT 17
62450: ST_TO_ADDR
62451: GO 62813
62453: LD_INT 17
62455: DOUBLE
62456: EQUAL
62457: IFTRUE 62461
62459: GO 62489
62461: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
62462: LD_ADDR_OWVAR 42
62466: PUSH
62467: LD_INT 19
62469: PUSH
62470: LD_INT 23
62472: PUSH
62473: LD_INT 19
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: LIST
62480: PUSH
62481: LD_VAR 0 1
62485: ARRAY
62486: ST_TO_ADDR
62487: GO 62813
62489: LD_INT 18
62491: DOUBLE
62492: EQUAL
62493: IFTRUE 62497
62495: GO 62508
62497: POP
// bc_type := b_ext_radar ; 19 :
62498: LD_ADDR_OWVAR 42
62502: PUSH
62503: LD_INT 20
62505: ST_TO_ADDR
62506: GO 62813
62508: LD_INT 19
62510: DOUBLE
62511: EQUAL
62512: IFTRUE 62516
62514: GO 62527
62516: POP
// bc_type := b_ext_radio ; 20 :
62517: LD_ADDR_OWVAR 42
62521: PUSH
62522: LD_INT 22
62524: ST_TO_ADDR
62525: GO 62813
62527: LD_INT 20
62529: DOUBLE
62530: EQUAL
62531: IFTRUE 62535
62533: GO 62546
62535: POP
// bc_type := b_ext_siberium ; 21 :
62536: LD_ADDR_OWVAR 42
62540: PUSH
62541: LD_INT 21
62543: ST_TO_ADDR
62544: GO 62813
62546: LD_INT 21
62548: DOUBLE
62549: EQUAL
62550: IFTRUE 62554
62552: GO 62565
62554: POP
// bc_type := b_ext_computer ; 22 :
62555: LD_ADDR_OWVAR 42
62559: PUSH
62560: LD_INT 24
62562: ST_TO_ADDR
62563: GO 62813
62565: LD_INT 22
62567: DOUBLE
62568: EQUAL
62569: IFTRUE 62573
62571: GO 62584
62573: POP
// bc_type := b_ext_track ; 23 :
62574: LD_ADDR_OWVAR 42
62578: PUSH
62579: LD_INT 16
62581: ST_TO_ADDR
62582: GO 62813
62584: LD_INT 23
62586: DOUBLE
62587: EQUAL
62588: IFTRUE 62592
62590: GO 62603
62592: POP
// bc_type := b_ext_laser ; 24 :
62593: LD_ADDR_OWVAR 42
62597: PUSH
62598: LD_INT 25
62600: ST_TO_ADDR
62601: GO 62813
62603: LD_INT 24
62605: DOUBLE
62606: EQUAL
62607: IFTRUE 62611
62609: GO 62622
62611: POP
// bc_type := b_control_tower ; 25 :
62612: LD_ADDR_OWVAR 42
62616: PUSH
62617: LD_INT 36
62619: ST_TO_ADDR
62620: GO 62813
62622: LD_INT 25
62624: DOUBLE
62625: EQUAL
62626: IFTRUE 62630
62628: GO 62641
62630: POP
// bc_type := b_breastwork ; 26 :
62631: LD_ADDR_OWVAR 42
62635: PUSH
62636: LD_INT 31
62638: ST_TO_ADDR
62639: GO 62813
62641: LD_INT 26
62643: DOUBLE
62644: EQUAL
62645: IFTRUE 62649
62647: GO 62660
62649: POP
// bc_type := b_bunker ; 27 :
62650: LD_ADDR_OWVAR 42
62654: PUSH
62655: LD_INT 32
62657: ST_TO_ADDR
62658: GO 62813
62660: LD_INT 27
62662: DOUBLE
62663: EQUAL
62664: IFTRUE 62668
62666: GO 62679
62668: POP
// bc_type := b_turret ; 28 :
62669: LD_ADDR_OWVAR 42
62673: PUSH
62674: LD_INT 33
62676: ST_TO_ADDR
62677: GO 62813
62679: LD_INT 28
62681: DOUBLE
62682: EQUAL
62683: IFTRUE 62687
62685: GO 62698
62687: POP
// bc_type := b_armoury ; 29 :
62688: LD_ADDR_OWVAR 42
62692: PUSH
62693: LD_INT 4
62695: ST_TO_ADDR
62696: GO 62813
62698: LD_INT 29
62700: DOUBLE
62701: EQUAL
62702: IFTRUE 62706
62704: GO 62717
62706: POP
// bc_type := b_barracks ; 30 :
62707: LD_ADDR_OWVAR 42
62711: PUSH
62712: LD_INT 5
62714: ST_TO_ADDR
62715: GO 62813
62717: LD_INT 30
62719: DOUBLE
62720: EQUAL
62721: IFTRUE 62725
62723: GO 62736
62725: POP
// bc_type := b_solar_power ; 31 :
62726: LD_ADDR_OWVAR 42
62730: PUSH
62731: LD_INT 27
62733: ST_TO_ADDR
62734: GO 62813
62736: LD_INT 31
62738: DOUBLE
62739: EQUAL
62740: IFTRUE 62744
62742: GO 62755
62744: POP
// bc_type := b_oil_power ; 32 :
62745: LD_ADDR_OWVAR 42
62749: PUSH
62750: LD_INT 26
62752: ST_TO_ADDR
62753: GO 62813
62755: LD_INT 32
62757: DOUBLE
62758: EQUAL
62759: IFTRUE 62763
62761: GO 62774
62763: POP
// bc_type := b_siberite_power ; 33 :
62764: LD_ADDR_OWVAR 42
62768: PUSH
62769: LD_INT 28
62771: ST_TO_ADDR
62772: GO 62813
62774: LD_INT 33
62776: DOUBLE
62777: EQUAL
62778: IFTRUE 62782
62780: GO 62793
62782: POP
// bc_type := b_oil_mine ; 34 :
62783: LD_ADDR_OWVAR 42
62787: PUSH
62788: LD_INT 29
62790: ST_TO_ADDR
62791: GO 62813
62793: LD_INT 34
62795: DOUBLE
62796: EQUAL
62797: IFTRUE 62801
62799: GO 62812
62801: POP
// bc_type := b_siberite_mine ; end ;
62802: LD_ADDR_OWVAR 42
62806: PUSH
62807: LD_INT 30
62809: ST_TO_ADDR
62810: GO 62813
62812: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
62813: LD_ADDR_VAR 0 8
62817: PUSH
62818: LD_VAR 0 5
62822: PPUSH
62823: LD_VAR 0 6
62827: PPUSH
62828: LD_VAR 0 3
62832: PPUSH
62833: CALL_OW 47
62837: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
62838: LD_OWVAR 42
62842: PUSH
62843: LD_INT 32
62845: PUSH
62846: LD_INT 33
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: IN
62853: IFFALSE 62869
// PlaceWeaponTurret ( b , weapon ) ;
62855: LD_VAR 0 8
62859: PPUSH
62860: LD_VAR 0 4
62864: PPUSH
62865: CALL_OW 431
// end ;
62869: LD_VAR 0 7
62873: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
62874: LD_INT 0
62876: PPUSH
62877: PPUSH
62878: PPUSH
62879: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62880: LD_ADDR_VAR 0 4
62884: PUSH
62885: LD_INT 22
62887: PUSH
62888: LD_OWVAR 2
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 2
62899: PUSH
62900: LD_INT 30
62902: PUSH
62903: LD_INT 0
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 30
62912: PUSH
62913: LD_INT 1
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: LIST
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PPUSH
62929: CALL_OW 69
62933: ST_TO_ADDR
// if not tmp then
62934: LD_VAR 0 4
62938: NOT
62939: IFFALSE 62943
// exit ;
62941: GO 63002
// for i in tmp do
62943: LD_ADDR_VAR 0 2
62947: PUSH
62948: LD_VAR 0 4
62952: PUSH
62953: FOR_IN
62954: IFFALSE 63000
// for j = 1 to 3 do
62956: LD_ADDR_VAR 0 3
62960: PUSH
62961: DOUBLE
62962: LD_INT 1
62964: DEC
62965: ST_TO_ADDR
62966: LD_INT 3
62968: PUSH
62969: FOR_TO
62970: IFFALSE 62996
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
62972: LD_VAR 0 2
62976: PPUSH
62977: CALL_OW 274
62981: PPUSH
62982: LD_VAR 0 3
62986: PPUSH
62987: LD_INT 99999
62989: PPUSH
62990: CALL_OW 277
62994: GO 62969
62996: POP
62997: POP
62998: GO 62953
63000: POP
63001: POP
// end ;
63002: LD_VAR 0 1
63006: RET
// export function hHackSetLevel10 ; var i , j ; begin
63007: LD_INT 0
63009: PPUSH
63010: PPUSH
63011: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
63012: LD_ADDR_VAR 0 2
63016: PUSH
63017: LD_INT 21
63019: PUSH
63020: LD_INT 1
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PPUSH
63027: CALL_OW 69
63031: PUSH
63032: FOR_IN
63033: IFFALSE 63085
// if IsSelected ( i ) then
63035: LD_VAR 0 2
63039: PPUSH
63040: CALL_OW 306
63044: IFFALSE 63083
// begin for j := 1 to 4 do
63046: LD_ADDR_VAR 0 3
63050: PUSH
63051: DOUBLE
63052: LD_INT 1
63054: DEC
63055: ST_TO_ADDR
63056: LD_INT 4
63058: PUSH
63059: FOR_TO
63060: IFFALSE 63081
// SetSkill ( i , j , 10 ) ;
63062: LD_VAR 0 2
63066: PPUSH
63067: LD_VAR 0 3
63071: PPUSH
63072: LD_INT 10
63074: PPUSH
63075: CALL_OW 237
63079: GO 63059
63081: POP
63082: POP
// end ;
63083: GO 63032
63085: POP
63086: POP
// end ;
63087: LD_VAR 0 1
63091: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
63092: LD_INT 0
63094: PPUSH
63095: PPUSH
63096: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
63097: LD_ADDR_VAR 0 2
63101: PUSH
63102: LD_INT 22
63104: PUSH
63105: LD_OWVAR 2
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 21
63116: PUSH
63117: LD_INT 1
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PPUSH
63128: CALL_OW 69
63132: PUSH
63133: FOR_IN
63134: IFFALSE 63175
// begin for j := 1 to 4 do
63136: LD_ADDR_VAR 0 3
63140: PUSH
63141: DOUBLE
63142: LD_INT 1
63144: DEC
63145: ST_TO_ADDR
63146: LD_INT 4
63148: PUSH
63149: FOR_TO
63150: IFFALSE 63171
// SetSkill ( i , j , 10 ) ;
63152: LD_VAR 0 2
63156: PPUSH
63157: LD_VAR 0 3
63161: PPUSH
63162: LD_INT 10
63164: PPUSH
63165: CALL_OW 237
63169: GO 63149
63171: POP
63172: POP
// end ;
63173: GO 63133
63175: POP
63176: POP
// end ;
63177: LD_VAR 0 1
63181: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
63182: LD_INT 0
63184: PPUSH
// uc_side := your_side ;
63185: LD_ADDR_OWVAR 20
63189: PUSH
63190: LD_OWVAR 2
63194: ST_TO_ADDR
// uc_nation := nation ;
63195: LD_ADDR_OWVAR 21
63199: PUSH
63200: LD_VAR 0 1
63204: ST_TO_ADDR
// InitHc ;
63205: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
63209: LD_INT 0
63211: PPUSH
63212: LD_VAR 0 2
63216: PPUSH
63217: LD_VAR 0 3
63221: PPUSH
63222: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
63226: LD_VAR 0 4
63230: PPUSH
63231: LD_VAR 0 5
63235: PPUSH
63236: CALL_OW 428
63240: PUSH
63241: LD_INT 0
63243: EQUAL
63244: IFFALSE 63268
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
63246: CALL_OW 44
63250: PPUSH
63251: LD_VAR 0 4
63255: PPUSH
63256: LD_VAR 0 5
63260: PPUSH
63261: LD_INT 1
63263: PPUSH
63264: CALL_OW 48
// end ;
63268: LD_VAR 0 6
63272: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
63273: LD_INT 0
63275: PPUSH
63276: PPUSH
// uc_side := your_side ;
63277: LD_ADDR_OWVAR 20
63281: PUSH
63282: LD_OWVAR 2
63286: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
63287: LD_VAR 0 1
63291: PUSH
63292: LD_INT 1
63294: PUSH
63295: LD_INT 2
63297: PUSH
63298: LD_INT 3
63300: PUSH
63301: LD_INT 4
63303: PUSH
63304: LD_INT 5
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: IN
63314: IFFALSE 63326
// uc_nation := nation_american else
63316: LD_ADDR_OWVAR 21
63320: PUSH
63321: LD_INT 1
63323: ST_TO_ADDR
63324: GO 63369
// if chassis in [ 11 , 12 , 13 , 14 ] then
63326: LD_VAR 0 1
63330: PUSH
63331: LD_INT 11
63333: PUSH
63334: LD_INT 12
63336: PUSH
63337: LD_INT 13
63339: PUSH
63340: LD_INT 14
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: IN
63349: IFFALSE 63361
// uc_nation := nation_arabian else
63351: LD_ADDR_OWVAR 21
63355: PUSH
63356: LD_INT 2
63358: ST_TO_ADDR
63359: GO 63369
// uc_nation := nation_russian ;
63361: LD_ADDR_OWVAR 21
63365: PUSH
63366: LD_INT 3
63368: ST_TO_ADDR
// vc_chassis := chassis ;
63369: LD_ADDR_OWVAR 37
63373: PUSH
63374: LD_VAR 0 1
63378: ST_TO_ADDR
// vc_engine := engine ;
63379: LD_ADDR_OWVAR 39
63383: PUSH
63384: LD_VAR 0 2
63388: ST_TO_ADDR
// vc_control := control ;
63389: LD_ADDR_OWVAR 38
63393: PUSH
63394: LD_VAR 0 3
63398: ST_TO_ADDR
// vc_weapon := weapon ;
63399: LD_ADDR_OWVAR 40
63403: PUSH
63404: LD_VAR 0 4
63408: ST_TO_ADDR
// un := CreateVehicle ;
63409: LD_ADDR_VAR 0 8
63413: PUSH
63414: CALL_OW 45
63418: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
63419: LD_VAR 0 8
63423: PPUSH
63424: LD_INT 0
63426: PPUSH
63427: LD_INT 5
63429: PPUSH
63430: CALL_OW 12
63434: PPUSH
63435: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
63439: LD_VAR 0 8
63443: PPUSH
63444: LD_VAR 0 5
63448: PPUSH
63449: LD_VAR 0 6
63453: PPUSH
63454: LD_INT 1
63456: PPUSH
63457: CALL_OW 48
// end ;
63461: LD_VAR 0 7
63465: RET
// export hInvincible ; every 1 do
63466: GO 63468
63468: DISABLE
// hInvincible := [ ] ;
63469: LD_ADDR_EXP 77
63473: PUSH
63474: EMPTY
63475: ST_TO_ADDR
63476: END
// every 10 do var i ;
63477: GO 63479
63479: DISABLE
63480: LD_INT 0
63482: PPUSH
// begin enable ;
63483: ENABLE
// if not hInvincible then
63484: LD_EXP 77
63488: NOT
63489: IFFALSE 63493
// exit ;
63491: GO 63537
// for i in hInvincible do
63493: LD_ADDR_VAR 0 1
63497: PUSH
63498: LD_EXP 77
63502: PUSH
63503: FOR_IN
63504: IFFALSE 63535
// if GetLives ( i ) < 1000 then
63506: LD_VAR 0 1
63510: PPUSH
63511: CALL_OW 256
63515: PUSH
63516: LD_INT 1000
63518: LESS
63519: IFFALSE 63533
// SetLives ( i , 1000 ) ;
63521: LD_VAR 0 1
63525: PPUSH
63526: LD_INT 1000
63528: PPUSH
63529: CALL_OW 234
63533: GO 63503
63535: POP
63536: POP
// end ;
63537: PPOPN 1
63539: END
// export function hHackInvincible ; var i ; begin
63540: LD_INT 0
63542: PPUSH
63543: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
63544: LD_ADDR_VAR 0 2
63548: PUSH
63549: LD_INT 2
63551: PUSH
63552: LD_INT 21
63554: PUSH
63555: LD_INT 1
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 21
63564: PUSH
63565: LD_INT 2
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: LIST
63576: PPUSH
63577: CALL_OW 69
63581: PUSH
63582: FOR_IN
63583: IFFALSE 63644
// if IsSelected ( i ) then
63585: LD_VAR 0 2
63589: PPUSH
63590: CALL_OW 306
63594: IFFALSE 63642
// begin if i in hInvincible then
63596: LD_VAR 0 2
63600: PUSH
63601: LD_EXP 77
63605: IN
63606: IFFALSE 63626
// hInvincible := hInvincible diff i else
63608: LD_ADDR_EXP 77
63612: PUSH
63613: LD_EXP 77
63617: PUSH
63618: LD_VAR 0 2
63622: DIFF
63623: ST_TO_ADDR
63624: GO 63642
// hInvincible := hInvincible union i ;
63626: LD_ADDR_EXP 77
63630: PUSH
63631: LD_EXP 77
63635: PUSH
63636: LD_VAR 0 2
63640: UNION
63641: ST_TO_ADDR
// end ;
63642: GO 63582
63644: POP
63645: POP
// end ;
63646: LD_VAR 0 1
63650: RET
// export function hHackInvisible ; var i , j ; begin
63651: LD_INT 0
63653: PPUSH
63654: PPUSH
63655: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
63656: LD_ADDR_VAR 0 2
63660: PUSH
63661: LD_INT 21
63663: PUSH
63664: LD_INT 1
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PPUSH
63671: CALL_OW 69
63675: PUSH
63676: FOR_IN
63677: IFFALSE 63701
// if IsSelected ( i ) then
63679: LD_VAR 0 2
63683: PPUSH
63684: CALL_OW 306
63688: IFFALSE 63699
// ComForceInvisible ( i ) ;
63690: LD_VAR 0 2
63694: PPUSH
63695: CALL_OW 496
63699: GO 63676
63701: POP
63702: POP
// end ;
63703: LD_VAR 0 1
63707: RET
// export function hHackChangeYourSide ; begin
63708: LD_INT 0
63710: PPUSH
// if your_side = 8 then
63711: LD_OWVAR 2
63715: PUSH
63716: LD_INT 8
63718: EQUAL
63719: IFFALSE 63731
// your_side := 0 else
63721: LD_ADDR_OWVAR 2
63725: PUSH
63726: LD_INT 0
63728: ST_TO_ADDR
63729: GO 63745
// your_side := your_side + 1 ;
63731: LD_ADDR_OWVAR 2
63735: PUSH
63736: LD_OWVAR 2
63740: PUSH
63741: LD_INT 1
63743: PLUS
63744: ST_TO_ADDR
// end ;
63745: LD_VAR 0 1
63749: RET
// export function hHackChangeUnitSide ; var i , j ; begin
63750: LD_INT 0
63752: PPUSH
63753: PPUSH
63754: PPUSH
// for i in all_units do
63755: LD_ADDR_VAR 0 2
63759: PUSH
63760: LD_OWVAR 3
63764: PUSH
63765: FOR_IN
63766: IFFALSE 63844
// if IsSelected ( i ) then
63768: LD_VAR 0 2
63772: PPUSH
63773: CALL_OW 306
63777: IFFALSE 63842
// begin j := GetSide ( i ) ;
63779: LD_ADDR_VAR 0 3
63783: PUSH
63784: LD_VAR 0 2
63788: PPUSH
63789: CALL_OW 255
63793: ST_TO_ADDR
// if j = 8 then
63794: LD_VAR 0 3
63798: PUSH
63799: LD_INT 8
63801: EQUAL
63802: IFFALSE 63814
// j := 0 else
63804: LD_ADDR_VAR 0 3
63808: PUSH
63809: LD_INT 0
63811: ST_TO_ADDR
63812: GO 63828
// j := j + 1 ;
63814: LD_ADDR_VAR 0 3
63818: PUSH
63819: LD_VAR 0 3
63823: PUSH
63824: LD_INT 1
63826: PLUS
63827: ST_TO_ADDR
// SetSide ( i , j ) ;
63828: LD_VAR 0 2
63832: PPUSH
63833: LD_VAR 0 3
63837: PPUSH
63838: CALL_OW 235
// end ;
63842: GO 63765
63844: POP
63845: POP
// end ;
63846: LD_VAR 0 1
63850: RET
// export function hHackFog ; begin
63851: LD_INT 0
63853: PPUSH
// FogOff ( true ) ;
63854: LD_INT 1
63856: PPUSH
63857: CALL_OW 344
// end ;
63861: LD_VAR 0 1
63865: RET
// export function hHackTeleport ( unit , x , y ) ; begin
63866: LD_INT 0
63868: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
63869: LD_VAR 0 1
63873: PPUSH
63874: LD_VAR 0 2
63878: PPUSH
63879: LD_VAR 0 3
63883: PPUSH
63884: LD_INT 1
63886: PPUSH
63887: LD_INT 1
63889: PPUSH
63890: CALL_OW 483
// CenterOnXY ( x , y ) ;
63894: LD_VAR 0 2
63898: PPUSH
63899: LD_VAR 0 3
63903: PPUSH
63904: CALL_OW 84
// end ;
63908: LD_VAR 0 4
63912: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63913: LD_INT 0
63915: PPUSH
63916: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63917: LD_VAR 0 1
63921: NOT
63922: PUSH
63923: LD_VAR 0 2
63927: PPUSH
63928: LD_VAR 0 3
63932: PPUSH
63933: CALL_OW 488
63937: NOT
63938: OR
63939: PUSH
63940: LD_VAR 0 1
63944: PPUSH
63945: CALL_OW 266
63949: PUSH
63950: LD_INT 3
63952: NONEQUAL
63953: PUSH
63954: LD_VAR 0 1
63958: PPUSH
63959: CALL_OW 247
63963: PUSH
63964: LD_INT 1
63966: EQUAL
63967: NOT
63968: AND
63969: OR
63970: IFFALSE 63974
// exit ;
63972: GO 64123
// if GetType ( factory ) = unit_human then
63974: LD_VAR 0 1
63978: PPUSH
63979: CALL_OW 247
63983: PUSH
63984: LD_INT 1
63986: EQUAL
63987: IFFALSE 64004
// factory := IsInUnit ( factory ) ;
63989: LD_ADDR_VAR 0 1
63993: PUSH
63994: LD_VAR 0 1
63998: PPUSH
63999: CALL_OW 310
64003: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64004: LD_VAR 0 1
64008: PPUSH
64009: CALL_OW 266
64013: PUSH
64014: LD_INT 3
64016: NONEQUAL
64017: IFFALSE 64021
// exit ;
64019: GO 64123
// if HexInfo ( x , y ) = factory then
64021: LD_VAR 0 2
64025: PPUSH
64026: LD_VAR 0 3
64030: PPUSH
64031: CALL_OW 428
64035: PUSH
64036: LD_VAR 0 1
64040: EQUAL
64041: IFFALSE 64068
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
64043: LD_ADDR_EXP 78
64047: PUSH
64048: LD_EXP 78
64052: PPUSH
64053: LD_VAR 0 1
64057: PPUSH
64058: LD_INT 0
64060: PPUSH
64061: CALL_OW 1
64065: ST_TO_ADDR
64066: GO 64119
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
64068: LD_ADDR_EXP 78
64072: PUSH
64073: LD_EXP 78
64077: PPUSH
64078: LD_VAR 0 1
64082: PPUSH
64083: LD_VAR 0 1
64087: PPUSH
64088: CALL_OW 255
64092: PUSH
64093: LD_VAR 0 1
64097: PUSH
64098: LD_VAR 0 2
64102: PUSH
64103: LD_VAR 0 3
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: PPUSH
64114: CALL_OW 1
64118: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64119: CALL 64128 0 0
// end ;
64123: LD_VAR 0 4
64127: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64128: LD_INT 0
64130: PPUSH
64131: PPUSH
64132: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64133: LD_STRING resetFactoryWaypoint();
64135: PPUSH
64136: CALL_OW 559
// if factoryWaypoints then
64140: LD_EXP 78
64144: IFFALSE 64270
// begin list := PrepareArray ( factoryWaypoints ) ;
64146: LD_ADDR_VAR 0 3
64150: PUSH
64151: LD_EXP 78
64155: PPUSH
64156: CALL 44230 0 1
64160: ST_TO_ADDR
// for i := 1 to list do
64161: LD_ADDR_VAR 0 2
64165: PUSH
64166: DOUBLE
64167: LD_INT 1
64169: DEC
64170: ST_TO_ADDR
64171: LD_VAR 0 3
64175: PUSH
64176: FOR_TO
64177: IFFALSE 64268
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64179: LD_STRING setFactoryWaypointXY(
64181: PUSH
64182: LD_VAR 0 3
64186: PUSH
64187: LD_VAR 0 2
64191: ARRAY
64192: PUSH
64193: LD_INT 1
64195: ARRAY
64196: STR
64197: PUSH
64198: LD_STRING ,
64200: STR
64201: PUSH
64202: LD_VAR 0 3
64206: PUSH
64207: LD_VAR 0 2
64211: ARRAY
64212: PUSH
64213: LD_INT 2
64215: ARRAY
64216: STR
64217: PUSH
64218: LD_STRING ,
64220: STR
64221: PUSH
64222: LD_VAR 0 3
64226: PUSH
64227: LD_VAR 0 2
64231: ARRAY
64232: PUSH
64233: LD_INT 3
64235: ARRAY
64236: STR
64237: PUSH
64238: LD_STRING ,
64240: STR
64241: PUSH
64242: LD_VAR 0 3
64246: PUSH
64247: LD_VAR 0 2
64251: ARRAY
64252: PUSH
64253: LD_INT 4
64255: ARRAY
64256: STR
64257: PUSH
64258: LD_STRING )
64260: STR
64261: PPUSH
64262: CALL_OW 559
64266: GO 64176
64268: POP
64269: POP
// end ; end ;
64270: LD_VAR 0 1
64274: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64275: LD_INT 0
64277: PPUSH
// if HexInfo ( x , y ) = warehouse then
64278: LD_VAR 0 2
64282: PPUSH
64283: LD_VAR 0 3
64287: PPUSH
64288: CALL_OW 428
64292: PUSH
64293: LD_VAR 0 1
64297: EQUAL
64298: IFFALSE 64325
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64300: LD_ADDR_EXP 79
64304: PUSH
64305: LD_EXP 79
64309: PPUSH
64310: LD_VAR 0 1
64314: PPUSH
64315: LD_INT 0
64317: PPUSH
64318: CALL_OW 1
64322: ST_TO_ADDR
64323: GO 64376
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64325: LD_ADDR_EXP 79
64329: PUSH
64330: LD_EXP 79
64334: PPUSH
64335: LD_VAR 0 1
64339: PPUSH
64340: LD_VAR 0 1
64344: PPUSH
64345: CALL_OW 255
64349: PUSH
64350: LD_VAR 0 1
64354: PUSH
64355: LD_VAR 0 2
64359: PUSH
64360: LD_VAR 0 3
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: PPUSH
64371: CALL_OW 1
64375: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64376: CALL 64385 0 0
// end ;
64380: LD_VAR 0 4
64384: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64385: LD_INT 0
64387: PPUSH
64388: PPUSH
64389: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64390: LD_STRING resetWarehouseGatheringPoints();
64392: PPUSH
64393: CALL_OW 559
// if warehouseGatheringPoints then
64397: LD_EXP 79
64401: IFFALSE 64527
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64403: LD_ADDR_VAR 0 3
64407: PUSH
64408: LD_EXP 79
64412: PPUSH
64413: CALL 44230 0 1
64417: ST_TO_ADDR
// for i := 1 to list do
64418: LD_ADDR_VAR 0 2
64422: PUSH
64423: DOUBLE
64424: LD_INT 1
64426: DEC
64427: ST_TO_ADDR
64428: LD_VAR 0 3
64432: PUSH
64433: FOR_TO
64434: IFFALSE 64525
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64436: LD_STRING setWarehouseGatheringPointXY(
64438: PUSH
64439: LD_VAR 0 3
64443: PUSH
64444: LD_VAR 0 2
64448: ARRAY
64449: PUSH
64450: LD_INT 1
64452: ARRAY
64453: STR
64454: PUSH
64455: LD_STRING ,
64457: STR
64458: PUSH
64459: LD_VAR 0 3
64463: PUSH
64464: LD_VAR 0 2
64468: ARRAY
64469: PUSH
64470: LD_INT 2
64472: ARRAY
64473: STR
64474: PUSH
64475: LD_STRING ,
64477: STR
64478: PUSH
64479: LD_VAR 0 3
64483: PUSH
64484: LD_VAR 0 2
64488: ARRAY
64489: PUSH
64490: LD_INT 3
64492: ARRAY
64493: STR
64494: PUSH
64495: LD_STRING ,
64497: STR
64498: PUSH
64499: LD_VAR 0 3
64503: PUSH
64504: LD_VAR 0 2
64508: ARRAY
64509: PUSH
64510: LD_INT 4
64512: ARRAY
64513: STR
64514: PUSH
64515: LD_STRING )
64517: STR
64518: PPUSH
64519: CALL_OW 559
64523: GO 64433
64525: POP
64526: POP
// end ; end ;
64527: LD_VAR 0 1
64531: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
64532: LD_EXP 79
64536: IFFALSE 65221
64538: GO 64540
64540: DISABLE
64541: LD_INT 0
64543: PPUSH
64544: PPUSH
64545: PPUSH
64546: PPUSH
64547: PPUSH
64548: PPUSH
64549: PPUSH
64550: PPUSH
64551: PPUSH
// begin enable ;
64552: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
64553: LD_ADDR_VAR 0 3
64557: PUSH
64558: LD_EXP 79
64562: PPUSH
64563: CALL 44230 0 1
64567: ST_TO_ADDR
// if not list then
64568: LD_VAR 0 3
64572: NOT
64573: IFFALSE 64577
// exit ;
64575: GO 65221
// for i := 1 to list do
64577: LD_ADDR_VAR 0 1
64581: PUSH
64582: DOUBLE
64583: LD_INT 1
64585: DEC
64586: ST_TO_ADDR
64587: LD_VAR 0 3
64591: PUSH
64592: FOR_TO
64593: IFFALSE 65219
// begin depot := list [ i ] [ 2 ] ;
64595: LD_ADDR_VAR 0 8
64599: PUSH
64600: LD_VAR 0 3
64604: PUSH
64605: LD_VAR 0 1
64609: ARRAY
64610: PUSH
64611: LD_INT 2
64613: ARRAY
64614: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
64615: LD_ADDR_VAR 0 5
64619: PUSH
64620: LD_VAR 0 3
64624: PUSH
64625: LD_VAR 0 1
64629: ARRAY
64630: PUSH
64631: LD_INT 1
64633: ARRAY
64634: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
64635: LD_VAR 0 8
64639: PPUSH
64640: CALL_OW 301
64644: PUSH
64645: LD_VAR 0 5
64649: PUSH
64650: LD_VAR 0 8
64654: PPUSH
64655: CALL_OW 255
64659: NONEQUAL
64660: OR
64661: IFFALSE 64690
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
64663: LD_ADDR_EXP 79
64667: PUSH
64668: LD_EXP 79
64672: PPUSH
64673: LD_VAR 0 8
64677: PPUSH
64678: LD_INT 0
64680: PPUSH
64681: CALL_OW 1
64685: ST_TO_ADDR
// exit ;
64686: POP
64687: POP
64688: GO 65221
// end ; x := list [ i ] [ 3 ] ;
64690: LD_ADDR_VAR 0 6
64694: PUSH
64695: LD_VAR 0 3
64699: PUSH
64700: LD_VAR 0 1
64704: ARRAY
64705: PUSH
64706: LD_INT 3
64708: ARRAY
64709: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
64710: LD_ADDR_VAR 0 7
64714: PUSH
64715: LD_VAR 0 3
64719: PUSH
64720: LD_VAR 0 1
64724: ARRAY
64725: PUSH
64726: LD_INT 4
64728: ARRAY
64729: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
64730: LD_ADDR_VAR 0 9
64734: PUSH
64735: LD_VAR 0 6
64739: PPUSH
64740: LD_VAR 0 7
64744: PPUSH
64745: LD_INT 16
64747: PPUSH
64748: CALL 42818 0 3
64752: ST_TO_ADDR
// if not cratesNearbyPoint then
64753: LD_VAR 0 9
64757: NOT
64758: IFFALSE 64764
// exit ;
64760: POP
64761: POP
64762: GO 65221
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
64764: LD_ADDR_VAR 0 4
64768: PUSH
64769: LD_INT 22
64771: PUSH
64772: LD_VAR 0 5
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 3
64783: PUSH
64784: LD_INT 60
64786: PUSH
64787: EMPTY
64788: LIST
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 91
64796: PUSH
64797: LD_VAR 0 8
64801: PUSH
64802: LD_INT 6
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 2
64812: PUSH
64813: LD_INT 25
64815: PUSH
64816: LD_INT 2
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 25
64825: PUSH
64826: LD_INT 16
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: LIST
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: PPUSH
64844: CALL_OW 69
64848: PUSH
64849: LD_VAR 0 8
64853: PPUSH
64854: CALL_OW 313
64858: PPUSH
64859: LD_INT 3
64861: PUSH
64862: LD_INT 60
64864: PUSH
64865: EMPTY
64866: LIST
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 2
64874: PUSH
64875: LD_INT 25
64877: PUSH
64878: LD_INT 2
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 25
64887: PUSH
64888: LD_INT 16
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: LIST
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PPUSH
64904: CALL_OW 72
64908: UNION
64909: ST_TO_ADDR
// if tmp then
64910: LD_VAR 0 4
64914: IFFALSE 64994
// begin tmp := ShrinkArray ( tmp , 3 ) ;
64916: LD_ADDR_VAR 0 4
64920: PUSH
64921: LD_VAR 0 4
64925: PPUSH
64926: LD_INT 3
64928: PPUSH
64929: CALL 40787 0 2
64933: ST_TO_ADDR
// for j in tmp do
64934: LD_ADDR_VAR 0 2
64938: PUSH
64939: LD_VAR 0 4
64943: PUSH
64944: FOR_IN
64945: IFFALSE 64988
// begin if IsInUnit ( j ) then
64947: LD_VAR 0 2
64951: PPUSH
64952: CALL_OW 310
64956: IFFALSE 64967
// ComExit ( j ) ;
64958: LD_VAR 0 2
64962: PPUSH
64963: CALL 40870 0 1
// AddComCollect ( j , x , y ) ;
64967: LD_VAR 0 2
64971: PPUSH
64972: LD_VAR 0 6
64976: PPUSH
64977: LD_VAR 0 7
64981: PPUSH
64982: CALL_OW 177
// end ;
64986: GO 64944
64988: POP
64989: POP
// exit ;
64990: POP
64991: POP
64992: GO 65221
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
64994: LD_ADDR_VAR 0 4
64998: PUSH
64999: LD_INT 22
65001: PUSH
65002: LD_VAR 0 5
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 91
65013: PUSH
65014: LD_VAR 0 8
65018: PUSH
65019: LD_INT 8
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 2
65029: PUSH
65030: LD_INT 34
65032: PUSH
65033: LD_INT 12
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 34
65042: PUSH
65043: LD_INT 51
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 34
65052: PUSH
65053: LD_INT 32
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 34
65062: PUSH
65063: LD_INT 89
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: LIST
65081: PPUSH
65082: CALL_OW 69
65086: ST_TO_ADDR
// if tmp then
65087: LD_VAR 0 4
65091: IFFALSE 65217
// begin for j in tmp do
65093: LD_ADDR_VAR 0 2
65097: PUSH
65098: LD_VAR 0 4
65102: PUSH
65103: FOR_IN
65104: IFFALSE 65215
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
65106: LD_VAR 0 2
65110: PPUSH
65111: CALL_OW 262
65115: PUSH
65116: LD_INT 3
65118: EQUAL
65119: PUSH
65120: LD_VAR 0 2
65124: PPUSH
65125: CALL_OW 261
65129: PUSH
65130: LD_INT 20
65132: GREATER
65133: OR
65134: PUSH
65135: LD_VAR 0 2
65139: PPUSH
65140: CALL_OW 314
65144: NOT
65145: AND
65146: PUSH
65147: LD_VAR 0 2
65151: PPUSH
65152: CALL_OW 263
65156: PUSH
65157: LD_INT 1
65159: NONEQUAL
65160: PUSH
65161: LD_VAR 0 2
65165: PPUSH
65166: CALL_OW 311
65170: OR
65171: AND
65172: IFFALSE 65213
// begin ComCollect ( j , x , y ) ;
65174: LD_VAR 0 2
65178: PPUSH
65179: LD_VAR 0 6
65183: PPUSH
65184: LD_VAR 0 7
65188: PPUSH
65189: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
65193: LD_VAR 0 2
65197: PPUSH
65198: LD_VAR 0 8
65202: PPUSH
65203: CALL_OW 172
// exit ;
65207: POP
65208: POP
65209: POP
65210: POP
65211: GO 65221
// end ;
65213: GO 65103
65215: POP
65216: POP
// end ; end ;
65217: GO 64592
65219: POP
65220: POP
// end ; end_of_file end_of_file
65221: PPOPN 9
65223: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65224: LD_VAR 0 1
65228: PUSH
65229: LD_INT 200
65231: DOUBLE
65232: GREATEREQUAL
65233: IFFALSE 65241
65235: LD_INT 299
65237: DOUBLE
65238: LESSEQUAL
65239: IFTRUE 65243
65241: GO 65275
65243: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65244: LD_VAR 0 1
65248: PPUSH
65249: LD_VAR 0 2
65253: PPUSH
65254: LD_VAR 0 3
65258: PPUSH
65259: LD_VAR 0 4
65263: PPUSH
65264: LD_VAR 0 5
65268: PPUSH
65269: CALL 45070 0 5
65273: GO 65352
65275: LD_INT 300
65277: DOUBLE
65278: GREATEREQUAL
65279: IFFALSE 65287
65281: LD_INT 399
65283: DOUBLE
65284: LESSEQUAL
65285: IFTRUE 65289
65287: GO 65351
65289: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65290: LD_VAR 0 1
65294: PPUSH
65295: LD_VAR 0 2
65299: PPUSH
65300: LD_VAR 0 3
65304: PPUSH
65305: LD_VAR 0 4
65309: PPUSH
65310: LD_VAR 0 5
65314: PPUSH
65315: LD_VAR 0 6
65319: PPUSH
65320: LD_VAR 0 7
65324: PPUSH
65325: LD_VAR 0 8
65329: PPUSH
65330: LD_VAR 0 9
65334: PPUSH
65335: LD_VAR 0 10
65339: PPUSH
65340: LD_VAR 0 11
65344: PPUSH
65345: CALL 61925 0 11
65349: GO 65352
65351: POP
// end ;
65352: PPOPN 11
65354: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65355: LD_VAR 0 1
65359: PPUSH
65360: LD_VAR 0 2
65364: PPUSH
65365: LD_VAR 0 3
65369: PPUSH
65370: LD_VAR 0 4
65374: PPUSH
65375: LD_VAR 0 5
65379: PPUSH
65380: CALL 44806 0 5
// end ; end_of_file
65384: PPOPN 5
65386: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65387: LD_VAR 0 1
65391: PPUSH
65392: LD_VAR 0 2
65396: PPUSH
65397: LD_VAR 0 3
65401: PPUSH
65402: LD_VAR 0 4
65406: PPUSH
65407: LD_VAR 0 5
65411: PPUSH
65412: LD_VAR 0 6
65416: PPUSH
65417: CALL 49577 0 6
// end ;
65421: PPOPN 6
65423: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
65424: LD_INT 0
65426: PPUSH
// begin if not units then
65427: LD_VAR 0 1
65431: NOT
65432: IFFALSE 65436
// exit ;
65434: GO 65436
// end ;
65436: PPOPN 7
65438: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
65439: CALL 49481 0 0
// end ;
65443: PPOPN 1
65445: END
