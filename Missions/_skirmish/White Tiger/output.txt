// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 63 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 24
// Difficulty := 2 else
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 2
  21: ST_TO_ADDR
  22: GO 37
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_OWVAR 67
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// PrepareAlliance ;
  37: CALL 79 0 0
// PrepareRussian ;
  41: CALL 446 0 0
// Action ;
  45: CALL 2370 0 0
// if debug then
  49: LD_EXP 1
  53: IFFALSE 62
// FogOff ( 7 ) ;
  55: LD_INT 7
  57: PPUSH
  58: CALL_OW 344
// end ;
  62: END
// export debug ; export function Init ; begin
  63: LD_INT 0
  65: PPUSH
// debug := false ;
  66: LD_ADDR_EXP 1
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// end ; end_of_file
  74: LD_VAR 0 1
  78: RET
// export allianceHack , allianceMechanic ; export function PrepareAlliance ; var i , tmp ; begin
  79: LD_INT 0
  81: PPUSH
  82: PPUSH
  83: PPUSH
// tmp := [ ] ;
  84: LD_ADDR_VAR 0 3
  88: PUSH
  89: EMPTY
  90: ST_TO_ADDR
// uc_side := 7 ;
  91: LD_ADDR_OWVAR 20
  95: PUSH
  96: LD_INT 7
  98: ST_TO_ADDR
// uc_nation := 1 ;
  99: LD_ADDR_OWVAR 21
 103: PUSH
 104: LD_INT 1
 106: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_hack , 100 ) ;
 107: LD_INT 5
 109: PPUSH
 110: LD_INT 3
 112: PPUSH
 113: LD_INT 3
 115: PPUSH
 116: LD_INT 99
 118: PPUSH
 119: LD_INT 100
 121: PPUSH
 122: CALL 7762 0 5
// allianceHack := CreateVehicle ;
 126: LD_ADDR_EXP 2
 130: PUSH
 131: CALL_OW 45
 135: ST_TO_ADDR
// PlaceUnitArea ( allianceHack , startSpawnArea , false ) ;
 136: LD_EXP 2
 140: PPUSH
 141: LD_INT 7
 143: PPUSH
 144: LD_INT 0
 146: PPUSH
 147: CALL_OW 49
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_double_laser , 100 ) ;
 151: LD_INT 5
 153: PPUSH
 154: LD_INT 3
 156: PPUSH
 157: LD_INT 3
 159: PPUSH
 160: LD_INT 10
 162: PPUSH
 163: LD_INT 100
 165: PPUSH
 166: CALL 7762 0 5
// for i := 1 to 2 do
 170: LD_ADDR_VAR 0 2
 174: PUSH
 175: DOUBLE
 176: LD_INT 1
 178: DEC
 179: ST_TO_ADDR
 180: LD_INT 2
 182: PUSH
 183: FOR_TO
 184: IFFALSE 203
// PlaceUnitArea ( CreateVehicle , startSpawnArea , false ) ;
 186: CALL_OW 45
 190: PPUSH
 191: LD_INT 7
 193: PPUSH
 194: LD_INT 0
 196: PPUSH
 197: CALL_OW 49
 201: GO 183
 203: POP
 204: POP
// uc_side := 4 ;
 205: LD_ADDR_OWVAR 20
 209: PUSH
 210: LD_INT 4
 212: ST_TO_ADDR
// uc_nation := 1 ;
 213: LD_ADDR_OWVAR 21
 217: PUSH
 218: LD_INT 1
 220: ST_TO_ADDR
// PrepareMechanic ( sex_male , 9 ) ;
 221: LD_INT 1
 223: PPUSH
 224: LD_INT 9
 226: PPUSH
 227: CALL_OW 383
// allianceMechanic := CreateHuman ;
 231: LD_ADDR_EXP 3
 235: PUSH
 236: CALL_OW 44
 240: ST_TO_ADDR
// PlaceHumanInUnit ( allianceMechanic , ruDep2 ) ;
 241: LD_EXP 3
 245: PPUSH
 246: LD_INT 96
 248: PPUSH
 249: CALL_OW 52
// end ;
 253: LD_VAR 0 1
 257: RET
// export function PrepareReinforcements ( ) ; var i , un ; begin
 258: LD_INT 0
 260: PPUSH
 261: PPUSH
 262: PPUSH
// uc_side := 7 ;
 263: LD_ADDR_OWVAR 20
 267: PUSH
 268: LD_INT 7
 270: ST_TO_ADDR
// uc_nation := 1 ;
 271: LD_ADDR_OWVAR 21
 275: PUSH
 276: LD_INT 1
 278: ST_TO_ADDR
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 279: LD_ADDR_VAR 0 2
 283: PUSH
 284: DOUBLE
 285: LD_INT 1
 287: DEC
 288: ST_TO_ADDR
 289: LD_INT 3
 291: PUSH
 292: LD_INT 2
 294: PUSH
 295: LD_INT 2
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: LIST
 302: PUSH
 303: LD_OWVAR 67
 307: ARRAY
 308: PUSH
 309: FOR_TO
 310: IFFALSE 380
// begin PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_rocket_launcher , 100 ) ;
 312: LD_INT 5
 314: PPUSH
 315: LD_INT 3
 317: PPUSH
 318: LD_INT 3
 320: PPUSH
 321: LD_INT 7
 323: PPUSH
 324: LD_INT 100
 326: PPUSH
 327: CALL 7762 0 5
// un := CreateVehicle ;
 331: LD_ADDR_VAR 0 3
 335: PUSH
 336: CALL_OW 45
 340: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 341: LD_VAR 0 3
 345: PPUSH
 346: LD_INT 7
 348: PPUSH
 349: LD_INT 0
 351: PPUSH
 352: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 356: LD_VAR 0 3
 360: PPUSH
 361: LD_INT 67
 363: PPUSH
 364: LD_INT 95
 366: PPUSH
 367: CALL_OW 111
// wait ( 0 0$2 ) ;
 371: LD_INT 70
 373: PPUSH
 374: CALL_OW 67
// end ;
 378: GO 309
 380: POP
 381: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_radar , 100 ) ;
 382: LD_INT 5
 384: PPUSH
 385: LD_INT 3
 387: PPUSH
 388: LD_INT 3
 390: PPUSH
 391: LD_INT 11
 393: PPUSH
 394: LD_INT 100
 396: PPUSH
 397: CALL 7762 0 5
// un := CreateVehicle ;
 401: LD_ADDR_VAR 0 3
 405: PUSH
 406: CALL_OW 45
 410: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 411: LD_VAR 0 3
 415: PPUSH
 416: LD_INT 7
 418: PPUSH
 419: LD_INT 0
 421: PPUSH
 422: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 426: LD_VAR 0 3
 430: PPUSH
 431: LD_INT 67
 433: PPUSH
 434: LD_INT 95
 436: PPUSH
 437: CALL_OW 111
// end ; end_of_file
 441: LD_VAR 0 1
 445: RET
// export ruGuard1 , ruGuard2 , ruGuard3 , ruForces , ruEng ; export function PrepareRussian ; var i , un ; begin
 446: LD_INT 0
 448: PPUSH
 449: PPUSH
 450: PPUSH
// uc_side := 3 ;
 451: LD_ADDR_OWVAR 20
 455: PUSH
 456: LD_INT 3
 458: ST_TO_ADDR
// uc_nation := 3 ;
 459: LD_ADDR_OWVAR 21
 463: PUSH
 464: LD_INT 3
 466: ST_TO_ADDR
// SetResourceType ( GetBase ( ruDep ) , mat_cans , 50000 ) ;
 467: LD_INT 14
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_INT 1
 477: PPUSH
 478: LD_INT 50000
 480: PPUSH
 481: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , mat_siberit , 5000 ) ;
 485: LD_INT 14
 487: PPUSH
 488: CALL_OW 274
 492: PPUSH
 493: LD_INT 3
 495: PPUSH
 496: LD_INT 5000
 498: PPUSH
 499: CALL_OW 277
// TeleportExit ( ruTeleport , 132 , 89 ) ;
 503: LD_INT 45
 505: PPUSH
 506: LD_INT 132
 508: PPUSH
 509: LD_INT 89
 511: PPUSH
 512: CALL_OW 243
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
 516: LD_ADDR_VAR 0 2
 520: PUSH
 521: LD_INT 21
 523: PUSH
 524: LD_INT 3
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PPUSH
 531: CALL_OW 69
 535: PUSH
 536: FOR_IN
 537: IFFALSE 570
// SetBLevel ( i , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
 539: LD_VAR 0 2
 543: PPUSH
 544: LD_INT 6
 546: PUSH
 547: LD_INT 8
 549: PUSH
 550: LD_INT 10
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: LD_OWVAR 67
 562: ARRAY
 563: PPUSH
 564: CALL_OW 241
 568: GO 536
 570: POP
 571: POP
// for i := 1 to 4 do
 572: LD_ADDR_VAR 0 2
 576: PUSH
 577: DOUBLE
 578: LD_INT 1
 580: DEC
 581: ST_TO_ADDR
 582: LD_INT 4
 584: PUSH
 585: FOR_TO
 586: IFFALSE 612
// begin PrepareMechanic ( false , 9 ) ;
 588: LD_INT 0
 590: PPUSH
 591: LD_INT 9
 593: PPUSH
 594: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFac ) ;
 598: CALL_OW 44
 602: PPUSH
 603: LD_INT 50
 605: PPUSH
 606: CALL_OW 52
// end ;
 610: GO 585
 612: POP
 613: POP
// ruGuard1 := [ ] ;
 614: LD_ADDR_EXP 4
 618: PUSH
 619: EMPTY
 620: ST_TO_ADDR
// ruGuard2 := [ ] ;
 621: LD_ADDR_EXP 5
 625: PUSH
 626: EMPTY
 627: ST_TO_ADDR
// ruGuard3 := [ ] ;
 628: LD_ADDR_EXP 6
 632: PUSH
 633: EMPTY
 634: ST_TO_ADDR
// ruForces := [ ] ;
 635: LD_ADDR_EXP 7
 639: PUSH
 640: EMPTY
 641: ST_TO_ADDR
// ruEng := [ ] ;
 642: LD_ADDR_EXP 8
 646: PUSH
 647: EMPTY
 648: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 4
 661: PUSH
 662: LD_INT 5
 664: PUSH
 665: LD_INT 6
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: LIST
 672: PUSH
 673: LD_OWVAR 67
 677: ARRAY
 678: PUSH
 679: FOR_TO
 680: IFFALSE 736
// begin PrepareEngineer ( false , 8 ) ;
 682: LD_INT 0
 684: PPUSH
 685: LD_INT 8
 687: PPUSH
 688: CALL_OW 382
// un := CreateHuman ;
 692: LD_ADDR_VAR 0 3
 696: PUSH
 697: CALL_OW 44
 701: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruDep ) ;
 702: LD_VAR 0 3
 706: PPUSH
 707: LD_INT 14
 709: PPUSH
 710: CALL_OW 52
// ruEng := Join ( ruEng , un ) ;
 714: LD_ADDR_EXP 8
 718: PUSH
 719: LD_EXP 8
 723: PPUSH
 724: LD_VAR 0 3
 728: PPUSH
 729: CALL 40932 0 2
 733: ST_TO_ADDR
// end ;
 734: GO 679
 736: POP
 737: POP
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
 738: LD_ADDR_VAR 0 2
 742: PUSH
 743: DOUBLE
 744: LD_INT 1
 746: DEC
 747: ST_TO_ADDR
 748: LD_INT 5
 750: PUSH
 751: LD_INT 6
 753: PUSH
 754: LD_INT 7
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: LIST
 761: PUSH
 762: LD_OWVAR 67
 766: ARRAY
 767: PUSH
 768: FOR_TO
 769: IFFALSE 879
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 771: LD_INT 24
 773: PPUSH
 774: LD_INT 3
 776: PPUSH
 777: LD_INT 3
 779: PPUSH
 780: LD_INT 46
 782: PUSH
 783: LD_INT 45
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: PUSH
 790: LD_VAR 0 2
 794: PUSH
 795: LD_INT 2
 797: MOD
 798: PUSH
 799: LD_INT 1
 801: PLUS
 802: ARRAY
 803: PPUSH
 804: LD_INT 100
 806: PPUSH
 807: CALL 7762 0 5
// un := CreateVehicle ;
 811: LD_ADDR_VAR 0 3
 815: PUSH
 816: CALL_OW 45
 820: ST_TO_ADDR
// SetDir ( un , 3 ) ;
 821: LD_VAR 0 3
 825: PPUSH
 826: LD_INT 3
 828: PPUSH
 829: CALL_OW 233
// PlaceUnitArea ( un , riverGuard1 , false ) ;
 833: LD_VAR 0 3
 837: PPUSH
 838: LD_INT 4
 840: PPUSH
 841: LD_INT 0
 843: PPUSH
 844: CALL_OW 49
// ruGuard1 := Replace ( ruGuard1 , ruGuard1 + 1 , un ) ;
 848: LD_ADDR_EXP 4
 852: PUSH
 853: LD_EXP 4
 857: PPUSH
 858: LD_EXP 4
 862: PUSH
 863: LD_INT 1
 865: PLUS
 866: PPUSH
 867: LD_VAR 0 3
 871: PPUSH
 872: CALL_OW 1
 876: ST_TO_ADDR
// end ;
 877: GO 768
 879: POP
 880: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
 881: LD_ADDR_VAR 0 2
 885: PUSH
 886: DOUBLE
 887: LD_INT 1
 889: DEC
 890: ST_TO_ADDR
 891: LD_INT 4
 893: PUSH
 894: LD_INT 4
 896: PUSH
 897: LD_INT 5
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PUSH
 905: LD_OWVAR 67
 909: ARRAY
 910: PUSH
 911: FOR_TO
 912: IFFALSE 1022
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 914: LD_INT 24
 916: PPUSH
 917: LD_INT 3
 919: PPUSH
 920: LD_INT 3
 922: PPUSH
 923: LD_INT 46
 925: PUSH
 926: LD_INT 45
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: PUSH
 933: LD_VAR 0 2
 937: PUSH
 938: LD_INT 2
 940: MOD
 941: PUSH
 942: LD_INT 1
 944: PLUS
 945: ARRAY
 946: PPUSH
 947: LD_INT 100
 949: PPUSH
 950: CALL 7762 0 5
// un := CreateVehicle ;
 954: LD_ADDR_VAR 0 3
 958: PUSH
 959: CALL_OW 45
 963: ST_TO_ADDR
// SetDir ( un , 4 ) ;
 964: LD_VAR 0 3
 968: PPUSH
 969: LD_INT 4
 971: PPUSH
 972: CALL_OW 233
// PlaceUnitArea ( un , riverGuard2 , false ) ;
 976: LD_VAR 0 3
 980: PPUSH
 981: LD_INT 5
 983: PPUSH
 984: LD_INT 0
 986: PPUSH
 987: CALL_OW 49
// ruGuard2 := Replace ( ruGuard2 , ruGuard2 + 1 , un ) ;
 991: LD_ADDR_EXP 5
 995: PUSH
 996: LD_EXP 5
1000: PPUSH
1001: LD_EXP 5
1005: PUSH
1006: LD_INT 1
1008: PLUS
1009: PPUSH
1010: LD_VAR 0 3
1014: PPUSH
1015: CALL_OW 1
1019: ST_TO_ADDR
// end ;
1020: GO 911
1022: POP
1023: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
1024: LD_ADDR_VAR 0 2
1028: PUSH
1029: DOUBLE
1030: LD_INT 1
1032: DEC
1033: ST_TO_ADDR
1034: LD_INT 4
1036: PUSH
1037: LD_INT 4
1039: PUSH
1040: LD_INT 5
1042: PUSH
1043: EMPTY
1044: LIST
1045: LIST
1046: LIST
1047: PUSH
1048: LD_OWVAR 67
1052: ARRAY
1053: PUSH
1054: FOR_TO
1055: IFFALSE 1165
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
1057: LD_INT 24
1059: PPUSH
1060: LD_INT 3
1062: PPUSH
1063: LD_INT 3
1065: PPUSH
1066: LD_INT 46
1068: PUSH
1069: LD_INT 45
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: PUSH
1076: LD_VAR 0 2
1080: PUSH
1081: LD_INT 2
1083: MOD
1084: PUSH
1085: LD_INT 1
1087: PLUS
1088: ARRAY
1089: PPUSH
1090: LD_INT 100
1092: PPUSH
1093: CALL 7762 0 5
// un := CreateVehicle ;
1097: LD_ADDR_VAR 0 3
1101: PUSH
1102: CALL_OW 45
1106: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1107: LD_VAR 0 3
1111: PPUSH
1112: LD_INT 1
1114: PPUSH
1115: CALL_OW 233
// PlaceUnitArea ( un , riverGuard3 , false ) ;
1119: LD_VAR 0 3
1123: PPUSH
1124: LD_INT 6
1126: PPUSH
1127: LD_INT 0
1129: PPUSH
1130: CALL_OW 49
// ruGuard3 := Replace ( ruGuard3 , ruGuard3 + 1 , un ) ;
1134: LD_ADDR_EXP 6
1138: PUSH
1139: LD_EXP 6
1143: PPUSH
1144: LD_EXP 6
1148: PUSH
1149: LD_INT 1
1151: PLUS
1152: PPUSH
1153: LD_VAR 0 3
1157: PPUSH
1158: CALL_OW 1
1162: ST_TO_ADDR
// end ;
1163: GO 1054
1165: POP
1166: POP
// for i := 1 to 2 do
1167: LD_ADDR_VAR 0 2
1171: PUSH
1172: DOUBLE
1173: LD_INT 1
1175: DEC
1176: ST_TO_ADDR
1177: LD_INT 2
1179: PUSH
1180: FOR_TO
1181: IFFALSE 1229
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
1183: LD_INT 22
1185: PPUSH
1186: LD_INT 3
1188: PPUSH
1189: LD_INT 3
1191: PPUSH
1192: LD_INT 52
1194: PPUSH
1195: LD_INT 100
1197: PPUSH
1198: CALL 7762 0 5
// un := CreateVehicle ;
1202: LD_ADDR_VAR 0 3
1206: PUSH
1207: CALL_OW 45
1211: ST_TO_ADDR
// PlaceUnitArea ( un , ruCraneArea , false ) ;
1212: LD_VAR 0 3
1216: PPUSH
1217: LD_INT 9
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: CALL_OW 49
// end ;
1227: GO 1180
1229: POP
1230: POP
// for i := 1 to 3 do
1231: LD_ADDR_VAR 0 2
1235: PUSH
1236: DOUBLE
1237: LD_INT 1
1239: DEC
1240: ST_TO_ADDR
1241: LD_INT 3
1243: PUSH
1244: FOR_TO
1245: IFFALSE 1282
// begin PrepareHuman ( false , class_bazooker , 8 ) ;
1247: LD_INT 0
1249: PPUSH
1250: LD_INT 9
1252: PPUSH
1253: LD_INT 8
1255: PPUSH
1256: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 91 , 83 ) ) ;
1260: CALL_OW 44
1264: PPUSH
1265: LD_INT 91
1267: PPUSH
1268: LD_INT 83
1270: PPUSH
1271: CALL_OW 428
1275: PPUSH
1276: CALL_OW 52
// end ;
1280: GO 1244
1282: POP
1283: POP
// end ;
1284: LD_VAR 0 1
1288: RET
// every 0 0$1 trigger ruEng do var i , tmp ;
1289: LD_EXP 8
1293: IFFALSE 1489
1295: GO 1297
1297: DISABLE
1298: LD_INT 0
1300: PPUSH
1301: PPUSH
// begin enable ;
1302: ENABLE
// tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1303: LD_ADDR_VAR 0 2
1307: PUSH
1308: LD_INT 10
1310: PPUSH
1311: LD_INT 21
1313: PUSH
1314: LD_INT 3
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PUSH
1321: LD_INT 3
1323: PUSH
1324: LD_INT 24
1326: PUSH
1327: LD_INT 1000
1329: PUSH
1330: EMPTY
1331: LIST
1332: LIST
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: PPUSH
1342: CALL_OW 70
1346: ST_TO_ADDR
// if not tmp and UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) then
1347: LD_VAR 0 2
1351: NOT
1352: IFFALSE 1378
1354: PUSH
1355: LD_EXP 8
1359: PPUSH
1360: LD_INT 3
1362: PUSH
1363: LD_INT 54
1365: PUSH
1366: EMPTY
1367: LIST
1368: PUSH
1369: EMPTY
1370: LIST
1371: LIST
1372: PPUSH
1373: CALL_OW 72
1377: AND
1378: IFFALSE 1410
// ComEnterUnit ( UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) , ruDep ) ;
1380: LD_EXP 8
1384: PPUSH
1385: LD_INT 3
1387: PUSH
1388: LD_INT 54
1390: PUSH
1391: EMPTY
1392: LIST
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: PPUSH
1398: CALL_OW 72
1402: PPUSH
1403: LD_INT 14
1405: PPUSH
1406: CALL_OW 120
// if tmp then
1410: LD_VAR 0 2
1414: IFFALSE 1489
// begin for i in ruEng do
1416: LD_ADDR_VAR 0 1
1420: PUSH
1421: LD_EXP 8
1425: PUSH
1426: FOR_IN
1427: IFFALSE 1487
// if IsInUnit ( i ) then
1429: LD_VAR 0 1
1433: PPUSH
1434: CALL_OW 310
1438: IFFALSE 1451
// ComExitBuilding ( i ) else
1440: LD_VAR 0 1
1444: PPUSH
1445: CALL_OW 122
1449: GO 1485
// ComRepairBuilding ( i , SortByDistanceUnit ( i , tmp , true , true ) [ 1 ] ) ;
1451: LD_VAR 0 1
1455: PPUSH
1456: LD_VAR 0 1
1460: PPUSH
1461: LD_VAR 0 2
1465: PPUSH
1466: LD_INT 1
1468: PPUSH
1469: LD_INT 1
1471: PPUSH
1472: CALL 8319 0 4
1476: PUSH
1477: LD_INT 1
1479: ARRAY
1480: PPUSH
1481: CALL_OW 130
1485: GO 1426
1487: POP
1488: POP
// end ; end ;
1489: PPOPN 2
1491: END
// every 4 4$00 trigger not ruForces do var i , tmp ;
1492: LD_EXP 7
1496: NOT
1497: IFFALSE 1563
1499: GO 1501
1501: DISABLE
1502: LD_INT 0
1504: PPUSH
1505: PPUSH
// begin enable ;
1506: ENABLE
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
1507: LD_ADDR_VAR 0 1
1511: PUSH
1512: DOUBLE
1513: LD_INT 1
1515: DEC
1516: ST_TO_ADDR
1517: LD_INT 4
1519: PUSH
1520: LD_INT 5
1522: PUSH
1523: LD_INT 6
1525: PUSH
1526: EMPTY
1527: LIST
1528: LIST
1529: LIST
1530: PUSH
1531: LD_OWVAR 67
1535: ARRAY
1536: PUSH
1537: FOR_TO
1538: IFFALSE 1561
// AddComConstruct ( ruFac , ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ) ;
1540: LD_INT 50
1542: PPUSH
1543: LD_INT 24
1545: PPUSH
1546: LD_INT 3
1548: PPUSH
1549: LD_INT 3
1551: PPUSH
1552: LD_INT 46
1554: PPUSH
1555: CALL_OW 185
1559: GO 1537
1561: POP
1562: POP
// end ;
1563: PPOPN 2
1565: END
// every 0 0$30 trigger ruForces >= [ 4 , 5 , 6 ] [ Difficulty ] do var i , tmp ;
1566: LD_EXP 7
1570: PUSH
1571: LD_INT 4
1573: PUSH
1574: LD_INT 5
1576: PUSH
1577: LD_INT 6
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: LIST
1584: PUSH
1585: LD_OWVAR 67
1589: ARRAY
1590: GREATEREQUAL
1591: IFFALSE 1744
1593: GO 1595
1595: DISABLE
1596: LD_INT 0
1598: PPUSH
1599: PPUSH
// begin enable ;
1600: ENABLE
// tmp := ruForces ;
1601: LD_ADDR_VAR 0 2
1605: PUSH
1606: LD_EXP 7
1610: ST_TO_ADDR
// if rand ( 0 , 1 ) then
1611: LD_INT 0
1613: PPUSH
1614: LD_INT 1
1616: PPUSH
1617: CALL_OW 12
1621: IFFALSE 1642
// begin ComEnterUnit ( tmp , ruTeleport ) ;
1623: LD_VAR 0 2
1627: PPUSH
1628: LD_INT 45
1630: PPUSH
1631: CALL_OW 120
// wait ( 0 0$20 ) ;
1635: LD_INT 700
1637: PPUSH
1638: CALL_OW 67
// end ; ruForces := [ ] ;
1642: LD_ADDR_EXP 7
1646: PUSH
1647: EMPTY
1648: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1649: LD_INT 35
1651: PPUSH
1652: CALL_OW 67
// for i in tmp do
1656: LD_ADDR_VAR 0 1
1660: PUSH
1661: LD_VAR 0 2
1665: PUSH
1666: FOR_IN
1667: IFFALSE 1735
// if not IsOk ( i ) then
1669: LD_VAR 0 1
1673: PPUSH
1674: CALL_OW 302
1678: NOT
1679: IFFALSE 1699
// tmp := tmp diff i else
1681: LD_ADDR_VAR 0 2
1685: PUSH
1686: LD_VAR 0 2
1690: PUSH
1691: LD_VAR 0 1
1695: DIFF
1696: ST_TO_ADDR
1697: GO 1733
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
1699: LD_VAR 0 1
1703: PPUSH
1704: LD_INT 81
1706: PUSH
1707: LD_INT 3
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: PPUSH
1714: CALL_OW 69
1718: PPUSH
1719: LD_VAR 0 1
1723: PPUSH
1724: CALL_OW 74
1728: PPUSH
1729: CALL_OW 115
1733: GO 1666
1735: POP
1736: POP
// until not tmp ;
1737: LD_VAR 0 2
1741: NOT
1742: IFFALSE 1649
// end ;
1744: PPOPN 2
1746: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 62 , 83 , 8 ] ] ) do
1747: LD_INT 22
1749: PUSH
1750: LD_INT 7
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 92
1759: PUSH
1760: LD_INT 62
1762: PUSH
1763: LD_INT 83
1765: PUSH
1766: LD_INT 8
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: PPUSH
1779: CALL_OW 69
1783: IFFALSE 1803
1785: GO 1787
1787: DISABLE
// ComAgressiveMove ( ruGuard1 , 69 , 100 ) ;
1788: LD_EXP 4
1792: PPUSH
1793: LD_INT 69
1795: PPUSH
1796: LD_INT 100
1798: PPUSH
1799: CALL_OW 114
1803: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 85 , 89 , 8 ] ] ) do
1804: LD_INT 22
1806: PUSH
1807: LD_INT 7
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 92
1816: PUSH
1817: LD_INT 85
1819: PUSH
1820: LD_INT 89
1822: PUSH
1823: LD_INT 8
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PPUSH
1836: CALL_OW 69
1840: IFFALSE 1860
1842: GO 1844
1844: DISABLE
// ComAgressiveMove ( ruGuard2 , 72 , 88 ) ;
1845: LD_EXP 5
1849: PPUSH
1850: LD_INT 72
1852: PPUSH
1853: LD_INT 88
1855: PPUSH
1856: CALL_OW 114
1860: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 89 , 13 , 8 ] ] ) do
1861: LD_INT 22
1863: PUSH
1864: LD_INT 7
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: PUSH
1871: LD_INT 92
1873: PUSH
1874: LD_INT 89
1876: PUSH
1877: LD_INT 13
1879: PUSH
1880: LD_INT 8
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: PPUSH
1893: CALL_OW 69
1897: IFFALSE 1917
1899: GO 1901
1901: DISABLE
// ComAgressiveMove ( ruGuard3 , 107 , 26 ) ; end_of_file
1902: LD_EXP 6
1906: PPUSH
1907: LD_INT 107
1909: PPUSH
1910: LD_INT 26
1912: PPUSH
1913: CALL_OW 114
1917: END
// every 6 6$00 do var i , un , tmp ;
1918: GO 1920
1920: DISABLE
1921: LD_INT 0
1923: PPUSH
1924: PPUSH
1925: PPUSH
// begin enable ;
1926: ENABLE
// tmp := [ ] ;
1927: LD_ADDR_VAR 0 3
1931: PUSH
1932: EMPTY
1933: ST_TO_ADDR
// for i := 1 to 8 do
1934: LD_ADDR_VAR 0 1
1938: PUSH
1939: DOUBLE
1940: LD_INT 1
1942: DEC
1943: ST_TO_ADDR
1944: LD_INT 8
1946: PUSH
1947: FOR_TO
1948: IFFALSE 2091
// begin uc_side := 1 ;
1950: LD_ADDR_OWVAR 20
1954: PUSH
1955: LD_INT 1
1957: ST_TO_ADDR
// uc_nation := 1 ;
1958: LD_ADDR_OWVAR 21
1962: PUSH
1963: LD_INT 1
1965: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_laser , us_rocket_launcher ] [ i mod 3 + 1 ] , 100 ) ;
1966: LD_INT 5
1968: PPUSH
1969: LD_INT 3
1971: PPUSH
1972: LD_INT 3
1974: PPUSH
1975: LD_INT 6
1977: PUSH
1978: LD_INT 9
1980: PUSH
1981: LD_INT 7
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_VAR 0 1
1993: PUSH
1994: LD_INT 3
1996: MOD
1997: PUSH
1998: LD_INT 1
2000: PLUS
2001: ARRAY
2002: PPUSH
2003: LD_INT 100
2005: PPUSH
2006: CALL 7762 0 5
// un := CreateVehicle ;
2010: LD_ADDR_VAR 0 2
2014: PUSH
2015: CALL_OW 45
2019: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
2020: LD_ADDR_VAR 0 3
2024: PUSH
2025: LD_VAR 0 3
2029: PPUSH
2030: LD_VAR 0 2
2034: PPUSH
2035: CALL 40932 0 2
2039: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2040: LD_VAR 0 2
2044: PPUSH
2045: LD_INT 1
2047: PPUSH
2048: CALL_OW 233
// PlaceUnitArea ( un , americanSpawnArea , false ) ;
2052: LD_VAR 0 2
2056: PPUSH
2057: LD_INT 11
2059: PPUSH
2060: LD_INT 0
2062: PPUSH
2063: CALL_OW 49
// ComMoveXY ( un , 16 , 13 ) ;
2067: LD_VAR 0 2
2071: PPUSH
2072: LD_INT 16
2074: PPUSH
2075: LD_INT 13
2077: PPUSH
2078: CALL_OW 111
// wait ( 0 0$1 ) ;
2082: LD_INT 35
2084: PPUSH
2085: CALL_OW 67
// end ;
2089: GO 1947
2091: POP
2092: POP
// repeat wait ( 0 0$1 ) ;
2093: LD_INT 35
2095: PPUSH
2096: CALL_OW 67
// for i in tmp do
2100: LD_ADDR_VAR 0 1
2104: PUSH
2105: LD_VAR 0 3
2109: PUSH
2110: FOR_IN
2111: IFFALSE 2179
// if not IsOk ( i ) then
2113: LD_VAR 0 1
2117: PPUSH
2118: CALL_OW 302
2122: NOT
2123: IFFALSE 2143
// tmp := tmp diff i else
2125: LD_ADDR_VAR 0 3
2129: PUSH
2130: LD_VAR 0 3
2134: PUSH
2135: LD_VAR 0 1
2139: DIFF
2140: ST_TO_ADDR
2141: GO 2177
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
2143: LD_VAR 0 1
2147: PPUSH
2148: LD_INT 81
2150: PUSH
2151: LD_INT 1
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: PPUSH
2158: CALL_OW 69
2162: PPUSH
2163: LD_VAR 0 1
2167: PPUSH
2168: CALL_OW 74
2172: PPUSH
2173: CALL_OW 115
2177: GO 2110
2179: POP
2180: POP
// until not tmp ;
2181: LD_VAR 0 3
2185: NOT
2186: IFFALSE 2093
// end ;
2188: PPOPN 3
2190: END
// every 7 7$00 trigger not HexInfo ( 149 , 106 ) do var un ;
2191: LD_INT 149
2193: PPUSH
2194: LD_INT 106
2196: PPUSH
2197: CALL_OW 428
2201: NOT
2202: IFFALSE 2367
2204: GO 2206
2206: DISABLE
2207: LD_INT 0
2209: PPUSH
// begin enable ;
2210: ENABLE
// uc_side := 1 ;
2211: LD_ADDR_OWVAR 20
2215: PUSH
2216: LD_INT 1
2218: ST_TO_ADDR
// uc_nation := 1 ;
2219: LD_ADDR_OWVAR 21
2223: PUSH
2224: LD_INT 1
2226: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2227: LD_INT 5
2229: PPUSH
2230: LD_INT 3
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: LD_INT 12
2238: PPUSH
2239: LD_INT 100
2241: PPUSH
2242: CALL 7762 0 5
// un := CreateVehicle ;
2246: LD_ADDR_VAR 0 1
2250: PUSH
2251: CALL_OW 45
2255: ST_TO_ADDR
// PlaceUnitXY ( un , 149 , 106 , false ) ;
2256: LD_VAR 0 1
2260: PPUSH
2261: LD_INT 149
2263: PPUSH
2264: LD_INT 106
2266: PPUSH
2267: LD_INT 0
2269: PPUSH
2270: CALL_OW 48
// SetCargo ( un , mat_siberit , 100 ) ;
2274: LD_VAR 0 1
2278: PPUSH
2279: LD_INT 3
2281: PPUSH
2282: LD_INT 100
2284: PPUSH
2285: CALL_OW 290
// ComMoveXY ( un , 105 , 2 ) ;
2289: LD_VAR 0 1
2293: PPUSH
2294: LD_INT 105
2296: PPUSH
2297: LD_INT 2
2299: PPUSH
2300: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2304: LD_INT 35
2306: PPUSH
2307: CALL_OW 67
// if IsDead ( un ) or GetSide ( un ) <> 1 then
2311: LD_VAR 0 1
2315: PPUSH
2316: CALL_OW 301
2320: IFTRUE 2337
2322: PUSH
2323: LD_VAR 0 1
2327: PPUSH
2328: CALL_OW 255
2332: PUSH
2333: LD_INT 1
2335: NONEQUAL
2336: OR
2337: IFFALSE 2341
// exit ;
2339: GO 2367
// until IsAt ( un , 105 , 2 ) ;
2341: LD_VAR 0 1
2345: PPUSH
2346: LD_INT 105
2348: PPUSH
2349: LD_INT 2
2351: PPUSH
2352: CALL_OW 307
2356: IFFALSE 2304
// RemoveUnit ( un ) ;
2358: LD_VAR 0 1
2362: PPUSH
2363: CALL_OW 64
// end ; end_of_file
2367: PPOPN 1
2369: END
// export function Action ; begin
2370: LD_INT 0
2372: PPUSH
// CenterNowOnUnits ( allianceHack ) ;
2373: LD_EXP 2
2377: PPUSH
2378: CALL_OW 87
// ChangeMissionObjectives ( WT-Objectives-1 ) ;
2382: LD_STRING WT-Objectives-1
2384: PPUSH
2385: CALL_OW 337
// end ;
2389: LD_VAR 0 1
2393: RET
// every 0 0$2 trigger See ( 7 , allianceMechanic ) do
2394: LD_INT 7
2396: PPUSH
2397: LD_EXP 3
2401: PPUSH
2402: CALL_OW 292
2406: IFFALSE 2423
2408: GO 2410
2410: DISABLE
// SetSide ( allianceMechanic , 7 ) ;
2411: LD_EXP 3
2415: PPUSH
2416: LD_INT 7
2418: PPUSH
2419: CALL_OW 235
2423: END
// every 2 2$00 do
2424: GO 2426
2426: DISABLE
// PrepareReinforcements ( ) ;
2427: CALL 258 0 0
2431: END
// every 0 0$1 trigger not FindArtifact ( 2 ) do
2432: LD_INT 2
2434: PPUSH
2435: CALL_OW 469
2439: NOT
2440: IFFALSE 2455
2442: GO 2444
2444: DISABLE
// SetAreaMapShow ( endMissionArea , 1 ) ;
2445: LD_INT 8
2447: PPUSH
2448: LD_INT 1
2450: PPUSH
2451: CALL_OW 424
2455: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and not FindArtifact ( 2 ) do
2456: LD_INT 8
2458: PPUSH
2459: LD_INT 2
2461: PUSH
2462: LD_INT 34
2464: PUSH
2465: LD_INT 12
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PUSH
2472: LD_INT 34
2474: PUSH
2475: LD_INT 51
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: LIST
2486: PPUSH
2487: CALL_OW 70
2491: IFFALSE 2503
2493: PUSH
2494: LD_INT 2
2496: PPUSH
2497: CALL_OW 469
2501: NOT
2502: AND
2503: IFFALSE 2633
2505: GO 2507
2507: DISABLE
// begin AddMedal ( WT-med-1 , 1 ) ;
2508: LD_STRING WT-med-1
2510: PPUSH
2511: LD_INT 1
2513: PPUSH
2514: CALL_OW 101
// AddMedal ( WT-med-2 , [ - 1 , 1 ] [ ( IsOk ( allianceMechanic ) * ( GetSide ( allianceMechanic ) ) = 7 ) + 1 ] ) ;
2518: LD_STRING WT-med-2
2520: PPUSH
2521: LD_INT 1
2523: NEG
2524: PUSH
2525: LD_INT 1
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: PUSH
2532: LD_EXP 3
2536: PPUSH
2537: CALL_OW 302
2541: PUSH
2542: LD_EXP 3
2546: PPUSH
2547: CALL_OW 255
2551: MUL
2552: PUSH
2553: LD_INT 7
2555: EQUAL
2556: PUSH
2557: LD_INT 1
2559: PLUS
2560: ARRAY
2561: PPUSH
2562: CALL_OW 101
// AddMedal ( WT-med-3 , [ - 1 , 1 ] [ ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , us_double_laser ] ] ) >= 2 ) + 1 ] ) ;
2566: LD_STRING WT-med-3
2568: PPUSH
2569: LD_INT 1
2571: NEG
2572: PUSH
2573: LD_INT 1
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PUSH
2580: LD_INT 22
2582: PUSH
2583: LD_INT 7
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: PUSH
2590: LD_INT 34
2592: PUSH
2593: LD_INT 10
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PPUSH
2604: CALL_OW 69
2608: PUSH
2609: LD_INT 2
2611: GREATEREQUAL
2612: PUSH
2613: LD_INT 1
2615: PLUS
2616: ARRAY
2617: PPUSH
2618: CALL_OW 101
// GiveMedals ( WT-Main ) ;
2622: LD_STRING WT-Main
2624: PPUSH
2625: CALL_OW 102
// YouWin ;
2629: CALL_OW 103
// end ; end_of_file
2633: END
// on UnitGoesToRed ( un ) do begin if un in ruForces then
2634: LD_VAR 0 1
2638: PUSH
2639: LD_EXP 7
2643: IN
2644: IFFALSE 2662
// ruForces := ruForces diff un ;
2646: LD_ADDR_EXP 7
2650: PUSH
2651: LD_EXP 7
2655: PUSH
2656: LD_VAR 0 1
2660: DIFF
2661: ST_TO_ADDR
// end ;
2662: PPOPN 1
2664: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2665: LD_VAR 0 1
2669: PPUSH
2670: CALL 46286 0 1
// if un = allianceHack then
2674: LD_VAR 0 1
2678: PUSH
2679: LD_EXP 2
2683: EQUAL
2684: IFFALSE 2693
// YouLost ( WT-HackLost ) ;
2686: LD_STRING WT-HackLost
2688: PPUSH
2689: CALL_OW 104
// if un in ruForces then
2693: LD_VAR 0 1
2697: PUSH
2698: LD_EXP 7
2702: IN
2703: IFFALSE 2721
// ruForces := ruForces diff un ;
2705: LD_ADDR_EXP 7
2709: PUSH
2710: LD_EXP 7
2714: PUSH
2715: LD_VAR 0 1
2719: DIFF
2720: ST_TO_ADDR
// end ;
2721: PPOPN 1
2723: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
2724: LD_VAR 0 1
2728: PPUSH
2729: LD_VAR 0 2
2733: PPUSH
2734: CALL 46344 0 2
// if GetSide ( vehicle ) = 3 then
2738: LD_VAR 0 1
2742: PPUSH
2743: CALL_OW 255
2747: PUSH
2748: LD_INT 3
2750: EQUAL
2751: IFFALSE 2773
// ruForces := Join ( ruForces , vehicle ) ;
2753: LD_ADDR_EXP 7
2757: PUSH
2758: LD_EXP 7
2762: PPUSH
2763: LD_VAR 0 1
2767: PPUSH
2768: CALL 40932 0 2
2772: ST_TO_ADDR
// end ; end_of_file
2773: PPOPN 2
2775: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2776: LD_INT 0
2778: PPUSH
2779: PPUSH
// if exist_mode then
2780: LD_VAR 0 2
2784: IFFALSE 2830
// begin unit := CreateCharacter ( prefix & ident ) ;
2786: LD_ADDR_VAR 0 5
2790: PUSH
2791: LD_VAR 0 3
2795: PUSH
2796: LD_VAR 0 1
2800: STR
2801: PPUSH
2802: CALL_OW 34
2806: ST_TO_ADDR
// if unit then
2807: LD_VAR 0 5
2811: IFFALSE 2828
// DeleteCharacters ( prefix & ident ) ;
2813: LD_VAR 0 3
2817: PUSH
2818: LD_VAR 0 1
2822: STR
2823: PPUSH
2824: CALL_OW 40
// end else
2828: GO 2845
// unit := NewCharacter ( ident ) ;
2830: LD_ADDR_VAR 0 5
2834: PUSH
2835: LD_VAR 0 1
2839: PPUSH
2840: CALL_OW 25
2844: ST_TO_ADDR
// result := unit ;
2845: LD_ADDR_VAR 0 4
2849: PUSH
2850: LD_VAR 0 5
2854: ST_TO_ADDR
// end ;
2855: LD_VAR 0 4
2859: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
2860: LD_INT 0
2862: PPUSH
2863: PPUSH
// if exist_mode then
2864: LD_VAR 0 2
2868: IFFALSE 2893
// unit := CreateCharacter ( prefix & ident ) else
2870: LD_ADDR_VAR 0 5
2874: PUSH
2875: LD_VAR 0 3
2879: PUSH
2880: LD_VAR 0 1
2884: STR
2885: PPUSH
2886: CALL_OW 34
2890: ST_TO_ADDR
2891: GO 2908
// unit := NewCharacter ( ident ) ;
2893: LD_ADDR_VAR 0 5
2897: PUSH
2898: LD_VAR 0 1
2902: PPUSH
2903: CALL_OW 25
2907: ST_TO_ADDR
// result := unit ;
2908: LD_ADDR_VAR 0 4
2912: PUSH
2913: LD_VAR 0 5
2917: ST_TO_ADDR
// end ;
2918: LD_VAR 0 4
2922: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2923: LD_INT 0
2925: PPUSH
2926: PPUSH
// if not side or not nation then
2927: LD_VAR 0 1
2931: NOT
2932: IFTRUE 2941
2934: PUSH
2935: LD_VAR 0 2
2939: NOT
2940: OR
2941: IFFALSE 2945
// exit ;
2943: GO 3739
// case nation of nation_american :
2945: LD_VAR 0 2
2949: PUSH
2950: LD_INT 1
2952: DOUBLE
2953: EQUAL
2954: IFTRUE 2958
2956: GO 3180
2958: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
2959: LD_ADDR_VAR 0 4
2963: PUSH
2964: LD_INT 35
2966: PUSH
2967: LD_INT 45
2969: PUSH
2970: LD_INT 46
2972: PUSH
2973: LD_INT 47
2975: PUSH
2976: LD_INT 82
2978: PUSH
2979: LD_INT 83
2981: PUSH
2982: LD_INT 84
2984: PUSH
2985: LD_INT 85
2987: PUSH
2988: LD_INT 86
2990: PUSH
2991: LD_INT 1
2993: PUSH
2994: LD_INT 2
2996: PUSH
2997: LD_INT 6
2999: PUSH
3000: LD_INT 15
3002: PUSH
3003: LD_INT 16
3005: PUSH
3006: LD_INT 7
3008: PUSH
3009: LD_INT 12
3011: PUSH
3012: LD_INT 13
3014: PUSH
3015: LD_INT 10
3017: PUSH
3018: LD_INT 14
3020: PUSH
3021: LD_INT 20
3023: PUSH
3024: LD_INT 21
3026: PUSH
3027: LD_INT 22
3029: PUSH
3030: LD_INT 25
3032: PUSH
3033: LD_INT 32
3035: PUSH
3036: LD_INT 27
3038: PUSH
3039: LD_INT 36
3041: PUSH
3042: LD_INT 69
3044: PUSH
3045: LD_INT 39
3047: PUSH
3048: LD_INT 34
3050: PUSH
3051: LD_INT 40
3053: PUSH
3054: LD_INT 48
3056: PUSH
3057: LD_INT 49
3059: PUSH
3060: LD_INT 50
3062: PUSH
3063: LD_INT 51
3065: PUSH
3066: LD_INT 52
3068: PUSH
3069: LD_INT 53
3071: PUSH
3072: LD_INT 54
3074: PUSH
3075: LD_INT 55
3077: PUSH
3078: LD_INT 56
3080: PUSH
3081: LD_INT 57
3083: PUSH
3084: LD_INT 58
3086: PUSH
3087: LD_INT 59
3089: PUSH
3090: LD_INT 60
3092: PUSH
3093: LD_INT 61
3095: PUSH
3096: LD_INT 62
3098: PUSH
3099: LD_INT 80
3101: PUSH
3102: LD_INT 82
3104: PUSH
3105: LD_INT 83
3107: PUSH
3108: LD_INT 84
3110: PUSH
3111: LD_INT 85
3113: PUSH
3114: LD_INT 86
3116: PUSH
3117: LD_INT 90
3119: PUSH
3120: LD_INT 93
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: LIST
3152: LIST
3153: LIST
3154: LIST
3155: LIST
3156: LIST
3157: LIST
3158: LIST
3159: LIST
3160: LIST
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: ST_TO_ADDR
3178: GO 3661
3180: LD_INT 2
3182: DOUBLE
3183: EQUAL
3184: IFTRUE 3188
3186: GO 3422
3188: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
3189: LD_ADDR_VAR 0 4
3193: PUSH
3194: LD_INT 35
3196: PUSH
3197: LD_INT 45
3199: PUSH
3200: LD_INT 46
3202: PUSH
3203: LD_INT 47
3205: PUSH
3206: LD_INT 82
3208: PUSH
3209: LD_INT 83
3211: PUSH
3212: LD_INT 84
3214: PUSH
3215: LD_INT 85
3217: PUSH
3218: LD_INT 87
3220: PUSH
3221: LD_INT 70
3223: PUSH
3224: LD_INT 1
3226: PUSH
3227: LD_INT 11
3229: PUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 4
3235: PUSH
3236: LD_INT 5
3238: PUSH
3239: LD_INT 6
3241: PUSH
3242: LD_INT 15
3244: PUSH
3245: LD_INT 18
3247: PUSH
3248: LD_INT 7
3250: PUSH
3251: LD_INT 17
3253: PUSH
3254: LD_INT 8
3256: PUSH
3257: LD_INT 20
3259: PUSH
3260: LD_INT 21
3262: PUSH
3263: LD_INT 22
3265: PUSH
3266: LD_INT 72
3268: PUSH
3269: LD_INT 26
3271: PUSH
3272: LD_INT 69
3274: PUSH
3275: LD_INT 39
3277: PUSH
3278: LD_INT 40
3280: PUSH
3281: LD_INT 41
3283: PUSH
3284: LD_INT 42
3286: PUSH
3287: LD_INT 43
3289: PUSH
3290: LD_INT 48
3292: PUSH
3293: LD_INT 49
3295: PUSH
3296: LD_INT 50
3298: PUSH
3299: LD_INT 51
3301: PUSH
3302: LD_INT 52
3304: PUSH
3305: LD_INT 53
3307: PUSH
3308: LD_INT 54
3310: PUSH
3311: LD_INT 55
3313: PUSH
3314: LD_INT 56
3316: PUSH
3317: LD_INT 60
3319: PUSH
3320: LD_INT 61
3322: PUSH
3323: LD_INT 62
3325: PUSH
3326: LD_INT 66
3328: PUSH
3329: LD_INT 67
3331: PUSH
3332: LD_INT 68
3334: PUSH
3335: LD_INT 81
3337: PUSH
3338: LD_INT 82
3340: PUSH
3341: LD_INT 83
3343: PUSH
3344: LD_INT 84
3346: PUSH
3347: LD_INT 85
3349: PUSH
3350: LD_INT 87
3352: PUSH
3353: LD_INT 88
3355: PUSH
3356: LD_INT 92
3358: PUSH
3359: LD_INT 94
3361: PUSH
3362: EMPTY
3363: LIST
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: LIST
3370: LIST
3371: LIST
3372: LIST
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: ST_TO_ADDR
3420: GO 3661
3422: LD_INT 3
3424: DOUBLE
3425: EQUAL
3426: IFTRUE 3430
3428: GO 3660
3430: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
3431: LD_ADDR_VAR 0 4
3435: PUSH
3436: LD_INT 46
3438: PUSH
3439: LD_INT 47
3441: PUSH
3442: LD_INT 1
3444: PUSH
3445: LD_INT 2
3447: PUSH
3448: LD_INT 82
3450: PUSH
3451: LD_INT 83
3453: PUSH
3454: LD_INT 84
3456: PUSH
3457: LD_INT 85
3459: PUSH
3460: LD_INT 86
3462: PUSH
3463: LD_INT 11
3465: PUSH
3466: LD_INT 9
3468: PUSH
3469: LD_INT 20
3471: PUSH
3472: LD_INT 19
3474: PUSH
3475: LD_INT 21
3477: PUSH
3478: LD_INT 24
3480: PUSH
3481: LD_INT 22
3483: PUSH
3484: LD_INT 25
3486: PUSH
3487: LD_INT 28
3489: PUSH
3490: LD_INT 29
3492: PUSH
3493: LD_INT 30
3495: PUSH
3496: LD_INT 31
3498: PUSH
3499: LD_INT 37
3501: PUSH
3502: LD_INT 38
3504: PUSH
3505: LD_INT 32
3507: PUSH
3508: LD_INT 27
3510: PUSH
3511: LD_INT 33
3513: PUSH
3514: LD_INT 69
3516: PUSH
3517: LD_INT 39
3519: PUSH
3520: LD_INT 34
3522: PUSH
3523: LD_INT 40
3525: PUSH
3526: LD_INT 71
3528: PUSH
3529: LD_INT 23
3531: PUSH
3532: LD_INT 44
3534: PUSH
3535: LD_INT 48
3537: PUSH
3538: LD_INT 49
3540: PUSH
3541: LD_INT 50
3543: PUSH
3544: LD_INT 51
3546: PUSH
3547: LD_INT 52
3549: PUSH
3550: LD_INT 53
3552: PUSH
3553: LD_INT 54
3555: PUSH
3556: LD_INT 55
3558: PUSH
3559: LD_INT 56
3561: PUSH
3562: LD_INT 57
3564: PUSH
3565: LD_INT 58
3567: PUSH
3568: LD_INT 59
3570: PUSH
3571: LD_INT 63
3573: PUSH
3574: LD_INT 64
3576: PUSH
3577: LD_INT 65
3579: PUSH
3580: LD_INT 82
3582: PUSH
3583: LD_INT 83
3585: PUSH
3586: LD_INT 84
3588: PUSH
3589: LD_INT 85
3591: PUSH
3592: LD_INT 86
3594: PUSH
3595: LD_INT 89
3597: PUSH
3598: LD_INT 91
3600: PUSH
3601: EMPTY
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: ST_TO_ADDR
3658: GO 3661
3660: POP
// if state > - 1 and state < 3 then
3661: LD_VAR 0 3
3665: PUSH
3666: LD_INT 1
3668: NEG
3669: GREATER
3670: IFFALSE 3682
3672: PUSH
3673: LD_VAR 0 3
3677: PUSH
3678: LD_INT 3
3680: LESS
3681: AND
3682: IFFALSE 3739
// for i in result do
3684: LD_ADDR_VAR 0 5
3688: PUSH
3689: LD_VAR 0 4
3693: PUSH
3694: FOR_IN
3695: IFFALSE 3737
// if GetTech ( i , side ) <> state then
3697: LD_VAR 0 5
3701: PPUSH
3702: LD_VAR 0 1
3706: PPUSH
3707: CALL_OW 321
3711: PUSH
3712: LD_VAR 0 3
3716: NONEQUAL
3717: IFFALSE 3735
// result := result diff i ;
3719: LD_ADDR_VAR 0 4
3723: PUSH
3724: LD_VAR 0 4
3728: PUSH
3729: LD_VAR 0 5
3733: DIFF
3734: ST_TO_ADDR
3735: GO 3694
3737: POP
3738: POP
// end ;
3739: LD_VAR 0 4
3743: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3744: LD_INT 0
3746: PPUSH
3747: PPUSH
3748: PPUSH
// result := true ;
3749: LD_ADDR_VAR 0 3
3753: PUSH
3754: LD_INT 1
3756: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3757: LD_ADDR_VAR 0 5
3761: PUSH
3762: LD_VAR 0 2
3766: PPUSH
3767: CALL_OW 480
3771: ST_TO_ADDR
// if not tmp then
3772: LD_VAR 0 5
3776: NOT
3777: IFFALSE 3781
// exit ;
3779: GO 3830
// for i in tmp do
3781: LD_ADDR_VAR 0 4
3785: PUSH
3786: LD_VAR 0 5
3790: PUSH
3791: FOR_IN
3792: IFFALSE 3828
// if GetTech ( i , side ) <> state_researched then
3794: LD_VAR 0 4
3798: PPUSH
3799: LD_VAR 0 1
3803: PPUSH
3804: CALL_OW 321
3808: PUSH
3809: LD_INT 2
3811: NONEQUAL
3812: IFFALSE 3826
// begin result := false ;
3814: LD_ADDR_VAR 0 3
3818: PUSH
3819: LD_INT 0
3821: ST_TO_ADDR
// exit ;
3822: POP
3823: POP
3824: GO 3830
// end ;
3826: GO 3791
3828: POP
3829: POP
// end ;
3830: LD_VAR 0 3
3834: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3835: LD_INT 0
3837: PPUSH
3838: PPUSH
3839: PPUSH
3840: PPUSH
3841: PPUSH
3842: PPUSH
3843: PPUSH
3844: PPUSH
3845: PPUSH
3846: PPUSH
3847: PPUSH
3848: PPUSH
3849: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3850: LD_VAR 0 1
3854: NOT
3855: IFTRUE 3872
3857: PUSH
3858: LD_VAR 0 1
3862: PPUSH
3863: CALL_OW 257
3867: PUSH
3868: LD_INT 9
3870: NONEQUAL
3871: OR
3872: IFFALSE 3876
// exit ;
3874: GO 4455
// side := GetSide ( unit ) ;
3876: LD_ADDR_VAR 0 9
3880: PUSH
3881: LD_VAR 0 1
3885: PPUSH
3886: CALL_OW 255
3890: ST_TO_ADDR
// tech_space := tech_spacanom ;
3891: LD_ADDR_VAR 0 12
3895: PUSH
3896: LD_INT 29
3898: ST_TO_ADDR
// tech_time := tech_taurad ;
3899: LD_ADDR_VAR 0 13
3903: PUSH
3904: LD_INT 28
3906: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3907: LD_ADDR_VAR 0 11
3911: PUSH
3912: LD_VAR 0 1
3916: PPUSH
3917: CALL_OW 310
3921: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3922: LD_VAR 0 11
3926: PPUSH
3927: CALL_OW 247
3931: PUSH
3932: LD_INT 2
3934: EQUAL
3935: IFFALSE 3939
// exit ;
3937: GO 4455
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3939: LD_ADDR_VAR 0 8
3943: PUSH
3944: LD_INT 81
3946: PUSH
3947: LD_VAR 0 9
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: PUSH
3956: LD_INT 3
3958: PUSH
3959: LD_INT 21
3961: PUSH
3962: LD_INT 3
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PUSH
3969: EMPTY
3970: LIST
3971: LIST
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: PPUSH
3977: CALL_OW 69
3981: ST_TO_ADDR
// if not tmp then
3982: LD_VAR 0 8
3986: NOT
3987: IFFALSE 3991
// exit ;
3989: GO 4455
// if in_unit then
3991: LD_VAR 0 11
3995: IFFALSE 4019
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3997: LD_ADDR_VAR 0 10
4001: PUSH
4002: LD_VAR 0 8
4006: PPUSH
4007: LD_VAR 0 11
4011: PPUSH
4012: CALL_OW 74
4016: ST_TO_ADDR
4017: GO 4039
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4019: LD_ADDR_VAR 0 10
4023: PUSH
4024: LD_VAR 0 8
4028: PPUSH
4029: LD_VAR 0 1
4033: PPUSH
4034: CALL_OW 74
4038: ST_TO_ADDR
// if not enemy then
4039: LD_VAR 0 10
4043: NOT
4044: IFFALSE 4048
// exit ;
4046: GO 4455
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4048: LD_VAR 0 11
4052: IFFALSE 4074
4054: PUSH
4055: LD_VAR 0 11
4059: PPUSH
4060: LD_VAR 0 10
4064: PPUSH
4065: CALL_OW 296
4069: PUSH
4070: LD_INT 13
4072: GREATER
4073: AND
4074: IFTRUE 4096
4076: PUSH
4077: LD_VAR 0 1
4081: PPUSH
4082: LD_VAR 0 10
4086: PPUSH
4087: CALL_OW 296
4091: PUSH
4092: LD_INT 12
4094: GREATER
4095: OR
4096: IFFALSE 4100
// exit ;
4098: GO 4455
// missile := [ 1 ] ;
4100: LD_ADDR_VAR 0 14
4104: PUSH
4105: LD_INT 1
4107: PUSH
4108: EMPTY
4109: LIST
4110: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4111: LD_VAR 0 9
4115: PPUSH
4116: LD_VAR 0 12
4120: PPUSH
4121: CALL_OW 325
4125: IFFALSE 4154
// missile := Replace ( missile , missile + 1 , 2 ) ;
4127: LD_ADDR_VAR 0 14
4131: PUSH
4132: LD_VAR 0 14
4136: PPUSH
4137: LD_VAR 0 14
4141: PUSH
4142: LD_INT 1
4144: PLUS
4145: PPUSH
4146: LD_INT 2
4148: PPUSH
4149: CALL_OW 1
4153: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4154: LD_VAR 0 9
4158: PPUSH
4159: LD_VAR 0 13
4163: PPUSH
4164: CALL_OW 325
4168: IFFALSE 4192
4170: PUSH
4171: LD_VAR 0 10
4175: PPUSH
4176: CALL_OW 255
4180: PPUSH
4181: LD_VAR 0 13
4185: PPUSH
4186: CALL_OW 325
4190: NOT
4191: AND
4192: IFFALSE 4221
// missile := Replace ( missile , missile + 1 , 3 ) ;
4194: LD_ADDR_VAR 0 14
4198: PUSH
4199: LD_VAR 0 14
4203: PPUSH
4204: LD_VAR 0 14
4208: PUSH
4209: LD_INT 1
4211: PLUS
4212: PPUSH
4213: LD_INT 3
4215: PPUSH
4216: CALL_OW 1
4220: ST_TO_ADDR
// if missile < 2 then
4221: LD_VAR 0 14
4225: PUSH
4226: LD_INT 2
4228: LESS
4229: IFFALSE 4233
// exit ;
4231: GO 4455
// x := GetX ( enemy ) ;
4233: LD_ADDR_VAR 0 4
4237: PUSH
4238: LD_VAR 0 10
4242: PPUSH
4243: CALL_OW 250
4247: ST_TO_ADDR
// y := GetY ( enemy ) ;
4248: LD_ADDR_VAR 0 5
4252: PUSH
4253: LD_VAR 0 10
4257: PPUSH
4258: CALL_OW 251
4262: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4263: LD_ADDR_VAR 0 6
4267: PUSH
4268: LD_VAR 0 4
4272: PUSH
4273: LD_INT 1
4275: NEG
4276: PPUSH
4277: LD_INT 1
4279: PPUSH
4280: CALL_OW 12
4284: PLUS
4285: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4286: LD_ADDR_VAR 0 7
4290: PUSH
4291: LD_VAR 0 5
4295: PUSH
4296: LD_INT 1
4298: NEG
4299: PPUSH
4300: LD_INT 1
4302: PPUSH
4303: CALL_OW 12
4307: PLUS
4308: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4309: LD_VAR 0 6
4313: PPUSH
4314: LD_VAR 0 7
4318: PPUSH
4319: CALL_OW 488
4323: NOT
4324: IFFALSE 4346
// begin _x := x ;
4326: LD_ADDR_VAR 0 6
4330: PUSH
4331: LD_VAR 0 4
4335: ST_TO_ADDR
// _y := y ;
4336: LD_ADDR_VAR 0 7
4340: PUSH
4341: LD_VAR 0 5
4345: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4346: LD_ADDR_VAR 0 3
4350: PUSH
4351: LD_INT 1
4353: PPUSH
4354: LD_VAR 0 14
4358: PPUSH
4359: CALL_OW 12
4363: ST_TO_ADDR
// case i of 1 :
4364: LD_VAR 0 3
4368: PUSH
4369: LD_INT 1
4371: DOUBLE
4372: EQUAL
4373: IFTRUE 4377
4375: GO 4394
4377: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4378: LD_VAR 0 1
4382: PPUSH
4383: LD_VAR 0 10
4387: PPUSH
4388: CALL_OW 115
4392: GO 4455
4394: LD_INT 2
4396: DOUBLE
4397: EQUAL
4398: IFTRUE 4402
4400: GO 4424
4402: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4403: LD_VAR 0 1
4407: PPUSH
4408: LD_VAR 0 6
4412: PPUSH
4413: LD_VAR 0 7
4417: PPUSH
4418: CALL_OW 153
4422: GO 4455
4424: LD_INT 3
4426: DOUBLE
4427: EQUAL
4428: IFTRUE 4432
4430: GO 4454
4432: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4433: LD_VAR 0 1
4437: PPUSH
4438: LD_VAR 0 6
4442: PPUSH
4443: LD_VAR 0 7
4447: PPUSH
4448: CALL_OW 154
4452: GO 4455
4454: POP
// end ;
4455: LD_VAR 0 2
4459: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4460: LD_INT 0
4462: PPUSH
4463: PPUSH
4464: PPUSH
4465: PPUSH
4466: PPUSH
4467: PPUSH
// if not unit or not building then
4468: LD_VAR 0 1
4472: NOT
4473: IFTRUE 4482
4475: PUSH
4476: LD_VAR 0 2
4480: NOT
4481: OR
4482: IFFALSE 4486
// exit ;
4484: GO 4644
// x := GetX ( building ) ;
4486: LD_ADDR_VAR 0 5
4490: PUSH
4491: LD_VAR 0 2
4495: PPUSH
4496: CALL_OW 250
4500: ST_TO_ADDR
// y := GetY ( building ) ;
4501: LD_ADDR_VAR 0 6
4505: PUSH
4506: LD_VAR 0 2
4510: PPUSH
4511: CALL_OW 251
4515: ST_TO_ADDR
// for i := 0 to 5 do
4516: LD_ADDR_VAR 0 4
4520: PUSH
4521: DOUBLE
4522: LD_INT 0
4524: DEC
4525: ST_TO_ADDR
4526: LD_INT 5
4528: PUSH
4529: FOR_TO
4530: IFFALSE 4642
// begin _x := ShiftX ( x , i , 3 ) ;
4532: LD_ADDR_VAR 0 7
4536: PUSH
4537: LD_VAR 0 5
4541: PPUSH
4542: LD_VAR 0 4
4546: PPUSH
4547: LD_INT 3
4549: PPUSH
4550: CALL_OW 272
4554: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4555: LD_ADDR_VAR 0 8
4559: PUSH
4560: LD_VAR 0 6
4564: PPUSH
4565: LD_VAR 0 4
4569: PPUSH
4570: LD_INT 3
4572: PPUSH
4573: CALL_OW 273
4577: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4578: LD_VAR 0 7
4582: PPUSH
4583: LD_VAR 0 8
4587: PPUSH
4588: CALL_OW 488
4592: NOT
4593: IFFALSE 4597
// continue ;
4595: GO 4529
// if HexInfo ( _x , _y ) = 0 then
4597: LD_VAR 0 7
4601: PPUSH
4602: LD_VAR 0 8
4606: PPUSH
4607: CALL_OW 428
4611: PUSH
4612: LD_INT 0
4614: EQUAL
4615: IFFALSE 4640
// begin ComMoveXY ( unit , _x , _y ) ;
4617: LD_VAR 0 1
4621: PPUSH
4622: LD_VAR 0 7
4626: PPUSH
4627: LD_VAR 0 8
4631: PPUSH
4632: CALL_OW 111
// exit ;
4636: POP
4637: POP
4638: GO 4644
// end ; end ;
4640: GO 4529
4642: POP
4643: POP
// end ;
4644: LD_VAR 0 3
4648: RET
// export function ScanBase ( side , base_area ) ; begin
4649: LD_INT 0
4651: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4652: LD_ADDR_VAR 0 3
4656: PUSH
4657: LD_VAR 0 2
4661: PPUSH
4662: LD_INT 81
4664: PUSH
4665: LD_VAR 0 1
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: PPUSH
4674: CALL_OW 70
4678: ST_TO_ADDR
// end ;
4679: LD_VAR 0 3
4683: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4684: LD_INT 0
4686: PPUSH
4687: PPUSH
4688: PPUSH
4689: PPUSH
// result := false ;
4690: LD_ADDR_VAR 0 2
4694: PUSH
4695: LD_INT 0
4697: ST_TO_ADDR
// side := GetSide ( unit ) ;
4698: LD_ADDR_VAR 0 3
4702: PUSH
4703: LD_VAR 0 1
4707: PPUSH
4708: CALL_OW 255
4712: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4713: LD_ADDR_VAR 0 4
4717: PUSH
4718: LD_VAR 0 1
4722: PPUSH
4723: CALL_OW 248
4727: ST_TO_ADDR
// case nat of 1 :
4728: LD_VAR 0 4
4732: PUSH
4733: LD_INT 1
4735: DOUBLE
4736: EQUAL
4737: IFTRUE 4741
4739: GO 4752
4741: POP
// tech := tech_lassight ; 2 :
4742: LD_ADDR_VAR 0 5
4746: PUSH
4747: LD_INT 12
4749: ST_TO_ADDR
4750: GO 4791
4752: LD_INT 2
4754: DOUBLE
4755: EQUAL
4756: IFTRUE 4760
4758: GO 4771
4760: POP
// tech := tech_mortar ; 3 :
4761: LD_ADDR_VAR 0 5
4765: PUSH
4766: LD_INT 41
4768: ST_TO_ADDR
4769: GO 4791
4771: LD_INT 3
4773: DOUBLE
4774: EQUAL
4775: IFTRUE 4779
4777: GO 4790
4779: POP
// tech := tech_bazooka ; end ;
4780: LD_ADDR_VAR 0 5
4784: PUSH
4785: LD_INT 44
4787: ST_TO_ADDR
4788: GO 4791
4790: POP
// if Researched ( side , tech ) then
4791: LD_VAR 0 3
4795: PPUSH
4796: LD_VAR 0 5
4800: PPUSH
4801: CALL_OW 325
4805: IFFALSE 4832
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4807: LD_ADDR_VAR 0 2
4811: PUSH
4812: LD_INT 5
4814: PUSH
4815: LD_INT 8
4817: PUSH
4818: LD_INT 9
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: LIST
4825: PUSH
4826: LD_VAR 0 4
4830: ARRAY
4831: ST_TO_ADDR
// end ;
4832: LD_VAR 0 2
4836: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4837: LD_INT 0
4839: PPUSH
4840: PPUSH
4841: PPUSH
// if not mines then
4842: LD_VAR 0 2
4846: NOT
4847: IFFALSE 4851
// exit ;
4849: GO 4995
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4851: LD_ADDR_VAR 0 5
4855: PUSH
4856: LD_INT 81
4858: PUSH
4859: LD_VAR 0 1
4863: PUSH
4864: EMPTY
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 3
4870: PUSH
4871: LD_INT 21
4873: PUSH
4874: LD_INT 3
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PPUSH
4889: CALL_OW 69
4893: ST_TO_ADDR
// for i in mines do
4894: LD_ADDR_VAR 0 4
4898: PUSH
4899: LD_VAR 0 2
4903: PUSH
4904: FOR_IN
4905: IFFALSE 4993
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4907: LD_VAR 0 4
4911: PUSH
4912: LD_INT 1
4914: ARRAY
4915: PPUSH
4916: LD_VAR 0 4
4920: PUSH
4921: LD_INT 2
4923: ARRAY
4924: PPUSH
4925: CALL_OW 458
4929: NOT
4930: IFFALSE 4934
// continue ;
4932: GO 4904
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4934: LD_VAR 0 4
4938: PUSH
4939: LD_INT 1
4941: ARRAY
4942: PPUSH
4943: LD_VAR 0 4
4947: PUSH
4948: LD_INT 2
4950: ARRAY
4951: PPUSH
4952: CALL_OW 428
4956: PUSH
4957: LD_VAR 0 5
4961: IN
4962: IFFALSE 4991
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4964: LD_VAR 0 4
4968: PUSH
4969: LD_INT 1
4971: ARRAY
4972: PPUSH
4973: LD_VAR 0 4
4977: PUSH
4978: LD_INT 2
4980: ARRAY
4981: PPUSH
4982: LD_VAR 0 1
4986: PPUSH
4987: CALL_OW 456
// end ;
4991: GO 4904
4993: POP
4994: POP
// end ;
4995: LD_VAR 0 3
4999: RET
// export function Count ( array ) ; begin
5000: LD_INT 0
5002: PPUSH
// result := array + 0 ;
5003: LD_ADDR_VAR 0 2
5007: PUSH
5008: LD_VAR 0 1
5012: PUSH
5013: LD_INT 0
5015: PLUS
5016: ST_TO_ADDR
// end ;
5017: LD_VAR 0 2
5021: RET
// export function IsEmpty ( building ) ; begin
5022: LD_INT 0
5024: PPUSH
// if not building then
5025: LD_VAR 0 1
5029: NOT
5030: IFFALSE 5034
// exit ;
5032: GO 5077
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5034: LD_ADDR_VAR 0 2
5038: PUSH
5039: LD_VAR 0 1
5043: PUSH
5044: LD_INT 22
5046: PUSH
5047: LD_VAR 0 1
5051: PPUSH
5052: CALL_OW 255
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: LD_INT 58
5063: PUSH
5064: EMPTY
5065: LIST
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PPUSH
5071: CALL_OW 69
5075: IN
5076: ST_TO_ADDR
// end ;
5077: LD_VAR 0 2
5081: RET
// export function IsNotFull ( building ) ; var places ; begin
5082: LD_INT 0
5084: PPUSH
5085: PPUSH
// if not building then
5086: LD_VAR 0 1
5090: NOT
5091: IFFALSE 5095
// exit ;
5093: GO 5123
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5095: LD_ADDR_VAR 0 2
5099: PUSH
5100: LD_VAR 0 1
5104: PPUSH
5105: LD_INT 3
5107: PUSH
5108: LD_INT 62
5110: PUSH
5111: EMPTY
5112: LIST
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PPUSH
5118: CALL_OW 72
5122: ST_TO_ADDR
// end ;
5123: LD_VAR 0 2
5127: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5128: LD_INT 0
5130: PPUSH
5131: PPUSH
5132: PPUSH
5133: PPUSH
// tmp := [ ] ;
5134: LD_ADDR_VAR 0 3
5138: PUSH
5139: EMPTY
5140: ST_TO_ADDR
// list := [ ] ;
5141: LD_ADDR_VAR 0 5
5145: PUSH
5146: EMPTY
5147: ST_TO_ADDR
// for i = 16 to 25 do
5148: LD_ADDR_VAR 0 4
5152: PUSH
5153: DOUBLE
5154: LD_INT 16
5156: DEC
5157: ST_TO_ADDR
5158: LD_INT 25
5160: PUSH
5161: FOR_TO
5162: IFFALSE 5235
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5164: LD_ADDR_VAR 0 3
5168: PUSH
5169: LD_VAR 0 3
5173: PUSH
5174: LD_INT 22
5176: PUSH
5177: LD_VAR 0 1
5181: PPUSH
5182: CALL_OW 255
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: PUSH
5191: LD_INT 91
5193: PUSH
5194: LD_VAR 0 1
5198: PUSH
5199: LD_INT 6
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: LIST
5206: PUSH
5207: LD_INT 30
5209: PUSH
5210: LD_VAR 0 4
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: LIST
5223: PUSH
5224: EMPTY
5225: LIST
5226: PPUSH
5227: CALL_OW 69
5231: ADD
5232: ST_TO_ADDR
5233: GO 5161
5235: POP
5236: POP
// for i = 1 to tmp do
5237: LD_ADDR_VAR 0 4
5241: PUSH
5242: DOUBLE
5243: LD_INT 1
5245: DEC
5246: ST_TO_ADDR
5247: LD_VAR 0 3
5251: PUSH
5252: FOR_TO
5253: IFFALSE 5341
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5255: LD_ADDR_VAR 0 5
5259: PUSH
5260: LD_VAR 0 5
5264: PUSH
5265: LD_VAR 0 3
5269: PUSH
5270: LD_VAR 0 4
5274: ARRAY
5275: PPUSH
5276: CALL_OW 266
5280: PUSH
5281: LD_VAR 0 3
5285: PUSH
5286: LD_VAR 0 4
5290: ARRAY
5291: PPUSH
5292: CALL_OW 250
5296: PUSH
5297: LD_VAR 0 3
5301: PUSH
5302: LD_VAR 0 4
5306: ARRAY
5307: PPUSH
5308: CALL_OW 251
5312: PUSH
5313: LD_VAR 0 3
5317: PUSH
5318: LD_VAR 0 4
5322: ARRAY
5323: PPUSH
5324: CALL_OW 254
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: PUSH
5335: EMPTY
5336: LIST
5337: ADD
5338: ST_TO_ADDR
5339: GO 5252
5341: POP
5342: POP
// result := list ;
5343: LD_ADDR_VAR 0 2
5347: PUSH
5348: LD_VAR 0 5
5352: ST_TO_ADDR
// end ;
5353: LD_VAR 0 2
5357: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5358: LD_INT 0
5360: PPUSH
5361: PPUSH
5362: PPUSH
5363: PPUSH
5364: PPUSH
5365: PPUSH
5366: PPUSH
// if not factory then
5367: LD_VAR 0 1
5371: NOT
5372: IFFALSE 5376
// exit ;
5374: GO 5979
// if control = control_apeman then
5376: LD_VAR 0 4
5380: PUSH
5381: LD_INT 5
5383: EQUAL
5384: IFFALSE 5493
// begin tmp := UnitsInside ( factory ) ;
5386: LD_ADDR_VAR 0 8
5390: PUSH
5391: LD_VAR 0 1
5395: PPUSH
5396: CALL_OW 313
5400: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5401: LD_VAR 0 8
5405: PPUSH
5406: LD_INT 25
5408: PUSH
5409: LD_INT 12
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: PPUSH
5416: CALL_OW 72
5420: NOT
5421: IFFALSE 5431
// control := control_manual ;
5423: LD_ADDR_VAR 0 4
5427: PUSH
5428: LD_INT 1
5430: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5431: LD_ADDR_VAR 0 8
5435: PUSH
5436: LD_VAR 0 1
5440: PPUSH
5441: CALL 5128 0 1
5445: ST_TO_ADDR
// if tmp then
5446: LD_VAR 0 8
5450: IFFALSE 5493
// begin for i in tmp do
5452: LD_ADDR_VAR 0 7
5456: PUSH
5457: LD_VAR 0 8
5461: PUSH
5462: FOR_IN
5463: IFFALSE 5491
// if i [ 1 ] = b_ext_radio then
5465: LD_VAR 0 7
5469: PUSH
5470: LD_INT 1
5472: ARRAY
5473: PUSH
5474: LD_INT 22
5476: EQUAL
5477: IFFALSE 5489
// begin control := control_remote ;
5479: LD_ADDR_VAR 0 4
5483: PUSH
5484: LD_INT 2
5486: ST_TO_ADDR
// break ;
5487: GO 5491
// end ;
5489: GO 5462
5491: POP
5492: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5493: LD_VAR 0 1
5497: PPUSH
5498: LD_VAR 0 2
5502: PPUSH
5503: LD_VAR 0 3
5507: PPUSH
5508: LD_VAR 0 4
5512: PPUSH
5513: LD_VAR 0 5
5517: PPUSH
5518: CALL_OW 448
5522: IFFALSE 5557
// begin result := [ chassis , engine , control , weapon ] ;
5524: LD_ADDR_VAR 0 6
5528: PUSH
5529: LD_VAR 0 2
5533: PUSH
5534: LD_VAR 0 3
5538: PUSH
5539: LD_VAR 0 4
5543: PUSH
5544: LD_VAR 0 5
5548: PUSH
5549: EMPTY
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: ST_TO_ADDR
// exit ;
5555: GO 5979
// end ; _chassis := AvailableChassisList ( factory ) ;
5557: LD_ADDR_VAR 0 9
5561: PUSH
5562: LD_VAR 0 1
5566: PPUSH
5567: CALL_OW 475
5571: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5572: LD_ADDR_VAR 0 11
5576: PUSH
5577: LD_VAR 0 1
5581: PPUSH
5582: CALL_OW 476
5586: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5587: LD_ADDR_VAR 0 12
5591: PUSH
5592: LD_VAR 0 1
5596: PPUSH
5597: CALL_OW 477
5601: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5602: LD_ADDR_VAR 0 10
5606: PUSH
5607: LD_VAR 0 1
5611: PPUSH
5612: CALL_OW 478
5616: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5617: LD_VAR 0 9
5621: NOT
5622: IFTRUE 5631
5624: PUSH
5625: LD_VAR 0 11
5629: NOT
5630: OR
5631: IFTRUE 5640
5633: PUSH
5634: LD_VAR 0 12
5638: NOT
5639: OR
5640: IFTRUE 5649
5642: PUSH
5643: LD_VAR 0 10
5647: NOT
5648: OR
5649: IFFALSE 5684
// begin result := [ chassis , engine , control , weapon ] ;
5651: LD_ADDR_VAR 0 6
5655: PUSH
5656: LD_VAR 0 2
5660: PUSH
5661: LD_VAR 0 3
5665: PUSH
5666: LD_VAR 0 4
5670: PUSH
5671: LD_VAR 0 5
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: ST_TO_ADDR
// exit ;
5682: GO 5979
// end ; if not chassis in _chassis then
5684: LD_VAR 0 2
5688: PUSH
5689: LD_VAR 0 9
5693: IN
5694: NOT
5695: IFFALSE 5721
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5697: LD_ADDR_VAR 0 2
5701: PUSH
5702: LD_VAR 0 9
5706: PUSH
5707: LD_INT 1
5709: PPUSH
5710: LD_VAR 0 9
5714: PPUSH
5715: CALL_OW 12
5719: ARRAY
5720: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5721: LD_VAR 0 2
5725: PPUSH
5726: LD_VAR 0 3
5730: PPUSH
5731: CALL 5984 0 2
5735: NOT
5736: IFFALSE 5797
// repeat engine := _engine [ 1 ] ;
5738: LD_ADDR_VAR 0 3
5742: PUSH
5743: LD_VAR 0 11
5747: PUSH
5748: LD_INT 1
5750: ARRAY
5751: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5752: LD_ADDR_VAR 0 11
5756: PUSH
5757: LD_VAR 0 11
5761: PPUSH
5762: LD_INT 1
5764: PPUSH
5765: CALL_OW 3
5769: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5770: LD_VAR 0 2
5774: PPUSH
5775: LD_VAR 0 3
5779: PPUSH
5780: CALL 5984 0 2
5784: IFTRUE 5795
5786: PUSH
5787: LD_VAR 0 11
5791: PUSH
5792: EMPTY
5793: EQUAL
5794: OR
5795: IFFALSE 5738
// if not control in _control then
5797: LD_VAR 0 4
5801: PUSH
5802: LD_VAR 0 12
5806: IN
5807: NOT
5808: IFFALSE 5834
// control := _control [ rand ( 1 , _control ) ] ;
5810: LD_ADDR_VAR 0 4
5814: PUSH
5815: LD_VAR 0 12
5819: PUSH
5820: LD_INT 1
5822: PPUSH
5823: LD_VAR 0 12
5827: PPUSH
5828: CALL_OW 12
5832: ARRAY
5833: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5834: LD_VAR 0 2
5838: PPUSH
5839: LD_VAR 0 5
5843: PPUSH
5844: CALL 6206 0 2
5848: NOT
5849: IFFALSE 5910
// repeat weapon := _weapon [ 1 ] ;
5851: LD_ADDR_VAR 0 5
5855: PUSH
5856: LD_VAR 0 10
5860: PUSH
5861: LD_INT 1
5863: ARRAY
5864: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5865: LD_ADDR_VAR 0 10
5869: PUSH
5870: LD_VAR 0 10
5874: PPUSH
5875: LD_INT 1
5877: PPUSH
5878: CALL_OW 3
5882: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5883: LD_VAR 0 2
5887: PPUSH
5888: LD_VAR 0 5
5892: PPUSH
5893: CALL 6206 0 2
5897: IFTRUE 5908
5899: PUSH
5900: LD_VAR 0 10
5904: PUSH
5905: EMPTY
5906: EQUAL
5907: OR
5908: IFFALSE 5851
// result := [ ] ;
5910: LD_ADDR_VAR 0 6
5914: PUSH
5915: EMPTY
5916: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5917: LD_VAR 0 1
5921: PPUSH
5922: LD_VAR 0 2
5926: PPUSH
5927: LD_VAR 0 3
5931: PPUSH
5932: LD_VAR 0 4
5936: PPUSH
5937: LD_VAR 0 5
5941: PPUSH
5942: CALL_OW 448
5946: IFFALSE 5979
// result := [ chassis , engine , control , weapon ] ;
5948: LD_ADDR_VAR 0 6
5952: PUSH
5953: LD_VAR 0 2
5957: PUSH
5958: LD_VAR 0 3
5962: PUSH
5963: LD_VAR 0 4
5967: PUSH
5968: LD_VAR 0 5
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: ST_TO_ADDR
// end ;
5979: LD_VAR 0 6
5983: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5984: LD_INT 0
5986: PPUSH
// if not chassis or not engine then
5987: LD_VAR 0 1
5991: NOT
5992: IFTRUE 6001
5994: PUSH
5995: LD_VAR 0 2
5999: NOT
6000: OR
6001: IFFALSE 6005
// exit ;
6003: GO 6201
// case engine of engine_solar :
6005: LD_VAR 0 2
6009: PUSH
6010: LD_INT 2
6012: DOUBLE
6013: EQUAL
6014: IFTRUE 6018
6016: GO 6056
6018: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6019: LD_ADDR_VAR 0 3
6023: PUSH
6024: LD_INT 11
6026: PUSH
6027: LD_INT 12
6029: PUSH
6030: LD_INT 13
6032: PUSH
6033: LD_INT 14
6035: PUSH
6036: LD_INT 1
6038: PUSH
6039: LD_INT 2
6041: PUSH
6042: LD_INT 3
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: ST_TO_ADDR
6054: GO 6185
6056: LD_INT 1
6058: DOUBLE
6059: EQUAL
6060: IFTRUE 6064
6062: GO 6126
6064: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6065: LD_ADDR_VAR 0 3
6069: PUSH
6070: LD_INT 11
6072: PUSH
6073: LD_INT 12
6075: PUSH
6076: LD_INT 13
6078: PUSH
6079: LD_INT 14
6081: PUSH
6082: LD_INT 1
6084: PUSH
6085: LD_INT 2
6087: PUSH
6088: LD_INT 3
6090: PUSH
6091: LD_INT 4
6093: PUSH
6094: LD_INT 5
6096: PUSH
6097: LD_INT 21
6099: PUSH
6100: LD_INT 23
6102: PUSH
6103: LD_INT 22
6105: PUSH
6106: LD_INT 24
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: ST_TO_ADDR
6124: GO 6185
6126: LD_INT 3
6128: DOUBLE
6129: EQUAL
6130: IFTRUE 6134
6132: GO 6184
6134: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6135: LD_ADDR_VAR 0 3
6139: PUSH
6140: LD_INT 13
6142: PUSH
6143: LD_INT 14
6145: PUSH
6146: LD_INT 2
6148: PUSH
6149: LD_INT 3
6151: PUSH
6152: LD_INT 4
6154: PUSH
6155: LD_INT 5
6157: PUSH
6158: LD_INT 21
6160: PUSH
6161: LD_INT 22
6163: PUSH
6164: LD_INT 23
6166: PUSH
6167: LD_INT 24
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: ST_TO_ADDR
6182: GO 6185
6184: POP
// result := ( chassis in result ) ;
6185: LD_ADDR_VAR 0 3
6189: PUSH
6190: LD_VAR 0 1
6194: PUSH
6195: LD_VAR 0 3
6199: IN
6200: ST_TO_ADDR
// end ;
6201: LD_VAR 0 3
6205: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6206: LD_INT 0
6208: PPUSH
// if not chassis or not weapon then
6209: LD_VAR 0 1
6213: NOT
6214: IFTRUE 6223
6216: PUSH
6217: LD_VAR 0 2
6221: NOT
6222: OR
6223: IFFALSE 6227
// exit ;
6225: GO 7287
// case weapon of us_machine_gun :
6227: LD_VAR 0 2
6231: PUSH
6232: LD_INT 2
6234: DOUBLE
6235: EQUAL
6236: IFTRUE 6240
6238: GO 6270
6240: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6241: LD_ADDR_VAR 0 3
6245: PUSH
6246: LD_INT 1
6248: PUSH
6249: LD_INT 2
6251: PUSH
6252: LD_INT 3
6254: PUSH
6255: LD_INT 4
6257: PUSH
6258: LD_INT 5
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: LIST
6267: ST_TO_ADDR
6268: GO 7271
6270: LD_INT 3
6272: DOUBLE
6273: EQUAL
6274: IFTRUE 6278
6276: GO 6308
6278: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6279: LD_ADDR_VAR 0 3
6283: PUSH
6284: LD_INT 1
6286: PUSH
6287: LD_INT 2
6289: PUSH
6290: LD_INT 3
6292: PUSH
6293: LD_INT 4
6295: PUSH
6296: LD_INT 5
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: ST_TO_ADDR
6306: GO 7271
6308: LD_INT 11
6310: DOUBLE
6311: EQUAL
6312: IFTRUE 6316
6314: GO 6346
6316: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6317: LD_ADDR_VAR 0 3
6321: PUSH
6322: LD_INT 1
6324: PUSH
6325: LD_INT 2
6327: PUSH
6328: LD_INT 3
6330: PUSH
6331: LD_INT 4
6333: PUSH
6334: LD_INT 5
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: ST_TO_ADDR
6344: GO 7271
6346: LD_INT 4
6348: DOUBLE
6349: EQUAL
6350: IFTRUE 6354
6352: GO 6380
6354: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6355: LD_ADDR_VAR 0 3
6359: PUSH
6360: LD_INT 2
6362: PUSH
6363: LD_INT 3
6365: PUSH
6366: LD_INT 4
6368: PUSH
6369: LD_INT 5
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: ST_TO_ADDR
6378: GO 7271
6380: LD_INT 5
6382: DOUBLE
6383: EQUAL
6384: IFTRUE 6388
6386: GO 6414
6388: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6389: LD_ADDR_VAR 0 3
6393: PUSH
6394: LD_INT 2
6396: PUSH
6397: LD_INT 3
6399: PUSH
6400: LD_INT 4
6402: PUSH
6403: LD_INT 5
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: ST_TO_ADDR
6412: GO 7271
6414: LD_INT 9
6416: DOUBLE
6417: EQUAL
6418: IFTRUE 6422
6420: GO 6448
6422: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6423: LD_ADDR_VAR 0 3
6427: PUSH
6428: LD_INT 2
6430: PUSH
6431: LD_INT 3
6433: PUSH
6434: LD_INT 4
6436: PUSH
6437: LD_INT 5
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: ST_TO_ADDR
6446: GO 7271
6448: LD_INT 7
6450: DOUBLE
6451: EQUAL
6452: IFTRUE 6456
6454: GO 6482
6456: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6457: LD_ADDR_VAR 0 3
6461: PUSH
6462: LD_INT 2
6464: PUSH
6465: LD_INT 3
6467: PUSH
6468: LD_INT 4
6470: PUSH
6471: LD_INT 5
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: ST_TO_ADDR
6480: GO 7271
6482: LD_INT 12
6484: DOUBLE
6485: EQUAL
6486: IFTRUE 6490
6488: GO 6516
6490: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6491: LD_ADDR_VAR 0 3
6495: PUSH
6496: LD_INT 2
6498: PUSH
6499: LD_INT 3
6501: PUSH
6502: LD_INT 4
6504: PUSH
6505: LD_INT 5
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: ST_TO_ADDR
6514: GO 7271
6516: LD_INT 13
6518: DOUBLE
6519: EQUAL
6520: IFTRUE 6524
6522: GO 6550
6524: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6525: LD_ADDR_VAR 0 3
6529: PUSH
6530: LD_INT 2
6532: PUSH
6533: LD_INT 3
6535: PUSH
6536: LD_INT 4
6538: PUSH
6539: LD_INT 5
6541: PUSH
6542: EMPTY
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: ST_TO_ADDR
6548: GO 7271
6550: LD_INT 14
6552: DOUBLE
6553: EQUAL
6554: IFTRUE 6558
6556: GO 6576
6558: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6559: LD_ADDR_VAR 0 3
6563: PUSH
6564: LD_INT 4
6566: PUSH
6567: LD_INT 5
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: ST_TO_ADDR
6574: GO 7271
6576: LD_INT 6
6578: DOUBLE
6579: EQUAL
6580: IFTRUE 6584
6582: GO 6602
6584: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6585: LD_ADDR_VAR 0 3
6589: PUSH
6590: LD_INT 4
6592: PUSH
6593: LD_INT 5
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: ST_TO_ADDR
6600: GO 7271
6602: LD_INT 10
6604: DOUBLE
6605: EQUAL
6606: IFTRUE 6610
6608: GO 6628
6610: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6611: LD_ADDR_VAR 0 3
6615: PUSH
6616: LD_INT 4
6618: PUSH
6619: LD_INT 5
6621: PUSH
6622: EMPTY
6623: LIST
6624: LIST
6625: ST_TO_ADDR
6626: GO 7271
6628: LD_INT 22
6630: DOUBLE
6631: EQUAL
6632: IFTRUE 6636
6634: GO 6662
6636: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6637: LD_ADDR_VAR 0 3
6641: PUSH
6642: LD_INT 11
6644: PUSH
6645: LD_INT 12
6647: PUSH
6648: LD_INT 13
6650: PUSH
6651: LD_INT 14
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: ST_TO_ADDR
6660: GO 7271
6662: LD_INT 23
6664: DOUBLE
6665: EQUAL
6666: IFTRUE 6670
6668: GO 6696
6670: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6671: LD_ADDR_VAR 0 3
6675: PUSH
6676: LD_INT 11
6678: PUSH
6679: LD_INT 12
6681: PUSH
6682: LD_INT 13
6684: PUSH
6685: LD_INT 14
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: ST_TO_ADDR
6694: GO 7271
6696: LD_INT 24
6698: DOUBLE
6699: EQUAL
6700: IFTRUE 6704
6702: GO 6730
6704: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6705: LD_ADDR_VAR 0 3
6709: PUSH
6710: LD_INT 11
6712: PUSH
6713: LD_INT 12
6715: PUSH
6716: LD_INT 13
6718: PUSH
6719: LD_INT 14
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: ST_TO_ADDR
6728: GO 7271
6730: LD_INT 30
6732: DOUBLE
6733: EQUAL
6734: IFTRUE 6738
6736: GO 6764
6738: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6739: LD_ADDR_VAR 0 3
6743: PUSH
6744: LD_INT 11
6746: PUSH
6747: LD_INT 12
6749: PUSH
6750: LD_INT 13
6752: PUSH
6753: LD_INT 14
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: ST_TO_ADDR
6762: GO 7271
6764: LD_INT 25
6766: DOUBLE
6767: EQUAL
6768: IFTRUE 6772
6770: GO 6790
6772: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6773: LD_ADDR_VAR 0 3
6777: PUSH
6778: LD_INT 13
6780: PUSH
6781: LD_INT 14
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: ST_TO_ADDR
6788: GO 7271
6790: LD_INT 27
6792: DOUBLE
6793: EQUAL
6794: IFTRUE 6798
6796: GO 6816
6798: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6799: LD_ADDR_VAR 0 3
6803: PUSH
6804: LD_INT 13
6806: PUSH
6807: LD_INT 14
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: ST_TO_ADDR
6814: GO 7271
6816: LD_INT 92
6818: DOUBLE
6819: EQUAL
6820: IFTRUE 6824
6822: GO 6850
6824: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6825: LD_ADDR_VAR 0 3
6829: PUSH
6830: LD_INT 11
6832: PUSH
6833: LD_INT 12
6835: PUSH
6836: LD_INT 13
6838: PUSH
6839: LD_INT 14
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: ST_TO_ADDR
6848: GO 7271
6850: LD_INT 28
6852: DOUBLE
6853: EQUAL
6854: IFTRUE 6858
6856: GO 6876
6858: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6859: LD_ADDR_VAR 0 3
6863: PUSH
6864: LD_INT 13
6866: PUSH
6867: LD_INT 14
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: ST_TO_ADDR
6874: GO 7271
6876: LD_INT 29
6878: DOUBLE
6879: EQUAL
6880: IFTRUE 6884
6882: GO 6902
6884: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6885: LD_ADDR_VAR 0 3
6889: PUSH
6890: LD_INT 13
6892: PUSH
6893: LD_INT 14
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: ST_TO_ADDR
6900: GO 7271
6902: LD_INT 31
6904: DOUBLE
6905: EQUAL
6906: IFTRUE 6910
6908: GO 6928
6910: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6911: LD_ADDR_VAR 0 3
6915: PUSH
6916: LD_INT 13
6918: PUSH
6919: LD_INT 14
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: ST_TO_ADDR
6926: GO 7271
6928: LD_INT 26
6930: DOUBLE
6931: EQUAL
6932: IFTRUE 6936
6934: GO 6954
6936: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6937: LD_ADDR_VAR 0 3
6941: PUSH
6942: LD_INT 13
6944: PUSH
6945: LD_INT 14
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: ST_TO_ADDR
6952: GO 7271
6954: LD_INT 42
6956: DOUBLE
6957: EQUAL
6958: IFTRUE 6962
6960: GO 6988
6962: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6963: LD_ADDR_VAR 0 3
6967: PUSH
6968: LD_INT 21
6970: PUSH
6971: LD_INT 22
6973: PUSH
6974: LD_INT 23
6976: PUSH
6977: LD_INT 24
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: ST_TO_ADDR
6986: GO 7271
6988: LD_INT 43
6990: DOUBLE
6991: EQUAL
6992: IFTRUE 6996
6994: GO 7022
6996: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6997: LD_ADDR_VAR 0 3
7001: PUSH
7002: LD_INT 21
7004: PUSH
7005: LD_INT 22
7007: PUSH
7008: LD_INT 23
7010: PUSH
7011: LD_INT 24
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: ST_TO_ADDR
7020: GO 7271
7022: LD_INT 44
7024: DOUBLE
7025: EQUAL
7026: IFTRUE 7030
7028: GO 7056
7030: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7031: LD_ADDR_VAR 0 3
7035: PUSH
7036: LD_INT 21
7038: PUSH
7039: LD_INT 22
7041: PUSH
7042: LD_INT 23
7044: PUSH
7045: LD_INT 24
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: ST_TO_ADDR
7054: GO 7271
7056: LD_INT 45
7058: DOUBLE
7059: EQUAL
7060: IFTRUE 7064
7062: GO 7090
7064: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7065: LD_ADDR_VAR 0 3
7069: PUSH
7070: LD_INT 21
7072: PUSH
7073: LD_INT 22
7075: PUSH
7076: LD_INT 23
7078: PUSH
7079: LD_INT 24
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: LIST
7086: LIST
7087: ST_TO_ADDR
7088: GO 7271
7090: LD_INT 49
7092: DOUBLE
7093: EQUAL
7094: IFTRUE 7098
7096: GO 7124
7098: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7099: LD_ADDR_VAR 0 3
7103: PUSH
7104: LD_INT 21
7106: PUSH
7107: LD_INT 22
7109: PUSH
7110: LD_INT 23
7112: PUSH
7113: LD_INT 24
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: ST_TO_ADDR
7122: GO 7271
7124: LD_INT 51
7126: DOUBLE
7127: EQUAL
7128: IFTRUE 7132
7130: GO 7158
7132: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7133: LD_ADDR_VAR 0 3
7137: PUSH
7138: LD_INT 21
7140: PUSH
7141: LD_INT 22
7143: PUSH
7144: LD_INT 23
7146: PUSH
7147: LD_INT 24
7149: PUSH
7150: EMPTY
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: ST_TO_ADDR
7156: GO 7271
7158: LD_INT 52
7160: DOUBLE
7161: EQUAL
7162: IFTRUE 7166
7164: GO 7192
7166: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7167: LD_ADDR_VAR 0 3
7171: PUSH
7172: LD_INT 21
7174: PUSH
7175: LD_INT 22
7177: PUSH
7178: LD_INT 23
7180: PUSH
7181: LD_INT 24
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: ST_TO_ADDR
7190: GO 7271
7192: LD_INT 53
7194: DOUBLE
7195: EQUAL
7196: IFTRUE 7200
7198: GO 7218
7200: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7201: LD_ADDR_VAR 0 3
7205: PUSH
7206: LD_INT 23
7208: PUSH
7209: LD_INT 24
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: ST_TO_ADDR
7216: GO 7271
7218: LD_INT 46
7220: DOUBLE
7221: EQUAL
7222: IFTRUE 7226
7224: GO 7244
7226: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7227: LD_ADDR_VAR 0 3
7231: PUSH
7232: LD_INT 23
7234: PUSH
7235: LD_INT 24
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: ST_TO_ADDR
7242: GO 7271
7244: LD_INT 47
7246: DOUBLE
7247: EQUAL
7248: IFTRUE 7252
7250: GO 7270
7252: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7253: LD_ADDR_VAR 0 3
7257: PUSH
7258: LD_INT 23
7260: PUSH
7261: LD_INT 24
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: ST_TO_ADDR
7268: GO 7271
7270: POP
// result := ( chassis in result ) ;
7271: LD_ADDR_VAR 0 3
7275: PUSH
7276: LD_VAR 0 1
7280: PUSH
7281: LD_VAR 0 3
7285: IN
7286: ST_TO_ADDR
// end ;
7287: LD_VAR 0 3
7291: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7292: LD_INT 0
7294: PPUSH
7295: PPUSH
7296: PPUSH
7297: PPUSH
7298: PPUSH
7299: PPUSH
7300: PPUSH
// result := array ;
7301: LD_ADDR_VAR 0 5
7305: PUSH
7306: LD_VAR 0 1
7310: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7311: LD_VAR 0 1
7315: NOT
7316: IFTRUE 7325
7318: PUSH
7319: LD_VAR 0 2
7323: NOT
7324: OR
7325: IFTRUE 7334
7327: PUSH
7328: LD_VAR 0 3
7332: NOT
7333: OR
7334: IFTRUE 7348
7336: PUSH
7337: LD_VAR 0 2
7341: PUSH
7342: LD_VAR 0 1
7346: GREATER
7347: OR
7348: IFTRUE 7362
7350: PUSH
7351: LD_VAR 0 3
7355: PUSH
7356: LD_VAR 0 1
7360: GREATER
7361: OR
7362: IFFALSE 7366
// exit ;
7364: GO 7662
// if direction then
7366: LD_VAR 0 4
7370: IFFALSE 7434
// begin d := 1 ;
7372: LD_ADDR_VAR 0 9
7376: PUSH
7377: LD_INT 1
7379: ST_TO_ADDR
// if i_from > i_to then
7380: LD_VAR 0 2
7384: PUSH
7385: LD_VAR 0 3
7389: GREATER
7390: IFFALSE 7416
// length := ( array - i_from ) + i_to else
7392: LD_ADDR_VAR 0 11
7396: PUSH
7397: LD_VAR 0 1
7401: PUSH
7402: LD_VAR 0 2
7406: MINUS
7407: PUSH
7408: LD_VAR 0 3
7412: PLUS
7413: ST_TO_ADDR
7414: GO 7432
// length := i_to - i_from ;
7416: LD_ADDR_VAR 0 11
7420: PUSH
7421: LD_VAR 0 3
7425: PUSH
7426: LD_VAR 0 2
7430: MINUS
7431: ST_TO_ADDR
// end else
7432: GO 7495
// begin d := - 1 ;
7434: LD_ADDR_VAR 0 9
7438: PUSH
7439: LD_INT 1
7441: NEG
7442: ST_TO_ADDR
// if i_from > i_to then
7443: LD_VAR 0 2
7447: PUSH
7448: LD_VAR 0 3
7452: GREATER
7453: IFFALSE 7473
// length := i_from - i_to else
7455: LD_ADDR_VAR 0 11
7459: PUSH
7460: LD_VAR 0 2
7464: PUSH
7465: LD_VAR 0 3
7469: MINUS
7470: ST_TO_ADDR
7471: GO 7495
// length := ( array - i_to ) + i_from ;
7473: LD_ADDR_VAR 0 11
7477: PUSH
7478: LD_VAR 0 1
7482: PUSH
7483: LD_VAR 0 3
7487: MINUS
7488: PUSH
7489: LD_VAR 0 2
7493: PLUS
7494: ST_TO_ADDR
// end ; if not length then
7495: LD_VAR 0 11
7499: NOT
7500: IFFALSE 7504
// exit ;
7502: GO 7662
// tmp := array ;
7504: LD_ADDR_VAR 0 10
7508: PUSH
7509: LD_VAR 0 1
7513: ST_TO_ADDR
// for i = 1 to length do
7514: LD_ADDR_VAR 0 6
7518: PUSH
7519: DOUBLE
7520: LD_INT 1
7522: DEC
7523: ST_TO_ADDR
7524: LD_VAR 0 11
7528: PUSH
7529: FOR_TO
7530: IFFALSE 7650
// begin for j = 1 to array do
7532: LD_ADDR_VAR 0 7
7536: PUSH
7537: DOUBLE
7538: LD_INT 1
7540: DEC
7541: ST_TO_ADDR
7542: LD_VAR 0 1
7546: PUSH
7547: FOR_TO
7548: IFFALSE 7636
// begin k := j + d ;
7550: LD_ADDR_VAR 0 8
7554: PUSH
7555: LD_VAR 0 7
7559: PUSH
7560: LD_VAR 0 9
7564: PLUS
7565: ST_TO_ADDR
// if k > array then
7566: LD_VAR 0 8
7570: PUSH
7571: LD_VAR 0 1
7575: GREATER
7576: IFFALSE 7586
// k := 1 ;
7578: LD_ADDR_VAR 0 8
7582: PUSH
7583: LD_INT 1
7585: ST_TO_ADDR
// if not k then
7586: LD_VAR 0 8
7590: NOT
7591: IFFALSE 7603
// k := array ;
7593: LD_ADDR_VAR 0 8
7597: PUSH
7598: LD_VAR 0 1
7602: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7603: LD_ADDR_VAR 0 10
7607: PUSH
7608: LD_VAR 0 10
7612: PPUSH
7613: LD_VAR 0 8
7617: PPUSH
7618: LD_VAR 0 1
7622: PUSH
7623: LD_VAR 0 7
7627: ARRAY
7628: PPUSH
7629: CALL_OW 1
7633: ST_TO_ADDR
// end ;
7634: GO 7547
7636: POP
7637: POP
// array := tmp ;
7638: LD_ADDR_VAR 0 1
7642: PUSH
7643: LD_VAR 0 10
7647: ST_TO_ADDR
// end ;
7648: GO 7529
7650: POP
7651: POP
// result := array ;
7652: LD_ADDR_VAR 0 5
7656: PUSH
7657: LD_VAR 0 1
7661: ST_TO_ADDR
// end ;
7662: LD_VAR 0 5
7666: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7667: LD_INT 0
7669: PPUSH
7670: PPUSH
// result := 0 ;
7671: LD_ADDR_VAR 0 3
7675: PUSH
7676: LD_INT 0
7678: ST_TO_ADDR
// if not array or not value in array then
7679: LD_VAR 0 1
7683: NOT
7684: IFTRUE 7699
7686: PUSH
7687: LD_VAR 0 2
7691: PUSH
7692: LD_VAR 0 1
7696: IN
7697: NOT
7698: OR
7699: IFFALSE 7703
// exit ;
7701: GO 7757
// for i = 1 to array do
7703: LD_ADDR_VAR 0 4
7707: PUSH
7708: DOUBLE
7709: LD_INT 1
7711: DEC
7712: ST_TO_ADDR
7713: LD_VAR 0 1
7717: PUSH
7718: FOR_TO
7719: IFFALSE 7755
// if value = array [ i ] then
7721: LD_VAR 0 2
7725: PUSH
7726: LD_VAR 0 1
7730: PUSH
7731: LD_VAR 0 4
7735: ARRAY
7736: EQUAL
7737: IFFALSE 7753
// begin result := i ;
7739: LD_ADDR_VAR 0 3
7743: PUSH
7744: LD_VAR 0 4
7748: ST_TO_ADDR
// exit ;
7749: POP
7750: POP
7751: GO 7757
// end ;
7753: GO 7718
7755: POP
7756: POP
// end ;
7757: LD_VAR 0 3
7761: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7762: LD_INT 0
7764: PPUSH
// vc_chassis := chassis ;
7765: LD_ADDR_OWVAR 37
7769: PUSH
7770: LD_VAR 0 1
7774: ST_TO_ADDR
// vc_engine := engine ;
7775: LD_ADDR_OWVAR 39
7779: PUSH
7780: LD_VAR 0 2
7784: ST_TO_ADDR
// vc_control := control ;
7785: LD_ADDR_OWVAR 38
7789: PUSH
7790: LD_VAR 0 3
7794: ST_TO_ADDR
// vc_weapon := weapon ;
7795: LD_ADDR_OWVAR 40
7799: PUSH
7800: LD_VAR 0 4
7804: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7805: LD_ADDR_OWVAR 41
7809: PUSH
7810: LD_VAR 0 5
7814: ST_TO_ADDR
// end ;
7815: LD_VAR 0 6
7819: RET
// export function WantPlant ( unit ) ; var task ; begin
7820: LD_INT 0
7822: PPUSH
7823: PPUSH
// result := false ;
7824: LD_ADDR_VAR 0 2
7828: PUSH
7829: LD_INT 0
7831: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7832: LD_ADDR_VAR 0 3
7836: PUSH
7837: LD_VAR 0 1
7841: PPUSH
7842: CALL_OW 437
7846: ST_TO_ADDR
// if task then
7847: LD_VAR 0 3
7851: IFFALSE 7879
// if task [ 1 ] [ 1 ] = p then
7853: LD_VAR 0 3
7857: PUSH
7858: LD_INT 1
7860: ARRAY
7861: PUSH
7862: LD_INT 1
7864: ARRAY
7865: PUSH
7866: LD_STRING p
7868: EQUAL
7869: IFFALSE 7879
// result := true ;
7871: LD_ADDR_VAR 0 2
7875: PUSH
7876: LD_INT 1
7878: ST_TO_ADDR
// end ;
7879: LD_VAR 0 2
7883: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7884: LD_INT 0
7886: PPUSH
7887: PPUSH
7888: PPUSH
7889: PPUSH
// if pos < 1 then
7890: LD_VAR 0 2
7894: PUSH
7895: LD_INT 1
7897: LESS
7898: IFFALSE 7902
// exit ;
7900: GO 8205
// if pos = 1 then
7902: LD_VAR 0 2
7906: PUSH
7907: LD_INT 1
7909: EQUAL
7910: IFFALSE 7943
// result := Replace ( arr , pos [ 1 ] , value ) else
7912: LD_ADDR_VAR 0 4
7916: PUSH
7917: LD_VAR 0 1
7921: PPUSH
7922: LD_VAR 0 2
7926: PUSH
7927: LD_INT 1
7929: ARRAY
7930: PPUSH
7931: LD_VAR 0 3
7935: PPUSH
7936: CALL_OW 1
7940: ST_TO_ADDR
7941: GO 8205
// begin tmp := arr ;
7943: LD_ADDR_VAR 0 6
7947: PUSH
7948: LD_VAR 0 1
7952: ST_TO_ADDR
// s_arr := [ tmp ] ;
7953: LD_ADDR_VAR 0 7
7957: PUSH
7958: LD_VAR 0 6
7962: PUSH
7963: EMPTY
7964: LIST
7965: ST_TO_ADDR
// for i = 1 to pos - 1 do
7966: LD_ADDR_VAR 0 5
7970: PUSH
7971: DOUBLE
7972: LD_INT 1
7974: DEC
7975: ST_TO_ADDR
7976: LD_VAR 0 2
7980: PUSH
7981: LD_INT 1
7983: MINUS
7984: PUSH
7985: FOR_TO
7986: IFFALSE 8031
// begin tmp := tmp [ pos [ i ] ] ;
7988: LD_ADDR_VAR 0 6
7992: PUSH
7993: LD_VAR 0 6
7997: PUSH
7998: LD_VAR 0 2
8002: PUSH
8003: LD_VAR 0 5
8007: ARRAY
8008: ARRAY
8009: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8010: LD_ADDR_VAR 0 7
8014: PUSH
8015: LD_VAR 0 7
8019: PUSH
8020: LD_VAR 0 6
8024: PUSH
8025: EMPTY
8026: LIST
8027: ADD
8028: ST_TO_ADDR
// end ;
8029: GO 7985
8031: POP
8032: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8033: LD_ADDR_VAR 0 6
8037: PUSH
8038: LD_VAR 0 6
8042: PPUSH
8043: LD_VAR 0 2
8047: PUSH
8048: LD_VAR 0 2
8052: ARRAY
8053: PPUSH
8054: LD_VAR 0 3
8058: PPUSH
8059: CALL_OW 1
8063: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8064: LD_ADDR_VAR 0 7
8068: PUSH
8069: LD_VAR 0 7
8073: PPUSH
8074: LD_VAR 0 7
8078: PPUSH
8079: LD_VAR 0 6
8083: PPUSH
8084: CALL_OW 1
8088: ST_TO_ADDR
// for i = s_arr downto 2 do
8089: LD_ADDR_VAR 0 5
8093: PUSH
8094: DOUBLE
8095: LD_VAR 0 7
8099: INC
8100: ST_TO_ADDR
8101: LD_INT 2
8103: PUSH
8104: FOR_DOWNTO
8105: IFFALSE 8189
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8107: LD_ADDR_VAR 0 6
8111: PUSH
8112: LD_VAR 0 7
8116: PUSH
8117: LD_VAR 0 5
8121: PUSH
8122: LD_INT 1
8124: MINUS
8125: ARRAY
8126: PPUSH
8127: LD_VAR 0 2
8131: PUSH
8132: LD_VAR 0 5
8136: PUSH
8137: LD_INT 1
8139: MINUS
8140: ARRAY
8141: PPUSH
8142: LD_VAR 0 7
8146: PUSH
8147: LD_VAR 0 5
8151: ARRAY
8152: PPUSH
8153: CALL_OW 1
8157: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8158: LD_ADDR_VAR 0 7
8162: PUSH
8163: LD_VAR 0 7
8167: PPUSH
8168: LD_VAR 0 5
8172: PUSH
8173: LD_INT 1
8175: MINUS
8176: PPUSH
8177: LD_VAR 0 6
8181: PPUSH
8182: CALL_OW 1
8186: ST_TO_ADDR
// end ;
8187: GO 8104
8189: POP
8190: POP
// result := s_arr [ 1 ] ;
8191: LD_ADDR_VAR 0 4
8195: PUSH
8196: LD_VAR 0 7
8200: PUSH
8201: LD_INT 1
8203: ARRAY
8204: ST_TO_ADDR
// end ; end ;
8205: LD_VAR 0 4
8209: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8210: LD_INT 0
8212: PPUSH
8213: PPUSH
// if not list then
8214: LD_VAR 0 1
8218: NOT
8219: IFFALSE 8223
// exit ;
8221: GO 8314
// i := list [ pos1 ] ;
8223: LD_ADDR_VAR 0 5
8227: PUSH
8228: LD_VAR 0 1
8232: PUSH
8233: LD_VAR 0 2
8237: ARRAY
8238: ST_TO_ADDR
// if not i then
8239: LD_VAR 0 5
8243: NOT
8244: IFFALSE 8248
// exit ;
8246: GO 8314
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8248: LD_ADDR_VAR 0 1
8252: PUSH
8253: LD_VAR 0 1
8257: PPUSH
8258: LD_VAR 0 2
8262: PPUSH
8263: LD_VAR 0 1
8267: PUSH
8268: LD_VAR 0 3
8272: ARRAY
8273: PPUSH
8274: CALL_OW 1
8278: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8279: LD_ADDR_VAR 0 1
8283: PUSH
8284: LD_VAR 0 1
8288: PPUSH
8289: LD_VAR 0 3
8293: PPUSH
8294: LD_VAR 0 5
8298: PPUSH
8299: CALL_OW 1
8303: ST_TO_ADDR
// result := list ;
8304: LD_ADDR_VAR 0 4
8308: PUSH
8309: LD_VAR 0 1
8313: ST_TO_ADDR
// end ;
8314: LD_VAR 0 4
8318: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8319: LD_INT 0
8321: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8322: LD_ADDR_VAR 0 5
8326: PUSH
8327: LD_VAR 0 1
8331: PPUSH
8332: CALL_OW 250
8336: PPUSH
8337: LD_VAR 0 1
8341: PPUSH
8342: CALL_OW 251
8346: PPUSH
8347: LD_VAR 0 2
8351: PPUSH
8352: LD_VAR 0 3
8356: PPUSH
8357: LD_VAR 0 4
8361: PPUSH
8362: CALL 8744 0 5
8366: ST_TO_ADDR
// end ;
8367: LD_VAR 0 5
8371: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8372: LD_INT 0
8374: PPUSH
8375: PPUSH
8376: PPUSH
8377: PPUSH
// if not list or not unit then
8378: LD_VAR 0 2
8382: NOT
8383: IFTRUE 8392
8385: PUSH
8386: LD_VAR 0 1
8390: NOT
8391: OR
8392: IFFALSE 8396
// exit ;
8394: GO 8739
// result := [ ] ;
8396: LD_ADDR_VAR 0 5
8400: PUSH
8401: EMPTY
8402: ST_TO_ADDR
// for i in list do
8403: LD_ADDR_VAR 0 6
8407: PUSH
8408: LD_VAR 0 2
8412: PUSH
8413: FOR_IN
8414: IFFALSE 8632
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8416: LD_ADDR_VAR 0 8
8420: PUSH
8421: LD_VAR 0 1
8425: PPUSH
8426: LD_VAR 0 6
8430: PUSH
8431: LD_INT 1
8433: ARRAY
8434: PPUSH
8435: LD_VAR 0 6
8439: PUSH
8440: LD_INT 2
8442: ARRAY
8443: PPUSH
8444: CALL_OW 297
8448: ST_TO_ADDR
// if not Count ( result ) then
8449: LD_VAR 0 5
8453: PPUSH
8454: CALL 5000 0 1
8458: NOT
8459: IFFALSE 8492
// begin result := Join ( result , [ i , tmp ] ) ;
8461: LD_ADDR_VAR 0 5
8465: PUSH
8466: LD_VAR 0 5
8470: PPUSH
8471: LD_VAR 0 6
8475: PUSH
8476: LD_VAR 0 8
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PPUSH
8485: CALL 40932 0 2
8489: ST_TO_ADDR
// continue ;
8490: GO 8413
// end ; if result [ result ] [ 2 ] <= tmp then
8492: LD_VAR 0 5
8496: PUSH
8497: LD_VAR 0 5
8501: ARRAY
8502: PUSH
8503: LD_INT 2
8505: ARRAY
8506: PUSH
8507: LD_VAR 0 8
8511: LESSEQUAL
8512: IFFALSE 8545
// result := Join ( result , [ i , tmp ] ) else
8514: LD_ADDR_VAR 0 5
8518: PUSH
8519: LD_VAR 0 5
8523: PPUSH
8524: LD_VAR 0 6
8528: PUSH
8529: LD_VAR 0 8
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PPUSH
8538: CALL 40932 0 2
8542: ST_TO_ADDR
8543: GO 8630
// begin for j := 1 to Count ( result ) do
8545: LD_ADDR_VAR 0 7
8549: PUSH
8550: DOUBLE
8551: LD_INT 1
8553: DEC
8554: ST_TO_ADDR
8555: LD_VAR 0 5
8559: PPUSH
8560: CALL 5000 0 1
8564: PUSH
8565: FOR_TO
8566: IFFALSE 8628
// begin if tmp < result [ j ] [ 2 ] then
8568: LD_VAR 0 8
8572: PUSH
8573: LD_VAR 0 5
8577: PUSH
8578: LD_VAR 0 7
8582: ARRAY
8583: PUSH
8584: LD_INT 2
8586: ARRAY
8587: LESS
8588: IFFALSE 8626
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8590: LD_ADDR_VAR 0 5
8594: PUSH
8595: LD_VAR 0 5
8599: PPUSH
8600: LD_VAR 0 7
8604: PPUSH
8605: LD_VAR 0 6
8609: PUSH
8610: LD_VAR 0 8
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PPUSH
8619: CALL_OW 2
8623: ST_TO_ADDR
// break ;
8624: GO 8628
// end ; end ;
8626: GO 8565
8628: POP
8629: POP
// end ; end ;
8630: GO 8413
8632: POP
8633: POP
// if result and not asc then
8634: LD_VAR 0 5
8638: IFFALSE 8647
8640: PUSH
8641: LD_VAR 0 3
8645: NOT
8646: AND
8647: IFFALSE 8664
// result := ReverseArray ( result ) ;
8649: LD_ADDR_VAR 0 5
8653: PUSH
8654: LD_VAR 0 5
8658: PPUSH
8659: CALL 36022 0 1
8663: ST_TO_ADDR
// tmp := [ ] ;
8664: LD_ADDR_VAR 0 8
8668: PUSH
8669: EMPTY
8670: ST_TO_ADDR
// if mode then
8671: LD_VAR 0 4
8675: IFFALSE 8739
// begin for i := 1 to result do
8677: LD_ADDR_VAR 0 6
8681: PUSH
8682: DOUBLE
8683: LD_INT 1
8685: DEC
8686: ST_TO_ADDR
8687: LD_VAR 0 5
8691: PUSH
8692: FOR_TO
8693: IFFALSE 8727
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8695: LD_ADDR_VAR 0 8
8699: PUSH
8700: LD_VAR 0 8
8704: PPUSH
8705: LD_VAR 0 5
8709: PUSH
8710: LD_VAR 0 6
8714: ARRAY
8715: PUSH
8716: LD_INT 1
8718: ARRAY
8719: PPUSH
8720: CALL 40932 0 2
8724: ST_TO_ADDR
8725: GO 8692
8727: POP
8728: POP
// result := tmp ;
8729: LD_ADDR_VAR 0 5
8733: PUSH
8734: LD_VAR 0 8
8738: ST_TO_ADDR
// end ; end ;
8739: LD_VAR 0 5
8743: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8744: LD_INT 0
8746: PPUSH
8747: PPUSH
8748: PPUSH
8749: PPUSH
// if not list then
8750: LD_VAR 0 3
8754: NOT
8755: IFFALSE 8759
// exit ;
8757: GO 9149
// result := [ ] ;
8759: LD_ADDR_VAR 0 6
8763: PUSH
8764: EMPTY
8765: ST_TO_ADDR
// for i in list do
8766: LD_ADDR_VAR 0 7
8770: PUSH
8771: LD_VAR 0 3
8775: PUSH
8776: FOR_IN
8777: IFFALSE 8979
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8779: LD_ADDR_VAR 0 9
8783: PUSH
8784: LD_VAR 0 7
8788: PPUSH
8789: LD_VAR 0 1
8793: PPUSH
8794: LD_VAR 0 2
8798: PPUSH
8799: CALL_OW 297
8803: ST_TO_ADDR
// if not result then
8804: LD_VAR 0 6
8808: NOT
8809: IFFALSE 8835
// result := [ [ i , tmp ] ] else
8811: LD_ADDR_VAR 0 6
8815: PUSH
8816: LD_VAR 0 7
8820: PUSH
8821: LD_VAR 0 9
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PUSH
8830: EMPTY
8831: LIST
8832: ST_TO_ADDR
8833: GO 8977
// begin if result [ result ] [ 2 ] <= tmp then
8835: LD_VAR 0 6
8839: PUSH
8840: LD_VAR 0 6
8844: ARRAY
8845: PUSH
8846: LD_INT 2
8848: ARRAY
8849: PUSH
8850: LD_VAR 0 9
8854: LESSEQUAL
8855: IFFALSE 8897
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8857: LD_ADDR_VAR 0 6
8861: PUSH
8862: LD_VAR 0 6
8866: PPUSH
8867: LD_VAR 0 6
8871: PUSH
8872: LD_INT 1
8874: PLUS
8875: PPUSH
8876: LD_VAR 0 7
8880: PUSH
8881: LD_VAR 0 9
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PPUSH
8890: CALL_OW 2
8894: ST_TO_ADDR
8895: GO 8977
// for j := 1 to result do
8897: LD_ADDR_VAR 0 8
8901: PUSH
8902: DOUBLE
8903: LD_INT 1
8905: DEC
8906: ST_TO_ADDR
8907: LD_VAR 0 6
8911: PUSH
8912: FOR_TO
8913: IFFALSE 8975
// begin if tmp < result [ j ] [ 2 ] then
8915: LD_VAR 0 9
8919: PUSH
8920: LD_VAR 0 6
8924: PUSH
8925: LD_VAR 0 8
8929: ARRAY
8930: PUSH
8931: LD_INT 2
8933: ARRAY
8934: LESS
8935: IFFALSE 8973
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8937: LD_ADDR_VAR 0 6
8941: PUSH
8942: LD_VAR 0 6
8946: PPUSH
8947: LD_VAR 0 8
8951: PPUSH
8952: LD_VAR 0 7
8956: PUSH
8957: LD_VAR 0 9
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PPUSH
8966: CALL_OW 2
8970: ST_TO_ADDR
// break ;
8971: GO 8975
// end ; end ;
8973: GO 8912
8975: POP
8976: POP
// end ; end ;
8977: GO 8776
8979: POP
8980: POP
// if result and not asc then
8981: LD_VAR 0 6
8985: IFFALSE 8994
8987: PUSH
8988: LD_VAR 0 4
8992: NOT
8993: AND
8994: IFFALSE 9069
// begin tmp := result ;
8996: LD_ADDR_VAR 0 9
9000: PUSH
9001: LD_VAR 0 6
9005: ST_TO_ADDR
// for i = tmp downto 1 do
9006: LD_ADDR_VAR 0 7
9010: PUSH
9011: DOUBLE
9012: LD_VAR 0 9
9016: INC
9017: ST_TO_ADDR
9018: LD_INT 1
9020: PUSH
9021: FOR_DOWNTO
9022: IFFALSE 9067
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9024: LD_ADDR_VAR 0 6
9028: PUSH
9029: LD_VAR 0 6
9033: PPUSH
9034: LD_VAR 0 9
9038: PUSH
9039: LD_VAR 0 7
9043: MINUS
9044: PUSH
9045: LD_INT 1
9047: PLUS
9048: PPUSH
9049: LD_VAR 0 9
9053: PUSH
9054: LD_VAR 0 7
9058: ARRAY
9059: PPUSH
9060: CALL_OW 1
9064: ST_TO_ADDR
9065: GO 9021
9067: POP
9068: POP
// end ; tmp := [ ] ;
9069: LD_ADDR_VAR 0 9
9073: PUSH
9074: EMPTY
9075: ST_TO_ADDR
// if mode then
9076: LD_VAR 0 5
9080: IFFALSE 9149
// begin for i = 1 to result do
9082: LD_ADDR_VAR 0 7
9086: PUSH
9087: DOUBLE
9088: LD_INT 1
9090: DEC
9091: ST_TO_ADDR
9092: LD_VAR 0 6
9096: PUSH
9097: FOR_TO
9098: IFFALSE 9137
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9100: LD_ADDR_VAR 0 9
9104: PUSH
9105: LD_VAR 0 9
9109: PPUSH
9110: LD_VAR 0 7
9114: PPUSH
9115: LD_VAR 0 6
9119: PUSH
9120: LD_VAR 0 7
9124: ARRAY
9125: PUSH
9126: LD_INT 1
9128: ARRAY
9129: PPUSH
9130: CALL_OW 1
9134: ST_TO_ADDR
9135: GO 9097
9137: POP
9138: POP
// result := tmp ;
9139: LD_ADDR_VAR 0 6
9143: PUSH
9144: LD_VAR 0 9
9148: ST_TO_ADDR
// end ; end ;
9149: LD_VAR 0 6
9153: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9154: LD_INT 0
9156: PPUSH
9157: PPUSH
9158: PPUSH
9159: PPUSH
9160: PPUSH
9161: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9162: LD_ADDR_VAR 0 5
9166: PUSH
9167: LD_INT 0
9169: PUSH
9170: LD_INT 0
9172: PUSH
9173: LD_INT 0
9175: PUSH
9176: EMPTY
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: ST_TO_ADDR
// if not x or not y then
9184: LD_VAR 0 2
9188: NOT
9189: IFTRUE 9198
9191: PUSH
9192: LD_VAR 0 3
9196: NOT
9197: OR
9198: IFFALSE 9202
// exit ;
9200: GO 10858
// if not range then
9202: LD_VAR 0 4
9206: NOT
9207: IFFALSE 9217
// range := 10 ;
9209: LD_ADDR_VAR 0 4
9213: PUSH
9214: LD_INT 10
9216: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9217: LD_ADDR_VAR 0 8
9221: PUSH
9222: LD_INT 81
9224: PUSH
9225: LD_VAR 0 1
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PUSH
9234: LD_INT 92
9236: PUSH
9237: LD_VAR 0 2
9241: PUSH
9242: LD_VAR 0 3
9246: PUSH
9247: LD_VAR 0 4
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: PUSH
9258: LD_INT 3
9260: PUSH
9261: LD_INT 21
9263: PUSH
9264: LD_INT 3
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: LIST
9279: PPUSH
9280: CALL_OW 69
9284: ST_TO_ADDR
// if not tmp then
9285: LD_VAR 0 8
9289: NOT
9290: IFFALSE 9294
// exit ;
9292: GO 10858
// for i in tmp do
9294: LD_ADDR_VAR 0 6
9298: PUSH
9299: LD_VAR 0 8
9303: PUSH
9304: FOR_IN
9305: IFFALSE 10833
// begin points := [ 0 , 0 , 0 ] ;
9307: LD_ADDR_VAR 0 9
9311: PUSH
9312: LD_INT 0
9314: PUSH
9315: LD_INT 0
9317: PUSH
9318: LD_INT 0
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: LIST
9325: ST_TO_ADDR
// bpoints := 1 ;
9326: LD_ADDR_VAR 0 10
9330: PUSH
9331: LD_INT 1
9333: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9334: LD_VAR 0 6
9338: PPUSH
9339: CALL_OW 247
9343: PUSH
9344: LD_INT 1
9346: DOUBLE
9347: EQUAL
9348: IFTRUE 9352
9350: GO 9934
9352: POP
// begin if GetClass ( i ) = 1 then
9353: LD_VAR 0 6
9357: PPUSH
9358: CALL_OW 257
9362: PUSH
9363: LD_INT 1
9365: EQUAL
9366: IFFALSE 9387
// points := [ 10 , 5 , 3 ] ;
9368: LD_ADDR_VAR 0 9
9372: PUSH
9373: LD_INT 10
9375: PUSH
9376: LD_INT 5
9378: PUSH
9379: LD_INT 3
9381: PUSH
9382: EMPTY
9383: LIST
9384: LIST
9385: LIST
9386: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9387: LD_VAR 0 6
9391: PPUSH
9392: CALL_OW 257
9396: PUSH
9397: LD_INT 2
9399: PUSH
9400: LD_INT 3
9402: PUSH
9403: LD_INT 4
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: LIST
9410: IN
9411: IFFALSE 9432
// points := [ 3 , 2 , 1 ] ;
9413: LD_ADDR_VAR 0 9
9417: PUSH
9418: LD_INT 3
9420: PUSH
9421: LD_INT 2
9423: PUSH
9424: LD_INT 1
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: LIST
9431: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9432: LD_VAR 0 6
9436: PPUSH
9437: CALL_OW 257
9441: PUSH
9442: LD_INT 5
9444: EQUAL
9445: IFFALSE 9466
// points := [ 130 , 5 , 2 ] ;
9447: LD_ADDR_VAR 0 9
9451: PUSH
9452: LD_INT 130
9454: PUSH
9455: LD_INT 5
9457: PUSH
9458: LD_INT 2
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: LIST
9465: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9466: LD_VAR 0 6
9470: PPUSH
9471: CALL_OW 257
9475: PUSH
9476: LD_INT 8
9478: EQUAL
9479: IFFALSE 9500
// points := [ 35 , 35 , 30 ] ;
9481: LD_ADDR_VAR 0 9
9485: PUSH
9486: LD_INT 35
9488: PUSH
9489: LD_INT 35
9491: PUSH
9492: LD_INT 30
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: LIST
9499: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9500: LD_VAR 0 6
9504: PPUSH
9505: CALL_OW 257
9509: PUSH
9510: LD_INT 9
9512: EQUAL
9513: IFFALSE 9534
// points := [ 20 , 55 , 40 ] ;
9515: LD_ADDR_VAR 0 9
9519: PUSH
9520: LD_INT 20
9522: PUSH
9523: LD_INT 55
9525: PUSH
9526: LD_INT 40
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: LIST
9533: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9534: LD_VAR 0 6
9538: PPUSH
9539: CALL_OW 257
9543: PUSH
9544: LD_INT 12
9546: PUSH
9547: LD_INT 16
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: IN
9554: IFFALSE 9575
// points := [ 5 , 3 , 2 ] ;
9556: LD_ADDR_VAR 0 9
9560: PUSH
9561: LD_INT 5
9563: PUSH
9564: LD_INT 3
9566: PUSH
9567: LD_INT 2
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: LIST
9574: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9575: LD_VAR 0 6
9579: PPUSH
9580: CALL_OW 257
9584: PUSH
9585: LD_INT 17
9587: EQUAL
9588: IFFALSE 9609
// points := [ 100 , 50 , 75 ] ;
9590: LD_ADDR_VAR 0 9
9594: PUSH
9595: LD_INT 100
9597: PUSH
9598: LD_INT 50
9600: PUSH
9601: LD_INT 75
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: LIST
9608: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9609: LD_VAR 0 6
9613: PPUSH
9614: CALL_OW 257
9618: PUSH
9619: LD_INT 15
9621: EQUAL
9622: IFFALSE 9643
// points := [ 10 , 5 , 3 ] ;
9624: LD_ADDR_VAR 0 9
9628: PUSH
9629: LD_INT 10
9631: PUSH
9632: LD_INT 5
9634: PUSH
9635: LD_INT 3
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: LIST
9642: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9643: LD_VAR 0 6
9647: PPUSH
9648: CALL_OW 257
9652: PUSH
9653: LD_INT 14
9655: EQUAL
9656: IFFALSE 9677
// points := [ 10 , 0 , 0 ] ;
9658: LD_ADDR_VAR 0 9
9662: PUSH
9663: LD_INT 10
9665: PUSH
9666: LD_INT 0
9668: PUSH
9669: LD_INT 0
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: LIST
9676: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9677: LD_VAR 0 6
9681: PPUSH
9682: CALL_OW 257
9686: PUSH
9687: LD_INT 11
9689: EQUAL
9690: IFFALSE 9711
// points := [ 30 , 10 , 5 ] ;
9692: LD_ADDR_VAR 0 9
9696: PUSH
9697: LD_INT 30
9699: PUSH
9700: LD_INT 10
9702: PUSH
9703: LD_INT 5
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: LIST
9710: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9711: LD_VAR 0 1
9715: PPUSH
9716: LD_INT 5
9718: PPUSH
9719: CALL_OW 321
9723: PUSH
9724: LD_INT 2
9726: EQUAL
9727: IFFALSE 9744
// bpoints := bpoints * 1.8 ;
9729: LD_ADDR_VAR 0 10
9733: PUSH
9734: LD_VAR 0 10
9738: PUSH
9739: LD_REAL  1.80000000000000E+0000
9742: MUL
9743: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9744: LD_VAR 0 6
9748: PPUSH
9749: CALL_OW 257
9753: PUSH
9754: LD_INT 1
9756: PUSH
9757: LD_INT 2
9759: PUSH
9760: LD_INT 3
9762: PUSH
9763: LD_INT 4
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: IN
9772: IFFALSE 9792
9774: PUSH
9775: LD_VAR 0 1
9779: PPUSH
9780: LD_INT 51
9782: PPUSH
9783: CALL_OW 321
9787: PUSH
9788: LD_INT 2
9790: EQUAL
9791: AND
9792: IFFALSE 9809
// bpoints := bpoints * 1.2 ;
9794: LD_ADDR_VAR 0 10
9798: PUSH
9799: LD_VAR 0 10
9803: PUSH
9804: LD_REAL  1.20000000000000E+0000
9807: MUL
9808: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9809: LD_VAR 0 6
9813: PPUSH
9814: CALL_OW 257
9818: PUSH
9819: LD_INT 5
9821: PUSH
9822: LD_INT 7
9824: PUSH
9825: LD_INT 9
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: LIST
9832: IN
9833: IFFALSE 9853
9835: PUSH
9836: LD_VAR 0 1
9840: PPUSH
9841: LD_INT 52
9843: PPUSH
9844: CALL_OW 321
9848: PUSH
9849: LD_INT 2
9851: EQUAL
9852: AND
9853: IFFALSE 9870
// bpoints := bpoints * 1.5 ;
9855: LD_ADDR_VAR 0 10
9859: PUSH
9860: LD_VAR 0 10
9864: PUSH
9865: LD_REAL  1.50000000000000E+0000
9868: MUL
9869: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9870: LD_VAR 0 1
9874: PPUSH
9875: LD_INT 66
9877: PPUSH
9878: CALL_OW 321
9882: PUSH
9883: LD_INT 2
9885: EQUAL
9886: IFFALSE 9903
// bpoints := bpoints * 1.1 ;
9888: LD_ADDR_VAR 0 10
9892: PUSH
9893: LD_VAR 0 10
9897: PUSH
9898: LD_REAL  1.10000000000000E+0000
9901: MUL
9902: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9903: LD_ADDR_VAR 0 10
9907: PUSH
9908: LD_VAR 0 10
9912: PUSH
9913: LD_VAR 0 6
9917: PPUSH
9918: LD_INT 1
9920: PPUSH
9921: CALL_OW 259
9925: PUSH
9926: LD_REAL  1.15000000000000E+0000
9929: MUL
9930: MUL
9931: ST_TO_ADDR
// end ; unit_vehicle :
9932: GO 10762
9934: LD_INT 2
9936: DOUBLE
9937: EQUAL
9938: IFTRUE 9942
9940: GO 10750
9942: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9943: LD_VAR 0 6
9947: PPUSH
9948: CALL_OW 264
9952: PUSH
9953: LD_INT 2
9955: PUSH
9956: LD_INT 42
9958: PUSH
9959: LD_INT 24
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: LIST
9966: IN
9967: IFFALSE 9988
// points := [ 25 , 5 , 3 ] ;
9969: LD_ADDR_VAR 0 9
9973: PUSH
9974: LD_INT 25
9976: PUSH
9977: LD_INT 5
9979: PUSH
9980: LD_INT 3
9982: PUSH
9983: EMPTY
9984: LIST
9985: LIST
9986: LIST
9987: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9988: LD_VAR 0 6
9992: PPUSH
9993: CALL_OW 264
9997: PUSH
9998: LD_INT 4
10000: PUSH
10001: LD_INT 43
10003: PUSH
10004: LD_INT 25
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: LIST
10011: IN
10012: IFFALSE 10033
// points := [ 40 , 15 , 5 ] ;
10014: LD_ADDR_VAR 0 9
10018: PUSH
10019: LD_INT 40
10021: PUSH
10022: LD_INT 15
10024: PUSH
10025: LD_INT 5
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: LIST
10032: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10033: LD_VAR 0 6
10037: PPUSH
10038: CALL_OW 264
10042: PUSH
10043: LD_INT 3
10045: PUSH
10046: LD_INT 23
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: IN
10053: IFFALSE 10074
// points := [ 7 , 25 , 8 ] ;
10055: LD_ADDR_VAR 0 9
10059: PUSH
10060: LD_INT 7
10062: PUSH
10063: LD_INT 25
10065: PUSH
10066: LD_INT 8
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: LIST
10073: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10074: LD_VAR 0 6
10078: PPUSH
10079: CALL_OW 264
10083: PUSH
10084: LD_INT 5
10086: PUSH
10087: LD_INT 27
10089: PUSH
10090: LD_INT 44
10092: PUSH
10093: EMPTY
10094: LIST
10095: LIST
10096: LIST
10097: IN
10098: IFFALSE 10119
// points := [ 14 , 50 , 16 ] ;
10100: LD_ADDR_VAR 0 9
10104: PUSH
10105: LD_INT 14
10107: PUSH
10108: LD_INT 50
10110: PUSH
10111: LD_INT 16
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: LIST
10118: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10119: LD_VAR 0 6
10123: PPUSH
10124: CALL_OW 264
10128: PUSH
10129: LD_INT 6
10131: PUSH
10132: LD_INT 46
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: IN
10139: IFFALSE 10160
// points := [ 32 , 120 , 70 ] ;
10141: LD_ADDR_VAR 0 9
10145: PUSH
10146: LD_INT 32
10148: PUSH
10149: LD_INT 120
10151: PUSH
10152: LD_INT 70
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: LIST
10159: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10160: LD_VAR 0 6
10164: PPUSH
10165: CALL_OW 264
10169: PUSH
10170: LD_INT 7
10172: PUSH
10173: LD_INT 28
10175: PUSH
10176: LD_INT 45
10178: PUSH
10179: LD_INT 92
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: IN
10188: IFFALSE 10209
// points := [ 35 , 20 , 45 ] ;
10190: LD_ADDR_VAR 0 9
10194: PUSH
10195: LD_INT 35
10197: PUSH
10198: LD_INT 20
10200: PUSH
10201: LD_INT 45
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: LIST
10208: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10209: LD_VAR 0 6
10213: PPUSH
10214: CALL_OW 264
10218: PUSH
10219: LD_INT 47
10221: PUSH
10222: EMPTY
10223: LIST
10224: IN
10225: IFFALSE 10246
// points := [ 67 , 45 , 75 ] ;
10227: LD_ADDR_VAR 0 9
10231: PUSH
10232: LD_INT 67
10234: PUSH
10235: LD_INT 45
10237: PUSH
10238: LD_INT 75
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: LIST
10245: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10246: LD_VAR 0 6
10250: PPUSH
10251: CALL_OW 264
10255: PUSH
10256: LD_INT 26
10258: PUSH
10259: EMPTY
10260: LIST
10261: IN
10262: IFFALSE 10283
// points := [ 120 , 30 , 80 ] ;
10264: LD_ADDR_VAR 0 9
10268: PUSH
10269: LD_INT 120
10271: PUSH
10272: LD_INT 30
10274: PUSH
10275: LD_INT 80
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: LIST
10282: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10283: LD_VAR 0 6
10287: PPUSH
10288: CALL_OW 264
10292: PUSH
10293: LD_INT 22
10295: PUSH
10296: EMPTY
10297: LIST
10298: IN
10299: IFFALSE 10320
// points := [ 40 , 1 , 1 ] ;
10301: LD_ADDR_VAR 0 9
10305: PUSH
10306: LD_INT 40
10308: PUSH
10309: LD_INT 1
10311: PUSH
10312: LD_INT 1
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: LIST
10319: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10320: LD_VAR 0 6
10324: PPUSH
10325: CALL_OW 264
10329: PUSH
10330: LD_INT 29
10332: PUSH
10333: EMPTY
10334: LIST
10335: IN
10336: IFFALSE 10357
// points := [ 70 , 200 , 400 ] ;
10338: LD_ADDR_VAR 0 9
10342: PUSH
10343: LD_INT 70
10345: PUSH
10346: LD_INT 200
10348: PUSH
10349: LD_INT 400
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: LIST
10356: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10357: LD_VAR 0 6
10361: PPUSH
10362: CALL_OW 264
10366: PUSH
10367: LD_INT 14
10369: PUSH
10370: LD_INT 53
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: IN
10377: IFFALSE 10398
// points := [ 40 , 10 , 20 ] ;
10379: LD_ADDR_VAR 0 9
10383: PUSH
10384: LD_INT 40
10386: PUSH
10387: LD_INT 10
10389: PUSH
10390: LD_INT 20
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: LIST
10397: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10398: LD_VAR 0 6
10402: PPUSH
10403: CALL_OW 264
10407: PUSH
10408: LD_INT 9
10410: PUSH
10411: EMPTY
10412: LIST
10413: IN
10414: IFFALSE 10435
// points := [ 5 , 70 , 20 ] ;
10416: LD_ADDR_VAR 0 9
10420: PUSH
10421: LD_INT 5
10423: PUSH
10424: LD_INT 70
10426: PUSH
10427: LD_INT 20
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: LIST
10434: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10435: LD_VAR 0 6
10439: PPUSH
10440: CALL_OW 264
10444: PUSH
10445: LD_INT 10
10447: PUSH
10448: EMPTY
10449: LIST
10450: IN
10451: IFFALSE 10472
// points := [ 35 , 110 , 70 ] ;
10453: LD_ADDR_VAR 0 9
10457: PUSH
10458: LD_INT 35
10460: PUSH
10461: LD_INT 110
10463: PUSH
10464: LD_INT 70
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: LIST
10471: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10472: LD_VAR 0 6
10476: PPUSH
10477: CALL_OW 265
10481: PUSH
10482: LD_INT 25
10484: EQUAL
10485: IFFALSE 10506
// points := [ 80 , 65 , 100 ] ;
10487: LD_ADDR_VAR 0 9
10491: PUSH
10492: LD_INT 80
10494: PUSH
10495: LD_INT 65
10497: PUSH
10498: LD_INT 100
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: LIST
10505: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10506: LD_VAR 0 6
10510: PPUSH
10511: CALL_OW 263
10515: PUSH
10516: LD_INT 1
10518: EQUAL
10519: IFFALSE 10554
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10521: LD_ADDR_VAR 0 10
10525: PUSH
10526: LD_VAR 0 10
10530: PUSH
10531: LD_VAR 0 6
10535: PPUSH
10536: CALL_OW 311
10540: PPUSH
10541: LD_INT 3
10543: PPUSH
10544: CALL_OW 259
10548: PUSH
10549: LD_INT 4
10551: MUL
10552: MUL
10553: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10554: LD_VAR 0 6
10558: PPUSH
10559: CALL_OW 263
10563: PUSH
10564: LD_INT 2
10566: EQUAL
10567: IFFALSE 10618
// begin j := IsControledBy ( i ) ;
10569: LD_ADDR_VAR 0 7
10573: PUSH
10574: LD_VAR 0 6
10578: PPUSH
10579: CALL_OW 312
10583: ST_TO_ADDR
// if j then
10584: LD_VAR 0 7
10588: IFFALSE 10618
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10590: LD_ADDR_VAR 0 10
10594: PUSH
10595: LD_VAR 0 10
10599: PUSH
10600: LD_VAR 0 7
10604: PPUSH
10605: LD_INT 3
10607: PPUSH
10608: CALL_OW 259
10612: PUSH
10613: LD_INT 3
10615: MUL
10616: MUL
10617: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10618: LD_VAR 0 6
10622: PPUSH
10623: CALL_OW 264
10627: PUSH
10628: LD_INT 5
10630: PUSH
10631: LD_INT 6
10633: PUSH
10634: LD_INT 46
10636: PUSH
10637: LD_INT 44
10639: PUSH
10640: LD_INT 47
10642: PUSH
10643: LD_INT 45
10645: PUSH
10646: LD_INT 28
10648: PUSH
10649: LD_INT 7
10651: PUSH
10652: LD_INT 27
10654: PUSH
10655: LD_INT 29
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: IN
10670: IFFALSE 10690
10672: PUSH
10673: LD_VAR 0 1
10677: PPUSH
10678: LD_INT 52
10680: PPUSH
10681: CALL_OW 321
10685: PUSH
10686: LD_INT 2
10688: EQUAL
10689: AND
10690: IFFALSE 10707
// bpoints := bpoints * 1.2 ;
10692: LD_ADDR_VAR 0 10
10696: PUSH
10697: LD_VAR 0 10
10701: PUSH
10702: LD_REAL  1.20000000000000E+0000
10705: MUL
10706: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10707: LD_VAR 0 6
10711: PPUSH
10712: CALL_OW 264
10716: PUSH
10717: LD_INT 6
10719: PUSH
10720: LD_INT 46
10722: PUSH
10723: LD_INT 47
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: LIST
10730: IN
10731: IFFALSE 10748
// bpoints := bpoints * 1.2 ;
10733: LD_ADDR_VAR 0 10
10737: PUSH
10738: LD_VAR 0 10
10742: PUSH
10743: LD_REAL  1.20000000000000E+0000
10746: MUL
10747: ST_TO_ADDR
// end ; unit_building :
10748: GO 10762
10750: LD_INT 3
10752: DOUBLE
10753: EQUAL
10754: IFTRUE 10758
10756: GO 10761
10758: POP
// ; end ;
10759: GO 10762
10761: POP
// for j = 1 to 3 do
10762: LD_ADDR_VAR 0 7
10766: PUSH
10767: DOUBLE
10768: LD_INT 1
10770: DEC
10771: ST_TO_ADDR
10772: LD_INT 3
10774: PUSH
10775: FOR_TO
10776: IFFALSE 10829
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10778: LD_ADDR_VAR 0 5
10782: PUSH
10783: LD_VAR 0 5
10787: PPUSH
10788: LD_VAR 0 7
10792: PPUSH
10793: LD_VAR 0 5
10797: PUSH
10798: LD_VAR 0 7
10802: ARRAY
10803: PUSH
10804: LD_VAR 0 9
10808: PUSH
10809: LD_VAR 0 7
10813: ARRAY
10814: PUSH
10815: LD_VAR 0 10
10819: MUL
10820: PLUS
10821: PPUSH
10822: CALL_OW 1
10826: ST_TO_ADDR
10827: GO 10775
10829: POP
10830: POP
// end ;
10831: GO 9304
10833: POP
10834: POP
// result := Replace ( result , 4 , tmp ) ;
10835: LD_ADDR_VAR 0 5
10839: PUSH
10840: LD_VAR 0 5
10844: PPUSH
10845: LD_INT 4
10847: PPUSH
10848: LD_VAR 0 8
10852: PPUSH
10853: CALL_OW 1
10857: ST_TO_ADDR
// end ;
10858: LD_VAR 0 5
10862: RET
// export function DangerAtRange ( unit , range ) ; begin
10863: LD_INT 0
10865: PPUSH
// if not unit then
10866: LD_VAR 0 1
10870: NOT
10871: IFFALSE 10875
// exit ;
10873: GO 10920
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10875: LD_ADDR_VAR 0 3
10879: PUSH
10880: LD_VAR 0 1
10884: PPUSH
10885: CALL_OW 255
10889: PPUSH
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 250
10899: PPUSH
10900: LD_VAR 0 1
10904: PPUSH
10905: CALL_OW 251
10909: PPUSH
10910: LD_VAR 0 2
10914: PPUSH
10915: CALL 9154 0 4
10919: ST_TO_ADDR
// end ;
10920: LD_VAR 0 3
10924: RET
// export function DangerInArea ( side , area ) ; begin
10925: LD_INT 0
10927: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10928: LD_ADDR_VAR 0 3
10932: PUSH
10933: LD_VAR 0 2
10937: PPUSH
10938: LD_INT 81
10940: PUSH
10941: LD_VAR 0 1
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: PPUSH
10950: CALL_OW 70
10954: ST_TO_ADDR
// end ;
10955: LD_VAR 0 3
10959: RET
// export function IsExtension ( b ) ; begin
10960: LD_INT 0
10962: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10963: LD_ADDR_VAR 0 2
10967: PUSH
10968: LD_VAR 0 1
10972: PUSH
10973: LD_INT 23
10975: PUSH
10976: LD_INT 20
10978: PUSH
10979: LD_INT 22
10981: PUSH
10982: LD_INT 17
10984: PUSH
10985: LD_INT 24
10987: PUSH
10988: LD_INT 21
10990: PUSH
10991: LD_INT 19
10993: PUSH
10994: LD_INT 16
10996: PUSH
10997: LD_INT 25
10999: PUSH
11000: LD_INT 18
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: IN
11015: ST_TO_ADDR
// end ;
11016: LD_VAR 0 2
11020: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11021: LD_INT 0
11023: PPUSH
11024: PPUSH
11025: PPUSH
// result := [ ] ;
11026: LD_ADDR_VAR 0 4
11030: PUSH
11031: EMPTY
11032: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11033: LD_ADDR_VAR 0 5
11037: PUSH
11038: LD_VAR 0 2
11042: PPUSH
11043: LD_INT 21
11045: PUSH
11046: LD_INT 3
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PPUSH
11053: CALL_OW 70
11057: ST_TO_ADDR
// if not tmp then
11058: LD_VAR 0 5
11062: NOT
11063: IFFALSE 11067
// exit ;
11065: GO 11131
// if checkLink then
11067: LD_VAR 0 3
11071: IFFALSE 11121
// begin for i in tmp do
11073: LD_ADDR_VAR 0 6
11077: PUSH
11078: LD_VAR 0 5
11082: PUSH
11083: FOR_IN
11084: IFFALSE 11119
// if GetBase ( i ) <> base then
11086: LD_VAR 0 6
11090: PPUSH
11091: CALL_OW 274
11095: PUSH
11096: LD_VAR 0 1
11100: NONEQUAL
11101: IFFALSE 11117
// ComLinkToBase ( base , i ) ;
11103: LD_VAR 0 1
11107: PPUSH
11108: LD_VAR 0 6
11112: PPUSH
11113: CALL_OW 169
11117: GO 11083
11119: POP
11120: POP
// end ; result := tmp ;
11121: LD_ADDR_VAR 0 4
11125: PUSH
11126: LD_VAR 0 5
11130: ST_TO_ADDR
// end ;
11131: LD_VAR 0 4
11135: RET
// export function ComComplete ( units , b ) ; var i ; begin
11136: LD_INT 0
11138: PPUSH
11139: PPUSH
// if not units then
11140: LD_VAR 0 1
11144: NOT
11145: IFFALSE 11149
// exit ;
11147: GO 11239
// for i in units do
11149: LD_ADDR_VAR 0 4
11153: PUSH
11154: LD_VAR 0 1
11158: PUSH
11159: FOR_IN
11160: IFFALSE 11237
// if BuildingStatus ( b ) = bs_build then
11162: LD_VAR 0 2
11166: PPUSH
11167: CALL_OW 461
11171: PUSH
11172: LD_INT 1
11174: EQUAL
11175: IFFALSE 11235
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11177: LD_VAR 0 4
11181: PPUSH
11182: LD_STRING h
11184: PUSH
11185: LD_VAR 0 2
11189: PPUSH
11190: CALL_OW 250
11194: PUSH
11195: LD_VAR 0 2
11199: PPUSH
11200: CALL_OW 251
11204: PUSH
11205: LD_VAR 0 2
11209: PUSH
11210: LD_INT 0
11212: PUSH
11213: LD_INT 0
11215: PUSH
11216: LD_INT 0
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: PUSH
11228: EMPTY
11229: LIST
11230: PPUSH
11231: CALL_OW 446
11235: GO 11159
11237: POP
11238: POP
// end ;
11239: LD_VAR 0 3
11243: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11244: LD_INT 0
11246: PPUSH
11247: PPUSH
11248: PPUSH
11249: PPUSH
11250: PPUSH
11251: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11252: LD_VAR 0 1
11256: NOT
11257: IFTRUE 11274
11259: PUSH
11260: LD_VAR 0 1
11264: PPUSH
11265: CALL_OW 263
11269: PUSH
11270: LD_INT 2
11272: NONEQUAL
11273: OR
11274: IFFALSE 11278
// exit ;
11276: GO 11594
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11278: LD_ADDR_VAR 0 6
11282: PUSH
11283: LD_INT 22
11285: PUSH
11286: LD_VAR 0 1
11290: PPUSH
11291: CALL_OW 255
11295: PUSH
11296: EMPTY
11297: LIST
11298: LIST
11299: PUSH
11300: LD_INT 2
11302: PUSH
11303: LD_INT 30
11305: PUSH
11306: LD_INT 36
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PUSH
11313: LD_INT 34
11315: PUSH
11316: LD_INT 31
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: LIST
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PPUSH
11332: CALL_OW 69
11336: ST_TO_ADDR
// if not tmp then
11337: LD_VAR 0 6
11341: NOT
11342: IFFALSE 11346
// exit ;
11344: GO 11594
// result := [ ] ;
11346: LD_ADDR_VAR 0 2
11350: PUSH
11351: EMPTY
11352: ST_TO_ADDR
// for i in tmp do
11353: LD_ADDR_VAR 0 3
11357: PUSH
11358: LD_VAR 0 6
11362: PUSH
11363: FOR_IN
11364: IFFALSE 11435
// begin t := UnitsInside ( i ) ;
11366: LD_ADDR_VAR 0 4
11370: PUSH
11371: LD_VAR 0 3
11375: PPUSH
11376: CALL_OW 313
11380: ST_TO_ADDR
// if t then
11381: LD_VAR 0 4
11385: IFFALSE 11433
// for j in t do
11387: LD_ADDR_VAR 0 7
11391: PUSH
11392: LD_VAR 0 4
11396: PUSH
11397: FOR_IN
11398: IFFALSE 11431
// result := Replace ( result , result + 1 , j ) ;
11400: LD_ADDR_VAR 0 2
11404: PUSH
11405: LD_VAR 0 2
11409: PPUSH
11410: LD_VAR 0 2
11414: PUSH
11415: LD_INT 1
11417: PLUS
11418: PPUSH
11419: LD_VAR 0 7
11423: PPUSH
11424: CALL_OW 1
11428: ST_TO_ADDR
11429: GO 11397
11431: POP
11432: POP
// end ;
11433: GO 11363
11435: POP
11436: POP
// if not result then
11437: LD_VAR 0 2
11441: NOT
11442: IFFALSE 11446
// exit ;
11444: GO 11594
// mech := result [ 1 ] ;
11446: LD_ADDR_VAR 0 5
11450: PUSH
11451: LD_VAR 0 2
11455: PUSH
11456: LD_INT 1
11458: ARRAY
11459: ST_TO_ADDR
// if result > 1 then
11460: LD_VAR 0 2
11464: PUSH
11465: LD_INT 1
11467: GREATER
11468: IFFALSE 11580
// begin for i = 2 to result do
11470: LD_ADDR_VAR 0 3
11474: PUSH
11475: DOUBLE
11476: LD_INT 2
11478: DEC
11479: ST_TO_ADDR
11480: LD_VAR 0 2
11484: PUSH
11485: FOR_TO
11486: IFFALSE 11578
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11488: LD_ADDR_VAR 0 4
11492: PUSH
11493: LD_VAR 0 2
11497: PUSH
11498: LD_VAR 0 3
11502: ARRAY
11503: PPUSH
11504: LD_INT 3
11506: PPUSH
11507: CALL_OW 259
11511: PUSH
11512: LD_VAR 0 2
11516: PUSH
11517: LD_VAR 0 3
11521: ARRAY
11522: PPUSH
11523: CALL_OW 432
11527: MINUS
11528: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11529: LD_VAR 0 4
11533: PUSH
11534: LD_VAR 0 5
11538: PPUSH
11539: LD_INT 3
11541: PPUSH
11542: CALL_OW 259
11546: PUSH
11547: LD_VAR 0 5
11551: PPUSH
11552: CALL_OW 432
11556: MINUS
11557: GREATEREQUAL
11558: IFFALSE 11576
// mech := result [ i ] ;
11560: LD_ADDR_VAR 0 5
11564: PUSH
11565: LD_VAR 0 2
11569: PUSH
11570: LD_VAR 0 3
11574: ARRAY
11575: ST_TO_ADDR
// end ;
11576: GO 11485
11578: POP
11579: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11580: LD_VAR 0 1
11584: PPUSH
11585: LD_VAR 0 5
11589: PPUSH
11590: CALL_OW 135
// end ;
11594: LD_VAR 0 2
11598: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11599: LD_INT 0
11601: PPUSH
11602: PPUSH
11603: PPUSH
11604: PPUSH
11605: PPUSH
11606: PPUSH
11607: PPUSH
11608: PPUSH
11609: PPUSH
11610: PPUSH
11611: PPUSH
11612: PPUSH
11613: PPUSH
// result := [ ] ;
11614: LD_ADDR_VAR 0 7
11618: PUSH
11619: EMPTY
11620: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11621: LD_VAR 0 1
11625: PPUSH
11626: CALL_OW 266
11630: PUSH
11631: LD_INT 0
11633: PUSH
11634: LD_INT 1
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: IN
11641: NOT
11642: IFFALSE 11646
// exit ;
11644: GO 13286
// if name then
11646: LD_VAR 0 3
11650: IFFALSE 11666
// SetBName ( base_dep , name ) ;
11652: LD_VAR 0 1
11656: PPUSH
11657: LD_VAR 0 3
11661: PPUSH
11662: CALL_OW 500
// base := GetBase ( base_dep ) ;
11666: LD_ADDR_VAR 0 15
11670: PUSH
11671: LD_VAR 0 1
11675: PPUSH
11676: CALL_OW 274
11680: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11681: LD_ADDR_VAR 0 16
11685: PUSH
11686: LD_VAR 0 1
11690: PPUSH
11691: CALL_OW 255
11695: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11696: LD_ADDR_VAR 0 17
11700: PUSH
11701: LD_VAR 0 1
11705: PPUSH
11706: CALL_OW 248
11710: ST_TO_ADDR
// if sources then
11711: LD_VAR 0 5
11715: IFFALSE 11762
// for i = 1 to 3 do
11717: LD_ADDR_VAR 0 8
11721: PUSH
11722: DOUBLE
11723: LD_INT 1
11725: DEC
11726: ST_TO_ADDR
11727: LD_INT 3
11729: PUSH
11730: FOR_TO
11731: IFFALSE 11760
// AddResourceType ( base , i , sources [ i ] ) ;
11733: LD_VAR 0 15
11737: PPUSH
11738: LD_VAR 0 8
11742: PPUSH
11743: LD_VAR 0 5
11747: PUSH
11748: LD_VAR 0 8
11752: ARRAY
11753: PPUSH
11754: CALL_OW 276
11758: GO 11730
11760: POP
11761: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11762: LD_ADDR_VAR 0 18
11766: PUSH
11767: LD_VAR 0 15
11771: PPUSH
11772: LD_VAR 0 2
11776: PPUSH
11777: LD_INT 1
11779: PPUSH
11780: CALL 11021 0 3
11784: ST_TO_ADDR
// InitHc ;
11785: CALL_OW 19
// InitUc ;
11789: CALL_OW 18
// uc_side := side ;
11793: LD_ADDR_OWVAR 20
11797: PUSH
11798: LD_VAR 0 16
11802: ST_TO_ADDR
// uc_nation := nation ;
11803: LD_ADDR_OWVAR 21
11807: PUSH
11808: LD_VAR 0 17
11812: ST_TO_ADDR
// if buildings then
11813: LD_VAR 0 18
11817: IFFALSE 13145
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11819: LD_ADDR_VAR 0 19
11823: PUSH
11824: LD_VAR 0 18
11828: PPUSH
11829: LD_INT 2
11831: PUSH
11832: LD_INT 30
11834: PUSH
11835: LD_INT 29
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: PUSH
11842: LD_INT 30
11844: PUSH
11845: LD_INT 30
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: LIST
11856: PPUSH
11857: CALL_OW 72
11861: ST_TO_ADDR
// if tmp then
11862: LD_VAR 0 19
11866: IFFALSE 11914
// for i in tmp do
11868: LD_ADDR_VAR 0 8
11872: PUSH
11873: LD_VAR 0 19
11877: PUSH
11878: FOR_IN
11879: IFFALSE 11912
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11881: LD_VAR 0 8
11885: PPUSH
11886: CALL_OW 250
11890: PPUSH
11891: LD_VAR 0 8
11895: PPUSH
11896: CALL_OW 251
11900: PPUSH
11901: LD_VAR 0 16
11905: PPUSH
11906: CALL_OW 441
11910: GO 11878
11912: POP
11913: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11914: LD_VAR 0 18
11918: PPUSH
11919: LD_INT 2
11921: PUSH
11922: LD_INT 30
11924: PUSH
11925: LD_INT 32
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PUSH
11932: LD_INT 30
11934: PUSH
11935: LD_INT 33
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: LIST
11946: PPUSH
11947: CALL_OW 72
11951: IFFALSE 12039
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11953: LD_ADDR_VAR 0 8
11957: PUSH
11958: LD_VAR 0 18
11962: PPUSH
11963: LD_INT 2
11965: PUSH
11966: LD_INT 30
11968: PUSH
11969: LD_INT 32
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PUSH
11976: LD_INT 30
11978: PUSH
11979: LD_INT 33
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: LIST
11990: PPUSH
11991: CALL_OW 72
11995: PUSH
11996: FOR_IN
11997: IFFALSE 12037
// begin if not GetBWeapon ( i ) then
11999: LD_VAR 0 8
12003: PPUSH
12004: CALL_OW 269
12008: NOT
12009: IFFALSE 12035
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12011: LD_VAR 0 8
12015: PPUSH
12016: LD_VAR 0 8
12020: PPUSH
12021: LD_VAR 0 2
12025: PPUSH
12026: CALL 13291 0 2
12030: PPUSH
12031: CALL_OW 431
// end ;
12035: GO 11996
12037: POP
12038: POP
// end ; for i = 1 to personel do
12039: LD_ADDR_VAR 0 8
12043: PUSH
12044: DOUBLE
12045: LD_INT 1
12047: DEC
12048: ST_TO_ADDR
12049: LD_VAR 0 6
12053: PUSH
12054: FOR_TO
12055: IFFALSE 13125
// begin if i > 4 then
12057: LD_VAR 0 8
12061: PUSH
12062: LD_INT 4
12064: GREATER
12065: IFFALSE 12069
// break ;
12067: GO 13125
// case i of 1 :
12069: LD_VAR 0 8
12073: PUSH
12074: LD_INT 1
12076: DOUBLE
12077: EQUAL
12078: IFTRUE 12082
12080: GO 12162
12082: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12083: LD_ADDR_VAR 0 12
12087: PUSH
12088: LD_VAR 0 18
12092: PPUSH
12093: LD_INT 22
12095: PUSH
12096: LD_VAR 0 16
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PUSH
12105: LD_INT 58
12107: PUSH
12108: EMPTY
12109: LIST
12110: PUSH
12111: LD_INT 2
12113: PUSH
12114: LD_INT 30
12116: PUSH
12117: LD_INT 32
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: PUSH
12124: LD_INT 30
12126: PUSH
12127: LD_INT 4
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: PUSH
12134: LD_INT 30
12136: PUSH
12137: LD_INT 5
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: LIST
12154: PPUSH
12155: CALL_OW 72
12159: ST_TO_ADDR
12160: GO 12384
12162: LD_INT 2
12164: DOUBLE
12165: EQUAL
12166: IFTRUE 12170
12168: GO 12232
12170: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12171: LD_ADDR_VAR 0 12
12175: PUSH
12176: LD_VAR 0 18
12180: PPUSH
12181: LD_INT 22
12183: PUSH
12184: LD_VAR 0 16
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: PUSH
12193: LD_INT 2
12195: PUSH
12196: LD_INT 30
12198: PUSH
12199: LD_INT 0
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PUSH
12206: LD_INT 30
12208: PUSH
12209: LD_INT 1
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PPUSH
12225: CALL_OW 72
12229: ST_TO_ADDR
12230: GO 12384
12232: LD_INT 3
12234: DOUBLE
12235: EQUAL
12236: IFTRUE 12240
12238: GO 12302
12240: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12241: LD_ADDR_VAR 0 12
12245: PUSH
12246: LD_VAR 0 18
12250: PPUSH
12251: LD_INT 22
12253: PUSH
12254: LD_VAR 0 16
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PUSH
12263: LD_INT 2
12265: PUSH
12266: LD_INT 30
12268: PUSH
12269: LD_INT 2
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: PUSH
12276: LD_INT 30
12278: PUSH
12279: LD_INT 3
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: LIST
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PPUSH
12295: CALL_OW 72
12299: ST_TO_ADDR
12300: GO 12384
12302: LD_INT 4
12304: DOUBLE
12305: EQUAL
12306: IFTRUE 12310
12308: GO 12383
12310: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12311: LD_ADDR_VAR 0 12
12315: PUSH
12316: LD_VAR 0 18
12320: PPUSH
12321: LD_INT 22
12323: PUSH
12324: LD_VAR 0 16
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 2
12335: PUSH
12336: LD_INT 30
12338: PUSH
12339: LD_INT 6
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: LD_INT 30
12348: PUSH
12349: LD_INT 7
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PUSH
12356: LD_INT 30
12358: PUSH
12359: LD_INT 8
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PPUSH
12376: CALL_OW 72
12380: ST_TO_ADDR
12381: GO 12384
12383: POP
// if i = 1 then
12384: LD_VAR 0 8
12388: PUSH
12389: LD_INT 1
12391: EQUAL
12392: IFFALSE 12503
// begin tmp := [ ] ;
12394: LD_ADDR_VAR 0 19
12398: PUSH
12399: EMPTY
12400: ST_TO_ADDR
// for j in f do
12401: LD_ADDR_VAR 0 9
12405: PUSH
12406: LD_VAR 0 12
12410: PUSH
12411: FOR_IN
12412: IFFALSE 12485
// if GetBType ( j ) = b_bunker then
12414: LD_VAR 0 9
12418: PPUSH
12419: CALL_OW 266
12423: PUSH
12424: LD_INT 32
12426: EQUAL
12427: IFFALSE 12454
// tmp := Insert ( tmp , 1 , j ) else
12429: LD_ADDR_VAR 0 19
12433: PUSH
12434: LD_VAR 0 19
12438: PPUSH
12439: LD_INT 1
12441: PPUSH
12442: LD_VAR 0 9
12446: PPUSH
12447: CALL_OW 2
12451: ST_TO_ADDR
12452: GO 12483
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12454: LD_ADDR_VAR 0 19
12458: PUSH
12459: LD_VAR 0 19
12463: PPUSH
12464: LD_VAR 0 19
12468: PUSH
12469: LD_INT 1
12471: PLUS
12472: PPUSH
12473: LD_VAR 0 9
12477: PPUSH
12478: CALL_OW 2
12482: ST_TO_ADDR
12483: GO 12411
12485: POP
12486: POP
// if tmp then
12487: LD_VAR 0 19
12491: IFFALSE 12503
// f := tmp ;
12493: LD_ADDR_VAR 0 12
12497: PUSH
12498: LD_VAR 0 19
12502: ST_TO_ADDR
// end ; x := personel [ i ] ;
12503: LD_ADDR_VAR 0 13
12507: PUSH
12508: LD_VAR 0 6
12512: PUSH
12513: LD_VAR 0 8
12517: ARRAY
12518: ST_TO_ADDR
// if x = - 1 then
12519: LD_VAR 0 13
12523: PUSH
12524: LD_INT 1
12526: NEG
12527: EQUAL
12528: IFFALSE 12739
// begin for j in f do
12530: LD_ADDR_VAR 0 9
12534: PUSH
12535: LD_VAR 0 12
12539: PUSH
12540: FOR_IN
12541: IFFALSE 12735
// repeat InitHc ;
12543: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12547: LD_VAR 0 9
12551: PPUSH
12552: CALL_OW 266
12556: PUSH
12557: LD_INT 5
12559: EQUAL
12560: IFFALSE 12630
// begin if UnitsInside ( j ) < 3 then
12562: LD_VAR 0 9
12566: PPUSH
12567: CALL_OW 313
12571: PUSH
12572: LD_INT 3
12574: LESS
12575: IFFALSE 12611
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12577: LD_INT 0
12579: PPUSH
12580: LD_INT 5
12582: PUSH
12583: LD_INT 8
12585: PUSH
12586: LD_INT 9
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: LIST
12593: PUSH
12594: LD_VAR 0 17
12598: ARRAY
12599: PPUSH
12600: LD_VAR 0 4
12604: PPUSH
12605: CALL_OW 380
12609: GO 12628
// PrepareHuman ( false , i , skill ) ;
12611: LD_INT 0
12613: PPUSH
12614: LD_VAR 0 8
12618: PPUSH
12619: LD_VAR 0 4
12623: PPUSH
12624: CALL_OW 380
// end else
12628: GO 12647
// PrepareHuman ( false , i , skill ) ;
12630: LD_INT 0
12632: PPUSH
12633: LD_VAR 0 8
12637: PPUSH
12638: LD_VAR 0 4
12642: PPUSH
12643: CALL_OW 380
// un := CreateHuman ;
12647: LD_ADDR_VAR 0 14
12651: PUSH
12652: CALL_OW 44
12656: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12657: LD_ADDR_VAR 0 7
12661: PUSH
12662: LD_VAR 0 7
12666: PPUSH
12667: LD_INT 1
12669: PPUSH
12670: LD_VAR 0 14
12674: PPUSH
12675: CALL_OW 2
12679: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12680: LD_VAR 0 14
12684: PPUSH
12685: LD_VAR 0 9
12689: PPUSH
12690: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12694: LD_VAR 0 9
12698: PPUSH
12699: CALL_OW 313
12703: PUSH
12704: LD_INT 6
12706: EQUAL
12707: IFTRUE 12731
12709: PUSH
12710: LD_VAR 0 9
12714: PPUSH
12715: CALL_OW 266
12719: PUSH
12720: LD_INT 32
12722: PUSH
12723: LD_INT 31
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: IN
12730: OR
12731: IFFALSE 12543
12733: GO 12540
12735: POP
12736: POP
// end else
12737: GO 13123
// for j = 1 to x do
12739: LD_ADDR_VAR 0 9
12743: PUSH
12744: DOUBLE
12745: LD_INT 1
12747: DEC
12748: ST_TO_ADDR
12749: LD_VAR 0 13
12753: PUSH
12754: FOR_TO
12755: IFFALSE 13121
// begin InitHc ;
12757: CALL_OW 19
// if not f then
12761: LD_VAR 0 12
12765: NOT
12766: IFFALSE 12855
// begin PrepareHuman ( false , i , skill ) ;
12768: LD_INT 0
12770: PPUSH
12771: LD_VAR 0 8
12775: PPUSH
12776: LD_VAR 0 4
12780: PPUSH
12781: CALL_OW 380
// un := CreateHuman ;
12785: LD_ADDR_VAR 0 14
12789: PUSH
12790: CALL_OW 44
12794: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12795: LD_ADDR_VAR 0 7
12799: PUSH
12800: LD_VAR 0 7
12804: PPUSH
12805: LD_INT 1
12807: PPUSH
12808: LD_VAR 0 14
12812: PPUSH
12813: CALL_OW 2
12817: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12818: LD_VAR 0 14
12822: PPUSH
12823: LD_VAR 0 1
12827: PPUSH
12828: CALL_OW 250
12832: PPUSH
12833: LD_VAR 0 1
12837: PPUSH
12838: CALL_OW 251
12842: PPUSH
12843: LD_INT 10
12845: PPUSH
12846: LD_INT 0
12848: PPUSH
12849: CALL_OW 50
// continue ;
12853: GO 12754
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12855: LD_VAR 0 12
12859: PUSH
12860: LD_INT 1
12862: ARRAY
12863: PPUSH
12864: CALL_OW 313
12868: IFFALSE 12896
12870: PUSH
12871: LD_VAR 0 12
12875: PUSH
12876: LD_INT 1
12878: ARRAY
12879: PPUSH
12880: CALL_OW 266
12884: PUSH
12885: LD_INT 32
12887: PUSH
12888: LD_INT 31
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: IN
12895: AND
12896: IFTRUE 12917
12898: PUSH
12899: LD_VAR 0 12
12903: PUSH
12904: LD_INT 1
12906: ARRAY
12907: PPUSH
12908: CALL_OW 313
12912: PUSH
12913: LD_INT 6
12915: EQUAL
12916: OR
12917: IFFALSE 12937
// f := Delete ( f , 1 ) ;
12919: LD_ADDR_VAR 0 12
12923: PUSH
12924: LD_VAR 0 12
12928: PPUSH
12929: LD_INT 1
12931: PPUSH
12932: CALL_OW 3
12936: ST_TO_ADDR
// if not f then
12937: LD_VAR 0 12
12941: NOT
12942: IFFALSE 12960
// begin x := x + 2 ;
12944: LD_ADDR_VAR 0 13
12948: PUSH
12949: LD_VAR 0 13
12953: PUSH
12954: LD_INT 2
12956: PLUS
12957: ST_TO_ADDR
// continue ;
12958: GO 12754
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12960: LD_VAR 0 12
12964: PUSH
12965: LD_INT 1
12967: ARRAY
12968: PPUSH
12969: CALL_OW 266
12973: PUSH
12974: LD_INT 5
12976: EQUAL
12977: IFFALSE 13051
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12979: LD_VAR 0 12
12983: PUSH
12984: LD_INT 1
12986: ARRAY
12987: PPUSH
12988: CALL_OW 313
12992: PUSH
12993: LD_INT 3
12995: LESS
12996: IFFALSE 13032
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12998: LD_INT 0
13000: PPUSH
13001: LD_INT 5
13003: PUSH
13004: LD_INT 8
13006: PUSH
13007: LD_INT 9
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: PUSH
13015: LD_VAR 0 17
13019: ARRAY
13020: PPUSH
13021: LD_VAR 0 4
13025: PPUSH
13026: CALL_OW 380
13030: GO 13049
// PrepareHuman ( false , i , skill ) ;
13032: LD_INT 0
13034: PPUSH
13035: LD_VAR 0 8
13039: PPUSH
13040: LD_VAR 0 4
13044: PPUSH
13045: CALL_OW 380
// end else
13049: GO 13068
// PrepareHuman ( false , i , skill ) ;
13051: LD_INT 0
13053: PPUSH
13054: LD_VAR 0 8
13058: PPUSH
13059: LD_VAR 0 4
13063: PPUSH
13064: CALL_OW 380
// un := CreateHuman ;
13068: LD_ADDR_VAR 0 14
13072: PUSH
13073: CALL_OW 44
13077: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13078: LD_ADDR_VAR 0 7
13082: PUSH
13083: LD_VAR 0 7
13087: PPUSH
13088: LD_INT 1
13090: PPUSH
13091: LD_VAR 0 14
13095: PPUSH
13096: CALL_OW 2
13100: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13101: LD_VAR 0 14
13105: PPUSH
13106: LD_VAR 0 12
13110: PUSH
13111: LD_INT 1
13113: ARRAY
13114: PPUSH
13115: CALL_OW 52
// end ;
13119: GO 12754
13121: POP
13122: POP
// end ;
13123: GO 12054
13125: POP
13126: POP
// result := result ^ buildings ;
13127: LD_ADDR_VAR 0 7
13131: PUSH
13132: LD_VAR 0 7
13136: PUSH
13137: LD_VAR 0 18
13141: ADD
13142: ST_TO_ADDR
// end else
13143: GO 13286
// begin for i = 1 to personel do
13145: LD_ADDR_VAR 0 8
13149: PUSH
13150: DOUBLE
13151: LD_INT 1
13153: DEC
13154: ST_TO_ADDR
13155: LD_VAR 0 6
13159: PUSH
13160: FOR_TO
13161: IFFALSE 13284
// begin if i > 4 then
13163: LD_VAR 0 8
13167: PUSH
13168: LD_INT 4
13170: GREATER
13171: IFFALSE 13175
// break ;
13173: GO 13284
// x := personel [ i ] ;
13175: LD_ADDR_VAR 0 13
13179: PUSH
13180: LD_VAR 0 6
13184: PUSH
13185: LD_VAR 0 8
13189: ARRAY
13190: ST_TO_ADDR
// if x = - 1 then
13191: LD_VAR 0 13
13195: PUSH
13196: LD_INT 1
13198: NEG
13199: EQUAL
13200: IFFALSE 13204
// continue ;
13202: GO 13160
// PrepareHuman ( false , i , skill ) ;
13204: LD_INT 0
13206: PPUSH
13207: LD_VAR 0 8
13211: PPUSH
13212: LD_VAR 0 4
13216: PPUSH
13217: CALL_OW 380
// un := CreateHuman ;
13221: LD_ADDR_VAR 0 14
13225: PUSH
13226: CALL_OW 44
13230: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13231: LD_VAR 0 14
13235: PPUSH
13236: LD_VAR 0 1
13240: PPUSH
13241: CALL_OW 250
13245: PPUSH
13246: LD_VAR 0 1
13250: PPUSH
13251: CALL_OW 251
13255: PPUSH
13256: LD_INT 10
13258: PPUSH
13259: LD_INT 0
13261: PPUSH
13262: CALL_OW 50
// result := result ^ un ;
13266: LD_ADDR_VAR 0 7
13270: PUSH
13271: LD_VAR 0 7
13275: PUSH
13276: LD_VAR 0 14
13280: ADD
13281: ST_TO_ADDR
// end ;
13282: GO 13160
13284: POP
13285: POP
// end ; end ;
13286: LD_VAR 0 7
13290: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13291: LD_INT 0
13293: PPUSH
13294: PPUSH
13295: PPUSH
13296: PPUSH
13297: PPUSH
13298: PPUSH
13299: PPUSH
13300: PPUSH
13301: PPUSH
13302: PPUSH
13303: PPUSH
13304: PPUSH
13305: PPUSH
13306: PPUSH
13307: PPUSH
13308: PPUSH
// result := false ;
13309: LD_ADDR_VAR 0 3
13313: PUSH
13314: LD_INT 0
13316: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13317: LD_VAR 0 1
13321: NOT
13322: IFTRUE 13347
13324: PUSH
13325: LD_VAR 0 1
13329: PPUSH
13330: CALL_OW 266
13334: PUSH
13335: LD_INT 32
13337: PUSH
13338: LD_INT 33
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: IN
13345: NOT
13346: OR
13347: IFFALSE 13351
// exit ;
13349: GO 14486
// nat := GetNation ( tower ) ;
13351: LD_ADDR_VAR 0 12
13355: PUSH
13356: LD_VAR 0 1
13360: PPUSH
13361: CALL_OW 248
13365: ST_TO_ADDR
// side := GetSide ( tower ) ;
13366: LD_ADDR_VAR 0 16
13370: PUSH
13371: LD_VAR 0 1
13375: PPUSH
13376: CALL_OW 255
13380: ST_TO_ADDR
// x := GetX ( tower ) ;
13381: LD_ADDR_VAR 0 10
13385: PUSH
13386: LD_VAR 0 1
13390: PPUSH
13391: CALL_OW 250
13395: ST_TO_ADDR
// y := GetY ( tower ) ;
13396: LD_ADDR_VAR 0 11
13400: PUSH
13401: LD_VAR 0 1
13405: PPUSH
13406: CALL_OW 251
13410: ST_TO_ADDR
// if not x or not y then
13411: LD_VAR 0 10
13415: NOT
13416: IFTRUE 13425
13418: PUSH
13419: LD_VAR 0 11
13423: NOT
13424: OR
13425: IFFALSE 13429
// exit ;
13427: GO 14486
// weapon := 0 ;
13429: LD_ADDR_VAR 0 18
13433: PUSH
13434: LD_INT 0
13436: ST_TO_ADDR
// fac_list := [ ] ;
13437: LD_ADDR_VAR 0 17
13441: PUSH
13442: EMPTY
13443: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13444: LD_ADDR_VAR 0 6
13448: PUSH
13449: LD_VAR 0 1
13453: PPUSH
13454: CALL_OW 274
13458: PPUSH
13459: LD_VAR 0 2
13463: PPUSH
13464: LD_INT 0
13466: PPUSH
13467: CALL 11021 0 3
13471: PPUSH
13472: LD_INT 30
13474: PUSH
13475: LD_INT 3
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PPUSH
13482: CALL_OW 72
13486: ST_TO_ADDR
// if not factories then
13487: LD_VAR 0 6
13491: NOT
13492: IFFALSE 13496
// exit ;
13494: GO 14486
// for i in factories do
13496: LD_ADDR_VAR 0 8
13500: PUSH
13501: LD_VAR 0 6
13505: PUSH
13506: FOR_IN
13507: IFFALSE 13532
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13509: LD_ADDR_VAR 0 17
13513: PUSH
13514: LD_VAR 0 17
13518: PUSH
13519: LD_VAR 0 8
13523: PPUSH
13524: CALL_OW 478
13528: UNION
13529: ST_TO_ADDR
13530: GO 13506
13532: POP
13533: POP
// if not fac_list then
13534: LD_VAR 0 17
13538: NOT
13539: IFFALSE 13543
// exit ;
13541: GO 14486
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13543: LD_ADDR_VAR 0 5
13547: PUSH
13548: LD_INT 4
13550: PUSH
13551: LD_INT 5
13553: PUSH
13554: LD_INT 9
13556: PUSH
13557: LD_INT 10
13559: PUSH
13560: LD_INT 6
13562: PUSH
13563: LD_INT 7
13565: PUSH
13566: LD_INT 11
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: PUSH
13578: LD_INT 27
13580: PUSH
13581: LD_INT 28
13583: PUSH
13584: LD_INT 26
13586: PUSH
13587: LD_INT 30
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: PUSH
13596: LD_INT 43
13598: PUSH
13599: LD_INT 44
13601: PUSH
13602: LD_INT 46
13604: PUSH
13605: LD_INT 45
13607: PUSH
13608: LD_INT 47
13610: PUSH
13611: LD_INT 49
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: LIST
13626: PUSH
13627: LD_VAR 0 12
13631: ARRAY
13632: ST_TO_ADDR
// list := list isect fac_list ;
13633: LD_ADDR_VAR 0 5
13637: PUSH
13638: LD_VAR 0 5
13642: PUSH
13643: LD_VAR 0 17
13647: ISECT
13648: ST_TO_ADDR
// if not list then
13649: LD_VAR 0 5
13653: NOT
13654: IFFALSE 13658
// exit ;
13656: GO 14486
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13658: LD_VAR 0 12
13662: PUSH
13663: LD_INT 3
13665: EQUAL
13666: IFFALSE 13678
13668: PUSH
13669: LD_INT 49
13671: PUSH
13672: LD_VAR 0 5
13676: IN
13677: AND
13678: IFFALSE 13698
13680: PUSH
13681: LD_INT 31
13683: PPUSH
13684: LD_VAR 0 16
13688: PPUSH
13689: CALL_OW 321
13693: PUSH
13694: LD_INT 2
13696: EQUAL
13697: AND
13698: IFFALSE 13758
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13700: LD_INT 22
13702: PUSH
13703: LD_VAR 0 16
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: LD_INT 35
13714: PUSH
13715: LD_INT 49
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: LD_INT 91
13724: PUSH
13725: LD_VAR 0 1
13729: PUSH
13730: LD_INT 10
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: LIST
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: LIST
13742: PPUSH
13743: CALL_OW 69
13747: NOT
13748: IFFALSE 13758
// weapon := ru_time_lapser ;
13750: LD_ADDR_VAR 0 18
13754: PUSH
13755: LD_INT 49
13757: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13758: LD_VAR 0 12
13762: PUSH
13763: LD_INT 1
13765: PUSH
13766: LD_INT 2
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: IN
13773: IFFALSE 13797
13775: PUSH
13776: LD_INT 11
13778: PUSH
13779: LD_VAR 0 5
13783: IN
13784: IFTRUE 13796
13786: PUSH
13787: LD_INT 30
13789: PUSH
13790: LD_VAR 0 5
13794: IN
13795: OR
13796: AND
13797: IFFALSE 13817
13799: PUSH
13800: LD_INT 6
13802: PPUSH
13803: LD_VAR 0 16
13807: PPUSH
13808: CALL_OW 321
13812: PUSH
13813: LD_INT 2
13815: EQUAL
13816: AND
13817: IFFALSE 13984
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13819: LD_INT 22
13821: PUSH
13822: LD_VAR 0 16
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: PUSH
13831: LD_INT 2
13833: PUSH
13834: LD_INT 35
13836: PUSH
13837: LD_INT 11
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 35
13846: PUSH
13847: LD_INT 30
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: LIST
13858: PUSH
13859: LD_INT 91
13861: PUSH
13862: LD_VAR 0 1
13866: PUSH
13867: LD_INT 18
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: LIST
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: LIST
13879: PPUSH
13880: CALL_OW 69
13884: NOT
13885: IFFALSE 13961
13887: PUSH
13888: LD_INT 22
13890: PUSH
13891: LD_VAR 0 16
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PUSH
13900: LD_INT 2
13902: PUSH
13903: LD_INT 30
13905: PUSH
13906: LD_INT 32
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 30
13915: PUSH
13916: LD_INT 33
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: LIST
13927: PUSH
13928: LD_INT 91
13930: PUSH
13931: LD_VAR 0 1
13935: PUSH
13936: LD_INT 12
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: LIST
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: LIST
13948: PUSH
13949: EMPTY
13950: LIST
13951: PPUSH
13952: CALL_OW 69
13956: PUSH
13957: LD_INT 2
13959: GREATER
13960: AND
13961: IFFALSE 13984
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13963: LD_ADDR_VAR 0 18
13967: PUSH
13968: LD_INT 11
13970: PUSH
13971: LD_INT 30
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PUSH
13978: LD_VAR 0 12
13982: ARRAY
13983: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13984: LD_VAR 0 18
13988: NOT
13989: IFFALSE 14009
13991: PUSH
13992: LD_INT 40
13994: PPUSH
13995: LD_VAR 0 16
13999: PPUSH
14000: CALL_OW 321
14004: PUSH
14005: LD_INT 2
14007: EQUAL
14008: AND
14009: IFFALSE 14045
14011: PUSH
14012: LD_INT 7
14014: PUSH
14015: LD_VAR 0 5
14019: IN
14020: IFTRUE 14032
14022: PUSH
14023: LD_INT 28
14025: PUSH
14026: LD_VAR 0 5
14030: IN
14031: OR
14032: IFTRUE 14044
14034: PUSH
14035: LD_INT 45
14037: PUSH
14038: LD_VAR 0 5
14042: IN
14043: OR
14044: AND
14045: IFFALSE 14299
// begin hex := GetHexInfo ( x , y ) ;
14047: LD_ADDR_VAR 0 4
14051: PUSH
14052: LD_VAR 0 10
14056: PPUSH
14057: LD_VAR 0 11
14061: PPUSH
14062: CALL_OW 546
14066: ST_TO_ADDR
// if hex [ 1 ] then
14067: LD_VAR 0 4
14071: PUSH
14072: LD_INT 1
14074: ARRAY
14075: IFFALSE 14079
// exit ;
14077: GO 14486
// height := hex [ 2 ] ;
14079: LD_ADDR_VAR 0 15
14083: PUSH
14084: LD_VAR 0 4
14088: PUSH
14089: LD_INT 2
14091: ARRAY
14092: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14093: LD_ADDR_VAR 0 14
14097: PUSH
14098: LD_INT 0
14100: PUSH
14101: LD_INT 2
14103: PUSH
14104: LD_INT 3
14106: PUSH
14107: LD_INT 5
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: ST_TO_ADDR
// for i in tmp do
14116: LD_ADDR_VAR 0 8
14120: PUSH
14121: LD_VAR 0 14
14125: PUSH
14126: FOR_IN
14127: IFFALSE 14297
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14129: LD_ADDR_VAR 0 9
14133: PUSH
14134: LD_VAR 0 10
14138: PPUSH
14139: LD_VAR 0 8
14143: PPUSH
14144: LD_INT 5
14146: PPUSH
14147: CALL_OW 272
14151: PUSH
14152: LD_VAR 0 11
14156: PPUSH
14157: LD_VAR 0 8
14161: PPUSH
14162: LD_INT 5
14164: PPUSH
14165: CALL_OW 273
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14174: LD_VAR 0 9
14178: PUSH
14179: LD_INT 1
14181: ARRAY
14182: PPUSH
14183: LD_VAR 0 9
14187: PUSH
14188: LD_INT 2
14190: ARRAY
14191: PPUSH
14192: CALL_OW 488
14196: IFFALSE 14295
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14198: LD_ADDR_VAR 0 4
14202: PUSH
14203: LD_VAR 0 9
14207: PUSH
14208: LD_INT 1
14210: ARRAY
14211: PPUSH
14212: LD_VAR 0 9
14216: PUSH
14217: LD_INT 2
14219: ARRAY
14220: PPUSH
14221: CALL_OW 546
14225: ST_TO_ADDR
// if hex [ 1 ] then
14226: LD_VAR 0 4
14230: PUSH
14231: LD_INT 1
14233: ARRAY
14234: IFFALSE 14238
// continue ;
14236: GO 14126
// h := hex [ 2 ] ;
14238: LD_ADDR_VAR 0 13
14242: PUSH
14243: LD_VAR 0 4
14247: PUSH
14248: LD_INT 2
14250: ARRAY
14251: ST_TO_ADDR
// if h + 7 < height then
14252: LD_VAR 0 13
14256: PUSH
14257: LD_INT 7
14259: PLUS
14260: PUSH
14261: LD_VAR 0 15
14265: LESS
14266: IFFALSE 14295
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14268: LD_ADDR_VAR 0 18
14272: PUSH
14273: LD_INT 7
14275: PUSH
14276: LD_INT 28
14278: PUSH
14279: LD_INT 45
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: LIST
14286: PUSH
14287: LD_VAR 0 12
14291: ARRAY
14292: ST_TO_ADDR
// break ;
14293: GO 14297
// end ; end ; end ;
14295: GO 14126
14297: POP
14298: POP
// end ; if not weapon then
14299: LD_VAR 0 18
14303: NOT
14304: IFFALSE 14364
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14306: LD_ADDR_VAR 0 5
14310: PUSH
14311: LD_VAR 0 5
14315: PUSH
14316: LD_INT 11
14318: PUSH
14319: LD_INT 30
14321: PUSH
14322: LD_INT 49
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: LIST
14329: DIFF
14330: ST_TO_ADDR
// if not list then
14331: LD_VAR 0 5
14335: NOT
14336: IFFALSE 14340
// exit ;
14338: GO 14486
// weapon := list [ rand ( 1 , list ) ] ;
14340: LD_ADDR_VAR 0 18
14344: PUSH
14345: LD_VAR 0 5
14349: PUSH
14350: LD_INT 1
14352: PPUSH
14353: LD_VAR 0 5
14357: PPUSH
14358: CALL_OW 12
14362: ARRAY
14363: ST_TO_ADDR
// end ; if weapon then
14364: LD_VAR 0 18
14368: IFFALSE 14486
// begin tmp := CostOfWeapon ( weapon ) ;
14370: LD_ADDR_VAR 0 14
14374: PUSH
14375: LD_VAR 0 18
14379: PPUSH
14380: CALL_OW 451
14384: ST_TO_ADDR
// j := GetBase ( tower ) ;
14385: LD_ADDR_VAR 0 9
14389: PUSH
14390: LD_VAR 0 1
14394: PPUSH
14395: CALL_OW 274
14399: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14400: LD_VAR 0 9
14404: PPUSH
14405: LD_INT 1
14407: PPUSH
14408: CALL_OW 275
14412: PUSH
14413: LD_VAR 0 14
14417: PUSH
14418: LD_INT 1
14420: ARRAY
14421: GREATEREQUAL
14422: IFFALSE 14448
14424: PUSH
14425: LD_VAR 0 9
14429: PPUSH
14430: LD_INT 2
14432: PPUSH
14433: CALL_OW 275
14437: PUSH
14438: LD_VAR 0 14
14442: PUSH
14443: LD_INT 2
14445: ARRAY
14446: GREATEREQUAL
14447: AND
14448: IFFALSE 14474
14450: PUSH
14451: LD_VAR 0 9
14455: PPUSH
14456: LD_INT 3
14458: PPUSH
14459: CALL_OW 275
14463: PUSH
14464: LD_VAR 0 14
14468: PUSH
14469: LD_INT 3
14471: ARRAY
14472: GREATEREQUAL
14473: AND
14474: IFFALSE 14486
// result := weapon ;
14476: LD_ADDR_VAR 0 3
14480: PUSH
14481: LD_VAR 0 18
14485: ST_TO_ADDR
// end ; end ;
14486: LD_VAR 0 3
14490: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14491: LD_INT 0
14493: PPUSH
14494: PPUSH
// result := true ;
14495: LD_ADDR_VAR 0 3
14499: PUSH
14500: LD_INT 1
14502: ST_TO_ADDR
// if array1 = array2 then
14503: LD_VAR 0 1
14507: PUSH
14508: LD_VAR 0 2
14512: EQUAL
14513: IFFALSE 14573
// begin for i = 1 to array1 do
14515: LD_ADDR_VAR 0 4
14519: PUSH
14520: DOUBLE
14521: LD_INT 1
14523: DEC
14524: ST_TO_ADDR
14525: LD_VAR 0 1
14529: PUSH
14530: FOR_TO
14531: IFFALSE 14569
// if array1 [ i ] <> array2 [ i ] then
14533: LD_VAR 0 1
14537: PUSH
14538: LD_VAR 0 4
14542: ARRAY
14543: PUSH
14544: LD_VAR 0 2
14548: PUSH
14549: LD_VAR 0 4
14553: ARRAY
14554: NONEQUAL
14555: IFFALSE 14567
// begin result := false ;
14557: LD_ADDR_VAR 0 3
14561: PUSH
14562: LD_INT 0
14564: ST_TO_ADDR
// break ;
14565: GO 14569
// end ;
14567: GO 14530
14569: POP
14570: POP
// end else
14571: GO 14581
// result := false ;
14573: LD_ADDR_VAR 0 3
14577: PUSH
14578: LD_INT 0
14580: ST_TO_ADDR
// end ;
14581: LD_VAR 0 3
14585: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14586: LD_INT 0
14588: PPUSH
14589: PPUSH
// if not array1 or not array2 then
14590: LD_VAR 0 1
14594: NOT
14595: IFTRUE 14604
14597: PUSH
14598: LD_VAR 0 2
14602: NOT
14603: OR
14604: IFFALSE 14608
// exit ;
14606: GO 14672
// result := true ;
14608: LD_ADDR_VAR 0 3
14612: PUSH
14613: LD_INT 1
14615: ST_TO_ADDR
// for i = 1 to array1 do
14616: LD_ADDR_VAR 0 4
14620: PUSH
14621: DOUBLE
14622: LD_INT 1
14624: DEC
14625: ST_TO_ADDR
14626: LD_VAR 0 1
14630: PUSH
14631: FOR_TO
14632: IFFALSE 14670
// if array1 [ i ] <> array2 [ i ] then
14634: LD_VAR 0 1
14638: PUSH
14639: LD_VAR 0 4
14643: ARRAY
14644: PUSH
14645: LD_VAR 0 2
14649: PUSH
14650: LD_VAR 0 4
14654: ARRAY
14655: NONEQUAL
14656: IFFALSE 14668
// begin result := false ;
14658: LD_ADDR_VAR 0 3
14662: PUSH
14663: LD_INT 0
14665: ST_TO_ADDR
// break ;
14666: GO 14670
// end ;
14668: GO 14631
14670: POP
14671: POP
// end ;
14672: LD_VAR 0 3
14676: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14677: LD_INT 0
14679: PPUSH
14680: PPUSH
14681: PPUSH
// pom := GetBase ( fac ) ;
14682: LD_ADDR_VAR 0 5
14686: PUSH
14687: LD_VAR 0 1
14691: PPUSH
14692: CALL_OW 274
14696: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14697: LD_ADDR_VAR 0 4
14701: PUSH
14702: LD_VAR 0 2
14706: PUSH
14707: LD_INT 1
14709: ARRAY
14710: PPUSH
14711: LD_VAR 0 2
14715: PUSH
14716: LD_INT 2
14718: ARRAY
14719: PPUSH
14720: LD_VAR 0 2
14724: PUSH
14725: LD_INT 3
14727: ARRAY
14728: PPUSH
14729: LD_VAR 0 2
14733: PUSH
14734: LD_INT 4
14736: ARRAY
14737: PPUSH
14738: CALL_OW 449
14742: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14743: LD_ADDR_VAR 0 3
14747: PUSH
14748: LD_VAR 0 5
14752: PPUSH
14753: LD_INT 1
14755: PPUSH
14756: CALL_OW 275
14760: PUSH
14761: LD_VAR 0 4
14765: PUSH
14766: LD_INT 1
14768: ARRAY
14769: GREATEREQUAL
14770: IFFALSE 14796
14772: PUSH
14773: LD_VAR 0 5
14777: PPUSH
14778: LD_INT 2
14780: PPUSH
14781: CALL_OW 275
14785: PUSH
14786: LD_VAR 0 4
14790: PUSH
14791: LD_INT 2
14793: ARRAY
14794: GREATEREQUAL
14795: AND
14796: IFFALSE 14822
14798: PUSH
14799: LD_VAR 0 5
14803: PPUSH
14804: LD_INT 3
14806: PPUSH
14807: CALL_OW 275
14811: PUSH
14812: LD_VAR 0 4
14816: PUSH
14817: LD_INT 3
14819: ARRAY
14820: GREATEREQUAL
14821: AND
14822: ST_TO_ADDR
// end ;
14823: LD_VAR 0 3
14827: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14828: LD_INT 0
14830: PPUSH
14831: PPUSH
14832: PPUSH
14833: PPUSH
// pom := GetBase ( building ) ;
14834: LD_ADDR_VAR 0 3
14838: PUSH
14839: LD_VAR 0 1
14843: PPUSH
14844: CALL_OW 274
14848: ST_TO_ADDR
// if not pom then
14849: LD_VAR 0 3
14853: NOT
14854: IFFALSE 14858
// exit ;
14856: GO 15032
// btype := GetBType ( building ) ;
14858: LD_ADDR_VAR 0 5
14862: PUSH
14863: LD_VAR 0 1
14867: PPUSH
14868: CALL_OW 266
14872: ST_TO_ADDR
// if btype = b_armoury then
14873: LD_VAR 0 5
14877: PUSH
14878: LD_INT 4
14880: EQUAL
14881: IFFALSE 14891
// btype := b_barracks ;
14883: LD_ADDR_VAR 0 5
14887: PUSH
14888: LD_INT 5
14890: ST_TO_ADDR
// if btype = b_depot then
14891: LD_VAR 0 5
14895: PUSH
14896: LD_INT 0
14898: EQUAL
14899: IFFALSE 14909
// btype := b_warehouse ;
14901: LD_ADDR_VAR 0 5
14905: PUSH
14906: LD_INT 1
14908: ST_TO_ADDR
// if btype = b_workshop then
14909: LD_VAR 0 5
14913: PUSH
14914: LD_INT 2
14916: EQUAL
14917: IFFALSE 14927
// btype := b_factory ;
14919: LD_ADDR_VAR 0 5
14923: PUSH
14924: LD_INT 3
14926: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14927: LD_ADDR_VAR 0 4
14931: PUSH
14932: LD_VAR 0 5
14936: PPUSH
14937: LD_VAR 0 1
14941: PPUSH
14942: CALL_OW 248
14946: PPUSH
14947: CALL_OW 450
14951: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14952: LD_ADDR_VAR 0 2
14956: PUSH
14957: LD_VAR 0 3
14961: PPUSH
14962: LD_INT 1
14964: PPUSH
14965: CALL_OW 275
14969: PUSH
14970: LD_VAR 0 4
14974: PUSH
14975: LD_INT 1
14977: ARRAY
14978: GREATEREQUAL
14979: IFFALSE 15005
14981: PUSH
14982: LD_VAR 0 3
14986: PPUSH
14987: LD_INT 2
14989: PPUSH
14990: CALL_OW 275
14994: PUSH
14995: LD_VAR 0 4
14999: PUSH
15000: LD_INT 2
15002: ARRAY
15003: GREATEREQUAL
15004: AND
15005: IFFALSE 15031
15007: PUSH
15008: LD_VAR 0 3
15012: PPUSH
15013: LD_INT 3
15015: PPUSH
15016: CALL_OW 275
15020: PUSH
15021: LD_VAR 0 4
15025: PUSH
15026: LD_INT 3
15028: ARRAY
15029: GREATEREQUAL
15030: AND
15031: ST_TO_ADDR
// end ;
15032: LD_VAR 0 2
15036: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15037: LD_INT 0
15039: PPUSH
15040: PPUSH
15041: PPUSH
// pom := GetBase ( building ) ;
15042: LD_ADDR_VAR 0 4
15046: PUSH
15047: LD_VAR 0 1
15051: PPUSH
15052: CALL_OW 274
15056: ST_TO_ADDR
// if not pom then
15057: LD_VAR 0 4
15061: NOT
15062: IFFALSE 15066
// exit ;
15064: GO 15171
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15066: LD_ADDR_VAR 0 5
15070: PUSH
15071: LD_VAR 0 2
15075: PPUSH
15076: LD_VAR 0 1
15080: PPUSH
15081: CALL_OW 248
15085: PPUSH
15086: CALL_OW 450
15090: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15091: LD_ADDR_VAR 0 3
15095: PUSH
15096: LD_VAR 0 4
15100: PPUSH
15101: LD_INT 1
15103: PPUSH
15104: CALL_OW 275
15108: PUSH
15109: LD_VAR 0 5
15113: PUSH
15114: LD_INT 1
15116: ARRAY
15117: GREATEREQUAL
15118: IFFALSE 15144
15120: PUSH
15121: LD_VAR 0 4
15125: PPUSH
15126: LD_INT 2
15128: PPUSH
15129: CALL_OW 275
15133: PUSH
15134: LD_VAR 0 5
15138: PUSH
15139: LD_INT 2
15141: ARRAY
15142: GREATEREQUAL
15143: AND
15144: IFFALSE 15170
15146: PUSH
15147: LD_VAR 0 4
15151: PPUSH
15152: LD_INT 3
15154: PPUSH
15155: CALL_OW 275
15159: PUSH
15160: LD_VAR 0 5
15164: PUSH
15165: LD_INT 3
15167: ARRAY
15168: GREATEREQUAL
15169: AND
15170: ST_TO_ADDR
// end ;
15171: LD_VAR 0 3
15175: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15176: LD_INT 0
15178: PPUSH
15179: PPUSH
15180: PPUSH
15181: PPUSH
15182: PPUSH
15183: PPUSH
15184: PPUSH
15185: PPUSH
15186: PPUSH
15187: PPUSH
15188: PPUSH
// result := false ;
15189: LD_ADDR_VAR 0 8
15193: PUSH
15194: LD_INT 0
15196: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15197: LD_VAR 0 5
15201: NOT
15202: IFTRUE 15211
15204: PUSH
15205: LD_VAR 0 1
15209: NOT
15210: OR
15211: IFTRUE 15220
15213: PUSH
15214: LD_VAR 0 2
15218: NOT
15219: OR
15220: IFTRUE 15229
15222: PUSH
15223: LD_VAR 0 3
15227: NOT
15228: OR
15229: IFFALSE 15233
// exit ;
15231: GO 16059
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15233: LD_ADDR_VAR 0 14
15237: PUSH
15238: LD_VAR 0 1
15242: PPUSH
15243: LD_VAR 0 2
15247: PPUSH
15248: LD_VAR 0 3
15252: PPUSH
15253: LD_VAR 0 4
15257: PPUSH
15258: LD_VAR 0 5
15262: PUSH
15263: LD_INT 1
15265: ARRAY
15266: PPUSH
15267: CALL_OW 248
15271: PPUSH
15272: LD_INT 0
15274: PPUSH
15275: CALL 17340 0 6
15279: ST_TO_ADDR
// if not hexes then
15280: LD_VAR 0 14
15284: NOT
15285: IFFALSE 15289
// exit ;
15287: GO 16059
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15289: LD_ADDR_VAR 0 17
15293: PUSH
15294: LD_VAR 0 5
15298: PPUSH
15299: LD_INT 22
15301: PUSH
15302: LD_VAR 0 13
15306: PPUSH
15307: CALL_OW 255
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PUSH
15316: LD_INT 2
15318: PUSH
15319: LD_INT 30
15321: PUSH
15322: LD_INT 0
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PUSH
15329: LD_INT 30
15331: PUSH
15332: LD_INT 1
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: LIST
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PPUSH
15348: CALL_OW 72
15352: ST_TO_ADDR
// for i = 1 to hexes do
15353: LD_ADDR_VAR 0 9
15357: PUSH
15358: DOUBLE
15359: LD_INT 1
15361: DEC
15362: ST_TO_ADDR
15363: LD_VAR 0 14
15367: PUSH
15368: FOR_TO
15369: IFFALSE 16057
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15371: LD_ADDR_VAR 0 13
15375: PUSH
15376: LD_VAR 0 14
15380: PUSH
15381: LD_VAR 0 9
15385: ARRAY
15386: PUSH
15387: LD_INT 1
15389: ARRAY
15390: PPUSH
15391: LD_VAR 0 14
15395: PUSH
15396: LD_VAR 0 9
15400: ARRAY
15401: PUSH
15402: LD_INT 2
15404: ARRAY
15405: PPUSH
15406: CALL_OW 428
15410: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15411: LD_VAR 0 14
15415: PUSH
15416: LD_VAR 0 9
15420: ARRAY
15421: PUSH
15422: LD_INT 1
15424: ARRAY
15425: PPUSH
15426: LD_VAR 0 14
15430: PUSH
15431: LD_VAR 0 9
15435: ARRAY
15436: PUSH
15437: LD_INT 2
15439: ARRAY
15440: PPUSH
15441: CALL_OW 351
15445: IFTRUE 15484
15447: PUSH
15448: LD_VAR 0 14
15452: PUSH
15453: LD_VAR 0 9
15457: ARRAY
15458: PUSH
15459: LD_INT 1
15461: ARRAY
15462: PPUSH
15463: LD_VAR 0 14
15467: PUSH
15468: LD_VAR 0 9
15472: ARRAY
15473: PUSH
15474: LD_INT 2
15476: ARRAY
15477: PPUSH
15478: CALL_OW 488
15482: NOT
15483: OR
15484: IFTRUE 15501
15486: PUSH
15487: LD_VAR 0 13
15491: PPUSH
15492: CALL_OW 247
15496: PUSH
15497: LD_INT 3
15499: EQUAL
15500: OR
15501: IFFALSE 15507
// exit ;
15503: POP
15504: POP
15505: GO 16059
// if not tmp then
15507: LD_VAR 0 13
15511: NOT
15512: IFFALSE 15516
// continue ;
15514: GO 15368
// result := true ;
15516: LD_ADDR_VAR 0 8
15520: PUSH
15521: LD_INT 1
15523: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15524: LD_VAR 0 6
15528: IFFALSE 15545
15530: PUSH
15531: LD_VAR 0 13
15535: PPUSH
15536: CALL_OW 247
15540: PUSH
15541: LD_INT 2
15543: EQUAL
15544: AND
15545: IFFALSE 15562
15547: PUSH
15548: LD_VAR 0 13
15552: PPUSH
15553: CALL_OW 263
15557: PUSH
15558: LD_INT 1
15560: EQUAL
15561: AND
15562: IFFALSE 15726
// begin if IsDrivenBy ( tmp ) then
15564: LD_VAR 0 13
15568: PPUSH
15569: CALL_OW 311
15573: IFFALSE 15577
// continue ;
15575: GO 15368
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15577: LD_VAR 0 6
15581: PPUSH
15582: LD_INT 3
15584: PUSH
15585: LD_INT 60
15587: PUSH
15588: EMPTY
15589: LIST
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: PUSH
15595: LD_INT 3
15597: PUSH
15598: LD_INT 55
15600: PUSH
15601: EMPTY
15602: LIST
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PPUSH
15612: CALL_OW 72
15616: IFFALSE 15724
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15618: LD_ADDR_VAR 0 18
15622: PUSH
15623: LD_VAR 0 6
15627: PPUSH
15628: LD_INT 3
15630: PUSH
15631: LD_INT 60
15633: PUSH
15634: EMPTY
15635: LIST
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: LD_INT 3
15643: PUSH
15644: LD_INT 55
15646: PUSH
15647: EMPTY
15648: LIST
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PPUSH
15658: CALL_OW 72
15662: PUSH
15663: LD_INT 1
15665: ARRAY
15666: ST_TO_ADDR
// if IsInUnit ( driver ) then
15667: LD_VAR 0 18
15671: PPUSH
15672: CALL_OW 310
15676: IFFALSE 15687
// ComExit ( driver ) ;
15678: LD_VAR 0 18
15682: PPUSH
15683: CALL 41330 0 1
// AddComEnterUnit ( driver , tmp ) ;
15687: LD_VAR 0 18
15691: PPUSH
15692: LD_VAR 0 13
15696: PPUSH
15697: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15701: LD_VAR 0 18
15705: PPUSH
15706: LD_VAR 0 7
15710: PPUSH
15711: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15715: LD_VAR 0 18
15719: PPUSH
15720: CALL_OW 181
// end ; continue ;
15724: GO 15368
// end ; if not cleaners or not tmp in cleaners then
15726: LD_VAR 0 6
15730: NOT
15731: IFTRUE 15746
15733: PUSH
15734: LD_VAR 0 13
15738: PUSH
15739: LD_VAR 0 6
15743: IN
15744: NOT
15745: OR
15746: IFFALSE 16055
// begin if dep then
15748: LD_VAR 0 17
15752: IFFALSE 15888
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15754: LD_ADDR_VAR 0 16
15758: PUSH
15759: LD_VAR 0 17
15763: PUSH
15764: LD_INT 1
15766: ARRAY
15767: PPUSH
15768: CALL_OW 250
15772: PPUSH
15773: LD_VAR 0 17
15777: PUSH
15778: LD_INT 1
15780: ARRAY
15781: PPUSH
15782: CALL_OW 254
15786: PPUSH
15787: LD_INT 5
15789: PPUSH
15790: CALL_OW 272
15794: PUSH
15795: LD_VAR 0 17
15799: PUSH
15800: LD_INT 1
15802: ARRAY
15803: PPUSH
15804: CALL_OW 251
15808: PPUSH
15809: LD_VAR 0 17
15813: PUSH
15814: LD_INT 1
15816: ARRAY
15817: PPUSH
15818: CALL_OW 254
15822: PPUSH
15823: LD_INT 5
15825: PPUSH
15826: CALL_OW 273
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15835: LD_VAR 0 16
15839: PUSH
15840: LD_INT 1
15842: ARRAY
15843: PPUSH
15844: LD_VAR 0 16
15848: PUSH
15849: LD_INT 2
15851: ARRAY
15852: PPUSH
15853: CALL_OW 488
15857: IFFALSE 15888
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15859: LD_VAR 0 13
15863: PPUSH
15864: LD_VAR 0 16
15868: PUSH
15869: LD_INT 1
15871: ARRAY
15872: PPUSH
15873: LD_VAR 0 16
15877: PUSH
15878: LD_INT 2
15880: ARRAY
15881: PPUSH
15882: CALL_OW 111
// continue ;
15886: GO 15368
// end ; end ; r := GetDir ( tmp ) ;
15888: LD_ADDR_VAR 0 15
15892: PUSH
15893: LD_VAR 0 13
15897: PPUSH
15898: CALL_OW 254
15902: ST_TO_ADDR
// if r = 5 then
15903: LD_VAR 0 15
15907: PUSH
15908: LD_INT 5
15910: EQUAL
15911: IFFALSE 15921
// r := 0 ;
15913: LD_ADDR_VAR 0 15
15917: PUSH
15918: LD_INT 0
15920: ST_TO_ADDR
// for j = r to 5 do
15921: LD_ADDR_VAR 0 10
15925: PUSH
15926: DOUBLE
15927: LD_VAR 0 15
15931: DEC
15932: ST_TO_ADDR
15933: LD_INT 5
15935: PUSH
15936: FOR_TO
15937: IFFALSE 16053
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15939: LD_ADDR_VAR 0 11
15943: PUSH
15944: LD_VAR 0 13
15948: PPUSH
15949: CALL_OW 250
15953: PPUSH
15954: LD_VAR 0 10
15958: PPUSH
15959: LD_INT 2
15961: PPUSH
15962: CALL_OW 272
15966: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15967: LD_ADDR_VAR 0 12
15971: PUSH
15972: LD_VAR 0 13
15976: PPUSH
15977: CALL_OW 251
15981: PPUSH
15982: LD_VAR 0 10
15986: PPUSH
15987: LD_INT 2
15989: PPUSH
15990: CALL_OW 273
15994: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15995: LD_VAR 0 11
15999: PPUSH
16000: LD_VAR 0 12
16004: PPUSH
16005: CALL_OW 488
16009: IFFALSE 16028
16011: PUSH
16012: LD_VAR 0 11
16016: PPUSH
16017: LD_VAR 0 12
16021: PPUSH
16022: CALL_OW 428
16026: NOT
16027: AND
16028: IFFALSE 16051
// begin ComMoveXY ( tmp , _x , _y ) ;
16030: LD_VAR 0 13
16034: PPUSH
16035: LD_VAR 0 11
16039: PPUSH
16040: LD_VAR 0 12
16044: PPUSH
16045: CALL_OW 111
// break ;
16049: GO 16053
// end ; end ;
16051: GO 15936
16053: POP
16054: POP
// end ; end ;
16055: GO 15368
16057: POP
16058: POP
// end ;
16059: LD_VAR 0 8
16063: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16064: LD_INT 0
16066: PPUSH
// result := true ;
16067: LD_ADDR_VAR 0 3
16071: PUSH
16072: LD_INT 1
16074: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16075: LD_VAR 0 2
16079: PUSH
16080: LD_INT 24
16082: DOUBLE
16083: EQUAL
16084: IFTRUE 16094
16086: LD_INT 33
16088: DOUBLE
16089: EQUAL
16090: IFTRUE 16094
16092: GO 16119
16094: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16095: LD_ADDR_VAR 0 3
16099: PUSH
16100: LD_INT 32
16102: PPUSH
16103: LD_VAR 0 1
16107: PPUSH
16108: CALL_OW 321
16112: PUSH
16113: LD_INT 2
16115: EQUAL
16116: ST_TO_ADDR
16117: GO 16435
16119: LD_INT 20
16121: DOUBLE
16122: EQUAL
16123: IFTRUE 16127
16125: GO 16152
16127: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16128: LD_ADDR_VAR 0 3
16132: PUSH
16133: LD_INT 6
16135: PPUSH
16136: LD_VAR 0 1
16140: PPUSH
16141: CALL_OW 321
16145: PUSH
16146: LD_INT 2
16148: EQUAL
16149: ST_TO_ADDR
16150: GO 16435
16152: LD_INT 22
16154: DOUBLE
16155: EQUAL
16156: IFTRUE 16166
16158: LD_INT 36
16160: DOUBLE
16161: EQUAL
16162: IFTRUE 16166
16164: GO 16191
16166: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16167: LD_ADDR_VAR 0 3
16171: PUSH
16172: LD_INT 15
16174: PPUSH
16175: LD_VAR 0 1
16179: PPUSH
16180: CALL_OW 321
16184: PUSH
16185: LD_INT 2
16187: EQUAL
16188: ST_TO_ADDR
16189: GO 16435
16191: LD_INT 30
16193: DOUBLE
16194: EQUAL
16195: IFTRUE 16199
16197: GO 16224
16199: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16200: LD_ADDR_VAR 0 3
16204: PUSH
16205: LD_INT 20
16207: PPUSH
16208: LD_VAR 0 1
16212: PPUSH
16213: CALL_OW 321
16217: PUSH
16218: LD_INT 2
16220: EQUAL
16221: ST_TO_ADDR
16222: GO 16435
16224: LD_INT 28
16226: DOUBLE
16227: EQUAL
16228: IFTRUE 16238
16230: LD_INT 21
16232: DOUBLE
16233: EQUAL
16234: IFTRUE 16238
16236: GO 16263
16238: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16239: LD_ADDR_VAR 0 3
16243: PUSH
16244: LD_INT 21
16246: PPUSH
16247: LD_VAR 0 1
16251: PPUSH
16252: CALL_OW 321
16256: PUSH
16257: LD_INT 2
16259: EQUAL
16260: ST_TO_ADDR
16261: GO 16435
16263: LD_INT 16
16265: DOUBLE
16266: EQUAL
16267: IFTRUE 16271
16269: GO 16296
16271: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16272: LD_ADDR_VAR 0 3
16276: PUSH
16277: LD_INT 84
16279: PPUSH
16280: LD_VAR 0 1
16284: PPUSH
16285: CALL_OW 321
16289: PUSH
16290: LD_INT 2
16292: EQUAL
16293: ST_TO_ADDR
16294: GO 16435
16296: LD_INT 19
16298: DOUBLE
16299: EQUAL
16300: IFTRUE 16310
16302: LD_INT 23
16304: DOUBLE
16305: EQUAL
16306: IFTRUE 16310
16308: GO 16335
16310: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16311: LD_ADDR_VAR 0 3
16315: PUSH
16316: LD_INT 83
16318: PPUSH
16319: LD_VAR 0 1
16323: PPUSH
16324: CALL_OW 321
16328: PUSH
16329: LD_INT 2
16331: EQUAL
16332: ST_TO_ADDR
16333: GO 16435
16335: LD_INT 17
16337: DOUBLE
16338: EQUAL
16339: IFTRUE 16343
16341: GO 16368
16343: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16344: LD_ADDR_VAR 0 3
16348: PUSH
16349: LD_INT 39
16351: PPUSH
16352: LD_VAR 0 1
16356: PPUSH
16357: CALL_OW 321
16361: PUSH
16362: LD_INT 2
16364: EQUAL
16365: ST_TO_ADDR
16366: GO 16435
16368: LD_INT 18
16370: DOUBLE
16371: EQUAL
16372: IFTRUE 16376
16374: GO 16401
16376: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16377: LD_ADDR_VAR 0 3
16381: PUSH
16382: LD_INT 40
16384: PPUSH
16385: LD_VAR 0 1
16389: PPUSH
16390: CALL_OW 321
16394: PUSH
16395: LD_INT 2
16397: EQUAL
16398: ST_TO_ADDR
16399: GO 16435
16401: LD_INT 27
16403: DOUBLE
16404: EQUAL
16405: IFTRUE 16409
16407: GO 16434
16409: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16410: LD_ADDR_VAR 0 3
16414: PUSH
16415: LD_INT 35
16417: PPUSH
16418: LD_VAR 0 1
16422: PPUSH
16423: CALL_OW 321
16427: PUSH
16428: LD_INT 2
16430: EQUAL
16431: ST_TO_ADDR
16432: GO 16435
16434: POP
// end ;
16435: LD_VAR 0 3
16439: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16440: LD_INT 0
16442: PPUSH
16443: PPUSH
16444: PPUSH
16445: PPUSH
16446: PPUSH
16447: PPUSH
16448: PPUSH
16449: PPUSH
16450: PPUSH
16451: PPUSH
16452: PPUSH
// result := false ;
16453: LD_ADDR_VAR 0 6
16457: PUSH
16458: LD_INT 0
16460: ST_TO_ADDR
// if btype = b_depot then
16461: LD_VAR 0 2
16465: PUSH
16466: LD_INT 0
16468: EQUAL
16469: IFFALSE 16481
// begin result := true ;
16471: LD_ADDR_VAR 0 6
16475: PUSH
16476: LD_INT 1
16478: ST_TO_ADDR
// exit ;
16479: GO 17335
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16481: LD_VAR 0 1
16485: NOT
16486: IFTRUE 16511
16488: PUSH
16489: LD_VAR 0 1
16493: PPUSH
16494: CALL_OW 266
16498: PUSH
16499: LD_INT 0
16501: PUSH
16502: LD_INT 1
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: IN
16509: NOT
16510: OR
16511: IFTRUE 16520
16513: PUSH
16514: LD_VAR 0 2
16518: NOT
16519: OR
16520: IFTRUE 16556
16522: PUSH
16523: LD_VAR 0 5
16527: PUSH
16528: LD_INT 0
16530: PUSH
16531: LD_INT 1
16533: PUSH
16534: LD_INT 2
16536: PUSH
16537: LD_INT 3
16539: PUSH
16540: LD_INT 4
16542: PUSH
16543: LD_INT 5
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: IN
16554: NOT
16555: OR
16556: IFTRUE 16575
16558: PUSH
16559: LD_VAR 0 3
16563: PPUSH
16564: LD_VAR 0 4
16568: PPUSH
16569: CALL_OW 488
16573: NOT
16574: OR
16575: IFFALSE 16579
// exit ;
16577: GO 17335
// side := GetSide ( depot ) ;
16579: LD_ADDR_VAR 0 9
16583: PUSH
16584: LD_VAR 0 1
16588: PPUSH
16589: CALL_OW 255
16593: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16594: LD_VAR 0 9
16598: PPUSH
16599: LD_VAR 0 2
16603: PPUSH
16604: CALL 16064 0 2
16608: NOT
16609: IFFALSE 16613
// exit ;
16611: GO 17335
// pom := GetBase ( depot ) ;
16613: LD_ADDR_VAR 0 10
16617: PUSH
16618: LD_VAR 0 1
16622: PPUSH
16623: CALL_OW 274
16627: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16628: LD_ADDR_VAR 0 11
16632: PUSH
16633: LD_VAR 0 2
16637: PPUSH
16638: LD_VAR 0 1
16642: PPUSH
16643: CALL_OW 248
16647: PPUSH
16648: CALL_OW 450
16652: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16653: LD_VAR 0 10
16657: PPUSH
16658: LD_INT 1
16660: PPUSH
16661: CALL_OW 275
16665: PUSH
16666: LD_VAR 0 11
16670: PUSH
16671: LD_INT 1
16673: ARRAY
16674: GREATEREQUAL
16675: IFFALSE 16701
16677: PUSH
16678: LD_VAR 0 10
16682: PPUSH
16683: LD_INT 2
16685: PPUSH
16686: CALL_OW 275
16690: PUSH
16691: LD_VAR 0 11
16695: PUSH
16696: LD_INT 2
16698: ARRAY
16699: GREATEREQUAL
16700: AND
16701: IFFALSE 16727
16703: PUSH
16704: LD_VAR 0 10
16708: PPUSH
16709: LD_INT 3
16711: PPUSH
16712: CALL_OW 275
16716: PUSH
16717: LD_VAR 0 11
16721: PUSH
16722: LD_INT 3
16724: ARRAY
16725: GREATEREQUAL
16726: AND
16727: NOT
16728: IFFALSE 16732
// exit ;
16730: GO 17335
// if GetBType ( depot ) = b_depot then
16732: LD_VAR 0 1
16736: PPUSH
16737: CALL_OW 266
16741: PUSH
16742: LD_INT 0
16744: EQUAL
16745: IFFALSE 16757
// dist := 28 else
16747: LD_ADDR_VAR 0 14
16751: PUSH
16752: LD_INT 28
16754: ST_TO_ADDR
16755: GO 16765
// dist := 36 ;
16757: LD_ADDR_VAR 0 14
16761: PUSH
16762: LD_INT 36
16764: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16765: LD_VAR 0 1
16769: PPUSH
16770: LD_VAR 0 3
16774: PPUSH
16775: LD_VAR 0 4
16779: PPUSH
16780: CALL_OW 297
16784: PUSH
16785: LD_VAR 0 14
16789: GREATER
16790: IFFALSE 16794
// exit ;
16792: GO 17335
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16794: LD_ADDR_VAR 0 12
16798: PUSH
16799: LD_VAR 0 2
16803: PPUSH
16804: LD_VAR 0 3
16808: PPUSH
16809: LD_VAR 0 4
16813: PPUSH
16814: LD_VAR 0 5
16818: PPUSH
16819: LD_VAR 0 1
16823: PPUSH
16824: CALL_OW 248
16828: PPUSH
16829: LD_INT 0
16831: PPUSH
16832: CALL 17340 0 6
16836: ST_TO_ADDR
// if not hexes then
16837: LD_VAR 0 12
16841: NOT
16842: IFFALSE 16846
// exit ;
16844: GO 17335
// hex := GetHexInfo ( x , y ) ;
16846: LD_ADDR_VAR 0 15
16850: PUSH
16851: LD_VAR 0 3
16855: PPUSH
16856: LD_VAR 0 4
16860: PPUSH
16861: CALL_OW 546
16865: ST_TO_ADDR
// if hex [ 1 ] then
16866: LD_VAR 0 15
16870: PUSH
16871: LD_INT 1
16873: ARRAY
16874: IFFALSE 16878
// exit ;
16876: GO 17335
// height := hex [ 2 ] ;
16878: LD_ADDR_VAR 0 13
16882: PUSH
16883: LD_VAR 0 15
16887: PUSH
16888: LD_INT 2
16890: ARRAY
16891: ST_TO_ADDR
// for i = 1 to hexes do
16892: LD_ADDR_VAR 0 7
16896: PUSH
16897: DOUBLE
16898: LD_INT 1
16900: DEC
16901: ST_TO_ADDR
16902: LD_VAR 0 12
16906: PUSH
16907: FOR_TO
16908: IFFALSE 17252
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16910: LD_VAR 0 12
16914: PUSH
16915: LD_VAR 0 7
16919: ARRAY
16920: PUSH
16921: LD_INT 1
16923: ARRAY
16924: PPUSH
16925: LD_VAR 0 12
16929: PUSH
16930: LD_VAR 0 7
16934: ARRAY
16935: PUSH
16936: LD_INT 2
16938: ARRAY
16939: PPUSH
16940: CALL_OW 488
16944: NOT
16945: IFTRUE 16987
16947: PUSH
16948: LD_VAR 0 12
16952: PUSH
16953: LD_VAR 0 7
16957: ARRAY
16958: PUSH
16959: LD_INT 1
16961: ARRAY
16962: PPUSH
16963: LD_VAR 0 12
16967: PUSH
16968: LD_VAR 0 7
16972: ARRAY
16973: PUSH
16974: LD_INT 2
16976: ARRAY
16977: PPUSH
16978: CALL_OW 428
16982: PUSH
16983: LD_INT 0
16985: GREATER
16986: OR
16987: IFTRUE 17025
16989: PUSH
16990: LD_VAR 0 12
16994: PUSH
16995: LD_VAR 0 7
16999: ARRAY
17000: PUSH
17001: LD_INT 1
17003: ARRAY
17004: PPUSH
17005: LD_VAR 0 12
17009: PUSH
17010: LD_VAR 0 7
17014: ARRAY
17015: PUSH
17016: LD_INT 2
17018: ARRAY
17019: PPUSH
17020: CALL_OW 351
17024: OR
17025: IFFALSE 17031
// exit ;
17027: POP
17028: POP
17029: GO 17335
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17031: LD_ADDR_VAR 0 8
17035: PUSH
17036: LD_VAR 0 12
17040: PUSH
17041: LD_VAR 0 7
17045: ARRAY
17046: PUSH
17047: LD_INT 1
17049: ARRAY
17050: PPUSH
17051: LD_VAR 0 12
17055: PUSH
17056: LD_VAR 0 7
17060: ARRAY
17061: PUSH
17062: LD_INT 2
17064: ARRAY
17065: PPUSH
17066: CALL_OW 546
17070: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17071: LD_VAR 0 8
17075: PUSH
17076: LD_INT 1
17078: ARRAY
17079: IFTRUE 17101
17081: PUSH
17082: LD_VAR 0 8
17086: PUSH
17087: LD_INT 2
17089: ARRAY
17090: PUSH
17091: LD_VAR 0 13
17095: PUSH
17096: LD_INT 2
17098: PLUS
17099: GREATER
17100: OR
17101: IFTRUE 17123
17103: PUSH
17104: LD_VAR 0 8
17108: PUSH
17109: LD_INT 2
17111: ARRAY
17112: PUSH
17113: LD_VAR 0 13
17117: PUSH
17118: LD_INT 2
17120: MINUS
17121: LESS
17122: OR
17123: IFTRUE 17191
17125: PUSH
17126: LD_VAR 0 8
17130: PUSH
17131: LD_INT 3
17133: ARRAY
17134: PUSH
17135: LD_INT 0
17137: PUSH
17138: LD_INT 8
17140: PUSH
17141: LD_INT 9
17143: PUSH
17144: LD_INT 10
17146: PUSH
17147: LD_INT 11
17149: PUSH
17150: LD_INT 12
17152: PUSH
17153: LD_INT 13
17155: PUSH
17156: LD_INT 16
17158: PUSH
17159: LD_INT 17
17161: PUSH
17162: LD_INT 18
17164: PUSH
17165: LD_INT 19
17167: PUSH
17168: LD_INT 20
17170: PUSH
17171: LD_INT 21
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: IN
17189: NOT
17190: OR
17191: IFTRUE 17204
17193: PUSH
17194: LD_VAR 0 8
17198: PUSH
17199: LD_INT 5
17201: ARRAY
17202: NOT
17203: OR
17204: IFTRUE 17244
17206: PUSH
17207: LD_VAR 0 8
17211: PUSH
17212: LD_INT 6
17214: ARRAY
17215: PUSH
17216: LD_INT 1
17218: PUSH
17219: LD_INT 2
17221: PUSH
17222: LD_INT 7
17224: PUSH
17225: LD_INT 9
17227: PUSH
17228: LD_INT 10
17230: PUSH
17231: LD_INT 11
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: IN
17242: NOT
17243: OR
17244: IFFALSE 17250
// exit ;
17246: POP
17247: POP
17248: GO 17335
// end ;
17250: GO 16907
17252: POP
17253: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17254: LD_VAR 0 9
17258: PPUSH
17259: LD_VAR 0 3
17263: PPUSH
17264: LD_VAR 0 4
17268: PPUSH
17269: LD_INT 20
17271: PPUSH
17272: CALL 9154 0 4
17276: PUSH
17277: LD_INT 4
17279: ARRAY
17280: IFFALSE 17284
// exit ;
17282: GO 17335
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17284: LD_VAR 0 2
17288: PUSH
17289: LD_INT 29
17291: PUSH
17292: LD_INT 30
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: IN
17299: IFFALSE 17323
17301: PUSH
17302: LD_VAR 0 3
17306: PPUSH
17307: LD_VAR 0 4
17311: PPUSH
17312: LD_VAR 0 9
17316: PPUSH
17317: CALL_OW 440
17321: NOT
17322: AND
17323: IFFALSE 17327
// exit ;
17325: GO 17335
// result := true ;
17327: LD_ADDR_VAR 0 6
17331: PUSH
17332: LD_INT 1
17334: ST_TO_ADDR
// end ;
17335: LD_VAR 0 6
17339: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17340: LD_INT 0
17342: PPUSH
17343: PPUSH
17344: PPUSH
17345: PPUSH
17346: PPUSH
17347: PPUSH
17348: PPUSH
17349: PPUSH
17350: PPUSH
17351: PPUSH
17352: PPUSH
17353: PPUSH
17354: PPUSH
17355: PPUSH
17356: PPUSH
17357: PPUSH
17358: PPUSH
17359: PPUSH
17360: PPUSH
17361: PPUSH
17362: PPUSH
17363: PPUSH
17364: PPUSH
17365: PPUSH
17366: PPUSH
17367: PPUSH
17368: PPUSH
17369: PPUSH
17370: PPUSH
17371: PPUSH
17372: PPUSH
17373: PPUSH
17374: PPUSH
17375: PPUSH
17376: PPUSH
17377: PPUSH
17378: PPUSH
17379: PPUSH
17380: PPUSH
17381: PPUSH
17382: PPUSH
17383: PPUSH
17384: PPUSH
17385: PPUSH
17386: PPUSH
17387: PPUSH
17388: PPUSH
17389: PPUSH
17390: PPUSH
17391: PPUSH
17392: PPUSH
17393: PPUSH
17394: PPUSH
17395: PPUSH
17396: PPUSH
17397: PPUSH
17398: PPUSH
17399: PPUSH
// result = [ ] ;
17400: LD_ADDR_VAR 0 7
17404: PUSH
17405: EMPTY
17406: ST_TO_ADDR
// temp_list = [ ] ;
17407: LD_ADDR_VAR 0 9
17411: PUSH
17412: EMPTY
17413: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17414: LD_VAR 0 4
17418: PUSH
17419: LD_INT 0
17421: PUSH
17422: LD_INT 1
17424: PUSH
17425: LD_INT 2
17427: PUSH
17428: LD_INT 3
17430: PUSH
17431: LD_INT 4
17433: PUSH
17434: LD_INT 5
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: IN
17445: NOT
17446: IFTRUE 17489
17448: PUSH
17449: LD_VAR 0 1
17453: PUSH
17454: LD_INT 0
17456: PUSH
17457: LD_INT 1
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: IN
17464: IFFALSE 17488
17466: PUSH
17467: LD_VAR 0 5
17471: PUSH
17472: LD_INT 1
17474: PUSH
17475: LD_INT 2
17477: PUSH
17478: LD_INT 3
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: LIST
17485: IN
17486: NOT
17487: AND
17488: OR
17489: IFFALSE 17493
// exit ;
17491: GO 35892
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17493: LD_VAR 0 1
17497: PUSH
17498: LD_INT 6
17500: PUSH
17501: LD_INT 7
17503: PUSH
17504: LD_INT 8
17506: PUSH
17507: LD_INT 13
17509: PUSH
17510: LD_INT 12
17512: PUSH
17513: LD_INT 15
17515: PUSH
17516: LD_INT 11
17518: PUSH
17519: LD_INT 14
17521: PUSH
17522: LD_INT 10
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: IN
17536: IFFALSE 17546
// btype = b_lab ;
17538: LD_ADDR_VAR 0 1
17542: PUSH
17543: LD_INT 6
17545: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17546: LD_VAR 0 6
17550: PUSH
17551: LD_INT 0
17553: PUSH
17554: LD_INT 1
17556: PUSH
17557: LD_INT 2
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: IN
17565: NOT
17566: IFTRUE 17634
17568: PUSH
17569: LD_VAR 0 1
17573: PUSH
17574: LD_INT 0
17576: PUSH
17577: LD_INT 1
17579: PUSH
17580: LD_INT 2
17582: PUSH
17583: LD_INT 3
17585: PUSH
17586: LD_INT 6
17588: PUSH
17589: LD_INT 36
17591: PUSH
17592: LD_INT 4
17594: PUSH
17595: LD_INT 5
17597: PUSH
17598: LD_INT 31
17600: PUSH
17601: LD_INT 32
17603: PUSH
17604: LD_INT 33
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: IN
17620: NOT
17621: IFFALSE 17633
17623: PUSH
17624: LD_VAR 0 6
17628: PUSH
17629: LD_INT 1
17631: EQUAL
17632: AND
17633: OR
17634: IFTRUE 17666
17636: PUSH
17637: LD_VAR 0 1
17641: PUSH
17642: LD_INT 2
17644: PUSH
17645: LD_INT 3
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: IN
17652: NOT
17653: IFFALSE 17665
17655: PUSH
17656: LD_VAR 0 6
17660: PUSH
17661: LD_INT 2
17663: EQUAL
17664: AND
17665: OR
17666: IFFALSE 17676
// mode = 0 ;
17668: LD_ADDR_VAR 0 6
17672: PUSH
17673: LD_INT 0
17675: ST_TO_ADDR
// case mode of 0 :
17676: LD_VAR 0 6
17680: PUSH
17681: LD_INT 0
17683: DOUBLE
17684: EQUAL
17685: IFTRUE 17689
17687: GO 29142
17689: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17690: LD_ADDR_VAR 0 11
17694: PUSH
17695: LD_INT 0
17697: PUSH
17698: LD_INT 0
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: LD_INT 0
17707: PUSH
17708: LD_INT 1
17710: NEG
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: LD_INT 1
17718: PUSH
17719: LD_INT 0
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PUSH
17726: LD_INT 1
17728: PUSH
17729: LD_INT 1
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: LD_INT 0
17738: PUSH
17739: LD_INT 1
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PUSH
17746: LD_INT 1
17748: NEG
17749: PUSH
17750: LD_INT 0
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 1
17759: NEG
17760: PUSH
17761: LD_INT 1
17763: NEG
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 1
17771: NEG
17772: PUSH
17773: LD_INT 2
17775: NEG
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 0
17783: PUSH
17784: LD_INT 2
17786: NEG
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PUSH
17792: LD_INT 1
17794: PUSH
17795: LD_INT 1
17797: NEG
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PUSH
17803: LD_INT 1
17805: PUSH
17806: LD_INT 2
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: PUSH
17813: LD_INT 0
17815: PUSH
17816: LD_INT 2
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PUSH
17823: LD_INT 1
17825: NEG
17826: PUSH
17827: LD_INT 1
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: LD_INT 1
17836: PUSH
17837: LD_INT 3
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 0
17846: PUSH
17847: LD_INT 3
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 1
17856: NEG
17857: PUSH
17858: LD_INT 2
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17883: LD_ADDR_VAR 0 12
17887: PUSH
17888: LD_INT 0
17890: PUSH
17891: LD_INT 0
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: LD_INT 0
17900: PUSH
17901: LD_INT 1
17903: NEG
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 1
17911: PUSH
17912: LD_INT 0
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 1
17921: PUSH
17922: LD_INT 1
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: LD_INT 0
17931: PUSH
17932: LD_INT 1
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: LD_INT 1
17941: NEG
17942: PUSH
17943: LD_INT 0
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 1
17952: NEG
17953: PUSH
17954: LD_INT 1
17956: NEG
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: PUSH
17962: LD_INT 1
17964: PUSH
17965: LD_INT 1
17967: NEG
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 2
17975: PUSH
17976: LD_INT 0
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 2
17985: PUSH
17986: LD_INT 1
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 1
17995: NEG
17996: PUSH
17997: LD_INT 1
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 2
18006: NEG
18007: PUSH
18008: LD_INT 0
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: LD_INT 2
18017: NEG
18018: PUSH
18019: LD_INT 1
18021: NEG
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 2
18029: NEG
18030: PUSH
18031: LD_INT 1
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 3
18040: NEG
18041: PUSH
18042: LD_INT 0
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 3
18051: NEG
18052: PUSH
18053: LD_INT 1
18055: NEG
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18079: LD_ADDR_VAR 0 13
18083: PUSH
18084: LD_INT 0
18086: PUSH
18087: LD_INT 0
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 0
18096: PUSH
18097: LD_INT 1
18099: NEG
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: LD_INT 1
18107: PUSH
18108: LD_INT 0
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 1
18117: PUSH
18118: LD_INT 1
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 0
18127: PUSH
18128: LD_INT 1
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 1
18137: NEG
18138: PUSH
18139: LD_INT 0
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: LD_INT 1
18148: NEG
18149: PUSH
18150: LD_INT 1
18152: NEG
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: LD_INT 1
18160: NEG
18161: PUSH
18162: LD_INT 2
18164: NEG
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 2
18172: PUSH
18173: LD_INT 1
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 2
18182: PUSH
18183: LD_INT 2
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: LD_INT 1
18192: PUSH
18193: LD_INT 2
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: LD_INT 2
18202: NEG
18203: PUSH
18204: LD_INT 1
18206: NEG
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 2
18214: NEG
18215: PUSH
18216: LD_INT 2
18218: NEG
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 2
18226: NEG
18227: PUSH
18228: LD_INT 3
18230: NEG
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 3
18238: NEG
18239: PUSH
18240: LD_INT 2
18242: NEG
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 3
18250: NEG
18251: PUSH
18252: LD_INT 3
18254: NEG
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18278: LD_ADDR_VAR 0 14
18282: PUSH
18283: LD_INT 0
18285: PUSH
18286: LD_INT 0
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 0
18295: PUSH
18296: LD_INT 1
18298: NEG
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: LD_INT 1
18306: PUSH
18307: LD_INT 0
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 1
18316: PUSH
18317: LD_INT 1
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PUSH
18324: LD_INT 0
18326: PUSH
18327: LD_INT 1
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 1
18336: NEG
18337: PUSH
18338: LD_INT 0
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 1
18347: NEG
18348: PUSH
18349: LD_INT 1
18351: NEG
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 1
18359: NEG
18360: PUSH
18361: LD_INT 2
18363: NEG
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: LD_INT 0
18371: PUSH
18372: LD_INT 2
18374: NEG
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: LD_INT 1
18382: PUSH
18383: LD_INT 1
18385: NEG
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 1
18393: PUSH
18394: LD_INT 2
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 0
18403: PUSH
18404: LD_INT 2
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 1
18413: NEG
18414: PUSH
18415: LD_INT 1
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 1
18424: NEG
18425: PUSH
18426: LD_INT 3
18428: NEG
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 0
18436: PUSH
18437: LD_INT 3
18439: NEG
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 1
18447: PUSH
18448: LD_INT 2
18450: NEG
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18474: LD_ADDR_VAR 0 15
18478: PUSH
18479: LD_INT 0
18481: PUSH
18482: LD_INT 0
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PUSH
18489: LD_INT 0
18491: PUSH
18492: LD_INT 1
18494: NEG
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 1
18502: PUSH
18503: LD_INT 0
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 1
18512: PUSH
18513: LD_INT 1
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 0
18522: PUSH
18523: LD_INT 1
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: LD_INT 1
18532: NEG
18533: PUSH
18534: LD_INT 0
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 1
18543: NEG
18544: PUSH
18545: LD_INT 1
18547: NEG
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 1
18555: PUSH
18556: LD_INT 1
18558: NEG
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 2
18566: PUSH
18567: LD_INT 0
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: PUSH
18574: LD_INT 2
18576: PUSH
18577: LD_INT 1
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 1
18586: NEG
18587: PUSH
18588: LD_INT 1
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 2
18597: NEG
18598: PUSH
18599: LD_INT 0
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: LD_INT 2
18608: NEG
18609: PUSH
18610: LD_INT 1
18612: NEG
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 2
18620: PUSH
18621: LD_INT 1
18623: NEG
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 3
18631: PUSH
18632: LD_INT 0
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 3
18641: PUSH
18642: LD_INT 1
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18667: LD_ADDR_VAR 0 16
18671: PUSH
18672: LD_INT 0
18674: PUSH
18675: LD_INT 0
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: LD_INT 0
18684: PUSH
18685: LD_INT 1
18687: NEG
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: LD_INT 1
18695: PUSH
18696: LD_INT 0
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 1
18705: PUSH
18706: LD_INT 1
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PUSH
18713: LD_INT 0
18715: PUSH
18716: LD_INT 1
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: LD_INT 1
18725: NEG
18726: PUSH
18727: LD_INT 0
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 1
18736: NEG
18737: PUSH
18738: LD_INT 1
18740: NEG
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: LD_INT 1
18748: NEG
18749: PUSH
18750: LD_INT 2
18752: NEG
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 2
18760: PUSH
18761: LD_INT 1
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 2
18770: PUSH
18771: LD_INT 2
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 1
18780: PUSH
18781: LD_INT 2
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: LD_INT 2
18790: NEG
18791: PUSH
18792: LD_INT 1
18794: NEG
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 2
18802: NEG
18803: PUSH
18804: LD_INT 2
18806: NEG
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: PUSH
18812: LD_INT 3
18814: PUSH
18815: LD_INT 2
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: PUSH
18822: LD_INT 3
18824: PUSH
18825: LD_INT 3
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: PUSH
18832: LD_INT 2
18834: PUSH
18835: LD_INT 3
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18860: LD_ADDR_VAR 0 17
18864: PUSH
18865: LD_INT 0
18867: PUSH
18868: LD_INT 0
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 0
18877: PUSH
18878: LD_INT 1
18880: NEG
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PUSH
18886: LD_INT 1
18888: PUSH
18889: LD_INT 0
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PUSH
18896: LD_INT 1
18898: PUSH
18899: LD_INT 1
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: LD_INT 0
18908: PUSH
18909: LD_INT 1
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 1
18918: NEG
18919: PUSH
18920: LD_INT 0
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PUSH
18927: LD_INT 1
18929: NEG
18930: PUSH
18931: LD_INT 1
18933: NEG
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 1
18941: NEG
18942: PUSH
18943: LD_INT 2
18945: NEG
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 0
18953: PUSH
18954: LD_INT 2
18956: NEG
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 1
18964: PUSH
18965: LD_INT 1
18967: NEG
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 2
18975: PUSH
18976: LD_INT 0
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: LD_INT 2
18985: PUSH
18986: LD_INT 1
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 2
18995: PUSH
18996: LD_INT 2
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 1
19005: PUSH
19006: LD_INT 2
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 0
19015: PUSH
19016: LD_INT 2
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 1
19025: NEG
19026: PUSH
19027: LD_INT 1
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: LD_INT 2
19036: NEG
19037: PUSH
19038: LD_INT 0
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 2
19047: NEG
19048: PUSH
19049: LD_INT 1
19051: NEG
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 2
19059: NEG
19060: PUSH
19061: LD_INT 2
19063: NEG
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19090: LD_ADDR_VAR 0 18
19094: PUSH
19095: LD_INT 0
19097: PUSH
19098: LD_INT 0
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 0
19107: PUSH
19108: LD_INT 1
19110: NEG
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 1
19118: PUSH
19119: LD_INT 0
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: LD_INT 1
19128: PUSH
19129: LD_INT 1
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 0
19138: PUSH
19139: LD_INT 1
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 1
19148: NEG
19149: PUSH
19150: LD_INT 0
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 1
19159: NEG
19160: PUSH
19161: LD_INT 1
19163: NEG
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 1
19171: NEG
19172: PUSH
19173: LD_INT 2
19175: NEG
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 0
19183: PUSH
19184: LD_INT 2
19186: NEG
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 1
19194: PUSH
19195: LD_INT 1
19197: NEG
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: LD_INT 2
19205: PUSH
19206: LD_INT 0
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: LD_INT 2
19215: PUSH
19216: LD_INT 1
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: LD_INT 2
19225: PUSH
19226: LD_INT 2
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 1
19235: PUSH
19236: LD_INT 2
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 0
19245: PUSH
19246: LD_INT 2
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: LD_INT 1
19255: NEG
19256: PUSH
19257: LD_INT 1
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 2
19266: NEG
19267: PUSH
19268: LD_INT 0
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PUSH
19275: LD_INT 2
19277: NEG
19278: PUSH
19279: LD_INT 1
19281: NEG
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: LD_INT 2
19289: NEG
19290: PUSH
19291: LD_INT 2
19293: NEG
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19320: LD_ADDR_VAR 0 19
19324: PUSH
19325: LD_INT 0
19327: PUSH
19328: LD_INT 0
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: LD_INT 0
19337: PUSH
19338: LD_INT 1
19340: NEG
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 1
19348: PUSH
19349: LD_INT 0
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 1
19358: PUSH
19359: LD_INT 1
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 0
19368: PUSH
19369: LD_INT 1
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 1
19378: NEG
19379: PUSH
19380: LD_INT 0
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PUSH
19387: LD_INT 1
19389: NEG
19390: PUSH
19391: LD_INT 1
19393: NEG
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 1
19401: NEG
19402: PUSH
19403: LD_INT 2
19405: NEG
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 0
19413: PUSH
19414: LD_INT 2
19416: NEG
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: LD_INT 1
19424: PUSH
19425: LD_INT 1
19427: NEG
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: LD_INT 2
19435: PUSH
19436: LD_INT 0
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PUSH
19443: LD_INT 2
19445: PUSH
19446: LD_INT 1
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PUSH
19453: LD_INT 2
19455: PUSH
19456: LD_INT 2
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 1
19465: PUSH
19466: LD_INT 2
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PUSH
19473: LD_INT 0
19475: PUSH
19476: LD_INT 2
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 1
19485: NEG
19486: PUSH
19487: LD_INT 1
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 2
19496: NEG
19497: PUSH
19498: LD_INT 0
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: LD_INT 2
19507: NEG
19508: PUSH
19509: LD_INT 1
19511: NEG
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 2
19519: NEG
19520: PUSH
19521: LD_INT 2
19523: NEG
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19550: LD_ADDR_VAR 0 20
19554: PUSH
19555: LD_INT 0
19557: PUSH
19558: LD_INT 0
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 0
19567: PUSH
19568: LD_INT 1
19570: NEG
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 1
19578: PUSH
19579: LD_INT 0
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: LD_INT 1
19588: PUSH
19589: LD_INT 1
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 0
19598: PUSH
19599: LD_INT 1
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 1
19608: NEG
19609: PUSH
19610: LD_INT 0
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 1
19619: NEG
19620: PUSH
19621: LD_INT 1
19623: NEG
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 1
19631: NEG
19632: PUSH
19633: LD_INT 2
19635: NEG
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 0
19643: PUSH
19644: LD_INT 2
19646: NEG
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: PUSH
19652: LD_INT 1
19654: PUSH
19655: LD_INT 1
19657: NEG
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 2
19665: PUSH
19666: LD_INT 0
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: LD_INT 2
19675: PUSH
19676: LD_INT 1
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: LD_INT 2
19685: PUSH
19686: LD_INT 2
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 1
19695: PUSH
19696: LD_INT 2
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 0
19705: PUSH
19706: LD_INT 2
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 1
19715: NEG
19716: PUSH
19717: LD_INT 1
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 2
19726: NEG
19727: PUSH
19728: LD_INT 0
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 2
19737: NEG
19738: PUSH
19739: LD_INT 1
19741: NEG
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: LD_INT 2
19749: NEG
19750: PUSH
19751: LD_INT 2
19753: NEG
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19780: LD_ADDR_VAR 0 21
19784: PUSH
19785: LD_INT 0
19787: PUSH
19788: LD_INT 0
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 0
19797: PUSH
19798: LD_INT 1
19800: NEG
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PUSH
19806: LD_INT 1
19808: PUSH
19809: LD_INT 0
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: LD_INT 1
19818: PUSH
19819: LD_INT 1
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 0
19828: PUSH
19829: LD_INT 1
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 1
19838: NEG
19839: PUSH
19840: LD_INT 0
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 1
19849: NEG
19850: PUSH
19851: LD_INT 1
19853: NEG
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: LD_INT 1
19861: NEG
19862: PUSH
19863: LD_INT 2
19865: NEG
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PUSH
19871: LD_INT 0
19873: PUSH
19874: LD_INT 2
19876: NEG
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 1
19884: PUSH
19885: LD_INT 1
19887: NEG
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: LD_INT 2
19895: PUSH
19896: LD_INT 0
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: LD_INT 2
19905: PUSH
19906: LD_INT 1
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 2
19915: PUSH
19916: LD_INT 2
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: LD_INT 1
19925: PUSH
19926: LD_INT 2
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 0
19935: PUSH
19936: LD_INT 2
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 1
19945: NEG
19946: PUSH
19947: LD_INT 1
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 2
19956: NEG
19957: PUSH
19958: LD_INT 0
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 2
19967: NEG
19968: PUSH
19969: LD_INT 1
19971: NEG
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PUSH
19977: LD_INT 2
19979: NEG
19980: PUSH
19981: LD_INT 2
19983: NEG
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20010: LD_ADDR_VAR 0 22
20014: PUSH
20015: LD_INT 0
20017: PUSH
20018: LD_INT 0
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 0
20027: PUSH
20028: LD_INT 1
20030: NEG
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: LD_INT 1
20038: PUSH
20039: LD_INT 0
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: LD_INT 1
20048: PUSH
20049: LD_INT 1
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PUSH
20056: LD_INT 0
20058: PUSH
20059: LD_INT 1
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PUSH
20066: LD_INT 1
20068: NEG
20069: PUSH
20070: LD_INT 0
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 1
20079: NEG
20080: PUSH
20081: LD_INT 1
20083: NEG
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 1
20091: NEG
20092: PUSH
20093: LD_INT 2
20095: NEG
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: LD_INT 0
20103: PUSH
20104: LD_INT 2
20106: NEG
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 1
20114: PUSH
20115: LD_INT 1
20117: NEG
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: LD_INT 2
20125: PUSH
20126: LD_INT 0
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 2
20135: PUSH
20136: LD_INT 1
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 2
20145: PUSH
20146: LD_INT 2
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 1
20155: PUSH
20156: LD_INT 2
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 0
20165: PUSH
20166: LD_INT 2
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 1
20175: NEG
20176: PUSH
20177: LD_INT 1
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 2
20186: NEG
20187: PUSH
20188: LD_INT 0
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: LD_INT 2
20197: NEG
20198: PUSH
20199: LD_INT 1
20201: NEG
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: PUSH
20207: LD_INT 2
20209: NEG
20210: PUSH
20211: LD_INT 2
20213: NEG
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20240: LD_ADDR_VAR 0 23
20244: PUSH
20245: LD_INT 0
20247: PUSH
20248: LD_INT 0
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 0
20257: PUSH
20258: LD_INT 1
20260: NEG
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PUSH
20266: LD_INT 1
20268: PUSH
20269: LD_INT 0
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: LD_INT 1
20278: PUSH
20279: LD_INT 1
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 0
20288: PUSH
20289: LD_INT 1
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 1
20298: NEG
20299: PUSH
20300: LD_INT 0
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 1
20309: NEG
20310: PUSH
20311: LD_INT 1
20313: NEG
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 1
20321: NEG
20322: PUSH
20323: LD_INT 2
20325: NEG
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 0
20333: PUSH
20334: LD_INT 2
20336: NEG
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 1
20344: PUSH
20345: LD_INT 1
20347: NEG
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 2
20355: PUSH
20356: LD_INT 0
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 2
20365: PUSH
20366: LD_INT 1
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PUSH
20373: LD_INT 2
20375: PUSH
20376: LD_INT 2
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: LD_INT 1
20385: PUSH
20386: LD_INT 2
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: LD_INT 0
20395: PUSH
20396: LD_INT 2
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 1
20405: NEG
20406: PUSH
20407: LD_INT 1
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: LD_INT 2
20416: NEG
20417: PUSH
20418: LD_INT 0
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 2
20427: NEG
20428: PUSH
20429: LD_INT 1
20431: NEG
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PUSH
20437: LD_INT 2
20439: NEG
20440: PUSH
20441: LD_INT 2
20443: NEG
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 2
20451: NEG
20452: PUSH
20453: LD_INT 3
20455: NEG
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: LD_INT 1
20463: NEG
20464: PUSH
20465: LD_INT 3
20467: NEG
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 1
20475: PUSH
20476: LD_INT 2
20478: NEG
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 2
20486: PUSH
20487: LD_INT 1
20489: NEG
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20520: LD_ADDR_VAR 0 24
20524: PUSH
20525: LD_INT 0
20527: PUSH
20528: LD_INT 0
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 0
20537: PUSH
20538: LD_INT 1
20540: NEG
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 1
20548: PUSH
20549: LD_INT 0
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 1
20558: PUSH
20559: LD_INT 1
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: LD_INT 0
20568: PUSH
20569: LD_INT 1
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 1
20578: NEG
20579: PUSH
20580: LD_INT 0
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 1
20589: NEG
20590: PUSH
20591: LD_INT 1
20593: NEG
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 1
20601: NEG
20602: PUSH
20603: LD_INT 2
20605: NEG
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 0
20613: PUSH
20614: LD_INT 2
20616: NEG
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 1
20624: PUSH
20625: LD_INT 1
20627: NEG
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: LD_INT 2
20635: PUSH
20636: LD_INT 0
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 2
20645: PUSH
20646: LD_INT 1
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 2
20655: PUSH
20656: LD_INT 2
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: LD_INT 1
20665: PUSH
20666: LD_INT 2
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PUSH
20673: LD_INT 0
20675: PUSH
20676: LD_INT 2
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 1
20685: NEG
20686: PUSH
20687: LD_INT 1
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PUSH
20694: LD_INT 2
20696: NEG
20697: PUSH
20698: LD_INT 0
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PUSH
20705: LD_INT 2
20707: NEG
20708: PUSH
20709: LD_INT 1
20711: NEG
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: PUSH
20717: LD_INT 2
20719: NEG
20720: PUSH
20721: LD_INT 2
20723: NEG
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PUSH
20729: LD_INT 1
20731: PUSH
20732: LD_INT 2
20734: NEG
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 2
20742: PUSH
20743: LD_INT 1
20745: NEG
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 3
20753: PUSH
20754: LD_INT 1
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: LD_INT 3
20763: PUSH
20764: LD_INT 2
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20796: LD_ADDR_VAR 0 25
20800: PUSH
20801: LD_INT 0
20803: PUSH
20804: LD_INT 0
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 0
20813: PUSH
20814: LD_INT 1
20816: NEG
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 1
20824: PUSH
20825: LD_INT 0
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 1
20834: PUSH
20835: LD_INT 1
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 0
20844: PUSH
20845: LD_INT 1
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 1
20854: NEG
20855: PUSH
20856: LD_INT 0
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 1
20865: NEG
20866: PUSH
20867: LD_INT 1
20869: NEG
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 1
20877: NEG
20878: PUSH
20879: LD_INT 2
20881: NEG
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 0
20889: PUSH
20890: LD_INT 2
20892: NEG
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 1
20900: PUSH
20901: LD_INT 1
20903: NEG
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 2
20911: PUSH
20912: LD_INT 0
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PUSH
20919: LD_INT 2
20921: PUSH
20922: LD_INT 1
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PUSH
20929: LD_INT 2
20931: PUSH
20932: LD_INT 2
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 1
20941: PUSH
20942: LD_INT 2
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 0
20951: PUSH
20952: LD_INT 2
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 1
20961: NEG
20962: PUSH
20963: LD_INT 1
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 2
20972: NEG
20973: PUSH
20974: LD_INT 0
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 2
20983: NEG
20984: PUSH
20985: LD_INT 1
20987: NEG
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 2
20995: NEG
20996: PUSH
20997: LD_INT 2
20999: NEG
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 3
21007: PUSH
21008: LD_INT 1
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 3
21017: PUSH
21018: LD_INT 2
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PUSH
21025: LD_INT 2
21027: PUSH
21028: LD_INT 3
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PUSH
21035: LD_INT 1
21037: PUSH
21038: LD_INT 3
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21070: LD_ADDR_VAR 0 26
21074: PUSH
21075: LD_INT 0
21077: PUSH
21078: LD_INT 0
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: LD_INT 0
21087: PUSH
21088: LD_INT 1
21090: NEG
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PUSH
21096: LD_INT 1
21098: PUSH
21099: LD_INT 0
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: LD_INT 1
21108: PUSH
21109: LD_INT 1
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 0
21118: PUSH
21119: LD_INT 1
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 1
21128: NEG
21129: PUSH
21130: LD_INT 0
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 1
21139: NEG
21140: PUSH
21141: LD_INT 1
21143: NEG
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PUSH
21149: LD_INT 1
21151: NEG
21152: PUSH
21153: LD_INT 2
21155: NEG
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 0
21163: PUSH
21164: LD_INT 2
21166: NEG
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: LD_INT 1
21174: PUSH
21175: LD_INT 1
21177: NEG
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 2
21185: PUSH
21186: LD_INT 0
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 2
21195: PUSH
21196: LD_INT 1
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 2
21205: PUSH
21206: LD_INT 2
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 1
21215: PUSH
21216: LD_INT 2
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 0
21225: PUSH
21226: LD_INT 2
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 1
21235: NEG
21236: PUSH
21237: LD_INT 1
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 2
21246: NEG
21247: PUSH
21248: LD_INT 0
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 2
21257: NEG
21258: PUSH
21259: LD_INT 1
21261: NEG
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: LD_INT 2
21269: NEG
21270: PUSH
21271: LD_INT 2
21273: NEG
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 2
21281: PUSH
21282: LD_INT 3
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 1
21291: PUSH
21292: LD_INT 3
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 1
21301: NEG
21302: PUSH
21303: LD_INT 2
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 2
21312: NEG
21313: PUSH
21314: LD_INT 1
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21346: LD_ADDR_VAR 0 27
21350: PUSH
21351: LD_INT 0
21353: PUSH
21354: LD_INT 0
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: LD_INT 0
21363: PUSH
21364: LD_INT 1
21366: NEG
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 1
21374: PUSH
21375: LD_INT 0
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PUSH
21382: LD_INT 1
21384: PUSH
21385: LD_INT 1
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 0
21394: PUSH
21395: LD_INT 1
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PUSH
21402: LD_INT 1
21404: NEG
21405: PUSH
21406: LD_INT 0
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PUSH
21413: LD_INT 1
21415: NEG
21416: PUSH
21417: LD_INT 1
21419: NEG
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: LD_INT 1
21427: NEG
21428: PUSH
21429: LD_INT 2
21431: NEG
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 0
21439: PUSH
21440: LD_INT 2
21442: NEG
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 1
21450: PUSH
21451: LD_INT 1
21453: NEG
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 2
21461: PUSH
21462: LD_INT 0
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 2
21471: PUSH
21472: LD_INT 1
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 2
21481: PUSH
21482: LD_INT 2
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 1
21491: PUSH
21492: LD_INT 2
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 0
21501: PUSH
21502: LD_INT 2
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 1
21511: NEG
21512: PUSH
21513: LD_INT 1
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 2
21522: NEG
21523: PUSH
21524: LD_INT 0
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 2
21533: NEG
21534: PUSH
21535: LD_INT 1
21537: NEG
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 2
21545: NEG
21546: PUSH
21547: LD_INT 2
21549: NEG
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 1
21557: NEG
21558: PUSH
21559: LD_INT 2
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 2
21568: NEG
21569: PUSH
21570: LD_INT 1
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 3
21579: NEG
21580: PUSH
21581: LD_INT 1
21583: NEG
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: PUSH
21589: LD_INT 3
21591: NEG
21592: PUSH
21593: LD_INT 2
21595: NEG
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21626: LD_ADDR_VAR 0 28
21630: PUSH
21631: LD_INT 0
21633: PUSH
21634: LD_INT 0
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 0
21643: PUSH
21644: LD_INT 1
21646: NEG
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 1
21654: PUSH
21655: LD_INT 0
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 1
21664: PUSH
21665: LD_INT 1
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 0
21674: PUSH
21675: LD_INT 1
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PUSH
21682: LD_INT 1
21684: NEG
21685: PUSH
21686: LD_INT 0
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 1
21695: NEG
21696: PUSH
21697: LD_INT 1
21699: NEG
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 1
21707: NEG
21708: PUSH
21709: LD_INT 2
21711: NEG
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 0
21719: PUSH
21720: LD_INT 2
21722: NEG
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 1
21730: PUSH
21731: LD_INT 1
21733: NEG
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 2
21741: PUSH
21742: LD_INT 0
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 2
21751: PUSH
21752: LD_INT 1
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 2
21761: PUSH
21762: LD_INT 2
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: LD_INT 1
21771: PUSH
21772: LD_INT 2
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: LD_INT 0
21781: PUSH
21782: LD_INT 2
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 1
21791: NEG
21792: PUSH
21793: LD_INT 1
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 2
21802: NEG
21803: PUSH
21804: LD_INT 0
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 2
21813: NEG
21814: PUSH
21815: LD_INT 1
21817: NEG
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 2
21825: NEG
21826: PUSH
21827: LD_INT 2
21829: NEG
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 2
21837: NEG
21838: PUSH
21839: LD_INT 3
21841: NEG
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 1
21849: NEG
21850: PUSH
21851: LD_INT 3
21853: NEG
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 3
21861: NEG
21862: PUSH
21863: LD_INT 1
21865: NEG
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 3
21873: NEG
21874: PUSH
21875: LD_INT 2
21877: NEG
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21908: LD_ADDR_VAR 0 29
21912: PUSH
21913: LD_INT 0
21915: PUSH
21916: LD_INT 0
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 0
21925: PUSH
21926: LD_INT 1
21928: NEG
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: LD_INT 1
21936: PUSH
21937: LD_INT 0
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 1
21946: PUSH
21947: LD_INT 1
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: LD_INT 0
21956: PUSH
21957: LD_INT 1
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 1
21966: NEG
21967: PUSH
21968: LD_INT 0
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PUSH
21975: LD_INT 1
21977: NEG
21978: PUSH
21979: LD_INT 1
21981: NEG
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 1
21989: NEG
21990: PUSH
21991: LD_INT 2
21993: NEG
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 0
22001: PUSH
22002: LD_INT 2
22004: NEG
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: LD_INT 1
22012: PUSH
22013: LD_INT 1
22015: NEG
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 2
22023: PUSH
22024: LD_INT 0
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 2
22033: PUSH
22034: LD_INT 1
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 1
22043: PUSH
22044: LD_INT 2
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: LD_INT 0
22053: PUSH
22054: LD_INT 2
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 1
22063: NEG
22064: PUSH
22065: LD_INT 1
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PUSH
22072: LD_INT 2
22074: NEG
22075: PUSH
22076: LD_INT 1
22078: NEG
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 2
22086: NEG
22087: PUSH
22088: LD_INT 2
22090: NEG
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 2
22098: NEG
22099: PUSH
22100: LD_INT 3
22102: NEG
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 2
22110: PUSH
22111: LD_INT 1
22113: NEG
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: LD_INT 3
22121: PUSH
22122: LD_INT 1
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 1
22131: PUSH
22132: LD_INT 3
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PUSH
22139: LD_INT 1
22141: NEG
22142: PUSH
22143: LD_INT 2
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 3
22152: NEG
22153: PUSH
22154: LD_INT 2
22156: NEG
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22187: LD_ADDR_VAR 0 30
22191: PUSH
22192: LD_INT 0
22194: PUSH
22195: LD_INT 0
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 0
22204: PUSH
22205: LD_INT 1
22207: NEG
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 1
22215: PUSH
22216: LD_INT 0
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 1
22225: PUSH
22226: LD_INT 1
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 0
22235: PUSH
22236: LD_INT 1
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PUSH
22243: LD_INT 1
22245: NEG
22246: PUSH
22247: LD_INT 0
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 1
22256: NEG
22257: PUSH
22258: LD_INT 1
22260: NEG
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 1
22268: NEG
22269: PUSH
22270: LD_INT 2
22272: NEG
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 0
22280: PUSH
22281: LD_INT 2
22283: NEG
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 1
22291: PUSH
22292: LD_INT 1
22294: NEG
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 2
22302: PUSH
22303: LD_INT 0
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 2
22312: PUSH
22313: LD_INT 1
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 2
22322: PUSH
22323: LD_INT 2
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 1
22332: PUSH
22333: LD_INT 2
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 1
22342: NEG
22343: PUSH
22344: LD_INT 1
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 2
22353: NEG
22354: PUSH
22355: LD_INT 0
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 2
22364: NEG
22365: PUSH
22366: LD_INT 1
22368: NEG
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 1
22376: NEG
22377: PUSH
22378: LD_INT 3
22380: NEG
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 1
22388: PUSH
22389: LD_INT 2
22391: NEG
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 3
22399: PUSH
22400: LD_INT 2
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 2
22409: PUSH
22410: LD_INT 3
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 2
22419: NEG
22420: PUSH
22421: LD_INT 1
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 3
22430: NEG
22431: PUSH
22432: LD_INT 1
22434: NEG
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22465: LD_ADDR_VAR 0 31
22469: PUSH
22470: LD_INT 0
22472: PUSH
22473: LD_INT 0
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 0
22482: PUSH
22483: LD_INT 1
22485: NEG
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 1
22493: PUSH
22494: LD_INT 0
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 1
22503: PUSH
22504: LD_INT 1
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 0
22513: PUSH
22514: LD_INT 1
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 1
22523: NEG
22524: PUSH
22525: LD_INT 0
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 1
22534: NEG
22535: PUSH
22536: LD_INT 1
22538: NEG
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PUSH
22544: LD_INT 1
22546: NEG
22547: PUSH
22548: LD_INT 2
22550: NEG
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 1
22558: PUSH
22559: LD_INT 1
22561: NEG
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 2
22569: PUSH
22570: LD_INT 0
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 2
22579: PUSH
22580: LD_INT 1
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 2
22589: PUSH
22590: LD_INT 2
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 1
22599: PUSH
22600: LD_INT 2
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 0
22609: PUSH
22610: LD_INT 2
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 1
22619: NEG
22620: PUSH
22621: LD_INT 1
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 2
22630: NEG
22631: PUSH
22632: LD_INT 1
22634: NEG
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 2
22642: NEG
22643: PUSH
22644: LD_INT 2
22646: NEG
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 2
22654: NEG
22655: PUSH
22656: LD_INT 3
22658: NEG
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 2
22666: PUSH
22667: LD_INT 1
22669: NEG
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PUSH
22675: LD_INT 3
22677: PUSH
22678: LD_INT 1
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: LD_INT 1
22687: PUSH
22688: LD_INT 3
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 1
22697: NEG
22698: PUSH
22699: LD_INT 2
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 3
22708: NEG
22709: PUSH
22710: LD_INT 2
22712: NEG
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22743: LD_ADDR_VAR 0 32
22747: PUSH
22748: LD_INT 0
22750: PUSH
22751: LD_INT 0
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 0
22760: PUSH
22761: LD_INT 1
22763: NEG
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 1
22771: PUSH
22772: LD_INT 0
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 1
22781: PUSH
22782: LD_INT 1
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 0
22791: PUSH
22792: LD_INT 1
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 1
22801: NEG
22802: PUSH
22803: LD_INT 0
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PUSH
22810: LD_INT 1
22812: NEG
22813: PUSH
22814: LD_INT 1
22816: NEG
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 1
22824: NEG
22825: PUSH
22826: LD_INT 2
22828: NEG
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: LD_INT 0
22836: PUSH
22837: LD_INT 2
22839: NEG
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: LD_INT 1
22847: PUSH
22848: LD_INT 1
22850: NEG
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: LD_INT 2
22858: PUSH
22859: LD_INT 1
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 2
22868: PUSH
22869: LD_INT 2
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 1
22878: PUSH
22879: LD_INT 2
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 0
22888: PUSH
22889: LD_INT 2
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 1
22898: NEG
22899: PUSH
22900: LD_INT 1
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 2
22909: NEG
22910: PUSH
22911: LD_INT 0
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 2
22920: NEG
22921: PUSH
22922: LD_INT 1
22924: NEG
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: LD_INT 1
22932: NEG
22933: PUSH
22934: LD_INT 3
22936: NEG
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 1
22944: PUSH
22945: LD_INT 2
22947: NEG
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 3
22955: PUSH
22956: LD_INT 2
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PUSH
22963: LD_INT 2
22965: PUSH
22966: LD_INT 3
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PUSH
22973: LD_INT 2
22975: NEG
22976: PUSH
22977: LD_INT 1
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 3
22986: NEG
22987: PUSH
22988: LD_INT 1
22990: NEG
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23021: LD_ADDR_VAR 0 33
23025: PUSH
23026: LD_INT 0
23028: PUSH
23029: LD_INT 0
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 0
23038: PUSH
23039: LD_INT 1
23041: NEG
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 1
23049: PUSH
23050: LD_INT 0
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 1
23059: PUSH
23060: LD_INT 1
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 0
23069: PUSH
23070: LD_INT 1
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 1
23079: NEG
23080: PUSH
23081: LD_INT 0
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 1
23090: NEG
23091: PUSH
23092: LD_INT 1
23094: NEG
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 1
23102: NEG
23103: PUSH
23104: LD_INT 2
23106: NEG
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 1
23114: PUSH
23115: LD_INT 1
23117: NEG
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 2
23125: PUSH
23126: LD_INT 0
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PUSH
23133: LD_INT 2
23135: PUSH
23136: LD_INT 1
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 1
23145: PUSH
23146: LD_INT 2
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 0
23155: PUSH
23156: LD_INT 2
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 1
23165: NEG
23166: PUSH
23167: LD_INT 1
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 2
23176: NEG
23177: PUSH
23178: LD_INT 0
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 2
23187: NEG
23188: PUSH
23189: LD_INT 1
23191: NEG
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 2
23199: NEG
23200: PUSH
23201: LD_INT 2
23203: NEG
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PUSH
23209: LD_INT 2
23211: NEG
23212: PUSH
23213: LD_INT 3
23215: NEG
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: LD_INT 2
23223: PUSH
23224: LD_INT 1
23226: NEG
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: PUSH
23232: LD_INT 3
23234: PUSH
23235: LD_INT 1
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 1
23244: PUSH
23245: LD_INT 3
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PUSH
23252: LD_INT 1
23254: NEG
23255: PUSH
23256: LD_INT 2
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 3
23265: NEG
23266: PUSH
23267: LD_INT 2
23269: NEG
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23300: LD_ADDR_VAR 0 34
23304: PUSH
23305: LD_INT 0
23307: PUSH
23308: LD_INT 0
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 0
23317: PUSH
23318: LD_INT 1
23320: NEG
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 1
23328: PUSH
23329: LD_INT 0
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 1
23338: PUSH
23339: LD_INT 1
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 0
23348: PUSH
23349: LD_INT 1
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 1
23358: NEG
23359: PUSH
23360: LD_INT 0
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 1
23369: NEG
23370: PUSH
23371: LD_INT 1
23373: NEG
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 1
23381: NEG
23382: PUSH
23383: LD_INT 2
23385: NEG
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: LD_INT 0
23393: PUSH
23394: LD_INT 2
23396: NEG
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PUSH
23402: LD_INT 1
23404: PUSH
23405: LD_INT 1
23407: NEG
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: PUSH
23413: LD_INT 2
23415: PUSH
23416: LD_INT 1
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 2
23425: PUSH
23426: LD_INT 2
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: LD_INT 1
23435: PUSH
23436: LD_INT 2
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 1
23445: NEG
23446: PUSH
23447: LD_INT 1
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 2
23456: NEG
23457: PUSH
23458: LD_INT 0
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 2
23467: NEG
23468: PUSH
23469: LD_INT 1
23471: NEG
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 2
23479: NEG
23480: PUSH
23481: LD_INT 2
23483: NEG
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PUSH
23489: LD_INT 1
23491: NEG
23492: PUSH
23493: LD_INT 3
23495: NEG
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 1
23503: PUSH
23504: LD_INT 2
23506: NEG
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 3
23514: PUSH
23515: LD_INT 2
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: LD_INT 2
23524: PUSH
23525: LD_INT 3
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PUSH
23532: LD_INT 2
23534: NEG
23535: PUSH
23536: LD_INT 1
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: LD_INT 3
23545: NEG
23546: PUSH
23547: LD_INT 1
23549: NEG
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23580: LD_ADDR_VAR 0 35
23584: PUSH
23585: LD_INT 0
23587: PUSH
23588: LD_INT 0
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: LD_INT 0
23597: PUSH
23598: LD_INT 1
23600: NEG
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PUSH
23606: LD_INT 1
23608: PUSH
23609: LD_INT 0
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 1
23618: PUSH
23619: LD_INT 1
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 0
23628: PUSH
23629: LD_INT 1
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 1
23638: NEG
23639: PUSH
23640: LD_INT 0
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 1
23649: NEG
23650: PUSH
23651: LD_INT 1
23653: NEG
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 2
23661: PUSH
23662: LD_INT 1
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 2
23671: NEG
23672: PUSH
23673: LD_INT 1
23675: NEG
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23692: LD_ADDR_VAR 0 36
23696: PUSH
23697: LD_INT 0
23699: PUSH
23700: LD_INT 0
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: PUSH
23707: LD_INT 0
23709: PUSH
23710: LD_INT 1
23712: NEG
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 1
23720: PUSH
23721: LD_INT 0
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 1
23730: PUSH
23731: LD_INT 1
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 0
23740: PUSH
23741: LD_INT 1
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 1
23750: NEG
23751: PUSH
23752: LD_INT 0
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 1
23761: NEG
23762: PUSH
23763: LD_INT 1
23765: NEG
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 1
23773: NEG
23774: PUSH
23775: LD_INT 2
23777: NEG
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PUSH
23783: LD_INT 1
23785: PUSH
23786: LD_INT 2
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23804: LD_ADDR_VAR 0 37
23808: PUSH
23809: LD_INT 0
23811: PUSH
23812: LD_INT 0
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 0
23821: PUSH
23822: LD_INT 1
23824: NEG
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 1
23832: PUSH
23833: LD_INT 0
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 1
23842: PUSH
23843: LD_INT 1
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 0
23852: PUSH
23853: LD_INT 1
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 1
23862: NEG
23863: PUSH
23864: LD_INT 0
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 1
23873: NEG
23874: PUSH
23875: LD_INT 1
23877: NEG
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 1
23885: PUSH
23886: LD_INT 1
23888: NEG
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 1
23896: NEG
23897: PUSH
23898: LD_INT 1
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23916: LD_ADDR_VAR 0 38
23920: PUSH
23921: LD_INT 0
23923: PUSH
23924: LD_INT 0
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: LD_INT 0
23933: PUSH
23934: LD_INT 1
23936: NEG
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 1
23944: PUSH
23945: LD_INT 0
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 1
23954: PUSH
23955: LD_INT 1
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: LD_INT 0
23964: PUSH
23965: LD_INT 1
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 1
23974: NEG
23975: PUSH
23976: LD_INT 0
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 1
23985: NEG
23986: PUSH
23987: LD_INT 1
23989: NEG
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 2
23997: PUSH
23998: LD_INT 1
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 2
24007: NEG
24008: PUSH
24009: LD_INT 1
24011: NEG
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24028: LD_ADDR_VAR 0 39
24032: PUSH
24033: LD_INT 0
24035: PUSH
24036: LD_INT 0
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 0
24045: PUSH
24046: LD_INT 1
24048: NEG
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 1
24056: PUSH
24057: LD_INT 0
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 1
24066: PUSH
24067: LD_INT 1
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 0
24076: PUSH
24077: LD_INT 1
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 1
24086: NEG
24087: PUSH
24088: LD_INT 0
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 1
24097: NEG
24098: PUSH
24099: LD_INT 1
24101: NEG
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 1
24109: NEG
24110: PUSH
24111: LD_INT 2
24113: NEG
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: LD_INT 1
24121: PUSH
24122: LD_INT 2
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24140: LD_ADDR_VAR 0 40
24144: PUSH
24145: LD_INT 0
24147: PUSH
24148: LD_INT 0
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 0
24157: PUSH
24158: LD_INT 1
24160: NEG
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 1
24168: PUSH
24169: LD_INT 0
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 1
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 0
24188: PUSH
24189: LD_INT 1
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 1
24198: NEG
24199: PUSH
24200: LD_INT 0
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: LD_INT 1
24209: NEG
24210: PUSH
24211: LD_INT 1
24213: NEG
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 1
24221: PUSH
24222: LD_INT 1
24224: NEG
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 1
24232: NEG
24233: PUSH
24234: LD_INT 1
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24252: LD_ADDR_VAR 0 41
24256: PUSH
24257: LD_INT 0
24259: PUSH
24260: LD_INT 0
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 0
24269: PUSH
24270: LD_INT 1
24272: NEG
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 1
24280: PUSH
24281: LD_INT 0
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 1
24290: PUSH
24291: LD_INT 1
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 0
24300: PUSH
24301: LD_INT 1
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 1
24310: NEG
24311: PUSH
24312: LD_INT 0
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 1
24321: NEG
24322: PUSH
24323: LD_INT 1
24325: NEG
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 1
24333: NEG
24334: PUSH
24335: LD_INT 2
24337: NEG
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 1
24345: PUSH
24346: LD_INT 1
24348: NEG
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 2
24356: PUSH
24357: LD_INT 0
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 2
24366: PUSH
24367: LD_INT 1
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 2
24376: PUSH
24377: LD_INT 2
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PUSH
24384: LD_INT 1
24386: PUSH
24387: LD_INT 2
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: LD_INT 1
24396: NEG
24397: PUSH
24398: LD_INT 1
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 2
24407: NEG
24408: PUSH
24409: LD_INT 0
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 2
24418: NEG
24419: PUSH
24420: LD_INT 1
24422: NEG
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 2
24430: NEG
24431: PUSH
24432: LD_INT 2
24434: NEG
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 2
24442: NEG
24443: PUSH
24444: LD_INT 3
24446: NEG
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 2
24454: PUSH
24455: LD_INT 1
24457: NEG
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 3
24465: PUSH
24466: LD_INT 0
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 3
24475: PUSH
24476: LD_INT 1
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 3
24485: PUSH
24486: LD_INT 2
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 3
24495: PUSH
24496: LD_INT 3
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 2
24505: PUSH
24506: LD_INT 3
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 2
24515: NEG
24516: PUSH
24517: LD_INT 1
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 3
24526: NEG
24527: PUSH
24528: LD_INT 0
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: LD_INT 3
24537: NEG
24538: PUSH
24539: LD_INT 1
24541: NEG
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 3
24549: NEG
24550: PUSH
24551: LD_INT 2
24553: NEG
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 3
24561: NEG
24562: PUSH
24563: LD_INT 3
24565: NEG
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24602: LD_ADDR_VAR 0 42
24606: PUSH
24607: LD_INT 0
24609: PUSH
24610: LD_INT 0
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: LD_INT 0
24619: PUSH
24620: LD_INT 1
24622: NEG
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 1
24630: PUSH
24631: LD_INT 0
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 1
24640: PUSH
24641: LD_INT 1
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 0
24650: PUSH
24651: LD_INT 1
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PUSH
24658: LD_INT 1
24660: NEG
24661: PUSH
24662: LD_INT 0
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 1
24671: NEG
24672: PUSH
24673: LD_INT 1
24675: NEG
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 1
24683: NEG
24684: PUSH
24685: LD_INT 2
24687: NEG
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 0
24695: PUSH
24696: LD_INT 2
24698: NEG
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 1
24706: PUSH
24707: LD_INT 1
24709: NEG
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 2
24717: PUSH
24718: LD_INT 1
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 2
24727: PUSH
24728: LD_INT 2
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: PUSH
24735: LD_INT 1
24737: PUSH
24738: LD_INT 2
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PUSH
24745: LD_INT 0
24747: PUSH
24748: LD_INT 2
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 1
24757: NEG
24758: PUSH
24759: LD_INT 1
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 2
24768: NEG
24769: PUSH
24770: LD_INT 1
24772: NEG
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 2
24780: NEG
24781: PUSH
24782: LD_INT 2
24784: NEG
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 2
24792: NEG
24793: PUSH
24794: LD_INT 3
24796: NEG
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 1
24804: NEG
24805: PUSH
24806: LD_INT 3
24808: NEG
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: LD_INT 0
24816: PUSH
24817: LD_INT 3
24819: NEG
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 1
24827: PUSH
24828: LD_INT 2
24830: NEG
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 3
24838: PUSH
24839: LD_INT 2
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 3
24848: PUSH
24849: LD_INT 3
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: PUSH
24856: LD_INT 2
24858: PUSH
24859: LD_INT 3
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 1
24868: PUSH
24869: LD_INT 3
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 0
24878: PUSH
24879: LD_INT 3
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 1
24888: NEG
24889: PUSH
24890: LD_INT 2
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 3
24899: NEG
24900: PUSH
24901: LD_INT 2
24903: NEG
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 3
24911: NEG
24912: PUSH
24913: LD_INT 3
24915: NEG
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24952: LD_ADDR_VAR 0 43
24956: PUSH
24957: LD_INT 0
24959: PUSH
24960: LD_INT 0
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 0
24969: PUSH
24970: LD_INT 1
24972: NEG
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 1
24980: PUSH
24981: LD_INT 0
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 1
24990: PUSH
24991: LD_INT 1
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 0
25000: PUSH
25001: LD_INT 1
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: LD_INT 1
25010: NEG
25011: PUSH
25012: LD_INT 0
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: LD_INT 1
25021: NEG
25022: PUSH
25023: LD_INT 1
25025: NEG
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 1
25033: NEG
25034: PUSH
25035: LD_INT 2
25037: NEG
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 0
25045: PUSH
25046: LD_INT 2
25048: NEG
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 1
25056: PUSH
25057: LD_INT 1
25059: NEG
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 2
25067: PUSH
25068: LD_INT 0
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 2
25077: PUSH
25078: LD_INT 1
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 1
25087: PUSH
25088: LD_INT 2
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 0
25097: PUSH
25098: LD_INT 2
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 1
25107: NEG
25108: PUSH
25109: LD_INT 1
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 2
25118: NEG
25119: PUSH
25120: LD_INT 0
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 2
25129: NEG
25130: PUSH
25131: LD_INT 1
25133: NEG
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 1
25141: NEG
25142: PUSH
25143: LD_INT 3
25145: NEG
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 0
25153: PUSH
25154: LD_INT 3
25156: NEG
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 1
25164: PUSH
25165: LD_INT 2
25167: NEG
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 2
25175: PUSH
25176: LD_INT 1
25178: NEG
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 3
25186: PUSH
25187: LD_INT 0
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 3
25196: PUSH
25197: LD_INT 1
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 1
25206: PUSH
25207: LD_INT 3
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 0
25216: PUSH
25217: LD_INT 3
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 1
25226: NEG
25227: PUSH
25228: LD_INT 2
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 2
25237: NEG
25238: PUSH
25239: LD_INT 1
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: LD_INT 3
25248: NEG
25249: PUSH
25250: LD_INT 0
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PUSH
25257: LD_INT 3
25259: NEG
25260: PUSH
25261: LD_INT 1
25263: NEG
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25300: LD_ADDR_VAR 0 44
25304: PUSH
25305: LD_INT 0
25307: PUSH
25308: LD_INT 0
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 0
25317: PUSH
25318: LD_INT 1
25320: NEG
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 1
25328: PUSH
25329: LD_INT 0
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 1
25338: PUSH
25339: LD_INT 1
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 0
25348: PUSH
25349: LD_INT 1
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 1
25358: NEG
25359: PUSH
25360: LD_INT 0
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 1
25369: NEG
25370: PUSH
25371: LD_INT 1
25373: NEG
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 1
25381: NEG
25382: PUSH
25383: LD_INT 2
25385: NEG
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 1
25393: PUSH
25394: LD_INT 1
25396: NEG
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 2
25404: PUSH
25405: LD_INT 0
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 2
25414: PUSH
25415: LD_INT 1
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 2
25424: PUSH
25425: LD_INT 2
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 1
25434: PUSH
25435: LD_INT 2
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 1
25444: NEG
25445: PUSH
25446: LD_INT 1
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 2
25455: NEG
25456: PUSH
25457: LD_INT 0
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PUSH
25464: LD_INT 2
25466: NEG
25467: PUSH
25468: LD_INT 1
25470: NEG
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 2
25478: NEG
25479: PUSH
25480: LD_INT 2
25482: NEG
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 2
25490: NEG
25491: PUSH
25492: LD_INT 3
25494: NEG
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 2
25502: PUSH
25503: LD_INT 1
25505: NEG
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 3
25513: PUSH
25514: LD_INT 0
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 3
25523: PUSH
25524: LD_INT 1
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 3
25533: PUSH
25534: LD_INT 2
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 3
25543: PUSH
25544: LD_INT 3
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 2
25553: PUSH
25554: LD_INT 3
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 2
25563: NEG
25564: PUSH
25565: LD_INT 1
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 3
25574: NEG
25575: PUSH
25576: LD_INT 0
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 3
25585: NEG
25586: PUSH
25587: LD_INT 1
25589: NEG
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 3
25597: NEG
25598: PUSH
25599: LD_INT 2
25601: NEG
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 3
25609: NEG
25610: PUSH
25611: LD_INT 3
25613: NEG
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25650: LD_ADDR_VAR 0 45
25654: PUSH
25655: LD_INT 0
25657: PUSH
25658: LD_INT 0
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 0
25667: PUSH
25668: LD_INT 1
25670: NEG
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 1
25678: PUSH
25679: LD_INT 0
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 1
25688: PUSH
25689: LD_INT 1
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 0
25698: PUSH
25699: LD_INT 1
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 1
25708: NEG
25709: PUSH
25710: LD_INT 0
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 1
25719: NEG
25720: PUSH
25721: LD_INT 1
25723: NEG
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 1
25731: NEG
25732: PUSH
25733: LD_INT 2
25735: NEG
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 0
25743: PUSH
25744: LD_INT 2
25746: NEG
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 1
25754: PUSH
25755: LD_INT 1
25757: NEG
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 2
25765: PUSH
25766: LD_INT 1
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 2
25775: PUSH
25776: LD_INT 2
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 1
25785: PUSH
25786: LD_INT 2
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 0
25795: PUSH
25796: LD_INT 2
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 1
25805: NEG
25806: PUSH
25807: LD_INT 1
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: LD_INT 2
25816: NEG
25817: PUSH
25818: LD_INT 1
25820: NEG
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 2
25828: NEG
25829: PUSH
25830: LD_INT 2
25832: NEG
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 2
25840: NEG
25841: PUSH
25842: LD_INT 3
25844: NEG
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 1
25852: NEG
25853: PUSH
25854: LD_INT 3
25856: NEG
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 0
25864: PUSH
25865: LD_INT 3
25867: NEG
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 1
25875: PUSH
25876: LD_INT 2
25878: NEG
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 3
25886: PUSH
25887: LD_INT 2
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 3
25896: PUSH
25897: LD_INT 3
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 2
25906: PUSH
25907: LD_INT 3
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 1
25916: PUSH
25917: LD_INT 3
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 0
25926: PUSH
25927: LD_INT 3
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 1
25936: NEG
25937: PUSH
25938: LD_INT 2
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 3
25947: NEG
25948: PUSH
25949: LD_INT 2
25951: NEG
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 3
25959: NEG
25960: PUSH
25961: LD_INT 3
25963: NEG
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26000: LD_ADDR_VAR 0 46
26004: PUSH
26005: LD_INT 0
26007: PUSH
26008: LD_INT 0
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 0
26017: PUSH
26018: LD_INT 1
26020: NEG
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 1
26028: PUSH
26029: LD_INT 0
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 1
26038: PUSH
26039: LD_INT 1
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 0
26048: PUSH
26049: LD_INT 1
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 1
26058: NEG
26059: PUSH
26060: LD_INT 0
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 1
26069: NEG
26070: PUSH
26071: LD_INT 1
26073: NEG
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 1
26081: NEG
26082: PUSH
26083: LD_INT 2
26085: NEG
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 0
26093: PUSH
26094: LD_INT 2
26096: NEG
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 1
26104: PUSH
26105: LD_INT 1
26107: NEG
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: LD_INT 2
26115: PUSH
26116: LD_INT 0
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 2
26125: PUSH
26126: LD_INT 1
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 1
26135: PUSH
26136: LD_INT 2
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 0
26145: PUSH
26146: LD_INT 2
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 1
26155: NEG
26156: PUSH
26157: LD_INT 1
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 2
26166: NEG
26167: PUSH
26168: LD_INT 0
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 2
26177: NEG
26178: PUSH
26179: LD_INT 1
26181: NEG
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 1
26189: NEG
26190: PUSH
26191: LD_INT 3
26193: NEG
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 0
26201: PUSH
26202: LD_INT 3
26204: NEG
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 1
26212: PUSH
26213: LD_INT 2
26215: NEG
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 2
26223: PUSH
26224: LD_INT 1
26226: NEG
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 3
26234: PUSH
26235: LD_INT 0
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 3
26244: PUSH
26245: LD_INT 1
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 1
26254: PUSH
26255: LD_INT 3
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 0
26264: PUSH
26265: LD_INT 3
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 1
26274: NEG
26275: PUSH
26276: LD_INT 2
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 2
26285: NEG
26286: PUSH
26287: LD_INT 1
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 3
26296: NEG
26297: PUSH
26298: LD_INT 0
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 3
26307: NEG
26308: PUSH
26309: LD_INT 1
26311: NEG
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26348: LD_ADDR_VAR 0 47
26352: PUSH
26353: LD_INT 0
26355: PUSH
26356: LD_INT 0
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 0
26365: PUSH
26366: LD_INT 1
26368: NEG
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 1
26376: PUSH
26377: LD_INT 0
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 1
26386: PUSH
26387: LD_INT 1
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 0
26396: PUSH
26397: LD_INT 1
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 1
26406: NEG
26407: PUSH
26408: LD_INT 0
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 1
26417: NEG
26418: PUSH
26419: LD_INT 1
26421: NEG
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 1
26429: NEG
26430: PUSH
26431: LD_INT 2
26433: NEG
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 0
26441: PUSH
26442: LD_INT 2
26444: NEG
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 1
26452: PUSH
26453: LD_INT 1
26455: NEG
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 2
26463: NEG
26464: PUSH
26465: LD_INT 1
26467: NEG
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 2
26475: NEG
26476: PUSH
26477: LD_INT 2
26479: NEG
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26499: LD_ADDR_VAR 0 48
26503: PUSH
26504: LD_INT 0
26506: PUSH
26507: LD_INT 0
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 0
26516: PUSH
26517: LD_INT 1
26519: NEG
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 1
26527: PUSH
26528: LD_INT 0
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 1
26537: PUSH
26538: LD_INT 1
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 0
26547: PUSH
26548: LD_INT 1
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 1
26557: NEG
26558: PUSH
26559: LD_INT 0
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 1
26568: NEG
26569: PUSH
26570: LD_INT 1
26572: NEG
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 1
26580: NEG
26581: PUSH
26582: LD_INT 2
26584: NEG
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 0
26592: PUSH
26593: LD_INT 2
26595: NEG
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 1
26603: PUSH
26604: LD_INT 1
26606: NEG
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 2
26614: PUSH
26615: LD_INT 0
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 2
26624: PUSH
26625: LD_INT 1
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26646: LD_ADDR_VAR 0 49
26650: PUSH
26651: LD_INT 0
26653: PUSH
26654: LD_INT 0
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 0
26663: PUSH
26664: LD_INT 1
26666: NEG
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 1
26674: PUSH
26675: LD_INT 0
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 1
26684: PUSH
26685: LD_INT 1
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 0
26694: PUSH
26695: LD_INT 1
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: LD_INT 1
26704: NEG
26705: PUSH
26706: LD_INT 0
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 1
26715: NEG
26716: PUSH
26717: LD_INT 1
26719: NEG
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 1
26727: PUSH
26728: LD_INT 1
26730: NEG
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 2
26738: PUSH
26739: LD_INT 0
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 2
26748: PUSH
26749: LD_INT 1
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: PUSH
26756: LD_INT 2
26758: PUSH
26759: LD_INT 2
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: LD_INT 1
26768: PUSH
26769: LD_INT 2
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26790: LD_ADDR_VAR 0 50
26794: PUSH
26795: LD_INT 0
26797: PUSH
26798: LD_INT 0
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: LD_INT 1
26810: NEG
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 1
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 1
26828: PUSH
26829: LD_INT 1
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 0
26838: PUSH
26839: LD_INT 1
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 1
26848: NEG
26849: PUSH
26850: LD_INT 0
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 1
26859: NEG
26860: PUSH
26861: LD_INT 1
26863: NEG
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 2
26871: PUSH
26872: LD_INT 1
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 2
26881: PUSH
26882: LD_INT 2
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 1
26891: PUSH
26892: LD_INT 2
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 0
26901: PUSH
26902: LD_INT 2
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 1
26911: NEG
26912: PUSH
26913: LD_INT 1
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26934: LD_ADDR_VAR 0 51
26938: PUSH
26939: LD_INT 0
26941: PUSH
26942: LD_INT 0
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 0
26951: PUSH
26952: LD_INT 1
26954: NEG
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 1
26962: PUSH
26963: LD_INT 0
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 1
26972: PUSH
26973: LD_INT 1
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: LD_INT 0
26982: PUSH
26983: LD_INT 1
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 1
26992: NEG
26993: PUSH
26994: LD_INT 0
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 1
27003: NEG
27004: PUSH
27005: LD_INT 1
27007: NEG
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 1
27015: PUSH
27016: LD_INT 2
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 0
27025: PUSH
27026: LD_INT 2
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 1
27035: NEG
27036: PUSH
27037: LD_INT 1
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 2
27046: NEG
27047: PUSH
27048: LD_INT 0
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: LD_INT 2
27057: NEG
27058: PUSH
27059: LD_INT 1
27061: NEG
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27081: LD_ADDR_VAR 0 52
27085: PUSH
27086: LD_INT 0
27088: PUSH
27089: LD_INT 0
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 0
27098: PUSH
27099: LD_INT 1
27101: NEG
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 1
27109: PUSH
27110: LD_INT 0
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 1
27119: PUSH
27120: LD_INT 1
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 0
27129: PUSH
27130: LD_INT 1
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 1
27139: NEG
27140: PUSH
27141: LD_INT 0
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 1
27150: NEG
27151: PUSH
27152: LD_INT 1
27154: NEG
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 1
27162: NEG
27163: PUSH
27164: LD_INT 2
27166: NEG
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 1
27174: NEG
27175: PUSH
27176: LD_INT 1
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 2
27185: NEG
27186: PUSH
27187: LD_INT 0
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 2
27196: NEG
27197: PUSH
27198: LD_INT 1
27200: NEG
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 2
27208: NEG
27209: PUSH
27210: LD_INT 2
27212: NEG
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27232: LD_ADDR_VAR 0 53
27236: PUSH
27237: LD_INT 0
27239: PUSH
27240: LD_INT 0
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 0
27249: PUSH
27250: LD_INT 1
27252: NEG
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: LD_INT 1
27260: PUSH
27261: LD_INT 0
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 1
27270: PUSH
27271: LD_INT 1
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 0
27280: PUSH
27281: LD_INT 1
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 1
27290: NEG
27291: PUSH
27292: LD_INT 0
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 1
27301: NEG
27302: PUSH
27303: LD_INT 1
27305: NEG
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 1
27313: NEG
27314: PUSH
27315: LD_INT 2
27317: NEG
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 0
27325: PUSH
27326: LD_INT 2
27328: NEG
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 1
27336: PUSH
27337: LD_INT 1
27339: NEG
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 2
27347: PUSH
27348: LD_INT 0
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 2
27357: PUSH
27358: LD_INT 1
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 2
27367: PUSH
27368: LD_INT 2
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 1
27377: PUSH
27378: LD_INT 2
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 0
27387: PUSH
27388: LD_INT 2
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 1
27397: NEG
27398: PUSH
27399: LD_INT 1
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 2
27408: NEG
27409: PUSH
27410: LD_INT 0
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: LD_INT 2
27419: NEG
27420: PUSH
27421: LD_INT 1
27423: NEG
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 2
27431: NEG
27432: PUSH
27433: LD_INT 2
27435: NEG
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27462: LD_ADDR_VAR 0 54
27466: PUSH
27467: LD_INT 0
27469: PUSH
27470: LD_INT 0
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 0
27479: PUSH
27480: LD_INT 1
27482: NEG
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 1
27490: PUSH
27491: LD_INT 0
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 1
27500: PUSH
27501: LD_INT 1
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 0
27510: PUSH
27511: LD_INT 1
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 1
27520: NEG
27521: PUSH
27522: LD_INT 0
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 1
27531: NEG
27532: PUSH
27533: LD_INT 1
27535: NEG
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 1
27543: NEG
27544: PUSH
27545: LD_INT 2
27547: NEG
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: LD_INT 0
27555: PUSH
27556: LD_INT 2
27558: NEG
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 1
27566: PUSH
27567: LD_INT 1
27569: NEG
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 2
27577: PUSH
27578: LD_INT 0
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: LD_INT 2
27587: PUSH
27588: LD_INT 1
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 2
27597: PUSH
27598: LD_INT 2
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 1
27607: PUSH
27608: LD_INT 2
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 0
27617: PUSH
27618: LD_INT 2
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 1
27627: NEG
27628: PUSH
27629: LD_INT 1
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 2
27638: NEG
27639: PUSH
27640: LD_INT 0
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PUSH
27647: LD_INT 2
27649: NEG
27650: PUSH
27651: LD_INT 1
27653: NEG
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 2
27661: NEG
27662: PUSH
27663: LD_INT 2
27665: NEG
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27692: LD_ADDR_VAR 0 55
27696: PUSH
27697: LD_INT 0
27699: PUSH
27700: LD_INT 0
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 0
27709: PUSH
27710: LD_INT 1
27712: NEG
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 1
27720: PUSH
27721: LD_INT 0
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PUSH
27728: LD_INT 1
27730: PUSH
27731: LD_INT 1
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 0
27740: PUSH
27741: LD_INT 1
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 1
27750: NEG
27751: PUSH
27752: LD_INT 0
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 1
27761: NEG
27762: PUSH
27763: LD_INT 1
27765: NEG
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 1
27773: NEG
27774: PUSH
27775: LD_INT 2
27777: NEG
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 0
27785: PUSH
27786: LD_INT 2
27788: NEG
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 1
27796: PUSH
27797: LD_INT 1
27799: NEG
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 2
27807: PUSH
27808: LD_INT 0
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 2
27817: PUSH
27818: LD_INT 1
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 2
27827: PUSH
27828: LD_INT 2
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 1
27837: PUSH
27838: LD_INT 2
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 0
27847: PUSH
27848: LD_INT 2
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 1
27857: NEG
27858: PUSH
27859: LD_INT 1
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 2
27868: NEG
27869: PUSH
27870: LD_INT 0
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: LD_INT 2
27879: NEG
27880: PUSH
27881: LD_INT 1
27883: NEG
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 2
27891: NEG
27892: PUSH
27893: LD_INT 2
27895: NEG
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27922: LD_ADDR_VAR 0 56
27926: PUSH
27927: LD_INT 0
27929: PUSH
27930: LD_INT 0
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 0
27939: PUSH
27940: LD_INT 1
27942: NEG
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 1
27950: PUSH
27951: LD_INT 0
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 1
27960: PUSH
27961: LD_INT 1
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 0
27970: PUSH
27971: LD_INT 1
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 1
27980: NEG
27981: PUSH
27982: LD_INT 0
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 1
27991: NEG
27992: PUSH
27993: LD_INT 1
27995: NEG
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 1
28003: NEG
28004: PUSH
28005: LD_INT 2
28007: NEG
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 0
28015: PUSH
28016: LD_INT 2
28018: NEG
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: LD_INT 1
28026: PUSH
28027: LD_INT 1
28029: NEG
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 2
28037: PUSH
28038: LD_INT 0
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 2
28047: PUSH
28048: LD_INT 1
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 2
28057: PUSH
28058: LD_INT 2
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 1
28067: PUSH
28068: LD_INT 2
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 0
28077: PUSH
28078: LD_INT 2
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 1
28087: NEG
28088: PUSH
28089: LD_INT 1
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 2
28098: NEG
28099: PUSH
28100: LD_INT 0
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 2
28109: NEG
28110: PUSH
28111: LD_INT 1
28113: NEG
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 2
28121: NEG
28122: PUSH
28123: LD_INT 2
28125: NEG
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28152: LD_ADDR_VAR 0 57
28156: PUSH
28157: LD_INT 0
28159: PUSH
28160: LD_INT 0
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 0
28169: PUSH
28170: LD_INT 1
28172: NEG
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 1
28180: PUSH
28181: LD_INT 0
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 1
28190: PUSH
28191: LD_INT 1
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 0
28200: PUSH
28201: LD_INT 1
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 1
28210: NEG
28211: PUSH
28212: LD_INT 0
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 1
28221: NEG
28222: PUSH
28223: LD_INT 1
28225: NEG
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 1
28233: NEG
28234: PUSH
28235: LD_INT 2
28237: NEG
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 0
28245: PUSH
28246: LD_INT 2
28248: NEG
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 1
28256: PUSH
28257: LD_INT 1
28259: NEG
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 2
28267: PUSH
28268: LD_INT 0
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: LD_INT 2
28277: PUSH
28278: LD_INT 1
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: LD_INT 2
28287: PUSH
28288: LD_INT 2
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 1
28297: PUSH
28298: LD_INT 2
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 0
28307: PUSH
28308: LD_INT 2
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 1
28317: NEG
28318: PUSH
28319: LD_INT 1
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 2
28328: NEG
28329: PUSH
28330: LD_INT 0
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 2
28339: NEG
28340: PUSH
28341: LD_INT 1
28343: NEG
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 2
28351: NEG
28352: PUSH
28353: LD_INT 2
28355: NEG
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28382: LD_ADDR_VAR 0 58
28386: PUSH
28387: LD_INT 0
28389: PUSH
28390: LD_INT 0
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 0
28399: PUSH
28400: LD_INT 1
28402: NEG
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 1
28410: PUSH
28411: LD_INT 0
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 1
28420: PUSH
28421: LD_INT 1
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 0
28430: PUSH
28431: LD_INT 1
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 1
28440: NEG
28441: PUSH
28442: LD_INT 0
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 1
28451: NEG
28452: PUSH
28453: LD_INT 1
28455: NEG
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 1
28463: NEG
28464: PUSH
28465: LD_INT 2
28467: NEG
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 0
28475: PUSH
28476: LD_INT 2
28478: NEG
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: LD_INT 1
28486: PUSH
28487: LD_INT 1
28489: NEG
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: LD_INT 2
28497: PUSH
28498: LD_INT 0
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 2
28507: PUSH
28508: LD_INT 1
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 2
28517: PUSH
28518: LD_INT 2
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: LD_INT 1
28527: PUSH
28528: LD_INT 2
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 0
28537: PUSH
28538: LD_INT 2
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 1
28547: NEG
28548: PUSH
28549: LD_INT 1
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 2
28558: NEG
28559: PUSH
28560: LD_INT 0
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 2
28569: NEG
28570: PUSH
28571: LD_INT 1
28573: NEG
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: LD_INT 2
28581: NEG
28582: PUSH
28583: LD_INT 2
28585: NEG
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28612: LD_ADDR_VAR 0 59
28616: PUSH
28617: LD_INT 0
28619: PUSH
28620: LD_INT 0
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 0
28629: PUSH
28630: LD_INT 1
28632: NEG
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 1
28640: PUSH
28641: LD_INT 0
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 1
28650: PUSH
28651: LD_INT 1
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 0
28660: PUSH
28661: LD_INT 1
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 1
28670: NEG
28671: PUSH
28672: LD_INT 0
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 1
28681: NEG
28682: PUSH
28683: LD_INT 1
28685: NEG
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28700: LD_ADDR_VAR 0 60
28704: PUSH
28705: LD_INT 0
28707: PUSH
28708: LD_INT 0
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 0
28717: PUSH
28718: LD_INT 1
28720: NEG
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: LD_INT 1
28728: PUSH
28729: LD_INT 0
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 1
28738: PUSH
28739: LD_INT 1
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: LD_INT 0
28748: PUSH
28749: LD_INT 1
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 1
28758: NEG
28759: PUSH
28760: LD_INT 0
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 1
28769: NEG
28770: PUSH
28771: LD_INT 1
28773: NEG
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28788: LD_ADDR_VAR 0 61
28792: PUSH
28793: LD_INT 0
28795: PUSH
28796: LD_INT 0
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 0
28805: PUSH
28806: LD_INT 1
28808: NEG
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 1
28816: PUSH
28817: LD_INT 0
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 1
28826: PUSH
28827: LD_INT 1
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 0
28836: PUSH
28837: LD_INT 1
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 1
28846: NEG
28847: PUSH
28848: LD_INT 0
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PUSH
28855: LD_INT 1
28857: NEG
28858: PUSH
28859: LD_INT 1
28861: NEG
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28876: LD_ADDR_VAR 0 62
28880: PUSH
28881: LD_INT 0
28883: PUSH
28884: LD_INT 0
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 0
28893: PUSH
28894: LD_INT 1
28896: NEG
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 1
28904: PUSH
28905: LD_INT 0
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 1
28914: PUSH
28915: LD_INT 1
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 0
28924: PUSH
28925: LD_INT 1
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 1
28934: NEG
28935: PUSH
28936: LD_INT 0
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 1
28945: NEG
28946: PUSH
28947: LD_INT 1
28949: NEG
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28964: LD_ADDR_VAR 0 63
28968: PUSH
28969: LD_INT 0
28971: PUSH
28972: LD_INT 0
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 0
28981: PUSH
28982: LD_INT 1
28984: NEG
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 1
28992: PUSH
28993: LD_INT 0
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 1
29002: PUSH
29003: LD_INT 1
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 0
29012: PUSH
29013: LD_INT 1
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 1
29022: NEG
29023: PUSH
29024: LD_INT 0
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 1
29033: NEG
29034: PUSH
29035: LD_INT 1
29037: NEG
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29052: LD_ADDR_VAR 0 64
29056: PUSH
29057: LD_INT 0
29059: PUSH
29060: LD_INT 0
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 0
29069: PUSH
29070: LD_INT 1
29072: NEG
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 1
29080: PUSH
29081: LD_INT 0
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 1
29090: PUSH
29091: LD_INT 1
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 0
29100: PUSH
29101: LD_INT 1
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 1
29110: NEG
29111: PUSH
29112: LD_INT 0
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 1
29121: NEG
29122: PUSH
29123: LD_INT 1
29125: NEG
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: ST_TO_ADDR
// end ; 1 :
29140: GO 35037
29142: LD_INT 1
29144: DOUBLE
29145: EQUAL
29146: IFTRUE 29150
29148: GO 31773
29150: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29151: LD_ADDR_VAR 0 11
29155: PUSH
29156: LD_INT 1
29158: NEG
29159: PUSH
29160: LD_INT 3
29162: NEG
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: LD_INT 0
29170: PUSH
29171: LD_INT 3
29173: NEG
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 1
29181: PUSH
29182: LD_INT 2
29184: NEG
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: LIST
29194: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29195: LD_ADDR_VAR 0 12
29199: PUSH
29200: LD_INT 2
29202: PUSH
29203: LD_INT 1
29205: NEG
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 3
29213: PUSH
29214: LD_INT 0
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: LD_INT 3
29223: PUSH
29224: LD_INT 1
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: LIST
29235: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29236: LD_ADDR_VAR 0 13
29240: PUSH
29241: LD_INT 3
29243: PUSH
29244: LD_INT 2
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 3
29253: PUSH
29254: LD_INT 3
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 2
29263: PUSH
29264: LD_INT 3
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: LIST
29275: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29276: LD_ADDR_VAR 0 14
29280: PUSH
29281: LD_INT 1
29283: PUSH
29284: LD_INT 3
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 0
29293: PUSH
29294: LD_INT 3
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 1
29303: NEG
29304: PUSH
29305: LD_INT 2
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: LIST
29316: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29317: LD_ADDR_VAR 0 15
29321: PUSH
29322: LD_INT 2
29324: NEG
29325: PUSH
29326: LD_INT 1
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 3
29335: NEG
29336: PUSH
29337: LD_INT 0
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 3
29346: NEG
29347: PUSH
29348: LD_INT 1
29350: NEG
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: LIST
29360: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29361: LD_ADDR_VAR 0 16
29365: PUSH
29366: LD_INT 2
29368: NEG
29369: PUSH
29370: LD_INT 3
29372: NEG
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 3
29380: NEG
29381: PUSH
29382: LD_INT 2
29384: NEG
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 3
29392: NEG
29393: PUSH
29394: LD_INT 3
29396: NEG
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: LIST
29406: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29407: LD_ADDR_VAR 0 17
29411: PUSH
29412: LD_INT 1
29414: NEG
29415: PUSH
29416: LD_INT 3
29418: NEG
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 0
29426: PUSH
29427: LD_INT 3
29429: NEG
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 1
29437: PUSH
29438: LD_INT 2
29440: NEG
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: LIST
29450: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29451: LD_ADDR_VAR 0 18
29455: PUSH
29456: LD_INT 2
29458: PUSH
29459: LD_INT 1
29461: NEG
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 3
29469: PUSH
29470: LD_INT 0
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 3
29479: PUSH
29480: LD_INT 1
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: LIST
29491: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29492: LD_ADDR_VAR 0 19
29496: PUSH
29497: LD_INT 3
29499: PUSH
29500: LD_INT 2
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 3
29509: PUSH
29510: LD_INT 3
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 2
29519: PUSH
29520: LD_INT 3
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: LIST
29531: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29532: LD_ADDR_VAR 0 20
29536: PUSH
29537: LD_INT 1
29539: PUSH
29540: LD_INT 3
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 0
29549: PUSH
29550: LD_INT 3
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 1
29559: NEG
29560: PUSH
29561: LD_INT 2
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: LIST
29572: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29573: LD_ADDR_VAR 0 21
29577: PUSH
29578: LD_INT 2
29580: NEG
29581: PUSH
29582: LD_INT 1
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 3
29591: NEG
29592: PUSH
29593: LD_INT 0
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 3
29602: NEG
29603: PUSH
29604: LD_INT 1
29606: NEG
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: LIST
29616: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29617: LD_ADDR_VAR 0 22
29621: PUSH
29622: LD_INT 2
29624: NEG
29625: PUSH
29626: LD_INT 3
29628: NEG
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 3
29636: NEG
29637: PUSH
29638: LD_INT 2
29640: NEG
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 3
29648: NEG
29649: PUSH
29650: LD_INT 3
29652: NEG
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: LIST
29662: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29663: LD_ADDR_VAR 0 23
29667: PUSH
29668: LD_INT 0
29670: PUSH
29671: LD_INT 3
29673: NEG
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: LD_INT 1
29681: NEG
29682: PUSH
29683: LD_INT 4
29685: NEG
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 1
29693: PUSH
29694: LD_INT 3
29696: NEG
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: LIST
29706: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29707: LD_ADDR_VAR 0 24
29711: PUSH
29712: LD_INT 3
29714: PUSH
29715: LD_INT 0
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 3
29724: PUSH
29725: LD_INT 1
29727: NEG
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 4
29735: PUSH
29736: LD_INT 1
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: LIST
29747: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29748: LD_ADDR_VAR 0 25
29752: PUSH
29753: LD_INT 3
29755: PUSH
29756: LD_INT 3
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 4
29765: PUSH
29766: LD_INT 3
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 3
29775: PUSH
29776: LD_INT 4
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: LIST
29787: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29788: LD_ADDR_VAR 0 26
29792: PUSH
29793: LD_INT 0
29795: PUSH
29796: LD_INT 3
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: LD_INT 1
29805: PUSH
29806: LD_INT 4
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 1
29815: NEG
29816: PUSH
29817: LD_INT 3
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: LIST
29828: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29829: LD_ADDR_VAR 0 27
29833: PUSH
29834: LD_INT 3
29836: NEG
29837: PUSH
29838: LD_INT 0
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 3
29847: NEG
29848: PUSH
29849: LD_INT 1
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 4
29858: NEG
29859: PUSH
29860: LD_INT 1
29862: NEG
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: LIST
29872: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29873: LD_ADDR_VAR 0 28
29877: PUSH
29878: LD_INT 3
29880: NEG
29881: PUSH
29882: LD_INT 3
29884: NEG
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 3
29892: NEG
29893: PUSH
29894: LD_INT 4
29896: NEG
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 4
29904: NEG
29905: PUSH
29906: LD_INT 3
29908: NEG
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: LIST
29918: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29919: LD_ADDR_VAR 0 29
29923: PUSH
29924: LD_INT 1
29926: NEG
29927: PUSH
29928: LD_INT 3
29930: NEG
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 0
29938: PUSH
29939: LD_INT 3
29941: NEG
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 1
29949: PUSH
29950: LD_INT 2
29952: NEG
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 1
29960: NEG
29961: PUSH
29962: LD_INT 4
29964: NEG
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 0
29972: PUSH
29973: LD_INT 4
29975: NEG
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 1
29983: PUSH
29984: LD_INT 3
29986: NEG
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 1
29994: NEG
29995: PUSH
29996: LD_INT 5
29998: NEG
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: PUSH
30004: LD_INT 0
30006: PUSH
30007: LD_INT 5
30009: NEG
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 1
30017: PUSH
30018: LD_INT 4
30020: NEG
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 1
30028: NEG
30029: PUSH
30030: LD_INT 6
30032: NEG
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 0
30040: PUSH
30041: LD_INT 6
30043: NEG
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 1
30051: PUSH
30052: LD_INT 5
30054: NEG
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30074: LD_ADDR_VAR 0 30
30078: PUSH
30079: LD_INT 2
30081: PUSH
30082: LD_INT 1
30084: NEG
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 3
30092: PUSH
30093: LD_INT 0
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 3
30102: PUSH
30103: LD_INT 1
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 3
30112: PUSH
30113: LD_INT 1
30115: NEG
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 4
30123: PUSH
30124: LD_INT 0
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: LD_INT 4
30133: PUSH
30134: LD_INT 1
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: LD_INT 4
30143: PUSH
30144: LD_INT 1
30146: NEG
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 5
30154: PUSH
30155: LD_INT 0
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 5
30164: PUSH
30165: LD_INT 1
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 5
30174: PUSH
30175: LD_INT 1
30177: NEG
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 6
30185: PUSH
30186: LD_INT 0
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 6
30195: PUSH
30196: LD_INT 1
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30217: LD_ADDR_VAR 0 31
30221: PUSH
30222: LD_INT 3
30224: PUSH
30225: LD_INT 2
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 3
30234: PUSH
30235: LD_INT 3
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 2
30244: PUSH
30245: LD_INT 3
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 4
30254: PUSH
30255: LD_INT 3
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 4
30264: PUSH
30265: LD_INT 4
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 3
30274: PUSH
30275: LD_INT 4
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 5
30284: PUSH
30285: LD_INT 4
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 5
30294: PUSH
30295: LD_INT 5
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 4
30304: PUSH
30305: LD_INT 5
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 6
30314: PUSH
30315: LD_INT 5
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 6
30324: PUSH
30325: LD_INT 6
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 5
30334: PUSH
30335: LD_INT 6
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30356: LD_ADDR_VAR 0 32
30360: PUSH
30361: LD_INT 1
30363: PUSH
30364: LD_INT 3
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 0
30373: PUSH
30374: LD_INT 3
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 1
30383: NEG
30384: PUSH
30385: LD_INT 2
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 1
30394: PUSH
30395: LD_INT 4
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 0
30404: PUSH
30405: LD_INT 4
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 1
30414: NEG
30415: PUSH
30416: LD_INT 3
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 1
30425: PUSH
30426: LD_INT 5
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 0
30435: PUSH
30436: LD_INT 5
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 1
30445: NEG
30446: PUSH
30447: LD_INT 4
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 1
30456: PUSH
30457: LD_INT 6
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 0
30466: PUSH
30467: LD_INT 6
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 1
30476: NEG
30477: PUSH
30478: LD_INT 5
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30499: LD_ADDR_VAR 0 33
30503: PUSH
30504: LD_INT 2
30506: NEG
30507: PUSH
30508: LD_INT 1
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 3
30517: NEG
30518: PUSH
30519: LD_INT 0
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: LD_INT 3
30528: NEG
30529: PUSH
30530: LD_INT 1
30532: NEG
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 3
30540: NEG
30541: PUSH
30542: LD_INT 1
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 4
30551: NEG
30552: PUSH
30553: LD_INT 0
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 4
30562: NEG
30563: PUSH
30564: LD_INT 1
30566: NEG
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 4
30574: NEG
30575: PUSH
30576: LD_INT 1
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 5
30585: NEG
30586: PUSH
30587: LD_INT 0
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 5
30596: NEG
30597: PUSH
30598: LD_INT 1
30600: NEG
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 5
30608: NEG
30609: PUSH
30610: LD_INT 1
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 6
30619: NEG
30620: PUSH
30621: LD_INT 0
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 6
30630: NEG
30631: PUSH
30632: LD_INT 1
30634: NEG
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30654: LD_ADDR_VAR 0 34
30658: PUSH
30659: LD_INT 2
30661: NEG
30662: PUSH
30663: LD_INT 3
30665: NEG
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 3
30673: NEG
30674: PUSH
30675: LD_INT 2
30677: NEG
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 3
30685: NEG
30686: PUSH
30687: LD_INT 3
30689: NEG
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: LD_INT 3
30697: NEG
30698: PUSH
30699: LD_INT 4
30701: NEG
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 4
30709: NEG
30710: PUSH
30711: LD_INT 3
30713: NEG
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 4
30721: NEG
30722: PUSH
30723: LD_INT 4
30725: NEG
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 4
30733: NEG
30734: PUSH
30735: LD_INT 5
30737: NEG
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 5
30745: NEG
30746: PUSH
30747: LD_INT 4
30749: NEG
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 5
30757: NEG
30758: PUSH
30759: LD_INT 5
30761: NEG
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 5
30769: NEG
30770: PUSH
30771: LD_INT 6
30773: NEG
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 6
30781: NEG
30782: PUSH
30783: LD_INT 5
30785: NEG
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 6
30793: NEG
30794: PUSH
30795: LD_INT 6
30797: NEG
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30817: LD_ADDR_VAR 0 41
30821: PUSH
30822: LD_INT 0
30824: PUSH
30825: LD_INT 2
30827: NEG
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 1
30835: NEG
30836: PUSH
30837: LD_INT 3
30839: NEG
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 1
30847: PUSH
30848: LD_INT 2
30850: NEG
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: LIST
30860: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30861: LD_ADDR_VAR 0 42
30865: PUSH
30866: LD_INT 2
30868: PUSH
30869: LD_INT 0
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 2
30878: PUSH
30879: LD_INT 1
30881: NEG
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 3
30889: PUSH
30890: LD_INT 1
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: LIST
30901: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30902: LD_ADDR_VAR 0 43
30906: PUSH
30907: LD_INT 2
30909: PUSH
30910: LD_INT 2
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 3
30919: PUSH
30920: LD_INT 2
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 2
30929: PUSH
30930: LD_INT 3
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: LIST
30941: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30942: LD_ADDR_VAR 0 44
30946: PUSH
30947: LD_INT 0
30949: PUSH
30950: LD_INT 2
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 1
30959: PUSH
30960: LD_INT 3
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 1
30969: NEG
30970: PUSH
30971: LD_INT 2
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: LIST
30982: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30983: LD_ADDR_VAR 0 45
30987: PUSH
30988: LD_INT 2
30990: NEG
30991: PUSH
30992: LD_INT 0
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: PUSH
30999: LD_INT 2
31001: NEG
31002: PUSH
31003: LD_INT 1
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 3
31012: NEG
31013: PUSH
31014: LD_INT 1
31016: NEG
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: LIST
31026: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31027: LD_ADDR_VAR 0 46
31031: PUSH
31032: LD_INT 2
31034: NEG
31035: PUSH
31036: LD_INT 2
31038: NEG
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 2
31046: NEG
31047: PUSH
31048: LD_INT 3
31050: NEG
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 3
31058: NEG
31059: PUSH
31060: LD_INT 2
31062: NEG
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: LIST
31072: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31073: LD_ADDR_VAR 0 47
31077: PUSH
31078: LD_INT 2
31080: NEG
31081: PUSH
31082: LD_INT 3
31084: NEG
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 1
31092: NEG
31093: PUSH
31094: LD_INT 3
31096: NEG
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31106: LD_ADDR_VAR 0 48
31110: PUSH
31111: LD_INT 1
31113: PUSH
31114: LD_INT 2
31116: NEG
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 2
31124: PUSH
31125: LD_INT 1
31127: NEG
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31137: LD_ADDR_VAR 0 49
31141: PUSH
31142: LD_INT 3
31144: PUSH
31145: LD_INT 1
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 3
31154: PUSH
31155: LD_INT 2
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31166: LD_ADDR_VAR 0 50
31170: PUSH
31171: LD_INT 2
31173: PUSH
31174: LD_INT 3
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 1
31183: PUSH
31184: LD_INT 3
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31195: LD_ADDR_VAR 0 51
31199: PUSH
31200: LD_INT 1
31202: NEG
31203: PUSH
31204: LD_INT 2
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 2
31213: NEG
31214: PUSH
31215: LD_INT 1
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31226: LD_ADDR_VAR 0 52
31230: PUSH
31231: LD_INT 3
31233: NEG
31234: PUSH
31235: LD_INT 1
31237: NEG
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 3
31245: NEG
31246: PUSH
31247: LD_INT 2
31249: NEG
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31259: LD_ADDR_VAR 0 53
31263: PUSH
31264: LD_INT 1
31266: NEG
31267: PUSH
31268: LD_INT 3
31270: NEG
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 0
31278: PUSH
31279: LD_INT 3
31281: NEG
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: LD_INT 1
31289: PUSH
31290: LD_INT 2
31292: NEG
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: LIST
31302: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31303: LD_ADDR_VAR 0 54
31307: PUSH
31308: LD_INT 2
31310: PUSH
31311: LD_INT 1
31313: NEG
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 3
31321: PUSH
31322: LD_INT 0
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 3
31331: PUSH
31332: LD_INT 1
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: LIST
31343: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31344: LD_ADDR_VAR 0 55
31348: PUSH
31349: LD_INT 3
31351: PUSH
31352: LD_INT 2
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 3
31361: PUSH
31362: LD_INT 3
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 2
31371: PUSH
31372: LD_INT 3
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: LIST
31383: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31384: LD_ADDR_VAR 0 56
31388: PUSH
31389: LD_INT 1
31391: PUSH
31392: LD_INT 3
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 0
31401: PUSH
31402: LD_INT 3
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 1
31411: NEG
31412: PUSH
31413: LD_INT 2
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: LIST
31424: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31425: LD_ADDR_VAR 0 57
31429: PUSH
31430: LD_INT 2
31432: NEG
31433: PUSH
31434: LD_INT 1
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 3
31443: NEG
31444: PUSH
31445: LD_INT 0
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 3
31454: NEG
31455: PUSH
31456: LD_INT 1
31458: NEG
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: LIST
31468: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31469: LD_ADDR_VAR 0 58
31473: PUSH
31474: LD_INT 2
31476: NEG
31477: PUSH
31478: LD_INT 3
31480: NEG
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 3
31488: NEG
31489: PUSH
31490: LD_INT 2
31492: NEG
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 3
31500: NEG
31501: PUSH
31502: LD_INT 3
31504: NEG
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: LIST
31514: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31515: LD_ADDR_VAR 0 59
31519: PUSH
31520: LD_INT 1
31522: NEG
31523: PUSH
31524: LD_INT 2
31526: NEG
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 0
31534: PUSH
31535: LD_INT 2
31537: NEG
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 1
31545: PUSH
31546: LD_INT 1
31548: NEG
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: LIST
31558: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31559: LD_ADDR_VAR 0 60
31563: PUSH
31564: LD_INT 1
31566: PUSH
31567: LD_INT 1
31569: NEG
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 2
31577: PUSH
31578: LD_INT 0
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 2
31587: PUSH
31588: LD_INT 1
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: LIST
31599: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31600: LD_ADDR_VAR 0 61
31604: PUSH
31605: LD_INT 2
31607: PUSH
31608: LD_INT 1
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 2
31617: PUSH
31618: LD_INT 2
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 1
31627: PUSH
31628: LD_INT 2
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: LIST
31639: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31640: LD_ADDR_VAR 0 62
31644: PUSH
31645: LD_INT 1
31647: PUSH
31648: LD_INT 2
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 0
31657: PUSH
31658: LD_INT 2
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 1
31667: NEG
31668: PUSH
31669: LD_INT 1
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: LIST
31680: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31681: LD_ADDR_VAR 0 63
31685: PUSH
31686: LD_INT 1
31688: NEG
31689: PUSH
31690: LD_INT 1
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 2
31699: NEG
31700: PUSH
31701: LD_INT 0
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 2
31710: NEG
31711: PUSH
31712: LD_INT 1
31714: NEG
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: LIST
31724: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31725: LD_ADDR_VAR 0 64
31729: PUSH
31730: LD_INT 1
31732: NEG
31733: PUSH
31734: LD_INT 2
31736: NEG
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 2
31744: NEG
31745: PUSH
31746: LD_INT 1
31748: NEG
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 2
31756: NEG
31757: PUSH
31758: LD_INT 2
31760: NEG
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: LIST
31770: ST_TO_ADDR
// end ; 2 :
31771: GO 35037
31773: LD_INT 2
31775: DOUBLE
31776: EQUAL
31777: IFTRUE 31781
31779: GO 35036
31781: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31782: LD_ADDR_VAR 0 29
31786: PUSH
31787: LD_INT 4
31789: PUSH
31790: LD_INT 0
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 4
31799: PUSH
31800: LD_INT 1
31802: NEG
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 5
31810: PUSH
31811: LD_INT 0
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 5
31820: PUSH
31821: LD_INT 1
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 4
31830: PUSH
31831: LD_INT 1
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 3
31840: PUSH
31841: LD_INT 0
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 3
31850: PUSH
31851: LD_INT 1
31853: NEG
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 3
31861: PUSH
31862: LD_INT 2
31864: NEG
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 5
31872: PUSH
31873: LD_INT 2
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 3
31882: PUSH
31883: LD_INT 3
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 3
31892: PUSH
31893: LD_INT 2
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 4
31902: PUSH
31903: LD_INT 3
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: LD_INT 4
31912: PUSH
31913: LD_INT 4
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 3
31922: PUSH
31923: LD_INT 4
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 2
31932: PUSH
31933: LD_INT 3
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 2
31942: PUSH
31943: LD_INT 2
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 4
31952: PUSH
31953: LD_INT 2
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 2
31962: PUSH
31963: LD_INT 4
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 0
31972: PUSH
31973: LD_INT 4
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 0
31982: PUSH
31983: LD_INT 3
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 1
31992: PUSH
31993: LD_INT 4
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 1
32002: PUSH
32003: LD_INT 5
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 0
32012: PUSH
32013: LD_INT 5
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 1
32022: NEG
32023: PUSH
32024: LD_INT 4
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 1
32033: NEG
32034: PUSH
32035: LD_INT 3
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 2
32044: PUSH
32045: LD_INT 5
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 2
32054: NEG
32055: PUSH
32056: LD_INT 3
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 3
32065: NEG
32066: PUSH
32067: LD_INT 0
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 3
32076: NEG
32077: PUSH
32078: LD_INT 1
32080: NEG
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 2
32088: NEG
32089: PUSH
32090: LD_INT 0
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 2
32099: NEG
32100: PUSH
32101: LD_INT 1
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 3
32110: NEG
32111: PUSH
32112: LD_INT 1
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 4
32121: NEG
32122: PUSH
32123: LD_INT 0
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 4
32132: NEG
32133: PUSH
32134: LD_INT 1
32136: NEG
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 4
32144: NEG
32145: PUSH
32146: LD_INT 2
32148: NEG
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 2
32156: NEG
32157: PUSH
32158: LD_INT 2
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 4
32167: NEG
32168: PUSH
32169: LD_INT 4
32171: NEG
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 4
32179: NEG
32180: PUSH
32181: LD_INT 5
32183: NEG
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 3
32191: NEG
32192: PUSH
32193: LD_INT 4
32195: NEG
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 3
32203: NEG
32204: PUSH
32205: LD_INT 3
32207: NEG
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 4
32215: NEG
32216: PUSH
32217: LD_INT 3
32219: NEG
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 5
32227: NEG
32228: PUSH
32229: LD_INT 4
32231: NEG
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 5
32239: NEG
32240: PUSH
32241: LD_INT 5
32243: NEG
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 3
32251: NEG
32252: PUSH
32253: LD_INT 5
32255: NEG
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 5
32263: NEG
32264: PUSH
32265: LD_INT 3
32267: NEG
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32320: LD_ADDR_VAR 0 30
32324: PUSH
32325: LD_INT 4
32327: PUSH
32328: LD_INT 4
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 4
32337: PUSH
32338: LD_INT 3
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 5
32347: PUSH
32348: LD_INT 4
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 5
32357: PUSH
32358: LD_INT 5
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 4
32367: PUSH
32368: LD_INT 5
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 3
32377: PUSH
32378: LD_INT 4
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 3
32387: PUSH
32388: LD_INT 3
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 5
32397: PUSH
32398: LD_INT 3
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 3
32407: PUSH
32408: LD_INT 5
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 0
32417: PUSH
32418: LD_INT 3
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 0
32427: PUSH
32428: LD_INT 2
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 1
32437: PUSH
32438: LD_INT 3
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 1
32447: PUSH
32448: LD_INT 4
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 0
32457: PUSH
32458: LD_INT 4
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 1
32467: NEG
32468: PUSH
32469: LD_INT 3
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 1
32478: NEG
32479: PUSH
32480: LD_INT 2
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 2
32489: PUSH
32490: LD_INT 4
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 2
32499: NEG
32500: PUSH
32501: LD_INT 2
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 4
32510: NEG
32511: PUSH
32512: LD_INT 0
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 4
32521: NEG
32522: PUSH
32523: LD_INT 1
32525: NEG
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 3
32533: NEG
32534: PUSH
32535: LD_INT 0
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 3
32544: NEG
32545: PUSH
32546: LD_INT 1
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 4
32555: NEG
32556: PUSH
32557: LD_INT 1
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 5
32566: NEG
32567: PUSH
32568: LD_INT 0
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 5
32577: NEG
32578: PUSH
32579: LD_INT 1
32581: NEG
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 5
32589: NEG
32590: PUSH
32591: LD_INT 2
32593: NEG
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 3
32601: NEG
32602: PUSH
32603: LD_INT 2
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 3
32612: NEG
32613: PUSH
32614: LD_INT 3
32616: NEG
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 3
32624: NEG
32625: PUSH
32626: LD_INT 4
32628: NEG
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 2
32636: NEG
32637: PUSH
32638: LD_INT 3
32640: NEG
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 2
32648: NEG
32649: PUSH
32650: LD_INT 2
32652: NEG
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 3
32660: NEG
32661: PUSH
32662: LD_INT 2
32664: NEG
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 4
32672: NEG
32673: PUSH
32674: LD_INT 3
32676: NEG
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 4
32684: NEG
32685: PUSH
32686: LD_INT 4
32688: NEG
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 2
32696: NEG
32697: PUSH
32698: LD_INT 4
32700: NEG
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 4
32708: NEG
32709: PUSH
32710: LD_INT 2
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 0
32720: PUSH
32721: LD_INT 4
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 0
32731: PUSH
32732: LD_INT 5
32734: NEG
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 1
32742: PUSH
32743: LD_INT 4
32745: NEG
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 1
32753: PUSH
32754: LD_INT 3
32756: NEG
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 0
32764: PUSH
32765: LD_INT 3
32767: NEG
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 1
32775: NEG
32776: PUSH
32777: LD_INT 4
32779: NEG
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 1
32787: NEG
32788: PUSH
32789: LD_INT 5
32791: NEG
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 2
32799: PUSH
32800: LD_INT 3
32802: NEG
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 2
32810: NEG
32811: PUSH
32812: LD_INT 5
32814: NEG
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32867: LD_ADDR_VAR 0 31
32871: PUSH
32872: LD_INT 0
32874: PUSH
32875: LD_INT 4
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 0
32884: PUSH
32885: LD_INT 3
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 1
32894: PUSH
32895: LD_INT 4
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 1
32904: PUSH
32905: LD_INT 5
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 0
32914: PUSH
32915: LD_INT 5
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 1
32924: NEG
32925: PUSH
32926: LD_INT 4
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 1
32935: NEG
32936: PUSH
32937: LD_INT 3
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 2
32946: PUSH
32947: LD_INT 5
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 2
32956: NEG
32957: PUSH
32958: LD_INT 3
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 3
32967: NEG
32968: PUSH
32969: LD_INT 0
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 3
32978: NEG
32979: PUSH
32980: LD_INT 1
32982: NEG
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 2
32990: NEG
32991: PUSH
32992: LD_INT 0
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 2
33001: NEG
33002: PUSH
33003: LD_INT 1
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 3
33012: NEG
33013: PUSH
33014: LD_INT 1
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 4
33023: NEG
33024: PUSH
33025: LD_INT 0
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 4
33034: NEG
33035: PUSH
33036: LD_INT 1
33038: NEG
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 4
33046: NEG
33047: PUSH
33048: LD_INT 2
33050: NEG
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 2
33058: NEG
33059: PUSH
33060: LD_INT 2
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 4
33069: NEG
33070: PUSH
33071: LD_INT 4
33073: NEG
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 4
33081: NEG
33082: PUSH
33083: LD_INT 5
33085: NEG
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 3
33093: NEG
33094: PUSH
33095: LD_INT 4
33097: NEG
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 3
33105: NEG
33106: PUSH
33107: LD_INT 3
33109: NEG
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 4
33117: NEG
33118: PUSH
33119: LD_INT 3
33121: NEG
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 5
33129: NEG
33130: PUSH
33131: LD_INT 4
33133: NEG
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 5
33141: NEG
33142: PUSH
33143: LD_INT 5
33145: NEG
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 3
33153: NEG
33154: PUSH
33155: LD_INT 5
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 5
33165: NEG
33166: PUSH
33167: LD_INT 3
33169: NEG
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 0
33177: PUSH
33178: LD_INT 3
33180: NEG
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 0
33188: PUSH
33189: LD_INT 4
33191: NEG
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 1
33199: PUSH
33200: LD_INT 3
33202: NEG
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 1
33210: PUSH
33211: LD_INT 2
33213: NEG
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 0
33221: PUSH
33222: LD_INT 2
33224: NEG
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 1
33232: NEG
33233: PUSH
33234: LD_INT 3
33236: NEG
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 1
33244: NEG
33245: PUSH
33246: LD_INT 4
33248: NEG
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 2
33256: PUSH
33257: LD_INT 2
33259: NEG
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 2
33267: NEG
33268: PUSH
33269: LD_INT 4
33271: NEG
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 4
33279: PUSH
33280: LD_INT 0
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 4
33289: PUSH
33290: LD_INT 1
33292: NEG
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 5
33300: PUSH
33301: LD_INT 0
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 5
33310: PUSH
33311: LD_INT 1
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 4
33320: PUSH
33321: LD_INT 1
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 3
33330: PUSH
33331: LD_INT 0
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 3
33340: PUSH
33341: LD_INT 1
33343: NEG
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 3
33351: PUSH
33352: LD_INT 2
33354: NEG
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 5
33362: PUSH
33363: LD_INT 2
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33417: LD_ADDR_VAR 0 32
33421: PUSH
33422: LD_INT 4
33424: NEG
33425: PUSH
33426: LD_INT 0
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 4
33435: NEG
33436: PUSH
33437: LD_INT 1
33439: NEG
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 3
33447: NEG
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 3
33458: NEG
33459: PUSH
33460: LD_INT 1
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 4
33469: NEG
33470: PUSH
33471: LD_INT 1
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 5
33480: NEG
33481: PUSH
33482: LD_INT 0
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 5
33491: NEG
33492: PUSH
33493: LD_INT 1
33495: NEG
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 5
33503: NEG
33504: PUSH
33505: LD_INT 2
33507: NEG
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 3
33515: NEG
33516: PUSH
33517: LD_INT 2
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 3
33526: NEG
33527: PUSH
33528: LD_INT 3
33530: NEG
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 3
33538: NEG
33539: PUSH
33540: LD_INT 4
33542: NEG
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 2
33550: NEG
33551: PUSH
33552: LD_INT 3
33554: NEG
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 2
33562: NEG
33563: PUSH
33564: LD_INT 2
33566: NEG
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 3
33574: NEG
33575: PUSH
33576: LD_INT 2
33578: NEG
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 4
33586: NEG
33587: PUSH
33588: LD_INT 3
33590: NEG
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 4
33598: NEG
33599: PUSH
33600: LD_INT 4
33602: NEG
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 2
33610: NEG
33611: PUSH
33612: LD_INT 4
33614: NEG
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 4
33622: NEG
33623: PUSH
33624: LD_INT 2
33626: NEG
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 0
33634: PUSH
33635: LD_INT 4
33637: NEG
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 0
33645: PUSH
33646: LD_INT 5
33648: NEG
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 1
33656: PUSH
33657: LD_INT 4
33659: NEG
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 1
33667: PUSH
33668: LD_INT 3
33670: NEG
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 0
33678: PUSH
33679: LD_INT 3
33681: NEG
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 1
33689: NEG
33690: PUSH
33691: LD_INT 4
33693: NEG
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 1
33701: NEG
33702: PUSH
33703: LD_INT 5
33705: NEG
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 2
33713: PUSH
33714: LD_INT 3
33716: NEG
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 2
33724: NEG
33725: PUSH
33726: LD_INT 5
33728: NEG
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 3
33736: PUSH
33737: LD_INT 0
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 3
33746: PUSH
33747: LD_INT 1
33749: NEG
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 4
33757: PUSH
33758: LD_INT 0
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 4
33767: PUSH
33768: LD_INT 1
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 3
33777: PUSH
33778: LD_INT 1
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 2
33787: PUSH
33788: LD_INT 0
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 2
33797: PUSH
33798: LD_INT 1
33800: NEG
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 2
33808: PUSH
33809: LD_INT 2
33811: NEG
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 4
33819: PUSH
33820: LD_INT 2
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 4
33829: PUSH
33830: LD_INT 4
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 4
33839: PUSH
33840: LD_INT 3
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 5
33849: PUSH
33850: LD_INT 4
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 5
33859: PUSH
33860: LD_INT 5
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 4
33869: PUSH
33870: LD_INT 5
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 3
33879: PUSH
33880: LD_INT 4
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 3
33889: PUSH
33890: LD_INT 3
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 5
33899: PUSH
33900: LD_INT 3
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 3
33909: PUSH
33910: LD_INT 5
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33964: LD_ADDR_VAR 0 33
33968: PUSH
33969: LD_INT 4
33971: NEG
33972: PUSH
33973: LD_INT 4
33975: NEG
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 4
33983: NEG
33984: PUSH
33985: LD_INT 5
33987: NEG
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 3
33995: NEG
33996: PUSH
33997: LD_INT 4
33999: NEG
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 3
34007: NEG
34008: PUSH
34009: LD_INT 3
34011: NEG
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 4
34019: NEG
34020: PUSH
34021: LD_INT 3
34023: NEG
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 5
34031: NEG
34032: PUSH
34033: LD_INT 4
34035: NEG
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 5
34043: NEG
34044: PUSH
34045: LD_INT 5
34047: NEG
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 3
34055: NEG
34056: PUSH
34057: LD_INT 5
34059: NEG
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 5
34067: NEG
34068: PUSH
34069: LD_INT 3
34071: NEG
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 0
34079: PUSH
34080: LD_INT 3
34082: NEG
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 0
34090: PUSH
34091: LD_INT 4
34093: NEG
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 1
34101: PUSH
34102: LD_INT 3
34104: NEG
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 1
34112: PUSH
34113: LD_INT 2
34115: NEG
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 0
34123: PUSH
34124: LD_INT 2
34126: NEG
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 1
34134: NEG
34135: PUSH
34136: LD_INT 3
34138: NEG
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 1
34146: NEG
34147: PUSH
34148: LD_INT 4
34150: NEG
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 2
34158: PUSH
34159: LD_INT 2
34161: NEG
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 2
34169: NEG
34170: PUSH
34171: LD_INT 4
34173: NEG
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 4
34181: PUSH
34182: LD_INT 0
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 4
34191: PUSH
34192: LD_INT 1
34194: NEG
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 5
34202: PUSH
34203: LD_INT 0
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 5
34212: PUSH
34213: LD_INT 1
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 4
34222: PUSH
34223: LD_INT 1
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 3
34232: PUSH
34233: LD_INT 0
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 3
34242: PUSH
34243: LD_INT 1
34245: NEG
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 3
34253: PUSH
34254: LD_INT 2
34256: NEG
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 5
34264: PUSH
34265: LD_INT 2
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 3
34274: PUSH
34275: LD_INT 3
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 3
34284: PUSH
34285: LD_INT 2
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 4
34294: PUSH
34295: LD_INT 3
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 4
34304: PUSH
34305: LD_INT 4
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 3
34314: PUSH
34315: LD_INT 4
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 2
34324: PUSH
34325: LD_INT 3
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 2
34334: PUSH
34335: LD_INT 2
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 4
34344: PUSH
34345: LD_INT 2
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 2
34354: PUSH
34355: LD_INT 4
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 0
34364: PUSH
34365: LD_INT 4
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 0
34374: PUSH
34375: LD_INT 3
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 1
34384: PUSH
34385: LD_INT 4
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 1
34394: PUSH
34395: LD_INT 5
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 0
34404: PUSH
34405: LD_INT 5
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 1
34414: NEG
34415: PUSH
34416: LD_INT 4
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 1
34425: NEG
34426: PUSH
34427: LD_INT 3
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 2
34436: PUSH
34437: LD_INT 5
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 2
34446: NEG
34447: PUSH
34448: LD_INT 3
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34502: LD_ADDR_VAR 0 34
34506: PUSH
34507: LD_INT 0
34509: PUSH
34510: LD_INT 4
34512: NEG
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 0
34520: PUSH
34521: LD_INT 5
34523: NEG
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 1
34531: PUSH
34532: LD_INT 4
34534: NEG
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 1
34542: PUSH
34543: LD_INT 3
34545: NEG
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 0
34553: PUSH
34554: LD_INT 3
34556: NEG
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 1
34564: NEG
34565: PUSH
34566: LD_INT 4
34568: NEG
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 1
34576: NEG
34577: PUSH
34578: LD_INT 5
34580: NEG
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 2
34588: PUSH
34589: LD_INT 3
34591: NEG
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 2
34599: NEG
34600: PUSH
34601: LD_INT 5
34603: NEG
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 3
34611: PUSH
34612: LD_INT 0
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 3
34621: PUSH
34622: LD_INT 1
34624: NEG
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 4
34632: PUSH
34633: LD_INT 0
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 4
34642: PUSH
34643: LD_INT 1
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 3
34652: PUSH
34653: LD_INT 1
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 2
34662: PUSH
34663: LD_INT 0
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 2
34672: PUSH
34673: LD_INT 1
34675: NEG
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 2
34683: PUSH
34684: LD_INT 2
34686: NEG
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 4
34694: PUSH
34695: LD_INT 2
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 4
34704: PUSH
34705: LD_INT 4
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 4
34714: PUSH
34715: LD_INT 3
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 5
34724: PUSH
34725: LD_INT 4
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: LD_INT 5
34734: PUSH
34735: LD_INT 5
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 4
34744: PUSH
34745: LD_INT 5
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 3
34754: PUSH
34755: LD_INT 4
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 3
34764: PUSH
34765: LD_INT 3
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 5
34774: PUSH
34775: LD_INT 3
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 3
34784: PUSH
34785: LD_INT 5
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 0
34794: PUSH
34795: LD_INT 3
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 0
34804: PUSH
34805: LD_INT 2
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 1
34814: PUSH
34815: LD_INT 3
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 1
34824: PUSH
34825: LD_INT 4
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 0
34834: PUSH
34835: LD_INT 4
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 1
34844: NEG
34845: PUSH
34846: LD_INT 3
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 1
34855: NEG
34856: PUSH
34857: LD_INT 2
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 2
34866: PUSH
34867: LD_INT 4
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 2
34876: NEG
34877: PUSH
34878: LD_INT 2
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 4
34887: NEG
34888: PUSH
34889: LD_INT 0
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 4
34898: NEG
34899: PUSH
34900: LD_INT 1
34902: NEG
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 3
34910: NEG
34911: PUSH
34912: LD_INT 0
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 3
34921: NEG
34922: PUSH
34923: LD_INT 1
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 4
34932: NEG
34933: PUSH
34934: LD_INT 1
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 5
34943: NEG
34944: PUSH
34945: LD_INT 0
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 5
34954: NEG
34955: PUSH
34956: LD_INT 1
34958: NEG
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 5
34966: NEG
34967: PUSH
34968: LD_INT 2
34970: NEG
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: LD_INT 3
34978: NEG
34979: PUSH
34980: LD_INT 2
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: ST_TO_ADDR
// end ; end ;
35034: GO 35037
35036: POP
// case btype of b_depot , b_warehouse :
35037: LD_VAR 0 1
35041: PUSH
35042: LD_INT 0
35044: DOUBLE
35045: EQUAL
35046: IFTRUE 35056
35048: LD_INT 1
35050: DOUBLE
35051: EQUAL
35052: IFTRUE 35056
35054: GO 35257
35056: POP
// case nation of nation_american :
35057: LD_VAR 0 5
35061: PUSH
35062: LD_INT 1
35064: DOUBLE
35065: EQUAL
35066: IFTRUE 35070
35068: GO 35126
35070: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35071: LD_ADDR_VAR 0 9
35075: PUSH
35076: LD_VAR 0 11
35080: PUSH
35081: LD_VAR 0 12
35085: PUSH
35086: LD_VAR 0 13
35090: PUSH
35091: LD_VAR 0 14
35095: PUSH
35096: LD_VAR 0 15
35100: PUSH
35101: LD_VAR 0 16
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: PUSH
35114: LD_VAR 0 4
35118: PUSH
35119: LD_INT 1
35121: PLUS
35122: ARRAY
35123: ST_TO_ADDR
35124: GO 35255
35126: LD_INT 2
35128: DOUBLE
35129: EQUAL
35130: IFTRUE 35134
35132: GO 35190
35134: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35135: LD_ADDR_VAR 0 9
35139: PUSH
35140: LD_VAR 0 17
35144: PUSH
35145: LD_VAR 0 18
35149: PUSH
35150: LD_VAR 0 19
35154: PUSH
35155: LD_VAR 0 20
35159: PUSH
35160: LD_VAR 0 21
35164: PUSH
35165: LD_VAR 0 22
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: PUSH
35178: LD_VAR 0 4
35182: PUSH
35183: LD_INT 1
35185: PLUS
35186: ARRAY
35187: ST_TO_ADDR
35188: GO 35255
35190: LD_INT 3
35192: DOUBLE
35193: EQUAL
35194: IFTRUE 35198
35196: GO 35254
35198: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35199: LD_ADDR_VAR 0 9
35203: PUSH
35204: LD_VAR 0 23
35208: PUSH
35209: LD_VAR 0 24
35213: PUSH
35214: LD_VAR 0 25
35218: PUSH
35219: LD_VAR 0 26
35223: PUSH
35224: LD_VAR 0 27
35228: PUSH
35229: LD_VAR 0 28
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: PUSH
35242: LD_VAR 0 4
35246: PUSH
35247: LD_INT 1
35249: PLUS
35250: ARRAY
35251: ST_TO_ADDR
35252: GO 35255
35254: POP
35255: GO 35810
35257: LD_INT 2
35259: DOUBLE
35260: EQUAL
35261: IFTRUE 35271
35263: LD_INT 3
35265: DOUBLE
35266: EQUAL
35267: IFTRUE 35271
35269: GO 35327
35271: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35272: LD_ADDR_VAR 0 9
35276: PUSH
35277: LD_VAR 0 29
35281: PUSH
35282: LD_VAR 0 30
35286: PUSH
35287: LD_VAR 0 31
35291: PUSH
35292: LD_VAR 0 32
35296: PUSH
35297: LD_VAR 0 33
35301: PUSH
35302: LD_VAR 0 34
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: PUSH
35315: LD_VAR 0 4
35319: PUSH
35320: LD_INT 1
35322: PLUS
35323: ARRAY
35324: ST_TO_ADDR
35325: GO 35810
35327: LD_INT 16
35329: DOUBLE
35330: EQUAL
35331: IFTRUE 35389
35333: LD_INT 17
35335: DOUBLE
35336: EQUAL
35337: IFTRUE 35389
35339: LD_INT 18
35341: DOUBLE
35342: EQUAL
35343: IFTRUE 35389
35345: LD_INT 19
35347: DOUBLE
35348: EQUAL
35349: IFTRUE 35389
35351: LD_INT 22
35353: DOUBLE
35354: EQUAL
35355: IFTRUE 35389
35357: LD_INT 20
35359: DOUBLE
35360: EQUAL
35361: IFTRUE 35389
35363: LD_INT 21
35365: DOUBLE
35366: EQUAL
35367: IFTRUE 35389
35369: LD_INT 23
35371: DOUBLE
35372: EQUAL
35373: IFTRUE 35389
35375: LD_INT 24
35377: DOUBLE
35378: EQUAL
35379: IFTRUE 35389
35381: LD_INT 25
35383: DOUBLE
35384: EQUAL
35385: IFTRUE 35389
35387: GO 35445
35389: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35390: LD_ADDR_VAR 0 9
35394: PUSH
35395: LD_VAR 0 35
35399: PUSH
35400: LD_VAR 0 36
35404: PUSH
35405: LD_VAR 0 37
35409: PUSH
35410: LD_VAR 0 38
35414: PUSH
35415: LD_VAR 0 39
35419: PUSH
35420: LD_VAR 0 40
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: PUSH
35433: LD_VAR 0 4
35437: PUSH
35438: LD_INT 1
35440: PLUS
35441: ARRAY
35442: ST_TO_ADDR
35443: GO 35810
35445: LD_INT 6
35447: DOUBLE
35448: EQUAL
35449: IFTRUE 35501
35451: LD_INT 7
35453: DOUBLE
35454: EQUAL
35455: IFTRUE 35501
35457: LD_INT 8
35459: DOUBLE
35460: EQUAL
35461: IFTRUE 35501
35463: LD_INT 13
35465: DOUBLE
35466: EQUAL
35467: IFTRUE 35501
35469: LD_INT 12
35471: DOUBLE
35472: EQUAL
35473: IFTRUE 35501
35475: LD_INT 15
35477: DOUBLE
35478: EQUAL
35479: IFTRUE 35501
35481: LD_INT 11
35483: DOUBLE
35484: EQUAL
35485: IFTRUE 35501
35487: LD_INT 14
35489: DOUBLE
35490: EQUAL
35491: IFTRUE 35501
35493: LD_INT 10
35495: DOUBLE
35496: EQUAL
35497: IFTRUE 35501
35499: GO 35557
35501: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35502: LD_ADDR_VAR 0 9
35506: PUSH
35507: LD_VAR 0 41
35511: PUSH
35512: LD_VAR 0 42
35516: PUSH
35517: LD_VAR 0 43
35521: PUSH
35522: LD_VAR 0 44
35526: PUSH
35527: LD_VAR 0 45
35531: PUSH
35532: LD_VAR 0 46
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: PUSH
35545: LD_VAR 0 4
35549: PUSH
35550: LD_INT 1
35552: PLUS
35553: ARRAY
35554: ST_TO_ADDR
35555: GO 35810
35557: LD_INT 36
35559: DOUBLE
35560: EQUAL
35561: IFTRUE 35565
35563: GO 35621
35565: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35566: LD_ADDR_VAR 0 9
35570: PUSH
35571: LD_VAR 0 47
35575: PUSH
35576: LD_VAR 0 48
35580: PUSH
35581: LD_VAR 0 49
35585: PUSH
35586: LD_VAR 0 50
35590: PUSH
35591: LD_VAR 0 51
35595: PUSH
35596: LD_VAR 0 52
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: PUSH
35609: LD_VAR 0 4
35613: PUSH
35614: LD_INT 1
35616: PLUS
35617: ARRAY
35618: ST_TO_ADDR
35619: GO 35810
35621: LD_INT 4
35623: DOUBLE
35624: EQUAL
35625: IFTRUE 35647
35627: LD_INT 5
35629: DOUBLE
35630: EQUAL
35631: IFTRUE 35647
35633: LD_INT 34
35635: DOUBLE
35636: EQUAL
35637: IFTRUE 35647
35639: LD_INT 37
35641: DOUBLE
35642: EQUAL
35643: IFTRUE 35647
35645: GO 35703
35647: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35648: LD_ADDR_VAR 0 9
35652: PUSH
35653: LD_VAR 0 53
35657: PUSH
35658: LD_VAR 0 54
35662: PUSH
35663: LD_VAR 0 55
35667: PUSH
35668: LD_VAR 0 56
35672: PUSH
35673: LD_VAR 0 57
35677: PUSH
35678: LD_VAR 0 58
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: PUSH
35691: LD_VAR 0 4
35695: PUSH
35696: LD_INT 1
35698: PLUS
35699: ARRAY
35700: ST_TO_ADDR
35701: GO 35810
35703: LD_INT 31
35705: DOUBLE
35706: EQUAL
35707: IFTRUE 35753
35709: LD_INT 32
35711: DOUBLE
35712: EQUAL
35713: IFTRUE 35753
35715: LD_INT 33
35717: DOUBLE
35718: EQUAL
35719: IFTRUE 35753
35721: LD_INT 27
35723: DOUBLE
35724: EQUAL
35725: IFTRUE 35753
35727: LD_INT 26
35729: DOUBLE
35730: EQUAL
35731: IFTRUE 35753
35733: LD_INT 28
35735: DOUBLE
35736: EQUAL
35737: IFTRUE 35753
35739: LD_INT 29
35741: DOUBLE
35742: EQUAL
35743: IFTRUE 35753
35745: LD_INT 30
35747: DOUBLE
35748: EQUAL
35749: IFTRUE 35753
35751: GO 35809
35753: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35754: LD_ADDR_VAR 0 9
35758: PUSH
35759: LD_VAR 0 59
35763: PUSH
35764: LD_VAR 0 60
35768: PUSH
35769: LD_VAR 0 61
35773: PUSH
35774: LD_VAR 0 62
35778: PUSH
35779: LD_VAR 0 63
35783: PUSH
35784: LD_VAR 0 64
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: PUSH
35797: LD_VAR 0 4
35801: PUSH
35802: LD_INT 1
35804: PLUS
35805: ARRAY
35806: ST_TO_ADDR
35807: GO 35810
35809: POP
// temp_list2 = [ ] ;
35810: LD_ADDR_VAR 0 10
35814: PUSH
35815: EMPTY
35816: ST_TO_ADDR
// for i in temp_list do
35817: LD_ADDR_VAR 0 8
35821: PUSH
35822: LD_VAR 0 9
35826: PUSH
35827: FOR_IN
35828: IFFALSE 35880
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35830: LD_ADDR_VAR 0 10
35834: PUSH
35835: LD_VAR 0 10
35839: PUSH
35840: LD_VAR 0 8
35844: PUSH
35845: LD_INT 1
35847: ARRAY
35848: PUSH
35849: LD_VAR 0 2
35853: PLUS
35854: PUSH
35855: LD_VAR 0 8
35859: PUSH
35860: LD_INT 2
35862: ARRAY
35863: PUSH
35864: LD_VAR 0 3
35868: PLUS
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: EMPTY
35875: LIST
35876: ADD
35877: ST_TO_ADDR
35878: GO 35827
35880: POP
35881: POP
// result = temp_list2 ;
35882: LD_ADDR_VAR 0 7
35886: PUSH
35887: LD_VAR 0 10
35891: ST_TO_ADDR
// end ;
35892: LD_VAR 0 7
35896: RET
// export function EnemyInRange ( unit , dist ) ; begin
35897: LD_INT 0
35899: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35900: LD_ADDR_VAR 0 3
35904: PUSH
35905: LD_VAR 0 1
35909: PPUSH
35910: CALL_OW 255
35914: PPUSH
35915: LD_VAR 0 1
35919: PPUSH
35920: CALL_OW 250
35924: PPUSH
35925: LD_VAR 0 1
35929: PPUSH
35930: CALL_OW 251
35934: PPUSH
35935: LD_VAR 0 2
35939: PPUSH
35940: CALL 9154 0 4
35944: PUSH
35945: LD_INT 4
35947: ARRAY
35948: ST_TO_ADDR
// end ;
35949: LD_VAR 0 3
35953: RET
// export function PlayerSeeMe ( unit ) ; begin
35954: LD_INT 0
35956: PPUSH
// result := See ( your_side , unit ) ;
35957: LD_ADDR_VAR 0 2
35961: PUSH
35962: LD_OWVAR 2
35966: PPUSH
35967: LD_VAR 0 1
35971: PPUSH
35972: CALL_OW 292
35976: ST_TO_ADDR
// end ;
35977: LD_VAR 0 2
35981: RET
// export function ReverseDir ( unit ) ; begin
35982: LD_INT 0
35984: PPUSH
// if not unit then
35985: LD_VAR 0 1
35989: NOT
35990: IFFALSE 35994
// exit ;
35992: GO 36017
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35994: LD_ADDR_VAR 0 2
35998: PUSH
35999: LD_VAR 0 1
36003: PPUSH
36004: CALL_OW 254
36008: PUSH
36009: LD_INT 3
36011: PLUS
36012: PUSH
36013: LD_INT 6
36015: MOD
36016: ST_TO_ADDR
// end ;
36017: LD_VAR 0 2
36021: RET
// export function ReverseArray ( array ) ; var i ; begin
36022: LD_INT 0
36024: PPUSH
36025: PPUSH
// if not array then
36026: LD_VAR 0 1
36030: NOT
36031: IFFALSE 36035
// exit ;
36033: GO 36090
// result := [ ] ;
36035: LD_ADDR_VAR 0 2
36039: PUSH
36040: EMPTY
36041: ST_TO_ADDR
// for i := array downto 1 do
36042: LD_ADDR_VAR 0 3
36046: PUSH
36047: DOUBLE
36048: LD_VAR 0 1
36052: INC
36053: ST_TO_ADDR
36054: LD_INT 1
36056: PUSH
36057: FOR_DOWNTO
36058: IFFALSE 36088
// result := Join ( result , array [ i ] ) ;
36060: LD_ADDR_VAR 0 2
36064: PUSH
36065: LD_VAR 0 2
36069: PPUSH
36070: LD_VAR 0 1
36074: PUSH
36075: LD_VAR 0 3
36079: ARRAY
36080: PPUSH
36081: CALL 40932 0 2
36085: ST_TO_ADDR
36086: GO 36057
36088: POP
36089: POP
// end ;
36090: LD_VAR 0 2
36094: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36095: LD_INT 0
36097: PPUSH
36098: PPUSH
36099: PPUSH
36100: PPUSH
36101: PPUSH
36102: PPUSH
// if not unit or not hexes then
36103: LD_VAR 0 1
36107: NOT
36108: IFTRUE 36117
36110: PUSH
36111: LD_VAR 0 2
36115: NOT
36116: OR
36117: IFFALSE 36121
// exit ;
36119: GO 36244
// dist := 9999 ;
36121: LD_ADDR_VAR 0 5
36125: PUSH
36126: LD_INT 9999
36128: ST_TO_ADDR
// for i = 1 to hexes do
36129: LD_ADDR_VAR 0 4
36133: PUSH
36134: DOUBLE
36135: LD_INT 1
36137: DEC
36138: ST_TO_ADDR
36139: LD_VAR 0 2
36143: PUSH
36144: FOR_TO
36145: IFFALSE 36232
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36147: LD_ADDR_VAR 0 6
36151: PUSH
36152: LD_VAR 0 1
36156: PPUSH
36157: LD_VAR 0 2
36161: PUSH
36162: LD_VAR 0 4
36166: ARRAY
36167: PUSH
36168: LD_INT 1
36170: ARRAY
36171: PPUSH
36172: LD_VAR 0 2
36176: PUSH
36177: LD_VAR 0 4
36181: ARRAY
36182: PUSH
36183: LD_INT 2
36185: ARRAY
36186: PPUSH
36187: CALL_OW 297
36191: ST_TO_ADDR
// if tdist < dist then
36192: LD_VAR 0 6
36196: PUSH
36197: LD_VAR 0 5
36201: LESS
36202: IFFALSE 36230
// begin hex := hexes [ i ] ;
36204: LD_ADDR_VAR 0 8
36208: PUSH
36209: LD_VAR 0 2
36213: PUSH
36214: LD_VAR 0 4
36218: ARRAY
36219: ST_TO_ADDR
// dist := tdist ;
36220: LD_ADDR_VAR 0 5
36224: PUSH
36225: LD_VAR 0 6
36229: ST_TO_ADDR
// end ; end ;
36230: GO 36144
36232: POP
36233: POP
// result := hex ;
36234: LD_ADDR_VAR 0 3
36238: PUSH
36239: LD_VAR 0 8
36243: ST_TO_ADDR
// end ;
36244: LD_VAR 0 3
36248: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36249: LD_INT 0
36251: PPUSH
36252: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36253: LD_VAR 0 1
36257: NOT
36258: IFTRUE 36297
36260: PUSH
36261: LD_VAR 0 1
36265: PUSH
36266: LD_INT 21
36268: PUSH
36269: LD_INT 2
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 23
36278: PUSH
36279: LD_INT 2
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PPUSH
36290: CALL_OW 69
36294: IN
36295: NOT
36296: OR
36297: IFFALSE 36301
// exit ;
36299: GO 36348
// for i = 1 to 3 do
36301: LD_ADDR_VAR 0 3
36305: PUSH
36306: DOUBLE
36307: LD_INT 1
36309: DEC
36310: ST_TO_ADDR
36311: LD_INT 3
36313: PUSH
36314: FOR_TO
36315: IFFALSE 36346
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36317: LD_VAR 0 1
36321: PPUSH
36322: CALL_OW 250
36326: PPUSH
36327: LD_VAR 0 1
36331: PPUSH
36332: CALL_OW 251
36336: PPUSH
36337: LD_INT 1
36339: PPUSH
36340: CALL_OW 453
36344: GO 36314
36346: POP
36347: POP
// end ;
36348: LD_VAR 0 2
36352: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36353: LD_INT 0
36355: PPUSH
36356: PPUSH
36357: PPUSH
36358: PPUSH
36359: PPUSH
36360: PPUSH
// if not unit or not enemy_unit then
36361: LD_VAR 0 1
36365: NOT
36366: IFTRUE 36375
36368: PUSH
36369: LD_VAR 0 2
36373: NOT
36374: OR
36375: IFFALSE 36379
// exit ;
36377: GO 36850
// if GetLives ( i ) < 250 then
36379: LD_VAR 0 4
36383: PPUSH
36384: CALL_OW 256
36388: PUSH
36389: LD_INT 250
36391: LESS
36392: IFFALSE 36405
// begin ComAutodestruct ( i ) ;
36394: LD_VAR 0 4
36398: PPUSH
36399: CALL 36249 0 1
// exit ;
36403: GO 36850
// end ; x := GetX ( enemy_unit ) ;
36405: LD_ADDR_VAR 0 7
36409: PUSH
36410: LD_VAR 0 2
36414: PPUSH
36415: CALL_OW 250
36419: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36420: LD_ADDR_VAR 0 8
36424: PUSH
36425: LD_VAR 0 2
36429: PPUSH
36430: CALL_OW 251
36434: ST_TO_ADDR
// if not x or not y then
36435: LD_VAR 0 7
36439: NOT
36440: IFTRUE 36449
36442: PUSH
36443: LD_VAR 0 8
36447: NOT
36448: OR
36449: IFFALSE 36453
// exit ;
36451: GO 36850
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36453: LD_ADDR_VAR 0 6
36457: PUSH
36458: LD_VAR 0 7
36462: PPUSH
36463: LD_INT 0
36465: PPUSH
36466: LD_INT 4
36468: PPUSH
36469: CALL_OW 272
36473: PUSH
36474: LD_VAR 0 8
36478: PPUSH
36479: LD_INT 0
36481: PPUSH
36482: LD_INT 4
36484: PPUSH
36485: CALL_OW 273
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_VAR 0 7
36498: PPUSH
36499: LD_INT 1
36501: PPUSH
36502: LD_INT 4
36504: PPUSH
36505: CALL_OW 272
36509: PUSH
36510: LD_VAR 0 8
36514: PPUSH
36515: LD_INT 1
36517: PPUSH
36518: LD_INT 4
36520: PPUSH
36521: CALL_OW 273
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_VAR 0 7
36534: PPUSH
36535: LD_INT 2
36537: PPUSH
36538: LD_INT 4
36540: PPUSH
36541: CALL_OW 272
36545: PUSH
36546: LD_VAR 0 8
36550: PPUSH
36551: LD_INT 2
36553: PPUSH
36554: LD_INT 4
36556: PPUSH
36557: CALL_OW 273
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_VAR 0 7
36570: PPUSH
36571: LD_INT 3
36573: PPUSH
36574: LD_INT 4
36576: PPUSH
36577: CALL_OW 272
36581: PUSH
36582: LD_VAR 0 8
36586: PPUSH
36587: LD_INT 3
36589: PPUSH
36590: LD_INT 4
36592: PPUSH
36593: CALL_OW 273
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_VAR 0 7
36606: PPUSH
36607: LD_INT 4
36609: PPUSH
36610: LD_INT 4
36612: PPUSH
36613: CALL_OW 272
36617: PUSH
36618: LD_VAR 0 8
36622: PPUSH
36623: LD_INT 4
36625: PPUSH
36626: LD_INT 4
36628: PPUSH
36629: CALL_OW 273
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_VAR 0 7
36642: PPUSH
36643: LD_INT 5
36645: PPUSH
36646: LD_INT 4
36648: PPUSH
36649: CALL_OW 272
36653: PUSH
36654: LD_VAR 0 8
36658: PPUSH
36659: LD_INT 5
36661: PPUSH
36662: LD_INT 4
36664: PPUSH
36665: CALL_OW 273
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: ST_TO_ADDR
// for i = tmp downto 1 do
36682: LD_ADDR_VAR 0 4
36686: PUSH
36687: DOUBLE
36688: LD_VAR 0 6
36692: INC
36693: ST_TO_ADDR
36694: LD_INT 1
36696: PUSH
36697: FOR_DOWNTO
36698: IFFALSE 36801
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36700: LD_VAR 0 6
36704: PUSH
36705: LD_VAR 0 4
36709: ARRAY
36710: PUSH
36711: LD_INT 1
36713: ARRAY
36714: PPUSH
36715: LD_VAR 0 6
36719: PUSH
36720: LD_VAR 0 4
36724: ARRAY
36725: PUSH
36726: LD_INT 2
36728: ARRAY
36729: PPUSH
36730: CALL_OW 488
36734: NOT
36735: IFTRUE 36777
36737: PUSH
36738: LD_VAR 0 6
36742: PUSH
36743: LD_VAR 0 4
36747: ARRAY
36748: PUSH
36749: LD_INT 1
36751: ARRAY
36752: PPUSH
36753: LD_VAR 0 6
36757: PUSH
36758: LD_VAR 0 4
36762: ARRAY
36763: PUSH
36764: LD_INT 2
36766: ARRAY
36767: PPUSH
36768: CALL_OW 428
36772: PUSH
36773: LD_INT 0
36775: NONEQUAL
36776: OR
36777: IFFALSE 36799
// tmp := Delete ( tmp , i ) ;
36779: LD_ADDR_VAR 0 6
36783: PUSH
36784: LD_VAR 0 6
36788: PPUSH
36789: LD_VAR 0 4
36793: PPUSH
36794: CALL_OW 3
36798: ST_TO_ADDR
36799: GO 36697
36801: POP
36802: POP
// j := GetClosestHex ( unit , tmp ) ;
36803: LD_ADDR_VAR 0 5
36807: PUSH
36808: LD_VAR 0 1
36812: PPUSH
36813: LD_VAR 0 6
36817: PPUSH
36818: CALL 36095 0 2
36822: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36823: LD_VAR 0 1
36827: PPUSH
36828: LD_VAR 0 5
36832: PUSH
36833: LD_INT 1
36835: ARRAY
36836: PPUSH
36837: LD_VAR 0 5
36841: PUSH
36842: LD_INT 2
36844: ARRAY
36845: PPUSH
36846: CALL_OW 111
// end ;
36850: LD_VAR 0 3
36854: RET
// export function PrepareApemanSoldier ( ) ; begin
36855: LD_INT 0
36857: PPUSH
// uc_nation := 0 ;
36858: LD_ADDR_OWVAR 21
36862: PUSH
36863: LD_INT 0
36865: ST_TO_ADDR
// hc_sex := sex_male ;
36866: LD_ADDR_OWVAR 27
36870: PUSH
36871: LD_INT 1
36873: ST_TO_ADDR
// hc_name :=  ;
36874: LD_ADDR_OWVAR 26
36878: PUSH
36879: LD_STRING 
36881: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36882: LD_ADDR_OWVAR 28
36886: PUSH
36887: LD_INT 15
36889: ST_TO_ADDR
// hc_gallery :=  ;
36890: LD_ADDR_OWVAR 33
36894: PUSH
36895: LD_STRING 
36897: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36898: LD_ADDR_OWVAR 31
36902: PUSH
36903: LD_INT 0
36905: PPUSH
36906: LD_INT 3
36908: PPUSH
36909: CALL_OW 12
36913: PUSH
36914: LD_INT 0
36916: PPUSH
36917: LD_INT 3
36919: PPUSH
36920: CALL_OW 12
36924: PUSH
36925: LD_INT 0
36927: PUSH
36928: LD_INT 0
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36937: LD_ADDR_OWVAR 29
36941: PUSH
36942: LD_INT 12
36944: PUSH
36945: LD_INT 12
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: ST_TO_ADDR
// end ;
36952: LD_VAR 0 1
36956: RET
// export function PrepareApemanEngineer ( ) ; begin
36957: LD_INT 0
36959: PPUSH
// uc_nation := 0 ;
36960: LD_ADDR_OWVAR 21
36964: PUSH
36965: LD_INT 0
36967: ST_TO_ADDR
// hc_sex := sex_male ;
36968: LD_ADDR_OWVAR 27
36972: PUSH
36973: LD_INT 1
36975: ST_TO_ADDR
// hc_name :=  ;
36976: LD_ADDR_OWVAR 26
36980: PUSH
36981: LD_STRING 
36983: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36984: LD_ADDR_OWVAR 28
36988: PUSH
36989: LD_INT 16
36991: ST_TO_ADDR
// hc_gallery :=  ;
36992: LD_ADDR_OWVAR 33
36996: PUSH
36997: LD_STRING 
36999: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37000: LD_ADDR_OWVAR 31
37004: PUSH
37005: LD_INT 0
37007: PPUSH
37008: LD_INT 3
37010: PPUSH
37011: CALL_OW 12
37015: PUSH
37016: LD_INT 0
37018: PPUSH
37019: LD_INT 3
37021: PPUSH
37022: CALL_OW 12
37026: PUSH
37027: LD_INT 0
37029: PUSH
37030: LD_INT 0
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37039: LD_ADDR_OWVAR 29
37043: PUSH
37044: LD_INT 12
37046: PUSH
37047: LD_INT 12
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: ST_TO_ADDR
// end ;
37054: LD_VAR 0 1
37058: RET
// export function PrepareApeman ( agressivity ) ; begin
37059: LD_INT 0
37061: PPUSH
// uc_side := 0 ;
37062: LD_ADDR_OWVAR 20
37066: PUSH
37067: LD_INT 0
37069: ST_TO_ADDR
// uc_nation := 0 ;
37070: LD_ADDR_OWVAR 21
37074: PUSH
37075: LD_INT 0
37077: ST_TO_ADDR
// hc_sex := sex_male ;
37078: LD_ADDR_OWVAR 27
37082: PUSH
37083: LD_INT 1
37085: ST_TO_ADDR
// hc_class := class_apeman ;
37086: LD_ADDR_OWVAR 28
37090: PUSH
37091: LD_INT 12
37093: ST_TO_ADDR
// hc_gallery :=  ;
37094: LD_ADDR_OWVAR 33
37098: PUSH
37099: LD_STRING 
37101: ST_TO_ADDR
// hc_name :=  ;
37102: LD_ADDR_OWVAR 26
37106: PUSH
37107: LD_STRING 
37109: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37110: LD_ADDR_OWVAR 29
37114: PUSH
37115: LD_INT 12
37117: PUSH
37118: LD_INT 12
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: ST_TO_ADDR
// if agressivity = 0 then
37125: LD_VAR 0 1
37129: PUSH
37130: LD_INT 0
37132: EQUAL
37133: IFFALSE 37145
// hc_agressivity := 0 else
37135: LD_ADDR_OWVAR 35
37139: PUSH
37140: LD_INT 0
37142: ST_TO_ADDR
37143: GO 37166
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37145: LD_ADDR_OWVAR 35
37149: PUSH
37150: LD_VAR 0 1
37154: NEG
37155: PPUSH
37156: LD_VAR 0 1
37160: PPUSH
37161: CALL_OW 12
37165: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37166: LD_ADDR_OWVAR 31
37170: PUSH
37171: LD_INT 0
37173: PPUSH
37174: LD_INT 3
37176: PPUSH
37177: CALL_OW 12
37181: PUSH
37182: LD_INT 0
37184: PPUSH
37185: LD_INT 3
37187: PPUSH
37188: CALL_OW 12
37192: PUSH
37193: LD_INT 0
37195: PUSH
37196: LD_INT 0
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: ST_TO_ADDR
// end ;
37205: LD_VAR 0 2
37209: RET
// export function PrepareTiger ( agressivity ) ; begin
37210: LD_INT 0
37212: PPUSH
// uc_side := 0 ;
37213: LD_ADDR_OWVAR 20
37217: PUSH
37218: LD_INT 0
37220: ST_TO_ADDR
// uc_nation := 0 ;
37221: LD_ADDR_OWVAR 21
37225: PUSH
37226: LD_INT 0
37228: ST_TO_ADDR
// InitHc ;
37229: CALL_OW 19
// hc_class := class_tiger ;
37233: LD_ADDR_OWVAR 28
37237: PUSH
37238: LD_INT 14
37240: ST_TO_ADDR
// hc_gallery :=  ;
37241: LD_ADDR_OWVAR 33
37245: PUSH
37246: LD_STRING 
37248: ST_TO_ADDR
// hc_name :=  ;
37249: LD_ADDR_OWVAR 26
37253: PUSH
37254: LD_STRING 
37256: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37257: LD_ADDR_OWVAR 35
37261: PUSH
37262: LD_VAR 0 1
37266: NEG
37267: PPUSH
37268: LD_VAR 0 1
37272: PPUSH
37273: CALL_OW 12
37277: ST_TO_ADDR
// end ;
37278: LD_VAR 0 2
37282: RET
// export function PrepareEnchidna ( ) ; begin
37283: LD_INT 0
37285: PPUSH
// uc_side := 0 ;
37286: LD_ADDR_OWVAR 20
37290: PUSH
37291: LD_INT 0
37293: ST_TO_ADDR
// uc_nation := 0 ;
37294: LD_ADDR_OWVAR 21
37298: PUSH
37299: LD_INT 0
37301: ST_TO_ADDR
// InitHc ;
37302: CALL_OW 19
// hc_class := class_baggie ;
37306: LD_ADDR_OWVAR 28
37310: PUSH
37311: LD_INT 13
37313: ST_TO_ADDR
// hc_gallery :=  ;
37314: LD_ADDR_OWVAR 33
37318: PUSH
37319: LD_STRING 
37321: ST_TO_ADDR
// hc_name :=  ;
37322: LD_ADDR_OWVAR 26
37326: PUSH
37327: LD_STRING 
37329: ST_TO_ADDR
// end ;
37330: LD_VAR 0 1
37334: RET
// export function PrepareFrog ( ) ; begin
37335: LD_INT 0
37337: PPUSH
// uc_side := 0 ;
37338: LD_ADDR_OWVAR 20
37342: PUSH
37343: LD_INT 0
37345: ST_TO_ADDR
// uc_nation := 0 ;
37346: LD_ADDR_OWVAR 21
37350: PUSH
37351: LD_INT 0
37353: ST_TO_ADDR
// InitHc ;
37354: CALL_OW 19
// hc_class := class_frog ;
37358: LD_ADDR_OWVAR 28
37362: PUSH
37363: LD_INT 19
37365: ST_TO_ADDR
// hc_gallery :=  ;
37366: LD_ADDR_OWVAR 33
37370: PUSH
37371: LD_STRING 
37373: ST_TO_ADDR
// hc_name :=  ;
37374: LD_ADDR_OWVAR 26
37378: PUSH
37379: LD_STRING 
37381: ST_TO_ADDR
// end ;
37382: LD_VAR 0 1
37386: RET
// export function PrepareFish ( ) ; begin
37387: LD_INT 0
37389: PPUSH
// uc_side := 0 ;
37390: LD_ADDR_OWVAR 20
37394: PUSH
37395: LD_INT 0
37397: ST_TO_ADDR
// uc_nation := 0 ;
37398: LD_ADDR_OWVAR 21
37402: PUSH
37403: LD_INT 0
37405: ST_TO_ADDR
// InitHc ;
37406: CALL_OW 19
// hc_class := class_fish ;
37410: LD_ADDR_OWVAR 28
37414: PUSH
37415: LD_INT 20
37417: ST_TO_ADDR
// hc_gallery :=  ;
37418: LD_ADDR_OWVAR 33
37422: PUSH
37423: LD_STRING 
37425: ST_TO_ADDR
// hc_name :=  ;
37426: LD_ADDR_OWVAR 26
37430: PUSH
37431: LD_STRING 
37433: ST_TO_ADDR
// end ;
37434: LD_VAR 0 1
37438: RET
// export function PrepareBird ( ) ; begin
37439: LD_INT 0
37441: PPUSH
// uc_side := 0 ;
37442: LD_ADDR_OWVAR 20
37446: PUSH
37447: LD_INT 0
37449: ST_TO_ADDR
// uc_nation := 0 ;
37450: LD_ADDR_OWVAR 21
37454: PUSH
37455: LD_INT 0
37457: ST_TO_ADDR
// InitHc ;
37458: CALL_OW 19
// hc_class := class_phororhacos ;
37462: LD_ADDR_OWVAR 28
37466: PUSH
37467: LD_INT 18
37469: ST_TO_ADDR
// hc_gallery :=  ;
37470: LD_ADDR_OWVAR 33
37474: PUSH
37475: LD_STRING 
37477: ST_TO_ADDR
// hc_name :=  ;
37478: LD_ADDR_OWVAR 26
37482: PUSH
37483: LD_STRING 
37485: ST_TO_ADDR
// end ;
37486: LD_VAR 0 1
37490: RET
// export function PrepareHorse ( ) ; begin
37491: LD_INT 0
37493: PPUSH
// uc_side := 0 ;
37494: LD_ADDR_OWVAR 20
37498: PUSH
37499: LD_INT 0
37501: ST_TO_ADDR
// uc_nation := 0 ;
37502: LD_ADDR_OWVAR 21
37506: PUSH
37507: LD_INT 0
37509: ST_TO_ADDR
// InitHc ;
37510: CALL_OW 19
// hc_class := class_horse ;
37514: LD_ADDR_OWVAR 28
37518: PUSH
37519: LD_INT 21
37521: ST_TO_ADDR
// hc_gallery :=  ;
37522: LD_ADDR_OWVAR 33
37526: PUSH
37527: LD_STRING 
37529: ST_TO_ADDR
// hc_name :=  ;
37530: LD_ADDR_OWVAR 26
37534: PUSH
37535: LD_STRING 
37537: ST_TO_ADDR
// end ;
37538: LD_VAR 0 1
37542: RET
// export function PrepareMastodont ( ) ; begin
37543: LD_INT 0
37545: PPUSH
// uc_side := 0 ;
37546: LD_ADDR_OWVAR 20
37550: PUSH
37551: LD_INT 0
37553: ST_TO_ADDR
// uc_nation := 0 ;
37554: LD_ADDR_OWVAR 21
37558: PUSH
37559: LD_INT 0
37561: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37562: LD_ADDR_OWVAR 37
37566: PUSH
37567: LD_INT 31
37569: ST_TO_ADDR
// vc_control := control_rider ;
37570: LD_ADDR_OWVAR 38
37574: PUSH
37575: LD_INT 4
37577: ST_TO_ADDR
// end ;
37578: LD_VAR 0 1
37582: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37583: LD_INT 0
37585: PPUSH
37586: PPUSH
37587: PPUSH
// uc_side = 0 ;
37588: LD_ADDR_OWVAR 20
37592: PUSH
37593: LD_INT 0
37595: ST_TO_ADDR
// uc_nation = 0 ;
37596: LD_ADDR_OWVAR 21
37600: PUSH
37601: LD_INT 0
37603: ST_TO_ADDR
// InitHc_All ( ) ;
37604: CALL_OW 584
// InitVc ;
37608: CALL_OW 20
// if mastodonts then
37612: LD_VAR 0 6
37616: IFFALSE 37683
// for i = 1 to mastodonts do
37618: LD_ADDR_VAR 0 11
37622: PUSH
37623: DOUBLE
37624: LD_INT 1
37626: DEC
37627: ST_TO_ADDR
37628: LD_VAR 0 6
37632: PUSH
37633: FOR_TO
37634: IFFALSE 37681
// begin vc_chassis := 31 ;
37636: LD_ADDR_OWVAR 37
37640: PUSH
37641: LD_INT 31
37643: ST_TO_ADDR
// vc_control := control_rider ;
37644: LD_ADDR_OWVAR 38
37648: PUSH
37649: LD_INT 4
37651: ST_TO_ADDR
// animal := CreateVehicle ;
37652: LD_ADDR_VAR 0 12
37656: PUSH
37657: CALL_OW 45
37661: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37662: LD_VAR 0 12
37666: PPUSH
37667: LD_VAR 0 8
37671: PPUSH
37672: LD_INT 0
37674: PPUSH
37675: CALL 39825 0 3
// end ;
37679: GO 37633
37681: POP
37682: POP
// if horses then
37683: LD_VAR 0 5
37687: IFFALSE 37754
// for i = 1 to horses do
37689: LD_ADDR_VAR 0 11
37693: PUSH
37694: DOUBLE
37695: LD_INT 1
37697: DEC
37698: ST_TO_ADDR
37699: LD_VAR 0 5
37703: PUSH
37704: FOR_TO
37705: IFFALSE 37752
// begin hc_class := 21 ;
37707: LD_ADDR_OWVAR 28
37711: PUSH
37712: LD_INT 21
37714: ST_TO_ADDR
// hc_gallery :=  ;
37715: LD_ADDR_OWVAR 33
37719: PUSH
37720: LD_STRING 
37722: ST_TO_ADDR
// animal := CreateHuman ;
37723: LD_ADDR_VAR 0 12
37727: PUSH
37728: CALL_OW 44
37732: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37733: LD_VAR 0 12
37737: PPUSH
37738: LD_VAR 0 8
37742: PPUSH
37743: LD_INT 0
37745: PPUSH
37746: CALL 39825 0 3
// end ;
37750: GO 37704
37752: POP
37753: POP
// if birds then
37754: LD_VAR 0 1
37758: IFFALSE 37825
// for i = 1 to birds do
37760: LD_ADDR_VAR 0 11
37764: PUSH
37765: DOUBLE
37766: LD_INT 1
37768: DEC
37769: ST_TO_ADDR
37770: LD_VAR 0 1
37774: PUSH
37775: FOR_TO
37776: IFFALSE 37823
// begin hc_class := 18 ;
37778: LD_ADDR_OWVAR 28
37782: PUSH
37783: LD_INT 18
37785: ST_TO_ADDR
// hc_gallery =  ;
37786: LD_ADDR_OWVAR 33
37790: PUSH
37791: LD_STRING 
37793: ST_TO_ADDR
// animal := CreateHuman ;
37794: LD_ADDR_VAR 0 12
37798: PUSH
37799: CALL_OW 44
37803: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37804: LD_VAR 0 12
37808: PPUSH
37809: LD_VAR 0 8
37813: PPUSH
37814: LD_INT 0
37816: PPUSH
37817: CALL 39825 0 3
// end ;
37821: GO 37775
37823: POP
37824: POP
// if tigers then
37825: LD_VAR 0 2
37829: IFFALSE 37913
// for i = 1 to tigers do
37831: LD_ADDR_VAR 0 11
37835: PUSH
37836: DOUBLE
37837: LD_INT 1
37839: DEC
37840: ST_TO_ADDR
37841: LD_VAR 0 2
37845: PUSH
37846: FOR_TO
37847: IFFALSE 37911
// begin hc_class = class_tiger ;
37849: LD_ADDR_OWVAR 28
37853: PUSH
37854: LD_INT 14
37856: ST_TO_ADDR
// hc_gallery =  ;
37857: LD_ADDR_OWVAR 33
37861: PUSH
37862: LD_STRING 
37864: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37865: LD_ADDR_OWVAR 35
37869: PUSH
37870: LD_INT 7
37872: NEG
37873: PPUSH
37874: LD_INT 7
37876: PPUSH
37877: CALL_OW 12
37881: ST_TO_ADDR
// animal := CreateHuman ;
37882: LD_ADDR_VAR 0 12
37886: PUSH
37887: CALL_OW 44
37891: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37892: LD_VAR 0 12
37896: PPUSH
37897: LD_VAR 0 8
37901: PPUSH
37902: LD_INT 0
37904: PPUSH
37905: CALL 39825 0 3
// end ;
37909: GO 37846
37911: POP
37912: POP
// if apemans then
37913: LD_VAR 0 3
37917: IFFALSE 38040
// for i = 1 to apemans do
37919: LD_ADDR_VAR 0 11
37923: PUSH
37924: DOUBLE
37925: LD_INT 1
37927: DEC
37928: ST_TO_ADDR
37929: LD_VAR 0 3
37933: PUSH
37934: FOR_TO
37935: IFFALSE 38038
// begin hc_class = class_apeman ;
37937: LD_ADDR_OWVAR 28
37941: PUSH
37942: LD_INT 12
37944: ST_TO_ADDR
// hc_gallery =  ;
37945: LD_ADDR_OWVAR 33
37949: PUSH
37950: LD_STRING 
37952: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37953: LD_ADDR_OWVAR 35
37957: PUSH
37958: LD_INT 2
37960: NEG
37961: PPUSH
37962: LD_INT 2
37964: PPUSH
37965: CALL_OW 12
37969: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37970: LD_ADDR_OWVAR 31
37974: PUSH
37975: LD_INT 1
37977: PPUSH
37978: LD_INT 3
37980: PPUSH
37981: CALL_OW 12
37985: PUSH
37986: LD_INT 1
37988: PPUSH
37989: LD_INT 3
37991: PPUSH
37992: CALL_OW 12
37996: PUSH
37997: LD_INT 0
37999: PUSH
38000: LD_INT 0
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: ST_TO_ADDR
// animal := CreateHuman ;
38009: LD_ADDR_VAR 0 12
38013: PUSH
38014: CALL_OW 44
38018: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38019: LD_VAR 0 12
38023: PPUSH
38024: LD_VAR 0 8
38028: PPUSH
38029: LD_INT 0
38031: PPUSH
38032: CALL 39825 0 3
// end ;
38036: GO 37934
38038: POP
38039: POP
// if enchidnas then
38040: LD_VAR 0 4
38044: IFFALSE 38111
// for i = 1 to enchidnas do
38046: LD_ADDR_VAR 0 11
38050: PUSH
38051: DOUBLE
38052: LD_INT 1
38054: DEC
38055: ST_TO_ADDR
38056: LD_VAR 0 4
38060: PUSH
38061: FOR_TO
38062: IFFALSE 38109
// begin hc_class = 13 ;
38064: LD_ADDR_OWVAR 28
38068: PUSH
38069: LD_INT 13
38071: ST_TO_ADDR
// hc_gallery =  ;
38072: LD_ADDR_OWVAR 33
38076: PUSH
38077: LD_STRING 
38079: ST_TO_ADDR
// animal := CreateHuman ;
38080: LD_ADDR_VAR 0 12
38084: PUSH
38085: CALL_OW 44
38089: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38090: LD_VAR 0 12
38094: PPUSH
38095: LD_VAR 0 8
38099: PPUSH
38100: LD_INT 0
38102: PPUSH
38103: CALL 39825 0 3
// end ;
38107: GO 38061
38109: POP
38110: POP
// if fishes then
38111: LD_VAR 0 7
38115: IFFALSE 38182
// for i = 1 to fishes do
38117: LD_ADDR_VAR 0 11
38121: PUSH
38122: DOUBLE
38123: LD_INT 1
38125: DEC
38126: ST_TO_ADDR
38127: LD_VAR 0 7
38131: PUSH
38132: FOR_TO
38133: IFFALSE 38180
// begin hc_class = 20 ;
38135: LD_ADDR_OWVAR 28
38139: PUSH
38140: LD_INT 20
38142: ST_TO_ADDR
// hc_gallery =  ;
38143: LD_ADDR_OWVAR 33
38147: PUSH
38148: LD_STRING 
38150: ST_TO_ADDR
// animal := CreateHuman ;
38151: LD_ADDR_VAR 0 12
38155: PUSH
38156: CALL_OW 44
38160: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38161: LD_VAR 0 12
38165: PPUSH
38166: LD_VAR 0 9
38170: PPUSH
38171: LD_INT 0
38173: PPUSH
38174: CALL 39825 0 3
// end ;
38178: GO 38132
38180: POP
38181: POP
// end ;
38182: LD_VAR 0 10
38186: RET
// export function WantHeal ( sci , unit ) ; begin
38187: LD_INT 0
38189: PPUSH
// if GetTaskList ( sci ) > 0 then
38190: LD_VAR 0 1
38194: PPUSH
38195: CALL_OW 437
38199: PUSH
38200: LD_INT 0
38202: GREATER
38203: IFFALSE 38275
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38205: LD_VAR 0 1
38209: PPUSH
38210: CALL_OW 437
38214: PUSH
38215: LD_INT 1
38217: ARRAY
38218: PUSH
38219: LD_INT 1
38221: ARRAY
38222: PUSH
38223: LD_STRING l
38225: EQUAL
38226: IFFALSE 38253
38228: PUSH
38229: LD_VAR 0 1
38233: PPUSH
38234: CALL_OW 437
38238: PUSH
38239: LD_INT 1
38241: ARRAY
38242: PUSH
38243: LD_INT 4
38245: ARRAY
38246: PUSH
38247: LD_VAR 0 2
38251: EQUAL
38252: AND
38253: IFFALSE 38265
// result := true else
38255: LD_ADDR_VAR 0 3
38259: PUSH
38260: LD_INT 1
38262: ST_TO_ADDR
38263: GO 38273
// result := false ;
38265: LD_ADDR_VAR 0 3
38269: PUSH
38270: LD_INT 0
38272: ST_TO_ADDR
// end else
38273: GO 38283
// result := false ;
38275: LD_ADDR_VAR 0 3
38279: PUSH
38280: LD_INT 0
38282: ST_TO_ADDR
// end ;
38283: LD_VAR 0 3
38287: RET
// export function HealTarget ( sci ) ; begin
38288: LD_INT 0
38290: PPUSH
// if not sci then
38291: LD_VAR 0 1
38295: NOT
38296: IFFALSE 38300
// exit ;
38298: GO 38365
// result := 0 ;
38300: LD_ADDR_VAR 0 2
38304: PUSH
38305: LD_INT 0
38307: ST_TO_ADDR
// if GetTaskList ( sci ) then
38308: LD_VAR 0 1
38312: PPUSH
38313: CALL_OW 437
38317: IFFALSE 38365
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38319: LD_VAR 0 1
38323: PPUSH
38324: CALL_OW 437
38328: PUSH
38329: LD_INT 1
38331: ARRAY
38332: PUSH
38333: LD_INT 1
38335: ARRAY
38336: PUSH
38337: LD_STRING l
38339: EQUAL
38340: IFFALSE 38365
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38342: LD_ADDR_VAR 0 2
38346: PUSH
38347: LD_VAR 0 1
38351: PPUSH
38352: CALL_OW 437
38356: PUSH
38357: LD_INT 1
38359: ARRAY
38360: PUSH
38361: LD_INT 4
38363: ARRAY
38364: ST_TO_ADDR
// end ;
38365: LD_VAR 0 2
38369: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38370: LD_INT 0
38372: PPUSH
38373: PPUSH
38374: PPUSH
38375: PPUSH
// if not base_units then
38376: LD_VAR 0 1
38380: NOT
38381: IFFALSE 38385
// exit ;
38383: GO 38472
// result := false ;
38385: LD_ADDR_VAR 0 2
38389: PUSH
38390: LD_INT 0
38392: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38393: LD_ADDR_VAR 0 5
38397: PUSH
38398: LD_VAR 0 1
38402: PPUSH
38403: LD_INT 21
38405: PUSH
38406: LD_INT 3
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PPUSH
38413: CALL_OW 72
38417: ST_TO_ADDR
// if not tmp then
38418: LD_VAR 0 5
38422: NOT
38423: IFFALSE 38427
// exit ;
38425: GO 38472
// for i in tmp do
38427: LD_ADDR_VAR 0 3
38431: PUSH
38432: LD_VAR 0 5
38436: PUSH
38437: FOR_IN
38438: IFFALSE 38470
// begin result := EnemyInRange ( i , 22 ) ;
38440: LD_ADDR_VAR 0 2
38444: PUSH
38445: LD_VAR 0 3
38449: PPUSH
38450: LD_INT 22
38452: PPUSH
38453: CALL 35897 0 2
38457: ST_TO_ADDR
// if result then
38458: LD_VAR 0 2
38462: IFFALSE 38468
// exit ;
38464: POP
38465: POP
38466: GO 38472
// end ;
38468: GO 38437
38470: POP
38471: POP
// end ;
38472: LD_VAR 0 2
38476: RET
// export function FilterByTag ( units , tag ) ; begin
38477: LD_INT 0
38479: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38480: LD_ADDR_VAR 0 3
38484: PUSH
38485: LD_VAR 0 1
38489: PPUSH
38490: LD_INT 120
38492: PUSH
38493: LD_VAR 0 2
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PPUSH
38502: CALL_OW 72
38506: ST_TO_ADDR
// end ;
38507: LD_VAR 0 3
38511: RET
// export function IsDriver ( un ) ; begin
38512: LD_INT 0
38514: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38515: LD_ADDR_VAR 0 2
38519: PUSH
38520: LD_VAR 0 1
38524: PUSH
38525: LD_INT 55
38527: PUSH
38528: EMPTY
38529: LIST
38530: PPUSH
38531: CALL_OW 69
38535: IN
38536: ST_TO_ADDR
// end ;
38537: LD_VAR 0 2
38541: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38542: LD_INT 0
38544: PPUSH
38545: PPUSH
// list := [ ] ;
38546: LD_ADDR_VAR 0 5
38550: PUSH
38551: EMPTY
38552: ST_TO_ADDR
// case d of 0 :
38553: LD_VAR 0 3
38557: PUSH
38558: LD_INT 0
38560: DOUBLE
38561: EQUAL
38562: IFTRUE 38566
38564: GO 38699
38566: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38567: LD_ADDR_VAR 0 5
38571: PUSH
38572: LD_VAR 0 1
38576: PUSH
38577: LD_INT 4
38579: MINUS
38580: PUSH
38581: LD_VAR 0 2
38585: PUSH
38586: LD_INT 4
38588: MINUS
38589: PUSH
38590: LD_INT 2
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: LIST
38597: PUSH
38598: LD_VAR 0 1
38602: PUSH
38603: LD_INT 3
38605: MINUS
38606: PUSH
38607: LD_VAR 0 2
38611: PUSH
38612: LD_INT 1
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: LIST
38619: PUSH
38620: LD_VAR 0 1
38624: PUSH
38625: LD_INT 4
38627: PLUS
38628: PUSH
38629: LD_VAR 0 2
38633: PUSH
38634: LD_INT 4
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: LIST
38641: PUSH
38642: LD_VAR 0 1
38646: PUSH
38647: LD_INT 3
38649: PLUS
38650: PUSH
38651: LD_VAR 0 2
38655: PUSH
38656: LD_INT 3
38658: PLUS
38659: PUSH
38660: LD_INT 5
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: LIST
38667: PUSH
38668: LD_VAR 0 1
38672: PUSH
38673: LD_VAR 0 2
38677: PUSH
38678: LD_INT 4
38680: PLUS
38681: PUSH
38682: LD_INT 0
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: LIST
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: ST_TO_ADDR
// end ; 1 :
38697: GO 39397
38699: LD_INT 1
38701: DOUBLE
38702: EQUAL
38703: IFTRUE 38707
38705: GO 38840
38707: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38708: LD_ADDR_VAR 0 5
38712: PUSH
38713: LD_VAR 0 1
38717: PUSH
38718: LD_VAR 0 2
38722: PUSH
38723: LD_INT 4
38725: MINUS
38726: PUSH
38727: LD_INT 3
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: LIST
38734: PUSH
38735: LD_VAR 0 1
38739: PUSH
38740: LD_INT 3
38742: MINUS
38743: PUSH
38744: LD_VAR 0 2
38748: PUSH
38749: LD_INT 3
38751: MINUS
38752: PUSH
38753: LD_INT 2
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: LIST
38760: PUSH
38761: LD_VAR 0 1
38765: PUSH
38766: LD_INT 4
38768: MINUS
38769: PUSH
38770: LD_VAR 0 2
38774: PUSH
38775: LD_INT 1
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: LIST
38782: PUSH
38783: LD_VAR 0 1
38787: PUSH
38788: LD_VAR 0 2
38792: PUSH
38793: LD_INT 3
38795: PLUS
38796: PUSH
38797: LD_INT 0
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: LIST
38804: PUSH
38805: LD_VAR 0 1
38809: PUSH
38810: LD_INT 4
38812: PLUS
38813: PUSH
38814: LD_VAR 0 2
38818: PUSH
38819: LD_INT 4
38821: PLUS
38822: PUSH
38823: LD_INT 5
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: LIST
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: ST_TO_ADDR
// end ; 2 :
38838: GO 39397
38840: LD_INT 2
38842: DOUBLE
38843: EQUAL
38844: IFTRUE 38848
38846: GO 38977
38848: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38849: LD_ADDR_VAR 0 5
38853: PUSH
38854: LD_VAR 0 1
38858: PUSH
38859: LD_VAR 0 2
38863: PUSH
38864: LD_INT 3
38866: MINUS
38867: PUSH
38868: LD_INT 3
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: LIST
38875: PUSH
38876: LD_VAR 0 1
38880: PUSH
38881: LD_INT 4
38883: PLUS
38884: PUSH
38885: LD_VAR 0 2
38889: PUSH
38890: LD_INT 4
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: LIST
38897: PUSH
38898: LD_VAR 0 1
38902: PUSH
38903: LD_VAR 0 2
38907: PUSH
38908: LD_INT 4
38910: PLUS
38911: PUSH
38912: LD_INT 0
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: LIST
38919: PUSH
38920: LD_VAR 0 1
38924: PUSH
38925: LD_INT 3
38927: MINUS
38928: PUSH
38929: LD_VAR 0 2
38933: PUSH
38934: LD_INT 1
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: LIST
38941: PUSH
38942: LD_VAR 0 1
38946: PUSH
38947: LD_INT 4
38949: MINUS
38950: PUSH
38951: LD_VAR 0 2
38955: PUSH
38956: LD_INT 4
38958: MINUS
38959: PUSH
38960: LD_INT 2
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: LIST
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: ST_TO_ADDR
// end ; 3 :
38975: GO 39397
38977: LD_INT 3
38979: DOUBLE
38980: EQUAL
38981: IFTRUE 38985
38983: GO 39118
38985: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38986: LD_ADDR_VAR 0 5
38990: PUSH
38991: LD_VAR 0 1
38995: PUSH
38996: LD_INT 3
38998: PLUS
38999: PUSH
39000: LD_VAR 0 2
39004: PUSH
39005: LD_INT 4
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: LIST
39012: PUSH
39013: LD_VAR 0 1
39017: PUSH
39018: LD_INT 4
39020: PLUS
39021: PUSH
39022: LD_VAR 0 2
39026: PUSH
39027: LD_INT 4
39029: PLUS
39030: PUSH
39031: LD_INT 5
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: LIST
39038: PUSH
39039: LD_VAR 0 1
39043: PUSH
39044: LD_INT 4
39046: MINUS
39047: PUSH
39048: LD_VAR 0 2
39052: PUSH
39053: LD_INT 1
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: LIST
39060: PUSH
39061: LD_VAR 0 1
39065: PUSH
39066: LD_VAR 0 2
39070: PUSH
39071: LD_INT 4
39073: MINUS
39074: PUSH
39075: LD_INT 3
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: LIST
39082: PUSH
39083: LD_VAR 0 1
39087: PUSH
39088: LD_INT 3
39090: MINUS
39091: PUSH
39092: LD_VAR 0 2
39096: PUSH
39097: LD_INT 3
39099: MINUS
39100: PUSH
39101: LD_INT 2
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: LIST
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: ST_TO_ADDR
// end ; 4 :
39116: GO 39397
39118: LD_INT 4
39120: DOUBLE
39121: EQUAL
39122: IFTRUE 39126
39124: GO 39259
39126: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39127: LD_ADDR_VAR 0 5
39131: PUSH
39132: LD_VAR 0 1
39136: PUSH
39137: LD_VAR 0 2
39141: PUSH
39142: LD_INT 4
39144: PLUS
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: LIST
39153: PUSH
39154: LD_VAR 0 1
39158: PUSH
39159: LD_INT 3
39161: PLUS
39162: PUSH
39163: LD_VAR 0 2
39167: PUSH
39168: LD_INT 3
39170: PLUS
39171: PUSH
39172: LD_INT 5
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: LIST
39179: PUSH
39180: LD_VAR 0 1
39184: PUSH
39185: LD_INT 4
39187: PLUS
39188: PUSH
39189: LD_VAR 0 2
39193: PUSH
39194: LD_INT 4
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: LIST
39201: PUSH
39202: LD_VAR 0 1
39206: PUSH
39207: LD_VAR 0 2
39211: PUSH
39212: LD_INT 3
39214: MINUS
39215: PUSH
39216: LD_INT 3
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: LIST
39223: PUSH
39224: LD_VAR 0 1
39228: PUSH
39229: LD_INT 4
39231: MINUS
39232: PUSH
39233: LD_VAR 0 2
39237: PUSH
39238: LD_INT 4
39240: MINUS
39241: PUSH
39242: LD_INT 2
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: LIST
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: ST_TO_ADDR
// end ; 5 :
39257: GO 39397
39259: LD_INT 5
39261: DOUBLE
39262: EQUAL
39263: IFTRUE 39267
39265: GO 39396
39267: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39268: LD_ADDR_VAR 0 5
39272: PUSH
39273: LD_VAR 0 1
39277: PUSH
39278: LD_INT 4
39280: MINUS
39281: PUSH
39282: LD_VAR 0 2
39286: PUSH
39287: LD_INT 1
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: LIST
39294: PUSH
39295: LD_VAR 0 1
39299: PUSH
39300: LD_VAR 0 2
39304: PUSH
39305: LD_INT 4
39307: MINUS
39308: PUSH
39309: LD_INT 3
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: LIST
39316: PUSH
39317: LD_VAR 0 1
39321: PUSH
39322: LD_INT 4
39324: PLUS
39325: PUSH
39326: LD_VAR 0 2
39330: PUSH
39331: LD_INT 4
39333: PLUS
39334: PUSH
39335: LD_INT 5
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: LIST
39342: PUSH
39343: LD_VAR 0 1
39347: PUSH
39348: LD_INT 3
39350: PLUS
39351: PUSH
39352: LD_VAR 0 2
39356: PUSH
39357: LD_INT 4
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: LIST
39364: PUSH
39365: LD_VAR 0 1
39369: PUSH
39370: LD_VAR 0 2
39374: PUSH
39375: LD_INT 3
39377: PLUS
39378: PUSH
39379: LD_INT 0
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: LIST
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: ST_TO_ADDR
// end ; end ;
39394: GO 39397
39396: POP
// result := list ;
39397: LD_ADDR_VAR 0 4
39401: PUSH
39402: LD_VAR 0 5
39406: ST_TO_ADDR
// end ;
39407: LD_VAR 0 4
39411: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39412: LD_INT 0
39414: PPUSH
39415: PPUSH
39416: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39417: LD_VAR 0 1
39421: NOT
39422: IFTRUE 39450
39424: PUSH
39425: LD_VAR 0 2
39429: PUSH
39430: LD_INT 1
39432: PUSH
39433: LD_INT 2
39435: PUSH
39436: LD_INT 3
39438: PUSH
39439: LD_INT 4
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: IN
39448: NOT
39449: OR
39450: IFFALSE 39454
// exit ;
39452: GO 39537
// tmp := [ ] ;
39454: LD_ADDR_VAR 0 5
39458: PUSH
39459: EMPTY
39460: ST_TO_ADDR
// for i in units do
39461: LD_ADDR_VAR 0 4
39465: PUSH
39466: LD_VAR 0 1
39470: PUSH
39471: FOR_IN
39472: IFFALSE 39506
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39474: LD_ADDR_VAR 0 5
39478: PUSH
39479: LD_VAR 0 5
39483: PPUSH
39484: LD_VAR 0 4
39488: PPUSH
39489: LD_VAR 0 2
39493: PPUSH
39494: CALL_OW 259
39498: PPUSH
39499: CALL 40932 0 2
39503: ST_TO_ADDR
39504: GO 39471
39506: POP
39507: POP
// if not tmp then
39508: LD_VAR 0 5
39512: NOT
39513: IFFALSE 39517
// exit ;
39515: GO 39537
// result := SortListByListDesc ( units , tmp ) ;
39517: LD_ADDR_VAR 0 3
39521: PUSH
39522: LD_VAR 0 1
39526: PPUSH
39527: LD_VAR 0 5
39531: PPUSH
39532: CALL_OW 77
39536: ST_TO_ADDR
// end ;
39537: LD_VAR 0 3
39541: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39542: LD_INT 0
39544: PPUSH
39545: PPUSH
39546: PPUSH
// result := false ;
39547: LD_ADDR_VAR 0 3
39551: PUSH
39552: LD_INT 0
39554: ST_TO_ADDR
// if not building then
39555: LD_VAR 0 2
39559: NOT
39560: IFFALSE 39564
// exit ;
39562: GO 39708
// x := GetX ( building ) ;
39564: LD_ADDR_VAR 0 4
39568: PUSH
39569: LD_VAR 0 2
39573: PPUSH
39574: CALL_OW 250
39578: ST_TO_ADDR
// y := GetY ( building ) ;
39579: LD_ADDR_VAR 0 5
39583: PUSH
39584: LD_VAR 0 2
39588: PPUSH
39589: CALL_OW 251
39593: ST_TO_ADDR
// if not x or not y then
39594: LD_VAR 0 4
39598: NOT
39599: IFTRUE 39608
39601: PUSH
39602: LD_VAR 0 5
39606: NOT
39607: OR
39608: IFFALSE 39612
// exit ;
39610: GO 39708
// if GetTaskList ( unit ) then
39612: LD_VAR 0 1
39616: PPUSH
39617: CALL_OW 437
39621: IFFALSE 39708
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39623: LD_STRING e
39625: PUSH
39626: LD_VAR 0 1
39630: PPUSH
39631: CALL_OW 437
39635: PUSH
39636: LD_INT 1
39638: ARRAY
39639: PUSH
39640: LD_INT 1
39642: ARRAY
39643: EQUAL
39644: IFFALSE 39671
39646: PUSH
39647: LD_VAR 0 4
39651: PUSH
39652: LD_VAR 0 1
39656: PPUSH
39657: CALL_OW 437
39661: PUSH
39662: LD_INT 1
39664: ARRAY
39665: PUSH
39666: LD_INT 2
39668: ARRAY
39669: EQUAL
39670: AND
39671: IFFALSE 39698
39673: PUSH
39674: LD_VAR 0 5
39678: PUSH
39679: LD_VAR 0 1
39683: PPUSH
39684: CALL_OW 437
39688: PUSH
39689: LD_INT 1
39691: ARRAY
39692: PUSH
39693: LD_INT 3
39695: ARRAY
39696: EQUAL
39697: AND
39698: IFFALSE 39708
// result := true end ;
39700: LD_ADDR_VAR 0 3
39704: PUSH
39705: LD_INT 1
39707: ST_TO_ADDR
// end ;
39708: LD_VAR 0 3
39712: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39713: LD_INT 0
39715: PPUSH
// result := false ;
39716: LD_ADDR_VAR 0 4
39720: PUSH
39721: LD_INT 0
39723: ST_TO_ADDR
// if GetTaskList ( unit ) then
39724: LD_VAR 0 1
39728: PPUSH
39729: CALL_OW 437
39733: IFFALSE 39820
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39735: LD_STRING M
39737: PUSH
39738: LD_VAR 0 1
39742: PPUSH
39743: CALL_OW 437
39747: PUSH
39748: LD_INT 1
39750: ARRAY
39751: PUSH
39752: LD_INT 1
39754: ARRAY
39755: EQUAL
39756: IFFALSE 39783
39758: PUSH
39759: LD_VAR 0 2
39763: PUSH
39764: LD_VAR 0 1
39768: PPUSH
39769: CALL_OW 437
39773: PUSH
39774: LD_INT 1
39776: ARRAY
39777: PUSH
39778: LD_INT 2
39780: ARRAY
39781: EQUAL
39782: AND
39783: IFFALSE 39810
39785: PUSH
39786: LD_VAR 0 3
39790: PUSH
39791: LD_VAR 0 1
39795: PPUSH
39796: CALL_OW 437
39800: PUSH
39801: LD_INT 1
39803: ARRAY
39804: PUSH
39805: LD_INT 3
39807: ARRAY
39808: EQUAL
39809: AND
39810: IFFALSE 39820
// result := true ;
39812: LD_ADDR_VAR 0 4
39816: PUSH
39817: LD_INT 1
39819: ST_TO_ADDR
// end ; end ;
39820: LD_VAR 0 4
39824: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39825: LD_INT 0
39827: PPUSH
39828: PPUSH
39829: PPUSH
39830: PPUSH
// if not unit or not area then
39831: LD_VAR 0 1
39835: NOT
39836: IFTRUE 39845
39838: PUSH
39839: LD_VAR 0 2
39843: NOT
39844: OR
39845: IFFALSE 39849
// exit ;
39847: GO 40025
// tmp := AreaToList ( area , i ) ;
39849: LD_ADDR_VAR 0 6
39853: PUSH
39854: LD_VAR 0 2
39858: PPUSH
39859: LD_VAR 0 5
39863: PPUSH
39864: CALL_OW 517
39868: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39869: LD_ADDR_VAR 0 5
39873: PUSH
39874: DOUBLE
39875: LD_INT 1
39877: DEC
39878: ST_TO_ADDR
39879: LD_VAR 0 6
39883: PUSH
39884: LD_INT 1
39886: ARRAY
39887: PUSH
39888: FOR_TO
39889: IFFALSE 40023
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39891: LD_ADDR_VAR 0 7
39895: PUSH
39896: LD_VAR 0 6
39900: PUSH
39901: LD_INT 1
39903: ARRAY
39904: PUSH
39905: LD_VAR 0 5
39909: ARRAY
39910: PUSH
39911: LD_VAR 0 6
39915: PUSH
39916: LD_INT 2
39918: ARRAY
39919: PUSH
39920: LD_VAR 0 5
39924: ARRAY
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39930: LD_INT 92
39932: PUSH
39933: LD_VAR 0 7
39937: PUSH
39938: LD_INT 1
39940: ARRAY
39941: PUSH
39942: LD_VAR 0 7
39946: PUSH
39947: LD_INT 2
39949: ARRAY
39950: PUSH
39951: LD_INT 2
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: PPUSH
39960: CALL_OW 69
39964: PUSH
39965: LD_INT 0
39967: EQUAL
39968: IFFALSE 40021
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39970: LD_VAR 0 1
39974: PPUSH
39975: LD_VAR 0 7
39979: PUSH
39980: LD_INT 1
39982: ARRAY
39983: PPUSH
39984: LD_VAR 0 7
39988: PUSH
39989: LD_INT 2
39991: ARRAY
39992: PPUSH
39993: LD_VAR 0 3
39997: PPUSH
39998: CALL_OW 48
// result := IsPlaced ( unit ) ;
40002: LD_ADDR_VAR 0 4
40006: PUSH
40007: LD_VAR 0 1
40011: PPUSH
40012: CALL_OW 305
40016: ST_TO_ADDR
// exit ;
40017: POP
40018: POP
40019: GO 40025
// end ; end ;
40021: GO 39888
40023: POP
40024: POP
// end ;
40025: LD_VAR 0 4
40029: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40030: LD_INT 0
40032: PPUSH
40033: PPUSH
40034: PPUSH
// if not side or side > 8 then
40035: LD_VAR 0 1
40039: NOT
40040: IFTRUE 40052
40042: PUSH
40043: LD_VAR 0 1
40047: PUSH
40048: LD_INT 8
40050: GREATER
40051: OR
40052: IFFALSE 40056
// exit ;
40054: GO 40243
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40056: LD_ADDR_VAR 0 4
40060: PUSH
40061: LD_INT 22
40063: PUSH
40064: LD_VAR 0 1
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 21
40075: PUSH
40076: LD_INT 3
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PPUSH
40087: CALL_OW 69
40091: ST_TO_ADDR
// if not tmp then
40092: LD_VAR 0 4
40096: NOT
40097: IFFALSE 40101
// exit ;
40099: GO 40243
// enable_addtolog := true ;
40101: LD_ADDR_OWVAR 81
40105: PUSH
40106: LD_INT 1
40108: ST_TO_ADDR
// AddToLog ( [ ) ;
40109: LD_STRING [
40111: PPUSH
40112: CALL_OW 561
// for i in tmp do
40116: LD_ADDR_VAR 0 3
40120: PUSH
40121: LD_VAR 0 4
40125: PUSH
40126: FOR_IN
40127: IFFALSE 40234
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40129: LD_STRING [
40131: PUSH
40132: LD_VAR 0 3
40136: PPUSH
40137: CALL_OW 266
40141: STR
40142: PUSH
40143: LD_STRING , 
40145: STR
40146: PUSH
40147: LD_VAR 0 3
40151: PPUSH
40152: CALL_OW 250
40156: STR
40157: PUSH
40158: LD_STRING , 
40160: STR
40161: PUSH
40162: LD_VAR 0 3
40166: PPUSH
40167: CALL_OW 251
40171: STR
40172: PUSH
40173: LD_STRING , 
40175: STR
40176: PUSH
40177: LD_VAR 0 3
40181: PPUSH
40182: CALL_OW 254
40186: STR
40187: PUSH
40188: LD_STRING , 
40190: STR
40191: PUSH
40192: LD_VAR 0 3
40196: PPUSH
40197: LD_INT 1
40199: PPUSH
40200: CALL_OW 268
40204: STR
40205: PUSH
40206: LD_STRING , 
40208: STR
40209: PUSH
40210: LD_VAR 0 3
40214: PPUSH
40215: LD_INT 2
40217: PPUSH
40218: CALL_OW 268
40222: STR
40223: PUSH
40224: LD_STRING ],
40226: STR
40227: PPUSH
40228: CALL_OW 561
// end ;
40232: GO 40126
40234: POP
40235: POP
// AddToLog ( ]; ) ;
40236: LD_STRING ];
40238: PPUSH
40239: CALL_OW 561
// end ;
40243: LD_VAR 0 2
40247: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40248: LD_INT 0
40250: PPUSH
40251: PPUSH
40252: PPUSH
40253: PPUSH
40254: PPUSH
// if not area or not rate or not max then
40255: LD_VAR 0 1
40259: NOT
40260: IFTRUE 40269
40262: PUSH
40263: LD_VAR 0 2
40267: NOT
40268: OR
40269: IFTRUE 40278
40271: PUSH
40272: LD_VAR 0 4
40276: NOT
40277: OR
40278: IFFALSE 40282
// exit ;
40280: GO 40471
// while 1 do
40282: LD_INT 1
40284: IFFALSE 40471
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40286: LD_ADDR_VAR 0 9
40290: PUSH
40291: LD_VAR 0 1
40295: PPUSH
40296: LD_INT 1
40298: PPUSH
40299: CALL_OW 287
40303: PUSH
40304: LD_INT 10
40306: MUL
40307: ST_TO_ADDR
// r := rate / 10 ;
40308: LD_ADDR_VAR 0 7
40312: PUSH
40313: LD_VAR 0 2
40317: PUSH
40318: LD_INT 10
40320: DIVREAL
40321: ST_TO_ADDR
// time := 1 1$00 ;
40322: LD_ADDR_VAR 0 8
40326: PUSH
40327: LD_INT 2100
40329: ST_TO_ADDR
// if amount < min then
40330: LD_VAR 0 9
40334: PUSH
40335: LD_VAR 0 3
40339: LESS
40340: IFFALSE 40358
// r := r * 2 else
40342: LD_ADDR_VAR 0 7
40346: PUSH
40347: LD_VAR 0 7
40351: PUSH
40352: LD_INT 2
40354: MUL
40355: ST_TO_ADDR
40356: GO 40384
// if amount > max then
40358: LD_VAR 0 9
40362: PUSH
40363: LD_VAR 0 4
40367: GREATER
40368: IFFALSE 40384
// r := r / 2 ;
40370: LD_ADDR_VAR 0 7
40374: PUSH
40375: LD_VAR 0 7
40379: PUSH
40380: LD_INT 2
40382: DIVREAL
40383: ST_TO_ADDR
// time := time / r ;
40384: LD_ADDR_VAR 0 8
40388: PUSH
40389: LD_VAR 0 8
40393: PUSH
40394: LD_VAR 0 7
40398: DIVREAL
40399: ST_TO_ADDR
// if time < 0 then
40400: LD_VAR 0 8
40404: PUSH
40405: LD_INT 0
40407: LESS
40408: IFFALSE 40425
// time := time * - 1 ;
40410: LD_ADDR_VAR 0 8
40414: PUSH
40415: LD_VAR 0 8
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: MUL
40424: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40425: LD_VAR 0 8
40429: PUSH
40430: LD_INT 35
40432: PPUSH
40433: LD_INT 875
40435: PPUSH
40436: CALL_OW 12
40440: PLUS
40441: PPUSH
40442: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40446: LD_INT 1
40448: PPUSH
40449: LD_INT 5
40451: PPUSH
40452: CALL_OW 12
40456: PPUSH
40457: LD_VAR 0 1
40461: PPUSH
40462: LD_INT 1
40464: PPUSH
40465: CALL_OW 55
// end ;
40469: GO 40282
// end ;
40471: LD_VAR 0 5
40475: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40476: LD_INT 0
40478: PPUSH
40479: PPUSH
40480: PPUSH
40481: PPUSH
40482: PPUSH
40483: PPUSH
40484: PPUSH
40485: PPUSH
// if not turrets or not factories then
40486: LD_VAR 0 1
40490: NOT
40491: IFTRUE 40500
40493: PUSH
40494: LD_VAR 0 2
40498: NOT
40499: OR
40500: IFFALSE 40504
// exit ;
40502: GO 40811
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40504: LD_ADDR_VAR 0 10
40508: PUSH
40509: LD_INT 5
40511: PUSH
40512: LD_INT 6
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 2
40521: PUSH
40522: LD_INT 4
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 3
40531: PUSH
40532: LD_INT 5
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 24
40546: PUSH
40547: LD_INT 25
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 23
40556: PUSH
40557: LD_INT 27
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 42
40570: PUSH
40571: LD_INT 43
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 44
40580: PUSH
40581: LD_INT 46
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 45
40590: PUSH
40591: LD_INT 47
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: LIST
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: LIST
40607: ST_TO_ADDR
// result := [ ] ;
40608: LD_ADDR_VAR 0 3
40612: PUSH
40613: EMPTY
40614: ST_TO_ADDR
// for i in turrets do
40615: LD_ADDR_VAR 0 4
40619: PUSH
40620: LD_VAR 0 1
40624: PUSH
40625: FOR_IN
40626: IFFALSE 40809
// begin nat := GetNation ( i ) ;
40628: LD_ADDR_VAR 0 7
40632: PUSH
40633: LD_VAR 0 4
40637: PPUSH
40638: CALL_OW 248
40642: ST_TO_ADDR
// weapon := 0 ;
40643: LD_ADDR_VAR 0 8
40647: PUSH
40648: LD_INT 0
40650: ST_TO_ADDR
// if not nat then
40651: LD_VAR 0 7
40655: NOT
40656: IFFALSE 40660
// continue ;
40658: GO 40625
// for j in list [ nat ] do
40660: LD_ADDR_VAR 0 5
40664: PUSH
40665: LD_VAR 0 10
40669: PUSH
40670: LD_VAR 0 7
40674: ARRAY
40675: PUSH
40676: FOR_IN
40677: IFFALSE 40718
// if GetBWeapon ( i ) = j [ 1 ] then
40679: LD_VAR 0 4
40683: PPUSH
40684: CALL_OW 269
40688: PUSH
40689: LD_VAR 0 5
40693: PUSH
40694: LD_INT 1
40696: ARRAY
40697: EQUAL
40698: IFFALSE 40716
// begin weapon := j [ 2 ] ;
40700: LD_ADDR_VAR 0 8
40704: PUSH
40705: LD_VAR 0 5
40709: PUSH
40710: LD_INT 2
40712: ARRAY
40713: ST_TO_ADDR
// break ;
40714: GO 40718
// end ;
40716: GO 40676
40718: POP
40719: POP
// if not weapon then
40720: LD_VAR 0 8
40724: NOT
40725: IFFALSE 40729
// continue ;
40727: GO 40625
// for k in factories do
40729: LD_ADDR_VAR 0 6
40733: PUSH
40734: LD_VAR 0 2
40738: PUSH
40739: FOR_IN
40740: IFFALSE 40805
// begin weapons := AvailableWeaponList ( k ) ;
40742: LD_ADDR_VAR 0 9
40746: PUSH
40747: LD_VAR 0 6
40751: PPUSH
40752: CALL_OW 478
40756: ST_TO_ADDR
// if not weapons then
40757: LD_VAR 0 9
40761: NOT
40762: IFFALSE 40766
// continue ;
40764: GO 40739
// if weapon in weapons then
40766: LD_VAR 0 8
40770: PUSH
40771: LD_VAR 0 9
40775: IN
40776: IFFALSE 40803
// begin result := [ i , weapon ] ;
40778: LD_ADDR_VAR 0 3
40782: PUSH
40783: LD_VAR 0 4
40787: PUSH
40788: LD_VAR 0 8
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: ST_TO_ADDR
// exit ;
40797: POP
40798: POP
40799: POP
40800: POP
40801: GO 40811
// end ; end ;
40803: GO 40739
40805: POP
40806: POP
// end ;
40807: GO 40625
40809: POP
40810: POP
// end ;
40811: LD_VAR 0 3
40815: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40816: LD_INT 0
40818: PPUSH
// if not side or side > 8 then
40819: LD_VAR 0 3
40823: NOT
40824: IFTRUE 40836
40826: PUSH
40827: LD_VAR 0 3
40831: PUSH
40832: LD_INT 8
40834: GREATER
40835: OR
40836: IFFALSE 40840
// exit ;
40838: GO 40899
// if not range then
40840: LD_VAR 0 4
40844: NOT
40845: IFFALSE 40856
// range := - 12 ;
40847: LD_ADDR_VAR 0 4
40851: PUSH
40852: LD_INT 12
40854: NEG
40855: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40856: LD_VAR 0 1
40860: PPUSH
40861: LD_VAR 0 2
40865: PPUSH
40866: LD_VAR 0 3
40870: PPUSH
40871: LD_VAR 0 4
40875: PPUSH
40876: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40880: LD_VAR 0 1
40884: PPUSH
40885: LD_VAR 0 2
40889: PPUSH
40890: LD_VAR 0 3
40894: PPUSH
40895: CALL_OW 331
// end ;
40899: LD_VAR 0 5
40903: RET
// export function Video ( mode ) ; begin
40904: LD_INT 0
40906: PPUSH
// ingame_video = mode ;
40907: LD_ADDR_OWVAR 52
40911: PUSH
40912: LD_VAR 0 1
40916: ST_TO_ADDR
// interface_hidden = mode ;
40917: LD_ADDR_OWVAR 54
40921: PUSH
40922: LD_VAR 0 1
40926: ST_TO_ADDR
// end ;
40927: LD_VAR 0 2
40931: RET
// export function Join ( array , element ) ; begin
40932: LD_INT 0
40934: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40935: LD_ADDR_VAR 0 3
40939: PUSH
40940: LD_VAR 0 1
40944: PPUSH
40945: LD_VAR 0 1
40949: PUSH
40950: LD_INT 1
40952: PLUS
40953: PPUSH
40954: LD_VAR 0 2
40958: PPUSH
40959: CALL_OW 1
40963: ST_TO_ADDR
// end ;
40964: LD_VAR 0 3
40968: RET
// export function JoinUnion ( array , element ) ; begin
40969: LD_INT 0
40971: PPUSH
// result := array union element ;
40972: LD_ADDR_VAR 0 3
40976: PUSH
40977: LD_VAR 0 1
40981: PUSH
40982: LD_VAR 0 2
40986: UNION
40987: ST_TO_ADDR
// end ;
40988: LD_VAR 0 3
40992: RET
// export function GetBehemoths ( side ) ; begin
40993: LD_INT 0
40995: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40996: LD_ADDR_VAR 0 2
41000: PUSH
41001: LD_INT 22
41003: PUSH
41004: LD_VAR 0 1
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 31
41015: PUSH
41016: LD_INT 25
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PPUSH
41027: CALL_OW 69
41031: ST_TO_ADDR
// end ;
41032: LD_VAR 0 2
41036: RET
// export function Shuffle ( array ) ; var i , index ; begin
41037: LD_INT 0
41039: PPUSH
41040: PPUSH
41041: PPUSH
// result := [ ] ;
41042: LD_ADDR_VAR 0 2
41046: PUSH
41047: EMPTY
41048: ST_TO_ADDR
// if not array then
41049: LD_VAR 0 1
41053: NOT
41054: IFFALSE 41058
// exit ;
41056: GO 41157
// Randomize ;
41058: CALL_OW 10
// for i = array downto 1 do
41062: LD_ADDR_VAR 0 3
41066: PUSH
41067: DOUBLE
41068: LD_VAR 0 1
41072: INC
41073: ST_TO_ADDR
41074: LD_INT 1
41076: PUSH
41077: FOR_DOWNTO
41078: IFFALSE 41155
// begin index := rand ( 1 , array ) ;
41080: LD_ADDR_VAR 0 4
41084: PUSH
41085: LD_INT 1
41087: PPUSH
41088: LD_VAR 0 1
41092: PPUSH
41093: CALL_OW 12
41097: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41098: LD_ADDR_VAR 0 2
41102: PUSH
41103: LD_VAR 0 2
41107: PPUSH
41108: LD_VAR 0 2
41112: PUSH
41113: LD_INT 1
41115: PLUS
41116: PPUSH
41117: LD_VAR 0 1
41121: PUSH
41122: LD_VAR 0 4
41126: ARRAY
41127: PPUSH
41128: CALL_OW 2
41132: ST_TO_ADDR
// array := Delete ( array , index ) ;
41133: LD_ADDR_VAR 0 1
41137: PUSH
41138: LD_VAR 0 1
41142: PPUSH
41143: LD_VAR 0 4
41147: PPUSH
41148: CALL_OW 3
41152: ST_TO_ADDR
// end ;
41153: GO 41077
41155: POP
41156: POP
// end ;
41157: LD_VAR 0 2
41161: RET
// export function GetBaseMaterials ( base ) ; begin
41162: LD_INT 0
41164: PPUSH
// result := [ 0 , 0 , 0 ] ;
41165: LD_ADDR_VAR 0 2
41169: PUSH
41170: LD_INT 0
41172: PUSH
41173: LD_INT 0
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: LIST
41183: ST_TO_ADDR
// if not base then
41184: LD_VAR 0 1
41188: NOT
41189: IFFALSE 41193
// exit ;
41191: GO 41242
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41193: LD_ADDR_VAR 0 2
41197: PUSH
41198: LD_VAR 0 1
41202: PPUSH
41203: LD_INT 1
41205: PPUSH
41206: CALL_OW 275
41210: PUSH
41211: LD_VAR 0 1
41215: PPUSH
41216: LD_INT 2
41218: PPUSH
41219: CALL_OW 275
41223: PUSH
41224: LD_VAR 0 1
41228: PPUSH
41229: LD_INT 3
41231: PPUSH
41232: CALL_OW 275
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: LIST
41241: ST_TO_ADDR
// end ;
41242: LD_VAR 0 2
41246: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41247: LD_INT 0
41249: PPUSH
41250: PPUSH
// result := array ;
41251: LD_ADDR_VAR 0 3
41255: PUSH
41256: LD_VAR 0 1
41260: ST_TO_ADDR
// if size >= result then
41261: LD_VAR 0 2
41265: PUSH
41266: LD_VAR 0 3
41270: GREATEREQUAL
41271: IFFALSE 41275
// exit ;
41273: GO 41325
// if size then
41275: LD_VAR 0 2
41279: IFFALSE 41325
// for i := array downto size do
41281: LD_ADDR_VAR 0 4
41285: PUSH
41286: DOUBLE
41287: LD_VAR 0 1
41291: INC
41292: ST_TO_ADDR
41293: LD_VAR 0 2
41297: PUSH
41298: FOR_DOWNTO
41299: IFFALSE 41323
// result := Delete ( result , result ) ;
41301: LD_ADDR_VAR 0 3
41305: PUSH
41306: LD_VAR 0 3
41310: PPUSH
41311: LD_VAR 0 3
41315: PPUSH
41316: CALL_OW 3
41320: ST_TO_ADDR
41321: GO 41298
41323: POP
41324: POP
// end ;
41325: LD_VAR 0 3
41329: RET
// export function ComExit ( unit ) ; var tmp ; begin
41330: LD_INT 0
41332: PPUSH
41333: PPUSH
// if not IsInUnit ( unit ) then
41334: LD_VAR 0 1
41338: PPUSH
41339: CALL_OW 310
41343: NOT
41344: IFFALSE 41348
// exit ;
41346: GO 41408
// tmp := IsInUnit ( unit ) ;
41348: LD_ADDR_VAR 0 3
41352: PUSH
41353: LD_VAR 0 1
41357: PPUSH
41358: CALL_OW 310
41362: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41363: LD_VAR 0 3
41367: PPUSH
41368: CALL_OW 247
41372: PUSH
41373: LD_INT 2
41375: EQUAL
41376: IFFALSE 41389
// ComExitVehicle ( unit ) else
41378: LD_VAR 0 1
41382: PPUSH
41383: CALL_OW 121
41387: GO 41398
// ComExitBuilding ( unit ) ;
41389: LD_VAR 0 1
41393: PPUSH
41394: CALL_OW 122
// result := tmp ;
41398: LD_ADDR_VAR 0 2
41402: PUSH
41403: LD_VAR 0 3
41407: ST_TO_ADDR
// end ;
41408: LD_VAR 0 2
41412: RET
// export function ComExitAll ( units ) ; var i ; begin
41413: LD_INT 0
41415: PPUSH
41416: PPUSH
// if not units then
41417: LD_VAR 0 1
41421: NOT
41422: IFFALSE 41426
// exit ;
41424: GO 41452
// for i in units do
41426: LD_ADDR_VAR 0 3
41430: PUSH
41431: LD_VAR 0 1
41435: PUSH
41436: FOR_IN
41437: IFFALSE 41450
// ComExit ( i ) ;
41439: LD_VAR 0 3
41443: PPUSH
41444: CALL 41330 0 1
41448: GO 41436
41450: POP
41451: POP
// end ;
41452: LD_VAR 0 2
41456: RET
// export function ResetHc ; begin
41457: LD_INT 0
41459: PPUSH
// InitHc ;
41460: CALL_OW 19
// hc_importance := 0 ;
41464: LD_ADDR_OWVAR 32
41468: PUSH
41469: LD_INT 0
41471: ST_TO_ADDR
// end ;
41472: LD_VAR 0 1
41476: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41477: LD_INT 0
41479: PPUSH
41480: PPUSH
41481: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41482: LD_ADDR_VAR 0 6
41486: PUSH
41487: LD_VAR 0 1
41491: PUSH
41492: LD_VAR 0 3
41496: PLUS
41497: PUSH
41498: LD_INT 2
41500: DIV
41501: ST_TO_ADDR
// if _x < 0 then
41502: LD_VAR 0 6
41506: PUSH
41507: LD_INT 0
41509: LESS
41510: IFFALSE 41527
// _x := _x * - 1 ;
41512: LD_ADDR_VAR 0 6
41516: PUSH
41517: LD_VAR 0 6
41521: PUSH
41522: LD_INT 1
41524: NEG
41525: MUL
41526: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41527: LD_ADDR_VAR 0 7
41531: PUSH
41532: LD_VAR 0 2
41536: PUSH
41537: LD_VAR 0 4
41541: PLUS
41542: PUSH
41543: LD_INT 2
41545: DIV
41546: ST_TO_ADDR
// if _y < 0 then
41547: LD_VAR 0 7
41551: PUSH
41552: LD_INT 0
41554: LESS
41555: IFFALSE 41572
// _y := _y * - 1 ;
41557: LD_ADDR_VAR 0 7
41561: PUSH
41562: LD_VAR 0 7
41566: PUSH
41567: LD_INT 1
41569: NEG
41570: MUL
41571: ST_TO_ADDR
// result := [ _x , _y ] ;
41572: LD_ADDR_VAR 0 5
41576: PUSH
41577: LD_VAR 0 6
41581: PUSH
41582: LD_VAR 0 7
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: ST_TO_ADDR
// end ;
41591: LD_VAR 0 5
41595: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41596: LD_INT 0
41598: PPUSH
41599: PPUSH
41600: PPUSH
41601: PPUSH
// task := GetTaskList ( unit ) ;
41602: LD_ADDR_VAR 0 7
41606: PUSH
41607: LD_VAR 0 1
41611: PPUSH
41612: CALL_OW 437
41616: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41617: LD_VAR 0 7
41621: NOT
41622: IFFALSE 41641
41624: PUSH
41625: LD_VAR 0 1
41629: PPUSH
41630: LD_VAR 0 2
41634: PPUSH
41635: CALL_OW 308
41639: NOT
41640: AND
41641: IFFALSE 41645
// exit ;
41643: GO 41763
// if IsInArea ( unit , area ) then
41645: LD_VAR 0 1
41649: PPUSH
41650: LD_VAR 0 2
41654: PPUSH
41655: CALL_OW 308
41659: IFFALSE 41677
// begin ComMoveToArea ( unit , goAway ) ;
41661: LD_VAR 0 1
41665: PPUSH
41666: LD_VAR 0 3
41670: PPUSH
41671: CALL_OW 113
// exit ;
41675: GO 41763
// end ; if task [ 1 ] [ 1 ] <> M then
41677: LD_VAR 0 7
41681: PUSH
41682: LD_INT 1
41684: ARRAY
41685: PUSH
41686: LD_INT 1
41688: ARRAY
41689: PUSH
41690: LD_STRING M
41692: NONEQUAL
41693: IFFALSE 41697
// exit ;
41695: GO 41763
// x := task [ 1 ] [ 2 ] ;
41697: LD_ADDR_VAR 0 5
41701: PUSH
41702: LD_VAR 0 7
41706: PUSH
41707: LD_INT 1
41709: ARRAY
41710: PUSH
41711: LD_INT 2
41713: ARRAY
41714: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41715: LD_ADDR_VAR 0 6
41719: PUSH
41720: LD_VAR 0 7
41724: PUSH
41725: LD_INT 1
41727: ARRAY
41728: PUSH
41729: LD_INT 3
41731: ARRAY
41732: ST_TO_ADDR
// if InArea ( x , y , area ) then
41733: LD_VAR 0 5
41737: PPUSH
41738: LD_VAR 0 6
41742: PPUSH
41743: LD_VAR 0 2
41747: PPUSH
41748: CALL_OW 309
41752: IFFALSE 41763
// ComStop ( unit ) ;
41754: LD_VAR 0 1
41758: PPUSH
41759: CALL_OW 141
// end ;
41763: LD_VAR 0 4
41767: RET
// export function Abs ( value ) ; begin
41768: LD_INT 0
41770: PPUSH
// result := value ;
41771: LD_ADDR_VAR 0 2
41775: PUSH
41776: LD_VAR 0 1
41780: ST_TO_ADDR
// if value < 0 then
41781: LD_VAR 0 1
41785: PUSH
41786: LD_INT 0
41788: LESS
41789: IFFALSE 41806
// result := value * - 1 ;
41791: LD_ADDR_VAR 0 2
41795: PUSH
41796: LD_VAR 0 1
41800: PUSH
41801: LD_INT 1
41803: NEG
41804: MUL
41805: ST_TO_ADDR
// end ;
41806: LD_VAR 0 2
41810: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41811: LD_INT 0
41813: PPUSH
41814: PPUSH
41815: PPUSH
41816: PPUSH
41817: PPUSH
41818: PPUSH
41819: PPUSH
41820: PPUSH
// if not unit or not building then
41821: LD_VAR 0 1
41825: NOT
41826: IFTRUE 41835
41828: PUSH
41829: LD_VAR 0 2
41833: NOT
41834: OR
41835: IFFALSE 41839
// exit ;
41837: GO 42067
// x := GetX ( building ) ;
41839: LD_ADDR_VAR 0 4
41843: PUSH
41844: LD_VAR 0 2
41848: PPUSH
41849: CALL_OW 250
41853: ST_TO_ADDR
// y := GetY ( building ) ;
41854: LD_ADDR_VAR 0 6
41858: PUSH
41859: LD_VAR 0 2
41863: PPUSH
41864: CALL_OW 251
41868: ST_TO_ADDR
// d := GetDir ( building ) ;
41869: LD_ADDR_VAR 0 8
41873: PUSH
41874: LD_VAR 0 2
41878: PPUSH
41879: CALL_OW 254
41883: ST_TO_ADDR
// r := 4 ;
41884: LD_ADDR_VAR 0 9
41888: PUSH
41889: LD_INT 4
41891: ST_TO_ADDR
// for i := 1 to 5 do
41892: LD_ADDR_VAR 0 10
41896: PUSH
41897: DOUBLE
41898: LD_INT 1
41900: DEC
41901: ST_TO_ADDR
41902: LD_INT 5
41904: PUSH
41905: FOR_TO
41906: IFFALSE 42065
// begin _x := ShiftX ( x , d , r + i ) ;
41908: LD_ADDR_VAR 0 5
41912: PUSH
41913: LD_VAR 0 4
41917: PPUSH
41918: LD_VAR 0 8
41922: PPUSH
41923: LD_VAR 0 9
41927: PUSH
41928: LD_VAR 0 10
41932: PLUS
41933: PPUSH
41934: CALL_OW 272
41938: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41939: LD_ADDR_VAR 0 7
41943: PUSH
41944: LD_VAR 0 6
41948: PPUSH
41949: LD_VAR 0 8
41953: PPUSH
41954: LD_VAR 0 9
41958: PUSH
41959: LD_VAR 0 10
41963: PLUS
41964: PPUSH
41965: CALL_OW 273
41969: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41970: LD_VAR 0 5
41974: PPUSH
41975: LD_VAR 0 7
41979: PPUSH
41980: CALL_OW 488
41984: IFFALSE 42019
41986: PUSH
41987: LD_VAR 0 5
41991: PPUSH
41992: LD_VAR 0 7
41996: PPUSH
41997: CALL_OW 428
42001: PPUSH
42002: CALL_OW 247
42006: PUSH
42007: LD_INT 3
42009: PUSH
42010: LD_INT 2
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: IN
42017: NOT
42018: AND
42019: IFFALSE 42063
// begin ComMoveXY ( unit , _x , _y ) ;
42021: LD_VAR 0 1
42025: PPUSH
42026: LD_VAR 0 5
42030: PPUSH
42031: LD_VAR 0 7
42035: PPUSH
42036: CALL_OW 111
// result := [ _x , _y ] ;
42040: LD_ADDR_VAR 0 3
42044: PUSH
42045: LD_VAR 0 5
42049: PUSH
42050: LD_VAR 0 7
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: ST_TO_ADDR
// exit ;
42059: POP
42060: POP
42061: GO 42067
// end ; end ;
42063: GO 41905
42065: POP
42066: POP
// end ;
42067: LD_VAR 0 3
42071: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42072: LD_INT 0
42074: PPUSH
42075: PPUSH
42076: PPUSH
// result := 0 ;
42077: LD_ADDR_VAR 0 3
42081: PUSH
42082: LD_INT 0
42084: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42085: LD_VAR 0 1
42089: PUSH
42090: LD_INT 0
42092: LESS
42093: IFTRUE 42105
42095: PUSH
42096: LD_VAR 0 1
42100: PUSH
42101: LD_INT 8
42103: GREATER
42104: OR
42105: IFTRUE 42117
42107: PUSH
42108: LD_VAR 0 2
42112: PUSH
42113: LD_INT 0
42115: LESS
42116: OR
42117: IFTRUE 42129
42119: PUSH
42120: LD_VAR 0 2
42124: PUSH
42125: LD_INT 8
42127: GREATER
42128: OR
42129: IFFALSE 42133
// exit ;
42131: GO 42208
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42133: LD_ADDR_VAR 0 4
42137: PUSH
42138: LD_INT 22
42140: PUSH
42141: LD_VAR 0 2
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PPUSH
42150: CALL_OW 69
42154: PUSH
42155: FOR_IN
42156: IFFALSE 42206
// begin un := UnitShoot ( i ) ;
42158: LD_ADDR_VAR 0 5
42162: PUSH
42163: LD_VAR 0 4
42167: PPUSH
42168: CALL_OW 504
42172: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42173: LD_VAR 0 5
42177: PPUSH
42178: CALL_OW 255
42182: PUSH
42183: LD_VAR 0 1
42187: EQUAL
42188: IFFALSE 42204
// begin result := un ;
42190: LD_ADDR_VAR 0 3
42194: PUSH
42195: LD_VAR 0 5
42199: ST_TO_ADDR
// exit ;
42200: POP
42201: POP
42202: GO 42208
// end ; end ;
42204: GO 42155
42206: POP
42207: POP
// end ;
42208: LD_VAR 0 3
42212: RET
// export function GetCargoBay ( units ) ; begin
42213: LD_INT 0
42215: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42216: LD_ADDR_VAR 0 2
42220: PUSH
42221: LD_VAR 0 1
42225: PPUSH
42226: LD_INT 2
42228: PUSH
42229: LD_INT 34
42231: PUSH
42232: LD_INT 12
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 34
42241: PUSH
42242: LD_INT 51
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 34
42251: PUSH
42252: LD_INT 32
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 34
42261: PUSH
42262: LD_INT 89
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: PPUSH
42276: CALL_OW 72
42280: ST_TO_ADDR
// end ;
42281: LD_VAR 0 2
42285: RET
// export function Negate ( value ) ; begin
42286: LD_INT 0
42288: PPUSH
// result := not value ;
42289: LD_ADDR_VAR 0 2
42293: PUSH
42294: LD_VAR 0 1
42298: NOT
42299: ST_TO_ADDR
// end ;
42300: LD_VAR 0 2
42304: RET
// export function Inc ( value ) ; begin
42305: LD_INT 0
42307: PPUSH
// result := value + 1 ;
42308: LD_ADDR_VAR 0 2
42312: PUSH
42313: LD_VAR 0 1
42317: PUSH
42318: LD_INT 1
42320: PLUS
42321: ST_TO_ADDR
// end ;
42322: LD_VAR 0 2
42326: RET
// export function Dec ( value ) ; begin
42327: LD_INT 0
42329: PPUSH
// result := value - 1 ;
42330: LD_ADDR_VAR 0 2
42334: PUSH
42335: LD_VAR 0 1
42339: PUSH
42340: LD_INT 1
42342: MINUS
42343: ST_TO_ADDR
// end ;
42344: LD_VAR 0 2
42348: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42349: LD_INT 0
42351: PPUSH
42352: PPUSH
42353: PPUSH
42354: PPUSH
42355: PPUSH
42356: PPUSH
42357: PPUSH
42358: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42359: LD_VAR 0 1
42363: PPUSH
42364: LD_VAR 0 2
42368: PPUSH
42369: CALL_OW 488
42373: NOT
42374: IFTRUE 42393
42376: PUSH
42377: LD_VAR 0 3
42381: PPUSH
42382: LD_VAR 0 4
42386: PPUSH
42387: CALL_OW 488
42391: NOT
42392: OR
42393: IFFALSE 42406
// begin result := - 1 ;
42395: LD_ADDR_VAR 0 5
42399: PUSH
42400: LD_INT 1
42402: NEG
42403: ST_TO_ADDR
// exit ;
42404: GO 42641
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42406: LD_ADDR_VAR 0 12
42410: PUSH
42411: LD_VAR 0 1
42415: PPUSH
42416: LD_VAR 0 2
42420: PPUSH
42421: LD_VAR 0 3
42425: PPUSH
42426: LD_VAR 0 4
42430: PPUSH
42431: CALL 41477 0 4
42435: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42436: LD_ADDR_VAR 0 11
42440: PUSH
42441: LD_VAR 0 1
42445: PPUSH
42446: LD_VAR 0 2
42450: PPUSH
42451: LD_VAR 0 12
42455: PUSH
42456: LD_INT 1
42458: ARRAY
42459: PPUSH
42460: LD_VAR 0 12
42464: PUSH
42465: LD_INT 2
42467: ARRAY
42468: PPUSH
42469: CALL_OW 298
42473: ST_TO_ADDR
// distance := 9999 ;
42474: LD_ADDR_VAR 0 10
42478: PUSH
42479: LD_INT 9999
42481: ST_TO_ADDR
// for i := 0 to 5 do
42482: LD_ADDR_VAR 0 6
42486: PUSH
42487: DOUBLE
42488: LD_INT 0
42490: DEC
42491: ST_TO_ADDR
42492: LD_INT 5
42494: PUSH
42495: FOR_TO
42496: IFFALSE 42639
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42498: LD_ADDR_VAR 0 7
42502: PUSH
42503: LD_VAR 0 1
42507: PPUSH
42508: LD_VAR 0 6
42512: PPUSH
42513: LD_VAR 0 11
42517: PPUSH
42518: CALL_OW 272
42522: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42523: LD_ADDR_VAR 0 8
42527: PUSH
42528: LD_VAR 0 2
42532: PPUSH
42533: LD_VAR 0 6
42537: PPUSH
42538: LD_VAR 0 11
42542: PPUSH
42543: CALL_OW 273
42547: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42548: LD_VAR 0 7
42552: PPUSH
42553: LD_VAR 0 8
42557: PPUSH
42558: CALL_OW 488
42562: NOT
42563: IFFALSE 42567
// continue ;
42565: GO 42495
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42567: LD_ADDR_VAR 0 9
42571: PUSH
42572: LD_VAR 0 12
42576: PUSH
42577: LD_INT 1
42579: ARRAY
42580: PPUSH
42581: LD_VAR 0 12
42585: PUSH
42586: LD_INT 2
42588: ARRAY
42589: PPUSH
42590: LD_VAR 0 7
42594: PPUSH
42595: LD_VAR 0 8
42599: PPUSH
42600: CALL_OW 298
42604: ST_TO_ADDR
// if tmp < distance then
42605: LD_VAR 0 9
42609: PUSH
42610: LD_VAR 0 10
42614: LESS
42615: IFFALSE 42637
// begin result := i ;
42617: LD_ADDR_VAR 0 5
42621: PUSH
42622: LD_VAR 0 6
42626: ST_TO_ADDR
// distance := tmp ;
42627: LD_ADDR_VAR 0 10
42631: PUSH
42632: LD_VAR 0 9
42636: ST_TO_ADDR
// end ; end ;
42637: GO 42495
42639: POP
42640: POP
// end ;
42641: LD_VAR 0 5
42645: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42646: LD_INT 0
42648: PPUSH
42649: PPUSH
// if not driver or not IsInUnit ( driver ) then
42650: LD_VAR 0 1
42654: NOT
42655: IFTRUE 42669
42657: PUSH
42658: LD_VAR 0 1
42662: PPUSH
42663: CALL_OW 310
42667: NOT
42668: OR
42669: IFFALSE 42673
// exit ;
42671: GO 42763
// vehicle := IsInUnit ( driver ) ;
42673: LD_ADDR_VAR 0 3
42677: PUSH
42678: LD_VAR 0 1
42682: PPUSH
42683: CALL_OW 310
42687: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42688: LD_VAR 0 1
42692: PPUSH
42693: LD_STRING \
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: LD_INT 0
42701: PUSH
42702: LD_INT 0
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: LD_INT 0
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: PUSH
42723: LD_STRING E
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: LD_VAR 0 3
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: LD_INT 0
42742: PUSH
42743: LD_INT 0
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PPUSH
42759: CALL_OW 446
// end ;
42763: LD_VAR 0 2
42767: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42768: LD_INT 0
42770: PPUSH
42771: PPUSH
// if not driver or not IsInUnit ( driver ) then
42772: LD_VAR 0 1
42776: NOT
42777: IFTRUE 42791
42779: PUSH
42780: LD_VAR 0 1
42784: PPUSH
42785: CALL_OW 310
42789: NOT
42790: OR
42791: IFFALSE 42795
// exit ;
42793: GO 42885
// vehicle := IsInUnit ( driver ) ;
42795: LD_ADDR_VAR 0 3
42799: PUSH
42800: LD_VAR 0 1
42804: PPUSH
42805: CALL_OW 310
42809: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42810: LD_VAR 0 1
42814: PPUSH
42815: LD_STRING \
42817: PUSH
42818: LD_INT 0
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: LD_INT 0
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: PUSH
42845: LD_STRING E
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: LD_VAR 0 3
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: LD_INT 0
42864: PUSH
42865: LD_INT 0
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PPUSH
42881: CALL_OW 447
// end ;
42885: LD_VAR 0 2
42889: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42890: LD_INT 0
42892: PPUSH
42893: PPUSH
42894: PPUSH
// tmp := [ ] ;
42895: LD_ADDR_VAR 0 5
42899: PUSH
42900: EMPTY
42901: ST_TO_ADDR
// for i in units do
42902: LD_ADDR_VAR 0 4
42906: PUSH
42907: LD_VAR 0 1
42911: PUSH
42912: FOR_IN
42913: IFFALSE 42951
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42915: LD_ADDR_VAR 0 5
42919: PUSH
42920: LD_VAR 0 5
42924: PPUSH
42925: LD_VAR 0 5
42929: PUSH
42930: LD_INT 1
42932: PLUS
42933: PPUSH
42934: LD_VAR 0 4
42938: PPUSH
42939: CALL_OW 256
42943: PPUSH
42944: CALL_OW 2
42948: ST_TO_ADDR
42949: GO 42912
42951: POP
42952: POP
// if not tmp then
42953: LD_VAR 0 5
42957: NOT
42958: IFFALSE 42962
// exit ;
42960: GO 43010
// if asc then
42962: LD_VAR 0 2
42966: IFFALSE 42990
// result := SortListByListAsc ( units , tmp ) else
42968: LD_ADDR_VAR 0 3
42972: PUSH
42973: LD_VAR 0 1
42977: PPUSH
42978: LD_VAR 0 5
42982: PPUSH
42983: CALL_OW 76
42987: ST_TO_ADDR
42988: GO 43010
// result := SortListByListDesc ( units , tmp ) ;
42990: LD_ADDR_VAR 0 3
42994: PUSH
42995: LD_VAR 0 1
42999: PPUSH
43000: LD_VAR 0 5
43004: PPUSH
43005: CALL_OW 77
43009: ST_TO_ADDR
// end ;
43010: LD_VAR 0 3
43014: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43015: LD_INT 0
43017: PPUSH
43018: PPUSH
// task := GetTaskList ( mech ) ;
43019: LD_ADDR_VAR 0 4
43023: PUSH
43024: LD_VAR 0 1
43028: PPUSH
43029: CALL_OW 437
43033: ST_TO_ADDR
// if not task then
43034: LD_VAR 0 4
43038: NOT
43039: IFFALSE 43043
// exit ;
43041: GO 43087
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43043: LD_ADDR_VAR 0 3
43047: PUSH
43048: LD_VAR 0 4
43052: PUSH
43053: LD_INT 1
43055: ARRAY
43056: PUSH
43057: LD_INT 1
43059: ARRAY
43060: PUSH
43061: LD_STRING r
43063: EQUAL
43064: IFFALSE 43086
43066: PUSH
43067: LD_VAR 0 4
43071: PUSH
43072: LD_INT 1
43074: ARRAY
43075: PUSH
43076: LD_INT 4
43078: ARRAY
43079: PUSH
43080: LD_VAR 0 2
43084: EQUAL
43085: AND
43086: ST_TO_ADDR
// end ;
43087: LD_VAR 0 3
43091: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43092: LD_INT 0
43094: PPUSH
// SetDir ( unit , d ) ;
43095: LD_VAR 0 1
43099: PPUSH
43100: LD_VAR 0 4
43104: PPUSH
43105: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43109: LD_ADDR_VAR 0 6
43113: PUSH
43114: LD_VAR 0 1
43118: PPUSH
43119: LD_VAR 0 2
43123: PPUSH
43124: LD_VAR 0 3
43128: PPUSH
43129: LD_VAR 0 5
43133: PPUSH
43134: CALL_OW 48
43138: ST_TO_ADDR
// end ;
43139: LD_VAR 0 6
43143: RET
// export function ToNaturalNumber ( number ) ; begin
43144: LD_INT 0
43146: PPUSH
// result := number div 1 ;
43147: LD_ADDR_VAR 0 2
43151: PUSH
43152: LD_VAR 0 1
43156: PUSH
43157: LD_INT 1
43159: DIV
43160: ST_TO_ADDR
// if number < 0 then
43161: LD_VAR 0 1
43165: PUSH
43166: LD_INT 0
43168: LESS
43169: IFFALSE 43179
// result := 0 ;
43171: LD_ADDR_VAR 0 2
43175: PUSH
43176: LD_INT 0
43178: ST_TO_ADDR
// end ;
43179: LD_VAR 0 2
43183: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
43184: LD_INT 0
43186: PPUSH
43187: PPUSH
43188: PPUSH
// if not buildings then
43189: LD_VAR 0 1
43193: NOT
43194: IFFALSE 43198
// exit ;
43196: GO 43313
// tmp := [ ] ;
43198: LD_ADDR_VAR 0 5
43202: PUSH
43203: EMPTY
43204: ST_TO_ADDR
// for b in buildings do
43205: LD_ADDR_VAR 0 4
43209: PUSH
43210: LD_VAR 0 1
43214: PUSH
43215: FOR_IN
43216: IFFALSE 43254
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
43218: LD_ADDR_VAR 0 5
43222: PUSH
43223: LD_VAR 0 5
43227: PPUSH
43228: LD_VAR 0 5
43232: PUSH
43233: LD_INT 1
43235: PLUS
43236: PPUSH
43237: LD_VAR 0 4
43241: PPUSH
43242: CALL_OW 266
43246: PPUSH
43247: CALL_OW 1
43251: ST_TO_ADDR
43252: GO 43215
43254: POP
43255: POP
// if not tmp then
43256: LD_VAR 0 5
43260: NOT
43261: IFFALSE 43265
// exit ;
43263: GO 43313
// if asc then
43265: LD_VAR 0 2
43269: IFFALSE 43293
// result := SortListByListAsc ( buildings , tmp ) else
43271: LD_ADDR_VAR 0 3
43275: PUSH
43276: LD_VAR 0 1
43280: PPUSH
43281: LD_VAR 0 5
43285: PPUSH
43286: CALL_OW 76
43290: ST_TO_ADDR
43291: GO 43313
// result := SortListByListDesc ( buildings , tmp ) ;
43293: LD_ADDR_VAR 0 3
43297: PUSH
43298: LD_VAR 0 1
43302: PPUSH
43303: LD_VAR 0 5
43307: PPUSH
43308: CALL_OW 77
43312: ST_TO_ADDR
// end ;
43313: LD_VAR 0 3
43317: RET
// export function SortByClass ( units , class ) ; var un ; begin
43318: LD_INT 0
43320: PPUSH
43321: PPUSH
// if not units or not class then
43322: LD_VAR 0 1
43326: NOT
43327: IFTRUE 43336
43329: PUSH
43330: LD_VAR 0 2
43334: NOT
43335: OR
43336: IFFALSE 43340
// exit ;
43338: GO 43435
// result := [ ] ;
43340: LD_ADDR_VAR 0 3
43344: PUSH
43345: EMPTY
43346: ST_TO_ADDR
// for un in units do
43347: LD_ADDR_VAR 0 4
43351: PUSH
43352: LD_VAR 0 1
43356: PUSH
43357: FOR_IN
43358: IFFALSE 43433
// if GetClass ( un ) = class then
43360: LD_VAR 0 4
43364: PPUSH
43365: CALL_OW 257
43369: PUSH
43370: LD_VAR 0 2
43374: EQUAL
43375: IFFALSE 43402
// result := Insert ( result , 1 , un ) else
43377: LD_ADDR_VAR 0 3
43381: PUSH
43382: LD_VAR 0 3
43386: PPUSH
43387: LD_INT 1
43389: PPUSH
43390: LD_VAR 0 4
43394: PPUSH
43395: CALL_OW 2
43399: ST_TO_ADDR
43400: GO 43431
// result := Replace ( result , result + 1 , un ) ;
43402: LD_ADDR_VAR 0 3
43406: PUSH
43407: LD_VAR 0 3
43411: PPUSH
43412: LD_VAR 0 3
43416: PUSH
43417: LD_INT 1
43419: PLUS
43420: PPUSH
43421: LD_VAR 0 4
43425: PPUSH
43426: CALL_OW 1
43430: ST_TO_ADDR
43431: GO 43357
43433: POP
43434: POP
// end ;
43435: LD_VAR 0 3
43439: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43440: LD_INT 0
43442: PPUSH
43443: PPUSH
43444: PPUSH
43445: PPUSH
43446: PPUSH
43447: PPUSH
43448: PPUSH
// result := [ ] ;
43449: LD_ADDR_VAR 0 4
43453: PUSH
43454: EMPTY
43455: ST_TO_ADDR
// if x - r < 0 then
43456: LD_VAR 0 1
43460: PUSH
43461: LD_VAR 0 3
43465: MINUS
43466: PUSH
43467: LD_INT 0
43469: LESS
43470: IFFALSE 43482
// min_x := 0 else
43472: LD_ADDR_VAR 0 8
43476: PUSH
43477: LD_INT 0
43479: ST_TO_ADDR
43480: GO 43498
// min_x := x - r ;
43482: LD_ADDR_VAR 0 8
43486: PUSH
43487: LD_VAR 0 1
43491: PUSH
43492: LD_VAR 0 3
43496: MINUS
43497: ST_TO_ADDR
// if y - r < 0 then
43498: LD_VAR 0 2
43502: PUSH
43503: LD_VAR 0 3
43507: MINUS
43508: PUSH
43509: LD_INT 0
43511: LESS
43512: IFFALSE 43524
// min_y := 0 else
43514: LD_ADDR_VAR 0 7
43518: PUSH
43519: LD_INT 0
43521: ST_TO_ADDR
43522: GO 43540
// min_y := y - r ;
43524: LD_ADDR_VAR 0 7
43528: PUSH
43529: LD_VAR 0 2
43533: PUSH
43534: LD_VAR 0 3
43538: MINUS
43539: ST_TO_ADDR
// max_x := x + r ;
43540: LD_ADDR_VAR 0 9
43544: PUSH
43545: LD_VAR 0 1
43549: PUSH
43550: LD_VAR 0 3
43554: PLUS
43555: ST_TO_ADDR
// max_y := y + r ;
43556: LD_ADDR_VAR 0 10
43560: PUSH
43561: LD_VAR 0 2
43565: PUSH
43566: LD_VAR 0 3
43570: PLUS
43571: ST_TO_ADDR
// for _x = min_x to max_x do
43572: LD_ADDR_VAR 0 5
43576: PUSH
43577: DOUBLE
43578: LD_VAR 0 8
43582: DEC
43583: ST_TO_ADDR
43584: LD_VAR 0 9
43588: PUSH
43589: FOR_TO
43590: IFFALSE 43691
// for _y = min_y to max_y do
43592: LD_ADDR_VAR 0 6
43596: PUSH
43597: DOUBLE
43598: LD_VAR 0 7
43602: DEC
43603: ST_TO_ADDR
43604: LD_VAR 0 10
43608: PUSH
43609: FOR_TO
43610: IFFALSE 43687
// begin if not ValidHex ( _x , _y ) then
43612: LD_VAR 0 5
43616: PPUSH
43617: LD_VAR 0 6
43621: PPUSH
43622: CALL_OW 488
43626: NOT
43627: IFFALSE 43631
// continue ;
43629: GO 43609
// if GetResourceTypeXY ( _x , _y ) then
43631: LD_VAR 0 5
43635: PPUSH
43636: LD_VAR 0 6
43640: PPUSH
43641: CALL_OW 283
43645: IFFALSE 43685
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43647: LD_ADDR_VAR 0 4
43651: PUSH
43652: LD_VAR 0 4
43656: PPUSH
43657: LD_VAR 0 4
43661: PUSH
43662: LD_INT 1
43664: PLUS
43665: PPUSH
43666: LD_VAR 0 5
43670: PUSH
43671: LD_VAR 0 6
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PPUSH
43680: CALL_OW 1
43684: ST_TO_ADDR
// end ;
43685: GO 43609
43687: POP
43688: POP
43689: GO 43589
43691: POP
43692: POP
// end ;
43693: LD_VAR 0 4
43697: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43698: LD_INT 0
43700: PPUSH
43701: PPUSH
43702: PPUSH
43703: PPUSH
43704: PPUSH
43705: PPUSH
43706: PPUSH
43707: PPUSH
// if not units then
43708: LD_VAR 0 1
43712: NOT
43713: IFFALSE 43717
// exit ;
43715: GO 44249
// result := UnitFilter ( units , [ f_ok ] ) ;
43717: LD_ADDR_VAR 0 3
43721: PUSH
43722: LD_VAR 0 1
43726: PPUSH
43727: LD_INT 50
43729: PUSH
43730: EMPTY
43731: LIST
43732: PPUSH
43733: CALL_OW 72
43737: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43738: LD_ADDR_VAR 0 8
43742: PUSH
43743: LD_VAR 0 1
43747: PUSH
43748: LD_INT 1
43750: ARRAY
43751: PPUSH
43752: CALL_OW 255
43756: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43757: LD_ADDR_VAR 0 10
43761: PUSH
43762: LD_INT 29
43764: PUSH
43765: LD_INT 91
43767: PUSH
43768: LD_INT 49
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: LIST
43775: ST_TO_ADDR
// if not result then
43776: LD_VAR 0 3
43780: NOT
43781: IFFALSE 43785
// exit ;
43783: GO 44249
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43785: LD_ADDR_VAR 0 5
43789: PUSH
43790: LD_INT 81
43792: PUSH
43793: LD_VAR 0 8
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PPUSH
43802: CALL_OW 69
43806: ST_TO_ADDR
// for i in result do
43807: LD_ADDR_VAR 0 4
43811: PUSH
43812: LD_VAR 0 3
43816: PUSH
43817: FOR_IN
43818: IFFALSE 44247
// begin tag := GetTag ( i ) + 1 ;
43820: LD_ADDR_VAR 0 9
43824: PUSH
43825: LD_VAR 0 4
43829: PPUSH
43830: CALL_OW 110
43834: PUSH
43835: LD_INT 1
43837: PLUS
43838: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43839: LD_ADDR_VAR 0 7
43843: PUSH
43844: LD_VAR 0 4
43848: PPUSH
43849: CALL_OW 250
43853: PPUSH
43854: LD_VAR 0 4
43858: PPUSH
43859: CALL_OW 251
43863: PPUSH
43864: LD_INT 4
43866: PPUSH
43867: CALL 43440 0 3
43871: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43872: LD_VAR 0 4
43876: PPUSH
43877: CALL_OW 247
43881: PUSH
43882: LD_INT 2
43884: EQUAL
43885: IFFALSE 43897
43887: PUSH
43888: LD_VAR 0 7
43892: PUSH
43893: LD_INT 2
43895: GREATER
43896: AND
43897: IFFALSE 43917
43899: PUSH
43900: LD_VAR 0 4
43904: PPUSH
43905: CALL_OW 264
43909: PUSH
43910: LD_VAR 0 10
43914: IN
43915: NOT
43916: AND
43917: IFFALSE 43956
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43919: LD_VAR 0 4
43923: PPUSH
43924: LD_VAR 0 7
43928: PUSH
43929: LD_INT 1
43931: ARRAY
43932: PUSH
43933: LD_INT 1
43935: ARRAY
43936: PPUSH
43937: LD_VAR 0 7
43941: PUSH
43942: LD_INT 1
43944: ARRAY
43945: PUSH
43946: LD_INT 2
43948: ARRAY
43949: PPUSH
43950: CALL_OW 116
43954: GO 44245
// if path > tag then
43956: LD_VAR 0 2
43960: PUSH
43961: LD_VAR 0 9
43965: GREATER
43966: IFFALSE 44174
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43968: LD_ADDR_VAR 0 6
43972: PUSH
43973: LD_VAR 0 5
43977: PPUSH
43978: LD_INT 91
43980: PUSH
43981: LD_VAR 0 4
43985: PUSH
43986: LD_INT 8
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: LIST
43993: PPUSH
43994: CALL_OW 72
43998: ST_TO_ADDR
// if nearEnemy then
43999: LD_VAR 0 6
44003: IFFALSE 44072
// begin if GetWeapon ( i ) = ru_time_lapser then
44005: LD_VAR 0 4
44009: PPUSH
44010: CALL_OW 264
44014: PUSH
44015: LD_INT 49
44017: EQUAL
44018: IFFALSE 44046
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44020: LD_VAR 0 4
44024: PPUSH
44025: LD_VAR 0 6
44029: PPUSH
44030: LD_VAR 0 4
44034: PPUSH
44035: CALL_OW 74
44039: PPUSH
44040: CALL_OW 112
44044: GO 44070
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44046: LD_VAR 0 4
44050: PPUSH
44051: LD_VAR 0 6
44055: PPUSH
44056: LD_VAR 0 4
44060: PPUSH
44061: CALL_OW 74
44065: PPUSH
44066: CALL 45330 0 2
// end else
44070: GO 44172
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44072: LD_VAR 0 4
44076: PPUSH
44077: LD_VAR 0 2
44081: PUSH
44082: LD_VAR 0 9
44086: ARRAY
44087: PUSH
44088: LD_INT 1
44090: ARRAY
44091: PPUSH
44092: LD_VAR 0 2
44096: PUSH
44097: LD_VAR 0 9
44101: ARRAY
44102: PUSH
44103: LD_INT 2
44105: ARRAY
44106: PPUSH
44107: CALL_OW 297
44111: PUSH
44112: LD_INT 6
44114: GREATER
44115: IFFALSE 44158
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44117: LD_VAR 0 4
44121: PPUSH
44122: LD_VAR 0 2
44126: PUSH
44127: LD_VAR 0 9
44131: ARRAY
44132: PUSH
44133: LD_INT 1
44135: ARRAY
44136: PPUSH
44137: LD_VAR 0 2
44141: PUSH
44142: LD_VAR 0 9
44146: ARRAY
44147: PUSH
44148: LD_INT 2
44150: ARRAY
44151: PPUSH
44152: CALL_OW 114
44156: GO 44172
// SetTag ( i , tag ) ;
44158: LD_VAR 0 4
44162: PPUSH
44163: LD_VAR 0 9
44167: PPUSH
44168: CALL_OW 109
// end else
44172: GO 44245
// if enemy then
44174: LD_VAR 0 5
44178: IFFALSE 44245
// begin if GetWeapon ( i ) = ru_time_lapser then
44180: LD_VAR 0 4
44184: PPUSH
44185: CALL_OW 264
44189: PUSH
44190: LD_INT 49
44192: EQUAL
44193: IFFALSE 44221
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44195: LD_VAR 0 4
44199: PPUSH
44200: LD_VAR 0 5
44204: PPUSH
44205: LD_VAR 0 4
44209: PPUSH
44210: CALL_OW 74
44214: PPUSH
44215: CALL_OW 112
44219: GO 44245
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44221: LD_VAR 0 4
44225: PPUSH
44226: LD_VAR 0 5
44230: PPUSH
44231: LD_VAR 0 4
44235: PPUSH
44236: CALL_OW 74
44240: PPUSH
44241: CALL 45330 0 2
// end ; end ;
44245: GO 43817
44247: POP
44248: POP
// end ;
44249: LD_VAR 0 3
44253: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44254: LD_INT 0
44256: PPUSH
44257: PPUSH
44258: PPUSH
// if not unit or IsInUnit ( unit ) then
44259: LD_VAR 0 1
44263: NOT
44264: IFTRUE 44277
44266: PUSH
44267: LD_VAR 0 1
44271: PPUSH
44272: CALL_OW 310
44276: OR
44277: IFFALSE 44281
// exit ;
44279: GO 44372
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44281: LD_ADDR_VAR 0 4
44285: PUSH
44286: LD_VAR 0 1
44290: PPUSH
44291: CALL_OW 250
44295: PPUSH
44296: LD_VAR 0 2
44300: PPUSH
44301: LD_INT 1
44303: PPUSH
44304: CALL_OW 272
44308: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44309: LD_ADDR_VAR 0 5
44313: PUSH
44314: LD_VAR 0 1
44318: PPUSH
44319: CALL_OW 251
44323: PPUSH
44324: LD_VAR 0 2
44328: PPUSH
44329: LD_INT 1
44331: PPUSH
44332: CALL_OW 273
44336: ST_TO_ADDR
// if ValidHex ( x , y ) then
44337: LD_VAR 0 4
44341: PPUSH
44342: LD_VAR 0 5
44346: PPUSH
44347: CALL_OW 488
44351: IFFALSE 44372
// ComTurnXY ( unit , x , y ) ;
44353: LD_VAR 0 1
44357: PPUSH
44358: LD_VAR 0 4
44362: PPUSH
44363: LD_VAR 0 5
44367: PPUSH
44368: CALL_OW 118
// end ;
44372: LD_VAR 0 3
44376: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44377: LD_INT 0
44379: PPUSH
44380: PPUSH
// result := false ;
44381: LD_ADDR_VAR 0 3
44385: PUSH
44386: LD_INT 0
44388: ST_TO_ADDR
// if not units then
44389: LD_VAR 0 2
44393: NOT
44394: IFFALSE 44398
// exit ;
44396: GO 44443
// for i in units do
44398: LD_ADDR_VAR 0 4
44402: PUSH
44403: LD_VAR 0 2
44407: PUSH
44408: FOR_IN
44409: IFFALSE 44441
// if See ( side , i ) then
44411: LD_VAR 0 1
44415: PPUSH
44416: LD_VAR 0 4
44420: PPUSH
44421: CALL_OW 292
44425: IFFALSE 44439
// begin result := true ;
44427: LD_ADDR_VAR 0 3
44431: PUSH
44432: LD_INT 1
44434: ST_TO_ADDR
// exit ;
44435: POP
44436: POP
44437: GO 44443
// end ;
44439: GO 44408
44441: POP
44442: POP
// end ;
44443: LD_VAR 0 3
44447: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44448: LD_INT 0
44450: PPUSH
44451: PPUSH
44452: PPUSH
44453: PPUSH
// if not unit or not points then
44454: LD_VAR 0 1
44458: NOT
44459: IFTRUE 44468
44461: PUSH
44462: LD_VAR 0 2
44466: NOT
44467: OR
44468: IFFALSE 44472
// exit ;
44470: GO 44562
// dist := 99999 ;
44472: LD_ADDR_VAR 0 5
44476: PUSH
44477: LD_INT 99999
44479: ST_TO_ADDR
// for i in points do
44480: LD_ADDR_VAR 0 4
44484: PUSH
44485: LD_VAR 0 2
44489: PUSH
44490: FOR_IN
44491: IFFALSE 44560
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44493: LD_ADDR_VAR 0 6
44497: PUSH
44498: LD_VAR 0 1
44502: PPUSH
44503: LD_VAR 0 4
44507: PUSH
44508: LD_INT 1
44510: ARRAY
44511: PPUSH
44512: LD_VAR 0 4
44516: PUSH
44517: LD_INT 2
44519: ARRAY
44520: PPUSH
44521: CALL_OW 297
44525: ST_TO_ADDR
// if tmpDist < dist then
44526: LD_VAR 0 6
44530: PUSH
44531: LD_VAR 0 5
44535: LESS
44536: IFFALSE 44558
// begin result := i ;
44538: LD_ADDR_VAR 0 3
44542: PUSH
44543: LD_VAR 0 4
44547: ST_TO_ADDR
// dist := tmpDist ;
44548: LD_ADDR_VAR 0 5
44552: PUSH
44553: LD_VAR 0 6
44557: ST_TO_ADDR
// end ; end ;
44558: GO 44490
44560: POP
44561: POP
// end ;
44562: LD_VAR 0 3
44566: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44567: LD_INT 0
44569: PPUSH
// uc_side := side ;
44570: LD_ADDR_OWVAR 20
44574: PUSH
44575: LD_VAR 0 1
44579: ST_TO_ADDR
// uc_nation := 3 ;
44580: LD_ADDR_OWVAR 21
44584: PUSH
44585: LD_INT 3
44587: ST_TO_ADDR
// vc_chassis := 25 ;
44588: LD_ADDR_OWVAR 37
44592: PUSH
44593: LD_INT 25
44595: ST_TO_ADDR
// vc_engine := engine_siberite ;
44596: LD_ADDR_OWVAR 39
44600: PUSH
44601: LD_INT 3
44603: ST_TO_ADDR
// vc_control := control_computer ;
44604: LD_ADDR_OWVAR 38
44608: PUSH
44609: LD_INT 3
44611: ST_TO_ADDR
// vc_weapon := 59 ;
44612: LD_ADDR_OWVAR 40
44616: PUSH
44617: LD_INT 59
44619: ST_TO_ADDR
// result := CreateVehicle ;
44620: LD_ADDR_VAR 0 5
44624: PUSH
44625: CALL_OW 45
44629: ST_TO_ADDR
// SetDir ( result , d ) ;
44630: LD_VAR 0 5
44634: PPUSH
44635: LD_VAR 0 4
44639: PPUSH
44640: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44644: LD_VAR 0 5
44648: PPUSH
44649: LD_VAR 0 2
44653: PPUSH
44654: LD_VAR 0 3
44658: PPUSH
44659: LD_INT 0
44661: PPUSH
44662: CALL_OW 48
// end ;
44666: LD_VAR 0 5
44670: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44671: LD_INT 0
44673: PPUSH
44674: PPUSH
44675: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44676: LD_ADDR_VAR 0 2
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: LD_INT 0
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44699: LD_VAR 0 1
44703: NOT
44704: IFTRUE 44737
44706: PUSH
44707: LD_VAR 0 1
44711: PPUSH
44712: CALL_OW 264
44716: PUSH
44717: LD_INT 12
44719: PUSH
44720: LD_INT 51
44722: PUSH
44723: LD_INT 32
44725: PUSH
44726: LD_INT 89
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: IN
44735: NOT
44736: OR
44737: IFFALSE 44741
// exit ;
44739: GO 44839
// for i := 1 to 3 do
44741: LD_ADDR_VAR 0 3
44745: PUSH
44746: DOUBLE
44747: LD_INT 1
44749: DEC
44750: ST_TO_ADDR
44751: LD_INT 3
44753: PUSH
44754: FOR_TO
44755: IFFALSE 44837
// begin tmp := GetCargo ( cargo , i ) ;
44757: LD_ADDR_VAR 0 4
44761: PUSH
44762: LD_VAR 0 1
44766: PPUSH
44767: LD_VAR 0 3
44771: PPUSH
44772: CALL_OW 289
44776: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44777: LD_ADDR_VAR 0 2
44781: PUSH
44782: LD_VAR 0 2
44786: PPUSH
44787: LD_VAR 0 3
44791: PPUSH
44792: LD_VAR 0 4
44796: PPUSH
44797: CALL_OW 1
44801: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44802: LD_ADDR_VAR 0 2
44806: PUSH
44807: LD_VAR 0 2
44811: PPUSH
44812: LD_INT 4
44814: PPUSH
44815: LD_VAR 0 2
44819: PUSH
44820: LD_INT 4
44822: ARRAY
44823: PUSH
44824: LD_VAR 0 4
44828: PLUS
44829: PPUSH
44830: CALL_OW 1
44834: ST_TO_ADDR
// end ;
44835: GO 44754
44837: POP
44838: POP
// end ;
44839: LD_VAR 0 2
44843: RET
// export function Length ( array ) ; begin
44844: LD_INT 0
44846: PPUSH
// result := array + 0 ;
44847: LD_ADDR_VAR 0 2
44851: PUSH
44852: LD_VAR 0 1
44856: PUSH
44857: LD_INT 0
44859: PLUS
44860: ST_TO_ADDR
// end ;
44861: LD_VAR 0 2
44865: RET
// export function PrepareArray ( array ) ; begin
44866: LD_INT 0
44868: PPUSH
// result := array diff 0 ;
44869: LD_ADDR_VAR 0 2
44873: PUSH
44874: LD_VAR 0 1
44878: PUSH
44879: LD_INT 0
44881: DIFF
44882: ST_TO_ADDR
// if not result [ 1 ] then
44883: LD_VAR 0 2
44887: PUSH
44888: LD_INT 1
44890: ARRAY
44891: NOT
44892: IFFALSE 44912
// result := Delete ( result , 1 ) ;
44894: LD_ADDR_VAR 0 2
44898: PUSH
44899: LD_VAR 0 2
44903: PPUSH
44904: LD_INT 1
44906: PPUSH
44907: CALL_OW 3
44911: ST_TO_ADDR
// end ;
44912: LD_VAR 0 2
44916: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44917: LD_INT 0
44919: PPUSH
44920: PPUSH
44921: PPUSH
44922: PPUSH
// sibRocketRange := 25 ;
44923: LD_ADDR_VAR 0 6
44927: PUSH
44928: LD_INT 25
44930: ST_TO_ADDR
// result := false ;
44931: LD_ADDR_VAR 0 4
44935: PUSH
44936: LD_INT 0
44938: ST_TO_ADDR
// for i := 0 to 5 do
44939: LD_ADDR_VAR 0 5
44943: PUSH
44944: DOUBLE
44945: LD_INT 0
44947: DEC
44948: ST_TO_ADDR
44949: LD_INT 5
44951: PUSH
44952: FOR_TO
44953: IFFALSE 45020
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44955: LD_VAR 0 1
44959: PPUSH
44960: LD_VAR 0 5
44964: PPUSH
44965: LD_VAR 0 6
44969: PPUSH
44970: CALL_OW 272
44974: PPUSH
44975: LD_VAR 0 2
44979: PPUSH
44980: LD_VAR 0 5
44984: PPUSH
44985: LD_VAR 0 6
44989: PPUSH
44990: CALL_OW 273
44994: PPUSH
44995: LD_VAR 0 3
44999: PPUSH
45000: CALL_OW 309
45004: IFFALSE 45018
// begin result := true ;
45006: LD_ADDR_VAR 0 4
45010: PUSH
45011: LD_INT 1
45013: ST_TO_ADDR
// exit ;
45014: POP
45015: POP
45016: GO 45022
// end ;
45018: GO 44952
45020: POP
45021: POP
// end ;
45022: LD_VAR 0 4
45026: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45027: LD_INT 0
45029: PPUSH
45030: PPUSH
45031: PPUSH
// if btype = b_depot then
45032: LD_VAR 0 2
45036: PUSH
45037: LD_INT 0
45039: EQUAL
45040: IFFALSE 45052
// begin result := true ;
45042: LD_ADDR_VAR 0 3
45046: PUSH
45047: LD_INT 1
45049: ST_TO_ADDR
// exit ;
45050: GO 45172
// end ; pom := GetBase ( depot ) ;
45052: LD_ADDR_VAR 0 4
45056: PUSH
45057: LD_VAR 0 1
45061: PPUSH
45062: CALL_OW 274
45066: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45067: LD_ADDR_VAR 0 5
45071: PUSH
45072: LD_VAR 0 2
45076: PPUSH
45077: LD_VAR 0 1
45081: PPUSH
45082: CALL_OW 248
45086: PPUSH
45087: CALL_OW 450
45091: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45092: LD_ADDR_VAR 0 3
45096: PUSH
45097: LD_VAR 0 4
45101: PPUSH
45102: LD_INT 1
45104: PPUSH
45105: CALL_OW 275
45109: PUSH
45110: LD_VAR 0 5
45114: PUSH
45115: LD_INT 1
45117: ARRAY
45118: GREATEREQUAL
45119: IFFALSE 45145
45121: PUSH
45122: LD_VAR 0 4
45126: PPUSH
45127: LD_INT 2
45129: PPUSH
45130: CALL_OW 275
45134: PUSH
45135: LD_VAR 0 5
45139: PUSH
45140: LD_INT 2
45142: ARRAY
45143: GREATEREQUAL
45144: AND
45145: IFFALSE 45171
45147: PUSH
45148: LD_VAR 0 4
45152: PPUSH
45153: LD_INT 3
45155: PPUSH
45156: CALL_OW 275
45160: PUSH
45161: LD_VAR 0 5
45165: PUSH
45166: LD_INT 3
45168: ARRAY
45169: GREATEREQUAL
45170: AND
45171: ST_TO_ADDR
// end ;
45172: LD_VAR 0 3
45176: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45177: LD_INT 0
45179: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45180: LD_VAR 0 1
45184: PPUSH
45185: LD_VAR 0 2
45189: PPUSH
45190: LD_INT 0
45192: PPUSH
45193: LD_INT 0
45195: PPUSH
45196: LD_INT 1
45198: PPUSH
45199: LD_INT 0
45201: PPUSH
45202: CALL_OW 587
// end ;
45206: LD_VAR 0 3
45210: RET
// export function CenterOnNow ( unit ) ; begin
45211: LD_INT 0
45213: PPUSH
// result := IsInUnit ( unit ) ;
45214: LD_ADDR_VAR 0 2
45218: PUSH
45219: LD_VAR 0 1
45223: PPUSH
45224: CALL_OW 310
45228: ST_TO_ADDR
// if not result then
45229: LD_VAR 0 2
45233: NOT
45234: IFFALSE 45246
// result := unit ;
45236: LD_ADDR_VAR 0 2
45240: PUSH
45241: LD_VAR 0 1
45245: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45246: LD_VAR 0 1
45250: PPUSH
45251: CALL_OW 87
// end ;
45255: LD_VAR 0 2
45259: RET
// export function ComMoveHex ( unit , hex ) ; begin
45260: LD_INT 0
45262: PPUSH
// if not hex then
45263: LD_VAR 0 2
45267: NOT
45268: IFFALSE 45272
// exit ;
45270: GO 45325
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
45272: LD_VAR 0 2
45276: PUSH
45277: LD_INT 1
45279: ARRAY
45280: PPUSH
45281: LD_VAR 0 2
45285: PUSH
45286: LD_INT 2
45288: ARRAY
45289: PPUSH
45290: CALL_OW 428
45294: IFFALSE 45298
// exit ;
45296: GO 45325
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45298: LD_VAR 0 1
45302: PPUSH
45303: LD_VAR 0 2
45307: PUSH
45308: LD_INT 1
45310: ARRAY
45311: PPUSH
45312: LD_VAR 0 2
45316: PUSH
45317: LD_INT 2
45319: ARRAY
45320: PPUSH
45321: CALL_OW 111
// end ;
45325: LD_VAR 0 3
45329: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45330: LD_INT 0
45332: PPUSH
45333: PPUSH
45334: PPUSH
// if not unit or not enemy then
45335: LD_VAR 0 1
45339: NOT
45340: IFTRUE 45349
45342: PUSH
45343: LD_VAR 0 2
45347: NOT
45348: OR
45349: IFFALSE 45353
// exit ;
45351: GO 45479
// x := GetX ( enemy ) ;
45353: LD_ADDR_VAR 0 4
45357: PUSH
45358: LD_VAR 0 2
45362: PPUSH
45363: CALL_OW 250
45367: ST_TO_ADDR
// y := GetY ( enemy ) ;
45368: LD_ADDR_VAR 0 5
45372: PUSH
45373: LD_VAR 0 2
45377: PPUSH
45378: CALL_OW 251
45382: ST_TO_ADDR
// if ValidHex ( x , y ) then
45383: LD_VAR 0 4
45387: PPUSH
45388: LD_VAR 0 5
45392: PPUSH
45393: CALL_OW 488
45397: IFFALSE 45479
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45399: LD_VAR 0 2
45403: PPUSH
45404: CALL_OW 247
45408: PUSH
45409: LD_INT 3
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: IN
45419: IFTRUE 45442
45421: PUSH
45422: LD_VAR 0 1
45426: PPUSH
45427: CALL_OW 255
45431: PPUSH
45432: LD_VAR 0 2
45436: PPUSH
45437: CALL_OW 292
45441: OR
45442: IFFALSE 45460
// ComAttackUnit ( unit , enemy ) else
45444: LD_VAR 0 1
45448: PPUSH
45449: LD_VAR 0 2
45453: PPUSH
45454: CALL_OW 115
45458: GO 45479
// ComAgressiveMove ( unit , x , y ) ;
45460: LD_VAR 0 1
45464: PPUSH
45465: LD_VAR 0 4
45469: PPUSH
45470: LD_VAR 0 5
45474: PPUSH
45475: CALL_OW 114
// end ;
45479: LD_VAR 0 3
45483: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45484: LD_INT 0
45486: PPUSH
45487: PPUSH
45488: PPUSH
// list := AreaToList ( area , 0 ) ;
45489: LD_ADDR_VAR 0 5
45493: PUSH
45494: LD_VAR 0 1
45498: PPUSH
45499: LD_INT 0
45501: PPUSH
45502: CALL_OW 517
45506: ST_TO_ADDR
// if not list then
45507: LD_VAR 0 5
45511: NOT
45512: IFFALSE 45516
// exit ;
45514: GO 45646
// if all then
45516: LD_VAR 0 2
45520: IFFALSE 45608
// begin for i := 1 to list [ 1 ] do
45522: LD_ADDR_VAR 0 4
45526: PUSH
45527: DOUBLE
45528: LD_INT 1
45530: DEC
45531: ST_TO_ADDR
45532: LD_VAR 0 5
45536: PUSH
45537: LD_INT 1
45539: ARRAY
45540: PUSH
45541: FOR_TO
45542: IFFALSE 45604
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45544: LD_ADDR_VAR 0 3
45548: PUSH
45549: LD_VAR 0 3
45553: PPUSH
45554: LD_VAR 0 3
45558: PUSH
45559: LD_INT 1
45561: PLUS
45562: PPUSH
45563: LD_VAR 0 5
45567: PUSH
45568: LD_INT 1
45570: ARRAY
45571: PUSH
45572: LD_VAR 0 4
45576: ARRAY
45577: PUSH
45578: LD_VAR 0 5
45582: PUSH
45583: LD_INT 2
45585: ARRAY
45586: PUSH
45587: LD_VAR 0 4
45591: ARRAY
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PPUSH
45597: CALL_OW 1
45601: ST_TO_ADDR
45602: GO 45541
45604: POP
45605: POP
// exit ;
45606: GO 45646
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45608: LD_ADDR_VAR 0 3
45612: PUSH
45613: LD_VAR 0 5
45617: PUSH
45618: LD_INT 1
45620: ARRAY
45621: PUSH
45622: LD_INT 1
45624: ARRAY
45625: PUSH
45626: LD_VAR 0 5
45630: PUSH
45631: LD_INT 2
45633: ARRAY
45634: PUSH
45635: LD_INT 1
45637: ARRAY
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: EMPTY
45644: LIST
45645: ST_TO_ADDR
// end ;
45646: LD_VAR 0 3
45650: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45651: LD_INT 0
45653: PPUSH
45654: PPUSH
// list := AreaToList ( area , 0 ) ;
45655: LD_ADDR_VAR 0 4
45659: PUSH
45660: LD_VAR 0 1
45664: PPUSH
45665: LD_INT 0
45667: PPUSH
45668: CALL_OW 517
45672: ST_TO_ADDR
// if not list then
45673: LD_VAR 0 4
45677: NOT
45678: IFFALSE 45682
// exit ;
45680: GO 45723
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45682: LD_ADDR_VAR 0 3
45686: PUSH
45687: LD_VAR 0 4
45691: PUSH
45692: LD_INT 1
45694: ARRAY
45695: PUSH
45696: LD_INT 1
45698: ARRAY
45699: PUSH
45700: LD_VAR 0 4
45704: PUSH
45705: LD_INT 2
45707: ARRAY
45708: PUSH
45709: LD_INT 1
45711: ARRAY
45712: PUSH
45713: LD_VAR 0 2
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: LIST
45722: ST_TO_ADDR
// end ;
45723: LD_VAR 0 3
45727: RET
// export function First ( array ) ; begin
45728: LD_INT 0
45730: PPUSH
// if not array then
45731: LD_VAR 0 1
45735: NOT
45736: IFFALSE 45740
// exit ;
45738: GO 45754
// result := array [ 1 ] ;
45740: LD_ADDR_VAR 0 2
45744: PUSH
45745: LD_VAR 0 1
45749: PUSH
45750: LD_INT 1
45752: ARRAY
45753: ST_TO_ADDR
// end ;
45754: LD_VAR 0 2
45758: RET
// export function Last ( array ) ; begin
45759: LD_INT 0
45761: PPUSH
// if not array then
45762: LD_VAR 0 1
45766: NOT
45767: IFFALSE 45771
// exit ;
45769: GO 45787
// result := array [ array ] ;
45771: LD_ADDR_VAR 0 2
45775: PUSH
45776: LD_VAR 0 1
45780: PUSH
45781: LD_VAR 0 1
45785: ARRAY
45786: ST_TO_ADDR
// end ;
45787: LD_VAR 0 2
45791: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45792: LD_INT 0
45794: PPUSH
45795: PPUSH
// result := [ ] ;
45796: LD_ADDR_VAR 0 5
45800: PUSH
45801: EMPTY
45802: ST_TO_ADDR
// if not array then
45803: LD_VAR 0 1
45807: NOT
45808: IFFALSE 45812
// exit ;
45810: GO 45924
// for i := 1 to array do
45812: LD_ADDR_VAR 0 6
45816: PUSH
45817: DOUBLE
45818: LD_INT 1
45820: DEC
45821: ST_TO_ADDR
45822: LD_VAR 0 1
45826: PUSH
45827: FOR_TO
45828: IFFALSE 45922
// if array [ i ] [ index ] = value then
45830: LD_VAR 0 1
45834: PUSH
45835: LD_VAR 0 6
45839: ARRAY
45840: PUSH
45841: LD_VAR 0 2
45845: ARRAY
45846: PUSH
45847: LD_VAR 0 3
45851: EQUAL
45852: IFFALSE 45920
// begin if indexColumn then
45854: LD_VAR 0 4
45858: IFFALSE 45894
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45860: LD_ADDR_VAR 0 5
45864: PUSH
45865: LD_VAR 0 5
45869: PPUSH
45870: LD_VAR 0 1
45874: PUSH
45875: LD_VAR 0 6
45879: ARRAY
45880: PUSH
45881: LD_VAR 0 4
45885: ARRAY
45886: PPUSH
45887: CALL 40932 0 2
45891: ST_TO_ADDR
45892: GO 45920
// result := Join ( result , array [ i ] ) ;
45894: LD_ADDR_VAR 0 5
45898: PUSH
45899: LD_VAR 0 5
45903: PPUSH
45904: LD_VAR 0 1
45908: PUSH
45909: LD_VAR 0 6
45913: ARRAY
45914: PPUSH
45915: CALL 40932 0 2
45919: ST_TO_ADDR
// end ;
45920: GO 45827
45922: POP
45923: POP
// end ;
45924: LD_VAR 0 5
45928: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45929: LD_INT 0
45931: PPUSH
// if not vehicles or not parkingPoint then
45932: LD_VAR 0 1
45936: NOT
45937: IFTRUE 45946
45939: PUSH
45940: LD_VAR 0 2
45944: NOT
45945: OR
45946: IFFALSE 45950
// exit ;
45948: GO 46048
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45950: LD_ADDR_VAR 0 1
45954: PUSH
45955: LD_VAR 0 1
45959: PPUSH
45960: LD_INT 50
45962: PUSH
45963: EMPTY
45964: LIST
45965: PUSH
45966: LD_INT 3
45968: PUSH
45969: LD_INT 92
45971: PUSH
45972: LD_VAR 0 2
45976: PUSH
45977: LD_INT 1
45979: ARRAY
45980: PUSH
45981: LD_VAR 0 2
45985: PUSH
45986: LD_INT 2
45988: ARRAY
45989: PUSH
45990: LD_INT 8
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PPUSH
46007: CALL_OW 72
46011: ST_TO_ADDR
// if not vehicles then
46012: LD_VAR 0 1
46016: NOT
46017: IFFALSE 46021
// exit ;
46019: GO 46048
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46021: LD_VAR 0 1
46025: PPUSH
46026: LD_VAR 0 2
46030: PUSH
46031: LD_INT 1
46033: ARRAY
46034: PPUSH
46035: LD_VAR 0 2
46039: PUSH
46040: LD_INT 2
46042: ARRAY
46043: PPUSH
46044: CALL_OW 111
// end ;
46048: LD_VAR 0 3
46052: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46053: LD_INT 0
46055: PPUSH
46056: PPUSH
46057: PPUSH
// if not side or not area then
46058: LD_VAR 0 1
46062: NOT
46063: IFTRUE 46072
46065: PUSH
46066: LD_VAR 0 2
46070: NOT
46071: OR
46072: IFFALSE 46076
// exit ;
46074: GO 46195
// tmp := AreaToList ( area , 0 ) ;
46076: LD_ADDR_VAR 0 5
46080: PUSH
46081: LD_VAR 0 2
46085: PPUSH
46086: LD_INT 0
46088: PPUSH
46089: CALL_OW 517
46093: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46094: LD_ADDR_VAR 0 4
46098: PUSH
46099: DOUBLE
46100: LD_INT 1
46102: DEC
46103: ST_TO_ADDR
46104: LD_VAR 0 5
46108: PUSH
46109: LD_INT 1
46111: ARRAY
46112: PUSH
46113: FOR_TO
46114: IFFALSE 46193
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46116: LD_VAR 0 5
46120: PUSH
46121: LD_INT 1
46123: ARRAY
46124: PUSH
46125: LD_VAR 0 4
46129: ARRAY
46130: PPUSH
46131: LD_VAR 0 5
46135: PUSH
46136: LD_INT 2
46138: ARRAY
46139: PUSH
46140: LD_VAR 0 4
46144: ARRAY
46145: PPUSH
46146: CALL_OW 351
46150: IFFALSE 46191
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46152: LD_VAR 0 5
46156: PUSH
46157: LD_INT 1
46159: ARRAY
46160: PUSH
46161: LD_VAR 0 4
46165: ARRAY
46166: PPUSH
46167: LD_VAR 0 5
46171: PUSH
46172: LD_INT 2
46174: ARRAY
46175: PUSH
46176: LD_VAR 0 4
46180: ARRAY
46181: PPUSH
46182: LD_VAR 0 1
46186: PPUSH
46187: CALL_OW 244
// end ;
46191: GO 46113
46193: POP
46194: POP
// end ;
46195: LD_VAR 0 3
46199: RET
// export function UniqueArray ( array ) ; var i ; begin
46200: LD_INT 0
46202: PPUSH
46203: PPUSH
// result := [ ] ;
46204: LD_ADDR_VAR 0 2
46208: PUSH
46209: EMPTY
46210: ST_TO_ADDR
// if not array then
46211: LD_VAR 0 1
46215: NOT
46216: IFFALSE 46220
// exit ;
46218: GO 46281
// for i := 1 to array do
46220: LD_ADDR_VAR 0 3
46224: PUSH
46225: DOUBLE
46226: LD_INT 1
46228: DEC
46229: ST_TO_ADDR
46230: LD_VAR 0 1
46234: PUSH
46235: FOR_TO
46236: IFFALSE 46279
// if not array [ i ] in result then
46238: LD_VAR 0 1
46242: PUSH
46243: LD_VAR 0 3
46247: ARRAY
46248: PUSH
46249: LD_VAR 0 2
46253: IN
46254: NOT
46255: IFFALSE 46277
// result := Join ( result , i ) ;
46257: LD_ADDR_VAR 0 2
46261: PUSH
46262: LD_VAR 0 2
46266: PPUSH
46267: LD_VAR 0 3
46271: PPUSH
46272: CALL 40932 0 2
46276: ST_TO_ADDR
46277: GO 46235
46279: POP
46280: POP
// end ; end_of_file
46281: LD_VAR 0 2
46285: RET
// export function SOS_UnitDestroyed ( un ) ; begin
46286: LD_INT 0
46288: PPUSH
// ComRadiation ( un ) ;
46289: LD_VAR 0 1
46293: PPUSH
46294: CALL 47375 0 1
// end ;
46298: LD_VAR 0 2
46302: RET
// export function SOS_UnitKamikazed ( un ) ; begin
46303: LD_INT 0
46305: PPUSH
// ComRadiation ( un ) ;
46306: LD_VAR 0 1
46310: PPUSH
46311: CALL 47375 0 1
// end ;
46315: LD_VAR 0 2
46319: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
46320: LD_INT 0
46322: PPUSH
// end ;
46323: LD_VAR 0 4
46327: RET
// export function SOS_Command ( cmd ) ; begin
46328: LD_INT 0
46330: PPUSH
// end ;
46331: LD_VAR 0 2
46335: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
46336: LD_INT 0
46338: PPUSH
// end ;
46339: LD_VAR 0 6
46343: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
46344: LD_INT 0
46346: PPUSH
46347: PPUSH
46348: PPUSH
46349: PPUSH
// if not vehicle or not factory then
46350: LD_VAR 0 1
46354: NOT
46355: IFTRUE 46364
46357: PUSH
46358: LD_VAR 0 2
46362: NOT
46363: OR
46364: IFFALSE 46368
// exit ;
46366: GO 46950
// if not factoryWaypoints then
46368: LD_EXP 78
46372: NOT
46373: IFFALSE 46377
// exit ;
46375: GO 46950
// for i := 1 to Count ( factoryWaypoints ) do
46377: LD_ADDR_VAR 0 4
46381: PUSH
46382: DOUBLE
46383: LD_INT 1
46385: DEC
46386: ST_TO_ADDR
46387: LD_EXP 78
46391: PPUSH
46392: CALL 5000 0 1
46396: PUSH
46397: FOR_TO
46398: IFFALSE 46948
// if factoryWaypoints [ i ] [ 2 ] = factory then
46400: LD_EXP 78
46404: PUSH
46405: LD_VAR 0 4
46409: ARRAY
46410: PUSH
46411: LD_INT 2
46413: ARRAY
46414: PUSH
46415: LD_VAR 0 2
46419: EQUAL
46420: IFFALSE 46946
// begin if GetControl ( vehicle ) = control_manual then
46422: LD_VAR 0 1
46426: PPUSH
46427: CALL_OW 263
46431: PUSH
46432: LD_INT 1
46434: EQUAL
46435: IFFALSE 46799
// begin driver := IsDrivenBy ( vehicle ) ;
46437: LD_ADDR_VAR 0 5
46441: PUSH
46442: LD_VAR 0 1
46446: PPUSH
46447: CALL_OW 311
46451: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
46452: LD_VAR 0 5
46456: PUSH
46457: LD_EXP 79
46461: IN
46462: IFTRUE 46476
46464: PUSH
46465: LD_VAR 0 1
46469: PUSH
46470: LD_EXP 79
46474: IN
46475: OR
46476: IFFALSE 46482
// exit ;
46478: POP
46479: POP
46480: GO 46950
// if not HasTask ( driver ) then
46482: LD_VAR 0 5
46486: PPUSH
46487: CALL_OW 314
46491: NOT
46492: IFFALSE 46797
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
46494: LD_ADDR_EXP 79
46498: PUSH
46499: LD_EXP 79
46503: PPUSH
46504: LD_VAR 0 5
46508: PPUSH
46509: CALL 40932 0 2
46513: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
46514: LD_ADDR_EXP 79
46518: PUSH
46519: LD_EXP 79
46523: PPUSH
46524: LD_VAR 0 1
46528: PPUSH
46529: CALL 40932 0 2
46533: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
46534: LD_ADDR_VAR 0 6
46538: PUSH
46539: LD_EXP 78
46543: PUSH
46544: LD_VAR 0 4
46548: ARRAY
46549: PUSH
46550: LD_INT 3
46552: ARRAY
46553: PPUSH
46554: LD_EXP 78
46558: PUSH
46559: LD_VAR 0 4
46563: ARRAY
46564: PUSH
46565: LD_INT 4
46567: ARRAY
46568: PPUSH
46569: CALL_OW 428
46573: ST_TO_ADDR
// if hex then
46574: LD_VAR 0 6
46578: IFFALSE 46596
// ComMoveUnit ( driver , hex ) else
46580: LD_VAR 0 5
46584: PPUSH
46585: LD_VAR 0 6
46589: PPUSH
46590: CALL_OW 112
46594: GO 46680
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
46596: LD_VAR 0 1
46600: PPUSH
46601: LD_EXP 78
46605: PUSH
46606: LD_VAR 0 4
46610: ARRAY
46611: PUSH
46612: LD_INT 3
46614: ARRAY
46615: PPUSH
46616: LD_EXP 78
46620: PUSH
46621: LD_VAR 0 4
46625: ARRAY
46626: PUSH
46627: LD_INT 4
46629: ARRAY
46630: PPUSH
46631: CALL_OW 297
46635: PUSH
46636: LD_INT 0
46638: GREATER
46639: IFFALSE 46680
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
46641: LD_VAR 0 5
46645: PPUSH
46646: LD_EXP 78
46650: PUSH
46651: LD_VAR 0 4
46655: ARRAY
46656: PUSH
46657: LD_INT 3
46659: ARRAY
46660: PPUSH
46661: LD_EXP 78
46665: PUSH
46666: LD_VAR 0 4
46670: ARRAY
46671: PUSH
46672: LD_INT 4
46674: ARRAY
46675: PPUSH
46676: CALL_OW 111
// AddComExitVehicle ( driver ) ;
46680: LD_VAR 0 5
46684: PPUSH
46685: CALL_OW 181
// if Multiplayer then
46689: LD_OWVAR 4
46693: IFFALSE 46742
// begin repeat wait ( 10 ) ;
46695: LD_INT 10
46697: PPUSH
46698: CALL_OW 67
// until not IsInUnit ( driver ) ;
46702: LD_VAR 0 5
46706: PPUSH
46707: CALL_OW 310
46711: NOT
46712: IFFALSE 46695
// if not HasTask ( driver ) then
46714: LD_VAR 0 5
46718: PPUSH
46719: CALL_OW 314
46723: NOT
46724: IFFALSE 46740
// ComEnterUnit ( driver , factory ) ;
46726: LD_VAR 0 5
46730: PPUSH
46731: LD_VAR 0 2
46735: PPUSH
46736: CALL_OW 120
// end else
46740: GO 46756
// AddComEnterUnit ( driver , factory ) ;
46742: LD_VAR 0 5
46746: PPUSH
46747: LD_VAR 0 2
46751: PPUSH
46752: CALL_OW 180
// wait ( 0 0$1 ) ;
46756: LD_INT 35
46758: PPUSH
46759: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
46763: LD_ADDR_EXP 79
46767: PUSH
46768: LD_EXP 79
46772: PUSH
46773: LD_VAR 0 5
46777: DIFF
46778: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
46779: LD_ADDR_EXP 79
46783: PUSH
46784: LD_EXP 79
46788: PUSH
46789: LD_VAR 0 1
46793: DIFF
46794: ST_TO_ADDR
// break ;
46795: GO 46948
// end ; end else
46797: GO 46946
// if GetControl ( vehicle ) = control_remote then
46799: LD_VAR 0 1
46803: PPUSH
46804: CALL_OW 263
46808: PUSH
46809: LD_INT 2
46811: EQUAL
46812: IFFALSE 46898
// begin wait ( 0 0$2 ) ;
46814: LD_INT 70
46816: PPUSH
46817: CALL_OW 67
// repeat wait ( 10 ) ;
46821: LD_INT 10
46823: PPUSH
46824: CALL_OW 67
// Connect ( vehicle ) ;
46828: LD_VAR 0 1
46832: PPUSH
46833: CALL 11244 0 1
// until IsControledBy ( vehicle ) ;
46837: LD_VAR 0 1
46841: PPUSH
46842: CALL_OW 312
46846: IFFALSE 46821
// wait ( 10 ) ;
46848: LD_INT 10
46850: PPUSH
46851: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
46855: LD_VAR 0 1
46859: PPUSH
46860: LD_EXP 78
46864: PUSH
46865: LD_VAR 0 4
46869: ARRAY
46870: PUSH
46871: LD_INT 3
46873: ARRAY
46874: PPUSH
46875: LD_EXP 78
46879: PUSH
46880: LD_VAR 0 4
46884: ARRAY
46885: PUSH
46886: LD_INT 4
46888: ARRAY
46889: PPUSH
46890: CALL_OW 111
// break ;
46894: GO 46948
// end else
46896: GO 46946
// begin wait ( 0 0$3 ) ;
46898: LD_INT 105
46900: PPUSH
46901: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
46905: LD_VAR 0 1
46909: PPUSH
46910: LD_EXP 78
46914: PUSH
46915: LD_VAR 0 4
46919: ARRAY
46920: PUSH
46921: LD_INT 3
46923: ARRAY
46924: PPUSH
46925: LD_EXP 78
46929: PUSH
46930: LD_VAR 0 4
46934: ARRAY
46935: PUSH
46936: LD_INT 4
46938: ARRAY
46939: PPUSH
46940: CALL_OW 111
// break ;
46944: GO 46948
// end ; end ;
46946: GO 46397
46948: POP
46949: POP
// end ;
46950: LD_VAR 0 3
46954: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
46955: LD_INT 0
46957: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
46958: LD_VAR 0 1
46962: PUSH
46963: LD_INT 250
46965: EQUAL
46966: IFFALSE 46983
46968: PUSH
46969: LD_VAR 0 2
46973: PPUSH
46974: CALL_OW 264
46978: PUSH
46979: LD_INT 81
46981: EQUAL
46982: AND
46983: IFFALSE 47004
// MinerPlaceMine ( unit , x , y ) ;
46985: LD_VAR 0 2
46989: PPUSH
46990: LD_VAR 0 4
46994: PPUSH
46995: LD_VAR 0 5
46999: PPUSH
47000: CALL 50136 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
47004: LD_VAR 0 1
47008: PUSH
47009: LD_INT 251
47011: EQUAL
47012: IFFALSE 47029
47014: PUSH
47015: LD_VAR 0 2
47019: PPUSH
47020: CALL_OW 264
47024: PUSH
47025: LD_INT 81
47027: EQUAL
47028: AND
47029: IFFALSE 47050
// MinerDetonateMine ( unit , x , y ) ;
47031: LD_VAR 0 2
47035: PPUSH
47036: LD_VAR 0 4
47040: PPUSH
47041: LD_VAR 0 5
47045: PPUSH
47046: CALL 50415 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
47050: LD_VAR 0 1
47054: PUSH
47055: LD_INT 252
47057: EQUAL
47058: IFFALSE 47075
47060: PUSH
47061: LD_VAR 0 2
47065: PPUSH
47066: CALL_OW 264
47070: PUSH
47071: LD_INT 81
47073: EQUAL
47074: AND
47075: IFFALSE 47096
// MinerCreateMinefield ( unit , x , y ) ;
47077: LD_VAR 0 2
47081: PPUSH
47082: LD_VAR 0 4
47086: PPUSH
47087: LD_VAR 0 5
47091: PPUSH
47092: CALL 50834 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
47096: LD_VAR 0 1
47100: PUSH
47101: LD_INT 253
47103: EQUAL
47104: IFFALSE 47121
47106: PUSH
47107: LD_VAR 0 2
47111: PPUSH
47112: CALL_OW 257
47116: PUSH
47117: LD_INT 5
47119: EQUAL
47120: AND
47121: IFFALSE 47142
// ComBinocular ( unit , x , y ) ;
47123: LD_VAR 0 2
47127: PPUSH
47128: LD_VAR 0 4
47132: PPUSH
47133: LD_VAR 0 5
47137: PPUSH
47138: CALL 51209 0 3
// if selectedUnit then
47142: LD_VAR 0 3
47146: IFFALSE 47206
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
47148: LD_VAR 0 1
47152: PUSH
47153: LD_INT 254
47155: EQUAL
47156: IFFALSE 47173
47158: PUSH
47159: LD_VAR 0 2
47163: PPUSH
47164: CALL_OW 264
47168: PUSH
47169: LD_INT 99
47171: EQUAL
47172: AND
47173: IFFALSE 47190
47175: PUSH
47176: LD_VAR 0 3
47180: PPUSH
47181: CALL_OW 263
47185: PUSH
47186: LD_INT 3
47188: EQUAL
47189: AND
47190: IFFALSE 47206
// HackDestroyVehicle ( unit , selectedUnit ) ;
47192: LD_VAR 0 2
47196: PPUSH
47197: LD_VAR 0 3
47201: PPUSH
47202: CALL 49496 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
47206: LD_VAR 0 1
47210: PUSH
47211: LD_INT 255
47213: EQUAL
47214: IFFALSE 47238
47216: PUSH
47217: LD_VAR 0 2
47221: PPUSH
47222: CALL_OW 264
47226: PUSH
47227: LD_INT 14
47229: PUSH
47230: LD_INT 53
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: IN
47237: AND
47238: IFFALSE 47256
47240: PUSH
47241: LD_VAR 0 4
47245: PPUSH
47246: LD_VAR 0 5
47250: PPUSH
47251: CALL_OW 488
47255: AND
47256: IFFALSE 47280
// CutTreeXYR ( unit , x , y , 12 ) ;
47258: LD_VAR 0 2
47262: PPUSH
47263: LD_VAR 0 4
47267: PPUSH
47268: LD_VAR 0 5
47272: PPUSH
47273: LD_INT 12
47275: PPUSH
47276: CALL 47471 0 4
// if cmd = 256 then
47280: LD_VAR 0 1
47284: PUSH
47285: LD_INT 256
47287: EQUAL
47288: IFFALSE 47309
// SetFactoryWaypoint ( unit , x , y ) ;
47290: LD_VAR 0 2
47294: PPUSH
47295: LD_VAR 0 4
47299: PPUSH
47300: LD_VAR 0 5
47304: PPUSH
47305: CALL 67113 0 3
// if cmd = 257 then
47309: LD_VAR 0 1
47313: PUSH
47314: LD_INT 257
47316: EQUAL
47317: IFFALSE 47338
// SetWarehouseGatheringPoint ( unit , x , y ) ;
47319: LD_VAR 0 2
47323: PPUSH
47324: LD_VAR 0 4
47328: PPUSH
47329: LD_VAR 0 5
47333: PPUSH
47334: CALL 67609 0 3
// if cmd = 258 then
47338: LD_VAR 0 1
47342: PUSH
47343: LD_INT 258
47345: EQUAL
47346: IFFALSE 47370
// BurnTreeXYR ( unit , x , y , 8 ) ;
47348: LD_VAR 0 2
47352: PPUSH
47353: LD_VAR 0 4
47357: PPUSH
47358: LD_VAR 0 5
47362: PPUSH
47363: LD_INT 8
47365: PPUSH
47366: CALL 47871 0 4
// end ;
47370: LD_VAR 0 6
47374: RET
// export function ComRadiation ( un ) ; var eff ; begin
47375: LD_INT 0
47377: PPUSH
47378: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
47379: LD_VAR 0 1
47383: PPUSH
47384: CALL_OW 264
47388: PUSH
47389: LD_INT 91
47391: NONEQUAL
47392: IFFALSE 47396
// exit ;
47394: GO 47466
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
47396: LD_INT 68
47398: PPUSH
47399: LD_VAR 0 1
47403: PPUSH
47404: CALL_OW 255
47408: PPUSH
47409: CALL_OW 321
47413: PUSH
47414: LD_INT 2
47416: EQUAL
47417: IFFALSE 47429
// eff := 50 else
47419: LD_ADDR_VAR 0 3
47423: PUSH
47424: LD_INT 50
47426: ST_TO_ADDR
47427: GO 47437
// eff := 25 ;
47429: LD_ADDR_VAR 0 3
47433: PUSH
47434: LD_INT 25
47436: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
47437: LD_VAR 0 1
47441: PPUSH
47442: CALL_OW 250
47446: PPUSH
47447: LD_VAR 0 1
47451: PPUSH
47452: CALL_OW 251
47456: PPUSH
47457: LD_VAR 0 3
47461: PPUSH
47462: CALL_OW 495
// end ;
47466: LD_VAR 0 2
47470: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
47471: LD_INT 0
47473: PPUSH
47474: PPUSH
47475: PPUSH
47476: PPUSH
47477: PPUSH
47478: PPUSH
47479: PPUSH
47480: PPUSH
47481: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
47482: LD_VAR 0 1
47486: PPUSH
47487: CALL_OW 302
47491: NOT
47492: IFTRUE 47511
47494: PUSH
47495: LD_VAR 0 2
47499: PPUSH
47500: LD_VAR 0 3
47504: PPUSH
47505: CALL_OW 488
47509: NOT
47510: OR
47511: IFTRUE 47520
47513: PUSH
47514: LD_VAR 0 4
47518: NOT
47519: OR
47520: IFFALSE 47524
// exit ;
47522: GO 47866
// list := [ ] ;
47524: LD_ADDR_VAR 0 13
47528: PUSH
47529: EMPTY
47530: ST_TO_ADDR
// if x - r < 0 then
47531: LD_VAR 0 2
47535: PUSH
47536: LD_VAR 0 4
47540: MINUS
47541: PUSH
47542: LD_INT 0
47544: LESS
47545: IFFALSE 47557
// min_x := 0 else
47547: LD_ADDR_VAR 0 7
47551: PUSH
47552: LD_INT 0
47554: ST_TO_ADDR
47555: GO 47573
// min_x := x - r ;
47557: LD_ADDR_VAR 0 7
47561: PUSH
47562: LD_VAR 0 2
47566: PUSH
47567: LD_VAR 0 4
47571: MINUS
47572: ST_TO_ADDR
// if y - r < 0 then
47573: LD_VAR 0 3
47577: PUSH
47578: LD_VAR 0 4
47582: MINUS
47583: PUSH
47584: LD_INT 0
47586: LESS
47587: IFFALSE 47599
// min_y := 0 else
47589: LD_ADDR_VAR 0 8
47593: PUSH
47594: LD_INT 0
47596: ST_TO_ADDR
47597: GO 47615
// min_y := y - r ;
47599: LD_ADDR_VAR 0 8
47603: PUSH
47604: LD_VAR 0 3
47608: PUSH
47609: LD_VAR 0 4
47613: MINUS
47614: ST_TO_ADDR
// max_x := x + r ;
47615: LD_ADDR_VAR 0 9
47619: PUSH
47620: LD_VAR 0 2
47624: PUSH
47625: LD_VAR 0 4
47629: PLUS
47630: ST_TO_ADDR
// max_y := y + r ;
47631: LD_ADDR_VAR 0 10
47635: PUSH
47636: LD_VAR 0 3
47640: PUSH
47641: LD_VAR 0 4
47645: PLUS
47646: ST_TO_ADDR
// for _x = min_x to max_x do
47647: LD_ADDR_VAR 0 11
47651: PUSH
47652: DOUBLE
47653: LD_VAR 0 7
47657: DEC
47658: ST_TO_ADDR
47659: LD_VAR 0 9
47663: PUSH
47664: FOR_TO
47665: IFFALSE 47784
// for _y = min_y to max_y do
47667: LD_ADDR_VAR 0 12
47671: PUSH
47672: DOUBLE
47673: LD_VAR 0 8
47677: DEC
47678: ST_TO_ADDR
47679: LD_VAR 0 10
47683: PUSH
47684: FOR_TO
47685: IFFALSE 47780
// begin if not ValidHex ( _x , _y ) then
47687: LD_VAR 0 11
47691: PPUSH
47692: LD_VAR 0 12
47696: PPUSH
47697: CALL_OW 488
47701: NOT
47702: IFFALSE 47706
// continue ;
47704: GO 47684
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
47706: LD_VAR 0 11
47710: PPUSH
47711: LD_VAR 0 12
47715: PPUSH
47716: CALL_OW 351
47720: IFFALSE 47738
47722: PUSH
47723: LD_VAR 0 11
47727: PPUSH
47728: LD_VAR 0 12
47732: PPUSH
47733: CALL_OW 554
47737: AND
47738: IFFALSE 47778
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
47740: LD_ADDR_VAR 0 13
47744: PUSH
47745: LD_VAR 0 13
47749: PPUSH
47750: LD_VAR 0 13
47754: PUSH
47755: LD_INT 1
47757: PLUS
47758: PPUSH
47759: LD_VAR 0 11
47763: PUSH
47764: LD_VAR 0 12
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PPUSH
47773: CALL_OW 2
47777: ST_TO_ADDR
// end ;
47778: GO 47684
47780: POP
47781: POP
47782: GO 47664
47784: POP
47785: POP
// if not list then
47786: LD_VAR 0 13
47790: NOT
47791: IFFALSE 47795
// exit ;
47793: GO 47866
// for i in list do
47795: LD_ADDR_VAR 0 6
47799: PUSH
47800: LD_VAR 0 13
47804: PUSH
47805: FOR_IN
47806: IFFALSE 47864
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
47808: LD_VAR 0 1
47812: PPUSH
47813: LD_STRING M
47815: PUSH
47816: LD_VAR 0 6
47820: PUSH
47821: LD_INT 1
47823: ARRAY
47824: PUSH
47825: LD_VAR 0 6
47829: PUSH
47830: LD_INT 2
47832: ARRAY
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: LD_INT 0
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: PUSH
47855: EMPTY
47856: LIST
47857: PPUSH
47858: CALL_OW 447
47862: GO 47805
47864: POP
47865: POP
// end ;
47866: LD_VAR 0 5
47870: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
47871: LD_INT 0
47873: PPUSH
47874: PPUSH
47875: PPUSH
47876: PPUSH
47877: PPUSH
47878: PPUSH
47879: PPUSH
47880: PPUSH
47881: PPUSH
47882: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
47883: LD_VAR 0 1
47887: PPUSH
47888: CALL_OW 302
47892: NOT
47893: IFTRUE 47912
47895: PUSH
47896: LD_VAR 0 2
47900: PPUSH
47901: LD_VAR 0 3
47905: PPUSH
47906: CALL_OW 488
47910: NOT
47911: OR
47912: IFTRUE 47921
47914: PUSH
47915: LD_VAR 0 4
47919: NOT
47920: OR
47921: IFFALSE 47925
// exit ;
47923: GO 48442
// list := [ ] ;
47925: LD_ADDR_VAR 0 13
47929: PUSH
47930: EMPTY
47931: ST_TO_ADDR
// if x - r < 0 then
47932: LD_VAR 0 2
47936: PUSH
47937: LD_VAR 0 4
47941: MINUS
47942: PUSH
47943: LD_INT 0
47945: LESS
47946: IFFALSE 47958
// min_x := 0 else
47948: LD_ADDR_VAR 0 7
47952: PUSH
47953: LD_INT 0
47955: ST_TO_ADDR
47956: GO 47974
// min_x := x - r ;
47958: LD_ADDR_VAR 0 7
47962: PUSH
47963: LD_VAR 0 2
47967: PUSH
47968: LD_VAR 0 4
47972: MINUS
47973: ST_TO_ADDR
// if y - r < 0 then
47974: LD_VAR 0 3
47978: PUSH
47979: LD_VAR 0 4
47983: MINUS
47984: PUSH
47985: LD_INT 0
47987: LESS
47988: IFFALSE 48000
// min_y := 0 else
47990: LD_ADDR_VAR 0 8
47994: PUSH
47995: LD_INT 0
47997: ST_TO_ADDR
47998: GO 48016
// min_y := y - r ;
48000: LD_ADDR_VAR 0 8
48004: PUSH
48005: LD_VAR 0 3
48009: PUSH
48010: LD_VAR 0 4
48014: MINUS
48015: ST_TO_ADDR
// max_x := x + r ;
48016: LD_ADDR_VAR 0 9
48020: PUSH
48021: LD_VAR 0 2
48025: PUSH
48026: LD_VAR 0 4
48030: PLUS
48031: ST_TO_ADDR
// max_y := y + r ;
48032: LD_ADDR_VAR 0 10
48036: PUSH
48037: LD_VAR 0 3
48041: PUSH
48042: LD_VAR 0 4
48046: PLUS
48047: ST_TO_ADDR
// for _x = min_x to max_x do
48048: LD_ADDR_VAR 0 11
48052: PUSH
48053: DOUBLE
48054: LD_VAR 0 7
48058: DEC
48059: ST_TO_ADDR
48060: LD_VAR 0 9
48064: PUSH
48065: FOR_TO
48066: IFFALSE 48185
// for _y = min_y to max_y do
48068: LD_ADDR_VAR 0 12
48072: PUSH
48073: DOUBLE
48074: LD_VAR 0 8
48078: DEC
48079: ST_TO_ADDR
48080: LD_VAR 0 10
48084: PUSH
48085: FOR_TO
48086: IFFALSE 48181
// begin if not ValidHex ( _x , _y ) then
48088: LD_VAR 0 11
48092: PPUSH
48093: LD_VAR 0 12
48097: PPUSH
48098: CALL_OW 488
48102: NOT
48103: IFFALSE 48107
// continue ;
48105: GO 48085
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
48107: LD_VAR 0 11
48111: PPUSH
48112: LD_VAR 0 12
48116: PPUSH
48117: CALL_OW 351
48121: IFFALSE 48139
48123: PUSH
48124: LD_VAR 0 11
48128: PPUSH
48129: LD_VAR 0 12
48133: PPUSH
48134: CALL_OW 554
48138: AND
48139: IFFALSE 48179
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
48141: LD_ADDR_VAR 0 13
48145: PUSH
48146: LD_VAR 0 13
48150: PPUSH
48151: LD_VAR 0 13
48155: PUSH
48156: LD_INT 1
48158: PLUS
48159: PPUSH
48160: LD_VAR 0 11
48164: PUSH
48165: LD_VAR 0 12
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PPUSH
48174: CALL_OW 2
48178: ST_TO_ADDR
// end ;
48179: GO 48085
48181: POP
48182: POP
48183: GO 48065
48185: POP
48186: POP
// if not list then
48187: LD_VAR 0 13
48191: NOT
48192: IFFALSE 48196
// exit ;
48194: GO 48442
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
48196: LD_ADDR_VAR 0 13
48200: PUSH
48201: LD_VAR 0 1
48205: PPUSH
48206: LD_VAR 0 13
48210: PPUSH
48211: LD_INT 1
48213: PPUSH
48214: LD_INT 1
48216: PPUSH
48217: CALL 8372 0 4
48221: ST_TO_ADDR
// ComStop ( flame ) ;
48222: LD_VAR 0 1
48226: PPUSH
48227: CALL_OW 141
// for i in list do
48231: LD_ADDR_VAR 0 6
48235: PUSH
48236: LD_VAR 0 13
48240: PUSH
48241: FOR_IN
48242: IFFALSE 48273
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
48244: LD_VAR 0 1
48248: PPUSH
48249: LD_VAR 0 6
48253: PUSH
48254: LD_INT 1
48256: ARRAY
48257: PPUSH
48258: LD_VAR 0 6
48262: PUSH
48263: LD_INT 2
48265: ARRAY
48266: PPUSH
48267: CALL_OW 176
48271: GO 48241
48273: POP
48274: POP
// repeat wait ( 0 0$1 ) ;
48275: LD_INT 35
48277: PPUSH
48278: CALL_OW 67
// task := GetTaskList ( flame ) ;
48282: LD_ADDR_VAR 0 14
48286: PUSH
48287: LD_VAR 0 1
48291: PPUSH
48292: CALL_OW 437
48296: ST_TO_ADDR
// if not task then
48297: LD_VAR 0 14
48301: NOT
48302: IFFALSE 48306
// exit ;
48304: GO 48442
// if task [ 1 ] [ 1 ] <> | then
48306: LD_VAR 0 14
48310: PUSH
48311: LD_INT 1
48313: ARRAY
48314: PUSH
48315: LD_INT 1
48317: ARRAY
48318: PUSH
48319: LD_STRING |
48321: NONEQUAL
48322: IFFALSE 48326
// exit ;
48324: GO 48442
// _x := task [ 1 ] [ 2 ] ;
48326: LD_ADDR_VAR 0 11
48330: PUSH
48331: LD_VAR 0 14
48335: PUSH
48336: LD_INT 1
48338: ARRAY
48339: PUSH
48340: LD_INT 2
48342: ARRAY
48343: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
48344: LD_ADDR_VAR 0 12
48348: PUSH
48349: LD_VAR 0 14
48353: PUSH
48354: LD_INT 1
48356: ARRAY
48357: PUSH
48358: LD_INT 3
48360: ARRAY
48361: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
48362: LD_VAR 0 11
48366: PPUSH
48367: LD_VAR 0 12
48371: PPUSH
48372: CALL_OW 351
48376: NOT
48377: IFTRUE 48396
48379: PUSH
48380: LD_VAR 0 11
48384: PPUSH
48385: LD_VAR 0 12
48389: PPUSH
48390: CALL_OW 554
48394: NOT
48395: OR
48396: IFFALSE 48430
// begin task := Delete ( task , 1 ) ;
48398: LD_ADDR_VAR 0 14
48402: PUSH
48403: LD_VAR 0 14
48407: PPUSH
48408: LD_INT 1
48410: PPUSH
48411: CALL_OW 3
48415: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
48416: LD_VAR 0 1
48420: PPUSH
48421: LD_VAR 0 14
48425: PPUSH
48426: CALL_OW 446
// end ; until not HasTask ( flame ) ;
48430: LD_VAR 0 1
48434: PPUSH
48435: CALL_OW 314
48439: NOT
48440: IFFALSE 48275
// end ;
48442: LD_VAR 0 5
48446: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
48447: LD_EXP 9
48451: NOT
48452: IFFALSE 48502
48454: GO 48456
48456: DISABLE
// begin initHack := true ;
48457: LD_ADDR_EXP 9
48461: PUSH
48462: LD_INT 1
48464: ST_TO_ADDR
// hackTanks := [ ] ;
48465: LD_ADDR_EXP 10
48469: PUSH
48470: EMPTY
48471: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
48472: LD_ADDR_EXP 11
48476: PUSH
48477: EMPTY
48478: ST_TO_ADDR
// hackLimit := 3 ;
48479: LD_ADDR_EXP 12
48483: PUSH
48484: LD_INT 3
48486: ST_TO_ADDR
// hackDist := 12 ;
48487: LD_ADDR_EXP 13
48491: PUSH
48492: LD_INT 12
48494: ST_TO_ADDR
// hackCounter := [ ] ;
48495: LD_ADDR_EXP 14
48499: PUSH
48500: EMPTY
48501: ST_TO_ADDR
// end ;
48502: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
48503: LD_EXP 9
48507: IFFALSE 48525
48509: PUSH
48510: LD_INT 34
48512: PUSH
48513: LD_INT 99
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PPUSH
48520: CALL_OW 69
48524: AND
48525: IFFALSE 48778
48527: GO 48529
48529: DISABLE
48530: LD_INT 0
48532: PPUSH
48533: PPUSH
// begin enable ;
48534: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
48535: LD_ADDR_VAR 0 1
48539: PUSH
48540: LD_INT 34
48542: PUSH
48543: LD_INT 99
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PPUSH
48550: CALL_OW 69
48554: PUSH
48555: FOR_IN
48556: IFFALSE 48776
// begin if not i in hackTanks then
48558: LD_VAR 0 1
48562: PUSH
48563: LD_EXP 10
48567: IN
48568: NOT
48569: IFFALSE 48652
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
48571: LD_ADDR_EXP 10
48575: PUSH
48576: LD_EXP 10
48580: PPUSH
48581: LD_EXP 10
48585: PUSH
48586: LD_INT 1
48588: PLUS
48589: PPUSH
48590: LD_VAR 0 1
48594: PPUSH
48595: CALL_OW 1
48599: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
48600: LD_ADDR_EXP 11
48604: PUSH
48605: LD_EXP 11
48609: PPUSH
48610: LD_EXP 11
48614: PUSH
48615: LD_INT 1
48617: PLUS
48618: PPUSH
48619: EMPTY
48620: PPUSH
48621: CALL_OW 1
48625: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
48626: LD_ADDR_EXP 14
48630: PUSH
48631: LD_EXP 14
48635: PPUSH
48636: LD_EXP 14
48640: PUSH
48641: LD_INT 1
48643: PLUS
48644: PPUSH
48645: EMPTY
48646: PPUSH
48647: CALL_OW 1
48651: ST_TO_ADDR
// end ; if not IsOk ( i ) then
48652: LD_VAR 0 1
48656: PPUSH
48657: CALL_OW 302
48661: NOT
48662: IFFALSE 48675
// begin HackUnlinkAll ( i ) ;
48664: LD_VAR 0 1
48668: PPUSH
48669: CALL 48781 0 1
// continue ;
48673: GO 48555
// end ; HackCheckCapturedStatus ( i ) ;
48675: LD_VAR 0 1
48679: PPUSH
48680: CALL 49226 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
48684: LD_ADDR_VAR 0 2
48688: PUSH
48689: LD_INT 81
48691: PUSH
48692: LD_VAR 0 1
48696: PPUSH
48697: CALL_OW 255
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 33
48708: PUSH
48709: LD_INT 3
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 91
48718: PUSH
48719: LD_VAR 0 1
48723: PUSH
48724: LD_EXP 13
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 50
48736: PUSH
48737: EMPTY
48738: LIST
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: PPUSH
48746: CALL_OW 69
48750: ST_TO_ADDR
// if not tmp then
48751: LD_VAR 0 2
48755: NOT
48756: IFFALSE 48760
// continue ;
48758: GO 48555
// HackLink ( i , tmp ) ;
48760: LD_VAR 0 1
48764: PPUSH
48765: LD_VAR 0 2
48769: PPUSH
48770: CALL 48917 0 2
// end ;
48774: GO 48555
48776: POP
48777: POP
// end ;
48778: PPOPN 2
48780: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
48781: LD_INT 0
48783: PPUSH
48784: PPUSH
48785: PPUSH
// if not hack in hackTanks then
48786: LD_VAR 0 1
48790: PUSH
48791: LD_EXP 10
48795: IN
48796: NOT
48797: IFFALSE 48801
// exit ;
48799: GO 48912
// index := GetElementIndex ( hackTanks , hack ) ;
48801: LD_ADDR_VAR 0 4
48805: PUSH
48806: LD_EXP 10
48810: PPUSH
48811: LD_VAR 0 1
48815: PPUSH
48816: CALL 7667 0 2
48820: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
48821: LD_EXP 11
48825: PUSH
48826: LD_VAR 0 4
48830: ARRAY
48831: IFFALSE 48912
// begin for i in hackTanksCaptured [ index ] do
48833: LD_ADDR_VAR 0 3
48837: PUSH
48838: LD_EXP 11
48842: PUSH
48843: LD_VAR 0 4
48847: ARRAY
48848: PUSH
48849: FOR_IN
48850: IFFALSE 48876
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
48852: LD_VAR 0 3
48856: PUSH
48857: LD_INT 1
48859: ARRAY
48860: PPUSH
48861: LD_VAR 0 3
48865: PUSH
48866: LD_INT 2
48868: ARRAY
48869: PPUSH
48870: CALL_OW 235
48874: GO 48849
48876: POP
48877: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
48878: LD_ADDR_EXP 11
48882: PUSH
48883: LD_EXP 11
48887: PPUSH
48888: LD_VAR 0 4
48892: PPUSH
48893: EMPTY
48894: PPUSH
48895: CALL_OW 1
48899: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
48900: LD_VAR 0 1
48904: PPUSH
48905: LD_INT 0
48907: PPUSH
48908: CALL_OW 505
// end ; end ;
48912: LD_VAR 0 2
48916: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
48917: LD_INT 0
48919: PPUSH
48920: PPUSH
48921: PPUSH
// if not hack in hackTanks or not vehicles then
48922: LD_VAR 0 1
48926: PUSH
48927: LD_EXP 10
48931: IN
48932: NOT
48933: IFTRUE 48942
48935: PUSH
48936: LD_VAR 0 2
48940: NOT
48941: OR
48942: IFFALSE 48946
// exit ;
48944: GO 49221
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
48946: LD_ADDR_VAR 0 2
48950: PUSH
48951: LD_VAR 0 1
48955: PPUSH
48956: LD_VAR 0 2
48960: PPUSH
48961: LD_INT 1
48963: PPUSH
48964: LD_INT 1
48966: PPUSH
48967: CALL 8319 0 4
48971: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
48972: LD_ADDR_VAR 0 5
48976: PUSH
48977: LD_EXP 10
48981: PPUSH
48982: LD_VAR 0 1
48986: PPUSH
48987: CALL 7667 0 2
48991: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
48992: LD_EXP 11
48996: PUSH
48997: LD_VAR 0 5
49001: ARRAY
49002: PUSH
49003: LD_EXP 12
49007: LESS
49008: IFFALSE 49197
// begin for i := 1 to vehicles do
49010: LD_ADDR_VAR 0 4
49014: PUSH
49015: DOUBLE
49016: LD_INT 1
49018: DEC
49019: ST_TO_ADDR
49020: LD_VAR 0 2
49024: PUSH
49025: FOR_TO
49026: IFFALSE 49195
// begin if hackTanksCaptured [ index ] = hackLimit then
49028: LD_EXP 11
49032: PUSH
49033: LD_VAR 0 5
49037: ARRAY
49038: PUSH
49039: LD_EXP 12
49043: EQUAL
49044: IFFALSE 49048
// break ;
49046: GO 49195
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
49048: LD_ADDR_EXP 14
49052: PUSH
49053: LD_EXP 14
49057: PPUSH
49058: LD_VAR 0 5
49062: PPUSH
49063: LD_EXP 14
49067: PUSH
49068: LD_VAR 0 5
49072: ARRAY
49073: PUSH
49074: LD_INT 1
49076: PLUS
49077: PPUSH
49078: CALL_OW 1
49082: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
49083: LD_ADDR_EXP 11
49087: PUSH
49088: LD_EXP 11
49092: PPUSH
49093: LD_VAR 0 5
49097: PUSH
49098: LD_EXP 11
49102: PUSH
49103: LD_VAR 0 5
49107: ARRAY
49108: PUSH
49109: LD_INT 1
49111: PLUS
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PPUSH
49117: LD_VAR 0 2
49121: PUSH
49122: LD_VAR 0 4
49126: ARRAY
49127: PUSH
49128: LD_VAR 0 2
49132: PUSH
49133: LD_VAR 0 4
49137: ARRAY
49138: PPUSH
49139: CALL_OW 255
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PPUSH
49148: CALL 7884 0 3
49152: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
49153: LD_VAR 0 2
49157: PUSH
49158: LD_VAR 0 4
49162: ARRAY
49163: PPUSH
49164: LD_VAR 0 1
49168: PPUSH
49169: CALL_OW 255
49173: PPUSH
49174: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
49178: LD_VAR 0 2
49182: PUSH
49183: LD_VAR 0 4
49187: ARRAY
49188: PPUSH
49189: CALL_OW 141
// end ;
49193: GO 49025
49195: POP
49196: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
49197: LD_VAR 0 1
49201: PPUSH
49202: LD_EXP 11
49206: PUSH
49207: LD_VAR 0 5
49211: ARRAY
49212: PUSH
49213: LD_INT 0
49215: PLUS
49216: PPUSH
49217: CALL_OW 505
// end ;
49221: LD_VAR 0 3
49225: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
49226: LD_INT 0
49228: PPUSH
49229: PPUSH
49230: PPUSH
49231: PPUSH
// if not hack in hackTanks then
49232: LD_VAR 0 1
49236: PUSH
49237: LD_EXP 10
49241: IN
49242: NOT
49243: IFFALSE 49247
// exit ;
49245: GO 49491
// index := GetElementIndex ( hackTanks , hack ) ;
49247: LD_ADDR_VAR 0 4
49251: PUSH
49252: LD_EXP 10
49256: PPUSH
49257: LD_VAR 0 1
49261: PPUSH
49262: CALL 7667 0 2
49266: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
49267: LD_ADDR_VAR 0 3
49271: PUSH
49272: DOUBLE
49273: LD_EXP 11
49277: PUSH
49278: LD_VAR 0 4
49282: ARRAY
49283: INC
49284: ST_TO_ADDR
49285: LD_INT 1
49287: PUSH
49288: FOR_DOWNTO
49289: IFFALSE 49465
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
49291: LD_ADDR_VAR 0 5
49295: PUSH
49296: LD_EXP 11
49300: PUSH
49301: LD_VAR 0 4
49305: ARRAY
49306: PUSH
49307: LD_VAR 0 3
49311: ARRAY
49312: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
49313: LD_VAR 0 5
49317: PUSH
49318: LD_INT 1
49320: ARRAY
49321: PPUSH
49322: CALL_OW 302
49326: NOT
49327: IFTRUE 49355
49329: PUSH
49330: LD_VAR 0 5
49334: PUSH
49335: LD_INT 1
49337: ARRAY
49338: PPUSH
49339: CALL_OW 255
49343: PUSH
49344: LD_VAR 0 1
49348: PPUSH
49349: CALL_OW 255
49353: NONEQUAL
49354: OR
49355: IFFALSE 49463
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
49357: LD_VAR 0 5
49361: PUSH
49362: LD_INT 1
49364: ARRAY
49365: PPUSH
49366: CALL_OW 305
49370: IFFALSE 49398
49372: PUSH
49373: LD_VAR 0 5
49377: PUSH
49378: LD_INT 1
49380: ARRAY
49381: PPUSH
49382: CALL_OW 255
49386: PUSH
49387: LD_VAR 0 1
49391: PPUSH
49392: CALL_OW 255
49396: EQUAL
49397: AND
49398: IFFALSE 49422
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
49400: LD_VAR 0 5
49404: PUSH
49405: LD_INT 1
49407: ARRAY
49408: PPUSH
49409: LD_VAR 0 5
49413: PUSH
49414: LD_INT 2
49416: ARRAY
49417: PPUSH
49418: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
49422: LD_ADDR_EXP 11
49426: PUSH
49427: LD_EXP 11
49431: PPUSH
49432: LD_VAR 0 4
49436: PPUSH
49437: LD_EXP 11
49441: PUSH
49442: LD_VAR 0 4
49446: ARRAY
49447: PPUSH
49448: LD_VAR 0 3
49452: PPUSH
49453: CALL_OW 3
49457: PPUSH
49458: CALL_OW 1
49462: ST_TO_ADDR
// end ; end ;
49463: GO 49288
49465: POP
49466: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
49467: LD_VAR 0 1
49471: PPUSH
49472: LD_EXP 11
49476: PUSH
49477: LD_VAR 0 4
49481: ARRAY
49482: PUSH
49483: LD_INT 0
49485: PLUS
49486: PPUSH
49487: CALL_OW 505
// end ;
49491: LD_VAR 0 2
49495: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
49496: LD_INT 0
49498: PPUSH
49499: PPUSH
49500: PPUSH
49501: PPUSH
// if not hack in hackTanks then
49502: LD_VAR 0 1
49506: PUSH
49507: LD_EXP 10
49511: IN
49512: NOT
49513: IFFALSE 49517
// exit ;
49515: GO 49602
// index := GetElementIndex ( hackTanks , hack ) ;
49517: LD_ADDR_VAR 0 5
49521: PUSH
49522: LD_EXP 10
49526: PPUSH
49527: LD_VAR 0 1
49531: PPUSH
49532: CALL 7667 0 2
49536: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
49537: LD_ADDR_VAR 0 4
49541: PUSH
49542: DOUBLE
49543: LD_INT 1
49545: DEC
49546: ST_TO_ADDR
49547: LD_EXP 11
49551: PUSH
49552: LD_VAR 0 5
49556: ARRAY
49557: PUSH
49558: FOR_TO
49559: IFFALSE 49600
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
49561: LD_EXP 11
49565: PUSH
49566: LD_VAR 0 5
49570: ARRAY
49571: PUSH
49572: LD_VAR 0 4
49576: ARRAY
49577: PUSH
49578: LD_INT 1
49580: ARRAY
49581: PUSH
49582: LD_VAR 0 2
49586: EQUAL
49587: IFFALSE 49598
// KillUnit ( vehicle ) ;
49589: LD_VAR 0 2
49593: PPUSH
49594: CALL_OW 66
49598: GO 49558
49600: POP
49601: POP
// end ;
49602: LD_VAR 0 3
49606: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
49607: LD_EXP 15
49611: NOT
49612: IFFALSE 49647
49614: GO 49616
49616: DISABLE
// begin initMiner := true ;
49617: LD_ADDR_EXP 15
49621: PUSH
49622: LD_INT 1
49624: ST_TO_ADDR
// minersList := [ ] ;
49625: LD_ADDR_EXP 16
49629: PUSH
49630: EMPTY
49631: ST_TO_ADDR
// minerMinesList := [ ] ;
49632: LD_ADDR_EXP 17
49636: PUSH
49637: EMPTY
49638: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
49639: LD_ADDR_EXP 18
49643: PUSH
49644: LD_INT 5
49646: ST_TO_ADDR
// end ;
49647: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
49648: LD_EXP 15
49652: IFFALSE 49670
49654: PUSH
49655: LD_INT 34
49657: PUSH
49658: LD_INT 81
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PPUSH
49665: CALL_OW 69
49669: AND
49670: IFFALSE 50133
49672: GO 49674
49674: DISABLE
49675: LD_INT 0
49677: PPUSH
49678: PPUSH
49679: PPUSH
49680: PPUSH
// begin enable ;
49681: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
49682: LD_ADDR_VAR 0 1
49686: PUSH
49687: LD_INT 34
49689: PUSH
49690: LD_INT 81
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PPUSH
49697: CALL_OW 69
49701: PUSH
49702: FOR_IN
49703: IFFALSE 49775
// begin if not i in minersList then
49705: LD_VAR 0 1
49709: PUSH
49710: LD_EXP 16
49714: IN
49715: NOT
49716: IFFALSE 49773
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
49718: LD_ADDR_EXP 16
49722: PUSH
49723: LD_EXP 16
49727: PPUSH
49728: LD_EXP 16
49732: PUSH
49733: LD_INT 1
49735: PLUS
49736: PPUSH
49737: LD_VAR 0 1
49741: PPUSH
49742: CALL_OW 1
49746: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
49747: LD_ADDR_EXP 17
49751: PUSH
49752: LD_EXP 17
49756: PPUSH
49757: LD_EXP 17
49761: PUSH
49762: LD_INT 1
49764: PLUS
49765: PPUSH
49766: EMPTY
49767: PPUSH
49768: CALL_OW 1
49772: ST_TO_ADDR
// end end ;
49773: GO 49702
49775: POP
49776: POP
// for i := minerMinesList downto 1 do
49777: LD_ADDR_VAR 0 1
49781: PUSH
49782: DOUBLE
49783: LD_EXP 17
49787: INC
49788: ST_TO_ADDR
49789: LD_INT 1
49791: PUSH
49792: FOR_DOWNTO
49793: IFFALSE 50131
// begin if IsLive ( minersList [ i ] ) then
49795: LD_EXP 16
49799: PUSH
49800: LD_VAR 0 1
49804: ARRAY
49805: PPUSH
49806: CALL_OW 300
49810: IFFALSE 49838
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
49812: LD_EXP 16
49816: PUSH
49817: LD_VAR 0 1
49821: ARRAY
49822: PPUSH
49823: LD_EXP 17
49827: PUSH
49828: LD_VAR 0 1
49832: ARRAY
49833: PPUSH
49834: CALL_OW 505
// if not minerMinesList [ i ] then
49838: LD_EXP 17
49842: PUSH
49843: LD_VAR 0 1
49847: ARRAY
49848: NOT
49849: IFFALSE 49853
// continue ;
49851: GO 49792
// for j := minerMinesList [ i ] downto 1 do
49853: LD_ADDR_VAR 0 2
49857: PUSH
49858: DOUBLE
49859: LD_EXP 17
49863: PUSH
49864: LD_VAR 0 1
49868: ARRAY
49869: INC
49870: ST_TO_ADDR
49871: LD_INT 1
49873: PUSH
49874: FOR_DOWNTO
49875: IFFALSE 50127
// begin side := GetSide ( minersList [ i ] ) ;
49877: LD_ADDR_VAR 0 3
49881: PUSH
49882: LD_EXP 16
49886: PUSH
49887: LD_VAR 0 1
49891: ARRAY
49892: PPUSH
49893: CALL_OW 255
49897: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
49898: LD_ADDR_VAR 0 4
49902: PUSH
49903: LD_EXP 17
49907: PUSH
49908: LD_VAR 0 1
49912: ARRAY
49913: PUSH
49914: LD_VAR 0 2
49918: ARRAY
49919: PUSH
49920: LD_INT 1
49922: ARRAY
49923: PPUSH
49924: LD_EXP 17
49928: PUSH
49929: LD_VAR 0 1
49933: ARRAY
49934: PUSH
49935: LD_VAR 0 2
49939: ARRAY
49940: PUSH
49941: LD_INT 2
49943: ARRAY
49944: PPUSH
49945: CALL_OW 428
49949: ST_TO_ADDR
// if not tmp then
49950: LD_VAR 0 4
49954: NOT
49955: IFFALSE 49959
// continue ;
49957: GO 49874
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
49959: LD_VAR 0 4
49963: PUSH
49964: LD_INT 81
49966: PUSH
49967: LD_VAR 0 3
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PPUSH
49976: CALL_OW 69
49980: IN
49981: IFFALSE 50031
49983: PUSH
49984: LD_EXP 17
49988: PUSH
49989: LD_VAR 0 1
49993: ARRAY
49994: PUSH
49995: LD_VAR 0 2
49999: ARRAY
50000: PUSH
50001: LD_INT 1
50003: ARRAY
50004: PPUSH
50005: LD_EXP 17
50009: PUSH
50010: LD_VAR 0 1
50014: ARRAY
50015: PUSH
50016: LD_VAR 0 2
50020: ARRAY
50021: PUSH
50022: LD_INT 2
50024: ARRAY
50025: PPUSH
50026: CALL_OW 458
50030: AND
50031: IFFALSE 50125
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
50033: LD_EXP 17
50037: PUSH
50038: LD_VAR 0 1
50042: ARRAY
50043: PUSH
50044: LD_VAR 0 2
50048: ARRAY
50049: PUSH
50050: LD_INT 1
50052: ARRAY
50053: PPUSH
50054: LD_EXP 17
50058: PUSH
50059: LD_VAR 0 1
50063: ARRAY
50064: PUSH
50065: LD_VAR 0 2
50069: ARRAY
50070: PUSH
50071: LD_INT 2
50073: ARRAY
50074: PPUSH
50075: LD_VAR 0 3
50079: PPUSH
50080: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
50084: LD_ADDR_EXP 17
50088: PUSH
50089: LD_EXP 17
50093: PPUSH
50094: LD_VAR 0 1
50098: PPUSH
50099: LD_EXP 17
50103: PUSH
50104: LD_VAR 0 1
50108: ARRAY
50109: PPUSH
50110: LD_VAR 0 2
50114: PPUSH
50115: CALL_OW 3
50119: PPUSH
50120: CALL_OW 1
50124: ST_TO_ADDR
// end ; end ;
50125: GO 49874
50127: POP
50128: POP
// end ;
50129: GO 49792
50131: POP
50132: POP
// end ;
50133: PPOPN 4
50135: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
50136: LD_INT 0
50138: PPUSH
50139: PPUSH
// result := false ;
50140: LD_ADDR_VAR 0 4
50144: PUSH
50145: LD_INT 0
50147: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
50148: LD_VAR 0 1
50152: PPUSH
50153: CALL_OW 264
50157: PUSH
50158: LD_INT 81
50160: EQUAL
50161: NOT
50162: IFFALSE 50166
// exit ;
50164: GO 50410
// index := GetElementIndex ( minersList , unit ) ;
50166: LD_ADDR_VAR 0 5
50170: PUSH
50171: LD_EXP 16
50175: PPUSH
50176: LD_VAR 0 1
50180: PPUSH
50181: CALL 7667 0 2
50185: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
50186: LD_EXP 17
50190: PUSH
50191: LD_VAR 0 5
50195: ARRAY
50196: PUSH
50197: LD_EXP 18
50201: GREATEREQUAL
50202: IFFALSE 50206
// exit ;
50204: GO 50410
// ComMoveXY ( unit , x , y ) ;
50206: LD_VAR 0 1
50210: PPUSH
50211: LD_VAR 0 2
50215: PPUSH
50216: LD_VAR 0 3
50220: PPUSH
50221: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
50225: LD_INT 35
50227: PPUSH
50228: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
50232: LD_VAR 0 1
50236: PPUSH
50237: LD_VAR 0 2
50241: PPUSH
50242: LD_VAR 0 3
50246: PPUSH
50247: CALL 39713 0 3
50251: NOT
50252: IFFALSE 50265
50254: PUSH
50255: LD_VAR 0 1
50259: PPUSH
50260: CALL_OW 314
50264: AND
50265: IFFALSE 50269
// exit ;
50267: GO 50410
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
50269: LD_VAR 0 2
50273: PPUSH
50274: LD_VAR 0 3
50278: PPUSH
50279: CALL_OW 428
50283: PUSH
50284: LD_VAR 0 1
50288: EQUAL
50289: IFFALSE 50303
50291: PUSH
50292: LD_VAR 0 1
50296: PPUSH
50297: CALL_OW 314
50301: NOT
50302: AND
50303: IFFALSE 50225
// PlaySoundXY ( x , y , PlantMine ) ;
50305: LD_VAR 0 2
50309: PPUSH
50310: LD_VAR 0 3
50314: PPUSH
50315: LD_STRING PlantMine
50317: PPUSH
50318: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
50322: LD_VAR 0 2
50326: PPUSH
50327: LD_VAR 0 3
50331: PPUSH
50332: LD_VAR 0 1
50336: PPUSH
50337: CALL_OW 255
50341: PPUSH
50342: LD_INT 0
50344: PPUSH
50345: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
50349: LD_ADDR_EXP 17
50353: PUSH
50354: LD_EXP 17
50358: PPUSH
50359: LD_VAR 0 5
50363: PUSH
50364: LD_EXP 17
50368: PUSH
50369: LD_VAR 0 5
50373: ARRAY
50374: PUSH
50375: LD_INT 1
50377: PLUS
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PPUSH
50383: LD_VAR 0 2
50387: PUSH
50388: LD_VAR 0 3
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PPUSH
50397: CALL 7884 0 3
50401: ST_TO_ADDR
// result := true ;
50402: LD_ADDR_VAR 0 4
50406: PUSH
50407: LD_INT 1
50409: ST_TO_ADDR
// end ;
50410: LD_VAR 0 4
50414: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
50415: LD_INT 0
50417: PPUSH
50418: PPUSH
50419: PPUSH
// if not unit in minersList then
50420: LD_VAR 0 1
50424: PUSH
50425: LD_EXP 16
50429: IN
50430: NOT
50431: IFFALSE 50435
// exit ;
50433: GO 50829
// index := GetElementIndex ( minersList , unit ) ;
50435: LD_ADDR_VAR 0 6
50439: PUSH
50440: LD_EXP 16
50444: PPUSH
50445: LD_VAR 0 1
50449: PPUSH
50450: CALL 7667 0 2
50454: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
50455: LD_ADDR_VAR 0 5
50459: PUSH
50460: DOUBLE
50461: LD_EXP 17
50465: PUSH
50466: LD_VAR 0 6
50470: ARRAY
50471: INC
50472: ST_TO_ADDR
50473: LD_INT 1
50475: PUSH
50476: FOR_DOWNTO
50477: IFFALSE 50640
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
50479: LD_EXP 17
50483: PUSH
50484: LD_VAR 0 6
50488: ARRAY
50489: PUSH
50490: LD_VAR 0 5
50494: ARRAY
50495: PUSH
50496: LD_INT 1
50498: ARRAY
50499: PUSH
50500: LD_VAR 0 2
50504: EQUAL
50505: IFFALSE 50535
50507: PUSH
50508: LD_EXP 17
50512: PUSH
50513: LD_VAR 0 6
50517: ARRAY
50518: PUSH
50519: LD_VAR 0 5
50523: ARRAY
50524: PUSH
50525: LD_INT 2
50527: ARRAY
50528: PUSH
50529: LD_VAR 0 3
50533: EQUAL
50534: AND
50535: IFFALSE 50638
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
50537: LD_EXP 17
50541: PUSH
50542: LD_VAR 0 6
50546: ARRAY
50547: PUSH
50548: LD_VAR 0 5
50552: ARRAY
50553: PUSH
50554: LD_INT 1
50556: ARRAY
50557: PPUSH
50558: LD_EXP 17
50562: PUSH
50563: LD_VAR 0 6
50567: ARRAY
50568: PUSH
50569: LD_VAR 0 5
50573: ARRAY
50574: PUSH
50575: LD_INT 2
50577: ARRAY
50578: PPUSH
50579: LD_VAR 0 1
50583: PPUSH
50584: CALL_OW 255
50588: PPUSH
50589: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
50593: LD_ADDR_EXP 17
50597: PUSH
50598: LD_EXP 17
50602: PPUSH
50603: LD_VAR 0 6
50607: PPUSH
50608: LD_EXP 17
50612: PUSH
50613: LD_VAR 0 6
50617: ARRAY
50618: PPUSH
50619: LD_VAR 0 5
50623: PPUSH
50624: CALL_OW 3
50628: PPUSH
50629: CALL_OW 1
50633: ST_TO_ADDR
// exit ;
50634: POP
50635: POP
50636: GO 50829
// end ; end ;
50638: GO 50476
50640: POP
50641: POP
// for i := minerMinesList [ index ] downto 1 do
50642: LD_ADDR_VAR 0 5
50646: PUSH
50647: DOUBLE
50648: LD_EXP 17
50652: PUSH
50653: LD_VAR 0 6
50657: ARRAY
50658: INC
50659: ST_TO_ADDR
50660: LD_INT 1
50662: PUSH
50663: FOR_DOWNTO
50664: IFFALSE 50827
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
50666: LD_EXP 17
50670: PUSH
50671: LD_VAR 0 6
50675: ARRAY
50676: PUSH
50677: LD_VAR 0 5
50681: ARRAY
50682: PUSH
50683: LD_INT 1
50685: ARRAY
50686: PPUSH
50687: LD_EXP 17
50691: PUSH
50692: LD_VAR 0 6
50696: ARRAY
50697: PUSH
50698: LD_VAR 0 5
50702: ARRAY
50703: PUSH
50704: LD_INT 2
50706: ARRAY
50707: PPUSH
50708: LD_VAR 0 2
50712: PPUSH
50713: LD_VAR 0 3
50717: PPUSH
50718: CALL_OW 298
50722: PUSH
50723: LD_INT 6
50725: LESS
50726: IFFALSE 50825
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
50728: LD_EXP 17
50732: PUSH
50733: LD_VAR 0 6
50737: ARRAY
50738: PUSH
50739: LD_VAR 0 5
50743: ARRAY
50744: PUSH
50745: LD_INT 1
50747: ARRAY
50748: PPUSH
50749: LD_EXP 17
50753: PUSH
50754: LD_VAR 0 6
50758: ARRAY
50759: PUSH
50760: LD_VAR 0 5
50764: ARRAY
50765: PUSH
50766: LD_INT 2
50768: ARRAY
50769: PPUSH
50770: LD_VAR 0 1
50774: PPUSH
50775: CALL_OW 255
50779: PPUSH
50780: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
50784: LD_ADDR_EXP 17
50788: PUSH
50789: LD_EXP 17
50793: PPUSH
50794: LD_VAR 0 6
50798: PPUSH
50799: LD_EXP 17
50803: PUSH
50804: LD_VAR 0 6
50808: ARRAY
50809: PPUSH
50810: LD_VAR 0 5
50814: PPUSH
50815: CALL_OW 3
50819: PPUSH
50820: CALL_OW 1
50824: ST_TO_ADDR
// end ; end ;
50825: GO 50663
50827: POP
50828: POP
// end ;
50829: LD_VAR 0 4
50833: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
50834: LD_INT 0
50836: PPUSH
50837: PPUSH
50838: PPUSH
50839: PPUSH
50840: PPUSH
50841: PPUSH
50842: PPUSH
50843: PPUSH
50844: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
50845: LD_VAR 0 1
50849: PPUSH
50850: CALL_OW 264
50854: PUSH
50855: LD_INT 81
50857: EQUAL
50858: NOT
50859: IFTRUE 50874
50861: PUSH
50862: LD_VAR 0 1
50866: PUSH
50867: LD_EXP 16
50871: IN
50872: NOT
50873: OR
50874: IFFALSE 50878
// exit ;
50876: GO 51204
// index := GetElementIndex ( minersList , unit ) ;
50878: LD_ADDR_VAR 0 6
50882: PUSH
50883: LD_EXP 16
50887: PPUSH
50888: LD_VAR 0 1
50892: PPUSH
50893: CALL 7667 0 2
50897: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
50898: LD_ADDR_VAR 0 8
50902: PUSH
50903: LD_EXP 18
50907: PUSH
50908: LD_EXP 17
50912: PUSH
50913: LD_VAR 0 6
50917: ARRAY
50918: MINUS
50919: ST_TO_ADDR
// if not minesFreeAmount then
50920: LD_VAR 0 8
50924: NOT
50925: IFFALSE 50929
// exit ;
50927: GO 51204
// tmp := [ ] ;
50929: LD_ADDR_VAR 0 7
50933: PUSH
50934: EMPTY
50935: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
50936: LD_ADDR_VAR 0 5
50940: PUSH
50941: DOUBLE
50942: LD_INT 1
50944: DEC
50945: ST_TO_ADDR
50946: LD_VAR 0 8
50950: PUSH
50951: FOR_TO
50952: IFFALSE 51151
// begin _d := rand ( 0 , 5 ) ;
50954: LD_ADDR_VAR 0 11
50958: PUSH
50959: LD_INT 0
50961: PPUSH
50962: LD_INT 5
50964: PPUSH
50965: CALL_OW 12
50969: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
50970: LD_ADDR_VAR 0 12
50974: PUSH
50975: LD_INT 2
50977: PPUSH
50978: LD_INT 6
50980: PPUSH
50981: CALL_OW 12
50985: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
50986: LD_ADDR_VAR 0 9
50990: PUSH
50991: LD_VAR 0 2
50995: PPUSH
50996: LD_VAR 0 11
51000: PPUSH
51001: LD_VAR 0 12
51005: PPUSH
51006: CALL_OW 272
51010: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
51011: LD_ADDR_VAR 0 10
51015: PUSH
51016: LD_VAR 0 3
51020: PPUSH
51021: LD_VAR 0 11
51025: PPUSH
51026: LD_VAR 0 12
51030: PPUSH
51031: CALL_OW 273
51035: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
51036: LD_VAR 0 9
51040: PPUSH
51041: LD_VAR 0 10
51045: PPUSH
51046: CALL_OW 488
51050: IFFALSE 51074
51052: PUSH
51053: LD_VAR 0 9
51057: PUSH
51058: LD_VAR 0 10
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_VAR 0 7
51071: IN
51072: NOT
51073: AND
51074: IFFALSE 51093
51076: PUSH
51077: LD_VAR 0 9
51081: PPUSH
51082: LD_VAR 0 10
51086: PPUSH
51087: CALL_OW 458
51091: NOT
51092: AND
51093: IFFALSE 51135
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
51095: LD_ADDR_VAR 0 7
51099: PUSH
51100: LD_VAR 0 7
51104: PPUSH
51105: LD_VAR 0 7
51109: PUSH
51110: LD_INT 1
51112: PLUS
51113: PPUSH
51114: LD_VAR 0 9
51118: PUSH
51119: LD_VAR 0 10
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PPUSH
51128: CALL_OW 1
51132: ST_TO_ADDR
51133: GO 51149
// i := i - 1 ;
51135: LD_ADDR_VAR 0 5
51139: PUSH
51140: LD_VAR 0 5
51144: PUSH
51145: LD_INT 1
51147: MINUS
51148: ST_TO_ADDR
// end ;
51149: GO 50951
51151: POP
51152: POP
// for i in tmp do
51153: LD_ADDR_VAR 0 5
51157: PUSH
51158: LD_VAR 0 7
51162: PUSH
51163: FOR_IN
51164: IFFALSE 51202
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
51166: LD_VAR 0 1
51170: PPUSH
51171: LD_VAR 0 5
51175: PUSH
51176: LD_INT 1
51178: ARRAY
51179: PPUSH
51180: LD_VAR 0 5
51184: PUSH
51185: LD_INT 2
51187: ARRAY
51188: PPUSH
51189: CALL 50136 0 3
51193: NOT
51194: IFFALSE 51200
// exit ;
51196: POP
51197: POP
51198: GO 51204
51200: GO 51163
51202: POP
51203: POP
// end ;
51204: LD_VAR 0 4
51208: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
51209: LD_INT 0
51211: PPUSH
51212: PPUSH
51213: PPUSH
51214: PPUSH
51215: PPUSH
51216: PPUSH
51217: PPUSH
51218: PPUSH
51219: PPUSH
// if GetClass ( unit ) <> class_sniper then
51220: LD_VAR 0 1
51224: PPUSH
51225: CALL_OW 257
51229: PUSH
51230: LD_INT 5
51232: NONEQUAL
51233: IFFALSE 51237
// exit ;
51235: GO 51707
// dist := 8 ;
51237: LD_ADDR_VAR 0 5
51241: PUSH
51242: LD_INT 8
51244: ST_TO_ADDR
// viewRange := 12 ;
51245: LD_ADDR_VAR 0 8
51249: PUSH
51250: LD_INT 12
51252: ST_TO_ADDR
// side := GetSide ( unit ) ;
51253: LD_ADDR_VAR 0 6
51257: PUSH
51258: LD_VAR 0 1
51262: PPUSH
51263: CALL_OW 255
51267: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
51268: LD_INT 61
51270: PPUSH
51271: LD_VAR 0 6
51275: PPUSH
51276: CALL_OW 321
51280: PUSH
51281: LD_INT 2
51283: EQUAL
51284: IFFALSE 51294
// viewRange := 16 ;
51286: LD_ADDR_VAR 0 8
51290: PUSH
51291: LD_INT 16
51293: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
51294: LD_VAR 0 1
51298: PPUSH
51299: LD_VAR 0 2
51303: PPUSH
51304: LD_VAR 0 3
51308: PPUSH
51309: CALL_OW 297
51313: PUSH
51314: LD_VAR 0 5
51318: GREATER
51319: IFFALSE 51398
// begin ComMoveXY ( unit , x , y ) ;
51321: LD_VAR 0 1
51325: PPUSH
51326: LD_VAR 0 2
51330: PPUSH
51331: LD_VAR 0 3
51335: PPUSH
51336: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
51340: LD_INT 35
51342: PPUSH
51343: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
51347: LD_VAR 0 1
51351: PPUSH
51352: LD_VAR 0 2
51356: PPUSH
51357: LD_VAR 0 3
51361: PPUSH
51362: CALL 39713 0 3
51366: NOT
51367: IFFALSE 51371
// exit ;
51369: GO 51707
// until GetDistUnitXY ( unit , x , y ) < dist ;
51371: LD_VAR 0 1
51375: PPUSH
51376: LD_VAR 0 2
51380: PPUSH
51381: LD_VAR 0 3
51385: PPUSH
51386: CALL_OW 297
51390: PUSH
51391: LD_VAR 0 5
51395: LESS
51396: IFFALSE 51340
// end ; ComTurnXY ( unit , x , y ) ;
51398: LD_VAR 0 1
51402: PPUSH
51403: LD_VAR 0 2
51407: PPUSH
51408: LD_VAR 0 3
51412: PPUSH
51413: CALL_OW 118
// repeat if Multiplayer then
51417: LD_OWVAR 4
51421: IFFALSE 51432
// wait ( 35 ) else
51423: LD_INT 35
51425: PPUSH
51426: CALL_OW 67
51430: GO 51439
// wait ( 5 ) ;
51432: LD_INT 5
51434: PPUSH
51435: CALL_OW 67
// _d := GetDir ( unit ) ;
51439: LD_ADDR_VAR 0 11
51443: PUSH
51444: LD_VAR 0 1
51448: PPUSH
51449: CALL_OW 254
51453: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
51454: LD_ADDR_VAR 0 7
51458: PUSH
51459: LD_VAR 0 1
51463: PPUSH
51464: CALL_OW 250
51468: PPUSH
51469: LD_VAR 0 1
51473: PPUSH
51474: CALL_OW 251
51478: PPUSH
51479: LD_VAR 0 2
51483: PPUSH
51484: LD_VAR 0 3
51488: PPUSH
51489: CALL 42349 0 4
51493: ST_TO_ADDR
// until dir = _d ;
51494: LD_VAR 0 7
51498: PUSH
51499: LD_VAR 0 11
51503: EQUAL
51504: IFFALSE 51417
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
51506: LD_ADDR_VAR 0 9
51510: PUSH
51511: LD_VAR 0 1
51515: PPUSH
51516: CALL_OW 250
51520: PPUSH
51521: LD_VAR 0 7
51525: PPUSH
51526: LD_VAR 0 5
51530: PPUSH
51531: CALL_OW 272
51535: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
51536: LD_ADDR_VAR 0 10
51540: PUSH
51541: LD_VAR 0 1
51545: PPUSH
51546: CALL_OW 251
51550: PPUSH
51551: LD_VAR 0 7
51555: PPUSH
51556: LD_VAR 0 5
51560: PPUSH
51561: CALL_OW 273
51565: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51566: LD_VAR 0 9
51570: PPUSH
51571: LD_VAR 0 10
51575: PPUSH
51576: CALL_OW 488
51580: NOT
51581: IFFALSE 51585
// exit ;
51583: GO 51707
// ComAnimCustom ( unit , 1 ) ;
51585: LD_VAR 0 1
51589: PPUSH
51590: LD_INT 1
51592: PPUSH
51593: CALL_OW 592
// p := 0 ;
51597: LD_ADDR_VAR 0 12
51601: PUSH
51602: LD_INT 0
51604: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
51605: LD_VAR 0 9
51609: PPUSH
51610: LD_VAR 0 10
51614: PPUSH
51615: LD_VAR 0 6
51619: PPUSH
51620: LD_VAR 0 8
51624: PPUSH
51625: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
51629: LD_INT 35
51631: PPUSH
51632: CALL_OW 67
// p := Inc ( p ) ;
51636: LD_ADDR_VAR 0 12
51640: PUSH
51641: LD_VAR 0 12
51645: PPUSH
51646: CALL 42305 0 1
51650: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
51651: LD_VAR 0 12
51655: PUSH
51656: LD_INT 3
51658: EQUAL
51659: IFTRUE 51673
51661: PUSH
51662: LD_VAR 0 1
51666: PPUSH
51667: CALL_OW 302
51671: NOT
51672: OR
51673: IFTRUE 51686
51675: PUSH
51676: LD_VAR 0 1
51680: PPUSH
51681: CALL_OW 301
51685: OR
51686: IFFALSE 51629
// RemoveSeeing ( _x , _y , side ) ;
51688: LD_VAR 0 9
51692: PPUSH
51693: LD_VAR 0 10
51697: PPUSH
51698: LD_VAR 0 6
51702: PPUSH
51703: CALL_OW 331
// end ;
51707: LD_VAR 0 4
51711: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
51712: LD_INT 0
51714: PPUSH
51715: PPUSH
51716: PPUSH
51717: PPUSH
51718: PPUSH
51719: PPUSH
51720: PPUSH
51721: PPUSH
51722: PPUSH
51723: PPUSH
51724: PPUSH
// if not unit then
51725: LD_VAR 0 1
51729: NOT
51730: IFFALSE 51734
// exit ;
51732: GO 52005
// side := GetSide ( unit ) ;
51734: LD_ADDR_VAR 0 3
51738: PUSH
51739: LD_VAR 0 1
51743: PPUSH
51744: CALL_OW 255
51748: ST_TO_ADDR
// x := GetX ( unit ) ;
51749: LD_ADDR_VAR 0 5
51753: PUSH
51754: LD_VAR 0 1
51758: PPUSH
51759: CALL_OW 250
51763: ST_TO_ADDR
// y := GetY ( unit ) ;
51764: LD_ADDR_VAR 0 6
51768: PUSH
51769: LD_VAR 0 1
51773: PPUSH
51774: CALL_OW 251
51778: ST_TO_ADDR
// r := 8 ;
51779: LD_ADDR_VAR 0 4
51783: PUSH
51784: LD_INT 8
51786: ST_TO_ADDR
// if x - r < 0 then
51787: LD_VAR 0 5
51791: PUSH
51792: LD_VAR 0 4
51796: MINUS
51797: PUSH
51798: LD_INT 0
51800: LESS
51801: IFFALSE 51813
// min_x := 0 else
51803: LD_ADDR_VAR 0 7
51807: PUSH
51808: LD_INT 0
51810: ST_TO_ADDR
51811: GO 51829
// min_x := x - r ;
51813: LD_ADDR_VAR 0 7
51817: PUSH
51818: LD_VAR 0 5
51822: PUSH
51823: LD_VAR 0 4
51827: MINUS
51828: ST_TO_ADDR
// if y - r < 0 then
51829: LD_VAR 0 6
51833: PUSH
51834: LD_VAR 0 4
51838: MINUS
51839: PUSH
51840: LD_INT 0
51842: LESS
51843: IFFALSE 51855
// min_y := 0 else
51845: LD_ADDR_VAR 0 8
51849: PUSH
51850: LD_INT 0
51852: ST_TO_ADDR
51853: GO 51871
// min_y := y - r ;
51855: LD_ADDR_VAR 0 8
51859: PUSH
51860: LD_VAR 0 6
51864: PUSH
51865: LD_VAR 0 4
51869: MINUS
51870: ST_TO_ADDR
// max_x := x + r ;
51871: LD_ADDR_VAR 0 9
51875: PUSH
51876: LD_VAR 0 5
51880: PUSH
51881: LD_VAR 0 4
51885: PLUS
51886: ST_TO_ADDR
// max_y := y + r ;
51887: LD_ADDR_VAR 0 10
51891: PUSH
51892: LD_VAR 0 6
51896: PUSH
51897: LD_VAR 0 4
51901: PLUS
51902: ST_TO_ADDR
// for _x = min_x to max_x do
51903: LD_ADDR_VAR 0 11
51907: PUSH
51908: DOUBLE
51909: LD_VAR 0 7
51913: DEC
51914: ST_TO_ADDR
51915: LD_VAR 0 9
51919: PUSH
51920: FOR_TO
51921: IFFALSE 52003
// for _y = min_y to max_y do
51923: LD_ADDR_VAR 0 12
51927: PUSH
51928: DOUBLE
51929: LD_VAR 0 8
51933: DEC
51934: ST_TO_ADDR
51935: LD_VAR 0 10
51939: PUSH
51940: FOR_TO
51941: IFFALSE 51999
// begin if not ValidHex ( _x , _y ) then
51943: LD_VAR 0 11
51947: PPUSH
51948: LD_VAR 0 12
51952: PPUSH
51953: CALL_OW 488
51957: NOT
51958: IFFALSE 51962
// continue ;
51960: GO 51940
// if MineAtPos ( _x , _y ) then
51962: LD_VAR 0 11
51966: PPUSH
51967: LD_VAR 0 12
51971: PPUSH
51972: CALL_OW 458
51976: IFFALSE 51997
// ViewMineAtPos ( _x , _y , side ) ;
51978: LD_VAR 0 11
51982: PPUSH
51983: LD_VAR 0 12
51987: PPUSH
51988: LD_VAR 0 3
51992: PPUSH
51993: CALL_OW 457
// end ;
51997: GO 51940
51999: POP
52000: POP
52001: GO 51920
52003: POP
52004: POP
// end ;
52005: LD_VAR 0 2
52009: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
52010: LD_INT 0
52012: PPUSH
52013: PPUSH
52014: PPUSH
52015: PPUSH
52016: PPUSH
52017: PPUSH
// if not units then
52018: LD_VAR 0 1
52022: NOT
52023: IFFALSE 52027
// exit ;
52025: GO 52457
// scaners := [ ] ;
52027: LD_ADDR_VAR 0 6
52031: PUSH
52032: EMPTY
52033: ST_TO_ADDR
// for i in units do
52034: LD_ADDR_VAR 0 3
52038: PUSH
52039: LD_VAR 0 1
52043: PUSH
52044: FOR_IN
52045: IFFALSE 52202
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
52047: LD_VAR 0 3
52051: PPUSH
52052: CALL_OW 264
52056: PUSH
52057: LD_INT 11
52059: NONEQUAL
52060: IFTRUE 52074
52062: PUSH
52063: LD_VAR 0 3
52067: PPUSH
52068: CALL_OW 302
52072: NOT
52073: OR
52074: IFTRUE 52091
52076: PUSH
52077: LD_VAR 0 3
52081: PPUSH
52082: CALL_OW 110
52086: PUSH
52087: LD_INT 502
52089: EQUAL
52090: OR
52091: IFFALSE 52095
// continue ;
52093: GO 52044
// ComStop ( i ) ;
52095: LD_VAR 0 3
52099: PPUSH
52100: CALL_OW 141
// x := GetX ( i ) ;
52104: LD_ADDR_VAR 0 4
52108: PUSH
52109: LD_VAR 0 3
52113: PPUSH
52114: CALL_OW 250
52118: ST_TO_ADDR
// y := GetY ( i ) ;
52119: LD_ADDR_VAR 0 5
52123: PUSH
52124: LD_VAR 0 3
52128: PPUSH
52129: CALL_OW 251
52133: ST_TO_ADDR
// if GetSide ( i ) = your_side then
52134: LD_VAR 0 3
52138: PPUSH
52139: CALL_OW 255
52143: PUSH
52144: LD_OWVAR 2
52148: EQUAL
52149: IFFALSE 52168
// PlaySoundXY ( x , y , mineDetector ) ;
52151: LD_VAR 0 4
52155: PPUSH
52156: LD_VAR 0 5
52160: PPUSH
52161: LD_STRING mineDetector
52163: PPUSH
52164: CALL_OW 366
// scaners := Join ( scaners , i ) ;
52168: LD_ADDR_VAR 0 6
52172: PUSH
52173: LD_VAR 0 6
52177: PPUSH
52178: LD_VAR 0 3
52182: PPUSH
52183: CALL 40932 0 2
52187: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
52188: LD_VAR 0 3
52192: PPUSH
52193: LD_INT 502
52195: PPUSH
52196: CALL_OW 109
// end ;
52200: GO 52044
52202: POP
52203: POP
// if not scaners then
52204: LD_VAR 0 6
52208: NOT
52209: IFFALSE 52213
// exit ;
52211: GO 52457
// wait ( 3 ) ;
52213: LD_INT 3
52215: PPUSH
52216: CALL_OW 67
// timer := 6 ;
52220: LD_ADDR_VAR 0 7
52224: PUSH
52225: LD_INT 6
52227: ST_TO_ADDR
// repeat for i in scaners do
52228: LD_ADDR_VAR 0 3
52232: PUSH
52233: LD_VAR 0 6
52237: PUSH
52238: FOR_IN
52239: IFFALSE 52355
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
52241: LD_VAR 0 3
52245: PPUSH
52246: CALL_OW 302
52250: NOT
52251: IFTRUE 52264
52253: PUSH
52254: LD_VAR 0 3
52258: PPUSH
52259: CALL_OW 314
52263: OR
52264: IFTRUE 52295
52266: PUSH
52267: LD_VAR 0 3
52271: PPUSH
52272: CALL_OW 263
52276: PUSH
52277: LD_INT 1
52279: EQUAL
52280: IFFALSE 52294
52282: PUSH
52283: LD_VAR 0 3
52287: PPUSH
52288: CALL_OW 311
52292: NOT
52293: AND
52294: OR
52295: IFFALSE 52339
// begin SetUnitDisplayNumber ( i , 0 ) ;
52297: LD_VAR 0 3
52301: PPUSH
52302: LD_INT 0
52304: PPUSH
52305: CALL_OW 505
// SetTag ( i , 0 ) ;
52309: LD_VAR 0 3
52313: PPUSH
52314: LD_INT 0
52316: PPUSH
52317: CALL_OW 109
// scaners := scaners diff i ;
52321: LD_ADDR_VAR 0 6
52325: PUSH
52326: LD_VAR 0 6
52330: PUSH
52331: LD_VAR 0 3
52335: DIFF
52336: ST_TO_ADDR
// continue ;
52337: GO 52238
// end ; SetUnitDisplayNumber ( i , timer ) ;
52339: LD_VAR 0 3
52343: PPUSH
52344: LD_VAR 0 7
52348: PPUSH
52349: CALL_OW 505
// end ;
52353: GO 52238
52355: POP
52356: POP
// if not scaners then
52357: LD_VAR 0 6
52361: NOT
52362: IFFALSE 52366
// exit ;
52364: GO 52457
// timer := Dec ( timer ) ;
52366: LD_ADDR_VAR 0 7
52370: PUSH
52371: LD_VAR 0 7
52375: PPUSH
52376: CALL 42327 0 1
52380: ST_TO_ADDR
// wait ( 0 0$1 ) ;
52381: LD_INT 35
52383: PPUSH
52384: CALL_OW 67
// until timer = 0 ;
52388: LD_VAR 0 7
52392: PUSH
52393: LD_INT 0
52395: EQUAL
52396: IFFALSE 52228
// if not scaners then
52398: LD_VAR 0 6
52402: NOT
52403: IFFALSE 52407
// exit ;
52405: GO 52457
// for i in scaners do
52407: LD_ADDR_VAR 0 3
52411: PUSH
52412: LD_VAR 0 6
52416: PUSH
52417: FOR_IN
52418: IFFALSE 52455
// begin SetUnitDisplayNumber ( i , 0 ) ;
52420: LD_VAR 0 3
52424: PPUSH
52425: LD_INT 0
52427: PPUSH
52428: CALL_OW 505
// SetTag ( i , 0 ) ;
52432: LD_VAR 0 3
52436: PPUSH
52437: LD_INT 0
52439: PPUSH
52440: CALL_OW 109
// RevealDetectorMine ( i ) ;
52444: LD_VAR 0 3
52448: PPUSH
52449: CALL 51712 0 1
// end ;
52453: GO 52417
52455: POP
52456: POP
// end ;
52457: LD_VAR 0 2
52461: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
52462: LD_INT 0
52464: PPUSH
// if p1 = mine_detector_mode then
52465: LD_VAR 0 2
52469: PUSH
52470: LD_INT 103
52472: EQUAL
52473: IFFALSE 52484
// DetectMine ( units ) ;
52475: LD_VAR 0 1
52479: PPUSH
52480: CALL 52010 0 1
// end ; end_of_file
52484: LD_VAR 0 7
52488: RET
// export globalGameSaveCounter ; every 0 0$1 do
52489: GO 52491
52491: DISABLE
// begin enable ;
52492: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
52493: LD_STRING updateTimer(
52495: PUSH
52496: LD_OWVAR 1
52500: STR
52501: PUSH
52502: LD_STRING );
52504: STR
52505: PPUSH
52506: CALL_OW 559
// end ;
52510: END
// every 0 0$1 do
52511: GO 52513
52513: DISABLE
// begin globalGameSaveCounter := 0 ;
52514: LD_ADDR_EXP 19
52518: PUSH
52519: LD_INT 0
52521: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
52522: LD_STRING setGameSaveCounter(0)
52524: PPUSH
52525: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
52529: LD_STRING initStreamRollete();
52531: PPUSH
52532: CALL_OW 559
// InitStreamMode ;
52536: CALL 53881 0 0
// DefineStreamItems ( false ) ;
52540: LD_INT 0
52542: PPUSH
52543: CALL 54345 0 1
// end ;
52547: END
// export function SOS_MapStart ( ) ; begin
52548: LD_INT 0
52550: PPUSH
// if streamModeActive then
52551: LD_EXP 20
52555: IFFALSE 52564
// DefineStreamItems ( true ) ;
52557: LD_INT 1
52559: PPUSH
52560: CALL 54345 0 1
// UpdateLuaVariables ( ) ;
52564: CALL 52581 0 0
// UpdateFactoryWaypoints ( ) ;
52568: CALL 67467 0 0
// UpdateWarehouseGatheringPoints ( ) ;
52572: CALL 67719 0 0
// end ;
52576: LD_VAR 0 1
52580: RET
// function UpdateLuaVariables ( ) ; begin
52581: LD_INT 0
52583: PPUSH
// if globalGameSaveCounter then
52584: LD_EXP 19
52588: IFFALSE 52622
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
52590: LD_ADDR_EXP 19
52594: PUSH
52595: LD_EXP 19
52599: PPUSH
52600: CALL 42305 0 1
52604: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
52605: LD_STRING setGameSaveCounter(
52607: PUSH
52608: LD_EXP 19
52612: STR
52613: PUSH
52614: LD_STRING )
52616: STR
52617: PPUSH
52618: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
52622: LD_STRING setGameDifficulty(
52624: PUSH
52625: LD_OWVAR 67
52629: STR
52630: PUSH
52631: LD_STRING )
52633: STR
52634: PPUSH
52635: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
52639: LD_STRING displayDifficulty(
52641: PUSH
52642: LD_OWVAR 67
52646: STR
52647: PUSH
52648: LD_STRING )
52650: STR
52651: PPUSH
52652: CALL_OW 559
// end ;
52656: LD_VAR 0 1
52660: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
52661: LD_INT 0
52663: PPUSH
// if p2 = stream_mode then
52664: LD_VAR 0 2
52668: PUSH
52669: LD_INT 100
52671: EQUAL
52672: IFFALSE 53675
// begin if not StreamModeActive then
52674: LD_EXP 20
52678: NOT
52679: IFFALSE 52689
// StreamModeActive := true ;
52681: LD_ADDR_EXP 20
52685: PUSH
52686: LD_INT 1
52688: ST_TO_ADDR
// if p3 = 0 then
52689: LD_VAR 0 3
52693: PUSH
52694: LD_INT 0
52696: EQUAL
52697: IFFALSE 52703
// InitStreamMode ;
52699: CALL 53881 0 0
// if p3 = 1 then
52703: LD_VAR 0 3
52707: PUSH
52708: LD_INT 1
52710: EQUAL
52711: IFFALSE 52721
// sRocket := true ;
52713: LD_ADDR_EXP 25
52717: PUSH
52718: LD_INT 1
52720: ST_TO_ADDR
// if p3 = 2 then
52721: LD_VAR 0 3
52725: PUSH
52726: LD_INT 2
52728: EQUAL
52729: IFFALSE 52739
// sSpeed := true ;
52731: LD_ADDR_EXP 24
52735: PUSH
52736: LD_INT 1
52738: ST_TO_ADDR
// if p3 = 3 then
52739: LD_VAR 0 3
52743: PUSH
52744: LD_INT 3
52746: EQUAL
52747: IFFALSE 52757
// sEngine := true ;
52749: LD_ADDR_EXP 26
52753: PUSH
52754: LD_INT 1
52756: ST_TO_ADDR
// if p3 = 4 then
52757: LD_VAR 0 3
52761: PUSH
52762: LD_INT 4
52764: EQUAL
52765: IFFALSE 52775
// sSpec := true ;
52767: LD_ADDR_EXP 23
52771: PUSH
52772: LD_INT 1
52774: ST_TO_ADDR
// if p3 = 5 then
52775: LD_VAR 0 3
52779: PUSH
52780: LD_INT 5
52782: EQUAL
52783: IFFALSE 52793
// sLevel := true ;
52785: LD_ADDR_EXP 27
52789: PUSH
52790: LD_INT 1
52792: ST_TO_ADDR
// if p3 = 6 then
52793: LD_VAR 0 3
52797: PUSH
52798: LD_INT 6
52800: EQUAL
52801: IFFALSE 52811
// sArmoury := true ;
52803: LD_ADDR_EXP 28
52807: PUSH
52808: LD_INT 1
52810: ST_TO_ADDR
// if p3 = 7 then
52811: LD_VAR 0 3
52815: PUSH
52816: LD_INT 7
52818: EQUAL
52819: IFFALSE 52829
// sRadar := true ;
52821: LD_ADDR_EXP 29
52825: PUSH
52826: LD_INT 1
52828: ST_TO_ADDR
// if p3 = 8 then
52829: LD_VAR 0 3
52833: PUSH
52834: LD_INT 8
52836: EQUAL
52837: IFFALSE 52847
// sBunker := true ;
52839: LD_ADDR_EXP 30
52843: PUSH
52844: LD_INT 1
52846: ST_TO_ADDR
// if p3 = 9 then
52847: LD_VAR 0 3
52851: PUSH
52852: LD_INT 9
52854: EQUAL
52855: IFFALSE 52865
// sHack := true ;
52857: LD_ADDR_EXP 31
52861: PUSH
52862: LD_INT 1
52864: ST_TO_ADDR
// if p3 = 10 then
52865: LD_VAR 0 3
52869: PUSH
52870: LD_INT 10
52872: EQUAL
52873: IFFALSE 52883
// sFire := true ;
52875: LD_ADDR_EXP 32
52879: PUSH
52880: LD_INT 1
52882: ST_TO_ADDR
// if p3 = 11 then
52883: LD_VAR 0 3
52887: PUSH
52888: LD_INT 11
52890: EQUAL
52891: IFFALSE 52901
// sRefresh := true ;
52893: LD_ADDR_EXP 33
52897: PUSH
52898: LD_INT 1
52900: ST_TO_ADDR
// if p3 = 12 then
52901: LD_VAR 0 3
52905: PUSH
52906: LD_INT 12
52908: EQUAL
52909: IFFALSE 52919
// sExp := true ;
52911: LD_ADDR_EXP 34
52915: PUSH
52916: LD_INT 1
52918: ST_TO_ADDR
// if p3 = 13 then
52919: LD_VAR 0 3
52923: PUSH
52924: LD_INT 13
52926: EQUAL
52927: IFFALSE 52937
// sDepot := true ;
52929: LD_ADDR_EXP 35
52933: PUSH
52934: LD_INT 1
52936: ST_TO_ADDR
// if p3 = 14 then
52937: LD_VAR 0 3
52941: PUSH
52942: LD_INT 14
52944: EQUAL
52945: IFFALSE 52955
// sFlag := true ;
52947: LD_ADDR_EXP 36
52951: PUSH
52952: LD_INT 1
52954: ST_TO_ADDR
// if p3 = 15 then
52955: LD_VAR 0 3
52959: PUSH
52960: LD_INT 15
52962: EQUAL
52963: IFFALSE 52973
// sKamikadze := true ;
52965: LD_ADDR_EXP 44
52969: PUSH
52970: LD_INT 1
52972: ST_TO_ADDR
// if p3 = 16 then
52973: LD_VAR 0 3
52977: PUSH
52978: LD_INT 16
52980: EQUAL
52981: IFFALSE 52991
// sTroll := true ;
52983: LD_ADDR_EXP 45
52987: PUSH
52988: LD_INT 1
52990: ST_TO_ADDR
// if p3 = 17 then
52991: LD_VAR 0 3
52995: PUSH
52996: LD_INT 17
52998: EQUAL
52999: IFFALSE 53009
// sSlow := true ;
53001: LD_ADDR_EXP 46
53005: PUSH
53006: LD_INT 1
53008: ST_TO_ADDR
// if p3 = 18 then
53009: LD_VAR 0 3
53013: PUSH
53014: LD_INT 18
53016: EQUAL
53017: IFFALSE 53027
// sLack := true ;
53019: LD_ADDR_EXP 47
53023: PUSH
53024: LD_INT 1
53026: ST_TO_ADDR
// if p3 = 19 then
53027: LD_VAR 0 3
53031: PUSH
53032: LD_INT 19
53034: EQUAL
53035: IFFALSE 53045
// sTank := true ;
53037: LD_ADDR_EXP 49
53041: PUSH
53042: LD_INT 1
53044: ST_TO_ADDR
// if p3 = 20 then
53045: LD_VAR 0 3
53049: PUSH
53050: LD_INT 20
53052: EQUAL
53053: IFFALSE 53063
// sRemote := true ;
53055: LD_ADDR_EXP 50
53059: PUSH
53060: LD_INT 1
53062: ST_TO_ADDR
// if p3 = 21 then
53063: LD_VAR 0 3
53067: PUSH
53068: LD_INT 21
53070: EQUAL
53071: IFFALSE 53081
// sPowell := true ;
53073: LD_ADDR_EXP 51
53077: PUSH
53078: LD_INT 1
53080: ST_TO_ADDR
// if p3 = 22 then
53081: LD_VAR 0 3
53085: PUSH
53086: LD_INT 22
53088: EQUAL
53089: IFFALSE 53099
// sTeleport := true ;
53091: LD_ADDR_EXP 54
53095: PUSH
53096: LD_INT 1
53098: ST_TO_ADDR
// if p3 = 23 then
53099: LD_VAR 0 3
53103: PUSH
53104: LD_INT 23
53106: EQUAL
53107: IFFALSE 53117
// sOilTower := true ;
53109: LD_ADDR_EXP 56
53113: PUSH
53114: LD_INT 1
53116: ST_TO_ADDR
// if p3 = 24 then
53117: LD_VAR 0 3
53121: PUSH
53122: LD_INT 24
53124: EQUAL
53125: IFFALSE 53135
// sShovel := true ;
53127: LD_ADDR_EXP 57
53131: PUSH
53132: LD_INT 1
53134: ST_TO_ADDR
// if p3 = 25 then
53135: LD_VAR 0 3
53139: PUSH
53140: LD_INT 25
53142: EQUAL
53143: IFFALSE 53153
// sSheik := true ;
53145: LD_ADDR_EXP 58
53149: PUSH
53150: LD_INT 1
53152: ST_TO_ADDR
// if p3 = 26 then
53153: LD_VAR 0 3
53157: PUSH
53158: LD_INT 26
53160: EQUAL
53161: IFFALSE 53171
// sEarthquake := true ;
53163: LD_ADDR_EXP 60
53167: PUSH
53168: LD_INT 1
53170: ST_TO_ADDR
// if p3 = 27 then
53171: LD_VAR 0 3
53175: PUSH
53176: LD_INT 27
53178: EQUAL
53179: IFFALSE 53189
// sAI := true ;
53181: LD_ADDR_EXP 61
53185: PUSH
53186: LD_INT 1
53188: ST_TO_ADDR
// if p3 = 28 then
53189: LD_VAR 0 3
53193: PUSH
53194: LD_INT 28
53196: EQUAL
53197: IFFALSE 53207
// sCargo := true ;
53199: LD_ADDR_EXP 64
53203: PUSH
53204: LD_INT 1
53206: ST_TO_ADDR
// if p3 = 29 then
53207: LD_VAR 0 3
53211: PUSH
53212: LD_INT 29
53214: EQUAL
53215: IFFALSE 53225
// sDLaser := true ;
53217: LD_ADDR_EXP 65
53221: PUSH
53222: LD_INT 1
53224: ST_TO_ADDR
// if p3 = 30 then
53225: LD_VAR 0 3
53229: PUSH
53230: LD_INT 30
53232: EQUAL
53233: IFFALSE 53243
// sExchange := true ;
53235: LD_ADDR_EXP 66
53239: PUSH
53240: LD_INT 1
53242: ST_TO_ADDR
// if p3 = 31 then
53243: LD_VAR 0 3
53247: PUSH
53248: LD_INT 31
53250: EQUAL
53251: IFFALSE 53261
// sFac := true ;
53253: LD_ADDR_EXP 67
53257: PUSH
53258: LD_INT 1
53260: ST_TO_ADDR
// if p3 = 32 then
53261: LD_VAR 0 3
53265: PUSH
53266: LD_INT 32
53268: EQUAL
53269: IFFALSE 53279
// sPower := true ;
53271: LD_ADDR_EXP 68
53275: PUSH
53276: LD_INT 1
53278: ST_TO_ADDR
// if p3 = 33 then
53279: LD_VAR 0 3
53283: PUSH
53284: LD_INT 33
53286: EQUAL
53287: IFFALSE 53297
// sRandom := true ;
53289: LD_ADDR_EXP 69
53293: PUSH
53294: LD_INT 1
53296: ST_TO_ADDR
// if p3 = 34 then
53297: LD_VAR 0 3
53301: PUSH
53302: LD_INT 34
53304: EQUAL
53305: IFFALSE 53315
// sShield := true ;
53307: LD_ADDR_EXP 70
53311: PUSH
53312: LD_INT 1
53314: ST_TO_ADDR
// if p3 = 35 then
53315: LD_VAR 0 3
53319: PUSH
53320: LD_INT 35
53322: EQUAL
53323: IFFALSE 53333
// sTime := true ;
53325: LD_ADDR_EXP 71
53329: PUSH
53330: LD_INT 1
53332: ST_TO_ADDR
// if p3 = 36 then
53333: LD_VAR 0 3
53337: PUSH
53338: LD_INT 36
53340: EQUAL
53341: IFFALSE 53351
// sTools := true ;
53343: LD_ADDR_EXP 72
53347: PUSH
53348: LD_INT 1
53350: ST_TO_ADDR
// if p3 = 101 then
53351: LD_VAR 0 3
53355: PUSH
53356: LD_INT 101
53358: EQUAL
53359: IFFALSE 53369
// sSold := true ;
53361: LD_ADDR_EXP 37
53365: PUSH
53366: LD_INT 1
53368: ST_TO_ADDR
// if p3 = 102 then
53369: LD_VAR 0 3
53373: PUSH
53374: LD_INT 102
53376: EQUAL
53377: IFFALSE 53387
// sDiff := true ;
53379: LD_ADDR_EXP 38
53383: PUSH
53384: LD_INT 1
53386: ST_TO_ADDR
// if p3 = 103 then
53387: LD_VAR 0 3
53391: PUSH
53392: LD_INT 103
53394: EQUAL
53395: IFFALSE 53405
// sFog := true ;
53397: LD_ADDR_EXP 41
53401: PUSH
53402: LD_INT 1
53404: ST_TO_ADDR
// if p3 = 104 then
53405: LD_VAR 0 3
53409: PUSH
53410: LD_INT 104
53412: EQUAL
53413: IFFALSE 53423
// sReset := true ;
53415: LD_ADDR_EXP 42
53419: PUSH
53420: LD_INT 1
53422: ST_TO_ADDR
// if p3 = 105 then
53423: LD_VAR 0 3
53427: PUSH
53428: LD_INT 105
53430: EQUAL
53431: IFFALSE 53441
// sSun := true ;
53433: LD_ADDR_EXP 43
53437: PUSH
53438: LD_INT 1
53440: ST_TO_ADDR
// if p3 = 106 then
53441: LD_VAR 0 3
53445: PUSH
53446: LD_INT 106
53448: EQUAL
53449: IFFALSE 53459
// sTiger := true ;
53451: LD_ADDR_EXP 39
53455: PUSH
53456: LD_INT 1
53458: ST_TO_ADDR
// if p3 = 107 then
53459: LD_VAR 0 3
53463: PUSH
53464: LD_INT 107
53466: EQUAL
53467: IFFALSE 53477
// sBomb := true ;
53469: LD_ADDR_EXP 40
53473: PUSH
53474: LD_INT 1
53476: ST_TO_ADDR
// if p3 = 108 then
53477: LD_VAR 0 3
53481: PUSH
53482: LD_INT 108
53484: EQUAL
53485: IFFALSE 53495
// sWound := true ;
53487: LD_ADDR_EXP 48
53491: PUSH
53492: LD_INT 1
53494: ST_TO_ADDR
// if p3 = 109 then
53495: LD_VAR 0 3
53499: PUSH
53500: LD_INT 109
53502: EQUAL
53503: IFFALSE 53513
// sBetray := true ;
53505: LD_ADDR_EXP 52
53509: PUSH
53510: LD_INT 1
53512: ST_TO_ADDR
// if p3 = 110 then
53513: LD_VAR 0 3
53517: PUSH
53518: LD_INT 110
53520: EQUAL
53521: IFFALSE 53531
// sContamin := true ;
53523: LD_ADDR_EXP 53
53527: PUSH
53528: LD_INT 1
53530: ST_TO_ADDR
// if p3 = 111 then
53531: LD_VAR 0 3
53535: PUSH
53536: LD_INT 111
53538: EQUAL
53539: IFFALSE 53549
// sOil := true ;
53541: LD_ADDR_EXP 55
53545: PUSH
53546: LD_INT 1
53548: ST_TO_ADDR
// if p3 = 112 then
53549: LD_VAR 0 3
53553: PUSH
53554: LD_INT 112
53556: EQUAL
53557: IFFALSE 53567
// sStu := true ;
53559: LD_ADDR_EXP 59
53563: PUSH
53564: LD_INT 1
53566: ST_TO_ADDR
// if p3 = 113 then
53567: LD_VAR 0 3
53571: PUSH
53572: LD_INT 113
53574: EQUAL
53575: IFFALSE 53585
// sBazooka := true ;
53577: LD_ADDR_EXP 62
53581: PUSH
53582: LD_INT 1
53584: ST_TO_ADDR
// if p3 = 114 then
53585: LD_VAR 0 3
53589: PUSH
53590: LD_INT 114
53592: EQUAL
53593: IFFALSE 53603
// sMortar := true ;
53595: LD_ADDR_EXP 63
53599: PUSH
53600: LD_INT 1
53602: ST_TO_ADDR
// if p3 = 115 then
53603: LD_VAR 0 3
53607: PUSH
53608: LD_INT 115
53610: EQUAL
53611: IFFALSE 53621
// sRanger := true ;
53613: LD_ADDR_EXP 73
53617: PUSH
53618: LD_INT 1
53620: ST_TO_ADDR
// if p3 = 116 then
53621: LD_VAR 0 3
53625: PUSH
53626: LD_INT 116
53628: EQUAL
53629: IFFALSE 53639
// sComputer := true ;
53631: LD_ADDR_EXP 74
53635: PUSH
53636: LD_INT 1
53638: ST_TO_ADDR
// if p3 = 117 then
53639: LD_VAR 0 3
53643: PUSH
53644: LD_INT 117
53646: EQUAL
53647: IFFALSE 53657
// s30 := true ;
53649: LD_ADDR_EXP 75
53653: PUSH
53654: LD_INT 1
53656: ST_TO_ADDR
// if p3 = 118 then
53657: LD_VAR 0 3
53661: PUSH
53662: LD_INT 118
53664: EQUAL
53665: IFFALSE 53675
// s60 := true ;
53667: LD_ADDR_EXP 76
53671: PUSH
53672: LD_INT 1
53674: ST_TO_ADDR
// end ; if p2 = hack_mode then
53675: LD_VAR 0 2
53679: PUSH
53680: LD_INT 101
53682: EQUAL
53683: IFFALSE 53811
// begin case p3 of 1 :
53685: LD_VAR 0 3
53689: PUSH
53690: LD_INT 1
53692: DOUBLE
53693: EQUAL
53694: IFTRUE 53698
53696: GO 53705
53698: POP
// hHackUnlimitedResources ; 2 :
53699: CALL 66074 0 0
53703: GO 53811
53705: LD_INT 2
53707: DOUBLE
53708: EQUAL
53709: IFTRUE 53713
53711: GO 53720
53713: POP
// hHackSetLevel10 ; 3 :
53714: CALL 66207 0 0
53718: GO 53811
53720: LD_INT 3
53722: DOUBLE
53723: EQUAL
53724: IFTRUE 53728
53726: GO 53735
53728: POP
// hHackSetLevel10YourUnits ; 4 :
53729: CALL 66292 0 0
53733: GO 53811
53735: LD_INT 4
53737: DOUBLE
53738: EQUAL
53739: IFTRUE 53743
53741: GO 53750
53743: POP
// hHackInvincible ; 5 :
53744: CALL 66740 0 0
53748: GO 53811
53750: LD_INT 5
53752: DOUBLE
53753: EQUAL
53754: IFTRUE 53758
53756: GO 53765
53758: POP
// hHackInvisible ; 6 :
53759: CALL 66851 0 0
53763: GO 53811
53765: LD_INT 6
53767: DOUBLE
53768: EQUAL
53769: IFTRUE 53773
53771: GO 53780
53773: POP
// hHackChangeYourSide ; 7 :
53774: CALL 66908 0 0
53778: GO 53811
53780: LD_INT 7
53782: DOUBLE
53783: EQUAL
53784: IFTRUE 53788
53786: GO 53795
53788: POP
// hHackChangeUnitSide ; 8 :
53789: CALL 66950 0 0
53793: GO 53811
53795: LD_INT 8
53797: DOUBLE
53798: EQUAL
53799: IFTRUE 53803
53801: GO 53810
53803: POP
// hHackFog ; end ;
53804: CALL 67051 0 0
53808: GO 53811
53810: POP
// end ; if p2 = game_save_mode then
53811: LD_VAR 0 2
53815: PUSH
53816: LD_INT 102
53818: EQUAL
53819: IFFALSE 53876
// begin if p3 = 1 then
53821: LD_VAR 0 3
53825: PUSH
53826: LD_INT 1
53828: EQUAL
53829: IFFALSE 53841
// globalGameSaveCounter := p4 ;
53831: LD_ADDR_EXP 19
53835: PUSH
53836: LD_VAR 0 4
53840: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
53841: LD_VAR 0 3
53845: PUSH
53846: LD_INT 2
53848: EQUAL
53849: IFFALSE 53857
53851: PUSH
53852: LD_EXP 19
53856: AND
53857: IFFALSE 53876
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
53859: LD_STRING setGameSaveCounter(
53861: PUSH
53862: LD_EXP 19
53866: STR
53867: PUSH
53868: LD_STRING )
53870: STR
53871: PPUSH
53872: CALL_OW 559
// end ; end ;
53876: LD_VAR 0 7
53880: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
53881: LD_INT 0
53883: PPUSH
// streamModeActive := false ;
53884: LD_ADDR_EXP 20
53888: PUSH
53889: LD_INT 0
53891: ST_TO_ADDR
// normalCounter := 36 ;
53892: LD_ADDR_EXP 21
53896: PUSH
53897: LD_INT 36
53899: ST_TO_ADDR
// hardcoreCounter := 18 ;
53900: LD_ADDR_EXP 22
53904: PUSH
53905: LD_INT 18
53907: ST_TO_ADDR
// sRocket := false ;
53908: LD_ADDR_EXP 25
53912: PUSH
53913: LD_INT 0
53915: ST_TO_ADDR
// sSpeed := false ;
53916: LD_ADDR_EXP 24
53920: PUSH
53921: LD_INT 0
53923: ST_TO_ADDR
// sEngine := false ;
53924: LD_ADDR_EXP 26
53928: PUSH
53929: LD_INT 0
53931: ST_TO_ADDR
// sSpec := false ;
53932: LD_ADDR_EXP 23
53936: PUSH
53937: LD_INT 0
53939: ST_TO_ADDR
// sLevel := false ;
53940: LD_ADDR_EXP 27
53944: PUSH
53945: LD_INT 0
53947: ST_TO_ADDR
// sArmoury := false ;
53948: LD_ADDR_EXP 28
53952: PUSH
53953: LD_INT 0
53955: ST_TO_ADDR
// sRadar := false ;
53956: LD_ADDR_EXP 29
53960: PUSH
53961: LD_INT 0
53963: ST_TO_ADDR
// sBunker := false ;
53964: LD_ADDR_EXP 30
53968: PUSH
53969: LD_INT 0
53971: ST_TO_ADDR
// sHack := false ;
53972: LD_ADDR_EXP 31
53976: PUSH
53977: LD_INT 0
53979: ST_TO_ADDR
// sFire := false ;
53980: LD_ADDR_EXP 32
53984: PUSH
53985: LD_INT 0
53987: ST_TO_ADDR
// sRefresh := false ;
53988: LD_ADDR_EXP 33
53992: PUSH
53993: LD_INT 0
53995: ST_TO_ADDR
// sExp := false ;
53996: LD_ADDR_EXP 34
54000: PUSH
54001: LD_INT 0
54003: ST_TO_ADDR
// sDepot := false ;
54004: LD_ADDR_EXP 35
54008: PUSH
54009: LD_INT 0
54011: ST_TO_ADDR
// sFlag := false ;
54012: LD_ADDR_EXP 36
54016: PUSH
54017: LD_INT 0
54019: ST_TO_ADDR
// sKamikadze := false ;
54020: LD_ADDR_EXP 44
54024: PUSH
54025: LD_INT 0
54027: ST_TO_ADDR
// sTroll := false ;
54028: LD_ADDR_EXP 45
54032: PUSH
54033: LD_INT 0
54035: ST_TO_ADDR
// sSlow := false ;
54036: LD_ADDR_EXP 46
54040: PUSH
54041: LD_INT 0
54043: ST_TO_ADDR
// sLack := false ;
54044: LD_ADDR_EXP 47
54048: PUSH
54049: LD_INT 0
54051: ST_TO_ADDR
// sTank := false ;
54052: LD_ADDR_EXP 49
54056: PUSH
54057: LD_INT 0
54059: ST_TO_ADDR
// sRemote := false ;
54060: LD_ADDR_EXP 50
54064: PUSH
54065: LD_INT 0
54067: ST_TO_ADDR
// sPowell := false ;
54068: LD_ADDR_EXP 51
54072: PUSH
54073: LD_INT 0
54075: ST_TO_ADDR
// sTeleport := false ;
54076: LD_ADDR_EXP 54
54080: PUSH
54081: LD_INT 0
54083: ST_TO_ADDR
// sOilTower := false ;
54084: LD_ADDR_EXP 56
54088: PUSH
54089: LD_INT 0
54091: ST_TO_ADDR
// sShovel := false ;
54092: LD_ADDR_EXP 57
54096: PUSH
54097: LD_INT 0
54099: ST_TO_ADDR
// sSheik := false ;
54100: LD_ADDR_EXP 58
54104: PUSH
54105: LD_INT 0
54107: ST_TO_ADDR
// sEarthquake := false ;
54108: LD_ADDR_EXP 60
54112: PUSH
54113: LD_INT 0
54115: ST_TO_ADDR
// sAI := false ;
54116: LD_ADDR_EXP 61
54120: PUSH
54121: LD_INT 0
54123: ST_TO_ADDR
// sCargo := false ;
54124: LD_ADDR_EXP 64
54128: PUSH
54129: LD_INT 0
54131: ST_TO_ADDR
// sDLaser := false ;
54132: LD_ADDR_EXP 65
54136: PUSH
54137: LD_INT 0
54139: ST_TO_ADDR
// sExchange := false ;
54140: LD_ADDR_EXP 66
54144: PUSH
54145: LD_INT 0
54147: ST_TO_ADDR
// sFac := false ;
54148: LD_ADDR_EXP 67
54152: PUSH
54153: LD_INT 0
54155: ST_TO_ADDR
// sPower := false ;
54156: LD_ADDR_EXP 68
54160: PUSH
54161: LD_INT 0
54163: ST_TO_ADDR
// sRandom := false ;
54164: LD_ADDR_EXP 69
54168: PUSH
54169: LD_INT 0
54171: ST_TO_ADDR
// sShield := false ;
54172: LD_ADDR_EXP 70
54176: PUSH
54177: LD_INT 0
54179: ST_TO_ADDR
// sTime := false ;
54180: LD_ADDR_EXP 71
54184: PUSH
54185: LD_INT 0
54187: ST_TO_ADDR
// sTools := false ;
54188: LD_ADDR_EXP 72
54192: PUSH
54193: LD_INT 0
54195: ST_TO_ADDR
// sSold := false ;
54196: LD_ADDR_EXP 37
54200: PUSH
54201: LD_INT 0
54203: ST_TO_ADDR
// sDiff := false ;
54204: LD_ADDR_EXP 38
54208: PUSH
54209: LD_INT 0
54211: ST_TO_ADDR
// sFog := false ;
54212: LD_ADDR_EXP 41
54216: PUSH
54217: LD_INT 0
54219: ST_TO_ADDR
// sReset := false ;
54220: LD_ADDR_EXP 42
54224: PUSH
54225: LD_INT 0
54227: ST_TO_ADDR
// sSun := false ;
54228: LD_ADDR_EXP 43
54232: PUSH
54233: LD_INT 0
54235: ST_TO_ADDR
// sTiger := false ;
54236: LD_ADDR_EXP 39
54240: PUSH
54241: LD_INT 0
54243: ST_TO_ADDR
// sBomb := false ;
54244: LD_ADDR_EXP 40
54248: PUSH
54249: LD_INT 0
54251: ST_TO_ADDR
// sWound := false ;
54252: LD_ADDR_EXP 48
54256: PUSH
54257: LD_INT 0
54259: ST_TO_ADDR
// sBetray := false ;
54260: LD_ADDR_EXP 52
54264: PUSH
54265: LD_INT 0
54267: ST_TO_ADDR
// sContamin := false ;
54268: LD_ADDR_EXP 53
54272: PUSH
54273: LD_INT 0
54275: ST_TO_ADDR
// sOil := false ;
54276: LD_ADDR_EXP 55
54280: PUSH
54281: LD_INT 0
54283: ST_TO_ADDR
// sStu := false ;
54284: LD_ADDR_EXP 59
54288: PUSH
54289: LD_INT 0
54291: ST_TO_ADDR
// sBazooka := false ;
54292: LD_ADDR_EXP 62
54296: PUSH
54297: LD_INT 0
54299: ST_TO_ADDR
// sMortar := false ;
54300: LD_ADDR_EXP 63
54304: PUSH
54305: LD_INT 0
54307: ST_TO_ADDR
// sRanger := false ;
54308: LD_ADDR_EXP 73
54312: PUSH
54313: LD_INT 0
54315: ST_TO_ADDR
// sComputer := false ;
54316: LD_ADDR_EXP 74
54320: PUSH
54321: LD_INT 0
54323: ST_TO_ADDR
// s30 := false ;
54324: LD_ADDR_EXP 75
54328: PUSH
54329: LD_INT 0
54331: ST_TO_ADDR
// s60 := false ;
54332: LD_ADDR_EXP 76
54336: PUSH
54337: LD_INT 0
54339: ST_TO_ADDR
// end ;
54340: LD_VAR 0 1
54344: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
54345: LD_INT 0
54347: PPUSH
54348: PPUSH
54349: PPUSH
54350: PPUSH
54351: PPUSH
54352: PPUSH
54353: PPUSH
// result := [ ] ;
54354: LD_ADDR_VAR 0 2
54358: PUSH
54359: EMPTY
54360: ST_TO_ADDR
// if campaign_id = 1 then
54361: LD_OWVAR 69
54365: PUSH
54366: LD_INT 1
54368: EQUAL
54369: IFFALSE 57535
// begin case mission_number of 1 :
54371: LD_OWVAR 70
54375: PUSH
54376: LD_INT 1
54378: DOUBLE
54379: EQUAL
54380: IFTRUE 54384
54382: GO 54460
54384: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
54385: LD_ADDR_VAR 0 2
54389: PUSH
54390: LD_INT 2
54392: PUSH
54393: LD_INT 4
54395: PUSH
54396: LD_INT 11
54398: PUSH
54399: LD_INT 12
54401: PUSH
54402: LD_INT 15
54404: PUSH
54405: LD_INT 16
54407: PUSH
54408: LD_INT 22
54410: PUSH
54411: LD_INT 23
54413: PUSH
54414: LD_INT 26
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 101
54430: PUSH
54431: LD_INT 102
54433: PUSH
54434: LD_INT 106
54436: PUSH
54437: LD_INT 116
54439: PUSH
54440: LD_INT 117
54442: PUSH
54443: LD_INT 118
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: ST_TO_ADDR
54458: GO 57533
54460: LD_INT 2
54462: DOUBLE
54463: EQUAL
54464: IFTRUE 54468
54466: GO 54552
54468: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
54469: LD_ADDR_VAR 0 2
54473: PUSH
54474: LD_INT 2
54476: PUSH
54477: LD_INT 4
54479: PUSH
54480: LD_INT 11
54482: PUSH
54483: LD_INT 12
54485: PUSH
54486: LD_INT 15
54488: PUSH
54489: LD_INT 16
54491: PUSH
54492: LD_INT 22
54494: PUSH
54495: LD_INT 23
54497: PUSH
54498: LD_INT 26
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 101
54514: PUSH
54515: LD_INT 102
54517: PUSH
54518: LD_INT 105
54520: PUSH
54521: LD_INT 106
54523: PUSH
54524: LD_INT 108
54526: PUSH
54527: LD_INT 116
54529: PUSH
54530: LD_INT 117
54532: PUSH
54533: LD_INT 118
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: ST_TO_ADDR
54550: GO 57533
54552: LD_INT 3
54554: DOUBLE
54555: EQUAL
54556: IFTRUE 54560
54558: GO 54648
54560: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
54561: LD_ADDR_VAR 0 2
54565: PUSH
54566: LD_INT 2
54568: PUSH
54569: LD_INT 4
54571: PUSH
54572: LD_INT 5
54574: PUSH
54575: LD_INT 11
54577: PUSH
54578: LD_INT 12
54580: PUSH
54581: LD_INT 15
54583: PUSH
54584: LD_INT 16
54586: PUSH
54587: LD_INT 22
54589: PUSH
54590: LD_INT 26
54592: PUSH
54593: LD_INT 36
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 101
54610: PUSH
54611: LD_INT 102
54613: PUSH
54614: LD_INT 105
54616: PUSH
54617: LD_INT 106
54619: PUSH
54620: LD_INT 108
54622: PUSH
54623: LD_INT 116
54625: PUSH
54626: LD_INT 117
54628: PUSH
54629: LD_INT 118
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: ST_TO_ADDR
54646: GO 57533
54648: LD_INT 4
54650: DOUBLE
54651: EQUAL
54652: IFTRUE 54656
54654: GO 54752
54656: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
54657: LD_ADDR_VAR 0 2
54661: PUSH
54662: LD_INT 2
54664: PUSH
54665: LD_INT 4
54667: PUSH
54668: LD_INT 5
54670: PUSH
54671: LD_INT 8
54673: PUSH
54674: LD_INT 11
54676: PUSH
54677: LD_INT 12
54679: PUSH
54680: LD_INT 15
54682: PUSH
54683: LD_INT 16
54685: PUSH
54686: LD_INT 22
54688: PUSH
54689: LD_INT 23
54691: PUSH
54692: LD_INT 26
54694: PUSH
54695: LD_INT 36
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 101
54714: PUSH
54715: LD_INT 102
54717: PUSH
54718: LD_INT 105
54720: PUSH
54721: LD_INT 106
54723: PUSH
54724: LD_INT 108
54726: PUSH
54727: LD_INT 116
54729: PUSH
54730: LD_INT 117
54732: PUSH
54733: LD_INT 118
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: ST_TO_ADDR
54750: GO 57533
54752: LD_INT 5
54754: DOUBLE
54755: EQUAL
54756: IFTRUE 54760
54758: GO 54872
54760: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
54761: LD_ADDR_VAR 0 2
54765: PUSH
54766: LD_INT 2
54768: PUSH
54769: LD_INT 4
54771: PUSH
54772: LD_INT 5
54774: PUSH
54775: LD_INT 6
54777: PUSH
54778: LD_INT 8
54780: PUSH
54781: LD_INT 11
54783: PUSH
54784: LD_INT 12
54786: PUSH
54787: LD_INT 15
54789: PUSH
54790: LD_INT 16
54792: PUSH
54793: LD_INT 22
54795: PUSH
54796: LD_INT 23
54798: PUSH
54799: LD_INT 25
54801: PUSH
54802: LD_INT 26
54804: PUSH
54805: LD_INT 36
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 101
54826: PUSH
54827: LD_INT 102
54829: PUSH
54830: LD_INT 105
54832: PUSH
54833: LD_INT 106
54835: PUSH
54836: LD_INT 108
54838: PUSH
54839: LD_INT 109
54841: PUSH
54842: LD_INT 112
54844: PUSH
54845: LD_INT 116
54847: PUSH
54848: LD_INT 117
54850: PUSH
54851: LD_INT 118
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: ST_TO_ADDR
54870: GO 57533
54872: LD_INT 6
54874: DOUBLE
54875: EQUAL
54876: IFTRUE 54880
54878: GO 55012
54880: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
54881: LD_ADDR_VAR 0 2
54885: PUSH
54886: LD_INT 2
54888: PUSH
54889: LD_INT 4
54891: PUSH
54892: LD_INT 5
54894: PUSH
54895: LD_INT 6
54897: PUSH
54898: LD_INT 8
54900: PUSH
54901: LD_INT 11
54903: PUSH
54904: LD_INT 12
54906: PUSH
54907: LD_INT 15
54909: PUSH
54910: LD_INT 16
54912: PUSH
54913: LD_INT 20
54915: PUSH
54916: LD_INT 21
54918: PUSH
54919: LD_INT 22
54921: PUSH
54922: LD_INT 23
54924: PUSH
54925: LD_INT 25
54927: PUSH
54928: LD_INT 26
54930: PUSH
54931: LD_INT 30
54933: PUSH
54934: LD_INT 31
54936: PUSH
54937: LD_INT 32
54939: PUSH
54940: LD_INT 36
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 101
54966: PUSH
54967: LD_INT 102
54969: PUSH
54970: LD_INT 105
54972: PUSH
54973: LD_INT 106
54975: PUSH
54976: LD_INT 108
54978: PUSH
54979: LD_INT 109
54981: PUSH
54982: LD_INT 112
54984: PUSH
54985: LD_INT 116
54987: PUSH
54988: LD_INT 117
54990: PUSH
54991: LD_INT 118
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: ST_TO_ADDR
55010: GO 57533
55012: LD_INT 7
55014: DOUBLE
55015: EQUAL
55016: IFTRUE 55020
55018: GO 55132
55020: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
55021: LD_ADDR_VAR 0 2
55025: PUSH
55026: LD_INT 2
55028: PUSH
55029: LD_INT 4
55031: PUSH
55032: LD_INT 5
55034: PUSH
55035: LD_INT 7
55037: PUSH
55038: LD_INT 11
55040: PUSH
55041: LD_INT 12
55043: PUSH
55044: LD_INT 15
55046: PUSH
55047: LD_INT 16
55049: PUSH
55050: LD_INT 20
55052: PUSH
55053: LD_INT 21
55055: PUSH
55056: LD_INT 22
55058: PUSH
55059: LD_INT 23
55061: PUSH
55062: LD_INT 25
55064: PUSH
55065: LD_INT 26
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 101
55086: PUSH
55087: LD_INT 102
55089: PUSH
55090: LD_INT 103
55092: PUSH
55093: LD_INT 105
55095: PUSH
55096: LD_INT 106
55098: PUSH
55099: LD_INT 108
55101: PUSH
55102: LD_INT 112
55104: PUSH
55105: LD_INT 116
55107: PUSH
55108: LD_INT 117
55110: PUSH
55111: LD_INT 118
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: ST_TO_ADDR
55130: GO 57533
55132: LD_INT 8
55134: DOUBLE
55135: EQUAL
55136: IFTRUE 55140
55138: GO 55280
55140: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
55141: LD_ADDR_VAR 0 2
55145: PUSH
55146: LD_INT 2
55148: PUSH
55149: LD_INT 4
55151: PUSH
55152: LD_INT 5
55154: PUSH
55155: LD_INT 6
55157: PUSH
55158: LD_INT 7
55160: PUSH
55161: LD_INT 8
55163: PUSH
55164: LD_INT 11
55166: PUSH
55167: LD_INT 12
55169: PUSH
55170: LD_INT 15
55172: PUSH
55173: LD_INT 16
55175: PUSH
55176: LD_INT 20
55178: PUSH
55179: LD_INT 21
55181: PUSH
55182: LD_INT 22
55184: PUSH
55185: LD_INT 23
55187: PUSH
55188: LD_INT 25
55190: PUSH
55191: LD_INT 26
55193: PUSH
55194: LD_INT 30
55196: PUSH
55197: LD_INT 31
55199: PUSH
55200: LD_INT 32
55202: PUSH
55203: LD_INT 36
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 101
55230: PUSH
55231: LD_INT 102
55233: PUSH
55234: LD_INT 103
55236: PUSH
55237: LD_INT 105
55239: PUSH
55240: LD_INT 106
55242: PUSH
55243: LD_INT 108
55245: PUSH
55246: LD_INT 109
55248: PUSH
55249: LD_INT 112
55251: PUSH
55252: LD_INT 116
55254: PUSH
55255: LD_INT 117
55257: PUSH
55258: LD_INT 118
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: ST_TO_ADDR
55278: GO 57533
55280: LD_INT 9
55282: DOUBLE
55283: EQUAL
55284: IFTRUE 55288
55286: GO 55436
55288: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
55289: LD_ADDR_VAR 0 2
55293: PUSH
55294: LD_INT 2
55296: PUSH
55297: LD_INT 4
55299: PUSH
55300: LD_INT 5
55302: PUSH
55303: LD_INT 6
55305: PUSH
55306: LD_INT 7
55308: PUSH
55309: LD_INT 8
55311: PUSH
55312: LD_INT 11
55314: PUSH
55315: LD_INT 12
55317: PUSH
55318: LD_INT 15
55320: PUSH
55321: LD_INT 16
55323: PUSH
55324: LD_INT 20
55326: PUSH
55327: LD_INT 21
55329: PUSH
55330: LD_INT 22
55332: PUSH
55333: LD_INT 23
55335: PUSH
55336: LD_INT 25
55338: PUSH
55339: LD_INT 26
55341: PUSH
55342: LD_INT 28
55344: PUSH
55345: LD_INT 30
55347: PUSH
55348: LD_INT 31
55350: PUSH
55351: LD_INT 32
55353: PUSH
55354: LD_INT 36
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 101
55382: PUSH
55383: LD_INT 102
55385: PUSH
55386: LD_INT 103
55388: PUSH
55389: LD_INT 105
55391: PUSH
55392: LD_INT 106
55394: PUSH
55395: LD_INT 108
55397: PUSH
55398: LD_INT 109
55400: PUSH
55401: LD_INT 112
55403: PUSH
55404: LD_INT 114
55406: PUSH
55407: LD_INT 116
55409: PUSH
55410: LD_INT 117
55412: PUSH
55413: LD_INT 118
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: ST_TO_ADDR
55434: GO 57533
55436: LD_INT 10
55438: DOUBLE
55439: EQUAL
55440: IFTRUE 55444
55442: GO 55640
55444: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
55445: LD_ADDR_VAR 0 2
55449: PUSH
55450: LD_INT 2
55452: PUSH
55453: LD_INT 4
55455: PUSH
55456: LD_INT 5
55458: PUSH
55459: LD_INT 6
55461: PUSH
55462: LD_INT 7
55464: PUSH
55465: LD_INT 8
55467: PUSH
55468: LD_INT 9
55470: PUSH
55471: LD_INT 10
55473: PUSH
55474: LD_INT 11
55476: PUSH
55477: LD_INT 12
55479: PUSH
55480: LD_INT 13
55482: PUSH
55483: LD_INT 14
55485: PUSH
55486: LD_INT 15
55488: PUSH
55489: LD_INT 16
55491: PUSH
55492: LD_INT 17
55494: PUSH
55495: LD_INT 18
55497: PUSH
55498: LD_INT 19
55500: PUSH
55501: LD_INT 20
55503: PUSH
55504: LD_INT 21
55506: PUSH
55507: LD_INT 22
55509: PUSH
55510: LD_INT 23
55512: PUSH
55513: LD_INT 24
55515: PUSH
55516: LD_INT 25
55518: PUSH
55519: LD_INT 26
55521: PUSH
55522: LD_INT 28
55524: PUSH
55525: LD_INT 30
55527: PUSH
55528: LD_INT 31
55530: PUSH
55531: LD_INT 32
55533: PUSH
55534: LD_INT 36
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 101
55570: PUSH
55571: LD_INT 102
55573: PUSH
55574: LD_INT 103
55576: PUSH
55577: LD_INT 104
55579: PUSH
55580: LD_INT 105
55582: PUSH
55583: LD_INT 106
55585: PUSH
55586: LD_INT 107
55588: PUSH
55589: LD_INT 108
55591: PUSH
55592: LD_INT 109
55594: PUSH
55595: LD_INT 110
55597: PUSH
55598: LD_INT 111
55600: PUSH
55601: LD_INT 112
55603: PUSH
55604: LD_INT 114
55606: PUSH
55607: LD_INT 116
55609: PUSH
55610: LD_INT 117
55612: PUSH
55613: LD_INT 118
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: ST_TO_ADDR
55638: GO 57533
55640: LD_INT 11
55642: DOUBLE
55643: EQUAL
55644: IFTRUE 55648
55646: GO 55852
55648: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
55649: LD_ADDR_VAR 0 2
55653: PUSH
55654: LD_INT 2
55656: PUSH
55657: LD_INT 3
55659: PUSH
55660: LD_INT 4
55662: PUSH
55663: LD_INT 5
55665: PUSH
55666: LD_INT 6
55668: PUSH
55669: LD_INT 7
55671: PUSH
55672: LD_INT 8
55674: PUSH
55675: LD_INT 9
55677: PUSH
55678: LD_INT 10
55680: PUSH
55681: LD_INT 11
55683: PUSH
55684: LD_INT 12
55686: PUSH
55687: LD_INT 13
55689: PUSH
55690: LD_INT 14
55692: PUSH
55693: LD_INT 15
55695: PUSH
55696: LD_INT 16
55698: PUSH
55699: LD_INT 17
55701: PUSH
55702: LD_INT 18
55704: PUSH
55705: LD_INT 19
55707: PUSH
55708: LD_INT 20
55710: PUSH
55711: LD_INT 21
55713: PUSH
55714: LD_INT 22
55716: PUSH
55717: LD_INT 23
55719: PUSH
55720: LD_INT 24
55722: PUSH
55723: LD_INT 25
55725: PUSH
55726: LD_INT 26
55728: PUSH
55729: LD_INT 28
55731: PUSH
55732: LD_INT 30
55734: PUSH
55735: LD_INT 31
55737: PUSH
55738: LD_INT 32
55740: PUSH
55741: LD_INT 34
55743: PUSH
55744: LD_INT 36
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 101
55782: PUSH
55783: LD_INT 102
55785: PUSH
55786: LD_INT 103
55788: PUSH
55789: LD_INT 104
55791: PUSH
55792: LD_INT 105
55794: PUSH
55795: LD_INT 106
55797: PUSH
55798: LD_INT 107
55800: PUSH
55801: LD_INT 108
55803: PUSH
55804: LD_INT 109
55806: PUSH
55807: LD_INT 110
55809: PUSH
55810: LD_INT 111
55812: PUSH
55813: LD_INT 112
55815: PUSH
55816: LD_INT 114
55818: PUSH
55819: LD_INT 116
55821: PUSH
55822: LD_INT 117
55824: PUSH
55825: LD_INT 118
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: ST_TO_ADDR
55850: GO 57533
55852: LD_INT 12
55854: DOUBLE
55855: EQUAL
55856: IFTRUE 55860
55858: GO 56080
55860: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
55861: LD_ADDR_VAR 0 2
55865: PUSH
55866: LD_INT 1
55868: PUSH
55869: LD_INT 2
55871: PUSH
55872: LD_INT 3
55874: PUSH
55875: LD_INT 4
55877: PUSH
55878: LD_INT 5
55880: PUSH
55881: LD_INT 6
55883: PUSH
55884: LD_INT 7
55886: PUSH
55887: LD_INT 8
55889: PUSH
55890: LD_INT 9
55892: PUSH
55893: LD_INT 10
55895: PUSH
55896: LD_INT 11
55898: PUSH
55899: LD_INT 12
55901: PUSH
55902: LD_INT 13
55904: PUSH
55905: LD_INT 14
55907: PUSH
55908: LD_INT 15
55910: PUSH
55911: LD_INT 16
55913: PUSH
55914: LD_INT 17
55916: PUSH
55917: LD_INT 18
55919: PUSH
55920: LD_INT 19
55922: PUSH
55923: LD_INT 20
55925: PUSH
55926: LD_INT 21
55928: PUSH
55929: LD_INT 22
55931: PUSH
55932: LD_INT 23
55934: PUSH
55935: LD_INT 24
55937: PUSH
55938: LD_INT 25
55940: PUSH
55941: LD_INT 26
55943: PUSH
55944: LD_INT 27
55946: PUSH
55947: LD_INT 28
55949: PUSH
55950: LD_INT 30
55952: PUSH
55953: LD_INT 31
55955: PUSH
55956: LD_INT 32
55958: PUSH
55959: LD_INT 33
55961: PUSH
55962: LD_INT 34
55964: PUSH
55965: LD_INT 36
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 101
56006: PUSH
56007: LD_INT 102
56009: PUSH
56010: LD_INT 103
56012: PUSH
56013: LD_INT 104
56015: PUSH
56016: LD_INT 105
56018: PUSH
56019: LD_INT 106
56021: PUSH
56022: LD_INT 107
56024: PUSH
56025: LD_INT 108
56027: PUSH
56028: LD_INT 109
56030: PUSH
56031: LD_INT 110
56033: PUSH
56034: LD_INT 111
56036: PUSH
56037: LD_INT 112
56039: PUSH
56040: LD_INT 113
56042: PUSH
56043: LD_INT 114
56045: PUSH
56046: LD_INT 116
56048: PUSH
56049: LD_INT 117
56051: PUSH
56052: LD_INT 118
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: ST_TO_ADDR
56078: GO 57533
56080: LD_INT 13
56082: DOUBLE
56083: EQUAL
56084: IFTRUE 56088
56086: GO 56296
56088: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
56089: LD_ADDR_VAR 0 2
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: LD_INT 2
56099: PUSH
56100: LD_INT 3
56102: PUSH
56103: LD_INT 4
56105: PUSH
56106: LD_INT 5
56108: PUSH
56109: LD_INT 8
56111: PUSH
56112: LD_INT 9
56114: PUSH
56115: LD_INT 10
56117: PUSH
56118: LD_INT 11
56120: PUSH
56121: LD_INT 12
56123: PUSH
56124: LD_INT 14
56126: PUSH
56127: LD_INT 15
56129: PUSH
56130: LD_INT 16
56132: PUSH
56133: LD_INT 17
56135: PUSH
56136: LD_INT 18
56138: PUSH
56139: LD_INT 19
56141: PUSH
56142: LD_INT 20
56144: PUSH
56145: LD_INT 21
56147: PUSH
56148: LD_INT 22
56150: PUSH
56151: LD_INT 23
56153: PUSH
56154: LD_INT 24
56156: PUSH
56157: LD_INT 25
56159: PUSH
56160: LD_INT 26
56162: PUSH
56163: LD_INT 27
56165: PUSH
56166: LD_INT 28
56168: PUSH
56169: LD_INT 30
56171: PUSH
56172: LD_INT 31
56174: PUSH
56175: LD_INT 32
56177: PUSH
56178: LD_INT 33
56180: PUSH
56181: LD_INT 34
56183: PUSH
56184: LD_INT 36
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 101
56222: PUSH
56223: LD_INT 102
56225: PUSH
56226: LD_INT 103
56228: PUSH
56229: LD_INT 104
56231: PUSH
56232: LD_INT 105
56234: PUSH
56235: LD_INT 106
56237: PUSH
56238: LD_INT 107
56240: PUSH
56241: LD_INT 108
56243: PUSH
56244: LD_INT 109
56246: PUSH
56247: LD_INT 110
56249: PUSH
56250: LD_INT 111
56252: PUSH
56253: LD_INT 112
56255: PUSH
56256: LD_INT 113
56258: PUSH
56259: LD_INT 114
56261: PUSH
56262: LD_INT 116
56264: PUSH
56265: LD_INT 117
56267: PUSH
56268: LD_INT 118
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: ST_TO_ADDR
56294: GO 57533
56296: LD_INT 14
56298: DOUBLE
56299: EQUAL
56300: IFTRUE 56304
56302: GO 56528
56304: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
56305: LD_ADDR_VAR 0 2
56309: PUSH
56310: LD_INT 1
56312: PUSH
56313: LD_INT 2
56315: PUSH
56316: LD_INT 3
56318: PUSH
56319: LD_INT 4
56321: PUSH
56322: LD_INT 5
56324: PUSH
56325: LD_INT 6
56327: PUSH
56328: LD_INT 7
56330: PUSH
56331: LD_INT 8
56333: PUSH
56334: LD_INT 9
56336: PUSH
56337: LD_INT 10
56339: PUSH
56340: LD_INT 11
56342: PUSH
56343: LD_INT 12
56345: PUSH
56346: LD_INT 13
56348: PUSH
56349: LD_INT 14
56351: PUSH
56352: LD_INT 15
56354: PUSH
56355: LD_INT 16
56357: PUSH
56358: LD_INT 17
56360: PUSH
56361: LD_INT 18
56363: PUSH
56364: LD_INT 19
56366: PUSH
56367: LD_INT 20
56369: PUSH
56370: LD_INT 21
56372: PUSH
56373: LD_INT 22
56375: PUSH
56376: LD_INT 23
56378: PUSH
56379: LD_INT 24
56381: PUSH
56382: LD_INT 25
56384: PUSH
56385: LD_INT 26
56387: PUSH
56388: LD_INT 27
56390: PUSH
56391: LD_INT 28
56393: PUSH
56394: LD_INT 29
56396: PUSH
56397: LD_INT 30
56399: PUSH
56400: LD_INT 31
56402: PUSH
56403: LD_INT 32
56405: PUSH
56406: LD_INT 33
56408: PUSH
56409: LD_INT 34
56411: PUSH
56412: LD_INT 36
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 101
56454: PUSH
56455: LD_INT 102
56457: PUSH
56458: LD_INT 103
56460: PUSH
56461: LD_INT 104
56463: PUSH
56464: LD_INT 105
56466: PUSH
56467: LD_INT 106
56469: PUSH
56470: LD_INT 107
56472: PUSH
56473: LD_INT 108
56475: PUSH
56476: LD_INT 109
56478: PUSH
56479: LD_INT 110
56481: PUSH
56482: LD_INT 111
56484: PUSH
56485: LD_INT 112
56487: PUSH
56488: LD_INT 113
56490: PUSH
56491: LD_INT 114
56493: PUSH
56494: LD_INT 116
56496: PUSH
56497: LD_INT 117
56499: PUSH
56500: LD_INT 118
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: ST_TO_ADDR
56526: GO 57533
56528: LD_INT 15
56530: DOUBLE
56531: EQUAL
56532: IFTRUE 56536
56534: GO 56760
56536: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
56537: LD_ADDR_VAR 0 2
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: LD_INT 2
56547: PUSH
56548: LD_INT 3
56550: PUSH
56551: LD_INT 4
56553: PUSH
56554: LD_INT 5
56556: PUSH
56557: LD_INT 6
56559: PUSH
56560: LD_INT 7
56562: PUSH
56563: LD_INT 8
56565: PUSH
56566: LD_INT 9
56568: PUSH
56569: LD_INT 10
56571: PUSH
56572: LD_INT 11
56574: PUSH
56575: LD_INT 12
56577: PUSH
56578: LD_INT 13
56580: PUSH
56581: LD_INT 14
56583: PUSH
56584: LD_INT 15
56586: PUSH
56587: LD_INT 16
56589: PUSH
56590: LD_INT 17
56592: PUSH
56593: LD_INT 18
56595: PUSH
56596: LD_INT 19
56598: PUSH
56599: LD_INT 20
56601: PUSH
56602: LD_INT 21
56604: PUSH
56605: LD_INT 22
56607: PUSH
56608: LD_INT 23
56610: PUSH
56611: LD_INT 24
56613: PUSH
56614: LD_INT 25
56616: PUSH
56617: LD_INT 26
56619: PUSH
56620: LD_INT 27
56622: PUSH
56623: LD_INT 28
56625: PUSH
56626: LD_INT 29
56628: PUSH
56629: LD_INT 30
56631: PUSH
56632: LD_INT 31
56634: PUSH
56635: LD_INT 32
56637: PUSH
56638: LD_INT 33
56640: PUSH
56641: LD_INT 34
56643: PUSH
56644: LD_INT 36
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 101
56686: PUSH
56687: LD_INT 102
56689: PUSH
56690: LD_INT 103
56692: PUSH
56693: LD_INT 104
56695: PUSH
56696: LD_INT 105
56698: PUSH
56699: LD_INT 106
56701: PUSH
56702: LD_INT 107
56704: PUSH
56705: LD_INT 108
56707: PUSH
56708: LD_INT 109
56710: PUSH
56711: LD_INT 110
56713: PUSH
56714: LD_INT 111
56716: PUSH
56717: LD_INT 112
56719: PUSH
56720: LD_INT 113
56722: PUSH
56723: LD_INT 114
56725: PUSH
56726: LD_INT 116
56728: PUSH
56729: LD_INT 117
56731: PUSH
56732: LD_INT 118
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: ST_TO_ADDR
56758: GO 57533
56760: LD_INT 16
56762: DOUBLE
56763: EQUAL
56764: IFTRUE 56768
56766: GO 56904
56768: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
56769: LD_ADDR_VAR 0 2
56773: PUSH
56774: LD_INT 2
56776: PUSH
56777: LD_INT 4
56779: PUSH
56780: LD_INT 5
56782: PUSH
56783: LD_INT 7
56785: PUSH
56786: LD_INT 11
56788: PUSH
56789: LD_INT 12
56791: PUSH
56792: LD_INT 15
56794: PUSH
56795: LD_INT 16
56797: PUSH
56798: LD_INT 20
56800: PUSH
56801: LD_INT 21
56803: PUSH
56804: LD_INT 22
56806: PUSH
56807: LD_INT 23
56809: PUSH
56810: LD_INT 25
56812: PUSH
56813: LD_INT 26
56815: PUSH
56816: LD_INT 30
56818: PUSH
56819: LD_INT 31
56821: PUSH
56822: LD_INT 32
56824: PUSH
56825: LD_INT 33
56827: PUSH
56828: LD_INT 34
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 101
56854: PUSH
56855: LD_INT 102
56857: PUSH
56858: LD_INT 103
56860: PUSH
56861: LD_INT 106
56863: PUSH
56864: LD_INT 108
56866: PUSH
56867: LD_INT 112
56869: PUSH
56870: LD_INT 113
56872: PUSH
56873: LD_INT 114
56875: PUSH
56876: LD_INT 116
56878: PUSH
56879: LD_INT 117
56881: PUSH
56882: LD_INT 118
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: ST_TO_ADDR
56902: GO 57533
56904: LD_INT 17
56906: DOUBLE
56907: EQUAL
56908: IFTRUE 56912
56910: GO 57136
56912: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
56913: LD_ADDR_VAR 0 2
56917: PUSH
56918: LD_INT 1
56920: PUSH
56921: LD_INT 2
56923: PUSH
56924: LD_INT 3
56926: PUSH
56927: LD_INT 4
56929: PUSH
56930: LD_INT 5
56932: PUSH
56933: LD_INT 6
56935: PUSH
56936: LD_INT 7
56938: PUSH
56939: LD_INT 8
56941: PUSH
56942: LD_INT 9
56944: PUSH
56945: LD_INT 10
56947: PUSH
56948: LD_INT 11
56950: PUSH
56951: LD_INT 12
56953: PUSH
56954: LD_INT 13
56956: PUSH
56957: LD_INT 14
56959: PUSH
56960: LD_INT 15
56962: PUSH
56963: LD_INT 16
56965: PUSH
56966: LD_INT 17
56968: PUSH
56969: LD_INT 18
56971: PUSH
56972: LD_INT 19
56974: PUSH
56975: LD_INT 20
56977: PUSH
56978: LD_INT 21
56980: PUSH
56981: LD_INT 22
56983: PUSH
56984: LD_INT 23
56986: PUSH
56987: LD_INT 24
56989: PUSH
56990: LD_INT 25
56992: PUSH
56993: LD_INT 26
56995: PUSH
56996: LD_INT 27
56998: PUSH
56999: LD_INT 28
57001: PUSH
57002: LD_INT 29
57004: PUSH
57005: LD_INT 30
57007: PUSH
57008: LD_INT 31
57010: PUSH
57011: LD_INT 32
57013: PUSH
57014: LD_INT 33
57016: PUSH
57017: LD_INT 34
57019: PUSH
57020: LD_INT 36
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 101
57062: PUSH
57063: LD_INT 102
57065: PUSH
57066: LD_INT 103
57068: PUSH
57069: LD_INT 104
57071: PUSH
57072: LD_INT 105
57074: PUSH
57075: LD_INT 106
57077: PUSH
57078: LD_INT 107
57080: PUSH
57081: LD_INT 108
57083: PUSH
57084: LD_INT 109
57086: PUSH
57087: LD_INT 110
57089: PUSH
57090: LD_INT 111
57092: PUSH
57093: LD_INT 112
57095: PUSH
57096: LD_INT 113
57098: PUSH
57099: LD_INT 114
57101: PUSH
57102: LD_INT 116
57104: PUSH
57105: LD_INT 117
57107: PUSH
57108: LD_INT 118
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: ST_TO_ADDR
57134: GO 57533
57136: LD_INT 18
57138: DOUBLE
57139: EQUAL
57140: IFTRUE 57144
57142: GO 57292
57144: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
57145: LD_ADDR_VAR 0 2
57149: PUSH
57150: LD_INT 2
57152: PUSH
57153: LD_INT 4
57155: PUSH
57156: LD_INT 5
57158: PUSH
57159: LD_INT 7
57161: PUSH
57162: LD_INT 11
57164: PUSH
57165: LD_INT 12
57167: PUSH
57168: LD_INT 15
57170: PUSH
57171: LD_INT 16
57173: PUSH
57174: LD_INT 20
57176: PUSH
57177: LD_INT 21
57179: PUSH
57180: LD_INT 22
57182: PUSH
57183: LD_INT 23
57185: PUSH
57186: LD_INT 25
57188: PUSH
57189: LD_INT 26
57191: PUSH
57192: LD_INT 30
57194: PUSH
57195: LD_INT 31
57197: PUSH
57198: LD_INT 32
57200: PUSH
57201: LD_INT 33
57203: PUSH
57204: LD_INT 34
57206: PUSH
57207: LD_INT 35
57209: PUSH
57210: LD_INT 36
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 101
57238: PUSH
57239: LD_INT 102
57241: PUSH
57242: LD_INT 103
57244: PUSH
57245: LD_INT 106
57247: PUSH
57248: LD_INT 108
57250: PUSH
57251: LD_INT 112
57253: PUSH
57254: LD_INT 113
57256: PUSH
57257: LD_INT 114
57259: PUSH
57260: LD_INT 115
57262: PUSH
57263: LD_INT 116
57265: PUSH
57266: LD_INT 117
57268: PUSH
57269: LD_INT 118
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: ST_TO_ADDR
57290: GO 57533
57292: LD_INT 19
57294: DOUBLE
57295: EQUAL
57296: IFTRUE 57300
57298: GO 57532
57300: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
57301: LD_ADDR_VAR 0 2
57305: PUSH
57306: LD_INT 1
57308: PUSH
57309: LD_INT 2
57311: PUSH
57312: LD_INT 3
57314: PUSH
57315: LD_INT 4
57317: PUSH
57318: LD_INT 5
57320: PUSH
57321: LD_INT 6
57323: PUSH
57324: LD_INT 7
57326: PUSH
57327: LD_INT 8
57329: PUSH
57330: LD_INT 9
57332: PUSH
57333: LD_INT 10
57335: PUSH
57336: LD_INT 11
57338: PUSH
57339: LD_INT 12
57341: PUSH
57342: LD_INT 13
57344: PUSH
57345: LD_INT 14
57347: PUSH
57348: LD_INT 15
57350: PUSH
57351: LD_INT 16
57353: PUSH
57354: LD_INT 17
57356: PUSH
57357: LD_INT 18
57359: PUSH
57360: LD_INT 19
57362: PUSH
57363: LD_INT 20
57365: PUSH
57366: LD_INT 21
57368: PUSH
57369: LD_INT 22
57371: PUSH
57372: LD_INT 23
57374: PUSH
57375: LD_INT 24
57377: PUSH
57378: LD_INT 25
57380: PUSH
57381: LD_INT 26
57383: PUSH
57384: LD_INT 27
57386: PUSH
57387: LD_INT 28
57389: PUSH
57390: LD_INT 29
57392: PUSH
57393: LD_INT 30
57395: PUSH
57396: LD_INT 31
57398: PUSH
57399: LD_INT 32
57401: PUSH
57402: LD_INT 33
57404: PUSH
57405: LD_INT 34
57407: PUSH
57408: LD_INT 35
57410: PUSH
57411: LD_INT 36
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 101
57454: PUSH
57455: LD_INT 102
57457: PUSH
57458: LD_INT 103
57460: PUSH
57461: LD_INT 104
57463: PUSH
57464: LD_INT 105
57466: PUSH
57467: LD_INT 106
57469: PUSH
57470: LD_INT 107
57472: PUSH
57473: LD_INT 108
57475: PUSH
57476: LD_INT 109
57478: PUSH
57479: LD_INT 110
57481: PUSH
57482: LD_INT 111
57484: PUSH
57485: LD_INT 112
57487: PUSH
57488: LD_INT 113
57490: PUSH
57491: LD_INT 114
57493: PUSH
57494: LD_INT 115
57496: PUSH
57497: LD_INT 116
57499: PUSH
57500: LD_INT 117
57502: PUSH
57503: LD_INT 118
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: ST_TO_ADDR
57530: GO 57533
57532: POP
// end else
57533: GO 57764
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
57535: LD_ADDR_VAR 0 2
57539: PUSH
57540: LD_INT 1
57542: PUSH
57543: LD_INT 2
57545: PUSH
57546: LD_INT 3
57548: PUSH
57549: LD_INT 4
57551: PUSH
57552: LD_INT 5
57554: PUSH
57555: LD_INT 6
57557: PUSH
57558: LD_INT 7
57560: PUSH
57561: LD_INT 8
57563: PUSH
57564: LD_INT 9
57566: PUSH
57567: LD_INT 10
57569: PUSH
57570: LD_INT 11
57572: PUSH
57573: LD_INT 12
57575: PUSH
57576: LD_INT 13
57578: PUSH
57579: LD_INT 14
57581: PUSH
57582: LD_INT 15
57584: PUSH
57585: LD_INT 16
57587: PUSH
57588: LD_INT 17
57590: PUSH
57591: LD_INT 18
57593: PUSH
57594: LD_INT 19
57596: PUSH
57597: LD_INT 20
57599: PUSH
57600: LD_INT 21
57602: PUSH
57603: LD_INT 22
57605: PUSH
57606: LD_INT 23
57608: PUSH
57609: LD_INT 24
57611: PUSH
57612: LD_INT 25
57614: PUSH
57615: LD_INT 26
57617: PUSH
57618: LD_INT 27
57620: PUSH
57621: LD_INT 28
57623: PUSH
57624: LD_INT 29
57626: PUSH
57627: LD_INT 30
57629: PUSH
57630: LD_INT 31
57632: PUSH
57633: LD_INT 32
57635: PUSH
57636: LD_INT 33
57638: PUSH
57639: LD_INT 34
57641: PUSH
57642: LD_INT 35
57644: PUSH
57645: LD_INT 36
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 101
57688: PUSH
57689: LD_INT 102
57691: PUSH
57692: LD_INT 103
57694: PUSH
57695: LD_INT 104
57697: PUSH
57698: LD_INT 105
57700: PUSH
57701: LD_INT 106
57703: PUSH
57704: LD_INT 107
57706: PUSH
57707: LD_INT 108
57709: PUSH
57710: LD_INT 109
57712: PUSH
57713: LD_INT 110
57715: PUSH
57716: LD_INT 111
57718: PUSH
57719: LD_INT 112
57721: PUSH
57722: LD_INT 113
57724: PUSH
57725: LD_INT 114
57727: PUSH
57728: LD_INT 115
57730: PUSH
57731: LD_INT 116
57733: PUSH
57734: LD_INT 117
57736: PUSH
57737: LD_INT 118
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: ST_TO_ADDR
// if result then
57764: LD_VAR 0 2
57768: IFFALSE 58554
// begin normal :=  ;
57770: LD_ADDR_VAR 0 5
57774: PUSH
57775: LD_STRING 
57777: ST_TO_ADDR
// hardcore :=  ;
57778: LD_ADDR_VAR 0 6
57782: PUSH
57783: LD_STRING 
57785: ST_TO_ADDR
// active :=  ;
57786: LD_ADDR_VAR 0 7
57790: PUSH
57791: LD_STRING 
57793: ST_TO_ADDR
// for i = 1 to normalCounter do
57794: LD_ADDR_VAR 0 8
57798: PUSH
57799: DOUBLE
57800: LD_INT 1
57802: DEC
57803: ST_TO_ADDR
57804: LD_EXP 21
57808: PUSH
57809: FOR_TO
57810: IFFALSE 57911
// begin tmp := 0 ;
57812: LD_ADDR_VAR 0 3
57816: PUSH
57817: LD_STRING 0
57819: ST_TO_ADDR
// if result [ 1 ] then
57820: LD_VAR 0 2
57824: PUSH
57825: LD_INT 1
57827: ARRAY
57828: IFFALSE 57893
// if result [ 1 ] [ 1 ] = i then
57830: LD_VAR 0 2
57834: PUSH
57835: LD_INT 1
57837: ARRAY
57838: PUSH
57839: LD_INT 1
57841: ARRAY
57842: PUSH
57843: LD_VAR 0 8
57847: EQUAL
57848: IFFALSE 57893
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
57850: LD_ADDR_VAR 0 2
57854: PUSH
57855: LD_VAR 0 2
57859: PPUSH
57860: LD_INT 1
57862: PPUSH
57863: LD_VAR 0 2
57867: PUSH
57868: LD_INT 1
57870: ARRAY
57871: PPUSH
57872: LD_INT 1
57874: PPUSH
57875: CALL_OW 3
57879: PPUSH
57880: CALL_OW 1
57884: ST_TO_ADDR
// tmp := 1 ;
57885: LD_ADDR_VAR 0 3
57889: PUSH
57890: LD_STRING 1
57892: ST_TO_ADDR
// end ; normal := normal & tmp ;
57893: LD_ADDR_VAR 0 5
57897: PUSH
57898: LD_VAR 0 5
57902: PUSH
57903: LD_VAR 0 3
57907: STR
57908: ST_TO_ADDR
// end ;
57909: GO 57809
57911: POP
57912: POP
// for i = 1 to hardcoreCounter do
57913: LD_ADDR_VAR 0 8
57917: PUSH
57918: DOUBLE
57919: LD_INT 1
57921: DEC
57922: ST_TO_ADDR
57923: LD_EXP 22
57927: PUSH
57928: FOR_TO
57929: IFFALSE 58034
// begin tmp := 0 ;
57931: LD_ADDR_VAR 0 3
57935: PUSH
57936: LD_STRING 0
57938: ST_TO_ADDR
// if result [ 2 ] then
57939: LD_VAR 0 2
57943: PUSH
57944: LD_INT 2
57946: ARRAY
57947: IFFALSE 58016
// if result [ 2 ] [ 1 ] = 100 + i then
57949: LD_VAR 0 2
57953: PUSH
57954: LD_INT 2
57956: ARRAY
57957: PUSH
57958: LD_INT 1
57960: ARRAY
57961: PUSH
57962: LD_INT 100
57964: PUSH
57965: LD_VAR 0 8
57969: PLUS
57970: EQUAL
57971: IFFALSE 58016
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
57973: LD_ADDR_VAR 0 2
57977: PUSH
57978: LD_VAR 0 2
57982: PPUSH
57983: LD_INT 2
57985: PPUSH
57986: LD_VAR 0 2
57990: PUSH
57991: LD_INT 2
57993: ARRAY
57994: PPUSH
57995: LD_INT 1
57997: PPUSH
57998: CALL_OW 3
58002: PPUSH
58003: CALL_OW 1
58007: ST_TO_ADDR
// tmp := 1 ;
58008: LD_ADDR_VAR 0 3
58012: PUSH
58013: LD_STRING 1
58015: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
58016: LD_ADDR_VAR 0 6
58020: PUSH
58021: LD_VAR 0 6
58025: PUSH
58026: LD_VAR 0 3
58030: STR
58031: ST_TO_ADDR
// end ;
58032: GO 57928
58034: POP
58035: POP
// if isGameLoad then
58036: LD_VAR 0 1
58040: IFFALSE 58515
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
58042: LD_ADDR_VAR 0 4
58046: PUSH
58047: LD_EXP 25
58051: PUSH
58052: LD_EXP 24
58056: PUSH
58057: LD_EXP 26
58061: PUSH
58062: LD_EXP 23
58066: PUSH
58067: LD_EXP 27
58071: PUSH
58072: LD_EXP 28
58076: PUSH
58077: LD_EXP 29
58081: PUSH
58082: LD_EXP 30
58086: PUSH
58087: LD_EXP 31
58091: PUSH
58092: LD_EXP 32
58096: PUSH
58097: LD_EXP 33
58101: PUSH
58102: LD_EXP 34
58106: PUSH
58107: LD_EXP 35
58111: PUSH
58112: LD_EXP 36
58116: PUSH
58117: LD_EXP 44
58121: PUSH
58122: LD_EXP 45
58126: PUSH
58127: LD_EXP 46
58131: PUSH
58132: LD_EXP 47
58136: PUSH
58137: LD_EXP 49
58141: PUSH
58142: LD_EXP 50
58146: PUSH
58147: LD_EXP 51
58151: PUSH
58152: LD_EXP 54
58156: PUSH
58157: LD_EXP 56
58161: PUSH
58162: LD_EXP 57
58166: PUSH
58167: LD_EXP 58
58171: PUSH
58172: LD_EXP 60
58176: PUSH
58177: LD_EXP 61
58181: PUSH
58182: LD_EXP 64
58186: PUSH
58187: LD_EXP 65
58191: PUSH
58192: LD_EXP 66
58196: PUSH
58197: LD_EXP 67
58201: PUSH
58202: LD_EXP 68
58206: PUSH
58207: LD_EXP 69
58211: PUSH
58212: LD_EXP 70
58216: PUSH
58217: LD_EXP 71
58221: PUSH
58222: LD_EXP 72
58226: PUSH
58227: LD_EXP 37
58231: PUSH
58232: LD_EXP 38
58236: PUSH
58237: LD_EXP 41
58241: PUSH
58242: LD_EXP 42
58246: PUSH
58247: LD_EXP 43
58251: PUSH
58252: LD_EXP 39
58256: PUSH
58257: LD_EXP 40
58261: PUSH
58262: LD_EXP 48
58266: PUSH
58267: LD_EXP 52
58271: PUSH
58272: LD_EXP 53
58276: PUSH
58277: LD_EXP 55
58281: PUSH
58282: LD_EXP 59
58286: PUSH
58287: LD_EXP 62
58291: PUSH
58292: LD_EXP 63
58296: PUSH
58297: LD_EXP 73
58301: PUSH
58302: LD_EXP 74
58306: PUSH
58307: LD_EXP 75
58311: PUSH
58312: LD_EXP 76
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: ST_TO_ADDR
// tmp :=  ;
58373: LD_ADDR_VAR 0 3
58377: PUSH
58378: LD_STRING 
58380: ST_TO_ADDR
// for i = 1 to normalCounter do
58381: LD_ADDR_VAR 0 8
58385: PUSH
58386: DOUBLE
58387: LD_INT 1
58389: DEC
58390: ST_TO_ADDR
58391: LD_EXP 21
58395: PUSH
58396: FOR_TO
58397: IFFALSE 58433
// begin if flags [ i ] then
58399: LD_VAR 0 4
58403: PUSH
58404: LD_VAR 0 8
58408: ARRAY
58409: IFFALSE 58431
// tmp := tmp & i & ; ;
58411: LD_ADDR_VAR 0 3
58415: PUSH
58416: LD_VAR 0 3
58420: PUSH
58421: LD_VAR 0 8
58425: STR
58426: PUSH
58427: LD_STRING ;
58429: STR
58430: ST_TO_ADDR
// end ;
58431: GO 58396
58433: POP
58434: POP
// for i = 1 to hardcoreCounter do
58435: LD_ADDR_VAR 0 8
58439: PUSH
58440: DOUBLE
58441: LD_INT 1
58443: DEC
58444: ST_TO_ADDR
58445: LD_EXP 22
58449: PUSH
58450: FOR_TO
58451: IFFALSE 58497
// begin if flags [ normalCounter + i ] then
58453: LD_VAR 0 4
58457: PUSH
58458: LD_EXP 21
58462: PUSH
58463: LD_VAR 0 8
58467: PLUS
58468: ARRAY
58469: IFFALSE 58495
// tmp := tmp & ( 100 + i ) & ; ;
58471: LD_ADDR_VAR 0 3
58475: PUSH
58476: LD_VAR 0 3
58480: PUSH
58481: LD_INT 100
58483: PUSH
58484: LD_VAR 0 8
58488: PLUS
58489: STR
58490: PUSH
58491: LD_STRING ;
58493: STR
58494: ST_TO_ADDR
// end ;
58495: GO 58450
58497: POP
58498: POP
// if tmp then
58499: LD_VAR 0 3
58503: IFFALSE 58515
// active := tmp ;
58505: LD_ADDR_VAR 0 7
58509: PUSH
58510: LD_VAR 0 3
58514: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
58515: LD_STRING getStreamItemsFromMission("
58517: PUSH
58518: LD_VAR 0 5
58522: STR
58523: PUSH
58524: LD_STRING ","
58526: STR
58527: PUSH
58528: LD_VAR 0 6
58532: STR
58533: PUSH
58534: LD_STRING ","
58536: STR
58537: PUSH
58538: LD_VAR 0 7
58542: STR
58543: PUSH
58544: LD_STRING ")
58546: STR
58547: PPUSH
58548: CALL_OW 559
// end else
58552: GO 58561
// ToLua ( getStreamItemsFromMission("","","") ) ;
58554: LD_STRING getStreamItemsFromMission("","","")
58556: PPUSH
58557: CALL_OW 559
// end ;
58561: LD_VAR 0 2
58565: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
58566: LD_EXP 20
58570: IFFALSE 58578
58572: PUSH
58573: LD_EXP 25
58577: AND
58578: IFFALSE 58702
58580: GO 58582
58582: DISABLE
58583: LD_INT 0
58585: PPUSH
58586: PPUSH
// begin enable ;
58587: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
58588: LD_ADDR_VAR 0 2
58592: PUSH
58593: LD_INT 22
58595: PUSH
58596: LD_OWVAR 2
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 2
58607: PUSH
58608: LD_INT 34
58610: PUSH
58611: LD_INT 7
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 34
58620: PUSH
58621: LD_INT 45
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 34
58630: PUSH
58631: LD_INT 28
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 34
58640: PUSH
58641: LD_INT 47
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PPUSH
58659: CALL_OW 69
58663: ST_TO_ADDR
// if not tmp then
58664: LD_VAR 0 2
58668: NOT
58669: IFFALSE 58673
// exit ;
58671: GO 58702
// for i in tmp do
58673: LD_ADDR_VAR 0 1
58677: PUSH
58678: LD_VAR 0 2
58682: PUSH
58683: FOR_IN
58684: IFFALSE 58700
// begin SetLives ( i , 0 ) ;
58686: LD_VAR 0 1
58690: PPUSH
58691: LD_INT 0
58693: PPUSH
58694: CALL_OW 234
// end ;
58698: GO 58683
58700: POP
58701: POP
// end ;
58702: PPOPN 2
58704: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
58705: LD_EXP 20
58709: IFFALSE 58717
58711: PUSH
58712: LD_EXP 26
58716: AND
58717: IFFALSE 58801
58719: GO 58721
58721: DISABLE
58722: LD_INT 0
58724: PPUSH
58725: PPUSH
// begin enable ;
58726: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
58727: LD_ADDR_VAR 0 2
58731: PUSH
58732: LD_INT 22
58734: PUSH
58735: LD_OWVAR 2
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 32
58746: PUSH
58747: LD_INT 3
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PPUSH
58758: CALL_OW 69
58762: ST_TO_ADDR
// if not tmp then
58763: LD_VAR 0 2
58767: NOT
58768: IFFALSE 58772
// exit ;
58770: GO 58801
// for i in tmp do
58772: LD_ADDR_VAR 0 1
58776: PUSH
58777: LD_VAR 0 2
58781: PUSH
58782: FOR_IN
58783: IFFALSE 58799
// begin SetLives ( i , 0 ) ;
58785: LD_VAR 0 1
58789: PPUSH
58790: LD_INT 0
58792: PPUSH
58793: CALL_OW 234
// end ;
58797: GO 58782
58799: POP
58800: POP
// end ;
58801: PPOPN 2
58803: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
58804: LD_EXP 20
58808: IFFALSE 58816
58810: PUSH
58811: LD_EXP 23
58815: AND
58816: IFFALSE 58909
58818: GO 58820
58820: DISABLE
58821: LD_INT 0
58823: PPUSH
// begin enable ;
58824: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
58825: LD_ADDR_VAR 0 1
58829: PUSH
58830: LD_INT 22
58832: PUSH
58833: LD_OWVAR 2
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 2
58844: PUSH
58845: LD_INT 25
58847: PUSH
58848: LD_INT 5
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 25
58857: PUSH
58858: LD_INT 9
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 25
58867: PUSH
58868: LD_INT 8
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PPUSH
58885: CALL_OW 69
58889: PUSH
58890: FOR_IN
58891: IFFALSE 58907
// begin SetClass ( i , 1 ) ;
58893: LD_VAR 0 1
58897: PPUSH
58898: LD_INT 1
58900: PPUSH
58901: CALL_OW 336
// end ;
58905: GO 58890
58907: POP
58908: POP
// end ;
58909: PPOPN 1
58911: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
58912: LD_EXP 20
58916: IFFALSE 58924
58918: PUSH
58919: LD_EXP 24
58923: AND
58924: IFFALSE 58936
58926: PUSH
58927: LD_OWVAR 65
58931: PUSH
58932: LD_INT 7
58934: LESS
58935: AND
58936: IFFALSE 58950
58938: GO 58940
58940: DISABLE
// begin enable ;
58941: ENABLE
// game_speed := 7 ;
58942: LD_ADDR_OWVAR 65
58946: PUSH
58947: LD_INT 7
58949: ST_TO_ADDR
// end ;
58950: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
58951: LD_EXP 20
58955: IFFALSE 58963
58957: PUSH
58958: LD_EXP 27
58962: AND
58963: IFFALSE 59165
58965: GO 58967
58967: DISABLE
58968: LD_INT 0
58970: PPUSH
58971: PPUSH
58972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
58973: LD_ADDR_VAR 0 3
58977: PUSH
58978: LD_INT 81
58980: PUSH
58981: LD_OWVAR 2
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 21
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PPUSH
59004: CALL_OW 69
59008: ST_TO_ADDR
// if not tmp then
59009: LD_VAR 0 3
59013: NOT
59014: IFFALSE 59018
// exit ;
59016: GO 59165
// if tmp > 5 then
59018: LD_VAR 0 3
59022: PUSH
59023: LD_INT 5
59025: GREATER
59026: IFFALSE 59038
// k := 5 else
59028: LD_ADDR_VAR 0 2
59032: PUSH
59033: LD_INT 5
59035: ST_TO_ADDR
59036: GO 59048
// k := tmp ;
59038: LD_ADDR_VAR 0 2
59042: PUSH
59043: LD_VAR 0 3
59047: ST_TO_ADDR
// for i := 1 to k do
59048: LD_ADDR_VAR 0 1
59052: PUSH
59053: DOUBLE
59054: LD_INT 1
59056: DEC
59057: ST_TO_ADDR
59058: LD_VAR 0 2
59062: PUSH
59063: FOR_TO
59064: IFFALSE 59163
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
59066: LD_VAR 0 3
59070: PUSH
59071: LD_VAR 0 1
59075: ARRAY
59076: PPUSH
59077: LD_VAR 0 1
59081: PUSH
59082: LD_INT 4
59084: MOD
59085: PUSH
59086: LD_INT 1
59088: PLUS
59089: PPUSH
59090: CALL_OW 259
59094: PUSH
59095: LD_INT 10
59097: LESS
59098: IFFALSE 59161
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
59100: LD_VAR 0 3
59104: PUSH
59105: LD_VAR 0 1
59109: ARRAY
59110: PPUSH
59111: LD_VAR 0 1
59115: PUSH
59116: LD_INT 4
59118: MOD
59119: PUSH
59120: LD_INT 1
59122: PLUS
59123: PPUSH
59124: LD_VAR 0 3
59128: PUSH
59129: LD_VAR 0 1
59133: ARRAY
59134: PPUSH
59135: LD_VAR 0 1
59139: PUSH
59140: LD_INT 4
59142: MOD
59143: PUSH
59144: LD_INT 1
59146: PLUS
59147: PPUSH
59148: CALL_OW 259
59152: PUSH
59153: LD_INT 1
59155: PLUS
59156: PPUSH
59157: CALL_OW 237
59161: GO 59063
59163: POP
59164: POP
// end ;
59165: PPOPN 3
59167: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
59168: LD_EXP 20
59172: IFFALSE 59180
59174: PUSH
59175: LD_EXP 28
59179: AND
59180: IFFALSE 59200
59182: GO 59184
59184: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
59185: LD_INT 4
59187: PPUSH
59188: LD_OWVAR 2
59192: PPUSH
59193: LD_INT 0
59195: PPUSH
59196: CALL_OW 324
59200: END
// every 0 0$1 trigger StreamModeActive and sShovel do
59201: LD_EXP 20
59205: IFFALSE 59213
59207: PUSH
59208: LD_EXP 57
59212: AND
59213: IFFALSE 59233
59215: GO 59217
59217: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
59218: LD_INT 19
59220: PPUSH
59221: LD_OWVAR 2
59225: PPUSH
59226: LD_INT 0
59228: PPUSH
59229: CALL_OW 324
59233: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
59234: LD_EXP 20
59238: IFFALSE 59246
59240: PUSH
59241: LD_EXP 29
59245: AND
59246: IFFALSE 59348
59248: GO 59250
59250: DISABLE
59251: LD_INT 0
59253: PPUSH
59254: PPUSH
// begin enable ;
59255: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
59256: LD_ADDR_VAR 0 2
59260: PUSH
59261: LD_INT 22
59263: PUSH
59264: LD_OWVAR 2
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 2
59275: PUSH
59276: LD_INT 34
59278: PUSH
59279: LD_INT 11
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 34
59288: PUSH
59289: LD_INT 30
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: LIST
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PPUSH
59305: CALL_OW 69
59309: ST_TO_ADDR
// if not tmp then
59310: LD_VAR 0 2
59314: NOT
59315: IFFALSE 59319
// exit ;
59317: GO 59348
// for i in tmp do
59319: LD_ADDR_VAR 0 1
59323: PUSH
59324: LD_VAR 0 2
59328: PUSH
59329: FOR_IN
59330: IFFALSE 59346
// begin SetLives ( i , 0 ) ;
59332: LD_VAR 0 1
59336: PPUSH
59337: LD_INT 0
59339: PPUSH
59340: CALL_OW 234
// end ;
59344: GO 59329
59346: POP
59347: POP
// end ;
59348: PPOPN 2
59350: END
// every 0 0$1 trigger StreamModeActive and sBunker do
59351: LD_EXP 20
59355: IFFALSE 59363
59357: PUSH
59358: LD_EXP 30
59362: AND
59363: IFFALSE 59383
59365: GO 59367
59367: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
59368: LD_INT 32
59370: PPUSH
59371: LD_OWVAR 2
59375: PPUSH
59376: LD_INT 0
59378: PPUSH
59379: CALL_OW 324
59383: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
59384: LD_EXP 20
59388: IFFALSE 59396
59390: PUSH
59391: LD_EXP 31
59395: AND
59396: IFFALSE 59579
59398: GO 59400
59400: DISABLE
59401: LD_INT 0
59403: PPUSH
59404: PPUSH
59405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
59406: LD_ADDR_VAR 0 2
59410: PUSH
59411: LD_INT 22
59413: PUSH
59414: LD_OWVAR 2
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 33
59425: PUSH
59426: LD_INT 3
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PPUSH
59437: CALL_OW 69
59441: ST_TO_ADDR
// if not tmp then
59442: LD_VAR 0 2
59446: NOT
59447: IFFALSE 59451
// exit ;
59449: GO 59579
// side := 0 ;
59451: LD_ADDR_VAR 0 3
59455: PUSH
59456: LD_INT 0
59458: ST_TO_ADDR
// for i := 1 to 8 do
59459: LD_ADDR_VAR 0 1
59463: PUSH
59464: DOUBLE
59465: LD_INT 1
59467: DEC
59468: ST_TO_ADDR
59469: LD_INT 8
59471: PUSH
59472: FOR_TO
59473: IFFALSE 59523
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
59475: LD_OWVAR 2
59479: PUSH
59480: LD_VAR 0 1
59484: NONEQUAL
59485: IFFALSE 59507
59487: PUSH
59488: LD_OWVAR 2
59492: PPUSH
59493: LD_VAR 0 1
59497: PPUSH
59498: CALL_OW 81
59502: PUSH
59503: LD_INT 2
59505: EQUAL
59506: AND
59507: IFFALSE 59521
// begin side := i ;
59509: LD_ADDR_VAR 0 3
59513: PUSH
59514: LD_VAR 0 1
59518: ST_TO_ADDR
// break ;
59519: GO 59523
// end ;
59521: GO 59472
59523: POP
59524: POP
// if not side then
59525: LD_VAR 0 3
59529: NOT
59530: IFFALSE 59534
// exit ;
59532: GO 59579
// for i := 1 to tmp do
59534: LD_ADDR_VAR 0 1
59538: PUSH
59539: DOUBLE
59540: LD_INT 1
59542: DEC
59543: ST_TO_ADDR
59544: LD_VAR 0 2
59548: PUSH
59549: FOR_TO
59550: IFFALSE 59577
// if Prob ( 60 ) then
59552: LD_INT 60
59554: PPUSH
59555: CALL_OW 13
59559: IFFALSE 59575
// SetSide ( i , side ) ;
59561: LD_VAR 0 1
59565: PPUSH
59566: LD_VAR 0 3
59570: PPUSH
59571: CALL_OW 235
59575: GO 59549
59577: POP
59578: POP
// end ;
59579: PPOPN 3
59581: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
59582: LD_EXP 20
59586: IFFALSE 59594
59588: PUSH
59589: LD_EXP 33
59593: AND
59594: IFFALSE 59713
59596: GO 59598
59598: DISABLE
59599: LD_INT 0
59601: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
59602: LD_ADDR_VAR 0 1
59606: PUSH
59607: LD_INT 22
59609: PUSH
59610: LD_OWVAR 2
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 21
59621: PUSH
59622: LD_INT 1
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 3
59631: PUSH
59632: LD_INT 23
59634: PUSH
59635: LD_INT 0
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: LIST
59650: PPUSH
59651: CALL_OW 69
59655: PUSH
59656: FOR_IN
59657: IFFALSE 59711
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
59659: LD_VAR 0 1
59663: PPUSH
59664: CALL_OW 257
59668: PUSH
59669: LD_INT 1
59671: PUSH
59672: LD_INT 2
59674: PUSH
59675: LD_INT 3
59677: PUSH
59678: LD_INT 4
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: IN
59687: IFFALSE 59709
// SetClass ( un , rand ( 1 , 4 ) ) ;
59689: LD_VAR 0 1
59693: PPUSH
59694: LD_INT 1
59696: PPUSH
59697: LD_INT 4
59699: PPUSH
59700: CALL_OW 12
59704: PPUSH
59705: CALL_OW 336
59709: GO 59656
59711: POP
59712: POP
// end ;
59713: PPOPN 1
59715: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
59716: LD_EXP 20
59720: IFFALSE 59728
59722: PUSH
59723: LD_EXP 32
59727: AND
59728: IFFALSE 59807
59730: GO 59732
59732: DISABLE
59733: LD_INT 0
59735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
59736: LD_ADDR_VAR 0 1
59740: PUSH
59741: LD_INT 22
59743: PUSH
59744: LD_OWVAR 2
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 21
59755: PUSH
59756: LD_INT 3
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PPUSH
59767: CALL_OW 69
59771: ST_TO_ADDR
// if not tmp then
59772: LD_VAR 0 1
59776: NOT
59777: IFFALSE 59781
// exit ;
59779: GO 59807
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
59781: LD_VAR 0 1
59785: PUSH
59786: LD_INT 1
59788: PPUSH
59789: LD_VAR 0 1
59793: PPUSH
59794: CALL_OW 12
59798: ARRAY
59799: PPUSH
59800: LD_INT 100
59802: PPUSH
59803: CALL_OW 234
// end ;
59807: PPOPN 1
59809: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
59810: LD_EXP 20
59814: IFFALSE 59822
59816: PUSH
59817: LD_EXP 34
59821: AND
59822: IFFALSE 59920
59824: GO 59826
59826: DISABLE
59827: LD_INT 0
59829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59830: LD_ADDR_VAR 0 1
59834: PUSH
59835: LD_INT 22
59837: PUSH
59838: LD_OWVAR 2
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 21
59849: PUSH
59850: LD_INT 1
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PPUSH
59861: CALL_OW 69
59865: ST_TO_ADDR
// if not tmp then
59866: LD_VAR 0 1
59870: NOT
59871: IFFALSE 59875
// exit ;
59873: GO 59920
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
59875: LD_VAR 0 1
59879: PUSH
59880: LD_INT 1
59882: PPUSH
59883: LD_VAR 0 1
59887: PPUSH
59888: CALL_OW 12
59892: ARRAY
59893: PPUSH
59894: LD_INT 1
59896: PPUSH
59897: LD_INT 4
59899: PPUSH
59900: CALL_OW 12
59904: PPUSH
59905: LD_INT 3000
59907: PPUSH
59908: LD_INT 9000
59910: PPUSH
59911: CALL_OW 12
59915: PPUSH
59916: CALL_OW 492
// end ;
59920: PPOPN 1
59922: END
// every 0 0$1 trigger StreamModeActive and sDepot do
59923: LD_EXP 20
59927: IFFALSE 59935
59929: PUSH
59930: LD_EXP 35
59934: AND
59935: IFFALSE 59955
59937: GO 59939
59939: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
59940: LD_INT 1
59942: PPUSH
59943: LD_OWVAR 2
59947: PPUSH
59948: LD_INT 0
59950: PPUSH
59951: CALL_OW 324
59955: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
59956: LD_EXP 20
59960: IFFALSE 59968
59962: PUSH
59963: LD_EXP 36
59967: AND
59968: IFFALSE 60051
59970: GO 59972
59972: DISABLE
59973: LD_INT 0
59975: PPUSH
59976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
59977: LD_ADDR_VAR 0 2
59981: PUSH
59982: LD_INT 22
59984: PUSH
59985: LD_OWVAR 2
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 21
59996: PUSH
59997: LD_INT 3
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PPUSH
60008: CALL_OW 69
60012: ST_TO_ADDR
// if not tmp then
60013: LD_VAR 0 2
60017: NOT
60018: IFFALSE 60022
// exit ;
60020: GO 60051
// for i in tmp do
60022: LD_ADDR_VAR 0 1
60026: PUSH
60027: LD_VAR 0 2
60031: PUSH
60032: FOR_IN
60033: IFFALSE 60049
// SetBLevel ( i , 10 ) ;
60035: LD_VAR 0 1
60039: PPUSH
60040: LD_INT 10
60042: PPUSH
60043: CALL_OW 241
60047: GO 60032
60049: POP
60050: POP
// end ;
60051: PPOPN 2
60053: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
60054: LD_EXP 20
60058: IFFALSE 60066
60060: PUSH
60061: LD_EXP 37
60065: AND
60066: IFFALSE 60177
60068: GO 60070
60070: DISABLE
60071: LD_INT 0
60073: PPUSH
60074: PPUSH
60075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60076: LD_ADDR_VAR 0 3
60080: PUSH
60081: LD_INT 22
60083: PUSH
60084: LD_OWVAR 2
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 25
60095: PUSH
60096: LD_INT 1
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PPUSH
60107: CALL_OW 69
60111: ST_TO_ADDR
// if not tmp then
60112: LD_VAR 0 3
60116: NOT
60117: IFFALSE 60121
// exit ;
60119: GO 60177
// un := tmp [ rand ( 1 , tmp ) ] ;
60121: LD_ADDR_VAR 0 2
60125: PUSH
60126: LD_VAR 0 3
60130: PUSH
60131: LD_INT 1
60133: PPUSH
60134: LD_VAR 0 3
60138: PPUSH
60139: CALL_OW 12
60143: ARRAY
60144: ST_TO_ADDR
// if Crawls ( un ) then
60145: LD_VAR 0 2
60149: PPUSH
60150: CALL_OW 318
60154: IFFALSE 60165
// ComWalk ( un ) ;
60156: LD_VAR 0 2
60160: PPUSH
60161: CALL_OW 138
// SetClass ( un , class_sniper ) ;
60165: LD_VAR 0 2
60169: PPUSH
60170: LD_INT 5
60172: PPUSH
60173: CALL_OW 336
// end ;
60177: PPOPN 3
60179: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
60180: LD_EXP 20
60184: IFFALSE 60192
60186: PUSH
60187: LD_EXP 38
60191: AND
60192: IFFALSE 60204
60194: PUSH
60195: LD_OWVAR 67
60199: PUSH
60200: LD_INT 4
60202: LESS
60203: AND
60204: IFFALSE 60223
60206: GO 60208
60208: DISABLE
// begin Difficulty := Difficulty + 1 ;
60209: LD_ADDR_OWVAR 67
60213: PUSH
60214: LD_OWVAR 67
60218: PUSH
60219: LD_INT 1
60221: PLUS
60222: ST_TO_ADDR
// end ;
60223: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
60224: LD_EXP 20
60228: IFFALSE 60236
60230: PUSH
60231: LD_EXP 39
60235: AND
60236: IFFALSE 60339
60238: GO 60240
60240: DISABLE
60241: LD_INT 0
60243: PPUSH
// begin for i := 1 to 5 do
60244: LD_ADDR_VAR 0 1
60248: PUSH
60249: DOUBLE
60250: LD_INT 1
60252: DEC
60253: ST_TO_ADDR
60254: LD_INT 5
60256: PUSH
60257: FOR_TO
60258: IFFALSE 60337
// begin uc_nation := nation_nature ;
60260: LD_ADDR_OWVAR 21
60264: PUSH
60265: LD_INT 0
60267: ST_TO_ADDR
// uc_side := 0 ;
60268: LD_ADDR_OWVAR 20
60272: PUSH
60273: LD_INT 0
60275: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
60276: LD_ADDR_OWVAR 29
60280: PUSH
60281: LD_INT 12
60283: PUSH
60284: LD_INT 12
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: ST_TO_ADDR
// hc_agressivity := 20 ;
60291: LD_ADDR_OWVAR 35
60295: PUSH
60296: LD_INT 20
60298: ST_TO_ADDR
// hc_class := class_tiger ;
60299: LD_ADDR_OWVAR 28
60303: PUSH
60304: LD_INT 14
60306: ST_TO_ADDR
// hc_gallery :=  ;
60307: LD_ADDR_OWVAR 33
60311: PUSH
60312: LD_STRING 
60314: ST_TO_ADDR
// hc_name :=  ;
60315: LD_ADDR_OWVAR 26
60319: PUSH
60320: LD_STRING 
60322: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
60323: CALL_OW 44
60327: PPUSH
60328: LD_INT 0
60330: PPUSH
60331: CALL_OW 51
// end ;
60335: GO 60257
60337: POP
60338: POP
// end ;
60339: PPOPN 1
60341: END
// every 0 0$1 trigger StreamModeActive and sBomb do
60342: LD_EXP 20
60346: IFFALSE 60354
60348: PUSH
60349: LD_EXP 40
60353: AND
60354: IFFALSE 60363
60356: GO 60358
60358: DISABLE
// StreamSibBomb ;
60359: CALL 60364 0 0
60363: END
// export function StreamSibBomb ; var i , x , y ; begin
60364: LD_INT 0
60366: PPUSH
60367: PPUSH
60368: PPUSH
60369: PPUSH
// result := false ;
60370: LD_ADDR_VAR 0 1
60374: PUSH
60375: LD_INT 0
60377: ST_TO_ADDR
// for i := 1 to 16 do
60378: LD_ADDR_VAR 0 2
60382: PUSH
60383: DOUBLE
60384: LD_INT 1
60386: DEC
60387: ST_TO_ADDR
60388: LD_INT 16
60390: PUSH
60391: FOR_TO
60392: IFFALSE 60591
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
60394: LD_ADDR_VAR 0 3
60398: PUSH
60399: LD_INT 10
60401: PUSH
60402: LD_INT 20
60404: PUSH
60405: LD_INT 30
60407: PUSH
60408: LD_INT 40
60410: PUSH
60411: LD_INT 50
60413: PUSH
60414: LD_INT 60
60416: PUSH
60417: LD_INT 70
60419: PUSH
60420: LD_INT 80
60422: PUSH
60423: LD_INT 90
60425: PUSH
60426: LD_INT 100
60428: PUSH
60429: LD_INT 110
60431: PUSH
60432: LD_INT 120
60434: PUSH
60435: LD_INT 130
60437: PUSH
60438: LD_INT 140
60440: PUSH
60441: LD_INT 150
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 1
60463: PPUSH
60464: LD_INT 15
60466: PPUSH
60467: CALL_OW 12
60471: ARRAY
60472: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
60473: LD_ADDR_VAR 0 4
60477: PUSH
60478: LD_INT 10
60480: PUSH
60481: LD_INT 20
60483: PUSH
60484: LD_INT 30
60486: PUSH
60487: LD_INT 40
60489: PUSH
60490: LD_INT 50
60492: PUSH
60493: LD_INT 60
60495: PUSH
60496: LD_INT 70
60498: PUSH
60499: LD_INT 80
60501: PUSH
60502: LD_INT 90
60504: PUSH
60505: LD_INT 100
60507: PUSH
60508: LD_INT 110
60510: PUSH
60511: LD_INT 120
60513: PUSH
60514: LD_INT 130
60516: PUSH
60517: LD_INT 140
60519: PUSH
60520: LD_INT 150
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 1
60542: PPUSH
60543: LD_INT 15
60545: PPUSH
60546: CALL_OW 12
60550: ARRAY
60551: ST_TO_ADDR
// if ValidHex ( x , y ) then
60552: LD_VAR 0 3
60556: PPUSH
60557: LD_VAR 0 4
60561: PPUSH
60562: CALL_OW 488
60566: IFFALSE 60589
// begin result := [ x , y ] ;
60568: LD_ADDR_VAR 0 1
60572: PUSH
60573: LD_VAR 0 3
60577: PUSH
60578: LD_VAR 0 4
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: ST_TO_ADDR
// break ;
60587: GO 60591
// end ; end ;
60589: GO 60391
60591: POP
60592: POP
// if result then
60593: LD_VAR 0 1
60597: IFFALSE 60657
// begin ToLua ( playSibBomb() ) ;
60599: LD_STRING playSibBomb()
60601: PPUSH
60602: CALL_OW 559
// wait ( 0 0$14 ) ;
60606: LD_INT 490
60608: PPUSH
60609: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
60613: LD_VAR 0 1
60617: PUSH
60618: LD_INT 1
60620: ARRAY
60621: PPUSH
60622: LD_VAR 0 1
60626: PUSH
60627: LD_INT 2
60629: ARRAY
60630: PPUSH
60631: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
60635: LD_VAR 0 1
60639: PUSH
60640: LD_INT 1
60642: ARRAY
60643: PPUSH
60644: LD_VAR 0 1
60648: PUSH
60649: LD_INT 2
60651: ARRAY
60652: PPUSH
60653: CALL_OW 429
// end ; end ;
60657: LD_VAR 0 1
60661: RET
// every 0 0$1 trigger StreamModeActive and sReset do
60662: LD_EXP 20
60666: IFFALSE 60674
60668: PUSH
60669: LD_EXP 42
60673: AND
60674: IFFALSE 60686
60676: GO 60678
60678: DISABLE
// YouLost (  ) ;
60679: LD_STRING 
60681: PPUSH
60682: CALL_OW 104
60686: END
// every 0 0$1 trigger StreamModeActive and sFog do
60687: LD_EXP 20
60691: IFFALSE 60699
60693: PUSH
60694: LD_EXP 41
60698: AND
60699: IFFALSE 60713
60701: GO 60703
60703: DISABLE
// FogOff ( your_side ) ;
60704: LD_OWVAR 2
60708: PPUSH
60709: CALL_OW 344
60713: END
// every 0 0$1 trigger StreamModeActive and sSun do
60714: LD_EXP 20
60718: IFFALSE 60726
60720: PUSH
60721: LD_EXP 43
60725: AND
60726: IFFALSE 60754
60728: GO 60730
60730: DISABLE
// begin solar_recharge_percent := 0 ;
60731: LD_ADDR_OWVAR 79
60735: PUSH
60736: LD_INT 0
60738: ST_TO_ADDR
// wait ( 5 5$00 ) ;
60739: LD_INT 10500
60741: PPUSH
60742: CALL_OW 67
// solar_recharge_percent := 100 ;
60746: LD_ADDR_OWVAR 79
60750: PUSH
60751: LD_INT 100
60753: ST_TO_ADDR
// end ;
60754: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
60755: LD_EXP 20
60759: IFFALSE 60767
60761: PUSH
60762: LD_EXP 44
60766: AND
60767: IFFALSE 61006
60769: GO 60771
60771: DISABLE
60772: LD_INT 0
60774: PPUSH
60775: PPUSH
60776: PPUSH
// begin tmp := [ ] ;
60777: LD_ADDR_VAR 0 3
60781: PUSH
60782: EMPTY
60783: ST_TO_ADDR
// for i := 1 to 6 do
60784: LD_ADDR_VAR 0 1
60788: PUSH
60789: DOUBLE
60790: LD_INT 1
60792: DEC
60793: ST_TO_ADDR
60794: LD_INT 6
60796: PUSH
60797: FOR_TO
60798: IFFALSE 60903
// begin uc_nation := nation_nature ;
60800: LD_ADDR_OWVAR 21
60804: PUSH
60805: LD_INT 0
60807: ST_TO_ADDR
// uc_side := 0 ;
60808: LD_ADDR_OWVAR 20
60812: PUSH
60813: LD_INT 0
60815: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
60816: LD_ADDR_OWVAR 29
60820: PUSH
60821: LD_INT 12
60823: PUSH
60824: LD_INT 12
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: ST_TO_ADDR
// hc_agressivity := 20 ;
60831: LD_ADDR_OWVAR 35
60835: PUSH
60836: LD_INT 20
60838: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
60839: LD_ADDR_OWVAR 28
60843: PUSH
60844: LD_INT 17
60846: ST_TO_ADDR
// hc_gallery :=  ;
60847: LD_ADDR_OWVAR 33
60851: PUSH
60852: LD_STRING 
60854: ST_TO_ADDR
// hc_name :=  ;
60855: LD_ADDR_OWVAR 26
60859: PUSH
60860: LD_STRING 
60862: ST_TO_ADDR
// un := CreateHuman ;
60863: LD_ADDR_VAR 0 2
60867: PUSH
60868: CALL_OW 44
60872: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
60873: LD_VAR 0 2
60877: PPUSH
60878: LD_INT 1
60880: PPUSH
60881: CALL_OW 51
// tmp := tmp ^ un ;
60885: LD_ADDR_VAR 0 3
60889: PUSH
60890: LD_VAR 0 3
60894: PUSH
60895: LD_VAR 0 2
60899: ADD
60900: ST_TO_ADDR
// end ;
60901: GO 60797
60903: POP
60904: POP
// repeat wait ( 0 0$1 ) ;
60905: LD_INT 35
60907: PPUSH
60908: CALL_OW 67
// for un in tmp do
60912: LD_ADDR_VAR 0 2
60916: PUSH
60917: LD_VAR 0 3
60921: PUSH
60922: FOR_IN
60923: IFFALSE 60997
// begin if IsDead ( un ) then
60925: LD_VAR 0 2
60929: PPUSH
60930: CALL_OW 301
60934: IFFALSE 60954
// begin tmp := tmp diff un ;
60936: LD_ADDR_VAR 0 3
60940: PUSH
60941: LD_VAR 0 3
60945: PUSH
60946: LD_VAR 0 2
60950: DIFF
60951: ST_TO_ADDR
// continue ;
60952: GO 60922
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
60954: LD_VAR 0 2
60958: PPUSH
60959: LD_INT 3
60961: PUSH
60962: LD_INT 22
60964: PUSH
60965: LD_INT 0
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PPUSH
60976: CALL_OW 69
60980: PPUSH
60981: LD_VAR 0 2
60985: PPUSH
60986: CALL_OW 74
60990: PPUSH
60991: CALL_OW 115
// end ;
60995: GO 60922
60997: POP
60998: POP
// until not tmp ;
60999: LD_VAR 0 3
61003: NOT
61004: IFFALSE 60905
// end ;
61006: PPOPN 3
61008: END
// every 0 0$1 trigger StreamModeActive and sTroll do
61009: LD_EXP 20
61013: IFFALSE 61021
61015: PUSH
61016: LD_EXP 45
61020: AND
61021: IFFALSE 61075
61023: GO 61025
61025: DISABLE
// begin ToLua ( displayTroll(); ) ;
61026: LD_STRING displayTroll();
61028: PPUSH
61029: CALL_OW 559
// wait ( 3 3$00 ) ;
61033: LD_INT 6300
61035: PPUSH
61036: CALL_OW 67
// ToLua ( hideTroll(); ) ;
61040: LD_STRING hideTroll();
61042: PPUSH
61043: CALL_OW 559
// wait ( 1 1$00 ) ;
61047: LD_INT 2100
61049: PPUSH
61050: CALL_OW 67
// ToLua ( displayTroll(); ) ;
61054: LD_STRING displayTroll();
61056: PPUSH
61057: CALL_OW 559
// wait ( 1 1$00 ) ;
61061: LD_INT 2100
61063: PPUSH
61064: CALL_OW 67
// ToLua ( hideTroll(); ) ;
61068: LD_STRING hideTroll();
61070: PPUSH
61071: CALL_OW 559
// end ;
61075: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
61076: LD_EXP 20
61080: IFFALSE 61088
61082: PUSH
61083: LD_EXP 46
61087: AND
61088: IFFALSE 61151
61090: GO 61092
61092: DISABLE
61093: LD_INT 0
61095: PPUSH
// begin p := 0 ;
61096: LD_ADDR_VAR 0 1
61100: PUSH
61101: LD_INT 0
61103: ST_TO_ADDR
// repeat game_speed := 1 ;
61104: LD_ADDR_OWVAR 65
61108: PUSH
61109: LD_INT 1
61111: ST_TO_ADDR
// wait ( 0 0$1 ) ;
61112: LD_INT 35
61114: PPUSH
61115: CALL_OW 67
// p := p + 1 ;
61119: LD_ADDR_VAR 0 1
61123: PUSH
61124: LD_VAR 0 1
61128: PUSH
61129: LD_INT 1
61131: PLUS
61132: ST_TO_ADDR
// until p >= 60 ;
61133: LD_VAR 0 1
61137: PUSH
61138: LD_INT 60
61140: GREATEREQUAL
61141: IFFALSE 61104
// game_speed := 4 ;
61143: LD_ADDR_OWVAR 65
61147: PUSH
61148: LD_INT 4
61150: ST_TO_ADDR
// end ;
61151: PPOPN 1
61153: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
61154: LD_EXP 20
61158: IFFALSE 61166
61160: PUSH
61161: LD_EXP 47
61165: AND
61166: IFFALSE 61312
61168: GO 61170
61170: DISABLE
61171: LD_INT 0
61173: PPUSH
61174: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61175: LD_ADDR_VAR 0 1
61179: PUSH
61180: LD_INT 22
61182: PUSH
61183: LD_OWVAR 2
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 2
61194: PUSH
61195: LD_INT 30
61197: PUSH
61198: LD_INT 0
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 30
61207: PUSH
61208: LD_INT 1
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: LIST
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PPUSH
61224: CALL_OW 69
61228: ST_TO_ADDR
// if not depot then
61229: LD_VAR 0 1
61233: NOT
61234: IFFALSE 61238
// exit ;
61236: GO 61312
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
61238: LD_ADDR_VAR 0 2
61242: PUSH
61243: LD_VAR 0 1
61247: PUSH
61248: LD_INT 1
61250: PPUSH
61251: LD_VAR 0 1
61255: PPUSH
61256: CALL_OW 12
61260: ARRAY
61261: PPUSH
61262: CALL_OW 274
61266: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
61267: LD_VAR 0 2
61271: PPUSH
61272: LD_INT 1
61274: PPUSH
61275: LD_INT 0
61277: PPUSH
61278: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
61282: LD_VAR 0 2
61286: PPUSH
61287: LD_INT 2
61289: PPUSH
61290: LD_INT 0
61292: PPUSH
61293: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
61297: LD_VAR 0 2
61301: PPUSH
61302: LD_INT 3
61304: PPUSH
61305: LD_INT 0
61307: PPUSH
61308: CALL_OW 277
// end ;
61312: PPOPN 2
61314: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
61315: LD_EXP 20
61319: IFFALSE 61327
61321: PUSH
61322: LD_EXP 48
61326: AND
61327: IFFALSE 61424
61329: GO 61331
61331: DISABLE
61332: LD_INT 0
61334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61335: LD_ADDR_VAR 0 1
61339: PUSH
61340: LD_INT 22
61342: PUSH
61343: LD_OWVAR 2
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 21
61354: PUSH
61355: LD_INT 1
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 3
61364: PUSH
61365: LD_INT 23
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: LIST
61383: PPUSH
61384: CALL_OW 69
61388: ST_TO_ADDR
// if not tmp then
61389: LD_VAR 0 1
61393: NOT
61394: IFFALSE 61398
// exit ;
61396: GO 61424
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
61398: LD_VAR 0 1
61402: PUSH
61403: LD_INT 1
61405: PPUSH
61406: LD_VAR 0 1
61410: PPUSH
61411: CALL_OW 12
61415: ARRAY
61416: PPUSH
61417: LD_INT 200
61419: PPUSH
61420: CALL_OW 234
// end ;
61424: PPOPN 1
61426: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
61427: LD_EXP 20
61431: IFFALSE 61439
61433: PUSH
61434: LD_EXP 49
61438: AND
61439: IFFALSE 61518
61441: GO 61443
61443: DISABLE
61444: LD_INT 0
61446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
61447: LD_ADDR_VAR 0 1
61451: PUSH
61452: LD_INT 22
61454: PUSH
61455: LD_OWVAR 2
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 21
61466: PUSH
61467: LD_INT 2
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PPUSH
61478: CALL_OW 69
61482: ST_TO_ADDR
// if not tmp then
61483: LD_VAR 0 1
61487: NOT
61488: IFFALSE 61492
// exit ;
61490: GO 61518
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
61492: LD_VAR 0 1
61496: PUSH
61497: LD_INT 1
61499: PPUSH
61500: LD_VAR 0 1
61504: PPUSH
61505: CALL_OW 12
61509: ARRAY
61510: PPUSH
61511: LD_INT 60
61513: PPUSH
61514: CALL_OW 234
// end ;
61518: PPOPN 1
61520: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
61521: LD_EXP 20
61525: IFFALSE 61533
61527: PUSH
61528: LD_EXP 50
61532: AND
61533: IFFALSE 61632
61535: GO 61537
61537: DISABLE
61538: LD_INT 0
61540: PPUSH
61541: PPUSH
// begin enable ;
61542: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
61543: LD_ADDR_VAR 0 1
61547: PUSH
61548: LD_INT 22
61550: PUSH
61551: LD_OWVAR 2
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 61
61562: PUSH
61563: EMPTY
61564: LIST
61565: PUSH
61566: LD_INT 33
61568: PUSH
61569: LD_INT 2
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: LIST
61580: PPUSH
61581: CALL_OW 69
61585: ST_TO_ADDR
// if not tmp then
61586: LD_VAR 0 1
61590: NOT
61591: IFFALSE 61595
// exit ;
61593: GO 61632
// for i in tmp do
61595: LD_ADDR_VAR 0 2
61599: PUSH
61600: LD_VAR 0 1
61604: PUSH
61605: FOR_IN
61606: IFFALSE 61630
// if IsControledBy ( i ) then
61608: LD_VAR 0 2
61612: PPUSH
61613: CALL_OW 312
61617: IFFALSE 61628
// ComUnlink ( i ) ;
61619: LD_VAR 0 2
61623: PPUSH
61624: CALL_OW 136
61628: GO 61605
61630: POP
61631: POP
// end ;
61632: PPOPN 2
61634: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
61635: LD_EXP 20
61639: IFFALSE 61647
61641: PUSH
61642: LD_EXP 51
61646: AND
61647: IFFALSE 61787
61649: GO 61651
61651: DISABLE
61652: LD_INT 0
61654: PPUSH
61655: PPUSH
// begin ToLua ( displayPowell(); ) ;
61656: LD_STRING displayPowell();
61658: PPUSH
61659: CALL_OW 559
// uc_side := 0 ;
61663: LD_ADDR_OWVAR 20
61667: PUSH
61668: LD_INT 0
61670: ST_TO_ADDR
// uc_nation := 2 ;
61671: LD_ADDR_OWVAR 21
61675: PUSH
61676: LD_INT 2
61678: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
61679: LD_ADDR_OWVAR 37
61683: PUSH
61684: LD_INT 14
61686: ST_TO_ADDR
// vc_engine := engine_siberite ;
61687: LD_ADDR_OWVAR 39
61691: PUSH
61692: LD_INT 3
61694: ST_TO_ADDR
// vc_control := control_apeman ;
61695: LD_ADDR_OWVAR 38
61699: PUSH
61700: LD_INT 5
61702: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
61703: LD_ADDR_OWVAR 40
61707: PUSH
61708: LD_INT 29
61710: ST_TO_ADDR
// un := CreateVehicle ;
61711: LD_ADDR_VAR 0 2
61715: PUSH
61716: CALL_OW 45
61720: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
61721: LD_VAR 0 2
61725: PPUSH
61726: LD_INT 1
61728: PPUSH
61729: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
61733: LD_INT 35
61735: PPUSH
61736: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
61740: LD_VAR 0 2
61744: PPUSH
61745: LD_INT 22
61747: PUSH
61748: LD_OWVAR 2
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PPUSH
61757: CALL_OW 69
61761: PPUSH
61762: LD_VAR 0 2
61766: PPUSH
61767: CALL_OW 74
61771: PPUSH
61772: CALL_OW 115
// until IsDead ( un ) ;
61776: LD_VAR 0 2
61780: PPUSH
61781: CALL_OW 301
61785: IFFALSE 61733
// end ;
61787: PPOPN 2
61789: END
// every 0 0$1 trigger StreamModeActive and sStu do
61790: LD_EXP 20
61794: IFFALSE 61802
61796: PUSH
61797: LD_EXP 59
61801: AND
61802: IFFALSE 61818
61804: GO 61806
61806: DISABLE
// begin ToLua ( displayStucuk(); ) ;
61807: LD_STRING displayStucuk();
61809: PPUSH
61810: CALL_OW 559
// ResetFog ;
61814: CALL_OW 335
// end ;
61818: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
61819: LD_EXP 20
61823: IFFALSE 61831
61825: PUSH
61826: LD_EXP 52
61830: AND
61831: IFFALSE 61972
61833: GO 61835
61835: DISABLE
61836: LD_INT 0
61838: PPUSH
61839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
61840: LD_ADDR_VAR 0 2
61844: PUSH
61845: LD_INT 22
61847: PUSH
61848: LD_OWVAR 2
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 21
61859: PUSH
61860: LD_INT 1
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PPUSH
61871: CALL_OW 69
61875: ST_TO_ADDR
// if not tmp then
61876: LD_VAR 0 2
61880: NOT
61881: IFFALSE 61885
// exit ;
61883: GO 61972
// un := tmp [ rand ( 1 , tmp ) ] ;
61885: LD_ADDR_VAR 0 1
61889: PUSH
61890: LD_VAR 0 2
61894: PUSH
61895: LD_INT 1
61897: PPUSH
61898: LD_VAR 0 2
61902: PPUSH
61903: CALL_OW 12
61907: ARRAY
61908: ST_TO_ADDR
// SetSide ( un , 0 ) ;
61909: LD_VAR 0 1
61913: PPUSH
61914: LD_INT 0
61916: PPUSH
61917: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
61921: LD_VAR 0 1
61925: PPUSH
61926: LD_OWVAR 3
61930: PUSH
61931: LD_VAR 0 1
61935: DIFF
61936: PPUSH
61937: LD_VAR 0 1
61941: PPUSH
61942: CALL_OW 74
61946: PPUSH
61947: CALL_OW 115
// wait ( 0 0$20 ) ;
61951: LD_INT 700
61953: PPUSH
61954: CALL_OW 67
// SetSide ( un , your_side ) ;
61958: LD_VAR 0 1
61962: PPUSH
61963: LD_OWVAR 2
61967: PPUSH
61968: CALL_OW 235
// end ;
61972: PPOPN 2
61974: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
61975: LD_EXP 20
61979: IFFALSE 61987
61981: PUSH
61982: LD_EXP 53
61986: AND
61987: IFFALSE 62093
61989: GO 61991
61991: DISABLE
61992: LD_INT 0
61994: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61995: LD_ADDR_VAR 0 1
61999: PUSH
62000: LD_INT 22
62002: PUSH
62003: LD_OWVAR 2
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 2
62014: PUSH
62015: LD_INT 30
62017: PUSH
62018: LD_INT 0
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 30
62027: PUSH
62028: LD_INT 1
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: LIST
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PPUSH
62044: CALL_OW 69
62048: ST_TO_ADDR
// if not depot then
62049: LD_VAR 0 1
62053: NOT
62054: IFFALSE 62058
// exit ;
62056: GO 62093
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
62058: LD_VAR 0 1
62062: PUSH
62063: LD_INT 1
62065: ARRAY
62066: PPUSH
62067: CALL_OW 250
62071: PPUSH
62072: LD_VAR 0 1
62076: PUSH
62077: LD_INT 1
62079: ARRAY
62080: PPUSH
62081: CALL_OW 251
62085: PPUSH
62086: LD_INT 70
62088: PPUSH
62089: CALL_OW 495
// end ;
62093: PPOPN 1
62095: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
62096: LD_EXP 20
62100: IFFALSE 62108
62102: PUSH
62103: LD_EXP 54
62107: AND
62108: IFFALSE 62319
62110: GO 62112
62112: DISABLE
62113: LD_INT 0
62115: PPUSH
62116: PPUSH
62117: PPUSH
62118: PPUSH
62119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62120: LD_ADDR_VAR 0 5
62124: PUSH
62125: LD_INT 22
62127: PUSH
62128: LD_OWVAR 2
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 21
62139: PUSH
62140: LD_INT 1
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PPUSH
62151: CALL_OW 69
62155: ST_TO_ADDR
// if not tmp then
62156: LD_VAR 0 5
62160: NOT
62161: IFFALSE 62165
// exit ;
62163: GO 62319
// for i in tmp do
62165: LD_ADDR_VAR 0 1
62169: PUSH
62170: LD_VAR 0 5
62174: PUSH
62175: FOR_IN
62176: IFFALSE 62317
// begin d := rand ( 0 , 5 ) ;
62178: LD_ADDR_VAR 0 4
62182: PUSH
62183: LD_INT 0
62185: PPUSH
62186: LD_INT 5
62188: PPUSH
62189: CALL_OW 12
62193: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
62194: LD_ADDR_VAR 0 2
62198: PUSH
62199: LD_VAR 0 1
62203: PPUSH
62204: CALL_OW 250
62208: PPUSH
62209: LD_VAR 0 4
62213: PPUSH
62214: LD_INT 3
62216: PPUSH
62217: LD_INT 12
62219: PPUSH
62220: CALL_OW 12
62224: PPUSH
62225: CALL_OW 272
62229: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
62230: LD_ADDR_VAR 0 3
62234: PUSH
62235: LD_VAR 0 1
62239: PPUSH
62240: CALL_OW 251
62244: PPUSH
62245: LD_VAR 0 4
62249: PPUSH
62250: LD_INT 3
62252: PPUSH
62253: LD_INT 12
62255: PPUSH
62256: CALL_OW 12
62260: PPUSH
62261: CALL_OW 273
62265: ST_TO_ADDR
// if ValidHex ( x , y ) then
62266: LD_VAR 0 2
62270: PPUSH
62271: LD_VAR 0 3
62275: PPUSH
62276: CALL_OW 488
62280: IFFALSE 62315
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
62282: LD_VAR 0 1
62286: PPUSH
62287: LD_VAR 0 2
62291: PPUSH
62292: LD_VAR 0 3
62296: PPUSH
62297: LD_INT 3
62299: PPUSH
62300: LD_INT 6
62302: PPUSH
62303: CALL_OW 12
62307: PPUSH
62308: LD_INT 1
62310: PPUSH
62311: CALL_OW 483
// end ;
62315: GO 62175
62317: POP
62318: POP
// end ;
62319: PPOPN 5
62321: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
62322: LD_EXP 20
62326: IFFALSE 62334
62328: PUSH
62329: LD_EXP 55
62333: AND
62334: IFFALSE 62428
62336: GO 62338
62338: DISABLE
62339: LD_INT 0
62341: PPUSH
62342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
62343: LD_ADDR_VAR 0 2
62347: PUSH
62348: LD_INT 22
62350: PUSH
62351: LD_OWVAR 2
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 32
62362: PUSH
62363: LD_INT 1
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 21
62372: PUSH
62373: LD_INT 2
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: LIST
62384: PPUSH
62385: CALL_OW 69
62389: ST_TO_ADDR
// if not tmp then
62390: LD_VAR 0 2
62394: NOT
62395: IFFALSE 62399
// exit ;
62397: GO 62428
// for i in tmp do
62399: LD_ADDR_VAR 0 1
62403: PUSH
62404: LD_VAR 0 2
62408: PUSH
62409: FOR_IN
62410: IFFALSE 62426
// SetFuel ( i , 0 ) ;
62412: LD_VAR 0 1
62416: PPUSH
62417: LD_INT 0
62419: PPUSH
62420: CALL_OW 240
62424: GO 62409
62426: POP
62427: POP
// end ;
62428: PPOPN 2
62430: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
62431: LD_EXP 20
62435: IFFALSE 62443
62437: PUSH
62438: LD_EXP 56
62442: AND
62443: IFFALSE 62509
62445: GO 62447
62447: DISABLE
62448: LD_INT 0
62450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
62451: LD_ADDR_VAR 0 1
62455: PUSH
62456: LD_INT 22
62458: PUSH
62459: LD_OWVAR 2
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 30
62470: PUSH
62471: LD_INT 29
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PPUSH
62482: CALL_OW 69
62486: ST_TO_ADDR
// if not tmp then
62487: LD_VAR 0 1
62491: NOT
62492: IFFALSE 62496
// exit ;
62494: GO 62509
// DestroyUnit ( tmp [ 1 ] ) ;
62496: LD_VAR 0 1
62500: PUSH
62501: LD_INT 1
62503: ARRAY
62504: PPUSH
62505: CALL_OW 65
// end ;
62509: PPOPN 1
62511: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
62512: LD_EXP 20
62516: IFFALSE 62524
62518: PUSH
62519: LD_EXP 58
62523: AND
62524: IFFALSE 62653
62526: GO 62528
62528: DISABLE
62529: LD_INT 0
62531: PPUSH
// begin uc_side := 0 ;
62532: LD_ADDR_OWVAR 20
62536: PUSH
62537: LD_INT 0
62539: ST_TO_ADDR
// uc_nation := nation_arabian ;
62540: LD_ADDR_OWVAR 21
62544: PUSH
62545: LD_INT 2
62547: ST_TO_ADDR
// hc_gallery :=  ;
62548: LD_ADDR_OWVAR 33
62552: PUSH
62553: LD_STRING 
62555: ST_TO_ADDR
// hc_name :=  ;
62556: LD_ADDR_OWVAR 26
62560: PUSH
62561: LD_STRING 
62563: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
62564: LD_INT 1
62566: PPUSH
62567: LD_INT 11
62569: PPUSH
62570: LD_INT 10
62572: PPUSH
62573: CALL_OW 380
// un := CreateHuman ;
62577: LD_ADDR_VAR 0 1
62581: PUSH
62582: CALL_OW 44
62586: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62587: LD_VAR 0 1
62591: PPUSH
62592: LD_INT 1
62594: PPUSH
62595: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
62599: LD_INT 35
62601: PPUSH
62602: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
62606: LD_VAR 0 1
62610: PPUSH
62611: LD_INT 22
62613: PUSH
62614: LD_OWVAR 2
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PPUSH
62623: CALL_OW 69
62627: PPUSH
62628: LD_VAR 0 1
62632: PPUSH
62633: CALL_OW 74
62637: PPUSH
62638: CALL_OW 115
// until IsDead ( un ) ;
62642: LD_VAR 0 1
62646: PPUSH
62647: CALL_OW 301
62651: IFFALSE 62599
// end ;
62653: PPOPN 1
62655: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
62656: LD_EXP 20
62660: IFFALSE 62668
62662: PUSH
62663: LD_EXP 60
62667: AND
62668: IFFALSE 62680
62670: GO 62672
62672: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
62673: LD_STRING earthquake(getX(game), 0, 32)
62675: PPUSH
62676: CALL_OW 559
62680: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
62681: LD_EXP 20
62685: IFFALSE 62693
62687: PUSH
62688: LD_EXP 61
62692: AND
62693: IFFALSE 62784
62695: GO 62697
62697: DISABLE
62698: LD_INT 0
62700: PPUSH
// begin enable ;
62701: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
62702: LD_ADDR_VAR 0 1
62706: PUSH
62707: LD_INT 22
62709: PUSH
62710: LD_OWVAR 2
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 21
62721: PUSH
62722: LD_INT 2
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 33
62731: PUSH
62732: LD_INT 3
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: LIST
62743: PPUSH
62744: CALL_OW 69
62748: ST_TO_ADDR
// if not tmp then
62749: LD_VAR 0 1
62753: NOT
62754: IFFALSE 62758
// exit ;
62756: GO 62784
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
62758: LD_VAR 0 1
62762: PUSH
62763: LD_INT 1
62765: PPUSH
62766: LD_VAR 0 1
62770: PPUSH
62771: CALL_OW 12
62775: ARRAY
62776: PPUSH
62777: LD_INT 1
62779: PPUSH
62780: CALL_OW 234
// end ;
62784: PPOPN 1
62786: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
62787: LD_EXP 20
62791: IFFALSE 62799
62793: PUSH
62794: LD_EXP 62
62798: AND
62799: IFFALSE 62940
62801: GO 62803
62803: DISABLE
62804: LD_INT 0
62806: PPUSH
62807: PPUSH
62808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
62809: LD_ADDR_VAR 0 3
62813: PUSH
62814: LD_INT 22
62816: PUSH
62817: LD_OWVAR 2
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 25
62828: PUSH
62829: LD_INT 1
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PPUSH
62840: CALL_OW 69
62844: ST_TO_ADDR
// if not tmp then
62845: LD_VAR 0 3
62849: NOT
62850: IFFALSE 62854
// exit ;
62852: GO 62940
// un := tmp [ rand ( 1 , tmp ) ] ;
62854: LD_ADDR_VAR 0 2
62858: PUSH
62859: LD_VAR 0 3
62863: PUSH
62864: LD_INT 1
62866: PPUSH
62867: LD_VAR 0 3
62871: PPUSH
62872: CALL_OW 12
62876: ARRAY
62877: ST_TO_ADDR
// if Crawls ( un ) then
62878: LD_VAR 0 2
62882: PPUSH
62883: CALL_OW 318
62887: IFFALSE 62898
// ComWalk ( un ) ;
62889: LD_VAR 0 2
62893: PPUSH
62894: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
62898: LD_VAR 0 2
62902: PPUSH
62903: LD_INT 9
62905: PPUSH
62906: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
62910: LD_INT 28
62912: PPUSH
62913: LD_OWVAR 2
62917: PPUSH
62918: LD_INT 2
62920: PPUSH
62921: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
62925: LD_INT 29
62927: PPUSH
62928: LD_OWVAR 2
62932: PPUSH
62933: LD_INT 2
62935: PPUSH
62936: CALL_OW 322
// end ;
62940: PPOPN 3
62942: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
62943: LD_EXP 20
62947: IFFALSE 62955
62949: PUSH
62950: LD_EXP 63
62954: AND
62955: IFFALSE 63066
62957: GO 62959
62959: DISABLE
62960: LD_INT 0
62962: PPUSH
62963: PPUSH
62964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
62965: LD_ADDR_VAR 0 3
62969: PUSH
62970: LD_INT 22
62972: PUSH
62973: LD_OWVAR 2
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 25
62984: PUSH
62985: LD_INT 1
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PPUSH
62996: CALL_OW 69
63000: ST_TO_ADDR
// if not tmp then
63001: LD_VAR 0 3
63005: NOT
63006: IFFALSE 63010
// exit ;
63008: GO 63066
// un := tmp [ rand ( 1 , tmp ) ] ;
63010: LD_ADDR_VAR 0 2
63014: PUSH
63015: LD_VAR 0 3
63019: PUSH
63020: LD_INT 1
63022: PPUSH
63023: LD_VAR 0 3
63027: PPUSH
63028: CALL_OW 12
63032: ARRAY
63033: ST_TO_ADDR
// if Crawls ( un ) then
63034: LD_VAR 0 2
63038: PPUSH
63039: CALL_OW 318
63043: IFFALSE 63054
// ComWalk ( un ) ;
63045: LD_VAR 0 2
63049: PPUSH
63050: CALL_OW 138
// SetClass ( un , class_mortar ) ;
63054: LD_VAR 0 2
63058: PPUSH
63059: LD_INT 8
63061: PPUSH
63062: CALL_OW 336
// end ;
63066: PPOPN 3
63068: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
63069: LD_EXP 20
63073: IFFALSE 63081
63075: PUSH
63076: LD_EXP 64
63080: AND
63081: IFFALSE 63225
63083: GO 63085
63085: DISABLE
63086: LD_INT 0
63088: PPUSH
63089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
63090: LD_ADDR_VAR 0 2
63094: PUSH
63095: LD_INT 22
63097: PUSH
63098: LD_OWVAR 2
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 21
63109: PUSH
63110: LD_INT 2
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 2
63119: PUSH
63120: LD_INT 34
63122: PUSH
63123: LD_INT 12
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 34
63132: PUSH
63133: LD_INT 51
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 34
63142: PUSH
63143: LD_INT 32
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: LIST
63160: PPUSH
63161: CALL_OW 69
63165: ST_TO_ADDR
// if not tmp then
63166: LD_VAR 0 2
63170: NOT
63171: IFFALSE 63175
// exit ;
63173: GO 63225
// for i in tmp do
63175: LD_ADDR_VAR 0 1
63179: PUSH
63180: LD_VAR 0 2
63184: PUSH
63185: FOR_IN
63186: IFFALSE 63223
// if GetCargo ( i , mat_artifact ) = 0 then
63188: LD_VAR 0 1
63192: PPUSH
63193: LD_INT 4
63195: PPUSH
63196: CALL_OW 289
63200: PUSH
63201: LD_INT 0
63203: EQUAL
63204: IFFALSE 63221
// SetCargo ( i , mat_siberit , 100 ) ;
63206: LD_VAR 0 1
63210: PPUSH
63211: LD_INT 3
63213: PPUSH
63214: LD_INT 100
63216: PPUSH
63217: CALL_OW 290
63221: GO 63185
63223: POP
63224: POP
// end ;
63225: PPOPN 2
63227: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
63228: LD_EXP 20
63232: IFFALSE 63240
63234: PUSH
63235: LD_EXP 65
63239: AND
63240: IFFALSE 63423
63242: GO 63244
63244: DISABLE
63245: LD_INT 0
63247: PPUSH
63248: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63249: LD_ADDR_VAR 0 2
63253: PUSH
63254: LD_INT 22
63256: PUSH
63257: LD_OWVAR 2
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PPUSH
63266: CALL_OW 69
63270: ST_TO_ADDR
// if not tmp then
63271: LD_VAR 0 2
63275: NOT
63276: IFFALSE 63280
// exit ;
63278: GO 63423
// for i := 1 to 2 do
63280: LD_ADDR_VAR 0 1
63284: PUSH
63285: DOUBLE
63286: LD_INT 1
63288: DEC
63289: ST_TO_ADDR
63290: LD_INT 2
63292: PUSH
63293: FOR_TO
63294: IFFALSE 63421
// begin uc_side := your_side ;
63296: LD_ADDR_OWVAR 20
63300: PUSH
63301: LD_OWVAR 2
63305: ST_TO_ADDR
// uc_nation := nation_american ;
63306: LD_ADDR_OWVAR 21
63310: PUSH
63311: LD_INT 1
63313: ST_TO_ADDR
// vc_chassis := us_morphling ;
63314: LD_ADDR_OWVAR 37
63318: PUSH
63319: LD_INT 5
63321: ST_TO_ADDR
// vc_engine := engine_siberite ;
63322: LD_ADDR_OWVAR 39
63326: PUSH
63327: LD_INT 3
63329: ST_TO_ADDR
// vc_control := control_computer ;
63330: LD_ADDR_OWVAR 38
63334: PUSH
63335: LD_INT 3
63337: ST_TO_ADDR
// vc_weapon := us_double_laser ;
63338: LD_ADDR_OWVAR 40
63342: PUSH
63343: LD_INT 10
63345: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
63346: LD_VAR 0 2
63350: PUSH
63351: LD_INT 1
63353: ARRAY
63354: PPUSH
63355: CALL_OW 310
63359: NOT
63360: IFFALSE 63407
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
63362: CALL_OW 45
63366: PPUSH
63367: LD_VAR 0 2
63371: PUSH
63372: LD_INT 1
63374: ARRAY
63375: PPUSH
63376: CALL_OW 250
63380: PPUSH
63381: LD_VAR 0 2
63385: PUSH
63386: LD_INT 1
63388: ARRAY
63389: PPUSH
63390: CALL_OW 251
63394: PPUSH
63395: LD_INT 12
63397: PPUSH
63398: LD_INT 1
63400: PPUSH
63401: CALL_OW 50
63405: GO 63419
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
63407: CALL_OW 45
63411: PPUSH
63412: LD_INT 1
63414: PPUSH
63415: CALL_OW 51
// end ;
63419: GO 63293
63421: POP
63422: POP
// end ;
63423: PPOPN 2
63425: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
63426: LD_EXP 20
63430: IFFALSE 63438
63432: PUSH
63433: LD_EXP 66
63437: AND
63438: IFFALSE 63660
63440: GO 63442
63442: DISABLE
63443: LD_INT 0
63445: PPUSH
63446: PPUSH
63447: PPUSH
63448: PPUSH
63449: PPUSH
63450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
63451: LD_ADDR_VAR 0 6
63455: PUSH
63456: LD_INT 22
63458: PUSH
63459: LD_OWVAR 2
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 21
63470: PUSH
63471: LD_INT 1
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 3
63480: PUSH
63481: LD_INT 23
63483: PUSH
63484: LD_INT 0
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: LIST
63499: PPUSH
63500: CALL_OW 69
63504: ST_TO_ADDR
// if not tmp then
63505: LD_VAR 0 6
63509: NOT
63510: IFFALSE 63514
// exit ;
63512: GO 63660
// s1 := rand ( 1 , 4 ) ;
63514: LD_ADDR_VAR 0 2
63518: PUSH
63519: LD_INT 1
63521: PPUSH
63522: LD_INT 4
63524: PPUSH
63525: CALL_OW 12
63529: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
63530: LD_ADDR_VAR 0 4
63534: PUSH
63535: LD_VAR 0 6
63539: PUSH
63540: LD_INT 1
63542: ARRAY
63543: PPUSH
63544: LD_VAR 0 2
63548: PPUSH
63549: CALL_OW 259
63553: ST_TO_ADDR
// if s1 = 1 then
63554: LD_VAR 0 2
63558: PUSH
63559: LD_INT 1
63561: EQUAL
63562: IFFALSE 63582
// s2 := rand ( 2 , 4 ) else
63564: LD_ADDR_VAR 0 3
63568: PUSH
63569: LD_INT 2
63571: PPUSH
63572: LD_INT 4
63574: PPUSH
63575: CALL_OW 12
63579: ST_TO_ADDR
63580: GO 63590
// s2 := 1 ;
63582: LD_ADDR_VAR 0 3
63586: PUSH
63587: LD_INT 1
63589: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
63590: LD_ADDR_VAR 0 5
63594: PUSH
63595: LD_VAR 0 6
63599: PUSH
63600: LD_INT 1
63602: ARRAY
63603: PPUSH
63604: LD_VAR 0 3
63608: PPUSH
63609: CALL_OW 259
63613: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
63614: LD_VAR 0 6
63618: PUSH
63619: LD_INT 1
63621: ARRAY
63622: PPUSH
63623: LD_VAR 0 2
63627: PPUSH
63628: LD_VAR 0 5
63632: PPUSH
63633: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
63637: LD_VAR 0 6
63641: PUSH
63642: LD_INT 1
63644: ARRAY
63645: PPUSH
63646: LD_VAR 0 3
63650: PPUSH
63651: LD_VAR 0 4
63655: PPUSH
63656: CALL_OW 237
// end ;
63660: PPOPN 6
63662: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
63663: LD_EXP 20
63667: IFFALSE 63675
63669: PUSH
63670: LD_EXP 67
63674: AND
63675: IFFALSE 63754
63677: GO 63679
63679: DISABLE
63680: LD_INT 0
63682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
63683: LD_ADDR_VAR 0 1
63687: PUSH
63688: LD_INT 22
63690: PUSH
63691: LD_OWVAR 2
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 30
63702: PUSH
63703: LD_INT 3
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PPUSH
63714: CALL_OW 69
63718: ST_TO_ADDR
// if not tmp then
63719: LD_VAR 0 1
63723: NOT
63724: IFFALSE 63728
// exit ;
63726: GO 63754
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
63728: LD_VAR 0 1
63732: PUSH
63733: LD_INT 1
63735: PPUSH
63736: LD_VAR 0 1
63740: PPUSH
63741: CALL_OW 12
63745: ARRAY
63746: PPUSH
63747: LD_INT 1
63749: PPUSH
63750: CALL_OW 234
// end ;
63754: PPOPN 1
63756: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
63757: LD_EXP 20
63761: IFFALSE 63769
63763: PUSH
63764: LD_EXP 68
63768: AND
63769: IFFALSE 63881
63771: GO 63773
63773: DISABLE
63774: LD_INT 0
63776: PPUSH
63777: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
63778: LD_ADDR_VAR 0 2
63782: PUSH
63783: LD_INT 22
63785: PUSH
63786: LD_OWVAR 2
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 2
63797: PUSH
63798: LD_INT 30
63800: PUSH
63801: LD_INT 27
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 30
63810: PUSH
63811: LD_INT 26
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 30
63820: PUSH
63821: LD_INT 28
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PPUSH
63838: CALL_OW 69
63842: ST_TO_ADDR
// if not tmp then
63843: LD_VAR 0 2
63847: NOT
63848: IFFALSE 63852
// exit ;
63850: GO 63881
// for i in tmp do
63852: LD_ADDR_VAR 0 1
63856: PUSH
63857: LD_VAR 0 2
63861: PUSH
63862: FOR_IN
63863: IFFALSE 63879
// SetLives ( i , 1 ) ;
63865: LD_VAR 0 1
63869: PPUSH
63870: LD_INT 1
63872: PPUSH
63873: CALL_OW 234
63877: GO 63862
63879: POP
63880: POP
// end ;
63881: PPOPN 2
63883: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
63884: LD_EXP 20
63888: IFFALSE 63896
63890: PUSH
63891: LD_EXP 69
63895: AND
63896: IFFALSE 64183
63898: GO 63900
63900: DISABLE
63901: LD_INT 0
63903: PPUSH
63904: PPUSH
63905: PPUSH
// begin i := rand ( 1 , 7 ) ;
63906: LD_ADDR_VAR 0 1
63910: PUSH
63911: LD_INT 1
63913: PPUSH
63914: LD_INT 7
63916: PPUSH
63917: CALL_OW 12
63921: ST_TO_ADDR
// case i of 1 :
63922: LD_VAR 0 1
63926: PUSH
63927: LD_INT 1
63929: DOUBLE
63930: EQUAL
63931: IFTRUE 63935
63933: GO 63945
63935: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
63936: LD_STRING earthquake(getX(game), 0, 32)
63938: PPUSH
63939: CALL_OW 559
63943: GO 64183
63945: LD_INT 2
63947: DOUBLE
63948: EQUAL
63949: IFTRUE 63953
63951: GO 63967
63953: POP
// begin ToLua ( displayStucuk(); ) ;
63954: LD_STRING displayStucuk();
63956: PPUSH
63957: CALL_OW 559
// ResetFog ;
63961: CALL_OW 335
// end ; 3 :
63965: GO 64183
63967: LD_INT 3
63969: DOUBLE
63970: EQUAL
63971: IFTRUE 63975
63973: GO 64079
63975: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63976: LD_ADDR_VAR 0 2
63980: PUSH
63981: LD_INT 22
63983: PUSH
63984: LD_OWVAR 2
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 25
63995: PUSH
63996: LD_INT 1
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PPUSH
64007: CALL_OW 69
64011: ST_TO_ADDR
// if not tmp then
64012: LD_VAR 0 2
64016: NOT
64017: IFFALSE 64021
// exit ;
64019: GO 64183
// un := tmp [ rand ( 1 , tmp ) ] ;
64021: LD_ADDR_VAR 0 3
64025: PUSH
64026: LD_VAR 0 2
64030: PUSH
64031: LD_INT 1
64033: PPUSH
64034: LD_VAR 0 2
64038: PPUSH
64039: CALL_OW 12
64043: ARRAY
64044: ST_TO_ADDR
// if Crawls ( un ) then
64045: LD_VAR 0 3
64049: PPUSH
64050: CALL_OW 318
64054: IFFALSE 64065
// ComWalk ( un ) ;
64056: LD_VAR 0 3
64060: PPUSH
64061: CALL_OW 138
// SetClass ( un , class_mortar ) ;
64065: LD_VAR 0 3
64069: PPUSH
64070: LD_INT 8
64072: PPUSH
64073: CALL_OW 336
// end ; 4 :
64077: GO 64183
64079: LD_INT 4
64081: DOUBLE
64082: EQUAL
64083: IFTRUE 64087
64085: GO 64161
64087: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
64088: LD_ADDR_VAR 0 2
64092: PUSH
64093: LD_INT 22
64095: PUSH
64096: LD_OWVAR 2
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 30
64107: PUSH
64108: LD_INT 29
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PPUSH
64119: CALL_OW 69
64123: ST_TO_ADDR
// if not tmp then
64124: LD_VAR 0 2
64128: NOT
64129: IFFALSE 64133
// exit ;
64131: GO 64183
// CenterNowOnUnits ( tmp [ 1 ] ) ;
64133: LD_VAR 0 2
64137: PUSH
64138: LD_INT 1
64140: ARRAY
64141: PPUSH
64142: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
64146: LD_VAR 0 2
64150: PUSH
64151: LD_INT 1
64153: ARRAY
64154: PPUSH
64155: CALL_OW 65
// end ; 5 .. 7 :
64159: GO 64183
64161: LD_INT 5
64163: DOUBLE
64164: GREATEREQUAL
64165: IFFALSE 64173
64167: LD_INT 7
64169: DOUBLE
64170: LESSEQUAL
64171: IFTRUE 64175
64173: GO 64182
64175: POP
// StreamSibBomb ; end ;
64176: CALL 60364 0 0
64180: GO 64183
64182: POP
// end ;
64183: PPOPN 3
64185: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
64186: LD_EXP 20
64190: IFFALSE 64198
64192: PUSH
64193: LD_EXP 70
64197: AND
64198: IFFALSE 64354
64200: GO 64202
64202: DISABLE
64203: LD_INT 0
64205: PPUSH
64206: PPUSH
64207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
64208: LD_ADDR_VAR 0 2
64212: PUSH
64213: LD_INT 81
64215: PUSH
64216: LD_OWVAR 2
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 2
64227: PUSH
64228: LD_INT 21
64230: PUSH
64231: LD_INT 1
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 21
64240: PUSH
64241: LD_INT 2
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: LIST
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PPUSH
64257: CALL_OW 69
64261: ST_TO_ADDR
// if not tmp then
64262: LD_VAR 0 2
64266: NOT
64267: IFFALSE 64271
// exit ;
64269: GO 64354
// p := 0 ;
64271: LD_ADDR_VAR 0 3
64275: PUSH
64276: LD_INT 0
64278: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
64279: LD_INT 35
64281: PPUSH
64282: CALL_OW 67
// p := p + 1 ;
64286: LD_ADDR_VAR 0 3
64290: PUSH
64291: LD_VAR 0 3
64295: PUSH
64296: LD_INT 1
64298: PLUS
64299: ST_TO_ADDR
// for i in tmp do
64300: LD_ADDR_VAR 0 1
64304: PUSH
64305: LD_VAR 0 2
64309: PUSH
64310: FOR_IN
64311: IFFALSE 64342
// if GetLives ( i ) < 1000 then
64313: LD_VAR 0 1
64317: PPUSH
64318: CALL_OW 256
64322: PUSH
64323: LD_INT 1000
64325: LESS
64326: IFFALSE 64340
// SetLives ( i , 1000 ) ;
64328: LD_VAR 0 1
64332: PPUSH
64333: LD_INT 1000
64335: PPUSH
64336: CALL_OW 234
64340: GO 64310
64342: POP
64343: POP
// until p > 20 ;
64344: LD_VAR 0 3
64348: PUSH
64349: LD_INT 20
64351: GREATER
64352: IFFALSE 64279
// end ;
64354: PPOPN 3
64356: END
// every 0 0$1 trigger StreamModeActive and sTime do
64357: LD_EXP 20
64361: IFFALSE 64369
64363: PUSH
64364: LD_EXP 71
64368: AND
64369: IFFALSE 64404
64371: GO 64373
64373: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
64374: LD_INT 28
64376: PPUSH
64377: LD_OWVAR 2
64381: PPUSH
64382: LD_INT 2
64384: PPUSH
64385: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
64389: LD_INT 30
64391: PPUSH
64392: LD_OWVAR 2
64396: PPUSH
64397: LD_INT 2
64399: PPUSH
64400: CALL_OW 322
// end ;
64404: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
64405: LD_EXP 20
64409: IFFALSE 64417
64411: PUSH
64412: LD_EXP 72
64416: AND
64417: IFFALSE 64538
64419: GO 64421
64421: DISABLE
64422: LD_INT 0
64424: PPUSH
64425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
64426: LD_ADDR_VAR 0 2
64430: PUSH
64431: LD_INT 22
64433: PUSH
64434: LD_OWVAR 2
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 21
64445: PUSH
64446: LD_INT 1
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 3
64455: PUSH
64456: LD_INT 23
64458: PUSH
64459: LD_INT 0
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: LIST
64474: PPUSH
64475: CALL_OW 69
64479: ST_TO_ADDR
// if not tmp then
64480: LD_VAR 0 2
64484: NOT
64485: IFFALSE 64489
// exit ;
64487: GO 64538
// for i in tmp do
64489: LD_ADDR_VAR 0 1
64493: PUSH
64494: LD_VAR 0 2
64498: PUSH
64499: FOR_IN
64500: IFFALSE 64536
// begin if Crawls ( i ) then
64502: LD_VAR 0 1
64506: PPUSH
64507: CALL_OW 318
64511: IFFALSE 64522
// ComWalk ( i ) ;
64513: LD_VAR 0 1
64517: PPUSH
64518: CALL_OW 138
// SetClass ( i , 2 ) ;
64522: LD_VAR 0 1
64526: PPUSH
64527: LD_INT 2
64529: PPUSH
64530: CALL_OW 336
// end ;
64534: GO 64499
64536: POP
64537: POP
// end ;
64538: PPOPN 2
64540: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
64541: LD_EXP 20
64545: IFFALSE 64553
64547: PUSH
64548: LD_EXP 73
64552: AND
64553: IFFALSE 64843
64555: GO 64557
64557: DISABLE
64558: LD_INT 0
64560: PPUSH
64561: PPUSH
64562: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
64563: LD_OWVAR 2
64567: PPUSH
64568: LD_INT 9
64570: PPUSH
64571: LD_INT 1
64573: PPUSH
64574: LD_INT 1
64576: PPUSH
64577: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
64581: LD_INT 9
64583: PPUSH
64584: LD_OWVAR 2
64588: PPUSH
64589: CALL_OW 343
// uc_side := 9 ;
64593: LD_ADDR_OWVAR 20
64597: PUSH
64598: LD_INT 9
64600: ST_TO_ADDR
// uc_nation := 2 ;
64601: LD_ADDR_OWVAR 21
64605: PUSH
64606: LD_INT 2
64608: ST_TO_ADDR
// hc_name := Dark Warrior ;
64609: LD_ADDR_OWVAR 26
64613: PUSH
64614: LD_STRING Dark Warrior
64616: ST_TO_ADDR
// hc_gallery :=  ;
64617: LD_ADDR_OWVAR 33
64621: PUSH
64622: LD_STRING 
64624: ST_TO_ADDR
// hc_noskilllimit := true ;
64625: LD_ADDR_OWVAR 76
64629: PUSH
64630: LD_INT 1
64632: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
64633: LD_ADDR_OWVAR 31
64637: PUSH
64638: LD_INT 30
64640: PUSH
64641: LD_INT 30
64643: PUSH
64644: LD_INT 30
64646: PUSH
64647: LD_INT 30
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: ST_TO_ADDR
// un := CreateHuman ;
64656: LD_ADDR_VAR 0 3
64660: PUSH
64661: CALL_OW 44
64665: ST_TO_ADDR
// hc_noskilllimit := false ;
64666: LD_ADDR_OWVAR 76
64670: PUSH
64671: LD_INT 0
64673: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
64674: LD_VAR 0 3
64678: PPUSH
64679: LD_INT 1
64681: PPUSH
64682: CALL_OW 51
// ToLua ( playRanger() ) ;
64686: LD_STRING playRanger()
64688: PPUSH
64689: CALL_OW 559
// p := 0 ;
64693: LD_ADDR_VAR 0 2
64697: PUSH
64698: LD_INT 0
64700: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
64701: LD_INT 35
64703: PPUSH
64704: CALL_OW 67
// p := p + 1 ;
64708: LD_ADDR_VAR 0 2
64712: PUSH
64713: LD_VAR 0 2
64717: PUSH
64718: LD_INT 1
64720: PLUS
64721: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
64722: LD_VAR 0 3
64726: PPUSH
64727: CALL_OW 256
64731: PUSH
64732: LD_INT 1000
64734: LESS
64735: IFFALSE 64749
// SetLives ( un , 1000 ) ;
64737: LD_VAR 0 3
64741: PPUSH
64742: LD_INT 1000
64744: PPUSH
64745: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
64749: LD_VAR 0 3
64753: PPUSH
64754: LD_INT 81
64756: PUSH
64757: LD_OWVAR 2
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 91
64768: PUSH
64769: LD_VAR 0 3
64773: PUSH
64774: LD_INT 30
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: LIST
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PPUSH
64786: CALL_OW 69
64790: PPUSH
64791: LD_VAR 0 3
64795: PPUSH
64796: CALL_OW 74
64800: PPUSH
64801: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
64805: LD_VAR 0 2
64809: PUSH
64810: LD_INT 80
64812: GREATER
64813: IFTRUE 64826
64815: PUSH
64816: LD_VAR 0 3
64820: PPUSH
64821: CALL_OW 301
64825: OR
64826: IFFALSE 64701
// if un then
64828: LD_VAR 0 3
64832: IFFALSE 64843
// RemoveUnit ( un ) ;
64834: LD_VAR 0 3
64838: PPUSH
64839: CALL_OW 64
// end ;
64843: PPOPN 3
64845: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
64846: LD_EXP 74
64850: IFFALSE 64966
64852: GO 64854
64854: DISABLE
64855: LD_INT 0
64857: PPUSH
64858: PPUSH
64859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
64860: LD_ADDR_VAR 0 2
64864: PUSH
64865: LD_INT 81
64867: PUSH
64868: LD_OWVAR 2
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 21
64879: PUSH
64880: LD_INT 1
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PPUSH
64891: CALL_OW 69
64895: ST_TO_ADDR
// ToLua ( playComputer() ) ;
64896: LD_STRING playComputer()
64898: PPUSH
64899: CALL_OW 559
// if not tmp then
64903: LD_VAR 0 2
64907: NOT
64908: IFFALSE 64912
// exit ;
64910: GO 64966
// for i in tmp do
64912: LD_ADDR_VAR 0 1
64916: PUSH
64917: LD_VAR 0 2
64921: PUSH
64922: FOR_IN
64923: IFFALSE 64964
// for j := 1 to 4 do
64925: LD_ADDR_VAR 0 3
64929: PUSH
64930: DOUBLE
64931: LD_INT 1
64933: DEC
64934: ST_TO_ADDR
64935: LD_INT 4
64937: PUSH
64938: FOR_TO
64939: IFFALSE 64960
// SetSkill ( i , j , 10 ) ;
64941: LD_VAR 0 1
64945: PPUSH
64946: LD_VAR 0 3
64950: PPUSH
64951: LD_INT 10
64953: PPUSH
64954: CALL_OW 237
64958: GO 64938
64960: POP
64961: POP
64962: GO 64922
64964: POP
64965: POP
// end ;
64966: PPOPN 3
64968: END
// every 0 0$1 trigger s30 do var i , tmp ;
64969: LD_EXP 75
64973: IFFALSE 65042
64975: GO 64977
64977: DISABLE
64978: LD_INT 0
64980: PPUSH
64981: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
64982: LD_ADDR_VAR 0 2
64986: PUSH
64987: LD_INT 22
64989: PUSH
64990: LD_OWVAR 2
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PPUSH
64999: CALL_OW 69
65003: ST_TO_ADDR
// if not tmp then
65004: LD_VAR 0 2
65008: NOT
65009: IFFALSE 65013
// exit ;
65011: GO 65042
// for i in tmp do
65013: LD_ADDR_VAR 0 1
65017: PUSH
65018: LD_VAR 0 2
65022: PUSH
65023: FOR_IN
65024: IFFALSE 65040
// SetLives ( i , 300 ) ;
65026: LD_VAR 0 1
65030: PPUSH
65031: LD_INT 300
65033: PPUSH
65034: CALL_OW 234
65038: GO 65023
65040: POP
65041: POP
// end ;
65042: PPOPN 2
65044: END
// every 0 0$1 trigger s60 do var i , tmp ;
65045: LD_EXP 76
65049: IFFALSE 65118
65051: GO 65053
65053: DISABLE
65054: LD_INT 0
65056: PPUSH
65057: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
65058: LD_ADDR_VAR 0 2
65062: PUSH
65063: LD_INT 22
65065: PUSH
65066: LD_OWVAR 2
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PPUSH
65075: CALL_OW 69
65079: ST_TO_ADDR
// if not tmp then
65080: LD_VAR 0 2
65084: NOT
65085: IFFALSE 65089
// exit ;
65087: GO 65118
// for i in tmp do
65089: LD_ADDR_VAR 0 1
65093: PUSH
65094: LD_VAR 0 2
65098: PUSH
65099: FOR_IN
65100: IFFALSE 65116
// SetLives ( i , 600 ) ;
65102: LD_VAR 0 1
65106: PPUSH
65107: LD_INT 600
65109: PPUSH
65110: CALL_OW 234
65114: GO 65099
65116: POP
65117: POP
// end ;
65118: PPOPN 2
65120: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
65121: LD_INT 0
65123: PPUSH
// case cmd of 301 :
65124: LD_VAR 0 1
65128: PUSH
65129: LD_INT 301
65131: DOUBLE
65132: EQUAL
65133: IFTRUE 65137
65135: GO 65169
65137: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
65138: LD_VAR 0 6
65142: PPUSH
65143: LD_VAR 0 7
65147: PPUSH
65148: LD_VAR 0 8
65152: PPUSH
65153: LD_VAR 0 4
65157: PPUSH
65158: LD_VAR 0 5
65162: PPUSH
65163: CALL 66382 0 5
65167: GO 65290
65169: LD_INT 302
65171: DOUBLE
65172: EQUAL
65173: IFTRUE 65177
65175: GO 65214
65177: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
65178: LD_VAR 0 6
65182: PPUSH
65183: LD_VAR 0 7
65187: PPUSH
65188: LD_VAR 0 8
65192: PPUSH
65193: LD_VAR 0 9
65197: PPUSH
65198: LD_VAR 0 4
65202: PPUSH
65203: LD_VAR 0 5
65207: PPUSH
65208: CALL 66473 0 6
65212: GO 65290
65214: LD_INT 303
65216: DOUBLE
65217: EQUAL
65218: IFTRUE 65222
65220: GO 65259
65222: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
65223: LD_VAR 0 6
65227: PPUSH
65228: LD_VAR 0 7
65232: PPUSH
65233: LD_VAR 0 8
65237: PPUSH
65238: LD_VAR 0 9
65242: PPUSH
65243: LD_VAR 0 4
65247: PPUSH
65248: LD_VAR 0 5
65252: PPUSH
65253: CALL 65295 0 6
65257: GO 65290
65259: LD_INT 304
65261: DOUBLE
65262: EQUAL
65263: IFTRUE 65267
65265: GO 65289
65267: POP
// hHackTeleport ( unit , x , y ) ; end ;
65268: LD_VAR 0 2
65272: PPUSH
65273: LD_VAR 0 4
65277: PPUSH
65278: LD_VAR 0 5
65282: PPUSH
65283: CALL 67066 0 3
65287: GO 65290
65289: POP
// end ;
65290: LD_VAR 0 12
65294: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
65295: LD_INT 0
65297: PPUSH
65298: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
65299: LD_VAR 0 1
65303: PUSH
65304: LD_INT 1
65306: LESS
65307: IFTRUE 65319
65309: PUSH
65310: LD_VAR 0 1
65314: PUSH
65315: LD_INT 3
65317: GREATER
65318: OR
65319: IFTRUE 65337
65321: PUSH
65322: LD_VAR 0 5
65326: PPUSH
65327: LD_VAR 0 6
65331: PPUSH
65332: CALL_OW 428
65336: OR
65337: IFFALSE 65341
// exit ;
65339: GO 66069
// uc_side := your_side ;
65341: LD_ADDR_OWVAR 20
65345: PUSH
65346: LD_OWVAR 2
65350: ST_TO_ADDR
// uc_nation := nation ;
65351: LD_ADDR_OWVAR 21
65355: PUSH
65356: LD_VAR 0 1
65360: ST_TO_ADDR
// bc_level = 1 ;
65361: LD_ADDR_OWVAR 43
65365: PUSH
65366: LD_INT 1
65368: ST_TO_ADDR
// case btype of 1 :
65369: LD_VAR 0 2
65373: PUSH
65374: LD_INT 1
65376: DOUBLE
65377: EQUAL
65378: IFTRUE 65382
65380: GO 65393
65382: POP
// bc_type := b_depot ; 2 :
65383: LD_ADDR_OWVAR 42
65387: PUSH
65388: LD_INT 0
65390: ST_TO_ADDR
65391: GO 66013
65393: LD_INT 2
65395: DOUBLE
65396: EQUAL
65397: IFTRUE 65401
65399: GO 65412
65401: POP
// bc_type := b_warehouse ; 3 :
65402: LD_ADDR_OWVAR 42
65406: PUSH
65407: LD_INT 1
65409: ST_TO_ADDR
65410: GO 66013
65412: LD_INT 3
65414: DOUBLE
65415: EQUAL
65416: IFTRUE 65420
65418: GO 65431
65420: POP
// bc_type := b_lab ; 4 .. 9 :
65421: LD_ADDR_OWVAR 42
65425: PUSH
65426: LD_INT 6
65428: ST_TO_ADDR
65429: GO 66013
65431: LD_INT 4
65433: DOUBLE
65434: GREATEREQUAL
65435: IFFALSE 65443
65437: LD_INT 9
65439: DOUBLE
65440: LESSEQUAL
65441: IFTRUE 65445
65443: GO 65505
65445: POP
// begin bc_type := b_lab_half ;
65446: LD_ADDR_OWVAR 42
65450: PUSH
65451: LD_INT 7
65453: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
65454: LD_ADDR_OWVAR 44
65458: PUSH
65459: LD_INT 10
65461: PUSH
65462: LD_INT 11
65464: PUSH
65465: LD_INT 12
65467: PUSH
65468: LD_INT 15
65470: PUSH
65471: LD_INT 14
65473: PUSH
65474: LD_INT 13
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: LIST
65484: PUSH
65485: LD_VAR 0 2
65489: PUSH
65490: LD_INT 3
65492: MINUS
65493: ARRAY
65494: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
65495: LD_ADDR_OWVAR 45
65499: PUSH
65500: LD_INT 9
65502: ST_TO_ADDR
// end ; 10 .. 13 :
65503: GO 66013
65505: LD_INT 10
65507: DOUBLE
65508: GREATEREQUAL
65509: IFFALSE 65517
65511: LD_INT 13
65513: DOUBLE
65514: LESSEQUAL
65515: IFTRUE 65519
65517: GO 65596
65519: POP
// begin bc_type := b_lab_full ;
65520: LD_ADDR_OWVAR 42
65524: PUSH
65525: LD_INT 8
65527: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
65528: LD_ADDR_OWVAR 44
65532: PUSH
65533: LD_INT 10
65535: PUSH
65536: LD_INT 12
65538: PUSH
65539: LD_INT 14
65541: PUSH
65542: LD_INT 13
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: PUSH
65551: LD_VAR 0 2
65555: PUSH
65556: LD_INT 9
65558: MINUS
65559: ARRAY
65560: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
65561: LD_ADDR_OWVAR 45
65565: PUSH
65566: LD_INT 11
65568: PUSH
65569: LD_INT 15
65571: PUSH
65572: LD_INT 12
65574: PUSH
65575: LD_INT 15
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: PUSH
65584: LD_VAR 0 2
65588: PUSH
65589: LD_INT 9
65591: MINUS
65592: ARRAY
65593: ST_TO_ADDR
// end ; 14 :
65594: GO 66013
65596: LD_INT 14
65598: DOUBLE
65599: EQUAL
65600: IFTRUE 65604
65602: GO 65615
65604: POP
// bc_type := b_workshop ; 15 :
65605: LD_ADDR_OWVAR 42
65609: PUSH
65610: LD_INT 2
65612: ST_TO_ADDR
65613: GO 66013
65615: LD_INT 15
65617: DOUBLE
65618: EQUAL
65619: IFTRUE 65623
65621: GO 65634
65623: POP
// bc_type := b_factory ; 16 :
65624: LD_ADDR_OWVAR 42
65628: PUSH
65629: LD_INT 3
65631: ST_TO_ADDR
65632: GO 66013
65634: LD_INT 16
65636: DOUBLE
65637: EQUAL
65638: IFTRUE 65642
65640: GO 65653
65642: POP
// bc_type := b_ext_gun ; 17 :
65643: LD_ADDR_OWVAR 42
65647: PUSH
65648: LD_INT 17
65650: ST_TO_ADDR
65651: GO 66013
65653: LD_INT 17
65655: DOUBLE
65656: EQUAL
65657: IFTRUE 65661
65659: GO 65689
65661: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
65662: LD_ADDR_OWVAR 42
65666: PUSH
65667: LD_INT 19
65669: PUSH
65670: LD_INT 23
65672: PUSH
65673: LD_INT 19
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: LIST
65680: PUSH
65681: LD_VAR 0 1
65685: ARRAY
65686: ST_TO_ADDR
65687: GO 66013
65689: LD_INT 18
65691: DOUBLE
65692: EQUAL
65693: IFTRUE 65697
65695: GO 65708
65697: POP
// bc_type := b_ext_radar ; 19 :
65698: LD_ADDR_OWVAR 42
65702: PUSH
65703: LD_INT 20
65705: ST_TO_ADDR
65706: GO 66013
65708: LD_INT 19
65710: DOUBLE
65711: EQUAL
65712: IFTRUE 65716
65714: GO 65727
65716: POP
// bc_type := b_ext_radio ; 20 :
65717: LD_ADDR_OWVAR 42
65721: PUSH
65722: LD_INT 22
65724: ST_TO_ADDR
65725: GO 66013
65727: LD_INT 20
65729: DOUBLE
65730: EQUAL
65731: IFTRUE 65735
65733: GO 65746
65735: POP
// bc_type := b_ext_siberium ; 21 :
65736: LD_ADDR_OWVAR 42
65740: PUSH
65741: LD_INT 21
65743: ST_TO_ADDR
65744: GO 66013
65746: LD_INT 21
65748: DOUBLE
65749: EQUAL
65750: IFTRUE 65754
65752: GO 65765
65754: POP
// bc_type := b_ext_computer ; 22 :
65755: LD_ADDR_OWVAR 42
65759: PUSH
65760: LD_INT 24
65762: ST_TO_ADDR
65763: GO 66013
65765: LD_INT 22
65767: DOUBLE
65768: EQUAL
65769: IFTRUE 65773
65771: GO 65784
65773: POP
// bc_type := b_ext_track ; 23 :
65774: LD_ADDR_OWVAR 42
65778: PUSH
65779: LD_INT 16
65781: ST_TO_ADDR
65782: GO 66013
65784: LD_INT 23
65786: DOUBLE
65787: EQUAL
65788: IFTRUE 65792
65790: GO 65803
65792: POP
// bc_type := b_ext_laser ; 24 :
65793: LD_ADDR_OWVAR 42
65797: PUSH
65798: LD_INT 25
65800: ST_TO_ADDR
65801: GO 66013
65803: LD_INT 24
65805: DOUBLE
65806: EQUAL
65807: IFTRUE 65811
65809: GO 65822
65811: POP
// bc_type := b_control_tower ; 25 :
65812: LD_ADDR_OWVAR 42
65816: PUSH
65817: LD_INT 36
65819: ST_TO_ADDR
65820: GO 66013
65822: LD_INT 25
65824: DOUBLE
65825: EQUAL
65826: IFTRUE 65830
65828: GO 65841
65830: POP
// bc_type := b_breastwork ; 26 :
65831: LD_ADDR_OWVAR 42
65835: PUSH
65836: LD_INT 31
65838: ST_TO_ADDR
65839: GO 66013
65841: LD_INT 26
65843: DOUBLE
65844: EQUAL
65845: IFTRUE 65849
65847: GO 65860
65849: POP
// bc_type := b_bunker ; 27 :
65850: LD_ADDR_OWVAR 42
65854: PUSH
65855: LD_INT 32
65857: ST_TO_ADDR
65858: GO 66013
65860: LD_INT 27
65862: DOUBLE
65863: EQUAL
65864: IFTRUE 65868
65866: GO 65879
65868: POP
// bc_type := b_turret ; 28 :
65869: LD_ADDR_OWVAR 42
65873: PUSH
65874: LD_INT 33
65876: ST_TO_ADDR
65877: GO 66013
65879: LD_INT 28
65881: DOUBLE
65882: EQUAL
65883: IFTRUE 65887
65885: GO 65898
65887: POP
// bc_type := b_armoury ; 29 :
65888: LD_ADDR_OWVAR 42
65892: PUSH
65893: LD_INT 4
65895: ST_TO_ADDR
65896: GO 66013
65898: LD_INT 29
65900: DOUBLE
65901: EQUAL
65902: IFTRUE 65906
65904: GO 65917
65906: POP
// bc_type := b_barracks ; 30 :
65907: LD_ADDR_OWVAR 42
65911: PUSH
65912: LD_INT 5
65914: ST_TO_ADDR
65915: GO 66013
65917: LD_INT 30
65919: DOUBLE
65920: EQUAL
65921: IFTRUE 65925
65923: GO 65936
65925: POP
// bc_type := b_solar_power ; 31 :
65926: LD_ADDR_OWVAR 42
65930: PUSH
65931: LD_INT 27
65933: ST_TO_ADDR
65934: GO 66013
65936: LD_INT 31
65938: DOUBLE
65939: EQUAL
65940: IFTRUE 65944
65942: GO 65955
65944: POP
// bc_type := b_oil_power ; 32 :
65945: LD_ADDR_OWVAR 42
65949: PUSH
65950: LD_INT 26
65952: ST_TO_ADDR
65953: GO 66013
65955: LD_INT 32
65957: DOUBLE
65958: EQUAL
65959: IFTRUE 65963
65961: GO 65974
65963: POP
// bc_type := b_siberite_power ; 33 :
65964: LD_ADDR_OWVAR 42
65968: PUSH
65969: LD_INT 28
65971: ST_TO_ADDR
65972: GO 66013
65974: LD_INT 33
65976: DOUBLE
65977: EQUAL
65978: IFTRUE 65982
65980: GO 65993
65982: POP
// bc_type := b_oil_mine ; 34 :
65983: LD_ADDR_OWVAR 42
65987: PUSH
65988: LD_INT 29
65990: ST_TO_ADDR
65991: GO 66013
65993: LD_INT 34
65995: DOUBLE
65996: EQUAL
65997: IFTRUE 66001
65999: GO 66012
66001: POP
// bc_type := b_siberite_mine ; end ;
66002: LD_ADDR_OWVAR 42
66006: PUSH
66007: LD_INT 30
66009: ST_TO_ADDR
66010: GO 66013
66012: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
66013: LD_ADDR_VAR 0 8
66017: PUSH
66018: LD_VAR 0 5
66022: PPUSH
66023: LD_VAR 0 6
66027: PPUSH
66028: LD_VAR 0 3
66032: PPUSH
66033: CALL_OW 47
66037: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
66038: LD_OWVAR 42
66042: PUSH
66043: LD_INT 32
66045: PUSH
66046: LD_INT 33
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: IN
66053: IFFALSE 66069
// PlaceWeaponTurret ( b , weapon ) ;
66055: LD_VAR 0 8
66059: PPUSH
66060: LD_VAR 0 4
66064: PPUSH
66065: CALL_OW 431
// end ;
66069: LD_VAR 0 7
66073: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
66074: LD_INT 0
66076: PPUSH
66077: PPUSH
66078: PPUSH
66079: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66080: LD_ADDR_VAR 0 4
66084: PUSH
66085: LD_INT 22
66087: PUSH
66088: LD_OWVAR 2
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 2
66099: PUSH
66100: LD_INT 30
66102: PUSH
66103: LD_INT 0
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: PUSH
66110: LD_INT 30
66112: PUSH
66113: LD_INT 1
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: LIST
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PPUSH
66129: CALL_OW 69
66133: ST_TO_ADDR
// if not tmp then
66134: LD_VAR 0 4
66138: NOT
66139: IFFALSE 66143
// exit ;
66141: GO 66202
// for i in tmp do
66143: LD_ADDR_VAR 0 2
66147: PUSH
66148: LD_VAR 0 4
66152: PUSH
66153: FOR_IN
66154: IFFALSE 66200
// for j = 1 to 3 do
66156: LD_ADDR_VAR 0 3
66160: PUSH
66161: DOUBLE
66162: LD_INT 1
66164: DEC
66165: ST_TO_ADDR
66166: LD_INT 3
66168: PUSH
66169: FOR_TO
66170: IFFALSE 66196
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
66172: LD_VAR 0 2
66176: PPUSH
66177: CALL_OW 274
66181: PPUSH
66182: LD_VAR 0 3
66186: PPUSH
66187: LD_INT 99999
66189: PPUSH
66190: CALL_OW 277
66194: GO 66169
66196: POP
66197: POP
66198: GO 66153
66200: POP
66201: POP
// end ;
66202: LD_VAR 0 1
66206: RET
// export function hHackSetLevel10 ; var i , j ; begin
66207: LD_INT 0
66209: PPUSH
66210: PPUSH
66211: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
66212: LD_ADDR_VAR 0 2
66216: PUSH
66217: LD_INT 21
66219: PUSH
66220: LD_INT 1
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PPUSH
66227: CALL_OW 69
66231: PUSH
66232: FOR_IN
66233: IFFALSE 66285
// if IsSelected ( i ) then
66235: LD_VAR 0 2
66239: PPUSH
66240: CALL_OW 306
66244: IFFALSE 66283
// begin for j := 1 to 4 do
66246: LD_ADDR_VAR 0 3
66250: PUSH
66251: DOUBLE
66252: LD_INT 1
66254: DEC
66255: ST_TO_ADDR
66256: LD_INT 4
66258: PUSH
66259: FOR_TO
66260: IFFALSE 66281
// SetSkill ( i , j , 10 ) ;
66262: LD_VAR 0 2
66266: PPUSH
66267: LD_VAR 0 3
66271: PPUSH
66272: LD_INT 10
66274: PPUSH
66275: CALL_OW 237
66279: GO 66259
66281: POP
66282: POP
// end ;
66283: GO 66232
66285: POP
66286: POP
// end ;
66287: LD_VAR 0 1
66291: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
66292: LD_INT 0
66294: PPUSH
66295: PPUSH
66296: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
66297: LD_ADDR_VAR 0 2
66301: PUSH
66302: LD_INT 22
66304: PUSH
66305: LD_OWVAR 2
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 21
66316: PUSH
66317: LD_INT 1
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PPUSH
66328: CALL_OW 69
66332: PUSH
66333: FOR_IN
66334: IFFALSE 66375
// begin for j := 1 to 4 do
66336: LD_ADDR_VAR 0 3
66340: PUSH
66341: DOUBLE
66342: LD_INT 1
66344: DEC
66345: ST_TO_ADDR
66346: LD_INT 4
66348: PUSH
66349: FOR_TO
66350: IFFALSE 66371
// SetSkill ( i , j , 10 ) ;
66352: LD_VAR 0 2
66356: PPUSH
66357: LD_VAR 0 3
66361: PPUSH
66362: LD_INT 10
66364: PPUSH
66365: CALL_OW 237
66369: GO 66349
66371: POP
66372: POP
// end ;
66373: GO 66333
66375: POP
66376: POP
// end ;
66377: LD_VAR 0 1
66381: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
66382: LD_INT 0
66384: PPUSH
// uc_side := your_side ;
66385: LD_ADDR_OWVAR 20
66389: PUSH
66390: LD_OWVAR 2
66394: ST_TO_ADDR
// uc_nation := nation ;
66395: LD_ADDR_OWVAR 21
66399: PUSH
66400: LD_VAR 0 1
66404: ST_TO_ADDR
// InitHc ;
66405: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
66409: LD_INT 0
66411: PPUSH
66412: LD_VAR 0 2
66416: PPUSH
66417: LD_VAR 0 3
66421: PPUSH
66422: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
66426: LD_VAR 0 4
66430: PPUSH
66431: LD_VAR 0 5
66435: PPUSH
66436: CALL_OW 428
66440: PUSH
66441: LD_INT 0
66443: EQUAL
66444: IFFALSE 66468
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
66446: CALL_OW 44
66450: PPUSH
66451: LD_VAR 0 4
66455: PPUSH
66456: LD_VAR 0 5
66460: PPUSH
66461: LD_INT 1
66463: PPUSH
66464: CALL_OW 48
// end ;
66468: LD_VAR 0 6
66472: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
66473: LD_INT 0
66475: PPUSH
66476: PPUSH
// uc_side := your_side ;
66477: LD_ADDR_OWVAR 20
66481: PUSH
66482: LD_OWVAR 2
66486: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
66487: LD_VAR 0 1
66491: PUSH
66492: LD_INT 1
66494: PUSH
66495: LD_INT 2
66497: PUSH
66498: LD_INT 3
66500: PUSH
66501: LD_INT 4
66503: PUSH
66504: LD_INT 5
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: IN
66514: IFFALSE 66526
// uc_nation := nation_american else
66516: LD_ADDR_OWVAR 21
66520: PUSH
66521: LD_INT 1
66523: ST_TO_ADDR
66524: GO 66569
// if chassis in [ 11 , 12 , 13 , 14 ] then
66526: LD_VAR 0 1
66530: PUSH
66531: LD_INT 11
66533: PUSH
66534: LD_INT 12
66536: PUSH
66537: LD_INT 13
66539: PUSH
66540: LD_INT 14
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: IN
66549: IFFALSE 66561
// uc_nation := nation_arabian else
66551: LD_ADDR_OWVAR 21
66555: PUSH
66556: LD_INT 2
66558: ST_TO_ADDR
66559: GO 66569
// uc_nation := nation_russian ;
66561: LD_ADDR_OWVAR 21
66565: PUSH
66566: LD_INT 3
66568: ST_TO_ADDR
// vc_chassis := chassis ;
66569: LD_ADDR_OWVAR 37
66573: PUSH
66574: LD_VAR 0 1
66578: ST_TO_ADDR
// vc_engine := engine ;
66579: LD_ADDR_OWVAR 39
66583: PUSH
66584: LD_VAR 0 2
66588: ST_TO_ADDR
// vc_control := control ;
66589: LD_ADDR_OWVAR 38
66593: PUSH
66594: LD_VAR 0 3
66598: ST_TO_ADDR
// vc_weapon := weapon ;
66599: LD_ADDR_OWVAR 40
66603: PUSH
66604: LD_VAR 0 4
66608: ST_TO_ADDR
// un := CreateVehicle ;
66609: LD_ADDR_VAR 0 8
66613: PUSH
66614: CALL_OW 45
66618: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
66619: LD_VAR 0 8
66623: PPUSH
66624: LD_INT 0
66626: PPUSH
66627: LD_INT 5
66629: PPUSH
66630: CALL_OW 12
66634: PPUSH
66635: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
66639: LD_VAR 0 8
66643: PPUSH
66644: LD_VAR 0 5
66648: PPUSH
66649: LD_VAR 0 6
66653: PPUSH
66654: LD_INT 1
66656: PPUSH
66657: CALL_OW 48
// end ;
66661: LD_VAR 0 7
66665: RET
// export hInvincible ; every 1 do
66666: GO 66668
66668: DISABLE
// hInvincible := [ ] ;
66669: LD_ADDR_EXP 77
66673: PUSH
66674: EMPTY
66675: ST_TO_ADDR
66676: END
// every 10 do var i ;
66677: GO 66679
66679: DISABLE
66680: LD_INT 0
66682: PPUSH
// begin enable ;
66683: ENABLE
// if not hInvincible then
66684: LD_EXP 77
66688: NOT
66689: IFFALSE 66693
// exit ;
66691: GO 66737
// for i in hInvincible do
66693: LD_ADDR_VAR 0 1
66697: PUSH
66698: LD_EXP 77
66702: PUSH
66703: FOR_IN
66704: IFFALSE 66735
// if GetLives ( i ) < 1000 then
66706: LD_VAR 0 1
66710: PPUSH
66711: CALL_OW 256
66715: PUSH
66716: LD_INT 1000
66718: LESS
66719: IFFALSE 66733
// SetLives ( i , 1000 ) ;
66721: LD_VAR 0 1
66725: PPUSH
66726: LD_INT 1000
66728: PPUSH
66729: CALL_OW 234
66733: GO 66703
66735: POP
66736: POP
// end ;
66737: PPOPN 1
66739: END
// export function hHackInvincible ; var i ; begin
66740: LD_INT 0
66742: PPUSH
66743: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
66744: LD_ADDR_VAR 0 2
66748: PUSH
66749: LD_INT 2
66751: PUSH
66752: LD_INT 21
66754: PUSH
66755: LD_INT 1
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 21
66764: PUSH
66765: LD_INT 2
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: LIST
66776: PPUSH
66777: CALL_OW 69
66781: PUSH
66782: FOR_IN
66783: IFFALSE 66844
// if IsSelected ( i ) then
66785: LD_VAR 0 2
66789: PPUSH
66790: CALL_OW 306
66794: IFFALSE 66842
// begin if i in hInvincible then
66796: LD_VAR 0 2
66800: PUSH
66801: LD_EXP 77
66805: IN
66806: IFFALSE 66826
// hInvincible := hInvincible diff i else
66808: LD_ADDR_EXP 77
66812: PUSH
66813: LD_EXP 77
66817: PUSH
66818: LD_VAR 0 2
66822: DIFF
66823: ST_TO_ADDR
66824: GO 66842
// hInvincible := hInvincible union i ;
66826: LD_ADDR_EXP 77
66830: PUSH
66831: LD_EXP 77
66835: PUSH
66836: LD_VAR 0 2
66840: UNION
66841: ST_TO_ADDR
// end ;
66842: GO 66782
66844: POP
66845: POP
// end ;
66846: LD_VAR 0 1
66850: RET
// export function hHackInvisible ; var i , j ; begin
66851: LD_INT 0
66853: PPUSH
66854: PPUSH
66855: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
66856: LD_ADDR_VAR 0 2
66860: PUSH
66861: LD_INT 21
66863: PUSH
66864: LD_INT 1
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PPUSH
66871: CALL_OW 69
66875: PUSH
66876: FOR_IN
66877: IFFALSE 66901
// if IsSelected ( i ) then
66879: LD_VAR 0 2
66883: PPUSH
66884: CALL_OW 306
66888: IFFALSE 66899
// ComForceInvisible ( i ) ;
66890: LD_VAR 0 2
66894: PPUSH
66895: CALL_OW 496
66899: GO 66876
66901: POP
66902: POP
// end ;
66903: LD_VAR 0 1
66907: RET
// export function hHackChangeYourSide ; begin
66908: LD_INT 0
66910: PPUSH
// if your_side = 8 then
66911: LD_OWVAR 2
66915: PUSH
66916: LD_INT 8
66918: EQUAL
66919: IFFALSE 66931
// your_side := 0 else
66921: LD_ADDR_OWVAR 2
66925: PUSH
66926: LD_INT 0
66928: ST_TO_ADDR
66929: GO 66945
// your_side := your_side + 1 ;
66931: LD_ADDR_OWVAR 2
66935: PUSH
66936: LD_OWVAR 2
66940: PUSH
66941: LD_INT 1
66943: PLUS
66944: ST_TO_ADDR
// end ;
66945: LD_VAR 0 1
66949: RET
// export function hHackChangeUnitSide ; var i , j ; begin
66950: LD_INT 0
66952: PPUSH
66953: PPUSH
66954: PPUSH
// for i in all_units do
66955: LD_ADDR_VAR 0 2
66959: PUSH
66960: LD_OWVAR 3
66964: PUSH
66965: FOR_IN
66966: IFFALSE 67044
// if IsSelected ( i ) then
66968: LD_VAR 0 2
66972: PPUSH
66973: CALL_OW 306
66977: IFFALSE 67042
// begin j := GetSide ( i ) ;
66979: LD_ADDR_VAR 0 3
66983: PUSH
66984: LD_VAR 0 2
66988: PPUSH
66989: CALL_OW 255
66993: ST_TO_ADDR
// if j = 8 then
66994: LD_VAR 0 3
66998: PUSH
66999: LD_INT 8
67001: EQUAL
67002: IFFALSE 67014
// j := 0 else
67004: LD_ADDR_VAR 0 3
67008: PUSH
67009: LD_INT 0
67011: ST_TO_ADDR
67012: GO 67028
// j := j + 1 ;
67014: LD_ADDR_VAR 0 3
67018: PUSH
67019: LD_VAR 0 3
67023: PUSH
67024: LD_INT 1
67026: PLUS
67027: ST_TO_ADDR
// SetSide ( i , j ) ;
67028: LD_VAR 0 2
67032: PPUSH
67033: LD_VAR 0 3
67037: PPUSH
67038: CALL_OW 235
// end ;
67042: GO 66965
67044: POP
67045: POP
// end ;
67046: LD_VAR 0 1
67050: RET
// export function hHackFog ; begin
67051: LD_INT 0
67053: PPUSH
// FogOff ( true ) ;
67054: LD_INT 1
67056: PPUSH
67057: CALL_OW 344
// end ;
67061: LD_VAR 0 1
67065: RET
// export function hHackTeleport ( unit , x , y ) ; begin
67066: LD_INT 0
67068: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
67069: LD_VAR 0 1
67073: PPUSH
67074: LD_VAR 0 2
67078: PPUSH
67079: LD_VAR 0 3
67083: PPUSH
67084: LD_INT 1
67086: PPUSH
67087: LD_INT 1
67089: PPUSH
67090: CALL_OW 483
// CenterOnXY ( x , y ) ;
67094: LD_VAR 0 2
67098: PPUSH
67099: LD_VAR 0 3
67103: PPUSH
67104: CALL_OW 84
// end ;
67108: LD_VAR 0 4
67112: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
67113: LD_INT 0
67115: PPUSH
67116: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
67117: LD_VAR 0 1
67121: NOT
67122: IFTRUE 67141
67124: PUSH
67125: LD_VAR 0 2
67129: PPUSH
67130: LD_VAR 0 3
67134: PPUSH
67135: CALL_OW 488
67139: NOT
67140: OR
67141: IFTRUE 67176
67143: PUSH
67144: LD_VAR 0 1
67148: PPUSH
67149: CALL_OW 266
67153: PUSH
67154: LD_INT 3
67156: NONEQUAL
67157: IFFALSE 67175
67159: PUSH
67160: LD_VAR 0 1
67164: PPUSH
67165: CALL_OW 247
67169: PUSH
67170: LD_INT 1
67172: EQUAL
67173: NOT
67174: AND
67175: OR
67176: IFFALSE 67180
// exit ;
67178: GO 67462
// if GetType ( factory ) = unit_human then
67180: LD_VAR 0 1
67184: PPUSH
67185: CALL_OW 247
67189: PUSH
67190: LD_INT 1
67192: EQUAL
67193: IFFALSE 67210
// factory := IsInUnit ( factory ) ;
67195: LD_ADDR_VAR 0 1
67199: PUSH
67200: LD_VAR 0 1
67204: PPUSH
67205: CALL_OW 310
67209: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
67210: LD_VAR 0 1
67214: PPUSH
67215: CALL_OW 266
67219: PUSH
67220: LD_INT 3
67222: NONEQUAL
67223: IFFALSE 67227
// exit ;
67225: GO 67462
// for i := 1 to Count ( factoryWaypoints ) do
67227: LD_ADDR_VAR 0 5
67231: PUSH
67232: DOUBLE
67233: LD_INT 1
67235: DEC
67236: ST_TO_ADDR
67237: LD_EXP 78
67241: PPUSH
67242: CALL 5000 0 1
67246: PUSH
67247: FOR_TO
67248: IFFALSE 67410
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
67250: LD_VAR 0 2
67254: PPUSH
67255: LD_VAR 0 3
67259: PPUSH
67260: CALL_OW 428
67264: PUSH
67265: LD_EXP 78
67269: PUSH
67270: LD_VAR 0 5
67274: ARRAY
67275: PUSH
67276: LD_INT 2
67278: ARRAY
67279: EQUAL
67280: IFFALSE 67312
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
67282: LD_ADDR_EXP 78
67286: PUSH
67287: LD_EXP 78
67291: PPUSH
67292: LD_VAR 0 5
67296: PPUSH
67297: CALL_OW 3
67301: ST_TO_ADDR
// UpdateFactoryWaypoints ;
67302: CALL 67467 0 0
// exit ;
67306: POP
67307: POP
67308: GO 67462
// end else
67310: GO 67408
// if factory = factoryWaypoints [ i ] [ 2 ] then
67312: LD_VAR 0 1
67316: PUSH
67317: LD_EXP 78
67321: PUSH
67322: LD_VAR 0 5
67326: ARRAY
67327: PUSH
67328: LD_INT 2
67330: ARRAY
67331: EQUAL
67332: IFFALSE 67408
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
67334: LD_ADDR_EXP 78
67338: PUSH
67339: LD_EXP 78
67343: PPUSH
67344: LD_VAR 0 5
67348: PPUSH
67349: CALL_OW 3
67353: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
67354: LD_ADDR_EXP 78
67358: PUSH
67359: LD_EXP 78
67363: PPUSH
67364: LD_VAR 0 1
67368: PPUSH
67369: CALL_OW 255
67373: PUSH
67374: LD_VAR 0 1
67378: PUSH
67379: LD_VAR 0 2
67383: PUSH
67384: LD_VAR 0 3
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: PPUSH
67395: CALL 40932 0 2
67399: ST_TO_ADDR
// UpdateFactoryWaypoints ;
67400: CALL 67467 0 0
// exit ;
67404: POP
67405: POP
67406: GO 67462
// end ; end ;
67408: GO 67247
67410: POP
67411: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
67412: LD_ADDR_EXP 78
67416: PUSH
67417: LD_EXP 78
67421: PPUSH
67422: LD_VAR 0 1
67426: PPUSH
67427: CALL_OW 255
67431: PUSH
67432: LD_VAR 0 1
67436: PUSH
67437: LD_VAR 0 2
67441: PUSH
67442: LD_VAR 0 3
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: PPUSH
67453: CALL 40932 0 2
67457: ST_TO_ADDR
// UpdateFactoryWaypoints ;
67458: CALL 67467 0 0
// end ;
67462: LD_VAR 0 4
67466: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
67467: LD_INT 0
67469: PPUSH
67470: PPUSH
67471: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
67472: LD_STRING resetFactoryWaypoint();
67474: PPUSH
67475: CALL_OW 559
// if factoryWaypoints then
67479: LD_EXP 78
67483: IFFALSE 67604
// begin list := factoryWaypoints ;
67485: LD_ADDR_VAR 0 3
67489: PUSH
67490: LD_EXP 78
67494: ST_TO_ADDR
// for i := 1 to list do
67495: LD_ADDR_VAR 0 2
67499: PUSH
67500: DOUBLE
67501: LD_INT 1
67503: DEC
67504: ST_TO_ADDR
67505: LD_VAR 0 3
67509: PUSH
67510: FOR_TO
67511: IFFALSE 67602
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
67513: LD_STRING setFactoryWaypointXY(
67515: PUSH
67516: LD_VAR 0 3
67520: PUSH
67521: LD_VAR 0 2
67525: ARRAY
67526: PUSH
67527: LD_INT 1
67529: ARRAY
67530: STR
67531: PUSH
67532: LD_STRING ,
67534: STR
67535: PUSH
67536: LD_VAR 0 3
67540: PUSH
67541: LD_VAR 0 2
67545: ARRAY
67546: PUSH
67547: LD_INT 2
67549: ARRAY
67550: STR
67551: PUSH
67552: LD_STRING ,
67554: STR
67555: PUSH
67556: LD_VAR 0 3
67560: PUSH
67561: LD_VAR 0 2
67565: ARRAY
67566: PUSH
67567: LD_INT 3
67569: ARRAY
67570: STR
67571: PUSH
67572: LD_STRING ,
67574: STR
67575: PUSH
67576: LD_VAR 0 3
67580: PUSH
67581: LD_VAR 0 2
67585: ARRAY
67586: PUSH
67587: LD_INT 4
67589: ARRAY
67590: STR
67591: PUSH
67592: LD_STRING )
67594: STR
67595: PPUSH
67596: CALL_OW 559
67600: GO 67510
67602: POP
67603: POP
// end ; end ;
67604: LD_VAR 0 1
67608: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
67609: LD_INT 0
67611: PPUSH
// if HexInfo ( x , y ) = warehouse then
67612: LD_VAR 0 2
67616: PPUSH
67617: LD_VAR 0 3
67621: PPUSH
67622: CALL_OW 428
67626: PUSH
67627: LD_VAR 0 1
67631: EQUAL
67632: IFFALSE 67659
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
67634: LD_ADDR_EXP 80
67638: PUSH
67639: LD_EXP 80
67643: PPUSH
67644: LD_VAR 0 1
67648: PPUSH
67649: LD_INT 0
67651: PPUSH
67652: CALL_OW 1
67656: ST_TO_ADDR
67657: GO 67710
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
67659: LD_ADDR_EXP 80
67663: PUSH
67664: LD_EXP 80
67668: PPUSH
67669: LD_VAR 0 1
67673: PPUSH
67674: LD_VAR 0 1
67678: PPUSH
67679: CALL_OW 255
67683: PUSH
67684: LD_VAR 0 1
67688: PUSH
67689: LD_VAR 0 2
67693: PUSH
67694: LD_VAR 0 3
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: PPUSH
67705: CALL_OW 1
67709: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
67710: CALL 67719 0 0
// end ;
67714: LD_VAR 0 4
67718: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
67719: LD_INT 0
67721: PPUSH
67722: PPUSH
67723: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
67724: LD_STRING resetWarehouseGatheringPoints();
67726: PPUSH
67727: CALL_OW 559
// if warehouseGatheringPoints then
67731: LD_EXP 80
67735: IFFALSE 67861
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
67737: LD_ADDR_VAR 0 3
67741: PUSH
67742: LD_EXP 80
67746: PPUSH
67747: CALL 44866 0 1
67751: ST_TO_ADDR
// for i := 1 to list do
67752: LD_ADDR_VAR 0 2
67756: PUSH
67757: DOUBLE
67758: LD_INT 1
67760: DEC
67761: ST_TO_ADDR
67762: LD_VAR 0 3
67766: PUSH
67767: FOR_TO
67768: IFFALSE 67859
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
67770: LD_STRING setWarehouseGatheringPointXY(
67772: PUSH
67773: LD_VAR 0 3
67777: PUSH
67778: LD_VAR 0 2
67782: ARRAY
67783: PUSH
67784: LD_INT 1
67786: ARRAY
67787: STR
67788: PUSH
67789: LD_STRING ,
67791: STR
67792: PUSH
67793: LD_VAR 0 3
67797: PUSH
67798: LD_VAR 0 2
67802: ARRAY
67803: PUSH
67804: LD_INT 2
67806: ARRAY
67807: STR
67808: PUSH
67809: LD_STRING ,
67811: STR
67812: PUSH
67813: LD_VAR 0 3
67817: PUSH
67818: LD_VAR 0 2
67822: ARRAY
67823: PUSH
67824: LD_INT 3
67826: ARRAY
67827: STR
67828: PUSH
67829: LD_STRING ,
67831: STR
67832: PUSH
67833: LD_VAR 0 3
67837: PUSH
67838: LD_VAR 0 2
67842: ARRAY
67843: PUSH
67844: LD_INT 4
67846: ARRAY
67847: STR
67848: PUSH
67849: LD_STRING )
67851: STR
67852: PPUSH
67853: CALL_OW 559
67857: GO 67767
67859: POP
67860: POP
// end ; end ;
67861: LD_VAR 0 1
67865: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
67866: LD_EXP 80
67870: IFFALSE 68565
67872: GO 67874
67874: DISABLE
67875: LD_INT 0
67877: PPUSH
67878: PPUSH
67879: PPUSH
67880: PPUSH
67881: PPUSH
67882: PPUSH
67883: PPUSH
67884: PPUSH
67885: PPUSH
// begin enable ;
67886: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
67887: LD_ADDR_VAR 0 3
67891: PUSH
67892: LD_EXP 80
67896: PPUSH
67897: CALL 44866 0 1
67901: ST_TO_ADDR
// if not list then
67902: LD_VAR 0 3
67906: NOT
67907: IFFALSE 67911
// exit ;
67909: GO 68565
// for i := 1 to list do
67911: LD_ADDR_VAR 0 1
67915: PUSH
67916: DOUBLE
67917: LD_INT 1
67919: DEC
67920: ST_TO_ADDR
67921: LD_VAR 0 3
67925: PUSH
67926: FOR_TO
67927: IFFALSE 68563
// begin depot := list [ i ] [ 2 ] ;
67929: LD_ADDR_VAR 0 8
67933: PUSH
67934: LD_VAR 0 3
67938: PUSH
67939: LD_VAR 0 1
67943: ARRAY
67944: PUSH
67945: LD_INT 2
67947: ARRAY
67948: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
67949: LD_ADDR_VAR 0 5
67953: PUSH
67954: LD_VAR 0 3
67958: PUSH
67959: LD_VAR 0 1
67963: ARRAY
67964: PUSH
67965: LD_INT 1
67967: ARRAY
67968: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
67969: LD_VAR 0 8
67973: PPUSH
67974: CALL_OW 301
67978: IFTRUE 67997
67980: PUSH
67981: LD_VAR 0 5
67985: PUSH
67986: LD_VAR 0 8
67990: PPUSH
67991: CALL_OW 255
67995: NONEQUAL
67996: OR
67997: IFFALSE 68026
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
67999: LD_ADDR_EXP 80
68003: PUSH
68004: LD_EXP 80
68008: PPUSH
68009: LD_VAR 0 8
68013: PPUSH
68014: LD_INT 0
68016: PPUSH
68017: CALL_OW 1
68021: ST_TO_ADDR
// exit ;
68022: POP
68023: POP
68024: GO 68565
// end ; x := list [ i ] [ 3 ] ;
68026: LD_ADDR_VAR 0 6
68030: PUSH
68031: LD_VAR 0 3
68035: PUSH
68036: LD_VAR 0 1
68040: ARRAY
68041: PUSH
68042: LD_INT 3
68044: ARRAY
68045: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
68046: LD_ADDR_VAR 0 7
68050: PUSH
68051: LD_VAR 0 3
68055: PUSH
68056: LD_VAR 0 1
68060: ARRAY
68061: PUSH
68062: LD_INT 4
68064: ARRAY
68065: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
68066: LD_ADDR_VAR 0 9
68070: PUSH
68071: LD_VAR 0 6
68075: PPUSH
68076: LD_VAR 0 7
68080: PPUSH
68081: LD_INT 16
68083: PPUSH
68084: CALL 43440 0 3
68088: ST_TO_ADDR
// if not cratesNearbyPoint then
68089: LD_VAR 0 9
68093: NOT
68094: IFFALSE 68100
// exit ;
68096: POP
68097: POP
68098: GO 68565
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
68100: LD_ADDR_VAR 0 4
68104: PUSH
68105: LD_INT 22
68107: PUSH
68108: LD_VAR 0 5
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PUSH
68117: LD_INT 3
68119: PUSH
68120: LD_INT 60
68122: PUSH
68123: EMPTY
68124: LIST
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 91
68132: PUSH
68133: LD_VAR 0 8
68137: PUSH
68138: LD_INT 6
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: LIST
68145: PUSH
68146: LD_INT 2
68148: PUSH
68149: LD_INT 25
68151: PUSH
68152: LD_INT 2
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: LD_INT 25
68161: PUSH
68162: LD_INT 16
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: LIST
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: PPUSH
68180: CALL_OW 69
68184: PUSH
68185: LD_VAR 0 8
68189: PPUSH
68190: CALL_OW 313
68194: PPUSH
68195: LD_INT 3
68197: PUSH
68198: LD_INT 60
68200: PUSH
68201: EMPTY
68202: LIST
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 2
68210: PUSH
68211: LD_INT 25
68213: PUSH
68214: LD_INT 2
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 25
68223: PUSH
68224: LD_INT 16
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: LIST
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PPUSH
68240: CALL_OW 72
68244: UNION
68245: ST_TO_ADDR
// if tmp then
68246: LD_VAR 0 4
68250: IFFALSE 68330
// begin tmp := ShrinkArray ( tmp , 3 ) ;
68252: LD_ADDR_VAR 0 4
68256: PUSH
68257: LD_VAR 0 4
68261: PPUSH
68262: LD_INT 3
68264: PPUSH
68265: CALL 41247 0 2
68269: ST_TO_ADDR
// for j in tmp do
68270: LD_ADDR_VAR 0 2
68274: PUSH
68275: LD_VAR 0 4
68279: PUSH
68280: FOR_IN
68281: IFFALSE 68324
// begin if IsInUnit ( j ) then
68283: LD_VAR 0 2
68287: PPUSH
68288: CALL_OW 310
68292: IFFALSE 68303
// ComExit ( j ) ;
68294: LD_VAR 0 2
68298: PPUSH
68299: CALL 41330 0 1
// AddComCollect ( j , x , y ) ;
68303: LD_VAR 0 2
68307: PPUSH
68308: LD_VAR 0 6
68312: PPUSH
68313: LD_VAR 0 7
68317: PPUSH
68318: CALL_OW 177
// end ;
68322: GO 68280
68324: POP
68325: POP
// exit ;
68326: POP
68327: POP
68328: GO 68565
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
68330: LD_ADDR_VAR 0 4
68334: PUSH
68335: LD_INT 22
68337: PUSH
68338: LD_VAR 0 5
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_INT 91
68349: PUSH
68350: LD_VAR 0 8
68354: PUSH
68355: LD_INT 8
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: LIST
68362: PUSH
68363: LD_INT 2
68365: PUSH
68366: LD_INT 34
68368: PUSH
68369: LD_INT 12
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 34
68378: PUSH
68379: LD_INT 51
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: LD_INT 34
68388: PUSH
68389: LD_INT 32
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PUSH
68396: LD_INT 34
68398: PUSH
68399: LD_INT 89
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: LIST
68417: PPUSH
68418: CALL_OW 69
68422: ST_TO_ADDR
// if tmp then
68423: LD_VAR 0 4
68427: IFFALSE 68561
// begin for j in tmp do
68429: LD_ADDR_VAR 0 2
68433: PUSH
68434: LD_VAR 0 4
68438: PUSH
68439: FOR_IN
68440: IFFALSE 68559
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
68442: LD_VAR 0 2
68446: PPUSH
68447: CALL_OW 262
68451: PUSH
68452: LD_INT 3
68454: EQUAL
68455: IFTRUE 68472
68457: PUSH
68458: LD_VAR 0 2
68462: PPUSH
68463: CALL_OW 261
68467: PUSH
68468: LD_INT 20
68470: GREATER
68471: OR
68472: IFFALSE 68486
68474: PUSH
68475: LD_VAR 0 2
68479: PPUSH
68480: CALL_OW 314
68484: NOT
68485: AND
68486: IFFALSE 68516
68488: PUSH
68489: LD_VAR 0 2
68493: PPUSH
68494: CALL_OW 263
68498: PUSH
68499: LD_INT 1
68501: NONEQUAL
68502: IFTRUE 68515
68504: PUSH
68505: LD_VAR 0 2
68509: PPUSH
68510: CALL_OW 311
68514: OR
68515: AND
68516: IFFALSE 68557
// begin ComCollect ( j , x , y ) ;
68518: LD_VAR 0 2
68522: PPUSH
68523: LD_VAR 0 6
68527: PPUSH
68528: LD_VAR 0 7
68532: PPUSH
68533: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
68537: LD_VAR 0 2
68541: PPUSH
68542: LD_VAR 0 8
68546: PPUSH
68547: CALL_OW 172
// exit ;
68551: POP
68552: POP
68553: POP
68554: POP
68555: GO 68565
// end ;
68557: GO 68439
68559: POP
68560: POP
// end ; end ;
68561: GO 67926
68563: POP
68564: POP
// end ; end_of_file end_of_file
68565: PPOPN 9
68567: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68568: LD_VAR 0 1
68572: PUSH
68573: LD_INT 200
68575: DOUBLE
68576: GREATEREQUAL
68577: IFFALSE 68585
68579: LD_INT 299
68581: DOUBLE
68582: LESSEQUAL
68583: IFTRUE 68587
68585: GO 68619
68587: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68588: LD_VAR 0 1
68592: PPUSH
68593: LD_VAR 0 2
68597: PPUSH
68598: LD_VAR 0 3
68602: PPUSH
68603: LD_VAR 0 4
68607: PPUSH
68608: LD_VAR 0 5
68612: PPUSH
68613: CALL 46955 0 5
68617: GO 68696
68619: LD_INT 300
68621: DOUBLE
68622: GREATEREQUAL
68623: IFFALSE 68631
68625: LD_INT 399
68627: DOUBLE
68628: LESSEQUAL
68629: IFTRUE 68633
68631: GO 68695
68633: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68634: LD_VAR 0 1
68638: PPUSH
68639: LD_VAR 0 2
68643: PPUSH
68644: LD_VAR 0 3
68648: PPUSH
68649: LD_VAR 0 4
68653: PPUSH
68654: LD_VAR 0 5
68658: PPUSH
68659: LD_VAR 0 6
68663: PPUSH
68664: LD_VAR 0 7
68668: PPUSH
68669: LD_VAR 0 8
68673: PPUSH
68674: LD_VAR 0 9
68678: PPUSH
68679: LD_VAR 0 10
68683: PPUSH
68684: LD_VAR 0 11
68688: PPUSH
68689: CALL 65121 0 11
68693: GO 68696
68695: POP
// end ;
68696: PPOPN 11
68698: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68699: LD_VAR 0 1
68703: PPUSH
68704: LD_VAR 0 2
68708: PPUSH
68709: LD_VAR 0 3
68713: PPUSH
68714: LD_VAR 0 4
68718: PPUSH
68719: LD_VAR 0 5
68723: PPUSH
68724: CALL 46336 0 5
// end ; end_of_file
68728: PPOPN 5
68730: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68731: LD_VAR 0 1
68735: PPUSH
68736: LD_VAR 0 2
68740: PPUSH
68741: LD_VAR 0 3
68745: PPUSH
68746: LD_VAR 0 4
68750: PPUSH
68751: LD_VAR 0 5
68755: PPUSH
68756: LD_VAR 0 6
68760: PPUSH
68761: CALL 52661 0 6
// end ;
68765: PPOPN 6
68767: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68768: LD_INT 0
68770: PPUSH
// begin if not units then
68771: LD_VAR 0 1
68775: NOT
68776: IFFALSE 68780
// exit ;
68778: GO 68814
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
68780: LD_VAR 0 1
68784: PPUSH
68785: LD_VAR 0 2
68789: PPUSH
68790: LD_VAR 0 3
68794: PPUSH
68795: LD_VAR 0 4
68799: PPUSH
68800: LD_VAR 0 5
68804: PPUSH
68805: LD_VAR 0 6
68809: PPUSH
68810: CALL 52462 0 6
// end ;
68814: PPOPN 7
68816: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68817: CALL 52548 0 0
// end ;
68821: PPOPN 1
68823: END
