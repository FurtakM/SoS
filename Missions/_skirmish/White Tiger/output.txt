// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 2550 0 0
// Init ;
   8: CALL 54 0 0
// if debug then
  12: LD_EXP 1
  16: IFFALSE 28
// Difficulty := 2 else
  18: LD_ADDR_OWVAR 67
  22: PUSH
  23: LD_INT 2
  25: ST_TO_ADDR
  26: GO 41
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  28: LD_ADDR_OWVAR 67
  32: PUSH
  33: LD_INT 0
  35: PPUSH
  36: CALL_OW 426
  40: ST_TO_ADDR
// PrepareAlliance ;
  41: CALL 70 0 0
// PrepareRussian ;
  45: CALL 251 0 0
// Action ;
  49: CALL 2115 0 0
// end ;
  53: END
// export debug ; export function Init ; begin
  54: LD_INT 0
  56: PPUSH
// debug := false ;
  57: LD_ADDR_EXP 1
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// end ; end_of_file
  65: LD_VAR 0 1
  69: RET
// export allianceHack , allianceMechanic ; export function PrepareAlliance ; var i , tmp ; begin
  70: LD_INT 0
  72: PPUSH
  73: PPUSH
  74: PPUSH
// tmp := [ ] ;
  75: LD_ADDR_VAR 0 3
  79: PUSH
  80: EMPTY
  81: ST_TO_ADDR
// uc_side := 7 ;
  82: LD_ADDR_OWVAR 20
  86: PUSH
  87: LD_INT 7
  89: ST_TO_ADDR
// uc_nation := 1 ;
  90: LD_ADDR_OWVAR 21
  94: PUSH
  95: LD_INT 1
  97: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_hack , 100 ) ;
  98: LD_INT 5
 100: PPUSH
 101: LD_INT 3
 103: PPUSH
 104: LD_INT 3
 106: PPUSH
 107: LD_EXP 11
 111: PPUSH
 112: LD_INT 100
 114: PPUSH
 115: CALL 7502 0 5
// allianceHack := CreateVehicle ;
 119: LD_ADDR_EXP 2
 123: PUSH
 124: CALL_OW 45
 128: ST_TO_ADDR
// PlaceUnitArea ( allianceHack , startSpawnArea , false ) ;
 129: LD_EXP 2
 133: PPUSH
 134: LD_INT 7
 136: PPUSH
 137: LD_INT 0
 139: PPUSH
 140: CALL_OW 49
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_double_laser , 100 ) ;
 144: LD_INT 5
 146: PPUSH
 147: LD_INT 3
 149: PPUSH
 150: LD_INT 3
 152: PPUSH
 153: LD_INT 10
 155: PPUSH
 156: LD_INT 100
 158: PPUSH
 159: CALL 7502 0 5
// for i := 1 to 2 do
 163: LD_ADDR_VAR 0 2
 167: PUSH
 168: DOUBLE
 169: LD_INT 1
 171: DEC
 172: ST_TO_ADDR
 173: LD_INT 2
 175: PUSH
 176: FOR_TO
 177: IFFALSE 196
// PlaceUnitArea ( CreateVehicle , startSpawnArea , false ) ;
 179: CALL_OW 45
 183: PPUSH
 184: LD_INT 7
 186: PPUSH
 187: LD_INT 0
 189: PPUSH
 190: CALL_OW 49
 194: GO 176
 196: POP
 197: POP
// uc_side := 4 ;
 198: LD_ADDR_OWVAR 20
 202: PUSH
 203: LD_INT 4
 205: ST_TO_ADDR
// uc_nation := 1 ;
 206: LD_ADDR_OWVAR 21
 210: PUSH
 211: LD_INT 1
 213: ST_TO_ADDR
// PrepareMechanic ( sex_male , 9 ) ;
 214: LD_INT 1
 216: PPUSH
 217: LD_INT 9
 219: PPUSH
 220: CALL_OW 383
// allianceMechanic := CreateHuman ;
 224: LD_ADDR_EXP 3
 228: PUSH
 229: CALL_OW 44
 233: ST_TO_ADDR
// PlaceHumanInUnit ( allianceMechanic , ruDep2 ) ;
 234: LD_EXP 3
 238: PPUSH
 239: LD_INT 96
 241: PPUSH
 242: CALL_OW 52
// end ; end_of_file
 246: LD_VAR 0 1
 250: RET
// export ruGuard1 , ruGuard2 , ruGuard3 , ruForces , ruEng ; export function PrepareRussian ; var i , un ; begin
 251: LD_INT 0
 253: PPUSH
 254: PPUSH
 255: PPUSH
// uc_side := 3 ;
 256: LD_ADDR_OWVAR 20
 260: PUSH
 261: LD_INT 3
 263: ST_TO_ADDR
// uc_nation := 3 ;
 264: LD_ADDR_OWVAR 21
 268: PUSH
 269: LD_INT 3
 271: ST_TO_ADDR
// SetResourceType ( GetBase ( ruDep ) , mat_cans , 5000 ) ;
 272: LD_INT 14
 274: PPUSH
 275: CALL_OW 274
 279: PPUSH
 280: LD_INT 1
 282: PPUSH
 283: LD_INT 5000
 285: PPUSH
 286: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , mat_siberit , 500 ) ;
 290: LD_INT 14
 292: PPUSH
 293: CALL_OW 274
 297: PPUSH
 298: LD_INT 3
 300: PPUSH
 301: LD_INT 500
 303: PPUSH
 304: CALL_OW 277
// TeleportExit ( ruTeleport , 132 , 89 ) ;
 308: LD_INT 45
 310: PPUSH
 311: LD_INT 132
 313: PPUSH
 314: LD_INT 89
 316: PPUSH
 317: CALL_OW 243
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
 321: LD_ADDR_VAR 0 2
 325: PUSH
 326: LD_INT 21
 328: PUSH
 329: LD_INT 3
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 375
// SetBLevel ( i , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
 344: LD_VAR 0 2
 348: PPUSH
 349: LD_INT 6
 351: PUSH
 352: LD_INT 8
 354: PUSH
 355: LD_INT 10
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: PUSH
 363: LD_OWVAR 67
 367: ARRAY
 368: PPUSH
 369: CALL_OW 241
 373: GO 341
 375: POP
 376: POP
// for i := 1 to 4 do
 377: LD_ADDR_VAR 0 2
 381: PUSH
 382: DOUBLE
 383: LD_INT 1
 385: DEC
 386: ST_TO_ADDR
 387: LD_INT 4
 389: PUSH
 390: FOR_TO
 391: IFFALSE 417
// begin PrepareMechanic ( false , 9 ) ;
 393: LD_INT 0
 395: PPUSH
 396: LD_INT 9
 398: PPUSH
 399: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFac ) ;
 403: CALL_OW 44
 407: PPUSH
 408: LD_INT 50
 410: PPUSH
 411: CALL_OW 52
// end ;
 415: GO 390
 417: POP
 418: POP
// ruGuard1 := [ ] ;
 419: LD_ADDR_EXP 4
 423: PUSH
 424: EMPTY
 425: ST_TO_ADDR
// ruGuard2 := [ ] ;
 426: LD_ADDR_EXP 5
 430: PUSH
 431: EMPTY
 432: ST_TO_ADDR
// ruGuard3 := [ ] ;
 433: LD_ADDR_EXP 6
 437: PUSH
 438: EMPTY
 439: ST_TO_ADDR
// ruForces := [ ] ;
 440: LD_ADDR_EXP 7
 444: PUSH
 445: EMPTY
 446: ST_TO_ADDR
// ruEng := [ ] ;
 447: LD_ADDR_EXP 8
 451: PUSH
 452: EMPTY
 453: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
 454: LD_ADDR_VAR 0 2
 458: PUSH
 459: DOUBLE
 460: LD_INT 1
 462: DEC
 463: ST_TO_ADDR
 464: LD_INT 4
 466: PUSH
 467: LD_INT 5
 469: PUSH
 470: LD_INT 6
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: LIST
 477: PUSH
 478: LD_OWVAR 67
 482: ARRAY
 483: PUSH
 484: FOR_TO
 485: IFFALSE 541
// begin PrepareEngineer ( false , 8 ) ;
 487: LD_INT 0
 489: PPUSH
 490: LD_INT 8
 492: PPUSH
 493: CALL_OW 382
// un := CreateHuman ;
 497: LD_ADDR_VAR 0 3
 501: PUSH
 502: CALL_OW 44
 506: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruDep ) ;
 507: LD_VAR 0 3
 511: PPUSH
 512: LD_INT 14
 514: PPUSH
 515: CALL_OW 52
// ruEng := Join ( ruEng , un ) ;
 519: LD_ADDR_EXP 8
 523: PUSH
 524: LD_EXP 8
 528: PPUSH
 529: LD_VAR 0 3
 533: PPUSH
 534: CALL 38548 0 2
 538: ST_TO_ADDR
// end ;
 539: GO 484
 541: POP
 542: POP
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
 543: LD_ADDR_VAR 0 2
 547: PUSH
 548: DOUBLE
 549: LD_INT 1
 551: DEC
 552: ST_TO_ADDR
 553: LD_INT 5
 555: PUSH
 556: LD_INT 6
 558: PUSH
 559: LD_INT 7
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: LIST
 566: PUSH
 567: LD_OWVAR 67
 571: ARRAY
 572: PUSH
 573: FOR_TO
 574: IFFALSE 684
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 576: LD_INT 24
 578: PPUSH
 579: LD_INT 3
 581: PPUSH
 582: LD_INT 3
 584: PPUSH
 585: LD_INT 46
 587: PUSH
 588: LD_INT 45
 590: PUSH
 591: EMPTY
 592: LIST
 593: LIST
 594: PUSH
 595: LD_VAR 0 2
 599: PUSH
 600: LD_INT 2
 602: MOD
 603: PUSH
 604: LD_INT 1
 606: PLUS
 607: ARRAY
 608: PPUSH
 609: LD_INT 100
 611: PPUSH
 612: CALL 7502 0 5
// un := CreateVehicle ;
 616: LD_ADDR_VAR 0 3
 620: PUSH
 621: CALL_OW 45
 625: ST_TO_ADDR
// SetDir ( un , 3 ) ;
 626: LD_VAR 0 3
 630: PPUSH
 631: LD_INT 3
 633: PPUSH
 634: CALL_OW 233
// PlaceUnitArea ( un , riverGuard1 , false ) ;
 638: LD_VAR 0 3
 642: PPUSH
 643: LD_INT 4
 645: PPUSH
 646: LD_INT 0
 648: PPUSH
 649: CALL_OW 49
// ruGuard1 := Replace ( ruGuard1 , ruGuard1 + 1 , un ) ;
 653: LD_ADDR_EXP 4
 657: PUSH
 658: LD_EXP 4
 662: PPUSH
 663: LD_EXP 4
 667: PUSH
 668: LD_INT 1
 670: PLUS
 671: PPUSH
 672: LD_VAR 0 3
 676: PPUSH
 677: CALL_OW 1
 681: ST_TO_ADDR
// end ;
 682: GO 573
 684: POP
 685: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
 686: LD_ADDR_VAR 0 2
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 4
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 5
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: LIST
 709: PUSH
 710: LD_OWVAR 67
 714: ARRAY
 715: PUSH
 716: FOR_TO
 717: IFFALSE 827
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 719: LD_INT 24
 721: PPUSH
 722: LD_INT 3
 724: PPUSH
 725: LD_INT 3
 727: PPUSH
 728: LD_INT 46
 730: PUSH
 731: LD_INT 45
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: PUSH
 738: LD_VAR 0 2
 742: PUSH
 743: LD_INT 2
 745: MOD
 746: PUSH
 747: LD_INT 1
 749: PLUS
 750: ARRAY
 751: PPUSH
 752: LD_INT 100
 754: PPUSH
 755: CALL 7502 0 5
// un := CreateVehicle ;
 759: LD_ADDR_VAR 0 3
 763: PUSH
 764: CALL_OW 45
 768: ST_TO_ADDR
// SetDir ( un , 4 ) ;
 769: LD_VAR 0 3
 773: PPUSH
 774: LD_INT 4
 776: PPUSH
 777: CALL_OW 233
// PlaceUnitArea ( un , riverGuard2 , false ) ;
 781: LD_VAR 0 3
 785: PPUSH
 786: LD_INT 5
 788: PPUSH
 789: LD_INT 0
 791: PPUSH
 792: CALL_OW 49
// ruGuard2 := Replace ( ruGuard2 , ruGuard2 + 1 , un ) ;
 796: LD_ADDR_EXP 5
 800: PUSH
 801: LD_EXP 5
 805: PPUSH
 806: LD_EXP 5
 810: PUSH
 811: LD_INT 1
 813: PLUS
 814: PPUSH
 815: LD_VAR 0 3
 819: PPUSH
 820: CALL_OW 1
 824: ST_TO_ADDR
// end ;
 825: GO 716
 827: POP
 828: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
 829: LD_ADDR_VAR 0 2
 833: PUSH
 834: DOUBLE
 835: LD_INT 1
 837: DEC
 838: ST_TO_ADDR
 839: LD_INT 4
 841: PUSH
 842: LD_INT 4
 844: PUSH
 845: LD_INT 5
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: LIST
 852: PUSH
 853: LD_OWVAR 67
 857: ARRAY
 858: PUSH
 859: FOR_TO
 860: IFFALSE 970
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 862: LD_INT 24
 864: PPUSH
 865: LD_INT 3
 867: PPUSH
 868: LD_INT 3
 870: PPUSH
 871: LD_INT 46
 873: PUSH
 874: LD_INT 45
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PUSH
 881: LD_VAR 0 2
 885: PUSH
 886: LD_INT 2
 888: MOD
 889: PUSH
 890: LD_INT 1
 892: PLUS
 893: ARRAY
 894: PPUSH
 895: LD_INT 100
 897: PPUSH
 898: CALL 7502 0 5
// un := CreateVehicle ;
 902: LD_ADDR_VAR 0 3
 906: PUSH
 907: CALL_OW 45
 911: ST_TO_ADDR
// SetDir ( un , 1 ) ;
 912: LD_VAR 0 3
 916: PPUSH
 917: LD_INT 1
 919: PPUSH
 920: CALL_OW 233
// PlaceUnitArea ( un , riverGuard3 , false ) ;
 924: LD_VAR 0 3
 928: PPUSH
 929: LD_INT 6
 931: PPUSH
 932: LD_INT 0
 934: PPUSH
 935: CALL_OW 49
// ruGuard3 := Replace ( ruGuard3 , ruGuard3 + 1 , un ) ;
 939: LD_ADDR_EXP 6
 943: PUSH
 944: LD_EXP 6
 948: PPUSH
 949: LD_EXP 6
 953: PUSH
 954: LD_INT 1
 956: PLUS
 957: PPUSH
 958: LD_VAR 0 3
 962: PPUSH
 963: CALL_OW 1
 967: ST_TO_ADDR
// end ;
 968: GO 859
 970: POP
 971: POP
// for i := 1 to 2 do
 972: LD_ADDR_VAR 0 2
 976: PUSH
 977: DOUBLE
 978: LD_INT 1
 980: DEC
 981: ST_TO_ADDR
 982: LD_INT 2
 984: PUSH
 985: FOR_TO
 986: IFFALSE 1034
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
 988: LD_INT 22
 990: PPUSH
 991: LD_INT 3
 993: PPUSH
 994: LD_INT 3
 996: PPUSH
 997: LD_INT 52
 999: PPUSH
1000: LD_INT 100
1002: PPUSH
1003: CALL 7502 0 5
// un := CreateVehicle ;
1007: LD_ADDR_VAR 0 3
1011: PUSH
1012: CALL_OW 45
1016: ST_TO_ADDR
// PlaceUnitArea ( un , ruCraneArea , false ) ;
1017: LD_VAR 0 3
1021: PPUSH
1022: LD_INT 9
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL_OW 49
// end ;
1032: GO 985
1034: POP
1035: POP
// for i := 1 to 3 do
1036: LD_ADDR_VAR 0 2
1040: PUSH
1041: DOUBLE
1042: LD_INT 1
1044: DEC
1045: ST_TO_ADDR
1046: LD_INT 3
1048: PUSH
1049: FOR_TO
1050: IFFALSE 1087
// begin PrepareHuman ( false , class_bazooker , 8 ) ;
1052: LD_INT 0
1054: PPUSH
1055: LD_INT 9
1057: PPUSH
1058: LD_INT 8
1060: PPUSH
1061: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 91 , 83 ) ) ;
1065: CALL_OW 44
1069: PPUSH
1070: LD_INT 91
1072: PPUSH
1073: LD_INT 83
1075: PPUSH
1076: CALL_OW 428
1080: PPUSH
1081: CALL_OW 52
// end ;
1085: GO 1049
1087: POP
1088: POP
// end ;
1089: LD_VAR 0 1
1093: RET
// every 0 0$1 trigger ruEng do var i , tmp ;
1094: LD_EXP 8
1098: IFFALSE 1288
1100: GO 1102
1102: DISABLE
1103: LD_INT 0
1105: PPUSH
1106: PPUSH
// begin enable ;
1107: ENABLE
// tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_ok ] ] ] ) ;
1108: LD_ADDR_VAR 0 2
1112: PUSH
1113: LD_INT 10
1115: PPUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 3
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 3
1128: PUSH
1129: LD_INT 50
1131: PUSH
1132: EMPTY
1133: LIST
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: PPUSH
1143: CALL_OW 70
1147: ST_TO_ADDR
// if not tmp and UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) then
1148: LD_VAR 0 2
1152: NOT
1153: PUSH
1154: LD_EXP 8
1158: PPUSH
1159: LD_INT 3
1161: PUSH
1162: LD_INT 54
1164: PUSH
1165: EMPTY
1166: LIST
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: PPUSH
1172: CALL_OW 72
1176: AND
1177: IFFALSE 1209
// ComEnterUnit ( UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) , ruDep ) ;
1179: LD_EXP 8
1183: PPUSH
1184: LD_INT 3
1186: PUSH
1187: LD_INT 54
1189: PUSH
1190: EMPTY
1191: LIST
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: PPUSH
1197: CALL_OW 72
1201: PPUSH
1202: LD_INT 14
1204: PPUSH
1205: CALL_OW 120
// if tmp then
1209: LD_VAR 0 2
1213: IFFALSE 1288
// begin for i in tmp do
1215: LD_ADDR_VAR 0 1
1219: PUSH
1220: LD_VAR 0 2
1224: PUSH
1225: FOR_IN
1226: IFFALSE 1286
// if IsInUnit ( i ) then
1228: LD_VAR 0 1
1232: PPUSH
1233: CALL_OW 310
1237: IFFALSE 1250
// ComExitBuilding ( i ) else
1239: LD_VAR 0 1
1243: PPUSH
1244: CALL_OW 122
1248: GO 1284
// ComRepairBuilding ( i , SortByDistanceUnit ( i , tmp , true , true ) [ 1 ] ) ;
1250: LD_VAR 0 1
1254: PPUSH
1255: LD_VAR 0 1
1259: PPUSH
1260: LD_VAR 0 2
1264: PPUSH
1265: LD_INT 1
1267: PPUSH
1268: LD_INT 1
1270: PPUSH
1271: CALL 8059 0 4
1275: PUSH
1276: LD_INT 1
1278: ARRAY
1279: PPUSH
1280: CALL_OW 130
1284: GO 1225
1286: POP
1287: POP
// end ; end ;
1288: PPOPN 2
1290: END
// every 3 3$00 trigger not ruForces do var i , tmp ;
1291: LD_EXP 7
1295: NOT
1296: IFFALSE 1362
1298: GO 1300
1300: DISABLE
1301: LD_INT 0
1303: PPUSH
1304: PPUSH
// begin enable ;
1305: ENABLE
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
1306: LD_ADDR_VAR 0 1
1310: PUSH
1311: DOUBLE
1312: LD_INT 1
1314: DEC
1315: ST_TO_ADDR
1316: LD_INT 4
1318: PUSH
1319: LD_INT 5
1321: PUSH
1322: LD_INT 6
1324: PUSH
1325: EMPTY
1326: LIST
1327: LIST
1328: LIST
1329: PUSH
1330: LD_OWVAR 67
1334: ARRAY
1335: PUSH
1336: FOR_TO
1337: IFFALSE 1360
// AddComConstruct ( ruFac , ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ) ;
1339: LD_INT 50
1341: PPUSH
1342: LD_INT 24
1344: PPUSH
1345: LD_INT 3
1347: PPUSH
1348: LD_INT 3
1350: PPUSH
1351: LD_INT 46
1353: PPUSH
1354: CALL_OW 185
1358: GO 1336
1360: POP
1361: POP
// end ;
1362: PPOPN 2
1364: END
// every 0 0$30 trigger ruForces do var i , tmp ;
1365: LD_EXP 7
1369: IFFALSE 1491
1371: GO 1373
1373: DISABLE
1374: LD_INT 0
1376: PPUSH
1377: PPUSH
// begin enable ;
1378: ENABLE
// tmp := ruForces ;
1379: LD_ADDR_VAR 0 2
1383: PUSH
1384: LD_EXP 7
1388: ST_TO_ADDR
// ruForces := [ ] ;
1389: LD_ADDR_EXP 7
1393: PUSH
1394: EMPTY
1395: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1396: LD_INT 35
1398: PPUSH
1399: CALL_OW 67
// for i in tmp do
1403: LD_ADDR_VAR 0 1
1407: PUSH
1408: LD_VAR 0 2
1412: PUSH
1413: FOR_IN
1414: IFFALSE 1482
// if not IsOk ( i ) then
1416: LD_VAR 0 1
1420: PPUSH
1421: CALL_OW 302
1425: NOT
1426: IFFALSE 1446
// tmp := tmp diff i else
1428: LD_ADDR_VAR 0 2
1432: PUSH
1433: LD_VAR 0 2
1437: PUSH
1438: LD_VAR 0 1
1442: DIFF
1443: ST_TO_ADDR
1444: GO 1480
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
1446: LD_VAR 0 1
1450: PPUSH
1451: LD_INT 81
1453: PUSH
1454: LD_INT 3
1456: PUSH
1457: EMPTY
1458: LIST
1459: LIST
1460: PPUSH
1461: CALL_OW 69
1465: PPUSH
1466: LD_VAR 0 1
1470: PPUSH
1471: CALL_OW 74
1475: PPUSH
1476: CALL_OW 115
1480: GO 1413
1482: POP
1483: POP
// until not tmp ;
1484: LD_VAR 0 2
1488: NOT
1489: IFFALSE 1396
// end ;
1491: PPOPN 2
1493: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 62 , 83 , 8 ] ] ) do
1494: LD_INT 22
1496: PUSH
1497: LD_INT 7
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PUSH
1504: LD_INT 92
1506: PUSH
1507: LD_INT 62
1509: PUSH
1510: LD_INT 83
1512: PUSH
1513: LD_INT 8
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: LIST
1520: LIST
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PPUSH
1526: CALL_OW 69
1530: IFFALSE 1550
1532: GO 1534
1534: DISABLE
// ComAgressiveMove ( ruGuard1 , 69 , 100 ) ;
1535: LD_EXP 4
1539: PPUSH
1540: LD_INT 69
1542: PPUSH
1543: LD_INT 100
1545: PPUSH
1546: CALL_OW 114
1550: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 85 , 89 , 8 ] ] ) do
1551: LD_INT 22
1553: PUSH
1554: LD_INT 7
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 92
1563: PUSH
1564: LD_INT 85
1566: PUSH
1567: LD_INT 89
1569: PUSH
1570: LD_INT 8
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PPUSH
1583: CALL_OW 69
1587: IFFALSE 1607
1589: GO 1591
1591: DISABLE
// ComAgressiveMove ( ruGuard2 , 72 , 88 ) ;
1592: LD_EXP 5
1596: PPUSH
1597: LD_INT 72
1599: PPUSH
1600: LD_INT 88
1602: PPUSH
1603: CALL_OW 114
1607: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 89 , 13 , 8 ] ] ) do
1608: LD_INT 22
1610: PUSH
1611: LD_INT 7
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: PUSH
1618: LD_INT 92
1620: PUSH
1621: LD_INT 89
1623: PUSH
1624: LD_INT 13
1626: PUSH
1627: LD_INT 8
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: PPUSH
1640: CALL_OW 69
1644: IFFALSE 1664
1646: GO 1648
1648: DISABLE
// ComAgressiveMove ( ruGuard3 , 107 , 26 ) ; end_of_file
1649: LD_EXP 6
1653: PPUSH
1654: LD_INT 107
1656: PPUSH
1657: LD_INT 26
1659: PPUSH
1660: CALL_OW 114
1664: END
// every 5 5$00 do var i , un , tmp ;
1665: GO 1667
1667: DISABLE
1668: LD_INT 0
1670: PPUSH
1671: PPUSH
1672: PPUSH
// begin enable ;
1673: ENABLE
// tmp := [ ] ;
1674: LD_ADDR_VAR 0 3
1678: PUSH
1679: EMPTY
1680: ST_TO_ADDR
// uc_side := 1 ;
1681: LD_ADDR_OWVAR 20
1685: PUSH
1686: LD_INT 1
1688: ST_TO_ADDR
// uc_nation := 1 ;
1689: LD_ADDR_OWVAR 21
1693: PUSH
1694: LD_INT 1
1696: ST_TO_ADDR
// for i := 1 to 8 do
1697: LD_ADDR_VAR 0 1
1701: PUSH
1702: DOUBLE
1703: LD_INT 1
1705: DEC
1706: ST_TO_ADDR
1707: LD_INT 8
1709: PUSH
1710: FOR_TO
1711: IFFALSE 1838
// begin PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_laser , us_rocket_launcher ] [ i mod 3 + 1 ] , 100 ) ;
1713: LD_INT 5
1715: PPUSH
1716: LD_INT 3
1718: PPUSH
1719: LD_INT 3
1721: PPUSH
1722: LD_INT 6
1724: PUSH
1725: LD_INT 9
1727: PUSH
1728: LD_INT 7
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: LIST
1735: PUSH
1736: LD_VAR 0 1
1740: PUSH
1741: LD_INT 3
1743: MOD
1744: PUSH
1745: LD_INT 1
1747: PLUS
1748: ARRAY
1749: PPUSH
1750: LD_INT 100
1752: PPUSH
1753: CALL 7502 0 5
// un := CreateVehicle ;
1757: LD_ADDR_VAR 0 2
1761: PUSH
1762: CALL_OW 45
1766: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
1767: LD_ADDR_VAR 0 3
1771: PUSH
1772: LD_VAR 0 3
1776: PPUSH
1777: LD_VAR 0 2
1781: PPUSH
1782: CALL 38548 0 2
1786: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1787: LD_VAR 0 2
1791: PPUSH
1792: LD_INT 1
1794: PPUSH
1795: CALL_OW 233
// PlaceUnitArea ( un , americanSpawnArea , false ) ;
1799: LD_VAR 0 2
1803: PPUSH
1804: LD_INT 11
1806: PPUSH
1807: LD_INT 0
1809: PPUSH
1810: CALL_OW 49
// ComMoveXY ( un , 16 , 13 ) ;
1814: LD_VAR 0 2
1818: PPUSH
1819: LD_INT 16
1821: PPUSH
1822: LD_INT 13
1824: PPUSH
1825: CALL_OW 111
// wait ( 0 0$1 ) ;
1829: LD_INT 35
1831: PPUSH
1832: CALL_OW 67
// end ;
1836: GO 1710
1838: POP
1839: POP
// repeat wait ( 0 0$1 ) ;
1840: LD_INT 35
1842: PPUSH
1843: CALL_OW 67
// for i in tmp do
1847: LD_ADDR_VAR 0 1
1851: PUSH
1852: LD_VAR 0 3
1856: PUSH
1857: FOR_IN
1858: IFFALSE 1926
// if not IsOk ( i ) then
1860: LD_VAR 0 1
1864: PPUSH
1865: CALL_OW 302
1869: NOT
1870: IFFALSE 1890
// tmp := tmp diff i else
1872: LD_ADDR_VAR 0 3
1876: PUSH
1877: LD_VAR 0 3
1881: PUSH
1882: LD_VAR 0 1
1886: DIFF
1887: ST_TO_ADDR
1888: GO 1924
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
1890: LD_VAR 0 1
1894: PPUSH
1895: LD_INT 81
1897: PUSH
1898: LD_INT 1
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: PPUSH
1905: CALL_OW 69
1909: PPUSH
1910: LD_VAR 0 1
1914: PPUSH
1915: CALL_OW 74
1919: PPUSH
1920: CALL_OW 115
1924: GO 1857
1926: POP
1927: POP
// until not tmp ;
1928: LD_VAR 0 3
1932: NOT
1933: IFFALSE 1840
// end ;
1935: PPOPN 3
1937: END
// every 7 7$00 trigger not HexInfo ( 149 , 106 ) do var un ;
1938: LD_INT 149
1940: PPUSH
1941: LD_INT 106
1943: PPUSH
1944: CALL_OW 428
1948: NOT
1949: IFFALSE 2112
1951: GO 1953
1953: DISABLE
1954: LD_INT 0
1956: PPUSH
// begin enable ;
1957: ENABLE
// uc_side := 1 ;
1958: LD_ADDR_OWVAR 20
1962: PUSH
1963: LD_INT 1
1965: ST_TO_ADDR
// uc_nation := 1 ;
1966: LD_ADDR_OWVAR 21
1970: PUSH
1971: LD_INT 1
1973: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
1974: LD_INT 5
1976: PPUSH
1977: LD_INT 3
1979: PPUSH
1980: LD_INT 3
1982: PPUSH
1983: LD_INT 12
1985: PPUSH
1986: LD_INT 100
1988: PPUSH
1989: CALL 7502 0 5
// un := CreateVehicle ;
1993: LD_ADDR_VAR 0 1
1997: PUSH
1998: CALL_OW 45
2002: ST_TO_ADDR
// PlaceUnitXY ( un , 149 , 106 , false ) ;
2003: LD_VAR 0 1
2007: PPUSH
2008: LD_INT 149
2010: PPUSH
2011: LD_INT 106
2013: PPUSH
2014: LD_INT 0
2016: PPUSH
2017: CALL_OW 48
// SetCargo ( un , mat_siberit , 100 ) ;
2021: LD_VAR 0 1
2025: PPUSH
2026: LD_INT 3
2028: PPUSH
2029: LD_INT 100
2031: PPUSH
2032: CALL_OW 290
// ComMoveXY ( un , 105 , 2 ) ;
2036: LD_VAR 0 1
2040: PPUSH
2041: LD_INT 105
2043: PPUSH
2044: LD_INT 2
2046: PPUSH
2047: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2051: LD_INT 35
2053: PPUSH
2054: CALL_OW 67
// if IsDead ( un ) or GetSide ( un ) <> 1 then
2058: LD_VAR 0 1
2062: PPUSH
2063: CALL_OW 301
2067: PUSH
2068: LD_VAR 0 1
2072: PPUSH
2073: CALL_OW 255
2077: PUSH
2078: LD_INT 1
2080: NONEQUAL
2081: OR
2082: IFFALSE 2086
// exit ;
2084: GO 2112
// until IsAt ( un , 105 , 2 ) ;
2086: LD_VAR 0 1
2090: PPUSH
2091: LD_INT 105
2093: PPUSH
2094: LD_INT 2
2096: PPUSH
2097: CALL_OW 307
2101: IFFALSE 2051
// RemoveUnit ( un ) ;
2103: LD_VAR 0 1
2107: PPUSH
2108: CALL_OW 64
// end ; end_of_file
2112: PPOPN 1
2114: END
// export function Action ; begin
2115: LD_INT 0
2117: PPUSH
// CenterNowOnUnits ( allianceHack ) ;
2118: LD_EXP 2
2122: PPUSH
2123: CALL_OW 87
// ChangeMissionObjectives ( WT-Objectives-1 ) ;
2127: LD_STRING WT-Objectives-1
2129: PPUSH
2130: CALL_OW 337
// end ;
2134: LD_VAR 0 1
2138: RET
// every 0 0$2 trigger See ( 7 , allianceMechanic ) do
2139: LD_INT 7
2141: PPUSH
2142: LD_EXP 3
2146: PPUSH
2147: CALL_OW 292
2151: IFFALSE 2168
2153: GO 2155
2155: DISABLE
// SetSide ( allianceMechanic , 7 ) ;
2156: LD_EXP 3
2160: PPUSH
2161: LD_INT 7
2163: PPUSH
2164: CALL_OW 235
2168: END
// every 0 0$1 trigger not FindArtifact ( 2 ) do
2169: LD_INT 2
2171: PPUSH
2172: CALL_OW 469
2176: NOT
2177: IFFALSE 2192
2179: GO 2181
2181: DISABLE
// SetAreaMapShow ( endMissionArea , 1 ) ;
2182: LD_INT 8
2184: PPUSH
2185: LD_INT 1
2187: PPUSH
2188: CALL_OW 424
2192: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) do var hasArtifact , i , tmp ;
2193: LD_INT 8
2195: PPUSH
2196: LD_INT 2
2198: PUSH
2199: LD_INT 34
2201: PUSH
2202: LD_INT 12
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: PUSH
2209: LD_INT 34
2211: PUSH
2212: LD_INT 51
2214: PUSH
2215: EMPTY
2216: LIST
2217: LIST
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: PPUSH
2224: CALL_OW 70
2228: IFFALSE 2428
2230: GO 2232
2232: DISABLE
2233: LD_INT 0
2235: PPUSH
2236: PPUSH
2237: PPUSH
// begin hasArtifact := false ;
2238: LD_ADDR_VAR 0 1
2242: PUSH
2243: LD_INT 0
2245: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2246: LD_INT 35
2248: PPUSH
2249: CALL_OW 67
// tmp := FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) ;
2253: LD_ADDR_VAR 0 3
2257: PUSH
2258: LD_INT 8
2260: PPUSH
2261: LD_INT 2
2263: PUSH
2264: LD_INT 34
2266: PUSH
2267: LD_INT 12
2269: PUSH
2270: EMPTY
2271: LIST
2272: LIST
2273: PUSH
2274: LD_INT 34
2276: PUSH
2277: LD_INT 51
2279: PUSH
2280: EMPTY
2281: LIST
2282: LIST
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: LIST
2288: PPUSH
2289: CALL_OW 70
2293: ST_TO_ADDR
// for i in tmp do
2294: LD_ADDR_VAR 0 2
2298: PUSH
2299: LD_VAR 0 3
2303: PUSH
2304: FOR_IN
2305: IFFALSE 2334
// if GetCargoType ( i ) = mat_artefact then
2307: LD_VAR 0 2
2311: PPUSH
2312: CALL_OW 288
2316: PUSH
2317: LD_INT 4
2319: EQUAL
2320: IFFALSE 2332
// begin hasArtifact := true ;
2322: LD_ADDR_VAR 0 1
2326: PUSH
2327: LD_INT 1
2329: ST_TO_ADDR
// break ;
2330: GO 2334
// end ;
2332: GO 2304
2334: POP
2335: POP
// until hasArtifact ;
2336: LD_VAR 0 1
2340: IFFALSE 2246
// AddMedal ( WT-med-1 , 1 ) ;
2342: LD_STRING WT-med-1
2344: PPUSH
2345: LD_INT 1
2347: PPUSH
2348: CALL_OW 101
// AddMedal ( WT-med-2 , IsOk ( allianceMechanic ) and GetSide ( allianceMechanic ) = 7 ) ;
2352: LD_STRING WT-med-2
2354: PPUSH
2355: LD_EXP 3
2359: PPUSH
2360: CALL_OW 302
2364: PUSH
2365: LD_EXP 3
2369: PPUSH
2370: CALL_OW 255
2374: PUSH
2375: LD_INT 7
2377: EQUAL
2378: AND
2379: PPUSH
2380: CALL_OW 101
// AddMedal ( WT-med-3 , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , us_double_laser ] ] ) >= 2 ) ;
2384: LD_STRING WT-med-3
2386: PPUSH
2387: LD_INT 22
2389: PUSH
2390: LD_INT 7
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 21
2399: PUSH
2400: LD_INT 10
2402: PUSH
2403: EMPTY
2404: LIST
2405: LIST
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: PPUSH
2411: CALL_OW 69
2415: PUSH
2416: LD_INT 2
2418: GREATEREQUAL
2419: PPUSH
2420: CALL_OW 101
// YouWin ;
2424: CALL_OW 103
// end ; end_of_file
2428: PPOPN 3
2430: END
// on UnitGoesToRed ( un ) do begin if un in ruForces then
2431: LD_VAR 0 1
2435: PUSH
2436: LD_EXP 7
2440: IN
2441: IFFALSE 2459
// ruForces := ruForces diff un ;
2443: LD_ADDR_EXP 7
2447: PUSH
2448: LD_EXP 7
2452: PUSH
2453: LD_VAR 0 1
2457: DIFF
2458: ST_TO_ADDR
// end ;
2459: PPOPN 1
2461: END
// on UnitDestroyed ( un ) do begin if un = allianceHack then
2462: LD_VAR 0 1
2466: PUSH
2467: LD_EXP 2
2471: EQUAL
2472: IFFALSE 2481
// YouLost ( WT-HackLost ) ;
2474: LD_STRING WT-HackLost
2476: PPUSH
2477: CALL_OW 104
// if un in ruForces then
2481: LD_VAR 0 1
2485: PUSH
2486: LD_EXP 7
2490: IN
2491: IFFALSE 2509
// ruForces := ruForces diff un ;
2493: LD_ADDR_EXP 7
2497: PUSH
2498: LD_EXP 7
2502: PUSH
2503: LD_VAR 0 1
2507: DIFF
2508: ST_TO_ADDR
// end ;
2509: PPOPN 1
2511: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 3 then
2512: LD_VAR 0 1
2516: PPUSH
2517: CALL_OW 255
2521: PUSH
2522: LD_INT 3
2524: EQUAL
2525: IFFALSE 2547
// ruForces := Join ( ruForces , vehicle ) ;
2527: LD_ADDR_EXP 7
2531: PUSH
2532: LD_EXP 7
2536: PPUSH
2537: LD_VAR 0 1
2541: PPUSH
2542: CALL 38548 0 2
2546: ST_TO_ADDR
// end ; end_of_file
2547: PPOPN 2
2549: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
2550: LD_INT 0
2552: PPUSH
// ru_radar := 98 ;
2553: LD_ADDR_EXP 9
2557: PUSH
2558: LD_INT 98
2560: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
2561: LD_ADDR_EXP 10
2565: PUSH
2566: LD_INT 89
2568: ST_TO_ADDR
// us_hack := 99 ;
2569: LD_ADDR_EXP 11
2573: PUSH
2574: LD_INT 99
2576: ST_TO_ADDR
// us_artillery := 97 ;
2577: LD_ADDR_EXP 12
2581: PUSH
2582: LD_INT 97
2584: ST_TO_ADDR
// ar_bio_bomb := 91 ;
2585: LD_ADDR_EXP 13
2589: PUSH
2590: LD_INT 91
2592: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
2593: LD_ADDR_EXP 14
2597: PUSH
2598: LD_INT 92
2600: ST_TO_ADDR
// tech_Artillery := 80 ;
2601: LD_ADDR_EXP 15
2605: PUSH
2606: LD_INT 80
2608: ST_TO_ADDR
// tech_RadMat := 81 ;
2609: LD_ADDR_EXP 16
2613: PUSH
2614: LD_INT 81
2616: ST_TO_ADDR
// tech_BasicTools := 82 ;
2617: LD_ADDR_EXP 17
2621: PUSH
2622: LD_INT 82
2624: ST_TO_ADDR
// tech_Cargo := 83 ;
2625: LD_ADDR_EXP 18
2629: PUSH
2630: LD_INT 83
2632: ST_TO_ADDR
// tech_Track := 84 ;
2633: LD_ADDR_EXP 19
2637: PUSH
2638: LD_INT 84
2640: ST_TO_ADDR
// tech_Crane := 85 ;
2641: LD_ADDR_EXP 20
2645: PUSH
2646: LD_INT 85
2648: ST_TO_ADDR
// tech_Bulldozer := 86 ;
2649: LD_ADDR_EXP 21
2653: PUSH
2654: LD_INT 86
2656: ST_TO_ADDR
// tech_Hovercraft := 87 ;
2657: LD_ADDR_EXP 22
2661: PUSH
2662: LD_INT 87
2664: ST_TO_ADDR
// end ;
2665: LD_VAR 0 1
2669: RET
// every 1 do
2670: GO 2672
2672: DISABLE
// InitGlobalVariables ; end_of_file
2673: CALL 2550 0 0
2677: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2678: LD_INT 0
2680: PPUSH
2681: PPUSH
// if exist_mode then
2682: LD_VAR 0 2
2686: IFFALSE 2711
// unit := CreateCharacter ( prefix & ident ) else
2688: LD_ADDR_VAR 0 5
2692: PUSH
2693: LD_VAR 0 3
2697: PUSH
2698: LD_VAR 0 1
2702: STR
2703: PPUSH
2704: CALL_OW 34
2708: ST_TO_ADDR
2709: GO 2726
// unit := NewCharacter ( ident ) ;
2711: LD_ADDR_VAR 0 5
2715: PUSH
2716: LD_VAR 0 1
2720: PPUSH
2721: CALL_OW 25
2725: ST_TO_ADDR
// result := unit ;
2726: LD_ADDR_VAR 0 4
2730: PUSH
2731: LD_VAR 0 5
2735: ST_TO_ADDR
// end ;
2736: LD_VAR 0 4
2740: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2741: LD_INT 0
2743: PPUSH
2744: PPUSH
// if not side or not nation then
2745: LD_VAR 0 1
2749: NOT
2750: PUSH
2751: LD_VAR 0 2
2755: NOT
2756: OR
2757: IFFALSE 2761
// exit ;
2759: GO 3525
// case nation of nation_american :
2761: LD_VAR 0 2
2765: PUSH
2766: LD_INT 1
2768: DOUBLE
2769: EQUAL
2770: IFTRUE 2774
2772: GO 2988
2774: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2775: LD_ADDR_VAR 0 4
2779: PUSH
2780: LD_INT 35
2782: PUSH
2783: LD_INT 45
2785: PUSH
2786: LD_INT 46
2788: PUSH
2789: LD_INT 47
2791: PUSH
2792: LD_INT 82
2794: PUSH
2795: LD_INT 83
2797: PUSH
2798: LD_INT 84
2800: PUSH
2801: LD_INT 85
2803: PUSH
2804: LD_INT 86
2806: PUSH
2807: LD_INT 1
2809: PUSH
2810: LD_INT 2
2812: PUSH
2813: LD_INT 6
2815: PUSH
2816: LD_INT 15
2818: PUSH
2819: LD_INT 16
2821: PUSH
2822: LD_INT 7
2824: PUSH
2825: LD_INT 12
2827: PUSH
2828: LD_INT 13
2830: PUSH
2831: LD_INT 10
2833: PUSH
2834: LD_INT 14
2836: PUSH
2837: LD_INT 20
2839: PUSH
2840: LD_INT 21
2842: PUSH
2843: LD_INT 22
2845: PUSH
2846: LD_INT 25
2848: PUSH
2849: LD_INT 32
2851: PUSH
2852: LD_INT 27
2854: PUSH
2855: LD_INT 36
2857: PUSH
2858: LD_INT 69
2860: PUSH
2861: LD_INT 39
2863: PUSH
2864: LD_INT 34
2866: PUSH
2867: LD_INT 40
2869: PUSH
2870: LD_INT 48
2872: PUSH
2873: LD_INT 49
2875: PUSH
2876: LD_INT 50
2878: PUSH
2879: LD_INT 51
2881: PUSH
2882: LD_INT 52
2884: PUSH
2885: LD_INT 53
2887: PUSH
2888: LD_INT 54
2890: PUSH
2891: LD_INT 55
2893: PUSH
2894: LD_INT 56
2896: PUSH
2897: LD_INT 57
2899: PUSH
2900: LD_INT 58
2902: PUSH
2903: LD_INT 59
2905: PUSH
2906: LD_INT 60
2908: PUSH
2909: LD_INT 61
2911: PUSH
2912: LD_INT 62
2914: PUSH
2915: LD_INT 80
2917: PUSH
2918: LD_INT 82
2920: PUSH
2921: LD_INT 83
2923: PUSH
2924: LD_INT 84
2926: PUSH
2927: LD_INT 85
2929: PUSH
2930: LD_INT 86
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: LIST
2937: LIST
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: LIST
2943: LIST
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: LIST
2949: LIST
2950: LIST
2951: LIST
2952: LIST
2953: LIST
2954: LIST
2955: LIST
2956: LIST
2957: LIST
2958: LIST
2959: LIST
2960: LIST
2961: LIST
2962: LIST
2963: LIST
2964: LIST
2965: LIST
2966: LIST
2967: LIST
2968: LIST
2969: LIST
2970: LIST
2971: LIST
2972: LIST
2973: LIST
2974: LIST
2975: LIST
2976: LIST
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: LIST
2982: LIST
2983: LIST
2984: LIST
2985: ST_TO_ADDR
2986: GO 3449
2988: LD_INT 2
2990: DOUBLE
2991: EQUAL
2992: IFTRUE 2996
2994: GO 3218
2996: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
2997: LD_ADDR_VAR 0 4
3001: PUSH
3002: LD_INT 35
3004: PUSH
3005: LD_INT 45
3007: PUSH
3008: LD_INT 46
3010: PUSH
3011: LD_INT 47
3013: PUSH
3014: LD_INT 82
3016: PUSH
3017: LD_INT 83
3019: PUSH
3020: LD_INT 84
3022: PUSH
3023: LD_INT 85
3025: PUSH
3026: LD_INT 87
3028: PUSH
3029: LD_INT 70
3031: PUSH
3032: LD_INT 1
3034: PUSH
3035: LD_INT 11
3037: PUSH
3038: LD_INT 3
3040: PUSH
3041: LD_INT 4
3043: PUSH
3044: LD_INT 5
3046: PUSH
3047: LD_INT 6
3049: PUSH
3050: LD_INT 15
3052: PUSH
3053: LD_INT 18
3055: PUSH
3056: LD_INT 7
3058: PUSH
3059: LD_INT 17
3061: PUSH
3062: LD_INT 8
3064: PUSH
3065: LD_INT 20
3067: PUSH
3068: LD_INT 21
3070: PUSH
3071: LD_INT 22
3073: PUSH
3074: LD_INT 72
3076: PUSH
3077: LD_INT 26
3079: PUSH
3080: LD_INT 69
3082: PUSH
3083: LD_INT 39
3085: PUSH
3086: LD_INT 40
3088: PUSH
3089: LD_INT 41
3091: PUSH
3092: LD_INT 42
3094: PUSH
3095: LD_INT 43
3097: PUSH
3098: LD_INT 48
3100: PUSH
3101: LD_INT 49
3103: PUSH
3104: LD_INT 50
3106: PUSH
3107: LD_INT 51
3109: PUSH
3110: LD_INT 52
3112: PUSH
3113: LD_INT 53
3115: PUSH
3116: LD_INT 54
3118: PUSH
3119: LD_INT 55
3121: PUSH
3122: LD_INT 56
3124: PUSH
3125: LD_INT 60
3127: PUSH
3128: LD_INT 61
3130: PUSH
3131: LD_INT 62
3133: PUSH
3134: LD_INT 66
3136: PUSH
3137: LD_INT 67
3139: PUSH
3140: LD_INT 68
3142: PUSH
3143: LD_INT 81
3145: PUSH
3146: LD_INT 82
3148: PUSH
3149: LD_INT 83
3151: PUSH
3152: LD_INT 84
3154: PUSH
3155: LD_INT 85
3157: PUSH
3158: LD_INT 87
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: LIST
3181: LIST
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: ST_TO_ADDR
3216: GO 3449
3218: LD_INT 3
3220: DOUBLE
3221: EQUAL
3222: IFTRUE 3226
3224: GO 3448
3226: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3227: LD_ADDR_VAR 0 4
3231: PUSH
3232: LD_INT 46
3234: PUSH
3235: LD_INT 47
3237: PUSH
3238: LD_INT 1
3240: PUSH
3241: LD_INT 2
3243: PUSH
3244: LD_INT 82
3246: PUSH
3247: LD_INT 83
3249: PUSH
3250: LD_INT 84
3252: PUSH
3253: LD_INT 85
3255: PUSH
3256: LD_INT 86
3258: PUSH
3259: LD_INT 11
3261: PUSH
3262: LD_INT 9
3264: PUSH
3265: LD_INT 20
3267: PUSH
3268: LD_INT 19
3270: PUSH
3271: LD_INT 21
3273: PUSH
3274: LD_INT 24
3276: PUSH
3277: LD_INT 22
3279: PUSH
3280: LD_INT 25
3282: PUSH
3283: LD_INT 28
3285: PUSH
3286: LD_INT 29
3288: PUSH
3289: LD_INT 30
3291: PUSH
3292: LD_INT 31
3294: PUSH
3295: LD_INT 37
3297: PUSH
3298: LD_INT 38
3300: PUSH
3301: LD_INT 32
3303: PUSH
3304: LD_INT 27
3306: PUSH
3307: LD_INT 33
3309: PUSH
3310: LD_INT 69
3312: PUSH
3313: LD_INT 39
3315: PUSH
3316: LD_INT 34
3318: PUSH
3319: LD_INT 40
3321: PUSH
3322: LD_INT 71
3324: PUSH
3325: LD_INT 23
3327: PUSH
3328: LD_INT 44
3330: PUSH
3331: LD_INT 48
3333: PUSH
3334: LD_INT 49
3336: PUSH
3337: LD_INT 50
3339: PUSH
3340: LD_INT 51
3342: PUSH
3343: LD_INT 52
3345: PUSH
3346: LD_INT 53
3348: PUSH
3349: LD_INT 54
3351: PUSH
3352: LD_INT 55
3354: PUSH
3355: LD_INT 56
3357: PUSH
3358: LD_INT 57
3360: PUSH
3361: LD_INT 58
3363: PUSH
3364: LD_INT 59
3366: PUSH
3367: LD_INT 63
3369: PUSH
3370: LD_INT 64
3372: PUSH
3373: LD_INT 65
3375: PUSH
3376: LD_INT 82
3378: PUSH
3379: LD_INT 83
3381: PUSH
3382: LD_INT 84
3384: PUSH
3385: LD_INT 85
3387: PUSH
3388: LD_INT 86
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: LIST
3443: LIST
3444: LIST
3445: ST_TO_ADDR
3446: GO 3449
3448: POP
// if state > - 1 and state < 3 then
3449: LD_VAR 0 3
3453: PUSH
3454: LD_INT 1
3456: NEG
3457: GREATER
3458: PUSH
3459: LD_VAR 0 3
3463: PUSH
3464: LD_INT 3
3466: LESS
3467: AND
3468: IFFALSE 3525
// for i in result do
3470: LD_ADDR_VAR 0 5
3474: PUSH
3475: LD_VAR 0 4
3479: PUSH
3480: FOR_IN
3481: IFFALSE 3523
// if GetTech ( i , side ) <> state then
3483: LD_VAR 0 5
3487: PPUSH
3488: LD_VAR 0 1
3492: PPUSH
3493: CALL_OW 321
3497: PUSH
3498: LD_VAR 0 3
3502: NONEQUAL
3503: IFFALSE 3521
// result := result diff i ;
3505: LD_ADDR_VAR 0 4
3509: PUSH
3510: LD_VAR 0 4
3514: PUSH
3515: LD_VAR 0 5
3519: DIFF
3520: ST_TO_ADDR
3521: GO 3480
3523: POP
3524: POP
// end ;
3525: LD_VAR 0 4
3529: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3530: LD_INT 0
3532: PPUSH
3533: PPUSH
3534: PPUSH
// result := true ;
3535: LD_ADDR_VAR 0 3
3539: PUSH
3540: LD_INT 1
3542: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3543: LD_ADDR_VAR 0 5
3547: PUSH
3548: LD_VAR 0 2
3552: PPUSH
3553: CALL_OW 480
3557: ST_TO_ADDR
// if not tmp then
3558: LD_VAR 0 5
3562: NOT
3563: IFFALSE 3567
// exit ;
3565: GO 3616
// for i in tmp do
3567: LD_ADDR_VAR 0 4
3571: PUSH
3572: LD_VAR 0 5
3576: PUSH
3577: FOR_IN
3578: IFFALSE 3614
// if GetTech ( i , side ) <> state_researched then
3580: LD_VAR 0 4
3584: PPUSH
3585: LD_VAR 0 1
3589: PPUSH
3590: CALL_OW 321
3594: PUSH
3595: LD_INT 2
3597: NONEQUAL
3598: IFFALSE 3612
// begin result := false ;
3600: LD_ADDR_VAR 0 3
3604: PUSH
3605: LD_INT 0
3607: ST_TO_ADDR
// exit ;
3608: POP
3609: POP
3610: GO 3616
// end ;
3612: GO 3577
3614: POP
3615: POP
// end ;
3616: LD_VAR 0 3
3620: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3621: LD_INT 0
3623: PPUSH
3624: PPUSH
3625: PPUSH
3626: PPUSH
3627: PPUSH
3628: PPUSH
3629: PPUSH
3630: PPUSH
3631: PPUSH
3632: PPUSH
3633: PPUSH
3634: PPUSH
3635: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3636: LD_VAR 0 1
3640: NOT
3641: PUSH
3642: LD_VAR 0 1
3646: PPUSH
3647: CALL_OW 257
3651: PUSH
3652: LD_INT 9
3654: NONEQUAL
3655: OR
3656: IFFALSE 3660
// exit ;
3658: GO 4233
// side := GetSide ( unit ) ;
3660: LD_ADDR_VAR 0 9
3664: PUSH
3665: LD_VAR 0 1
3669: PPUSH
3670: CALL_OW 255
3674: ST_TO_ADDR
// tech_space := tech_spacanom ;
3675: LD_ADDR_VAR 0 12
3679: PUSH
3680: LD_INT 29
3682: ST_TO_ADDR
// tech_time := tech_taurad ;
3683: LD_ADDR_VAR 0 13
3687: PUSH
3688: LD_INT 28
3690: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3691: LD_ADDR_VAR 0 11
3695: PUSH
3696: LD_VAR 0 1
3700: PPUSH
3701: CALL_OW 310
3705: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3706: LD_VAR 0 11
3710: PPUSH
3711: CALL_OW 247
3715: PUSH
3716: LD_INT 2
3718: EQUAL
3719: IFFALSE 3723
// exit ;
3721: GO 4233
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3723: LD_ADDR_VAR 0 8
3727: PUSH
3728: LD_INT 81
3730: PUSH
3731: LD_VAR 0 9
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: PUSH
3740: LD_INT 3
3742: PUSH
3743: LD_INT 21
3745: PUSH
3746: LD_INT 3
3748: PUSH
3749: EMPTY
3750: LIST
3751: LIST
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PPUSH
3761: CALL_OW 69
3765: ST_TO_ADDR
// if not tmp then
3766: LD_VAR 0 8
3770: NOT
3771: IFFALSE 3775
// exit ;
3773: GO 4233
// if in_unit then
3775: LD_VAR 0 11
3779: IFFALSE 3803
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3781: LD_ADDR_VAR 0 10
3785: PUSH
3786: LD_VAR 0 8
3790: PPUSH
3791: LD_VAR 0 11
3795: PPUSH
3796: CALL_OW 74
3800: ST_TO_ADDR
3801: GO 3823
// enemy := NearestUnitToUnit ( tmp , unit ) ;
3803: LD_ADDR_VAR 0 10
3807: PUSH
3808: LD_VAR 0 8
3812: PPUSH
3813: LD_VAR 0 1
3817: PPUSH
3818: CALL_OW 74
3822: ST_TO_ADDR
// if not enemy then
3823: LD_VAR 0 10
3827: NOT
3828: IFFALSE 3832
// exit ;
3830: GO 4233
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
3832: LD_VAR 0 11
3836: PUSH
3837: LD_VAR 0 11
3841: PPUSH
3842: LD_VAR 0 10
3846: PPUSH
3847: CALL_OW 296
3851: PUSH
3852: LD_INT 13
3854: GREATER
3855: AND
3856: PUSH
3857: LD_VAR 0 1
3861: PPUSH
3862: LD_VAR 0 10
3866: PPUSH
3867: CALL_OW 296
3871: PUSH
3872: LD_INT 12
3874: GREATER
3875: OR
3876: IFFALSE 3880
// exit ;
3878: GO 4233
// missile := [ 1 ] ;
3880: LD_ADDR_VAR 0 14
3884: PUSH
3885: LD_INT 1
3887: PUSH
3888: EMPTY
3889: LIST
3890: ST_TO_ADDR
// if Researched ( side , tech_space ) then
3891: LD_VAR 0 9
3895: PPUSH
3896: LD_VAR 0 12
3900: PPUSH
3901: CALL_OW 325
3905: IFFALSE 3934
// missile := Insert ( missile , missile + 1 , 2 ) ;
3907: LD_ADDR_VAR 0 14
3911: PUSH
3912: LD_VAR 0 14
3916: PPUSH
3917: LD_VAR 0 14
3921: PUSH
3922: LD_INT 1
3924: PLUS
3925: PPUSH
3926: LD_INT 2
3928: PPUSH
3929: CALL_OW 2
3933: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
3934: LD_VAR 0 9
3938: PPUSH
3939: LD_VAR 0 13
3943: PPUSH
3944: CALL_OW 325
3948: PUSH
3949: LD_VAR 0 10
3953: PPUSH
3954: CALL_OW 255
3958: PPUSH
3959: LD_VAR 0 13
3963: PPUSH
3964: CALL_OW 325
3968: NOT
3969: AND
3970: IFFALSE 3999
// missile := Insert ( missile , missile + 1 , 3 ) ;
3972: LD_ADDR_VAR 0 14
3976: PUSH
3977: LD_VAR 0 14
3981: PPUSH
3982: LD_VAR 0 14
3986: PUSH
3987: LD_INT 1
3989: PLUS
3990: PPUSH
3991: LD_INT 3
3993: PPUSH
3994: CALL_OW 2
3998: ST_TO_ADDR
// if missile < 2 then
3999: LD_VAR 0 14
4003: PUSH
4004: LD_INT 2
4006: LESS
4007: IFFALSE 4011
// exit ;
4009: GO 4233
// x := GetX ( enemy ) ;
4011: LD_ADDR_VAR 0 4
4015: PUSH
4016: LD_VAR 0 10
4020: PPUSH
4021: CALL_OW 250
4025: ST_TO_ADDR
// y := GetY ( enemy ) ;
4026: LD_ADDR_VAR 0 5
4030: PUSH
4031: LD_VAR 0 10
4035: PPUSH
4036: CALL_OW 251
4040: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4041: LD_ADDR_VAR 0 6
4045: PUSH
4046: LD_VAR 0 4
4050: PUSH
4051: LD_INT 1
4053: NEG
4054: PPUSH
4055: LD_INT 1
4057: PPUSH
4058: CALL_OW 12
4062: PLUS
4063: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4064: LD_ADDR_VAR 0 7
4068: PUSH
4069: LD_VAR 0 5
4073: PUSH
4074: LD_INT 1
4076: NEG
4077: PPUSH
4078: LD_INT 1
4080: PPUSH
4081: CALL_OW 12
4085: PLUS
4086: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4087: LD_VAR 0 6
4091: PPUSH
4092: LD_VAR 0 7
4096: PPUSH
4097: CALL_OW 488
4101: NOT
4102: IFFALSE 4124
// begin _x := x ;
4104: LD_ADDR_VAR 0 6
4108: PUSH
4109: LD_VAR 0 4
4113: ST_TO_ADDR
// _y := y ;
4114: LD_ADDR_VAR 0 7
4118: PUSH
4119: LD_VAR 0 5
4123: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4124: LD_ADDR_VAR 0 3
4128: PUSH
4129: LD_INT 1
4131: PPUSH
4132: LD_VAR 0 14
4136: PPUSH
4137: CALL_OW 12
4141: ST_TO_ADDR
// case i of 1 :
4142: LD_VAR 0 3
4146: PUSH
4147: LD_INT 1
4149: DOUBLE
4150: EQUAL
4151: IFTRUE 4155
4153: GO 4172
4155: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4156: LD_VAR 0 1
4160: PPUSH
4161: LD_VAR 0 10
4165: PPUSH
4166: CALL_OW 115
4170: GO 4233
4172: LD_INT 2
4174: DOUBLE
4175: EQUAL
4176: IFTRUE 4180
4178: GO 4202
4180: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4181: LD_VAR 0 1
4185: PPUSH
4186: LD_VAR 0 6
4190: PPUSH
4191: LD_VAR 0 7
4195: PPUSH
4196: CALL_OW 153
4200: GO 4233
4202: LD_INT 3
4204: DOUBLE
4205: EQUAL
4206: IFTRUE 4210
4208: GO 4232
4210: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4211: LD_VAR 0 1
4215: PPUSH
4216: LD_VAR 0 6
4220: PPUSH
4221: LD_VAR 0 7
4225: PPUSH
4226: CALL_OW 154
4230: GO 4233
4232: POP
// end ;
4233: LD_VAR 0 2
4237: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4238: LD_INT 0
4240: PPUSH
4241: PPUSH
4242: PPUSH
4243: PPUSH
4244: PPUSH
4245: PPUSH
// if not unit or not building then
4246: LD_VAR 0 1
4250: NOT
4251: PUSH
4252: LD_VAR 0 2
4256: NOT
4257: OR
4258: IFFALSE 4262
// exit ;
4260: GO 4420
// x := GetX ( building ) ;
4262: LD_ADDR_VAR 0 5
4266: PUSH
4267: LD_VAR 0 2
4271: PPUSH
4272: CALL_OW 250
4276: ST_TO_ADDR
// y := GetY ( building ) ;
4277: LD_ADDR_VAR 0 6
4281: PUSH
4282: LD_VAR 0 2
4286: PPUSH
4287: CALL_OW 251
4291: ST_TO_ADDR
// for i = 0 to 5 do
4292: LD_ADDR_VAR 0 4
4296: PUSH
4297: DOUBLE
4298: LD_INT 0
4300: DEC
4301: ST_TO_ADDR
4302: LD_INT 5
4304: PUSH
4305: FOR_TO
4306: IFFALSE 4418
// begin _x := ShiftX ( x , i , 3 ) ;
4308: LD_ADDR_VAR 0 7
4312: PUSH
4313: LD_VAR 0 5
4317: PPUSH
4318: LD_VAR 0 4
4322: PPUSH
4323: LD_INT 3
4325: PPUSH
4326: CALL_OW 272
4330: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4331: LD_ADDR_VAR 0 8
4335: PUSH
4336: LD_VAR 0 6
4340: PPUSH
4341: LD_VAR 0 4
4345: PPUSH
4346: LD_INT 3
4348: PPUSH
4349: CALL_OW 273
4353: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4354: LD_VAR 0 7
4358: PPUSH
4359: LD_VAR 0 8
4363: PPUSH
4364: CALL_OW 488
4368: NOT
4369: IFFALSE 4373
// continue ;
4371: GO 4305
// if HexInfo ( _x , _y ) = 0 then
4373: LD_VAR 0 7
4377: PPUSH
4378: LD_VAR 0 8
4382: PPUSH
4383: CALL_OW 428
4387: PUSH
4388: LD_INT 0
4390: EQUAL
4391: IFFALSE 4416
// begin ComMoveXY ( unit , _x , _y ) ;
4393: LD_VAR 0 1
4397: PPUSH
4398: LD_VAR 0 7
4402: PPUSH
4403: LD_VAR 0 8
4407: PPUSH
4408: CALL_OW 111
// exit ;
4412: POP
4413: POP
4414: GO 4420
// end ; end ;
4416: GO 4305
4418: POP
4419: POP
// end ;
4420: LD_VAR 0 3
4424: RET
// export function ScanBase ( side , base_area ) ; begin
4425: LD_INT 0
4427: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4428: LD_ADDR_VAR 0 3
4432: PUSH
4433: LD_VAR 0 2
4437: PPUSH
4438: LD_INT 81
4440: PUSH
4441: LD_VAR 0 1
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PPUSH
4450: CALL_OW 70
4454: ST_TO_ADDR
// end ;
4455: LD_VAR 0 3
4459: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4460: LD_INT 0
4462: PPUSH
4463: PPUSH
4464: PPUSH
4465: PPUSH
// result := false ;
4466: LD_ADDR_VAR 0 2
4470: PUSH
4471: LD_INT 0
4473: ST_TO_ADDR
// side := GetSide ( unit ) ;
4474: LD_ADDR_VAR 0 3
4478: PUSH
4479: LD_VAR 0 1
4483: PPUSH
4484: CALL_OW 255
4488: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4489: LD_ADDR_VAR 0 4
4493: PUSH
4494: LD_VAR 0 1
4498: PPUSH
4499: CALL_OW 248
4503: ST_TO_ADDR
// case nat of 1 :
4504: LD_VAR 0 4
4508: PUSH
4509: LD_INT 1
4511: DOUBLE
4512: EQUAL
4513: IFTRUE 4517
4515: GO 4528
4517: POP
// tech := tech_lassight ; 2 :
4518: LD_ADDR_VAR 0 5
4522: PUSH
4523: LD_INT 12
4525: ST_TO_ADDR
4526: GO 4567
4528: LD_INT 2
4530: DOUBLE
4531: EQUAL
4532: IFTRUE 4536
4534: GO 4547
4536: POP
// tech := tech_mortar ; 3 :
4537: LD_ADDR_VAR 0 5
4541: PUSH
4542: LD_INT 41
4544: ST_TO_ADDR
4545: GO 4567
4547: LD_INT 3
4549: DOUBLE
4550: EQUAL
4551: IFTRUE 4555
4553: GO 4566
4555: POP
// tech := tech_bazooka ; end ;
4556: LD_ADDR_VAR 0 5
4560: PUSH
4561: LD_INT 44
4563: ST_TO_ADDR
4564: GO 4567
4566: POP
// if Researched ( side , tech ) then
4567: LD_VAR 0 3
4571: PPUSH
4572: LD_VAR 0 5
4576: PPUSH
4577: CALL_OW 325
4581: IFFALSE 4608
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4583: LD_ADDR_VAR 0 2
4587: PUSH
4588: LD_INT 5
4590: PUSH
4591: LD_INT 8
4593: PUSH
4594: LD_INT 9
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: LIST
4601: PUSH
4602: LD_VAR 0 4
4606: ARRAY
4607: ST_TO_ADDR
// end ;
4608: LD_VAR 0 2
4612: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4613: LD_INT 0
4615: PPUSH
4616: PPUSH
4617: PPUSH
// if not mines then
4618: LD_VAR 0 2
4622: NOT
4623: IFFALSE 4627
// exit ;
4625: GO 4771
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4627: LD_ADDR_VAR 0 5
4631: PUSH
4632: LD_INT 81
4634: PUSH
4635: LD_VAR 0 1
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: PUSH
4644: LD_INT 3
4646: PUSH
4647: LD_INT 21
4649: PUSH
4650: LD_INT 3
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: PPUSH
4665: CALL_OW 69
4669: ST_TO_ADDR
// for i in mines do
4670: LD_ADDR_VAR 0 4
4674: PUSH
4675: LD_VAR 0 2
4679: PUSH
4680: FOR_IN
4681: IFFALSE 4769
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4683: LD_VAR 0 4
4687: PUSH
4688: LD_INT 1
4690: ARRAY
4691: PPUSH
4692: LD_VAR 0 4
4696: PUSH
4697: LD_INT 2
4699: ARRAY
4700: PPUSH
4701: CALL_OW 458
4705: NOT
4706: IFFALSE 4710
// continue ;
4708: GO 4680
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4710: LD_VAR 0 4
4714: PUSH
4715: LD_INT 1
4717: ARRAY
4718: PPUSH
4719: LD_VAR 0 4
4723: PUSH
4724: LD_INT 2
4726: ARRAY
4727: PPUSH
4728: CALL_OW 428
4732: PUSH
4733: LD_VAR 0 5
4737: IN
4738: IFFALSE 4767
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4740: LD_VAR 0 4
4744: PUSH
4745: LD_INT 1
4747: ARRAY
4748: PPUSH
4749: LD_VAR 0 4
4753: PUSH
4754: LD_INT 2
4756: ARRAY
4757: PPUSH
4758: LD_VAR 0 1
4762: PPUSH
4763: CALL_OW 456
// end ;
4767: GO 4680
4769: POP
4770: POP
// end ;
4771: LD_VAR 0 3
4775: RET
// export function Count ( array ) ; var i ; begin
4776: LD_INT 0
4778: PPUSH
4779: PPUSH
// result := 0 ;
4780: LD_ADDR_VAR 0 2
4784: PUSH
4785: LD_INT 0
4787: ST_TO_ADDR
// for i in array do
4788: LD_ADDR_VAR 0 3
4792: PUSH
4793: LD_VAR 0 1
4797: PUSH
4798: FOR_IN
4799: IFFALSE 4823
// if i then
4801: LD_VAR 0 3
4805: IFFALSE 4821
// result := result + 1 ;
4807: LD_ADDR_VAR 0 2
4811: PUSH
4812: LD_VAR 0 2
4816: PUSH
4817: LD_INT 1
4819: PLUS
4820: ST_TO_ADDR
4821: GO 4798
4823: POP
4824: POP
// end ;
4825: LD_VAR 0 2
4829: RET
// export function IsEmpty ( building ) ; begin
4830: LD_INT 0
4832: PPUSH
// if not building then
4833: LD_VAR 0 1
4837: NOT
4838: IFFALSE 4842
// exit ;
4840: GO 4885
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4842: LD_ADDR_VAR 0 2
4846: PUSH
4847: LD_VAR 0 1
4851: PUSH
4852: LD_INT 22
4854: PUSH
4855: LD_VAR 0 1
4859: PPUSH
4860: CALL_OW 255
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: LD_INT 58
4871: PUSH
4872: EMPTY
4873: LIST
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: PPUSH
4879: CALL_OW 69
4883: IN
4884: ST_TO_ADDR
// end ;
4885: LD_VAR 0 2
4889: RET
// export function IsNotFull ( building ) ; begin
4890: LD_INT 0
4892: PPUSH
// if not building then
4893: LD_VAR 0 1
4897: NOT
4898: IFFALSE 4902
// exit ;
4900: GO 4921
// result := UnitsInside ( building ) < 6 ;
4902: LD_ADDR_VAR 0 2
4906: PUSH
4907: LD_VAR 0 1
4911: PPUSH
4912: CALL_OW 313
4916: PUSH
4917: LD_INT 6
4919: LESS
4920: ST_TO_ADDR
// end ;
4921: LD_VAR 0 2
4925: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
4926: LD_INT 0
4928: PPUSH
4929: PPUSH
4930: PPUSH
4931: PPUSH
// tmp := [ ] ;
4932: LD_ADDR_VAR 0 3
4936: PUSH
4937: EMPTY
4938: ST_TO_ADDR
// list := [ ] ;
4939: LD_ADDR_VAR 0 5
4943: PUSH
4944: EMPTY
4945: ST_TO_ADDR
// for i = 16 to 25 do
4946: LD_ADDR_VAR 0 4
4950: PUSH
4951: DOUBLE
4952: LD_INT 16
4954: DEC
4955: ST_TO_ADDR
4956: LD_INT 25
4958: PUSH
4959: FOR_TO
4960: IFFALSE 5033
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
4962: LD_ADDR_VAR 0 3
4966: PUSH
4967: LD_VAR 0 3
4971: PUSH
4972: LD_INT 22
4974: PUSH
4975: LD_VAR 0 1
4979: PPUSH
4980: CALL_OW 255
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: LD_INT 91
4991: PUSH
4992: LD_VAR 0 1
4996: PUSH
4997: LD_INT 6
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: LIST
5004: PUSH
5005: LD_INT 30
5007: PUSH
5008: LD_VAR 0 4
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: LIST
5021: PUSH
5022: EMPTY
5023: LIST
5024: PPUSH
5025: CALL_OW 69
5029: ADD
5030: ST_TO_ADDR
5031: GO 4959
5033: POP
5034: POP
// for i = 1 to tmp do
5035: LD_ADDR_VAR 0 4
5039: PUSH
5040: DOUBLE
5041: LD_INT 1
5043: DEC
5044: ST_TO_ADDR
5045: LD_VAR 0 3
5049: PUSH
5050: FOR_TO
5051: IFFALSE 5139
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5053: LD_ADDR_VAR 0 5
5057: PUSH
5058: LD_VAR 0 5
5062: PUSH
5063: LD_VAR 0 3
5067: PUSH
5068: LD_VAR 0 4
5072: ARRAY
5073: PPUSH
5074: CALL_OW 266
5078: PUSH
5079: LD_VAR 0 3
5083: PUSH
5084: LD_VAR 0 4
5088: ARRAY
5089: PPUSH
5090: CALL_OW 250
5094: PUSH
5095: LD_VAR 0 3
5099: PUSH
5100: LD_VAR 0 4
5104: ARRAY
5105: PPUSH
5106: CALL_OW 251
5110: PUSH
5111: LD_VAR 0 3
5115: PUSH
5116: LD_VAR 0 4
5120: ARRAY
5121: PPUSH
5122: CALL_OW 254
5126: PUSH
5127: EMPTY
5128: LIST
5129: LIST
5130: LIST
5131: LIST
5132: PUSH
5133: EMPTY
5134: LIST
5135: ADD
5136: ST_TO_ADDR
5137: GO 5050
5139: POP
5140: POP
// result := list ;
5141: LD_ADDR_VAR 0 2
5145: PUSH
5146: LD_VAR 0 5
5150: ST_TO_ADDR
// end ;
5151: LD_VAR 0 2
5155: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5156: LD_INT 0
5158: PPUSH
5159: PPUSH
5160: PPUSH
5161: PPUSH
5162: PPUSH
5163: PPUSH
5164: PPUSH
// if not factory then
5165: LD_VAR 0 1
5169: NOT
5170: IFFALSE 5174
// exit ;
5172: GO 5767
// if control = control_apeman then
5174: LD_VAR 0 4
5178: PUSH
5179: LD_INT 5
5181: EQUAL
5182: IFFALSE 5291
// begin tmp := UnitsInside ( factory ) ;
5184: LD_ADDR_VAR 0 8
5188: PUSH
5189: LD_VAR 0 1
5193: PPUSH
5194: CALL_OW 313
5198: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5199: LD_VAR 0 8
5203: PPUSH
5204: LD_INT 25
5206: PUSH
5207: LD_INT 12
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: PPUSH
5214: CALL_OW 72
5218: NOT
5219: IFFALSE 5229
// control := control_manual ;
5221: LD_ADDR_VAR 0 4
5225: PUSH
5226: LD_INT 1
5228: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5229: LD_ADDR_VAR 0 8
5233: PUSH
5234: LD_VAR 0 1
5238: PPUSH
5239: CALL 4926 0 1
5243: ST_TO_ADDR
// if tmp then
5244: LD_VAR 0 8
5248: IFFALSE 5291
// begin for i in tmp do
5250: LD_ADDR_VAR 0 7
5254: PUSH
5255: LD_VAR 0 8
5259: PUSH
5260: FOR_IN
5261: IFFALSE 5289
// if i [ 1 ] = b_ext_radio then
5263: LD_VAR 0 7
5267: PUSH
5268: LD_INT 1
5270: ARRAY
5271: PUSH
5272: LD_INT 22
5274: EQUAL
5275: IFFALSE 5287
// begin control := control_remote ;
5277: LD_ADDR_VAR 0 4
5281: PUSH
5282: LD_INT 2
5284: ST_TO_ADDR
// break ;
5285: GO 5289
// end ;
5287: GO 5260
5289: POP
5290: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5291: LD_VAR 0 1
5295: PPUSH
5296: LD_VAR 0 2
5300: PPUSH
5301: LD_VAR 0 3
5305: PPUSH
5306: LD_VAR 0 4
5310: PPUSH
5311: LD_VAR 0 5
5315: PPUSH
5316: CALL_OW 448
5320: IFFALSE 5355
// begin result := [ chassis , engine , control , weapon ] ;
5322: LD_ADDR_VAR 0 6
5326: PUSH
5327: LD_VAR 0 2
5331: PUSH
5332: LD_VAR 0 3
5336: PUSH
5337: LD_VAR 0 4
5341: PUSH
5342: LD_VAR 0 5
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: ST_TO_ADDR
// exit ;
5353: GO 5767
// end ; _chassis := AvailableChassisList ( factory ) ;
5355: LD_ADDR_VAR 0 9
5359: PUSH
5360: LD_VAR 0 1
5364: PPUSH
5365: CALL_OW 475
5369: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5370: LD_ADDR_VAR 0 11
5374: PUSH
5375: LD_VAR 0 1
5379: PPUSH
5380: CALL_OW 476
5384: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5385: LD_ADDR_VAR 0 12
5389: PUSH
5390: LD_VAR 0 1
5394: PPUSH
5395: CALL_OW 477
5399: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5400: LD_ADDR_VAR 0 10
5404: PUSH
5405: LD_VAR 0 1
5409: PPUSH
5410: CALL_OW 478
5414: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5415: LD_VAR 0 9
5419: NOT
5420: PUSH
5421: LD_VAR 0 11
5425: NOT
5426: OR
5427: PUSH
5428: LD_VAR 0 12
5432: NOT
5433: OR
5434: PUSH
5435: LD_VAR 0 10
5439: NOT
5440: OR
5441: IFFALSE 5476
// begin result := [ chassis , engine , control , weapon ] ;
5443: LD_ADDR_VAR 0 6
5447: PUSH
5448: LD_VAR 0 2
5452: PUSH
5453: LD_VAR 0 3
5457: PUSH
5458: LD_VAR 0 4
5462: PUSH
5463: LD_VAR 0 5
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: ST_TO_ADDR
// exit ;
5474: GO 5767
// end ; if not chassis in _chassis then
5476: LD_VAR 0 2
5480: PUSH
5481: LD_VAR 0 9
5485: IN
5486: NOT
5487: IFFALSE 5513
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5489: LD_ADDR_VAR 0 2
5493: PUSH
5494: LD_VAR 0 9
5498: PUSH
5499: LD_INT 1
5501: PPUSH
5502: LD_VAR 0 9
5506: PPUSH
5507: CALL_OW 12
5511: ARRAY
5512: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5513: LD_VAR 0 2
5517: PPUSH
5518: LD_VAR 0 3
5522: PPUSH
5523: CALL 5772 0 2
5527: NOT
5528: IFFALSE 5587
// repeat engine := _engine [ 1 ] ;
5530: LD_ADDR_VAR 0 3
5534: PUSH
5535: LD_VAR 0 11
5539: PUSH
5540: LD_INT 1
5542: ARRAY
5543: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5544: LD_ADDR_VAR 0 11
5548: PUSH
5549: LD_VAR 0 11
5553: PPUSH
5554: LD_INT 1
5556: PPUSH
5557: CALL_OW 3
5561: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5562: LD_VAR 0 2
5566: PPUSH
5567: LD_VAR 0 3
5571: PPUSH
5572: CALL 5772 0 2
5576: PUSH
5577: LD_VAR 0 11
5581: PUSH
5582: EMPTY
5583: EQUAL
5584: OR
5585: IFFALSE 5530
// if not control in _control then
5587: LD_VAR 0 4
5591: PUSH
5592: LD_VAR 0 12
5596: IN
5597: NOT
5598: IFFALSE 5624
// control := _control [ rand ( 1 , _control ) ] ;
5600: LD_ADDR_VAR 0 4
5604: PUSH
5605: LD_VAR 0 12
5609: PUSH
5610: LD_INT 1
5612: PPUSH
5613: LD_VAR 0 12
5617: PPUSH
5618: CALL_OW 12
5622: ARRAY
5623: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5624: LD_VAR 0 2
5628: PPUSH
5629: LD_VAR 0 5
5633: PPUSH
5634: CALL 5992 0 2
5638: NOT
5639: IFFALSE 5698
// repeat weapon := _weapon [ 1 ] ;
5641: LD_ADDR_VAR 0 5
5645: PUSH
5646: LD_VAR 0 10
5650: PUSH
5651: LD_INT 1
5653: ARRAY
5654: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5655: LD_ADDR_VAR 0 10
5659: PUSH
5660: LD_VAR 0 10
5664: PPUSH
5665: LD_INT 1
5667: PPUSH
5668: CALL_OW 3
5672: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5673: LD_VAR 0 2
5677: PPUSH
5678: LD_VAR 0 5
5682: PPUSH
5683: CALL 5992 0 2
5687: PUSH
5688: LD_VAR 0 10
5692: PUSH
5693: EMPTY
5694: EQUAL
5695: OR
5696: IFFALSE 5641
// result := [ ] ;
5698: LD_ADDR_VAR 0 6
5702: PUSH
5703: EMPTY
5704: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5705: LD_VAR 0 1
5709: PPUSH
5710: LD_VAR 0 2
5714: PPUSH
5715: LD_VAR 0 3
5719: PPUSH
5720: LD_VAR 0 4
5724: PPUSH
5725: LD_VAR 0 5
5729: PPUSH
5730: CALL_OW 448
5734: IFFALSE 5767
// result := [ chassis , engine , control , weapon ] ;
5736: LD_ADDR_VAR 0 6
5740: PUSH
5741: LD_VAR 0 2
5745: PUSH
5746: LD_VAR 0 3
5750: PUSH
5751: LD_VAR 0 4
5755: PUSH
5756: LD_VAR 0 5
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: LIST
5765: LIST
5766: ST_TO_ADDR
// end ;
5767: LD_VAR 0 6
5771: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5772: LD_INT 0
5774: PPUSH
// if not chassis or not engine then
5775: LD_VAR 0 1
5779: NOT
5780: PUSH
5781: LD_VAR 0 2
5785: NOT
5786: OR
5787: IFFALSE 5791
// exit ;
5789: GO 5987
// case engine of engine_solar :
5791: LD_VAR 0 2
5795: PUSH
5796: LD_INT 2
5798: DOUBLE
5799: EQUAL
5800: IFTRUE 5804
5802: GO 5842
5804: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5805: LD_ADDR_VAR 0 3
5809: PUSH
5810: LD_INT 11
5812: PUSH
5813: LD_INT 12
5815: PUSH
5816: LD_INT 13
5818: PUSH
5819: LD_INT 14
5821: PUSH
5822: LD_INT 1
5824: PUSH
5825: LD_INT 2
5827: PUSH
5828: LD_INT 3
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: LIST
5835: LIST
5836: LIST
5837: LIST
5838: LIST
5839: ST_TO_ADDR
5840: GO 5971
5842: LD_INT 1
5844: DOUBLE
5845: EQUAL
5846: IFTRUE 5850
5848: GO 5912
5850: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
5851: LD_ADDR_VAR 0 3
5855: PUSH
5856: LD_INT 11
5858: PUSH
5859: LD_INT 12
5861: PUSH
5862: LD_INT 13
5864: PUSH
5865: LD_INT 14
5867: PUSH
5868: LD_INT 1
5870: PUSH
5871: LD_INT 2
5873: PUSH
5874: LD_INT 3
5876: PUSH
5877: LD_INT 4
5879: PUSH
5880: LD_INT 5
5882: PUSH
5883: LD_INT 21
5885: PUSH
5886: LD_INT 23
5888: PUSH
5889: LD_INT 22
5891: PUSH
5892: LD_INT 24
5894: PUSH
5895: EMPTY
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: ST_TO_ADDR
5910: GO 5971
5912: LD_INT 3
5914: DOUBLE
5915: EQUAL
5916: IFTRUE 5920
5918: GO 5970
5920: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5921: LD_ADDR_VAR 0 3
5925: PUSH
5926: LD_INT 13
5928: PUSH
5929: LD_INT 14
5931: PUSH
5932: LD_INT 2
5934: PUSH
5935: LD_INT 3
5937: PUSH
5938: LD_INT 4
5940: PUSH
5941: LD_INT 5
5943: PUSH
5944: LD_INT 21
5946: PUSH
5947: LD_INT 22
5949: PUSH
5950: LD_INT 23
5952: PUSH
5953: LD_INT 24
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: LIST
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: ST_TO_ADDR
5968: GO 5971
5970: POP
// result := ( chassis in result ) ;
5971: LD_ADDR_VAR 0 3
5975: PUSH
5976: LD_VAR 0 1
5980: PUSH
5981: LD_VAR 0 3
5985: IN
5986: ST_TO_ADDR
// end ;
5987: LD_VAR 0 3
5991: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
5992: LD_INT 0
5994: PPUSH
// if not chassis or not weapon then
5995: LD_VAR 0 1
5999: NOT
6000: PUSH
6001: LD_VAR 0 2
6005: NOT
6006: OR
6007: IFFALSE 6011
// exit ;
6009: GO 7037
// case weapon of us_machine_gun :
6011: LD_VAR 0 2
6015: PUSH
6016: LD_INT 2
6018: DOUBLE
6019: EQUAL
6020: IFTRUE 6024
6022: GO 6054
6024: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6025: LD_ADDR_VAR 0 3
6029: PUSH
6030: LD_INT 1
6032: PUSH
6033: LD_INT 2
6035: PUSH
6036: LD_INT 3
6038: PUSH
6039: LD_INT 4
6041: PUSH
6042: LD_INT 5
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: ST_TO_ADDR
6052: GO 7021
6054: LD_INT 3
6056: DOUBLE
6057: EQUAL
6058: IFTRUE 6062
6060: GO 6092
6062: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6063: LD_ADDR_VAR 0 3
6067: PUSH
6068: LD_INT 1
6070: PUSH
6071: LD_INT 2
6073: PUSH
6074: LD_INT 3
6076: PUSH
6077: LD_INT 4
6079: PUSH
6080: LD_INT 5
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: ST_TO_ADDR
6090: GO 7021
6092: LD_INT 11
6094: DOUBLE
6095: EQUAL
6096: IFTRUE 6100
6098: GO 6130
6100: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6101: LD_ADDR_VAR 0 3
6105: PUSH
6106: LD_INT 1
6108: PUSH
6109: LD_INT 2
6111: PUSH
6112: LD_INT 3
6114: PUSH
6115: LD_INT 4
6117: PUSH
6118: LD_INT 5
6120: PUSH
6121: EMPTY
6122: LIST
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: ST_TO_ADDR
6128: GO 7021
6130: LD_INT 4
6132: DOUBLE
6133: EQUAL
6134: IFTRUE 6138
6136: GO 6164
6138: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6139: LD_ADDR_VAR 0 3
6143: PUSH
6144: LD_INT 2
6146: PUSH
6147: LD_INT 3
6149: PUSH
6150: LD_INT 4
6152: PUSH
6153: LD_INT 5
6155: PUSH
6156: EMPTY
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: ST_TO_ADDR
6162: GO 7021
6164: LD_INT 5
6166: DOUBLE
6167: EQUAL
6168: IFTRUE 6172
6170: GO 6198
6172: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6173: LD_ADDR_VAR 0 3
6177: PUSH
6178: LD_INT 2
6180: PUSH
6181: LD_INT 3
6183: PUSH
6184: LD_INT 4
6186: PUSH
6187: LD_INT 5
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: ST_TO_ADDR
6196: GO 7021
6198: LD_INT 9
6200: DOUBLE
6201: EQUAL
6202: IFTRUE 6206
6204: GO 6232
6206: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6207: LD_ADDR_VAR 0 3
6211: PUSH
6212: LD_INT 2
6214: PUSH
6215: LD_INT 3
6217: PUSH
6218: LD_INT 4
6220: PUSH
6221: LD_INT 5
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: LIST
6228: LIST
6229: ST_TO_ADDR
6230: GO 7021
6232: LD_INT 7
6234: DOUBLE
6235: EQUAL
6236: IFTRUE 6240
6238: GO 6266
6240: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6241: LD_ADDR_VAR 0 3
6245: PUSH
6246: LD_INT 2
6248: PUSH
6249: LD_INT 3
6251: PUSH
6252: LD_INT 4
6254: PUSH
6255: LD_INT 5
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: ST_TO_ADDR
6264: GO 7021
6266: LD_INT 12
6268: DOUBLE
6269: EQUAL
6270: IFTRUE 6274
6272: GO 6300
6274: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6275: LD_ADDR_VAR 0 3
6279: PUSH
6280: LD_INT 2
6282: PUSH
6283: LD_INT 3
6285: PUSH
6286: LD_INT 4
6288: PUSH
6289: LD_INT 5
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: ST_TO_ADDR
6298: GO 7021
6300: LD_INT 13
6302: DOUBLE
6303: EQUAL
6304: IFTRUE 6308
6306: GO 6334
6308: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6309: LD_ADDR_VAR 0 3
6313: PUSH
6314: LD_INT 2
6316: PUSH
6317: LD_INT 3
6319: PUSH
6320: LD_INT 4
6322: PUSH
6323: LD_INT 5
6325: PUSH
6326: EMPTY
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: ST_TO_ADDR
6332: GO 7021
6334: LD_INT 14
6336: DOUBLE
6337: EQUAL
6338: IFTRUE 6342
6340: GO 6360
6342: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6343: LD_ADDR_VAR 0 3
6347: PUSH
6348: LD_INT 4
6350: PUSH
6351: LD_INT 5
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: ST_TO_ADDR
6358: GO 7021
6360: LD_INT 6
6362: DOUBLE
6363: EQUAL
6364: IFTRUE 6368
6366: GO 6386
6368: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6369: LD_ADDR_VAR 0 3
6373: PUSH
6374: LD_INT 4
6376: PUSH
6377: LD_INT 5
6379: PUSH
6380: EMPTY
6381: LIST
6382: LIST
6383: ST_TO_ADDR
6384: GO 7021
6386: LD_INT 10
6388: DOUBLE
6389: EQUAL
6390: IFTRUE 6394
6392: GO 6412
6394: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6395: LD_ADDR_VAR 0 3
6399: PUSH
6400: LD_INT 4
6402: PUSH
6403: LD_INT 5
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: ST_TO_ADDR
6410: GO 7021
6412: LD_INT 22
6414: DOUBLE
6415: EQUAL
6416: IFTRUE 6420
6418: GO 6446
6420: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6421: LD_ADDR_VAR 0 3
6425: PUSH
6426: LD_INT 11
6428: PUSH
6429: LD_INT 12
6431: PUSH
6432: LD_INT 13
6434: PUSH
6435: LD_INT 14
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: ST_TO_ADDR
6444: GO 7021
6446: LD_INT 23
6448: DOUBLE
6449: EQUAL
6450: IFTRUE 6454
6452: GO 6480
6454: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6455: LD_ADDR_VAR 0 3
6459: PUSH
6460: LD_INT 11
6462: PUSH
6463: LD_INT 12
6465: PUSH
6466: LD_INT 13
6468: PUSH
6469: LD_INT 14
6471: PUSH
6472: EMPTY
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: ST_TO_ADDR
6478: GO 7021
6480: LD_INT 24
6482: DOUBLE
6483: EQUAL
6484: IFTRUE 6488
6486: GO 6514
6488: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6489: LD_ADDR_VAR 0 3
6493: PUSH
6494: LD_INT 11
6496: PUSH
6497: LD_INT 12
6499: PUSH
6500: LD_INT 13
6502: PUSH
6503: LD_INT 14
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: ST_TO_ADDR
6512: GO 7021
6514: LD_INT 30
6516: DOUBLE
6517: EQUAL
6518: IFTRUE 6522
6520: GO 6548
6522: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6523: LD_ADDR_VAR 0 3
6527: PUSH
6528: LD_INT 11
6530: PUSH
6531: LD_INT 12
6533: PUSH
6534: LD_INT 13
6536: PUSH
6537: LD_INT 14
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: ST_TO_ADDR
6546: GO 7021
6548: LD_INT 25
6550: DOUBLE
6551: EQUAL
6552: IFTRUE 6556
6554: GO 6574
6556: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6557: LD_ADDR_VAR 0 3
6561: PUSH
6562: LD_INT 13
6564: PUSH
6565: LD_INT 14
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: ST_TO_ADDR
6572: GO 7021
6574: LD_INT 27
6576: DOUBLE
6577: EQUAL
6578: IFTRUE 6582
6580: GO 6600
6582: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6583: LD_ADDR_VAR 0 3
6587: PUSH
6588: LD_INT 13
6590: PUSH
6591: LD_INT 14
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: ST_TO_ADDR
6598: GO 7021
6600: LD_INT 28
6602: DOUBLE
6603: EQUAL
6604: IFTRUE 6608
6606: GO 6626
6608: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6609: LD_ADDR_VAR 0 3
6613: PUSH
6614: LD_INT 13
6616: PUSH
6617: LD_INT 14
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: ST_TO_ADDR
6624: GO 7021
6626: LD_INT 29
6628: DOUBLE
6629: EQUAL
6630: IFTRUE 6634
6632: GO 6652
6634: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6635: LD_ADDR_VAR 0 3
6639: PUSH
6640: LD_INT 13
6642: PUSH
6643: LD_INT 14
6645: PUSH
6646: EMPTY
6647: LIST
6648: LIST
6649: ST_TO_ADDR
6650: GO 7021
6652: LD_INT 31
6654: DOUBLE
6655: EQUAL
6656: IFTRUE 6660
6658: GO 6678
6660: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6661: LD_ADDR_VAR 0 3
6665: PUSH
6666: LD_INT 13
6668: PUSH
6669: LD_INT 14
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: ST_TO_ADDR
6676: GO 7021
6678: LD_INT 26
6680: DOUBLE
6681: EQUAL
6682: IFTRUE 6686
6684: GO 6704
6686: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6687: LD_ADDR_VAR 0 3
6691: PUSH
6692: LD_INT 13
6694: PUSH
6695: LD_INT 14
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: ST_TO_ADDR
6702: GO 7021
6704: LD_INT 42
6706: DOUBLE
6707: EQUAL
6708: IFTRUE 6712
6710: GO 6738
6712: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6713: LD_ADDR_VAR 0 3
6717: PUSH
6718: LD_INT 21
6720: PUSH
6721: LD_INT 22
6723: PUSH
6724: LD_INT 23
6726: PUSH
6727: LD_INT 24
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: ST_TO_ADDR
6736: GO 7021
6738: LD_INT 43
6740: DOUBLE
6741: EQUAL
6742: IFTRUE 6746
6744: GO 6772
6746: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6747: LD_ADDR_VAR 0 3
6751: PUSH
6752: LD_INT 21
6754: PUSH
6755: LD_INT 22
6757: PUSH
6758: LD_INT 23
6760: PUSH
6761: LD_INT 24
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: ST_TO_ADDR
6770: GO 7021
6772: LD_INT 44
6774: DOUBLE
6775: EQUAL
6776: IFTRUE 6780
6778: GO 6806
6780: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
6781: LD_ADDR_VAR 0 3
6785: PUSH
6786: LD_INT 21
6788: PUSH
6789: LD_INT 22
6791: PUSH
6792: LD_INT 23
6794: PUSH
6795: LD_INT 24
6797: PUSH
6798: EMPTY
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: ST_TO_ADDR
6804: GO 7021
6806: LD_INT 45
6808: DOUBLE
6809: EQUAL
6810: IFTRUE 6814
6812: GO 6840
6814: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
6815: LD_ADDR_VAR 0 3
6819: PUSH
6820: LD_INT 21
6822: PUSH
6823: LD_INT 22
6825: PUSH
6826: LD_INT 23
6828: PUSH
6829: LD_INT 24
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: ST_TO_ADDR
6838: GO 7021
6840: LD_INT 49
6842: DOUBLE
6843: EQUAL
6844: IFTRUE 6848
6846: GO 6874
6848: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
6849: LD_ADDR_VAR 0 3
6853: PUSH
6854: LD_INT 21
6856: PUSH
6857: LD_INT 22
6859: PUSH
6860: LD_INT 23
6862: PUSH
6863: LD_INT 24
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: ST_TO_ADDR
6872: GO 7021
6874: LD_INT 51
6876: DOUBLE
6877: EQUAL
6878: IFTRUE 6882
6880: GO 6908
6882: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
6883: LD_ADDR_VAR 0 3
6887: PUSH
6888: LD_INT 21
6890: PUSH
6891: LD_INT 22
6893: PUSH
6894: LD_INT 23
6896: PUSH
6897: LD_INT 24
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: ST_TO_ADDR
6906: GO 7021
6908: LD_INT 52
6910: DOUBLE
6911: EQUAL
6912: IFTRUE 6916
6914: GO 6942
6916: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
6917: LD_ADDR_VAR 0 3
6921: PUSH
6922: LD_INT 21
6924: PUSH
6925: LD_INT 22
6927: PUSH
6928: LD_INT 23
6930: PUSH
6931: LD_INT 24
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: ST_TO_ADDR
6940: GO 7021
6942: LD_INT 53
6944: DOUBLE
6945: EQUAL
6946: IFTRUE 6950
6948: GO 6968
6950: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
6951: LD_ADDR_VAR 0 3
6955: PUSH
6956: LD_INT 23
6958: PUSH
6959: LD_INT 24
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: ST_TO_ADDR
6966: GO 7021
6968: LD_INT 46
6970: DOUBLE
6971: EQUAL
6972: IFTRUE 6976
6974: GO 6994
6976: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
6977: LD_ADDR_VAR 0 3
6981: PUSH
6982: LD_INT 23
6984: PUSH
6985: LD_INT 24
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: ST_TO_ADDR
6992: GO 7021
6994: LD_INT 47
6996: DOUBLE
6997: EQUAL
6998: IFTRUE 7002
7000: GO 7020
7002: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7003: LD_ADDR_VAR 0 3
7007: PUSH
7008: LD_INT 23
7010: PUSH
7011: LD_INT 24
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: ST_TO_ADDR
7018: GO 7021
7020: POP
// result := ( chassis in result ) ;
7021: LD_ADDR_VAR 0 3
7025: PUSH
7026: LD_VAR 0 1
7030: PUSH
7031: LD_VAR 0 3
7035: IN
7036: ST_TO_ADDR
// end ;
7037: LD_VAR 0 3
7041: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7042: LD_INT 0
7044: PPUSH
7045: PPUSH
7046: PPUSH
7047: PPUSH
7048: PPUSH
7049: PPUSH
7050: PPUSH
// result := array ;
7051: LD_ADDR_VAR 0 5
7055: PUSH
7056: LD_VAR 0 1
7060: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7061: LD_VAR 0 1
7065: NOT
7066: PUSH
7067: LD_VAR 0 2
7071: NOT
7072: OR
7073: PUSH
7074: LD_VAR 0 3
7078: NOT
7079: OR
7080: PUSH
7081: LD_VAR 0 2
7085: PUSH
7086: LD_VAR 0 1
7090: GREATER
7091: OR
7092: PUSH
7093: LD_VAR 0 3
7097: PUSH
7098: LD_VAR 0 1
7102: GREATER
7103: OR
7104: IFFALSE 7108
// exit ;
7106: GO 7404
// if direction then
7108: LD_VAR 0 4
7112: IFFALSE 7176
// begin d := 1 ;
7114: LD_ADDR_VAR 0 9
7118: PUSH
7119: LD_INT 1
7121: ST_TO_ADDR
// if i_from > i_to then
7122: LD_VAR 0 2
7126: PUSH
7127: LD_VAR 0 3
7131: GREATER
7132: IFFALSE 7158
// length := ( array - i_from ) + i_to else
7134: LD_ADDR_VAR 0 11
7138: PUSH
7139: LD_VAR 0 1
7143: PUSH
7144: LD_VAR 0 2
7148: MINUS
7149: PUSH
7150: LD_VAR 0 3
7154: PLUS
7155: ST_TO_ADDR
7156: GO 7174
// length := i_to - i_from ;
7158: LD_ADDR_VAR 0 11
7162: PUSH
7163: LD_VAR 0 3
7167: PUSH
7168: LD_VAR 0 2
7172: MINUS
7173: ST_TO_ADDR
// end else
7174: GO 7237
// begin d := - 1 ;
7176: LD_ADDR_VAR 0 9
7180: PUSH
7181: LD_INT 1
7183: NEG
7184: ST_TO_ADDR
// if i_from > i_to then
7185: LD_VAR 0 2
7189: PUSH
7190: LD_VAR 0 3
7194: GREATER
7195: IFFALSE 7215
// length := i_from - i_to else
7197: LD_ADDR_VAR 0 11
7201: PUSH
7202: LD_VAR 0 2
7206: PUSH
7207: LD_VAR 0 3
7211: MINUS
7212: ST_TO_ADDR
7213: GO 7237
// length := ( array - i_to ) + i_from ;
7215: LD_ADDR_VAR 0 11
7219: PUSH
7220: LD_VAR 0 1
7224: PUSH
7225: LD_VAR 0 3
7229: MINUS
7230: PUSH
7231: LD_VAR 0 2
7235: PLUS
7236: ST_TO_ADDR
// end ; if not length then
7237: LD_VAR 0 11
7241: NOT
7242: IFFALSE 7246
// exit ;
7244: GO 7404
// tmp := array ;
7246: LD_ADDR_VAR 0 10
7250: PUSH
7251: LD_VAR 0 1
7255: ST_TO_ADDR
// for i = 1 to length do
7256: LD_ADDR_VAR 0 6
7260: PUSH
7261: DOUBLE
7262: LD_INT 1
7264: DEC
7265: ST_TO_ADDR
7266: LD_VAR 0 11
7270: PUSH
7271: FOR_TO
7272: IFFALSE 7392
// begin for j = 1 to array do
7274: LD_ADDR_VAR 0 7
7278: PUSH
7279: DOUBLE
7280: LD_INT 1
7282: DEC
7283: ST_TO_ADDR
7284: LD_VAR 0 1
7288: PUSH
7289: FOR_TO
7290: IFFALSE 7378
// begin k := j + d ;
7292: LD_ADDR_VAR 0 8
7296: PUSH
7297: LD_VAR 0 7
7301: PUSH
7302: LD_VAR 0 9
7306: PLUS
7307: ST_TO_ADDR
// if k > array then
7308: LD_VAR 0 8
7312: PUSH
7313: LD_VAR 0 1
7317: GREATER
7318: IFFALSE 7328
// k := 1 ;
7320: LD_ADDR_VAR 0 8
7324: PUSH
7325: LD_INT 1
7327: ST_TO_ADDR
// if not k then
7328: LD_VAR 0 8
7332: NOT
7333: IFFALSE 7345
// k := array ;
7335: LD_ADDR_VAR 0 8
7339: PUSH
7340: LD_VAR 0 1
7344: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7345: LD_ADDR_VAR 0 10
7349: PUSH
7350: LD_VAR 0 10
7354: PPUSH
7355: LD_VAR 0 8
7359: PPUSH
7360: LD_VAR 0 1
7364: PUSH
7365: LD_VAR 0 7
7369: ARRAY
7370: PPUSH
7371: CALL_OW 1
7375: ST_TO_ADDR
// end ;
7376: GO 7289
7378: POP
7379: POP
// array := tmp ;
7380: LD_ADDR_VAR 0 1
7384: PUSH
7385: LD_VAR 0 10
7389: ST_TO_ADDR
// end ;
7390: GO 7271
7392: POP
7393: POP
// result := array ;
7394: LD_ADDR_VAR 0 5
7398: PUSH
7399: LD_VAR 0 1
7403: ST_TO_ADDR
// end ;
7404: LD_VAR 0 5
7408: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7409: LD_INT 0
7411: PPUSH
7412: PPUSH
// result := 0 ;
7413: LD_ADDR_VAR 0 3
7417: PUSH
7418: LD_INT 0
7420: ST_TO_ADDR
// if not array or not value in array then
7421: LD_VAR 0 1
7425: NOT
7426: PUSH
7427: LD_VAR 0 2
7431: PUSH
7432: LD_VAR 0 1
7436: IN
7437: NOT
7438: OR
7439: IFFALSE 7443
// exit ;
7441: GO 7497
// for i = 1 to array do
7443: LD_ADDR_VAR 0 4
7447: PUSH
7448: DOUBLE
7449: LD_INT 1
7451: DEC
7452: ST_TO_ADDR
7453: LD_VAR 0 1
7457: PUSH
7458: FOR_TO
7459: IFFALSE 7495
// if value = array [ i ] then
7461: LD_VAR 0 2
7465: PUSH
7466: LD_VAR 0 1
7470: PUSH
7471: LD_VAR 0 4
7475: ARRAY
7476: EQUAL
7477: IFFALSE 7493
// begin result := i ;
7479: LD_ADDR_VAR 0 3
7483: PUSH
7484: LD_VAR 0 4
7488: ST_TO_ADDR
// exit ;
7489: POP
7490: POP
7491: GO 7497
// end ;
7493: GO 7458
7495: POP
7496: POP
// end ;
7497: LD_VAR 0 3
7501: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7502: LD_INT 0
7504: PPUSH
// vc_chassis := chassis ;
7505: LD_ADDR_OWVAR 37
7509: PUSH
7510: LD_VAR 0 1
7514: ST_TO_ADDR
// vc_engine := engine ;
7515: LD_ADDR_OWVAR 39
7519: PUSH
7520: LD_VAR 0 2
7524: ST_TO_ADDR
// vc_control := control ;
7525: LD_ADDR_OWVAR 38
7529: PUSH
7530: LD_VAR 0 3
7534: ST_TO_ADDR
// vc_weapon := weapon ;
7535: LD_ADDR_OWVAR 40
7539: PUSH
7540: LD_VAR 0 4
7544: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7545: LD_ADDR_OWVAR 41
7549: PUSH
7550: LD_VAR 0 5
7554: ST_TO_ADDR
// end ;
7555: LD_VAR 0 6
7559: RET
// export function WantPlant ( unit ) ; var task ; begin
7560: LD_INT 0
7562: PPUSH
7563: PPUSH
// result := false ;
7564: LD_ADDR_VAR 0 2
7568: PUSH
7569: LD_INT 0
7571: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7572: LD_ADDR_VAR 0 3
7576: PUSH
7577: LD_VAR 0 1
7581: PPUSH
7582: CALL_OW 437
7586: ST_TO_ADDR
// if task then
7587: LD_VAR 0 3
7591: IFFALSE 7619
// if task [ 1 ] [ 1 ] = p then
7593: LD_VAR 0 3
7597: PUSH
7598: LD_INT 1
7600: ARRAY
7601: PUSH
7602: LD_INT 1
7604: ARRAY
7605: PUSH
7606: LD_STRING p
7608: EQUAL
7609: IFFALSE 7619
// result := true ;
7611: LD_ADDR_VAR 0 2
7615: PUSH
7616: LD_INT 1
7618: ST_TO_ADDR
// end ;
7619: LD_VAR 0 2
7623: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7624: LD_INT 0
7626: PPUSH
7627: PPUSH
7628: PPUSH
7629: PPUSH
// if pos < 1 then
7630: LD_VAR 0 2
7634: PUSH
7635: LD_INT 1
7637: LESS
7638: IFFALSE 7642
// exit ;
7640: GO 7945
// if pos = 1 then
7642: LD_VAR 0 2
7646: PUSH
7647: LD_INT 1
7649: EQUAL
7650: IFFALSE 7683
// result := Replace ( arr , pos [ 1 ] , value ) else
7652: LD_ADDR_VAR 0 4
7656: PUSH
7657: LD_VAR 0 1
7661: PPUSH
7662: LD_VAR 0 2
7666: PUSH
7667: LD_INT 1
7669: ARRAY
7670: PPUSH
7671: LD_VAR 0 3
7675: PPUSH
7676: CALL_OW 1
7680: ST_TO_ADDR
7681: GO 7945
// begin tmp := arr ;
7683: LD_ADDR_VAR 0 6
7687: PUSH
7688: LD_VAR 0 1
7692: ST_TO_ADDR
// s_arr := [ tmp ] ;
7693: LD_ADDR_VAR 0 7
7697: PUSH
7698: LD_VAR 0 6
7702: PUSH
7703: EMPTY
7704: LIST
7705: ST_TO_ADDR
// for i = 1 to pos - 1 do
7706: LD_ADDR_VAR 0 5
7710: PUSH
7711: DOUBLE
7712: LD_INT 1
7714: DEC
7715: ST_TO_ADDR
7716: LD_VAR 0 2
7720: PUSH
7721: LD_INT 1
7723: MINUS
7724: PUSH
7725: FOR_TO
7726: IFFALSE 7771
// begin tmp := tmp [ pos [ i ] ] ;
7728: LD_ADDR_VAR 0 6
7732: PUSH
7733: LD_VAR 0 6
7737: PUSH
7738: LD_VAR 0 2
7742: PUSH
7743: LD_VAR 0 5
7747: ARRAY
7748: ARRAY
7749: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7750: LD_ADDR_VAR 0 7
7754: PUSH
7755: LD_VAR 0 7
7759: PUSH
7760: LD_VAR 0 6
7764: PUSH
7765: EMPTY
7766: LIST
7767: ADD
7768: ST_TO_ADDR
// end ;
7769: GO 7725
7771: POP
7772: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7773: LD_ADDR_VAR 0 6
7777: PUSH
7778: LD_VAR 0 6
7782: PPUSH
7783: LD_VAR 0 2
7787: PUSH
7788: LD_VAR 0 2
7792: ARRAY
7793: PPUSH
7794: LD_VAR 0 3
7798: PPUSH
7799: CALL_OW 1
7803: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
7804: LD_ADDR_VAR 0 7
7808: PUSH
7809: LD_VAR 0 7
7813: PPUSH
7814: LD_VAR 0 7
7818: PPUSH
7819: LD_VAR 0 6
7823: PPUSH
7824: CALL_OW 1
7828: ST_TO_ADDR
// for i = s_arr downto 2 do
7829: LD_ADDR_VAR 0 5
7833: PUSH
7834: DOUBLE
7835: LD_VAR 0 7
7839: INC
7840: ST_TO_ADDR
7841: LD_INT 2
7843: PUSH
7844: FOR_DOWNTO
7845: IFFALSE 7929
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
7847: LD_ADDR_VAR 0 6
7851: PUSH
7852: LD_VAR 0 7
7856: PUSH
7857: LD_VAR 0 5
7861: PUSH
7862: LD_INT 1
7864: MINUS
7865: ARRAY
7866: PPUSH
7867: LD_VAR 0 2
7871: PUSH
7872: LD_VAR 0 5
7876: PUSH
7877: LD_INT 1
7879: MINUS
7880: ARRAY
7881: PPUSH
7882: LD_VAR 0 7
7886: PUSH
7887: LD_VAR 0 5
7891: ARRAY
7892: PPUSH
7893: CALL_OW 1
7897: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
7898: LD_ADDR_VAR 0 7
7902: PUSH
7903: LD_VAR 0 7
7907: PPUSH
7908: LD_VAR 0 5
7912: PUSH
7913: LD_INT 1
7915: MINUS
7916: PPUSH
7917: LD_VAR 0 6
7921: PPUSH
7922: CALL_OW 1
7926: ST_TO_ADDR
// end ;
7927: GO 7844
7929: POP
7930: POP
// result := s_arr [ 1 ] ;
7931: LD_ADDR_VAR 0 4
7935: PUSH
7936: LD_VAR 0 7
7940: PUSH
7941: LD_INT 1
7943: ARRAY
7944: ST_TO_ADDR
// end ; end ;
7945: LD_VAR 0 4
7949: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
7950: LD_INT 0
7952: PPUSH
7953: PPUSH
// if not list then
7954: LD_VAR 0 1
7958: NOT
7959: IFFALSE 7963
// exit ;
7961: GO 8054
// i := list [ pos1 ] ;
7963: LD_ADDR_VAR 0 5
7967: PUSH
7968: LD_VAR 0 1
7972: PUSH
7973: LD_VAR 0 2
7977: ARRAY
7978: ST_TO_ADDR
// if not i then
7979: LD_VAR 0 5
7983: NOT
7984: IFFALSE 7988
// exit ;
7986: GO 8054
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
7988: LD_ADDR_VAR 0 1
7992: PUSH
7993: LD_VAR 0 1
7997: PPUSH
7998: LD_VAR 0 2
8002: PPUSH
8003: LD_VAR 0 1
8007: PUSH
8008: LD_VAR 0 3
8012: ARRAY
8013: PPUSH
8014: CALL_OW 1
8018: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8019: LD_ADDR_VAR 0 1
8023: PUSH
8024: LD_VAR 0 1
8028: PPUSH
8029: LD_VAR 0 3
8033: PPUSH
8034: LD_VAR 0 5
8038: PPUSH
8039: CALL_OW 1
8043: ST_TO_ADDR
// result := list ;
8044: LD_ADDR_VAR 0 4
8048: PUSH
8049: LD_VAR 0 1
8053: ST_TO_ADDR
// end ;
8054: LD_VAR 0 4
8058: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8059: LD_INT 0
8061: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8062: LD_ADDR_VAR 0 5
8066: PUSH
8067: LD_VAR 0 1
8071: PPUSH
8072: CALL_OW 250
8076: PPUSH
8077: LD_VAR 0 1
8081: PPUSH
8082: CALL_OW 251
8086: PPUSH
8087: LD_VAR 0 2
8091: PPUSH
8092: LD_VAR 0 3
8096: PPUSH
8097: LD_VAR 0 4
8101: PPUSH
8102: CALL 8112 0 5
8106: ST_TO_ADDR
// end ;
8107: LD_VAR 0 5
8111: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8112: LD_INT 0
8114: PPUSH
8115: PPUSH
8116: PPUSH
8117: PPUSH
// if not list then
8118: LD_VAR 0 3
8122: NOT
8123: IFFALSE 8127
// exit ;
8125: GO 8515
// result := [ ] ;
8127: LD_ADDR_VAR 0 6
8131: PUSH
8132: EMPTY
8133: ST_TO_ADDR
// for i in list do
8134: LD_ADDR_VAR 0 7
8138: PUSH
8139: LD_VAR 0 3
8143: PUSH
8144: FOR_IN
8145: IFFALSE 8347
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8147: LD_ADDR_VAR 0 9
8151: PUSH
8152: LD_VAR 0 7
8156: PPUSH
8157: LD_VAR 0 1
8161: PPUSH
8162: LD_VAR 0 2
8166: PPUSH
8167: CALL_OW 297
8171: ST_TO_ADDR
// if not result then
8172: LD_VAR 0 6
8176: NOT
8177: IFFALSE 8203
// result := [ [ i , tmp ] ] else
8179: LD_ADDR_VAR 0 6
8183: PUSH
8184: LD_VAR 0 7
8188: PUSH
8189: LD_VAR 0 9
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: PUSH
8198: EMPTY
8199: LIST
8200: ST_TO_ADDR
8201: GO 8345
// begin if result [ result ] [ 2 ] < tmp then
8203: LD_VAR 0 6
8207: PUSH
8208: LD_VAR 0 6
8212: ARRAY
8213: PUSH
8214: LD_INT 2
8216: ARRAY
8217: PUSH
8218: LD_VAR 0 9
8222: LESS
8223: IFFALSE 8265
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8225: LD_ADDR_VAR 0 6
8229: PUSH
8230: LD_VAR 0 6
8234: PPUSH
8235: LD_VAR 0 6
8239: PUSH
8240: LD_INT 1
8242: PLUS
8243: PPUSH
8244: LD_VAR 0 7
8248: PUSH
8249: LD_VAR 0 9
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PPUSH
8258: CALL_OW 2
8262: ST_TO_ADDR
8263: GO 8345
// for j = 1 to result do
8265: LD_ADDR_VAR 0 8
8269: PUSH
8270: DOUBLE
8271: LD_INT 1
8273: DEC
8274: ST_TO_ADDR
8275: LD_VAR 0 6
8279: PUSH
8280: FOR_TO
8281: IFFALSE 8343
// begin if tmp < result [ j ] [ 2 ] then
8283: LD_VAR 0 9
8287: PUSH
8288: LD_VAR 0 6
8292: PUSH
8293: LD_VAR 0 8
8297: ARRAY
8298: PUSH
8299: LD_INT 2
8301: ARRAY
8302: LESS
8303: IFFALSE 8341
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8305: LD_ADDR_VAR 0 6
8309: PUSH
8310: LD_VAR 0 6
8314: PPUSH
8315: LD_VAR 0 8
8319: PPUSH
8320: LD_VAR 0 7
8324: PUSH
8325: LD_VAR 0 9
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: PPUSH
8334: CALL_OW 2
8338: ST_TO_ADDR
// break ;
8339: GO 8343
// end ; end ;
8341: GO 8280
8343: POP
8344: POP
// end ; end ;
8345: GO 8144
8347: POP
8348: POP
// if result and not asc then
8349: LD_VAR 0 6
8353: PUSH
8354: LD_VAR 0 4
8358: NOT
8359: AND
8360: IFFALSE 8435
// begin tmp := result ;
8362: LD_ADDR_VAR 0 9
8366: PUSH
8367: LD_VAR 0 6
8371: ST_TO_ADDR
// for i = tmp downto 1 do
8372: LD_ADDR_VAR 0 7
8376: PUSH
8377: DOUBLE
8378: LD_VAR 0 9
8382: INC
8383: ST_TO_ADDR
8384: LD_INT 1
8386: PUSH
8387: FOR_DOWNTO
8388: IFFALSE 8433
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8390: LD_ADDR_VAR 0 6
8394: PUSH
8395: LD_VAR 0 6
8399: PPUSH
8400: LD_VAR 0 9
8404: PUSH
8405: LD_VAR 0 7
8409: MINUS
8410: PUSH
8411: LD_INT 1
8413: PLUS
8414: PPUSH
8415: LD_VAR 0 9
8419: PUSH
8420: LD_VAR 0 7
8424: ARRAY
8425: PPUSH
8426: CALL_OW 1
8430: ST_TO_ADDR
8431: GO 8387
8433: POP
8434: POP
// end ; tmp := [ ] ;
8435: LD_ADDR_VAR 0 9
8439: PUSH
8440: EMPTY
8441: ST_TO_ADDR
// if mode then
8442: LD_VAR 0 5
8446: IFFALSE 8515
// begin for i = 1 to result do
8448: LD_ADDR_VAR 0 7
8452: PUSH
8453: DOUBLE
8454: LD_INT 1
8456: DEC
8457: ST_TO_ADDR
8458: LD_VAR 0 6
8462: PUSH
8463: FOR_TO
8464: IFFALSE 8503
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8466: LD_ADDR_VAR 0 9
8470: PUSH
8471: LD_VAR 0 9
8475: PPUSH
8476: LD_VAR 0 7
8480: PPUSH
8481: LD_VAR 0 6
8485: PUSH
8486: LD_VAR 0 7
8490: ARRAY
8491: PUSH
8492: LD_INT 1
8494: ARRAY
8495: PPUSH
8496: CALL_OW 1
8500: ST_TO_ADDR
8501: GO 8463
8503: POP
8504: POP
// result := tmp ;
8505: LD_ADDR_VAR 0 6
8509: PUSH
8510: LD_VAR 0 9
8514: ST_TO_ADDR
// end ; end ;
8515: LD_VAR 0 6
8519: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8520: LD_INT 0
8522: PPUSH
8523: PPUSH
8524: PPUSH
8525: PPUSH
8526: PPUSH
8527: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8528: LD_ADDR_VAR 0 5
8532: PUSH
8533: LD_INT 0
8535: PUSH
8536: LD_INT 0
8538: PUSH
8539: LD_INT 0
8541: PUSH
8542: EMPTY
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: ST_TO_ADDR
// if not x or not y then
8550: LD_VAR 0 2
8554: NOT
8555: PUSH
8556: LD_VAR 0 3
8560: NOT
8561: OR
8562: IFFALSE 8566
// exit ;
8564: GO 10212
// if not range then
8566: LD_VAR 0 4
8570: NOT
8571: IFFALSE 8581
// range := 10 ;
8573: LD_ADDR_VAR 0 4
8577: PUSH
8578: LD_INT 10
8580: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8581: LD_ADDR_VAR 0 8
8585: PUSH
8586: LD_INT 81
8588: PUSH
8589: LD_VAR 0 1
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PUSH
8598: LD_INT 92
8600: PUSH
8601: LD_VAR 0 2
8605: PUSH
8606: LD_VAR 0 3
8610: PUSH
8611: LD_VAR 0 4
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: PUSH
8622: LD_INT 3
8624: PUSH
8625: LD_INT 21
8627: PUSH
8628: LD_INT 3
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: LIST
8643: PPUSH
8644: CALL_OW 69
8648: ST_TO_ADDR
// if not tmp then
8649: LD_VAR 0 8
8653: NOT
8654: IFFALSE 8658
// exit ;
8656: GO 10212
// for i in tmp do
8658: LD_ADDR_VAR 0 6
8662: PUSH
8663: LD_VAR 0 8
8667: PUSH
8668: FOR_IN
8669: IFFALSE 10187
// begin points := [ 0 , 0 , 0 ] ;
8671: LD_ADDR_VAR 0 9
8675: PUSH
8676: LD_INT 0
8678: PUSH
8679: LD_INT 0
8681: PUSH
8682: LD_INT 0
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: LIST
8689: ST_TO_ADDR
// bpoints := 1 ;
8690: LD_ADDR_VAR 0 10
8694: PUSH
8695: LD_INT 1
8697: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8698: LD_VAR 0 6
8702: PPUSH
8703: CALL_OW 247
8707: PUSH
8708: LD_INT 1
8710: DOUBLE
8711: EQUAL
8712: IFTRUE 8716
8714: GO 9294
8716: POP
// begin if GetClass ( i ) = 1 then
8717: LD_VAR 0 6
8721: PPUSH
8722: CALL_OW 257
8726: PUSH
8727: LD_INT 1
8729: EQUAL
8730: IFFALSE 8751
// points := [ 10 , 5 , 3 ] ;
8732: LD_ADDR_VAR 0 9
8736: PUSH
8737: LD_INT 10
8739: PUSH
8740: LD_INT 5
8742: PUSH
8743: LD_INT 3
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: LIST
8750: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8751: LD_VAR 0 6
8755: PPUSH
8756: CALL_OW 257
8760: PUSH
8761: LD_INT 2
8763: PUSH
8764: LD_INT 3
8766: PUSH
8767: LD_INT 4
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: LIST
8774: IN
8775: IFFALSE 8796
// points := [ 3 , 2 , 1 ] ;
8777: LD_ADDR_VAR 0 9
8781: PUSH
8782: LD_INT 3
8784: PUSH
8785: LD_INT 2
8787: PUSH
8788: LD_INT 1
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: LIST
8795: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8796: LD_VAR 0 6
8800: PPUSH
8801: CALL_OW 257
8805: PUSH
8806: LD_INT 5
8808: EQUAL
8809: IFFALSE 8830
// points := [ 130 , 5 , 2 ] ;
8811: LD_ADDR_VAR 0 9
8815: PUSH
8816: LD_INT 130
8818: PUSH
8819: LD_INT 5
8821: PUSH
8822: LD_INT 2
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: LIST
8829: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8830: LD_VAR 0 6
8834: PPUSH
8835: CALL_OW 257
8839: PUSH
8840: LD_INT 8
8842: EQUAL
8843: IFFALSE 8864
// points := [ 35 , 35 , 30 ] ;
8845: LD_ADDR_VAR 0 9
8849: PUSH
8850: LD_INT 35
8852: PUSH
8853: LD_INT 35
8855: PUSH
8856: LD_INT 30
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: LIST
8863: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8864: LD_VAR 0 6
8868: PPUSH
8869: CALL_OW 257
8873: PUSH
8874: LD_INT 9
8876: EQUAL
8877: IFFALSE 8898
// points := [ 20 , 55 , 40 ] ;
8879: LD_ADDR_VAR 0 9
8883: PUSH
8884: LD_INT 20
8886: PUSH
8887: LD_INT 55
8889: PUSH
8890: LD_INT 40
8892: PUSH
8893: EMPTY
8894: LIST
8895: LIST
8896: LIST
8897: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8898: LD_VAR 0 6
8902: PPUSH
8903: CALL_OW 257
8907: PUSH
8908: LD_INT 12
8910: PUSH
8911: LD_INT 16
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: IN
8918: IFFALSE 8939
// points := [ 5 , 3 , 2 ] ;
8920: LD_ADDR_VAR 0 9
8924: PUSH
8925: LD_INT 5
8927: PUSH
8928: LD_INT 3
8930: PUSH
8931: LD_INT 2
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: LIST
8938: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8939: LD_VAR 0 6
8943: PPUSH
8944: CALL_OW 257
8948: PUSH
8949: LD_INT 17
8951: EQUAL
8952: IFFALSE 8973
// points := [ 100 , 50 , 75 ] ;
8954: LD_ADDR_VAR 0 9
8958: PUSH
8959: LD_INT 100
8961: PUSH
8962: LD_INT 50
8964: PUSH
8965: LD_INT 75
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: LIST
8972: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8973: LD_VAR 0 6
8977: PPUSH
8978: CALL_OW 257
8982: PUSH
8983: LD_INT 15
8985: EQUAL
8986: IFFALSE 9007
// points := [ 10 , 5 , 3 ] ;
8988: LD_ADDR_VAR 0 9
8992: PUSH
8993: LD_INT 10
8995: PUSH
8996: LD_INT 5
8998: PUSH
8999: LD_INT 3
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: LIST
9006: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9007: LD_VAR 0 6
9011: PPUSH
9012: CALL_OW 257
9016: PUSH
9017: LD_INT 14
9019: EQUAL
9020: IFFALSE 9041
// points := [ 10 , 0 , 0 ] ;
9022: LD_ADDR_VAR 0 9
9026: PUSH
9027: LD_INT 10
9029: PUSH
9030: LD_INT 0
9032: PUSH
9033: LD_INT 0
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: LIST
9040: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9041: LD_VAR 0 6
9045: PPUSH
9046: CALL_OW 257
9050: PUSH
9051: LD_INT 11
9053: EQUAL
9054: IFFALSE 9075
// points := [ 30 , 10 , 5 ] ;
9056: LD_ADDR_VAR 0 9
9060: PUSH
9061: LD_INT 30
9063: PUSH
9064: LD_INT 10
9066: PUSH
9067: LD_INT 5
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: LIST
9074: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9075: LD_VAR 0 1
9079: PPUSH
9080: LD_INT 5
9082: PPUSH
9083: CALL_OW 321
9087: PUSH
9088: LD_INT 2
9090: EQUAL
9091: IFFALSE 9108
// bpoints := bpoints * 1.8 ;
9093: LD_ADDR_VAR 0 10
9097: PUSH
9098: LD_VAR 0 10
9102: PUSH
9103: LD_REAL  1.80000000000000E+0000
9106: MUL
9107: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9108: LD_VAR 0 6
9112: PPUSH
9113: CALL_OW 257
9117: PUSH
9118: LD_INT 1
9120: PUSH
9121: LD_INT 2
9123: PUSH
9124: LD_INT 3
9126: PUSH
9127: LD_INT 4
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: IN
9136: PUSH
9137: LD_VAR 0 1
9141: PPUSH
9142: LD_INT 51
9144: PPUSH
9145: CALL_OW 321
9149: PUSH
9150: LD_INT 2
9152: EQUAL
9153: AND
9154: IFFALSE 9171
// bpoints := bpoints * 1.2 ;
9156: LD_ADDR_VAR 0 10
9160: PUSH
9161: LD_VAR 0 10
9165: PUSH
9166: LD_REAL  1.20000000000000E+0000
9169: MUL
9170: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9171: LD_VAR 0 6
9175: PPUSH
9176: CALL_OW 257
9180: PUSH
9181: LD_INT 5
9183: PUSH
9184: LD_INT 7
9186: PUSH
9187: LD_INT 9
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: LIST
9194: IN
9195: PUSH
9196: LD_VAR 0 1
9200: PPUSH
9201: LD_INT 52
9203: PPUSH
9204: CALL_OW 321
9208: PUSH
9209: LD_INT 2
9211: EQUAL
9212: AND
9213: IFFALSE 9230
// bpoints := bpoints * 1.5 ;
9215: LD_ADDR_VAR 0 10
9219: PUSH
9220: LD_VAR 0 10
9224: PUSH
9225: LD_REAL  1.50000000000000E+0000
9228: MUL
9229: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9230: LD_VAR 0 1
9234: PPUSH
9235: LD_INT 66
9237: PPUSH
9238: CALL_OW 321
9242: PUSH
9243: LD_INT 2
9245: EQUAL
9246: IFFALSE 9263
// bpoints := bpoints * 1.1 ;
9248: LD_ADDR_VAR 0 10
9252: PUSH
9253: LD_VAR 0 10
9257: PUSH
9258: LD_REAL  1.10000000000000E+0000
9261: MUL
9262: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9263: LD_ADDR_VAR 0 10
9267: PUSH
9268: LD_VAR 0 10
9272: PUSH
9273: LD_VAR 0 6
9277: PPUSH
9278: LD_INT 1
9280: PPUSH
9281: CALL_OW 259
9285: PUSH
9286: LD_REAL  1.15000000000000E+0000
9289: MUL
9290: MUL
9291: ST_TO_ADDR
// end ; unit_vehicle :
9292: GO 10116
9294: LD_INT 2
9296: DOUBLE
9297: EQUAL
9298: IFTRUE 9302
9300: GO 10104
9302: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9303: LD_VAR 0 6
9307: PPUSH
9308: CALL_OW 264
9312: PUSH
9313: LD_INT 2
9315: PUSH
9316: LD_INT 42
9318: PUSH
9319: LD_INT 24
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: LIST
9326: IN
9327: IFFALSE 9348
// points := [ 25 , 5 , 3 ] ;
9329: LD_ADDR_VAR 0 9
9333: PUSH
9334: LD_INT 25
9336: PUSH
9337: LD_INT 5
9339: PUSH
9340: LD_INT 3
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: LIST
9347: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9348: LD_VAR 0 6
9352: PPUSH
9353: CALL_OW 264
9357: PUSH
9358: LD_INT 4
9360: PUSH
9361: LD_INT 43
9363: PUSH
9364: LD_INT 25
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: LIST
9371: IN
9372: IFFALSE 9393
// points := [ 40 , 15 , 5 ] ;
9374: LD_ADDR_VAR 0 9
9378: PUSH
9379: LD_INT 40
9381: PUSH
9382: LD_INT 15
9384: PUSH
9385: LD_INT 5
9387: PUSH
9388: EMPTY
9389: LIST
9390: LIST
9391: LIST
9392: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9393: LD_VAR 0 6
9397: PPUSH
9398: CALL_OW 264
9402: PUSH
9403: LD_INT 3
9405: PUSH
9406: LD_INT 23
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: IN
9413: IFFALSE 9434
// points := [ 7 , 25 , 8 ] ;
9415: LD_ADDR_VAR 0 9
9419: PUSH
9420: LD_INT 7
9422: PUSH
9423: LD_INT 25
9425: PUSH
9426: LD_INT 8
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: LIST
9433: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9434: LD_VAR 0 6
9438: PPUSH
9439: CALL_OW 264
9443: PUSH
9444: LD_INT 5
9446: PUSH
9447: LD_INT 27
9449: PUSH
9450: LD_INT 44
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: LIST
9457: IN
9458: IFFALSE 9479
// points := [ 14 , 50 , 16 ] ;
9460: LD_ADDR_VAR 0 9
9464: PUSH
9465: LD_INT 14
9467: PUSH
9468: LD_INT 50
9470: PUSH
9471: LD_INT 16
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: LIST
9478: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9479: LD_VAR 0 6
9483: PPUSH
9484: CALL_OW 264
9488: PUSH
9489: LD_INT 6
9491: PUSH
9492: LD_INT 46
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: IN
9499: IFFALSE 9520
// points := [ 32 , 120 , 70 ] ;
9501: LD_ADDR_VAR 0 9
9505: PUSH
9506: LD_INT 32
9508: PUSH
9509: LD_INT 120
9511: PUSH
9512: LD_INT 70
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: LIST
9519: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
9520: LD_VAR 0 6
9524: PPUSH
9525: CALL_OW 264
9529: PUSH
9530: LD_INT 7
9532: PUSH
9533: LD_INT 28
9535: PUSH
9536: LD_INT 45
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: LIST
9543: IN
9544: IFFALSE 9565
// points := [ 35 , 20 , 45 ] ;
9546: LD_ADDR_VAR 0 9
9550: PUSH
9551: LD_INT 35
9553: PUSH
9554: LD_INT 20
9556: PUSH
9557: LD_INT 45
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: LIST
9564: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9565: LD_VAR 0 6
9569: PPUSH
9570: CALL_OW 264
9574: PUSH
9575: LD_INT 47
9577: PUSH
9578: EMPTY
9579: LIST
9580: IN
9581: IFFALSE 9602
// points := [ 67 , 45 , 75 ] ;
9583: LD_ADDR_VAR 0 9
9587: PUSH
9588: LD_INT 67
9590: PUSH
9591: LD_INT 45
9593: PUSH
9594: LD_INT 75
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: LIST
9601: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9602: LD_VAR 0 6
9606: PPUSH
9607: CALL_OW 264
9611: PUSH
9612: LD_INT 26
9614: PUSH
9615: EMPTY
9616: LIST
9617: IN
9618: IFFALSE 9639
// points := [ 120 , 30 , 80 ] ;
9620: LD_ADDR_VAR 0 9
9624: PUSH
9625: LD_INT 120
9627: PUSH
9628: LD_INT 30
9630: PUSH
9631: LD_INT 80
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: LIST
9638: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9639: LD_VAR 0 6
9643: PPUSH
9644: CALL_OW 264
9648: PUSH
9649: LD_INT 22
9651: PUSH
9652: EMPTY
9653: LIST
9654: IN
9655: IFFALSE 9676
// points := [ 40 , 1 , 1 ] ;
9657: LD_ADDR_VAR 0 9
9661: PUSH
9662: LD_INT 40
9664: PUSH
9665: LD_INT 1
9667: PUSH
9668: LD_INT 1
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: LIST
9675: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9676: LD_VAR 0 6
9680: PPUSH
9681: CALL_OW 264
9685: PUSH
9686: LD_INT 29
9688: PUSH
9689: EMPTY
9690: LIST
9691: IN
9692: IFFALSE 9713
// points := [ 70 , 200 , 400 ] ;
9694: LD_ADDR_VAR 0 9
9698: PUSH
9699: LD_INT 70
9701: PUSH
9702: LD_INT 200
9704: PUSH
9705: LD_INT 400
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: LIST
9712: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9713: LD_VAR 0 6
9717: PPUSH
9718: CALL_OW 264
9722: PUSH
9723: LD_INT 14
9725: PUSH
9726: LD_INT 53
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: IN
9733: IFFALSE 9754
// points := [ 40 , 10 , 20 ] ;
9735: LD_ADDR_VAR 0 9
9739: PUSH
9740: LD_INT 40
9742: PUSH
9743: LD_INT 10
9745: PUSH
9746: LD_INT 20
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: LIST
9753: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9754: LD_VAR 0 6
9758: PPUSH
9759: CALL_OW 264
9763: PUSH
9764: LD_INT 9
9766: PUSH
9767: EMPTY
9768: LIST
9769: IN
9770: IFFALSE 9791
// points := [ 5 , 70 , 20 ] ;
9772: LD_ADDR_VAR 0 9
9776: PUSH
9777: LD_INT 5
9779: PUSH
9780: LD_INT 70
9782: PUSH
9783: LD_INT 20
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: LIST
9790: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9791: LD_VAR 0 6
9795: PPUSH
9796: CALL_OW 264
9800: PUSH
9801: LD_INT 10
9803: PUSH
9804: EMPTY
9805: LIST
9806: IN
9807: IFFALSE 9828
// points := [ 35 , 110 , 70 ] ;
9809: LD_ADDR_VAR 0 9
9813: PUSH
9814: LD_INT 35
9816: PUSH
9817: LD_INT 110
9819: PUSH
9820: LD_INT 70
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: LIST
9827: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9828: LD_VAR 0 6
9832: PPUSH
9833: CALL_OW 265
9837: PUSH
9838: LD_INT 25
9840: EQUAL
9841: IFFALSE 9862
// points := [ 80 , 65 , 100 ] ;
9843: LD_ADDR_VAR 0 9
9847: PUSH
9848: LD_INT 80
9850: PUSH
9851: LD_INT 65
9853: PUSH
9854: LD_INT 100
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: LIST
9861: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9862: LD_VAR 0 6
9866: PPUSH
9867: CALL_OW 263
9871: PUSH
9872: LD_INT 1
9874: EQUAL
9875: IFFALSE 9910
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9877: LD_ADDR_VAR 0 10
9881: PUSH
9882: LD_VAR 0 10
9886: PUSH
9887: LD_VAR 0 6
9891: PPUSH
9892: CALL_OW 311
9896: PPUSH
9897: LD_INT 3
9899: PPUSH
9900: CALL_OW 259
9904: PUSH
9905: LD_INT 4
9907: MUL
9908: MUL
9909: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9910: LD_VAR 0 6
9914: PPUSH
9915: CALL_OW 263
9919: PUSH
9920: LD_INT 2
9922: EQUAL
9923: IFFALSE 9974
// begin j := IsControledBy ( i ) ;
9925: LD_ADDR_VAR 0 7
9929: PUSH
9930: LD_VAR 0 6
9934: PPUSH
9935: CALL_OW 312
9939: ST_TO_ADDR
// if j then
9940: LD_VAR 0 7
9944: IFFALSE 9974
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9946: LD_ADDR_VAR 0 10
9950: PUSH
9951: LD_VAR 0 10
9955: PUSH
9956: LD_VAR 0 7
9960: PPUSH
9961: LD_INT 3
9963: PPUSH
9964: CALL_OW 259
9968: PUSH
9969: LD_INT 3
9971: MUL
9972: MUL
9973: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9974: LD_VAR 0 6
9978: PPUSH
9979: CALL_OW 264
9983: PUSH
9984: LD_INT 5
9986: PUSH
9987: LD_INT 6
9989: PUSH
9990: LD_INT 46
9992: PUSH
9993: LD_INT 44
9995: PUSH
9996: LD_INT 47
9998: PUSH
9999: LD_INT 45
10001: PUSH
10002: LD_INT 28
10004: PUSH
10005: LD_INT 7
10007: PUSH
10008: LD_INT 27
10010: PUSH
10011: LD_INT 29
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: IN
10026: PUSH
10027: LD_VAR 0 1
10031: PPUSH
10032: LD_INT 52
10034: PPUSH
10035: CALL_OW 321
10039: PUSH
10040: LD_INT 2
10042: EQUAL
10043: AND
10044: IFFALSE 10061
// bpoints := bpoints * 1.2 ;
10046: LD_ADDR_VAR 0 10
10050: PUSH
10051: LD_VAR 0 10
10055: PUSH
10056: LD_REAL  1.20000000000000E+0000
10059: MUL
10060: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10061: LD_VAR 0 6
10065: PPUSH
10066: CALL_OW 264
10070: PUSH
10071: LD_INT 6
10073: PUSH
10074: LD_INT 46
10076: PUSH
10077: LD_INT 47
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: LIST
10084: IN
10085: IFFALSE 10102
// bpoints := bpoints * 1.2 ;
10087: LD_ADDR_VAR 0 10
10091: PUSH
10092: LD_VAR 0 10
10096: PUSH
10097: LD_REAL  1.20000000000000E+0000
10100: MUL
10101: ST_TO_ADDR
// end ; unit_building :
10102: GO 10116
10104: LD_INT 3
10106: DOUBLE
10107: EQUAL
10108: IFTRUE 10112
10110: GO 10115
10112: POP
// ; end ;
10113: GO 10116
10115: POP
// for j = 1 to 3 do
10116: LD_ADDR_VAR 0 7
10120: PUSH
10121: DOUBLE
10122: LD_INT 1
10124: DEC
10125: ST_TO_ADDR
10126: LD_INT 3
10128: PUSH
10129: FOR_TO
10130: IFFALSE 10183
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10132: LD_ADDR_VAR 0 5
10136: PUSH
10137: LD_VAR 0 5
10141: PPUSH
10142: LD_VAR 0 7
10146: PPUSH
10147: LD_VAR 0 5
10151: PUSH
10152: LD_VAR 0 7
10156: ARRAY
10157: PUSH
10158: LD_VAR 0 9
10162: PUSH
10163: LD_VAR 0 7
10167: ARRAY
10168: PUSH
10169: LD_VAR 0 10
10173: MUL
10174: PLUS
10175: PPUSH
10176: CALL_OW 1
10180: ST_TO_ADDR
10181: GO 10129
10183: POP
10184: POP
// end ;
10185: GO 8668
10187: POP
10188: POP
// result := Replace ( result , 4 , tmp ) ;
10189: LD_ADDR_VAR 0 5
10193: PUSH
10194: LD_VAR 0 5
10198: PPUSH
10199: LD_INT 4
10201: PPUSH
10202: LD_VAR 0 8
10206: PPUSH
10207: CALL_OW 1
10211: ST_TO_ADDR
// end ;
10212: LD_VAR 0 5
10216: RET
// export function DangerAtRange ( unit , range ) ; begin
10217: LD_INT 0
10219: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10220: LD_ADDR_VAR 0 3
10224: PUSH
10225: LD_VAR 0 1
10229: PPUSH
10230: CALL_OW 255
10234: PPUSH
10235: LD_VAR 0 1
10239: PPUSH
10240: CALL_OW 250
10244: PPUSH
10245: LD_VAR 0 1
10249: PPUSH
10250: CALL_OW 251
10254: PPUSH
10255: LD_VAR 0 2
10259: PPUSH
10260: CALL 8520 0 4
10264: ST_TO_ADDR
// end ;
10265: LD_VAR 0 3
10269: RET
// export function DangerInArea ( side , area ) ; begin
10270: LD_INT 0
10272: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10273: LD_ADDR_VAR 0 3
10277: PUSH
10278: LD_VAR 0 2
10282: PPUSH
10283: LD_INT 81
10285: PUSH
10286: LD_VAR 0 1
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PPUSH
10295: CALL_OW 70
10299: ST_TO_ADDR
// end ;
10300: LD_VAR 0 3
10304: RET
// export function IsExtension ( b ) ; begin
10305: LD_INT 0
10307: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10308: LD_ADDR_VAR 0 2
10312: PUSH
10313: LD_VAR 0 1
10317: PUSH
10318: LD_INT 23
10320: PUSH
10321: LD_INT 20
10323: PUSH
10324: LD_INT 22
10326: PUSH
10327: LD_INT 17
10329: PUSH
10330: LD_INT 24
10332: PUSH
10333: LD_INT 21
10335: PUSH
10336: LD_INT 19
10338: PUSH
10339: LD_INT 16
10341: PUSH
10342: LD_INT 25
10344: PUSH
10345: LD_INT 18
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: IN
10360: ST_TO_ADDR
// end ;
10361: LD_VAR 0 2
10365: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
10366: LD_INT 0
10368: PPUSH
10369: PPUSH
10370: PPUSH
// result := [ ] ;
10371: LD_ADDR_VAR 0 3
10375: PUSH
10376: EMPTY
10377: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10378: LD_ADDR_VAR 0 4
10382: PUSH
10383: LD_VAR 0 2
10387: PPUSH
10388: LD_INT 21
10390: PUSH
10391: LD_INT 3
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PPUSH
10398: CALL_OW 70
10402: ST_TO_ADDR
// if not tmp then
10403: LD_VAR 0 4
10407: NOT
10408: IFFALSE 10412
// exit ;
10410: GO 10470
// for i in tmp do
10412: LD_ADDR_VAR 0 5
10416: PUSH
10417: LD_VAR 0 4
10421: PUSH
10422: FOR_IN
10423: IFFALSE 10458
// if GetBase ( i ) <> base then
10425: LD_VAR 0 5
10429: PPUSH
10430: CALL_OW 274
10434: PUSH
10435: LD_VAR 0 1
10439: NONEQUAL
10440: IFFALSE 10456
// ComLinkToBase ( base , i ) ;
10442: LD_VAR 0 1
10446: PPUSH
10447: LD_VAR 0 5
10451: PPUSH
10452: CALL_OW 169
10456: GO 10422
10458: POP
10459: POP
// result := tmp ;
10460: LD_ADDR_VAR 0 3
10464: PUSH
10465: LD_VAR 0 4
10469: ST_TO_ADDR
// end ;
10470: LD_VAR 0 3
10474: RET
// export function ComComplete ( unit , b ) ; var i ; begin
10475: LD_INT 0
10477: PPUSH
10478: PPUSH
// if BuildingStatus ( b ) = bs_build then
10479: LD_VAR 0 2
10483: PPUSH
10484: CALL_OW 461
10488: PUSH
10489: LD_INT 1
10491: EQUAL
10492: IFFALSE 10552
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10494: LD_VAR 0 1
10498: PPUSH
10499: LD_STRING h
10501: PUSH
10502: LD_VAR 0 2
10506: PPUSH
10507: CALL_OW 250
10511: PUSH
10512: LD_VAR 0 2
10516: PPUSH
10517: CALL_OW 251
10521: PUSH
10522: LD_VAR 0 2
10526: PUSH
10527: LD_INT 0
10529: PUSH
10530: LD_INT 0
10532: PUSH
10533: LD_INT 0
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: PUSH
10545: EMPTY
10546: LIST
10547: PPUSH
10548: CALL_OW 446
// end ;
10552: LD_VAR 0 3
10556: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10557: LD_INT 0
10559: PPUSH
10560: PPUSH
10561: PPUSH
10562: PPUSH
10563: PPUSH
10564: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
10565: LD_VAR 0 1
10569: NOT
10570: PUSH
10571: LD_VAR 0 1
10575: PPUSH
10576: CALL_OW 263
10580: PUSH
10581: LD_INT 2
10583: EQUAL
10584: NOT
10585: OR
10586: IFFALSE 10590
// exit ;
10588: GO 10906
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10590: LD_ADDR_VAR 0 6
10594: PUSH
10595: LD_INT 22
10597: PUSH
10598: LD_VAR 0 1
10602: PPUSH
10603: CALL_OW 255
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PUSH
10612: LD_INT 2
10614: PUSH
10615: LD_INT 30
10617: PUSH
10618: LD_INT 36
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: PUSH
10625: LD_INT 34
10627: PUSH
10628: LD_INT 31
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: LIST
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PPUSH
10644: CALL_OW 69
10648: ST_TO_ADDR
// if not tmp then
10649: LD_VAR 0 6
10653: NOT
10654: IFFALSE 10658
// exit ;
10656: GO 10906
// result := [ ] ;
10658: LD_ADDR_VAR 0 2
10662: PUSH
10663: EMPTY
10664: ST_TO_ADDR
// for i in tmp do
10665: LD_ADDR_VAR 0 3
10669: PUSH
10670: LD_VAR 0 6
10674: PUSH
10675: FOR_IN
10676: IFFALSE 10747
// begin t := UnitsInside ( i ) ;
10678: LD_ADDR_VAR 0 4
10682: PUSH
10683: LD_VAR 0 3
10687: PPUSH
10688: CALL_OW 313
10692: ST_TO_ADDR
// if t then
10693: LD_VAR 0 4
10697: IFFALSE 10745
// for j in t do
10699: LD_ADDR_VAR 0 7
10703: PUSH
10704: LD_VAR 0 4
10708: PUSH
10709: FOR_IN
10710: IFFALSE 10743
// result := Insert ( result , result + 1 , j ) ;
10712: LD_ADDR_VAR 0 2
10716: PUSH
10717: LD_VAR 0 2
10721: PPUSH
10722: LD_VAR 0 2
10726: PUSH
10727: LD_INT 1
10729: PLUS
10730: PPUSH
10731: LD_VAR 0 7
10735: PPUSH
10736: CALL_OW 2
10740: ST_TO_ADDR
10741: GO 10709
10743: POP
10744: POP
// end ;
10745: GO 10675
10747: POP
10748: POP
// if not result then
10749: LD_VAR 0 2
10753: NOT
10754: IFFALSE 10758
// exit ;
10756: GO 10906
// mech := result [ 1 ] ;
10758: LD_ADDR_VAR 0 5
10762: PUSH
10763: LD_VAR 0 2
10767: PUSH
10768: LD_INT 1
10770: ARRAY
10771: ST_TO_ADDR
// if result > 1 then
10772: LD_VAR 0 2
10776: PUSH
10777: LD_INT 1
10779: GREATER
10780: IFFALSE 10892
// for i = 2 to result do
10782: LD_ADDR_VAR 0 3
10786: PUSH
10787: DOUBLE
10788: LD_INT 2
10790: DEC
10791: ST_TO_ADDR
10792: LD_VAR 0 2
10796: PUSH
10797: FOR_TO
10798: IFFALSE 10890
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10800: LD_ADDR_VAR 0 4
10804: PUSH
10805: LD_VAR 0 2
10809: PUSH
10810: LD_VAR 0 3
10814: ARRAY
10815: PPUSH
10816: LD_INT 3
10818: PPUSH
10819: CALL_OW 259
10823: PUSH
10824: LD_VAR 0 2
10828: PUSH
10829: LD_VAR 0 3
10833: ARRAY
10834: PPUSH
10835: CALL_OW 432
10839: MINUS
10840: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10841: LD_VAR 0 4
10845: PUSH
10846: LD_VAR 0 5
10850: PPUSH
10851: LD_INT 3
10853: PPUSH
10854: CALL_OW 259
10858: PUSH
10859: LD_VAR 0 5
10863: PPUSH
10864: CALL_OW 432
10868: MINUS
10869: GREATEREQUAL
10870: IFFALSE 10888
// mech := result [ i ] ;
10872: LD_ADDR_VAR 0 5
10876: PUSH
10877: LD_VAR 0 2
10881: PUSH
10882: LD_VAR 0 3
10886: ARRAY
10887: ST_TO_ADDR
// end ;
10888: GO 10797
10890: POP
10891: POP
// ComLinkTo ( vehicle , mech ) ;
10892: LD_VAR 0 1
10896: PPUSH
10897: LD_VAR 0 5
10901: PPUSH
10902: CALL_OW 135
// end ;
10906: LD_VAR 0 2
10910: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10911: LD_INT 0
10913: PPUSH
10914: PPUSH
10915: PPUSH
10916: PPUSH
10917: PPUSH
10918: PPUSH
10919: PPUSH
10920: PPUSH
10921: PPUSH
10922: PPUSH
10923: PPUSH
10924: PPUSH
10925: PPUSH
// result := [ ] ;
10926: LD_ADDR_VAR 0 7
10930: PUSH
10931: EMPTY
10932: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10933: LD_VAR 0 1
10937: PPUSH
10938: CALL_OW 266
10942: PUSH
10943: LD_INT 0
10945: PUSH
10946: LD_INT 1
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: IN
10953: NOT
10954: IFFALSE 10958
// exit ;
10956: GO 12589
// if name then
10958: LD_VAR 0 3
10962: IFFALSE 10978
// SetBName ( base_dep , name ) ;
10964: LD_VAR 0 1
10968: PPUSH
10969: LD_VAR 0 3
10973: PPUSH
10974: CALL_OW 500
// base := GetBase ( base_dep ) ;
10978: LD_ADDR_VAR 0 15
10982: PUSH
10983: LD_VAR 0 1
10987: PPUSH
10988: CALL_OW 274
10992: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10993: LD_ADDR_VAR 0 16
10997: PUSH
10998: LD_VAR 0 1
11002: PPUSH
11003: CALL_OW 255
11007: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11008: LD_ADDR_VAR 0 17
11012: PUSH
11013: LD_VAR 0 1
11017: PPUSH
11018: CALL_OW 248
11022: ST_TO_ADDR
// if sources then
11023: LD_VAR 0 5
11027: IFFALSE 11074
// for i = 1 to 3 do
11029: LD_ADDR_VAR 0 8
11033: PUSH
11034: DOUBLE
11035: LD_INT 1
11037: DEC
11038: ST_TO_ADDR
11039: LD_INT 3
11041: PUSH
11042: FOR_TO
11043: IFFALSE 11072
// AddResourceType ( base , i , sources [ i ] ) ;
11045: LD_VAR 0 15
11049: PPUSH
11050: LD_VAR 0 8
11054: PPUSH
11055: LD_VAR 0 5
11059: PUSH
11060: LD_VAR 0 8
11064: ARRAY
11065: PPUSH
11066: CALL_OW 276
11070: GO 11042
11072: POP
11073: POP
// buildings := GetBaseBuildings ( base , area ) ;
11074: LD_ADDR_VAR 0 18
11078: PUSH
11079: LD_VAR 0 15
11083: PPUSH
11084: LD_VAR 0 2
11088: PPUSH
11089: CALL 10366 0 2
11093: ST_TO_ADDR
// InitHc ;
11094: CALL_OW 19
// InitUc ;
11098: CALL_OW 18
// uc_side := side ;
11102: LD_ADDR_OWVAR 20
11106: PUSH
11107: LD_VAR 0 16
11111: ST_TO_ADDR
// uc_nation := nation ;
11112: LD_ADDR_OWVAR 21
11116: PUSH
11117: LD_VAR 0 17
11121: ST_TO_ADDR
// if buildings then
11122: LD_VAR 0 18
11126: IFFALSE 12448
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11128: LD_ADDR_VAR 0 19
11132: PUSH
11133: LD_VAR 0 18
11137: PPUSH
11138: LD_INT 2
11140: PUSH
11141: LD_INT 30
11143: PUSH
11144: LD_INT 29
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 30
11153: PUSH
11154: LD_INT 30
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: LIST
11165: PPUSH
11166: CALL_OW 72
11170: ST_TO_ADDR
// if tmp then
11171: LD_VAR 0 19
11175: IFFALSE 11223
// for i in tmp do
11177: LD_ADDR_VAR 0 8
11181: PUSH
11182: LD_VAR 0 19
11186: PUSH
11187: FOR_IN
11188: IFFALSE 11221
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11190: LD_VAR 0 8
11194: PPUSH
11195: CALL_OW 250
11199: PPUSH
11200: LD_VAR 0 8
11204: PPUSH
11205: CALL_OW 251
11209: PPUSH
11210: LD_VAR 0 16
11214: PPUSH
11215: CALL_OW 441
11219: GO 11187
11221: POP
11222: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11223: LD_VAR 0 18
11227: PPUSH
11228: LD_INT 2
11230: PUSH
11231: LD_INT 30
11233: PUSH
11234: LD_INT 32
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 30
11243: PUSH
11244: LD_INT 33
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: LIST
11255: PPUSH
11256: CALL_OW 72
11260: IFFALSE 11348
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11262: LD_ADDR_VAR 0 8
11266: PUSH
11267: LD_VAR 0 18
11271: PPUSH
11272: LD_INT 2
11274: PUSH
11275: LD_INT 30
11277: PUSH
11278: LD_INT 32
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: LD_INT 30
11287: PUSH
11288: LD_INT 33
11290: PUSH
11291: EMPTY
11292: LIST
11293: LIST
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: LIST
11299: PPUSH
11300: CALL_OW 72
11304: PUSH
11305: FOR_IN
11306: IFFALSE 11346
// begin if not GetBWeapon ( i ) then
11308: LD_VAR 0 8
11312: PPUSH
11313: CALL_OW 269
11317: NOT
11318: IFFALSE 11344
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11320: LD_VAR 0 8
11324: PPUSH
11325: LD_VAR 0 8
11329: PPUSH
11330: LD_VAR 0 2
11334: PPUSH
11335: CALL 12594 0 2
11339: PPUSH
11340: CALL_OW 431
// end ;
11344: GO 11305
11346: POP
11347: POP
// end ; for i = 1 to personel do
11348: LD_ADDR_VAR 0 8
11352: PUSH
11353: DOUBLE
11354: LD_INT 1
11356: DEC
11357: ST_TO_ADDR
11358: LD_VAR 0 6
11362: PUSH
11363: FOR_TO
11364: IFFALSE 12428
// begin if i > 4 then
11366: LD_VAR 0 8
11370: PUSH
11371: LD_INT 4
11373: GREATER
11374: IFFALSE 11378
// break ;
11376: GO 12428
// case i of 1 :
11378: LD_VAR 0 8
11382: PUSH
11383: LD_INT 1
11385: DOUBLE
11386: EQUAL
11387: IFTRUE 11391
11389: GO 11471
11391: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11392: LD_ADDR_VAR 0 12
11396: PUSH
11397: LD_VAR 0 18
11401: PPUSH
11402: LD_INT 22
11404: PUSH
11405: LD_VAR 0 16
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: PUSH
11414: LD_INT 58
11416: PUSH
11417: EMPTY
11418: LIST
11419: PUSH
11420: LD_INT 2
11422: PUSH
11423: LD_INT 30
11425: PUSH
11426: LD_INT 32
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PUSH
11433: LD_INT 30
11435: PUSH
11436: LD_INT 4
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PUSH
11443: LD_INT 30
11445: PUSH
11446: LD_INT 5
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: LIST
11463: PPUSH
11464: CALL_OW 72
11468: ST_TO_ADDR
11469: GO 11693
11471: LD_INT 2
11473: DOUBLE
11474: EQUAL
11475: IFTRUE 11479
11477: GO 11541
11479: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11480: LD_ADDR_VAR 0 12
11484: PUSH
11485: LD_VAR 0 18
11489: PPUSH
11490: LD_INT 22
11492: PUSH
11493: LD_VAR 0 16
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PUSH
11502: LD_INT 2
11504: PUSH
11505: LD_INT 30
11507: PUSH
11508: LD_INT 0
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PUSH
11515: LD_INT 30
11517: PUSH
11518: LD_INT 1
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: LIST
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PPUSH
11534: CALL_OW 72
11538: ST_TO_ADDR
11539: GO 11693
11541: LD_INT 3
11543: DOUBLE
11544: EQUAL
11545: IFTRUE 11549
11547: GO 11611
11549: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11550: LD_ADDR_VAR 0 12
11554: PUSH
11555: LD_VAR 0 18
11559: PPUSH
11560: LD_INT 22
11562: PUSH
11563: LD_VAR 0 16
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PUSH
11572: LD_INT 2
11574: PUSH
11575: LD_INT 30
11577: PUSH
11578: LD_INT 2
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 30
11587: PUSH
11588: LD_INT 3
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: LIST
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: PPUSH
11604: CALL_OW 72
11608: ST_TO_ADDR
11609: GO 11693
11611: LD_INT 4
11613: DOUBLE
11614: EQUAL
11615: IFTRUE 11619
11617: GO 11692
11619: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11620: LD_ADDR_VAR 0 12
11624: PUSH
11625: LD_VAR 0 18
11629: PPUSH
11630: LD_INT 22
11632: PUSH
11633: LD_VAR 0 16
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: PUSH
11642: LD_INT 2
11644: PUSH
11645: LD_INT 30
11647: PUSH
11648: LD_INT 6
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: PUSH
11655: LD_INT 30
11657: PUSH
11658: LD_INT 7
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PUSH
11665: LD_INT 30
11667: PUSH
11668: LD_INT 8
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PPUSH
11685: CALL_OW 72
11689: ST_TO_ADDR
11690: GO 11693
11692: POP
// if i = 1 then
11693: LD_VAR 0 8
11697: PUSH
11698: LD_INT 1
11700: EQUAL
11701: IFFALSE 11812
// begin tmp := [ ] ;
11703: LD_ADDR_VAR 0 19
11707: PUSH
11708: EMPTY
11709: ST_TO_ADDR
// for j in f do
11710: LD_ADDR_VAR 0 9
11714: PUSH
11715: LD_VAR 0 12
11719: PUSH
11720: FOR_IN
11721: IFFALSE 11794
// if GetBType ( j ) = b_bunker then
11723: LD_VAR 0 9
11727: PPUSH
11728: CALL_OW 266
11732: PUSH
11733: LD_INT 32
11735: EQUAL
11736: IFFALSE 11763
// tmp := Insert ( tmp , 1 , j ) else
11738: LD_ADDR_VAR 0 19
11742: PUSH
11743: LD_VAR 0 19
11747: PPUSH
11748: LD_INT 1
11750: PPUSH
11751: LD_VAR 0 9
11755: PPUSH
11756: CALL_OW 2
11760: ST_TO_ADDR
11761: GO 11792
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11763: LD_ADDR_VAR 0 19
11767: PUSH
11768: LD_VAR 0 19
11772: PPUSH
11773: LD_VAR 0 19
11777: PUSH
11778: LD_INT 1
11780: PLUS
11781: PPUSH
11782: LD_VAR 0 9
11786: PPUSH
11787: CALL_OW 2
11791: ST_TO_ADDR
11792: GO 11720
11794: POP
11795: POP
// if tmp then
11796: LD_VAR 0 19
11800: IFFALSE 11812
// f := tmp ;
11802: LD_ADDR_VAR 0 12
11806: PUSH
11807: LD_VAR 0 19
11811: ST_TO_ADDR
// end ; x := personel [ i ] ;
11812: LD_ADDR_VAR 0 13
11816: PUSH
11817: LD_VAR 0 6
11821: PUSH
11822: LD_VAR 0 8
11826: ARRAY
11827: ST_TO_ADDR
// if x = - 1 then
11828: LD_VAR 0 13
11832: PUSH
11833: LD_INT 1
11835: NEG
11836: EQUAL
11837: IFFALSE 12046
// begin for j in f do
11839: LD_ADDR_VAR 0 9
11843: PUSH
11844: LD_VAR 0 12
11848: PUSH
11849: FOR_IN
11850: IFFALSE 12042
// repeat InitHc ;
11852: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11856: LD_VAR 0 9
11860: PPUSH
11861: CALL_OW 266
11865: PUSH
11866: LD_INT 5
11868: EQUAL
11869: IFFALSE 11939
// begin if UnitsInside ( j ) < 3 then
11871: LD_VAR 0 9
11875: PPUSH
11876: CALL_OW 313
11880: PUSH
11881: LD_INT 3
11883: LESS
11884: IFFALSE 11920
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11886: LD_INT 0
11888: PPUSH
11889: LD_INT 5
11891: PUSH
11892: LD_INT 8
11894: PUSH
11895: LD_INT 9
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: LIST
11902: PUSH
11903: LD_VAR 0 17
11907: ARRAY
11908: PPUSH
11909: LD_VAR 0 4
11913: PPUSH
11914: CALL_OW 380
11918: GO 11937
// PrepareHuman ( false , i , skill ) ;
11920: LD_INT 0
11922: PPUSH
11923: LD_VAR 0 8
11927: PPUSH
11928: LD_VAR 0 4
11932: PPUSH
11933: CALL_OW 380
// end else
11937: GO 11956
// PrepareHuman ( false , i , skill ) ;
11939: LD_INT 0
11941: PPUSH
11942: LD_VAR 0 8
11946: PPUSH
11947: LD_VAR 0 4
11951: PPUSH
11952: CALL_OW 380
// un := CreateHuman ;
11956: LD_ADDR_VAR 0 14
11960: PUSH
11961: CALL_OW 44
11965: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11966: LD_ADDR_VAR 0 7
11970: PUSH
11971: LD_VAR 0 7
11975: PPUSH
11976: LD_INT 1
11978: PPUSH
11979: LD_VAR 0 14
11983: PPUSH
11984: CALL_OW 2
11988: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11989: LD_VAR 0 14
11993: PPUSH
11994: LD_VAR 0 9
11998: PPUSH
11999: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12003: LD_VAR 0 9
12007: PPUSH
12008: CALL_OW 313
12012: PUSH
12013: LD_INT 6
12015: EQUAL
12016: PUSH
12017: LD_VAR 0 9
12021: PPUSH
12022: CALL_OW 266
12026: PUSH
12027: LD_INT 32
12029: PUSH
12030: LD_INT 31
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: IN
12037: OR
12038: IFFALSE 11852
12040: GO 11849
12042: POP
12043: POP
// end else
12044: GO 12426
// for j = 1 to x do
12046: LD_ADDR_VAR 0 9
12050: PUSH
12051: DOUBLE
12052: LD_INT 1
12054: DEC
12055: ST_TO_ADDR
12056: LD_VAR 0 13
12060: PUSH
12061: FOR_TO
12062: IFFALSE 12424
// begin InitHc ;
12064: CALL_OW 19
// if not f then
12068: LD_VAR 0 12
12072: NOT
12073: IFFALSE 12162
// begin PrepareHuman ( false , i , skill ) ;
12075: LD_INT 0
12077: PPUSH
12078: LD_VAR 0 8
12082: PPUSH
12083: LD_VAR 0 4
12087: PPUSH
12088: CALL_OW 380
// un := CreateHuman ;
12092: LD_ADDR_VAR 0 14
12096: PUSH
12097: CALL_OW 44
12101: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12102: LD_ADDR_VAR 0 7
12106: PUSH
12107: LD_VAR 0 7
12111: PPUSH
12112: LD_INT 1
12114: PPUSH
12115: LD_VAR 0 14
12119: PPUSH
12120: CALL_OW 2
12124: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12125: LD_VAR 0 14
12129: PPUSH
12130: LD_VAR 0 1
12134: PPUSH
12135: CALL_OW 250
12139: PPUSH
12140: LD_VAR 0 1
12144: PPUSH
12145: CALL_OW 251
12149: PPUSH
12150: LD_INT 10
12152: PPUSH
12153: LD_INT 0
12155: PPUSH
12156: CALL_OW 50
// continue ;
12160: GO 12061
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12162: LD_VAR 0 12
12166: PUSH
12167: LD_INT 1
12169: ARRAY
12170: PPUSH
12171: CALL_OW 313
12175: PUSH
12176: LD_VAR 0 12
12180: PUSH
12181: LD_INT 1
12183: ARRAY
12184: PPUSH
12185: CALL_OW 266
12189: PUSH
12190: LD_INT 32
12192: PUSH
12193: LD_INT 31
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: IN
12200: AND
12201: PUSH
12202: LD_VAR 0 12
12206: PUSH
12207: LD_INT 1
12209: ARRAY
12210: PPUSH
12211: CALL_OW 313
12215: PUSH
12216: LD_INT 6
12218: EQUAL
12219: OR
12220: IFFALSE 12240
// f := Delete ( f , 1 ) ;
12222: LD_ADDR_VAR 0 12
12226: PUSH
12227: LD_VAR 0 12
12231: PPUSH
12232: LD_INT 1
12234: PPUSH
12235: CALL_OW 3
12239: ST_TO_ADDR
// if not f then
12240: LD_VAR 0 12
12244: NOT
12245: IFFALSE 12263
// begin x := x + 2 ;
12247: LD_ADDR_VAR 0 13
12251: PUSH
12252: LD_VAR 0 13
12256: PUSH
12257: LD_INT 2
12259: PLUS
12260: ST_TO_ADDR
// continue ;
12261: GO 12061
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12263: LD_VAR 0 12
12267: PUSH
12268: LD_INT 1
12270: ARRAY
12271: PPUSH
12272: CALL_OW 266
12276: PUSH
12277: LD_INT 5
12279: EQUAL
12280: IFFALSE 12354
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12282: LD_VAR 0 12
12286: PUSH
12287: LD_INT 1
12289: ARRAY
12290: PPUSH
12291: CALL_OW 313
12295: PUSH
12296: LD_INT 3
12298: LESS
12299: IFFALSE 12335
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12301: LD_INT 0
12303: PPUSH
12304: LD_INT 5
12306: PUSH
12307: LD_INT 8
12309: PUSH
12310: LD_INT 9
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: LIST
12317: PUSH
12318: LD_VAR 0 17
12322: ARRAY
12323: PPUSH
12324: LD_VAR 0 4
12328: PPUSH
12329: CALL_OW 380
12333: GO 12352
// PrepareHuman ( false , i , skill ) ;
12335: LD_INT 0
12337: PPUSH
12338: LD_VAR 0 8
12342: PPUSH
12343: LD_VAR 0 4
12347: PPUSH
12348: CALL_OW 380
// end else
12352: GO 12371
// PrepareHuman ( false , i , skill ) ;
12354: LD_INT 0
12356: PPUSH
12357: LD_VAR 0 8
12361: PPUSH
12362: LD_VAR 0 4
12366: PPUSH
12367: CALL_OW 380
// un := CreateHuman ;
12371: LD_ADDR_VAR 0 14
12375: PUSH
12376: CALL_OW 44
12380: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12381: LD_ADDR_VAR 0 7
12385: PUSH
12386: LD_VAR 0 7
12390: PPUSH
12391: LD_INT 1
12393: PPUSH
12394: LD_VAR 0 14
12398: PPUSH
12399: CALL_OW 2
12403: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12404: LD_VAR 0 14
12408: PPUSH
12409: LD_VAR 0 12
12413: PUSH
12414: LD_INT 1
12416: ARRAY
12417: PPUSH
12418: CALL_OW 52
// end ;
12422: GO 12061
12424: POP
12425: POP
// end ;
12426: GO 11363
12428: POP
12429: POP
// result := result ^ buildings ;
12430: LD_ADDR_VAR 0 7
12434: PUSH
12435: LD_VAR 0 7
12439: PUSH
12440: LD_VAR 0 18
12444: ADD
12445: ST_TO_ADDR
// end else
12446: GO 12589
// begin for i = 1 to personel do
12448: LD_ADDR_VAR 0 8
12452: PUSH
12453: DOUBLE
12454: LD_INT 1
12456: DEC
12457: ST_TO_ADDR
12458: LD_VAR 0 6
12462: PUSH
12463: FOR_TO
12464: IFFALSE 12587
// begin if i > 4 then
12466: LD_VAR 0 8
12470: PUSH
12471: LD_INT 4
12473: GREATER
12474: IFFALSE 12478
// break ;
12476: GO 12587
// x := personel [ i ] ;
12478: LD_ADDR_VAR 0 13
12482: PUSH
12483: LD_VAR 0 6
12487: PUSH
12488: LD_VAR 0 8
12492: ARRAY
12493: ST_TO_ADDR
// if x = - 1 then
12494: LD_VAR 0 13
12498: PUSH
12499: LD_INT 1
12501: NEG
12502: EQUAL
12503: IFFALSE 12507
// continue ;
12505: GO 12463
// PrepareHuman ( false , i , skill ) ;
12507: LD_INT 0
12509: PPUSH
12510: LD_VAR 0 8
12514: PPUSH
12515: LD_VAR 0 4
12519: PPUSH
12520: CALL_OW 380
// un := CreateHuman ;
12524: LD_ADDR_VAR 0 14
12528: PUSH
12529: CALL_OW 44
12533: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12534: LD_VAR 0 14
12538: PPUSH
12539: LD_VAR 0 1
12543: PPUSH
12544: CALL_OW 250
12548: PPUSH
12549: LD_VAR 0 1
12553: PPUSH
12554: CALL_OW 251
12558: PPUSH
12559: LD_INT 10
12561: PPUSH
12562: LD_INT 0
12564: PPUSH
12565: CALL_OW 50
// result := result ^ un ;
12569: LD_ADDR_VAR 0 7
12573: PUSH
12574: LD_VAR 0 7
12578: PUSH
12579: LD_VAR 0 14
12583: ADD
12584: ST_TO_ADDR
// end ;
12585: GO 12463
12587: POP
12588: POP
// end ; end ;
12589: LD_VAR 0 7
12593: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12594: LD_INT 0
12596: PPUSH
12597: PPUSH
12598: PPUSH
12599: PPUSH
12600: PPUSH
12601: PPUSH
12602: PPUSH
12603: PPUSH
12604: PPUSH
12605: PPUSH
12606: PPUSH
12607: PPUSH
12608: PPUSH
12609: PPUSH
12610: PPUSH
12611: PPUSH
// result := false ;
12612: LD_ADDR_VAR 0 3
12616: PUSH
12617: LD_INT 0
12619: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12620: LD_VAR 0 1
12624: NOT
12625: PUSH
12626: LD_VAR 0 1
12630: PPUSH
12631: CALL_OW 266
12635: PUSH
12636: LD_INT 32
12638: PUSH
12639: LD_INT 33
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: IN
12646: NOT
12647: OR
12648: IFFALSE 12652
// exit ;
12650: GO 13788
// nat := GetNation ( tower ) ;
12652: LD_ADDR_VAR 0 12
12656: PUSH
12657: LD_VAR 0 1
12661: PPUSH
12662: CALL_OW 248
12666: ST_TO_ADDR
// side := GetSide ( tower ) ;
12667: LD_ADDR_VAR 0 16
12671: PUSH
12672: LD_VAR 0 1
12676: PPUSH
12677: CALL_OW 255
12681: ST_TO_ADDR
// x := GetX ( tower ) ;
12682: LD_ADDR_VAR 0 10
12686: PUSH
12687: LD_VAR 0 1
12691: PPUSH
12692: CALL_OW 250
12696: ST_TO_ADDR
// y := GetY ( tower ) ;
12697: LD_ADDR_VAR 0 11
12701: PUSH
12702: LD_VAR 0 1
12706: PPUSH
12707: CALL_OW 251
12711: ST_TO_ADDR
// if not x or not y then
12712: LD_VAR 0 10
12716: NOT
12717: PUSH
12718: LD_VAR 0 11
12722: NOT
12723: OR
12724: IFFALSE 12728
// exit ;
12726: GO 13788
// weapon := 0 ;
12728: LD_ADDR_VAR 0 18
12732: PUSH
12733: LD_INT 0
12735: ST_TO_ADDR
// fac_list := [ ] ;
12736: LD_ADDR_VAR 0 17
12740: PUSH
12741: EMPTY
12742: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
12743: LD_ADDR_VAR 0 6
12747: PUSH
12748: LD_VAR 0 1
12752: PPUSH
12753: CALL_OW 274
12757: PPUSH
12758: LD_VAR 0 2
12762: PPUSH
12763: CALL 10366 0 2
12767: PPUSH
12768: LD_INT 30
12770: PUSH
12771: LD_INT 3
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: PPUSH
12778: CALL_OW 72
12782: ST_TO_ADDR
// if not factories then
12783: LD_VAR 0 6
12787: NOT
12788: IFFALSE 12792
// exit ;
12790: GO 13788
// for i in factories do
12792: LD_ADDR_VAR 0 8
12796: PUSH
12797: LD_VAR 0 6
12801: PUSH
12802: FOR_IN
12803: IFFALSE 12828
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12805: LD_ADDR_VAR 0 17
12809: PUSH
12810: LD_VAR 0 17
12814: PUSH
12815: LD_VAR 0 8
12819: PPUSH
12820: CALL_OW 478
12824: UNION
12825: ST_TO_ADDR
12826: GO 12802
12828: POP
12829: POP
// if not fac_list then
12830: LD_VAR 0 17
12834: NOT
12835: IFFALSE 12839
// exit ;
12837: GO 13788
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12839: LD_ADDR_VAR 0 5
12843: PUSH
12844: LD_INT 4
12846: PUSH
12847: LD_INT 5
12849: PUSH
12850: LD_INT 9
12852: PUSH
12853: LD_INT 10
12855: PUSH
12856: LD_INT 6
12858: PUSH
12859: LD_INT 7
12861: PUSH
12862: LD_INT 11
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: PUSH
12874: LD_INT 27
12876: PUSH
12877: LD_INT 28
12879: PUSH
12880: LD_INT 26
12882: PUSH
12883: LD_INT 30
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: PUSH
12892: LD_INT 43
12894: PUSH
12895: LD_INT 44
12897: PUSH
12898: LD_INT 46
12900: PUSH
12901: LD_INT 45
12903: PUSH
12904: LD_INT 47
12906: PUSH
12907: LD_INT 49
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: LIST
12922: PUSH
12923: LD_VAR 0 12
12927: ARRAY
12928: ST_TO_ADDR
// for i in list do
12929: LD_ADDR_VAR 0 8
12933: PUSH
12934: LD_VAR 0 5
12938: PUSH
12939: FOR_IN
12940: IFFALSE 12973
// if not i in fac_list then
12942: LD_VAR 0 8
12946: PUSH
12947: LD_VAR 0 17
12951: IN
12952: NOT
12953: IFFALSE 12971
// list := list diff i ;
12955: LD_ADDR_VAR 0 5
12959: PUSH
12960: LD_VAR 0 5
12964: PUSH
12965: LD_VAR 0 8
12969: DIFF
12970: ST_TO_ADDR
12971: GO 12939
12973: POP
12974: POP
// if not list then
12975: LD_VAR 0 5
12979: NOT
12980: IFFALSE 12984
// exit ;
12982: GO 13788
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12984: LD_VAR 0 12
12988: PUSH
12989: LD_INT 3
12991: EQUAL
12992: PUSH
12993: LD_INT 49
12995: PUSH
12996: LD_VAR 0 5
13000: IN
13001: AND
13002: PUSH
13003: LD_INT 31
13005: PPUSH
13006: LD_VAR 0 16
13010: PPUSH
13011: CALL_OW 321
13015: PUSH
13016: LD_INT 2
13018: EQUAL
13019: AND
13020: IFFALSE 13080
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13022: LD_INT 22
13024: PUSH
13025: LD_VAR 0 16
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: PUSH
13034: LD_INT 35
13036: PUSH
13037: LD_INT 49
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: PUSH
13044: LD_INT 91
13046: PUSH
13047: LD_VAR 0 1
13051: PUSH
13052: LD_INT 10
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: LIST
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: LIST
13064: PPUSH
13065: CALL_OW 69
13069: NOT
13070: IFFALSE 13080
// weapon := ru_time_lapser ;
13072: LD_ADDR_VAR 0 18
13076: PUSH
13077: LD_INT 49
13079: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13080: LD_VAR 0 12
13084: PUSH
13085: LD_INT 1
13087: PUSH
13088: LD_INT 2
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: IN
13095: PUSH
13096: LD_INT 11
13098: PUSH
13099: LD_VAR 0 5
13103: IN
13104: PUSH
13105: LD_INT 30
13107: PUSH
13108: LD_VAR 0 5
13112: IN
13113: OR
13114: AND
13115: PUSH
13116: LD_INT 6
13118: PPUSH
13119: LD_VAR 0 16
13123: PPUSH
13124: CALL_OW 321
13128: PUSH
13129: LD_INT 2
13131: EQUAL
13132: AND
13133: IFFALSE 13298
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13135: LD_INT 22
13137: PUSH
13138: LD_VAR 0 16
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: LD_INT 2
13149: PUSH
13150: LD_INT 35
13152: PUSH
13153: LD_INT 11
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: PUSH
13160: LD_INT 35
13162: PUSH
13163: LD_INT 30
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: LIST
13174: PUSH
13175: LD_INT 91
13177: PUSH
13178: LD_VAR 0 1
13182: PUSH
13183: LD_INT 18
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: LIST
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: LIST
13195: PPUSH
13196: CALL_OW 69
13200: NOT
13201: PUSH
13202: LD_INT 22
13204: PUSH
13205: LD_VAR 0 16
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 2
13216: PUSH
13217: LD_INT 30
13219: PUSH
13220: LD_INT 32
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: PUSH
13227: LD_INT 30
13229: PUSH
13230: LD_INT 33
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: LIST
13241: PUSH
13242: LD_INT 91
13244: PUSH
13245: LD_VAR 0 1
13249: PUSH
13250: LD_INT 12
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: LIST
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: LIST
13262: PUSH
13263: EMPTY
13264: LIST
13265: PPUSH
13266: CALL_OW 69
13270: PUSH
13271: LD_INT 2
13273: GREATER
13274: AND
13275: IFFALSE 13298
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13277: LD_ADDR_VAR 0 18
13281: PUSH
13282: LD_INT 11
13284: PUSH
13285: LD_INT 30
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: LD_VAR 0 12
13296: ARRAY
13297: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13298: LD_VAR 0 18
13302: NOT
13303: PUSH
13304: LD_INT 40
13306: PPUSH
13307: LD_VAR 0 16
13311: PPUSH
13312: CALL_OW 321
13316: PUSH
13317: LD_INT 2
13319: EQUAL
13320: AND
13321: PUSH
13322: LD_INT 7
13324: PUSH
13325: LD_VAR 0 5
13329: IN
13330: PUSH
13331: LD_INT 28
13333: PUSH
13334: LD_VAR 0 5
13338: IN
13339: OR
13340: PUSH
13341: LD_INT 45
13343: PUSH
13344: LD_VAR 0 5
13348: IN
13349: OR
13350: AND
13351: IFFALSE 13605
// begin hex := GetHexInfo ( x , y ) ;
13353: LD_ADDR_VAR 0 4
13357: PUSH
13358: LD_VAR 0 10
13362: PPUSH
13363: LD_VAR 0 11
13367: PPUSH
13368: CALL_OW 546
13372: ST_TO_ADDR
// if hex [ 1 ] then
13373: LD_VAR 0 4
13377: PUSH
13378: LD_INT 1
13380: ARRAY
13381: IFFALSE 13385
// exit ;
13383: GO 13788
// height := hex [ 2 ] ;
13385: LD_ADDR_VAR 0 15
13389: PUSH
13390: LD_VAR 0 4
13394: PUSH
13395: LD_INT 2
13397: ARRAY
13398: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13399: LD_ADDR_VAR 0 14
13403: PUSH
13404: LD_INT 0
13406: PUSH
13407: LD_INT 2
13409: PUSH
13410: LD_INT 3
13412: PUSH
13413: LD_INT 5
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: ST_TO_ADDR
// for i in tmp do
13422: LD_ADDR_VAR 0 8
13426: PUSH
13427: LD_VAR 0 14
13431: PUSH
13432: FOR_IN
13433: IFFALSE 13603
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13435: LD_ADDR_VAR 0 9
13439: PUSH
13440: LD_VAR 0 10
13444: PPUSH
13445: LD_VAR 0 8
13449: PPUSH
13450: LD_INT 5
13452: PPUSH
13453: CALL_OW 272
13457: PUSH
13458: LD_VAR 0 11
13462: PPUSH
13463: LD_VAR 0 8
13467: PPUSH
13468: LD_INT 5
13470: PPUSH
13471: CALL_OW 273
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13480: LD_VAR 0 9
13484: PUSH
13485: LD_INT 1
13487: ARRAY
13488: PPUSH
13489: LD_VAR 0 9
13493: PUSH
13494: LD_INT 2
13496: ARRAY
13497: PPUSH
13498: CALL_OW 488
13502: IFFALSE 13601
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13504: LD_ADDR_VAR 0 4
13508: PUSH
13509: LD_VAR 0 9
13513: PUSH
13514: LD_INT 1
13516: ARRAY
13517: PPUSH
13518: LD_VAR 0 9
13522: PUSH
13523: LD_INT 2
13525: ARRAY
13526: PPUSH
13527: CALL_OW 546
13531: ST_TO_ADDR
// if hex [ 1 ] then
13532: LD_VAR 0 4
13536: PUSH
13537: LD_INT 1
13539: ARRAY
13540: IFFALSE 13544
// continue ;
13542: GO 13432
// h := hex [ 2 ] ;
13544: LD_ADDR_VAR 0 13
13548: PUSH
13549: LD_VAR 0 4
13553: PUSH
13554: LD_INT 2
13556: ARRAY
13557: ST_TO_ADDR
// if h + 7 < height then
13558: LD_VAR 0 13
13562: PUSH
13563: LD_INT 7
13565: PLUS
13566: PUSH
13567: LD_VAR 0 15
13571: LESS
13572: IFFALSE 13601
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13574: LD_ADDR_VAR 0 18
13578: PUSH
13579: LD_INT 7
13581: PUSH
13582: LD_INT 28
13584: PUSH
13585: LD_INT 45
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: LIST
13592: PUSH
13593: LD_VAR 0 12
13597: ARRAY
13598: ST_TO_ADDR
// break ;
13599: GO 13603
// end ; end ; end ;
13601: GO 13432
13603: POP
13604: POP
// end ; if not weapon then
13605: LD_VAR 0 18
13609: NOT
13610: IFFALSE 13670
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13612: LD_ADDR_VAR 0 5
13616: PUSH
13617: LD_VAR 0 5
13621: PUSH
13622: LD_INT 11
13624: PUSH
13625: LD_INT 30
13627: PUSH
13628: LD_INT 49
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: LIST
13635: DIFF
13636: ST_TO_ADDR
// if not list then
13637: LD_VAR 0 5
13641: NOT
13642: IFFALSE 13646
// exit ;
13644: GO 13788
// weapon := list [ rand ( 1 , list ) ] ;
13646: LD_ADDR_VAR 0 18
13650: PUSH
13651: LD_VAR 0 5
13655: PUSH
13656: LD_INT 1
13658: PPUSH
13659: LD_VAR 0 5
13663: PPUSH
13664: CALL_OW 12
13668: ARRAY
13669: ST_TO_ADDR
// end ; if weapon then
13670: LD_VAR 0 18
13674: IFFALSE 13788
// begin tmp := CostOfWeapon ( weapon ) ;
13676: LD_ADDR_VAR 0 14
13680: PUSH
13681: LD_VAR 0 18
13685: PPUSH
13686: CALL_OW 451
13690: ST_TO_ADDR
// j := GetBase ( tower ) ;
13691: LD_ADDR_VAR 0 9
13695: PUSH
13696: LD_VAR 0 1
13700: PPUSH
13701: CALL_OW 274
13705: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13706: LD_VAR 0 9
13710: PPUSH
13711: LD_INT 1
13713: PPUSH
13714: CALL_OW 275
13718: PUSH
13719: LD_VAR 0 14
13723: PUSH
13724: LD_INT 1
13726: ARRAY
13727: GREATEREQUAL
13728: PUSH
13729: LD_VAR 0 9
13733: PPUSH
13734: LD_INT 2
13736: PPUSH
13737: CALL_OW 275
13741: PUSH
13742: LD_VAR 0 14
13746: PUSH
13747: LD_INT 2
13749: ARRAY
13750: GREATEREQUAL
13751: AND
13752: PUSH
13753: LD_VAR 0 9
13757: PPUSH
13758: LD_INT 3
13760: PPUSH
13761: CALL_OW 275
13765: PUSH
13766: LD_VAR 0 14
13770: PUSH
13771: LD_INT 3
13773: ARRAY
13774: GREATEREQUAL
13775: AND
13776: IFFALSE 13788
// result := weapon ;
13778: LD_ADDR_VAR 0 3
13782: PUSH
13783: LD_VAR 0 18
13787: ST_TO_ADDR
// end ; end ;
13788: LD_VAR 0 3
13792: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13793: LD_INT 0
13795: PPUSH
13796: PPUSH
// result := true ;
13797: LD_ADDR_VAR 0 3
13801: PUSH
13802: LD_INT 1
13804: ST_TO_ADDR
// if array1 = array2 then
13805: LD_VAR 0 1
13809: PUSH
13810: LD_VAR 0 2
13814: EQUAL
13815: IFFALSE 13875
// begin for i = 1 to array1 do
13817: LD_ADDR_VAR 0 4
13821: PUSH
13822: DOUBLE
13823: LD_INT 1
13825: DEC
13826: ST_TO_ADDR
13827: LD_VAR 0 1
13831: PUSH
13832: FOR_TO
13833: IFFALSE 13871
// if array1 [ i ] <> array2 [ i ] then
13835: LD_VAR 0 1
13839: PUSH
13840: LD_VAR 0 4
13844: ARRAY
13845: PUSH
13846: LD_VAR 0 2
13850: PUSH
13851: LD_VAR 0 4
13855: ARRAY
13856: NONEQUAL
13857: IFFALSE 13869
// begin result := false ;
13859: LD_ADDR_VAR 0 3
13863: PUSH
13864: LD_INT 0
13866: ST_TO_ADDR
// break ;
13867: GO 13871
// end ;
13869: GO 13832
13871: POP
13872: POP
// end else
13873: GO 13883
// result := false ;
13875: LD_ADDR_VAR 0 3
13879: PUSH
13880: LD_INT 0
13882: ST_TO_ADDR
// end ;
13883: LD_VAR 0 3
13887: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13888: LD_INT 0
13890: PPUSH
13891: PPUSH
13892: PPUSH
// pom := GetBase ( fac ) ;
13893: LD_ADDR_VAR 0 5
13897: PUSH
13898: LD_VAR 0 1
13902: PPUSH
13903: CALL_OW 274
13907: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13908: LD_ADDR_VAR 0 4
13912: PUSH
13913: LD_VAR 0 2
13917: PUSH
13918: LD_INT 1
13920: ARRAY
13921: PPUSH
13922: LD_VAR 0 2
13926: PUSH
13927: LD_INT 2
13929: ARRAY
13930: PPUSH
13931: LD_VAR 0 2
13935: PUSH
13936: LD_INT 3
13938: ARRAY
13939: PPUSH
13940: LD_VAR 0 2
13944: PUSH
13945: LD_INT 4
13947: ARRAY
13948: PPUSH
13949: CALL_OW 449
13953: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13954: LD_ADDR_VAR 0 3
13958: PUSH
13959: LD_VAR 0 5
13963: PPUSH
13964: LD_INT 1
13966: PPUSH
13967: CALL_OW 275
13971: PUSH
13972: LD_VAR 0 4
13976: PUSH
13977: LD_INT 1
13979: ARRAY
13980: GREATEREQUAL
13981: PUSH
13982: LD_VAR 0 5
13986: PPUSH
13987: LD_INT 2
13989: PPUSH
13990: CALL_OW 275
13994: PUSH
13995: LD_VAR 0 4
13999: PUSH
14000: LD_INT 2
14002: ARRAY
14003: GREATEREQUAL
14004: AND
14005: PUSH
14006: LD_VAR 0 5
14010: PPUSH
14011: LD_INT 3
14013: PPUSH
14014: CALL_OW 275
14018: PUSH
14019: LD_VAR 0 4
14023: PUSH
14024: LD_INT 3
14026: ARRAY
14027: GREATEREQUAL
14028: AND
14029: ST_TO_ADDR
// end ;
14030: LD_VAR 0 3
14034: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14035: LD_INT 0
14037: PPUSH
14038: PPUSH
14039: PPUSH
14040: PPUSH
// pom := GetBase ( building ) ;
14041: LD_ADDR_VAR 0 3
14045: PUSH
14046: LD_VAR 0 1
14050: PPUSH
14051: CALL_OW 274
14055: ST_TO_ADDR
// if not pom then
14056: LD_VAR 0 3
14060: NOT
14061: IFFALSE 14065
// exit ;
14063: GO 14235
// btype := GetBType ( building ) ;
14065: LD_ADDR_VAR 0 5
14069: PUSH
14070: LD_VAR 0 1
14074: PPUSH
14075: CALL_OW 266
14079: ST_TO_ADDR
// if btype = b_armoury then
14080: LD_VAR 0 5
14084: PUSH
14085: LD_INT 4
14087: EQUAL
14088: IFFALSE 14098
// btype := b_barracks ;
14090: LD_ADDR_VAR 0 5
14094: PUSH
14095: LD_INT 5
14097: ST_TO_ADDR
// if btype = b_depot then
14098: LD_VAR 0 5
14102: PUSH
14103: LD_INT 0
14105: EQUAL
14106: IFFALSE 14116
// btype := b_warehouse ;
14108: LD_ADDR_VAR 0 5
14112: PUSH
14113: LD_INT 1
14115: ST_TO_ADDR
// if btype = b_workshop then
14116: LD_VAR 0 5
14120: PUSH
14121: LD_INT 2
14123: EQUAL
14124: IFFALSE 14134
// btype := b_factory ;
14126: LD_ADDR_VAR 0 5
14130: PUSH
14131: LD_INT 3
14133: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14134: LD_ADDR_VAR 0 4
14138: PUSH
14139: LD_VAR 0 5
14143: PPUSH
14144: LD_VAR 0 1
14148: PPUSH
14149: CALL_OW 248
14153: PPUSH
14154: CALL_OW 450
14158: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14159: LD_ADDR_VAR 0 2
14163: PUSH
14164: LD_VAR 0 3
14168: PPUSH
14169: LD_INT 1
14171: PPUSH
14172: CALL_OW 275
14176: PUSH
14177: LD_VAR 0 4
14181: PUSH
14182: LD_INT 1
14184: ARRAY
14185: GREATEREQUAL
14186: PUSH
14187: LD_VAR 0 3
14191: PPUSH
14192: LD_INT 2
14194: PPUSH
14195: CALL_OW 275
14199: PUSH
14200: LD_VAR 0 4
14204: PUSH
14205: LD_INT 2
14207: ARRAY
14208: GREATEREQUAL
14209: AND
14210: PUSH
14211: LD_VAR 0 3
14215: PPUSH
14216: LD_INT 3
14218: PPUSH
14219: CALL_OW 275
14223: PUSH
14224: LD_VAR 0 4
14228: PUSH
14229: LD_INT 3
14231: ARRAY
14232: GREATEREQUAL
14233: AND
14234: ST_TO_ADDR
// end ;
14235: LD_VAR 0 2
14239: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14240: LD_INT 0
14242: PPUSH
14243: PPUSH
14244: PPUSH
// pom := GetBase ( building ) ;
14245: LD_ADDR_VAR 0 4
14249: PUSH
14250: LD_VAR 0 1
14254: PPUSH
14255: CALL_OW 274
14259: ST_TO_ADDR
// if not pom then
14260: LD_VAR 0 4
14264: NOT
14265: IFFALSE 14269
// exit ;
14267: GO 14370
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14269: LD_ADDR_VAR 0 5
14273: PUSH
14274: LD_VAR 0 2
14278: PPUSH
14279: LD_VAR 0 1
14283: PPUSH
14284: CALL_OW 248
14288: PPUSH
14289: CALL_OW 450
14293: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14294: LD_ADDR_VAR 0 3
14298: PUSH
14299: LD_VAR 0 4
14303: PPUSH
14304: LD_INT 1
14306: PPUSH
14307: CALL_OW 275
14311: PUSH
14312: LD_VAR 0 5
14316: PUSH
14317: LD_INT 1
14319: ARRAY
14320: GREATEREQUAL
14321: PUSH
14322: LD_VAR 0 4
14326: PPUSH
14327: LD_INT 2
14329: PPUSH
14330: CALL_OW 275
14334: PUSH
14335: LD_VAR 0 5
14339: PUSH
14340: LD_INT 2
14342: ARRAY
14343: GREATEREQUAL
14344: AND
14345: PUSH
14346: LD_VAR 0 4
14350: PPUSH
14351: LD_INT 3
14353: PPUSH
14354: CALL_OW 275
14358: PUSH
14359: LD_VAR 0 5
14363: PUSH
14364: LD_INT 3
14366: ARRAY
14367: GREATEREQUAL
14368: AND
14369: ST_TO_ADDR
// end ;
14370: LD_VAR 0 3
14374: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
14375: LD_INT 0
14377: PPUSH
14378: PPUSH
14379: PPUSH
14380: PPUSH
14381: PPUSH
14382: PPUSH
14383: PPUSH
14384: PPUSH
14385: PPUSH
14386: PPUSH
// result := false ;
14387: LD_ADDR_VAR 0 6
14391: PUSH
14392: LD_INT 0
14394: ST_TO_ADDR
// if not base or not btype or not x or not y then
14395: LD_VAR 0 1
14399: NOT
14400: PUSH
14401: LD_VAR 0 2
14405: NOT
14406: OR
14407: PUSH
14408: LD_VAR 0 3
14412: NOT
14413: OR
14414: PUSH
14415: LD_VAR 0 4
14419: NOT
14420: OR
14421: IFFALSE 14425
// exit ;
14423: GO 15034
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
14425: LD_ADDR_VAR 0 12
14429: PUSH
14430: LD_VAR 0 2
14434: PPUSH
14435: LD_VAR 0 3
14439: PPUSH
14440: LD_VAR 0 4
14444: PPUSH
14445: LD_VAR 0 5
14449: PPUSH
14450: LD_VAR 0 1
14454: PUSH
14455: LD_INT 1
14457: ARRAY
14458: PPUSH
14459: CALL_OW 248
14463: PPUSH
14464: LD_INT 0
14466: PPUSH
14467: CALL 15871 0 6
14471: ST_TO_ADDR
// if not hexes then
14472: LD_VAR 0 12
14476: NOT
14477: IFFALSE 14481
// exit ;
14479: GO 15034
// for i = 1 to hexes do
14481: LD_ADDR_VAR 0 7
14485: PUSH
14486: DOUBLE
14487: LD_INT 1
14489: DEC
14490: ST_TO_ADDR
14491: LD_VAR 0 12
14495: PUSH
14496: FOR_TO
14497: IFFALSE 15032
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14499: LD_ADDR_VAR 0 11
14503: PUSH
14504: LD_VAR 0 12
14508: PUSH
14509: LD_VAR 0 7
14513: ARRAY
14514: PUSH
14515: LD_INT 1
14517: ARRAY
14518: PPUSH
14519: LD_VAR 0 12
14523: PUSH
14524: LD_VAR 0 7
14528: ARRAY
14529: PUSH
14530: LD_INT 2
14532: ARRAY
14533: PPUSH
14534: CALL_OW 428
14538: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14539: LD_VAR 0 12
14543: PUSH
14544: LD_VAR 0 7
14548: ARRAY
14549: PUSH
14550: LD_INT 1
14552: ARRAY
14553: PPUSH
14554: LD_VAR 0 12
14558: PUSH
14559: LD_VAR 0 7
14563: ARRAY
14564: PUSH
14565: LD_INT 2
14567: ARRAY
14568: PPUSH
14569: CALL_OW 351
14573: PUSH
14574: LD_VAR 0 12
14578: PUSH
14579: LD_VAR 0 7
14583: ARRAY
14584: PUSH
14585: LD_INT 1
14587: ARRAY
14588: PPUSH
14589: LD_VAR 0 12
14593: PUSH
14594: LD_VAR 0 7
14598: ARRAY
14599: PUSH
14600: LD_INT 2
14602: ARRAY
14603: PPUSH
14604: CALL_OW 488
14608: NOT
14609: OR
14610: PUSH
14611: LD_VAR 0 11
14615: PPUSH
14616: CALL_OW 247
14620: PUSH
14621: LD_INT 3
14623: EQUAL
14624: OR
14625: IFFALSE 14631
// exit ;
14627: POP
14628: POP
14629: GO 15034
// if not tmp or not tmp in base then
14631: LD_VAR 0 11
14635: NOT
14636: PUSH
14637: LD_VAR 0 11
14641: PUSH
14642: LD_VAR 0 1
14646: IN
14647: NOT
14648: OR
14649: IFFALSE 14653
// continue ;
14651: GO 14496
// result := true ;
14653: LD_ADDR_VAR 0 6
14657: PUSH
14658: LD_INT 1
14660: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14661: LD_ADDR_VAR 0 15
14665: PUSH
14666: LD_VAR 0 1
14670: PPUSH
14671: LD_INT 22
14673: PUSH
14674: LD_VAR 0 11
14678: PPUSH
14679: CALL_OW 255
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: PUSH
14688: LD_INT 2
14690: PUSH
14691: LD_INT 30
14693: PUSH
14694: LD_INT 0
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PUSH
14701: LD_INT 30
14703: PUSH
14704: LD_INT 1
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: LIST
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PPUSH
14720: CALL_OW 72
14724: ST_TO_ADDR
// if dep then
14725: LD_VAR 0 15
14729: IFFALSE 14865
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14731: LD_ADDR_VAR 0 14
14735: PUSH
14736: LD_VAR 0 15
14740: PUSH
14741: LD_INT 1
14743: ARRAY
14744: PPUSH
14745: CALL_OW 250
14749: PPUSH
14750: LD_VAR 0 15
14754: PUSH
14755: LD_INT 1
14757: ARRAY
14758: PPUSH
14759: CALL_OW 254
14763: PPUSH
14764: LD_INT 5
14766: PPUSH
14767: CALL_OW 272
14771: PUSH
14772: LD_VAR 0 15
14776: PUSH
14777: LD_INT 1
14779: ARRAY
14780: PPUSH
14781: CALL_OW 251
14785: PPUSH
14786: LD_VAR 0 15
14790: PUSH
14791: LD_INT 1
14793: ARRAY
14794: PPUSH
14795: CALL_OW 254
14799: PPUSH
14800: LD_INT 5
14802: PPUSH
14803: CALL_OW 273
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14812: LD_VAR 0 14
14816: PUSH
14817: LD_INT 1
14819: ARRAY
14820: PPUSH
14821: LD_VAR 0 14
14825: PUSH
14826: LD_INT 2
14828: ARRAY
14829: PPUSH
14830: CALL_OW 488
14834: IFFALSE 14865
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14836: LD_VAR 0 11
14840: PPUSH
14841: LD_VAR 0 14
14845: PUSH
14846: LD_INT 1
14848: ARRAY
14849: PPUSH
14850: LD_VAR 0 14
14854: PUSH
14855: LD_INT 2
14857: ARRAY
14858: PPUSH
14859: CALL_OW 111
// continue ;
14863: GO 14496
// end ; end ; r := GetDir ( tmp ) ;
14865: LD_ADDR_VAR 0 13
14869: PUSH
14870: LD_VAR 0 11
14874: PPUSH
14875: CALL_OW 254
14879: ST_TO_ADDR
// if r = 5 then
14880: LD_VAR 0 13
14884: PUSH
14885: LD_INT 5
14887: EQUAL
14888: IFFALSE 14898
// r := 0 ;
14890: LD_ADDR_VAR 0 13
14894: PUSH
14895: LD_INT 0
14897: ST_TO_ADDR
// for j = r to 5 do
14898: LD_ADDR_VAR 0 8
14902: PUSH
14903: DOUBLE
14904: LD_VAR 0 13
14908: DEC
14909: ST_TO_ADDR
14910: LD_INT 5
14912: PUSH
14913: FOR_TO
14914: IFFALSE 15028
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14916: LD_ADDR_VAR 0 9
14920: PUSH
14921: LD_VAR 0 11
14925: PPUSH
14926: CALL_OW 250
14930: PPUSH
14931: LD_VAR 0 8
14935: PPUSH
14936: LD_INT 2
14938: PPUSH
14939: CALL_OW 272
14943: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14944: LD_ADDR_VAR 0 10
14948: PUSH
14949: LD_VAR 0 11
14953: PPUSH
14954: CALL_OW 251
14958: PPUSH
14959: LD_VAR 0 8
14963: PPUSH
14964: LD_INT 2
14966: PPUSH
14967: CALL_OW 273
14971: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14972: LD_VAR 0 9
14976: PPUSH
14977: LD_VAR 0 10
14981: PPUSH
14982: CALL_OW 488
14986: PUSH
14987: LD_VAR 0 9
14991: PPUSH
14992: LD_VAR 0 10
14996: PPUSH
14997: CALL_OW 428
15001: NOT
15002: AND
15003: IFFALSE 15026
// begin ComMoveXY ( tmp , _x , _y ) ;
15005: LD_VAR 0 11
15009: PPUSH
15010: LD_VAR 0 9
15014: PPUSH
15015: LD_VAR 0 10
15019: PPUSH
15020: CALL_OW 111
// break ;
15024: GO 15028
// end ; end ;
15026: GO 14913
15028: POP
15029: POP
// end ;
15030: GO 14496
15032: POP
15033: POP
// end ;
15034: LD_VAR 0 6
15038: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
15039: LD_INT 0
15041: PPUSH
15042: PPUSH
15043: PPUSH
15044: PPUSH
15045: PPUSH
15046: PPUSH
15047: PPUSH
15048: PPUSH
15049: PPUSH
15050: PPUSH
// result := false ;
15051: LD_ADDR_VAR 0 6
15055: PUSH
15056: LD_INT 0
15058: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15059: LD_VAR 0 1
15063: NOT
15064: PUSH
15065: LD_VAR 0 1
15069: PPUSH
15070: CALL_OW 266
15074: PUSH
15075: LD_INT 0
15077: PUSH
15078: LD_INT 1
15080: PUSH
15081: EMPTY
15082: LIST
15083: LIST
15084: IN
15085: NOT
15086: OR
15087: PUSH
15088: LD_VAR 0 2
15092: NOT
15093: OR
15094: PUSH
15095: LD_VAR 0 5
15099: PUSH
15100: LD_INT 0
15102: PUSH
15103: LD_INT 1
15105: PUSH
15106: LD_INT 2
15108: PUSH
15109: LD_INT 3
15111: PUSH
15112: LD_INT 4
15114: PUSH
15115: LD_INT 5
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: IN
15126: NOT
15127: OR
15128: PUSH
15129: LD_VAR 0 3
15133: PPUSH
15134: LD_VAR 0 4
15138: PPUSH
15139: CALL_OW 488
15143: NOT
15144: OR
15145: IFFALSE 15149
// exit ;
15147: GO 15866
// pom := GetBase ( depot ) ;
15149: LD_ADDR_VAR 0 10
15153: PUSH
15154: LD_VAR 0 1
15158: PPUSH
15159: CALL_OW 274
15163: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15164: LD_ADDR_VAR 0 11
15168: PUSH
15169: LD_VAR 0 2
15173: PPUSH
15174: LD_VAR 0 1
15178: PPUSH
15179: CALL_OW 248
15183: PPUSH
15184: CALL_OW 450
15188: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15189: LD_VAR 0 10
15193: PPUSH
15194: LD_INT 1
15196: PPUSH
15197: CALL_OW 275
15201: PUSH
15202: LD_VAR 0 11
15206: PUSH
15207: LD_INT 1
15209: ARRAY
15210: GREATEREQUAL
15211: PUSH
15212: LD_VAR 0 10
15216: PPUSH
15217: LD_INT 2
15219: PPUSH
15220: CALL_OW 275
15224: PUSH
15225: LD_VAR 0 11
15229: PUSH
15230: LD_INT 2
15232: ARRAY
15233: GREATEREQUAL
15234: AND
15235: PUSH
15236: LD_VAR 0 10
15240: PPUSH
15241: LD_INT 3
15243: PPUSH
15244: CALL_OW 275
15248: PUSH
15249: LD_VAR 0 11
15253: PUSH
15254: LD_INT 3
15256: ARRAY
15257: GREATEREQUAL
15258: AND
15259: NOT
15260: IFFALSE 15264
// exit ;
15262: GO 15866
// if GetBType ( depot ) = b_depot then
15264: LD_VAR 0 1
15268: PPUSH
15269: CALL_OW 266
15273: PUSH
15274: LD_INT 0
15276: EQUAL
15277: IFFALSE 15289
// dist := 28 else
15279: LD_ADDR_VAR 0 14
15283: PUSH
15284: LD_INT 28
15286: ST_TO_ADDR
15287: GO 15297
// dist := 36 ;
15289: LD_ADDR_VAR 0 14
15293: PUSH
15294: LD_INT 36
15296: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15297: LD_VAR 0 1
15301: PPUSH
15302: LD_VAR 0 3
15306: PPUSH
15307: LD_VAR 0 4
15311: PPUSH
15312: CALL_OW 297
15316: PUSH
15317: LD_VAR 0 14
15321: GREATER
15322: IFFALSE 15326
// exit ;
15324: GO 15866
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15326: LD_ADDR_VAR 0 12
15330: PUSH
15331: LD_VAR 0 2
15335: PPUSH
15336: LD_VAR 0 3
15340: PPUSH
15341: LD_VAR 0 4
15345: PPUSH
15346: LD_VAR 0 5
15350: PPUSH
15351: LD_VAR 0 1
15355: PPUSH
15356: CALL_OW 248
15360: PPUSH
15361: LD_INT 0
15363: PPUSH
15364: CALL 15871 0 6
15368: ST_TO_ADDR
// if not hexes then
15369: LD_VAR 0 12
15373: NOT
15374: IFFALSE 15378
// exit ;
15376: GO 15866
// hex := GetHexInfo ( x , y ) ;
15378: LD_ADDR_VAR 0 15
15382: PUSH
15383: LD_VAR 0 3
15387: PPUSH
15388: LD_VAR 0 4
15392: PPUSH
15393: CALL_OW 546
15397: ST_TO_ADDR
// if hex [ 1 ] then
15398: LD_VAR 0 15
15402: PUSH
15403: LD_INT 1
15405: ARRAY
15406: IFFALSE 15410
// exit ;
15408: GO 15866
// height := hex [ 2 ] ;
15410: LD_ADDR_VAR 0 13
15414: PUSH
15415: LD_VAR 0 15
15419: PUSH
15420: LD_INT 2
15422: ARRAY
15423: ST_TO_ADDR
// for i = 1 to hexes do
15424: LD_ADDR_VAR 0 7
15428: PUSH
15429: DOUBLE
15430: LD_INT 1
15432: DEC
15433: ST_TO_ADDR
15434: LD_VAR 0 12
15438: PUSH
15439: FOR_TO
15440: IFFALSE 15770
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15442: LD_VAR 0 12
15446: PUSH
15447: LD_VAR 0 7
15451: ARRAY
15452: PUSH
15453: LD_INT 1
15455: ARRAY
15456: PPUSH
15457: LD_VAR 0 12
15461: PUSH
15462: LD_VAR 0 7
15466: ARRAY
15467: PUSH
15468: LD_INT 2
15470: ARRAY
15471: PPUSH
15472: CALL_OW 488
15476: NOT
15477: PUSH
15478: LD_VAR 0 12
15482: PUSH
15483: LD_VAR 0 7
15487: ARRAY
15488: PUSH
15489: LD_INT 1
15491: ARRAY
15492: PPUSH
15493: LD_VAR 0 12
15497: PUSH
15498: LD_VAR 0 7
15502: ARRAY
15503: PUSH
15504: LD_INT 2
15506: ARRAY
15507: PPUSH
15508: CALL_OW 428
15512: PUSH
15513: LD_INT 0
15515: GREATER
15516: OR
15517: PUSH
15518: LD_VAR 0 12
15522: PUSH
15523: LD_VAR 0 7
15527: ARRAY
15528: PUSH
15529: LD_INT 1
15531: ARRAY
15532: PPUSH
15533: LD_VAR 0 12
15537: PUSH
15538: LD_VAR 0 7
15542: ARRAY
15543: PUSH
15544: LD_INT 2
15546: ARRAY
15547: PPUSH
15548: CALL_OW 351
15552: OR
15553: IFFALSE 15559
// exit ;
15555: POP
15556: POP
15557: GO 15866
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15559: LD_ADDR_VAR 0 8
15563: PUSH
15564: LD_VAR 0 12
15568: PUSH
15569: LD_VAR 0 7
15573: ARRAY
15574: PUSH
15575: LD_INT 1
15577: ARRAY
15578: PPUSH
15579: LD_VAR 0 12
15583: PUSH
15584: LD_VAR 0 7
15588: ARRAY
15589: PUSH
15590: LD_INT 2
15592: ARRAY
15593: PPUSH
15594: CALL_OW 546
15598: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15599: LD_VAR 0 8
15603: PUSH
15604: LD_INT 1
15606: ARRAY
15607: PUSH
15608: LD_VAR 0 8
15612: PUSH
15613: LD_INT 2
15615: ARRAY
15616: PUSH
15617: LD_VAR 0 13
15621: PUSH
15622: LD_INT 2
15624: PLUS
15625: GREATER
15626: OR
15627: PUSH
15628: LD_VAR 0 8
15632: PUSH
15633: LD_INT 2
15635: ARRAY
15636: PUSH
15637: LD_VAR 0 13
15641: PUSH
15642: LD_INT 2
15644: MINUS
15645: LESS
15646: OR
15647: PUSH
15648: LD_VAR 0 8
15652: PUSH
15653: LD_INT 3
15655: ARRAY
15656: PUSH
15657: LD_INT 0
15659: PUSH
15660: LD_INT 8
15662: PUSH
15663: LD_INT 9
15665: PUSH
15666: LD_INT 10
15668: PUSH
15669: LD_INT 11
15671: PUSH
15672: LD_INT 12
15674: PUSH
15675: LD_INT 13
15677: PUSH
15678: LD_INT 16
15680: PUSH
15681: LD_INT 17
15683: PUSH
15684: LD_INT 18
15686: PUSH
15687: LD_INT 19
15689: PUSH
15690: LD_INT 20
15692: PUSH
15693: LD_INT 21
15695: PUSH
15696: EMPTY
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: IN
15711: NOT
15712: OR
15713: PUSH
15714: LD_VAR 0 8
15718: PUSH
15719: LD_INT 5
15721: ARRAY
15722: NOT
15723: OR
15724: PUSH
15725: LD_VAR 0 8
15729: PUSH
15730: LD_INT 6
15732: ARRAY
15733: PUSH
15734: LD_INT 1
15736: PUSH
15737: LD_INT 2
15739: PUSH
15740: LD_INT 7
15742: PUSH
15743: LD_INT 9
15745: PUSH
15746: LD_INT 10
15748: PUSH
15749: LD_INT 11
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: IN
15760: NOT
15761: OR
15762: IFFALSE 15768
// exit ;
15764: POP
15765: POP
15766: GO 15866
// end ;
15768: GO 15439
15770: POP
15771: POP
// side := GetSide ( depot ) ;
15772: LD_ADDR_VAR 0 9
15776: PUSH
15777: LD_VAR 0 1
15781: PPUSH
15782: CALL_OW 255
15786: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15787: LD_VAR 0 9
15791: PPUSH
15792: LD_VAR 0 3
15796: PPUSH
15797: LD_VAR 0 4
15801: PPUSH
15802: LD_INT 20
15804: PPUSH
15805: CALL 8520 0 4
15809: PUSH
15810: LD_INT 4
15812: ARRAY
15813: IFFALSE 15817
// exit ;
15815: GO 15866
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15817: LD_VAR 0 2
15821: PUSH
15822: LD_INT 29
15824: PUSH
15825: LD_INT 30
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: IN
15832: PUSH
15833: LD_VAR 0 3
15837: PPUSH
15838: LD_VAR 0 4
15842: PPUSH
15843: LD_VAR 0 9
15847: PPUSH
15848: CALL_OW 440
15852: NOT
15853: AND
15854: IFFALSE 15858
// exit ;
15856: GO 15866
// result := true ;
15858: LD_ADDR_VAR 0 6
15862: PUSH
15863: LD_INT 1
15865: ST_TO_ADDR
// end ;
15866: LD_VAR 0 6
15870: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
15871: LD_INT 0
15873: PPUSH
15874: PPUSH
15875: PPUSH
15876: PPUSH
15877: PPUSH
15878: PPUSH
15879: PPUSH
15880: PPUSH
15881: PPUSH
15882: PPUSH
15883: PPUSH
15884: PPUSH
15885: PPUSH
15886: PPUSH
15887: PPUSH
15888: PPUSH
15889: PPUSH
15890: PPUSH
15891: PPUSH
15892: PPUSH
15893: PPUSH
15894: PPUSH
15895: PPUSH
15896: PPUSH
15897: PPUSH
15898: PPUSH
15899: PPUSH
15900: PPUSH
15901: PPUSH
15902: PPUSH
15903: PPUSH
15904: PPUSH
15905: PPUSH
15906: PPUSH
15907: PPUSH
15908: PPUSH
15909: PPUSH
15910: PPUSH
15911: PPUSH
15912: PPUSH
15913: PPUSH
15914: PPUSH
15915: PPUSH
15916: PPUSH
15917: PPUSH
15918: PPUSH
15919: PPUSH
15920: PPUSH
15921: PPUSH
15922: PPUSH
15923: PPUSH
15924: PPUSH
15925: PPUSH
15926: PPUSH
15927: PPUSH
15928: PPUSH
15929: PPUSH
15930: PPUSH
// result = [ ] ;
15931: LD_ADDR_VAR 0 7
15935: PUSH
15936: EMPTY
15937: ST_TO_ADDR
// temp_list = [ ] ;
15938: LD_ADDR_VAR 0 9
15942: PUSH
15943: EMPTY
15944: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15945: LD_VAR 0 4
15949: PUSH
15950: LD_INT 0
15952: PUSH
15953: LD_INT 1
15955: PUSH
15956: LD_INT 2
15958: PUSH
15959: LD_INT 3
15961: PUSH
15962: LD_INT 4
15964: PUSH
15965: LD_INT 5
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: IN
15976: NOT
15977: PUSH
15978: LD_VAR 0 1
15982: PUSH
15983: LD_INT 0
15985: PUSH
15986: LD_INT 1
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: IN
15993: PUSH
15994: LD_VAR 0 5
15998: PUSH
15999: LD_INT 1
16001: PUSH
16002: LD_INT 2
16004: PUSH
16005: LD_INT 3
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: LIST
16012: IN
16013: NOT
16014: AND
16015: OR
16016: IFFALSE 16020
// exit ;
16018: GO 34411
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16020: LD_VAR 0 1
16024: PUSH
16025: LD_INT 6
16027: PUSH
16028: LD_INT 7
16030: PUSH
16031: LD_INT 8
16033: PUSH
16034: LD_INT 13
16036: PUSH
16037: LD_INT 12
16039: PUSH
16040: LD_INT 15
16042: PUSH
16043: LD_INT 11
16045: PUSH
16046: LD_INT 14
16048: PUSH
16049: LD_INT 10
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: IN
16063: IFFALSE 16073
// btype = b_lab ;
16065: LD_ADDR_VAR 0 1
16069: PUSH
16070: LD_INT 6
16072: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16073: LD_VAR 0 6
16077: PUSH
16078: LD_INT 0
16080: PUSH
16081: LD_INT 1
16083: PUSH
16084: LD_INT 2
16086: PUSH
16087: EMPTY
16088: LIST
16089: LIST
16090: LIST
16091: IN
16092: NOT
16093: PUSH
16094: LD_VAR 0 1
16098: PUSH
16099: LD_INT 0
16101: PUSH
16102: LD_INT 1
16104: PUSH
16105: LD_INT 2
16107: PUSH
16108: LD_INT 3
16110: PUSH
16111: LD_INT 6
16113: PUSH
16114: LD_INT 36
16116: PUSH
16117: LD_INT 4
16119: PUSH
16120: LD_INT 5
16122: PUSH
16123: LD_INT 31
16125: PUSH
16126: LD_INT 32
16128: PUSH
16129: LD_INT 33
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: IN
16145: NOT
16146: PUSH
16147: LD_VAR 0 6
16151: PUSH
16152: LD_INT 1
16154: EQUAL
16155: AND
16156: OR
16157: PUSH
16158: LD_VAR 0 1
16162: PUSH
16163: LD_INT 2
16165: PUSH
16166: LD_INT 3
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: IN
16173: NOT
16174: PUSH
16175: LD_VAR 0 6
16179: PUSH
16180: LD_INT 2
16182: EQUAL
16183: AND
16184: OR
16185: IFFALSE 16195
// mode = 0 ;
16187: LD_ADDR_VAR 0 6
16191: PUSH
16192: LD_INT 0
16194: ST_TO_ADDR
// case mode of 0 :
16195: LD_VAR 0 6
16199: PUSH
16200: LD_INT 0
16202: DOUBLE
16203: EQUAL
16204: IFTRUE 16208
16206: GO 27661
16208: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16209: LD_ADDR_VAR 0 11
16213: PUSH
16214: LD_INT 0
16216: PUSH
16217: LD_INT 0
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: PUSH
16224: LD_INT 0
16226: PUSH
16227: LD_INT 1
16229: NEG
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: PUSH
16235: LD_INT 1
16237: PUSH
16238: LD_INT 0
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PUSH
16245: LD_INT 1
16247: PUSH
16248: LD_INT 1
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: PUSH
16255: LD_INT 0
16257: PUSH
16258: LD_INT 1
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PUSH
16265: LD_INT 1
16267: NEG
16268: PUSH
16269: LD_INT 0
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: LD_INT 1
16278: NEG
16279: PUSH
16280: LD_INT 1
16282: NEG
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: PUSH
16288: LD_INT 1
16290: NEG
16291: PUSH
16292: LD_INT 2
16294: NEG
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 0
16302: PUSH
16303: LD_INT 2
16305: NEG
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: LD_INT 1
16313: PUSH
16314: LD_INT 1
16316: NEG
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: PUSH
16322: LD_INT 1
16324: PUSH
16325: LD_INT 2
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: LD_INT 0
16334: PUSH
16335: LD_INT 2
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: LD_INT 1
16344: NEG
16345: PUSH
16346: LD_INT 1
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PUSH
16353: LD_INT 1
16355: PUSH
16356: LD_INT 3
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: PUSH
16363: LD_INT 0
16365: PUSH
16366: LD_INT 3
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: PUSH
16373: LD_INT 1
16375: NEG
16376: PUSH
16377: LD_INT 2
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: PUSH
16384: EMPTY
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16402: LD_ADDR_VAR 0 12
16406: PUSH
16407: LD_INT 0
16409: PUSH
16410: LD_INT 0
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: PUSH
16417: LD_INT 0
16419: PUSH
16420: LD_INT 1
16422: NEG
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PUSH
16428: LD_INT 1
16430: PUSH
16431: LD_INT 0
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: PUSH
16438: LD_INT 1
16440: PUSH
16441: LD_INT 1
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 0
16450: PUSH
16451: LD_INT 1
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PUSH
16458: LD_INT 1
16460: NEG
16461: PUSH
16462: LD_INT 0
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 1
16471: NEG
16472: PUSH
16473: LD_INT 1
16475: NEG
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: LD_INT 1
16483: PUSH
16484: LD_INT 1
16486: NEG
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PUSH
16492: LD_INT 2
16494: PUSH
16495: LD_INT 0
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PUSH
16502: LD_INT 2
16504: PUSH
16505: LD_INT 1
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: LD_INT 1
16514: NEG
16515: PUSH
16516: LD_INT 1
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: LD_INT 2
16525: NEG
16526: PUSH
16527: LD_INT 0
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: LD_INT 2
16536: NEG
16537: PUSH
16538: LD_INT 1
16540: NEG
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: PUSH
16546: LD_INT 2
16548: NEG
16549: PUSH
16550: LD_INT 1
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 3
16559: NEG
16560: PUSH
16561: LD_INT 0
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: PUSH
16568: LD_INT 3
16570: NEG
16571: PUSH
16572: LD_INT 1
16574: NEG
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16598: LD_ADDR_VAR 0 13
16602: PUSH
16603: LD_INT 0
16605: PUSH
16606: LD_INT 0
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 0
16615: PUSH
16616: LD_INT 1
16618: NEG
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: LD_INT 1
16626: PUSH
16627: LD_INT 0
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PUSH
16634: LD_INT 1
16636: PUSH
16637: LD_INT 1
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: PUSH
16644: LD_INT 0
16646: PUSH
16647: LD_INT 1
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: LD_INT 1
16656: NEG
16657: PUSH
16658: LD_INT 0
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PUSH
16665: LD_INT 1
16667: NEG
16668: PUSH
16669: LD_INT 1
16671: NEG
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: LD_INT 1
16679: NEG
16680: PUSH
16681: LD_INT 2
16683: NEG
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: LD_INT 2
16691: PUSH
16692: LD_INT 1
16694: PUSH
16695: EMPTY
16696: LIST
16697: LIST
16698: PUSH
16699: LD_INT 2
16701: PUSH
16702: LD_INT 2
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: PUSH
16709: LD_INT 1
16711: PUSH
16712: LD_INT 2
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: PUSH
16719: LD_INT 2
16721: NEG
16722: PUSH
16723: LD_INT 1
16725: NEG
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 2
16733: NEG
16734: PUSH
16735: LD_INT 2
16737: NEG
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: PUSH
16743: LD_INT 2
16745: NEG
16746: PUSH
16747: LD_INT 3
16749: NEG
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: PUSH
16755: LD_INT 3
16757: NEG
16758: PUSH
16759: LD_INT 2
16761: NEG
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: LD_INT 3
16769: NEG
16770: PUSH
16771: LD_INT 3
16773: NEG
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16797: LD_ADDR_VAR 0 14
16801: PUSH
16802: LD_INT 0
16804: PUSH
16805: LD_INT 0
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: LD_INT 0
16814: PUSH
16815: LD_INT 1
16817: NEG
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: PUSH
16823: LD_INT 1
16825: PUSH
16826: LD_INT 0
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: PUSH
16833: LD_INT 1
16835: PUSH
16836: LD_INT 1
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PUSH
16843: LD_INT 0
16845: PUSH
16846: LD_INT 1
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PUSH
16853: LD_INT 1
16855: NEG
16856: PUSH
16857: LD_INT 0
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: LD_INT 1
16866: NEG
16867: PUSH
16868: LD_INT 1
16870: NEG
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: PUSH
16876: LD_INT 1
16878: NEG
16879: PUSH
16880: LD_INT 2
16882: NEG
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: LD_INT 0
16890: PUSH
16891: LD_INT 2
16893: NEG
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PUSH
16899: LD_INT 1
16901: PUSH
16902: LD_INT 1
16904: NEG
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: PUSH
16910: LD_INT 1
16912: PUSH
16913: LD_INT 2
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PUSH
16920: LD_INT 0
16922: PUSH
16923: LD_INT 2
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PUSH
16930: LD_INT 1
16932: NEG
16933: PUSH
16934: LD_INT 1
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: PUSH
16941: LD_INT 1
16943: NEG
16944: PUSH
16945: LD_INT 3
16947: NEG
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: PUSH
16953: LD_INT 0
16955: PUSH
16956: LD_INT 3
16958: NEG
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PUSH
16964: LD_INT 1
16966: PUSH
16967: LD_INT 2
16969: NEG
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16993: LD_ADDR_VAR 0 15
16997: PUSH
16998: LD_INT 0
17000: PUSH
17001: LD_INT 0
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PUSH
17008: LD_INT 0
17010: PUSH
17011: LD_INT 1
17013: NEG
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: PUSH
17019: LD_INT 1
17021: PUSH
17022: LD_INT 0
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: PUSH
17029: LD_INT 1
17031: PUSH
17032: LD_INT 1
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: PUSH
17039: LD_INT 0
17041: PUSH
17042: LD_INT 1
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: PUSH
17049: LD_INT 1
17051: NEG
17052: PUSH
17053: LD_INT 0
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 1
17062: NEG
17063: PUSH
17064: LD_INT 1
17066: NEG
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: LD_INT 1
17074: PUSH
17075: LD_INT 1
17077: NEG
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: PUSH
17083: LD_INT 2
17085: PUSH
17086: LD_INT 0
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PUSH
17093: LD_INT 2
17095: PUSH
17096: LD_INT 1
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PUSH
17103: LD_INT 1
17105: NEG
17106: PUSH
17107: LD_INT 1
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 2
17116: NEG
17117: PUSH
17118: LD_INT 0
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: LD_INT 2
17127: NEG
17128: PUSH
17129: LD_INT 1
17131: NEG
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: LD_INT 2
17139: PUSH
17140: LD_INT 1
17142: NEG
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: PUSH
17148: LD_INT 3
17150: PUSH
17151: LD_INT 0
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PUSH
17158: LD_INT 3
17160: PUSH
17161: LD_INT 1
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17186: LD_ADDR_VAR 0 16
17190: PUSH
17191: LD_INT 0
17193: PUSH
17194: LD_INT 0
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: LD_INT 0
17203: PUSH
17204: LD_INT 1
17206: NEG
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 1
17214: PUSH
17215: LD_INT 0
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 1
17224: PUSH
17225: LD_INT 1
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: LD_INT 0
17234: PUSH
17235: LD_INT 1
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PUSH
17242: LD_INT 1
17244: NEG
17245: PUSH
17246: LD_INT 0
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: LD_INT 1
17255: NEG
17256: PUSH
17257: LD_INT 1
17259: NEG
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PUSH
17265: LD_INT 1
17267: NEG
17268: PUSH
17269: LD_INT 2
17271: NEG
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 2
17279: PUSH
17280: LD_INT 1
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 2
17289: PUSH
17290: LD_INT 2
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 1
17299: PUSH
17300: LD_INT 2
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 2
17309: NEG
17310: PUSH
17311: LD_INT 1
17313: NEG
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: LD_INT 2
17321: NEG
17322: PUSH
17323: LD_INT 2
17325: NEG
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: LD_INT 3
17333: PUSH
17334: LD_INT 2
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PUSH
17341: LD_INT 3
17343: PUSH
17344: LD_INT 3
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: PUSH
17351: LD_INT 2
17353: PUSH
17354: LD_INT 3
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17379: LD_ADDR_VAR 0 17
17383: PUSH
17384: LD_INT 0
17386: PUSH
17387: LD_INT 0
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: PUSH
17394: LD_INT 0
17396: PUSH
17397: LD_INT 1
17399: NEG
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 1
17407: PUSH
17408: LD_INT 0
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: PUSH
17415: LD_INT 1
17417: PUSH
17418: LD_INT 1
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: LD_INT 0
17427: PUSH
17428: LD_INT 1
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PUSH
17435: LD_INT 1
17437: NEG
17438: PUSH
17439: LD_INT 0
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: PUSH
17446: LD_INT 1
17448: NEG
17449: PUSH
17450: LD_INT 1
17452: NEG
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PUSH
17458: LD_INT 1
17460: NEG
17461: PUSH
17462: LD_INT 2
17464: NEG
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PUSH
17470: LD_INT 0
17472: PUSH
17473: LD_INT 2
17475: NEG
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: PUSH
17481: LD_INT 1
17483: PUSH
17484: LD_INT 1
17486: NEG
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PUSH
17492: LD_INT 2
17494: PUSH
17495: LD_INT 0
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: PUSH
17502: LD_INT 2
17504: PUSH
17505: LD_INT 1
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 2
17514: PUSH
17515: LD_INT 2
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: PUSH
17522: LD_INT 1
17524: PUSH
17525: LD_INT 2
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 0
17534: PUSH
17535: LD_INT 2
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 1
17544: NEG
17545: PUSH
17546: LD_INT 1
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PUSH
17553: LD_INT 2
17555: NEG
17556: PUSH
17557: LD_INT 0
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 2
17566: NEG
17567: PUSH
17568: LD_INT 1
17570: NEG
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PUSH
17576: LD_INT 2
17578: NEG
17579: PUSH
17580: LD_INT 2
17582: NEG
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17609: LD_ADDR_VAR 0 18
17613: PUSH
17614: LD_INT 0
17616: PUSH
17617: LD_INT 0
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 0
17626: PUSH
17627: LD_INT 1
17629: NEG
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 1
17637: PUSH
17638: LD_INT 0
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: LD_INT 1
17647: PUSH
17648: LD_INT 1
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: LD_INT 0
17657: PUSH
17658: LD_INT 1
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PUSH
17665: LD_INT 1
17667: NEG
17668: PUSH
17669: LD_INT 0
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: LD_INT 1
17678: NEG
17679: PUSH
17680: LD_INT 1
17682: NEG
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: LD_INT 1
17690: NEG
17691: PUSH
17692: LD_INT 2
17694: NEG
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 0
17702: PUSH
17703: LD_INT 2
17705: NEG
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 1
17713: PUSH
17714: LD_INT 1
17716: NEG
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: PUSH
17722: LD_INT 2
17724: PUSH
17725: LD_INT 0
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 2
17734: PUSH
17735: LD_INT 1
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 2
17744: PUSH
17745: LD_INT 2
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 1
17754: PUSH
17755: LD_INT 2
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: LD_INT 0
17764: PUSH
17765: LD_INT 2
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: LD_INT 1
17774: NEG
17775: PUSH
17776: LD_INT 1
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: PUSH
17783: LD_INT 2
17785: NEG
17786: PUSH
17787: LD_INT 0
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PUSH
17794: LD_INT 2
17796: NEG
17797: PUSH
17798: LD_INT 1
17800: NEG
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: PUSH
17806: LD_INT 2
17808: NEG
17809: PUSH
17810: LD_INT 2
17812: NEG
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17839: LD_ADDR_VAR 0 19
17843: PUSH
17844: LD_INT 0
17846: PUSH
17847: LD_INT 0
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 0
17856: PUSH
17857: LD_INT 1
17859: NEG
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 1
17867: PUSH
17868: LD_INT 0
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 1
17877: PUSH
17878: LD_INT 1
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PUSH
17885: LD_INT 0
17887: PUSH
17888: LD_INT 1
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 1
17897: NEG
17898: PUSH
17899: LD_INT 0
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: PUSH
17906: LD_INT 1
17908: NEG
17909: PUSH
17910: LD_INT 1
17912: NEG
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 1
17920: NEG
17921: PUSH
17922: LD_INT 2
17924: NEG
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 0
17932: PUSH
17933: LD_INT 2
17935: NEG
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: LD_INT 1
17943: PUSH
17944: LD_INT 1
17946: NEG
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: PUSH
17952: LD_INT 2
17954: PUSH
17955: LD_INT 0
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: PUSH
17962: LD_INT 2
17964: PUSH
17965: LD_INT 1
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PUSH
17972: LD_INT 2
17974: PUSH
17975: LD_INT 2
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: PUSH
17982: LD_INT 1
17984: PUSH
17985: LD_INT 2
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PUSH
17992: LD_INT 0
17994: PUSH
17995: LD_INT 2
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 1
18004: NEG
18005: PUSH
18006: LD_INT 1
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: LD_INT 2
18015: NEG
18016: PUSH
18017: LD_INT 0
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 2
18026: NEG
18027: PUSH
18028: LD_INT 1
18030: NEG
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: PUSH
18036: LD_INT 2
18038: NEG
18039: PUSH
18040: LD_INT 2
18042: NEG
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18069: LD_ADDR_VAR 0 20
18073: PUSH
18074: LD_INT 0
18076: PUSH
18077: LD_INT 0
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 0
18086: PUSH
18087: LD_INT 1
18089: NEG
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 1
18097: PUSH
18098: LD_INT 0
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: LD_INT 1
18107: PUSH
18108: LD_INT 1
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 0
18117: PUSH
18118: LD_INT 1
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 1
18127: NEG
18128: PUSH
18129: LD_INT 0
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 1
18138: NEG
18139: PUSH
18140: LD_INT 1
18142: NEG
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 1
18150: NEG
18151: PUSH
18152: LD_INT 2
18154: NEG
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: LD_INT 0
18162: PUSH
18163: LD_INT 2
18165: NEG
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 1
18173: PUSH
18174: LD_INT 1
18176: NEG
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 2
18184: PUSH
18185: LD_INT 0
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: LD_INT 2
18194: PUSH
18195: LD_INT 1
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: LD_INT 2
18204: PUSH
18205: LD_INT 2
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 1
18214: PUSH
18215: LD_INT 2
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 0
18224: PUSH
18225: LD_INT 2
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 1
18234: NEG
18235: PUSH
18236: LD_INT 1
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 2
18245: NEG
18246: PUSH
18247: LD_INT 0
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PUSH
18254: LD_INT 2
18256: NEG
18257: PUSH
18258: LD_INT 1
18260: NEG
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: PUSH
18266: LD_INT 2
18268: NEG
18269: PUSH
18270: LD_INT 2
18272: NEG
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18299: LD_ADDR_VAR 0 21
18303: PUSH
18304: LD_INT 0
18306: PUSH
18307: LD_INT 0
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 0
18316: PUSH
18317: LD_INT 1
18319: NEG
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 1
18327: PUSH
18328: LD_INT 0
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: LD_INT 1
18337: PUSH
18338: LD_INT 1
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 0
18347: PUSH
18348: LD_INT 1
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 1
18357: NEG
18358: PUSH
18359: LD_INT 0
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 1
18368: NEG
18369: PUSH
18370: LD_INT 1
18372: NEG
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 1
18380: NEG
18381: PUSH
18382: LD_INT 2
18384: NEG
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: PUSH
18390: LD_INT 0
18392: PUSH
18393: LD_INT 2
18395: NEG
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 1
18403: PUSH
18404: LD_INT 1
18406: NEG
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 2
18414: PUSH
18415: LD_INT 0
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 2
18424: PUSH
18425: LD_INT 1
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: LD_INT 2
18434: PUSH
18435: LD_INT 2
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 1
18444: PUSH
18445: LD_INT 2
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: LD_INT 0
18454: PUSH
18455: LD_INT 2
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 1
18464: NEG
18465: PUSH
18466: LD_INT 1
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: LD_INT 2
18475: NEG
18476: PUSH
18477: LD_INT 0
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: LD_INT 2
18486: NEG
18487: PUSH
18488: LD_INT 1
18490: NEG
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 2
18498: NEG
18499: PUSH
18500: LD_INT 2
18502: NEG
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18529: LD_ADDR_VAR 0 22
18533: PUSH
18534: LD_INT 0
18536: PUSH
18537: LD_INT 0
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: LD_INT 0
18546: PUSH
18547: LD_INT 1
18549: NEG
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: LD_INT 1
18557: PUSH
18558: LD_INT 0
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PUSH
18565: LD_INT 1
18567: PUSH
18568: LD_INT 1
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 0
18577: PUSH
18578: LD_INT 1
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 1
18587: NEG
18588: PUSH
18589: LD_INT 0
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 1
18598: NEG
18599: PUSH
18600: LD_INT 1
18602: NEG
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: LD_INT 1
18610: NEG
18611: PUSH
18612: LD_INT 2
18614: NEG
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 0
18622: PUSH
18623: LD_INT 2
18625: NEG
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 1
18633: PUSH
18634: LD_INT 1
18636: NEG
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: LD_INT 2
18644: PUSH
18645: LD_INT 0
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: LD_INT 2
18654: PUSH
18655: LD_INT 1
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 2
18664: PUSH
18665: LD_INT 2
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 1
18674: PUSH
18675: LD_INT 2
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: LD_INT 0
18684: PUSH
18685: LD_INT 2
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 1
18694: NEG
18695: PUSH
18696: LD_INT 1
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 2
18705: NEG
18706: PUSH
18707: LD_INT 0
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 2
18716: NEG
18717: PUSH
18718: LD_INT 1
18720: NEG
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 2
18728: NEG
18729: PUSH
18730: LD_INT 2
18732: NEG
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18759: LD_ADDR_VAR 0 23
18763: PUSH
18764: LD_INT 0
18766: PUSH
18767: LD_INT 0
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: LD_INT 0
18776: PUSH
18777: LD_INT 1
18779: NEG
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 1
18787: PUSH
18788: LD_INT 0
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 1
18797: PUSH
18798: LD_INT 1
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 0
18807: PUSH
18808: LD_INT 1
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 1
18817: NEG
18818: PUSH
18819: LD_INT 0
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 1
18828: NEG
18829: PUSH
18830: LD_INT 1
18832: NEG
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 1
18840: NEG
18841: PUSH
18842: LD_INT 2
18844: NEG
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 0
18852: PUSH
18853: LD_INT 2
18855: NEG
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: PUSH
18861: LD_INT 1
18863: PUSH
18864: LD_INT 1
18866: NEG
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 2
18874: PUSH
18875: LD_INT 0
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: LD_INT 2
18884: PUSH
18885: LD_INT 1
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PUSH
18892: LD_INT 2
18894: PUSH
18895: LD_INT 2
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PUSH
18902: LD_INT 1
18904: PUSH
18905: LD_INT 2
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: PUSH
18912: LD_INT 0
18914: PUSH
18915: LD_INT 2
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 1
18924: NEG
18925: PUSH
18926: LD_INT 1
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 2
18935: NEG
18936: PUSH
18937: LD_INT 0
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 2
18946: NEG
18947: PUSH
18948: LD_INT 1
18950: NEG
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: LD_INT 2
18958: NEG
18959: PUSH
18960: LD_INT 2
18962: NEG
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 2
18970: NEG
18971: PUSH
18972: LD_INT 3
18974: NEG
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 1
18982: NEG
18983: PUSH
18984: LD_INT 3
18986: NEG
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 1
18994: PUSH
18995: LD_INT 2
18997: NEG
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 2
19005: PUSH
19006: LD_INT 1
19008: NEG
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19039: LD_ADDR_VAR 0 24
19043: PUSH
19044: LD_INT 0
19046: PUSH
19047: LD_INT 0
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: LD_INT 0
19056: PUSH
19057: LD_INT 1
19059: NEG
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 1
19067: PUSH
19068: LD_INT 0
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 1
19077: PUSH
19078: LD_INT 1
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 0
19087: PUSH
19088: LD_INT 1
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 1
19097: NEG
19098: PUSH
19099: LD_INT 0
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: LD_INT 1
19108: NEG
19109: PUSH
19110: LD_INT 1
19112: NEG
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 1
19120: NEG
19121: PUSH
19122: LD_INT 2
19124: NEG
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: LD_INT 0
19132: PUSH
19133: LD_INT 2
19135: NEG
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 1
19143: PUSH
19144: LD_INT 1
19146: NEG
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PUSH
19152: LD_INT 2
19154: PUSH
19155: LD_INT 0
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 2
19164: PUSH
19165: LD_INT 1
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 2
19174: PUSH
19175: LD_INT 2
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: LD_INT 1
19184: PUSH
19185: LD_INT 2
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 0
19194: PUSH
19195: LD_INT 2
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: LD_INT 1
19204: NEG
19205: PUSH
19206: LD_INT 1
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: LD_INT 2
19215: NEG
19216: PUSH
19217: LD_INT 0
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: PUSH
19224: LD_INT 2
19226: NEG
19227: PUSH
19228: LD_INT 1
19230: NEG
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 2
19238: NEG
19239: PUSH
19240: LD_INT 2
19242: NEG
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 1
19250: PUSH
19251: LD_INT 2
19253: NEG
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: LD_INT 2
19261: PUSH
19262: LD_INT 1
19264: NEG
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 3
19272: PUSH
19273: LD_INT 1
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: PUSH
19280: LD_INT 3
19282: PUSH
19283: LD_INT 2
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19315: LD_ADDR_VAR 0 25
19319: PUSH
19320: LD_INT 0
19322: PUSH
19323: LD_INT 0
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 0
19332: PUSH
19333: LD_INT 1
19335: NEG
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: LD_INT 1
19343: PUSH
19344: LD_INT 0
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 1
19353: PUSH
19354: LD_INT 1
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 0
19363: PUSH
19364: LD_INT 1
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 1
19373: NEG
19374: PUSH
19375: LD_INT 0
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: PUSH
19382: LD_INT 1
19384: NEG
19385: PUSH
19386: LD_INT 1
19388: NEG
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 1
19396: NEG
19397: PUSH
19398: LD_INT 2
19400: NEG
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 0
19408: PUSH
19409: LD_INT 2
19411: NEG
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 1
19419: PUSH
19420: LD_INT 1
19422: NEG
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: LD_INT 2
19430: PUSH
19431: LD_INT 0
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: LD_INT 2
19440: PUSH
19441: LD_INT 1
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: LD_INT 2
19450: PUSH
19451: LD_INT 2
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 1
19460: PUSH
19461: LD_INT 2
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 0
19470: PUSH
19471: LD_INT 2
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 1
19480: NEG
19481: PUSH
19482: LD_INT 1
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 2
19491: NEG
19492: PUSH
19493: LD_INT 0
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 2
19502: NEG
19503: PUSH
19504: LD_INT 1
19506: NEG
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 2
19514: NEG
19515: PUSH
19516: LD_INT 2
19518: NEG
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 3
19526: PUSH
19527: LD_INT 1
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 3
19536: PUSH
19537: LD_INT 2
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 2
19546: PUSH
19547: LD_INT 3
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: LD_INT 1
19556: PUSH
19557: LD_INT 3
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19589: LD_ADDR_VAR 0 26
19593: PUSH
19594: LD_INT 0
19596: PUSH
19597: LD_INT 0
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 0
19606: PUSH
19607: LD_INT 1
19609: NEG
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 1
19617: PUSH
19618: LD_INT 0
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: LD_INT 1
19627: PUSH
19628: LD_INT 1
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: LD_INT 0
19637: PUSH
19638: LD_INT 1
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: LD_INT 1
19647: NEG
19648: PUSH
19649: LD_INT 0
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PUSH
19656: LD_INT 1
19658: NEG
19659: PUSH
19660: LD_INT 1
19662: NEG
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 1
19670: NEG
19671: PUSH
19672: LD_INT 2
19674: NEG
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 0
19682: PUSH
19683: LD_INT 2
19685: NEG
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 1
19693: PUSH
19694: LD_INT 1
19696: NEG
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 2
19704: PUSH
19705: LD_INT 0
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 2
19714: PUSH
19715: LD_INT 1
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PUSH
19722: LD_INT 2
19724: PUSH
19725: LD_INT 2
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 1
19734: PUSH
19735: LD_INT 2
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 0
19744: PUSH
19745: LD_INT 2
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 1
19754: NEG
19755: PUSH
19756: LD_INT 1
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 2
19765: NEG
19766: PUSH
19767: LD_INT 0
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 2
19776: NEG
19777: PUSH
19778: LD_INT 1
19780: NEG
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: PUSH
19786: LD_INT 2
19788: NEG
19789: PUSH
19790: LD_INT 2
19792: NEG
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PUSH
19798: LD_INT 2
19800: PUSH
19801: LD_INT 3
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 1
19810: PUSH
19811: LD_INT 3
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 1
19820: NEG
19821: PUSH
19822: LD_INT 2
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 2
19831: NEG
19832: PUSH
19833: LD_INT 1
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19865: LD_ADDR_VAR 0 27
19869: PUSH
19870: LD_INT 0
19872: PUSH
19873: LD_INT 0
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 0
19882: PUSH
19883: LD_INT 1
19885: NEG
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 1
19893: PUSH
19894: LD_INT 0
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 1
19903: PUSH
19904: LD_INT 1
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 0
19913: PUSH
19914: LD_INT 1
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 1
19923: NEG
19924: PUSH
19925: LD_INT 0
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: LD_INT 1
19934: NEG
19935: PUSH
19936: LD_INT 1
19938: NEG
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 1
19946: NEG
19947: PUSH
19948: LD_INT 2
19950: NEG
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 0
19958: PUSH
19959: LD_INT 2
19961: NEG
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: PUSH
19967: LD_INT 1
19969: PUSH
19970: LD_INT 1
19972: NEG
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 2
19980: PUSH
19981: LD_INT 0
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PUSH
19988: LD_INT 2
19990: PUSH
19991: LD_INT 1
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: PUSH
19998: LD_INT 2
20000: PUSH
20001: LD_INT 2
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: PUSH
20008: LD_INT 1
20010: PUSH
20011: LD_INT 2
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 0
20020: PUSH
20021: LD_INT 2
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 1
20030: NEG
20031: PUSH
20032: LD_INT 1
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: LD_INT 2
20041: NEG
20042: PUSH
20043: LD_INT 0
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PUSH
20050: LD_INT 2
20052: NEG
20053: PUSH
20054: LD_INT 1
20056: NEG
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: PUSH
20062: LD_INT 2
20064: NEG
20065: PUSH
20066: LD_INT 2
20068: NEG
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: LD_INT 1
20076: NEG
20077: PUSH
20078: LD_INT 2
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: LD_INT 2
20087: NEG
20088: PUSH
20089: LD_INT 1
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 3
20098: NEG
20099: PUSH
20100: LD_INT 1
20102: NEG
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 3
20110: NEG
20111: PUSH
20112: LD_INT 2
20114: NEG
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20145: LD_ADDR_VAR 0 28
20149: PUSH
20150: LD_INT 0
20152: PUSH
20153: LD_INT 0
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 0
20162: PUSH
20163: LD_INT 1
20165: NEG
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 1
20173: PUSH
20174: LD_INT 0
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 1
20183: PUSH
20184: LD_INT 1
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: LD_INT 0
20193: PUSH
20194: LD_INT 1
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: LD_INT 1
20203: NEG
20204: PUSH
20205: LD_INT 0
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 1
20214: NEG
20215: PUSH
20216: LD_INT 1
20218: NEG
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 1
20226: NEG
20227: PUSH
20228: LD_INT 2
20230: NEG
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 0
20238: PUSH
20239: LD_INT 2
20241: NEG
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: LD_INT 1
20249: PUSH
20250: LD_INT 1
20252: NEG
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 2
20260: PUSH
20261: LD_INT 0
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 2
20270: PUSH
20271: LD_INT 1
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 2
20280: PUSH
20281: LD_INT 2
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: LD_INT 1
20290: PUSH
20291: LD_INT 2
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: LD_INT 0
20300: PUSH
20301: LD_INT 2
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 1
20310: NEG
20311: PUSH
20312: LD_INT 1
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 2
20321: NEG
20322: PUSH
20323: LD_INT 0
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 2
20332: NEG
20333: PUSH
20334: LD_INT 1
20336: NEG
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 2
20344: NEG
20345: PUSH
20346: LD_INT 2
20348: NEG
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: LD_INT 2
20356: NEG
20357: PUSH
20358: LD_INT 3
20360: NEG
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 1
20368: NEG
20369: PUSH
20370: LD_INT 3
20372: NEG
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: LD_INT 3
20380: NEG
20381: PUSH
20382: LD_INT 1
20384: NEG
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 3
20392: NEG
20393: PUSH
20394: LD_INT 2
20396: NEG
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20427: LD_ADDR_VAR 0 29
20431: PUSH
20432: LD_INT 0
20434: PUSH
20435: LD_INT 0
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 0
20444: PUSH
20445: LD_INT 1
20447: NEG
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 1
20455: PUSH
20456: LD_INT 0
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 1
20465: PUSH
20466: LD_INT 1
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 0
20475: PUSH
20476: LD_INT 1
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PUSH
20483: LD_INT 1
20485: NEG
20486: PUSH
20487: LD_INT 0
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 1
20496: NEG
20497: PUSH
20498: LD_INT 1
20500: NEG
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: PUSH
20506: LD_INT 1
20508: NEG
20509: PUSH
20510: LD_INT 2
20512: NEG
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 0
20520: PUSH
20521: LD_INT 2
20523: NEG
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: LD_INT 1
20531: PUSH
20532: LD_INT 1
20534: NEG
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 2
20542: PUSH
20543: LD_INT 0
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: LD_INT 2
20552: PUSH
20553: LD_INT 1
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 1
20562: PUSH
20563: LD_INT 2
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 0
20572: PUSH
20573: LD_INT 2
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: LD_INT 1
20582: NEG
20583: PUSH
20584: LD_INT 1
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 2
20593: NEG
20594: PUSH
20595: LD_INT 1
20597: NEG
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 2
20605: NEG
20606: PUSH
20607: LD_INT 2
20609: NEG
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 2
20617: NEG
20618: PUSH
20619: LD_INT 3
20621: NEG
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PUSH
20627: LD_INT 2
20629: PUSH
20630: LD_INT 1
20632: NEG
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 3
20640: PUSH
20641: LD_INT 1
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 1
20650: PUSH
20651: LD_INT 3
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 1
20660: NEG
20661: PUSH
20662: LD_INT 2
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 3
20671: NEG
20672: PUSH
20673: LD_INT 2
20675: NEG
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20706: LD_ADDR_VAR 0 30
20710: PUSH
20711: LD_INT 0
20713: PUSH
20714: LD_INT 0
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 0
20723: PUSH
20724: LD_INT 1
20726: NEG
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: LD_INT 1
20734: PUSH
20735: LD_INT 0
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: LD_INT 1
20744: PUSH
20745: LD_INT 1
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: LD_INT 0
20754: PUSH
20755: LD_INT 1
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: LD_INT 1
20764: NEG
20765: PUSH
20766: LD_INT 0
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: LD_INT 1
20775: NEG
20776: PUSH
20777: LD_INT 1
20779: NEG
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 1
20787: NEG
20788: PUSH
20789: LD_INT 2
20791: NEG
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 0
20799: PUSH
20800: LD_INT 2
20802: NEG
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 1
20810: PUSH
20811: LD_INT 1
20813: NEG
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 2
20821: PUSH
20822: LD_INT 0
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 2
20831: PUSH
20832: LD_INT 1
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 2
20841: PUSH
20842: LD_INT 2
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: LD_INT 1
20851: PUSH
20852: LD_INT 2
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 1
20861: NEG
20862: PUSH
20863: LD_INT 1
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PUSH
20870: LD_INT 2
20872: NEG
20873: PUSH
20874: LD_INT 0
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 2
20883: NEG
20884: PUSH
20885: LD_INT 1
20887: NEG
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 1
20895: NEG
20896: PUSH
20897: LD_INT 3
20899: NEG
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 1
20907: PUSH
20908: LD_INT 2
20910: NEG
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 3
20918: PUSH
20919: LD_INT 2
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 2
20928: PUSH
20929: LD_INT 3
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 2
20938: NEG
20939: PUSH
20940: LD_INT 1
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 3
20949: NEG
20950: PUSH
20951: LD_INT 1
20953: NEG
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20984: LD_ADDR_VAR 0 31
20988: PUSH
20989: LD_INT 0
20991: PUSH
20992: LD_INT 0
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 0
21001: PUSH
21002: LD_INT 1
21004: NEG
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 1
21012: PUSH
21013: LD_INT 0
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 1
21022: PUSH
21023: LD_INT 1
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 0
21032: PUSH
21033: LD_INT 1
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 1
21042: NEG
21043: PUSH
21044: LD_INT 0
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 1
21053: NEG
21054: PUSH
21055: LD_INT 1
21057: NEG
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 1
21065: NEG
21066: PUSH
21067: LD_INT 2
21069: NEG
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 1
21077: PUSH
21078: LD_INT 1
21080: NEG
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PUSH
21086: LD_INT 2
21088: PUSH
21089: LD_INT 0
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PUSH
21096: LD_INT 2
21098: PUSH
21099: LD_INT 1
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: LD_INT 2
21108: PUSH
21109: LD_INT 2
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 1
21118: PUSH
21119: LD_INT 2
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 0
21128: PUSH
21129: LD_INT 2
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: LD_INT 1
21138: NEG
21139: PUSH
21140: LD_INT 1
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 2
21149: NEG
21150: PUSH
21151: LD_INT 1
21153: NEG
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PUSH
21159: LD_INT 2
21161: NEG
21162: PUSH
21163: LD_INT 2
21165: NEG
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: LD_INT 2
21173: NEG
21174: PUSH
21175: LD_INT 3
21177: NEG
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 2
21185: PUSH
21186: LD_INT 1
21188: NEG
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: PUSH
21194: LD_INT 3
21196: PUSH
21197: LD_INT 1
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PUSH
21204: LD_INT 1
21206: PUSH
21207: LD_INT 3
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 1
21216: NEG
21217: PUSH
21218: LD_INT 2
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: LD_INT 3
21227: NEG
21228: PUSH
21229: LD_INT 2
21231: NEG
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21262: LD_ADDR_VAR 0 32
21266: PUSH
21267: LD_INT 0
21269: PUSH
21270: LD_INT 0
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: PUSH
21277: LD_INT 0
21279: PUSH
21280: LD_INT 1
21282: NEG
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: PUSH
21288: LD_INT 1
21290: PUSH
21291: LD_INT 0
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 1
21300: PUSH
21301: LD_INT 1
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 0
21310: PUSH
21311: LD_INT 1
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: LD_INT 1
21320: NEG
21321: PUSH
21322: LD_INT 0
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: LD_INT 1
21331: NEG
21332: PUSH
21333: LD_INT 1
21335: NEG
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 1
21343: NEG
21344: PUSH
21345: LD_INT 2
21347: NEG
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: LD_INT 0
21355: PUSH
21356: LD_INT 2
21358: NEG
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 1
21366: PUSH
21367: LD_INT 1
21369: NEG
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 2
21377: PUSH
21378: LD_INT 1
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: LD_INT 2
21387: PUSH
21388: LD_INT 2
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 1
21397: PUSH
21398: LD_INT 2
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PUSH
21405: LD_INT 0
21407: PUSH
21408: LD_INT 2
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 1
21417: NEG
21418: PUSH
21419: LD_INT 1
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 2
21428: NEG
21429: PUSH
21430: LD_INT 0
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 2
21439: NEG
21440: PUSH
21441: LD_INT 1
21443: NEG
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 1
21451: NEG
21452: PUSH
21453: LD_INT 3
21455: NEG
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 1
21463: PUSH
21464: LD_INT 2
21466: NEG
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 3
21474: PUSH
21475: LD_INT 2
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PUSH
21482: LD_INT 2
21484: PUSH
21485: LD_INT 3
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: PUSH
21492: LD_INT 2
21494: NEG
21495: PUSH
21496: LD_INT 1
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 3
21505: NEG
21506: PUSH
21507: LD_INT 1
21509: NEG
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21540: LD_ADDR_VAR 0 33
21544: PUSH
21545: LD_INT 0
21547: PUSH
21548: LD_INT 0
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 0
21557: PUSH
21558: LD_INT 1
21560: NEG
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 1
21568: PUSH
21569: LD_INT 0
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 1
21578: PUSH
21579: LD_INT 1
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 0
21588: PUSH
21589: LD_INT 1
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 1
21598: NEG
21599: PUSH
21600: LD_INT 0
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PUSH
21607: LD_INT 1
21609: NEG
21610: PUSH
21611: LD_INT 1
21613: NEG
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 1
21621: NEG
21622: PUSH
21623: LD_INT 2
21625: NEG
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 1
21633: PUSH
21634: LD_INT 1
21636: NEG
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 2
21644: PUSH
21645: LD_INT 0
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 2
21654: PUSH
21655: LD_INT 1
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 1
21664: PUSH
21665: LD_INT 2
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 0
21674: PUSH
21675: LD_INT 2
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PUSH
21682: LD_INT 1
21684: NEG
21685: PUSH
21686: LD_INT 1
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 2
21695: NEG
21696: PUSH
21697: LD_INT 0
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: PUSH
21704: LD_INT 2
21706: NEG
21707: PUSH
21708: LD_INT 1
21710: NEG
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PUSH
21716: LD_INT 2
21718: NEG
21719: PUSH
21720: LD_INT 2
21722: NEG
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 2
21730: NEG
21731: PUSH
21732: LD_INT 3
21734: NEG
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 2
21742: PUSH
21743: LD_INT 1
21745: NEG
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: LD_INT 3
21753: PUSH
21754: LD_INT 1
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: LD_INT 1
21763: PUSH
21764: LD_INT 3
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: LD_INT 1
21773: NEG
21774: PUSH
21775: LD_INT 2
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 3
21784: NEG
21785: PUSH
21786: LD_INT 2
21788: NEG
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21819: LD_ADDR_VAR 0 34
21823: PUSH
21824: LD_INT 0
21826: PUSH
21827: LD_INT 0
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 0
21836: PUSH
21837: LD_INT 1
21839: NEG
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: LD_INT 1
21847: PUSH
21848: LD_INT 0
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 1
21857: PUSH
21858: LD_INT 1
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 0
21867: PUSH
21868: LD_INT 1
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: LD_INT 1
21877: NEG
21878: PUSH
21879: LD_INT 0
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: PUSH
21886: LD_INT 1
21888: NEG
21889: PUSH
21890: LD_INT 1
21892: NEG
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PUSH
21898: LD_INT 1
21900: NEG
21901: PUSH
21902: LD_INT 2
21904: NEG
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PUSH
21910: LD_INT 0
21912: PUSH
21913: LD_INT 2
21915: NEG
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 1
21923: PUSH
21924: LD_INT 1
21926: NEG
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 2
21934: PUSH
21935: LD_INT 1
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 2
21944: PUSH
21945: LD_INT 2
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: PUSH
21952: LD_INT 1
21954: PUSH
21955: LD_INT 2
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: PUSH
21962: LD_INT 1
21964: NEG
21965: PUSH
21966: LD_INT 1
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 2
21975: NEG
21976: PUSH
21977: LD_INT 0
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 2
21986: NEG
21987: PUSH
21988: LD_INT 1
21990: NEG
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: LD_INT 2
21998: NEG
21999: PUSH
22000: LD_INT 2
22002: NEG
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 1
22010: NEG
22011: PUSH
22012: LD_INT 3
22014: NEG
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: LD_INT 1
22022: PUSH
22023: LD_INT 2
22025: NEG
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 3
22033: PUSH
22034: LD_INT 2
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 2
22043: PUSH
22044: LD_INT 3
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: LD_INT 2
22053: NEG
22054: PUSH
22055: LD_INT 1
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: PUSH
22062: LD_INT 3
22064: NEG
22065: PUSH
22066: LD_INT 1
22068: NEG
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22099: LD_ADDR_VAR 0 35
22103: PUSH
22104: LD_INT 0
22106: PUSH
22107: LD_INT 0
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 0
22116: PUSH
22117: LD_INT 1
22119: NEG
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 1
22127: PUSH
22128: LD_INT 0
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: LD_INT 1
22137: PUSH
22138: LD_INT 1
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 0
22147: PUSH
22148: LD_INT 1
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 1
22157: NEG
22158: PUSH
22159: LD_INT 0
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: LD_INT 1
22168: NEG
22169: PUSH
22170: LD_INT 1
22172: NEG
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 2
22180: PUSH
22181: LD_INT 1
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PUSH
22188: LD_INT 2
22190: NEG
22191: PUSH
22192: LD_INT 1
22194: NEG
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22211: LD_ADDR_VAR 0 36
22215: PUSH
22216: LD_INT 0
22218: PUSH
22219: LD_INT 0
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PUSH
22226: LD_INT 0
22228: PUSH
22229: LD_INT 1
22231: NEG
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PUSH
22237: LD_INT 1
22239: PUSH
22240: LD_INT 0
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 1
22249: PUSH
22250: LD_INT 1
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PUSH
22257: LD_INT 0
22259: PUSH
22260: LD_INT 1
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PUSH
22267: LD_INT 1
22269: NEG
22270: PUSH
22271: LD_INT 0
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 1
22280: NEG
22281: PUSH
22282: LD_INT 1
22284: NEG
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 1
22292: NEG
22293: PUSH
22294: LD_INT 2
22296: NEG
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 1
22304: PUSH
22305: LD_INT 2
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22323: LD_ADDR_VAR 0 37
22327: PUSH
22328: LD_INT 0
22330: PUSH
22331: LD_INT 0
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 0
22340: PUSH
22341: LD_INT 1
22343: NEG
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 1
22351: PUSH
22352: LD_INT 0
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 1
22361: PUSH
22362: LD_INT 1
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 0
22371: PUSH
22372: LD_INT 1
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 1
22381: NEG
22382: PUSH
22383: LD_INT 0
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 1
22392: NEG
22393: PUSH
22394: LD_INT 1
22396: NEG
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 1
22404: PUSH
22405: LD_INT 1
22407: NEG
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 1
22415: NEG
22416: PUSH
22417: LD_INT 1
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22435: LD_ADDR_VAR 0 38
22439: PUSH
22440: LD_INT 0
22442: PUSH
22443: LD_INT 0
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: LD_INT 0
22452: PUSH
22453: LD_INT 1
22455: NEG
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: LD_INT 1
22463: PUSH
22464: LD_INT 0
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 1
22473: PUSH
22474: LD_INT 1
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 0
22483: PUSH
22484: LD_INT 1
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 1
22493: NEG
22494: PUSH
22495: LD_INT 0
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: LD_INT 1
22504: NEG
22505: PUSH
22506: LD_INT 1
22508: NEG
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 2
22516: PUSH
22517: LD_INT 1
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PUSH
22524: LD_INT 2
22526: NEG
22527: PUSH
22528: LD_INT 1
22530: NEG
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22547: LD_ADDR_VAR 0 39
22551: PUSH
22552: LD_INT 0
22554: PUSH
22555: LD_INT 0
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 0
22564: PUSH
22565: LD_INT 1
22567: NEG
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 1
22575: PUSH
22576: LD_INT 0
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 1
22585: PUSH
22586: LD_INT 1
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 0
22595: PUSH
22596: LD_INT 1
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 1
22605: NEG
22606: PUSH
22607: LD_INT 0
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: LD_INT 1
22616: NEG
22617: PUSH
22618: LD_INT 1
22620: NEG
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 1
22628: NEG
22629: PUSH
22630: LD_INT 2
22632: NEG
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: LD_INT 1
22640: PUSH
22641: LD_INT 2
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22659: LD_ADDR_VAR 0 40
22663: PUSH
22664: LD_INT 0
22666: PUSH
22667: LD_INT 0
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 0
22676: PUSH
22677: LD_INT 1
22679: NEG
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: LD_INT 1
22687: PUSH
22688: LD_INT 0
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 1
22697: PUSH
22698: LD_INT 1
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: LD_INT 0
22707: PUSH
22708: LD_INT 1
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 1
22717: NEG
22718: PUSH
22719: LD_INT 0
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PUSH
22726: LD_INT 1
22728: NEG
22729: PUSH
22730: LD_INT 1
22732: NEG
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 1
22740: PUSH
22741: LD_INT 1
22743: NEG
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 1
22751: NEG
22752: PUSH
22753: LD_INT 1
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22771: LD_ADDR_VAR 0 41
22775: PUSH
22776: LD_INT 0
22778: PUSH
22779: LD_INT 0
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 0
22788: PUSH
22789: LD_INT 1
22791: NEG
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: PUSH
22797: LD_INT 1
22799: PUSH
22800: LD_INT 0
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PUSH
22807: LD_INT 1
22809: PUSH
22810: LD_INT 1
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: PUSH
22817: LD_INT 0
22819: PUSH
22820: LD_INT 1
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 1
22829: NEG
22830: PUSH
22831: LD_INT 0
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 1
22840: NEG
22841: PUSH
22842: LD_INT 1
22844: NEG
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 1
22852: NEG
22853: PUSH
22854: LD_INT 2
22856: NEG
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 1
22864: PUSH
22865: LD_INT 1
22867: NEG
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 2
22875: PUSH
22876: LD_INT 0
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: LD_INT 2
22885: PUSH
22886: LD_INT 1
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 2
22895: PUSH
22896: LD_INT 2
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 1
22905: PUSH
22906: LD_INT 2
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PUSH
22913: LD_INT 1
22915: NEG
22916: PUSH
22917: LD_INT 1
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 2
22926: NEG
22927: PUSH
22928: LD_INT 0
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 2
22937: NEG
22938: PUSH
22939: LD_INT 1
22941: NEG
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 2
22949: NEG
22950: PUSH
22951: LD_INT 2
22953: NEG
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 2
22961: NEG
22962: PUSH
22963: LD_INT 3
22965: NEG
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 2
22973: PUSH
22974: LD_INT 1
22976: NEG
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 3
22984: PUSH
22985: LD_INT 0
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 3
22994: PUSH
22995: LD_INT 1
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 3
23004: PUSH
23005: LD_INT 2
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 3
23014: PUSH
23015: LD_INT 3
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 2
23024: PUSH
23025: LD_INT 3
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 2
23034: NEG
23035: PUSH
23036: LD_INT 1
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 3
23045: NEG
23046: PUSH
23047: LD_INT 0
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: LD_INT 3
23056: NEG
23057: PUSH
23058: LD_INT 1
23060: NEG
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 3
23068: NEG
23069: PUSH
23070: LD_INT 2
23072: NEG
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 3
23080: NEG
23081: PUSH
23082: LD_INT 3
23084: NEG
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23121: LD_ADDR_VAR 0 42
23125: PUSH
23126: LD_INT 0
23128: PUSH
23129: LD_INT 0
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 0
23138: PUSH
23139: LD_INT 1
23141: NEG
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: LD_INT 1
23149: PUSH
23150: LD_INT 0
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 1
23159: PUSH
23160: LD_INT 1
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 0
23169: PUSH
23170: LD_INT 1
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 1
23179: NEG
23180: PUSH
23181: LD_INT 0
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: LD_INT 1
23190: NEG
23191: PUSH
23192: LD_INT 1
23194: NEG
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 1
23202: NEG
23203: PUSH
23204: LD_INT 2
23206: NEG
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 0
23214: PUSH
23215: LD_INT 2
23217: NEG
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 1
23225: PUSH
23226: LD_INT 1
23228: NEG
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 2
23236: PUSH
23237: LD_INT 1
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PUSH
23244: LD_INT 2
23246: PUSH
23247: LD_INT 2
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 1
23256: PUSH
23257: LD_INT 2
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 0
23266: PUSH
23267: LD_INT 2
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 1
23276: NEG
23277: PUSH
23278: LD_INT 1
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PUSH
23285: LD_INT 2
23287: NEG
23288: PUSH
23289: LD_INT 1
23291: NEG
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 2
23299: NEG
23300: PUSH
23301: LD_INT 2
23303: NEG
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: LD_INT 2
23311: NEG
23312: PUSH
23313: LD_INT 3
23315: NEG
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: LD_INT 1
23323: NEG
23324: PUSH
23325: LD_INT 3
23327: NEG
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 0
23335: PUSH
23336: LD_INT 3
23338: NEG
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 1
23346: PUSH
23347: LD_INT 2
23349: NEG
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 3
23357: PUSH
23358: LD_INT 2
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: LD_INT 3
23367: PUSH
23368: LD_INT 3
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 2
23377: PUSH
23378: LD_INT 3
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 1
23387: PUSH
23388: LD_INT 3
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 0
23397: PUSH
23398: LD_INT 3
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: LD_INT 1
23407: NEG
23408: PUSH
23409: LD_INT 2
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PUSH
23416: LD_INT 3
23418: NEG
23419: PUSH
23420: LD_INT 2
23422: NEG
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 3
23430: NEG
23431: PUSH
23432: LD_INT 3
23434: NEG
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23471: LD_ADDR_VAR 0 43
23475: PUSH
23476: LD_INT 0
23478: PUSH
23479: LD_INT 0
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 0
23488: PUSH
23489: LD_INT 1
23491: NEG
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 1
23499: PUSH
23500: LD_INT 0
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 1
23509: PUSH
23510: LD_INT 1
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PUSH
23517: LD_INT 0
23519: PUSH
23520: LD_INT 1
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 1
23529: NEG
23530: PUSH
23531: LD_INT 0
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 1
23540: NEG
23541: PUSH
23542: LD_INT 1
23544: NEG
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 1
23552: NEG
23553: PUSH
23554: LD_INT 2
23556: NEG
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 0
23564: PUSH
23565: LD_INT 2
23567: NEG
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PUSH
23573: LD_INT 1
23575: PUSH
23576: LD_INT 1
23578: NEG
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 2
23586: PUSH
23587: LD_INT 0
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: LD_INT 2
23596: PUSH
23597: LD_INT 1
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: LD_INT 1
23606: PUSH
23607: LD_INT 2
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: LD_INT 0
23616: PUSH
23617: LD_INT 2
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PUSH
23624: LD_INT 1
23626: NEG
23627: PUSH
23628: LD_INT 1
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 2
23637: NEG
23638: PUSH
23639: LD_INT 0
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 2
23648: NEG
23649: PUSH
23650: LD_INT 1
23652: NEG
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 1
23660: NEG
23661: PUSH
23662: LD_INT 3
23664: NEG
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 0
23672: PUSH
23673: LD_INT 3
23675: NEG
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: LD_INT 1
23683: PUSH
23684: LD_INT 2
23686: NEG
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 2
23694: PUSH
23695: LD_INT 1
23697: NEG
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PUSH
23703: LD_INT 3
23705: PUSH
23706: LD_INT 0
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PUSH
23713: LD_INT 3
23715: PUSH
23716: LD_INT 1
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PUSH
23723: LD_INT 1
23725: PUSH
23726: LD_INT 3
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PUSH
23733: LD_INT 0
23735: PUSH
23736: LD_INT 3
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: LD_INT 1
23745: NEG
23746: PUSH
23747: LD_INT 2
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PUSH
23754: LD_INT 2
23756: NEG
23757: PUSH
23758: LD_INT 1
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 3
23767: NEG
23768: PUSH
23769: LD_INT 0
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 3
23778: NEG
23779: PUSH
23780: LD_INT 1
23782: NEG
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23819: LD_ADDR_VAR 0 44
23823: PUSH
23824: LD_INT 0
23826: PUSH
23827: LD_INT 0
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 0
23836: PUSH
23837: LD_INT 1
23839: NEG
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 1
23847: PUSH
23848: LD_INT 0
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 1
23857: PUSH
23858: LD_INT 1
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 0
23867: PUSH
23868: LD_INT 1
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 1
23877: NEG
23878: PUSH
23879: LD_INT 0
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 1
23888: NEG
23889: PUSH
23890: LD_INT 1
23892: NEG
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 1
23900: NEG
23901: PUSH
23902: LD_INT 2
23904: NEG
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 1
23912: PUSH
23913: LD_INT 1
23915: NEG
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PUSH
23921: LD_INT 2
23923: PUSH
23924: LD_INT 0
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: LD_INT 2
23933: PUSH
23934: LD_INT 1
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 2
23943: PUSH
23944: LD_INT 2
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 1
23953: PUSH
23954: LD_INT 2
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 1
23963: NEG
23964: PUSH
23965: LD_INT 1
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 2
23974: NEG
23975: PUSH
23976: LD_INT 0
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 2
23985: NEG
23986: PUSH
23987: LD_INT 1
23989: NEG
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 2
23997: NEG
23998: PUSH
23999: LD_INT 2
24001: NEG
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 2
24009: NEG
24010: PUSH
24011: LD_INT 3
24013: NEG
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 2
24021: PUSH
24022: LD_INT 1
24024: NEG
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 3
24032: PUSH
24033: LD_INT 0
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 3
24042: PUSH
24043: LD_INT 1
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 3
24052: PUSH
24053: LD_INT 2
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 3
24062: PUSH
24063: LD_INT 3
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 2
24072: PUSH
24073: LD_INT 3
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 2
24082: NEG
24083: PUSH
24084: LD_INT 1
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 3
24093: NEG
24094: PUSH
24095: LD_INT 0
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PUSH
24102: LD_INT 3
24104: NEG
24105: PUSH
24106: LD_INT 1
24108: NEG
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 3
24116: NEG
24117: PUSH
24118: LD_INT 2
24120: NEG
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 3
24128: NEG
24129: PUSH
24130: LD_INT 3
24132: NEG
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24169: LD_ADDR_VAR 0 45
24173: PUSH
24174: LD_INT 0
24176: PUSH
24177: LD_INT 0
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: LD_INT 0
24186: PUSH
24187: LD_INT 1
24189: NEG
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 1
24197: PUSH
24198: LD_INT 0
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: PUSH
24205: LD_INT 1
24207: PUSH
24208: LD_INT 1
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: PUSH
24215: LD_INT 0
24217: PUSH
24218: LD_INT 1
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 1
24227: NEG
24228: PUSH
24229: LD_INT 0
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 1
24238: NEG
24239: PUSH
24240: LD_INT 1
24242: NEG
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 1
24250: NEG
24251: PUSH
24252: LD_INT 2
24254: NEG
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 0
24262: PUSH
24263: LD_INT 2
24265: NEG
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 1
24273: PUSH
24274: LD_INT 1
24276: NEG
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 2
24284: PUSH
24285: LD_INT 1
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: LD_INT 2
24294: PUSH
24295: LD_INT 2
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 1
24304: PUSH
24305: LD_INT 2
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 0
24314: PUSH
24315: LD_INT 2
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 1
24324: NEG
24325: PUSH
24326: LD_INT 1
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 2
24335: NEG
24336: PUSH
24337: LD_INT 1
24339: NEG
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 2
24347: NEG
24348: PUSH
24349: LD_INT 2
24351: NEG
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 2
24359: NEG
24360: PUSH
24361: LD_INT 3
24363: NEG
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 1
24371: NEG
24372: PUSH
24373: LD_INT 3
24375: NEG
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 0
24383: PUSH
24384: LD_INT 3
24386: NEG
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 1
24394: PUSH
24395: LD_INT 2
24397: NEG
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 3
24405: PUSH
24406: LD_INT 2
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 3
24415: PUSH
24416: LD_INT 3
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 2
24425: PUSH
24426: LD_INT 3
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 1
24435: PUSH
24436: LD_INT 3
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 0
24445: PUSH
24446: LD_INT 3
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 1
24455: NEG
24456: PUSH
24457: LD_INT 2
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 3
24466: NEG
24467: PUSH
24468: LD_INT 2
24470: NEG
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 3
24478: NEG
24479: PUSH
24480: LD_INT 3
24482: NEG
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24519: LD_ADDR_VAR 0 46
24523: PUSH
24524: LD_INT 0
24526: PUSH
24527: LD_INT 0
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 0
24536: PUSH
24537: LD_INT 1
24539: NEG
24540: PUSH
24541: EMPTY
24542: LIST
24543: LIST
24544: PUSH
24545: LD_INT 1
24547: PUSH
24548: LD_INT 0
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: LD_INT 1
24557: PUSH
24558: LD_INT 1
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PUSH
24565: LD_INT 0
24567: PUSH
24568: LD_INT 1
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 1
24577: NEG
24578: PUSH
24579: LD_INT 0
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 1
24588: NEG
24589: PUSH
24590: LD_INT 1
24592: NEG
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 1
24600: NEG
24601: PUSH
24602: LD_INT 2
24604: NEG
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 0
24612: PUSH
24613: LD_INT 2
24615: NEG
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 1
24623: PUSH
24624: LD_INT 1
24626: NEG
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 2
24634: PUSH
24635: LD_INT 0
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: LD_INT 2
24644: PUSH
24645: LD_INT 1
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 1
24654: PUSH
24655: LD_INT 2
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 0
24664: PUSH
24665: LD_INT 2
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 1
24674: NEG
24675: PUSH
24676: LD_INT 1
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 2
24685: NEG
24686: PUSH
24687: LD_INT 0
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 2
24696: NEG
24697: PUSH
24698: LD_INT 1
24700: NEG
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PUSH
24706: LD_INT 1
24708: NEG
24709: PUSH
24710: LD_INT 3
24712: NEG
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 0
24720: PUSH
24721: LD_INT 3
24723: NEG
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 1
24731: PUSH
24732: LD_INT 2
24734: NEG
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 2
24742: PUSH
24743: LD_INT 1
24745: NEG
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 3
24753: PUSH
24754: LD_INT 0
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: LD_INT 3
24763: PUSH
24764: LD_INT 1
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 1
24773: PUSH
24774: LD_INT 3
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: LD_INT 0
24783: PUSH
24784: LD_INT 3
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 1
24793: NEG
24794: PUSH
24795: LD_INT 2
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 2
24804: NEG
24805: PUSH
24806: LD_INT 1
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 3
24815: NEG
24816: PUSH
24817: LD_INT 0
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: LD_INT 3
24826: NEG
24827: PUSH
24828: LD_INT 1
24830: NEG
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24867: LD_ADDR_VAR 0 47
24871: PUSH
24872: LD_INT 0
24874: PUSH
24875: LD_INT 0
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: LD_INT 0
24884: PUSH
24885: LD_INT 1
24887: NEG
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: LD_INT 1
24895: PUSH
24896: LD_INT 0
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 1
24905: PUSH
24906: LD_INT 1
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 0
24915: PUSH
24916: LD_INT 1
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 1
24925: NEG
24926: PUSH
24927: LD_INT 0
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 1
24936: NEG
24937: PUSH
24938: LD_INT 1
24940: NEG
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 1
24948: NEG
24949: PUSH
24950: LD_INT 2
24952: NEG
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 0
24960: PUSH
24961: LD_INT 2
24963: NEG
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 1
24971: PUSH
24972: LD_INT 1
24974: NEG
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 2
24982: NEG
24983: PUSH
24984: LD_INT 1
24986: NEG
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 2
24994: NEG
24995: PUSH
24996: LD_INT 2
24998: NEG
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25018: LD_ADDR_VAR 0 48
25022: PUSH
25023: LD_INT 0
25025: PUSH
25026: LD_INT 0
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 0
25035: PUSH
25036: LD_INT 1
25038: NEG
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: LD_INT 1
25046: PUSH
25047: LD_INT 0
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 1
25056: PUSH
25057: LD_INT 1
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 0
25066: PUSH
25067: LD_INT 1
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 1
25076: NEG
25077: PUSH
25078: LD_INT 0
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 1
25087: NEG
25088: PUSH
25089: LD_INT 1
25091: NEG
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 1
25099: NEG
25100: PUSH
25101: LD_INT 2
25103: NEG
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 0
25111: PUSH
25112: LD_INT 2
25114: NEG
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 1
25122: PUSH
25123: LD_INT 1
25125: NEG
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 2
25133: PUSH
25134: LD_INT 0
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 2
25143: PUSH
25144: LD_INT 1
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25165: LD_ADDR_VAR 0 49
25169: PUSH
25170: LD_INT 0
25172: PUSH
25173: LD_INT 0
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 0
25182: PUSH
25183: LD_INT 1
25185: NEG
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 1
25193: PUSH
25194: LD_INT 0
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 1
25203: PUSH
25204: LD_INT 1
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: LD_INT 0
25213: PUSH
25214: LD_INT 1
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 1
25223: NEG
25224: PUSH
25225: LD_INT 0
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 1
25234: NEG
25235: PUSH
25236: LD_INT 1
25238: NEG
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 1
25246: PUSH
25247: LD_INT 1
25249: NEG
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 2
25257: PUSH
25258: LD_INT 0
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 2
25267: PUSH
25268: LD_INT 1
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 2
25277: PUSH
25278: LD_INT 2
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 1
25287: PUSH
25288: LD_INT 2
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25309: LD_ADDR_VAR 0 50
25313: PUSH
25314: LD_INT 0
25316: PUSH
25317: LD_INT 0
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 0
25326: PUSH
25327: LD_INT 1
25329: NEG
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 1
25337: PUSH
25338: LD_INT 0
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 1
25347: PUSH
25348: LD_INT 1
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 0
25357: PUSH
25358: LD_INT 1
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 1
25367: NEG
25368: PUSH
25369: LD_INT 0
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 1
25378: NEG
25379: PUSH
25380: LD_INT 1
25382: NEG
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 2
25390: PUSH
25391: LD_INT 1
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 2
25400: PUSH
25401: LD_INT 2
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 1
25410: PUSH
25411: LD_INT 2
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: LD_INT 0
25420: PUSH
25421: LD_INT 2
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 1
25430: NEG
25431: PUSH
25432: LD_INT 1
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25453: LD_ADDR_VAR 0 51
25457: PUSH
25458: LD_INT 0
25460: PUSH
25461: LD_INT 0
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 0
25470: PUSH
25471: LD_INT 1
25473: NEG
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: LD_INT 0
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 1
25491: PUSH
25492: LD_INT 1
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 0
25501: PUSH
25502: LD_INT 1
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 1
25511: NEG
25512: PUSH
25513: LD_INT 0
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 1
25522: NEG
25523: PUSH
25524: LD_INT 1
25526: NEG
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 1
25534: PUSH
25535: LD_INT 2
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 0
25544: PUSH
25545: LD_INT 2
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 1
25554: NEG
25555: PUSH
25556: LD_INT 1
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 2
25565: NEG
25566: PUSH
25567: LD_INT 0
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 2
25576: NEG
25577: PUSH
25578: LD_INT 1
25580: NEG
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25600: LD_ADDR_VAR 0 52
25604: PUSH
25605: LD_INT 0
25607: PUSH
25608: LD_INT 0
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 0
25617: PUSH
25618: LD_INT 1
25620: NEG
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 1
25628: PUSH
25629: LD_INT 0
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 1
25638: PUSH
25639: LD_INT 1
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 0
25648: PUSH
25649: LD_INT 1
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 1
25658: NEG
25659: PUSH
25660: LD_INT 0
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: LD_INT 1
25669: NEG
25670: PUSH
25671: LD_INT 1
25673: NEG
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 1
25681: NEG
25682: PUSH
25683: LD_INT 2
25685: NEG
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 1
25693: NEG
25694: PUSH
25695: LD_INT 1
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 2
25704: NEG
25705: PUSH
25706: LD_INT 0
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 2
25715: NEG
25716: PUSH
25717: LD_INT 1
25719: NEG
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 2
25727: NEG
25728: PUSH
25729: LD_INT 2
25731: NEG
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25751: LD_ADDR_VAR 0 53
25755: PUSH
25756: LD_INT 0
25758: PUSH
25759: LD_INT 0
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 0
25768: PUSH
25769: LD_INT 1
25771: NEG
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 1
25779: PUSH
25780: LD_INT 0
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 1
25789: PUSH
25790: LD_INT 1
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 0
25799: PUSH
25800: LD_INT 1
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 1
25809: NEG
25810: PUSH
25811: LD_INT 0
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 1
25820: NEG
25821: PUSH
25822: LD_INT 1
25824: NEG
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 1
25832: NEG
25833: PUSH
25834: LD_INT 2
25836: NEG
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 0
25844: PUSH
25845: LD_INT 2
25847: NEG
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 1
25855: PUSH
25856: LD_INT 1
25858: NEG
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: LD_INT 2
25866: PUSH
25867: LD_INT 0
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 2
25876: PUSH
25877: LD_INT 1
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 2
25886: PUSH
25887: LD_INT 2
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 1
25896: PUSH
25897: LD_INT 2
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 0
25906: PUSH
25907: LD_INT 2
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 1
25916: NEG
25917: PUSH
25918: LD_INT 1
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 2
25927: NEG
25928: PUSH
25929: LD_INT 0
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 2
25938: NEG
25939: PUSH
25940: LD_INT 1
25942: NEG
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 2
25950: NEG
25951: PUSH
25952: LD_INT 2
25954: NEG
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25981: LD_ADDR_VAR 0 54
25985: PUSH
25986: LD_INT 0
25988: PUSH
25989: LD_INT 0
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 0
25998: PUSH
25999: LD_INT 1
26001: NEG
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 1
26009: PUSH
26010: LD_INT 0
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 1
26019: PUSH
26020: LD_INT 1
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 0
26029: PUSH
26030: LD_INT 1
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 1
26039: NEG
26040: PUSH
26041: LD_INT 0
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 1
26050: NEG
26051: PUSH
26052: LD_INT 1
26054: NEG
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 1
26062: NEG
26063: PUSH
26064: LD_INT 2
26066: NEG
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 0
26074: PUSH
26075: LD_INT 2
26077: NEG
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 1
26085: PUSH
26086: LD_INT 1
26088: NEG
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 2
26096: PUSH
26097: LD_INT 0
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 2
26106: PUSH
26107: LD_INT 1
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 2
26116: PUSH
26117: LD_INT 2
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 1
26126: PUSH
26127: LD_INT 2
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: LD_INT 2
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 1
26146: NEG
26147: PUSH
26148: LD_INT 1
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 2
26157: NEG
26158: PUSH
26159: LD_INT 0
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 2
26168: NEG
26169: PUSH
26170: LD_INT 1
26172: NEG
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_INT 2
26180: NEG
26181: PUSH
26182: LD_INT 2
26184: NEG
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26211: LD_ADDR_VAR 0 55
26215: PUSH
26216: LD_INT 0
26218: PUSH
26219: LD_INT 0
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 0
26228: PUSH
26229: LD_INT 1
26231: NEG
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 1
26239: PUSH
26240: LD_INT 0
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 1
26249: PUSH
26250: LD_INT 1
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 0
26259: PUSH
26260: LD_INT 1
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 1
26269: NEG
26270: PUSH
26271: LD_INT 0
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 1
26280: NEG
26281: PUSH
26282: LD_INT 1
26284: NEG
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: LD_INT 1
26292: NEG
26293: PUSH
26294: LD_INT 2
26296: NEG
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 0
26304: PUSH
26305: LD_INT 2
26307: NEG
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 1
26315: PUSH
26316: LD_INT 1
26318: NEG
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PUSH
26324: LD_INT 2
26326: PUSH
26327: LD_INT 0
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 2
26336: PUSH
26337: LD_INT 1
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 2
26346: PUSH
26347: LD_INT 2
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 1
26356: PUSH
26357: LD_INT 2
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 0
26366: PUSH
26367: LD_INT 2
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 1
26376: NEG
26377: PUSH
26378: LD_INT 1
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 2
26387: NEG
26388: PUSH
26389: LD_INT 0
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 2
26398: NEG
26399: PUSH
26400: LD_INT 1
26402: NEG
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 2
26410: NEG
26411: PUSH
26412: LD_INT 2
26414: NEG
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26441: LD_ADDR_VAR 0 56
26445: PUSH
26446: LD_INT 0
26448: PUSH
26449: LD_INT 0
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 0
26458: PUSH
26459: LD_INT 1
26461: NEG
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 1
26469: PUSH
26470: LD_INT 0
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 1
26479: PUSH
26480: LD_INT 1
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 0
26489: PUSH
26490: LD_INT 1
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 1
26499: NEG
26500: PUSH
26501: LD_INT 0
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 1
26510: NEG
26511: PUSH
26512: LD_INT 1
26514: NEG
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 1
26522: NEG
26523: PUSH
26524: LD_INT 2
26526: NEG
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 0
26534: PUSH
26535: LD_INT 2
26537: NEG
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 1
26545: PUSH
26546: LD_INT 1
26548: NEG
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 2
26556: PUSH
26557: LD_INT 0
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 2
26566: PUSH
26567: LD_INT 1
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 2
26576: PUSH
26577: LD_INT 2
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 1
26586: PUSH
26587: LD_INT 2
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 0
26596: PUSH
26597: LD_INT 2
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 1
26606: NEG
26607: PUSH
26608: LD_INT 1
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 2
26617: NEG
26618: PUSH
26619: LD_INT 0
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 2
26628: NEG
26629: PUSH
26630: LD_INT 1
26632: NEG
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: LD_INT 2
26640: NEG
26641: PUSH
26642: LD_INT 2
26644: NEG
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26671: LD_ADDR_VAR 0 57
26675: PUSH
26676: LD_INT 0
26678: PUSH
26679: LD_INT 0
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 0
26688: PUSH
26689: LD_INT 1
26691: NEG
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: LD_INT 0
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 1
26709: PUSH
26710: LD_INT 1
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 0
26719: PUSH
26720: LD_INT 1
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 1
26729: NEG
26730: PUSH
26731: LD_INT 0
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 1
26740: NEG
26741: PUSH
26742: LD_INT 1
26744: NEG
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 1
26752: NEG
26753: PUSH
26754: LD_INT 2
26756: NEG
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 0
26764: PUSH
26765: LD_INT 2
26767: NEG
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 1
26775: PUSH
26776: LD_INT 1
26778: NEG
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 2
26786: PUSH
26787: LD_INT 0
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 2
26796: PUSH
26797: LD_INT 1
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 2
26806: PUSH
26807: LD_INT 2
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 1
26816: PUSH
26817: LD_INT 2
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 0
26826: PUSH
26827: LD_INT 2
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 1
26836: NEG
26837: PUSH
26838: LD_INT 1
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 2
26847: NEG
26848: PUSH
26849: LD_INT 0
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 2
26858: NEG
26859: PUSH
26860: LD_INT 1
26862: NEG
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 2
26870: NEG
26871: PUSH
26872: LD_INT 2
26874: NEG
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26901: LD_ADDR_VAR 0 58
26905: PUSH
26906: LD_INT 0
26908: PUSH
26909: LD_INT 0
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 0
26918: PUSH
26919: LD_INT 1
26921: NEG
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 1
26929: PUSH
26930: LD_INT 0
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 1
26939: PUSH
26940: LD_INT 1
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 0
26949: PUSH
26950: LD_INT 1
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 1
26959: NEG
26960: PUSH
26961: LD_INT 0
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 1
26970: NEG
26971: PUSH
26972: LD_INT 1
26974: NEG
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: LD_INT 1
26982: NEG
26983: PUSH
26984: LD_INT 2
26986: NEG
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 0
26994: PUSH
26995: LD_INT 2
26997: NEG
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 1
27005: PUSH
27006: LD_INT 1
27008: NEG
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 2
27016: PUSH
27017: LD_INT 0
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 2
27026: PUSH
27027: LD_INT 1
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 2
27036: PUSH
27037: LD_INT 2
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 1
27046: PUSH
27047: LD_INT 2
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 0
27056: PUSH
27057: LD_INT 2
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 1
27066: NEG
27067: PUSH
27068: LD_INT 1
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 2
27077: NEG
27078: PUSH
27079: LD_INT 0
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 2
27088: NEG
27089: PUSH
27090: LD_INT 1
27092: NEG
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: LD_INT 2
27100: NEG
27101: PUSH
27102: LD_INT 2
27104: NEG
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27131: LD_ADDR_VAR 0 59
27135: PUSH
27136: LD_INT 0
27138: PUSH
27139: LD_INT 0
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 0
27148: PUSH
27149: LD_INT 1
27151: NEG
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 1
27159: PUSH
27160: LD_INT 0
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 1
27169: PUSH
27170: LD_INT 1
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 0
27179: PUSH
27180: LD_INT 1
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 1
27189: NEG
27190: PUSH
27191: LD_INT 0
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 1
27200: NEG
27201: PUSH
27202: LD_INT 1
27204: NEG
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27219: LD_ADDR_VAR 0 60
27223: PUSH
27224: LD_INT 0
27226: PUSH
27227: LD_INT 0
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 0
27236: PUSH
27237: LD_INT 1
27239: NEG
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 1
27247: PUSH
27248: LD_INT 0
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 1
27257: PUSH
27258: LD_INT 1
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: LD_INT 1
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 1
27277: NEG
27278: PUSH
27279: LD_INT 0
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 1
27288: NEG
27289: PUSH
27290: LD_INT 1
27292: NEG
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27307: LD_ADDR_VAR 0 61
27311: PUSH
27312: LD_INT 0
27314: PUSH
27315: LD_INT 0
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 0
27324: PUSH
27325: LD_INT 1
27327: NEG
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 1
27335: PUSH
27336: LD_INT 0
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: LD_INT 1
27345: PUSH
27346: LD_INT 1
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 0
27355: PUSH
27356: LD_INT 1
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 1
27365: NEG
27366: PUSH
27367: LD_INT 0
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 1
27376: NEG
27377: PUSH
27378: LD_INT 1
27380: NEG
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27395: LD_ADDR_VAR 0 62
27399: PUSH
27400: LD_INT 0
27402: PUSH
27403: LD_INT 0
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: LD_INT 0
27412: PUSH
27413: LD_INT 1
27415: NEG
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 1
27423: PUSH
27424: LD_INT 0
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 1
27433: PUSH
27434: LD_INT 1
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 0
27443: PUSH
27444: LD_INT 1
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 1
27453: NEG
27454: PUSH
27455: LD_INT 0
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PUSH
27462: LD_INT 1
27464: NEG
27465: PUSH
27466: LD_INT 1
27468: NEG
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27483: LD_ADDR_VAR 0 63
27487: PUSH
27488: LD_INT 0
27490: PUSH
27491: LD_INT 0
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 0
27500: PUSH
27501: LD_INT 1
27503: NEG
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 1
27511: PUSH
27512: LD_INT 0
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 1
27521: PUSH
27522: LD_INT 1
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 0
27531: PUSH
27532: LD_INT 1
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 1
27541: NEG
27542: PUSH
27543: LD_INT 0
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 1
27552: NEG
27553: PUSH
27554: LD_INT 1
27556: NEG
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27571: LD_ADDR_VAR 0 64
27575: PUSH
27576: LD_INT 0
27578: PUSH
27579: LD_INT 0
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 0
27588: PUSH
27589: LD_INT 1
27591: NEG
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 1
27599: PUSH
27600: LD_INT 0
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 1
27609: PUSH
27610: LD_INT 1
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 0
27619: PUSH
27620: LD_INT 1
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 1
27629: NEG
27630: PUSH
27631: LD_INT 0
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 1
27640: NEG
27641: PUSH
27642: LD_INT 1
27644: NEG
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: ST_TO_ADDR
// end ; 1 :
27659: GO 33556
27661: LD_INT 1
27663: DOUBLE
27664: EQUAL
27665: IFTRUE 27669
27667: GO 30292
27669: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27670: LD_ADDR_VAR 0 11
27674: PUSH
27675: LD_INT 1
27677: NEG
27678: PUSH
27679: LD_INT 3
27681: NEG
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 0
27689: PUSH
27690: LD_INT 3
27692: NEG
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 1
27700: PUSH
27701: LD_INT 2
27703: NEG
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: LIST
27713: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27714: LD_ADDR_VAR 0 12
27718: PUSH
27719: LD_INT 2
27721: PUSH
27722: LD_INT 1
27724: NEG
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 3
27732: PUSH
27733: LD_INT 0
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 3
27742: PUSH
27743: LD_INT 1
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: LIST
27754: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27755: LD_ADDR_VAR 0 13
27759: PUSH
27760: LD_INT 3
27762: PUSH
27763: LD_INT 2
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: LD_INT 3
27772: PUSH
27773: LD_INT 3
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 2
27782: PUSH
27783: LD_INT 3
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: LIST
27794: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27795: LD_ADDR_VAR 0 14
27799: PUSH
27800: LD_INT 1
27802: PUSH
27803: LD_INT 3
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 0
27812: PUSH
27813: LD_INT 3
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 1
27822: NEG
27823: PUSH
27824: LD_INT 2
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: LIST
27835: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27836: LD_ADDR_VAR 0 15
27840: PUSH
27841: LD_INT 2
27843: NEG
27844: PUSH
27845: LD_INT 1
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: LD_INT 3
27854: NEG
27855: PUSH
27856: LD_INT 0
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 3
27865: NEG
27866: PUSH
27867: LD_INT 1
27869: NEG
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: LIST
27879: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27880: LD_ADDR_VAR 0 16
27884: PUSH
27885: LD_INT 2
27887: NEG
27888: PUSH
27889: LD_INT 3
27891: NEG
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 3
27899: NEG
27900: PUSH
27901: LD_INT 2
27903: NEG
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 3
27911: NEG
27912: PUSH
27913: LD_INT 3
27915: NEG
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: LIST
27925: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27926: LD_ADDR_VAR 0 17
27930: PUSH
27931: LD_INT 1
27933: NEG
27934: PUSH
27935: LD_INT 3
27937: NEG
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 0
27945: PUSH
27946: LD_INT 3
27948: NEG
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: LD_INT 1
27956: PUSH
27957: LD_INT 2
27959: NEG
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: LIST
27969: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27970: LD_ADDR_VAR 0 18
27974: PUSH
27975: LD_INT 2
27977: PUSH
27978: LD_INT 1
27980: NEG
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 3
27988: PUSH
27989: LD_INT 0
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: PUSH
27996: LD_INT 3
27998: PUSH
27999: LD_INT 1
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: LIST
28010: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28011: LD_ADDR_VAR 0 19
28015: PUSH
28016: LD_INT 3
28018: PUSH
28019: LD_INT 2
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 3
28028: PUSH
28029: LD_INT 3
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 2
28038: PUSH
28039: LD_INT 3
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: LIST
28050: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28051: LD_ADDR_VAR 0 20
28055: PUSH
28056: LD_INT 1
28058: PUSH
28059: LD_INT 3
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 0
28068: PUSH
28069: LD_INT 3
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: LD_INT 1
28078: NEG
28079: PUSH
28080: LD_INT 2
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: LIST
28091: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28092: LD_ADDR_VAR 0 21
28096: PUSH
28097: LD_INT 2
28099: NEG
28100: PUSH
28101: LD_INT 1
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 3
28110: NEG
28111: PUSH
28112: LD_INT 0
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 3
28121: NEG
28122: PUSH
28123: LD_INT 1
28125: NEG
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: LIST
28135: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28136: LD_ADDR_VAR 0 22
28140: PUSH
28141: LD_INT 2
28143: NEG
28144: PUSH
28145: LD_INT 3
28147: NEG
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 3
28155: NEG
28156: PUSH
28157: LD_INT 2
28159: NEG
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 3
28167: NEG
28168: PUSH
28169: LD_INT 3
28171: NEG
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: LIST
28181: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28182: LD_ADDR_VAR 0 23
28186: PUSH
28187: LD_INT 0
28189: PUSH
28190: LD_INT 3
28192: NEG
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 1
28200: NEG
28201: PUSH
28202: LD_INT 4
28204: NEG
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 1
28212: PUSH
28213: LD_INT 3
28215: NEG
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: LIST
28225: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28226: LD_ADDR_VAR 0 24
28230: PUSH
28231: LD_INT 3
28233: PUSH
28234: LD_INT 0
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 3
28243: PUSH
28244: LD_INT 1
28246: NEG
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 4
28254: PUSH
28255: LD_INT 1
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: LIST
28266: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28267: LD_ADDR_VAR 0 25
28271: PUSH
28272: LD_INT 3
28274: PUSH
28275: LD_INT 3
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 4
28284: PUSH
28285: LD_INT 3
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 3
28294: PUSH
28295: LD_INT 4
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: LIST
28306: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28307: LD_ADDR_VAR 0 26
28311: PUSH
28312: LD_INT 0
28314: PUSH
28315: LD_INT 3
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 1
28324: PUSH
28325: LD_INT 4
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 1
28334: NEG
28335: PUSH
28336: LD_INT 3
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: LIST
28347: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28348: LD_ADDR_VAR 0 27
28352: PUSH
28353: LD_INT 3
28355: NEG
28356: PUSH
28357: LD_INT 0
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 3
28366: NEG
28367: PUSH
28368: LD_INT 1
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 4
28377: NEG
28378: PUSH
28379: LD_INT 1
28381: NEG
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: LIST
28391: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28392: LD_ADDR_VAR 0 28
28396: PUSH
28397: LD_INT 3
28399: NEG
28400: PUSH
28401: LD_INT 3
28403: NEG
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 3
28411: NEG
28412: PUSH
28413: LD_INT 4
28415: NEG
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 4
28423: NEG
28424: PUSH
28425: LD_INT 3
28427: NEG
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: LIST
28437: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28438: LD_ADDR_VAR 0 29
28442: PUSH
28443: LD_INT 1
28445: NEG
28446: PUSH
28447: LD_INT 3
28449: NEG
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 0
28457: PUSH
28458: LD_INT 3
28460: NEG
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: LD_INT 1
28468: PUSH
28469: LD_INT 2
28471: NEG
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 1
28479: NEG
28480: PUSH
28481: LD_INT 4
28483: NEG
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 0
28491: PUSH
28492: LD_INT 4
28494: NEG
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 1
28502: PUSH
28503: LD_INT 3
28505: NEG
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 1
28513: NEG
28514: PUSH
28515: LD_INT 5
28517: NEG
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 0
28525: PUSH
28526: LD_INT 5
28528: NEG
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 1
28536: PUSH
28537: LD_INT 4
28539: NEG
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 1
28547: NEG
28548: PUSH
28549: LD_INT 6
28551: NEG
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 0
28559: PUSH
28560: LD_INT 6
28562: NEG
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 1
28570: PUSH
28571: LD_INT 5
28573: NEG
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28593: LD_ADDR_VAR 0 30
28597: PUSH
28598: LD_INT 2
28600: PUSH
28601: LD_INT 1
28603: NEG
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 3
28611: PUSH
28612: LD_INT 0
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 3
28621: PUSH
28622: LD_INT 1
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 3
28631: PUSH
28632: LD_INT 1
28634: NEG
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 4
28642: PUSH
28643: LD_INT 0
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 4
28652: PUSH
28653: LD_INT 1
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 4
28662: PUSH
28663: LD_INT 1
28665: NEG
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 5
28673: PUSH
28674: LD_INT 0
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 5
28683: PUSH
28684: LD_INT 1
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 5
28693: PUSH
28694: LD_INT 1
28696: NEG
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 6
28704: PUSH
28705: LD_INT 0
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 6
28714: PUSH
28715: LD_INT 1
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28736: LD_ADDR_VAR 0 31
28740: PUSH
28741: LD_INT 3
28743: PUSH
28744: LD_INT 2
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 3
28753: PUSH
28754: LD_INT 3
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 2
28763: PUSH
28764: LD_INT 3
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 4
28773: PUSH
28774: LD_INT 3
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 4
28783: PUSH
28784: LD_INT 4
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 3
28793: PUSH
28794: LD_INT 4
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 5
28803: PUSH
28804: LD_INT 4
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 5
28813: PUSH
28814: LD_INT 5
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: LD_INT 4
28823: PUSH
28824: LD_INT 5
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 6
28833: PUSH
28834: LD_INT 5
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 6
28843: PUSH
28844: LD_INT 6
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 5
28853: PUSH
28854: LD_INT 6
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28875: LD_ADDR_VAR 0 32
28879: PUSH
28880: LD_INT 1
28882: PUSH
28883: LD_INT 3
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: LD_INT 0
28892: PUSH
28893: LD_INT 3
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 1
28902: NEG
28903: PUSH
28904: LD_INT 2
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 1
28913: PUSH
28914: LD_INT 4
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 0
28923: PUSH
28924: LD_INT 4
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 1
28933: NEG
28934: PUSH
28935: LD_INT 3
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: LD_INT 1
28944: PUSH
28945: LD_INT 5
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: LD_INT 0
28954: PUSH
28955: LD_INT 5
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 1
28964: NEG
28965: PUSH
28966: LD_INT 4
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 1
28975: PUSH
28976: LD_INT 6
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 0
28985: PUSH
28986: LD_INT 6
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 1
28995: NEG
28996: PUSH
28997: LD_INT 5
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29018: LD_ADDR_VAR 0 33
29022: PUSH
29023: LD_INT 2
29025: NEG
29026: PUSH
29027: LD_INT 1
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 3
29036: NEG
29037: PUSH
29038: LD_INT 0
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 3
29047: NEG
29048: PUSH
29049: LD_INT 1
29051: NEG
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 3
29059: NEG
29060: PUSH
29061: LD_INT 1
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 4
29070: NEG
29071: PUSH
29072: LD_INT 0
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 4
29081: NEG
29082: PUSH
29083: LD_INT 1
29085: NEG
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 4
29093: NEG
29094: PUSH
29095: LD_INT 1
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 5
29104: NEG
29105: PUSH
29106: LD_INT 0
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 5
29115: NEG
29116: PUSH
29117: LD_INT 1
29119: NEG
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: LD_INT 5
29127: NEG
29128: PUSH
29129: LD_INT 1
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: LD_INT 6
29138: NEG
29139: PUSH
29140: LD_INT 0
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: LD_INT 6
29149: NEG
29150: PUSH
29151: LD_INT 1
29153: NEG
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29173: LD_ADDR_VAR 0 34
29177: PUSH
29178: LD_INT 2
29180: NEG
29181: PUSH
29182: LD_INT 3
29184: NEG
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 3
29192: NEG
29193: PUSH
29194: LD_INT 2
29196: NEG
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 3
29204: NEG
29205: PUSH
29206: LD_INT 3
29208: NEG
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 3
29216: NEG
29217: PUSH
29218: LD_INT 4
29220: NEG
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 4
29228: NEG
29229: PUSH
29230: LD_INT 3
29232: NEG
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 4
29240: NEG
29241: PUSH
29242: LD_INT 4
29244: NEG
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 4
29252: NEG
29253: PUSH
29254: LD_INT 5
29256: NEG
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 5
29264: NEG
29265: PUSH
29266: LD_INT 4
29268: NEG
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 5
29276: NEG
29277: PUSH
29278: LD_INT 5
29280: NEG
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PUSH
29286: LD_INT 5
29288: NEG
29289: PUSH
29290: LD_INT 6
29292: NEG
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 6
29300: NEG
29301: PUSH
29302: LD_INT 5
29304: NEG
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 6
29312: NEG
29313: PUSH
29314: LD_INT 6
29316: NEG
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29336: LD_ADDR_VAR 0 41
29340: PUSH
29341: LD_INT 0
29343: PUSH
29344: LD_INT 2
29346: NEG
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 1
29354: NEG
29355: PUSH
29356: LD_INT 3
29358: NEG
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 1
29366: PUSH
29367: LD_INT 2
29369: NEG
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: LIST
29379: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29380: LD_ADDR_VAR 0 42
29384: PUSH
29385: LD_INT 2
29387: PUSH
29388: LD_INT 0
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 2
29397: PUSH
29398: LD_INT 1
29400: NEG
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 3
29408: PUSH
29409: LD_INT 1
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: LIST
29420: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29421: LD_ADDR_VAR 0 43
29425: PUSH
29426: LD_INT 2
29428: PUSH
29429: LD_INT 2
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 3
29438: PUSH
29439: LD_INT 2
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 2
29448: PUSH
29449: LD_INT 3
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: LIST
29460: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29461: LD_ADDR_VAR 0 44
29465: PUSH
29466: LD_INT 0
29468: PUSH
29469: LD_INT 2
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 1
29478: PUSH
29479: LD_INT 3
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 1
29488: NEG
29489: PUSH
29490: LD_INT 2
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: LIST
29501: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29502: LD_ADDR_VAR 0 45
29506: PUSH
29507: LD_INT 2
29509: NEG
29510: PUSH
29511: LD_INT 0
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: LD_INT 2
29520: NEG
29521: PUSH
29522: LD_INT 1
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 3
29531: NEG
29532: PUSH
29533: LD_INT 1
29535: NEG
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: LIST
29545: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29546: LD_ADDR_VAR 0 46
29550: PUSH
29551: LD_INT 2
29553: NEG
29554: PUSH
29555: LD_INT 2
29557: NEG
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: LD_INT 2
29565: NEG
29566: PUSH
29567: LD_INT 3
29569: NEG
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 3
29577: NEG
29578: PUSH
29579: LD_INT 2
29581: NEG
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: LIST
29591: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29592: LD_ADDR_VAR 0 47
29596: PUSH
29597: LD_INT 2
29599: NEG
29600: PUSH
29601: LD_INT 3
29603: NEG
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 1
29611: NEG
29612: PUSH
29613: LD_INT 3
29615: NEG
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29625: LD_ADDR_VAR 0 48
29629: PUSH
29630: LD_INT 1
29632: PUSH
29633: LD_INT 2
29635: NEG
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 2
29643: PUSH
29644: LD_INT 1
29646: NEG
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29656: LD_ADDR_VAR 0 49
29660: PUSH
29661: LD_INT 3
29663: PUSH
29664: LD_INT 1
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 3
29673: PUSH
29674: LD_INT 2
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29685: LD_ADDR_VAR 0 50
29689: PUSH
29690: LD_INT 2
29692: PUSH
29693: LD_INT 3
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 1
29702: PUSH
29703: LD_INT 3
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29714: LD_ADDR_VAR 0 51
29718: PUSH
29719: LD_INT 1
29721: NEG
29722: PUSH
29723: LD_INT 2
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 2
29732: NEG
29733: PUSH
29734: LD_INT 1
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29745: LD_ADDR_VAR 0 52
29749: PUSH
29750: LD_INT 3
29752: NEG
29753: PUSH
29754: LD_INT 1
29756: NEG
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: LD_INT 3
29764: NEG
29765: PUSH
29766: LD_INT 2
29768: NEG
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29778: LD_ADDR_VAR 0 53
29782: PUSH
29783: LD_INT 1
29785: NEG
29786: PUSH
29787: LD_INT 3
29789: NEG
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 0
29797: PUSH
29798: LD_INT 3
29800: NEG
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 1
29808: PUSH
29809: LD_INT 2
29811: NEG
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: LIST
29821: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29822: LD_ADDR_VAR 0 54
29826: PUSH
29827: LD_INT 2
29829: PUSH
29830: LD_INT 1
29832: NEG
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 3
29840: PUSH
29841: LD_INT 0
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 3
29850: PUSH
29851: LD_INT 1
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: LIST
29862: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29863: LD_ADDR_VAR 0 55
29867: PUSH
29868: LD_INT 3
29870: PUSH
29871: LD_INT 2
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 3
29880: PUSH
29881: LD_INT 3
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 2
29890: PUSH
29891: LD_INT 3
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: LIST
29902: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29903: LD_ADDR_VAR 0 56
29907: PUSH
29908: LD_INT 1
29910: PUSH
29911: LD_INT 3
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 0
29920: PUSH
29921: LD_INT 3
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 1
29930: NEG
29931: PUSH
29932: LD_INT 2
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: LIST
29943: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29944: LD_ADDR_VAR 0 57
29948: PUSH
29949: LD_INT 2
29951: NEG
29952: PUSH
29953: LD_INT 1
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 3
29962: NEG
29963: PUSH
29964: LD_INT 0
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 3
29973: NEG
29974: PUSH
29975: LD_INT 1
29977: NEG
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: LIST
29987: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29988: LD_ADDR_VAR 0 58
29992: PUSH
29993: LD_INT 2
29995: NEG
29996: PUSH
29997: LD_INT 3
29999: NEG
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 3
30007: NEG
30008: PUSH
30009: LD_INT 2
30011: NEG
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 3
30019: NEG
30020: PUSH
30021: LD_INT 3
30023: NEG
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: LIST
30033: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30034: LD_ADDR_VAR 0 59
30038: PUSH
30039: LD_INT 1
30041: NEG
30042: PUSH
30043: LD_INT 2
30045: NEG
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 0
30053: PUSH
30054: LD_INT 2
30056: NEG
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 1
30064: PUSH
30065: LD_INT 1
30067: NEG
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: LIST
30077: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30078: LD_ADDR_VAR 0 60
30082: PUSH
30083: LD_INT 1
30085: PUSH
30086: LD_INT 1
30088: NEG
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 2
30096: PUSH
30097: LD_INT 0
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 2
30106: PUSH
30107: LD_INT 1
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: LIST
30118: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30119: LD_ADDR_VAR 0 61
30123: PUSH
30124: LD_INT 2
30126: PUSH
30127: LD_INT 1
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 2
30136: PUSH
30137: LD_INT 2
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 1
30146: PUSH
30147: LD_INT 2
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: LIST
30158: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30159: LD_ADDR_VAR 0 62
30163: PUSH
30164: LD_INT 1
30166: PUSH
30167: LD_INT 2
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 0
30176: PUSH
30177: LD_INT 2
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 1
30186: NEG
30187: PUSH
30188: LD_INT 1
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: LIST
30199: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30200: LD_ADDR_VAR 0 63
30204: PUSH
30205: LD_INT 1
30207: NEG
30208: PUSH
30209: LD_INT 1
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 2
30218: NEG
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 2
30229: NEG
30230: PUSH
30231: LD_INT 1
30233: NEG
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: LIST
30243: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30244: LD_ADDR_VAR 0 64
30248: PUSH
30249: LD_INT 1
30251: NEG
30252: PUSH
30253: LD_INT 2
30255: NEG
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 2
30263: NEG
30264: PUSH
30265: LD_INT 1
30267: NEG
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 2
30275: NEG
30276: PUSH
30277: LD_INT 2
30279: NEG
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: LIST
30289: ST_TO_ADDR
// end ; 2 :
30290: GO 33556
30292: LD_INT 2
30294: DOUBLE
30295: EQUAL
30296: IFTRUE 30300
30298: GO 33555
30300: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30301: LD_ADDR_VAR 0 29
30305: PUSH
30306: LD_INT 4
30308: PUSH
30309: LD_INT 0
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 4
30318: PUSH
30319: LD_INT 1
30321: NEG
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 5
30329: PUSH
30330: LD_INT 0
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 5
30339: PUSH
30340: LD_INT 1
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 4
30349: PUSH
30350: LD_INT 1
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 3
30359: PUSH
30360: LD_INT 0
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 3
30369: PUSH
30370: LD_INT 1
30372: NEG
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 3
30380: PUSH
30381: LD_INT 2
30383: NEG
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 5
30391: PUSH
30392: LD_INT 2
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 3
30401: PUSH
30402: LD_INT 3
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 3
30411: PUSH
30412: LD_INT 2
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 4
30421: PUSH
30422: LD_INT 3
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 4
30431: PUSH
30432: LD_INT 4
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 3
30441: PUSH
30442: LD_INT 4
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 2
30451: PUSH
30452: LD_INT 3
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 2
30461: PUSH
30462: LD_INT 2
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 4
30471: PUSH
30472: LD_INT 2
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 2
30481: PUSH
30482: LD_INT 4
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 0
30491: PUSH
30492: LD_INT 4
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 0
30501: PUSH
30502: LD_INT 3
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 1
30511: PUSH
30512: LD_INT 4
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 1
30521: PUSH
30522: LD_INT 5
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 0
30531: PUSH
30532: LD_INT 5
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 1
30541: NEG
30542: PUSH
30543: LD_INT 4
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 1
30552: NEG
30553: PUSH
30554: LD_INT 3
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 2
30563: PUSH
30564: LD_INT 5
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 2
30573: NEG
30574: PUSH
30575: LD_INT 3
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 3
30584: NEG
30585: PUSH
30586: LD_INT 0
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 3
30595: NEG
30596: PUSH
30597: LD_INT 1
30599: NEG
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 2
30607: NEG
30608: PUSH
30609: LD_INT 0
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 2
30618: NEG
30619: PUSH
30620: LD_INT 1
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 3
30629: NEG
30630: PUSH
30631: LD_INT 1
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 4
30640: NEG
30641: PUSH
30642: LD_INT 0
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 4
30651: NEG
30652: PUSH
30653: LD_INT 1
30655: NEG
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 4
30663: NEG
30664: PUSH
30665: LD_INT 2
30667: NEG
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 2
30675: NEG
30676: PUSH
30677: LD_INT 2
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 4
30686: NEG
30687: PUSH
30688: LD_INT 4
30690: NEG
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 4
30698: NEG
30699: PUSH
30700: LD_INT 5
30702: NEG
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 3
30710: NEG
30711: PUSH
30712: LD_INT 4
30714: NEG
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 3
30722: NEG
30723: PUSH
30724: LD_INT 3
30726: NEG
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 4
30734: NEG
30735: PUSH
30736: LD_INT 3
30738: NEG
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 5
30746: NEG
30747: PUSH
30748: LD_INT 4
30750: NEG
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 5
30758: NEG
30759: PUSH
30760: LD_INT 5
30762: NEG
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 3
30770: NEG
30771: PUSH
30772: LD_INT 5
30774: NEG
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 5
30782: NEG
30783: PUSH
30784: LD_INT 3
30786: NEG
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30839: LD_ADDR_VAR 0 30
30843: PUSH
30844: LD_INT 4
30846: PUSH
30847: LD_INT 4
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 4
30856: PUSH
30857: LD_INT 3
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 5
30866: PUSH
30867: LD_INT 4
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 5
30876: PUSH
30877: LD_INT 5
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 4
30886: PUSH
30887: LD_INT 5
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 3
30896: PUSH
30897: LD_INT 4
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 3
30906: PUSH
30907: LD_INT 3
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 5
30916: PUSH
30917: LD_INT 3
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 3
30926: PUSH
30927: LD_INT 5
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 0
30936: PUSH
30937: LD_INT 3
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 0
30946: PUSH
30947: LD_INT 2
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 1
30956: PUSH
30957: LD_INT 3
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 1
30966: PUSH
30967: LD_INT 4
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 0
30976: PUSH
30977: LD_INT 4
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 1
30986: NEG
30987: PUSH
30988: LD_INT 3
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 1
30997: NEG
30998: PUSH
30999: LD_INT 2
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 2
31008: PUSH
31009: LD_INT 4
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 2
31018: NEG
31019: PUSH
31020: LD_INT 2
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 4
31029: NEG
31030: PUSH
31031: LD_INT 0
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 4
31040: NEG
31041: PUSH
31042: LD_INT 1
31044: NEG
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 3
31052: NEG
31053: PUSH
31054: LD_INT 0
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 3
31063: NEG
31064: PUSH
31065: LD_INT 1
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 4
31074: NEG
31075: PUSH
31076: LD_INT 1
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 5
31085: NEG
31086: PUSH
31087: LD_INT 0
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 5
31096: NEG
31097: PUSH
31098: LD_INT 1
31100: NEG
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 5
31108: NEG
31109: PUSH
31110: LD_INT 2
31112: NEG
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 3
31120: NEG
31121: PUSH
31122: LD_INT 2
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 3
31131: NEG
31132: PUSH
31133: LD_INT 3
31135: NEG
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 3
31143: NEG
31144: PUSH
31145: LD_INT 4
31147: NEG
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 2
31155: NEG
31156: PUSH
31157: LD_INT 3
31159: NEG
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 2
31167: NEG
31168: PUSH
31169: LD_INT 2
31171: NEG
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 3
31179: NEG
31180: PUSH
31181: LD_INT 2
31183: NEG
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 4
31191: NEG
31192: PUSH
31193: LD_INT 3
31195: NEG
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 4
31203: NEG
31204: PUSH
31205: LD_INT 4
31207: NEG
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 2
31215: NEG
31216: PUSH
31217: LD_INT 4
31219: NEG
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 4
31227: NEG
31228: PUSH
31229: LD_INT 2
31231: NEG
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 0
31239: PUSH
31240: LD_INT 4
31242: NEG
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 0
31250: PUSH
31251: LD_INT 5
31253: NEG
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 1
31261: PUSH
31262: LD_INT 4
31264: NEG
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 1
31272: PUSH
31273: LD_INT 3
31275: NEG
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 0
31283: PUSH
31284: LD_INT 3
31286: NEG
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 1
31294: NEG
31295: PUSH
31296: LD_INT 4
31298: NEG
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 1
31306: NEG
31307: PUSH
31308: LD_INT 5
31310: NEG
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 2
31318: PUSH
31319: LD_INT 3
31321: NEG
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 2
31329: NEG
31330: PUSH
31331: LD_INT 5
31333: NEG
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31386: LD_ADDR_VAR 0 31
31390: PUSH
31391: LD_INT 0
31393: PUSH
31394: LD_INT 4
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 0
31403: PUSH
31404: LD_INT 3
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 1
31413: PUSH
31414: LD_INT 4
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 1
31423: PUSH
31424: LD_INT 5
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 0
31433: PUSH
31434: LD_INT 5
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 1
31443: NEG
31444: PUSH
31445: LD_INT 4
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 1
31454: NEG
31455: PUSH
31456: LD_INT 3
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 2
31465: PUSH
31466: LD_INT 5
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 2
31475: NEG
31476: PUSH
31477: LD_INT 3
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 3
31486: NEG
31487: PUSH
31488: LD_INT 0
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 3
31497: NEG
31498: PUSH
31499: LD_INT 1
31501: NEG
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 2
31509: NEG
31510: PUSH
31511: LD_INT 0
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 2
31520: NEG
31521: PUSH
31522: LD_INT 1
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 3
31531: NEG
31532: PUSH
31533: LD_INT 1
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 4
31542: NEG
31543: PUSH
31544: LD_INT 0
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 4
31553: NEG
31554: PUSH
31555: LD_INT 1
31557: NEG
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 4
31565: NEG
31566: PUSH
31567: LD_INT 2
31569: NEG
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 2
31577: NEG
31578: PUSH
31579: LD_INT 2
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 4
31588: NEG
31589: PUSH
31590: LD_INT 4
31592: NEG
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 4
31600: NEG
31601: PUSH
31602: LD_INT 5
31604: NEG
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 3
31612: NEG
31613: PUSH
31614: LD_INT 4
31616: NEG
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 3
31624: NEG
31625: PUSH
31626: LD_INT 3
31628: NEG
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 4
31636: NEG
31637: PUSH
31638: LD_INT 3
31640: NEG
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 5
31648: NEG
31649: PUSH
31650: LD_INT 4
31652: NEG
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 5
31660: NEG
31661: PUSH
31662: LD_INT 5
31664: NEG
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 3
31672: NEG
31673: PUSH
31674: LD_INT 5
31676: NEG
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 5
31684: NEG
31685: PUSH
31686: LD_INT 3
31688: NEG
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 0
31696: PUSH
31697: LD_INT 3
31699: NEG
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 0
31707: PUSH
31708: LD_INT 4
31710: NEG
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 1
31718: PUSH
31719: LD_INT 3
31721: NEG
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 1
31729: PUSH
31730: LD_INT 2
31732: NEG
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 0
31740: PUSH
31741: LD_INT 2
31743: NEG
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: LD_INT 1
31751: NEG
31752: PUSH
31753: LD_INT 3
31755: NEG
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 1
31763: NEG
31764: PUSH
31765: LD_INT 4
31767: NEG
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: PUSH
31773: LD_INT 2
31775: PUSH
31776: LD_INT 2
31778: NEG
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 2
31786: NEG
31787: PUSH
31788: LD_INT 4
31790: NEG
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 4
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 4
31808: PUSH
31809: LD_INT 1
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 5
31819: PUSH
31820: LD_INT 0
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 5
31829: PUSH
31830: LD_INT 1
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 4
31839: PUSH
31840: LD_INT 1
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 3
31849: PUSH
31850: LD_INT 0
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 3
31859: PUSH
31860: LD_INT 1
31862: NEG
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 3
31870: PUSH
31871: LD_INT 2
31873: NEG
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 5
31881: PUSH
31882: LD_INT 2
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31936: LD_ADDR_VAR 0 32
31940: PUSH
31941: LD_INT 4
31943: NEG
31944: PUSH
31945: LD_INT 0
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 4
31954: NEG
31955: PUSH
31956: LD_INT 1
31958: NEG
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 3
31966: NEG
31967: PUSH
31968: LD_INT 0
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 3
31977: NEG
31978: PUSH
31979: LD_INT 1
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 4
31988: NEG
31989: PUSH
31990: LD_INT 1
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 5
31999: NEG
32000: PUSH
32001: LD_INT 0
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 5
32010: NEG
32011: PUSH
32012: LD_INT 1
32014: NEG
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 5
32022: NEG
32023: PUSH
32024: LD_INT 2
32026: NEG
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 3
32034: NEG
32035: PUSH
32036: LD_INT 2
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 3
32045: NEG
32046: PUSH
32047: LD_INT 3
32049: NEG
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 3
32057: NEG
32058: PUSH
32059: LD_INT 4
32061: NEG
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 2
32069: NEG
32070: PUSH
32071: LD_INT 3
32073: NEG
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 2
32081: NEG
32082: PUSH
32083: LD_INT 2
32085: NEG
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 3
32093: NEG
32094: PUSH
32095: LD_INT 2
32097: NEG
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 4
32105: NEG
32106: PUSH
32107: LD_INT 3
32109: NEG
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 4
32117: NEG
32118: PUSH
32119: LD_INT 4
32121: NEG
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 2
32129: NEG
32130: PUSH
32131: LD_INT 4
32133: NEG
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 4
32141: NEG
32142: PUSH
32143: LD_INT 2
32145: NEG
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 0
32153: PUSH
32154: LD_INT 4
32156: NEG
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 0
32164: PUSH
32165: LD_INT 5
32167: NEG
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 1
32175: PUSH
32176: LD_INT 4
32178: NEG
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 1
32186: PUSH
32187: LD_INT 3
32189: NEG
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 0
32197: PUSH
32198: LD_INT 3
32200: NEG
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 1
32208: NEG
32209: PUSH
32210: LD_INT 4
32212: NEG
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 1
32220: NEG
32221: PUSH
32222: LD_INT 5
32224: NEG
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 2
32232: PUSH
32233: LD_INT 3
32235: NEG
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 2
32243: NEG
32244: PUSH
32245: LD_INT 5
32247: NEG
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 3
32255: PUSH
32256: LD_INT 0
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 3
32265: PUSH
32266: LD_INT 1
32268: NEG
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 4
32276: PUSH
32277: LD_INT 0
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 4
32286: PUSH
32287: LD_INT 1
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 3
32296: PUSH
32297: LD_INT 1
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 2
32306: PUSH
32307: LD_INT 0
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 2
32316: PUSH
32317: LD_INT 1
32319: NEG
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 2
32327: PUSH
32328: LD_INT 2
32330: NEG
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 4
32338: PUSH
32339: LD_INT 2
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 4
32348: PUSH
32349: LD_INT 4
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 4
32358: PUSH
32359: LD_INT 3
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 5
32368: PUSH
32369: LD_INT 4
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 5
32378: PUSH
32379: LD_INT 5
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 4
32388: PUSH
32389: LD_INT 5
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 3
32398: PUSH
32399: LD_INT 4
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 3
32408: PUSH
32409: LD_INT 3
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 5
32418: PUSH
32419: LD_INT 3
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 3
32428: PUSH
32429: LD_INT 5
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32483: LD_ADDR_VAR 0 33
32487: PUSH
32488: LD_INT 4
32490: NEG
32491: PUSH
32492: LD_INT 4
32494: NEG
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 4
32502: NEG
32503: PUSH
32504: LD_INT 5
32506: NEG
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 3
32514: NEG
32515: PUSH
32516: LD_INT 4
32518: NEG
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 3
32526: NEG
32527: PUSH
32528: LD_INT 3
32530: NEG
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 4
32538: NEG
32539: PUSH
32540: LD_INT 3
32542: NEG
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 5
32550: NEG
32551: PUSH
32552: LD_INT 4
32554: NEG
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 5
32562: NEG
32563: PUSH
32564: LD_INT 5
32566: NEG
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 3
32574: NEG
32575: PUSH
32576: LD_INT 5
32578: NEG
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 5
32586: NEG
32587: PUSH
32588: LD_INT 3
32590: NEG
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 0
32598: PUSH
32599: LD_INT 3
32601: NEG
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 0
32609: PUSH
32610: LD_INT 4
32612: NEG
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 1
32620: PUSH
32621: LD_INT 3
32623: NEG
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 1
32631: PUSH
32632: LD_INT 2
32634: NEG
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 0
32642: PUSH
32643: LD_INT 2
32645: NEG
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 1
32653: NEG
32654: PUSH
32655: LD_INT 3
32657: NEG
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 1
32665: NEG
32666: PUSH
32667: LD_INT 4
32669: NEG
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 2
32677: PUSH
32678: LD_INT 2
32680: NEG
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 2
32688: NEG
32689: PUSH
32690: LD_INT 4
32692: NEG
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 4
32700: PUSH
32701: LD_INT 0
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 4
32710: PUSH
32711: LD_INT 1
32713: NEG
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 5
32721: PUSH
32722: LD_INT 0
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 5
32731: PUSH
32732: LD_INT 1
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 4
32741: PUSH
32742: LD_INT 1
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 3
32751: PUSH
32752: LD_INT 0
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 3
32761: PUSH
32762: LD_INT 1
32764: NEG
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 3
32772: PUSH
32773: LD_INT 2
32775: NEG
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 5
32783: PUSH
32784: LD_INT 2
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 3
32793: PUSH
32794: LD_INT 3
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 3
32803: PUSH
32804: LD_INT 2
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 4
32813: PUSH
32814: LD_INT 3
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 4
32823: PUSH
32824: LD_INT 4
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 3
32833: PUSH
32834: LD_INT 4
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 2
32843: PUSH
32844: LD_INT 3
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 2
32853: PUSH
32854: LD_INT 2
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 4
32863: PUSH
32864: LD_INT 2
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 2
32873: PUSH
32874: LD_INT 4
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 0
32883: PUSH
32884: LD_INT 4
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 0
32893: PUSH
32894: LD_INT 3
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 1
32903: PUSH
32904: LD_INT 4
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 1
32913: PUSH
32914: LD_INT 5
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 0
32923: PUSH
32924: LD_INT 5
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 1
32933: NEG
32934: PUSH
32935: LD_INT 4
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 1
32944: NEG
32945: PUSH
32946: LD_INT 3
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 2
32955: PUSH
32956: LD_INT 5
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 2
32965: NEG
32966: PUSH
32967: LD_INT 3
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33021: LD_ADDR_VAR 0 34
33025: PUSH
33026: LD_INT 0
33028: PUSH
33029: LD_INT 4
33031: NEG
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 0
33039: PUSH
33040: LD_INT 5
33042: NEG
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 1
33050: PUSH
33051: LD_INT 4
33053: NEG
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 1
33061: PUSH
33062: LD_INT 3
33064: NEG
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 0
33072: PUSH
33073: LD_INT 3
33075: NEG
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 1
33083: NEG
33084: PUSH
33085: LD_INT 4
33087: NEG
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 1
33095: NEG
33096: PUSH
33097: LD_INT 5
33099: NEG
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 2
33107: PUSH
33108: LD_INT 3
33110: NEG
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 2
33118: NEG
33119: PUSH
33120: LD_INT 5
33122: NEG
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 3
33130: PUSH
33131: LD_INT 0
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 3
33140: PUSH
33141: LD_INT 1
33143: NEG
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 4
33151: PUSH
33152: LD_INT 0
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 4
33161: PUSH
33162: LD_INT 1
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 3
33171: PUSH
33172: LD_INT 1
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 2
33181: PUSH
33182: LD_INT 0
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 2
33191: PUSH
33192: LD_INT 1
33194: NEG
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 2
33202: PUSH
33203: LD_INT 2
33205: NEG
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 4
33213: PUSH
33214: LD_INT 2
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 4
33223: PUSH
33224: LD_INT 4
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 4
33233: PUSH
33234: LD_INT 3
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 5
33243: PUSH
33244: LD_INT 4
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 5
33253: PUSH
33254: LD_INT 5
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 4
33263: PUSH
33264: LD_INT 5
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 3
33273: PUSH
33274: LD_INT 4
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 3
33283: PUSH
33284: LD_INT 3
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 5
33293: PUSH
33294: LD_INT 3
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 3
33303: PUSH
33304: LD_INT 5
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 0
33313: PUSH
33314: LD_INT 3
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 0
33323: PUSH
33324: LD_INT 2
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 1
33333: PUSH
33334: LD_INT 3
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 1
33343: PUSH
33344: LD_INT 4
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 0
33353: PUSH
33354: LD_INT 4
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 1
33363: NEG
33364: PUSH
33365: LD_INT 3
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 1
33374: NEG
33375: PUSH
33376: LD_INT 2
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 2
33385: PUSH
33386: LD_INT 4
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 2
33395: NEG
33396: PUSH
33397: LD_INT 2
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 4
33406: NEG
33407: PUSH
33408: LD_INT 0
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 4
33417: NEG
33418: PUSH
33419: LD_INT 1
33421: NEG
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 3
33429: NEG
33430: PUSH
33431: LD_INT 0
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 3
33440: NEG
33441: PUSH
33442: LD_INT 1
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 4
33451: NEG
33452: PUSH
33453: LD_INT 1
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 5
33462: NEG
33463: PUSH
33464: LD_INT 0
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 5
33473: NEG
33474: PUSH
33475: LD_INT 1
33477: NEG
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 5
33485: NEG
33486: PUSH
33487: LD_INT 2
33489: NEG
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 3
33497: NEG
33498: PUSH
33499: LD_INT 2
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: ST_TO_ADDR
// end ; end ;
33553: GO 33556
33555: POP
// case btype of b_depot , b_warehouse :
33556: LD_VAR 0 1
33560: PUSH
33561: LD_INT 0
33563: DOUBLE
33564: EQUAL
33565: IFTRUE 33575
33567: LD_INT 1
33569: DOUBLE
33570: EQUAL
33571: IFTRUE 33575
33573: GO 33776
33575: POP
// case nation of nation_american :
33576: LD_VAR 0 5
33580: PUSH
33581: LD_INT 1
33583: DOUBLE
33584: EQUAL
33585: IFTRUE 33589
33587: GO 33645
33589: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
33590: LD_ADDR_VAR 0 9
33594: PUSH
33595: LD_VAR 0 11
33599: PUSH
33600: LD_VAR 0 12
33604: PUSH
33605: LD_VAR 0 13
33609: PUSH
33610: LD_VAR 0 14
33614: PUSH
33615: LD_VAR 0 15
33619: PUSH
33620: LD_VAR 0 16
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: PUSH
33633: LD_VAR 0 4
33637: PUSH
33638: LD_INT 1
33640: PLUS
33641: ARRAY
33642: ST_TO_ADDR
33643: GO 33774
33645: LD_INT 2
33647: DOUBLE
33648: EQUAL
33649: IFTRUE 33653
33651: GO 33709
33653: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
33654: LD_ADDR_VAR 0 9
33658: PUSH
33659: LD_VAR 0 17
33663: PUSH
33664: LD_VAR 0 18
33668: PUSH
33669: LD_VAR 0 19
33673: PUSH
33674: LD_VAR 0 20
33678: PUSH
33679: LD_VAR 0 21
33683: PUSH
33684: LD_VAR 0 22
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: PUSH
33697: LD_VAR 0 4
33701: PUSH
33702: LD_INT 1
33704: PLUS
33705: ARRAY
33706: ST_TO_ADDR
33707: GO 33774
33709: LD_INT 3
33711: DOUBLE
33712: EQUAL
33713: IFTRUE 33717
33715: GO 33773
33717: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33718: LD_ADDR_VAR 0 9
33722: PUSH
33723: LD_VAR 0 23
33727: PUSH
33728: LD_VAR 0 24
33732: PUSH
33733: LD_VAR 0 25
33737: PUSH
33738: LD_VAR 0 26
33742: PUSH
33743: LD_VAR 0 27
33747: PUSH
33748: LD_VAR 0 28
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: PUSH
33761: LD_VAR 0 4
33765: PUSH
33766: LD_INT 1
33768: PLUS
33769: ARRAY
33770: ST_TO_ADDR
33771: GO 33774
33773: POP
33774: GO 34329
33776: LD_INT 2
33778: DOUBLE
33779: EQUAL
33780: IFTRUE 33790
33782: LD_INT 3
33784: DOUBLE
33785: EQUAL
33786: IFTRUE 33790
33788: GO 33846
33790: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33791: LD_ADDR_VAR 0 9
33795: PUSH
33796: LD_VAR 0 29
33800: PUSH
33801: LD_VAR 0 30
33805: PUSH
33806: LD_VAR 0 31
33810: PUSH
33811: LD_VAR 0 32
33815: PUSH
33816: LD_VAR 0 33
33820: PUSH
33821: LD_VAR 0 34
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: PUSH
33834: LD_VAR 0 4
33838: PUSH
33839: LD_INT 1
33841: PLUS
33842: ARRAY
33843: ST_TO_ADDR
33844: GO 34329
33846: LD_INT 16
33848: DOUBLE
33849: EQUAL
33850: IFTRUE 33908
33852: LD_INT 17
33854: DOUBLE
33855: EQUAL
33856: IFTRUE 33908
33858: LD_INT 18
33860: DOUBLE
33861: EQUAL
33862: IFTRUE 33908
33864: LD_INT 19
33866: DOUBLE
33867: EQUAL
33868: IFTRUE 33908
33870: LD_INT 22
33872: DOUBLE
33873: EQUAL
33874: IFTRUE 33908
33876: LD_INT 20
33878: DOUBLE
33879: EQUAL
33880: IFTRUE 33908
33882: LD_INT 21
33884: DOUBLE
33885: EQUAL
33886: IFTRUE 33908
33888: LD_INT 23
33890: DOUBLE
33891: EQUAL
33892: IFTRUE 33908
33894: LD_INT 24
33896: DOUBLE
33897: EQUAL
33898: IFTRUE 33908
33900: LD_INT 25
33902: DOUBLE
33903: EQUAL
33904: IFTRUE 33908
33906: GO 33964
33908: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33909: LD_ADDR_VAR 0 9
33913: PUSH
33914: LD_VAR 0 35
33918: PUSH
33919: LD_VAR 0 36
33923: PUSH
33924: LD_VAR 0 37
33928: PUSH
33929: LD_VAR 0 38
33933: PUSH
33934: LD_VAR 0 39
33938: PUSH
33939: LD_VAR 0 40
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: PUSH
33952: LD_VAR 0 4
33956: PUSH
33957: LD_INT 1
33959: PLUS
33960: ARRAY
33961: ST_TO_ADDR
33962: GO 34329
33964: LD_INT 6
33966: DOUBLE
33967: EQUAL
33968: IFTRUE 34020
33970: LD_INT 7
33972: DOUBLE
33973: EQUAL
33974: IFTRUE 34020
33976: LD_INT 8
33978: DOUBLE
33979: EQUAL
33980: IFTRUE 34020
33982: LD_INT 13
33984: DOUBLE
33985: EQUAL
33986: IFTRUE 34020
33988: LD_INT 12
33990: DOUBLE
33991: EQUAL
33992: IFTRUE 34020
33994: LD_INT 15
33996: DOUBLE
33997: EQUAL
33998: IFTRUE 34020
34000: LD_INT 11
34002: DOUBLE
34003: EQUAL
34004: IFTRUE 34020
34006: LD_INT 14
34008: DOUBLE
34009: EQUAL
34010: IFTRUE 34020
34012: LD_INT 10
34014: DOUBLE
34015: EQUAL
34016: IFTRUE 34020
34018: GO 34076
34020: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
34021: LD_ADDR_VAR 0 9
34025: PUSH
34026: LD_VAR 0 41
34030: PUSH
34031: LD_VAR 0 42
34035: PUSH
34036: LD_VAR 0 43
34040: PUSH
34041: LD_VAR 0 44
34045: PUSH
34046: LD_VAR 0 45
34050: PUSH
34051: LD_VAR 0 46
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: PUSH
34064: LD_VAR 0 4
34068: PUSH
34069: LD_INT 1
34071: PLUS
34072: ARRAY
34073: ST_TO_ADDR
34074: GO 34329
34076: LD_INT 36
34078: DOUBLE
34079: EQUAL
34080: IFTRUE 34084
34082: GO 34140
34084: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34085: LD_ADDR_VAR 0 9
34089: PUSH
34090: LD_VAR 0 47
34094: PUSH
34095: LD_VAR 0 48
34099: PUSH
34100: LD_VAR 0 49
34104: PUSH
34105: LD_VAR 0 50
34109: PUSH
34110: LD_VAR 0 51
34114: PUSH
34115: LD_VAR 0 52
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: PUSH
34128: LD_VAR 0 4
34132: PUSH
34133: LD_INT 1
34135: PLUS
34136: ARRAY
34137: ST_TO_ADDR
34138: GO 34329
34140: LD_INT 4
34142: DOUBLE
34143: EQUAL
34144: IFTRUE 34166
34146: LD_INT 5
34148: DOUBLE
34149: EQUAL
34150: IFTRUE 34166
34152: LD_INT 34
34154: DOUBLE
34155: EQUAL
34156: IFTRUE 34166
34158: LD_INT 37
34160: DOUBLE
34161: EQUAL
34162: IFTRUE 34166
34164: GO 34222
34166: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34167: LD_ADDR_VAR 0 9
34171: PUSH
34172: LD_VAR 0 53
34176: PUSH
34177: LD_VAR 0 54
34181: PUSH
34182: LD_VAR 0 55
34186: PUSH
34187: LD_VAR 0 56
34191: PUSH
34192: LD_VAR 0 57
34196: PUSH
34197: LD_VAR 0 58
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: PUSH
34210: LD_VAR 0 4
34214: PUSH
34215: LD_INT 1
34217: PLUS
34218: ARRAY
34219: ST_TO_ADDR
34220: GO 34329
34222: LD_INT 31
34224: DOUBLE
34225: EQUAL
34226: IFTRUE 34272
34228: LD_INT 32
34230: DOUBLE
34231: EQUAL
34232: IFTRUE 34272
34234: LD_INT 33
34236: DOUBLE
34237: EQUAL
34238: IFTRUE 34272
34240: LD_INT 27
34242: DOUBLE
34243: EQUAL
34244: IFTRUE 34272
34246: LD_INT 26
34248: DOUBLE
34249: EQUAL
34250: IFTRUE 34272
34252: LD_INT 28
34254: DOUBLE
34255: EQUAL
34256: IFTRUE 34272
34258: LD_INT 29
34260: DOUBLE
34261: EQUAL
34262: IFTRUE 34272
34264: LD_INT 30
34266: DOUBLE
34267: EQUAL
34268: IFTRUE 34272
34270: GO 34328
34272: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
34273: LD_ADDR_VAR 0 9
34277: PUSH
34278: LD_VAR 0 59
34282: PUSH
34283: LD_VAR 0 60
34287: PUSH
34288: LD_VAR 0 61
34292: PUSH
34293: LD_VAR 0 62
34297: PUSH
34298: LD_VAR 0 63
34302: PUSH
34303: LD_VAR 0 64
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: PUSH
34316: LD_VAR 0 4
34320: PUSH
34321: LD_INT 1
34323: PLUS
34324: ARRAY
34325: ST_TO_ADDR
34326: GO 34329
34328: POP
// temp_list2 = [ ] ;
34329: LD_ADDR_VAR 0 10
34333: PUSH
34334: EMPTY
34335: ST_TO_ADDR
// for i in temp_list do
34336: LD_ADDR_VAR 0 8
34340: PUSH
34341: LD_VAR 0 9
34345: PUSH
34346: FOR_IN
34347: IFFALSE 34399
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34349: LD_ADDR_VAR 0 10
34353: PUSH
34354: LD_VAR 0 10
34358: PUSH
34359: LD_VAR 0 8
34363: PUSH
34364: LD_INT 1
34366: ARRAY
34367: PUSH
34368: LD_VAR 0 2
34372: PLUS
34373: PUSH
34374: LD_VAR 0 8
34378: PUSH
34379: LD_INT 2
34381: ARRAY
34382: PUSH
34383: LD_VAR 0 3
34387: PLUS
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: EMPTY
34394: LIST
34395: ADD
34396: ST_TO_ADDR
34397: GO 34346
34399: POP
34400: POP
// result = temp_list2 ;
34401: LD_ADDR_VAR 0 7
34405: PUSH
34406: LD_VAR 0 10
34410: ST_TO_ADDR
// end ;
34411: LD_VAR 0 7
34415: RET
// export function EnemyInRange ( unit , dist ) ; begin
34416: LD_INT 0
34418: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34419: LD_ADDR_VAR 0 3
34423: PUSH
34424: LD_VAR 0 1
34428: PPUSH
34429: CALL_OW 255
34433: PPUSH
34434: LD_VAR 0 1
34438: PPUSH
34439: CALL_OW 250
34443: PPUSH
34444: LD_VAR 0 1
34448: PPUSH
34449: CALL_OW 251
34453: PPUSH
34454: LD_VAR 0 2
34458: PPUSH
34459: CALL 8520 0 4
34463: PUSH
34464: LD_INT 4
34466: ARRAY
34467: ST_TO_ADDR
// end ;
34468: LD_VAR 0 3
34472: RET
// export function PlayerSeeMe ( unit ) ; begin
34473: LD_INT 0
34475: PPUSH
// result := See ( your_side , unit ) ;
34476: LD_ADDR_VAR 0 2
34480: PUSH
34481: LD_OWVAR 2
34485: PPUSH
34486: LD_VAR 0 1
34490: PPUSH
34491: CALL_OW 292
34495: ST_TO_ADDR
// end ;
34496: LD_VAR 0 2
34500: RET
// export function ReverseDir ( unit ) ; begin
34501: LD_INT 0
34503: PPUSH
// if not unit then
34504: LD_VAR 0 1
34508: NOT
34509: IFFALSE 34513
// exit ;
34511: GO 34536
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34513: LD_ADDR_VAR 0 2
34517: PUSH
34518: LD_VAR 0 1
34522: PPUSH
34523: CALL_OW 254
34527: PUSH
34528: LD_INT 3
34530: PLUS
34531: PUSH
34532: LD_INT 6
34534: MOD
34535: ST_TO_ADDR
// end ;
34536: LD_VAR 0 2
34540: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
34541: LD_INT 0
34543: PPUSH
34544: PPUSH
34545: PPUSH
34546: PPUSH
34547: PPUSH
// if not hexes then
34548: LD_VAR 0 2
34552: NOT
34553: IFFALSE 34557
// exit ;
34555: GO 34705
// dist := 9999 ;
34557: LD_ADDR_VAR 0 5
34561: PUSH
34562: LD_INT 9999
34564: ST_TO_ADDR
// for i = 1 to hexes do
34565: LD_ADDR_VAR 0 4
34569: PUSH
34570: DOUBLE
34571: LD_INT 1
34573: DEC
34574: ST_TO_ADDR
34575: LD_VAR 0 2
34579: PUSH
34580: FOR_TO
34581: IFFALSE 34693
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
34583: LD_VAR 0 1
34587: PPUSH
34588: LD_VAR 0 2
34592: PUSH
34593: LD_VAR 0 4
34597: ARRAY
34598: PUSH
34599: LD_INT 1
34601: ARRAY
34602: PPUSH
34603: LD_VAR 0 2
34607: PUSH
34608: LD_VAR 0 4
34612: ARRAY
34613: PUSH
34614: LD_INT 2
34616: ARRAY
34617: PPUSH
34618: CALL_OW 297
34622: PUSH
34623: LD_VAR 0 5
34627: LESS
34628: IFFALSE 34691
// begin hex := hexes [ i ] ;
34630: LD_ADDR_VAR 0 7
34634: PUSH
34635: LD_VAR 0 2
34639: PUSH
34640: LD_VAR 0 4
34644: ARRAY
34645: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34646: LD_ADDR_VAR 0 5
34650: PUSH
34651: LD_VAR 0 1
34655: PPUSH
34656: LD_VAR 0 2
34660: PUSH
34661: LD_VAR 0 4
34665: ARRAY
34666: PUSH
34667: LD_INT 1
34669: ARRAY
34670: PPUSH
34671: LD_VAR 0 2
34675: PUSH
34676: LD_VAR 0 4
34680: ARRAY
34681: PUSH
34682: LD_INT 2
34684: ARRAY
34685: PPUSH
34686: CALL_OW 297
34690: ST_TO_ADDR
// end ; end ;
34691: GO 34580
34693: POP
34694: POP
// result := hex ;
34695: LD_ADDR_VAR 0 3
34699: PUSH
34700: LD_VAR 0 7
34704: ST_TO_ADDR
// end ;
34705: LD_VAR 0 3
34709: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34710: LD_INT 0
34712: PPUSH
34713: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34714: LD_VAR 0 1
34718: NOT
34719: PUSH
34720: LD_VAR 0 1
34724: PUSH
34725: LD_INT 21
34727: PUSH
34728: LD_INT 2
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 23
34737: PUSH
34738: LD_INT 2
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PPUSH
34749: CALL_OW 69
34753: IN
34754: NOT
34755: OR
34756: IFFALSE 34760
// exit ;
34758: GO 34807
// for i = 1 to 3 do
34760: LD_ADDR_VAR 0 3
34764: PUSH
34765: DOUBLE
34766: LD_INT 1
34768: DEC
34769: ST_TO_ADDR
34770: LD_INT 3
34772: PUSH
34773: FOR_TO
34774: IFFALSE 34805
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34776: LD_VAR 0 1
34780: PPUSH
34781: CALL_OW 250
34785: PPUSH
34786: LD_VAR 0 1
34790: PPUSH
34791: CALL_OW 251
34795: PPUSH
34796: LD_INT 1
34798: PPUSH
34799: CALL_OW 453
34803: GO 34773
34805: POP
34806: POP
// end ;
34807: LD_VAR 0 2
34811: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34812: LD_INT 0
34814: PPUSH
34815: PPUSH
34816: PPUSH
34817: PPUSH
34818: PPUSH
34819: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34820: LD_VAR 0 1
34824: NOT
34825: PUSH
34826: LD_VAR 0 2
34830: NOT
34831: OR
34832: PUSH
34833: LD_VAR 0 1
34837: PPUSH
34838: CALL_OW 314
34842: OR
34843: IFFALSE 34847
// exit ;
34845: GO 35288
// x := GetX ( enemy_unit ) ;
34847: LD_ADDR_VAR 0 7
34851: PUSH
34852: LD_VAR 0 2
34856: PPUSH
34857: CALL_OW 250
34861: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34862: LD_ADDR_VAR 0 8
34866: PUSH
34867: LD_VAR 0 2
34871: PPUSH
34872: CALL_OW 251
34876: ST_TO_ADDR
// if not x or not y then
34877: LD_VAR 0 7
34881: NOT
34882: PUSH
34883: LD_VAR 0 8
34887: NOT
34888: OR
34889: IFFALSE 34893
// exit ;
34891: GO 35288
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34893: LD_ADDR_VAR 0 6
34897: PUSH
34898: LD_VAR 0 7
34902: PPUSH
34903: LD_INT 0
34905: PPUSH
34906: LD_INT 4
34908: PPUSH
34909: CALL_OW 272
34913: PUSH
34914: LD_VAR 0 8
34918: PPUSH
34919: LD_INT 0
34921: PPUSH
34922: LD_INT 4
34924: PPUSH
34925: CALL_OW 273
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: LD_VAR 0 7
34938: PPUSH
34939: LD_INT 1
34941: PPUSH
34942: LD_INT 4
34944: PPUSH
34945: CALL_OW 272
34949: PUSH
34950: LD_VAR 0 8
34954: PPUSH
34955: LD_INT 1
34957: PPUSH
34958: LD_INT 4
34960: PPUSH
34961: CALL_OW 273
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_VAR 0 7
34974: PPUSH
34975: LD_INT 2
34977: PPUSH
34978: LD_INT 4
34980: PPUSH
34981: CALL_OW 272
34985: PUSH
34986: LD_VAR 0 8
34990: PPUSH
34991: LD_INT 2
34993: PPUSH
34994: LD_INT 4
34996: PPUSH
34997: CALL_OW 273
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_VAR 0 7
35010: PPUSH
35011: LD_INT 3
35013: PPUSH
35014: LD_INT 4
35016: PPUSH
35017: CALL_OW 272
35021: PUSH
35022: LD_VAR 0 8
35026: PPUSH
35027: LD_INT 3
35029: PPUSH
35030: LD_INT 4
35032: PPUSH
35033: CALL_OW 273
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_VAR 0 7
35046: PPUSH
35047: LD_INT 4
35049: PPUSH
35050: LD_INT 4
35052: PPUSH
35053: CALL_OW 272
35057: PUSH
35058: LD_VAR 0 8
35062: PPUSH
35063: LD_INT 4
35065: PPUSH
35066: LD_INT 4
35068: PPUSH
35069: CALL_OW 273
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_VAR 0 7
35082: PPUSH
35083: LD_INT 5
35085: PPUSH
35086: LD_INT 4
35088: PPUSH
35089: CALL_OW 272
35093: PUSH
35094: LD_VAR 0 8
35098: PPUSH
35099: LD_INT 5
35101: PPUSH
35102: LD_INT 4
35104: PPUSH
35105: CALL_OW 273
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: ST_TO_ADDR
// for i = tmp downto 1 do
35122: LD_ADDR_VAR 0 4
35126: PUSH
35127: DOUBLE
35128: LD_VAR 0 6
35132: INC
35133: ST_TO_ADDR
35134: LD_INT 1
35136: PUSH
35137: FOR_DOWNTO
35138: IFFALSE 35239
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35140: LD_VAR 0 6
35144: PUSH
35145: LD_VAR 0 4
35149: ARRAY
35150: PUSH
35151: LD_INT 1
35153: ARRAY
35154: PPUSH
35155: LD_VAR 0 6
35159: PUSH
35160: LD_VAR 0 4
35164: ARRAY
35165: PUSH
35166: LD_INT 2
35168: ARRAY
35169: PPUSH
35170: CALL_OW 488
35174: NOT
35175: PUSH
35176: LD_VAR 0 6
35180: PUSH
35181: LD_VAR 0 4
35185: ARRAY
35186: PUSH
35187: LD_INT 1
35189: ARRAY
35190: PPUSH
35191: LD_VAR 0 6
35195: PUSH
35196: LD_VAR 0 4
35200: ARRAY
35201: PUSH
35202: LD_INT 2
35204: ARRAY
35205: PPUSH
35206: CALL_OW 428
35210: PUSH
35211: LD_INT 0
35213: NONEQUAL
35214: OR
35215: IFFALSE 35237
// tmp := Delete ( tmp , i ) ;
35217: LD_ADDR_VAR 0 6
35221: PUSH
35222: LD_VAR 0 6
35226: PPUSH
35227: LD_VAR 0 4
35231: PPUSH
35232: CALL_OW 3
35236: ST_TO_ADDR
35237: GO 35137
35239: POP
35240: POP
// j := GetClosestHex ( unit , tmp ) ;
35241: LD_ADDR_VAR 0 5
35245: PUSH
35246: LD_VAR 0 1
35250: PPUSH
35251: LD_VAR 0 6
35255: PPUSH
35256: CALL 34541 0 2
35260: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35261: LD_VAR 0 1
35265: PPUSH
35266: LD_VAR 0 5
35270: PUSH
35271: LD_INT 1
35273: ARRAY
35274: PPUSH
35275: LD_VAR 0 5
35279: PUSH
35280: LD_INT 2
35282: ARRAY
35283: PPUSH
35284: CALL_OW 111
// end ;
35288: LD_VAR 0 3
35292: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35293: LD_INT 0
35295: PPUSH
35296: PPUSH
35297: PPUSH
// uc_side = 0 ;
35298: LD_ADDR_OWVAR 20
35302: PUSH
35303: LD_INT 0
35305: ST_TO_ADDR
// uc_nation = 0 ;
35306: LD_ADDR_OWVAR 21
35310: PUSH
35311: LD_INT 0
35313: ST_TO_ADDR
// InitHc ;
35314: CALL_OW 19
// InitVc ;
35318: CALL_OW 20
// if mastodonts then
35322: LD_VAR 0 6
35326: IFFALSE 35393
// for i = 1 to mastodonts do
35328: LD_ADDR_VAR 0 11
35332: PUSH
35333: DOUBLE
35334: LD_INT 1
35336: DEC
35337: ST_TO_ADDR
35338: LD_VAR 0 6
35342: PUSH
35343: FOR_TO
35344: IFFALSE 35391
// begin vc_chassis := 31 ;
35346: LD_ADDR_OWVAR 37
35350: PUSH
35351: LD_INT 31
35353: ST_TO_ADDR
// vc_control := control_rider ;
35354: LD_ADDR_OWVAR 38
35358: PUSH
35359: LD_INT 4
35361: ST_TO_ADDR
// animal := CreateVehicle ;
35362: LD_ADDR_VAR 0 12
35366: PUSH
35367: CALL_OW 45
35371: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35372: LD_VAR 0 12
35376: PPUSH
35377: LD_VAR 0 8
35381: PPUSH
35382: LD_INT 0
35384: PPUSH
35385: CALL 37462 0 3
// end ;
35389: GO 35343
35391: POP
35392: POP
// if horses then
35393: LD_VAR 0 5
35397: IFFALSE 35464
// for i = 1 to horses do
35399: LD_ADDR_VAR 0 11
35403: PUSH
35404: DOUBLE
35405: LD_INT 1
35407: DEC
35408: ST_TO_ADDR
35409: LD_VAR 0 5
35413: PUSH
35414: FOR_TO
35415: IFFALSE 35462
// begin hc_class := 21 ;
35417: LD_ADDR_OWVAR 28
35421: PUSH
35422: LD_INT 21
35424: ST_TO_ADDR
// hc_gallery :=  ;
35425: LD_ADDR_OWVAR 33
35429: PUSH
35430: LD_STRING 
35432: ST_TO_ADDR
// animal := CreateHuman ;
35433: LD_ADDR_VAR 0 12
35437: PUSH
35438: CALL_OW 44
35442: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35443: LD_VAR 0 12
35447: PPUSH
35448: LD_VAR 0 8
35452: PPUSH
35453: LD_INT 0
35455: PPUSH
35456: CALL 37462 0 3
// end ;
35460: GO 35414
35462: POP
35463: POP
// if birds then
35464: LD_VAR 0 1
35468: IFFALSE 35535
// for i = 1 to birds do
35470: LD_ADDR_VAR 0 11
35474: PUSH
35475: DOUBLE
35476: LD_INT 1
35478: DEC
35479: ST_TO_ADDR
35480: LD_VAR 0 1
35484: PUSH
35485: FOR_TO
35486: IFFALSE 35533
// begin hc_class = 18 ;
35488: LD_ADDR_OWVAR 28
35492: PUSH
35493: LD_INT 18
35495: ST_TO_ADDR
// hc_gallery =  ;
35496: LD_ADDR_OWVAR 33
35500: PUSH
35501: LD_STRING 
35503: ST_TO_ADDR
// animal := CreateHuman ;
35504: LD_ADDR_VAR 0 12
35508: PUSH
35509: CALL_OW 44
35513: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35514: LD_VAR 0 12
35518: PPUSH
35519: LD_VAR 0 8
35523: PPUSH
35524: LD_INT 0
35526: PPUSH
35527: CALL 37462 0 3
// end ;
35531: GO 35485
35533: POP
35534: POP
// if tigers then
35535: LD_VAR 0 2
35539: IFFALSE 35623
// for i = 1 to tigers do
35541: LD_ADDR_VAR 0 11
35545: PUSH
35546: DOUBLE
35547: LD_INT 1
35549: DEC
35550: ST_TO_ADDR
35551: LD_VAR 0 2
35555: PUSH
35556: FOR_TO
35557: IFFALSE 35621
// begin hc_class = class_tiger ;
35559: LD_ADDR_OWVAR 28
35563: PUSH
35564: LD_INT 14
35566: ST_TO_ADDR
// hc_gallery =  ;
35567: LD_ADDR_OWVAR 33
35571: PUSH
35572: LD_STRING 
35574: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35575: LD_ADDR_OWVAR 35
35579: PUSH
35580: LD_INT 7
35582: NEG
35583: PPUSH
35584: LD_INT 7
35586: PPUSH
35587: CALL_OW 12
35591: ST_TO_ADDR
// animal := CreateHuman ;
35592: LD_ADDR_VAR 0 12
35596: PUSH
35597: CALL_OW 44
35601: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35602: LD_VAR 0 12
35606: PPUSH
35607: LD_VAR 0 8
35611: PPUSH
35612: LD_INT 0
35614: PPUSH
35615: CALL 37462 0 3
// end ;
35619: GO 35556
35621: POP
35622: POP
// if apemans then
35623: LD_VAR 0 3
35627: IFFALSE 35750
// for i = 1 to apemans do
35629: LD_ADDR_VAR 0 11
35633: PUSH
35634: DOUBLE
35635: LD_INT 1
35637: DEC
35638: ST_TO_ADDR
35639: LD_VAR 0 3
35643: PUSH
35644: FOR_TO
35645: IFFALSE 35748
// begin hc_class = class_apeman ;
35647: LD_ADDR_OWVAR 28
35651: PUSH
35652: LD_INT 12
35654: ST_TO_ADDR
// hc_gallery =  ;
35655: LD_ADDR_OWVAR 33
35659: PUSH
35660: LD_STRING 
35662: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
35663: LD_ADDR_OWVAR 35
35667: PUSH
35668: LD_INT 5
35670: NEG
35671: PPUSH
35672: LD_INT 5
35674: PPUSH
35675: CALL_OW 12
35679: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35680: LD_ADDR_OWVAR 31
35684: PUSH
35685: LD_INT 1
35687: PPUSH
35688: LD_INT 3
35690: PPUSH
35691: CALL_OW 12
35695: PUSH
35696: LD_INT 1
35698: PPUSH
35699: LD_INT 3
35701: PPUSH
35702: CALL_OW 12
35706: PUSH
35707: LD_INT 0
35709: PUSH
35710: LD_INT 0
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: ST_TO_ADDR
// animal := CreateHuman ;
35719: LD_ADDR_VAR 0 12
35723: PUSH
35724: CALL_OW 44
35728: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35729: LD_VAR 0 12
35733: PPUSH
35734: LD_VAR 0 8
35738: PPUSH
35739: LD_INT 0
35741: PPUSH
35742: CALL 37462 0 3
// end ;
35746: GO 35644
35748: POP
35749: POP
// if enchidnas then
35750: LD_VAR 0 4
35754: IFFALSE 35821
// for i = 1 to enchidnas do
35756: LD_ADDR_VAR 0 11
35760: PUSH
35761: DOUBLE
35762: LD_INT 1
35764: DEC
35765: ST_TO_ADDR
35766: LD_VAR 0 4
35770: PUSH
35771: FOR_TO
35772: IFFALSE 35819
// begin hc_class = 13 ;
35774: LD_ADDR_OWVAR 28
35778: PUSH
35779: LD_INT 13
35781: ST_TO_ADDR
// hc_gallery =  ;
35782: LD_ADDR_OWVAR 33
35786: PUSH
35787: LD_STRING 
35789: ST_TO_ADDR
// animal := CreateHuman ;
35790: LD_ADDR_VAR 0 12
35794: PUSH
35795: CALL_OW 44
35799: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35800: LD_VAR 0 12
35804: PPUSH
35805: LD_VAR 0 8
35809: PPUSH
35810: LD_INT 0
35812: PPUSH
35813: CALL 37462 0 3
// end ;
35817: GO 35771
35819: POP
35820: POP
// if fishes then
35821: LD_VAR 0 7
35825: IFFALSE 35892
// for i = 1 to fishes do
35827: LD_ADDR_VAR 0 11
35831: PUSH
35832: DOUBLE
35833: LD_INT 1
35835: DEC
35836: ST_TO_ADDR
35837: LD_VAR 0 7
35841: PUSH
35842: FOR_TO
35843: IFFALSE 35890
// begin hc_class = 20 ;
35845: LD_ADDR_OWVAR 28
35849: PUSH
35850: LD_INT 20
35852: ST_TO_ADDR
// hc_gallery =  ;
35853: LD_ADDR_OWVAR 33
35857: PUSH
35858: LD_STRING 
35860: ST_TO_ADDR
// animal := CreateHuman ;
35861: LD_ADDR_VAR 0 12
35865: PUSH
35866: CALL_OW 44
35870: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35871: LD_VAR 0 12
35875: PPUSH
35876: LD_VAR 0 9
35880: PPUSH
35881: LD_INT 0
35883: PPUSH
35884: CALL 37462 0 3
// end ;
35888: GO 35842
35890: POP
35891: POP
// end ;
35892: LD_VAR 0 10
35896: RET
// export function WantHeal ( sci , unit ) ; begin
35897: LD_INT 0
35899: PPUSH
// if GetTaskList ( sci ) > 0 then
35900: LD_VAR 0 1
35904: PPUSH
35905: CALL_OW 437
35909: PUSH
35910: LD_INT 0
35912: GREATER
35913: IFFALSE 35983
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35915: LD_VAR 0 1
35919: PPUSH
35920: CALL_OW 437
35924: PUSH
35925: LD_INT 1
35927: ARRAY
35928: PUSH
35929: LD_INT 1
35931: ARRAY
35932: PUSH
35933: LD_STRING l
35935: EQUAL
35936: PUSH
35937: LD_VAR 0 1
35941: PPUSH
35942: CALL_OW 437
35946: PUSH
35947: LD_INT 1
35949: ARRAY
35950: PUSH
35951: LD_INT 4
35953: ARRAY
35954: PUSH
35955: LD_VAR 0 2
35959: EQUAL
35960: AND
35961: IFFALSE 35973
// result := true else
35963: LD_ADDR_VAR 0 3
35967: PUSH
35968: LD_INT 1
35970: ST_TO_ADDR
35971: GO 35981
// result := false ;
35973: LD_ADDR_VAR 0 3
35977: PUSH
35978: LD_INT 0
35980: ST_TO_ADDR
// end else
35981: GO 35991
// result := false ;
35983: LD_ADDR_VAR 0 3
35987: PUSH
35988: LD_INT 0
35990: ST_TO_ADDR
// end ;
35991: LD_VAR 0 3
35995: RET
// export function HealTarget ( sci ) ; begin
35996: LD_INT 0
35998: PPUSH
// if not sci then
35999: LD_VAR 0 1
36003: NOT
36004: IFFALSE 36008
// exit ;
36006: GO 36073
// result := 0 ;
36008: LD_ADDR_VAR 0 2
36012: PUSH
36013: LD_INT 0
36015: ST_TO_ADDR
// if GetTaskList ( sci ) then
36016: LD_VAR 0 1
36020: PPUSH
36021: CALL_OW 437
36025: IFFALSE 36073
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36027: LD_VAR 0 1
36031: PPUSH
36032: CALL_OW 437
36036: PUSH
36037: LD_INT 1
36039: ARRAY
36040: PUSH
36041: LD_INT 1
36043: ARRAY
36044: PUSH
36045: LD_STRING l
36047: EQUAL
36048: IFFALSE 36073
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36050: LD_ADDR_VAR 0 2
36054: PUSH
36055: LD_VAR 0 1
36059: PPUSH
36060: CALL_OW 437
36064: PUSH
36065: LD_INT 1
36067: ARRAY
36068: PUSH
36069: LD_INT 4
36071: ARRAY
36072: ST_TO_ADDR
// end ;
36073: LD_VAR 0 2
36077: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36078: LD_INT 0
36080: PPUSH
36081: PPUSH
36082: PPUSH
36083: PPUSH
// if not base_units then
36084: LD_VAR 0 1
36088: NOT
36089: IFFALSE 36093
// exit ;
36091: GO 36180
// result := false ;
36093: LD_ADDR_VAR 0 2
36097: PUSH
36098: LD_INT 0
36100: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36101: LD_ADDR_VAR 0 5
36105: PUSH
36106: LD_VAR 0 1
36110: PPUSH
36111: LD_INT 21
36113: PUSH
36114: LD_INT 3
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PPUSH
36121: CALL_OW 72
36125: ST_TO_ADDR
// if not tmp then
36126: LD_VAR 0 5
36130: NOT
36131: IFFALSE 36135
// exit ;
36133: GO 36180
// for i in tmp do
36135: LD_ADDR_VAR 0 3
36139: PUSH
36140: LD_VAR 0 5
36144: PUSH
36145: FOR_IN
36146: IFFALSE 36178
// begin result := EnemyInRange ( i , 22 ) ;
36148: LD_ADDR_VAR 0 2
36152: PUSH
36153: LD_VAR 0 3
36157: PPUSH
36158: LD_INT 22
36160: PPUSH
36161: CALL 34416 0 2
36165: ST_TO_ADDR
// if result then
36166: LD_VAR 0 2
36170: IFFALSE 36176
// exit ;
36172: POP
36173: POP
36174: GO 36180
// end ;
36176: GO 36145
36178: POP
36179: POP
// end ;
36180: LD_VAR 0 2
36184: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
36185: LD_INT 0
36187: PPUSH
36188: PPUSH
// if not units then
36189: LD_VAR 0 1
36193: NOT
36194: IFFALSE 36198
// exit ;
36196: GO 36268
// result := [ ] ;
36198: LD_ADDR_VAR 0 3
36202: PUSH
36203: EMPTY
36204: ST_TO_ADDR
// for i in units do
36205: LD_ADDR_VAR 0 4
36209: PUSH
36210: LD_VAR 0 1
36214: PUSH
36215: FOR_IN
36216: IFFALSE 36266
// if GetTag ( i ) = tag then
36218: LD_VAR 0 4
36222: PPUSH
36223: CALL_OW 110
36227: PUSH
36228: LD_VAR 0 2
36232: EQUAL
36233: IFFALSE 36264
// result := Insert ( result , result + 1 , i ) ;
36235: LD_ADDR_VAR 0 3
36239: PUSH
36240: LD_VAR 0 3
36244: PPUSH
36245: LD_VAR 0 3
36249: PUSH
36250: LD_INT 1
36252: PLUS
36253: PPUSH
36254: LD_VAR 0 4
36258: PPUSH
36259: CALL_OW 2
36263: ST_TO_ADDR
36264: GO 36215
36266: POP
36267: POP
// end ;
36268: LD_VAR 0 3
36272: RET
// export function IsDriver ( un ) ; begin
36273: LD_INT 0
36275: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36276: LD_ADDR_VAR 0 2
36280: PUSH
36281: LD_VAR 0 1
36285: PUSH
36286: LD_INT 55
36288: PUSH
36289: EMPTY
36290: LIST
36291: PPUSH
36292: CALL_OW 69
36296: IN
36297: ST_TO_ADDR
// end ;
36298: LD_VAR 0 2
36302: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36303: LD_INT 0
36305: PPUSH
36306: PPUSH
// list := [ ] ;
36307: LD_ADDR_VAR 0 5
36311: PUSH
36312: EMPTY
36313: ST_TO_ADDR
// case d of 0 :
36314: LD_VAR 0 3
36318: PUSH
36319: LD_INT 0
36321: DOUBLE
36322: EQUAL
36323: IFTRUE 36327
36325: GO 36460
36327: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36328: LD_ADDR_VAR 0 5
36332: PUSH
36333: LD_VAR 0 1
36337: PUSH
36338: LD_INT 4
36340: MINUS
36341: PUSH
36342: LD_VAR 0 2
36346: PUSH
36347: LD_INT 4
36349: MINUS
36350: PUSH
36351: LD_INT 2
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: LIST
36358: PUSH
36359: LD_VAR 0 1
36363: PUSH
36364: LD_INT 3
36366: MINUS
36367: PUSH
36368: LD_VAR 0 2
36372: PUSH
36373: LD_INT 1
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: LIST
36380: PUSH
36381: LD_VAR 0 1
36385: PUSH
36386: LD_INT 4
36388: PLUS
36389: PUSH
36390: LD_VAR 0 2
36394: PUSH
36395: LD_INT 4
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: LIST
36402: PUSH
36403: LD_VAR 0 1
36407: PUSH
36408: LD_INT 3
36410: PLUS
36411: PUSH
36412: LD_VAR 0 2
36416: PUSH
36417: LD_INT 3
36419: PLUS
36420: PUSH
36421: LD_INT 5
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: LIST
36428: PUSH
36429: LD_VAR 0 1
36433: PUSH
36434: LD_VAR 0 2
36438: PUSH
36439: LD_INT 4
36441: PLUS
36442: PUSH
36443: LD_INT 0
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: LIST
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: ST_TO_ADDR
// end ; 1 :
36458: GO 37158
36460: LD_INT 1
36462: DOUBLE
36463: EQUAL
36464: IFTRUE 36468
36466: GO 36601
36468: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36469: LD_ADDR_VAR 0 5
36473: PUSH
36474: LD_VAR 0 1
36478: PUSH
36479: LD_VAR 0 2
36483: PUSH
36484: LD_INT 4
36486: MINUS
36487: PUSH
36488: LD_INT 3
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: LIST
36495: PUSH
36496: LD_VAR 0 1
36500: PUSH
36501: LD_INT 3
36503: MINUS
36504: PUSH
36505: LD_VAR 0 2
36509: PUSH
36510: LD_INT 3
36512: MINUS
36513: PUSH
36514: LD_INT 2
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: LIST
36521: PUSH
36522: LD_VAR 0 1
36526: PUSH
36527: LD_INT 4
36529: MINUS
36530: PUSH
36531: LD_VAR 0 2
36535: PUSH
36536: LD_INT 1
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: LIST
36543: PUSH
36544: LD_VAR 0 1
36548: PUSH
36549: LD_VAR 0 2
36553: PUSH
36554: LD_INT 3
36556: PLUS
36557: PUSH
36558: LD_INT 0
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: LIST
36565: PUSH
36566: LD_VAR 0 1
36570: PUSH
36571: LD_INT 4
36573: PLUS
36574: PUSH
36575: LD_VAR 0 2
36579: PUSH
36580: LD_INT 4
36582: PLUS
36583: PUSH
36584: LD_INT 5
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: LIST
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: ST_TO_ADDR
// end ; 2 :
36599: GO 37158
36601: LD_INT 2
36603: DOUBLE
36604: EQUAL
36605: IFTRUE 36609
36607: GO 36738
36609: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36610: LD_ADDR_VAR 0 5
36614: PUSH
36615: LD_VAR 0 1
36619: PUSH
36620: LD_VAR 0 2
36624: PUSH
36625: LD_INT 3
36627: MINUS
36628: PUSH
36629: LD_INT 3
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: LIST
36636: PUSH
36637: LD_VAR 0 1
36641: PUSH
36642: LD_INT 4
36644: PLUS
36645: PUSH
36646: LD_VAR 0 2
36650: PUSH
36651: LD_INT 4
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: LIST
36658: PUSH
36659: LD_VAR 0 1
36663: PUSH
36664: LD_VAR 0 2
36668: PUSH
36669: LD_INT 4
36671: PLUS
36672: PUSH
36673: LD_INT 0
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: LIST
36680: PUSH
36681: LD_VAR 0 1
36685: PUSH
36686: LD_INT 3
36688: MINUS
36689: PUSH
36690: LD_VAR 0 2
36694: PUSH
36695: LD_INT 1
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: LIST
36702: PUSH
36703: LD_VAR 0 1
36707: PUSH
36708: LD_INT 4
36710: MINUS
36711: PUSH
36712: LD_VAR 0 2
36716: PUSH
36717: LD_INT 4
36719: MINUS
36720: PUSH
36721: LD_INT 2
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: LIST
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: ST_TO_ADDR
// end ; 3 :
36736: GO 37158
36738: LD_INT 3
36740: DOUBLE
36741: EQUAL
36742: IFTRUE 36746
36744: GO 36879
36746: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36747: LD_ADDR_VAR 0 5
36751: PUSH
36752: LD_VAR 0 1
36756: PUSH
36757: LD_INT 3
36759: PLUS
36760: PUSH
36761: LD_VAR 0 2
36765: PUSH
36766: LD_INT 4
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: LIST
36773: PUSH
36774: LD_VAR 0 1
36778: PUSH
36779: LD_INT 4
36781: PLUS
36782: PUSH
36783: LD_VAR 0 2
36787: PUSH
36788: LD_INT 4
36790: PLUS
36791: PUSH
36792: LD_INT 5
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: LIST
36799: PUSH
36800: LD_VAR 0 1
36804: PUSH
36805: LD_INT 4
36807: MINUS
36808: PUSH
36809: LD_VAR 0 2
36813: PUSH
36814: LD_INT 1
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: LIST
36821: PUSH
36822: LD_VAR 0 1
36826: PUSH
36827: LD_VAR 0 2
36831: PUSH
36832: LD_INT 4
36834: MINUS
36835: PUSH
36836: LD_INT 3
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: LIST
36843: PUSH
36844: LD_VAR 0 1
36848: PUSH
36849: LD_INT 3
36851: MINUS
36852: PUSH
36853: LD_VAR 0 2
36857: PUSH
36858: LD_INT 3
36860: MINUS
36861: PUSH
36862: LD_INT 2
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: LIST
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: ST_TO_ADDR
// end ; 4 :
36877: GO 37158
36879: LD_INT 4
36881: DOUBLE
36882: EQUAL
36883: IFTRUE 36887
36885: GO 37020
36887: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36888: LD_ADDR_VAR 0 5
36892: PUSH
36893: LD_VAR 0 1
36897: PUSH
36898: LD_VAR 0 2
36902: PUSH
36903: LD_INT 4
36905: PLUS
36906: PUSH
36907: LD_INT 0
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: LIST
36914: PUSH
36915: LD_VAR 0 1
36919: PUSH
36920: LD_INT 3
36922: PLUS
36923: PUSH
36924: LD_VAR 0 2
36928: PUSH
36929: LD_INT 3
36931: PLUS
36932: PUSH
36933: LD_INT 5
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: LIST
36940: PUSH
36941: LD_VAR 0 1
36945: PUSH
36946: LD_INT 4
36948: PLUS
36949: PUSH
36950: LD_VAR 0 2
36954: PUSH
36955: LD_INT 4
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: LIST
36962: PUSH
36963: LD_VAR 0 1
36967: PUSH
36968: LD_VAR 0 2
36972: PUSH
36973: LD_INT 3
36975: MINUS
36976: PUSH
36977: LD_INT 3
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: LIST
36984: PUSH
36985: LD_VAR 0 1
36989: PUSH
36990: LD_INT 4
36992: MINUS
36993: PUSH
36994: LD_VAR 0 2
36998: PUSH
36999: LD_INT 4
37001: MINUS
37002: PUSH
37003: LD_INT 2
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: LIST
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: ST_TO_ADDR
// end ; 5 :
37018: GO 37158
37020: LD_INT 5
37022: DOUBLE
37023: EQUAL
37024: IFTRUE 37028
37026: GO 37157
37028: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37029: LD_ADDR_VAR 0 5
37033: PUSH
37034: LD_VAR 0 1
37038: PUSH
37039: LD_INT 4
37041: MINUS
37042: PUSH
37043: LD_VAR 0 2
37047: PUSH
37048: LD_INT 1
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: LIST
37055: PUSH
37056: LD_VAR 0 1
37060: PUSH
37061: LD_VAR 0 2
37065: PUSH
37066: LD_INT 4
37068: MINUS
37069: PUSH
37070: LD_INT 3
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: LIST
37077: PUSH
37078: LD_VAR 0 1
37082: PUSH
37083: LD_INT 4
37085: PLUS
37086: PUSH
37087: LD_VAR 0 2
37091: PUSH
37092: LD_INT 4
37094: PLUS
37095: PUSH
37096: LD_INT 5
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: LIST
37103: PUSH
37104: LD_VAR 0 1
37108: PUSH
37109: LD_INT 3
37111: PLUS
37112: PUSH
37113: LD_VAR 0 2
37117: PUSH
37118: LD_INT 4
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: LIST
37125: PUSH
37126: LD_VAR 0 1
37130: PUSH
37131: LD_VAR 0 2
37135: PUSH
37136: LD_INT 3
37138: PLUS
37139: PUSH
37140: LD_INT 0
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: LIST
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: ST_TO_ADDR
// end ; end ;
37155: GO 37158
37157: POP
// result := list ;
37158: LD_ADDR_VAR 0 4
37162: PUSH
37163: LD_VAR 0 5
37167: ST_TO_ADDR
// end ;
37168: LD_VAR 0 4
37172: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37173: LD_INT 0
37175: PPUSH
37176: PPUSH
37177: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37178: LD_VAR 0 1
37182: NOT
37183: PUSH
37184: LD_VAR 0 2
37188: PUSH
37189: LD_INT 1
37191: PUSH
37192: LD_INT 2
37194: PUSH
37195: LD_INT 3
37197: PUSH
37198: LD_INT 4
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: IN
37207: NOT
37208: OR
37209: IFFALSE 37213
// exit ;
37211: GO 37305
// tmp := [ ] ;
37213: LD_ADDR_VAR 0 5
37217: PUSH
37218: EMPTY
37219: ST_TO_ADDR
// for i in units do
37220: LD_ADDR_VAR 0 4
37224: PUSH
37225: LD_VAR 0 1
37229: PUSH
37230: FOR_IN
37231: IFFALSE 37274
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
37233: LD_ADDR_VAR 0 5
37237: PUSH
37238: LD_VAR 0 5
37242: PPUSH
37243: LD_VAR 0 5
37247: PUSH
37248: LD_INT 1
37250: PLUS
37251: PPUSH
37252: LD_VAR 0 4
37256: PPUSH
37257: LD_VAR 0 2
37261: PPUSH
37262: CALL_OW 259
37266: PPUSH
37267: CALL_OW 2
37271: ST_TO_ADDR
37272: GO 37230
37274: POP
37275: POP
// if not tmp then
37276: LD_VAR 0 5
37280: NOT
37281: IFFALSE 37285
// exit ;
37283: GO 37305
// result := SortListByListDesc ( units , tmp ) ;
37285: LD_ADDR_VAR 0 3
37289: PUSH
37290: LD_VAR 0 1
37294: PPUSH
37295: LD_VAR 0 5
37299: PPUSH
37300: CALL_OW 77
37304: ST_TO_ADDR
// end ;
37305: LD_VAR 0 3
37309: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37310: LD_INT 0
37312: PPUSH
37313: PPUSH
37314: PPUSH
// x := GetX ( building ) ;
37315: LD_ADDR_VAR 0 4
37319: PUSH
37320: LD_VAR 0 2
37324: PPUSH
37325: CALL_OW 250
37329: ST_TO_ADDR
// y := GetY ( building ) ;
37330: LD_ADDR_VAR 0 5
37334: PUSH
37335: LD_VAR 0 2
37339: PPUSH
37340: CALL_OW 251
37344: ST_TO_ADDR
// if GetTaskList ( unit ) then
37345: LD_VAR 0 1
37349: PPUSH
37350: CALL_OW 437
37354: IFFALSE 37449
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37356: LD_STRING e
37358: PUSH
37359: LD_VAR 0 1
37363: PPUSH
37364: CALL_OW 437
37368: PUSH
37369: LD_INT 1
37371: ARRAY
37372: PUSH
37373: LD_INT 1
37375: ARRAY
37376: EQUAL
37377: PUSH
37378: LD_VAR 0 4
37382: PUSH
37383: LD_VAR 0 1
37387: PPUSH
37388: CALL_OW 437
37392: PUSH
37393: LD_INT 1
37395: ARRAY
37396: PUSH
37397: LD_INT 2
37399: ARRAY
37400: EQUAL
37401: AND
37402: PUSH
37403: LD_VAR 0 5
37407: PUSH
37408: LD_VAR 0 1
37412: PPUSH
37413: CALL_OW 437
37417: PUSH
37418: LD_INT 1
37420: ARRAY
37421: PUSH
37422: LD_INT 3
37424: ARRAY
37425: EQUAL
37426: AND
37427: IFFALSE 37439
// result := true else
37429: LD_ADDR_VAR 0 3
37433: PUSH
37434: LD_INT 1
37436: ST_TO_ADDR
37437: GO 37447
// result := false ;
37439: LD_ADDR_VAR 0 3
37443: PUSH
37444: LD_INT 0
37446: ST_TO_ADDR
// end else
37447: GO 37457
// result := false ;
37449: LD_ADDR_VAR 0 3
37453: PUSH
37454: LD_INT 0
37456: ST_TO_ADDR
// end ;
37457: LD_VAR 0 3
37461: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37462: LD_INT 0
37464: PPUSH
37465: PPUSH
37466: PPUSH
37467: PPUSH
// if not unit or not area then
37468: LD_VAR 0 1
37472: NOT
37473: PUSH
37474: LD_VAR 0 2
37478: NOT
37479: OR
37480: IFFALSE 37484
// exit ;
37482: GO 37648
// tmp := AreaToList ( area , i ) ;
37484: LD_ADDR_VAR 0 6
37488: PUSH
37489: LD_VAR 0 2
37493: PPUSH
37494: LD_VAR 0 5
37498: PPUSH
37499: CALL_OW 517
37503: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37504: LD_ADDR_VAR 0 5
37508: PUSH
37509: DOUBLE
37510: LD_INT 1
37512: DEC
37513: ST_TO_ADDR
37514: LD_VAR 0 6
37518: PUSH
37519: LD_INT 1
37521: ARRAY
37522: PUSH
37523: FOR_TO
37524: IFFALSE 37646
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37526: LD_ADDR_VAR 0 7
37530: PUSH
37531: LD_VAR 0 6
37535: PUSH
37536: LD_INT 1
37538: ARRAY
37539: PUSH
37540: LD_VAR 0 5
37544: ARRAY
37545: PUSH
37546: LD_VAR 0 6
37550: PUSH
37551: LD_INT 2
37553: ARRAY
37554: PUSH
37555: LD_VAR 0 5
37559: ARRAY
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
37565: LD_VAR 0 7
37569: PUSH
37570: LD_INT 1
37572: ARRAY
37573: PPUSH
37574: LD_VAR 0 7
37578: PUSH
37579: LD_INT 2
37581: ARRAY
37582: PPUSH
37583: CALL_OW 428
37587: PUSH
37588: LD_INT 0
37590: EQUAL
37591: IFFALSE 37644
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37593: LD_VAR 0 1
37597: PPUSH
37598: LD_VAR 0 7
37602: PUSH
37603: LD_INT 1
37605: ARRAY
37606: PPUSH
37607: LD_VAR 0 7
37611: PUSH
37612: LD_INT 2
37614: ARRAY
37615: PPUSH
37616: LD_VAR 0 3
37620: PPUSH
37621: CALL_OW 48
// result := IsPlaced ( unit ) ;
37625: LD_ADDR_VAR 0 4
37629: PUSH
37630: LD_VAR 0 1
37634: PPUSH
37635: CALL_OW 305
37639: ST_TO_ADDR
// exit ;
37640: POP
37641: POP
37642: GO 37648
// end ; end ;
37644: GO 37523
37646: POP
37647: POP
// end ;
37648: LD_VAR 0 4
37652: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37653: LD_INT 0
37655: PPUSH
37656: PPUSH
37657: PPUSH
// if not side or side > 8 then
37658: LD_VAR 0 1
37662: NOT
37663: PUSH
37664: LD_VAR 0 1
37668: PUSH
37669: LD_INT 8
37671: GREATER
37672: OR
37673: IFFALSE 37677
// exit ;
37675: GO 37864
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37677: LD_ADDR_VAR 0 4
37681: PUSH
37682: LD_INT 22
37684: PUSH
37685: LD_VAR 0 1
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 21
37696: PUSH
37697: LD_INT 3
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PPUSH
37708: CALL_OW 69
37712: ST_TO_ADDR
// if not tmp then
37713: LD_VAR 0 4
37717: NOT
37718: IFFALSE 37722
// exit ;
37720: GO 37864
// enable_addtolog := true ;
37722: LD_ADDR_OWVAR 81
37726: PUSH
37727: LD_INT 1
37729: ST_TO_ADDR
// AddToLog ( [ ) ;
37730: LD_STRING [
37732: PPUSH
37733: CALL_OW 561
// for i in tmp do
37737: LD_ADDR_VAR 0 3
37741: PUSH
37742: LD_VAR 0 4
37746: PUSH
37747: FOR_IN
37748: IFFALSE 37855
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37750: LD_STRING [
37752: PUSH
37753: LD_VAR 0 3
37757: PPUSH
37758: CALL_OW 266
37762: STR
37763: PUSH
37764: LD_STRING , 
37766: STR
37767: PUSH
37768: LD_VAR 0 3
37772: PPUSH
37773: CALL_OW 250
37777: STR
37778: PUSH
37779: LD_STRING , 
37781: STR
37782: PUSH
37783: LD_VAR 0 3
37787: PPUSH
37788: CALL_OW 251
37792: STR
37793: PUSH
37794: LD_STRING , 
37796: STR
37797: PUSH
37798: LD_VAR 0 3
37802: PPUSH
37803: CALL_OW 254
37807: STR
37808: PUSH
37809: LD_STRING , 
37811: STR
37812: PUSH
37813: LD_VAR 0 3
37817: PPUSH
37818: LD_INT 1
37820: PPUSH
37821: CALL_OW 268
37825: STR
37826: PUSH
37827: LD_STRING , 
37829: STR
37830: PUSH
37831: LD_VAR 0 3
37835: PPUSH
37836: LD_INT 2
37838: PPUSH
37839: CALL_OW 268
37843: STR
37844: PUSH
37845: LD_STRING ],
37847: STR
37848: PPUSH
37849: CALL_OW 561
// end ;
37853: GO 37747
37855: POP
37856: POP
// AddToLog ( ]; ) ;
37857: LD_STRING ];
37859: PPUSH
37860: CALL_OW 561
// end ;
37864: LD_VAR 0 2
37868: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37869: LD_INT 0
37871: PPUSH
37872: PPUSH
37873: PPUSH
37874: PPUSH
37875: PPUSH
// if not area or not rate or not max then
37876: LD_VAR 0 1
37880: NOT
37881: PUSH
37882: LD_VAR 0 2
37886: NOT
37887: OR
37888: PUSH
37889: LD_VAR 0 4
37893: NOT
37894: OR
37895: IFFALSE 37899
// exit ;
37897: GO 38091
// while 1 do
37899: LD_INT 1
37901: IFFALSE 38091
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37903: LD_ADDR_VAR 0 9
37907: PUSH
37908: LD_VAR 0 1
37912: PPUSH
37913: LD_INT 1
37915: PPUSH
37916: CALL_OW 287
37920: PUSH
37921: LD_INT 10
37923: MUL
37924: ST_TO_ADDR
// r := rate / 10 ;
37925: LD_ADDR_VAR 0 7
37929: PUSH
37930: LD_VAR 0 2
37934: PUSH
37935: LD_INT 10
37937: DIVREAL
37938: ST_TO_ADDR
// time := 1 1$00 ;
37939: LD_ADDR_VAR 0 8
37943: PUSH
37944: LD_INT 2100
37946: ST_TO_ADDR
// if amount < min then
37947: LD_VAR 0 9
37951: PUSH
37952: LD_VAR 0 3
37956: LESS
37957: IFFALSE 37975
// r := r * 2 else
37959: LD_ADDR_VAR 0 7
37963: PUSH
37964: LD_VAR 0 7
37968: PUSH
37969: LD_INT 2
37971: MUL
37972: ST_TO_ADDR
37973: GO 38001
// if amount > max then
37975: LD_VAR 0 9
37979: PUSH
37980: LD_VAR 0 4
37984: GREATER
37985: IFFALSE 38001
// r := r / 2 ;
37987: LD_ADDR_VAR 0 7
37991: PUSH
37992: LD_VAR 0 7
37996: PUSH
37997: LD_INT 2
37999: DIVREAL
38000: ST_TO_ADDR
// time := time / r ;
38001: LD_ADDR_VAR 0 8
38005: PUSH
38006: LD_VAR 0 8
38010: PUSH
38011: LD_VAR 0 7
38015: DIVREAL
38016: ST_TO_ADDR
// if time < 0 then
38017: LD_VAR 0 8
38021: PUSH
38022: LD_INT 0
38024: LESS
38025: IFFALSE 38042
// time := time * - 1 ;
38027: LD_ADDR_VAR 0 8
38031: PUSH
38032: LD_VAR 0 8
38036: PUSH
38037: LD_INT 1
38039: NEG
38040: MUL
38041: ST_TO_ADDR
// wait ( time ) ;
38042: LD_VAR 0 8
38046: PPUSH
38047: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
38051: LD_INT 35
38053: PPUSH
38054: LD_INT 875
38056: PPUSH
38057: CALL_OW 12
38061: PPUSH
38062: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38066: LD_INT 1
38068: PPUSH
38069: LD_INT 5
38071: PPUSH
38072: CALL_OW 12
38076: PPUSH
38077: LD_VAR 0 1
38081: PPUSH
38082: LD_INT 1
38084: PPUSH
38085: CALL_OW 55
// end ;
38089: GO 37899
// end ;
38091: LD_VAR 0 5
38095: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38096: LD_INT 0
38098: PPUSH
38099: PPUSH
38100: PPUSH
38101: PPUSH
38102: PPUSH
38103: PPUSH
38104: PPUSH
38105: PPUSH
// if not turrets or not factories then
38106: LD_VAR 0 1
38110: NOT
38111: PUSH
38112: LD_VAR 0 2
38116: NOT
38117: OR
38118: IFFALSE 38122
// exit ;
38120: GO 38429
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38122: LD_ADDR_VAR 0 10
38126: PUSH
38127: LD_INT 5
38129: PUSH
38130: LD_INT 6
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 2
38139: PUSH
38140: LD_INT 4
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 3
38149: PUSH
38150: LD_INT 5
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 24
38164: PUSH
38165: LD_INT 25
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 23
38174: PUSH
38175: LD_INT 27
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 42
38188: PUSH
38189: LD_INT 43
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 44
38198: PUSH
38199: LD_INT 46
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 45
38208: PUSH
38209: LD_INT 47
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: LIST
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: LIST
38225: ST_TO_ADDR
// result := [ ] ;
38226: LD_ADDR_VAR 0 3
38230: PUSH
38231: EMPTY
38232: ST_TO_ADDR
// for i in turrets do
38233: LD_ADDR_VAR 0 4
38237: PUSH
38238: LD_VAR 0 1
38242: PUSH
38243: FOR_IN
38244: IFFALSE 38427
// begin nat := GetNation ( i ) ;
38246: LD_ADDR_VAR 0 7
38250: PUSH
38251: LD_VAR 0 4
38255: PPUSH
38256: CALL_OW 248
38260: ST_TO_ADDR
// weapon := 0 ;
38261: LD_ADDR_VAR 0 8
38265: PUSH
38266: LD_INT 0
38268: ST_TO_ADDR
// if not nat then
38269: LD_VAR 0 7
38273: NOT
38274: IFFALSE 38278
// continue ;
38276: GO 38243
// for j in list [ nat ] do
38278: LD_ADDR_VAR 0 5
38282: PUSH
38283: LD_VAR 0 10
38287: PUSH
38288: LD_VAR 0 7
38292: ARRAY
38293: PUSH
38294: FOR_IN
38295: IFFALSE 38336
// if GetBWeapon ( i ) = j [ 1 ] then
38297: LD_VAR 0 4
38301: PPUSH
38302: CALL_OW 269
38306: PUSH
38307: LD_VAR 0 5
38311: PUSH
38312: LD_INT 1
38314: ARRAY
38315: EQUAL
38316: IFFALSE 38334
// begin weapon := j [ 2 ] ;
38318: LD_ADDR_VAR 0 8
38322: PUSH
38323: LD_VAR 0 5
38327: PUSH
38328: LD_INT 2
38330: ARRAY
38331: ST_TO_ADDR
// break ;
38332: GO 38336
// end ;
38334: GO 38294
38336: POP
38337: POP
// if not weapon then
38338: LD_VAR 0 8
38342: NOT
38343: IFFALSE 38347
// continue ;
38345: GO 38243
// for k in factories do
38347: LD_ADDR_VAR 0 6
38351: PUSH
38352: LD_VAR 0 2
38356: PUSH
38357: FOR_IN
38358: IFFALSE 38423
// begin weapons := AvailableWeaponList ( k ) ;
38360: LD_ADDR_VAR 0 9
38364: PUSH
38365: LD_VAR 0 6
38369: PPUSH
38370: CALL_OW 478
38374: ST_TO_ADDR
// if not weapons then
38375: LD_VAR 0 9
38379: NOT
38380: IFFALSE 38384
// continue ;
38382: GO 38357
// if weapon in weapons then
38384: LD_VAR 0 8
38388: PUSH
38389: LD_VAR 0 9
38393: IN
38394: IFFALSE 38421
// begin result := [ i , weapon ] ;
38396: LD_ADDR_VAR 0 3
38400: PUSH
38401: LD_VAR 0 4
38405: PUSH
38406: LD_VAR 0 8
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: ST_TO_ADDR
// exit ;
38415: POP
38416: POP
38417: POP
38418: POP
38419: GO 38429
// end ; end ;
38421: GO 38357
38423: POP
38424: POP
// end ;
38425: GO 38243
38427: POP
38428: POP
// end ;
38429: LD_VAR 0 3
38433: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38434: LD_INT 0
38436: PPUSH
// if not side or side > 8 then
38437: LD_VAR 0 3
38441: NOT
38442: PUSH
38443: LD_VAR 0 3
38447: PUSH
38448: LD_INT 8
38450: GREATER
38451: OR
38452: IFFALSE 38456
// exit ;
38454: GO 38515
// if not range then
38456: LD_VAR 0 4
38460: NOT
38461: IFFALSE 38472
// range := - 12 ;
38463: LD_ADDR_VAR 0 4
38467: PUSH
38468: LD_INT 12
38470: NEG
38471: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38472: LD_VAR 0 1
38476: PPUSH
38477: LD_VAR 0 2
38481: PPUSH
38482: LD_VAR 0 3
38486: PPUSH
38487: LD_VAR 0 4
38491: PPUSH
38492: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38496: LD_VAR 0 1
38500: PPUSH
38501: LD_VAR 0 2
38505: PPUSH
38506: LD_VAR 0 3
38510: PPUSH
38511: CALL_OW 331
// end ;
38515: LD_VAR 0 5
38519: RET
// export function Video ( mode ) ; begin
38520: LD_INT 0
38522: PPUSH
// ingame_video = mode ;
38523: LD_ADDR_OWVAR 52
38527: PUSH
38528: LD_VAR 0 1
38532: ST_TO_ADDR
// interface_hidden = mode ;
38533: LD_ADDR_OWVAR 54
38537: PUSH
38538: LD_VAR 0 1
38542: ST_TO_ADDR
// end ;
38543: LD_VAR 0 2
38547: RET
// export function Join ( array , element ) ; begin
38548: LD_INT 0
38550: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38551: LD_ADDR_VAR 0 3
38555: PUSH
38556: LD_VAR 0 1
38560: PPUSH
38561: LD_VAR 0 1
38565: PUSH
38566: LD_INT 1
38568: PLUS
38569: PPUSH
38570: LD_VAR 0 2
38574: PPUSH
38575: CALL_OW 1
38579: ST_TO_ADDR
// end ;
38580: LD_VAR 0 3
38584: RET
// export function JoinUnion ( array , element ) ; begin
38585: LD_INT 0
38587: PPUSH
// result := array union element ;
38588: LD_ADDR_VAR 0 3
38592: PUSH
38593: LD_VAR 0 1
38597: PUSH
38598: LD_VAR 0 2
38602: UNION
38603: ST_TO_ADDR
// end ;
38604: LD_VAR 0 3
38608: RET
// export function GetBehemoths ( side ) ; begin
38609: LD_INT 0
38611: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
38612: LD_ADDR_VAR 0 2
38616: PUSH
38617: LD_INT 22
38619: PUSH
38620: LD_VAR 0 1
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 31
38631: PUSH
38632: LD_INT 25
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PPUSH
38643: CALL_OW 69
38647: ST_TO_ADDR
// end ;
38648: LD_VAR 0 2
38652: RET
// export function Shuffle ( array ) ; var i , index ; begin
38653: LD_INT 0
38655: PPUSH
38656: PPUSH
38657: PPUSH
// result := [ ] ;
38658: LD_ADDR_VAR 0 2
38662: PUSH
38663: EMPTY
38664: ST_TO_ADDR
// if not array then
38665: LD_VAR 0 1
38669: NOT
38670: IFFALSE 38674
// exit ;
38672: GO 38773
// Randomize ;
38674: CALL_OW 10
// for i = array downto 1 do
38678: LD_ADDR_VAR 0 3
38682: PUSH
38683: DOUBLE
38684: LD_VAR 0 1
38688: INC
38689: ST_TO_ADDR
38690: LD_INT 1
38692: PUSH
38693: FOR_DOWNTO
38694: IFFALSE 38771
// begin index := rand ( 1 , array ) ;
38696: LD_ADDR_VAR 0 4
38700: PUSH
38701: LD_INT 1
38703: PPUSH
38704: LD_VAR 0 1
38708: PPUSH
38709: CALL_OW 12
38713: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38714: LD_ADDR_VAR 0 2
38718: PUSH
38719: LD_VAR 0 2
38723: PPUSH
38724: LD_VAR 0 2
38728: PUSH
38729: LD_INT 1
38731: PLUS
38732: PPUSH
38733: LD_VAR 0 1
38737: PUSH
38738: LD_VAR 0 4
38742: ARRAY
38743: PPUSH
38744: CALL_OW 2
38748: ST_TO_ADDR
// array := Delete ( array , index ) ;
38749: LD_ADDR_VAR 0 1
38753: PUSH
38754: LD_VAR 0 1
38758: PPUSH
38759: LD_VAR 0 4
38763: PPUSH
38764: CALL_OW 3
38768: ST_TO_ADDR
// end ;
38769: GO 38693
38771: POP
38772: POP
// end ;
38773: LD_VAR 0 2
38777: RET
// export function GetBaseMaterials ( base ) ; begin
38778: LD_INT 0
38780: PPUSH
// result := [ 0 , 0 , 0 ] ;
38781: LD_ADDR_VAR 0 2
38785: PUSH
38786: LD_INT 0
38788: PUSH
38789: LD_INT 0
38791: PUSH
38792: LD_INT 0
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: LIST
38799: ST_TO_ADDR
// if not base then
38800: LD_VAR 0 1
38804: NOT
38805: IFFALSE 38809
// exit ;
38807: GO 38858
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38809: LD_ADDR_VAR 0 2
38813: PUSH
38814: LD_VAR 0 1
38818: PPUSH
38819: LD_INT 1
38821: PPUSH
38822: CALL_OW 275
38826: PUSH
38827: LD_VAR 0 1
38831: PPUSH
38832: LD_INT 2
38834: PPUSH
38835: CALL_OW 275
38839: PUSH
38840: LD_VAR 0 1
38844: PPUSH
38845: LD_INT 3
38847: PPUSH
38848: CALL_OW 275
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: LIST
38857: ST_TO_ADDR
// end ;
38858: LD_VAR 0 2
38862: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38863: LD_INT 0
38865: PPUSH
38866: PPUSH
// result := array ;
38867: LD_ADDR_VAR 0 3
38871: PUSH
38872: LD_VAR 0 1
38876: ST_TO_ADDR
// if size > 0 then
38877: LD_VAR 0 2
38881: PUSH
38882: LD_INT 0
38884: GREATER
38885: IFFALSE 38931
// for i := array downto size do
38887: LD_ADDR_VAR 0 4
38891: PUSH
38892: DOUBLE
38893: LD_VAR 0 1
38897: INC
38898: ST_TO_ADDR
38899: LD_VAR 0 2
38903: PUSH
38904: FOR_DOWNTO
38905: IFFALSE 38929
// result := Delete ( result , result ) ;
38907: LD_ADDR_VAR 0 3
38911: PUSH
38912: LD_VAR 0 3
38916: PPUSH
38917: LD_VAR 0 3
38921: PPUSH
38922: CALL_OW 3
38926: ST_TO_ADDR
38927: GO 38904
38929: POP
38930: POP
// end ;
38931: LD_VAR 0 3
38935: RET
// export function ComExit ( unit ) ; var tmp ; begin
38936: LD_INT 0
38938: PPUSH
38939: PPUSH
// if not IsInUnit ( unit ) then
38940: LD_VAR 0 1
38944: PPUSH
38945: CALL_OW 310
38949: NOT
38950: IFFALSE 38954
// exit ;
38952: GO 39014
// tmp := IsInUnit ( unit ) ;
38954: LD_ADDR_VAR 0 3
38958: PUSH
38959: LD_VAR 0 1
38963: PPUSH
38964: CALL_OW 310
38968: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
38969: LD_VAR 0 3
38973: PPUSH
38974: CALL_OW 247
38978: PUSH
38979: LD_INT 2
38981: EQUAL
38982: IFFALSE 38995
// ComExitVehicle ( unit ) else
38984: LD_VAR 0 1
38988: PPUSH
38989: CALL_OW 121
38993: GO 39004
// ComExitBuilding ( unit ) ;
38995: LD_VAR 0 1
38999: PPUSH
39000: CALL_OW 122
// result := tmp ;
39004: LD_ADDR_VAR 0 2
39008: PUSH
39009: LD_VAR 0 3
39013: ST_TO_ADDR
// end ;
39014: LD_VAR 0 2
39018: RET
// export function ResetHc ; begin
39019: LD_INT 0
39021: PPUSH
// InitHc ;
39022: CALL_OW 19
// hc_importance := 0 ;
39026: LD_ADDR_OWVAR 32
39030: PUSH
39031: LD_INT 0
39033: ST_TO_ADDR
// end ; end_of_file
39034: LD_VAR 0 1
39038: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
39039: LD_INT 0
39041: PPUSH
39042: PPUSH
39043: PPUSH
39044: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
39045: LD_VAR 0 1
39049: PPUSH
39050: CALL_OW 264
39054: PUSH
39055: LD_EXP 13
39059: EQUAL
39060: IFFALSE 39132
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
39062: LD_INT 68
39064: PPUSH
39065: LD_VAR 0 1
39069: PPUSH
39070: CALL_OW 255
39074: PPUSH
39075: CALL_OW 321
39079: PUSH
39080: LD_INT 2
39082: EQUAL
39083: IFFALSE 39095
// eff := 70 else
39085: LD_ADDR_VAR 0 4
39089: PUSH
39090: LD_INT 70
39092: ST_TO_ADDR
39093: GO 39103
// eff := 30 ;
39095: LD_ADDR_VAR 0 4
39099: PUSH
39100: LD_INT 30
39102: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
39103: LD_VAR 0 1
39107: PPUSH
39108: CALL_OW 250
39112: PPUSH
39113: LD_VAR 0 1
39117: PPUSH
39118: CALL_OW 251
39122: PPUSH
39123: LD_VAR 0 4
39127: PPUSH
39128: CALL_OW 495
// end ; end ;
39132: LD_VAR 0 2
39136: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
39137: LD_INT 0
39139: PPUSH
// end ;
39140: LD_VAR 0 4
39144: RET
// export function SOS_Command ( cmd ) ; begin
39145: LD_INT 0
39147: PPUSH
// end ;
39148: LD_VAR 0 2
39152: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
39153: LD_VAR 0 1
39157: PUSH
39158: LD_INT 254
39160: EQUAL
39161: PUSH
39162: LD_VAR 0 2
39166: PPUSH
39167: CALL_OW 264
39171: PUSH
39172: LD_EXP 11
39176: EQUAL
39177: AND
39178: PUSH
39179: LD_VAR 0 3
39183: PPUSH
39184: CALL_OW 263
39188: PUSH
39189: LD_INT 3
39191: EQUAL
39192: AND
39193: IFFALSE 39204
// DestroyUnit ( selectedUnit ) ;
39195: LD_VAR 0 3
39199: PPUSH
39200: CALL_OW 65
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
39204: LD_VAR 0 1
39208: PUSH
39209: LD_INT 255
39211: EQUAL
39212: PUSH
39213: LD_VAR 0 2
39217: PPUSH
39218: CALL_OW 264
39222: PUSH
39223: LD_INT 14
39225: PUSH
39226: LD_INT 53
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: IN
39233: AND
39234: PUSH
39235: LD_VAR 0 4
39239: PPUSH
39240: LD_VAR 0 5
39244: PPUSH
39245: CALL_OW 488
39249: AND
39250: IFFALSE 39274
// CutTreeXYR ( unit , x , y , 12 ) ;
39252: LD_VAR 0 2
39256: PPUSH
39257: LD_VAR 0 4
39261: PPUSH
39262: LD_VAR 0 5
39266: PPUSH
39267: LD_INT 12
39269: PPUSH
39270: CALL 39277 0 4
// end ;
39274: PPOPN 5
39276: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
39277: LD_INT 0
39279: PPUSH
39280: PPUSH
39281: PPUSH
39282: PPUSH
39283: PPUSH
39284: PPUSH
39285: PPUSH
39286: PPUSH
39287: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
39288: LD_VAR 0 1
39292: NOT
39293: PUSH
39294: LD_VAR 0 2
39298: PPUSH
39299: LD_VAR 0 3
39303: PPUSH
39304: CALL_OW 488
39308: NOT
39309: OR
39310: PUSH
39311: LD_VAR 0 4
39315: NOT
39316: OR
39317: IFFALSE 39321
// exit ;
39319: GO 39661
// list := [ ] ;
39321: LD_ADDR_VAR 0 13
39325: PUSH
39326: EMPTY
39327: ST_TO_ADDR
// if x - r < 0 then
39328: LD_VAR 0 2
39332: PUSH
39333: LD_VAR 0 4
39337: MINUS
39338: PUSH
39339: LD_INT 0
39341: LESS
39342: IFFALSE 39354
// min_x := 0 else
39344: LD_ADDR_VAR 0 7
39348: PUSH
39349: LD_INT 0
39351: ST_TO_ADDR
39352: GO 39370
// min_x := x - r ;
39354: LD_ADDR_VAR 0 7
39358: PUSH
39359: LD_VAR 0 2
39363: PUSH
39364: LD_VAR 0 4
39368: MINUS
39369: ST_TO_ADDR
// if y - r < 0 then
39370: LD_VAR 0 3
39374: PUSH
39375: LD_VAR 0 4
39379: MINUS
39380: PUSH
39381: LD_INT 0
39383: LESS
39384: IFFALSE 39396
// min_y := 0 else
39386: LD_ADDR_VAR 0 8
39390: PUSH
39391: LD_INT 0
39393: ST_TO_ADDR
39394: GO 39412
// min_y := y - r ;
39396: LD_ADDR_VAR 0 8
39400: PUSH
39401: LD_VAR 0 3
39405: PUSH
39406: LD_VAR 0 4
39410: MINUS
39411: ST_TO_ADDR
// max_x := x + r ;
39412: LD_ADDR_VAR 0 9
39416: PUSH
39417: LD_VAR 0 2
39421: PUSH
39422: LD_VAR 0 4
39426: PLUS
39427: ST_TO_ADDR
// max_y := y + r ;
39428: LD_ADDR_VAR 0 10
39432: PUSH
39433: LD_VAR 0 3
39437: PUSH
39438: LD_VAR 0 4
39442: PLUS
39443: ST_TO_ADDR
// for _x = min_x to max_x do
39444: LD_ADDR_VAR 0 11
39448: PUSH
39449: DOUBLE
39450: LD_VAR 0 7
39454: DEC
39455: ST_TO_ADDR
39456: LD_VAR 0 9
39460: PUSH
39461: FOR_TO
39462: IFFALSE 39579
// for _y = min_y to max_y do
39464: LD_ADDR_VAR 0 12
39468: PUSH
39469: DOUBLE
39470: LD_VAR 0 8
39474: DEC
39475: ST_TO_ADDR
39476: LD_VAR 0 10
39480: PUSH
39481: FOR_TO
39482: IFFALSE 39575
// begin if not ValidHex ( _x , _y ) then
39484: LD_VAR 0 11
39488: PPUSH
39489: LD_VAR 0 12
39493: PPUSH
39494: CALL_OW 488
39498: NOT
39499: IFFALSE 39503
// continue ;
39501: GO 39481
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
39503: LD_VAR 0 11
39507: PPUSH
39508: LD_VAR 0 12
39512: PPUSH
39513: CALL_OW 351
39517: PUSH
39518: LD_VAR 0 11
39522: PPUSH
39523: LD_VAR 0 12
39527: PPUSH
39528: CALL_OW 554
39532: AND
39533: IFFALSE 39573
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
39535: LD_ADDR_VAR 0 13
39539: PUSH
39540: LD_VAR 0 13
39544: PPUSH
39545: LD_VAR 0 13
39549: PUSH
39550: LD_INT 1
39552: PLUS
39553: PPUSH
39554: LD_VAR 0 11
39558: PUSH
39559: LD_VAR 0 12
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PPUSH
39568: CALL_OW 2
39572: ST_TO_ADDR
// end ;
39573: GO 39481
39575: POP
39576: POP
39577: GO 39461
39579: POP
39580: POP
// if not list then
39581: LD_VAR 0 13
39585: NOT
39586: IFFALSE 39590
// exit ;
39588: GO 39661
// for i in list do
39590: LD_ADDR_VAR 0 6
39594: PUSH
39595: LD_VAR 0 13
39599: PUSH
39600: FOR_IN
39601: IFFALSE 39659
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
39603: LD_VAR 0 1
39607: PPUSH
39608: LD_STRING M
39610: PUSH
39611: LD_VAR 0 6
39615: PUSH
39616: LD_INT 1
39618: ARRAY
39619: PUSH
39620: LD_VAR 0 6
39624: PUSH
39625: LD_INT 2
39627: ARRAY
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: LD_INT 0
39634: PUSH
39635: LD_INT 0
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: PUSH
39650: EMPTY
39651: LIST
39652: PPUSH
39653: CALL_OW 447
39657: GO 39600
39659: POP
39660: POP
// end ;
39661: LD_VAR 0 5
39665: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
39666: LD_EXP 23
39670: NOT
39671: IFFALSE 39721
39673: GO 39675
39675: DISABLE
// begin initHack := true ;
39676: LD_ADDR_EXP 23
39680: PUSH
39681: LD_INT 1
39683: ST_TO_ADDR
// hackTanks := [ ] ;
39684: LD_ADDR_EXP 24
39688: PUSH
39689: EMPTY
39690: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
39691: LD_ADDR_EXP 25
39695: PUSH
39696: EMPTY
39697: ST_TO_ADDR
// hackLimit := 3 ;
39698: LD_ADDR_EXP 26
39702: PUSH
39703: LD_INT 3
39705: ST_TO_ADDR
// hackDist := 12 ;
39706: LD_ADDR_EXP 27
39710: PUSH
39711: LD_INT 12
39713: ST_TO_ADDR
// hackCounter := [ ] ;
39714: LD_ADDR_EXP 28
39718: PUSH
39719: EMPTY
39720: ST_TO_ADDR
// end ;
39721: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
39722: LD_EXP 23
39726: PUSH
39727: LD_INT 34
39729: PUSH
39730: LD_EXP 11
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PPUSH
39739: CALL_OW 69
39743: AND
39744: IFFALSE 39999
39746: GO 39748
39748: DISABLE
39749: LD_INT 0
39751: PPUSH
39752: PPUSH
// begin enable ;
39753: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
39754: LD_ADDR_VAR 0 1
39758: PUSH
39759: LD_INT 34
39761: PUSH
39762: LD_EXP 11
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PPUSH
39771: CALL_OW 69
39775: PUSH
39776: FOR_IN
39777: IFFALSE 39997
// begin if not i in hackTanks then
39779: LD_VAR 0 1
39783: PUSH
39784: LD_EXP 24
39788: IN
39789: NOT
39790: IFFALSE 39873
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
39792: LD_ADDR_EXP 24
39796: PUSH
39797: LD_EXP 24
39801: PPUSH
39802: LD_EXP 24
39806: PUSH
39807: LD_INT 1
39809: PLUS
39810: PPUSH
39811: LD_VAR 0 1
39815: PPUSH
39816: CALL_OW 1
39820: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
39821: LD_ADDR_EXP 25
39825: PUSH
39826: LD_EXP 25
39830: PPUSH
39831: LD_EXP 25
39835: PUSH
39836: LD_INT 1
39838: PLUS
39839: PPUSH
39840: EMPTY
39841: PPUSH
39842: CALL_OW 1
39846: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
39847: LD_ADDR_EXP 28
39851: PUSH
39852: LD_EXP 28
39856: PPUSH
39857: LD_EXP 28
39861: PUSH
39862: LD_INT 1
39864: PLUS
39865: PPUSH
39866: EMPTY
39867: PPUSH
39868: CALL_OW 1
39872: ST_TO_ADDR
// end ; if not IsOk ( i ) then
39873: LD_VAR 0 1
39877: PPUSH
39878: CALL_OW 302
39882: NOT
39883: IFFALSE 39896
// begin HackUnlinkAll ( i ) ;
39885: LD_VAR 0 1
39889: PPUSH
39890: CALL 40002 0 1
// continue ;
39894: GO 39776
// end ; HackCheckCapturedStatus ( i ) ;
39896: LD_VAR 0 1
39900: PPUSH
39901: CALL 40445 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
39905: LD_ADDR_VAR 0 2
39909: PUSH
39910: LD_INT 81
39912: PUSH
39913: LD_VAR 0 1
39917: PPUSH
39918: CALL_OW 255
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 33
39929: PUSH
39930: LD_INT 3
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 91
39939: PUSH
39940: LD_VAR 0 1
39944: PUSH
39945: LD_EXP 27
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 50
39957: PUSH
39958: EMPTY
39959: LIST
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: PPUSH
39967: CALL_OW 69
39971: ST_TO_ADDR
// if not tmp then
39972: LD_VAR 0 2
39976: NOT
39977: IFFALSE 39981
// continue ;
39979: GO 39776
// HackLink ( i , tmp ) ;
39981: LD_VAR 0 1
39985: PPUSH
39986: LD_VAR 0 2
39990: PPUSH
39991: CALL 40138 0 2
// end ;
39995: GO 39776
39997: POP
39998: POP
// end ;
39999: PPOPN 2
40001: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
40002: LD_INT 0
40004: PPUSH
40005: PPUSH
40006: PPUSH
// if not hack in hackTanks then
40007: LD_VAR 0 1
40011: PUSH
40012: LD_EXP 24
40016: IN
40017: NOT
40018: IFFALSE 40022
// exit ;
40020: GO 40133
// index := GetElementIndex ( hackTanks , hack ) ;
40022: LD_ADDR_VAR 0 4
40026: PUSH
40027: LD_EXP 24
40031: PPUSH
40032: LD_VAR 0 1
40036: PPUSH
40037: CALL 7409 0 2
40041: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
40042: LD_EXP 25
40046: PUSH
40047: LD_VAR 0 4
40051: ARRAY
40052: IFFALSE 40133
// begin for i in hackTanksCaptured [ index ] do
40054: LD_ADDR_VAR 0 3
40058: PUSH
40059: LD_EXP 25
40063: PUSH
40064: LD_VAR 0 4
40068: ARRAY
40069: PUSH
40070: FOR_IN
40071: IFFALSE 40097
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
40073: LD_VAR 0 3
40077: PUSH
40078: LD_INT 1
40080: ARRAY
40081: PPUSH
40082: LD_VAR 0 3
40086: PUSH
40087: LD_INT 2
40089: ARRAY
40090: PPUSH
40091: CALL_OW 235
40095: GO 40070
40097: POP
40098: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
40099: LD_ADDR_EXP 25
40103: PUSH
40104: LD_EXP 25
40108: PPUSH
40109: LD_VAR 0 4
40113: PPUSH
40114: EMPTY
40115: PPUSH
40116: CALL_OW 1
40120: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
40121: LD_VAR 0 1
40125: PPUSH
40126: LD_INT 0
40128: PPUSH
40129: CALL_OW 505
// end ; end ;
40133: LD_VAR 0 2
40137: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
40138: LD_INT 0
40140: PPUSH
40141: PPUSH
40142: PPUSH
// if not hack in hackTanks or not vehicles then
40143: LD_VAR 0 1
40147: PUSH
40148: LD_EXP 24
40152: IN
40153: NOT
40154: PUSH
40155: LD_VAR 0 2
40159: NOT
40160: OR
40161: IFFALSE 40165
// exit ;
40163: GO 40440
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
40165: LD_ADDR_VAR 0 2
40169: PUSH
40170: LD_VAR 0 1
40174: PPUSH
40175: LD_VAR 0 2
40179: PPUSH
40180: LD_INT 1
40182: PPUSH
40183: LD_INT 1
40185: PPUSH
40186: CALL 8059 0 4
40190: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
40191: LD_ADDR_VAR 0 5
40195: PUSH
40196: LD_EXP 24
40200: PPUSH
40201: LD_VAR 0 1
40205: PPUSH
40206: CALL 7409 0 2
40210: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
40211: LD_EXP 25
40215: PUSH
40216: LD_VAR 0 5
40220: ARRAY
40221: PUSH
40222: LD_EXP 26
40226: LESS
40227: IFFALSE 40416
// begin for i := 1 to vehicles do
40229: LD_ADDR_VAR 0 4
40233: PUSH
40234: DOUBLE
40235: LD_INT 1
40237: DEC
40238: ST_TO_ADDR
40239: LD_VAR 0 2
40243: PUSH
40244: FOR_TO
40245: IFFALSE 40414
// begin if hackTanksCaptured [ index ] = hackLimit then
40247: LD_EXP 25
40251: PUSH
40252: LD_VAR 0 5
40256: ARRAY
40257: PUSH
40258: LD_EXP 26
40262: EQUAL
40263: IFFALSE 40267
// break ;
40265: GO 40414
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
40267: LD_ADDR_EXP 28
40271: PUSH
40272: LD_EXP 28
40276: PPUSH
40277: LD_VAR 0 5
40281: PPUSH
40282: LD_EXP 28
40286: PUSH
40287: LD_VAR 0 5
40291: ARRAY
40292: PUSH
40293: LD_INT 1
40295: PLUS
40296: PPUSH
40297: CALL_OW 1
40301: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
40302: LD_ADDR_EXP 25
40306: PUSH
40307: LD_EXP 25
40311: PPUSH
40312: LD_VAR 0 5
40316: PUSH
40317: LD_EXP 25
40321: PUSH
40322: LD_VAR 0 5
40326: ARRAY
40327: PUSH
40328: LD_INT 1
40330: PLUS
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PPUSH
40336: LD_VAR 0 2
40340: PUSH
40341: LD_VAR 0 4
40345: ARRAY
40346: PUSH
40347: LD_VAR 0 2
40351: PUSH
40352: LD_VAR 0 4
40356: ARRAY
40357: PPUSH
40358: CALL_OW 255
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PPUSH
40367: CALL 7624 0 3
40371: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
40372: LD_VAR 0 2
40376: PUSH
40377: LD_VAR 0 4
40381: ARRAY
40382: PPUSH
40383: LD_VAR 0 1
40387: PPUSH
40388: CALL_OW 255
40392: PPUSH
40393: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
40397: LD_VAR 0 2
40401: PUSH
40402: LD_VAR 0 4
40406: ARRAY
40407: PPUSH
40408: CALL_OW 141
// end ;
40412: GO 40244
40414: POP
40415: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
40416: LD_VAR 0 1
40420: PPUSH
40421: LD_EXP 25
40425: PUSH
40426: LD_VAR 0 5
40430: ARRAY
40431: PUSH
40432: LD_INT 0
40434: PLUS
40435: PPUSH
40436: CALL_OW 505
// end ;
40440: LD_VAR 0 3
40444: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
40445: LD_INT 0
40447: PPUSH
40448: PPUSH
40449: PPUSH
40450: PPUSH
// if not hack in hackTanks then
40451: LD_VAR 0 1
40455: PUSH
40456: LD_EXP 24
40460: IN
40461: NOT
40462: IFFALSE 40466
// exit ;
40464: GO 40706
// index := GetElementIndex ( hackTanks , hack ) ;
40466: LD_ADDR_VAR 0 4
40470: PUSH
40471: LD_EXP 24
40475: PPUSH
40476: LD_VAR 0 1
40480: PPUSH
40481: CALL 7409 0 2
40485: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
40486: LD_ADDR_VAR 0 3
40490: PUSH
40491: DOUBLE
40492: LD_EXP 25
40496: PUSH
40497: LD_VAR 0 4
40501: ARRAY
40502: INC
40503: ST_TO_ADDR
40504: LD_INT 1
40506: PUSH
40507: FOR_DOWNTO
40508: IFFALSE 40680
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
40510: LD_ADDR_VAR 0 5
40514: PUSH
40515: LD_EXP 25
40519: PUSH
40520: LD_VAR 0 4
40524: ARRAY
40525: PUSH
40526: LD_VAR 0 3
40530: ARRAY
40531: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
40532: LD_VAR 0 5
40536: PUSH
40537: LD_INT 1
40539: ARRAY
40540: PPUSH
40541: CALL_OW 302
40545: NOT
40546: PUSH
40547: LD_VAR 0 5
40551: PUSH
40552: LD_INT 1
40554: ARRAY
40555: PPUSH
40556: CALL_OW 255
40560: PUSH
40561: LD_VAR 0 1
40565: PPUSH
40566: CALL_OW 255
40570: NONEQUAL
40571: OR
40572: IFFALSE 40678
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
40574: LD_VAR 0 5
40578: PUSH
40579: LD_INT 1
40581: ARRAY
40582: PPUSH
40583: CALL_OW 305
40587: PUSH
40588: LD_VAR 0 5
40592: PUSH
40593: LD_INT 1
40595: ARRAY
40596: PPUSH
40597: CALL_OW 255
40601: PUSH
40602: LD_VAR 0 1
40606: PPUSH
40607: CALL_OW 255
40611: EQUAL
40612: AND
40613: IFFALSE 40637
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
40615: LD_VAR 0 5
40619: PUSH
40620: LD_INT 1
40622: ARRAY
40623: PPUSH
40624: LD_VAR 0 5
40628: PUSH
40629: LD_INT 2
40631: ARRAY
40632: PPUSH
40633: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
40637: LD_ADDR_EXP 25
40641: PUSH
40642: LD_EXP 25
40646: PPUSH
40647: LD_VAR 0 4
40651: PPUSH
40652: LD_EXP 25
40656: PUSH
40657: LD_VAR 0 4
40661: ARRAY
40662: PPUSH
40663: LD_VAR 0 3
40667: PPUSH
40668: CALL_OW 3
40672: PPUSH
40673: CALL_OW 1
40677: ST_TO_ADDR
// end ; end ;
40678: GO 40507
40680: POP
40681: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
40682: LD_VAR 0 1
40686: PPUSH
40687: LD_EXP 25
40691: PUSH
40692: LD_VAR 0 4
40696: ARRAY
40697: PUSH
40698: LD_INT 0
40700: PLUS
40701: PPUSH
40702: CALL_OW 505
// end ; end_of_file
40706: LD_VAR 0 2
40710: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
40711: GO 40713
40713: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
40714: LD_STRING initStreamRollete();
40716: PPUSH
40717: CALL_OW 559
// InitStreamMode ;
40721: CALL 40730 0 0
// DefineStreamItems ( ) ;
40725: CALL 41170 0 0
// end ;
40729: END
// function InitStreamMode ; begin
40730: LD_INT 0
40732: PPUSH
// streamModeActive := false ;
40733: LD_ADDR_EXP 29
40737: PUSH
40738: LD_INT 0
40740: ST_TO_ADDR
// normalCounter := 36 ;
40741: LD_ADDR_EXP 30
40745: PUSH
40746: LD_INT 36
40748: ST_TO_ADDR
// hardcoreCounter := 16 ;
40749: LD_ADDR_EXP 31
40753: PUSH
40754: LD_INT 16
40756: ST_TO_ADDR
// sRocket := false ;
40757: LD_ADDR_EXP 34
40761: PUSH
40762: LD_INT 0
40764: ST_TO_ADDR
// sSpeed := false ;
40765: LD_ADDR_EXP 33
40769: PUSH
40770: LD_INT 0
40772: ST_TO_ADDR
// sEngine := false ;
40773: LD_ADDR_EXP 35
40777: PUSH
40778: LD_INT 0
40780: ST_TO_ADDR
// sSpec := false ;
40781: LD_ADDR_EXP 32
40785: PUSH
40786: LD_INT 0
40788: ST_TO_ADDR
// sLevel := false ;
40789: LD_ADDR_EXP 36
40793: PUSH
40794: LD_INT 0
40796: ST_TO_ADDR
// sArmoury := false ;
40797: LD_ADDR_EXP 37
40801: PUSH
40802: LD_INT 0
40804: ST_TO_ADDR
// sRadar := false ;
40805: LD_ADDR_EXP 38
40809: PUSH
40810: LD_INT 0
40812: ST_TO_ADDR
// sBunker := false ;
40813: LD_ADDR_EXP 39
40817: PUSH
40818: LD_INT 0
40820: ST_TO_ADDR
// sHack := false ;
40821: LD_ADDR_EXP 40
40825: PUSH
40826: LD_INT 0
40828: ST_TO_ADDR
// sFire := false ;
40829: LD_ADDR_EXP 41
40833: PUSH
40834: LD_INT 0
40836: ST_TO_ADDR
// sRefresh := false ;
40837: LD_ADDR_EXP 42
40841: PUSH
40842: LD_INT 0
40844: ST_TO_ADDR
// sExp := false ;
40845: LD_ADDR_EXP 43
40849: PUSH
40850: LD_INT 0
40852: ST_TO_ADDR
// sDepot := false ;
40853: LD_ADDR_EXP 44
40857: PUSH
40858: LD_INT 0
40860: ST_TO_ADDR
// sFlag := false ;
40861: LD_ADDR_EXP 45
40865: PUSH
40866: LD_INT 0
40868: ST_TO_ADDR
// sKamikadze := false ;
40869: LD_ADDR_EXP 53
40873: PUSH
40874: LD_INT 0
40876: ST_TO_ADDR
// sTroll := false ;
40877: LD_ADDR_EXP 54
40881: PUSH
40882: LD_INT 0
40884: ST_TO_ADDR
// sSlow := false ;
40885: LD_ADDR_EXP 55
40889: PUSH
40890: LD_INT 0
40892: ST_TO_ADDR
// sLack := false ;
40893: LD_ADDR_EXP 56
40897: PUSH
40898: LD_INT 0
40900: ST_TO_ADDR
// sTank := false ;
40901: LD_ADDR_EXP 58
40905: PUSH
40906: LD_INT 0
40908: ST_TO_ADDR
// sRemote := false ;
40909: LD_ADDR_EXP 59
40913: PUSH
40914: LD_INT 0
40916: ST_TO_ADDR
// sPowell := false ;
40917: LD_ADDR_EXP 60
40921: PUSH
40922: LD_INT 0
40924: ST_TO_ADDR
// sTeleport := false ;
40925: LD_ADDR_EXP 63
40929: PUSH
40930: LD_INT 0
40932: ST_TO_ADDR
// sOilTower := false ;
40933: LD_ADDR_EXP 65
40937: PUSH
40938: LD_INT 0
40940: ST_TO_ADDR
// sShovel := false ;
40941: LD_ADDR_EXP 66
40945: PUSH
40946: LD_INT 0
40948: ST_TO_ADDR
// sSheik := false ;
40949: LD_ADDR_EXP 67
40953: PUSH
40954: LD_INT 0
40956: ST_TO_ADDR
// sEarthquake := false ;
40957: LD_ADDR_EXP 69
40961: PUSH
40962: LD_INT 0
40964: ST_TO_ADDR
// sAI := false ;
40965: LD_ADDR_EXP 70
40969: PUSH
40970: LD_INT 0
40972: ST_TO_ADDR
// sCargo := false ;
40973: LD_ADDR_EXP 73
40977: PUSH
40978: LD_INT 0
40980: ST_TO_ADDR
// sDLaser := false ;
40981: LD_ADDR_EXP 74
40985: PUSH
40986: LD_INT 0
40988: ST_TO_ADDR
// sExchange := false ;
40989: LD_ADDR_EXP 75
40993: PUSH
40994: LD_INT 0
40996: ST_TO_ADDR
// sFac := false ;
40997: LD_ADDR_EXP 76
41001: PUSH
41002: LD_INT 0
41004: ST_TO_ADDR
// sPower := false ;
41005: LD_ADDR_EXP 77
41009: PUSH
41010: LD_INT 0
41012: ST_TO_ADDR
// sRandom := false ;
41013: LD_ADDR_EXP 78
41017: PUSH
41018: LD_INT 0
41020: ST_TO_ADDR
// sShield := false ;
41021: LD_ADDR_EXP 79
41025: PUSH
41026: LD_INT 0
41028: ST_TO_ADDR
// sTime := false ;
41029: LD_ADDR_EXP 80
41033: PUSH
41034: LD_INT 0
41036: ST_TO_ADDR
// sTools := false ;
41037: LD_ADDR_EXP 81
41041: PUSH
41042: LD_INT 0
41044: ST_TO_ADDR
// sSold := false ;
41045: LD_ADDR_EXP 46
41049: PUSH
41050: LD_INT 0
41052: ST_TO_ADDR
// sDiff := false ;
41053: LD_ADDR_EXP 47
41057: PUSH
41058: LD_INT 0
41060: ST_TO_ADDR
// sFog := false ;
41061: LD_ADDR_EXP 50
41065: PUSH
41066: LD_INT 0
41068: ST_TO_ADDR
// sReset := false ;
41069: LD_ADDR_EXP 51
41073: PUSH
41074: LD_INT 0
41076: ST_TO_ADDR
// sSun := false ;
41077: LD_ADDR_EXP 52
41081: PUSH
41082: LD_INT 0
41084: ST_TO_ADDR
// sTiger := false ;
41085: LD_ADDR_EXP 48
41089: PUSH
41090: LD_INT 0
41092: ST_TO_ADDR
// sBomb := false ;
41093: LD_ADDR_EXP 49
41097: PUSH
41098: LD_INT 0
41100: ST_TO_ADDR
// sWound := false ;
41101: LD_ADDR_EXP 57
41105: PUSH
41106: LD_INT 0
41108: ST_TO_ADDR
// sBetray := false ;
41109: LD_ADDR_EXP 61
41113: PUSH
41114: LD_INT 0
41116: ST_TO_ADDR
// sContamin := false ;
41117: LD_ADDR_EXP 62
41121: PUSH
41122: LD_INT 0
41124: ST_TO_ADDR
// sOil := false ;
41125: LD_ADDR_EXP 64
41129: PUSH
41130: LD_INT 0
41132: ST_TO_ADDR
// sStu := false ;
41133: LD_ADDR_EXP 68
41137: PUSH
41138: LD_INT 0
41140: ST_TO_ADDR
// sBazooka := false ;
41141: LD_ADDR_EXP 71
41145: PUSH
41146: LD_INT 0
41148: ST_TO_ADDR
// sMortar := false ;
41149: LD_ADDR_EXP 72
41153: PUSH
41154: LD_INT 0
41156: ST_TO_ADDR
// sRanger := false ;
41157: LD_ADDR_EXP 82
41161: PUSH
41162: LD_INT 0
41164: ST_TO_ADDR
// end ;
41165: LD_VAR 0 1
41169: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
41170: LD_INT 0
41172: PPUSH
41173: PPUSH
41174: PPUSH
41175: PPUSH
41176: PPUSH
// result := [ ] ;
41177: LD_ADDR_VAR 0 1
41181: PUSH
41182: EMPTY
41183: ST_TO_ADDR
// if campaign_id = 1 then
41184: LD_OWVAR 69
41188: PUSH
41189: LD_INT 1
41191: EQUAL
41192: IFFALSE 44130
// begin case mission_number of 1 :
41194: LD_OWVAR 70
41198: PUSH
41199: LD_INT 1
41201: DOUBLE
41202: EQUAL
41203: IFTRUE 41207
41205: GO 41271
41207: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
41208: LD_ADDR_VAR 0 1
41212: PUSH
41213: LD_INT 2
41215: PUSH
41216: LD_INT 4
41218: PUSH
41219: LD_INT 11
41221: PUSH
41222: LD_INT 12
41224: PUSH
41225: LD_INT 15
41227: PUSH
41228: LD_INT 16
41230: PUSH
41231: LD_INT 22
41233: PUSH
41234: LD_INT 23
41236: PUSH
41237: LD_INT 26
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 101
41253: PUSH
41254: LD_INT 102
41256: PUSH
41257: LD_INT 106
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: LIST
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: ST_TO_ADDR
41269: GO 44128
41271: LD_INT 2
41273: DOUBLE
41274: EQUAL
41275: IFTRUE 41279
41277: GO 41351
41279: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
41280: LD_ADDR_VAR 0 1
41284: PUSH
41285: LD_INT 2
41287: PUSH
41288: LD_INT 4
41290: PUSH
41291: LD_INT 11
41293: PUSH
41294: LD_INT 12
41296: PUSH
41297: LD_INT 15
41299: PUSH
41300: LD_INT 16
41302: PUSH
41303: LD_INT 22
41305: PUSH
41306: LD_INT 23
41308: PUSH
41309: LD_INT 26
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 101
41325: PUSH
41326: LD_INT 102
41328: PUSH
41329: LD_INT 105
41331: PUSH
41332: LD_INT 106
41334: PUSH
41335: LD_INT 108
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: ST_TO_ADDR
41349: GO 44128
41351: LD_INT 3
41353: DOUBLE
41354: EQUAL
41355: IFTRUE 41359
41357: GO 41435
41359: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
41360: LD_ADDR_VAR 0 1
41364: PUSH
41365: LD_INT 2
41367: PUSH
41368: LD_INT 4
41370: PUSH
41371: LD_INT 5
41373: PUSH
41374: LD_INT 11
41376: PUSH
41377: LD_INT 12
41379: PUSH
41380: LD_INT 15
41382: PUSH
41383: LD_INT 16
41385: PUSH
41386: LD_INT 22
41388: PUSH
41389: LD_INT 26
41391: PUSH
41392: LD_INT 36
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 101
41409: PUSH
41410: LD_INT 102
41412: PUSH
41413: LD_INT 105
41415: PUSH
41416: LD_INT 106
41418: PUSH
41419: LD_INT 108
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: ST_TO_ADDR
41433: GO 44128
41435: LD_INT 4
41437: DOUBLE
41438: EQUAL
41439: IFTRUE 41443
41441: GO 41527
41443: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
41444: LD_ADDR_VAR 0 1
41448: PUSH
41449: LD_INT 2
41451: PUSH
41452: LD_INT 4
41454: PUSH
41455: LD_INT 5
41457: PUSH
41458: LD_INT 8
41460: PUSH
41461: LD_INT 11
41463: PUSH
41464: LD_INT 12
41466: PUSH
41467: LD_INT 15
41469: PUSH
41470: LD_INT 16
41472: PUSH
41473: LD_INT 22
41475: PUSH
41476: LD_INT 23
41478: PUSH
41479: LD_INT 26
41481: PUSH
41482: LD_INT 36
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 101
41501: PUSH
41502: LD_INT 102
41504: PUSH
41505: LD_INT 105
41507: PUSH
41508: LD_INT 106
41510: PUSH
41511: LD_INT 108
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: ST_TO_ADDR
41525: GO 44128
41527: LD_INT 5
41529: DOUBLE
41530: EQUAL
41531: IFTRUE 41535
41533: GO 41635
41535: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
41536: LD_ADDR_VAR 0 1
41540: PUSH
41541: LD_INT 2
41543: PUSH
41544: LD_INT 4
41546: PUSH
41547: LD_INT 5
41549: PUSH
41550: LD_INT 6
41552: PUSH
41553: LD_INT 8
41555: PUSH
41556: LD_INT 11
41558: PUSH
41559: LD_INT 12
41561: PUSH
41562: LD_INT 15
41564: PUSH
41565: LD_INT 16
41567: PUSH
41568: LD_INT 22
41570: PUSH
41571: LD_INT 23
41573: PUSH
41574: LD_INT 25
41576: PUSH
41577: LD_INT 26
41579: PUSH
41580: LD_INT 36
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 101
41601: PUSH
41602: LD_INT 102
41604: PUSH
41605: LD_INT 105
41607: PUSH
41608: LD_INT 106
41610: PUSH
41611: LD_INT 108
41613: PUSH
41614: LD_INT 109
41616: PUSH
41617: LD_INT 112
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: ST_TO_ADDR
41633: GO 44128
41635: LD_INT 6
41637: DOUBLE
41638: EQUAL
41639: IFTRUE 41643
41641: GO 41763
41643: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
41644: LD_ADDR_VAR 0 1
41648: PUSH
41649: LD_INT 2
41651: PUSH
41652: LD_INT 4
41654: PUSH
41655: LD_INT 5
41657: PUSH
41658: LD_INT 6
41660: PUSH
41661: LD_INT 8
41663: PUSH
41664: LD_INT 11
41666: PUSH
41667: LD_INT 12
41669: PUSH
41670: LD_INT 15
41672: PUSH
41673: LD_INT 16
41675: PUSH
41676: LD_INT 20
41678: PUSH
41679: LD_INT 21
41681: PUSH
41682: LD_INT 22
41684: PUSH
41685: LD_INT 23
41687: PUSH
41688: LD_INT 25
41690: PUSH
41691: LD_INT 26
41693: PUSH
41694: LD_INT 30
41696: PUSH
41697: LD_INT 31
41699: PUSH
41700: LD_INT 32
41702: PUSH
41703: LD_INT 36
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 101
41729: PUSH
41730: LD_INT 102
41732: PUSH
41733: LD_INT 105
41735: PUSH
41736: LD_INT 106
41738: PUSH
41739: LD_INT 108
41741: PUSH
41742: LD_INT 109
41744: PUSH
41745: LD_INT 112
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: ST_TO_ADDR
41761: GO 44128
41763: LD_INT 7
41765: DOUBLE
41766: EQUAL
41767: IFTRUE 41771
41769: GO 41871
41771: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
41772: LD_ADDR_VAR 0 1
41776: PUSH
41777: LD_INT 2
41779: PUSH
41780: LD_INT 4
41782: PUSH
41783: LD_INT 5
41785: PUSH
41786: LD_INT 7
41788: PUSH
41789: LD_INT 11
41791: PUSH
41792: LD_INT 12
41794: PUSH
41795: LD_INT 15
41797: PUSH
41798: LD_INT 16
41800: PUSH
41801: LD_INT 20
41803: PUSH
41804: LD_INT 21
41806: PUSH
41807: LD_INT 22
41809: PUSH
41810: LD_INT 23
41812: PUSH
41813: LD_INT 25
41815: PUSH
41816: LD_INT 26
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 101
41837: PUSH
41838: LD_INT 102
41840: PUSH
41841: LD_INT 103
41843: PUSH
41844: LD_INT 105
41846: PUSH
41847: LD_INT 106
41849: PUSH
41850: LD_INT 108
41852: PUSH
41853: LD_INT 112
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: ST_TO_ADDR
41869: GO 44128
41871: LD_INT 8
41873: DOUBLE
41874: EQUAL
41875: IFTRUE 41879
41877: GO 42007
41879: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
41880: LD_ADDR_VAR 0 1
41884: PUSH
41885: LD_INT 2
41887: PUSH
41888: LD_INT 4
41890: PUSH
41891: LD_INT 5
41893: PUSH
41894: LD_INT 6
41896: PUSH
41897: LD_INT 7
41899: PUSH
41900: LD_INT 8
41902: PUSH
41903: LD_INT 11
41905: PUSH
41906: LD_INT 12
41908: PUSH
41909: LD_INT 15
41911: PUSH
41912: LD_INT 16
41914: PUSH
41915: LD_INT 20
41917: PUSH
41918: LD_INT 21
41920: PUSH
41921: LD_INT 22
41923: PUSH
41924: LD_INT 23
41926: PUSH
41927: LD_INT 25
41929: PUSH
41930: LD_INT 26
41932: PUSH
41933: LD_INT 30
41935: PUSH
41936: LD_INT 31
41938: PUSH
41939: LD_INT 32
41941: PUSH
41942: LD_INT 36
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 101
41969: PUSH
41970: LD_INT 102
41972: PUSH
41973: LD_INT 103
41975: PUSH
41976: LD_INT 105
41978: PUSH
41979: LD_INT 106
41981: PUSH
41982: LD_INT 108
41984: PUSH
41985: LD_INT 109
41987: PUSH
41988: LD_INT 112
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: ST_TO_ADDR
42005: GO 44128
42007: LD_INT 9
42009: DOUBLE
42010: EQUAL
42011: IFTRUE 42015
42013: GO 42151
42015: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
42016: LD_ADDR_VAR 0 1
42020: PUSH
42021: LD_INT 2
42023: PUSH
42024: LD_INT 4
42026: PUSH
42027: LD_INT 5
42029: PUSH
42030: LD_INT 6
42032: PUSH
42033: LD_INT 7
42035: PUSH
42036: LD_INT 8
42038: PUSH
42039: LD_INT 11
42041: PUSH
42042: LD_INT 12
42044: PUSH
42045: LD_INT 15
42047: PUSH
42048: LD_INT 16
42050: PUSH
42051: LD_INT 20
42053: PUSH
42054: LD_INT 21
42056: PUSH
42057: LD_INT 22
42059: PUSH
42060: LD_INT 23
42062: PUSH
42063: LD_INT 25
42065: PUSH
42066: LD_INT 26
42068: PUSH
42069: LD_INT 28
42071: PUSH
42072: LD_INT 30
42074: PUSH
42075: LD_INT 31
42077: PUSH
42078: LD_INT 32
42080: PUSH
42081: LD_INT 36
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 101
42109: PUSH
42110: LD_INT 102
42112: PUSH
42113: LD_INT 103
42115: PUSH
42116: LD_INT 105
42118: PUSH
42119: LD_INT 106
42121: PUSH
42122: LD_INT 108
42124: PUSH
42125: LD_INT 109
42127: PUSH
42128: LD_INT 112
42130: PUSH
42131: LD_INT 114
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: ST_TO_ADDR
42149: GO 44128
42151: LD_INT 10
42153: DOUBLE
42154: EQUAL
42155: IFTRUE 42159
42157: GO 42343
42159: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
42160: LD_ADDR_VAR 0 1
42164: PUSH
42165: LD_INT 2
42167: PUSH
42168: LD_INT 4
42170: PUSH
42171: LD_INT 5
42173: PUSH
42174: LD_INT 6
42176: PUSH
42177: LD_INT 7
42179: PUSH
42180: LD_INT 8
42182: PUSH
42183: LD_INT 9
42185: PUSH
42186: LD_INT 10
42188: PUSH
42189: LD_INT 11
42191: PUSH
42192: LD_INT 12
42194: PUSH
42195: LD_INT 13
42197: PUSH
42198: LD_INT 14
42200: PUSH
42201: LD_INT 15
42203: PUSH
42204: LD_INT 16
42206: PUSH
42207: LD_INT 17
42209: PUSH
42210: LD_INT 18
42212: PUSH
42213: LD_INT 19
42215: PUSH
42216: LD_INT 20
42218: PUSH
42219: LD_INT 21
42221: PUSH
42222: LD_INT 22
42224: PUSH
42225: LD_INT 23
42227: PUSH
42228: LD_INT 24
42230: PUSH
42231: LD_INT 25
42233: PUSH
42234: LD_INT 26
42236: PUSH
42237: LD_INT 28
42239: PUSH
42240: LD_INT 30
42242: PUSH
42243: LD_INT 31
42245: PUSH
42246: LD_INT 32
42248: PUSH
42249: LD_INT 36
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 101
42285: PUSH
42286: LD_INT 102
42288: PUSH
42289: LD_INT 103
42291: PUSH
42292: LD_INT 104
42294: PUSH
42295: LD_INT 105
42297: PUSH
42298: LD_INT 106
42300: PUSH
42301: LD_INT 107
42303: PUSH
42304: LD_INT 108
42306: PUSH
42307: LD_INT 109
42309: PUSH
42310: LD_INT 110
42312: PUSH
42313: LD_INT 111
42315: PUSH
42316: LD_INT 112
42318: PUSH
42319: LD_INT 114
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: ST_TO_ADDR
42341: GO 44128
42343: LD_INT 11
42345: DOUBLE
42346: EQUAL
42347: IFTRUE 42351
42349: GO 42543
42351: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
42352: LD_ADDR_VAR 0 1
42356: PUSH
42357: LD_INT 2
42359: PUSH
42360: LD_INT 3
42362: PUSH
42363: LD_INT 4
42365: PUSH
42366: LD_INT 5
42368: PUSH
42369: LD_INT 6
42371: PUSH
42372: LD_INT 7
42374: PUSH
42375: LD_INT 8
42377: PUSH
42378: LD_INT 9
42380: PUSH
42381: LD_INT 10
42383: PUSH
42384: LD_INT 11
42386: PUSH
42387: LD_INT 12
42389: PUSH
42390: LD_INT 13
42392: PUSH
42393: LD_INT 14
42395: PUSH
42396: LD_INT 15
42398: PUSH
42399: LD_INT 16
42401: PUSH
42402: LD_INT 17
42404: PUSH
42405: LD_INT 18
42407: PUSH
42408: LD_INT 19
42410: PUSH
42411: LD_INT 20
42413: PUSH
42414: LD_INT 21
42416: PUSH
42417: LD_INT 22
42419: PUSH
42420: LD_INT 23
42422: PUSH
42423: LD_INT 24
42425: PUSH
42426: LD_INT 25
42428: PUSH
42429: LD_INT 26
42431: PUSH
42432: LD_INT 28
42434: PUSH
42435: LD_INT 30
42437: PUSH
42438: LD_INT 31
42440: PUSH
42441: LD_INT 32
42443: PUSH
42444: LD_INT 34
42446: PUSH
42447: LD_INT 36
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 101
42485: PUSH
42486: LD_INT 102
42488: PUSH
42489: LD_INT 103
42491: PUSH
42492: LD_INT 104
42494: PUSH
42495: LD_INT 105
42497: PUSH
42498: LD_INT 106
42500: PUSH
42501: LD_INT 107
42503: PUSH
42504: LD_INT 108
42506: PUSH
42507: LD_INT 109
42509: PUSH
42510: LD_INT 110
42512: PUSH
42513: LD_INT 111
42515: PUSH
42516: LD_INT 112
42518: PUSH
42519: LD_INT 114
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: ST_TO_ADDR
42541: GO 44128
42543: LD_INT 12
42545: DOUBLE
42546: EQUAL
42547: IFTRUE 42551
42549: GO 42759
42551: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
42552: LD_ADDR_VAR 0 1
42556: PUSH
42557: LD_INT 1
42559: PUSH
42560: LD_INT 2
42562: PUSH
42563: LD_INT 3
42565: PUSH
42566: LD_INT 4
42568: PUSH
42569: LD_INT 5
42571: PUSH
42572: LD_INT 6
42574: PUSH
42575: LD_INT 7
42577: PUSH
42578: LD_INT 8
42580: PUSH
42581: LD_INT 9
42583: PUSH
42584: LD_INT 10
42586: PUSH
42587: LD_INT 11
42589: PUSH
42590: LD_INT 12
42592: PUSH
42593: LD_INT 13
42595: PUSH
42596: LD_INT 14
42598: PUSH
42599: LD_INT 15
42601: PUSH
42602: LD_INT 16
42604: PUSH
42605: LD_INT 17
42607: PUSH
42608: LD_INT 18
42610: PUSH
42611: LD_INT 19
42613: PUSH
42614: LD_INT 20
42616: PUSH
42617: LD_INT 21
42619: PUSH
42620: LD_INT 22
42622: PUSH
42623: LD_INT 23
42625: PUSH
42626: LD_INT 24
42628: PUSH
42629: LD_INT 25
42631: PUSH
42632: LD_INT 26
42634: PUSH
42635: LD_INT 27
42637: PUSH
42638: LD_INT 28
42640: PUSH
42641: LD_INT 30
42643: PUSH
42644: LD_INT 31
42646: PUSH
42647: LD_INT 32
42649: PUSH
42650: LD_INT 33
42652: PUSH
42653: LD_INT 34
42655: PUSH
42656: LD_INT 36
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 101
42697: PUSH
42698: LD_INT 102
42700: PUSH
42701: LD_INT 103
42703: PUSH
42704: LD_INT 104
42706: PUSH
42707: LD_INT 105
42709: PUSH
42710: LD_INT 106
42712: PUSH
42713: LD_INT 107
42715: PUSH
42716: LD_INT 108
42718: PUSH
42719: LD_INT 109
42721: PUSH
42722: LD_INT 110
42724: PUSH
42725: LD_INT 111
42727: PUSH
42728: LD_INT 112
42730: PUSH
42731: LD_INT 113
42733: PUSH
42734: LD_INT 114
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: ST_TO_ADDR
42757: GO 44128
42759: LD_INT 13
42761: DOUBLE
42762: EQUAL
42763: IFTRUE 42767
42765: GO 42963
42767: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
42768: LD_ADDR_VAR 0 1
42772: PUSH
42773: LD_INT 1
42775: PUSH
42776: LD_INT 2
42778: PUSH
42779: LD_INT 3
42781: PUSH
42782: LD_INT 4
42784: PUSH
42785: LD_INT 5
42787: PUSH
42788: LD_INT 8
42790: PUSH
42791: LD_INT 9
42793: PUSH
42794: LD_INT 10
42796: PUSH
42797: LD_INT 11
42799: PUSH
42800: LD_INT 12
42802: PUSH
42803: LD_INT 14
42805: PUSH
42806: LD_INT 15
42808: PUSH
42809: LD_INT 16
42811: PUSH
42812: LD_INT 17
42814: PUSH
42815: LD_INT 18
42817: PUSH
42818: LD_INT 19
42820: PUSH
42821: LD_INT 20
42823: PUSH
42824: LD_INT 21
42826: PUSH
42827: LD_INT 22
42829: PUSH
42830: LD_INT 23
42832: PUSH
42833: LD_INT 24
42835: PUSH
42836: LD_INT 25
42838: PUSH
42839: LD_INT 26
42841: PUSH
42842: LD_INT 27
42844: PUSH
42845: LD_INT 28
42847: PUSH
42848: LD_INT 30
42850: PUSH
42851: LD_INT 31
42853: PUSH
42854: LD_INT 32
42856: PUSH
42857: LD_INT 33
42859: PUSH
42860: LD_INT 34
42862: PUSH
42863: LD_INT 36
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 101
42901: PUSH
42902: LD_INT 102
42904: PUSH
42905: LD_INT 103
42907: PUSH
42908: LD_INT 104
42910: PUSH
42911: LD_INT 105
42913: PUSH
42914: LD_INT 106
42916: PUSH
42917: LD_INT 107
42919: PUSH
42920: LD_INT 108
42922: PUSH
42923: LD_INT 109
42925: PUSH
42926: LD_INT 110
42928: PUSH
42929: LD_INT 111
42931: PUSH
42932: LD_INT 112
42934: PUSH
42935: LD_INT 113
42937: PUSH
42938: LD_INT 114
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: ST_TO_ADDR
42961: GO 44128
42963: LD_INT 14
42965: DOUBLE
42966: EQUAL
42967: IFTRUE 42971
42969: GO 43183
42971: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
42972: LD_ADDR_VAR 0 1
42976: PUSH
42977: LD_INT 1
42979: PUSH
42980: LD_INT 2
42982: PUSH
42983: LD_INT 3
42985: PUSH
42986: LD_INT 4
42988: PUSH
42989: LD_INT 5
42991: PUSH
42992: LD_INT 6
42994: PUSH
42995: LD_INT 7
42997: PUSH
42998: LD_INT 8
43000: PUSH
43001: LD_INT 9
43003: PUSH
43004: LD_INT 10
43006: PUSH
43007: LD_INT 11
43009: PUSH
43010: LD_INT 12
43012: PUSH
43013: LD_INT 13
43015: PUSH
43016: LD_INT 14
43018: PUSH
43019: LD_INT 15
43021: PUSH
43022: LD_INT 16
43024: PUSH
43025: LD_INT 17
43027: PUSH
43028: LD_INT 18
43030: PUSH
43031: LD_INT 19
43033: PUSH
43034: LD_INT 20
43036: PUSH
43037: LD_INT 21
43039: PUSH
43040: LD_INT 22
43042: PUSH
43043: LD_INT 23
43045: PUSH
43046: LD_INT 24
43048: PUSH
43049: LD_INT 25
43051: PUSH
43052: LD_INT 26
43054: PUSH
43055: LD_INT 27
43057: PUSH
43058: LD_INT 28
43060: PUSH
43061: LD_INT 29
43063: PUSH
43064: LD_INT 30
43066: PUSH
43067: LD_INT 31
43069: PUSH
43070: LD_INT 32
43072: PUSH
43073: LD_INT 33
43075: PUSH
43076: LD_INT 34
43078: PUSH
43079: LD_INT 36
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 101
43121: PUSH
43122: LD_INT 102
43124: PUSH
43125: LD_INT 103
43127: PUSH
43128: LD_INT 104
43130: PUSH
43131: LD_INT 105
43133: PUSH
43134: LD_INT 106
43136: PUSH
43137: LD_INT 107
43139: PUSH
43140: LD_INT 108
43142: PUSH
43143: LD_INT 109
43145: PUSH
43146: LD_INT 110
43148: PUSH
43149: LD_INT 111
43151: PUSH
43152: LD_INT 112
43154: PUSH
43155: LD_INT 113
43157: PUSH
43158: LD_INT 114
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: ST_TO_ADDR
43181: GO 44128
43183: LD_INT 15
43185: DOUBLE
43186: EQUAL
43187: IFTRUE 43191
43189: GO 43403
43191: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
43192: LD_ADDR_VAR 0 1
43196: PUSH
43197: LD_INT 1
43199: PUSH
43200: LD_INT 2
43202: PUSH
43203: LD_INT 3
43205: PUSH
43206: LD_INT 4
43208: PUSH
43209: LD_INT 5
43211: PUSH
43212: LD_INT 6
43214: PUSH
43215: LD_INT 7
43217: PUSH
43218: LD_INT 8
43220: PUSH
43221: LD_INT 9
43223: PUSH
43224: LD_INT 10
43226: PUSH
43227: LD_INT 11
43229: PUSH
43230: LD_INT 12
43232: PUSH
43233: LD_INT 13
43235: PUSH
43236: LD_INT 14
43238: PUSH
43239: LD_INT 15
43241: PUSH
43242: LD_INT 16
43244: PUSH
43245: LD_INT 17
43247: PUSH
43248: LD_INT 18
43250: PUSH
43251: LD_INT 19
43253: PUSH
43254: LD_INT 20
43256: PUSH
43257: LD_INT 21
43259: PUSH
43260: LD_INT 22
43262: PUSH
43263: LD_INT 23
43265: PUSH
43266: LD_INT 24
43268: PUSH
43269: LD_INT 25
43271: PUSH
43272: LD_INT 26
43274: PUSH
43275: LD_INT 27
43277: PUSH
43278: LD_INT 28
43280: PUSH
43281: LD_INT 29
43283: PUSH
43284: LD_INT 30
43286: PUSH
43287: LD_INT 31
43289: PUSH
43290: LD_INT 32
43292: PUSH
43293: LD_INT 33
43295: PUSH
43296: LD_INT 34
43298: PUSH
43299: LD_INT 36
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 101
43341: PUSH
43342: LD_INT 102
43344: PUSH
43345: LD_INT 103
43347: PUSH
43348: LD_INT 104
43350: PUSH
43351: LD_INT 105
43353: PUSH
43354: LD_INT 106
43356: PUSH
43357: LD_INT 107
43359: PUSH
43360: LD_INT 108
43362: PUSH
43363: LD_INT 109
43365: PUSH
43366: LD_INT 110
43368: PUSH
43369: LD_INT 111
43371: PUSH
43372: LD_INT 112
43374: PUSH
43375: LD_INT 113
43377: PUSH
43378: LD_INT 114
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: ST_TO_ADDR
43401: GO 44128
43403: LD_INT 16
43405: DOUBLE
43406: EQUAL
43407: IFTRUE 43411
43409: GO 43535
43411: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
43412: LD_ADDR_VAR 0 1
43416: PUSH
43417: LD_INT 2
43419: PUSH
43420: LD_INT 4
43422: PUSH
43423: LD_INT 5
43425: PUSH
43426: LD_INT 7
43428: PUSH
43429: LD_INT 11
43431: PUSH
43432: LD_INT 12
43434: PUSH
43435: LD_INT 15
43437: PUSH
43438: LD_INT 16
43440: PUSH
43441: LD_INT 20
43443: PUSH
43444: LD_INT 21
43446: PUSH
43447: LD_INT 22
43449: PUSH
43450: LD_INT 23
43452: PUSH
43453: LD_INT 25
43455: PUSH
43456: LD_INT 26
43458: PUSH
43459: LD_INT 30
43461: PUSH
43462: LD_INT 31
43464: PUSH
43465: LD_INT 32
43467: PUSH
43468: LD_INT 33
43470: PUSH
43471: LD_INT 34
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 101
43497: PUSH
43498: LD_INT 102
43500: PUSH
43501: LD_INT 103
43503: PUSH
43504: LD_INT 106
43506: PUSH
43507: LD_INT 108
43509: PUSH
43510: LD_INT 112
43512: PUSH
43513: LD_INT 113
43515: PUSH
43516: LD_INT 114
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: ST_TO_ADDR
43533: GO 44128
43535: LD_INT 17
43537: DOUBLE
43538: EQUAL
43539: IFTRUE 43543
43541: GO 43755
43543: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
43544: LD_ADDR_VAR 0 1
43548: PUSH
43549: LD_INT 1
43551: PUSH
43552: LD_INT 2
43554: PUSH
43555: LD_INT 3
43557: PUSH
43558: LD_INT 4
43560: PUSH
43561: LD_INT 5
43563: PUSH
43564: LD_INT 6
43566: PUSH
43567: LD_INT 7
43569: PUSH
43570: LD_INT 8
43572: PUSH
43573: LD_INT 9
43575: PUSH
43576: LD_INT 10
43578: PUSH
43579: LD_INT 11
43581: PUSH
43582: LD_INT 12
43584: PUSH
43585: LD_INT 13
43587: PUSH
43588: LD_INT 14
43590: PUSH
43591: LD_INT 15
43593: PUSH
43594: LD_INT 16
43596: PUSH
43597: LD_INT 17
43599: PUSH
43600: LD_INT 18
43602: PUSH
43603: LD_INT 19
43605: PUSH
43606: LD_INT 20
43608: PUSH
43609: LD_INT 21
43611: PUSH
43612: LD_INT 22
43614: PUSH
43615: LD_INT 23
43617: PUSH
43618: LD_INT 24
43620: PUSH
43621: LD_INT 25
43623: PUSH
43624: LD_INT 26
43626: PUSH
43627: LD_INT 27
43629: PUSH
43630: LD_INT 28
43632: PUSH
43633: LD_INT 29
43635: PUSH
43636: LD_INT 30
43638: PUSH
43639: LD_INT 31
43641: PUSH
43642: LD_INT 32
43644: PUSH
43645: LD_INT 33
43647: PUSH
43648: LD_INT 34
43650: PUSH
43651: LD_INT 36
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 101
43693: PUSH
43694: LD_INT 102
43696: PUSH
43697: LD_INT 103
43699: PUSH
43700: LD_INT 104
43702: PUSH
43703: LD_INT 105
43705: PUSH
43706: LD_INT 106
43708: PUSH
43709: LD_INT 107
43711: PUSH
43712: LD_INT 108
43714: PUSH
43715: LD_INT 109
43717: PUSH
43718: LD_INT 110
43720: PUSH
43721: LD_INT 111
43723: PUSH
43724: LD_INT 112
43726: PUSH
43727: LD_INT 113
43729: PUSH
43730: LD_INT 114
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: ST_TO_ADDR
43753: GO 44128
43755: LD_INT 18
43757: DOUBLE
43758: EQUAL
43759: IFTRUE 43763
43761: GO 43899
43763: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
43764: LD_ADDR_VAR 0 1
43768: PUSH
43769: LD_INT 2
43771: PUSH
43772: LD_INT 4
43774: PUSH
43775: LD_INT 5
43777: PUSH
43778: LD_INT 7
43780: PUSH
43781: LD_INT 11
43783: PUSH
43784: LD_INT 12
43786: PUSH
43787: LD_INT 15
43789: PUSH
43790: LD_INT 16
43792: PUSH
43793: LD_INT 20
43795: PUSH
43796: LD_INT 21
43798: PUSH
43799: LD_INT 22
43801: PUSH
43802: LD_INT 23
43804: PUSH
43805: LD_INT 25
43807: PUSH
43808: LD_INT 26
43810: PUSH
43811: LD_INT 30
43813: PUSH
43814: LD_INT 31
43816: PUSH
43817: LD_INT 32
43819: PUSH
43820: LD_INT 33
43822: PUSH
43823: LD_INT 34
43825: PUSH
43826: LD_INT 35
43828: PUSH
43829: LD_INT 36
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 101
43857: PUSH
43858: LD_INT 102
43860: PUSH
43861: LD_INT 103
43863: PUSH
43864: LD_INT 106
43866: PUSH
43867: LD_INT 108
43869: PUSH
43870: LD_INT 112
43872: PUSH
43873: LD_INT 113
43875: PUSH
43876: LD_INT 114
43878: PUSH
43879: LD_INT 115
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: ST_TO_ADDR
43897: GO 44128
43899: LD_INT 19
43901: DOUBLE
43902: EQUAL
43903: IFTRUE 43907
43905: GO 44127
43907: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
43908: LD_ADDR_VAR 0 1
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: LD_INT 2
43918: PUSH
43919: LD_INT 3
43921: PUSH
43922: LD_INT 4
43924: PUSH
43925: LD_INT 5
43927: PUSH
43928: LD_INT 6
43930: PUSH
43931: LD_INT 7
43933: PUSH
43934: LD_INT 8
43936: PUSH
43937: LD_INT 9
43939: PUSH
43940: LD_INT 10
43942: PUSH
43943: LD_INT 11
43945: PUSH
43946: LD_INT 12
43948: PUSH
43949: LD_INT 13
43951: PUSH
43952: LD_INT 14
43954: PUSH
43955: LD_INT 15
43957: PUSH
43958: LD_INT 16
43960: PUSH
43961: LD_INT 17
43963: PUSH
43964: LD_INT 18
43966: PUSH
43967: LD_INT 19
43969: PUSH
43970: LD_INT 20
43972: PUSH
43973: LD_INT 21
43975: PUSH
43976: LD_INT 22
43978: PUSH
43979: LD_INT 23
43981: PUSH
43982: LD_INT 24
43984: PUSH
43985: LD_INT 25
43987: PUSH
43988: LD_INT 26
43990: PUSH
43991: LD_INT 27
43993: PUSH
43994: LD_INT 28
43996: PUSH
43997: LD_INT 29
43999: PUSH
44000: LD_INT 30
44002: PUSH
44003: LD_INT 31
44005: PUSH
44006: LD_INT 32
44008: PUSH
44009: LD_INT 33
44011: PUSH
44012: LD_INT 34
44014: PUSH
44015: LD_INT 35
44017: PUSH
44018: LD_INT 36
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 101
44061: PUSH
44062: LD_INT 102
44064: PUSH
44065: LD_INT 103
44067: PUSH
44068: LD_INT 104
44070: PUSH
44071: LD_INT 105
44073: PUSH
44074: LD_INT 106
44076: PUSH
44077: LD_INT 107
44079: PUSH
44080: LD_INT 108
44082: PUSH
44083: LD_INT 109
44085: PUSH
44086: LD_INT 110
44088: PUSH
44089: LD_INT 111
44091: PUSH
44092: LD_INT 112
44094: PUSH
44095: LD_INT 113
44097: PUSH
44098: LD_INT 114
44100: PUSH
44101: LD_INT 115
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: ST_TO_ADDR
44125: GO 44128
44127: POP
// end else
44128: GO 44347
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
44130: LD_ADDR_VAR 0 1
44134: PUSH
44135: LD_INT 1
44137: PUSH
44138: LD_INT 2
44140: PUSH
44141: LD_INT 3
44143: PUSH
44144: LD_INT 4
44146: PUSH
44147: LD_INT 5
44149: PUSH
44150: LD_INT 6
44152: PUSH
44153: LD_INT 7
44155: PUSH
44156: LD_INT 8
44158: PUSH
44159: LD_INT 9
44161: PUSH
44162: LD_INT 10
44164: PUSH
44165: LD_INT 11
44167: PUSH
44168: LD_INT 12
44170: PUSH
44171: LD_INT 13
44173: PUSH
44174: LD_INT 14
44176: PUSH
44177: LD_INT 15
44179: PUSH
44180: LD_INT 16
44182: PUSH
44183: LD_INT 17
44185: PUSH
44186: LD_INT 18
44188: PUSH
44189: LD_INT 19
44191: PUSH
44192: LD_INT 20
44194: PUSH
44195: LD_INT 21
44197: PUSH
44198: LD_INT 22
44200: PUSH
44201: LD_INT 23
44203: PUSH
44204: LD_INT 24
44206: PUSH
44207: LD_INT 25
44209: PUSH
44210: LD_INT 26
44212: PUSH
44213: LD_INT 27
44215: PUSH
44216: LD_INT 28
44218: PUSH
44219: LD_INT 29
44221: PUSH
44222: LD_INT 30
44224: PUSH
44225: LD_INT 31
44227: PUSH
44228: LD_INT 32
44230: PUSH
44231: LD_INT 33
44233: PUSH
44234: LD_INT 34
44236: PUSH
44237: LD_INT 35
44239: PUSH
44240: LD_INT 36
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 101
44283: PUSH
44284: LD_INT 102
44286: PUSH
44287: LD_INT 103
44289: PUSH
44290: LD_INT 104
44292: PUSH
44293: LD_INT 105
44295: PUSH
44296: LD_INT 106
44298: PUSH
44299: LD_INT 107
44301: PUSH
44302: LD_INT 108
44304: PUSH
44305: LD_INT 109
44307: PUSH
44308: LD_INT 110
44310: PUSH
44311: LD_INT 111
44313: PUSH
44314: LD_INT 112
44316: PUSH
44317: LD_INT 113
44319: PUSH
44320: LD_INT 114
44322: PUSH
44323: LD_INT 115
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: ST_TO_ADDR
// if result then
44347: LD_VAR 0 1
44351: IFFALSE 44640
// begin normal :=  ;
44353: LD_ADDR_VAR 0 3
44357: PUSH
44358: LD_STRING 
44360: ST_TO_ADDR
// hardcore :=  ;
44361: LD_ADDR_VAR 0 4
44365: PUSH
44366: LD_STRING 
44368: ST_TO_ADDR
// for i = 1 to normalCounter do
44369: LD_ADDR_VAR 0 5
44373: PUSH
44374: DOUBLE
44375: LD_INT 1
44377: DEC
44378: ST_TO_ADDR
44379: LD_EXP 30
44383: PUSH
44384: FOR_TO
44385: IFFALSE 44486
// begin tmp := 0 ;
44387: LD_ADDR_VAR 0 2
44391: PUSH
44392: LD_STRING 0
44394: ST_TO_ADDR
// if result [ 1 ] then
44395: LD_VAR 0 1
44399: PUSH
44400: LD_INT 1
44402: ARRAY
44403: IFFALSE 44468
// if result [ 1 ] [ 1 ] = i then
44405: LD_VAR 0 1
44409: PUSH
44410: LD_INT 1
44412: ARRAY
44413: PUSH
44414: LD_INT 1
44416: ARRAY
44417: PUSH
44418: LD_VAR 0 5
44422: EQUAL
44423: IFFALSE 44468
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
44425: LD_ADDR_VAR 0 1
44429: PUSH
44430: LD_VAR 0 1
44434: PPUSH
44435: LD_INT 1
44437: PPUSH
44438: LD_VAR 0 1
44442: PUSH
44443: LD_INT 1
44445: ARRAY
44446: PPUSH
44447: LD_INT 1
44449: PPUSH
44450: CALL_OW 3
44454: PPUSH
44455: CALL_OW 1
44459: ST_TO_ADDR
// tmp := 1 ;
44460: LD_ADDR_VAR 0 2
44464: PUSH
44465: LD_STRING 1
44467: ST_TO_ADDR
// end ; normal := normal & tmp ;
44468: LD_ADDR_VAR 0 3
44472: PUSH
44473: LD_VAR 0 3
44477: PUSH
44478: LD_VAR 0 2
44482: STR
44483: ST_TO_ADDR
// end ;
44484: GO 44384
44486: POP
44487: POP
// for i = 1 to hardcoreCounter do
44488: LD_ADDR_VAR 0 5
44492: PUSH
44493: DOUBLE
44494: LD_INT 1
44496: DEC
44497: ST_TO_ADDR
44498: LD_EXP 31
44502: PUSH
44503: FOR_TO
44504: IFFALSE 44609
// begin tmp := 0 ;
44506: LD_ADDR_VAR 0 2
44510: PUSH
44511: LD_STRING 0
44513: ST_TO_ADDR
// if result [ 2 ] then
44514: LD_VAR 0 1
44518: PUSH
44519: LD_INT 2
44521: ARRAY
44522: IFFALSE 44591
// if result [ 2 ] [ 1 ] = 100 + i then
44524: LD_VAR 0 1
44528: PUSH
44529: LD_INT 2
44531: ARRAY
44532: PUSH
44533: LD_INT 1
44535: ARRAY
44536: PUSH
44537: LD_INT 100
44539: PUSH
44540: LD_VAR 0 5
44544: PLUS
44545: EQUAL
44546: IFFALSE 44591
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
44548: LD_ADDR_VAR 0 1
44552: PUSH
44553: LD_VAR 0 1
44557: PPUSH
44558: LD_INT 2
44560: PPUSH
44561: LD_VAR 0 1
44565: PUSH
44566: LD_INT 2
44568: ARRAY
44569: PPUSH
44570: LD_INT 1
44572: PPUSH
44573: CALL_OW 3
44577: PPUSH
44578: CALL_OW 1
44582: ST_TO_ADDR
// tmp := 1 ;
44583: LD_ADDR_VAR 0 2
44587: PUSH
44588: LD_STRING 1
44590: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
44591: LD_ADDR_VAR 0 4
44595: PUSH
44596: LD_VAR 0 4
44600: PUSH
44601: LD_VAR 0 2
44605: STR
44606: ST_TO_ADDR
// end ;
44607: GO 44503
44609: POP
44610: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
44611: LD_STRING getStreamItemsFromMission("
44613: PUSH
44614: LD_VAR 0 3
44618: STR
44619: PUSH
44620: LD_STRING ","
44622: STR
44623: PUSH
44624: LD_VAR 0 4
44628: STR
44629: PUSH
44630: LD_STRING ")
44632: STR
44633: PPUSH
44634: CALL_OW 559
// end else
44638: GO 44647
// ToLua ( getStreamItemsFromMission("","") ) ;
44640: LD_STRING getStreamItemsFromMission("","")
44642: PPUSH
44643: CALL_OW 559
// end ;
44647: LD_VAR 0 1
44651: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
44652: LD_VAR 0 2
44656: PUSH
44657: LD_INT 100
44659: EQUAL
44660: IFFALSE 45609
// begin if not StreamModeActive then
44662: LD_EXP 29
44666: NOT
44667: IFFALSE 44677
// StreamModeActive := true ;
44669: LD_ADDR_EXP 29
44673: PUSH
44674: LD_INT 1
44676: ST_TO_ADDR
// if p3 = 0 then
44677: LD_VAR 0 3
44681: PUSH
44682: LD_INT 0
44684: EQUAL
44685: IFFALSE 44691
// InitStreamMode ;
44687: CALL 40730 0 0
// if p3 = 1 then
44691: LD_VAR 0 3
44695: PUSH
44696: LD_INT 1
44698: EQUAL
44699: IFFALSE 44709
// sRocket := true ;
44701: LD_ADDR_EXP 34
44705: PUSH
44706: LD_INT 1
44708: ST_TO_ADDR
// if p3 = 2 then
44709: LD_VAR 0 3
44713: PUSH
44714: LD_INT 2
44716: EQUAL
44717: IFFALSE 44727
// sSpeed := true ;
44719: LD_ADDR_EXP 33
44723: PUSH
44724: LD_INT 1
44726: ST_TO_ADDR
// if p3 = 3 then
44727: LD_VAR 0 3
44731: PUSH
44732: LD_INT 3
44734: EQUAL
44735: IFFALSE 44745
// sEngine := true ;
44737: LD_ADDR_EXP 35
44741: PUSH
44742: LD_INT 1
44744: ST_TO_ADDR
// if p3 = 4 then
44745: LD_VAR 0 3
44749: PUSH
44750: LD_INT 4
44752: EQUAL
44753: IFFALSE 44763
// sSpec := true ;
44755: LD_ADDR_EXP 32
44759: PUSH
44760: LD_INT 1
44762: ST_TO_ADDR
// if p3 = 5 then
44763: LD_VAR 0 3
44767: PUSH
44768: LD_INT 5
44770: EQUAL
44771: IFFALSE 44781
// sLevel := true ;
44773: LD_ADDR_EXP 36
44777: PUSH
44778: LD_INT 1
44780: ST_TO_ADDR
// if p3 = 6 then
44781: LD_VAR 0 3
44785: PUSH
44786: LD_INT 6
44788: EQUAL
44789: IFFALSE 44799
// sArmoury := true ;
44791: LD_ADDR_EXP 37
44795: PUSH
44796: LD_INT 1
44798: ST_TO_ADDR
// if p3 = 7 then
44799: LD_VAR 0 3
44803: PUSH
44804: LD_INT 7
44806: EQUAL
44807: IFFALSE 44817
// sRadar := true ;
44809: LD_ADDR_EXP 38
44813: PUSH
44814: LD_INT 1
44816: ST_TO_ADDR
// if p3 = 8 then
44817: LD_VAR 0 3
44821: PUSH
44822: LD_INT 8
44824: EQUAL
44825: IFFALSE 44835
// sBunker := true ;
44827: LD_ADDR_EXP 39
44831: PUSH
44832: LD_INT 1
44834: ST_TO_ADDR
// if p3 = 9 then
44835: LD_VAR 0 3
44839: PUSH
44840: LD_INT 9
44842: EQUAL
44843: IFFALSE 44853
// sHack := true ;
44845: LD_ADDR_EXP 40
44849: PUSH
44850: LD_INT 1
44852: ST_TO_ADDR
// if p3 = 10 then
44853: LD_VAR 0 3
44857: PUSH
44858: LD_INT 10
44860: EQUAL
44861: IFFALSE 44871
// sFire := true ;
44863: LD_ADDR_EXP 41
44867: PUSH
44868: LD_INT 1
44870: ST_TO_ADDR
// if p3 = 11 then
44871: LD_VAR 0 3
44875: PUSH
44876: LD_INT 11
44878: EQUAL
44879: IFFALSE 44889
// sRefresh := true ;
44881: LD_ADDR_EXP 42
44885: PUSH
44886: LD_INT 1
44888: ST_TO_ADDR
// if p3 = 12 then
44889: LD_VAR 0 3
44893: PUSH
44894: LD_INT 12
44896: EQUAL
44897: IFFALSE 44907
// sExp := true ;
44899: LD_ADDR_EXP 43
44903: PUSH
44904: LD_INT 1
44906: ST_TO_ADDR
// if p3 = 13 then
44907: LD_VAR 0 3
44911: PUSH
44912: LD_INT 13
44914: EQUAL
44915: IFFALSE 44925
// sDepot := true ;
44917: LD_ADDR_EXP 44
44921: PUSH
44922: LD_INT 1
44924: ST_TO_ADDR
// if p3 = 14 then
44925: LD_VAR 0 3
44929: PUSH
44930: LD_INT 14
44932: EQUAL
44933: IFFALSE 44943
// sFlag := true ;
44935: LD_ADDR_EXP 45
44939: PUSH
44940: LD_INT 1
44942: ST_TO_ADDR
// if p3 = 15 then
44943: LD_VAR 0 3
44947: PUSH
44948: LD_INT 15
44950: EQUAL
44951: IFFALSE 44961
// sKamikadze := true ;
44953: LD_ADDR_EXP 53
44957: PUSH
44958: LD_INT 1
44960: ST_TO_ADDR
// if p3 = 16 then
44961: LD_VAR 0 3
44965: PUSH
44966: LD_INT 16
44968: EQUAL
44969: IFFALSE 44979
// sTroll := true ;
44971: LD_ADDR_EXP 54
44975: PUSH
44976: LD_INT 1
44978: ST_TO_ADDR
// if p3 = 17 then
44979: LD_VAR 0 3
44983: PUSH
44984: LD_INT 17
44986: EQUAL
44987: IFFALSE 44997
// sSlow := true ;
44989: LD_ADDR_EXP 55
44993: PUSH
44994: LD_INT 1
44996: ST_TO_ADDR
// if p3 = 18 then
44997: LD_VAR 0 3
45001: PUSH
45002: LD_INT 18
45004: EQUAL
45005: IFFALSE 45015
// sLack := true ;
45007: LD_ADDR_EXP 56
45011: PUSH
45012: LD_INT 1
45014: ST_TO_ADDR
// if p3 = 19 then
45015: LD_VAR 0 3
45019: PUSH
45020: LD_INT 19
45022: EQUAL
45023: IFFALSE 45033
// sTank := true ;
45025: LD_ADDR_EXP 58
45029: PUSH
45030: LD_INT 1
45032: ST_TO_ADDR
// if p3 = 20 then
45033: LD_VAR 0 3
45037: PUSH
45038: LD_INT 20
45040: EQUAL
45041: IFFALSE 45051
// sRemote := true ;
45043: LD_ADDR_EXP 59
45047: PUSH
45048: LD_INT 1
45050: ST_TO_ADDR
// if p3 = 21 then
45051: LD_VAR 0 3
45055: PUSH
45056: LD_INT 21
45058: EQUAL
45059: IFFALSE 45069
// sPowell := true ;
45061: LD_ADDR_EXP 60
45065: PUSH
45066: LD_INT 1
45068: ST_TO_ADDR
// if p3 = 22 then
45069: LD_VAR 0 3
45073: PUSH
45074: LD_INT 22
45076: EQUAL
45077: IFFALSE 45087
// sTeleport := true ;
45079: LD_ADDR_EXP 63
45083: PUSH
45084: LD_INT 1
45086: ST_TO_ADDR
// if p3 = 23 then
45087: LD_VAR 0 3
45091: PUSH
45092: LD_INT 23
45094: EQUAL
45095: IFFALSE 45105
// sOilTower := true ;
45097: LD_ADDR_EXP 65
45101: PUSH
45102: LD_INT 1
45104: ST_TO_ADDR
// if p3 = 24 then
45105: LD_VAR 0 3
45109: PUSH
45110: LD_INT 24
45112: EQUAL
45113: IFFALSE 45123
// sShovel := true ;
45115: LD_ADDR_EXP 66
45119: PUSH
45120: LD_INT 1
45122: ST_TO_ADDR
// if p3 = 25 then
45123: LD_VAR 0 3
45127: PUSH
45128: LD_INT 25
45130: EQUAL
45131: IFFALSE 45141
// sSheik := true ;
45133: LD_ADDR_EXP 67
45137: PUSH
45138: LD_INT 1
45140: ST_TO_ADDR
// if p3 = 26 then
45141: LD_VAR 0 3
45145: PUSH
45146: LD_INT 26
45148: EQUAL
45149: IFFALSE 45159
// sEarthquake := true ;
45151: LD_ADDR_EXP 69
45155: PUSH
45156: LD_INT 1
45158: ST_TO_ADDR
// if p3 = 27 then
45159: LD_VAR 0 3
45163: PUSH
45164: LD_INT 27
45166: EQUAL
45167: IFFALSE 45177
// sAI := true ;
45169: LD_ADDR_EXP 70
45173: PUSH
45174: LD_INT 1
45176: ST_TO_ADDR
// if p3 = 28 then
45177: LD_VAR 0 3
45181: PUSH
45182: LD_INT 28
45184: EQUAL
45185: IFFALSE 45195
// sCargo := true ;
45187: LD_ADDR_EXP 73
45191: PUSH
45192: LD_INT 1
45194: ST_TO_ADDR
// if p3 = 29 then
45195: LD_VAR 0 3
45199: PUSH
45200: LD_INT 29
45202: EQUAL
45203: IFFALSE 45213
// sDLaser := true ;
45205: LD_ADDR_EXP 74
45209: PUSH
45210: LD_INT 1
45212: ST_TO_ADDR
// if p3 = 30 then
45213: LD_VAR 0 3
45217: PUSH
45218: LD_INT 30
45220: EQUAL
45221: IFFALSE 45231
// sExchange := true ;
45223: LD_ADDR_EXP 75
45227: PUSH
45228: LD_INT 1
45230: ST_TO_ADDR
// if p3 = 31 then
45231: LD_VAR 0 3
45235: PUSH
45236: LD_INT 31
45238: EQUAL
45239: IFFALSE 45249
// sFac := true ;
45241: LD_ADDR_EXP 76
45245: PUSH
45246: LD_INT 1
45248: ST_TO_ADDR
// if p3 = 32 then
45249: LD_VAR 0 3
45253: PUSH
45254: LD_INT 32
45256: EQUAL
45257: IFFALSE 45267
// sPower := true ;
45259: LD_ADDR_EXP 77
45263: PUSH
45264: LD_INT 1
45266: ST_TO_ADDR
// if p3 = 33 then
45267: LD_VAR 0 3
45271: PUSH
45272: LD_INT 33
45274: EQUAL
45275: IFFALSE 45285
// sRandom := true ;
45277: LD_ADDR_EXP 78
45281: PUSH
45282: LD_INT 1
45284: ST_TO_ADDR
// if p3 = 34 then
45285: LD_VAR 0 3
45289: PUSH
45290: LD_INT 34
45292: EQUAL
45293: IFFALSE 45303
// sShield := true ;
45295: LD_ADDR_EXP 79
45299: PUSH
45300: LD_INT 1
45302: ST_TO_ADDR
// if p3 = 35 then
45303: LD_VAR 0 3
45307: PUSH
45308: LD_INT 35
45310: EQUAL
45311: IFFALSE 45321
// sTime := true ;
45313: LD_ADDR_EXP 80
45317: PUSH
45318: LD_INT 1
45320: ST_TO_ADDR
// if p3 = 36 then
45321: LD_VAR 0 3
45325: PUSH
45326: LD_INT 36
45328: EQUAL
45329: IFFALSE 45339
// sTools := true ;
45331: LD_ADDR_EXP 81
45335: PUSH
45336: LD_INT 1
45338: ST_TO_ADDR
// if p3 = 101 then
45339: LD_VAR 0 3
45343: PUSH
45344: LD_INT 101
45346: EQUAL
45347: IFFALSE 45357
// sSold := true ;
45349: LD_ADDR_EXP 46
45353: PUSH
45354: LD_INT 1
45356: ST_TO_ADDR
// if p3 = 102 then
45357: LD_VAR 0 3
45361: PUSH
45362: LD_INT 102
45364: EQUAL
45365: IFFALSE 45375
// sDiff := true ;
45367: LD_ADDR_EXP 47
45371: PUSH
45372: LD_INT 1
45374: ST_TO_ADDR
// if p3 = 103 then
45375: LD_VAR 0 3
45379: PUSH
45380: LD_INT 103
45382: EQUAL
45383: IFFALSE 45393
// sFog := true ;
45385: LD_ADDR_EXP 50
45389: PUSH
45390: LD_INT 1
45392: ST_TO_ADDR
// if p3 = 104 then
45393: LD_VAR 0 3
45397: PUSH
45398: LD_INT 104
45400: EQUAL
45401: IFFALSE 45411
// sReset := true ;
45403: LD_ADDR_EXP 51
45407: PUSH
45408: LD_INT 1
45410: ST_TO_ADDR
// if p3 = 105 then
45411: LD_VAR 0 3
45415: PUSH
45416: LD_INT 105
45418: EQUAL
45419: IFFALSE 45429
// sSun := true ;
45421: LD_ADDR_EXP 52
45425: PUSH
45426: LD_INT 1
45428: ST_TO_ADDR
// if p3 = 106 then
45429: LD_VAR 0 3
45433: PUSH
45434: LD_INT 106
45436: EQUAL
45437: IFFALSE 45447
// sTiger := true ;
45439: LD_ADDR_EXP 48
45443: PUSH
45444: LD_INT 1
45446: ST_TO_ADDR
// if p3 = 107 then
45447: LD_VAR 0 3
45451: PUSH
45452: LD_INT 107
45454: EQUAL
45455: IFFALSE 45465
// sBomb := true ;
45457: LD_ADDR_EXP 49
45461: PUSH
45462: LD_INT 1
45464: ST_TO_ADDR
// if p3 = 108 then
45465: LD_VAR 0 3
45469: PUSH
45470: LD_INT 108
45472: EQUAL
45473: IFFALSE 45483
// sWound := true ;
45475: LD_ADDR_EXP 57
45479: PUSH
45480: LD_INT 1
45482: ST_TO_ADDR
// if p3 = 109 then
45483: LD_VAR 0 3
45487: PUSH
45488: LD_INT 109
45490: EQUAL
45491: IFFALSE 45501
// sBetray := true ;
45493: LD_ADDR_EXP 61
45497: PUSH
45498: LD_INT 1
45500: ST_TO_ADDR
// if p3 = 110 then
45501: LD_VAR 0 3
45505: PUSH
45506: LD_INT 110
45508: EQUAL
45509: IFFALSE 45519
// sContamin := true ;
45511: LD_ADDR_EXP 62
45515: PUSH
45516: LD_INT 1
45518: ST_TO_ADDR
// if p3 = 111 then
45519: LD_VAR 0 3
45523: PUSH
45524: LD_INT 111
45526: EQUAL
45527: IFFALSE 45537
// sOil := true ;
45529: LD_ADDR_EXP 64
45533: PUSH
45534: LD_INT 1
45536: ST_TO_ADDR
// if p3 = 112 then
45537: LD_VAR 0 3
45541: PUSH
45542: LD_INT 112
45544: EQUAL
45545: IFFALSE 45555
// sStu := true ;
45547: LD_ADDR_EXP 68
45551: PUSH
45552: LD_INT 1
45554: ST_TO_ADDR
// if p3 = 113 then
45555: LD_VAR 0 3
45559: PUSH
45560: LD_INT 113
45562: EQUAL
45563: IFFALSE 45573
// sBazooka := true ;
45565: LD_ADDR_EXP 71
45569: PUSH
45570: LD_INT 1
45572: ST_TO_ADDR
// if p3 = 114 then
45573: LD_VAR 0 3
45577: PUSH
45578: LD_INT 114
45580: EQUAL
45581: IFFALSE 45591
// sMortar := true ;
45583: LD_ADDR_EXP 72
45587: PUSH
45588: LD_INT 1
45590: ST_TO_ADDR
// if p3 = 115 then
45591: LD_VAR 0 3
45595: PUSH
45596: LD_INT 115
45598: EQUAL
45599: IFFALSE 45609
// sRanger := true ;
45601: LD_ADDR_EXP 82
45605: PUSH
45606: LD_INT 1
45608: ST_TO_ADDR
// end ; end ;
45609: PPOPN 6
45611: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
45612: LD_EXP 29
45616: PUSH
45617: LD_EXP 34
45621: AND
45622: IFFALSE 45746
45624: GO 45626
45626: DISABLE
45627: LD_INT 0
45629: PPUSH
45630: PPUSH
// begin enable ;
45631: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
45632: LD_ADDR_VAR 0 2
45636: PUSH
45637: LD_INT 22
45639: PUSH
45640: LD_OWVAR 2
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: LD_INT 34
45654: PUSH
45655: LD_INT 7
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 34
45664: PUSH
45665: LD_INT 45
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 34
45674: PUSH
45675: LD_INT 28
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 34
45684: PUSH
45685: LD_INT 47
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PPUSH
45703: CALL_OW 69
45707: ST_TO_ADDR
// if not tmp then
45708: LD_VAR 0 2
45712: NOT
45713: IFFALSE 45717
// exit ;
45715: GO 45746
// for i in tmp do
45717: LD_ADDR_VAR 0 1
45721: PUSH
45722: LD_VAR 0 2
45726: PUSH
45727: FOR_IN
45728: IFFALSE 45744
// begin SetLives ( i , 0 ) ;
45730: LD_VAR 0 1
45734: PPUSH
45735: LD_INT 0
45737: PPUSH
45738: CALL_OW 234
// end ;
45742: GO 45727
45744: POP
45745: POP
// end ;
45746: PPOPN 2
45748: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
45749: LD_EXP 29
45753: PUSH
45754: LD_EXP 35
45758: AND
45759: IFFALSE 45843
45761: GO 45763
45763: DISABLE
45764: LD_INT 0
45766: PPUSH
45767: PPUSH
// begin enable ;
45768: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
45769: LD_ADDR_VAR 0 2
45773: PUSH
45774: LD_INT 22
45776: PUSH
45777: LD_OWVAR 2
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 32
45788: PUSH
45789: LD_INT 3
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PPUSH
45800: CALL_OW 69
45804: ST_TO_ADDR
// if not tmp then
45805: LD_VAR 0 2
45809: NOT
45810: IFFALSE 45814
// exit ;
45812: GO 45843
// for i in tmp do
45814: LD_ADDR_VAR 0 1
45818: PUSH
45819: LD_VAR 0 2
45823: PUSH
45824: FOR_IN
45825: IFFALSE 45841
// begin SetLives ( i , 0 ) ;
45827: LD_VAR 0 1
45831: PPUSH
45832: LD_INT 0
45834: PPUSH
45835: CALL_OW 234
// end ;
45839: GO 45824
45841: POP
45842: POP
// end ;
45843: PPOPN 2
45845: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
45846: LD_EXP 29
45850: PUSH
45851: LD_EXP 32
45855: AND
45856: IFFALSE 45949
45858: GO 45860
45860: DISABLE
45861: LD_INT 0
45863: PPUSH
// begin enable ;
45864: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
45865: LD_ADDR_VAR 0 1
45869: PUSH
45870: LD_INT 22
45872: PUSH
45873: LD_OWVAR 2
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: LD_INT 25
45887: PUSH
45888: LD_INT 5
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 25
45897: PUSH
45898: LD_INT 9
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 25
45907: PUSH
45908: LD_INT 8
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PPUSH
45925: CALL_OW 69
45929: PUSH
45930: FOR_IN
45931: IFFALSE 45947
// begin SetClass ( i , 1 ) ;
45933: LD_VAR 0 1
45937: PPUSH
45938: LD_INT 1
45940: PPUSH
45941: CALL_OW 336
// end ;
45945: GO 45930
45947: POP
45948: POP
// end ;
45949: PPOPN 1
45951: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
45952: LD_EXP 29
45956: PUSH
45957: LD_EXP 33
45961: AND
45962: PUSH
45963: LD_OWVAR 65
45967: PUSH
45968: LD_INT 7
45970: LESS
45971: AND
45972: IFFALSE 45986
45974: GO 45976
45976: DISABLE
// begin enable ;
45977: ENABLE
// game_speed := 7 ;
45978: LD_ADDR_OWVAR 65
45982: PUSH
45983: LD_INT 7
45985: ST_TO_ADDR
// end ;
45986: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
45987: LD_EXP 29
45991: PUSH
45992: LD_EXP 36
45996: AND
45997: IFFALSE 46199
45999: GO 46001
46001: DISABLE
46002: LD_INT 0
46004: PPUSH
46005: PPUSH
46006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
46007: LD_ADDR_VAR 0 3
46011: PUSH
46012: LD_INT 81
46014: PUSH
46015: LD_OWVAR 2
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 21
46026: PUSH
46027: LD_INT 1
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PPUSH
46038: CALL_OW 69
46042: ST_TO_ADDR
// if not tmp then
46043: LD_VAR 0 3
46047: NOT
46048: IFFALSE 46052
// exit ;
46050: GO 46199
// if tmp > 5 then
46052: LD_VAR 0 3
46056: PUSH
46057: LD_INT 5
46059: GREATER
46060: IFFALSE 46072
// k := 5 else
46062: LD_ADDR_VAR 0 2
46066: PUSH
46067: LD_INT 5
46069: ST_TO_ADDR
46070: GO 46082
// k := tmp ;
46072: LD_ADDR_VAR 0 2
46076: PUSH
46077: LD_VAR 0 3
46081: ST_TO_ADDR
// for i := 1 to k do
46082: LD_ADDR_VAR 0 1
46086: PUSH
46087: DOUBLE
46088: LD_INT 1
46090: DEC
46091: ST_TO_ADDR
46092: LD_VAR 0 2
46096: PUSH
46097: FOR_TO
46098: IFFALSE 46197
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
46100: LD_VAR 0 3
46104: PUSH
46105: LD_VAR 0 1
46109: ARRAY
46110: PPUSH
46111: LD_VAR 0 1
46115: PUSH
46116: LD_INT 4
46118: MOD
46119: PUSH
46120: LD_INT 1
46122: PLUS
46123: PPUSH
46124: CALL_OW 259
46128: PUSH
46129: LD_INT 10
46131: LESS
46132: IFFALSE 46195
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
46134: LD_VAR 0 3
46138: PUSH
46139: LD_VAR 0 1
46143: ARRAY
46144: PPUSH
46145: LD_VAR 0 1
46149: PUSH
46150: LD_INT 4
46152: MOD
46153: PUSH
46154: LD_INT 1
46156: PLUS
46157: PPUSH
46158: LD_VAR 0 3
46162: PUSH
46163: LD_VAR 0 1
46167: ARRAY
46168: PPUSH
46169: LD_VAR 0 1
46173: PUSH
46174: LD_INT 4
46176: MOD
46177: PUSH
46178: LD_INT 1
46180: PLUS
46181: PPUSH
46182: CALL_OW 259
46186: PUSH
46187: LD_INT 1
46189: PLUS
46190: PPUSH
46191: CALL_OW 237
46195: GO 46097
46197: POP
46198: POP
// end ;
46199: PPOPN 3
46201: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
46202: LD_EXP 29
46206: PUSH
46207: LD_EXP 37
46211: AND
46212: IFFALSE 46232
46214: GO 46216
46216: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
46217: LD_INT 4
46219: PPUSH
46220: LD_OWVAR 2
46224: PPUSH
46225: LD_INT 0
46227: PPUSH
46228: CALL_OW 324
46232: END
// every 0 0$1 trigger StreamModeActive and sShovel do
46233: LD_EXP 29
46237: PUSH
46238: LD_EXP 66
46242: AND
46243: IFFALSE 46263
46245: GO 46247
46247: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
46248: LD_INT 19
46250: PPUSH
46251: LD_OWVAR 2
46255: PPUSH
46256: LD_INT 0
46258: PPUSH
46259: CALL_OW 324
46263: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
46264: LD_EXP 29
46268: PUSH
46269: LD_EXP 38
46273: AND
46274: IFFALSE 46376
46276: GO 46278
46278: DISABLE
46279: LD_INT 0
46281: PPUSH
46282: PPUSH
// begin enable ;
46283: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
46284: LD_ADDR_VAR 0 2
46288: PUSH
46289: LD_INT 22
46291: PUSH
46292: LD_OWVAR 2
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 2
46303: PUSH
46304: LD_INT 34
46306: PUSH
46307: LD_INT 11
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 34
46316: PUSH
46317: LD_INT 30
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: LIST
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PPUSH
46333: CALL_OW 69
46337: ST_TO_ADDR
// if not tmp then
46338: LD_VAR 0 2
46342: NOT
46343: IFFALSE 46347
// exit ;
46345: GO 46376
// for i in tmp do
46347: LD_ADDR_VAR 0 1
46351: PUSH
46352: LD_VAR 0 2
46356: PUSH
46357: FOR_IN
46358: IFFALSE 46374
// begin SetLives ( i , 0 ) ;
46360: LD_VAR 0 1
46364: PPUSH
46365: LD_INT 0
46367: PPUSH
46368: CALL_OW 234
// end ;
46372: GO 46357
46374: POP
46375: POP
// end ;
46376: PPOPN 2
46378: END
// every 0 0$1 trigger StreamModeActive and sBunker do
46379: LD_EXP 29
46383: PUSH
46384: LD_EXP 39
46388: AND
46389: IFFALSE 46409
46391: GO 46393
46393: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
46394: LD_INT 32
46396: PPUSH
46397: LD_OWVAR 2
46401: PPUSH
46402: LD_INT 0
46404: PPUSH
46405: CALL_OW 324
46409: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
46410: LD_EXP 29
46414: PUSH
46415: LD_EXP 40
46419: AND
46420: IFFALSE 46601
46422: GO 46424
46424: DISABLE
46425: LD_INT 0
46427: PPUSH
46428: PPUSH
46429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
46430: LD_ADDR_VAR 0 2
46434: PUSH
46435: LD_INT 22
46437: PUSH
46438: LD_OWVAR 2
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 33
46449: PUSH
46450: LD_INT 3
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PPUSH
46461: CALL_OW 69
46465: ST_TO_ADDR
// if not tmp then
46466: LD_VAR 0 2
46470: NOT
46471: IFFALSE 46475
// exit ;
46473: GO 46601
// side := 0 ;
46475: LD_ADDR_VAR 0 3
46479: PUSH
46480: LD_INT 0
46482: ST_TO_ADDR
// for i := 1 to 8 do
46483: LD_ADDR_VAR 0 1
46487: PUSH
46488: DOUBLE
46489: LD_INT 1
46491: DEC
46492: ST_TO_ADDR
46493: LD_INT 8
46495: PUSH
46496: FOR_TO
46497: IFFALSE 46545
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
46499: LD_OWVAR 2
46503: PUSH
46504: LD_VAR 0 1
46508: NONEQUAL
46509: PUSH
46510: LD_OWVAR 2
46514: PPUSH
46515: LD_VAR 0 1
46519: PPUSH
46520: CALL_OW 81
46524: PUSH
46525: LD_INT 2
46527: EQUAL
46528: AND
46529: IFFALSE 46543
// begin side := i ;
46531: LD_ADDR_VAR 0 3
46535: PUSH
46536: LD_VAR 0 1
46540: ST_TO_ADDR
// break ;
46541: GO 46545
// end ;
46543: GO 46496
46545: POP
46546: POP
// if not side then
46547: LD_VAR 0 3
46551: NOT
46552: IFFALSE 46556
// exit ;
46554: GO 46601
// for i := 1 to tmp do
46556: LD_ADDR_VAR 0 1
46560: PUSH
46561: DOUBLE
46562: LD_INT 1
46564: DEC
46565: ST_TO_ADDR
46566: LD_VAR 0 2
46570: PUSH
46571: FOR_TO
46572: IFFALSE 46599
// if Prob ( 60 ) then
46574: LD_INT 60
46576: PPUSH
46577: CALL_OW 13
46581: IFFALSE 46597
// SetSide ( i , side ) ;
46583: LD_VAR 0 1
46587: PPUSH
46588: LD_VAR 0 3
46592: PPUSH
46593: CALL_OW 235
46597: GO 46571
46599: POP
46600: POP
// end ;
46601: PPOPN 3
46603: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
46604: LD_EXP 29
46608: PUSH
46609: LD_EXP 42
46613: AND
46614: IFFALSE 46733
46616: GO 46618
46618: DISABLE
46619: LD_INT 0
46621: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
46622: LD_ADDR_VAR 0 1
46626: PUSH
46627: LD_INT 22
46629: PUSH
46630: LD_OWVAR 2
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 21
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 3
46651: PUSH
46652: LD_INT 23
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: LIST
46670: PPUSH
46671: CALL_OW 69
46675: PUSH
46676: FOR_IN
46677: IFFALSE 46731
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
46679: LD_VAR 0 1
46683: PPUSH
46684: CALL_OW 257
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: LD_INT 2
46694: PUSH
46695: LD_INT 3
46697: PUSH
46698: LD_INT 4
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: IN
46707: IFFALSE 46729
// SetClass ( un , rand ( 1 , 4 ) ) ;
46709: LD_VAR 0 1
46713: PPUSH
46714: LD_INT 1
46716: PPUSH
46717: LD_INT 4
46719: PPUSH
46720: CALL_OW 12
46724: PPUSH
46725: CALL_OW 336
46729: GO 46676
46731: POP
46732: POP
// end ;
46733: PPOPN 1
46735: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
46736: LD_EXP 29
46740: PUSH
46741: LD_EXP 41
46745: AND
46746: IFFALSE 46825
46748: GO 46750
46750: DISABLE
46751: LD_INT 0
46753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
46754: LD_ADDR_VAR 0 1
46758: PUSH
46759: LD_INT 22
46761: PUSH
46762: LD_OWVAR 2
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 21
46773: PUSH
46774: LD_INT 3
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PPUSH
46785: CALL_OW 69
46789: ST_TO_ADDR
// if not tmp then
46790: LD_VAR 0 1
46794: NOT
46795: IFFALSE 46799
// exit ;
46797: GO 46825
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
46799: LD_VAR 0 1
46803: PUSH
46804: LD_INT 1
46806: PPUSH
46807: LD_VAR 0 1
46811: PPUSH
46812: CALL_OW 12
46816: ARRAY
46817: PPUSH
46818: LD_INT 100
46820: PPUSH
46821: CALL_OW 234
// end ;
46825: PPOPN 1
46827: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
46828: LD_EXP 29
46832: PUSH
46833: LD_EXP 43
46837: AND
46838: IFFALSE 46936
46840: GO 46842
46842: DISABLE
46843: LD_INT 0
46845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
46846: LD_ADDR_VAR 0 1
46850: PUSH
46851: LD_INT 22
46853: PUSH
46854: LD_OWVAR 2
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 21
46865: PUSH
46866: LD_INT 1
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PPUSH
46877: CALL_OW 69
46881: ST_TO_ADDR
// if not tmp then
46882: LD_VAR 0 1
46886: NOT
46887: IFFALSE 46891
// exit ;
46889: GO 46936
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
46891: LD_VAR 0 1
46895: PUSH
46896: LD_INT 1
46898: PPUSH
46899: LD_VAR 0 1
46903: PPUSH
46904: CALL_OW 12
46908: ARRAY
46909: PPUSH
46910: LD_INT 1
46912: PPUSH
46913: LD_INT 4
46915: PPUSH
46916: CALL_OW 12
46920: PPUSH
46921: LD_INT 3000
46923: PPUSH
46924: LD_INT 9000
46926: PPUSH
46927: CALL_OW 12
46931: PPUSH
46932: CALL_OW 492
// end ;
46936: PPOPN 1
46938: END
// every 0 0$1 trigger StreamModeActive and sDepot do
46939: LD_EXP 29
46943: PUSH
46944: LD_EXP 44
46948: AND
46949: IFFALSE 46969
46951: GO 46953
46953: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
46954: LD_INT 1
46956: PPUSH
46957: LD_OWVAR 2
46961: PPUSH
46962: LD_INT 0
46964: PPUSH
46965: CALL_OW 324
46969: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
46970: LD_EXP 29
46974: PUSH
46975: LD_EXP 45
46979: AND
46980: IFFALSE 47063
46982: GO 46984
46984: DISABLE
46985: LD_INT 0
46987: PPUSH
46988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
46989: LD_ADDR_VAR 0 2
46993: PUSH
46994: LD_INT 22
46996: PUSH
46997: LD_OWVAR 2
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 21
47008: PUSH
47009: LD_INT 3
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PPUSH
47020: CALL_OW 69
47024: ST_TO_ADDR
// if not tmp then
47025: LD_VAR 0 2
47029: NOT
47030: IFFALSE 47034
// exit ;
47032: GO 47063
// for i in tmp do
47034: LD_ADDR_VAR 0 1
47038: PUSH
47039: LD_VAR 0 2
47043: PUSH
47044: FOR_IN
47045: IFFALSE 47061
// SetBLevel ( i , 10 ) ;
47047: LD_VAR 0 1
47051: PPUSH
47052: LD_INT 10
47054: PPUSH
47055: CALL_OW 241
47059: GO 47044
47061: POP
47062: POP
// end ;
47063: PPOPN 2
47065: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
47066: LD_EXP 29
47070: PUSH
47071: LD_EXP 46
47075: AND
47076: IFFALSE 47187
47078: GO 47080
47080: DISABLE
47081: LD_INT 0
47083: PPUSH
47084: PPUSH
47085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
47086: LD_ADDR_VAR 0 3
47090: PUSH
47091: LD_INT 22
47093: PUSH
47094: LD_OWVAR 2
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 25
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PPUSH
47117: CALL_OW 69
47121: ST_TO_ADDR
// if not tmp then
47122: LD_VAR 0 3
47126: NOT
47127: IFFALSE 47131
// exit ;
47129: GO 47187
// un := tmp [ rand ( 1 , tmp ) ] ;
47131: LD_ADDR_VAR 0 2
47135: PUSH
47136: LD_VAR 0 3
47140: PUSH
47141: LD_INT 1
47143: PPUSH
47144: LD_VAR 0 3
47148: PPUSH
47149: CALL_OW 12
47153: ARRAY
47154: ST_TO_ADDR
// if Crawls ( un ) then
47155: LD_VAR 0 2
47159: PPUSH
47160: CALL_OW 318
47164: IFFALSE 47175
// ComWalk ( un ) ;
47166: LD_VAR 0 2
47170: PPUSH
47171: CALL_OW 138
// SetClass ( un , class_sniper ) ;
47175: LD_VAR 0 2
47179: PPUSH
47180: LD_INT 5
47182: PPUSH
47183: CALL_OW 336
// end ;
47187: PPOPN 3
47189: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
47190: LD_EXP 29
47194: PUSH
47195: LD_EXP 47
47199: AND
47200: PUSH
47201: LD_OWVAR 67
47205: PUSH
47206: LD_INT 3
47208: LESS
47209: AND
47210: IFFALSE 47229
47212: GO 47214
47214: DISABLE
// Difficulty := Difficulty + 1 ;
47215: LD_ADDR_OWVAR 67
47219: PUSH
47220: LD_OWVAR 67
47224: PUSH
47225: LD_INT 1
47227: PLUS
47228: ST_TO_ADDR
47229: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
47230: LD_EXP 29
47234: PUSH
47235: LD_EXP 48
47239: AND
47240: IFFALSE 47343
47242: GO 47244
47244: DISABLE
47245: LD_INT 0
47247: PPUSH
// begin for i := 1 to 5 do
47248: LD_ADDR_VAR 0 1
47252: PUSH
47253: DOUBLE
47254: LD_INT 1
47256: DEC
47257: ST_TO_ADDR
47258: LD_INT 5
47260: PUSH
47261: FOR_TO
47262: IFFALSE 47341
// begin uc_nation := nation_nature ;
47264: LD_ADDR_OWVAR 21
47268: PUSH
47269: LD_INT 0
47271: ST_TO_ADDR
// uc_side := 0 ;
47272: LD_ADDR_OWVAR 20
47276: PUSH
47277: LD_INT 0
47279: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
47280: LD_ADDR_OWVAR 29
47284: PUSH
47285: LD_INT 12
47287: PUSH
47288: LD_INT 12
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: ST_TO_ADDR
// hc_agressivity := 20 ;
47295: LD_ADDR_OWVAR 35
47299: PUSH
47300: LD_INT 20
47302: ST_TO_ADDR
// hc_class := class_tiger ;
47303: LD_ADDR_OWVAR 28
47307: PUSH
47308: LD_INT 14
47310: ST_TO_ADDR
// hc_gallery :=  ;
47311: LD_ADDR_OWVAR 33
47315: PUSH
47316: LD_STRING 
47318: ST_TO_ADDR
// hc_name :=  ;
47319: LD_ADDR_OWVAR 26
47323: PUSH
47324: LD_STRING 
47326: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
47327: CALL_OW 44
47331: PPUSH
47332: LD_INT 0
47334: PPUSH
47335: CALL_OW 51
// end ;
47339: GO 47261
47341: POP
47342: POP
// end ;
47343: PPOPN 1
47345: END
// every 0 0$1 trigger StreamModeActive and sBomb do
47346: LD_EXP 29
47350: PUSH
47351: LD_EXP 49
47355: AND
47356: IFFALSE 47365
47358: GO 47360
47360: DISABLE
// StreamSibBomb ;
47361: CALL 47366 0 0
47365: END
// export function StreamSibBomb ; var i , x , y ; begin
47366: LD_INT 0
47368: PPUSH
47369: PPUSH
47370: PPUSH
47371: PPUSH
// result := false ;
47372: LD_ADDR_VAR 0 1
47376: PUSH
47377: LD_INT 0
47379: ST_TO_ADDR
// for i := 1 to 16 do
47380: LD_ADDR_VAR 0 2
47384: PUSH
47385: DOUBLE
47386: LD_INT 1
47388: DEC
47389: ST_TO_ADDR
47390: LD_INT 16
47392: PUSH
47393: FOR_TO
47394: IFFALSE 47593
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
47396: LD_ADDR_VAR 0 3
47400: PUSH
47401: LD_INT 10
47403: PUSH
47404: LD_INT 20
47406: PUSH
47407: LD_INT 30
47409: PUSH
47410: LD_INT 40
47412: PUSH
47413: LD_INT 50
47415: PUSH
47416: LD_INT 60
47418: PUSH
47419: LD_INT 70
47421: PUSH
47422: LD_INT 80
47424: PUSH
47425: LD_INT 90
47427: PUSH
47428: LD_INT 100
47430: PUSH
47431: LD_INT 110
47433: PUSH
47434: LD_INT 120
47436: PUSH
47437: LD_INT 130
47439: PUSH
47440: LD_INT 140
47442: PUSH
47443: LD_INT 150
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: PPUSH
47466: LD_INT 15
47468: PPUSH
47469: CALL_OW 12
47473: ARRAY
47474: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
47475: LD_ADDR_VAR 0 4
47479: PUSH
47480: LD_INT 10
47482: PUSH
47483: LD_INT 20
47485: PUSH
47486: LD_INT 30
47488: PUSH
47489: LD_INT 40
47491: PUSH
47492: LD_INT 50
47494: PUSH
47495: LD_INT 60
47497: PUSH
47498: LD_INT 70
47500: PUSH
47501: LD_INT 80
47503: PUSH
47504: LD_INT 90
47506: PUSH
47507: LD_INT 100
47509: PUSH
47510: LD_INT 110
47512: PUSH
47513: LD_INT 120
47515: PUSH
47516: LD_INT 130
47518: PUSH
47519: LD_INT 140
47521: PUSH
47522: LD_INT 150
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: PPUSH
47545: LD_INT 15
47547: PPUSH
47548: CALL_OW 12
47552: ARRAY
47553: ST_TO_ADDR
// if ValidHex ( x , y ) then
47554: LD_VAR 0 3
47558: PPUSH
47559: LD_VAR 0 4
47563: PPUSH
47564: CALL_OW 488
47568: IFFALSE 47591
// begin result := [ x , y ] ;
47570: LD_ADDR_VAR 0 1
47574: PUSH
47575: LD_VAR 0 3
47579: PUSH
47580: LD_VAR 0 4
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: ST_TO_ADDR
// break ;
47589: GO 47593
// end ; end ;
47591: GO 47393
47593: POP
47594: POP
// if result then
47595: LD_VAR 0 1
47599: IFFALSE 47659
// begin ToLua ( playSibBomb() ) ;
47601: LD_STRING playSibBomb()
47603: PPUSH
47604: CALL_OW 559
// wait ( 0 0$14 ) ;
47608: LD_INT 490
47610: PPUSH
47611: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
47615: LD_VAR 0 1
47619: PUSH
47620: LD_INT 1
47622: ARRAY
47623: PPUSH
47624: LD_VAR 0 1
47628: PUSH
47629: LD_INT 2
47631: ARRAY
47632: PPUSH
47633: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
47637: LD_VAR 0 1
47641: PUSH
47642: LD_INT 1
47644: ARRAY
47645: PPUSH
47646: LD_VAR 0 1
47650: PUSH
47651: LD_INT 2
47653: ARRAY
47654: PPUSH
47655: CALL_OW 429
// end ; end ;
47659: LD_VAR 0 1
47663: RET
// every 0 0$1 trigger StreamModeActive and sReset do
47664: LD_EXP 29
47668: PUSH
47669: LD_EXP 51
47673: AND
47674: IFFALSE 47686
47676: GO 47678
47678: DISABLE
// YouLost (  ) ;
47679: LD_STRING 
47681: PPUSH
47682: CALL_OW 104
47686: END
// every 0 0$1 trigger StreamModeActive and sFog do
47687: LD_EXP 29
47691: PUSH
47692: LD_EXP 50
47696: AND
47697: IFFALSE 47711
47699: GO 47701
47701: DISABLE
// FogOff ( your_side ) ;
47702: LD_OWVAR 2
47706: PPUSH
47707: CALL_OW 344
47711: END
// every 0 0$1 trigger StreamModeActive and sSun do
47712: LD_EXP 29
47716: PUSH
47717: LD_EXP 52
47721: AND
47722: IFFALSE 47750
47724: GO 47726
47726: DISABLE
// begin solar_recharge_percent := 0 ;
47727: LD_ADDR_OWVAR 79
47731: PUSH
47732: LD_INT 0
47734: ST_TO_ADDR
// wait ( 5 5$00 ) ;
47735: LD_INT 10500
47737: PPUSH
47738: CALL_OW 67
// solar_recharge_percent := 100 ;
47742: LD_ADDR_OWVAR 79
47746: PUSH
47747: LD_INT 100
47749: ST_TO_ADDR
// end ;
47750: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
47751: LD_EXP 29
47755: PUSH
47756: LD_EXP 53
47760: AND
47761: IFFALSE 48000
47763: GO 47765
47765: DISABLE
47766: LD_INT 0
47768: PPUSH
47769: PPUSH
47770: PPUSH
// begin tmp := [ ] ;
47771: LD_ADDR_VAR 0 3
47775: PUSH
47776: EMPTY
47777: ST_TO_ADDR
// for i := 1 to 6 do
47778: LD_ADDR_VAR 0 1
47782: PUSH
47783: DOUBLE
47784: LD_INT 1
47786: DEC
47787: ST_TO_ADDR
47788: LD_INT 6
47790: PUSH
47791: FOR_TO
47792: IFFALSE 47897
// begin uc_nation := nation_nature ;
47794: LD_ADDR_OWVAR 21
47798: PUSH
47799: LD_INT 0
47801: ST_TO_ADDR
// uc_side := 0 ;
47802: LD_ADDR_OWVAR 20
47806: PUSH
47807: LD_INT 0
47809: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
47810: LD_ADDR_OWVAR 29
47814: PUSH
47815: LD_INT 12
47817: PUSH
47818: LD_INT 12
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: ST_TO_ADDR
// hc_agressivity := 20 ;
47825: LD_ADDR_OWVAR 35
47829: PUSH
47830: LD_INT 20
47832: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
47833: LD_ADDR_OWVAR 28
47837: PUSH
47838: LD_INT 17
47840: ST_TO_ADDR
// hc_gallery :=  ;
47841: LD_ADDR_OWVAR 33
47845: PUSH
47846: LD_STRING 
47848: ST_TO_ADDR
// hc_name :=  ;
47849: LD_ADDR_OWVAR 26
47853: PUSH
47854: LD_STRING 
47856: ST_TO_ADDR
// un := CreateHuman ;
47857: LD_ADDR_VAR 0 2
47861: PUSH
47862: CALL_OW 44
47866: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
47867: LD_VAR 0 2
47871: PPUSH
47872: LD_INT 1
47874: PPUSH
47875: CALL_OW 51
// tmp := tmp ^ un ;
47879: LD_ADDR_VAR 0 3
47883: PUSH
47884: LD_VAR 0 3
47888: PUSH
47889: LD_VAR 0 2
47893: ADD
47894: ST_TO_ADDR
// end ;
47895: GO 47791
47897: POP
47898: POP
// repeat wait ( 0 0$1 ) ;
47899: LD_INT 35
47901: PPUSH
47902: CALL_OW 67
// for un in tmp do
47906: LD_ADDR_VAR 0 2
47910: PUSH
47911: LD_VAR 0 3
47915: PUSH
47916: FOR_IN
47917: IFFALSE 47991
// begin if IsDead ( un ) then
47919: LD_VAR 0 2
47923: PPUSH
47924: CALL_OW 301
47928: IFFALSE 47948
// begin tmp := tmp diff un ;
47930: LD_ADDR_VAR 0 3
47934: PUSH
47935: LD_VAR 0 3
47939: PUSH
47940: LD_VAR 0 2
47944: DIFF
47945: ST_TO_ADDR
// continue ;
47946: GO 47916
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
47948: LD_VAR 0 2
47952: PPUSH
47953: LD_INT 3
47955: PUSH
47956: LD_INT 22
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PPUSH
47970: CALL_OW 69
47974: PPUSH
47975: LD_VAR 0 2
47979: PPUSH
47980: CALL_OW 74
47984: PPUSH
47985: CALL_OW 115
// end ;
47989: GO 47916
47991: POP
47992: POP
// until not tmp ;
47993: LD_VAR 0 3
47997: NOT
47998: IFFALSE 47899
// end ;
48000: PPOPN 3
48002: END
// every 0 0$1 trigger StreamModeActive and sTroll do
48003: LD_EXP 29
48007: PUSH
48008: LD_EXP 54
48012: AND
48013: IFFALSE 48067
48015: GO 48017
48017: DISABLE
// begin ToLua ( displayTroll(); ) ;
48018: LD_STRING displayTroll();
48020: PPUSH
48021: CALL_OW 559
// wait ( 3 3$00 ) ;
48025: LD_INT 6300
48027: PPUSH
48028: CALL_OW 67
// ToLua ( hideTroll(); ) ;
48032: LD_STRING hideTroll();
48034: PPUSH
48035: CALL_OW 559
// wait ( 1 1$00 ) ;
48039: LD_INT 2100
48041: PPUSH
48042: CALL_OW 67
// ToLua ( displayTroll(); ) ;
48046: LD_STRING displayTroll();
48048: PPUSH
48049: CALL_OW 559
// wait ( 1 1$00 ) ;
48053: LD_INT 2100
48055: PPUSH
48056: CALL_OW 67
// ToLua ( hideTroll(); ) ;
48060: LD_STRING hideTroll();
48062: PPUSH
48063: CALL_OW 559
// end ;
48067: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
48068: LD_EXP 29
48072: PUSH
48073: LD_EXP 55
48077: AND
48078: IFFALSE 48141
48080: GO 48082
48082: DISABLE
48083: LD_INT 0
48085: PPUSH
// begin p := 0 ;
48086: LD_ADDR_VAR 0 1
48090: PUSH
48091: LD_INT 0
48093: ST_TO_ADDR
// repeat game_speed := 1 ;
48094: LD_ADDR_OWVAR 65
48098: PUSH
48099: LD_INT 1
48101: ST_TO_ADDR
// wait ( 0 0$1 ) ;
48102: LD_INT 35
48104: PPUSH
48105: CALL_OW 67
// p := p + 1 ;
48109: LD_ADDR_VAR 0 1
48113: PUSH
48114: LD_VAR 0 1
48118: PUSH
48119: LD_INT 1
48121: PLUS
48122: ST_TO_ADDR
// until p >= 60 ;
48123: LD_VAR 0 1
48127: PUSH
48128: LD_INT 60
48130: GREATEREQUAL
48131: IFFALSE 48094
// game_speed := 4 ;
48133: LD_ADDR_OWVAR 65
48137: PUSH
48138: LD_INT 4
48140: ST_TO_ADDR
// end ;
48141: PPOPN 1
48143: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
48144: LD_EXP 29
48148: PUSH
48149: LD_EXP 56
48153: AND
48154: IFFALSE 48300
48156: GO 48158
48158: DISABLE
48159: LD_INT 0
48161: PPUSH
48162: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48163: LD_ADDR_VAR 0 1
48167: PUSH
48168: LD_INT 22
48170: PUSH
48171: LD_OWVAR 2
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 2
48182: PUSH
48183: LD_INT 30
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 30
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: LIST
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PPUSH
48212: CALL_OW 69
48216: ST_TO_ADDR
// if not depot then
48217: LD_VAR 0 1
48221: NOT
48222: IFFALSE 48226
// exit ;
48224: GO 48300
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
48226: LD_ADDR_VAR 0 2
48230: PUSH
48231: LD_VAR 0 1
48235: PUSH
48236: LD_INT 1
48238: PPUSH
48239: LD_VAR 0 1
48243: PPUSH
48244: CALL_OW 12
48248: ARRAY
48249: PPUSH
48250: CALL_OW 274
48254: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
48255: LD_VAR 0 2
48259: PPUSH
48260: LD_INT 1
48262: PPUSH
48263: LD_INT 0
48265: PPUSH
48266: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
48270: LD_VAR 0 2
48274: PPUSH
48275: LD_INT 2
48277: PPUSH
48278: LD_INT 0
48280: PPUSH
48281: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
48285: LD_VAR 0 2
48289: PPUSH
48290: LD_INT 3
48292: PPUSH
48293: LD_INT 0
48295: PPUSH
48296: CALL_OW 277
// end ;
48300: PPOPN 2
48302: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
48303: LD_EXP 29
48307: PUSH
48308: LD_EXP 57
48312: AND
48313: IFFALSE 48410
48315: GO 48317
48317: DISABLE
48318: LD_INT 0
48320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
48321: LD_ADDR_VAR 0 1
48325: PUSH
48326: LD_INT 22
48328: PUSH
48329: LD_OWVAR 2
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 21
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 3
48350: PUSH
48351: LD_INT 23
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: LIST
48369: PPUSH
48370: CALL_OW 69
48374: ST_TO_ADDR
// if not tmp then
48375: LD_VAR 0 1
48379: NOT
48380: IFFALSE 48384
// exit ;
48382: GO 48410
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
48384: LD_VAR 0 1
48388: PUSH
48389: LD_INT 1
48391: PPUSH
48392: LD_VAR 0 1
48396: PPUSH
48397: CALL_OW 12
48401: ARRAY
48402: PPUSH
48403: LD_INT 200
48405: PPUSH
48406: CALL_OW 234
// end ;
48410: PPOPN 1
48412: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
48413: LD_EXP 29
48417: PUSH
48418: LD_EXP 58
48422: AND
48423: IFFALSE 48502
48425: GO 48427
48427: DISABLE
48428: LD_INT 0
48430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
48431: LD_ADDR_VAR 0 1
48435: PUSH
48436: LD_INT 22
48438: PUSH
48439: LD_OWVAR 2
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 21
48450: PUSH
48451: LD_INT 2
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PPUSH
48462: CALL_OW 69
48466: ST_TO_ADDR
// if not tmp then
48467: LD_VAR 0 1
48471: NOT
48472: IFFALSE 48476
// exit ;
48474: GO 48502
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
48476: LD_VAR 0 1
48480: PUSH
48481: LD_INT 1
48483: PPUSH
48484: LD_VAR 0 1
48488: PPUSH
48489: CALL_OW 12
48493: ARRAY
48494: PPUSH
48495: LD_INT 60
48497: PPUSH
48498: CALL_OW 234
// end ;
48502: PPOPN 1
48504: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
48505: LD_EXP 29
48509: PUSH
48510: LD_EXP 59
48514: AND
48515: IFFALSE 48614
48517: GO 48519
48519: DISABLE
48520: LD_INT 0
48522: PPUSH
48523: PPUSH
// begin enable ;
48524: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
48525: LD_ADDR_VAR 0 1
48529: PUSH
48530: LD_INT 22
48532: PUSH
48533: LD_OWVAR 2
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 61
48544: PUSH
48545: EMPTY
48546: LIST
48547: PUSH
48548: LD_INT 33
48550: PUSH
48551: LD_INT 2
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: LIST
48562: PPUSH
48563: CALL_OW 69
48567: ST_TO_ADDR
// if not tmp then
48568: LD_VAR 0 1
48572: NOT
48573: IFFALSE 48577
// exit ;
48575: GO 48614
// for i in tmp do
48577: LD_ADDR_VAR 0 2
48581: PUSH
48582: LD_VAR 0 1
48586: PUSH
48587: FOR_IN
48588: IFFALSE 48612
// if IsControledBy ( i ) then
48590: LD_VAR 0 2
48594: PPUSH
48595: CALL_OW 312
48599: IFFALSE 48610
// ComUnlink ( i ) ;
48601: LD_VAR 0 2
48605: PPUSH
48606: CALL_OW 136
48610: GO 48587
48612: POP
48613: POP
// end ;
48614: PPOPN 2
48616: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
48617: LD_EXP 29
48621: PUSH
48622: LD_EXP 60
48626: AND
48627: IFFALSE 48767
48629: GO 48631
48631: DISABLE
48632: LD_INT 0
48634: PPUSH
48635: PPUSH
// begin ToLua ( displayPowell(); ) ;
48636: LD_STRING displayPowell();
48638: PPUSH
48639: CALL_OW 559
// uc_side := 0 ;
48643: LD_ADDR_OWVAR 20
48647: PUSH
48648: LD_INT 0
48650: ST_TO_ADDR
// uc_nation := 2 ;
48651: LD_ADDR_OWVAR 21
48655: PUSH
48656: LD_INT 2
48658: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
48659: LD_ADDR_OWVAR 37
48663: PUSH
48664: LD_INT 14
48666: ST_TO_ADDR
// vc_engine := engine_siberite ;
48667: LD_ADDR_OWVAR 39
48671: PUSH
48672: LD_INT 3
48674: ST_TO_ADDR
// vc_control := control_apeman ;
48675: LD_ADDR_OWVAR 38
48679: PUSH
48680: LD_INT 5
48682: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
48683: LD_ADDR_OWVAR 40
48687: PUSH
48688: LD_INT 29
48690: ST_TO_ADDR
// un := CreateVehicle ;
48691: LD_ADDR_VAR 0 2
48695: PUSH
48696: CALL_OW 45
48700: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
48701: LD_VAR 0 2
48705: PPUSH
48706: LD_INT 1
48708: PPUSH
48709: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
48713: LD_INT 35
48715: PPUSH
48716: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
48720: LD_VAR 0 2
48724: PPUSH
48725: LD_INT 22
48727: PUSH
48728: LD_OWVAR 2
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PPUSH
48737: CALL_OW 69
48741: PPUSH
48742: LD_VAR 0 2
48746: PPUSH
48747: CALL_OW 74
48751: PPUSH
48752: CALL_OW 115
// until IsDead ( un ) ;
48756: LD_VAR 0 2
48760: PPUSH
48761: CALL_OW 301
48765: IFFALSE 48713
// end ;
48767: PPOPN 2
48769: END
// every 0 0$1 trigger StreamModeActive and sStu do
48770: LD_EXP 29
48774: PUSH
48775: LD_EXP 68
48779: AND
48780: IFFALSE 48796
48782: GO 48784
48784: DISABLE
// begin ToLua ( displayStucuk(); ) ;
48785: LD_STRING displayStucuk();
48787: PPUSH
48788: CALL_OW 559
// ResetFog ;
48792: CALL_OW 335
// end ;
48796: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
48797: LD_EXP 29
48801: PUSH
48802: LD_EXP 61
48806: AND
48807: IFFALSE 48948
48809: GO 48811
48811: DISABLE
48812: LD_INT 0
48814: PPUSH
48815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
48816: LD_ADDR_VAR 0 2
48820: PUSH
48821: LD_INT 22
48823: PUSH
48824: LD_OWVAR 2
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 21
48835: PUSH
48836: LD_INT 1
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PPUSH
48847: CALL_OW 69
48851: ST_TO_ADDR
// if not tmp then
48852: LD_VAR 0 2
48856: NOT
48857: IFFALSE 48861
// exit ;
48859: GO 48948
// un := tmp [ rand ( 1 , tmp ) ] ;
48861: LD_ADDR_VAR 0 1
48865: PUSH
48866: LD_VAR 0 2
48870: PUSH
48871: LD_INT 1
48873: PPUSH
48874: LD_VAR 0 2
48878: PPUSH
48879: CALL_OW 12
48883: ARRAY
48884: ST_TO_ADDR
// SetSide ( un , 0 ) ;
48885: LD_VAR 0 1
48889: PPUSH
48890: LD_INT 0
48892: PPUSH
48893: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
48897: LD_VAR 0 1
48901: PPUSH
48902: LD_OWVAR 3
48906: PUSH
48907: LD_VAR 0 1
48911: DIFF
48912: PPUSH
48913: LD_VAR 0 1
48917: PPUSH
48918: CALL_OW 74
48922: PPUSH
48923: CALL_OW 115
// wait ( 0 0$20 ) ;
48927: LD_INT 700
48929: PPUSH
48930: CALL_OW 67
// SetSide ( un , your_side ) ;
48934: LD_VAR 0 1
48938: PPUSH
48939: LD_OWVAR 2
48943: PPUSH
48944: CALL_OW 235
// end ;
48948: PPOPN 2
48950: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
48951: LD_EXP 29
48955: PUSH
48956: LD_EXP 62
48960: AND
48961: IFFALSE 49067
48963: GO 48965
48965: DISABLE
48966: LD_INT 0
48968: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48969: LD_ADDR_VAR 0 1
48973: PUSH
48974: LD_INT 22
48976: PUSH
48977: LD_OWVAR 2
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: LD_INT 30
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 30
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: LIST
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PPUSH
49018: CALL_OW 69
49022: ST_TO_ADDR
// if not depot then
49023: LD_VAR 0 1
49027: NOT
49028: IFFALSE 49032
// exit ;
49030: GO 49067
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
49032: LD_VAR 0 1
49036: PUSH
49037: LD_INT 1
49039: ARRAY
49040: PPUSH
49041: CALL_OW 250
49045: PPUSH
49046: LD_VAR 0 1
49050: PUSH
49051: LD_INT 1
49053: ARRAY
49054: PPUSH
49055: CALL_OW 251
49059: PPUSH
49060: LD_INT 70
49062: PPUSH
49063: CALL_OW 495
// end ;
49067: PPOPN 1
49069: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
49070: LD_EXP 29
49074: PUSH
49075: LD_EXP 63
49079: AND
49080: IFFALSE 49291
49082: GO 49084
49084: DISABLE
49085: LD_INT 0
49087: PPUSH
49088: PPUSH
49089: PPUSH
49090: PPUSH
49091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
49092: LD_ADDR_VAR 0 5
49096: PUSH
49097: LD_INT 22
49099: PUSH
49100: LD_OWVAR 2
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 21
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PPUSH
49123: CALL_OW 69
49127: ST_TO_ADDR
// if not tmp then
49128: LD_VAR 0 5
49132: NOT
49133: IFFALSE 49137
// exit ;
49135: GO 49291
// for i in tmp do
49137: LD_ADDR_VAR 0 1
49141: PUSH
49142: LD_VAR 0 5
49146: PUSH
49147: FOR_IN
49148: IFFALSE 49289
// begin d := rand ( 0 , 5 ) ;
49150: LD_ADDR_VAR 0 4
49154: PUSH
49155: LD_INT 0
49157: PPUSH
49158: LD_INT 5
49160: PPUSH
49161: CALL_OW 12
49165: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
49166: LD_ADDR_VAR 0 2
49170: PUSH
49171: LD_VAR 0 1
49175: PPUSH
49176: CALL_OW 250
49180: PPUSH
49181: LD_VAR 0 4
49185: PPUSH
49186: LD_INT 3
49188: PPUSH
49189: LD_INT 12
49191: PPUSH
49192: CALL_OW 12
49196: PPUSH
49197: CALL_OW 272
49201: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
49202: LD_ADDR_VAR 0 3
49206: PUSH
49207: LD_VAR 0 1
49211: PPUSH
49212: CALL_OW 251
49216: PPUSH
49217: LD_VAR 0 4
49221: PPUSH
49222: LD_INT 3
49224: PPUSH
49225: LD_INT 12
49227: PPUSH
49228: CALL_OW 12
49232: PPUSH
49233: CALL_OW 273
49237: ST_TO_ADDR
// if ValidHex ( x , y ) then
49238: LD_VAR 0 2
49242: PPUSH
49243: LD_VAR 0 3
49247: PPUSH
49248: CALL_OW 488
49252: IFFALSE 49287
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
49254: LD_VAR 0 1
49258: PPUSH
49259: LD_VAR 0 2
49263: PPUSH
49264: LD_VAR 0 3
49268: PPUSH
49269: LD_INT 3
49271: PPUSH
49272: LD_INT 6
49274: PPUSH
49275: CALL_OW 12
49279: PPUSH
49280: LD_INT 1
49282: PPUSH
49283: CALL_OW 483
// end ;
49287: GO 49147
49289: POP
49290: POP
// end ;
49291: PPOPN 5
49293: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
49294: LD_EXP 29
49298: PUSH
49299: LD_EXP 64
49303: AND
49304: IFFALSE 49398
49306: GO 49308
49308: DISABLE
49309: LD_INT 0
49311: PPUSH
49312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
49313: LD_ADDR_VAR 0 2
49317: PUSH
49318: LD_INT 22
49320: PUSH
49321: LD_OWVAR 2
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 32
49332: PUSH
49333: LD_INT 1
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 21
49342: PUSH
49343: LD_INT 2
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: LIST
49354: PPUSH
49355: CALL_OW 69
49359: ST_TO_ADDR
// if not tmp then
49360: LD_VAR 0 2
49364: NOT
49365: IFFALSE 49369
// exit ;
49367: GO 49398
// for i in tmp do
49369: LD_ADDR_VAR 0 1
49373: PUSH
49374: LD_VAR 0 2
49378: PUSH
49379: FOR_IN
49380: IFFALSE 49396
// SetFuel ( i , 0 ) ;
49382: LD_VAR 0 1
49386: PPUSH
49387: LD_INT 0
49389: PPUSH
49390: CALL_OW 240
49394: GO 49379
49396: POP
49397: POP
// end ;
49398: PPOPN 2
49400: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
49401: LD_EXP 29
49405: PUSH
49406: LD_EXP 65
49410: AND
49411: IFFALSE 49477
49413: GO 49415
49415: DISABLE
49416: LD_INT 0
49418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
49419: LD_ADDR_VAR 0 1
49423: PUSH
49424: LD_INT 22
49426: PUSH
49427: LD_OWVAR 2
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 30
49438: PUSH
49439: LD_INT 29
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PPUSH
49450: CALL_OW 69
49454: ST_TO_ADDR
// if not tmp then
49455: LD_VAR 0 1
49459: NOT
49460: IFFALSE 49464
// exit ;
49462: GO 49477
// DestroyUnit ( tmp [ 1 ] ) ;
49464: LD_VAR 0 1
49468: PUSH
49469: LD_INT 1
49471: ARRAY
49472: PPUSH
49473: CALL_OW 65
// end ;
49477: PPOPN 1
49479: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
49480: LD_EXP 29
49484: PUSH
49485: LD_EXP 67
49489: AND
49490: IFFALSE 49619
49492: GO 49494
49494: DISABLE
49495: LD_INT 0
49497: PPUSH
// begin uc_side := 0 ;
49498: LD_ADDR_OWVAR 20
49502: PUSH
49503: LD_INT 0
49505: ST_TO_ADDR
// uc_nation := nation_arabian ;
49506: LD_ADDR_OWVAR 21
49510: PUSH
49511: LD_INT 2
49513: ST_TO_ADDR
// hc_gallery :=  ;
49514: LD_ADDR_OWVAR 33
49518: PUSH
49519: LD_STRING 
49521: ST_TO_ADDR
// hc_name :=  ;
49522: LD_ADDR_OWVAR 26
49526: PUSH
49527: LD_STRING 
49529: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
49530: LD_INT 1
49532: PPUSH
49533: LD_INT 11
49535: PPUSH
49536: LD_INT 10
49538: PPUSH
49539: CALL_OW 380
// un := CreateHuman ;
49543: LD_ADDR_VAR 0 1
49547: PUSH
49548: CALL_OW 44
49552: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
49553: LD_VAR 0 1
49557: PPUSH
49558: LD_INT 1
49560: PPUSH
49561: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
49565: LD_INT 35
49567: PPUSH
49568: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
49572: LD_VAR 0 1
49576: PPUSH
49577: LD_INT 22
49579: PUSH
49580: LD_OWVAR 2
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PPUSH
49589: CALL_OW 69
49593: PPUSH
49594: LD_VAR 0 1
49598: PPUSH
49599: CALL_OW 74
49603: PPUSH
49604: CALL_OW 115
// until IsDead ( un ) ;
49608: LD_VAR 0 1
49612: PPUSH
49613: CALL_OW 301
49617: IFFALSE 49565
// end ;
49619: PPOPN 1
49621: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
49622: LD_EXP 29
49626: PUSH
49627: LD_EXP 69
49631: AND
49632: IFFALSE 49644
49634: GO 49636
49636: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
49637: LD_STRING earthquake(getX(game), 0, 32)
49639: PPUSH
49640: CALL_OW 559
49644: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
49645: LD_EXP 29
49649: PUSH
49650: LD_EXP 70
49654: AND
49655: IFFALSE 49746
49657: GO 49659
49659: DISABLE
49660: LD_INT 0
49662: PPUSH
// begin enable ;
49663: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
49664: LD_ADDR_VAR 0 1
49668: PUSH
49669: LD_INT 22
49671: PUSH
49672: LD_OWVAR 2
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 21
49683: PUSH
49684: LD_INT 2
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 33
49693: PUSH
49694: LD_INT 3
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: LIST
49705: PPUSH
49706: CALL_OW 69
49710: ST_TO_ADDR
// if not tmp then
49711: LD_VAR 0 1
49715: NOT
49716: IFFALSE 49720
// exit ;
49718: GO 49746
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
49720: LD_VAR 0 1
49724: PUSH
49725: LD_INT 1
49727: PPUSH
49728: LD_VAR 0 1
49732: PPUSH
49733: CALL_OW 12
49737: ARRAY
49738: PPUSH
49739: LD_INT 1
49741: PPUSH
49742: CALL_OW 234
// end ;
49746: PPOPN 1
49748: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
49749: LD_EXP 29
49753: PUSH
49754: LD_EXP 71
49758: AND
49759: IFFALSE 49900
49761: GO 49763
49763: DISABLE
49764: LD_INT 0
49766: PPUSH
49767: PPUSH
49768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
49769: LD_ADDR_VAR 0 3
49773: PUSH
49774: LD_INT 22
49776: PUSH
49777: LD_OWVAR 2
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 25
49788: PUSH
49789: LD_INT 1
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PPUSH
49800: CALL_OW 69
49804: ST_TO_ADDR
// if not tmp then
49805: LD_VAR 0 3
49809: NOT
49810: IFFALSE 49814
// exit ;
49812: GO 49900
// un := tmp [ rand ( 1 , tmp ) ] ;
49814: LD_ADDR_VAR 0 2
49818: PUSH
49819: LD_VAR 0 3
49823: PUSH
49824: LD_INT 1
49826: PPUSH
49827: LD_VAR 0 3
49831: PPUSH
49832: CALL_OW 12
49836: ARRAY
49837: ST_TO_ADDR
// if Crawls ( un ) then
49838: LD_VAR 0 2
49842: PPUSH
49843: CALL_OW 318
49847: IFFALSE 49858
// ComWalk ( un ) ;
49849: LD_VAR 0 2
49853: PPUSH
49854: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
49858: LD_VAR 0 2
49862: PPUSH
49863: LD_INT 9
49865: PPUSH
49866: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
49870: LD_INT 28
49872: PPUSH
49873: LD_OWVAR 2
49877: PPUSH
49878: LD_INT 2
49880: PPUSH
49881: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
49885: LD_INT 29
49887: PPUSH
49888: LD_OWVAR 2
49892: PPUSH
49893: LD_INT 2
49895: PPUSH
49896: CALL_OW 322
// end ;
49900: PPOPN 3
49902: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
49903: LD_EXP 29
49907: PUSH
49908: LD_EXP 72
49912: AND
49913: IFFALSE 50024
49915: GO 49917
49917: DISABLE
49918: LD_INT 0
49920: PPUSH
49921: PPUSH
49922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
49923: LD_ADDR_VAR 0 3
49927: PUSH
49928: LD_INT 22
49930: PUSH
49931: LD_OWVAR 2
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 25
49942: PUSH
49943: LD_INT 1
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PPUSH
49954: CALL_OW 69
49958: ST_TO_ADDR
// if not tmp then
49959: LD_VAR 0 3
49963: NOT
49964: IFFALSE 49968
// exit ;
49966: GO 50024
// un := tmp [ rand ( 1 , tmp ) ] ;
49968: LD_ADDR_VAR 0 2
49972: PUSH
49973: LD_VAR 0 3
49977: PUSH
49978: LD_INT 1
49980: PPUSH
49981: LD_VAR 0 3
49985: PPUSH
49986: CALL_OW 12
49990: ARRAY
49991: ST_TO_ADDR
// if Crawls ( un ) then
49992: LD_VAR 0 2
49996: PPUSH
49997: CALL_OW 318
50001: IFFALSE 50012
// ComWalk ( un ) ;
50003: LD_VAR 0 2
50007: PPUSH
50008: CALL_OW 138
// SetClass ( un , class_mortar ) ;
50012: LD_VAR 0 2
50016: PPUSH
50017: LD_INT 8
50019: PPUSH
50020: CALL_OW 336
// end ;
50024: PPOPN 3
50026: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
50027: LD_EXP 29
50031: PUSH
50032: LD_EXP 73
50036: AND
50037: IFFALSE 50181
50039: GO 50041
50041: DISABLE
50042: LD_INT 0
50044: PPUSH
50045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
50046: LD_ADDR_VAR 0 2
50050: PUSH
50051: LD_INT 22
50053: PUSH
50054: LD_OWVAR 2
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 21
50065: PUSH
50066: LD_INT 2
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 2
50075: PUSH
50076: LD_INT 34
50078: PUSH
50079: LD_INT 12
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 34
50088: PUSH
50089: LD_INT 51
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 34
50098: PUSH
50099: LD_INT 32
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: LIST
50116: PPUSH
50117: CALL_OW 69
50121: ST_TO_ADDR
// if not tmp then
50122: LD_VAR 0 2
50126: NOT
50127: IFFALSE 50131
// exit ;
50129: GO 50181
// for i in tmp do
50131: LD_ADDR_VAR 0 1
50135: PUSH
50136: LD_VAR 0 2
50140: PUSH
50141: FOR_IN
50142: IFFALSE 50179
// if GetCargo ( i , mat_artifact ) = 0 then
50144: LD_VAR 0 1
50148: PPUSH
50149: LD_INT 4
50151: PPUSH
50152: CALL_OW 289
50156: PUSH
50157: LD_INT 0
50159: EQUAL
50160: IFFALSE 50177
// SetCargo ( i , mat_siberit , 100 ) ;
50162: LD_VAR 0 1
50166: PPUSH
50167: LD_INT 3
50169: PPUSH
50170: LD_INT 100
50172: PPUSH
50173: CALL_OW 290
50177: GO 50141
50179: POP
50180: POP
// end ;
50181: PPOPN 2
50183: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
50184: LD_EXP 29
50188: PUSH
50189: LD_EXP 74
50193: AND
50194: IFFALSE 50377
50196: GO 50198
50198: DISABLE
50199: LD_INT 0
50201: PPUSH
50202: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
50203: LD_ADDR_VAR 0 2
50207: PUSH
50208: LD_INT 22
50210: PUSH
50211: LD_OWVAR 2
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PPUSH
50220: CALL_OW 69
50224: ST_TO_ADDR
// if not tmp then
50225: LD_VAR 0 2
50229: NOT
50230: IFFALSE 50234
// exit ;
50232: GO 50377
// for i := 1 to 2 do
50234: LD_ADDR_VAR 0 1
50238: PUSH
50239: DOUBLE
50240: LD_INT 1
50242: DEC
50243: ST_TO_ADDR
50244: LD_INT 2
50246: PUSH
50247: FOR_TO
50248: IFFALSE 50375
// begin uc_side := your_side ;
50250: LD_ADDR_OWVAR 20
50254: PUSH
50255: LD_OWVAR 2
50259: ST_TO_ADDR
// uc_nation := nation_american ;
50260: LD_ADDR_OWVAR 21
50264: PUSH
50265: LD_INT 1
50267: ST_TO_ADDR
// vc_chassis := us_morphling ;
50268: LD_ADDR_OWVAR 37
50272: PUSH
50273: LD_INT 5
50275: ST_TO_ADDR
// vc_engine := engine_siberite ;
50276: LD_ADDR_OWVAR 39
50280: PUSH
50281: LD_INT 3
50283: ST_TO_ADDR
// vc_control := control_computer ;
50284: LD_ADDR_OWVAR 38
50288: PUSH
50289: LD_INT 3
50291: ST_TO_ADDR
// vc_weapon := us_double_laser ;
50292: LD_ADDR_OWVAR 40
50296: PUSH
50297: LD_INT 10
50299: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
50300: LD_VAR 0 2
50304: PUSH
50305: LD_INT 1
50307: ARRAY
50308: PPUSH
50309: CALL_OW 310
50313: NOT
50314: IFFALSE 50361
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
50316: CALL_OW 45
50320: PPUSH
50321: LD_VAR 0 2
50325: PUSH
50326: LD_INT 1
50328: ARRAY
50329: PPUSH
50330: CALL_OW 250
50334: PPUSH
50335: LD_VAR 0 2
50339: PUSH
50340: LD_INT 1
50342: ARRAY
50343: PPUSH
50344: CALL_OW 251
50348: PPUSH
50349: LD_INT 12
50351: PPUSH
50352: LD_INT 1
50354: PPUSH
50355: CALL_OW 50
50359: GO 50373
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
50361: CALL_OW 45
50365: PPUSH
50366: LD_INT 1
50368: PPUSH
50369: CALL_OW 51
// end ;
50373: GO 50247
50375: POP
50376: POP
// end ;
50377: PPOPN 2
50379: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
50380: LD_EXP 29
50384: PUSH
50385: LD_EXP 75
50389: AND
50390: IFFALSE 50612
50392: GO 50394
50394: DISABLE
50395: LD_INT 0
50397: PPUSH
50398: PPUSH
50399: PPUSH
50400: PPUSH
50401: PPUSH
50402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
50403: LD_ADDR_VAR 0 6
50407: PUSH
50408: LD_INT 22
50410: PUSH
50411: LD_OWVAR 2
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 21
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 3
50432: PUSH
50433: LD_INT 23
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: LIST
50451: PPUSH
50452: CALL_OW 69
50456: ST_TO_ADDR
// if not tmp then
50457: LD_VAR 0 6
50461: NOT
50462: IFFALSE 50466
// exit ;
50464: GO 50612
// s1 := rand ( 1 , 4 ) ;
50466: LD_ADDR_VAR 0 2
50470: PUSH
50471: LD_INT 1
50473: PPUSH
50474: LD_INT 4
50476: PPUSH
50477: CALL_OW 12
50481: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
50482: LD_ADDR_VAR 0 4
50486: PUSH
50487: LD_VAR 0 6
50491: PUSH
50492: LD_INT 1
50494: ARRAY
50495: PPUSH
50496: LD_VAR 0 2
50500: PPUSH
50501: CALL_OW 259
50505: ST_TO_ADDR
// if s1 = 1 then
50506: LD_VAR 0 2
50510: PUSH
50511: LD_INT 1
50513: EQUAL
50514: IFFALSE 50534
// s2 := rand ( 2 , 4 ) else
50516: LD_ADDR_VAR 0 3
50520: PUSH
50521: LD_INT 2
50523: PPUSH
50524: LD_INT 4
50526: PPUSH
50527: CALL_OW 12
50531: ST_TO_ADDR
50532: GO 50542
// s2 := 1 ;
50534: LD_ADDR_VAR 0 3
50538: PUSH
50539: LD_INT 1
50541: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
50542: LD_ADDR_VAR 0 5
50546: PUSH
50547: LD_VAR 0 6
50551: PUSH
50552: LD_INT 1
50554: ARRAY
50555: PPUSH
50556: LD_VAR 0 3
50560: PPUSH
50561: CALL_OW 259
50565: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
50566: LD_VAR 0 6
50570: PUSH
50571: LD_INT 1
50573: ARRAY
50574: PPUSH
50575: LD_VAR 0 2
50579: PPUSH
50580: LD_VAR 0 5
50584: PPUSH
50585: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
50589: LD_VAR 0 6
50593: PUSH
50594: LD_INT 1
50596: ARRAY
50597: PPUSH
50598: LD_VAR 0 3
50602: PPUSH
50603: LD_VAR 0 4
50607: PPUSH
50608: CALL_OW 237
// end ;
50612: PPOPN 6
50614: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
50615: LD_EXP 29
50619: PUSH
50620: LD_EXP 76
50624: AND
50625: IFFALSE 50704
50627: GO 50629
50629: DISABLE
50630: LD_INT 0
50632: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
50633: LD_ADDR_VAR 0 1
50637: PUSH
50638: LD_INT 22
50640: PUSH
50641: LD_OWVAR 2
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 30
50652: PUSH
50653: LD_INT 3
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PPUSH
50664: CALL_OW 69
50668: ST_TO_ADDR
// if not tmp then
50669: LD_VAR 0 1
50673: NOT
50674: IFFALSE 50678
// exit ;
50676: GO 50704
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
50678: LD_VAR 0 1
50682: PUSH
50683: LD_INT 1
50685: PPUSH
50686: LD_VAR 0 1
50690: PPUSH
50691: CALL_OW 12
50695: ARRAY
50696: PPUSH
50697: LD_INT 1
50699: PPUSH
50700: CALL_OW 234
// end ;
50704: PPOPN 1
50706: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
50707: LD_EXP 29
50711: PUSH
50712: LD_EXP 77
50716: AND
50717: IFFALSE 50829
50719: GO 50721
50721: DISABLE
50722: LD_INT 0
50724: PPUSH
50725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
50726: LD_ADDR_VAR 0 2
50730: PUSH
50731: LD_INT 22
50733: PUSH
50734: LD_OWVAR 2
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 2
50745: PUSH
50746: LD_INT 30
50748: PUSH
50749: LD_INT 27
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 30
50758: PUSH
50759: LD_INT 26
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 30
50768: PUSH
50769: LD_INT 28
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PPUSH
50786: CALL_OW 69
50790: ST_TO_ADDR
// if not tmp then
50791: LD_VAR 0 2
50795: NOT
50796: IFFALSE 50800
// exit ;
50798: GO 50829
// for i in tmp do
50800: LD_ADDR_VAR 0 1
50804: PUSH
50805: LD_VAR 0 2
50809: PUSH
50810: FOR_IN
50811: IFFALSE 50827
// SetLives ( i , 1 ) ;
50813: LD_VAR 0 1
50817: PPUSH
50818: LD_INT 1
50820: PPUSH
50821: CALL_OW 234
50825: GO 50810
50827: POP
50828: POP
// end ;
50829: PPOPN 2
50831: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
50832: LD_EXP 29
50836: PUSH
50837: LD_EXP 78
50841: AND
50842: IFFALSE 51116
50844: GO 50846
50846: DISABLE
50847: LD_INT 0
50849: PPUSH
50850: PPUSH
50851: PPUSH
// begin i := rand ( 1 , 7 ) ;
50852: LD_ADDR_VAR 0 1
50856: PUSH
50857: LD_INT 1
50859: PPUSH
50860: LD_INT 7
50862: PPUSH
50863: CALL_OW 12
50867: ST_TO_ADDR
// case i of 1 :
50868: LD_VAR 0 1
50872: PUSH
50873: LD_INT 1
50875: DOUBLE
50876: EQUAL
50877: IFTRUE 50881
50879: GO 50891
50881: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
50882: LD_STRING earthquake(getX(game), 0, 32)
50884: PPUSH
50885: CALL_OW 559
50889: GO 51116
50891: LD_INT 2
50893: DOUBLE
50894: EQUAL
50895: IFTRUE 50899
50897: GO 50913
50899: POP
// begin ToLua ( displayStucuk(); ) ;
50900: LD_STRING displayStucuk();
50902: PPUSH
50903: CALL_OW 559
// ResetFog ;
50907: CALL_OW 335
// end ; 3 :
50911: GO 51116
50913: LD_INT 3
50915: DOUBLE
50916: EQUAL
50917: IFTRUE 50921
50919: GO 51025
50921: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
50922: LD_ADDR_VAR 0 2
50926: PUSH
50927: LD_INT 22
50929: PUSH
50930: LD_OWVAR 2
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 25
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PPUSH
50953: CALL_OW 69
50957: ST_TO_ADDR
// if not tmp then
50958: LD_VAR 0 2
50962: NOT
50963: IFFALSE 50967
// exit ;
50965: GO 51116
// un := tmp [ rand ( 1 , tmp ) ] ;
50967: LD_ADDR_VAR 0 3
50971: PUSH
50972: LD_VAR 0 2
50976: PUSH
50977: LD_INT 1
50979: PPUSH
50980: LD_VAR 0 2
50984: PPUSH
50985: CALL_OW 12
50989: ARRAY
50990: ST_TO_ADDR
// if Crawls ( un ) then
50991: LD_VAR 0 3
50995: PPUSH
50996: CALL_OW 318
51000: IFFALSE 51011
// ComWalk ( un ) ;
51002: LD_VAR 0 3
51006: PPUSH
51007: CALL_OW 138
// SetClass ( un , class_mortar ) ;
51011: LD_VAR 0 3
51015: PPUSH
51016: LD_INT 8
51018: PPUSH
51019: CALL_OW 336
// end ; 4 :
51023: GO 51116
51025: LD_INT 4
51027: DOUBLE
51028: EQUAL
51029: IFTRUE 51033
51031: GO 51094
51033: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
51034: LD_ADDR_VAR 0 2
51038: PUSH
51039: LD_INT 22
51041: PUSH
51042: LD_OWVAR 2
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 30
51053: PUSH
51054: LD_INT 29
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PPUSH
51065: CALL_OW 69
51069: ST_TO_ADDR
// if not tmp then
51070: LD_VAR 0 2
51074: NOT
51075: IFFALSE 51079
// exit ;
51077: GO 51116
// DestroyUnit ( tmp [ 1 ] ) ;
51079: LD_VAR 0 2
51083: PUSH
51084: LD_INT 1
51086: ARRAY
51087: PPUSH
51088: CALL_OW 65
// end ; 5 .. 7 :
51092: GO 51116
51094: LD_INT 5
51096: DOUBLE
51097: GREATEREQUAL
51098: IFFALSE 51106
51100: LD_INT 7
51102: DOUBLE
51103: LESSEQUAL
51104: IFTRUE 51108
51106: GO 51115
51108: POP
// StreamSibBomb ; end ;
51109: CALL 47366 0 0
51113: GO 51116
51115: POP
// end ;
51116: PPOPN 3
51118: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
51119: LD_EXP 29
51123: PUSH
51124: LD_EXP 79
51128: AND
51129: IFFALSE 51285
51131: GO 51133
51133: DISABLE
51134: LD_INT 0
51136: PPUSH
51137: PPUSH
51138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
51139: LD_ADDR_VAR 0 2
51143: PUSH
51144: LD_INT 81
51146: PUSH
51147: LD_OWVAR 2
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 2
51158: PUSH
51159: LD_INT 21
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 21
51171: PUSH
51172: LD_INT 2
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: LIST
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PPUSH
51188: CALL_OW 69
51192: ST_TO_ADDR
// if not tmp then
51193: LD_VAR 0 2
51197: NOT
51198: IFFALSE 51202
// exit ;
51200: GO 51285
// p := 0 ;
51202: LD_ADDR_VAR 0 3
51206: PUSH
51207: LD_INT 0
51209: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
51210: LD_INT 35
51212: PPUSH
51213: CALL_OW 67
// p := p + 1 ;
51217: LD_ADDR_VAR 0 3
51221: PUSH
51222: LD_VAR 0 3
51226: PUSH
51227: LD_INT 1
51229: PLUS
51230: ST_TO_ADDR
// for i in tmp do
51231: LD_ADDR_VAR 0 1
51235: PUSH
51236: LD_VAR 0 2
51240: PUSH
51241: FOR_IN
51242: IFFALSE 51273
// if GetLives ( i ) < 1000 then
51244: LD_VAR 0 1
51248: PPUSH
51249: CALL_OW 256
51253: PUSH
51254: LD_INT 1000
51256: LESS
51257: IFFALSE 51271
// SetLives ( i , 1000 ) ;
51259: LD_VAR 0 1
51263: PPUSH
51264: LD_INT 1000
51266: PPUSH
51267: CALL_OW 234
51271: GO 51241
51273: POP
51274: POP
// until p > 20 ;
51275: LD_VAR 0 3
51279: PUSH
51280: LD_INT 20
51282: GREATER
51283: IFFALSE 51210
// end ;
51285: PPOPN 3
51287: END
// every 0 0$1 trigger StreamModeActive and sTime do
51288: LD_EXP 29
51292: PUSH
51293: LD_EXP 80
51297: AND
51298: IFFALSE 51333
51300: GO 51302
51302: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
51303: LD_INT 28
51305: PPUSH
51306: LD_OWVAR 2
51310: PPUSH
51311: LD_INT 2
51313: PPUSH
51314: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
51318: LD_INT 30
51320: PPUSH
51321: LD_OWVAR 2
51325: PPUSH
51326: LD_INT 2
51328: PPUSH
51329: CALL_OW 322
// end ;
51333: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
51334: LD_EXP 29
51338: PUSH
51339: LD_EXP 81
51343: AND
51344: IFFALSE 51465
51346: GO 51348
51348: DISABLE
51349: LD_INT 0
51351: PPUSH
51352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
51353: LD_ADDR_VAR 0 2
51357: PUSH
51358: LD_INT 22
51360: PUSH
51361: LD_OWVAR 2
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 21
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 3
51382: PUSH
51383: LD_INT 23
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: LIST
51401: PPUSH
51402: CALL_OW 69
51406: ST_TO_ADDR
// if not tmp then
51407: LD_VAR 0 2
51411: NOT
51412: IFFALSE 51416
// exit ;
51414: GO 51465
// for i in tmp do
51416: LD_ADDR_VAR 0 1
51420: PUSH
51421: LD_VAR 0 2
51425: PUSH
51426: FOR_IN
51427: IFFALSE 51463
// begin if Crawls ( i ) then
51429: LD_VAR 0 1
51433: PPUSH
51434: CALL_OW 318
51438: IFFALSE 51449
// ComWalk ( i ) ;
51440: LD_VAR 0 1
51444: PPUSH
51445: CALL_OW 138
// SetClass ( i , 2 ) ;
51449: LD_VAR 0 1
51453: PPUSH
51454: LD_INT 2
51456: PPUSH
51457: CALL_OW 336
// end ;
51461: GO 51426
51463: POP
51464: POP
// end ;
51465: PPOPN 2
51467: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
51468: LD_EXP 29
51472: PUSH
51473: LD_EXP 82
51477: AND
51478: IFFALSE 51759
51480: GO 51482
51482: DISABLE
51483: LD_INT 0
51485: PPUSH
51486: PPUSH
51487: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
51488: LD_OWVAR 2
51492: PPUSH
51493: LD_INT 9
51495: PPUSH
51496: LD_INT 1
51498: PPUSH
51499: LD_INT 1
51501: PPUSH
51502: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
51506: LD_INT 9
51508: PPUSH
51509: LD_OWVAR 2
51513: PPUSH
51514: CALL_OW 343
// uc_side := 9 ;
51518: LD_ADDR_OWVAR 20
51522: PUSH
51523: LD_INT 9
51525: ST_TO_ADDR
// uc_nation := 2 ;
51526: LD_ADDR_OWVAR 21
51530: PUSH
51531: LD_INT 2
51533: ST_TO_ADDR
// hc_name := Dark Warrior ;
51534: LD_ADDR_OWVAR 26
51538: PUSH
51539: LD_STRING Dark Warrior
51541: ST_TO_ADDR
// hc_gallery :=  ;
51542: LD_ADDR_OWVAR 33
51546: PUSH
51547: LD_STRING 
51549: ST_TO_ADDR
// hc_noskilllimit := true ;
51550: LD_ADDR_OWVAR 76
51554: PUSH
51555: LD_INT 1
51557: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
51558: LD_ADDR_OWVAR 31
51562: PUSH
51563: LD_INT 30
51565: PUSH
51566: LD_INT 30
51568: PUSH
51569: LD_INT 30
51571: PUSH
51572: LD_INT 30
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: ST_TO_ADDR
// un := CreateHuman ;
51581: LD_ADDR_VAR 0 3
51585: PUSH
51586: CALL_OW 44
51590: ST_TO_ADDR
// hc_noskilllimit := false ;
51591: LD_ADDR_OWVAR 76
51595: PUSH
51596: LD_INT 0
51598: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
51599: LD_VAR 0 3
51603: PPUSH
51604: LD_INT 1
51606: PPUSH
51607: CALL_OW 51
// p := 0 ;
51611: LD_ADDR_VAR 0 2
51615: PUSH
51616: LD_INT 0
51618: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
51619: LD_INT 35
51621: PPUSH
51622: CALL_OW 67
// p := p + 1 ;
51626: LD_ADDR_VAR 0 2
51630: PUSH
51631: LD_VAR 0 2
51635: PUSH
51636: LD_INT 1
51638: PLUS
51639: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
51640: LD_VAR 0 3
51644: PPUSH
51645: CALL_OW 256
51649: PUSH
51650: LD_INT 1000
51652: LESS
51653: IFFALSE 51667
// SetLives ( un , 1000 ) ;
51655: LD_VAR 0 3
51659: PPUSH
51660: LD_INT 1000
51662: PPUSH
51663: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
51667: LD_VAR 0 3
51671: PPUSH
51672: LD_INT 81
51674: PUSH
51675: LD_OWVAR 2
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 91
51686: PUSH
51687: LD_VAR 0 3
51691: PUSH
51692: LD_INT 30
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: LIST
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PPUSH
51704: CALL_OW 69
51708: PPUSH
51709: LD_VAR 0 3
51713: PPUSH
51714: CALL_OW 74
51718: PPUSH
51719: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
51723: LD_VAR 0 2
51727: PUSH
51728: LD_INT 60
51730: GREATER
51731: PUSH
51732: LD_VAR 0 3
51736: PPUSH
51737: CALL_OW 301
51741: OR
51742: IFFALSE 51619
// if un then
51744: LD_VAR 0 3
51748: IFFALSE 51759
// RemoveUnit ( un ) ;
51750: LD_VAR 0 3
51754: PPUSH
51755: CALL_OW 64
// end ; end_of_file
51759: PPOPN 3
51761: END
