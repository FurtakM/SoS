// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 63 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 24
// Difficulty := 2 else
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 2
  21: ST_TO_ADDR
  22: GO 37
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_OWVAR 67
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// PrepareAlliance ;
  37: CALL 79 0 0
// PrepareRussian ;
  41: CALL 446 0 0
// Action ;
  45: CALL 2366 0 0
// if debug then
  49: LD_EXP 1
  53: IFFALSE 62
// FogOff ( 7 ) ;
  55: LD_INT 7
  57: PPUSH
  58: CALL_OW 344
// end ;
  62: END
// export debug ; export function Init ; begin
  63: LD_INT 0
  65: PPUSH
// debug := false ;
  66: LD_ADDR_EXP 1
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// end ; end_of_file
  74: LD_VAR 0 1
  78: RET
// export allianceHack , allianceMechanic ; export function PrepareAlliance ; var i , tmp ; begin
  79: LD_INT 0
  81: PPUSH
  82: PPUSH
  83: PPUSH
// tmp := [ ] ;
  84: LD_ADDR_VAR 0 3
  88: PUSH
  89: EMPTY
  90: ST_TO_ADDR
// uc_side := 7 ;
  91: LD_ADDR_OWVAR 20
  95: PUSH
  96: LD_INT 7
  98: ST_TO_ADDR
// uc_nation := 1 ;
  99: LD_ADDR_OWVAR 21
 103: PUSH
 104: LD_INT 1
 106: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_hack , 100 ) ;
 107: LD_INT 5
 109: PPUSH
 110: LD_INT 3
 112: PPUSH
 113: LD_INT 3
 115: PPUSH
 116: LD_INT 99
 118: PPUSH
 119: LD_INT 100
 121: PPUSH
 122: CALL 7785 0 5
// allianceHack := CreateVehicle ;
 126: LD_ADDR_EXP 2
 130: PUSH
 131: CALL_OW 45
 135: ST_TO_ADDR
// PlaceUnitArea ( allianceHack , startSpawnArea , false ) ;
 136: LD_EXP 2
 140: PPUSH
 141: LD_INT 7
 143: PPUSH
 144: LD_INT 0
 146: PPUSH
 147: CALL_OW 49
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_double_laser , 100 ) ;
 151: LD_INT 5
 153: PPUSH
 154: LD_INT 3
 156: PPUSH
 157: LD_INT 3
 159: PPUSH
 160: LD_INT 10
 162: PPUSH
 163: LD_INT 100
 165: PPUSH
 166: CALL 7785 0 5
// for i := 1 to 2 do
 170: LD_ADDR_VAR 0 2
 174: PUSH
 175: DOUBLE
 176: LD_INT 1
 178: DEC
 179: ST_TO_ADDR
 180: LD_INT 2
 182: PUSH
 183: FOR_TO
 184: IFFALSE 203
// PlaceUnitArea ( CreateVehicle , startSpawnArea , false ) ;
 186: CALL_OW 45
 190: PPUSH
 191: LD_INT 7
 193: PPUSH
 194: LD_INT 0
 196: PPUSH
 197: CALL_OW 49
 201: GO 183
 203: POP
 204: POP
// uc_side := 4 ;
 205: LD_ADDR_OWVAR 20
 209: PUSH
 210: LD_INT 4
 212: ST_TO_ADDR
// uc_nation := 1 ;
 213: LD_ADDR_OWVAR 21
 217: PUSH
 218: LD_INT 1
 220: ST_TO_ADDR
// PrepareMechanic ( sex_male , 9 ) ;
 221: LD_INT 1
 223: PPUSH
 224: LD_INT 9
 226: PPUSH
 227: CALL_OW 383
// allianceMechanic := CreateHuman ;
 231: LD_ADDR_EXP 3
 235: PUSH
 236: CALL_OW 44
 240: ST_TO_ADDR
// PlaceHumanInUnit ( allianceMechanic , ruDep2 ) ;
 241: LD_EXP 3
 245: PPUSH
 246: LD_INT 96
 248: PPUSH
 249: CALL_OW 52
// end ;
 253: LD_VAR 0 1
 257: RET
// export function PrepareReinforcements ( ) ; var i , un ; begin
 258: LD_INT 0
 260: PPUSH
 261: PPUSH
 262: PPUSH
// uc_side := 7 ;
 263: LD_ADDR_OWVAR 20
 267: PUSH
 268: LD_INT 7
 270: ST_TO_ADDR
// uc_nation := 1 ;
 271: LD_ADDR_OWVAR 21
 275: PUSH
 276: LD_INT 1
 278: ST_TO_ADDR
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 279: LD_ADDR_VAR 0 2
 283: PUSH
 284: DOUBLE
 285: LD_INT 1
 287: DEC
 288: ST_TO_ADDR
 289: LD_INT 3
 291: PUSH
 292: LD_INT 2
 294: PUSH
 295: LD_INT 2
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: LIST
 302: PUSH
 303: LD_OWVAR 67
 307: ARRAY
 308: PUSH
 309: FOR_TO
 310: IFFALSE 380
// begin PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_rocket_launcher , 100 ) ;
 312: LD_INT 5
 314: PPUSH
 315: LD_INT 3
 317: PPUSH
 318: LD_INT 3
 320: PPUSH
 321: LD_INT 7
 323: PPUSH
 324: LD_INT 100
 326: PPUSH
 327: CALL 7785 0 5
// un := CreateVehicle ;
 331: LD_ADDR_VAR 0 3
 335: PUSH
 336: CALL_OW 45
 340: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 341: LD_VAR 0 3
 345: PPUSH
 346: LD_INT 7
 348: PPUSH
 349: LD_INT 0
 351: PPUSH
 352: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 356: LD_VAR 0 3
 360: PPUSH
 361: LD_INT 67
 363: PPUSH
 364: LD_INT 95
 366: PPUSH
 367: CALL_OW 111
// wait ( 0 0$2 ) ;
 371: LD_INT 70
 373: PPUSH
 374: CALL_OW 67
// end ;
 378: GO 309
 380: POP
 381: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_radar , 100 ) ;
 382: LD_INT 5
 384: PPUSH
 385: LD_INT 3
 387: PPUSH
 388: LD_INT 3
 390: PPUSH
 391: LD_INT 11
 393: PPUSH
 394: LD_INT 100
 396: PPUSH
 397: CALL 7785 0 5
// un := CreateVehicle ;
 401: LD_ADDR_VAR 0 3
 405: PUSH
 406: CALL_OW 45
 410: ST_TO_ADDR
// PlaceUnitArea ( un , startSpawnArea , false ) ;
 411: LD_VAR 0 3
 415: PPUSH
 416: LD_INT 7
 418: PPUSH
 419: LD_INT 0
 421: PPUSH
 422: CALL_OW 49
// ComMoveXY ( un , 67 , 95 ) ;
 426: LD_VAR 0 3
 430: PPUSH
 431: LD_INT 67
 433: PPUSH
 434: LD_INT 95
 436: PPUSH
 437: CALL_OW 111
// end ; end_of_file
 441: LD_VAR 0 1
 445: RET
// export ruGuard1 , ruGuard2 , ruGuard3 , ruForces , ruEng ; export function PrepareRussian ; var i , un ; begin
 446: LD_INT 0
 448: PPUSH
 449: PPUSH
 450: PPUSH
// uc_side := 3 ;
 451: LD_ADDR_OWVAR 20
 455: PUSH
 456: LD_INT 3
 458: ST_TO_ADDR
// uc_nation := 3 ;
 459: LD_ADDR_OWVAR 21
 463: PUSH
 464: LD_INT 3
 466: ST_TO_ADDR
// SetResourceType ( GetBase ( ruDep ) , mat_cans , 50000 ) ;
 467: LD_INT 14
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_INT 1
 477: PPUSH
 478: LD_INT 50000
 480: PPUSH
 481: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , mat_siberit , 5000 ) ;
 485: LD_INT 14
 487: PPUSH
 488: CALL_OW 274
 492: PPUSH
 493: LD_INT 3
 495: PPUSH
 496: LD_INT 5000
 498: PPUSH
 499: CALL_OW 277
// TeleportExit ( ruTeleport , 132 , 89 ) ;
 503: LD_INT 45
 505: PPUSH
 506: LD_INT 132
 508: PPUSH
 509: LD_INT 89
 511: PPUSH
 512: CALL_OW 243
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
 516: LD_ADDR_VAR 0 2
 520: PUSH
 521: LD_INT 21
 523: PUSH
 524: LD_INT 3
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PPUSH
 531: CALL_OW 69
 535: PUSH
 536: FOR_IN
 537: IFFALSE 570
// SetBLevel ( i , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
 539: LD_VAR 0 2
 543: PPUSH
 544: LD_INT 6
 546: PUSH
 547: LD_INT 8
 549: PUSH
 550: LD_INT 10
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: LD_OWVAR 67
 562: ARRAY
 563: PPUSH
 564: CALL_OW 241
 568: GO 536
 570: POP
 571: POP
// for i := 1 to 4 do
 572: LD_ADDR_VAR 0 2
 576: PUSH
 577: DOUBLE
 578: LD_INT 1
 580: DEC
 581: ST_TO_ADDR
 582: LD_INT 4
 584: PUSH
 585: FOR_TO
 586: IFFALSE 612
// begin PrepareMechanic ( false , 9 ) ;
 588: LD_INT 0
 590: PPUSH
 591: LD_INT 9
 593: PPUSH
 594: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFac ) ;
 598: CALL_OW 44
 602: PPUSH
 603: LD_INT 50
 605: PPUSH
 606: CALL_OW 52
// end ;
 610: GO 585
 612: POP
 613: POP
// ruGuard1 := [ ] ;
 614: LD_ADDR_EXP 4
 618: PUSH
 619: EMPTY
 620: ST_TO_ADDR
// ruGuard2 := [ ] ;
 621: LD_ADDR_EXP 5
 625: PUSH
 626: EMPTY
 627: ST_TO_ADDR
// ruGuard3 := [ ] ;
 628: LD_ADDR_EXP 6
 632: PUSH
 633: EMPTY
 634: ST_TO_ADDR
// ruForces := [ ] ;
 635: LD_ADDR_EXP 7
 639: PUSH
 640: EMPTY
 641: ST_TO_ADDR
// ruEng := [ ] ;
 642: LD_ADDR_EXP 8
 646: PUSH
 647: EMPTY
 648: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 4
 661: PUSH
 662: LD_INT 5
 664: PUSH
 665: LD_INT 6
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: LIST
 672: PUSH
 673: LD_OWVAR 67
 677: ARRAY
 678: PUSH
 679: FOR_TO
 680: IFFALSE 736
// begin PrepareEngineer ( false , 8 ) ;
 682: LD_INT 0
 684: PPUSH
 685: LD_INT 8
 687: PPUSH
 688: CALL_OW 382
// un := CreateHuman ;
 692: LD_ADDR_VAR 0 3
 696: PUSH
 697: CALL_OW 44
 701: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruDep ) ;
 702: LD_VAR 0 3
 706: PPUSH
 707: LD_INT 14
 709: PPUSH
 710: CALL_OW 52
// ruEng := Join ( ruEng , un ) ;
 714: LD_ADDR_EXP 8
 718: PUSH
 719: LD_EXP 8
 723: PPUSH
 724: LD_VAR 0 3
 728: PPUSH
 729: CALL 40146 0 2
 733: ST_TO_ADDR
// end ;
 734: GO 679
 736: POP
 737: POP
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
 738: LD_ADDR_VAR 0 2
 742: PUSH
 743: DOUBLE
 744: LD_INT 1
 746: DEC
 747: ST_TO_ADDR
 748: LD_INT 5
 750: PUSH
 751: LD_INT 6
 753: PUSH
 754: LD_INT 7
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: LIST
 761: PUSH
 762: LD_OWVAR 67
 766: ARRAY
 767: PUSH
 768: FOR_TO
 769: IFFALSE 879
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 771: LD_INT 24
 773: PPUSH
 774: LD_INT 3
 776: PPUSH
 777: LD_INT 3
 779: PPUSH
 780: LD_INT 46
 782: PUSH
 783: LD_INT 45
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: PUSH
 790: LD_VAR 0 2
 794: PUSH
 795: LD_INT 2
 797: MOD
 798: PUSH
 799: LD_INT 1
 801: PLUS
 802: ARRAY
 803: PPUSH
 804: LD_INT 100
 806: PPUSH
 807: CALL 7785 0 5
// un := CreateVehicle ;
 811: LD_ADDR_VAR 0 3
 815: PUSH
 816: CALL_OW 45
 820: ST_TO_ADDR
// SetDir ( un , 3 ) ;
 821: LD_VAR 0 3
 825: PPUSH
 826: LD_INT 3
 828: PPUSH
 829: CALL_OW 233
// PlaceUnitArea ( un , riverGuard1 , false ) ;
 833: LD_VAR 0 3
 837: PPUSH
 838: LD_INT 4
 840: PPUSH
 841: LD_INT 0
 843: PPUSH
 844: CALL_OW 49
// ruGuard1 := Replace ( ruGuard1 , ruGuard1 + 1 , un ) ;
 848: LD_ADDR_EXP 4
 852: PUSH
 853: LD_EXP 4
 857: PPUSH
 858: LD_EXP 4
 862: PUSH
 863: LD_INT 1
 865: PLUS
 866: PPUSH
 867: LD_VAR 0 3
 871: PPUSH
 872: CALL_OW 1
 876: ST_TO_ADDR
// end ;
 877: GO 768
 879: POP
 880: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
 881: LD_ADDR_VAR 0 2
 885: PUSH
 886: DOUBLE
 887: LD_INT 1
 889: DEC
 890: ST_TO_ADDR
 891: LD_INT 4
 893: PUSH
 894: LD_INT 4
 896: PUSH
 897: LD_INT 5
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PUSH
 905: LD_OWVAR 67
 909: ARRAY
 910: PUSH
 911: FOR_TO
 912: IFFALSE 1022
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
 914: LD_INT 24
 916: PPUSH
 917: LD_INT 3
 919: PPUSH
 920: LD_INT 3
 922: PPUSH
 923: LD_INT 46
 925: PUSH
 926: LD_INT 45
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: PUSH
 933: LD_VAR 0 2
 937: PUSH
 938: LD_INT 2
 940: MOD
 941: PUSH
 942: LD_INT 1
 944: PLUS
 945: ARRAY
 946: PPUSH
 947: LD_INT 100
 949: PPUSH
 950: CALL 7785 0 5
// un := CreateVehicle ;
 954: LD_ADDR_VAR 0 3
 958: PUSH
 959: CALL_OW 45
 963: ST_TO_ADDR
// SetDir ( un , 4 ) ;
 964: LD_VAR 0 3
 968: PPUSH
 969: LD_INT 4
 971: PPUSH
 972: CALL_OW 233
// PlaceUnitArea ( un , riverGuard2 , false ) ;
 976: LD_VAR 0 3
 980: PPUSH
 981: LD_INT 5
 983: PPUSH
 984: LD_INT 0
 986: PPUSH
 987: CALL_OW 49
// ruGuard2 := Replace ( ruGuard2 , ruGuard2 + 1 , un ) ;
 991: LD_ADDR_EXP 5
 995: PUSH
 996: LD_EXP 5
1000: PPUSH
1001: LD_EXP 5
1005: PUSH
1006: LD_INT 1
1008: PLUS
1009: PPUSH
1010: LD_VAR 0 3
1014: PPUSH
1015: CALL_OW 1
1019: ST_TO_ADDR
// end ;
1020: GO 911
1022: POP
1023: POP
// for i := 1 to [ 4 , 4 , 5 ] [ Difficulty ] do
1024: LD_ADDR_VAR 0 2
1028: PUSH
1029: DOUBLE
1030: LD_INT 1
1032: DEC
1033: ST_TO_ADDR
1034: LD_INT 4
1036: PUSH
1037: LD_INT 4
1039: PUSH
1040: LD_INT 5
1042: PUSH
1043: EMPTY
1044: LIST
1045: LIST
1046: LIST
1047: PUSH
1048: LD_OWVAR 67
1052: ARRAY
1053: PUSH
1054: FOR_TO
1055: IFFALSE 1165
// begin PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] , 100 ) ;
1057: LD_INT 24
1059: PPUSH
1060: LD_INT 3
1062: PPUSH
1063: LD_INT 3
1065: PPUSH
1066: LD_INT 46
1068: PUSH
1069: LD_INT 45
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: PUSH
1076: LD_VAR 0 2
1080: PUSH
1081: LD_INT 2
1083: MOD
1084: PUSH
1085: LD_INT 1
1087: PLUS
1088: ARRAY
1089: PPUSH
1090: LD_INT 100
1092: PPUSH
1093: CALL 7785 0 5
// un := CreateVehicle ;
1097: LD_ADDR_VAR 0 3
1101: PUSH
1102: CALL_OW 45
1106: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1107: LD_VAR 0 3
1111: PPUSH
1112: LD_INT 1
1114: PPUSH
1115: CALL_OW 233
// PlaceUnitArea ( un , riverGuard3 , false ) ;
1119: LD_VAR 0 3
1123: PPUSH
1124: LD_INT 6
1126: PPUSH
1127: LD_INT 0
1129: PPUSH
1130: CALL_OW 49
// ruGuard3 := Replace ( ruGuard3 , ruGuard3 + 1 , un ) ;
1134: LD_ADDR_EXP 6
1138: PUSH
1139: LD_EXP 6
1143: PPUSH
1144: LD_EXP 6
1148: PUSH
1149: LD_INT 1
1151: PLUS
1152: PPUSH
1153: LD_VAR 0 3
1157: PPUSH
1158: CALL_OW 1
1162: ST_TO_ADDR
// end ;
1163: GO 1054
1165: POP
1166: POP
// for i := 1 to 2 do
1167: LD_ADDR_VAR 0 2
1171: PUSH
1172: DOUBLE
1173: LD_INT 1
1175: DEC
1176: ST_TO_ADDR
1177: LD_INT 2
1179: PUSH
1180: FOR_TO
1181: IFFALSE 1229
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
1183: LD_INT 22
1185: PPUSH
1186: LD_INT 3
1188: PPUSH
1189: LD_INT 3
1191: PPUSH
1192: LD_INT 52
1194: PPUSH
1195: LD_INT 100
1197: PPUSH
1198: CALL 7785 0 5
// un := CreateVehicle ;
1202: LD_ADDR_VAR 0 3
1206: PUSH
1207: CALL_OW 45
1211: ST_TO_ADDR
// PlaceUnitArea ( un , ruCraneArea , false ) ;
1212: LD_VAR 0 3
1216: PPUSH
1217: LD_INT 9
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: CALL_OW 49
// end ;
1227: GO 1180
1229: POP
1230: POP
// for i := 1 to 3 do
1231: LD_ADDR_VAR 0 2
1235: PUSH
1236: DOUBLE
1237: LD_INT 1
1239: DEC
1240: ST_TO_ADDR
1241: LD_INT 3
1243: PUSH
1244: FOR_TO
1245: IFFALSE 1282
// begin PrepareHuman ( false , class_bazooker , 8 ) ;
1247: LD_INT 0
1249: PPUSH
1250: LD_INT 9
1252: PPUSH
1253: LD_INT 8
1255: PPUSH
1256: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 91 , 83 ) ) ;
1260: CALL_OW 44
1264: PPUSH
1265: LD_INT 91
1267: PPUSH
1268: LD_INT 83
1270: PPUSH
1271: CALL_OW 428
1275: PPUSH
1276: CALL_OW 52
// end ;
1280: GO 1244
1282: POP
1283: POP
// end ;
1284: LD_VAR 0 1
1288: RET
// every 0 0$1 trigger ruEng do var i , tmp ;
1289: LD_EXP 8
1293: IFFALSE 1487
1295: GO 1297
1297: DISABLE
1298: LD_INT 0
1300: PPUSH
1301: PPUSH
// begin enable ;
1302: ENABLE
// tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1303: LD_ADDR_VAR 0 2
1307: PUSH
1308: LD_INT 10
1310: PPUSH
1311: LD_INT 21
1313: PUSH
1314: LD_INT 3
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PUSH
1321: LD_INT 3
1323: PUSH
1324: LD_INT 24
1326: PUSH
1327: LD_INT 1000
1329: PUSH
1330: EMPTY
1331: LIST
1332: LIST
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: PPUSH
1342: CALL_OW 70
1346: ST_TO_ADDR
// if not tmp and UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) then
1347: LD_VAR 0 2
1351: NOT
1352: PUSH
1353: LD_EXP 8
1357: PPUSH
1358: LD_INT 3
1360: PUSH
1361: LD_INT 54
1363: PUSH
1364: EMPTY
1365: LIST
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: PPUSH
1371: CALL_OW 72
1375: AND
1376: IFFALSE 1408
// ComEnterUnit ( UnitFilter ( ruEng , [ f_not , [ f_inside ] ] ) , ruDep ) ;
1378: LD_EXP 8
1382: PPUSH
1383: LD_INT 3
1385: PUSH
1386: LD_INT 54
1388: PUSH
1389: EMPTY
1390: LIST
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PPUSH
1396: CALL_OW 72
1400: PPUSH
1401: LD_INT 14
1403: PPUSH
1404: CALL_OW 120
// if tmp then
1408: LD_VAR 0 2
1412: IFFALSE 1487
// begin for i in ruEng do
1414: LD_ADDR_VAR 0 1
1418: PUSH
1419: LD_EXP 8
1423: PUSH
1424: FOR_IN
1425: IFFALSE 1485
// if IsInUnit ( i ) then
1427: LD_VAR 0 1
1431: PPUSH
1432: CALL_OW 310
1436: IFFALSE 1449
// ComExitBuilding ( i ) else
1438: LD_VAR 0 1
1442: PPUSH
1443: CALL_OW 122
1447: GO 1483
// ComRepairBuilding ( i , SortByDistanceUnit ( i , tmp , true , true ) [ 1 ] ) ;
1449: LD_VAR 0 1
1453: PPUSH
1454: LD_VAR 0 1
1458: PPUSH
1459: LD_VAR 0 2
1463: PPUSH
1464: LD_INT 1
1466: PPUSH
1467: LD_INT 1
1469: PPUSH
1470: CALL 8342 0 4
1474: PUSH
1475: LD_INT 1
1477: ARRAY
1478: PPUSH
1479: CALL_OW 130
1483: GO 1424
1485: POP
1486: POP
// end ; end ;
1487: PPOPN 2
1489: END
// every 4 4$00 trigger not ruForces do var i , tmp ;
1490: LD_EXP 7
1494: NOT
1495: IFFALSE 1561
1497: GO 1499
1499: DISABLE
1500: LD_INT 0
1502: PPUSH
1503: PPUSH
// begin enable ;
1504: ENABLE
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
1505: LD_ADDR_VAR 0 1
1509: PUSH
1510: DOUBLE
1511: LD_INT 1
1513: DEC
1514: ST_TO_ADDR
1515: LD_INT 4
1517: PUSH
1518: LD_INT 5
1520: PUSH
1521: LD_INT 6
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: PUSH
1529: LD_OWVAR 67
1533: ARRAY
1534: PUSH
1535: FOR_TO
1536: IFFALSE 1559
// AddComConstruct ( ruFac , ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ) ;
1538: LD_INT 50
1540: PPUSH
1541: LD_INT 24
1543: PPUSH
1544: LD_INT 3
1546: PPUSH
1547: LD_INT 3
1549: PPUSH
1550: LD_INT 46
1552: PPUSH
1553: CALL_OW 185
1557: GO 1535
1559: POP
1560: POP
// end ;
1561: PPOPN 2
1563: END
// every 0 0$30 trigger ruForces >= [ 4 , 5 , 6 ] [ Difficulty ] do var i , tmp ;
1564: LD_EXP 7
1568: PUSH
1569: LD_INT 4
1571: PUSH
1572: LD_INT 5
1574: PUSH
1575: LD_INT 6
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: LIST
1582: PUSH
1583: LD_OWVAR 67
1587: ARRAY
1588: GREATEREQUAL
1589: IFFALSE 1742
1591: GO 1593
1593: DISABLE
1594: LD_INT 0
1596: PPUSH
1597: PPUSH
// begin enable ;
1598: ENABLE
// tmp := ruForces ;
1599: LD_ADDR_VAR 0 2
1603: PUSH
1604: LD_EXP 7
1608: ST_TO_ADDR
// if rand ( 0 , 1 ) then
1609: LD_INT 0
1611: PPUSH
1612: LD_INT 1
1614: PPUSH
1615: CALL_OW 12
1619: IFFALSE 1640
// begin ComEnterUnit ( tmp , ruTeleport ) ;
1621: LD_VAR 0 2
1625: PPUSH
1626: LD_INT 45
1628: PPUSH
1629: CALL_OW 120
// wait ( 0 0$20 ) ;
1633: LD_INT 700
1635: PPUSH
1636: CALL_OW 67
// end ; ruForces := [ ] ;
1640: LD_ADDR_EXP 7
1644: PUSH
1645: EMPTY
1646: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1647: LD_INT 35
1649: PPUSH
1650: CALL_OW 67
// for i in tmp do
1654: LD_ADDR_VAR 0 1
1658: PUSH
1659: LD_VAR 0 2
1663: PUSH
1664: FOR_IN
1665: IFFALSE 1733
// if not IsOk ( i ) then
1667: LD_VAR 0 1
1671: PPUSH
1672: CALL_OW 302
1676: NOT
1677: IFFALSE 1697
// tmp := tmp diff i else
1679: LD_ADDR_VAR 0 2
1683: PUSH
1684: LD_VAR 0 2
1688: PUSH
1689: LD_VAR 0 1
1693: DIFF
1694: ST_TO_ADDR
1695: GO 1731
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
1697: LD_VAR 0 1
1701: PPUSH
1702: LD_INT 81
1704: PUSH
1705: LD_INT 3
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: PPUSH
1712: CALL_OW 69
1716: PPUSH
1717: LD_VAR 0 1
1721: PPUSH
1722: CALL_OW 74
1726: PPUSH
1727: CALL_OW 115
1731: GO 1664
1733: POP
1734: POP
// until not tmp ;
1735: LD_VAR 0 2
1739: NOT
1740: IFFALSE 1647
// end ;
1742: PPOPN 2
1744: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 62 , 83 , 8 ] ] ) do
1745: LD_INT 22
1747: PUSH
1748: LD_INT 7
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: PUSH
1755: LD_INT 92
1757: PUSH
1758: LD_INT 62
1760: PUSH
1761: LD_INT 83
1763: PUSH
1764: LD_INT 8
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: PPUSH
1777: CALL_OW 69
1781: IFFALSE 1801
1783: GO 1785
1785: DISABLE
// ComAgressiveMove ( ruGuard1 , 69 , 100 ) ;
1786: LD_EXP 4
1790: PPUSH
1791: LD_INT 69
1793: PPUSH
1794: LD_INT 100
1796: PPUSH
1797: CALL_OW 114
1801: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 85 , 89 , 8 ] ] ) do
1802: LD_INT 22
1804: PUSH
1805: LD_INT 7
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PUSH
1812: LD_INT 92
1814: PUSH
1815: LD_INT 85
1817: PUSH
1818: LD_INT 89
1820: PUSH
1821: LD_INT 8
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PPUSH
1834: CALL_OW 69
1838: IFFALSE 1858
1840: GO 1842
1842: DISABLE
// ComAgressiveMove ( ruGuard2 , 72 , 88 ) ;
1843: LD_EXP 5
1847: PPUSH
1848: LD_INT 72
1850: PPUSH
1851: LD_INT 88
1853: PPUSH
1854: CALL_OW 114
1858: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 89 , 13 , 8 ] ] ) do
1859: LD_INT 22
1861: PUSH
1862: LD_INT 7
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 92
1871: PUSH
1872: LD_INT 89
1874: PUSH
1875: LD_INT 13
1877: PUSH
1878: LD_INT 8
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 69
1895: IFFALSE 1915
1897: GO 1899
1899: DISABLE
// ComAgressiveMove ( ruGuard3 , 107 , 26 ) ; end_of_file
1900: LD_EXP 6
1904: PPUSH
1905: LD_INT 107
1907: PPUSH
1908: LD_INT 26
1910: PPUSH
1911: CALL_OW 114
1915: END
// every 6 6$00 do var i , un , tmp ;
1916: GO 1918
1918: DISABLE
1919: LD_INT 0
1921: PPUSH
1922: PPUSH
1923: PPUSH
// begin enable ;
1924: ENABLE
// tmp := [ ] ;
1925: LD_ADDR_VAR 0 3
1929: PUSH
1930: EMPTY
1931: ST_TO_ADDR
// for i := 1 to 8 do
1932: LD_ADDR_VAR 0 1
1936: PUSH
1937: DOUBLE
1938: LD_INT 1
1940: DEC
1941: ST_TO_ADDR
1942: LD_INT 8
1944: PUSH
1945: FOR_TO
1946: IFFALSE 2089
// begin uc_side := 1 ;
1948: LD_ADDR_OWVAR 20
1952: PUSH
1953: LD_INT 1
1955: ST_TO_ADDR
// uc_nation := 1 ;
1956: LD_ADDR_OWVAR 21
1960: PUSH
1961: LD_INT 1
1963: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_laser , us_rocket_launcher ] [ i mod 3 + 1 ] , 100 ) ;
1964: LD_INT 5
1966: PPUSH
1967: LD_INT 3
1969: PPUSH
1970: LD_INT 3
1972: PPUSH
1973: LD_INT 6
1975: PUSH
1976: LD_INT 9
1978: PUSH
1979: LD_INT 7
1981: PUSH
1982: EMPTY
1983: LIST
1984: LIST
1985: LIST
1986: PUSH
1987: LD_VAR 0 1
1991: PUSH
1992: LD_INT 3
1994: MOD
1995: PUSH
1996: LD_INT 1
1998: PLUS
1999: ARRAY
2000: PPUSH
2001: LD_INT 100
2003: PPUSH
2004: CALL 7785 0 5
// un := CreateVehicle ;
2008: LD_ADDR_VAR 0 2
2012: PUSH
2013: CALL_OW 45
2017: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
2018: LD_ADDR_VAR 0 3
2022: PUSH
2023: LD_VAR 0 3
2027: PPUSH
2028: LD_VAR 0 2
2032: PPUSH
2033: CALL 40146 0 2
2037: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2038: LD_VAR 0 2
2042: PPUSH
2043: LD_INT 1
2045: PPUSH
2046: CALL_OW 233
// PlaceUnitArea ( un , americanSpawnArea , false ) ;
2050: LD_VAR 0 2
2054: PPUSH
2055: LD_INT 11
2057: PPUSH
2058: LD_INT 0
2060: PPUSH
2061: CALL_OW 49
// ComMoveXY ( un , 16 , 13 ) ;
2065: LD_VAR 0 2
2069: PPUSH
2070: LD_INT 16
2072: PPUSH
2073: LD_INT 13
2075: PPUSH
2076: CALL_OW 111
// wait ( 0 0$1 ) ;
2080: LD_INT 35
2082: PPUSH
2083: CALL_OW 67
// end ;
2087: GO 1945
2089: POP
2090: POP
// repeat wait ( 0 0$1 ) ;
2091: LD_INT 35
2093: PPUSH
2094: CALL_OW 67
// for i in tmp do
2098: LD_ADDR_VAR 0 1
2102: PUSH
2103: LD_VAR 0 3
2107: PUSH
2108: FOR_IN
2109: IFFALSE 2177
// if not IsOk ( i ) then
2111: LD_VAR 0 1
2115: PPUSH
2116: CALL_OW 302
2120: NOT
2121: IFFALSE 2141
// tmp := tmp diff i else
2123: LD_ADDR_VAR 0 3
2127: PUSH
2128: LD_VAR 0 3
2132: PUSH
2133: LD_VAR 0 1
2137: DIFF
2138: ST_TO_ADDR
2139: GO 2175
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
2141: LD_VAR 0 1
2145: PPUSH
2146: LD_INT 81
2148: PUSH
2149: LD_INT 1
2151: PUSH
2152: EMPTY
2153: LIST
2154: LIST
2155: PPUSH
2156: CALL_OW 69
2160: PPUSH
2161: LD_VAR 0 1
2165: PPUSH
2166: CALL_OW 74
2170: PPUSH
2171: CALL_OW 115
2175: GO 2108
2177: POP
2178: POP
// until not tmp ;
2179: LD_VAR 0 3
2183: NOT
2184: IFFALSE 2091
// end ;
2186: PPOPN 3
2188: END
// every 7 7$00 trigger not HexInfo ( 149 , 106 ) do var un ;
2189: LD_INT 149
2191: PPUSH
2192: LD_INT 106
2194: PPUSH
2195: CALL_OW 428
2199: NOT
2200: IFFALSE 2363
2202: GO 2204
2204: DISABLE
2205: LD_INT 0
2207: PPUSH
// begin enable ;
2208: ENABLE
// uc_side := 1 ;
2209: LD_ADDR_OWVAR 20
2213: PUSH
2214: LD_INT 1
2216: ST_TO_ADDR
// uc_nation := 1 ;
2217: LD_ADDR_OWVAR 21
2221: PUSH
2222: LD_INT 1
2224: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2225: LD_INT 5
2227: PPUSH
2228: LD_INT 3
2230: PPUSH
2231: LD_INT 3
2233: PPUSH
2234: LD_INT 12
2236: PPUSH
2237: LD_INT 100
2239: PPUSH
2240: CALL 7785 0 5
// un := CreateVehicle ;
2244: LD_ADDR_VAR 0 1
2248: PUSH
2249: CALL_OW 45
2253: ST_TO_ADDR
// PlaceUnitXY ( un , 149 , 106 , false ) ;
2254: LD_VAR 0 1
2258: PPUSH
2259: LD_INT 149
2261: PPUSH
2262: LD_INT 106
2264: PPUSH
2265: LD_INT 0
2267: PPUSH
2268: CALL_OW 48
// SetCargo ( un , mat_siberit , 100 ) ;
2272: LD_VAR 0 1
2276: PPUSH
2277: LD_INT 3
2279: PPUSH
2280: LD_INT 100
2282: PPUSH
2283: CALL_OW 290
// ComMoveXY ( un , 105 , 2 ) ;
2287: LD_VAR 0 1
2291: PPUSH
2292: LD_INT 105
2294: PPUSH
2295: LD_INT 2
2297: PPUSH
2298: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2302: LD_INT 35
2304: PPUSH
2305: CALL_OW 67
// if IsDead ( un ) or GetSide ( un ) <> 1 then
2309: LD_VAR 0 1
2313: PPUSH
2314: CALL_OW 301
2318: PUSH
2319: LD_VAR 0 1
2323: PPUSH
2324: CALL_OW 255
2328: PUSH
2329: LD_INT 1
2331: NONEQUAL
2332: OR
2333: IFFALSE 2337
// exit ;
2335: GO 2363
// until IsAt ( un , 105 , 2 ) ;
2337: LD_VAR 0 1
2341: PPUSH
2342: LD_INT 105
2344: PPUSH
2345: LD_INT 2
2347: PPUSH
2348: CALL_OW 307
2352: IFFALSE 2302
// RemoveUnit ( un ) ;
2354: LD_VAR 0 1
2358: PPUSH
2359: CALL_OW 64
// end ; end_of_file
2363: PPOPN 1
2365: END
// export function Action ; begin
2366: LD_INT 0
2368: PPUSH
// CenterNowOnUnits ( allianceHack ) ;
2369: LD_EXP 2
2373: PPUSH
2374: CALL_OW 87
// ChangeMissionObjectives ( WT-Objectives-1 ) ;
2378: LD_STRING WT-Objectives-1
2380: PPUSH
2381: CALL_OW 337
// end ;
2385: LD_VAR 0 1
2389: RET
// every 0 0$2 trigger See ( 7 , allianceMechanic ) do
2390: LD_INT 7
2392: PPUSH
2393: LD_EXP 3
2397: PPUSH
2398: CALL_OW 292
2402: IFFALSE 2419
2404: GO 2406
2406: DISABLE
// SetSide ( allianceMechanic , 7 ) ;
2407: LD_EXP 3
2411: PPUSH
2412: LD_INT 7
2414: PPUSH
2415: CALL_OW 235
2419: END
// every 2 2$00 do
2420: GO 2422
2422: DISABLE
// PrepareReinforcements ( ) ;
2423: CALL 258 0 0
2427: END
// every 0 0$1 trigger not FindArtifact ( 2 ) do
2428: LD_INT 2
2430: PPUSH
2431: CALL_OW 469
2435: NOT
2436: IFFALSE 2451
2438: GO 2440
2440: DISABLE
// SetAreaMapShow ( endMissionArea , 1 ) ;
2441: LD_INT 8
2443: PPUSH
2444: LD_INT 1
2446: PPUSH
2447: CALL_OW 424
2451: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and not FindArtifact ( 2 ) do
2452: LD_INT 8
2454: PPUSH
2455: LD_INT 2
2457: PUSH
2458: LD_INT 34
2460: PUSH
2461: LD_INT 12
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: PUSH
2468: LD_INT 34
2470: PUSH
2471: LD_INT 51
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: PPUSH
2483: CALL_OW 70
2487: PUSH
2488: LD_INT 2
2490: PPUSH
2491: CALL_OW 469
2495: NOT
2496: AND
2497: IFFALSE 2627
2499: GO 2501
2501: DISABLE
// begin AddMedal ( WT-med-1 , 1 ) ;
2502: LD_STRING WT-med-1
2504: PPUSH
2505: LD_INT 1
2507: PPUSH
2508: CALL_OW 101
// AddMedal ( WT-med-2 , [ - 1 , 1 ] [ ( IsOk ( allianceMechanic ) * ( GetSide ( allianceMechanic ) ) = 7 ) + 1 ] ) ;
2512: LD_STRING WT-med-2
2514: PPUSH
2515: LD_INT 1
2517: NEG
2518: PUSH
2519: LD_INT 1
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: PUSH
2526: LD_EXP 3
2530: PPUSH
2531: CALL_OW 302
2535: PUSH
2536: LD_EXP 3
2540: PPUSH
2541: CALL_OW 255
2545: MUL
2546: PUSH
2547: LD_INT 7
2549: EQUAL
2550: PUSH
2551: LD_INT 1
2553: PLUS
2554: ARRAY
2555: PPUSH
2556: CALL_OW 101
// AddMedal ( WT-med-3 , [ - 1 , 1 ] [ ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , us_double_laser ] ] ) >= 2 ) + 1 ] ) ;
2560: LD_STRING WT-med-3
2562: PPUSH
2563: LD_INT 1
2565: NEG
2566: PUSH
2567: LD_INT 1
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 22
2576: PUSH
2577: LD_INT 7
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: PUSH
2584: LD_INT 34
2586: PUSH
2587: LD_INT 10
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: EMPTY
2595: LIST
2596: LIST
2597: PPUSH
2598: CALL_OW 69
2602: PUSH
2603: LD_INT 2
2605: GREATEREQUAL
2606: PUSH
2607: LD_INT 1
2609: PLUS
2610: ARRAY
2611: PPUSH
2612: CALL_OW 101
// GiveMedals ( WT-Main ) ;
2616: LD_STRING WT-Main
2618: PPUSH
2619: CALL_OW 102
// YouWin ;
2623: CALL_OW 103
// end ; end_of_file
2627: END
// on UnitGoesToRed ( un ) do begin if un in ruForces then
2628: LD_VAR 0 1
2632: PUSH
2633: LD_EXP 7
2637: IN
2638: IFFALSE 2656
// ruForces := ruForces diff un ;
2640: LD_ADDR_EXP 7
2644: PUSH
2645: LD_EXP 7
2649: PUSH
2650: LD_VAR 0 1
2654: DIFF
2655: ST_TO_ADDR
// end ;
2656: PPOPN 1
2658: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2659: LD_VAR 0 1
2663: PPUSH
2664: CALL 43955 0 1
// if un = allianceHack then
2668: LD_VAR 0 1
2672: PUSH
2673: LD_EXP 2
2677: EQUAL
2678: IFFALSE 2687
// YouLost ( WT-HackLost ) ;
2680: LD_STRING WT-HackLost
2682: PPUSH
2683: CALL_OW 104
// if un in ruForces then
2687: LD_VAR 0 1
2691: PUSH
2692: LD_EXP 7
2696: IN
2697: IFFALSE 2715
// ruForces := ruForces diff un ;
2699: LD_ADDR_EXP 7
2703: PUSH
2704: LD_EXP 7
2708: PUSH
2709: LD_VAR 0 1
2713: DIFF
2714: ST_TO_ADDR
// end ;
2715: PPOPN 1
2717: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
2718: LD_VAR 0 1
2722: PPUSH
2723: LD_VAR 0 2
2727: PPUSH
2728: CALL 44075 0 2
// if GetSide ( vehicle ) = 3 then
2732: LD_VAR 0 1
2736: PPUSH
2737: CALL_OW 255
2741: PUSH
2742: LD_INT 3
2744: EQUAL
2745: IFFALSE 2767
// ruForces := Join ( ruForces , vehicle ) ;
2747: LD_ADDR_EXP 7
2751: PUSH
2752: LD_EXP 7
2756: PPUSH
2757: LD_VAR 0 1
2761: PPUSH
2762: CALL 40146 0 2
2766: ST_TO_ADDR
// end ; end_of_file
2767: PPOPN 2
2769: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2770: LD_INT 0
2772: PPUSH
2773: PPUSH
// if exist_mode then
2774: LD_VAR 0 2
2778: IFFALSE 2803
// unit := CreateCharacter ( prefix & ident ) else
2780: LD_ADDR_VAR 0 5
2784: PUSH
2785: LD_VAR 0 3
2789: PUSH
2790: LD_VAR 0 1
2794: STR
2795: PPUSH
2796: CALL_OW 34
2800: ST_TO_ADDR
2801: GO 2818
// unit := NewCharacter ( ident ) ;
2803: LD_ADDR_VAR 0 5
2807: PUSH
2808: LD_VAR 0 1
2812: PPUSH
2813: CALL_OW 25
2817: ST_TO_ADDR
// result := unit ;
2818: LD_ADDR_VAR 0 4
2822: PUSH
2823: LD_VAR 0 5
2827: ST_TO_ADDR
// end ;
2828: LD_VAR 0 4
2832: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2833: LD_INT 0
2835: PPUSH
2836: PPUSH
// if not side or not nation then
2837: LD_VAR 0 1
2841: NOT
2842: PUSH
2843: LD_VAR 0 2
2847: NOT
2848: OR
2849: IFFALSE 2853
// exit ;
2851: GO 3621
// case nation of nation_american :
2853: LD_VAR 0 2
2857: PUSH
2858: LD_INT 1
2860: DOUBLE
2861: EQUAL
2862: IFTRUE 2866
2864: GO 3080
2866: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2867: LD_ADDR_VAR 0 4
2871: PUSH
2872: LD_INT 35
2874: PUSH
2875: LD_INT 45
2877: PUSH
2878: LD_INT 46
2880: PUSH
2881: LD_INT 47
2883: PUSH
2884: LD_INT 82
2886: PUSH
2887: LD_INT 83
2889: PUSH
2890: LD_INT 84
2892: PUSH
2893: LD_INT 85
2895: PUSH
2896: LD_INT 86
2898: PUSH
2899: LD_INT 1
2901: PUSH
2902: LD_INT 2
2904: PUSH
2905: LD_INT 6
2907: PUSH
2908: LD_INT 15
2910: PUSH
2911: LD_INT 16
2913: PUSH
2914: LD_INT 7
2916: PUSH
2917: LD_INT 12
2919: PUSH
2920: LD_INT 13
2922: PUSH
2923: LD_INT 10
2925: PUSH
2926: LD_INT 14
2928: PUSH
2929: LD_INT 20
2931: PUSH
2932: LD_INT 21
2934: PUSH
2935: LD_INT 22
2937: PUSH
2938: LD_INT 25
2940: PUSH
2941: LD_INT 32
2943: PUSH
2944: LD_INT 27
2946: PUSH
2947: LD_INT 36
2949: PUSH
2950: LD_INT 69
2952: PUSH
2953: LD_INT 39
2955: PUSH
2956: LD_INT 34
2958: PUSH
2959: LD_INT 40
2961: PUSH
2962: LD_INT 48
2964: PUSH
2965: LD_INT 49
2967: PUSH
2968: LD_INT 50
2970: PUSH
2971: LD_INT 51
2973: PUSH
2974: LD_INT 52
2976: PUSH
2977: LD_INT 53
2979: PUSH
2980: LD_INT 54
2982: PUSH
2983: LD_INT 55
2985: PUSH
2986: LD_INT 56
2988: PUSH
2989: LD_INT 57
2991: PUSH
2992: LD_INT 58
2994: PUSH
2995: LD_INT 59
2997: PUSH
2998: LD_INT 60
3000: PUSH
3001: LD_INT 61
3003: PUSH
3004: LD_INT 62
3006: PUSH
3007: LD_INT 80
3009: PUSH
3010: LD_INT 82
3012: PUSH
3013: LD_INT 83
3015: PUSH
3016: LD_INT 84
3018: PUSH
3019: LD_INT 85
3021: PUSH
3022: LD_INT 86
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: LIST
3033: LIST
3034: LIST
3035: LIST
3036: LIST
3037: LIST
3038: LIST
3039: LIST
3040: LIST
3041: LIST
3042: LIST
3043: LIST
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: LIST
3049: LIST
3050: LIST
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: LIST
3056: LIST
3057: LIST
3058: LIST
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: ST_TO_ADDR
3078: GO 3545
3080: LD_INT 2
3082: DOUBLE
3083: EQUAL
3084: IFTRUE 3088
3086: GO 3314
3088: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3089: LD_ADDR_VAR 0 4
3093: PUSH
3094: LD_INT 35
3096: PUSH
3097: LD_INT 45
3099: PUSH
3100: LD_INT 46
3102: PUSH
3103: LD_INT 47
3105: PUSH
3106: LD_INT 82
3108: PUSH
3109: LD_INT 83
3111: PUSH
3112: LD_INT 84
3114: PUSH
3115: LD_INT 85
3117: PUSH
3118: LD_INT 87
3120: PUSH
3121: LD_INT 70
3123: PUSH
3124: LD_INT 1
3126: PUSH
3127: LD_INT 11
3129: PUSH
3130: LD_INT 3
3132: PUSH
3133: LD_INT 4
3135: PUSH
3136: LD_INT 5
3138: PUSH
3139: LD_INT 6
3141: PUSH
3142: LD_INT 15
3144: PUSH
3145: LD_INT 18
3147: PUSH
3148: LD_INT 7
3150: PUSH
3151: LD_INT 17
3153: PUSH
3154: LD_INT 8
3156: PUSH
3157: LD_INT 20
3159: PUSH
3160: LD_INT 21
3162: PUSH
3163: LD_INT 22
3165: PUSH
3166: LD_INT 72
3168: PUSH
3169: LD_INT 26
3171: PUSH
3172: LD_INT 69
3174: PUSH
3175: LD_INT 39
3177: PUSH
3178: LD_INT 40
3180: PUSH
3181: LD_INT 41
3183: PUSH
3184: LD_INT 42
3186: PUSH
3187: LD_INT 43
3189: PUSH
3190: LD_INT 48
3192: PUSH
3193: LD_INT 49
3195: PUSH
3196: LD_INT 50
3198: PUSH
3199: LD_INT 51
3201: PUSH
3202: LD_INT 52
3204: PUSH
3205: LD_INT 53
3207: PUSH
3208: LD_INT 54
3210: PUSH
3211: LD_INT 55
3213: PUSH
3214: LD_INT 56
3216: PUSH
3217: LD_INT 60
3219: PUSH
3220: LD_INT 61
3222: PUSH
3223: LD_INT 62
3225: PUSH
3226: LD_INT 66
3228: PUSH
3229: LD_INT 67
3231: PUSH
3232: LD_INT 68
3234: PUSH
3235: LD_INT 81
3237: PUSH
3238: LD_INT 82
3240: PUSH
3241: LD_INT 83
3243: PUSH
3244: LD_INT 84
3246: PUSH
3247: LD_INT 85
3249: PUSH
3250: LD_INT 87
3252: PUSH
3253: LD_INT 88
3255: PUSH
3256: EMPTY
3257: LIST
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: ST_TO_ADDR
3312: GO 3545
3314: LD_INT 3
3316: DOUBLE
3317: EQUAL
3318: IFTRUE 3322
3320: GO 3544
3322: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3323: LD_ADDR_VAR 0 4
3327: PUSH
3328: LD_INT 46
3330: PUSH
3331: LD_INT 47
3333: PUSH
3334: LD_INT 1
3336: PUSH
3337: LD_INT 2
3339: PUSH
3340: LD_INT 82
3342: PUSH
3343: LD_INT 83
3345: PUSH
3346: LD_INT 84
3348: PUSH
3349: LD_INT 85
3351: PUSH
3352: LD_INT 86
3354: PUSH
3355: LD_INT 11
3357: PUSH
3358: LD_INT 9
3360: PUSH
3361: LD_INT 20
3363: PUSH
3364: LD_INT 19
3366: PUSH
3367: LD_INT 21
3369: PUSH
3370: LD_INT 24
3372: PUSH
3373: LD_INT 22
3375: PUSH
3376: LD_INT 25
3378: PUSH
3379: LD_INT 28
3381: PUSH
3382: LD_INT 29
3384: PUSH
3385: LD_INT 30
3387: PUSH
3388: LD_INT 31
3390: PUSH
3391: LD_INT 37
3393: PUSH
3394: LD_INT 38
3396: PUSH
3397: LD_INT 32
3399: PUSH
3400: LD_INT 27
3402: PUSH
3403: LD_INT 33
3405: PUSH
3406: LD_INT 69
3408: PUSH
3409: LD_INT 39
3411: PUSH
3412: LD_INT 34
3414: PUSH
3415: LD_INT 40
3417: PUSH
3418: LD_INT 71
3420: PUSH
3421: LD_INT 23
3423: PUSH
3424: LD_INT 44
3426: PUSH
3427: LD_INT 48
3429: PUSH
3430: LD_INT 49
3432: PUSH
3433: LD_INT 50
3435: PUSH
3436: LD_INT 51
3438: PUSH
3439: LD_INT 52
3441: PUSH
3442: LD_INT 53
3444: PUSH
3445: LD_INT 54
3447: PUSH
3448: LD_INT 55
3450: PUSH
3451: LD_INT 56
3453: PUSH
3454: LD_INT 57
3456: PUSH
3457: LD_INT 58
3459: PUSH
3460: LD_INT 59
3462: PUSH
3463: LD_INT 63
3465: PUSH
3466: LD_INT 64
3468: PUSH
3469: LD_INT 65
3471: PUSH
3472: LD_INT 82
3474: PUSH
3475: LD_INT 83
3477: PUSH
3478: LD_INT 84
3480: PUSH
3481: LD_INT 85
3483: PUSH
3484: LD_INT 86
3486: PUSH
3487: EMPTY
3488: LIST
3489: LIST
3490: LIST
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: LIST
3520: LIST
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: ST_TO_ADDR
3542: GO 3545
3544: POP
// if state > - 1 and state < 3 then
3545: LD_VAR 0 3
3549: PUSH
3550: LD_INT 1
3552: NEG
3553: GREATER
3554: PUSH
3555: LD_VAR 0 3
3559: PUSH
3560: LD_INT 3
3562: LESS
3563: AND
3564: IFFALSE 3621
// for i in result do
3566: LD_ADDR_VAR 0 5
3570: PUSH
3571: LD_VAR 0 4
3575: PUSH
3576: FOR_IN
3577: IFFALSE 3619
// if GetTech ( i , side ) <> state then
3579: LD_VAR 0 5
3583: PPUSH
3584: LD_VAR 0 1
3588: PPUSH
3589: CALL_OW 321
3593: PUSH
3594: LD_VAR 0 3
3598: NONEQUAL
3599: IFFALSE 3617
// result := result diff i ;
3601: LD_ADDR_VAR 0 4
3605: PUSH
3606: LD_VAR 0 4
3610: PUSH
3611: LD_VAR 0 5
3615: DIFF
3616: ST_TO_ADDR
3617: GO 3576
3619: POP
3620: POP
// end ;
3621: LD_VAR 0 4
3625: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3626: LD_INT 0
3628: PPUSH
3629: PPUSH
3630: PPUSH
// result := true ;
3631: LD_ADDR_VAR 0 3
3635: PUSH
3636: LD_INT 1
3638: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3639: LD_ADDR_VAR 0 5
3643: PUSH
3644: LD_VAR 0 2
3648: PPUSH
3649: CALL_OW 480
3653: ST_TO_ADDR
// if not tmp then
3654: LD_VAR 0 5
3658: NOT
3659: IFFALSE 3663
// exit ;
3661: GO 3712
// for i in tmp do
3663: LD_ADDR_VAR 0 4
3667: PUSH
3668: LD_VAR 0 5
3672: PUSH
3673: FOR_IN
3674: IFFALSE 3710
// if GetTech ( i , side ) <> state_researched then
3676: LD_VAR 0 4
3680: PPUSH
3681: LD_VAR 0 1
3685: PPUSH
3686: CALL_OW 321
3690: PUSH
3691: LD_INT 2
3693: NONEQUAL
3694: IFFALSE 3708
// begin result := false ;
3696: LD_ADDR_VAR 0 3
3700: PUSH
3701: LD_INT 0
3703: ST_TO_ADDR
// exit ;
3704: POP
3705: POP
3706: GO 3712
// end ;
3708: GO 3673
3710: POP
3711: POP
// end ;
3712: LD_VAR 0 3
3716: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3717: LD_INT 0
3719: PPUSH
3720: PPUSH
3721: PPUSH
3722: PPUSH
3723: PPUSH
3724: PPUSH
3725: PPUSH
3726: PPUSH
3727: PPUSH
3728: PPUSH
3729: PPUSH
3730: PPUSH
3731: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3732: LD_VAR 0 1
3736: NOT
3737: PUSH
3738: LD_VAR 0 1
3742: PPUSH
3743: CALL_OW 257
3747: PUSH
3748: LD_INT 9
3750: NONEQUAL
3751: OR
3752: IFFALSE 3756
// exit ;
3754: GO 4329
// side := GetSide ( unit ) ;
3756: LD_ADDR_VAR 0 9
3760: PUSH
3761: LD_VAR 0 1
3765: PPUSH
3766: CALL_OW 255
3770: ST_TO_ADDR
// tech_space := tech_spacanom ;
3771: LD_ADDR_VAR 0 12
3775: PUSH
3776: LD_INT 29
3778: ST_TO_ADDR
// tech_time := tech_taurad ;
3779: LD_ADDR_VAR 0 13
3783: PUSH
3784: LD_INT 28
3786: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3787: LD_ADDR_VAR 0 11
3791: PUSH
3792: LD_VAR 0 1
3796: PPUSH
3797: CALL_OW 310
3801: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3802: LD_VAR 0 11
3806: PPUSH
3807: CALL_OW 247
3811: PUSH
3812: LD_INT 2
3814: EQUAL
3815: IFFALSE 3819
// exit ;
3817: GO 4329
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3819: LD_ADDR_VAR 0 8
3823: PUSH
3824: LD_INT 81
3826: PUSH
3827: LD_VAR 0 9
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PUSH
3836: LD_INT 3
3838: PUSH
3839: LD_INT 21
3841: PUSH
3842: LD_INT 3
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: PPUSH
3857: CALL_OW 69
3861: ST_TO_ADDR
// if not tmp then
3862: LD_VAR 0 8
3866: NOT
3867: IFFALSE 3871
// exit ;
3869: GO 4329
// if in_unit then
3871: LD_VAR 0 11
3875: IFFALSE 3899
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3877: LD_ADDR_VAR 0 10
3881: PUSH
3882: LD_VAR 0 8
3886: PPUSH
3887: LD_VAR 0 11
3891: PPUSH
3892: CALL_OW 74
3896: ST_TO_ADDR
3897: GO 3919
// enemy := NearestUnitToUnit ( tmp , unit ) ;
3899: LD_ADDR_VAR 0 10
3903: PUSH
3904: LD_VAR 0 8
3908: PPUSH
3909: LD_VAR 0 1
3913: PPUSH
3914: CALL_OW 74
3918: ST_TO_ADDR
// if not enemy then
3919: LD_VAR 0 10
3923: NOT
3924: IFFALSE 3928
// exit ;
3926: GO 4329
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
3928: LD_VAR 0 11
3932: PUSH
3933: LD_VAR 0 11
3937: PPUSH
3938: LD_VAR 0 10
3942: PPUSH
3943: CALL_OW 296
3947: PUSH
3948: LD_INT 13
3950: GREATER
3951: AND
3952: PUSH
3953: LD_VAR 0 1
3957: PPUSH
3958: LD_VAR 0 10
3962: PPUSH
3963: CALL_OW 296
3967: PUSH
3968: LD_INT 12
3970: GREATER
3971: OR
3972: IFFALSE 3976
// exit ;
3974: GO 4329
// missile := [ 1 ] ;
3976: LD_ADDR_VAR 0 14
3980: PUSH
3981: LD_INT 1
3983: PUSH
3984: EMPTY
3985: LIST
3986: ST_TO_ADDR
// if Researched ( side , tech_space ) then
3987: LD_VAR 0 9
3991: PPUSH
3992: LD_VAR 0 12
3996: PPUSH
3997: CALL_OW 325
4001: IFFALSE 4030
// missile := Replace ( missile , missile + 1 , 2 ) ;
4003: LD_ADDR_VAR 0 14
4007: PUSH
4008: LD_VAR 0 14
4012: PPUSH
4013: LD_VAR 0 14
4017: PUSH
4018: LD_INT 1
4020: PLUS
4021: PPUSH
4022: LD_INT 2
4024: PPUSH
4025: CALL_OW 1
4029: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4030: LD_VAR 0 9
4034: PPUSH
4035: LD_VAR 0 13
4039: PPUSH
4040: CALL_OW 325
4044: PUSH
4045: LD_VAR 0 10
4049: PPUSH
4050: CALL_OW 255
4054: PPUSH
4055: LD_VAR 0 13
4059: PPUSH
4060: CALL_OW 325
4064: NOT
4065: AND
4066: IFFALSE 4095
// missile := Replace ( missile , missile + 1 , 3 ) ;
4068: LD_ADDR_VAR 0 14
4072: PUSH
4073: LD_VAR 0 14
4077: PPUSH
4078: LD_VAR 0 14
4082: PUSH
4083: LD_INT 1
4085: PLUS
4086: PPUSH
4087: LD_INT 3
4089: PPUSH
4090: CALL_OW 1
4094: ST_TO_ADDR
// if missile < 2 then
4095: LD_VAR 0 14
4099: PUSH
4100: LD_INT 2
4102: LESS
4103: IFFALSE 4107
// exit ;
4105: GO 4329
// x := GetX ( enemy ) ;
4107: LD_ADDR_VAR 0 4
4111: PUSH
4112: LD_VAR 0 10
4116: PPUSH
4117: CALL_OW 250
4121: ST_TO_ADDR
// y := GetY ( enemy ) ;
4122: LD_ADDR_VAR 0 5
4126: PUSH
4127: LD_VAR 0 10
4131: PPUSH
4132: CALL_OW 251
4136: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4137: LD_ADDR_VAR 0 6
4141: PUSH
4142: LD_VAR 0 4
4146: PUSH
4147: LD_INT 1
4149: NEG
4150: PPUSH
4151: LD_INT 1
4153: PPUSH
4154: CALL_OW 12
4158: PLUS
4159: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4160: LD_ADDR_VAR 0 7
4164: PUSH
4165: LD_VAR 0 5
4169: PUSH
4170: LD_INT 1
4172: NEG
4173: PPUSH
4174: LD_INT 1
4176: PPUSH
4177: CALL_OW 12
4181: PLUS
4182: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4183: LD_VAR 0 6
4187: PPUSH
4188: LD_VAR 0 7
4192: PPUSH
4193: CALL_OW 488
4197: NOT
4198: IFFALSE 4220
// begin _x := x ;
4200: LD_ADDR_VAR 0 6
4204: PUSH
4205: LD_VAR 0 4
4209: ST_TO_ADDR
// _y := y ;
4210: LD_ADDR_VAR 0 7
4214: PUSH
4215: LD_VAR 0 5
4219: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4220: LD_ADDR_VAR 0 3
4224: PUSH
4225: LD_INT 1
4227: PPUSH
4228: LD_VAR 0 14
4232: PPUSH
4233: CALL_OW 12
4237: ST_TO_ADDR
// case i of 1 :
4238: LD_VAR 0 3
4242: PUSH
4243: LD_INT 1
4245: DOUBLE
4246: EQUAL
4247: IFTRUE 4251
4249: GO 4268
4251: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4252: LD_VAR 0 1
4256: PPUSH
4257: LD_VAR 0 10
4261: PPUSH
4262: CALL_OW 115
4266: GO 4329
4268: LD_INT 2
4270: DOUBLE
4271: EQUAL
4272: IFTRUE 4276
4274: GO 4298
4276: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4277: LD_VAR 0 1
4281: PPUSH
4282: LD_VAR 0 6
4286: PPUSH
4287: LD_VAR 0 7
4291: PPUSH
4292: CALL_OW 153
4296: GO 4329
4298: LD_INT 3
4300: DOUBLE
4301: EQUAL
4302: IFTRUE 4306
4304: GO 4328
4306: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4307: LD_VAR 0 1
4311: PPUSH
4312: LD_VAR 0 6
4316: PPUSH
4317: LD_VAR 0 7
4321: PPUSH
4322: CALL_OW 154
4326: GO 4329
4328: POP
// end ;
4329: LD_VAR 0 2
4333: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4334: LD_INT 0
4336: PPUSH
4337: PPUSH
4338: PPUSH
4339: PPUSH
4340: PPUSH
4341: PPUSH
// if not unit or not building then
4342: LD_VAR 0 1
4346: NOT
4347: PUSH
4348: LD_VAR 0 2
4352: NOT
4353: OR
4354: IFFALSE 4358
// exit ;
4356: GO 4516
// x := GetX ( building ) ;
4358: LD_ADDR_VAR 0 5
4362: PUSH
4363: LD_VAR 0 2
4367: PPUSH
4368: CALL_OW 250
4372: ST_TO_ADDR
// y := GetY ( building ) ;
4373: LD_ADDR_VAR 0 6
4377: PUSH
4378: LD_VAR 0 2
4382: PPUSH
4383: CALL_OW 251
4387: ST_TO_ADDR
// for i = 0 to 5 do
4388: LD_ADDR_VAR 0 4
4392: PUSH
4393: DOUBLE
4394: LD_INT 0
4396: DEC
4397: ST_TO_ADDR
4398: LD_INT 5
4400: PUSH
4401: FOR_TO
4402: IFFALSE 4514
// begin _x := ShiftX ( x , i , 3 ) ;
4404: LD_ADDR_VAR 0 7
4408: PUSH
4409: LD_VAR 0 5
4413: PPUSH
4414: LD_VAR 0 4
4418: PPUSH
4419: LD_INT 3
4421: PPUSH
4422: CALL_OW 272
4426: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4427: LD_ADDR_VAR 0 8
4431: PUSH
4432: LD_VAR 0 6
4436: PPUSH
4437: LD_VAR 0 4
4441: PPUSH
4442: LD_INT 3
4444: PPUSH
4445: CALL_OW 273
4449: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4450: LD_VAR 0 7
4454: PPUSH
4455: LD_VAR 0 8
4459: PPUSH
4460: CALL_OW 488
4464: NOT
4465: IFFALSE 4469
// continue ;
4467: GO 4401
// if HexInfo ( _x , _y ) = 0 then
4469: LD_VAR 0 7
4473: PPUSH
4474: LD_VAR 0 8
4478: PPUSH
4479: CALL_OW 428
4483: PUSH
4484: LD_INT 0
4486: EQUAL
4487: IFFALSE 4512
// begin ComMoveXY ( unit , _x , _y ) ;
4489: LD_VAR 0 1
4493: PPUSH
4494: LD_VAR 0 7
4498: PPUSH
4499: LD_VAR 0 8
4503: PPUSH
4504: CALL_OW 111
// exit ;
4508: POP
4509: POP
4510: GO 4516
// end ; end ;
4512: GO 4401
4514: POP
4515: POP
// end ;
4516: LD_VAR 0 3
4520: RET
// export function ScanBase ( side , base_area ) ; begin
4521: LD_INT 0
4523: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4524: LD_ADDR_VAR 0 3
4528: PUSH
4529: LD_VAR 0 2
4533: PPUSH
4534: LD_INT 81
4536: PUSH
4537: LD_VAR 0 1
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: PPUSH
4546: CALL_OW 70
4550: ST_TO_ADDR
// end ;
4551: LD_VAR 0 3
4555: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4556: LD_INT 0
4558: PPUSH
4559: PPUSH
4560: PPUSH
4561: PPUSH
// result := false ;
4562: LD_ADDR_VAR 0 2
4566: PUSH
4567: LD_INT 0
4569: ST_TO_ADDR
// side := GetSide ( unit ) ;
4570: LD_ADDR_VAR 0 3
4574: PUSH
4575: LD_VAR 0 1
4579: PPUSH
4580: CALL_OW 255
4584: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4585: LD_ADDR_VAR 0 4
4589: PUSH
4590: LD_VAR 0 1
4594: PPUSH
4595: CALL_OW 248
4599: ST_TO_ADDR
// case nat of 1 :
4600: LD_VAR 0 4
4604: PUSH
4605: LD_INT 1
4607: DOUBLE
4608: EQUAL
4609: IFTRUE 4613
4611: GO 4624
4613: POP
// tech := tech_lassight ; 2 :
4614: LD_ADDR_VAR 0 5
4618: PUSH
4619: LD_INT 12
4621: ST_TO_ADDR
4622: GO 4663
4624: LD_INT 2
4626: DOUBLE
4627: EQUAL
4628: IFTRUE 4632
4630: GO 4643
4632: POP
// tech := tech_mortar ; 3 :
4633: LD_ADDR_VAR 0 5
4637: PUSH
4638: LD_INT 41
4640: ST_TO_ADDR
4641: GO 4663
4643: LD_INT 3
4645: DOUBLE
4646: EQUAL
4647: IFTRUE 4651
4649: GO 4662
4651: POP
// tech := tech_bazooka ; end ;
4652: LD_ADDR_VAR 0 5
4656: PUSH
4657: LD_INT 44
4659: ST_TO_ADDR
4660: GO 4663
4662: POP
// if Researched ( side , tech ) then
4663: LD_VAR 0 3
4667: PPUSH
4668: LD_VAR 0 5
4672: PPUSH
4673: CALL_OW 325
4677: IFFALSE 4704
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4679: LD_ADDR_VAR 0 2
4683: PUSH
4684: LD_INT 5
4686: PUSH
4687: LD_INT 8
4689: PUSH
4690: LD_INT 9
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: LIST
4697: PUSH
4698: LD_VAR 0 4
4702: ARRAY
4703: ST_TO_ADDR
// end ;
4704: LD_VAR 0 2
4708: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4709: LD_INT 0
4711: PPUSH
4712: PPUSH
4713: PPUSH
// if not mines then
4714: LD_VAR 0 2
4718: NOT
4719: IFFALSE 4723
// exit ;
4721: GO 4867
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4723: LD_ADDR_VAR 0 5
4727: PUSH
4728: LD_INT 81
4730: PUSH
4731: LD_VAR 0 1
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: LD_INT 3
4742: PUSH
4743: LD_INT 21
4745: PUSH
4746: LD_INT 3
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: PPUSH
4761: CALL_OW 69
4765: ST_TO_ADDR
// for i in mines do
4766: LD_ADDR_VAR 0 4
4770: PUSH
4771: LD_VAR 0 2
4775: PUSH
4776: FOR_IN
4777: IFFALSE 4865
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4779: LD_VAR 0 4
4783: PUSH
4784: LD_INT 1
4786: ARRAY
4787: PPUSH
4788: LD_VAR 0 4
4792: PUSH
4793: LD_INT 2
4795: ARRAY
4796: PPUSH
4797: CALL_OW 458
4801: NOT
4802: IFFALSE 4806
// continue ;
4804: GO 4776
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4806: LD_VAR 0 4
4810: PUSH
4811: LD_INT 1
4813: ARRAY
4814: PPUSH
4815: LD_VAR 0 4
4819: PUSH
4820: LD_INT 2
4822: ARRAY
4823: PPUSH
4824: CALL_OW 428
4828: PUSH
4829: LD_VAR 0 5
4833: IN
4834: IFFALSE 4863
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4836: LD_VAR 0 4
4840: PUSH
4841: LD_INT 1
4843: ARRAY
4844: PPUSH
4845: LD_VAR 0 4
4849: PUSH
4850: LD_INT 2
4852: ARRAY
4853: PPUSH
4854: LD_VAR 0 1
4858: PPUSH
4859: CALL_OW 456
// end ;
4863: GO 4776
4865: POP
4866: POP
// end ;
4867: LD_VAR 0 3
4871: RET
// export function Count ( array ) ; var i ; begin
4872: LD_INT 0
4874: PPUSH
4875: PPUSH
// result := 0 ;
4876: LD_ADDR_VAR 0 2
4880: PUSH
4881: LD_INT 0
4883: ST_TO_ADDR
// for i in array do
4884: LD_ADDR_VAR 0 3
4888: PUSH
4889: LD_VAR 0 1
4893: PUSH
4894: FOR_IN
4895: IFFALSE 4919
// if i then
4897: LD_VAR 0 3
4901: IFFALSE 4917
// result := result + 1 ;
4903: LD_ADDR_VAR 0 2
4907: PUSH
4908: LD_VAR 0 2
4912: PUSH
4913: LD_INT 1
4915: PLUS
4916: ST_TO_ADDR
4917: GO 4894
4919: POP
4920: POP
// end ;
4921: LD_VAR 0 2
4925: RET
// export function IsEmpty ( building ) ; begin
4926: LD_INT 0
4928: PPUSH
// if not building then
4929: LD_VAR 0 1
4933: NOT
4934: IFFALSE 4938
// exit ;
4936: GO 4981
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4938: LD_ADDR_VAR 0 2
4942: PUSH
4943: LD_VAR 0 1
4947: PUSH
4948: LD_INT 22
4950: PUSH
4951: LD_VAR 0 1
4955: PPUSH
4956: CALL_OW 255
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PUSH
4965: LD_INT 58
4967: PUSH
4968: EMPTY
4969: LIST
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: PPUSH
4975: CALL_OW 69
4979: IN
4980: ST_TO_ADDR
// end ;
4981: LD_VAR 0 2
4985: RET
// export function IsNotFull ( building ) ; var places ; begin
4986: LD_INT 0
4988: PPUSH
4989: PPUSH
// if not building then
4990: LD_VAR 0 1
4994: NOT
4995: IFFALSE 4999
// exit ;
4997: GO 5170
// result := false ;
4999: LD_ADDR_VAR 0 2
5003: PUSH
5004: LD_INT 0
5006: ST_TO_ADDR
// places := 0 ;
5007: LD_ADDR_VAR 0 3
5011: PUSH
5012: LD_INT 0
5014: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
5015: LD_VAR 0 1
5019: PPUSH
5020: CALL_OW 266
5024: PUSH
5025: LD_INT 0
5027: DOUBLE
5028: EQUAL
5029: IFTRUE 5087
5031: LD_INT 1
5033: DOUBLE
5034: EQUAL
5035: IFTRUE 5087
5037: LD_INT 6
5039: DOUBLE
5040: EQUAL
5041: IFTRUE 5087
5043: LD_INT 7
5045: DOUBLE
5046: EQUAL
5047: IFTRUE 5087
5049: LD_INT 8
5051: DOUBLE
5052: EQUAL
5053: IFTRUE 5087
5055: LD_INT 4
5057: DOUBLE
5058: EQUAL
5059: IFTRUE 5087
5061: LD_INT 5
5063: DOUBLE
5064: EQUAL
5065: IFTRUE 5087
5067: LD_INT 2
5069: DOUBLE
5070: EQUAL
5071: IFTRUE 5087
5073: LD_INT 3
5075: DOUBLE
5076: EQUAL
5077: IFTRUE 5087
5079: LD_INT 35
5081: DOUBLE
5082: EQUAL
5083: IFTRUE 5087
5085: GO 5098
5087: POP
// places := 6 ; b_bunker , b_breastwork :
5088: LD_ADDR_VAR 0 3
5092: PUSH
5093: LD_INT 6
5095: ST_TO_ADDR
5096: GO 5143
5098: LD_INT 32
5100: DOUBLE
5101: EQUAL
5102: IFTRUE 5112
5104: LD_INT 31
5106: DOUBLE
5107: EQUAL
5108: IFTRUE 5112
5110: GO 5123
5112: POP
// places := 1 ; b_control_tower :
5113: LD_ADDR_VAR 0 3
5117: PUSH
5118: LD_INT 1
5120: ST_TO_ADDR
5121: GO 5143
5123: LD_INT 36
5125: DOUBLE
5126: EQUAL
5127: IFTRUE 5131
5129: GO 5142
5131: POP
// places := 3 ; end ;
5132: LD_ADDR_VAR 0 3
5136: PUSH
5137: LD_INT 3
5139: ST_TO_ADDR
5140: GO 5143
5142: POP
// if places then
5143: LD_VAR 0 3
5147: IFFALSE 5170
// result := UnitsInside ( building ) < places ;
5149: LD_ADDR_VAR 0 2
5153: PUSH
5154: LD_VAR 0 1
5158: PPUSH
5159: CALL_OW 313
5163: PUSH
5164: LD_VAR 0 3
5168: LESS
5169: ST_TO_ADDR
// end ;
5170: LD_VAR 0 2
5174: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5175: LD_INT 0
5177: PPUSH
5178: PPUSH
5179: PPUSH
5180: PPUSH
// tmp := [ ] ;
5181: LD_ADDR_VAR 0 3
5185: PUSH
5186: EMPTY
5187: ST_TO_ADDR
// list := [ ] ;
5188: LD_ADDR_VAR 0 5
5192: PUSH
5193: EMPTY
5194: ST_TO_ADDR
// for i = 16 to 25 do
5195: LD_ADDR_VAR 0 4
5199: PUSH
5200: DOUBLE
5201: LD_INT 16
5203: DEC
5204: ST_TO_ADDR
5205: LD_INT 25
5207: PUSH
5208: FOR_TO
5209: IFFALSE 5282
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5211: LD_ADDR_VAR 0 3
5215: PUSH
5216: LD_VAR 0 3
5220: PUSH
5221: LD_INT 22
5223: PUSH
5224: LD_VAR 0 1
5228: PPUSH
5229: CALL_OW 255
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: PUSH
5238: LD_INT 91
5240: PUSH
5241: LD_VAR 0 1
5245: PUSH
5246: LD_INT 6
5248: PUSH
5249: EMPTY
5250: LIST
5251: LIST
5252: LIST
5253: PUSH
5254: LD_INT 30
5256: PUSH
5257: LD_VAR 0 4
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: LIST
5270: PUSH
5271: EMPTY
5272: LIST
5273: PPUSH
5274: CALL_OW 69
5278: ADD
5279: ST_TO_ADDR
5280: GO 5208
5282: POP
5283: POP
// for i = 1 to tmp do
5284: LD_ADDR_VAR 0 4
5288: PUSH
5289: DOUBLE
5290: LD_INT 1
5292: DEC
5293: ST_TO_ADDR
5294: LD_VAR 0 3
5298: PUSH
5299: FOR_TO
5300: IFFALSE 5388
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5302: LD_ADDR_VAR 0 5
5306: PUSH
5307: LD_VAR 0 5
5311: PUSH
5312: LD_VAR 0 3
5316: PUSH
5317: LD_VAR 0 4
5321: ARRAY
5322: PPUSH
5323: CALL_OW 266
5327: PUSH
5328: LD_VAR 0 3
5332: PUSH
5333: LD_VAR 0 4
5337: ARRAY
5338: PPUSH
5339: CALL_OW 250
5343: PUSH
5344: LD_VAR 0 3
5348: PUSH
5349: LD_VAR 0 4
5353: ARRAY
5354: PPUSH
5355: CALL_OW 251
5359: PUSH
5360: LD_VAR 0 3
5364: PUSH
5365: LD_VAR 0 4
5369: ARRAY
5370: PPUSH
5371: CALL_OW 254
5375: PUSH
5376: EMPTY
5377: LIST
5378: LIST
5379: LIST
5380: LIST
5381: PUSH
5382: EMPTY
5383: LIST
5384: ADD
5385: ST_TO_ADDR
5386: GO 5299
5388: POP
5389: POP
// result := list ;
5390: LD_ADDR_VAR 0 2
5394: PUSH
5395: LD_VAR 0 5
5399: ST_TO_ADDR
// end ;
5400: LD_VAR 0 2
5404: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5405: LD_INT 0
5407: PPUSH
5408: PPUSH
5409: PPUSH
5410: PPUSH
5411: PPUSH
5412: PPUSH
5413: PPUSH
// if not factory then
5414: LD_VAR 0 1
5418: NOT
5419: IFFALSE 5423
// exit ;
5421: GO 6016
// if control = control_apeman then
5423: LD_VAR 0 4
5427: PUSH
5428: LD_INT 5
5430: EQUAL
5431: IFFALSE 5540
// begin tmp := UnitsInside ( factory ) ;
5433: LD_ADDR_VAR 0 8
5437: PUSH
5438: LD_VAR 0 1
5442: PPUSH
5443: CALL_OW 313
5447: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5448: LD_VAR 0 8
5452: PPUSH
5453: LD_INT 25
5455: PUSH
5456: LD_INT 12
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: PPUSH
5463: CALL_OW 72
5467: NOT
5468: IFFALSE 5478
// control := control_manual ;
5470: LD_ADDR_VAR 0 4
5474: PUSH
5475: LD_INT 1
5477: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5478: LD_ADDR_VAR 0 8
5482: PUSH
5483: LD_VAR 0 1
5487: PPUSH
5488: CALL 5175 0 1
5492: ST_TO_ADDR
// if tmp then
5493: LD_VAR 0 8
5497: IFFALSE 5540
// begin for i in tmp do
5499: LD_ADDR_VAR 0 7
5503: PUSH
5504: LD_VAR 0 8
5508: PUSH
5509: FOR_IN
5510: IFFALSE 5538
// if i [ 1 ] = b_ext_radio then
5512: LD_VAR 0 7
5516: PUSH
5517: LD_INT 1
5519: ARRAY
5520: PUSH
5521: LD_INT 22
5523: EQUAL
5524: IFFALSE 5536
// begin control := control_remote ;
5526: LD_ADDR_VAR 0 4
5530: PUSH
5531: LD_INT 2
5533: ST_TO_ADDR
// break ;
5534: GO 5538
// end ;
5536: GO 5509
5538: POP
5539: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5540: LD_VAR 0 1
5544: PPUSH
5545: LD_VAR 0 2
5549: PPUSH
5550: LD_VAR 0 3
5554: PPUSH
5555: LD_VAR 0 4
5559: PPUSH
5560: LD_VAR 0 5
5564: PPUSH
5565: CALL_OW 448
5569: IFFALSE 5604
// begin result := [ chassis , engine , control , weapon ] ;
5571: LD_ADDR_VAR 0 6
5575: PUSH
5576: LD_VAR 0 2
5580: PUSH
5581: LD_VAR 0 3
5585: PUSH
5586: LD_VAR 0 4
5590: PUSH
5591: LD_VAR 0 5
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: ST_TO_ADDR
// exit ;
5602: GO 6016
// end ; _chassis := AvailableChassisList ( factory ) ;
5604: LD_ADDR_VAR 0 9
5608: PUSH
5609: LD_VAR 0 1
5613: PPUSH
5614: CALL_OW 475
5618: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5619: LD_ADDR_VAR 0 11
5623: PUSH
5624: LD_VAR 0 1
5628: PPUSH
5629: CALL_OW 476
5633: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5634: LD_ADDR_VAR 0 12
5638: PUSH
5639: LD_VAR 0 1
5643: PPUSH
5644: CALL_OW 477
5648: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5649: LD_ADDR_VAR 0 10
5653: PUSH
5654: LD_VAR 0 1
5658: PPUSH
5659: CALL_OW 478
5663: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5664: LD_VAR 0 9
5668: NOT
5669: PUSH
5670: LD_VAR 0 11
5674: NOT
5675: OR
5676: PUSH
5677: LD_VAR 0 12
5681: NOT
5682: OR
5683: PUSH
5684: LD_VAR 0 10
5688: NOT
5689: OR
5690: IFFALSE 5725
// begin result := [ chassis , engine , control , weapon ] ;
5692: LD_ADDR_VAR 0 6
5696: PUSH
5697: LD_VAR 0 2
5701: PUSH
5702: LD_VAR 0 3
5706: PUSH
5707: LD_VAR 0 4
5711: PUSH
5712: LD_VAR 0 5
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: ST_TO_ADDR
// exit ;
5723: GO 6016
// end ; if not chassis in _chassis then
5725: LD_VAR 0 2
5729: PUSH
5730: LD_VAR 0 9
5734: IN
5735: NOT
5736: IFFALSE 5762
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5738: LD_ADDR_VAR 0 2
5742: PUSH
5743: LD_VAR 0 9
5747: PUSH
5748: LD_INT 1
5750: PPUSH
5751: LD_VAR 0 9
5755: PPUSH
5756: CALL_OW 12
5760: ARRAY
5761: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5762: LD_VAR 0 2
5766: PPUSH
5767: LD_VAR 0 3
5771: PPUSH
5772: CALL 6021 0 2
5776: NOT
5777: IFFALSE 5836
// repeat engine := _engine [ 1 ] ;
5779: LD_ADDR_VAR 0 3
5783: PUSH
5784: LD_VAR 0 11
5788: PUSH
5789: LD_INT 1
5791: ARRAY
5792: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5793: LD_ADDR_VAR 0 11
5797: PUSH
5798: LD_VAR 0 11
5802: PPUSH
5803: LD_INT 1
5805: PPUSH
5806: CALL_OW 3
5810: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5811: LD_VAR 0 2
5815: PPUSH
5816: LD_VAR 0 3
5820: PPUSH
5821: CALL 6021 0 2
5825: PUSH
5826: LD_VAR 0 11
5830: PUSH
5831: EMPTY
5832: EQUAL
5833: OR
5834: IFFALSE 5779
// if not control in _control then
5836: LD_VAR 0 4
5840: PUSH
5841: LD_VAR 0 12
5845: IN
5846: NOT
5847: IFFALSE 5873
// control := _control [ rand ( 1 , _control ) ] ;
5849: LD_ADDR_VAR 0 4
5853: PUSH
5854: LD_VAR 0 12
5858: PUSH
5859: LD_INT 1
5861: PPUSH
5862: LD_VAR 0 12
5866: PPUSH
5867: CALL_OW 12
5871: ARRAY
5872: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5873: LD_VAR 0 2
5877: PPUSH
5878: LD_VAR 0 5
5882: PPUSH
5883: CALL 6241 0 2
5887: NOT
5888: IFFALSE 5947
// repeat weapon := _weapon [ 1 ] ;
5890: LD_ADDR_VAR 0 5
5894: PUSH
5895: LD_VAR 0 10
5899: PUSH
5900: LD_INT 1
5902: ARRAY
5903: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5904: LD_ADDR_VAR 0 10
5908: PUSH
5909: LD_VAR 0 10
5913: PPUSH
5914: LD_INT 1
5916: PPUSH
5917: CALL_OW 3
5921: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5922: LD_VAR 0 2
5926: PPUSH
5927: LD_VAR 0 5
5931: PPUSH
5932: CALL 6241 0 2
5936: PUSH
5937: LD_VAR 0 10
5941: PUSH
5942: EMPTY
5943: EQUAL
5944: OR
5945: IFFALSE 5890
// result := [ ] ;
5947: LD_ADDR_VAR 0 6
5951: PUSH
5952: EMPTY
5953: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5954: LD_VAR 0 1
5958: PPUSH
5959: LD_VAR 0 2
5963: PPUSH
5964: LD_VAR 0 3
5968: PPUSH
5969: LD_VAR 0 4
5973: PPUSH
5974: LD_VAR 0 5
5978: PPUSH
5979: CALL_OW 448
5983: IFFALSE 6016
// result := [ chassis , engine , control , weapon ] ;
5985: LD_ADDR_VAR 0 6
5989: PUSH
5990: LD_VAR 0 2
5994: PUSH
5995: LD_VAR 0 3
5999: PUSH
6000: LD_VAR 0 4
6004: PUSH
6005: LD_VAR 0 5
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: ST_TO_ADDR
// end ;
6016: LD_VAR 0 6
6020: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6021: LD_INT 0
6023: PPUSH
// if not chassis or not engine then
6024: LD_VAR 0 1
6028: NOT
6029: PUSH
6030: LD_VAR 0 2
6034: NOT
6035: OR
6036: IFFALSE 6040
// exit ;
6038: GO 6236
// case engine of engine_solar :
6040: LD_VAR 0 2
6044: PUSH
6045: LD_INT 2
6047: DOUBLE
6048: EQUAL
6049: IFTRUE 6053
6051: GO 6091
6053: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6054: LD_ADDR_VAR 0 3
6058: PUSH
6059: LD_INT 11
6061: PUSH
6062: LD_INT 12
6064: PUSH
6065: LD_INT 13
6067: PUSH
6068: LD_INT 14
6070: PUSH
6071: LD_INT 1
6073: PUSH
6074: LD_INT 2
6076: PUSH
6077: LD_INT 3
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: ST_TO_ADDR
6089: GO 6220
6091: LD_INT 1
6093: DOUBLE
6094: EQUAL
6095: IFTRUE 6099
6097: GO 6161
6099: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6100: LD_ADDR_VAR 0 3
6104: PUSH
6105: LD_INT 11
6107: PUSH
6108: LD_INT 12
6110: PUSH
6111: LD_INT 13
6113: PUSH
6114: LD_INT 14
6116: PUSH
6117: LD_INT 1
6119: PUSH
6120: LD_INT 2
6122: PUSH
6123: LD_INT 3
6125: PUSH
6126: LD_INT 4
6128: PUSH
6129: LD_INT 5
6131: PUSH
6132: LD_INT 21
6134: PUSH
6135: LD_INT 23
6137: PUSH
6138: LD_INT 22
6140: PUSH
6141: LD_INT 24
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: ST_TO_ADDR
6159: GO 6220
6161: LD_INT 3
6163: DOUBLE
6164: EQUAL
6165: IFTRUE 6169
6167: GO 6219
6169: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6170: LD_ADDR_VAR 0 3
6174: PUSH
6175: LD_INT 13
6177: PUSH
6178: LD_INT 14
6180: PUSH
6181: LD_INT 2
6183: PUSH
6184: LD_INT 3
6186: PUSH
6187: LD_INT 4
6189: PUSH
6190: LD_INT 5
6192: PUSH
6193: LD_INT 21
6195: PUSH
6196: LD_INT 22
6198: PUSH
6199: LD_INT 23
6201: PUSH
6202: LD_INT 24
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: ST_TO_ADDR
6217: GO 6220
6219: POP
// result := ( chassis in result ) ;
6220: LD_ADDR_VAR 0 3
6224: PUSH
6225: LD_VAR 0 1
6229: PUSH
6230: LD_VAR 0 3
6234: IN
6235: ST_TO_ADDR
// end ;
6236: LD_VAR 0 3
6240: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6241: LD_INT 0
6243: PPUSH
// if not chassis or not weapon then
6244: LD_VAR 0 1
6248: NOT
6249: PUSH
6250: LD_VAR 0 2
6254: NOT
6255: OR
6256: IFFALSE 6260
// exit ;
6258: GO 7320
// case weapon of us_machine_gun :
6260: LD_VAR 0 2
6264: PUSH
6265: LD_INT 2
6267: DOUBLE
6268: EQUAL
6269: IFTRUE 6273
6271: GO 6303
6273: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6274: LD_ADDR_VAR 0 3
6278: PUSH
6279: LD_INT 1
6281: PUSH
6282: LD_INT 2
6284: PUSH
6285: LD_INT 3
6287: PUSH
6288: LD_INT 4
6290: PUSH
6291: LD_INT 5
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: ST_TO_ADDR
6301: GO 7304
6303: LD_INT 3
6305: DOUBLE
6306: EQUAL
6307: IFTRUE 6311
6309: GO 6341
6311: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6312: LD_ADDR_VAR 0 3
6316: PUSH
6317: LD_INT 1
6319: PUSH
6320: LD_INT 2
6322: PUSH
6323: LD_INT 3
6325: PUSH
6326: LD_INT 4
6328: PUSH
6329: LD_INT 5
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: ST_TO_ADDR
6339: GO 7304
6341: LD_INT 11
6343: DOUBLE
6344: EQUAL
6345: IFTRUE 6349
6347: GO 6379
6349: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6350: LD_ADDR_VAR 0 3
6354: PUSH
6355: LD_INT 1
6357: PUSH
6358: LD_INT 2
6360: PUSH
6361: LD_INT 3
6363: PUSH
6364: LD_INT 4
6366: PUSH
6367: LD_INT 5
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: ST_TO_ADDR
6377: GO 7304
6379: LD_INT 4
6381: DOUBLE
6382: EQUAL
6383: IFTRUE 6387
6385: GO 6413
6387: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6388: LD_ADDR_VAR 0 3
6392: PUSH
6393: LD_INT 2
6395: PUSH
6396: LD_INT 3
6398: PUSH
6399: LD_INT 4
6401: PUSH
6402: LD_INT 5
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: ST_TO_ADDR
6411: GO 7304
6413: LD_INT 5
6415: DOUBLE
6416: EQUAL
6417: IFTRUE 6421
6419: GO 6447
6421: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6422: LD_ADDR_VAR 0 3
6426: PUSH
6427: LD_INT 2
6429: PUSH
6430: LD_INT 3
6432: PUSH
6433: LD_INT 4
6435: PUSH
6436: LD_INT 5
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: ST_TO_ADDR
6445: GO 7304
6447: LD_INT 9
6449: DOUBLE
6450: EQUAL
6451: IFTRUE 6455
6453: GO 6481
6455: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6456: LD_ADDR_VAR 0 3
6460: PUSH
6461: LD_INT 2
6463: PUSH
6464: LD_INT 3
6466: PUSH
6467: LD_INT 4
6469: PUSH
6470: LD_INT 5
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: ST_TO_ADDR
6479: GO 7304
6481: LD_INT 7
6483: DOUBLE
6484: EQUAL
6485: IFTRUE 6489
6487: GO 6515
6489: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6490: LD_ADDR_VAR 0 3
6494: PUSH
6495: LD_INT 2
6497: PUSH
6498: LD_INT 3
6500: PUSH
6501: LD_INT 4
6503: PUSH
6504: LD_INT 5
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: ST_TO_ADDR
6513: GO 7304
6515: LD_INT 12
6517: DOUBLE
6518: EQUAL
6519: IFTRUE 6523
6521: GO 6549
6523: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6524: LD_ADDR_VAR 0 3
6528: PUSH
6529: LD_INT 2
6531: PUSH
6532: LD_INT 3
6534: PUSH
6535: LD_INT 4
6537: PUSH
6538: LD_INT 5
6540: PUSH
6541: EMPTY
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: ST_TO_ADDR
6547: GO 7304
6549: LD_INT 13
6551: DOUBLE
6552: EQUAL
6553: IFTRUE 6557
6555: GO 6583
6557: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6558: LD_ADDR_VAR 0 3
6562: PUSH
6563: LD_INT 2
6565: PUSH
6566: LD_INT 3
6568: PUSH
6569: LD_INT 4
6571: PUSH
6572: LD_INT 5
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: ST_TO_ADDR
6581: GO 7304
6583: LD_INT 14
6585: DOUBLE
6586: EQUAL
6587: IFTRUE 6591
6589: GO 6609
6591: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6592: LD_ADDR_VAR 0 3
6596: PUSH
6597: LD_INT 4
6599: PUSH
6600: LD_INT 5
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: ST_TO_ADDR
6607: GO 7304
6609: LD_INT 6
6611: DOUBLE
6612: EQUAL
6613: IFTRUE 6617
6615: GO 6635
6617: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6618: LD_ADDR_VAR 0 3
6622: PUSH
6623: LD_INT 4
6625: PUSH
6626: LD_INT 5
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: ST_TO_ADDR
6633: GO 7304
6635: LD_INT 10
6637: DOUBLE
6638: EQUAL
6639: IFTRUE 6643
6641: GO 6661
6643: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6644: LD_ADDR_VAR 0 3
6648: PUSH
6649: LD_INT 4
6651: PUSH
6652: LD_INT 5
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: ST_TO_ADDR
6659: GO 7304
6661: LD_INT 22
6663: DOUBLE
6664: EQUAL
6665: IFTRUE 6669
6667: GO 6695
6669: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6670: LD_ADDR_VAR 0 3
6674: PUSH
6675: LD_INT 11
6677: PUSH
6678: LD_INT 12
6680: PUSH
6681: LD_INT 13
6683: PUSH
6684: LD_INT 14
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: ST_TO_ADDR
6693: GO 7304
6695: LD_INT 23
6697: DOUBLE
6698: EQUAL
6699: IFTRUE 6703
6701: GO 6729
6703: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6704: LD_ADDR_VAR 0 3
6708: PUSH
6709: LD_INT 11
6711: PUSH
6712: LD_INT 12
6714: PUSH
6715: LD_INT 13
6717: PUSH
6718: LD_INT 14
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: ST_TO_ADDR
6727: GO 7304
6729: LD_INT 24
6731: DOUBLE
6732: EQUAL
6733: IFTRUE 6737
6735: GO 6763
6737: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: LD_INT 11
6745: PUSH
6746: LD_INT 12
6748: PUSH
6749: LD_INT 13
6751: PUSH
6752: LD_INT 14
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: ST_TO_ADDR
6761: GO 7304
6763: LD_INT 30
6765: DOUBLE
6766: EQUAL
6767: IFTRUE 6771
6769: GO 6797
6771: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6772: LD_ADDR_VAR 0 3
6776: PUSH
6777: LD_INT 11
6779: PUSH
6780: LD_INT 12
6782: PUSH
6783: LD_INT 13
6785: PUSH
6786: LD_INT 14
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: ST_TO_ADDR
6795: GO 7304
6797: LD_INT 25
6799: DOUBLE
6800: EQUAL
6801: IFTRUE 6805
6803: GO 6823
6805: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6806: LD_ADDR_VAR 0 3
6810: PUSH
6811: LD_INT 13
6813: PUSH
6814: LD_INT 14
6816: PUSH
6817: EMPTY
6818: LIST
6819: LIST
6820: ST_TO_ADDR
6821: GO 7304
6823: LD_INT 27
6825: DOUBLE
6826: EQUAL
6827: IFTRUE 6831
6829: GO 6849
6831: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6832: LD_ADDR_VAR 0 3
6836: PUSH
6837: LD_INT 13
6839: PUSH
6840: LD_INT 14
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: ST_TO_ADDR
6847: GO 7304
6849: LD_INT 92
6851: DOUBLE
6852: EQUAL
6853: IFTRUE 6857
6855: GO 6883
6857: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6858: LD_ADDR_VAR 0 3
6862: PUSH
6863: LD_INT 11
6865: PUSH
6866: LD_INT 12
6868: PUSH
6869: LD_INT 13
6871: PUSH
6872: LD_INT 14
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: ST_TO_ADDR
6881: GO 7304
6883: LD_INT 28
6885: DOUBLE
6886: EQUAL
6887: IFTRUE 6891
6889: GO 6909
6891: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6892: LD_ADDR_VAR 0 3
6896: PUSH
6897: LD_INT 13
6899: PUSH
6900: LD_INT 14
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: ST_TO_ADDR
6907: GO 7304
6909: LD_INT 29
6911: DOUBLE
6912: EQUAL
6913: IFTRUE 6917
6915: GO 6935
6917: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6918: LD_ADDR_VAR 0 3
6922: PUSH
6923: LD_INT 13
6925: PUSH
6926: LD_INT 14
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: ST_TO_ADDR
6933: GO 7304
6935: LD_INT 31
6937: DOUBLE
6938: EQUAL
6939: IFTRUE 6943
6941: GO 6961
6943: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6944: LD_ADDR_VAR 0 3
6948: PUSH
6949: LD_INT 13
6951: PUSH
6952: LD_INT 14
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: ST_TO_ADDR
6959: GO 7304
6961: LD_INT 26
6963: DOUBLE
6964: EQUAL
6965: IFTRUE 6969
6967: GO 6987
6969: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6970: LD_ADDR_VAR 0 3
6974: PUSH
6975: LD_INT 13
6977: PUSH
6978: LD_INT 14
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: ST_TO_ADDR
6985: GO 7304
6987: LD_INT 42
6989: DOUBLE
6990: EQUAL
6991: IFTRUE 6995
6993: GO 7021
6995: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6996: LD_ADDR_VAR 0 3
7000: PUSH
7001: LD_INT 21
7003: PUSH
7004: LD_INT 22
7006: PUSH
7007: LD_INT 23
7009: PUSH
7010: LD_INT 24
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: ST_TO_ADDR
7019: GO 7304
7021: LD_INT 43
7023: DOUBLE
7024: EQUAL
7025: IFTRUE 7029
7027: GO 7055
7029: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7030: LD_ADDR_VAR 0 3
7034: PUSH
7035: LD_INT 21
7037: PUSH
7038: LD_INT 22
7040: PUSH
7041: LD_INT 23
7043: PUSH
7044: LD_INT 24
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: ST_TO_ADDR
7053: GO 7304
7055: LD_INT 44
7057: DOUBLE
7058: EQUAL
7059: IFTRUE 7063
7061: GO 7089
7063: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7064: LD_ADDR_VAR 0 3
7068: PUSH
7069: LD_INT 21
7071: PUSH
7072: LD_INT 22
7074: PUSH
7075: LD_INT 23
7077: PUSH
7078: LD_INT 24
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: LIST
7085: LIST
7086: ST_TO_ADDR
7087: GO 7304
7089: LD_INT 45
7091: DOUBLE
7092: EQUAL
7093: IFTRUE 7097
7095: GO 7123
7097: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7098: LD_ADDR_VAR 0 3
7102: PUSH
7103: LD_INT 21
7105: PUSH
7106: LD_INT 22
7108: PUSH
7109: LD_INT 23
7111: PUSH
7112: LD_INT 24
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: ST_TO_ADDR
7121: GO 7304
7123: LD_INT 49
7125: DOUBLE
7126: EQUAL
7127: IFTRUE 7131
7129: GO 7157
7131: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7132: LD_ADDR_VAR 0 3
7136: PUSH
7137: LD_INT 21
7139: PUSH
7140: LD_INT 22
7142: PUSH
7143: LD_INT 23
7145: PUSH
7146: LD_INT 24
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: ST_TO_ADDR
7155: GO 7304
7157: LD_INT 51
7159: DOUBLE
7160: EQUAL
7161: IFTRUE 7165
7163: GO 7191
7165: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7166: LD_ADDR_VAR 0 3
7170: PUSH
7171: LD_INT 21
7173: PUSH
7174: LD_INT 22
7176: PUSH
7177: LD_INT 23
7179: PUSH
7180: LD_INT 24
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: ST_TO_ADDR
7189: GO 7304
7191: LD_INT 52
7193: DOUBLE
7194: EQUAL
7195: IFTRUE 7199
7197: GO 7225
7199: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7200: LD_ADDR_VAR 0 3
7204: PUSH
7205: LD_INT 21
7207: PUSH
7208: LD_INT 22
7210: PUSH
7211: LD_INT 23
7213: PUSH
7214: LD_INT 24
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: ST_TO_ADDR
7223: GO 7304
7225: LD_INT 53
7227: DOUBLE
7228: EQUAL
7229: IFTRUE 7233
7231: GO 7251
7233: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7234: LD_ADDR_VAR 0 3
7238: PUSH
7239: LD_INT 23
7241: PUSH
7242: LD_INT 24
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: ST_TO_ADDR
7249: GO 7304
7251: LD_INT 46
7253: DOUBLE
7254: EQUAL
7255: IFTRUE 7259
7257: GO 7277
7259: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7260: LD_ADDR_VAR 0 3
7264: PUSH
7265: LD_INT 23
7267: PUSH
7268: LD_INT 24
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: ST_TO_ADDR
7275: GO 7304
7277: LD_INT 47
7279: DOUBLE
7280: EQUAL
7281: IFTRUE 7285
7283: GO 7303
7285: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7286: LD_ADDR_VAR 0 3
7290: PUSH
7291: LD_INT 23
7293: PUSH
7294: LD_INT 24
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: ST_TO_ADDR
7301: GO 7304
7303: POP
// result := ( chassis in result ) ;
7304: LD_ADDR_VAR 0 3
7308: PUSH
7309: LD_VAR 0 1
7313: PUSH
7314: LD_VAR 0 3
7318: IN
7319: ST_TO_ADDR
// end ;
7320: LD_VAR 0 3
7324: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7325: LD_INT 0
7327: PPUSH
7328: PPUSH
7329: PPUSH
7330: PPUSH
7331: PPUSH
7332: PPUSH
7333: PPUSH
// result := array ;
7334: LD_ADDR_VAR 0 5
7338: PUSH
7339: LD_VAR 0 1
7343: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7344: LD_VAR 0 1
7348: NOT
7349: PUSH
7350: LD_VAR 0 2
7354: NOT
7355: OR
7356: PUSH
7357: LD_VAR 0 3
7361: NOT
7362: OR
7363: PUSH
7364: LD_VAR 0 2
7368: PUSH
7369: LD_VAR 0 1
7373: GREATER
7374: OR
7375: PUSH
7376: LD_VAR 0 3
7380: PUSH
7381: LD_VAR 0 1
7385: GREATER
7386: OR
7387: IFFALSE 7391
// exit ;
7389: GO 7687
// if direction then
7391: LD_VAR 0 4
7395: IFFALSE 7459
// begin d := 1 ;
7397: LD_ADDR_VAR 0 9
7401: PUSH
7402: LD_INT 1
7404: ST_TO_ADDR
// if i_from > i_to then
7405: LD_VAR 0 2
7409: PUSH
7410: LD_VAR 0 3
7414: GREATER
7415: IFFALSE 7441
// length := ( array - i_from ) + i_to else
7417: LD_ADDR_VAR 0 11
7421: PUSH
7422: LD_VAR 0 1
7426: PUSH
7427: LD_VAR 0 2
7431: MINUS
7432: PUSH
7433: LD_VAR 0 3
7437: PLUS
7438: ST_TO_ADDR
7439: GO 7457
// length := i_to - i_from ;
7441: LD_ADDR_VAR 0 11
7445: PUSH
7446: LD_VAR 0 3
7450: PUSH
7451: LD_VAR 0 2
7455: MINUS
7456: ST_TO_ADDR
// end else
7457: GO 7520
// begin d := - 1 ;
7459: LD_ADDR_VAR 0 9
7463: PUSH
7464: LD_INT 1
7466: NEG
7467: ST_TO_ADDR
// if i_from > i_to then
7468: LD_VAR 0 2
7472: PUSH
7473: LD_VAR 0 3
7477: GREATER
7478: IFFALSE 7498
// length := i_from - i_to else
7480: LD_ADDR_VAR 0 11
7484: PUSH
7485: LD_VAR 0 2
7489: PUSH
7490: LD_VAR 0 3
7494: MINUS
7495: ST_TO_ADDR
7496: GO 7520
// length := ( array - i_to ) + i_from ;
7498: LD_ADDR_VAR 0 11
7502: PUSH
7503: LD_VAR 0 1
7507: PUSH
7508: LD_VAR 0 3
7512: MINUS
7513: PUSH
7514: LD_VAR 0 2
7518: PLUS
7519: ST_TO_ADDR
// end ; if not length then
7520: LD_VAR 0 11
7524: NOT
7525: IFFALSE 7529
// exit ;
7527: GO 7687
// tmp := array ;
7529: LD_ADDR_VAR 0 10
7533: PUSH
7534: LD_VAR 0 1
7538: ST_TO_ADDR
// for i = 1 to length do
7539: LD_ADDR_VAR 0 6
7543: PUSH
7544: DOUBLE
7545: LD_INT 1
7547: DEC
7548: ST_TO_ADDR
7549: LD_VAR 0 11
7553: PUSH
7554: FOR_TO
7555: IFFALSE 7675
// begin for j = 1 to array do
7557: LD_ADDR_VAR 0 7
7561: PUSH
7562: DOUBLE
7563: LD_INT 1
7565: DEC
7566: ST_TO_ADDR
7567: LD_VAR 0 1
7571: PUSH
7572: FOR_TO
7573: IFFALSE 7661
// begin k := j + d ;
7575: LD_ADDR_VAR 0 8
7579: PUSH
7580: LD_VAR 0 7
7584: PUSH
7585: LD_VAR 0 9
7589: PLUS
7590: ST_TO_ADDR
// if k > array then
7591: LD_VAR 0 8
7595: PUSH
7596: LD_VAR 0 1
7600: GREATER
7601: IFFALSE 7611
// k := 1 ;
7603: LD_ADDR_VAR 0 8
7607: PUSH
7608: LD_INT 1
7610: ST_TO_ADDR
// if not k then
7611: LD_VAR 0 8
7615: NOT
7616: IFFALSE 7628
// k := array ;
7618: LD_ADDR_VAR 0 8
7622: PUSH
7623: LD_VAR 0 1
7627: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7628: LD_ADDR_VAR 0 10
7632: PUSH
7633: LD_VAR 0 10
7637: PPUSH
7638: LD_VAR 0 8
7642: PPUSH
7643: LD_VAR 0 1
7647: PUSH
7648: LD_VAR 0 7
7652: ARRAY
7653: PPUSH
7654: CALL_OW 1
7658: ST_TO_ADDR
// end ;
7659: GO 7572
7661: POP
7662: POP
// array := tmp ;
7663: LD_ADDR_VAR 0 1
7667: PUSH
7668: LD_VAR 0 10
7672: ST_TO_ADDR
// end ;
7673: GO 7554
7675: POP
7676: POP
// result := array ;
7677: LD_ADDR_VAR 0 5
7681: PUSH
7682: LD_VAR 0 1
7686: ST_TO_ADDR
// end ;
7687: LD_VAR 0 5
7691: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7692: LD_INT 0
7694: PPUSH
7695: PPUSH
// result := 0 ;
7696: LD_ADDR_VAR 0 3
7700: PUSH
7701: LD_INT 0
7703: ST_TO_ADDR
// if not array or not value in array then
7704: LD_VAR 0 1
7708: NOT
7709: PUSH
7710: LD_VAR 0 2
7714: PUSH
7715: LD_VAR 0 1
7719: IN
7720: NOT
7721: OR
7722: IFFALSE 7726
// exit ;
7724: GO 7780
// for i = 1 to array do
7726: LD_ADDR_VAR 0 4
7730: PUSH
7731: DOUBLE
7732: LD_INT 1
7734: DEC
7735: ST_TO_ADDR
7736: LD_VAR 0 1
7740: PUSH
7741: FOR_TO
7742: IFFALSE 7778
// if value = array [ i ] then
7744: LD_VAR 0 2
7748: PUSH
7749: LD_VAR 0 1
7753: PUSH
7754: LD_VAR 0 4
7758: ARRAY
7759: EQUAL
7760: IFFALSE 7776
// begin result := i ;
7762: LD_ADDR_VAR 0 3
7766: PUSH
7767: LD_VAR 0 4
7771: ST_TO_ADDR
// exit ;
7772: POP
7773: POP
7774: GO 7780
// end ;
7776: GO 7741
7778: POP
7779: POP
// end ;
7780: LD_VAR 0 3
7784: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7785: LD_INT 0
7787: PPUSH
// vc_chassis := chassis ;
7788: LD_ADDR_OWVAR 37
7792: PUSH
7793: LD_VAR 0 1
7797: ST_TO_ADDR
// vc_engine := engine ;
7798: LD_ADDR_OWVAR 39
7802: PUSH
7803: LD_VAR 0 2
7807: ST_TO_ADDR
// vc_control := control ;
7808: LD_ADDR_OWVAR 38
7812: PUSH
7813: LD_VAR 0 3
7817: ST_TO_ADDR
// vc_weapon := weapon ;
7818: LD_ADDR_OWVAR 40
7822: PUSH
7823: LD_VAR 0 4
7827: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7828: LD_ADDR_OWVAR 41
7832: PUSH
7833: LD_VAR 0 5
7837: ST_TO_ADDR
// end ;
7838: LD_VAR 0 6
7842: RET
// export function WantPlant ( unit ) ; var task ; begin
7843: LD_INT 0
7845: PPUSH
7846: PPUSH
// result := false ;
7847: LD_ADDR_VAR 0 2
7851: PUSH
7852: LD_INT 0
7854: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7855: LD_ADDR_VAR 0 3
7859: PUSH
7860: LD_VAR 0 1
7864: PPUSH
7865: CALL_OW 437
7869: ST_TO_ADDR
// if task then
7870: LD_VAR 0 3
7874: IFFALSE 7902
// if task [ 1 ] [ 1 ] = p then
7876: LD_VAR 0 3
7880: PUSH
7881: LD_INT 1
7883: ARRAY
7884: PUSH
7885: LD_INT 1
7887: ARRAY
7888: PUSH
7889: LD_STRING p
7891: EQUAL
7892: IFFALSE 7902
// result := true ;
7894: LD_ADDR_VAR 0 2
7898: PUSH
7899: LD_INT 1
7901: ST_TO_ADDR
// end ;
7902: LD_VAR 0 2
7906: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7907: LD_INT 0
7909: PPUSH
7910: PPUSH
7911: PPUSH
7912: PPUSH
// if pos < 1 then
7913: LD_VAR 0 2
7917: PUSH
7918: LD_INT 1
7920: LESS
7921: IFFALSE 7925
// exit ;
7923: GO 8228
// if pos = 1 then
7925: LD_VAR 0 2
7929: PUSH
7930: LD_INT 1
7932: EQUAL
7933: IFFALSE 7966
// result := Replace ( arr , pos [ 1 ] , value ) else
7935: LD_ADDR_VAR 0 4
7939: PUSH
7940: LD_VAR 0 1
7944: PPUSH
7945: LD_VAR 0 2
7949: PUSH
7950: LD_INT 1
7952: ARRAY
7953: PPUSH
7954: LD_VAR 0 3
7958: PPUSH
7959: CALL_OW 1
7963: ST_TO_ADDR
7964: GO 8228
// begin tmp := arr ;
7966: LD_ADDR_VAR 0 6
7970: PUSH
7971: LD_VAR 0 1
7975: ST_TO_ADDR
// s_arr := [ tmp ] ;
7976: LD_ADDR_VAR 0 7
7980: PUSH
7981: LD_VAR 0 6
7985: PUSH
7986: EMPTY
7987: LIST
7988: ST_TO_ADDR
// for i = 1 to pos - 1 do
7989: LD_ADDR_VAR 0 5
7993: PUSH
7994: DOUBLE
7995: LD_INT 1
7997: DEC
7998: ST_TO_ADDR
7999: LD_VAR 0 2
8003: PUSH
8004: LD_INT 1
8006: MINUS
8007: PUSH
8008: FOR_TO
8009: IFFALSE 8054
// begin tmp := tmp [ pos [ i ] ] ;
8011: LD_ADDR_VAR 0 6
8015: PUSH
8016: LD_VAR 0 6
8020: PUSH
8021: LD_VAR 0 2
8025: PUSH
8026: LD_VAR 0 5
8030: ARRAY
8031: ARRAY
8032: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8033: LD_ADDR_VAR 0 7
8037: PUSH
8038: LD_VAR 0 7
8042: PUSH
8043: LD_VAR 0 6
8047: PUSH
8048: EMPTY
8049: LIST
8050: ADD
8051: ST_TO_ADDR
// end ;
8052: GO 8008
8054: POP
8055: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8056: LD_ADDR_VAR 0 6
8060: PUSH
8061: LD_VAR 0 6
8065: PPUSH
8066: LD_VAR 0 2
8070: PUSH
8071: LD_VAR 0 2
8075: ARRAY
8076: PPUSH
8077: LD_VAR 0 3
8081: PPUSH
8082: CALL_OW 1
8086: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8087: LD_ADDR_VAR 0 7
8091: PUSH
8092: LD_VAR 0 7
8096: PPUSH
8097: LD_VAR 0 7
8101: PPUSH
8102: LD_VAR 0 6
8106: PPUSH
8107: CALL_OW 1
8111: ST_TO_ADDR
// for i = s_arr downto 2 do
8112: LD_ADDR_VAR 0 5
8116: PUSH
8117: DOUBLE
8118: LD_VAR 0 7
8122: INC
8123: ST_TO_ADDR
8124: LD_INT 2
8126: PUSH
8127: FOR_DOWNTO
8128: IFFALSE 8212
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8130: LD_ADDR_VAR 0 6
8134: PUSH
8135: LD_VAR 0 7
8139: PUSH
8140: LD_VAR 0 5
8144: PUSH
8145: LD_INT 1
8147: MINUS
8148: ARRAY
8149: PPUSH
8150: LD_VAR 0 2
8154: PUSH
8155: LD_VAR 0 5
8159: PUSH
8160: LD_INT 1
8162: MINUS
8163: ARRAY
8164: PPUSH
8165: LD_VAR 0 7
8169: PUSH
8170: LD_VAR 0 5
8174: ARRAY
8175: PPUSH
8176: CALL_OW 1
8180: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8181: LD_ADDR_VAR 0 7
8185: PUSH
8186: LD_VAR 0 7
8190: PPUSH
8191: LD_VAR 0 5
8195: PUSH
8196: LD_INT 1
8198: MINUS
8199: PPUSH
8200: LD_VAR 0 6
8204: PPUSH
8205: CALL_OW 1
8209: ST_TO_ADDR
// end ;
8210: GO 8127
8212: POP
8213: POP
// result := s_arr [ 1 ] ;
8214: LD_ADDR_VAR 0 4
8218: PUSH
8219: LD_VAR 0 7
8223: PUSH
8224: LD_INT 1
8226: ARRAY
8227: ST_TO_ADDR
// end ; end ;
8228: LD_VAR 0 4
8232: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8233: LD_INT 0
8235: PPUSH
8236: PPUSH
// if not list then
8237: LD_VAR 0 1
8241: NOT
8242: IFFALSE 8246
// exit ;
8244: GO 8337
// i := list [ pos1 ] ;
8246: LD_ADDR_VAR 0 5
8250: PUSH
8251: LD_VAR 0 1
8255: PUSH
8256: LD_VAR 0 2
8260: ARRAY
8261: ST_TO_ADDR
// if not i then
8262: LD_VAR 0 5
8266: NOT
8267: IFFALSE 8271
// exit ;
8269: GO 8337
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8271: LD_ADDR_VAR 0 1
8275: PUSH
8276: LD_VAR 0 1
8280: PPUSH
8281: LD_VAR 0 2
8285: PPUSH
8286: LD_VAR 0 1
8290: PUSH
8291: LD_VAR 0 3
8295: ARRAY
8296: PPUSH
8297: CALL_OW 1
8301: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8302: LD_ADDR_VAR 0 1
8306: PUSH
8307: LD_VAR 0 1
8311: PPUSH
8312: LD_VAR 0 3
8316: PPUSH
8317: LD_VAR 0 5
8321: PPUSH
8322: CALL_OW 1
8326: ST_TO_ADDR
// result := list ;
8327: LD_ADDR_VAR 0 4
8331: PUSH
8332: LD_VAR 0 1
8336: ST_TO_ADDR
// end ;
8337: LD_VAR 0 4
8341: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8342: LD_INT 0
8344: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8345: LD_ADDR_VAR 0 5
8349: PUSH
8350: LD_VAR 0 1
8354: PPUSH
8355: CALL_OW 250
8359: PPUSH
8360: LD_VAR 0 1
8364: PPUSH
8365: CALL_OW 251
8369: PPUSH
8370: LD_VAR 0 2
8374: PPUSH
8375: LD_VAR 0 3
8379: PPUSH
8380: LD_VAR 0 4
8384: PPUSH
8385: CALL 8395 0 5
8389: ST_TO_ADDR
// end ;
8390: LD_VAR 0 5
8394: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8395: LD_INT 0
8397: PPUSH
8398: PPUSH
8399: PPUSH
8400: PPUSH
// if not list then
8401: LD_VAR 0 3
8405: NOT
8406: IFFALSE 8410
// exit ;
8408: GO 8798
// result := [ ] ;
8410: LD_ADDR_VAR 0 6
8414: PUSH
8415: EMPTY
8416: ST_TO_ADDR
// for i in list do
8417: LD_ADDR_VAR 0 7
8421: PUSH
8422: LD_VAR 0 3
8426: PUSH
8427: FOR_IN
8428: IFFALSE 8630
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8430: LD_ADDR_VAR 0 9
8434: PUSH
8435: LD_VAR 0 7
8439: PPUSH
8440: LD_VAR 0 1
8444: PPUSH
8445: LD_VAR 0 2
8449: PPUSH
8450: CALL_OW 297
8454: ST_TO_ADDR
// if not result then
8455: LD_VAR 0 6
8459: NOT
8460: IFFALSE 8486
// result := [ [ i , tmp ] ] else
8462: LD_ADDR_VAR 0 6
8466: PUSH
8467: LD_VAR 0 7
8471: PUSH
8472: LD_VAR 0 9
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: PUSH
8481: EMPTY
8482: LIST
8483: ST_TO_ADDR
8484: GO 8628
// begin if result [ result ] [ 2 ] < tmp then
8486: LD_VAR 0 6
8490: PUSH
8491: LD_VAR 0 6
8495: ARRAY
8496: PUSH
8497: LD_INT 2
8499: ARRAY
8500: PUSH
8501: LD_VAR 0 9
8505: LESS
8506: IFFALSE 8548
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8508: LD_ADDR_VAR 0 6
8512: PUSH
8513: LD_VAR 0 6
8517: PPUSH
8518: LD_VAR 0 6
8522: PUSH
8523: LD_INT 1
8525: PLUS
8526: PPUSH
8527: LD_VAR 0 7
8531: PUSH
8532: LD_VAR 0 9
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: PPUSH
8541: CALL_OW 2
8545: ST_TO_ADDR
8546: GO 8628
// for j = 1 to result do
8548: LD_ADDR_VAR 0 8
8552: PUSH
8553: DOUBLE
8554: LD_INT 1
8556: DEC
8557: ST_TO_ADDR
8558: LD_VAR 0 6
8562: PUSH
8563: FOR_TO
8564: IFFALSE 8626
// begin if tmp < result [ j ] [ 2 ] then
8566: LD_VAR 0 9
8570: PUSH
8571: LD_VAR 0 6
8575: PUSH
8576: LD_VAR 0 8
8580: ARRAY
8581: PUSH
8582: LD_INT 2
8584: ARRAY
8585: LESS
8586: IFFALSE 8624
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8588: LD_ADDR_VAR 0 6
8592: PUSH
8593: LD_VAR 0 6
8597: PPUSH
8598: LD_VAR 0 8
8602: PPUSH
8603: LD_VAR 0 7
8607: PUSH
8608: LD_VAR 0 9
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: PPUSH
8617: CALL_OW 2
8621: ST_TO_ADDR
// break ;
8622: GO 8626
// end ; end ;
8624: GO 8563
8626: POP
8627: POP
// end ; end ;
8628: GO 8427
8630: POP
8631: POP
// if result and not asc then
8632: LD_VAR 0 6
8636: PUSH
8637: LD_VAR 0 4
8641: NOT
8642: AND
8643: IFFALSE 8718
// begin tmp := result ;
8645: LD_ADDR_VAR 0 9
8649: PUSH
8650: LD_VAR 0 6
8654: ST_TO_ADDR
// for i = tmp downto 1 do
8655: LD_ADDR_VAR 0 7
8659: PUSH
8660: DOUBLE
8661: LD_VAR 0 9
8665: INC
8666: ST_TO_ADDR
8667: LD_INT 1
8669: PUSH
8670: FOR_DOWNTO
8671: IFFALSE 8716
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8673: LD_ADDR_VAR 0 6
8677: PUSH
8678: LD_VAR 0 6
8682: PPUSH
8683: LD_VAR 0 9
8687: PUSH
8688: LD_VAR 0 7
8692: MINUS
8693: PUSH
8694: LD_INT 1
8696: PLUS
8697: PPUSH
8698: LD_VAR 0 9
8702: PUSH
8703: LD_VAR 0 7
8707: ARRAY
8708: PPUSH
8709: CALL_OW 1
8713: ST_TO_ADDR
8714: GO 8670
8716: POP
8717: POP
// end ; tmp := [ ] ;
8718: LD_ADDR_VAR 0 9
8722: PUSH
8723: EMPTY
8724: ST_TO_ADDR
// if mode then
8725: LD_VAR 0 5
8729: IFFALSE 8798
// begin for i = 1 to result do
8731: LD_ADDR_VAR 0 7
8735: PUSH
8736: DOUBLE
8737: LD_INT 1
8739: DEC
8740: ST_TO_ADDR
8741: LD_VAR 0 6
8745: PUSH
8746: FOR_TO
8747: IFFALSE 8786
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8749: LD_ADDR_VAR 0 9
8753: PUSH
8754: LD_VAR 0 9
8758: PPUSH
8759: LD_VAR 0 7
8763: PPUSH
8764: LD_VAR 0 6
8768: PUSH
8769: LD_VAR 0 7
8773: ARRAY
8774: PUSH
8775: LD_INT 1
8777: ARRAY
8778: PPUSH
8779: CALL_OW 1
8783: ST_TO_ADDR
8784: GO 8746
8786: POP
8787: POP
// result := tmp ;
8788: LD_ADDR_VAR 0 6
8792: PUSH
8793: LD_VAR 0 9
8797: ST_TO_ADDR
// end ; end ;
8798: LD_VAR 0 6
8802: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8803: LD_INT 0
8805: PPUSH
8806: PPUSH
8807: PPUSH
8808: PPUSH
8809: PPUSH
8810: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8811: LD_ADDR_VAR 0 5
8815: PUSH
8816: LD_INT 0
8818: PUSH
8819: LD_INT 0
8821: PUSH
8822: LD_INT 0
8824: PUSH
8825: EMPTY
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: ST_TO_ADDR
// if not x or not y then
8833: LD_VAR 0 2
8837: NOT
8838: PUSH
8839: LD_VAR 0 3
8843: NOT
8844: OR
8845: IFFALSE 8849
// exit ;
8847: GO 10499
// if not range then
8849: LD_VAR 0 4
8853: NOT
8854: IFFALSE 8864
// range := 10 ;
8856: LD_ADDR_VAR 0 4
8860: PUSH
8861: LD_INT 10
8863: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8864: LD_ADDR_VAR 0 8
8868: PUSH
8869: LD_INT 81
8871: PUSH
8872: LD_VAR 0 1
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: PUSH
8881: LD_INT 92
8883: PUSH
8884: LD_VAR 0 2
8888: PUSH
8889: LD_VAR 0 3
8893: PUSH
8894: LD_VAR 0 4
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: PUSH
8905: LD_INT 3
8907: PUSH
8908: LD_INT 21
8910: PUSH
8911: LD_INT 3
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: LIST
8926: PPUSH
8927: CALL_OW 69
8931: ST_TO_ADDR
// if not tmp then
8932: LD_VAR 0 8
8936: NOT
8937: IFFALSE 8941
// exit ;
8939: GO 10499
// for i in tmp do
8941: LD_ADDR_VAR 0 6
8945: PUSH
8946: LD_VAR 0 8
8950: PUSH
8951: FOR_IN
8952: IFFALSE 10474
// begin points := [ 0 , 0 , 0 ] ;
8954: LD_ADDR_VAR 0 9
8958: PUSH
8959: LD_INT 0
8961: PUSH
8962: LD_INT 0
8964: PUSH
8965: LD_INT 0
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: LIST
8972: ST_TO_ADDR
// bpoints := 1 ;
8973: LD_ADDR_VAR 0 10
8977: PUSH
8978: LD_INT 1
8980: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8981: LD_VAR 0 6
8985: PPUSH
8986: CALL_OW 247
8990: PUSH
8991: LD_INT 1
8993: DOUBLE
8994: EQUAL
8995: IFTRUE 8999
8997: GO 9577
8999: POP
// begin if GetClass ( i ) = 1 then
9000: LD_VAR 0 6
9004: PPUSH
9005: CALL_OW 257
9009: PUSH
9010: LD_INT 1
9012: EQUAL
9013: IFFALSE 9034
// points := [ 10 , 5 , 3 ] ;
9015: LD_ADDR_VAR 0 9
9019: PUSH
9020: LD_INT 10
9022: PUSH
9023: LD_INT 5
9025: PUSH
9026: LD_INT 3
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: LIST
9033: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9034: LD_VAR 0 6
9038: PPUSH
9039: CALL_OW 257
9043: PUSH
9044: LD_INT 2
9046: PUSH
9047: LD_INT 3
9049: PUSH
9050: LD_INT 4
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: LIST
9057: IN
9058: IFFALSE 9079
// points := [ 3 , 2 , 1 ] ;
9060: LD_ADDR_VAR 0 9
9064: PUSH
9065: LD_INT 3
9067: PUSH
9068: LD_INT 2
9070: PUSH
9071: LD_INT 1
9073: PUSH
9074: EMPTY
9075: LIST
9076: LIST
9077: LIST
9078: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9079: LD_VAR 0 6
9083: PPUSH
9084: CALL_OW 257
9088: PUSH
9089: LD_INT 5
9091: EQUAL
9092: IFFALSE 9113
// points := [ 130 , 5 , 2 ] ;
9094: LD_ADDR_VAR 0 9
9098: PUSH
9099: LD_INT 130
9101: PUSH
9102: LD_INT 5
9104: PUSH
9105: LD_INT 2
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: LIST
9112: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9113: LD_VAR 0 6
9117: PPUSH
9118: CALL_OW 257
9122: PUSH
9123: LD_INT 8
9125: EQUAL
9126: IFFALSE 9147
// points := [ 35 , 35 , 30 ] ;
9128: LD_ADDR_VAR 0 9
9132: PUSH
9133: LD_INT 35
9135: PUSH
9136: LD_INT 35
9138: PUSH
9139: LD_INT 30
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: LIST
9146: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9147: LD_VAR 0 6
9151: PPUSH
9152: CALL_OW 257
9156: PUSH
9157: LD_INT 9
9159: EQUAL
9160: IFFALSE 9181
// points := [ 20 , 55 , 40 ] ;
9162: LD_ADDR_VAR 0 9
9166: PUSH
9167: LD_INT 20
9169: PUSH
9170: LD_INT 55
9172: PUSH
9173: LD_INT 40
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: LIST
9180: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9181: LD_VAR 0 6
9185: PPUSH
9186: CALL_OW 257
9190: PUSH
9191: LD_INT 12
9193: PUSH
9194: LD_INT 16
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: IN
9201: IFFALSE 9222
// points := [ 5 , 3 , 2 ] ;
9203: LD_ADDR_VAR 0 9
9207: PUSH
9208: LD_INT 5
9210: PUSH
9211: LD_INT 3
9213: PUSH
9214: LD_INT 2
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: LIST
9221: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9222: LD_VAR 0 6
9226: PPUSH
9227: CALL_OW 257
9231: PUSH
9232: LD_INT 17
9234: EQUAL
9235: IFFALSE 9256
// points := [ 100 , 50 , 75 ] ;
9237: LD_ADDR_VAR 0 9
9241: PUSH
9242: LD_INT 100
9244: PUSH
9245: LD_INT 50
9247: PUSH
9248: LD_INT 75
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: LIST
9255: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9256: LD_VAR 0 6
9260: PPUSH
9261: CALL_OW 257
9265: PUSH
9266: LD_INT 15
9268: EQUAL
9269: IFFALSE 9290
// points := [ 10 , 5 , 3 ] ;
9271: LD_ADDR_VAR 0 9
9275: PUSH
9276: LD_INT 10
9278: PUSH
9279: LD_INT 5
9281: PUSH
9282: LD_INT 3
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: LIST
9289: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9290: LD_VAR 0 6
9294: PPUSH
9295: CALL_OW 257
9299: PUSH
9300: LD_INT 14
9302: EQUAL
9303: IFFALSE 9324
// points := [ 10 , 0 , 0 ] ;
9305: LD_ADDR_VAR 0 9
9309: PUSH
9310: LD_INT 10
9312: PUSH
9313: LD_INT 0
9315: PUSH
9316: LD_INT 0
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: LIST
9323: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9324: LD_VAR 0 6
9328: PPUSH
9329: CALL_OW 257
9333: PUSH
9334: LD_INT 11
9336: EQUAL
9337: IFFALSE 9358
// points := [ 30 , 10 , 5 ] ;
9339: LD_ADDR_VAR 0 9
9343: PUSH
9344: LD_INT 30
9346: PUSH
9347: LD_INT 10
9349: PUSH
9350: LD_INT 5
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: LIST
9357: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9358: LD_VAR 0 1
9362: PPUSH
9363: LD_INT 5
9365: PPUSH
9366: CALL_OW 321
9370: PUSH
9371: LD_INT 2
9373: EQUAL
9374: IFFALSE 9391
// bpoints := bpoints * 1.8 ;
9376: LD_ADDR_VAR 0 10
9380: PUSH
9381: LD_VAR 0 10
9385: PUSH
9386: LD_REAL  1.80000000000000E+0000
9389: MUL
9390: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9391: LD_VAR 0 6
9395: PPUSH
9396: CALL_OW 257
9400: PUSH
9401: LD_INT 1
9403: PUSH
9404: LD_INT 2
9406: PUSH
9407: LD_INT 3
9409: PUSH
9410: LD_INT 4
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: IN
9419: PUSH
9420: LD_VAR 0 1
9424: PPUSH
9425: LD_INT 51
9427: PPUSH
9428: CALL_OW 321
9432: PUSH
9433: LD_INT 2
9435: EQUAL
9436: AND
9437: IFFALSE 9454
// bpoints := bpoints * 1.2 ;
9439: LD_ADDR_VAR 0 10
9443: PUSH
9444: LD_VAR 0 10
9448: PUSH
9449: LD_REAL  1.20000000000000E+0000
9452: MUL
9453: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9454: LD_VAR 0 6
9458: PPUSH
9459: CALL_OW 257
9463: PUSH
9464: LD_INT 5
9466: PUSH
9467: LD_INT 7
9469: PUSH
9470: LD_INT 9
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: LIST
9477: IN
9478: PUSH
9479: LD_VAR 0 1
9483: PPUSH
9484: LD_INT 52
9486: PPUSH
9487: CALL_OW 321
9491: PUSH
9492: LD_INT 2
9494: EQUAL
9495: AND
9496: IFFALSE 9513
// bpoints := bpoints * 1.5 ;
9498: LD_ADDR_VAR 0 10
9502: PUSH
9503: LD_VAR 0 10
9507: PUSH
9508: LD_REAL  1.50000000000000E+0000
9511: MUL
9512: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9513: LD_VAR 0 1
9517: PPUSH
9518: LD_INT 66
9520: PPUSH
9521: CALL_OW 321
9525: PUSH
9526: LD_INT 2
9528: EQUAL
9529: IFFALSE 9546
// bpoints := bpoints * 1.1 ;
9531: LD_ADDR_VAR 0 10
9535: PUSH
9536: LD_VAR 0 10
9540: PUSH
9541: LD_REAL  1.10000000000000E+0000
9544: MUL
9545: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9546: LD_ADDR_VAR 0 10
9550: PUSH
9551: LD_VAR 0 10
9555: PUSH
9556: LD_VAR 0 6
9560: PPUSH
9561: LD_INT 1
9563: PPUSH
9564: CALL_OW 259
9568: PUSH
9569: LD_REAL  1.15000000000000E+0000
9572: MUL
9573: MUL
9574: ST_TO_ADDR
// end ; unit_vehicle :
9575: GO 10403
9577: LD_INT 2
9579: DOUBLE
9580: EQUAL
9581: IFTRUE 9585
9583: GO 10391
9585: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9586: LD_VAR 0 6
9590: PPUSH
9591: CALL_OW 264
9595: PUSH
9596: LD_INT 2
9598: PUSH
9599: LD_INT 42
9601: PUSH
9602: LD_INT 24
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: IN
9610: IFFALSE 9631
// points := [ 25 , 5 , 3 ] ;
9612: LD_ADDR_VAR 0 9
9616: PUSH
9617: LD_INT 25
9619: PUSH
9620: LD_INT 5
9622: PUSH
9623: LD_INT 3
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: LIST
9630: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9631: LD_VAR 0 6
9635: PPUSH
9636: CALL_OW 264
9640: PUSH
9641: LD_INT 4
9643: PUSH
9644: LD_INT 43
9646: PUSH
9647: LD_INT 25
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: IN
9655: IFFALSE 9676
// points := [ 40 , 15 , 5 ] ;
9657: LD_ADDR_VAR 0 9
9661: PUSH
9662: LD_INT 40
9664: PUSH
9665: LD_INT 15
9667: PUSH
9668: LD_INT 5
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: LIST
9675: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9676: LD_VAR 0 6
9680: PPUSH
9681: CALL_OW 264
9685: PUSH
9686: LD_INT 3
9688: PUSH
9689: LD_INT 23
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: IN
9696: IFFALSE 9717
// points := [ 7 , 25 , 8 ] ;
9698: LD_ADDR_VAR 0 9
9702: PUSH
9703: LD_INT 7
9705: PUSH
9706: LD_INT 25
9708: PUSH
9709: LD_INT 8
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: LIST
9716: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9717: LD_VAR 0 6
9721: PPUSH
9722: CALL_OW 264
9726: PUSH
9727: LD_INT 5
9729: PUSH
9730: LD_INT 27
9732: PUSH
9733: LD_INT 44
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: LIST
9740: IN
9741: IFFALSE 9762
// points := [ 14 , 50 , 16 ] ;
9743: LD_ADDR_VAR 0 9
9747: PUSH
9748: LD_INT 14
9750: PUSH
9751: LD_INT 50
9753: PUSH
9754: LD_INT 16
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: LIST
9761: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9762: LD_VAR 0 6
9766: PPUSH
9767: CALL_OW 264
9771: PUSH
9772: LD_INT 6
9774: PUSH
9775: LD_INT 46
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: IN
9782: IFFALSE 9803
// points := [ 32 , 120 , 70 ] ;
9784: LD_ADDR_VAR 0 9
9788: PUSH
9789: LD_INT 32
9791: PUSH
9792: LD_INT 120
9794: PUSH
9795: LD_INT 70
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: LIST
9802: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
9803: LD_VAR 0 6
9807: PPUSH
9808: CALL_OW 264
9812: PUSH
9813: LD_INT 7
9815: PUSH
9816: LD_INT 28
9818: PUSH
9819: LD_INT 45
9821: PUSH
9822: LD_INT 92
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: IN
9831: IFFALSE 9852
// points := [ 35 , 20 , 45 ] ;
9833: LD_ADDR_VAR 0 9
9837: PUSH
9838: LD_INT 35
9840: PUSH
9841: LD_INT 20
9843: PUSH
9844: LD_INT 45
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: LIST
9851: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9852: LD_VAR 0 6
9856: PPUSH
9857: CALL_OW 264
9861: PUSH
9862: LD_INT 47
9864: PUSH
9865: EMPTY
9866: LIST
9867: IN
9868: IFFALSE 9889
// points := [ 67 , 45 , 75 ] ;
9870: LD_ADDR_VAR 0 9
9874: PUSH
9875: LD_INT 67
9877: PUSH
9878: LD_INT 45
9880: PUSH
9881: LD_INT 75
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: LIST
9888: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9889: LD_VAR 0 6
9893: PPUSH
9894: CALL_OW 264
9898: PUSH
9899: LD_INT 26
9901: PUSH
9902: EMPTY
9903: LIST
9904: IN
9905: IFFALSE 9926
// points := [ 120 , 30 , 80 ] ;
9907: LD_ADDR_VAR 0 9
9911: PUSH
9912: LD_INT 120
9914: PUSH
9915: LD_INT 30
9917: PUSH
9918: LD_INT 80
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: LIST
9925: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9926: LD_VAR 0 6
9930: PPUSH
9931: CALL_OW 264
9935: PUSH
9936: LD_INT 22
9938: PUSH
9939: EMPTY
9940: LIST
9941: IN
9942: IFFALSE 9963
// points := [ 40 , 1 , 1 ] ;
9944: LD_ADDR_VAR 0 9
9948: PUSH
9949: LD_INT 40
9951: PUSH
9952: LD_INT 1
9954: PUSH
9955: LD_INT 1
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: LIST
9962: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9963: LD_VAR 0 6
9967: PPUSH
9968: CALL_OW 264
9972: PUSH
9973: LD_INT 29
9975: PUSH
9976: EMPTY
9977: LIST
9978: IN
9979: IFFALSE 10000
// points := [ 70 , 200 , 400 ] ;
9981: LD_ADDR_VAR 0 9
9985: PUSH
9986: LD_INT 70
9988: PUSH
9989: LD_INT 200
9991: PUSH
9992: LD_INT 400
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: LIST
9999: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10000: LD_VAR 0 6
10004: PPUSH
10005: CALL_OW 264
10009: PUSH
10010: LD_INT 14
10012: PUSH
10013: LD_INT 53
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: IN
10020: IFFALSE 10041
// points := [ 40 , 10 , 20 ] ;
10022: LD_ADDR_VAR 0 9
10026: PUSH
10027: LD_INT 40
10029: PUSH
10030: LD_INT 10
10032: PUSH
10033: LD_INT 20
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: LIST
10040: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10041: LD_VAR 0 6
10045: PPUSH
10046: CALL_OW 264
10050: PUSH
10051: LD_INT 9
10053: PUSH
10054: EMPTY
10055: LIST
10056: IN
10057: IFFALSE 10078
// points := [ 5 , 70 , 20 ] ;
10059: LD_ADDR_VAR 0 9
10063: PUSH
10064: LD_INT 5
10066: PUSH
10067: LD_INT 70
10069: PUSH
10070: LD_INT 20
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: LIST
10077: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10078: LD_VAR 0 6
10082: PPUSH
10083: CALL_OW 264
10087: PUSH
10088: LD_INT 10
10090: PUSH
10091: EMPTY
10092: LIST
10093: IN
10094: IFFALSE 10115
// points := [ 35 , 110 , 70 ] ;
10096: LD_ADDR_VAR 0 9
10100: PUSH
10101: LD_INT 35
10103: PUSH
10104: LD_INT 110
10106: PUSH
10107: LD_INT 70
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: LIST
10114: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10115: LD_VAR 0 6
10119: PPUSH
10120: CALL_OW 265
10124: PUSH
10125: LD_INT 25
10127: EQUAL
10128: IFFALSE 10149
// points := [ 80 , 65 , 100 ] ;
10130: LD_ADDR_VAR 0 9
10134: PUSH
10135: LD_INT 80
10137: PUSH
10138: LD_INT 65
10140: PUSH
10141: LD_INT 100
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: LIST
10148: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10149: LD_VAR 0 6
10153: PPUSH
10154: CALL_OW 263
10158: PUSH
10159: LD_INT 1
10161: EQUAL
10162: IFFALSE 10197
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10164: LD_ADDR_VAR 0 10
10168: PUSH
10169: LD_VAR 0 10
10173: PUSH
10174: LD_VAR 0 6
10178: PPUSH
10179: CALL_OW 311
10183: PPUSH
10184: LD_INT 3
10186: PPUSH
10187: CALL_OW 259
10191: PUSH
10192: LD_INT 4
10194: MUL
10195: MUL
10196: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10197: LD_VAR 0 6
10201: PPUSH
10202: CALL_OW 263
10206: PUSH
10207: LD_INT 2
10209: EQUAL
10210: IFFALSE 10261
// begin j := IsControledBy ( i ) ;
10212: LD_ADDR_VAR 0 7
10216: PUSH
10217: LD_VAR 0 6
10221: PPUSH
10222: CALL_OW 312
10226: ST_TO_ADDR
// if j then
10227: LD_VAR 0 7
10231: IFFALSE 10261
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10233: LD_ADDR_VAR 0 10
10237: PUSH
10238: LD_VAR 0 10
10242: PUSH
10243: LD_VAR 0 7
10247: PPUSH
10248: LD_INT 3
10250: PPUSH
10251: CALL_OW 259
10255: PUSH
10256: LD_INT 3
10258: MUL
10259: MUL
10260: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10261: LD_VAR 0 6
10265: PPUSH
10266: CALL_OW 264
10270: PUSH
10271: LD_INT 5
10273: PUSH
10274: LD_INT 6
10276: PUSH
10277: LD_INT 46
10279: PUSH
10280: LD_INT 44
10282: PUSH
10283: LD_INT 47
10285: PUSH
10286: LD_INT 45
10288: PUSH
10289: LD_INT 28
10291: PUSH
10292: LD_INT 7
10294: PUSH
10295: LD_INT 27
10297: PUSH
10298: LD_INT 29
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: IN
10313: PUSH
10314: LD_VAR 0 1
10318: PPUSH
10319: LD_INT 52
10321: PPUSH
10322: CALL_OW 321
10326: PUSH
10327: LD_INT 2
10329: EQUAL
10330: AND
10331: IFFALSE 10348
// bpoints := bpoints * 1.2 ;
10333: LD_ADDR_VAR 0 10
10337: PUSH
10338: LD_VAR 0 10
10342: PUSH
10343: LD_REAL  1.20000000000000E+0000
10346: MUL
10347: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10348: LD_VAR 0 6
10352: PPUSH
10353: CALL_OW 264
10357: PUSH
10358: LD_INT 6
10360: PUSH
10361: LD_INT 46
10363: PUSH
10364: LD_INT 47
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: LIST
10371: IN
10372: IFFALSE 10389
// bpoints := bpoints * 1.2 ;
10374: LD_ADDR_VAR 0 10
10378: PUSH
10379: LD_VAR 0 10
10383: PUSH
10384: LD_REAL  1.20000000000000E+0000
10387: MUL
10388: ST_TO_ADDR
// end ; unit_building :
10389: GO 10403
10391: LD_INT 3
10393: DOUBLE
10394: EQUAL
10395: IFTRUE 10399
10397: GO 10402
10399: POP
// ; end ;
10400: GO 10403
10402: POP
// for j = 1 to 3 do
10403: LD_ADDR_VAR 0 7
10407: PUSH
10408: DOUBLE
10409: LD_INT 1
10411: DEC
10412: ST_TO_ADDR
10413: LD_INT 3
10415: PUSH
10416: FOR_TO
10417: IFFALSE 10470
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10419: LD_ADDR_VAR 0 5
10423: PUSH
10424: LD_VAR 0 5
10428: PPUSH
10429: LD_VAR 0 7
10433: PPUSH
10434: LD_VAR 0 5
10438: PUSH
10439: LD_VAR 0 7
10443: ARRAY
10444: PUSH
10445: LD_VAR 0 9
10449: PUSH
10450: LD_VAR 0 7
10454: ARRAY
10455: PUSH
10456: LD_VAR 0 10
10460: MUL
10461: PLUS
10462: PPUSH
10463: CALL_OW 1
10467: ST_TO_ADDR
10468: GO 10416
10470: POP
10471: POP
// end ;
10472: GO 8951
10474: POP
10475: POP
// result := Replace ( result , 4 , tmp ) ;
10476: LD_ADDR_VAR 0 5
10480: PUSH
10481: LD_VAR 0 5
10485: PPUSH
10486: LD_INT 4
10488: PPUSH
10489: LD_VAR 0 8
10493: PPUSH
10494: CALL_OW 1
10498: ST_TO_ADDR
// end ;
10499: LD_VAR 0 5
10503: RET
// export function DangerAtRange ( unit , range ) ; begin
10504: LD_INT 0
10506: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10507: LD_ADDR_VAR 0 3
10511: PUSH
10512: LD_VAR 0 1
10516: PPUSH
10517: CALL_OW 255
10521: PPUSH
10522: LD_VAR 0 1
10526: PPUSH
10527: CALL_OW 250
10531: PPUSH
10532: LD_VAR 0 1
10536: PPUSH
10537: CALL_OW 251
10541: PPUSH
10542: LD_VAR 0 2
10546: PPUSH
10547: CALL 8803 0 4
10551: ST_TO_ADDR
// end ;
10552: LD_VAR 0 3
10556: RET
// export function DangerInArea ( side , area ) ; begin
10557: LD_INT 0
10559: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10560: LD_ADDR_VAR 0 3
10564: PUSH
10565: LD_VAR 0 2
10569: PPUSH
10570: LD_INT 81
10572: PUSH
10573: LD_VAR 0 1
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: PPUSH
10582: CALL_OW 70
10586: ST_TO_ADDR
// end ;
10587: LD_VAR 0 3
10591: RET
// export function IsExtension ( b ) ; begin
10592: LD_INT 0
10594: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10595: LD_ADDR_VAR 0 2
10599: PUSH
10600: LD_VAR 0 1
10604: PUSH
10605: LD_INT 23
10607: PUSH
10608: LD_INT 20
10610: PUSH
10611: LD_INT 22
10613: PUSH
10614: LD_INT 17
10616: PUSH
10617: LD_INT 24
10619: PUSH
10620: LD_INT 21
10622: PUSH
10623: LD_INT 19
10625: PUSH
10626: LD_INT 16
10628: PUSH
10629: LD_INT 25
10631: PUSH
10632: LD_INT 18
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: IN
10647: ST_TO_ADDR
// end ;
10648: LD_VAR 0 2
10652: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10653: LD_INT 0
10655: PPUSH
10656: PPUSH
10657: PPUSH
// result := [ ] ;
10658: LD_ADDR_VAR 0 4
10662: PUSH
10663: EMPTY
10664: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10665: LD_ADDR_VAR 0 5
10669: PUSH
10670: LD_VAR 0 2
10674: PPUSH
10675: LD_INT 21
10677: PUSH
10678: LD_INT 3
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PPUSH
10685: CALL_OW 70
10689: ST_TO_ADDR
// if not tmp then
10690: LD_VAR 0 5
10694: NOT
10695: IFFALSE 10699
// exit ;
10697: GO 10763
// if checkLink then
10699: LD_VAR 0 3
10703: IFFALSE 10753
// begin for i in tmp do
10705: LD_ADDR_VAR 0 6
10709: PUSH
10710: LD_VAR 0 5
10714: PUSH
10715: FOR_IN
10716: IFFALSE 10751
// if GetBase ( i ) <> base then
10718: LD_VAR 0 6
10722: PPUSH
10723: CALL_OW 274
10727: PUSH
10728: LD_VAR 0 1
10732: NONEQUAL
10733: IFFALSE 10749
// ComLinkToBase ( base , i ) ;
10735: LD_VAR 0 1
10739: PPUSH
10740: LD_VAR 0 6
10744: PPUSH
10745: CALL_OW 169
10749: GO 10715
10751: POP
10752: POP
// end ; result := tmp ;
10753: LD_ADDR_VAR 0 4
10757: PUSH
10758: LD_VAR 0 5
10762: ST_TO_ADDR
// end ;
10763: LD_VAR 0 4
10767: RET
// export function ComComplete ( units , b ) ; var i ; begin
10768: LD_INT 0
10770: PPUSH
10771: PPUSH
// if not units then
10772: LD_VAR 0 1
10776: NOT
10777: IFFALSE 10781
// exit ;
10779: GO 10871
// for i in units do
10781: LD_ADDR_VAR 0 4
10785: PUSH
10786: LD_VAR 0 1
10790: PUSH
10791: FOR_IN
10792: IFFALSE 10869
// if BuildingStatus ( b ) = bs_build then
10794: LD_VAR 0 2
10798: PPUSH
10799: CALL_OW 461
10803: PUSH
10804: LD_INT 1
10806: EQUAL
10807: IFFALSE 10867
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10809: LD_VAR 0 4
10813: PPUSH
10814: LD_STRING h
10816: PUSH
10817: LD_VAR 0 2
10821: PPUSH
10822: CALL_OW 250
10826: PUSH
10827: LD_VAR 0 2
10831: PPUSH
10832: CALL_OW 251
10836: PUSH
10837: LD_VAR 0 2
10841: PUSH
10842: LD_INT 0
10844: PUSH
10845: LD_INT 0
10847: PUSH
10848: LD_INT 0
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: PUSH
10860: EMPTY
10861: LIST
10862: PPUSH
10863: CALL_OW 446
10867: GO 10791
10869: POP
10870: POP
// end ;
10871: LD_VAR 0 3
10875: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10876: LD_INT 0
10878: PPUSH
10879: PPUSH
10880: PPUSH
10881: PPUSH
10882: PPUSH
10883: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
10884: LD_VAR 0 1
10888: NOT
10889: PUSH
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 263
10899: PUSH
10900: LD_INT 2
10902: NONEQUAL
10903: OR
10904: IFFALSE 10908
// exit ;
10906: GO 11224
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10908: LD_ADDR_VAR 0 6
10912: PUSH
10913: LD_INT 22
10915: PUSH
10916: LD_VAR 0 1
10920: PPUSH
10921: CALL_OW 255
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: PUSH
10930: LD_INT 2
10932: PUSH
10933: LD_INT 30
10935: PUSH
10936: LD_INT 36
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: LD_INT 34
10945: PUSH
10946: LD_INT 31
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: LIST
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: PPUSH
10962: CALL_OW 69
10966: ST_TO_ADDR
// if not tmp then
10967: LD_VAR 0 6
10971: NOT
10972: IFFALSE 10976
// exit ;
10974: GO 11224
// result := [ ] ;
10976: LD_ADDR_VAR 0 2
10980: PUSH
10981: EMPTY
10982: ST_TO_ADDR
// for i in tmp do
10983: LD_ADDR_VAR 0 3
10987: PUSH
10988: LD_VAR 0 6
10992: PUSH
10993: FOR_IN
10994: IFFALSE 11065
// begin t := UnitsInside ( i ) ;
10996: LD_ADDR_VAR 0 4
11000: PUSH
11001: LD_VAR 0 3
11005: PPUSH
11006: CALL_OW 313
11010: ST_TO_ADDR
// if t then
11011: LD_VAR 0 4
11015: IFFALSE 11063
// for j in t do
11017: LD_ADDR_VAR 0 7
11021: PUSH
11022: LD_VAR 0 4
11026: PUSH
11027: FOR_IN
11028: IFFALSE 11061
// result := Replace ( result , result + 1 , j ) ;
11030: LD_ADDR_VAR 0 2
11034: PUSH
11035: LD_VAR 0 2
11039: PPUSH
11040: LD_VAR 0 2
11044: PUSH
11045: LD_INT 1
11047: PLUS
11048: PPUSH
11049: LD_VAR 0 7
11053: PPUSH
11054: CALL_OW 1
11058: ST_TO_ADDR
11059: GO 11027
11061: POP
11062: POP
// end ;
11063: GO 10993
11065: POP
11066: POP
// if not result then
11067: LD_VAR 0 2
11071: NOT
11072: IFFALSE 11076
// exit ;
11074: GO 11224
// mech := result [ 1 ] ;
11076: LD_ADDR_VAR 0 5
11080: PUSH
11081: LD_VAR 0 2
11085: PUSH
11086: LD_INT 1
11088: ARRAY
11089: ST_TO_ADDR
// if result > 1 then
11090: LD_VAR 0 2
11094: PUSH
11095: LD_INT 1
11097: GREATER
11098: IFFALSE 11210
// begin for i = 2 to result do
11100: LD_ADDR_VAR 0 3
11104: PUSH
11105: DOUBLE
11106: LD_INT 2
11108: DEC
11109: ST_TO_ADDR
11110: LD_VAR 0 2
11114: PUSH
11115: FOR_TO
11116: IFFALSE 11208
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11118: LD_ADDR_VAR 0 4
11122: PUSH
11123: LD_VAR 0 2
11127: PUSH
11128: LD_VAR 0 3
11132: ARRAY
11133: PPUSH
11134: LD_INT 3
11136: PPUSH
11137: CALL_OW 259
11141: PUSH
11142: LD_VAR 0 2
11146: PUSH
11147: LD_VAR 0 3
11151: ARRAY
11152: PPUSH
11153: CALL_OW 432
11157: MINUS
11158: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11159: LD_VAR 0 4
11163: PUSH
11164: LD_VAR 0 5
11168: PPUSH
11169: LD_INT 3
11171: PPUSH
11172: CALL_OW 259
11176: PUSH
11177: LD_VAR 0 5
11181: PPUSH
11182: CALL_OW 432
11186: MINUS
11187: GREATEREQUAL
11188: IFFALSE 11206
// mech := result [ i ] ;
11190: LD_ADDR_VAR 0 5
11194: PUSH
11195: LD_VAR 0 2
11199: PUSH
11200: LD_VAR 0 3
11204: ARRAY
11205: ST_TO_ADDR
// end ;
11206: GO 11115
11208: POP
11209: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11210: LD_VAR 0 1
11214: PPUSH
11215: LD_VAR 0 5
11219: PPUSH
11220: CALL_OW 135
// end ;
11224: LD_VAR 0 2
11228: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11229: LD_INT 0
11231: PPUSH
11232: PPUSH
11233: PPUSH
11234: PPUSH
11235: PPUSH
11236: PPUSH
11237: PPUSH
11238: PPUSH
11239: PPUSH
11240: PPUSH
11241: PPUSH
11242: PPUSH
11243: PPUSH
// result := [ ] ;
11244: LD_ADDR_VAR 0 7
11248: PUSH
11249: EMPTY
11250: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11251: LD_VAR 0 1
11255: PPUSH
11256: CALL_OW 266
11260: PUSH
11261: LD_INT 0
11263: PUSH
11264: LD_INT 1
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: IN
11271: NOT
11272: IFFALSE 11276
// exit ;
11274: GO 12910
// if name then
11276: LD_VAR 0 3
11280: IFFALSE 11296
// SetBName ( base_dep , name ) ;
11282: LD_VAR 0 1
11286: PPUSH
11287: LD_VAR 0 3
11291: PPUSH
11292: CALL_OW 500
// base := GetBase ( base_dep ) ;
11296: LD_ADDR_VAR 0 15
11300: PUSH
11301: LD_VAR 0 1
11305: PPUSH
11306: CALL_OW 274
11310: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11311: LD_ADDR_VAR 0 16
11315: PUSH
11316: LD_VAR 0 1
11320: PPUSH
11321: CALL_OW 255
11325: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11326: LD_ADDR_VAR 0 17
11330: PUSH
11331: LD_VAR 0 1
11335: PPUSH
11336: CALL_OW 248
11340: ST_TO_ADDR
// if sources then
11341: LD_VAR 0 5
11345: IFFALSE 11392
// for i = 1 to 3 do
11347: LD_ADDR_VAR 0 8
11351: PUSH
11352: DOUBLE
11353: LD_INT 1
11355: DEC
11356: ST_TO_ADDR
11357: LD_INT 3
11359: PUSH
11360: FOR_TO
11361: IFFALSE 11390
// AddResourceType ( base , i , sources [ i ] ) ;
11363: LD_VAR 0 15
11367: PPUSH
11368: LD_VAR 0 8
11372: PPUSH
11373: LD_VAR 0 5
11377: PUSH
11378: LD_VAR 0 8
11382: ARRAY
11383: PPUSH
11384: CALL_OW 276
11388: GO 11360
11390: POP
11391: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11392: LD_ADDR_VAR 0 18
11396: PUSH
11397: LD_VAR 0 15
11401: PPUSH
11402: LD_VAR 0 2
11406: PPUSH
11407: LD_INT 1
11409: PPUSH
11410: CALL 10653 0 3
11414: ST_TO_ADDR
// InitHc ;
11415: CALL_OW 19
// InitUc ;
11419: CALL_OW 18
// uc_side := side ;
11423: LD_ADDR_OWVAR 20
11427: PUSH
11428: LD_VAR 0 16
11432: ST_TO_ADDR
// uc_nation := nation ;
11433: LD_ADDR_OWVAR 21
11437: PUSH
11438: LD_VAR 0 17
11442: ST_TO_ADDR
// if buildings then
11443: LD_VAR 0 18
11447: IFFALSE 12769
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11449: LD_ADDR_VAR 0 19
11453: PUSH
11454: LD_VAR 0 18
11458: PPUSH
11459: LD_INT 2
11461: PUSH
11462: LD_INT 30
11464: PUSH
11465: LD_INT 29
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: LD_INT 30
11474: PUSH
11475: LD_INT 30
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: LIST
11486: PPUSH
11487: CALL_OW 72
11491: ST_TO_ADDR
// if tmp then
11492: LD_VAR 0 19
11496: IFFALSE 11544
// for i in tmp do
11498: LD_ADDR_VAR 0 8
11502: PUSH
11503: LD_VAR 0 19
11507: PUSH
11508: FOR_IN
11509: IFFALSE 11542
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11511: LD_VAR 0 8
11515: PPUSH
11516: CALL_OW 250
11520: PPUSH
11521: LD_VAR 0 8
11525: PPUSH
11526: CALL_OW 251
11530: PPUSH
11531: LD_VAR 0 16
11535: PPUSH
11536: CALL_OW 441
11540: GO 11508
11542: POP
11543: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11544: LD_VAR 0 18
11548: PPUSH
11549: LD_INT 2
11551: PUSH
11552: LD_INT 30
11554: PUSH
11555: LD_INT 32
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PUSH
11562: LD_INT 30
11564: PUSH
11565: LD_INT 33
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: LIST
11576: PPUSH
11577: CALL_OW 72
11581: IFFALSE 11669
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11583: LD_ADDR_VAR 0 8
11587: PUSH
11588: LD_VAR 0 18
11592: PPUSH
11593: LD_INT 2
11595: PUSH
11596: LD_INT 30
11598: PUSH
11599: LD_INT 32
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: PUSH
11606: LD_INT 30
11608: PUSH
11609: LD_INT 33
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: LIST
11620: PPUSH
11621: CALL_OW 72
11625: PUSH
11626: FOR_IN
11627: IFFALSE 11667
// begin if not GetBWeapon ( i ) then
11629: LD_VAR 0 8
11633: PPUSH
11634: CALL_OW 269
11638: NOT
11639: IFFALSE 11665
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11641: LD_VAR 0 8
11645: PPUSH
11646: LD_VAR 0 8
11650: PPUSH
11651: LD_VAR 0 2
11655: PPUSH
11656: CALL 12915 0 2
11660: PPUSH
11661: CALL_OW 431
// end ;
11665: GO 11626
11667: POP
11668: POP
// end ; for i = 1 to personel do
11669: LD_ADDR_VAR 0 8
11673: PUSH
11674: DOUBLE
11675: LD_INT 1
11677: DEC
11678: ST_TO_ADDR
11679: LD_VAR 0 6
11683: PUSH
11684: FOR_TO
11685: IFFALSE 12749
// begin if i > 4 then
11687: LD_VAR 0 8
11691: PUSH
11692: LD_INT 4
11694: GREATER
11695: IFFALSE 11699
// break ;
11697: GO 12749
// case i of 1 :
11699: LD_VAR 0 8
11703: PUSH
11704: LD_INT 1
11706: DOUBLE
11707: EQUAL
11708: IFTRUE 11712
11710: GO 11792
11712: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11713: LD_ADDR_VAR 0 12
11717: PUSH
11718: LD_VAR 0 18
11722: PPUSH
11723: LD_INT 22
11725: PUSH
11726: LD_VAR 0 16
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: PUSH
11735: LD_INT 58
11737: PUSH
11738: EMPTY
11739: LIST
11740: PUSH
11741: LD_INT 2
11743: PUSH
11744: LD_INT 30
11746: PUSH
11747: LD_INT 32
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PUSH
11754: LD_INT 30
11756: PUSH
11757: LD_INT 4
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 30
11766: PUSH
11767: LD_INT 5
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: LIST
11784: PPUSH
11785: CALL_OW 72
11789: ST_TO_ADDR
11790: GO 12014
11792: LD_INT 2
11794: DOUBLE
11795: EQUAL
11796: IFTRUE 11800
11798: GO 11862
11800: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11801: LD_ADDR_VAR 0 12
11805: PUSH
11806: LD_VAR 0 18
11810: PPUSH
11811: LD_INT 22
11813: PUSH
11814: LD_VAR 0 16
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: PUSH
11823: LD_INT 2
11825: PUSH
11826: LD_INT 30
11828: PUSH
11829: LD_INT 0
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PUSH
11836: LD_INT 30
11838: PUSH
11839: LD_INT 1
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: LIST
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: PPUSH
11855: CALL_OW 72
11859: ST_TO_ADDR
11860: GO 12014
11862: LD_INT 3
11864: DOUBLE
11865: EQUAL
11866: IFTRUE 11870
11868: GO 11932
11870: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11871: LD_ADDR_VAR 0 12
11875: PUSH
11876: LD_VAR 0 18
11880: PPUSH
11881: LD_INT 22
11883: PUSH
11884: LD_VAR 0 16
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: PUSH
11893: LD_INT 2
11895: PUSH
11896: LD_INT 30
11898: PUSH
11899: LD_INT 2
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 30
11908: PUSH
11909: LD_INT 3
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: LIST
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PPUSH
11925: CALL_OW 72
11929: ST_TO_ADDR
11930: GO 12014
11932: LD_INT 4
11934: DOUBLE
11935: EQUAL
11936: IFTRUE 11940
11938: GO 12013
11940: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11941: LD_ADDR_VAR 0 12
11945: PUSH
11946: LD_VAR 0 18
11950: PPUSH
11951: LD_INT 22
11953: PUSH
11954: LD_VAR 0 16
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 2
11965: PUSH
11966: LD_INT 30
11968: PUSH
11969: LD_INT 6
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PUSH
11976: LD_INT 30
11978: PUSH
11979: LD_INT 7
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: PUSH
11986: LD_INT 30
11988: PUSH
11989: LD_INT 8
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PPUSH
12006: CALL_OW 72
12010: ST_TO_ADDR
12011: GO 12014
12013: POP
// if i = 1 then
12014: LD_VAR 0 8
12018: PUSH
12019: LD_INT 1
12021: EQUAL
12022: IFFALSE 12133
// begin tmp := [ ] ;
12024: LD_ADDR_VAR 0 19
12028: PUSH
12029: EMPTY
12030: ST_TO_ADDR
// for j in f do
12031: LD_ADDR_VAR 0 9
12035: PUSH
12036: LD_VAR 0 12
12040: PUSH
12041: FOR_IN
12042: IFFALSE 12115
// if GetBType ( j ) = b_bunker then
12044: LD_VAR 0 9
12048: PPUSH
12049: CALL_OW 266
12053: PUSH
12054: LD_INT 32
12056: EQUAL
12057: IFFALSE 12084
// tmp := Insert ( tmp , 1 , j ) else
12059: LD_ADDR_VAR 0 19
12063: PUSH
12064: LD_VAR 0 19
12068: PPUSH
12069: LD_INT 1
12071: PPUSH
12072: LD_VAR 0 9
12076: PPUSH
12077: CALL_OW 2
12081: ST_TO_ADDR
12082: GO 12113
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12084: LD_ADDR_VAR 0 19
12088: PUSH
12089: LD_VAR 0 19
12093: PPUSH
12094: LD_VAR 0 19
12098: PUSH
12099: LD_INT 1
12101: PLUS
12102: PPUSH
12103: LD_VAR 0 9
12107: PPUSH
12108: CALL_OW 2
12112: ST_TO_ADDR
12113: GO 12041
12115: POP
12116: POP
// if tmp then
12117: LD_VAR 0 19
12121: IFFALSE 12133
// f := tmp ;
12123: LD_ADDR_VAR 0 12
12127: PUSH
12128: LD_VAR 0 19
12132: ST_TO_ADDR
// end ; x := personel [ i ] ;
12133: LD_ADDR_VAR 0 13
12137: PUSH
12138: LD_VAR 0 6
12142: PUSH
12143: LD_VAR 0 8
12147: ARRAY
12148: ST_TO_ADDR
// if x = - 1 then
12149: LD_VAR 0 13
12153: PUSH
12154: LD_INT 1
12156: NEG
12157: EQUAL
12158: IFFALSE 12367
// begin for j in f do
12160: LD_ADDR_VAR 0 9
12164: PUSH
12165: LD_VAR 0 12
12169: PUSH
12170: FOR_IN
12171: IFFALSE 12363
// repeat InitHc ;
12173: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12177: LD_VAR 0 9
12181: PPUSH
12182: CALL_OW 266
12186: PUSH
12187: LD_INT 5
12189: EQUAL
12190: IFFALSE 12260
// begin if UnitsInside ( j ) < 3 then
12192: LD_VAR 0 9
12196: PPUSH
12197: CALL_OW 313
12201: PUSH
12202: LD_INT 3
12204: LESS
12205: IFFALSE 12241
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12207: LD_INT 0
12209: PPUSH
12210: LD_INT 5
12212: PUSH
12213: LD_INT 8
12215: PUSH
12216: LD_INT 9
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: LIST
12223: PUSH
12224: LD_VAR 0 17
12228: ARRAY
12229: PPUSH
12230: LD_VAR 0 4
12234: PPUSH
12235: CALL_OW 380
12239: GO 12258
// PrepareHuman ( false , i , skill ) ;
12241: LD_INT 0
12243: PPUSH
12244: LD_VAR 0 8
12248: PPUSH
12249: LD_VAR 0 4
12253: PPUSH
12254: CALL_OW 380
// end else
12258: GO 12277
// PrepareHuman ( false , i , skill ) ;
12260: LD_INT 0
12262: PPUSH
12263: LD_VAR 0 8
12267: PPUSH
12268: LD_VAR 0 4
12272: PPUSH
12273: CALL_OW 380
// un := CreateHuman ;
12277: LD_ADDR_VAR 0 14
12281: PUSH
12282: CALL_OW 44
12286: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12287: LD_ADDR_VAR 0 7
12291: PUSH
12292: LD_VAR 0 7
12296: PPUSH
12297: LD_INT 1
12299: PPUSH
12300: LD_VAR 0 14
12304: PPUSH
12305: CALL_OW 2
12309: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12310: LD_VAR 0 14
12314: PPUSH
12315: LD_VAR 0 9
12319: PPUSH
12320: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12324: LD_VAR 0 9
12328: PPUSH
12329: CALL_OW 313
12333: PUSH
12334: LD_INT 6
12336: EQUAL
12337: PUSH
12338: LD_VAR 0 9
12342: PPUSH
12343: CALL_OW 266
12347: PUSH
12348: LD_INT 32
12350: PUSH
12351: LD_INT 31
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: IN
12358: OR
12359: IFFALSE 12173
12361: GO 12170
12363: POP
12364: POP
// end else
12365: GO 12747
// for j = 1 to x do
12367: LD_ADDR_VAR 0 9
12371: PUSH
12372: DOUBLE
12373: LD_INT 1
12375: DEC
12376: ST_TO_ADDR
12377: LD_VAR 0 13
12381: PUSH
12382: FOR_TO
12383: IFFALSE 12745
// begin InitHc ;
12385: CALL_OW 19
// if not f then
12389: LD_VAR 0 12
12393: NOT
12394: IFFALSE 12483
// begin PrepareHuman ( false , i , skill ) ;
12396: LD_INT 0
12398: PPUSH
12399: LD_VAR 0 8
12403: PPUSH
12404: LD_VAR 0 4
12408: PPUSH
12409: CALL_OW 380
// un := CreateHuman ;
12413: LD_ADDR_VAR 0 14
12417: PUSH
12418: CALL_OW 44
12422: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12423: LD_ADDR_VAR 0 7
12427: PUSH
12428: LD_VAR 0 7
12432: PPUSH
12433: LD_INT 1
12435: PPUSH
12436: LD_VAR 0 14
12440: PPUSH
12441: CALL_OW 2
12445: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12446: LD_VAR 0 14
12450: PPUSH
12451: LD_VAR 0 1
12455: PPUSH
12456: CALL_OW 250
12460: PPUSH
12461: LD_VAR 0 1
12465: PPUSH
12466: CALL_OW 251
12470: PPUSH
12471: LD_INT 10
12473: PPUSH
12474: LD_INT 0
12476: PPUSH
12477: CALL_OW 50
// continue ;
12481: GO 12382
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12483: LD_VAR 0 12
12487: PUSH
12488: LD_INT 1
12490: ARRAY
12491: PPUSH
12492: CALL_OW 313
12496: PUSH
12497: LD_VAR 0 12
12501: PUSH
12502: LD_INT 1
12504: ARRAY
12505: PPUSH
12506: CALL_OW 266
12510: PUSH
12511: LD_INT 32
12513: PUSH
12514: LD_INT 31
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: IN
12521: AND
12522: PUSH
12523: LD_VAR 0 12
12527: PUSH
12528: LD_INT 1
12530: ARRAY
12531: PPUSH
12532: CALL_OW 313
12536: PUSH
12537: LD_INT 6
12539: EQUAL
12540: OR
12541: IFFALSE 12561
// f := Delete ( f , 1 ) ;
12543: LD_ADDR_VAR 0 12
12547: PUSH
12548: LD_VAR 0 12
12552: PPUSH
12553: LD_INT 1
12555: PPUSH
12556: CALL_OW 3
12560: ST_TO_ADDR
// if not f then
12561: LD_VAR 0 12
12565: NOT
12566: IFFALSE 12584
// begin x := x + 2 ;
12568: LD_ADDR_VAR 0 13
12572: PUSH
12573: LD_VAR 0 13
12577: PUSH
12578: LD_INT 2
12580: PLUS
12581: ST_TO_ADDR
// continue ;
12582: GO 12382
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12584: LD_VAR 0 12
12588: PUSH
12589: LD_INT 1
12591: ARRAY
12592: PPUSH
12593: CALL_OW 266
12597: PUSH
12598: LD_INT 5
12600: EQUAL
12601: IFFALSE 12675
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12603: LD_VAR 0 12
12607: PUSH
12608: LD_INT 1
12610: ARRAY
12611: PPUSH
12612: CALL_OW 313
12616: PUSH
12617: LD_INT 3
12619: LESS
12620: IFFALSE 12656
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12622: LD_INT 0
12624: PPUSH
12625: LD_INT 5
12627: PUSH
12628: LD_INT 8
12630: PUSH
12631: LD_INT 9
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: LIST
12638: PUSH
12639: LD_VAR 0 17
12643: ARRAY
12644: PPUSH
12645: LD_VAR 0 4
12649: PPUSH
12650: CALL_OW 380
12654: GO 12673
// PrepareHuman ( false , i , skill ) ;
12656: LD_INT 0
12658: PPUSH
12659: LD_VAR 0 8
12663: PPUSH
12664: LD_VAR 0 4
12668: PPUSH
12669: CALL_OW 380
// end else
12673: GO 12692
// PrepareHuman ( false , i , skill ) ;
12675: LD_INT 0
12677: PPUSH
12678: LD_VAR 0 8
12682: PPUSH
12683: LD_VAR 0 4
12687: PPUSH
12688: CALL_OW 380
// un := CreateHuman ;
12692: LD_ADDR_VAR 0 14
12696: PUSH
12697: CALL_OW 44
12701: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12702: LD_ADDR_VAR 0 7
12706: PUSH
12707: LD_VAR 0 7
12711: PPUSH
12712: LD_INT 1
12714: PPUSH
12715: LD_VAR 0 14
12719: PPUSH
12720: CALL_OW 2
12724: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12725: LD_VAR 0 14
12729: PPUSH
12730: LD_VAR 0 12
12734: PUSH
12735: LD_INT 1
12737: ARRAY
12738: PPUSH
12739: CALL_OW 52
// end ;
12743: GO 12382
12745: POP
12746: POP
// end ;
12747: GO 11684
12749: POP
12750: POP
// result := result ^ buildings ;
12751: LD_ADDR_VAR 0 7
12755: PUSH
12756: LD_VAR 0 7
12760: PUSH
12761: LD_VAR 0 18
12765: ADD
12766: ST_TO_ADDR
// end else
12767: GO 12910
// begin for i = 1 to personel do
12769: LD_ADDR_VAR 0 8
12773: PUSH
12774: DOUBLE
12775: LD_INT 1
12777: DEC
12778: ST_TO_ADDR
12779: LD_VAR 0 6
12783: PUSH
12784: FOR_TO
12785: IFFALSE 12908
// begin if i > 4 then
12787: LD_VAR 0 8
12791: PUSH
12792: LD_INT 4
12794: GREATER
12795: IFFALSE 12799
// break ;
12797: GO 12908
// x := personel [ i ] ;
12799: LD_ADDR_VAR 0 13
12803: PUSH
12804: LD_VAR 0 6
12808: PUSH
12809: LD_VAR 0 8
12813: ARRAY
12814: ST_TO_ADDR
// if x = - 1 then
12815: LD_VAR 0 13
12819: PUSH
12820: LD_INT 1
12822: NEG
12823: EQUAL
12824: IFFALSE 12828
// continue ;
12826: GO 12784
// PrepareHuman ( false , i , skill ) ;
12828: LD_INT 0
12830: PPUSH
12831: LD_VAR 0 8
12835: PPUSH
12836: LD_VAR 0 4
12840: PPUSH
12841: CALL_OW 380
// un := CreateHuman ;
12845: LD_ADDR_VAR 0 14
12849: PUSH
12850: CALL_OW 44
12854: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12855: LD_VAR 0 14
12859: PPUSH
12860: LD_VAR 0 1
12864: PPUSH
12865: CALL_OW 250
12869: PPUSH
12870: LD_VAR 0 1
12874: PPUSH
12875: CALL_OW 251
12879: PPUSH
12880: LD_INT 10
12882: PPUSH
12883: LD_INT 0
12885: PPUSH
12886: CALL_OW 50
// result := result ^ un ;
12890: LD_ADDR_VAR 0 7
12894: PUSH
12895: LD_VAR 0 7
12899: PUSH
12900: LD_VAR 0 14
12904: ADD
12905: ST_TO_ADDR
// end ;
12906: GO 12784
12908: POP
12909: POP
// end ; end ;
12910: LD_VAR 0 7
12914: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12915: LD_INT 0
12917: PPUSH
12918: PPUSH
12919: PPUSH
12920: PPUSH
12921: PPUSH
12922: PPUSH
12923: PPUSH
12924: PPUSH
12925: PPUSH
12926: PPUSH
12927: PPUSH
12928: PPUSH
12929: PPUSH
12930: PPUSH
12931: PPUSH
12932: PPUSH
// result := false ;
12933: LD_ADDR_VAR 0 3
12937: PUSH
12938: LD_INT 0
12940: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12941: LD_VAR 0 1
12945: NOT
12946: PUSH
12947: LD_VAR 0 1
12951: PPUSH
12952: CALL_OW 266
12956: PUSH
12957: LD_INT 32
12959: PUSH
12960: LD_INT 33
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: IN
12967: NOT
12968: OR
12969: IFFALSE 12973
// exit ;
12971: GO 14082
// nat := GetNation ( tower ) ;
12973: LD_ADDR_VAR 0 12
12977: PUSH
12978: LD_VAR 0 1
12982: PPUSH
12983: CALL_OW 248
12987: ST_TO_ADDR
// side := GetSide ( tower ) ;
12988: LD_ADDR_VAR 0 16
12992: PUSH
12993: LD_VAR 0 1
12997: PPUSH
12998: CALL_OW 255
13002: ST_TO_ADDR
// x := GetX ( tower ) ;
13003: LD_ADDR_VAR 0 10
13007: PUSH
13008: LD_VAR 0 1
13012: PPUSH
13013: CALL_OW 250
13017: ST_TO_ADDR
// y := GetY ( tower ) ;
13018: LD_ADDR_VAR 0 11
13022: PUSH
13023: LD_VAR 0 1
13027: PPUSH
13028: CALL_OW 251
13032: ST_TO_ADDR
// if not x or not y then
13033: LD_VAR 0 10
13037: NOT
13038: PUSH
13039: LD_VAR 0 11
13043: NOT
13044: OR
13045: IFFALSE 13049
// exit ;
13047: GO 14082
// weapon := 0 ;
13049: LD_ADDR_VAR 0 18
13053: PUSH
13054: LD_INT 0
13056: ST_TO_ADDR
// fac_list := [ ] ;
13057: LD_ADDR_VAR 0 17
13061: PUSH
13062: EMPTY
13063: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13064: LD_ADDR_VAR 0 6
13068: PUSH
13069: LD_VAR 0 1
13073: PPUSH
13074: CALL_OW 274
13078: PPUSH
13079: LD_VAR 0 2
13083: PPUSH
13084: LD_INT 0
13086: PPUSH
13087: CALL 10653 0 3
13091: PPUSH
13092: LD_INT 30
13094: PUSH
13095: LD_INT 3
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: PPUSH
13102: CALL_OW 72
13106: ST_TO_ADDR
// if not factories then
13107: LD_VAR 0 6
13111: NOT
13112: IFFALSE 13116
// exit ;
13114: GO 14082
// for i in factories do
13116: LD_ADDR_VAR 0 8
13120: PUSH
13121: LD_VAR 0 6
13125: PUSH
13126: FOR_IN
13127: IFFALSE 13152
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13129: LD_ADDR_VAR 0 17
13133: PUSH
13134: LD_VAR 0 17
13138: PUSH
13139: LD_VAR 0 8
13143: PPUSH
13144: CALL_OW 478
13148: UNION
13149: ST_TO_ADDR
13150: GO 13126
13152: POP
13153: POP
// if not fac_list then
13154: LD_VAR 0 17
13158: NOT
13159: IFFALSE 13163
// exit ;
13161: GO 14082
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13163: LD_ADDR_VAR 0 5
13167: PUSH
13168: LD_INT 4
13170: PUSH
13171: LD_INT 5
13173: PUSH
13174: LD_INT 9
13176: PUSH
13177: LD_INT 10
13179: PUSH
13180: LD_INT 6
13182: PUSH
13183: LD_INT 7
13185: PUSH
13186: LD_INT 11
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 27
13200: PUSH
13201: LD_INT 28
13203: PUSH
13204: LD_INT 26
13206: PUSH
13207: LD_INT 30
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: PUSH
13216: LD_INT 43
13218: PUSH
13219: LD_INT 44
13221: PUSH
13222: LD_INT 46
13224: PUSH
13225: LD_INT 45
13227: PUSH
13228: LD_INT 47
13230: PUSH
13231: LD_INT 49
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: LIST
13246: PUSH
13247: LD_VAR 0 12
13251: ARRAY
13252: ST_TO_ADDR
// list := list isect fac_list ;
13253: LD_ADDR_VAR 0 5
13257: PUSH
13258: LD_VAR 0 5
13262: PUSH
13263: LD_VAR 0 17
13267: ISECT
13268: ST_TO_ADDR
// if not list then
13269: LD_VAR 0 5
13273: NOT
13274: IFFALSE 13278
// exit ;
13276: GO 14082
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13278: LD_VAR 0 12
13282: PUSH
13283: LD_INT 3
13285: EQUAL
13286: PUSH
13287: LD_INT 49
13289: PUSH
13290: LD_VAR 0 5
13294: IN
13295: AND
13296: PUSH
13297: LD_INT 31
13299: PPUSH
13300: LD_VAR 0 16
13304: PPUSH
13305: CALL_OW 321
13309: PUSH
13310: LD_INT 2
13312: EQUAL
13313: AND
13314: IFFALSE 13374
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13316: LD_INT 22
13318: PUSH
13319: LD_VAR 0 16
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: PUSH
13328: LD_INT 35
13330: PUSH
13331: LD_INT 49
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: LD_INT 91
13340: PUSH
13341: LD_VAR 0 1
13345: PUSH
13346: LD_INT 10
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: LIST
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: LIST
13358: PPUSH
13359: CALL_OW 69
13363: NOT
13364: IFFALSE 13374
// weapon := ru_time_lapser ;
13366: LD_ADDR_VAR 0 18
13370: PUSH
13371: LD_INT 49
13373: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13374: LD_VAR 0 12
13378: PUSH
13379: LD_INT 1
13381: PUSH
13382: LD_INT 2
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: IN
13389: PUSH
13390: LD_INT 11
13392: PUSH
13393: LD_VAR 0 5
13397: IN
13398: PUSH
13399: LD_INT 30
13401: PUSH
13402: LD_VAR 0 5
13406: IN
13407: OR
13408: AND
13409: PUSH
13410: LD_INT 6
13412: PPUSH
13413: LD_VAR 0 16
13417: PPUSH
13418: CALL_OW 321
13422: PUSH
13423: LD_INT 2
13425: EQUAL
13426: AND
13427: IFFALSE 13592
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13429: LD_INT 22
13431: PUSH
13432: LD_VAR 0 16
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PUSH
13441: LD_INT 2
13443: PUSH
13444: LD_INT 35
13446: PUSH
13447: LD_INT 11
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PUSH
13454: LD_INT 35
13456: PUSH
13457: LD_INT 30
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: LIST
13468: PUSH
13469: LD_INT 91
13471: PUSH
13472: LD_VAR 0 1
13476: PUSH
13477: LD_INT 18
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: LIST
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: LIST
13489: PPUSH
13490: CALL_OW 69
13494: NOT
13495: PUSH
13496: LD_INT 22
13498: PUSH
13499: LD_VAR 0 16
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PUSH
13508: LD_INT 2
13510: PUSH
13511: LD_INT 30
13513: PUSH
13514: LD_INT 32
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: LD_INT 30
13523: PUSH
13524: LD_INT 33
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: LIST
13535: PUSH
13536: LD_INT 91
13538: PUSH
13539: LD_VAR 0 1
13543: PUSH
13544: LD_INT 12
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: LIST
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: LIST
13556: PUSH
13557: EMPTY
13558: LIST
13559: PPUSH
13560: CALL_OW 69
13564: PUSH
13565: LD_INT 2
13567: GREATER
13568: AND
13569: IFFALSE 13592
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13571: LD_ADDR_VAR 0 18
13575: PUSH
13576: LD_INT 11
13578: PUSH
13579: LD_INT 30
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: PUSH
13586: LD_VAR 0 12
13590: ARRAY
13591: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13592: LD_VAR 0 18
13596: NOT
13597: PUSH
13598: LD_INT 40
13600: PPUSH
13601: LD_VAR 0 16
13605: PPUSH
13606: CALL_OW 321
13610: PUSH
13611: LD_INT 2
13613: EQUAL
13614: AND
13615: PUSH
13616: LD_INT 7
13618: PUSH
13619: LD_VAR 0 5
13623: IN
13624: PUSH
13625: LD_INT 28
13627: PUSH
13628: LD_VAR 0 5
13632: IN
13633: OR
13634: PUSH
13635: LD_INT 45
13637: PUSH
13638: LD_VAR 0 5
13642: IN
13643: OR
13644: AND
13645: IFFALSE 13899
// begin hex := GetHexInfo ( x , y ) ;
13647: LD_ADDR_VAR 0 4
13651: PUSH
13652: LD_VAR 0 10
13656: PPUSH
13657: LD_VAR 0 11
13661: PPUSH
13662: CALL_OW 546
13666: ST_TO_ADDR
// if hex [ 1 ] then
13667: LD_VAR 0 4
13671: PUSH
13672: LD_INT 1
13674: ARRAY
13675: IFFALSE 13679
// exit ;
13677: GO 14082
// height := hex [ 2 ] ;
13679: LD_ADDR_VAR 0 15
13683: PUSH
13684: LD_VAR 0 4
13688: PUSH
13689: LD_INT 2
13691: ARRAY
13692: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13693: LD_ADDR_VAR 0 14
13697: PUSH
13698: LD_INT 0
13700: PUSH
13701: LD_INT 2
13703: PUSH
13704: LD_INT 3
13706: PUSH
13707: LD_INT 5
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: ST_TO_ADDR
// for i in tmp do
13716: LD_ADDR_VAR 0 8
13720: PUSH
13721: LD_VAR 0 14
13725: PUSH
13726: FOR_IN
13727: IFFALSE 13897
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13729: LD_ADDR_VAR 0 9
13733: PUSH
13734: LD_VAR 0 10
13738: PPUSH
13739: LD_VAR 0 8
13743: PPUSH
13744: LD_INT 5
13746: PPUSH
13747: CALL_OW 272
13751: PUSH
13752: LD_VAR 0 11
13756: PPUSH
13757: LD_VAR 0 8
13761: PPUSH
13762: LD_INT 5
13764: PPUSH
13765: CALL_OW 273
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13774: LD_VAR 0 9
13778: PUSH
13779: LD_INT 1
13781: ARRAY
13782: PPUSH
13783: LD_VAR 0 9
13787: PUSH
13788: LD_INT 2
13790: ARRAY
13791: PPUSH
13792: CALL_OW 488
13796: IFFALSE 13895
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13798: LD_ADDR_VAR 0 4
13802: PUSH
13803: LD_VAR 0 9
13807: PUSH
13808: LD_INT 1
13810: ARRAY
13811: PPUSH
13812: LD_VAR 0 9
13816: PUSH
13817: LD_INT 2
13819: ARRAY
13820: PPUSH
13821: CALL_OW 546
13825: ST_TO_ADDR
// if hex [ 1 ] then
13826: LD_VAR 0 4
13830: PUSH
13831: LD_INT 1
13833: ARRAY
13834: IFFALSE 13838
// continue ;
13836: GO 13726
// h := hex [ 2 ] ;
13838: LD_ADDR_VAR 0 13
13842: PUSH
13843: LD_VAR 0 4
13847: PUSH
13848: LD_INT 2
13850: ARRAY
13851: ST_TO_ADDR
// if h + 7 < height then
13852: LD_VAR 0 13
13856: PUSH
13857: LD_INT 7
13859: PLUS
13860: PUSH
13861: LD_VAR 0 15
13865: LESS
13866: IFFALSE 13895
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13868: LD_ADDR_VAR 0 18
13872: PUSH
13873: LD_INT 7
13875: PUSH
13876: LD_INT 28
13878: PUSH
13879: LD_INT 45
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: LIST
13886: PUSH
13887: LD_VAR 0 12
13891: ARRAY
13892: ST_TO_ADDR
// break ;
13893: GO 13897
// end ; end ; end ;
13895: GO 13726
13897: POP
13898: POP
// end ; if not weapon then
13899: LD_VAR 0 18
13903: NOT
13904: IFFALSE 13964
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13906: LD_ADDR_VAR 0 5
13910: PUSH
13911: LD_VAR 0 5
13915: PUSH
13916: LD_INT 11
13918: PUSH
13919: LD_INT 30
13921: PUSH
13922: LD_INT 49
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: LIST
13929: DIFF
13930: ST_TO_ADDR
// if not list then
13931: LD_VAR 0 5
13935: NOT
13936: IFFALSE 13940
// exit ;
13938: GO 14082
// weapon := list [ rand ( 1 , list ) ] ;
13940: LD_ADDR_VAR 0 18
13944: PUSH
13945: LD_VAR 0 5
13949: PUSH
13950: LD_INT 1
13952: PPUSH
13953: LD_VAR 0 5
13957: PPUSH
13958: CALL_OW 12
13962: ARRAY
13963: ST_TO_ADDR
// end ; if weapon then
13964: LD_VAR 0 18
13968: IFFALSE 14082
// begin tmp := CostOfWeapon ( weapon ) ;
13970: LD_ADDR_VAR 0 14
13974: PUSH
13975: LD_VAR 0 18
13979: PPUSH
13980: CALL_OW 451
13984: ST_TO_ADDR
// j := GetBase ( tower ) ;
13985: LD_ADDR_VAR 0 9
13989: PUSH
13990: LD_VAR 0 1
13994: PPUSH
13995: CALL_OW 274
13999: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14000: LD_VAR 0 9
14004: PPUSH
14005: LD_INT 1
14007: PPUSH
14008: CALL_OW 275
14012: PUSH
14013: LD_VAR 0 14
14017: PUSH
14018: LD_INT 1
14020: ARRAY
14021: GREATEREQUAL
14022: PUSH
14023: LD_VAR 0 9
14027: PPUSH
14028: LD_INT 2
14030: PPUSH
14031: CALL_OW 275
14035: PUSH
14036: LD_VAR 0 14
14040: PUSH
14041: LD_INT 2
14043: ARRAY
14044: GREATEREQUAL
14045: AND
14046: PUSH
14047: LD_VAR 0 9
14051: PPUSH
14052: LD_INT 3
14054: PPUSH
14055: CALL_OW 275
14059: PUSH
14060: LD_VAR 0 14
14064: PUSH
14065: LD_INT 3
14067: ARRAY
14068: GREATEREQUAL
14069: AND
14070: IFFALSE 14082
// result := weapon ;
14072: LD_ADDR_VAR 0 3
14076: PUSH
14077: LD_VAR 0 18
14081: ST_TO_ADDR
// end ; end ;
14082: LD_VAR 0 3
14086: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14087: LD_INT 0
14089: PPUSH
14090: PPUSH
// result := true ;
14091: LD_ADDR_VAR 0 3
14095: PUSH
14096: LD_INT 1
14098: ST_TO_ADDR
// if array1 = array2 then
14099: LD_VAR 0 1
14103: PUSH
14104: LD_VAR 0 2
14108: EQUAL
14109: IFFALSE 14169
// begin for i = 1 to array1 do
14111: LD_ADDR_VAR 0 4
14115: PUSH
14116: DOUBLE
14117: LD_INT 1
14119: DEC
14120: ST_TO_ADDR
14121: LD_VAR 0 1
14125: PUSH
14126: FOR_TO
14127: IFFALSE 14165
// if array1 [ i ] <> array2 [ i ] then
14129: LD_VAR 0 1
14133: PUSH
14134: LD_VAR 0 4
14138: ARRAY
14139: PUSH
14140: LD_VAR 0 2
14144: PUSH
14145: LD_VAR 0 4
14149: ARRAY
14150: NONEQUAL
14151: IFFALSE 14163
// begin result := false ;
14153: LD_ADDR_VAR 0 3
14157: PUSH
14158: LD_INT 0
14160: ST_TO_ADDR
// break ;
14161: GO 14165
// end ;
14163: GO 14126
14165: POP
14166: POP
// end else
14167: GO 14177
// result := false ;
14169: LD_ADDR_VAR 0 3
14173: PUSH
14174: LD_INT 0
14176: ST_TO_ADDR
// end ;
14177: LD_VAR 0 3
14181: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14182: LD_INT 0
14184: PPUSH
14185: PPUSH
// if not array1 or not array2 then
14186: LD_VAR 0 1
14190: NOT
14191: PUSH
14192: LD_VAR 0 2
14196: NOT
14197: OR
14198: IFFALSE 14202
// exit ;
14200: GO 14266
// result := true ;
14202: LD_ADDR_VAR 0 3
14206: PUSH
14207: LD_INT 1
14209: ST_TO_ADDR
// for i = 1 to array1 do
14210: LD_ADDR_VAR 0 4
14214: PUSH
14215: DOUBLE
14216: LD_INT 1
14218: DEC
14219: ST_TO_ADDR
14220: LD_VAR 0 1
14224: PUSH
14225: FOR_TO
14226: IFFALSE 14264
// if array1 [ i ] <> array2 [ i ] then
14228: LD_VAR 0 1
14232: PUSH
14233: LD_VAR 0 4
14237: ARRAY
14238: PUSH
14239: LD_VAR 0 2
14243: PUSH
14244: LD_VAR 0 4
14248: ARRAY
14249: NONEQUAL
14250: IFFALSE 14262
// begin result := false ;
14252: LD_ADDR_VAR 0 3
14256: PUSH
14257: LD_INT 0
14259: ST_TO_ADDR
// break ;
14260: GO 14264
// end ;
14262: GO 14225
14264: POP
14265: POP
// end ;
14266: LD_VAR 0 3
14270: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14271: LD_INT 0
14273: PPUSH
14274: PPUSH
14275: PPUSH
// pom := GetBase ( fac ) ;
14276: LD_ADDR_VAR 0 5
14280: PUSH
14281: LD_VAR 0 1
14285: PPUSH
14286: CALL_OW 274
14290: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14291: LD_ADDR_VAR 0 4
14295: PUSH
14296: LD_VAR 0 2
14300: PUSH
14301: LD_INT 1
14303: ARRAY
14304: PPUSH
14305: LD_VAR 0 2
14309: PUSH
14310: LD_INT 2
14312: ARRAY
14313: PPUSH
14314: LD_VAR 0 2
14318: PUSH
14319: LD_INT 3
14321: ARRAY
14322: PPUSH
14323: LD_VAR 0 2
14327: PUSH
14328: LD_INT 4
14330: ARRAY
14331: PPUSH
14332: CALL_OW 449
14336: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14337: LD_ADDR_VAR 0 3
14341: PUSH
14342: LD_VAR 0 5
14346: PPUSH
14347: LD_INT 1
14349: PPUSH
14350: CALL_OW 275
14354: PUSH
14355: LD_VAR 0 4
14359: PUSH
14360: LD_INT 1
14362: ARRAY
14363: GREATEREQUAL
14364: PUSH
14365: LD_VAR 0 5
14369: PPUSH
14370: LD_INT 2
14372: PPUSH
14373: CALL_OW 275
14377: PUSH
14378: LD_VAR 0 4
14382: PUSH
14383: LD_INT 2
14385: ARRAY
14386: GREATEREQUAL
14387: AND
14388: PUSH
14389: LD_VAR 0 5
14393: PPUSH
14394: LD_INT 3
14396: PPUSH
14397: CALL_OW 275
14401: PUSH
14402: LD_VAR 0 4
14406: PUSH
14407: LD_INT 3
14409: ARRAY
14410: GREATEREQUAL
14411: AND
14412: ST_TO_ADDR
// end ;
14413: LD_VAR 0 3
14417: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14418: LD_INT 0
14420: PPUSH
14421: PPUSH
14422: PPUSH
14423: PPUSH
// pom := GetBase ( building ) ;
14424: LD_ADDR_VAR 0 3
14428: PUSH
14429: LD_VAR 0 1
14433: PPUSH
14434: CALL_OW 274
14438: ST_TO_ADDR
// if not pom then
14439: LD_VAR 0 3
14443: NOT
14444: IFFALSE 14448
// exit ;
14446: GO 14618
// btype := GetBType ( building ) ;
14448: LD_ADDR_VAR 0 5
14452: PUSH
14453: LD_VAR 0 1
14457: PPUSH
14458: CALL_OW 266
14462: ST_TO_ADDR
// if btype = b_armoury then
14463: LD_VAR 0 5
14467: PUSH
14468: LD_INT 4
14470: EQUAL
14471: IFFALSE 14481
// btype := b_barracks ;
14473: LD_ADDR_VAR 0 5
14477: PUSH
14478: LD_INT 5
14480: ST_TO_ADDR
// if btype = b_depot then
14481: LD_VAR 0 5
14485: PUSH
14486: LD_INT 0
14488: EQUAL
14489: IFFALSE 14499
// btype := b_warehouse ;
14491: LD_ADDR_VAR 0 5
14495: PUSH
14496: LD_INT 1
14498: ST_TO_ADDR
// if btype = b_workshop then
14499: LD_VAR 0 5
14503: PUSH
14504: LD_INT 2
14506: EQUAL
14507: IFFALSE 14517
// btype := b_factory ;
14509: LD_ADDR_VAR 0 5
14513: PUSH
14514: LD_INT 3
14516: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14517: LD_ADDR_VAR 0 4
14521: PUSH
14522: LD_VAR 0 5
14526: PPUSH
14527: LD_VAR 0 1
14531: PPUSH
14532: CALL_OW 248
14536: PPUSH
14537: CALL_OW 450
14541: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14542: LD_ADDR_VAR 0 2
14546: PUSH
14547: LD_VAR 0 3
14551: PPUSH
14552: LD_INT 1
14554: PPUSH
14555: CALL_OW 275
14559: PUSH
14560: LD_VAR 0 4
14564: PUSH
14565: LD_INT 1
14567: ARRAY
14568: GREATEREQUAL
14569: PUSH
14570: LD_VAR 0 3
14574: PPUSH
14575: LD_INT 2
14577: PPUSH
14578: CALL_OW 275
14582: PUSH
14583: LD_VAR 0 4
14587: PUSH
14588: LD_INT 2
14590: ARRAY
14591: GREATEREQUAL
14592: AND
14593: PUSH
14594: LD_VAR 0 3
14598: PPUSH
14599: LD_INT 3
14601: PPUSH
14602: CALL_OW 275
14606: PUSH
14607: LD_VAR 0 4
14611: PUSH
14612: LD_INT 3
14614: ARRAY
14615: GREATEREQUAL
14616: AND
14617: ST_TO_ADDR
// end ;
14618: LD_VAR 0 2
14622: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14623: LD_INT 0
14625: PPUSH
14626: PPUSH
14627: PPUSH
// pom := GetBase ( building ) ;
14628: LD_ADDR_VAR 0 4
14632: PUSH
14633: LD_VAR 0 1
14637: PPUSH
14638: CALL_OW 274
14642: ST_TO_ADDR
// if not pom then
14643: LD_VAR 0 4
14647: NOT
14648: IFFALSE 14652
// exit ;
14650: GO 14753
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14652: LD_ADDR_VAR 0 5
14656: PUSH
14657: LD_VAR 0 2
14661: PPUSH
14662: LD_VAR 0 1
14666: PPUSH
14667: CALL_OW 248
14671: PPUSH
14672: CALL_OW 450
14676: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14677: LD_ADDR_VAR 0 3
14681: PUSH
14682: LD_VAR 0 4
14686: PPUSH
14687: LD_INT 1
14689: PPUSH
14690: CALL_OW 275
14694: PUSH
14695: LD_VAR 0 5
14699: PUSH
14700: LD_INT 1
14702: ARRAY
14703: GREATEREQUAL
14704: PUSH
14705: LD_VAR 0 4
14709: PPUSH
14710: LD_INT 2
14712: PPUSH
14713: CALL_OW 275
14717: PUSH
14718: LD_VAR 0 5
14722: PUSH
14723: LD_INT 2
14725: ARRAY
14726: GREATEREQUAL
14727: AND
14728: PUSH
14729: LD_VAR 0 4
14733: PPUSH
14734: LD_INT 3
14736: PPUSH
14737: CALL_OW 275
14741: PUSH
14742: LD_VAR 0 5
14746: PUSH
14747: LD_INT 3
14749: ARRAY
14750: GREATEREQUAL
14751: AND
14752: ST_TO_ADDR
// end ;
14753: LD_VAR 0 3
14757: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14758: LD_INT 0
14760: PPUSH
14761: PPUSH
14762: PPUSH
14763: PPUSH
14764: PPUSH
14765: PPUSH
14766: PPUSH
14767: PPUSH
14768: PPUSH
14769: PPUSH
14770: PPUSH
// result := false ;
14771: LD_ADDR_VAR 0 8
14775: PUSH
14776: LD_INT 0
14778: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14779: LD_VAR 0 5
14783: NOT
14784: PUSH
14785: LD_VAR 0 1
14789: NOT
14790: OR
14791: PUSH
14792: LD_VAR 0 2
14796: NOT
14797: OR
14798: PUSH
14799: LD_VAR 0 3
14803: NOT
14804: OR
14805: IFFALSE 14809
// exit ;
14807: GO 15623
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
14809: LD_ADDR_VAR 0 14
14813: PUSH
14814: LD_VAR 0 1
14818: PPUSH
14819: LD_VAR 0 2
14823: PPUSH
14824: LD_VAR 0 3
14828: PPUSH
14829: LD_VAR 0 4
14833: PPUSH
14834: LD_VAR 0 5
14838: PUSH
14839: LD_INT 1
14841: ARRAY
14842: PPUSH
14843: CALL_OW 248
14847: PPUSH
14848: LD_INT 0
14850: PPUSH
14851: CALL 16856 0 6
14855: ST_TO_ADDR
// if not hexes then
14856: LD_VAR 0 14
14860: NOT
14861: IFFALSE 14865
// exit ;
14863: GO 15623
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14865: LD_ADDR_VAR 0 17
14869: PUSH
14870: LD_VAR 0 5
14874: PPUSH
14875: LD_INT 22
14877: PUSH
14878: LD_VAR 0 13
14882: PPUSH
14883: CALL_OW 255
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: PUSH
14892: LD_INT 2
14894: PUSH
14895: LD_INT 30
14897: PUSH
14898: LD_INT 0
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: PUSH
14905: LD_INT 30
14907: PUSH
14908: LD_INT 1
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: LIST
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PPUSH
14924: CALL_OW 72
14928: ST_TO_ADDR
// for i = 1 to hexes do
14929: LD_ADDR_VAR 0 9
14933: PUSH
14934: DOUBLE
14935: LD_INT 1
14937: DEC
14938: ST_TO_ADDR
14939: LD_VAR 0 14
14943: PUSH
14944: FOR_TO
14945: IFFALSE 15621
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14947: LD_ADDR_VAR 0 13
14951: PUSH
14952: LD_VAR 0 14
14956: PUSH
14957: LD_VAR 0 9
14961: ARRAY
14962: PUSH
14963: LD_INT 1
14965: ARRAY
14966: PPUSH
14967: LD_VAR 0 14
14971: PUSH
14972: LD_VAR 0 9
14976: ARRAY
14977: PUSH
14978: LD_INT 2
14980: ARRAY
14981: PPUSH
14982: CALL_OW 428
14986: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14987: LD_VAR 0 14
14991: PUSH
14992: LD_VAR 0 9
14996: ARRAY
14997: PUSH
14998: LD_INT 1
15000: ARRAY
15001: PPUSH
15002: LD_VAR 0 14
15006: PUSH
15007: LD_VAR 0 9
15011: ARRAY
15012: PUSH
15013: LD_INT 2
15015: ARRAY
15016: PPUSH
15017: CALL_OW 351
15021: PUSH
15022: LD_VAR 0 14
15026: PUSH
15027: LD_VAR 0 9
15031: ARRAY
15032: PUSH
15033: LD_INT 1
15035: ARRAY
15036: PPUSH
15037: LD_VAR 0 14
15041: PUSH
15042: LD_VAR 0 9
15046: ARRAY
15047: PUSH
15048: LD_INT 2
15050: ARRAY
15051: PPUSH
15052: CALL_OW 488
15056: NOT
15057: OR
15058: PUSH
15059: LD_VAR 0 13
15063: PPUSH
15064: CALL_OW 247
15068: PUSH
15069: LD_INT 3
15071: EQUAL
15072: OR
15073: IFFALSE 15079
// exit ;
15075: POP
15076: POP
15077: GO 15623
// if not tmp then
15079: LD_VAR 0 13
15083: NOT
15084: IFFALSE 15088
// continue ;
15086: GO 14944
// result := true ;
15088: LD_ADDR_VAR 0 8
15092: PUSH
15093: LD_INT 1
15095: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15096: LD_VAR 0 6
15100: PUSH
15101: LD_VAR 0 13
15105: PPUSH
15106: CALL_OW 247
15110: PUSH
15111: LD_INT 2
15113: EQUAL
15114: AND
15115: PUSH
15116: LD_VAR 0 13
15120: PPUSH
15121: CALL_OW 263
15125: PUSH
15126: LD_INT 1
15128: EQUAL
15129: AND
15130: IFFALSE 15294
// begin if IsDrivenBy ( tmp ) then
15132: LD_VAR 0 13
15136: PPUSH
15137: CALL_OW 311
15141: IFFALSE 15145
// continue ;
15143: GO 14944
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15145: LD_VAR 0 6
15149: PPUSH
15150: LD_INT 3
15152: PUSH
15153: LD_INT 60
15155: PUSH
15156: EMPTY
15157: LIST
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PUSH
15163: LD_INT 3
15165: PUSH
15166: LD_INT 55
15168: PUSH
15169: EMPTY
15170: LIST
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: PPUSH
15180: CALL_OW 72
15184: IFFALSE 15292
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15186: LD_ADDR_VAR 0 18
15190: PUSH
15191: LD_VAR 0 6
15195: PPUSH
15196: LD_INT 3
15198: PUSH
15199: LD_INT 60
15201: PUSH
15202: EMPTY
15203: LIST
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PUSH
15209: LD_INT 3
15211: PUSH
15212: LD_INT 55
15214: PUSH
15215: EMPTY
15216: LIST
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PPUSH
15226: CALL_OW 72
15230: PUSH
15231: LD_INT 1
15233: ARRAY
15234: ST_TO_ADDR
// if IsInUnit ( driver ) then
15235: LD_VAR 0 18
15239: PPUSH
15240: CALL_OW 310
15244: IFFALSE 15255
// ComExit ( driver ) ;
15246: LD_VAR 0 18
15250: PPUSH
15251: CALL 40544 0 1
// AddComEnterUnit ( driver , tmp ) ;
15255: LD_VAR 0 18
15259: PPUSH
15260: LD_VAR 0 13
15264: PPUSH
15265: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15269: LD_VAR 0 18
15273: PPUSH
15274: LD_VAR 0 7
15278: PPUSH
15279: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15283: LD_VAR 0 18
15287: PPUSH
15288: CALL_OW 181
// end ; continue ;
15292: GO 14944
// end ; if not cleaners or not tmp in cleaners then
15294: LD_VAR 0 6
15298: NOT
15299: PUSH
15300: LD_VAR 0 13
15304: PUSH
15305: LD_VAR 0 6
15309: IN
15310: NOT
15311: OR
15312: IFFALSE 15619
// begin if dep then
15314: LD_VAR 0 17
15318: IFFALSE 15454
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15320: LD_ADDR_VAR 0 16
15324: PUSH
15325: LD_VAR 0 17
15329: PUSH
15330: LD_INT 1
15332: ARRAY
15333: PPUSH
15334: CALL_OW 250
15338: PPUSH
15339: LD_VAR 0 17
15343: PUSH
15344: LD_INT 1
15346: ARRAY
15347: PPUSH
15348: CALL_OW 254
15352: PPUSH
15353: LD_INT 5
15355: PPUSH
15356: CALL_OW 272
15360: PUSH
15361: LD_VAR 0 17
15365: PUSH
15366: LD_INT 1
15368: ARRAY
15369: PPUSH
15370: CALL_OW 251
15374: PPUSH
15375: LD_VAR 0 17
15379: PUSH
15380: LD_INT 1
15382: ARRAY
15383: PPUSH
15384: CALL_OW 254
15388: PPUSH
15389: LD_INT 5
15391: PPUSH
15392: CALL_OW 273
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15401: LD_VAR 0 16
15405: PUSH
15406: LD_INT 1
15408: ARRAY
15409: PPUSH
15410: LD_VAR 0 16
15414: PUSH
15415: LD_INT 2
15417: ARRAY
15418: PPUSH
15419: CALL_OW 488
15423: IFFALSE 15454
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15425: LD_VAR 0 13
15429: PPUSH
15430: LD_VAR 0 16
15434: PUSH
15435: LD_INT 1
15437: ARRAY
15438: PPUSH
15439: LD_VAR 0 16
15443: PUSH
15444: LD_INT 2
15446: ARRAY
15447: PPUSH
15448: CALL_OW 111
// continue ;
15452: GO 14944
// end ; end ; r := GetDir ( tmp ) ;
15454: LD_ADDR_VAR 0 15
15458: PUSH
15459: LD_VAR 0 13
15463: PPUSH
15464: CALL_OW 254
15468: ST_TO_ADDR
// if r = 5 then
15469: LD_VAR 0 15
15473: PUSH
15474: LD_INT 5
15476: EQUAL
15477: IFFALSE 15487
// r := 0 ;
15479: LD_ADDR_VAR 0 15
15483: PUSH
15484: LD_INT 0
15486: ST_TO_ADDR
// for j = r to 5 do
15487: LD_ADDR_VAR 0 10
15491: PUSH
15492: DOUBLE
15493: LD_VAR 0 15
15497: DEC
15498: ST_TO_ADDR
15499: LD_INT 5
15501: PUSH
15502: FOR_TO
15503: IFFALSE 15617
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15505: LD_ADDR_VAR 0 11
15509: PUSH
15510: LD_VAR 0 13
15514: PPUSH
15515: CALL_OW 250
15519: PPUSH
15520: LD_VAR 0 10
15524: PPUSH
15525: LD_INT 2
15527: PPUSH
15528: CALL_OW 272
15532: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15533: LD_ADDR_VAR 0 12
15537: PUSH
15538: LD_VAR 0 13
15542: PPUSH
15543: CALL_OW 251
15547: PPUSH
15548: LD_VAR 0 10
15552: PPUSH
15553: LD_INT 2
15555: PPUSH
15556: CALL_OW 273
15560: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15561: LD_VAR 0 11
15565: PPUSH
15566: LD_VAR 0 12
15570: PPUSH
15571: CALL_OW 488
15575: PUSH
15576: LD_VAR 0 11
15580: PPUSH
15581: LD_VAR 0 12
15585: PPUSH
15586: CALL_OW 428
15590: NOT
15591: AND
15592: IFFALSE 15615
// begin ComMoveXY ( tmp , _x , _y ) ;
15594: LD_VAR 0 13
15598: PPUSH
15599: LD_VAR 0 11
15603: PPUSH
15604: LD_VAR 0 12
15608: PPUSH
15609: CALL_OW 111
// break ;
15613: GO 15617
// end ; end ;
15615: GO 15502
15617: POP
15618: POP
// end ; end ;
15619: GO 14944
15621: POP
15622: POP
// end ;
15623: LD_VAR 0 8
15627: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15628: LD_INT 0
15630: PPUSH
// result := true ;
15631: LD_ADDR_VAR 0 3
15635: PUSH
15636: LD_INT 1
15638: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15639: LD_VAR 0 2
15643: PUSH
15644: LD_INT 24
15646: DOUBLE
15647: EQUAL
15648: IFTRUE 15658
15650: LD_INT 33
15652: DOUBLE
15653: EQUAL
15654: IFTRUE 15658
15656: GO 15683
15658: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15659: LD_ADDR_VAR 0 3
15663: PUSH
15664: LD_INT 32
15666: PPUSH
15667: LD_VAR 0 1
15671: PPUSH
15672: CALL_OW 321
15676: PUSH
15677: LD_INT 2
15679: EQUAL
15680: ST_TO_ADDR
15681: GO 15999
15683: LD_INT 20
15685: DOUBLE
15686: EQUAL
15687: IFTRUE 15691
15689: GO 15716
15691: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15692: LD_ADDR_VAR 0 3
15696: PUSH
15697: LD_INT 6
15699: PPUSH
15700: LD_VAR 0 1
15704: PPUSH
15705: CALL_OW 321
15709: PUSH
15710: LD_INT 2
15712: EQUAL
15713: ST_TO_ADDR
15714: GO 15999
15716: LD_INT 22
15718: DOUBLE
15719: EQUAL
15720: IFTRUE 15730
15722: LD_INT 36
15724: DOUBLE
15725: EQUAL
15726: IFTRUE 15730
15728: GO 15755
15730: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15731: LD_ADDR_VAR 0 3
15735: PUSH
15736: LD_INT 15
15738: PPUSH
15739: LD_VAR 0 1
15743: PPUSH
15744: CALL_OW 321
15748: PUSH
15749: LD_INT 2
15751: EQUAL
15752: ST_TO_ADDR
15753: GO 15999
15755: LD_INT 30
15757: DOUBLE
15758: EQUAL
15759: IFTRUE 15763
15761: GO 15788
15763: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
15764: LD_ADDR_VAR 0 3
15768: PUSH
15769: LD_INT 20
15771: PPUSH
15772: LD_VAR 0 1
15776: PPUSH
15777: CALL_OW 321
15781: PUSH
15782: LD_INT 2
15784: EQUAL
15785: ST_TO_ADDR
15786: GO 15999
15788: LD_INT 28
15790: DOUBLE
15791: EQUAL
15792: IFTRUE 15802
15794: LD_INT 21
15796: DOUBLE
15797: EQUAL
15798: IFTRUE 15802
15800: GO 15827
15802: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
15803: LD_ADDR_VAR 0 3
15807: PUSH
15808: LD_INT 21
15810: PPUSH
15811: LD_VAR 0 1
15815: PPUSH
15816: CALL_OW 321
15820: PUSH
15821: LD_INT 2
15823: EQUAL
15824: ST_TO_ADDR
15825: GO 15999
15827: LD_INT 16
15829: DOUBLE
15830: EQUAL
15831: IFTRUE 15835
15833: GO 15860
15835: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
15836: LD_ADDR_VAR 0 3
15840: PUSH
15841: LD_INT 84
15843: PPUSH
15844: LD_VAR 0 1
15848: PPUSH
15849: CALL_OW 321
15853: PUSH
15854: LD_INT 2
15856: EQUAL
15857: ST_TO_ADDR
15858: GO 15999
15860: LD_INT 19
15862: DOUBLE
15863: EQUAL
15864: IFTRUE 15874
15866: LD_INT 23
15868: DOUBLE
15869: EQUAL
15870: IFTRUE 15874
15872: GO 15899
15874: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
15875: LD_ADDR_VAR 0 3
15879: PUSH
15880: LD_INT 83
15882: PPUSH
15883: LD_VAR 0 1
15887: PPUSH
15888: CALL_OW 321
15892: PUSH
15893: LD_INT 2
15895: EQUAL
15896: ST_TO_ADDR
15897: GO 15999
15899: LD_INT 17
15901: DOUBLE
15902: EQUAL
15903: IFTRUE 15907
15905: GO 15932
15907: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15908: LD_ADDR_VAR 0 3
15912: PUSH
15913: LD_INT 39
15915: PPUSH
15916: LD_VAR 0 1
15920: PPUSH
15921: CALL_OW 321
15925: PUSH
15926: LD_INT 2
15928: EQUAL
15929: ST_TO_ADDR
15930: GO 15999
15932: LD_INT 18
15934: DOUBLE
15935: EQUAL
15936: IFTRUE 15940
15938: GO 15965
15940: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15941: LD_ADDR_VAR 0 3
15945: PUSH
15946: LD_INT 40
15948: PPUSH
15949: LD_VAR 0 1
15953: PPUSH
15954: CALL_OW 321
15958: PUSH
15959: LD_INT 2
15961: EQUAL
15962: ST_TO_ADDR
15963: GO 15999
15965: LD_INT 27
15967: DOUBLE
15968: EQUAL
15969: IFTRUE 15973
15971: GO 15998
15973: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15974: LD_ADDR_VAR 0 3
15978: PUSH
15979: LD_INT 35
15981: PPUSH
15982: LD_VAR 0 1
15986: PPUSH
15987: CALL_OW 321
15991: PUSH
15992: LD_INT 2
15994: EQUAL
15995: ST_TO_ADDR
15996: GO 15999
15998: POP
// end ;
15999: LD_VAR 0 3
16003: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16004: LD_INT 0
16006: PPUSH
16007: PPUSH
16008: PPUSH
16009: PPUSH
16010: PPUSH
16011: PPUSH
16012: PPUSH
16013: PPUSH
16014: PPUSH
16015: PPUSH
16016: PPUSH
// result := false ;
16017: LD_ADDR_VAR 0 6
16021: PUSH
16022: LD_INT 0
16024: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16025: LD_VAR 0 1
16029: NOT
16030: PUSH
16031: LD_VAR 0 1
16035: PPUSH
16036: CALL_OW 266
16040: PUSH
16041: LD_INT 0
16043: PUSH
16044: LD_INT 1
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: IN
16051: NOT
16052: OR
16053: PUSH
16054: LD_VAR 0 2
16058: NOT
16059: OR
16060: PUSH
16061: LD_VAR 0 5
16065: PUSH
16066: LD_INT 0
16068: PUSH
16069: LD_INT 1
16071: PUSH
16072: LD_INT 2
16074: PUSH
16075: LD_INT 3
16077: PUSH
16078: LD_INT 4
16080: PUSH
16081: LD_INT 5
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: IN
16092: NOT
16093: OR
16094: PUSH
16095: LD_VAR 0 3
16099: PPUSH
16100: LD_VAR 0 4
16104: PPUSH
16105: CALL_OW 488
16109: NOT
16110: OR
16111: IFFALSE 16115
// exit ;
16113: GO 16851
// side := GetSide ( depot ) ;
16115: LD_ADDR_VAR 0 9
16119: PUSH
16120: LD_VAR 0 1
16124: PPUSH
16125: CALL_OW 255
16129: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16130: LD_VAR 0 9
16134: PPUSH
16135: LD_VAR 0 2
16139: PPUSH
16140: CALL 15628 0 2
16144: NOT
16145: IFFALSE 16149
// exit ;
16147: GO 16851
// pom := GetBase ( depot ) ;
16149: LD_ADDR_VAR 0 10
16153: PUSH
16154: LD_VAR 0 1
16158: PPUSH
16159: CALL_OW 274
16163: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16164: LD_ADDR_VAR 0 11
16168: PUSH
16169: LD_VAR 0 2
16173: PPUSH
16174: LD_VAR 0 1
16178: PPUSH
16179: CALL_OW 248
16183: PPUSH
16184: CALL_OW 450
16188: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16189: LD_VAR 0 10
16193: PPUSH
16194: LD_INT 1
16196: PPUSH
16197: CALL_OW 275
16201: PUSH
16202: LD_VAR 0 11
16206: PUSH
16207: LD_INT 1
16209: ARRAY
16210: GREATEREQUAL
16211: PUSH
16212: LD_VAR 0 10
16216: PPUSH
16217: LD_INT 2
16219: PPUSH
16220: CALL_OW 275
16224: PUSH
16225: LD_VAR 0 11
16229: PUSH
16230: LD_INT 2
16232: ARRAY
16233: GREATEREQUAL
16234: AND
16235: PUSH
16236: LD_VAR 0 10
16240: PPUSH
16241: LD_INT 3
16243: PPUSH
16244: CALL_OW 275
16248: PUSH
16249: LD_VAR 0 11
16253: PUSH
16254: LD_INT 3
16256: ARRAY
16257: GREATEREQUAL
16258: AND
16259: NOT
16260: IFFALSE 16264
// exit ;
16262: GO 16851
// if GetBType ( depot ) = b_depot then
16264: LD_VAR 0 1
16268: PPUSH
16269: CALL_OW 266
16273: PUSH
16274: LD_INT 0
16276: EQUAL
16277: IFFALSE 16289
// dist := 28 else
16279: LD_ADDR_VAR 0 14
16283: PUSH
16284: LD_INT 28
16286: ST_TO_ADDR
16287: GO 16297
// dist := 36 ;
16289: LD_ADDR_VAR 0 14
16293: PUSH
16294: LD_INT 36
16296: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16297: LD_VAR 0 1
16301: PPUSH
16302: LD_VAR 0 3
16306: PPUSH
16307: LD_VAR 0 4
16311: PPUSH
16312: CALL_OW 297
16316: PUSH
16317: LD_VAR 0 14
16321: GREATER
16322: IFFALSE 16326
// exit ;
16324: GO 16851
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16326: LD_ADDR_VAR 0 12
16330: PUSH
16331: LD_VAR 0 2
16335: PPUSH
16336: LD_VAR 0 3
16340: PPUSH
16341: LD_VAR 0 4
16345: PPUSH
16346: LD_VAR 0 5
16350: PPUSH
16351: LD_VAR 0 1
16355: PPUSH
16356: CALL_OW 248
16360: PPUSH
16361: LD_INT 0
16363: PPUSH
16364: CALL 16856 0 6
16368: ST_TO_ADDR
// if not hexes then
16369: LD_VAR 0 12
16373: NOT
16374: IFFALSE 16378
// exit ;
16376: GO 16851
// hex := GetHexInfo ( x , y ) ;
16378: LD_ADDR_VAR 0 15
16382: PUSH
16383: LD_VAR 0 3
16387: PPUSH
16388: LD_VAR 0 4
16392: PPUSH
16393: CALL_OW 546
16397: ST_TO_ADDR
// if hex [ 1 ] then
16398: LD_VAR 0 15
16402: PUSH
16403: LD_INT 1
16405: ARRAY
16406: IFFALSE 16410
// exit ;
16408: GO 16851
// height := hex [ 2 ] ;
16410: LD_ADDR_VAR 0 13
16414: PUSH
16415: LD_VAR 0 15
16419: PUSH
16420: LD_INT 2
16422: ARRAY
16423: ST_TO_ADDR
// for i = 1 to hexes do
16424: LD_ADDR_VAR 0 7
16428: PUSH
16429: DOUBLE
16430: LD_INT 1
16432: DEC
16433: ST_TO_ADDR
16434: LD_VAR 0 12
16438: PUSH
16439: FOR_TO
16440: IFFALSE 16770
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16442: LD_VAR 0 12
16446: PUSH
16447: LD_VAR 0 7
16451: ARRAY
16452: PUSH
16453: LD_INT 1
16455: ARRAY
16456: PPUSH
16457: LD_VAR 0 12
16461: PUSH
16462: LD_VAR 0 7
16466: ARRAY
16467: PUSH
16468: LD_INT 2
16470: ARRAY
16471: PPUSH
16472: CALL_OW 488
16476: NOT
16477: PUSH
16478: LD_VAR 0 12
16482: PUSH
16483: LD_VAR 0 7
16487: ARRAY
16488: PUSH
16489: LD_INT 1
16491: ARRAY
16492: PPUSH
16493: LD_VAR 0 12
16497: PUSH
16498: LD_VAR 0 7
16502: ARRAY
16503: PUSH
16504: LD_INT 2
16506: ARRAY
16507: PPUSH
16508: CALL_OW 428
16512: PUSH
16513: LD_INT 0
16515: GREATER
16516: OR
16517: PUSH
16518: LD_VAR 0 12
16522: PUSH
16523: LD_VAR 0 7
16527: ARRAY
16528: PUSH
16529: LD_INT 1
16531: ARRAY
16532: PPUSH
16533: LD_VAR 0 12
16537: PUSH
16538: LD_VAR 0 7
16542: ARRAY
16543: PUSH
16544: LD_INT 2
16546: ARRAY
16547: PPUSH
16548: CALL_OW 351
16552: OR
16553: IFFALSE 16559
// exit ;
16555: POP
16556: POP
16557: GO 16851
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16559: LD_ADDR_VAR 0 8
16563: PUSH
16564: LD_VAR 0 12
16568: PUSH
16569: LD_VAR 0 7
16573: ARRAY
16574: PUSH
16575: LD_INT 1
16577: ARRAY
16578: PPUSH
16579: LD_VAR 0 12
16583: PUSH
16584: LD_VAR 0 7
16588: ARRAY
16589: PUSH
16590: LD_INT 2
16592: ARRAY
16593: PPUSH
16594: CALL_OW 546
16598: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16599: LD_VAR 0 8
16603: PUSH
16604: LD_INT 1
16606: ARRAY
16607: PUSH
16608: LD_VAR 0 8
16612: PUSH
16613: LD_INT 2
16615: ARRAY
16616: PUSH
16617: LD_VAR 0 13
16621: PUSH
16622: LD_INT 2
16624: PLUS
16625: GREATER
16626: OR
16627: PUSH
16628: LD_VAR 0 8
16632: PUSH
16633: LD_INT 2
16635: ARRAY
16636: PUSH
16637: LD_VAR 0 13
16641: PUSH
16642: LD_INT 2
16644: MINUS
16645: LESS
16646: OR
16647: PUSH
16648: LD_VAR 0 8
16652: PUSH
16653: LD_INT 3
16655: ARRAY
16656: PUSH
16657: LD_INT 0
16659: PUSH
16660: LD_INT 8
16662: PUSH
16663: LD_INT 9
16665: PUSH
16666: LD_INT 10
16668: PUSH
16669: LD_INT 11
16671: PUSH
16672: LD_INT 12
16674: PUSH
16675: LD_INT 13
16677: PUSH
16678: LD_INT 16
16680: PUSH
16681: LD_INT 17
16683: PUSH
16684: LD_INT 18
16686: PUSH
16687: LD_INT 19
16689: PUSH
16690: LD_INT 20
16692: PUSH
16693: LD_INT 21
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: IN
16711: NOT
16712: OR
16713: PUSH
16714: LD_VAR 0 8
16718: PUSH
16719: LD_INT 5
16721: ARRAY
16722: NOT
16723: OR
16724: PUSH
16725: LD_VAR 0 8
16729: PUSH
16730: LD_INT 6
16732: ARRAY
16733: PUSH
16734: LD_INT 1
16736: PUSH
16737: LD_INT 2
16739: PUSH
16740: LD_INT 7
16742: PUSH
16743: LD_INT 9
16745: PUSH
16746: LD_INT 10
16748: PUSH
16749: LD_INT 11
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: IN
16760: NOT
16761: OR
16762: IFFALSE 16768
// exit ;
16764: POP
16765: POP
16766: GO 16851
// end ;
16768: GO 16439
16770: POP
16771: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16772: LD_VAR 0 9
16776: PPUSH
16777: LD_VAR 0 3
16781: PPUSH
16782: LD_VAR 0 4
16786: PPUSH
16787: LD_INT 20
16789: PPUSH
16790: CALL 8803 0 4
16794: PUSH
16795: LD_INT 4
16797: ARRAY
16798: IFFALSE 16802
// exit ;
16800: GO 16851
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16802: LD_VAR 0 2
16806: PUSH
16807: LD_INT 29
16809: PUSH
16810: LD_INT 30
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: IN
16817: PUSH
16818: LD_VAR 0 3
16822: PPUSH
16823: LD_VAR 0 4
16827: PPUSH
16828: LD_VAR 0 9
16832: PPUSH
16833: CALL_OW 440
16837: NOT
16838: AND
16839: IFFALSE 16843
// exit ;
16841: GO 16851
// result := true ;
16843: LD_ADDR_VAR 0 6
16847: PUSH
16848: LD_INT 1
16850: ST_TO_ADDR
// end ;
16851: LD_VAR 0 6
16855: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16856: LD_INT 0
16858: PPUSH
16859: PPUSH
16860: PPUSH
16861: PPUSH
16862: PPUSH
16863: PPUSH
16864: PPUSH
16865: PPUSH
16866: PPUSH
16867: PPUSH
16868: PPUSH
16869: PPUSH
16870: PPUSH
16871: PPUSH
16872: PPUSH
16873: PPUSH
16874: PPUSH
16875: PPUSH
16876: PPUSH
16877: PPUSH
16878: PPUSH
16879: PPUSH
16880: PPUSH
16881: PPUSH
16882: PPUSH
16883: PPUSH
16884: PPUSH
16885: PPUSH
16886: PPUSH
16887: PPUSH
16888: PPUSH
16889: PPUSH
16890: PPUSH
16891: PPUSH
16892: PPUSH
16893: PPUSH
16894: PPUSH
16895: PPUSH
16896: PPUSH
16897: PPUSH
16898: PPUSH
16899: PPUSH
16900: PPUSH
16901: PPUSH
16902: PPUSH
16903: PPUSH
16904: PPUSH
16905: PPUSH
16906: PPUSH
16907: PPUSH
16908: PPUSH
16909: PPUSH
16910: PPUSH
16911: PPUSH
16912: PPUSH
16913: PPUSH
16914: PPUSH
16915: PPUSH
// result = [ ] ;
16916: LD_ADDR_VAR 0 7
16920: PUSH
16921: EMPTY
16922: ST_TO_ADDR
// temp_list = [ ] ;
16923: LD_ADDR_VAR 0 9
16927: PUSH
16928: EMPTY
16929: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16930: LD_VAR 0 4
16934: PUSH
16935: LD_INT 0
16937: PUSH
16938: LD_INT 1
16940: PUSH
16941: LD_INT 2
16943: PUSH
16944: LD_INT 3
16946: PUSH
16947: LD_INT 4
16949: PUSH
16950: LD_INT 5
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: IN
16961: NOT
16962: PUSH
16963: LD_VAR 0 1
16967: PUSH
16968: LD_INT 0
16970: PUSH
16971: LD_INT 1
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: IN
16978: PUSH
16979: LD_VAR 0 5
16983: PUSH
16984: LD_INT 1
16986: PUSH
16987: LD_INT 2
16989: PUSH
16990: LD_INT 3
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: LIST
16997: IN
16998: NOT
16999: AND
17000: OR
17001: IFFALSE 17005
// exit ;
17003: GO 35396
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17005: LD_VAR 0 1
17009: PUSH
17010: LD_INT 6
17012: PUSH
17013: LD_INT 7
17015: PUSH
17016: LD_INT 8
17018: PUSH
17019: LD_INT 13
17021: PUSH
17022: LD_INT 12
17024: PUSH
17025: LD_INT 15
17027: PUSH
17028: LD_INT 11
17030: PUSH
17031: LD_INT 14
17033: PUSH
17034: LD_INT 10
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: IN
17048: IFFALSE 17058
// btype = b_lab ;
17050: LD_ADDR_VAR 0 1
17054: PUSH
17055: LD_INT 6
17057: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17058: LD_VAR 0 6
17062: PUSH
17063: LD_INT 0
17065: PUSH
17066: LD_INT 1
17068: PUSH
17069: LD_INT 2
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: LIST
17076: IN
17077: NOT
17078: PUSH
17079: LD_VAR 0 1
17083: PUSH
17084: LD_INT 0
17086: PUSH
17087: LD_INT 1
17089: PUSH
17090: LD_INT 2
17092: PUSH
17093: LD_INT 3
17095: PUSH
17096: LD_INT 6
17098: PUSH
17099: LD_INT 36
17101: PUSH
17102: LD_INT 4
17104: PUSH
17105: LD_INT 5
17107: PUSH
17108: LD_INT 31
17110: PUSH
17111: LD_INT 32
17113: PUSH
17114: LD_INT 33
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: IN
17130: NOT
17131: PUSH
17132: LD_VAR 0 6
17136: PUSH
17137: LD_INT 1
17139: EQUAL
17140: AND
17141: OR
17142: PUSH
17143: LD_VAR 0 1
17147: PUSH
17148: LD_INT 2
17150: PUSH
17151: LD_INT 3
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: IN
17158: NOT
17159: PUSH
17160: LD_VAR 0 6
17164: PUSH
17165: LD_INT 2
17167: EQUAL
17168: AND
17169: OR
17170: IFFALSE 17180
// mode = 0 ;
17172: LD_ADDR_VAR 0 6
17176: PUSH
17177: LD_INT 0
17179: ST_TO_ADDR
// case mode of 0 :
17180: LD_VAR 0 6
17184: PUSH
17185: LD_INT 0
17187: DOUBLE
17188: EQUAL
17189: IFTRUE 17193
17191: GO 28646
17193: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17194: LD_ADDR_VAR 0 11
17198: PUSH
17199: LD_INT 0
17201: PUSH
17202: LD_INT 0
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 0
17211: PUSH
17212: LD_INT 1
17214: NEG
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: LD_INT 1
17222: PUSH
17223: LD_INT 0
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: LD_INT 1
17232: PUSH
17233: LD_INT 1
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 0
17242: PUSH
17243: LD_INT 1
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 1
17252: NEG
17253: PUSH
17254: LD_INT 0
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 1
17263: NEG
17264: PUSH
17265: LD_INT 1
17267: NEG
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PUSH
17273: LD_INT 1
17275: NEG
17276: PUSH
17277: LD_INT 2
17279: NEG
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: LD_INT 0
17287: PUSH
17288: LD_INT 2
17290: NEG
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: LD_INT 1
17298: PUSH
17299: LD_INT 1
17301: NEG
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 1
17309: PUSH
17310: LD_INT 2
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 0
17319: PUSH
17320: LD_INT 2
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 1
17329: NEG
17330: PUSH
17331: LD_INT 1
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: LD_INT 1
17340: PUSH
17341: LD_INT 3
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: LD_INT 0
17350: PUSH
17351: LD_INT 3
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: LD_INT 1
17360: NEG
17361: PUSH
17362: LD_INT 2
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17387: LD_ADDR_VAR 0 12
17391: PUSH
17392: LD_INT 0
17394: PUSH
17395: LD_INT 0
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PUSH
17402: LD_INT 0
17404: PUSH
17405: LD_INT 1
17407: NEG
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: LD_INT 1
17415: PUSH
17416: LD_INT 0
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 1
17425: PUSH
17426: LD_INT 1
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: LD_INT 0
17435: PUSH
17436: LD_INT 1
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: LD_INT 1
17445: NEG
17446: PUSH
17447: LD_INT 0
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PUSH
17454: LD_INT 1
17456: NEG
17457: PUSH
17458: LD_INT 1
17460: NEG
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: PUSH
17466: LD_INT 1
17468: PUSH
17469: LD_INT 1
17471: NEG
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PUSH
17477: LD_INT 2
17479: PUSH
17480: LD_INT 0
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 2
17489: PUSH
17490: LD_INT 1
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 1
17499: NEG
17500: PUSH
17501: LD_INT 1
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 2
17510: NEG
17511: PUSH
17512: LD_INT 0
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PUSH
17519: LD_INT 2
17521: NEG
17522: PUSH
17523: LD_INT 1
17525: NEG
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: LD_INT 2
17533: NEG
17534: PUSH
17535: LD_INT 1
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 3
17544: NEG
17545: PUSH
17546: LD_INT 0
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PUSH
17553: LD_INT 3
17555: NEG
17556: PUSH
17557: LD_INT 1
17559: NEG
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17583: LD_ADDR_VAR 0 13
17587: PUSH
17588: LD_INT 0
17590: PUSH
17591: LD_INT 0
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 0
17600: PUSH
17601: LD_INT 1
17603: NEG
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 1
17611: PUSH
17612: LD_INT 0
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: LD_INT 1
17621: PUSH
17622: LD_INT 1
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 0
17631: PUSH
17632: LD_INT 1
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 1
17641: NEG
17642: PUSH
17643: LD_INT 0
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PUSH
17650: LD_INT 1
17652: NEG
17653: PUSH
17654: LD_INT 1
17656: NEG
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: LD_INT 1
17664: NEG
17665: PUSH
17666: LD_INT 2
17668: NEG
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: PUSH
17674: LD_INT 2
17676: PUSH
17677: LD_INT 1
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: PUSH
17684: LD_INT 2
17686: PUSH
17687: LD_INT 2
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: PUSH
17694: LD_INT 1
17696: PUSH
17697: LD_INT 2
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PUSH
17704: LD_INT 2
17706: NEG
17707: PUSH
17708: LD_INT 1
17710: NEG
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: LD_INT 2
17718: NEG
17719: PUSH
17720: LD_INT 2
17722: NEG
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 2
17730: NEG
17731: PUSH
17732: LD_INT 3
17734: NEG
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: PUSH
17740: LD_INT 3
17742: NEG
17743: PUSH
17744: LD_INT 2
17746: NEG
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 3
17754: NEG
17755: PUSH
17756: LD_INT 3
17758: NEG
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17782: LD_ADDR_VAR 0 14
17786: PUSH
17787: LD_INT 0
17789: PUSH
17790: LD_INT 0
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 0
17799: PUSH
17800: LD_INT 1
17802: NEG
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 1
17810: PUSH
17811: LD_INT 0
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: LD_INT 1
17820: PUSH
17821: LD_INT 1
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PUSH
17828: LD_INT 0
17830: PUSH
17831: LD_INT 1
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 1
17840: NEG
17841: PUSH
17842: LD_INT 0
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: PUSH
17849: LD_INT 1
17851: NEG
17852: PUSH
17853: LD_INT 1
17855: NEG
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 1
17863: NEG
17864: PUSH
17865: LD_INT 2
17867: NEG
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PUSH
17873: LD_INT 0
17875: PUSH
17876: LD_INT 2
17878: NEG
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 1
17886: PUSH
17887: LD_INT 1
17889: NEG
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 1
17897: PUSH
17898: LD_INT 2
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 0
17907: PUSH
17908: LD_INT 2
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: LD_INT 1
17917: NEG
17918: PUSH
17919: LD_INT 1
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PUSH
17926: LD_INT 1
17928: NEG
17929: PUSH
17930: LD_INT 3
17932: NEG
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 0
17940: PUSH
17941: LD_INT 3
17943: NEG
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 1
17951: PUSH
17952: LD_INT 2
17954: NEG
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17978: LD_ADDR_VAR 0 15
17982: PUSH
17983: LD_INT 0
17985: PUSH
17986: LD_INT 0
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 0
17995: PUSH
17996: LD_INT 1
17998: NEG
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 1
18006: PUSH
18007: LD_INT 0
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: LD_INT 1
18016: PUSH
18017: LD_INT 1
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 0
18026: PUSH
18027: LD_INT 1
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PUSH
18034: LD_INT 1
18036: NEG
18037: PUSH
18038: LD_INT 0
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: PUSH
18045: LD_INT 1
18047: NEG
18048: PUSH
18049: LD_INT 1
18051: NEG
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: LD_INT 1
18059: PUSH
18060: LD_INT 1
18062: NEG
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 2
18070: PUSH
18071: LD_INT 0
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 2
18080: PUSH
18081: LD_INT 1
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 1
18090: NEG
18091: PUSH
18092: LD_INT 1
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: PUSH
18099: LD_INT 2
18101: NEG
18102: PUSH
18103: LD_INT 0
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 2
18112: NEG
18113: PUSH
18114: LD_INT 1
18116: NEG
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: LD_INT 2
18124: PUSH
18125: LD_INT 1
18127: NEG
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 3
18135: PUSH
18136: LD_INT 0
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 3
18145: PUSH
18146: LD_INT 1
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18171: LD_ADDR_VAR 0 16
18175: PUSH
18176: LD_INT 0
18178: PUSH
18179: LD_INT 0
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: LD_INT 0
18188: PUSH
18189: LD_INT 1
18191: NEG
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 1
18199: PUSH
18200: LD_INT 0
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 1
18209: PUSH
18210: LD_INT 1
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 0
18219: PUSH
18220: LD_INT 1
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 1
18229: NEG
18230: PUSH
18231: LD_INT 0
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: PUSH
18238: LD_INT 1
18240: NEG
18241: PUSH
18242: LD_INT 1
18244: NEG
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 1
18252: NEG
18253: PUSH
18254: LD_INT 2
18256: NEG
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: LD_INT 2
18264: PUSH
18265: LD_INT 1
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 2
18274: PUSH
18275: LD_INT 2
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 1
18284: PUSH
18285: LD_INT 2
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 2
18294: NEG
18295: PUSH
18296: LD_INT 1
18298: NEG
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: LD_INT 2
18306: NEG
18307: PUSH
18308: LD_INT 2
18310: NEG
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 3
18318: PUSH
18319: LD_INT 2
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PUSH
18326: LD_INT 3
18328: PUSH
18329: LD_INT 3
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: PUSH
18336: LD_INT 2
18338: PUSH
18339: LD_INT 3
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18364: LD_ADDR_VAR 0 17
18368: PUSH
18369: LD_INT 0
18371: PUSH
18372: LD_INT 0
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 0
18381: PUSH
18382: LD_INT 1
18384: NEG
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: PUSH
18390: LD_INT 1
18392: PUSH
18393: LD_INT 0
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PUSH
18400: LD_INT 1
18402: PUSH
18403: LD_INT 1
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 0
18412: PUSH
18413: LD_INT 1
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: LD_INT 1
18422: NEG
18423: PUSH
18424: LD_INT 0
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: LD_INT 1
18433: NEG
18434: PUSH
18435: LD_INT 1
18437: NEG
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: LD_INT 1
18445: NEG
18446: PUSH
18447: LD_INT 2
18449: NEG
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: LD_INT 0
18457: PUSH
18458: LD_INT 2
18460: NEG
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 1
18468: PUSH
18469: LD_INT 1
18471: NEG
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 2
18479: PUSH
18480: LD_INT 0
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 2
18489: PUSH
18490: LD_INT 1
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: LD_INT 2
18499: PUSH
18500: LD_INT 2
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 1
18509: PUSH
18510: LD_INT 2
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 0
18519: PUSH
18520: LD_INT 2
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 1
18529: NEG
18530: PUSH
18531: LD_INT 1
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: LD_INT 2
18540: NEG
18541: PUSH
18542: LD_INT 0
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PUSH
18549: LD_INT 2
18551: NEG
18552: PUSH
18553: LD_INT 1
18555: NEG
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 2
18563: NEG
18564: PUSH
18565: LD_INT 2
18567: NEG
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18594: LD_ADDR_VAR 0 18
18598: PUSH
18599: LD_INT 0
18601: PUSH
18602: LD_INT 0
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: LD_INT 0
18611: PUSH
18612: LD_INT 1
18614: NEG
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 1
18622: PUSH
18623: LD_INT 0
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 1
18632: PUSH
18633: LD_INT 1
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 0
18642: PUSH
18643: LD_INT 1
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 1
18652: NEG
18653: PUSH
18654: LD_INT 0
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 1
18663: NEG
18664: PUSH
18665: LD_INT 1
18667: NEG
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 1
18675: NEG
18676: PUSH
18677: LD_INT 2
18679: NEG
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PUSH
18685: LD_INT 0
18687: PUSH
18688: LD_INT 2
18690: NEG
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: LD_INT 1
18698: PUSH
18699: LD_INT 1
18701: NEG
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: LD_INT 2
18709: PUSH
18710: LD_INT 0
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PUSH
18717: LD_INT 2
18719: PUSH
18720: LD_INT 1
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PUSH
18727: LD_INT 2
18729: PUSH
18730: LD_INT 2
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 1
18739: PUSH
18740: LD_INT 2
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: LD_INT 0
18749: PUSH
18750: LD_INT 2
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: LD_INT 1
18759: NEG
18760: PUSH
18761: LD_INT 1
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 2
18770: NEG
18771: PUSH
18772: LD_INT 0
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: LD_INT 2
18781: NEG
18782: PUSH
18783: LD_INT 1
18785: NEG
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 2
18793: NEG
18794: PUSH
18795: LD_INT 2
18797: NEG
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18824: LD_ADDR_VAR 0 19
18828: PUSH
18829: LD_INT 0
18831: PUSH
18832: LD_INT 0
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 0
18841: PUSH
18842: LD_INT 1
18844: NEG
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 1
18852: PUSH
18853: LD_INT 0
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: LD_INT 1
18862: PUSH
18863: LD_INT 1
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: LD_INT 0
18872: PUSH
18873: LD_INT 1
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 1
18882: NEG
18883: PUSH
18884: LD_INT 0
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 1
18893: NEG
18894: PUSH
18895: LD_INT 1
18897: NEG
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 1
18905: NEG
18906: PUSH
18907: LD_INT 2
18909: NEG
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: LD_INT 0
18917: PUSH
18918: LD_INT 2
18920: NEG
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 1
18928: PUSH
18929: LD_INT 1
18931: NEG
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 2
18939: PUSH
18940: LD_INT 0
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: LD_INT 2
18949: PUSH
18950: LD_INT 1
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: LD_INT 2
18959: PUSH
18960: LD_INT 2
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 1
18969: PUSH
18970: LD_INT 2
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 0
18979: PUSH
18980: LD_INT 2
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: LD_INT 1
18989: NEG
18990: PUSH
18991: LD_INT 1
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: LD_INT 2
19000: NEG
19001: PUSH
19002: LD_INT 0
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: LD_INT 2
19011: NEG
19012: PUSH
19013: LD_INT 1
19015: NEG
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 2
19023: NEG
19024: PUSH
19025: LD_INT 2
19027: NEG
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19054: LD_ADDR_VAR 0 20
19058: PUSH
19059: LD_INT 0
19061: PUSH
19062: LD_INT 0
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 0
19071: PUSH
19072: LD_INT 1
19074: NEG
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 1
19082: PUSH
19083: LD_INT 0
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 1
19092: PUSH
19093: LD_INT 1
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 0
19102: PUSH
19103: LD_INT 1
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: LD_INT 1
19112: NEG
19113: PUSH
19114: LD_INT 0
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: LD_INT 1
19123: NEG
19124: PUSH
19125: LD_INT 1
19127: NEG
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 1
19135: NEG
19136: PUSH
19137: LD_INT 2
19139: NEG
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 0
19147: PUSH
19148: LD_INT 2
19150: NEG
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 1
19158: PUSH
19159: LD_INT 1
19161: NEG
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: LD_INT 2
19169: PUSH
19170: LD_INT 0
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 2
19179: PUSH
19180: LD_INT 1
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 2
19189: PUSH
19190: LD_INT 2
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 1
19199: PUSH
19200: LD_INT 2
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 0
19209: PUSH
19210: LD_INT 2
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 1
19219: NEG
19220: PUSH
19221: LD_INT 1
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: LD_INT 2
19230: NEG
19231: PUSH
19232: LD_INT 0
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PUSH
19239: LD_INT 2
19241: NEG
19242: PUSH
19243: LD_INT 1
19245: NEG
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 2
19253: NEG
19254: PUSH
19255: LD_INT 2
19257: NEG
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19284: LD_ADDR_VAR 0 21
19288: PUSH
19289: LD_INT 0
19291: PUSH
19292: LD_INT 0
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 0
19301: PUSH
19302: LD_INT 1
19304: NEG
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 1
19312: PUSH
19313: LD_INT 0
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: LD_INT 1
19322: PUSH
19323: LD_INT 1
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 0
19332: PUSH
19333: LD_INT 1
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 1
19342: NEG
19343: PUSH
19344: LD_INT 0
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 1
19353: NEG
19354: PUSH
19355: LD_INT 1
19357: NEG
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 1
19365: NEG
19366: PUSH
19367: LD_INT 2
19369: NEG
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 0
19377: PUSH
19378: LD_INT 2
19380: NEG
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 1
19388: PUSH
19389: LD_INT 1
19391: NEG
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: LD_INT 2
19399: PUSH
19400: LD_INT 0
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 2
19409: PUSH
19410: LD_INT 1
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 2
19419: PUSH
19420: LD_INT 2
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 1
19429: PUSH
19430: LD_INT 2
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: LD_INT 0
19439: PUSH
19440: LD_INT 2
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 1
19449: NEG
19450: PUSH
19451: LD_INT 1
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 2
19460: NEG
19461: PUSH
19462: LD_INT 0
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: LD_INT 2
19471: NEG
19472: PUSH
19473: LD_INT 1
19475: NEG
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 2
19483: NEG
19484: PUSH
19485: LD_INT 2
19487: NEG
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19514: LD_ADDR_VAR 0 22
19518: PUSH
19519: LD_INT 0
19521: PUSH
19522: LD_INT 0
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 0
19531: PUSH
19532: LD_INT 1
19534: NEG
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 1
19542: PUSH
19543: LD_INT 0
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: LD_INT 1
19552: PUSH
19553: LD_INT 1
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 0
19562: PUSH
19563: LD_INT 1
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 1
19572: NEG
19573: PUSH
19574: LD_INT 0
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 1
19583: NEG
19584: PUSH
19585: LD_INT 1
19587: NEG
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: LD_INT 1
19595: NEG
19596: PUSH
19597: LD_INT 2
19599: NEG
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 0
19607: PUSH
19608: LD_INT 2
19610: NEG
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: LD_INT 1
19618: PUSH
19619: LD_INT 1
19621: NEG
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 2
19629: PUSH
19630: LD_INT 0
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 2
19639: PUSH
19640: LD_INT 1
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 2
19649: PUSH
19650: LD_INT 2
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 1
19659: PUSH
19660: LD_INT 2
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 0
19669: PUSH
19670: LD_INT 2
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 1
19679: NEG
19680: PUSH
19681: LD_INT 1
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 2
19690: NEG
19691: PUSH
19692: LD_INT 0
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: PUSH
19699: LD_INT 2
19701: NEG
19702: PUSH
19703: LD_INT 1
19705: NEG
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 2
19713: NEG
19714: PUSH
19715: LD_INT 2
19717: NEG
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19744: LD_ADDR_VAR 0 23
19748: PUSH
19749: LD_INT 0
19751: PUSH
19752: LD_INT 0
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 0
19761: PUSH
19762: LD_INT 1
19764: NEG
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 1
19772: PUSH
19773: LD_INT 0
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 1
19782: PUSH
19783: LD_INT 1
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 0
19792: PUSH
19793: LD_INT 1
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 1
19802: NEG
19803: PUSH
19804: LD_INT 0
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: PUSH
19811: LD_INT 1
19813: NEG
19814: PUSH
19815: LD_INT 1
19817: NEG
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 1
19825: NEG
19826: PUSH
19827: LD_INT 2
19829: NEG
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 0
19837: PUSH
19838: LD_INT 2
19840: NEG
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 1
19848: PUSH
19849: LD_INT 1
19851: NEG
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 2
19859: PUSH
19860: LD_INT 0
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 2
19869: PUSH
19870: LD_INT 1
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 2
19879: PUSH
19880: LD_INT 2
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 1
19889: PUSH
19890: LD_INT 2
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 0
19899: PUSH
19900: LD_INT 2
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 1
19909: NEG
19910: PUSH
19911: LD_INT 1
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 2
19920: NEG
19921: PUSH
19922: LD_INT 0
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: LD_INT 2
19931: NEG
19932: PUSH
19933: LD_INT 1
19935: NEG
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 2
19943: NEG
19944: PUSH
19945: LD_INT 2
19947: NEG
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 2
19955: NEG
19956: PUSH
19957: LD_INT 3
19959: NEG
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 1
19967: NEG
19968: PUSH
19969: LD_INT 3
19971: NEG
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PUSH
19977: LD_INT 1
19979: PUSH
19980: LD_INT 2
19982: NEG
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PUSH
19988: LD_INT 2
19990: PUSH
19991: LD_INT 1
19993: NEG
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20024: LD_ADDR_VAR 0 24
20028: PUSH
20029: LD_INT 0
20031: PUSH
20032: LD_INT 0
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: LD_INT 0
20041: PUSH
20042: LD_INT 1
20044: NEG
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PUSH
20050: LD_INT 1
20052: PUSH
20053: LD_INT 0
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: LD_INT 1
20062: PUSH
20063: LD_INT 1
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 0
20072: PUSH
20073: LD_INT 1
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 1
20082: NEG
20083: PUSH
20084: LD_INT 0
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 1
20093: NEG
20094: PUSH
20095: LD_INT 1
20097: NEG
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 1
20105: NEG
20106: PUSH
20107: LD_INT 2
20109: NEG
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: LD_INT 0
20117: PUSH
20118: LD_INT 2
20120: NEG
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 1
20128: PUSH
20129: LD_INT 1
20131: NEG
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 2
20139: PUSH
20140: LD_INT 0
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 2
20149: PUSH
20150: LD_INT 1
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 2
20159: PUSH
20160: LD_INT 2
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 1
20169: PUSH
20170: LD_INT 2
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PUSH
20177: LD_INT 0
20179: PUSH
20180: LD_INT 2
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 1
20189: NEG
20190: PUSH
20191: LD_INT 1
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 2
20200: NEG
20201: PUSH
20202: LD_INT 0
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 2
20211: NEG
20212: PUSH
20213: LD_INT 1
20215: NEG
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 2
20223: NEG
20224: PUSH
20225: LD_INT 2
20227: NEG
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 1
20235: PUSH
20236: LD_INT 2
20238: NEG
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 2
20246: PUSH
20247: LD_INT 1
20249: NEG
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 3
20257: PUSH
20258: LD_INT 1
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 3
20267: PUSH
20268: LD_INT 2
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20300: LD_ADDR_VAR 0 25
20304: PUSH
20305: LD_INT 0
20307: PUSH
20308: LD_INT 0
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 0
20317: PUSH
20318: LD_INT 1
20320: NEG
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 1
20328: PUSH
20329: LD_INT 0
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: LD_INT 1
20338: PUSH
20339: LD_INT 1
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 0
20348: PUSH
20349: LD_INT 1
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 1
20358: NEG
20359: PUSH
20360: LD_INT 0
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 1
20369: NEG
20370: PUSH
20371: LD_INT 1
20373: NEG
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 1
20381: NEG
20382: PUSH
20383: LD_INT 2
20385: NEG
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 0
20393: PUSH
20394: LD_INT 2
20396: NEG
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 1
20404: PUSH
20405: LD_INT 1
20407: NEG
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 2
20415: PUSH
20416: LD_INT 0
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 2
20425: PUSH
20426: LD_INT 1
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 2
20435: PUSH
20436: LD_INT 2
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 1
20445: PUSH
20446: LD_INT 2
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 0
20455: PUSH
20456: LD_INT 2
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 1
20465: NEG
20466: PUSH
20467: LD_INT 1
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: LD_INT 2
20476: NEG
20477: PUSH
20478: LD_INT 0
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 2
20487: NEG
20488: PUSH
20489: LD_INT 1
20491: NEG
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 2
20499: NEG
20500: PUSH
20501: LD_INT 2
20503: NEG
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 3
20511: PUSH
20512: LD_INT 1
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: LD_INT 3
20521: PUSH
20522: LD_INT 2
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: LD_INT 2
20531: PUSH
20532: LD_INT 3
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 1
20541: PUSH
20542: LD_INT 3
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20574: LD_ADDR_VAR 0 26
20578: PUSH
20579: LD_INT 0
20581: PUSH
20582: LD_INT 0
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 0
20591: PUSH
20592: LD_INT 1
20594: NEG
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: PUSH
20600: LD_INT 1
20602: PUSH
20603: LD_INT 0
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PUSH
20610: LD_INT 1
20612: PUSH
20613: LD_INT 1
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 0
20622: PUSH
20623: LD_INT 1
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: LD_INT 1
20632: NEG
20633: PUSH
20634: LD_INT 0
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 1
20643: NEG
20644: PUSH
20645: LD_INT 1
20647: NEG
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 1
20655: NEG
20656: PUSH
20657: LD_INT 2
20659: NEG
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 0
20667: PUSH
20668: LD_INT 2
20670: NEG
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 1
20678: PUSH
20679: LD_INT 1
20681: NEG
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 2
20689: PUSH
20690: LD_INT 0
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: PUSH
20697: LD_INT 2
20699: PUSH
20700: LD_INT 1
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PUSH
20707: LD_INT 2
20709: PUSH
20710: LD_INT 2
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: PUSH
20717: LD_INT 1
20719: PUSH
20720: LD_INT 2
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: LD_INT 0
20729: PUSH
20730: LD_INT 2
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: LD_INT 1
20739: NEG
20740: PUSH
20741: LD_INT 1
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 2
20750: NEG
20751: PUSH
20752: LD_INT 0
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 2
20761: NEG
20762: PUSH
20763: LD_INT 1
20765: NEG
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 2
20773: NEG
20774: PUSH
20775: LD_INT 2
20777: NEG
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 2
20785: PUSH
20786: LD_INT 3
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 1
20795: PUSH
20796: LD_INT 3
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: LD_INT 1
20805: NEG
20806: PUSH
20807: LD_INT 2
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: LD_INT 2
20816: NEG
20817: PUSH
20818: LD_INT 1
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20850: LD_ADDR_VAR 0 27
20854: PUSH
20855: LD_INT 0
20857: PUSH
20858: LD_INT 0
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 0
20867: PUSH
20868: LD_INT 1
20870: NEG
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 1
20878: PUSH
20879: LD_INT 0
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 1
20888: PUSH
20889: LD_INT 1
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: LD_INT 0
20898: PUSH
20899: LD_INT 1
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 1
20908: NEG
20909: PUSH
20910: LD_INT 0
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: PUSH
20917: LD_INT 1
20919: NEG
20920: PUSH
20921: LD_INT 1
20923: NEG
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PUSH
20929: LD_INT 1
20931: NEG
20932: PUSH
20933: LD_INT 2
20935: NEG
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 0
20943: PUSH
20944: LD_INT 2
20946: NEG
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 1
20954: PUSH
20955: LD_INT 1
20957: NEG
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 2
20965: PUSH
20966: LD_INT 0
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 2
20975: PUSH
20976: LD_INT 1
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 2
20985: PUSH
20986: LD_INT 2
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 1
20995: PUSH
20996: LD_INT 2
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 0
21005: PUSH
21006: LD_INT 2
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: LD_INT 1
21015: NEG
21016: PUSH
21017: LD_INT 1
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: LD_INT 2
21026: NEG
21027: PUSH
21028: LD_INT 0
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PUSH
21035: LD_INT 2
21037: NEG
21038: PUSH
21039: LD_INT 1
21041: NEG
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 2
21049: NEG
21050: PUSH
21051: LD_INT 2
21053: NEG
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 1
21061: NEG
21062: PUSH
21063: LD_INT 2
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: LD_INT 2
21072: NEG
21073: PUSH
21074: LD_INT 1
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 3
21083: NEG
21084: PUSH
21085: LD_INT 1
21087: NEG
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 3
21095: NEG
21096: PUSH
21097: LD_INT 2
21099: NEG
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21130: LD_ADDR_VAR 0 28
21134: PUSH
21135: LD_INT 0
21137: PUSH
21138: LD_INT 0
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 0
21147: PUSH
21148: LD_INT 1
21150: NEG
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 1
21158: PUSH
21159: LD_INT 0
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: LD_INT 1
21168: PUSH
21169: LD_INT 1
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 0
21178: PUSH
21179: LD_INT 1
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 1
21188: NEG
21189: PUSH
21190: LD_INT 0
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 1
21199: NEG
21200: PUSH
21201: LD_INT 1
21203: NEG
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: LD_INT 1
21211: NEG
21212: PUSH
21213: LD_INT 2
21215: NEG
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 0
21223: PUSH
21224: LD_INT 2
21226: NEG
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 1
21234: PUSH
21235: LD_INT 1
21237: NEG
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 2
21245: PUSH
21246: LD_INT 0
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PUSH
21253: LD_INT 2
21255: PUSH
21256: LD_INT 1
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 2
21265: PUSH
21266: LD_INT 2
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 1
21275: PUSH
21276: LD_INT 2
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: PUSH
21283: LD_INT 0
21285: PUSH
21286: LD_INT 2
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: PUSH
21293: LD_INT 1
21295: NEG
21296: PUSH
21297: LD_INT 1
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: LD_INT 2
21306: NEG
21307: PUSH
21308: LD_INT 0
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: LD_INT 2
21317: NEG
21318: PUSH
21319: LD_INT 1
21321: NEG
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 2
21329: NEG
21330: PUSH
21331: LD_INT 2
21333: NEG
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 2
21341: NEG
21342: PUSH
21343: LD_INT 3
21345: NEG
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 1
21353: NEG
21354: PUSH
21355: LD_INT 3
21357: NEG
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 3
21365: NEG
21366: PUSH
21367: LD_INT 1
21369: NEG
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 3
21377: NEG
21378: PUSH
21379: LD_INT 2
21381: NEG
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21412: LD_ADDR_VAR 0 29
21416: PUSH
21417: LD_INT 0
21419: PUSH
21420: LD_INT 0
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 0
21429: PUSH
21430: LD_INT 1
21432: NEG
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 1
21440: PUSH
21441: LD_INT 0
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 1
21450: PUSH
21451: LD_INT 1
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 0
21460: PUSH
21461: LD_INT 1
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 1
21470: NEG
21471: PUSH
21472: LD_INT 0
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 1
21481: NEG
21482: PUSH
21483: LD_INT 1
21485: NEG
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 1
21493: NEG
21494: PUSH
21495: LD_INT 2
21497: NEG
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 0
21505: PUSH
21506: LD_INT 2
21508: NEG
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: LD_INT 1
21516: PUSH
21517: LD_INT 1
21519: NEG
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: LD_INT 2
21527: PUSH
21528: LD_INT 0
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: PUSH
21535: LD_INT 2
21537: PUSH
21538: LD_INT 1
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: PUSH
21545: LD_INT 1
21547: PUSH
21548: LD_INT 2
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 0
21557: PUSH
21558: LD_INT 2
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: LD_INT 1
21567: NEG
21568: PUSH
21569: LD_INT 1
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 2
21578: NEG
21579: PUSH
21580: LD_INT 1
21582: NEG
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 2
21590: NEG
21591: PUSH
21592: LD_INT 2
21594: NEG
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 2
21602: NEG
21603: PUSH
21604: LD_INT 3
21606: NEG
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 2
21614: PUSH
21615: LD_INT 1
21617: NEG
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 3
21625: PUSH
21626: LD_INT 1
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 1
21635: PUSH
21636: LD_INT 3
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: LD_INT 1
21645: NEG
21646: PUSH
21647: LD_INT 2
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PUSH
21654: LD_INT 3
21656: NEG
21657: PUSH
21658: LD_INT 2
21660: NEG
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21691: LD_ADDR_VAR 0 30
21695: PUSH
21696: LD_INT 0
21698: PUSH
21699: LD_INT 0
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 0
21708: PUSH
21709: LD_INT 1
21711: NEG
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 1
21719: PUSH
21720: LD_INT 0
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: PUSH
21727: LD_INT 1
21729: PUSH
21730: LD_INT 1
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 0
21739: PUSH
21740: LD_INT 1
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 1
21749: NEG
21750: PUSH
21751: LD_INT 0
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 1
21760: NEG
21761: PUSH
21762: LD_INT 1
21764: NEG
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 1
21772: NEG
21773: PUSH
21774: LD_INT 2
21776: NEG
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 0
21784: PUSH
21785: LD_INT 2
21787: NEG
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 1
21795: PUSH
21796: LD_INT 1
21798: NEG
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 2
21806: PUSH
21807: LD_INT 0
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: LD_INT 2
21816: PUSH
21817: LD_INT 1
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 2
21826: PUSH
21827: LD_INT 2
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 1
21836: PUSH
21837: LD_INT 2
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 1
21846: NEG
21847: PUSH
21848: LD_INT 1
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 2
21857: NEG
21858: PUSH
21859: LD_INT 0
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PUSH
21866: LD_INT 2
21868: NEG
21869: PUSH
21870: LD_INT 1
21872: NEG
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PUSH
21878: LD_INT 1
21880: NEG
21881: PUSH
21882: LD_INT 3
21884: NEG
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 1
21892: PUSH
21893: LD_INT 2
21895: NEG
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 3
21903: PUSH
21904: LD_INT 2
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 2
21913: PUSH
21914: LD_INT 3
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 2
21923: NEG
21924: PUSH
21925: LD_INT 1
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 3
21934: NEG
21935: PUSH
21936: LD_INT 1
21938: NEG
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21969: LD_ADDR_VAR 0 31
21973: PUSH
21974: LD_INT 0
21976: PUSH
21977: LD_INT 0
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 0
21986: PUSH
21987: LD_INT 1
21989: NEG
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PUSH
21995: LD_INT 1
21997: PUSH
21998: LD_INT 0
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: LD_INT 1
22007: PUSH
22008: LD_INT 1
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 0
22017: PUSH
22018: LD_INT 1
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 1
22027: NEG
22028: PUSH
22029: LD_INT 0
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: LD_INT 1
22038: NEG
22039: PUSH
22040: LD_INT 1
22042: NEG
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 1
22050: NEG
22051: PUSH
22052: LD_INT 2
22054: NEG
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 1
22062: PUSH
22063: LD_INT 1
22065: NEG
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 2
22073: PUSH
22074: LD_INT 0
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 2
22083: PUSH
22084: LD_INT 1
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 2
22093: PUSH
22094: LD_INT 2
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 1
22103: PUSH
22104: LD_INT 2
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 0
22113: PUSH
22114: LD_INT 2
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 1
22123: NEG
22124: PUSH
22125: LD_INT 1
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 2
22134: NEG
22135: PUSH
22136: LD_INT 1
22138: NEG
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: LD_INT 2
22146: NEG
22147: PUSH
22148: LD_INT 2
22150: NEG
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 2
22158: NEG
22159: PUSH
22160: LD_INT 3
22162: NEG
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 2
22170: PUSH
22171: LD_INT 1
22173: NEG
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 3
22181: PUSH
22182: LD_INT 1
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 1
22191: PUSH
22192: LD_INT 3
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 1
22201: NEG
22202: PUSH
22203: LD_INT 2
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 3
22212: NEG
22213: PUSH
22214: LD_INT 2
22216: NEG
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22247: LD_ADDR_VAR 0 32
22251: PUSH
22252: LD_INT 0
22254: PUSH
22255: LD_INT 0
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 0
22264: PUSH
22265: LD_INT 1
22267: NEG
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: LD_INT 1
22275: PUSH
22276: LD_INT 0
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 1
22285: PUSH
22286: LD_INT 1
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 0
22295: PUSH
22296: LD_INT 1
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 1
22305: NEG
22306: PUSH
22307: LD_INT 0
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 1
22316: NEG
22317: PUSH
22318: LD_INT 1
22320: NEG
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 1
22328: NEG
22329: PUSH
22330: LD_INT 2
22332: NEG
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 0
22340: PUSH
22341: LD_INT 2
22343: NEG
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 1
22351: PUSH
22352: LD_INT 1
22354: NEG
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 2
22362: PUSH
22363: LD_INT 1
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 2
22372: PUSH
22373: LD_INT 2
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 1
22382: PUSH
22383: LD_INT 2
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 0
22392: PUSH
22393: LD_INT 2
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 1
22402: NEG
22403: PUSH
22404: LD_INT 1
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: LD_INT 2
22413: NEG
22414: PUSH
22415: LD_INT 0
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 2
22424: NEG
22425: PUSH
22426: LD_INT 1
22428: NEG
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PUSH
22434: LD_INT 1
22436: NEG
22437: PUSH
22438: LD_INT 3
22440: NEG
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 1
22448: PUSH
22449: LD_INT 2
22451: NEG
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 3
22459: PUSH
22460: LD_INT 2
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 2
22469: PUSH
22470: LD_INT 3
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: LD_INT 2
22479: NEG
22480: PUSH
22481: LD_INT 1
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 3
22490: NEG
22491: PUSH
22492: LD_INT 1
22494: NEG
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22525: LD_ADDR_VAR 0 33
22529: PUSH
22530: LD_INT 0
22532: PUSH
22533: LD_INT 0
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 0
22542: PUSH
22543: LD_INT 1
22545: NEG
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 1
22553: PUSH
22554: LD_INT 0
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 1
22563: PUSH
22564: LD_INT 1
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 0
22573: PUSH
22574: LD_INT 1
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 1
22583: NEG
22584: PUSH
22585: LD_INT 0
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: LD_INT 1
22594: NEG
22595: PUSH
22596: LD_INT 1
22598: NEG
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 1
22606: NEG
22607: PUSH
22608: LD_INT 2
22610: NEG
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 1
22618: PUSH
22619: LD_INT 1
22621: NEG
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 2
22629: PUSH
22630: LD_INT 0
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 2
22639: PUSH
22640: LD_INT 1
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 1
22649: PUSH
22650: LD_INT 2
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 0
22659: PUSH
22660: LD_INT 2
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: LD_INT 1
22669: NEG
22670: PUSH
22671: LD_INT 1
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: LD_INT 2
22680: NEG
22681: PUSH
22682: LD_INT 0
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 2
22691: NEG
22692: PUSH
22693: LD_INT 1
22695: NEG
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 2
22703: NEG
22704: PUSH
22705: LD_INT 2
22707: NEG
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 2
22715: NEG
22716: PUSH
22717: LD_INT 3
22719: NEG
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 2
22727: PUSH
22728: LD_INT 1
22730: NEG
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: PUSH
22736: LD_INT 3
22738: PUSH
22739: LD_INT 1
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 1
22748: PUSH
22749: LD_INT 3
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 1
22758: NEG
22759: PUSH
22760: LD_INT 2
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PUSH
22767: LD_INT 3
22769: NEG
22770: PUSH
22771: LD_INT 2
22773: NEG
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22804: LD_ADDR_VAR 0 34
22808: PUSH
22809: LD_INT 0
22811: PUSH
22812: LD_INT 0
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: LD_INT 0
22821: PUSH
22822: LD_INT 1
22824: NEG
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 1
22832: PUSH
22833: LD_INT 0
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: LD_INT 1
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 0
22852: PUSH
22853: LD_INT 1
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 1
22862: NEG
22863: PUSH
22864: LD_INT 0
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 1
22873: NEG
22874: PUSH
22875: LD_INT 1
22877: NEG
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: LD_INT 1
22885: NEG
22886: PUSH
22887: LD_INT 2
22889: NEG
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 0
22897: PUSH
22898: LD_INT 2
22900: NEG
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 1
22908: PUSH
22909: LD_INT 1
22911: NEG
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 2
22919: PUSH
22920: LD_INT 1
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 2
22929: PUSH
22930: LD_INT 2
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 1
22939: PUSH
22940: LD_INT 2
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 1
22949: NEG
22950: PUSH
22951: LD_INT 1
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 2
22960: NEG
22961: PUSH
22962: LD_INT 0
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 2
22971: NEG
22972: PUSH
22973: LD_INT 1
22975: NEG
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 2
22983: NEG
22984: PUSH
22985: LD_INT 2
22987: NEG
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 1
22995: NEG
22996: PUSH
22997: LD_INT 3
22999: NEG
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 1
23007: PUSH
23008: LD_INT 2
23010: NEG
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 3
23018: PUSH
23019: LD_INT 2
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 2
23028: PUSH
23029: LD_INT 3
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 2
23038: NEG
23039: PUSH
23040: LD_INT 1
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 3
23049: NEG
23050: PUSH
23051: LD_INT 1
23053: NEG
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23084: LD_ADDR_VAR 0 35
23088: PUSH
23089: LD_INT 0
23091: PUSH
23092: LD_INT 0
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 0
23101: PUSH
23102: LD_INT 1
23104: NEG
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PUSH
23110: LD_INT 1
23112: PUSH
23113: LD_INT 0
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 1
23122: PUSH
23123: LD_INT 1
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 0
23132: PUSH
23133: LD_INT 1
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 1
23142: NEG
23143: PUSH
23144: LD_INT 0
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 1
23153: NEG
23154: PUSH
23155: LD_INT 1
23157: NEG
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 2
23165: PUSH
23166: LD_INT 1
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: LD_INT 2
23175: NEG
23176: PUSH
23177: LD_INT 1
23179: NEG
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23196: LD_ADDR_VAR 0 36
23200: PUSH
23201: LD_INT 0
23203: PUSH
23204: LD_INT 0
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 0
23213: PUSH
23214: LD_INT 1
23216: NEG
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: LD_INT 1
23224: PUSH
23225: LD_INT 0
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: PUSH
23232: LD_INT 1
23234: PUSH
23235: LD_INT 1
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 0
23244: PUSH
23245: LD_INT 1
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PUSH
23252: LD_INT 1
23254: NEG
23255: PUSH
23256: LD_INT 0
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 1
23265: NEG
23266: PUSH
23267: LD_INT 1
23269: NEG
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 1
23277: NEG
23278: PUSH
23279: LD_INT 2
23281: NEG
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 1
23289: PUSH
23290: LD_INT 2
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23308: LD_ADDR_VAR 0 37
23312: PUSH
23313: LD_INT 0
23315: PUSH
23316: LD_INT 0
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 0
23325: PUSH
23326: LD_INT 1
23328: NEG
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 1
23336: PUSH
23337: LD_INT 0
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 1
23346: PUSH
23347: LD_INT 1
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: LD_INT 0
23356: PUSH
23357: LD_INT 1
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: LD_INT 1
23366: NEG
23367: PUSH
23368: LD_INT 0
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 1
23377: NEG
23378: PUSH
23379: LD_INT 1
23381: NEG
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 1
23389: PUSH
23390: LD_INT 1
23392: NEG
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 1
23400: NEG
23401: PUSH
23402: LD_INT 1
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23420: LD_ADDR_VAR 0 38
23424: PUSH
23425: LD_INT 0
23427: PUSH
23428: LD_INT 0
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 0
23437: PUSH
23438: LD_INT 1
23440: NEG
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 1
23448: PUSH
23449: LD_INT 0
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 1
23458: PUSH
23459: LD_INT 1
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 0
23468: PUSH
23469: LD_INT 1
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 1
23478: NEG
23479: PUSH
23480: LD_INT 0
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 1
23489: NEG
23490: PUSH
23491: LD_INT 1
23493: NEG
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: LD_INT 2
23501: PUSH
23502: LD_INT 1
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: PUSH
23509: LD_INT 2
23511: NEG
23512: PUSH
23513: LD_INT 1
23515: NEG
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23532: LD_ADDR_VAR 0 39
23536: PUSH
23537: LD_INT 0
23539: PUSH
23540: LD_INT 0
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 0
23549: PUSH
23550: LD_INT 1
23552: NEG
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: LD_INT 1
23560: PUSH
23561: LD_INT 0
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 1
23570: PUSH
23571: LD_INT 1
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 0
23580: PUSH
23581: LD_INT 1
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 1
23590: NEG
23591: PUSH
23592: LD_INT 0
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 1
23601: NEG
23602: PUSH
23603: LD_INT 1
23605: NEG
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: LD_INT 1
23613: NEG
23614: PUSH
23615: LD_INT 2
23617: NEG
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 1
23625: PUSH
23626: LD_INT 2
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23644: LD_ADDR_VAR 0 40
23648: PUSH
23649: LD_INT 0
23651: PUSH
23652: LD_INT 0
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 0
23661: PUSH
23662: LD_INT 1
23664: NEG
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 1
23672: PUSH
23673: LD_INT 0
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 1
23682: PUSH
23683: LD_INT 1
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 0
23692: PUSH
23693: LD_INT 1
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 1
23702: NEG
23703: PUSH
23704: LD_INT 0
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PUSH
23711: LD_INT 1
23713: NEG
23714: PUSH
23715: LD_INT 1
23717: NEG
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PUSH
23723: LD_INT 1
23725: PUSH
23726: LD_INT 1
23728: NEG
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: PUSH
23734: LD_INT 1
23736: NEG
23737: PUSH
23738: LD_INT 1
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23756: LD_ADDR_VAR 0 41
23760: PUSH
23761: LD_INT 0
23763: PUSH
23764: LD_INT 0
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 0
23773: PUSH
23774: LD_INT 1
23776: NEG
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 1
23784: PUSH
23785: LD_INT 0
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 1
23794: PUSH
23795: LD_INT 1
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 0
23804: PUSH
23805: LD_INT 1
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 1
23814: NEG
23815: PUSH
23816: LD_INT 0
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 1
23825: NEG
23826: PUSH
23827: LD_INT 1
23829: NEG
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 1
23837: NEG
23838: PUSH
23839: LD_INT 2
23841: NEG
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: LD_INT 1
23849: PUSH
23850: LD_INT 1
23852: NEG
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 2
23860: PUSH
23861: LD_INT 0
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 2
23870: PUSH
23871: LD_INT 1
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 2
23880: PUSH
23881: LD_INT 2
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 1
23890: PUSH
23891: LD_INT 2
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 1
23900: NEG
23901: PUSH
23902: LD_INT 1
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: LD_INT 2
23911: NEG
23912: PUSH
23913: LD_INT 0
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 2
23922: NEG
23923: PUSH
23924: LD_INT 1
23926: NEG
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 2
23934: NEG
23935: PUSH
23936: LD_INT 2
23938: NEG
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PUSH
23944: LD_INT 2
23946: NEG
23947: PUSH
23948: LD_INT 3
23950: NEG
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 2
23958: PUSH
23959: LD_INT 1
23961: NEG
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 3
23969: PUSH
23970: LD_INT 0
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 3
23979: PUSH
23980: LD_INT 1
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 3
23989: PUSH
23990: LD_INT 2
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 3
23999: PUSH
24000: LD_INT 3
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 2
24009: PUSH
24010: LD_INT 3
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 2
24019: NEG
24020: PUSH
24021: LD_INT 1
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 3
24030: NEG
24031: PUSH
24032: LD_INT 0
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 3
24041: NEG
24042: PUSH
24043: LD_INT 1
24045: NEG
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: PUSH
24051: LD_INT 3
24053: NEG
24054: PUSH
24055: LD_INT 2
24057: NEG
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: LD_INT 3
24065: NEG
24066: PUSH
24067: LD_INT 3
24069: NEG
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24106: LD_ADDR_VAR 0 42
24110: PUSH
24111: LD_INT 0
24113: PUSH
24114: LD_INT 0
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 0
24123: PUSH
24124: LD_INT 1
24126: NEG
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 1
24134: PUSH
24135: LD_INT 0
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 1
24144: PUSH
24145: LD_INT 1
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 0
24154: PUSH
24155: LD_INT 1
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: LD_INT 1
24164: NEG
24165: PUSH
24166: LD_INT 0
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PUSH
24173: LD_INT 1
24175: NEG
24176: PUSH
24177: LD_INT 1
24179: NEG
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 1
24187: NEG
24188: PUSH
24189: LD_INT 2
24191: NEG
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 0
24199: PUSH
24200: LD_INT 2
24202: NEG
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 1
24210: PUSH
24211: LD_INT 1
24213: NEG
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 2
24221: PUSH
24222: LD_INT 1
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 2
24231: PUSH
24232: LD_INT 2
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 1
24241: PUSH
24242: LD_INT 2
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 0
24251: PUSH
24252: LD_INT 2
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 1
24261: NEG
24262: PUSH
24263: LD_INT 1
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: LD_INT 2
24272: NEG
24273: PUSH
24274: LD_INT 1
24276: NEG
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 2
24284: NEG
24285: PUSH
24286: LD_INT 2
24288: NEG
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 2
24296: NEG
24297: PUSH
24298: LD_INT 3
24300: NEG
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 1
24308: NEG
24309: PUSH
24310: LD_INT 3
24312: NEG
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 0
24320: PUSH
24321: LD_INT 3
24323: NEG
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 1
24331: PUSH
24332: LD_INT 2
24334: NEG
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 3
24342: PUSH
24343: LD_INT 2
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 3
24352: PUSH
24353: LD_INT 3
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 2
24362: PUSH
24363: LD_INT 3
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 1
24372: PUSH
24373: LD_INT 3
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 0
24382: PUSH
24383: LD_INT 3
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: PUSH
24390: LD_INT 1
24392: NEG
24393: PUSH
24394: LD_INT 2
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 3
24403: NEG
24404: PUSH
24405: LD_INT 2
24407: NEG
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 3
24415: NEG
24416: PUSH
24417: LD_INT 3
24419: NEG
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24456: LD_ADDR_VAR 0 43
24460: PUSH
24461: LD_INT 0
24463: PUSH
24464: LD_INT 0
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 0
24473: PUSH
24474: LD_INT 1
24476: NEG
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 1
24484: PUSH
24485: LD_INT 0
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 1
24494: PUSH
24495: LD_INT 1
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 0
24504: PUSH
24505: LD_INT 1
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 1
24514: NEG
24515: PUSH
24516: LD_INT 0
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: LD_INT 1
24525: NEG
24526: PUSH
24527: LD_INT 1
24529: NEG
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: LD_INT 1
24537: NEG
24538: PUSH
24539: LD_INT 2
24541: NEG
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 0
24549: PUSH
24550: LD_INT 2
24552: NEG
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 1
24560: PUSH
24561: LD_INT 1
24563: NEG
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 2
24571: PUSH
24572: LD_INT 0
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 2
24581: PUSH
24582: LD_INT 1
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 1
24591: PUSH
24592: LD_INT 2
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 0
24601: PUSH
24602: LD_INT 2
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 1
24611: NEG
24612: PUSH
24613: LD_INT 1
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 2
24622: NEG
24623: PUSH
24624: LD_INT 0
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 2
24633: NEG
24634: PUSH
24635: LD_INT 1
24637: NEG
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 1
24645: NEG
24646: PUSH
24647: LD_INT 3
24649: NEG
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 0
24657: PUSH
24658: LD_INT 3
24660: NEG
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 1
24668: PUSH
24669: LD_INT 2
24671: NEG
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 2
24679: PUSH
24680: LD_INT 1
24682: NEG
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 3
24690: PUSH
24691: LD_INT 0
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 3
24700: PUSH
24701: LD_INT 1
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 1
24710: PUSH
24711: LD_INT 3
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 0
24720: PUSH
24721: LD_INT 3
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 1
24730: NEG
24731: PUSH
24732: LD_INT 2
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 2
24741: NEG
24742: PUSH
24743: LD_INT 1
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 3
24752: NEG
24753: PUSH
24754: LD_INT 0
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: LD_INT 3
24763: NEG
24764: PUSH
24765: LD_INT 1
24767: NEG
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24804: LD_ADDR_VAR 0 44
24808: PUSH
24809: LD_INT 0
24811: PUSH
24812: LD_INT 0
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 0
24821: PUSH
24822: LD_INT 1
24824: NEG
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 1
24832: PUSH
24833: LD_INT 0
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 1
24842: PUSH
24843: LD_INT 1
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 0
24852: PUSH
24853: LD_INT 1
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 1
24862: NEG
24863: PUSH
24864: LD_INT 0
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 1
24873: NEG
24874: PUSH
24875: LD_INT 1
24877: NEG
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 1
24885: NEG
24886: PUSH
24887: LD_INT 2
24889: NEG
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 1
24897: PUSH
24898: LD_INT 1
24900: NEG
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 2
24908: PUSH
24909: LD_INT 0
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 2
24918: PUSH
24919: LD_INT 1
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: LD_INT 2
24928: PUSH
24929: LD_INT 2
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 1
24938: PUSH
24939: LD_INT 2
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 1
24948: NEG
24949: PUSH
24950: LD_INT 1
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 2
24959: NEG
24960: PUSH
24961: LD_INT 0
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 2
24970: NEG
24971: PUSH
24972: LD_INT 1
24974: NEG
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 2
24982: NEG
24983: PUSH
24984: LD_INT 2
24986: NEG
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 2
24994: NEG
24995: PUSH
24996: LD_INT 3
24998: NEG
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 2
25006: PUSH
25007: LD_INT 1
25009: NEG
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: LD_INT 3
25017: PUSH
25018: LD_INT 0
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 3
25027: PUSH
25028: LD_INT 1
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 3
25037: PUSH
25038: LD_INT 2
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 3
25047: PUSH
25048: LD_INT 3
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 2
25057: PUSH
25058: LD_INT 3
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 2
25067: NEG
25068: PUSH
25069: LD_INT 1
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 3
25078: NEG
25079: PUSH
25080: LD_INT 0
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 3
25089: NEG
25090: PUSH
25091: LD_INT 1
25093: NEG
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 3
25101: NEG
25102: PUSH
25103: LD_INT 2
25105: NEG
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 3
25113: NEG
25114: PUSH
25115: LD_INT 3
25117: NEG
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25154: LD_ADDR_VAR 0 45
25158: PUSH
25159: LD_INT 0
25161: PUSH
25162: LD_INT 0
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: LD_INT 1
25174: NEG
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 1
25182: PUSH
25183: LD_INT 0
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 1
25192: PUSH
25193: LD_INT 1
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 0
25202: PUSH
25203: LD_INT 1
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 1
25212: NEG
25213: PUSH
25214: LD_INT 0
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 1
25223: NEG
25224: PUSH
25225: LD_INT 1
25227: NEG
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 1
25235: NEG
25236: PUSH
25237: LD_INT 2
25239: NEG
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 0
25247: PUSH
25248: LD_INT 2
25250: NEG
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 1
25258: PUSH
25259: LD_INT 1
25261: NEG
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 2
25269: PUSH
25270: LD_INT 1
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 2
25279: PUSH
25280: LD_INT 2
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 1
25289: PUSH
25290: LD_INT 2
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 0
25299: PUSH
25300: LD_INT 2
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 1
25309: NEG
25310: PUSH
25311: LD_INT 1
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 2
25320: NEG
25321: PUSH
25322: LD_INT 1
25324: NEG
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 2
25332: NEG
25333: PUSH
25334: LD_INT 2
25336: NEG
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 2
25344: NEG
25345: PUSH
25346: LD_INT 3
25348: NEG
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 1
25356: NEG
25357: PUSH
25358: LD_INT 3
25360: NEG
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 0
25368: PUSH
25369: LD_INT 3
25371: NEG
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 1
25379: PUSH
25380: LD_INT 2
25382: NEG
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 3
25390: PUSH
25391: LD_INT 2
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 3
25400: PUSH
25401: LD_INT 3
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 2
25410: PUSH
25411: LD_INT 3
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: LD_INT 1
25420: PUSH
25421: LD_INT 3
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 0
25430: PUSH
25431: LD_INT 3
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 1
25440: NEG
25441: PUSH
25442: LD_INT 2
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 3
25451: NEG
25452: PUSH
25453: LD_INT 2
25455: NEG
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 3
25463: NEG
25464: PUSH
25465: LD_INT 3
25467: NEG
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25504: LD_ADDR_VAR 0 46
25508: PUSH
25509: LD_INT 0
25511: PUSH
25512: LD_INT 0
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 0
25521: PUSH
25522: LD_INT 1
25524: NEG
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 1
25532: PUSH
25533: LD_INT 0
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 1
25542: PUSH
25543: LD_INT 1
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 0
25552: PUSH
25553: LD_INT 1
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: LD_INT 1
25562: NEG
25563: PUSH
25564: LD_INT 0
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: LD_INT 1
25573: NEG
25574: PUSH
25575: LD_INT 1
25577: NEG
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 1
25585: NEG
25586: PUSH
25587: LD_INT 2
25589: NEG
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 0
25597: PUSH
25598: LD_INT 2
25600: NEG
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 1
25608: PUSH
25609: LD_INT 1
25611: NEG
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 2
25619: PUSH
25620: LD_INT 0
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 2
25629: PUSH
25630: LD_INT 1
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 1
25639: PUSH
25640: LD_INT 2
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 0
25649: PUSH
25650: LD_INT 2
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 1
25659: NEG
25660: PUSH
25661: LD_INT 1
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 2
25670: NEG
25671: PUSH
25672: LD_INT 0
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 2
25681: NEG
25682: PUSH
25683: LD_INT 1
25685: NEG
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 1
25693: NEG
25694: PUSH
25695: LD_INT 3
25697: NEG
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 0
25705: PUSH
25706: LD_INT 3
25708: NEG
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 1
25716: PUSH
25717: LD_INT 2
25719: NEG
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 2
25727: PUSH
25728: LD_INT 1
25730: NEG
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 3
25738: PUSH
25739: LD_INT 0
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 3
25748: PUSH
25749: LD_INT 1
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: LD_INT 1
25758: PUSH
25759: LD_INT 3
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 0
25768: PUSH
25769: LD_INT 3
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 1
25778: NEG
25779: PUSH
25780: LD_INT 2
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 2
25789: NEG
25790: PUSH
25791: LD_INT 1
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 3
25800: NEG
25801: PUSH
25802: LD_INT 0
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 3
25811: NEG
25812: PUSH
25813: LD_INT 1
25815: NEG
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25852: LD_ADDR_VAR 0 47
25856: PUSH
25857: LD_INT 0
25859: PUSH
25860: LD_INT 0
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 0
25869: PUSH
25870: LD_INT 1
25872: NEG
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: LD_INT 1
25880: PUSH
25881: LD_INT 0
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 1
25890: PUSH
25891: LD_INT 1
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 0
25900: PUSH
25901: LD_INT 1
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 1
25910: NEG
25911: PUSH
25912: LD_INT 0
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 1
25921: NEG
25922: PUSH
25923: LD_INT 1
25925: NEG
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 1
25933: NEG
25934: PUSH
25935: LD_INT 2
25937: NEG
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 0
25945: PUSH
25946: LD_INT 2
25948: NEG
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: LD_INT 1
25956: PUSH
25957: LD_INT 1
25959: NEG
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 2
25967: NEG
25968: PUSH
25969: LD_INT 1
25971: NEG
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 2
25979: NEG
25980: PUSH
25981: LD_INT 2
25983: NEG
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26003: LD_ADDR_VAR 0 48
26007: PUSH
26008: LD_INT 0
26010: PUSH
26011: LD_INT 0
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 0
26020: PUSH
26021: LD_INT 1
26023: NEG
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 1
26031: PUSH
26032: LD_INT 0
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 1
26041: PUSH
26042: LD_INT 1
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 0
26051: PUSH
26052: LD_INT 1
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 1
26061: NEG
26062: PUSH
26063: LD_INT 0
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 1
26072: NEG
26073: PUSH
26074: LD_INT 1
26076: NEG
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 1
26084: NEG
26085: PUSH
26086: LD_INT 2
26088: NEG
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 0
26096: PUSH
26097: LD_INT 2
26099: NEG
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 1
26107: PUSH
26108: LD_INT 1
26110: NEG
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 2
26118: PUSH
26119: LD_INT 0
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 2
26128: PUSH
26129: LD_INT 1
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26150: LD_ADDR_VAR 0 49
26154: PUSH
26155: LD_INT 0
26157: PUSH
26158: LD_INT 0
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 0
26167: PUSH
26168: LD_INT 1
26170: NEG
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 1
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 1
26188: PUSH
26189: LD_INT 1
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 0
26198: PUSH
26199: LD_INT 1
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 1
26208: NEG
26209: PUSH
26210: LD_INT 0
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 1
26219: NEG
26220: PUSH
26221: LD_INT 1
26223: NEG
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 1
26231: PUSH
26232: LD_INT 1
26234: NEG
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 2
26242: PUSH
26243: LD_INT 0
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 2
26252: PUSH
26253: LD_INT 1
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: LD_INT 2
26262: PUSH
26263: LD_INT 2
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 1
26272: PUSH
26273: LD_INT 2
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26294: LD_ADDR_VAR 0 50
26298: PUSH
26299: LD_INT 0
26301: PUSH
26302: LD_INT 0
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 0
26311: PUSH
26312: LD_INT 1
26314: NEG
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 1
26322: PUSH
26323: LD_INT 0
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 1
26332: PUSH
26333: LD_INT 1
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 0
26342: PUSH
26343: LD_INT 1
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 1
26352: NEG
26353: PUSH
26354: LD_INT 0
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 1
26363: NEG
26364: PUSH
26365: LD_INT 1
26367: NEG
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 2
26375: PUSH
26376: LD_INT 1
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 2
26385: PUSH
26386: LD_INT 2
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 1
26395: PUSH
26396: LD_INT 2
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 0
26405: PUSH
26406: LD_INT 2
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 1
26415: NEG
26416: PUSH
26417: LD_INT 1
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26438: LD_ADDR_VAR 0 51
26442: PUSH
26443: LD_INT 0
26445: PUSH
26446: LD_INT 0
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 0
26455: PUSH
26456: LD_INT 1
26458: NEG
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 1
26466: PUSH
26467: LD_INT 0
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 1
26476: PUSH
26477: LD_INT 1
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_INT 0
26486: PUSH
26487: LD_INT 1
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: LD_INT 1
26496: NEG
26497: PUSH
26498: LD_INT 0
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 1
26507: NEG
26508: PUSH
26509: LD_INT 1
26511: NEG
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: LD_INT 2
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 0
26529: PUSH
26530: LD_INT 2
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 1
26539: NEG
26540: PUSH
26541: LD_INT 1
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 2
26550: NEG
26551: PUSH
26552: LD_INT 0
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 2
26561: NEG
26562: PUSH
26563: LD_INT 1
26565: NEG
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26585: LD_ADDR_VAR 0 52
26589: PUSH
26590: LD_INT 0
26592: PUSH
26593: LD_INT 0
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 0
26602: PUSH
26603: LD_INT 1
26605: NEG
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 1
26613: PUSH
26614: LD_INT 0
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 1
26623: PUSH
26624: LD_INT 1
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 0
26633: PUSH
26634: LD_INT 1
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 1
26643: NEG
26644: PUSH
26645: LD_INT 0
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 1
26654: NEG
26655: PUSH
26656: LD_INT 1
26658: NEG
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 1
26666: NEG
26667: PUSH
26668: LD_INT 2
26670: NEG
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: LD_INT 1
26678: NEG
26679: PUSH
26680: LD_INT 1
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 2
26689: NEG
26690: PUSH
26691: LD_INT 0
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 2
26700: NEG
26701: PUSH
26702: LD_INT 1
26704: NEG
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 2
26712: NEG
26713: PUSH
26714: LD_INT 2
26716: NEG
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26736: LD_ADDR_VAR 0 53
26740: PUSH
26741: LD_INT 0
26743: PUSH
26744: LD_INT 0
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 0
26753: PUSH
26754: LD_INT 1
26756: NEG
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 1
26764: PUSH
26765: LD_INT 0
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: LD_INT 1
26774: PUSH
26775: LD_INT 1
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 0
26784: PUSH
26785: LD_INT 1
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 1
26794: NEG
26795: PUSH
26796: LD_INT 0
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 1
26805: NEG
26806: PUSH
26807: LD_INT 1
26809: NEG
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 1
26817: NEG
26818: PUSH
26819: LD_INT 2
26821: NEG
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: LD_INT 0
26829: PUSH
26830: LD_INT 2
26832: NEG
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 1
26840: PUSH
26841: LD_INT 1
26843: NEG
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 2
26851: PUSH
26852: LD_INT 0
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 2
26861: PUSH
26862: LD_INT 1
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 2
26871: PUSH
26872: LD_INT 2
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 1
26881: PUSH
26882: LD_INT 2
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: LD_INT 2
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 1
26901: NEG
26902: PUSH
26903: LD_INT 1
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 2
26912: NEG
26913: PUSH
26914: LD_INT 0
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 2
26923: NEG
26924: PUSH
26925: LD_INT 1
26927: NEG
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 2
26935: NEG
26936: PUSH
26937: LD_INT 2
26939: NEG
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26966: LD_ADDR_VAR 0 54
26970: PUSH
26971: LD_INT 0
26973: PUSH
26974: LD_INT 0
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 0
26983: PUSH
26984: LD_INT 1
26986: NEG
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 1
26994: PUSH
26995: LD_INT 0
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: LD_INT 1
27004: PUSH
27005: LD_INT 1
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 0
27014: PUSH
27015: LD_INT 1
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 1
27024: NEG
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 1
27035: NEG
27036: PUSH
27037: LD_INT 1
27039: NEG
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 1
27047: NEG
27048: PUSH
27049: LD_INT 2
27051: NEG
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 0
27059: PUSH
27060: LD_INT 2
27062: NEG
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: LD_INT 1
27070: PUSH
27071: LD_INT 1
27073: NEG
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 2
27081: PUSH
27082: LD_INT 0
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 2
27091: PUSH
27092: LD_INT 1
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 2
27101: PUSH
27102: LD_INT 2
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 1
27111: PUSH
27112: LD_INT 2
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 0
27121: PUSH
27122: LD_INT 2
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 1
27131: NEG
27132: PUSH
27133: LD_INT 1
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 2
27142: NEG
27143: PUSH
27144: LD_INT 0
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 2
27153: NEG
27154: PUSH
27155: LD_INT 1
27157: NEG
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 2
27165: NEG
27166: PUSH
27167: LD_INT 2
27169: NEG
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27196: LD_ADDR_VAR 0 55
27200: PUSH
27201: LD_INT 0
27203: PUSH
27204: LD_INT 0
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 0
27213: PUSH
27214: LD_INT 1
27216: NEG
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 1
27224: PUSH
27225: LD_INT 0
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 1
27234: PUSH
27235: LD_INT 1
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 0
27244: PUSH
27245: LD_INT 1
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 1
27254: NEG
27255: PUSH
27256: LD_INT 0
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 1
27265: NEG
27266: PUSH
27267: LD_INT 1
27269: NEG
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 1
27277: NEG
27278: PUSH
27279: LD_INT 2
27281: NEG
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 0
27289: PUSH
27290: LD_INT 2
27292: NEG
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 1
27300: PUSH
27301: LD_INT 1
27303: NEG
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 2
27311: PUSH
27312: LD_INT 0
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 2
27321: PUSH
27322: LD_INT 1
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 2
27331: PUSH
27332: LD_INT 2
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 1
27341: PUSH
27342: LD_INT 2
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 0
27351: PUSH
27352: LD_INT 2
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 1
27361: NEG
27362: PUSH
27363: LD_INT 1
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 2
27372: NEG
27373: PUSH
27374: LD_INT 0
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 2
27383: NEG
27384: PUSH
27385: LD_INT 1
27387: NEG
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 2
27395: NEG
27396: PUSH
27397: LD_INT 2
27399: NEG
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27426: LD_ADDR_VAR 0 56
27430: PUSH
27431: LD_INT 0
27433: PUSH
27434: LD_INT 0
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 0
27443: PUSH
27444: LD_INT 1
27446: NEG
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: LD_INT 1
27454: PUSH
27455: LD_INT 0
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PUSH
27462: LD_INT 1
27464: PUSH
27465: LD_INT 1
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PUSH
27472: LD_INT 0
27474: PUSH
27475: LD_INT 1
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: LD_INT 1
27484: NEG
27485: PUSH
27486: LD_INT 0
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 1
27495: NEG
27496: PUSH
27497: LD_INT 1
27499: NEG
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 1
27507: NEG
27508: PUSH
27509: LD_INT 2
27511: NEG
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 0
27519: PUSH
27520: LD_INT 2
27522: NEG
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 1
27530: PUSH
27531: LD_INT 1
27533: NEG
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 2
27541: PUSH
27542: LD_INT 0
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 2
27551: PUSH
27552: LD_INT 1
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 2
27561: PUSH
27562: LD_INT 2
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 1
27571: PUSH
27572: LD_INT 2
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 0
27581: PUSH
27582: LD_INT 2
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 1
27591: NEG
27592: PUSH
27593: LD_INT 1
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 2
27602: NEG
27603: PUSH
27604: LD_INT 0
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 2
27613: NEG
27614: PUSH
27615: LD_INT 1
27617: NEG
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 2
27625: NEG
27626: PUSH
27627: LD_INT 2
27629: NEG
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27656: LD_ADDR_VAR 0 57
27660: PUSH
27661: LD_INT 0
27663: PUSH
27664: LD_INT 0
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 0
27673: PUSH
27674: LD_INT 1
27676: NEG
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 1
27684: PUSH
27685: LD_INT 0
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 1
27694: PUSH
27695: LD_INT 1
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: LD_INT 0
27704: PUSH
27705: LD_INT 1
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 1
27714: NEG
27715: PUSH
27716: LD_INT 0
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 1
27725: NEG
27726: PUSH
27727: LD_INT 1
27729: NEG
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 1
27737: NEG
27738: PUSH
27739: LD_INT 2
27741: NEG
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 0
27749: PUSH
27750: LD_INT 2
27752: NEG
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 1
27760: PUSH
27761: LD_INT 1
27763: NEG
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 2
27771: PUSH
27772: LD_INT 0
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 2
27781: PUSH
27782: LD_INT 1
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 2
27791: PUSH
27792: LD_INT 2
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 1
27801: PUSH
27802: LD_INT 2
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 0
27811: PUSH
27812: LD_INT 2
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 1
27821: NEG
27822: PUSH
27823: LD_INT 1
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 2
27832: NEG
27833: PUSH
27834: LD_INT 0
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 2
27843: NEG
27844: PUSH
27845: LD_INT 1
27847: NEG
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 2
27855: NEG
27856: PUSH
27857: LD_INT 2
27859: NEG
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27886: LD_ADDR_VAR 0 58
27890: PUSH
27891: LD_INT 0
27893: PUSH
27894: LD_INT 0
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 0
27903: PUSH
27904: LD_INT 1
27906: NEG
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 1
27914: PUSH
27915: LD_INT 0
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PUSH
27922: LD_INT 1
27924: PUSH
27925: LD_INT 1
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 0
27934: PUSH
27935: LD_INT 1
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 1
27944: NEG
27945: PUSH
27946: LD_INT 0
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 1
27955: NEG
27956: PUSH
27957: LD_INT 1
27959: NEG
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 1
27967: NEG
27968: PUSH
27969: LD_INT 2
27971: NEG
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 0
27979: PUSH
27980: LD_INT 2
27982: NEG
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 1
27990: PUSH
27991: LD_INT 1
27993: NEG
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 2
28001: PUSH
28002: LD_INT 0
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 2
28011: PUSH
28012: LD_INT 1
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 2
28021: PUSH
28022: LD_INT 2
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 1
28031: PUSH
28032: LD_INT 2
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 0
28041: PUSH
28042: LD_INT 2
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 1
28051: NEG
28052: PUSH
28053: LD_INT 1
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 2
28062: NEG
28063: PUSH
28064: LD_INT 0
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 2
28073: NEG
28074: PUSH
28075: LD_INT 1
28077: NEG
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 2
28085: NEG
28086: PUSH
28087: LD_INT 2
28089: NEG
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28116: LD_ADDR_VAR 0 59
28120: PUSH
28121: LD_INT 0
28123: PUSH
28124: LD_INT 0
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 0
28133: PUSH
28134: LD_INT 1
28136: NEG
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 1
28144: PUSH
28145: LD_INT 0
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 1
28154: PUSH
28155: LD_INT 1
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 0
28164: PUSH
28165: LD_INT 1
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 1
28174: NEG
28175: PUSH
28176: LD_INT 0
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 1
28185: NEG
28186: PUSH
28187: LD_INT 1
28189: NEG
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28204: LD_ADDR_VAR 0 60
28208: PUSH
28209: LD_INT 0
28211: PUSH
28212: LD_INT 0
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 0
28221: PUSH
28222: LD_INT 1
28224: NEG
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: LD_INT 1
28232: PUSH
28233: LD_INT 0
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 1
28242: PUSH
28243: LD_INT 1
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 0
28252: PUSH
28253: LD_INT 1
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 1
28262: NEG
28263: PUSH
28264: LD_INT 0
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 1
28273: NEG
28274: PUSH
28275: LD_INT 1
28277: NEG
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28292: LD_ADDR_VAR 0 61
28296: PUSH
28297: LD_INT 0
28299: PUSH
28300: LD_INT 0
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 0
28309: PUSH
28310: LD_INT 1
28312: NEG
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 1
28320: PUSH
28321: LD_INT 0
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 1
28330: PUSH
28331: LD_INT 1
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 0
28340: PUSH
28341: LD_INT 1
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 1
28350: NEG
28351: PUSH
28352: LD_INT 0
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 1
28361: NEG
28362: PUSH
28363: LD_INT 1
28365: NEG
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28380: LD_ADDR_VAR 0 62
28384: PUSH
28385: LD_INT 0
28387: PUSH
28388: LD_INT 0
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 0
28397: PUSH
28398: LD_INT 1
28400: NEG
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 1
28408: PUSH
28409: LD_INT 0
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 1
28418: PUSH
28419: LD_INT 1
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 0
28428: PUSH
28429: LD_INT 1
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 1
28438: NEG
28439: PUSH
28440: LD_INT 0
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 1
28449: NEG
28450: PUSH
28451: LD_INT 1
28453: NEG
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28468: LD_ADDR_VAR 0 63
28472: PUSH
28473: LD_INT 0
28475: PUSH
28476: LD_INT 0
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 0
28485: PUSH
28486: LD_INT 1
28488: NEG
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: LD_INT 1
28496: PUSH
28497: LD_INT 0
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 1
28506: PUSH
28507: LD_INT 1
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: LD_INT 0
28516: PUSH
28517: LD_INT 1
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: LD_INT 1
28526: NEG
28527: PUSH
28528: LD_INT 0
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 1
28537: NEG
28538: PUSH
28539: LD_INT 1
28541: NEG
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28556: LD_ADDR_VAR 0 64
28560: PUSH
28561: LD_INT 0
28563: PUSH
28564: LD_INT 0
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 0
28573: PUSH
28574: LD_INT 1
28576: NEG
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 1
28584: PUSH
28585: LD_INT 0
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 1
28594: PUSH
28595: LD_INT 1
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 0
28604: PUSH
28605: LD_INT 1
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_INT 1
28614: NEG
28615: PUSH
28616: LD_INT 0
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 1
28625: NEG
28626: PUSH
28627: LD_INT 1
28629: NEG
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: ST_TO_ADDR
// end ; 1 :
28644: GO 34541
28646: LD_INT 1
28648: DOUBLE
28649: EQUAL
28650: IFTRUE 28654
28652: GO 31277
28654: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28655: LD_ADDR_VAR 0 11
28659: PUSH
28660: LD_INT 1
28662: NEG
28663: PUSH
28664: LD_INT 3
28666: NEG
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 0
28674: PUSH
28675: LD_INT 3
28677: NEG
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: LD_INT 1
28685: PUSH
28686: LD_INT 2
28688: NEG
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: LIST
28698: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28699: LD_ADDR_VAR 0 12
28703: PUSH
28704: LD_INT 2
28706: PUSH
28707: LD_INT 1
28709: NEG
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 3
28717: PUSH
28718: LD_INT 0
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 3
28727: PUSH
28728: LD_INT 1
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: LIST
28739: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28740: LD_ADDR_VAR 0 13
28744: PUSH
28745: LD_INT 3
28747: PUSH
28748: LD_INT 2
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 3
28757: PUSH
28758: LD_INT 3
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 2
28767: PUSH
28768: LD_INT 3
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: LIST
28779: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28780: LD_ADDR_VAR 0 14
28784: PUSH
28785: LD_INT 1
28787: PUSH
28788: LD_INT 3
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: LD_INT 0
28797: PUSH
28798: LD_INT 3
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 1
28807: NEG
28808: PUSH
28809: LD_INT 2
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: LIST
28820: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28821: LD_ADDR_VAR 0 15
28825: PUSH
28826: LD_INT 2
28828: NEG
28829: PUSH
28830: LD_INT 1
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 3
28839: NEG
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 3
28850: NEG
28851: PUSH
28852: LD_INT 1
28854: NEG
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: LIST
28864: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28865: LD_ADDR_VAR 0 16
28869: PUSH
28870: LD_INT 2
28872: NEG
28873: PUSH
28874: LD_INT 3
28876: NEG
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 3
28884: NEG
28885: PUSH
28886: LD_INT 2
28888: NEG
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 3
28896: NEG
28897: PUSH
28898: LD_INT 3
28900: NEG
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: LIST
28910: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28911: LD_ADDR_VAR 0 17
28915: PUSH
28916: LD_INT 1
28918: NEG
28919: PUSH
28920: LD_INT 3
28922: NEG
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 0
28930: PUSH
28931: LD_INT 3
28933: NEG
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 1
28941: PUSH
28942: LD_INT 2
28944: NEG
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: LIST
28954: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28955: LD_ADDR_VAR 0 18
28959: PUSH
28960: LD_INT 2
28962: PUSH
28963: LD_INT 1
28965: NEG
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 3
28973: PUSH
28974: LD_INT 0
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 3
28983: PUSH
28984: LD_INT 1
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: LIST
28995: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28996: LD_ADDR_VAR 0 19
29000: PUSH
29001: LD_INT 3
29003: PUSH
29004: LD_INT 2
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 3
29013: PUSH
29014: LD_INT 3
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 2
29023: PUSH
29024: LD_INT 3
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: LIST
29035: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29036: LD_ADDR_VAR 0 20
29040: PUSH
29041: LD_INT 1
29043: PUSH
29044: LD_INT 3
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 0
29053: PUSH
29054: LD_INT 3
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 1
29063: NEG
29064: PUSH
29065: LD_INT 2
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: LIST
29076: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29077: LD_ADDR_VAR 0 21
29081: PUSH
29082: LD_INT 2
29084: NEG
29085: PUSH
29086: LD_INT 1
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 3
29095: NEG
29096: PUSH
29097: LD_INT 0
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 3
29106: NEG
29107: PUSH
29108: LD_INT 1
29110: NEG
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: LIST
29120: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29121: LD_ADDR_VAR 0 22
29125: PUSH
29126: LD_INT 2
29128: NEG
29129: PUSH
29130: LD_INT 3
29132: NEG
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 3
29140: NEG
29141: PUSH
29142: LD_INT 2
29144: NEG
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 3
29152: NEG
29153: PUSH
29154: LD_INT 3
29156: NEG
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: LIST
29166: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29167: LD_ADDR_VAR 0 23
29171: PUSH
29172: LD_INT 0
29174: PUSH
29175: LD_INT 3
29177: NEG
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 1
29185: NEG
29186: PUSH
29187: LD_INT 4
29189: NEG
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 1
29197: PUSH
29198: LD_INT 3
29200: NEG
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: LIST
29210: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29211: LD_ADDR_VAR 0 24
29215: PUSH
29216: LD_INT 3
29218: PUSH
29219: LD_INT 0
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 3
29228: PUSH
29229: LD_INT 1
29231: NEG
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 4
29239: PUSH
29240: LD_INT 1
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: LIST
29251: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29252: LD_ADDR_VAR 0 25
29256: PUSH
29257: LD_INT 3
29259: PUSH
29260: LD_INT 3
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 4
29269: PUSH
29270: LD_INT 3
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 3
29279: PUSH
29280: LD_INT 4
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: LIST
29291: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29292: LD_ADDR_VAR 0 26
29296: PUSH
29297: LD_INT 0
29299: PUSH
29300: LD_INT 3
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 1
29309: PUSH
29310: LD_INT 4
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 1
29319: NEG
29320: PUSH
29321: LD_INT 3
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: LIST
29332: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29333: LD_ADDR_VAR 0 27
29337: PUSH
29338: LD_INT 3
29340: NEG
29341: PUSH
29342: LD_INT 0
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 3
29351: NEG
29352: PUSH
29353: LD_INT 1
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 4
29362: NEG
29363: PUSH
29364: LD_INT 1
29366: NEG
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: LIST
29376: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29377: LD_ADDR_VAR 0 28
29381: PUSH
29382: LD_INT 3
29384: NEG
29385: PUSH
29386: LD_INT 3
29388: NEG
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 3
29396: NEG
29397: PUSH
29398: LD_INT 4
29400: NEG
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 4
29408: NEG
29409: PUSH
29410: LD_INT 3
29412: NEG
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: LIST
29422: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29423: LD_ADDR_VAR 0 29
29427: PUSH
29428: LD_INT 1
29430: NEG
29431: PUSH
29432: LD_INT 3
29434: NEG
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 0
29442: PUSH
29443: LD_INT 3
29445: NEG
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 1
29453: PUSH
29454: LD_INT 2
29456: NEG
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 1
29464: NEG
29465: PUSH
29466: LD_INT 4
29468: NEG
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: LD_INT 0
29476: PUSH
29477: LD_INT 4
29479: NEG
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 1
29487: PUSH
29488: LD_INT 3
29490: NEG
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 1
29498: NEG
29499: PUSH
29500: LD_INT 5
29502: NEG
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: LD_INT 0
29510: PUSH
29511: LD_INT 5
29513: NEG
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 1
29521: PUSH
29522: LD_INT 4
29524: NEG
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 1
29532: NEG
29533: PUSH
29534: LD_INT 6
29536: NEG
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 0
29544: PUSH
29545: LD_INT 6
29547: NEG
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: LD_INT 1
29555: PUSH
29556: LD_INT 5
29558: NEG
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29578: LD_ADDR_VAR 0 30
29582: PUSH
29583: LD_INT 2
29585: PUSH
29586: LD_INT 1
29588: NEG
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 3
29596: PUSH
29597: LD_INT 0
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 3
29606: PUSH
29607: LD_INT 1
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 3
29616: PUSH
29617: LD_INT 1
29619: NEG
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 4
29627: PUSH
29628: LD_INT 0
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 4
29637: PUSH
29638: LD_INT 1
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 4
29647: PUSH
29648: LD_INT 1
29650: NEG
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 5
29658: PUSH
29659: LD_INT 0
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 5
29668: PUSH
29669: LD_INT 1
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: LD_INT 5
29678: PUSH
29679: LD_INT 1
29681: NEG
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 6
29689: PUSH
29690: LD_INT 0
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 6
29699: PUSH
29700: LD_INT 1
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29721: LD_ADDR_VAR 0 31
29725: PUSH
29726: LD_INT 3
29728: PUSH
29729: LD_INT 2
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 3
29738: PUSH
29739: LD_INT 3
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: LD_INT 2
29748: PUSH
29749: LD_INT 3
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 4
29758: PUSH
29759: LD_INT 3
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: LD_INT 4
29768: PUSH
29769: LD_INT 4
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 3
29778: PUSH
29779: LD_INT 4
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 5
29788: PUSH
29789: LD_INT 4
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 5
29798: PUSH
29799: LD_INT 5
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 4
29808: PUSH
29809: LD_INT 5
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 6
29818: PUSH
29819: LD_INT 5
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 6
29828: PUSH
29829: LD_INT 6
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: LD_INT 5
29838: PUSH
29839: LD_INT 6
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29860: LD_ADDR_VAR 0 32
29864: PUSH
29865: LD_INT 1
29867: PUSH
29868: LD_INT 3
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 0
29877: PUSH
29878: LD_INT 3
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 1
29887: NEG
29888: PUSH
29889: LD_INT 2
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 1
29898: PUSH
29899: LD_INT 4
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 0
29908: PUSH
29909: LD_INT 4
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 1
29918: NEG
29919: PUSH
29920: LD_INT 3
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 1
29929: PUSH
29930: LD_INT 5
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 0
29939: PUSH
29940: LD_INT 5
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 1
29949: NEG
29950: PUSH
29951: LD_INT 4
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 1
29960: PUSH
29961: LD_INT 6
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 0
29970: PUSH
29971: LD_INT 6
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 1
29980: NEG
29981: PUSH
29982: LD_INT 5
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30003: LD_ADDR_VAR 0 33
30007: PUSH
30008: LD_INT 2
30010: NEG
30011: PUSH
30012: LD_INT 1
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 3
30021: NEG
30022: PUSH
30023: LD_INT 0
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 3
30032: NEG
30033: PUSH
30034: LD_INT 1
30036: NEG
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 3
30044: NEG
30045: PUSH
30046: LD_INT 1
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 4
30055: NEG
30056: PUSH
30057: LD_INT 0
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 4
30066: NEG
30067: PUSH
30068: LD_INT 1
30070: NEG
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 4
30078: NEG
30079: PUSH
30080: LD_INT 1
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 5
30089: NEG
30090: PUSH
30091: LD_INT 0
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 5
30100: NEG
30101: PUSH
30102: LD_INT 1
30104: NEG
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 5
30112: NEG
30113: PUSH
30114: LD_INT 1
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 6
30123: NEG
30124: PUSH
30125: LD_INT 0
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 6
30134: NEG
30135: PUSH
30136: LD_INT 1
30138: NEG
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30158: LD_ADDR_VAR 0 34
30162: PUSH
30163: LD_INT 2
30165: NEG
30166: PUSH
30167: LD_INT 3
30169: NEG
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 3
30177: NEG
30178: PUSH
30179: LD_INT 2
30181: NEG
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 3
30189: NEG
30190: PUSH
30191: LD_INT 3
30193: NEG
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 3
30201: NEG
30202: PUSH
30203: LD_INT 4
30205: NEG
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 4
30213: NEG
30214: PUSH
30215: LD_INT 3
30217: NEG
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 4
30225: NEG
30226: PUSH
30227: LD_INT 4
30229: NEG
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 4
30237: NEG
30238: PUSH
30239: LD_INT 5
30241: NEG
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 5
30249: NEG
30250: PUSH
30251: LD_INT 4
30253: NEG
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 5
30261: NEG
30262: PUSH
30263: LD_INT 5
30265: NEG
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 5
30273: NEG
30274: PUSH
30275: LD_INT 6
30277: NEG
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 6
30285: NEG
30286: PUSH
30287: LD_INT 5
30289: NEG
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 6
30297: NEG
30298: PUSH
30299: LD_INT 6
30301: NEG
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30321: LD_ADDR_VAR 0 41
30325: PUSH
30326: LD_INT 0
30328: PUSH
30329: LD_INT 2
30331: NEG
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 1
30339: NEG
30340: PUSH
30341: LD_INT 3
30343: NEG
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 1
30351: PUSH
30352: LD_INT 2
30354: NEG
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: LIST
30364: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30365: LD_ADDR_VAR 0 42
30369: PUSH
30370: LD_INT 2
30372: PUSH
30373: LD_INT 0
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 2
30382: PUSH
30383: LD_INT 1
30385: NEG
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 3
30393: PUSH
30394: LD_INT 1
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: LIST
30405: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30406: LD_ADDR_VAR 0 43
30410: PUSH
30411: LD_INT 2
30413: PUSH
30414: LD_INT 2
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 3
30423: PUSH
30424: LD_INT 2
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 2
30433: PUSH
30434: LD_INT 3
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: LIST
30445: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30446: LD_ADDR_VAR 0 44
30450: PUSH
30451: LD_INT 0
30453: PUSH
30454: LD_INT 2
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 1
30463: PUSH
30464: LD_INT 3
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 1
30473: NEG
30474: PUSH
30475: LD_INT 2
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: LIST
30486: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30487: LD_ADDR_VAR 0 45
30491: PUSH
30492: LD_INT 2
30494: NEG
30495: PUSH
30496: LD_INT 0
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 2
30505: NEG
30506: PUSH
30507: LD_INT 1
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 3
30516: NEG
30517: PUSH
30518: LD_INT 1
30520: NEG
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: LIST
30530: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30531: LD_ADDR_VAR 0 46
30535: PUSH
30536: LD_INT 2
30538: NEG
30539: PUSH
30540: LD_INT 2
30542: NEG
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 2
30550: NEG
30551: PUSH
30552: LD_INT 3
30554: NEG
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 3
30562: NEG
30563: PUSH
30564: LD_INT 2
30566: NEG
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: LIST
30576: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30577: LD_ADDR_VAR 0 47
30581: PUSH
30582: LD_INT 2
30584: NEG
30585: PUSH
30586: LD_INT 3
30588: NEG
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 1
30596: NEG
30597: PUSH
30598: LD_INT 3
30600: NEG
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30610: LD_ADDR_VAR 0 48
30614: PUSH
30615: LD_INT 1
30617: PUSH
30618: LD_INT 2
30620: NEG
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 2
30628: PUSH
30629: LD_INT 1
30631: NEG
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30641: LD_ADDR_VAR 0 49
30645: PUSH
30646: LD_INT 3
30648: PUSH
30649: LD_INT 1
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 3
30658: PUSH
30659: LD_INT 2
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30670: LD_ADDR_VAR 0 50
30674: PUSH
30675: LD_INT 2
30677: PUSH
30678: LD_INT 3
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 1
30687: PUSH
30688: LD_INT 3
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30699: LD_ADDR_VAR 0 51
30703: PUSH
30704: LD_INT 1
30706: NEG
30707: PUSH
30708: LD_INT 2
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 2
30717: NEG
30718: PUSH
30719: LD_INT 1
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30730: LD_ADDR_VAR 0 52
30734: PUSH
30735: LD_INT 3
30737: NEG
30738: PUSH
30739: LD_INT 1
30741: NEG
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 3
30749: NEG
30750: PUSH
30751: LD_INT 2
30753: NEG
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30763: LD_ADDR_VAR 0 53
30767: PUSH
30768: LD_INT 1
30770: NEG
30771: PUSH
30772: LD_INT 3
30774: NEG
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 0
30782: PUSH
30783: LD_INT 3
30785: NEG
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 1
30793: PUSH
30794: LD_INT 2
30796: NEG
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: LIST
30806: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30807: LD_ADDR_VAR 0 54
30811: PUSH
30812: LD_INT 2
30814: PUSH
30815: LD_INT 1
30817: NEG
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 3
30825: PUSH
30826: LD_INT 0
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 3
30835: PUSH
30836: LD_INT 1
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: LIST
30847: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30848: LD_ADDR_VAR 0 55
30852: PUSH
30853: LD_INT 3
30855: PUSH
30856: LD_INT 2
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 3
30865: PUSH
30866: LD_INT 3
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 2
30875: PUSH
30876: LD_INT 3
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: LIST
30887: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30888: LD_ADDR_VAR 0 56
30892: PUSH
30893: LD_INT 1
30895: PUSH
30896: LD_INT 3
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 0
30905: PUSH
30906: LD_INT 3
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 1
30915: NEG
30916: PUSH
30917: LD_INT 2
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: LIST
30928: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30929: LD_ADDR_VAR 0 57
30933: PUSH
30934: LD_INT 2
30936: NEG
30937: PUSH
30938: LD_INT 1
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 3
30947: NEG
30948: PUSH
30949: LD_INT 0
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 3
30958: NEG
30959: PUSH
30960: LD_INT 1
30962: NEG
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: LIST
30972: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30973: LD_ADDR_VAR 0 58
30977: PUSH
30978: LD_INT 2
30980: NEG
30981: PUSH
30982: LD_INT 3
30984: NEG
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 3
30992: NEG
30993: PUSH
30994: LD_INT 2
30996: NEG
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 3
31004: NEG
31005: PUSH
31006: LD_INT 3
31008: NEG
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: LIST
31018: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31019: LD_ADDR_VAR 0 59
31023: PUSH
31024: LD_INT 1
31026: NEG
31027: PUSH
31028: LD_INT 2
31030: NEG
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 0
31038: PUSH
31039: LD_INT 2
31041: NEG
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 1
31049: PUSH
31050: LD_INT 1
31052: NEG
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: LIST
31062: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31063: LD_ADDR_VAR 0 60
31067: PUSH
31068: LD_INT 1
31070: PUSH
31071: LD_INT 1
31073: NEG
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 2
31081: PUSH
31082: LD_INT 0
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 2
31091: PUSH
31092: LD_INT 1
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: LIST
31103: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31104: LD_ADDR_VAR 0 61
31108: PUSH
31109: LD_INT 2
31111: PUSH
31112: LD_INT 1
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 2
31121: PUSH
31122: LD_INT 2
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 1
31131: PUSH
31132: LD_INT 2
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: LIST
31143: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31144: LD_ADDR_VAR 0 62
31148: PUSH
31149: LD_INT 1
31151: PUSH
31152: LD_INT 2
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 0
31161: PUSH
31162: LD_INT 2
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 1
31171: NEG
31172: PUSH
31173: LD_INT 1
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: LIST
31184: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31185: LD_ADDR_VAR 0 63
31189: PUSH
31190: LD_INT 1
31192: NEG
31193: PUSH
31194: LD_INT 1
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 2
31203: NEG
31204: PUSH
31205: LD_INT 0
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 2
31214: NEG
31215: PUSH
31216: LD_INT 1
31218: NEG
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: LIST
31228: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31229: LD_ADDR_VAR 0 64
31233: PUSH
31234: LD_INT 1
31236: NEG
31237: PUSH
31238: LD_INT 2
31240: NEG
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 2
31248: NEG
31249: PUSH
31250: LD_INT 1
31252: NEG
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 2
31260: NEG
31261: PUSH
31262: LD_INT 2
31264: NEG
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: LIST
31274: ST_TO_ADDR
// end ; 2 :
31275: GO 34541
31277: LD_INT 2
31279: DOUBLE
31280: EQUAL
31281: IFTRUE 31285
31283: GO 34540
31285: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31286: LD_ADDR_VAR 0 29
31290: PUSH
31291: LD_INT 4
31293: PUSH
31294: LD_INT 0
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 4
31303: PUSH
31304: LD_INT 1
31306: NEG
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 5
31314: PUSH
31315: LD_INT 0
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 5
31324: PUSH
31325: LD_INT 1
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 4
31334: PUSH
31335: LD_INT 1
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 3
31344: PUSH
31345: LD_INT 0
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 3
31354: PUSH
31355: LD_INT 1
31357: NEG
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 3
31365: PUSH
31366: LD_INT 2
31368: NEG
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 5
31376: PUSH
31377: LD_INT 2
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 3
31386: PUSH
31387: LD_INT 3
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 3
31396: PUSH
31397: LD_INT 2
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 4
31406: PUSH
31407: LD_INT 3
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 4
31416: PUSH
31417: LD_INT 4
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 3
31426: PUSH
31427: LD_INT 4
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 2
31436: PUSH
31437: LD_INT 3
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 2
31446: PUSH
31447: LD_INT 2
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 4
31456: PUSH
31457: LD_INT 2
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 2
31466: PUSH
31467: LD_INT 4
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 0
31476: PUSH
31477: LD_INT 4
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 0
31486: PUSH
31487: LD_INT 3
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 1
31496: PUSH
31497: LD_INT 4
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 1
31506: PUSH
31507: LD_INT 5
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 0
31516: PUSH
31517: LD_INT 5
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 1
31526: NEG
31527: PUSH
31528: LD_INT 4
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 1
31537: NEG
31538: PUSH
31539: LD_INT 3
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 2
31548: PUSH
31549: LD_INT 5
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 2
31558: NEG
31559: PUSH
31560: LD_INT 3
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 3
31569: NEG
31570: PUSH
31571: LD_INT 0
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 3
31580: NEG
31581: PUSH
31582: LD_INT 1
31584: NEG
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 2
31592: NEG
31593: PUSH
31594: LD_INT 0
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 2
31603: NEG
31604: PUSH
31605: LD_INT 1
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 3
31614: NEG
31615: PUSH
31616: LD_INT 1
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 4
31625: NEG
31626: PUSH
31627: LD_INT 0
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 4
31636: NEG
31637: PUSH
31638: LD_INT 1
31640: NEG
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 4
31648: NEG
31649: PUSH
31650: LD_INT 2
31652: NEG
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 2
31660: NEG
31661: PUSH
31662: LD_INT 2
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 4
31671: NEG
31672: PUSH
31673: LD_INT 4
31675: NEG
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 4
31683: NEG
31684: PUSH
31685: LD_INT 5
31687: NEG
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 3
31695: NEG
31696: PUSH
31697: LD_INT 4
31699: NEG
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 3
31707: NEG
31708: PUSH
31709: LD_INT 3
31711: NEG
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 4
31719: NEG
31720: PUSH
31721: LD_INT 3
31723: NEG
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 5
31731: NEG
31732: PUSH
31733: LD_INT 4
31735: NEG
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 5
31743: NEG
31744: PUSH
31745: LD_INT 5
31747: NEG
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 3
31755: NEG
31756: PUSH
31757: LD_INT 5
31759: NEG
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 5
31767: NEG
31768: PUSH
31769: LD_INT 3
31771: NEG
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31824: LD_ADDR_VAR 0 30
31828: PUSH
31829: LD_INT 4
31831: PUSH
31832: LD_INT 4
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 4
31841: PUSH
31842: LD_INT 3
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 5
31851: PUSH
31852: LD_INT 4
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 5
31861: PUSH
31862: LD_INT 5
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 4
31871: PUSH
31872: LD_INT 5
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 3
31881: PUSH
31882: LD_INT 4
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 3
31891: PUSH
31892: LD_INT 3
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 5
31901: PUSH
31902: LD_INT 3
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 3
31911: PUSH
31912: LD_INT 5
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 0
31921: PUSH
31922: LD_INT 3
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 0
31931: PUSH
31932: LD_INT 2
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 1
31941: PUSH
31942: LD_INT 3
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 1
31951: PUSH
31952: LD_INT 4
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 0
31961: PUSH
31962: LD_INT 4
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 1
31971: NEG
31972: PUSH
31973: LD_INT 3
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 1
31982: NEG
31983: PUSH
31984: LD_INT 2
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 2
31993: PUSH
31994: LD_INT 4
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 2
32003: NEG
32004: PUSH
32005: LD_INT 2
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 4
32014: NEG
32015: PUSH
32016: LD_INT 0
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 4
32025: NEG
32026: PUSH
32027: LD_INT 1
32029: NEG
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 3
32037: NEG
32038: PUSH
32039: LD_INT 0
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 3
32048: NEG
32049: PUSH
32050: LD_INT 1
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 4
32059: NEG
32060: PUSH
32061: LD_INT 1
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 5
32070: NEG
32071: PUSH
32072: LD_INT 0
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 5
32081: NEG
32082: PUSH
32083: LD_INT 1
32085: NEG
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 5
32093: NEG
32094: PUSH
32095: LD_INT 2
32097: NEG
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 3
32105: NEG
32106: PUSH
32107: LD_INT 2
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 3
32116: NEG
32117: PUSH
32118: LD_INT 3
32120: NEG
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 3
32128: NEG
32129: PUSH
32130: LD_INT 4
32132: NEG
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 2
32140: NEG
32141: PUSH
32142: LD_INT 3
32144: NEG
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 2
32152: NEG
32153: PUSH
32154: LD_INT 2
32156: NEG
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 3
32164: NEG
32165: PUSH
32166: LD_INT 2
32168: NEG
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 4
32176: NEG
32177: PUSH
32178: LD_INT 3
32180: NEG
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 4
32188: NEG
32189: PUSH
32190: LD_INT 4
32192: NEG
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 2
32200: NEG
32201: PUSH
32202: LD_INT 4
32204: NEG
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 4
32212: NEG
32213: PUSH
32214: LD_INT 2
32216: NEG
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 0
32224: PUSH
32225: LD_INT 4
32227: NEG
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 0
32235: PUSH
32236: LD_INT 5
32238: NEG
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 1
32246: PUSH
32247: LD_INT 4
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 1
32257: PUSH
32258: LD_INT 3
32260: NEG
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 0
32268: PUSH
32269: LD_INT 3
32271: NEG
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 1
32279: NEG
32280: PUSH
32281: LD_INT 4
32283: NEG
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 1
32291: NEG
32292: PUSH
32293: LD_INT 5
32295: NEG
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 2
32303: PUSH
32304: LD_INT 3
32306: NEG
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 2
32314: NEG
32315: PUSH
32316: LD_INT 5
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32371: LD_ADDR_VAR 0 31
32375: PUSH
32376: LD_INT 0
32378: PUSH
32379: LD_INT 4
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 0
32388: PUSH
32389: LD_INT 3
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 1
32398: PUSH
32399: LD_INT 4
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 1
32408: PUSH
32409: LD_INT 5
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 0
32418: PUSH
32419: LD_INT 5
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 1
32428: NEG
32429: PUSH
32430: LD_INT 4
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 1
32439: NEG
32440: PUSH
32441: LD_INT 3
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 2
32450: PUSH
32451: LD_INT 5
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 2
32460: NEG
32461: PUSH
32462: LD_INT 3
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 3
32471: NEG
32472: PUSH
32473: LD_INT 0
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 3
32482: NEG
32483: PUSH
32484: LD_INT 1
32486: NEG
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 2
32494: NEG
32495: PUSH
32496: LD_INT 0
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 2
32505: NEG
32506: PUSH
32507: LD_INT 1
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 3
32516: NEG
32517: PUSH
32518: LD_INT 1
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 4
32527: NEG
32528: PUSH
32529: LD_INT 0
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 4
32538: NEG
32539: PUSH
32540: LD_INT 1
32542: NEG
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 4
32550: NEG
32551: PUSH
32552: LD_INT 2
32554: NEG
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 2
32562: NEG
32563: PUSH
32564: LD_INT 2
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 4
32573: NEG
32574: PUSH
32575: LD_INT 4
32577: NEG
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 4
32585: NEG
32586: PUSH
32587: LD_INT 5
32589: NEG
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 3
32597: NEG
32598: PUSH
32599: LD_INT 4
32601: NEG
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 3
32609: NEG
32610: PUSH
32611: LD_INT 3
32613: NEG
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 4
32621: NEG
32622: PUSH
32623: LD_INT 3
32625: NEG
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 5
32633: NEG
32634: PUSH
32635: LD_INT 4
32637: NEG
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 5
32645: NEG
32646: PUSH
32647: LD_INT 5
32649: NEG
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 3
32657: NEG
32658: PUSH
32659: LD_INT 5
32661: NEG
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 5
32669: NEG
32670: PUSH
32671: LD_INT 3
32673: NEG
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 0
32681: PUSH
32682: LD_INT 3
32684: NEG
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 0
32692: PUSH
32693: LD_INT 4
32695: NEG
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 1
32703: PUSH
32704: LD_INT 3
32706: NEG
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 1
32714: PUSH
32715: LD_INT 2
32717: NEG
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 0
32725: PUSH
32726: LD_INT 2
32728: NEG
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 1
32736: NEG
32737: PUSH
32738: LD_INT 3
32740: NEG
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 1
32748: NEG
32749: PUSH
32750: LD_INT 4
32752: NEG
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 2
32760: PUSH
32761: LD_INT 2
32763: NEG
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 2
32771: NEG
32772: PUSH
32773: LD_INT 4
32775: NEG
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 4
32783: PUSH
32784: LD_INT 0
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 4
32793: PUSH
32794: LD_INT 1
32796: NEG
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 5
32804: PUSH
32805: LD_INT 0
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 5
32814: PUSH
32815: LD_INT 1
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 4
32824: PUSH
32825: LD_INT 1
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 3
32834: PUSH
32835: LD_INT 0
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 3
32844: PUSH
32845: LD_INT 1
32847: NEG
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 3
32855: PUSH
32856: LD_INT 2
32858: NEG
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 5
32866: PUSH
32867: LD_INT 2
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32921: LD_ADDR_VAR 0 32
32925: PUSH
32926: LD_INT 4
32928: NEG
32929: PUSH
32930: LD_INT 0
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 4
32939: NEG
32940: PUSH
32941: LD_INT 1
32943: NEG
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 3
32951: NEG
32952: PUSH
32953: LD_INT 0
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 3
32962: NEG
32963: PUSH
32964: LD_INT 1
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 4
32973: NEG
32974: PUSH
32975: LD_INT 1
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 5
32984: NEG
32985: PUSH
32986: LD_INT 0
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 5
32995: NEG
32996: PUSH
32997: LD_INT 1
32999: NEG
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 5
33007: NEG
33008: PUSH
33009: LD_INT 2
33011: NEG
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 3
33019: NEG
33020: PUSH
33021: LD_INT 2
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 3
33030: NEG
33031: PUSH
33032: LD_INT 3
33034: NEG
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 3
33042: NEG
33043: PUSH
33044: LD_INT 4
33046: NEG
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 2
33054: NEG
33055: PUSH
33056: LD_INT 3
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 2
33066: NEG
33067: PUSH
33068: LD_INT 2
33070: NEG
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 3
33078: NEG
33079: PUSH
33080: LD_INT 2
33082: NEG
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 4
33090: NEG
33091: PUSH
33092: LD_INT 3
33094: NEG
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 4
33102: NEG
33103: PUSH
33104: LD_INT 4
33106: NEG
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 2
33114: NEG
33115: PUSH
33116: LD_INT 4
33118: NEG
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 4
33126: NEG
33127: PUSH
33128: LD_INT 2
33130: NEG
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 0
33138: PUSH
33139: LD_INT 4
33141: NEG
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 0
33149: PUSH
33150: LD_INT 5
33152: NEG
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 1
33160: PUSH
33161: LD_INT 4
33163: NEG
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 1
33171: PUSH
33172: LD_INT 3
33174: NEG
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 0
33182: PUSH
33183: LD_INT 3
33185: NEG
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 1
33193: NEG
33194: PUSH
33195: LD_INT 4
33197: NEG
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 1
33205: NEG
33206: PUSH
33207: LD_INT 5
33209: NEG
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 2
33217: PUSH
33218: LD_INT 3
33220: NEG
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 2
33228: NEG
33229: PUSH
33230: LD_INT 5
33232: NEG
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 3
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 3
33250: PUSH
33251: LD_INT 1
33253: NEG
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 4
33261: PUSH
33262: LD_INT 0
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 4
33271: PUSH
33272: LD_INT 1
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 3
33281: PUSH
33282: LD_INT 1
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 2
33291: PUSH
33292: LD_INT 0
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 2
33301: PUSH
33302: LD_INT 1
33304: NEG
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 2
33312: PUSH
33313: LD_INT 2
33315: NEG
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 4
33323: PUSH
33324: LD_INT 2
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 4
33333: PUSH
33334: LD_INT 4
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 4
33343: PUSH
33344: LD_INT 3
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 5
33353: PUSH
33354: LD_INT 4
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 5
33363: PUSH
33364: LD_INT 5
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 4
33373: PUSH
33374: LD_INT 5
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 3
33383: PUSH
33384: LD_INT 4
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 3
33393: PUSH
33394: LD_INT 3
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 5
33403: PUSH
33404: LD_INT 3
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 3
33413: PUSH
33414: LD_INT 5
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33468: LD_ADDR_VAR 0 33
33472: PUSH
33473: LD_INT 4
33475: NEG
33476: PUSH
33477: LD_INT 4
33479: NEG
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 4
33487: NEG
33488: PUSH
33489: LD_INT 5
33491: NEG
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 3
33499: NEG
33500: PUSH
33501: LD_INT 4
33503: NEG
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 3
33511: NEG
33512: PUSH
33513: LD_INT 3
33515: NEG
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 4
33523: NEG
33524: PUSH
33525: LD_INT 3
33527: NEG
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 5
33535: NEG
33536: PUSH
33537: LD_INT 4
33539: NEG
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 5
33547: NEG
33548: PUSH
33549: LD_INT 5
33551: NEG
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 3
33559: NEG
33560: PUSH
33561: LD_INT 5
33563: NEG
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 5
33571: NEG
33572: PUSH
33573: LD_INT 3
33575: NEG
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 0
33583: PUSH
33584: LD_INT 3
33586: NEG
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 0
33594: PUSH
33595: LD_INT 4
33597: NEG
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 1
33605: PUSH
33606: LD_INT 3
33608: NEG
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 1
33616: PUSH
33617: LD_INT 2
33619: NEG
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 0
33627: PUSH
33628: LD_INT 2
33630: NEG
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 1
33638: NEG
33639: PUSH
33640: LD_INT 3
33642: NEG
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 1
33650: NEG
33651: PUSH
33652: LD_INT 4
33654: NEG
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 2
33662: PUSH
33663: LD_INT 2
33665: NEG
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 2
33673: NEG
33674: PUSH
33675: LD_INT 4
33677: NEG
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 4
33685: PUSH
33686: LD_INT 0
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 4
33695: PUSH
33696: LD_INT 1
33698: NEG
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 5
33706: PUSH
33707: LD_INT 0
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 5
33716: PUSH
33717: LD_INT 1
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 4
33726: PUSH
33727: LD_INT 1
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 3
33736: PUSH
33737: LD_INT 0
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 3
33746: PUSH
33747: LD_INT 1
33749: NEG
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 3
33757: PUSH
33758: LD_INT 2
33760: NEG
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 5
33768: PUSH
33769: LD_INT 2
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 3
33778: PUSH
33779: LD_INT 3
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 3
33788: PUSH
33789: LD_INT 2
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 4
33798: PUSH
33799: LD_INT 3
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 4
33808: PUSH
33809: LD_INT 4
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 3
33818: PUSH
33819: LD_INT 4
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 2
33828: PUSH
33829: LD_INT 3
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 2
33838: PUSH
33839: LD_INT 2
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 4
33848: PUSH
33849: LD_INT 2
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 2
33858: PUSH
33859: LD_INT 4
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 0
33868: PUSH
33869: LD_INT 4
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 0
33878: PUSH
33879: LD_INT 3
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 1
33888: PUSH
33889: LD_INT 4
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 1
33898: PUSH
33899: LD_INT 5
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 0
33908: PUSH
33909: LD_INT 5
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 1
33918: NEG
33919: PUSH
33920: LD_INT 4
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 1
33929: NEG
33930: PUSH
33931: LD_INT 3
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 2
33940: PUSH
33941: LD_INT 5
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 2
33950: NEG
33951: PUSH
33952: LD_INT 3
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34006: LD_ADDR_VAR 0 34
34010: PUSH
34011: LD_INT 0
34013: PUSH
34014: LD_INT 4
34016: NEG
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 0
34024: PUSH
34025: LD_INT 5
34027: NEG
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 1
34035: PUSH
34036: LD_INT 4
34038: NEG
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 1
34046: PUSH
34047: LD_INT 3
34049: NEG
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 0
34057: PUSH
34058: LD_INT 3
34060: NEG
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 1
34068: NEG
34069: PUSH
34070: LD_INT 4
34072: NEG
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 1
34080: NEG
34081: PUSH
34082: LD_INT 5
34084: NEG
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 2
34092: PUSH
34093: LD_INT 3
34095: NEG
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 2
34103: NEG
34104: PUSH
34105: LD_INT 5
34107: NEG
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 3
34115: PUSH
34116: LD_INT 0
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 3
34125: PUSH
34126: LD_INT 1
34128: NEG
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 4
34136: PUSH
34137: LD_INT 0
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 4
34146: PUSH
34147: LD_INT 1
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 3
34156: PUSH
34157: LD_INT 1
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 2
34166: PUSH
34167: LD_INT 0
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 2
34176: PUSH
34177: LD_INT 1
34179: NEG
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: LD_INT 2
34187: PUSH
34188: LD_INT 2
34190: NEG
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 4
34198: PUSH
34199: LD_INT 2
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 4
34208: PUSH
34209: LD_INT 4
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 4
34218: PUSH
34219: LD_INT 3
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 5
34228: PUSH
34229: LD_INT 4
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 5
34238: PUSH
34239: LD_INT 5
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 4
34248: PUSH
34249: LD_INT 5
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 3
34258: PUSH
34259: LD_INT 4
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 3
34268: PUSH
34269: LD_INT 3
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 5
34278: PUSH
34279: LD_INT 3
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 3
34288: PUSH
34289: LD_INT 5
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 0
34298: PUSH
34299: LD_INT 3
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 0
34308: PUSH
34309: LD_INT 2
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 1
34318: PUSH
34319: LD_INT 3
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 1
34328: PUSH
34329: LD_INT 4
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 0
34338: PUSH
34339: LD_INT 4
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 1
34348: NEG
34349: PUSH
34350: LD_INT 3
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 1
34359: NEG
34360: PUSH
34361: LD_INT 2
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 2
34370: PUSH
34371: LD_INT 4
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 2
34380: NEG
34381: PUSH
34382: LD_INT 2
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 4
34391: NEG
34392: PUSH
34393: LD_INT 0
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 4
34402: NEG
34403: PUSH
34404: LD_INT 1
34406: NEG
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 3
34414: NEG
34415: PUSH
34416: LD_INT 0
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 3
34425: NEG
34426: PUSH
34427: LD_INT 1
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 4
34436: NEG
34437: PUSH
34438: LD_INT 1
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 5
34447: NEG
34448: PUSH
34449: LD_INT 0
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 5
34458: NEG
34459: PUSH
34460: LD_INT 1
34462: NEG
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 5
34470: NEG
34471: PUSH
34472: LD_INT 2
34474: NEG
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 3
34482: NEG
34483: PUSH
34484: LD_INT 2
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: ST_TO_ADDR
// end ; end ;
34538: GO 34541
34540: POP
// case btype of b_depot , b_warehouse :
34541: LD_VAR 0 1
34545: PUSH
34546: LD_INT 0
34548: DOUBLE
34549: EQUAL
34550: IFTRUE 34560
34552: LD_INT 1
34554: DOUBLE
34555: EQUAL
34556: IFTRUE 34560
34558: GO 34761
34560: POP
// case nation of nation_american :
34561: LD_VAR 0 5
34565: PUSH
34566: LD_INT 1
34568: DOUBLE
34569: EQUAL
34570: IFTRUE 34574
34572: GO 34630
34574: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34575: LD_ADDR_VAR 0 9
34579: PUSH
34580: LD_VAR 0 11
34584: PUSH
34585: LD_VAR 0 12
34589: PUSH
34590: LD_VAR 0 13
34594: PUSH
34595: LD_VAR 0 14
34599: PUSH
34600: LD_VAR 0 15
34604: PUSH
34605: LD_VAR 0 16
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: PUSH
34618: LD_VAR 0 4
34622: PUSH
34623: LD_INT 1
34625: PLUS
34626: ARRAY
34627: ST_TO_ADDR
34628: GO 34759
34630: LD_INT 2
34632: DOUBLE
34633: EQUAL
34634: IFTRUE 34638
34636: GO 34694
34638: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34639: LD_ADDR_VAR 0 9
34643: PUSH
34644: LD_VAR 0 17
34648: PUSH
34649: LD_VAR 0 18
34653: PUSH
34654: LD_VAR 0 19
34658: PUSH
34659: LD_VAR 0 20
34663: PUSH
34664: LD_VAR 0 21
34668: PUSH
34669: LD_VAR 0 22
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: PUSH
34682: LD_VAR 0 4
34686: PUSH
34687: LD_INT 1
34689: PLUS
34690: ARRAY
34691: ST_TO_ADDR
34692: GO 34759
34694: LD_INT 3
34696: DOUBLE
34697: EQUAL
34698: IFTRUE 34702
34700: GO 34758
34702: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34703: LD_ADDR_VAR 0 9
34707: PUSH
34708: LD_VAR 0 23
34712: PUSH
34713: LD_VAR 0 24
34717: PUSH
34718: LD_VAR 0 25
34722: PUSH
34723: LD_VAR 0 26
34727: PUSH
34728: LD_VAR 0 27
34732: PUSH
34733: LD_VAR 0 28
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: PUSH
34746: LD_VAR 0 4
34750: PUSH
34751: LD_INT 1
34753: PLUS
34754: ARRAY
34755: ST_TO_ADDR
34756: GO 34759
34758: POP
34759: GO 35314
34761: LD_INT 2
34763: DOUBLE
34764: EQUAL
34765: IFTRUE 34775
34767: LD_INT 3
34769: DOUBLE
34770: EQUAL
34771: IFTRUE 34775
34773: GO 34831
34775: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34776: LD_ADDR_VAR 0 9
34780: PUSH
34781: LD_VAR 0 29
34785: PUSH
34786: LD_VAR 0 30
34790: PUSH
34791: LD_VAR 0 31
34795: PUSH
34796: LD_VAR 0 32
34800: PUSH
34801: LD_VAR 0 33
34805: PUSH
34806: LD_VAR 0 34
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: PUSH
34819: LD_VAR 0 4
34823: PUSH
34824: LD_INT 1
34826: PLUS
34827: ARRAY
34828: ST_TO_ADDR
34829: GO 35314
34831: LD_INT 16
34833: DOUBLE
34834: EQUAL
34835: IFTRUE 34893
34837: LD_INT 17
34839: DOUBLE
34840: EQUAL
34841: IFTRUE 34893
34843: LD_INT 18
34845: DOUBLE
34846: EQUAL
34847: IFTRUE 34893
34849: LD_INT 19
34851: DOUBLE
34852: EQUAL
34853: IFTRUE 34893
34855: LD_INT 22
34857: DOUBLE
34858: EQUAL
34859: IFTRUE 34893
34861: LD_INT 20
34863: DOUBLE
34864: EQUAL
34865: IFTRUE 34893
34867: LD_INT 21
34869: DOUBLE
34870: EQUAL
34871: IFTRUE 34893
34873: LD_INT 23
34875: DOUBLE
34876: EQUAL
34877: IFTRUE 34893
34879: LD_INT 24
34881: DOUBLE
34882: EQUAL
34883: IFTRUE 34893
34885: LD_INT 25
34887: DOUBLE
34888: EQUAL
34889: IFTRUE 34893
34891: GO 34949
34893: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34894: LD_ADDR_VAR 0 9
34898: PUSH
34899: LD_VAR 0 35
34903: PUSH
34904: LD_VAR 0 36
34908: PUSH
34909: LD_VAR 0 37
34913: PUSH
34914: LD_VAR 0 38
34918: PUSH
34919: LD_VAR 0 39
34923: PUSH
34924: LD_VAR 0 40
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: PUSH
34937: LD_VAR 0 4
34941: PUSH
34942: LD_INT 1
34944: PLUS
34945: ARRAY
34946: ST_TO_ADDR
34947: GO 35314
34949: LD_INT 6
34951: DOUBLE
34952: EQUAL
34953: IFTRUE 35005
34955: LD_INT 7
34957: DOUBLE
34958: EQUAL
34959: IFTRUE 35005
34961: LD_INT 8
34963: DOUBLE
34964: EQUAL
34965: IFTRUE 35005
34967: LD_INT 13
34969: DOUBLE
34970: EQUAL
34971: IFTRUE 35005
34973: LD_INT 12
34975: DOUBLE
34976: EQUAL
34977: IFTRUE 35005
34979: LD_INT 15
34981: DOUBLE
34982: EQUAL
34983: IFTRUE 35005
34985: LD_INT 11
34987: DOUBLE
34988: EQUAL
34989: IFTRUE 35005
34991: LD_INT 14
34993: DOUBLE
34994: EQUAL
34995: IFTRUE 35005
34997: LD_INT 10
34999: DOUBLE
35000: EQUAL
35001: IFTRUE 35005
35003: GO 35061
35005: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35006: LD_ADDR_VAR 0 9
35010: PUSH
35011: LD_VAR 0 41
35015: PUSH
35016: LD_VAR 0 42
35020: PUSH
35021: LD_VAR 0 43
35025: PUSH
35026: LD_VAR 0 44
35030: PUSH
35031: LD_VAR 0 45
35035: PUSH
35036: LD_VAR 0 46
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: PUSH
35049: LD_VAR 0 4
35053: PUSH
35054: LD_INT 1
35056: PLUS
35057: ARRAY
35058: ST_TO_ADDR
35059: GO 35314
35061: LD_INT 36
35063: DOUBLE
35064: EQUAL
35065: IFTRUE 35069
35067: GO 35125
35069: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35070: LD_ADDR_VAR 0 9
35074: PUSH
35075: LD_VAR 0 47
35079: PUSH
35080: LD_VAR 0 48
35084: PUSH
35085: LD_VAR 0 49
35089: PUSH
35090: LD_VAR 0 50
35094: PUSH
35095: LD_VAR 0 51
35099: PUSH
35100: LD_VAR 0 52
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: PUSH
35113: LD_VAR 0 4
35117: PUSH
35118: LD_INT 1
35120: PLUS
35121: ARRAY
35122: ST_TO_ADDR
35123: GO 35314
35125: LD_INT 4
35127: DOUBLE
35128: EQUAL
35129: IFTRUE 35151
35131: LD_INT 5
35133: DOUBLE
35134: EQUAL
35135: IFTRUE 35151
35137: LD_INT 34
35139: DOUBLE
35140: EQUAL
35141: IFTRUE 35151
35143: LD_INT 37
35145: DOUBLE
35146: EQUAL
35147: IFTRUE 35151
35149: GO 35207
35151: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35152: LD_ADDR_VAR 0 9
35156: PUSH
35157: LD_VAR 0 53
35161: PUSH
35162: LD_VAR 0 54
35166: PUSH
35167: LD_VAR 0 55
35171: PUSH
35172: LD_VAR 0 56
35176: PUSH
35177: LD_VAR 0 57
35181: PUSH
35182: LD_VAR 0 58
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: PUSH
35195: LD_VAR 0 4
35199: PUSH
35200: LD_INT 1
35202: PLUS
35203: ARRAY
35204: ST_TO_ADDR
35205: GO 35314
35207: LD_INT 31
35209: DOUBLE
35210: EQUAL
35211: IFTRUE 35257
35213: LD_INT 32
35215: DOUBLE
35216: EQUAL
35217: IFTRUE 35257
35219: LD_INT 33
35221: DOUBLE
35222: EQUAL
35223: IFTRUE 35257
35225: LD_INT 27
35227: DOUBLE
35228: EQUAL
35229: IFTRUE 35257
35231: LD_INT 26
35233: DOUBLE
35234: EQUAL
35235: IFTRUE 35257
35237: LD_INT 28
35239: DOUBLE
35240: EQUAL
35241: IFTRUE 35257
35243: LD_INT 29
35245: DOUBLE
35246: EQUAL
35247: IFTRUE 35257
35249: LD_INT 30
35251: DOUBLE
35252: EQUAL
35253: IFTRUE 35257
35255: GO 35313
35257: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35258: LD_ADDR_VAR 0 9
35262: PUSH
35263: LD_VAR 0 59
35267: PUSH
35268: LD_VAR 0 60
35272: PUSH
35273: LD_VAR 0 61
35277: PUSH
35278: LD_VAR 0 62
35282: PUSH
35283: LD_VAR 0 63
35287: PUSH
35288: LD_VAR 0 64
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: PUSH
35301: LD_VAR 0 4
35305: PUSH
35306: LD_INT 1
35308: PLUS
35309: ARRAY
35310: ST_TO_ADDR
35311: GO 35314
35313: POP
// temp_list2 = [ ] ;
35314: LD_ADDR_VAR 0 10
35318: PUSH
35319: EMPTY
35320: ST_TO_ADDR
// for i in temp_list do
35321: LD_ADDR_VAR 0 8
35325: PUSH
35326: LD_VAR 0 9
35330: PUSH
35331: FOR_IN
35332: IFFALSE 35384
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35334: LD_ADDR_VAR 0 10
35338: PUSH
35339: LD_VAR 0 10
35343: PUSH
35344: LD_VAR 0 8
35348: PUSH
35349: LD_INT 1
35351: ARRAY
35352: PUSH
35353: LD_VAR 0 2
35357: PLUS
35358: PUSH
35359: LD_VAR 0 8
35363: PUSH
35364: LD_INT 2
35366: ARRAY
35367: PUSH
35368: LD_VAR 0 3
35372: PLUS
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: EMPTY
35379: LIST
35380: ADD
35381: ST_TO_ADDR
35382: GO 35331
35384: POP
35385: POP
// result = temp_list2 ;
35386: LD_ADDR_VAR 0 7
35390: PUSH
35391: LD_VAR 0 10
35395: ST_TO_ADDR
// end ;
35396: LD_VAR 0 7
35400: RET
// export function EnemyInRange ( unit , dist ) ; begin
35401: LD_INT 0
35403: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35404: LD_ADDR_VAR 0 3
35408: PUSH
35409: LD_VAR 0 1
35413: PPUSH
35414: CALL_OW 255
35418: PPUSH
35419: LD_VAR 0 1
35423: PPUSH
35424: CALL_OW 250
35428: PPUSH
35429: LD_VAR 0 1
35433: PPUSH
35434: CALL_OW 251
35438: PPUSH
35439: LD_VAR 0 2
35443: PPUSH
35444: CALL 8803 0 4
35448: PUSH
35449: LD_INT 4
35451: ARRAY
35452: ST_TO_ADDR
// end ;
35453: LD_VAR 0 3
35457: RET
// export function PlayerSeeMe ( unit ) ; begin
35458: LD_INT 0
35460: PPUSH
// result := See ( your_side , unit ) ;
35461: LD_ADDR_VAR 0 2
35465: PUSH
35466: LD_OWVAR 2
35470: PPUSH
35471: LD_VAR 0 1
35475: PPUSH
35476: CALL_OW 292
35480: ST_TO_ADDR
// end ;
35481: LD_VAR 0 2
35485: RET
// export function ReverseDir ( unit ) ; begin
35486: LD_INT 0
35488: PPUSH
// if not unit then
35489: LD_VAR 0 1
35493: NOT
35494: IFFALSE 35498
// exit ;
35496: GO 35521
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35498: LD_ADDR_VAR 0 2
35502: PUSH
35503: LD_VAR 0 1
35507: PPUSH
35508: CALL_OW 254
35512: PUSH
35513: LD_INT 3
35515: PLUS
35516: PUSH
35517: LD_INT 6
35519: MOD
35520: ST_TO_ADDR
// end ;
35521: LD_VAR 0 2
35525: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35526: LD_INT 0
35528: PPUSH
35529: PPUSH
35530: PPUSH
35531: PPUSH
35532: PPUSH
35533: PPUSH
// if not unit or not hexes then
35534: LD_VAR 0 1
35538: NOT
35539: PUSH
35540: LD_VAR 0 2
35544: NOT
35545: OR
35546: IFFALSE 35550
// exit ;
35548: GO 35673
// dist := 9999 ;
35550: LD_ADDR_VAR 0 5
35554: PUSH
35555: LD_INT 9999
35557: ST_TO_ADDR
// for i = 1 to hexes do
35558: LD_ADDR_VAR 0 4
35562: PUSH
35563: DOUBLE
35564: LD_INT 1
35566: DEC
35567: ST_TO_ADDR
35568: LD_VAR 0 2
35572: PUSH
35573: FOR_TO
35574: IFFALSE 35661
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35576: LD_ADDR_VAR 0 6
35580: PUSH
35581: LD_VAR 0 1
35585: PPUSH
35586: LD_VAR 0 2
35590: PUSH
35591: LD_VAR 0 4
35595: ARRAY
35596: PUSH
35597: LD_INT 1
35599: ARRAY
35600: PPUSH
35601: LD_VAR 0 2
35605: PUSH
35606: LD_VAR 0 4
35610: ARRAY
35611: PUSH
35612: LD_INT 2
35614: ARRAY
35615: PPUSH
35616: CALL_OW 297
35620: ST_TO_ADDR
// if tdist < dist then
35621: LD_VAR 0 6
35625: PUSH
35626: LD_VAR 0 5
35630: LESS
35631: IFFALSE 35659
// begin hex := hexes [ i ] ;
35633: LD_ADDR_VAR 0 8
35637: PUSH
35638: LD_VAR 0 2
35642: PUSH
35643: LD_VAR 0 4
35647: ARRAY
35648: ST_TO_ADDR
// dist := tdist ;
35649: LD_ADDR_VAR 0 5
35653: PUSH
35654: LD_VAR 0 6
35658: ST_TO_ADDR
// end ; end ;
35659: GO 35573
35661: POP
35662: POP
// result := hex ;
35663: LD_ADDR_VAR 0 3
35667: PUSH
35668: LD_VAR 0 8
35672: ST_TO_ADDR
// end ;
35673: LD_VAR 0 3
35677: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35678: LD_INT 0
35680: PPUSH
35681: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35682: LD_VAR 0 1
35686: NOT
35687: PUSH
35688: LD_VAR 0 1
35692: PUSH
35693: LD_INT 21
35695: PUSH
35696: LD_INT 2
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 23
35705: PUSH
35706: LD_INT 2
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PPUSH
35717: CALL_OW 69
35721: IN
35722: NOT
35723: OR
35724: IFFALSE 35728
// exit ;
35726: GO 35775
// for i = 1 to 3 do
35728: LD_ADDR_VAR 0 3
35732: PUSH
35733: DOUBLE
35734: LD_INT 1
35736: DEC
35737: ST_TO_ADDR
35738: LD_INT 3
35740: PUSH
35741: FOR_TO
35742: IFFALSE 35773
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35744: LD_VAR 0 1
35748: PPUSH
35749: CALL_OW 250
35753: PPUSH
35754: LD_VAR 0 1
35758: PPUSH
35759: CALL_OW 251
35763: PPUSH
35764: LD_INT 1
35766: PPUSH
35767: CALL_OW 453
35771: GO 35741
35773: POP
35774: POP
// end ;
35775: LD_VAR 0 2
35779: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35780: LD_INT 0
35782: PPUSH
35783: PPUSH
35784: PPUSH
35785: PPUSH
35786: PPUSH
35787: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
35788: LD_VAR 0 1
35792: NOT
35793: PUSH
35794: LD_VAR 0 2
35798: NOT
35799: OR
35800: PUSH
35801: LD_VAR 0 1
35805: PPUSH
35806: CALL_OW 314
35810: OR
35811: IFFALSE 35815
// exit ;
35813: GO 36256
// x := GetX ( enemy_unit ) ;
35815: LD_ADDR_VAR 0 7
35819: PUSH
35820: LD_VAR 0 2
35824: PPUSH
35825: CALL_OW 250
35829: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35830: LD_ADDR_VAR 0 8
35834: PUSH
35835: LD_VAR 0 2
35839: PPUSH
35840: CALL_OW 251
35844: ST_TO_ADDR
// if not x or not y then
35845: LD_VAR 0 7
35849: NOT
35850: PUSH
35851: LD_VAR 0 8
35855: NOT
35856: OR
35857: IFFALSE 35861
// exit ;
35859: GO 36256
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35861: LD_ADDR_VAR 0 6
35865: PUSH
35866: LD_VAR 0 7
35870: PPUSH
35871: LD_INT 0
35873: PPUSH
35874: LD_INT 4
35876: PPUSH
35877: CALL_OW 272
35881: PUSH
35882: LD_VAR 0 8
35886: PPUSH
35887: LD_INT 0
35889: PPUSH
35890: LD_INT 4
35892: PPUSH
35893: CALL_OW 273
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_VAR 0 7
35906: PPUSH
35907: LD_INT 1
35909: PPUSH
35910: LD_INT 4
35912: PPUSH
35913: CALL_OW 272
35917: PUSH
35918: LD_VAR 0 8
35922: PPUSH
35923: LD_INT 1
35925: PPUSH
35926: LD_INT 4
35928: PPUSH
35929: CALL_OW 273
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_VAR 0 7
35942: PPUSH
35943: LD_INT 2
35945: PPUSH
35946: LD_INT 4
35948: PPUSH
35949: CALL_OW 272
35953: PUSH
35954: LD_VAR 0 8
35958: PPUSH
35959: LD_INT 2
35961: PPUSH
35962: LD_INT 4
35964: PPUSH
35965: CALL_OW 273
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_VAR 0 7
35978: PPUSH
35979: LD_INT 3
35981: PPUSH
35982: LD_INT 4
35984: PPUSH
35985: CALL_OW 272
35989: PUSH
35990: LD_VAR 0 8
35994: PPUSH
35995: LD_INT 3
35997: PPUSH
35998: LD_INT 4
36000: PPUSH
36001: CALL_OW 273
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_VAR 0 7
36014: PPUSH
36015: LD_INT 4
36017: PPUSH
36018: LD_INT 4
36020: PPUSH
36021: CALL_OW 272
36025: PUSH
36026: LD_VAR 0 8
36030: PPUSH
36031: LD_INT 4
36033: PPUSH
36034: LD_INT 4
36036: PPUSH
36037: CALL_OW 273
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_VAR 0 7
36050: PPUSH
36051: LD_INT 5
36053: PPUSH
36054: LD_INT 4
36056: PPUSH
36057: CALL_OW 272
36061: PUSH
36062: LD_VAR 0 8
36066: PPUSH
36067: LD_INT 5
36069: PPUSH
36070: LD_INT 4
36072: PPUSH
36073: CALL_OW 273
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: ST_TO_ADDR
// for i = tmp downto 1 do
36090: LD_ADDR_VAR 0 4
36094: PUSH
36095: DOUBLE
36096: LD_VAR 0 6
36100: INC
36101: ST_TO_ADDR
36102: LD_INT 1
36104: PUSH
36105: FOR_DOWNTO
36106: IFFALSE 36207
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36108: LD_VAR 0 6
36112: PUSH
36113: LD_VAR 0 4
36117: ARRAY
36118: PUSH
36119: LD_INT 1
36121: ARRAY
36122: PPUSH
36123: LD_VAR 0 6
36127: PUSH
36128: LD_VAR 0 4
36132: ARRAY
36133: PUSH
36134: LD_INT 2
36136: ARRAY
36137: PPUSH
36138: CALL_OW 488
36142: NOT
36143: PUSH
36144: LD_VAR 0 6
36148: PUSH
36149: LD_VAR 0 4
36153: ARRAY
36154: PUSH
36155: LD_INT 1
36157: ARRAY
36158: PPUSH
36159: LD_VAR 0 6
36163: PUSH
36164: LD_VAR 0 4
36168: ARRAY
36169: PUSH
36170: LD_INT 2
36172: ARRAY
36173: PPUSH
36174: CALL_OW 428
36178: PUSH
36179: LD_INT 0
36181: NONEQUAL
36182: OR
36183: IFFALSE 36205
// tmp := Delete ( tmp , i ) ;
36185: LD_ADDR_VAR 0 6
36189: PUSH
36190: LD_VAR 0 6
36194: PPUSH
36195: LD_VAR 0 4
36199: PPUSH
36200: CALL_OW 3
36204: ST_TO_ADDR
36205: GO 36105
36207: POP
36208: POP
// j := GetClosestHex ( unit , tmp ) ;
36209: LD_ADDR_VAR 0 5
36213: PUSH
36214: LD_VAR 0 1
36218: PPUSH
36219: LD_VAR 0 6
36223: PPUSH
36224: CALL 35526 0 2
36228: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36229: LD_VAR 0 1
36233: PPUSH
36234: LD_VAR 0 5
36238: PUSH
36239: LD_INT 1
36241: ARRAY
36242: PPUSH
36243: LD_VAR 0 5
36247: PUSH
36248: LD_INT 2
36250: ARRAY
36251: PPUSH
36252: CALL_OW 111
// end ;
36256: LD_VAR 0 3
36260: RET
// export function PrepareApemanSoldier ( ) ; begin
36261: LD_INT 0
36263: PPUSH
// uc_nation := 0 ;
36264: LD_ADDR_OWVAR 21
36268: PUSH
36269: LD_INT 0
36271: ST_TO_ADDR
// hc_sex := sex_male ;
36272: LD_ADDR_OWVAR 27
36276: PUSH
36277: LD_INT 1
36279: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36280: LD_ADDR_OWVAR 28
36284: PUSH
36285: LD_INT 15
36287: ST_TO_ADDR
// hc_gallery :=  ;
36288: LD_ADDR_OWVAR 33
36292: PUSH
36293: LD_STRING 
36295: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36296: LD_ADDR_OWVAR 31
36300: PUSH
36301: LD_INT 0
36303: PPUSH
36304: LD_INT 3
36306: PPUSH
36307: CALL_OW 12
36311: PUSH
36312: LD_INT 0
36314: PPUSH
36315: LD_INT 3
36317: PPUSH
36318: CALL_OW 12
36322: PUSH
36323: LD_INT 0
36325: PUSH
36326: LD_INT 0
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: ST_TO_ADDR
// end ;
36335: LD_VAR 0 1
36339: RET
// export function PrepareApemanEngineer ( ) ; begin
36340: LD_INT 0
36342: PPUSH
// uc_nation := 0 ;
36343: LD_ADDR_OWVAR 21
36347: PUSH
36348: LD_INT 0
36350: ST_TO_ADDR
// hc_sex := sex_male ;
36351: LD_ADDR_OWVAR 27
36355: PUSH
36356: LD_INT 1
36358: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36359: LD_ADDR_OWVAR 28
36363: PUSH
36364: LD_INT 16
36366: ST_TO_ADDR
// hc_gallery :=  ;
36367: LD_ADDR_OWVAR 33
36371: PUSH
36372: LD_STRING 
36374: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36375: LD_ADDR_OWVAR 31
36379: PUSH
36380: LD_INT 0
36382: PPUSH
36383: LD_INT 3
36385: PPUSH
36386: CALL_OW 12
36390: PUSH
36391: LD_INT 0
36393: PPUSH
36394: LD_INT 3
36396: PPUSH
36397: CALL_OW 12
36401: PUSH
36402: LD_INT 0
36404: PUSH
36405: LD_INT 0
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: ST_TO_ADDR
// end ;
36414: LD_VAR 0 1
36418: RET
// export function PrepareApeman ( agressivity ) ; begin
36419: LD_INT 0
36421: PPUSH
// uc_side := 0 ;
36422: LD_ADDR_OWVAR 20
36426: PUSH
36427: LD_INT 0
36429: ST_TO_ADDR
// uc_nation := 0 ;
36430: LD_ADDR_OWVAR 21
36434: PUSH
36435: LD_INT 0
36437: ST_TO_ADDR
// hc_sex := sex_male ;
36438: LD_ADDR_OWVAR 27
36442: PUSH
36443: LD_INT 1
36445: ST_TO_ADDR
// hc_class := class_apeman ;
36446: LD_ADDR_OWVAR 28
36450: PUSH
36451: LD_INT 12
36453: ST_TO_ADDR
// hc_gallery :=  ;
36454: LD_ADDR_OWVAR 33
36458: PUSH
36459: LD_STRING 
36461: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36462: LD_ADDR_OWVAR 35
36466: PUSH
36467: LD_VAR 0 1
36471: NEG
36472: PPUSH
36473: LD_VAR 0 1
36477: PPUSH
36478: CALL_OW 12
36482: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36483: LD_ADDR_OWVAR 31
36487: PUSH
36488: LD_INT 0
36490: PPUSH
36491: LD_INT 3
36493: PPUSH
36494: CALL_OW 12
36498: PUSH
36499: LD_INT 0
36501: PPUSH
36502: LD_INT 3
36504: PPUSH
36505: CALL_OW 12
36509: PUSH
36510: LD_INT 0
36512: PUSH
36513: LD_INT 0
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: ST_TO_ADDR
// end ;
36522: LD_VAR 0 2
36526: RET
// export function PrepareTiger ( agressivity ) ; begin
36527: LD_INT 0
36529: PPUSH
// uc_side := 0 ;
36530: LD_ADDR_OWVAR 20
36534: PUSH
36535: LD_INT 0
36537: ST_TO_ADDR
// uc_nation := 0 ;
36538: LD_ADDR_OWVAR 21
36542: PUSH
36543: LD_INT 0
36545: ST_TO_ADDR
// hc_class := class_tiger ;
36546: LD_ADDR_OWVAR 28
36550: PUSH
36551: LD_INT 14
36553: ST_TO_ADDR
// hc_gallery :=  ;
36554: LD_ADDR_OWVAR 33
36558: PUSH
36559: LD_STRING 
36561: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36562: LD_ADDR_OWVAR 35
36566: PUSH
36567: LD_VAR 0 1
36571: NEG
36572: PPUSH
36573: LD_VAR 0 1
36577: PPUSH
36578: CALL_OW 12
36582: ST_TO_ADDR
// end ;
36583: LD_VAR 0 2
36587: RET
// export function PrepareEnchidna ( ) ; begin
36588: LD_INT 0
36590: PPUSH
// uc_side := 0 ;
36591: LD_ADDR_OWVAR 20
36595: PUSH
36596: LD_INT 0
36598: ST_TO_ADDR
// uc_nation := 0 ;
36599: LD_ADDR_OWVAR 21
36603: PUSH
36604: LD_INT 0
36606: ST_TO_ADDR
// hc_class := class_baggie ;
36607: LD_ADDR_OWVAR 28
36611: PUSH
36612: LD_INT 13
36614: ST_TO_ADDR
// hc_gallery :=  ;
36615: LD_ADDR_OWVAR 33
36619: PUSH
36620: LD_STRING 
36622: ST_TO_ADDR
// end ;
36623: LD_VAR 0 1
36627: RET
// export function PrepareFrog ( ) ; begin
36628: LD_INT 0
36630: PPUSH
// uc_side := 0 ;
36631: LD_ADDR_OWVAR 20
36635: PUSH
36636: LD_INT 0
36638: ST_TO_ADDR
// uc_nation := 0 ;
36639: LD_ADDR_OWVAR 21
36643: PUSH
36644: LD_INT 0
36646: ST_TO_ADDR
// hc_class := class_frog ;
36647: LD_ADDR_OWVAR 28
36651: PUSH
36652: LD_INT 19
36654: ST_TO_ADDR
// hc_gallery :=  ;
36655: LD_ADDR_OWVAR 33
36659: PUSH
36660: LD_STRING 
36662: ST_TO_ADDR
// end ;
36663: LD_VAR 0 1
36667: RET
// export function PrepareFish ( ) ; begin
36668: LD_INT 0
36670: PPUSH
// uc_side := 0 ;
36671: LD_ADDR_OWVAR 20
36675: PUSH
36676: LD_INT 0
36678: ST_TO_ADDR
// uc_nation := 0 ;
36679: LD_ADDR_OWVAR 21
36683: PUSH
36684: LD_INT 0
36686: ST_TO_ADDR
// hc_class := class_fish ;
36687: LD_ADDR_OWVAR 28
36691: PUSH
36692: LD_INT 20
36694: ST_TO_ADDR
// hc_gallery :=  ;
36695: LD_ADDR_OWVAR 33
36699: PUSH
36700: LD_STRING 
36702: ST_TO_ADDR
// end ;
36703: LD_VAR 0 1
36707: RET
// export function PrepareBird ( ) ; begin
36708: LD_INT 0
36710: PPUSH
// uc_side := 0 ;
36711: LD_ADDR_OWVAR 20
36715: PUSH
36716: LD_INT 0
36718: ST_TO_ADDR
// uc_nation := 0 ;
36719: LD_ADDR_OWVAR 21
36723: PUSH
36724: LD_INT 0
36726: ST_TO_ADDR
// hc_class := class_phororhacos ;
36727: LD_ADDR_OWVAR 28
36731: PUSH
36732: LD_INT 18
36734: ST_TO_ADDR
// hc_gallery :=  ;
36735: LD_ADDR_OWVAR 33
36739: PUSH
36740: LD_STRING 
36742: ST_TO_ADDR
// end ;
36743: LD_VAR 0 1
36747: RET
// export function PrepareHorse ( ) ; begin
36748: LD_INT 0
36750: PPUSH
// uc_side := 0 ;
36751: LD_ADDR_OWVAR 20
36755: PUSH
36756: LD_INT 0
36758: ST_TO_ADDR
// uc_nation := 0 ;
36759: LD_ADDR_OWVAR 21
36763: PUSH
36764: LD_INT 0
36766: ST_TO_ADDR
// hc_class := class_horse ;
36767: LD_ADDR_OWVAR 28
36771: PUSH
36772: LD_INT 21
36774: ST_TO_ADDR
// hc_gallery :=  ;
36775: LD_ADDR_OWVAR 33
36779: PUSH
36780: LD_STRING 
36782: ST_TO_ADDR
// end ;
36783: LD_VAR 0 1
36787: RET
// export function PrepareMastodont ( ) ; begin
36788: LD_INT 0
36790: PPUSH
// uc_side := 0 ;
36791: LD_ADDR_OWVAR 20
36795: PUSH
36796: LD_INT 0
36798: ST_TO_ADDR
// uc_nation := 0 ;
36799: LD_ADDR_OWVAR 21
36803: PUSH
36804: LD_INT 0
36806: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36807: LD_ADDR_OWVAR 37
36811: PUSH
36812: LD_INT 31
36814: ST_TO_ADDR
// vc_control := control_rider ;
36815: LD_ADDR_OWVAR 38
36819: PUSH
36820: LD_INT 4
36822: ST_TO_ADDR
// end ;
36823: LD_VAR 0 1
36827: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36828: LD_INT 0
36830: PPUSH
36831: PPUSH
36832: PPUSH
// uc_side = 0 ;
36833: LD_ADDR_OWVAR 20
36837: PUSH
36838: LD_INT 0
36840: ST_TO_ADDR
// uc_nation = 0 ;
36841: LD_ADDR_OWVAR 21
36845: PUSH
36846: LD_INT 0
36848: ST_TO_ADDR
// InitHc_All ( ) ;
36849: CALL_OW 584
// InitVc ;
36853: CALL_OW 20
// if mastodonts then
36857: LD_VAR 0 6
36861: IFFALSE 36928
// for i = 1 to mastodonts do
36863: LD_ADDR_VAR 0 11
36867: PUSH
36868: DOUBLE
36869: LD_INT 1
36871: DEC
36872: ST_TO_ADDR
36873: LD_VAR 0 6
36877: PUSH
36878: FOR_TO
36879: IFFALSE 36926
// begin vc_chassis := 31 ;
36881: LD_ADDR_OWVAR 37
36885: PUSH
36886: LD_INT 31
36888: ST_TO_ADDR
// vc_control := control_rider ;
36889: LD_ADDR_OWVAR 38
36893: PUSH
36894: LD_INT 4
36896: ST_TO_ADDR
// animal := CreateVehicle ;
36897: LD_ADDR_VAR 0 12
36901: PUSH
36902: CALL_OW 45
36906: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36907: LD_VAR 0 12
36911: PPUSH
36912: LD_VAR 0 8
36916: PPUSH
36917: LD_INT 0
36919: PPUSH
36920: CALL 39063 0 3
// end ;
36924: GO 36878
36926: POP
36927: POP
// if horses then
36928: LD_VAR 0 5
36932: IFFALSE 36999
// for i = 1 to horses do
36934: LD_ADDR_VAR 0 11
36938: PUSH
36939: DOUBLE
36940: LD_INT 1
36942: DEC
36943: ST_TO_ADDR
36944: LD_VAR 0 5
36948: PUSH
36949: FOR_TO
36950: IFFALSE 36997
// begin hc_class := 21 ;
36952: LD_ADDR_OWVAR 28
36956: PUSH
36957: LD_INT 21
36959: ST_TO_ADDR
// hc_gallery :=  ;
36960: LD_ADDR_OWVAR 33
36964: PUSH
36965: LD_STRING 
36967: ST_TO_ADDR
// animal := CreateHuman ;
36968: LD_ADDR_VAR 0 12
36972: PUSH
36973: CALL_OW 44
36977: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36978: LD_VAR 0 12
36982: PPUSH
36983: LD_VAR 0 8
36987: PPUSH
36988: LD_INT 0
36990: PPUSH
36991: CALL 39063 0 3
// end ;
36995: GO 36949
36997: POP
36998: POP
// if birds then
36999: LD_VAR 0 1
37003: IFFALSE 37070
// for i = 1 to birds do
37005: LD_ADDR_VAR 0 11
37009: PUSH
37010: DOUBLE
37011: LD_INT 1
37013: DEC
37014: ST_TO_ADDR
37015: LD_VAR 0 1
37019: PUSH
37020: FOR_TO
37021: IFFALSE 37068
// begin hc_class = 18 ;
37023: LD_ADDR_OWVAR 28
37027: PUSH
37028: LD_INT 18
37030: ST_TO_ADDR
// hc_gallery =  ;
37031: LD_ADDR_OWVAR 33
37035: PUSH
37036: LD_STRING 
37038: ST_TO_ADDR
// animal := CreateHuman ;
37039: LD_ADDR_VAR 0 12
37043: PUSH
37044: CALL_OW 44
37048: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37049: LD_VAR 0 12
37053: PPUSH
37054: LD_VAR 0 8
37058: PPUSH
37059: LD_INT 0
37061: PPUSH
37062: CALL 39063 0 3
// end ;
37066: GO 37020
37068: POP
37069: POP
// if tigers then
37070: LD_VAR 0 2
37074: IFFALSE 37158
// for i = 1 to tigers do
37076: LD_ADDR_VAR 0 11
37080: PUSH
37081: DOUBLE
37082: LD_INT 1
37084: DEC
37085: ST_TO_ADDR
37086: LD_VAR 0 2
37090: PUSH
37091: FOR_TO
37092: IFFALSE 37156
// begin hc_class = class_tiger ;
37094: LD_ADDR_OWVAR 28
37098: PUSH
37099: LD_INT 14
37101: ST_TO_ADDR
// hc_gallery =  ;
37102: LD_ADDR_OWVAR 33
37106: PUSH
37107: LD_STRING 
37109: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37110: LD_ADDR_OWVAR 35
37114: PUSH
37115: LD_INT 7
37117: NEG
37118: PPUSH
37119: LD_INT 7
37121: PPUSH
37122: CALL_OW 12
37126: ST_TO_ADDR
// animal := CreateHuman ;
37127: LD_ADDR_VAR 0 12
37131: PUSH
37132: CALL_OW 44
37136: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37137: LD_VAR 0 12
37141: PPUSH
37142: LD_VAR 0 8
37146: PPUSH
37147: LD_INT 0
37149: PPUSH
37150: CALL 39063 0 3
// end ;
37154: GO 37091
37156: POP
37157: POP
// if apemans then
37158: LD_VAR 0 3
37162: IFFALSE 37285
// for i = 1 to apemans do
37164: LD_ADDR_VAR 0 11
37168: PUSH
37169: DOUBLE
37170: LD_INT 1
37172: DEC
37173: ST_TO_ADDR
37174: LD_VAR 0 3
37178: PUSH
37179: FOR_TO
37180: IFFALSE 37283
// begin hc_class = class_apeman ;
37182: LD_ADDR_OWVAR 28
37186: PUSH
37187: LD_INT 12
37189: ST_TO_ADDR
// hc_gallery =  ;
37190: LD_ADDR_OWVAR 33
37194: PUSH
37195: LD_STRING 
37197: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37198: LD_ADDR_OWVAR 35
37202: PUSH
37203: LD_INT 2
37205: NEG
37206: PPUSH
37207: LD_INT 2
37209: PPUSH
37210: CALL_OW 12
37214: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37215: LD_ADDR_OWVAR 31
37219: PUSH
37220: LD_INT 1
37222: PPUSH
37223: LD_INT 3
37225: PPUSH
37226: CALL_OW 12
37230: PUSH
37231: LD_INT 1
37233: PPUSH
37234: LD_INT 3
37236: PPUSH
37237: CALL_OW 12
37241: PUSH
37242: LD_INT 0
37244: PUSH
37245: LD_INT 0
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: ST_TO_ADDR
// animal := CreateHuman ;
37254: LD_ADDR_VAR 0 12
37258: PUSH
37259: CALL_OW 44
37263: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37264: LD_VAR 0 12
37268: PPUSH
37269: LD_VAR 0 8
37273: PPUSH
37274: LD_INT 0
37276: PPUSH
37277: CALL 39063 0 3
// end ;
37281: GO 37179
37283: POP
37284: POP
// if enchidnas then
37285: LD_VAR 0 4
37289: IFFALSE 37356
// for i = 1 to enchidnas do
37291: LD_ADDR_VAR 0 11
37295: PUSH
37296: DOUBLE
37297: LD_INT 1
37299: DEC
37300: ST_TO_ADDR
37301: LD_VAR 0 4
37305: PUSH
37306: FOR_TO
37307: IFFALSE 37354
// begin hc_class = 13 ;
37309: LD_ADDR_OWVAR 28
37313: PUSH
37314: LD_INT 13
37316: ST_TO_ADDR
// hc_gallery =  ;
37317: LD_ADDR_OWVAR 33
37321: PUSH
37322: LD_STRING 
37324: ST_TO_ADDR
// animal := CreateHuman ;
37325: LD_ADDR_VAR 0 12
37329: PUSH
37330: CALL_OW 44
37334: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37335: LD_VAR 0 12
37339: PPUSH
37340: LD_VAR 0 8
37344: PPUSH
37345: LD_INT 0
37347: PPUSH
37348: CALL 39063 0 3
// end ;
37352: GO 37306
37354: POP
37355: POP
// if fishes then
37356: LD_VAR 0 7
37360: IFFALSE 37427
// for i = 1 to fishes do
37362: LD_ADDR_VAR 0 11
37366: PUSH
37367: DOUBLE
37368: LD_INT 1
37370: DEC
37371: ST_TO_ADDR
37372: LD_VAR 0 7
37376: PUSH
37377: FOR_TO
37378: IFFALSE 37425
// begin hc_class = 20 ;
37380: LD_ADDR_OWVAR 28
37384: PUSH
37385: LD_INT 20
37387: ST_TO_ADDR
// hc_gallery =  ;
37388: LD_ADDR_OWVAR 33
37392: PUSH
37393: LD_STRING 
37395: ST_TO_ADDR
// animal := CreateHuman ;
37396: LD_ADDR_VAR 0 12
37400: PUSH
37401: CALL_OW 44
37405: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37406: LD_VAR 0 12
37410: PPUSH
37411: LD_VAR 0 9
37415: PPUSH
37416: LD_INT 0
37418: PPUSH
37419: CALL 39063 0 3
// end ;
37423: GO 37377
37425: POP
37426: POP
// end ;
37427: LD_VAR 0 10
37431: RET
// export function WantHeal ( sci , unit ) ; begin
37432: LD_INT 0
37434: PPUSH
// if GetTaskList ( sci ) > 0 then
37435: LD_VAR 0 1
37439: PPUSH
37440: CALL_OW 437
37444: PUSH
37445: LD_INT 0
37447: GREATER
37448: IFFALSE 37518
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37450: LD_VAR 0 1
37454: PPUSH
37455: CALL_OW 437
37459: PUSH
37460: LD_INT 1
37462: ARRAY
37463: PUSH
37464: LD_INT 1
37466: ARRAY
37467: PUSH
37468: LD_STRING l
37470: EQUAL
37471: PUSH
37472: LD_VAR 0 1
37476: PPUSH
37477: CALL_OW 437
37481: PUSH
37482: LD_INT 1
37484: ARRAY
37485: PUSH
37486: LD_INT 4
37488: ARRAY
37489: PUSH
37490: LD_VAR 0 2
37494: EQUAL
37495: AND
37496: IFFALSE 37508
// result := true else
37498: LD_ADDR_VAR 0 3
37502: PUSH
37503: LD_INT 1
37505: ST_TO_ADDR
37506: GO 37516
// result := false ;
37508: LD_ADDR_VAR 0 3
37512: PUSH
37513: LD_INT 0
37515: ST_TO_ADDR
// end else
37516: GO 37526
// result := false ;
37518: LD_ADDR_VAR 0 3
37522: PUSH
37523: LD_INT 0
37525: ST_TO_ADDR
// end ;
37526: LD_VAR 0 3
37530: RET
// export function HealTarget ( sci ) ; begin
37531: LD_INT 0
37533: PPUSH
// if not sci then
37534: LD_VAR 0 1
37538: NOT
37539: IFFALSE 37543
// exit ;
37541: GO 37608
// result := 0 ;
37543: LD_ADDR_VAR 0 2
37547: PUSH
37548: LD_INT 0
37550: ST_TO_ADDR
// if GetTaskList ( sci ) then
37551: LD_VAR 0 1
37555: PPUSH
37556: CALL_OW 437
37560: IFFALSE 37608
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37562: LD_VAR 0 1
37566: PPUSH
37567: CALL_OW 437
37571: PUSH
37572: LD_INT 1
37574: ARRAY
37575: PUSH
37576: LD_INT 1
37578: ARRAY
37579: PUSH
37580: LD_STRING l
37582: EQUAL
37583: IFFALSE 37608
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37585: LD_ADDR_VAR 0 2
37589: PUSH
37590: LD_VAR 0 1
37594: PPUSH
37595: CALL_OW 437
37599: PUSH
37600: LD_INT 1
37602: ARRAY
37603: PUSH
37604: LD_INT 4
37606: ARRAY
37607: ST_TO_ADDR
// end ;
37608: LD_VAR 0 2
37612: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37613: LD_INT 0
37615: PPUSH
37616: PPUSH
37617: PPUSH
37618: PPUSH
// if not base_units then
37619: LD_VAR 0 1
37623: NOT
37624: IFFALSE 37628
// exit ;
37626: GO 37715
// result := false ;
37628: LD_ADDR_VAR 0 2
37632: PUSH
37633: LD_INT 0
37635: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37636: LD_ADDR_VAR 0 5
37640: PUSH
37641: LD_VAR 0 1
37645: PPUSH
37646: LD_INT 21
37648: PUSH
37649: LD_INT 3
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PPUSH
37656: CALL_OW 72
37660: ST_TO_ADDR
// if not tmp then
37661: LD_VAR 0 5
37665: NOT
37666: IFFALSE 37670
// exit ;
37668: GO 37715
// for i in tmp do
37670: LD_ADDR_VAR 0 3
37674: PUSH
37675: LD_VAR 0 5
37679: PUSH
37680: FOR_IN
37681: IFFALSE 37713
// begin result := EnemyInRange ( i , 22 ) ;
37683: LD_ADDR_VAR 0 2
37687: PUSH
37688: LD_VAR 0 3
37692: PPUSH
37693: LD_INT 22
37695: PPUSH
37696: CALL 35401 0 2
37700: ST_TO_ADDR
// if result then
37701: LD_VAR 0 2
37705: IFFALSE 37711
// exit ;
37707: POP
37708: POP
37709: GO 37715
// end ;
37711: GO 37680
37713: POP
37714: POP
// end ;
37715: LD_VAR 0 2
37719: RET
// export function FilterByTag ( units , tag ) ; begin
37720: LD_INT 0
37722: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
37723: LD_ADDR_VAR 0 3
37727: PUSH
37728: LD_VAR 0 1
37732: PPUSH
37733: LD_INT 120
37735: PUSH
37736: LD_VAR 0 2
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PPUSH
37745: CALL_OW 72
37749: ST_TO_ADDR
// end ;
37750: LD_VAR 0 3
37754: RET
// export function IsDriver ( un ) ; begin
37755: LD_INT 0
37757: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37758: LD_ADDR_VAR 0 2
37762: PUSH
37763: LD_VAR 0 1
37767: PUSH
37768: LD_INT 55
37770: PUSH
37771: EMPTY
37772: LIST
37773: PPUSH
37774: CALL_OW 69
37778: IN
37779: ST_TO_ADDR
// end ;
37780: LD_VAR 0 2
37784: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37785: LD_INT 0
37787: PPUSH
37788: PPUSH
// list := [ ] ;
37789: LD_ADDR_VAR 0 5
37793: PUSH
37794: EMPTY
37795: ST_TO_ADDR
// case d of 0 :
37796: LD_VAR 0 3
37800: PUSH
37801: LD_INT 0
37803: DOUBLE
37804: EQUAL
37805: IFTRUE 37809
37807: GO 37942
37809: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37810: LD_ADDR_VAR 0 5
37814: PUSH
37815: LD_VAR 0 1
37819: PUSH
37820: LD_INT 4
37822: MINUS
37823: PUSH
37824: LD_VAR 0 2
37828: PUSH
37829: LD_INT 4
37831: MINUS
37832: PUSH
37833: LD_INT 2
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: LIST
37840: PUSH
37841: LD_VAR 0 1
37845: PUSH
37846: LD_INT 3
37848: MINUS
37849: PUSH
37850: LD_VAR 0 2
37854: PUSH
37855: LD_INT 1
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: LIST
37862: PUSH
37863: LD_VAR 0 1
37867: PUSH
37868: LD_INT 4
37870: PLUS
37871: PUSH
37872: LD_VAR 0 2
37876: PUSH
37877: LD_INT 4
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: LIST
37884: PUSH
37885: LD_VAR 0 1
37889: PUSH
37890: LD_INT 3
37892: PLUS
37893: PUSH
37894: LD_VAR 0 2
37898: PUSH
37899: LD_INT 3
37901: PLUS
37902: PUSH
37903: LD_INT 5
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: LIST
37910: PUSH
37911: LD_VAR 0 1
37915: PUSH
37916: LD_VAR 0 2
37920: PUSH
37921: LD_INT 4
37923: PLUS
37924: PUSH
37925: LD_INT 0
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: LIST
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: ST_TO_ADDR
// end ; 1 :
37940: GO 38640
37942: LD_INT 1
37944: DOUBLE
37945: EQUAL
37946: IFTRUE 37950
37948: GO 38083
37950: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37951: LD_ADDR_VAR 0 5
37955: PUSH
37956: LD_VAR 0 1
37960: PUSH
37961: LD_VAR 0 2
37965: PUSH
37966: LD_INT 4
37968: MINUS
37969: PUSH
37970: LD_INT 3
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: LIST
37977: PUSH
37978: LD_VAR 0 1
37982: PUSH
37983: LD_INT 3
37985: MINUS
37986: PUSH
37987: LD_VAR 0 2
37991: PUSH
37992: LD_INT 3
37994: MINUS
37995: PUSH
37996: LD_INT 2
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: LIST
38003: PUSH
38004: LD_VAR 0 1
38008: PUSH
38009: LD_INT 4
38011: MINUS
38012: PUSH
38013: LD_VAR 0 2
38017: PUSH
38018: LD_INT 1
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: LIST
38025: PUSH
38026: LD_VAR 0 1
38030: PUSH
38031: LD_VAR 0 2
38035: PUSH
38036: LD_INT 3
38038: PLUS
38039: PUSH
38040: LD_INT 0
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: LIST
38047: PUSH
38048: LD_VAR 0 1
38052: PUSH
38053: LD_INT 4
38055: PLUS
38056: PUSH
38057: LD_VAR 0 2
38061: PUSH
38062: LD_INT 4
38064: PLUS
38065: PUSH
38066: LD_INT 5
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: LIST
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: ST_TO_ADDR
// end ; 2 :
38081: GO 38640
38083: LD_INT 2
38085: DOUBLE
38086: EQUAL
38087: IFTRUE 38091
38089: GO 38220
38091: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38092: LD_ADDR_VAR 0 5
38096: PUSH
38097: LD_VAR 0 1
38101: PUSH
38102: LD_VAR 0 2
38106: PUSH
38107: LD_INT 3
38109: MINUS
38110: PUSH
38111: LD_INT 3
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: LIST
38118: PUSH
38119: LD_VAR 0 1
38123: PUSH
38124: LD_INT 4
38126: PLUS
38127: PUSH
38128: LD_VAR 0 2
38132: PUSH
38133: LD_INT 4
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: LIST
38140: PUSH
38141: LD_VAR 0 1
38145: PUSH
38146: LD_VAR 0 2
38150: PUSH
38151: LD_INT 4
38153: PLUS
38154: PUSH
38155: LD_INT 0
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: LIST
38162: PUSH
38163: LD_VAR 0 1
38167: PUSH
38168: LD_INT 3
38170: MINUS
38171: PUSH
38172: LD_VAR 0 2
38176: PUSH
38177: LD_INT 1
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: LIST
38184: PUSH
38185: LD_VAR 0 1
38189: PUSH
38190: LD_INT 4
38192: MINUS
38193: PUSH
38194: LD_VAR 0 2
38198: PUSH
38199: LD_INT 4
38201: MINUS
38202: PUSH
38203: LD_INT 2
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: LIST
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: ST_TO_ADDR
// end ; 3 :
38218: GO 38640
38220: LD_INT 3
38222: DOUBLE
38223: EQUAL
38224: IFTRUE 38228
38226: GO 38361
38228: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38229: LD_ADDR_VAR 0 5
38233: PUSH
38234: LD_VAR 0 1
38238: PUSH
38239: LD_INT 3
38241: PLUS
38242: PUSH
38243: LD_VAR 0 2
38247: PUSH
38248: LD_INT 4
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: LIST
38255: PUSH
38256: LD_VAR 0 1
38260: PUSH
38261: LD_INT 4
38263: PLUS
38264: PUSH
38265: LD_VAR 0 2
38269: PUSH
38270: LD_INT 4
38272: PLUS
38273: PUSH
38274: LD_INT 5
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: LIST
38281: PUSH
38282: LD_VAR 0 1
38286: PUSH
38287: LD_INT 4
38289: MINUS
38290: PUSH
38291: LD_VAR 0 2
38295: PUSH
38296: LD_INT 1
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: LIST
38303: PUSH
38304: LD_VAR 0 1
38308: PUSH
38309: LD_VAR 0 2
38313: PUSH
38314: LD_INT 4
38316: MINUS
38317: PUSH
38318: LD_INT 3
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: LIST
38325: PUSH
38326: LD_VAR 0 1
38330: PUSH
38331: LD_INT 3
38333: MINUS
38334: PUSH
38335: LD_VAR 0 2
38339: PUSH
38340: LD_INT 3
38342: MINUS
38343: PUSH
38344: LD_INT 2
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: LIST
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: ST_TO_ADDR
// end ; 4 :
38359: GO 38640
38361: LD_INT 4
38363: DOUBLE
38364: EQUAL
38365: IFTRUE 38369
38367: GO 38502
38369: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38370: LD_ADDR_VAR 0 5
38374: PUSH
38375: LD_VAR 0 1
38379: PUSH
38380: LD_VAR 0 2
38384: PUSH
38385: LD_INT 4
38387: PLUS
38388: PUSH
38389: LD_INT 0
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: LIST
38396: PUSH
38397: LD_VAR 0 1
38401: PUSH
38402: LD_INT 3
38404: PLUS
38405: PUSH
38406: LD_VAR 0 2
38410: PUSH
38411: LD_INT 3
38413: PLUS
38414: PUSH
38415: LD_INT 5
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: LIST
38422: PUSH
38423: LD_VAR 0 1
38427: PUSH
38428: LD_INT 4
38430: PLUS
38431: PUSH
38432: LD_VAR 0 2
38436: PUSH
38437: LD_INT 4
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: LIST
38444: PUSH
38445: LD_VAR 0 1
38449: PUSH
38450: LD_VAR 0 2
38454: PUSH
38455: LD_INT 3
38457: MINUS
38458: PUSH
38459: LD_INT 3
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: LIST
38466: PUSH
38467: LD_VAR 0 1
38471: PUSH
38472: LD_INT 4
38474: MINUS
38475: PUSH
38476: LD_VAR 0 2
38480: PUSH
38481: LD_INT 4
38483: MINUS
38484: PUSH
38485: LD_INT 2
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: LIST
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: ST_TO_ADDR
// end ; 5 :
38500: GO 38640
38502: LD_INT 5
38504: DOUBLE
38505: EQUAL
38506: IFTRUE 38510
38508: GO 38639
38510: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38511: LD_ADDR_VAR 0 5
38515: PUSH
38516: LD_VAR 0 1
38520: PUSH
38521: LD_INT 4
38523: MINUS
38524: PUSH
38525: LD_VAR 0 2
38529: PUSH
38530: LD_INT 1
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: LIST
38537: PUSH
38538: LD_VAR 0 1
38542: PUSH
38543: LD_VAR 0 2
38547: PUSH
38548: LD_INT 4
38550: MINUS
38551: PUSH
38552: LD_INT 3
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: LIST
38559: PUSH
38560: LD_VAR 0 1
38564: PUSH
38565: LD_INT 4
38567: PLUS
38568: PUSH
38569: LD_VAR 0 2
38573: PUSH
38574: LD_INT 4
38576: PLUS
38577: PUSH
38578: LD_INT 5
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: LIST
38585: PUSH
38586: LD_VAR 0 1
38590: PUSH
38591: LD_INT 3
38593: PLUS
38594: PUSH
38595: LD_VAR 0 2
38599: PUSH
38600: LD_INT 4
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: LIST
38607: PUSH
38608: LD_VAR 0 1
38612: PUSH
38613: LD_VAR 0 2
38617: PUSH
38618: LD_INT 3
38620: PLUS
38621: PUSH
38622: LD_INT 0
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: LIST
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: ST_TO_ADDR
// end ; end ;
38637: GO 38640
38639: POP
// result := list ;
38640: LD_ADDR_VAR 0 4
38644: PUSH
38645: LD_VAR 0 5
38649: ST_TO_ADDR
// end ;
38650: LD_VAR 0 4
38654: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38655: LD_INT 0
38657: PPUSH
38658: PPUSH
38659: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38660: LD_VAR 0 1
38664: NOT
38665: PUSH
38666: LD_VAR 0 2
38670: PUSH
38671: LD_INT 1
38673: PUSH
38674: LD_INT 2
38676: PUSH
38677: LD_INT 3
38679: PUSH
38680: LD_INT 4
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: IN
38689: NOT
38690: OR
38691: IFFALSE 38695
// exit ;
38693: GO 38787
// tmp := [ ] ;
38695: LD_ADDR_VAR 0 5
38699: PUSH
38700: EMPTY
38701: ST_TO_ADDR
// for i in units do
38702: LD_ADDR_VAR 0 4
38706: PUSH
38707: LD_VAR 0 1
38711: PUSH
38712: FOR_IN
38713: IFFALSE 38756
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
38715: LD_ADDR_VAR 0 5
38719: PUSH
38720: LD_VAR 0 5
38724: PPUSH
38725: LD_VAR 0 5
38729: PUSH
38730: LD_INT 1
38732: PLUS
38733: PPUSH
38734: LD_VAR 0 4
38738: PPUSH
38739: LD_VAR 0 2
38743: PPUSH
38744: CALL_OW 259
38748: PPUSH
38749: CALL_OW 2
38753: ST_TO_ADDR
38754: GO 38712
38756: POP
38757: POP
// if not tmp then
38758: LD_VAR 0 5
38762: NOT
38763: IFFALSE 38767
// exit ;
38765: GO 38787
// result := SortListByListDesc ( units , tmp ) ;
38767: LD_ADDR_VAR 0 3
38771: PUSH
38772: LD_VAR 0 1
38776: PPUSH
38777: LD_VAR 0 5
38781: PPUSH
38782: CALL_OW 77
38786: ST_TO_ADDR
// end ;
38787: LD_VAR 0 3
38791: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38792: LD_INT 0
38794: PPUSH
38795: PPUSH
38796: PPUSH
// result := false ;
38797: LD_ADDR_VAR 0 3
38801: PUSH
38802: LD_INT 0
38804: ST_TO_ADDR
// x := GetX ( building ) ;
38805: LD_ADDR_VAR 0 4
38809: PUSH
38810: LD_VAR 0 2
38814: PPUSH
38815: CALL_OW 250
38819: ST_TO_ADDR
// y := GetY ( building ) ;
38820: LD_ADDR_VAR 0 5
38824: PUSH
38825: LD_VAR 0 2
38829: PPUSH
38830: CALL_OW 251
38834: ST_TO_ADDR
// if not building or not x or not y then
38835: LD_VAR 0 2
38839: NOT
38840: PUSH
38841: LD_VAR 0 4
38845: NOT
38846: OR
38847: PUSH
38848: LD_VAR 0 5
38852: NOT
38853: OR
38854: IFFALSE 38858
// exit ;
38856: GO 38950
// if GetTaskList ( unit ) then
38858: LD_VAR 0 1
38862: PPUSH
38863: CALL_OW 437
38867: IFFALSE 38950
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38869: LD_STRING e
38871: PUSH
38872: LD_VAR 0 1
38876: PPUSH
38877: CALL_OW 437
38881: PUSH
38882: LD_INT 1
38884: ARRAY
38885: PUSH
38886: LD_INT 1
38888: ARRAY
38889: EQUAL
38890: PUSH
38891: LD_VAR 0 4
38895: PUSH
38896: LD_VAR 0 1
38900: PPUSH
38901: CALL_OW 437
38905: PUSH
38906: LD_INT 1
38908: ARRAY
38909: PUSH
38910: LD_INT 2
38912: ARRAY
38913: EQUAL
38914: AND
38915: PUSH
38916: LD_VAR 0 5
38920: PUSH
38921: LD_VAR 0 1
38925: PPUSH
38926: CALL_OW 437
38930: PUSH
38931: LD_INT 1
38933: ARRAY
38934: PUSH
38935: LD_INT 3
38937: ARRAY
38938: EQUAL
38939: AND
38940: IFFALSE 38950
// result := true end ;
38942: LD_ADDR_VAR 0 3
38946: PUSH
38947: LD_INT 1
38949: ST_TO_ADDR
// end ;
38950: LD_VAR 0 3
38954: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38955: LD_INT 0
38957: PPUSH
// result := false ;
38958: LD_ADDR_VAR 0 4
38962: PUSH
38963: LD_INT 0
38965: ST_TO_ADDR
// if GetTaskList ( unit ) then
38966: LD_VAR 0 1
38970: PPUSH
38971: CALL_OW 437
38975: IFFALSE 39058
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38977: LD_STRING M
38979: PUSH
38980: LD_VAR 0 1
38984: PPUSH
38985: CALL_OW 437
38989: PUSH
38990: LD_INT 1
38992: ARRAY
38993: PUSH
38994: LD_INT 1
38996: ARRAY
38997: EQUAL
38998: PUSH
38999: LD_VAR 0 2
39003: PUSH
39004: LD_VAR 0 1
39008: PPUSH
39009: CALL_OW 437
39013: PUSH
39014: LD_INT 1
39016: ARRAY
39017: PUSH
39018: LD_INT 2
39020: ARRAY
39021: EQUAL
39022: AND
39023: PUSH
39024: LD_VAR 0 3
39028: PUSH
39029: LD_VAR 0 1
39033: PPUSH
39034: CALL_OW 437
39038: PUSH
39039: LD_INT 1
39041: ARRAY
39042: PUSH
39043: LD_INT 3
39045: ARRAY
39046: EQUAL
39047: AND
39048: IFFALSE 39058
// result := true ;
39050: LD_ADDR_VAR 0 4
39054: PUSH
39055: LD_INT 1
39057: ST_TO_ADDR
// end ; end ;
39058: LD_VAR 0 4
39062: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39063: LD_INT 0
39065: PPUSH
39066: PPUSH
39067: PPUSH
39068: PPUSH
// if not unit or not area then
39069: LD_VAR 0 1
39073: NOT
39074: PUSH
39075: LD_VAR 0 2
39079: NOT
39080: OR
39081: IFFALSE 39085
// exit ;
39083: GO 39249
// tmp := AreaToList ( area , i ) ;
39085: LD_ADDR_VAR 0 6
39089: PUSH
39090: LD_VAR 0 2
39094: PPUSH
39095: LD_VAR 0 5
39099: PPUSH
39100: CALL_OW 517
39104: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39105: LD_ADDR_VAR 0 5
39109: PUSH
39110: DOUBLE
39111: LD_INT 1
39113: DEC
39114: ST_TO_ADDR
39115: LD_VAR 0 6
39119: PUSH
39120: LD_INT 1
39122: ARRAY
39123: PUSH
39124: FOR_TO
39125: IFFALSE 39247
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39127: LD_ADDR_VAR 0 7
39131: PUSH
39132: LD_VAR 0 6
39136: PUSH
39137: LD_INT 1
39139: ARRAY
39140: PUSH
39141: LD_VAR 0 5
39145: ARRAY
39146: PUSH
39147: LD_VAR 0 6
39151: PUSH
39152: LD_INT 2
39154: ARRAY
39155: PUSH
39156: LD_VAR 0 5
39160: ARRAY
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
39166: LD_VAR 0 7
39170: PUSH
39171: LD_INT 1
39173: ARRAY
39174: PPUSH
39175: LD_VAR 0 7
39179: PUSH
39180: LD_INT 2
39182: ARRAY
39183: PPUSH
39184: CALL_OW 428
39188: PUSH
39189: LD_INT 0
39191: EQUAL
39192: IFFALSE 39245
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39194: LD_VAR 0 1
39198: PPUSH
39199: LD_VAR 0 7
39203: PUSH
39204: LD_INT 1
39206: ARRAY
39207: PPUSH
39208: LD_VAR 0 7
39212: PUSH
39213: LD_INT 2
39215: ARRAY
39216: PPUSH
39217: LD_VAR 0 3
39221: PPUSH
39222: CALL_OW 48
// result := IsPlaced ( unit ) ;
39226: LD_ADDR_VAR 0 4
39230: PUSH
39231: LD_VAR 0 1
39235: PPUSH
39236: CALL_OW 305
39240: ST_TO_ADDR
// exit ;
39241: POP
39242: POP
39243: GO 39249
// end ; end ;
39245: GO 39124
39247: POP
39248: POP
// end ;
39249: LD_VAR 0 4
39253: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39254: LD_INT 0
39256: PPUSH
39257: PPUSH
39258: PPUSH
// if not side or side > 8 then
39259: LD_VAR 0 1
39263: NOT
39264: PUSH
39265: LD_VAR 0 1
39269: PUSH
39270: LD_INT 8
39272: GREATER
39273: OR
39274: IFFALSE 39278
// exit ;
39276: GO 39465
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39278: LD_ADDR_VAR 0 4
39282: PUSH
39283: LD_INT 22
39285: PUSH
39286: LD_VAR 0 1
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 21
39297: PUSH
39298: LD_INT 3
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PPUSH
39309: CALL_OW 69
39313: ST_TO_ADDR
// if not tmp then
39314: LD_VAR 0 4
39318: NOT
39319: IFFALSE 39323
// exit ;
39321: GO 39465
// enable_addtolog := true ;
39323: LD_ADDR_OWVAR 81
39327: PUSH
39328: LD_INT 1
39330: ST_TO_ADDR
// AddToLog ( [ ) ;
39331: LD_STRING [
39333: PPUSH
39334: CALL_OW 561
// for i in tmp do
39338: LD_ADDR_VAR 0 3
39342: PUSH
39343: LD_VAR 0 4
39347: PUSH
39348: FOR_IN
39349: IFFALSE 39456
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39351: LD_STRING [
39353: PUSH
39354: LD_VAR 0 3
39358: PPUSH
39359: CALL_OW 266
39363: STR
39364: PUSH
39365: LD_STRING , 
39367: STR
39368: PUSH
39369: LD_VAR 0 3
39373: PPUSH
39374: CALL_OW 250
39378: STR
39379: PUSH
39380: LD_STRING , 
39382: STR
39383: PUSH
39384: LD_VAR 0 3
39388: PPUSH
39389: CALL_OW 251
39393: STR
39394: PUSH
39395: LD_STRING , 
39397: STR
39398: PUSH
39399: LD_VAR 0 3
39403: PPUSH
39404: CALL_OW 254
39408: STR
39409: PUSH
39410: LD_STRING , 
39412: STR
39413: PUSH
39414: LD_VAR 0 3
39418: PPUSH
39419: LD_INT 1
39421: PPUSH
39422: CALL_OW 268
39426: STR
39427: PUSH
39428: LD_STRING , 
39430: STR
39431: PUSH
39432: LD_VAR 0 3
39436: PPUSH
39437: LD_INT 2
39439: PPUSH
39440: CALL_OW 268
39444: STR
39445: PUSH
39446: LD_STRING ],
39448: STR
39449: PPUSH
39450: CALL_OW 561
// end ;
39454: GO 39348
39456: POP
39457: POP
// AddToLog ( ]; ) ;
39458: LD_STRING ];
39460: PPUSH
39461: CALL_OW 561
// end ;
39465: LD_VAR 0 2
39469: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39470: LD_INT 0
39472: PPUSH
39473: PPUSH
39474: PPUSH
39475: PPUSH
39476: PPUSH
// if not area or not rate or not max then
39477: LD_VAR 0 1
39481: NOT
39482: PUSH
39483: LD_VAR 0 2
39487: NOT
39488: OR
39489: PUSH
39490: LD_VAR 0 4
39494: NOT
39495: OR
39496: IFFALSE 39500
// exit ;
39498: GO 39689
// while 1 do
39500: LD_INT 1
39502: IFFALSE 39689
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39504: LD_ADDR_VAR 0 9
39508: PUSH
39509: LD_VAR 0 1
39513: PPUSH
39514: LD_INT 1
39516: PPUSH
39517: CALL_OW 287
39521: PUSH
39522: LD_INT 10
39524: MUL
39525: ST_TO_ADDR
// r := rate / 10 ;
39526: LD_ADDR_VAR 0 7
39530: PUSH
39531: LD_VAR 0 2
39535: PUSH
39536: LD_INT 10
39538: DIVREAL
39539: ST_TO_ADDR
// time := 1 1$00 ;
39540: LD_ADDR_VAR 0 8
39544: PUSH
39545: LD_INT 2100
39547: ST_TO_ADDR
// if amount < min then
39548: LD_VAR 0 9
39552: PUSH
39553: LD_VAR 0 3
39557: LESS
39558: IFFALSE 39576
// r := r * 2 else
39560: LD_ADDR_VAR 0 7
39564: PUSH
39565: LD_VAR 0 7
39569: PUSH
39570: LD_INT 2
39572: MUL
39573: ST_TO_ADDR
39574: GO 39602
// if amount > max then
39576: LD_VAR 0 9
39580: PUSH
39581: LD_VAR 0 4
39585: GREATER
39586: IFFALSE 39602
// r := r / 2 ;
39588: LD_ADDR_VAR 0 7
39592: PUSH
39593: LD_VAR 0 7
39597: PUSH
39598: LD_INT 2
39600: DIVREAL
39601: ST_TO_ADDR
// time := time / r ;
39602: LD_ADDR_VAR 0 8
39606: PUSH
39607: LD_VAR 0 8
39611: PUSH
39612: LD_VAR 0 7
39616: DIVREAL
39617: ST_TO_ADDR
// if time < 0 then
39618: LD_VAR 0 8
39622: PUSH
39623: LD_INT 0
39625: LESS
39626: IFFALSE 39643
// time := time * - 1 ;
39628: LD_ADDR_VAR 0 8
39632: PUSH
39633: LD_VAR 0 8
39637: PUSH
39638: LD_INT 1
39640: NEG
39641: MUL
39642: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39643: LD_VAR 0 8
39647: PUSH
39648: LD_INT 35
39650: PPUSH
39651: LD_INT 875
39653: PPUSH
39654: CALL_OW 12
39658: PLUS
39659: PPUSH
39660: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39664: LD_INT 1
39666: PPUSH
39667: LD_INT 5
39669: PPUSH
39670: CALL_OW 12
39674: PPUSH
39675: LD_VAR 0 1
39679: PPUSH
39680: LD_INT 1
39682: PPUSH
39683: CALL_OW 55
// end ;
39687: GO 39500
// end ;
39689: LD_VAR 0 5
39693: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39694: LD_INT 0
39696: PPUSH
39697: PPUSH
39698: PPUSH
39699: PPUSH
39700: PPUSH
39701: PPUSH
39702: PPUSH
39703: PPUSH
// if not turrets or not factories then
39704: LD_VAR 0 1
39708: NOT
39709: PUSH
39710: LD_VAR 0 2
39714: NOT
39715: OR
39716: IFFALSE 39720
// exit ;
39718: GO 40027
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39720: LD_ADDR_VAR 0 10
39724: PUSH
39725: LD_INT 5
39727: PUSH
39728: LD_INT 6
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 2
39737: PUSH
39738: LD_INT 4
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 3
39747: PUSH
39748: LD_INT 5
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 24
39762: PUSH
39763: LD_INT 25
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 23
39772: PUSH
39773: LD_INT 27
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 42
39786: PUSH
39787: LD_INT 43
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 44
39796: PUSH
39797: LD_INT 46
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 45
39806: PUSH
39807: LD_INT 47
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: LIST
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: LIST
39823: ST_TO_ADDR
// result := [ ] ;
39824: LD_ADDR_VAR 0 3
39828: PUSH
39829: EMPTY
39830: ST_TO_ADDR
// for i in turrets do
39831: LD_ADDR_VAR 0 4
39835: PUSH
39836: LD_VAR 0 1
39840: PUSH
39841: FOR_IN
39842: IFFALSE 40025
// begin nat := GetNation ( i ) ;
39844: LD_ADDR_VAR 0 7
39848: PUSH
39849: LD_VAR 0 4
39853: PPUSH
39854: CALL_OW 248
39858: ST_TO_ADDR
// weapon := 0 ;
39859: LD_ADDR_VAR 0 8
39863: PUSH
39864: LD_INT 0
39866: ST_TO_ADDR
// if not nat then
39867: LD_VAR 0 7
39871: NOT
39872: IFFALSE 39876
// continue ;
39874: GO 39841
// for j in list [ nat ] do
39876: LD_ADDR_VAR 0 5
39880: PUSH
39881: LD_VAR 0 10
39885: PUSH
39886: LD_VAR 0 7
39890: ARRAY
39891: PUSH
39892: FOR_IN
39893: IFFALSE 39934
// if GetBWeapon ( i ) = j [ 1 ] then
39895: LD_VAR 0 4
39899: PPUSH
39900: CALL_OW 269
39904: PUSH
39905: LD_VAR 0 5
39909: PUSH
39910: LD_INT 1
39912: ARRAY
39913: EQUAL
39914: IFFALSE 39932
// begin weapon := j [ 2 ] ;
39916: LD_ADDR_VAR 0 8
39920: PUSH
39921: LD_VAR 0 5
39925: PUSH
39926: LD_INT 2
39928: ARRAY
39929: ST_TO_ADDR
// break ;
39930: GO 39934
// end ;
39932: GO 39892
39934: POP
39935: POP
// if not weapon then
39936: LD_VAR 0 8
39940: NOT
39941: IFFALSE 39945
// continue ;
39943: GO 39841
// for k in factories do
39945: LD_ADDR_VAR 0 6
39949: PUSH
39950: LD_VAR 0 2
39954: PUSH
39955: FOR_IN
39956: IFFALSE 40021
// begin weapons := AvailableWeaponList ( k ) ;
39958: LD_ADDR_VAR 0 9
39962: PUSH
39963: LD_VAR 0 6
39967: PPUSH
39968: CALL_OW 478
39972: ST_TO_ADDR
// if not weapons then
39973: LD_VAR 0 9
39977: NOT
39978: IFFALSE 39982
// continue ;
39980: GO 39955
// if weapon in weapons then
39982: LD_VAR 0 8
39986: PUSH
39987: LD_VAR 0 9
39991: IN
39992: IFFALSE 40019
// begin result := [ i , weapon ] ;
39994: LD_ADDR_VAR 0 3
39998: PUSH
39999: LD_VAR 0 4
40003: PUSH
40004: LD_VAR 0 8
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: ST_TO_ADDR
// exit ;
40013: POP
40014: POP
40015: POP
40016: POP
40017: GO 40027
// end ; end ;
40019: GO 39955
40021: POP
40022: POP
// end ;
40023: GO 39841
40025: POP
40026: POP
// end ;
40027: LD_VAR 0 3
40031: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40032: LD_INT 0
40034: PPUSH
// if not side or side > 8 then
40035: LD_VAR 0 3
40039: NOT
40040: PUSH
40041: LD_VAR 0 3
40045: PUSH
40046: LD_INT 8
40048: GREATER
40049: OR
40050: IFFALSE 40054
// exit ;
40052: GO 40113
// if not range then
40054: LD_VAR 0 4
40058: NOT
40059: IFFALSE 40070
// range := - 12 ;
40061: LD_ADDR_VAR 0 4
40065: PUSH
40066: LD_INT 12
40068: NEG
40069: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40070: LD_VAR 0 1
40074: PPUSH
40075: LD_VAR 0 2
40079: PPUSH
40080: LD_VAR 0 3
40084: PPUSH
40085: LD_VAR 0 4
40089: PPUSH
40090: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40094: LD_VAR 0 1
40098: PPUSH
40099: LD_VAR 0 2
40103: PPUSH
40104: LD_VAR 0 3
40108: PPUSH
40109: CALL_OW 331
// end ;
40113: LD_VAR 0 5
40117: RET
// export function Video ( mode ) ; begin
40118: LD_INT 0
40120: PPUSH
// ingame_video = mode ;
40121: LD_ADDR_OWVAR 52
40125: PUSH
40126: LD_VAR 0 1
40130: ST_TO_ADDR
// interface_hidden = mode ;
40131: LD_ADDR_OWVAR 54
40135: PUSH
40136: LD_VAR 0 1
40140: ST_TO_ADDR
// end ;
40141: LD_VAR 0 2
40145: RET
// export function Join ( array , element ) ; begin
40146: LD_INT 0
40148: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40149: LD_ADDR_VAR 0 3
40153: PUSH
40154: LD_VAR 0 1
40158: PPUSH
40159: LD_VAR 0 1
40163: PUSH
40164: LD_INT 1
40166: PLUS
40167: PPUSH
40168: LD_VAR 0 2
40172: PPUSH
40173: CALL_OW 1
40177: ST_TO_ADDR
// end ;
40178: LD_VAR 0 3
40182: RET
// export function JoinUnion ( array , element ) ; begin
40183: LD_INT 0
40185: PPUSH
// result := array union element ;
40186: LD_ADDR_VAR 0 3
40190: PUSH
40191: LD_VAR 0 1
40195: PUSH
40196: LD_VAR 0 2
40200: UNION
40201: ST_TO_ADDR
// end ;
40202: LD_VAR 0 3
40206: RET
// export function GetBehemoths ( side ) ; begin
40207: LD_INT 0
40209: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40210: LD_ADDR_VAR 0 2
40214: PUSH
40215: LD_INT 22
40217: PUSH
40218: LD_VAR 0 1
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 31
40229: PUSH
40230: LD_INT 25
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PPUSH
40241: CALL_OW 69
40245: ST_TO_ADDR
// end ;
40246: LD_VAR 0 2
40250: RET
// export function Shuffle ( array ) ; var i , index ; begin
40251: LD_INT 0
40253: PPUSH
40254: PPUSH
40255: PPUSH
// result := [ ] ;
40256: LD_ADDR_VAR 0 2
40260: PUSH
40261: EMPTY
40262: ST_TO_ADDR
// if not array then
40263: LD_VAR 0 1
40267: NOT
40268: IFFALSE 40272
// exit ;
40270: GO 40371
// Randomize ;
40272: CALL_OW 10
// for i = array downto 1 do
40276: LD_ADDR_VAR 0 3
40280: PUSH
40281: DOUBLE
40282: LD_VAR 0 1
40286: INC
40287: ST_TO_ADDR
40288: LD_INT 1
40290: PUSH
40291: FOR_DOWNTO
40292: IFFALSE 40369
// begin index := rand ( 1 , array ) ;
40294: LD_ADDR_VAR 0 4
40298: PUSH
40299: LD_INT 1
40301: PPUSH
40302: LD_VAR 0 1
40306: PPUSH
40307: CALL_OW 12
40311: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40312: LD_ADDR_VAR 0 2
40316: PUSH
40317: LD_VAR 0 2
40321: PPUSH
40322: LD_VAR 0 2
40326: PUSH
40327: LD_INT 1
40329: PLUS
40330: PPUSH
40331: LD_VAR 0 1
40335: PUSH
40336: LD_VAR 0 4
40340: ARRAY
40341: PPUSH
40342: CALL_OW 2
40346: ST_TO_ADDR
// array := Delete ( array , index ) ;
40347: LD_ADDR_VAR 0 1
40351: PUSH
40352: LD_VAR 0 1
40356: PPUSH
40357: LD_VAR 0 4
40361: PPUSH
40362: CALL_OW 3
40366: ST_TO_ADDR
// end ;
40367: GO 40291
40369: POP
40370: POP
// end ;
40371: LD_VAR 0 2
40375: RET
// export function GetBaseMaterials ( base ) ; begin
40376: LD_INT 0
40378: PPUSH
// result := [ 0 , 0 , 0 ] ;
40379: LD_ADDR_VAR 0 2
40383: PUSH
40384: LD_INT 0
40386: PUSH
40387: LD_INT 0
40389: PUSH
40390: LD_INT 0
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: LIST
40397: ST_TO_ADDR
// if not base then
40398: LD_VAR 0 1
40402: NOT
40403: IFFALSE 40407
// exit ;
40405: GO 40456
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40407: LD_ADDR_VAR 0 2
40411: PUSH
40412: LD_VAR 0 1
40416: PPUSH
40417: LD_INT 1
40419: PPUSH
40420: CALL_OW 275
40424: PUSH
40425: LD_VAR 0 1
40429: PPUSH
40430: LD_INT 2
40432: PPUSH
40433: CALL_OW 275
40437: PUSH
40438: LD_VAR 0 1
40442: PPUSH
40443: LD_INT 3
40445: PPUSH
40446: CALL_OW 275
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: LIST
40455: ST_TO_ADDR
// end ;
40456: LD_VAR 0 2
40460: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40461: LD_INT 0
40463: PPUSH
40464: PPUSH
// result := array ;
40465: LD_ADDR_VAR 0 3
40469: PUSH
40470: LD_VAR 0 1
40474: ST_TO_ADDR
// if size >= result then
40475: LD_VAR 0 2
40479: PUSH
40480: LD_VAR 0 3
40484: GREATEREQUAL
40485: IFFALSE 40489
// exit ;
40487: GO 40539
// if size then
40489: LD_VAR 0 2
40493: IFFALSE 40539
// for i := array downto size do
40495: LD_ADDR_VAR 0 4
40499: PUSH
40500: DOUBLE
40501: LD_VAR 0 1
40505: INC
40506: ST_TO_ADDR
40507: LD_VAR 0 2
40511: PUSH
40512: FOR_DOWNTO
40513: IFFALSE 40537
// result := Delete ( result , result ) ;
40515: LD_ADDR_VAR 0 3
40519: PUSH
40520: LD_VAR 0 3
40524: PPUSH
40525: LD_VAR 0 3
40529: PPUSH
40530: CALL_OW 3
40534: ST_TO_ADDR
40535: GO 40512
40537: POP
40538: POP
// end ;
40539: LD_VAR 0 3
40543: RET
// export function ComExit ( unit ) ; var tmp ; begin
40544: LD_INT 0
40546: PPUSH
40547: PPUSH
// if not IsInUnit ( unit ) then
40548: LD_VAR 0 1
40552: PPUSH
40553: CALL_OW 310
40557: NOT
40558: IFFALSE 40562
// exit ;
40560: GO 40622
// tmp := IsInUnit ( unit ) ;
40562: LD_ADDR_VAR 0 3
40566: PUSH
40567: LD_VAR 0 1
40571: PPUSH
40572: CALL_OW 310
40576: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40577: LD_VAR 0 3
40581: PPUSH
40582: CALL_OW 247
40586: PUSH
40587: LD_INT 2
40589: EQUAL
40590: IFFALSE 40603
// ComExitVehicle ( unit ) else
40592: LD_VAR 0 1
40596: PPUSH
40597: CALL_OW 121
40601: GO 40612
// ComExitBuilding ( unit ) ;
40603: LD_VAR 0 1
40607: PPUSH
40608: CALL_OW 122
// result := tmp ;
40612: LD_ADDR_VAR 0 2
40616: PUSH
40617: LD_VAR 0 3
40621: ST_TO_ADDR
// end ;
40622: LD_VAR 0 2
40626: RET
// export function ComExitAll ( units ) ; var i ; begin
40627: LD_INT 0
40629: PPUSH
40630: PPUSH
// if not units then
40631: LD_VAR 0 1
40635: NOT
40636: IFFALSE 40640
// exit ;
40638: GO 40666
// for i in units do
40640: LD_ADDR_VAR 0 3
40644: PUSH
40645: LD_VAR 0 1
40649: PUSH
40650: FOR_IN
40651: IFFALSE 40664
// ComExit ( i ) ;
40653: LD_VAR 0 3
40657: PPUSH
40658: CALL 40544 0 1
40662: GO 40650
40664: POP
40665: POP
// end ;
40666: LD_VAR 0 2
40670: RET
// export function ResetHc ; begin
40671: LD_INT 0
40673: PPUSH
// InitHc ;
40674: CALL_OW 19
// hc_importance := 0 ;
40678: LD_ADDR_OWVAR 32
40682: PUSH
40683: LD_INT 0
40685: ST_TO_ADDR
// end ;
40686: LD_VAR 0 1
40690: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40691: LD_INT 0
40693: PPUSH
40694: PPUSH
40695: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40696: LD_ADDR_VAR 0 6
40700: PUSH
40701: LD_VAR 0 1
40705: PUSH
40706: LD_VAR 0 3
40710: PLUS
40711: PUSH
40712: LD_INT 2
40714: DIV
40715: ST_TO_ADDR
// if _x < 0 then
40716: LD_VAR 0 6
40720: PUSH
40721: LD_INT 0
40723: LESS
40724: IFFALSE 40741
// _x := _x * - 1 ;
40726: LD_ADDR_VAR 0 6
40730: PUSH
40731: LD_VAR 0 6
40735: PUSH
40736: LD_INT 1
40738: NEG
40739: MUL
40740: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40741: LD_ADDR_VAR 0 7
40745: PUSH
40746: LD_VAR 0 2
40750: PUSH
40751: LD_VAR 0 4
40755: PLUS
40756: PUSH
40757: LD_INT 2
40759: DIV
40760: ST_TO_ADDR
// if _y < 0 then
40761: LD_VAR 0 7
40765: PUSH
40766: LD_INT 0
40768: LESS
40769: IFFALSE 40786
// _y := _y * - 1 ;
40771: LD_ADDR_VAR 0 7
40775: PUSH
40776: LD_VAR 0 7
40780: PUSH
40781: LD_INT 1
40783: NEG
40784: MUL
40785: ST_TO_ADDR
// result := [ _x , _y ] ;
40786: LD_ADDR_VAR 0 5
40790: PUSH
40791: LD_VAR 0 6
40795: PUSH
40796: LD_VAR 0 7
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: ST_TO_ADDR
// end ;
40805: LD_VAR 0 5
40809: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40810: LD_INT 0
40812: PPUSH
40813: PPUSH
40814: PPUSH
40815: PPUSH
// task := GetTaskList ( unit ) ;
40816: LD_ADDR_VAR 0 7
40820: PUSH
40821: LD_VAR 0 1
40825: PPUSH
40826: CALL_OW 437
40830: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40831: LD_VAR 0 7
40835: NOT
40836: PUSH
40837: LD_VAR 0 1
40841: PPUSH
40842: LD_VAR 0 2
40846: PPUSH
40847: CALL_OW 308
40851: NOT
40852: AND
40853: IFFALSE 40857
// exit ;
40855: GO 40975
// if IsInArea ( unit , area ) then
40857: LD_VAR 0 1
40861: PPUSH
40862: LD_VAR 0 2
40866: PPUSH
40867: CALL_OW 308
40871: IFFALSE 40889
// begin ComMoveToArea ( unit , goAway ) ;
40873: LD_VAR 0 1
40877: PPUSH
40878: LD_VAR 0 3
40882: PPUSH
40883: CALL_OW 113
// exit ;
40887: GO 40975
// end ; if task [ 1 ] [ 1 ] <> M then
40889: LD_VAR 0 7
40893: PUSH
40894: LD_INT 1
40896: ARRAY
40897: PUSH
40898: LD_INT 1
40900: ARRAY
40901: PUSH
40902: LD_STRING M
40904: NONEQUAL
40905: IFFALSE 40909
// exit ;
40907: GO 40975
// x := task [ 1 ] [ 2 ] ;
40909: LD_ADDR_VAR 0 5
40913: PUSH
40914: LD_VAR 0 7
40918: PUSH
40919: LD_INT 1
40921: ARRAY
40922: PUSH
40923: LD_INT 2
40925: ARRAY
40926: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40927: LD_ADDR_VAR 0 6
40931: PUSH
40932: LD_VAR 0 7
40936: PUSH
40937: LD_INT 1
40939: ARRAY
40940: PUSH
40941: LD_INT 3
40943: ARRAY
40944: ST_TO_ADDR
// if InArea ( x , y , area ) then
40945: LD_VAR 0 5
40949: PPUSH
40950: LD_VAR 0 6
40954: PPUSH
40955: LD_VAR 0 2
40959: PPUSH
40960: CALL_OW 309
40964: IFFALSE 40975
// ComStop ( unit ) ;
40966: LD_VAR 0 1
40970: PPUSH
40971: CALL_OW 141
// end ;
40975: LD_VAR 0 4
40979: RET
// export function Abs ( value ) ; begin
40980: LD_INT 0
40982: PPUSH
// result := value ;
40983: LD_ADDR_VAR 0 2
40987: PUSH
40988: LD_VAR 0 1
40992: ST_TO_ADDR
// if value < 0 then
40993: LD_VAR 0 1
40997: PUSH
40998: LD_INT 0
41000: LESS
41001: IFFALSE 41018
// result := value * - 1 ;
41003: LD_ADDR_VAR 0 2
41007: PUSH
41008: LD_VAR 0 1
41012: PUSH
41013: LD_INT 1
41015: NEG
41016: MUL
41017: ST_TO_ADDR
// end ;
41018: LD_VAR 0 2
41022: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41023: LD_INT 0
41025: PPUSH
41026: PPUSH
41027: PPUSH
41028: PPUSH
41029: PPUSH
41030: PPUSH
41031: PPUSH
41032: PPUSH
// if not unit or not building then
41033: LD_VAR 0 1
41037: NOT
41038: PUSH
41039: LD_VAR 0 2
41043: NOT
41044: OR
41045: IFFALSE 41049
// exit ;
41047: GO 41275
// x := GetX ( building ) ;
41049: LD_ADDR_VAR 0 4
41053: PUSH
41054: LD_VAR 0 2
41058: PPUSH
41059: CALL_OW 250
41063: ST_TO_ADDR
// y := GetY ( building ) ;
41064: LD_ADDR_VAR 0 6
41068: PUSH
41069: LD_VAR 0 2
41073: PPUSH
41074: CALL_OW 251
41078: ST_TO_ADDR
// d := GetDir ( building ) ;
41079: LD_ADDR_VAR 0 8
41083: PUSH
41084: LD_VAR 0 2
41088: PPUSH
41089: CALL_OW 254
41093: ST_TO_ADDR
// r := 4 ;
41094: LD_ADDR_VAR 0 9
41098: PUSH
41099: LD_INT 4
41101: ST_TO_ADDR
// for i := 1 to 5 do
41102: LD_ADDR_VAR 0 10
41106: PUSH
41107: DOUBLE
41108: LD_INT 1
41110: DEC
41111: ST_TO_ADDR
41112: LD_INT 5
41114: PUSH
41115: FOR_TO
41116: IFFALSE 41273
// begin _x := ShiftX ( x , d , r + i ) ;
41118: LD_ADDR_VAR 0 5
41122: PUSH
41123: LD_VAR 0 4
41127: PPUSH
41128: LD_VAR 0 8
41132: PPUSH
41133: LD_VAR 0 9
41137: PUSH
41138: LD_VAR 0 10
41142: PLUS
41143: PPUSH
41144: CALL_OW 272
41148: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41149: LD_ADDR_VAR 0 7
41153: PUSH
41154: LD_VAR 0 6
41158: PPUSH
41159: LD_VAR 0 8
41163: PPUSH
41164: LD_VAR 0 9
41168: PUSH
41169: LD_VAR 0 10
41173: PLUS
41174: PPUSH
41175: CALL_OW 273
41179: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41180: LD_VAR 0 5
41184: PPUSH
41185: LD_VAR 0 7
41189: PPUSH
41190: CALL_OW 488
41194: PUSH
41195: LD_VAR 0 5
41199: PPUSH
41200: LD_VAR 0 7
41204: PPUSH
41205: CALL_OW 428
41209: PPUSH
41210: CALL_OW 247
41214: PUSH
41215: LD_INT 3
41217: PUSH
41218: LD_INT 2
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: IN
41225: NOT
41226: AND
41227: IFFALSE 41271
// begin ComMoveXY ( unit , _x , _y ) ;
41229: LD_VAR 0 1
41233: PPUSH
41234: LD_VAR 0 5
41238: PPUSH
41239: LD_VAR 0 7
41243: PPUSH
41244: CALL_OW 111
// result := [ _x , _y ] ;
41248: LD_ADDR_VAR 0 3
41252: PUSH
41253: LD_VAR 0 5
41257: PUSH
41258: LD_VAR 0 7
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: ST_TO_ADDR
// exit ;
41267: POP
41268: POP
41269: GO 41275
// end ; end ;
41271: GO 41115
41273: POP
41274: POP
// end ;
41275: LD_VAR 0 3
41279: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41280: LD_INT 0
41282: PPUSH
41283: PPUSH
41284: PPUSH
// result := 0 ;
41285: LD_ADDR_VAR 0 3
41289: PUSH
41290: LD_INT 0
41292: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41293: LD_VAR 0 1
41297: PUSH
41298: LD_INT 0
41300: LESS
41301: PUSH
41302: LD_VAR 0 1
41306: PUSH
41307: LD_INT 8
41309: GREATER
41310: OR
41311: PUSH
41312: LD_VAR 0 2
41316: PUSH
41317: LD_INT 0
41319: LESS
41320: OR
41321: PUSH
41322: LD_VAR 0 2
41326: PUSH
41327: LD_INT 8
41329: GREATER
41330: OR
41331: IFFALSE 41335
// exit ;
41333: GO 41410
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41335: LD_ADDR_VAR 0 4
41339: PUSH
41340: LD_INT 22
41342: PUSH
41343: LD_VAR 0 2
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PPUSH
41352: CALL_OW 69
41356: PUSH
41357: FOR_IN
41358: IFFALSE 41408
// begin un := UnitShoot ( i ) ;
41360: LD_ADDR_VAR 0 5
41364: PUSH
41365: LD_VAR 0 4
41369: PPUSH
41370: CALL_OW 504
41374: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41375: LD_VAR 0 5
41379: PPUSH
41380: CALL_OW 255
41384: PUSH
41385: LD_VAR 0 1
41389: EQUAL
41390: IFFALSE 41406
// begin result := un ;
41392: LD_ADDR_VAR 0 3
41396: PUSH
41397: LD_VAR 0 5
41401: ST_TO_ADDR
// exit ;
41402: POP
41403: POP
41404: GO 41410
// end ; end ;
41406: GO 41357
41408: POP
41409: POP
// end ;
41410: LD_VAR 0 3
41414: RET
// export function GetCargoBay ( units ) ; begin
41415: LD_INT 0
41417: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41418: LD_ADDR_VAR 0 2
41422: PUSH
41423: LD_VAR 0 1
41427: PPUSH
41428: LD_INT 2
41430: PUSH
41431: LD_INT 34
41433: PUSH
41434: LD_INT 12
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 34
41443: PUSH
41444: LD_INT 51
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 34
41453: PUSH
41454: LD_INT 32
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 34
41463: PUSH
41464: LD_INT 89
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: PPUSH
41478: CALL_OW 72
41482: ST_TO_ADDR
// end ;
41483: LD_VAR 0 2
41487: RET
// export function Negate ( value ) ; begin
41488: LD_INT 0
41490: PPUSH
// result := not value ;
41491: LD_ADDR_VAR 0 2
41495: PUSH
41496: LD_VAR 0 1
41500: NOT
41501: ST_TO_ADDR
// end ;
41502: LD_VAR 0 2
41506: RET
// export function Inc ( value ) ; begin
41507: LD_INT 0
41509: PPUSH
// result := value + 1 ;
41510: LD_ADDR_VAR 0 2
41514: PUSH
41515: LD_VAR 0 1
41519: PUSH
41520: LD_INT 1
41522: PLUS
41523: ST_TO_ADDR
// end ;
41524: LD_VAR 0 2
41528: RET
// export function Dec ( value ) ; begin
41529: LD_INT 0
41531: PPUSH
// result := value - 1 ;
41532: LD_ADDR_VAR 0 2
41536: PUSH
41537: LD_VAR 0 1
41541: PUSH
41542: LD_INT 1
41544: MINUS
41545: ST_TO_ADDR
// end ;
41546: LD_VAR 0 2
41550: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41551: LD_INT 0
41553: PPUSH
41554: PPUSH
41555: PPUSH
41556: PPUSH
41557: PPUSH
41558: PPUSH
41559: PPUSH
41560: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41561: LD_VAR 0 1
41565: PPUSH
41566: LD_VAR 0 2
41570: PPUSH
41571: CALL_OW 488
41575: NOT
41576: PUSH
41577: LD_VAR 0 3
41581: PPUSH
41582: LD_VAR 0 4
41586: PPUSH
41587: CALL_OW 488
41591: NOT
41592: OR
41593: IFFALSE 41606
// begin result := - 1 ;
41595: LD_ADDR_VAR 0 5
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: ST_TO_ADDR
// exit ;
41604: GO 41841
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41606: LD_ADDR_VAR 0 12
41610: PUSH
41611: LD_VAR 0 1
41615: PPUSH
41616: LD_VAR 0 2
41620: PPUSH
41621: LD_VAR 0 3
41625: PPUSH
41626: LD_VAR 0 4
41630: PPUSH
41631: CALL 40691 0 4
41635: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41636: LD_ADDR_VAR 0 11
41640: PUSH
41641: LD_VAR 0 1
41645: PPUSH
41646: LD_VAR 0 2
41650: PPUSH
41651: LD_VAR 0 12
41655: PUSH
41656: LD_INT 1
41658: ARRAY
41659: PPUSH
41660: LD_VAR 0 12
41664: PUSH
41665: LD_INT 2
41667: ARRAY
41668: PPUSH
41669: CALL_OW 298
41673: ST_TO_ADDR
// distance := 9999 ;
41674: LD_ADDR_VAR 0 10
41678: PUSH
41679: LD_INT 9999
41681: ST_TO_ADDR
// for i := 0 to 5 do
41682: LD_ADDR_VAR 0 6
41686: PUSH
41687: DOUBLE
41688: LD_INT 0
41690: DEC
41691: ST_TO_ADDR
41692: LD_INT 5
41694: PUSH
41695: FOR_TO
41696: IFFALSE 41839
// begin _x := ShiftX ( x1 , i , centerDist ) ;
41698: LD_ADDR_VAR 0 7
41702: PUSH
41703: LD_VAR 0 1
41707: PPUSH
41708: LD_VAR 0 6
41712: PPUSH
41713: LD_VAR 0 11
41717: PPUSH
41718: CALL_OW 272
41722: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41723: LD_ADDR_VAR 0 8
41727: PUSH
41728: LD_VAR 0 2
41732: PPUSH
41733: LD_VAR 0 6
41737: PPUSH
41738: LD_VAR 0 11
41742: PPUSH
41743: CALL_OW 273
41747: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41748: LD_VAR 0 7
41752: PPUSH
41753: LD_VAR 0 8
41757: PPUSH
41758: CALL_OW 488
41762: NOT
41763: IFFALSE 41767
// continue ;
41765: GO 41695
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41767: LD_ADDR_VAR 0 9
41771: PUSH
41772: LD_VAR 0 12
41776: PUSH
41777: LD_INT 1
41779: ARRAY
41780: PPUSH
41781: LD_VAR 0 12
41785: PUSH
41786: LD_INT 2
41788: ARRAY
41789: PPUSH
41790: LD_VAR 0 7
41794: PPUSH
41795: LD_VAR 0 8
41799: PPUSH
41800: CALL_OW 298
41804: ST_TO_ADDR
// if tmp < distance then
41805: LD_VAR 0 9
41809: PUSH
41810: LD_VAR 0 10
41814: LESS
41815: IFFALSE 41837
// begin result := i ;
41817: LD_ADDR_VAR 0 5
41821: PUSH
41822: LD_VAR 0 6
41826: ST_TO_ADDR
// distance := tmp ;
41827: LD_ADDR_VAR 0 10
41831: PUSH
41832: LD_VAR 0 9
41836: ST_TO_ADDR
// end ; end ;
41837: GO 41695
41839: POP
41840: POP
// end ;
41841: LD_VAR 0 5
41845: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41846: LD_INT 0
41848: PPUSH
41849: PPUSH
// if not driver or not IsInUnit ( driver ) then
41850: LD_VAR 0 1
41854: NOT
41855: PUSH
41856: LD_VAR 0 1
41860: PPUSH
41861: CALL_OW 310
41865: NOT
41866: OR
41867: IFFALSE 41871
// exit ;
41869: GO 41961
// vehicle := IsInUnit ( driver ) ;
41871: LD_ADDR_VAR 0 3
41875: PUSH
41876: LD_VAR 0 1
41880: PPUSH
41881: CALL_OW 310
41885: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41886: LD_VAR 0 1
41890: PPUSH
41891: LD_STRING \
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: LD_INT 0
41899: PUSH
41900: LD_INT 0
41902: PUSH
41903: LD_INT 0
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: LD_INT 0
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: PUSH
41921: LD_STRING E
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: LD_INT 0
41929: PUSH
41930: LD_VAR 0 3
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: LD_INT 0
41940: PUSH
41941: LD_INT 0
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PPUSH
41957: CALL_OW 446
// end ;
41961: LD_VAR 0 2
41965: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41966: LD_INT 0
41968: PPUSH
41969: PPUSH
// if not driver or not IsInUnit ( driver ) then
41970: LD_VAR 0 1
41974: NOT
41975: PUSH
41976: LD_VAR 0 1
41980: PPUSH
41981: CALL_OW 310
41985: NOT
41986: OR
41987: IFFALSE 41991
// exit ;
41989: GO 42081
// vehicle := IsInUnit ( driver ) ;
41991: LD_ADDR_VAR 0 3
41995: PUSH
41996: LD_VAR 0 1
42000: PPUSH
42001: CALL_OW 310
42005: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42006: LD_VAR 0 1
42010: PPUSH
42011: LD_STRING \
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: LD_INT 0
42025: PUSH
42026: LD_INT 0
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: PUSH
42041: LD_STRING E
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: LD_INT 0
42049: PUSH
42050: LD_VAR 0 3
42054: PUSH
42055: LD_INT 0
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PPUSH
42077: CALL_OW 447
// end ;
42081: LD_VAR 0 2
42085: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42086: LD_INT 0
42088: PPUSH
42089: PPUSH
42090: PPUSH
// tmp := [ ] ;
42091: LD_ADDR_VAR 0 5
42095: PUSH
42096: EMPTY
42097: ST_TO_ADDR
// for i in units do
42098: LD_ADDR_VAR 0 4
42102: PUSH
42103: LD_VAR 0 1
42107: PUSH
42108: FOR_IN
42109: IFFALSE 42147
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42111: LD_ADDR_VAR 0 5
42115: PUSH
42116: LD_VAR 0 5
42120: PPUSH
42121: LD_VAR 0 5
42125: PUSH
42126: LD_INT 1
42128: PLUS
42129: PPUSH
42130: LD_VAR 0 4
42134: PPUSH
42135: CALL_OW 256
42139: PPUSH
42140: CALL_OW 2
42144: ST_TO_ADDR
42145: GO 42108
42147: POP
42148: POP
// if not tmp then
42149: LD_VAR 0 5
42153: NOT
42154: IFFALSE 42158
// exit ;
42156: GO 42206
// if asc then
42158: LD_VAR 0 2
42162: IFFALSE 42186
// result := SortListByListAsc ( units , tmp ) else
42164: LD_ADDR_VAR 0 3
42168: PUSH
42169: LD_VAR 0 1
42173: PPUSH
42174: LD_VAR 0 5
42178: PPUSH
42179: CALL_OW 76
42183: ST_TO_ADDR
42184: GO 42206
// result := SortListByListDesc ( units , tmp ) ;
42186: LD_ADDR_VAR 0 3
42190: PUSH
42191: LD_VAR 0 1
42195: PPUSH
42196: LD_VAR 0 5
42200: PPUSH
42201: CALL_OW 77
42205: ST_TO_ADDR
// end ;
42206: LD_VAR 0 3
42210: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42211: LD_INT 0
42213: PPUSH
42214: PPUSH
// task := GetTaskList ( mech ) ;
42215: LD_ADDR_VAR 0 4
42219: PUSH
42220: LD_VAR 0 1
42224: PPUSH
42225: CALL_OW 437
42229: ST_TO_ADDR
// if not task then
42230: LD_VAR 0 4
42234: NOT
42235: IFFALSE 42239
// exit ;
42237: GO 42281
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42239: LD_ADDR_VAR 0 3
42243: PUSH
42244: LD_VAR 0 4
42248: PUSH
42249: LD_INT 1
42251: ARRAY
42252: PUSH
42253: LD_INT 1
42255: ARRAY
42256: PUSH
42257: LD_STRING r
42259: EQUAL
42260: PUSH
42261: LD_VAR 0 4
42265: PUSH
42266: LD_INT 1
42268: ARRAY
42269: PUSH
42270: LD_INT 4
42272: ARRAY
42273: PUSH
42274: LD_VAR 0 2
42278: EQUAL
42279: AND
42280: ST_TO_ADDR
// end ;
42281: LD_VAR 0 3
42285: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42286: LD_INT 0
42288: PPUSH
// SetDir ( unit , d ) ;
42289: LD_VAR 0 1
42293: PPUSH
42294: LD_VAR 0 4
42298: PPUSH
42299: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42303: LD_VAR 0 1
42307: PPUSH
42308: LD_VAR 0 2
42312: PPUSH
42313: LD_VAR 0 3
42317: PPUSH
42318: LD_VAR 0 5
42322: PPUSH
42323: CALL_OW 48
// end ;
42327: LD_VAR 0 6
42331: RET
// export function ToNaturalNumber ( number ) ; begin
42332: LD_INT 0
42334: PPUSH
// result := number div 1 ;
42335: LD_ADDR_VAR 0 2
42339: PUSH
42340: LD_VAR 0 1
42344: PUSH
42345: LD_INT 1
42347: DIV
42348: ST_TO_ADDR
// if number < 0 then
42349: LD_VAR 0 1
42353: PUSH
42354: LD_INT 0
42356: LESS
42357: IFFALSE 42367
// result := 0 ;
42359: LD_ADDR_VAR 0 2
42363: PUSH
42364: LD_INT 0
42366: ST_TO_ADDR
// end ;
42367: LD_VAR 0 2
42371: RET
// export function SortByClass ( units , class ) ; var un ; begin
42372: LD_INT 0
42374: PPUSH
42375: PPUSH
// if not units or not class then
42376: LD_VAR 0 1
42380: NOT
42381: PUSH
42382: LD_VAR 0 2
42386: NOT
42387: OR
42388: IFFALSE 42392
// exit ;
42390: GO 42487
// result := [ ] ;
42392: LD_ADDR_VAR 0 3
42396: PUSH
42397: EMPTY
42398: ST_TO_ADDR
// for un in units do
42399: LD_ADDR_VAR 0 4
42403: PUSH
42404: LD_VAR 0 1
42408: PUSH
42409: FOR_IN
42410: IFFALSE 42485
// if GetClass ( un ) = class then
42412: LD_VAR 0 4
42416: PPUSH
42417: CALL_OW 257
42421: PUSH
42422: LD_VAR 0 2
42426: EQUAL
42427: IFFALSE 42454
// result := Insert ( result , 1 , un ) else
42429: LD_ADDR_VAR 0 3
42433: PUSH
42434: LD_VAR 0 3
42438: PPUSH
42439: LD_INT 1
42441: PPUSH
42442: LD_VAR 0 4
42446: PPUSH
42447: CALL_OW 2
42451: ST_TO_ADDR
42452: GO 42483
// result := Replace ( result , result + 1 , un ) ;
42454: LD_ADDR_VAR 0 3
42458: PUSH
42459: LD_VAR 0 3
42463: PPUSH
42464: LD_VAR 0 3
42468: PUSH
42469: LD_INT 1
42471: PLUS
42472: PPUSH
42473: LD_VAR 0 4
42477: PPUSH
42478: CALL_OW 1
42482: ST_TO_ADDR
42483: GO 42409
42485: POP
42486: POP
// end ;
42487: LD_VAR 0 3
42491: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42492: LD_INT 0
42494: PPUSH
42495: PPUSH
42496: PPUSH
42497: PPUSH
42498: PPUSH
42499: PPUSH
42500: PPUSH
// result := [ ] ;
42501: LD_ADDR_VAR 0 4
42505: PUSH
42506: EMPTY
42507: ST_TO_ADDR
// if x - r < 0 then
42508: LD_VAR 0 1
42512: PUSH
42513: LD_VAR 0 3
42517: MINUS
42518: PUSH
42519: LD_INT 0
42521: LESS
42522: IFFALSE 42534
// min_x := 0 else
42524: LD_ADDR_VAR 0 8
42528: PUSH
42529: LD_INT 0
42531: ST_TO_ADDR
42532: GO 42550
// min_x := x - r ;
42534: LD_ADDR_VAR 0 8
42538: PUSH
42539: LD_VAR 0 1
42543: PUSH
42544: LD_VAR 0 3
42548: MINUS
42549: ST_TO_ADDR
// if y - r < 0 then
42550: LD_VAR 0 2
42554: PUSH
42555: LD_VAR 0 3
42559: MINUS
42560: PUSH
42561: LD_INT 0
42563: LESS
42564: IFFALSE 42576
// min_y := 0 else
42566: LD_ADDR_VAR 0 7
42570: PUSH
42571: LD_INT 0
42573: ST_TO_ADDR
42574: GO 42592
// min_y := y - r ;
42576: LD_ADDR_VAR 0 7
42580: PUSH
42581: LD_VAR 0 2
42585: PUSH
42586: LD_VAR 0 3
42590: MINUS
42591: ST_TO_ADDR
// max_x := x + r ;
42592: LD_ADDR_VAR 0 9
42596: PUSH
42597: LD_VAR 0 1
42601: PUSH
42602: LD_VAR 0 3
42606: PLUS
42607: ST_TO_ADDR
// max_y := y + r ;
42608: LD_ADDR_VAR 0 10
42612: PUSH
42613: LD_VAR 0 2
42617: PUSH
42618: LD_VAR 0 3
42622: PLUS
42623: ST_TO_ADDR
// for _x = min_x to max_x do
42624: LD_ADDR_VAR 0 5
42628: PUSH
42629: DOUBLE
42630: LD_VAR 0 8
42634: DEC
42635: ST_TO_ADDR
42636: LD_VAR 0 9
42640: PUSH
42641: FOR_TO
42642: IFFALSE 42743
// for _y = min_y to max_y do
42644: LD_ADDR_VAR 0 6
42648: PUSH
42649: DOUBLE
42650: LD_VAR 0 7
42654: DEC
42655: ST_TO_ADDR
42656: LD_VAR 0 10
42660: PUSH
42661: FOR_TO
42662: IFFALSE 42739
// begin if not ValidHex ( _x , _y ) then
42664: LD_VAR 0 5
42668: PPUSH
42669: LD_VAR 0 6
42673: PPUSH
42674: CALL_OW 488
42678: NOT
42679: IFFALSE 42683
// continue ;
42681: GO 42661
// if GetResourceTypeXY ( _x , _y ) then
42683: LD_VAR 0 5
42687: PPUSH
42688: LD_VAR 0 6
42692: PPUSH
42693: CALL_OW 283
42697: IFFALSE 42737
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42699: LD_ADDR_VAR 0 4
42703: PUSH
42704: LD_VAR 0 4
42708: PPUSH
42709: LD_VAR 0 4
42713: PUSH
42714: LD_INT 1
42716: PLUS
42717: PPUSH
42718: LD_VAR 0 5
42722: PUSH
42723: LD_VAR 0 6
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PPUSH
42732: CALL_OW 1
42736: ST_TO_ADDR
// end ;
42737: GO 42661
42739: POP
42740: POP
42741: GO 42641
42743: POP
42744: POP
// end ;
42745: LD_VAR 0 4
42749: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42750: LD_INT 0
42752: PPUSH
42753: PPUSH
42754: PPUSH
42755: PPUSH
42756: PPUSH
42757: PPUSH
42758: PPUSH
42759: PPUSH
// if not units then
42760: LD_VAR 0 1
42764: NOT
42765: IFFALSE 42769
// exit ;
42767: GO 43293
// result := UnitFilter ( units , [ f_ok ] ) ;
42769: LD_ADDR_VAR 0 3
42773: PUSH
42774: LD_VAR 0 1
42778: PPUSH
42779: LD_INT 50
42781: PUSH
42782: EMPTY
42783: LIST
42784: PPUSH
42785: CALL_OW 72
42789: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42790: LD_ADDR_VAR 0 8
42794: PUSH
42795: LD_VAR 0 1
42799: PUSH
42800: LD_INT 1
42802: ARRAY
42803: PPUSH
42804: CALL_OW 255
42808: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42809: LD_ADDR_VAR 0 10
42813: PUSH
42814: LD_INT 29
42816: PUSH
42817: LD_INT 91
42819: PUSH
42820: LD_INT 49
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: LIST
42827: ST_TO_ADDR
// if not result then
42828: LD_VAR 0 3
42832: NOT
42833: IFFALSE 42837
// exit ;
42835: GO 43293
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42837: LD_ADDR_VAR 0 5
42841: PUSH
42842: LD_INT 81
42844: PUSH
42845: LD_VAR 0 8
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PPUSH
42854: CALL_OW 69
42858: ST_TO_ADDR
// for i in result do
42859: LD_ADDR_VAR 0 4
42863: PUSH
42864: LD_VAR 0 3
42868: PUSH
42869: FOR_IN
42870: IFFALSE 43291
// begin tag := GetTag ( i ) + 1 ;
42872: LD_ADDR_VAR 0 9
42876: PUSH
42877: LD_VAR 0 4
42881: PPUSH
42882: CALL_OW 110
42886: PUSH
42887: LD_INT 1
42889: PLUS
42890: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
42891: LD_ADDR_VAR 0 7
42895: PUSH
42896: LD_VAR 0 4
42900: PPUSH
42901: CALL_OW 250
42905: PPUSH
42906: LD_VAR 0 4
42910: PPUSH
42911: CALL_OW 251
42915: PPUSH
42916: LD_INT 6
42918: PPUSH
42919: CALL 42492 0 3
42923: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
42924: LD_VAR 0 4
42928: PPUSH
42929: CALL_OW 247
42933: PUSH
42934: LD_INT 2
42936: EQUAL
42937: PUSH
42938: LD_VAR 0 7
42942: AND
42943: PUSH
42944: LD_VAR 0 4
42948: PPUSH
42949: CALL_OW 264
42953: PUSH
42954: LD_VAR 0 10
42958: IN
42959: NOT
42960: AND
42961: IFFALSE 43000
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42963: LD_VAR 0 4
42967: PPUSH
42968: LD_VAR 0 7
42972: PUSH
42973: LD_INT 1
42975: ARRAY
42976: PUSH
42977: LD_INT 1
42979: ARRAY
42980: PPUSH
42981: LD_VAR 0 7
42985: PUSH
42986: LD_INT 1
42988: ARRAY
42989: PUSH
42990: LD_INT 2
42992: ARRAY
42993: PPUSH
42994: CALL_OW 116
42998: GO 43289
// if path > tag then
43000: LD_VAR 0 2
43004: PUSH
43005: LD_VAR 0 9
43009: GREATER
43010: IFFALSE 43218
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43012: LD_ADDR_VAR 0 6
43016: PUSH
43017: LD_VAR 0 5
43021: PPUSH
43022: LD_INT 91
43024: PUSH
43025: LD_VAR 0 4
43029: PUSH
43030: LD_INT 8
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: LIST
43037: PPUSH
43038: CALL_OW 72
43042: ST_TO_ADDR
// if nearEnemy then
43043: LD_VAR 0 6
43047: IFFALSE 43116
// begin if GetWeapon ( i ) = ru_time_lapser then
43049: LD_VAR 0 4
43053: PPUSH
43054: CALL_OW 264
43058: PUSH
43059: LD_INT 49
43061: EQUAL
43062: IFFALSE 43090
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43064: LD_VAR 0 4
43068: PPUSH
43069: LD_VAR 0 6
43073: PPUSH
43074: LD_VAR 0 4
43078: PPUSH
43079: CALL_OW 74
43083: PPUSH
43084: CALL_OW 112
43088: GO 43114
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43090: LD_VAR 0 4
43094: PPUSH
43095: LD_VAR 0 6
43099: PPUSH
43100: LD_VAR 0 4
43104: PPUSH
43105: CALL_OW 74
43109: PPUSH
43110: CALL_OW 115
// end else
43114: GO 43216
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43116: LD_VAR 0 4
43120: PPUSH
43121: LD_VAR 0 2
43125: PUSH
43126: LD_VAR 0 9
43130: ARRAY
43131: PUSH
43132: LD_INT 1
43134: ARRAY
43135: PPUSH
43136: LD_VAR 0 2
43140: PUSH
43141: LD_VAR 0 9
43145: ARRAY
43146: PUSH
43147: LD_INT 2
43149: ARRAY
43150: PPUSH
43151: CALL_OW 297
43155: PUSH
43156: LD_INT 6
43158: GREATER
43159: IFFALSE 43202
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43161: LD_VAR 0 4
43165: PPUSH
43166: LD_VAR 0 2
43170: PUSH
43171: LD_VAR 0 9
43175: ARRAY
43176: PUSH
43177: LD_INT 1
43179: ARRAY
43180: PPUSH
43181: LD_VAR 0 2
43185: PUSH
43186: LD_VAR 0 9
43190: ARRAY
43191: PUSH
43192: LD_INT 2
43194: ARRAY
43195: PPUSH
43196: CALL_OW 114
43200: GO 43216
// SetTag ( i , tag ) ;
43202: LD_VAR 0 4
43206: PPUSH
43207: LD_VAR 0 9
43211: PPUSH
43212: CALL_OW 109
// end else
43216: GO 43289
// if enemy then
43218: LD_VAR 0 5
43222: IFFALSE 43289
// begin if GetWeapon ( i ) = ru_time_lapser then
43224: LD_VAR 0 4
43228: PPUSH
43229: CALL_OW 264
43233: PUSH
43234: LD_INT 49
43236: EQUAL
43237: IFFALSE 43265
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43239: LD_VAR 0 4
43243: PPUSH
43244: LD_VAR 0 5
43248: PPUSH
43249: LD_VAR 0 4
43253: PPUSH
43254: CALL_OW 74
43258: PPUSH
43259: CALL_OW 112
43263: GO 43289
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43265: LD_VAR 0 4
43269: PPUSH
43270: LD_VAR 0 5
43274: PPUSH
43275: LD_VAR 0 4
43279: PPUSH
43280: CALL_OW 74
43284: PPUSH
43285: CALL_OW 115
// end ; end ;
43289: GO 42869
43291: POP
43292: POP
// end ;
43293: LD_VAR 0 3
43297: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43298: LD_INT 0
43300: PPUSH
43301: PPUSH
43302: PPUSH
// if not unit or IsInUnit ( unit ) then
43303: LD_VAR 0 1
43307: NOT
43308: PUSH
43309: LD_VAR 0 1
43313: PPUSH
43314: CALL_OW 310
43318: OR
43319: IFFALSE 43323
// exit ;
43321: GO 43414
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43323: LD_ADDR_VAR 0 4
43327: PUSH
43328: LD_VAR 0 1
43332: PPUSH
43333: CALL_OW 250
43337: PPUSH
43338: LD_VAR 0 2
43342: PPUSH
43343: LD_INT 1
43345: PPUSH
43346: CALL_OW 272
43350: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43351: LD_ADDR_VAR 0 5
43355: PUSH
43356: LD_VAR 0 1
43360: PPUSH
43361: CALL_OW 251
43365: PPUSH
43366: LD_VAR 0 2
43370: PPUSH
43371: LD_INT 1
43373: PPUSH
43374: CALL_OW 273
43378: ST_TO_ADDR
// if ValidHex ( x , y ) then
43379: LD_VAR 0 4
43383: PPUSH
43384: LD_VAR 0 5
43388: PPUSH
43389: CALL_OW 488
43393: IFFALSE 43414
// ComTurnXY ( unit , x , y ) ;
43395: LD_VAR 0 1
43399: PPUSH
43400: LD_VAR 0 4
43404: PPUSH
43405: LD_VAR 0 5
43409: PPUSH
43410: CALL_OW 118
// end ;
43414: LD_VAR 0 3
43418: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43419: LD_INT 0
43421: PPUSH
43422: PPUSH
// result := false ;
43423: LD_ADDR_VAR 0 3
43427: PUSH
43428: LD_INT 0
43430: ST_TO_ADDR
// if not units then
43431: LD_VAR 0 2
43435: NOT
43436: IFFALSE 43440
// exit ;
43438: GO 43485
// for i in units do
43440: LD_ADDR_VAR 0 4
43444: PUSH
43445: LD_VAR 0 2
43449: PUSH
43450: FOR_IN
43451: IFFALSE 43483
// if See ( side , i ) then
43453: LD_VAR 0 1
43457: PPUSH
43458: LD_VAR 0 4
43462: PPUSH
43463: CALL_OW 292
43467: IFFALSE 43481
// begin result := true ;
43469: LD_ADDR_VAR 0 3
43473: PUSH
43474: LD_INT 1
43476: ST_TO_ADDR
// exit ;
43477: POP
43478: POP
43479: GO 43485
// end ;
43481: GO 43450
43483: POP
43484: POP
// end ;
43485: LD_VAR 0 3
43489: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43490: LD_INT 0
43492: PPUSH
43493: PPUSH
43494: PPUSH
43495: PPUSH
// if not unit or not points then
43496: LD_VAR 0 1
43500: NOT
43501: PUSH
43502: LD_VAR 0 2
43506: NOT
43507: OR
43508: IFFALSE 43512
// exit ;
43510: GO 43602
// dist := 99999 ;
43512: LD_ADDR_VAR 0 5
43516: PUSH
43517: LD_INT 99999
43519: ST_TO_ADDR
// for i in points do
43520: LD_ADDR_VAR 0 4
43524: PUSH
43525: LD_VAR 0 2
43529: PUSH
43530: FOR_IN
43531: IFFALSE 43600
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43533: LD_ADDR_VAR 0 6
43537: PUSH
43538: LD_VAR 0 1
43542: PPUSH
43543: LD_VAR 0 4
43547: PUSH
43548: LD_INT 1
43550: ARRAY
43551: PPUSH
43552: LD_VAR 0 4
43556: PUSH
43557: LD_INT 2
43559: ARRAY
43560: PPUSH
43561: CALL_OW 297
43565: ST_TO_ADDR
// if tmpDist < dist then
43566: LD_VAR 0 6
43570: PUSH
43571: LD_VAR 0 5
43575: LESS
43576: IFFALSE 43598
// begin result := i ;
43578: LD_ADDR_VAR 0 3
43582: PUSH
43583: LD_VAR 0 4
43587: ST_TO_ADDR
// dist := tmpDist ;
43588: LD_ADDR_VAR 0 5
43592: PUSH
43593: LD_VAR 0 6
43597: ST_TO_ADDR
// end ; end ;
43598: GO 43530
43600: POP
43601: POP
// end ;
43602: LD_VAR 0 3
43606: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43607: LD_INT 0
43609: PPUSH
// uc_side := side ;
43610: LD_ADDR_OWVAR 20
43614: PUSH
43615: LD_VAR 0 1
43619: ST_TO_ADDR
// uc_nation := 3 ;
43620: LD_ADDR_OWVAR 21
43624: PUSH
43625: LD_INT 3
43627: ST_TO_ADDR
// vc_chassis := 25 ;
43628: LD_ADDR_OWVAR 37
43632: PUSH
43633: LD_INT 25
43635: ST_TO_ADDR
// vc_engine := engine_siberite ;
43636: LD_ADDR_OWVAR 39
43640: PUSH
43641: LD_INT 3
43643: ST_TO_ADDR
// vc_control := control_computer ;
43644: LD_ADDR_OWVAR 38
43648: PUSH
43649: LD_INT 3
43651: ST_TO_ADDR
// vc_weapon := 59 ;
43652: LD_ADDR_OWVAR 40
43656: PUSH
43657: LD_INT 59
43659: ST_TO_ADDR
// result := CreateVehicle ;
43660: LD_ADDR_VAR 0 5
43664: PUSH
43665: CALL_OW 45
43669: ST_TO_ADDR
// SetDir ( result , d ) ;
43670: LD_VAR 0 5
43674: PPUSH
43675: LD_VAR 0 4
43679: PPUSH
43680: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43684: LD_VAR 0 5
43688: PPUSH
43689: LD_VAR 0 2
43693: PPUSH
43694: LD_VAR 0 3
43698: PPUSH
43699: LD_INT 0
43701: PPUSH
43702: CALL_OW 48
// end ;
43706: LD_VAR 0 5
43710: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
43711: LD_INT 0
43713: PPUSH
43714: PPUSH
43715: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43716: LD_ADDR_VAR 0 2
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: LD_INT 0
43726: PUSH
43727: LD_INT 0
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43739: LD_VAR 0 1
43743: NOT
43744: PUSH
43745: LD_VAR 0 1
43749: PPUSH
43750: CALL_OW 264
43754: PUSH
43755: LD_INT 12
43757: PUSH
43758: LD_INT 51
43760: PUSH
43761: LD_INT 32
43763: PUSH
43764: LD_INT 89
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: IN
43773: NOT
43774: OR
43775: IFFALSE 43779
// exit ;
43777: GO 43877
// for i := 1 to 3 do
43779: LD_ADDR_VAR 0 3
43783: PUSH
43784: DOUBLE
43785: LD_INT 1
43787: DEC
43788: ST_TO_ADDR
43789: LD_INT 3
43791: PUSH
43792: FOR_TO
43793: IFFALSE 43875
// begin tmp := GetCargo ( cargo , i ) ;
43795: LD_ADDR_VAR 0 4
43799: PUSH
43800: LD_VAR 0 1
43804: PPUSH
43805: LD_VAR 0 3
43809: PPUSH
43810: CALL_OW 289
43814: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43815: LD_ADDR_VAR 0 2
43819: PUSH
43820: LD_VAR 0 2
43824: PPUSH
43825: LD_VAR 0 3
43829: PPUSH
43830: LD_VAR 0 4
43834: PPUSH
43835: CALL_OW 1
43839: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43840: LD_ADDR_VAR 0 2
43844: PUSH
43845: LD_VAR 0 2
43849: PPUSH
43850: LD_INT 4
43852: PPUSH
43853: LD_VAR 0 2
43857: PUSH
43858: LD_INT 4
43860: ARRAY
43861: PUSH
43862: LD_VAR 0 4
43866: PLUS
43867: PPUSH
43868: CALL_OW 1
43872: ST_TO_ADDR
// end ;
43873: GO 43792
43875: POP
43876: POP
// end ;
43877: LD_VAR 0 2
43881: RET
// export function Length ( array ) ; begin
43882: LD_INT 0
43884: PPUSH
// result := array + 0 ;
43885: LD_ADDR_VAR 0 2
43889: PUSH
43890: LD_VAR 0 1
43894: PUSH
43895: LD_INT 0
43897: PLUS
43898: ST_TO_ADDR
// end ;
43899: LD_VAR 0 2
43903: RET
// export function PrepareArray ( array ) ; begin
43904: LD_INT 0
43906: PPUSH
// result := array diff 0 ;
43907: LD_ADDR_VAR 0 2
43911: PUSH
43912: LD_VAR 0 1
43916: PUSH
43917: LD_INT 0
43919: DIFF
43920: ST_TO_ADDR
// if not result [ 1 ] then
43921: LD_VAR 0 2
43925: PUSH
43926: LD_INT 1
43928: ARRAY
43929: NOT
43930: IFFALSE 43950
// result := Delete ( result , 1 ) ;
43932: LD_ADDR_VAR 0 2
43936: PUSH
43937: LD_VAR 0 2
43941: PPUSH
43942: LD_INT 1
43944: PPUSH
43945: CALL_OW 3
43949: ST_TO_ADDR
// end ; end_of_file
43950: LD_VAR 0 2
43954: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
43955: LD_INT 0
43957: PPUSH
43958: PPUSH
43959: PPUSH
43960: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
43961: LD_VAR 0 1
43965: PPUSH
43966: CALL_OW 264
43970: PUSH
43971: LD_INT 91
43973: EQUAL
43974: IFFALSE 44046
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
43976: LD_INT 68
43978: PPUSH
43979: LD_VAR 0 1
43983: PPUSH
43984: CALL_OW 255
43988: PPUSH
43989: CALL_OW 321
43993: PUSH
43994: LD_INT 2
43996: EQUAL
43997: IFFALSE 44009
// eff := 70 else
43999: LD_ADDR_VAR 0 4
44003: PUSH
44004: LD_INT 70
44006: ST_TO_ADDR
44007: GO 44017
// eff := 30 ;
44009: LD_ADDR_VAR 0 4
44013: PUSH
44014: LD_INT 30
44016: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
44017: LD_VAR 0 1
44021: PPUSH
44022: CALL_OW 250
44026: PPUSH
44027: LD_VAR 0 1
44031: PPUSH
44032: CALL_OW 251
44036: PPUSH
44037: LD_VAR 0 4
44041: PPUSH
44042: CALL_OW 495
// end ; end ;
44046: LD_VAR 0 2
44050: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
44051: LD_INT 0
44053: PPUSH
// end ;
44054: LD_VAR 0 4
44058: RET
// export function SOS_Command ( cmd ) ; begin
44059: LD_INT 0
44061: PPUSH
// end ;
44062: LD_VAR 0 2
44066: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
44067: LD_INT 0
44069: PPUSH
// end ;
44070: LD_VAR 0 6
44074: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
44075: LD_INT 0
44077: PPUSH
44078: PPUSH
// if not vehicle or not factory then
44079: LD_VAR 0 1
44083: NOT
44084: PUSH
44085: LD_VAR 0 2
44089: NOT
44090: OR
44091: IFFALSE 44095
// exit ;
44093: GO 44326
// if factoryWaypoints >= factory then
44095: LD_EXP 77
44099: PUSH
44100: LD_VAR 0 2
44104: GREATEREQUAL
44105: IFFALSE 44326
// if factoryWaypoints [ factory ] then
44107: LD_EXP 77
44111: PUSH
44112: LD_VAR 0 2
44116: ARRAY
44117: IFFALSE 44326
// begin if GetControl ( vehicle ) = control_manual then
44119: LD_VAR 0 1
44123: PPUSH
44124: CALL_OW 263
44128: PUSH
44129: LD_INT 1
44131: EQUAL
44132: IFFALSE 44213
// begin driver := IsDrivenBy ( vehicle ) ;
44134: LD_ADDR_VAR 0 4
44138: PUSH
44139: LD_VAR 0 1
44143: PPUSH
44144: CALL_OW 311
44148: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
44149: LD_VAR 0 4
44153: PPUSH
44154: LD_EXP 77
44158: PUSH
44159: LD_VAR 0 2
44163: ARRAY
44164: PUSH
44165: LD_INT 3
44167: ARRAY
44168: PPUSH
44169: LD_EXP 77
44173: PUSH
44174: LD_VAR 0 2
44178: ARRAY
44179: PUSH
44180: LD_INT 4
44182: ARRAY
44183: PPUSH
44184: CALL_OW 171
// AddComExitVehicle ( driver ) ;
44188: LD_VAR 0 4
44192: PPUSH
44193: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
44197: LD_VAR 0 4
44201: PPUSH
44202: LD_VAR 0 2
44206: PPUSH
44207: CALL_OW 180
// end else
44211: GO 44326
// if GetControl ( vehicle ) = control_remote then
44213: LD_VAR 0 1
44217: PPUSH
44218: CALL_OW 263
44222: PUSH
44223: LD_INT 2
44225: EQUAL
44226: IFFALSE 44287
// begin wait ( 0 0$2 ) ;
44228: LD_INT 70
44230: PPUSH
44231: CALL_OW 67
// if Connect ( vehicle ) then
44235: LD_VAR 0 1
44239: PPUSH
44240: CALL 10876 0 1
44244: IFFALSE 44285
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
44246: LD_VAR 0 1
44250: PPUSH
44251: LD_EXP 77
44255: PUSH
44256: LD_VAR 0 2
44260: ARRAY
44261: PUSH
44262: LD_INT 3
44264: ARRAY
44265: PPUSH
44266: LD_EXP 77
44270: PUSH
44271: LD_VAR 0 2
44275: ARRAY
44276: PUSH
44277: LD_INT 4
44279: ARRAY
44280: PPUSH
44281: CALL_OW 171
// end else
44285: GO 44326
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
44287: LD_VAR 0 1
44291: PPUSH
44292: LD_EXP 77
44296: PUSH
44297: LD_VAR 0 2
44301: ARRAY
44302: PUSH
44303: LD_INT 3
44305: ARRAY
44306: PPUSH
44307: LD_EXP 77
44311: PUSH
44312: LD_VAR 0 2
44316: ARRAY
44317: PUSH
44318: LD_INT 4
44320: ARRAY
44321: PPUSH
44322: CALL_OW 171
// end ; end ;
44326: LD_VAR 0 3
44330: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
44331: LD_INT 0
44333: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
44334: LD_VAR 0 1
44338: PUSH
44339: LD_INT 250
44341: EQUAL
44342: PUSH
44343: LD_VAR 0 2
44347: PPUSH
44348: CALL_OW 264
44352: PUSH
44353: LD_INT 81
44355: EQUAL
44356: AND
44357: IFFALSE 44378
// MinerPlaceMine ( unit , x , y ) ;
44359: LD_VAR 0 2
44363: PPUSH
44364: LD_VAR 0 4
44368: PPUSH
44369: LD_VAR 0 5
44373: PPUSH
44374: CALL 46763 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
44378: LD_VAR 0 1
44382: PUSH
44383: LD_INT 251
44385: EQUAL
44386: PUSH
44387: LD_VAR 0 2
44391: PPUSH
44392: CALL_OW 264
44396: PUSH
44397: LD_INT 81
44399: EQUAL
44400: AND
44401: IFFALSE 44422
// MinerDetonateMine ( unit , x , y ) ;
44403: LD_VAR 0 2
44407: PPUSH
44408: LD_VAR 0 4
44412: PPUSH
44413: LD_VAR 0 5
44417: PPUSH
44418: CALL 47038 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
44422: LD_VAR 0 1
44426: PUSH
44427: LD_INT 252
44429: EQUAL
44430: PUSH
44431: LD_VAR 0 2
44435: PPUSH
44436: CALL_OW 264
44440: PUSH
44441: LD_INT 81
44443: EQUAL
44444: AND
44445: IFFALSE 44466
// MinerCreateMinefield ( unit , x , y ) ;
44447: LD_VAR 0 2
44451: PPUSH
44452: LD_VAR 0 4
44456: PPUSH
44457: LD_VAR 0 5
44461: PPUSH
44462: CALL 47455 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
44466: LD_VAR 0 1
44470: PUSH
44471: LD_INT 253
44473: EQUAL
44474: PUSH
44475: LD_VAR 0 2
44479: PPUSH
44480: CALL_OW 257
44484: PUSH
44485: LD_INT 5
44487: EQUAL
44488: AND
44489: IFFALSE 44510
// ComBinocular ( unit , x , y ) ;
44491: LD_VAR 0 2
44495: PPUSH
44496: LD_VAR 0 4
44500: PPUSH
44501: LD_VAR 0 5
44505: PPUSH
44506: CALL 47824 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
44510: LD_VAR 0 1
44514: PUSH
44515: LD_INT 254
44517: EQUAL
44518: PUSH
44519: LD_VAR 0 2
44523: PPUSH
44524: CALL_OW 264
44528: PUSH
44529: LD_INT 99
44531: EQUAL
44532: AND
44533: PUSH
44534: LD_VAR 0 3
44538: PPUSH
44539: CALL_OW 263
44543: PUSH
44544: LD_INT 3
44546: EQUAL
44547: AND
44548: IFFALSE 44564
// HackDestroyVehicle ( unit , selectedUnit ) ;
44550: LD_VAR 0 2
44554: PPUSH
44555: LD_VAR 0 3
44559: PPUSH
44560: CALL 46127 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
44564: LD_VAR 0 1
44568: PUSH
44569: LD_INT 255
44571: EQUAL
44572: PUSH
44573: LD_VAR 0 2
44577: PPUSH
44578: CALL_OW 264
44582: PUSH
44583: LD_INT 14
44585: PUSH
44586: LD_INT 53
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: IN
44593: AND
44594: PUSH
44595: LD_VAR 0 4
44599: PPUSH
44600: LD_VAR 0 5
44604: PPUSH
44605: CALL_OW 488
44609: AND
44610: IFFALSE 44634
// CutTreeXYR ( unit , x , y , 12 ) ;
44612: LD_VAR 0 2
44616: PPUSH
44617: LD_VAR 0 4
44621: PPUSH
44622: LD_VAR 0 5
44626: PPUSH
44627: LD_INT 12
44629: PPUSH
44630: CALL 44697 0 4
// if cmd = 256 then
44634: LD_VAR 0 1
44638: PUSH
44639: LD_INT 256
44641: EQUAL
44642: IFFALSE 44663
// SetFactoryWaypoint ( unit , x , y ) ;
44644: LD_VAR 0 2
44648: PPUSH
44649: LD_VAR 0 4
44653: PPUSH
44654: LD_VAR 0 5
44658: PPUSH
44659: CALL 62582 0 3
// if cmd = 257 then
44663: LD_VAR 0 1
44667: PUSH
44668: LD_INT 257
44670: EQUAL
44671: IFFALSE 44692
// SetWarehouseGatheringPoint ( unit , x , y ) ;
44673: LD_VAR 0 2
44677: PPUSH
44678: LD_VAR 0 4
44682: PPUSH
44683: LD_VAR 0 5
44687: PPUSH
44688: CALL 62944 0 3
// end ;
44692: LD_VAR 0 6
44696: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
44697: LD_INT 0
44699: PPUSH
44700: PPUSH
44701: PPUSH
44702: PPUSH
44703: PPUSH
44704: PPUSH
44705: PPUSH
44706: PPUSH
44707: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
44708: LD_VAR 0 1
44712: NOT
44713: PUSH
44714: LD_VAR 0 2
44718: PPUSH
44719: LD_VAR 0 3
44723: PPUSH
44724: CALL_OW 488
44728: NOT
44729: OR
44730: PUSH
44731: LD_VAR 0 4
44735: NOT
44736: OR
44737: IFFALSE 44741
// exit ;
44739: GO 45081
// list := [ ] ;
44741: LD_ADDR_VAR 0 13
44745: PUSH
44746: EMPTY
44747: ST_TO_ADDR
// if x - r < 0 then
44748: LD_VAR 0 2
44752: PUSH
44753: LD_VAR 0 4
44757: MINUS
44758: PUSH
44759: LD_INT 0
44761: LESS
44762: IFFALSE 44774
// min_x := 0 else
44764: LD_ADDR_VAR 0 7
44768: PUSH
44769: LD_INT 0
44771: ST_TO_ADDR
44772: GO 44790
// min_x := x - r ;
44774: LD_ADDR_VAR 0 7
44778: PUSH
44779: LD_VAR 0 2
44783: PUSH
44784: LD_VAR 0 4
44788: MINUS
44789: ST_TO_ADDR
// if y - r < 0 then
44790: LD_VAR 0 3
44794: PUSH
44795: LD_VAR 0 4
44799: MINUS
44800: PUSH
44801: LD_INT 0
44803: LESS
44804: IFFALSE 44816
// min_y := 0 else
44806: LD_ADDR_VAR 0 8
44810: PUSH
44811: LD_INT 0
44813: ST_TO_ADDR
44814: GO 44832
// min_y := y - r ;
44816: LD_ADDR_VAR 0 8
44820: PUSH
44821: LD_VAR 0 3
44825: PUSH
44826: LD_VAR 0 4
44830: MINUS
44831: ST_TO_ADDR
// max_x := x + r ;
44832: LD_ADDR_VAR 0 9
44836: PUSH
44837: LD_VAR 0 2
44841: PUSH
44842: LD_VAR 0 4
44846: PLUS
44847: ST_TO_ADDR
// max_y := y + r ;
44848: LD_ADDR_VAR 0 10
44852: PUSH
44853: LD_VAR 0 3
44857: PUSH
44858: LD_VAR 0 4
44862: PLUS
44863: ST_TO_ADDR
// for _x = min_x to max_x do
44864: LD_ADDR_VAR 0 11
44868: PUSH
44869: DOUBLE
44870: LD_VAR 0 7
44874: DEC
44875: ST_TO_ADDR
44876: LD_VAR 0 9
44880: PUSH
44881: FOR_TO
44882: IFFALSE 44999
// for _y = min_y to max_y do
44884: LD_ADDR_VAR 0 12
44888: PUSH
44889: DOUBLE
44890: LD_VAR 0 8
44894: DEC
44895: ST_TO_ADDR
44896: LD_VAR 0 10
44900: PUSH
44901: FOR_TO
44902: IFFALSE 44995
// begin if not ValidHex ( _x , _y ) then
44904: LD_VAR 0 11
44908: PPUSH
44909: LD_VAR 0 12
44913: PPUSH
44914: CALL_OW 488
44918: NOT
44919: IFFALSE 44923
// continue ;
44921: GO 44901
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
44923: LD_VAR 0 11
44927: PPUSH
44928: LD_VAR 0 12
44932: PPUSH
44933: CALL_OW 351
44937: PUSH
44938: LD_VAR 0 11
44942: PPUSH
44943: LD_VAR 0 12
44947: PPUSH
44948: CALL_OW 554
44952: AND
44953: IFFALSE 44993
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
44955: LD_ADDR_VAR 0 13
44959: PUSH
44960: LD_VAR 0 13
44964: PPUSH
44965: LD_VAR 0 13
44969: PUSH
44970: LD_INT 1
44972: PLUS
44973: PPUSH
44974: LD_VAR 0 11
44978: PUSH
44979: LD_VAR 0 12
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PPUSH
44988: CALL_OW 2
44992: ST_TO_ADDR
// end ;
44993: GO 44901
44995: POP
44996: POP
44997: GO 44881
44999: POP
45000: POP
// if not list then
45001: LD_VAR 0 13
45005: NOT
45006: IFFALSE 45010
// exit ;
45008: GO 45081
// for i in list do
45010: LD_ADDR_VAR 0 6
45014: PUSH
45015: LD_VAR 0 13
45019: PUSH
45020: FOR_IN
45021: IFFALSE 45079
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
45023: LD_VAR 0 1
45027: PPUSH
45028: LD_STRING M
45030: PUSH
45031: LD_VAR 0 6
45035: PUSH
45036: LD_INT 1
45038: ARRAY
45039: PUSH
45040: LD_VAR 0 6
45044: PUSH
45045: LD_INT 2
45047: ARRAY
45048: PUSH
45049: LD_INT 0
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: LD_INT 0
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: PUSH
45070: EMPTY
45071: LIST
45072: PPUSH
45073: CALL_OW 447
45077: GO 45020
45079: POP
45080: POP
// end ;
45081: LD_VAR 0 5
45085: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
45086: LD_EXP 9
45090: NOT
45091: IFFALSE 45141
45093: GO 45095
45095: DISABLE
// begin initHack := true ;
45096: LD_ADDR_EXP 9
45100: PUSH
45101: LD_INT 1
45103: ST_TO_ADDR
// hackTanks := [ ] ;
45104: LD_ADDR_EXP 10
45108: PUSH
45109: EMPTY
45110: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
45111: LD_ADDR_EXP 11
45115: PUSH
45116: EMPTY
45117: ST_TO_ADDR
// hackLimit := 3 ;
45118: LD_ADDR_EXP 12
45122: PUSH
45123: LD_INT 3
45125: ST_TO_ADDR
// hackDist := 12 ;
45126: LD_ADDR_EXP 13
45130: PUSH
45131: LD_INT 12
45133: ST_TO_ADDR
// hackCounter := [ ] ;
45134: LD_ADDR_EXP 14
45138: PUSH
45139: EMPTY
45140: ST_TO_ADDR
// end ;
45141: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
45142: LD_EXP 9
45146: PUSH
45147: LD_INT 34
45149: PUSH
45150: LD_INT 99
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PPUSH
45157: CALL_OW 69
45161: AND
45162: IFFALSE 45415
45164: GO 45166
45166: DISABLE
45167: LD_INT 0
45169: PPUSH
45170: PPUSH
// begin enable ;
45171: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
45172: LD_ADDR_VAR 0 1
45176: PUSH
45177: LD_INT 34
45179: PUSH
45180: LD_INT 99
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PPUSH
45187: CALL_OW 69
45191: PUSH
45192: FOR_IN
45193: IFFALSE 45413
// begin if not i in hackTanks then
45195: LD_VAR 0 1
45199: PUSH
45200: LD_EXP 10
45204: IN
45205: NOT
45206: IFFALSE 45289
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
45208: LD_ADDR_EXP 10
45212: PUSH
45213: LD_EXP 10
45217: PPUSH
45218: LD_EXP 10
45222: PUSH
45223: LD_INT 1
45225: PLUS
45226: PPUSH
45227: LD_VAR 0 1
45231: PPUSH
45232: CALL_OW 1
45236: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
45237: LD_ADDR_EXP 11
45241: PUSH
45242: LD_EXP 11
45246: PPUSH
45247: LD_EXP 11
45251: PUSH
45252: LD_INT 1
45254: PLUS
45255: PPUSH
45256: EMPTY
45257: PPUSH
45258: CALL_OW 1
45262: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
45263: LD_ADDR_EXP 14
45267: PUSH
45268: LD_EXP 14
45272: PPUSH
45273: LD_EXP 14
45277: PUSH
45278: LD_INT 1
45280: PLUS
45281: PPUSH
45282: EMPTY
45283: PPUSH
45284: CALL_OW 1
45288: ST_TO_ADDR
// end ; if not IsOk ( i ) then
45289: LD_VAR 0 1
45293: PPUSH
45294: CALL_OW 302
45298: NOT
45299: IFFALSE 45312
// begin HackUnlinkAll ( i ) ;
45301: LD_VAR 0 1
45305: PPUSH
45306: CALL 45418 0 1
// continue ;
45310: GO 45192
// end ; HackCheckCapturedStatus ( i ) ;
45312: LD_VAR 0 1
45316: PPUSH
45317: CALL 45861 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
45321: LD_ADDR_VAR 0 2
45325: PUSH
45326: LD_INT 81
45328: PUSH
45329: LD_VAR 0 1
45333: PPUSH
45334: CALL_OW 255
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 33
45345: PUSH
45346: LD_INT 3
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 91
45355: PUSH
45356: LD_VAR 0 1
45360: PUSH
45361: LD_EXP 13
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 50
45373: PUSH
45374: EMPTY
45375: LIST
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: PPUSH
45383: CALL_OW 69
45387: ST_TO_ADDR
// if not tmp then
45388: LD_VAR 0 2
45392: NOT
45393: IFFALSE 45397
// continue ;
45395: GO 45192
// HackLink ( i , tmp ) ;
45397: LD_VAR 0 1
45401: PPUSH
45402: LD_VAR 0 2
45406: PPUSH
45407: CALL 45554 0 2
// end ;
45411: GO 45192
45413: POP
45414: POP
// end ;
45415: PPOPN 2
45417: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
45418: LD_INT 0
45420: PPUSH
45421: PPUSH
45422: PPUSH
// if not hack in hackTanks then
45423: LD_VAR 0 1
45427: PUSH
45428: LD_EXP 10
45432: IN
45433: NOT
45434: IFFALSE 45438
// exit ;
45436: GO 45549
// index := GetElementIndex ( hackTanks , hack ) ;
45438: LD_ADDR_VAR 0 4
45442: PUSH
45443: LD_EXP 10
45447: PPUSH
45448: LD_VAR 0 1
45452: PPUSH
45453: CALL 7692 0 2
45457: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
45458: LD_EXP 11
45462: PUSH
45463: LD_VAR 0 4
45467: ARRAY
45468: IFFALSE 45549
// begin for i in hackTanksCaptured [ index ] do
45470: LD_ADDR_VAR 0 3
45474: PUSH
45475: LD_EXP 11
45479: PUSH
45480: LD_VAR 0 4
45484: ARRAY
45485: PUSH
45486: FOR_IN
45487: IFFALSE 45513
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
45489: LD_VAR 0 3
45493: PUSH
45494: LD_INT 1
45496: ARRAY
45497: PPUSH
45498: LD_VAR 0 3
45502: PUSH
45503: LD_INT 2
45505: ARRAY
45506: PPUSH
45507: CALL_OW 235
45511: GO 45486
45513: POP
45514: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
45515: LD_ADDR_EXP 11
45519: PUSH
45520: LD_EXP 11
45524: PPUSH
45525: LD_VAR 0 4
45529: PPUSH
45530: EMPTY
45531: PPUSH
45532: CALL_OW 1
45536: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
45537: LD_VAR 0 1
45541: PPUSH
45542: LD_INT 0
45544: PPUSH
45545: CALL_OW 505
// end ; end ;
45549: LD_VAR 0 2
45553: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
45554: LD_INT 0
45556: PPUSH
45557: PPUSH
45558: PPUSH
// if not hack in hackTanks or not vehicles then
45559: LD_VAR 0 1
45563: PUSH
45564: LD_EXP 10
45568: IN
45569: NOT
45570: PUSH
45571: LD_VAR 0 2
45575: NOT
45576: OR
45577: IFFALSE 45581
// exit ;
45579: GO 45856
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
45581: LD_ADDR_VAR 0 2
45585: PUSH
45586: LD_VAR 0 1
45590: PPUSH
45591: LD_VAR 0 2
45595: PPUSH
45596: LD_INT 1
45598: PPUSH
45599: LD_INT 1
45601: PPUSH
45602: CALL 8342 0 4
45606: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
45607: LD_ADDR_VAR 0 5
45611: PUSH
45612: LD_EXP 10
45616: PPUSH
45617: LD_VAR 0 1
45621: PPUSH
45622: CALL 7692 0 2
45626: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
45627: LD_EXP 11
45631: PUSH
45632: LD_VAR 0 5
45636: ARRAY
45637: PUSH
45638: LD_EXP 12
45642: LESS
45643: IFFALSE 45832
// begin for i := 1 to vehicles do
45645: LD_ADDR_VAR 0 4
45649: PUSH
45650: DOUBLE
45651: LD_INT 1
45653: DEC
45654: ST_TO_ADDR
45655: LD_VAR 0 2
45659: PUSH
45660: FOR_TO
45661: IFFALSE 45830
// begin if hackTanksCaptured [ index ] = hackLimit then
45663: LD_EXP 11
45667: PUSH
45668: LD_VAR 0 5
45672: ARRAY
45673: PUSH
45674: LD_EXP 12
45678: EQUAL
45679: IFFALSE 45683
// break ;
45681: GO 45830
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
45683: LD_ADDR_EXP 14
45687: PUSH
45688: LD_EXP 14
45692: PPUSH
45693: LD_VAR 0 5
45697: PPUSH
45698: LD_EXP 14
45702: PUSH
45703: LD_VAR 0 5
45707: ARRAY
45708: PUSH
45709: LD_INT 1
45711: PLUS
45712: PPUSH
45713: CALL_OW 1
45717: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
45718: LD_ADDR_EXP 11
45722: PUSH
45723: LD_EXP 11
45727: PPUSH
45728: LD_VAR 0 5
45732: PUSH
45733: LD_EXP 11
45737: PUSH
45738: LD_VAR 0 5
45742: ARRAY
45743: PUSH
45744: LD_INT 1
45746: PLUS
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PPUSH
45752: LD_VAR 0 2
45756: PUSH
45757: LD_VAR 0 4
45761: ARRAY
45762: PUSH
45763: LD_VAR 0 2
45767: PUSH
45768: LD_VAR 0 4
45772: ARRAY
45773: PPUSH
45774: CALL_OW 255
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PPUSH
45783: CALL 7907 0 3
45787: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
45788: LD_VAR 0 2
45792: PUSH
45793: LD_VAR 0 4
45797: ARRAY
45798: PPUSH
45799: LD_VAR 0 1
45803: PPUSH
45804: CALL_OW 255
45808: PPUSH
45809: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
45813: LD_VAR 0 2
45817: PUSH
45818: LD_VAR 0 4
45822: ARRAY
45823: PPUSH
45824: CALL_OW 141
// end ;
45828: GO 45660
45830: POP
45831: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
45832: LD_VAR 0 1
45836: PPUSH
45837: LD_EXP 11
45841: PUSH
45842: LD_VAR 0 5
45846: ARRAY
45847: PUSH
45848: LD_INT 0
45850: PLUS
45851: PPUSH
45852: CALL_OW 505
// end ;
45856: LD_VAR 0 3
45860: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
45861: LD_INT 0
45863: PPUSH
45864: PPUSH
45865: PPUSH
45866: PPUSH
// if not hack in hackTanks then
45867: LD_VAR 0 1
45871: PUSH
45872: LD_EXP 10
45876: IN
45877: NOT
45878: IFFALSE 45882
// exit ;
45880: GO 46122
// index := GetElementIndex ( hackTanks , hack ) ;
45882: LD_ADDR_VAR 0 4
45886: PUSH
45887: LD_EXP 10
45891: PPUSH
45892: LD_VAR 0 1
45896: PPUSH
45897: CALL 7692 0 2
45901: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
45902: LD_ADDR_VAR 0 3
45906: PUSH
45907: DOUBLE
45908: LD_EXP 11
45912: PUSH
45913: LD_VAR 0 4
45917: ARRAY
45918: INC
45919: ST_TO_ADDR
45920: LD_INT 1
45922: PUSH
45923: FOR_DOWNTO
45924: IFFALSE 46096
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
45926: LD_ADDR_VAR 0 5
45930: PUSH
45931: LD_EXP 11
45935: PUSH
45936: LD_VAR 0 4
45940: ARRAY
45941: PUSH
45942: LD_VAR 0 3
45946: ARRAY
45947: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
45948: LD_VAR 0 5
45952: PUSH
45953: LD_INT 1
45955: ARRAY
45956: PPUSH
45957: CALL_OW 302
45961: NOT
45962: PUSH
45963: LD_VAR 0 5
45967: PUSH
45968: LD_INT 1
45970: ARRAY
45971: PPUSH
45972: CALL_OW 255
45976: PUSH
45977: LD_VAR 0 1
45981: PPUSH
45982: CALL_OW 255
45986: NONEQUAL
45987: OR
45988: IFFALSE 46094
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
45990: LD_VAR 0 5
45994: PUSH
45995: LD_INT 1
45997: ARRAY
45998: PPUSH
45999: CALL_OW 305
46003: PUSH
46004: LD_VAR 0 5
46008: PUSH
46009: LD_INT 1
46011: ARRAY
46012: PPUSH
46013: CALL_OW 255
46017: PUSH
46018: LD_VAR 0 1
46022: PPUSH
46023: CALL_OW 255
46027: EQUAL
46028: AND
46029: IFFALSE 46053
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
46031: LD_VAR 0 5
46035: PUSH
46036: LD_INT 1
46038: ARRAY
46039: PPUSH
46040: LD_VAR 0 5
46044: PUSH
46045: LD_INT 2
46047: ARRAY
46048: PPUSH
46049: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
46053: LD_ADDR_EXP 11
46057: PUSH
46058: LD_EXP 11
46062: PPUSH
46063: LD_VAR 0 4
46067: PPUSH
46068: LD_EXP 11
46072: PUSH
46073: LD_VAR 0 4
46077: ARRAY
46078: PPUSH
46079: LD_VAR 0 3
46083: PPUSH
46084: CALL_OW 3
46088: PPUSH
46089: CALL_OW 1
46093: ST_TO_ADDR
// end ; end ;
46094: GO 45923
46096: POP
46097: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
46098: LD_VAR 0 1
46102: PPUSH
46103: LD_EXP 11
46107: PUSH
46108: LD_VAR 0 4
46112: ARRAY
46113: PUSH
46114: LD_INT 0
46116: PLUS
46117: PPUSH
46118: CALL_OW 505
// end ;
46122: LD_VAR 0 2
46126: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
46127: LD_INT 0
46129: PPUSH
46130: PPUSH
46131: PPUSH
46132: PPUSH
// if not hack in hackTanks then
46133: LD_VAR 0 1
46137: PUSH
46138: LD_EXP 10
46142: IN
46143: NOT
46144: IFFALSE 46148
// exit ;
46146: GO 46233
// index := GetElementIndex ( hackTanks , hack ) ;
46148: LD_ADDR_VAR 0 5
46152: PUSH
46153: LD_EXP 10
46157: PPUSH
46158: LD_VAR 0 1
46162: PPUSH
46163: CALL 7692 0 2
46167: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
46168: LD_ADDR_VAR 0 4
46172: PUSH
46173: DOUBLE
46174: LD_INT 1
46176: DEC
46177: ST_TO_ADDR
46178: LD_EXP 11
46182: PUSH
46183: LD_VAR 0 5
46187: ARRAY
46188: PUSH
46189: FOR_TO
46190: IFFALSE 46231
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
46192: LD_EXP 11
46196: PUSH
46197: LD_VAR 0 5
46201: ARRAY
46202: PUSH
46203: LD_VAR 0 4
46207: ARRAY
46208: PUSH
46209: LD_INT 1
46211: ARRAY
46212: PUSH
46213: LD_VAR 0 2
46217: EQUAL
46218: IFFALSE 46229
// KillUnit ( vehicle ) ;
46220: LD_VAR 0 2
46224: PPUSH
46225: CALL_OW 66
46229: GO 46189
46231: POP
46232: POP
// end ;
46233: LD_VAR 0 3
46237: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
46238: LD_EXP 15
46242: NOT
46243: IFFALSE 46278
46245: GO 46247
46247: DISABLE
// begin initMiner := true ;
46248: LD_ADDR_EXP 15
46252: PUSH
46253: LD_INT 1
46255: ST_TO_ADDR
// minersList := [ ] ;
46256: LD_ADDR_EXP 16
46260: PUSH
46261: EMPTY
46262: ST_TO_ADDR
// minerMinesList := [ ] ;
46263: LD_ADDR_EXP 17
46267: PUSH
46268: EMPTY
46269: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
46270: LD_ADDR_EXP 18
46274: PUSH
46275: LD_INT 5
46277: ST_TO_ADDR
// end ;
46278: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
46279: LD_EXP 15
46283: PUSH
46284: LD_INT 34
46286: PUSH
46287: LD_INT 81
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PPUSH
46294: CALL_OW 69
46298: AND
46299: IFFALSE 46760
46301: GO 46303
46303: DISABLE
46304: LD_INT 0
46306: PPUSH
46307: PPUSH
46308: PPUSH
46309: PPUSH
// begin enable ;
46310: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
46311: LD_ADDR_VAR 0 1
46315: PUSH
46316: LD_INT 34
46318: PUSH
46319: LD_INT 81
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PPUSH
46326: CALL_OW 69
46330: PUSH
46331: FOR_IN
46332: IFFALSE 46404
// begin if not i in minersList then
46334: LD_VAR 0 1
46338: PUSH
46339: LD_EXP 16
46343: IN
46344: NOT
46345: IFFALSE 46402
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
46347: LD_ADDR_EXP 16
46351: PUSH
46352: LD_EXP 16
46356: PPUSH
46357: LD_EXP 16
46361: PUSH
46362: LD_INT 1
46364: PLUS
46365: PPUSH
46366: LD_VAR 0 1
46370: PPUSH
46371: CALL_OW 1
46375: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
46376: LD_ADDR_EXP 17
46380: PUSH
46381: LD_EXP 17
46385: PPUSH
46386: LD_EXP 17
46390: PUSH
46391: LD_INT 1
46393: PLUS
46394: PPUSH
46395: EMPTY
46396: PPUSH
46397: CALL_OW 1
46401: ST_TO_ADDR
// end end ;
46402: GO 46331
46404: POP
46405: POP
// for i := minerMinesList downto 1 do
46406: LD_ADDR_VAR 0 1
46410: PUSH
46411: DOUBLE
46412: LD_EXP 17
46416: INC
46417: ST_TO_ADDR
46418: LD_INT 1
46420: PUSH
46421: FOR_DOWNTO
46422: IFFALSE 46758
// begin if IsLive ( minersList [ i ] ) then
46424: LD_EXP 16
46428: PUSH
46429: LD_VAR 0 1
46433: ARRAY
46434: PPUSH
46435: CALL_OW 300
46439: IFFALSE 46467
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
46441: LD_EXP 16
46445: PUSH
46446: LD_VAR 0 1
46450: ARRAY
46451: PPUSH
46452: LD_EXP 17
46456: PUSH
46457: LD_VAR 0 1
46461: ARRAY
46462: PPUSH
46463: CALL_OW 505
// if not minerMinesList [ i ] then
46467: LD_EXP 17
46471: PUSH
46472: LD_VAR 0 1
46476: ARRAY
46477: NOT
46478: IFFALSE 46482
// continue ;
46480: GO 46421
// for j := minerMinesList [ i ] downto 1 do
46482: LD_ADDR_VAR 0 2
46486: PUSH
46487: DOUBLE
46488: LD_EXP 17
46492: PUSH
46493: LD_VAR 0 1
46497: ARRAY
46498: INC
46499: ST_TO_ADDR
46500: LD_INT 1
46502: PUSH
46503: FOR_DOWNTO
46504: IFFALSE 46754
// begin side := GetSide ( minersList [ i ] ) ;
46506: LD_ADDR_VAR 0 3
46510: PUSH
46511: LD_EXP 16
46515: PUSH
46516: LD_VAR 0 1
46520: ARRAY
46521: PPUSH
46522: CALL_OW 255
46526: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
46527: LD_ADDR_VAR 0 4
46531: PUSH
46532: LD_EXP 17
46536: PUSH
46537: LD_VAR 0 1
46541: ARRAY
46542: PUSH
46543: LD_VAR 0 2
46547: ARRAY
46548: PUSH
46549: LD_INT 1
46551: ARRAY
46552: PPUSH
46553: LD_EXP 17
46557: PUSH
46558: LD_VAR 0 1
46562: ARRAY
46563: PUSH
46564: LD_VAR 0 2
46568: ARRAY
46569: PUSH
46570: LD_INT 2
46572: ARRAY
46573: PPUSH
46574: CALL_OW 428
46578: ST_TO_ADDR
// if not tmp then
46579: LD_VAR 0 4
46583: NOT
46584: IFFALSE 46588
// continue ;
46586: GO 46503
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
46588: LD_VAR 0 4
46592: PUSH
46593: LD_INT 81
46595: PUSH
46596: LD_VAR 0 3
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PPUSH
46605: CALL_OW 69
46609: IN
46610: PUSH
46611: LD_EXP 17
46615: PUSH
46616: LD_VAR 0 1
46620: ARRAY
46621: PUSH
46622: LD_VAR 0 2
46626: ARRAY
46627: PUSH
46628: LD_INT 1
46630: ARRAY
46631: PPUSH
46632: LD_EXP 17
46636: PUSH
46637: LD_VAR 0 1
46641: ARRAY
46642: PUSH
46643: LD_VAR 0 2
46647: ARRAY
46648: PUSH
46649: LD_INT 2
46651: ARRAY
46652: PPUSH
46653: CALL_OW 458
46657: AND
46658: IFFALSE 46752
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
46660: LD_EXP 17
46664: PUSH
46665: LD_VAR 0 1
46669: ARRAY
46670: PUSH
46671: LD_VAR 0 2
46675: ARRAY
46676: PUSH
46677: LD_INT 1
46679: ARRAY
46680: PPUSH
46681: LD_EXP 17
46685: PUSH
46686: LD_VAR 0 1
46690: ARRAY
46691: PUSH
46692: LD_VAR 0 2
46696: ARRAY
46697: PUSH
46698: LD_INT 2
46700: ARRAY
46701: PPUSH
46702: LD_VAR 0 3
46706: PPUSH
46707: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
46711: LD_ADDR_EXP 17
46715: PUSH
46716: LD_EXP 17
46720: PPUSH
46721: LD_VAR 0 1
46725: PPUSH
46726: LD_EXP 17
46730: PUSH
46731: LD_VAR 0 1
46735: ARRAY
46736: PPUSH
46737: LD_VAR 0 2
46741: PPUSH
46742: CALL_OW 3
46746: PPUSH
46747: CALL_OW 1
46751: ST_TO_ADDR
// end ; end ;
46752: GO 46503
46754: POP
46755: POP
// end ;
46756: GO 46421
46758: POP
46759: POP
// end ;
46760: PPOPN 4
46762: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
46763: LD_INT 0
46765: PPUSH
46766: PPUSH
// result := false ;
46767: LD_ADDR_VAR 0 4
46771: PUSH
46772: LD_INT 0
46774: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
46775: LD_VAR 0 1
46779: PPUSH
46780: CALL_OW 264
46784: PUSH
46785: LD_INT 81
46787: EQUAL
46788: NOT
46789: IFFALSE 46793
// exit ;
46791: GO 47033
// index := GetElementIndex ( minersList , unit ) ;
46793: LD_ADDR_VAR 0 5
46797: PUSH
46798: LD_EXP 16
46802: PPUSH
46803: LD_VAR 0 1
46807: PPUSH
46808: CALL 7692 0 2
46812: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
46813: LD_EXP 17
46817: PUSH
46818: LD_VAR 0 5
46822: ARRAY
46823: PUSH
46824: LD_EXP 18
46828: GREATEREQUAL
46829: IFFALSE 46833
// exit ;
46831: GO 47033
// ComMoveXY ( unit , x , y ) ;
46833: LD_VAR 0 1
46837: PPUSH
46838: LD_VAR 0 2
46842: PPUSH
46843: LD_VAR 0 3
46847: PPUSH
46848: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
46852: LD_INT 35
46854: PPUSH
46855: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
46859: LD_VAR 0 1
46863: PPUSH
46864: LD_VAR 0 2
46868: PPUSH
46869: LD_VAR 0 3
46873: PPUSH
46874: CALL 38955 0 3
46878: NOT
46879: PUSH
46880: LD_VAR 0 1
46884: PPUSH
46885: CALL_OW 314
46889: AND
46890: IFFALSE 46894
// exit ;
46892: GO 47033
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
46894: LD_VAR 0 2
46898: PPUSH
46899: LD_VAR 0 3
46903: PPUSH
46904: CALL_OW 428
46908: PUSH
46909: LD_VAR 0 1
46913: EQUAL
46914: PUSH
46915: LD_VAR 0 1
46919: PPUSH
46920: CALL_OW 314
46924: NOT
46925: AND
46926: IFFALSE 46852
// PlaySoundXY ( x , y , PlantMine ) ;
46928: LD_VAR 0 2
46932: PPUSH
46933: LD_VAR 0 3
46937: PPUSH
46938: LD_STRING PlantMine
46940: PPUSH
46941: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
46945: LD_VAR 0 2
46949: PPUSH
46950: LD_VAR 0 3
46954: PPUSH
46955: LD_VAR 0 1
46959: PPUSH
46960: CALL_OW 255
46964: PPUSH
46965: LD_INT 0
46967: PPUSH
46968: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
46972: LD_ADDR_EXP 17
46976: PUSH
46977: LD_EXP 17
46981: PPUSH
46982: LD_VAR 0 5
46986: PUSH
46987: LD_EXP 17
46991: PUSH
46992: LD_VAR 0 5
46996: ARRAY
46997: PUSH
46998: LD_INT 1
47000: PLUS
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PPUSH
47006: LD_VAR 0 2
47010: PUSH
47011: LD_VAR 0 3
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PPUSH
47020: CALL 7907 0 3
47024: ST_TO_ADDR
// result := true ;
47025: LD_ADDR_VAR 0 4
47029: PUSH
47030: LD_INT 1
47032: ST_TO_ADDR
// end ;
47033: LD_VAR 0 4
47037: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
47038: LD_INT 0
47040: PPUSH
47041: PPUSH
47042: PPUSH
// if not unit in minersList then
47043: LD_VAR 0 1
47047: PUSH
47048: LD_EXP 16
47052: IN
47053: NOT
47054: IFFALSE 47058
// exit ;
47056: GO 47450
// index := GetElementIndex ( minersList , unit ) ;
47058: LD_ADDR_VAR 0 6
47062: PUSH
47063: LD_EXP 16
47067: PPUSH
47068: LD_VAR 0 1
47072: PPUSH
47073: CALL 7692 0 2
47077: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
47078: LD_ADDR_VAR 0 5
47082: PUSH
47083: DOUBLE
47084: LD_EXP 17
47088: PUSH
47089: LD_VAR 0 6
47093: ARRAY
47094: INC
47095: ST_TO_ADDR
47096: LD_INT 1
47098: PUSH
47099: FOR_DOWNTO
47100: IFFALSE 47261
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
47102: LD_EXP 17
47106: PUSH
47107: LD_VAR 0 6
47111: ARRAY
47112: PUSH
47113: LD_VAR 0 5
47117: ARRAY
47118: PUSH
47119: LD_INT 1
47121: ARRAY
47122: PUSH
47123: LD_VAR 0 2
47127: EQUAL
47128: PUSH
47129: LD_EXP 17
47133: PUSH
47134: LD_VAR 0 6
47138: ARRAY
47139: PUSH
47140: LD_VAR 0 5
47144: ARRAY
47145: PUSH
47146: LD_INT 2
47148: ARRAY
47149: PUSH
47150: LD_VAR 0 3
47154: EQUAL
47155: AND
47156: IFFALSE 47259
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
47158: LD_EXP 17
47162: PUSH
47163: LD_VAR 0 6
47167: ARRAY
47168: PUSH
47169: LD_VAR 0 5
47173: ARRAY
47174: PUSH
47175: LD_INT 1
47177: ARRAY
47178: PPUSH
47179: LD_EXP 17
47183: PUSH
47184: LD_VAR 0 6
47188: ARRAY
47189: PUSH
47190: LD_VAR 0 5
47194: ARRAY
47195: PUSH
47196: LD_INT 2
47198: ARRAY
47199: PPUSH
47200: LD_VAR 0 1
47204: PPUSH
47205: CALL_OW 255
47209: PPUSH
47210: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
47214: LD_ADDR_EXP 17
47218: PUSH
47219: LD_EXP 17
47223: PPUSH
47224: LD_VAR 0 6
47228: PPUSH
47229: LD_EXP 17
47233: PUSH
47234: LD_VAR 0 6
47238: ARRAY
47239: PPUSH
47240: LD_VAR 0 5
47244: PPUSH
47245: CALL_OW 3
47249: PPUSH
47250: CALL_OW 1
47254: ST_TO_ADDR
// exit ;
47255: POP
47256: POP
47257: GO 47450
// end ; end ;
47259: GO 47099
47261: POP
47262: POP
// for i := minerMinesList [ index ] downto 1 do
47263: LD_ADDR_VAR 0 5
47267: PUSH
47268: DOUBLE
47269: LD_EXP 17
47273: PUSH
47274: LD_VAR 0 6
47278: ARRAY
47279: INC
47280: ST_TO_ADDR
47281: LD_INT 1
47283: PUSH
47284: FOR_DOWNTO
47285: IFFALSE 47448
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
47287: LD_EXP 17
47291: PUSH
47292: LD_VAR 0 6
47296: ARRAY
47297: PUSH
47298: LD_VAR 0 5
47302: ARRAY
47303: PUSH
47304: LD_INT 1
47306: ARRAY
47307: PPUSH
47308: LD_EXP 17
47312: PUSH
47313: LD_VAR 0 6
47317: ARRAY
47318: PUSH
47319: LD_VAR 0 5
47323: ARRAY
47324: PUSH
47325: LD_INT 2
47327: ARRAY
47328: PPUSH
47329: LD_VAR 0 2
47333: PPUSH
47334: LD_VAR 0 3
47338: PPUSH
47339: CALL_OW 298
47343: PUSH
47344: LD_INT 6
47346: LESS
47347: IFFALSE 47446
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
47349: LD_EXP 17
47353: PUSH
47354: LD_VAR 0 6
47358: ARRAY
47359: PUSH
47360: LD_VAR 0 5
47364: ARRAY
47365: PUSH
47366: LD_INT 1
47368: ARRAY
47369: PPUSH
47370: LD_EXP 17
47374: PUSH
47375: LD_VAR 0 6
47379: ARRAY
47380: PUSH
47381: LD_VAR 0 5
47385: ARRAY
47386: PUSH
47387: LD_INT 2
47389: ARRAY
47390: PPUSH
47391: LD_VAR 0 1
47395: PPUSH
47396: CALL_OW 255
47400: PPUSH
47401: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
47405: LD_ADDR_EXP 17
47409: PUSH
47410: LD_EXP 17
47414: PPUSH
47415: LD_VAR 0 6
47419: PPUSH
47420: LD_EXP 17
47424: PUSH
47425: LD_VAR 0 6
47429: ARRAY
47430: PPUSH
47431: LD_VAR 0 5
47435: PPUSH
47436: CALL_OW 3
47440: PPUSH
47441: CALL_OW 1
47445: ST_TO_ADDR
// end ; end ;
47446: GO 47284
47448: POP
47449: POP
// end ;
47450: LD_VAR 0 4
47454: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
47455: LD_INT 0
47457: PPUSH
47458: PPUSH
47459: PPUSH
47460: PPUSH
47461: PPUSH
47462: PPUSH
47463: PPUSH
47464: PPUSH
47465: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
47466: LD_VAR 0 1
47470: PPUSH
47471: CALL_OW 264
47475: PUSH
47476: LD_INT 81
47478: EQUAL
47479: NOT
47480: PUSH
47481: LD_VAR 0 1
47485: PUSH
47486: LD_EXP 16
47490: IN
47491: NOT
47492: OR
47493: IFFALSE 47497
// exit ;
47495: GO 47819
// index := GetElementIndex ( minersList , unit ) ;
47497: LD_ADDR_VAR 0 6
47501: PUSH
47502: LD_EXP 16
47506: PPUSH
47507: LD_VAR 0 1
47511: PPUSH
47512: CALL 7692 0 2
47516: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
47517: LD_ADDR_VAR 0 8
47521: PUSH
47522: LD_EXP 18
47526: PUSH
47527: LD_EXP 17
47531: PUSH
47532: LD_VAR 0 6
47536: ARRAY
47537: MINUS
47538: ST_TO_ADDR
// if not minesFreeAmount then
47539: LD_VAR 0 8
47543: NOT
47544: IFFALSE 47548
// exit ;
47546: GO 47819
// tmp := [ ] ;
47548: LD_ADDR_VAR 0 7
47552: PUSH
47553: EMPTY
47554: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
47555: LD_ADDR_VAR 0 5
47559: PUSH
47560: DOUBLE
47561: LD_INT 1
47563: DEC
47564: ST_TO_ADDR
47565: LD_VAR 0 8
47569: PUSH
47570: FOR_TO
47571: IFFALSE 47766
// begin _d := rand ( 0 , 5 ) ;
47573: LD_ADDR_VAR 0 11
47577: PUSH
47578: LD_INT 0
47580: PPUSH
47581: LD_INT 5
47583: PPUSH
47584: CALL_OW 12
47588: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
47589: LD_ADDR_VAR 0 12
47593: PUSH
47594: LD_INT 2
47596: PPUSH
47597: LD_INT 6
47599: PPUSH
47600: CALL_OW 12
47604: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
47605: LD_ADDR_VAR 0 9
47609: PUSH
47610: LD_VAR 0 2
47614: PPUSH
47615: LD_VAR 0 11
47619: PPUSH
47620: LD_VAR 0 12
47624: PPUSH
47625: CALL_OW 272
47629: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
47630: LD_ADDR_VAR 0 10
47634: PUSH
47635: LD_VAR 0 3
47639: PPUSH
47640: LD_VAR 0 11
47644: PPUSH
47645: LD_VAR 0 12
47649: PPUSH
47650: CALL_OW 273
47654: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
47655: LD_VAR 0 9
47659: PPUSH
47660: LD_VAR 0 10
47664: PPUSH
47665: CALL_OW 488
47669: PUSH
47670: LD_VAR 0 9
47674: PUSH
47675: LD_VAR 0 10
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_VAR 0 7
47688: IN
47689: NOT
47690: AND
47691: PUSH
47692: LD_VAR 0 9
47696: PPUSH
47697: LD_VAR 0 10
47701: PPUSH
47702: CALL_OW 458
47706: NOT
47707: AND
47708: IFFALSE 47750
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
47710: LD_ADDR_VAR 0 7
47714: PUSH
47715: LD_VAR 0 7
47719: PPUSH
47720: LD_VAR 0 7
47724: PUSH
47725: LD_INT 1
47727: PLUS
47728: PPUSH
47729: LD_VAR 0 9
47733: PUSH
47734: LD_VAR 0 10
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PPUSH
47743: CALL_OW 1
47747: ST_TO_ADDR
47748: GO 47764
// i := i - 1 ;
47750: LD_ADDR_VAR 0 5
47754: PUSH
47755: LD_VAR 0 5
47759: PUSH
47760: LD_INT 1
47762: MINUS
47763: ST_TO_ADDR
// end ;
47764: GO 47570
47766: POP
47767: POP
// for i in tmp do
47768: LD_ADDR_VAR 0 5
47772: PUSH
47773: LD_VAR 0 7
47777: PUSH
47778: FOR_IN
47779: IFFALSE 47817
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
47781: LD_VAR 0 1
47785: PPUSH
47786: LD_VAR 0 5
47790: PUSH
47791: LD_INT 1
47793: ARRAY
47794: PPUSH
47795: LD_VAR 0 5
47799: PUSH
47800: LD_INT 2
47802: ARRAY
47803: PPUSH
47804: CALL 46763 0 3
47808: NOT
47809: IFFALSE 47815
// exit ;
47811: POP
47812: POP
47813: GO 47819
47815: GO 47778
47817: POP
47818: POP
// end ;
47819: LD_VAR 0 4
47823: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
47824: LD_INT 0
47826: PPUSH
47827: PPUSH
47828: PPUSH
47829: PPUSH
47830: PPUSH
47831: PPUSH
47832: PPUSH
// if not GetClass ( unit ) = class_sniper then
47833: LD_VAR 0 1
47837: PPUSH
47838: CALL_OW 257
47842: PUSH
47843: LD_INT 5
47845: EQUAL
47846: NOT
47847: IFFALSE 47851
// exit ;
47849: GO 48239
// dist := 8 ;
47851: LD_ADDR_VAR 0 5
47855: PUSH
47856: LD_INT 8
47858: ST_TO_ADDR
// viewRange := 12 ;
47859: LD_ADDR_VAR 0 7
47863: PUSH
47864: LD_INT 12
47866: ST_TO_ADDR
// side := GetSide ( unit ) ;
47867: LD_ADDR_VAR 0 6
47871: PUSH
47872: LD_VAR 0 1
47876: PPUSH
47877: CALL_OW 255
47881: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
47882: LD_INT 61
47884: PPUSH
47885: LD_VAR 0 6
47889: PPUSH
47890: CALL_OW 321
47894: PUSH
47895: LD_INT 2
47897: EQUAL
47898: IFFALSE 47908
// viewRange := 16 ;
47900: LD_ADDR_VAR 0 7
47904: PUSH
47905: LD_INT 16
47907: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
47908: LD_VAR 0 1
47912: PPUSH
47913: LD_VAR 0 2
47917: PPUSH
47918: LD_VAR 0 3
47922: PPUSH
47923: CALL_OW 297
47927: PUSH
47928: LD_VAR 0 5
47932: GREATER
47933: IFFALSE 48012
// begin ComMoveXY ( unit , x , y ) ;
47935: LD_VAR 0 1
47939: PPUSH
47940: LD_VAR 0 2
47944: PPUSH
47945: LD_VAR 0 3
47949: PPUSH
47950: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
47954: LD_INT 35
47956: PPUSH
47957: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
47961: LD_VAR 0 1
47965: PPUSH
47966: LD_VAR 0 2
47970: PPUSH
47971: LD_VAR 0 3
47975: PPUSH
47976: CALL 38955 0 3
47980: NOT
47981: IFFALSE 47985
// exit ;
47983: GO 48239
// until GetDistUnitXY ( unit , x , y ) < dist ;
47985: LD_VAR 0 1
47989: PPUSH
47990: LD_VAR 0 2
47994: PPUSH
47995: LD_VAR 0 3
47999: PPUSH
48000: CALL_OW 297
48004: PUSH
48005: LD_VAR 0 5
48009: LESS
48010: IFFALSE 47954
// end ; ComTurnXY ( unit , x , y ) ;
48012: LD_VAR 0 1
48016: PPUSH
48017: LD_VAR 0 2
48021: PPUSH
48022: LD_VAR 0 3
48026: PPUSH
48027: CALL_OW 118
// wait ( 5 ) ;
48031: LD_INT 5
48033: PPUSH
48034: CALL_OW 67
// _d := GetDir ( unit ) ;
48038: LD_ADDR_VAR 0 10
48042: PUSH
48043: LD_VAR 0 1
48047: PPUSH
48048: CALL_OW 254
48052: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
48053: LD_ADDR_VAR 0 8
48057: PUSH
48058: LD_VAR 0 1
48062: PPUSH
48063: CALL_OW 250
48067: PPUSH
48068: LD_VAR 0 10
48072: PPUSH
48073: LD_VAR 0 5
48077: PPUSH
48078: CALL_OW 272
48082: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
48083: LD_ADDR_VAR 0 9
48087: PUSH
48088: LD_VAR 0 1
48092: PPUSH
48093: CALL_OW 251
48097: PPUSH
48098: LD_VAR 0 10
48102: PPUSH
48103: LD_VAR 0 5
48107: PPUSH
48108: CALL_OW 273
48112: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48113: LD_VAR 0 8
48117: PPUSH
48118: LD_VAR 0 9
48122: PPUSH
48123: CALL_OW 488
48127: NOT
48128: IFFALSE 48132
// exit ;
48130: GO 48239
// ComAnimCustom ( unit , 1 ) ;
48132: LD_VAR 0 1
48136: PPUSH
48137: LD_INT 1
48139: PPUSH
48140: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
48144: LD_VAR 0 8
48148: PPUSH
48149: LD_VAR 0 9
48153: PPUSH
48154: LD_VAR 0 6
48158: PPUSH
48159: LD_VAR 0 7
48163: PPUSH
48164: CALL_OW 330
// repeat wait ( 1 ) ;
48168: LD_INT 1
48170: PPUSH
48171: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
48175: LD_VAR 0 1
48179: PPUSH
48180: CALL_OW 316
48184: PUSH
48185: LD_VAR 0 1
48189: PPUSH
48190: CALL_OW 314
48194: OR
48195: PUSH
48196: LD_VAR 0 1
48200: PPUSH
48201: CALL_OW 302
48205: NOT
48206: OR
48207: PUSH
48208: LD_VAR 0 1
48212: PPUSH
48213: CALL_OW 301
48217: OR
48218: IFFALSE 48168
// RemoveSeeing ( _x , _y , side ) ;
48220: LD_VAR 0 8
48224: PPUSH
48225: LD_VAR 0 9
48229: PPUSH
48230: LD_VAR 0 6
48234: PPUSH
48235: CALL_OW 331
// end ; end_of_file
48239: LD_VAR 0 4
48243: RET
// every 0 0$1 do
48244: GO 48246
48246: DISABLE
// begin enable ;
48247: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
48248: LD_STRING updateTimer(
48250: PUSH
48251: LD_OWVAR 1
48255: STR
48256: PUSH
48257: LD_STRING );
48259: STR
48260: PPUSH
48261: CALL_OW 559
// end ;
48265: END
// export function SOS_MapStart ( ) ; begin
48266: LD_INT 0
48268: PPUSH
// if streamModeActive then
48269: LD_EXP 19
48273: IFFALSE 48282
// DefineStreamItems ( true ) ;
48275: LD_INT 1
48277: PPUSH
48278: CALL 49936 0 1
// UpdateFactoryWaypoints ( ) ;
48282: CALL 62797 0 0
// UpdateWarehouseGatheringPoints ( ) ;
48286: CALL 63054 0 0
// end ;
48290: LD_VAR 0 1
48294: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
48295: LD_INT 0
48297: PPUSH
// if p2 = 100 then
48298: LD_VAR 0 2
48302: PUSH
48303: LD_INT 100
48305: EQUAL
48306: IFFALSE 49309
// begin if not StreamModeActive then
48308: LD_EXP 19
48312: NOT
48313: IFFALSE 48323
// StreamModeActive := true ;
48315: LD_ADDR_EXP 19
48319: PUSH
48320: LD_INT 1
48322: ST_TO_ADDR
// if p3 = 0 then
48323: LD_VAR 0 3
48327: PUSH
48328: LD_INT 0
48330: EQUAL
48331: IFFALSE 48337
// InitStreamMode ;
48333: CALL 49472 0 0
// if p3 = 1 then
48337: LD_VAR 0 3
48341: PUSH
48342: LD_INT 1
48344: EQUAL
48345: IFFALSE 48355
// sRocket := true ;
48347: LD_ADDR_EXP 24
48351: PUSH
48352: LD_INT 1
48354: ST_TO_ADDR
// if p3 = 2 then
48355: LD_VAR 0 3
48359: PUSH
48360: LD_INT 2
48362: EQUAL
48363: IFFALSE 48373
// sSpeed := true ;
48365: LD_ADDR_EXP 23
48369: PUSH
48370: LD_INT 1
48372: ST_TO_ADDR
// if p3 = 3 then
48373: LD_VAR 0 3
48377: PUSH
48378: LD_INT 3
48380: EQUAL
48381: IFFALSE 48391
// sEngine := true ;
48383: LD_ADDR_EXP 25
48387: PUSH
48388: LD_INT 1
48390: ST_TO_ADDR
// if p3 = 4 then
48391: LD_VAR 0 3
48395: PUSH
48396: LD_INT 4
48398: EQUAL
48399: IFFALSE 48409
// sSpec := true ;
48401: LD_ADDR_EXP 22
48405: PUSH
48406: LD_INT 1
48408: ST_TO_ADDR
// if p3 = 5 then
48409: LD_VAR 0 3
48413: PUSH
48414: LD_INT 5
48416: EQUAL
48417: IFFALSE 48427
// sLevel := true ;
48419: LD_ADDR_EXP 26
48423: PUSH
48424: LD_INT 1
48426: ST_TO_ADDR
// if p3 = 6 then
48427: LD_VAR 0 3
48431: PUSH
48432: LD_INT 6
48434: EQUAL
48435: IFFALSE 48445
// sArmoury := true ;
48437: LD_ADDR_EXP 27
48441: PUSH
48442: LD_INT 1
48444: ST_TO_ADDR
// if p3 = 7 then
48445: LD_VAR 0 3
48449: PUSH
48450: LD_INT 7
48452: EQUAL
48453: IFFALSE 48463
// sRadar := true ;
48455: LD_ADDR_EXP 28
48459: PUSH
48460: LD_INT 1
48462: ST_TO_ADDR
// if p3 = 8 then
48463: LD_VAR 0 3
48467: PUSH
48468: LD_INT 8
48470: EQUAL
48471: IFFALSE 48481
// sBunker := true ;
48473: LD_ADDR_EXP 29
48477: PUSH
48478: LD_INT 1
48480: ST_TO_ADDR
// if p3 = 9 then
48481: LD_VAR 0 3
48485: PUSH
48486: LD_INT 9
48488: EQUAL
48489: IFFALSE 48499
// sHack := true ;
48491: LD_ADDR_EXP 30
48495: PUSH
48496: LD_INT 1
48498: ST_TO_ADDR
// if p3 = 10 then
48499: LD_VAR 0 3
48503: PUSH
48504: LD_INT 10
48506: EQUAL
48507: IFFALSE 48517
// sFire := true ;
48509: LD_ADDR_EXP 31
48513: PUSH
48514: LD_INT 1
48516: ST_TO_ADDR
// if p3 = 11 then
48517: LD_VAR 0 3
48521: PUSH
48522: LD_INT 11
48524: EQUAL
48525: IFFALSE 48535
// sRefresh := true ;
48527: LD_ADDR_EXP 32
48531: PUSH
48532: LD_INT 1
48534: ST_TO_ADDR
// if p3 = 12 then
48535: LD_VAR 0 3
48539: PUSH
48540: LD_INT 12
48542: EQUAL
48543: IFFALSE 48553
// sExp := true ;
48545: LD_ADDR_EXP 33
48549: PUSH
48550: LD_INT 1
48552: ST_TO_ADDR
// if p3 = 13 then
48553: LD_VAR 0 3
48557: PUSH
48558: LD_INT 13
48560: EQUAL
48561: IFFALSE 48571
// sDepot := true ;
48563: LD_ADDR_EXP 34
48567: PUSH
48568: LD_INT 1
48570: ST_TO_ADDR
// if p3 = 14 then
48571: LD_VAR 0 3
48575: PUSH
48576: LD_INT 14
48578: EQUAL
48579: IFFALSE 48589
// sFlag := true ;
48581: LD_ADDR_EXP 35
48585: PUSH
48586: LD_INT 1
48588: ST_TO_ADDR
// if p3 = 15 then
48589: LD_VAR 0 3
48593: PUSH
48594: LD_INT 15
48596: EQUAL
48597: IFFALSE 48607
// sKamikadze := true ;
48599: LD_ADDR_EXP 43
48603: PUSH
48604: LD_INT 1
48606: ST_TO_ADDR
// if p3 = 16 then
48607: LD_VAR 0 3
48611: PUSH
48612: LD_INT 16
48614: EQUAL
48615: IFFALSE 48625
// sTroll := true ;
48617: LD_ADDR_EXP 44
48621: PUSH
48622: LD_INT 1
48624: ST_TO_ADDR
// if p3 = 17 then
48625: LD_VAR 0 3
48629: PUSH
48630: LD_INT 17
48632: EQUAL
48633: IFFALSE 48643
// sSlow := true ;
48635: LD_ADDR_EXP 45
48639: PUSH
48640: LD_INT 1
48642: ST_TO_ADDR
// if p3 = 18 then
48643: LD_VAR 0 3
48647: PUSH
48648: LD_INT 18
48650: EQUAL
48651: IFFALSE 48661
// sLack := true ;
48653: LD_ADDR_EXP 46
48657: PUSH
48658: LD_INT 1
48660: ST_TO_ADDR
// if p3 = 19 then
48661: LD_VAR 0 3
48665: PUSH
48666: LD_INT 19
48668: EQUAL
48669: IFFALSE 48679
// sTank := true ;
48671: LD_ADDR_EXP 48
48675: PUSH
48676: LD_INT 1
48678: ST_TO_ADDR
// if p3 = 20 then
48679: LD_VAR 0 3
48683: PUSH
48684: LD_INT 20
48686: EQUAL
48687: IFFALSE 48697
// sRemote := true ;
48689: LD_ADDR_EXP 49
48693: PUSH
48694: LD_INT 1
48696: ST_TO_ADDR
// if p3 = 21 then
48697: LD_VAR 0 3
48701: PUSH
48702: LD_INT 21
48704: EQUAL
48705: IFFALSE 48715
// sPowell := true ;
48707: LD_ADDR_EXP 50
48711: PUSH
48712: LD_INT 1
48714: ST_TO_ADDR
// if p3 = 22 then
48715: LD_VAR 0 3
48719: PUSH
48720: LD_INT 22
48722: EQUAL
48723: IFFALSE 48733
// sTeleport := true ;
48725: LD_ADDR_EXP 53
48729: PUSH
48730: LD_INT 1
48732: ST_TO_ADDR
// if p3 = 23 then
48733: LD_VAR 0 3
48737: PUSH
48738: LD_INT 23
48740: EQUAL
48741: IFFALSE 48751
// sOilTower := true ;
48743: LD_ADDR_EXP 55
48747: PUSH
48748: LD_INT 1
48750: ST_TO_ADDR
// if p3 = 24 then
48751: LD_VAR 0 3
48755: PUSH
48756: LD_INT 24
48758: EQUAL
48759: IFFALSE 48769
// sShovel := true ;
48761: LD_ADDR_EXP 56
48765: PUSH
48766: LD_INT 1
48768: ST_TO_ADDR
// if p3 = 25 then
48769: LD_VAR 0 3
48773: PUSH
48774: LD_INT 25
48776: EQUAL
48777: IFFALSE 48787
// sSheik := true ;
48779: LD_ADDR_EXP 57
48783: PUSH
48784: LD_INT 1
48786: ST_TO_ADDR
// if p3 = 26 then
48787: LD_VAR 0 3
48791: PUSH
48792: LD_INT 26
48794: EQUAL
48795: IFFALSE 48805
// sEarthquake := true ;
48797: LD_ADDR_EXP 59
48801: PUSH
48802: LD_INT 1
48804: ST_TO_ADDR
// if p3 = 27 then
48805: LD_VAR 0 3
48809: PUSH
48810: LD_INT 27
48812: EQUAL
48813: IFFALSE 48823
// sAI := true ;
48815: LD_ADDR_EXP 60
48819: PUSH
48820: LD_INT 1
48822: ST_TO_ADDR
// if p3 = 28 then
48823: LD_VAR 0 3
48827: PUSH
48828: LD_INT 28
48830: EQUAL
48831: IFFALSE 48841
// sCargo := true ;
48833: LD_ADDR_EXP 63
48837: PUSH
48838: LD_INT 1
48840: ST_TO_ADDR
// if p3 = 29 then
48841: LD_VAR 0 3
48845: PUSH
48846: LD_INT 29
48848: EQUAL
48849: IFFALSE 48859
// sDLaser := true ;
48851: LD_ADDR_EXP 64
48855: PUSH
48856: LD_INT 1
48858: ST_TO_ADDR
// if p3 = 30 then
48859: LD_VAR 0 3
48863: PUSH
48864: LD_INT 30
48866: EQUAL
48867: IFFALSE 48877
// sExchange := true ;
48869: LD_ADDR_EXP 65
48873: PUSH
48874: LD_INT 1
48876: ST_TO_ADDR
// if p3 = 31 then
48877: LD_VAR 0 3
48881: PUSH
48882: LD_INT 31
48884: EQUAL
48885: IFFALSE 48895
// sFac := true ;
48887: LD_ADDR_EXP 66
48891: PUSH
48892: LD_INT 1
48894: ST_TO_ADDR
// if p3 = 32 then
48895: LD_VAR 0 3
48899: PUSH
48900: LD_INT 32
48902: EQUAL
48903: IFFALSE 48913
// sPower := true ;
48905: LD_ADDR_EXP 67
48909: PUSH
48910: LD_INT 1
48912: ST_TO_ADDR
// if p3 = 33 then
48913: LD_VAR 0 3
48917: PUSH
48918: LD_INT 33
48920: EQUAL
48921: IFFALSE 48931
// sRandom := true ;
48923: LD_ADDR_EXP 68
48927: PUSH
48928: LD_INT 1
48930: ST_TO_ADDR
// if p3 = 34 then
48931: LD_VAR 0 3
48935: PUSH
48936: LD_INT 34
48938: EQUAL
48939: IFFALSE 48949
// sShield := true ;
48941: LD_ADDR_EXP 69
48945: PUSH
48946: LD_INT 1
48948: ST_TO_ADDR
// if p3 = 35 then
48949: LD_VAR 0 3
48953: PUSH
48954: LD_INT 35
48956: EQUAL
48957: IFFALSE 48967
// sTime := true ;
48959: LD_ADDR_EXP 70
48963: PUSH
48964: LD_INT 1
48966: ST_TO_ADDR
// if p3 = 36 then
48967: LD_VAR 0 3
48971: PUSH
48972: LD_INT 36
48974: EQUAL
48975: IFFALSE 48985
// sTools := true ;
48977: LD_ADDR_EXP 71
48981: PUSH
48982: LD_INT 1
48984: ST_TO_ADDR
// if p3 = 101 then
48985: LD_VAR 0 3
48989: PUSH
48990: LD_INT 101
48992: EQUAL
48993: IFFALSE 49003
// sSold := true ;
48995: LD_ADDR_EXP 36
48999: PUSH
49000: LD_INT 1
49002: ST_TO_ADDR
// if p3 = 102 then
49003: LD_VAR 0 3
49007: PUSH
49008: LD_INT 102
49010: EQUAL
49011: IFFALSE 49021
// sDiff := true ;
49013: LD_ADDR_EXP 37
49017: PUSH
49018: LD_INT 1
49020: ST_TO_ADDR
// if p3 = 103 then
49021: LD_VAR 0 3
49025: PUSH
49026: LD_INT 103
49028: EQUAL
49029: IFFALSE 49039
// sFog := true ;
49031: LD_ADDR_EXP 40
49035: PUSH
49036: LD_INT 1
49038: ST_TO_ADDR
// if p3 = 104 then
49039: LD_VAR 0 3
49043: PUSH
49044: LD_INT 104
49046: EQUAL
49047: IFFALSE 49057
// sReset := true ;
49049: LD_ADDR_EXP 41
49053: PUSH
49054: LD_INT 1
49056: ST_TO_ADDR
// if p3 = 105 then
49057: LD_VAR 0 3
49061: PUSH
49062: LD_INT 105
49064: EQUAL
49065: IFFALSE 49075
// sSun := true ;
49067: LD_ADDR_EXP 42
49071: PUSH
49072: LD_INT 1
49074: ST_TO_ADDR
// if p3 = 106 then
49075: LD_VAR 0 3
49079: PUSH
49080: LD_INT 106
49082: EQUAL
49083: IFFALSE 49093
// sTiger := true ;
49085: LD_ADDR_EXP 38
49089: PUSH
49090: LD_INT 1
49092: ST_TO_ADDR
// if p3 = 107 then
49093: LD_VAR 0 3
49097: PUSH
49098: LD_INT 107
49100: EQUAL
49101: IFFALSE 49111
// sBomb := true ;
49103: LD_ADDR_EXP 39
49107: PUSH
49108: LD_INT 1
49110: ST_TO_ADDR
// if p3 = 108 then
49111: LD_VAR 0 3
49115: PUSH
49116: LD_INT 108
49118: EQUAL
49119: IFFALSE 49129
// sWound := true ;
49121: LD_ADDR_EXP 47
49125: PUSH
49126: LD_INT 1
49128: ST_TO_ADDR
// if p3 = 109 then
49129: LD_VAR 0 3
49133: PUSH
49134: LD_INT 109
49136: EQUAL
49137: IFFALSE 49147
// sBetray := true ;
49139: LD_ADDR_EXP 51
49143: PUSH
49144: LD_INT 1
49146: ST_TO_ADDR
// if p3 = 110 then
49147: LD_VAR 0 3
49151: PUSH
49152: LD_INT 110
49154: EQUAL
49155: IFFALSE 49165
// sContamin := true ;
49157: LD_ADDR_EXP 52
49161: PUSH
49162: LD_INT 1
49164: ST_TO_ADDR
// if p3 = 111 then
49165: LD_VAR 0 3
49169: PUSH
49170: LD_INT 111
49172: EQUAL
49173: IFFALSE 49183
// sOil := true ;
49175: LD_ADDR_EXP 54
49179: PUSH
49180: LD_INT 1
49182: ST_TO_ADDR
// if p3 = 112 then
49183: LD_VAR 0 3
49187: PUSH
49188: LD_INT 112
49190: EQUAL
49191: IFFALSE 49201
// sStu := true ;
49193: LD_ADDR_EXP 58
49197: PUSH
49198: LD_INT 1
49200: ST_TO_ADDR
// if p3 = 113 then
49201: LD_VAR 0 3
49205: PUSH
49206: LD_INT 113
49208: EQUAL
49209: IFFALSE 49219
// sBazooka := true ;
49211: LD_ADDR_EXP 61
49215: PUSH
49216: LD_INT 1
49218: ST_TO_ADDR
// if p3 = 114 then
49219: LD_VAR 0 3
49223: PUSH
49224: LD_INT 114
49226: EQUAL
49227: IFFALSE 49237
// sMortar := true ;
49229: LD_ADDR_EXP 62
49233: PUSH
49234: LD_INT 1
49236: ST_TO_ADDR
// if p3 = 115 then
49237: LD_VAR 0 3
49241: PUSH
49242: LD_INT 115
49244: EQUAL
49245: IFFALSE 49255
// sRanger := true ;
49247: LD_ADDR_EXP 72
49251: PUSH
49252: LD_INT 1
49254: ST_TO_ADDR
// if p3 = 116 then
49255: LD_VAR 0 3
49259: PUSH
49260: LD_INT 116
49262: EQUAL
49263: IFFALSE 49273
// sComputer := true ;
49265: LD_ADDR_EXP 73
49269: PUSH
49270: LD_INT 1
49272: ST_TO_ADDR
// if p3 = 117 then
49273: LD_VAR 0 3
49277: PUSH
49278: LD_INT 117
49280: EQUAL
49281: IFFALSE 49291
// s30 := true ;
49283: LD_ADDR_EXP 74
49287: PUSH
49288: LD_INT 1
49290: ST_TO_ADDR
// if p3 = 118 then
49291: LD_VAR 0 3
49295: PUSH
49296: LD_INT 118
49298: EQUAL
49299: IFFALSE 49309
// s60 := true ;
49301: LD_ADDR_EXP 75
49305: PUSH
49306: LD_INT 1
49308: ST_TO_ADDR
// end ; if p2 = 101 then
49309: LD_VAR 0 2
49313: PUSH
49314: LD_INT 101
49316: EQUAL
49317: IFFALSE 49445
// begin case p3 of 1 :
49319: LD_VAR 0 3
49323: PUSH
49324: LD_INT 1
49326: DOUBLE
49327: EQUAL
49328: IFTRUE 49332
49330: GO 49339
49332: POP
// hHackUnlimitedResources ; 2 :
49333: CALL 61543 0 0
49337: GO 49445
49339: LD_INT 2
49341: DOUBLE
49342: EQUAL
49343: IFTRUE 49347
49345: GO 49354
49347: POP
// hHackSetLevel10 ; 3 :
49348: CALL 61676 0 0
49352: GO 49445
49354: LD_INT 3
49356: DOUBLE
49357: EQUAL
49358: IFTRUE 49362
49360: GO 49369
49362: POP
// hHackSetLevel10YourUnits ; 4 :
49363: CALL 61761 0 0
49367: GO 49445
49369: LD_INT 4
49371: DOUBLE
49372: EQUAL
49373: IFTRUE 49377
49375: GO 49384
49377: POP
// hHackInvincible ; 5 :
49378: CALL 62209 0 0
49382: GO 49445
49384: LD_INT 5
49386: DOUBLE
49387: EQUAL
49388: IFTRUE 49392
49390: GO 49399
49392: POP
// hHackInvisible ; 6 :
49393: CALL 62320 0 0
49397: GO 49445
49399: LD_INT 6
49401: DOUBLE
49402: EQUAL
49403: IFTRUE 49407
49405: GO 49414
49407: POP
// hHackChangeYourSide ; 7 :
49408: CALL 62377 0 0
49412: GO 49445
49414: LD_INT 7
49416: DOUBLE
49417: EQUAL
49418: IFTRUE 49422
49420: GO 49429
49422: POP
// hHackChangeUnitSide ; 8 :
49423: CALL 62419 0 0
49427: GO 49445
49429: LD_INT 8
49431: DOUBLE
49432: EQUAL
49433: IFTRUE 49437
49435: GO 49444
49437: POP
// hHackFog ; end ;
49438: CALL 62520 0 0
49442: GO 49445
49444: POP
// end ; end ;
49445: LD_VAR 0 7
49449: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
49450: GO 49452
49452: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
49453: LD_STRING initStreamRollete();
49455: PPUSH
49456: CALL_OW 559
// InitStreamMode ;
49460: CALL 49472 0 0
// DefineStreamItems ( false ) ;
49464: LD_INT 0
49466: PPUSH
49467: CALL 49936 0 1
// end ;
49471: END
// function InitStreamMode ; begin
49472: LD_INT 0
49474: PPUSH
// streamModeActive := false ;
49475: LD_ADDR_EXP 19
49479: PUSH
49480: LD_INT 0
49482: ST_TO_ADDR
// normalCounter := 36 ;
49483: LD_ADDR_EXP 20
49487: PUSH
49488: LD_INT 36
49490: ST_TO_ADDR
// hardcoreCounter := 18 ;
49491: LD_ADDR_EXP 21
49495: PUSH
49496: LD_INT 18
49498: ST_TO_ADDR
// sRocket := false ;
49499: LD_ADDR_EXP 24
49503: PUSH
49504: LD_INT 0
49506: ST_TO_ADDR
// sSpeed := false ;
49507: LD_ADDR_EXP 23
49511: PUSH
49512: LD_INT 0
49514: ST_TO_ADDR
// sEngine := false ;
49515: LD_ADDR_EXP 25
49519: PUSH
49520: LD_INT 0
49522: ST_TO_ADDR
// sSpec := false ;
49523: LD_ADDR_EXP 22
49527: PUSH
49528: LD_INT 0
49530: ST_TO_ADDR
// sLevel := false ;
49531: LD_ADDR_EXP 26
49535: PUSH
49536: LD_INT 0
49538: ST_TO_ADDR
// sArmoury := false ;
49539: LD_ADDR_EXP 27
49543: PUSH
49544: LD_INT 0
49546: ST_TO_ADDR
// sRadar := false ;
49547: LD_ADDR_EXP 28
49551: PUSH
49552: LD_INT 0
49554: ST_TO_ADDR
// sBunker := false ;
49555: LD_ADDR_EXP 29
49559: PUSH
49560: LD_INT 0
49562: ST_TO_ADDR
// sHack := false ;
49563: LD_ADDR_EXP 30
49567: PUSH
49568: LD_INT 0
49570: ST_TO_ADDR
// sFire := false ;
49571: LD_ADDR_EXP 31
49575: PUSH
49576: LD_INT 0
49578: ST_TO_ADDR
// sRefresh := false ;
49579: LD_ADDR_EXP 32
49583: PUSH
49584: LD_INT 0
49586: ST_TO_ADDR
// sExp := false ;
49587: LD_ADDR_EXP 33
49591: PUSH
49592: LD_INT 0
49594: ST_TO_ADDR
// sDepot := false ;
49595: LD_ADDR_EXP 34
49599: PUSH
49600: LD_INT 0
49602: ST_TO_ADDR
// sFlag := false ;
49603: LD_ADDR_EXP 35
49607: PUSH
49608: LD_INT 0
49610: ST_TO_ADDR
// sKamikadze := false ;
49611: LD_ADDR_EXP 43
49615: PUSH
49616: LD_INT 0
49618: ST_TO_ADDR
// sTroll := false ;
49619: LD_ADDR_EXP 44
49623: PUSH
49624: LD_INT 0
49626: ST_TO_ADDR
// sSlow := false ;
49627: LD_ADDR_EXP 45
49631: PUSH
49632: LD_INT 0
49634: ST_TO_ADDR
// sLack := false ;
49635: LD_ADDR_EXP 46
49639: PUSH
49640: LD_INT 0
49642: ST_TO_ADDR
// sTank := false ;
49643: LD_ADDR_EXP 48
49647: PUSH
49648: LD_INT 0
49650: ST_TO_ADDR
// sRemote := false ;
49651: LD_ADDR_EXP 49
49655: PUSH
49656: LD_INT 0
49658: ST_TO_ADDR
// sPowell := false ;
49659: LD_ADDR_EXP 50
49663: PUSH
49664: LD_INT 0
49666: ST_TO_ADDR
// sTeleport := false ;
49667: LD_ADDR_EXP 53
49671: PUSH
49672: LD_INT 0
49674: ST_TO_ADDR
// sOilTower := false ;
49675: LD_ADDR_EXP 55
49679: PUSH
49680: LD_INT 0
49682: ST_TO_ADDR
// sShovel := false ;
49683: LD_ADDR_EXP 56
49687: PUSH
49688: LD_INT 0
49690: ST_TO_ADDR
// sSheik := false ;
49691: LD_ADDR_EXP 57
49695: PUSH
49696: LD_INT 0
49698: ST_TO_ADDR
// sEarthquake := false ;
49699: LD_ADDR_EXP 59
49703: PUSH
49704: LD_INT 0
49706: ST_TO_ADDR
// sAI := false ;
49707: LD_ADDR_EXP 60
49711: PUSH
49712: LD_INT 0
49714: ST_TO_ADDR
// sCargo := false ;
49715: LD_ADDR_EXP 63
49719: PUSH
49720: LD_INT 0
49722: ST_TO_ADDR
// sDLaser := false ;
49723: LD_ADDR_EXP 64
49727: PUSH
49728: LD_INT 0
49730: ST_TO_ADDR
// sExchange := false ;
49731: LD_ADDR_EXP 65
49735: PUSH
49736: LD_INT 0
49738: ST_TO_ADDR
// sFac := false ;
49739: LD_ADDR_EXP 66
49743: PUSH
49744: LD_INT 0
49746: ST_TO_ADDR
// sPower := false ;
49747: LD_ADDR_EXP 67
49751: PUSH
49752: LD_INT 0
49754: ST_TO_ADDR
// sRandom := false ;
49755: LD_ADDR_EXP 68
49759: PUSH
49760: LD_INT 0
49762: ST_TO_ADDR
// sShield := false ;
49763: LD_ADDR_EXP 69
49767: PUSH
49768: LD_INT 0
49770: ST_TO_ADDR
// sTime := false ;
49771: LD_ADDR_EXP 70
49775: PUSH
49776: LD_INT 0
49778: ST_TO_ADDR
// sTools := false ;
49779: LD_ADDR_EXP 71
49783: PUSH
49784: LD_INT 0
49786: ST_TO_ADDR
// sSold := false ;
49787: LD_ADDR_EXP 36
49791: PUSH
49792: LD_INT 0
49794: ST_TO_ADDR
// sDiff := false ;
49795: LD_ADDR_EXP 37
49799: PUSH
49800: LD_INT 0
49802: ST_TO_ADDR
// sFog := false ;
49803: LD_ADDR_EXP 40
49807: PUSH
49808: LD_INT 0
49810: ST_TO_ADDR
// sReset := false ;
49811: LD_ADDR_EXP 41
49815: PUSH
49816: LD_INT 0
49818: ST_TO_ADDR
// sSun := false ;
49819: LD_ADDR_EXP 42
49823: PUSH
49824: LD_INT 0
49826: ST_TO_ADDR
// sTiger := false ;
49827: LD_ADDR_EXP 38
49831: PUSH
49832: LD_INT 0
49834: ST_TO_ADDR
// sBomb := false ;
49835: LD_ADDR_EXP 39
49839: PUSH
49840: LD_INT 0
49842: ST_TO_ADDR
// sWound := false ;
49843: LD_ADDR_EXP 47
49847: PUSH
49848: LD_INT 0
49850: ST_TO_ADDR
// sBetray := false ;
49851: LD_ADDR_EXP 51
49855: PUSH
49856: LD_INT 0
49858: ST_TO_ADDR
// sContamin := false ;
49859: LD_ADDR_EXP 52
49863: PUSH
49864: LD_INT 0
49866: ST_TO_ADDR
// sOil := false ;
49867: LD_ADDR_EXP 54
49871: PUSH
49872: LD_INT 0
49874: ST_TO_ADDR
// sStu := false ;
49875: LD_ADDR_EXP 58
49879: PUSH
49880: LD_INT 0
49882: ST_TO_ADDR
// sBazooka := false ;
49883: LD_ADDR_EXP 61
49887: PUSH
49888: LD_INT 0
49890: ST_TO_ADDR
// sMortar := false ;
49891: LD_ADDR_EXP 62
49895: PUSH
49896: LD_INT 0
49898: ST_TO_ADDR
// sRanger := false ;
49899: LD_ADDR_EXP 72
49903: PUSH
49904: LD_INT 0
49906: ST_TO_ADDR
// sComputer := false ;
49907: LD_ADDR_EXP 73
49911: PUSH
49912: LD_INT 0
49914: ST_TO_ADDR
// s30 := false ;
49915: LD_ADDR_EXP 74
49919: PUSH
49920: LD_INT 0
49922: ST_TO_ADDR
// s60 := false ;
49923: LD_ADDR_EXP 75
49927: PUSH
49928: LD_INT 0
49930: ST_TO_ADDR
// end ;
49931: LD_VAR 0 1
49935: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
49936: LD_INT 0
49938: PPUSH
49939: PPUSH
49940: PPUSH
49941: PPUSH
49942: PPUSH
49943: PPUSH
49944: PPUSH
// result := [ ] ;
49945: LD_ADDR_VAR 0 2
49949: PUSH
49950: EMPTY
49951: ST_TO_ADDR
// if campaign_id = 1 then
49952: LD_OWVAR 69
49956: PUSH
49957: LD_INT 1
49959: EQUAL
49960: IFFALSE 53126
// begin case mission_number of 1 :
49962: LD_OWVAR 70
49966: PUSH
49967: LD_INT 1
49969: DOUBLE
49970: EQUAL
49971: IFTRUE 49975
49973: GO 50051
49975: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
49976: LD_ADDR_VAR 0 2
49980: PUSH
49981: LD_INT 2
49983: PUSH
49984: LD_INT 4
49986: PUSH
49987: LD_INT 11
49989: PUSH
49990: LD_INT 12
49992: PUSH
49993: LD_INT 15
49995: PUSH
49996: LD_INT 16
49998: PUSH
49999: LD_INT 22
50001: PUSH
50002: LD_INT 23
50004: PUSH
50005: LD_INT 26
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 101
50021: PUSH
50022: LD_INT 102
50024: PUSH
50025: LD_INT 106
50027: PUSH
50028: LD_INT 116
50030: PUSH
50031: LD_INT 117
50033: PUSH
50034: LD_INT 118
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: ST_TO_ADDR
50049: GO 53124
50051: LD_INT 2
50053: DOUBLE
50054: EQUAL
50055: IFTRUE 50059
50057: GO 50143
50059: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
50060: LD_ADDR_VAR 0 2
50064: PUSH
50065: LD_INT 2
50067: PUSH
50068: LD_INT 4
50070: PUSH
50071: LD_INT 11
50073: PUSH
50074: LD_INT 12
50076: PUSH
50077: LD_INT 15
50079: PUSH
50080: LD_INT 16
50082: PUSH
50083: LD_INT 22
50085: PUSH
50086: LD_INT 23
50088: PUSH
50089: LD_INT 26
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 101
50105: PUSH
50106: LD_INT 102
50108: PUSH
50109: LD_INT 105
50111: PUSH
50112: LD_INT 106
50114: PUSH
50115: LD_INT 108
50117: PUSH
50118: LD_INT 116
50120: PUSH
50121: LD_INT 117
50123: PUSH
50124: LD_INT 118
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: ST_TO_ADDR
50141: GO 53124
50143: LD_INT 3
50145: DOUBLE
50146: EQUAL
50147: IFTRUE 50151
50149: GO 50239
50151: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
50152: LD_ADDR_VAR 0 2
50156: PUSH
50157: LD_INT 2
50159: PUSH
50160: LD_INT 4
50162: PUSH
50163: LD_INT 5
50165: PUSH
50166: LD_INT 11
50168: PUSH
50169: LD_INT 12
50171: PUSH
50172: LD_INT 15
50174: PUSH
50175: LD_INT 16
50177: PUSH
50178: LD_INT 22
50180: PUSH
50181: LD_INT 26
50183: PUSH
50184: LD_INT 36
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 101
50201: PUSH
50202: LD_INT 102
50204: PUSH
50205: LD_INT 105
50207: PUSH
50208: LD_INT 106
50210: PUSH
50211: LD_INT 108
50213: PUSH
50214: LD_INT 116
50216: PUSH
50217: LD_INT 117
50219: PUSH
50220: LD_INT 118
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: ST_TO_ADDR
50237: GO 53124
50239: LD_INT 4
50241: DOUBLE
50242: EQUAL
50243: IFTRUE 50247
50245: GO 50343
50247: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
50248: LD_ADDR_VAR 0 2
50252: PUSH
50253: LD_INT 2
50255: PUSH
50256: LD_INT 4
50258: PUSH
50259: LD_INT 5
50261: PUSH
50262: LD_INT 8
50264: PUSH
50265: LD_INT 11
50267: PUSH
50268: LD_INT 12
50270: PUSH
50271: LD_INT 15
50273: PUSH
50274: LD_INT 16
50276: PUSH
50277: LD_INT 22
50279: PUSH
50280: LD_INT 23
50282: PUSH
50283: LD_INT 26
50285: PUSH
50286: LD_INT 36
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 101
50305: PUSH
50306: LD_INT 102
50308: PUSH
50309: LD_INT 105
50311: PUSH
50312: LD_INT 106
50314: PUSH
50315: LD_INT 108
50317: PUSH
50318: LD_INT 116
50320: PUSH
50321: LD_INT 117
50323: PUSH
50324: LD_INT 118
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: ST_TO_ADDR
50341: GO 53124
50343: LD_INT 5
50345: DOUBLE
50346: EQUAL
50347: IFTRUE 50351
50349: GO 50463
50351: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
50352: LD_ADDR_VAR 0 2
50356: PUSH
50357: LD_INT 2
50359: PUSH
50360: LD_INT 4
50362: PUSH
50363: LD_INT 5
50365: PUSH
50366: LD_INT 6
50368: PUSH
50369: LD_INT 8
50371: PUSH
50372: LD_INT 11
50374: PUSH
50375: LD_INT 12
50377: PUSH
50378: LD_INT 15
50380: PUSH
50381: LD_INT 16
50383: PUSH
50384: LD_INT 22
50386: PUSH
50387: LD_INT 23
50389: PUSH
50390: LD_INT 25
50392: PUSH
50393: LD_INT 26
50395: PUSH
50396: LD_INT 36
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 101
50417: PUSH
50418: LD_INT 102
50420: PUSH
50421: LD_INT 105
50423: PUSH
50424: LD_INT 106
50426: PUSH
50427: LD_INT 108
50429: PUSH
50430: LD_INT 109
50432: PUSH
50433: LD_INT 112
50435: PUSH
50436: LD_INT 116
50438: PUSH
50439: LD_INT 117
50441: PUSH
50442: LD_INT 118
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: ST_TO_ADDR
50461: GO 53124
50463: LD_INT 6
50465: DOUBLE
50466: EQUAL
50467: IFTRUE 50471
50469: GO 50603
50471: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
50472: LD_ADDR_VAR 0 2
50476: PUSH
50477: LD_INT 2
50479: PUSH
50480: LD_INT 4
50482: PUSH
50483: LD_INT 5
50485: PUSH
50486: LD_INT 6
50488: PUSH
50489: LD_INT 8
50491: PUSH
50492: LD_INT 11
50494: PUSH
50495: LD_INT 12
50497: PUSH
50498: LD_INT 15
50500: PUSH
50501: LD_INT 16
50503: PUSH
50504: LD_INT 20
50506: PUSH
50507: LD_INT 21
50509: PUSH
50510: LD_INT 22
50512: PUSH
50513: LD_INT 23
50515: PUSH
50516: LD_INT 25
50518: PUSH
50519: LD_INT 26
50521: PUSH
50522: LD_INT 30
50524: PUSH
50525: LD_INT 31
50527: PUSH
50528: LD_INT 32
50530: PUSH
50531: LD_INT 36
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 101
50557: PUSH
50558: LD_INT 102
50560: PUSH
50561: LD_INT 105
50563: PUSH
50564: LD_INT 106
50566: PUSH
50567: LD_INT 108
50569: PUSH
50570: LD_INT 109
50572: PUSH
50573: LD_INT 112
50575: PUSH
50576: LD_INT 116
50578: PUSH
50579: LD_INT 117
50581: PUSH
50582: LD_INT 118
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: ST_TO_ADDR
50601: GO 53124
50603: LD_INT 7
50605: DOUBLE
50606: EQUAL
50607: IFTRUE 50611
50609: GO 50723
50611: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
50612: LD_ADDR_VAR 0 2
50616: PUSH
50617: LD_INT 2
50619: PUSH
50620: LD_INT 4
50622: PUSH
50623: LD_INT 5
50625: PUSH
50626: LD_INT 7
50628: PUSH
50629: LD_INT 11
50631: PUSH
50632: LD_INT 12
50634: PUSH
50635: LD_INT 15
50637: PUSH
50638: LD_INT 16
50640: PUSH
50641: LD_INT 20
50643: PUSH
50644: LD_INT 21
50646: PUSH
50647: LD_INT 22
50649: PUSH
50650: LD_INT 23
50652: PUSH
50653: LD_INT 25
50655: PUSH
50656: LD_INT 26
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 101
50677: PUSH
50678: LD_INT 102
50680: PUSH
50681: LD_INT 103
50683: PUSH
50684: LD_INT 105
50686: PUSH
50687: LD_INT 106
50689: PUSH
50690: LD_INT 108
50692: PUSH
50693: LD_INT 112
50695: PUSH
50696: LD_INT 116
50698: PUSH
50699: LD_INT 117
50701: PUSH
50702: LD_INT 118
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: ST_TO_ADDR
50721: GO 53124
50723: LD_INT 8
50725: DOUBLE
50726: EQUAL
50727: IFTRUE 50731
50729: GO 50871
50731: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
50732: LD_ADDR_VAR 0 2
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: LD_INT 4
50742: PUSH
50743: LD_INT 5
50745: PUSH
50746: LD_INT 6
50748: PUSH
50749: LD_INT 7
50751: PUSH
50752: LD_INT 8
50754: PUSH
50755: LD_INT 11
50757: PUSH
50758: LD_INT 12
50760: PUSH
50761: LD_INT 15
50763: PUSH
50764: LD_INT 16
50766: PUSH
50767: LD_INT 20
50769: PUSH
50770: LD_INT 21
50772: PUSH
50773: LD_INT 22
50775: PUSH
50776: LD_INT 23
50778: PUSH
50779: LD_INT 25
50781: PUSH
50782: LD_INT 26
50784: PUSH
50785: LD_INT 30
50787: PUSH
50788: LD_INT 31
50790: PUSH
50791: LD_INT 32
50793: PUSH
50794: LD_INT 36
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 101
50821: PUSH
50822: LD_INT 102
50824: PUSH
50825: LD_INT 103
50827: PUSH
50828: LD_INT 105
50830: PUSH
50831: LD_INT 106
50833: PUSH
50834: LD_INT 108
50836: PUSH
50837: LD_INT 109
50839: PUSH
50840: LD_INT 112
50842: PUSH
50843: LD_INT 116
50845: PUSH
50846: LD_INT 117
50848: PUSH
50849: LD_INT 118
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: ST_TO_ADDR
50869: GO 53124
50871: LD_INT 9
50873: DOUBLE
50874: EQUAL
50875: IFTRUE 50879
50877: GO 51027
50879: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
50880: LD_ADDR_VAR 0 2
50884: PUSH
50885: LD_INT 2
50887: PUSH
50888: LD_INT 4
50890: PUSH
50891: LD_INT 5
50893: PUSH
50894: LD_INT 6
50896: PUSH
50897: LD_INT 7
50899: PUSH
50900: LD_INT 8
50902: PUSH
50903: LD_INT 11
50905: PUSH
50906: LD_INT 12
50908: PUSH
50909: LD_INT 15
50911: PUSH
50912: LD_INT 16
50914: PUSH
50915: LD_INT 20
50917: PUSH
50918: LD_INT 21
50920: PUSH
50921: LD_INT 22
50923: PUSH
50924: LD_INT 23
50926: PUSH
50927: LD_INT 25
50929: PUSH
50930: LD_INT 26
50932: PUSH
50933: LD_INT 28
50935: PUSH
50936: LD_INT 30
50938: PUSH
50939: LD_INT 31
50941: PUSH
50942: LD_INT 32
50944: PUSH
50945: LD_INT 36
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 101
50973: PUSH
50974: LD_INT 102
50976: PUSH
50977: LD_INT 103
50979: PUSH
50980: LD_INT 105
50982: PUSH
50983: LD_INT 106
50985: PUSH
50986: LD_INT 108
50988: PUSH
50989: LD_INT 109
50991: PUSH
50992: LD_INT 112
50994: PUSH
50995: LD_INT 114
50997: PUSH
50998: LD_INT 116
51000: PUSH
51001: LD_INT 117
51003: PUSH
51004: LD_INT 118
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: ST_TO_ADDR
51025: GO 53124
51027: LD_INT 10
51029: DOUBLE
51030: EQUAL
51031: IFTRUE 51035
51033: GO 51231
51035: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
51036: LD_ADDR_VAR 0 2
51040: PUSH
51041: LD_INT 2
51043: PUSH
51044: LD_INT 4
51046: PUSH
51047: LD_INT 5
51049: PUSH
51050: LD_INT 6
51052: PUSH
51053: LD_INT 7
51055: PUSH
51056: LD_INT 8
51058: PUSH
51059: LD_INT 9
51061: PUSH
51062: LD_INT 10
51064: PUSH
51065: LD_INT 11
51067: PUSH
51068: LD_INT 12
51070: PUSH
51071: LD_INT 13
51073: PUSH
51074: LD_INT 14
51076: PUSH
51077: LD_INT 15
51079: PUSH
51080: LD_INT 16
51082: PUSH
51083: LD_INT 17
51085: PUSH
51086: LD_INT 18
51088: PUSH
51089: LD_INT 19
51091: PUSH
51092: LD_INT 20
51094: PUSH
51095: LD_INT 21
51097: PUSH
51098: LD_INT 22
51100: PUSH
51101: LD_INT 23
51103: PUSH
51104: LD_INT 24
51106: PUSH
51107: LD_INT 25
51109: PUSH
51110: LD_INT 26
51112: PUSH
51113: LD_INT 28
51115: PUSH
51116: LD_INT 30
51118: PUSH
51119: LD_INT 31
51121: PUSH
51122: LD_INT 32
51124: PUSH
51125: LD_INT 36
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 101
51161: PUSH
51162: LD_INT 102
51164: PUSH
51165: LD_INT 103
51167: PUSH
51168: LD_INT 104
51170: PUSH
51171: LD_INT 105
51173: PUSH
51174: LD_INT 106
51176: PUSH
51177: LD_INT 107
51179: PUSH
51180: LD_INT 108
51182: PUSH
51183: LD_INT 109
51185: PUSH
51186: LD_INT 110
51188: PUSH
51189: LD_INT 111
51191: PUSH
51192: LD_INT 112
51194: PUSH
51195: LD_INT 114
51197: PUSH
51198: LD_INT 116
51200: PUSH
51201: LD_INT 117
51203: PUSH
51204: LD_INT 118
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: ST_TO_ADDR
51229: GO 53124
51231: LD_INT 11
51233: DOUBLE
51234: EQUAL
51235: IFTRUE 51239
51237: GO 51443
51239: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
51240: LD_ADDR_VAR 0 2
51244: PUSH
51245: LD_INT 2
51247: PUSH
51248: LD_INT 3
51250: PUSH
51251: LD_INT 4
51253: PUSH
51254: LD_INT 5
51256: PUSH
51257: LD_INT 6
51259: PUSH
51260: LD_INT 7
51262: PUSH
51263: LD_INT 8
51265: PUSH
51266: LD_INT 9
51268: PUSH
51269: LD_INT 10
51271: PUSH
51272: LD_INT 11
51274: PUSH
51275: LD_INT 12
51277: PUSH
51278: LD_INT 13
51280: PUSH
51281: LD_INT 14
51283: PUSH
51284: LD_INT 15
51286: PUSH
51287: LD_INT 16
51289: PUSH
51290: LD_INT 17
51292: PUSH
51293: LD_INT 18
51295: PUSH
51296: LD_INT 19
51298: PUSH
51299: LD_INT 20
51301: PUSH
51302: LD_INT 21
51304: PUSH
51305: LD_INT 22
51307: PUSH
51308: LD_INT 23
51310: PUSH
51311: LD_INT 24
51313: PUSH
51314: LD_INT 25
51316: PUSH
51317: LD_INT 26
51319: PUSH
51320: LD_INT 28
51322: PUSH
51323: LD_INT 30
51325: PUSH
51326: LD_INT 31
51328: PUSH
51329: LD_INT 32
51331: PUSH
51332: LD_INT 34
51334: PUSH
51335: LD_INT 36
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 101
51373: PUSH
51374: LD_INT 102
51376: PUSH
51377: LD_INT 103
51379: PUSH
51380: LD_INT 104
51382: PUSH
51383: LD_INT 105
51385: PUSH
51386: LD_INT 106
51388: PUSH
51389: LD_INT 107
51391: PUSH
51392: LD_INT 108
51394: PUSH
51395: LD_INT 109
51397: PUSH
51398: LD_INT 110
51400: PUSH
51401: LD_INT 111
51403: PUSH
51404: LD_INT 112
51406: PUSH
51407: LD_INT 114
51409: PUSH
51410: LD_INT 116
51412: PUSH
51413: LD_INT 117
51415: PUSH
51416: LD_INT 118
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: ST_TO_ADDR
51441: GO 53124
51443: LD_INT 12
51445: DOUBLE
51446: EQUAL
51447: IFTRUE 51451
51449: GO 51671
51451: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
51452: LD_ADDR_VAR 0 2
51456: PUSH
51457: LD_INT 1
51459: PUSH
51460: LD_INT 2
51462: PUSH
51463: LD_INT 3
51465: PUSH
51466: LD_INT 4
51468: PUSH
51469: LD_INT 5
51471: PUSH
51472: LD_INT 6
51474: PUSH
51475: LD_INT 7
51477: PUSH
51478: LD_INT 8
51480: PUSH
51481: LD_INT 9
51483: PUSH
51484: LD_INT 10
51486: PUSH
51487: LD_INT 11
51489: PUSH
51490: LD_INT 12
51492: PUSH
51493: LD_INT 13
51495: PUSH
51496: LD_INT 14
51498: PUSH
51499: LD_INT 15
51501: PUSH
51502: LD_INT 16
51504: PUSH
51505: LD_INT 17
51507: PUSH
51508: LD_INT 18
51510: PUSH
51511: LD_INT 19
51513: PUSH
51514: LD_INT 20
51516: PUSH
51517: LD_INT 21
51519: PUSH
51520: LD_INT 22
51522: PUSH
51523: LD_INT 23
51525: PUSH
51526: LD_INT 24
51528: PUSH
51529: LD_INT 25
51531: PUSH
51532: LD_INT 26
51534: PUSH
51535: LD_INT 27
51537: PUSH
51538: LD_INT 28
51540: PUSH
51541: LD_INT 30
51543: PUSH
51544: LD_INT 31
51546: PUSH
51547: LD_INT 32
51549: PUSH
51550: LD_INT 33
51552: PUSH
51553: LD_INT 34
51555: PUSH
51556: LD_INT 36
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 101
51597: PUSH
51598: LD_INT 102
51600: PUSH
51601: LD_INT 103
51603: PUSH
51604: LD_INT 104
51606: PUSH
51607: LD_INT 105
51609: PUSH
51610: LD_INT 106
51612: PUSH
51613: LD_INT 107
51615: PUSH
51616: LD_INT 108
51618: PUSH
51619: LD_INT 109
51621: PUSH
51622: LD_INT 110
51624: PUSH
51625: LD_INT 111
51627: PUSH
51628: LD_INT 112
51630: PUSH
51631: LD_INT 113
51633: PUSH
51634: LD_INT 114
51636: PUSH
51637: LD_INT 116
51639: PUSH
51640: LD_INT 117
51642: PUSH
51643: LD_INT 118
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: ST_TO_ADDR
51669: GO 53124
51671: LD_INT 13
51673: DOUBLE
51674: EQUAL
51675: IFTRUE 51679
51677: GO 51887
51679: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
51680: LD_ADDR_VAR 0 2
51684: PUSH
51685: LD_INT 1
51687: PUSH
51688: LD_INT 2
51690: PUSH
51691: LD_INT 3
51693: PUSH
51694: LD_INT 4
51696: PUSH
51697: LD_INT 5
51699: PUSH
51700: LD_INT 8
51702: PUSH
51703: LD_INT 9
51705: PUSH
51706: LD_INT 10
51708: PUSH
51709: LD_INT 11
51711: PUSH
51712: LD_INT 12
51714: PUSH
51715: LD_INT 14
51717: PUSH
51718: LD_INT 15
51720: PUSH
51721: LD_INT 16
51723: PUSH
51724: LD_INT 17
51726: PUSH
51727: LD_INT 18
51729: PUSH
51730: LD_INT 19
51732: PUSH
51733: LD_INT 20
51735: PUSH
51736: LD_INT 21
51738: PUSH
51739: LD_INT 22
51741: PUSH
51742: LD_INT 23
51744: PUSH
51745: LD_INT 24
51747: PUSH
51748: LD_INT 25
51750: PUSH
51751: LD_INT 26
51753: PUSH
51754: LD_INT 27
51756: PUSH
51757: LD_INT 28
51759: PUSH
51760: LD_INT 30
51762: PUSH
51763: LD_INT 31
51765: PUSH
51766: LD_INT 32
51768: PUSH
51769: LD_INT 33
51771: PUSH
51772: LD_INT 34
51774: PUSH
51775: LD_INT 36
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 101
51813: PUSH
51814: LD_INT 102
51816: PUSH
51817: LD_INT 103
51819: PUSH
51820: LD_INT 104
51822: PUSH
51823: LD_INT 105
51825: PUSH
51826: LD_INT 106
51828: PUSH
51829: LD_INT 107
51831: PUSH
51832: LD_INT 108
51834: PUSH
51835: LD_INT 109
51837: PUSH
51838: LD_INT 110
51840: PUSH
51841: LD_INT 111
51843: PUSH
51844: LD_INT 112
51846: PUSH
51847: LD_INT 113
51849: PUSH
51850: LD_INT 114
51852: PUSH
51853: LD_INT 116
51855: PUSH
51856: LD_INT 117
51858: PUSH
51859: LD_INT 118
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: ST_TO_ADDR
51885: GO 53124
51887: LD_INT 14
51889: DOUBLE
51890: EQUAL
51891: IFTRUE 51895
51893: GO 52119
51895: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
51896: LD_ADDR_VAR 0 2
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: LD_INT 3
51909: PUSH
51910: LD_INT 4
51912: PUSH
51913: LD_INT 5
51915: PUSH
51916: LD_INT 6
51918: PUSH
51919: LD_INT 7
51921: PUSH
51922: LD_INT 8
51924: PUSH
51925: LD_INT 9
51927: PUSH
51928: LD_INT 10
51930: PUSH
51931: LD_INT 11
51933: PUSH
51934: LD_INT 12
51936: PUSH
51937: LD_INT 13
51939: PUSH
51940: LD_INT 14
51942: PUSH
51943: LD_INT 15
51945: PUSH
51946: LD_INT 16
51948: PUSH
51949: LD_INT 17
51951: PUSH
51952: LD_INT 18
51954: PUSH
51955: LD_INT 19
51957: PUSH
51958: LD_INT 20
51960: PUSH
51961: LD_INT 21
51963: PUSH
51964: LD_INT 22
51966: PUSH
51967: LD_INT 23
51969: PUSH
51970: LD_INT 24
51972: PUSH
51973: LD_INT 25
51975: PUSH
51976: LD_INT 26
51978: PUSH
51979: LD_INT 27
51981: PUSH
51982: LD_INT 28
51984: PUSH
51985: LD_INT 29
51987: PUSH
51988: LD_INT 30
51990: PUSH
51991: LD_INT 31
51993: PUSH
51994: LD_INT 32
51996: PUSH
51997: LD_INT 33
51999: PUSH
52000: LD_INT 34
52002: PUSH
52003: LD_INT 36
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 101
52045: PUSH
52046: LD_INT 102
52048: PUSH
52049: LD_INT 103
52051: PUSH
52052: LD_INT 104
52054: PUSH
52055: LD_INT 105
52057: PUSH
52058: LD_INT 106
52060: PUSH
52061: LD_INT 107
52063: PUSH
52064: LD_INT 108
52066: PUSH
52067: LD_INT 109
52069: PUSH
52070: LD_INT 110
52072: PUSH
52073: LD_INT 111
52075: PUSH
52076: LD_INT 112
52078: PUSH
52079: LD_INT 113
52081: PUSH
52082: LD_INT 114
52084: PUSH
52085: LD_INT 116
52087: PUSH
52088: LD_INT 117
52090: PUSH
52091: LD_INT 118
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: ST_TO_ADDR
52117: GO 53124
52119: LD_INT 15
52121: DOUBLE
52122: EQUAL
52123: IFTRUE 52127
52125: GO 52351
52127: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
52128: LD_ADDR_VAR 0 2
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: LD_INT 2
52138: PUSH
52139: LD_INT 3
52141: PUSH
52142: LD_INT 4
52144: PUSH
52145: LD_INT 5
52147: PUSH
52148: LD_INT 6
52150: PUSH
52151: LD_INT 7
52153: PUSH
52154: LD_INT 8
52156: PUSH
52157: LD_INT 9
52159: PUSH
52160: LD_INT 10
52162: PUSH
52163: LD_INT 11
52165: PUSH
52166: LD_INT 12
52168: PUSH
52169: LD_INT 13
52171: PUSH
52172: LD_INT 14
52174: PUSH
52175: LD_INT 15
52177: PUSH
52178: LD_INT 16
52180: PUSH
52181: LD_INT 17
52183: PUSH
52184: LD_INT 18
52186: PUSH
52187: LD_INT 19
52189: PUSH
52190: LD_INT 20
52192: PUSH
52193: LD_INT 21
52195: PUSH
52196: LD_INT 22
52198: PUSH
52199: LD_INT 23
52201: PUSH
52202: LD_INT 24
52204: PUSH
52205: LD_INT 25
52207: PUSH
52208: LD_INT 26
52210: PUSH
52211: LD_INT 27
52213: PUSH
52214: LD_INT 28
52216: PUSH
52217: LD_INT 29
52219: PUSH
52220: LD_INT 30
52222: PUSH
52223: LD_INT 31
52225: PUSH
52226: LD_INT 32
52228: PUSH
52229: LD_INT 33
52231: PUSH
52232: LD_INT 34
52234: PUSH
52235: LD_INT 36
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 101
52277: PUSH
52278: LD_INT 102
52280: PUSH
52281: LD_INT 103
52283: PUSH
52284: LD_INT 104
52286: PUSH
52287: LD_INT 105
52289: PUSH
52290: LD_INT 106
52292: PUSH
52293: LD_INT 107
52295: PUSH
52296: LD_INT 108
52298: PUSH
52299: LD_INT 109
52301: PUSH
52302: LD_INT 110
52304: PUSH
52305: LD_INT 111
52307: PUSH
52308: LD_INT 112
52310: PUSH
52311: LD_INT 113
52313: PUSH
52314: LD_INT 114
52316: PUSH
52317: LD_INT 116
52319: PUSH
52320: LD_INT 117
52322: PUSH
52323: LD_INT 118
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: ST_TO_ADDR
52349: GO 53124
52351: LD_INT 16
52353: DOUBLE
52354: EQUAL
52355: IFTRUE 52359
52357: GO 52495
52359: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
52360: LD_ADDR_VAR 0 2
52364: PUSH
52365: LD_INT 2
52367: PUSH
52368: LD_INT 4
52370: PUSH
52371: LD_INT 5
52373: PUSH
52374: LD_INT 7
52376: PUSH
52377: LD_INT 11
52379: PUSH
52380: LD_INT 12
52382: PUSH
52383: LD_INT 15
52385: PUSH
52386: LD_INT 16
52388: PUSH
52389: LD_INT 20
52391: PUSH
52392: LD_INT 21
52394: PUSH
52395: LD_INT 22
52397: PUSH
52398: LD_INT 23
52400: PUSH
52401: LD_INT 25
52403: PUSH
52404: LD_INT 26
52406: PUSH
52407: LD_INT 30
52409: PUSH
52410: LD_INT 31
52412: PUSH
52413: LD_INT 32
52415: PUSH
52416: LD_INT 33
52418: PUSH
52419: LD_INT 34
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 101
52445: PUSH
52446: LD_INT 102
52448: PUSH
52449: LD_INT 103
52451: PUSH
52452: LD_INT 106
52454: PUSH
52455: LD_INT 108
52457: PUSH
52458: LD_INT 112
52460: PUSH
52461: LD_INT 113
52463: PUSH
52464: LD_INT 114
52466: PUSH
52467: LD_INT 116
52469: PUSH
52470: LD_INT 117
52472: PUSH
52473: LD_INT 118
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: ST_TO_ADDR
52493: GO 53124
52495: LD_INT 17
52497: DOUBLE
52498: EQUAL
52499: IFTRUE 52503
52501: GO 52727
52503: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
52504: LD_ADDR_VAR 0 2
52508: PUSH
52509: LD_INT 1
52511: PUSH
52512: LD_INT 2
52514: PUSH
52515: LD_INT 3
52517: PUSH
52518: LD_INT 4
52520: PUSH
52521: LD_INT 5
52523: PUSH
52524: LD_INT 6
52526: PUSH
52527: LD_INT 7
52529: PUSH
52530: LD_INT 8
52532: PUSH
52533: LD_INT 9
52535: PUSH
52536: LD_INT 10
52538: PUSH
52539: LD_INT 11
52541: PUSH
52542: LD_INT 12
52544: PUSH
52545: LD_INT 13
52547: PUSH
52548: LD_INT 14
52550: PUSH
52551: LD_INT 15
52553: PUSH
52554: LD_INT 16
52556: PUSH
52557: LD_INT 17
52559: PUSH
52560: LD_INT 18
52562: PUSH
52563: LD_INT 19
52565: PUSH
52566: LD_INT 20
52568: PUSH
52569: LD_INT 21
52571: PUSH
52572: LD_INT 22
52574: PUSH
52575: LD_INT 23
52577: PUSH
52578: LD_INT 24
52580: PUSH
52581: LD_INT 25
52583: PUSH
52584: LD_INT 26
52586: PUSH
52587: LD_INT 27
52589: PUSH
52590: LD_INT 28
52592: PUSH
52593: LD_INT 29
52595: PUSH
52596: LD_INT 30
52598: PUSH
52599: LD_INT 31
52601: PUSH
52602: LD_INT 32
52604: PUSH
52605: LD_INT 33
52607: PUSH
52608: LD_INT 34
52610: PUSH
52611: LD_INT 36
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 101
52653: PUSH
52654: LD_INT 102
52656: PUSH
52657: LD_INT 103
52659: PUSH
52660: LD_INT 104
52662: PUSH
52663: LD_INT 105
52665: PUSH
52666: LD_INT 106
52668: PUSH
52669: LD_INT 107
52671: PUSH
52672: LD_INT 108
52674: PUSH
52675: LD_INT 109
52677: PUSH
52678: LD_INT 110
52680: PUSH
52681: LD_INT 111
52683: PUSH
52684: LD_INT 112
52686: PUSH
52687: LD_INT 113
52689: PUSH
52690: LD_INT 114
52692: PUSH
52693: LD_INT 116
52695: PUSH
52696: LD_INT 117
52698: PUSH
52699: LD_INT 118
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: ST_TO_ADDR
52725: GO 53124
52727: LD_INT 18
52729: DOUBLE
52730: EQUAL
52731: IFTRUE 52735
52733: GO 52883
52735: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
52736: LD_ADDR_VAR 0 2
52740: PUSH
52741: LD_INT 2
52743: PUSH
52744: LD_INT 4
52746: PUSH
52747: LD_INT 5
52749: PUSH
52750: LD_INT 7
52752: PUSH
52753: LD_INT 11
52755: PUSH
52756: LD_INT 12
52758: PUSH
52759: LD_INT 15
52761: PUSH
52762: LD_INT 16
52764: PUSH
52765: LD_INT 20
52767: PUSH
52768: LD_INT 21
52770: PUSH
52771: LD_INT 22
52773: PUSH
52774: LD_INT 23
52776: PUSH
52777: LD_INT 25
52779: PUSH
52780: LD_INT 26
52782: PUSH
52783: LD_INT 30
52785: PUSH
52786: LD_INT 31
52788: PUSH
52789: LD_INT 32
52791: PUSH
52792: LD_INT 33
52794: PUSH
52795: LD_INT 34
52797: PUSH
52798: LD_INT 35
52800: PUSH
52801: LD_INT 36
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 101
52829: PUSH
52830: LD_INT 102
52832: PUSH
52833: LD_INT 103
52835: PUSH
52836: LD_INT 106
52838: PUSH
52839: LD_INT 108
52841: PUSH
52842: LD_INT 112
52844: PUSH
52845: LD_INT 113
52847: PUSH
52848: LD_INT 114
52850: PUSH
52851: LD_INT 115
52853: PUSH
52854: LD_INT 116
52856: PUSH
52857: LD_INT 117
52859: PUSH
52860: LD_INT 118
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: ST_TO_ADDR
52881: GO 53124
52883: LD_INT 19
52885: DOUBLE
52886: EQUAL
52887: IFTRUE 52891
52889: GO 53123
52891: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
52892: LD_ADDR_VAR 0 2
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: LD_INT 2
52902: PUSH
52903: LD_INT 3
52905: PUSH
52906: LD_INT 4
52908: PUSH
52909: LD_INT 5
52911: PUSH
52912: LD_INT 6
52914: PUSH
52915: LD_INT 7
52917: PUSH
52918: LD_INT 8
52920: PUSH
52921: LD_INT 9
52923: PUSH
52924: LD_INT 10
52926: PUSH
52927: LD_INT 11
52929: PUSH
52930: LD_INT 12
52932: PUSH
52933: LD_INT 13
52935: PUSH
52936: LD_INT 14
52938: PUSH
52939: LD_INT 15
52941: PUSH
52942: LD_INT 16
52944: PUSH
52945: LD_INT 17
52947: PUSH
52948: LD_INT 18
52950: PUSH
52951: LD_INT 19
52953: PUSH
52954: LD_INT 20
52956: PUSH
52957: LD_INT 21
52959: PUSH
52960: LD_INT 22
52962: PUSH
52963: LD_INT 23
52965: PUSH
52966: LD_INT 24
52968: PUSH
52969: LD_INT 25
52971: PUSH
52972: LD_INT 26
52974: PUSH
52975: LD_INT 27
52977: PUSH
52978: LD_INT 28
52980: PUSH
52981: LD_INT 29
52983: PUSH
52984: LD_INT 30
52986: PUSH
52987: LD_INT 31
52989: PUSH
52990: LD_INT 32
52992: PUSH
52993: LD_INT 33
52995: PUSH
52996: LD_INT 34
52998: PUSH
52999: LD_INT 35
53001: PUSH
53002: LD_INT 36
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 101
53045: PUSH
53046: LD_INT 102
53048: PUSH
53049: LD_INT 103
53051: PUSH
53052: LD_INT 104
53054: PUSH
53055: LD_INT 105
53057: PUSH
53058: LD_INT 106
53060: PUSH
53061: LD_INT 107
53063: PUSH
53064: LD_INT 108
53066: PUSH
53067: LD_INT 109
53069: PUSH
53070: LD_INT 110
53072: PUSH
53073: LD_INT 111
53075: PUSH
53076: LD_INT 112
53078: PUSH
53079: LD_INT 113
53081: PUSH
53082: LD_INT 114
53084: PUSH
53085: LD_INT 115
53087: PUSH
53088: LD_INT 116
53090: PUSH
53091: LD_INT 117
53093: PUSH
53094: LD_INT 118
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: ST_TO_ADDR
53121: GO 53124
53123: POP
// end else
53124: GO 53355
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
53126: LD_ADDR_VAR 0 2
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: LD_INT 2
53136: PUSH
53137: LD_INT 3
53139: PUSH
53140: LD_INT 4
53142: PUSH
53143: LD_INT 5
53145: PUSH
53146: LD_INT 6
53148: PUSH
53149: LD_INT 7
53151: PUSH
53152: LD_INT 8
53154: PUSH
53155: LD_INT 9
53157: PUSH
53158: LD_INT 10
53160: PUSH
53161: LD_INT 11
53163: PUSH
53164: LD_INT 12
53166: PUSH
53167: LD_INT 13
53169: PUSH
53170: LD_INT 14
53172: PUSH
53173: LD_INT 15
53175: PUSH
53176: LD_INT 16
53178: PUSH
53179: LD_INT 17
53181: PUSH
53182: LD_INT 18
53184: PUSH
53185: LD_INT 19
53187: PUSH
53188: LD_INT 20
53190: PUSH
53191: LD_INT 21
53193: PUSH
53194: LD_INT 22
53196: PUSH
53197: LD_INT 23
53199: PUSH
53200: LD_INT 24
53202: PUSH
53203: LD_INT 25
53205: PUSH
53206: LD_INT 26
53208: PUSH
53209: LD_INT 27
53211: PUSH
53212: LD_INT 28
53214: PUSH
53215: LD_INT 29
53217: PUSH
53218: LD_INT 30
53220: PUSH
53221: LD_INT 31
53223: PUSH
53224: LD_INT 32
53226: PUSH
53227: LD_INT 33
53229: PUSH
53230: LD_INT 34
53232: PUSH
53233: LD_INT 35
53235: PUSH
53236: LD_INT 36
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 101
53279: PUSH
53280: LD_INT 102
53282: PUSH
53283: LD_INT 103
53285: PUSH
53286: LD_INT 104
53288: PUSH
53289: LD_INT 105
53291: PUSH
53292: LD_INT 106
53294: PUSH
53295: LD_INT 107
53297: PUSH
53298: LD_INT 108
53300: PUSH
53301: LD_INT 109
53303: PUSH
53304: LD_INT 110
53306: PUSH
53307: LD_INT 111
53309: PUSH
53310: LD_INT 112
53312: PUSH
53313: LD_INT 113
53315: PUSH
53316: LD_INT 114
53318: PUSH
53319: LD_INT 115
53321: PUSH
53322: LD_INT 116
53324: PUSH
53325: LD_INT 117
53327: PUSH
53328: LD_INT 118
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: ST_TO_ADDR
// if result then
53355: LD_VAR 0 2
53359: IFFALSE 54145
// begin normal :=  ;
53361: LD_ADDR_VAR 0 5
53365: PUSH
53366: LD_STRING 
53368: ST_TO_ADDR
// hardcore :=  ;
53369: LD_ADDR_VAR 0 6
53373: PUSH
53374: LD_STRING 
53376: ST_TO_ADDR
// active :=  ;
53377: LD_ADDR_VAR 0 7
53381: PUSH
53382: LD_STRING 
53384: ST_TO_ADDR
// for i = 1 to normalCounter do
53385: LD_ADDR_VAR 0 8
53389: PUSH
53390: DOUBLE
53391: LD_INT 1
53393: DEC
53394: ST_TO_ADDR
53395: LD_EXP 20
53399: PUSH
53400: FOR_TO
53401: IFFALSE 53502
// begin tmp := 0 ;
53403: LD_ADDR_VAR 0 3
53407: PUSH
53408: LD_STRING 0
53410: ST_TO_ADDR
// if result [ 1 ] then
53411: LD_VAR 0 2
53415: PUSH
53416: LD_INT 1
53418: ARRAY
53419: IFFALSE 53484
// if result [ 1 ] [ 1 ] = i then
53421: LD_VAR 0 2
53425: PUSH
53426: LD_INT 1
53428: ARRAY
53429: PUSH
53430: LD_INT 1
53432: ARRAY
53433: PUSH
53434: LD_VAR 0 8
53438: EQUAL
53439: IFFALSE 53484
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
53441: LD_ADDR_VAR 0 2
53445: PUSH
53446: LD_VAR 0 2
53450: PPUSH
53451: LD_INT 1
53453: PPUSH
53454: LD_VAR 0 2
53458: PUSH
53459: LD_INT 1
53461: ARRAY
53462: PPUSH
53463: LD_INT 1
53465: PPUSH
53466: CALL_OW 3
53470: PPUSH
53471: CALL_OW 1
53475: ST_TO_ADDR
// tmp := 1 ;
53476: LD_ADDR_VAR 0 3
53480: PUSH
53481: LD_STRING 1
53483: ST_TO_ADDR
// end ; normal := normal & tmp ;
53484: LD_ADDR_VAR 0 5
53488: PUSH
53489: LD_VAR 0 5
53493: PUSH
53494: LD_VAR 0 3
53498: STR
53499: ST_TO_ADDR
// end ;
53500: GO 53400
53502: POP
53503: POP
// for i = 1 to hardcoreCounter do
53504: LD_ADDR_VAR 0 8
53508: PUSH
53509: DOUBLE
53510: LD_INT 1
53512: DEC
53513: ST_TO_ADDR
53514: LD_EXP 21
53518: PUSH
53519: FOR_TO
53520: IFFALSE 53625
// begin tmp := 0 ;
53522: LD_ADDR_VAR 0 3
53526: PUSH
53527: LD_STRING 0
53529: ST_TO_ADDR
// if result [ 2 ] then
53530: LD_VAR 0 2
53534: PUSH
53535: LD_INT 2
53537: ARRAY
53538: IFFALSE 53607
// if result [ 2 ] [ 1 ] = 100 + i then
53540: LD_VAR 0 2
53544: PUSH
53545: LD_INT 2
53547: ARRAY
53548: PUSH
53549: LD_INT 1
53551: ARRAY
53552: PUSH
53553: LD_INT 100
53555: PUSH
53556: LD_VAR 0 8
53560: PLUS
53561: EQUAL
53562: IFFALSE 53607
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
53564: LD_ADDR_VAR 0 2
53568: PUSH
53569: LD_VAR 0 2
53573: PPUSH
53574: LD_INT 2
53576: PPUSH
53577: LD_VAR 0 2
53581: PUSH
53582: LD_INT 2
53584: ARRAY
53585: PPUSH
53586: LD_INT 1
53588: PPUSH
53589: CALL_OW 3
53593: PPUSH
53594: CALL_OW 1
53598: ST_TO_ADDR
// tmp := 1 ;
53599: LD_ADDR_VAR 0 3
53603: PUSH
53604: LD_STRING 1
53606: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
53607: LD_ADDR_VAR 0 6
53611: PUSH
53612: LD_VAR 0 6
53616: PUSH
53617: LD_VAR 0 3
53621: STR
53622: ST_TO_ADDR
// end ;
53623: GO 53519
53625: POP
53626: POP
// if isGameLoad then
53627: LD_VAR 0 1
53631: IFFALSE 54106
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
53633: LD_ADDR_VAR 0 4
53637: PUSH
53638: LD_EXP 24
53642: PUSH
53643: LD_EXP 23
53647: PUSH
53648: LD_EXP 25
53652: PUSH
53653: LD_EXP 22
53657: PUSH
53658: LD_EXP 26
53662: PUSH
53663: LD_EXP 27
53667: PUSH
53668: LD_EXP 28
53672: PUSH
53673: LD_EXP 29
53677: PUSH
53678: LD_EXP 30
53682: PUSH
53683: LD_EXP 31
53687: PUSH
53688: LD_EXP 32
53692: PUSH
53693: LD_EXP 33
53697: PUSH
53698: LD_EXP 34
53702: PUSH
53703: LD_EXP 35
53707: PUSH
53708: LD_EXP 43
53712: PUSH
53713: LD_EXP 44
53717: PUSH
53718: LD_EXP 45
53722: PUSH
53723: LD_EXP 46
53727: PUSH
53728: LD_EXP 48
53732: PUSH
53733: LD_EXP 49
53737: PUSH
53738: LD_EXP 50
53742: PUSH
53743: LD_EXP 53
53747: PUSH
53748: LD_EXP 55
53752: PUSH
53753: LD_EXP 56
53757: PUSH
53758: LD_EXP 57
53762: PUSH
53763: LD_EXP 59
53767: PUSH
53768: LD_EXP 60
53772: PUSH
53773: LD_EXP 63
53777: PUSH
53778: LD_EXP 64
53782: PUSH
53783: LD_EXP 65
53787: PUSH
53788: LD_EXP 66
53792: PUSH
53793: LD_EXP 67
53797: PUSH
53798: LD_EXP 68
53802: PUSH
53803: LD_EXP 69
53807: PUSH
53808: LD_EXP 70
53812: PUSH
53813: LD_EXP 71
53817: PUSH
53818: LD_EXP 36
53822: PUSH
53823: LD_EXP 37
53827: PUSH
53828: LD_EXP 40
53832: PUSH
53833: LD_EXP 41
53837: PUSH
53838: LD_EXP 42
53842: PUSH
53843: LD_EXP 38
53847: PUSH
53848: LD_EXP 39
53852: PUSH
53853: LD_EXP 47
53857: PUSH
53858: LD_EXP 51
53862: PUSH
53863: LD_EXP 52
53867: PUSH
53868: LD_EXP 54
53872: PUSH
53873: LD_EXP 58
53877: PUSH
53878: LD_EXP 61
53882: PUSH
53883: LD_EXP 62
53887: PUSH
53888: LD_EXP 72
53892: PUSH
53893: LD_EXP 73
53897: PUSH
53898: LD_EXP 74
53902: PUSH
53903: LD_EXP 75
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: ST_TO_ADDR
// tmp :=  ;
53964: LD_ADDR_VAR 0 3
53968: PUSH
53969: LD_STRING 
53971: ST_TO_ADDR
// for i = 1 to normalCounter do
53972: LD_ADDR_VAR 0 8
53976: PUSH
53977: DOUBLE
53978: LD_INT 1
53980: DEC
53981: ST_TO_ADDR
53982: LD_EXP 20
53986: PUSH
53987: FOR_TO
53988: IFFALSE 54024
// begin if flags [ i ] then
53990: LD_VAR 0 4
53994: PUSH
53995: LD_VAR 0 8
53999: ARRAY
54000: IFFALSE 54022
// tmp := tmp & i & ; ;
54002: LD_ADDR_VAR 0 3
54006: PUSH
54007: LD_VAR 0 3
54011: PUSH
54012: LD_VAR 0 8
54016: STR
54017: PUSH
54018: LD_STRING ;
54020: STR
54021: ST_TO_ADDR
// end ;
54022: GO 53987
54024: POP
54025: POP
// for i = 1 to hardcoreCounter do
54026: LD_ADDR_VAR 0 8
54030: PUSH
54031: DOUBLE
54032: LD_INT 1
54034: DEC
54035: ST_TO_ADDR
54036: LD_EXP 21
54040: PUSH
54041: FOR_TO
54042: IFFALSE 54088
// begin if flags [ normalCounter + i ] then
54044: LD_VAR 0 4
54048: PUSH
54049: LD_EXP 20
54053: PUSH
54054: LD_VAR 0 8
54058: PLUS
54059: ARRAY
54060: IFFALSE 54086
// tmp := tmp & ( 100 + i ) & ; ;
54062: LD_ADDR_VAR 0 3
54066: PUSH
54067: LD_VAR 0 3
54071: PUSH
54072: LD_INT 100
54074: PUSH
54075: LD_VAR 0 8
54079: PLUS
54080: STR
54081: PUSH
54082: LD_STRING ;
54084: STR
54085: ST_TO_ADDR
// end ;
54086: GO 54041
54088: POP
54089: POP
// if tmp then
54090: LD_VAR 0 3
54094: IFFALSE 54106
// active := tmp ;
54096: LD_ADDR_VAR 0 7
54100: PUSH
54101: LD_VAR 0 3
54105: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
54106: LD_STRING getStreamItemsFromMission("
54108: PUSH
54109: LD_VAR 0 5
54113: STR
54114: PUSH
54115: LD_STRING ","
54117: STR
54118: PUSH
54119: LD_VAR 0 6
54123: STR
54124: PUSH
54125: LD_STRING ","
54127: STR
54128: PUSH
54129: LD_VAR 0 7
54133: STR
54134: PUSH
54135: LD_STRING ")
54137: STR
54138: PPUSH
54139: CALL_OW 559
// end else
54143: GO 54152
// ToLua ( getStreamItemsFromMission("","","") ) ;
54145: LD_STRING getStreamItemsFromMission("","","")
54147: PPUSH
54148: CALL_OW 559
// end ;
54152: LD_VAR 0 2
54156: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
54157: LD_EXP 19
54161: PUSH
54162: LD_EXP 24
54166: AND
54167: IFFALSE 54291
54169: GO 54171
54171: DISABLE
54172: LD_INT 0
54174: PPUSH
54175: PPUSH
// begin enable ;
54176: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
54177: LD_ADDR_VAR 0 2
54181: PUSH
54182: LD_INT 22
54184: PUSH
54185: LD_OWVAR 2
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 2
54196: PUSH
54197: LD_INT 34
54199: PUSH
54200: LD_INT 7
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 34
54209: PUSH
54210: LD_INT 45
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 34
54219: PUSH
54220: LD_INT 28
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 34
54229: PUSH
54230: LD_INT 47
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PPUSH
54248: CALL_OW 69
54252: ST_TO_ADDR
// if not tmp then
54253: LD_VAR 0 2
54257: NOT
54258: IFFALSE 54262
// exit ;
54260: GO 54291
// for i in tmp do
54262: LD_ADDR_VAR 0 1
54266: PUSH
54267: LD_VAR 0 2
54271: PUSH
54272: FOR_IN
54273: IFFALSE 54289
// begin SetLives ( i , 0 ) ;
54275: LD_VAR 0 1
54279: PPUSH
54280: LD_INT 0
54282: PPUSH
54283: CALL_OW 234
// end ;
54287: GO 54272
54289: POP
54290: POP
// end ;
54291: PPOPN 2
54293: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
54294: LD_EXP 19
54298: PUSH
54299: LD_EXP 25
54303: AND
54304: IFFALSE 54388
54306: GO 54308
54308: DISABLE
54309: LD_INT 0
54311: PPUSH
54312: PPUSH
// begin enable ;
54313: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
54314: LD_ADDR_VAR 0 2
54318: PUSH
54319: LD_INT 22
54321: PUSH
54322: LD_OWVAR 2
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 32
54333: PUSH
54334: LD_INT 3
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PPUSH
54345: CALL_OW 69
54349: ST_TO_ADDR
// if not tmp then
54350: LD_VAR 0 2
54354: NOT
54355: IFFALSE 54359
// exit ;
54357: GO 54388
// for i in tmp do
54359: LD_ADDR_VAR 0 1
54363: PUSH
54364: LD_VAR 0 2
54368: PUSH
54369: FOR_IN
54370: IFFALSE 54386
// begin SetLives ( i , 0 ) ;
54372: LD_VAR 0 1
54376: PPUSH
54377: LD_INT 0
54379: PPUSH
54380: CALL_OW 234
// end ;
54384: GO 54369
54386: POP
54387: POP
// end ;
54388: PPOPN 2
54390: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
54391: LD_EXP 19
54395: PUSH
54396: LD_EXP 22
54400: AND
54401: IFFALSE 54494
54403: GO 54405
54405: DISABLE
54406: LD_INT 0
54408: PPUSH
// begin enable ;
54409: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
54410: LD_ADDR_VAR 0 1
54414: PUSH
54415: LD_INT 22
54417: PUSH
54418: LD_OWVAR 2
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 2
54429: PUSH
54430: LD_INT 25
54432: PUSH
54433: LD_INT 5
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 25
54442: PUSH
54443: LD_INT 9
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 25
54452: PUSH
54453: LD_INT 8
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PPUSH
54470: CALL_OW 69
54474: PUSH
54475: FOR_IN
54476: IFFALSE 54492
// begin SetClass ( i , 1 ) ;
54478: LD_VAR 0 1
54482: PPUSH
54483: LD_INT 1
54485: PPUSH
54486: CALL_OW 336
// end ;
54490: GO 54475
54492: POP
54493: POP
// end ;
54494: PPOPN 1
54496: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
54497: LD_EXP 19
54501: PUSH
54502: LD_EXP 23
54506: AND
54507: PUSH
54508: LD_OWVAR 65
54512: PUSH
54513: LD_INT 7
54515: LESS
54516: AND
54517: IFFALSE 54531
54519: GO 54521
54521: DISABLE
// begin enable ;
54522: ENABLE
// game_speed := 7 ;
54523: LD_ADDR_OWVAR 65
54527: PUSH
54528: LD_INT 7
54530: ST_TO_ADDR
// end ;
54531: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
54532: LD_EXP 19
54536: PUSH
54537: LD_EXP 26
54541: AND
54542: IFFALSE 54744
54544: GO 54546
54546: DISABLE
54547: LD_INT 0
54549: PPUSH
54550: PPUSH
54551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
54552: LD_ADDR_VAR 0 3
54556: PUSH
54557: LD_INT 81
54559: PUSH
54560: LD_OWVAR 2
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 21
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PPUSH
54583: CALL_OW 69
54587: ST_TO_ADDR
// if not tmp then
54588: LD_VAR 0 3
54592: NOT
54593: IFFALSE 54597
// exit ;
54595: GO 54744
// if tmp > 5 then
54597: LD_VAR 0 3
54601: PUSH
54602: LD_INT 5
54604: GREATER
54605: IFFALSE 54617
// k := 5 else
54607: LD_ADDR_VAR 0 2
54611: PUSH
54612: LD_INT 5
54614: ST_TO_ADDR
54615: GO 54627
// k := tmp ;
54617: LD_ADDR_VAR 0 2
54621: PUSH
54622: LD_VAR 0 3
54626: ST_TO_ADDR
// for i := 1 to k do
54627: LD_ADDR_VAR 0 1
54631: PUSH
54632: DOUBLE
54633: LD_INT 1
54635: DEC
54636: ST_TO_ADDR
54637: LD_VAR 0 2
54641: PUSH
54642: FOR_TO
54643: IFFALSE 54742
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
54645: LD_VAR 0 3
54649: PUSH
54650: LD_VAR 0 1
54654: ARRAY
54655: PPUSH
54656: LD_VAR 0 1
54660: PUSH
54661: LD_INT 4
54663: MOD
54664: PUSH
54665: LD_INT 1
54667: PLUS
54668: PPUSH
54669: CALL_OW 259
54673: PUSH
54674: LD_INT 10
54676: LESS
54677: IFFALSE 54740
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
54679: LD_VAR 0 3
54683: PUSH
54684: LD_VAR 0 1
54688: ARRAY
54689: PPUSH
54690: LD_VAR 0 1
54694: PUSH
54695: LD_INT 4
54697: MOD
54698: PUSH
54699: LD_INT 1
54701: PLUS
54702: PPUSH
54703: LD_VAR 0 3
54707: PUSH
54708: LD_VAR 0 1
54712: ARRAY
54713: PPUSH
54714: LD_VAR 0 1
54718: PUSH
54719: LD_INT 4
54721: MOD
54722: PUSH
54723: LD_INT 1
54725: PLUS
54726: PPUSH
54727: CALL_OW 259
54731: PUSH
54732: LD_INT 1
54734: PLUS
54735: PPUSH
54736: CALL_OW 237
54740: GO 54642
54742: POP
54743: POP
// end ;
54744: PPOPN 3
54746: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
54747: LD_EXP 19
54751: PUSH
54752: LD_EXP 27
54756: AND
54757: IFFALSE 54777
54759: GO 54761
54761: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
54762: LD_INT 4
54764: PPUSH
54765: LD_OWVAR 2
54769: PPUSH
54770: LD_INT 0
54772: PPUSH
54773: CALL_OW 324
54777: END
// every 0 0$1 trigger StreamModeActive and sShovel do
54778: LD_EXP 19
54782: PUSH
54783: LD_EXP 56
54787: AND
54788: IFFALSE 54808
54790: GO 54792
54792: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
54793: LD_INT 19
54795: PPUSH
54796: LD_OWVAR 2
54800: PPUSH
54801: LD_INT 0
54803: PPUSH
54804: CALL_OW 324
54808: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
54809: LD_EXP 19
54813: PUSH
54814: LD_EXP 28
54818: AND
54819: IFFALSE 54921
54821: GO 54823
54823: DISABLE
54824: LD_INT 0
54826: PPUSH
54827: PPUSH
// begin enable ;
54828: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
54829: LD_ADDR_VAR 0 2
54833: PUSH
54834: LD_INT 22
54836: PUSH
54837: LD_OWVAR 2
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 2
54848: PUSH
54849: LD_INT 34
54851: PUSH
54852: LD_INT 11
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 34
54861: PUSH
54862: LD_INT 30
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: LIST
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PPUSH
54878: CALL_OW 69
54882: ST_TO_ADDR
// if not tmp then
54883: LD_VAR 0 2
54887: NOT
54888: IFFALSE 54892
// exit ;
54890: GO 54921
// for i in tmp do
54892: LD_ADDR_VAR 0 1
54896: PUSH
54897: LD_VAR 0 2
54901: PUSH
54902: FOR_IN
54903: IFFALSE 54919
// begin SetLives ( i , 0 ) ;
54905: LD_VAR 0 1
54909: PPUSH
54910: LD_INT 0
54912: PPUSH
54913: CALL_OW 234
// end ;
54917: GO 54902
54919: POP
54920: POP
// end ;
54921: PPOPN 2
54923: END
// every 0 0$1 trigger StreamModeActive and sBunker do
54924: LD_EXP 19
54928: PUSH
54929: LD_EXP 29
54933: AND
54934: IFFALSE 54954
54936: GO 54938
54938: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
54939: LD_INT 32
54941: PPUSH
54942: LD_OWVAR 2
54946: PPUSH
54947: LD_INT 0
54949: PPUSH
54950: CALL_OW 324
54954: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
54955: LD_EXP 19
54959: PUSH
54960: LD_EXP 30
54964: AND
54965: IFFALSE 55146
54967: GO 54969
54969: DISABLE
54970: LD_INT 0
54972: PPUSH
54973: PPUSH
54974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
54975: LD_ADDR_VAR 0 2
54979: PUSH
54980: LD_INT 22
54982: PUSH
54983: LD_OWVAR 2
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 33
54994: PUSH
54995: LD_INT 3
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PPUSH
55006: CALL_OW 69
55010: ST_TO_ADDR
// if not tmp then
55011: LD_VAR 0 2
55015: NOT
55016: IFFALSE 55020
// exit ;
55018: GO 55146
// side := 0 ;
55020: LD_ADDR_VAR 0 3
55024: PUSH
55025: LD_INT 0
55027: ST_TO_ADDR
// for i := 1 to 8 do
55028: LD_ADDR_VAR 0 1
55032: PUSH
55033: DOUBLE
55034: LD_INT 1
55036: DEC
55037: ST_TO_ADDR
55038: LD_INT 8
55040: PUSH
55041: FOR_TO
55042: IFFALSE 55090
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
55044: LD_OWVAR 2
55048: PUSH
55049: LD_VAR 0 1
55053: NONEQUAL
55054: PUSH
55055: LD_OWVAR 2
55059: PPUSH
55060: LD_VAR 0 1
55064: PPUSH
55065: CALL_OW 81
55069: PUSH
55070: LD_INT 2
55072: EQUAL
55073: AND
55074: IFFALSE 55088
// begin side := i ;
55076: LD_ADDR_VAR 0 3
55080: PUSH
55081: LD_VAR 0 1
55085: ST_TO_ADDR
// break ;
55086: GO 55090
// end ;
55088: GO 55041
55090: POP
55091: POP
// if not side then
55092: LD_VAR 0 3
55096: NOT
55097: IFFALSE 55101
// exit ;
55099: GO 55146
// for i := 1 to tmp do
55101: LD_ADDR_VAR 0 1
55105: PUSH
55106: DOUBLE
55107: LD_INT 1
55109: DEC
55110: ST_TO_ADDR
55111: LD_VAR 0 2
55115: PUSH
55116: FOR_TO
55117: IFFALSE 55144
// if Prob ( 60 ) then
55119: LD_INT 60
55121: PPUSH
55122: CALL_OW 13
55126: IFFALSE 55142
// SetSide ( i , side ) ;
55128: LD_VAR 0 1
55132: PPUSH
55133: LD_VAR 0 3
55137: PPUSH
55138: CALL_OW 235
55142: GO 55116
55144: POP
55145: POP
// end ;
55146: PPOPN 3
55148: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
55149: LD_EXP 19
55153: PUSH
55154: LD_EXP 32
55158: AND
55159: IFFALSE 55278
55161: GO 55163
55163: DISABLE
55164: LD_INT 0
55166: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
55167: LD_ADDR_VAR 0 1
55171: PUSH
55172: LD_INT 22
55174: PUSH
55175: LD_OWVAR 2
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 21
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 3
55196: PUSH
55197: LD_INT 23
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: LIST
55215: PPUSH
55216: CALL_OW 69
55220: PUSH
55221: FOR_IN
55222: IFFALSE 55276
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
55224: LD_VAR 0 1
55228: PPUSH
55229: CALL_OW 257
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: LD_INT 2
55239: PUSH
55240: LD_INT 3
55242: PUSH
55243: LD_INT 4
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: IN
55252: IFFALSE 55274
// SetClass ( un , rand ( 1 , 4 ) ) ;
55254: LD_VAR 0 1
55258: PPUSH
55259: LD_INT 1
55261: PPUSH
55262: LD_INT 4
55264: PPUSH
55265: CALL_OW 12
55269: PPUSH
55270: CALL_OW 336
55274: GO 55221
55276: POP
55277: POP
// end ;
55278: PPOPN 1
55280: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
55281: LD_EXP 19
55285: PUSH
55286: LD_EXP 31
55290: AND
55291: IFFALSE 55370
55293: GO 55295
55295: DISABLE
55296: LD_INT 0
55298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55299: LD_ADDR_VAR 0 1
55303: PUSH
55304: LD_INT 22
55306: PUSH
55307: LD_OWVAR 2
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 21
55318: PUSH
55319: LD_INT 3
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PPUSH
55330: CALL_OW 69
55334: ST_TO_ADDR
// if not tmp then
55335: LD_VAR 0 1
55339: NOT
55340: IFFALSE 55344
// exit ;
55342: GO 55370
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
55344: LD_VAR 0 1
55348: PUSH
55349: LD_INT 1
55351: PPUSH
55352: LD_VAR 0 1
55356: PPUSH
55357: CALL_OW 12
55361: ARRAY
55362: PPUSH
55363: LD_INT 100
55365: PPUSH
55366: CALL_OW 234
// end ;
55370: PPOPN 1
55372: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
55373: LD_EXP 19
55377: PUSH
55378: LD_EXP 33
55382: AND
55383: IFFALSE 55481
55385: GO 55387
55387: DISABLE
55388: LD_INT 0
55390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55391: LD_ADDR_VAR 0 1
55395: PUSH
55396: LD_INT 22
55398: PUSH
55399: LD_OWVAR 2
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 21
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PPUSH
55422: CALL_OW 69
55426: ST_TO_ADDR
// if not tmp then
55427: LD_VAR 0 1
55431: NOT
55432: IFFALSE 55436
// exit ;
55434: GO 55481
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
55436: LD_VAR 0 1
55440: PUSH
55441: LD_INT 1
55443: PPUSH
55444: LD_VAR 0 1
55448: PPUSH
55449: CALL_OW 12
55453: ARRAY
55454: PPUSH
55455: LD_INT 1
55457: PPUSH
55458: LD_INT 4
55460: PPUSH
55461: CALL_OW 12
55465: PPUSH
55466: LD_INT 3000
55468: PPUSH
55469: LD_INT 9000
55471: PPUSH
55472: CALL_OW 12
55476: PPUSH
55477: CALL_OW 492
// end ;
55481: PPOPN 1
55483: END
// every 0 0$1 trigger StreamModeActive and sDepot do
55484: LD_EXP 19
55488: PUSH
55489: LD_EXP 34
55493: AND
55494: IFFALSE 55514
55496: GO 55498
55498: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
55499: LD_INT 1
55501: PPUSH
55502: LD_OWVAR 2
55506: PPUSH
55507: LD_INT 0
55509: PPUSH
55510: CALL_OW 324
55514: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
55515: LD_EXP 19
55519: PUSH
55520: LD_EXP 35
55524: AND
55525: IFFALSE 55608
55527: GO 55529
55529: DISABLE
55530: LD_INT 0
55532: PPUSH
55533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55534: LD_ADDR_VAR 0 2
55538: PUSH
55539: LD_INT 22
55541: PUSH
55542: LD_OWVAR 2
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 21
55553: PUSH
55554: LD_INT 3
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PPUSH
55565: CALL_OW 69
55569: ST_TO_ADDR
// if not tmp then
55570: LD_VAR 0 2
55574: NOT
55575: IFFALSE 55579
// exit ;
55577: GO 55608
// for i in tmp do
55579: LD_ADDR_VAR 0 1
55583: PUSH
55584: LD_VAR 0 2
55588: PUSH
55589: FOR_IN
55590: IFFALSE 55606
// SetBLevel ( i , 10 ) ;
55592: LD_VAR 0 1
55596: PPUSH
55597: LD_INT 10
55599: PPUSH
55600: CALL_OW 241
55604: GO 55589
55606: POP
55607: POP
// end ;
55608: PPOPN 2
55610: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
55611: LD_EXP 19
55615: PUSH
55616: LD_EXP 36
55620: AND
55621: IFFALSE 55732
55623: GO 55625
55625: DISABLE
55626: LD_INT 0
55628: PPUSH
55629: PPUSH
55630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55631: LD_ADDR_VAR 0 3
55635: PUSH
55636: LD_INT 22
55638: PUSH
55639: LD_OWVAR 2
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 25
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PPUSH
55662: CALL_OW 69
55666: ST_TO_ADDR
// if not tmp then
55667: LD_VAR 0 3
55671: NOT
55672: IFFALSE 55676
// exit ;
55674: GO 55732
// un := tmp [ rand ( 1 , tmp ) ] ;
55676: LD_ADDR_VAR 0 2
55680: PUSH
55681: LD_VAR 0 3
55685: PUSH
55686: LD_INT 1
55688: PPUSH
55689: LD_VAR 0 3
55693: PPUSH
55694: CALL_OW 12
55698: ARRAY
55699: ST_TO_ADDR
// if Crawls ( un ) then
55700: LD_VAR 0 2
55704: PPUSH
55705: CALL_OW 318
55709: IFFALSE 55720
// ComWalk ( un ) ;
55711: LD_VAR 0 2
55715: PPUSH
55716: CALL_OW 138
// SetClass ( un , class_sniper ) ;
55720: LD_VAR 0 2
55724: PPUSH
55725: LD_INT 5
55727: PPUSH
55728: CALL_OW 336
// end ;
55732: PPOPN 3
55734: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
55735: LD_EXP 19
55739: PUSH
55740: LD_EXP 37
55744: AND
55745: PUSH
55746: LD_OWVAR 67
55750: PUSH
55751: LD_INT 4
55753: LESS
55754: AND
55755: IFFALSE 55774
55757: GO 55759
55759: DISABLE
// begin Difficulty := Difficulty + 1 ;
55760: LD_ADDR_OWVAR 67
55764: PUSH
55765: LD_OWVAR 67
55769: PUSH
55770: LD_INT 1
55772: PLUS
55773: ST_TO_ADDR
// end ;
55774: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
55775: LD_EXP 19
55779: PUSH
55780: LD_EXP 38
55784: AND
55785: IFFALSE 55888
55787: GO 55789
55789: DISABLE
55790: LD_INT 0
55792: PPUSH
// begin for i := 1 to 5 do
55793: LD_ADDR_VAR 0 1
55797: PUSH
55798: DOUBLE
55799: LD_INT 1
55801: DEC
55802: ST_TO_ADDR
55803: LD_INT 5
55805: PUSH
55806: FOR_TO
55807: IFFALSE 55886
// begin uc_nation := nation_nature ;
55809: LD_ADDR_OWVAR 21
55813: PUSH
55814: LD_INT 0
55816: ST_TO_ADDR
// uc_side := 0 ;
55817: LD_ADDR_OWVAR 20
55821: PUSH
55822: LD_INT 0
55824: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55825: LD_ADDR_OWVAR 29
55829: PUSH
55830: LD_INT 12
55832: PUSH
55833: LD_INT 12
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: ST_TO_ADDR
// hc_agressivity := 20 ;
55840: LD_ADDR_OWVAR 35
55844: PUSH
55845: LD_INT 20
55847: ST_TO_ADDR
// hc_class := class_tiger ;
55848: LD_ADDR_OWVAR 28
55852: PUSH
55853: LD_INT 14
55855: ST_TO_ADDR
// hc_gallery :=  ;
55856: LD_ADDR_OWVAR 33
55860: PUSH
55861: LD_STRING 
55863: ST_TO_ADDR
// hc_name :=  ;
55864: LD_ADDR_OWVAR 26
55868: PUSH
55869: LD_STRING 
55871: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
55872: CALL_OW 44
55876: PPUSH
55877: LD_INT 0
55879: PPUSH
55880: CALL_OW 51
// end ;
55884: GO 55806
55886: POP
55887: POP
// end ;
55888: PPOPN 1
55890: END
// every 0 0$1 trigger StreamModeActive and sBomb do
55891: LD_EXP 19
55895: PUSH
55896: LD_EXP 39
55900: AND
55901: IFFALSE 55910
55903: GO 55905
55905: DISABLE
// StreamSibBomb ;
55906: CALL 55911 0 0
55910: END
// export function StreamSibBomb ; var i , x , y ; begin
55911: LD_INT 0
55913: PPUSH
55914: PPUSH
55915: PPUSH
55916: PPUSH
// result := false ;
55917: LD_ADDR_VAR 0 1
55921: PUSH
55922: LD_INT 0
55924: ST_TO_ADDR
// for i := 1 to 16 do
55925: LD_ADDR_VAR 0 2
55929: PUSH
55930: DOUBLE
55931: LD_INT 1
55933: DEC
55934: ST_TO_ADDR
55935: LD_INT 16
55937: PUSH
55938: FOR_TO
55939: IFFALSE 56138
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55941: LD_ADDR_VAR 0 3
55945: PUSH
55946: LD_INT 10
55948: PUSH
55949: LD_INT 20
55951: PUSH
55952: LD_INT 30
55954: PUSH
55955: LD_INT 40
55957: PUSH
55958: LD_INT 50
55960: PUSH
55961: LD_INT 60
55963: PUSH
55964: LD_INT 70
55966: PUSH
55967: LD_INT 80
55969: PUSH
55970: LD_INT 90
55972: PUSH
55973: LD_INT 100
55975: PUSH
55976: LD_INT 110
55978: PUSH
55979: LD_INT 120
55981: PUSH
55982: LD_INT 130
55984: PUSH
55985: LD_INT 140
55987: PUSH
55988: LD_INT 150
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: PPUSH
56011: LD_INT 15
56013: PPUSH
56014: CALL_OW 12
56018: ARRAY
56019: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
56020: LD_ADDR_VAR 0 4
56024: PUSH
56025: LD_INT 10
56027: PUSH
56028: LD_INT 20
56030: PUSH
56031: LD_INT 30
56033: PUSH
56034: LD_INT 40
56036: PUSH
56037: LD_INT 50
56039: PUSH
56040: LD_INT 60
56042: PUSH
56043: LD_INT 70
56045: PUSH
56046: LD_INT 80
56048: PUSH
56049: LD_INT 90
56051: PUSH
56052: LD_INT 100
56054: PUSH
56055: LD_INT 110
56057: PUSH
56058: LD_INT 120
56060: PUSH
56061: LD_INT 130
56063: PUSH
56064: LD_INT 140
56066: PUSH
56067: LD_INT 150
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 1
56089: PPUSH
56090: LD_INT 15
56092: PPUSH
56093: CALL_OW 12
56097: ARRAY
56098: ST_TO_ADDR
// if ValidHex ( x , y ) then
56099: LD_VAR 0 3
56103: PPUSH
56104: LD_VAR 0 4
56108: PPUSH
56109: CALL_OW 488
56113: IFFALSE 56136
// begin result := [ x , y ] ;
56115: LD_ADDR_VAR 0 1
56119: PUSH
56120: LD_VAR 0 3
56124: PUSH
56125: LD_VAR 0 4
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: ST_TO_ADDR
// break ;
56134: GO 56138
// end ; end ;
56136: GO 55938
56138: POP
56139: POP
// if result then
56140: LD_VAR 0 1
56144: IFFALSE 56204
// begin ToLua ( playSibBomb() ) ;
56146: LD_STRING playSibBomb()
56148: PPUSH
56149: CALL_OW 559
// wait ( 0 0$14 ) ;
56153: LD_INT 490
56155: PPUSH
56156: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
56160: LD_VAR 0 1
56164: PUSH
56165: LD_INT 1
56167: ARRAY
56168: PPUSH
56169: LD_VAR 0 1
56173: PUSH
56174: LD_INT 2
56176: ARRAY
56177: PPUSH
56178: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
56182: LD_VAR 0 1
56186: PUSH
56187: LD_INT 1
56189: ARRAY
56190: PPUSH
56191: LD_VAR 0 1
56195: PUSH
56196: LD_INT 2
56198: ARRAY
56199: PPUSH
56200: CALL_OW 429
// end ; end ;
56204: LD_VAR 0 1
56208: RET
// every 0 0$1 trigger StreamModeActive and sReset do
56209: LD_EXP 19
56213: PUSH
56214: LD_EXP 41
56218: AND
56219: IFFALSE 56231
56221: GO 56223
56223: DISABLE
// YouLost (  ) ;
56224: LD_STRING 
56226: PPUSH
56227: CALL_OW 104
56231: END
// every 0 0$1 trigger StreamModeActive and sFog do
56232: LD_EXP 19
56236: PUSH
56237: LD_EXP 40
56241: AND
56242: IFFALSE 56256
56244: GO 56246
56246: DISABLE
// FogOff ( your_side ) ;
56247: LD_OWVAR 2
56251: PPUSH
56252: CALL_OW 344
56256: END
// every 0 0$1 trigger StreamModeActive and sSun do
56257: LD_EXP 19
56261: PUSH
56262: LD_EXP 42
56266: AND
56267: IFFALSE 56295
56269: GO 56271
56271: DISABLE
// begin solar_recharge_percent := 0 ;
56272: LD_ADDR_OWVAR 79
56276: PUSH
56277: LD_INT 0
56279: ST_TO_ADDR
// wait ( 5 5$00 ) ;
56280: LD_INT 10500
56282: PPUSH
56283: CALL_OW 67
// solar_recharge_percent := 100 ;
56287: LD_ADDR_OWVAR 79
56291: PUSH
56292: LD_INT 100
56294: ST_TO_ADDR
// end ;
56295: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
56296: LD_EXP 19
56300: PUSH
56301: LD_EXP 43
56305: AND
56306: IFFALSE 56545
56308: GO 56310
56310: DISABLE
56311: LD_INT 0
56313: PPUSH
56314: PPUSH
56315: PPUSH
// begin tmp := [ ] ;
56316: LD_ADDR_VAR 0 3
56320: PUSH
56321: EMPTY
56322: ST_TO_ADDR
// for i := 1 to 6 do
56323: LD_ADDR_VAR 0 1
56327: PUSH
56328: DOUBLE
56329: LD_INT 1
56331: DEC
56332: ST_TO_ADDR
56333: LD_INT 6
56335: PUSH
56336: FOR_TO
56337: IFFALSE 56442
// begin uc_nation := nation_nature ;
56339: LD_ADDR_OWVAR 21
56343: PUSH
56344: LD_INT 0
56346: ST_TO_ADDR
// uc_side := 0 ;
56347: LD_ADDR_OWVAR 20
56351: PUSH
56352: LD_INT 0
56354: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56355: LD_ADDR_OWVAR 29
56359: PUSH
56360: LD_INT 12
56362: PUSH
56363: LD_INT 12
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: ST_TO_ADDR
// hc_agressivity := 20 ;
56370: LD_ADDR_OWVAR 35
56374: PUSH
56375: LD_INT 20
56377: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
56378: LD_ADDR_OWVAR 28
56382: PUSH
56383: LD_INT 17
56385: ST_TO_ADDR
// hc_gallery :=  ;
56386: LD_ADDR_OWVAR 33
56390: PUSH
56391: LD_STRING 
56393: ST_TO_ADDR
// hc_name :=  ;
56394: LD_ADDR_OWVAR 26
56398: PUSH
56399: LD_STRING 
56401: ST_TO_ADDR
// un := CreateHuman ;
56402: LD_ADDR_VAR 0 2
56406: PUSH
56407: CALL_OW 44
56411: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
56412: LD_VAR 0 2
56416: PPUSH
56417: LD_INT 1
56419: PPUSH
56420: CALL_OW 51
// tmp := tmp ^ un ;
56424: LD_ADDR_VAR 0 3
56428: PUSH
56429: LD_VAR 0 3
56433: PUSH
56434: LD_VAR 0 2
56438: ADD
56439: ST_TO_ADDR
// end ;
56440: GO 56336
56442: POP
56443: POP
// repeat wait ( 0 0$1 ) ;
56444: LD_INT 35
56446: PPUSH
56447: CALL_OW 67
// for un in tmp do
56451: LD_ADDR_VAR 0 2
56455: PUSH
56456: LD_VAR 0 3
56460: PUSH
56461: FOR_IN
56462: IFFALSE 56536
// begin if IsDead ( un ) then
56464: LD_VAR 0 2
56468: PPUSH
56469: CALL_OW 301
56473: IFFALSE 56493
// begin tmp := tmp diff un ;
56475: LD_ADDR_VAR 0 3
56479: PUSH
56480: LD_VAR 0 3
56484: PUSH
56485: LD_VAR 0 2
56489: DIFF
56490: ST_TO_ADDR
// continue ;
56491: GO 56461
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
56493: LD_VAR 0 2
56497: PPUSH
56498: LD_INT 3
56500: PUSH
56501: LD_INT 22
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PPUSH
56515: CALL_OW 69
56519: PPUSH
56520: LD_VAR 0 2
56524: PPUSH
56525: CALL_OW 74
56529: PPUSH
56530: CALL_OW 115
// end ;
56534: GO 56461
56536: POP
56537: POP
// until not tmp ;
56538: LD_VAR 0 3
56542: NOT
56543: IFFALSE 56444
// end ;
56545: PPOPN 3
56547: END
// every 0 0$1 trigger StreamModeActive and sTroll do
56548: LD_EXP 19
56552: PUSH
56553: LD_EXP 44
56557: AND
56558: IFFALSE 56612
56560: GO 56562
56562: DISABLE
// begin ToLua ( displayTroll(); ) ;
56563: LD_STRING displayTroll();
56565: PPUSH
56566: CALL_OW 559
// wait ( 3 3$00 ) ;
56570: LD_INT 6300
56572: PPUSH
56573: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56577: LD_STRING hideTroll();
56579: PPUSH
56580: CALL_OW 559
// wait ( 1 1$00 ) ;
56584: LD_INT 2100
56586: PPUSH
56587: CALL_OW 67
// ToLua ( displayTroll(); ) ;
56591: LD_STRING displayTroll();
56593: PPUSH
56594: CALL_OW 559
// wait ( 1 1$00 ) ;
56598: LD_INT 2100
56600: PPUSH
56601: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56605: LD_STRING hideTroll();
56607: PPUSH
56608: CALL_OW 559
// end ;
56612: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
56613: LD_EXP 19
56617: PUSH
56618: LD_EXP 45
56622: AND
56623: IFFALSE 56686
56625: GO 56627
56627: DISABLE
56628: LD_INT 0
56630: PPUSH
// begin p := 0 ;
56631: LD_ADDR_VAR 0 1
56635: PUSH
56636: LD_INT 0
56638: ST_TO_ADDR
// repeat game_speed := 1 ;
56639: LD_ADDR_OWVAR 65
56643: PUSH
56644: LD_INT 1
56646: ST_TO_ADDR
// wait ( 0 0$1 ) ;
56647: LD_INT 35
56649: PPUSH
56650: CALL_OW 67
// p := p + 1 ;
56654: LD_ADDR_VAR 0 1
56658: PUSH
56659: LD_VAR 0 1
56663: PUSH
56664: LD_INT 1
56666: PLUS
56667: ST_TO_ADDR
// until p >= 60 ;
56668: LD_VAR 0 1
56672: PUSH
56673: LD_INT 60
56675: GREATEREQUAL
56676: IFFALSE 56639
// game_speed := 4 ;
56678: LD_ADDR_OWVAR 65
56682: PUSH
56683: LD_INT 4
56685: ST_TO_ADDR
// end ;
56686: PPOPN 1
56688: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
56689: LD_EXP 19
56693: PUSH
56694: LD_EXP 46
56698: AND
56699: IFFALSE 56845
56701: GO 56703
56703: DISABLE
56704: LD_INT 0
56706: PPUSH
56707: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56708: LD_ADDR_VAR 0 1
56712: PUSH
56713: LD_INT 22
56715: PUSH
56716: LD_OWVAR 2
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 2
56727: PUSH
56728: LD_INT 30
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 30
56740: PUSH
56741: LD_INT 1
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: LIST
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PPUSH
56757: CALL_OW 69
56761: ST_TO_ADDR
// if not depot then
56762: LD_VAR 0 1
56766: NOT
56767: IFFALSE 56771
// exit ;
56769: GO 56845
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
56771: LD_ADDR_VAR 0 2
56775: PUSH
56776: LD_VAR 0 1
56780: PUSH
56781: LD_INT 1
56783: PPUSH
56784: LD_VAR 0 1
56788: PPUSH
56789: CALL_OW 12
56793: ARRAY
56794: PPUSH
56795: CALL_OW 274
56799: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
56800: LD_VAR 0 2
56804: PPUSH
56805: LD_INT 1
56807: PPUSH
56808: LD_INT 0
56810: PPUSH
56811: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
56815: LD_VAR 0 2
56819: PPUSH
56820: LD_INT 2
56822: PPUSH
56823: LD_INT 0
56825: PPUSH
56826: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
56830: LD_VAR 0 2
56834: PPUSH
56835: LD_INT 3
56837: PPUSH
56838: LD_INT 0
56840: PPUSH
56841: CALL_OW 277
// end ;
56845: PPOPN 2
56847: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
56848: LD_EXP 19
56852: PUSH
56853: LD_EXP 47
56857: AND
56858: IFFALSE 56955
56860: GO 56862
56862: DISABLE
56863: LD_INT 0
56865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56866: LD_ADDR_VAR 0 1
56870: PUSH
56871: LD_INT 22
56873: PUSH
56874: LD_OWVAR 2
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 21
56885: PUSH
56886: LD_INT 1
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 3
56895: PUSH
56896: LD_INT 23
56898: PUSH
56899: LD_INT 0
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: LIST
56914: PPUSH
56915: CALL_OW 69
56919: ST_TO_ADDR
// if not tmp then
56920: LD_VAR 0 1
56924: NOT
56925: IFFALSE 56929
// exit ;
56927: GO 56955
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
56929: LD_VAR 0 1
56933: PUSH
56934: LD_INT 1
56936: PPUSH
56937: LD_VAR 0 1
56941: PPUSH
56942: CALL_OW 12
56946: ARRAY
56947: PPUSH
56948: LD_INT 200
56950: PPUSH
56951: CALL_OW 234
// end ;
56955: PPOPN 1
56957: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
56958: LD_EXP 19
56962: PUSH
56963: LD_EXP 48
56967: AND
56968: IFFALSE 57047
56970: GO 56972
56972: DISABLE
56973: LD_INT 0
56975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
56976: LD_ADDR_VAR 0 1
56980: PUSH
56981: LD_INT 22
56983: PUSH
56984: LD_OWVAR 2
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 21
56995: PUSH
56996: LD_INT 2
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PPUSH
57007: CALL_OW 69
57011: ST_TO_ADDR
// if not tmp then
57012: LD_VAR 0 1
57016: NOT
57017: IFFALSE 57021
// exit ;
57019: GO 57047
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
57021: LD_VAR 0 1
57025: PUSH
57026: LD_INT 1
57028: PPUSH
57029: LD_VAR 0 1
57033: PPUSH
57034: CALL_OW 12
57038: ARRAY
57039: PPUSH
57040: LD_INT 60
57042: PPUSH
57043: CALL_OW 234
// end ;
57047: PPOPN 1
57049: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
57050: LD_EXP 19
57054: PUSH
57055: LD_EXP 49
57059: AND
57060: IFFALSE 57159
57062: GO 57064
57064: DISABLE
57065: LD_INT 0
57067: PPUSH
57068: PPUSH
// begin enable ;
57069: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
57070: LD_ADDR_VAR 0 1
57074: PUSH
57075: LD_INT 22
57077: PUSH
57078: LD_OWVAR 2
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 61
57089: PUSH
57090: EMPTY
57091: LIST
57092: PUSH
57093: LD_INT 33
57095: PUSH
57096: LD_INT 2
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: LIST
57107: PPUSH
57108: CALL_OW 69
57112: ST_TO_ADDR
// if not tmp then
57113: LD_VAR 0 1
57117: NOT
57118: IFFALSE 57122
// exit ;
57120: GO 57159
// for i in tmp do
57122: LD_ADDR_VAR 0 2
57126: PUSH
57127: LD_VAR 0 1
57131: PUSH
57132: FOR_IN
57133: IFFALSE 57157
// if IsControledBy ( i ) then
57135: LD_VAR 0 2
57139: PPUSH
57140: CALL_OW 312
57144: IFFALSE 57155
// ComUnlink ( i ) ;
57146: LD_VAR 0 2
57150: PPUSH
57151: CALL_OW 136
57155: GO 57132
57157: POP
57158: POP
// end ;
57159: PPOPN 2
57161: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
57162: LD_EXP 19
57166: PUSH
57167: LD_EXP 50
57171: AND
57172: IFFALSE 57312
57174: GO 57176
57176: DISABLE
57177: LD_INT 0
57179: PPUSH
57180: PPUSH
// begin ToLua ( displayPowell(); ) ;
57181: LD_STRING displayPowell();
57183: PPUSH
57184: CALL_OW 559
// uc_side := 0 ;
57188: LD_ADDR_OWVAR 20
57192: PUSH
57193: LD_INT 0
57195: ST_TO_ADDR
// uc_nation := 2 ;
57196: LD_ADDR_OWVAR 21
57200: PUSH
57201: LD_INT 2
57203: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
57204: LD_ADDR_OWVAR 37
57208: PUSH
57209: LD_INT 14
57211: ST_TO_ADDR
// vc_engine := engine_siberite ;
57212: LD_ADDR_OWVAR 39
57216: PUSH
57217: LD_INT 3
57219: ST_TO_ADDR
// vc_control := control_apeman ;
57220: LD_ADDR_OWVAR 38
57224: PUSH
57225: LD_INT 5
57227: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
57228: LD_ADDR_OWVAR 40
57232: PUSH
57233: LD_INT 29
57235: ST_TO_ADDR
// un := CreateVehicle ;
57236: LD_ADDR_VAR 0 2
57240: PUSH
57241: CALL_OW 45
57245: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57246: LD_VAR 0 2
57250: PPUSH
57251: LD_INT 1
57253: PPUSH
57254: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
57258: LD_INT 35
57260: PPUSH
57261: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
57265: LD_VAR 0 2
57269: PPUSH
57270: LD_INT 22
57272: PUSH
57273: LD_OWVAR 2
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PPUSH
57282: CALL_OW 69
57286: PPUSH
57287: LD_VAR 0 2
57291: PPUSH
57292: CALL_OW 74
57296: PPUSH
57297: CALL_OW 115
// until IsDead ( un ) ;
57301: LD_VAR 0 2
57305: PPUSH
57306: CALL_OW 301
57310: IFFALSE 57258
// end ;
57312: PPOPN 2
57314: END
// every 0 0$1 trigger StreamModeActive and sStu do
57315: LD_EXP 19
57319: PUSH
57320: LD_EXP 58
57324: AND
57325: IFFALSE 57341
57327: GO 57329
57329: DISABLE
// begin ToLua ( displayStucuk(); ) ;
57330: LD_STRING displayStucuk();
57332: PPUSH
57333: CALL_OW 559
// ResetFog ;
57337: CALL_OW 335
// end ;
57341: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
57342: LD_EXP 19
57346: PUSH
57347: LD_EXP 51
57351: AND
57352: IFFALSE 57493
57354: GO 57356
57356: DISABLE
57357: LD_INT 0
57359: PPUSH
57360: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57361: LD_ADDR_VAR 0 2
57365: PUSH
57366: LD_INT 22
57368: PUSH
57369: LD_OWVAR 2
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 21
57380: PUSH
57381: LD_INT 1
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PPUSH
57392: CALL_OW 69
57396: ST_TO_ADDR
// if not tmp then
57397: LD_VAR 0 2
57401: NOT
57402: IFFALSE 57406
// exit ;
57404: GO 57493
// un := tmp [ rand ( 1 , tmp ) ] ;
57406: LD_ADDR_VAR 0 1
57410: PUSH
57411: LD_VAR 0 2
57415: PUSH
57416: LD_INT 1
57418: PPUSH
57419: LD_VAR 0 2
57423: PPUSH
57424: CALL_OW 12
57428: ARRAY
57429: ST_TO_ADDR
// SetSide ( un , 0 ) ;
57430: LD_VAR 0 1
57434: PPUSH
57435: LD_INT 0
57437: PPUSH
57438: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
57442: LD_VAR 0 1
57446: PPUSH
57447: LD_OWVAR 3
57451: PUSH
57452: LD_VAR 0 1
57456: DIFF
57457: PPUSH
57458: LD_VAR 0 1
57462: PPUSH
57463: CALL_OW 74
57467: PPUSH
57468: CALL_OW 115
// wait ( 0 0$20 ) ;
57472: LD_INT 700
57474: PPUSH
57475: CALL_OW 67
// SetSide ( un , your_side ) ;
57479: LD_VAR 0 1
57483: PPUSH
57484: LD_OWVAR 2
57488: PPUSH
57489: CALL_OW 235
// end ;
57493: PPOPN 2
57495: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
57496: LD_EXP 19
57500: PUSH
57501: LD_EXP 52
57505: AND
57506: IFFALSE 57612
57508: GO 57510
57510: DISABLE
57511: LD_INT 0
57513: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57514: LD_ADDR_VAR 0 1
57518: PUSH
57519: LD_INT 22
57521: PUSH
57522: LD_OWVAR 2
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 2
57533: PUSH
57534: LD_INT 30
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 30
57546: PUSH
57547: LD_INT 1
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: LIST
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PPUSH
57563: CALL_OW 69
57567: ST_TO_ADDR
// if not depot then
57568: LD_VAR 0 1
57572: NOT
57573: IFFALSE 57577
// exit ;
57575: GO 57612
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
57577: LD_VAR 0 1
57581: PUSH
57582: LD_INT 1
57584: ARRAY
57585: PPUSH
57586: CALL_OW 250
57590: PPUSH
57591: LD_VAR 0 1
57595: PUSH
57596: LD_INT 1
57598: ARRAY
57599: PPUSH
57600: CALL_OW 251
57604: PPUSH
57605: LD_INT 70
57607: PPUSH
57608: CALL_OW 495
// end ;
57612: PPOPN 1
57614: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
57615: LD_EXP 19
57619: PUSH
57620: LD_EXP 53
57624: AND
57625: IFFALSE 57836
57627: GO 57629
57629: DISABLE
57630: LD_INT 0
57632: PPUSH
57633: PPUSH
57634: PPUSH
57635: PPUSH
57636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57637: LD_ADDR_VAR 0 5
57641: PUSH
57642: LD_INT 22
57644: PUSH
57645: LD_OWVAR 2
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 21
57656: PUSH
57657: LD_INT 1
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PPUSH
57668: CALL_OW 69
57672: ST_TO_ADDR
// if not tmp then
57673: LD_VAR 0 5
57677: NOT
57678: IFFALSE 57682
// exit ;
57680: GO 57836
// for i in tmp do
57682: LD_ADDR_VAR 0 1
57686: PUSH
57687: LD_VAR 0 5
57691: PUSH
57692: FOR_IN
57693: IFFALSE 57834
// begin d := rand ( 0 , 5 ) ;
57695: LD_ADDR_VAR 0 4
57699: PUSH
57700: LD_INT 0
57702: PPUSH
57703: LD_INT 5
57705: PPUSH
57706: CALL_OW 12
57710: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
57711: LD_ADDR_VAR 0 2
57715: PUSH
57716: LD_VAR 0 1
57720: PPUSH
57721: CALL_OW 250
57725: PPUSH
57726: LD_VAR 0 4
57730: PPUSH
57731: LD_INT 3
57733: PPUSH
57734: LD_INT 12
57736: PPUSH
57737: CALL_OW 12
57741: PPUSH
57742: CALL_OW 272
57746: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
57747: LD_ADDR_VAR 0 3
57751: PUSH
57752: LD_VAR 0 1
57756: PPUSH
57757: CALL_OW 251
57761: PPUSH
57762: LD_VAR 0 4
57766: PPUSH
57767: LD_INT 3
57769: PPUSH
57770: LD_INT 12
57772: PPUSH
57773: CALL_OW 12
57777: PPUSH
57778: CALL_OW 273
57782: ST_TO_ADDR
// if ValidHex ( x , y ) then
57783: LD_VAR 0 2
57787: PPUSH
57788: LD_VAR 0 3
57792: PPUSH
57793: CALL_OW 488
57797: IFFALSE 57832
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
57799: LD_VAR 0 1
57803: PPUSH
57804: LD_VAR 0 2
57808: PPUSH
57809: LD_VAR 0 3
57813: PPUSH
57814: LD_INT 3
57816: PPUSH
57817: LD_INT 6
57819: PPUSH
57820: CALL_OW 12
57824: PPUSH
57825: LD_INT 1
57827: PPUSH
57828: CALL_OW 483
// end ;
57832: GO 57692
57834: POP
57835: POP
// end ;
57836: PPOPN 5
57838: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
57839: LD_EXP 19
57843: PUSH
57844: LD_EXP 54
57848: AND
57849: IFFALSE 57943
57851: GO 57853
57853: DISABLE
57854: LD_INT 0
57856: PPUSH
57857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
57858: LD_ADDR_VAR 0 2
57862: PUSH
57863: LD_INT 22
57865: PUSH
57866: LD_OWVAR 2
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 32
57877: PUSH
57878: LD_INT 1
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 21
57887: PUSH
57888: LD_INT 2
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: LIST
57899: PPUSH
57900: CALL_OW 69
57904: ST_TO_ADDR
// if not tmp then
57905: LD_VAR 0 2
57909: NOT
57910: IFFALSE 57914
// exit ;
57912: GO 57943
// for i in tmp do
57914: LD_ADDR_VAR 0 1
57918: PUSH
57919: LD_VAR 0 2
57923: PUSH
57924: FOR_IN
57925: IFFALSE 57941
// SetFuel ( i , 0 ) ;
57927: LD_VAR 0 1
57931: PPUSH
57932: LD_INT 0
57934: PPUSH
57935: CALL_OW 240
57939: GO 57924
57941: POP
57942: POP
// end ;
57943: PPOPN 2
57945: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
57946: LD_EXP 19
57950: PUSH
57951: LD_EXP 55
57955: AND
57956: IFFALSE 58022
57958: GO 57960
57960: DISABLE
57961: LD_INT 0
57963: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
57964: LD_ADDR_VAR 0 1
57968: PUSH
57969: LD_INT 22
57971: PUSH
57972: LD_OWVAR 2
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 30
57983: PUSH
57984: LD_INT 29
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PPUSH
57995: CALL_OW 69
57999: ST_TO_ADDR
// if not tmp then
58000: LD_VAR 0 1
58004: NOT
58005: IFFALSE 58009
// exit ;
58007: GO 58022
// DestroyUnit ( tmp [ 1 ] ) ;
58009: LD_VAR 0 1
58013: PUSH
58014: LD_INT 1
58016: ARRAY
58017: PPUSH
58018: CALL_OW 65
// end ;
58022: PPOPN 1
58024: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
58025: LD_EXP 19
58029: PUSH
58030: LD_EXP 57
58034: AND
58035: IFFALSE 58164
58037: GO 58039
58039: DISABLE
58040: LD_INT 0
58042: PPUSH
// begin uc_side := 0 ;
58043: LD_ADDR_OWVAR 20
58047: PUSH
58048: LD_INT 0
58050: ST_TO_ADDR
// uc_nation := nation_arabian ;
58051: LD_ADDR_OWVAR 21
58055: PUSH
58056: LD_INT 2
58058: ST_TO_ADDR
// hc_gallery :=  ;
58059: LD_ADDR_OWVAR 33
58063: PUSH
58064: LD_STRING 
58066: ST_TO_ADDR
// hc_name :=  ;
58067: LD_ADDR_OWVAR 26
58071: PUSH
58072: LD_STRING 
58074: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
58075: LD_INT 1
58077: PPUSH
58078: LD_INT 11
58080: PPUSH
58081: LD_INT 10
58083: PPUSH
58084: CALL_OW 380
// un := CreateHuman ;
58088: LD_ADDR_VAR 0 1
58092: PUSH
58093: CALL_OW 44
58097: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58098: LD_VAR 0 1
58102: PPUSH
58103: LD_INT 1
58105: PPUSH
58106: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
58110: LD_INT 35
58112: PPUSH
58113: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
58117: LD_VAR 0 1
58121: PPUSH
58122: LD_INT 22
58124: PUSH
58125: LD_OWVAR 2
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PPUSH
58134: CALL_OW 69
58138: PPUSH
58139: LD_VAR 0 1
58143: PPUSH
58144: CALL_OW 74
58148: PPUSH
58149: CALL_OW 115
// until IsDead ( un ) ;
58153: LD_VAR 0 1
58157: PPUSH
58158: CALL_OW 301
58162: IFFALSE 58110
// end ;
58164: PPOPN 1
58166: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
58167: LD_EXP 19
58171: PUSH
58172: LD_EXP 59
58176: AND
58177: IFFALSE 58189
58179: GO 58181
58181: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
58182: LD_STRING earthquake(getX(game), 0, 32)
58184: PPUSH
58185: CALL_OW 559
58189: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
58190: LD_EXP 19
58194: PUSH
58195: LD_EXP 60
58199: AND
58200: IFFALSE 58291
58202: GO 58204
58204: DISABLE
58205: LD_INT 0
58207: PPUSH
// begin enable ;
58208: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
58209: LD_ADDR_VAR 0 1
58213: PUSH
58214: LD_INT 22
58216: PUSH
58217: LD_OWVAR 2
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 21
58228: PUSH
58229: LD_INT 2
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 33
58238: PUSH
58239: LD_INT 3
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: LIST
58250: PPUSH
58251: CALL_OW 69
58255: ST_TO_ADDR
// if not tmp then
58256: LD_VAR 0 1
58260: NOT
58261: IFFALSE 58265
// exit ;
58263: GO 58291
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
58265: LD_VAR 0 1
58269: PUSH
58270: LD_INT 1
58272: PPUSH
58273: LD_VAR 0 1
58277: PPUSH
58278: CALL_OW 12
58282: ARRAY
58283: PPUSH
58284: LD_INT 1
58286: PPUSH
58287: CALL_OW 234
// end ;
58291: PPOPN 1
58293: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
58294: LD_EXP 19
58298: PUSH
58299: LD_EXP 61
58303: AND
58304: IFFALSE 58445
58306: GO 58308
58308: DISABLE
58309: LD_INT 0
58311: PPUSH
58312: PPUSH
58313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58314: LD_ADDR_VAR 0 3
58318: PUSH
58319: LD_INT 22
58321: PUSH
58322: LD_OWVAR 2
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 25
58333: PUSH
58334: LD_INT 1
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PPUSH
58345: CALL_OW 69
58349: ST_TO_ADDR
// if not tmp then
58350: LD_VAR 0 3
58354: NOT
58355: IFFALSE 58359
// exit ;
58357: GO 58445
// un := tmp [ rand ( 1 , tmp ) ] ;
58359: LD_ADDR_VAR 0 2
58363: PUSH
58364: LD_VAR 0 3
58368: PUSH
58369: LD_INT 1
58371: PPUSH
58372: LD_VAR 0 3
58376: PPUSH
58377: CALL_OW 12
58381: ARRAY
58382: ST_TO_ADDR
// if Crawls ( un ) then
58383: LD_VAR 0 2
58387: PPUSH
58388: CALL_OW 318
58392: IFFALSE 58403
// ComWalk ( un ) ;
58394: LD_VAR 0 2
58398: PPUSH
58399: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
58403: LD_VAR 0 2
58407: PPUSH
58408: LD_INT 9
58410: PPUSH
58411: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
58415: LD_INT 28
58417: PPUSH
58418: LD_OWVAR 2
58422: PPUSH
58423: LD_INT 2
58425: PPUSH
58426: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
58430: LD_INT 29
58432: PPUSH
58433: LD_OWVAR 2
58437: PPUSH
58438: LD_INT 2
58440: PPUSH
58441: CALL_OW 322
// end ;
58445: PPOPN 3
58447: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
58448: LD_EXP 19
58452: PUSH
58453: LD_EXP 62
58457: AND
58458: IFFALSE 58569
58460: GO 58462
58462: DISABLE
58463: LD_INT 0
58465: PPUSH
58466: PPUSH
58467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58468: LD_ADDR_VAR 0 3
58472: PUSH
58473: LD_INT 22
58475: PUSH
58476: LD_OWVAR 2
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 25
58487: PUSH
58488: LD_INT 1
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PPUSH
58499: CALL_OW 69
58503: ST_TO_ADDR
// if not tmp then
58504: LD_VAR 0 3
58508: NOT
58509: IFFALSE 58513
// exit ;
58511: GO 58569
// un := tmp [ rand ( 1 , tmp ) ] ;
58513: LD_ADDR_VAR 0 2
58517: PUSH
58518: LD_VAR 0 3
58522: PUSH
58523: LD_INT 1
58525: PPUSH
58526: LD_VAR 0 3
58530: PPUSH
58531: CALL_OW 12
58535: ARRAY
58536: ST_TO_ADDR
// if Crawls ( un ) then
58537: LD_VAR 0 2
58541: PPUSH
58542: CALL_OW 318
58546: IFFALSE 58557
// ComWalk ( un ) ;
58548: LD_VAR 0 2
58552: PPUSH
58553: CALL_OW 138
// SetClass ( un , class_mortar ) ;
58557: LD_VAR 0 2
58561: PPUSH
58562: LD_INT 8
58564: PPUSH
58565: CALL_OW 336
// end ;
58569: PPOPN 3
58571: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
58572: LD_EXP 19
58576: PUSH
58577: LD_EXP 63
58581: AND
58582: IFFALSE 58726
58584: GO 58586
58586: DISABLE
58587: LD_INT 0
58589: PPUSH
58590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
58591: LD_ADDR_VAR 0 2
58595: PUSH
58596: LD_INT 22
58598: PUSH
58599: LD_OWVAR 2
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 21
58610: PUSH
58611: LD_INT 2
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 2
58620: PUSH
58621: LD_INT 34
58623: PUSH
58624: LD_INT 12
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 34
58633: PUSH
58634: LD_INT 51
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 34
58643: PUSH
58644: LD_INT 32
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: LIST
58661: PPUSH
58662: CALL_OW 69
58666: ST_TO_ADDR
// if not tmp then
58667: LD_VAR 0 2
58671: NOT
58672: IFFALSE 58676
// exit ;
58674: GO 58726
// for i in tmp do
58676: LD_ADDR_VAR 0 1
58680: PUSH
58681: LD_VAR 0 2
58685: PUSH
58686: FOR_IN
58687: IFFALSE 58724
// if GetCargo ( i , mat_artifact ) = 0 then
58689: LD_VAR 0 1
58693: PPUSH
58694: LD_INT 4
58696: PPUSH
58697: CALL_OW 289
58701: PUSH
58702: LD_INT 0
58704: EQUAL
58705: IFFALSE 58722
// SetCargo ( i , mat_siberit , 100 ) ;
58707: LD_VAR 0 1
58711: PPUSH
58712: LD_INT 3
58714: PPUSH
58715: LD_INT 100
58717: PPUSH
58718: CALL_OW 290
58722: GO 58686
58724: POP
58725: POP
// end ;
58726: PPOPN 2
58728: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
58729: LD_EXP 19
58733: PUSH
58734: LD_EXP 64
58738: AND
58739: IFFALSE 58922
58741: GO 58743
58743: DISABLE
58744: LD_INT 0
58746: PPUSH
58747: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58748: LD_ADDR_VAR 0 2
58752: PUSH
58753: LD_INT 22
58755: PUSH
58756: LD_OWVAR 2
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PPUSH
58765: CALL_OW 69
58769: ST_TO_ADDR
// if not tmp then
58770: LD_VAR 0 2
58774: NOT
58775: IFFALSE 58779
// exit ;
58777: GO 58922
// for i := 1 to 2 do
58779: LD_ADDR_VAR 0 1
58783: PUSH
58784: DOUBLE
58785: LD_INT 1
58787: DEC
58788: ST_TO_ADDR
58789: LD_INT 2
58791: PUSH
58792: FOR_TO
58793: IFFALSE 58920
// begin uc_side := your_side ;
58795: LD_ADDR_OWVAR 20
58799: PUSH
58800: LD_OWVAR 2
58804: ST_TO_ADDR
// uc_nation := nation_american ;
58805: LD_ADDR_OWVAR 21
58809: PUSH
58810: LD_INT 1
58812: ST_TO_ADDR
// vc_chassis := us_morphling ;
58813: LD_ADDR_OWVAR 37
58817: PUSH
58818: LD_INT 5
58820: ST_TO_ADDR
// vc_engine := engine_siberite ;
58821: LD_ADDR_OWVAR 39
58825: PUSH
58826: LD_INT 3
58828: ST_TO_ADDR
// vc_control := control_computer ;
58829: LD_ADDR_OWVAR 38
58833: PUSH
58834: LD_INT 3
58836: ST_TO_ADDR
// vc_weapon := us_double_laser ;
58837: LD_ADDR_OWVAR 40
58841: PUSH
58842: LD_INT 10
58844: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
58845: LD_VAR 0 2
58849: PUSH
58850: LD_INT 1
58852: ARRAY
58853: PPUSH
58854: CALL_OW 310
58858: NOT
58859: IFFALSE 58906
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
58861: CALL_OW 45
58865: PPUSH
58866: LD_VAR 0 2
58870: PUSH
58871: LD_INT 1
58873: ARRAY
58874: PPUSH
58875: CALL_OW 250
58879: PPUSH
58880: LD_VAR 0 2
58884: PUSH
58885: LD_INT 1
58887: ARRAY
58888: PPUSH
58889: CALL_OW 251
58893: PPUSH
58894: LD_INT 12
58896: PPUSH
58897: LD_INT 1
58899: PPUSH
58900: CALL_OW 50
58904: GO 58918
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
58906: CALL_OW 45
58910: PPUSH
58911: LD_INT 1
58913: PPUSH
58914: CALL_OW 51
// end ;
58918: GO 58792
58920: POP
58921: POP
// end ;
58922: PPOPN 2
58924: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
58925: LD_EXP 19
58929: PUSH
58930: LD_EXP 65
58934: AND
58935: IFFALSE 59157
58937: GO 58939
58939: DISABLE
58940: LD_INT 0
58942: PPUSH
58943: PPUSH
58944: PPUSH
58945: PPUSH
58946: PPUSH
58947: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58948: LD_ADDR_VAR 0 6
58952: PUSH
58953: LD_INT 22
58955: PUSH
58956: LD_OWVAR 2
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 21
58967: PUSH
58968: LD_INT 1
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 3
58977: PUSH
58978: LD_INT 23
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: LIST
58996: PPUSH
58997: CALL_OW 69
59001: ST_TO_ADDR
// if not tmp then
59002: LD_VAR 0 6
59006: NOT
59007: IFFALSE 59011
// exit ;
59009: GO 59157
// s1 := rand ( 1 , 4 ) ;
59011: LD_ADDR_VAR 0 2
59015: PUSH
59016: LD_INT 1
59018: PPUSH
59019: LD_INT 4
59021: PPUSH
59022: CALL_OW 12
59026: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
59027: LD_ADDR_VAR 0 4
59031: PUSH
59032: LD_VAR 0 6
59036: PUSH
59037: LD_INT 1
59039: ARRAY
59040: PPUSH
59041: LD_VAR 0 2
59045: PPUSH
59046: CALL_OW 259
59050: ST_TO_ADDR
// if s1 = 1 then
59051: LD_VAR 0 2
59055: PUSH
59056: LD_INT 1
59058: EQUAL
59059: IFFALSE 59079
// s2 := rand ( 2 , 4 ) else
59061: LD_ADDR_VAR 0 3
59065: PUSH
59066: LD_INT 2
59068: PPUSH
59069: LD_INT 4
59071: PPUSH
59072: CALL_OW 12
59076: ST_TO_ADDR
59077: GO 59087
// s2 := 1 ;
59079: LD_ADDR_VAR 0 3
59083: PUSH
59084: LD_INT 1
59086: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
59087: LD_ADDR_VAR 0 5
59091: PUSH
59092: LD_VAR 0 6
59096: PUSH
59097: LD_INT 1
59099: ARRAY
59100: PPUSH
59101: LD_VAR 0 3
59105: PPUSH
59106: CALL_OW 259
59110: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
59111: LD_VAR 0 6
59115: PUSH
59116: LD_INT 1
59118: ARRAY
59119: PPUSH
59120: LD_VAR 0 2
59124: PPUSH
59125: LD_VAR 0 5
59129: PPUSH
59130: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
59134: LD_VAR 0 6
59138: PUSH
59139: LD_INT 1
59141: ARRAY
59142: PPUSH
59143: LD_VAR 0 3
59147: PPUSH
59148: LD_VAR 0 4
59152: PPUSH
59153: CALL_OW 237
// end ;
59157: PPOPN 6
59159: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
59160: LD_EXP 19
59164: PUSH
59165: LD_EXP 66
59169: AND
59170: IFFALSE 59249
59172: GO 59174
59174: DISABLE
59175: LD_INT 0
59177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
59178: LD_ADDR_VAR 0 1
59182: PUSH
59183: LD_INT 22
59185: PUSH
59186: LD_OWVAR 2
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 30
59197: PUSH
59198: LD_INT 3
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PPUSH
59209: CALL_OW 69
59213: ST_TO_ADDR
// if not tmp then
59214: LD_VAR 0 1
59218: NOT
59219: IFFALSE 59223
// exit ;
59221: GO 59249
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
59223: LD_VAR 0 1
59227: PUSH
59228: LD_INT 1
59230: PPUSH
59231: LD_VAR 0 1
59235: PPUSH
59236: CALL_OW 12
59240: ARRAY
59241: PPUSH
59242: LD_INT 1
59244: PPUSH
59245: CALL_OW 234
// end ;
59249: PPOPN 1
59251: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
59252: LD_EXP 19
59256: PUSH
59257: LD_EXP 67
59261: AND
59262: IFFALSE 59374
59264: GO 59266
59266: DISABLE
59267: LD_INT 0
59269: PPUSH
59270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
59271: LD_ADDR_VAR 0 2
59275: PUSH
59276: LD_INT 22
59278: PUSH
59279: LD_OWVAR 2
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 2
59290: PUSH
59291: LD_INT 30
59293: PUSH
59294: LD_INT 27
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 30
59303: PUSH
59304: LD_INT 26
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 30
59313: PUSH
59314: LD_INT 28
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PPUSH
59331: CALL_OW 69
59335: ST_TO_ADDR
// if not tmp then
59336: LD_VAR 0 2
59340: NOT
59341: IFFALSE 59345
// exit ;
59343: GO 59374
// for i in tmp do
59345: LD_ADDR_VAR 0 1
59349: PUSH
59350: LD_VAR 0 2
59354: PUSH
59355: FOR_IN
59356: IFFALSE 59372
// SetLives ( i , 1 ) ;
59358: LD_VAR 0 1
59362: PPUSH
59363: LD_INT 1
59365: PPUSH
59366: CALL_OW 234
59370: GO 59355
59372: POP
59373: POP
// end ;
59374: PPOPN 2
59376: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
59377: LD_EXP 19
59381: PUSH
59382: LD_EXP 68
59386: AND
59387: IFFALSE 59674
59389: GO 59391
59391: DISABLE
59392: LD_INT 0
59394: PPUSH
59395: PPUSH
59396: PPUSH
// begin i := rand ( 1 , 7 ) ;
59397: LD_ADDR_VAR 0 1
59401: PUSH
59402: LD_INT 1
59404: PPUSH
59405: LD_INT 7
59407: PPUSH
59408: CALL_OW 12
59412: ST_TO_ADDR
// case i of 1 :
59413: LD_VAR 0 1
59417: PUSH
59418: LD_INT 1
59420: DOUBLE
59421: EQUAL
59422: IFTRUE 59426
59424: GO 59436
59426: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
59427: LD_STRING earthquake(getX(game), 0, 32)
59429: PPUSH
59430: CALL_OW 559
59434: GO 59674
59436: LD_INT 2
59438: DOUBLE
59439: EQUAL
59440: IFTRUE 59444
59442: GO 59458
59444: POP
// begin ToLua ( displayStucuk(); ) ;
59445: LD_STRING displayStucuk();
59447: PPUSH
59448: CALL_OW 559
// ResetFog ;
59452: CALL_OW 335
// end ; 3 :
59456: GO 59674
59458: LD_INT 3
59460: DOUBLE
59461: EQUAL
59462: IFTRUE 59466
59464: GO 59570
59466: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59467: LD_ADDR_VAR 0 2
59471: PUSH
59472: LD_INT 22
59474: PUSH
59475: LD_OWVAR 2
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 25
59486: PUSH
59487: LD_INT 1
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PPUSH
59498: CALL_OW 69
59502: ST_TO_ADDR
// if not tmp then
59503: LD_VAR 0 2
59507: NOT
59508: IFFALSE 59512
// exit ;
59510: GO 59674
// un := tmp [ rand ( 1 , tmp ) ] ;
59512: LD_ADDR_VAR 0 3
59516: PUSH
59517: LD_VAR 0 2
59521: PUSH
59522: LD_INT 1
59524: PPUSH
59525: LD_VAR 0 2
59529: PPUSH
59530: CALL_OW 12
59534: ARRAY
59535: ST_TO_ADDR
// if Crawls ( un ) then
59536: LD_VAR 0 3
59540: PPUSH
59541: CALL_OW 318
59545: IFFALSE 59556
// ComWalk ( un ) ;
59547: LD_VAR 0 3
59551: PPUSH
59552: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59556: LD_VAR 0 3
59560: PPUSH
59561: LD_INT 8
59563: PPUSH
59564: CALL_OW 336
// end ; 4 :
59568: GO 59674
59570: LD_INT 4
59572: DOUBLE
59573: EQUAL
59574: IFTRUE 59578
59576: GO 59652
59578: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59579: LD_ADDR_VAR 0 2
59583: PUSH
59584: LD_INT 22
59586: PUSH
59587: LD_OWVAR 2
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 30
59598: PUSH
59599: LD_INT 29
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PPUSH
59610: CALL_OW 69
59614: ST_TO_ADDR
// if not tmp then
59615: LD_VAR 0 2
59619: NOT
59620: IFFALSE 59624
// exit ;
59622: GO 59674
// CenterNowOnUnits ( tmp [ 1 ] ) ;
59624: LD_VAR 0 2
59628: PUSH
59629: LD_INT 1
59631: ARRAY
59632: PPUSH
59633: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
59637: LD_VAR 0 2
59641: PUSH
59642: LD_INT 1
59644: ARRAY
59645: PPUSH
59646: CALL_OW 65
// end ; 5 .. 7 :
59650: GO 59674
59652: LD_INT 5
59654: DOUBLE
59655: GREATEREQUAL
59656: IFFALSE 59664
59658: LD_INT 7
59660: DOUBLE
59661: LESSEQUAL
59662: IFTRUE 59666
59664: GO 59673
59666: POP
// StreamSibBomb ; end ;
59667: CALL 55911 0 0
59671: GO 59674
59673: POP
// end ;
59674: PPOPN 3
59676: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
59677: LD_EXP 19
59681: PUSH
59682: LD_EXP 69
59686: AND
59687: IFFALSE 59843
59689: GO 59691
59691: DISABLE
59692: LD_INT 0
59694: PPUSH
59695: PPUSH
59696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
59697: LD_ADDR_VAR 0 2
59701: PUSH
59702: LD_INT 81
59704: PUSH
59705: LD_OWVAR 2
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 2
59716: PUSH
59717: LD_INT 21
59719: PUSH
59720: LD_INT 1
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 21
59729: PUSH
59730: LD_INT 2
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: LIST
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PPUSH
59746: CALL_OW 69
59750: ST_TO_ADDR
// if not tmp then
59751: LD_VAR 0 2
59755: NOT
59756: IFFALSE 59760
// exit ;
59758: GO 59843
// p := 0 ;
59760: LD_ADDR_VAR 0 3
59764: PUSH
59765: LD_INT 0
59767: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59768: LD_INT 35
59770: PPUSH
59771: CALL_OW 67
// p := p + 1 ;
59775: LD_ADDR_VAR 0 3
59779: PUSH
59780: LD_VAR 0 3
59784: PUSH
59785: LD_INT 1
59787: PLUS
59788: ST_TO_ADDR
// for i in tmp do
59789: LD_ADDR_VAR 0 1
59793: PUSH
59794: LD_VAR 0 2
59798: PUSH
59799: FOR_IN
59800: IFFALSE 59831
// if GetLives ( i ) < 1000 then
59802: LD_VAR 0 1
59806: PPUSH
59807: CALL_OW 256
59811: PUSH
59812: LD_INT 1000
59814: LESS
59815: IFFALSE 59829
// SetLives ( i , 1000 ) ;
59817: LD_VAR 0 1
59821: PPUSH
59822: LD_INT 1000
59824: PPUSH
59825: CALL_OW 234
59829: GO 59799
59831: POP
59832: POP
// until p > 20 ;
59833: LD_VAR 0 3
59837: PUSH
59838: LD_INT 20
59840: GREATER
59841: IFFALSE 59768
// end ;
59843: PPOPN 3
59845: END
// every 0 0$1 trigger StreamModeActive and sTime do
59846: LD_EXP 19
59850: PUSH
59851: LD_EXP 70
59855: AND
59856: IFFALSE 59891
59858: GO 59860
59860: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
59861: LD_INT 28
59863: PPUSH
59864: LD_OWVAR 2
59868: PPUSH
59869: LD_INT 2
59871: PPUSH
59872: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
59876: LD_INT 30
59878: PPUSH
59879: LD_OWVAR 2
59883: PPUSH
59884: LD_INT 2
59886: PPUSH
59887: CALL_OW 322
// end ;
59891: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
59892: LD_EXP 19
59896: PUSH
59897: LD_EXP 71
59901: AND
59902: IFFALSE 60023
59904: GO 59906
59906: DISABLE
59907: LD_INT 0
59909: PPUSH
59910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59911: LD_ADDR_VAR 0 2
59915: PUSH
59916: LD_INT 22
59918: PUSH
59919: LD_OWVAR 2
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 21
59930: PUSH
59931: LD_INT 1
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 3
59940: PUSH
59941: LD_INT 23
59943: PUSH
59944: LD_INT 0
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: LIST
59959: PPUSH
59960: CALL_OW 69
59964: ST_TO_ADDR
// if not tmp then
59965: LD_VAR 0 2
59969: NOT
59970: IFFALSE 59974
// exit ;
59972: GO 60023
// for i in tmp do
59974: LD_ADDR_VAR 0 1
59978: PUSH
59979: LD_VAR 0 2
59983: PUSH
59984: FOR_IN
59985: IFFALSE 60021
// begin if Crawls ( i ) then
59987: LD_VAR 0 1
59991: PPUSH
59992: CALL_OW 318
59996: IFFALSE 60007
// ComWalk ( i ) ;
59998: LD_VAR 0 1
60002: PPUSH
60003: CALL_OW 138
// SetClass ( i , 2 ) ;
60007: LD_VAR 0 1
60011: PPUSH
60012: LD_INT 2
60014: PPUSH
60015: CALL_OW 336
// end ;
60019: GO 59984
60021: POP
60022: POP
// end ;
60023: PPOPN 2
60025: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
60026: LD_EXP 19
60030: PUSH
60031: LD_EXP 72
60035: AND
60036: IFFALSE 60324
60038: GO 60040
60040: DISABLE
60041: LD_INT 0
60043: PPUSH
60044: PPUSH
60045: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
60046: LD_OWVAR 2
60050: PPUSH
60051: LD_INT 9
60053: PPUSH
60054: LD_INT 1
60056: PPUSH
60057: LD_INT 1
60059: PPUSH
60060: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
60064: LD_INT 9
60066: PPUSH
60067: LD_OWVAR 2
60071: PPUSH
60072: CALL_OW 343
// uc_side := 9 ;
60076: LD_ADDR_OWVAR 20
60080: PUSH
60081: LD_INT 9
60083: ST_TO_ADDR
// uc_nation := 2 ;
60084: LD_ADDR_OWVAR 21
60088: PUSH
60089: LD_INT 2
60091: ST_TO_ADDR
// hc_name := Dark Warrior ;
60092: LD_ADDR_OWVAR 26
60096: PUSH
60097: LD_STRING Dark Warrior
60099: ST_TO_ADDR
// hc_gallery :=  ;
60100: LD_ADDR_OWVAR 33
60104: PUSH
60105: LD_STRING 
60107: ST_TO_ADDR
// hc_noskilllimit := true ;
60108: LD_ADDR_OWVAR 76
60112: PUSH
60113: LD_INT 1
60115: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
60116: LD_ADDR_OWVAR 31
60120: PUSH
60121: LD_INT 30
60123: PUSH
60124: LD_INT 30
60126: PUSH
60127: LD_INT 30
60129: PUSH
60130: LD_INT 30
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: ST_TO_ADDR
// un := CreateHuman ;
60139: LD_ADDR_VAR 0 3
60143: PUSH
60144: CALL_OW 44
60148: ST_TO_ADDR
// hc_noskilllimit := false ;
60149: LD_ADDR_OWVAR 76
60153: PUSH
60154: LD_INT 0
60156: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60157: LD_VAR 0 3
60161: PPUSH
60162: LD_INT 1
60164: PPUSH
60165: CALL_OW 51
// ToLua ( playRanger() ) ;
60169: LD_STRING playRanger()
60171: PPUSH
60172: CALL_OW 559
// p := 0 ;
60176: LD_ADDR_VAR 0 2
60180: PUSH
60181: LD_INT 0
60183: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60184: LD_INT 35
60186: PPUSH
60187: CALL_OW 67
// p := p + 1 ;
60191: LD_ADDR_VAR 0 2
60195: PUSH
60196: LD_VAR 0 2
60200: PUSH
60201: LD_INT 1
60203: PLUS
60204: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
60205: LD_VAR 0 3
60209: PPUSH
60210: CALL_OW 256
60214: PUSH
60215: LD_INT 1000
60217: LESS
60218: IFFALSE 60232
// SetLives ( un , 1000 ) ;
60220: LD_VAR 0 3
60224: PPUSH
60225: LD_INT 1000
60227: PPUSH
60228: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
60232: LD_VAR 0 3
60236: PPUSH
60237: LD_INT 81
60239: PUSH
60240: LD_OWVAR 2
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 91
60251: PUSH
60252: LD_VAR 0 3
60256: PUSH
60257: LD_INT 30
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: LIST
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PPUSH
60269: CALL_OW 69
60273: PPUSH
60274: LD_VAR 0 3
60278: PPUSH
60279: CALL_OW 74
60283: PPUSH
60284: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
60288: LD_VAR 0 2
60292: PUSH
60293: LD_INT 80
60295: GREATER
60296: PUSH
60297: LD_VAR 0 3
60301: PPUSH
60302: CALL_OW 301
60306: OR
60307: IFFALSE 60184
// if un then
60309: LD_VAR 0 3
60313: IFFALSE 60324
// RemoveUnit ( un ) ;
60315: LD_VAR 0 3
60319: PPUSH
60320: CALL_OW 64
// end ;
60324: PPOPN 3
60326: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
60327: LD_EXP 73
60331: IFFALSE 60447
60333: GO 60335
60335: DISABLE
60336: LD_INT 0
60338: PPUSH
60339: PPUSH
60340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
60341: LD_ADDR_VAR 0 2
60345: PUSH
60346: LD_INT 81
60348: PUSH
60349: LD_OWVAR 2
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 21
60360: PUSH
60361: LD_INT 1
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PPUSH
60372: CALL_OW 69
60376: ST_TO_ADDR
// ToLua ( playComputer() ) ;
60377: LD_STRING playComputer()
60379: PPUSH
60380: CALL_OW 559
// if not tmp then
60384: LD_VAR 0 2
60388: NOT
60389: IFFALSE 60393
// exit ;
60391: GO 60447
// for i in tmp do
60393: LD_ADDR_VAR 0 1
60397: PUSH
60398: LD_VAR 0 2
60402: PUSH
60403: FOR_IN
60404: IFFALSE 60445
// for j := 1 to 4 do
60406: LD_ADDR_VAR 0 3
60410: PUSH
60411: DOUBLE
60412: LD_INT 1
60414: DEC
60415: ST_TO_ADDR
60416: LD_INT 4
60418: PUSH
60419: FOR_TO
60420: IFFALSE 60441
// SetSkill ( i , j , 10 ) ;
60422: LD_VAR 0 1
60426: PPUSH
60427: LD_VAR 0 3
60431: PPUSH
60432: LD_INT 10
60434: PPUSH
60435: CALL_OW 237
60439: GO 60419
60441: POP
60442: POP
60443: GO 60403
60445: POP
60446: POP
// end ;
60447: PPOPN 3
60449: END
// every 0 0$1 trigger s30 do var i , tmp ;
60450: LD_EXP 74
60454: IFFALSE 60523
60456: GO 60458
60458: DISABLE
60459: LD_INT 0
60461: PPUSH
60462: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60463: LD_ADDR_VAR 0 2
60467: PUSH
60468: LD_INT 22
60470: PUSH
60471: LD_OWVAR 2
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PPUSH
60480: CALL_OW 69
60484: ST_TO_ADDR
// if not tmp then
60485: LD_VAR 0 2
60489: NOT
60490: IFFALSE 60494
// exit ;
60492: GO 60523
// for i in tmp do
60494: LD_ADDR_VAR 0 1
60498: PUSH
60499: LD_VAR 0 2
60503: PUSH
60504: FOR_IN
60505: IFFALSE 60521
// SetLives ( i , 300 ) ;
60507: LD_VAR 0 1
60511: PPUSH
60512: LD_INT 300
60514: PPUSH
60515: CALL_OW 234
60519: GO 60504
60521: POP
60522: POP
// end ;
60523: PPOPN 2
60525: END
// every 0 0$1 trigger s60 do var i , tmp ;
60526: LD_EXP 75
60530: IFFALSE 60599
60532: GO 60534
60534: DISABLE
60535: LD_INT 0
60537: PPUSH
60538: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60539: LD_ADDR_VAR 0 2
60543: PUSH
60544: LD_INT 22
60546: PUSH
60547: LD_OWVAR 2
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PPUSH
60556: CALL_OW 69
60560: ST_TO_ADDR
// if not tmp then
60561: LD_VAR 0 2
60565: NOT
60566: IFFALSE 60570
// exit ;
60568: GO 60599
// for i in tmp do
60570: LD_ADDR_VAR 0 1
60574: PUSH
60575: LD_VAR 0 2
60579: PUSH
60580: FOR_IN
60581: IFFALSE 60597
// SetLives ( i , 600 ) ;
60583: LD_VAR 0 1
60587: PPUSH
60588: LD_INT 600
60590: PPUSH
60591: CALL_OW 234
60595: GO 60580
60597: POP
60598: POP
// end ;
60599: PPOPN 2
60601: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60602: LD_INT 0
60604: PPUSH
// case cmd of 301 :
60605: LD_VAR 0 1
60609: PUSH
60610: LD_INT 301
60612: DOUBLE
60613: EQUAL
60614: IFTRUE 60618
60616: GO 60650
60618: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
60619: LD_VAR 0 6
60623: PPUSH
60624: LD_VAR 0 7
60628: PPUSH
60629: LD_VAR 0 8
60633: PPUSH
60634: LD_VAR 0 4
60638: PPUSH
60639: LD_VAR 0 5
60643: PPUSH
60644: CALL 61851 0 5
60648: GO 60771
60650: LD_INT 302
60652: DOUBLE
60653: EQUAL
60654: IFTRUE 60658
60656: GO 60695
60658: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
60659: LD_VAR 0 6
60663: PPUSH
60664: LD_VAR 0 7
60668: PPUSH
60669: LD_VAR 0 8
60673: PPUSH
60674: LD_VAR 0 9
60678: PPUSH
60679: LD_VAR 0 4
60683: PPUSH
60684: LD_VAR 0 5
60688: PPUSH
60689: CALL 61942 0 6
60693: GO 60771
60695: LD_INT 303
60697: DOUBLE
60698: EQUAL
60699: IFTRUE 60703
60701: GO 60740
60703: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
60704: LD_VAR 0 6
60708: PPUSH
60709: LD_VAR 0 7
60713: PPUSH
60714: LD_VAR 0 8
60718: PPUSH
60719: LD_VAR 0 9
60723: PPUSH
60724: LD_VAR 0 4
60728: PPUSH
60729: LD_VAR 0 5
60733: PPUSH
60734: CALL 60776 0 6
60738: GO 60771
60740: LD_INT 304
60742: DOUBLE
60743: EQUAL
60744: IFTRUE 60748
60746: GO 60770
60748: POP
// hHackTeleport ( unit , x , y ) ; end ;
60749: LD_VAR 0 2
60753: PPUSH
60754: LD_VAR 0 4
60758: PPUSH
60759: LD_VAR 0 5
60763: PPUSH
60764: CALL 62535 0 3
60768: GO 60771
60770: POP
// end ;
60771: LD_VAR 0 12
60775: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
60776: LD_INT 0
60778: PPUSH
60779: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
60780: LD_VAR 0 1
60784: PUSH
60785: LD_INT 1
60787: LESS
60788: PUSH
60789: LD_VAR 0 1
60793: PUSH
60794: LD_INT 3
60796: GREATER
60797: OR
60798: PUSH
60799: LD_VAR 0 5
60803: PPUSH
60804: LD_VAR 0 6
60808: PPUSH
60809: CALL_OW 428
60813: OR
60814: IFFALSE 60818
// exit ;
60816: GO 61538
// uc_side := your_side ;
60818: LD_ADDR_OWVAR 20
60822: PUSH
60823: LD_OWVAR 2
60827: ST_TO_ADDR
// uc_nation := nation ;
60828: LD_ADDR_OWVAR 21
60832: PUSH
60833: LD_VAR 0 1
60837: ST_TO_ADDR
// bc_level = 1 ;
60838: LD_ADDR_OWVAR 43
60842: PUSH
60843: LD_INT 1
60845: ST_TO_ADDR
// case btype of 1 :
60846: LD_VAR 0 2
60850: PUSH
60851: LD_INT 1
60853: DOUBLE
60854: EQUAL
60855: IFTRUE 60859
60857: GO 60870
60859: POP
// bc_type := b_depot ; 2 :
60860: LD_ADDR_OWVAR 42
60864: PUSH
60865: LD_INT 0
60867: ST_TO_ADDR
60868: GO 61482
60870: LD_INT 2
60872: DOUBLE
60873: EQUAL
60874: IFTRUE 60878
60876: GO 60889
60878: POP
// bc_type := b_warehouse ; 3 :
60879: LD_ADDR_OWVAR 42
60883: PUSH
60884: LD_INT 1
60886: ST_TO_ADDR
60887: GO 61482
60889: LD_INT 3
60891: DOUBLE
60892: EQUAL
60893: IFTRUE 60897
60895: GO 60908
60897: POP
// bc_type := b_lab ; 4 .. 9 :
60898: LD_ADDR_OWVAR 42
60902: PUSH
60903: LD_INT 6
60905: ST_TO_ADDR
60906: GO 61482
60908: LD_INT 4
60910: DOUBLE
60911: GREATEREQUAL
60912: IFFALSE 60920
60914: LD_INT 9
60916: DOUBLE
60917: LESSEQUAL
60918: IFTRUE 60922
60920: GO 60974
60922: POP
// begin bc_type := b_lab_half ;
60923: LD_ADDR_OWVAR 42
60927: PUSH
60928: LD_INT 7
60930: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
60931: LD_ADDR_OWVAR 44
60935: PUSH
60936: LD_INT 10
60938: PUSH
60939: LD_INT 11
60941: PUSH
60942: LD_INT 12
60944: PUSH
60945: LD_INT 15
60947: PUSH
60948: LD_INT 14
60950: PUSH
60951: LD_INT 13
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: PUSH
60962: LD_VAR 0 2
60966: PUSH
60967: LD_INT 3
60969: MINUS
60970: ARRAY
60971: ST_TO_ADDR
// end ; 10 .. 13 :
60972: GO 61482
60974: LD_INT 10
60976: DOUBLE
60977: GREATEREQUAL
60978: IFFALSE 60986
60980: LD_INT 13
60982: DOUBLE
60983: LESSEQUAL
60984: IFTRUE 60988
60986: GO 61065
60988: POP
// begin bc_type := b_lab_full ;
60989: LD_ADDR_OWVAR 42
60993: PUSH
60994: LD_INT 8
60996: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
60997: LD_ADDR_OWVAR 44
61001: PUSH
61002: LD_INT 10
61004: PUSH
61005: LD_INT 12
61007: PUSH
61008: LD_INT 14
61010: PUSH
61011: LD_INT 13
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: PUSH
61020: LD_VAR 0 2
61024: PUSH
61025: LD_INT 9
61027: MINUS
61028: ARRAY
61029: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
61030: LD_ADDR_OWVAR 45
61034: PUSH
61035: LD_INT 11
61037: PUSH
61038: LD_INT 15
61040: PUSH
61041: LD_INT 12
61043: PUSH
61044: LD_INT 15
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: PUSH
61053: LD_VAR 0 2
61057: PUSH
61058: LD_INT 9
61060: MINUS
61061: ARRAY
61062: ST_TO_ADDR
// end ; 14 :
61063: GO 61482
61065: LD_INT 14
61067: DOUBLE
61068: EQUAL
61069: IFTRUE 61073
61071: GO 61084
61073: POP
// bc_type := b_workshop ; 15 :
61074: LD_ADDR_OWVAR 42
61078: PUSH
61079: LD_INT 2
61081: ST_TO_ADDR
61082: GO 61482
61084: LD_INT 15
61086: DOUBLE
61087: EQUAL
61088: IFTRUE 61092
61090: GO 61103
61092: POP
// bc_type := b_factory ; 16 :
61093: LD_ADDR_OWVAR 42
61097: PUSH
61098: LD_INT 3
61100: ST_TO_ADDR
61101: GO 61482
61103: LD_INT 16
61105: DOUBLE
61106: EQUAL
61107: IFTRUE 61111
61109: GO 61122
61111: POP
// bc_type := b_ext_gun ; 17 :
61112: LD_ADDR_OWVAR 42
61116: PUSH
61117: LD_INT 17
61119: ST_TO_ADDR
61120: GO 61482
61122: LD_INT 17
61124: DOUBLE
61125: EQUAL
61126: IFTRUE 61130
61128: GO 61158
61130: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
61131: LD_ADDR_OWVAR 42
61135: PUSH
61136: LD_INT 19
61138: PUSH
61139: LD_INT 23
61141: PUSH
61142: LD_INT 19
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: LIST
61149: PUSH
61150: LD_VAR 0 1
61154: ARRAY
61155: ST_TO_ADDR
61156: GO 61482
61158: LD_INT 18
61160: DOUBLE
61161: EQUAL
61162: IFTRUE 61166
61164: GO 61177
61166: POP
// bc_type := b_ext_radar ; 19 :
61167: LD_ADDR_OWVAR 42
61171: PUSH
61172: LD_INT 20
61174: ST_TO_ADDR
61175: GO 61482
61177: LD_INT 19
61179: DOUBLE
61180: EQUAL
61181: IFTRUE 61185
61183: GO 61196
61185: POP
// bc_type := b_ext_radio ; 20 :
61186: LD_ADDR_OWVAR 42
61190: PUSH
61191: LD_INT 22
61193: ST_TO_ADDR
61194: GO 61482
61196: LD_INT 20
61198: DOUBLE
61199: EQUAL
61200: IFTRUE 61204
61202: GO 61215
61204: POP
// bc_type := b_ext_siberium ; 21 :
61205: LD_ADDR_OWVAR 42
61209: PUSH
61210: LD_INT 21
61212: ST_TO_ADDR
61213: GO 61482
61215: LD_INT 21
61217: DOUBLE
61218: EQUAL
61219: IFTRUE 61223
61221: GO 61234
61223: POP
// bc_type := b_ext_computer ; 22 :
61224: LD_ADDR_OWVAR 42
61228: PUSH
61229: LD_INT 24
61231: ST_TO_ADDR
61232: GO 61482
61234: LD_INT 22
61236: DOUBLE
61237: EQUAL
61238: IFTRUE 61242
61240: GO 61253
61242: POP
// bc_type := b_ext_track ; 23 :
61243: LD_ADDR_OWVAR 42
61247: PUSH
61248: LD_INT 16
61250: ST_TO_ADDR
61251: GO 61482
61253: LD_INT 23
61255: DOUBLE
61256: EQUAL
61257: IFTRUE 61261
61259: GO 61272
61261: POP
// bc_type := b_ext_laser ; 24 :
61262: LD_ADDR_OWVAR 42
61266: PUSH
61267: LD_INT 25
61269: ST_TO_ADDR
61270: GO 61482
61272: LD_INT 24
61274: DOUBLE
61275: EQUAL
61276: IFTRUE 61280
61278: GO 61291
61280: POP
// bc_type := b_control_tower ; 25 :
61281: LD_ADDR_OWVAR 42
61285: PUSH
61286: LD_INT 36
61288: ST_TO_ADDR
61289: GO 61482
61291: LD_INT 25
61293: DOUBLE
61294: EQUAL
61295: IFTRUE 61299
61297: GO 61310
61299: POP
// bc_type := b_breastwork ; 26 :
61300: LD_ADDR_OWVAR 42
61304: PUSH
61305: LD_INT 31
61307: ST_TO_ADDR
61308: GO 61482
61310: LD_INT 26
61312: DOUBLE
61313: EQUAL
61314: IFTRUE 61318
61316: GO 61329
61318: POP
// bc_type := b_bunker ; 27 :
61319: LD_ADDR_OWVAR 42
61323: PUSH
61324: LD_INT 32
61326: ST_TO_ADDR
61327: GO 61482
61329: LD_INT 27
61331: DOUBLE
61332: EQUAL
61333: IFTRUE 61337
61335: GO 61348
61337: POP
// bc_type := b_turret ; 28 :
61338: LD_ADDR_OWVAR 42
61342: PUSH
61343: LD_INT 33
61345: ST_TO_ADDR
61346: GO 61482
61348: LD_INT 28
61350: DOUBLE
61351: EQUAL
61352: IFTRUE 61356
61354: GO 61367
61356: POP
// bc_type := b_armoury ; 29 :
61357: LD_ADDR_OWVAR 42
61361: PUSH
61362: LD_INT 4
61364: ST_TO_ADDR
61365: GO 61482
61367: LD_INT 29
61369: DOUBLE
61370: EQUAL
61371: IFTRUE 61375
61373: GO 61386
61375: POP
// bc_type := b_barracks ; 30 :
61376: LD_ADDR_OWVAR 42
61380: PUSH
61381: LD_INT 5
61383: ST_TO_ADDR
61384: GO 61482
61386: LD_INT 30
61388: DOUBLE
61389: EQUAL
61390: IFTRUE 61394
61392: GO 61405
61394: POP
// bc_type := b_solar_power ; 31 :
61395: LD_ADDR_OWVAR 42
61399: PUSH
61400: LD_INT 27
61402: ST_TO_ADDR
61403: GO 61482
61405: LD_INT 31
61407: DOUBLE
61408: EQUAL
61409: IFTRUE 61413
61411: GO 61424
61413: POP
// bc_type := b_oil_power ; 32 :
61414: LD_ADDR_OWVAR 42
61418: PUSH
61419: LD_INT 26
61421: ST_TO_ADDR
61422: GO 61482
61424: LD_INT 32
61426: DOUBLE
61427: EQUAL
61428: IFTRUE 61432
61430: GO 61443
61432: POP
// bc_type := b_siberite_power ; 33 :
61433: LD_ADDR_OWVAR 42
61437: PUSH
61438: LD_INT 28
61440: ST_TO_ADDR
61441: GO 61482
61443: LD_INT 33
61445: DOUBLE
61446: EQUAL
61447: IFTRUE 61451
61449: GO 61462
61451: POP
// bc_type := b_oil_mine ; 34 :
61452: LD_ADDR_OWVAR 42
61456: PUSH
61457: LD_INT 29
61459: ST_TO_ADDR
61460: GO 61482
61462: LD_INT 34
61464: DOUBLE
61465: EQUAL
61466: IFTRUE 61470
61468: GO 61481
61470: POP
// bc_type := b_siberite_mine ; end ;
61471: LD_ADDR_OWVAR 42
61475: PUSH
61476: LD_INT 30
61478: ST_TO_ADDR
61479: GO 61482
61481: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
61482: LD_ADDR_VAR 0 8
61486: PUSH
61487: LD_VAR 0 5
61491: PPUSH
61492: LD_VAR 0 6
61496: PPUSH
61497: LD_VAR 0 3
61501: PPUSH
61502: CALL_OW 47
61506: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
61507: LD_OWVAR 42
61511: PUSH
61512: LD_INT 32
61514: PUSH
61515: LD_INT 33
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: IN
61522: IFFALSE 61538
// PlaceWeaponTurret ( b , weapon ) ;
61524: LD_VAR 0 8
61528: PPUSH
61529: LD_VAR 0 4
61533: PPUSH
61534: CALL_OW 431
// end ;
61538: LD_VAR 0 7
61542: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
61543: LD_INT 0
61545: PPUSH
61546: PPUSH
61547: PPUSH
61548: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61549: LD_ADDR_VAR 0 4
61553: PUSH
61554: LD_INT 22
61556: PUSH
61557: LD_OWVAR 2
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: LD_INT 30
61571: PUSH
61572: LD_INT 0
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 30
61581: PUSH
61582: LD_INT 1
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: LIST
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PPUSH
61598: CALL_OW 69
61602: ST_TO_ADDR
// if not tmp then
61603: LD_VAR 0 4
61607: NOT
61608: IFFALSE 61612
// exit ;
61610: GO 61671
// for i in tmp do
61612: LD_ADDR_VAR 0 2
61616: PUSH
61617: LD_VAR 0 4
61621: PUSH
61622: FOR_IN
61623: IFFALSE 61669
// for j = 1 to 3 do
61625: LD_ADDR_VAR 0 3
61629: PUSH
61630: DOUBLE
61631: LD_INT 1
61633: DEC
61634: ST_TO_ADDR
61635: LD_INT 3
61637: PUSH
61638: FOR_TO
61639: IFFALSE 61665
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
61641: LD_VAR 0 2
61645: PPUSH
61646: CALL_OW 274
61650: PPUSH
61651: LD_VAR 0 3
61655: PPUSH
61656: LD_INT 99999
61658: PPUSH
61659: CALL_OW 277
61663: GO 61638
61665: POP
61666: POP
61667: GO 61622
61669: POP
61670: POP
// end ;
61671: LD_VAR 0 1
61675: RET
// export function hHackSetLevel10 ; var i , j ; begin
61676: LD_INT 0
61678: PPUSH
61679: PPUSH
61680: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
61681: LD_ADDR_VAR 0 2
61685: PUSH
61686: LD_INT 21
61688: PUSH
61689: LD_INT 1
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PPUSH
61696: CALL_OW 69
61700: PUSH
61701: FOR_IN
61702: IFFALSE 61754
// if IsSelected ( i ) then
61704: LD_VAR 0 2
61708: PPUSH
61709: CALL_OW 306
61713: IFFALSE 61752
// begin for j := 1 to 4 do
61715: LD_ADDR_VAR 0 3
61719: PUSH
61720: DOUBLE
61721: LD_INT 1
61723: DEC
61724: ST_TO_ADDR
61725: LD_INT 4
61727: PUSH
61728: FOR_TO
61729: IFFALSE 61750
// SetSkill ( i , j , 10 ) ;
61731: LD_VAR 0 2
61735: PPUSH
61736: LD_VAR 0 3
61740: PPUSH
61741: LD_INT 10
61743: PPUSH
61744: CALL_OW 237
61748: GO 61728
61750: POP
61751: POP
// end ;
61752: GO 61701
61754: POP
61755: POP
// end ;
61756: LD_VAR 0 1
61760: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
61761: LD_INT 0
61763: PPUSH
61764: PPUSH
61765: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
61766: LD_ADDR_VAR 0 2
61770: PUSH
61771: LD_INT 22
61773: PUSH
61774: LD_OWVAR 2
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 21
61785: PUSH
61786: LD_INT 1
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PPUSH
61797: CALL_OW 69
61801: PUSH
61802: FOR_IN
61803: IFFALSE 61844
// begin for j := 1 to 4 do
61805: LD_ADDR_VAR 0 3
61809: PUSH
61810: DOUBLE
61811: LD_INT 1
61813: DEC
61814: ST_TO_ADDR
61815: LD_INT 4
61817: PUSH
61818: FOR_TO
61819: IFFALSE 61840
// SetSkill ( i , j , 10 ) ;
61821: LD_VAR 0 2
61825: PPUSH
61826: LD_VAR 0 3
61830: PPUSH
61831: LD_INT 10
61833: PPUSH
61834: CALL_OW 237
61838: GO 61818
61840: POP
61841: POP
// end ;
61842: GO 61802
61844: POP
61845: POP
// end ;
61846: LD_VAR 0 1
61850: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
61851: LD_INT 0
61853: PPUSH
// uc_side := your_side ;
61854: LD_ADDR_OWVAR 20
61858: PUSH
61859: LD_OWVAR 2
61863: ST_TO_ADDR
// uc_nation := nation ;
61864: LD_ADDR_OWVAR 21
61868: PUSH
61869: LD_VAR 0 1
61873: ST_TO_ADDR
// InitHc ;
61874: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
61878: LD_INT 0
61880: PPUSH
61881: LD_VAR 0 2
61885: PPUSH
61886: LD_VAR 0 3
61890: PPUSH
61891: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
61895: LD_VAR 0 4
61899: PPUSH
61900: LD_VAR 0 5
61904: PPUSH
61905: CALL_OW 428
61909: PUSH
61910: LD_INT 0
61912: EQUAL
61913: IFFALSE 61937
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
61915: CALL_OW 44
61919: PPUSH
61920: LD_VAR 0 4
61924: PPUSH
61925: LD_VAR 0 5
61929: PPUSH
61930: LD_INT 1
61932: PPUSH
61933: CALL_OW 48
// end ;
61937: LD_VAR 0 6
61941: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
61942: LD_INT 0
61944: PPUSH
61945: PPUSH
// uc_side := your_side ;
61946: LD_ADDR_OWVAR 20
61950: PUSH
61951: LD_OWVAR 2
61955: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
61956: LD_VAR 0 1
61960: PUSH
61961: LD_INT 1
61963: PUSH
61964: LD_INT 2
61966: PUSH
61967: LD_INT 3
61969: PUSH
61970: LD_INT 4
61972: PUSH
61973: LD_INT 5
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: IN
61983: IFFALSE 61995
// uc_nation := nation_american else
61985: LD_ADDR_OWVAR 21
61989: PUSH
61990: LD_INT 1
61992: ST_TO_ADDR
61993: GO 62038
// if chassis in [ 11 , 12 , 13 , 14 ] then
61995: LD_VAR 0 1
61999: PUSH
62000: LD_INT 11
62002: PUSH
62003: LD_INT 12
62005: PUSH
62006: LD_INT 13
62008: PUSH
62009: LD_INT 14
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: IN
62018: IFFALSE 62030
// uc_nation := nation_arabian else
62020: LD_ADDR_OWVAR 21
62024: PUSH
62025: LD_INT 2
62027: ST_TO_ADDR
62028: GO 62038
// uc_nation := nation_russian ;
62030: LD_ADDR_OWVAR 21
62034: PUSH
62035: LD_INT 3
62037: ST_TO_ADDR
// vc_chassis := chassis ;
62038: LD_ADDR_OWVAR 37
62042: PUSH
62043: LD_VAR 0 1
62047: ST_TO_ADDR
// vc_engine := engine ;
62048: LD_ADDR_OWVAR 39
62052: PUSH
62053: LD_VAR 0 2
62057: ST_TO_ADDR
// vc_control := control ;
62058: LD_ADDR_OWVAR 38
62062: PUSH
62063: LD_VAR 0 3
62067: ST_TO_ADDR
// vc_weapon := weapon ;
62068: LD_ADDR_OWVAR 40
62072: PUSH
62073: LD_VAR 0 4
62077: ST_TO_ADDR
// un := CreateVehicle ;
62078: LD_ADDR_VAR 0 8
62082: PUSH
62083: CALL_OW 45
62087: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
62088: LD_VAR 0 8
62092: PPUSH
62093: LD_INT 0
62095: PPUSH
62096: LD_INT 5
62098: PPUSH
62099: CALL_OW 12
62103: PPUSH
62104: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
62108: LD_VAR 0 8
62112: PPUSH
62113: LD_VAR 0 5
62117: PPUSH
62118: LD_VAR 0 6
62122: PPUSH
62123: LD_INT 1
62125: PPUSH
62126: CALL_OW 48
// end ;
62130: LD_VAR 0 7
62134: RET
// export hInvincible ; every 1 do
62135: GO 62137
62137: DISABLE
// hInvincible := [ ] ;
62138: LD_ADDR_EXP 76
62142: PUSH
62143: EMPTY
62144: ST_TO_ADDR
62145: END
// every 10 do var i ;
62146: GO 62148
62148: DISABLE
62149: LD_INT 0
62151: PPUSH
// begin enable ;
62152: ENABLE
// if not hInvincible then
62153: LD_EXP 76
62157: NOT
62158: IFFALSE 62162
// exit ;
62160: GO 62206
// for i in hInvincible do
62162: LD_ADDR_VAR 0 1
62166: PUSH
62167: LD_EXP 76
62171: PUSH
62172: FOR_IN
62173: IFFALSE 62204
// if GetLives ( i ) < 1000 then
62175: LD_VAR 0 1
62179: PPUSH
62180: CALL_OW 256
62184: PUSH
62185: LD_INT 1000
62187: LESS
62188: IFFALSE 62202
// SetLives ( i , 1000 ) ;
62190: LD_VAR 0 1
62194: PPUSH
62195: LD_INT 1000
62197: PPUSH
62198: CALL_OW 234
62202: GO 62172
62204: POP
62205: POP
// end ;
62206: PPOPN 1
62208: END
// export function hHackInvincible ; var i ; begin
62209: LD_INT 0
62211: PPUSH
62212: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
62213: LD_ADDR_VAR 0 2
62217: PUSH
62218: LD_INT 2
62220: PUSH
62221: LD_INT 21
62223: PUSH
62224: LD_INT 1
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 21
62233: PUSH
62234: LD_INT 2
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: LIST
62245: PPUSH
62246: CALL_OW 69
62250: PUSH
62251: FOR_IN
62252: IFFALSE 62313
// if IsSelected ( i ) then
62254: LD_VAR 0 2
62258: PPUSH
62259: CALL_OW 306
62263: IFFALSE 62311
// begin if i in hInvincible then
62265: LD_VAR 0 2
62269: PUSH
62270: LD_EXP 76
62274: IN
62275: IFFALSE 62295
// hInvincible := hInvincible diff i else
62277: LD_ADDR_EXP 76
62281: PUSH
62282: LD_EXP 76
62286: PUSH
62287: LD_VAR 0 2
62291: DIFF
62292: ST_TO_ADDR
62293: GO 62311
// hInvincible := hInvincible union i ;
62295: LD_ADDR_EXP 76
62299: PUSH
62300: LD_EXP 76
62304: PUSH
62305: LD_VAR 0 2
62309: UNION
62310: ST_TO_ADDR
// end ;
62311: GO 62251
62313: POP
62314: POP
// end ;
62315: LD_VAR 0 1
62319: RET
// export function hHackInvisible ; var i , j ; begin
62320: LD_INT 0
62322: PPUSH
62323: PPUSH
62324: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
62325: LD_ADDR_VAR 0 2
62329: PUSH
62330: LD_INT 21
62332: PUSH
62333: LD_INT 1
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PPUSH
62340: CALL_OW 69
62344: PUSH
62345: FOR_IN
62346: IFFALSE 62370
// if IsSelected ( i ) then
62348: LD_VAR 0 2
62352: PPUSH
62353: CALL_OW 306
62357: IFFALSE 62368
// ComForceInvisible ( i ) ;
62359: LD_VAR 0 2
62363: PPUSH
62364: CALL_OW 496
62368: GO 62345
62370: POP
62371: POP
// end ;
62372: LD_VAR 0 1
62376: RET
// export function hHackChangeYourSide ; begin
62377: LD_INT 0
62379: PPUSH
// if your_side = 8 then
62380: LD_OWVAR 2
62384: PUSH
62385: LD_INT 8
62387: EQUAL
62388: IFFALSE 62400
// your_side := 0 else
62390: LD_ADDR_OWVAR 2
62394: PUSH
62395: LD_INT 0
62397: ST_TO_ADDR
62398: GO 62414
// your_side := your_side + 1 ;
62400: LD_ADDR_OWVAR 2
62404: PUSH
62405: LD_OWVAR 2
62409: PUSH
62410: LD_INT 1
62412: PLUS
62413: ST_TO_ADDR
// end ;
62414: LD_VAR 0 1
62418: RET
// export function hHackChangeUnitSide ; var i , j ; begin
62419: LD_INT 0
62421: PPUSH
62422: PPUSH
62423: PPUSH
// for i in all_units do
62424: LD_ADDR_VAR 0 2
62428: PUSH
62429: LD_OWVAR 3
62433: PUSH
62434: FOR_IN
62435: IFFALSE 62513
// if IsSelected ( i ) then
62437: LD_VAR 0 2
62441: PPUSH
62442: CALL_OW 306
62446: IFFALSE 62511
// begin j := GetSide ( i ) ;
62448: LD_ADDR_VAR 0 3
62452: PUSH
62453: LD_VAR 0 2
62457: PPUSH
62458: CALL_OW 255
62462: ST_TO_ADDR
// if j = 8 then
62463: LD_VAR 0 3
62467: PUSH
62468: LD_INT 8
62470: EQUAL
62471: IFFALSE 62483
// j := 0 else
62473: LD_ADDR_VAR 0 3
62477: PUSH
62478: LD_INT 0
62480: ST_TO_ADDR
62481: GO 62497
// j := j + 1 ;
62483: LD_ADDR_VAR 0 3
62487: PUSH
62488: LD_VAR 0 3
62492: PUSH
62493: LD_INT 1
62495: PLUS
62496: ST_TO_ADDR
// SetSide ( i , j ) ;
62497: LD_VAR 0 2
62501: PPUSH
62502: LD_VAR 0 3
62506: PPUSH
62507: CALL_OW 235
// end ;
62511: GO 62434
62513: POP
62514: POP
// end ;
62515: LD_VAR 0 1
62519: RET
// export function hHackFog ; begin
62520: LD_INT 0
62522: PPUSH
// FogOff ( true ) ;
62523: LD_INT 1
62525: PPUSH
62526: CALL_OW 344
// end ;
62530: LD_VAR 0 1
62534: RET
// export function hHackTeleport ( unit , x , y ) ; begin
62535: LD_INT 0
62537: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
62538: LD_VAR 0 1
62542: PPUSH
62543: LD_VAR 0 2
62547: PPUSH
62548: LD_VAR 0 3
62552: PPUSH
62553: LD_INT 1
62555: PPUSH
62556: LD_INT 1
62558: PPUSH
62559: CALL_OW 483
// CenterOnXY ( x , y ) ;
62563: LD_VAR 0 2
62567: PPUSH
62568: LD_VAR 0 3
62572: PPUSH
62573: CALL_OW 84
// end ;
62577: LD_VAR 0 4
62581: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
62582: LD_INT 0
62584: PPUSH
62585: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
62586: LD_VAR 0 1
62590: NOT
62591: PUSH
62592: LD_VAR 0 2
62596: PPUSH
62597: LD_VAR 0 3
62601: PPUSH
62602: CALL_OW 488
62606: NOT
62607: OR
62608: PUSH
62609: LD_VAR 0 1
62613: PPUSH
62614: CALL_OW 266
62618: PUSH
62619: LD_INT 3
62621: NONEQUAL
62622: PUSH
62623: LD_VAR 0 1
62627: PPUSH
62628: CALL_OW 247
62632: PUSH
62633: LD_INT 1
62635: EQUAL
62636: NOT
62637: AND
62638: OR
62639: IFFALSE 62643
// exit ;
62641: GO 62792
// if GetType ( factory ) = unit_human then
62643: LD_VAR 0 1
62647: PPUSH
62648: CALL_OW 247
62652: PUSH
62653: LD_INT 1
62655: EQUAL
62656: IFFALSE 62673
// factory := IsInUnit ( factory ) ;
62658: LD_ADDR_VAR 0 1
62662: PUSH
62663: LD_VAR 0 1
62667: PPUSH
62668: CALL_OW 310
62672: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
62673: LD_VAR 0 1
62677: PPUSH
62678: CALL_OW 266
62682: PUSH
62683: LD_INT 3
62685: NONEQUAL
62686: IFFALSE 62690
// exit ;
62688: GO 62792
// if HexInfo ( x , y ) = factory then
62690: LD_VAR 0 2
62694: PPUSH
62695: LD_VAR 0 3
62699: PPUSH
62700: CALL_OW 428
62704: PUSH
62705: LD_VAR 0 1
62709: EQUAL
62710: IFFALSE 62737
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
62712: LD_ADDR_EXP 77
62716: PUSH
62717: LD_EXP 77
62721: PPUSH
62722: LD_VAR 0 1
62726: PPUSH
62727: LD_INT 0
62729: PPUSH
62730: CALL_OW 1
62734: ST_TO_ADDR
62735: GO 62788
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
62737: LD_ADDR_EXP 77
62741: PUSH
62742: LD_EXP 77
62746: PPUSH
62747: LD_VAR 0 1
62751: PPUSH
62752: LD_VAR 0 1
62756: PPUSH
62757: CALL_OW 255
62761: PUSH
62762: LD_VAR 0 1
62766: PUSH
62767: LD_VAR 0 2
62771: PUSH
62772: LD_VAR 0 3
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: PPUSH
62783: CALL_OW 1
62787: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62788: CALL 62797 0 0
// end ;
62792: LD_VAR 0 4
62796: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
62797: LD_INT 0
62799: PPUSH
62800: PPUSH
62801: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
62802: LD_STRING resetFactoryWaypoint();
62804: PPUSH
62805: CALL_OW 559
// if factoryWaypoints then
62809: LD_EXP 77
62813: IFFALSE 62939
// begin list := PrepareArray ( factoryWaypoints ) ;
62815: LD_ADDR_VAR 0 3
62819: PUSH
62820: LD_EXP 77
62824: PPUSH
62825: CALL 43904 0 1
62829: ST_TO_ADDR
// for i := 1 to list do
62830: LD_ADDR_VAR 0 2
62834: PUSH
62835: DOUBLE
62836: LD_INT 1
62838: DEC
62839: ST_TO_ADDR
62840: LD_VAR 0 3
62844: PUSH
62845: FOR_TO
62846: IFFALSE 62937
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62848: LD_STRING setFactoryWaypointXY(
62850: PUSH
62851: LD_VAR 0 3
62855: PUSH
62856: LD_VAR 0 2
62860: ARRAY
62861: PUSH
62862: LD_INT 1
62864: ARRAY
62865: STR
62866: PUSH
62867: LD_STRING ,
62869: STR
62870: PUSH
62871: LD_VAR 0 3
62875: PUSH
62876: LD_VAR 0 2
62880: ARRAY
62881: PUSH
62882: LD_INT 2
62884: ARRAY
62885: STR
62886: PUSH
62887: LD_STRING ,
62889: STR
62890: PUSH
62891: LD_VAR 0 3
62895: PUSH
62896: LD_VAR 0 2
62900: ARRAY
62901: PUSH
62902: LD_INT 3
62904: ARRAY
62905: STR
62906: PUSH
62907: LD_STRING ,
62909: STR
62910: PUSH
62911: LD_VAR 0 3
62915: PUSH
62916: LD_VAR 0 2
62920: ARRAY
62921: PUSH
62922: LD_INT 4
62924: ARRAY
62925: STR
62926: PUSH
62927: LD_STRING )
62929: STR
62930: PPUSH
62931: CALL_OW 559
62935: GO 62845
62937: POP
62938: POP
// end ; end ;
62939: LD_VAR 0 1
62943: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
62944: LD_INT 0
62946: PPUSH
// if HexInfo ( x , y ) = warehouse then
62947: LD_VAR 0 2
62951: PPUSH
62952: LD_VAR 0 3
62956: PPUSH
62957: CALL_OW 428
62961: PUSH
62962: LD_VAR 0 1
62966: EQUAL
62967: IFFALSE 62994
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62969: LD_ADDR_EXP 78
62973: PUSH
62974: LD_EXP 78
62978: PPUSH
62979: LD_VAR 0 1
62983: PPUSH
62984: LD_INT 0
62986: PPUSH
62987: CALL_OW 1
62991: ST_TO_ADDR
62992: GO 63045
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62994: LD_ADDR_EXP 78
62998: PUSH
62999: LD_EXP 78
63003: PPUSH
63004: LD_VAR 0 1
63008: PPUSH
63009: LD_VAR 0 1
63013: PPUSH
63014: CALL_OW 255
63018: PUSH
63019: LD_VAR 0 1
63023: PUSH
63024: LD_VAR 0 2
63028: PUSH
63029: LD_VAR 0 3
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: PPUSH
63040: CALL_OW 1
63044: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
63045: CALL 63054 0 0
// end ;
63049: LD_VAR 0 4
63053: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
63054: LD_INT 0
63056: PPUSH
63057: PPUSH
63058: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
63059: LD_STRING resetWarehouseGatheringPoints();
63061: PPUSH
63062: CALL_OW 559
// if warehouseGatheringPoints then
63066: LD_EXP 78
63070: IFFALSE 63196
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
63072: LD_ADDR_VAR 0 3
63076: PUSH
63077: LD_EXP 78
63081: PPUSH
63082: CALL 43904 0 1
63086: ST_TO_ADDR
// for i := 1 to list do
63087: LD_ADDR_VAR 0 2
63091: PUSH
63092: DOUBLE
63093: LD_INT 1
63095: DEC
63096: ST_TO_ADDR
63097: LD_VAR 0 3
63101: PUSH
63102: FOR_TO
63103: IFFALSE 63194
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63105: LD_STRING setWarehouseGatheringPointXY(
63107: PUSH
63108: LD_VAR 0 3
63112: PUSH
63113: LD_VAR 0 2
63117: ARRAY
63118: PUSH
63119: LD_INT 1
63121: ARRAY
63122: STR
63123: PUSH
63124: LD_STRING ,
63126: STR
63127: PUSH
63128: LD_VAR 0 3
63132: PUSH
63133: LD_VAR 0 2
63137: ARRAY
63138: PUSH
63139: LD_INT 2
63141: ARRAY
63142: STR
63143: PUSH
63144: LD_STRING ,
63146: STR
63147: PUSH
63148: LD_VAR 0 3
63152: PUSH
63153: LD_VAR 0 2
63157: ARRAY
63158: PUSH
63159: LD_INT 3
63161: ARRAY
63162: STR
63163: PUSH
63164: LD_STRING ,
63166: STR
63167: PUSH
63168: LD_VAR 0 3
63172: PUSH
63173: LD_VAR 0 2
63177: ARRAY
63178: PUSH
63179: LD_INT 4
63181: ARRAY
63182: STR
63183: PUSH
63184: LD_STRING )
63186: STR
63187: PPUSH
63188: CALL_OW 559
63192: GO 63102
63194: POP
63195: POP
// end ; end ;
63196: LD_VAR 0 1
63200: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
63201: LD_EXP 78
63205: IFFALSE 63890
63207: GO 63209
63209: DISABLE
63210: LD_INT 0
63212: PPUSH
63213: PPUSH
63214: PPUSH
63215: PPUSH
63216: PPUSH
63217: PPUSH
63218: PPUSH
63219: PPUSH
63220: PPUSH
// begin enable ;
63221: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
63222: LD_ADDR_VAR 0 3
63226: PUSH
63227: LD_EXP 78
63231: PPUSH
63232: CALL 43904 0 1
63236: ST_TO_ADDR
// if not list then
63237: LD_VAR 0 3
63241: NOT
63242: IFFALSE 63246
// exit ;
63244: GO 63890
// for i := 1 to list do
63246: LD_ADDR_VAR 0 1
63250: PUSH
63251: DOUBLE
63252: LD_INT 1
63254: DEC
63255: ST_TO_ADDR
63256: LD_VAR 0 3
63260: PUSH
63261: FOR_TO
63262: IFFALSE 63888
// begin depot := list [ i ] [ 2 ] ;
63264: LD_ADDR_VAR 0 8
63268: PUSH
63269: LD_VAR 0 3
63273: PUSH
63274: LD_VAR 0 1
63278: ARRAY
63279: PUSH
63280: LD_INT 2
63282: ARRAY
63283: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
63284: LD_ADDR_VAR 0 5
63288: PUSH
63289: LD_VAR 0 3
63293: PUSH
63294: LD_VAR 0 1
63298: ARRAY
63299: PUSH
63300: LD_INT 1
63302: ARRAY
63303: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
63304: LD_VAR 0 8
63308: PPUSH
63309: CALL_OW 301
63313: PUSH
63314: LD_VAR 0 5
63318: PUSH
63319: LD_VAR 0 8
63323: PPUSH
63324: CALL_OW 255
63328: NONEQUAL
63329: OR
63330: IFFALSE 63359
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
63332: LD_ADDR_EXP 78
63336: PUSH
63337: LD_EXP 78
63341: PPUSH
63342: LD_VAR 0 8
63346: PPUSH
63347: LD_INT 0
63349: PPUSH
63350: CALL_OW 1
63354: ST_TO_ADDR
// exit ;
63355: POP
63356: POP
63357: GO 63890
// end ; x := list [ i ] [ 3 ] ;
63359: LD_ADDR_VAR 0 6
63363: PUSH
63364: LD_VAR 0 3
63368: PUSH
63369: LD_VAR 0 1
63373: ARRAY
63374: PUSH
63375: LD_INT 3
63377: ARRAY
63378: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
63379: LD_ADDR_VAR 0 7
63383: PUSH
63384: LD_VAR 0 3
63388: PUSH
63389: LD_VAR 0 1
63393: ARRAY
63394: PUSH
63395: LD_INT 4
63397: ARRAY
63398: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
63399: LD_ADDR_VAR 0 9
63403: PUSH
63404: LD_VAR 0 6
63408: PPUSH
63409: LD_VAR 0 7
63413: PPUSH
63414: LD_INT 16
63416: PPUSH
63417: CALL 42492 0 3
63421: ST_TO_ADDR
// if not cratesNearbyPoint then
63422: LD_VAR 0 9
63426: NOT
63427: IFFALSE 63433
// exit ;
63429: POP
63430: POP
63431: GO 63890
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
63433: LD_ADDR_VAR 0 4
63437: PUSH
63438: LD_INT 22
63440: PUSH
63441: LD_VAR 0 5
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 3
63452: PUSH
63453: LD_INT 60
63455: PUSH
63456: EMPTY
63457: LIST
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 91
63465: PUSH
63466: LD_VAR 0 8
63470: PUSH
63471: LD_INT 6
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 2
63481: PUSH
63482: LD_INT 25
63484: PUSH
63485: LD_INT 2
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 25
63494: PUSH
63495: LD_INT 16
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: LIST
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: PPUSH
63513: CALL_OW 69
63517: PUSH
63518: LD_VAR 0 8
63522: PPUSH
63523: CALL_OW 313
63527: PPUSH
63528: LD_INT 3
63530: PUSH
63531: LD_INT 60
63533: PUSH
63534: EMPTY
63535: LIST
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 2
63543: PUSH
63544: LD_INT 25
63546: PUSH
63547: LD_INT 2
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 25
63556: PUSH
63557: LD_INT 16
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: LIST
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PPUSH
63573: CALL_OW 72
63577: UNION
63578: ST_TO_ADDR
// if tmp then
63579: LD_VAR 0 4
63583: IFFALSE 63663
// begin tmp := ShrinkArray ( tmp , 3 ) ;
63585: LD_ADDR_VAR 0 4
63589: PUSH
63590: LD_VAR 0 4
63594: PPUSH
63595: LD_INT 3
63597: PPUSH
63598: CALL 40461 0 2
63602: ST_TO_ADDR
// for j in tmp do
63603: LD_ADDR_VAR 0 2
63607: PUSH
63608: LD_VAR 0 4
63612: PUSH
63613: FOR_IN
63614: IFFALSE 63657
// begin if IsInUnit ( j ) then
63616: LD_VAR 0 2
63620: PPUSH
63621: CALL_OW 310
63625: IFFALSE 63636
// ComExit ( j ) ;
63627: LD_VAR 0 2
63631: PPUSH
63632: CALL 40544 0 1
// AddComCollect ( j , x , y ) ;
63636: LD_VAR 0 2
63640: PPUSH
63641: LD_VAR 0 6
63645: PPUSH
63646: LD_VAR 0 7
63650: PPUSH
63651: CALL_OW 177
// end ;
63655: GO 63613
63657: POP
63658: POP
// exit ;
63659: POP
63660: POP
63661: GO 63890
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
63663: LD_ADDR_VAR 0 4
63667: PUSH
63668: LD_INT 22
63670: PUSH
63671: LD_VAR 0 5
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 91
63682: PUSH
63683: LD_VAR 0 8
63687: PUSH
63688: LD_INT 8
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 2
63698: PUSH
63699: LD_INT 34
63701: PUSH
63702: LD_INT 12
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 34
63711: PUSH
63712: LD_INT 51
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 34
63721: PUSH
63722: LD_INT 32
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 34
63731: PUSH
63732: LD_INT 89
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: LIST
63750: PPUSH
63751: CALL_OW 69
63755: ST_TO_ADDR
// if tmp then
63756: LD_VAR 0 4
63760: IFFALSE 63886
// begin for j in tmp do
63762: LD_ADDR_VAR 0 2
63766: PUSH
63767: LD_VAR 0 4
63771: PUSH
63772: FOR_IN
63773: IFFALSE 63884
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
63775: LD_VAR 0 2
63779: PPUSH
63780: CALL_OW 262
63784: PUSH
63785: LD_INT 3
63787: EQUAL
63788: PUSH
63789: LD_VAR 0 2
63793: PPUSH
63794: CALL_OW 261
63798: PUSH
63799: LD_INT 20
63801: GREATER
63802: OR
63803: PUSH
63804: LD_VAR 0 2
63808: PPUSH
63809: CALL_OW 314
63813: NOT
63814: AND
63815: PUSH
63816: LD_VAR 0 2
63820: PPUSH
63821: CALL_OW 263
63825: PUSH
63826: LD_INT 1
63828: NONEQUAL
63829: PUSH
63830: LD_VAR 0 2
63834: PPUSH
63835: CALL_OW 311
63839: OR
63840: AND
63841: IFFALSE 63882
// begin ComCollect ( j , x , y ) ;
63843: LD_VAR 0 2
63847: PPUSH
63848: LD_VAR 0 6
63852: PPUSH
63853: LD_VAR 0 7
63857: PPUSH
63858: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
63862: LD_VAR 0 2
63866: PPUSH
63867: LD_VAR 0 8
63871: PPUSH
63872: CALL_OW 172
// exit ;
63876: POP
63877: POP
63878: POP
63879: POP
63880: GO 63890
// end ;
63882: GO 63772
63884: POP
63885: POP
// end ; end ;
63886: GO 63261
63888: POP
63889: POP
// end ; end_of_file end_of_file
63890: PPOPN 9
63892: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
63893: LD_VAR 0 1
63897: PUSH
63898: LD_INT 200
63900: DOUBLE
63901: GREATEREQUAL
63902: IFFALSE 63910
63904: LD_INT 299
63906: DOUBLE
63907: LESSEQUAL
63908: IFTRUE 63912
63910: GO 63944
63912: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
63913: LD_VAR 0 1
63917: PPUSH
63918: LD_VAR 0 2
63922: PPUSH
63923: LD_VAR 0 3
63927: PPUSH
63928: LD_VAR 0 4
63932: PPUSH
63933: LD_VAR 0 5
63937: PPUSH
63938: CALL 44331 0 5
63942: GO 64021
63944: LD_INT 300
63946: DOUBLE
63947: GREATEREQUAL
63948: IFFALSE 63956
63950: LD_INT 399
63952: DOUBLE
63953: LESSEQUAL
63954: IFTRUE 63958
63956: GO 64020
63958: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
63959: LD_VAR 0 1
63963: PPUSH
63964: LD_VAR 0 2
63968: PPUSH
63969: LD_VAR 0 3
63973: PPUSH
63974: LD_VAR 0 4
63978: PPUSH
63979: LD_VAR 0 5
63983: PPUSH
63984: LD_VAR 0 6
63988: PPUSH
63989: LD_VAR 0 7
63993: PPUSH
63994: LD_VAR 0 8
63998: PPUSH
63999: LD_VAR 0 9
64003: PPUSH
64004: LD_VAR 0 10
64008: PPUSH
64009: LD_VAR 0 11
64013: PPUSH
64014: CALL 60602 0 11
64018: GO 64021
64020: POP
// end ;
64021: PPOPN 11
64023: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
64024: LD_VAR 0 1
64028: PPUSH
64029: LD_VAR 0 2
64033: PPUSH
64034: LD_VAR 0 3
64038: PPUSH
64039: LD_VAR 0 4
64043: PPUSH
64044: LD_VAR 0 5
64048: PPUSH
64049: CALL 44067 0 5
// end ; end_of_file
64053: PPOPN 5
64055: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
64056: LD_VAR 0 1
64060: PPUSH
64061: LD_VAR 0 2
64065: PPUSH
64066: LD_VAR 0 3
64070: PPUSH
64071: LD_VAR 0 4
64075: PPUSH
64076: LD_VAR 0 5
64080: PPUSH
64081: LD_VAR 0 6
64085: PPUSH
64086: CALL 48295 0 6
// end ;
64090: PPOPN 6
64092: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
64093: LD_INT 0
64095: PPUSH
// begin if not units then
64096: LD_VAR 0 1
64100: NOT
64101: IFFALSE 64105
// exit ;
64103: GO 64105
// end ;
64105: PPOPN 7
64107: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
64108: CALL 48266 0 0
// end ;
64112: PPOPN 1
64114: END
